void rotateImage(float direction, float angle) {
	//rotates the image in increments of degrees

	float col = 0;
	float row = 0;
	float rotatedCol = 0;
	float rotatedRow = 0;

	int interPixel = 0.0;

	//converting the angle to rad
	angle = angle * (PI / 180);

	//calculating the value of the sin and cos
	const float cosine = cosf(angle);
	const float sine = sinf(angle);

	//correction for the position
	const float centerRow = rowSize / 2;
	const float centerCol = colSize / 2;

	clearScreen();

	//the loop where we recompute where we place the pixels for rotation
	for (col = 0; col < colSize; col++) {
		for (row = 0; row < rowSize; row++) {


			//correcting the position to center
			row = row - centerRow;
			col = col - centerCol;

			//calculating the new position of the row and col
			rotatedRow = (row * cosine) - (col * sine);
			rotatedCol = (row * sine) + (col * cosine);

			//correcting the position to center
			rotatedRow = rotatedRow + centerRow;
			rotatedCol = rotatedCol + centerCol;

			row = row + centerRow;
			col = col + centerCol;

			/**********************************
			 *
			 *		 BEGIN Binary Interpolation
			 *
			 **********************************/
			float floorCol = floorf(col);
			float floorRow = floorf(row);

			interPixel = (1-(col-floorCol))*(1-(row-floorRow))*getPixelFromArray(floorCol, floorRow)
						+((col-floorCol))*(1-(row-floorRow))*getPixelFromArray((floorCol+1), floorRow)
						+(1-(col-floorCol))*((row-floorRow))*getPixelFromArray((floorCol), (floorRow+1))
						+((col-floorCol))*((row-floorRow))*getPixelFromArray((floorCol+1), (floorRow+1));



			/**********************************
			 *
			 *		 END Binary Interpolation
			 *
			 **********************************/

			//displaying the rotated image
			drawPixel((int) roundf(rotatedCol), (int) roundf(rotatedRow), interPixel);
		}
	}
}
