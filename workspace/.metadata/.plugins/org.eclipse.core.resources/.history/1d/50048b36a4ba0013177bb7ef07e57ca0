/*
 * Fractal.c
 *
 *  Created on: Mar 31, 2014
 *      Author: mccartjj
 */

#include "Fractal.h"
#include <altera_up_avalon_video_pixel_buffer_dma.h> //to swap front and back buffer
#include <altera_avalon_performance_counter.h>
#include <math.h>
#include <stdlib.h>
#include "alt_types.h"
#include "system.h"
#include <altera_avalon_mailbox.h>

	extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;
	extern alt_u8 *myImage;

void setup(void){
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter){
	int color = iter;
	return color;
}

int mandelbrot(int row, int col){
	int iter = 0;
	float x0 = row;
	float y0 = col;
	float x = 0;
	float y = 0;
	float z = 0;
	while((x*x + y*y) <= 4 && iter < maxIter){

	}
	return iter;
}

void drawFrame(void){
	int i = 0;
	int j = 0;
	int result;
	for(int i = 0; i < row; i++){
		for(int j = 0; j < col; j++){
//			result = mandelbrot(i,j);
			color = genColor(result);
			drawPixel(color, i,j);
		}
	}
}

void drawPixel(int color, int row, int col){
	alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, row, col);
}

void barrier(alt_u8 barrierNum) {
	alt_u32 msg;
	alt_mailbox_dev *mb[NUM_CPUS];
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}

	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
			altera_avalon_mailbox_post(mb[i], barrierNum);
//			printf("cpu %0d post msg \n", cpu);
		}
	}

	for (i = 0; i < NUM_CPUS - 1; i++) {
		do {
			msg = altera_avalon_mailbox_pend(mb[cpu]);
		}
		while (msg != barrierNum);
//		printf("cpu %0d recv msg \n", cpu);
	}

	for (i = 0; i < NUM_CPUS; i++) {
		altera_avalon_mailbox_close(mb[i]);
	}
}
