/*
 * Fractal.c
 *
 *  Created on: Mar 31, 2014
 *      Author: Silas Rubinson
 */

#include "Fractal.h"
#include <altera_up_avalon_video_pixel_buffer_dma.h> //to swap front and back buffer
#include <altera_avalon_performance_counter.h>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include "alt_types.h"
#include "system.h"
#include <altera_avalon_mailbox.h>

float targetArrayXYMaster[2] = { 0, 0 };
volatile float *targetArrayXY = targetArrayXYMaster;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {

	volatile void **buffaddr = (volatile void**) 0x31FD;

	//moving the frame buffer to work with the high resolution
#ifdef MASTER
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
	volatile alt_u8 pixel_buffer_memory[2359296];
	alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
	alt_up_pixel_buffer_dma_swap_buffers(myPixelBuffer);
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(myPixelBuffer)) {
		alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
	}
	*buffaddr = pixel_buffer_memory;
#endif

	barrier(0);

#ifndef MASTER
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");

	myPixelBuffer->back_buffer_start_address = (unsigned int) *buffaddr;
#endif

	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

//makes the color for display
int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
		color = black;
	}
	else {
		int red = iter;
		int green = iter * 6;
		int blue = iter;

		//saturating the colors
		if (red > 31)
			red = 31;
		if (green > 63)
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
	}
	return color;
}

//this calculates the math to find if a location is in the Mandelbrot set
int mandelbrot(float x0, float y0, float *xOut, float *yOut) {
	int iter = 0;
	//	int cpu = __builtin_rdctl(5);

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;

		/*
		 if (cpu == 3) {
		 endTimeAndPrint();
		 }//*/

		x = xtemp;
		iter++;

	}
	*xOut = x;
	*yOut = y;

	return iter;
}

void drawFrame(int zoom) {
	int i;
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
	int recalculateTargetFlag = 15;
	float x = 0.0;
	float y = 0.0;
	float y0 = 0.0;
	float x0 = 0.0;

	float minX = 0;
	float maxX = 0;
	float minY = 0;
	float maxY = 0;

	if (zoom == 0) {
		minX = -2.5;
		maxX = 1;
		minY = -1;
		maxY = 1;
	}

	else {
		minX = targetArrayXY[0] - (1 / powf(1.5, zoom));
		maxX = targetArrayXY[0] + (1 / powf(1.5, zoom));
		minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
		maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));
	}

	for (i = cpu; i < rowSize; i = i + NUM_CPUS) {
		y0 = ((((float) (rowSize - 1) - (float) i) / (float) rowSize) * (maxY - minY)) + minY;

		for (j = 0; j < colSize; j++) {
			x0 = (((float) j / (float) colSize) * (maxX - minX)) + minX;

			result = mandelbrot(x0, y0, &x, &y);

			//recalculates the x and y
			if (cpu == 3) {
				if (recalculateTargetFlag) {
					if (result > (maxIter - 2)) {
						targetArrayXYMaster[0] = x;
						targetArrayXYMaster[1] = y;
						recalculateTargetFlag = recalculateTargetFlag - 1;
					}
				}
			}

			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, j, i);
		}
	}

}

void barrier(alt_u8 barrierNum) {
	alt_u32 msg;
	alt_mailbox_dev *mb[NUM_CPUS];
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
			}
		}
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);

		if (msg != 0) {
			targetArrayXY = (float *) msg;
		}
	}
	for (i = 0; i < NUM_CPUS; i++) {
		altera_avalon_mailbox_close(mb[i]);
	}
}

void clearScreen(void) {
	//clears the part of the screen controlled by the pixel buffer
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
}

//starts the performance counter
void startTimer(void) {
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
	PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
}

//stops the timer and prints out the number of cycles
void endTimeAndPrint(void) {
	unsigned long long cycles = 0;

	PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
	PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
	cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);

	printf("Cycles : %llu \n\n", (cycles));
}
