/*
 * VideoFunctions.c
 *
 *  Created on: Feb 10, 2014
 *      Author: John McCarthy and Silas Rubinson, I suppose.
 */

#include <altera_up_avalon_video_character_buffer_with_dma.h> //to write chars to video
#include <altera_up_avalon_video_pixel_buffer_dma.h> //to swap front and back buffer
#include <math.h>
#include <stdlib.h>
#include "VideoFunctions.h"
#include "alt_types.h"
#include "system.h"

extern FILE *myFile;
extern alt_u8 *myImage;
extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setUpImage(void) {
	//all the set up to use this file

	myFile = fopen("myFileSystem/myfile.dat", "rb");
	if (myFile == NULL) {
		perror("error opening dataFile");
	}
	myImage = (alt_u8 *) malloc(rowSize * colSize * dimension);
	fread(myImage, sizeof(alt_u8), rowSize * colSize * dimension, myFile);
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev(
			"/dev/video_pixel_buffer_dma_0");
}

void setPixel(int row, int col, int color, int data) {
	//sets the value of the pixel at the row and col
	myImage[row * rowSize * dimension + col * dimension + color] = data;
}

alt_u8 getPixel(int row, int col, int color) {
	//returns the value of the pixel at the row and col
	return myImage[row * rowSize * dimension + col * dimension + color];
}

void drawPixel(int i, int j)
{
	alt_up_pixel_buffer_dma_draw(myPixelBuffer, (myImage[(i * rowSize
						* dimension) + j * 3 + 2]) + (myImage[(i * rowSize
						* dimension) + j * 3 + 1] << 8) + (myImage[(i * rowSize
						* dimension) + j * 3 + 0] << 16), j, i);
}

void clearScreen(void) {
	//clears the part of the screen controlled by the pixel buffer
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
}

void printCharToScreen(int row, int col, char *input) {
	//clears the character buffer before replacing it. also leads to flashy lights.

	alt_up_char_buffer_dev *myCharBuffer;
	myCharBuffer = alt_up_char_buffer_open_dev(
			"/dev/video_character_buffer_with_dma_0");
	if (!myCharBuffer) {
		printf("error opening character buffer \n also shits broken yo \n");
	}
	alt_up_char_buffer_clear(myCharBuffer);
	alt_up_char_buffer_string(myCharBuffer, input, row, col);
}
void rotateImage(float direction, float angle){
	//	displays the image loaded into the array myImage

	clearScreen();
	int i = 0;
	int j = 0;
	for (i = 0; i < colSize; i++) {
		for (j = 0; j < rowSize; j++) {
			drawPixel(i, j);
		}
	}
}

void scaleImage(float scalingFactor){
	//rotates the image in increments of degrees
	int i = 0;
	int j = 0;

	//the loop where we recompute where we place the pixels for rotation
	for (i = 0; i < colSize; i++) {
		for (j = 0; j < rowSize; j++) {

		}
	}

}

void scaleImage(int precentage) {
	//scales the image by the percentage given
	int i = 0;
	int j = 0;

	//the loop where we recompute where we place the pixels for scaling
	for (i = 0; i < colSize; i++) {
		for (j = 0; j < rowSize; j++) {

		}
	}
}
