
Fractal_cpu3.elf:     file format elf32-littlenios2
Fractal_cpu3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00e001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00e00000 paddr 0x00e00000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00e00020 paddr 0x00e00020 align 2**12
         filesz 0x00011178 memsz 0x00011178 flags r-x
    LOAD off    0x00012198 vaddr 0x00e11198 paddr 0x00e12d6c align 2**12
         filesz 0x00001bd4 memsz 0x00001bd4 flags rw-
    LOAD off    0x00014940 vaddr 0x00e14940 paddr 0x00e14940 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00e00000  00e00000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00e00020  00e00020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010ae0  00e001b4  00e001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000504  00e10c94  00e10c94  00011c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd4  00e11198  00e12d6c  00012198  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  00e14940  00e14940  00014940  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00013d6c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001078  00000000  00000000  00013d90  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001bcc  00000000  00000000  00014e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002a1c2  00000000  00000000  000169d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a099  00000000  00000000  00040b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00019ad1  00000000  00000000  0004ac2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000212c  00000000  00000000  00064700  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c08  00000000  00000000  0006682c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e3e2  00000000  00000000  00069434  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00077818  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000cc0  00000000  00000000  00077848  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007c24b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007c24e  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0007c253  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0007c254  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0007c258  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0007c25c  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0007c260  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0007c26b  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0007c276  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0007c281  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0007c28c  2**0
                  CONTENTS, READONLY
 28 .jdi          0000ff9d  00000000  00000000  0007c2ac  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000d9e6e  00000000  00000000  0008c249  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00e00000 l    d  .entry	00000000 .entry
00e00020 l    d  .exceptions	00000000 .exceptions
00e001b4 l    d  .text	00000000 .text
00e10c94 l    d  .rodata	00000000 .rodata
00e11198 l    d  .rwdata	00000000 .rwdata
00e14940 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00e001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Fractal.c
00000000 l    df *ABS*	00000000 Project.c
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 ef_pow.c
00e12d00 l     O .rwdata	00000008 bp
00e12d08 l     O .rwdata	00000008 dp_l
00e12d10 l     O .rwdata	00000008 dp_h
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_rint.c
00e10d1c l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_isnan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00e01cb4 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00e0258c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00e11198 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00e039c8 l     F .text	00000058 __sprint_r
00e10ec2 l     O .rodata	00000010 blanks.3452
00e10eb2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00e05a2c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00e07428 l     F .text	00000058 std
00e07534 l     F .text	00000008 __fp_lock
00e0753c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00e12d28 l     O .rwdata	00000004 charset
00e10ef0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00e11038 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00e0c010 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00e0c258 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00e0c2b8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00e0c3b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00e0c4d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00e0c5b8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00e0c714 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00e0c940 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00e12d4c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00e0cbdc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00e11b54 l     O .rwdata	00001060 jtag_uart_3
00e12bb4 l     O .rwdata	0000003c mailbox_0
00e12bf0 l     O .rwdata	0000003c mailbox_1
00e12c2c l     O .rwdata	0000003c mailbox_2
00e12c68 l     O .rwdata	0000003c mailbox_3
00e12ca4 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00e0cee8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00e0d128 l     F .text	00000228 altera_avalon_jtag_uart_irq
00e0d350 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
00e0db24 l     F .text	0000006c alt_avalon_mutex_reg
00e0db90 l     F .text	00000060 alt_get_errno
00e0dd24 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00e0def4 l     F .text	0000007c alt_mutex_trylock
00e0dfc8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00e0fb38 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00e0fff0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00e1012c l     F .text	000000dc alt_file_locked
00e10390 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00e10a10 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00e10bc4 l     F .text	00000040 alt_sim_halt
00e00200 g     F .text	0000006c genColor
00e091e4 g     F .text	00000094 _mprec_log10
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
00e092d0 g     F .text	00000088 __any_on
00e0a9dc g     F .text	00000070 _isatty_r
00e11010 g     O .rodata	00000028 __mprec_tinytens
00e0c774 g     F .text	0000006c alt_main
00e0dd74 g     F .text	000000a8 altera_avalon_mailbox_pend
00e0efec g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00e037cc g     F .text	000000a0 _puts_r
00e149a0 g     O .bss	00000100 alt_irq
00e0aa4c g     F .text	00000078 _lseek_r
00e12d6c g       *ABS*	00000000 __flash_rwdata_start
00e0ba8c g     F .text	00000088 __eqdf2
00e14c30 g       *ABS*	00000000 __alt_heap_start
00e0de1c g     F .text	000000d8 altera_avalon_mailbox_get
00e03754 g     F .text	00000044 printf
00e0a4a8 g     F .text	00000068 __sseek
00e07490 g     F .text	000000a4 __sinit
00e0e35c g     F .text	00000024 alt_get_cpu_freq
00e08168 g     F .text	00000084 _setlocale_r
00e07590 g     F .text	00000068 __sfmoreglue
00e0c800 g     F .text	00000020 __malloc_unlock
00e0214c g     F .text	00000174 __divsf3
00e08c60 g     F .text	000000e0 memmove
00e07580 g     F .text	00000010 _cleanup
00e00814 g     F .text	00000458 powf
00e0e088 g     F .text	00000040 altera_avalon_mutex_trylock
00e09358 g     F .text	000000bc _Balloc
00e0e3c0 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00e0bb14 g     F .text	00000088 __gtdf2
00e03744 g     F .text	00000010 __errno
00e0e380 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00e00000 g     F .entry	0000001c __reset
00e0e124 g     F .text	0000007c altera_avalon_mutex_is_mine
00e00020 g       *ABS*	00000000 __flash_exceptions_start
00e0a968 g     F .text	00000074 _fstat_r
00e1495c g     O .bss	00000004 errno
00e02d70 g     F .text	00000038 __make_dp
00e03204 g     F .text	0000002c __make_fp
00e14964 g     O .bss	00000004 alt_argv
00e1acf8 g       *ABS*	00000000 _gp
00e01e98 g     F .text	00000070 __subsf3
00e0e560 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00006000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
00e119d4 g     O .rwdata	00000180 alt_fd_list
00e0fc60 g     F .text	00000094 alt_find_dev
00e08bc0 g     F .text	000000a0 memcpy
00e07574 g     F .text	0000000c _cleanup_r
00e0bcac g     F .text	000000f8 __floatsidf
00e100b4 g     F .text	00000078 alt_io_redirect
00e0bc24 g     F .text	00000088 __ltdf2
00e10c94 g       *ABS*	00000000 __DTOR_END__
00e0386c g     F .text	00000014 puts
00e10594 g     F .text	00000020 altera_nios2_irq_init
00e09134 g     F .text	000000b0 __ratio
00e0dc68 g     F .text	000000bc altera_avalon_mailbox_post
00e0e610 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00e0d568 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00e03798 g     F .text	00000034 _printf_r
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00e0c14c g     F .text	00000008 __udivsi3
00e0c418 g     F .text	000000c0 isatty
00e10f20 g     O .rodata	000000c8 __mprec_tens
00e0dc48 g     F .text	00000020 altera_avalon_mailbox_close
00e0ec9c g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00e08144 g     F .text	00000008 __locale_charset
00e02428 g     F .text	00000078 __lesf2
00e1078c g     F .text	00000090 alt_icache_flush
00e14950 g     O .bss	00000004 __malloc_top_pad
00e0e2fc g     F .text	00000040 perf_get_num_starts
00e12d24 g     O .rwdata	00000004 __mb_cur_max
00e0814c g     F .text	0000000c _localeconv_r
00e09a50 g     F .text	0000003c __i2b
00e07b28 g     F .text	0000049c __sfvwrite_r
00e01b14 g     F .text	0000001c finitef
00e0a430 g     F .text	00000070 _sbrk_r
00e0f480 g     F .text	000000d0 helper_plot_pixel
00e01b04 g     F .text	00000010 fabsf
00e0aac4 g     F .text	00000078 _read_r
00e11598 g     O .rwdata	0000000c __lc_ctype
00e12d44 g     O .rwdata	00000004 alt_max_fd
00e03544 g     F .text	00000138 __unpack_d
00e0a844 g     F .text	00000110 _fclose_r
00e073f4 g     F .text	00000034 fflush
00e14954 g     O .bss	00000004 __malloc_max_sbrked_mem
00e02538 g     F .text	00000054 __extendsfdf2
00e01b30 g     F .text	00000018 isnanf
00e02a1c g     F .text	00000074 __adddf3
00e09014 g     F .text	00000120 __b2d
00e0e644 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
00e0b118 g     F .text	000005b0 __umoddi3
00e0c624 g     F .text	000000f0 lseek
00e0e1a0 g     F .text	00000058 altera_avalon_mutex_first_lock
00e12cfc g     O .rwdata	00000004 targetY
00e12d18 g     O .rwdata	00000004 __fdlib_version
00e12d20 g     O .rwdata	00000004 _global_impure_ptr
00e09dcc g     F .text	000005f4 _realloc_r
00e14c30 g       *ABS*	00000000 __bss_end
00e0fef8 g     F .text	000000f8 alt_iic_isr_register
00e0e7a8 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00e10488 g     F .text	0000010c alt_tick
00e0ab3c g     F .text	000005dc __udivdi3
00e10fe8 g     O .rodata	00000028 __mprec_bigtens
00e09cac g     F .text	00000120 __s2b
00e0be7c g     F .text	00000194 __floatunsidf
00e08f34 g     F .text	00000060 __mcmp
00e0755c g     F .text	00000018 __fp_lock_all
00e0feb0 g     F .text	00000048 alt_ic_irq_enabled
00e103f0 g     F .text	00000098 alt_alarm_stop
00e1496c g     O .bss	00000004 alt_irq_active
00e000ec g     F .exceptions	000000c8 alt_irq_handler
00e119ac g     O .rwdata	00000028 alt_dev_null
00e0034c g     F .text	000000e8 barrier
00e0df70 g     F .text	00000058 altera_avalon_mutex_open
00e018f4 g     F .text	00000210 rint
00e03094 g     F .text	000000c8 __unpack_f
00e0fa40 g     F .text	00000044 alt_dcache_flush_all
00e08e00 g     F .text	00000070 __hi0bits
00e0f3bc g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
00e0bda4 g     F .text	000000d8 __fixdfsi
00e12d6c g       *ABS*	00000000 __ram_rwdata_end
00e12d3c g     O .rwdata	00000008 alt_dev_list
00e0cabc g     F .text	00000120 write
00e0f550 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00e02338 g     F .text	00000078 __gtsf2
00e12d58 g     O .rwdata	00000008 alt_mutex_list
00e11198 g       *ABS*	00000000 __ram_rodata_end
00e0c2e4 g     F .text	000000d4 fstat
00e09b8c g     F .text	00000120 __pow5mult
00e14944 g     O .bss	00000004 __nlocale_changed
00e0c154 g     F .text	00000008 __umodsi3
00e14c30 g       *ABS*	00000000 end
00e02f34 g     F .text	00000160 __pack_f
00e14940 g     O .bss	00000004 myPixelBuffer
00e0d068 g     F .text	000000c0 altera_avalon_jtag_uart_init
00e10c90 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00e02eb4 g     F .text	00000080 __clzsi2
00e0d78c g     F .text	00000240 altera_avalon_jtag_uart_write
00e0d9cc g     F .text	00000158 alt_avalon_mailbox_init
00e07480 g     F .text	00000004 __sfp_lock_acquire
00e08adc g     F .text	000000e4 memchr
00e03a20 g     F .text	00001eac ___vfprintf_internal_r
00e038f4 g     F .text	00000060 _sprintf_r
00e07814 g     F .text	00000314 _free_r
00e10a14 g     F .text	000001b0 __call_exitprocs
00e12cf8 g     O .rwdata	00000004 targetX
00e14948 g     O .bss	00000004 __mlocale_changed
00e12d30 g     O .rwdata	00000004 __malloc_sbrk_base
00e001b4 g     F .text	0000004c _start
00e14970 g     O .bss	00000004 _alt_tick_rate
00e0971c g     F .text	0000014c __lshift
00e14974 g     O .bss	00000004 _alt_nticks
00e0c820 g     F .text	00000120 read
00e0cc70 g     F .text	00000278 alt_sys_init
00e024a0 g     F .text	00000098 __floatsisf
00e108dc g     F .text	00000134 __register_exitproc
00e0e0c8 g     F .text	0000005c altera_avalon_mutex_unlock
00e09868 g     F .text	000001e8 __multiply
00e0d400 g     F .text	00000074 altera_avalon_jtag_uart_close
00e11198 g       *ABS*	00000000 __ram_rwdata_start
00e10c94 g       *ABS*	00000000 __ram_rodata_start
00e14978 g     O .bss	00000028 __malloc_current_mallinfo
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00e022c0 g     F .text	00000078 __eqsf2
00e09414 g     F .text	0000017c __d2b
00e0cf20 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00e106d4 g     F .text	000000b8 alt_get_fd
00e0367c g     F .text	000000c8 __fpcmp_parts_d
00e0a7d4 g     F .text	00000070 _close_r
00e00464 g     F .text	00000284 drawFrame
00e0e1f8 g     F .text	000000b0 perf_get_section_time
00e10868 g     F .text	00000074 memcmp
00e0cfd0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00e14c30 g       *ABS*	00000000 __alt_stack_base
00e0d018 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00e058f0 g     F .text	0000013c __swsetup_r
00e02a90 g     F .text	00000258 __divdf3
00e075f8 g     F .text	000000f0 __sfp
00e09278 g     F .text	00000058 __copybits
00e0e2a8 g     F .text	00000054 perf_get_total_time
00e115a4 g     O .rwdata	00000408 __malloc_av_
00e0748c g     F .text	00000004 __sinit_lock_release
00e0b6c8 g     F .text	000003c4 __muldf3
00e00c6c g     F .text	00000b14 __ieee754_powf
00e0a58c g     F .text	00000060 __sread
00e10d2c g     O .rodata	00000010 __thenan_sf
00e105b4 g     F .text	00000120 alt_find_file
00e0fa84 g     F .text	000000b4 alt_dev_llist_insert
00e0c7e0 g     F .text	00000020 __malloc_lock
00e0ca00 g     F .text	000000bc sbrk
00e01b50 g     F .text	0000014c scalbnf
00e071f8 g     F .text	000001fc _fflush_r
00e0a720 g     F .text	000000b4 _calloc_r
00e14940 g       *ABS*	00000000 __bss_start
00e08d40 g     F .text	00000098 memset
00e01780 g     F .text	0000016c __ieee754_sqrtf
00e006e8 g     F .text	0000012c main
00e14968 g     O .bss	00000004 alt_envp
00e14958 g     O .bss	00000004 __malloc_max_total_mem
00e0e5b8 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
00e0cf78 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00e023b0 g     F .text	00000078 __ltsf2
00e0a4a0 g     F .text	00000008 __sclose
00e018ec g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
00e0a954 g     F .text	00000014 fclose
00e02da8 g     F .text	00000074 __truncdfsf2
00e14aa0 g     O .bss	00000190 _atexit0
00e0e048 g     F .text	00000040 altera_avalon_mutex_lock
00e05c44 g     F .text	000015b4 _dtoa_r
00e0839c g     F .text	00000740 _malloc_r
00e12d48 g     O .rwdata	00000004 alt_errno
00e0808c g     F .text	000000b8 _fwalk
00e0c08c g     F .text	00000060 __divsi3
00e10d3c g     O .rodata	00000014 __thenan_df
00e076e8 g     F .text	0000012c _malloc_trim_r
00e10c94 g       *ABS*	00000000 __CTOR_END__
00e01f6c g     F .text	000001e0 __mulsf3
00e0a5ec g     F .text	000000bc strcmp
00e10c94 g       *ABS*	00000000 __flash_rodata_start
00e10c94 g       *ABS*	00000000 __DTOR_LIST__
00e02ce8 g     F .text	00000088 __nedf2
01880000 g       *ABS*	00000000 __alt_mem_sram_0
00e0cc3c g     F .text	00000034 alt_irq_init
00e0c9a0 g     F .text	00000060 alt_release_fd
00e01c9c g     F .text	00000018 copysignf
00e03880 g     F .text	00000074 sprintf
00e10d50 g     O .rodata	00000100 __clz_tab
00e1494c g     O .bss	00000004 _PathLocale
00e1081c g     F .text	00000014 atexit
00e0a6a8 g     F .text	00000078 _write_r
00e081ec g     F .text	0000001c setlocale
00e01b48 g     F .text	00000008 nanf
00e12d1c g     O .rwdata	00000004 _impure_ptr
00e14960 g     O .bss	00000004 alt_argc
00e0fbfc g     F .text	00000064 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00e00020 g       .exceptions	00000000 alt_irq_entry
00e08f94 g     F .text	00000080 __ulp
00e0a3c0 g     F .text	00000040 __isinfd
00e07544 g     F .text	00000018 __fp_unlock_all
00e12d50 g     O .rwdata	00000008 alt_mailbox_list
00e00434 g     F .text	00000030 setup
00e12d34 g     O .rwdata	00000008 alt_fs_list
00e00020 g       *ABS*	00000000 __ram_exceptions_start
00e08158 g     F .text	00000010 localeconv
00e0fd24 g     F .text	00000050 alt_ic_isr_register
00e12d6c g       *ABS*	00000000 _edata
00e14c30 g       *ABS*	00000000 _end
00e001b4 g       *ABS*	00000000 __ram_exceptions_end
00e0d474 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00e0fe10 g     F .text	000000a0 alt_ic_irq_disable
00e0a510 g     F .text	0000007c __swrite
00e12d2c g     O .rwdata	00000004 __malloc_trim_threshold
00e0e33c g     F .text	00000020 alt_get_performance_counter_base
00e10830 g     F .text	00000038 exit
00e07fc4 g     F .text	000000c8 _fwalk_reent
00e09590 g     F .text	0000018c __mdiff
00e0026c g     F .text	000000d4 mandelbrot
00e0c0ec g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00e00020 g     F .exceptions	00000000 alt_exception
00e07484 g     F .text	00000004 __sfp_lock_release
00e0dbf0 g     F .text	00000058 altera_avalon_mailbox_open
00e0315c g     F .text	000000a8 __fpcmp_parts_f
00e10c04 g     F .text	00000020 _exit
00e0a400 g     F .text	00000030 __isnand
00e0f8ec g     F .text	00000154 alt_alarm_start
00e02e1c g     F .text	00000098 __muldi3
00e08208 g     F .text	00000194 __smakebuf_r
00e03954 g     F .text	00000074 strlen
00e10208 g     F .text	00000188 open
00e0bb9c g     F .text	00000088 __gedf2
00e00340 g     F .text	0000000c clearScreen
00e0fcf4 g     F .text	00000030 alt_icache_flush_all
00e12d60 g     O .rwdata	00000004 alt_priority_mask
00e0fd74 g     F .text	0000009c alt_ic_irq_enable
00e058cc g     F .text	00000024 __vfprintf_internal
00e0e028 g     F .text	00000020 altera_avalon_mutex_close
00e0299c g     F .text	00000080 __subdf3
00e08e70 g     F .text	000000c4 __lo0bits
00e12d64 g     O .rwdata	00000008 alt_alarm_list
00e0fb98 g     F .text	00000064 _do_ctors
00e0c15c g     F .text	000000fc close
00e01f08 g     F .text	00000064 __addsf3
00e0c538 g     F .text	00000080 alt_load
00e03230 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00e07488 g     F .text	00000004 __sinit_lock_acquire
00e09a8c g     F .text	00000100 __multadd
00e08dd8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00e00000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  e00000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  e00004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  e00008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  e0000c:	00bffd16 	blt	zero,r2,e00004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  e00010:	00403834 	movhi	at,224
    ori r1, r1, %lo(_start)
  e00014:	08406d14 	ori	at,at,436
    jmp r1
  e00018:	0800683a 	jmp	at
  e0001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

00e00020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  e00020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  e00024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  e00028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  e0002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  e00030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  e00034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  e00038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  e0003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  e00040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  e00044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  e00048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  e0004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  e00050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  e00054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  e00058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  e0005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  e00060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  e00064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  e00068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  e0006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  e00070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  e00074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  e00078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  e0007c:	10000326 	beq	r2,zero,e0008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  e00080:	20000226 	beq	r4,zero,e0008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  e00084:	0e000ec0 	call	e000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  e00088:	00000306 	br	e00098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  e0008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  e00090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  e00094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  e00098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  e0009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  e000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  e000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  e000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  e000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  e000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  e000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  e000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  e000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  e000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  e000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  e000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e000e8:	ef80083a 	eret

00e000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  e000ec:	defff904 	addi	sp,sp,-28
  e000f0:	dfc00615 	stw	ra,24(sp)
  e000f4:	df000515 	stw	fp,20(sp)
  e000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  e000fc:	0005313a 	rdctl	r2,ipending
  e00100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  e00104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  e00108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  e0010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  e00110:	00800044 	movi	r2,1
  e00114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  e00118:	e0ffff17 	ldw	r3,-4(fp)
  e0011c:	e0bffe17 	ldw	r2,-8(fp)
  e00120:	1884703a 	and	r2,r3,r2
  e00124:	1005003a 	cmpeq	r2,r2,zero
  e00128:	1000161e 	bne	r2,zero,e00184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  e0012c:	e0bffd17 	ldw	r2,-12(fp)
  e00130:	00c03874 	movhi	r3,225
  e00134:	18d26804 	addi	r3,r3,18848
  e00138:	100490fa 	slli	r2,r2,3
  e0013c:	10c5883a 	add	r2,r2,r3
  e00140:	11400017 	ldw	r5,0(r2)
  e00144:	e0bffd17 	ldw	r2,-12(fp)
  e00148:	00c03874 	movhi	r3,225
  e0014c:	18d26804 	addi	r3,r3,18848
  e00150:	100490fa 	slli	r2,r2,3
  e00154:	10c5883a 	add	r2,r2,r3
  e00158:	10800104 	addi	r2,r2,4
  e0015c:	11000017 	ldw	r4,0(r2)
  e00160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  e00164:	0005313a 	rdctl	r2,ipending
  e00168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  e0016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  e00170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  e00174:	e0bfff17 	ldw	r2,-4(fp)
  e00178:	1004c03a 	cmpne	r2,r2,zero
  e0017c:	103fe31e 	bne	r2,zero,e0010c <alt_irq_handler+0x20>
  e00180:	00000706 	br	e001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  e00184:	e0bffe17 	ldw	r2,-8(fp)
  e00188:	1085883a 	add	r2,r2,r2
  e0018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  e00190:	e0bffd17 	ldw	r2,-12(fp)
  e00194:	10800044 	addi	r2,r2,1
  e00198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  e0019c:	003fde06 	br	e00118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  e001a0:	e037883a 	mov	sp,fp
  e001a4:	dfc00117 	ldw	ra,4(sp)
  e001a8:	df000017 	ldw	fp,0(sp)
  e001ac:	dec00204 	addi	sp,sp,8
  e001b0:	f800283a 	ret

Disassembly of section .text:

00e001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  e001b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
  e001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  e001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  e001c0:	00bffd16 	blt	zero,r2,e001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  e001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  e001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  e001cc:	06803874 	movhi	gp,225
    ori gp, gp, %lo(_gp)
  e001d0:	d6ab3e14 	ori	gp,gp,44280
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  e001d4:	00803874 	movhi	r2,225
    ori r2, r2, %lo(__bss_start)
  e001d8:	10925014 	ori	r2,r2,18752

    movhi r3, %hi(__bss_end)
  e001dc:	00c03874 	movhi	r3,225
    ori r3, r3, %lo(__bss_end)
  e001e0:	18d30c14 	ori	r3,r3,19504

    beq r2, r3, 1f
  e001e4:	10c00326 	beq	r2,r3,e001f4 <_start+0x40>

0:
    stw zero, (r2)
  e001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  e001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  e001f0:	10fffd36 	bltu	r2,r3,e001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  e001f4:	0e0c5380 	call	e0c538 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  e001f8:	0e0c7740 	call	e0c774 <alt_main>

00e001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  e001fc:	003fff06 	br	e001fc <alt_after_alt_main>

00e00200 <genColor>:
	int color = 0;
	if (iter == maxIter) {
		color = black;
	}
	else {
		int red = iter * 2;
  e00200:	2107883a 	add	r3,r4,r4
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  e00204:	00801904 	movi	r2,100
			red = 255;
		if (green > 255)
			green = 255;
		if (blue > 255)
			blue = 255;
		color = (red << 16) + (green << 8) + (blue);
  e00208:	200a90fa 	slli	r5,r4,3
  e0020c:	01c03fc4 	movi	r7,255
  e00210:	180d883a 	mov	r6,r3
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  e00214:	0011883a 	mov	r8,zero
  e00218:	20800926 	beq	r4,r2,e00240 <genColor+0x40>
		color = black;
	}
	else {
		int red = iter * 2;
		int green = iter * 8;
		int blue = iter * 3;
  e0021c:	1905883a 	add	r2,r3,r4
			red = 255;
		if (green > 255)
			green = 255;
		if (blue > 255)
			blue = 255;
		color = (red << 16) + (green << 8) + (blue);
  e00220:	1009883a 	mov	r4,r2
  e00224:	39400d16 	blt	r7,r5,e0025c <genColor+0x5c>
  e00228:	2806923a 	slli	r3,r5,8
  e0022c:	39000816 	blt	r7,r4,e00250 <genColor+0x50>
  e00230:	39800516 	blt	r7,r6,e00248 <genColor+0x48>
  e00234:	3004943a 	slli	r2,r6,16
  e00238:	2085883a 	add	r2,r4,r2
  e0023c:	1891883a 	add	r8,r3,r2
	}
	return color;
}
  e00240:	4005883a 	mov	r2,r8
  e00244:	f800283a 	ret
			red = 255;
		if (green > 255)
			green = 255;
		if (blue > 255)
			blue = 255;
		color = (red << 16) + (green << 8) + (blue);
  e00248:	380d883a 	mov	r6,r7
  e0024c:	003ff906 	br	e00234 <genColor+0x34>
  e00250:	3809883a 	mov	r4,r7
  e00254:	39bff70e 	bge	r7,r6,e00234 <genColor+0x34>
  e00258:	003ffb06 	br	e00248 <genColor+0x48>
  e0025c:	380b883a 	mov	r5,r7
  e00260:	2806923a 	slli	r3,r5,8
  e00264:	393ff20e 	bge	r7,r4,e00230 <genColor+0x30>
  e00268:	003ff906 	br	e00250 <genColor+0x50>

00e0026c <mandelbrot>:
	}
	return color;
}

int mandelbrot(int cRow, int cCol, float x0, float y0) {
  e0026c:	defff704 	addi	sp,sp,-36
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  e00270:	0005883a 	mov	r2,zero
		y = 2 * x * y + y0;
  e00274:	0007883a 	mov	r3,zero
		color = (red << 16) + (green << 8) + (blue);
	}
	return color;
}

int mandelbrot(int cRow, int cCol, float x0, float y0) {
  e00278:	dc800215 	stw	r18,8(sp)
  e0027c:	dc000015 	stw	r16,0(sp)
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  e00280:	30a5ff72 	custom	253,r18,r6,r2
		y = 2 * x * y + y0;
  e00284:	38e1ff72 	custom	253,r16,r7,r3
		color = (red << 16) + (green << 8) + (blue);
	}
	return color;
}

int mandelbrot(int cRow, int cCol, float x0, float y0) {
  e00288:	dcc00315 	stw	r19,12(sp)
  e0028c:	dc400115 	stw	r17,4(sp)

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  e00290:	94a7ff32 	custom	252,r19,r18,r18
  e00294:	8423ff32 	custom	252,r17,r16,r16
  e00298:	9c49ff72 	custom	253,r4,r19,r17
  e0029c:	01502034 	movhi	r5,16512
		color = (red << 16) + (green << 8) + (blue);
	}
	return color;
}

int mandelbrot(int cRow, int cCol, float x0, float y0) {
  e002a0:	dd800615 	stw	r22,24(sp)
  e002a4:	dd400515 	stw	r21,20(sp)
  e002a8:	dfc00815 	stw	ra,32(sp)
  e002ac:	ddc00715 	stw	r23,28(sp)
  e002b0:	dd000415 	stw	r20,16(sp)
  e002b4:	302d883a 	mov	r22,r6
  e002b8:	382b883a 	mov	r21,r7

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  e002bc:	0e024280 	call	e02428 <__lesf2>
  e002c0:	00801d16 	blt	zero,r2,e00338 <mandelbrot+0xcc>
  e002c4:	05000044 	movi	r20,1
  e002c8:	05c01904 	movi	r23,100
  e002cc:	00000106 	br	e002d4 <mandelbrot+0x68>
  e002d0:	a5c00d26 	beq	r20,r23,e00308 <mandelbrot+0x9c>
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  e002d4:	9485ff72 	custom	253,r2,r18,r18
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  e002d8:	9c47ffb2 	custom	254,r3,r19,r17
		y = 2 * x * y + y0;
  e002dc:	8085ff32 	custom	252,r2,r16,r2
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  e002e0:	1d87ff72 	custom	253,r3,r3,r22
		y = 2 * x * y + y0;
  e002e4:	1561ff72 	custom	253,r16,r2,r21

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  e002e8:	18e7ff32 	custom	252,r19,r3,r3
  e002ec:	8423ff32 	custom	252,r17,r16,r16
  e002f0:	9c49ff72 	custom	253,r4,r19,r17
  e002f4:	01502034 	movhi	r5,16512
  e002f8:	1825883a 	mov	r18,r3
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
  e002fc:	a5000044 	addi	r20,r20,1

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  e00300:	0e024280 	call	e02428 <__lesf2>
  e00304:	00bff20e 	bge	zero,r2,e002d0 <mandelbrot+0x64>
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
	}
	return iter;
}
  e00308:	a005883a 	mov	r2,r20
  e0030c:	dfc00817 	ldw	ra,32(sp)
  e00310:	ddc00717 	ldw	r23,28(sp)
  e00314:	dd800617 	ldw	r22,24(sp)
  e00318:	dd400517 	ldw	r21,20(sp)
  e0031c:	dd000417 	ldw	r20,16(sp)
  e00320:	dcc00317 	ldw	r19,12(sp)
  e00324:	dc800217 	ldw	r18,8(sp)
  e00328:	dc400117 	ldw	r17,4(sp)
  e0032c:	dc000017 	ldw	r16,0(sp)
  e00330:	dec00904 	addi	sp,sp,36
  e00334:	f800283a 	ret

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  e00338:	05000044 	movi	r20,1
  e0033c:	003ff206 	br	e00308 <mandelbrot+0x9c>

00e00340 <clearScreen>:
	}
}

void clearScreen(void) {
	//clears the part of the screen controlled by the pixel buffer
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
  e00340:	d1271217 	ldw	r4,-25528(gp)
  e00344:	000b883a 	mov	r5,zero
  e00348:	0e0e6441 	jmpi	e0e644 <alt_up_pixel_buffer_dma_clear_screen>

00e0034c <barrier>:
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}
}

void barrier(alt_u8 barrierNum) {
  e0034c:	deffe404 	addi	sp,sp,-112
  e00350:	dc001615 	stw	r16,88(sp)
  e00354:	2021883a 	mov	r16,r4
  e00358:	dfc01b15 	stw	ra,108(sp)
  e0035c:	dd001a15 	stw	r20,104(sp)
  e00360:	dcc01915 	stw	r19,100(sp)
  e00364:	dc801815 	stw	r18,96(sp)
  e00368:	dc401715 	stw	r17,92(sp)
	alt_u32 msg;
	alt_mailbox_dev *mb[NUM_CPUS];
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
  e0036c:	0027317a 	rdctl	r19,cpuid
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  e00370:	dc400204 	addi	r17,sp,8
  e00374:	01403874 	movhi	r5,225
  e00378:	29432504 	addi	r5,r5,3220
  e0037c:	000d883a 	mov	r6,zero
  e00380:	8809883a 	mov	r4,r17
  e00384:	0e038800 	call	e03880 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  e00388:	8809883a 	mov	r4,r17
  e0038c:	0e0dbf00 	call	e0dbf0 <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  e00390:	05000044 	movi	r20,1
  e00394:	01403874 	movhi	r5,225
  e00398:	29432504 	addi	r5,r5,3220
  e0039c:	a00d883a 	mov	r6,r20
  e003a0:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  e003a4:	d8800015 	stw	r2,0(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  e003a8:	0e038800 	call	e03880 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  e003ac:	8809883a 	mov	r4,r17
  e003b0:	0e0dbf00 	call	e0dbf0 <altera_avalon_mailbox_open>
  e003b4:	1025883a 	mov	r18,r2
  e003b8:	d8800115 	stw	r2,4(sp)
	}

	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  e003bc:	98001826 	beq	r19,zero,e00420 <barrier+0xd4>
			altera_avalon_mailbox_post(mb[i], barrierNum);
  e003c0:	d9000017 	ldw	r4,0(sp)
  e003c4:	84003fcc 	andi	r16,r16,255
  e003c8:	800b883a 	mov	r5,r16
  e003cc:	0e0dc680 	call	e0dc68 <altera_avalon_mailbox_post>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}

	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  e003d0:	9d00141e 	bne	r19,r20,e00424 <barrier+0xd8>
		}
	}

	for (i = 0; i < NUM_CPUS - 1; i++) {
		do {
			msg = altera_avalon_mailbox_pend(mb[cpu]);
  e003d4:	9cc5883a 	add	r2,r19,r19
  e003d8:	1085883a 	add	r2,r2,r2
  e003dc:	16c5883a 	add	r2,r2,sp
  e003e0:	14400017 	ldw	r17,0(r2)
  e003e4:	8809883a 	mov	r4,r17
  e003e8:	0e0dd740 	call	e0dd74 <altera_avalon_mailbox_pend>
		}
		while (msg != barrierNum);
  e003ec:	143ffd1e 	bne	r2,r16,e003e4 <barrier+0x98>
		//		printf("cpu %0d recv msg \n", cpu);
	}

	for (i = 0; i < NUM_CPUS; i++) {
		altera_avalon_mailbox_close(mb[i]);
  e003f0:	d9000017 	ldw	r4,0(sp)
  e003f4:	0e0dc480 	call	e0dc48 <altera_avalon_mailbox_close>
  e003f8:	9009883a 	mov	r4,r18
  e003fc:	0e0dc480 	call	e0dc48 <altera_avalon_mailbox_close>
	}
}
  e00400:	dfc01b17 	ldw	ra,108(sp)
  e00404:	dd001a17 	ldw	r20,104(sp)
  e00408:	dcc01917 	ldw	r19,100(sp)
  e0040c:	dc801817 	ldw	r18,96(sp)
  e00410:	dc401717 	ldw	r17,92(sp)
  e00414:	dc001617 	ldw	r16,88(sp)
  e00418:	dec01c04 	addi	sp,sp,112
  e0041c:	f800283a 	ret
  e00420:	84003fcc 	andi	r16,r16,255
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}

	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
			altera_avalon_mailbox_post(mb[i], barrierNum);
  e00424:	9009883a 	mov	r4,r18
  e00428:	800b883a 	mov	r5,r16
  e0042c:	0e0dc680 	call	e0dc68 <altera_avalon_mailbox_post>
  e00430:	003fe806 	br	e003d4 <barrier+0x88>

00e00434 <setup>:
float targetX = -0.227;
float targetY = 0.700;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  e00434:	deffff04 	addi	sp,sp,-4
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  e00438:	01003874 	movhi	r4,225
  e0043c:	21032904 	addi	r4,r4,3236
float targetX = -0.227;
float targetY = 0.700;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  e00440:	dfc00015 	stw	ra,0(sp)
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  e00444:	0e0e3800 	call	e0e380 <alt_up_pixel_buffer_dma_open_dev>
  e00448:	d0a71215 	stw	r2,-25528(gp)
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
  e0044c:	00c00044 	movi	r3,1
  e00450:	0005883a 	mov	r2,zero
  e00454:	10c00035 	stwio	r3,0(r2)
}
  e00458:	dfc00017 	ldw	ra,0(sp)
  e0045c:	dec00104 	addi	sp,sp,4
  e00460:	f800283a 	ret

00e00464 <drawFrame>:
//			color = genColor(result);
//			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
//		}
//	}
//}
void drawFrame(int zoom) {
  e00464:	deffef04 	addi	sp,sp,-68
  e00468:	dfc01015 	stw	ra,64(sp)
  e0046c:	df000f15 	stw	fp,60(sp)
  e00470:	ddc00e15 	stw	r23,56(sp)
  e00474:	dd800d15 	stw	r22,52(sp)
  e00478:	dd400c15 	stw	r21,48(sp)
  e0047c:	dd000b15 	stw	r20,44(sp)
  e00480:	dcc00a15 	stw	r19,40(sp)
  e00484:	dc800915 	stw	r18,36(sp)
  e00488:	dc400815 	stw	r17,32(sp)
  e0048c:	dc000715 	stw	r16,28(sp)
	int i;
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
  e00490:	002d317a 	rdctl	r22,cpuid

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  e00494:	040ff034 	movhi	r16,16320
  e00498:	0e024a00 	call	e024a0 <__floatsisf>
  e0049c:	1023883a 	mov	r17,r2
  e004a0:	8009883a 	mov	r4,r16
  e004a4:	100b883a 	mov	r5,r2
  e004a8:	0e008140 	call	e00814 <powf>
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
  e004ac:	8009883a 	mov	r4,r16
  e004b0:	880b883a 	mov	r5,r17
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  e004b4:	1025883a 	mov	r18,r2
  e004b8:	d5e00017 	ldw	r23,-32768(gp)
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
  e004bc:	0e008140 	call	e00814 <powf>
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  e004c0:	8009883a 	mov	r4,r16
  e004c4:	880b883a 	mov	r5,r17
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
  e004c8:	1039883a 	mov	fp,r2
  e004cc:	d5600017 	ldw	r21,-32768(gp)
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  e004d0:	0e008140 	call	e00814 <powf>
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));
  e004d4:	8009883a 	mov	r4,r16
  e004d8:	880b883a 	mov	r5,r17
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  e004dc:	1027883a 	mov	r19,r2
  e004e0:	d4600117 	ldw	r17,-32764(gp)
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));
  e004e4:	0e008140 	call	e00814 <powf>
  e004e8:	1029883a 	mov	r20,r2

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  e004ec:	00804fc4 	movi	r2,319
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));
  e004f0:	d4200117 	ldw	r16,-32764(gp)

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  e004f4:	15806b16 	blt	r2,r22,e006a4 <drawFrame+0x240>
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  e004f8:	900b883a 	mov	r5,r18
  e004fc:	012fe034 	movhi	r4,49024
  e00500:	0e0214c0 	call	e0214c <__divsf3>
  e00504:	15c5ff72 	custom	253,r2,r2,r23
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  e00508:	980b883a 	mov	r5,r19
  e0050c:	012fd034 	movhi	r4,48960
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  e00510:	d8800515 	stw	r2,20(sp)
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  e00514:	0e0214c0 	call	e0214c <__divsf3>
  e00518:	1445ff72 	custom	253,r2,r2,r17
  e0051c:	a00b883a 	mov	r5,r20
  e00520:	010fd034 	movhi	r4,16192
  e00524:	d8800415 	stw	r2,16(sp)
  e00528:	0e0214c0 	call	e0214c <__divsf3>
  e0052c:	d8c00417 	ldw	r3,16(sp)
  e00530:	1405ff72 	custom	253,r2,r2,r16
  e00534:	e00b883a 	mov	r5,fp
  e00538:	10c5ffb2 	custom	254,r2,r2,r3
  e0053c:	010fe034 	movhi	r4,16256
  e00540:	d8800215 	stw	r2,8(sp)
  e00544:	0e0214c0 	call	e0214c <__divsf3>
  e00548:	d8c00517 	ldw	r3,20(sp)
  e0054c:	1545ff72 	custom	253,r2,r2,r21
  e00550:	dd800615 	stw	r22,24(sp)
  e00554:	10c5ffb2 	custom	254,r2,r2,r3
  e00558:	d8800115 	stw	r2,4(sp)
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 239 - (float) i) / (float) 240) * (maxY - minY)) + minY;
  e0055c:	d9000617 	ldw	r4,24(sp)
  e00560:	0039883a 	mov	fp,zero
  e00564:	0e024a00 	call	e024a0 <__floatsisf>
  e00568:	0110dbf4 	movhi	r4,17263
  e0056c:	2089ffb2 	custom	254,r4,r4,r2
  e00570:	0150dc34 	movhi	r5,17264
  e00574:	0e0214c0 	call	e0214c <__divsf3>
  e00578:	d8c00217 	ldw	r3,8(sp)
  e0057c:	10c5ff32 	custom	252,r2,r2,r3
  e00580:	d8c00417 	ldw	r3,16(sp)
  e00584:	18afff72 	custom	253,r23,r3,r2
  e00588:	0005883a 	mov	r2,zero
  e0058c:	b885ff72 	custom	253,r2,r23,r2
  e00590:	d8800315 	stw	r2,12(sp)
  e00594:	1085ff32 	custom	252,r2,r2,r2
  e00598:	d8800015 	stw	r2,0(sp)
		for (j = 0; j < rowSize; j++) {
			float x0 = (((float) j / (float) 320) * (maxX - minX)) + minX;
  e0059c:	e009883a 	mov	r4,fp
  e005a0:	0e024a00 	call	e024a0 <__floatsisf>
  e005a4:	1009883a 	mov	r4,r2
  e005a8:	0150e834 	movhi	r5,17312
  e005ac:	0e0214c0 	call	e0214c <__divsf3>
  e005b0:	d8c00117 	ldw	r3,4(sp)

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  e005b4:	01502034 	movhi	r5,16512
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 239 - (float) i) / (float) 240) * (maxY - minY)) + minY;
		for (j = 0; j < rowSize; j++) {
			float x0 = (((float) j / (float) 320) * (maxX - minX)) + minX;
  e005b8:	10c5ff32 	custom	252,r2,r2,r3
  e005bc:	d8c00517 	ldw	r3,20(sp)
  e005c0:	18abff72 	custom	253,r21,r3,r2
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  e005c4:	0005883a 	mov	r2,zero
  e005c8:	a8a5ff72 	custom	253,r18,r21,r2

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  e005cc:	d8800017 	ldw	r2,0(sp)
  e005d0:	94a7ff32 	custom	252,r19,r18,r18
  e005d4:	9889ff72 	custom	253,r4,r19,r2
  e005d8:	0e024280 	call	e02428 <__lesf2>
  e005dc:	00803f16 	blt	zero,r2,e006dc <drawFrame+0x278>
  e005e0:	d8c00017 	ldw	r3,0(sp)
  e005e4:	d8800317 	ldw	r2,12(sp)
  e005e8:	05000044 	movi	r20,1
  e005ec:	1823883a 	mov	r17,r3
  e005f0:	1021883a 	mov	r16,r2
  e005f4:	05801904 	movi	r22,100
  e005f8:	00000106 	br	e00600 <drawFrame+0x19c>
  e005fc:	a5803526 	beq	r20,r22,e006d4 <drawFrame+0x270>
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  e00600:	9485ff72 	custom	253,r2,r18,r18
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  e00604:	9c47ffb2 	custom	254,r3,r19,r17
		y = 2 * x * y + y0;
  e00608:	8085ff32 	custom	252,r2,r16,r2
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  e0060c:	a8c7ff72 	custom	253,r3,r21,r3
		y = 2 * x * y + y0;
  e00610:	b8a1ff72 	custom	253,r16,r23,r2

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  e00614:	18e7ff32 	custom	252,r19,r3,r3
  e00618:	8423ff32 	custom	252,r17,r16,r16
  e0061c:	9c49ff72 	custom	253,r4,r19,r17
  e00620:	01502034 	movhi	r5,16512
  e00624:	1825883a 	mov	r18,r3
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
  e00628:	a5000044 	addi	r20,r20,1

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  e0062c:	0e024280 	call	e02428 <__lesf2>
  e00630:	00bff20e 	bge	zero,r2,e005fc <drawFrame+0x198>
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  e00634:	a5802726 	beq	r20,r22,e006d4 <drawFrame+0x270>

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  e00638:	a00490fa 	slli	r2,r20,3
  e0063c:	01403fc4 	movi	r5,255
  e00640:	2880010e 	bge	r5,r2,e00648 <drawFrame+0x1e4>
  e00644:	2805883a 	mov	r2,r5
  e00648:	a507883a 	add	r3,r20,r20
  e0064c:	100c923a 	slli	r6,r2,8
  e00650:	1809883a 	mov	r4,r3
  e00654:	28c0010e 	bge	r5,r3,e0065c <drawFrame+0x1f8>
  e00658:	2809883a 	mov	r4,r5
  e0065c:	1d05883a 	add	r2,r3,r20
  e00660:	2006943a 	slli	r3,r4,16
  e00664:	2880010e 	bge	r5,r2,e0066c <drawFrame+0x208>
  e00668:	2805883a 	mov	r2,r5
  e0066c:	1885883a 	add	r2,r3,r2
  e00670:	308b883a 	add	r5,r6,r2
		for (j = 0; j < rowSize; j++) {
			float x0 = (((float) j / (float) 320) * (maxX - minX)) + minX;

			result = mandelbrot(j, i, x0, y0);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
  e00674:	d1271217 	ldw	r4,-25528(gp)
  e00678:	d9800617 	ldw	r6,24(sp)
  e0067c:	e00f883a 	mov	r7,fp
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 239 - (float) i) / (float) 240) * (maxY - minY)) + minY;
		for (j = 0; j < rowSize; j++) {
  e00680:	e7000044 	addi	fp,fp,1
			float x0 = (((float) j / (float) 320) * (maxX - minX)) + minX;

			result = mandelbrot(j, i, x0, y0);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
  e00684:	0e0e3c00 	call	e0e3c0 <alt_up_pixel_buffer_dma_draw>
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 239 - (float) i) / (float) 240) * (maxY - minY)) + minY;
		for (j = 0; j < rowSize; j++) {
  e00688:	00803c04 	movi	r2,240
  e0068c:	e0bfc31e 	bne	fp,r2,e0059c <drawFrame+0x138>
	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  e00690:	d8c00617 	ldw	r3,24(sp)
  e00694:	00804fc4 	movi	r2,319
  e00698:	18c00084 	addi	r3,r3,2
  e0069c:	d8c00615 	stw	r3,24(sp)
  e006a0:	10ffae0e 	bge	r2,r3,e0055c <drawFrame+0xf8>
			result = mandelbrot(j, i, x0, y0);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}
}
  e006a4:	dfc01017 	ldw	ra,64(sp)
  e006a8:	df000f17 	ldw	fp,60(sp)
  e006ac:	ddc00e17 	ldw	r23,56(sp)
  e006b0:	dd800d17 	ldw	r22,52(sp)
  e006b4:	dd400c17 	ldw	r21,48(sp)
  e006b8:	dd000b17 	ldw	r20,44(sp)
  e006bc:	dcc00a17 	ldw	r19,40(sp)
  e006c0:	dc800917 	ldw	r18,36(sp)
  e006c4:	dc400817 	ldw	r17,32(sp)
  e006c8:	dc000717 	ldw	r16,28(sp)
  e006cc:	dec01104 	addi	sp,sp,68
  e006d0:	f800283a 	ret

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  e006d4:	000b883a 	mov	r5,zero
  e006d8:	003fe606 	br	e00674 <drawFrame+0x210>
  e006dc:	014000b4 	movhi	r5,2
  e006e0:	294200c4 	addi	r5,r5,2051
  e006e4:	003fe306 	br	e00674 <drawFrame+0x210>

00e006e8 <main>:
#define key1 6
#define key0 7

#define FIXED_POINT

int main() {
  e006e8:	defffc04 	addi	sp,sp,-16
  e006ec:	dfc00315 	stw	ra,12(sp)
  e006f0:	dc800215 	stw	r18,8(sp)
  e006f4:	dc400115 	stw	r17,4(sp)
  e006f8:	dc000015 	stw	r16,0(sp)

	setup();
  e006fc:	0e004340 	call	e00434 <setup>
	printf("Program running (UART)...\n");
  e00700:	01003874 	movhi	r4,225
  e00704:	21033104 	addi	r4,r4,3268
  e00708:	0e0386c0 	call	e0386c <puts>
	int cpu = __builtin_rdctl(5);
  e0070c:	000b317a 	rdctl	r5,cpuid
	printf("cpu %d\n", cpu);
  e00710:	01003874 	movhi	r4,225
  e00714:	21033804 	addi	r4,r4,3296
  e00718:	0e037540 	call	e03754 <printf>
	unsigned long long cycles = 0;
	clearScreen();
  e0071c:	0e003400 	call	e00340 <clearScreen>
	//the main program loop
	while (1) {
		int zoom;
		for (zoom = 1; zoom <= 100; zoom++) {
//			if (cpu == 3) {
				PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
  e00720:	00800104 	movi	r2,4
  e00724:	10000035 	stwio	zero,0(r2)
				PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
  e00728:	00c00504 	movi	r3,20
  e0072c:	18000035 	stwio	zero,0(r3)
				clearScreen();
  e00730:	0e003400 	call	e00340 <clearScreen>
				drawFrame(zoom);
  e00734:	01000044 	movi	r4,1
  e00738:	0e004640 	call	e00464 <drawFrame>
				barrier(0);
  e0073c:	0009883a 	mov	r4,zero
  e00740:	0e0034c0 	call	e0034c <barrier>
				PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
  e00744:	00800404 	movi	r2,16
  e00748:	10000035 	stwio	zero,0(r2)
				PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
  e0074c:	0007883a 	mov	r3,zero
  e00750:	18000035 	stwio	zero,0(r3)
				cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);
  e00754:	0009883a 	mov	r4,zero
  e00758:	01400044 	movi	r5,1
  e0075c:	0e0e1f80 	call	e0e1f8 <perf_get_section_time>
				printf("Zoom level: %i\n", zoom);
  e00760:	01003874 	movhi	r4,225
  e00764:	21033a04 	addi	r4,r4,3304
  e00768:	01400044 	movi	r5,1
				clearScreen();
				drawFrame(zoom);
				barrier(0);
				PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
				PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
				cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);
  e0076c:	1823883a 	mov	r17,r3
  e00770:	1021883a 	mov	r16,r2
				printf("Zoom level: %i\n", zoom);
  e00774:	0e037540 	call	e03754 <printf>
				printf("Cycles on frame: %llu \n\n", cycles);
  e00778:	880d883a 	mov	r6,r17
  e0077c:	01003874 	movhi	r4,225
  e00780:	21033e04 	addi	r4,r4,3320
  e00784:	800b883a 	mov	r5,r16
  e00788:	0e037540 	call	e03754 <printf>
  e0078c:	00c00084 	movi	r3,2
  e00790:	1825883a 	mov	r18,r3
	//the main program loop
	while (1) {
		int zoom;
		for (zoom = 1; zoom <= 100; zoom++) {
//			if (cpu == 3) {
				PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
  e00794:	00800104 	movi	r2,4
  e00798:	10000035 	stwio	zero,0(r2)
				PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
  e0079c:	00c00504 	movi	r3,20
  e007a0:	18000035 	stwio	zero,0(r3)
				clearScreen();
  e007a4:	0e003400 	call	e00340 <clearScreen>
				drawFrame(zoom);
  e007a8:	9009883a 	mov	r4,r18
  e007ac:	0e004640 	call	e00464 <drawFrame>
				barrier(0);
  e007b0:	0009883a 	mov	r4,zero
  e007b4:	0e0034c0 	call	e0034c <barrier>
				PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
  e007b8:	00800404 	movi	r2,16
  e007bc:	10000035 	stwio	zero,0(r2)
				PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
  e007c0:	0007883a 	mov	r3,zero
  e007c4:	18000035 	stwio	zero,0(r3)
				cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);
  e007c8:	0009883a 	mov	r4,zero
  e007cc:	01400044 	movi	r5,1
  e007d0:	0e0e1f80 	call	e0e1f8 <perf_get_section_time>
				printf("Zoom level: %i\n", zoom);
  e007d4:	900b883a 	mov	r5,r18
  e007d8:	01003874 	movhi	r4,225
  e007dc:	21033a04 	addi	r4,r4,3304
				clearScreen();
				drawFrame(zoom);
				barrier(0);
				PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
				PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
				cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);
  e007e0:	1823883a 	mov	r17,r3
  e007e4:	1021883a 	mov	r16,r2
				printf("Zoom level: %i\n", zoom);
  e007e8:	0e037540 	call	e03754 <printf>
				printf("Cycles on frame: %llu \n\n", cycles);
  e007ec:	880d883a 	mov	r6,r17
  e007f0:	01003874 	movhi	r4,225
  e007f4:	21033e04 	addi	r4,r4,3320
  e007f8:	800b883a 	mov	r5,r16
  e007fc:	0e037540 	call	e03754 <printf>
	clearScreen();
	//	drawFullSet();
	//the main program loop
	while (1) {
		int zoom;
		for (zoom = 1; zoom <= 100; zoom++) {
  e00800:	90c00044 	addi	r3,r18,1
  e00804:	00801904 	movi	r2,100
  e00808:	04800044 	movi	r18,1
  e0080c:	10ffe116 	blt	r2,r3,e00794 <main+0xac>
  e00810:	003fdf06 	br	e00790 <main+0xa8>

00e00814 <powf>:
  e00814:	defff104 	addi	sp,sp,-60
  e00818:	dd000d15 	stw	r20,52(sp)
  e0081c:	dcc00c15 	stw	r19,48(sp)
  e00820:	dc800b15 	stw	r18,44(sp)
  e00824:	dc400a15 	stw	r17,40(sp)
  e00828:	dc000915 	stw	r16,36(sp)
  e0082c:	dfc00e15 	stw	ra,56(sp)
  e00830:	05003874 	movhi	r20,225
  e00834:	a50b4604 	addi	r20,r20,11544
  e00838:	2027883a 	mov	r19,r4
  e0083c:	2825883a 	mov	r18,r5
  e00840:	0e00c6c0 	call	e00c6c <__ieee754_powf>
  e00844:	1021883a 	mov	r16,r2
  e00848:	a0800017 	ldw	r2,0(r20)
  e0084c:	047fffc4 	movi	r17,-1
  e00850:	14400326 	beq	r2,r17,e00860 <powf+0x4c>
  e00854:	9009883a 	mov	r4,r18
  e00858:	0e01b300 	call	e01b30 <isnanf>
  e0085c:	10000926 	beq	r2,zero,e00884 <powf+0x70>
  e00860:	8005883a 	mov	r2,r16
  e00864:	dfc00e17 	ldw	ra,56(sp)
  e00868:	dd000d17 	ldw	r20,52(sp)
  e0086c:	dcc00c17 	ldw	r19,48(sp)
  e00870:	dc800b17 	ldw	r18,44(sp)
  e00874:	dc400a17 	ldw	r17,40(sp)
  e00878:	dc000917 	ldw	r16,36(sp)
  e0087c:	dec00f04 	addi	sp,sp,60
  e00880:	f800283a 	ret
  e00884:	9809883a 	mov	r4,r19
  e00888:	0e01b300 	call	e01b30 <isnanf>
  e0088c:	1000151e 	bne	r2,zero,e008e4 <powf+0xd0>
  e00890:	9809883a 	mov	r4,r19
  e00894:	000b883a 	mov	r5,zero
  e00898:	0e022c00 	call	e022c0 <__eqsf2>
  e0089c:	10005a1e 	bne	r2,zero,e00a08 <powf+0x1f4>
  e008a0:	9009883a 	mov	r4,r18
  e008a4:	000b883a 	mov	r5,zero
  e008a8:	0e022c00 	call	e022c0 <__eqsf2>
  e008ac:	1000331e 	bne	r2,zero,e0097c <powf+0x168>
  e008b0:	a0800017 	ldw	r2,0(r20)
  e008b4:	d8000615 	stw	zero,24(sp)
  e008b8:	d8000715 	stw	zero,28(sp)
  e008bc:	10001426 	beq	r2,zero,e00910 <powf+0xfc>
  e008c0:	008ffc34 	movhi	r2,16368
  e008c4:	d8800715 	stw	r2,28(sp)
  e008c8:	d8800617 	ldw	r2,24(sp)
  e008cc:	d8c00717 	ldw	r3,28(sp)
  e008d0:	1009883a 	mov	r4,r2
  e008d4:	180b883a 	mov	r5,r3
  e008d8:	0e02da80 	call	e02da8 <__truncdfsf2>
  e008dc:	1021883a 	mov	r16,r2
  e008e0:	003fdf06 	br	e00860 <powf+0x4c>
  e008e4:	9009883a 	mov	r4,r18
  e008e8:	000b883a 	mov	r5,zero
  e008ec:	0e022c00 	call	e022c0 <__eqsf2>
  e008f0:	103fdb1e 	bne	r2,zero,e00860 <powf+0x4c>
  e008f4:	a0c00017 	ldw	r3,0(r20)
  e008f8:	010ffc34 	movhi	r4,16368
  e008fc:	d8000615 	stw	zero,24(sp)
  e00900:	d9000715 	stw	r4,28(sp)
  e00904:	1c401a26 	beq	r3,r17,e00970 <powf+0x15c>
  e00908:	00800084 	movi	r2,2
  e0090c:	18801826 	beq	r3,r2,e00970 <powf+0x15c>
  e00910:	9009883a 	mov	r4,r18
  e00914:	0e025380 	call	e02538 <__extendsfdf2>
  e00918:	9809883a 	mov	r4,r19
  e0091c:	d8c00515 	stw	r3,20(sp)
  e00920:	d8800415 	stw	r2,16(sp)
  e00924:	0e025380 	call	e02538 <__extendsfdf2>
  e00928:	100b883a 	mov	r5,r2
  e0092c:	d8c00315 	stw	r3,12(sp)
  e00930:	00803874 	movhi	r2,225
  e00934:	10834504 	addi	r2,r2,3348
  e00938:	00c00044 	movi	r3,1
  e0093c:	d809883a 	mov	r4,sp
  e00940:	d8800115 	stw	r2,4(sp)
  e00944:	d8c00015 	stw	r3,0(sp)
  e00948:	d9400215 	stw	r5,8(sp)
  e0094c:	d8000815 	stw	zero,32(sp)
  e00950:	0e018ec0 	call	e018ec <matherr>
  e00954:	10002826 	beq	r2,zero,e009f8 <powf+0x1e4>
  e00958:	d8800817 	ldw	r2,32(sp)
  e0095c:	103fda26 	beq	r2,zero,e008c8 <powf+0xb4>
  e00960:	0e037440 	call	e03744 <__errno>
  e00964:	d8c00817 	ldw	r3,32(sp)
  e00968:	10c00015 	stw	r3,0(r2)
  e0096c:	003fd606 	br	e008c8 <powf+0xb4>
  e00970:	d9000715 	stw	r4,28(sp)
  e00974:	d8000615 	stw	zero,24(sp)
  e00978:	003fd306 	br	e008c8 <powf+0xb4>
  e0097c:	9009883a 	mov	r4,r18
  e00980:	0e01b140 	call	e01b14 <finitef>
  e00984:	103fb626 	beq	r2,zero,e00860 <powf+0x4c>
  e00988:	9009883a 	mov	r4,r18
  e0098c:	000b883a 	mov	r5,zero
  e00990:	0e023b00 	call	e023b0 <__ltsf2>
  e00994:	103fb20e 	bge	r2,zero,e00860 <powf+0x4c>
  e00998:	9809883a 	mov	r4,r19
  e0099c:	00800044 	movi	r2,1
  e009a0:	00c03874 	movhi	r3,225
  e009a4:	18c34504 	addi	r3,r3,3348
  e009a8:	d8800015 	stw	r2,0(sp)
  e009ac:	d8c00115 	stw	r3,4(sp)
  e009b0:	d8000815 	stw	zero,32(sp)
  e009b4:	0e025380 	call	e02538 <__extendsfdf2>
  e009b8:	9009883a 	mov	r4,r18
  e009bc:	d8c00315 	stw	r3,12(sp)
  e009c0:	d8800215 	stw	r2,8(sp)
  e009c4:	0e025380 	call	e02538 <__extendsfdf2>
  e009c8:	a1800017 	ldw	r6,0(r20)
  e009cc:	d8c00515 	stw	r3,20(sp)
  e009d0:	d8800415 	stw	r2,16(sp)
  e009d4:	30005626 	beq	r6,zero,e00b30 <powf+0x31c>
  e009d8:	00bffc34 	movhi	r2,65520
  e009dc:	d8800715 	stw	r2,28(sp)
  e009e0:	00800084 	movi	r2,2
  e009e4:	d8000615 	stw	zero,24(sp)
  e009e8:	30800326 	beq	r6,r2,e009f8 <powf+0x1e4>
  e009ec:	d809883a 	mov	r4,sp
  e009f0:	0e018ec0 	call	e018ec <matherr>
  e009f4:	103fd81e 	bne	r2,zero,e00958 <powf+0x144>
  e009f8:	0e037440 	call	e03744 <__errno>
  e009fc:	00c00844 	movi	r3,33
  e00a00:	10c00015 	stw	r3,0(r2)
  e00a04:	003fd406 	br	e00958 <powf+0x144>
  e00a08:	8009883a 	mov	r4,r16
  e00a0c:	0e01b140 	call	e01b14 <finitef>
  e00a10:	10002426 	beq	r2,zero,e00aa4 <powf+0x290>
  e00a14:	8009883a 	mov	r4,r16
  e00a18:	000b883a 	mov	r5,zero
  e00a1c:	0e022c00 	call	e022c0 <__eqsf2>
  e00a20:	103f8f1e 	bne	r2,zero,e00860 <powf+0x4c>
  e00a24:	9809883a 	mov	r4,r19
  e00a28:	0e01b140 	call	e01b14 <finitef>
  e00a2c:	103f8c26 	beq	r2,zero,e00860 <powf+0x4c>
  e00a30:	9009883a 	mov	r4,r18
  e00a34:	0e01b140 	call	e01b14 <finitef>
  e00a38:	103f8926 	beq	r2,zero,e00860 <powf+0x4c>
  e00a3c:	9809883a 	mov	r4,r19
  e00a40:	00800104 	movi	r2,4
  e00a44:	00c03874 	movhi	r3,225
  e00a48:	18c34504 	addi	r3,r3,3348
  e00a4c:	d8800015 	stw	r2,0(sp)
  e00a50:	d8c00115 	stw	r3,4(sp)
  e00a54:	d8000815 	stw	zero,32(sp)
  e00a58:	0e025380 	call	e02538 <__extendsfdf2>
  e00a5c:	9009883a 	mov	r4,r18
  e00a60:	d8c00315 	stw	r3,12(sp)
  e00a64:	d8800215 	stw	r2,8(sp)
  e00a68:	0e025380 	call	e02538 <__extendsfdf2>
  e00a6c:	a1800017 	ldw	r6,0(r20)
  e00a70:	d8800415 	stw	r2,16(sp)
  e00a74:	00800084 	movi	r2,2
  e00a78:	d8c00515 	stw	r3,20(sp)
  e00a7c:	d8000615 	stw	zero,24(sp)
  e00a80:	d8000715 	stw	zero,28(sp)
  e00a84:	30800326 	beq	r6,r2,e00a94 <powf+0x280>
  e00a88:	d809883a 	mov	r4,sp
  e00a8c:	0e018ec0 	call	e018ec <matherr>
  e00a90:	103fb11e 	bne	r2,zero,e00958 <powf+0x144>
  e00a94:	0e037440 	call	e03744 <__errno>
  e00a98:	00c00884 	movi	r3,34
  e00a9c:	10c00015 	stw	r3,0(r2)
  e00aa0:	003fad06 	br	e00958 <powf+0x144>
  e00aa4:	9809883a 	mov	r4,r19
  e00aa8:	0e01b140 	call	e01b14 <finitef>
  e00aac:	103fd926 	beq	r2,zero,e00a14 <powf+0x200>
  e00ab0:	9009883a 	mov	r4,r18
  e00ab4:	0e01b140 	call	e01b14 <finitef>
  e00ab8:	103fd626 	beq	r2,zero,e00a14 <powf+0x200>
  e00abc:	8009883a 	mov	r4,r16
  e00ac0:	0e01b300 	call	e01b30 <isnanf>
  e00ac4:	10001d26 	beq	r2,zero,e00b3c <powf+0x328>
  e00ac8:	9809883a 	mov	r4,r19
  e00acc:	00800044 	movi	r2,1
  e00ad0:	00c03874 	movhi	r3,225
  e00ad4:	18c34504 	addi	r3,r3,3348
  e00ad8:	d8800015 	stw	r2,0(sp)
  e00adc:	d8c00115 	stw	r3,4(sp)
  e00ae0:	d8000815 	stw	zero,32(sp)
  e00ae4:	0e025380 	call	e02538 <__extendsfdf2>
  e00ae8:	9009883a 	mov	r4,r18
  e00aec:	d8c00315 	stw	r3,12(sp)
  e00af0:	d8800215 	stw	r2,8(sp)
  e00af4:	0e025380 	call	e02538 <__extendsfdf2>
  e00af8:	a4000017 	ldw	r16,0(r20)
  e00afc:	d8c00515 	stw	r3,20(sp)
  e00b00:	d8800415 	stw	r2,16(sp)
  e00b04:	80000a26 	beq	r16,zero,e00b30 <powf+0x31c>
  e00b08:	0009883a 	mov	r4,zero
  e00b0c:	000d883a 	mov	r6,zero
  e00b10:	000b883a 	mov	r5,zero
  e00b14:	000f883a 	mov	r7,zero
  e00b18:	0e02a900 	call	e02a90 <__divdf3>
  e00b1c:	d8800615 	stw	r2,24(sp)
  e00b20:	00800084 	movi	r2,2
  e00b24:	d8c00715 	stw	r3,28(sp)
  e00b28:	80bfb01e 	bne	r16,r2,e009ec <powf+0x1d8>
  e00b2c:	003fb206 	br	e009f8 <powf+0x1e4>
  e00b30:	d8000615 	stw	zero,24(sp)
  e00b34:	d8000715 	stw	zero,28(sp)
  e00b38:	003fac06 	br	e009ec <powf+0x1d8>
  e00b3c:	9809883a 	mov	r4,r19
  e00b40:	008000c4 	movi	r2,3
  e00b44:	00c03874 	movhi	r3,225
  e00b48:	18c34504 	addi	r3,r3,3348
  e00b4c:	d8800015 	stw	r2,0(sp)
  e00b50:	d8c00115 	stw	r3,4(sp)
  e00b54:	d8000815 	stw	zero,32(sp)
  e00b58:	0e025380 	call	e02538 <__extendsfdf2>
  e00b5c:	9009883a 	mov	r4,r18
  e00b60:	d8c00315 	stw	r3,12(sp)
  e00b64:	d8800215 	stw	r2,8(sp)
  e00b68:	0e025380 	call	e02538 <__extendsfdf2>
  e00b6c:	a1800017 	ldw	r6,0(r20)
  e00b70:	d8c00515 	stw	r3,20(sp)
  e00b74:	d8800415 	stw	r2,16(sp)
  e00b78:	3000211e 	bne	r6,zero,e00c00 <powf+0x3ec>
  e00b7c:	9809883a 	mov	r4,r19
  e00b80:	0091fc34 	movhi	r2,18416
  e00b84:	10bfffc4 	addi	r2,r2,-1
  e00b88:	04f80034 	movhi	r19,57344
  e00b8c:	000b883a 	mov	r5,zero
  e00b90:	d8800715 	stw	r2,28(sp)
  e00b94:	dcc00615 	stw	r19,24(sp)
  e00b98:	0e023b00 	call	e023b0 <__ltsf2>
  e00b9c:	103fba0e 	bge	r2,zero,e00a88 <powf+0x274>
  e00ba0:	014fc034 	movhi	r5,16128
  e00ba4:	9009883a 	mov	r4,r18
  e00ba8:	0e01f6c0 	call	e01f6c <__mulsf3>
  e00bac:	1009883a 	mov	r4,r2
  e00bb0:	0e025380 	call	e02538 <__extendsfdf2>
  e00bb4:	1009883a 	mov	r4,r2
  e00bb8:	180b883a 	mov	r5,r3
  e00bbc:	1021883a 	mov	r16,r2
  e00bc0:	1823883a 	mov	r17,r3
  e00bc4:	0e018f40 	call	e018f4 <rint>
  e00bc8:	180f883a 	mov	r7,r3
  e00bcc:	880b883a 	mov	r5,r17
  e00bd0:	8009883a 	mov	r4,r16
  e00bd4:	100d883a 	mov	r6,r2
  e00bd8:	0e02ce80 	call	e02ce8 <__nedf2>
  e00bdc:	10000426 	beq	r2,zero,e00bf0 <powf+0x3dc>
  e00be0:	00b1fc34 	movhi	r2,51184
  e00be4:	10bfffc4 	addi	r2,r2,-1
  e00be8:	dcc00615 	stw	r19,24(sp)
  e00bec:	d8800715 	stw	r2,28(sp)
  e00bf0:	a0c00017 	ldw	r3,0(r20)
  e00bf4:	00800084 	movi	r2,2
  e00bf8:	18bfa31e 	bne	r3,r2,e00a88 <powf+0x274>
  e00bfc:	003fa506 	br	e00a94 <powf+0x280>
  e00c00:	009ffc34 	movhi	r2,32752
  e00c04:	9809883a 	mov	r4,r19
  e00c08:	000b883a 	mov	r5,zero
  e00c0c:	d8800715 	stw	r2,28(sp)
  e00c10:	d8000615 	stw	zero,24(sp)
  e00c14:	0e023b00 	call	e023b0 <__ltsf2>
  e00c18:	103ff50e 	bge	r2,zero,e00bf0 <powf+0x3dc>
  e00c1c:	014fc034 	movhi	r5,16128
  e00c20:	9009883a 	mov	r4,r18
  e00c24:	0e01f6c0 	call	e01f6c <__mulsf3>
  e00c28:	1009883a 	mov	r4,r2
  e00c2c:	0e025380 	call	e02538 <__extendsfdf2>
  e00c30:	1009883a 	mov	r4,r2
  e00c34:	180b883a 	mov	r5,r3
  e00c38:	1021883a 	mov	r16,r2
  e00c3c:	1823883a 	mov	r17,r3
  e00c40:	0e018f40 	call	e018f4 <rint>
  e00c44:	180f883a 	mov	r7,r3
  e00c48:	880b883a 	mov	r5,r17
  e00c4c:	8009883a 	mov	r4,r16
  e00c50:	100d883a 	mov	r6,r2
  e00c54:	0e02ce80 	call	e02ce8 <__nedf2>
  e00c58:	103fe526 	beq	r2,zero,e00bf0 <powf+0x3dc>
  e00c5c:	00bffc34 	movhi	r2,65520
  e00c60:	d8800715 	stw	r2,28(sp)
  e00c64:	d8000615 	stw	zero,24(sp)
  e00c68:	003fe106 	br	e00bf0 <powf+0x3dc>

00e00c6c <__ieee754_powf>:
  e00c6c:	defff004 	addi	sp,sp,-64
  e00c70:	00a00034 	movhi	r2,32768
  e00c74:	10bfffc4 	addi	r2,r2,-1
  e00c78:	dc000615 	stw	r16,24(sp)
  e00c7c:	28a0703a 	and	r16,r5,r2
  e00c80:	df000e15 	stw	fp,56(sp)
  e00c84:	dcc00915 	stw	r19,36(sp)
  e00c88:	dc800815 	stw	r18,32(sp)
  e00c8c:	2027883a 	mov	r19,r4
  e00c90:	dfc00f15 	stw	ra,60(sp)
  e00c94:	ddc00d15 	stw	r23,52(sp)
  e00c98:	dd800c15 	stw	r22,48(sp)
  e00c9c:	dd400b15 	stw	r21,44(sp)
  e00ca0:	dd000a15 	stw	r20,40(sp)
  e00ca4:	dc400715 	stw	r17,28(sp)
  e00ca8:	2839883a 	mov	fp,r5
  e00cac:	2825883a 	mov	r18,r5
  e00cb0:	2809883a 	mov	r4,r5
  e00cb4:	80003526 	beq	r16,zero,e00d8c <__ieee754_powf+0x120>
  e00cb8:	98a2703a 	and	r17,r19,r2
  e00cbc:	009fe034 	movhi	r2,32640
  e00cc0:	9829883a 	mov	r20,r19
  e00cc4:	1440100e 	bge	r2,r17,e00d08 <__ieee754_powf+0x9c>
  e00cc8:	008fe034 	movhi	r2,16256
  e00ccc:	88803d26 	beq	r17,r2,e00dc4 <__ieee754_powf+0x158>
  e00cd0:	01003874 	movhi	r4,225
  e00cd4:	21034404 	addi	r4,r4,3344
  e00cd8:	dfc00f17 	ldw	ra,60(sp)
  e00cdc:	df000e17 	ldw	fp,56(sp)
  e00ce0:	ddc00d17 	ldw	r23,52(sp)
  e00ce4:	dd800c17 	ldw	r22,48(sp)
  e00ce8:	dd400b17 	ldw	r21,44(sp)
  e00cec:	dd000a17 	ldw	r20,40(sp)
  e00cf0:	dcc00917 	ldw	r19,36(sp)
  e00cf4:	dc800817 	ldw	r18,32(sp)
  e00cf8:	dc400717 	ldw	r17,28(sp)
  e00cfc:	dc000617 	ldw	r16,24(sp)
  e00d00:	dec01004 	addi	sp,sp,64
  e00d04:	0e01b481 	jmpi	e01b48 <nanf>
  e00d08:	143fef16 	blt	r2,r16,e00cc8 <__ieee754_powf+0x5c>
  e00d0c:	982a403a 	cmpge	r21,r19,zero
  e00d10:	a8004526 	beq	r21,zero,e00e28 <__ieee754_powf+0x1bc>
  e00d14:	002f883a 	mov	r23,zero
  e00d18:	009fe034 	movhi	r2,32640
  e00d1c:	80803926 	beq	r16,r2,e00e04 <__ieee754_powf+0x198>
  e00d20:	008fe034 	movhi	r2,16256
  e00d24:	80803d26 	beq	r16,r2,e00e1c <__ieee754_powf+0x1b0>
  e00d28:	00900034 	movhi	r2,16384
  e00d2c:	20805326 	beq	r4,r2,e00e7c <__ieee754_powf+0x210>
  e00d30:	008fc034 	movhi	r2,16128
  e00d34:	20802526 	beq	r4,r2,e00dcc <__ieee754_powf+0x160>
  e00d38:	9809883a 	mov	r4,r19
  e00d3c:	0e01b040 	call	e01b04 <fabsf>
  e00d40:	1009883a 	mov	r4,r2
  e00d44:	009fe034 	movhi	r2,32640
  e00d48:	88803c26 	beq	r17,r2,e00e3c <__ieee754_powf+0x1d0>
  e00d4c:	88003b26 	beq	r17,zero,e00e3c <__ieee754_powf+0x1d0>
  e00d50:	014fe034 	movhi	r5,16256
  e00d54:	89403926 	beq	r17,r5,e00e3c <__ieee754_powf+0x1d0>
  e00d58:	a004d7fa 	srli	r2,r20,31
  e00d5c:	10bfffc4 	addi	r2,r2,-1
  e00d60:	15c6b03a 	or	r3,r2,r23
  e00d64:	d8800215 	stw	r2,8(sp)
  e00d68:	1800661e 	bne	r3,zero,e00f04 <__ieee754_powf+0x298>
  e00d6c:	980b883a 	mov	r5,r19
  e00d70:	9809883a 	mov	r4,r19
  e00d74:	0e01e980 	call	e01e98 <__subsf3>
  e00d78:	1009883a 	mov	r4,r2
  e00d7c:	100b883a 	mov	r5,r2
  e00d80:	0e0214c0 	call	e0214c <__divsf3>
  e00d84:	1039883a 	mov	fp,r2
  e00d88:	00000106 	br	e00d90 <__ieee754_powf+0x124>
  e00d8c:	070fe034 	movhi	fp,16256
  e00d90:	e005883a 	mov	r2,fp
  e00d94:	dfc00f17 	ldw	ra,60(sp)
  e00d98:	df000e17 	ldw	fp,56(sp)
  e00d9c:	ddc00d17 	ldw	r23,52(sp)
  e00da0:	dd800c17 	ldw	r22,48(sp)
  e00da4:	dd400b17 	ldw	r21,44(sp)
  e00da8:	dd000a17 	ldw	r20,40(sp)
  e00dac:	dcc00917 	ldw	r19,36(sp)
  e00db0:	dc800817 	ldw	r18,32(sp)
  e00db4:	dc400717 	ldw	r17,28(sp)
  e00db8:	dc000617 	ldw	r16,24(sp)
  e00dbc:	dec01004 	addi	sp,sp,64
  e00dc0:	f800283a 	ret
  e00dc4:	8839883a 	mov	fp,r17
  e00dc8:	003ff106 	br	e00d90 <__ieee754_powf+0x124>
  e00dcc:	a03fda16 	blt	r20,zero,e00d38 <__ieee754_powf+0xcc>
  e00dd0:	9809883a 	mov	r4,r19
  e00dd4:	dfc00f17 	ldw	ra,60(sp)
  e00dd8:	df000e17 	ldw	fp,56(sp)
  e00ddc:	ddc00d17 	ldw	r23,52(sp)
  e00de0:	dd800c17 	ldw	r22,48(sp)
  e00de4:	dd400b17 	ldw	r21,44(sp)
  e00de8:	dd000a17 	ldw	r20,40(sp)
  e00dec:	dcc00917 	ldw	r19,36(sp)
  e00df0:	dc800817 	ldw	r18,32(sp)
  e00df4:	dc400717 	ldw	r17,28(sp)
  e00df8:	dc000617 	ldw	r16,24(sp)
  e00dfc:	dec01004 	addi	sp,sp,64
  e00e00:	0e017801 	jmpi	e01780 <__ieee754_sqrtf>
  e00e04:	008fe034 	movhi	r2,16256
  e00e08:	88bfee26 	beq	r17,r2,e00dc4 <__ieee754_powf+0x158>
  e00e0c:	1440200e 	bge	r2,r17,e00e90 <__ieee754_powf+0x224>
  e00e10:	903fdf0e 	bge	r18,zero,e00d90 <__ieee754_powf+0x124>
  e00e14:	0039883a 	mov	fp,zero
  e00e18:	003fdd06 	br	e00d90 <__ieee754_powf+0x124>
  e00e1c:	90002f16 	blt	r18,zero,e00edc <__ieee754_powf+0x270>
  e00e20:	9839883a 	mov	fp,r19
  e00e24:	003fda06 	br	e00d90 <__ieee754_powf+0x124>
  e00e28:	0092e034 	movhi	r2,19328
  e00e2c:	10bfffc4 	addi	r2,r2,-1
  e00e30:	14001b0e 	bge	r2,r16,e00ea0 <__ieee754_powf+0x234>
  e00e34:	05c00084 	movi	r23,2
  e00e38:	003fb706 	br	e00d18 <__ieee754_powf+0xac>
  e00e3c:	90000916 	blt	r18,zero,e00e64 <__ieee754_powf+0x1f8>
  e00e40:	a8000226 	beq	r21,zero,e00e4c <__ieee754_powf+0x1e0>
  e00e44:	2039883a 	mov	fp,r4
  e00e48:	003fd106 	br	e00d90 <__ieee754_powf+0x124>
  e00e4c:	00b02034 	movhi	r2,49280
  e00e50:	8885883a 	add	r2,r17,r2
  e00e54:	b884b03a 	or	r2,r23,r2
  e00e58:	1000251e 	bne	r2,zero,e00ef0 <__ieee754_powf+0x284>
  e00e5c:	200b883a 	mov	r5,r4
  e00e60:	003fc406 	br	e00d74 <__ieee754_powf+0x108>
  e00e64:	200b883a 	mov	r5,r4
  e00e68:	010fe034 	movhi	r4,16256
  e00e6c:	0e0214c0 	call	e0214c <__divsf3>
  e00e70:	1009883a 	mov	r4,r2
  e00e74:	a83ff31e 	bne	r21,zero,e00e44 <__ieee754_powf+0x1d8>
  e00e78:	003ff406 	br	e00e4c <__ieee754_powf+0x1e0>
  e00e7c:	980b883a 	mov	r5,r19
  e00e80:	9809883a 	mov	r4,r19
  e00e84:	0e01f6c0 	call	e01f6c <__mulsf3>
  e00e88:	1039883a 	mov	fp,r2
  e00e8c:	003fc006 	br	e00d90 <__ieee754_powf+0x124>
  e00e90:	903fe00e 	bge	r18,zero,e00e14 <__ieee754_powf+0x1a8>
  e00e94:	e0a0003c 	xorhi	r2,fp,32768
  e00e98:	1039883a 	mov	fp,r2
  e00e9c:	003fbc06 	br	e00d90 <__ieee754_powf+0x124>
  e00ea0:	008fe034 	movhi	r2,16256
  e00ea4:	10bfffc4 	addi	r2,r2,-1
  e00ea8:	1400060e 	bge	r2,r16,e00ec4 <__ieee754_powf+0x258>
  e00eac:	8007d5fa 	srai	r3,r16,23
  e00eb0:	00802584 	movi	r2,150
  e00eb4:	10c5c83a 	sub	r2,r2,r3
  e00eb8:	8087d83a 	sra	r3,r16,r2
  e00ebc:	1884983a 	sll	r2,r3,r2
  e00ec0:	80800226 	beq	r16,r2,e00ecc <__ieee754_powf+0x260>
  e00ec4:	002f883a 	mov	r23,zero
  e00ec8:	003f9506 	br	e00d20 <__ieee754_powf+0xb4>
  e00ecc:	18c0004c 	andi	r3,r3,1
  e00ed0:	00800084 	movi	r2,2
  e00ed4:	10efc83a 	sub	r23,r2,r3
  e00ed8:	003f9106 	br	e00d20 <__ieee754_powf+0xb4>
  e00edc:	8009883a 	mov	r4,r16
  e00ee0:	980b883a 	mov	r5,r19
  e00ee4:	0e0214c0 	call	e0214c <__divsf3>
  e00ee8:	1039883a 	mov	fp,r2
  e00eec:	003fa806 	br	e00d90 <__ieee754_powf+0x124>
  e00ef0:	00800044 	movi	r2,1
  e00ef4:	b8bfd31e 	bne	r23,r2,e00e44 <__ieee754_powf+0x1d8>
  e00ef8:	20a0003c 	xorhi	r2,r4,32768
  e00efc:	1039883a 	mov	fp,r2
  e00f00:	003fa306 	br	e00d90 <__ieee754_powf+0x124>
  e00f04:	00934034 	movhi	r2,19712
  e00f08:	14000a0e 	bge	r2,r16,e00f34 <__ieee754_powf+0x2c8>
  e00f0c:	008fe034 	movhi	r2,16256
  e00f10:	10bffdc4 	addi	r2,r2,-9
  e00f14:	1441b016 	blt	r2,r17,e015d8 <__ieee754_powf+0x96c>
  e00f18:	903fbe0e 	bge	r18,zero,e00e14 <__ieee754_powf+0x1a8>
  e00f1c:	011c52b4 	movhi	r4,29002
  e00f20:	213cb284 	addi	r4,r4,-3382
  e00f24:	200b883a 	mov	r5,r4
  e00f28:	0e01f6c0 	call	e01f6c <__mulsf3>
  e00f2c:	1039883a 	mov	fp,r2
  e00f30:	003f9706 	br	e00d90 <__ieee754_powf+0x124>
  e00f34:	00802034 	movhi	r2,128
  e00f38:	10bfffc4 	addi	r2,r2,-1
  e00f3c:	1441a10e 	bge	r2,r17,e015c4 <__ieee754_powf+0x958>
  e00f40:	0009883a 	mov	r4,zero
  e00f44:	8805d5fa 	srai	r2,r17,23
  e00f48:	00c02034 	movhi	r3,128
  e00f4c:	18ffffc4 	addi	r3,r3,-1
  e00f50:	88c6703a 	and	r3,r17,r3
  e00f54:	2089883a 	add	r4,r4,r2
  e00f58:	20bfe044 	addi	r2,r4,-127
  e00f5c:	d8800015 	stw	r2,0(sp)
  e00f60:	00800774 	movhi	r2,29
  e00f64:	10b11c44 	addi	r2,r2,-15247
  e00f68:	1c0fe034 	orhi	r16,r3,16256
  e00f6c:	10c1790e 	bge	r2,r3,e01554 <__ieee754_powf+0x8e8>
  e00f70:	008017b4 	movhi	r2,94
  e00f74:	10acf584 	addi	r2,r2,-19498
  e00f78:	10c17216 	blt	r2,r3,e01544 <__ieee754_powf+0x8d8>
  e00f7c:	00800934 	movhi	r2,36
  e00f80:	05000044 	movi	r20,1
  e00f84:	d8800115 	stw	r2,4(sp)
  e00f88:	a529883a 	add	r20,r20,r20
  e00f8c:	a529883a 	add	r20,r20,r20
  e00f90:	d0a00204 	addi	r2,gp,-32760
  e00f94:	a085883a 	add	r2,r20,r2
  e00f98:	14800017 	ldw	r18,0(r2)
  e00f9c:	8009883a 	mov	r4,r16
  e00fa0:	8023d07a 	srai	r17,r16,1
  e00fa4:	900b883a 	mov	r5,r18
  e00fa8:	0e01e980 	call	e01e98 <__subsf3>
  e00fac:	8009883a 	mov	r4,r16
  e00fb0:	900b883a 	mov	r5,r18
  e00fb4:	1027883a 	mov	r19,r2
  e00fb8:	0e01f080 	call	e01f08 <__addsf3>
  e00fbc:	100b883a 	mov	r5,r2
  e00fc0:	010fe034 	movhi	r4,16256
  e00fc4:	0e0214c0 	call	e0214c <__divsf3>
  e00fc8:	100b883a 	mov	r5,r2
  e00fcc:	9809883a 	mov	r4,r19
  e00fd0:	102b883a 	mov	r21,r2
  e00fd4:	0e01f6c0 	call	e01f6c <__mulsf3>
  e00fd8:	d8800315 	stw	r2,12(sp)
  e00fdc:	d8c00317 	ldw	r3,12(sp)
  e00fe0:	00bc0004 	movi	r2,-4096
  e00fe4:	8c480034 	orhi	r17,r17,8192
  e00fe8:	10ec703a 	and	r22,r2,r3
  e00fec:	d8800117 	ldw	r2,4(sp)
  e00ff0:	b009883a 	mov	r4,r22
  e00ff4:	88a3883a 	add	r17,r17,r2
  e00ff8:	880b883a 	mov	r5,r17
  e00ffc:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01000:	100b883a 	mov	r5,r2
  e01004:	9809883a 	mov	r4,r19
  e01008:	0e01e980 	call	e01e98 <__subsf3>
  e0100c:	8809883a 	mov	r4,r17
  e01010:	900b883a 	mov	r5,r18
  e01014:	1027883a 	mov	r19,r2
  e01018:	0e01e980 	call	e01e98 <__subsf3>
  e0101c:	100b883a 	mov	r5,r2
  e01020:	8009883a 	mov	r4,r16
  e01024:	0e01e980 	call	e01e98 <__subsf3>
  e01028:	100b883a 	mov	r5,r2
  e0102c:	b009883a 	mov	r4,r22
  e01030:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01034:	100b883a 	mov	r5,r2
  e01038:	9809883a 	mov	r4,r19
  e0103c:	0e01e980 	call	e01e98 <__subsf3>
  e01040:	100b883a 	mov	r5,r2
  e01044:	a809883a 	mov	r4,r21
  e01048:	0e01f6c0 	call	e01f6c <__mulsf3>
  e0104c:	d9000317 	ldw	r4,12(sp)
  e01050:	d8800415 	stw	r2,16(sp)
  e01054:	05501034 	movhi	r21,16448
  e01058:	200b883a 	mov	r5,r4
  e0105c:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01060:	1021883a 	mov	r16,r2
  e01064:	1009883a 	mov	r4,r2
  e01068:	100b883a 	mov	r5,r2
  e0106c:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01070:	8009883a 	mov	r4,r16
  e01074:	014f9534 	movhi	r5,15956
  e01078:	297c5084 	addi	r5,r5,-3774
  e0107c:	1023883a 	mov	r17,r2
  e01080:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01084:	1009883a 	mov	r4,r2
  e01088:	014f9b34 	movhi	r5,15980
  e0108c:	294c9544 	addi	r5,r5,12885
  e01090:	0e01f080 	call	e01f08 <__addsf3>
  e01094:	100b883a 	mov	r5,r2
  e01098:	8009883a 	mov	r4,r16
  e0109c:	0e01f6c0 	call	e01f6c <__mulsf3>
  e010a0:	1009883a 	mov	r4,r2
  e010a4:	014fa334 	movhi	r5,16012
  e010a8:	2968c144 	addi	r5,r5,-23803
  e010ac:	0e01f080 	call	e01f08 <__addsf3>
  e010b0:	100b883a 	mov	r5,r2
  e010b4:	8009883a 	mov	r4,r16
  e010b8:	0e01f6c0 	call	e01f6c <__mulsf3>
  e010bc:	1009883a 	mov	r4,r2
  e010c0:	014faaf4 	movhi	r5,16043
  e010c4:	296aaac4 	addi	r5,r5,-21845
  e010c8:	0e01f080 	call	e01f08 <__addsf3>
  e010cc:	100b883a 	mov	r5,r2
  e010d0:	8009883a 	mov	r4,r16
  e010d4:	0e01f6c0 	call	e01f6c <__mulsf3>
  e010d8:	1009883a 	mov	r4,r2
  e010dc:	014fb6f4 	movhi	r5,16091
  e010e0:	295b6dc4 	addi	r5,r5,28087
  e010e4:	0e01f080 	call	e01f08 <__addsf3>
  e010e8:	100b883a 	mov	r5,r2
  e010ec:	8009883a 	mov	r4,r16
  e010f0:	0e01f6c0 	call	e01f6c <__mulsf3>
  e010f4:	1009883a 	mov	r4,r2
  e010f8:	014fc6b4 	movhi	r5,16154
  e010fc:	29666684 	addi	r5,r5,-26214
  e01100:	0e01f080 	call	e01f08 <__addsf3>
  e01104:	100b883a 	mov	r5,r2
  e01108:	8809883a 	mov	r4,r17
  e0110c:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01110:	d9000317 	ldw	r4,12(sp)
  e01114:	b00b883a 	mov	r5,r22
  e01118:	1021883a 	mov	r16,r2
  e0111c:	0e01f080 	call	e01f08 <__addsf3>
  e01120:	d9000417 	ldw	r4,16(sp)
  e01124:	100b883a 	mov	r5,r2
  e01128:	0e01f6c0 	call	e01f6c <__mulsf3>
  e0112c:	100b883a 	mov	r5,r2
  e01130:	8009883a 	mov	r4,r16
  e01134:	0e01f080 	call	e01f08 <__addsf3>
  e01138:	b009883a 	mov	r4,r22
  e0113c:	b00b883a 	mov	r5,r22
  e01140:	1025883a 	mov	r18,r2
  e01144:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01148:	1009883a 	mov	r4,r2
  e0114c:	a80b883a 	mov	r5,r21
  e01150:	1027883a 	mov	r19,r2
  e01154:	0e01f080 	call	e01f08 <__addsf3>
  e01158:	100b883a 	mov	r5,r2
  e0115c:	9009883a 	mov	r4,r18
  e01160:	0e01f080 	call	e01f08 <__addsf3>
  e01164:	00fc0004 	movi	r3,-4096
  e01168:	10e2703a 	and	r17,r2,r3
  e0116c:	880b883a 	mov	r5,r17
  e01170:	b009883a 	mov	r4,r22
  e01174:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01178:	d9000417 	ldw	r4,16(sp)
  e0117c:	880b883a 	mov	r5,r17
  e01180:	d8800515 	stw	r2,20(sp)
  e01184:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01188:	8809883a 	mov	r4,r17
  e0118c:	a80b883a 	mov	r5,r21
  e01190:	1021883a 	mov	r16,r2
  e01194:	0e01e980 	call	e01e98 <__subsf3>
  e01198:	1009883a 	mov	r4,r2
  e0119c:	980b883a 	mov	r5,r19
  e011a0:	0e01e980 	call	e01e98 <__subsf3>
  e011a4:	100b883a 	mov	r5,r2
  e011a8:	9009883a 	mov	r4,r18
  e011ac:	0e01e980 	call	e01e98 <__subsf3>
  e011b0:	d9000317 	ldw	r4,12(sp)
  e011b4:	100b883a 	mov	r5,r2
  e011b8:	0e01f6c0 	call	e01f6c <__mulsf3>
  e011bc:	100b883a 	mov	r5,r2
  e011c0:	8009883a 	mov	r4,r16
  e011c4:	0e01f080 	call	e01f08 <__addsf3>
  e011c8:	d9000517 	ldw	r4,20(sp)
  e011cc:	100b883a 	mov	r5,r2
  e011d0:	1027883a 	mov	r19,r2
  e011d4:	0e01f080 	call	e01f08 <__addsf3>
  e011d8:	00fc0004 	movi	r3,-4096
  e011dc:	10e2703a 	and	r17,r2,r3
  e011e0:	8809883a 	mov	r4,r17
  e011e4:	014fddb4 	movhi	r5,16246
  e011e8:	294e0004 	addi	r5,r5,14336
  e011ec:	0e01f6c0 	call	e01f6c <__mulsf3>
  e011f0:	8809883a 	mov	r4,r17
  e011f4:	014da7b4 	movhi	r5,13982
  e011f8:	2970e804 	addi	r5,r5,-15456
  e011fc:	102b883a 	mov	r21,r2
  e01200:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01204:	d9400517 	ldw	r5,20(sp)
  e01208:	8809883a 	mov	r4,r17
  e0120c:	1025883a 	mov	r18,r2
  e01210:	0e01e980 	call	e01e98 <__subsf3>
  e01214:	100b883a 	mov	r5,r2
  e01218:	9809883a 	mov	r4,r19
  e0121c:	0e01e980 	call	e01e98 <__subsf3>
  e01220:	1009883a 	mov	r4,r2
  e01224:	014fddb4 	movhi	r5,16246
  e01228:	294e13c4 	addi	r5,r5,14415
  e0122c:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01230:	100b883a 	mov	r5,r2
  e01234:	9009883a 	mov	r4,r18
  e01238:	0e01f080 	call	e01f08 <__addsf3>
  e0123c:	d0e00404 	addi	r3,gp,-32752
  e01240:	a0c7883a 	add	r3,r20,r3
  e01244:	19400017 	ldw	r5,0(r3)
  e01248:	1009883a 	mov	r4,r2
  e0124c:	0e01f080 	call	e01f08 <__addsf3>
  e01250:	d9000017 	ldw	r4,0(sp)
  e01254:	1023883a 	mov	r17,r2
  e01258:	0e024a00 	call	e024a0 <__floatsisf>
  e0125c:	1021883a 	mov	r16,r2
  e01260:	d0a00604 	addi	r2,gp,-32744
  e01264:	a0a9883a 	add	r20,r20,r2
  e01268:	a4800017 	ldw	r18,0(r20)
  e0126c:	a809883a 	mov	r4,r21
  e01270:	880b883a 	mov	r5,r17
  e01274:	0e01f080 	call	e01f08 <__addsf3>
  e01278:	1009883a 	mov	r4,r2
  e0127c:	900b883a 	mov	r5,r18
  e01280:	0e01f080 	call	e01f08 <__addsf3>
  e01284:	100b883a 	mov	r5,r2
  e01288:	8009883a 	mov	r4,r16
  e0128c:	0e01f080 	call	e01f08 <__addsf3>
  e01290:	00fc0004 	movi	r3,-4096
  e01294:	10c4703a 	and	r2,r2,r3
  e01298:	800b883a 	mov	r5,r16
  e0129c:	1009883a 	mov	r4,r2
  e012a0:	1027883a 	mov	r19,r2
  e012a4:	0e01e980 	call	e01e98 <__subsf3>
  e012a8:	1009883a 	mov	r4,r2
  e012ac:	900b883a 	mov	r5,r18
  e012b0:	0e01e980 	call	e01e98 <__subsf3>
  e012b4:	1009883a 	mov	r4,r2
  e012b8:	a80b883a 	mov	r5,r21
  e012bc:	0e01e980 	call	e01e98 <__subsf3>
  e012c0:	100b883a 	mov	r5,r2
  e012c4:	8809883a 	mov	r4,r17
  e012c8:	0e01e980 	call	e01e98 <__subsf3>
  e012cc:	1021883a 	mov	r16,r2
  e012d0:	d8c00217 	ldw	r3,8(sp)
  e012d4:	b8bfffc4 	addi	r2,r23,-1
  e012d8:	1884b03a 	or	r2,r3,r2
  e012dc:	1000a11e 	bne	r2,zero,e01564 <__ieee754_powf+0x8f8>
  e012e0:	05efe034 	movhi	r23,49024
  e012e4:	047c0004 	movi	r17,-4096
  e012e8:	8f22703a 	and	r17,r17,fp
  e012ec:	e009883a 	mov	r4,fp
  e012f0:	880b883a 	mov	r5,r17
  e012f4:	0e01e980 	call	e01e98 <__subsf3>
  e012f8:	100b883a 	mov	r5,r2
  e012fc:	9809883a 	mov	r4,r19
  e01300:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01304:	8009883a 	mov	r4,r16
  e01308:	e00b883a 	mov	r5,fp
  e0130c:	1025883a 	mov	r18,r2
  e01310:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01314:	100b883a 	mov	r5,r2
  e01318:	9009883a 	mov	r4,r18
  e0131c:	0e01f080 	call	e01f08 <__addsf3>
  e01320:	9809883a 	mov	r4,r19
  e01324:	880b883a 	mov	r5,r17
  e01328:	1021883a 	mov	r16,r2
  e0132c:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01330:	100b883a 	mov	r5,r2
  e01334:	8009883a 	mov	r4,r16
  e01338:	1027883a 	mov	r19,r2
  e0133c:	0e01f080 	call	e01f08 <__addsf3>
  e01340:	1023883a 	mov	r17,r2
  e01344:	1029883a 	mov	r20,r2
  e01348:	00a00034 	movhi	r2,32768
  e0134c:	10bfffc4 	addi	r2,r2,-1
  e01350:	88a4703a 	and	r18,r17,r2
  e01354:	8039883a 	mov	fp,r16
  e01358:	982b883a 	mov	r21,r19
  e0135c:	8807883a 	mov	r3,r17
  e01360:	0440a30e 	bge	zero,r17,e015f0 <__ieee754_powf+0x984>
  e01364:	0090c034 	movhi	r2,17152
  e01368:	14808c16 	blt	r2,r18,e0159c <__ieee754_powf+0x930>
  e0136c:	90807f26 	beq	r18,r2,e0156c <__ieee754_powf+0x900>
  e01370:	008fc034 	movhi	r2,16128
  e01374:	1480a816 	blt	r2,r18,e01618 <__ieee754_powf+0x9ac>
  e01378:	002d883a 	mov	r22,zero
  e0137c:	0029883a 	mov	r20,zero
  e01380:	047c0004 	movi	r17,-4096
  e01384:	88e2703a 	and	r17,r17,r3
  e01388:	8809883a 	mov	r4,r17
  e0138c:	014fcc74 	movhi	r5,16177
  e01390:	295c8004 	addi	r5,r5,29184
  e01394:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01398:	8809883a 	mov	r4,r17
  e0139c:	a80b883a 	mov	r5,r21
  e013a0:	1027883a 	mov	r19,r2
  e013a4:	0e01e980 	call	e01e98 <__subsf3>
  e013a8:	100b883a 	mov	r5,r2
  e013ac:	e009883a 	mov	r4,fp
  e013b0:	0e01e980 	call	e01e98 <__subsf3>
  e013b4:	1009883a 	mov	r4,r2
  e013b8:	014fcc74 	movhi	r5,16177
  e013bc:	295c8604 	addi	r5,r5,29208
  e013c0:	0e01f6c0 	call	e01f6c <__mulsf3>
  e013c4:	8809883a 	mov	r4,r17
  e013c8:	014d7034 	movhi	r5,13760
  e013cc:	296fa304 	addi	r5,r5,-16756
  e013d0:	1025883a 	mov	r18,r2
  e013d4:	0e01f6c0 	call	e01f6c <__mulsf3>
  e013d8:	100b883a 	mov	r5,r2
  e013dc:	9009883a 	mov	r4,r18
  e013e0:	0e01f080 	call	e01f08 <__addsf3>
  e013e4:	100b883a 	mov	r5,r2
  e013e8:	9809883a 	mov	r4,r19
  e013ec:	1021883a 	mov	r16,r2
  e013f0:	0e01f080 	call	e01f08 <__addsf3>
  e013f4:	1009883a 	mov	r4,r2
  e013f8:	980b883a 	mov	r5,r19
  e013fc:	1025883a 	mov	r18,r2
  e01400:	0e01e980 	call	e01e98 <__subsf3>
  e01404:	100b883a 	mov	r5,r2
  e01408:	8009883a 	mov	r4,r16
  e0140c:	0e01e980 	call	e01e98 <__subsf3>
  e01410:	9009883a 	mov	r4,r18
  e01414:	900b883a 	mov	r5,r18
  e01418:	1027883a 	mov	r19,r2
  e0141c:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01420:	1009883a 	mov	r4,r2
  e01424:	014cccb4 	movhi	r5,13106
  e01428:	296ed304 	addi	r5,r5,-17588
  e0142c:	1021883a 	mov	r16,r2
  e01430:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01434:	1009883a 	mov	r4,r2
  e01438:	014d77b4 	movhi	r5,13790
  e0143c:	297a8384 	addi	r5,r5,-5618
  e01440:	0e01e980 	call	e01e98 <__subsf3>
  e01444:	100b883a 	mov	r5,r2
  e01448:	8009883a 	mov	r4,r16
  e0144c:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01450:	1009883a 	mov	r4,r2
  e01454:	014e22f4 	movhi	r5,14475
  e01458:	296cd544 	addi	r5,r5,-19627
  e0145c:	0e01f080 	call	e01f08 <__addsf3>
  e01460:	100b883a 	mov	r5,r2
  e01464:	8009883a 	mov	r4,r16
  e01468:	0e01f6c0 	call	e01f6c <__mulsf3>
  e0146c:	1009883a 	mov	r4,r2
  e01470:	014ecdb4 	movhi	r5,15158
  e01474:	2942d844 	addi	r5,r5,2913
  e01478:	0e01e980 	call	e01e98 <__subsf3>
  e0147c:	100b883a 	mov	r5,r2
  e01480:	8009883a 	mov	r4,r16
  e01484:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01488:	1009883a 	mov	r4,r2
  e0148c:	014f8af4 	movhi	r5,15915
  e01490:	296aaac4 	addi	r5,r5,-21845
  e01494:	0e01f080 	call	e01f08 <__addsf3>
  e01498:	100b883a 	mov	r5,r2
  e0149c:	8009883a 	mov	r4,r16
  e014a0:	0e01f6c0 	call	e01f6c <__mulsf3>
  e014a4:	100b883a 	mov	r5,r2
  e014a8:	9009883a 	mov	r4,r18
  e014ac:	0e01e980 	call	e01e98 <__subsf3>
  e014b0:	1021883a 	mov	r16,r2
  e014b4:	9009883a 	mov	r4,r18
  e014b8:	100b883a 	mov	r5,r2
  e014bc:	0e01f6c0 	call	e01f6c <__mulsf3>
  e014c0:	8009883a 	mov	r4,r16
  e014c4:	01500034 	movhi	r5,16384
  e014c8:	1023883a 	mov	r17,r2
  e014cc:	0e01e980 	call	e01e98 <__subsf3>
  e014d0:	100b883a 	mov	r5,r2
  e014d4:	8809883a 	mov	r4,r17
  e014d8:	0e0214c0 	call	e0214c <__divsf3>
  e014dc:	9009883a 	mov	r4,r18
  e014e0:	980b883a 	mov	r5,r19
  e014e4:	1021883a 	mov	r16,r2
  e014e8:	0e01f6c0 	call	e01f6c <__mulsf3>
  e014ec:	100b883a 	mov	r5,r2
  e014f0:	9809883a 	mov	r4,r19
  e014f4:	0e01f080 	call	e01f08 <__addsf3>
  e014f8:	100b883a 	mov	r5,r2
  e014fc:	8009883a 	mov	r4,r16
  e01500:	0e01e980 	call	e01e98 <__subsf3>
  e01504:	1009883a 	mov	r4,r2
  e01508:	900b883a 	mov	r5,r18
  e0150c:	0e01e980 	call	e01e98 <__subsf3>
  e01510:	100b883a 	mov	r5,r2
  e01514:	010fe034 	movhi	r4,16256
  e01518:	0e01e980 	call	e01e98 <__subsf3>
  e0151c:	a087883a 	add	r3,r20,r2
  e01520:	1009883a 	mov	r4,r2
  e01524:	1805d5fa 	srai	r2,r3,23
  e01528:	0080920e 	bge	zero,r2,e01774 <__ieee754_powf+0xb08>
  e0152c:	1805883a 	mov	r2,r3
  e01530:	1009883a 	mov	r4,r2
  e01534:	b80b883a 	mov	r5,r23
  e01538:	0e01f6c0 	call	e01f6c <__mulsf3>
  e0153c:	1039883a 	mov	fp,r2
  e01540:	003e1306 	br	e00d90 <__ieee754_powf+0x124>
  e01544:	00bfe034 	movhi	r2,65408
  e01548:	213fe084 	addi	r4,r4,-126
  e0154c:	80a1883a 	add	r16,r16,r2
  e01550:	d9000015 	stw	r4,0(sp)
  e01554:	00c00134 	movhi	r3,4
  e01558:	0029883a 	mov	r20,zero
  e0155c:	d8c00115 	stw	r3,4(sp)
  e01560:	003e8906 	br	e00f88 <__ieee754_powf+0x31c>
  e01564:	05cfe034 	movhi	r23,16256
  e01568:	003f5e06 	br	e012e4 <__ieee754_powf+0x678>
  e0156c:	8009883a 	mov	r4,r16
  e01570:	014cce74 	movhi	r5,13113
  e01574:	296a8f04 	addi	r5,r5,-21956
  e01578:	0e01f080 	call	e01f08 <__addsf3>
  e0157c:	8809883a 	mov	r4,r17
  e01580:	980b883a 	mov	r5,r19
  e01584:	1021883a 	mov	r16,r2
  e01588:	0e01e980 	call	e01e98 <__subsf3>
  e0158c:	100b883a 	mov	r5,r2
  e01590:	8009883a 	mov	r4,r16
  e01594:	0e023380 	call	e02338 <__gtsf2>
  e01598:	00801f0e 	bge	zero,r2,e01618 <__ieee754_powf+0x9ac>
  e0159c:	041c52b4 	movhi	r16,29002
  e015a0:	843cb284 	addi	r16,r16,-3382
  e015a4:	b809883a 	mov	r4,r23
  e015a8:	800b883a 	mov	r5,r16
  e015ac:	0e01f6c0 	call	e01f6c <__mulsf3>
  e015b0:	1009883a 	mov	r4,r2
  e015b4:	800b883a 	mov	r5,r16
  e015b8:	0e01f6c0 	call	e01f6c <__mulsf3>
  e015bc:	1039883a 	mov	fp,r2
  e015c0:	003df306 	br	e00d90 <__ieee754_powf+0x124>
  e015c4:	0152e034 	movhi	r5,19328
  e015c8:	0e01f6c0 	call	e01f6c <__mulsf3>
  e015cc:	1023883a 	mov	r17,r2
  e015d0:	013ffa04 	movi	r4,-24
  e015d4:	003e5b06 	br	e00f44 <__ieee754_powf+0x2d8>
  e015d8:	008fe034 	movhi	r2,16256
  e015dc:	108001c4 	addi	r2,r2,7
  e015e0:	14402c0e 	bge	r2,r17,e01694 <__ieee754_powf+0xa28>
  e015e4:	04be4d16 	blt	zero,r18,e00f1c <__ieee754_powf+0x2b0>
  e015e8:	0039883a 	mov	fp,zero
  e015ec:	003de806 	br	e00d90 <__ieee754_powf+0x124>
  e015f0:	0090c5b4 	movhi	r2,17174
  e015f4:	14802416 	blt	r2,r18,e01688 <__ieee754_powf+0xa1c>
  e015f8:	90bf5d1e 	bne	r18,r2,e01370 <__ieee754_powf+0x704>
  e015fc:	8809883a 	mov	r4,r17
  e01600:	980b883a 	mov	r5,r19
  e01604:	0e01e980 	call	e01e98 <__subsf3>
  e01608:	100b883a 	mov	r5,r2
  e0160c:	8009883a 	mov	r4,r16
  e01610:	0e024280 	call	e02428 <__lesf2>
  e01614:	00801c0e 	bge	zero,r2,e01688 <__ieee754_powf+0xa1c>
  e01618:	9005d5fa 	srai	r2,r18,23
  e0161c:	01002034 	movhi	r4,128
  e01620:	01402034 	movhi	r5,128
  e01624:	297fffc4 	addi	r5,r5,-1
  e01628:	10bfe084 	addi	r2,r2,-126
  e0162c:	2089d83a 	sra	r4,r4,r2
  e01630:	008005c4 	movi	r2,23
  e01634:	a109883a 	add	r4,r20,r4
  e01638:	2006d5fa 	srli	r3,r4,23
  e0163c:	214c703a 	and	r6,r4,r5
  e01640:	31802034 	orhi	r6,r6,128
  e01644:	18c03fcc 	andi	r3,r3,255
  e01648:	18ffe044 	addi	r3,r3,-127
  e0164c:	28cbd83a 	sra	r5,r5,r3
  e01650:	10c5c83a 	sub	r2,r2,r3
  e01654:	30add83a 	sra	r22,r6,r2
  e01658:	014a303a 	nor	r5,zero,r5
  e0165c:	214a703a 	and	r5,r4,r5
  e01660:	a0004216 	blt	r20,zero,e0176c <__ieee754_powf+0xb00>
  e01664:	a809883a 	mov	r4,r21
  e01668:	0e01e980 	call	e01e98 <__subsf3>
  e0166c:	100b883a 	mov	r5,r2
  e01670:	e009883a 	mov	r4,fp
  e01674:	b02895fa 	slli	r20,r22,23
  e01678:	102b883a 	mov	r21,r2
  e0167c:	0e01f080 	call	e01f08 <__addsf3>
  e01680:	1007883a 	mov	r3,r2
  e01684:	003f3e06 	br	e01380 <__ieee754_powf+0x714>
  e01688:	040368b4 	movhi	r16,3490
  e0168c:	84109804 	addi	r16,r16,16992
  e01690:	003fc406 	br	e015a4 <__ieee754_powf+0x938>
  e01694:	0e01e980 	call	e01e98 <__subsf3>
  e01698:	1021883a 	mov	r16,r2
  e0169c:	1009883a 	mov	r4,r2
  e016a0:	014fee74 	movhi	r5,16313
  e016a4:	296a8004 	addi	r5,r5,-22016
  e016a8:	0e01f6c0 	call	e01f6c <__mulsf3>
  e016ac:	8009883a 	mov	r4,r16
  e016b0:	014dbb74 	movhi	r5,14061
  e016b4:	29695c04 	addi	r5,r5,-23184
  e016b8:	1023883a 	mov	r17,r2
  e016bc:	0e01f6c0 	call	e01f6c <__mulsf3>
  e016c0:	8009883a 	mov	r4,r16
  e016c4:	800b883a 	mov	r5,r16
  e016c8:	1025883a 	mov	r18,r2
  e016cc:	0e01f6c0 	call	e01f6c <__mulsf3>
  e016d0:	8009883a 	mov	r4,r16
  e016d4:	016fa034 	movhi	r5,48768
  e016d8:	1027883a 	mov	r19,r2
  e016dc:	0e01f6c0 	call	e01f6c <__mulsf3>
  e016e0:	1009883a 	mov	r4,r2
  e016e4:	014faaf4 	movhi	r5,16043
  e016e8:	296aaac4 	addi	r5,r5,-21845
  e016ec:	0e01f080 	call	e01f08 <__addsf3>
  e016f0:	100b883a 	mov	r5,r2
  e016f4:	8009883a 	mov	r4,r16
  e016f8:	0e01f6c0 	call	e01f6c <__mulsf3>
  e016fc:	100b883a 	mov	r5,r2
  e01700:	010fc034 	movhi	r4,16128
  e01704:	0e01e980 	call	e01e98 <__subsf3>
  e01708:	100b883a 	mov	r5,r2
  e0170c:	9809883a 	mov	r4,r19
  e01710:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01714:	1009883a 	mov	r4,r2
  e01718:	016fee74 	movhi	r5,49081
  e0171c:	296a8ec4 	addi	r5,r5,-21957
  e01720:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01724:	100b883a 	mov	r5,r2
  e01728:	9009883a 	mov	r4,r18
  e0172c:	0e01f080 	call	e01f08 <__addsf3>
  e01730:	100b883a 	mov	r5,r2
  e01734:	8809883a 	mov	r4,r17
  e01738:	1021883a 	mov	r16,r2
  e0173c:	0e01f080 	call	e01f08 <__addsf3>
  e01740:	00fc0004 	movi	r3,-4096
  e01744:	10c4703a 	and	r2,r2,r3
  e01748:	1009883a 	mov	r4,r2
  e0174c:	880b883a 	mov	r5,r17
  e01750:	1027883a 	mov	r19,r2
  e01754:	0e01e980 	call	e01e98 <__subsf3>
  e01758:	100b883a 	mov	r5,r2
  e0175c:	8009883a 	mov	r4,r16
  e01760:	0e01e980 	call	e01e98 <__subsf3>
  e01764:	1021883a 	mov	r16,r2
  e01768:	003ed906 	br	e012d0 <__ieee754_powf+0x664>
  e0176c:	05adc83a 	sub	r22,zero,r22
  e01770:	003fbc06 	br	e01664 <__ieee754_powf+0x9f8>
  e01774:	b00b883a 	mov	r5,r22
  e01778:	0e01b500 	call	e01b50 <scalbnf>
  e0177c:	003f6c06 	br	e01530 <__ieee754_powf+0x8c4>

00e01780 <__ieee754_sqrtf>:
  e01780:	00a00034 	movhi	r2,32768
  e01784:	10bfffc4 	addi	r2,r2,-1
  e01788:	defffe04 	addi	sp,sp,-8
  e0178c:	208c703a 	and	r6,r4,r2
  e01790:	00dfe034 	movhi	r3,32640
  e01794:	18ffffc4 	addi	r3,r3,-1
  e01798:	dc000015 	stw	r16,0(sp)
  e0179c:	dfc00115 	stw	ra,4(sp)
  e017a0:	2021883a 	mov	r16,r4
  e017a4:	200b883a 	mov	r5,r4
  e017a8:	19800a2e 	bgeu	r3,r6,e017d4 <__ieee754_sqrtf+0x54>
  e017ac:	0e01f6c0 	call	e01f6c <__mulsf3>
  e017b0:	100b883a 	mov	r5,r2
  e017b4:	8009883a 	mov	r4,r16
  e017b8:	0e01f080 	call	e01f08 <__addsf3>
  e017bc:	1021883a 	mov	r16,r2
  e017c0:	8005883a 	mov	r2,r16
  e017c4:	dfc00117 	ldw	ra,4(sp)
  e017c8:	dc000017 	ldw	r16,0(sp)
  e017cc:	dec00204 	addi	sp,sp,8
  e017d0:	f800283a 	ret
  e017d4:	303ffa26 	beq	r6,zero,e017c0 <__ieee754_sqrtf+0x40>
  e017d8:	20003b16 	blt	r4,zero,e018c8 <__ieee754_sqrtf+0x148>
  e017dc:	00802034 	movhi	r2,128
  e017e0:	10bfffc4 	addi	r2,r2,-1
  e017e4:	2007d5fa 	srai	r3,r4,23
  e017e8:	11800936 	bltu	r2,r6,e01810 <__ieee754_sqrtf+0x90>
  e017ec:	2080202c 	andhi	r2,r4,128
  e017f0:	10003c1e 	bne	r2,zero,e018e4 <__ieee754_sqrtf+0x164>
  e017f4:	0009883a 	mov	r4,zero
  e017f8:	294b883a 	add	r5,r5,r5
  e017fc:	2880202c 	andhi	r2,r5,128
  e01800:	21000044 	addi	r4,r4,1
  e01804:	103ffc26 	beq	r2,zero,e017f8 <__ieee754_sqrtf+0x78>
  e01808:	1905c83a 	sub	r2,r3,r4
  e0180c:	10c00044 	addi	r3,r2,1
  e01810:	1a7fe044 	addi	r9,r3,-127
  e01814:	48c0004c 	andi	r3,r9,1
  e01818:	00802034 	movhi	r2,128
  e0181c:	10bfffc4 	addi	r2,r2,-1
  e01820:	2884703a 	and	r2,r5,r2
  e01824:	1807003a 	cmpeq	r3,r3,zero
  e01828:	10802034 	orhi	r2,r2,128
  e0182c:	18002426 	beq	r3,zero,e018c0 <__ieee754_sqrtf+0x140>
  e01830:	1085883a 	add	r2,r2,r2
  e01834:	01404034 	movhi	r5,256
  e01838:	000f883a 	mov	r7,zero
  e0183c:	0007883a 	mov	r3,zero
  e01840:	000d883a 	mov	r6,zero
  e01844:	02000644 	movi	r8,25
  e01848:	3949883a 	add	r4,r7,r5
  e0184c:	31800044 	addi	r6,r6,1
  e01850:	11000316 	blt	r2,r4,e01860 <__ieee754_sqrtf+0xe0>
  e01854:	1105c83a 	sub	r2,r2,r4
  e01858:	1947883a 	add	r3,r3,r5
  e0185c:	214f883a 	add	r7,r4,r5
  e01860:	1085883a 	add	r2,r2,r2
  e01864:	280ad07a 	srli	r5,r5,1
  e01868:	323ff71e 	bne	r6,r8,e01848 <__ieee754_sqrtf+0xc8>
  e0186c:	10000b1e 	bne	r2,zero,e0189c <__ieee754_sqrtf+0x11c>
  e01870:	4805d07a 	srai	r2,r9,1
  e01874:	1807d07a 	srai	r3,r3,1
  e01878:	010fc034 	movhi	r4,16128
  e0187c:	100495fa 	slli	r2,r2,23
  e01880:	1907883a 	add	r3,r3,r4
  e01884:	18a1883a 	add	r16,r3,r2
  e01888:	8005883a 	mov	r2,r16
  e0188c:	dfc00117 	ldw	ra,4(sp)
  e01890:	dc000017 	ldw	r16,0(sp)
  e01894:	dec00204 	addi	sp,sp,8
  e01898:	f800283a 	ret
  e0189c:	1880004c 	andi	r2,r3,1
  e018a0:	1887883a 	add	r3,r3,r2
  e018a4:	4805d07a 	srai	r2,r9,1
  e018a8:	1807d07a 	srai	r3,r3,1
  e018ac:	010fc034 	movhi	r4,16128
  e018b0:	100495fa 	slli	r2,r2,23
  e018b4:	1907883a 	add	r3,r3,r4
  e018b8:	18a1883a 	add	r16,r3,r2
  e018bc:	003ff206 	br	e01888 <__ieee754_sqrtf+0x108>
  e018c0:	1085883a 	add	r2,r2,r2
  e018c4:	003fda06 	br	e01830 <__ieee754_sqrtf+0xb0>
  e018c8:	200b883a 	mov	r5,r4
  e018cc:	0e01e980 	call	e01e98 <__subsf3>
  e018d0:	1009883a 	mov	r4,r2
  e018d4:	100b883a 	mov	r5,r2
  e018d8:	0e0214c0 	call	e0214c <__divsf3>
  e018dc:	1021883a 	mov	r16,r2
  e018e0:	003fb706 	br	e017c0 <__ieee754_sqrtf+0x40>
  e018e4:	0009883a 	mov	r4,zero
  e018e8:	003fc706 	br	e01808 <__ieee754_sqrtf+0x88>

00e018ec <matherr>:
  e018ec:	0005883a 	mov	r2,zero
  e018f0:	f800283a 	ret

00e018f4 <rint>:
  e018f4:	2015883a 	mov	r10,r4
  e018f8:	2809d53a 	srai	r4,r5,20
  e018fc:	defff904 	addi	sp,sp,-28
  e01900:	034004c4 	movi	r13,19
  e01904:	2101ffcc 	andi	r4,r4,2047
  e01908:	227f0044 	addi	r9,r4,-1023
  e0190c:	dc800415 	stw	r18,16(sp)
  e01910:	dfc00615 	stw	ra,24(sp)
  e01914:	dcc00515 	stw	r19,20(sp)
  e01918:	dc400315 	stw	r17,12(sp)
  e0191c:	dc000215 	stw	r16,8(sp)
  e01920:	2817883a 	mov	r11,r5
  e01924:	500d883a 	mov	r6,r10
  e01928:	2824d7fa 	srli	r18,r5,31
  e0192c:	6a403016 	blt	r13,r9,e019f0 <rint+0xfc>
  e01930:	48004916 	blt	r9,zero,e01a58 <rint+0x164>
  e01934:	00800434 	movhi	r2,16
  e01938:	10bfffc4 	addi	r2,r2,-1
  e0193c:	1247d83a 	sra	r3,r2,r9
  e01940:	2809883a 	mov	r4,r5
  e01944:	1944703a 	and	r2,r3,r5
  e01948:	5084b03a 	or	r2,r10,r2
  e0194c:	10001f26 	beq	r2,zero,e019cc <rint+0xd8>
  e01950:	180ad07a 	srli	r5,r3,1
  e01954:	5944703a 	and	r2,r11,r5
  e01958:	5084b03a 	or	r2,r10,r2
  e0195c:	10000626 	beq	r2,zero,e01978 <rint+0x84>
  e01960:	4b406626 	beq	r9,r13,e01afc <rint+0x208>
  e01964:	00c000b4 	movhi	r3,2
  e01968:	1a47d83a 	sra	r3,r3,r9
  e0196c:	0144303a 	nor	r2,zero,r5
  e01970:	5884703a 	and	r2,r11,r2
  e01974:	10c8b03a 	or	r4,r2,r3
  e01978:	900690fa 	slli	r3,r18,3
  e0197c:	00803874 	movhi	r2,225
  e01980:	10834704 	addi	r2,r2,3356
  e01984:	200f883a 	mov	r7,r4
  e01988:	1887883a 	add	r3,r3,r2
  e0198c:	1c000017 	ldw	r16,0(r3)
  e01990:	1c400117 	ldw	r17,4(r3)
  e01994:	8009883a 	mov	r4,r16
  e01998:	880b883a 	mov	r5,r17
  e0199c:	0e02a1c0 	call	e02a1c <__adddf3>
  e019a0:	d8800015 	stw	r2,0(sp)
  e019a4:	d8c00115 	stw	r3,4(sp)
  e019a8:	d8800017 	ldw	r2,0(sp)
  e019ac:	d8c00117 	ldw	r3,4(sp)
  e019b0:	880f883a 	mov	r7,r17
  e019b4:	800d883a 	mov	r6,r16
  e019b8:	180b883a 	mov	r5,r3
  e019bc:	1009883a 	mov	r4,r2
  e019c0:	0e0299c0 	call	e0299c <__subdf3>
  e019c4:	1015883a 	mov	r10,r2
  e019c8:	1817883a 	mov	r11,r3
  e019cc:	5005883a 	mov	r2,r10
  e019d0:	5807883a 	mov	r3,r11
  e019d4:	dfc00617 	ldw	ra,24(sp)
  e019d8:	dcc00517 	ldw	r19,20(sp)
  e019dc:	dc800417 	ldw	r18,16(sp)
  e019e0:	dc400317 	ldw	r17,12(sp)
  e019e4:	dc000217 	ldw	r16,8(sp)
  e019e8:	dec00704 	addi	sp,sp,28
  e019ec:	f800283a 	ret
  e019f0:	00800cc4 	movi	r2,51
  e019f4:	12400f16 	blt	r2,r9,e01a34 <rint+0x140>
  e019f8:	213efb44 	addi	r4,r4,-1043
  e019fc:	00bfffc4 	movi	r2,-1
  e01a00:	1104d83a 	srl	r2,r2,r4
  e01a04:	5086703a 	and	r3,r10,r2
  e01a08:	183ff026 	beq	r3,zero,e019cc <rint+0xd8>
  e01a0c:	100ad07a 	srli	r5,r2,1
  e01a10:	5144703a 	and	r2,r10,r5
  e01a14:	10000526 	beq	r2,zero,e01a2c <rint+0x138>
  e01a18:	00d00034 	movhi	r3,16384
  e01a1c:	1907d83a 	sra	r3,r3,r4
  e01a20:	0144303a 	nor	r2,zero,r5
  e01a24:	5084703a 	and	r2,r10,r2
  e01a28:	10ccb03a 	or	r6,r2,r3
  e01a2c:	5809883a 	mov	r4,r11
  e01a30:	003fd106 	br	e01978 <rint+0x84>
  e01a34:	00810004 	movi	r2,1024
  e01a38:	48bfe41e 	bne	r9,r2,e019cc <rint+0xd8>
  e01a3c:	5009883a 	mov	r4,r10
  e01a40:	500d883a 	mov	r6,r10
  e01a44:	280f883a 	mov	r7,r5
  e01a48:	0e02a1c0 	call	e02a1c <__adddf3>
  e01a4c:	1015883a 	mov	r10,r2
  e01a50:	1817883a 	mov	r11,r3
  e01a54:	003fdd06 	br	e019cc <rint+0xd8>
  e01a58:	04e00034 	movhi	r19,32768
  e01a5c:	9cffffc4 	addi	r19,r19,-1
  e01a60:	2cc4703a 	and	r2,r5,r19
  e01a64:	5084b03a 	or	r2,r10,r2
  e01a68:	103fd826 	beq	r2,zero,e019cc <rint+0xd8>
  e01a6c:	00c00434 	movhi	r3,16
  e01a70:	18ffffc4 	addi	r3,r3,-1
  e01a74:	28c6703a 	and	r3,r5,r3
  e01a78:	50c6b03a 	or	r3,r10,r3
  e01a7c:	00cdc83a 	sub	r6,zero,r3
  e01a80:	900a90fa 	slli	r5,r18,3
  e01a84:	1986b03a 	or	r3,r3,r6
  e01a88:	01003874 	movhi	r4,225
  e01a8c:	21034704 	addi	r4,r4,3356
  e01a90:	1806d33a 	srli	r3,r3,12
  e01a94:	290b883a 	add	r5,r5,r4
  e01a98:	2c000017 	ldw	r16,0(r5)
  e01a9c:	2c400117 	ldw	r17,4(r5)
  e01aa0:	593fffac 	andhi	r4,r11,65534
  e01aa4:	18c0022c 	andhi	r3,r3,8
  e01aa8:	1906b03a 	or	r3,r3,r4
  e01aac:	500d883a 	mov	r6,r10
  e01ab0:	180f883a 	mov	r7,r3
  e01ab4:	8009883a 	mov	r4,r16
  e01ab8:	880b883a 	mov	r5,r17
  e01abc:	0e02a1c0 	call	e02a1c <__adddf3>
  e01ac0:	d8800015 	stw	r2,0(sp)
  e01ac4:	d8c00115 	stw	r3,4(sp)
  e01ac8:	d8800017 	ldw	r2,0(sp)
  e01acc:	d8c00117 	ldw	r3,4(sp)
  e01ad0:	880f883a 	mov	r7,r17
  e01ad4:	800d883a 	mov	r6,r16
  e01ad8:	180b883a 	mov	r5,r3
  e01adc:	1009883a 	mov	r4,r2
  e01ae0:	0e0299c0 	call	e0299c <__subdf3>
  e01ae4:	901297fa 	slli	r9,r18,31
  e01ae8:	98d0703a 	and	r8,r19,r3
  e01aec:	1015883a 	mov	r10,r2
  e01af0:	4250b03a 	or	r8,r8,r9
  e01af4:	4017883a 	mov	r11,r8
  e01af8:	003fb406 	br	e019cc <rint+0xd8>
  e01afc:	01900034 	movhi	r6,16384
  e01b00:	003f9d06 	br	e01978 <rint+0x84>

00e01b04 <fabsf>:
  e01b04:	00a00034 	movhi	r2,32768
  e01b08:	10bfffc4 	addi	r2,r2,-1
  e01b0c:	2084703a 	and	r2,r4,r2
  e01b10:	f800283a 	ret

00e01b14 <finitef>:
  e01b14:	00a00034 	movhi	r2,32768
  e01b18:	10bfffc4 	addi	r2,r2,-1
  e01b1c:	2088703a 	and	r4,r4,r2
  e01b20:	009fe034 	movhi	r2,32640
  e01b24:	10bfffc4 	addi	r2,r2,-1
  e01b28:	1104403a 	cmpge	r2,r2,r4
  e01b2c:	f800283a 	ret

00e01b30 <isnanf>:
  e01b30:	00a00034 	movhi	r2,32768
  e01b34:	10bfffc4 	addi	r2,r2,-1
  e01b38:	2088703a 	and	r4,r4,r2
  e01b3c:	009fe034 	movhi	r2,32640
  e01b40:	1104803a 	cmplt	r2,r2,r4
  e01b44:	f800283a 	ret

00e01b48 <nanf>:
  e01b48:	009ff034 	movhi	r2,32704
  e01b4c:	f800283a 	ret

00e01b50 <scalbnf>:
  e01b50:	00a00034 	movhi	r2,32768
  e01b54:	10bfffc4 	addi	r2,r2,-1
  e01b58:	defffe04 	addi	sp,sp,-8
  e01b5c:	2086703a 	and	r3,r4,r2
  e01b60:	dc000015 	stw	r16,0(sp)
  e01b64:	dfc00115 	stw	ra,4(sp)
  e01b68:	200d883a 	mov	r6,r4
  e01b6c:	200f883a 	mov	r7,r4
  e01b70:	2821883a 	mov	r16,r5
  e01b74:	18001a26 	beq	r3,zero,e01be0 <scalbnf+0x90>
  e01b78:	009fe034 	movhi	r2,32640
  e01b7c:	10bfffc4 	addi	r2,r2,-1
  e01b80:	10c01c36 	bltu	r2,r3,e01bf4 <scalbnf+0xa4>
  e01b84:	00802034 	movhi	r2,128
  e01b88:	10bfffc4 	addi	r2,r2,-1
  e01b8c:	10c02136 	bltu	r2,r3,e01c14 <scalbnf+0xc4>
  e01b90:	01530034 	movhi	r5,19456
  e01b94:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01b98:	1009883a 	mov	r4,r2
  e01b9c:	100d883a 	mov	r6,r2
  e01ba0:	00bffff4 	movhi	r2,65535
  e01ba4:	108f2c04 	addi	r2,r2,15536
  e01ba8:	80802616 	blt	r16,r2,e01c44 <scalbnf+0xf4>
  e01bac:	209fe02c 	andhi	r2,r4,32640
  e01bb0:	1005d5fa 	srai	r2,r2,23
  e01bb4:	200f883a 	mov	r7,r4
  e01bb8:	10bff9c4 	addi	r2,r2,-25
  e01bbc:	1407883a 	add	r3,r2,r16
  e01bc0:	00803f84 	movi	r2,254
  e01bc4:	10c01516 	blt	r2,r3,e01c1c <scalbnf+0xcc>
  e01bc8:	00c0230e 	bge	zero,r3,e01c58 <scalbnf+0x108>
  e01bcc:	180695fa 	slli	r3,r3,23
  e01bd0:	00a02034 	movhi	r2,32896
  e01bd4:	10bfffc4 	addi	r2,r2,-1
  e01bd8:	3884703a 	and	r2,r7,r2
  e01bdc:	10ccb03a 	or	r6,r2,r3
  e01be0:	3005883a 	mov	r2,r6
  e01be4:	dfc00117 	ldw	ra,4(sp)
  e01be8:	dc000017 	ldw	r16,0(sp)
  e01bec:	dec00204 	addi	sp,sp,8
  e01bf0:	f800283a 	ret
  e01bf4:	200b883a 	mov	r5,r4
  e01bf8:	0e01f080 	call	e01f08 <__addsf3>
  e01bfc:	100d883a 	mov	r6,r2
  e01c00:	3005883a 	mov	r2,r6
  e01c04:	dfc00117 	ldw	ra,4(sp)
  e01c08:	dc000017 	ldw	r16,0(sp)
  e01c0c:	dec00204 	addi	sp,sp,8
  e01c10:	f800283a 	ret
  e01c14:	1804d5fa 	srli	r2,r3,23
  e01c18:	003fe806 	br	e01bbc <scalbnf+0x6c>
  e01c1c:	041c52b4 	movhi	r16,29002
  e01c20:	843cb284 	addi	r16,r16,-3382
  e01c24:	300b883a 	mov	r5,r6
  e01c28:	8009883a 	mov	r4,r16
  e01c2c:	0e01c9c0 	call	e01c9c <copysignf>
  e01c30:	1009883a 	mov	r4,r2
  e01c34:	800b883a 	mov	r5,r16
  e01c38:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01c3c:	100d883a 	mov	r6,r2
  e01c40:	003fe706 	br	e01be0 <scalbnf+0x90>
  e01c44:	014368b4 	movhi	r5,3490
  e01c48:	29509804 	addi	r5,r5,16992
  e01c4c:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01c50:	100d883a 	mov	r6,r2
  e01c54:	003fe206 	br	e01be0 <scalbnf+0x90>
  e01c58:	00bffa84 	movi	r2,-22
  e01c5c:	1880050e 	bge	r3,r2,e01c74 <scalbnf+0x124>
  e01c60:	00b0d414 	movui	r2,50000
  e01c64:	143fed16 	blt	r2,r16,e01c1c <scalbnf+0xcc>
  e01c68:	040368b4 	movhi	r16,3490
  e01c6c:	84109804 	addi	r16,r16,16992
  e01c70:	003fec06 	br	e01c24 <scalbnf+0xd4>
  e01c74:	18800644 	addi	r2,r3,25
  e01c78:	100495fa 	slli	r2,r2,23
  e01c7c:	01202034 	movhi	r4,32896
  e01c80:	213fffc4 	addi	r4,r4,-1
  e01c84:	3908703a 	and	r4,r7,r4
  e01c88:	2088b03a 	or	r4,r4,r2
  e01c8c:	014cc034 	movhi	r5,13056
  e01c90:	0e01f6c0 	call	e01f6c <__mulsf3>
  e01c94:	100d883a 	mov	r6,r2
  e01c98:	003fd106 	br	e01be0 <scalbnf+0x90>

00e01c9c <copysignf>:
  e01c9c:	00a00034 	movhi	r2,32768
  e01ca0:	10bfffc4 	addi	r2,r2,-1
  e01ca4:	2088703a 	and	r4,r4,r2
  e01ca8:	28a0002c 	andhi	r2,r5,32768
  e01cac:	2084b03a 	or	r2,r4,r2
  e01cb0:	f800283a 	ret

00e01cb4 <_fpadd_parts>:
  e01cb4:	21c00017 	ldw	r7,0(r4)
  e01cb8:	02000044 	movi	r8,1
  e01cbc:	41c0332e 	bgeu	r8,r7,e01d8c <_fpadd_parts+0xd8>
  e01cc0:	28800017 	ldw	r2,0(r5)
  e01cc4:	4080462e 	bgeu	r8,r2,e01de0 <_fpadd_parts+0x12c>
  e01cc8:	00c00104 	movi	r3,4
  e01ccc:	38c06b26 	beq	r7,r3,e01e7c <_fpadd_parts+0x1c8>
  e01cd0:	10c04326 	beq	r2,r3,e01de0 <_fpadd_parts+0x12c>
  e01cd4:	00c00084 	movi	r3,2
  e01cd8:	10c02e26 	beq	r2,r3,e01d94 <_fpadd_parts+0xe0>
  e01cdc:	38c04026 	beq	r7,r3,e01de0 <_fpadd_parts+0x12c>
  e01ce0:	22800217 	ldw	r10,8(r4)
  e01ce4:	28c00217 	ldw	r3,8(r5)
  e01ce8:	23000317 	ldw	r12,12(r4)
  e01cec:	2a400317 	ldw	r9,12(r5)
  e01cf0:	50cfc83a 	sub	r7,r10,r3
  e01cf4:	3817883a 	mov	r11,r7
  e01cf8:	38004f16 	blt	r7,zero,e01e38 <_fpadd_parts+0x184>
  e01cfc:	008007c4 	movi	r2,31
  e01d00:	11c03316 	blt	r2,r7,e01dd0 <_fpadd_parts+0x11c>
  e01d04:	02c0540e 	bge	zero,r11,e01e58 <_fpadd_parts+0x1a4>
  e01d08:	41c4983a 	sll	r2,r8,r7
  e01d0c:	49c6d83a 	srl	r3,r9,r7
  e01d10:	10bfffc4 	addi	r2,r2,-1
  e01d14:	4884703a 	and	r2,r9,r2
  e01d18:	1004c03a 	cmpne	r2,r2,zero
  e01d1c:	1892b03a 	or	r9,r3,r2
  e01d20:	20c00117 	ldw	r3,4(r4)
  e01d24:	28800117 	ldw	r2,4(r5)
  e01d28:	18803c26 	beq	r3,r2,e01e1c <_fpadd_parts+0x168>
  e01d2c:	18002f26 	beq	r3,zero,e01dec <_fpadd_parts+0x138>
  e01d30:	4b05c83a 	sub	r2,r9,r12
  e01d34:	10004216 	blt	r2,zero,e01e40 <_fpadd_parts+0x18c>
  e01d38:	32800215 	stw	r10,8(r6)
  e01d3c:	30800315 	stw	r2,12(r6)
  e01d40:	30000115 	stw	zero,4(r6)
  e01d44:	31000317 	ldw	r4,12(r6)
  e01d48:	01d00034 	movhi	r7,16384
  e01d4c:	39ffff84 	addi	r7,r7,-2
  e01d50:	20bfffc4 	addi	r2,r4,-1
  e01d54:	2007883a 	mov	r3,r4
  e01d58:	38800836 	bltu	r7,r2,e01d7c <_fpadd_parts+0xc8>
  e01d5c:	31400217 	ldw	r5,8(r6)
  e01d60:	18c9883a 	add	r4,r3,r3
  e01d64:	20bfffc4 	addi	r2,r4,-1
  e01d68:	297fffc4 	addi	r5,r5,-1
  e01d6c:	2007883a 	mov	r3,r4
  e01d70:	38bffb2e 	bgeu	r7,r2,e01d60 <_fpadd_parts+0xac>
  e01d74:	31400215 	stw	r5,8(r6)
  e01d78:	31000315 	stw	r4,12(r6)
  e01d7c:	008000c4 	movi	r2,3
  e01d80:	30800015 	stw	r2,0(r6)
  e01d84:	20001b16 	blt	r4,zero,e01df4 <_fpadd_parts+0x140>
  e01d88:	3009883a 	mov	r4,r6
  e01d8c:	2005883a 	mov	r2,r4
  e01d90:	f800283a 	ret
  e01d94:	38fffd1e 	bne	r7,r3,e01d8c <_fpadd_parts+0xd8>
  e01d98:	31c00015 	stw	r7,0(r6)
  e01d9c:	20800117 	ldw	r2,4(r4)
  e01da0:	30800115 	stw	r2,4(r6)
  e01da4:	20c00217 	ldw	r3,8(r4)
  e01da8:	30c00215 	stw	r3,8(r6)
  e01dac:	20800317 	ldw	r2,12(r4)
  e01db0:	30800315 	stw	r2,12(r6)
  e01db4:	20c00117 	ldw	r3,4(r4)
  e01db8:	28800117 	ldw	r2,4(r5)
  e01dbc:	3009883a 	mov	r4,r6
  e01dc0:	1886703a 	and	r3,r3,r2
  e01dc4:	2005883a 	mov	r2,r4
  e01dc8:	30c00115 	stw	r3,4(r6)
  e01dcc:	f800283a 	ret
  e01dd0:	1a801716 	blt	r3,r10,e01e30 <_fpadd_parts+0x17c>
  e01dd4:	1815883a 	mov	r10,r3
  e01dd8:	0019883a 	mov	r12,zero
  e01ddc:	003fd006 	br	e01d20 <_fpadd_parts+0x6c>
  e01de0:	2809883a 	mov	r4,r5
  e01de4:	2005883a 	mov	r2,r4
  e01de8:	f800283a 	ret
  e01dec:	6245c83a 	sub	r2,r12,r9
  e01df0:	003fd006 	br	e01d34 <_fpadd_parts+0x80>
  e01df4:	30800217 	ldw	r2,8(r6)
  e01df8:	2006d07a 	srli	r3,r4,1
  e01dfc:	2100004c 	andi	r4,r4,1
  e01e00:	10800044 	addi	r2,r2,1
  e01e04:	1906b03a 	or	r3,r3,r4
  e01e08:	3009883a 	mov	r4,r6
  e01e0c:	30800215 	stw	r2,8(r6)
  e01e10:	2005883a 	mov	r2,r4
  e01e14:	30c00315 	stw	r3,12(r6)
  e01e18:	f800283a 	ret
  e01e1c:	4b09883a 	add	r4,r9,r12
  e01e20:	30c00115 	stw	r3,4(r6)
  e01e24:	32800215 	stw	r10,8(r6)
  e01e28:	31000315 	stw	r4,12(r6)
  e01e2c:	003fd306 	br	e01d7c <_fpadd_parts+0xc8>
  e01e30:	0013883a 	mov	r9,zero
  e01e34:	003fba06 	br	e01d20 <_fpadd_parts+0x6c>
  e01e38:	01cfc83a 	sub	r7,zero,r7
  e01e3c:	003faf06 	br	e01cfc <_fpadd_parts+0x48>
  e01e40:	0089c83a 	sub	r4,zero,r2
  e01e44:	00800044 	movi	r2,1
  e01e48:	30800115 	stw	r2,4(r6)
  e01e4c:	32800215 	stw	r10,8(r6)
  e01e50:	31000315 	stw	r4,12(r6)
  e01e54:	003fbb06 	br	e01d44 <_fpadd_parts+0x90>
  e01e58:	583fb126 	beq	r11,zero,e01d20 <_fpadd_parts+0x6c>
  e01e5c:	41c4983a 	sll	r2,r8,r7
  e01e60:	61c6d83a 	srl	r3,r12,r7
  e01e64:	51d5883a 	add	r10,r10,r7
  e01e68:	10bfffc4 	addi	r2,r2,-1
  e01e6c:	6084703a 	and	r2,r12,r2
  e01e70:	1004c03a 	cmpne	r2,r2,zero
  e01e74:	1898b03a 	or	r12,r3,r2
  e01e78:	003fa906 	br	e01d20 <_fpadd_parts+0x6c>
  e01e7c:	11ffc31e 	bne	r2,r7,e01d8c <_fpadd_parts+0xd8>
  e01e80:	28c00117 	ldw	r3,4(r5)
  e01e84:	20800117 	ldw	r2,4(r4)
  e01e88:	10ffc026 	beq	r2,r3,e01d8c <_fpadd_parts+0xd8>
  e01e8c:	01003874 	movhi	r4,225
  e01e90:	21034b04 	addi	r4,r4,3372
  e01e94:	003fbd06 	br	e01d8c <_fpadd_parts+0xd8>

00e01e98 <__subsf3>:
  e01e98:	deffef04 	addi	sp,sp,-68
  e01e9c:	dcc00f15 	stw	r19,60(sp)
  e01ea0:	dcc00204 	addi	r19,sp,8
  e01ea4:	dc400e15 	stw	r17,56(sp)
  e01ea8:	d9000015 	stw	r4,0(sp)
  e01eac:	d9400115 	stw	r5,4(sp)
  e01eb0:	d809883a 	mov	r4,sp
  e01eb4:	980b883a 	mov	r5,r19
  e01eb8:	dc400604 	addi	r17,sp,24
  e01ebc:	dfc01015 	stw	ra,64(sp)
  e01ec0:	0e030940 	call	e03094 <__unpack_f>
  e01ec4:	d9000104 	addi	r4,sp,4
  e01ec8:	880b883a 	mov	r5,r17
  e01ecc:	0e030940 	call	e03094 <__unpack_f>
  e01ed0:	d8800717 	ldw	r2,28(sp)
  e01ed4:	9809883a 	mov	r4,r19
  e01ed8:	880b883a 	mov	r5,r17
  e01edc:	d9800a04 	addi	r6,sp,40
  e01ee0:	1080005c 	xori	r2,r2,1
  e01ee4:	d8800715 	stw	r2,28(sp)
  e01ee8:	0e01cb40 	call	e01cb4 <_fpadd_parts>
  e01eec:	1009883a 	mov	r4,r2
  e01ef0:	0e02f340 	call	e02f34 <__pack_f>
  e01ef4:	dfc01017 	ldw	ra,64(sp)
  e01ef8:	dcc00f17 	ldw	r19,60(sp)
  e01efc:	dc400e17 	ldw	r17,56(sp)
  e01f00:	dec01104 	addi	sp,sp,68
  e01f04:	f800283a 	ret

00e01f08 <__addsf3>:
  e01f08:	deffef04 	addi	sp,sp,-68
  e01f0c:	dcc00f15 	stw	r19,60(sp)
  e01f10:	dcc00204 	addi	r19,sp,8
  e01f14:	dc400e15 	stw	r17,56(sp)
  e01f18:	d9000015 	stw	r4,0(sp)
  e01f1c:	d9400115 	stw	r5,4(sp)
  e01f20:	d809883a 	mov	r4,sp
  e01f24:	980b883a 	mov	r5,r19
  e01f28:	dc400604 	addi	r17,sp,24
  e01f2c:	dfc01015 	stw	ra,64(sp)
  e01f30:	0e030940 	call	e03094 <__unpack_f>
  e01f34:	d9000104 	addi	r4,sp,4
  e01f38:	880b883a 	mov	r5,r17
  e01f3c:	0e030940 	call	e03094 <__unpack_f>
  e01f40:	d9800a04 	addi	r6,sp,40
  e01f44:	9809883a 	mov	r4,r19
  e01f48:	880b883a 	mov	r5,r17
  e01f4c:	0e01cb40 	call	e01cb4 <_fpadd_parts>
  e01f50:	1009883a 	mov	r4,r2
  e01f54:	0e02f340 	call	e02f34 <__pack_f>
  e01f58:	dfc01017 	ldw	ra,64(sp)
  e01f5c:	dcc00f17 	ldw	r19,60(sp)
  e01f60:	dc400e17 	ldw	r17,56(sp)
  e01f64:	dec01104 	addi	sp,sp,68
  e01f68:	f800283a 	ret

00e01f6c <__mulsf3>:
  e01f6c:	deffef04 	addi	sp,sp,-68
  e01f70:	dc400f15 	stw	r17,60(sp)
  e01f74:	dc400204 	addi	r17,sp,8
  e01f78:	dc000e15 	stw	r16,56(sp)
  e01f7c:	d9000015 	stw	r4,0(sp)
  e01f80:	d9400115 	stw	r5,4(sp)
  e01f84:	d809883a 	mov	r4,sp
  e01f88:	880b883a 	mov	r5,r17
  e01f8c:	dc000604 	addi	r16,sp,24
  e01f90:	dfc01015 	stw	ra,64(sp)
  e01f94:	0e030940 	call	e03094 <__unpack_f>
  e01f98:	d9000104 	addi	r4,sp,4
  e01f9c:	800b883a 	mov	r5,r16
  e01fa0:	0e030940 	call	e03094 <__unpack_f>
  e01fa4:	d9000217 	ldw	r4,8(sp)
  e01fa8:	00800044 	movi	r2,1
  e01fac:	01400104 	movi	r5,4
  e01fb0:	1100142e 	bgeu	r2,r4,e02004 <__mulsf3+0x98>
  e01fb4:	d8c00617 	ldw	r3,24(sp)
  e01fb8:	10c0052e 	bgeu	r2,r3,e01fd0 <__mulsf3+0x64>
  e01fbc:	21400f26 	beq	r4,r5,e01ffc <__mulsf3+0x90>
  e01fc0:	19405d26 	beq	r3,r5,e02138 <__mulsf3+0x1cc>
  e01fc4:	00800084 	movi	r2,2
  e01fc8:	20800e26 	beq	r4,r2,e02004 <__mulsf3+0x98>
  e01fcc:	1880181e 	bne	r3,r2,e02030 <__mulsf3+0xc4>
  e01fd0:	d8c00717 	ldw	r3,28(sp)
  e01fd4:	d8800317 	ldw	r2,12(sp)
  e01fd8:	8009883a 	mov	r4,r16
  e01fdc:	10c4c03a 	cmpne	r2,r2,r3
  e01fe0:	d8800715 	stw	r2,28(sp)
  e01fe4:	0e02f340 	call	e02f34 <__pack_f>
  e01fe8:	dfc01017 	ldw	ra,64(sp)
  e01fec:	dc400f17 	ldw	r17,60(sp)
  e01ff0:	dc000e17 	ldw	r16,56(sp)
  e01ff4:	dec01104 	addi	sp,sp,68
  e01ff8:	f800283a 	ret
  e01ffc:	00800084 	movi	r2,2
  e02000:	18804f26 	beq	r3,r2,e02140 <__mulsf3+0x1d4>
  e02004:	d8800317 	ldw	r2,12(sp)
  e02008:	d8c00717 	ldw	r3,28(sp)
  e0200c:	8809883a 	mov	r4,r17
  e02010:	10c4c03a 	cmpne	r2,r2,r3
  e02014:	d8800315 	stw	r2,12(sp)
  e02018:	0e02f340 	call	e02f34 <__pack_f>
  e0201c:	dfc01017 	ldw	ra,64(sp)
  e02020:	dc400f17 	ldw	r17,60(sp)
  e02024:	dc000e17 	ldw	r16,56(sp)
  e02028:	dec01104 	addi	sp,sp,68
  e0202c:	f800283a 	ret
  e02030:	d8800517 	ldw	r2,20(sp)
  e02034:	da000917 	ldw	r8,36(sp)
  e02038:	0013883a 	mov	r9,zero
  e0203c:	0007883a 	mov	r3,zero
  e02040:	480f883a 	mov	r7,r9
  e02044:	180b883a 	mov	r5,r3
  e02048:	400d883a 	mov	r6,r8
  e0204c:	1009883a 	mov	r4,r2
  e02050:	0e02e1c0 	call	e02e1c <__muldi3>
  e02054:	da800417 	ldw	r10,16(sp)
  e02058:	d9800817 	ldw	r6,32(sp)
  e0205c:	da400317 	ldw	r9,12(sp)
  e02060:	52800084 	addi	r10,r10,2
  e02064:	3295883a 	add	r10,r6,r10
  e02068:	d9800717 	ldw	r6,28(sp)
  e0206c:	180b883a 	mov	r5,r3
  e02070:	180f883a 	mov	r7,r3
  e02074:	4992c03a 	cmpne	r9,r9,r6
  e02078:	da400b15 	stw	r9,44(sp)
  e0207c:	1007883a 	mov	r3,r2
  e02080:	da800c15 	stw	r10,48(sp)
  e02084:	2800070e 	bge	r5,zero,e020a4 <__mulsf3+0x138>
  e02088:	2880004c 	andi	r2,r5,1
  e0208c:	1005003a 	cmpeq	r2,r2,zero
  e02090:	500d883a 	mov	r6,r10
  e02094:	10001e26 	beq	r2,zero,e02110 <__mulsf3+0x1a4>
  e02098:	380ed07a 	srli	r7,r7,1
  e0209c:	31800044 	addi	r6,r6,1
  e020a0:	d9800c15 	stw	r6,48(sp)
  e020a4:	01100034 	movhi	r4,16384
  e020a8:	213fffc4 	addi	r4,r4,-1
  e020ac:	21c00b36 	bltu	r4,r7,e020dc <__mulsf3+0x170>
  e020b0:	d8800c17 	ldw	r2,48(sp)
  e020b4:	00000206 	br	e020c0 <__mulsf3+0x154>
  e020b8:	18c7883a 	add	r3,r3,r3
  e020bc:	21c00636 	bltu	r4,r7,e020d8 <__mulsf3+0x16c>
  e020c0:	10bfffc4 	addi	r2,r2,-1
  e020c4:	39cf883a 	add	r7,r7,r7
  e020c8:	183ffb0e 	bge	r3,zero,e020b8 <__mulsf3+0x14c>
  e020cc:	39c00054 	ori	r7,r7,1
  e020d0:	18c7883a 	add	r3,r3,r3
  e020d4:	21fffa2e 	bgeu	r4,r7,e020c0 <__mulsf3+0x154>
  e020d8:	d8800c15 	stw	r2,48(sp)
  e020dc:	39001fcc 	andi	r4,r7,127
  e020e0:	00801004 	movi	r2,64
  e020e4:	20800d26 	beq	r4,r2,e0211c <__mulsf3+0x1b0>
  e020e8:	008000c4 	movi	r2,3
  e020ec:	d9000a04 	addi	r4,sp,40
  e020f0:	d9c00d15 	stw	r7,52(sp)
  e020f4:	d8800a15 	stw	r2,40(sp)
  e020f8:	0e02f340 	call	e02f34 <__pack_f>
  e020fc:	dfc01017 	ldw	ra,64(sp)
  e02100:	dc400f17 	ldw	r17,60(sp)
  e02104:	dc000e17 	ldw	r16,56(sp)
  e02108:	dec01104 	addi	sp,sp,68
  e0210c:	f800283a 	ret
  e02110:	1804d07a 	srli	r2,r3,1
  e02114:	10e00034 	orhi	r3,r2,32768
  e02118:	003fdf06 	br	e02098 <__mulsf3+0x12c>
  e0211c:	3880200c 	andi	r2,r7,128
  e02120:	103ff11e 	bne	r2,zero,e020e8 <__mulsf3+0x17c>
  e02124:	183ff026 	beq	r3,zero,e020e8 <__mulsf3+0x17c>
  e02128:	3907883a 	add	r3,r7,r4
  e0212c:	00bfe004 	movi	r2,-128
  e02130:	188e703a 	and	r7,r3,r2
  e02134:	003fec06 	br	e020e8 <__mulsf3+0x17c>
  e02138:	00800084 	movi	r2,2
  e0213c:	20bfa41e 	bne	r4,r2,e01fd0 <__mulsf3+0x64>
  e02140:	01003874 	movhi	r4,225
  e02144:	21034b04 	addi	r4,r4,3372
  e02148:	003fb306 	br	e02018 <__mulsf3+0xac>

00e0214c <__divsf3>:
  e0214c:	defff304 	addi	sp,sp,-52
  e02150:	dc400b15 	stw	r17,44(sp)
  e02154:	dc400204 	addi	r17,sp,8
  e02158:	dc000a15 	stw	r16,40(sp)
  e0215c:	d9000015 	stw	r4,0(sp)
  e02160:	d9400115 	stw	r5,4(sp)
  e02164:	d809883a 	mov	r4,sp
  e02168:	880b883a 	mov	r5,r17
  e0216c:	dc000604 	addi	r16,sp,24
  e02170:	dfc00c15 	stw	ra,48(sp)
  e02174:	0e030940 	call	e03094 <__unpack_f>
  e02178:	d9000104 	addi	r4,sp,4
  e0217c:	800b883a 	mov	r5,r16
  e02180:	0e030940 	call	e03094 <__unpack_f>
  e02184:	d9000217 	ldw	r4,8(sp)
  e02188:	00800044 	movi	r2,1
  e0218c:	01800104 	movi	r6,4
  e02190:	11000a2e 	bgeu	r2,r4,e021bc <__divsf3+0x70>
  e02194:	d9400617 	ldw	r5,24(sp)
  e02198:	1140432e 	bgeu	r2,r5,e022a8 <__divsf3+0x15c>
  e0219c:	d8800317 	ldw	r2,12(sp)
  e021a0:	d8c00717 	ldw	r3,28(sp)
  e021a4:	10c4f03a 	xor	r2,r2,r3
  e021a8:	d8800315 	stw	r2,12(sp)
  e021ac:	21800226 	beq	r4,r6,e021b8 <__divsf3+0x6c>
  e021b0:	00800084 	movi	r2,2
  e021b4:	2080101e 	bne	r4,r2,e021f8 <__divsf3+0xac>
  e021b8:	29000726 	beq	r5,r4,e021d8 <__divsf3+0x8c>
  e021bc:	8809883a 	mov	r4,r17
  e021c0:	0e02f340 	call	e02f34 <__pack_f>
  e021c4:	dfc00c17 	ldw	ra,48(sp)
  e021c8:	dc400b17 	ldw	r17,44(sp)
  e021cc:	dc000a17 	ldw	r16,40(sp)
  e021d0:	dec00d04 	addi	sp,sp,52
  e021d4:	f800283a 	ret
  e021d8:	01003874 	movhi	r4,225
  e021dc:	21034b04 	addi	r4,r4,3372
  e021e0:	0e02f340 	call	e02f34 <__pack_f>
  e021e4:	dfc00c17 	ldw	ra,48(sp)
  e021e8:	dc400b17 	ldw	r17,44(sp)
  e021ec:	dc000a17 	ldw	r16,40(sp)
  e021f0:	dec00d04 	addi	sp,sp,52
  e021f4:	f800283a 	ret
  e021f8:	29802d26 	beq	r5,r6,e022b0 <__divsf3+0x164>
  e021fc:	28801a26 	beq	r5,r2,e02268 <__divsf3+0x11c>
  e02200:	d8c00417 	ldw	r3,16(sp)
  e02204:	d8800817 	ldw	r2,32(sp)
  e02208:	d9000517 	ldw	r4,20(sp)
  e0220c:	d9800917 	ldw	r6,36(sp)
  e02210:	1885c83a 	sub	r2,r3,r2
  e02214:	d8800415 	stw	r2,16(sp)
  e02218:	2180032e 	bgeu	r4,r6,e02228 <__divsf3+0xdc>
  e0221c:	10bfffc4 	addi	r2,r2,-1
  e02220:	d8800415 	stw	r2,16(sp)
  e02224:	2109883a 	add	r4,r4,r4
  e02228:	01500034 	movhi	r5,16384
  e0222c:	0007883a 	mov	r3,zero
  e02230:	0005883a 	mov	r2,zero
  e02234:	01c007c4 	movi	r7,31
  e02238:	10800044 	addi	r2,r2,1
  e0223c:	21800236 	bltu	r4,r6,e02248 <__divsf3+0xfc>
  e02240:	1946b03a 	or	r3,r3,r5
  e02244:	2189c83a 	sub	r4,r4,r6
  e02248:	280ad07a 	srli	r5,r5,1
  e0224c:	2109883a 	add	r4,r4,r4
  e02250:	11fff91e 	bne	r2,r7,e02238 <__divsf3+0xec>
  e02254:	19401fcc 	andi	r5,r3,127
  e02258:	00801004 	movi	r2,64
  e0225c:	28800a26 	beq	r5,r2,e02288 <__divsf3+0x13c>
  e02260:	d8c00515 	stw	r3,20(sp)
  e02264:	003fd506 	br	e021bc <__divsf3+0x70>
  e02268:	8809883a 	mov	r4,r17
  e0226c:	d9800215 	stw	r6,8(sp)
  e02270:	0e02f340 	call	e02f34 <__pack_f>
  e02274:	dfc00c17 	ldw	ra,48(sp)
  e02278:	dc400b17 	ldw	r17,44(sp)
  e0227c:	dc000a17 	ldw	r16,40(sp)
  e02280:	dec00d04 	addi	sp,sp,52
  e02284:	f800283a 	ret
  e02288:	1880200c 	andi	r2,r3,128
  e0228c:	103ff41e 	bne	r2,zero,e02260 <__divsf3+0x114>
  e02290:	203ff326 	beq	r4,zero,e02260 <__divsf3+0x114>
  e02294:	1947883a 	add	r3,r3,r5
  e02298:	00bfe004 	movi	r2,-128
  e0229c:	1886703a 	and	r3,r3,r2
  e022a0:	d8c00515 	stw	r3,20(sp)
  e022a4:	003fc506 	br	e021bc <__divsf3+0x70>
  e022a8:	8009883a 	mov	r4,r16
  e022ac:	003fc406 	br	e021c0 <__divsf3+0x74>
  e022b0:	8809883a 	mov	r4,r17
  e022b4:	d8000515 	stw	zero,20(sp)
  e022b8:	d8000415 	stw	zero,16(sp)
  e022bc:	003fc006 	br	e021c0 <__divsf3+0x74>

00e022c0 <__eqsf2>:
  e022c0:	defff304 	addi	sp,sp,-52
  e022c4:	dc400b15 	stw	r17,44(sp)
  e022c8:	dc400204 	addi	r17,sp,8
  e022cc:	dc000a15 	stw	r16,40(sp)
  e022d0:	d9000015 	stw	r4,0(sp)
  e022d4:	d9400115 	stw	r5,4(sp)
  e022d8:	d809883a 	mov	r4,sp
  e022dc:	880b883a 	mov	r5,r17
  e022e0:	dc000604 	addi	r16,sp,24
  e022e4:	dfc00c15 	stw	ra,48(sp)
  e022e8:	0e030940 	call	e03094 <__unpack_f>
  e022ec:	d9000104 	addi	r4,sp,4
  e022f0:	800b883a 	mov	r5,r16
  e022f4:	0e030940 	call	e03094 <__unpack_f>
  e022f8:	d8800217 	ldw	r2,8(sp)
  e022fc:	00c00044 	movi	r3,1
  e02300:	180d883a 	mov	r6,r3
  e02304:	1880062e 	bgeu	r3,r2,e02320 <__eqsf2+0x60>
  e02308:	d8800617 	ldw	r2,24(sp)
  e0230c:	8809883a 	mov	r4,r17
  e02310:	800b883a 	mov	r5,r16
  e02314:	1880022e 	bgeu	r3,r2,e02320 <__eqsf2+0x60>
  e02318:	0e0315c0 	call	e0315c <__fpcmp_parts_f>
  e0231c:	100d883a 	mov	r6,r2
  e02320:	3005883a 	mov	r2,r6
  e02324:	dfc00c17 	ldw	ra,48(sp)
  e02328:	dc400b17 	ldw	r17,44(sp)
  e0232c:	dc000a17 	ldw	r16,40(sp)
  e02330:	dec00d04 	addi	sp,sp,52
  e02334:	f800283a 	ret

00e02338 <__gtsf2>:
  e02338:	defff304 	addi	sp,sp,-52
  e0233c:	dc400b15 	stw	r17,44(sp)
  e02340:	dc400204 	addi	r17,sp,8
  e02344:	dc000a15 	stw	r16,40(sp)
  e02348:	d9000015 	stw	r4,0(sp)
  e0234c:	d9400115 	stw	r5,4(sp)
  e02350:	d809883a 	mov	r4,sp
  e02354:	880b883a 	mov	r5,r17
  e02358:	dc000604 	addi	r16,sp,24
  e0235c:	dfc00c15 	stw	ra,48(sp)
  e02360:	0e030940 	call	e03094 <__unpack_f>
  e02364:	d9000104 	addi	r4,sp,4
  e02368:	800b883a 	mov	r5,r16
  e0236c:	0e030940 	call	e03094 <__unpack_f>
  e02370:	d8800217 	ldw	r2,8(sp)
  e02374:	00c00044 	movi	r3,1
  e02378:	01bfffc4 	movi	r6,-1
  e0237c:	1880062e 	bgeu	r3,r2,e02398 <__gtsf2+0x60>
  e02380:	d8800617 	ldw	r2,24(sp)
  e02384:	8809883a 	mov	r4,r17
  e02388:	800b883a 	mov	r5,r16
  e0238c:	1880022e 	bgeu	r3,r2,e02398 <__gtsf2+0x60>
  e02390:	0e0315c0 	call	e0315c <__fpcmp_parts_f>
  e02394:	100d883a 	mov	r6,r2
  e02398:	3005883a 	mov	r2,r6
  e0239c:	dfc00c17 	ldw	ra,48(sp)
  e023a0:	dc400b17 	ldw	r17,44(sp)
  e023a4:	dc000a17 	ldw	r16,40(sp)
  e023a8:	dec00d04 	addi	sp,sp,52
  e023ac:	f800283a 	ret

00e023b0 <__ltsf2>:
  e023b0:	defff304 	addi	sp,sp,-52
  e023b4:	dc400b15 	stw	r17,44(sp)
  e023b8:	dc400204 	addi	r17,sp,8
  e023bc:	dc000a15 	stw	r16,40(sp)
  e023c0:	d9000015 	stw	r4,0(sp)
  e023c4:	d9400115 	stw	r5,4(sp)
  e023c8:	d809883a 	mov	r4,sp
  e023cc:	880b883a 	mov	r5,r17
  e023d0:	dc000604 	addi	r16,sp,24
  e023d4:	dfc00c15 	stw	ra,48(sp)
  e023d8:	0e030940 	call	e03094 <__unpack_f>
  e023dc:	d9000104 	addi	r4,sp,4
  e023e0:	800b883a 	mov	r5,r16
  e023e4:	0e030940 	call	e03094 <__unpack_f>
  e023e8:	d8800217 	ldw	r2,8(sp)
  e023ec:	00c00044 	movi	r3,1
  e023f0:	180d883a 	mov	r6,r3
  e023f4:	1880062e 	bgeu	r3,r2,e02410 <__ltsf2+0x60>
  e023f8:	d8800617 	ldw	r2,24(sp)
  e023fc:	8809883a 	mov	r4,r17
  e02400:	800b883a 	mov	r5,r16
  e02404:	1880022e 	bgeu	r3,r2,e02410 <__ltsf2+0x60>
  e02408:	0e0315c0 	call	e0315c <__fpcmp_parts_f>
  e0240c:	100d883a 	mov	r6,r2
  e02410:	3005883a 	mov	r2,r6
  e02414:	dfc00c17 	ldw	ra,48(sp)
  e02418:	dc400b17 	ldw	r17,44(sp)
  e0241c:	dc000a17 	ldw	r16,40(sp)
  e02420:	dec00d04 	addi	sp,sp,52
  e02424:	f800283a 	ret

00e02428 <__lesf2>:
  e02428:	defff304 	addi	sp,sp,-52
  e0242c:	dc400b15 	stw	r17,44(sp)
  e02430:	dc400204 	addi	r17,sp,8
  e02434:	dc000a15 	stw	r16,40(sp)
  e02438:	d9000015 	stw	r4,0(sp)
  e0243c:	d9400115 	stw	r5,4(sp)
  e02440:	d809883a 	mov	r4,sp
  e02444:	880b883a 	mov	r5,r17
  e02448:	dc000604 	addi	r16,sp,24
  e0244c:	dfc00c15 	stw	ra,48(sp)
  e02450:	0e030940 	call	e03094 <__unpack_f>
  e02454:	d9000104 	addi	r4,sp,4
  e02458:	800b883a 	mov	r5,r16
  e0245c:	0e030940 	call	e03094 <__unpack_f>
  e02460:	d8800217 	ldw	r2,8(sp)
  e02464:	00c00044 	movi	r3,1
  e02468:	180d883a 	mov	r6,r3
  e0246c:	1880062e 	bgeu	r3,r2,e02488 <__lesf2+0x60>
  e02470:	d8800617 	ldw	r2,24(sp)
  e02474:	8809883a 	mov	r4,r17
  e02478:	800b883a 	mov	r5,r16
  e0247c:	1880022e 	bgeu	r3,r2,e02488 <__lesf2+0x60>
  e02480:	0e0315c0 	call	e0315c <__fpcmp_parts_f>
  e02484:	100d883a 	mov	r6,r2
  e02488:	3005883a 	mov	r2,r6
  e0248c:	dfc00c17 	ldw	ra,48(sp)
  e02490:	dc400b17 	ldw	r17,44(sp)
  e02494:	dc000a17 	ldw	r16,40(sp)
  e02498:	dec00d04 	addi	sp,sp,52
  e0249c:	f800283a 	ret

00e024a0 <__floatsisf>:
  e024a0:	2006d7fa 	srli	r3,r4,31
  e024a4:	defffa04 	addi	sp,sp,-24
  e024a8:	008000c4 	movi	r2,3
  e024ac:	dfc00515 	stw	ra,20(sp)
  e024b0:	dc000415 	stw	r16,16(sp)
  e024b4:	d8800015 	stw	r2,0(sp)
  e024b8:	d8c00115 	stw	r3,4(sp)
  e024bc:	2000081e 	bne	r4,zero,e024e0 <__floatsisf+0x40>
  e024c0:	00800084 	movi	r2,2
  e024c4:	d8800015 	stw	r2,0(sp)
  e024c8:	d809883a 	mov	r4,sp
  e024cc:	0e02f340 	call	e02f34 <__pack_f>
  e024d0:	dfc00517 	ldw	ra,20(sp)
  e024d4:	dc000417 	ldw	r16,16(sp)
  e024d8:	dec00604 	addi	sp,sp,24
  e024dc:	f800283a 	ret
  e024e0:	00800784 	movi	r2,30
  e024e4:	1807003a 	cmpeq	r3,r3,zero
  e024e8:	d8800215 	stw	r2,8(sp)
  e024ec:	18000e1e 	bne	r3,zero,e02528 <__floatsisf+0x88>
  e024f0:	00a00034 	movhi	r2,32768
  e024f4:	20800e26 	beq	r4,r2,e02530 <__floatsisf+0x90>
  e024f8:	0121c83a 	sub	r16,zero,r4
  e024fc:	8009883a 	mov	r4,r16
  e02500:	dc000315 	stw	r16,12(sp)
  e02504:	0e02eb40 	call	e02eb4 <__clzsi2>
  e02508:	117fffc4 	addi	r5,r2,-1
  e0250c:	017fee0e 	bge	zero,r5,e024c8 <__floatsisf+0x28>
  e02510:	d8800217 	ldw	r2,8(sp)
  e02514:	8146983a 	sll	r3,r16,r5
  e02518:	1145c83a 	sub	r2,r2,r5
  e0251c:	d8c00315 	stw	r3,12(sp)
  e02520:	d8800215 	stw	r2,8(sp)
  e02524:	003fe806 	br	e024c8 <__floatsisf+0x28>
  e02528:	2021883a 	mov	r16,r4
  e0252c:	003ff306 	br	e024fc <__floatsisf+0x5c>
  e02530:	00b3c034 	movhi	r2,52992
  e02534:	003fe606 	br	e024d0 <__floatsisf+0x30>

00e02538 <__extendsfdf2>:
  e02538:	defff904 	addi	sp,sp,-28
  e0253c:	d9000115 	stw	r4,4(sp)
  e02540:	d9400204 	addi	r5,sp,8
  e02544:	d9000104 	addi	r4,sp,4
  e02548:	dfc00615 	stw	ra,24(sp)
  e0254c:	0e030940 	call	e03094 <__unpack_f>
  e02550:	d9c00517 	ldw	r7,20(sp)
  e02554:	0011883a 	mov	r8,zero
  e02558:	400697ba 	slli	r3,r8,30
  e0255c:	3812d0ba 	srli	r9,r7,2
  e02560:	380497ba 	slli	r2,r7,30
  e02564:	d9000217 	ldw	r4,8(sp)
  e02568:	d9400317 	ldw	r5,12(sp)
  e0256c:	d9800417 	ldw	r6,16(sp)
  e02570:	48c6b03a 	or	r3,r9,r3
  e02574:	100f883a 	mov	r7,r2
  e02578:	d8c00015 	stw	r3,0(sp)
  e0257c:	0e02d700 	call	e02d70 <__make_dp>
  e02580:	dfc00617 	ldw	ra,24(sp)
  e02584:	dec00704 	addi	sp,sp,28
  e02588:	f800283a 	ret

00e0258c <_fpadd_parts>:
  e0258c:	defff804 	addi	sp,sp,-32
  e02590:	dcc00315 	stw	r19,12(sp)
  e02594:	2027883a 	mov	r19,r4
  e02598:	21000017 	ldw	r4,0(r4)
  e0259c:	00c00044 	movi	r3,1
  e025a0:	dd400515 	stw	r21,20(sp)
  e025a4:	dd000415 	stw	r20,16(sp)
  e025a8:	ddc00715 	stw	r23,28(sp)
  e025ac:	dd800615 	stw	r22,24(sp)
  e025b0:	dc800215 	stw	r18,8(sp)
  e025b4:	dc400115 	stw	r17,4(sp)
  e025b8:	dc000015 	stw	r16,0(sp)
  e025bc:	282b883a 	mov	r21,r5
  e025c0:	3029883a 	mov	r20,r6
  e025c4:	1900632e 	bgeu	r3,r4,e02754 <_fpadd_parts+0x1c8>
  e025c8:	28800017 	ldw	r2,0(r5)
  e025cc:	1880812e 	bgeu	r3,r2,e027d4 <_fpadd_parts+0x248>
  e025d0:	00c00104 	movi	r3,4
  e025d4:	20c0dc26 	beq	r4,r3,e02948 <_fpadd_parts+0x3bc>
  e025d8:	10c07e26 	beq	r2,r3,e027d4 <_fpadd_parts+0x248>
  e025dc:	00c00084 	movi	r3,2
  e025e0:	10c06726 	beq	r2,r3,e02780 <_fpadd_parts+0x1f4>
  e025e4:	20c07b26 	beq	r4,r3,e027d4 <_fpadd_parts+0x248>
  e025e8:	9dc00217 	ldw	r23,8(r19)
  e025ec:	28c00217 	ldw	r3,8(r5)
  e025f0:	9c400317 	ldw	r17,12(r19)
  e025f4:	2bc00317 	ldw	r15,12(r5)
  e025f8:	b8cdc83a 	sub	r6,r23,r3
  e025fc:	9c800417 	ldw	r18,16(r19)
  e02600:	2c000417 	ldw	r16,16(r5)
  e02604:	3009883a 	mov	r4,r6
  e02608:	30009716 	blt	r6,zero,e02868 <_fpadd_parts+0x2dc>
  e0260c:	00800fc4 	movi	r2,63
  e02610:	11806b16 	blt	r2,r6,e027c0 <_fpadd_parts+0x234>
  e02614:	0100a40e 	bge	zero,r4,e028a8 <_fpadd_parts+0x31c>
  e02618:	35bff804 	addi	r22,r6,-32
  e0261c:	b000bc16 	blt	r22,zero,e02910 <_fpadd_parts+0x384>
  e02620:	8596d83a 	srl	r11,r16,r22
  e02624:	0019883a 	mov	r12,zero
  e02628:	0013883a 	mov	r9,zero
  e0262c:	01000044 	movi	r4,1
  e02630:	0015883a 	mov	r10,zero
  e02634:	b000be16 	blt	r22,zero,e02930 <_fpadd_parts+0x3a4>
  e02638:	2590983a 	sll	r8,r4,r22
  e0263c:	000f883a 	mov	r7,zero
  e02640:	00bfffc4 	movi	r2,-1
  e02644:	3889883a 	add	r4,r7,r2
  e02648:	408b883a 	add	r5,r8,r2
  e0264c:	21cd803a 	cmpltu	r6,r4,r7
  e02650:	314b883a 	add	r5,r6,r5
  e02654:	7904703a 	and	r2,r15,r4
  e02658:	8146703a 	and	r3,r16,r5
  e0265c:	10c4b03a 	or	r2,r2,r3
  e02660:	10000226 	beq	r2,zero,e0266c <_fpadd_parts+0xe0>
  e02664:	02400044 	movi	r9,1
  e02668:	0015883a 	mov	r10,zero
  e0266c:	5a5eb03a 	or	r15,r11,r9
  e02670:	62a0b03a 	or	r16,r12,r10
  e02674:	99400117 	ldw	r5,4(r19)
  e02678:	a8800117 	ldw	r2,4(r21)
  e0267c:	28806e26 	beq	r5,r2,e02838 <_fpadd_parts+0x2ac>
  e02680:	28006626 	beq	r5,zero,e0281c <_fpadd_parts+0x290>
  e02684:	7c45c83a 	sub	r2,r15,r17
  e02688:	7889803a 	cmpltu	r4,r15,r2
  e0268c:	8487c83a 	sub	r3,r16,r18
  e02690:	1909c83a 	sub	r4,r3,r4
  e02694:	100d883a 	mov	r6,r2
  e02698:	200f883a 	mov	r7,r4
  e0269c:	38007716 	blt	r7,zero,e0287c <_fpadd_parts+0x2f0>
  e026a0:	a5c00215 	stw	r23,8(r20)
  e026a4:	a1c00415 	stw	r7,16(r20)
  e026a8:	a0000115 	stw	zero,4(r20)
  e026ac:	a1800315 	stw	r6,12(r20)
  e026b0:	a2000317 	ldw	r8,12(r20)
  e026b4:	a2400417 	ldw	r9,16(r20)
  e026b8:	00bfffc4 	movi	r2,-1
  e026bc:	408b883a 	add	r5,r8,r2
  e026c0:	2a09803a 	cmpltu	r4,r5,r8
  e026c4:	488d883a 	add	r6,r9,r2
  e026c8:	01c40034 	movhi	r7,4096
  e026cc:	39ffffc4 	addi	r7,r7,-1
  e026d0:	218d883a 	add	r6,r4,r6
  e026d4:	39801736 	bltu	r7,r6,e02734 <_fpadd_parts+0x1a8>
  e026d8:	31c06526 	beq	r6,r7,e02870 <_fpadd_parts+0x2e4>
  e026dc:	a3000217 	ldw	r12,8(r20)
  e026e0:	4209883a 	add	r4,r8,r8
  e026e4:	00bfffc4 	movi	r2,-1
  e026e8:	220f803a 	cmpltu	r7,r4,r8
  e026ec:	4a4b883a 	add	r5,r9,r9
  e026f0:	394f883a 	add	r7,r7,r5
  e026f4:	2095883a 	add	r10,r4,r2
  e026f8:	3897883a 	add	r11,r7,r2
  e026fc:	510d803a 	cmpltu	r6,r10,r4
  e02700:	6099883a 	add	r12,r12,r2
  e02704:	32d7883a 	add	r11,r6,r11
  e02708:	00840034 	movhi	r2,4096
  e0270c:	10bfffc4 	addi	r2,r2,-1
  e02710:	2011883a 	mov	r8,r4
  e02714:	3813883a 	mov	r9,r7
  e02718:	a1000315 	stw	r4,12(r20)
  e0271c:	a1c00415 	stw	r7,16(r20)
  e02720:	a3000215 	stw	r12,8(r20)
  e02724:	12c00336 	bltu	r2,r11,e02734 <_fpadd_parts+0x1a8>
  e02728:	58bfed1e 	bne	r11,r2,e026e0 <_fpadd_parts+0x154>
  e0272c:	00bfff84 	movi	r2,-2
  e02730:	12bfeb2e 	bgeu	r2,r10,e026e0 <_fpadd_parts+0x154>
  e02734:	a2800417 	ldw	r10,16(r20)
  e02738:	008000c4 	movi	r2,3
  e0273c:	00c80034 	movhi	r3,8192
  e02740:	18ffffc4 	addi	r3,r3,-1
  e02744:	a2400317 	ldw	r9,12(r20)
  e02748:	a0800015 	stw	r2,0(r20)
  e0274c:	1a802336 	bltu	r3,r10,e027dc <_fpadd_parts+0x250>
  e02750:	a027883a 	mov	r19,r20
  e02754:	9805883a 	mov	r2,r19
  e02758:	ddc00717 	ldw	r23,28(sp)
  e0275c:	dd800617 	ldw	r22,24(sp)
  e02760:	dd400517 	ldw	r21,20(sp)
  e02764:	dd000417 	ldw	r20,16(sp)
  e02768:	dcc00317 	ldw	r19,12(sp)
  e0276c:	dc800217 	ldw	r18,8(sp)
  e02770:	dc400117 	ldw	r17,4(sp)
  e02774:	dc000017 	ldw	r16,0(sp)
  e02778:	dec00804 	addi	sp,sp,32
  e0277c:	f800283a 	ret
  e02780:	20fff41e 	bne	r4,r3,e02754 <_fpadd_parts+0x1c8>
  e02784:	31000015 	stw	r4,0(r6)
  e02788:	98800117 	ldw	r2,4(r19)
  e0278c:	30800115 	stw	r2,4(r6)
  e02790:	98c00217 	ldw	r3,8(r19)
  e02794:	30c00215 	stw	r3,8(r6)
  e02798:	98800317 	ldw	r2,12(r19)
  e0279c:	30800315 	stw	r2,12(r6)
  e027a0:	98c00417 	ldw	r3,16(r19)
  e027a4:	30c00415 	stw	r3,16(r6)
  e027a8:	98800117 	ldw	r2,4(r19)
  e027ac:	28c00117 	ldw	r3,4(r5)
  e027b0:	3027883a 	mov	r19,r6
  e027b4:	10c4703a 	and	r2,r2,r3
  e027b8:	30800115 	stw	r2,4(r6)
  e027bc:	003fe506 	br	e02754 <_fpadd_parts+0x1c8>
  e027c0:	1dc02616 	blt	r3,r23,e0285c <_fpadd_parts+0x2d0>
  e027c4:	0023883a 	mov	r17,zero
  e027c8:	182f883a 	mov	r23,r3
  e027cc:	0025883a 	mov	r18,zero
  e027d0:	003fa806 	br	e02674 <_fpadd_parts+0xe8>
  e027d4:	a827883a 	mov	r19,r21
  e027d8:	003fde06 	br	e02754 <_fpadd_parts+0x1c8>
  e027dc:	01800044 	movi	r6,1
  e027e0:	500497fa 	slli	r2,r10,31
  e027e4:	4808d07a 	srli	r4,r9,1
  e027e8:	518ad83a 	srl	r5,r10,r6
  e027ec:	a2000217 	ldw	r8,8(r20)
  e027f0:	1108b03a 	or	r4,r2,r4
  e027f4:	0007883a 	mov	r3,zero
  e027f8:	4984703a 	and	r2,r9,r6
  e027fc:	208cb03a 	or	r6,r4,r2
  e02800:	28ceb03a 	or	r7,r5,r3
  e02804:	42000044 	addi	r8,r8,1
  e02808:	a027883a 	mov	r19,r20
  e0280c:	a1c00415 	stw	r7,16(r20)
  e02810:	a2000215 	stw	r8,8(r20)
  e02814:	a1800315 	stw	r6,12(r20)
  e02818:	003fce06 	br	e02754 <_fpadd_parts+0x1c8>
  e0281c:	8bc5c83a 	sub	r2,r17,r15
  e02820:	8889803a 	cmpltu	r4,r17,r2
  e02824:	9407c83a 	sub	r3,r18,r16
  e02828:	1909c83a 	sub	r4,r3,r4
  e0282c:	100d883a 	mov	r6,r2
  e02830:	200f883a 	mov	r7,r4
  e02834:	003f9906 	br	e0269c <_fpadd_parts+0x110>
  e02838:	7c45883a 	add	r2,r15,r17
  e0283c:	13c9803a 	cmpltu	r4,r2,r15
  e02840:	8487883a 	add	r3,r16,r18
  e02844:	20c9883a 	add	r4,r4,r3
  e02848:	a1400115 	stw	r5,4(r20)
  e0284c:	a5c00215 	stw	r23,8(r20)
  e02850:	a0800315 	stw	r2,12(r20)
  e02854:	a1000415 	stw	r4,16(r20)
  e02858:	003fb606 	br	e02734 <_fpadd_parts+0x1a8>
  e0285c:	001f883a 	mov	r15,zero
  e02860:	0021883a 	mov	r16,zero
  e02864:	003f8306 	br	e02674 <_fpadd_parts+0xe8>
  e02868:	018dc83a 	sub	r6,zero,r6
  e0286c:	003f6706 	br	e0260c <_fpadd_parts+0x80>
  e02870:	00bfff84 	movi	r2,-2
  e02874:	117faf36 	bltu	r2,r5,e02734 <_fpadd_parts+0x1a8>
  e02878:	003f9806 	br	e026dc <_fpadd_parts+0x150>
  e0287c:	0005883a 	mov	r2,zero
  e02880:	1189c83a 	sub	r4,r2,r6
  e02884:	1105803a 	cmpltu	r2,r2,r4
  e02888:	01cbc83a 	sub	r5,zero,r7
  e0288c:	2885c83a 	sub	r2,r5,r2
  e02890:	01800044 	movi	r6,1
  e02894:	a1800115 	stw	r6,4(r20)
  e02898:	a5c00215 	stw	r23,8(r20)
  e0289c:	a1000315 	stw	r4,12(r20)
  e028a0:	a0800415 	stw	r2,16(r20)
  e028a4:	003f8206 	br	e026b0 <_fpadd_parts+0x124>
  e028a8:	203f7226 	beq	r4,zero,e02674 <_fpadd_parts+0xe8>
  e028ac:	35bff804 	addi	r22,r6,-32
  e028b0:	b9af883a 	add	r23,r23,r6
  e028b4:	b0003116 	blt	r22,zero,e0297c <_fpadd_parts+0x3f0>
  e028b8:	959ad83a 	srl	r13,r18,r22
  e028bc:	001d883a 	mov	r14,zero
  e028c0:	000f883a 	mov	r7,zero
  e028c4:	01000044 	movi	r4,1
  e028c8:	0011883a 	mov	r8,zero
  e028cc:	b0002516 	blt	r22,zero,e02964 <_fpadd_parts+0x3d8>
  e028d0:	2594983a 	sll	r10,r4,r22
  e028d4:	0013883a 	mov	r9,zero
  e028d8:	00bfffc4 	movi	r2,-1
  e028dc:	4889883a 	add	r4,r9,r2
  e028e0:	508b883a 	add	r5,r10,r2
  e028e4:	224d803a 	cmpltu	r6,r4,r9
  e028e8:	314b883a 	add	r5,r6,r5
  e028ec:	8904703a 	and	r2,r17,r4
  e028f0:	9146703a 	and	r3,r18,r5
  e028f4:	10c4b03a 	or	r2,r2,r3
  e028f8:	10000226 	beq	r2,zero,e02904 <_fpadd_parts+0x378>
  e028fc:	01c00044 	movi	r7,1
  e02900:	0011883a 	mov	r8,zero
  e02904:	69e2b03a 	or	r17,r13,r7
  e02908:	7224b03a 	or	r18,r14,r8
  e0290c:	003f5906 	br	e02674 <_fpadd_parts+0xe8>
  e02910:	8407883a 	add	r3,r16,r16
  e02914:	008007c4 	movi	r2,31
  e02918:	1185c83a 	sub	r2,r2,r6
  e0291c:	1886983a 	sll	r3,r3,r2
  e02920:	7996d83a 	srl	r11,r15,r6
  e02924:	8198d83a 	srl	r12,r16,r6
  e02928:	1ad6b03a 	or	r11,r3,r11
  e0292c:	003f3e06 	br	e02628 <_fpadd_parts+0x9c>
  e02930:	2006d07a 	srli	r3,r4,1
  e02934:	008007c4 	movi	r2,31
  e02938:	1185c83a 	sub	r2,r2,r6
  e0293c:	1890d83a 	srl	r8,r3,r2
  e02940:	218e983a 	sll	r7,r4,r6
  e02944:	003f3e06 	br	e02640 <_fpadd_parts+0xb4>
  e02948:	113f821e 	bne	r2,r4,e02754 <_fpadd_parts+0x1c8>
  e0294c:	28c00117 	ldw	r3,4(r5)
  e02950:	98800117 	ldw	r2,4(r19)
  e02954:	10ff7f26 	beq	r2,r3,e02754 <_fpadd_parts+0x1c8>
  e02958:	04c03874 	movhi	r19,225
  e0295c:	9cc34f04 	addi	r19,r19,3388
  e02960:	003f7c06 	br	e02754 <_fpadd_parts+0x1c8>
  e02964:	2006d07a 	srli	r3,r4,1
  e02968:	008007c4 	movi	r2,31
  e0296c:	1185c83a 	sub	r2,r2,r6
  e02970:	1894d83a 	srl	r10,r3,r2
  e02974:	2192983a 	sll	r9,r4,r6
  e02978:	003fd706 	br	e028d8 <_fpadd_parts+0x34c>
  e0297c:	9487883a 	add	r3,r18,r18
  e02980:	008007c4 	movi	r2,31
  e02984:	1185c83a 	sub	r2,r2,r6
  e02988:	1886983a 	sll	r3,r3,r2
  e0298c:	899ad83a 	srl	r13,r17,r6
  e02990:	919cd83a 	srl	r14,r18,r6
  e02994:	1b5ab03a 	or	r13,r3,r13
  e02998:	003fc906 	br	e028c0 <_fpadd_parts+0x334>

00e0299c <__subdf3>:
  e0299c:	deffea04 	addi	sp,sp,-88
  e029a0:	dcc01415 	stw	r19,80(sp)
  e029a4:	dcc00404 	addi	r19,sp,16
  e029a8:	2011883a 	mov	r8,r4
  e029ac:	2813883a 	mov	r9,r5
  e029b0:	dc401315 	stw	r17,76(sp)
  e029b4:	d809883a 	mov	r4,sp
  e029b8:	980b883a 	mov	r5,r19
  e029bc:	dc400904 	addi	r17,sp,36
  e029c0:	dfc01515 	stw	ra,84(sp)
  e029c4:	da400115 	stw	r9,4(sp)
  e029c8:	d9c00315 	stw	r7,12(sp)
  e029cc:	da000015 	stw	r8,0(sp)
  e029d0:	d9800215 	stw	r6,8(sp)
  e029d4:	0e035440 	call	e03544 <__unpack_d>
  e029d8:	d9000204 	addi	r4,sp,8
  e029dc:	880b883a 	mov	r5,r17
  e029e0:	0e035440 	call	e03544 <__unpack_d>
  e029e4:	d8800a17 	ldw	r2,40(sp)
  e029e8:	880b883a 	mov	r5,r17
  e029ec:	9809883a 	mov	r4,r19
  e029f0:	d9800e04 	addi	r6,sp,56
  e029f4:	1080005c 	xori	r2,r2,1
  e029f8:	d8800a15 	stw	r2,40(sp)
  e029fc:	0e0258c0 	call	e0258c <_fpadd_parts>
  e02a00:	1009883a 	mov	r4,r2
  e02a04:	0e032300 	call	e03230 <__pack_d>
  e02a08:	dfc01517 	ldw	ra,84(sp)
  e02a0c:	dcc01417 	ldw	r19,80(sp)
  e02a10:	dc401317 	ldw	r17,76(sp)
  e02a14:	dec01604 	addi	sp,sp,88
  e02a18:	f800283a 	ret

00e02a1c <__adddf3>:
  e02a1c:	deffea04 	addi	sp,sp,-88
  e02a20:	dcc01415 	stw	r19,80(sp)
  e02a24:	dcc00404 	addi	r19,sp,16
  e02a28:	2011883a 	mov	r8,r4
  e02a2c:	2813883a 	mov	r9,r5
  e02a30:	dc401315 	stw	r17,76(sp)
  e02a34:	d809883a 	mov	r4,sp
  e02a38:	980b883a 	mov	r5,r19
  e02a3c:	dc400904 	addi	r17,sp,36
  e02a40:	dfc01515 	stw	ra,84(sp)
  e02a44:	da400115 	stw	r9,4(sp)
  e02a48:	d9c00315 	stw	r7,12(sp)
  e02a4c:	da000015 	stw	r8,0(sp)
  e02a50:	d9800215 	stw	r6,8(sp)
  e02a54:	0e035440 	call	e03544 <__unpack_d>
  e02a58:	d9000204 	addi	r4,sp,8
  e02a5c:	880b883a 	mov	r5,r17
  e02a60:	0e035440 	call	e03544 <__unpack_d>
  e02a64:	d9800e04 	addi	r6,sp,56
  e02a68:	9809883a 	mov	r4,r19
  e02a6c:	880b883a 	mov	r5,r17
  e02a70:	0e0258c0 	call	e0258c <_fpadd_parts>
  e02a74:	1009883a 	mov	r4,r2
  e02a78:	0e032300 	call	e03230 <__pack_d>
  e02a7c:	dfc01517 	ldw	ra,84(sp)
  e02a80:	dcc01417 	ldw	r19,80(sp)
  e02a84:	dc401317 	ldw	r17,76(sp)
  e02a88:	dec01604 	addi	sp,sp,88
  e02a8c:	f800283a 	ret

00e02a90 <__divdf3>:
  e02a90:	deffed04 	addi	sp,sp,-76
  e02a94:	dcc01115 	stw	r19,68(sp)
  e02a98:	dcc00404 	addi	r19,sp,16
  e02a9c:	2011883a 	mov	r8,r4
  e02aa0:	2813883a 	mov	r9,r5
  e02aa4:	dc000e15 	stw	r16,56(sp)
  e02aa8:	d809883a 	mov	r4,sp
  e02aac:	980b883a 	mov	r5,r19
  e02ab0:	dc000904 	addi	r16,sp,36
  e02ab4:	dfc01215 	stw	ra,72(sp)
  e02ab8:	da400115 	stw	r9,4(sp)
  e02abc:	d9c00315 	stw	r7,12(sp)
  e02ac0:	da000015 	stw	r8,0(sp)
  e02ac4:	d9800215 	stw	r6,8(sp)
  e02ac8:	dc801015 	stw	r18,64(sp)
  e02acc:	dc400f15 	stw	r17,60(sp)
  e02ad0:	0e035440 	call	e03544 <__unpack_d>
  e02ad4:	d9000204 	addi	r4,sp,8
  e02ad8:	800b883a 	mov	r5,r16
  e02adc:	0e035440 	call	e03544 <__unpack_d>
  e02ae0:	d9000417 	ldw	r4,16(sp)
  e02ae4:	00800044 	movi	r2,1
  e02ae8:	11000b2e 	bgeu	r2,r4,e02b18 <__divdf3+0x88>
  e02aec:	d9400917 	ldw	r5,36(sp)
  e02af0:	1140762e 	bgeu	r2,r5,e02ccc <__divdf3+0x23c>
  e02af4:	d8800517 	ldw	r2,20(sp)
  e02af8:	d8c00a17 	ldw	r3,40(sp)
  e02afc:	01800104 	movi	r6,4
  e02b00:	10c4f03a 	xor	r2,r2,r3
  e02b04:	d8800515 	stw	r2,20(sp)
  e02b08:	21800226 	beq	r4,r6,e02b14 <__divdf3+0x84>
  e02b0c:	00800084 	movi	r2,2
  e02b10:	2080141e 	bne	r4,r2,e02b64 <__divdf3+0xd4>
  e02b14:	29000926 	beq	r5,r4,e02b3c <__divdf3+0xac>
  e02b18:	9809883a 	mov	r4,r19
  e02b1c:	0e032300 	call	e03230 <__pack_d>
  e02b20:	dfc01217 	ldw	ra,72(sp)
  e02b24:	dcc01117 	ldw	r19,68(sp)
  e02b28:	dc801017 	ldw	r18,64(sp)
  e02b2c:	dc400f17 	ldw	r17,60(sp)
  e02b30:	dc000e17 	ldw	r16,56(sp)
  e02b34:	dec01304 	addi	sp,sp,76
  e02b38:	f800283a 	ret
  e02b3c:	01003874 	movhi	r4,225
  e02b40:	21034f04 	addi	r4,r4,3388
  e02b44:	0e032300 	call	e03230 <__pack_d>
  e02b48:	dfc01217 	ldw	ra,72(sp)
  e02b4c:	dcc01117 	ldw	r19,68(sp)
  e02b50:	dc801017 	ldw	r18,64(sp)
  e02b54:	dc400f17 	ldw	r17,60(sp)
  e02b58:	dc000e17 	ldw	r16,56(sp)
  e02b5c:	dec01304 	addi	sp,sp,76
  e02b60:	f800283a 	ret
  e02b64:	29805b26 	beq	r5,r6,e02cd4 <__divdf3+0x244>
  e02b68:	28802d26 	beq	r5,r2,e02c20 <__divdf3+0x190>
  e02b6c:	d8c00617 	ldw	r3,24(sp)
  e02b70:	d8800b17 	ldw	r2,44(sp)
  e02b74:	d9c00817 	ldw	r7,32(sp)
  e02b78:	dc400d17 	ldw	r17,52(sp)
  e02b7c:	188bc83a 	sub	r5,r3,r2
  e02b80:	d9800717 	ldw	r6,28(sp)
  e02b84:	dc000c17 	ldw	r16,48(sp)
  e02b88:	d9400615 	stw	r5,24(sp)
  e02b8c:	3c403836 	bltu	r7,r17,e02c70 <__divdf3+0x1e0>
  e02b90:	89c03626 	beq	r17,r7,e02c6c <__divdf3+0x1dc>
  e02b94:	0015883a 	mov	r10,zero
  e02b98:	001d883a 	mov	r14,zero
  e02b9c:	02c40034 	movhi	r11,4096
  e02ba0:	001f883a 	mov	r15,zero
  e02ba4:	003f883a 	mov	ra,zero
  e02ba8:	04800f44 	movi	r18,61
  e02bac:	00000f06 	br	e02bec <__divdf3+0x15c>
  e02bb0:	601d883a 	mov	r14,r12
  e02bb4:	681f883a 	mov	r15,r13
  e02bb8:	400d883a 	mov	r6,r8
  e02bbc:	100f883a 	mov	r7,r2
  e02bc0:	3191883a 	add	r8,r6,r6
  e02bc4:	5808d07a 	srli	r4,r11,1
  e02bc8:	4185803a 	cmpltu	r2,r8,r6
  e02bcc:	39d3883a 	add	r9,r7,r7
  e02bd0:	28c6b03a 	or	r3,r5,r3
  e02bd4:	1245883a 	add	r2,r2,r9
  e02bd8:	1815883a 	mov	r10,r3
  e02bdc:	2017883a 	mov	r11,r4
  e02be0:	400d883a 	mov	r6,r8
  e02be4:	100f883a 	mov	r7,r2
  e02be8:	fc801726 	beq	ra,r18,e02c48 <__divdf3+0x1b8>
  e02bec:	580a97fa 	slli	r5,r11,31
  e02bf0:	5006d07a 	srli	r3,r10,1
  e02bf4:	ffc00044 	addi	ra,ra,1
  e02bf8:	3c7ff136 	bltu	r7,r17,e02bc0 <__divdf3+0x130>
  e02bfc:	3411c83a 	sub	r8,r6,r16
  e02c00:	3205803a 	cmpltu	r2,r6,r8
  e02c04:	3c53c83a 	sub	r9,r7,r17
  e02c08:	7298b03a 	or	r12,r14,r10
  e02c0c:	7adab03a 	or	r13,r15,r11
  e02c10:	4885c83a 	sub	r2,r9,r2
  e02c14:	89ffe61e 	bne	r17,r7,e02bb0 <__divdf3+0x120>
  e02c18:	343fe936 	bltu	r6,r16,e02bc0 <__divdf3+0x130>
  e02c1c:	003fe406 	br	e02bb0 <__divdf3+0x120>
  e02c20:	9809883a 	mov	r4,r19
  e02c24:	d9800415 	stw	r6,16(sp)
  e02c28:	0e032300 	call	e03230 <__pack_d>
  e02c2c:	dfc01217 	ldw	ra,72(sp)
  e02c30:	dcc01117 	ldw	r19,68(sp)
  e02c34:	dc801017 	ldw	r18,64(sp)
  e02c38:	dc400f17 	ldw	r17,60(sp)
  e02c3c:	dc000e17 	ldw	r16,56(sp)
  e02c40:	dec01304 	addi	sp,sp,76
  e02c44:	f800283a 	ret
  e02c48:	00803fc4 	movi	r2,255
  e02c4c:	7090703a 	and	r8,r14,r2
  e02c50:	00802004 	movi	r2,128
  e02c54:	0007883a 	mov	r3,zero
  e02c58:	0013883a 	mov	r9,zero
  e02c5c:	40800d26 	beq	r8,r2,e02c94 <__divdf3+0x204>
  e02c60:	dbc00815 	stw	r15,32(sp)
  e02c64:	db800715 	stw	r14,28(sp)
  e02c68:	003fab06 	br	e02b18 <__divdf3+0x88>
  e02c6c:	343fc92e 	bgeu	r6,r16,e02b94 <__divdf3+0x104>
  e02c70:	3185883a 	add	r2,r6,r6
  e02c74:	1189803a 	cmpltu	r4,r2,r6
  e02c78:	39c7883a 	add	r3,r7,r7
  e02c7c:	20c9883a 	add	r4,r4,r3
  e02c80:	297fffc4 	addi	r5,r5,-1
  e02c84:	100d883a 	mov	r6,r2
  e02c88:	200f883a 	mov	r7,r4
  e02c8c:	d9400615 	stw	r5,24(sp)
  e02c90:	003fc006 	br	e02b94 <__divdf3+0x104>
  e02c94:	483ff21e 	bne	r9,zero,e02c60 <__divdf3+0x1d0>
  e02c98:	01004004 	movi	r4,256
  e02c9c:	7104703a 	and	r2,r14,r4
  e02ca0:	10c4b03a 	or	r2,r2,r3
  e02ca4:	103fee1e 	bne	r2,zero,e02c60 <__divdf3+0x1d0>
  e02ca8:	31c4b03a 	or	r2,r6,r7
  e02cac:	103fec26 	beq	r2,zero,e02c60 <__divdf3+0x1d0>
  e02cb0:	7205883a 	add	r2,r14,r8
  e02cb4:	1391803a 	cmpltu	r8,r2,r14
  e02cb8:	43d1883a 	add	r8,r8,r15
  e02cbc:	013fc004 	movi	r4,-256
  e02cc0:	111c703a 	and	r14,r2,r4
  e02cc4:	401f883a 	mov	r15,r8
  e02cc8:	003fe506 	br	e02c60 <__divdf3+0x1d0>
  e02ccc:	8009883a 	mov	r4,r16
  e02cd0:	003f9206 	br	e02b1c <__divdf3+0x8c>
  e02cd4:	9809883a 	mov	r4,r19
  e02cd8:	d8000715 	stw	zero,28(sp)
  e02cdc:	d8000815 	stw	zero,32(sp)
  e02ce0:	d8000615 	stw	zero,24(sp)
  e02ce4:	003f8d06 	br	e02b1c <__divdf3+0x8c>

00e02ce8 <__nedf2>:
  e02ce8:	deffef04 	addi	sp,sp,-68
  e02cec:	dc400f15 	stw	r17,60(sp)
  e02cf0:	dc400404 	addi	r17,sp,16
  e02cf4:	2005883a 	mov	r2,r4
  e02cf8:	2807883a 	mov	r3,r5
  e02cfc:	dc000e15 	stw	r16,56(sp)
  e02d00:	d809883a 	mov	r4,sp
  e02d04:	880b883a 	mov	r5,r17
  e02d08:	dc000904 	addi	r16,sp,36
  e02d0c:	d8c00115 	stw	r3,4(sp)
  e02d10:	d8800015 	stw	r2,0(sp)
  e02d14:	d9800215 	stw	r6,8(sp)
  e02d18:	dfc01015 	stw	ra,64(sp)
  e02d1c:	d9c00315 	stw	r7,12(sp)
  e02d20:	0e035440 	call	e03544 <__unpack_d>
  e02d24:	d9000204 	addi	r4,sp,8
  e02d28:	800b883a 	mov	r5,r16
  e02d2c:	0e035440 	call	e03544 <__unpack_d>
  e02d30:	d8800417 	ldw	r2,16(sp)
  e02d34:	00c00044 	movi	r3,1
  e02d38:	180d883a 	mov	r6,r3
  e02d3c:	1880062e 	bgeu	r3,r2,e02d58 <__nedf2+0x70>
  e02d40:	d8800917 	ldw	r2,36(sp)
  e02d44:	8809883a 	mov	r4,r17
  e02d48:	800b883a 	mov	r5,r16
  e02d4c:	1880022e 	bgeu	r3,r2,e02d58 <__nedf2+0x70>
  e02d50:	0e0367c0 	call	e0367c <__fpcmp_parts_d>
  e02d54:	100d883a 	mov	r6,r2
  e02d58:	3005883a 	mov	r2,r6
  e02d5c:	dfc01017 	ldw	ra,64(sp)
  e02d60:	dc400f17 	ldw	r17,60(sp)
  e02d64:	dc000e17 	ldw	r16,56(sp)
  e02d68:	dec01104 	addi	sp,sp,68
  e02d6c:	f800283a 	ret

00e02d70 <__make_dp>:
  e02d70:	defff904 	addi	sp,sp,-28
  e02d74:	d8c00717 	ldw	r3,28(sp)
  e02d78:	d9000015 	stw	r4,0(sp)
  e02d7c:	d809883a 	mov	r4,sp
  e02d80:	dfc00515 	stw	ra,20(sp)
  e02d84:	d9c00615 	stw	r7,24(sp)
  e02d88:	d9400115 	stw	r5,4(sp)
  e02d8c:	d9800215 	stw	r6,8(sp)
  e02d90:	d8c00415 	stw	r3,16(sp)
  e02d94:	d9c00315 	stw	r7,12(sp)
  e02d98:	0e032300 	call	e03230 <__pack_d>
  e02d9c:	dfc00517 	ldw	ra,20(sp)
  e02da0:	dec00704 	addi	sp,sp,28
  e02da4:	f800283a 	ret

00e02da8 <__truncdfsf2>:
  e02da8:	defff804 	addi	sp,sp,-32
  e02dac:	2005883a 	mov	r2,r4
  e02db0:	2807883a 	mov	r3,r5
  e02db4:	d809883a 	mov	r4,sp
  e02db8:	d9400204 	addi	r5,sp,8
  e02dbc:	d8c00115 	stw	r3,4(sp)
  e02dc0:	d8800015 	stw	r2,0(sp)
  e02dc4:	dfc00715 	stw	ra,28(sp)
  e02dc8:	0e035440 	call	e03544 <__unpack_d>
  e02dcc:	d9c00517 	ldw	r7,20(sp)
  e02dd0:	da000617 	ldw	r8,24(sp)
  e02dd4:	02d00034 	movhi	r11,16384
  e02dd8:	5affffc4 	addi	r11,r11,-1
  e02ddc:	3812d7ba 	srli	r9,r7,30
  e02de0:	401a90ba 	slli	r13,r8,2
  e02de4:	3ac4703a 	and	r2,r7,r11
  e02de8:	0007883a 	mov	r3,zero
  e02dec:	6a52b03a 	or	r9,r13,r9
  e02df0:	10c4b03a 	or	r2,r2,r3
  e02df4:	d9000217 	ldw	r4,8(sp)
  e02df8:	d9400317 	ldw	r5,12(sp)
  e02dfc:	d9800417 	ldw	r6,16(sp)
  e02e00:	480f883a 	mov	r7,r9
  e02e04:	10000126 	beq	r2,zero,e02e0c <__truncdfsf2+0x64>
  e02e08:	49c00054 	ori	r7,r9,1
  e02e0c:	0e032040 	call	e03204 <__make_fp>
  e02e10:	dfc00717 	ldw	ra,28(sp)
  e02e14:	dec00804 	addi	sp,sp,32
  e02e18:	f800283a 	ret

00e02e1c <__muldi3>:
  e02e1c:	2011883a 	mov	r8,r4
  e02e20:	427fffcc 	andi	r9,r8,65535
  e02e24:	4018d43a 	srli	r12,r8,16
  e02e28:	32bfffcc 	andi	r10,r6,65535
  e02e2c:	3016d43a 	srli	r11,r6,16
  e02e30:	4a85383a 	mul	r2,r9,r10
  e02e34:	6295383a 	mul	r10,r12,r10
  e02e38:	4ad3383a 	mul	r9,r9,r11
  e02e3c:	113fffcc 	andi	r4,r2,65535
  e02e40:	1004d43a 	srli	r2,r2,16
  e02e44:	4a93883a 	add	r9,r9,r10
  e02e48:	3807883a 	mov	r3,r7
  e02e4c:	1245883a 	add	r2,r2,r9
  e02e50:	280f883a 	mov	r7,r5
  e02e54:	180b883a 	mov	r5,r3
  e02e58:	1006943a 	slli	r3,r2,16
  e02e5c:	defffd04 	addi	sp,sp,-12
  e02e60:	dc800215 	stw	r18,8(sp)
  e02e64:	1907883a 	add	r3,r3,r4
  e02e68:	dc400115 	stw	r17,4(sp)
  e02e6c:	dc000015 	stw	r16,0(sp)
  e02e70:	4165383a 	mul	r18,r8,r5
  e02e74:	31e3383a 	mul	r17,r6,r7
  e02e78:	1012d43a 	srli	r9,r2,16
  e02e7c:	62d9383a 	mul	r12,r12,r11
  e02e80:	181f883a 	mov	r15,r3
  e02e84:	1280022e 	bgeu	r2,r10,e02e90 <__muldi3+0x74>
  e02e88:	00800074 	movhi	r2,1
  e02e8c:	6099883a 	add	r12,r12,r2
  e02e90:	624d883a 	add	r6,r12,r9
  e02e94:	9187883a 	add	r3,r18,r6
  e02e98:	88c7883a 	add	r3,r17,r3
  e02e9c:	7805883a 	mov	r2,r15
  e02ea0:	dc800217 	ldw	r18,8(sp)
  e02ea4:	dc400117 	ldw	r17,4(sp)
  e02ea8:	dc000017 	ldw	r16,0(sp)
  e02eac:	dec00304 	addi	sp,sp,12
  e02eb0:	f800283a 	ret

00e02eb4 <__clzsi2>:
  e02eb4:	00bfffd4 	movui	r2,65535
  e02eb8:	11000e36 	bltu	r2,r4,e02ef4 <__clzsi2+0x40>
  e02ebc:	00803fc4 	movi	r2,255
  e02ec0:	01400204 	movi	r5,8
  e02ec4:	0007883a 	mov	r3,zero
  e02ec8:	11001036 	bltu	r2,r4,e02f0c <__clzsi2+0x58>
  e02ecc:	000b883a 	mov	r5,zero
  e02ed0:	20c6d83a 	srl	r3,r4,r3
  e02ed4:	00803874 	movhi	r2,225
  e02ed8:	10835404 	addi	r2,r2,3408
  e02edc:	1887883a 	add	r3,r3,r2
  e02ee0:	18800003 	ldbu	r2,0(r3)
  e02ee4:	00c00804 	movi	r3,32
  e02ee8:	2885883a 	add	r2,r5,r2
  e02eec:	1885c83a 	sub	r2,r3,r2
  e02ef0:	f800283a 	ret
  e02ef4:	01400404 	movi	r5,16
  e02ef8:	00804034 	movhi	r2,256
  e02efc:	10bfffc4 	addi	r2,r2,-1
  e02f00:	2807883a 	mov	r3,r5
  e02f04:	113ff22e 	bgeu	r2,r4,e02ed0 <__clzsi2+0x1c>
  e02f08:	01400604 	movi	r5,24
  e02f0c:	2807883a 	mov	r3,r5
  e02f10:	20c6d83a 	srl	r3,r4,r3
  e02f14:	00803874 	movhi	r2,225
  e02f18:	10835404 	addi	r2,r2,3408
  e02f1c:	1887883a 	add	r3,r3,r2
  e02f20:	18800003 	ldbu	r2,0(r3)
  e02f24:	00c00804 	movi	r3,32
  e02f28:	2885883a 	add	r2,r5,r2
  e02f2c:	1885c83a 	sub	r2,r3,r2
  e02f30:	f800283a 	ret

00e02f34 <__pack_f>:
  e02f34:	20c00017 	ldw	r3,0(r4)
  e02f38:	01c00044 	movi	r7,1
  e02f3c:	21800317 	ldw	r6,12(r4)
  e02f40:	21400117 	ldw	r5,4(r4)
  e02f44:	38c02d2e 	bgeu	r7,r3,e02ffc <__pack_f+0xc8>
  e02f48:	00800104 	movi	r2,4
  e02f4c:	18802826 	beq	r3,r2,e02ff0 <__pack_f+0xbc>
  e02f50:	00800084 	movi	r2,2
  e02f54:	18800126 	beq	r3,r2,e02f5c <__pack_f+0x28>
  e02f58:	3000101e 	bne	r6,zero,e02f9c <__pack_f+0x68>
  e02f5c:	000d883a 	mov	r6,zero
  e02f60:	0007883a 	mov	r3,zero
  e02f64:	19003fcc 	andi	r4,r3,255
  e02f68:	200895fa 	slli	r4,r4,23
  e02f6c:	00c02034 	movhi	r3,128
  e02f70:	18ffffc4 	addi	r3,r3,-1
  e02f74:	30c6703a 	and	r3,r6,r3
  e02f78:	10a0002c 	andhi	r2,r2,32768
  e02f7c:	10c4b03a 	or	r2,r2,r3
  e02f80:	280a97fa 	slli	r5,r5,31
  e02f84:	1104b03a 	or	r2,r2,r4
  e02f88:	00e00034 	movhi	r3,32768
  e02f8c:	18ffffc4 	addi	r3,r3,-1
  e02f90:	10c4703a 	and	r2,r2,r3
  e02f94:	1144b03a 	or	r2,r2,r5
  e02f98:	f800283a 	ret
  e02f9c:	21000217 	ldw	r4,8(r4)
  e02fa0:	00bfe084 	movi	r2,-126
  e02fa4:	20801b16 	blt	r4,r2,e03014 <__pack_f+0xe0>
  e02fa8:	00801fc4 	movi	r2,127
  e02fac:	11001016 	blt	r2,r4,e02ff0 <__pack_f+0xbc>
  e02fb0:	308e703a 	and	r7,r6,r2
  e02fb4:	2087883a 	add	r3,r4,r2
  e02fb8:	00801004 	movi	r2,64
  e02fbc:	38800526 	beq	r7,r2,e02fd4 <__pack_f+0xa0>
  e02fc0:	31800fc4 	addi	r6,r6,63
  e02fc4:	30000716 	blt	r6,zero,e02fe4 <__pack_f+0xb0>
  e02fc8:	300490ba 	slli	r2,r6,2
  e02fcc:	100cd27a 	srli	r6,r2,9
  e02fd0:	003fe406 	br	e02f64 <__pack_f+0x30>
  e02fd4:	3080200c 	andi	r2,r6,128
  e02fd8:	103ffa26 	beq	r2,zero,e02fc4 <__pack_f+0x90>
  e02fdc:	31cd883a 	add	r6,r6,r7
  e02fe0:	003ff806 	br	e02fc4 <__pack_f+0x90>
  e02fe4:	300cd07a 	srli	r6,r6,1
  e02fe8:	18c00044 	addi	r3,r3,1
  e02fec:	003ff606 	br	e02fc8 <__pack_f+0x94>
  e02ff0:	000d883a 	mov	r6,zero
  e02ff4:	00ffffc4 	movi	r3,-1
  e02ff8:	003fda06 	br	e02f64 <__pack_f+0x30>
  e02ffc:	31800434 	orhi	r6,r6,16
  e03000:	00802034 	movhi	r2,128
  e03004:	10bfffc4 	addi	r2,r2,-1
  e03008:	308c703a 	and	r6,r6,r2
  e0300c:	00ffffc4 	movi	r3,-1
  e03010:	003fd406 	br	e02f64 <__pack_f+0x30>
  e03014:	1109c83a 	sub	r4,r2,r4
  e03018:	00800644 	movi	r2,25
  e0301c:	11001216 	blt	r2,r4,e03068 <__pack_f+0x134>
  e03020:	3904983a 	sll	r2,r7,r4
  e03024:	3106d83a 	srl	r3,r6,r4
  e03028:	10bfffc4 	addi	r2,r2,-1
  e0302c:	3084703a 	and	r2,r6,r2
  e03030:	1004c03a 	cmpne	r2,r2,zero
  e03034:	1886b03a 	or	r3,r3,r2
  e03038:	19001fcc 	andi	r4,r3,127
  e0303c:	00801004 	movi	r2,64
  e03040:	20800c26 	beq	r4,r2,e03074 <__pack_f+0x140>
  e03044:	18c00fc4 	addi	r3,r3,63
  e03048:	00900034 	movhi	r2,16384
  e0304c:	10bfffc4 	addi	r2,r2,-1
  e03050:	180cd1fa 	srli	r6,r3,7
  e03054:	10c7803a 	cmpltu	r3,r2,r3
  e03058:	00802034 	movhi	r2,128
  e0305c:	10bfffc4 	addi	r2,r2,-1
  e03060:	308c703a 	and	r6,r6,r2
  e03064:	003fbf06 	br	e02f64 <__pack_f+0x30>
  e03068:	0007883a 	mov	r3,zero
  e0306c:	000d883a 	mov	r6,zero
  e03070:	003ff906 	br	e03058 <__pack_f+0x124>
  e03074:	1880200c 	andi	r2,r3,128
  e03078:	10000126 	beq	r2,zero,e03080 <__pack_f+0x14c>
  e0307c:	1907883a 	add	r3,r3,r4
  e03080:	180cd1fa 	srli	r6,r3,7
  e03084:	00900034 	movhi	r2,16384
  e03088:	10bfffc4 	addi	r2,r2,-1
  e0308c:	10c7803a 	cmpltu	r3,r2,r3
  e03090:	003ff106 	br	e03058 <__pack_f+0x124>

00e03094 <__unpack_f>:
  e03094:	21800017 	ldw	r6,0(r4)
  e03098:	00c02034 	movhi	r3,128
  e0309c:	18ffffc4 	addi	r3,r3,-1
  e030a0:	3004d5fa 	srli	r2,r6,23
  e030a4:	3008d7fa 	srli	r4,r6,31
  e030a8:	30ce703a 	and	r7,r6,r3
  e030ac:	10c03fcc 	andi	r3,r2,255
  e030b0:	29000115 	stw	r4,4(r5)
  e030b4:	1800131e 	bne	r3,zero,e03104 <__unpack_f+0x70>
  e030b8:	38000f26 	beq	r7,zero,e030f8 <__unpack_f+0x64>
  e030bc:	380691fa 	slli	r3,r7,7
  e030c0:	01bfe084 	movi	r6,-126
  e030c4:	008000c4 	movi	r2,3
  e030c8:	01100034 	movhi	r4,16384
  e030cc:	213fffc4 	addi	r4,r4,-1
  e030d0:	28800015 	stw	r2,0(r5)
  e030d4:	29800215 	stw	r6,8(r5)
  e030d8:	20c00536 	bltu	r4,r3,e030f0 <__unpack_f+0x5c>
  e030dc:	3005883a 	mov	r2,r6
  e030e0:	18c7883a 	add	r3,r3,r3
  e030e4:	10bfffc4 	addi	r2,r2,-1
  e030e8:	20fffd2e 	bgeu	r4,r3,e030e0 <__unpack_f+0x4c>
  e030ec:	28800215 	stw	r2,8(r5)
  e030f0:	28c00315 	stw	r3,12(r5)
  e030f4:	f800283a 	ret
  e030f8:	00800084 	movi	r2,2
  e030fc:	28800015 	stw	r2,0(r5)
  e03100:	f800283a 	ret
  e03104:	00803fc4 	movi	r2,255
  e03108:	18800826 	beq	r3,r2,e0312c <__unpack_f+0x98>
  e0310c:	380491fa 	slli	r2,r7,7
  e03110:	18ffe044 	addi	r3,r3,-127
  e03114:	28c00215 	stw	r3,8(r5)
  e03118:	10900034 	orhi	r2,r2,16384
  e0311c:	28800315 	stw	r2,12(r5)
  e03120:	008000c4 	movi	r2,3
  e03124:	28800015 	stw	r2,0(r5)
  e03128:	f800283a 	ret
  e0312c:	3800031e 	bne	r7,zero,e0313c <__unpack_f+0xa8>
  e03130:	00800104 	movi	r2,4
  e03134:	28800015 	stw	r2,0(r5)
  e03138:	f800283a 	ret
  e0313c:	3080042c 	andhi	r2,r6,16
  e03140:	10000426 	beq	r2,zero,e03154 <__unpack_f+0xc0>
  e03144:	00800044 	movi	r2,1
  e03148:	28800015 	stw	r2,0(r5)
  e0314c:	29c00315 	stw	r7,12(r5)
  e03150:	f800283a 	ret
  e03154:	28000015 	stw	zero,0(r5)
  e03158:	003ffc06 	br	e0314c <__unpack_f+0xb8>

00e0315c <__fpcmp_parts_f>:
  e0315c:	21800017 	ldw	r6,0(r4)
  e03160:	00c00044 	movi	r3,1
  e03164:	19800a2e 	bgeu	r3,r6,e03190 <__fpcmp_parts_f+0x34>
  e03168:	28800017 	ldw	r2,0(r5)
  e0316c:	1880082e 	bgeu	r3,r2,e03190 <__fpcmp_parts_f+0x34>
  e03170:	00c00104 	movi	r3,4
  e03174:	30c01e26 	beq	r6,r3,e031f0 <__fpcmp_parts_f+0x94>
  e03178:	10c01a26 	beq	r2,r3,e031e4 <__fpcmp_parts_f+0x88>
  e0317c:	00c00084 	movi	r3,2
  e03180:	30c00526 	beq	r6,r3,e03198 <__fpcmp_parts_f+0x3c>
  e03184:	10c0071e 	bne	r2,r3,e031a4 <__fpcmp_parts_f+0x48>
  e03188:	20800117 	ldw	r2,4(r4)
  e0318c:	1000091e 	bne	r2,zero,e031b4 <__fpcmp_parts_f+0x58>
  e03190:	00800044 	movi	r2,1
  e03194:	f800283a 	ret
  e03198:	10c0121e 	bne	r2,r3,e031e4 <__fpcmp_parts_f+0x88>
  e0319c:	0005883a 	mov	r2,zero
  e031a0:	f800283a 	ret
  e031a4:	20c00117 	ldw	r3,4(r4)
  e031a8:	28800117 	ldw	r2,4(r5)
  e031ac:	18800326 	beq	r3,r2,e031bc <__fpcmp_parts_f+0x60>
  e031b0:	183ff726 	beq	r3,zero,e03190 <__fpcmp_parts_f+0x34>
  e031b4:	00bfffc4 	movi	r2,-1
  e031b8:	f800283a 	ret
  e031bc:	21800217 	ldw	r6,8(r4)
  e031c0:	28800217 	ldw	r2,8(r5)
  e031c4:	11bffa16 	blt	r2,r6,e031b0 <__fpcmp_parts_f+0x54>
  e031c8:	30800416 	blt	r6,r2,e031dc <__fpcmp_parts_f+0x80>
  e031cc:	21000317 	ldw	r4,12(r4)
  e031d0:	29400317 	ldw	r5,12(r5)
  e031d4:	293ff636 	bltu	r5,r4,e031b0 <__fpcmp_parts_f+0x54>
  e031d8:	217ff02e 	bgeu	r4,r5,e0319c <__fpcmp_parts_f+0x40>
  e031dc:	183fec1e 	bne	r3,zero,e03190 <__fpcmp_parts_f+0x34>
  e031e0:	003ff406 	br	e031b4 <__fpcmp_parts_f+0x58>
  e031e4:	28800117 	ldw	r2,4(r5)
  e031e8:	103fe91e 	bne	r2,zero,e03190 <__fpcmp_parts_f+0x34>
  e031ec:	003ff106 	br	e031b4 <__fpcmp_parts_f+0x58>
  e031f0:	11bfe51e 	bne	r2,r6,e03188 <__fpcmp_parts_f+0x2c>
  e031f4:	28c00117 	ldw	r3,4(r5)
  e031f8:	20800117 	ldw	r2,4(r4)
  e031fc:	1885c83a 	sub	r2,r3,r2
  e03200:	f800283a 	ret

00e03204 <__make_fp>:
  e03204:	defffb04 	addi	sp,sp,-20
  e03208:	d9000015 	stw	r4,0(sp)
  e0320c:	d809883a 	mov	r4,sp
  e03210:	dfc00415 	stw	ra,16(sp)
  e03214:	d9400115 	stw	r5,4(sp)
  e03218:	d9800215 	stw	r6,8(sp)
  e0321c:	d9c00315 	stw	r7,12(sp)
  e03220:	0e02f340 	call	e02f34 <__pack_f>
  e03224:	dfc00417 	ldw	ra,16(sp)
  e03228:	dec00504 	addi	sp,sp,20
  e0322c:	f800283a 	ret

00e03230 <__pack_d>:
  e03230:	20c00017 	ldw	r3,0(r4)
  e03234:	defffd04 	addi	sp,sp,-12
  e03238:	dc000015 	stw	r16,0(sp)
  e0323c:	dc800215 	stw	r18,8(sp)
  e03240:	dc400115 	stw	r17,4(sp)
  e03244:	00800044 	movi	r2,1
  e03248:	22000317 	ldw	r8,12(r4)
  e0324c:	001f883a 	mov	r15,zero
  e03250:	22400417 	ldw	r9,16(r4)
  e03254:	24000117 	ldw	r16,4(r4)
  e03258:	10c0552e 	bgeu	r2,r3,e033b0 <__pack_d+0x180>
  e0325c:	00800104 	movi	r2,4
  e03260:	18804f26 	beq	r3,r2,e033a0 <__pack_d+0x170>
  e03264:	00800084 	movi	r2,2
  e03268:	18800226 	beq	r3,r2,e03274 <__pack_d+0x44>
  e0326c:	4244b03a 	or	r2,r8,r9
  e03270:	10001a1e 	bne	r2,zero,e032dc <__pack_d+0xac>
  e03274:	000d883a 	mov	r6,zero
  e03278:	000f883a 	mov	r7,zero
  e0327c:	0011883a 	mov	r8,zero
  e03280:	00800434 	movhi	r2,16
  e03284:	10bfffc4 	addi	r2,r2,-1
  e03288:	301d883a 	mov	r14,r6
  e0328c:	3884703a 	and	r2,r7,r2
  e03290:	400a953a 	slli	r5,r8,20
  e03294:	79bffc2c 	andhi	r6,r15,65520
  e03298:	308cb03a 	or	r6,r6,r2
  e0329c:	00e00434 	movhi	r3,32784
  e032a0:	18ffffc4 	addi	r3,r3,-1
  e032a4:	800497fa 	slli	r2,r16,31
  e032a8:	30c6703a 	and	r3,r6,r3
  e032ac:	1946b03a 	or	r3,r3,r5
  e032b0:	01600034 	movhi	r5,32768
  e032b4:	297fffc4 	addi	r5,r5,-1
  e032b8:	194a703a 	and	r5,r3,r5
  e032bc:	288ab03a 	or	r5,r5,r2
  e032c0:	2807883a 	mov	r3,r5
  e032c4:	7005883a 	mov	r2,r14
  e032c8:	dc800217 	ldw	r18,8(sp)
  e032cc:	dc400117 	ldw	r17,4(sp)
  e032d0:	dc000017 	ldw	r16,0(sp)
  e032d4:	dec00304 	addi	sp,sp,12
  e032d8:	f800283a 	ret
  e032dc:	21000217 	ldw	r4,8(r4)
  e032e0:	00bf0084 	movi	r2,-1022
  e032e4:	20803f16 	blt	r4,r2,e033e4 <__pack_d+0x1b4>
  e032e8:	0080ffc4 	movi	r2,1023
  e032ec:	11002c16 	blt	r2,r4,e033a0 <__pack_d+0x170>
  e032f0:	00803fc4 	movi	r2,255
  e032f4:	408c703a 	and	r6,r8,r2
  e032f8:	00802004 	movi	r2,128
  e032fc:	0007883a 	mov	r3,zero
  e03300:	000f883a 	mov	r7,zero
  e03304:	2280ffc4 	addi	r10,r4,1023
  e03308:	30801e26 	beq	r6,r2,e03384 <__pack_d+0x154>
  e0330c:	00801fc4 	movi	r2,127
  e03310:	4089883a 	add	r4,r8,r2
  e03314:	220d803a 	cmpltu	r6,r4,r8
  e03318:	324d883a 	add	r6,r6,r9
  e0331c:	2011883a 	mov	r8,r4
  e03320:	3013883a 	mov	r9,r6
  e03324:	00880034 	movhi	r2,8192
  e03328:	10bfffc4 	addi	r2,r2,-1
  e0332c:	12400d36 	bltu	r2,r9,e03364 <__pack_d+0x134>
  e03330:	4804963a 	slli	r2,r9,24
  e03334:	400cd23a 	srli	r6,r8,8
  e03338:	480ed23a 	srli	r7,r9,8
  e0333c:	013fffc4 	movi	r4,-1
  e03340:	118cb03a 	or	r6,r2,r6
  e03344:	01400434 	movhi	r5,16
  e03348:	297fffc4 	addi	r5,r5,-1
  e0334c:	3104703a 	and	r2,r6,r4
  e03350:	3946703a 	and	r3,r7,r5
  e03354:	5201ffcc 	andi	r8,r10,2047
  e03358:	100d883a 	mov	r6,r2
  e0335c:	180f883a 	mov	r7,r3
  e03360:	003fc706 	br	e03280 <__pack_d+0x50>
  e03364:	480897fa 	slli	r4,r9,31
  e03368:	4004d07a 	srli	r2,r8,1
  e0336c:	4806d07a 	srli	r3,r9,1
  e03370:	52800044 	addi	r10,r10,1
  e03374:	2084b03a 	or	r2,r4,r2
  e03378:	1011883a 	mov	r8,r2
  e0337c:	1813883a 	mov	r9,r3
  e03380:	003feb06 	br	e03330 <__pack_d+0x100>
  e03384:	383fe11e 	bne	r7,zero,e0330c <__pack_d+0xdc>
  e03388:	01004004 	movi	r4,256
  e0338c:	4104703a 	and	r2,r8,r4
  e03390:	10c4b03a 	or	r2,r2,r3
  e03394:	103fe326 	beq	r2,zero,e03324 <__pack_d+0xf4>
  e03398:	3005883a 	mov	r2,r6
  e0339c:	003fdc06 	br	e03310 <__pack_d+0xe0>
  e033a0:	000d883a 	mov	r6,zero
  e033a4:	000f883a 	mov	r7,zero
  e033a8:	0201ffc4 	movi	r8,2047
  e033ac:	003fb406 	br	e03280 <__pack_d+0x50>
  e033b0:	0005883a 	mov	r2,zero
  e033b4:	00c00234 	movhi	r3,8
  e033b8:	408cb03a 	or	r6,r8,r2
  e033bc:	48ceb03a 	or	r7,r9,r3
  e033c0:	013fffc4 	movi	r4,-1
  e033c4:	01400434 	movhi	r5,16
  e033c8:	297fffc4 	addi	r5,r5,-1
  e033cc:	3104703a 	and	r2,r6,r4
  e033d0:	3946703a 	and	r3,r7,r5
  e033d4:	100d883a 	mov	r6,r2
  e033d8:	180f883a 	mov	r7,r3
  e033dc:	0201ffc4 	movi	r8,2047
  e033e0:	003fa706 	br	e03280 <__pack_d+0x50>
  e033e4:	1109c83a 	sub	r4,r2,r4
  e033e8:	00800e04 	movi	r2,56
  e033ec:	11004316 	blt	r2,r4,e034fc <__pack_d+0x2cc>
  e033f0:	21fff804 	addi	r7,r4,-32
  e033f4:	38004516 	blt	r7,zero,e0350c <__pack_d+0x2dc>
  e033f8:	49d8d83a 	srl	r12,r9,r7
  e033fc:	001b883a 	mov	r13,zero
  e03400:	0023883a 	mov	r17,zero
  e03404:	01400044 	movi	r5,1
  e03408:	0025883a 	mov	r18,zero
  e0340c:	38004716 	blt	r7,zero,e0352c <__pack_d+0x2fc>
  e03410:	29d6983a 	sll	r11,r5,r7
  e03414:	0015883a 	mov	r10,zero
  e03418:	00bfffc4 	movi	r2,-1
  e0341c:	5089883a 	add	r4,r10,r2
  e03420:	588b883a 	add	r5,r11,r2
  e03424:	228d803a 	cmpltu	r6,r4,r10
  e03428:	314b883a 	add	r5,r6,r5
  e0342c:	4104703a 	and	r2,r8,r4
  e03430:	4946703a 	and	r3,r9,r5
  e03434:	10c4b03a 	or	r2,r2,r3
  e03438:	10000226 	beq	r2,zero,e03444 <__pack_d+0x214>
  e0343c:	04400044 	movi	r17,1
  e03440:	0025883a 	mov	r18,zero
  e03444:	00803fc4 	movi	r2,255
  e03448:	644eb03a 	or	r7,r12,r17
  e0344c:	3892703a 	and	r9,r7,r2
  e03450:	00802004 	movi	r2,128
  e03454:	6c90b03a 	or	r8,r13,r18
  e03458:	0015883a 	mov	r10,zero
  e0345c:	48801626 	beq	r9,r2,e034b8 <__pack_d+0x288>
  e03460:	01001fc4 	movi	r4,127
  e03464:	3905883a 	add	r2,r7,r4
  e03468:	11cd803a 	cmpltu	r6,r2,r7
  e0346c:	320d883a 	add	r6,r6,r8
  e03470:	100f883a 	mov	r7,r2
  e03474:	00840034 	movhi	r2,4096
  e03478:	10bfffc4 	addi	r2,r2,-1
  e0347c:	3011883a 	mov	r8,r6
  e03480:	0007883a 	mov	r3,zero
  e03484:	11801b36 	bltu	r2,r6,e034f4 <__pack_d+0x2c4>
  e03488:	4004963a 	slli	r2,r8,24
  e0348c:	3808d23a 	srli	r4,r7,8
  e03490:	400ad23a 	srli	r5,r8,8
  e03494:	1813883a 	mov	r9,r3
  e03498:	1108b03a 	or	r4,r2,r4
  e0349c:	00bfffc4 	movi	r2,-1
  e034a0:	00c00434 	movhi	r3,16
  e034a4:	18ffffc4 	addi	r3,r3,-1
  e034a8:	208c703a 	and	r6,r4,r2
  e034ac:	28ce703a 	and	r7,r5,r3
  e034b0:	4a01ffcc 	andi	r8,r9,2047
  e034b4:	003f7206 	br	e03280 <__pack_d+0x50>
  e034b8:	503fe91e 	bne	r10,zero,e03460 <__pack_d+0x230>
  e034bc:	01004004 	movi	r4,256
  e034c0:	3904703a 	and	r2,r7,r4
  e034c4:	0007883a 	mov	r3,zero
  e034c8:	10c4b03a 	or	r2,r2,r3
  e034cc:	10000626 	beq	r2,zero,e034e8 <__pack_d+0x2b8>
  e034d0:	3a45883a 	add	r2,r7,r9
  e034d4:	11cd803a 	cmpltu	r6,r2,r7
  e034d8:	320d883a 	add	r6,r6,r8
  e034dc:	100f883a 	mov	r7,r2
  e034e0:	3011883a 	mov	r8,r6
  e034e4:	0007883a 	mov	r3,zero
  e034e8:	00840034 	movhi	r2,4096
  e034ec:	10bfffc4 	addi	r2,r2,-1
  e034f0:	123fe52e 	bgeu	r2,r8,e03488 <__pack_d+0x258>
  e034f4:	00c00044 	movi	r3,1
  e034f8:	003fe306 	br	e03488 <__pack_d+0x258>
  e034fc:	0009883a 	mov	r4,zero
  e03500:	0013883a 	mov	r9,zero
  e03504:	000b883a 	mov	r5,zero
  e03508:	003fe406 	br	e0349c <__pack_d+0x26c>
  e0350c:	4a47883a 	add	r3,r9,r9
  e03510:	008007c4 	movi	r2,31
  e03514:	1105c83a 	sub	r2,r2,r4
  e03518:	1886983a 	sll	r3,r3,r2
  e0351c:	4118d83a 	srl	r12,r8,r4
  e03520:	491ad83a 	srl	r13,r9,r4
  e03524:	1b18b03a 	or	r12,r3,r12
  e03528:	003fb506 	br	e03400 <__pack_d+0x1d0>
  e0352c:	2806d07a 	srli	r3,r5,1
  e03530:	008007c4 	movi	r2,31
  e03534:	1105c83a 	sub	r2,r2,r4
  e03538:	1896d83a 	srl	r11,r3,r2
  e0353c:	2914983a 	sll	r10,r5,r4
  e03540:	003fb506 	br	e03418 <__pack_d+0x1e8>

00e03544 <__unpack_d>:
  e03544:	20c00117 	ldw	r3,4(r4)
  e03548:	22400017 	ldw	r9,0(r4)
  e0354c:	00800434 	movhi	r2,16
  e03550:	10bfffc4 	addi	r2,r2,-1
  e03554:	1808d53a 	srli	r4,r3,20
  e03558:	180cd7fa 	srli	r6,r3,31
  e0355c:	1894703a 	and	r10,r3,r2
  e03560:	2201ffcc 	andi	r8,r4,2047
  e03564:	281b883a 	mov	r13,r5
  e03568:	4817883a 	mov	r11,r9
  e0356c:	29800115 	stw	r6,4(r5)
  e03570:	5019883a 	mov	r12,r10
  e03574:	40001e1e 	bne	r8,zero,e035f0 <__unpack_d+0xac>
  e03578:	4a84b03a 	or	r2,r9,r10
  e0357c:	10001926 	beq	r2,zero,e035e4 <__unpack_d+0xa0>
  e03580:	4804d63a 	srli	r2,r9,24
  e03584:	500c923a 	slli	r6,r10,8
  e03588:	013f0084 	movi	r4,-1022
  e0358c:	00c40034 	movhi	r3,4096
  e03590:	18ffffc4 	addi	r3,r3,-1
  e03594:	118cb03a 	or	r6,r2,r6
  e03598:	008000c4 	movi	r2,3
  e0359c:	480a923a 	slli	r5,r9,8
  e035a0:	68800015 	stw	r2,0(r13)
  e035a4:	69000215 	stw	r4,8(r13)
  e035a8:	19800b36 	bltu	r3,r6,e035d8 <__unpack_d+0x94>
  e035ac:	200f883a 	mov	r7,r4
  e035b0:	1811883a 	mov	r8,r3
  e035b4:	2945883a 	add	r2,r5,r5
  e035b8:	1149803a 	cmpltu	r4,r2,r5
  e035bc:	3187883a 	add	r3,r6,r6
  e035c0:	20c9883a 	add	r4,r4,r3
  e035c4:	100b883a 	mov	r5,r2
  e035c8:	200d883a 	mov	r6,r4
  e035cc:	39ffffc4 	addi	r7,r7,-1
  e035d0:	413ff82e 	bgeu	r8,r4,e035b4 <__unpack_d+0x70>
  e035d4:	69c00215 	stw	r7,8(r13)
  e035d8:	69800415 	stw	r6,16(r13)
  e035dc:	69400315 	stw	r5,12(r13)
  e035e0:	f800283a 	ret
  e035e4:	00800084 	movi	r2,2
  e035e8:	28800015 	stw	r2,0(r5)
  e035ec:	f800283a 	ret
  e035f0:	0081ffc4 	movi	r2,2047
  e035f4:	40800f26 	beq	r8,r2,e03634 <__unpack_d+0xf0>
  e035f8:	480cd63a 	srli	r6,r9,24
  e035fc:	5006923a 	slli	r3,r10,8
  e03600:	4804923a 	slli	r2,r9,8
  e03604:	0009883a 	mov	r4,zero
  e03608:	30c6b03a 	or	r3,r6,r3
  e0360c:	01440034 	movhi	r5,4096
  e03610:	110cb03a 	or	r6,r2,r4
  e03614:	423f0044 	addi	r8,r8,-1023
  e03618:	194eb03a 	or	r7,r3,r5
  e0361c:	008000c4 	movi	r2,3
  e03620:	69c00415 	stw	r7,16(r13)
  e03624:	6a000215 	stw	r8,8(r13)
  e03628:	68800015 	stw	r2,0(r13)
  e0362c:	69800315 	stw	r6,12(r13)
  e03630:	f800283a 	ret
  e03634:	4a84b03a 	or	r2,r9,r10
  e03638:	1000031e 	bne	r2,zero,e03648 <__unpack_d+0x104>
  e0363c:	00800104 	movi	r2,4
  e03640:	28800015 	stw	r2,0(r5)
  e03644:	f800283a 	ret
  e03648:	0009883a 	mov	r4,zero
  e0364c:	01400234 	movhi	r5,8
  e03650:	4904703a 	and	r2,r9,r4
  e03654:	5146703a 	and	r3,r10,r5
  e03658:	10c4b03a 	or	r2,r2,r3
  e0365c:	10000526 	beq	r2,zero,e03674 <__unpack_d+0x130>
  e03660:	00800044 	movi	r2,1
  e03664:	68800015 	stw	r2,0(r13)
  e03668:	6b000415 	stw	r12,16(r13)
  e0366c:	6ac00315 	stw	r11,12(r13)
  e03670:	f800283a 	ret
  e03674:	68000015 	stw	zero,0(r13)
  e03678:	003ffb06 	br	e03668 <__unpack_d+0x124>

00e0367c <__fpcmp_parts_d>:
  e0367c:	21800017 	ldw	r6,0(r4)
  e03680:	00c00044 	movi	r3,1
  e03684:	19800a2e 	bgeu	r3,r6,e036b0 <__fpcmp_parts_d+0x34>
  e03688:	28800017 	ldw	r2,0(r5)
  e0368c:	1880082e 	bgeu	r3,r2,e036b0 <__fpcmp_parts_d+0x34>
  e03690:	00c00104 	movi	r3,4
  e03694:	30c02626 	beq	r6,r3,e03730 <__fpcmp_parts_d+0xb4>
  e03698:	10c02226 	beq	r2,r3,e03724 <__fpcmp_parts_d+0xa8>
  e0369c:	00c00084 	movi	r3,2
  e036a0:	30c00526 	beq	r6,r3,e036b8 <__fpcmp_parts_d+0x3c>
  e036a4:	10c0071e 	bne	r2,r3,e036c4 <__fpcmp_parts_d+0x48>
  e036a8:	20800117 	ldw	r2,4(r4)
  e036ac:	1000091e 	bne	r2,zero,e036d4 <__fpcmp_parts_d+0x58>
  e036b0:	00800044 	movi	r2,1
  e036b4:	f800283a 	ret
  e036b8:	10c01a1e 	bne	r2,r3,e03724 <__fpcmp_parts_d+0xa8>
  e036bc:	0005883a 	mov	r2,zero
  e036c0:	f800283a 	ret
  e036c4:	22000117 	ldw	r8,4(r4)
  e036c8:	28800117 	ldw	r2,4(r5)
  e036cc:	40800326 	beq	r8,r2,e036dc <__fpcmp_parts_d+0x60>
  e036d0:	403ff726 	beq	r8,zero,e036b0 <__fpcmp_parts_d+0x34>
  e036d4:	00bfffc4 	movi	r2,-1
  e036d8:	f800283a 	ret
  e036dc:	20c00217 	ldw	r3,8(r4)
  e036e0:	28800217 	ldw	r2,8(r5)
  e036e4:	10fffa16 	blt	r2,r3,e036d0 <__fpcmp_parts_d+0x54>
  e036e8:	18800916 	blt	r3,r2,e03710 <__fpcmp_parts_d+0x94>
  e036ec:	21c00417 	ldw	r7,16(r4)
  e036f0:	28c00417 	ldw	r3,16(r5)
  e036f4:	21800317 	ldw	r6,12(r4)
  e036f8:	28800317 	ldw	r2,12(r5)
  e036fc:	19fff436 	bltu	r3,r7,e036d0 <__fpcmp_parts_d+0x54>
  e03700:	38c00526 	beq	r7,r3,e03718 <__fpcmp_parts_d+0x9c>
  e03704:	38c00236 	bltu	r7,r3,e03710 <__fpcmp_parts_d+0x94>
  e03708:	19ffec1e 	bne	r3,r7,e036bc <__fpcmp_parts_d+0x40>
  e0370c:	30bfeb2e 	bgeu	r6,r2,e036bc <__fpcmp_parts_d+0x40>
  e03710:	403fe71e 	bne	r8,zero,e036b0 <__fpcmp_parts_d+0x34>
  e03714:	003fef06 	br	e036d4 <__fpcmp_parts_d+0x58>
  e03718:	11bffa2e 	bgeu	r2,r6,e03704 <__fpcmp_parts_d+0x88>
  e0371c:	403fe426 	beq	r8,zero,e036b0 <__fpcmp_parts_d+0x34>
  e03720:	003fec06 	br	e036d4 <__fpcmp_parts_d+0x58>
  e03724:	28800117 	ldw	r2,4(r5)
  e03728:	103fe11e 	bne	r2,zero,e036b0 <__fpcmp_parts_d+0x34>
  e0372c:	003fe906 	br	e036d4 <__fpcmp_parts_d+0x58>
  e03730:	11bfdd1e 	bne	r2,r6,e036a8 <__fpcmp_parts_d+0x2c>
  e03734:	28c00117 	ldw	r3,4(r5)
  e03738:	20800117 	ldw	r2,4(r4)
  e0373c:	1885c83a 	sub	r2,r3,r2
  e03740:	f800283a 	ret

00e03744 <__errno>:
  e03744:	00c03874 	movhi	r3,225
  e03748:	18cb4704 	addi	r3,r3,11548
  e0374c:	18800017 	ldw	r2,0(r3)
  e03750:	f800283a 	ret

00e03754 <printf>:
  e03754:	defffb04 	addi	sp,sp,-20
  e03758:	dfc00115 	stw	ra,4(sp)
  e0375c:	d9400215 	stw	r5,8(sp)
  e03760:	d9800315 	stw	r6,12(sp)
  e03764:	d9c00415 	stw	r7,16(sp)
  e03768:	00803874 	movhi	r2,225
  e0376c:	108b4704 	addi	r2,r2,11548
  e03770:	10c00017 	ldw	r3,0(r2)
  e03774:	200b883a 	mov	r5,r4
  e03778:	d8800204 	addi	r2,sp,8
  e0377c:	19000217 	ldw	r4,8(r3)
  e03780:	100d883a 	mov	r6,r2
  e03784:	d8800015 	stw	r2,0(sp)
  e03788:	0e058cc0 	call	e058cc <__vfprintf_internal>
  e0378c:	dfc00117 	ldw	ra,4(sp)
  e03790:	dec00504 	addi	sp,sp,20
  e03794:	f800283a 	ret

00e03798 <_printf_r>:
  e03798:	defffc04 	addi	sp,sp,-16
  e0379c:	dfc00115 	stw	ra,4(sp)
  e037a0:	d9800215 	stw	r6,8(sp)
  e037a4:	d9c00315 	stw	r7,12(sp)
  e037a8:	280d883a 	mov	r6,r5
  e037ac:	21400217 	ldw	r5,8(r4)
  e037b0:	d8c00204 	addi	r3,sp,8
  e037b4:	180f883a 	mov	r7,r3
  e037b8:	d8c00015 	stw	r3,0(sp)
  e037bc:	0e03a200 	call	e03a20 <___vfprintf_internal_r>
  e037c0:	dfc00117 	ldw	ra,4(sp)
  e037c4:	dec00404 	addi	sp,sp,16
  e037c8:	f800283a 	ret

00e037cc <_puts_r>:
  e037cc:	defff604 	addi	sp,sp,-40
  e037d0:	dc400715 	stw	r17,28(sp)
  e037d4:	2023883a 	mov	r17,r4
  e037d8:	2809883a 	mov	r4,r5
  e037dc:	dfc00915 	stw	ra,36(sp)
  e037e0:	dcc00815 	stw	r19,32(sp)
  e037e4:	2827883a 	mov	r19,r5
  e037e8:	0e039540 	call	e03954 <strlen>
  e037ec:	89400217 	ldw	r5,8(r17)
  e037f0:	00c03874 	movhi	r3,225
  e037f4:	18c39504 	addi	r3,r3,3668
  e037f8:	01c00044 	movi	r7,1
  e037fc:	12000044 	addi	r8,r2,1
  e03800:	d8c00515 	stw	r3,20(sp)
  e03804:	d9c00615 	stw	r7,24(sp)
  e03808:	d8c00304 	addi	r3,sp,12
  e0380c:	01c00084 	movi	r7,2
  e03810:	8809883a 	mov	r4,r17
  e03814:	d80d883a 	mov	r6,sp
  e03818:	d8c00015 	stw	r3,0(sp)
  e0381c:	dcc00315 	stw	r19,12(sp)
  e03820:	da000215 	stw	r8,8(sp)
  e03824:	d9c00115 	stw	r7,4(sp)
  e03828:	d8800415 	stw	r2,16(sp)
  e0382c:	0e07b280 	call	e07b28 <__sfvwrite_r>
  e03830:	00ffffc4 	movi	r3,-1
  e03834:	10000626 	beq	r2,zero,e03850 <_puts_r+0x84>
  e03838:	1805883a 	mov	r2,r3
  e0383c:	dfc00917 	ldw	ra,36(sp)
  e03840:	dcc00817 	ldw	r19,32(sp)
  e03844:	dc400717 	ldw	r17,28(sp)
  e03848:	dec00a04 	addi	sp,sp,40
  e0384c:	f800283a 	ret
  e03850:	00c00284 	movi	r3,10
  e03854:	1805883a 	mov	r2,r3
  e03858:	dfc00917 	ldw	ra,36(sp)
  e0385c:	dcc00817 	ldw	r19,32(sp)
  e03860:	dc400717 	ldw	r17,28(sp)
  e03864:	dec00a04 	addi	sp,sp,40
  e03868:	f800283a 	ret

00e0386c <puts>:
  e0386c:	00803874 	movhi	r2,225
  e03870:	108b4704 	addi	r2,r2,11548
  e03874:	200b883a 	mov	r5,r4
  e03878:	11000017 	ldw	r4,0(r2)
  e0387c:	0e037cc1 	jmpi	e037cc <_puts_r>

00e03880 <sprintf>:
  e03880:	deffe504 	addi	sp,sp,-108
  e03884:	2013883a 	mov	r9,r4
  e03888:	dfc01815 	stw	ra,96(sp)
  e0388c:	d9801915 	stw	r6,100(sp)
  e03890:	d9c01a15 	stw	r7,104(sp)
  e03894:	d8801904 	addi	r2,sp,100
  e03898:	d8800015 	stw	r2,0(sp)
  e0389c:	00803874 	movhi	r2,225
  e038a0:	108b4704 	addi	r2,r2,11548
  e038a4:	11000017 	ldw	r4,0(r2)
  e038a8:	d9c00017 	ldw	r7,0(sp)
  e038ac:	00808204 	movi	r2,520
  e038b0:	00e00034 	movhi	r3,32768
  e038b4:	18ffffc4 	addi	r3,r3,-1
  e038b8:	280d883a 	mov	r6,r5
  e038bc:	d880040d 	sth	r2,16(sp)
  e038c0:	d9400104 	addi	r5,sp,4
  e038c4:	00bfffc4 	movi	r2,-1
  e038c8:	d8c00615 	stw	r3,24(sp)
  e038cc:	d8c00315 	stw	r3,12(sp)
  e038d0:	da400515 	stw	r9,20(sp)
  e038d4:	d880048d 	sth	r2,18(sp)
  e038d8:	da400115 	stw	r9,4(sp)
  e038dc:	0e03a200 	call	e03a20 <___vfprintf_internal_r>
  e038e0:	d8c00117 	ldw	r3,4(sp)
  e038e4:	18000005 	stb	zero,0(r3)
  e038e8:	dfc01817 	ldw	ra,96(sp)
  e038ec:	dec01b04 	addi	sp,sp,108
  e038f0:	f800283a 	ret

00e038f4 <_sprintf_r>:
  e038f4:	deffe604 	addi	sp,sp,-104
  e038f8:	2813883a 	mov	r9,r5
  e038fc:	dfc01815 	stw	ra,96(sp)
  e03900:	d9c01915 	stw	r7,100(sp)
  e03904:	d8801904 	addi	r2,sp,100
  e03908:	d8800015 	stw	r2,0(sp)
  e0390c:	100f883a 	mov	r7,r2
  e03910:	00808204 	movi	r2,520
  e03914:	00e00034 	movhi	r3,32768
  e03918:	18ffffc4 	addi	r3,r3,-1
  e0391c:	d880040d 	sth	r2,16(sp)
  e03920:	d9400104 	addi	r5,sp,4
  e03924:	00bfffc4 	movi	r2,-1
  e03928:	d8c00615 	stw	r3,24(sp)
  e0392c:	d8c00315 	stw	r3,12(sp)
  e03930:	da400515 	stw	r9,20(sp)
  e03934:	d880048d 	sth	r2,18(sp)
  e03938:	da400115 	stw	r9,4(sp)
  e0393c:	0e03a200 	call	e03a20 <___vfprintf_internal_r>
  e03940:	d8c00117 	ldw	r3,4(sp)
  e03944:	18000005 	stb	zero,0(r3)
  e03948:	dfc01817 	ldw	ra,96(sp)
  e0394c:	dec01a04 	addi	sp,sp,104
  e03950:	f800283a 	ret

00e03954 <strlen>:
  e03954:	208000cc 	andi	r2,r4,3
  e03958:	2011883a 	mov	r8,r4
  e0395c:	1000161e 	bne	r2,zero,e039b8 <strlen+0x64>
  e03960:	20c00017 	ldw	r3,0(r4)
  e03964:	017fbff4 	movhi	r5,65279
  e03968:	297fbfc4 	addi	r5,r5,-257
  e0396c:	01e02074 	movhi	r7,32897
  e03970:	39e02004 	addi	r7,r7,-32640
  e03974:	1945883a 	add	r2,r3,r5
  e03978:	11c4703a 	and	r2,r2,r7
  e0397c:	00c6303a 	nor	r3,zero,r3
  e03980:	1886703a 	and	r3,r3,r2
  e03984:	18000c1e 	bne	r3,zero,e039b8 <strlen+0x64>
  e03988:	280d883a 	mov	r6,r5
  e0398c:	380b883a 	mov	r5,r7
  e03990:	21000104 	addi	r4,r4,4
  e03994:	20800017 	ldw	r2,0(r4)
  e03998:	1187883a 	add	r3,r2,r6
  e0399c:	1946703a 	and	r3,r3,r5
  e039a0:	0084303a 	nor	r2,zero,r2
  e039a4:	10c4703a 	and	r2,r2,r3
  e039a8:	103ff926 	beq	r2,zero,e03990 <strlen+0x3c>
  e039ac:	20800007 	ldb	r2,0(r4)
  e039b0:	10000326 	beq	r2,zero,e039c0 <strlen+0x6c>
  e039b4:	21000044 	addi	r4,r4,1
  e039b8:	20800007 	ldb	r2,0(r4)
  e039bc:	103ffd1e 	bne	r2,zero,e039b4 <strlen+0x60>
  e039c0:	2205c83a 	sub	r2,r4,r8
  e039c4:	f800283a 	ret

00e039c8 <__sprint_r>:
  e039c8:	30800217 	ldw	r2,8(r6)
  e039cc:	defffe04 	addi	sp,sp,-8
  e039d0:	dc000015 	stw	r16,0(sp)
  e039d4:	dfc00115 	stw	ra,4(sp)
  e039d8:	3021883a 	mov	r16,r6
  e039dc:	0007883a 	mov	r3,zero
  e039e0:	1000061e 	bne	r2,zero,e039fc <__sprint_r+0x34>
  e039e4:	1805883a 	mov	r2,r3
  e039e8:	30000115 	stw	zero,4(r6)
  e039ec:	dfc00117 	ldw	ra,4(sp)
  e039f0:	dc000017 	ldw	r16,0(sp)
  e039f4:	dec00204 	addi	sp,sp,8
  e039f8:	f800283a 	ret
  e039fc:	0e07b280 	call	e07b28 <__sfvwrite_r>
  e03a00:	1007883a 	mov	r3,r2
  e03a04:	1805883a 	mov	r2,r3
  e03a08:	80000115 	stw	zero,4(r16)
  e03a0c:	80000215 	stw	zero,8(r16)
  e03a10:	dfc00117 	ldw	ra,4(sp)
  e03a14:	dc000017 	ldw	r16,0(sp)
  e03a18:	dec00204 	addi	sp,sp,8
  e03a1c:	f800283a 	ret

00e03a20 <___vfprintf_internal_r>:
  e03a20:	defea404 	addi	sp,sp,-1392
  e03a24:	dd815815 	stw	r22,1376(sp)
  e03a28:	dc015215 	stw	r16,1352(sp)
  e03a2c:	d9c15115 	stw	r7,1348(sp)
  e03a30:	dfc15b15 	stw	ra,1388(sp)
  e03a34:	df015a15 	stw	fp,1384(sp)
  e03a38:	ddc15915 	stw	r23,1380(sp)
  e03a3c:	dd415715 	stw	r21,1372(sp)
  e03a40:	dd015615 	stw	r20,1368(sp)
  e03a44:	dcc15515 	stw	r19,1364(sp)
  e03a48:	dc815415 	stw	r18,1360(sp)
  e03a4c:	dc415315 	stw	r17,1356(sp)
  e03a50:	282d883a 	mov	r22,r5
  e03a54:	3021883a 	mov	r16,r6
  e03a58:	d9014f15 	stw	r4,1340(sp)
  e03a5c:	0e0814c0 	call	e0814c <_localeconv_r>
  e03a60:	10800017 	ldw	r2,0(r2)
  e03a64:	d9c15117 	ldw	r7,1348(sp)
  e03a68:	d8814915 	stw	r2,1316(sp)
  e03a6c:	d8814f17 	ldw	r2,1340(sp)
  e03a70:	10000226 	beq	r2,zero,e03a7c <___vfprintf_internal_r+0x5c>
  e03a74:	10800e17 	ldw	r2,56(r2)
  e03a78:	10020d26 	beq	r2,zero,e042b0 <___vfprintf_internal_r+0x890>
  e03a7c:	b080030b 	ldhu	r2,12(r22)
  e03a80:	1080020c 	andi	r2,r2,8
  e03a84:	10020e26 	beq	r2,zero,e042c0 <___vfprintf_internal_r+0x8a0>
  e03a88:	b0800417 	ldw	r2,16(r22)
  e03a8c:	10020c26 	beq	r2,zero,e042c0 <___vfprintf_internal_r+0x8a0>
  e03a90:	b200030b 	ldhu	r8,12(r22)
  e03a94:	00800284 	movi	r2,10
  e03a98:	40c0068c 	andi	r3,r8,26
  e03a9c:	18802f1e 	bne	r3,r2,e03b5c <___vfprintf_internal_r+0x13c>
  e03aa0:	b080038f 	ldh	r2,14(r22)
  e03aa4:	10002d16 	blt	r2,zero,e03b5c <___vfprintf_internal_r+0x13c>
  e03aa8:	b240038b 	ldhu	r9,14(r22)
  e03aac:	b2800717 	ldw	r10,28(r22)
  e03ab0:	b2c00917 	ldw	r11,36(r22)
  e03ab4:	d9014f17 	ldw	r4,1340(sp)
  e03ab8:	dc402904 	addi	r17,sp,164
  e03abc:	d8804004 	addi	r2,sp,256
  e03ac0:	00c10004 	movi	r3,1024
  e03ac4:	423fff4c 	andi	r8,r8,65533
  e03ac8:	800d883a 	mov	r6,r16
  e03acc:	880b883a 	mov	r5,r17
  e03ad0:	da002c0d 	sth	r8,176(sp)
  e03ad4:	da402c8d 	sth	r9,178(sp)
  e03ad8:	da803015 	stw	r10,192(sp)
  e03adc:	dac03215 	stw	r11,200(sp)
  e03ae0:	d8802d15 	stw	r2,180(sp)
  e03ae4:	d8c02e15 	stw	r3,184(sp)
  e03ae8:	d8802915 	stw	r2,164(sp)
  e03aec:	d8c02b15 	stw	r3,172(sp)
  e03af0:	d8002f15 	stw	zero,188(sp)
  e03af4:	0e03a200 	call	e03a20 <___vfprintf_internal_r>
  e03af8:	d8814b15 	stw	r2,1324(sp)
  e03afc:	10000416 	blt	r2,zero,e03b10 <___vfprintf_internal_r+0xf0>
  e03b00:	d9014f17 	ldw	r4,1340(sp)
  e03b04:	880b883a 	mov	r5,r17
  e03b08:	0e071f80 	call	e071f8 <_fflush_r>
  e03b0c:	1002321e 	bne	r2,zero,e043d8 <___vfprintf_internal_r+0x9b8>
  e03b10:	d8802c0b 	ldhu	r2,176(sp)
  e03b14:	1080100c 	andi	r2,r2,64
  e03b18:	10000326 	beq	r2,zero,e03b28 <___vfprintf_internal_r+0x108>
  e03b1c:	b080030b 	ldhu	r2,12(r22)
  e03b20:	10801014 	ori	r2,r2,64
  e03b24:	b080030d 	sth	r2,12(r22)
  e03b28:	d8814b17 	ldw	r2,1324(sp)
  e03b2c:	dfc15b17 	ldw	ra,1388(sp)
  e03b30:	df015a17 	ldw	fp,1384(sp)
  e03b34:	ddc15917 	ldw	r23,1380(sp)
  e03b38:	dd815817 	ldw	r22,1376(sp)
  e03b3c:	dd415717 	ldw	r21,1372(sp)
  e03b40:	dd015617 	ldw	r20,1368(sp)
  e03b44:	dcc15517 	ldw	r19,1364(sp)
  e03b48:	dc815417 	ldw	r18,1360(sp)
  e03b4c:	dc415317 	ldw	r17,1356(sp)
  e03b50:	dc015217 	ldw	r16,1352(sp)
  e03b54:	dec15c04 	addi	sp,sp,1392
  e03b58:	f800283a 	ret
  e03b5c:	0005883a 	mov	r2,zero
  e03b60:	0007883a 	mov	r3,zero
  e03b64:	dd401904 	addi	r21,sp,100
  e03b68:	d8814215 	stw	r2,1288(sp)
  e03b6c:	802f883a 	mov	r23,r16
  e03b70:	d8c14315 	stw	r3,1292(sp)
  e03b74:	d8014b15 	stw	zero,1324(sp)
  e03b78:	d8014815 	stw	zero,1312(sp)
  e03b7c:	d8014415 	stw	zero,1296(sp)
  e03b80:	d8014715 	stw	zero,1308(sp)
  e03b84:	dd400c15 	stw	r21,48(sp)
  e03b88:	d8000e15 	stw	zero,56(sp)
  e03b8c:	d8000d15 	stw	zero,52(sp)
  e03b90:	b8800007 	ldb	r2,0(r23)
  e03b94:	10001926 	beq	r2,zero,e03bfc <___vfprintf_internal_r+0x1dc>
  e03b98:	00c00944 	movi	r3,37
  e03b9c:	10c01726 	beq	r2,r3,e03bfc <___vfprintf_internal_r+0x1dc>
  e03ba0:	b821883a 	mov	r16,r23
  e03ba4:	00000106 	br	e03bac <___vfprintf_internal_r+0x18c>
  e03ba8:	10c00326 	beq	r2,r3,e03bb8 <___vfprintf_internal_r+0x198>
  e03bac:	84000044 	addi	r16,r16,1
  e03bb0:	80800007 	ldb	r2,0(r16)
  e03bb4:	103ffc1e 	bne	r2,zero,e03ba8 <___vfprintf_internal_r+0x188>
  e03bb8:	85e7c83a 	sub	r19,r16,r23
  e03bbc:	98000e26 	beq	r19,zero,e03bf8 <___vfprintf_internal_r+0x1d8>
  e03bc0:	dc800e17 	ldw	r18,56(sp)
  e03bc4:	dc400d17 	ldw	r17,52(sp)
  e03bc8:	008001c4 	movi	r2,7
  e03bcc:	94e5883a 	add	r18,r18,r19
  e03bd0:	8c400044 	addi	r17,r17,1
  e03bd4:	adc00015 	stw	r23,0(r21)
  e03bd8:	dc800e15 	stw	r18,56(sp)
  e03bdc:	acc00115 	stw	r19,4(r21)
  e03be0:	dc400d15 	stw	r17,52(sp)
  e03be4:	14428b16 	blt	r2,r17,e04614 <___vfprintf_internal_r+0xbf4>
  e03be8:	ad400204 	addi	r21,r21,8
  e03bec:	d9014b17 	ldw	r4,1324(sp)
  e03bf0:	24c9883a 	add	r4,r4,r19
  e03bf4:	d9014b15 	stw	r4,1324(sp)
  e03bf8:	802f883a 	mov	r23,r16
  e03bfc:	b8800007 	ldb	r2,0(r23)
  e03c00:	10013c26 	beq	r2,zero,e040f4 <___vfprintf_internal_r+0x6d4>
  e03c04:	bdc00044 	addi	r23,r23,1
  e03c08:	d8000405 	stb	zero,16(sp)
  e03c0c:	b8c00007 	ldb	r3,0(r23)
  e03c10:	04ffffc4 	movi	r19,-1
  e03c14:	d8014c15 	stw	zero,1328(sp)
  e03c18:	d8014a15 	stw	zero,1320(sp)
  e03c1c:	d8c14d15 	stw	r3,1332(sp)
  e03c20:	bdc00044 	addi	r23,r23,1
  e03c24:	d9414d17 	ldw	r5,1332(sp)
  e03c28:	00801604 	movi	r2,88
  e03c2c:	28fff804 	addi	r3,r5,-32
  e03c30:	10c06036 	bltu	r2,r3,e03db4 <___vfprintf_internal_r+0x394>
  e03c34:	18c5883a 	add	r2,r3,r3
  e03c38:	1085883a 	add	r2,r2,r2
  e03c3c:	00c03834 	movhi	r3,224
  e03c40:	18cf1404 	addi	r3,r3,15440
  e03c44:	10c5883a 	add	r2,r2,r3
  e03c48:	11000017 	ldw	r4,0(r2)
  e03c4c:	2000683a 	jmp	r4
  e03c50:	00e04bc4 	movi	r3,-32465
  e03c54:	00e03db4 	movhi	r3,33014
  e03c58:	00e03db4 	movhi	r3,33014
  e03c5c:	00e04bb0 	cmpltui	r3,zero,33070
  e03c60:	00e03db4 	movhi	r3,33014
  e03c64:	00e03db4 	movhi	r3,33014
  e03c68:	00e03db4 	movhi	r3,33014
  e03c6c:	00e03db4 	movhi	r3,33014
  e03c70:	00e03db4 	movhi	r3,33014
  e03c74:	00e03db4 	movhi	r3,33014
  e03c78:	00e04990 	cmplti	r3,zero,-32474
  e03c7c:	00e04ba0 	cmpeqi	r3,zero,-32466
  e03c80:	00e03db4 	movhi	r3,33014
  e03c84:	00e049a8 	cmpgeui	r3,zero,33062
  e03c88:	00e04c3c 	xorhi	r3,zero,33072
  e03c8c:	00e03db4 	movhi	r3,33014
  e03c90:	00e04c28 	cmpgeui	r3,zero,33072
  e03c94:	00e04bf0 	cmpltui	r3,zero,33071
  e03c98:	00e04bf0 	cmpltui	r3,zero,33071
  e03c9c:	00e04bf0 	cmpltui	r3,zero,33071
  e03ca0:	00e04bf0 	cmpltui	r3,zero,33071
  e03ca4:	00e04bf0 	cmpltui	r3,zero,33071
  e03ca8:	00e04bf0 	cmpltui	r3,zero,33071
  e03cac:	00e04bf0 	cmpltui	r3,zero,33071
  e03cb0:	00e04bf0 	cmpltui	r3,zero,33071
  e03cb4:	00e04bf0 	cmpltui	r3,zero,33071
  e03cb8:	00e03db4 	movhi	r3,33014
  e03cbc:	00e03db4 	movhi	r3,33014
  e03cc0:	00e03db4 	movhi	r3,33014
  e03cc4:	00e03db4 	movhi	r3,33014
  e03cc8:	00e03db4 	movhi	r3,33014
  e03ccc:	00e03db4 	movhi	r3,33014
  e03cd0:	00e03db4 	movhi	r3,33014
  e03cd4:	00e03db4 	movhi	r3,33014
  e03cd8:	00e03db4 	movhi	r3,33014
  e03cdc:	00e03db4 	movhi	r3,33014
  e03ce0:	00e0440c 	andi	r3,zero,33040
  e03ce4:	00e04a78 	rdprs	r3,zero,-32471
  e03ce8:	00e03db4 	movhi	r3,33014
  e03cec:	00e04a78 	rdprs	r3,zero,-32471
  e03cf0:	00e03db4 	movhi	r3,33014
  e03cf4:	00e03db4 	movhi	r3,33014
  e03cf8:	00e03db4 	movhi	r3,33014
  e03cfc:	00e03db4 	movhi	r3,33014
  e03d00:	00e04bdc 	xori	r3,zero,33071
  e03d04:	00e03db4 	movhi	r3,33014
  e03d08:	00e03db4 	movhi	r3,33014
  e03d0c:	00e044c0 	call	e044c <__alt_mem_onchip_memory2_3+0xd944c>
  e03d10:	00e03db4 	movhi	r3,33014
  e03d14:	00e03db4 	movhi	r3,33014
  e03d18:	00e03db4 	movhi	r3,33014
  e03d1c:	00e03db4 	movhi	r3,33014
  e03d20:	00e03db4 	movhi	r3,33014
  e03d24:	00e0450c 	andi	r3,zero,33044
  e03d28:	00e03db4 	movhi	r3,33014
  e03d2c:	00e03db4 	movhi	r3,33014
  e03d30:	00e04b2c 	andhi	r3,zero,33068
  e03d34:	00e03db4 	movhi	r3,33014
  e03d38:	00e03db4 	movhi	r3,33014
  e03d3c:	00e03db4 	movhi	r3,33014
  e03d40:	00e03db4 	movhi	r3,33014
  e03d44:	00e03db4 	movhi	r3,33014
  e03d48:	00e03db4 	movhi	r3,33014
  e03d4c:	00e03db4 	movhi	r3,33014
  e03d50:	00e03db4 	movhi	r3,33014
  e03d54:	00e03db4 	movhi	r3,33014
  e03d58:	00e03db4 	movhi	r3,33014
  e03d5c:	00e04b00 	call	e04b0 <__alt_mem_onchip_memory2_3+0xd94b0>
  e03d60:	00e04418 	cmpnei	r3,zero,-32496
  e03d64:	00e04a78 	rdprs	r3,zero,-32471
  e03d68:	00e04a78 	rdprs	r3,zero,-32471
  e03d6c:	00e04a78 	rdprs	r3,zero,-32471
  e03d70:	00e04a64 	muli	r3,zero,-32471
  e03d74:	00e04418 	cmpnei	r3,zero,-32496
  e03d78:	00e03db4 	movhi	r3,33014
  e03d7c:	00e03db4 	movhi	r3,33014
  e03d80:	00e049ec 	andhi	r3,zero,33063
  e03d84:	00e03db4 	movhi	r3,33014
  e03d88:	00e049bc 	xorhi	r3,zero,33062
  e03d8c:	00e044cc 	andi	r3,zero,33043
  e03d90:	00e04a1c 	xori	r3,zero,33064
  e03d94:	00e04a08 	cmpgei	r3,zero,-32472
  e03d98:	00e03db4 	movhi	r3,33014
  e03d9c:	00e04c98 	cmpnei	r3,zero,-32462
  e03da0:	00e03db4 	movhi	r3,33014
  e03da4:	00e04518 	cmpnei	r3,zero,-32492
  e03da8:	00e03db4 	movhi	r3,33014
  e03dac:	00e03db4 	movhi	r3,33014
  e03db0:	00e04b90 	cmplti	r3,zero,-32466
  e03db4:	d9014d17 	ldw	r4,1332(sp)
  e03db8:	2000ce26 	beq	r4,zero,e040f4 <___vfprintf_internal_r+0x6d4>
  e03dbc:	01400044 	movi	r5,1
  e03dc0:	d9800f04 	addi	r6,sp,60
  e03dc4:	d9c14015 	stw	r7,1280(sp)
  e03dc8:	d9414515 	stw	r5,1300(sp)
  e03dcc:	d9814115 	stw	r6,1284(sp)
  e03dd0:	280f883a 	mov	r7,r5
  e03dd4:	d9000f05 	stb	r4,60(sp)
  e03dd8:	d8000405 	stb	zero,16(sp)
  e03ddc:	d8014615 	stw	zero,1304(sp)
  e03de0:	d8c14c17 	ldw	r3,1328(sp)
  e03de4:	1880008c 	andi	r2,r3,2
  e03de8:	1005003a 	cmpeq	r2,r2,zero
  e03dec:	d8815015 	stw	r2,1344(sp)
  e03df0:	1000031e 	bne	r2,zero,e03e00 <___vfprintf_internal_r+0x3e0>
  e03df4:	d9014517 	ldw	r4,1300(sp)
  e03df8:	21000084 	addi	r4,r4,2
  e03dfc:	d9014515 	stw	r4,1300(sp)
  e03e00:	d9414c17 	ldw	r5,1328(sp)
  e03e04:	2940210c 	andi	r5,r5,132
  e03e08:	d9414e15 	stw	r5,1336(sp)
  e03e0c:	28002d1e 	bne	r5,zero,e03ec4 <___vfprintf_internal_r+0x4a4>
  e03e10:	d9814a17 	ldw	r6,1320(sp)
  e03e14:	d8814517 	ldw	r2,1300(sp)
  e03e18:	30a1c83a 	sub	r16,r6,r2
  e03e1c:	0400290e 	bge	zero,r16,e03ec4 <___vfprintf_internal_r+0x4a4>
  e03e20:	00800404 	movi	r2,16
  e03e24:	1404580e 	bge	r2,r16,e04f88 <___vfprintf_internal_r+0x1568>
  e03e28:	dc800e17 	ldw	r18,56(sp)
  e03e2c:	dc400d17 	ldw	r17,52(sp)
  e03e30:	1027883a 	mov	r19,r2
  e03e34:	07003874 	movhi	fp,225
  e03e38:	e703b084 	addi	fp,fp,3778
  e03e3c:	050001c4 	movi	r20,7
  e03e40:	00000306 	br	e03e50 <___vfprintf_internal_r+0x430>
  e03e44:	843ffc04 	addi	r16,r16,-16
  e03e48:	ad400204 	addi	r21,r21,8
  e03e4c:	9c00130e 	bge	r19,r16,e03e9c <___vfprintf_internal_r+0x47c>
  e03e50:	94800404 	addi	r18,r18,16
  e03e54:	8c400044 	addi	r17,r17,1
  e03e58:	af000015 	stw	fp,0(r21)
  e03e5c:	acc00115 	stw	r19,4(r21)
  e03e60:	dc800e15 	stw	r18,56(sp)
  e03e64:	dc400d15 	stw	r17,52(sp)
  e03e68:	a47ff60e 	bge	r20,r17,e03e44 <___vfprintf_internal_r+0x424>
  e03e6c:	d9014f17 	ldw	r4,1340(sp)
  e03e70:	b00b883a 	mov	r5,r22
  e03e74:	d9800c04 	addi	r6,sp,48
  e03e78:	d9c15115 	stw	r7,1348(sp)
  e03e7c:	0e039c80 	call	e039c8 <__sprint_r>
  e03e80:	d9c15117 	ldw	r7,1348(sp)
  e03e84:	10009e1e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e03e88:	843ffc04 	addi	r16,r16,-16
  e03e8c:	dc800e17 	ldw	r18,56(sp)
  e03e90:	dc400d17 	ldw	r17,52(sp)
  e03e94:	dd401904 	addi	r21,sp,100
  e03e98:	9c3fed16 	blt	r19,r16,e03e50 <___vfprintf_internal_r+0x430>
  e03e9c:	9425883a 	add	r18,r18,r16
  e03ea0:	8c400044 	addi	r17,r17,1
  e03ea4:	008001c4 	movi	r2,7
  e03ea8:	af000015 	stw	fp,0(r21)
  e03eac:	ac000115 	stw	r16,4(r21)
  e03eb0:	dc800e15 	stw	r18,56(sp)
  e03eb4:	dc400d15 	stw	r17,52(sp)
  e03eb8:	1441f516 	blt	r2,r17,e04690 <___vfprintf_internal_r+0xc70>
  e03ebc:	ad400204 	addi	r21,r21,8
  e03ec0:	00000206 	br	e03ecc <___vfprintf_internal_r+0x4ac>
  e03ec4:	dc800e17 	ldw	r18,56(sp)
  e03ec8:	dc400d17 	ldw	r17,52(sp)
  e03ecc:	d8800407 	ldb	r2,16(sp)
  e03ed0:	10000b26 	beq	r2,zero,e03f00 <___vfprintf_internal_r+0x4e0>
  e03ed4:	00800044 	movi	r2,1
  e03ed8:	94800044 	addi	r18,r18,1
  e03edc:	8c400044 	addi	r17,r17,1
  e03ee0:	a8800115 	stw	r2,4(r21)
  e03ee4:	d8c00404 	addi	r3,sp,16
  e03ee8:	008001c4 	movi	r2,7
  e03eec:	a8c00015 	stw	r3,0(r21)
  e03ef0:	dc800e15 	stw	r18,56(sp)
  e03ef4:	dc400d15 	stw	r17,52(sp)
  e03ef8:	1441da16 	blt	r2,r17,e04664 <___vfprintf_internal_r+0xc44>
  e03efc:	ad400204 	addi	r21,r21,8
  e03f00:	d9015017 	ldw	r4,1344(sp)
  e03f04:	20000b1e 	bne	r4,zero,e03f34 <___vfprintf_internal_r+0x514>
  e03f08:	d8800444 	addi	r2,sp,17
  e03f0c:	94800084 	addi	r18,r18,2
  e03f10:	8c400044 	addi	r17,r17,1
  e03f14:	a8800015 	stw	r2,0(r21)
  e03f18:	00c00084 	movi	r3,2
  e03f1c:	008001c4 	movi	r2,7
  e03f20:	a8c00115 	stw	r3,4(r21)
  e03f24:	dc800e15 	stw	r18,56(sp)
  e03f28:	dc400d15 	stw	r17,52(sp)
  e03f2c:	1441c216 	blt	r2,r17,e04638 <___vfprintf_internal_r+0xc18>
  e03f30:	ad400204 	addi	r21,r21,8
  e03f34:	d9414e17 	ldw	r5,1336(sp)
  e03f38:	00802004 	movi	r2,128
  e03f3c:	2880b126 	beq	r5,r2,e04204 <___vfprintf_internal_r+0x7e4>
  e03f40:	d8c14617 	ldw	r3,1304(sp)
  e03f44:	19e1c83a 	sub	r16,r3,r7
  e03f48:	0400260e 	bge	zero,r16,e03fe4 <___vfprintf_internal_r+0x5c4>
  e03f4c:	00800404 	movi	r2,16
  e03f50:	1403c90e 	bge	r2,r16,e04e78 <___vfprintf_internal_r+0x1458>
  e03f54:	1027883a 	mov	r19,r2
  e03f58:	07003874 	movhi	fp,225
  e03f5c:	e703ac84 	addi	fp,fp,3762
  e03f60:	050001c4 	movi	r20,7
  e03f64:	00000306 	br	e03f74 <___vfprintf_internal_r+0x554>
  e03f68:	843ffc04 	addi	r16,r16,-16
  e03f6c:	ad400204 	addi	r21,r21,8
  e03f70:	9c00130e 	bge	r19,r16,e03fc0 <___vfprintf_internal_r+0x5a0>
  e03f74:	94800404 	addi	r18,r18,16
  e03f78:	8c400044 	addi	r17,r17,1
  e03f7c:	af000015 	stw	fp,0(r21)
  e03f80:	acc00115 	stw	r19,4(r21)
  e03f84:	dc800e15 	stw	r18,56(sp)
  e03f88:	dc400d15 	stw	r17,52(sp)
  e03f8c:	a47ff60e 	bge	r20,r17,e03f68 <___vfprintf_internal_r+0x548>
  e03f90:	d9014f17 	ldw	r4,1340(sp)
  e03f94:	b00b883a 	mov	r5,r22
  e03f98:	d9800c04 	addi	r6,sp,48
  e03f9c:	d9c15115 	stw	r7,1348(sp)
  e03fa0:	0e039c80 	call	e039c8 <__sprint_r>
  e03fa4:	d9c15117 	ldw	r7,1348(sp)
  e03fa8:	1000551e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e03fac:	843ffc04 	addi	r16,r16,-16
  e03fb0:	dc800e17 	ldw	r18,56(sp)
  e03fb4:	dc400d17 	ldw	r17,52(sp)
  e03fb8:	dd401904 	addi	r21,sp,100
  e03fbc:	9c3fed16 	blt	r19,r16,e03f74 <___vfprintf_internal_r+0x554>
  e03fc0:	9425883a 	add	r18,r18,r16
  e03fc4:	8c400044 	addi	r17,r17,1
  e03fc8:	008001c4 	movi	r2,7
  e03fcc:	af000015 	stw	fp,0(r21)
  e03fd0:	ac000115 	stw	r16,4(r21)
  e03fd4:	dc800e15 	stw	r18,56(sp)
  e03fd8:	dc400d15 	stw	r17,52(sp)
  e03fdc:	14418216 	blt	r2,r17,e045e8 <___vfprintf_internal_r+0xbc8>
  e03fe0:	ad400204 	addi	r21,r21,8
  e03fe4:	d9014c17 	ldw	r4,1328(sp)
  e03fe8:	2080400c 	andi	r2,r4,256
  e03fec:	10004a1e 	bne	r2,zero,e04118 <___vfprintf_internal_r+0x6f8>
  e03ff0:	d9414117 	ldw	r5,1284(sp)
  e03ff4:	91e5883a 	add	r18,r18,r7
  e03ff8:	8c400044 	addi	r17,r17,1
  e03ffc:	008001c4 	movi	r2,7
  e04000:	a9400015 	stw	r5,0(r21)
  e04004:	a9c00115 	stw	r7,4(r21)
  e04008:	dc800e15 	stw	r18,56(sp)
  e0400c:	dc400d15 	stw	r17,52(sp)
  e04010:	14416716 	blt	r2,r17,e045b0 <___vfprintf_internal_r+0xb90>
  e04014:	a8c00204 	addi	r3,r21,8
  e04018:	d9814c17 	ldw	r6,1328(sp)
  e0401c:	3080010c 	andi	r2,r6,4
  e04020:	10002826 	beq	r2,zero,e040c4 <___vfprintf_internal_r+0x6a4>
  e04024:	d8814a17 	ldw	r2,1320(sp)
  e04028:	d9014517 	ldw	r4,1300(sp)
  e0402c:	1121c83a 	sub	r16,r2,r4
  e04030:	0400240e 	bge	zero,r16,e040c4 <___vfprintf_internal_r+0x6a4>
  e04034:	00800404 	movi	r2,16
  e04038:	14044f0e 	bge	r2,r16,e05178 <___vfprintf_internal_r+0x1758>
  e0403c:	dc400d17 	ldw	r17,52(sp)
  e04040:	1027883a 	mov	r19,r2
  e04044:	07003874 	movhi	fp,225
  e04048:	e703b084 	addi	fp,fp,3778
  e0404c:	050001c4 	movi	r20,7
  e04050:	00000306 	br	e04060 <___vfprintf_internal_r+0x640>
  e04054:	843ffc04 	addi	r16,r16,-16
  e04058:	18c00204 	addi	r3,r3,8
  e0405c:	9c00110e 	bge	r19,r16,e040a4 <___vfprintf_internal_r+0x684>
  e04060:	94800404 	addi	r18,r18,16
  e04064:	8c400044 	addi	r17,r17,1
  e04068:	1f000015 	stw	fp,0(r3)
  e0406c:	1cc00115 	stw	r19,4(r3)
  e04070:	dc800e15 	stw	r18,56(sp)
  e04074:	dc400d15 	stw	r17,52(sp)
  e04078:	a47ff60e 	bge	r20,r17,e04054 <___vfprintf_internal_r+0x634>
  e0407c:	d9014f17 	ldw	r4,1340(sp)
  e04080:	b00b883a 	mov	r5,r22
  e04084:	d9800c04 	addi	r6,sp,48
  e04088:	0e039c80 	call	e039c8 <__sprint_r>
  e0408c:	10001c1e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e04090:	843ffc04 	addi	r16,r16,-16
  e04094:	dc800e17 	ldw	r18,56(sp)
  e04098:	dc400d17 	ldw	r17,52(sp)
  e0409c:	d8c01904 	addi	r3,sp,100
  e040a0:	9c3fef16 	blt	r19,r16,e04060 <___vfprintf_internal_r+0x640>
  e040a4:	9425883a 	add	r18,r18,r16
  e040a8:	8c400044 	addi	r17,r17,1
  e040ac:	008001c4 	movi	r2,7
  e040b0:	1f000015 	stw	fp,0(r3)
  e040b4:	1c000115 	stw	r16,4(r3)
  e040b8:	dc800e15 	stw	r18,56(sp)
  e040bc:	dc400d15 	stw	r17,52(sp)
  e040c0:	1440cb16 	blt	r2,r17,e043f0 <___vfprintf_internal_r+0x9d0>
  e040c4:	d8814a17 	ldw	r2,1320(sp)
  e040c8:	d9414517 	ldw	r5,1300(sp)
  e040cc:	1140010e 	bge	r2,r5,e040d4 <___vfprintf_internal_r+0x6b4>
  e040d0:	2805883a 	mov	r2,r5
  e040d4:	d9814b17 	ldw	r6,1324(sp)
  e040d8:	308d883a 	add	r6,r6,r2
  e040dc:	d9814b15 	stw	r6,1324(sp)
  e040e0:	90013b1e 	bne	r18,zero,e045d0 <___vfprintf_internal_r+0xbb0>
  e040e4:	d9c14017 	ldw	r7,1280(sp)
  e040e8:	dd401904 	addi	r21,sp,100
  e040ec:	d8000d15 	stw	zero,52(sp)
  e040f0:	003ea706 	br	e03b90 <___vfprintf_internal_r+0x170>
  e040f4:	d8800e17 	ldw	r2,56(sp)
  e040f8:	10053f1e 	bne	r2,zero,e055f8 <___vfprintf_internal_r+0x1bd8>
  e040fc:	d8000d15 	stw	zero,52(sp)
  e04100:	b080030b 	ldhu	r2,12(r22)
  e04104:	1080100c 	andi	r2,r2,64
  e04108:	103e8726 	beq	r2,zero,e03b28 <___vfprintf_internal_r+0x108>
  e0410c:	00bfffc4 	movi	r2,-1
  e04110:	d8814b15 	stw	r2,1324(sp)
  e04114:	003e8406 	br	e03b28 <___vfprintf_internal_r+0x108>
  e04118:	d9814d17 	ldw	r6,1332(sp)
  e0411c:	00801944 	movi	r2,101
  e04120:	11806e16 	blt	r2,r6,e042dc <___vfprintf_internal_r+0x8bc>
  e04124:	d9414717 	ldw	r5,1308(sp)
  e04128:	00c00044 	movi	r3,1
  e0412c:	1943430e 	bge	r3,r5,e04e3c <___vfprintf_internal_r+0x141c>
  e04130:	d8814117 	ldw	r2,1284(sp)
  e04134:	94800044 	addi	r18,r18,1
  e04138:	8c400044 	addi	r17,r17,1
  e0413c:	a8800015 	stw	r2,0(r21)
  e04140:	008001c4 	movi	r2,7
  e04144:	a8c00115 	stw	r3,4(r21)
  e04148:	dc800e15 	stw	r18,56(sp)
  e0414c:	dc400d15 	stw	r17,52(sp)
  e04150:	1441ca16 	blt	r2,r17,e0487c <___vfprintf_internal_r+0xe5c>
  e04154:	a8c00204 	addi	r3,r21,8
  e04158:	d9014917 	ldw	r4,1316(sp)
  e0415c:	00800044 	movi	r2,1
  e04160:	94800044 	addi	r18,r18,1
  e04164:	8c400044 	addi	r17,r17,1
  e04168:	18800115 	stw	r2,4(r3)
  e0416c:	008001c4 	movi	r2,7
  e04170:	19000015 	stw	r4,0(r3)
  e04174:	dc800e15 	stw	r18,56(sp)
  e04178:	dc400d15 	stw	r17,52(sp)
  e0417c:	1441b616 	blt	r2,r17,e04858 <___vfprintf_internal_r+0xe38>
  e04180:	1cc00204 	addi	r19,r3,8
  e04184:	d9014217 	ldw	r4,1288(sp)
  e04188:	d9414317 	ldw	r5,1292(sp)
  e0418c:	000d883a 	mov	r6,zero
  e04190:	000f883a 	mov	r7,zero
  e04194:	0e02ce80 	call	e02ce8 <__nedf2>
  e04198:	10017426 	beq	r2,zero,e0476c <___vfprintf_internal_r+0xd4c>
  e0419c:	d9414717 	ldw	r5,1308(sp)
  e041a0:	d9814117 	ldw	r6,1284(sp)
  e041a4:	8c400044 	addi	r17,r17,1
  e041a8:	2c85883a 	add	r2,r5,r18
  e041ac:	14bfffc4 	addi	r18,r2,-1
  e041b0:	28bfffc4 	addi	r2,r5,-1
  e041b4:	30c00044 	addi	r3,r6,1
  e041b8:	98800115 	stw	r2,4(r19)
  e041bc:	008001c4 	movi	r2,7
  e041c0:	98c00015 	stw	r3,0(r19)
  e041c4:	dc800e15 	stw	r18,56(sp)
  e041c8:	dc400d15 	stw	r17,52(sp)
  e041cc:	14418e16 	blt	r2,r17,e04808 <___vfprintf_internal_r+0xde8>
  e041d0:	9cc00204 	addi	r19,r19,8
  e041d4:	d9414817 	ldw	r5,1312(sp)
  e041d8:	d8800804 	addi	r2,sp,32
  e041dc:	8c400044 	addi	r17,r17,1
  e041e0:	9165883a 	add	r18,r18,r5
  e041e4:	98800015 	stw	r2,0(r19)
  e041e8:	008001c4 	movi	r2,7
  e041ec:	99400115 	stw	r5,4(r19)
  e041f0:	dc800e15 	stw	r18,56(sp)
  e041f4:	dc400d15 	stw	r17,52(sp)
  e041f8:	1440ed16 	blt	r2,r17,e045b0 <___vfprintf_internal_r+0xb90>
  e041fc:	98c00204 	addi	r3,r19,8
  e04200:	003f8506 	br	e04018 <___vfprintf_internal_r+0x5f8>
  e04204:	d9814a17 	ldw	r6,1320(sp)
  e04208:	d8814517 	ldw	r2,1300(sp)
  e0420c:	30a1c83a 	sub	r16,r6,r2
  e04210:	043f4b0e 	bge	zero,r16,e03f40 <___vfprintf_internal_r+0x520>
  e04214:	00800404 	movi	r2,16
  e04218:	1404340e 	bge	r2,r16,e052ec <___vfprintf_internal_r+0x18cc>
  e0421c:	1027883a 	mov	r19,r2
  e04220:	07003874 	movhi	fp,225
  e04224:	e703ac84 	addi	fp,fp,3762
  e04228:	050001c4 	movi	r20,7
  e0422c:	00000306 	br	e0423c <___vfprintf_internal_r+0x81c>
  e04230:	843ffc04 	addi	r16,r16,-16
  e04234:	ad400204 	addi	r21,r21,8
  e04238:	9c00130e 	bge	r19,r16,e04288 <___vfprintf_internal_r+0x868>
  e0423c:	94800404 	addi	r18,r18,16
  e04240:	8c400044 	addi	r17,r17,1
  e04244:	af000015 	stw	fp,0(r21)
  e04248:	acc00115 	stw	r19,4(r21)
  e0424c:	dc800e15 	stw	r18,56(sp)
  e04250:	dc400d15 	stw	r17,52(sp)
  e04254:	a47ff60e 	bge	r20,r17,e04230 <___vfprintf_internal_r+0x810>
  e04258:	d9014f17 	ldw	r4,1340(sp)
  e0425c:	b00b883a 	mov	r5,r22
  e04260:	d9800c04 	addi	r6,sp,48
  e04264:	d9c15115 	stw	r7,1348(sp)
  e04268:	0e039c80 	call	e039c8 <__sprint_r>
  e0426c:	d9c15117 	ldw	r7,1348(sp)
  e04270:	103fa31e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e04274:	843ffc04 	addi	r16,r16,-16
  e04278:	dc800e17 	ldw	r18,56(sp)
  e0427c:	dc400d17 	ldw	r17,52(sp)
  e04280:	dd401904 	addi	r21,sp,100
  e04284:	9c3fed16 	blt	r19,r16,e0423c <___vfprintf_internal_r+0x81c>
  e04288:	9425883a 	add	r18,r18,r16
  e0428c:	8c400044 	addi	r17,r17,1
  e04290:	008001c4 	movi	r2,7
  e04294:	af000015 	stw	fp,0(r21)
  e04298:	ac000115 	stw	r16,4(r21)
  e0429c:	dc800e15 	stw	r18,56(sp)
  e042a0:	dc400d15 	stw	r17,52(sp)
  e042a4:	14416116 	blt	r2,r17,e0482c <___vfprintf_internal_r+0xe0c>
  e042a8:	ad400204 	addi	r21,r21,8
  e042ac:	003f2406 	br	e03f40 <___vfprintf_internal_r+0x520>
  e042b0:	d9014f17 	ldw	r4,1340(sp)
  e042b4:	0e074900 	call	e07490 <__sinit>
  e042b8:	d9c15117 	ldw	r7,1348(sp)
  e042bc:	003def06 	br	e03a7c <___vfprintf_internal_r+0x5c>
  e042c0:	d9014f17 	ldw	r4,1340(sp)
  e042c4:	b00b883a 	mov	r5,r22
  e042c8:	d9c15115 	stw	r7,1348(sp)
  e042cc:	0e058f00 	call	e058f0 <__swsetup_r>
  e042d0:	d9c15117 	ldw	r7,1348(sp)
  e042d4:	103dee26 	beq	r2,zero,e03a90 <___vfprintf_internal_r+0x70>
  e042d8:	003f8c06 	br	e0410c <___vfprintf_internal_r+0x6ec>
  e042dc:	d9014217 	ldw	r4,1288(sp)
  e042e0:	d9414317 	ldw	r5,1292(sp)
  e042e4:	000d883a 	mov	r6,zero
  e042e8:	000f883a 	mov	r7,zero
  e042ec:	0e0ba8c0 	call	e0ba8c <__eqdf2>
  e042f0:	1000f21e 	bne	r2,zero,e046bc <___vfprintf_internal_r+0xc9c>
  e042f4:	00803874 	movhi	r2,225
  e042f8:	10833004 	addi	r2,r2,3264
  e042fc:	94800044 	addi	r18,r18,1
  e04300:	8c400044 	addi	r17,r17,1
  e04304:	a8800015 	stw	r2,0(r21)
  e04308:	00c00044 	movi	r3,1
  e0430c:	008001c4 	movi	r2,7
  e04310:	a8c00115 	stw	r3,4(r21)
  e04314:	dc800e15 	stw	r18,56(sp)
  e04318:	dc400d15 	stw	r17,52(sp)
  e0431c:	1442fa16 	blt	r2,r17,e04f08 <___vfprintf_internal_r+0x14e8>
  e04320:	a8c00204 	addi	r3,r21,8
  e04324:	d8800517 	ldw	r2,20(sp)
  e04328:	d9014717 	ldw	r4,1308(sp)
  e0432c:	11015c0e 	bge	r2,r4,e048a0 <___vfprintf_internal_r+0xe80>
  e04330:	dc400d17 	ldw	r17,52(sp)
  e04334:	d9814917 	ldw	r6,1316(sp)
  e04338:	00800044 	movi	r2,1
  e0433c:	94800044 	addi	r18,r18,1
  e04340:	8c400044 	addi	r17,r17,1
  e04344:	18800115 	stw	r2,4(r3)
  e04348:	008001c4 	movi	r2,7
  e0434c:	19800015 	stw	r6,0(r3)
  e04350:	dc800e15 	stw	r18,56(sp)
  e04354:	dc400d15 	stw	r17,52(sp)
  e04358:	14431016 	blt	r2,r17,e04f9c <___vfprintf_internal_r+0x157c>
  e0435c:	18c00204 	addi	r3,r3,8
  e04360:	d8814717 	ldw	r2,1308(sp)
  e04364:	143fffc4 	addi	r16,r2,-1
  e04368:	043f2b0e 	bge	zero,r16,e04018 <___vfprintf_internal_r+0x5f8>
  e0436c:	00800404 	movi	r2,16
  e04370:	1402a20e 	bge	r2,r16,e04dfc <___vfprintf_internal_r+0x13dc>
  e04374:	dc400d17 	ldw	r17,52(sp)
  e04378:	1027883a 	mov	r19,r2
  e0437c:	07003874 	movhi	fp,225
  e04380:	e703ac84 	addi	fp,fp,3762
  e04384:	050001c4 	movi	r20,7
  e04388:	00000306 	br	e04398 <___vfprintf_internal_r+0x978>
  e0438c:	18c00204 	addi	r3,r3,8
  e04390:	843ffc04 	addi	r16,r16,-16
  e04394:	9c029c0e 	bge	r19,r16,e04e08 <___vfprintf_internal_r+0x13e8>
  e04398:	94800404 	addi	r18,r18,16
  e0439c:	8c400044 	addi	r17,r17,1
  e043a0:	1f000015 	stw	fp,0(r3)
  e043a4:	1cc00115 	stw	r19,4(r3)
  e043a8:	dc800e15 	stw	r18,56(sp)
  e043ac:	dc400d15 	stw	r17,52(sp)
  e043b0:	a47ff60e 	bge	r20,r17,e0438c <___vfprintf_internal_r+0x96c>
  e043b4:	d9014f17 	ldw	r4,1340(sp)
  e043b8:	b00b883a 	mov	r5,r22
  e043bc:	d9800c04 	addi	r6,sp,48
  e043c0:	0e039c80 	call	e039c8 <__sprint_r>
  e043c4:	103f4e1e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e043c8:	dc800e17 	ldw	r18,56(sp)
  e043cc:	dc400d17 	ldw	r17,52(sp)
  e043d0:	d8c01904 	addi	r3,sp,100
  e043d4:	003fee06 	br	e04390 <___vfprintf_internal_r+0x970>
  e043d8:	d8802c0b 	ldhu	r2,176(sp)
  e043dc:	00ffffc4 	movi	r3,-1
  e043e0:	d8c14b15 	stw	r3,1324(sp)
  e043e4:	1080100c 	andi	r2,r2,64
  e043e8:	103dcc1e 	bne	r2,zero,e03b1c <___vfprintf_internal_r+0xfc>
  e043ec:	003dce06 	br	e03b28 <___vfprintf_internal_r+0x108>
  e043f0:	d9014f17 	ldw	r4,1340(sp)
  e043f4:	b00b883a 	mov	r5,r22
  e043f8:	d9800c04 	addi	r6,sp,48
  e043fc:	0e039c80 	call	e039c8 <__sprint_r>
  e04400:	103f3f1e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e04404:	dc800e17 	ldw	r18,56(sp)
  e04408:	003f2e06 	br	e040c4 <___vfprintf_internal_r+0x6a4>
  e0440c:	d9414c17 	ldw	r5,1328(sp)
  e04410:	29400414 	ori	r5,r5,16
  e04414:	d9414c15 	stw	r5,1328(sp)
  e04418:	d9814c17 	ldw	r6,1328(sp)
  e0441c:	3080080c 	andi	r2,r6,32
  e04420:	10014f1e 	bne	r2,zero,e04960 <___vfprintf_internal_r+0xf40>
  e04424:	d8c14c17 	ldw	r3,1328(sp)
  e04428:	1880040c 	andi	r2,r3,16
  e0442c:	1002ea1e 	bne	r2,zero,e04fd8 <___vfprintf_internal_r+0x15b8>
  e04430:	d9014c17 	ldw	r4,1328(sp)
  e04434:	2080100c 	andi	r2,r4,64
  e04438:	1002e726 	beq	r2,zero,e04fd8 <___vfprintf_internal_r+0x15b8>
  e0443c:	3880000f 	ldh	r2,0(r7)
  e04440:	39c00104 	addi	r7,r7,4
  e04444:	d9c14015 	stw	r7,1280(sp)
  e04448:	1023d7fa 	srai	r17,r2,31
  e0444c:	1021883a 	mov	r16,r2
  e04450:	88037216 	blt	r17,zero,e0521c <___vfprintf_internal_r+0x17fc>
  e04454:	01000044 	movi	r4,1
  e04458:	98000416 	blt	r19,zero,e0446c <___vfprintf_internal_r+0xa4c>
  e0445c:	d8c14c17 	ldw	r3,1328(sp)
  e04460:	00bfdfc4 	movi	r2,-129
  e04464:	1886703a 	and	r3,r3,r2
  e04468:	d8c14c15 	stw	r3,1328(sp)
  e0446c:	8444b03a 	or	r2,r16,r17
  e04470:	1002261e 	bne	r2,zero,e04d0c <___vfprintf_internal_r+0x12ec>
  e04474:	9802251e 	bne	r19,zero,e04d0c <___vfprintf_internal_r+0x12ec>
  e04478:	20803fcc 	andi	r2,r4,255
  e0447c:	10029b26 	beq	r2,zero,e04eec <___vfprintf_internal_r+0x14cc>
  e04480:	d8c01904 	addi	r3,sp,100
  e04484:	dd000f04 	addi	r20,sp,60
  e04488:	d8c14115 	stw	r3,1284(sp)
  e0448c:	d8c14117 	ldw	r3,1284(sp)
  e04490:	dcc14515 	stw	r19,1300(sp)
  e04494:	a0c5c83a 	sub	r2,r20,r3
  e04498:	11c00a04 	addi	r7,r2,40
  e0449c:	99c0010e 	bge	r19,r7,e044a4 <___vfprintf_internal_r+0xa84>
  e044a0:	d9c14515 	stw	r7,1300(sp)
  e044a4:	dcc14615 	stw	r19,1304(sp)
  e044a8:	d8800407 	ldb	r2,16(sp)
  e044ac:	103e4c26 	beq	r2,zero,e03de0 <___vfprintf_internal_r+0x3c0>
  e044b0:	d8814517 	ldw	r2,1300(sp)
  e044b4:	10800044 	addi	r2,r2,1
  e044b8:	d8814515 	stw	r2,1300(sp)
  e044bc:	003e4806 	br	e03de0 <___vfprintf_internal_r+0x3c0>
  e044c0:	d9814c17 	ldw	r6,1328(sp)
  e044c4:	31800414 	ori	r6,r6,16
  e044c8:	d9814c15 	stw	r6,1328(sp)
  e044cc:	d8c14c17 	ldw	r3,1328(sp)
  e044d0:	1880080c 	andi	r2,r3,32
  e044d4:	1001271e 	bne	r2,zero,e04974 <___vfprintf_internal_r+0xf54>
  e044d8:	d9414c17 	ldw	r5,1328(sp)
  e044dc:	2880040c 	andi	r2,r5,16
  e044e0:	1002b61e 	bne	r2,zero,e04fbc <___vfprintf_internal_r+0x159c>
  e044e4:	d9814c17 	ldw	r6,1328(sp)
  e044e8:	3080100c 	andi	r2,r6,64
  e044ec:	1002b326 	beq	r2,zero,e04fbc <___vfprintf_internal_r+0x159c>
  e044f0:	3c00000b 	ldhu	r16,0(r7)
  e044f4:	0009883a 	mov	r4,zero
  e044f8:	39c00104 	addi	r7,r7,4
  e044fc:	0023883a 	mov	r17,zero
  e04500:	d9c14015 	stw	r7,1280(sp)
  e04504:	d8000405 	stb	zero,16(sp)
  e04508:	003fd306 	br	e04458 <___vfprintf_internal_r+0xa38>
  e0450c:	d9014c17 	ldw	r4,1328(sp)
  e04510:	21000414 	ori	r4,r4,16
  e04514:	d9014c15 	stw	r4,1328(sp)
  e04518:	d9414c17 	ldw	r5,1328(sp)
  e0451c:	2880080c 	andi	r2,r5,32
  e04520:	1001081e 	bne	r2,zero,e04944 <___vfprintf_internal_r+0xf24>
  e04524:	d8c14c17 	ldw	r3,1328(sp)
  e04528:	1880040c 	andi	r2,r3,16
  e0452c:	1002b01e 	bne	r2,zero,e04ff0 <___vfprintf_internal_r+0x15d0>
  e04530:	d9014c17 	ldw	r4,1328(sp)
  e04534:	2080100c 	andi	r2,r4,64
  e04538:	1002ad26 	beq	r2,zero,e04ff0 <___vfprintf_internal_r+0x15d0>
  e0453c:	3c00000b 	ldhu	r16,0(r7)
  e04540:	01000044 	movi	r4,1
  e04544:	39c00104 	addi	r7,r7,4
  e04548:	0023883a 	mov	r17,zero
  e0454c:	d9c14015 	stw	r7,1280(sp)
  e04550:	d8000405 	stb	zero,16(sp)
  e04554:	003fc006 	br	e04458 <___vfprintf_internal_r+0xa38>
  e04558:	d9014f17 	ldw	r4,1340(sp)
  e0455c:	b00b883a 	mov	r5,r22
  e04560:	d9800c04 	addi	r6,sp,48
  e04564:	0e039c80 	call	e039c8 <__sprint_r>
  e04568:	103ee51e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e0456c:	dc800e17 	ldw	r18,56(sp)
  e04570:	d8c01904 	addi	r3,sp,100
  e04574:	d9814c17 	ldw	r6,1328(sp)
  e04578:	3080004c 	andi	r2,r6,1
  e0457c:	1005003a 	cmpeq	r2,r2,zero
  e04580:	103ea51e 	bne	r2,zero,e04018 <___vfprintf_internal_r+0x5f8>
  e04584:	00800044 	movi	r2,1
  e04588:	dc400d17 	ldw	r17,52(sp)
  e0458c:	18800115 	stw	r2,4(r3)
  e04590:	d8814917 	ldw	r2,1316(sp)
  e04594:	94800044 	addi	r18,r18,1
  e04598:	8c400044 	addi	r17,r17,1
  e0459c:	18800015 	stw	r2,0(r3)
  e045a0:	008001c4 	movi	r2,7
  e045a4:	dc800e15 	stw	r18,56(sp)
  e045a8:	dc400d15 	stw	r17,52(sp)
  e045ac:	14421e0e 	bge	r2,r17,e04e28 <___vfprintf_internal_r+0x1408>
  e045b0:	d9014f17 	ldw	r4,1340(sp)
  e045b4:	b00b883a 	mov	r5,r22
  e045b8:	d9800c04 	addi	r6,sp,48
  e045bc:	0e039c80 	call	e039c8 <__sprint_r>
  e045c0:	103ecf1e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e045c4:	dc800e17 	ldw	r18,56(sp)
  e045c8:	d8c01904 	addi	r3,sp,100
  e045cc:	003e9206 	br	e04018 <___vfprintf_internal_r+0x5f8>
  e045d0:	d9014f17 	ldw	r4,1340(sp)
  e045d4:	b00b883a 	mov	r5,r22
  e045d8:	d9800c04 	addi	r6,sp,48
  e045dc:	0e039c80 	call	e039c8 <__sprint_r>
  e045e0:	103ec026 	beq	r2,zero,e040e4 <___vfprintf_internal_r+0x6c4>
  e045e4:	003ec606 	br	e04100 <___vfprintf_internal_r+0x6e0>
  e045e8:	d9014f17 	ldw	r4,1340(sp)
  e045ec:	b00b883a 	mov	r5,r22
  e045f0:	d9800c04 	addi	r6,sp,48
  e045f4:	d9c15115 	stw	r7,1348(sp)
  e045f8:	0e039c80 	call	e039c8 <__sprint_r>
  e045fc:	d9c15117 	ldw	r7,1348(sp)
  e04600:	103ebf1e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e04604:	dc800e17 	ldw	r18,56(sp)
  e04608:	dc400d17 	ldw	r17,52(sp)
  e0460c:	dd401904 	addi	r21,sp,100
  e04610:	003e7406 	br	e03fe4 <___vfprintf_internal_r+0x5c4>
  e04614:	d9014f17 	ldw	r4,1340(sp)
  e04618:	b00b883a 	mov	r5,r22
  e0461c:	d9800c04 	addi	r6,sp,48
  e04620:	d9c15115 	stw	r7,1348(sp)
  e04624:	0e039c80 	call	e039c8 <__sprint_r>
  e04628:	d9c15117 	ldw	r7,1348(sp)
  e0462c:	103eb41e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e04630:	dd401904 	addi	r21,sp,100
  e04634:	003d6d06 	br	e03bec <___vfprintf_internal_r+0x1cc>
  e04638:	d9014f17 	ldw	r4,1340(sp)
  e0463c:	b00b883a 	mov	r5,r22
  e04640:	d9800c04 	addi	r6,sp,48
  e04644:	d9c15115 	stw	r7,1348(sp)
  e04648:	0e039c80 	call	e039c8 <__sprint_r>
  e0464c:	d9c15117 	ldw	r7,1348(sp)
  e04650:	103eab1e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e04654:	dc800e17 	ldw	r18,56(sp)
  e04658:	dc400d17 	ldw	r17,52(sp)
  e0465c:	dd401904 	addi	r21,sp,100
  e04660:	003e3406 	br	e03f34 <___vfprintf_internal_r+0x514>
  e04664:	d9014f17 	ldw	r4,1340(sp)
  e04668:	b00b883a 	mov	r5,r22
  e0466c:	d9800c04 	addi	r6,sp,48
  e04670:	d9c15115 	stw	r7,1348(sp)
  e04674:	0e039c80 	call	e039c8 <__sprint_r>
  e04678:	d9c15117 	ldw	r7,1348(sp)
  e0467c:	103ea01e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e04680:	dc800e17 	ldw	r18,56(sp)
  e04684:	dc400d17 	ldw	r17,52(sp)
  e04688:	dd401904 	addi	r21,sp,100
  e0468c:	003e1c06 	br	e03f00 <___vfprintf_internal_r+0x4e0>
  e04690:	d9014f17 	ldw	r4,1340(sp)
  e04694:	b00b883a 	mov	r5,r22
  e04698:	d9800c04 	addi	r6,sp,48
  e0469c:	d9c15115 	stw	r7,1348(sp)
  e046a0:	0e039c80 	call	e039c8 <__sprint_r>
  e046a4:	d9c15117 	ldw	r7,1348(sp)
  e046a8:	103e951e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e046ac:	dc800e17 	ldw	r18,56(sp)
  e046b0:	dc400d17 	ldw	r17,52(sp)
  e046b4:	dd401904 	addi	r21,sp,100
  e046b8:	003e0406 	br	e03ecc <___vfprintf_internal_r+0x4ac>
  e046bc:	d9000517 	ldw	r4,20(sp)
  e046c0:	0102520e 	bge	zero,r4,e0500c <___vfprintf_internal_r+0x15ec>
  e046c4:	d9814717 	ldw	r6,1308(sp)
  e046c8:	21807a16 	blt	r4,r6,e048b4 <___vfprintf_internal_r+0xe94>
  e046cc:	d8814117 	ldw	r2,1284(sp)
  e046d0:	91a5883a 	add	r18,r18,r6
  e046d4:	8c400044 	addi	r17,r17,1
  e046d8:	a8800015 	stw	r2,0(r21)
  e046dc:	008001c4 	movi	r2,7
  e046e0:	a9800115 	stw	r6,4(r21)
  e046e4:	dc800e15 	stw	r18,56(sp)
  e046e8:	dc400d15 	stw	r17,52(sp)
  e046ec:	1442f616 	blt	r2,r17,e052c8 <___vfprintf_internal_r+0x18a8>
  e046f0:	a8c00204 	addi	r3,r21,8
  e046f4:	d9414717 	ldw	r5,1308(sp)
  e046f8:	2161c83a 	sub	r16,r4,r5
  e046fc:	043f9d0e 	bge	zero,r16,e04574 <___vfprintf_internal_r+0xb54>
  e04700:	00800404 	movi	r2,16
  e04704:	1402130e 	bge	r2,r16,e04f54 <___vfprintf_internal_r+0x1534>
  e04708:	dc400d17 	ldw	r17,52(sp)
  e0470c:	1027883a 	mov	r19,r2
  e04710:	07003874 	movhi	fp,225
  e04714:	e703ac84 	addi	fp,fp,3762
  e04718:	050001c4 	movi	r20,7
  e0471c:	00000306 	br	e0472c <___vfprintf_internal_r+0xd0c>
  e04720:	18c00204 	addi	r3,r3,8
  e04724:	843ffc04 	addi	r16,r16,-16
  e04728:	9c020d0e 	bge	r19,r16,e04f60 <___vfprintf_internal_r+0x1540>
  e0472c:	94800404 	addi	r18,r18,16
  e04730:	8c400044 	addi	r17,r17,1
  e04734:	1f000015 	stw	fp,0(r3)
  e04738:	1cc00115 	stw	r19,4(r3)
  e0473c:	dc800e15 	stw	r18,56(sp)
  e04740:	dc400d15 	stw	r17,52(sp)
  e04744:	a47ff60e 	bge	r20,r17,e04720 <___vfprintf_internal_r+0xd00>
  e04748:	d9014f17 	ldw	r4,1340(sp)
  e0474c:	b00b883a 	mov	r5,r22
  e04750:	d9800c04 	addi	r6,sp,48
  e04754:	0e039c80 	call	e039c8 <__sprint_r>
  e04758:	103e691e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e0475c:	dc800e17 	ldw	r18,56(sp)
  e04760:	dc400d17 	ldw	r17,52(sp)
  e04764:	d8c01904 	addi	r3,sp,100
  e04768:	003fee06 	br	e04724 <___vfprintf_internal_r+0xd04>
  e0476c:	d8814717 	ldw	r2,1308(sp)
  e04770:	143fffc4 	addi	r16,r2,-1
  e04774:	043e970e 	bge	zero,r16,e041d4 <___vfprintf_internal_r+0x7b4>
  e04778:	00800404 	movi	r2,16
  e0477c:	1400180e 	bge	r2,r16,e047e0 <___vfprintf_internal_r+0xdc0>
  e04780:	1029883a 	mov	r20,r2
  e04784:	07003874 	movhi	fp,225
  e04788:	e703ac84 	addi	fp,fp,3762
  e0478c:	054001c4 	movi	r21,7
  e04790:	00000306 	br	e047a0 <___vfprintf_internal_r+0xd80>
  e04794:	9cc00204 	addi	r19,r19,8
  e04798:	843ffc04 	addi	r16,r16,-16
  e0479c:	a400120e 	bge	r20,r16,e047e8 <___vfprintf_internal_r+0xdc8>
  e047a0:	94800404 	addi	r18,r18,16
  e047a4:	8c400044 	addi	r17,r17,1
  e047a8:	9f000015 	stw	fp,0(r19)
  e047ac:	9d000115 	stw	r20,4(r19)
  e047b0:	dc800e15 	stw	r18,56(sp)
  e047b4:	dc400d15 	stw	r17,52(sp)
  e047b8:	ac7ff60e 	bge	r21,r17,e04794 <___vfprintf_internal_r+0xd74>
  e047bc:	d9014f17 	ldw	r4,1340(sp)
  e047c0:	b00b883a 	mov	r5,r22
  e047c4:	d9800c04 	addi	r6,sp,48
  e047c8:	0e039c80 	call	e039c8 <__sprint_r>
  e047cc:	103e4c1e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e047d0:	dc800e17 	ldw	r18,56(sp)
  e047d4:	dc400d17 	ldw	r17,52(sp)
  e047d8:	dcc01904 	addi	r19,sp,100
  e047dc:	003fee06 	br	e04798 <___vfprintf_internal_r+0xd78>
  e047e0:	07003874 	movhi	fp,225
  e047e4:	e703ac84 	addi	fp,fp,3762
  e047e8:	9425883a 	add	r18,r18,r16
  e047ec:	8c400044 	addi	r17,r17,1
  e047f0:	008001c4 	movi	r2,7
  e047f4:	9f000015 	stw	fp,0(r19)
  e047f8:	9c000115 	stw	r16,4(r19)
  e047fc:	dc800e15 	stw	r18,56(sp)
  e04800:	dc400d15 	stw	r17,52(sp)
  e04804:	147e720e 	bge	r2,r17,e041d0 <___vfprintf_internal_r+0x7b0>
  e04808:	d9014f17 	ldw	r4,1340(sp)
  e0480c:	b00b883a 	mov	r5,r22
  e04810:	d9800c04 	addi	r6,sp,48
  e04814:	0e039c80 	call	e039c8 <__sprint_r>
  e04818:	103e391e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e0481c:	dc800e17 	ldw	r18,56(sp)
  e04820:	dc400d17 	ldw	r17,52(sp)
  e04824:	dcc01904 	addi	r19,sp,100
  e04828:	003e6a06 	br	e041d4 <___vfprintf_internal_r+0x7b4>
  e0482c:	d9014f17 	ldw	r4,1340(sp)
  e04830:	b00b883a 	mov	r5,r22
  e04834:	d9800c04 	addi	r6,sp,48
  e04838:	d9c15115 	stw	r7,1348(sp)
  e0483c:	0e039c80 	call	e039c8 <__sprint_r>
  e04840:	d9c15117 	ldw	r7,1348(sp)
  e04844:	103e2e1e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e04848:	dc800e17 	ldw	r18,56(sp)
  e0484c:	dc400d17 	ldw	r17,52(sp)
  e04850:	dd401904 	addi	r21,sp,100
  e04854:	003dba06 	br	e03f40 <___vfprintf_internal_r+0x520>
  e04858:	d9014f17 	ldw	r4,1340(sp)
  e0485c:	b00b883a 	mov	r5,r22
  e04860:	d9800c04 	addi	r6,sp,48
  e04864:	0e039c80 	call	e039c8 <__sprint_r>
  e04868:	103e251e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e0486c:	dc800e17 	ldw	r18,56(sp)
  e04870:	dc400d17 	ldw	r17,52(sp)
  e04874:	dcc01904 	addi	r19,sp,100
  e04878:	003e4206 	br	e04184 <___vfprintf_internal_r+0x764>
  e0487c:	d9014f17 	ldw	r4,1340(sp)
  e04880:	b00b883a 	mov	r5,r22
  e04884:	d9800c04 	addi	r6,sp,48
  e04888:	0e039c80 	call	e039c8 <__sprint_r>
  e0488c:	103e1c1e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e04890:	dc800e17 	ldw	r18,56(sp)
  e04894:	dc400d17 	ldw	r17,52(sp)
  e04898:	d8c01904 	addi	r3,sp,100
  e0489c:	003e2e06 	br	e04158 <___vfprintf_internal_r+0x738>
  e048a0:	d9414c17 	ldw	r5,1328(sp)
  e048a4:	2880004c 	andi	r2,r5,1
  e048a8:	1005003a 	cmpeq	r2,r2,zero
  e048ac:	103dda1e 	bne	r2,zero,e04018 <___vfprintf_internal_r+0x5f8>
  e048b0:	003e9f06 	br	e04330 <___vfprintf_internal_r+0x910>
  e048b4:	d8c14117 	ldw	r3,1284(sp)
  e048b8:	9125883a 	add	r18,r18,r4
  e048bc:	8c400044 	addi	r17,r17,1
  e048c0:	008001c4 	movi	r2,7
  e048c4:	a8c00015 	stw	r3,0(r21)
  e048c8:	a9000115 	stw	r4,4(r21)
  e048cc:	dc800e15 	stw	r18,56(sp)
  e048d0:	dc400d15 	stw	r17,52(sp)
  e048d4:	14426616 	blt	r2,r17,e05270 <___vfprintf_internal_r+0x1850>
  e048d8:	a8c00204 	addi	r3,r21,8
  e048dc:	d9414917 	ldw	r5,1316(sp)
  e048e0:	00800044 	movi	r2,1
  e048e4:	94800044 	addi	r18,r18,1
  e048e8:	8c400044 	addi	r17,r17,1
  e048ec:	18800115 	stw	r2,4(r3)
  e048f0:	008001c4 	movi	r2,7
  e048f4:	19400015 	stw	r5,0(r3)
  e048f8:	dc800e15 	stw	r18,56(sp)
  e048fc:	dc400d15 	stw	r17,52(sp)
  e04900:	2021883a 	mov	r16,r4
  e04904:	14425016 	blt	r2,r17,e05248 <___vfprintf_internal_r+0x1828>
  e04908:	19400204 	addi	r5,r3,8
  e0490c:	d9814717 	ldw	r6,1308(sp)
  e04910:	8c400044 	addi	r17,r17,1
  e04914:	dc400d15 	stw	r17,52(sp)
  e04918:	3107c83a 	sub	r3,r6,r4
  e0491c:	d9014117 	ldw	r4,1284(sp)
  e04920:	90e5883a 	add	r18,r18,r3
  e04924:	28c00115 	stw	r3,4(r5)
  e04928:	8105883a 	add	r2,r16,r4
  e0492c:	28800015 	stw	r2,0(r5)
  e04930:	008001c4 	movi	r2,7
  e04934:	dc800e15 	stw	r18,56(sp)
  e04938:	147f1d16 	blt	r2,r17,e045b0 <___vfprintf_internal_r+0xb90>
  e0493c:	28c00204 	addi	r3,r5,8
  e04940:	003db506 	br	e04018 <___vfprintf_internal_r+0x5f8>
  e04944:	3c000017 	ldw	r16,0(r7)
  e04948:	3c400117 	ldw	r17,4(r7)
  e0494c:	39800204 	addi	r6,r7,8
  e04950:	01000044 	movi	r4,1
  e04954:	d9814015 	stw	r6,1280(sp)
  e04958:	d8000405 	stb	zero,16(sp)
  e0495c:	003ebe06 	br	e04458 <___vfprintf_internal_r+0xa38>
  e04960:	3c000017 	ldw	r16,0(r7)
  e04964:	3c400117 	ldw	r17,4(r7)
  e04968:	38800204 	addi	r2,r7,8
  e0496c:	d8814015 	stw	r2,1280(sp)
  e04970:	003eb706 	br	e04450 <___vfprintf_internal_r+0xa30>
  e04974:	3c000017 	ldw	r16,0(r7)
  e04978:	3c400117 	ldw	r17,4(r7)
  e0497c:	39000204 	addi	r4,r7,8
  e04980:	d9014015 	stw	r4,1280(sp)
  e04984:	0009883a 	mov	r4,zero
  e04988:	d8000405 	stb	zero,16(sp)
  e0498c:	003eb206 	br	e04458 <___vfprintf_internal_r+0xa38>
  e04990:	38c00017 	ldw	r3,0(r7)
  e04994:	39c00104 	addi	r7,r7,4
  e04998:	d8c14a15 	stw	r3,1320(sp)
  e0499c:	1800d10e 	bge	r3,zero,e04ce4 <___vfprintf_internal_r+0x12c4>
  e049a0:	00c7c83a 	sub	r3,zero,r3
  e049a4:	d8c14a15 	stw	r3,1320(sp)
  e049a8:	d9014c17 	ldw	r4,1328(sp)
  e049ac:	b8c00007 	ldb	r3,0(r23)
  e049b0:	21000114 	ori	r4,r4,4
  e049b4:	d9014c15 	stw	r4,1328(sp)
  e049b8:	003c9806 	br	e03c1c <___vfprintf_internal_r+0x1fc>
  e049bc:	d9814c17 	ldw	r6,1328(sp)
  e049c0:	3080080c 	andi	r2,r6,32
  e049c4:	1001f026 	beq	r2,zero,e05188 <___vfprintf_internal_r+0x1768>
  e049c8:	d9014b17 	ldw	r4,1324(sp)
  e049cc:	38800017 	ldw	r2,0(r7)
  e049d0:	39c00104 	addi	r7,r7,4
  e049d4:	d9c14015 	stw	r7,1280(sp)
  e049d8:	2007d7fa 	srai	r3,r4,31
  e049dc:	d9c14017 	ldw	r7,1280(sp)
  e049e0:	11000015 	stw	r4,0(r2)
  e049e4:	10c00115 	stw	r3,4(r2)
  e049e8:	003c6906 	br	e03b90 <___vfprintf_internal_r+0x170>
  e049ec:	b8c00007 	ldb	r3,0(r23)
  e049f0:	00801b04 	movi	r2,108
  e049f4:	18824f26 	beq	r3,r2,e05334 <___vfprintf_internal_r+0x1914>
  e049f8:	d9414c17 	ldw	r5,1328(sp)
  e049fc:	29400414 	ori	r5,r5,16
  e04a00:	d9414c15 	stw	r5,1328(sp)
  e04a04:	003c8506 	br	e03c1c <___vfprintf_internal_r+0x1fc>
  e04a08:	d9814c17 	ldw	r6,1328(sp)
  e04a0c:	b8c00007 	ldb	r3,0(r23)
  e04a10:	31800814 	ori	r6,r6,32
  e04a14:	d9814c15 	stw	r6,1328(sp)
  e04a18:	003c8006 	br	e03c1c <___vfprintf_internal_r+0x1fc>
  e04a1c:	d8814c17 	ldw	r2,1328(sp)
  e04a20:	3c000017 	ldw	r16,0(r7)
  e04a24:	00c01e04 	movi	r3,120
  e04a28:	10800094 	ori	r2,r2,2
  e04a2c:	d8814c15 	stw	r2,1328(sp)
  e04a30:	39c00104 	addi	r7,r7,4
  e04a34:	01403874 	movhi	r5,225
  e04a38:	29439604 	addi	r5,r5,3672
  e04a3c:	00800c04 	movi	r2,48
  e04a40:	0023883a 	mov	r17,zero
  e04a44:	01000084 	movi	r4,2
  e04a48:	d9c14015 	stw	r7,1280(sp)
  e04a4c:	d8c14d15 	stw	r3,1332(sp)
  e04a50:	d9414415 	stw	r5,1296(sp)
  e04a54:	d8800445 	stb	r2,17(sp)
  e04a58:	d8c00485 	stb	r3,18(sp)
  e04a5c:	d8000405 	stb	zero,16(sp)
  e04a60:	003e7d06 	br	e04458 <___vfprintf_internal_r+0xa38>
  e04a64:	d8814c17 	ldw	r2,1328(sp)
  e04a68:	b8c00007 	ldb	r3,0(r23)
  e04a6c:	10801014 	ori	r2,r2,64
  e04a70:	d8814c15 	stw	r2,1328(sp)
  e04a74:	003c6906 	br	e03c1c <___vfprintf_internal_r+0x1fc>
  e04a78:	d9414c17 	ldw	r5,1328(sp)
  e04a7c:	2880020c 	andi	r2,r5,8
  e04a80:	1001df26 	beq	r2,zero,e05200 <___vfprintf_internal_r+0x17e0>
  e04a84:	39800017 	ldw	r6,0(r7)
  e04a88:	38800204 	addi	r2,r7,8
  e04a8c:	d8814015 	stw	r2,1280(sp)
  e04a90:	d9814215 	stw	r6,1288(sp)
  e04a94:	39c00117 	ldw	r7,4(r7)
  e04a98:	d9c14315 	stw	r7,1292(sp)
  e04a9c:	d9014217 	ldw	r4,1288(sp)
  e04aa0:	d9414317 	ldw	r5,1292(sp)
  e04aa4:	0e0a3c00 	call	e0a3c0 <__isinfd>
  e04aa8:	10021726 	beq	r2,zero,e05308 <___vfprintf_internal_r+0x18e8>
  e04aac:	d9014217 	ldw	r4,1288(sp)
  e04ab0:	d9414317 	ldw	r5,1292(sp)
  e04ab4:	000d883a 	mov	r6,zero
  e04ab8:	000f883a 	mov	r7,zero
  e04abc:	0e0bc240 	call	e0bc24 <__ltdf2>
  e04ac0:	1002ca16 	blt	r2,zero,e055ec <___vfprintf_internal_r+0x1bcc>
  e04ac4:	d9414d17 	ldw	r5,1332(sp)
  e04ac8:	008011c4 	movi	r2,71
  e04acc:	11420a16 	blt	r2,r5,e052f8 <___vfprintf_internal_r+0x18d8>
  e04ad0:	01803874 	movhi	r6,225
  e04ad4:	31839b04 	addi	r6,r6,3692
  e04ad8:	d9814115 	stw	r6,1284(sp)
  e04adc:	d9014c17 	ldw	r4,1328(sp)
  e04ae0:	00c000c4 	movi	r3,3
  e04ae4:	00bfdfc4 	movi	r2,-129
  e04ae8:	2088703a 	and	r4,r4,r2
  e04aec:	180f883a 	mov	r7,r3
  e04af0:	d8c14515 	stw	r3,1300(sp)
  e04af4:	d9014c15 	stw	r4,1328(sp)
  e04af8:	d8014615 	stw	zero,1304(sp)
  e04afc:	003e6a06 	br	e044a8 <___vfprintf_internal_r+0xa88>
  e04b00:	38800017 	ldw	r2,0(r7)
  e04b04:	00c00044 	movi	r3,1
  e04b08:	39c00104 	addi	r7,r7,4
  e04b0c:	d9c14015 	stw	r7,1280(sp)
  e04b10:	d9000f04 	addi	r4,sp,60
  e04b14:	180f883a 	mov	r7,r3
  e04b18:	d8c14515 	stw	r3,1300(sp)
  e04b1c:	d9014115 	stw	r4,1284(sp)
  e04b20:	d8800f05 	stb	r2,60(sp)
  e04b24:	d8000405 	stb	zero,16(sp)
  e04b28:	003cac06 	br	e03ddc <___vfprintf_internal_r+0x3bc>
  e04b2c:	01403874 	movhi	r5,225
  e04b30:	2943a104 	addi	r5,r5,3716
  e04b34:	d9414415 	stw	r5,1296(sp)
  e04b38:	d9814c17 	ldw	r6,1328(sp)
  e04b3c:	3080080c 	andi	r2,r6,32
  e04b40:	1000f926 	beq	r2,zero,e04f28 <___vfprintf_internal_r+0x1508>
  e04b44:	3c000017 	ldw	r16,0(r7)
  e04b48:	3c400117 	ldw	r17,4(r7)
  e04b4c:	38800204 	addi	r2,r7,8
  e04b50:	d8814015 	stw	r2,1280(sp)
  e04b54:	d9414c17 	ldw	r5,1328(sp)
  e04b58:	2880004c 	andi	r2,r5,1
  e04b5c:	1005003a 	cmpeq	r2,r2,zero
  e04b60:	1000b31e 	bne	r2,zero,e04e30 <___vfprintf_internal_r+0x1410>
  e04b64:	8444b03a 	or	r2,r16,r17
  e04b68:	1000b126 	beq	r2,zero,e04e30 <___vfprintf_internal_r+0x1410>
  e04b6c:	d9814d17 	ldw	r6,1332(sp)
  e04b70:	29400094 	ori	r5,r5,2
  e04b74:	00800c04 	movi	r2,48
  e04b78:	01000084 	movi	r4,2
  e04b7c:	d9414c15 	stw	r5,1328(sp)
  e04b80:	d8800445 	stb	r2,17(sp)
  e04b84:	d9800485 	stb	r6,18(sp)
  e04b88:	d8000405 	stb	zero,16(sp)
  e04b8c:	003e3206 	br	e04458 <___vfprintf_internal_r+0xa38>
  e04b90:	01803874 	movhi	r6,225
  e04b94:	31839604 	addi	r6,r6,3672
  e04b98:	d9814415 	stw	r6,1296(sp)
  e04b9c:	003fe606 	br	e04b38 <___vfprintf_internal_r+0x1118>
  e04ba0:	00800ac4 	movi	r2,43
  e04ba4:	d8800405 	stb	r2,16(sp)
  e04ba8:	b8c00007 	ldb	r3,0(r23)
  e04bac:	003c1b06 	br	e03c1c <___vfprintf_internal_r+0x1fc>
  e04bb0:	d8814c17 	ldw	r2,1328(sp)
  e04bb4:	b8c00007 	ldb	r3,0(r23)
  e04bb8:	10800054 	ori	r2,r2,1
  e04bbc:	d8814c15 	stw	r2,1328(sp)
  e04bc0:	003c1606 	br	e03c1c <___vfprintf_internal_r+0x1fc>
  e04bc4:	d8800407 	ldb	r2,16(sp)
  e04bc8:	1000461e 	bne	r2,zero,e04ce4 <___vfprintf_internal_r+0x12c4>
  e04bcc:	00800804 	movi	r2,32
  e04bd0:	d8800405 	stb	r2,16(sp)
  e04bd4:	b8c00007 	ldb	r3,0(r23)
  e04bd8:	003c1006 	br	e03c1c <___vfprintf_internal_r+0x1fc>
  e04bdc:	d9814c17 	ldw	r6,1328(sp)
  e04be0:	b8c00007 	ldb	r3,0(r23)
  e04be4:	31800214 	ori	r6,r6,8
  e04be8:	d9814c15 	stw	r6,1328(sp)
  e04bec:	003c0b06 	br	e03c1c <___vfprintf_internal_r+0x1fc>
  e04bf0:	0007883a 	mov	r3,zero
  e04bf4:	01000244 	movi	r4,9
  e04bf8:	188002a4 	muli	r2,r3,10
  e04bfc:	b8c00007 	ldb	r3,0(r23)
  e04c00:	d9814d17 	ldw	r6,1332(sp)
  e04c04:	bdc00044 	addi	r23,r23,1
  e04c08:	d8c14d15 	stw	r3,1332(sp)
  e04c0c:	d9414d17 	ldw	r5,1332(sp)
  e04c10:	3085883a 	add	r2,r6,r2
  e04c14:	10fff404 	addi	r3,r2,-48
  e04c18:	28bff404 	addi	r2,r5,-48
  e04c1c:	20bff62e 	bgeu	r4,r2,e04bf8 <___vfprintf_internal_r+0x11d8>
  e04c20:	d8c14a15 	stw	r3,1320(sp)
  e04c24:	003bff06 	br	e03c24 <___vfprintf_internal_r+0x204>
  e04c28:	d9414c17 	ldw	r5,1328(sp)
  e04c2c:	b8c00007 	ldb	r3,0(r23)
  e04c30:	29402014 	ori	r5,r5,128
  e04c34:	d9414c15 	stw	r5,1328(sp)
  e04c38:	003bf806 	br	e03c1c <___vfprintf_internal_r+0x1fc>
  e04c3c:	b8c00007 	ldb	r3,0(r23)
  e04c40:	00800a84 	movi	r2,42
  e04c44:	bdc00044 	addi	r23,r23,1
  e04c48:	18831526 	beq	r3,r2,e058a0 <___vfprintf_internal_r+0x1e80>
  e04c4c:	d8c14d15 	stw	r3,1332(sp)
  e04c50:	18bff404 	addi	r2,r3,-48
  e04c54:	00c00244 	movi	r3,9
  e04c58:	18827836 	bltu	r3,r2,e0563c <___vfprintf_internal_r+0x1c1c>
  e04c5c:	000d883a 	mov	r6,zero
  e04c60:	308002a4 	muli	r2,r6,10
  e04c64:	b9800007 	ldb	r6,0(r23)
  e04c68:	d9414d17 	ldw	r5,1332(sp)
  e04c6c:	bdc00044 	addi	r23,r23,1
  e04c70:	d9814d15 	stw	r6,1332(sp)
  e04c74:	d9014d17 	ldw	r4,1332(sp)
  e04c78:	1145883a 	add	r2,r2,r5
  e04c7c:	11bff404 	addi	r6,r2,-48
  e04c80:	20bff404 	addi	r2,r4,-48
  e04c84:	18bff62e 	bgeu	r3,r2,e04c60 <___vfprintf_internal_r+0x1240>
  e04c88:	3027883a 	mov	r19,r6
  e04c8c:	303be50e 	bge	r6,zero,e03c24 <___vfprintf_internal_r+0x204>
  e04c90:	04ffffc4 	movi	r19,-1
  e04c94:	003be306 	br	e03c24 <___vfprintf_internal_r+0x204>
  e04c98:	d8000405 	stb	zero,16(sp)
  e04c9c:	39800017 	ldw	r6,0(r7)
  e04ca0:	39c00104 	addi	r7,r7,4
  e04ca4:	d9c14015 	stw	r7,1280(sp)
  e04ca8:	d9814115 	stw	r6,1284(sp)
  e04cac:	3001c926 	beq	r6,zero,e053d4 <___vfprintf_internal_r+0x19b4>
  e04cb0:	98000e16 	blt	r19,zero,e04cec <___vfprintf_internal_r+0x12cc>
  e04cb4:	d9014117 	ldw	r4,1284(sp)
  e04cb8:	000b883a 	mov	r5,zero
  e04cbc:	980d883a 	mov	r6,r19
  e04cc0:	0e08adc0 	call	e08adc <memchr>
  e04cc4:	10025926 	beq	r2,zero,e0562c <___vfprintf_internal_r+0x1c0c>
  e04cc8:	d8c14117 	ldw	r3,1284(sp)
  e04ccc:	10cfc83a 	sub	r7,r2,r3
  e04cd0:	99c19e16 	blt	r19,r7,e0534c <___vfprintf_internal_r+0x192c>
  e04cd4:	d9c14515 	stw	r7,1300(sp)
  e04cd8:	38000916 	blt	r7,zero,e04d00 <___vfprintf_internal_r+0x12e0>
  e04cdc:	d8014615 	stw	zero,1304(sp)
  e04ce0:	003df106 	br	e044a8 <___vfprintf_internal_r+0xa88>
  e04ce4:	b8c00007 	ldb	r3,0(r23)
  e04ce8:	003bcc06 	br	e03c1c <___vfprintf_internal_r+0x1fc>
  e04cec:	d9014117 	ldw	r4,1284(sp)
  e04cf0:	0e039540 	call	e03954 <strlen>
  e04cf4:	d8814515 	stw	r2,1300(sp)
  e04cf8:	100f883a 	mov	r7,r2
  e04cfc:	103ff70e 	bge	r2,zero,e04cdc <___vfprintf_internal_r+0x12bc>
  e04d00:	d8014515 	stw	zero,1300(sp)
  e04d04:	d8014615 	stw	zero,1304(sp)
  e04d08:	003de706 	br	e044a8 <___vfprintf_internal_r+0xa88>
  e04d0c:	20c03fcc 	andi	r3,r4,255
  e04d10:	00800044 	movi	r2,1
  e04d14:	18802d26 	beq	r3,r2,e04dcc <___vfprintf_internal_r+0x13ac>
  e04d18:	18800e36 	bltu	r3,r2,e04d54 <___vfprintf_internal_r+0x1334>
  e04d1c:	00800084 	movi	r2,2
  e04d20:	1880fa26 	beq	r3,r2,e0510c <___vfprintf_internal_r+0x16ec>
  e04d24:	01003874 	movhi	r4,225
  e04d28:	2103a604 	addi	r4,r4,3736
  e04d2c:	0e039540 	call	e03954 <strlen>
  e04d30:	100f883a 	mov	r7,r2
  e04d34:	dcc14515 	stw	r19,1300(sp)
  e04d38:	9880010e 	bge	r19,r2,e04d40 <___vfprintf_internal_r+0x1320>
  e04d3c:	d8814515 	stw	r2,1300(sp)
  e04d40:	00803874 	movhi	r2,225
  e04d44:	1083a604 	addi	r2,r2,3736
  e04d48:	dcc14615 	stw	r19,1304(sp)
  e04d4c:	d8814115 	stw	r2,1284(sp)
  e04d50:	003dd506 	br	e044a8 <___vfprintf_internal_r+0xa88>
  e04d54:	d9401904 	addi	r5,sp,100
  e04d58:	dd000f04 	addi	r20,sp,60
  e04d5c:	d9414115 	stw	r5,1284(sp)
  e04d60:	880a977a 	slli	r5,r17,29
  e04d64:	d9814117 	ldw	r6,1284(sp)
  e04d68:	8004d0fa 	srli	r2,r16,3
  e04d6c:	8806d0fa 	srli	r3,r17,3
  e04d70:	810001cc 	andi	r4,r16,7
  e04d74:	2884b03a 	or	r2,r5,r2
  e04d78:	31bfffc4 	addi	r6,r6,-1
  e04d7c:	21000c04 	addi	r4,r4,48
  e04d80:	d9814115 	stw	r6,1284(sp)
  e04d84:	10cab03a 	or	r5,r2,r3
  e04d88:	31000005 	stb	r4,0(r6)
  e04d8c:	1021883a 	mov	r16,r2
  e04d90:	1823883a 	mov	r17,r3
  e04d94:	283ff21e 	bne	r5,zero,e04d60 <___vfprintf_internal_r+0x1340>
  e04d98:	d8c14c17 	ldw	r3,1328(sp)
  e04d9c:	1880004c 	andi	r2,r3,1
  e04da0:	1005003a 	cmpeq	r2,r2,zero
  e04da4:	103db91e 	bne	r2,zero,e0448c <___vfprintf_internal_r+0xa6c>
  e04da8:	20803fcc 	andi	r2,r4,255
  e04dac:	1080201c 	xori	r2,r2,128
  e04db0:	10bfe004 	addi	r2,r2,-128
  e04db4:	00c00c04 	movi	r3,48
  e04db8:	10fdb426 	beq	r2,r3,e0448c <___vfprintf_internal_r+0xa6c>
  e04dbc:	31bfffc4 	addi	r6,r6,-1
  e04dc0:	d9814115 	stw	r6,1284(sp)
  e04dc4:	30c00005 	stb	r3,0(r6)
  e04dc8:	003db006 	br	e0448c <___vfprintf_internal_r+0xa6c>
  e04dcc:	88800068 	cmpgeui	r2,r17,1
  e04dd0:	10002c1e 	bne	r2,zero,e04e84 <___vfprintf_internal_r+0x1464>
  e04dd4:	8800021e 	bne	r17,zero,e04de0 <___vfprintf_internal_r+0x13c0>
  e04dd8:	00800244 	movi	r2,9
  e04ddc:	14002936 	bltu	r2,r16,e04e84 <___vfprintf_internal_r+0x1464>
  e04de0:	d90018c4 	addi	r4,sp,99
  e04de4:	dd000f04 	addi	r20,sp,60
  e04de8:	d9014115 	stw	r4,1284(sp)
  e04dec:	d9014117 	ldw	r4,1284(sp)
  e04df0:	80800c04 	addi	r2,r16,48
  e04df4:	20800005 	stb	r2,0(r4)
  e04df8:	003da406 	br	e0448c <___vfprintf_internal_r+0xa6c>
  e04dfc:	dc400d17 	ldw	r17,52(sp)
  e04e00:	07003874 	movhi	fp,225
  e04e04:	e703ac84 	addi	fp,fp,3762
  e04e08:	9425883a 	add	r18,r18,r16
  e04e0c:	8c400044 	addi	r17,r17,1
  e04e10:	008001c4 	movi	r2,7
  e04e14:	1f000015 	stw	fp,0(r3)
  e04e18:	1c000115 	stw	r16,4(r3)
  e04e1c:	dc800e15 	stw	r18,56(sp)
  e04e20:	dc400d15 	stw	r17,52(sp)
  e04e24:	147de216 	blt	r2,r17,e045b0 <___vfprintf_internal_r+0xb90>
  e04e28:	18c00204 	addi	r3,r3,8
  e04e2c:	003c7a06 	br	e04018 <___vfprintf_internal_r+0x5f8>
  e04e30:	01000084 	movi	r4,2
  e04e34:	d8000405 	stb	zero,16(sp)
  e04e38:	003d8706 	br	e04458 <___vfprintf_internal_r+0xa38>
  e04e3c:	d9814c17 	ldw	r6,1328(sp)
  e04e40:	30c4703a 	and	r2,r6,r3
  e04e44:	1005003a 	cmpeq	r2,r2,zero
  e04e48:	103cb926 	beq	r2,zero,e04130 <___vfprintf_internal_r+0x710>
  e04e4c:	d9014117 	ldw	r4,1284(sp)
  e04e50:	94800044 	addi	r18,r18,1
  e04e54:	8c400044 	addi	r17,r17,1
  e04e58:	008001c4 	movi	r2,7
  e04e5c:	a9000015 	stw	r4,0(r21)
  e04e60:	a8c00115 	stw	r3,4(r21)
  e04e64:	dc800e15 	stw	r18,56(sp)
  e04e68:	dc400d15 	stw	r17,52(sp)
  e04e6c:	147e6616 	blt	r2,r17,e04808 <___vfprintf_internal_r+0xde8>
  e04e70:	acc00204 	addi	r19,r21,8
  e04e74:	003cd706 	br	e041d4 <___vfprintf_internal_r+0x7b4>
  e04e78:	07003874 	movhi	fp,225
  e04e7c:	e703ac84 	addi	fp,fp,3762
  e04e80:	003c4f06 	br	e03fc0 <___vfprintf_internal_r+0x5a0>
  e04e84:	dd000f04 	addi	r20,sp,60
  e04e88:	dc801904 	addi	r18,sp,100
  e04e8c:	8009883a 	mov	r4,r16
  e04e90:	880b883a 	mov	r5,r17
  e04e94:	01800284 	movi	r6,10
  e04e98:	000f883a 	mov	r7,zero
  e04e9c:	0e0b1180 	call	e0b118 <__umoddi3>
  e04ea0:	12000c04 	addi	r8,r2,48
  e04ea4:	94bfffc4 	addi	r18,r18,-1
  e04ea8:	8009883a 	mov	r4,r16
  e04eac:	880b883a 	mov	r5,r17
  e04eb0:	01800284 	movi	r6,10
  e04eb4:	000f883a 	mov	r7,zero
  e04eb8:	92000005 	stb	r8,0(r18)
  e04ebc:	0e0ab3c0 	call	e0ab3c <__udivdi3>
  e04ec0:	1009883a 	mov	r4,r2
  e04ec4:	1021883a 	mov	r16,r2
  e04ec8:	18800068 	cmpgeui	r2,r3,1
  e04ecc:	1823883a 	mov	r17,r3
  e04ed0:	103fee1e 	bne	r2,zero,e04e8c <___vfprintf_internal_r+0x146c>
  e04ed4:	1800021e 	bne	r3,zero,e04ee0 <___vfprintf_internal_r+0x14c0>
  e04ed8:	00800244 	movi	r2,9
  e04edc:	113feb36 	bltu	r2,r4,e04e8c <___vfprintf_internal_r+0x146c>
  e04ee0:	94bfffc4 	addi	r18,r18,-1
  e04ee4:	dc814115 	stw	r18,1284(sp)
  e04ee8:	003fc006 	br	e04dec <___vfprintf_internal_r+0x13cc>
  e04eec:	d9014c17 	ldw	r4,1328(sp)
  e04ef0:	2080004c 	andi	r2,r4,1
  e04ef4:	10009a1e 	bne	r2,zero,e05160 <___vfprintf_internal_r+0x1740>
  e04ef8:	d9401904 	addi	r5,sp,100
  e04efc:	dd000f04 	addi	r20,sp,60
  e04f00:	d9414115 	stw	r5,1284(sp)
  e04f04:	003d6106 	br	e0448c <___vfprintf_internal_r+0xa6c>
  e04f08:	d9014f17 	ldw	r4,1340(sp)
  e04f0c:	b00b883a 	mov	r5,r22
  e04f10:	d9800c04 	addi	r6,sp,48
  e04f14:	0e039c80 	call	e039c8 <__sprint_r>
  e04f18:	103c791e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e04f1c:	dc800e17 	ldw	r18,56(sp)
  e04f20:	d8c01904 	addi	r3,sp,100
  e04f24:	003cff06 	br	e04324 <___vfprintf_internal_r+0x904>
  e04f28:	d8c14c17 	ldw	r3,1328(sp)
  e04f2c:	1880040c 	andi	r2,r3,16
  e04f30:	1000711e 	bne	r2,zero,e050f8 <___vfprintf_internal_r+0x16d8>
  e04f34:	d9014c17 	ldw	r4,1328(sp)
  e04f38:	2080100c 	andi	r2,r4,64
  e04f3c:	10006e26 	beq	r2,zero,e050f8 <___vfprintf_internal_r+0x16d8>
  e04f40:	3c00000b 	ldhu	r16,0(r7)
  e04f44:	0023883a 	mov	r17,zero
  e04f48:	39c00104 	addi	r7,r7,4
  e04f4c:	d9c14015 	stw	r7,1280(sp)
  e04f50:	003f0006 	br	e04b54 <___vfprintf_internal_r+0x1134>
  e04f54:	dc400d17 	ldw	r17,52(sp)
  e04f58:	07003874 	movhi	fp,225
  e04f5c:	e703ac84 	addi	fp,fp,3762
  e04f60:	9425883a 	add	r18,r18,r16
  e04f64:	8c400044 	addi	r17,r17,1
  e04f68:	008001c4 	movi	r2,7
  e04f6c:	1f000015 	stw	fp,0(r3)
  e04f70:	1c000115 	stw	r16,4(r3)
  e04f74:	dc800e15 	stw	r18,56(sp)
  e04f78:	dc400d15 	stw	r17,52(sp)
  e04f7c:	147d7616 	blt	r2,r17,e04558 <___vfprintf_internal_r+0xb38>
  e04f80:	18c00204 	addi	r3,r3,8
  e04f84:	003d7b06 	br	e04574 <___vfprintf_internal_r+0xb54>
  e04f88:	dc800e17 	ldw	r18,56(sp)
  e04f8c:	dc400d17 	ldw	r17,52(sp)
  e04f90:	07003874 	movhi	fp,225
  e04f94:	e703b084 	addi	fp,fp,3778
  e04f98:	003bc006 	br	e03e9c <___vfprintf_internal_r+0x47c>
  e04f9c:	d9014f17 	ldw	r4,1340(sp)
  e04fa0:	b00b883a 	mov	r5,r22
  e04fa4:	d9800c04 	addi	r6,sp,48
  e04fa8:	0e039c80 	call	e039c8 <__sprint_r>
  e04fac:	103c541e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e04fb0:	dc800e17 	ldw	r18,56(sp)
  e04fb4:	d8c01904 	addi	r3,sp,100
  e04fb8:	003ce906 	br	e04360 <___vfprintf_internal_r+0x940>
  e04fbc:	3c000017 	ldw	r16,0(r7)
  e04fc0:	0009883a 	mov	r4,zero
  e04fc4:	39c00104 	addi	r7,r7,4
  e04fc8:	0023883a 	mov	r17,zero
  e04fcc:	d9c14015 	stw	r7,1280(sp)
  e04fd0:	d8000405 	stb	zero,16(sp)
  e04fd4:	003d2006 	br	e04458 <___vfprintf_internal_r+0xa38>
  e04fd8:	38800017 	ldw	r2,0(r7)
  e04fdc:	39c00104 	addi	r7,r7,4
  e04fe0:	d9c14015 	stw	r7,1280(sp)
  e04fe4:	1023d7fa 	srai	r17,r2,31
  e04fe8:	1021883a 	mov	r16,r2
  e04fec:	003d1806 	br	e04450 <___vfprintf_internal_r+0xa30>
  e04ff0:	3c000017 	ldw	r16,0(r7)
  e04ff4:	01000044 	movi	r4,1
  e04ff8:	39c00104 	addi	r7,r7,4
  e04ffc:	0023883a 	mov	r17,zero
  e05000:	d9c14015 	stw	r7,1280(sp)
  e05004:	d8000405 	stb	zero,16(sp)
  e05008:	003d1306 	br	e04458 <___vfprintf_internal_r+0xa38>
  e0500c:	00803874 	movhi	r2,225
  e05010:	10833004 	addi	r2,r2,3264
  e05014:	94800044 	addi	r18,r18,1
  e05018:	8c400044 	addi	r17,r17,1
  e0501c:	a8800015 	stw	r2,0(r21)
  e05020:	00c00044 	movi	r3,1
  e05024:	008001c4 	movi	r2,7
  e05028:	a8c00115 	stw	r3,4(r21)
  e0502c:	dc800e15 	stw	r18,56(sp)
  e05030:	dc400d15 	stw	r17,52(sp)
  e05034:	1440ca16 	blt	r2,r17,e05360 <___vfprintf_internal_r+0x1940>
  e05038:	a8c00204 	addi	r3,r21,8
  e0503c:	2000061e 	bne	r4,zero,e05058 <___vfprintf_internal_r+0x1638>
  e05040:	d9414717 	ldw	r5,1308(sp)
  e05044:	2800041e 	bne	r5,zero,e05058 <___vfprintf_internal_r+0x1638>
  e05048:	d9814c17 	ldw	r6,1328(sp)
  e0504c:	3080004c 	andi	r2,r6,1
  e05050:	1005003a 	cmpeq	r2,r2,zero
  e05054:	103bf01e 	bne	r2,zero,e04018 <___vfprintf_internal_r+0x5f8>
  e05058:	00800044 	movi	r2,1
  e0505c:	dc400d17 	ldw	r17,52(sp)
  e05060:	18800115 	stw	r2,4(r3)
  e05064:	d8814917 	ldw	r2,1316(sp)
  e05068:	94800044 	addi	r18,r18,1
  e0506c:	8c400044 	addi	r17,r17,1
  e05070:	18800015 	stw	r2,0(r3)
  e05074:	008001c4 	movi	r2,7
  e05078:	dc800e15 	stw	r18,56(sp)
  e0507c:	dc400d15 	stw	r17,52(sp)
  e05080:	1440ca16 	blt	r2,r17,e053ac <___vfprintf_internal_r+0x198c>
  e05084:	18c00204 	addi	r3,r3,8
  e05088:	0121c83a 	sub	r16,zero,r4
  e0508c:	0400500e 	bge	zero,r16,e051d0 <___vfprintf_internal_r+0x17b0>
  e05090:	00800404 	movi	r2,16
  e05094:	1400800e 	bge	r2,r16,e05298 <___vfprintf_internal_r+0x1878>
  e05098:	1027883a 	mov	r19,r2
  e0509c:	07003874 	movhi	fp,225
  e050a0:	e703ac84 	addi	fp,fp,3762
  e050a4:	050001c4 	movi	r20,7
  e050a8:	00000306 	br	e050b8 <___vfprintf_internal_r+0x1698>
  e050ac:	18c00204 	addi	r3,r3,8
  e050b0:	843ffc04 	addi	r16,r16,-16
  e050b4:	9c007a0e 	bge	r19,r16,e052a0 <___vfprintf_internal_r+0x1880>
  e050b8:	94800404 	addi	r18,r18,16
  e050bc:	8c400044 	addi	r17,r17,1
  e050c0:	1f000015 	stw	fp,0(r3)
  e050c4:	1cc00115 	stw	r19,4(r3)
  e050c8:	dc800e15 	stw	r18,56(sp)
  e050cc:	dc400d15 	stw	r17,52(sp)
  e050d0:	a47ff60e 	bge	r20,r17,e050ac <___vfprintf_internal_r+0x168c>
  e050d4:	d9014f17 	ldw	r4,1340(sp)
  e050d8:	b00b883a 	mov	r5,r22
  e050dc:	d9800c04 	addi	r6,sp,48
  e050e0:	0e039c80 	call	e039c8 <__sprint_r>
  e050e4:	103c061e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e050e8:	dc800e17 	ldw	r18,56(sp)
  e050ec:	dc400d17 	ldw	r17,52(sp)
  e050f0:	d8c01904 	addi	r3,sp,100
  e050f4:	003fee06 	br	e050b0 <___vfprintf_internal_r+0x1690>
  e050f8:	3c000017 	ldw	r16,0(r7)
  e050fc:	0023883a 	mov	r17,zero
  e05100:	39c00104 	addi	r7,r7,4
  e05104:	d9c14015 	stw	r7,1280(sp)
  e05108:	003e9206 	br	e04b54 <___vfprintf_internal_r+0x1134>
  e0510c:	d9401904 	addi	r5,sp,100
  e05110:	dd000f04 	addi	r20,sp,60
  e05114:	d9414115 	stw	r5,1284(sp)
  e05118:	d9814417 	ldw	r6,1296(sp)
  e0511c:	880a973a 	slli	r5,r17,28
  e05120:	8004d13a 	srli	r2,r16,4
  e05124:	810003cc 	andi	r4,r16,15
  e05128:	3109883a 	add	r4,r6,r4
  e0512c:	2884b03a 	or	r2,r5,r2
  e05130:	21400003 	ldbu	r5,0(r4)
  e05134:	d9014117 	ldw	r4,1284(sp)
  e05138:	8806d13a 	srli	r3,r17,4
  e0513c:	1021883a 	mov	r16,r2
  e05140:	213fffc4 	addi	r4,r4,-1
  e05144:	d9014115 	stw	r4,1284(sp)
  e05148:	d9814117 	ldw	r6,1284(sp)
  e0514c:	10c8b03a 	or	r4,r2,r3
  e05150:	1823883a 	mov	r17,r3
  e05154:	31400005 	stb	r5,0(r6)
  e05158:	203fef1e 	bne	r4,zero,e05118 <___vfprintf_internal_r+0x16f8>
  e0515c:	003ccb06 	br	e0448c <___vfprintf_internal_r+0xa6c>
  e05160:	00800c04 	movi	r2,48
  e05164:	d98018c4 	addi	r6,sp,99
  e05168:	dd000f04 	addi	r20,sp,60
  e0516c:	d88018c5 	stb	r2,99(sp)
  e05170:	d9814115 	stw	r6,1284(sp)
  e05174:	003cc506 	br	e0448c <___vfprintf_internal_r+0xa6c>
  e05178:	dc400d17 	ldw	r17,52(sp)
  e0517c:	07003874 	movhi	fp,225
  e05180:	e703b084 	addi	fp,fp,3778
  e05184:	003bc706 	br	e040a4 <___vfprintf_internal_r+0x684>
  e05188:	d9414c17 	ldw	r5,1328(sp)
  e0518c:	2880040c 	andi	r2,r5,16
  e05190:	10007c26 	beq	r2,zero,e05384 <___vfprintf_internal_r+0x1964>
  e05194:	38800017 	ldw	r2,0(r7)
  e05198:	39c00104 	addi	r7,r7,4
  e0519c:	d9c14015 	stw	r7,1280(sp)
  e051a0:	d9814b17 	ldw	r6,1324(sp)
  e051a4:	d9c14017 	ldw	r7,1280(sp)
  e051a8:	11800015 	stw	r6,0(r2)
  e051ac:	003a7806 	br	e03b90 <___vfprintf_internal_r+0x170>
  e051b0:	d9014f17 	ldw	r4,1340(sp)
  e051b4:	b00b883a 	mov	r5,r22
  e051b8:	d9800c04 	addi	r6,sp,48
  e051bc:	0e039c80 	call	e039c8 <__sprint_r>
  e051c0:	103bcf1e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e051c4:	dc800e17 	ldw	r18,56(sp)
  e051c8:	dc400d17 	ldw	r17,52(sp)
  e051cc:	d8c01904 	addi	r3,sp,100
  e051d0:	d9014717 	ldw	r4,1308(sp)
  e051d4:	d9414117 	ldw	r5,1284(sp)
  e051d8:	8c400044 	addi	r17,r17,1
  e051dc:	9125883a 	add	r18,r18,r4
  e051e0:	008001c4 	movi	r2,7
  e051e4:	19400015 	stw	r5,0(r3)
  e051e8:	19000115 	stw	r4,4(r3)
  e051ec:	dc800e15 	stw	r18,56(sp)
  e051f0:	dc400d15 	stw	r17,52(sp)
  e051f4:	147cee16 	blt	r2,r17,e045b0 <___vfprintf_internal_r+0xb90>
  e051f8:	18c00204 	addi	r3,r3,8
  e051fc:	003b8606 	br	e04018 <___vfprintf_internal_r+0x5f8>
  e05200:	38c00017 	ldw	r3,0(r7)
  e05204:	39000204 	addi	r4,r7,8
  e05208:	d9014015 	stw	r4,1280(sp)
  e0520c:	d8c14215 	stw	r3,1288(sp)
  e05210:	39c00117 	ldw	r7,4(r7)
  e05214:	d9c14315 	stw	r7,1292(sp)
  e05218:	003e2006 	br	e04a9c <___vfprintf_internal_r+0x107c>
  e0521c:	0005883a 	mov	r2,zero
  e05220:	1409c83a 	sub	r4,r2,r16
  e05224:	1105803a 	cmpltu	r2,r2,r4
  e05228:	044bc83a 	sub	r5,zero,r17
  e0522c:	2885c83a 	sub	r2,r5,r2
  e05230:	2021883a 	mov	r16,r4
  e05234:	1023883a 	mov	r17,r2
  e05238:	01000044 	movi	r4,1
  e0523c:	00800b44 	movi	r2,45
  e05240:	d8800405 	stb	r2,16(sp)
  e05244:	003c8406 	br	e04458 <___vfprintf_internal_r+0xa38>
  e05248:	d9014f17 	ldw	r4,1340(sp)
  e0524c:	b00b883a 	mov	r5,r22
  e05250:	d9800c04 	addi	r6,sp,48
  e05254:	0e039c80 	call	e039c8 <__sprint_r>
  e05258:	103ba91e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e0525c:	dc800e17 	ldw	r18,56(sp)
  e05260:	dc400d17 	ldw	r17,52(sp)
  e05264:	d9000517 	ldw	r4,20(sp)
  e05268:	d9401904 	addi	r5,sp,100
  e0526c:	003da706 	br	e0490c <___vfprintf_internal_r+0xeec>
  e05270:	d9014f17 	ldw	r4,1340(sp)
  e05274:	b00b883a 	mov	r5,r22
  e05278:	d9800c04 	addi	r6,sp,48
  e0527c:	0e039c80 	call	e039c8 <__sprint_r>
  e05280:	103b9f1e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e05284:	dc800e17 	ldw	r18,56(sp)
  e05288:	dc400d17 	ldw	r17,52(sp)
  e0528c:	d9000517 	ldw	r4,20(sp)
  e05290:	d8c01904 	addi	r3,sp,100
  e05294:	003d9106 	br	e048dc <___vfprintf_internal_r+0xebc>
  e05298:	07003874 	movhi	fp,225
  e0529c:	e703ac84 	addi	fp,fp,3762
  e052a0:	9425883a 	add	r18,r18,r16
  e052a4:	8c400044 	addi	r17,r17,1
  e052a8:	008001c4 	movi	r2,7
  e052ac:	1f000015 	stw	fp,0(r3)
  e052b0:	1c000115 	stw	r16,4(r3)
  e052b4:	dc800e15 	stw	r18,56(sp)
  e052b8:	dc400d15 	stw	r17,52(sp)
  e052bc:	147fbc16 	blt	r2,r17,e051b0 <___vfprintf_internal_r+0x1790>
  e052c0:	18c00204 	addi	r3,r3,8
  e052c4:	003fc206 	br	e051d0 <___vfprintf_internal_r+0x17b0>
  e052c8:	d9014f17 	ldw	r4,1340(sp)
  e052cc:	b00b883a 	mov	r5,r22
  e052d0:	d9800c04 	addi	r6,sp,48
  e052d4:	0e039c80 	call	e039c8 <__sprint_r>
  e052d8:	103b891e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e052dc:	dc800e17 	ldw	r18,56(sp)
  e052e0:	d9000517 	ldw	r4,20(sp)
  e052e4:	d8c01904 	addi	r3,sp,100
  e052e8:	003d0206 	br	e046f4 <___vfprintf_internal_r+0xcd4>
  e052ec:	07003874 	movhi	fp,225
  e052f0:	e703ac84 	addi	fp,fp,3762
  e052f4:	003be406 	br	e04288 <___vfprintf_internal_r+0x868>
  e052f8:	00803874 	movhi	r2,225
  e052fc:	10839c04 	addi	r2,r2,3696
  e05300:	d8814115 	stw	r2,1284(sp)
  e05304:	003df506 	br	e04adc <___vfprintf_internal_r+0x10bc>
  e05308:	d9014217 	ldw	r4,1288(sp)
  e0530c:	d9414317 	ldw	r5,1292(sp)
  e05310:	0e0a4000 	call	e0a400 <__isnand>
  e05314:	10003926 	beq	r2,zero,e053fc <___vfprintf_internal_r+0x19dc>
  e05318:	d9414d17 	ldw	r5,1332(sp)
  e0531c:	008011c4 	movi	r2,71
  e05320:	1140ce16 	blt	r2,r5,e0565c <___vfprintf_internal_r+0x1c3c>
  e05324:	01803874 	movhi	r6,225
  e05328:	31839d04 	addi	r6,r6,3700
  e0532c:	d9814115 	stw	r6,1284(sp)
  e05330:	003dea06 	br	e04adc <___vfprintf_internal_r+0x10bc>
  e05334:	d9014c17 	ldw	r4,1328(sp)
  e05338:	bdc00044 	addi	r23,r23,1
  e0533c:	b8c00007 	ldb	r3,0(r23)
  e05340:	21000814 	ori	r4,r4,32
  e05344:	d9014c15 	stw	r4,1328(sp)
  e05348:	003a3406 	br	e03c1c <___vfprintf_internal_r+0x1fc>
  e0534c:	dcc14515 	stw	r19,1300(sp)
  e05350:	98011016 	blt	r19,zero,e05794 <___vfprintf_internal_r+0x1d74>
  e05354:	980f883a 	mov	r7,r19
  e05358:	d8014615 	stw	zero,1304(sp)
  e0535c:	003c5206 	br	e044a8 <___vfprintf_internal_r+0xa88>
  e05360:	d9014f17 	ldw	r4,1340(sp)
  e05364:	b00b883a 	mov	r5,r22
  e05368:	d9800c04 	addi	r6,sp,48
  e0536c:	0e039c80 	call	e039c8 <__sprint_r>
  e05370:	103b631e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e05374:	dc800e17 	ldw	r18,56(sp)
  e05378:	d9000517 	ldw	r4,20(sp)
  e0537c:	d8c01904 	addi	r3,sp,100
  e05380:	003f2e06 	br	e0503c <___vfprintf_internal_r+0x161c>
  e05384:	d8c14c17 	ldw	r3,1328(sp)
  e05388:	1880100c 	andi	r2,r3,64
  e0538c:	1000a026 	beq	r2,zero,e05610 <___vfprintf_internal_r+0x1bf0>
  e05390:	38800017 	ldw	r2,0(r7)
  e05394:	39c00104 	addi	r7,r7,4
  e05398:	d9c14015 	stw	r7,1280(sp)
  e0539c:	d9014b17 	ldw	r4,1324(sp)
  e053a0:	d9c14017 	ldw	r7,1280(sp)
  e053a4:	1100000d 	sth	r4,0(r2)
  e053a8:	0039f906 	br	e03b90 <___vfprintf_internal_r+0x170>
  e053ac:	d9014f17 	ldw	r4,1340(sp)
  e053b0:	b00b883a 	mov	r5,r22
  e053b4:	d9800c04 	addi	r6,sp,48
  e053b8:	0e039c80 	call	e039c8 <__sprint_r>
  e053bc:	103b501e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e053c0:	dc800e17 	ldw	r18,56(sp)
  e053c4:	dc400d17 	ldw	r17,52(sp)
  e053c8:	d9000517 	ldw	r4,20(sp)
  e053cc:	d8c01904 	addi	r3,sp,100
  e053d0:	003f2d06 	br	e05088 <___vfprintf_internal_r+0x1668>
  e053d4:	00800184 	movi	r2,6
  e053d8:	14c09a36 	bltu	r2,r19,e05644 <___vfprintf_internal_r+0x1c24>
  e053dc:	dcc14515 	stw	r19,1300(sp)
  e053e0:	9800010e 	bge	r19,zero,e053e8 <___vfprintf_internal_r+0x19c8>
  e053e4:	d8014515 	stw	zero,1300(sp)
  e053e8:	00803874 	movhi	r2,225
  e053ec:	10839f04 	addi	r2,r2,3708
  e053f0:	980f883a 	mov	r7,r19
  e053f4:	d8814115 	stw	r2,1284(sp)
  e053f8:	003a7806 	br	e03ddc <___vfprintf_internal_r+0x3bc>
  e053fc:	00bfffc4 	movi	r2,-1
  e05400:	9880e226 	beq	r19,r2,e0578c <___vfprintf_internal_r+0x1d6c>
  e05404:	d9414d17 	ldw	r5,1332(sp)
  e05408:	008019c4 	movi	r2,103
  e0540c:	2880dc26 	beq	r5,r2,e05780 <___vfprintf_internal_r+0x1d60>
  e05410:	008011c4 	movi	r2,71
  e05414:	2880da26 	beq	r5,r2,e05780 <___vfprintf_internal_r+0x1d60>
  e05418:	d9414c17 	ldw	r5,1328(sp)
  e0541c:	d9014317 	ldw	r4,1292(sp)
  e05420:	d9814217 	ldw	r6,1288(sp)
  e05424:	29404014 	ori	r5,r5,256
  e05428:	d9414c15 	stw	r5,1328(sp)
  e0542c:	2000cc16 	blt	r4,zero,e05760 <___vfprintf_internal_r+0x1d40>
  e05430:	3021883a 	mov	r16,r6
  e05434:	2023883a 	mov	r17,r4
  e05438:	0039883a 	mov	fp,zero
  e0543c:	d9414d17 	ldw	r5,1332(sp)
  e05440:	00801984 	movi	r2,102
  e05444:	2880b726 	beq	r5,r2,e05724 <___vfprintf_internal_r+0x1d04>
  e05448:	00801184 	movi	r2,70
  e0544c:	2880b526 	beq	r5,r2,e05724 <___vfprintf_internal_r+0x1d04>
  e05450:	00801944 	movi	r2,101
  e05454:	2880c826 	beq	r5,r2,e05778 <___vfprintf_internal_r+0x1d58>
  e05458:	00801144 	movi	r2,69
  e0545c:	2880c626 	beq	r5,r2,e05778 <___vfprintf_internal_r+0x1d58>
  e05460:	9829883a 	mov	r20,r19
  e05464:	d9014f17 	ldw	r4,1340(sp)
  e05468:	d8800504 	addi	r2,sp,20
  e0546c:	880d883a 	mov	r6,r17
  e05470:	d8800115 	stw	r2,4(sp)
  e05474:	d8c00604 	addi	r3,sp,24
  e05478:	d8800704 	addi	r2,sp,28
  e0547c:	800b883a 	mov	r5,r16
  e05480:	01c00084 	movi	r7,2
  e05484:	d8c00215 	stw	r3,8(sp)
  e05488:	d8800315 	stw	r2,12(sp)
  e0548c:	dd000015 	stw	r20,0(sp)
  e05490:	0e05c440 	call	e05c44 <_dtoa_r>
  e05494:	d9814d17 	ldw	r6,1332(sp)
  e05498:	d8814115 	stw	r2,1284(sp)
  e0549c:	008019c4 	movi	r2,103
  e054a0:	30809526 	beq	r6,r2,e056f8 <___vfprintf_internal_r+0x1cd8>
  e054a4:	d8c14d17 	ldw	r3,1332(sp)
  e054a8:	008011c4 	movi	r2,71
  e054ac:	18809226 	beq	r3,r2,e056f8 <___vfprintf_internal_r+0x1cd8>
  e054b0:	d9414117 	ldw	r5,1284(sp)
  e054b4:	d9814d17 	ldw	r6,1332(sp)
  e054b8:	00801984 	movi	r2,102
  e054bc:	2d25883a 	add	r18,r5,r20
  e054c0:	30808626 	beq	r6,r2,e056dc <___vfprintf_internal_r+0x1cbc>
  e054c4:	00801184 	movi	r2,70
  e054c8:	30808426 	beq	r6,r2,e056dc <___vfprintf_internal_r+0x1cbc>
  e054cc:	000d883a 	mov	r6,zero
  e054d0:	000f883a 	mov	r7,zero
  e054d4:	880b883a 	mov	r5,r17
  e054d8:	8009883a 	mov	r4,r16
  e054dc:	0e0ba8c0 	call	e0ba8c <__eqdf2>
  e054e0:	1000751e 	bne	r2,zero,e056b8 <___vfprintf_internal_r+0x1c98>
  e054e4:	9005883a 	mov	r2,r18
  e054e8:	dc800715 	stw	r18,28(sp)
  e054ec:	d9014117 	ldw	r4,1284(sp)
  e054f0:	d9414d17 	ldw	r5,1332(sp)
  e054f4:	00c019c4 	movi	r3,103
  e054f8:	1125c83a 	sub	r18,r2,r4
  e054fc:	28c06826 	beq	r5,r3,e056a0 <___vfprintf_internal_r+0x1c80>
  e05500:	008011c4 	movi	r2,71
  e05504:	28806626 	beq	r5,r2,e056a0 <___vfprintf_internal_r+0x1c80>
  e05508:	d9000517 	ldw	r4,20(sp)
  e0550c:	d8c14d17 	ldw	r3,1332(sp)
  e05510:	00801944 	movi	r2,101
  e05514:	10c05516 	blt	r2,r3,e0566c <___vfprintf_internal_r+0x1c4c>
  e05518:	213fffc4 	addi	r4,r4,-1
  e0551c:	d9000515 	stw	r4,20(sp)
  e05520:	d8c00805 	stb	r3,32(sp)
  e05524:	2021883a 	mov	r16,r4
  e05528:	2000c116 	blt	r4,zero,e05830 <___vfprintf_internal_r+0x1e10>
  e0552c:	00800ac4 	movi	r2,43
  e05530:	d8800845 	stb	r2,33(sp)
  e05534:	00800244 	movi	r2,9
  e05538:	1400af0e 	bge	r2,r16,e057f8 <___vfprintf_internal_r+0x1dd8>
  e0553c:	1027883a 	mov	r19,r2
  e05540:	dc400b84 	addi	r17,sp,46
  e05544:	8009883a 	mov	r4,r16
  e05548:	01400284 	movi	r5,10
  e0554c:	0e0c0ec0 	call	e0c0ec <__modsi3>
  e05550:	10800c04 	addi	r2,r2,48
  e05554:	8c7fffc4 	addi	r17,r17,-1
  e05558:	8009883a 	mov	r4,r16
  e0555c:	01400284 	movi	r5,10
  e05560:	88800005 	stb	r2,0(r17)
  e05564:	0e0c08c0 	call	e0c08c <__divsi3>
  e05568:	1021883a 	mov	r16,r2
  e0556c:	98bff516 	blt	r19,r2,e05544 <___vfprintf_internal_r+0x1b24>
  e05570:	10c00c04 	addi	r3,r2,48
  e05574:	d88009c4 	addi	r2,sp,39
  e05578:	108001c4 	addi	r2,r2,7
  e0557c:	897fffc4 	addi	r5,r17,-1
  e05580:	88ffffc5 	stb	r3,-1(r17)
  e05584:	2880a72e 	bgeu	r5,r2,e05824 <___vfprintf_internal_r+0x1e04>
  e05588:	1009883a 	mov	r4,r2
  e0558c:	d9800804 	addi	r6,sp,32
  e05590:	d8c00884 	addi	r3,sp,34
  e05594:	28800003 	ldbu	r2,0(r5)
  e05598:	29400044 	addi	r5,r5,1
  e0559c:	18800005 	stb	r2,0(r3)
  e055a0:	18c00044 	addi	r3,r3,1
  e055a4:	293ffb36 	bltu	r5,r4,e05594 <___vfprintf_internal_r+0x1b74>
  e055a8:	1987c83a 	sub	r3,r3,r6
  e055ac:	00800044 	movi	r2,1
  e055b0:	d8c14815 	stw	r3,1312(sp)
  e055b4:	90cf883a 	add	r7,r18,r3
  e055b8:	1480960e 	bge	r2,r18,e05814 <___vfprintf_internal_r+0x1df4>
  e055bc:	39c00044 	addi	r7,r7,1
  e055c0:	d9c14515 	stw	r7,1300(sp)
  e055c4:	38003416 	blt	r7,zero,e05698 <___vfprintf_internal_r+0x1c78>
  e055c8:	e0803fcc 	andi	r2,fp,255
  e055cc:	1080201c 	xori	r2,r2,128
  e055d0:	10bfe004 	addi	r2,r2,-128
  e055d4:	10004e26 	beq	r2,zero,e05710 <___vfprintf_internal_r+0x1cf0>
  e055d8:	00800b44 	movi	r2,45
  e055dc:	dc814715 	stw	r18,1308(sp)
  e055e0:	d8014615 	stw	zero,1304(sp)
  e055e4:	d8800405 	stb	r2,16(sp)
  e055e8:	003bb106 	br	e044b0 <___vfprintf_internal_r+0xa90>
  e055ec:	00800b44 	movi	r2,45
  e055f0:	d8800405 	stb	r2,16(sp)
  e055f4:	003d3306 	br	e04ac4 <___vfprintf_internal_r+0x10a4>
  e055f8:	d9014f17 	ldw	r4,1340(sp)
  e055fc:	b00b883a 	mov	r5,r22
  e05600:	d9800c04 	addi	r6,sp,48
  e05604:	0e039c80 	call	e039c8 <__sprint_r>
  e05608:	103abd1e 	bne	r2,zero,e04100 <___vfprintf_internal_r+0x6e0>
  e0560c:	003abb06 	br	e040fc <___vfprintf_internal_r+0x6dc>
  e05610:	38800017 	ldw	r2,0(r7)
  e05614:	39c00104 	addi	r7,r7,4
  e05618:	d9c14015 	stw	r7,1280(sp)
  e0561c:	d9414b17 	ldw	r5,1324(sp)
  e05620:	d9c14017 	ldw	r7,1280(sp)
  e05624:	11400015 	stw	r5,0(r2)
  e05628:	00395906 	br	e03b90 <___vfprintf_internal_r+0x170>
  e0562c:	980f883a 	mov	r7,r19
  e05630:	dcc14515 	stw	r19,1300(sp)
  e05634:	d8014615 	stw	zero,1304(sp)
  e05638:	003b9b06 	br	e044a8 <___vfprintf_internal_r+0xa88>
  e0563c:	0027883a 	mov	r19,zero
  e05640:	00397806 	br	e03c24 <___vfprintf_internal_r+0x204>
  e05644:	00c03874 	movhi	r3,225
  e05648:	18c39f04 	addi	r3,r3,3708
  e0564c:	100f883a 	mov	r7,r2
  e05650:	d8814515 	stw	r2,1300(sp)
  e05654:	d8c14115 	stw	r3,1284(sp)
  e05658:	0039e006 	br	e03ddc <___vfprintf_internal_r+0x3bc>
  e0565c:	00803874 	movhi	r2,225
  e05660:	10839e04 	addi	r2,r2,3704
  e05664:	d8814115 	stw	r2,1284(sp)
  e05668:	003d1c06 	br	e04adc <___vfprintf_internal_r+0x10bc>
  e0566c:	d9414d17 	ldw	r5,1332(sp)
  e05670:	00801984 	movi	r2,102
  e05674:	28804926 	beq	r5,r2,e0579c <___vfprintf_internal_r+0x1d7c>
  e05678:	200f883a 	mov	r7,r4
  e0567c:	24805716 	blt	r4,r18,e057dc <___vfprintf_internal_r+0x1dbc>
  e05680:	d9414c17 	ldw	r5,1328(sp)
  e05684:	2880004c 	andi	r2,r5,1
  e05688:	10000126 	beq	r2,zero,e05690 <___vfprintf_internal_r+0x1c70>
  e0568c:	21c00044 	addi	r7,r4,1
  e05690:	d9c14515 	stw	r7,1300(sp)
  e05694:	383fcc0e 	bge	r7,zero,e055c8 <___vfprintf_internal_r+0x1ba8>
  e05698:	d8014515 	stw	zero,1300(sp)
  e0569c:	003fca06 	br	e055c8 <___vfprintf_internal_r+0x1ba8>
  e056a0:	d9000517 	ldw	r4,20(sp)
  e056a4:	00bfff04 	movi	r2,-4
  e056a8:	1100480e 	bge	r2,r4,e057cc <___vfprintf_internal_r+0x1dac>
  e056ac:	99004716 	blt	r19,r4,e057cc <___vfprintf_internal_r+0x1dac>
  e056b0:	d8c14d15 	stw	r3,1332(sp)
  e056b4:	003ff006 	br	e05678 <___vfprintf_internal_r+0x1c58>
  e056b8:	d8800717 	ldw	r2,28(sp)
  e056bc:	14bf8b2e 	bgeu	r2,r18,e054ec <___vfprintf_internal_r+0x1acc>
  e056c0:	9007883a 	mov	r3,r18
  e056c4:	01000c04 	movi	r4,48
  e056c8:	11000005 	stb	r4,0(r2)
  e056cc:	10800044 	addi	r2,r2,1
  e056d0:	d8800715 	stw	r2,28(sp)
  e056d4:	18bffc1e 	bne	r3,r2,e056c8 <___vfprintf_internal_r+0x1ca8>
  e056d8:	003f8406 	br	e054ec <___vfprintf_internal_r+0x1acc>
  e056dc:	d8814117 	ldw	r2,1284(sp)
  e056e0:	10c00007 	ldb	r3,0(r2)
  e056e4:	00800c04 	movi	r2,48
  e056e8:	18805b26 	beq	r3,r2,e05858 <___vfprintf_internal_r+0x1e38>
  e056ec:	d9000517 	ldw	r4,20(sp)
  e056f0:	9125883a 	add	r18,r18,r4
  e056f4:	003f7506 	br	e054cc <___vfprintf_internal_r+0x1aac>
  e056f8:	d9014c17 	ldw	r4,1328(sp)
  e056fc:	2080004c 	andi	r2,r4,1
  e05700:	1005003a 	cmpeq	r2,r2,zero
  e05704:	103f6a26 	beq	r2,zero,e054b0 <___vfprintf_internal_r+0x1a90>
  e05708:	d8800717 	ldw	r2,28(sp)
  e0570c:	003f7706 	br	e054ec <___vfprintf_internal_r+0x1acc>
  e05710:	d9c14515 	stw	r7,1300(sp)
  e05714:	38004d16 	blt	r7,zero,e0584c <___vfprintf_internal_r+0x1e2c>
  e05718:	dc814715 	stw	r18,1308(sp)
  e0571c:	d8014615 	stw	zero,1304(sp)
  e05720:	003b6106 	br	e044a8 <___vfprintf_internal_r+0xa88>
  e05724:	d9014f17 	ldw	r4,1340(sp)
  e05728:	d8800504 	addi	r2,sp,20
  e0572c:	d8800115 	stw	r2,4(sp)
  e05730:	d8c00604 	addi	r3,sp,24
  e05734:	d8800704 	addi	r2,sp,28
  e05738:	800b883a 	mov	r5,r16
  e0573c:	880d883a 	mov	r6,r17
  e05740:	01c000c4 	movi	r7,3
  e05744:	d8c00215 	stw	r3,8(sp)
  e05748:	d8800315 	stw	r2,12(sp)
  e0574c:	dcc00015 	stw	r19,0(sp)
  e05750:	9829883a 	mov	r20,r19
  e05754:	0e05c440 	call	e05c44 <_dtoa_r>
  e05758:	d8814115 	stw	r2,1284(sp)
  e0575c:	003f5106 	br	e054a4 <___vfprintf_internal_r+0x1a84>
  e05760:	d8c14217 	ldw	r3,1288(sp)
  e05764:	d9014317 	ldw	r4,1292(sp)
  e05768:	07000b44 	movi	fp,45
  e0576c:	1821883a 	mov	r16,r3
  e05770:	2460003c 	xorhi	r17,r4,32768
  e05774:	003f3106 	br	e0543c <___vfprintf_internal_r+0x1a1c>
  e05778:	9d000044 	addi	r20,r19,1
  e0577c:	003f3906 	br	e05464 <___vfprintf_internal_r+0x1a44>
  e05780:	983f251e 	bne	r19,zero,e05418 <___vfprintf_internal_r+0x19f8>
  e05784:	04c00044 	movi	r19,1
  e05788:	003f2306 	br	e05418 <___vfprintf_internal_r+0x19f8>
  e0578c:	04c00184 	movi	r19,6
  e05790:	003f2106 	br	e05418 <___vfprintf_internal_r+0x19f8>
  e05794:	d8014515 	stw	zero,1300(sp)
  e05798:	003eee06 	br	e05354 <___vfprintf_internal_r+0x1934>
  e0579c:	200f883a 	mov	r7,r4
  e057a0:	0100370e 	bge	zero,r4,e05880 <___vfprintf_internal_r+0x1e60>
  e057a4:	9800031e 	bne	r19,zero,e057b4 <___vfprintf_internal_r+0x1d94>
  e057a8:	d9814c17 	ldw	r6,1328(sp)
  e057ac:	3080004c 	andi	r2,r6,1
  e057b0:	103fb726 	beq	r2,zero,e05690 <___vfprintf_internal_r+0x1c70>
  e057b4:	20800044 	addi	r2,r4,1
  e057b8:	98a7883a 	add	r19,r19,r2
  e057bc:	dcc14515 	stw	r19,1300(sp)
  e057c0:	980f883a 	mov	r7,r19
  e057c4:	983f800e 	bge	r19,zero,e055c8 <___vfprintf_internal_r+0x1ba8>
  e057c8:	003fb306 	br	e05698 <___vfprintf_internal_r+0x1c78>
  e057cc:	d9814d17 	ldw	r6,1332(sp)
  e057d0:	31bfff84 	addi	r6,r6,-2
  e057d4:	d9814d15 	stw	r6,1332(sp)
  e057d8:	003f4c06 	br	e0550c <___vfprintf_internal_r+0x1aec>
  e057dc:	0100180e 	bge	zero,r4,e05840 <___vfprintf_internal_r+0x1e20>
  e057e0:	00800044 	movi	r2,1
  e057e4:	1485883a 	add	r2,r2,r18
  e057e8:	d8814515 	stw	r2,1300(sp)
  e057ec:	100f883a 	mov	r7,r2
  e057f0:	103f750e 	bge	r2,zero,e055c8 <___vfprintf_internal_r+0x1ba8>
  e057f4:	003fa806 	br	e05698 <___vfprintf_internal_r+0x1c78>
  e057f8:	80c00c04 	addi	r3,r16,48
  e057fc:	00800c04 	movi	r2,48
  e05800:	d8c008c5 	stb	r3,35(sp)
  e05804:	d9800804 	addi	r6,sp,32
  e05808:	d8c00904 	addi	r3,sp,36
  e0580c:	d8800885 	stb	r2,34(sp)
  e05810:	003f6506 	br	e055a8 <___vfprintf_internal_r+0x1b88>
  e05814:	d9014c17 	ldw	r4,1328(sp)
  e05818:	2084703a 	and	r2,r4,r2
  e0581c:	103f9c26 	beq	r2,zero,e05690 <___vfprintf_internal_r+0x1c70>
  e05820:	003f6606 	br	e055bc <___vfprintf_internal_r+0x1b9c>
  e05824:	d9800804 	addi	r6,sp,32
  e05828:	d8c00884 	addi	r3,sp,34
  e0582c:	003f5e06 	br	e055a8 <___vfprintf_internal_r+0x1b88>
  e05830:	00800b44 	movi	r2,45
  e05834:	0121c83a 	sub	r16,zero,r4
  e05838:	d8800845 	stb	r2,33(sp)
  e0583c:	003f3d06 	br	e05534 <___vfprintf_internal_r+0x1b14>
  e05840:	00800084 	movi	r2,2
  e05844:	1105c83a 	sub	r2,r2,r4
  e05848:	003fe606 	br	e057e4 <___vfprintf_internal_r+0x1dc4>
  e0584c:	d8014515 	stw	zero,1300(sp)
  e05850:	dc814715 	stw	r18,1308(sp)
  e05854:	003fb106 	br	e0571c <___vfprintf_internal_r+0x1cfc>
  e05858:	000d883a 	mov	r6,zero
  e0585c:	000f883a 	mov	r7,zero
  e05860:	8009883a 	mov	r4,r16
  e05864:	880b883a 	mov	r5,r17
  e05868:	0e02ce80 	call	e02ce8 <__nedf2>
  e0586c:	103f9f26 	beq	r2,zero,e056ec <___vfprintf_internal_r+0x1ccc>
  e05870:	00800044 	movi	r2,1
  e05874:	1509c83a 	sub	r4,r2,r20
  e05878:	d9000515 	stw	r4,20(sp)
  e0587c:	003f9b06 	br	e056ec <___vfprintf_internal_r+0x1ccc>
  e05880:	98000d1e 	bne	r19,zero,e058b8 <___vfprintf_internal_r+0x1e98>
  e05884:	d8c14c17 	ldw	r3,1328(sp)
  e05888:	1880004c 	andi	r2,r3,1
  e0588c:	10000a1e 	bne	r2,zero,e058b8 <___vfprintf_internal_r+0x1e98>
  e05890:	01000044 	movi	r4,1
  e05894:	200f883a 	mov	r7,r4
  e05898:	d9014515 	stw	r4,1300(sp)
  e0589c:	003f4a06 	br	e055c8 <___vfprintf_internal_r+0x1ba8>
  e058a0:	3cc00017 	ldw	r19,0(r7)
  e058a4:	39c00104 	addi	r7,r7,4
  e058a8:	983d0e0e 	bge	r19,zero,e04ce4 <___vfprintf_internal_r+0x12c4>
  e058ac:	b8c00007 	ldb	r3,0(r23)
  e058b0:	04ffffc4 	movi	r19,-1
  e058b4:	0038d906 	br	e03c1c <___vfprintf_internal_r+0x1fc>
  e058b8:	9cc00084 	addi	r19,r19,2
  e058bc:	dcc14515 	stw	r19,1300(sp)
  e058c0:	980f883a 	mov	r7,r19
  e058c4:	983f400e 	bge	r19,zero,e055c8 <___vfprintf_internal_r+0x1ba8>
  e058c8:	003f7306 	br	e05698 <___vfprintf_internal_r+0x1c78>

00e058cc <__vfprintf_internal>:
  e058cc:	00803874 	movhi	r2,225
  e058d0:	108b4704 	addi	r2,r2,11548
  e058d4:	2013883a 	mov	r9,r4
  e058d8:	11000017 	ldw	r4,0(r2)
  e058dc:	2805883a 	mov	r2,r5
  e058e0:	300f883a 	mov	r7,r6
  e058e4:	480b883a 	mov	r5,r9
  e058e8:	100d883a 	mov	r6,r2
  e058ec:	0e03a201 	jmpi	e03a20 <___vfprintf_internal_r>

00e058f0 <__swsetup_r>:
  e058f0:	00803874 	movhi	r2,225
  e058f4:	108b4704 	addi	r2,r2,11548
  e058f8:	10c00017 	ldw	r3,0(r2)
  e058fc:	defffd04 	addi	sp,sp,-12
  e05900:	dc400115 	stw	r17,4(sp)
  e05904:	dc000015 	stw	r16,0(sp)
  e05908:	dfc00215 	stw	ra,8(sp)
  e0590c:	2023883a 	mov	r17,r4
  e05910:	2821883a 	mov	r16,r5
  e05914:	18000226 	beq	r3,zero,e05920 <__swsetup_r+0x30>
  e05918:	18800e17 	ldw	r2,56(r3)
  e0591c:	10001f26 	beq	r2,zero,e0599c <__swsetup_r+0xac>
  e05920:	8100030b 	ldhu	r4,12(r16)
  e05924:	2080020c 	andi	r2,r4,8
  e05928:	10002826 	beq	r2,zero,e059cc <__swsetup_r+0xdc>
  e0592c:	81400417 	ldw	r5,16(r16)
  e05930:	28001d26 	beq	r5,zero,e059a8 <__swsetup_r+0xb8>
  e05934:	2080004c 	andi	r2,r4,1
  e05938:	1005003a 	cmpeq	r2,r2,zero
  e0593c:	10000b26 	beq	r2,zero,e0596c <__swsetup_r+0x7c>
  e05940:	2080008c 	andi	r2,r4,2
  e05944:	10001226 	beq	r2,zero,e05990 <__swsetup_r+0xa0>
  e05948:	0005883a 	mov	r2,zero
  e0594c:	80800215 	stw	r2,8(r16)
  e05950:	28000b26 	beq	r5,zero,e05980 <__swsetup_r+0x90>
  e05954:	0005883a 	mov	r2,zero
  e05958:	dfc00217 	ldw	ra,8(sp)
  e0595c:	dc400117 	ldw	r17,4(sp)
  e05960:	dc000017 	ldw	r16,0(sp)
  e05964:	dec00304 	addi	sp,sp,12
  e05968:	f800283a 	ret
  e0596c:	80800517 	ldw	r2,20(r16)
  e05970:	80000215 	stw	zero,8(r16)
  e05974:	0085c83a 	sub	r2,zero,r2
  e05978:	80800615 	stw	r2,24(r16)
  e0597c:	283ff51e 	bne	r5,zero,e05954 <__swsetup_r+0x64>
  e05980:	2080200c 	andi	r2,r4,128
  e05984:	103ff326 	beq	r2,zero,e05954 <__swsetup_r+0x64>
  e05988:	00bfffc4 	movi	r2,-1
  e0598c:	003ff206 	br	e05958 <__swsetup_r+0x68>
  e05990:	80800517 	ldw	r2,20(r16)
  e05994:	80800215 	stw	r2,8(r16)
  e05998:	003fed06 	br	e05950 <__swsetup_r+0x60>
  e0599c:	1809883a 	mov	r4,r3
  e059a0:	0e074900 	call	e07490 <__sinit>
  e059a4:	003fde06 	br	e05920 <__swsetup_r+0x30>
  e059a8:	20c0a00c 	andi	r3,r4,640
  e059ac:	00808004 	movi	r2,512
  e059b0:	18bfe026 	beq	r3,r2,e05934 <__swsetup_r+0x44>
  e059b4:	8809883a 	mov	r4,r17
  e059b8:	800b883a 	mov	r5,r16
  e059bc:	0e082080 	call	e08208 <__smakebuf_r>
  e059c0:	8100030b 	ldhu	r4,12(r16)
  e059c4:	81400417 	ldw	r5,16(r16)
  e059c8:	003fda06 	br	e05934 <__swsetup_r+0x44>
  e059cc:	2080040c 	andi	r2,r4,16
  e059d0:	103fed26 	beq	r2,zero,e05988 <__swsetup_r+0x98>
  e059d4:	2080010c 	andi	r2,r4,4
  e059d8:	10001226 	beq	r2,zero,e05a24 <__swsetup_r+0x134>
  e059dc:	81400c17 	ldw	r5,48(r16)
  e059e0:	28000526 	beq	r5,zero,e059f8 <__swsetup_r+0x108>
  e059e4:	80801004 	addi	r2,r16,64
  e059e8:	28800226 	beq	r5,r2,e059f4 <__swsetup_r+0x104>
  e059ec:	8809883a 	mov	r4,r17
  e059f0:	0e078140 	call	e07814 <_free_r>
  e059f4:	80000c15 	stw	zero,48(r16)
  e059f8:	8080030b 	ldhu	r2,12(r16)
  e059fc:	81400417 	ldw	r5,16(r16)
  e05a00:	80000115 	stw	zero,4(r16)
  e05a04:	10bff6cc 	andi	r2,r2,65499
  e05a08:	8080030d 	sth	r2,12(r16)
  e05a0c:	81400015 	stw	r5,0(r16)
  e05a10:	8080030b 	ldhu	r2,12(r16)
  e05a14:	10800214 	ori	r2,r2,8
  e05a18:	113fffcc 	andi	r4,r2,65535
  e05a1c:	8080030d 	sth	r2,12(r16)
  e05a20:	003fc306 	br	e05930 <__swsetup_r+0x40>
  e05a24:	81400417 	ldw	r5,16(r16)
  e05a28:	003ff906 	br	e05a10 <__swsetup_r+0x120>

00e05a2c <quorem>:
  e05a2c:	28c00417 	ldw	r3,16(r5)
  e05a30:	20800417 	ldw	r2,16(r4)
  e05a34:	defff604 	addi	sp,sp,-40
  e05a38:	ddc00715 	stw	r23,28(sp)
  e05a3c:	dd400515 	stw	r21,20(sp)
  e05a40:	dfc00915 	stw	ra,36(sp)
  e05a44:	df000815 	stw	fp,32(sp)
  e05a48:	dd800615 	stw	r22,24(sp)
  e05a4c:	dd000415 	stw	r20,16(sp)
  e05a50:	dcc00315 	stw	r19,12(sp)
  e05a54:	dc800215 	stw	r18,8(sp)
  e05a58:	dc400115 	stw	r17,4(sp)
  e05a5c:	dc000015 	stw	r16,0(sp)
  e05a60:	202f883a 	mov	r23,r4
  e05a64:	282b883a 	mov	r21,r5
  e05a68:	10c07416 	blt	r2,r3,e05c3c <quorem+0x210>
  e05a6c:	1c7fffc4 	addi	r17,r3,-1
  e05a70:	8c45883a 	add	r2,r17,r17
  e05a74:	1085883a 	add	r2,r2,r2
  e05a78:	2c000504 	addi	r16,r5,20
  e05a7c:	24c00504 	addi	r19,r4,20
  e05a80:	14ed883a 	add	r22,r2,r19
  e05a84:	80a5883a 	add	r18,r16,r2
  e05a88:	b7000017 	ldw	fp,0(r22)
  e05a8c:	91400017 	ldw	r5,0(r18)
  e05a90:	e009883a 	mov	r4,fp
  e05a94:	29400044 	addi	r5,r5,1
  e05a98:	0e0c14c0 	call	e0c14c <__udivsi3>
  e05a9c:	1029883a 	mov	r20,r2
  e05aa0:	10003c1e 	bne	r2,zero,e05b94 <quorem+0x168>
  e05aa4:	a80b883a 	mov	r5,r21
  e05aa8:	b809883a 	mov	r4,r23
  e05aac:	0e08f340 	call	e08f34 <__mcmp>
  e05ab0:	10002b16 	blt	r2,zero,e05b60 <quorem+0x134>
  e05ab4:	a5000044 	addi	r20,r20,1
  e05ab8:	980f883a 	mov	r7,r19
  e05abc:	0011883a 	mov	r8,zero
  e05ac0:	0009883a 	mov	r4,zero
  e05ac4:	81400017 	ldw	r5,0(r16)
  e05ac8:	38c00017 	ldw	r3,0(r7)
  e05acc:	84000104 	addi	r16,r16,4
  e05ad0:	28bfffcc 	andi	r2,r5,65535
  e05ad4:	2085883a 	add	r2,r4,r2
  e05ad8:	11bfffcc 	andi	r6,r2,65535
  e05adc:	193fffcc 	andi	r4,r3,65535
  e05ae0:	1004d43a 	srli	r2,r2,16
  e05ae4:	280ad43a 	srli	r5,r5,16
  e05ae8:	2189c83a 	sub	r4,r4,r6
  e05aec:	2209883a 	add	r4,r4,r8
  e05af0:	1806d43a 	srli	r3,r3,16
  e05af4:	288b883a 	add	r5,r5,r2
  e05af8:	200dd43a 	srai	r6,r4,16
  e05afc:	28bfffcc 	andi	r2,r5,65535
  e05b00:	1887c83a 	sub	r3,r3,r2
  e05b04:	1987883a 	add	r3,r3,r6
  e05b08:	3900000d 	sth	r4,0(r7)
  e05b0c:	38c0008d 	sth	r3,2(r7)
  e05b10:	2808d43a 	srli	r4,r5,16
  e05b14:	39c00104 	addi	r7,r7,4
  e05b18:	1811d43a 	srai	r8,r3,16
  e05b1c:	943fe92e 	bgeu	r18,r16,e05ac4 <quorem+0x98>
  e05b20:	8c45883a 	add	r2,r17,r17
  e05b24:	1085883a 	add	r2,r2,r2
  e05b28:	9885883a 	add	r2,r19,r2
  e05b2c:	10c00017 	ldw	r3,0(r2)
  e05b30:	18000b1e 	bne	r3,zero,e05b60 <quorem+0x134>
  e05b34:	113fff04 	addi	r4,r2,-4
  e05b38:	9900082e 	bgeu	r19,r4,e05b5c <quorem+0x130>
  e05b3c:	10bfff17 	ldw	r2,-4(r2)
  e05b40:	10000326 	beq	r2,zero,e05b50 <quorem+0x124>
  e05b44:	00000506 	br	e05b5c <quorem+0x130>
  e05b48:	20800017 	ldw	r2,0(r4)
  e05b4c:	1000031e 	bne	r2,zero,e05b5c <quorem+0x130>
  e05b50:	213fff04 	addi	r4,r4,-4
  e05b54:	8c7fffc4 	addi	r17,r17,-1
  e05b58:	993ffb36 	bltu	r19,r4,e05b48 <quorem+0x11c>
  e05b5c:	bc400415 	stw	r17,16(r23)
  e05b60:	a005883a 	mov	r2,r20
  e05b64:	dfc00917 	ldw	ra,36(sp)
  e05b68:	df000817 	ldw	fp,32(sp)
  e05b6c:	ddc00717 	ldw	r23,28(sp)
  e05b70:	dd800617 	ldw	r22,24(sp)
  e05b74:	dd400517 	ldw	r21,20(sp)
  e05b78:	dd000417 	ldw	r20,16(sp)
  e05b7c:	dcc00317 	ldw	r19,12(sp)
  e05b80:	dc800217 	ldw	r18,8(sp)
  e05b84:	dc400117 	ldw	r17,4(sp)
  e05b88:	dc000017 	ldw	r16,0(sp)
  e05b8c:	dec00a04 	addi	sp,sp,40
  e05b90:	f800283a 	ret
  e05b94:	980f883a 	mov	r7,r19
  e05b98:	8011883a 	mov	r8,r16
  e05b9c:	0013883a 	mov	r9,zero
  e05ba0:	000d883a 	mov	r6,zero
  e05ba4:	40c00017 	ldw	r3,0(r8)
  e05ba8:	39000017 	ldw	r4,0(r7)
  e05bac:	42000104 	addi	r8,r8,4
  e05bb0:	18bfffcc 	andi	r2,r3,65535
  e05bb4:	a085383a 	mul	r2,r20,r2
  e05bb8:	1806d43a 	srli	r3,r3,16
  e05bbc:	217fffcc 	andi	r5,r4,65535
  e05bc0:	3085883a 	add	r2,r6,r2
  e05bc4:	11bfffcc 	andi	r6,r2,65535
  e05bc8:	a0c7383a 	mul	r3,r20,r3
  e05bcc:	1004d43a 	srli	r2,r2,16
  e05bd0:	298bc83a 	sub	r5,r5,r6
  e05bd4:	2a4b883a 	add	r5,r5,r9
  e05bd8:	2008d43a 	srli	r4,r4,16
  e05bdc:	1887883a 	add	r3,r3,r2
  e05be0:	280dd43a 	srai	r6,r5,16
  e05be4:	18bfffcc 	andi	r2,r3,65535
  e05be8:	2089c83a 	sub	r4,r4,r2
  e05bec:	2189883a 	add	r4,r4,r6
  e05bf0:	3900008d 	sth	r4,2(r7)
  e05bf4:	3940000d 	sth	r5,0(r7)
  e05bf8:	180cd43a 	srli	r6,r3,16
  e05bfc:	39c00104 	addi	r7,r7,4
  e05c00:	2013d43a 	srai	r9,r4,16
  e05c04:	923fe72e 	bgeu	r18,r8,e05ba4 <quorem+0x178>
  e05c08:	e03fa61e 	bne	fp,zero,e05aa4 <quorem+0x78>
  e05c0c:	b0ffff04 	addi	r3,r22,-4
  e05c10:	98c0082e 	bgeu	r19,r3,e05c34 <quorem+0x208>
  e05c14:	b0bfff17 	ldw	r2,-4(r22)
  e05c18:	10000326 	beq	r2,zero,e05c28 <quorem+0x1fc>
  e05c1c:	00000506 	br	e05c34 <quorem+0x208>
  e05c20:	18800017 	ldw	r2,0(r3)
  e05c24:	1000031e 	bne	r2,zero,e05c34 <quorem+0x208>
  e05c28:	18ffff04 	addi	r3,r3,-4
  e05c2c:	8c7fffc4 	addi	r17,r17,-1
  e05c30:	98fffb36 	bltu	r19,r3,e05c20 <quorem+0x1f4>
  e05c34:	bc400415 	stw	r17,16(r23)
  e05c38:	003f9a06 	br	e05aa4 <quorem+0x78>
  e05c3c:	0005883a 	mov	r2,zero
  e05c40:	003fc806 	br	e05b64 <quorem+0x138>

00e05c44 <_dtoa_r>:
  e05c44:	22001017 	ldw	r8,64(r4)
  e05c48:	deffda04 	addi	sp,sp,-152
  e05c4c:	dd402115 	stw	r21,132(sp)
  e05c50:	dd002015 	stw	r20,128(sp)
  e05c54:	dc801e15 	stw	r18,120(sp)
  e05c58:	dc401d15 	stw	r17,116(sp)
  e05c5c:	dfc02515 	stw	ra,148(sp)
  e05c60:	df002415 	stw	fp,144(sp)
  e05c64:	ddc02315 	stw	r23,140(sp)
  e05c68:	dd802215 	stw	r22,136(sp)
  e05c6c:	dcc01f15 	stw	r19,124(sp)
  e05c70:	dc001c15 	stw	r16,112(sp)
  e05c74:	d9001615 	stw	r4,88(sp)
  e05c78:	3023883a 	mov	r17,r6
  e05c7c:	2829883a 	mov	r20,r5
  e05c80:	d9c01715 	stw	r7,92(sp)
  e05c84:	dc802817 	ldw	r18,160(sp)
  e05c88:	302b883a 	mov	r21,r6
  e05c8c:	40000a26 	beq	r8,zero,e05cb8 <_dtoa_r+0x74>
  e05c90:	20801117 	ldw	r2,68(r4)
  e05c94:	400b883a 	mov	r5,r8
  e05c98:	40800115 	stw	r2,4(r8)
  e05c9c:	20c01117 	ldw	r3,68(r4)
  e05ca0:	00800044 	movi	r2,1
  e05ca4:	10c4983a 	sll	r2,r2,r3
  e05ca8:	40800215 	stw	r2,8(r8)
  e05cac:	0e08dd80 	call	e08dd8 <_Bfree>
  e05cb0:	d8c01617 	ldw	r3,88(sp)
  e05cb4:	18001015 	stw	zero,64(r3)
  e05cb8:	8800a316 	blt	r17,zero,e05f48 <_dtoa_r+0x304>
  e05cbc:	90000015 	stw	zero,0(r18)
  e05cc0:	a8dffc2c 	andhi	r3,r21,32752
  e05cc4:	009ffc34 	movhi	r2,32752
  e05cc8:	18809126 	beq	r3,r2,e05f10 <_dtoa_r+0x2cc>
  e05ccc:	000d883a 	mov	r6,zero
  e05cd0:	000f883a 	mov	r7,zero
  e05cd4:	a009883a 	mov	r4,r20
  e05cd8:	a80b883a 	mov	r5,r21
  e05cdc:	dd001215 	stw	r20,72(sp)
  e05ce0:	dd401315 	stw	r21,76(sp)
  e05ce4:	0e02ce80 	call	e02ce8 <__nedf2>
  e05ce8:	1000171e 	bne	r2,zero,e05d48 <_dtoa_r+0x104>
  e05cec:	d9802717 	ldw	r6,156(sp)
  e05cf0:	00800044 	movi	r2,1
  e05cf4:	30800015 	stw	r2,0(r6)
  e05cf8:	d8802917 	ldw	r2,164(sp)
  e05cfc:	10029b26 	beq	r2,zero,e0676c <_dtoa_r+0xb28>
  e05d00:	d9002917 	ldw	r4,164(sp)
  e05d04:	00803874 	movhi	r2,225
  e05d08:	10833044 	addi	r2,r2,3265
  e05d0c:	10ffffc4 	addi	r3,r2,-1
  e05d10:	20800015 	stw	r2,0(r4)
  e05d14:	1805883a 	mov	r2,r3
  e05d18:	dfc02517 	ldw	ra,148(sp)
  e05d1c:	df002417 	ldw	fp,144(sp)
  e05d20:	ddc02317 	ldw	r23,140(sp)
  e05d24:	dd802217 	ldw	r22,136(sp)
  e05d28:	dd402117 	ldw	r21,132(sp)
  e05d2c:	dd002017 	ldw	r20,128(sp)
  e05d30:	dcc01f17 	ldw	r19,124(sp)
  e05d34:	dc801e17 	ldw	r18,120(sp)
  e05d38:	dc401d17 	ldw	r17,116(sp)
  e05d3c:	dc001c17 	ldw	r16,112(sp)
  e05d40:	dec02604 	addi	sp,sp,152
  e05d44:	f800283a 	ret
  e05d48:	d9001617 	ldw	r4,88(sp)
  e05d4c:	d9401217 	ldw	r5,72(sp)
  e05d50:	d8800104 	addi	r2,sp,4
  e05d54:	a80d883a 	mov	r6,r21
  e05d58:	d9c00204 	addi	r7,sp,8
  e05d5c:	d8800015 	stw	r2,0(sp)
  e05d60:	0e094140 	call	e09414 <__d2b>
  e05d64:	d8800715 	stw	r2,28(sp)
  e05d68:	a804d53a 	srli	r2,r21,20
  e05d6c:	1101ffcc 	andi	r4,r2,2047
  e05d70:	20008626 	beq	r4,zero,e05f8c <_dtoa_r+0x348>
  e05d74:	d8c01217 	ldw	r3,72(sp)
  e05d78:	00800434 	movhi	r2,16
  e05d7c:	10bfffc4 	addi	r2,r2,-1
  e05d80:	ddc00117 	ldw	r23,4(sp)
  e05d84:	a884703a 	and	r2,r21,r2
  e05d88:	1811883a 	mov	r8,r3
  e05d8c:	124ffc34 	orhi	r9,r2,16368
  e05d90:	25bf0044 	addi	r22,r4,-1023
  e05d94:	d8000815 	stw	zero,32(sp)
  e05d98:	0005883a 	mov	r2,zero
  e05d9c:	00cffe34 	movhi	r3,16376
  e05da0:	480b883a 	mov	r5,r9
  e05da4:	4009883a 	mov	r4,r8
  e05da8:	180f883a 	mov	r7,r3
  e05dac:	100d883a 	mov	r6,r2
  e05db0:	0e0299c0 	call	e0299c <__subdf3>
  e05db4:	0218dbf4 	movhi	r8,25455
  e05db8:	4210d844 	addi	r8,r8,17249
  e05dbc:	024ff4f4 	movhi	r9,16339
  e05dc0:	4a61e9c4 	addi	r9,r9,-30809
  e05dc4:	480f883a 	mov	r7,r9
  e05dc8:	400d883a 	mov	r6,r8
  e05dcc:	180b883a 	mov	r5,r3
  e05dd0:	1009883a 	mov	r4,r2
  e05dd4:	0e0b6c80 	call	e0b6c8 <__muldf3>
  e05dd8:	0222d874 	movhi	r8,35681
  e05ddc:	42322cc4 	addi	r8,r8,-14157
  e05de0:	024ff1f4 	movhi	r9,16327
  e05de4:	4a628a04 	addi	r9,r9,-30168
  e05de8:	480f883a 	mov	r7,r9
  e05dec:	400d883a 	mov	r6,r8
  e05df0:	180b883a 	mov	r5,r3
  e05df4:	1009883a 	mov	r4,r2
  e05df8:	0e02a1c0 	call	e02a1c <__adddf3>
  e05dfc:	b009883a 	mov	r4,r22
  e05e00:	1021883a 	mov	r16,r2
  e05e04:	1823883a 	mov	r17,r3
  e05e08:	0e0bcac0 	call	e0bcac <__floatsidf>
  e05e0c:	021427f4 	movhi	r8,20639
  e05e10:	421e7ec4 	addi	r8,r8,31227
  e05e14:	024ff4f4 	movhi	r9,16339
  e05e18:	4a5104c4 	addi	r9,r9,17427
  e05e1c:	480f883a 	mov	r7,r9
  e05e20:	400d883a 	mov	r6,r8
  e05e24:	180b883a 	mov	r5,r3
  e05e28:	1009883a 	mov	r4,r2
  e05e2c:	0e0b6c80 	call	e0b6c8 <__muldf3>
  e05e30:	180f883a 	mov	r7,r3
  e05e34:	880b883a 	mov	r5,r17
  e05e38:	100d883a 	mov	r6,r2
  e05e3c:	8009883a 	mov	r4,r16
  e05e40:	0e02a1c0 	call	e02a1c <__adddf3>
  e05e44:	1009883a 	mov	r4,r2
  e05e48:	180b883a 	mov	r5,r3
  e05e4c:	1021883a 	mov	r16,r2
  e05e50:	1823883a 	mov	r17,r3
  e05e54:	0e0bda40 	call	e0bda4 <__fixdfsi>
  e05e58:	000d883a 	mov	r6,zero
  e05e5c:	000f883a 	mov	r7,zero
  e05e60:	8009883a 	mov	r4,r16
  e05e64:	880b883a 	mov	r5,r17
  e05e68:	d8800d15 	stw	r2,52(sp)
  e05e6c:	0e0bc240 	call	e0bc24 <__ltdf2>
  e05e70:	10031716 	blt	r2,zero,e06ad0 <_dtoa_r+0xe8c>
  e05e74:	d8c00d17 	ldw	r3,52(sp)
  e05e78:	00800584 	movi	r2,22
  e05e7c:	10c1482e 	bgeu	r2,r3,e063a0 <_dtoa_r+0x75c>
  e05e80:	01000044 	movi	r4,1
  e05e84:	d9000c15 	stw	r4,48(sp)
  e05e88:	bd85c83a 	sub	r2,r23,r22
  e05e8c:	11bfffc4 	addi	r6,r2,-1
  e05e90:	30030b16 	blt	r6,zero,e06ac0 <_dtoa_r+0xe7c>
  e05e94:	d9800a15 	stw	r6,40(sp)
  e05e98:	d8001115 	stw	zero,68(sp)
  e05e9c:	d8c00d17 	ldw	r3,52(sp)
  e05ea0:	1802ff16 	blt	r3,zero,e06aa0 <_dtoa_r+0xe5c>
  e05ea4:	d9000a17 	ldw	r4,40(sp)
  e05ea8:	d8c00915 	stw	r3,36(sp)
  e05eac:	d8001015 	stw	zero,64(sp)
  e05eb0:	20c9883a 	add	r4,r4,r3
  e05eb4:	d9000a15 	stw	r4,40(sp)
  e05eb8:	d9001717 	ldw	r4,92(sp)
  e05ebc:	00800244 	movi	r2,9
  e05ec0:	11004636 	bltu	r2,r4,e05fdc <_dtoa_r+0x398>
  e05ec4:	00800144 	movi	r2,5
  e05ec8:	11020416 	blt	r2,r4,e066dc <_dtoa_r+0xa98>
  e05ecc:	04400044 	movi	r17,1
  e05ed0:	d8c01717 	ldw	r3,92(sp)
  e05ed4:	00800144 	movi	r2,5
  e05ed8:	10c1ed36 	bltu	r2,r3,e06690 <_dtoa_r+0xa4c>
  e05edc:	18c5883a 	add	r2,r3,r3
  e05ee0:	1085883a 	add	r2,r2,r2
  e05ee4:	00c03834 	movhi	r3,224
  e05ee8:	18d7be04 	addi	r3,r3,24312
  e05eec:	10c5883a 	add	r2,r2,r3
  e05ef0:	11000017 	ldw	r4,0(r2)
  e05ef4:	2000683a 	jmp	r4
  e05ef8:	00e05fe4 	muli	r3,zero,-32385
  e05efc:	00e05fe4 	muli	r3,zero,-32385
  e05f00:	00e069e4 	muli	r3,zero,-32345
  e05f04:	00e069bc 	xorhi	r3,zero,33190
  e05f08:	00e06a00 	call	e06a0 <__alt_mem_onchip_memory2_3+0xd96a0>
  e05f0c:	00e06a0c 	andi	r3,zero,33192
  e05f10:	d9002717 	ldw	r4,156(sp)
  e05f14:	0089c3c4 	movi	r2,9999
  e05f18:	20800015 	stw	r2,0(r4)
  e05f1c:	a0001026 	beq	r20,zero,e05f60 <_dtoa_r+0x31c>
  e05f20:	00c03874 	movhi	r3,225
  e05f24:	18c3b804 	addi	r3,r3,3808
  e05f28:	d9802917 	ldw	r6,164(sp)
  e05f2c:	303f7926 	beq	r6,zero,e05d14 <_dtoa_r+0xd0>
  e05f30:	188000c7 	ldb	r2,3(r3)
  e05f34:	190000c4 	addi	r4,r3,3
  e05f38:	1000101e 	bne	r2,zero,e05f7c <_dtoa_r+0x338>
  e05f3c:	d8802917 	ldw	r2,164(sp)
  e05f40:	11000015 	stw	r4,0(r2)
  e05f44:	003f7306 	br	e05d14 <_dtoa_r+0xd0>
  e05f48:	00a00034 	movhi	r2,32768
  e05f4c:	10bfffc4 	addi	r2,r2,-1
  e05f50:	00c00044 	movi	r3,1
  e05f54:	88aa703a 	and	r21,r17,r2
  e05f58:	90c00015 	stw	r3,0(r18)
  e05f5c:	003f5806 	br	e05cc0 <_dtoa_r+0x7c>
  e05f60:	00800434 	movhi	r2,16
  e05f64:	10bfffc4 	addi	r2,r2,-1
  e05f68:	a884703a 	and	r2,r21,r2
  e05f6c:	103fec1e 	bne	r2,zero,e05f20 <_dtoa_r+0x2dc>
  e05f70:	00c03874 	movhi	r3,225
  e05f74:	18c3b504 	addi	r3,r3,3796
  e05f78:	003feb06 	br	e05f28 <_dtoa_r+0x2e4>
  e05f7c:	d8802917 	ldw	r2,164(sp)
  e05f80:	19000204 	addi	r4,r3,8
  e05f84:	11000015 	stw	r4,0(r2)
  e05f88:	003f6206 	br	e05d14 <_dtoa_r+0xd0>
  e05f8c:	ddc00117 	ldw	r23,4(sp)
  e05f90:	d8800217 	ldw	r2,8(sp)
  e05f94:	01000804 	movi	r4,32
  e05f98:	b8c10c84 	addi	r3,r23,1074
  e05f9c:	18a3883a 	add	r17,r3,r2
  e05fa0:	2441b80e 	bge	r4,r17,e06684 <_dtoa_r+0xa40>
  e05fa4:	00c01004 	movi	r3,64
  e05fa8:	1c47c83a 	sub	r3,r3,r17
  e05fac:	88bff804 	addi	r2,r17,-32
  e05fb0:	a8c6983a 	sll	r3,r21,r3
  e05fb4:	a084d83a 	srl	r2,r20,r2
  e05fb8:	1888b03a 	or	r4,r3,r2
  e05fbc:	0e0be7c0 	call	e0be7c <__floatunsidf>
  e05fc0:	1011883a 	mov	r8,r2
  e05fc4:	00bf8434 	movhi	r2,65040
  e05fc8:	01000044 	movi	r4,1
  e05fcc:	10d3883a 	add	r9,r2,r3
  e05fd0:	8dbef344 	addi	r22,r17,-1075
  e05fd4:	d9000815 	stw	r4,32(sp)
  e05fd8:	003f6f06 	br	e05d98 <_dtoa_r+0x154>
  e05fdc:	d8001715 	stw	zero,92(sp)
  e05fe0:	04400044 	movi	r17,1
  e05fe4:	00bfffc4 	movi	r2,-1
  e05fe8:	00c00044 	movi	r3,1
  e05fec:	d8800e15 	stw	r2,56(sp)
  e05ff0:	d8002615 	stw	zero,152(sp)
  e05ff4:	d8800f15 	stw	r2,60(sp)
  e05ff8:	d8c00b15 	stw	r3,44(sp)
  e05ffc:	1021883a 	mov	r16,r2
  e06000:	d8801617 	ldw	r2,88(sp)
  e06004:	10001115 	stw	zero,68(r2)
  e06008:	d8801617 	ldw	r2,88(sp)
  e0600c:	11401117 	ldw	r5,68(r2)
  e06010:	1009883a 	mov	r4,r2
  e06014:	0e093580 	call	e09358 <_Balloc>
  e06018:	d8c01617 	ldw	r3,88(sp)
  e0601c:	d8800515 	stw	r2,20(sp)
  e06020:	18801015 	stw	r2,64(r3)
  e06024:	00800384 	movi	r2,14
  e06028:	14006836 	bltu	r2,r16,e061cc <_dtoa_r+0x588>
  e0602c:	8805003a 	cmpeq	r2,r17,zero
  e06030:	1000661e 	bne	r2,zero,e061cc <_dtoa_r+0x588>
  e06034:	d9000d17 	ldw	r4,52(sp)
  e06038:	0102300e 	bge	zero,r4,e068fc <_dtoa_r+0xcb8>
  e0603c:	208003cc 	andi	r2,r4,15
  e06040:	100490fa 	slli	r2,r2,3
  e06044:	2025d13a 	srai	r18,r4,4
  e06048:	00c03874 	movhi	r3,225
  e0604c:	18c3c804 	addi	r3,r3,3872
  e06050:	10c5883a 	add	r2,r2,r3
  e06054:	90c0040c 	andi	r3,r18,16
  e06058:	14000017 	ldw	r16,0(r2)
  e0605c:	14400117 	ldw	r17,4(r2)
  e06060:	18036a1e 	bne	r3,zero,e06e0c <_dtoa_r+0x11c8>
  e06064:	05800084 	movi	r22,2
  e06068:	90001026 	beq	r18,zero,e060ac <_dtoa_r+0x468>
  e0606c:	04c03874 	movhi	r19,225
  e06070:	9cc3fa04 	addi	r19,r19,4072
  e06074:	9080004c 	andi	r2,r18,1
  e06078:	1005003a 	cmpeq	r2,r2,zero
  e0607c:	1000081e 	bne	r2,zero,e060a0 <_dtoa_r+0x45c>
  e06080:	99800017 	ldw	r6,0(r19)
  e06084:	99c00117 	ldw	r7,4(r19)
  e06088:	880b883a 	mov	r5,r17
  e0608c:	8009883a 	mov	r4,r16
  e06090:	0e0b6c80 	call	e0b6c8 <__muldf3>
  e06094:	1021883a 	mov	r16,r2
  e06098:	b5800044 	addi	r22,r22,1
  e0609c:	1823883a 	mov	r17,r3
  e060a0:	9025d07a 	srai	r18,r18,1
  e060a4:	9cc00204 	addi	r19,r19,8
  e060a8:	903ff21e 	bne	r18,zero,e06074 <_dtoa_r+0x430>
  e060ac:	a80b883a 	mov	r5,r21
  e060b0:	a009883a 	mov	r4,r20
  e060b4:	880f883a 	mov	r7,r17
  e060b8:	800d883a 	mov	r6,r16
  e060bc:	0e02a900 	call	e02a90 <__divdf3>
  e060c0:	1029883a 	mov	r20,r2
  e060c4:	182b883a 	mov	r21,r3
  e060c8:	d8c00c17 	ldw	r3,48(sp)
  e060cc:	1805003a 	cmpeq	r2,r3,zero
  e060d0:	1000081e 	bne	r2,zero,e060f4 <_dtoa_r+0x4b0>
  e060d4:	0005883a 	mov	r2,zero
  e060d8:	00cffc34 	movhi	r3,16368
  e060dc:	180f883a 	mov	r7,r3
  e060e0:	a009883a 	mov	r4,r20
  e060e4:	a80b883a 	mov	r5,r21
  e060e8:	100d883a 	mov	r6,r2
  e060ec:	0e0bc240 	call	e0bc24 <__ltdf2>
  e060f0:	1003fe16 	blt	r2,zero,e070ec <_dtoa_r+0x14a8>
  e060f4:	b009883a 	mov	r4,r22
  e060f8:	0e0bcac0 	call	e0bcac <__floatsidf>
  e060fc:	180b883a 	mov	r5,r3
  e06100:	1009883a 	mov	r4,r2
  e06104:	a00d883a 	mov	r6,r20
  e06108:	a80f883a 	mov	r7,r21
  e0610c:	0e0b6c80 	call	e0b6c8 <__muldf3>
  e06110:	0011883a 	mov	r8,zero
  e06114:	02500734 	movhi	r9,16412
  e06118:	1009883a 	mov	r4,r2
  e0611c:	180b883a 	mov	r5,r3
  e06120:	480f883a 	mov	r7,r9
  e06124:	400d883a 	mov	r6,r8
  e06128:	0e02a1c0 	call	e02a1c <__adddf3>
  e0612c:	d9000f17 	ldw	r4,60(sp)
  e06130:	102d883a 	mov	r22,r2
  e06134:	00bf3034 	movhi	r2,64704
  e06138:	18b9883a 	add	fp,r3,r2
  e0613c:	e02f883a 	mov	r23,fp
  e06140:	20028f1e 	bne	r4,zero,e06b80 <_dtoa_r+0xf3c>
  e06144:	0005883a 	mov	r2,zero
  e06148:	00d00534 	movhi	r3,16404
  e0614c:	a009883a 	mov	r4,r20
  e06150:	a80b883a 	mov	r5,r21
  e06154:	180f883a 	mov	r7,r3
  e06158:	100d883a 	mov	r6,r2
  e0615c:	0e0299c0 	call	e0299c <__subdf3>
  e06160:	1009883a 	mov	r4,r2
  e06164:	e00f883a 	mov	r7,fp
  e06168:	180b883a 	mov	r5,r3
  e0616c:	b00d883a 	mov	r6,r22
  e06170:	1025883a 	mov	r18,r2
  e06174:	1827883a 	mov	r19,r3
  e06178:	0e0bb140 	call	e0bb14 <__gtdf2>
  e0617c:	00834f16 	blt	zero,r2,e06ebc <_dtoa_r+0x1278>
  e06180:	e0e0003c 	xorhi	r3,fp,32768
  e06184:	9009883a 	mov	r4,r18
  e06188:	980b883a 	mov	r5,r19
  e0618c:	180f883a 	mov	r7,r3
  e06190:	b00d883a 	mov	r6,r22
  e06194:	0e0bc240 	call	e0bc24 <__ltdf2>
  e06198:	1000080e 	bge	r2,zero,e061bc <_dtoa_r+0x578>
  e0619c:	0027883a 	mov	r19,zero
  e061a0:	0025883a 	mov	r18,zero
  e061a4:	d8802617 	ldw	r2,152(sp)
  e061a8:	df000517 	ldw	fp,20(sp)
  e061ac:	d8000615 	stw	zero,24(sp)
  e061b0:	0084303a 	nor	r2,zero,r2
  e061b4:	d8800d15 	stw	r2,52(sp)
  e061b8:	00019b06 	br	e06828 <_dtoa_r+0xbe4>
  e061bc:	d9801217 	ldw	r6,72(sp)
  e061c0:	d8801317 	ldw	r2,76(sp)
  e061c4:	3029883a 	mov	r20,r6
  e061c8:	102b883a 	mov	r21,r2
  e061cc:	d8c00217 	ldw	r3,8(sp)
  e061d0:	18008516 	blt	r3,zero,e063e8 <_dtoa_r+0x7a4>
  e061d4:	d9000d17 	ldw	r4,52(sp)
  e061d8:	00800384 	movi	r2,14
  e061dc:	11008216 	blt	r2,r4,e063e8 <_dtoa_r+0x7a4>
  e061e0:	200490fa 	slli	r2,r4,3
  e061e4:	d9802617 	ldw	r6,152(sp)
  e061e8:	00c03874 	movhi	r3,225
  e061ec:	18c3c804 	addi	r3,r3,3872
  e061f0:	10c5883a 	add	r2,r2,r3
  e061f4:	14800017 	ldw	r18,0(r2)
  e061f8:	14c00117 	ldw	r19,4(r2)
  e061fc:	30031e16 	blt	r6,zero,e06e78 <_dtoa_r+0x1234>
  e06200:	d9000517 	ldw	r4,20(sp)
  e06204:	d8c00f17 	ldw	r3,60(sp)
  e06208:	a823883a 	mov	r17,r21
  e0620c:	a021883a 	mov	r16,r20
  e06210:	192b883a 	add	r21,r3,r4
  e06214:	2039883a 	mov	fp,r4
  e06218:	00000f06 	br	e06258 <_dtoa_r+0x614>
  e0621c:	0005883a 	mov	r2,zero
  e06220:	00d00934 	movhi	r3,16420
  e06224:	5009883a 	mov	r4,r10
  e06228:	580b883a 	mov	r5,r11
  e0622c:	180f883a 	mov	r7,r3
  e06230:	100d883a 	mov	r6,r2
  e06234:	0e0b6c80 	call	e0b6c8 <__muldf3>
  e06238:	180b883a 	mov	r5,r3
  e0623c:	000d883a 	mov	r6,zero
  e06240:	000f883a 	mov	r7,zero
  e06244:	1009883a 	mov	r4,r2
  e06248:	1021883a 	mov	r16,r2
  e0624c:	1823883a 	mov	r17,r3
  e06250:	0e02ce80 	call	e02ce8 <__nedf2>
  e06254:	10004526 	beq	r2,zero,e0636c <_dtoa_r+0x728>
  e06258:	900d883a 	mov	r6,r18
  e0625c:	980f883a 	mov	r7,r19
  e06260:	8009883a 	mov	r4,r16
  e06264:	880b883a 	mov	r5,r17
  e06268:	0e02a900 	call	e02a90 <__divdf3>
  e0626c:	180b883a 	mov	r5,r3
  e06270:	1009883a 	mov	r4,r2
  e06274:	0e0bda40 	call	e0bda4 <__fixdfsi>
  e06278:	1009883a 	mov	r4,r2
  e0627c:	1029883a 	mov	r20,r2
  e06280:	0e0bcac0 	call	e0bcac <__floatsidf>
  e06284:	180f883a 	mov	r7,r3
  e06288:	9009883a 	mov	r4,r18
  e0628c:	980b883a 	mov	r5,r19
  e06290:	100d883a 	mov	r6,r2
  e06294:	0e0b6c80 	call	e0b6c8 <__muldf3>
  e06298:	180f883a 	mov	r7,r3
  e0629c:	880b883a 	mov	r5,r17
  e062a0:	8009883a 	mov	r4,r16
  e062a4:	100d883a 	mov	r6,r2
  e062a8:	0e0299c0 	call	e0299c <__subdf3>
  e062ac:	1015883a 	mov	r10,r2
  e062b0:	a0800c04 	addi	r2,r20,48
  e062b4:	e0800005 	stb	r2,0(fp)
  e062b8:	e7000044 	addi	fp,fp,1
  e062bc:	1817883a 	mov	r11,r3
  e062c0:	e57fd61e 	bne	fp,r21,e0621c <_dtoa_r+0x5d8>
  e062c4:	500d883a 	mov	r6,r10
  e062c8:	180f883a 	mov	r7,r3
  e062cc:	5009883a 	mov	r4,r10
  e062d0:	180b883a 	mov	r5,r3
  e062d4:	0e02a1c0 	call	e02a1c <__adddf3>
  e062d8:	100d883a 	mov	r6,r2
  e062dc:	9009883a 	mov	r4,r18
  e062e0:	980b883a 	mov	r5,r19
  e062e4:	180f883a 	mov	r7,r3
  e062e8:	1021883a 	mov	r16,r2
  e062ec:	1823883a 	mov	r17,r3
  e062f0:	0e0bc240 	call	e0bc24 <__ltdf2>
  e062f4:	10000816 	blt	r2,zero,e06318 <_dtoa_r+0x6d4>
  e062f8:	980b883a 	mov	r5,r19
  e062fc:	800d883a 	mov	r6,r16
  e06300:	880f883a 	mov	r7,r17
  e06304:	9009883a 	mov	r4,r18
  e06308:	0e0ba8c0 	call	e0ba8c <__eqdf2>
  e0630c:	1000171e 	bne	r2,zero,e0636c <_dtoa_r+0x728>
  e06310:	a080004c 	andi	r2,r20,1
  e06314:	10001526 	beq	r2,zero,e0636c <_dtoa_r+0x728>
  e06318:	d8800d17 	ldw	r2,52(sp)
  e0631c:	d8800415 	stw	r2,16(sp)
  e06320:	e009883a 	mov	r4,fp
  e06324:	213fffc4 	addi	r4,r4,-1
  e06328:	20c00007 	ldb	r3,0(r4)
  e0632c:	00800e44 	movi	r2,57
  e06330:	1880081e 	bne	r3,r2,e06354 <_dtoa_r+0x710>
  e06334:	d8800517 	ldw	r2,20(sp)
  e06338:	113ffa1e 	bne	r2,r4,e06324 <_dtoa_r+0x6e0>
  e0633c:	d8c00417 	ldw	r3,16(sp)
  e06340:	d9800517 	ldw	r6,20(sp)
  e06344:	00800c04 	movi	r2,48
  e06348:	18c00044 	addi	r3,r3,1
  e0634c:	d8c00415 	stw	r3,16(sp)
  e06350:	30800005 	stb	r2,0(r6)
  e06354:	20800003 	ldbu	r2,0(r4)
  e06358:	d8c00417 	ldw	r3,16(sp)
  e0635c:	27000044 	addi	fp,r4,1
  e06360:	10800044 	addi	r2,r2,1
  e06364:	d8c00d15 	stw	r3,52(sp)
  e06368:	20800005 	stb	r2,0(r4)
  e0636c:	d9001617 	ldw	r4,88(sp)
  e06370:	d9400717 	ldw	r5,28(sp)
  e06374:	0e08dd80 	call	e08dd8 <_Bfree>
  e06378:	e0000005 	stb	zero,0(fp)
  e0637c:	d9800d17 	ldw	r6,52(sp)
  e06380:	d8c02717 	ldw	r3,156(sp)
  e06384:	d9002917 	ldw	r4,164(sp)
  e06388:	30800044 	addi	r2,r6,1
  e0638c:	18800015 	stw	r2,0(r3)
  e06390:	20029c26 	beq	r4,zero,e06e04 <_dtoa_r+0x11c0>
  e06394:	d8c00517 	ldw	r3,20(sp)
  e06398:	27000015 	stw	fp,0(r4)
  e0639c:	003e5d06 	br	e05d14 <_dtoa_r+0xd0>
  e063a0:	d9800d17 	ldw	r6,52(sp)
  e063a4:	00c03874 	movhi	r3,225
  e063a8:	18c3c804 	addi	r3,r3,3872
  e063ac:	d9001217 	ldw	r4,72(sp)
  e063b0:	300490fa 	slli	r2,r6,3
  e063b4:	d9401317 	ldw	r5,76(sp)
  e063b8:	10c5883a 	add	r2,r2,r3
  e063bc:	12000017 	ldw	r8,0(r2)
  e063c0:	12400117 	ldw	r9,4(r2)
  e063c4:	400d883a 	mov	r6,r8
  e063c8:	480f883a 	mov	r7,r9
  e063cc:	0e0bc240 	call	e0bc24 <__ltdf2>
  e063d0:	1000030e 	bge	r2,zero,e063e0 <_dtoa_r+0x79c>
  e063d4:	d8800d17 	ldw	r2,52(sp)
  e063d8:	10bfffc4 	addi	r2,r2,-1
  e063dc:	d8800d15 	stw	r2,52(sp)
  e063e0:	d8000c15 	stw	zero,48(sp)
  e063e4:	003ea806 	br	e05e88 <_dtoa_r+0x244>
  e063e8:	d9000b17 	ldw	r4,44(sp)
  e063ec:	202cc03a 	cmpne	r22,r4,zero
  e063f0:	b000c71e 	bne	r22,zero,e06710 <_dtoa_r+0xacc>
  e063f4:	dc001117 	ldw	r16,68(sp)
  e063f8:	dc801017 	ldw	r18,64(sp)
  e063fc:	0027883a 	mov	r19,zero
  e06400:	04000b0e 	bge	zero,r16,e06430 <_dtoa_r+0x7ec>
  e06404:	d8c00a17 	ldw	r3,40(sp)
  e06408:	00c0090e 	bge	zero,r3,e06430 <_dtoa_r+0x7ec>
  e0640c:	8005883a 	mov	r2,r16
  e06410:	1c011316 	blt	r3,r16,e06860 <_dtoa_r+0xc1c>
  e06414:	d9000a17 	ldw	r4,40(sp)
  e06418:	d9801117 	ldw	r6,68(sp)
  e0641c:	80a1c83a 	sub	r16,r16,r2
  e06420:	2089c83a 	sub	r4,r4,r2
  e06424:	308dc83a 	sub	r6,r6,r2
  e06428:	d9000a15 	stw	r4,40(sp)
  e0642c:	d9801115 	stw	r6,68(sp)
  e06430:	d8801017 	ldw	r2,64(sp)
  e06434:	0080150e 	bge	zero,r2,e0648c <_dtoa_r+0x848>
  e06438:	d8c00b17 	ldw	r3,44(sp)
  e0643c:	1805003a 	cmpeq	r2,r3,zero
  e06440:	1001c91e 	bne	r2,zero,e06b68 <_dtoa_r+0xf24>
  e06444:	04800e0e 	bge	zero,r18,e06480 <_dtoa_r+0x83c>
  e06448:	d9001617 	ldw	r4,88(sp)
  e0644c:	980b883a 	mov	r5,r19
  e06450:	900d883a 	mov	r6,r18
  e06454:	0e09b8c0 	call	e09b8c <__pow5mult>
  e06458:	d9001617 	ldw	r4,88(sp)
  e0645c:	d9800717 	ldw	r6,28(sp)
  e06460:	100b883a 	mov	r5,r2
  e06464:	1027883a 	mov	r19,r2
  e06468:	0e098680 	call	e09868 <__multiply>
  e0646c:	d9001617 	ldw	r4,88(sp)
  e06470:	d9400717 	ldw	r5,28(sp)
  e06474:	1023883a 	mov	r17,r2
  e06478:	0e08dd80 	call	e08dd8 <_Bfree>
  e0647c:	dc400715 	stw	r17,28(sp)
  e06480:	d9001017 	ldw	r4,64(sp)
  e06484:	248dc83a 	sub	r6,r4,r18
  e06488:	30010e1e 	bne	r6,zero,e068c4 <_dtoa_r+0xc80>
  e0648c:	d9001617 	ldw	r4,88(sp)
  e06490:	04400044 	movi	r17,1
  e06494:	880b883a 	mov	r5,r17
  e06498:	0e09a500 	call	e09a50 <__i2b>
  e0649c:	d9800917 	ldw	r6,36(sp)
  e064a0:	1025883a 	mov	r18,r2
  e064a4:	0180040e 	bge	zero,r6,e064b8 <_dtoa_r+0x874>
  e064a8:	d9001617 	ldw	r4,88(sp)
  e064ac:	100b883a 	mov	r5,r2
  e064b0:	0e09b8c0 	call	e09b8c <__pow5mult>
  e064b4:	1025883a 	mov	r18,r2
  e064b8:	d8801717 	ldw	r2,92(sp)
  e064bc:	8880f30e 	bge	r17,r2,e0688c <_dtoa_r+0xc48>
  e064c0:	0023883a 	mov	r17,zero
  e064c4:	d9800917 	ldw	r6,36(sp)
  e064c8:	30019e1e 	bne	r6,zero,e06b44 <_dtoa_r+0xf00>
  e064cc:	00c00044 	movi	r3,1
  e064d0:	d9000a17 	ldw	r4,40(sp)
  e064d4:	20c5883a 	add	r2,r4,r3
  e064d8:	10c007cc 	andi	r3,r2,31
  e064dc:	1800841e 	bne	r3,zero,e066f0 <_dtoa_r+0xaac>
  e064e0:	00800704 	movi	r2,28
  e064e4:	d9000a17 	ldw	r4,40(sp)
  e064e8:	d9801117 	ldw	r6,68(sp)
  e064ec:	80a1883a 	add	r16,r16,r2
  e064f0:	2089883a 	add	r4,r4,r2
  e064f4:	308d883a 	add	r6,r6,r2
  e064f8:	d9000a15 	stw	r4,40(sp)
  e064fc:	d9801115 	stw	r6,68(sp)
  e06500:	d8801117 	ldw	r2,68(sp)
  e06504:	0080050e 	bge	zero,r2,e0651c <_dtoa_r+0x8d8>
  e06508:	d9400717 	ldw	r5,28(sp)
  e0650c:	d9001617 	ldw	r4,88(sp)
  e06510:	100d883a 	mov	r6,r2
  e06514:	0e0971c0 	call	e0971c <__lshift>
  e06518:	d8800715 	stw	r2,28(sp)
  e0651c:	d8c00a17 	ldw	r3,40(sp)
  e06520:	00c0050e 	bge	zero,r3,e06538 <_dtoa_r+0x8f4>
  e06524:	d9001617 	ldw	r4,88(sp)
  e06528:	900b883a 	mov	r5,r18
  e0652c:	180d883a 	mov	r6,r3
  e06530:	0e0971c0 	call	e0971c <__lshift>
  e06534:	1025883a 	mov	r18,r2
  e06538:	d9000c17 	ldw	r4,48(sp)
  e0653c:	2005003a 	cmpeq	r2,r4,zero
  e06540:	10016f26 	beq	r2,zero,e06b00 <_dtoa_r+0xebc>
  e06544:	d9000f17 	ldw	r4,60(sp)
  e06548:	0102170e 	bge	zero,r4,e06da8 <_dtoa_r+0x1164>
  e0654c:	d9800b17 	ldw	r6,44(sp)
  e06550:	3005003a 	cmpeq	r2,r6,zero
  e06554:	1000881e 	bne	r2,zero,e06778 <_dtoa_r+0xb34>
  e06558:	0400050e 	bge	zero,r16,e06570 <_dtoa_r+0x92c>
  e0655c:	d9001617 	ldw	r4,88(sp)
  e06560:	980b883a 	mov	r5,r19
  e06564:	800d883a 	mov	r6,r16
  e06568:	0e0971c0 	call	e0971c <__lshift>
  e0656c:	1027883a 	mov	r19,r2
  e06570:	8804c03a 	cmpne	r2,r17,zero
  e06574:	1002541e 	bne	r2,zero,e06ec8 <_dtoa_r+0x1284>
  e06578:	980b883a 	mov	r5,r19
  e0657c:	dd800517 	ldw	r22,20(sp)
  e06580:	dcc00615 	stw	r19,24(sp)
  e06584:	a700004c 	andi	fp,r20,1
  e06588:	2827883a 	mov	r19,r5
  e0658c:	d9000717 	ldw	r4,28(sp)
  e06590:	900b883a 	mov	r5,r18
  e06594:	0e05a2c0 	call	e05a2c <quorem>
  e06598:	d9000717 	ldw	r4,28(sp)
  e0659c:	d9400617 	ldw	r5,24(sp)
  e065a0:	1023883a 	mov	r17,r2
  e065a4:	8dc00c04 	addi	r23,r17,48
  e065a8:	0e08f340 	call	e08f34 <__mcmp>
  e065ac:	d9001617 	ldw	r4,88(sp)
  e065b0:	900b883a 	mov	r5,r18
  e065b4:	980d883a 	mov	r6,r19
  e065b8:	1029883a 	mov	r20,r2
  e065bc:	0e095900 	call	e09590 <__mdiff>
  e065c0:	102b883a 	mov	r21,r2
  e065c4:	10800317 	ldw	r2,12(r2)
  e065c8:	1001281e 	bne	r2,zero,e06a6c <_dtoa_r+0xe28>
  e065cc:	d9000717 	ldw	r4,28(sp)
  e065d0:	a80b883a 	mov	r5,r21
  e065d4:	0e08f340 	call	e08f34 <__mcmp>
  e065d8:	d9001617 	ldw	r4,88(sp)
  e065dc:	1021883a 	mov	r16,r2
  e065e0:	a80b883a 	mov	r5,r21
  e065e4:	0e08dd80 	call	e08dd8 <_Bfree>
  e065e8:	8000041e 	bne	r16,zero,e065fc <_dtoa_r+0x9b8>
  e065ec:	d8801717 	ldw	r2,92(sp)
  e065f0:	1000021e 	bne	r2,zero,e065fc <_dtoa_r+0x9b8>
  e065f4:	e004c03a 	cmpne	r2,fp,zero
  e065f8:	10011726 	beq	r2,zero,e06a58 <_dtoa_r+0xe14>
  e065fc:	a0010616 	blt	r20,zero,e06a18 <_dtoa_r+0xdd4>
  e06600:	a000041e 	bne	r20,zero,e06614 <_dtoa_r+0x9d0>
  e06604:	d8c01717 	ldw	r3,92(sp)
  e06608:	1800021e 	bne	r3,zero,e06614 <_dtoa_r+0x9d0>
  e0660c:	e004c03a 	cmpne	r2,fp,zero
  e06610:	10010126 	beq	r2,zero,e06a18 <_dtoa_r+0xdd4>
  e06614:	04023d16 	blt	zero,r16,e06f0c <_dtoa_r+0x12c8>
  e06618:	b5c00005 	stb	r23,0(r22)
  e0661c:	d9800517 	ldw	r6,20(sp)
  e06620:	d9000f17 	ldw	r4,60(sp)
  e06624:	b5800044 	addi	r22,r22,1
  e06628:	3105883a 	add	r2,r6,r4
  e0662c:	b0806526 	beq	r22,r2,e067c4 <_dtoa_r+0xb80>
  e06630:	d9400717 	ldw	r5,28(sp)
  e06634:	d9001617 	ldw	r4,88(sp)
  e06638:	01800284 	movi	r6,10
  e0663c:	000f883a 	mov	r7,zero
  e06640:	0e09a8c0 	call	e09a8c <__multadd>
  e06644:	d8800715 	stw	r2,28(sp)
  e06648:	d8800617 	ldw	r2,24(sp)
  e0664c:	14c10c26 	beq	r2,r19,e06a80 <_dtoa_r+0xe3c>
  e06650:	d9400617 	ldw	r5,24(sp)
  e06654:	d9001617 	ldw	r4,88(sp)
  e06658:	01800284 	movi	r6,10
  e0665c:	000f883a 	mov	r7,zero
  e06660:	0e09a8c0 	call	e09a8c <__multadd>
  e06664:	d9001617 	ldw	r4,88(sp)
  e06668:	980b883a 	mov	r5,r19
  e0666c:	01800284 	movi	r6,10
  e06670:	000f883a 	mov	r7,zero
  e06674:	d8800615 	stw	r2,24(sp)
  e06678:	0e09a8c0 	call	e09a8c <__multadd>
  e0667c:	1027883a 	mov	r19,r2
  e06680:	003fc206 	br	e0658c <_dtoa_r+0x948>
  e06684:	2445c83a 	sub	r2,r4,r17
  e06688:	a088983a 	sll	r4,r20,r2
  e0668c:	003e4b06 	br	e05fbc <_dtoa_r+0x378>
  e06690:	01bfffc4 	movi	r6,-1
  e06694:	00800044 	movi	r2,1
  e06698:	d9800e15 	stw	r6,56(sp)
  e0669c:	d9800f15 	stw	r6,60(sp)
  e066a0:	d8800b15 	stw	r2,44(sp)
  e066a4:	d8c01617 	ldw	r3,88(sp)
  e066a8:	008005c4 	movi	r2,23
  e066ac:	18001115 	stw	zero,68(r3)
  e066b0:	1580082e 	bgeu	r2,r22,e066d4 <_dtoa_r+0xa90>
  e066b4:	00c00104 	movi	r3,4
  e066b8:	0009883a 	mov	r4,zero
  e066bc:	18c7883a 	add	r3,r3,r3
  e066c0:	18800504 	addi	r2,r3,20
  e066c4:	21000044 	addi	r4,r4,1
  e066c8:	b0bffc2e 	bgeu	r22,r2,e066bc <_dtoa_r+0xa78>
  e066cc:	d9801617 	ldw	r6,88(sp)
  e066d0:	31001115 	stw	r4,68(r6)
  e066d4:	dc000f17 	ldw	r16,60(sp)
  e066d8:	003e4b06 	br	e06008 <_dtoa_r+0x3c4>
  e066dc:	d9801717 	ldw	r6,92(sp)
  e066e0:	0023883a 	mov	r17,zero
  e066e4:	31bfff04 	addi	r6,r6,-4
  e066e8:	d9801715 	stw	r6,92(sp)
  e066ec:	003df806 	br	e05ed0 <_dtoa_r+0x28c>
  e066f0:	00800804 	movi	r2,32
  e066f4:	10c9c83a 	sub	r4,r2,r3
  e066f8:	00c00104 	movi	r3,4
  e066fc:	19005a16 	blt	r3,r4,e06868 <_dtoa_r+0xc24>
  e06700:	008000c4 	movi	r2,3
  e06704:	113f7e16 	blt	r2,r4,e06500 <_dtoa_r+0x8bc>
  e06708:	20800704 	addi	r2,r4,28
  e0670c:	003f7506 	br	e064e4 <_dtoa_r+0x8a0>
  e06710:	d9801717 	ldw	r6,92(sp)
  e06714:	00800044 	movi	r2,1
  e06718:	1180a10e 	bge	r2,r6,e069a0 <_dtoa_r+0xd5c>
  e0671c:	d9800f17 	ldw	r6,60(sp)
  e06720:	d8c01017 	ldw	r3,64(sp)
  e06724:	30bfffc4 	addi	r2,r6,-1
  e06728:	1881c616 	blt	r3,r2,e06e44 <_dtoa_r+0x1200>
  e0672c:	18a5c83a 	sub	r18,r3,r2
  e06730:	d8800f17 	ldw	r2,60(sp)
  e06734:	10026216 	blt	r2,zero,e070c0 <_dtoa_r+0x147c>
  e06738:	dc001117 	ldw	r16,68(sp)
  e0673c:	1007883a 	mov	r3,r2
  e06740:	d9800a17 	ldw	r6,40(sp)
  e06744:	d8801117 	ldw	r2,68(sp)
  e06748:	d9001617 	ldw	r4,88(sp)
  e0674c:	30cd883a 	add	r6,r6,r3
  e06750:	10c5883a 	add	r2,r2,r3
  e06754:	01400044 	movi	r5,1
  e06758:	d9800a15 	stw	r6,40(sp)
  e0675c:	d8801115 	stw	r2,68(sp)
  e06760:	0e09a500 	call	e09a50 <__i2b>
  e06764:	1027883a 	mov	r19,r2
  e06768:	003f2506 	br	e06400 <_dtoa_r+0x7bc>
  e0676c:	00c03874 	movhi	r3,225
  e06770:	18c33004 	addi	r3,r3,3264
  e06774:	003d6706 	br	e05d14 <_dtoa_r+0xd0>
  e06778:	dd800517 	ldw	r22,20(sp)
  e0677c:	04000044 	movi	r16,1
  e06780:	00000706 	br	e067a0 <_dtoa_r+0xb5c>
  e06784:	d9400717 	ldw	r5,28(sp)
  e06788:	d9001617 	ldw	r4,88(sp)
  e0678c:	01800284 	movi	r6,10
  e06790:	000f883a 	mov	r7,zero
  e06794:	0e09a8c0 	call	e09a8c <__multadd>
  e06798:	d8800715 	stw	r2,28(sp)
  e0679c:	84000044 	addi	r16,r16,1
  e067a0:	d9000717 	ldw	r4,28(sp)
  e067a4:	900b883a 	mov	r5,r18
  e067a8:	0e05a2c0 	call	e05a2c <quorem>
  e067ac:	15c00c04 	addi	r23,r2,48
  e067b0:	b5c00005 	stb	r23,0(r22)
  e067b4:	d8c00f17 	ldw	r3,60(sp)
  e067b8:	b5800044 	addi	r22,r22,1
  e067bc:	80fff116 	blt	r16,r3,e06784 <_dtoa_r+0xb40>
  e067c0:	d8000615 	stw	zero,24(sp)
  e067c4:	d9400717 	ldw	r5,28(sp)
  e067c8:	d9001617 	ldw	r4,88(sp)
  e067cc:	01800044 	movi	r6,1
  e067d0:	0e0971c0 	call	e0971c <__lshift>
  e067d4:	1009883a 	mov	r4,r2
  e067d8:	900b883a 	mov	r5,r18
  e067dc:	d8800715 	stw	r2,28(sp)
  e067e0:	0e08f340 	call	e08f34 <__mcmp>
  e067e4:	00803c0e 	bge	zero,r2,e068d8 <_dtoa_r+0xc94>
  e067e8:	b009883a 	mov	r4,r22
  e067ec:	213fffc4 	addi	r4,r4,-1
  e067f0:	21400003 	ldbu	r5,0(r4)
  e067f4:	00800e44 	movi	r2,57
  e067f8:	28c03fcc 	andi	r3,r5,255
  e067fc:	18c0201c 	xori	r3,r3,128
  e06800:	18ffe004 	addi	r3,r3,-128
  e06804:	1881981e 	bne	r3,r2,e06e68 <_dtoa_r+0x1224>
  e06808:	d9800517 	ldw	r6,20(sp)
  e0680c:	21bff71e 	bne	r4,r6,e067ec <_dtoa_r+0xba8>
  e06810:	d8800d17 	ldw	r2,52(sp)
  e06814:	37000044 	addi	fp,r6,1
  e06818:	10800044 	addi	r2,r2,1
  e0681c:	d8800d15 	stw	r2,52(sp)
  e06820:	00800c44 	movi	r2,49
  e06824:	30800005 	stb	r2,0(r6)
  e06828:	d9001617 	ldw	r4,88(sp)
  e0682c:	900b883a 	mov	r5,r18
  e06830:	0e08dd80 	call	e08dd8 <_Bfree>
  e06834:	983ecd26 	beq	r19,zero,e0636c <_dtoa_r+0x728>
  e06838:	d8c00617 	ldw	r3,24(sp)
  e0683c:	18000426 	beq	r3,zero,e06850 <_dtoa_r+0xc0c>
  e06840:	1cc00326 	beq	r3,r19,e06850 <_dtoa_r+0xc0c>
  e06844:	d9001617 	ldw	r4,88(sp)
  e06848:	180b883a 	mov	r5,r3
  e0684c:	0e08dd80 	call	e08dd8 <_Bfree>
  e06850:	d9001617 	ldw	r4,88(sp)
  e06854:	980b883a 	mov	r5,r19
  e06858:	0e08dd80 	call	e08dd8 <_Bfree>
  e0685c:	003ec306 	br	e0636c <_dtoa_r+0x728>
  e06860:	1805883a 	mov	r2,r3
  e06864:	003eeb06 	br	e06414 <_dtoa_r+0x7d0>
  e06868:	d9800a17 	ldw	r6,40(sp)
  e0686c:	d8c01117 	ldw	r3,68(sp)
  e06870:	20bfff04 	addi	r2,r4,-4
  e06874:	308d883a 	add	r6,r6,r2
  e06878:	1887883a 	add	r3,r3,r2
  e0687c:	80a1883a 	add	r16,r16,r2
  e06880:	d9800a15 	stw	r6,40(sp)
  e06884:	d8c01115 	stw	r3,68(sp)
  e06888:	003f1d06 	br	e06500 <_dtoa_r+0x8bc>
  e0688c:	a03f0c1e 	bne	r20,zero,e064c0 <_dtoa_r+0x87c>
  e06890:	00800434 	movhi	r2,16
  e06894:	10bfffc4 	addi	r2,r2,-1
  e06898:	a884703a 	and	r2,r21,r2
  e0689c:	103f081e 	bne	r2,zero,e064c0 <_dtoa_r+0x87c>
  e068a0:	a89ffc2c 	andhi	r2,r21,32752
  e068a4:	103f0626 	beq	r2,zero,e064c0 <_dtoa_r+0x87c>
  e068a8:	d8c01117 	ldw	r3,68(sp)
  e068ac:	d9000a17 	ldw	r4,40(sp)
  e068b0:	18c00044 	addi	r3,r3,1
  e068b4:	21000044 	addi	r4,r4,1
  e068b8:	d8c01115 	stw	r3,68(sp)
  e068bc:	d9000a15 	stw	r4,40(sp)
  e068c0:	003f0006 	br	e064c4 <_dtoa_r+0x880>
  e068c4:	d9400717 	ldw	r5,28(sp)
  e068c8:	d9001617 	ldw	r4,88(sp)
  e068cc:	0e09b8c0 	call	e09b8c <__pow5mult>
  e068d0:	d8800715 	stw	r2,28(sp)
  e068d4:	003eed06 	br	e0648c <_dtoa_r+0x848>
  e068d8:	1000021e 	bne	r2,zero,e068e4 <_dtoa_r+0xca0>
  e068dc:	b880004c 	andi	r2,r23,1
  e068e0:	103fc11e 	bne	r2,zero,e067e8 <_dtoa_r+0xba4>
  e068e4:	b5bfffc4 	addi	r22,r22,-1
  e068e8:	b0c00007 	ldb	r3,0(r22)
  e068ec:	00800c04 	movi	r2,48
  e068f0:	18bffc26 	beq	r3,r2,e068e4 <_dtoa_r+0xca0>
  e068f4:	b7000044 	addi	fp,r22,1
  e068f8:	003fcb06 	br	e06828 <_dtoa_r+0xbe4>
  e068fc:	d9800d17 	ldw	r6,52(sp)
  e06900:	018fc83a 	sub	r7,zero,r6
  e06904:	3801f726 	beq	r7,zero,e070e4 <_dtoa_r+0x14a0>
  e06908:	398003cc 	andi	r6,r7,15
  e0690c:	300c90fa 	slli	r6,r6,3
  e06910:	01403874 	movhi	r5,225
  e06914:	2943c804 	addi	r5,r5,3872
  e06918:	d9001217 	ldw	r4,72(sp)
  e0691c:	314d883a 	add	r6,r6,r5
  e06920:	30c00117 	ldw	r3,4(r6)
  e06924:	30800017 	ldw	r2,0(r6)
  e06928:	d9401317 	ldw	r5,76(sp)
  e0692c:	3821d13a 	srai	r16,r7,4
  e06930:	100d883a 	mov	r6,r2
  e06934:	180f883a 	mov	r7,r3
  e06938:	0e0b6c80 	call	e0b6c8 <__muldf3>
  e0693c:	1011883a 	mov	r8,r2
  e06940:	1813883a 	mov	r9,r3
  e06944:	1029883a 	mov	r20,r2
  e06948:	182b883a 	mov	r21,r3
  e0694c:	8001e526 	beq	r16,zero,e070e4 <_dtoa_r+0x14a0>
  e06950:	05800084 	movi	r22,2
  e06954:	04403874 	movhi	r17,225
  e06958:	8c43fa04 	addi	r17,r17,4072
  e0695c:	8080004c 	andi	r2,r16,1
  e06960:	1005003a 	cmpeq	r2,r2,zero
  e06964:	1000081e 	bne	r2,zero,e06988 <_dtoa_r+0xd44>
  e06968:	89800017 	ldw	r6,0(r17)
  e0696c:	89c00117 	ldw	r7,4(r17)
  e06970:	480b883a 	mov	r5,r9
  e06974:	4009883a 	mov	r4,r8
  e06978:	0e0b6c80 	call	e0b6c8 <__muldf3>
  e0697c:	1011883a 	mov	r8,r2
  e06980:	b5800044 	addi	r22,r22,1
  e06984:	1813883a 	mov	r9,r3
  e06988:	8021d07a 	srai	r16,r16,1
  e0698c:	8c400204 	addi	r17,r17,8
  e06990:	803ff21e 	bne	r16,zero,e0695c <_dtoa_r+0xd18>
  e06994:	4029883a 	mov	r20,r8
  e06998:	482b883a 	mov	r21,r9
  e0699c:	003dca06 	br	e060c8 <_dtoa_r+0x484>
  e069a0:	d9000817 	ldw	r4,32(sp)
  e069a4:	2005003a 	cmpeq	r2,r4,zero
  e069a8:	1001f61e 	bne	r2,zero,e07184 <_dtoa_r+0x1540>
  e069ac:	dc001117 	ldw	r16,68(sp)
  e069b0:	dc801017 	ldw	r18,64(sp)
  e069b4:	18c10cc4 	addi	r3,r3,1075
  e069b8:	003f6106 	br	e06740 <_dtoa_r+0xafc>
  e069bc:	d8000b15 	stw	zero,44(sp)
  e069c0:	d9802617 	ldw	r6,152(sp)
  e069c4:	d8c00d17 	ldw	r3,52(sp)
  e069c8:	30800044 	addi	r2,r6,1
  e069cc:	18ad883a 	add	r22,r3,r2
  e069d0:	b13fffc4 	addi	r4,r22,-1
  e069d4:	d9000e15 	stw	r4,56(sp)
  e069d8:	0581f60e 	bge	zero,r22,e071b4 <_dtoa_r+0x1570>
  e069dc:	dd800f15 	stw	r22,60(sp)
  e069e0:	003f3006 	br	e066a4 <_dtoa_r+0xa60>
  e069e4:	d8000b15 	stw	zero,44(sp)
  e069e8:	d9002617 	ldw	r4,152(sp)
  e069ec:	0101eb0e 	bge	zero,r4,e0719c <_dtoa_r+0x1558>
  e069f0:	202d883a 	mov	r22,r4
  e069f4:	d9000e15 	stw	r4,56(sp)
  e069f8:	d9000f15 	stw	r4,60(sp)
  e069fc:	003f2906 	br	e066a4 <_dtoa_r+0xa60>
  e06a00:	01800044 	movi	r6,1
  e06a04:	d9800b15 	stw	r6,44(sp)
  e06a08:	003ff706 	br	e069e8 <_dtoa_r+0xda4>
  e06a0c:	01000044 	movi	r4,1
  e06a10:	d9000b15 	stw	r4,44(sp)
  e06a14:	003fea06 	br	e069c0 <_dtoa_r+0xd7c>
  e06a18:	04000c0e 	bge	zero,r16,e06a4c <_dtoa_r+0xe08>
  e06a1c:	d9400717 	ldw	r5,28(sp)
  e06a20:	d9001617 	ldw	r4,88(sp)
  e06a24:	01800044 	movi	r6,1
  e06a28:	0e0971c0 	call	e0971c <__lshift>
  e06a2c:	1009883a 	mov	r4,r2
  e06a30:	900b883a 	mov	r5,r18
  e06a34:	d8800715 	stw	r2,28(sp)
  e06a38:	0e08f340 	call	e08f34 <__mcmp>
  e06a3c:	0081e00e 	bge	zero,r2,e071c0 <_dtoa_r+0x157c>
  e06a40:	bdc00044 	addi	r23,r23,1
  e06a44:	00800e84 	movi	r2,58
  e06a48:	b881a226 	beq	r23,r2,e070d4 <_dtoa_r+0x1490>
  e06a4c:	b7000044 	addi	fp,r22,1
  e06a50:	b5c00005 	stb	r23,0(r22)
  e06a54:	003f7406 	br	e06828 <_dtoa_r+0xbe4>
  e06a58:	00800e44 	movi	r2,57
  e06a5c:	b8819d26 	beq	r23,r2,e070d4 <_dtoa_r+0x1490>
  e06a60:	053ffa0e 	bge	zero,r20,e06a4c <_dtoa_r+0xe08>
  e06a64:	8dc00c44 	addi	r23,r17,49
  e06a68:	003ff806 	br	e06a4c <_dtoa_r+0xe08>
  e06a6c:	d9001617 	ldw	r4,88(sp)
  e06a70:	a80b883a 	mov	r5,r21
  e06a74:	04000044 	movi	r16,1
  e06a78:	0e08dd80 	call	e08dd8 <_Bfree>
  e06a7c:	003edf06 	br	e065fc <_dtoa_r+0x9b8>
  e06a80:	d9001617 	ldw	r4,88(sp)
  e06a84:	980b883a 	mov	r5,r19
  e06a88:	01800284 	movi	r6,10
  e06a8c:	000f883a 	mov	r7,zero
  e06a90:	0e09a8c0 	call	e09a8c <__multadd>
  e06a94:	1027883a 	mov	r19,r2
  e06a98:	d8800615 	stw	r2,24(sp)
  e06a9c:	003ebb06 	br	e0658c <_dtoa_r+0x948>
  e06aa0:	d9801117 	ldw	r6,68(sp)
  e06aa4:	d8800d17 	ldw	r2,52(sp)
  e06aa8:	d8000915 	stw	zero,36(sp)
  e06aac:	308dc83a 	sub	r6,r6,r2
  e06ab0:	0087c83a 	sub	r3,zero,r2
  e06ab4:	d9801115 	stw	r6,68(sp)
  e06ab8:	d8c01015 	stw	r3,64(sp)
  e06abc:	003cfe06 	br	e05eb8 <_dtoa_r+0x274>
  e06ac0:	018dc83a 	sub	r6,zero,r6
  e06ac4:	d9801115 	stw	r6,68(sp)
  e06ac8:	d8000a15 	stw	zero,40(sp)
  e06acc:	003cf306 	br	e05e9c <_dtoa_r+0x258>
  e06ad0:	d9000d17 	ldw	r4,52(sp)
  e06ad4:	0e0bcac0 	call	e0bcac <__floatsidf>
  e06ad8:	880b883a 	mov	r5,r17
  e06adc:	8009883a 	mov	r4,r16
  e06ae0:	180f883a 	mov	r7,r3
  e06ae4:	100d883a 	mov	r6,r2
  e06ae8:	0e02ce80 	call	e02ce8 <__nedf2>
  e06aec:	103ce126 	beq	r2,zero,e05e74 <_dtoa_r+0x230>
  e06af0:	d9800d17 	ldw	r6,52(sp)
  e06af4:	31bfffc4 	addi	r6,r6,-1
  e06af8:	d9800d15 	stw	r6,52(sp)
  e06afc:	003cdd06 	br	e05e74 <_dtoa_r+0x230>
  e06b00:	d9000717 	ldw	r4,28(sp)
  e06b04:	900b883a 	mov	r5,r18
  e06b08:	0e08f340 	call	e08f34 <__mcmp>
  e06b0c:	103e8d0e 	bge	r2,zero,e06544 <_dtoa_r+0x900>
  e06b10:	d9400717 	ldw	r5,28(sp)
  e06b14:	d9001617 	ldw	r4,88(sp)
  e06b18:	01800284 	movi	r6,10
  e06b1c:	000f883a 	mov	r7,zero
  e06b20:	0e09a8c0 	call	e09a8c <__multadd>
  e06b24:	d9800d17 	ldw	r6,52(sp)
  e06b28:	d8800715 	stw	r2,28(sp)
  e06b2c:	31bfffc4 	addi	r6,r6,-1
  e06b30:	d9800d15 	stw	r6,52(sp)
  e06b34:	b001a71e 	bne	r22,zero,e071d4 <_dtoa_r+0x1590>
  e06b38:	d8800e17 	ldw	r2,56(sp)
  e06b3c:	d8800f15 	stw	r2,60(sp)
  e06b40:	003e8006 	br	e06544 <_dtoa_r+0x900>
  e06b44:	90800417 	ldw	r2,16(r18)
  e06b48:	1085883a 	add	r2,r2,r2
  e06b4c:	1085883a 	add	r2,r2,r2
  e06b50:	1485883a 	add	r2,r2,r18
  e06b54:	11000417 	ldw	r4,16(r2)
  e06b58:	0e08e000 	call	e08e00 <__hi0bits>
  e06b5c:	00c00804 	movi	r3,32
  e06b60:	1887c83a 	sub	r3,r3,r2
  e06b64:	003e5a06 	br	e064d0 <_dtoa_r+0x88c>
  e06b68:	d9400717 	ldw	r5,28(sp)
  e06b6c:	d9801017 	ldw	r6,64(sp)
  e06b70:	d9001617 	ldw	r4,88(sp)
  e06b74:	0e09b8c0 	call	e09b8c <__pow5mult>
  e06b78:	d8800715 	stw	r2,28(sp)
  e06b7c:	003e4306 	br	e0648c <_dtoa_r+0x848>
  e06b80:	d9800f17 	ldw	r6,60(sp)
  e06b84:	d8800d17 	ldw	r2,52(sp)
  e06b88:	d9800315 	stw	r6,12(sp)
  e06b8c:	d8800415 	stw	r2,16(sp)
  e06b90:	d8c00b17 	ldw	r3,44(sp)
  e06b94:	1805003a 	cmpeq	r2,r3,zero
  e06b98:	1000e21e 	bne	r2,zero,e06f24 <_dtoa_r+0x12e0>
  e06b9c:	d9000317 	ldw	r4,12(sp)
  e06ba0:	0005883a 	mov	r2,zero
  e06ba4:	00cff834 	movhi	r3,16352
  e06ba8:	200c90fa 	slli	r6,r4,3
  e06bac:	01003874 	movhi	r4,225
  e06bb0:	2103c804 	addi	r4,r4,3872
  e06bb4:	180b883a 	mov	r5,r3
  e06bb8:	310d883a 	add	r6,r6,r4
  e06bbc:	327fff17 	ldw	r9,-4(r6)
  e06bc0:	323ffe17 	ldw	r8,-8(r6)
  e06bc4:	1009883a 	mov	r4,r2
  e06bc8:	480f883a 	mov	r7,r9
  e06bcc:	400d883a 	mov	r6,r8
  e06bd0:	0e02a900 	call	e02a90 <__divdf3>
  e06bd4:	180b883a 	mov	r5,r3
  e06bd8:	b00d883a 	mov	r6,r22
  e06bdc:	b80f883a 	mov	r7,r23
  e06be0:	1009883a 	mov	r4,r2
  e06be4:	0e0299c0 	call	e0299c <__subdf3>
  e06be8:	a80b883a 	mov	r5,r21
  e06bec:	a009883a 	mov	r4,r20
  e06bf0:	d8c01915 	stw	r3,100(sp)
  e06bf4:	d8801815 	stw	r2,96(sp)
  e06bf8:	0e0bda40 	call	e0bda4 <__fixdfsi>
  e06bfc:	1009883a 	mov	r4,r2
  e06c00:	1027883a 	mov	r19,r2
  e06c04:	0e0bcac0 	call	e0bcac <__floatsidf>
  e06c08:	a80b883a 	mov	r5,r21
  e06c0c:	a009883a 	mov	r4,r20
  e06c10:	180f883a 	mov	r7,r3
  e06c14:	100d883a 	mov	r6,r2
  e06c18:	0e0299c0 	call	e0299c <__subdf3>
  e06c1c:	d9801817 	ldw	r6,96(sp)
  e06c20:	1823883a 	mov	r17,r3
  e06c24:	d8801415 	stw	r2,80(sp)
  e06c28:	302d883a 	mov	r22,r6
  e06c2c:	d9800517 	ldw	r6,20(sp)
  e06c30:	9cc00c04 	addi	r19,r19,48
  e06c34:	dc401515 	stw	r17,84(sp)
  e06c38:	d8c01917 	ldw	r3,100(sp)
  e06c3c:	34c00005 	stb	r19,0(r6)
  e06c40:	d8800517 	ldw	r2,20(sp)
  e06c44:	d9401917 	ldw	r5,100(sp)
  e06c48:	d9801417 	ldw	r6,80(sp)
  e06c4c:	b009883a 	mov	r4,r22
  e06c50:	880f883a 	mov	r7,r17
  e06c54:	182f883a 	mov	r23,r3
  e06c58:	17000044 	addi	fp,r2,1
  e06c5c:	0e0bb140 	call	e0bb14 <__gtdf2>
  e06c60:	00804e16 	blt	zero,r2,e06d9c <_dtoa_r+0x1158>
  e06c64:	d9801417 	ldw	r6,80(sp)
  e06c68:	0005883a 	mov	r2,zero
  e06c6c:	00cffc34 	movhi	r3,16368
  e06c70:	180b883a 	mov	r5,r3
  e06c74:	880f883a 	mov	r7,r17
  e06c78:	1009883a 	mov	r4,r2
  e06c7c:	0e0299c0 	call	e0299c <__subdf3>
  e06c80:	d9401917 	ldw	r5,100(sp)
  e06c84:	180f883a 	mov	r7,r3
  e06c88:	b009883a 	mov	r4,r22
  e06c8c:	100d883a 	mov	r6,r2
  e06c90:	0e0bb140 	call	e0bb14 <__gtdf2>
  e06c94:	00bda216 	blt	zero,r2,e06320 <_dtoa_r+0x6dc>
  e06c98:	d8c00317 	ldw	r3,12(sp)
  e06c9c:	00800044 	movi	r2,1
  e06ca0:	10c01216 	blt	r2,r3,e06cec <_dtoa_r+0x10a8>
  e06ca4:	003d4506 	br	e061bc <_dtoa_r+0x578>
  e06ca8:	d9801417 	ldw	r6,80(sp)
  e06cac:	0005883a 	mov	r2,zero
  e06cb0:	00cffc34 	movhi	r3,16368
  e06cb4:	180b883a 	mov	r5,r3
  e06cb8:	880f883a 	mov	r7,r17
  e06cbc:	1009883a 	mov	r4,r2
  e06cc0:	0e0299c0 	call	e0299c <__subdf3>
  e06cc4:	d9c01b17 	ldw	r7,108(sp)
  e06cc8:	180b883a 	mov	r5,r3
  e06ccc:	1009883a 	mov	r4,r2
  e06cd0:	b00d883a 	mov	r6,r22
  e06cd4:	0e0bc240 	call	e0bc24 <__ltdf2>
  e06cd8:	103d9116 	blt	r2,zero,e06320 <_dtoa_r+0x6dc>
  e06cdc:	d9800517 	ldw	r6,20(sp)
  e06ce0:	d9000317 	ldw	r4,12(sp)
  e06ce4:	3105883a 	add	r2,r6,r4
  e06ce8:	e0bd3426 	beq	fp,r2,e061bc <_dtoa_r+0x578>
  e06cec:	04500934 	movhi	r17,16420
  e06cf0:	0021883a 	mov	r16,zero
  e06cf4:	b80b883a 	mov	r5,r23
  e06cf8:	b009883a 	mov	r4,r22
  e06cfc:	800d883a 	mov	r6,r16
  e06d00:	880f883a 	mov	r7,r17
  e06d04:	0e0b6c80 	call	e0b6c8 <__muldf3>
  e06d08:	d9401517 	ldw	r5,84(sp)
  e06d0c:	d9001417 	ldw	r4,80(sp)
  e06d10:	880f883a 	mov	r7,r17
  e06d14:	000d883a 	mov	r6,zero
  e06d18:	d8801a15 	stw	r2,104(sp)
  e06d1c:	d8c01b15 	stw	r3,108(sp)
  e06d20:	0e0b6c80 	call	e0b6c8 <__muldf3>
  e06d24:	180b883a 	mov	r5,r3
  e06d28:	1009883a 	mov	r4,r2
  e06d2c:	1823883a 	mov	r17,r3
  e06d30:	1021883a 	mov	r16,r2
  e06d34:	0e0bda40 	call	e0bda4 <__fixdfsi>
  e06d38:	1009883a 	mov	r4,r2
  e06d3c:	102b883a 	mov	r21,r2
  e06d40:	0e0bcac0 	call	e0bcac <__floatsidf>
  e06d44:	880b883a 	mov	r5,r17
  e06d48:	8009883a 	mov	r4,r16
  e06d4c:	180f883a 	mov	r7,r3
  e06d50:	100d883a 	mov	r6,r2
  e06d54:	0e0299c0 	call	e0299c <__subdf3>
  e06d58:	1021883a 	mov	r16,r2
  e06d5c:	d9001b17 	ldw	r4,108(sp)
  e06d60:	1823883a 	mov	r17,r3
  e06d64:	dc001415 	stw	r16,80(sp)
  e06d68:	ad400c04 	addi	r21,r21,48
  e06d6c:	dc401515 	stw	r17,84(sp)
  e06d70:	d8801a17 	ldw	r2,104(sp)
  e06d74:	e5400005 	stb	r21,0(fp)
  e06d78:	202f883a 	mov	r23,r4
  e06d7c:	d9c01b17 	ldw	r7,108(sp)
  e06d80:	d9001417 	ldw	r4,80(sp)
  e06d84:	880b883a 	mov	r5,r17
  e06d88:	100d883a 	mov	r6,r2
  e06d8c:	102d883a 	mov	r22,r2
  e06d90:	e7000044 	addi	fp,fp,1
  e06d94:	0e0bc240 	call	e0bc24 <__ltdf2>
  e06d98:	103fc30e 	bge	r2,zero,e06ca8 <_dtoa_r+0x1064>
  e06d9c:	d9000417 	ldw	r4,16(sp)
  e06da0:	d9000d15 	stw	r4,52(sp)
  e06da4:	003d7106 	br	e0636c <_dtoa_r+0x728>
  e06da8:	d9801717 	ldw	r6,92(sp)
  e06dac:	00800084 	movi	r2,2
  e06db0:	11bde60e 	bge	r2,r6,e0654c <_dtoa_r+0x908>
  e06db4:	203cfb1e 	bne	r4,zero,e061a4 <_dtoa_r+0x560>
  e06db8:	d9001617 	ldw	r4,88(sp)
  e06dbc:	900b883a 	mov	r5,r18
  e06dc0:	01800144 	movi	r6,5
  e06dc4:	000f883a 	mov	r7,zero
  e06dc8:	0e09a8c0 	call	e09a8c <__multadd>
  e06dcc:	d9000717 	ldw	r4,28(sp)
  e06dd0:	100b883a 	mov	r5,r2
  e06dd4:	1025883a 	mov	r18,r2
  e06dd8:	0e08f340 	call	e08f34 <__mcmp>
  e06ddc:	00bcf10e 	bge	zero,r2,e061a4 <_dtoa_r+0x560>
  e06de0:	d8c00d17 	ldw	r3,52(sp)
  e06de4:	d9000517 	ldw	r4,20(sp)
  e06de8:	d8000615 	stw	zero,24(sp)
  e06dec:	18c00044 	addi	r3,r3,1
  e06df0:	d8c00d15 	stw	r3,52(sp)
  e06df4:	00800c44 	movi	r2,49
  e06df8:	27000044 	addi	fp,r4,1
  e06dfc:	20800005 	stb	r2,0(r4)
  e06e00:	003e8906 	br	e06828 <_dtoa_r+0xbe4>
  e06e04:	d8c00517 	ldw	r3,20(sp)
  e06e08:	003bc206 	br	e05d14 <_dtoa_r+0xd0>
  e06e0c:	01803874 	movhi	r6,225
  e06e10:	3183fa04 	addi	r6,r6,4072
  e06e14:	30c00917 	ldw	r3,36(r6)
  e06e18:	30800817 	ldw	r2,32(r6)
  e06e1c:	d9001217 	ldw	r4,72(sp)
  e06e20:	d9401317 	ldw	r5,76(sp)
  e06e24:	180f883a 	mov	r7,r3
  e06e28:	100d883a 	mov	r6,r2
  e06e2c:	0e02a900 	call	e02a90 <__divdf3>
  e06e30:	948003cc 	andi	r18,r18,15
  e06e34:	058000c4 	movi	r22,3
  e06e38:	1029883a 	mov	r20,r2
  e06e3c:	182b883a 	mov	r21,r3
  e06e40:	003c8906 	br	e06068 <_dtoa_r+0x424>
  e06e44:	d9001017 	ldw	r4,64(sp)
  e06e48:	d9800917 	ldw	r6,36(sp)
  e06e4c:	0025883a 	mov	r18,zero
  e06e50:	1105c83a 	sub	r2,r2,r4
  e06e54:	2089883a 	add	r4,r4,r2
  e06e58:	308d883a 	add	r6,r6,r2
  e06e5c:	d9001015 	stw	r4,64(sp)
  e06e60:	d9800915 	stw	r6,36(sp)
  e06e64:	003e3206 	br	e06730 <_dtoa_r+0xaec>
  e06e68:	28800044 	addi	r2,r5,1
  e06e6c:	27000044 	addi	fp,r4,1
  e06e70:	20800005 	stb	r2,0(r4)
  e06e74:	003e6c06 	br	e06828 <_dtoa_r+0xbe4>
  e06e78:	d8800f17 	ldw	r2,60(sp)
  e06e7c:	00bce016 	blt	zero,r2,e06200 <_dtoa_r+0x5bc>
  e06e80:	d9800f17 	ldw	r6,60(sp)
  e06e84:	303cc51e 	bne	r6,zero,e0619c <_dtoa_r+0x558>
  e06e88:	0005883a 	mov	r2,zero
  e06e8c:	00d00534 	movhi	r3,16404
  e06e90:	980b883a 	mov	r5,r19
  e06e94:	180f883a 	mov	r7,r3
  e06e98:	9009883a 	mov	r4,r18
  e06e9c:	100d883a 	mov	r6,r2
  e06ea0:	0e0b6c80 	call	e0b6c8 <__muldf3>
  e06ea4:	180b883a 	mov	r5,r3
  e06ea8:	a80f883a 	mov	r7,r21
  e06eac:	1009883a 	mov	r4,r2
  e06eb0:	a00d883a 	mov	r6,r20
  e06eb4:	0e0bb9c0 	call	e0bb9c <__gedf2>
  e06eb8:	103cb80e 	bge	r2,zero,e0619c <_dtoa_r+0x558>
  e06ebc:	0027883a 	mov	r19,zero
  e06ec0:	0025883a 	mov	r18,zero
  e06ec4:	003fc606 	br	e06de0 <_dtoa_r+0x119c>
  e06ec8:	99400117 	ldw	r5,4(r19)
  e06ecc:	d9001617 	ldw	r4,88(sp)
  e06ed0:	0e093580 	call	e09358 <_Balloc>
  e06ed4:	99800417 	ldw	r6,16(r19)
  e06ed8:	11000304 	addi	r4,r2,12
  e06edc:	99400304 	addi	r5,r19,12
  e06ee0:	318d883a 	add	r6,r6,r6
  e06ee4:	318d883a 	add	r6,r6,r6
  e06ee8:	31800204 	addi	r6,r6,8
  e06eec:	1023883a 	mov	r17,r2
  e06ef0:	0e08bc00 	call	e08bc0 <memcpy>
  e06ef4:	d9001617 	ldw	r4,88(sp)
  e06ef8:	880b883a 	mov	r5,r17
  e06efc:	01800044 	movi	r6,1
  e06f00:	0e0971c0 	call	e0971c <__lshift>
  e06f04:	100b883a 	mov	r5,r2
  e06f08:	003d9c06 	br	e0657c <_dtoa_r+0x938>
  e06f0c:	00800e44 	movi	r2,57
  e06f10:	b8807026 	beq	r23,r2,e070d4 <_dtoa_r+0x1490>
  e06f14:	b8800044 	addi	r2,r23,1
  e06f18:	b7000044 	addi	fp,r22,1
  e06f1c:	b0800005 	stb	r2,0(r22)
  e06f20:	003e4106 	br	e06828 <_dtoa_r+0xbe4>
  e06f24:	d8800317 	ldw	r2,12(sp)
  e06f28:	01803874 	movhi	r6,225
  e06f2c:	3183c804 	addi	r6,r6,3872
  e06f30:	b009883a 	mov	r4,r22
  e06f34:	100e90fa 	slli	r7,r2,3
  e06f38:	b80b883a 	mov	r5,r23
  e06f3c:	398f883a 	add	r7,r7,r6
  e06f40:	38bffe17 	ldw	r2,-8(r7)
  e06f44:	d9800517 	ldw	r6,20(sp)
  e06f48:	38ffff17 	ldw	r3,-4(r7)
  e06f4c:	37000044 	addi	fp,r6,1
  e06f50:	180f883a 	mov	r7,r3
  e06f54:	100d883a 	mov	r6,r2
  e06f58:	0e0b6c80 	call	e0b6c8 <__muldf3>
  e06f5c:	a80b883a 	mov	r5,r21
  e06f60:	a009883a 	mov	r4,r20
  e06f64:	182f883a 	mov	r23,r3
  e06f68:	102d883a 	mov	r22,r2
  e06f6c:	0e0bda40 	call	e0bda4 <__fixdfsi>
  e06f70:	1009883a 	mov	r4,r2
  e06f74:	1027883a 	mov	r19,r2
  e06f78:	0e0bcac0 	call	e0bcac <__floatsidf>
  e06f7c:	a80b883a 	mov	r5,r21
  e06f80:	a009883a 	mov	r4,r20
  e06f84:	180f883a 	mov	r7,r3
  e06f88:	100d883a 	mov	r6,r2
  e06f8c:	0e0299c0 	call	e0299c <__subdf3>
  e06f90:	180b883a 	mov	r5,r3
  e06f94:	d8c00517 	ldw	r3,20(sp)
  e06f98:	9cc00c04 	addi	r19,r19,48
  e06f9c:	1009883a 	mov	r4,r2
  e06fa0:	1cc00005 	stb	r19,0(r3)
  e06fa4:	2021883a 	mov	r16,r4
  e06fa8:	d9000317 	ldw	r4,12(sp)
  e06fac:	00800044 	movi	r2,1
  e06fb0:	2823883a 	mov	r17,r5
  e06fb4:	20802226 	beq	r4,r2,e07040 <_dtoa_r+0x13fc>
  e06fb8:	1029883a 	mov	r20,r2
  e06fbc:	0005883a 	mov	r2,zero
  e06fc0:	00d00934 	movhi	r3,16420
  e06fc4:	180f883a 	mov	r7,r3
  e06fc8:	100d883a 	mov	r6,r2
  e06fcc:	880b883a 	mov	r5,r17
  e06fd0:	8009883a 	mov	r4,r16
  e06fd4:	0e0b6c80 	call	e0b6c8 <__muldf3>
  e06fd8:	180b883a 	mov	r5,r3
  e06fdc:	1009883a 	mov	r4,r2
  e06fe0:	1823883a 	mov	r17,r3
  e06fe4:	1021883a 	mov	r16,r2
  e06fe8:	0e0bda40 	call	e0bda4 <__fixdfsi>
  e06fec:	1009883a 	mov	r4,r2
  e06ff0:	102b883a 	mov	r21,r2
  e06ff4:	0e0bcac0 	call	e0bcac <__floatsidf>
  e06ff8:	880b883a 	mov	r5,r17
  e06ffc:	8009883a 	mov	r4,r16
  e07000:	180f883a 	mov	r7,r3
  e07004:	100d883a 	mov	r6,r2
  e07008:	0e0299c0 	call	e0299c <__subdf3>
  e0700c:	180b883a 	mov	r5,r3
  e07010:	d8c00517 	ldw	r3,20(sp)
  e07014:	1009883a 	mov	r4,r2
  e07018:	ad400c04 	addi	r21,r21,48
  e0701c:	1d05883a 	add	r2,r3,r20
  e07020:	15400005 	stb	r21,0(r2)
  e07024:	2021883a 	mov	r16,r4
  e07028:	d9000317 	ldw	r4,12(sp)
  e0702c:	a5000044 	addi	r20,r20,1
  e07030:	2823883a 	mov	r17,r5
  e07034:	a13fe11e 	bne	r20,r4,e06fbc <_dtoa_r+0x1378>
  e07038:	e505883a 	add	r2,fp,r20
  e0703c:	173fffc4 	addi	fp,r2,-1
  e07040:	0025883a 	mov	r18,zero
  e07044:	04cff834 	movhi	r19,16352
  e07048:	b009883a 	mov	r4,r22
  e0704c:	b80b883a 	mov	r5,r23
  e07050:	900d883a 	mov	r6,r18
  e07054:	980f883a 	mov	r7,r19
  e07058:	0e02a1c0 	call	e02a1c <__adddf3>
  e0705c:	180b883a 	mov	r5,r3
  e07060:	1009883a 	mov	r4,r2
  e07064:	800d883a 	mov	r6,r16
  e07068:	880f883a 	mov	r7,r17
  e0706c:	0e0bc240 	call	e0bc24 <__ltdf2>
  e07070:	103cab16 	blt	r2,zero,e06320 <_dtoa_r+0x6dc>
  e07074:	0009883a 	mov	r4,zero
  e07078:	980b883a 	mov	r5,r19
  e0707c:	b80f883a 	mov	r7,r23
  e07080:	b00d883a 	mov	r6,r22
  e07084:	0e0299c0 	call	e0299c <__subdf3>
  e07088:	180b883a 	mov	r5,r3
  e0708c:	880f883a 	mov	r7,r17
  e07090:	1009883a 	mov	r4,r2
  e07094:	800d883a 	mov	r6,r16
  e07098:	0e0bb140 	call	e0bb14 <__gtdf2>
  e0709c:	00bc470e 	bge	zero,r2,e061bc <_dtoa_r+0x578>
  e070a0:	00c00c04 	movi	r3,48
  e070a4:	e73fffc4 	addi	fp,fp,-1
  e070a8:	e0800007 	ldb	r2,0(fp)
  e070ac:	10fffd26 	beq	r2,r3,e070a4 <_dtoa_r+0x1460>
  e070b0:	d9800417 	ldw	r6,16(sp)
  e070b4:	e7000044 	addi	fp,fp,1
  e070b8:	d9800d15 	stw	r6,52(sp)
  e070bc:	003cab06 	br	e0636c <_dtoa_r+0x728>
  e070c0:	d8c00f17 	ldw	r3,60(sp)
  e070c4:	d9001117 	ldw	r4,68(sp)
  e070c8:	20e1c83a 	sub	r16,r4,r3
  e070cc:	0007883a 	mov	r3,zero
  e070d0:	003d9b06 	br	e06740 <_dtoa_r+0xafc>
  e070d4:	00800e44 	movi	r2,57
  e070d8:	b0800005 	stb	r2,0(r22)
  e070dc:	b5800044 	addi	r22,r22,1
  e070e0:	003dc106 	br	e067e8 <_dtoa_r+0xba4>
  e070e4:	05800084 	movi	r22,2
  e070e8:	003bf706 	br	e060c8 <_dtoa_r+0x484>
  e070ec:	d9000f17 	ldw	r4,60(sp)
  e070f0:	013c000e 	bge	zero,r4,e060f4 <_dtoa_r+0x4b0>
  e070f4:	d9800e17 	ldw	r6,56(sp)
  e070f8:	01bc300e 	bge	zero,r6,e061bc <_dtoa_r+0x578>
  e070fc:	0005883a 	mov	r2,zero
  e07100:	00d00934 	movhi	r3,16420
  e07104:	a80b883a 	mov	r5,r21
  e07108:	180f883a 	mov	r7,r3
  e0710c:	a009883a 	mov	r4,r20
  e07110:	100d883a 	mov	r6,r2
  e07114:	0e0b6c80 	call	e0b6c8 <__muldf3>
  e07118:	b1000044 	addi	r4,r22,1
  e0711c:	1021883a 	mov	r16,r2
  e07120:	1823883a 	mov	r17,r3
  e07124:	0e0bcac0 	call	e0bcac <__floatsidf>
  e07128:	880b883a 	mov	r5,r17
  e0712c:	8009883a 	mov	r4,r16
  e07130:	180f883a 	mov	r7,r3
  e07134:	100d883a 	mov	r6,r2
  e07138:	0e0b6c80 	call	e0b6c8 <__muldf3>
  e0713c:	0011883a 	mov	r8,zero
  e07140:	02500734 	movhi	r9,16412
  e07144:	180b883a 	mov	r5,r3
  e07148:	480f883a 	mov	r7,r9
  e0714c:	1009883a 	mov	r4,r2
  e07150:	400d883a 	mov	r6,r8
  e07154:	0e02a1c0 	call	e02a1c <__adddf3>
  e07158:	102d883a 	mov	r22,r2
  e0715c:	00bf3034 	movhi	r2,64704
  e07160:	10ef883a 	add	r23,r2,r3
  e07164:	d8800d17 	ldw	r2,52(sp)
  e07168:	d8c00e17 	ldw	r3,56(sp)
  e0716c:	8029883a 	mov	r20,r16
  e07170:	10bfffc4 	addi	r2,r2,-1
  e07174:	882b883a 	mov	r21,r17
  e07178:	d8800415 	stw	r2,16(sp)
  e0717c:	d8c00315 	stw	r3,12(sp)
  e07180:	003e8306 	br	e06b90 <_dtoa_r+0xf4c>
  e07184:	d8800117 	ldw	r2,4(sp)
  e07188:	dc001117 	ldw	r16,68(sp)
  e0718c:	dc801017 	ldw	r18,64(sp)
  e07190:	00c00d84 	movi	r3,54
  e07194:	1887c83a 	sub	r3,r3,r2
  e07198:	003d6906 	br	e06740 <_dtoa_r+0xafc>
  e0719c:	01800044 	movi	r6,1
  e071a0:	3021883a 	mov	r16,r6
  e071a4:	d9800f15 	stw	r6,60(sp)
  e071a8:	d9802615 	stw	r6,152(sp)
  e071ac:	d9800e15 	stw	r6,56(sp)
  e071b0:	003b9306 	br	e06000 <_dtoa_r+0x3bc>
  e071b4:	b021883a 	mov	r16,r22
  e071b8:	dd800f15 	stw	r22,60(sp)
  e071bc:	003b9006 	br	e06000 <_dtoa_r+0x3bc>
  e071c0:	103e221e 	bne	r2,zero,e06a4c <_dtoa_r+0xe08>
  e071c4:	b880004c 	andi	r2,r23,1
  e071c8:	1005003a 	cmpeq	r2,r2,zero
  e071cc:	103e1f1e 	bne	r2,zero,e06a4c <_dtoa_r+0xe08>
  e071d0:	003e1b06 	br	e06a40 <_dtoa_r+0xdfc>
  e071d4:	d9001617 	ldw	r4,88(sp)
  e071d8:	980b883a 	mov	r5,r19
  e071dc:	01800284 	movi	r6,10
  e071e0:	000f883a 	mov	r7,zero
  e071e4:	0e09a8c0 	call	e09a8c <__multadd>
  e071e8:	d8c00e17 	ldw	r3,56(sp)
  e071ec:	1027883a 	mov	r19,r2
  e071f0:	d8c00f15 	stw	r3,60(sp)
  e071f4:	003cd306 	br	e06544 <_dtoa_r+0x900>

00e071f8 <_fflush_r>:
  e071f8:	defffb04 	addi	sp,sp,-20
  e071fc:	dcc00315 	stw	r19,12(sp)
  e07200:	dc800215 	stw	r18,8(sp)
  e07204:	dfc00415 	stw	ra,16(sp)
  e07208:	dc400115 	stw	r17,4(sp)
  e0720c:	dc000015 	stw	r16,0(sp)
  e07210:	2027883a 	mov	r19,r4
  e07214:	2825883a 	mov	r18,r5
  e07218:	20000226 	beq	r4,zero,e07224 <_fflush_r+0x2c>
  e0721c:	20800e17 	ldw	r2,56(r4)
  e07220:	10005626 	beq	r2,zero,e0737c <_fflush_r+0x184>
  e07224:	9100030b 	ldhu	r4,12(r18)
  e07228:	20ffffcc 	andi	r3,r4,65535
  e0722c:	18e0001c 	xori	r3,r3,32768
  e07230:	18e00004 	addi	r3,r3,-32768
  e07234:	1880020c 	andi	r2,r3,8
  e07238:	1000261e 	bne	r2,zero,e072d4 <_fflush_r+0xdc>
  e0723c:	90c00117 	ldw	r3,4(r18)
  e07240:	20820014 	ori	r2,r4,2048
  e07244:	9080030d 	sth	r2,12(r18)
  e07248:	1009883a 	mov	r4,r2
  e0724c:	00c0400e 	bge	zero,r3,e07350 <_fflush_r+0x158>
  e07250:	92000a17 	ldw	r8,40(r18)
  e07254:	40004026 	beq	r8,zero,e07358 <_fflush_r+0x160>
  e07258:	2084000c 	andi	r2,r4,4096
  e0725c:	10005326 	beq	r2,zero,e073ac <_fflush_r+0x1b4>
  e07260:	94001417 	ldw	r16,80(r18)
  e07264:	9080030b 	ldhu	r2,12(r18)
  e07268:	1080010c 	andi	r2,r2,4
  e0726c:	1000481e 	bne	r2,zero,e07390 <_fflush_r+0x198>
  e07270:	91400717 	ldw	r5,28(r18)
  e07274:	9809883a 	mov	r4,r19
  e07278:	800d883a 	mov	r6,r16
  e0727c:	000f883a 	mov	r7,zero
  e07280:	403ee83a 	callr	r8
  e07284:	8080261e 	bne	r16,r2,e07320 <_fflush_r+0x128>
  e07288:	9080030b 	ldhu	r2,12(r18)
  e0728c:	91000417 	ldw	r4,16(r18)
  e07290:	90000115 	stw	zero,4(r18)
  e07294:	10bdffcc 	andi	r2,r2,63487
  e07298:	10ffffcc 	andi	r3,r2,65535
  e0729c:	18c4000c 	andi	r3,r3,4096
  e072a0:	9080030d 	sth	r2,12(r18)
  e072a4:	91000015 	stw	r4,0(r18)
  e072a8:	18002b26 	beq	r3,zero,e07358 <_fflush_r+0x160>
  e072ac:	0007883a 	mov	r3,zero
  e072b0:	1805883a 	mov	r2,r3
  e072b4:	94001415 	stw	r16,80(r18)
  e072b8:	dfc00417 	ldw	ra,16(sp)
  e072bc:	dcc00317 	ldw	r19,12(sp)
  e072c0:	dc800217 	ldw	r18,8(sp)
  e072c4:	dc400117 	ldw	r17,4(sp)
  e072c8:	dc000017 	ldw	r16,0(sp)
  e072cc:	dec00504 	addi	sp,sp,20
  e072d0:	f800283a 	ret
  e072d4:	94400417 	ldw	r17,16(r18)
  e072d8:	88001f26 	beq	r17,zero,e07358 <_fflush_r+0x160>
  e072dc:	90800017 	ldw	r2,0(r18)
  e072e0:	18c000cc 	andi	r3,r3,3
  e072e4:	94400015 	stw	r17,0(r18)
  e072e8:	1461c83a 	sub	r16,r2,r17
  e072ec:	18002526 	beq	r3,zero,e07384 <_fflush_r+0x18c>
  e072f0:	0005883a 	mov	r2,zero
  e072f4:	90800215 	stw	r2,8(r18)
  e072f8:	0400170e 	bge	zero,r16,e07358 <_fflush_r+0x160>
  e072fc:	90c00917 	ldw	r3,36(r18)
  e07300:	91400717 	ldw	r5,28(r18)
  e07304:	880d883a 	mov	r6,r17
  e07308:	800f883a 	mov	r7,r16
  e0730c:	9809883a 	mov	r4,r19
  e07310:	183ee83a 	callr	r3
  e07314:	88a3883a 	add	r17,r17,r2
  e07318:	80a1c83a 	sub	r16,r16,r2
  e0731c:	00bff616 	blt	zero,r2,e072f8 <_fflush_r+0x100>
  e07320:	9080030b 	ldhu	r2,12(r18)
  e07324:	00ffffc4 	movi	r3,-1
  e07328:	10801014 	ori	r2,r2,64
  e0732c:	9080030d 	sth	r2,12(r18)
  e07330:	1805883a 	mov	r2,r3
  e07334:	dfc00417 	ldw	ra,16(sp)
  e07338:	dcc00317 	ldw	r19,12(sp)
  e0733c:	dc800217 	ldw	r18,8(sp)
  e07340:	dc400117 	ldw	r17,4(sp)
  e07344:	dc000017 	ldw	r16,0(sp)
  e07348:	dec00504 	addi	sp,sp,20
  e0734c:	f800283a 	ret
  e07350:	90800f17 	ldw	r2,60(r18)
  e07354:	00bfbe16 	blt	zero,r2,e07250 <_fflush_r+0x58>
  e07358:	0007883a 	mov	r3,zero
  e0735c:	1805883a 	mov	r2,r3
  e07360:	dfc00417 	ldw	ra,16(sp)
  e07364:	dcc00317 	ldw	r19,12(sp)
  e07368:	dc800217 	ldw	r18,8(sp)
  e0736c:	dc400117 	ldw	r17,4(sp)
  e07370:	dc000017 	ldw	r16,0(sp)
  e07374:	dec00504 	addi	sp,sp,20
  e07378:	f800283a 	ret
  e0737c:	0e074900 	call	e07490 <__sinit>
  e07380:	003fa806 	br	e07224 <_fflush_r+0x2c>
  e07384:	90800517 	ldw	r2,20(r18)
  e07388:	90800215 	stw	r2,8(r18)
  e0738c:	003fda06 	br	e072f8 <_fflush_r+0x100>
  e07390:	90800117 	ldw	r2,4(r18)
  e07394:	90c00c17 	ldw	r3,48(r18)
  e07398:	80a1c83a 	sub	r16,r16,r2
  e0739c:	183fb426 	beq	r3,zero,e07270 <_fflush_r+0x78>
  e073a0:	90800f17 	ldw	r2,60(r18)
  e073a4:	80a1c83a 	sub	r16,r16,r2
  e073a8:	003fb106 	br	e07270 <_fflush_r+0x78>
  e073ac:	91400717 	ldw	r5,28(r18)
  e073b0:	9809883a 	mov	r4,r19
  e073b4:	000d883a 	mov	r6,zero
  e073b8:	01c00044 	movi	r7,1
  e073bc:	403ee83a 	callr	r8
  e073c0:	1021883a 	mov	r16,r2
  e073c4:	00bfffc4 	movi	r2,-1
  e073c8:	80800226 	beq	r16,r2,e073d4 <_fflush_r+0x1dc>
  e073cc:	92000a17 	ldw	r8,40(r18)
  e073d0:	003fa406 	br	e07264 <_fflush_r+0x6c>
  e073d4:	98c00017 	ldw	r3,0(r19)
  e073d8:	00800744 	movi	r2,29
  e073dc:	18bfde26 	beq	r3,r2,e07358 <_fflush_r+0x160>
  e073e0:	9080030b 	ldhu	r2,12(r18)
  e073e4:	8007883a 	mov	r3,r16
  e073e8:	10801014 	ori	r2,r2,64
  e073ec:	9080030d 	sth	r2,12(r18)
  e073f0:	003fcf06 	br	e07330 <_fflush_r+0x138>

00e073f4 <fflush>:
  e073f4:	01403834 	movhi	r5,224
  e073f8:	295c7e04 	addi	r5,r5,29176
  e073fc:	2007883a 	mov	r3,r4
  e07400:	20000526 	beq	r4,zero,e07418 <fflush+0x24>
  e07404:	00803874 	movhi	r2,225
  e07408:	108b4704 	addi	r2,r2,11548
  e0740c:	11000017 	ldw	r4,0(r2)
  e07410:	180b883a 	mov	r5,r3
  e07414:	0e071f81 	jmpi	e071f8 <_fflush_r>
  e07418:	00803874 	movhi	r2,225
  e0741c:	108b4804 	addi	r2,r2,11552
  e07420:	11000017 	ldw	r4,0(r2)
  e07424:	0e07fc41 	jmpi	e07fc4 <_fwalk_reent>

00e07428 <std>:
  e07428:	00803874 	movhi	r2,225
  e0742c:	10a92804 	addi	r2,r2,-23392
  e07430:	20800b15 	stw	r2,44(r4)
  e07434:	00803874 	movhi	r2,225
  e07438:	10a96304 	addi	r2,r2,-23156
  e0743c:	20800815 	stw	r2,32(r4)
  e07440:	00c03874 	movhi	r3,225
  e07444:	18e94404 	addi	r3,r3,-23280
  e07448:	00803874 	movhi	r2,225
  e0744c:	10a92a04 	addi	r2,r2,-23384
  e07450:	2140030d 	sth	r5,12(r4)
  e07454:	2180038d 	sth	r6,14(r4)
  e07458:	20c00915 	stw	r3,36(r4)
  e0745c:	20800a15 	stw	r2,40(r4)
  e07460:	20000015 	stw	zero,0(r4)
  e07464:	20000115 	stw	zero,4(r4)
  e07468:	20000215 	stw	zero,8(r4)
  e0746c:	20000415 	stw	zero,16(r4)
  e07470:	20000515 	stw	zero,20(r4)
  e07474:	20000615 	stw	zero,24(r4)
  e07478:	21000715 	stw	r4,28(r4)
  e0747c:	f800283a 	ret

00e07480 <__sfp_lock_acquire>:
  e07480:	f800283a 	ret

00e07484 <__sfp_lock_release>:
  e07484:	f800283a 	ret

00e07488 <__sinit_lock_acquire>:
  e07488:	f800283a 	ret

00e0748c <__sinit_lock_release>:
  e0748c:	f800283a 	ret

00e07490 <__sinit>:
  e07490:	20800e17 	ldw	r2,56(r4)
  e07494:	defffd04 	addi	sp,sp,-12
  e07498:	dc400115 	stw	r17,4(sp)
  e0749c:	dc000015 	stw	r16,0(sp)
  e074a0:	dfc00215 	stw	ra,8(sp)
  e074a4:	04400044 	movi	r17,1
  e074a8:	01400104 	movi	r5,4
  e074ac:	000d883a 	mov	r6,zero
  e074b0:	2021883a 	mov	r16,r4
  e074b4:	2200bb04 	addi	r8,r4,748
  e074b8:	200f883a 	mov	r7,r4
  e074bc:	10000526 	beq	r2,zero,e074d4 <__sinit+0x44>
  e074c0:	dfc00217 	ldw	ra,8(sp)
  e074c4:	dc400117 	ldw	r17,4(sp)
  e074c8:	dc000017 	ldw	r16,0(sp)
  e074cc:	dec00304 	addi	sp,sp,12
  e074d0:	f800283a 	ret
  e074d4:	21000117 	ldw	r4,4(r4)
  e074d8:	00803834 	movhi	r2,224
  e074dc:	109d5d04 	addi	r2,r2,30068
  e074e0:	00c000c4 	movi	r3,3
  e074e4:	80800f15 	stw	r2,60(r16)
  e074e8:	80c0b915 	stw	r3,740(r16)
  e074ec:	8200ba15 	stw	r8,744(r16)
  e074f0:	84400e15 	stw	r17,56(r16)
  e074f4:	8000b815 	stw	zero,736(r16)
  e074f8:	0e074280 	call	e07428 <std>
  e074fc:	81000217 	ldw	r4,8(r16)
  e07500:	880d883a 	mov	r6,r17
  e07504:	800f883a 	mov	r7,r16
  e07508:	01400284 	movi	r5,10
  e0750c:	0e074280 	call	e07428 <std>
  e07510:	81000317 	ldw	r4,12(r16)
  e07514:	800f883a 	mov	r7,r16
  e07518:	01400484 	movi	r5,18
  e0751c:	01800084 	movi	r6,2
  e07520:	dfc00217 	ldw	ra,8(sp)
  e07524:	dc400117 	ldw	r17,4(sp)
  e07528:	dc000017 	ldw	r16,0(sp)
  e0752c:	dec00304 	addi	sp,sp,12
  e07530:	0e074281 	jmpi	e07428 <std>

00e07534 <__fp_lock>:
  e07534:	0005883a 	mov	r2,zero
  e07538:	f800283a 	ret

00e0753c <__fp_unlock>:
  e0753c:	0005883a 	mov	r2,zero
  e07540:	f800283a 	ret

00e07544 <__fp_unlock_all>:
  e07544:	00803874 	movhi	r2,225
  e07548:	108b4704 	addi	r2,r2,11548
  e0754c:	11000017 	ldw	r4,0(r2)
  e07550:	01403834 	movhi	r5,224
  e07554:	295d4f04 	addi	r5,r5,30012
  e07558:	0e0808c1 	jmpi	e0808c <_fwalk>

00e0755c <__fp_lock_all>:
  e0755c:	00803874 	movhi	r2,225
  e07560:	108b4704 	addi	r2,r2,11548
  e07564:	11000017 	ldw	r4,0(r2)
  e07568:	01403834 	movhi	r5,224
  e0756c:	295d4d04 	addi	r5,r5,30004
  e07570:	0e0808c1 	jmpi	e0808c <_fwalk>

00e07574 <_cleanup_r>:
  e07574:	01403874 	movhi	r5,225
  e07578:	296a5504 	addi	r5,r5,-22188
  e0757c:	0e0808c1 	jmpi	e0808c <_fwalk>

00e07580 <_cleanup>:
  e07580:	00803874 	movhi	r2,225
  e07584:	108b4804 	addi	r2,r2,11552
  e07588:	11000017 	ldw	r4,0(r2)
  e0758c:	0e075741 	jmpi	e07574 <_cleanup_r>

00e07590 <__sfmoreglue>:
  e07590:	defffc04 	addi	sp,sp,-16
  e07594:	dc400115 	stw	r17,4(sp)
  e07598:	2c401724 	muli	r17,r5,92
  e0759c:	dc800215 	stw	r18,8(sp)
  e075a0:	2825883a 	mov	r18,r5
  e075a4:	89400304 	addi	r5,r17,12
  e075a8:	dc000015 	stw	r16,0(sp)
  e075ac:	dfc00315 	stw	ra,12(sp)
  e075b0:	0e0839c0 	call	e0839c <_malloc_r>
  e075b4:	0021883a 	mov	r16,zero
  e075b8:	880d883a 	mov	r6,r17
  e075bc:	000b883a 	mov	r5,zero
  e075c0:	10000626 	beq	r2,zero,e075dc <__sfmoreglue+0x4c>
  e075c4:	11000304 	addi	r4,r2,12
  e075c8:	14800115 	stw	r18,4(r2)
  e075cc:	10000015 	stw	zero,0(r2)
  e075d0:	11000215 	stw	r4,8(r2)
  e075d4:	1021883a 	mov	r16,r2
  e075d8:	0e08d400 	call	e08d40 <memset>
  e075dc:	8005883a 	mov	r2,r16
  e075e0:	dfc00317 	ldw	ra,12(sp)
  e075e4:	dc800217 	ldw	r18,8(sp)
  e075e8:	dc400117 	ldw	r17,4(sp)
  e075ec:	dc000017 	ldw	r16,0(sp)
  e075f0:	dec00404 	addi	sp,sp,16
  e075f4:	f800283a 	ret

00e075f8 <__sfp>:
  e075f8:	defffd04 	addi	sp,sp,-12
  e075fc:	00803874 	movhi	r2,225
  e07600:	108b4804 	addi	r2,r2,11552
  e07604:	dc000015 	stw	r16,0(sp)
  e07608:	14000017 	ldw	r16,0(r2)
  e0760c:	dc400115 	stw	r17,4(sp)
  e07610:	dfc00215 	stw	ra,8(sp)
  e07614:	80800e17 	ldw	r2,56(r16)
  e07618:	2023883a 	mov	r17,r4
  e0761c:	10002626 	beq	r2,zero,e076b8 <__sfp+0xc0>
  e07620:	8400b804 	addi	r16,r16,736
  e07624:	80800117 	ldw	r2,4(r16)
  e07628:	81000217 	ldw	r4,8(r16)
  e0762c:	10ffffc4 	addi	r3,r2,-1
  e07630:	18000916 	blt	r3,zero,e07658 <__sfp+0x60>
  e07634:	2080030f 	ldh	r2,12(r4)
  e07638:	10000b26 	beq	r2,zero,e07668 <__sfp+0x70>
  e0763c:	017fffc4 	movi	r5,-1
  e07640:	00000206 	br	e0764c <__sfp+0x54>
  e07644:	2080030f 	ldh	r2,12(r4)
  e07648:	10000726 	beq	r2,zero,e07668 <__sfp+0x70>
  e0764c:	18ffffc4 	addi	r3,r3,-1
  e07650:	21001704 	addi	r4,r4,92
  e07654:	197ffb1e 	bne	r3,r5,e07644 <__sfp+0x4c>
  e07658:	80800017 	ldw	r2,0(r16)
  e0765c:	10001926 	beq	r2,zero,e076c4 <__sfp+0xcc>
  e07660:	1021883a 	mov	r16,r2
  e07664:	003fef06 	br	e07624 <__sfp+0x2c>
  e07668:	00bfffc4 	movi	r2,-1
  e0766c:	00c00044 	movi	r3,1
  e07670:	2080038d 	sth	r2,14(r4)
  e07674:	20c0030d 	sth	r3,12(r4)
  e07678:	20000015 	stw	zero,0(r4)
  e0767c:	20000215 	stw	zero,8(r4)
  e07680:	20000115 	stw	zero,4(r4)
  e07684:	20000415 	stw	zero,16(r4)
  e07688:	20000515 	stw	zero,20(r4)
  e0768c:	20000615 	stw	zero,24(r4)
  e07690:	20000c15 	stw	zero,48(r4)
  e07694:	20000d15 	stw	zero,52(r4)
  e07698:	20001115 	stw	zero,68(r4)
  e0769c:	20001215 	stw	zero,72(r4)
  e076a0:	2005883a 	mov	r2,r4
  e076a4:	dfc00217 	ldw	ra,8(sp)
  e076a8:	dc400117 	ldw	r17,4(sp)
  e076ac:	dc000017 	ldw	r16,0(sp)
  e076b0:	dec00304 	addi	sp,sp,12
  e076b4:	f800283a 	ret
  e076b8:	8009883a 	mov	r4,r16
  e076bc:	0e074900 	call	e07490 <__sinit>
  e076c0:	003fd706 	br	e07620 <__sfp+0x28>
  e076c4:	8809883a 	mov	r4,r17
  e076c8:	01400104 	movi	r5,4
  e076cc:	0e075900 	call	e07590 <__sfmoreglue>
  e076d0:	80800015 	stw	r2,0(r16)
  e076d4:	103fe21e 	bne	r2,zero,e07660 <__sfp+0x68>
  e076d8:	00800304 	movi	r2,12
  e076dc:	0009883a 	mov	r4,zero
  e076e0:	88800015 	stw	r2,0(r17)
  e076e4:	003fee06 	br	e076a0 <__sfp+0xa8>

00e076e8 <_malloc_trim_r>:
  e076e8:	defffb04 	addi	sp,sp,-20
  e076ec:	dcc00315 	stw	r19,12(sp)
  e076f0:	04c03874 	movhi	r19,225
  e076f4:	9cc56904 	addi	r19,r19,5540
  e076f8:	dc800215 	stw	r18,8(sp)
  e076fc:	dc400115 	stw	r17,4(sp)
  e07700:	dc000015 	stw	r16,0(sp)
  e07704:	2823883a 	mov	r17,r5
  e07708:	2025883a 	mov	r18,r4
  e0770c:	dfc00415 	stw	ra,16(sp)
  e07710:	0e0c7e00 	call	e0c7e0 <__malloc_lock>
  e07714:	98800217 	ldw	r2,8(r19)
  e07718:	9009883a 	mov	r4,r18
  e0771c:	000b883a 	mov	r5,zero
  e07720:	10c00117 	ldw	r3,4(r2)
  e07724:	00bfff04 	movi	r2,-4
  e07728:	18a0703a 	and	r16,r3,r2
  e0772c:	8463c83a 	sub	r17,r16,r17
  e07730:	8c43fbc4 	addi	r17,r17,4079
  e07734:	8822d33a 	srli	r17,r17,12
  e07738:	0083ffc4 	movi	r2,4095
  e0773c:	8c7fffc4 	addi	r17,r17,-1
  e07740:	8822933a 	slli	r17,r17,12
  e07744:	1440060e 	bge	r2,r17,e07760 <_malloc_trim_r+0x78>
  e07748:	0e0a4300 	call	e0a430 <_sbrk_r>
  e0774c:	98c00217 	ldw	r3,8(r19)
  e07750:	9009883a 	mov	r4,r18
  e07754:	044bc83a 	sub	r5,zero,r17
  e07758:	80c7883a 	add	r3,r16,r3
  e0775c:	10c00926 	beq	r2,r3,e07784 <_malloc_trim_r+0x9c>
  e07760:	0e0c8000 	call	e0c800 <__malloc_unlock>
  e07764:	0005883a 	mov	r2,zero
  e07768:	dfc00417 	ldw	ra,16(sp)
  e0776c:	dcc00317 	ldw	r19,12(sp)
  e07770:	dc800217 	ldw	r18,8(sp)
  e07774:	dc400117 	ldw	r17,4(sp)
  e07778:	dc000017 	ldw	r16,0(sp)
  e0777c:	dec00504 	addi	sp,sp,20
  e07780:	f800283a 	ret
  e07784:	9009883a 	mov	r4,r18
  e07788:	0e0a4300 	call	e0a430 <_sbrk_r>
  e0778c:	844dc83a 	sub	r6,r16,r17
  e07790:	00ffffc4 	movi	r3,-1
  e07794:	9009883a 	mov	r4,r18
  e07798:	000b883a 	mov	r5,zero
  e0779c:	01c03874 	movhi	r7,225
  e077a0:	39d25e04 	addi	r7,r7,18808
  e077a4:	31800054 	ori	r6,r6,1
  e077a8:	10c00926 	beq	r2,r3,e077d0 <_malloc_trim_r+0xe8>
  e077ac:	38800017 	ldw	r2,0(r7)
  e077b0:	98c00217 	ldw	r3,8(r19)
  e077b4:	9009883a 	mov	r4,r18
  e077b8:	1445c83a 	sub	r2,r2,r17
  e077bc:	38800015 	stw	r2,0(r7)
  e077c0:	19800115 	stw	r6,4(r3)
  e077c4:	0e0c8000 	call	e0c800 <__malloc_unlock>
  e077c8:	00800044 	movi	r2,1
  e077cc:	003fe606 	br	e07768 <_malloc_trim_r+0x80>
  e077d0:	0e0a4300 	call	e0a430 <_sbrk_r>
  e077d4:	99800217 	ldw	r6,8(r19)
  e077d8:	100f883a 	mov	r7,r2
  e077dc:	9009883a 	mov	r4,r18
  e077e0:	1187c83a 	sub	r3,r2,r6
  e077e4:	008003c4 	movi	r2,15
  e077e8:	19400054 	ori	r5,r3,1
  e077ec:	10ffdc0e 	bge	r2,r3,e07760 <_malloc_trim_r+0x78>
  e077f0:	00803874 	movhi	r2,225
  e077f4:	108b4c04 	addi	r2,r2,11568
  e077f8:	10c00017 	ldw	r3,0(r2)
  e077fc:	00803874 	movhi	r2,225
  e07800:	10925e04 	addi	r2,r2,18808
  e07804:	31400115 	stw	r5,4(r6)
  e07808:	38c7c83a 	sub	r3,r7,r3
  e0780c:	10c00015 	stw	r3,0(r2)
  e07810:	003fd306 	br	e07760 <_malloc_trim_r+0x78>

00e07814 <_free_r>:
  e07814:	defffd04 	addi	sp,sp,-12
  e07818:	dc400115 	stw	r17,4(sp)
  e0781c:	dc000015 	stw	r16,0(sp)
  e07820:	dfc00215 	stw	ra,8(sp)
  e07824:	2821883a 	mov	r16,r5
  e07828:	2023883a 	mov	r17,r4
  e0782c:	28005a26 	beq	r5,zero,e07998 <_free_r+0x184>
  e07830:	0e0c7e00 	call	e0c7e0 <__malloc_lock>
  e07834:	823ffe04 	addi	r8,r16,-8
  e07838:	41400117 	ldw	r5,4(r8)
  e0783c:	00bfff84 	movi	r2,-2
  e07840:	02803874 	movhi	r10,225
  e07844:	52856904 	addi	r10,r10,5540
  e07848:	288e703a 	and	r7,r5,r2
  e0784c:	41cd883a 	add	r6,r8,r7
  e07850:	30c00117 	ldw	r3,4(r6)
  e07854:	51000217 	ldw	r4,8(r10)
  e07858:	00bfff04 	movi	r2,-4
  e0785c:	1892703a 	and	r9,r3,r2
  e07860:	5017883a 	mov	r11,r10
  e07864:	31006726 	beq	r6,r4,e07a04 <_free_r+0x1f0>
  e07868:	2880004c 	andi	r2,r5,1
  e0786c:	1005003a 	cmpeq	r2,r2,zero
  e07870:	32400115 	stw	r9,4(r6)
  e07874:	10001a1e 	bne	r2,zero,e078e0 <_free_r+0xcc>
  e07878:	000b883a 	mov	r5,zero
  e0787c:	3247883a 	add	r3,r6,r9
  e07880:	18800117 	ldw	r2,4(r3)
  e07884:	1080004c 	andi	r2,r2,1
  e07888:	1000231e 	bne	r2,zero,e07918 <_free_r+0x104>
  e0788c:	280ac03a 	cmpne	r5,r5,zero
  e07890:	3a4f883a 	add	r7,r7,r9
  e07894:	2800451e 	bne	r5,zero,e079ac <_free_r+0x198>
  e07898:	31000217 	ldw	r4,8(r6)
  e0789c:	00803874 	movhi	r2,225
  e078a0:	10856b04 	addi	r2,r2,5548
  e078a4:	20807b26 	beq	r4,r2,e07a94 <_free_r+0x280>
  e078a8:	30800317 	ldw	r2,12(r6)
  e078ac:	3a07883a 	add	r3,r7,r8
  e078b0:	19c00015 	stw	r7,0(r3)
  e078b4:	11000215 	stw	r4,8(r2)
  e078b8:	20800315 	stw	r2,12(r4)
  e078bc:	38800054 	ori	r2,r7,1
  e078c0:	40800115 	stw	r2,4(r8)
  e078c4:	28001a26 	beq	r5,zero,e07930 <_free_r+0x11c>
  e078c8:	8809883a 	mov	r4,r17
  e078cc:	dfc00217 	ldw	ra,8(sp)
  e078d0:	dc400117 	ldw	r17,4(sp)
  e078d4:	dc000017 	ldw	r16,0(sp)
  e078d8:	dec00304 	addi	sp,sp,12
  e078dc:	0e0c8001 	jmpi	e0c800 <__malloc_unlock>
  e078e0:	80bffe17 	ldw	r2,-8(r16)
  e078e4:	50c00204 	addi	r3,r10,8
  e078e8:	4091c83a 	sub	r8,r8,r2
  e078ec:	41000217 	ldw	r4,8(r8)
  e078f0:	388f883a 	add	r7,r7,r2
  e078f4:	20c06126 	beq	r4,r3,e07a7c <_free_r+0x268>
  e078f8:	40800317 	ldw	r2,12(r8)
  e078fc:	3247883a 	add	r3,r6,r9
  e07900:	000b883a 	mov	r5,zero
  e07904:	11000215 	stw	r4,8(r2)
  e07908:	20800315 	stw	r2,12(r4)
  e0790c:	18800117 	ldw	r2,4(r3)
  e07910:	1080004c 	andi	r2,r2,1
  e07914:	103fdd26 	beq	r2,zero,e0788c <_free_r+0x78>
  e07918:	38800054 	ori	r2,r7,1
  e0791c:	3a07883a 	add	r3,r7,r8
  e07920:	280ac03a 	cmpne	r5,r5,zero
  e07924:	40800115 	stw	r2,4(r8)
  e07928:	19c00015 	stw	r7,0(r3)
  e0792c:	283fe61e 	bne	r5,zero,e078c8 <_free_r+0xb4>
  e07930:	00807fc4 	movi	r2,511
  e07934:	11c01f2e 	bgeu	r2,r7,e079b4 <_free_r+0x1a0>
  e07938:	3806d27a 	srli	r3,r7,9
  e0793c:	1800481e 	bne	r3,zero,e07a60 <_free_r+0x24c>
  e07940:	3804d0fa 	srli	r2,r7,3
  e07944:	100690fa 	slli	r3,r2,3
  e07948:	1acd883a 	add	r6,r3,r11
  e0794c:	31400217 	ldw	r5,8(r6)
  e07950:	31405926 	beq	r6,r5,e07ab8 <_free_r+0x2a4>
  e07954:	28800117 	ldw	r2,4(r5)
  e07958:	00ffff04 	movi	r3,-4
  e0795c:	10c4703a 	and	r2,r2,r3
  e07960:	3880022e 	bgeu	r7,r2,e0796c <_free_r+0x158>
  e07964:	29400217 	ldw	r5,8(r5)
  e07968:	317ffa1e 	bne	r6,r5,e07954 <_free_r+0x140>
  e0796c:	29800317 	ldw	r6,12(r5)
  e07970:	41800315 	stw	r6,12(r8)
  e07974:	41400215 	stw	r5,8(r8)
  e07978:	8809883a 	mov	r4,r17
  e0797c:	2a000315 	stw	r8,12(r5)
  e07980:	32000215 	stw	r8,8(r6)
  e07984:	dfc00217 	ldw	ra,8(sp)
  e07988:	dc400117 	ldw	r17,4(sp)
  e0798c:	dc000017 	ldw	r16,0(sp)
  e07990:	dec00304 	addi	sp,sp,12
  e07994:	0e0c8001 	jmpi	e0c800 <__malloc_unlock>
  e07998:	dfc00217 	ldw	ra,8(sp)
  e0799c:	dc400117 	ldw	r17,4(sp)
  e079a0:	dc000017 	ldw	r16,0(sp)
  e079a4:	dec00304 	addi	sp,sp,12
  e079a8:	f800283a 	ret
  e079ac:	31000217 	ldw	r4,8(r6)
  e079b0:	003fbd06 	br	e078a8 <_free_r+0x94>
  e079b4:	3806d0fa 	srli	r3,r7,3
  e079b8:	00800044 	movi	r2,1
  e079bc:	51400117 	ldw	r5,4(r10)
  e079c0:	180890fa 	slli	r4,r3,3
  e079c4:	1807d0ba 	srai	r3,r3,2
  e079c8:	22c9883a 	add	r4,r4,r11
  e079cc:	21800217 	ldw	r6,8(r4)
  e079d0:	10c4983a 	sll	r2,r2,r3
  e079d4:	41000315 	stw	r4,12(r8)
  e079d8:	41800215 	stw	r6,8(r8)
  e079dc:	288ab03a 	or	r5,r5,r2
  e079e0:	22000215 	stw	r8,8(r4)
  e079e4:	8809883a 	mov	r4,r17
  e079e8:	51400115 	stw	r5,4(r10)
  e079ec:	32000315 	stw	r8,12(r6)
  e079f0:	dfc00217 	ldw	ra,8(sp)
  e079f4:	dc400117 	ldw	r17,4(sp)
  e079f8:	dc000017 	ldw	r16,0(sp)
  e079fc:	dec00304 	addi	sp,sp,12
  e07a00:	0e0c8001 	jmpi	e0c800 <__malloc_unlock>
  e07a04:	2880004c 	andi	r2,r5,1
  e07a08:	3a4d883a 	add	r6,r7,r9
  e07a0c:	1000071e 	bne	r2,zero,e07a2c <_free_r+0x218>
  e07a10:	80bffe17 	ldw	r2,-8(r16)
  e07a14:	4091c83a 	sub	r8,r8,r2
  e07a18:	41000317 	ldw	r4,12(r8)
  e07a1c:	40c00217 	ldw	r3,8(r8)
  e07a20:	308d883a 	add	r6,r6,r2
  e07a24:	20c00215 	stw	r3,8(r4)
  e07a28:	19000315 	stw	r4,12(r3)
  e07a2c:	00803874 	movhi	r2,225
  e07a30:	108b4b04 	addi	r2,r2,11564
  e07a34:	11000017 	ldw	r4,0(r2)
  e07a38:	30c00054 	ori	r3,r6,1
  e07a3c:	52000215 	stw	r8,8(r10)
  e07a40:	40c00115 	stw	r3,4(r8)
  e07a44:	313fa036 	bltu	r6,r4,e078c8 <_free_r+0xb4>
  e07a48:	00803874 	movhi	r2,225
  e07a4c:	10925404 	addi	r2,r2,18768
  e07a50:	11400017 	ldw	r5,0(r2)
  e07a54:	8809883a 	mov	r4,r17
  e07a58:	0e076e80 	call	e076e8 <_malloc_trim_r>
  e07a5c:	003f9a06 	br	e078c8 <_free_r+0xb4>
  e07a60:	00800104 	movi	r2,4
  e07a64:	10c0072e 	bgeu	r2,r3,e07a84 <_free_r+0x270>
  e07a68:	00800504 	movi	r2,20
  e07a6c:	10c01936 	bltu	r2,r3,e07ad4 <_free_r+0x2c0>
  e07a70:	188016c4 	addi	r2,r3,91
  e07a74:	100690fa 	slli	r3,r2,3
  e07a78:	003fb306 	br	e07948 <_free_r+0x134>
  e07a7c:	01400044 	movi	r5,1
  e07a80:	003f7e06 	br	e0787c <_free_r+0x68>
  e07a84:	3804d1ba 	srli	r2,r7,6
  e07a88:	10800e04 	addi	r2,r2,56
  e07a8c:	100690fa 	slli	r3,r2,3
  e07a90:	003fad06 	br	e07948 <_free_r+0x134>
  e07a94:	22000315 	stw	r8,12(r4)
  e07a98:	22000215 	stw	r8,8(r4)
  e07a9c:	3a05883a 	add	r2,r7,r8
  e07aa0:	38c00054 	ori	r3,r7,1
  e07aa4:	11c00015 	stw	r7,0(r2)
  e07aa8:	41000215 	stw	r4,8(r8)
  e07aac:	40c00115 	stw	r3,4(r8)
  e07ab0:	41000315 	stw	r4,12(r8)
  e07ab4:	003f8406 	br	e078c8 <_free_r+0xb4>
  e07ab8:	1005d0ba 	srai	r2,r2,2
  e07abc:	00c00044 	movi	r3,1
  e07ac0:	51000117 	ldw	r4,4(r10)
  e07ac4:	1886983a 	sll	r3,r3,r2
  e07ac8:	20c8b03a 	or	r4,r4,r3
  e07acc:	51000115 	stw	r4,4(r10)
  e07ad0:	003fa706 	br	e07970 <_free_r+0x15c>
  e07ad4:	00801504 	movi	r2,84
  e07ad8:	10c00436 	bltu	r2,r3,e07aec <_free_r+0x2d8>
  e07adc:	3804d33a 	srli	r2,r7,12
  e07ae0:	10801b84 	addi	r2,r2,110
  e07ae4:	100690fa 	slli	r3,r2,3
  e07ae8:	003f9706 	br	e07948 <_free_r+0x134>
  e07aec:	00805504 	movi	r2,340
  e07af0:	10c00436 	bltu	r2,r3,e07b04 <_free_r+0x2f0>
  e07af4:	3804d3fa 	srli	r2,r7,15
  e07af8:	10801dc4 	addi	r2,r2,119
  e07afc:	100690fa 	slli	r3,r2,3
  e07b00:	003f9106 	br	e07948 <_free_r+0x134>
  e07b04:	00815504 	movi	r2,1364
  e07b08:	10c0032e 	bgeu	r2,r3,e07b18 <_free_r+0x304>
  e07b0c:	00801f84 	movi	r2,126
  e07b10:	00c0fc04 	movi	r3,1008
  e07b14:	003f8c06 	br	e07948 <_free_r+0x134>
  e07b18:	3804d4ba 	srli	r2,r7,18
  e07b1c:	10801f04 	addi	r2,r2,124
  e07b20:	100690fa 	slli	r3,r2,3
  e07b24:	003f8806 	br	e07948 <_free_r+0x134>

00e07b28 <__sfvwrite_r>:
  e07b28:	30800217 	ldw	r2,8(r6)
  e07b2c:	defff504 	addi	sp,sp,-44
  e07b30:	df000915 	stw	fp,36(sp)
  e07b34:	dd800715 	stw	r22,28(sp)
  e07b38:	dc800315 	stw	r18,12(sp)
  e07b3c:	dfc00a15 	stw	ra,40(sp)
  e07b40:	ddc00815 	stw	r23,32(sp)
  e07b44:	dd400615 	stw	r21,24(sp)
  e07b48:	dd000515 	stw	r20,20(sp)
  e07b4c:	dcc00415 	stw	r19,16(sp)
  e07b50:	dc400215 	stw	r17,8(sp)
  e07b54:	dc000115 	stw	r16,4(sp)
  e07b58:	302d883a 	mov	r22,r6
  e07b5c:	2039883a 	mov	fp,r4
  e07b60:	2825883a 	mov	r18,r5
  e07b64:	10001c26 	beq	r2,zero,e07bd8 <__sfvwrite_r+0xb0>
  e07b68:	29c0030b 	ldhu	r7,12(r5)
  e07b6c:	3880020c 	andi	r2,r7,8
  e07b70:	10002726 	beq	r2,zero,e07c10 <__sfvwrite_r+0xe8>
  e07b74:	28800417 	ldw	r2,16(r5)
  e07b78:	10002526 	beq	r2,zero,e07c10 <__sfvwrite_r+0xe8>
  e07b7c:	3880008c 	andi	r2,r7,2
  e07b80:	b5400017 	ldw	r21,0(r22)
  e07b84:	10002826 	beq	r2,zero,e07c28 <__sfvwrite_r+0x100>
  e07b88:	0021883a 	mov	r16,zero
  e07b8c:	0023883a 	mov	r17,zero
  e07b90:	880d883a 	mov	r6,r17
  e07b94:	e009883a 	mov	r4,fp
  e07b98:	00810004 	movi	r2,1024
  e07b9c:	80006e26 	beq	r16,zero,e07d58 <__sfvwrite_r+0x230>
  e07ba0:	800f883a 	mov	r7,r16
  e07ba4:	91400717 	ldw	r5,28(r18)
  e07ba8:	1400012e 	bgeu	r2,r16,e07bb0 <__sfvwrite_r+0x88>
  e07bac:	100f883a 	mov	r7,r2
  e07bb0:	90c00917 	ldw	r3,36(r18)
  e07bb4:	183ee83a 	callr	r3
  e07bb8:	1007883a 	mov	r3,r2
  e07bbc:	80a1c83a 	sub	r16,r16,r2
  e07bc0:	88a3883a 	add	r17,r17,r2
  e07bc4:	00806d0e 	bge	zero,r2,e07d7c <__sfvwrite_r+0x254>
  e07bc8:	b0800217 	ldw	r2,8(r22)
  e07bcc:	10c5c83a 	sub	r2,r2,r3
  e07bd0:	b0800215 	stw	r2,8(r22)
  e07bd4:	103fee1e 	bne	r2,zero,e07b90 <__sfvwrite_r+0x68>
  e07bd8:	0009883a 	mov	r4,zero
  e07bdc:	2005883a 	mov	r2,r4
  e07be0:	dfc00a17 	ldw	ra,40(sp)
  e07be4:	df000917 	ldw	fp,36(sp)
  e07be8:	ddc00817 	ldw	r23,32(sp)
  e07bec:	dd800717 	ldw	r22,28(sp)
  e07bf0:	dd400617 	ldw	r21,24(sp)
  e07bf4:	dd000517 	ldw	r20,20(sp)
  e07bf8:	dcc00417 	ldw	r19,16(sp)
  e07bfc:	dc800317 	ldw	r18,12(sp)
  e07c00:	dc400217 	ldw	r17,8(sp)
  e07c04:	dc000117 	ldw	r16,4(sp)
  e07c08:	dec00b04 	addi	sp,sp,44
  e07c0c:	f800283a 	ret
  e07c10:	0e058f00 	call	e058f0 <__swsetup_r>
  e07c14:	1000e41e 	bne	r2,zero,e07fa8 <__sfvwrite_r+0x480>
  e07c18:	91c0030b 	ldhu	r7,12(r18)
  e07c1c:	b5400017 	ldw	r21,0(r22)
  e07c20:	3880008c 	andi	r2,r7,2
  e07c24:	103fd81e 	bne	r2,zero,e07b88 <__sfvwrite_r+0x60>
  e07c28:	3880004c 	andi	r2,r7,1
  e07c2c:	1005003a 	cmpeq	r2,r2,zero
  e07c30:	10005726 	beq	r2,zero,e07d90 <__sfvwrite_r+0x268>
  e07c34:	0029883a 	mov	r20,zero
  e07c38:	002f883a 	mov	r23,zero
  e07c3c:	a0004226 	beq	r20,zero,e07d48 <__sfvwrite_r+0x220>
  e07c40:	3880800c 	andi	r2,r7,512
  e07c44:	94000217 	ldw	r16,8(r18)
  e07c48:	10008b26 	beq	r2,zero,e07e78 <__sfvwrite_r+0x350>
  e07c4c:	800d883a 	mov	r6,r16
  e07c50:	a400a536 	bltu	r20,r16,e07ee8 <__sfvwrite_r+0x3c0>
  e07c54:	3881200c 	andi	r2,r7,1152
  e07c58:	10002726 	beq	r2,zero,e07cf8 <__sfvwrite_r+0x1d0>
  e07c5c:	90800517 	ldw	r2,20(r18)
  e07c60:	92000417 	ldw	r8,16(r18)
  e07c64:	91400017 	ldw	r5,0(r18)
  e07c68:	1087883a 	add	r3,r2,r2
  e07c6c:	1887883a 	add	r3,r3,r2
  e07c70:	1808d7fa 	srli	r4,r3,31
  e07c74:	2a21c83a 	sub	r16,r5,r8
  e07c78:	80800044 	addi	r2,r16,1
  e07c7c:	20c9883a 	add	r4,r4,r3
  e07c80:	2027d07a 	srai	r19,r4,1
  e07c84:	a085883a 	add	r2,r20,r2
  e07c88:	980d883a 	mov	r6,r19
  e07c8c:	9880022e 	bgeu	r19,r2,e07c98 <__sfvwrite_r+0x170>
  e07c90:	1027883a 	mov	r19,r2
  e07c94:	100d883a 	mov	r6,r2
  e07c98:	3881000c 	andi	r2,r7,1024
  e07c9c:	1000b826 	beq	r2,zero,e07f80 <__sfvwrite_r+0x458>
  e07ca0:	300b883a 	mov	r5,r6
  e07ca4:	e009883a 	mov	r4,fp
  e07ca8:	0e0839c0 	call	e0839c <_malloc_r>
  e07cac:	10003126 	beq	r2,zero,e07d74 <__sfvwrite_r+0x24c>
  e07cb0:	91400417 	ldw	r5,16(r18)
  e07cb4:	1009883a 	mov	r4,r2
  e07cb8:	800d883a 	mov	r6,r16
  e07cbc:	1023883a 	mov	r17,r2
  e07cc0:	0e08bc00 	call	e08bc0 <memcpy>
  e07cc4:	90c0030b 	ldhu	r3,12(r18)
  e07cc8:	00beffc4 	movi	r2,-1025
  e07ccc:	1886703a 	and	r3,r3,r2
  e07cd0:	18c02014 	ori	r3,r3,128
  e07cd4:	90c0030d 	sth	r3,12(r18)
  e07cd8:	9c07c83a 	sub	r3,r19,r16
  e07cdc:	8c05883a 	add	r2,r17,r16
  e07ce0:	a00d883a 	mov	r6,r20
  e07ce4:	a021883a 	mov	r16,r20
  e07ce8:	90800015 	stw	r2,0(r18)
  e07cec:	90c00215 	stw	r3,8(r18)
  e07cf0:	94400415 	stw	r17,16(r18)
  e07cf4:	94c00515 	stw	r19,20(r18)
  e07cf8:	91000017 	ldw	r4,0(r18)
  e07cfc:	b80b883a 	mov	r5,r23
  e07d00:	a023883a 	mov	r17,r20
  e07d04:	0e08c600 	call	e08c60 <memmove>
  e07d08:	90c00217 	ldw	r3,8(r18)
  e07d0c:	90800017 	ldw	r2,0(r18)
  e07d10:	a027883a 	mov	r19,r20
  e07d14:	1c07c83a 	sub	r3,r3,r16
  e07d18:	1405883a 	add	r2,r2,r16
  e07d1c:	90c00215 	stw	r3,8(r18)
  e07d20:	a021883a 	mov	r16,r20
  e07d24:	90800015 	stw	r2,0(r18)
  e07d28:	b0800217 	ldw	r2,8(r22)
  e07d2c:	1405c83a 	sub	r2,r2,r16
  e07d30:	b0800215 	stw	r2,8(r22)
  e07d34:	103fa826 	beq	r2,zero,e07bd8 <__sfvwrite_r+0xb0>
  e07d38:	a469c83a 	sub	r20,r20,r17
  e07d3c:	91c0030b 	ldhu	r7,12(r18)
  e07d40:	bcef883a 	add	r23,r23,r19
  e07d44:	a03fbe1e 	bne	r20,zero,e07c40 <__sfvwrite_r+0x118>
  e07d48:	adc00017 	ldw	r23,0(r21)
  e07d4c:	ad000117 	ldw	r20,4(r21)
  e07d50:	ad400204 	addi	r21,r21,8
  e07d54:	003fb906 	br	e07c3c <__sfvwrite_r+0x114>
  e07d58:	ac400017 	ldw	r17,0(r21)
  e07d5c:	ac000117 	ldw	r16,4(r21)
  e07d60:	ad400204 	addi	r21,r21,8
  e07d64:	003f8a06 	br	e07b90 <__sfvwrite_r+0x68>
  e07d68:	91400417 	ldw	r5,16(r18)
  e07d6c:	e009883a 	mov	r4,fp
  e07d70:	0e078140 	call	e07814 <_free_r>
  e07d74:	00800304 	movi	r2,12
  e07d78:	e0800015 	stw	r2,0(fp)
  e07d7c:	9080030b 	ldhu	r2,12(r18)
  e07d80:	013fffc4 	movi	r4,-1
  e07d84:	10801014 	ori	r2,r2,64
  e07d88:	9080030d 	sth	r2,12(r18)
  e07d8c:	003f9306 	br	e07bdc <__sfvwrite_r+0xb4>
  e07d90:	0027883a 	mov	r19,zero
  e07d94:	002f883a 	mov	r23,zero
  e07d98:	d8000015 	stw	zero,0(sp)
  e07d9c:	0029883a 	mov	r20,zero
  e07da0:	98001e26 	beq	r19,zero,e07e1c <__sfvwrite_r+0x2f4>
  e07da4:	d8c00017 	ldw	r3,0(sp)
  e07da8:	1804c03a 	cmpne	r2,r3,zero
  e07dac:	10005e26 	beq	r2,zero,e07f28 <__sfvwrite_r+0x400>
  e07db0:	9821883a 	mov	r16,r19
  e07db4:	a4c0012e 	bgeu	r20,r19,e07dbc <__sfvwrite_r+0x294>
  e07db8:	a021883a 	mov	r16,r20
  e07dbc:	91000017 	ldw	r4,0(r18)
  e07dc0:	90800417 	ldw	r2,16(r18)
  e07dc4:	91800217 	ldw	r6,8(r18)
  e07dc8:	91c00517 	ldw	r7,20(r18)
  e07dcc:	1100022e 	bgeu	r2,r4,e07dd8 <__sfvwrite_r+0x2b0>
  e07dd0:	31e3883a 	add	r17,r6,r7
  e07dd4:	8c001616 	blt	r17,r16,e07e30 <__sfvwrite_r+0x308>
  e07dd8:	81c03816 	blt	r16,r7,e07ebc <__sfvwrite_r+0x394>
  e07ddc:	90c00917 	ldw	r3,36(r18)
  e07de0:	91400717 	ldw	r5,28(r18)
  e07de4:	e009883a 	mov	r4,fp
  e07de8:	b80d883a 	mov	r6,r23
  e07dec:	183ee83a 	callr	r3
  e07df0:	1023883a 	mov	r17,r2
  e07df4:	00bfe10e 	bge	zero,r2,e07d7c <__sfvwrite_r+0x254>
  e07df8:	a469c83a 	sub	r20,r20,r17
  e07dfc:	a0001826 	beq	r20,zero,e07e60 <__sfvwrite_r+0x338>
  e07e00:	b0800217 	ldw	r2,8(r22)
  e07e04:	1445c83a 	sub	r2,r2,r17
  e07e08:	b0800215 	stw	r2,8(r22)
  e07e0c:	103f7226 	beq	r2,zero,e07bd8 <__sfvwrite_r+0xb0>
  e07e10:	9c67c83a 	sub	r19,r19,r17
  e07e14:	bc6f883a 	add	r23,r23,r17
  e07e18:	983fe21e 	bne	r19,zero,e07da4 <__sfvwrite_r+0x27c>
  e07e1c:	adc00017 	ldw	r23,0(r21)
  e07e20:	acc00117 	ldw	r19,4(r21)
  e07e24:	ad400204 	addi	r21,r21,8
  e07e28:	d8000015 	stw	zero,0(sp)
  e07e2c:	003fdc06 	br	e07da0 <__sfvwrite_r+0x278>
  e07e30:	b80b883a 	mov	r5,r23
  e07e34:	880d883a 	mov	r6,r17
  e07e38:	0e08c600 	call	e08c60 <memmove>
  e07e3c:	90c00017 	ldw	r3,0(r18)
  e07e40:	e009883a 	mov	r4,fp
  e07e44:	900b883a 	mov	r5,r18
  e07e48:	1c47883a 	add	r3,r3,r17
  e07e4c:	90c00015 	stw	r3,0(r18)
  e07e50:	0e071f80 	call	e071f8 <_fflush_r>
  e07e54:	103fc91e 	bne	r2,zero,e07d7c <__sfvwrite_r+0x254>
  e07e58:	a469c83a 	sub	r20,r20,r17
  e07e5c:	a03fe81e 	bne	r20,zero,e07e00 <__sfvwrite_r+0x2d8>
  e07e60:	e009883a 	mov	r4,fp
  e07e64:	900b883a 	mov	r5,r18
  e07e68:	0e071f80 	call	e071f8 <_fflush_r>
  e07e6c:	103fc31e 	bne	r2,zero,e07d7c <__sfvwrite_r+0x254>
  e07e70:	d8000015 	stw	zero,0(sp)
  e07e74:	003fe206 	br	e07e00 <__sfvwrite_r+0x2d8>
  e07e78:	91000017 	ldw	r4,0(r18)
  e07e7c:	90800417 	ldw	r2,16(r18)
  e07e80:	1100022e 	bgeu	r2,r4,e07e8c <__sfvwrite_r+0x364>
  e07e84:	8023883a 	mov	r17,r16
  e07e88:	85003136 	bltu	r16,r20,e07f50 <__sfvwrite_r+0x428>
  e07e8c:	91c00517 	ldw	r7,20(r18)
  e07e90:	a1c01836 	bltu	r20,r7,e07ef4 <__sfvwrite_r+0x3cc>
  e07e94:	90c00917 	ldw	r3,36(r18)
  e07e98:	91400717 	ldw	r5,28(r18)
  e07e9c:	e009883a 	mov	r4,fp
  e07ea0:	b80d883a 	mov	r6,r23
  e07ea4:	183ee83a 	callr	r3
  e07ea8:	1021883a 	mov	r16,r2
  e07eac:	00bfb30e 	bge	zero,r2,e07d7c <__sfvwrite_r+0x254>
  e07eb0:	1023883a 	mov	r17,r2
  e07eb4:	1027883a 	mov	r19,r2
  e07eb8:	003f9b06 	br	e07d28 <__sfvwrite_r+0x200>
  e07ebc:	b80b883a 	mov	r5,r23
  e07ec0:	800d883a 	mov	r6,r16
  e07ec4:	0e08c600 	call	e08c60 <memmove>
  e07ec8:	90c00217 	ldw	r3,8(r18)
  e07ecc:	90800017 	ldw	r2,0(r18)
  e07ed0:	8023883a 	mov	r17,r16
  e07ed4:	1c07c83a 	sub	r3,r3,r16
  e07ed8:	1405883a 	add	r2,r2,r16
  e07edc:	90c00215 	stw	r3,8(r18)
  e07ee0:	90800015 	stw	r2,0(r18)
  e07ee4:	003fc406 	br	e07df8 <__sfvwrite_r+0x2d0>
  e07ee8:	a00d883a 	mov	r6,r20
  e07eec:	a021883a 	mov	r16,r20
  e07ef0:	003f8106 	br	e07cf8 <__sfvwrite_r+0x1d0>
  e07ef4:	b80b883a 	mov	r5,r23
  e07ef8:	a00d883a 	mov	r6,r20
  e07efc:	0e08c600 	call	e08c60 <memmove>
  e07f00:	90c00217 	ldw	r3,8(r18)
  e07f04:	90800017 	ldw	r2,0(r18)
  e07f08:	a021883a 	mov	r16,r20
  e07f0c:	1d07c83a 	sub	r3,r3,r20
  e07f10:	1505883a 	add	r2,r2,r20
  e07f14:	a023883a 	mov	r17,r20
  e07f18:	a027883a 	mov	r19,r20
  e07f1c:	90c00215 	stw	r3,8(r18)
  e07f20:	90800015 	stw	r2,0(r18)
  e07f24:	003f8006 	br	e07d28 <__sfvwrite_r+0x200>
  e07f28:	b809883a 	mov	r4,r23
  e07f2c:	01400284 	movi	r5,10
  e07f30:	980d883a 	mov	r6,r19
  e07f34:	0e08adc0 	call	e08adc <memchr>
  e07f38:	10001726 	beq	r2,zero,e07f98 <__sfvwrite_r+0x470>
  e07f3c:	15c5c83a 	sub	r2,r2,r23
  e07f40:	15000044 	addi	r20,r2,1
  e07f44:	00800044 	movi	r2,1
  e07f48:	d8800015 	stw	r2,0(sp)
  e07f4c:	003f9806 	br	e07db0 <__sfvwrite_r+0x288>
  e07f50:	b80b883a 	mov	r5,r23
  e07f54:	800d883a 	mov	r6,r16
  e07f58:	0e08c600 	call	e08c60 <memmove>
  e07f5c:	90c00017 	ldw	r3,0(r18)
  e07f60:	e009883a 	mov	r4,fp
  e07f64:	900b883a 	mov	r5,r18
  e07f68:	1c07883a 	add	r3,r3,r16
  e07f6c:	90c00015 	stw	r3,0(r18)
  e07f70:	8027883a 	mov	r19,r16
  e07f74:	0e071f80 	call	e071f8 <_fflush_r>
  e07f78:	103f6b26 	beq	r2,zero,e07d28 <__sfvwrite_r+0x200>
  e07f7c:	003f7f06 	br	e07d7c <__sfvwrite_r+0x254>
  e07f80:	400b883a 	mov	r5,r8
  e07f84:	e009883a 	mov	r4,fp
  e07f88:	0e09dcc0 	call	e09dcc <_realloc_r>
  e07f8c:	103f7626 	beq	r2,zero,e07d68 <__sfvwrite_r+0x240>
  e07f90:	1023883a 	mov	r17,r2
  e07f94:	003f5006 	br	e07cd8 <__sfvwrite_r+0x1b0>
  e07f98:	00c00044 	movi	r3,1
  e07f9c:	9d000044 	addi	r20,r19,1
  e07fa0:	d8c00015 	stw	r3,0(sp)
  e07fa4:	003f8206 	br	e07db0 <__sfvwrite_r+0x288>
  e07fa8:	9080030b 	ldhu	r2,12(r18)
  e07fac:	00c00244 	movi	r3,9
  e07fb0:	013fffc4 	movi	r4,-1
  e07fb4:	10801014 	ori	r2,r2,64
  e07fb8:	9080030d 	sth	r2,12(r18)
  e07fbc:	e0c00015 	stw	r3,0(fp)
  e07fc0:	003f0606 	br	e07bdc <__sfvwrite_r+0xb4>

00e07fc4 <_fwalk_reent>:
  e07fc4:	defff704 	addi	sp,sp,-36
  e07fc8:	dcc00315 	stw	r19,12(sp)
  e07fcc:	24c0b804 	addi	r19,r4,736
  e07fd0:	dd800615 	stw	r22,24(sp)
  e07fd4:	dd400515 	stw	r21,20(sp)
  e07fd8:	dfc00815 	stw	ra,32(sp)
  e07fdc:	ddc00715 	stw	r23,28(sp)
  e07fe0:	dd000415 	stw	r20,16(sp)
  e07fe4:	dc800215 	stw	r18,8(sp)
  e07fe8:	dc400115 	stw	r17,4(sp)
  e07fec:	dc000015 	stw	r16,0(sp)
  e07ff0:	202b883a 	mov	r21,r4
  e07ff4:	282d883a 	mov	r22,r5
  e07ff8:	0e074800 	call	e07480 <__sfp_lock_acquire>
  e07ffc:	98002126 	beq	r19,zero,e08084 <_fwalk_reent+0xc0>
  e08000:	002f883a 	mov	r23,zero
  e08004:	9c800117 	ldw	r18,4(r19)
  e08008:	9c000217 	ldw	r16,8(r19)
  e0800c:	90bfffc4 	addi	r2,r18,-1
  e08010:	10000d16 	blt	r2,zero,e08048 <_fwalk_reent+0x84>
  e08014:	0023883a 	mov	r17,zero
  e08018:	053fffc4 	movi	r20,-1
  e0801c:	8080030f 	ldh	r2,12(r16)
  e08020:	8c400044 	addi	r17,r17,1
  e08024:	10000626 	beq	r2,zero,e08040 <_fwalk_reent+0x7c>
  e08028:	8080038f 	ldh	r2,14(r16)
  e0802c:	800b883a 	mov	r5,r16
  e08030:	a809883a 	mov	r4,r21
  e08034:	15000226 	beq	r2,r20,e08040 <_fwalk_reent+0x7c>
  e08038:	b03ee83a 	callr	r22
  e0803c:	b8aeb03a 	or	r23,r23,r2
  e08040:	84001704 	addi	r16,r16,92
  e08044:	947ff51e 	bne	r18,r17,e0801c <_fwalk_reent+0x58>
  e08048:	9cc00017 	ldw	r19,0(r19)
  e0804c:	983fed1e 	bne	r19,zero,e08004 <_fwalk_reent+0x40>
  e08050:	0e074840 	call	e07484 <__sfp_lock_release>
  e08054:	b805883a 	mov	r2,r23
  e08058:	dfc00817 	ldw	ra,32(sp)
  e0805c:	ddc00717 	ldw	r23,28(sp)
  e08060:	dd800617 	ldw	r22,24(sp)
  e08064:	dd400517 	ldw	r21,20(sp)
  e08068:	dd000417 	ldw	r20,16(sp)
  e0806c:	dcc00317 	ldw	r19,12(sp)
  e08070:	dc800217 	ldw	r18,8(sp)
  e08074:	dc400117 	ldw	r17,4(sp)
  e08078:	dc000017 	ldw	r16,0(sp)
  e0807c:	dec00904 	addi	sp,sp,36
  e08080:	f800283a 	ret
  e08084:	002f883a 	mov	r23,zero
  e08088:	003ff106 	br	e08050 <_fwalk_reent+0x8c>

00e0808c <_fwalk>:
  e0808c:	defff804 	addi	sp,sp,-32
  e08090:	dcc00315 	stw	r19,12(sp)
  e08094:	24c0b804 	addi	r19,r4,736
  e08098:	dd400515 	stw	r21,20(sp)
  e0809c:	dfc00715 	stw	ra,28(sp)
  e080a0:	dd800615 	stw	r22,24(sp)
  e080a4:	dd000415 	stw	r20,16(sp)
  e080a8:	dc800215 	stw	r18,8(sp)
  e080ac:	dc400115 	stw	r17,4(sp)
  e080b0:	dc000015 	stw	r16,0(sp)
  e080b4:	282b883a 	mov	r21,r5
  e080b8:	0e074800 	call	e07480 <__sfp_lock_acquire>
  e080bc:	98001f26 	beq	r19,zero,e0813c <_fwalk+0xb0>
  e080c0:	002d883a 	mov	r22,zero
  e080c4:	9c800117 	ldw	r18,4(r19)
  e080c8:	9c000217 	ldw	r16,8(r19)
  e080cc:	90bfffc4 	addi	r2,r18,-1
  e080d0:	10000c16 	blt	r2,zero,e08104 <_fwalk+0x78>
  e080d4:	0023883a 	mov	r17,zero
  e080d8:	053fffc4 	movi	r20,-1
  e080dc:	8080030f 	ldh	r2,12(r16)
  e080e0:	8c400044 	addi	r17,r17,1
  e080e4:	10000526 	beq	r2,zero,e080fc <_fwalk+0x70>
  e080e8:	8080038f 	ldh	r2,14(r16)
  e080ec:	8009883a 	mov	r4,r16
  e080f0:	15000226 	beq	r2,r20,e080fc <_fwalk+0x70>
  e080f4:	a83ee83a 	callr	r21
  e080f8:	b0acb03a 	or	r22,r22,r2
  e080fc:	84001704 	addi	r16,r16,92
  e08100:	947ff61e 	bne	r18,r17,e080dc <_fwalk+0x50>
  e08104:	9cc00017 	ldw	r19,0(r19)
  e08108:	983fee1e 	bne	r19,zero,e080c4 <_fwalk+0x38>
  e0810c:	0e074840 	call	e07484 <__sfp_lock_release>
  e08110:	b005883a 	mov	r2,r22
  e08114:	dfc00717 	ldw	ra,28(sp)
  e08118:	dd800617 	ldw	r22,24(sp)
  e0811c:	dd400517 	ldw	r21,20(sp)
  e08120:	dd000417 	ldw	r20,16(sp)
  e08124:	dcc00317 	ldw	r19,12(sp)
  e08128:	dc800217 	ldw	r18,8(sp)
  e0812c:	dc400117 	ldw	r17,4(sp)
  e08130:	dc000017 	ldw	r16,0(sp)
  e08134:	dec00804 	addi	sp,sp,32
  e08138:	f800283a 	ret
  e0813c:	002d883a 	mov	r22,zero
  e08140:	003ff206 	br	e0810c <_fwalk+0x80>

00e08144 <__locale_charset>:
  e08144:	d0a00c17 	ldw	r2,-32720(gp)
  e08148:	f800283a 	ret

00e0814c <_localeconv_r>:
  e0814c:	00803874 	movhi	r2,225
  e08150:	1083bc04 	addi	r2,r2,3824
  e08154:	f800283a 	ret

00e08158 <localeconv>:
  e08158:	00803874 	movhi	r2,225
  e0815c:	108b4704 	addi	r2,r2,11548
  e08160:	11000017 	ldw	r4,0(r2)
  e08164:	0e0814c1 	jmpi	e0814c <_localeconv_r>

00e08168 <_setlocale_r>:
  e08168:	defffc04 	addi	sp,sp,-16
  e0816c:	00c03874 	movhi	r3,225
  e08170:	18c39404 	addi	r3,r3,3664
  e08174:	dc800215 	stw	r18,8(sp)
  e08178:	dc400115 	stw	r17,4(sp)
  e0817c:	dc000015 	stw	r16,0(sp)
  e08180:	2023883a 	mov	r17,r4
  e08184:	2825883a 	mov	r18,r5
  e08188:	dfc00315 	stw	ra,12(sp)
  e0818c:	3021883a 	mov	r16,r6
  e08190:	3009883a 	mov	r4,r6
  e08194:	180b883a 	mov	r5,r3
  e08198:	30000926 	beq	r6,zero,e081c0 <_setlocale_r+0x58>
  e0819c:	0e0a5ec0 	call	e0a5ec <strcmp>
  e081a0:	8009883a 	mov	r4,r16
  e081a4:	01403874 	movhi	r5,225
  e081a8:	29434404 	addi	r5,r5,3344
  e081ac:	10000b1e 	bne	r2,zero,e081dc <_setlocale_r+0x74>
  e081b0:	8c000d15 	stw	r16,52(r17)
  e081b4:	8c800c15 	stw	r18,48(r17)
  e081b8:	00c03874 	movhi	r3,225
  e081bc:	18c39404 	addi	r3,r3,3664
  e081c0:	1805883a 	mov	r2,r3
  e081c4:	dfc00317 	ldw	ra,12(sp)
  e081c8:	dc800217 	ldw	r18,8(sp)
  e081cc:	dc400117 	ldw	r17,4(sp)
  e081d0:	dc000017 	ldw	r16,0(sp)
  e081d4:	dec00404 	addi	sp,sp,16
  e081d8:	f800283a 	ret
  e081dc:	0e0a5ec0 	call	e0a5ec <strcmp>
  e081e0:	0007883a 	mov	r3,zero
  e081e4:	103ff226 	beq	r2,zero,e081b0 <_setlocale_r+0x48>
  e081e8:	003ff506 	br	e081c0 <_setlocale_r+0x58>

00e081ec <setlocale>:
  e081ec:	01803874 	movhi	r6,225
  e081f0:	318b4704 	addi	r6,r6,11548
  e081f4:	2007883a 	mov	r3,r4
  e081f8:	31000017 	ldw	r4,0(r6)
  e081fc:	280d883a 	mov	r6,r5
  e08200:	180b883a 	mov	r5,r3
  e08204:	0e081681 	jmpi	e08168 <_setlocale_r>

00e08208 <__smakebuf_r>:
  e08208:	2880030b 	ldhu	r2,12(r5)
  e0820c:	deffed04 	addi	sp,sp,-76
  e08210:	dc401015 	stw	r17,64(sp)
  e08214:	1080008c 	andi	r2,r2,2
  e08218:	dc000f15 	stw	r16,60(sp)
  e0821c:	dfc01215 	stw	ra,72(sp)
  e08220:	dc801115 	stw	r18,68(sp)
  e08224:	2821883a 	mov	r16,r5
  e08228:	2023883a 	mov	r17,r4
  e0822c:	10000b26 	beq	r2,zero,e0825c <__smakebuf_r+0x54>
  e08230:	28c010c4 	addi	r3,r5,67
  e08234:	00800044 	movi	r2,1
  e08238:	28800515 	stw	r2,20(r5)
  e0823c:	28c00415 	stw	r3,16(r5)
  e08240:	28c00015 	stw	r3,0(r5)
  e08244:	dfc01217 	ldw	ra,72(sp)
  e08248:	dc801117 	ldw	r18,68(sp)
  e0824c:	dc401017 	ldw	r17,64(sp)
  e08250:	dc000f17 	ldw	r16,60(sp)
  e08254:	dec01304 	addi	sp,sp,76
  e08258:	f800283a 	ret
  e0825c:	2940038f 	ldh	r5,14(r5)
  e08260:	28002116 	blt	r5,zero,e082e8 <__smakebuf_r+0xe0>
  e08264:	d80d883a 	mov	r6,sp
  e08268:	0e0a9680 	call	e0a968 <_fstat_r>
  e0826c:	10001e16 	blt	r2,zero,e082e8 <__smakebuf_r+0xe0>
  e08270:	d8800117 	ldw	r2,4(sp)
  e08274:	00e00014 	movui	r3,32768
  e08278:	113c000c 	andi	r4,r2,61440
  e0827c:	20c03126 	beq	r4,r3,e08344 <__smakebuf_r+0x13c>
  e08280:	8080030b 	ldhu	r2,12(r16)
  e08284:	00c80004 	movi	r3,8192
  e08288:	10820014 	ori	r2,r2,2048
  e0828c:	8080030d 	sth	r2,12(r16)
  e08290:	20c01e26 	beq	r4,r3,e0830c <__smakebuf_r+0x104>
  e08294:	04810004 	movi	r18,1024
  e08298:	8809883a 	mov	r4,r17
  e0829c:	900b883a 	mov	r5,r18
  e082a0:	0e0839c0 	call	e0839c <_malloc_r>
  e082a4:	1009883a 	mov	r4,r2
  e082a8:	10003126 	beq	r2,zero,e08370 <__smakebuf_r+0x168>
  e082ac:	80c0030b 	ldhu	r3,12(r16)
  e082b0:	00803834 	movhi	r2,224
  e082b4:	109d5d04 	addi	r2,r2,30068
  e082b8:	88800f15 	stw	r2,60(r17)
  e082bc:	18c02014 	ori	r3,r3,128
  e082c0:	84800515 	stw	r18,20(r16)
  e082c4:	80c0030d 	sth	r3,12(r16)
  e082c8:	81000415 	stw	r4,16(r16)
  e082cc:	81000015 	stw	r4,0(r16)
  e082d0:	dfc01217 	ldw	ra,72(sp)
  e082d4:	dc801117 	ldw	r18,68(sp)
  e082d8:	dc401017 	ldw	r17,64(sp)
  e082dc:	dc000f17 	ldw	r16,60(sp)
  e082e0:	dec01304 	addi	sp,sp,76
  e082e4:	f800283a 	ret
  e082e8:	80c0030b 	ldhu	r3,12(r16)
  e082ec:	1880200c 	andi	r2,r3,128
  e082f0:	10000426 	beq	r2,zero,e08304 <__smakebuf_r+0xfc>
  e082f4:	04801004 	movi	r18,64
  e082f8:	18820014 	ori	r2,r3,2048
  e082fc:	8080030d 	sth	r2,12(r16)
  e08300:	003fe506 	br	e08298 <__smakebuf_r+0x90>
  e08304:	04810004 	movi	r18,1024
  e08308:	003ffb06 	br	e082f8 <__smakebuf_r+0xf0>
  e0830c:	8140038f 	ldh	r5,14(r16)
  e08310:	8809883a 	mov	r4,r17
  e08314:	0e0a9dc0 	call	e0a9dc <_isatty_r>
  e08318:	103fde26 	beq	r2,zero,e08294 <__smakebuf_r+0x8c>
  e0831c:	8080030b 	ldhu	r2,12(r16)
  e08320:	80c010c4 	addi	r3,r16,67
  e08324:	04810004 	movi	r18,1024
  e08328:	10800054 	ori	r2,r2,1
  e0832c:	8080030d 	sth	r2,12(r16)
  e08330:	00800044 	movi	r2,1
  e08334:	80c00415 	stw	r3,16(r16)
  e08338:	80800515 	stw	r2,20(r16)
  e0833c:	80c00015 	stw	r3,0(r16)
  e08340:	003fd506 	br	e08298 <__smakebuf_r+0x90>
  e08344:	80c00a17 	ldw	r3,40(r16)
  e08348:	00803874 	movhi	r2,225
  e0834c:	10a92a04 	addi	r2,r2,-23384
  e08350:	18bfcb1e 	bne	r3,r2,e08280 <__smakebuf_r+0x78>
  e08354:	8080030b 	ldhu	r2,12(r16)
  e08358:	00c10004 	movi	r3,1024
  e0835c:	1825883a 	mov	r18,r3
  e08360:	10c4b03a 	or	r2,r2,r3
  e08364:	8080030d 	sth	r2,12(r16)
  e08368:	80c01315 	stw	r3,76(r16)
  e0836c:	003fca06 	br	e08298 <__smakebuf_r+0x90>
  e08370:	8100030b 	ldhu	r4,12(r16)
  e08374:	2080800c 	andi	r2,r4,512
  e08378:	103fb21e 	bne	r2,zero,e08244 <__smakebuf_r+0x3c>
  e0837c:	80c010c4 	addi	r3,r16,67
  e08380:	21000094 	ori	r4,r4,2
  e08384:	00800044 	movi	r2,1
  e08388:	80800515 	stw	r2,20(r16)
  e0838c:	8100030d 	sth	r4,12(r16)
  e08390:	80c00415 	stw	r3,16(r16)
  e08394:	80c00015 	stw	r3,0(r16)
  e08398:	003faa06 	br	e08244 <__smakebuf_r+0x3c>

00e0839c <_malloc_r>:
  e0839c:	defff604 	addi	sp,sp,-40
  e083a0:	28c002c4 	addi	r3,r5,11
  e083a4:	00800584 	movi	r2,22
  e083a8:	dc800215 	stw	r18,8(sp)
  e083ac:	dfc00915 	stw	ra,36(sp)
  e083b0:	df000815 	stw	fp,32(sp)
  e083b4:	ddc00715 	stw	r23,28(sp)
  e083b8:	dd800615 	stw	r22,24(sp)
  e083bc:	dd400515 	stw	r21,20(sp)
  e083c0:	dd000415 	stw	r20,16(sp)
  e083c4:	dcc00315 	stw	r19,12(sp)
  e083c8:	dc400115 	stw	r17,4(sp)
  e083cc:	dc000015 	stw	r16,0(sp)
  e083d0:	2025883a 	mov	r18,r4
  e083d4:	10c01236 	bltu	r2,r3,e08420 <_malloc_r+0x84>
  e083d8:	04400404 	movi	r17,16
  e083dc:	8940142e 	bgeu	r17,r5,e08430 <_malloc_r+0x94>
  e083e0:	00800304 	movi	r2,12
  e083e4:	0007883a 	mov	r3,zero
  e083e8:	90800015 	stw	r2,0(r18)
  e083ec:	1805883a 	mov	r2,r3
  e083f0:	dfc00917 	ldw	ra,36(sp)
  e083f4:	df000817 	ldw	fp,32(sp)
  e083f8:	ddc00717 	ldw	r23,28(sp)
  e083fc:	dd800617 	ldw	r22,24(sp)
  e08400:	dd400517 	ldw	r21,20(sp)
  e08404:	dd000417 	ldw	r20,16(sp)
  e08408:	dcc00317 	ldw	r19,12(sp)
  e0840c:	dc800217 	ldw	r18,8(sp)
  e08410:	dc400117 	ldw	r17,4(sp)
  e08414:	dc000017 	ldw	r16,0(sp)
  e08418:	dec00a04 	addi	sp,sp,40
  e0841c:	f800283a 	ret
  e08420:	00bffe04 	movi	r2,-8
  e08424:	18a2703a 	and	r17,r3,r2
  e08428:	883fed16 	blt	r17,zero,e083e0 <_malloc_r+0x44>
  e0842c:	897fec36 	bltu	r17,r5,e083e0 <_malloc_r+0x44>
  e08430:	9009883a 	mov	r4,r18
  e08434:	0e0c7e00 	call	e0c7e0 <__malloc_lock>
  e08438:	00807dc4 	movi	r2,503
  e0843c:	14402b2e 	bgeu	r2,r17,e084ec <_malloc_r+0x150>
  e08440:	8806d27a 	srli	r3,r17,9
  e08444:	18003f1e 	bne	r3,zero,e08544 <_malloc_r+0x1a8>
  e08448:	880cd0fa 	srli	r6,r17,3
  e0844c:	300490fa 	slli	r2,r6,3
  e08450:	02c03874 	movhi	r11,225
  e08454:	5ac56904 	addi	r11,r11,5540
  e08458:	12cb883a 	add	r5,r2,r11
  e0845c:	2c000317 	ldw	r16,12(r5)
  e08460:	580f883a 	mov	r7,r11
  e08464:	2c00041e 	bne	r5,r16,e08478 <_malloc_r+0xdc>
  e08468:	00000a06 	br	e08494 <_malloc_r+0xf8>
  e0846c:	1800860e 	bge	r3,zero,e08688 <_malloc_r+0x2ec>
  e08470:	84000317 	ldw	r16,12(r16)
  e08474:	2c000726 	beq	r5,r16,e08494 <_malloc_r+0xf8>
  e08478:	80800117 	ldw	r2,4(r16)
  e0847c:	00ffff04 	movi	r3,-4
  e08480:	10c8703a 	and	r4,r2,r3
  e08484:	2447c83a 	sub	r3,r4,r17
  e08488:	008003c4 	movi	r2,15
  e0848c:	10fff70e 	bge	r2,r3,e0846c <_malloc_r+0xd0>
  e08490:	31bfffc4 	addi	r6,r6,-1
  e08494:	32400044 	addi	r9,r6,1
  e08498:	02803874 	movhi	r10,225
  e0849c:	52856b04 	addi	r10,r10,5548
  e084a0:	54000217 	ldw	r16,8(r10)
  e084a4:	8280a026 	beq	r16,r10,e08728 <_malloc_r+0x38c>
  e084a8:	80800117 	ldw	r2,4(r16)
  e084ac:	00ffff04 	movi	r3,-4
  e084b0:	10ca703a 	and	r5,r2,r3
  e084b4:	2c4dc83a 	sub	r6,r5,r17
  e084b8:	008003c4 	movi	r2,15
  e084bc:	11808316 	blt	r2,r6,e086cc <_malloc_r+0x330>
  e084c0:	52800315 	stw	r10,12(r10)
  e084c4:	52800215 	stw	r10,8(r10)
  e084c8:	30002916 	blt	r6,zero,e08570 <_malloc_r+0x1d4>
  e084cc:	8147883a 	add	r3,r16,r5
  e084d0:	18800117 	ldw	r2,4(r3)
  e084d4:	9009883a 	mov	r4,r18
  e084d8:	10800054 	ori	r2,r2,1
  e084dc:	18800115 	stw	r2,4(r3)
  e084e0:	0e0c8000 	call	e0c800 <__malloc_unlock>
  e084e4:	80c00204 	addi	r3,r16,8
  e084e8:	003fc006 	br	e083ec <_malloc_r+0x50>
  e084ec:	02c03874 	movhi	r11,225
  e084f0:	5ac56904 	addi	r11,r11,5540
  e084f4:	8ac5883a 	add	r2,r17,r11
  e084f8:	14000317 	ldw	r16,12(r2)
  e084fc:	580f883a 	mov	r7,r11
  e08500:	8806d0fa 	srli	r3,r17,3
  e08504:	14006c26 	beq	r2,r16,e086b8 <_malloc_r+0x31c>
  e08508:	80c00117 	ldw	r3,4(r16)
  e0850c:	00bfff04 	movi	r2,-4
  e08510:	81800317 	ldw	r6,12(r16)
  e08514:	1886703a 	and	r3,r3,r2
  e08518:	80c7883a 	add	r3,r16,r3
  e0851c:	18800117 	ldw	r2,4(r3)
  e08520:	81400217 	ldw	r5,8(r16)
  e08524:	9009883a 	mov	r4,r18
  e08528:	10800054 	ori	r2,r2,1
  e0852c:	18800115 	stw	r2,4(r3)
  e08530:	31400215 	stw	r5,8(r6)
  e08534:	29800315 	stw	r6,12(r5)
  e08538:	0e0c8000 	call	e0c800 <__malloc_unlock>
  e0853c:	80c00204 	addi	r3,r16,8
  e08540:	003faa06 	br	e083ec <_malloc_r+0x50>
  e08544:	00800104 	movi	r2,4
  e08548:	10c0052e 	bgeu	r2,r3,e08560 <_malloc_r+0x1c4>
  e0854c:	00800504 	movi	r2,20
  e08550:	10c07836 	bltu	r2,r3,e08734 <_malloc_r+0x398>
  e08554:	198016c4 	addi	r6,r3,91
  e08558:	300490fa 	slli	r2,r6,3
  e0855c:	003fbc06 	br	e08450 <_malloc_r+0xb4>
  e08560:	8804d1ba 	srli	r2,r17,6
  e08564:	11800e04 	addi	r6,r2,56
  e08568:	300490fa 	slli	r2,r6,3
  e0856c:	003fb806 	br	e08450 <_malloc_r+0xb4>
  e08570:	00807fc4 	movi	r2,511
  e08574:	1140bb36 	bltu	r2,r5,e08864 <_malloc_r+0x4c8>
  e08578:	2806d0fa 	srli	r3,r5,3
  e0857c:	573ffe04 	addi	fp,r10,-8
  e08580:	00800044 	movi	r2,1
  e08584:	180890fa 	slli	r4,r3,3
  e08588:	1807d0ba 	srai	r3,r3,2
  e0858c:	e1c00117 	ldw	r7,4(fp)
  e08590:	5909883a 	add	r4,r11,r4
  e08594:	21400217 	ldw	r5,8(r4)
  e08598:	10c4983a 	sll	r2,r2,r3
  e0859c:	81000315 	stw	r4,12(r16)
  e085a0:	81400215 	stw	r5,8(r16)
  e085a4:	388eb03a 	or	r7,r7,r2
  e085a8:	2c000315 	stw	r16,12(r5)
  e085ac:	24000215 	stw	r16,8(r4)
  e085b0:	e1c00115 	stw	r7,4(fp)
  e085b4:	4807883a 	mov	r3,r9
  e085b8:	4800cd16 	blt	r9,zero,e088f0 <_malloc_r+0x554>
  e085bc:	1807d0ba 	srai	r3,r3,2
  e085c0:	00800044 	movi	r2,1
  e085c4:	10c8983a 	sll	r4,r2,r3
  e085c8:	39004436 	bltu	r7,r4,e086dc <_malloc_r+0x340>
  e085cc:	21c4703a 	and	r2,r4,r7
  e085d0:	10000a1e 	bne	r2,zero,e085fc <_malloc_r+0x260>
  e085d4:	2109883a 	add	r4,r4,r4
  e085d8:	00bfff04 	movi	r2,-4
  e085dc:	4884703a 	and	r2,r9,r2
  e085e0:	3906703a 	and	r3,r7,r4
  e085e4:	12400104 	addi	r9,r2,4
  e085e8:	1800041e 	bne	r3,zero,e085fc <_malloc_r+0x260>
  e085ec:	2109883a 	add	r4,r4,r4
  e085f0:	3904703a 	and	r2,r7,r4
  e085f4:	4a400104 	addi	r9,r9,4
  e085f8:	103ffc26 	beq	r2,zero,e085ec <_malloc_r+0x250>
  e085fc:	480490fa 	slli	r2,r9,3
  e08600:	4819883a 	mov	r12,r9
  e08604:	023fff04 	movi	r8,-4
  e08608:	589b883a 	add	r13,r11,r2
  e0860c:	6807883a 	mov	r3,r13
  e08610:	014003c4 	movi	r5,15
  e08614:	1c000317 	ldw	r16,12(r3)
  e08618:	1c00041e 	bne	r3,r16,e0862c <_malloc_r+0x290>
  e0861c:	0000a706 	br	e088bc <_malloc_r+0x520>
  e08620:	3000ab0e 	bge	r6,zero,e088d0 <_malloc_r+0x534>
  e08624:	84000317 	ldw	r16,12(r16)
  e08628:	1c00a426 	beq	r3,r16,e088bc <_malloc_r+0x520>
  e0862c:	80800117 	ldw	r2,4(r16)
  e08630:	1204703a 	and	r2,r2,r8
  e08634:	144dc83a 	sub	r6,r2,r17
  e08638:	29bff90e 	bge	r5,r6,e08620 <_malloc_r+0x284>
  e0863c:	81000317 	ldw	r4,12(r16)
  e08640:	80c00217 	ldw	r3,8(r16)
  e08644:	89400054 	ori	r5,r17,1
  e08648:	8445883a 	add	r2,r16,r17
  e0864c:	20c00215 	stw	r3,8(r4)
  e08650:	19000315 	stw	r4,12(r3)
  e08654:	81400115 	stw	r5,4(r16)
  e08658:	1187883a 	add	r3,r2,r6
  e0865c:	31000054 	ori	r4,r6,1
  e08660:	50800315 	stw	r2,12(r10)
  e08664:	50800215 	stw	r2,8(r10)
  e08668:	19800015 	stw	r6,0(r3)
  e0866c:	11000115 	stw	r4,4(r2)
  e08670:	12800215 	stw	r10,8(r2)
  e08674:	12800315 	stw	r10,12(r2)
  e08678:	9009883a 	mov	r4,r18
  e0867c:	0e0c8000 	call	e0c800 <__malloc_unlock>
  e08680:	80c00204 	addi	r3,r16,8
  e08684:	003f5906 	br	e083ec <_malloc_r+0x50>
  e08688:	8109883a 	add	r4,r16,r4
  e0868c:	20800117 	ldw	r2,4(r4)
  e08690:	80c00217 	ldw	r3,8(r16)
  e08694:	81400317 	ldw	r5,12(r16)
  e08698:	10800054 	ori	r2,r2,1
  e0869c:	20800115 	stw	r2,4(r4)
  e086a0:	28c00215 	stw	r3,8(r5)
  e086a4:	19400315 	stw	r5,12(r3)
  e086a8:	9009883a 	mov	r4,r18
  e086ac:	0e0c8000 	call	e0c800 <__malloc_unlock>
  e086b0:	80c00204 	addi	r3,r16,8
  e086b4:	003f4d06 	br	e083ec <_malloc_r+0x50>
  e086b8:	80800204 	addi	r2,r16,8
  e086bc:	14000317 	ldw	r16,12(r2)
  e086c0:	143f911e 	bne	r2,r16,e08508 <_malloc_r+0x16c>
  e086c4:	1a400084 	addi	r9,r3,2
  e086c8:	003f7306 	br	e08498 <_malloc_r+0xfc>
  e086cc:	88c00054 	ori	r3,r17,1
  e086d0:	8445883a 	add	r2,r16,r17
  e086d4:	80c00115 	stw	r3,4(r16)
  e086d8:	003fdf06 	br	e08658 <_malloc_r+0x2bc>
  e086dc:	e4000217 	ldw	r16,8(fp)
  e086e0:	00bfff04 	movi	r2,-4
  e086e4:	80c00117 	ldw	r3,4(r16)
  e086e8:	802d883a 	mov	r22,r16
  e086ec:	18aa703a 	and	r21,r3,r2
  e086f0:	ac401636 	bltu	r21,r17,e0874c <_malloc_r+0x3b0>
  e086f4:	ac49c83a 	sub	r4,r21,r17
  e086f8:	008003c4 	movi	r2,15
  e086fc:	1100130e 	bge	r2,r4,e0874c <_malloc_r+0x3b0>
  e08700:	88800054 	ori	r2,r17,1
  e08704:	8447883a 	add	r3,r16,r17
  e08708:	80800115 	stw	r2,4(r16)
  e0870c:	20800054 	ori	r2,r4,1
  e08710:	18800115 	stw	r2,4(r3)
  e08714:	e0c00215 	stw	r3,8(fp)
  e08718:	9009883a 	mov	r4,r18
  e0871c:	0e0c8000 	call	e0c800 <__malloc_unlock>
  e08720:	80c00204 	addi	r3,r16,8
  e08724:	003f3106 	br	e083ec <_malloc_r+0x50>
  e08728:	39c00117 	ldw	r7,4(r7)
  e0872c:	573ffe04 	addi	fp,r10,-8
  e08730:	003fa006 	br	e085b4 <_malloc_r+0x218>
  e08734:	00801504 	movi	r2,84
  e08738:	10c06736 	bltu	r2,r3,e088d8 <_malloc_r+0x53c>
  e0873c:	8804d33a 	srli	r2,r17,12
  e08740:	11801b84 	addi	r6,r2,110
  e08744:	300490fa 	slli	r2,r6,3
  e08748:	003f4106 	br	e08450 <_malloc_r+0xb4>
  e0874c:	d0a71617 	ldw	r2,-25512(gp)
  e08750:	d0e00e17 	ldw	r3,-32712(gp)
  e08754:	053fffc4 	movi	r20,-1
  e08758:	10800404 	addi	r2,r2,16
  e0875c:	88a7883a 	add	r19,r17,r2
  e08760:	1d000326 	beq	r3,r20,e08770 <_malloc_r+0x3d4>
  e08764:	98c3ffc4 	addi	r3,r19,4095
  e08768:	00bc0004 	movi	r2,-4096
  e0876c:	18a6703a 	and	r19,r3,r2
  e08770:	9009883a 	mov	r4,r18
  e08774:	980b883a 	mov	r5,r19
  e08778:	0e0a4300 	call	e0a430 <_sbrk_r>
  e0877c:	1009883a 	mov	r4,r2
  e08780:	15000426 	beq	r2,r20,e08794 <_malloc_r+0x3f8>
  e08784:	854b883a 	add	r5,r16,r21
  e08788:	1029883a 	mov	r20,r2
  e0878c:	11405a2e 	bgeu	r2,r5,e088f8 <_malloc_r+0x55c>
  e08790:	87000c26 	beq	r16,fp,e087c4 <_malloc_r+0x428>
  e08794:	e4000217 	ldw	r16,8(fp)
  e08798:	80c00117 	ldw	r3,4(r16)
  e0879c:	00bfff04 	movi	r2,-4
  e087a0:	1884703a 	and	r2,r3,r2
  e087a4:	14400336 	bltu	r2,r17,e087b4 <_malloc_r+0x418>
  e087a8:	1449c83a 	sub	r4,r2,r17
  e087ac:	008003c4 	movi	r2,15
  e087b0:	113fd316 	blt	r2,r4,e08700 <_malloc_r+0x364>
  e087b4:	9009883a 	mov	r4,r18
  e087b8:	0e0c8000 	call	e0c800 <__malloc_unlock>
  e087bc:	0007883a 	mov	r3,zero
  e087c0:	003f0a06 	br	e083ec <_malloc_r+0x50>
  e087c4:	05c03874 	movhi	r23,225
  e087c8:	bdd25e04 	addi	r23,r23,18808
  e087cc:	b8800017 	ldw	r2,0(r23)
  e087d0:	988d883a 	add	r6,r19,r2
  e087d4:	b9800015 	stw	r6,0(r23)
  e087d8:	d0e00e17 	ldw	r3,-32712(gp)
  e087dc:	00bfffc4 	movi	r2,-1
  e087e0:	18808e26 	beq	r3,r2,e08a1c <_malloc_r+0x680>
  e087e4:	2145c83a 	sub	r2,r4,r5
  e087e8:	3085883a 	add	r2,r6,r2
  e087ec:	b8800015 	stw	r2,0(r23)
  e087f0:	20c001cc 	andi	r3,r4,7
  e087f4:	18005f1e 	bne	r3,zero,e08974 <_malloc_r+0x5d8>
  e087f8:	000b883a 	mov	r5,zero
  e087fc:	a4c5883a 	add	r2,r20,r19
  e08800:	1083ffcc 	andi	r2,r2,4095
  e08804:	00c40004 	movi	r3,4096
  e08808:	1887c83a 	sub	r3,r3,r2
  e0880c:	28e7883a 	add	r19,r5,r3
  e08810:	9009883a 	mov	r4,r18
  e08814:	980b883a 	mov	r5,r19
  e08818:	0e0a4300 	call	e0a430 <_sbrk_r>
  e0881c:	1007883a 	mov	r3,r2
  e08820:	00bfffc4 	movi	r2,-1
  e08824:	18807a26 	beq	r3,r2,e08a10 <_malloc_r+0x674>
  e08828:	1d05c83a 	sub	r2,r3,r20
  e0882c:	9885883a 	add	r2,r19,r2
  e08830:	10c00054 	ori	r3,r2,1
  e08834:	b8800017 	ldw	r2,0(r23)
  e08838:	a021883a 	mov	r16,r20
  e0883c:	a0c00115 	stw	r3,4(r20)
  e08840:	9885883a 	add	r2,r19,r2
  e08844:	b8800015 	stw	r2,0(r23)
  e08848:	e5000215 	stw	r20,8(fp)
  e0884c:	b7003626 	beq	r22,fp,e08928 <_malloc_r+0x58c>
  e08850:	018003c4 	movi	r6,15
  e08854:	35404b36 	bltu	r6,r21,e08984 <_malloc_r+0x5e8>
  e08858:	00800044 	movi	r2,1
  e0885c:	a0800115 	stw	r2,4(r20)
  e08860:	003fcd06 	br	e08798 <_malloc_r+0x3fc>
  e08864:	2808d27a 	srli	r4,r5,9
  e08868:	2000371e 	bne	r4,zero,e08948 <_malloc_r+0x5ac>
  e0886c:	2808d0fa 	srli	r4,r5,3
  e08870:	200690fa 	slli	r3,r4,3
  e08874:	1ad1883a 	add	r8,r3,r11
  e08878:	41800217 	ldw	r6,8(r8)
  e0887c:	41805b26 	beq	r8,r6,e089ec <_malloc_r+0x650>
  e08880:	30800117 	ldw	r2,4(r6)
  e08884:	00ffff04 	movi	r3,-4
  e08888:	10c4703a 	and	r2,r2,r3
  e0888c:	2880022e 	bgeu	r5,r2,e08898 <_malloc_r+0x4fc>
  e08890:	31800217 	ldw	r6,8(r6)
  e08894:	41bffa1e 	bne	r8,r6,e08880 <_malloc_r+0x4e4>
  e08898:	32000317 	ldw	r8,12(r6)
  e0889c:	39c00117 	ldw	r7,4(r7)
  e088a0:	82000315 	stw	r8,12(r16)
  e088a4:	81800215 	stw	r6,8(r16)
  e088a8:	07003874 	movhi	fp,225
  e088ac:	e7056904 	addi	fp,fp,5540
  e088b0:	34000315 	stw	r16,12(r6)
  e088b4:	44000215 	stw	r16,8(r8)
  e088b8:	003f3e06 	br	e085b4 <_malloc_r+0x218>
  e088bc:	63000044 	addi	r12,r12,1
  e088c0:	608000cc 	andi	r2,r12,3
  e088c4:	10005d26 	beq	r2,zero,e08a3c <_malloc_r+0x6a0>
  e088c8:	18c00204 	addi	r3,r3,8
  e088cc:	003f5106 	br	e08614 <_malloc_r+0x278>
  e088d0:	8089883a 	add	r4,r16,r2
  e088d4:	003f6d06 	br	e0868c <_malloc_r+0x2f0>
  e088d8:	00805504 	movi	r2,340
  e088dc:	10c02036 	bltu	r2,r3,e08960 <_malloc_r+0x5c4>
  e088e0:	8804d3fa 	srli	r2,r17,15
  e088e4:	11801dc4 	addi	r6,r2,119
  e088e8:	300490fa 	slli	r2,r6,3
  e088ec:	003ed806 	br	e08450 <_malloc_r+0xb4>
  e088f0:	48c000c4 	addi	r3,r9,3
  e088f4:	003f3106 	br	e085bc <_malloc_r+0x220>
  e088f8:	05c03874 	movhi	r23,225
  e088fc:	bdd25e04 	addi	r23,r23,18808
  e08900:	b8800017 	ldw	r2,0(r23)
  e08904:	988d883a 	add	r6,r19,r2
  e08908:	b9800015 	stw	r6,0(r23)
  e0890c:	293fb21e 	bne	r5,r4,e087d8 <_malloc_r+0x43c>
  e08910:	2083ffcc 	andi	r2,r4,4095
  e08914:	103fb01e 	bne	r2,zero,e087d8 <_malloc_r+0x43c>
  e08918:	e4000217 	ldw	r16,8(fp)
  e0891c:	9d45883a 	add	r2,r19,r21
  e08920:	10800054 	ori	r2,r2,1
  e08924:	80800115 	stw	r2,4(r16)
  e08928:	b8c00017 	ldw	r3,0(r23)
  e0892c:	d0a71717 	ldw	r2,-25508(gp)
  e08930:	10c0012e 	bgeu	r2,r3,e08938 <_malloc_r+0x59c>
  e08934:	d0e71715 	stw	r3,-25508(gp)
  e08938:	d0a71817 	ldw	r2,-25504(gp)
  e0893c:	10ff962e 	bgeu	r2,r3,e08798 <_malloc_r+0x3fc>
  e08940:	d0e71815 	stw	r3,-25504(gp)
  e08944:	003f9406 	br	e08798 <_malloc_r+0x3fc>
  e08948:	00800104 	movi	r2,4
  e0894c:	11001e36 	bltu	r2,r4,e089c8 <_malloc_r+0x62c>
  e08950:	2804d1ba 	srli	r2,r5,6
  e08954:	11000e04 	addi	r4,r2,56
  e08958:	200690fa 	slli	r3,r4,3
  e0895c:	003fc506 	br	e08874 <_malloc_r+0x4d8>
  e08960:	00815504 	movi	r2,1364
  e08964:	10c01d2e 	bgeu	r2,r3,e089dc <_malloc_r+0x640>
  e08968:	01801f84 	movi	r6,126
  e0896c:	0080fc04 	movi	r2,1008
  e08970:	003eb706 	br	e08450 <_malloc_r+0xb4>
  e08974:	00800204 	movi	r2,8
  e08978:	10cbc83a 	sub	r5,r2,r3
  e0897c:	2169883a 	add	r20,r4,r5
  e08980:	003f9e06 	br	e087fc <_malloc_r+0x460>
  e08984:	00bffe04 	movi	r2,-8
  e08988:	a93ffd04 	addi	r4,r21,-12
  e0898c:	2088703a 	and	r4,r4,r2
  e08990:	b10b883a 	add	r5,r22,r4
  e08994:	00c00144 	movi	r3,5
  e08998:	28c00215 	stw	r3,8(r5)
  e0899c:	28c00115 	stw	r3,4(r5)
  e089a0:	b0800117 	ldw	r2,4(r22)
  e089a4:	1080004c 	andi	r2,r2,1
  e089a8:	2084b03a 	or	r2,r4,r2
  e089ac:	b0800115 	stw	r2,4(r22)
  e089b0:	313fdd2e 	bgeu	r6,r4,e08928 <_malloc_r+0x58c>
  e089b4:	b1400204 	addi	r5,r22,8
  e089b8:	9009883a 	mov	r4,r18
  e089bc:	0e078140 	call	e07814 <_free_r>
  e089c0:	e4000217 	ldw	r16,8(fp)
  e089c4:	003fd806 	br	e08928 <_malloc_r+0x58c>
  e089c8:	00800504 	movi	r2,20
  e089cc:	11001536 	bltu	r2,r4,e08a24 <_malloc_r+0x688>
  e089d0:	210016c4 	addi	r4,r4,91
  e089d4:	200690fa 	slli	r3,r4,3
  e089d8:	003fa606 	br	e08874 <_malloc_r+0x4d8>
  e089dc:	8804d4ba 	srli	r2,r17,18
  e089e0:	11801f04 	addi	r6,r2,124
  e089e4:	300490fa 	slli	r2,r6,3
  e089e8:	003e9906 	br	e08450 <_malloc_r+0xb4>
  e089ec:	2009d0ba 	srai	r4,r4,2
  e089f0:	01403874 	movhi	r5,225
  e089f4:	29456904 	addi	r5,r5,5540
  e089f8:	00c00044 	movi	r3,1
  e089fc:	28800117 	ldw	r2,4(r5)
  e08a00:	1906983a 	sll	r3,r3,r4
  e08a04:	10c4b03a 	or	r2,r2,r3
  e08a08:	28800115 	stw	r2,4(r5)
  e08a0c:	003fa306 	br	e0889c <_malloc_r+0x500>
  e08a10:	0027883a 	mov	r19,zero
  e08a14:	00c00044 	movi	r3,1
  e08a18:	003f8606 	br	e08834 <_malloc_r+0x498>
  e08a1c:	d1200e15 	stw	r4,-32712(gp)
  e08a20:	003f7306 	br	e087f0 <_malloc_r+0x454>
  e08a24:	00801504 	movi	r2,84
  e08a28:	11001936 	bltu	r2,r4,e08a90 <_malloc_r+0x6f4>
  e08a2c:	2804d33a 	srli	r2,r5,12
  e08a30:	11001b84 	addi	r4,r2,110
  e08a34:	200690fa 	slli	r3,r4,3
  e08a38:	003f8e06 	br	e08874 <_malloc_r+0x4d8>
  e08a3c:	480b883a 	mov	r5,r9
  e08a40:	6807883a 	mov	r3,r13
  e08a44:	288000cc 	andi	r2,r5,3
  e08a48:	18fffe04 	addi	r3,r3,-8
  e08a4c:	297fffc4 	addi	r5,r5,-1
  e08a50:	10001526 	beq	r2,zero,e08aa8 <_malloc_r+0x70c>
  e08a54:	18800217 	ldw	r2,8(r3)
  e08a58:	10fffa26 	beq	r2,r3,e08a44 <_malloc_r+0x6a8>
  e08a5c:	2109883a 	add	r4,r4,r4
  e08a60:	393f1e36 	bltu	r7,r4,e086dc <_malloc_r+0x340>
  e08a64:	203f1d26 	beq	r4,zero,e086dc <_malloc_r+0x340>
  e08a68:	21c4703a 	and	r2,r4,r7
  e08a6c:	10000226 	beq	r2,zero,e08a78 <_malloc_r+0x6dc>
  e08a70:	6013883a 	mov	r9,r12
  e08a74:	003ee106 	br	e085fc <_malloc_r+0x260>
  e08a78:	2109883a 	add	r4,r4,r4
  e08a7c:	3904703a 	and	r2,r7,r4
  e08a80:	63000104 	addi	r12,r12,4
  e08a84:	103ffc26 	beq	r2,zero,e08a78 <_malloc_r+0x6dc>
  e08a88:	6013883a 	mov	r9,r12
  e08a8c:	003edb06 	br	e085fc <_malloc_r+0x260>
  e08a90:	00805504 	movi	r2,340
  e08a94:	11000836 	bltu	r2,r4,e08ab8 <_malloc_r+0x71c>
  e08a98:	2804d3fa 	srli	r2,r5,15
  e08a9c:	11001dc4 	addi	r4,r2,119
  e08aa0:	200690fa 	slli	r3,r4,3
  e08aa4:	003f7306 	br	e08874 <_malloc_r+0x4d8>
  e08aa8:	0104303a 	nor	r2,zero,r4
  e08aac:	388e703a 	and	r7,r7,r2
  e08ab0:	e1c00115 	stw	r7,4(fp)
  e08ab4:	003fe906 	br	e08a5c <_malloc_r+0x6c0>
  e08ab8:	00815504 	movi	r2,1364
  e08abc:	1100032e 	bgeu	r2,r4,e08acc <_malloc_r+0x730>
  e08ac0:	01001f84 	movi	r4,126
  e08ac4:	00c0fc04 	movi	r3,1008
  e08ac8:	003f6a06 	br	e08874 <_malloc_r+0x4d8>
  e08acc:	2804d4ba 	srli	r2,r5,18
  e08ad0:	11001f04 	addi	r4,r2,124
  e08ad4:	200690fa 	slli	r3,r4,3
  e08ad8:	003f6606 	br	e08874 <_malloc_r+0x4d8>

00e08adc <memchr>:
  e08adc:	008000c4 	movi	r2,3
  e08ae0:	29403fcc 	andi	r5,r5,255
  e08ae4:	2007883a 	mov	r3,r4
  e08ae8:	1180022e 	bgeu	r2,r6,e08af4 <memchr+0x18>
  e08aec:	2084703a 	and	r2,r4,r2
  e08af0:	10000b26 	beq	r2,zero,e08b20 <memchr+0x44>
  e08af4:	313fffc4 	addi	r4,r6,-1
  e08af8:	3000051e 	bne	r6,zero,e08b10 <memchr+0x34>
  e08afc:	00002c06 	br	e08bb0 <memchr+0xd4>
  e08b00:	213fffc4 	addi	r4,r4,-1
  e08b04:	00bfffc4 	movi	r2,-1
  e08b08:	18c00044 	addi	r3,r3,1
  e08b0c:	20802826 	beq	r4,r2,e08bb0 <memchr+0xd4>
  e08b10:	18800003 	ldbu	r2,0(r3)
  e08b14:	28bffa1e 	bne	r5,r2,e08b00 <memchr+0x24>
  e08b18:	1805883a 	mov	r2,r3
  e08b1c:	f800283a 	ret
  e08b20:	0011883a 	mov	r8,zero
  e08b24:	0007883a 	mov	r3,zero
  e08b28:	01c00104 	movi	r7,4
  e08b2c:	4004923a 	slli	r2,r8,8
  e08b30:	18c00044 	addi	r3,r3,1
  e08b34:	1151883a 	add	r8,r2,r5
  e08b38:	19fffc1e 	bne	r3,r7,e08b2c <memchr+0x50>
  e08b3c:	02bfbff4 	movhi	r10,65279
  e08b40:	52bfbfc4 	addi	r10,r10,-257
  e08b44:	02602074 	movhi	r9,32897
  e08b48:	4a602004 	addi	r9,r9,-32640
  e08b4c:	02c000c4 	movi	r11,3
  e08b50:	20800017 	ldw	r2,0(r4)
  e08b54:	31bfff04 	addi	r6,r6,-4
  e08b58:	200f883a 	mov	r7,r4
  e08b5c:	1204f03a 	xor	r2,r2,r8
  e08b60:	1287883a 	add	r3,r2,r10
  e08b64:	1a46703a 	and	r3,r3,r9
  e08b68:	0084303a 	nor	r2,zero,r2
  e08b6c:	10c4703a 	and	r2,r2,r3
  e08b70:	10000b26 	beq	r2,zero,e08ba0 <memchr+0xc4>
  e08b74:	20800003 	ldbu	r2,0(r4)
  e08b78:	28800f26 	beq	r5,r2,e08bb8 <memchr+0xdc>
  e08b7c:	20800043 	ldbu	r2,1(r4)
  e08b80:	21c00044 	addi	r7,r4,1
  e08b84:	28800c26 	beq	r5,r2,e08bb8 <memchr+0xdc>
  e08b88:	20800083 	ldbu	r2,2(r4)
  e08b8c:	21c00084 	addi	r7,r4,2
  e08b90:	28800926 	beq	r5,r2,e08bb8 <memchr+0xdc>
  e08b94:	208000c3 	ldbu	r2,3(r4)
  e08b98:	21c000c4 	addi	r7,r4,3
  e08b9c:	28800626 	beq	r5,r2,e08bb8 <memchr+0xdc>
  e08ba0:	21000104 	addi	r4,r4,4
  e08ba4:	59bfea36 	bltu	r11,r6,e08b50 <memchr+0x74>
  e08ba8:	2007883a 	mov	r3,r4
  e08bac:	003fd106 	br	e08af4 <memchr+0x18>
  e08bb0:	0005883a 	mov	r2,zero
  e08bb4:	f800283a 	ret
  e08bb8:	3805883a 	mov	r2,r7
  e08bbc:	f800283a 	ret

00e08bc0 <memcpy>:
  e08bc0:	01c003c4 	movi	r7,15
  e08bc4:	2007883a 	mov	r3,r4
  e08bc8:	3980032e 	bgeu	r7,r6,e08bd8 <memcpy+0x18>
  e08bcc:	2904b03a 	or	r2,r5,r4
  e08bd0:	108000cc 	andi	r2,r2,3
  e08bd4:	10000926 	beq	r2,zero,e08bfc <memcpy+0x3c>
  e08bd8:	30000626 	beq	r6,zero,e08bf4 <memcpy+0x34>
  e08bdc:	30cd883a 	add	r6,r6,r3
  e08be0:	28800003 	ldbu	r2,0(r5)
  e08be4:	29400044 	addi	r5,r5,1
  e08be8:	18800005 	stb	r2,0(r3)
  e08bec:	18c00044 	addi	r3,r3,1
  e08bf0:	30fffb1e 	bne	r6,r3,e08be0 <memcpy+0x20>
  e08bf4:	2005883a 	mov	r2,r4
  e08bf8:	f800283a 	ret
  e08bfc:	3811883a 	mov	r8,r7
  e08c00:	200f883a 	mov	r7,r4
  e08c04:	28c00017 	ldw	r3,0(r5)
  e08c08:	31bffc04 	addi	r6,r6,-16
  e08c0c:	38c00015 	stw	r3,0(r7)
  e08c10:	28800117 	ldw	r2,4(r5)
  e08c14:	38800115 	stw	r2,4(r7)
  e08c18:	28c00217 	ldw	r3,8(r5)
  e08c1c:	38c00215 	stw	r3,8(r7)
  e08c20:	28800317 	ldw	r2,12(r5)
  e08c24:	29400404 	addi	r5,r5,16
  e08c28:	38800315 	stw	r2,12(r7)
  e08c2c:	39c00404 	addi	r7,r7,16
  e08c30:	41bff436 	bltu	r8,r6,e08c04 <memcpy+0x44>
  e08c34:	008000c4 	movi	r2,3
  e08c38:	1180072e 	bgeu	r2,r6,e08c58 <memcpy+0x98>
  e08c3c:	1007883a 	mov	r3,r2
  e08c40:	28800017 	ldw	r2,0(r5)
  e08c44:	31bfff04 	addi	r6,r6,-4
  e08c48:	29400104 	addi	r5,r5,4
  e08c4c:	38800015 	stw	r2,0(r7)
  e08c50:	39c00104 	addi	r7,r7,4
  e08c54:	19bffa36 	bltu	r3,r6,e08c40 <memcpy+0x80>
  e08c58:	3807883a 	mov	r3,r7
  e08c5c:	003fde06 	br	e08bd8 <memcpy+0x18>

00e08c60 <memmove>:
  e08c60:	2807883a 	mov	r3,r5
  e08c64:	2011883a 	mov	r8,r4
  e08c68:	29000c2e 	bgeu	r5,r4,e08c9c <memmove+0x3c>
  e08c6c:	298f883a 	add	r7,r5,r6
  e08c70:	21c00a2e 	bgeu	r4,r7,e08c9c <memmove+0x3c>
  e08c74:	30000726 	beq	r6,zero,e08c94 <memmove+0x34>
  e08c78:	2187883a 	add	r3,r4,r6
  e08c7c:	198dc83a 	sub	r6,r3,r6
  e08c80:	39ffffc4 	addi	r7,r7,-1
  e08c84:	38800003 	ldbu	r2,0(r7)
  e08c88:	18ffffc4 	addi	r3,r3,-1
  e08c8c:	18800005 	stb	r2,0(r3)
  e08c90:	19bffb1e 	bne	r3,r6,e08c80 <memmove+0x20>
  e08c94:	2005883a 	mov	r2,r4
  e08c98:	f800283a 	ret
  e08c9c:	01c003c4 	movi	r7,15
  e08ca0:	39800a36 	bltu	r7,r6,e08ccc <memmove+0x6c>
  e08ca4:	303ffb26 	beq	r6,zero,e08c94 <memmove+0x34>
  e08ca8:	400f883a 	mov	r7,r8
  e08cac:	320d883a 	add	r6,r6,r8
  e08cb0:	28800003 	ldbu	r2,0(r5)
  e08cb4:	29400044 	addi	r5,r5,1
  e08cb8:	38800005 	stb	r2,0(r7)
  e08cbc:	39c00044 	addi	r7,r7,1
  e08cc0:	39bffb1e 	bne	r7,r6,e08cb0 <memmove+0x50>
  e08cc4:	2005883a 	mov	r2,r4
  e08cc8:	f800283a 	ret
  e08ccc:	1904b03a 	or	r2,r3,r4
  e08cd0:	108000cc 	andi	r2,r2,3
  e08cd4:	103ff31e 	bne	r2,zero,e08ca4 <memmove+0x44>
  e08cd8:	3811883a 	mov	r8,r7
  e08cdc:	180b883a 	mov	r5,r3
  e08ce0:	200f883a 	mov	r7,r4
  e08ce4:	28c00017 	ldw	r3,0(r5)
  e08ce8:	31bffc04 	addi	r6,r6,-16
  e08cec:	38c00015 	stw	r3,0(r7)
  e08cf0:	28800117 	ldw	r2,4(r5)
  e08cf4:	38800115 	stw	r2,4(r7)
  e08cf8:	28c00217 	ldw	r3,8(r5)
  e08cfc:	38c00215 	stw	r3,8(r7)
  e08d00:	28800317 	ldw	r2,12(r5)
  e08d04:	29400404 	addi	r5,r5,16
  e08d08:	38800315 	stw	r2,12(r7)
  e08d0c:	39c00404 	addi	r7,r7,16
  e08d10:	41bff436 	bltu	r8,r6,e08ce4 <memmove+0x84>
  e08d14:	008000c4 	movi	r2,3
  e08d18:	1180072e 	bgeu	r2,r6,e08d38 <memmove+0xd8>
  e08d1c:	1007883a 	mov	r3,r2
  e08d20:	28800017 	ldw	r2,0(r5)
  e08d24:	31bfff04 	addi	r6,r6,-4
  e08d28:	29400104 	addi	r5,r5,4
  e08d2c:	38800015 	stw	r2,0(r7)
  e08d30:	39c00104 	addi	r7,r7,4
  e08d34:	19bffa36 	bltu	r3,r6,e08d20 <memmove+0xc0>
  e08d38:	3811883a 	mov	r8,r7
  e08d3c:	003fd906 	br	e08ca4 <memmove+0x44>

00e08d40 <memset>:
  e08d40:	008000c4 	movi	r2,3
  e08d44:	29403fcc 	andi	r5,r5,255
  e08d48:	2007883a 	mov	r3,r4
  e08d4c:	1180022e 	bgeu	r2,r6,e08d58 <memset+0x18>
  e08d50:	2084703a 	and	r2,r4,r2
  e08d54:	10000826 	beq	r2,zero,e08d78 <memset+0x38>
  e08d58:	30000526 	beq	r6,zero,e08d70 <memset+0x30>
  e08d5c:	2805883a 	mov	r2,r5
  e08d60:	30cd883a 	add	r6,r6,r3
  e08d64:	18800005 	stb	r2,0(r3)
  e08d68:	18c00044 	addi	r3,r3,1
  e08d6c:	19bffd1e 	bne	r3,r6,e08d64 <memset+0x24>
  e08d70:	2005883a 	mov	r2,r4
  e08d74:	f800283a 	ret
  e08d78:	2804923a 	slli	r2,r5,8
  e08d7c:	020003c4 	movi	r8,15
  e08d80:	200f883a 	mov	r7,r4
  e08d84:	2884b03a 	or	r2,r5,r2
  e08d88:	1006943a 	slli	r3,r2,16
  e08d8c:	10c6b03a 	or	r3,r2,r3
  e08d90:	41800a2e 	bgeu	r8,r6,e08dbc <memset+0x7c>
  e08d94:	4005883a 	mov	r2,r8
  e08d98:	31bffc04 	addi	r6,r6,-16
  e08d9c:	38c00015 	stw	r3,0(r7)
  e08da0:	38c00115 	stw	r3,4(r7)
  e08da4:	38c00215 	stw	r3,8(r7)
  e08da8:	38c00315 	stw	r3,12(r7)
  e08dac:	39c00404 	addi	r7,r7,16
  e08db0:	11bff936 	bltu	r2,r6,e08d98 <memset+0x58>
  e08db4:	008000c4 	movi	r2,3
  e08db8:	1180052e 	bgeu	r2,r6,e08dd0 <memset+0x90>
  e08dbc:	31bfff04 	addi	r6,r6,-4
  e08dc0:	008000c4 	movi	r2,3
  e08dc4:	38c00015 	stw	r3,0(r7)
  e08dc8:	39c00104 	addi	r7,r7,4
  e08dcc:	11bffb36 	bltu	r2,r6,e08dbc <memset+0x7c>
  e08dd0:	3807883a 	mov	r3,r7
  e08dd4:	003fe006 	br	e08d58 <memset+0x18>

00e08dd8 <_Bfree>:
  e08dd8:	28000826 	beq	r5,zero,e08dfc <_Bfree+0x24>
  e08ddc:	28800117 	ldw	r2,4(r5)
  e08de0:	21001317 	ldw	r4,76(r4)
  e08de4:	1085883a 	add	r2,r2,r2
  e08de8:	1085883a 	add	r2,r2,r2
  e08dec:	1105883a 	add	r2,r2,r4
  e08df0:	10c00017 	ldw	r3,0(r2)
  e08df4:	28c00015 	stw	r3,0(r5)
  e08df8:	11400015 	stw	r5,0(r2)
  e08dfc:	f800283a 	ret

00e08e00 <__hi0bits>:
  e08e00:	20bfffec 	andhi	r2,r4,65535
  e08e04:	10001426 	beq	r2,zero,e08e58 <__hi0bits+0x58>
  e08e08:	0007883a 	mov	r3,zero
  e08e0c:	20bfc02c 	andhi	r2,r4,65280
  e08e10:	1000021e 	bne	r2,zero,e08e1c <__hi0bits+0x1c>
  e08e14:	2008923a 	slli	r4,r4,8
  e08e18:	18c00204 	addi	r3,r3,8
  e08e1c:	20bc002c 	andhi	r2,r4,61440
  e08e20:	1000021e 	bne	r2,zero,e08e2c <__hi0bits+0x2c>
  e08e24:	2008913a 	slli	r4,r4,4
  e08e28:	18c00104 	addi	r3,r3,4
  e08e2c:	20b0002c 	andhi	r2,r4,49152
  e08e30:	1000031e 	bne	r2,zero,e08e40 <__hi0bits+0x40>
  e08e34:	2105883a 	add	r2,r4,r4
  e08e38:	18c00084 	addi	r3,r3,2
  e08e3c:	1089883a 	add	r4,r2,r2
  e08e40:	20000316 	blt	r4,zero,e08e50 <__hi0bits+0x50>
  e08e44:	2090002c 	andhi	r2,r4,16384
  e08e48:	10000626 	beq	r2,zero,e08e64 <__hi0bits+0x64>
  e08e4c:	18c00044 	addi	r3,r3,1
  e08e50:	1805883a 	mov	r2,r3
  e08e54:	f800283a 	ret
  e08e58:	2008943a 	slli	r4,r4,16
  e08e5c:	00c00404 	movi	r3,16
  e08e60:	003fea06 	br	e08e0c <__hi0bits+0xc>
  e08e64:	00c00804 	movi	r3,32
  e08e68:	1805883a 	mov	r2,r3
  e08e6c:	f800283a 	ret

00e08e70 <__lo0bits>:
  e08e70:	20c00017 	ldw	r3,0(r4)
  e08e74:	188001cc 	andi	r2,r3,7
  e08e78:	10000a26 	beq	r2,zero,e08ea4 <__lo0bits+0x34>
  e08e7c:	1880004c 	andi	r2,r3,1
  e08e80:	1005003a 	cmpeq	r2,r2,zero
  e08e84:	10002126 	beq	r2,zero,e08f0c <__lo0bits+0x9c>
  e08e88:	1880008c 	andi	r2,r3,2
  e08e8c:	1000251e 	bne	r2,zero,e08f24 <__lo0bits+0xb4>
  e08e90:	1804d0ba 	srli	r2,r3,2
  e08e94:	01400084 	movi	r5,2
  e08e98:	20800015 	stw	r2,0(r4)
  e08e9c:	2805883a 	mov	r2,r5
  e08ea0:	f800283a 	ret
  e08ea4:	18bfffcc 	andi	r2,r3,65535
  e08ea8:	10001526 	beq	r2,zero,e08f00 <__lo0bits+0x90>
  e08eac:	000b883a 	mov	r5,zero
  e08eb0:	18803fcc 	andi	r2,r3,255
  e08eb4:	1000021e 	bne	r2,zero,e08ec0 <__lo0bits+0x50>
  e08eb8:	1806d23a 	srli	r3,r3,8
  e08ebc:	29400204 	addi	r5,r5,8
  e08ec0:	188003cc 	andi	r2,r3,15
  e08ec4:	1000021e 	bne	r2,zero,e08ed0 <__lo0bits+0x60>
  e08ec8:	1806d13a 	srli	r3,r3,4
  e08ecc:	29400104 	addi	r5,r5,4
  e08ed0:	188000cc 	andi	r2,r3,3
  e08ed4:	1000021e 	bne	r2,zero,e08ee0 <__lo0bits+0x70>
  e08ed8:	1806d0ba 	srli	r3,r3,2
  e08edc:	29400084 	addi	r5,r5,2
  e08ee0:	1880004c 	andi	r2,r3,1
  e08ee4:	1000031e 	bne	r2,zero,e08ef4 <__lo0bits+0x84>
  e08ee8:	1806d07a 	srli	r3,r3,1
  e08eec:	18000a26 	beq	r3,zero,e08f18 <__lo0bits+0xa8>
  e08ef0:	29400044 	addi	r5,r5,1
  e08ef4:	2805883a 	mov	r2,r5
  e08ef8:	20c00015 	stw	r3,0(r4)
  e08efc:	f800283a 	ret
  e08f00:	1806d43a 	srli	r3,r3,16
  e08f04:	01400404 	movi	r5,16
  e08f08:	003fe906 	br	e08eb0 <__lo0bits+0x40>
  e08f0c:	000b883a 	mov	r5,zero
  e08f10:	2805883a 	mov	r2,r5
  e08f14:	f800283a 	ret
  e08f18:	01400804 	movi	r5,32
  e08f1c:	2805883a 	mov	r2,r5
  e08f20:	f800283a 	ret
  e08f24:	1804d07a 	srli	r2,r3,1
  e08f28:	01400044 	movi	r5,1
  e08f2c:	20800015 	stw	r2,0(r4)
  e08f30:	003fda06 	br	e08e9c <__lo0bits+0x2c>

00e08f34 <__mcmp>:
  e08f34:	20800417 	ldw	r2,16(r4)
  e08f38:	28c00417 	ldw	r3,16(r5)
  e08f3c:	10cfc83a 	sub	r7,r2,r3
  e08f40:	38000c1e 	bne	r7,zero,e08f74 <__mcmp+0x40>
  e08f44:	18c5883a 	add	r2,r3,r3
  e08f48:	1085883a 	add	r2,r2,r2
  e08f4c:	10c00504 	addi	r3,r2,20
  e08f50:	21000504 	addi	r4,r4,20
  e08f54:	28cb883a 	add	r5,r5,r3
  e08f58:	2085883a 	add	r2,r4,r2
  e08f5c:	10bfff04 	addi	r2,r2,-4
  e08f60:	297fff04 	addi	r5,r5,-4
  e08f64:	11800017 	ldw	r6,0(r2)
  e08f68:	28c00017 	ldw	r3,0(r5)
  e08f6c:	30c0031e 	bne	r6,r3,e08f7c <__mcmp+0x48>
  e08f70:	20bffa36 	bltu	r4,r2,e08f5c <__mcmp+0x28>
  e08f74:	3805883a 	mov	r2,r7
  e08f78:	f800283a 	ret
  e08f7c:	30c00336 	bltu	r6,r3,e08f8c <__mcmp+0x58>
  e08f80:	01c00044 	movi	r7,1
  e08f84:	3805883a 	mov	r2,r7
  e08f88:	f800283a 	ret
  e08f8c:	01ffffc4 	movi	r7,-1
  e08f90:	003ff806 	br	e08f74 <__mcmp+0x40>

00e08f94 <__ulp>:
  e08f94:	295ffc2c 	andhi	r5,r5,32752
  e08f98:	013f3034 	movhi	r4,64704
  e08f9c:	290b883a 	add	r5,r5,r4
  e08fa0:	0145c83a 	sub	r2,zero,r5
  e08fa4:	1007d53a 	srai	r3,r2,20
  e08fa8:	000d883a 	mov	r6,zero
  e08fac:	0140040e 	bge	zero,r5,e08fc0 <__ulp+0x2c>
  e08fb0:	280f883a 	mov	r7,r5
  e08fb4:	3807883a 	mov	r3,r7
  e08fb8:	3005883a 	mov	r2,r6
  e08fbc:	f800283a 	ret
  e08fc0:	008004c4 	movi	r2,19
  e08fc4:	193ffb04 	addi	r4,r3,-20
  e08fc8:	10c00c0e 	bge	r2,r3,e08ffc <__ulp+0x68>
  e08fcc:	008007c4 	movi	r2,31
  e08fd0:	1107c83a 	sub	r3,r2,r4
  e08fd4:	00800784 	movi	r2,30
  e08fd8:	01400044 	movi	r5,1
  e08fdc:	11000216 	blt	r2,r4,e08fe8 <__ulp+0x54>
  e08fe0:	00800044 	movi	r2,1
  e08fe4:	10ca983a 	sll	r5,r2,r3
  e08fe8:	000f883a 	mov	r7,zero
  e08fec:	280d883a 	mov	r6,r5
  e08ff0:	3807883a 	mov	r3,r7
  e08ff4:	3005883a 	mov	r2,r6
  e08ff8:	f800283a 	ret
  e08ffc:	00800234 	movhi	r2,8
  e09000:	10cfd83a 	sra	r7,r2,r3
  e09004:	000d883a 	mov	r6,zero
  e09008:	3005883a 	mov	r2,r6
  e0900c:	3807883a 	mov	r3,r7
  e09010:	f800283a 	ret

00e09014 <__b2d>:
  e09014:	20800417 	ldw	r2,16(r4)
  e09018:	defff904 	addi	sp,sp,-28
  e0901c:	dd000415 	stw	r20,16(sp)
  e09020:	1085883a 	add	r2,r2,r2
  e09024:	25000504 	addi	r20,r4,20
  e09028:	1085883a 	add	r2,r2,r2
  e0902c:	dc000015 	stw	r16,0(sp)
  e09030:	a0a1883a 	add	r16,r20,r2
  e09034:	dd400515 	stw	r21,20(sp)
  e09038:	857fff17 	ldw	r21,-4(r16)
  e0903c:	dc400115 	stw	r17,4(sp)
  e09040:	dfc00615 	stw	ra,24(sp)
  e09044:	a809883a 	mov	r4,r21
  e09048:	2823883a 	mov	r17,r5
  e0904c:	dcc00315 	stw	r19,12(sp)
  e09050:	dc800215 	stw	r18,8(sp)
  e09054:	0e08e000 	call	e08e00 <__hi0bits>
  e09058:	100b883a 	mov	r5,r2
  e0905c:	00800804 	movi	r2,32
  e09060:	1145c83a 	sub	r2,r2,r5
  e09064:	88800015 	stw	r2,0(r17)
  e09068:	00800284 	movi	r2,10
  e0906c:	80ffff04 	addi	r3,r16,-4
  e09070:	11401416 	blt	r2,r5,e090c4 <__b2d+0xb0>
  e09074:	008002c4 	movi	r2,11
  e09078:	1149c83a 	sub	r4,r2,r5
  e0907c:	a0c02736 	bltu	r20,r3,e0911c <__b2d+0x108>
  e09080:	000d883a 	mov	r6,zero
  e09084:	28800544 	addi	r2,r5,21
  e09088:	a906d83a 	srl	r3,r21,r4
  e0908c:	a884983a 	sll	r2,r21,r2
  e09090:	1ccffc34 	orhi	r19,r3,16368
  e09094:	11a4b03a 	or	r18,r2,r6
  e09098:	9005883a 	mov	r2,r18
  e0909c:	9807883a 	mov	r3,r19
  e090a0:	dfc00617 	ldw	ra,24(sp)
  e090a4:	dd400517 	ldw	r21,20(sp)
  e090a8:	dd000417 	ldw	r20,16(sp)
  e090ac:	dcc00317 	ldw	r19,12(sp)
  e090b0:	dc800217 	ldw	r18,8(sp)
  e090b4:	dc400117 	ldw	r17,4(sp)
  e090b8:	dc000017 	ldw	r16,0(sp)
  e090bc:	dec00704 	addi	sp,sp,28
  e090c0:	f800283a 	ret
  e090c4:	a0c00e36 	bltu	r20,r3,e09100 <__b2d+0xec>
  e090c8:	293ffd44 	addi	r4,r5,-11
  e090cc:	000d883a 	mov	r6,zero
  e090d0:	20000f26 	beq	r4,zero,e09110 <__b2d+0xfc>
  e090d4:	00800804 	movi	r2,32
  e090d8:	110bc83a 	sub	r5,r2,r4
  e090dc:	a0c01236 	bltu	r20,r3,e09128 <__b2d+0x114>
  e090e0:	000f883a 	mov	r7,zero
  e090e4:	a904983a 	sll	r2,r21,r4
  e090e8:	3146d83a 	srl	r3,r6,r5
  e090ec:	3108983a 	sll	r4,r6,r4
  e090f0:	108ffc34 	orhi	r2,r2,16368
  e090f4:	18a6b03a 	or	r19,r3,r2
  e090f8:	3924b03a 	or	r18,r7,r4
  e090fc:	003fe606 	br	e09098 <__b2d+0x84>
  e09100:	293ffd44 	addi	r4,r5,-11
  e09104:	81bffe17 	ldw	r6,-8(r16)
  e09108:	80fffe04 	addi	r3,r16,-8
  e0910c:	203ff11e 	bne	r4,zero,e090d4 <__b2d+0xc0>
  e09110:	accffc34 	orhi	r19,r21,16368
  e09114:	3025883a 	mov	r18,r6
  e09118:	003fdf06 	br	e09098 <__b2d+0x84>
  e0911c:	18bfff17 	ldw	r2,-4(r3)
  e09120:	110cd83a 	srl	r6,r2,r4
  e09124:	003fd706 	br	e09084 <__b2d+0x70>
  e09128:	18bfff17 	ldw	r2,-4(r3)
  e0912c:	114ed83a 	srl	r7,r2,r5
  e09130:	003fec06 	br	e090e4 <__b2d+0xd0>

00e09134 <__ratio>:
  e09134:	defff904 	addi	sp,sp,-28
  e09138:	dc400215 	stw	r17,8(sp)
  e0913c:	2823883a 	mov	r17,r5
  e09140:	d80b883a 	mov	r5,sp
  e09144:	dfc00615 	stw	ra,24(sp)
  e09148:	dd000515 	stw	r20,20(sp)
  e0914c:	dcc00415 	stw	r19,16(sp)
  e09150:	dc800315 	stw	r18,12(sp)
  e09154:	2025883a 	mov	r18,r4
  e09158:	0e090140 	call	e09014 <__b2d>
  e0915c:	8809883a 	mov	r4,r17
  e09160:	d9400104 	addi	r5,sp,4
  e09164:	1027883a 	mov	r19,r2
  e09168:	1829883a 	mov	r20,r3
  e0916c:	0e090140 	call	e09014 <__b2d>
  e09170:	89000417 	ldw	r4,16(r17)
  e09174:	91c00417 	ldw	r7,16(r18)
  e09178:	d9800117 	ldw	r6,4(sp)
  e0917c:	180b883a 	mov	r5,r3
  e09180:	390fc83a 	sub	r7,r7,r4
  e09184:	1009883a 	mov	r4,r2
  e09188:	d8800017 	ldw	r2,0(sp)
  e0918c:	380e917a 	slli	r7,r7,5
  e09190:	2011883a 	mov	r8,r4
  e09194:	1185c83a 	sub	r2,r2,r6
  e09198:	11c5883a 	add	r2,r2,r7
  e0919c:	1006953a 	slli	r3,r2,20
  e091a0:	2813883a 	mov	r9,r5
  e091a4:	00800d0e 	bge	zero,r2,e091dc <__ratio+0xa8>
  e091a8:	1d29883a 	add	r20,r3,r20
  e091ac:	a00b883a 	mov	r5,r20
  e091b0:	480f883a 	mov	r7,r9
  e091b4:	9809883a 	mov	r4,r19
  e091b8:	400d883a 	mov	r6,r8
  e091bc:	0e02a900 	call	e02a90 <__divdf3>
  e091c0:	dfc00617 	ldw	ra,24(sp)
  e091c4:	dd000517 	ldw	r20,20(sp)
  e091c8:	dcc00417 	ldw	r19,16(sp)
  e091cc:	dc800317 	ldw	r18,12(sp)
  e091d0:	dc400217 	ldw	r17,8(sp)
  e091d4:	dec00704 	addi	sp,sp,28
  e091d8:	f800283a 	ret
  e091dc:	28d3c83a 	sub	r9,r5,r3
  e091e0:	003ff206 	br	e091ac <__ratio+0x78>

00e091e4 <_mprec_log10>:
  e091e4:	defffe04 	addi	sp,sp,-8
  e091e8:	008005c4 	movi	r2,23
  e091ec:	dc000015 	stw	r16,0(sp)
  e091f0:	dfc00115 	stw	ra,4(sp)
  e091f4:	2021883a 	mov	r16,r4
  e091f8:	11000c16 	blt	r2,r4,e0922c <_mprec_log10+0x48>
  e091fc:	200490fa 	slli	r2,r4,3
  e09200:	00c03874 	movhi	r3,225
  e09204:	18c3c804 	addi	r3,r3,3872
  e09208:	10c5883a 	add	r2,r2,r3
  e0920c:	12400117 	ldw	r9,4(r2)
  e09210:	12000017 	ldw	r8,0(r2)
  e09214:	4807883a 	mov	r3,r9
  e09218:	4005883a 	mov	r2,r8
  e0921c:	dfc00117 	ldw	ra,4(sp)
  e09220:	dc000017 	ldw	r16,0(sp)
  e09224:	dec00204 	addi	sp,sp,8
  e09228:	f800283a 	ret
  e0922c:	0011883a 	mov	r8,zero
  e09230:	024ffc34 	movhi	r9,16368
  e09234:	0005883a 	mov	r2,zero
  e09238:	00d00934 	movhi	r3,16420
  e0923c:	480b883a 	mov	r5,r9
  e09240:	4009883a 	mov	r4,r8
  e09244:	180f883a 	mov	r7,r3
  e09248:	100d883a 	mov	r6,r2
  e0924c:	0e0b6c80 	call	e0b6c8 <__muldf3>
  e09250:	843fffc4 	addi	r16,r16,-1
  e09254:	1011883a 	mov	r8,r2
  e09258:	1813883a 	mov	r9,r3
  e0925c:	803ff51e 	bne	r16,zero,e09234 <_mprec_log10+0x50>
  e09260:	4005883a 	mov	r2,r8
  e09264:	4807883a 	mov	r3,r9
  e09268:	dfc00117 	ldw	ra,4(sp)
  e0926c:	dc000017 	ldw	r16,0(sp)
  e09270:	dec00204 	addi	sp,sp,8
  e09274:	f800283a 	ret

00e09278 <__copybits>:
  e09278:	297fffc4 	addi	r5,r5,-1
  e0927c:	30800417 	ldw	r2,16(r6)
  e09280:	280bd17a 	srai	r5,r5,5
  e09284:	31800504 	addi	r6,r6,20
  e09288:	1085883a 	add	r2,r2,r2
  e0928c:	294b883a 	add	r5,r5,r5
  e09290:	294b883a 	add	r5,r5,r5
  e09294:	1085883a 	add	r2,r2,r2
  e09298:	290b883a 	add	r5,r5,r4
  e0929c:	3087883a 	add	r3,r6,r2
  e092a0:	29400104 	addi	r5,r5,4
  e092a4:	30c0052e 	bgeu	r6,r3,e092bc <__copybits+0x44>
  e092a8:	30800017 	ldw	r2,0(r6)
  e092ac:	31800104 	addi	r6,r6,4
  e092b0:	20800015 	stw	r2,0(r4)
  e092b4:	21000104 	addi	r4,r4,4
  e092b8:	30fffb36 	bltu	r6,r3,e092a8 <__copybits+0x30>
  e092bc:	2140032e 	bgeu	r4,r5,e092cc <__copybits+0x54>
  e092c0:	20000015 	stw	zero,0(r4)
  e092c4:	21000104 	addi	r4,r4,4
  e092c8:	217ffd36 	bltu	r4,r5,e092c0 <__copybits+0x48>
  e092cc:	f800283a 	ret

00e092d0 <__any_on>:
  e092d0:	20800417 	ldw	r2,16(r4)
  e092d4:	2807d17a 	srai	r3,r5,5
  e092d8:	21000504 	addi	r4,r4,20
  e092dc:	10c00d0e 	bge	r2,r3,e09314 <__any_on+0x44>
  e092e0:	1085883a 	add	r2,r2,r2
  e092e4:	1085883a 	add	r2,r2,r2
  e092e8:	208d883a 	add	r6,r4,r2
  e092ec:	2180182e 	bgeu	r4,r6,e09350 <__any_on+0x80>
  e092f0:	30bfff17 	ldw	r2,-4(r6)
  e092f4:	30ffff04 	addi	r3,r6,-4
  e092f8:	1000041e 	bne	r2,zero,e0930c <__any_on+0x3c>
  e092fc:	20c0142e 	bgeu	r4,r3,e09350 <__any_on+0x80>
  e09300:	18ffff04 	addi	r3,r3,-4
  e09304:	18800017 	ldw	r2,0(r3)
  e09308:	103ffc26 	beq	r2,zero,e092fc <__any_on+0x2c>
  e0930c:	00800044 	movi	r2,1
  e09310:	f800283a 	ret
  e09314:	18800a0e 	bge	r3,r2,e09340 <__any_on+0x70>
  e09318:	294007cc 	andi	r5,r5,31
  e0931c:	28000826 	beq	r5,zero,e09340 <__any_on+0x70>
  e09320:	18c5883a 	add	r2,r3,r3
  e09324:	1085883a 	add	r2,r2,r2
  e09328:	208d883a 	add	r6,r4,r2
  e0932c:	30c00017 	ldw	r3,0(r6)
  e09330:	1944d83a 	srl	r2,r3,r5
  e09334:	1144983a 	sll	r2,r2,r5
  e09338:	18bff41e 	bne	r3,r2,e0930c <__any_on+0x3c>
  e0933c:	003feb06 	br	e092ec <__any_on+0x1c>
  e09340:	18c5883a 	add	r2,r3,r3
  e09344:	1085883a 	add	r2,r2,r2
  e09348:	208d883a 	add	r6,r4,r2
  e0934c:	003fe706 	br	e092ec <__any_on+0x1c>
  e09350:	0005883a 	mov	r2,zero
  e09354:	f800283a 	ret

00e09358 <_Balloc>:
  e09358:	20c01317 	ldw	r3,76(r4)
  e0935c:	defffb04 	addi	sp,sp,-20
  e09360:	dcc00315 	stw	r19,12(sp)
  e09364:	dc800215 	stw	r18,8(sp)
  e09368:	dfc00415 	stw	ra,16(sp)
  e0936c:	2825883a 	mov	r18,r5
  e09370:	dc400115 	stw	r17,4(sp)
  e09374:	dc000015 	stw	r16,0(sp)
  e09378:	2027883a 	mov	r19,r4
  e0937c:	01800404 	movi	r6,16
  e09380:	01400104 	movi	r5,4
  e09384:	18001726 	beq	r3,zero,e093e4 <_Balloc+0x8c>
  e09388:	01400044 	movi	r5,1
  e0938c:	9485883a 	add	r2,r18,r18
  e09390:	2ca2983a 	sll	r17,r5,r18
  e09394:	1085883a 	add	r2,r2,r2
  e09398:	10c7883a 	add	r3,r2,r3
  e0939c:	1c000017 	ldw	r16,0(r3)
  e093a0:	8c4d883a 	add	r6,r17,r17
  e093a4:	318d883a 	add	r6,r6,r6
  e093a8:	9809883a 	mov	r4,r19
  e093ac:	31800504 	addi	r6,r6,20
  e093b0:	80001226 	beq	r16,zero,e093fc <_Balloc+0xa4>
  e093b4:	80800017 	ldw	r2,0(r16)
  e093b8:	18800015 	stw	r2,0(r3)
  e093bc:	80000415 	stw	zero,16(r16)
  e093c0:	80000315 	stw	zero,12(r16)
  e093c4:	8005883a 	mov	r2,r16
  e093c8:	dfc00417 	ldw	ra,16(sp)
  e093cc:	dcc00317 	ldw	r19,12(sp)
  e093d0:	dc800217 	ldw	r18,8(sp)
  e093d4:	dc400117 	ldw	r17,4(sp)
  e093d8:	dc000017 	ldw	r16,0(sp)
  e093dc:	dec00504 	addi	sp,sp,20
  e093e0:	f800283a 	ret
  e093e4:	0e0a7200 	call	e0a720 <_calloc_r>
  e093e8:	1007883a 	mov	r3,r2
  e093ec:	0021883a 	mov	r16,zero
  e093f0:	98801315 	stw	r2,76(r19)
  e093f4:	103fe41e 	bne	r2,zero,e09388 <_Balloc+0x30>
  e093f8:	003ff206 	br	e093c4 <_Balloc+0x6c>
  e093fc:	0e0a7200 	call	e0a720 <_calloc_r>
  e09400:	103ff026 	beq	r2,zero,e093c4 <_Balloc+0x6c>
  e09404:	1021883a 	mov	r16,r2
  e09408:	14800115 	stw	r18,4(r2)
  e0940c:	14400215 	stw	r17,8(r2)
  e09410:	003fea06 	br	e093bc <_Balloc+0x64>

00e09414 <__d2b>:
  e09414:	defff504 	addi	sp,sp,-44
  e09418:	dcc00515 	stw	r19,20(sp)
  e0941c:	04c00044 	movi	r19,1
  e09420:	dc000215 	stw	r16,8(sp)
  e09424:	2821883a 	mov	r16,r5
  e09428:	980b883a 	mov	r5,r19
  e0942c:	ddc00915 	stw	r23,36(sp)
  e09430:	dd800815 	stw	r22,32(sp)
  e09434:	dd400715 	stw	r21,28(sp)
  e09438:	dd000615 	stw	r20,24(sp)
  e0943c:	dc800415 	stw	r18,16(sp)
  e09440:	dc400315 	stw	r17,12(sp)
  e09444:	dfc00a15 	stw	ra,40(sp)
  e09448:	3023883a 	mov	r17,r6
  e0944c:	382d883a 	mov	r22,r7
  e09450:	ddc00b17 	ldw	r23,44(sp)
  e09454:	0e093580 	call	e09358 <_Balloc>
  e09458:	1025883a 	mov	r18,r2
  e0945c:	00a00034 	movhi	r2,32768
  e09460:	10bfffc4 	addi	r2,r2,-1
  e09464:	8888703a 	and	r4,r17,r2
  e09468:	202ad53a 	srli	r21,r4,20
  e0946c:	00800434 	movhi	r2,16
  e09470:	10bfffc4 	addi	r2,r2,-1
  e09474:	8886703a 	and	r3,r17,r2
  e09478:	a829003a 	cmpeq	r20,r21,zero
  e0947c:	800b883a 	mov	r5,r16
  e09480:	d8c00115 	stw	r3,4(sp)
  e09484:	94000504 	addi	r16,r18,20
  e09488:	a000021e 	bne	r20,zero,e09494 <__d2b+0x80>
  e0948c:	18c00434 	orhi	r3,r3,16
  e09490:	d8c00115 	stw	r3,4(sp)
  e09494:	28002726 	beq	r5,zero,e09534 <__d2b+0x120>
  e09498:	d809883a 	mov	r4,sp
  e0949c:	d9400015 	stw	r5,0(sp)
  e094a0:	0e08e700 	call	e08e70 <__lo0bits>
  e094a4:	100d883a 	mov	r6,r2
  e094a8:	10003526 	beq	r2,zero,e09580 <__d2b+0x16c>
  e094ac:	d8c00117 	ldw	r3,4(sp)
  e094b0:	00800804 	movi	r2,32
  e094b4:	1185c83a 	sub	r2,r2,r6
  e094b8:	d9000017 	ldw	r4,0(sp)
  e094bc:	1886983a 	sll	r3,r3,r2
  e094c0:	1906b03a 	or	r3,r3,r4
  e094c4:	90c00515 	stw	r3,20(r18)
  e094c8:	d8c00117 	ldw	r3,4(sp)
  e094cc:	1986d83a 	srl	r3,r3,r6
  e094d0:	d8c00115 	stw	r3,4(sp)
  e094d4:	180b003a 	cmpeq	r5,r3,zero
  e094d8:	00800084 	movi	r2,2
  e094dc:	114bc83a 	sub	r5,r2,r5
  e094e0:	80c00115 	stw	r3,4(r16)
  e094e4:	91400415 	stw	r5,16(r18)
  e094e8:	a0001a1e 	bne	r20,zero,e09554 <__d2b+0x140>
  e094ec:	3545883a 	add	r2,r6,r21
  e094f0:	10bef344 	addi	r2,r2,-1075
  e094f4:	00c00d44 	movi	r3,53
  e094f8:	b0800015 	stw	r2,0(r22)
  e094fc:	1987c83a 	sub	r3,r3,r6
  e09500:	b8c00015 	stw	r3,0(r23)
  e09504:	9005883a 	mov	r2,r18
  e09508:	dfc00a17 	ldw	ra,40(sp)
  e0950c:	ddc00917 	ldw	r23,36(sp)
  e09510:	dd800817 	ldw	r22,32(sp)
  e09514:	dd400717 	ldw	r21,28(sp)
  e09518:	dd000617 	ldw	r20,24(sp)
  e0951c:	dcc00517 	ldw	r19,20(sp)
  e09520:	dc800417 	ldw	r18,16(sp)
  e09524:	dc400317 	ldw	r17,12(sp)
  e09528:	dc000217 	ldw	r16,8(sp)
  e0952c:	dec00b04 	addi	sp,sp,44
  e09530:	f800283a 	ret
  e09534:	d9000104 	addi	r4,sp,4
  e09538:	0e08e700 	call	e08e70 <__lo0bits>
  e0953c:	11800804 	addi	r6,r2,32
  e09540:	d8800117 	ldw	r2,4(sp)
  e09544:	94c00415 	stw	r19,16(r18)
  e09548:	980b883a 	mov	r5,r19
  e0954c:	90800515 	stw	r2,20(r18)
  e09550:	a03fe626 	beq	r20,zero,e094ec <__d2b+0xd8>
  e09554:	2945883a 	add	r2,r5,r5
  e09558:	1085883a 	add	r2,r2,r2
  e0955c:	1405883a 	add	r2,r2,r16
  e09560:	113fff17 	ldw	r4,-4(r2)
  e09564:	30fef384 	addi	r3,r6,-1074
  e09568:	2820917a 	slli	r16,r5,5
  e0956c:	b0c00015 	stw	r3,0(r22)
  e09570:	0e08e000 	call	e08e00 <__hi0bits>
  e09574:	80a1c83a 	sub	r16,r16,r2
  e09578:	bc000015 	stw	r16,0(r23)
  e0957c:	003fe106 	br	e09504 <__d2b+0xf0>
  e09580:	d8800017 	ldw	r2,0(sp)
  e09584:	90800515 	stw	r2,20(r18)
  e09588:	d8c00117 	ldw	r3,4(sp)
  e0958c:	003fd106 	br	e094d4 <__d2b+0xc0>

00e09590 <__mdiff>:
  e09590:	defffb04 	addi	sp,sp,-20
  e09594:	dc000015 	stw	r16,0(sp)
  e09598:	2821883a 	mov	r16,r5
  e0959c:	dc800215 	stw	r18,8(sp)
  e095a0:	300b883a 	mov	r5,r6
  e095a4:	2025883a 	mov	r18,r4
  e095a8:	8009883a 	mov	r4,r16
  e095ac:	dc400115 	stw	r17,4(sp)
  e095b0:	dfc00415 	stw	ra,16(sp)
  e095b4:	dcc00315 	stw	r19,12(sp)
  e095b8:	3023883a 	mov	r17,r6
  e095bc:	0e08f340 	call	e08f34 <__mcmp>
  e095c0:	10004226 	beq	r2,zero,e096cc <__mdiff+0x13c>
  e095c4:	10005016 	blt	r2,zero,e09708 <__mdiff+0x178>
  e095c8:	0027883a 	mov	r19,zero
  e095cc:	81400117 	ldw	r5,4(r16)
  e095d0:	9009883a 	mov	r4,r18
  e095d4:	0e093580 	call	e09358 <_Balloc>
  e095d8:	1019883a 	mov	r12,r2
  e095dc:	82800417 	ldw	r10,16(r16)
  e095e0:	88800417 	ldw	r2,16(r17)
  e095e4:	81800504 	addi	r6,r16,20
  e095e8:	5287883a 	add	r3,r10,r10
  e095ec:	1085883a 	add	r2,r2,r2
  e095f0:	18c7883a 	add	r3,r3,r3
  e095f4:	1085883a 	add	r2,r2,r2
  e095f8:	8a000504 	addi	r8,r17,20
  e095fc:	64c00315 	stw	r19,12(r12)
  e09600:	30db883a 	add	r13,r6,r3
  e09604:	4097883a 	add	r11,r8,r2
  e09608:	61c00504 	addi	r7,r12,20
  e0960c:	0013883a 	mov	r9,zero
  e09610:	31000017 	ldw	r4,0(r6)
  e09614:	41400017 	ldw	r5,0(r8)
  e09618:	42000104 	addi	r8,r8,4
  e0961c:	20bfffcc 	andi	r2,r4,65535
  e09620:	28ffffcc 	andi	r3,r5,65535
  e09624:	10c5c83a 	sub	r2,r2,r3
  e09628:	1245883a 	add	r2,r2,r9
  e0962c:	2008d43a 	srli	r4,r4,16
  e09630:	280ad43a 	srli	r5,r5,16
  e09634:	1007d43a 	srai	r3,r2,16
  e09638:	3880000d 	sth	r2,0(r7)
  e0963c:	2149c83a 	sub	r4,r4,r5
  e09640:	20c9883a 	add	r4,r4,r3
  e09644:	3900008d 	sth	r4,2(r7)
  e09648:	31800104 	addi	r6,r6,4
  e0964c:	39c00104 	addi	r7,r7,4
  e09650:	2013d43a 	srai	r9,r4,16
  e09654:	42ffee36 	bltu	r8,r11,e09610 <__mdiff+0x80>
  e09658:	33400c2e 	bgeu	r6,r13,e0968c <__mdiff+0xfc>
  e0965c:	30800017 	ldw	r2,0(r6)
  e09660:	31800104 	addi	r6,r6,4
  e09664:	10ffffcc 	andi	r3,r2,65535
  e09668:	1a47883a 	add	r3,r3,r9
  e0966c:	1004d43a 	srli	r2,r2,16
  e09670:	1809d43a 	srai	r4,r3,16
  e09674:	38c0000d 	sth	r3,0(r7)
  e09678:	1105883a 	add	r2,r2,r4
  e0967c:	3880008d 	sth	r2,2(r7)
  e09680:	1013d43a 	srai	r9,r2,16
  e09684:	39c00104 	addi	r7,r7,4
  e09688:	337ff436 	bltu	r6,r13,e0965c <__mdiff+0xcc>
  e0968c:	38bfff17 	ldw	r2,-4(r7)
  e09690:	38ffff04 	addi	r3,r7,-4
  e09694:	1000041e 	bne	r2,zero,e096a8 <__mdiff+0x118>
  e09698:	18ffff04 	addi	r3,r3,-4
  e0969c:	18800017 	ldw	r2,0(r3)
  e096a0:	52bfffc4 	addi	r10,r10,-1
  e096a4:	103ffc26 	beq	r2,zero,e09698 <__mdiff+0x108>
  e096a8:	6005883a 	mov	r2,r12
  e096ac:	62800415 	stw	r10,16(r12)
  e096b0:	dfc00417 	ldw	ra,16(sp)
  e096b4:	dcc00317 	ldw	r19,12(sp)
  e096b8:	dc800217 	ldw	r18,8(sp)
  e096bc:	dc400117 	ldw	r17,4(sp)
  e096c0:	dc000017 	ldw	r16,0(sp)
  e096c4:	dec00504 	addi	sp,sp,20
  e096c8:	f800283a 	ret
  e096cc:	9009883a 	mov	r4,r18
  e096d0:	000b883a 	mov	r5,zero
  e096d4:	0e093580 	call	e09358 <_Balloc>
  e096d8:	1019883a 	mov	r12,r2
  e096dc:	00800044 	movi	r2,1
  e096e0:	60800415 	stw	r2,16(r12)
  e096e4:	6005883a 	mov	r2,r12
  e096e8:	60000515 	stw	zero,20(r12)
  e096ec:	dfc00417 	ldw	ra,16(sp)
  e096f0:	dcc00317 	ldw	r19,12(sp)
  e096f4:	dc800217 	ldw	r18,8(sp)
  e096f8:	dc400117 	ldw	r17,4(sp)
  e096fc:	dc000017 	ldw	r16,0(sp)
  e09700:	dec00504 	addi	sp,sp,20
  e09704:	f800283a 	ret
  e09708:	880d883a 	mov	r6,r17
  e0970c:	04c00044 	movi	r19,1
  e09710:	8023883a 	mov	r17,r16
  e09714:	3021883a 	mov	r16,r6
  e09718:	003fac06 	br	e095cc <__mdiff+0x3c>

00e0971c <__lshift>:
  e0971c:	defff904 	addi	sp,sp,-28
  e09720:	28800417 	ldw	r2,16(r5)
  e09724:	dc000015 	stw	r16,0(sp)
  e09728:	3021d17a 	srai	r16,r6,5
  e0972c:	28c00217 	ldw	r3,8(r5)
  e09730:	10800044 	addi	r2,r2,1
  e09734:	dc400115 	stw	r17,4(sp)
  e09738:	80a3883a 	add	r17,r16,r2
  e0973c:	dd400515 	stw	r21,20(sp)
  e09740:	dd000415 	stw	r20,16(sp)
  e09744:	dc800215 	stw	r18,8(sp)
  e09748:	dfc00615 	stw	ra,24(sp)
  e0974c:	2825883a 	mov	r18,r5
  e09750:	dcc00315 	stw	r19,12(sp)
  e09754:	3029883a 	mov	r20,r6
  e09758:	202b883a 	mov	r21,r4
  e0975c:	29400117 	ldw	r5,4(r5)
  e09760:	1c40030e 	bge	r3,r17,e09770 <__lshift+0x54>
  e09764:	18c7883a 	add	r3,r3,r3
  e09768:	29400044 	addi	r5,r5,1
  e0976c:	1c7ffd16 	blt	r3,r17,e09764 <__lshift+0x48>
  e09770:	a809883a 	mov	r4,r21
  e09774:	0e093580 	call	e09358 <_Balloc>
  e09778:	1027883a 	mov	r19,r2
  e0977c:	11400504 	addi	r5,r2,20
  e09780:	0400090e 	bge	zero,r16,e097a8 <__lshift+0x8c>
  e09784:	2805883a 	mov	r2,r5
  e09788:	0007883a 	mov	r3,zero
  e0978c:	18c00044 	addi	r3,r3,1
  e09790:	10000015 	stw	zero,0(r2)
  e09794:	10800104 	addi	r2,r2,4
  e09798:	80fffc1e 	bne	r16,r3,e0978c <__lshift+0x70>
  e0979c:	8405883a 	add	r2,r16,r16
  e097a0:	1085883a 	add	r2,r2,r2
  e097a4:	288b883a 	add	r5,r5,r2
  e097a8:	90800417 	ldw	r2,16(r18)
  e097ac:	91000504 	addi	r4,r18,20
  e097b0:	a18007cc 	andi	r6,r20,31
  e097b4:	1085883a 	add	r2,r2,r2
  e097b8:	1085883a 	add	r2,r2,r2
  e097bc:	208f883a 	add	r7,r4,r2
  e097c0:	30001e26 	beq	r6,zero,e0983c <__lshift+0x120>
  e097c4:	00800804 	movi	r2,32
  e097c8:	1191c83a 	sub	r8,r2,r6
  e097cc:	0007883a 	mov	r3,zero
  e097d0:	20800017 	ldw	r2,0(r4)
  e097d4:	1184983a 	sll	r2,r2,r6
  e097d8:	1884b03a 	or	r2,r3,r2
  e097dc:	28800015 	stw	r2,0(r5)
  e097e0:	20c00017 	ldw	r3,0(r4)
  e097e4:	21000104 	addi	r4,r4,4
  e097e8:	29400104 	addi	r5,r5,4
  e097ec:	1a06d83a 	srl	r3,r3,r8
  e097f0:	21fff736 	bltu	r4,r7,e097d0 <__lshift+0xb4>
  e097f4:	28c00015 	stw	r3,0(r5)
  e097f8:	18000126 	beq	r3,zero,e09800 <__lshift+0xe4>
  e097fc:	8c400044 	addi	r17,r17,1
  e09800:	88bfffc4 	addi	r2,r17,-1
  e09804:	98800415 	stw	r2,16(r19)
  e09808:	a809883a 	mov	r4,r21
  e0980c:	900b883a 	mov	r5,r18
  e09810:	0e08dd80 	call	e08dd8 <_Bfree>
  e09814:	9805883a 	mov	r2,r19
  e09818:	dfc00617 	ldw	ra,24(sp)
  e0981c:	dd400517 	ldw	r21,20(sp)
  e09820:	dd000417 	ldw	r20,16(sp)
  e09824:	dcc00317 	ldw	r19,12(sp)
  e09828:	dc800217 	ldw	r18,8(sp)
  e0982c:	dc400117 	ldw	r17,4(sp)
  e09830:	dc000017 	ldw	r16,0(sp)
  e09834:	dec00704 	addi	sp,sp,28
  e09838:	f800283a 	ret
  e0983c:	20800017 	ldw	r2,0(r4)
  e09840:	21000104 	addi	r4,r4,4
  e09844:	28800015 	stw	r2,0(r5)
  e09848:	29400104 	addi	r5,r5,4
  e0984c:	21ffec2e 	bgeu	r4,r7,e09800 <__lshift+0xe4>
  e09850:	20800017 	ldw	r2,0(r4)
  e09854:	21000104 	addi	r4,r4,4
  e09858:	28800015 	stw	r2,0(r5)
  e0985c:	29400104 	addi	r5,r5,4
  e09860:	21fff636 	bltu	r4,r7,e0983c <__lshift+0x120>
  e09864:	003fe606 	br	e09800 <__lshift+0xe4>

00e09868 <__multiply>:
  e09868:	defff904 	addi	sp,sp,-28
  e0986c:	dcc00315 	stw	r19,12(sp)
  e09870:	dc800215 	stw	r18,8(sp)
  e09874:	2cc00417 	ldw	r19,16(r5)
  e09878:	34800417 	ldw	r18,16(r6)
  e0987c:	dd000415 	stw	r20,16(sp)
  e09880:	dc400115 	stw	r17,4(sp)
  e09884:	dfc00615 	stw	ra,24(sp)
  e09888:	dd400515 	stw	r21,20(sp)
  e0988c:	dc000015 	stw	r16,0(sp)
  e09890:	2823883a 	mov	r17,r5
  e09894:	3029883a 	mov	r20,r6
  e09898:	9c80040e 	bge	r19,r18,e098ac <__multiply+0x44>
  e0989c:	9027883a 	mov	r19,r18
  e098a0:	2c800417 	ldw	r18,16(r5)
  e098a4:	2829883a 	mov	r20,r5
  e098a8:	3023883a 	mov	r17,r6
  e098ac:	88800217 	ldw	r2,8(r17)
  e098b0:	9ca1883a 	add	r16,r19,r18
  e098b4:	89400117 	ldw	r5,4(r17)
  e098b8:	1400010e 	bge	r2,r16,e098c0 <__multiply+0x58>
  e098bc:	29400044 	addi	r5,r5,1
  e098c0:	0e093580 	call	e09358 <_Balloc>
  e098c4:	102b883a 	mov	r21,r2
  e098c8:	8405883a 	add	r2,r16,r16
  e098cc:	1085883a 	add	r2,r2,r2
  e098d0:	a9000504 	addi	r4,r21,20
  e098d4:	209d883a 	add	r14,r4,r2
  e098d8:	2380042e 	bgeu	r4,r14,e098ec <__multiply+0x84>
  e098dc:	2005883a 	mov	r2,r4
  e098e0:	10000015 	stw	zero,0(r2)
  e098e4:	10800104 	addi	r2,r2,4
  e098e8:	13bffd36 	bltu	r2,r14,e098e0 <__multiply+0x78>
  e098ec:	9485883a 	add	r2,r18,r18
  e098f0:	9cc7883a 	add	r3,r19,r19
  e098f4:	a1800504 	addi	r6,r20,20
  e098f8:	1085883a 	add	r2,r2,r2
  e098fc:	8b400504 	addi	r13,r17,20
  e09900:	18c7883a 	add	r3,r3,r3
  e09904:	309f883a 	add	r15,r6,r2
  e09908:	68d7883a 	add	r11,r13,r3
  e0990c:	33c03b2e 	bgeu	r6,r15,e099fc <__multiply+0x194>
  e09910:	2019883a 	mov	r12,r4
  e09914:	30800017 	ldw	r2,0(r6)
  e09918:	127fffcc 	andi	r9,r2,65535
  e0991c:	48001826 	beq	r9,zero,e09980 <__multiply+0x118>
  e09920:	6811883a 	mov	r8,r13
  e09924:	600f883a 	mov	r7,r12
  e09928:	0015883a 	mov	r10,zero
  e0992c:	40c00017 	ldw	r3,0(r8)
  e09930:	39400017 	ldw	r5,0(r7)
  e09934:	42000104 	addi	r8,r8,4
  e09938:	193fffcc 	andi	r4,r3,65535
  e0993c:	4909383a 	mul	r4,r9,r4
  e09940:	1806d43a 	srli	r3,r3,16
  e09944:	28bfffcc 	andi	r2,r5,65535
  e09948:	5085883a 	add	r2,r10,r2
  e0994c:	2089883a 	add	r4,r4,r2
  e09950:	48c7383a 	mul	r3,r9,r3
  e09954:	280ad43a 	srli	r5,r5,16
  e09958:	2004d43a 	srli	r2,r4,16
  e0995c:	3900000d 	sth	r4,0(r7)
  e09960:	1947883a 	add	r3,r3,r5
  e09964:	10c5883a 	add	r2,r2,r3
  e09968:	3880008d 	sth	r2,2(r7)
  e0996c:	1014d43a 	srli	r10,r2,16
  e09970:	39c00104 	addi	r7,r7,4
  e09974:	42ffed36 	bltu	r8,r11,e0992c <__multiply+0xc4>
  e09978:	3a800015 	stw	r10,0(r7)
  e0997c:	30800017 	ldw	r2,0(r6)
  e09980:	1012d43a 	srli	r9,r2,16
  e09984:	48001926 	beq	r9,zero,e099ec <__multiply+0x184>
  e09988:	60800017 	ldw	r2,0(r12)
  e0998c:	6811883a 	mov	r8,r13
  e09990:	600f883a 	mov	r7,r12
  e09994:	0015883a 	mov	r10,zero
  e09998:	100b883a 	mov	r5,r2
  e0999c:	41000017 	ldw	r4,0(r8)
  e099a0:	2806d43a 	srli	r3,r5,16
  e099a4:	3880000d 	sth	r2,0(r7)
  e099a8:	20bfffcc 	andi	r2,r4,65535
  e099ac:	4885383a 	mul	r2,r9,r2
  e099b0:	50c7883a 	add	r3,r10,r3
  e099b4:	2008d43a 	srli	r4,r4,16
  e099b8:	10c5883a 	add	r2,r2,r3
  e099bc:	3880008d 	sth	r2,2(r7)
  e099c0:	39c00104 	addi	r7,r7,4
  e099c4:	39400017 	ldw	r5,0(r7)
  e099c8:	4909383a 	mul	r4,r9,r4
  e099cc:	1004d43a 	srli	r2,r2,16
  e099d0:	28ffffcc 	andi	r3,r5,65535
  e099d4:	20c9883a 	add	r4,r4,r3
  e099d8:	1105883a 	add	r2,r2,r4
  e099dc:	42000104 	addi	r8,r8,4
  e099e0:	1014d43a 	srli	r10,r2,16
  e099e4:	42ffed36 	bltu	r8,r11,e0999c <__multiply+0x134>
  e099e8:	38800015 	stw	r2,0(r7)
  e099ec:	31800104 	addi	r6,r6,4
  e099f0:	33c0022e 	bgeu	r6,r15,e099fc <__multiply+0x194>
  e099f4:	63000104 	addi	r12,r12,4
  e099f8:	003fc606 	br	e09914 <__multiply+0xac>
  e099fc:	0400090e 	bge	zero,r16,e09a24 <__multiply+0x1bc>
  e09a00:	70bfff17 	ldw	r2,-4(r14)
  e09a04:	70ffff04 	addi	r3,r14,-4
  e09a08:	10000326 	beq	r2,zero,e09a18 <__multiply+0x1b0>
  e09a0c:	00000506 	br	e09a24 <__multiply+0x1bc>
  e09a10:	18800017 	ldw	r2,0(r3)
  e09a14:	1000031e 	bne	r2,zero,e09a24 <__multiply+0x1bc>
  e09a18:	843fffc4 	addi	r16,r16,-1
  e09a1c:	18ffff04 	addi	r3,r3,-4
  e09a20:	803ffb1e 	bne	r16,zero,e09a10 <__multiply+0x1a8>
  e09a24:	a805883a 	mov	r2,r21
  e09a28:	ac000415 	stw	r16,16(r21)
  e09a2c:	dfc00617 	ldw	ra,24(sp)
  e09a30:	dd400517 	ldw	r21,20(sp)
  e09a34:	dd000417 	ldw	r20,16(sp)
  e09a38:	dcc00317 	ldw	r19,12(sp)
  e09a3c:	dc800217 	ldw	r18,8(sp)
  e09a40:	dc400117 	ldw	r17,4(sp)
  e09a44:	dc000017 	ldw	r16,0(sp)
  e09a48:	dec00704 	addi	sp,sp,28
  e09a4c:	f800283a 	ret

00e09a50 <__i2b>:
  e09a50:	defffd04 	addi	sp,sp,-12
  e09a54:	dc000015 	stw	r16,0(sp)
  e09a58:	04000044 	movi	r16,1
  e09a5c:	dc800115 	stw	r18,4(sp)
  e09a60:	2825883a 	mov	r18,r5
  e09a64:	800b883a 	mov	r5,r16
  e09a68:	dfc00215 	stw	ra,8(sp)
  e09a6c:	0e093580 	call	e09358 <_Balloc>
  e09a70:	14000415 	stw	r16,16(r2)
  e09a74:	14800515 	stw	r18,20(r2)
  e09a78:	dfc00217 	ldw	ra,8(sp)
  e09a7c:	dc800117 	ldw	r18,4(sp)
  e09a80:	dc000017 	ldw	r16,0(sp)
  e09a84:	dec00304 	addi	sp,sp,12
  e09a88:	f800283a 	ret

00e09a8c <__multadd>:
  e09a8c:	defffa04 	addi	sp,sp,-24
  e09a90:	dc800215 	stw	r18,8(sp)
  e09a94:	2c800417 	ldw	r18,16(r5)
  e09a98:	dd000415 	stw	r20,16(sp)
  e09a9c:	dcc00315 	stw	r19,12(sp)
  e09aa0:	dc000015 	stw	r16,0(sp)
  e09aa4:	dfc00515 	stw	ra,20(sp)
  e09aa8:	3821883a 	mov	r16,r7
  e09aac:	dc400115 	stw	r17,4(sp)
  e09ab0:	2827883a 	mov	r19,r5
  e09ab4:	2029883a 	mov	r20,r4
  e09ab8:	2a000504 	addi	r8,r5,20
  e09abc:	000f883a 	mov	r7,zero
  e09ac0:	40800017 	ldw	r2,0(r8)
  e09ac4:	39c00044 	addi	r7,r7,1
  e09ac8:	10ffffcc 	andi	r3,r2,65535
  e09acc:	1987383a 	mul	r3,r3,r6
  e09ad0:	1004d43a 	srli	r2,r2,16
  e09ad4:	1c07883a 	add	r3,r3,r16
  e09ad8:	180ad43a 	srli	r5,r3,16
  e09adc:	1185383a 	mul	r2,r2,r6
  e09ae0:	18ffffcc 	andi	r3,r3,65535
  e09ae4:	1145883a 	add	r2,r2,r5
  e09ae8:	1008943a 	slli	r4,r2,16
  e09aec:	1020d43a 	srli	r16,r2,16
  e09af0:	20c9883a 	add	r4,r4,r3
  e09af4:	41000015 	stw	r4,0(r8)
  e09af8:	42000104 	addi	r8,r8,4
  e09afc:	3cbff016 	blt	r7,r18,e09ac0 <__multadd+0x34>
  e09b00:	80000826 	beq	r16,zero,e09b24 <__multadd+0x98>
  e09b04:	98800217 	ldw	r2,8(r19)
  e09b08:	90800f0e 	bge	r18,r2,e09b48 <__multadd+0xbc>
  e09b0c:	9485883a 	add	r2,r18,r18
  e09b10:	1085883a 	add	r2,r2,r2
  e09b14:	14c5883a 	add	r2,r2,r19
  e09b18:	90c00044 	addi	r3,r18,1
  e09b1c:	14000515 	stw	r16,20(r2)
  e09b20:	98c00415 	stw	r3,16(r19)
  e09b24:	9805883a 	mov	r2,r19
  e09b28:	dfc00517 	ldw	ra,20(sp)
  e09b2c:	dd000417 	ldw	r20,16(sp)
  e09b30:	dcc00317 	ldw	r19,12(sp)
  e09b34:	dc800217 	ldw	r18,8(sp)
  e09b38:	dc400117 	ldw	r17,4(sp)
  e09b3c:	dc000017 	ldw	r16,0(sp)
  e09b40:	dec00604 	addi	sp,sp,24
  e09b44:	f800283a 	ret
  e09b48:	99400117 	ldw	r5,4(r19)
  e09b4c:	a009883a 	mov	r4,r20
  e09b50:	29400044 	addi	r5,r5,1
  e09b54:	0e093580 	call	e09358 <_Balloc>
  e09b58:	99800417 	ldw	r6,16(r19)
  e09b5c:	99400304 	addi	r5,r19,12
  e09b60:	11000304 	addi	r4,r2,12
  e09b64:	318d883a 	add	r6,r6,r6
  e09b68:	318d883a 	add	r6,r6,r6
  e09b6c:	31800204 	addi	r6,r6,8
  e09b70:	1023883a 	mov	r17,r2
  e09b74:	0e08bc00 	call	e08bc0 <memcpy>
  e09b78:	980b883a 	mov	r5,r19
  e09b7c:	a009883a 	mov	r4,r20
  e09b80:	0e08dd80 	call	e08dd8 <_Bfree>
  e09b84:	8827883a 	mov	r19,r17
  e09b88:	003fe006 	br	e09b0c <__multadd+0x80>

00e09b8c <__pow5mult>:
  e09b8c:	defffa04 	addi	sp,sp,-24
  e09b90:	308000cc 	andi	r2,r6,3
  e09b94:	dd000415 	stw	r20,16(sp)
  e09b98:	dcc00315 	stw	r19,12(sp)
  e09b9c:	dc000015 	stw	r16,0(sp)
  e09ba0:	dfc00515 	stw	ra,20(sp)
  e09ba4:	dc800215 	stw	r18,8(sp)
  e09ba8:	dc400115 	stw	r17,4(sp)
  e09bac:	3021883a 	mov	r16,r6
  e09bb0:	2027883a 	mov	r19,r4
  e09bb4:	2829883a 	mov	r20,r5
  e09bb8:	10002b1e 	bne	r2,zero,e09c68 <__pow5mult+0xdc>
  e09bbc:	8025d0ba 	srai	r18,r16,2
  e09bc0:	90001b26 	beq	r18,zero,e09c30 <__pow5mult+0xa4>
  e09bc4:	9c001217 	ldw	r16,72(r19)
  e09bc8:	8000081e 	bne	r16,zero,e09bec <__pow5mult+0x60>
  e09bcc:	00003006 	br	e09c90 <__pow5mult+0x104>
  e09bd0:	800b883a 	mov	r5,r16
  e09bd4:	800d883a 	mov	r6,r16
  e09bd8:	9809883a 	mov	r4,r19
  e09bdc:	90001426 	beq	r18,zero,e09c30 <__pow5mult+0xa4>
  e09be0:	80800017 	ldw	r2,0(r16)
  e09be4:	10001b26 	beq	r2,zero,e09c54 <__pow5mult+0xc8>
  e09be8:	1021883a 	mov	r16,r2
  e09bec:	9080004c 	andi	r2,r18,1
  e09bf0:	1005003a 	cmpeq	r2,r2,zero
  e09bf4:	9025d07a 	srai	r18,r18,1
  e09bf8:	800d883a 	mov	r6,r16
  e09bfc:	9809883a 	mov	r4,r19
  e09c00:	a00b883a 	mov	r5,r20
  e09c04:	103ff21e 	bne	r2,zero,e09bd0 <__pow5mult+0x44>
  e09c08:	0e098680 	call	e09868 <__multiply>
  e09c0c:	a00b883a 	mov	r5,r20
  e09c10:	9809883a 	mov	r4,r19
  e09c14:	1023883a 	mov	r17,r2
  e09c18:	0e08dd80 	call	e08dd8 <_Bfree>
  e09c1c:	8829883a 	mov	r20,r17
  e09c20:	800b883a 	mov	r5,r16
  e09c24:	800d883a 	mov	r6,r16
  e09c28:	9809883a 	mov	r4,r19
  e09c2c:	903fec1e 	bne	r18,zero,e09be0 <__pow5mult+0x54>
  e09c30:	a005883a 	mov	r2,r20
  e09c34:	dfc00517 	ldw	ra,20(sp)
  e09c38:	dd000417 	ldw	r20,16(sp)
  e09c3c:	dcc00317 	ldw	r19,12(sp)
  e09c40:	dc800217 	ldw	r18,8(sp)
  e09c44:	dc400117 	ldw	r17,4(sp)
  e09c48:	dc000017 	ldw	r16,0(sp)
  e09c4c:	dec00604 	addi	sp,sp,24
  e09c50:	f800283a 	ret
  e09c54:	0e098680 	call	e09868 <__multiply>
  e09c58:	80800015 	stw	r2,0(r16)
  e09c5c:	1021883a 	mov	r16,r2
  e09c60:	10000015 	stw	zero,0(r2)
  e09c64:	003fe106 	br	e09bec <__pow5mult+0x60>
  e09c68:	1085883a 	add	r2,r2,r2
  e09c6c:	00c03874 	movhi	r3,225
  e09c70:	18c40e04 	addi	r3,r3,4152
  e09c74:	1085883a 	add	r2,r2,r2
  e09c78:	10c5883a 	add	r2,r2,r3
  e09c7c:	11bfff17 	ldw	r6,-4(r2)
  e09c80:	000f883a 	mov	r7,zero
  e09c84:	0e09a8c0 	call	e09a8c <__multadd>
  e09c88:	1029883a 	mov	r20,r2
  e09c8c:	003fcb06 	br	e09bbc <__pow5mult+0x30>
  e09c90:	9809883a 	mov	r4,r19
  e09c94:	01409c44 	movi	r5,625
  e09c98:	0e09a500 	call	e09a50 <__i2b>
  e09c9c:	98801215 	stw	r2,72(r19)
  e09ca0:	1021883a 	mov	r16,r2
  e09ca4:	10000015 	stw	zero,0(r2)
  e09ca8:	003fd006 	br	e09bec <__pow5mult+0x60>

00e09cac <__s2b>:
  e09cac:	defff904 	addi	sp,sp,-28
  e09cb0:	dcc00315 	stw	r19,12(sp)
  e09cb4:	dc800215 	stw	r18,8(sp)
  e09cb8:	2827883a 	mov	r19,r5
  e09cbc:	2025883a 	mov	r18,r4
  e09cc0:	01400244 	movi	r5,9
  e09cc4:	39000204 	addi	r4,r7,8
  e09cc8:	dd000415 	stw	r20,16(sp)
  e09ccc:	dc400115 	stw	r17,4(sp)
  e09cd0:	dfc00615 	stw	ra,24(sp)
  e09cd4:	dd400515 	stw	r21,20(sp)
  e09cd8:	dc000015 	stw	r16,0(sp)
  e09cdc:	3829883a 	mov	r20,r7
  e09ce0:	3023883a 	mov	r17,r6
  e09ce4:	0e0c08c0 	call	e0c08c <__divsi3>
  e09ce8:	00c00044 	movi	r3,1
  e09cec:	1880350e 	bge	r3,r2,e09dc4 <__s2b+0x118>
  e09cf0:	000b883a 	mov	r5,zero
  e09cf4:	18c7883a 	add	r3,r3,r3
  e09cf8:	29400044 	addi	r5,r5,1
  e09cfc:	18bffd16 	blt	r3,r2,e09cf4 <__s2b+0x48>
  e09d00:	9009883a 	mov	r4,r18
  e09d04:	0e093580 	call	e09358 <_Balloc>
  e09d08:	1011883a 	mov	r8,r2
  e09d0c:	d8800717 	ldw	r2,28(sp)
  e09d10:	00c00044 	movi	r3,1
  e09d14:	01800244 	movi	r6,9
  e09d18:	40800515 	stw	r2,20(r8)
  e09d1c:	40c00415 	stw	r3,16(r8)
  e09d20:	3440260e 	bge	r6,r17,e09dbc <__s2b+0x110>
  e09d24:	3021883a 	mov	r16,r6
  e09d28:	99ab883a 	add	r21,r19,r6
  e09d2c:	9c05883a 	add	r2,r19,r16
  e09d30:	11c00007 	ldb	r7,0(r2)
  e09d34:	400b883a 	mov	r5,r8
  e09d38:	9009883a 	mov	r4,r18
  e09d3c:	39fff404 	addi	r7,r7,-48
  e09d40:	01800284 	movi	r6,10
  e09d44:	0e09a8c0 	call	e09a8c <__multadd>
  e09d48:	84000044 	addi	r16,r16,1
  e09d4c:	1011883a 	mov	r8,r2
  e09d50:	8c3ff61e 	bne	r17,r16,e09d2c <__s2b+0x80>
  e09d54:	ac45883a 	add	r2,r21,r17
  e09d58:	117ffe04 	addi	r5,r2,-8
  e09d5c:	880d883a 	mov	r6,r17
  e09d60:	35000c0e 	bge	r6,r20,e09d94 <__s2b+0xe8>
  e09d64:	a185c83a 	sub	r2,r20,r6
  e09d68:	2821883a 	mov	r16,r5
  e09d6c:	28a3883a 	add	r17,r5,r2
  e09d70:	81c00007 	ldb	r7,0(r16)
  e09d74:	400b883a 	mov	r5,r8
  e09d78:	9009883a 	mov	r4,r18
  e09d7c:	39fff404 	addi	r7,r7,-48
  e09d80:	01800284 	movi	r6,10
  e09d84:	0e09a8c0 	call	e09a8c <__multadd>
  e09d88:	84000044 	addi	r16,r16,1
  e09d8c:	1011883a 	mov	r8,r2
  e09d90:	847ff71e 	bne	r16,r17,e09d70 <__s2b+0xc4>
  e09d94:	4005883a 	mov	r2,r8
  e09d98:	dfc00617 	ldw	ra,24(sp)
  e09d9c:	dd400517 	ldw	r21,20(sp)
  e09da0:	dd000417 	ldw	r20,16(sp)
  e09da4:	dcc00317 	ldw	r19,12(sp)
  e09da8:	dc800217 	ldw	r18,8(sp)
  e09dac:	dc400117 	ldw	r17,4(sp)
  e09db0:	dc000017 	ldw	r16,0(sp)
  e09db4:	dec00704 	addi	sp,sp,28
  e09db8:	f800283a 	ret
  e09dbc:	99400284 	addi	r5,r19,10
  e09dc0:	003fe706 	br	e09d60 <__s2b+0xb4>
  e09dc4:	000b883a 	mov	r5,zero
  e09dc8:	003fcd06 	br	e09d00 <__s2b+0x54>

00e09dcc <_realloc_r>:
  e09dcc:	defff404 	addi	sp,sp,-48
  e09dd0:	dd800815 	stw	r22,32(sp)
  e09dd4:	dc800415 	stw	r18,16(sp)
  e09dd8:	dc400315 	stw	r17,12(sp)
  e09ddc:	dfc00b15 	stw	ra,44(sp)
  e09de0:	df000a15 	stw	fp,40(sp)
  e09de4:	ddc00915 	stw	r23,36(sp)
  e09de8:	dd400715 	stw	r21,28(sp)
  e09dec:	dd000615 	stw	r20,24(sp)
  e09df0:	dcc00515 	stw	r19,20(sp)
  e09df4:	dc000215 	stw	r16,8(sp)
  e09df8:	2825883a 	mov	r18,r5
  e09dfc:	3023883a 	mov	r17,r6
  e09e00:	202d883a 	mov	r22,r4
  e09e04:	2800c926 	beq	r5,zero,e0a12c <_realloc_r+0x360>
  e09e08:	0e0c7e00 	call	e0c7e0 <__malloc_lock>
  e09e0c:	943ffe04 	addi	r16,r18,-8
  e09e10:	88c002c4 	addi	r3,r17,11
  e09e14:	00800584 	movi	r2,22
  e09e18:	82000117 	ldw	r8,4(r16)
  e09e1c:	10c01b2e 	bgeu	r2,r3,e09e8c <_realloc_r+0xc0>
  e09e20:	00bffe04 	movi	r2,-8
  e09e24:	188e703a 	and	r7,r3,r2
  e09e28:	3839883a 	mov	fp,r7
  e09e2c:	38001a16 	blt	r7,zero,e09e98 <_realloc_r+0xcc>
  e09e30:	e4401936 	bltu	fp,r17,e09e98 <_realloc_r+0xcc>
  e09e34:	013fff04 	movi	r4,-4
  e09e38:	4126703a 	and	r19,r8,r4
  e09e3c:	99c02616 	blt	r19,r7,e09ed8 <_realloc_r+0x10c>
  e09e40:	802b883a 	mov	r21,r16
  e09e44:	9829883a 	mov	r20,r19
  e09e48:	84000204 	addi	r16,r16,8
  e09e4c:	a80f883a 	mov	r7,r21
  e09e50:	a70dc83a 	sub	r6,r20,fp
  e09e54:	008003c4 	movi	r2,15
  e09e58:	1180c136 	bltu	r2,r6,e0a160 <_realloc_r+0x394>
  e09e5c:	38800117 	ldw	r2,4(r7)
  e09e60:	a549883a 	add	r4,r20,r21
  e09e64:	1080004c 	andi	r2,r2,1
  e09e68:	a084b03a 	or	r2,r20,r2
  e09e6c:	38800115 	stw	r2,4(r7)
  e09e70:	20c00117 	ldw	r3,4(r4)
  e09e74:	18c00054 	ori	r3,r3,1
  e09e78:	20c00115 	stw	r3,4(r4)
  e09e7c:	b009883a 	mov	r4,r22
  e09e80:	0e0c8000 	call	e0c800 <__malloc_unlock>
  e09e84:	8023883a 	mov	r17,r16
  e09e88:	00000606 	br	e09ea4 <_realloc_r+0xd8>
  e09e8c:	01c00404 	movi	r7,16
  e09e90:	3839883a 	mov	fp,r7
  e09e94:	e47fe72e 	bgeu	fp,r17,e09e34 <_realloc_r+0x68>
  e09e98:	00800304 	movi	r2,12
  e09e9c:	0023883a 	mov	r17,zero
  e09ea0:	b0800015 	stw	r2,0(r22)
  e09ea4:	8805883a 	mov	r2,r17
  e09ea8:	dfc00b17 	ldw	ra,44(sp)
  e09eac:	df000a17 	ldw	fp,40(sp)
  e09eb0:	ddc00917 	ldw	r23,36(sp)
  e09eb4:	dd800817 	ldw	r22,32(sp)
  e09eb8:	dd400717 	ldw	r21,28(sp)
  e09ebc:	dd000617 	ldw	r20,24(sp)
  e09ec0:	dcc00517 	ldw	r19,20(sp)
  e09ec4:	dc800417 	ldw	r18,16(sp)
  e09ec8:	dc400317 	ldw	r17,12(sp)
  e09ecc:	dc000217 	ldw	r16,8(sp)
  e09ed0:	dec00c04 	addi	sp,sp,48
  e09ed4:	f800283a 	ret
  e09ed8:	00803874 	movhi	r2,225
  e09edc:	10856904 	addi	r2,r2,5540
  e09ee0:	12400217 	ldw	r9,8(r2)
  e09ee4:	84cd883a 	add	r6,r16,r19
  e09ee8:	802b883a 	mov	r21,r16
  e09eec:	3240b926 	beq	r6,r9,e0a1d4 <_realloc_r+0x408>
  e09ef0:	31400117 	ldw	r5,4(r6)
  e09ef4:	00bfff84 	movi	r2,-2
  e09ef8:	2884703a 	and	r2,r5,r2
  e09efc:	1185883a 	add	r2,r2,r6
  e09f00:	10c00117 	ldw	r3,4(r2)
  e09f04:	18c0004c 	andi	r3,r3,1
  e09f08:	1807003a 	cmpeq	r3,r3,zero
  e09f0c:	1800a326 	beq	r3,zero,e0a19c <_realloc_r+0x3d0>
  e09f10:	2908703a 	and	r4,r5,r4
  e09f14:	9929883a 	add	r20,r19,r4
  e09f18:	a1c0a30e 	bge	r20,r7,e0a1a8 <_realloc_r+0x3dc>
  e09f1c:	4080004c 	andi	r2,r8,1
  e09f20:	1000551e 	bne	r2,zero,e0a078 <_realloc_r+0x2ac>
  e09f24:	80800017 	ldw	r2,0(r16)
  e09f28:	80afc83a 	sub	r23,r16,r2
  e09f2c:	b8c00117 	ldw	r3,4(r23)
  e09f30:	00bfff04 	movi	r2,-4
  e09f34:	1884703a 	and	r2,r3,r2
  e09f38:	30002e26 	beq	r6,zero,e09ff4 <_realloc_r+0x228>
  e09f3c:	3240b926 	beq	r6,r9,e0a224 <_realloc_r+0x458>
  e09f40:	98a9883a 	add	r20,r19,r2
  e09f44:	2509883a 	add	r4,r4,r20
  e09f48:	d9000015 	stw	r4,0(sp)
  e09f4c:	21c02a16 	blt	r4,r7,e09ff8 <_realloc_r+0x22c>
  e09f50:	30800317 	ldw	r2,12(r6)
  e09f54:	30c00217 	ldw	r3,8(r6)
  e09f58:	01400904 	movi	r5,36
  e09f5c:	99bfff04 	addi	r6,r19,-4
  e09f60:	18800315 	stw	r2,12(r3)
  e09f64:	10c00215 	stw	r3,8(r2)
  e09f68:	b9000317 	ldw	r4,12(r23)
  e09f6c:	b8800217 	ldw	r2,8(r23)
  e09f70:	b82b883a 	mov	r21,r23
  e09f74:	bc000204 	addi	r16,r23,8
  e09f78:	20800215 	stw	r2,8(r4)
  e09f7c:	11000315 	stw	r4,12(r2)
  e09f80:	2980e436 	bltu	r5,r6,e0a314 <_realloc_r+0x548>
  e09f84:	008004c4 	movi	r2,19
  e09f88:	9009883a 	mov	r4,r18
  e09f8c:	8011883a 	mov	r8,r16
  e09f90:	11800f2e 	bgeu	r2,r6,e09fd0 <_realloc_r+0x204>
  e09f94:	90800017 	ldw	r2,0(r18)
  e09f98:	ba000404 	addi	r8,r23,16
  e09f9c:	91000204 	addi	r4,r18,8
  e09fa0:	b8800215 	stw	r2,8(r23)
  e09fa4:	90c00117 	ldw	r3,4(r18)
  e09fa8:	008006c4 	movi	r2,27
  e09fac:	b8c00315 	stw	r3,12(r23)
  e09fb0:	1180072e 	bgeu	r2,r6,e09fd0 <_realloc_r+0x204>
  e09fb4:	90c00217 	ldw	r3,8(r18)
  e09fb8:	ba000604 	addi	r8,r23,24
  e09fbc:	91000404 	addi	r4,r18,16
  e09fc0:	b8c00415 	stw	r3,16(r23)
  e09fc4:	90800317 	ldw	r2,12(r18)
  e09fc8:	b8800515 	stw	r2,20(r23)
  e09fcc:	3140e726 	beq	r6,r5,e0a36c <_realloc_r+0x5a0>
  e09fd0:	20800017 	ldw	r2,0(r4)
  e09fd4:	dd000017 	ldw	r20,0(sp)
  e09fd8:	b80f883a 	mov	r7,r23
  e09fdc:	40800015 	stw	r2,0(r8)
  e09fe0:	20c00117 	ldw	r3,4(r4)
  e09fe4:	40c00115 	stw	r3,4(r8)
  e09fe8:	20800217 	ldw	r2,8(r4)
  e09fec:	40800215 	stw	r2,8(r8)
  e09ff0:	003f9706 	br	e09e50 <_realloc_r+0x84>
  e09ff4:	98a9883a 	add	r20,r19,r2
  e09ff8:	a1c01f16 	blt	r20,r7,e0a078 <_realloc_r+0x2ac>
  e09ffc:	b8c00317 	ldw	r3,12(r23)
  e0a000:	b8800217 	ldw	r2,8(r23)
  e0a004:	99bfff04 	addi	r6,r19,-4
  e0a008:	01400904 	movi	r5,36
  e0a00c:	b82b883a 	mov	r21,r23
  e0a010:	18800215 	stw	r2,8(r3)
  e0a014:	10c00315 	stw	r3,12(r2)
  e0a018:	bc000204 	addi	r16,r23,8
  e0a01c:	2980c336 	bltu	r5,r6,e0a32c <_realloc_r+0x560>
  e0a020:	008004c4 	movi	r2,19
  e0a024:	9009883a 	mov	r4,r18
  e0a028:	8011883a 	mov	r8,r16
  e0a02c:	11800f2e 	bgeu	r2,r6,e0a06c <_realloc_r+0x2a0>
  e0a030:	90800017 	ldw	r2,0(r18)
  e0a034:	ba000404 	addi	r8,r23,16
  e0a038:	91000204 	addi	r4,r18,8
  e0a03c:	b8800215 	stw	r2,8(r23)
  e0a040:	90c00117 	ldw	r3,4(r18)
  e0a044:	008006c4 	movi	r2,27
  e0a048:	b8c00315 	stw	r3,12(r23)
  e0a04c:	1180072e 	bgeu	r2,r6,e0a06c <_realloc_r+0x2a0>
  e0a050:	90c00217 	ldw	r3,8(r18)
  e0a054:	ba000604 	addi	r8,r23,24
  e0a058:	91000404 	addi	r4,r18,16
  e0a05c:	b8c00415 	stw	r3,16(r23)
  e0a060:	90800317 	ldw	r2,12(r18)
  e0a064:	b8800515 	stw	r2,20(r23)
  e0a068:	3140c726 	beq	r6,r5,e0a388 <_realloc_r+0x5bc>
  e0a06c:	20800017 	ldw	r2,0(r4)
  e0a070:	b80f883a 	mov	r7,r23
  e0a074:	003fd906 	br	e09fdc <_realloc_r+0x210>
  e0a078:	880b883a 	mov	r5,r17
  e0a07c:	b009883a 	mov	r4,r22
  e0a080:	0e0839c0 	call	e0839c <_malloc_r>
  e0a084:	1023883a 	mov	r17,r2
  e0a088:	10002526 	beq	r2,zero,e0a120 <_realloc_r+0x354>
  e0a08c:	80800117 	ldw	r2,4(r16)
  e0a090:	00ffff84 	movi	r3,-2
  e0a094:	893ffe04 	addi	r4,r17,-8
  e0a098:	10c4703a 	and	r2,r2,r3
  e0a09c:	8085883a 	add	r2,r16,r2
  e0a0a0:	20809526 	beq	r4,r2,e0a2f8 <_realloc_r+0x52c>
  e0a0a4:	99bfff04 	addi	r6,r19,-4
  e0a0a8:	01c00904 	movi	r7,36
  e0a0ac:	39804536 	bltu	r7,r6,e0a1c4 <_realloc_r+0x3f8>
  e0a0b0:	008004c4 	movi	r2,19
  e0a0b4:	9009883a 	mov	r4,r18
  e0a0b8:	880b883a 	mov	r5,r17
  e0a0bc:	11800f2e 	bgeu	r2,r6,e0a0fc <_realloc_r+0x330>
  e0a0c0:	90800017 	ldw	r2,0(r18)
  e0a0c4:	89400204 	addi	r5,r17,8
  e0a0c8:	91000204 	addi	r4,r18,8
  e0a0cc:	88800015 	stw	r2,0(r17)
  e0a0d0:	90c00117 	ldw	r3,4(r18)
  e0a0d4:	008006c4 	movi	r2,27
  e0a0d8:	88c00115 	stw	r3,4(r17)
  e0a0dc:	1180072e 	bgeu	r2,r6,e0a0fc <_realloc_r+0x330>
  e0a0e0:	90c00217 	ldw	r3,8(r18)
  e0a0e4:	89400404 	addi	r5,r17,16
  e0a0e8:	91000404 	addi	r4,r18,16
  e0a0ec:	88c00215 	stw	r3,8(r17)
  e0a0f0:	90800317 	ldw	r2,12(r18)
  e0a0f4:	88800315 	stw	r2,12(r17)
  e0a0f8:	31c09126 	beq	r6,r7,e0a340 <_realloc_r+0x574>
  e0a0fc:	20800017 	ldw	r2,0(r4)
  e0a100:	28800015 	stw	r2,0(r5)
  e0a104:	20c00117 	ldw	r3,4(r4)
  e0a108:	28c00115 	stw	r3,4(r5)
  e0a10c:	20800217 	ldw	r2,8(r4)
  e0a110:	28800215 	stw	r2,8(r5)
  e0a114:	900b883a 	mov	r5,r18
  e0a118:	b009883a 	mov	r4,r22
  e0a11c:	0e078140 	call	e07814 <_free_r>
  e0a120:	b009883a 	mov	r4,r22
  e0a124:	0e0c8000 	call	e0c800 <__malloc_unlock>
  e0a128:	003f5e06 	br	e09ea4 <_realloc_r+0xd8>
  e0a12c:	300b883a 	mov	r5,r6
  e0a130:	dfc00b17 	ldw	ra,44(sp)
  e0a134:	df000a17 	ldw	fp,40(sp)
  e0a138:	ddc00917 	ldw	r23,36(sp)
  e0a13c:	dd800817 	ldw	r22,32(sp)
  e0a140:	dd400717 	ldw	r21,28(sp)
  e0a144:	dd000617 	ldw	r20,24(sp)
  e0a148:	dcc00517 	ldw	r19,20(sp)
  e0a14c:	dc800417 	ldw	r18,16(sp)
  e0a150:	dc400317 	ldw	r17,12(sp)
  e0a154:	dc000217 	ldw	r16,8(sp)
  e0a158:	dec00c04 	addi	sp,sp,48
  e0a15c:	0e0839c1 	jmpi	e0839c <_malloc_r>
  e0a160:	38800117 	ldw	r2,4(r7)
  e0a164:	e54b883a 	add	r5,fp,r21
  e0a168:	31000054 	ori	r4,r6,1
  e0a16c:	1080004c 	andi	r2,r2,1
  e0a170:	1704b03a 	or	r2,r2,fp
  e0a174:	38800115 	stw	r2,4(r7)
  e0a178:	29000115 	stw	r4,4(r5)
  e0a17c:	2987883a 	add	r3,r5,r6
  e0a180:	18800117 	ldw	r2,4(r3)
  e0a184:	29400204 	addi	r5,r5,8
  e0a188:	b009883a 	mov	r4,r22
  e0a18c:	10800054 	ori	r2,r2,1
  e0a190:	18800115 	stw	r2,4(r3)
  e0a194:	0e078140 	call	e07814 <_free_r>
  e0a198:	003f3806 	br	e09e7c <_realloc_r+0xb0>
  e0a19c:	000d883a 	mov	r6,zero
  e0a1a0:	0009883a 	mov	r4,zero
  e0a1a4:	003f5d06 	br	e09f1c <_realloc_r+0x150>
  e0a1a8:	30c00217 	ldw	r3,8(r6)
  e0a1ac:	30800317 	ldw	r2,12(r6)
  e0a1b0:	800f883a 	mov	r7,r16
  e0a1b4:	84000204 	addi	r16,r16,8
  e0a1b8:	10c00215 	stw	r3,8(r2)
  e0a1bc:	18800315 	stw	r2,12(r3)
  e0a1c0:	003f2306 	br	e09e50 <_realloc_r+0x84>
  e0a1c4:	8809883a 	mov	r4,r17
  e0a1c8:	900b883a 	mov	r5,r18
  e0a1cc:	0e08c600 	call	e08c60 <memmove>
  e0a1d0:	003fd006 	br	e0a114 <_realloc_r+0x348>
  e0a1d4:	30800117 	ldw	r2,4(r6)
  e0a1d8:	e0c00404 	addi	r3,fp,16
  e0a1dc:	1108703a 	and	r4,r2,r4
  e0a1e0:	9905883a 	add	r2,r19,r4
  e0a1e4:	10ff4d16 	blt	r2,r3,e09f1c <_realloc_r+0x150>
  e0a1e8:	1705c83a 	sub	r2,r2,fp
  e0a1ec:	870b883a 	add	r5,r16,fp
  e0a1f0:	10800054 	ori	r2,r2,1
  e0a1f4:	28800115 	stw	r2,4(r5)
  e0a1f8:	80c00117 	ldw	r3,4(r16)
  e0a1fc:	00803874 	movhi	r2,225
  e0a200:	10856904 	addi	r2,r2,5540
  e0a204:	b009883a 	mov	r4,r22
  e0a208:	18c0004c 	andi	r3,r3,1
  e0a20c:	e0c6b03a 	or	r3,fp,r3
  e0a210:	11400215 	stw	r5,8(r2)
  e0a214:	80c00115 	stw	r3,4(r16)
  e0a218:	0e0c8000 	call	e0c800 <__malloc_unlock>
  e0a21c:	84400204 	addi	r17,r16,8
  e0a220:	003f2006 	br	e09ea4 <_realloc_r+0xd8>
  e0a224:	98a9883a 	add	r20,r19,r2
  e0a228:	2509883a 	add	r4,r4,r20
  e0a22c:	e0800404 	addi	r2,fp,16
  e0a230:	d9000115 	stw	r4,4(sp)
  e0a234:	20bf7016 	blt	r4,r2,e09ff8 <_realloc_r+0x22c>
  e0a238:	b8c00317 	ldw	r3,12(r23)
  e0a23c:	b8800217 	ldw	r2,8(r23)
  e0a240:	99bfff04 	addi	r6,r19,-4
  e0a244:	01400904 	movi	r5,36
  e0a248:	18800215 	stw	r2,8(r3)
  e0a24c:	10c00315 	stw	r3,12(r2)
  e0a250:	bc400204 	addi	r17,r23,8
  e0a254:	29804136 	bltu	r5,r6,e0a35c <_realloc_r+0x590>
  e0a258:	008004c4 	movi	r2,19
  e0a25c:	9009883a 	mov	r4,r18
  e0a260:	880f883a 	mov	r7,r17
  e0a264:	11800f2e 	bgeu	r2,r6,e0a2a4 <_realloc_r+0x4d8>
  e0a268:	90800017 	ldw	r2,0(r18)
  e0a26c:	b9c00404 	addi	r7,r23,16
  e0a270:	91000204 	addi	r4,r18,8
  e0a274:	b8800215 	stw	r2,8(r23)
  e0a278:	90c00117 	ldw	r3,4(r18)
  e0a27c:	008006c4 	movi	r2,27
  e0a280:	b8c00315 	stw	r3,12(r23)
  e0a284:	1180072e 	bgeu	r2,r6,e0a2a4 <_realloc_r+0x4d8>
  e0a288:	90c00217 	ldw	r3,8(r18)
  e0a28c:	b9c00604 	addi	r7,r23,24
  e0a290:	91000404 	addi	r4,r18,16
  e0a294:	b8c00415 	stw	r3,16(r23)
  e0a298:	90800317 	ldw	r2,12(r18)
  e0a29c:	b8800515 	stw	r2,20(r23)
  e0a2a0:	31404026 	beq	r6,r5,e0a3a4 <_realloc_r+0x5d8>
  e0a2a4:	20800017 	ldw	r2,0(r4)
  e0a2a8:	38800015 	stw	r2,0(r7)
  e0a2ac:	20c00117 	ldw	r3,4(r4)
  e0a2b0:	38c00115 	stw	r3,4(r7)
  e0a2b4:	20800217 	ldw	r2,8(r4)
  e0a2b8:	38800215 	stw	r2,8(r7)
  e0a2bc:	d8c00117 	ldw	r3,4(sp)
  e0a2c0:	bf0b883a 	add	r5,r23,fp
  e0a2c4:	b009883a 	mov	r4,r22
  e0a2c8:	1f05c83a 	sub	r2,r3,fp
  e0a2cc:	10800054 	ori	r2,r2,1
  e0a2d0:	28800115 	stw	r2,4(r5)
  e0a2d4:	b8c00117 	ldw	r3,4(r23)
  e0a2d8:	00803874 	movhi	r2,225
  e0a2dc:	10856904 	addi	r2,r2,5540
  e0a2e0:	11400215 	stw	r5,8(r2)
  e0a2e4:	18c0004c 	andi	r3,r3,1
  e0a2e8:	e0c6b03a 	or	r3,fp,r3
  e0a2ec:	b8c00115 	stw	r3,4(r23)
  e0a2f0:	0e0c8000 	call	e0c800 <__malloc_unlock>
  e0a2f4:	003eeb06 	br	e09ea4 <_realloc_r+0xd8>
  e0a2f8:	20800117 	ldw	r2,4(r4)
  e0a2fc:	00ffff04 	movi	r3,-4
  e0a300:	800f883a 	mov	r7,r16
  e0a304:	10c4703a 	and	r2,r2,r3
  e0a308:	98a9883a 	add	r20,r19,r2
  e0a30c:	84000204 	addi	r16,r16,8
  e0a310:	003ecf06 	br	e09e50 <_realloc_r+0x84>
  e0a314:	900b883a 	mov	r5,r18
  e0a318:	8009883a 	mov	r4,r16
  e0a31c:	0e08c600 	call	e08c60 <memmove>
  e0a320:	dd000017 	ldw	r20,0(sp)
  e0a324:	b80f883a 	mov	r7,r23
  e0a328:	003ec906 	br	e09e50 <_realloc_r+0x84>
  e0a32c:	900b883a 	mov	r5,r18
  e0a330:	8009883a 	mov	r4,r16
  e0a334:	0e08c600 	call	e08c60 <memmove>
  e0a338:	b80f883a 	mov	r7,r23
  e0a33c:	003ec406 	br	e09e50 <_realloc_r+0x84>
  e0a340:	90c00417 	ldw	r3,16(r18)
  e0a344:	89400604 	addi	r5,r17,24
  e0a348:	91000604 	addi	r4,r18,24
  e0a34c:	88c00415 	stw	r3,16(r17)
  e0a350:	90800517 	ldw	r2,20(r18)
  e0a354:	88800515 	stw	r2,20(r17)
  e0a358:	003f6806 	br	e0a0fc <_realloc_r+0x330>
  e0a35c:	900b883a 	mov	r5,r18
  e0a360:	8809883a 	mov	r4,r17
  e0a364:	0e08c600 	call	e08c60 <memmove>
  e0a368:	003fd406 	br	e0a2bc <_realloc_r+0x4f0>
  e0a36c:	90c00417 	ldw	r3,16(r18)
  e0a370:	91000604 	addi	r4,r18,24
  e0a374:	ba000804 	addi	r8,r23,32
  e0a378:	b8c00615 	stw	r3,24(r23)
  e0a37c:	90800517 	ldw	r2,20(r18)
  e0a380:	b8800715 	stw	r2,28(r23)
  e0a384:	003f1206 	br	e09fd0 <_realloc_r+0x204>
  e0a388:	90c00417 	ldw	r3,16(r18)
  e0a38c:	91000604 	addi	r4,r18,24
  e0a390:	ba000804 	addi	r8,r23,32
  e0a394:	b8c00615 	stw	r3,24(r23)
  e0a398:	90800517 	ldw	r2,20(r18)
  e0a39c:	b8800715 	stw	r2,28(r23)
  e0a3a0:	003f3206 	br	e0a06c <_realloc_r+0x2a0>
  e0a3a4:	90c00417 	ldw	r3,16(r18)
  e0a3a8:	91000604 	addi	r4,r18,24
  e0a3ac:	b9c00804 	addi	r7,r23,32
  e0a3b0:	b8c00615 	stw	r3,24(r23)
  e0a3b4:	90800517 	ldw	r2,20(r18)
  e0a3b8:	b8800715 	stw	r2,28(r23)
  e0a3bc:	003fb906 	br	e0a2a4 <_realloc_r+0x4d8>

00e0a3c0 <__isinfd>:
  e0a3c0:	200d883a 	mov	r6,r4
  e0a3c4:	0109c83a 	sub	r4,zero,r4
  e0a3c8:	2188b03a 	or	r4,r4,r6
  e0a3cc:	2008d7fa 	srli	r4,r4,31
  e0a3d0:	00a00034 	movhi	r2,32768
  e0a3d4:	10bfffc4 	addi	r2,r2,-1
  e0a3d8:	1144703a 	and	r2,r2,r5
  e0a3dc:	2088b03a 	or	r4,r4,r2
  e0a3e0:	009ffc34 	movhi	r2,32752
  e0a3e4:	1105c83a 	sub	r2,r2,r4
  e0a3e8:	0087c83a 	sub	r3,zero,r2
  e0a3ec:	10c4b03a 	or	r2,r2,r3
  e0a3f0:	1004d7fa 	srli	r2,r2,31
  e0a3f4:	00c00044 	movi	r3,1
  e0a3f8:	1885c83a 	sub	r2,r3,r2
  e0a3fc:	f800283a 	ret

00e0a400 <__isnand>:
  e0a400:	200d883a 	mov	r6,r4
  e0a404:	0109c83a 	sub	r4,zero,r4
  e0a408:	2188b03a 	or	r4,r4,r6
  e0a40c:	2008d7fa 	srli	r4,r4,31
  e0a410:	00a00034 	movhi	r2,32768
  e0a414:	10bfffc4 	addi	r2,r2,-1
  e0a418:	1144703a 	and	r2,r2,r5
  e0a41c:	2088b03a 	or	r4,r4,r2
  e0a420:	009ffc34 	movhi	r2,32752
  e0a424:	1105c83a 	sub	r2,r2,r4
  e0a428:	1004d7fa 	srli	r2,r2,31
  e0a42c:	f800283a 	ret

00e0a430 <_sbrk_r>:
  e0a430:	defffd04 	addi	sp,sp,-12
  e0a434:	dc000015 	stw	r16,0(sp)
  e0a438:	04003874 	movhi	r16,225
  e0a43c:	84125704 	addi	r16,r16,18780
  e0a440:	dc400115 	stw	r17,4(sp)
  e0a444:	80000015 	stw	zero,0(r16)
  e0a448:	2023883a 	mov	r17,r4
  e0a44c:	2809883a 	mov	r4,r5
  e0a450:	dfc00215 	stw	ra,8(sp)
  e0a454:	0e0ca000 	call	e0ca00 <sbrk>
  e0a458:	1007883a 	mov	r3,r2
  e0a45c:	00bfffc4 	movi	r2,-1
  e0a460:	18800626 	beq	r3,r2,e0a47c <_sbrk_r+0x4c>
  e0a464:	1805883a 	mov	r2,r3
  e0a468:	dfc00217 	ldw	ra,8(sp)
  e0a46c:	dc400117 	ldw	r17,4(sp)
  e0a470:	dc000017 	ldw	r16,0(sp)
  e0a474:	dec00304 	addi	sp,sp,12
  e0a478:	f800283a 	ret
  e0a47c:	80800017 	ldw	r2,0(r16)
  e0a480:	103ff826 	beq	r2,zero,e0a464 <_sbrk_r+0x34>
  e0a484:	88800015 	stw	r2,0(r17)
  e0a488:	1805883a 	mov	r2,r3
  e0a48c:	dfc00217 	ldw	ra,8(sp)
  e0a490:	dc400117 	ldw	r17,4(sp)
  e0a494:	dc000017 	ldw	r16,0(sp)
  e0a498:	dec00304 	addi	sp,sp,12
  e0a49c:	f800283a 	ret

00e0a4a0 <__sclose>:
  e0a4a0:	2940038f 	ldh	r5,14(r5)
  e0a4a4:	0e0a7d41 	jmpi	e0a7d4 <_close_r>

00e0a4a8 <__sseek>:
  e0a4a8:	defffe04 	addi	sp,sp,-8
  e0a4ac:	dc000015 	stw	r16,0(sp)
  e0a4b0:	2821883a 	mov	r16,r5
  e0a4b4:	2940038f 	ldh	r5,14(r5)
  e0a4b8:	dfc00115 	stw	ra,4(sp)
  e0a4bc:	0e0aa4c0 	call	e0aa4c <_lseek_r>
  e0a4c0:	1007883a 	mov	r3,r2
  e0a4c4:	00bfffc4 	movi	r2,-1
  e0a4c8:	18800926 	beq	r3,r2,e0a4f0 <__sseek+0x48>
  e0a4cc:	8080030b 	ldhu	r2,12(r16)
  e0a4d0:	80c01415 	stw	r3,80(r16)
  e0a4d4:	10840014 	ori	r2,r2,4096
  e0a4d8:	8080030d 	sth	r2,12(r16)
  e0a4dc:	1805883a 	mov	r2,r3
  e0a4e0:	dfc00117 	ldw	ra,4(sp)
  e0a4e4:	dc000017 	ldw	r16,0(sp)
  e0a4e8:	dec00204 	addi	sp,sp,8
  e0a4ec:	f800283a 	ret
  e0a4f0:	8080030b 	ldhu	r2,12(r16)
  e0a4f4:	10bbffcc 	andi	r2,r2,61439
  e0a4f8:	8080030d 	sth	r2,12(r16)
  e0a4fc:	1805883a 	mov	r2,r3
  e0a500:	dfc00117 	ldw	ra,4(sp)
  e0a504:	dc000017 	ldw	r16,0(sp)
  e0a508:	dec00204 	addi	sp,sp,8
  e0a50c:	f800283a 	ret

00e0a510 <__swrite>:
  e0a510:	2880030b 	ldhu	r2,12(r5)
  e0a514:	defffb04 	addi	sp,sp,-20
  e0a518:	dcc00315 	stw	r19,12(sp)
  e0a51c:	1080400c 	andi	r2,r2,256
  e0a520:	dc800215 	stw	r18,8(sp)
  e0a524:	dc400115 	stw	r17,4(sp)
  e0a528:	dc000015 	stw	r16,0(sp)
  e0a52c:	3027883a 	mov	r19,r6
  e0a530:	3825883a 	mov	r18,r7
  e0a534:	dfc00415 	stw	ra,16(sp)
  e0a538:	2821883a 	mov	r16,r5
  e0a53c:	000d883a 	mov	r6,zero
  e0a540:	01c00084 	movi	r7,2
  e0a544:	2023883a 	mov	r17,r4
  e0a548:	10000226 	beq	r2,zero,e0a554 <__swrite+0x44>
  e0a54c:	2940038f 	ldh	r5,14(r5)
  e0a550:	0e0aa4c0 	call	e0aa4c <_lseek_r>
  e0a554:	8080030b 	ldhu	r2,12(r16)
  e0a558:	8140038f 	ldh	r5,14(r16)
  e0a55c:	8809883a 	mov	r4,r17
  e0a560:	10bbffcc 	andi	r2,r2,61439
  e0a564:	980d883a 	mov	r6,r19
  e0a568:	900f883a 	mov	r7,r18
  e0a56c:	8080030d 	sth	r2,12(r16)
  e0a570:	dfc00417 	ldw	ra,16(sp)
  e0a574:	dcc00317 	ldw	r19,12(sp)
  e0a578:	dc800217 	ldw	r18,8(sp)
  e0a57c:	dc400117 	ldw	r17,4(sp)
  e0a580:	dc000017 	ldw	r16,0(sp)
  e0a584:	dec00504 	addi	sp,sp,20
  e0a588:	0e0a6a81 	jmpi	e0a6a8 <_write_r>

00e0a58c <__sread>:
  e0a58c:	defffe04 	addi	sp,sp,-8
  e0a590:	dc000015 	stw	r16,0(sp)
  e0a594:	2821883a 	mov	r16,r5
  e0a598:	2940038f 	ldh	r5,14(r5)
  e0a59c:	dfc00115 	stw	ra,4(sp)
  e0a5a0:	0e0aac40 	call	e0aac4 <_read_r>
  e0a5a4:	1007883a 	mov	r3,r2
  e0a5a8:	10000816 	blt	r2,zero,e0a5cc <__sread+0x40>
  e0a5ac:	80801417 	ldw	r2,80(r16)
  e0a5b0:	10c5883a 	add	r2,r2,r3
  e0a5b4:	80801415 	stw	r2,80(r16)
  e0a5b8:	1805883a 	mov	r2,r3
  e0a5bc:	dfc00117 	ldw	ra,4(sp)
  e0a5c0:	dc000017 	ldw	r16,0(sp)
  e0a5c4:	dec00204 	addi	sp,sp,8
  e0a5c8:	f800283a 	ret
  e0a5cc:	8080030b 	ldhu	r2,12(r16)
  e0a5d0:	10bbffcc 	andi	r2,r2,61439
  e0a5d4:	8080030d 	sth	r2,12(r16)
  e0a5d8:	1805883a 	mov	r2,r3
  e0a5dc:	dfc00117 	ldw	ra,4(sp)
  e0a5e0:	dc000017 	ldw	r16,0(sp)
  e0a5e4:	dec00204 	addi	sp,sp,8
  e0a5e8:	f800283a 	ret

00e0a5ec <strcmp>:
  e0a5ec:	2144b03a 	or	r2,r4,r5
  e0a5f0:	108000cc 	andi	r2,r2,3
  e0a5f4:	10001d1e 	bne	r2,zero,e0a66c <strcmp+0x80>
  e0a5f8:	200f883a 	mov	r7,r4
  e0a5fc:	28800017 	ldw	r2,0(r5)
  e0a600:	21000017 	ldw	r4,0(r4)
  e0a604:	280d883a 	mov	r6,r5
  e0a608:	2080161e 	bne	r4,r2,e0a664 <strcmp+0x78>
  e0a60c:	023fbff4 	movhi	r8,65279
  e0a610:	423fbfc4 	addi	r8,r8,-257
  e0a614:	2207883a 	add	r3,r4,r8
  e0a618:	01602074 	movhi	r5,32897
  e0a61c:	29602004 	addi	r5,r5,-32640
  e0a620:	1946703a 	and	r3,r3,r5
  e0a624:	0104303a 	nor	r2,zero,r4
  e0a628:	10c4703a 	and	r2,r2,r3
  e0a62c:	10001c1e 	bne	r2,zero,e0a6a0 <strcmp+0xb4>
  e0a630:	4013883a 	mov	r9,r8
  e0a634:	2811883a 	mov	r8,r5
  e0a638:	00000106 	br	e0a640 <strcmp+0x54>
  e0a63c:	1800181e 	bne	r3,zero,e0a6a0 <strcmp+0xb4>
  e0a640:	39c00104 	addi	r7,r7,4
  e0a644:	39000017 	ldw	r4,0(r7)
  e0a648:	31800104 	addi	r6,r6,4
  e0a64c:	31400017 	ldw	r5,0(r6)
  e0a650:	2245883a 	add	r2,r4,r9
  e0a654:	1204703a 	and	r2,r2,r8
  e0a658:	0106303a 	nor	r3,zero,r4
  e0a65c:	1886703a 	and	r3,r3,r2
  e0a660:	217ff626 	beq	r4,r5,e0a63c <strcmp+0x50>
  e0a664:	3809883a 	mov	r4,r7
  e0a668:	300b883a 	mov	r5,r6
  e0a66c:	20c00007 	ldb	r3,0(r4)
  e0a670:	1800051e 	bne	r3,zero,e0a688 <strcmp+0x9c>
  e0a674:	00000606 	br	e0a690 <strcmp+0xa4>
  e0a678:	21000044 	addi	r4,r4,1
  e0a67c:	20c00007 	ldb	r3,0(r4)
  e0a680:	29400044 	addi	r5,r5,1
  e0a684:	18000226 	beq	r3,zero,e0a690 <strcmp+0xa4>
  e0a688:	28800007 	ldb	r2,0(r5)
  e0a68c:	18bffa26 	beq	r3,r2,e0a678 <strcmp+0x8c>
  e0a690:	20c00003 	ldbu	r3,0(r4)
  e0a694:	28800003 	ldbu	r2,0(r5)
  e0a698:	1885c83a 	sub	r2,r3,r2
  e0a69c:	f800283a 	ret
  e0a6a0:	0005883a 	mov	r2,zero
  e0a6a4:	f800283a 	ret

00e0a6a8 <_write_r>:
  e0a6a8:	defffd04 	addi	sp,sp,-12
  e0a6ac:	dc000015 	stw	r16,0(sp)
  e0a6b0:	04003874 	movhi	r16,225
  e0a6b4:	84125704 	addi	r16,r16,18780
  e0a6b8:	dc400115 	stw	r17,4(sp)
  e0a6bc:	80000015 	stw	zero,0(r16)
  e0a6c0:	2023883a 	mov	r17,r4
  e0a6c4:	2809883a 	mov	r4,r5
  e0a6c8:	300b883a 	mov	r5,r6
  e0a6cc:	380d883a 	mov	r6,r7
  e0a6d0:	dfc00215 	stw	ra,8(sp)
  e0a6d4:	0e0cabc0 	call	e0cabc <write>
  e0a6d8:	1007883a 	mov	r3,r2
  e0a6dc:	00bfffc4 	movi	r2,-1
  e0a6e0:	18800626 	beq	r3,r2,e0a6fc <_write_r+0x54>
  e0a6e4:	1805883a 	mov	r2,r3
  e0a6e8:	dfc00217 	ldw	ra,8(sp)
  e0a6ec:	dc400117 	ldw	r17,4(sp)
  e0a6f0:	dc000017 	ldw	r16,0(sp)
  e0a6f4:	dec00304 	addi	sp,sp,12
  e0a6f8:	f800283a 	ret
  e0a6fc:	80800017 	ldw	r2,0(r16)
  e0a700:	103ff826 	beq	r2,zero,e0a6e4 <_write_r+0x3c>
  e0a704:	88800015 	stw	r2,0(r17)
  e0a708:	1805883a 	mov	r2,r3
  e0a70c:	dfc00217 	ldw	ra,8(sp)
  e0a710:	dc400117 	ldw	r17,4(sp)
  e0a714:	dc000017 	ldw	r16,0(sp)
  e0a718:	dec00304 	addi	sp,sp,12
  e0a71c:	f800283a 	ret

00e0a720 <_calloc_r>:
  e0a720:	298b383a 	mul	r5,r5,r6
  e0a724:	defffe04 	addi	sp,sp,-8
  e0a728:	dc000015 	stw	r16,0(sp)
  e0a72c:	dfc00115 	stw	ra,4(sp)
  e0a730:	0e0839c0 	call	e0839c <_malloc_r>
  e0a734:	1021883a 	mov	r16,r2
  e0a738:	01c00904 	movi	r7,36
  e0a73c:	10000d26 	beq	r2,zero,e0a774 <_calloc_r+0x54>
  e0a740:	10ffff17 	ldw	r3,-4(r2)
  e0a744:	1009883a 	mov	r4,r2
  e0a748:	00bfff04 	movi	r2,-4
  e0a74c:	1886703a 	and	r3,r3,r2
  e0a750:	1887883a 	add	r3,r3,r2
  e0a754:	180d883a 	mov	r6,r3
  e0a758:	000b883a 	mov	r5,zero
  e0a75c:	38c01736 	bltu	r7,r3,e0a7bc <_calloc_r+0x9c>
  e0a760:	008004c4 	movi	r2,19
  e0a764:	10c00836 	bltu	r2,r3,e0a788 <_calloc_r+0x68>
  e0a768:	20000215 	stw	zero,8(r4)
  e0a76c:	20000015 	stw	zero,0(r4)
  e0a770:	20000115 	stw	zero,4(r4)
  e0a774:	8005883a 	mov	r2,r16
  e0a778:	dfc00117 	ldw	ra,4(sp)
  e0a77c:	dc000017 	ldw	r16,0(sp)
  e0a780:	dec00204 	addi	sp,sp,8
  e0a784:	f800283a 	ret
  e0a788:	008006c4 	movi	r2,27
  e0a78c:	80000015 	stw	zero,0(r16)
  e0a790:	80000115 	stw	zero,4(r16)
  e0a794:	81000204 	addi	r4,r16,8
  e0a798:	10fff32e 	bgeu	r2,r3,e0a768 <_calloc_r+0x48>
  e0a79c:	80000215 	stw	zero,8(r16)
  e0a7a0:	80000315 	stw	zero,12(r16)
  e0a7a4:	81000404 	addi	r4,r16,16
  e0a7a8:	19ffef1e 	bne	r3,r7,e0a768 <_calloc_r+0x48>
  e0a7ac:	81000604 	addi	r4,r16,24
  e0a7b0:	80000415 	stw	zero,16(r16)
  e0a7b4:	80000515 	stw	zero,20(r16)
  e0a7b8:	003feb06 	br	e0a768 <_calloc_r+0x48>
  e0a7bc:	0e08d400 	call	e08d40 <memset>
  e0a7c0:	8005883a 	mov	r2,r16
  e0a7c4:	dfc00117 	ldw	ra,4(sp)
  e0a7c8:	dc000017 	ldw	r16,0(sp)
  e0a7cc:	dec00204 	addi	sp,sp,8
  e0a7d0:	f800283a 	ret

00e0a7d4 <_close_r>:
  e0a7d4:	defffd04 	addi	sp,sp,-12
  e0a7d8:	dc000015 	stw	r16,0(sp)
  e0a7dc:	04003874 	movhi	r16,225
  e0a7e0:	84125704 	addi	r16,r16,18780
  e0a7e4:	dc400115 	stw	r17,4(sp)
  e0a7e8:	80000015 	stw	zero,0(r16)
  e0a7ec:	2023883a 	mov	r17,r4
  e0a7f0:	2809883a 	mov	r4,r5
  e0a7f4:	dfc00215 	stw	ra,8(sp)
  e0a7f8:	0e0c15c0 	call	e0c15c <close>
  e0a7fc:	1007883a 	mov	r3,r2
  e0a800:	00bfffc4 	movi	r2,-1
  e0a804:	18800626 	beq	r3,r2,e0a820 <_close_r+0x4c>
  e0a808:	1805883a 	mov	r2,r3
  e0a80c:	dfc00217 	ldw	ra,8(sp)
  e0a810:	dc400117 	ldw	r17,4(sp)
  e0a814:	dc000017 	ldw	r16,0(sp)
  e0a818:	dec00304 	addi	sp,sp,12
  e0a81c:	f800283a 	ret
  e0a820:	80800017 	ldw	r2,0(r16)
  e0a824:	103ff826 	beq	r2,zero,e0a808 <_close_r+0x34>
  e0a828:	88800015 	stw	r2,0(r17)
  e0a82c:	1805883a 	mov	r2,r3
  e0a830:	dfc00217 	ldw	ra,8(sp)
  e0a834:	dc400117 	ldw	r17,4(sp)
  e0a838:	dc000017 	ldw	r16,0(sp)
  e0a83c:	dec00304 	addi	sp,sp,12
  e0a840:	f800283a 	ret

00e0a844 <_fclose_r>:
  e0a844:	defffc04 	addi	sp,sp,-16
  e0a848:	dc400115 	stw	r17,4(sp)
  e0a84c:	dc000015 	stw	r16,0(sp)
  e0a850:	dfc00315 	stw	ra,12(sp)
  e0a854:	dc800215 	stw	r18,8(sp)
  e0a858:	2821883a 	mov	r16,r5
  e0a85c:	2023883a 	mov	r17,r4
  e0a860:	28002926 	beq	r5,zero,e0a908 <_fclose_r+0xc4>
  e0a864:	0e074800 	call	e07480 <__sfp_lock_acquire>
  e0a868:	88000226 	beq	r17,zero,e0a874 <_fclose_r+0x30>
  e0a86c:	88800e17 	ldw	r2,56(r17)
  e0a870:	10002d26 	beq	r2,zero,e0a928 <_fclose_r+0xe4>
  e0a874:	8080030f 	ldh	r2,12(r16)
  e0a878:	10002226 	beq	r2,zero,e0a904 <_fclose_r+0xc0>
  e0a87c:	8809883a 	mov	r4,r17
  e0a880:	800b883a 	mov	r5,r16
  e0a884:	0e071f80 	call	e071f8 <_fflush_r>
  e0a888:	1025883a 	mov	r18,r2
  e0a88c:	80800b17 	ldw	r2,44(r16)
  e0a890:	10000426 	beq	r2,zero,e0a8a4 <_fclose_r+0x60>
  e0a894:	81400717 	ldw	r5,28(r16)
  e0a898:	8809883a 	mov	r4,r17
  e0a89c:	103ee83a 	callr	r2
  e0a8a0:	10002a16 	blt	r2,zero,e0a94c <_fclose_r+0x108>
  e0a8a4:	8080030b 	ldhu	r2,12(r16)
  e0a8a8:	1080200c 	andi	r2,r2,128
  e0a8ac:	1000231e 	bne	r2,zero,e0a93c <_fclose_r+0xf8>
  e0a8b0:	81400c17 	ldw	r5,48(r16)
  e0a8b4:	28000526 	beq	r5,zero,e0a8cc <_fclose_r+0x88>
  e0a8b8:	80801004 	addi	r2,r16,64
  e0a8bc:	28800226 	beq	r5,r2,e0a8c8 <_fclose_r+0x84>
  e0a8c0:	8809883a 	mov	r4,r17
  e0a8c4:	0e078140 	call	e07814 <_free_r>
  e0a8c8:	80000c15 	stw	zero,48(r16)
  e0a8cc:	81401117 	ldw	r5,68(r16)
  e0a8d0:	28000326 	beq	r5,zero,e0a8e0 <_fclose_r+0x9c>
  e0a8d4:	8809883a 	mov	r4,r17
  e0a8d8:	0e078140 	call	e07814 <_free_r>
  e0a8dc:	80001115 	stw	zero,68(r16)
  e0a8e0:	8000030d 	sth	zero,12(r16)
  e0a8e4:	0e074840 	call	e07484 <__sfp_lock_release>
  e0a8e8:	9005883a 	mov	r2,r18
  e0a8ec:	dfc00317 	ldw	ra,12(sp)
  e0a8f0:	dc800217 	ldw	r18,8(sp)
  e0a8f4:	dc400117 	ldw	r17,4(sp)
  e0a8f8:	dc000017 	ldw	r16,0(sp)
  e0a8fc:	dec00404 	addi	sp,sp,16
  e0a900:	f800283a 	ret
  e0a904:	0e074840 	call	e07484 <__sfp_lock_release>
  e0a908:	0025883a 	mov	r18,zero
  e0a90c:	9005883a 	mov	r2,r18
  e0a910:	dfc00317 	ldw	ra,12(sp)
  e0a914:	dc800217 	ldw	r18,8(sp)
  e0a918:	dc400117 	ldw	r17,4(sp)
  e0a91c:	dc000017 	ldw	r16,0(sp)
  e0a920:	dec00404 	addi	sp,sp,16
  e0a924:	f800283a 	ret
  e0a928:	8809883a 	mov	r4,r17
  e0a92c:	0e074900 	call	e07490 <__sinit>
  e0a930:	8080030f 	ldh	r2,12(r16)
  e0a934:	103fd11e 	bne	r2,zero,e0a87c <_fclose_r+0x38>
  e0a938:	003ff206 	br	e0a904 <_fclose_r+0xc0>
  e0a93c:	81400417 	ldw	r5,16(r16)
  e0a940:	8809883a 	mov	r4,r17
  e0a944:	0e078140 	call	e07814 <_free_r>
  e0a948:	003fd906 	br	e0a8b0 <_fclose_r+0x6c>
  e0a94c:	04bfffc4 	movi	r18,-1
  e0a950:	003fd406 	br	e0a8a4 <_fclose_r+0x60>

00e0a954 <fclose>:
  e0a954:	00803874 	movhi	r2,225
  e0a958:	108b4704 	addi	r2,r2,11548
  e0a95c:	200b883a 	mov	r5,r4
  e0a960:	11000017 	ldw	r4,0(r2)
  e0a964:	0e0a8441 	jmpi	e0a844 <_fclose_r>

00e0a968 <_fstat_r>:
  e0a968:	defffd04 	addi	sp,sp,-12
  e0a96c:	dc000015 	stw	r16,0(sp)
  e0a970:	04003874 	movhi	r16,225
  e0a974:	84125704 	addi	r16,r16,18780
  e0a978:	dc400115 	stw	r17,4(sp)
  e0a97c:	80000015 	stw	zero,0(r16)
  e0a980:	2023883a 	mov	r17,r4
  e0a984:	2809883a 	mov	r4,r5
  e0a988:	300b883a 	mov	r5,r6
  e0a98c:	dfc00215 	stw	ra,8(sp)
  e0a990:	0e0c2e40 	call	e0c2e4 <fstat>
  e0a994:	1007883a 	mov	r3,r2
  e0a998:	00bfffc4 	movi	r2,-1
  e0a99c:	18800626 	beq	r3,r2,e0a9b8 <_fstat_r+0x50>
  e0a9a0:	1805883a 	mov	r2,r3
  e0a9a4:	dfc00217 	ldw	ra,8(sp)
  e0a9a8:	dc400117 	ldw	r17,4(sp)
  e0a9ac:	dc000017 	ldw	r16,0(sp)
  e0a9b0:	dec00304 	addi	sp,sp,12
  e0a9b4:	f800283a 	ret
  e0a9b8:	80800017 	ldw	r2,0(r16)
  e0a9bc:	103ff826 	beq	r2,zero,e0a9a0 <_fstat_r+0x38>
  e0a9c0:	88800015 	stw	r2,0(r17)
  e0a9c4:	1805883a 	mov	r2,r3
  e0a9c8:	dfc00217 	ldw	ra,8(sp)
  e0a9cc:	dc400117 	ldw	r17,4(sp)
  e0a9d0:	dc000017 	ldw	r16,0(sp)
  e0a9d4:	dec00304 	addi	sp,sp,12
  e0a9d8:	f800283a 	ret

00e0a9dc <_isatty_r>:
  e0a9dc:	defffd04 	addi	sp,sp,-12
  e0a9e0:	dc000015 	stw	r16,0(sp)
  e0a9e4:	04003874 	movhi	r16,225
  e0a9e8:	84125704 	addi	r16,r16,18780
  e0a9ec:	dc400115 	stw	r17,4(sp)
  e0a9f0:	80000015 	stw	zero,0(r16)
  e0a9f4:	2023883a 	mov	r17,r4
  e0a9f8:	2809883a 	mov	r4,r5
  e0a9fc:	dfc00215 	stw	ra,8(sp)
  e0aa00:	0e0c4180 	call	e0c418 <isatty>
  e0aa04:	1007883a 	mov	r3,r2
  e0aa08:	00bfffc4 	movi	r2,-1
  e0aa0c:	18800626 	beq	r3,r2,e0aa28 <_isatty_r+0x4c>
  e0aa10:	1805883a 	mov	r2,r3
  e0aa14:	dfc00217 	ldw	ra,8(sp)
  e0aa18:	dc400117 	ldw	r17,4(sp)
  e0aa1c:	dc000017 	ldw	r16,0(sp)
  e0aa20:	dec00304 	addi	sp,sp,12
  e0aa24:	f800283a 	ret
  e0aa28:	80800017 	ldw	r2,0(r16)
  e0aa2c:	103ff826 	beq	r2,zero,e0aa10 <_isatty_r+0x34>
  e0aa30:	88800015 	stw	r2,0(r17)
  e0aa34:	1805883a 	mov	r2,r3
  e0aa38:	dfc00217 	ldw	ra,8(sp)
  e0aa3c:	dc400117 	ldw	r17,4(sp)
  e0aa40:	dc000017 	ldw	r16,0(sp)
  e0aa44:	dec00304 	addi	sp,sp,12
  e0aa48:	f800283a 	ret

00e0aa4c <_lseek_r>:
  e0aa4c:	defffd04 	addi	sp,sp,-12
  e0aa50:	dc000015 	stw	r16,0(sp)
  e0aa54:	04003874 	movhi	r16,225
  e0aa58:	84125704 	addi	r16,r16,18780
  e0aa5c:	dc400115 	stw	r17,4(sp)
  e0aa60:	80000015 	stw	zero,0(r16)
  e0aa64:	2023883a 	mov	r17,r4
  e0aa68:	2809883a 	mov	r4,r5
  e0aa6c:	300b883a 	mov	r5,r6
  e0aa70:	380d883a 	mov	r6,r7
  e0aa74:	dfc00215 	stw	ra,8(sp)
  e0aa78:	0e0c6240 	call	e0c624 <lseek>
  e0aa7c:	1007883a 	mov	r3,r2
  e0aa80:	00bfffc4 	movi	r2,-1
  e0aa84:	18800626 	beq	r3,r2,e0aaa0 <_lseek_r+0x54>
  e0aa88:	1805883a 	mov	r2,r3
  e0aa8c:	dfc00217 	ldw	ra,8(sp)
  e0aa90:	dc400117 	ldw	r17,4(sp)
  e0aa94:	dc000017 	ldw	r16,0(sp)
  e0aa98:	dec00304 	addi	sp,sp,12
  e0aa9c:	f800283a 	ret
  e0aaa0:	80800017 	ldw	r2,0(r16)
  e0aaa4:	103ff826 	beq	r2,zero,e0aa88 <_lseek_r+0x3c>
  e0aaa8:	88800015 	stw	r2,0(r17)
  e0aaac:	1805883a 	mov	r2,r3
  e0aab0:	dfc00217 	ldw	ra,8(sp)
  e0aab4:	dc400117 	ldw	r17,4(sp)
  e0aab8:	dc000017 	ldw	r16,0(sp)
  e0aabc:	dec00304 	addi	sp,sp,12
  e0aac0:	f800283a 	ret

00e0aac4 <_read_r>:
  e0aac4:	defffd04 	addi	sp,sp,-12
  e0aac8:	dc000015 	stw	r16,0(sp)
  e0aacc:	04003874 	movhi	r16,225
  e0aad0:	84125704 	addi	r16,r16,18780
  e0aad4:	dc400115 	stw	r17,4(sp)
  e0aad8:	80000015 	stw	zero,0(r16)
  e0aadc:	2023883a 	mov	r17,r4
  e0aae0:	2809883a 	mov	r4,r5
  e0aae4:	300b883a 	mov	r5,r6
  e0aae8:	380d883a 	mov	r6,r7
  e0aaec:	dfc00215 	stw	ra,8(sp)
  e0aaf0:	0e0c8200 	call	e0c820 <read>
  e0aaf4:	1007883a 	mov	r3,r2
  e0aaf8:	00bfffc4 	movi	r2,-1
  e0aafc:	18800626 	beq	r3,r2,e0ab18 <_read_r+0x54>
  e0ab00:	1805883a 	mov	r2,r3
  e0ab04:	dfc00217 	ldw	ra,8(sp)
  e0ab08:	dc400117 	ldw	r17,4(sp)
  e0ab0c:	dc000017 	ldw	r16,0(sp)
  e0ab10:	dec00304 	addi	sp,sp,12
  e0ab14:	f800283a 	ret
  e0ab18:	80800017 	ldw	r2,0(r16)
  e0ab1c:	103ff826 	beq	r2,zero,e0ab00 <_read_r+0x3c>
  e0ab20:	88800015 	stw	r2,0(r17)
  e0ab24:	1805883a 	mov	r2,r3
  e0ab28:	dfc00217 	ldw	ra,8(sp)
  e0ab2c:	dc400117 	ldw	r17,4(sp)
  e0ab30:	dc000017 	ldw	r16,0(sp)
  e0ab34:	dec00304 	addi	sp,sp,12
  e0ab38:	f800283a 	ret

00e0ab3c <__udivdi3>:
  e0ab3c:	defff004 	addi	sp,sp,-64
  e0ab40:	2005883a 	mov	r2,r4
  e0ab44:	3011883a 	mov	r8,r6
  e0ab48:	df000e15 	stw	fp,56(sp)
  e0ab4c:	dd000a15 	stw	r20,40(sp)
  e0ab50:	dc000615 	stw	r16,24(sp)
  e0ab54:	dfc00f15 	stw	ra,60(sp)
  e0ab58:	ddc00d15 	stw	r23,52(sp)
  e0ab5c:	dd800c15 	stw	r22,48(sp)
  e0ab60:	dd400b15 	stw	r21,44(sp)
  e0ab64:	dcc00915 	stw	r19,36(sp)
  e0ab68:	dc800815 	stw	r18,32(sp)
  e0ab6c:	dc400715 	stw	r17,28(sp)
  e0ab70:	4021883a 	mov	r16,r8
  e0ab74:	1039883a 	mov	fp,r2
  e0ab78:	2829883a 	mov	r20,r5
  e0ab7c:	38003b1e 	bne	r7,zero,e0ac6c <__udivdi3+0x130>
  e0ab80:	2a005c36 	bltu	r5,r8,e0acf4 <__udivdi3+0x1b8>
  e0ab84:	4000a626 	beq	r8,zero,e0ae20 <__udivdi3+0x2e4>
  e0ab88:	00bfffd4 	movui	r2,65535
  e0ab8c:	14009e36 	bltu	r2,r16,e0ae08 <__udivdi3+0x2cc>
  e0ab90:	00803fc4 	movi	r2,255
  e0ab94:	14013d36 	bltu	r2,r16,e0b08c <__udivdi3+0x550>
  e0ab98:	000b883a 	mov	r5,zero
  e0ab9c:	0005883a 	mov	r2,zero
  e0aba0:	8084d83a 	srl	r2,r16,r2
  e0aba4:	01003874 	movhi	r4,225
  e0aba8:	21035404 	addi	r4,r4,3408
  e0abac:	01800804 	movi	r6,32
  e0abb0:	1105883a 	add	r2,r2,r4
  e0abb4:	10c00003 	ldbu	r3,0(r2)
  e0abb8:	28c7883a 	add	r3,r5,r3
  e0abbc:	30edc83a 	sub	r22,r6,r3
  e0abc0:	b000ee1e 	bne	r22,zero,e0af7c <__udivdi3+0x440>
  e0abc4:	802ad43a 	srli	r21,r16,16
  e0abc8:	00800044 	movi	r2,1
  e0abcc:	a423c83a 	sub	r17,r20,r16
  e0abd0:	85ffffcc 	andi	r23,r16,65535
  e0abd4:	d8800315 	stw	r2,12(sp)
  e0abd8:	8809883a 	mov	r4,r17
  e0abdc:	a80b883a 	mov	r5,r21
  e0abe0:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0abe4:	8809883a 	mov	r4,r17
  e0abe8:	a80b883a 	mov	r5,r21
  e0abec:	102d883a 	mov	r22,r2
  e0abf0:	0e0c1540 	call	e0c154 <__umodsi3>
  e0abf4:	1004943a 	slli	r2,r2,16
  e0abf8:	e006d43a 	srli	r3,fp,16
  e0abfc:	bda3383a 	mul	r17,r23,r22
  e0ac00:	10c4b03a 	or	r2,r2,r3
  e0ac04:	1440042e 	bgeu	r2,r17,e0ac18 <__udivdi3+0xdc>
  e0ac08:	1405883a 	add	r2,r2,r16
  e0ac0c:	b5bfffc4 	addi	r22,r22,-1
  e0ac10:	14000136 	bltu	r2,r16,e0ac18 <__udivdi3+0xdc>
  e0ac14:	14413d36 	bltu	r2,r17,e0b10c <__udivdi3+0x5d0>
  e0ac18:	1463c83a 	sub	r17,r2,r17
  e0ac1c:	8809883a 	mov	r4,r17
  e0ac20:	a80b883a 	mov	r5,r21
  e0ac24:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0ac28:	8809883a 	mov	r4,r17
  e0ac2c:	a80b883a 	mov	r5,r21
  e0ac30:	1029883a 	mov	r20,r2
  e0ac34:	0e0c1540 	call	e0c154 <__umodsi3>
  e0ac38:	1004943a 	slli	r2,r2,16
  e0ac3c:	bd09383a 	mul	r4,r23,r20
  e0ac40:	e0ffffcc 	andi	r3,fp,65535
  e0ac44:	10c4b03a 	or	r2,r2,r3
  e0ac48:	1100042e 	bgeu	r2,r4,e0ac5c <__udivdi3+0x120>
  e0ac4c:	8085883a 	add	r2,r16,r2
  e0ac50:	a53fffc4 	addi	r20,r20,-1
  e0ac54:	14000136 	bltu	r2,r16,e0ac5c <__udivdi3+0x120>
  e0ac58:	11012036 	bltu	r2,r4,e0b0dc <__udivdi3+0x5a0>
  e0ac5c:	b004943a 	slli	r2,r22,16
  e0ac60:	d9000317 	ldw	r4,12(sp)
  e0ac64:	a084b03a 	or	r2,r20,r2
  e0ac68:	00001506 	br	e0acc0 <__udivdi3+0x184>
  e0ac6c:	380d883a 	mov	r6,r7
  e0ac70:	29c06236 	bltu	r5,r7,e0adfc <__udivdi3+0x2c0>
  e0ac74:	00bfffd4 	movui	r2,65535
  e0ac78:	11c05a36 	bltu	r2,r7,e0ade4 <__udivdi3+0x2a8>
  e0ac7c:	00803fc4 	movi	r2,255
  e0ac80:	11c0fc36 	bltu	r2,r7,e0b074 <__udivdi3+0x538>
  e0ac84:	000b883a 	mov	r5,zero
  e0ac88:	0005883a 	mov	r2,zero
  e0ac8c:	3084d83a 	srl	r2,r6,r2
  e0ac90:	01003874 	movhi	r4,225
  e0ac94:	21035404 	addi	r4,r4,3408
  e0ac98:	01c00804 	movi	r7,32
  e0ac9c:	1105883a 	add	r2,r2,r4
  e0aca0:	10c00003 	ldbu	r3,0(r2)
  e0aca4:	28c7883a 	add	r3,r5,r3
  e0aca8:	38efc83a 	sub	r23,r7,r3
  e0acac:	b800691e 	bne	r23,zero,e0ae54 <__udivdi3+0x318>
  e0acb0:	35000136 	bltu	r6,r20,e0acb8 <__udivdi3+0x17c>
  e0acb4:	e4005136 	bltu	fp,r16,e0adfc <__udivdi3+0x2c0>
  e0acb8:	00800044 	movi	r2,1
  e0acbc:	0009883a 	mov	r4,zero
  e0acc0:	2007883a 	mov	r3,r4
  e0acc4:	dfc00f17 	ldw	ra,60(sp)
  e0acc8:	df000e17 	ldw	fp,56(sp)
  e0accc:	ddc00d17 	ldw	r23,52(sp)
  e0acd0:	dd800c17 	ldw	r22,48(sp)
  e0acd4:	dd400b17 	ldw	r21,44(sp)
  e0acd8:	dd000a17 	ldw	r20,40(sp)
  e0acdc:	dcc00917 	ldw	r19,36(sp)
  e0ace0:	dc800817 	ldw	r18,32(sp)
  e0ace4:	dc400717 	ldw	r17,28(sp)
  e0ace8:	dc000617 	ldw	r16,24(sp)
  e0acec:	dec01004 	addi	sp,sp,64
  e0acf0:	f800283a 	ret
  e0acf4:	00bfffd4 	movui	r2,65535
  e0acf8:	12005036 	bltu	r2,r8,e0ae3c <__udivdi3+0x300>
  e0acfc:	00803fc4 	movi	r2,255
  e0ad00:	1200e836 	bltu	r2,r8,e0b0a4 <__udivdi3+0x568>
  e0ad04:	000b883a 	mov	r5,zero
  e0ad08:	0005883a 	mov	r2,zero
  e0ad0c:	8084d83a 	srl	r2,r16,r2
  e0ad10:	01003874 	movhi	r4,225
  e0ad14:	21035404 	addi	r4,r4,3408
  e0ad18:	01800804 	movi	r6,32
  e0ad1c:	1105883a 	add	r2,r2,r4
  e0ad20:	10c00003 	ldbu	r3,0(r2)
  e0ad24:	28c7883a 	add	r3,r5,r3
  e0ad28:	30cbc83a 	sub	r5,r6,r3
  e0ad2c:	28000626 	beq	r5,zero,e0ad48 <__udivdi3+0x20c>
  e0ad30:	3145c83a 	sub	r2,r6,r5
  e0ad34:	e084d83a 	srl	r2,fp,r2
  e0ad38:	a146983a 	sll	r3,r20,r5
  e0ad3c:	e178983a 	sll	fp,fp,r5
  e0ad40:	8160983a 	sll	r16,r16,r5
  e0ad44:	18a8b03a 	or	r20,r3,r2
  e0ad48:	802ad43a 	srli	r21,r16,16
  e0ad4c:	a009883a 	mov	r4,r20
  e0ad50:	85ffffcc 	andi	r23,r16,65535
  e0ad54:	a80b883a 	mov	r5,r21
  e0ad58:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0ad5c:	a009883a 	mov	r4,r20
  e0ad60:	a80b883a 	mov	r5,r21
  e0ad64:	102d883a 	mov	r22,r2
  e0ad68:	0e0c1540 	call	e0c154 <__umodsi3>
  e0ad6c:	1004943a 	slli	r2,r2,16
  e0ad70:	e006d43a 	srli	r3,fp,16
  e0ad74:	bda3383a 	mul	r17,r23,r22
  e0ad78:	10c4b03a 	or	r2,r2,r3
  e0ad7c:	1440042e 	bgeu	r2,r17,e0ad90 <__udivdi3+0x254>
  e0ad80:	1405883a 	add	r2,r2,r16
  e0ad84:	b5bfffc4 	addi	r22,r22,-1
  e0ad88:	14000136 	bltu	r2,r16,e0ad90 <__udivdi3+0x254>
  e0ad8c:	1440d536 	bltu	r2,r17,e0b0e4 <__udivdi3+0x5a8>
  e0ad90:	1463c83a 	sub	r17,r2,r17
  e0ad94:	8809883a 	mov	r4,r17
  e0ad98:	a80b883a 	mov	r5,r21
  e0ad9c:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0ada0:	8809883a 	mov	r4,r17
  e0ada4:	a80b883a 	mov	r5,r21
  e0ada8:	1029883a 	mov	r20,r2
  e0adac:	0e0c1540 	call	e0c154 <__umodsi3>
  e0adb0:	1004943a 	slli	r2,r2,16
  e0adb4:	bd09383a 	mul	r4,r23,r20
  e0adb8:	e0ffffcc 	andi	r3,fp,65535
  e0adbc:	10c4b03a 	or	r2,r2,r3
  e0adc0:	1100042e 	bgeu	r2,r4,e0add4 <__udivdi3+0x298>
  e0adc4:	8085883a 	add	r2,r16,r2
  e0adc8:	a53fffc4 	addi	r20,r20,-1
  e0adcc:	14000136 	bltu	r2,r16,e0add4 <__udivdi3+0x298>
  e0add0:	1100c736 	bltu	r2,r4,e0b0f0 <__udivdi3+0x5b4>
  e0add4:	b004943a 	slli	r2,r22,16
  e0add8:	0009883a 	mov	r4,zero
  e0addc:	a084b03a 	or	r2,r20,r2
  e0ade0:	003fb706 	br	e0acc0 <__udivdi3+0x184>
  e0ade4:	00804034 	movhi	r2,256
  e0ade8:	10bfffc4 	addi	r2,r2,-1
  e0adec:	11c0a436 	bltu	r2,r7,e0b080 <__udivdi3+0x544>
  e0adf0:	01400404 	movi	r5,16
  e0adf4:	2805883a 	mov	r2,r5
  e0adf8:	003fa406 	br	e0ac8c <__udivdi3+0x150>
  e0adfc:	0005883a 	mov	r2,zero
  e0ae00:	0009883a 	mov	r4,zero
  e0ae04:	003fae06 	br	e0acc0 <__udivdi3+0x184>
  e0ae08:	00804034 	movhi	r2,256
  e0ae0c:	10bfffc4 	addi	r2,r2,-1
  e0ae10:	1400a136 	bltu	r2,r16,e0b098 <__udivdi3+0x55c>
  e0ae14:	01400404 	movi	r5,16
  e0ae18:	2805883a 	mov	r2,r5
  e0ae1c:	003f6006 	br	e0aba0 <__udivdi3+0x64>
  e0ae20:	01000044 	movi	r4,1
  e0ae24:	000b883a 	mov	r5,zero
  e0ae28:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0ae2c:	1021883a 	mov	r16,r2
  e0ae30:	00bfffd4 	movui	r2,65535
  e0ae34:	143ff436 	bltu	r2,r16,e0ae08 <__udivdi3+0x2cc>
  e0ae38:	003f5506 	br	e0ab90 <__udivdi3+0x54>
  e0ae3c:	00804034 	movhi	r2,256
  e0ae40:	10bfffc4 	addi	r2,r2,-1
  e0ae44:	12009a36 	bltu	r2,r8,e0b0b0 <__udivdi3+0x574>
  e0ae48:	01400404 	movi	r5,16
  e0ae4c:	2805883a 	mov	r2,r5
  e0ae50:	003fae06 	br	e0ad0c <__udivdi3+0x1d0>
  e0ae54:	3dc5c83a 	sub	r2,r7,r23
  e0ae58:	35c8983a 	sll	r4,r6,r23
  e0ae5c:	8086d83a 	srl	r3,r16,r2
  e0ae60:	a0a2d83a 	srl	r17,r20,r2
  e0ae64:	e084d83a 	srl	r2,fp,r2
  e0ae68:	20eab03a 	or	r21,r4,r3
  e0ae6c:	a82cd43a 	srli	r22,r21,16
  e0ae70:	a5c6983a 	sll	r3,r20,r23
  e0ae74:	8809883a 	mov	r4,r17
  e0ae78:	b00b883a 	mov	r5,r22
  e0ae7c:	1886b03a 	or	r3,r3,r2
  e0ae80:	d8c00215 	stw	r3,8(sp)
  e0ae84:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0ae88:	8809883a 	mov	r4,r17
  e0ae8c:	b00b883a 	mov	r5,r22
  e0ae90:	1029883a 	mov	r20,r2
  e0ae94:	0e0c1540 	call	e0c154 <__umodsi3>
  e0ae98:	a8ffffcc 	andi	r3,r21,65535
  e0ae9c:	d8c00515 	stw	r3,20(sp)
  e0aea0:	d9000217 	ldw	r4,8(sp)
  e0aea4:	d9400517 	ldw	r5,20(sp)
  e0aea8:	1004943a 	slli	r2,r2,16
  e0aeac:	2006d43a 	srli	r3,r4,16
  e0aeb0:	85e0983a 	sll	r16,r16,r23
  e0aeb4:	2d23383a 	mul	r17,r5,r20
  e0aeb8:	10c4b03a 	or	r2,r2,r3
  e0aebc:	dc000015 	stw	r16,0(sp)
  e0aec0:	1440032e 	bgeu	r2,r17,e0aed0 <__udivdi3+0x394>
  e0aec4:	1545883a 	add	r2,r2,r21
  e0aec8:	a53fffc4 	addi	r20,r20,-1
  e0aecc:	15407f2e 	bgeu	r2,r21,e0b0cc <__udivdi3+0x590>
  e0aed0:	1463c83a 	sub	r17,r2,r17
  e0aed4:	8809883a 	mov	r4,r17
  e0aed8:	b00b883a 	mov	r5,r22
  e0aedc:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0aee0:	8809883a 	mov	r4,r17
  e0aee4:	b00b883a 	mov	r5,r22
  e0aee8:	1021883a 	mov	r16,r2
  e0aeec:	0e0c1540 	call	e0c154 <__umodsi3>
  e0aef0:	d8c00517 	ldw	r3,20(sp)
  e0aef4:	d9000217 	ldw	r4,8(sp)
  e0aef8:	1004943a 	slli	r2,r2,16
  e0aefc:	1c0f383a 	mul	r7,r3,r16
  e0af00:	20ffffcc 	andi	r3,r4,65535
  e0af04:	10e2b03a 	or	r17,r2,r3
  e0af08:	89c0032e 	bgeu	r17,r7,e0af18 <__udivdi3+0x3dc>
  e0af0c:	8d63883a 	add	r17,r17,r21
  e0af10:	843fffc4 	addi	r16,r16,-1
  e0af14:	8d40692e 	bgeu	r17,r21,e0b0bc <__udivdi3+0x580>
  e0af18:	a008943a 	slli	r4,r20,16
  e0af1c:	d9400017 	ldw	r5,0(sp)
  e0af20:	89e3c83a 	sub	r17,r17,r7
  e0af24:	8110b03a 	or	r8,r16,r4
  e0af28:	280cd43a 	srli	r6,r5,16
  e0af2c:	28ffffcc 	andi	r3,r5,65535
  e0af30:	40bfffcc 	andi	r2,r8,65535
  e0af34:	400ad43a 	srli	r5,r8,16
  e0af38:	10d3383a 	mul	r9,r2,r3
  e0af3c:	1185383a 	mul	r2,r2,r6
  e0af40:	28c7383a 	mul	r3,r5,r3
  e0af44:	4808d43a 	srli	r4,r9,16
  e0af48:	298b383a 	mul	r5,r5,r6
  e0af4c:	10c5883a 	add	r2,r2,r3
  e0af50:	2089883a 	add	r4,r4,r2
  e0af54:	20c0022e 	bgeu	r4,r3,e0af60 <__udivdi3+0x424>
  e0af58:	00800074 	movhi	r2,1
  e0af5c:	288b883a 	add	r5,r5,r2
  e0af60:	2004d43a 	srli	r2,r4,16
  e0af64:	288b883a 	add	r5,r5,r2
  e0af68:	89403f36 	bltu	r17,r5,e0b068 <__udivdi3+0x52c>
  e0af6c:	89403926 	beq	r17,r5,e0b054 <__udivdi3+0x518>
  e0af70:	4005883a 	mov	r2,r8
  e0af74:	0009883a 	mov	r4,zero
  e0af78:	003f5106 	br	e0acc0 <__udivdi3+0x184>
  e0af7c:	85a0983a 	sll	r16,r16,r22
  e0af80:	3585c83a 	sub	r2,r6,r22
  e0af84:	a0a2d83a 	srl	r17,r20,r2
  e0af88:	802ad43a 	srli	r21,r16,16
  e0af8c:	e084d83a 	srl	r2,fp,r2
  e0af90:	a586983a 	sll	r3,r20,r22
  e0af94:	8809883a 	mov	r4,r17
  e0af98:	a80b883a 	mov	r5,r21
  e0af9c:	1886b03a 	or	r3,r3,r2
  e0afa0:	d8c00115 	stw	r3,4(sp)
  e0afa4:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0afa8:	8809883a 	mov	r4,r17
  e0afac:	a80b883a 	mov	r5,r21
  e0afb0:	d8800415 	stw	r2,16(sp)
  e0afb4:	0e0c1540 	call	e0c154 <__umodsi3>
  e0afb8:	d9000117 	ldw	r4,4(sp)
  e0afbc:	d9400417 	ldw	r5,16(sp)
  e0afc0:	1004943a 	slli	r2,r2,16
  e0afc4:	85ffffcc 	andi	r23,r16,65535
  e0afc8:	2006d43a 	srli	r3,r4,16
  e0afcc:	b963383a 	mul	r17,r23,r5
  e0afd0:	10c4b03a 	or	r2,r2,r3
  e0afd4:	1440042e 	bgeu	r2,r17,e0afe8 <__udivdi3+0x4ac>
  e0afd8:	297fffc4 	addi	r5,r5,-1
  e0afdc:	1405883a 	add	r2,r2,r16
  e0afe0:	d9400415 	stw	r5,16(sp)
  e0afe4:	1400442e 	bgeu	r2,r16,e0b0f8 <__udivdi3+0x5bc>
  e0afe8:	1463c83a 	sub	r17,r2,r17
  e0afec:	8809883a 	mov	r4,r17
  e0aff0:	a80b883a 	mov	r5,r21
  e0aff4:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0aff8:	8809883a 	mov	r4,r17
  e0affc:	a80b883a 	mov	r5,r21
  e0b000:	1029883a 	mov	r20,r2
  e0b004:	0e0c1540 	call	e0c154 <__umodsi3>
  e0b008:	d9400117 	ldw	r5,4(sp)
  e0b00c:	1004943a 	slli	r2,r2,16
  e0b010:	bd09383a 	mul	r4,r23,r20
  e0b014:	28ffffcc 	andi	r3,r5,65535
  e0b018:	10c6b03a 	or	r3,r2,r3
  e0b01c:	1900062e 	bgeu	r3,r4,e0b038 <__udivdi3+0x4fc>
  e0b020:	1c07883a 	add	r3,r3,r16
  e0b024:	a53fffc4 	addi	r20,r20,-1
  e0b028:	1c000336 	bltu	r3,r16,e0b038 <__udivdi3+0x4fc>
  e0b02c:	1900022e 	bgeu	r3,r4,e0b038 <__udivdi3+0x4fc>
  e0b030:	a53fffc4 	addi	r20,r20,-1
  e0b034:	1c07883a 	add	r3,r3,r16
  e0b038:	d9400417 	ldw	r5,16(sp)
  e0b03c:	e5b8983a 	sll	fp,fp,r22
  e0b040:	1923c83a 	sub	r17,r3,r4
  e0b044:	2804943a 	slli	r2,r5,16
  e0b048:	a0a8b03a 	or	r20,r20,r2
  e0b04c:	dd000315 	stw	r20,12(sp)
  e0b050:	003ee106 	br	e0abd8 <__udivdi3+0x9c>
  e0b054:	2004943a 	slli	r2,r4,16
  e0b058:	e5c8983a 	sll	r4,fp,r23
  e0b05c:	48ffffcc 	andi	r3,r9,65535
  e0b060:	10c5883a 	add	r2,r2,r3
  e0b064:	20bfc22e 	bgeu	r4,r2,e0af70 <__udivdi3+0x434>
  e0b068:	40bfffc4 	addi	r2,r8,-1
  e0b06c:	0009883a 	mov	r4,zero
  e0b070:	003f1306 	br	e0acc0 <__udivdi3+0x184>
  e0b074:	01400204 	movi	r5,8
  e0b078:	2805883a 	mov	r2,r5
  e0b07c:	003f0306 	br	e0ac8c <__udivdi3+0x150>
  e0b080:	01400604 	movi	r5,24
  e0b084:	2805883a 	mov	r2,r5
  e0b088:	003f0006 	br	e0ac8c <__udivdi3+0x150>
  e0b08c:	01400204 	movi	r5,8
  e0b090:	2805883a 	mov	r2,r5
  e0b094:	003ec206 	br	e0aba0 <__udivdi3+0x64>
  e0b098:	01400604 	movi	r5,24
  e0b09c:	2805883a 	mov	r2,r5
  e0b0a0:	003ebf06 	br	e0aba0 <__udivdi3+0x64>
  e0b0a4:	01400204 	movi	r5,8
  e0b0a8:	2805883a 	mov	r2,r5
  e0b0ac:	003f1706 	br	e0ad0c <__udivdi3+0x1d0>
  e0b0b0:	01400604 	movi	r5,24
  e0b0b4:	2805883a 	mov	r2,r5
  e0b0b8:	003f1406 	br	e0ad0c <__udivdi3+0x1d0>
  e0b0bc:	89ff962e 	bgeu	r17,r7,e0af18 <__udivdi3+0x3dc>
  e0b0c0:	8d63883a 	add	r17,r17,r21
  e0b0c4:	843fffc4 	addi	r16,r16,-1
  e0b0c8:	003f9306 	br	e0af18 <__udivdi3+0x3dc>
  e0b0cc:	147f802e 	bgeu	r2,r17,e0aed0 <__udivdi3+0x394>
  e0b0d0:	a53fffc4 	addi	r20,r20,-1
  e0b0d4:	1545883a 	add	r2,r2,r21
  e0b0d8:	003f7d06 	br	e0aed0 <__udivdi3+0x394>
  e0b0dc:	a53fffc4 	addi	r20,r20,-1
  e0b0e0:	003ede06 	br	e0ac5c <__udivdi3+0x120>
  e0b0e4:	b5bfffc4 	addi	r22,r22,-1
  e0b0e8:	1405883a 	add	r2,r2,r16
  e0b0ec:	003f2806 	br	e0ad90 <__udivdi3+0x254>
  e0b0f0:	a53fffc4 	addi	r20,r20,-1
  e0b0f4:	003f3706 	br	e0add4 <__udivdi3+0x298>
  e0b0f8:	147fbb2e 	bgeu	r2,r17,e0afe8 <__udivdi3+0x4ac>
  e0b0fc:	297fffc4 	addi	r5,r5,-1
  e0b100:	1405883a 	add	r2,r2,r16
  e0b104:	d9400415 	stw	r5,16(sp)
  e0b108:	003fb706 	br	e0afe8 <__udivdi3+0x4ac>
  e0b10c:	b5bfffc4 	addi	r22,r22,-1
  e0b110:	1405883a 	add	r2,r2,r16
  e0b114:	003ec006 	br	e0ac18 <__udivdi3+0xdc>

00e0b118 <__umoddi3>:
  e0b118:	defff104 	addi	sp,sp,-60
  e0b11c:	dd800b15 	stw	r22,44(sp)
  e0b120:	dd000915 	stw	r20,36(sp)
  e0b124:	dc000515 	stw	r16,20(sp)
  e0b128:	dfc00e15 	stw	ra,56(sp)
  e0b12c:	df000d15 	stw	fp,52(sp)
  e0b130:	ddc00c15 	stw	r23,48(sp)
  e0b134:	dd400a15 	stw	r21,40(sp)
  e0b138:	dcc00815 	stw	r19,32(sp)
  e0b13c:	dc800715 	stw	r18,28(sp)
  e0b140:	dc400615 	stw	r17,24(sp)
  e0b144:	3021883a 	mov	r16,r6
  e0b148:	202d883a 	mov	r22,r4
  e0b14c:	2829883a 	mov	r20,r5
  e0b150:	38002b1e 	bne	r7,zero,e0b200 <__umoddi3+0xe8>
  e0b154:	29805036 	bltu	r5,r6,e0b298 <__umoddi3+0x180>
  e0b158:	30008a26 	beq	r6,zero,e0b384 <__umoddi3+0x26c>
  e0b15c:	00bfffd4 	movui	r2,65535
  e0b160:	14008236 	bltu	r2,r16,e0b36c <__umoddi3+0x254>
  e0b164:	00803fc4 	movi	r2,255
  e0b168:	14013636 	bltu	r2,r16,e0b644 <__umoddi3+0x52c>
  e0b16c:	000b883a 	mov	r5,zero
  e0b170:	0005883a 	mov	r2,zero
  e0b174:	8084d83a 	srl	r2,r16,r2
  e0b178:	01003874 	movhi	r4,225
  e0b17c:	21035404 	addi	r4,r4,3408
  e0b180:	01800804 	movi	r6,32
  e0b184:	1105883a 	add	r2,r2,r4
  e0b188:	10c00003 	ldbu	r3,0(r2)
  e0b18c:	28c7883a 	add	r3,r5,r3
  e0b190:	30efc83a 	sub	r23,r6,r3
  e0b194:	b800941e 	bne	r23,zero,e0b3e8 <__umoddi3+0x2d0>
  e0b198:	802ad43a 	srli	r21,r16,16
  e0b19c:	a423c83a 	sub	r17,r20,r16
  e0b1a0:	0039883a 	mov	fp,zero
  e0b1a4:	853fffcc 	andi	r20,r16,65535
  e0b1a8:	8809883a 	mov	r4,r17
  e0b1ac:	a80b883a 	mov	r5,r21
  e0b1b0:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0b1b4:	8809883a 	mov	r4,r17
  e0b1b8:	a80b883a 	mov	r5,r21
  e0b1bc:	a0a3383a 	mul	r17,r20,r2
  e0b1c0:	0e0c1540 	call	e0c154 <__umodsi3>
  e0b1c4:	1004943a 	slli	r2,r2,16
  e0b1c8:	b006d43a 	srli	r3,r22,16
  e0b1cc:	10c4b03a 	or	r2,r2,r3
  e0b1d0:	1440032e 	bgeu	r2,r17,e0b1e0 <__umoddi3+0xc8>
  e0b1d4:	1405883a 	add	r2,r2,r16
  e0b1d8:	14000136 	bltu	r2,r16,e0b1e0 <__umoddi3+0xc8>
  e0b1dc:	14413536 	bltu	r2,r17,e0b6b4 <__umoddi3+0x59c>
  e0b1e0:	1463c83a 	sub	r17,r2,r17
  e0b1e4:	8809883a 	mov	r4,r17
  e0b1e8:	a80b883a 	mov	r5,r21
  e0b1ec:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0b1f0:	8809883a 	mov	r4,r17
  e0b1f4:	a0a3383a 	mul	r17,r20,r2
  e0b1f8:	a80b883a 	mov	r5,r21
  e0b1fc:	00004d06 	br	e0b334 <__umoddi3+0x21c>
  e0b200:	380d883a 	mov	r6,r7
  e0b204:	29c0102e 	bgeu	r5,r7,e0b248 <__umoddi3+0x130>
  e0b208:	2011883a 	mov	r8,r4
  e0b20c:	2813883a 	mov	r9,r5
  e0b210:	4005883a 	mov	r2,r8
  e0b214:	4807883a 	mov	r3,r9
  e0b218:	dfc00e17 	ldw	ra,56(sp)
  e0b21c:	df000d17 	ldw	fp,52(sp)
  e0b220:	ddc00c17 	ldw	r23,48(sp)
  e0b224:	dd800b17 	ldw	r22,44(sp)
  e0b228:	dd400a17 	ldw	r21,40(sp)
  e0b22c:	dd000917 	ldw	r20,36(sp)
  e0b230:	dcc00817 	ldw	r19,32(sp)
  e0b234:	dc800717 	ldw	r18,28(sp)
  e0b238:	dc400617 	ldw	r17,24(sp)
  e0b23c:	dc000517 	ldw	r16,20(sp)
  e0b240:	dec00f04 	addi	sp,sp,60
  e0b244:	f800283a 	ret
  e0b248:	00bfffd4 	movui	r2,65535
  e0b24c:	11c05a36 	bltu	r2,r7,e0b3b8 <__umoddi3+0x2a0>
  e0b250:	00803fc4 	movi	r2,255
  e0b254:	11c0fe36 	bltu	r2,r7,e0b650 <__umoddi3+0x538>
  e0b258:	000b883a 	mov	r5,zero
  e0b25c:	0005883a 	mov	r2,zero
  e0b260:	3084d83a 	srl	r2,r6,r2
  e0b264:	01003874 	movhi	r4,225
  e0b268:	21035404 	addi	r4,r4,3408
  e0b26c:	01c00804 	movi	r7,32
  e0b270:	1105883a 	add	r2,r2,r4
  e0b274:	10c00003 	ldbu	r3,0(r2)
  e0b278:	28c7883a 	add	r3,r5,r3
  e0b27c:	38ebc83a 	sub	r21,r7,r3
  e0b280:	a800851e 	bne	r21,zero,e0b498 <__umoddi3+0x380>
  e0b284:	35005236 	bltu	r6,r20,e0b3d0 <__umoddi3+0x2b8>
  e0b288:	b400512e 	bgeu	r22,r16,e0b3d0 <__umoddi3+0x2b8>
  e0b28c:	b011883a 	mov	r8,r22
  e0b290:	a013883a 	mov	r9,r20
  e0b294:	003fde06 	br	e0b210 <__umoddi3+0xf8>
  e0b298:	00bfffd4 	movui	r2,65535
  e0b29c:	11804036 	bltu	r2,r6,e0b3a0 <__umoddi3+0x288>
  e0b2a0:	00803fc4 	movi	r2,255
  e0b2a4:	1180ed36 	bltu	r2,r6,e0b65c <__umoddi3+0x544>
  e0b2a8:	000b883a 	mov	r5,zero
  e0b2ac:	0005883a 	mov	r2,zero
  e0b2b0:	8084d83a 	srl	r2,r16,r2
  e0b2b4:	01003874 	movhi	r4,225
  e0b2b8:	21035404 	addi	r4,r4,3408
  e0b2bc:	01800804 	movi	r6,32
  e0b2c0:	1105883a 	add	r2,r2,r4
  e0b2c4:	10c00003 	ldbu	r3,0(r2)
  e0b2c8:	28c7883a 	add	r3,r5,r3
  e0b2cc:	30c7c83a 	sub	r3,r6,r3
  e0b2d0:	1800bf1e 	bne	r3,zero,e0b5d0 <__umoddi3+0x4b8>
  e0b2d4:	0039883a 	mov	fp,zero
  e0b2d8:	802ad43a 	srli	r21,r16,16
  e0b2dc:	a009883a 	mov	r4,r20
  e0b2e0:	85ffffcc 	andi	r23,r16,65535
  e0b2e4:	a80b883a 	mov	r5,r21
  e0b2e8:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0b2ec:	a009883a 	mov	r4,r20
  e0b2f0:	a80b883a 	mov	r5,r21
  e0b2f4:	b8a3383a 	mul	r17,r23,r2
  e0b2f8:	0e0c1540 	call	e0c154 <__umodsi3>
  e0b2fc:	1004943a 	slli	r2,r2,16
  e0b300:	b006d43a 	srli	r3,r22,16
  e0b304:	10c4b03a 	or	r2,r2,r3
  e0b308:	1440032e 	bgeu	r2,r17,e0b318 <__umoddi3+0x200>
  e0b30c:	1405883a 	add	r2,r2,r16
  e0b310:	14000136 	bltu	r2,r16,e0b318 <__umoddi3+0x200>
  e0b314:	1440e536 	bltu	r2,r17,e0b6ac <__umoddi3+0x594>
  e0b318:	1463c83a 	sub	r17,r2,r17
  e0b31c:	8809883a 	mov	r4,r17
  e0b320:	a80b883a 	mov	r5,r21
  e0b324:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0b328:	8809883a 	mov	r4,r17
  e0b32c:	b8a3383a 	mul	r17,r23,r2
  e0b330:	a80b883a 	mov	r5,r21
  e0b334:	0e0c1540 	call	e0c154 <__umodsi3>
  e0b338:	1004943a 	slli	r2,r2,16
  e0b33c:	b0ffffcc 	andi	r3,r22,65535
  e0b340:	10c4b03a 	or	r2,r2,r3
  e0b344:	1440042e 	bgeu	r2,r17,e0b358 <__umoddi3+0x240>
  e0b348:	1405883a 	add	r2,r2,r16
  e0b34c:	14000236 	bltu	r2,r16,e0b358 <__umoddi3+0x240>
  e0b350:	1440012e 	bgeu	r2,r17,e0b358 <__umoddi3+0x240>
  e0b354:	1405883a 	add	r2,r2,r16
  e0b358:	1445c83a 	sub	r2,r2,r17
  e0b35c:	1724d83a 	srl	r18,r2,fp
  e0b360:	0013883a 	mov	r9,zero
  e0b364:	9011883a 	mov	r8,r18
  e0b368:	003fa906 	br	e0b210 <__umoddi3+0xf8>
  e0b36c:	00804034 	movhi	r2,256
  e0b370:	10bfffc4 	addi	r2,r2,-1
  e0b374:	1400b036 	bltu	r2,r16,e0b638 <__umoddi3+0x520>
  e0b378:	01400404 	movi	r5,16
  e0b37c:	2805883a 	mov	r2,r5
  e0b380:	003f7c06 	br	e0b174 <__umoddi3+0x5c>
  e0b384:	01000044 	movi	r4,1
  e0b388:	000b883a 	mov	r5,zero
  e0b38c:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0b390:	1021883a 	mov	r16,r2
  e0b394:	00bfffd4 	movui	r2,65535
  e0b398:	143ff436 	bltu	r2,r16,e0b36c <__umoddi3+0x254>
  e0b39c:	003f7106 	br	e0b164 <__umoddi3+0x4c>
  e0b3a0:	00804034 	movhi	r2,256
  e0b3a4:	10bfffc4 	addi	r2,r2,-1
  e0b3a8:	1180af36 	bltu	r2,r6,e0b668 <__umoddi3+0x550>
  e0b3ac:	01400404 	movi	r5,16
  e0b3b0:	2805883a 	mov	r2,r5
  e0b3b4:	003fbe06 	br	e0b2b0 <__umoddi3+0x198>
  e0b3b8:	00804034 	movhi	r2,256
  e0b3bc:	10bfffc4 	addi	r2,r2,-1
  e0b3c0:	11c0ac36 	bltu	r2,r7,e0b674 <__umoddi3+0x55c>
  e0b3c4:	01400404 	movi	r5,16
  e0b3c8:	2805883a 	mov	r2,r5
  e0b3cc:	003fa406 	br	e0b260 <__umoddi3+0x148>
  e0b3d0:	b409c83a 	sub	r4,r22,r16
  e0b3d4:	b105803a 	cmpltu	r2,r22,r4
  e0b3d8:	a187c83a 	sub	r3,r20,r6
  e0b3dc:	18a9c83a 	sub	r20,r3,r2
  e0b3e0:	202d883a 	mov	r22,r4
  e0b3e4:	003fa906 	br	e0b28c <__umoddi3+0x174>
  e0b3e8:	85e0983a 	sll	r16,r16,r23
  e0b3ec:	35c5c83a 	sub	r2,r6,r23
  e0b3f0:	a0a2d83a 	srl	r17,r20,r2
  e0b3f4:	802ad43a 	srli	r21,r16,16
  e0b3f8:	b084d83a 	srl	r2,r22,r2
  e0b3fc:	a5c6983a 	sll	r3,r20,r23
  e0b400:	8809883a 	mov	r4,r17
  e0b404:	a80b883a 	mov	r5,r21
  e0b408:	1886b03a 	or	r3,r3,r2
  e0b40c:	d8c00115 	stw	r3,4(sp)
  e0b410:	853fffcc 	andi	r20,r16,65535
  e0b414:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0b418:	8809883a 	mov	r4,r17
  e0b41c:	a80b883a 	mov	r5,r21
  e0b420:	a0a3383a 	mul	r17,r20,r2
  e0b424:	0e0c1540 	call	e0c154 <__umodsi3>
  e0b428:	d9000117 	ldw	r4,4(sp)
  e0b42c:	1004943a 	slli	r2,r2,16
  e0b430:	b839883a 	mov	fp,r23
  e0b434:	2006d43a 	srli	r3,r4,16
  e0b438:	10c4b03a 	or	r2,r2,r3
  e0b43c:	1440022e 	bgeu	r2,r17,e0b448 <__umoddi3+0x330>
  e0b440:	1405883a 	add	r2,r2,r16
  e0b444:	1400962e 	bgeu	r2,r16,e0b6a0 <__umoddi3+0x588>
  e0b448:	1463c83a 	sub	r17,r2,r17
  e0b44c:	8809883a 	mov	r4,r17
  e0b450:	a80b883a 	mov	r5,r21
  e0b454:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0b458:	8809883a 	mov	r4,r17
  e0b45c:	a80b883a 	mov	r5,r21
  e0b460:	a0a3383a 	mul	r17,r20,r2
  e0b464:	0e0c1540 	call	e0c154 <__umodsi3>
  e0b468:	d9400117 	ldw	r5,4(sp)
  e0b46c:	1004943a 	slli	r2,r2,16
  e0b470:	28ffffcc 	andi	r3,r5,65535
  e0b474:	10c4b03a 	or	r2,r2,r3
  e0b478:	1440042e 	bgeu	r2,r17,e0b48c <__umoddi3+0x374>
  e0b47c:	1405883a 	add	r2,r2,r16
  e0b480:	14000236 	bltu	r2,r16,e0b48c <__umoddi3+0x374>
  e0b484:	1440012e 	bgeu	r2,r17,e0b48c <__umoddi3+0x374>
  e0b488:	1405883a 	add	r2,r2,r16
  e0b48c:	b5ec983a 	sll	r22,r22,r23
  e0b490:	1463c83a 	sub	r17,r2,r17
  e0b494:	003f4406 	br	e0b1a8 <__umoddi3+0x90>
  e0b498:	3d4fc83a 	sub	r7,r7,r21
  e0b49c:	3546983a 	sll	r3,r6,r21
  e0b4a0:	81c4d83a 	srl	r2,r16,r7
  e0b4a4:	a1e2d83a 	srl	r17,r20,r7
  e0b4a8:	a54c983a 	sll	r6,r20,r21
  e0b4ac:	18aeb03a 	or	r23,r3,r2
  e0b4b0:	b828d43a 	srli	r20,r23,16
  e0b4b4:	b1c4d83a 	srl	r2,r22,r7
  e0b4b8:	8809883a 	mov	r4,r17
  e0b4bc:	a00b883a 	mov	r5,r20
  e0b4c0:	308cb03a 	or	r6,r6,r2
  e0b4c4:	d9c00315 	stw	r7,12(sp)
  e0b4c8:	d9800215 	stw	r6,8(sp)
  e0b4cc:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0b4d0:	8809883a 	mov	r4,r17
  e0b4d4:	a00b883a 	mov	r5,r20
  e0b4d8:	1039883a 	mov	fp,r2
  e0b4dc:	0e0c1540 	call	e0c154 <__umodsi3>
  e0b4e0:	b8ffffcc 	andi	r3,r23,65535
  e0b4e4:	d8c00415 	stw	r3,16(sp)
  e0b4e8:	d9000217 	ldw	r4,8(sp)
  e0b4ec:	d9400417 	ldw	r5,16(sp)
  e0b4f0:	1004943a 	slli	r2,r2,16
  e0b4f4:	2006d43a 	srli	r3,r4,16
  e0b4f8:	8560983a 	sll	r16,r16,r21
  e0b4fc:	2f23383a 	mul	r17,r5,fp
  e0b500:	10c4b03a 	or	r2,r2,r3
  e0b504:	dc000015 	stw	r16,0(sp)
  e0b508:	b56c983a 	sll	r22,r22,r21
  e0b50c:	1440032e 	bgeu	r2,r17,e0b51c <__umoddi3+0x404>
  e0b510:	15c5883a 	add	r2,r2,r23
  e0b514:	e73fffc4 	addi	fp,fp,-1
  e0b518:	15c05d2e 	bgeu	r2,r23,e0b690 <__umoddi3+0x578>
  e0b51c:	1463c83a 	sub	r17,r2,r17
  e0b520:	8809883a 	mov	r4,r17
  e0b524:	a00b883a 	mov	r5,r20
  e0b528:	0e0c14c0 	call	e0c14c <__udivsi3>
  e0b52c:	8809883a 	mov	r4,r17
  e0b530:	a00b883a 	mov	r5,r20
  e0b534:	1021883a 	mov	r16,r2
  e0b538:	0e0c1540 	call	e0c154 <__umodsi3>
  e0b53c:	d8c00417 	ldw	r3,16(sp)
  e0b540:	d9000217 	ldw	r4,8(sp)
  e0b544:	1004943a 	slli	r2,r2,16
  e0b548:	1c23383a 	mul	r17,r3,r16
  e0b54c:	20ffffcc 	andi	r3,r4,65535
  e0b550:	10ceb03a 	or	r7,r2,r3
  e0b554:	3c40032e 	bgeu	r7,r17,e0b564 <__umoddi3+0x44c>
  e0b558:	3dcf883a 	add	r7,r7,r23
  e0b55c:	843fffc4 	addi	r16,r16,-1
  e0b560:	3dc0472e 	bgeu	r7,r23,e0b680 <__umoddi3+0x568>
  e0b564:	e004943a 	slli	r2,fp,16
  e0b568:	d9400017 	ldw	r5,0(sp)
  e0b56c:	3c4fc83a 	sub	r7,r7,r17
  e0b570:	8084b03a 	or	r2,r16,r2
  e0b574:	28ffffcc 	andi	r3,r5,65535
  e0b578:	280cd43a 	srli	r6,r5,16
  e0b57c:	100ad43a 	srli	r5,r2,16
  e0b580:	10bfffcc 	andi	r2,r2,65535
  e0b584:	10d1383a 	mul	r8,r2,r3
  e0b588:	28c7383a 	mul	r3,r5,r3
  e0b58c:	1185383a 	mul	r2,r2,r6
  e0b590:	4008d43a 	srli	r4,r8,16
  e0b594:	298b383a 	mul	r5,r5,r6
  e0b598:	10c5883a 	add	r2,r2,r3
  e0b59c:	2089883a 	add	r4,r4,r2
  e0b5a0:	20c0022e 	bgeu	r4,r3,e0b5ac <__umoddi3+0x494>
  e0b5a4:	00800074 	movhi	r2,1
  e0b5a8:	288b883a 	add	r5,r5,r2
  e0b5ac:	2004d43a 	srli	r2,r4,16
  e0b5b0:	2008943a 	slli	r4,r4,16
  e0b5b4:	40ffffcc 	andi	r3,r8,65535
  e0b5b8:	288b883a 	add	r5,r5,r2
  e0b5bc:	20c9883a 	add	r4,r4,r3
  e0b5c0:	39400b36 	bltu	r7,r5,e0b5f0 <__umoddi3+0x4d8>
  e0b5c4:	39403d26 	beq	r7,r5,e0b6bc <__umoddi3+0x5a4>
  e0b5c8:	394bc83a 	sub	r5,r7,r5
  e0b5cc:	00000f06 	br	e0b60c <__umoddi3+0x4f4>
  e0b5d0:	30c5c83a 	sub	r2,r6,r3
  e0b5d4:	1839883a 	mov	fp,r3
  e0b5d8:	b084d83a 	srl	r2,r22,r2
  e0b5dc:	a0c6983a 	sll	r3,r20,r3
  e0b5e0:	8720983a 	sll	r16,r16,fp
  e0b5e4:	b72c983a 	sll	r22,r22,fp
  e0b5e8:	18a8b03a 	or	r20,r3,r2
  e0b5ec:	003f3a06 	br	e0b2d8 <__umoddi3+0x1c0>
  e0b5f0:	d8c00017 	ldw	r3,0(sp)
  e0b5f4:	20c5c83a 	sub	r2,r4,r3
  e0b5f8:	2089803a 	cmpltu	r4,r4,r2
  e0b5fc:	2dc7c83a 	sub	r3,r5,r23
  e0b600:	1907c83a 	sub	r3,r3,r4
  e0b604:	38cbc83a 	sub	r5,r7,r3
  e0b608:	1009883a 	mov	r4,r2
  e0b60c:	b105c83a 	sub	r2,r22,r4
  e0b610:	b087803a 	cmpltu	r3,r22,r2
  e0b614:	28c7c83a 	sub	r3,r5,r3
  e0b618:	d9400317 	ldw	r5,12(sp)
  e0b61c:	1544d83a 	srl	r2,r2,r21
  e0b620:	1948983a 	sll	r4,r3,r5
  e0b624:	1d46d83a 	srl	r3,r3,r21
  e0b628:	20a4b03a 	or	r18,r4,r2
  e0b62c:	9011883a 	mov	r8,r18
  e0b630:	1813883a 	mov	r9,r3
  e0b634:	003ef606 	br	e0b210 <__umoddi3+0xf8>
  e0b638:	01400604 	movi	r5,24
  e0b63c:	2805883a 	mov	r2,r5
  e0b640:	003ecc06 	br	e0b174 <__umoddi3+0x5c>
  e0b644:	01400204 	movi	r5,8
  e0b648:	2805883a 	mov	r2,r5
  e0b64c:	003ec906 	br	e0b174 <__umoddi3+0x5c>
  e0b650:	01400204 	movi	r5,8
  e0b654:	2805883a 	mov	r2,r5
  e0b658:	003f0106 	br	e0b260 <__umoddi3+0x148>
  e0b65c:	01400204 	movi	r5,8
  e0b660:	2805883a 	mov	r2,r5
  e0b664:	003f1206 	br	e0b2b0 <__umoddi3+0x198>
  e0b668:	01400604 	movi	r5,24
  e0b66c:	2805883a 	mov	r2,r5
  e0b670:	003f0f06 	br	e0b2b0 <__umoddi3+0x198>
  e0b674:	01400604 	movi	r5,24
  e0b678:	2805883a 	mov	r2,r5
  e0b67c:	003ef806 	br	e0b260 <__umoddi3+0x148>
  e0b680:	3c7fb82e 	bgeu	r7,r17,e0b564 <__umoddi3+0x44c>
  e0b684:	843fffc4 	addi	r16,r16,-1
  e0b688:	3dcf883a 	add	r7,r7,r23
  e0b68c:	003fb506 	br	e0b564 <__umoddi3+0x44c>
  e0b690:	147fa22e 	bgeu	r2,r17,e0b51c <__umoddi3+0x404>
  e0b694:	e73fffc4 	addi	fp,fp,-1
  e0b698:	15c5883a 	add	r2,r2,r23
  e0b69c:	003f9f06 	br	e0b51c <__umoddi3+0x404>
  e0b6a0:	147f692e 	bgeu	r2,r17,e0b448 <__umoddi3+0x330>
  e0b6a4:	1405883a 	add	r2,r2,r16
  e0b6a8:	003f6706 	br	e0b448 <__umoddi3+0x330>
  e0b6ac:	1405883a 	add	r2,r2,r16
  e0b6b0:	003f1906 	br	e0b318 <__umoddi3+0x200>
  e0b6b4:	1405883a 	add	r2,r2,r16
  e0b6b8:	003ec906 	br	e0b1e0 <__umoddi3+0xc8>
  e0b6bc:	b13fcc36 	bltu	r22,r4,e0b5f0 <__umoddi3+0x4d8>
  e0b6c0:	000b883a 	mov	r5,zero
  e0b6c4:	003fd106 	br	e0b60c <__umoddi3+0x4f4>

00e0b6c8 <__muldf3>:
  e0b6c8:	deffe004 	addi	sp,sp,-128
  e0b6cc:	dc401815 	stw	r17,96(sp)
  e0b6d0:	dc400404 	addi	r17,sp,16
  e0b6d4:	2011883a 	mov	r8,r4
  e0b6d8:	2813883a 	mov	r9,r5
  e0b6dc:	dc001715 	stw	r16,92(sp)
  e0b6e0:	d809883a 	mov	r4,sp
  e0b6e4:	880b883a 	mov	r5,r17
  e0b6e8:	dc000904 	addi	r16,sp,36
  e0b6ec:	dfc01f15 	stw	ra,124(sp)
  e0b6f0:	da400115 	stw	r9,4(sp)
  e0b6f4:	d9c00315 	stw	r7,12(sp)
  e0b6f8:	da000015 	stw	r8,0(sp)
  e0b6fc:	d9800215 	stw	r6,8(sp)
  e0b700:	ddc01e15 	stw	r23,120(sp)
  e0b704:	dd801d15 	stw	r22,116(sp)
  e0b708:	dd401c15 	stw	r21,112(sp)
  e0b70c:	dd001b15 	stw	r20,108(sp)
  e0b710:	dcc01a15 	stw	r19,104(sp)
  e0b714:	dc801915 	stw	r18,100(sp)
  e0b718:	0e035440 	call	e03544 <__unpack_d>
  e0b71c:	d9000204 	addi	r4,sp,8
  e0b720:	800b883a 	mov	r5,r16
  e0b724:	0e035440 	call	e03544 <__unpack_d>
  e0b728:	d9000417 	ldw	r4,16(sp)
  e0b72c:	00800044 	movi	r2,1
  e0b730:	1100102e 	bgeu	r2,r4,e0b774 <__muldf3+0xac>
  e0b734:	d8c00917 	ldw	r3,36(sp)
  e0b738:	10c0062e 	bgeu	r2,r3,e0b754 <__muldf3+0x8c>
  e0b73c:	00800104 	movi	r2,4
  e0b740:	20800a26 	beq	r4,r2,e0b76c <__muldf3+0xa4>
  e0b744:	1880cc26 	beq	r3,r2,e0ba78 <__muldf3+0x3b0>
  e0b748:	00800084 	movi	r2,2
  e0b74c:	20800926 	beq	r4,r2,e0b774 <__muldf3+0xac>
  e0b750:	1880191e 	bne	r3,r2,e0b7b8 <__muldf3+0xf0>
  e0b754:	d8c00a17 	ldw	r3,40(sp)
  e0b758:	d8800517 	ldw	r2,20(sp)
  e0b75c:	8009883a 	mov	r4,r16
  e0b760:	10c4c03a 	cmpne	r2,r2,r3
  e0b764:	d8800a15 	stw	r2,40(sp)
  e0b768:	00000706 	br	e0b788 <__muldf3+0xc0>
  e0b76c:	00800084 	movi	r2,2
  e0b770:	1880c326 	beq	r3,r2,e0ba80 <__muldf3+0x3b8>
  e0b774:	d8800517 	ldw	r2,20(sp)
  e0b778:	d8c00a17 	ldw	r3,40(sp)
  e0b77c:	8809883a 	mov	r4,r17
  e0b780:	10c4c03a 	cmpne	r2,r2,r3
  e0b784:	d8800515 	stw	r2,20(sp)
  e0b788:	0e032300 	call	e03230 <__pack_d>
  e0b78c:	dfc01f17 	ldw	ra,124(sp)
  e0b790:	ddc01e17 	ldw	r23,120(sp)
  e0b794:	dd801d17 	ldw	r22,116(sp)
  e0b798:	dd401c17 	ldw	r21,112(sp)
  e0b79c:	dd001b17 	ldw	r20,108(sp)
  e0b7a0:	dcc01a17 	ldw	r19,104(sp)
  e0b7a4:	dc801917 	ldw	r18,100(sp)
  e0b7a8:	dc401817 	ldw	r17,96(sp)
  e0b7ac:	dc001717 	ldw	r16,92(sp)
  e0b7b0:	dec02004 	addi	sp,sp,128
  e0b7b4:	f800283a 	ret
  e0b7b8:	dd800717 	ldw	r22,28(sp)
  e0b7bc:	dc800c17 	ldw	r18,48(sp)
  e0b7c0:	002b883a 	mov	r21,zero
  e0b7c4:	0023883a 	mov	r17,zero
  e0b7c8:	a80b883a 	mov	r5,r21
  e0b7cc:	b00d883a 	mov	r6,r22
  e0b7d0:	880f883a 	mov	r7,r17
  e0b7d4:	ddc00817 	ldw	r23,32(sp)
  e0b7d8:	dcc00d17 	ldw	r19,52(sp)
  e0b7dc:	9009883a 	mov	r4,r18
  e0b7e0:	0e02e1c0 	call	e02e1c <__muldi3>
  e0b7e4:	001b883a 	mov	r13,zero
  e0b7e8:	680f883a 	mov	r7,r13
  e0b7ec:	b009883a 	mov	r4,r22
  e0b7f0:	000b883a 	mov	r5,zero
  e0b7f4:	980d883a 	mov	r6,r19
  e0b7f8:	b82d883a 	mov	r22,r23
  e0b7fc:	002f883a 	mov	r23,zero
  e0b800:	db401615 	stw	r13,88(sp)
  e0b804:	d8801315 	stw	r2,76(sp)
  e0b808:	d8c01415 	stw	r3,80(sp)
  e0b80c:	dcc01515 	stw	r19,84(sp)
  e0b810:	0e02e1c0 	call	e02e1c <__muldi3>
  e0b814:	b00d883a 	mov	r6,r22
  e0b818:	000b883a 	mov	r5,zero
  e0b81c:	9009883a 	mov	r4,r18
  e0b820:	b80f883a 	mov	r7,r23
  e0b824:	1021883a 	mov	r16,r2
  e0b828:	1823883a 	mov	r17,r3
  e0b82c:	0e02e1c0 	call	e02e1c <__muldi3>
  e0b830:	8085883a 	add	r2,r16,r2
  e0b834:	140d803a 	cmpltu	r6,r2,r16
  e0b838:	88c7883a 	add	r3,r17,r3
  e0b83c:	30cd883a 	add	r6,r6,r3
  e0b840:	1029883a 	mov	r20,r2
  e0b844:	302b883a 	mov	r21,r6
  e0b848:	da801317 	ldw	r10,76(sp)
  e0b84c:	dac01417 	ldw	r11,80(sp)
  e0b850:	db001517 	ldw	r12,84(sp)
  e0b854:	db401617 	ldw	r13,88(sp)
  e0b858:	3440612e 	bgeu	r6,r17,e0b9e0 <__muldf3+0x318>
  e0b85c:	0009883a 	mov	r4,zero
  e0b860:	5105883a 	add	r2,r10,r4
  e0b864:	128d803a 	cmpltu	r6,r2,r10
  e0b868:	5d07883a 	add	r3,r11,r20
  e0b86c:	30cd883a 	add	r6,r6,r3
  e0b870:	0021883a 	mov	r16,zero
  e0b874:	04400044 	movi	r17,1
  e0b878:	1025883a 	mov	r18,r2
  e0b87c:	3027883a 	mov	r19,r6
  e0b880:	32c06236 	bltu	r6,r11,e0ba0c <__muldf3+0x344>
  e0b884:	59807a26 	beq	r11,r6,e0ba70 <__muldf3+0x3a8>
  e0b888:	680b883a 	mov	r5,r13
  e0b88c:	b80f883a 	mov	r7,r23
  e0b890:	6009883a 	mov	r4,r12
  e0b894:	b00d883a 	mov	r6,r22
  e0b898:	0e02e1c0 	call	e02e1c <__muldi3>
  e0b89c:	1009883a 	mov	r4,r2
  e0b8a0:	000f883a 	mov	r7,zero
  e0b8a4:	1545883a 	add	r2,r2,r21
  e0b8a8:	1111803a 	cmpltu	r8,r2,r4
  e0b8ac:	19c7883a 	add	r3,r3,r7
  e0b8b0:	40c7883a 	add	r3,r8,r3
  e0b8b4:	88cb883a 	add	r5,r17,r3
  e0b8b8:	d8c00617 	ldw	r3,24(sp)
  e0b8bc:	8089883a 	add	r4,r16,r2
  e0b8c0:	d8800b17 	ldw	r2,44(sp)
  e0b8c4:	18c00104 	addi	r3,r3,4
  e0b8c8:	240d803a 	cmpltu	r6,r4,r16
  e0b8cc:	10c7883a 	add	r3,r2,r3
  e0b8d0:	2013883a 	mov	r9,r4
  e0b8d4:	d8800a17 	ldw	r2,40(sp)
  e0b8d8:	d9000517 	ldw	r4,20(sp)
  e0b8dc:	314d883a 	add	r6,r6,r5
  e0b8e0:	3015883a 	mov	r10,r6
  e0b8e4:	2088c03a 	cmpne	r4,r4,r2
  e0b8e8:	00880034 	movhi	r2,8192
  e0b8ec:	10bfffc4 	addi	r2,r2,-1
  e0b8f0:	d9000f15 	stw	r4,60(sp)
  e0b8f4:	d8c01015 	stw	r3,64(sp)
  e0b8f8:	1180162e 	bgeu	r2,r6,e0b954 <__muldf3+0x28c>
  e0b8fc:	1811883a 	mov	r8,r3
  e0b900:	101f883a 	mov	r15,r2
  e0b904:	980497fa 	slli	r2,r19,31
  e0b908:	9016d07a 	srli	r11,r18,1
  e0b90c:	500697fa 	slli	r3,r10,31
  e0b910:	480cd07a 	srli	r6,r9,1
  e0b914:	500ed07a 	srli	r7,r10,1
  e0b918:	12d6b03a 	or	r11,r2,r11
  e0b91c:	00800044 	movi	r2,1
  e0b920:	198cb03a 	or	r6,r3,r6
  e0b924:	4888703a 	and	r4,r9,r2
  e0b928:	9818d07a 	srli	r12,r19,1
  e0b92c:	001b883a 	mov	r13,zero
  e0b930:	03a00034 	movhi	r14,32768
  e0b934:	3013883a 	mov	r9,r6
  e0b938:	3815883a 	mov	r10,r7
  e0b93c:	4091883a 	add	r8,r8,r2
  e0b940:	20000226 	beq	r4,zero,e0b94c <__muldf3+0x284>
  e0b944:	5b64b03a 	or	r18,r11,r13
  e0b948:	63a6b03a 	or	r19,r12,r14
  e0b94c:	7abfed36 	bltu	r15,r10,e0b904 <__muldf3+0x23c>
  e0b950:	da001015 	stw	r8,64(sp)
  e0b954:	00840034 	movhi	r2,4096
  e0b958:	10bfffc4 	addi	r2,r2,-1
  e0b95c:	12801436 	bltu	r2,r10,e0b9b0 <__muldf3+0x2e8>
  e0b960:	da001017 	ldw	r8,64(sp)
  e0b964:	101f883a 	mov	r15,r2
  e0b968:	4a45883a 	add	r2,r9,r9
  e0b96c:	124d803a 	cmpltu	r6,r2,r9
  e0b970:	5287883a 	add	r3,r10,r10
  e0b974:	9497883a 	add	r11,r18,r18
  e0b978:	5c8f803a 	cmpltu	r7,r11,r18
  e0b97c:	9cd9883a 	add	r12,r19,r19
  e0b980:	01000044 	movi	r4,1
  e0b984:	30cd883a 	add	r6,r6,r3
  e0b988:	3b0f883a 	add	r7,r7,r12
  e0b98c:	423fffc4 	addi	r8,r8,-1
  e0b990:	1013883a 	mov	r9,r2
  e0b994:	3015883a 	mov	r10,r6
  e0b998:	111ab03a 	or	r13,r2,r4
  e0b99c:	98003016 	blt	r19,zero,e0ba60 <__muldf3+0x398>
  e0b9a0:	5825883a 	mov	r18,r11
  e0b9a4:	3827883a 	mov	r19,r7
  e0b9a8:	7abfef2e 	bgeu	r15,r10,e0b968 <__muldf3+0x2a0>
  e0b9ac:	da001015 	stw	r8,64(sp)
  e0b9b0:	00803fc4 	movi	r2,255
  e0b9b4:	488e703a 	and	r7,r9,r2
  e0b9b8:	00802004 	movi	r2,128
  e0b9bc:	0007883a 	mov	r3,zero
  e0b9c0:	0011883a 	mov	r8,zero
  e0b9c4:	38801826 	beq	r7,r2,e0ba28 <__muldf3+0x360>
  e0b9c8:	008000c4 	movi	r2,3
  e0b9cc:	d9000e04 	addi	r4,sp,56
  e0b9d0:	da801215 	stw	r10,72(sp)
  e0b9d4:	d8800e15 	stw	r2,56(sp)
  e0b9d8:	da401115 	stw	r9,68(sp)
  e0b9dc:	003f6a06 	br	e0b788 <__muldf3+0xc0>
  e0b9e0:	89802126 	beq	r17,r6,e0ba68 <__muldf3+0x3a0>
  e0b9e4:	0009883a 	mov	r4,zero
  e0b9e8:	5105883a 	add	r2,r10,r4
  e0b9ec:	128d803a 	cmpltu	r6,r2,r10
  e0b9f0:	5d07883a 	add	r3,r11,r20
  e0b9f4:	30cd883a 	add	r6,r6,r3
  e0b9f8:	0021883a 	mov	r16,zero
  e0b9fc:	0023883a 	mov	r17,zero
  e0ba00:	1025883a 	mov	r18,r2
  e0ba04:	3027883a 	mov	r19,r6
  e0ba08:	32ff9e2e 	bgeu	r6,r11,e0b884 <__muldf3+0x1bc>
  e0ba0c:	00800044 	movi	r2,1
  e0ba10:	8089883a 	add	r4,r16,r2
  e0ba14:	240d803a 	cmpltu	r6,r4,r16
  e0ba18:	344d883a 	add	r6,r6,r17
  e0ba1c:	2021883a 	mov	r16,r4
  e0ba20:	3023883a 	mov	r17,r6
  e0ba24:	003f9806 	br	e0b888 <__muldf3+0x1c0>
  e0ba28:	403fe71e 	bne	r8,zero,e0b9c8 <__muldf3+0x300>
  e0ba2c:	01004004 	movi	r4,256
  e0ba30:	4904703a 	and	r2,r9,r4
  e0ba34:	10c4b03a 	or	r2,r2,r3
  e0ba38:	103fe31e 	bne	r2,zero,e0b9c8 <__muldf3+0x300>
  e0ba3c:	94c4b03a 	or	r2,r18,r19
  e0ba40:	103fe126 	beq	r2,zero,e0b9c8 <__muldf3+0x300>
  e0ba44:	49c5883a 	add	r2,r9,r7
  e0ba48:	1251803a 	cmpltu	r8,r2,r9
  e0ba4c:	4291883a 	add	r8,r8,r10
  e0ba50:	013fc004 	movi	r4,-256
  e0ba54:	1112703a 	and	r9,r2,r4
  e0ba58:	4015883a 	mov	r10,r8
  e0ba5c:	003fda06 	br	e0b9c8 <__muldf3+0x300>
  e0ba60:	6813883a 	mov	r9,r13
  e0ba64:	003fce06 	br	e0b9a0 <__muldf3+0x2d8>
  e0ba68:	143f7c36 	bltu	r2,r16,e0b85c <__muldf3+0x194>
  e0ba6c:	003fdd06 	br	e0b9e4 <__muldf3+0x31c>
  e0ba70:	12bf852e 	bgeu	r2,r10,e0b888 <__muldf3+0x1c0>
  e0ba74:	003fe506 	br	e0ba0c <__muldf3+0x344>
  e0ba78:	00800084 	movi	r2,2
  e0ba7c:	20bf351e 	bne	r4,r2,e0b754 <__muldf3+0x8c>
  e0ba80:	01003874 	movhi	r4,225
  e0ba84:	21034f04 	addi	r4,r4,3388
  e0ba88:	003f3f06 	br	e0b788 <__muldf3+0xc0>

00e0ba8c <__eqdf2>:
  e0ba8c:	deffef04 	addi	sp,sp,-68
  e0ba90:	dc400f15 	stw	r17,60(sp)
  e0ba94:	dc400404 	addi	r17,sp,16
  e0ba98:	2005883a 	mov	r2,r4
  e0ba9c:	2807883a 	mov	r3,r5
  e0baa0:	dc000e15 	stw	r16,56(sp)
  e0baa4:	d809883a 	mov	r4,sp
  e0baa8:	880b883a 	mov	r5,r17
  e0baac:	dc000904 	addi	r16,sp,36
  e0bab0:	d8c00115 	stw	r3,4(sp)
  e0bab4:	d8800015 	stw	r2,0(sp)
  e0bab8:	d9800215 	stw	r6,8(sp)
  e0babc:	dfc01015 	stw	ra,64(sp)
  e0bac0:	d9c00315 	stw	r7,12(sp)
  e0bac4:	0e035440 	call	e03544 <__unpack_d>
  e0bac8:	d9000204 	addi	r4,sp,8
  e0bacc:	800b883a 	mov	r5,r16
  e0bad0:	0e035440 	call	e03544 <__unpack_d>
  e0bad4:	d8800417 	ldw	r2,16(sp)
  e0bad8:	00c00044 	movi	r3,1
  e0badc:	180d883a 	mov	r6,r3
  e0bae0:	1880062e 	bgeu	r3,r2,e0bafc <__eqdf2+0x70>
  e0bae4:	d8800917 	ldw	r2,36(sp)
  e0bae8:	8809883a 	mov	r4,r17
  e0baec:	800b883a 	mov	r5,r16
  e0baf0:	1880022e 	bgeu	r3,r2,e0bafc <__eqdf2+0x70>
  e0baf4:	0e0367c0 	call	e0367c <__fpcmp_parts_d>
  e0baf8:	100d883a 	mov	r6,r2
  e0bafc:	3005883a 	mov	r2,r6
  e0bb00:	dfc01017 	ldw	ra,64(sp)
  e0bb04:	dc400f17 	ldw	r17,60(sp)
  e0bb08:	dc000e17 	ldw	r16,56(sp)
  e0bb0c:	dec01104 	addi	sp,sp,68
  e0bb10:	f800283a 	ret

00e0bb14 <__gtdf2>:
  e0bb14:	deffef04 	addi	sp,sp,-68
  e0bb18:	dc400f15 	stw	r17,60(sp)
  e0bb1c:	dc400404 	addi	r17,sp,16
  e0bb20:	2005883a 	mov	r2,r4
  e0bb24:	2807883a 	mov	r3,r5
  e0bb28:	dc000e15 	stw	r16,56(sp)
  e0bb2c:	d809883a 	mov	r4,sp
  e0bb30:	880b883a 	mov	r5,r17
  e0bb34:	dc000904 	addi	r16,sp,36
  e0bb38:	d8c00115 	stw	r3,4(sp)
  e0bb3c:	d8800015 	stw	r2,0(sp)
  e0bb40:	d9800215 	stw	r6,8(sp)
  e0bb44:	dfc01015 	stw	ra,64(sp)
  e0bb48:	d9c00315 	stw	r7,12(sp)
  e0bb4c:	0e035440 	call	e03544 <__unpack_d>
  e0bb50:	d9000204 	addi	r4,sp,8
  e0bb54:	800b883a 	mov	r5,r16
  e0bb58:	0e035440 	call	e03544 <__unpack_d>
  e0bb5c:	d8800417 	ldw	r2,16(sp)
  e0bb60:	00c00044 	movi	r3,1
  e0bb64:	01bfffc4 	movi	r6,-1
  e0bb68:	1880062e 	bgeu	r3,r2,e0bb84 <__gtdf2+0x70>
  e0bb6c:	d8800917 	ldw	r2,36(sp)
  e0bb70:	8809883a 	mov	r4,r17
  e0bb74:	800b883a 	mov	r5,r16
  e0bb78:	1880022e 	bgeu	r3,r2,e0bb84 <__gtdf2+0x70>
  e0bb7c:	0e0367c0 	call	e0367c <__fpcmp_parts_d>
  e0bb80:	100d883a 	mov	r6,r2
  e0bb84:	3005883a 	mov	r2,r6
  e0bb88:	dfc01017 	ldw	ra,64(sp)
  e0bb8c:	dc400f17 	ldw	r17,60(sp)
  e0bb90:	dc000e17 	ldw	r16,56(sp)
  e0bb94:	dec01104 	addi	sp,sp,68
  e0bb98:	f800283a 	ret

00e0bb9c <__gedf2>:
  e0bb9c:	deffef04 	addi	sp,sp,-68
  e0bba0:	dc400f15 	stw	r17,60(sp)
  e0bba4:	dc400404 	addi	r17,sp,16
  e0bba8:	2005883a 	mov	r2,r4
  e0bbac:	2807883a 	mov	r3,r5
  e0bbb0:	dc000e15 	stw	r16,56(sp)
  e0bbb4:	d809883a 	mov	r4,sp
  e0bbb8:	880b883a 	mov	r5,r17
  e0bbbc:	dc000904 	addi	r16,sp,36
  e0bbc0:	d8c00115 	stw	r3,4(sp)
  e0bbc4:	d8800015 	stw	r2,0(sp)
  e0bbc8:	d9800215 	stw	r6,8(sp)
  e0bbcc:	dfc01015 	stw	ra,64(sp)
  e0bbd0:	d9c00315 	stw	r7,12(sp)
  e0bbd4:	0e035440 	call	e03544 <__unpack_d>
  e0bbd8:	d9000204 	addi	r4,sp,8
  e0bbdc:	800b883a 	mov	r5,r16
  e0bbe0:	0e035440 	call	e03544 <__unpack_d>
  e0bbe4:	d8800417 	ldw	r2,16(sp)
  e0bbe8:	00c00044 	movi	r3,1
  e0bbec:	01bfffc4 	movi	r6,-1
  e0bbf0:	1880062e 	bgeu	r3,r2,e0bc0c <__gedf2+0x70>
  e0bbf4:	d8800917 	ldw	r2,36(sp)
  e0bbf8:	8809883a 	mov	r4,r17
  e0bbfc:	800b883a 	mov	r5,r16
  e0bc00:	1880022e 	bgeu	r3,r2,e0bc0c <__gedf2+0x70>
  e0bc04:	0e0367c0 	call	e0367c <__fpcmp_parts_d>
  e0bc08:	100d883a 	mov	r6,r2
  e0bc0c:	3005883a 	mov	r2,r6
  e0bc10:	dfc01017 	ldw	ra,64(sp)
  e0bc14:	dc400f17 	ldw	r17,60(sp)
  e0bc18:	dc000e17 	ldw	r16,56(sp)
  e0bc1c:	dec01104 	addi	sp,sp,68
  e0bc20:	f800283a 	ret

00e0bc24 <__ltdf2>:
  e0bc24:	deffef04 	addi	sp,sp,-68
  e0bc28:	dc400f15 	stw	r17,60(sp)
  e0bc2c:	dc400404 	addi	r17,sp,16
  e0bc30:	2005883a 	mov	r2,r4
  e0bc34:	2807883a 	mov	r3,r5
  e0bc38:	dc000e15 	stw	r16,56(sp)
  e0bc3c:	d809883a 	mov	r4,sp
  e0bc40:	880b883a 	mov	r5,r17
  e0bc44:	dc000904 	addi	r16,sp,36
  e0bc48:	d8c00115 	stw	r3,4(sp)
  e0bc4c:	d8800015 	stw	r2,0(sp)
  e0bc50:	d9800215 	stw	r6,8(sp)
  e0bc54:	dfc01015 	stw	ra,64(sp)
  e0bc58:	d9c00315 	stw	r7,12(sp)
  e0bc5c:	0e035440 	call	e03544 <__unpack_d>
  e0bc60:	d9000204 	addi	r4,sp,8
  e0bc64:	800b883a 	mov	r5,r16
  e0bc68:	0e035440 	call	e03544 <__unpack_d>
  e0bc6c:	d8800417 	ldw	r2,16(sp)
  e0bc70:	00c00044 	movi	r3,1
  e0bc74:	180d883a 	mov	r6,r3
  e0bc78:	1880062e 	bgeu	r3,r2,e0bc94 <__ltdf2+0x70>
  e0bc7c:	d8800917 	ldw	r2,36(sp)
  e0bc80:	8809883a 	mov	r4,r17
  e0bc84:	800b883a 	mov	r5,r16
  e0bc88:	1880022e 	bgeu	r3,r2,e0bc94 <__ltdf2+0x70>
  e0bc8c:	0e0367c0 	call	e0367c <__fpcmp_parts_d>
  e0bc90:	100d883a 	mov	r6,r2
  e0bc94:	3005883a 	mov	r2,r6
  e0bc98:	dfc01017 	ldw	ra,64(sp)
  e0bc9c:	dc400f17 	ldw	r17,60(sp)
  e0bca0:	dc000e17 	ldw	r16,56(sp)
  e0bca4:	dec01104 	addi	sp,sp,68
  e0bca8:	f800283a 	ret

00e0bcac <__floatsidf>:
  e0bcac:	2006d7fa 	srli	r3,r4,31
  e0bcb0:	defff604 	addi	sp,sp,-40
  e0bcb4:	008000c4 	movi	r2,3
  e0bcb8:	dfc00915 	stw	ra,36(sp)
  e0bcbc:	dcc00815 	stw	r19,32(sp)
  e0bcc0:	dc800715 	stw	r18,28(sp)
  e0bcc4:	dc400615 	stw	r17,24(sp)
  e0bcc8:	dc000515 	stw	r16,20(sp)
  e0bccc:	d8800015 	stw	r2,0(sp)
  e0bcd0:	d8c00115 	stw	r3,4(sp)
  e0bcd4:	20000f1e 	bne	r4,zero,e0bd14 <__floatsidf+0x68>
  e0bcd8:	00800084 	movi	r2,2
  e0bcdc:	d8800015 	stw	r2,0(sp)
  e0bce0:	d809883a 	mov	r4,sp
  e0bce4:	0e032300 	call	e03230 <__pack_d>
  e0bce8:	1009883a 	mov	r4,r2
  e0bcec:	180b883a 	mov	r5,r3
  e0bcf0:	2005883a 	mov	r2,r4
  e0bcf4:	2807883a 	mov	r3,r5
  e0bcf8:	dfc00917 	ldw	ra,36(sp)
  e0bcfc:	dcc00817 	ldw	r19,32(sp)
  e0bd00:	dc800717 	ldw	r18,28(sp)
  e0bd04:	dc400617 	ldw	r17,24(sp)
  e0bd08:	dc000517 	ldw	r16,20(sp)
  e0bd0c:	dec00a04 	addi	sp,sp,40
  e0bd10:	f800283a 	ret
  e0bd14:	00800f04 	movi	r2,60
  e0bd18:	1807003a 	cmpeq	r3,r3,zero
  e0bd1c:	d8800215 	stw	r2,8(sp)
  e0bd20:	18001126 	beq	r3,zero,e0bd68 <__floatsidf+0xbc>
  e0bd24:	0027883a 	mov	r19,zero
  e0bd28:	2025883a 	mov	r18,r4
  e0bd2c:	d9000315 	stw	r4,12(sp)
  e0bd30:	dcc00415 	stw	r19,16(sp)
  e0bd34:	0e02eb40 	call	e02eb4 <__clzsi2>
  e0bd38:	11000744 	addi	r4,r2,29
  e0bd3c:	013fe80e 	bge	zero,r4,e0bce0 <__floatsidf+0x34>
  e0bd40:	10bfff44 	addi	r2,r2,-3
  e0bd44:	10000c16 	blt	r2,zero,e0bd78 <__floatsidf+0xcc>
  e0bd48:	90a2983a 	sll	r17,r18,r2
  e0bd4c:	0021883a 	mov	r16,zero
  e0bd50:	d8800217 	ldw	r2,8(sp)
  e0bd54:	dc400415 	stw	r17,16(sp)
  e0bd58:	dc000315 	stw	r16,12(sp)
  e0bd5c:	1105c83a 	sub	r2,r2,r4
  e0bd60:	d8800215 	stw	r2,8(sp)
  e0bd64:	003fde06 	br	e0bce0 <__floatsidf+0x34>
  e0bd68:	00a00034 	movhi	r2,32768
  e0bd6c:	20800a26 	beq	r4,r2,e0bd98 <__floatsidf+0xec>
  e0bd70:	0109c83a 	sub	r4,zero,r4
  e0bd74:	003feb06 	br	e0bd24 <__floatsidf+0x78>
  e0bd78:	9006d07a 	srli	r3,r18,1
  e0bd7c:	008007c4 	movi	r2,31
  e0bd80:	1105c83a 	sub	r2,r2,r4
  e0bd84:	1886d83a 	srl	r3,r3,r2
  e0bd88:	9922983a 	sll	r17,r19,r4
  e0bd8c:	9120983a 	sll	r16,r18,r4
  e0bd90:	1c62b03a 	or	r17,r3,r17
  e0bd94:	003fee06 	br	e0bd50 <__floatsidf+0xa4>
  e0bd98:	0009883a 	mov	r4,zero
  e0bd9c:	01707834 	movhi	r5,49632
  e0bda0:	003fd306 	br	e0bcf0 <__floatsidf+0x44>

00e0bda4 <__fixdfsi>:
  e0bda4:	defff804 	addi	sp,sp,-32
  e0bda8:	2005883a 	mov	r2,r4
  e0bdac:	2807883a 	mov	r3,r5
  e0bdb0:	d809883a 	mov	r4,sp
  e0bdb4:	d9400204 	addi	r5,sp,8
  e0bdb8:	d8c00115 	stw	r3,4(sp)
  e0bdbc:	d8800015 	stw	r2,0(sp)
  e0bdc0:	dfc00715 	stw	ra,28(sp)
  e0bdc4:	0e035440 	call	e03544 <__unpack_d>
  e0bdc8:	d8c00217 	ldw	r3,8(sp)
  e0bdcc:	00800084 	movi	r2,2
  e0bdd0:	1880051e 	bne	r3,r2,e0bde8 <__fixdfsi+0x44>
  e0bdd4:	0007883a 	mov	r3,zero
  e0bdd8:	1805883a 	mov	r2,r3
  e0bddc:	dfc00717 	ldw	ra,28(sp)
  e0bde0:	dec00804 	addi	sp,sp,32
  e0bde4:	f800283a 	ret
  e0bde8:	00800044 	movi	r2,1
  e0bdec:	10fff92e 	bgeu	r2,r3,e0bdd4 <__fixdfsi+0x30>
  e0bdf0:	00800104 	movi	r2,4
  e0bdf4:	18800426 	beq	r3,r2,e0be08 <__fixdfsi+0x64>
  e0bdf8:	d8c00417 	ldw	r3,16(sp)
  e0bdfc:	183ff516 	blt	r3,zero,e0bdd4 <__fixdfsi+0x30>
  e0be00:	00800784 	movi	r2,30
  e0be04:	10c0080e 	bge	r2,r3,e0be28 <__fixdfsi+0x84>
  e0be08:	d8800317 	ldw	r2,12(sp)
  e0be0c:	1000121e 	bne	r2,zero,e0be58 <__fixdfsi+0xb4>
  e0be10:	00e00034 	movhi	r3,32768
  e0be14:	18ffffc4 	addi	r3,r3,-1
  e0be18:	1805883a 	mov	r2,r3
  e0be1c:	dfc00717 	ldw	ra,28(sp)
  e0be20:	dec00804 	addi	sp,sp,32
  e0be24:	f800283a 	ret
  e0be28:	00800f04 	movi	r2,60
  e0be2c:	10d1c83a 	sub	r8,r2,r3
  e0be30:	40bff804 	addi	r2,r8,-32
  e0be34:	d9800517 	ldw	r6,20(sp)
  e0be38:	d9c00617 	ldw	r7,24(sp)
  e0be3c:	10000816 	blt	r2,zero,e0be60 <__fixdfsi+0xbc>
  e0be40:	3888d83a 	srl	r4,r7,r2
  e0be44:	d8800317 	ldw	r2,12(sp)
  e0be48:	2007883a 	mov	r3,r4
  e0be4c:	103fe226 	beq	r2,zero,e0bdd8 <__fixdfsi+0x34>
  e0be50:	0107c83a 	sub	r3,zero,r4
  e0be54:	003fe006 	br	e0bdd8 <__fixdfsi+0x34>
  e0be58:	00e00034 	movhi	r3,32768
  e0be5c:	003fde06 	br	e0bdd8 <__fixdfsi+0x34>
  e0be60:	39c7883a 	add	r3,r7,r7
  e0be64:	008007c4 	movi	r2,31
  e0be68:	1205c83a 	sub	r2,r2,r8
  e0be6c:	1886983a 	sll	r3,r3,r2
  e0be70:	3208d83a 	srl	r4,r6,r8
  e0be74:	1908b03a 	or	r4,r3,r4
  e0be78:	003ff206 	br	e0be44 <__fixdfsi+0xa0>

00e0be7c <__floatunsidf>:
  e0be7c:	defff204 	addi	sp,sp,-56
  e0be80:	dfc00d15 	stw	ra,52(sp)
  e0be84:	ddc00c15 	stw	r23,48(sp)
  e0be88:	dd800b15 	stw	r22,44(sp)
  e0be8c:	dd400a15 	stw	r21,40(sp)
  e0be90:	dd000915 	stw	r20,36(sp)
  e0be94:	dcc00815 	stw	r19,32(sp)
  e0be98:	dc800715 	stw	r18,28(sp)
  e0be9c:	dc400615 	stw	r17,24(sp)
  e0bea0:	dc000515 	stw	r16,20(sp)
  e0bea4:	d8000115 	stw	zero,4(sp)
  e0bea8:	20000f1e 	bne	r4,zero,e0bee8 <__floatunsidf+0x6c>
  e0beac:	00800084 	movi	r2,2
  e0beb0:	d8800015 	stw	r2,0(sp)
  e0beb4:	d809883a 	mov	r4,sp
  e0beb8:	0e032300 	call	e03230 <__pack_d>
  e0bebc:	dfc00d17 	ldw	ra,52(sp)
  e0bec0:	ddc00c17 	ldw	r23,48(sp)
  e0bec4:	dd800b17 	ldw	r22,44(sp)
  e0bec8:	dd400a17 	ldw	r21,40(sp)
  e0becc:	dd000917 	ldw	r20,36(sp)
  e0bed0:	dcc00817 	ldw	r19,32(sp)
  e0bed4:	dc800717 	ldw	r18,28(sp)
  e0bed8:	dc400617 	ldw	r17,24(sp)
  e0bedc:	dc000517 	ldw	r16,20(sp)
  e0bee0:	dec00e04 	addi	sp,sp,56
  e0bee4:	f800283a 	ret
  e0bee8:	008000c4 	movi	r2,3
  e0beec:	00c00f04 	movi	r3,60
  e0bef0:	002f883a 	mov	r23,zero
  e0bef4:	202d883a 	mov	r22,r4
  e0bef8:	d8800015 	stw	r2,0(sp)
  e0befc:	d8c00215 	stw	r3,8(sp)
  e0bf00:	d9000315 	stw	r4,12(sp)
  e0bf04:	ddc00415 	stw	r23,16(sp)
  e0bf08:	0e02eb40 	call	e02eb4 <__clzsi2>
  e0bf0c:	12400744 	addi	r9,r2,29
  e0bf10:	48000b16 	blt	r9,zero,e0bf40 <__floatunsidf+0xc4>
  e0bf14:	483fe726 	beq	r9,zero,e0beb4 <__floatunsidf+0x38>
  e0bf18:	10bfff44 	addi	r2,r2,-3
  e0bf1c:	10002e16 	blt	r2,zero,e0bfd8 <__floatunsidf+0x15c>
  e0bf20:	b0a2983a 	sll	r17,r22,r2
  e0bf24:	0021883a 	mov	r16,zero
  e0bf28:	d8800217 	ldw	r2,8(sp)
  e0bf2c:	dc400415 	stw	r17,16(sp)
  e0bf30:	dc000315 	stw	r16,12(sp)
  e0bf34:	1245c83a 	sub	r2,r2,r9
  e0bf38:	d8800215 	stw	r2,8(sp)
  e0bf3c:	003fdd06 	br	e0beb4 <__floatunsidf+0x38>
  e0bf40:	0255c83a 	sub	r10,zero,r9
  e0bf44:	51bff804 	addi	r6,r10,-32
  e0bf48:	30001b16 	blt	r6,zero,e0bfb8 <__floatunsidf+0x13c>
  e0bf4c:	b9a8d83a 	srl	r20,r23,r6
  e0bf50:	002b883a 	mov	r21,zero
  e0bf54:	000f883a 	mov	r7,zero
  e0bf58:	01000044 	movi	r4,1
  e0bf5c:	0011883a 	mov	r8,zero
  e0bf60:	30002516 	blt	r6,zero,e0bff8 <__floatunsidf+0x17c>
  e0bf64:	21a6983a 	sll	r19,r4,r6
  e0bf68:	0025883a 	mov	r18,zero
  e0bf6c:	00bfffc4 	movi	r2,-1
  e0bf70:	9089883a 	add	r4,r18,r2
  e0bf74:	988b883a 	add	r5,r19,r2
  e0bf78:	248d803a 	cmpltu	r6,r4,r18
  e0bf7c:	314b883a 	add	r5,r6,r5
  e0bf80:	b104703a 	and	r2,r22,r4
  e0bf84:	b946703a 	and	r3,r23,r5
  e0bf88:	10c4b03a 	or	r2,r2,r3
  e0bf8c:	10000226 	beq	r2,zero,e0bf98 <__floatunsidf+0x11c>
  e0bf90:	01c00044 	movi	r7,1
  e0bf94:	0011883a 	mov	r8,zero
  e0bf98:	d9000217 	ldw	r4,8(sp)
  e0bf9c:	a1c4b03a 	or	r2,r20,r7
  e0bfa0:	aa06b03a 	or	r3,r21,r8
  e0bfa4:	2249c83a 	sub	r4,r4,r9
  e0bfa8:	d8c00415 	stw	r3,16(sp)
  e0bfac:	d9000215 	stw	r4,8(sp)
  e0bfb0:	d8800315 	stw	r2,12(sp)
  e0bfb4:	003fbf06 	br	e0beb4 <__floatunsidf+0x38>
  e0bfb8:	bdc7883a 	add	r3,r23,r23
  e0bfbc:	008007c4 	movi	r2,31
  e0bfc0:	1285c83a 	sub	r2,r2,r10
  e0bfc4:	1886983a 	sll	r3,r3,r2
  e0bfc8:	b2a8d83a 	srl	r20,r22,r10
  e0bfcc:	baaad83a 	srl	r21,r23,r10
  e0bfd0:	1d28b03a 	or	r20,r3,r20
  e0bfd4:	003fdf06 	br	e0bf54 <__floatunsidf+0xd8>
  e0bfd8:	b006d07a 	srli	r3,r22,1
  e0bfdc:	008007c4 	movi	r2,31
  e0bfe0:	1245c83a 	sub	r2,r2,r9
  e0bfe4:	1886d83a 	srl	r3,r3,r2
  e0bfe8:	ba62983a 	sll	r17,r23,r9
  e0bfec:	b260983a 	sll	r16,r22,r9
  e0bff0:	1c62b03a 	or	r17,r3,r17
  e0bff4:	003fcc06 	br	e0bf28 <__floatunsidf+0xac>
  e0bff8:	2006d07a 	srli	r3,r4,1
  e0bffc:	008007c4 	movi	r2,31
  e0c000:	1285c83a 	sub	r2,r2,r10
  e0c004:	18a6d83a 	srl	r19,r3,r2
  e0c008:	22a4983a 	sll	r18,r4,r10
  e0c00c:	003fd706 	br	e0bf6c <__floatunsidf+0xf0>

00e0c010 <udivmodsi4>:
  e0c010:	29001b2e 	bgeu	r5,r4,e0c080 <udivmodsi4+0x70>
  e0c014:	28001a16 	blt	r5,zero,e0c080 <udivmodsi4+0x70>
  e0c018:	00800044 	movi	r2,1
  e0c01c:	0007883a 	mov	r3,zero
  e0c020:	01c007c4 	movi	r7,31
  e0c024:	00000306 	br	e0c034 <udivmodsi4+0x24>
  e0c028:	19c01326 	beq	r3,r7,e0c078 <udivmodsi4+0x68>
  e0c02c:	18c00044 	addi	r3,r3,1
  e0c030:	28000416 	blt	r5,zero,e0c044 <udivmodsi4+0x34>
  e0c034:	294b883a 	add	r5,r5,r5
  e0c038:	1085883a 	add	r2,r2,r2
  e0c03c:	293ffa36 	bltu	r5,r4,e0c028 <udivmodsi4+0x18>
  e0c040:	10000d26 	beq	r2,zero,e0c078 <udivmodsi4+0x68>
  e0c044:	0007883a 	mov	r3,zero
  e0c048:	21400236 	bltu	r4,r5,e0c054 <udivmodsi4+0x44>
  e0c04c:	2149c83a 	sub	r4,r4,r5
  e0c050:	1886b03a 	or	r3,r3,r2
  e0c054:	1004d07a 	srli	r2,r2,1
  e0c058:	280ad07a 	srli	r5,r5,1
  e0c05c:	103ffa1e 	bne	r2,zero,e0c048 <udivmodsi4+0x38>
  e0c060:	30000226 	beq	r6,zero,e0c06c <udivmodsi4+0x5c>
  e0c064:	2005883a 	mov	r2,r4
  e0c068:	f800283a 	ret
  e0c06c:	1809883a 	mov	r4,r3
  e0c070:	2005883a 	mov	r2,r4
  e0c074:	f800283a 	ret
  e0c078:	0007883a 	mov	r3,zero
  e0c07c:	003ff806 	br	e0c060 <udivmodsi4+0x50>
  e0c080:	00800044 	movi	r2,1
  e0c084:	0007883a 	mov	r3,zero
  e0c088:	003fef06 	br	e0c048 <udivmodsi4+0x38>

00e0c08c <__divsi3>:
  e0c08c:	defffe04 	addi	sp,sp,-8
  e0c090:	dc000015 	stw	r16,0(sp)
  e0c094:	dfc00115 	stw	ra,4(sp)
  e0c098:	0021883a 	mov	r16,zero
  e0c09c:	20000c16 	blt	r4,zero,e0c0d0 <__divsi3+0x44>
  e0c0a0:	000d883a 	mov	r6,zero
  e0c0a4:	28000e16 	blt	r5,zero,e0c0e0 <__divsi3+0x54>
  e0c0a8:	0e0c0100 	call	e0c010 <udivmodsi4>
  e0c0ac:	1007883a 	mov	r3,r2
  e0c0b0:	8005003a 	cmpeq	r2,r16,zero
  e0c0b4:	1000011e 	bne	r2,zero,e0c0bc <__divsi3+0x30>
  e0c0b8:	00c7c83a 	sub	r3,zero,r3
  e0c0bc:	1805883a 	mov	r2,r3
  e0c0c0:	dfc00117 	ldw	ra,4(sp)
  e0c0c4:	dc000017 	ldw	r16,0(sp)
  e0c0c8:	dec00204 	addi	sp,sp,8
  e0c0cc:	f800283a 	ret
  e0c0d0:	0109c83a 	sub	r4,zero,r4
  e0c0d4:	04000044 	movi	r16,1
  e0c0d8:	000d883a 	mov	r6,zero
  e0c0dc:	283ff20e 	bge	r5,zero,e0c0a8 <__divsi3+0x1c>
  e0c0e0:	014bc83a 	sub	r5,zero,r5
  e0c0e4:	8021003a 	cmpeq	r16,r16,zero
  e0c0e8:	003fef06 	br	e0c0a8 <__divsi3+0x1c>

00e0c0ec <__modsi3>:
  e0c0ec:	deffff04 	addi	sp,sp,-4
  e0c0f0:	dfc00015 	stw	ra,0(sp)
  e0c0f4:	01800044 	movi	r6,1
  e0c0f8:	2807883a 	mov	r3,r5
  e0c0fc:	20000416 	blt	r4,zero,e0c110 <__modsi3+0x24>
  e0c100:	28000c16 	blt	r5,zero,e0c134 <__modsi3+0x48>
  e0c104:	dfc00017 	ldw	ra,0(sp)
  e0c108:	dec00104 	addi	sp,sp,4
  e0c10c:	0e0c0101 	jmpi	e0c010 <udivmodsi4>
  e0c110:	0109c83a 	sub	r4,zero,r4
  e0c114:	28000b16 	blt	r5,zero,e0c144 <__modsi3+0x58>
  e0c118:	180b883a 	mov	r5,r3
  e0c11c:	01800044 	movi	r6,1
  e0c120:	0e0c0100 	call	e0c010 <udivmodsi4>
  e0c124:	0085c83a 	sub	r2,zero,r2
  e0c128:	dfc00017 	ldw	ra,0(sp)
  e0c12c:	dec00104 	addi	sp,sp,4
  e0c130:	f800283a 	ret
  e0c134:	014bc83a 	sub	r5,zero,r5
  e0c138:	dfc00017 	ldw	ra,0(sp)
  e0c13c:	dec00104 	addi	sp,sp,4
  e0c140:	0e0c0101 	jmpi	e0c010 <udivmodsi4>
  e0c144:	0147c83a 	sub	r3,zero,r5
  e0c148:	003ff306 	br	e0c118 <__modsi3+0x2c>

00e0c14c <__udivsi3>:
  e0c14c:	000d883a 	mov	r6,zero
  e0c150:	0e0c0101 	jmpi	e0c010 <udivmodsi4>

00e0c154 <__umodsi3>:
  e0c154:	01800044 	movi	r6,1
  e0c158:	0e0c0101 	jmpi	e0c010 <udivmodsi4>

00e0c15c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  e0c15c:	defff804 	addi	sp,sp,-32
  e0c160:	dfc00715 	stw	ra,28(sp)
  e0c164:	df000615 	stw	fp,24(sp)
  e0c168:	df000604 	addi	fp,sp,24
  e0c16c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  e0c170:	e0bffc17 	ldw	r2,-16(fp)
  e0c174:	1004803a 	cmplt	r2,r2,zero
  e0c178:	1000081e 	bne	r2,zero,e0c19c <close+0x40>
  e0c17c:	e0bffc17 	ldw	r2,-16(fp)
  e0c180:	10800324 	muli	r2,r2,12
  e0c184:	1007883a 	mov	r3,r2
  e0c188:	00803874 	movhi	r2,225
  e0c18c:	10867504 	addi	r2,r2,6612
  e0c190:	1887883a 	add	r3,r3,r2
  e0c194:	e0ffff15 	stw	r3,-4(fp)
  e0c198:	00000106 	br	e0c1a0 <close+0x44>
  e0c19c:	e03fff15 	stw	zero,-4(fp)
  e0c1a0:	e0bfff17 	ldw	r2,-4(fp)
  e0c1a4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  e0c1a8:	e0bffb17 	ldw	r2,-20(fp)
  e0c1ac:	1005003a 	cmpeq	r2,r2,zero
  e0c1b0:	10001d1e 	bne	r2,zero,e0c228 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  e0c1b4:	e0bffb17 	ldw	r2,-20(fp)
  e0c1b8:	10800017 	ldw	r2,0(r2)
  e0c1bc:	10800417 	ldw	r2,16(r2)
  e0c1c0:	1005003a 	cmpeq	r2,r2,zero
  e0c1c4:	1000071e 	bne	r2,zero,e0c1e4 <close+0x88>
  e0c1c8:	e0bffb17 	ldw	r2,-20(fp)
  e0c1cc:	10800017 	ldw	r2,0(r2)
  e0c1d0:	10800417 	ldw	r2,16(r2)
  e0c1d4:	e13ffb17 	ldw	r4,-20(fp)
  e0c1d8:	103ee83a 	callr	r2
  e0c1dc:	e0bffe15 	stw	r2,-8(fp)
  e0c1e0:	00000106 	br	e0c1e8 <close+0x8c>
  e0c1e4:	e03ffe15 	stw	zero,-8(fp)
  e0c1e8:	e0bffe17 	ldw	r2,-8(fp)
  e0c1ec:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  e0c1f0:	e13ffc17 	ldw	r4,-16(fp)
  e0c1f4:	0e0c9a00 	call	e0c9a0 <alt_release_fd>
    if (rval < 0)
  e0c1f8:	e0bffa17 	ldw	r2,-24(fp)
  e0c1fc:	1004403a 	cmpge	r2,r2,zero
  e0c200:	1000071e 	bne	r2,zero,e0c220 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  e0c204:	0e0c2580 	call	e0c258 <alt_get_errno>
  e0c208:	e0fffa17 	ldw	r3,-24(fp)
  e0c20c:	00c7c83a 	sub	r3,zero,r3
  e0c210:	10c00015 	stw	r3,0(r2)
      return -1;
  e0c214:	00bfffc4 	movi	r2,-1
  e0c218:	e0bffd15 	stw	r2,-12(fp)
  e0c21c:	00000806 	br	e0c240 <close+0xe4>
    }
    return 0;
  e0c220:	e03ffd15 	stw	zero,-12(fp)
  e0c224:	00000606 	br	e0c240 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  e0c228:	0e0c2580 	call	e0c258 <alt_get_errno>
  e0c22c:	1007883a 	mov	r3,r2
  e0c230:	00801444 	movi	r2,81
  e0c234:	18800015 	stw	r2,0(r3)
    return -1;
  e0c238:	00bfffc4 	movi	r2,-1
  e0c23c:	e0bffd15 	stw	r2,-12(fp)
  e0c240:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  e0c244:	e037883a 	mov	sp,fp
  e0c248:	dfc00117 	ldw	ra,4(sp)
  e0c24c:	df000017 	ldw	fp,0(sp)
  e0c250:	dec00204 	addi	sp,sp,8
  e0c254:	f800283a 	ret

00e0c258 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e0c258:	defffd04 	addi	sp,sp,-12
  e0c25c:	dfc00215 	stw	ra,8(sp)
  e0c260:	df000115 	stw	fp,4(sp)
  e0c264:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e0c268:	00803874 	movhi	r2,225
  e0c26c:	108b5204 	addi	r2,r2,11592
  e0c270:	10800017 	ldw	r2,0(r2)
  e0c274:	1005003a 	cmpeq	r2,r2,zero
  e0c278:	1000061e 	bne	r2,zero,e0c294 <alt_get_errno+0x3c>
  e0c27c:	00803874 	movhi	r2,225
  e0c280:	108b5204 	addi	r2,r2,11592
  e0c284:	10800017 	ldw	r2,0(r2)
  e0c288:	103ee83a 	callr	r2
  e0c28c:	e0bfff15 	stw	r2,-4(fp)
  e0c290:	00000306 	br	e0c2a0 <alt_get_errno+0x48>
  e0c294:	00803874 	movhi	r2,225
  e0c298:	10925704 	addi	r2,r2,18780
  e0c29c:	e0bfff15 	stw	r2,-4(fp)
  e0c2a0:	e0bfff17 	ldw	r2,-4(fp)
}
  e0c2a4:	e037883a 	mov	sp,fp
  e0c2a8:	dfc00117 	ldw	ra,4(sp)
  e0c2ac:	df000017 	ldw	fp,0(sp)
  e0c2b0:	dec00204 	addi	sp,sp,8
  e0c2b4:	f800283a 	ret

00e0c2b8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  e0c2b8:	defffc04 	addi	sp,sp,-16
  e0c2bc:	df000315 	stw	fp,12(sp)
  e0c2c0:	df000304 	addi	fp,sp,12
  e0c2c4:	e13ffd15 	stw	r4,-12(fp)
  e0c2c8:	e17ffe15 	stw	r5,-8(fp)
  e0c2cc:	e1bfff15 	stw	r6,-4(fp)
  return len;
  e0c2d0:	e0bfff17 	ldw	r2,-4(fp)
}
  e0c2d4:	e037883a 	mov	sp,fp
  e0c2d8:	df000017 	ldw	fp,0(sp)
  e0c2dc:	dec00104 	addi	sp,sp,4
  e0c2e0:	f800283a 	ret

00e0c2e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  e0c2e4:	defff904 	addi	sp,sp,-28
  e0c2e8:	dfc00615 	stw	ra,24(sp)
  e0c2ec:	df000515 	stw	fp,20(sp)
  e0c2f0:	df000504 	addi	fp,sp,20
  e0c2f4:	e13ffc15 	stw	r4,-16(fp)
  e0c2f8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  e0c2fc:	e0bffc17 	ldw	r2,-16(fp)
  e0c300:	1004803a 	cmplt	r2,r2,zero
  e0c304:	1000081e 	bne	r2,zero,e0c328 <fstat+0x44>
  e0c308:	e0bffc17 	ldw	r2,-16(fp)
  e0c30c:	10800324 	muli	r2,r2,12
  e0c310:	1007883a 	mov	r3,r2
  e0c314:	00803874 	movhi	r2,225
  e0c318:	10867504 	addi	r2,r2,6612
  e0c31c:	1887883a 	add	r3,r3,r2
  e0c320:	e0ffff15 	stw	r3,-4(fp)
  e0c324:	00000106 	br	e0c32c <fstat+0x48>
  e0c328:	e03fff15 	stw	zero,-4(fp)
  e0c32c:	e0bfff17 	ldw	r2,-4(fp)
  e0c330:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  e0c334:	e0bffb17 	ldw	r2,-20(fp)
  e0c338:	1005003a 	cmpeq	r2,r2,zero
  e0c33c:	1000121e 	bne	r2,zero,e0c388 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  e0c340:	e0bffb17 	ldw	r2,-20(fp)
  e0c344:	10800017 	ldw	r2,0(r2)
  e0c348:	10800817 	ldw	r2,32(r2)
  e0c34c:	1005003a 	cmpeq	r2,r2,zero
  e0c350:	1000081e 	bne	r2,zero,e0c374 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  e0c354:	e0bffb17 	ldw	r2,-20(fp)
  e0c358:	10800017 	ldw	r2,0(r2)
  e0c35c:	10800817 	ldw	r2,32(r2)
  e0c360:	e13ffb17 	ldw	r4,-20(fp)
  e0c364:	e17ffd17 	ldw	r5,-12(fp)
  e0c368:	103ee83a 	callr	r2
  e0c36c:	e0bffe15 	stw	r2,-8(fp)
  e0c370:	00000b06 	br	e0c3a0 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  e0c374:	e0fffd17 	ldw	r3,-12(fp)
  e0c378:	00880004 	movi	r2,8192
  e0c37c:	18800115 	stw	r2,4(r3)
      return 0;
  e0c380:	e03ffe15 	stw	zero,-8(fp)
  e0c384:	00000606 	br	e0c3a0 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  e0c388:	0e0c3b80 	call	e0c3b8 <alt_get_errno>
  e0c38c:	1007883a 	mov	r3,r2
  e0c390:	00801444 	movi	r2,81
  e0c394:	18800015 	stw	r2,0(r3)
    return -1;
  e0c398:	00bfffc4 	movi	r2,-1
  e0c39c:	e0bffe15 	stw	r2,-8(fp)
  e0c3a0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  e0c3a4:	e037883a 	mov	sp,fp
  e0c3a8:	dfc00117 	ldw	ra,4(sp)
  e0c3ac:	df000017 	ldw	fp,0(sp)
  e0c3b0:	dec00204 	addi	sp,sp,8
  e0c3b4:	f800283a 	ret

00e0c3b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e0c3b8:	defffd04 	addi	sp,sp,-12
  e0c3bc:	dfc00215 	stw	ra,8(sp)
  e0c3c0:	df000115 	stw	fp,4(sp)
  e0c3c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e0c3c8:	00803874 	movhi	r2,225
  e0c3cc:	108b5204 	addi	r2,r2,11592
  e0c3d0:	10800017 	ldw	r2,0(r2)
  e0c3d4:	1005003a 	cmpeq	r2,r2,zero
  e0c3d8:	1000061e 	bne	r2,zero,e0c3f4 <alt_get_errno+0x3c>
  e0c3dc:	00803874 	movhi	r2,225
  e0c3e0:	108b5204 	addi	r2,r2,11592
  e0c3e4:	10800017 	ldw	r2,0(r2)
  e0c3e8:	103ee83a 	callr	r2
  e0c3ec:	e0bfff15 	stw	r2,-4(fp)
  e0c3f0:	00000306 	br	e0c400 <alt_get_errno+0x48>
  e0c3f4:	00803874 	movhi	r2,225
  e0c3f8:	10925704 	addi	r2,r2,18780
  e0c3fc:	e0bfff15 	stw	r2,-4(fp)
  e0c400:	e0bfff17 	ldw	r2,-4(fp)
}
  e0c404:	e037883a 	mov	sp,fp
  e0c408:	dfc00117 	ldw	ra,4(sp)
  e0c40c:	df000017 	ldw	fp,0(sp)
  e0c410:	dec00204 	addi	sp,sp,8
  e0c414:	f800283a 	ret

00e0c418 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  e0c418:	deffeb04 	addi	sp,sp,-84
  e0c41c:	dfc01415 	stw	ra,80(sp)
  e0c420:	df001315 	stw	fp,76(sp)
  e0c424:	df001304 	addi	fp,sp,76
  e0c428:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  e0c42c:	e0bffd17 	ldw	r2,-12(fp)
  e0c430:	1004803a 	cmplt	r2,r2,zero
  e0c434:	1000081e 	bne	r2,zero,e0c458 <isatty+0x40>
  e0c438:	e0bffd17 	ldw	r2,-12(fp)
  e0c43c:	10800324 	muli	r2,r2,12
  e0c440:	1007883a 	mov	r3,r2
  e0c444:	00803874 	movhi	r2,225
  e0c448:	10867504 	addi	r2,r2,6612
  e0c44c:	1887883a 	add	r3,r3,r2
  e0c450:	e0ffff15 	stw	r3,-4(fp)
  e0c454:	00000106 	br	e0c45c <isatty+0x44>
  e0c458:	e03fff15 	stw	zero,-4(fp)
  e0c45c:	e0bfff17 	ldw	r2,-4(fp)
  e0c460:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  e0c464:	e0bfed17 	ldw	r2,-76(fp)
  e0c468:	1005003a 	cmpeq	r2,r2,zero
  e0c46c:	10000f1e 	bne	r2,zero,e0c4ac <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  e0c470:	e0bfed17 	ldw	r2,-76(fp)
  e0c474:	10800017 	ldw	r2,0(r2)
  e0c478:	10800817 	ldw	r2,32(r2)
  e0c47c:	1004c03a 	cmpne	r2,r2,zero
  e0c480:	1000031e 	bne	r2,zero,e0c490 <isatty+0x78>
    {
      return 1;
  e0c484:	00800044 	movi	r2,1
  e0c488:	e0bffe15 	stw	r2,-8(fp)
  e0c48c:	00000c06 	br	e0c4c0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  e0c490:	e17fee04 	addi	r5,fp,-72
  e0c494:	e13ffd17 	ldw	r4,-12(fp)
  e0c498:	0e0c2e40 	call	e0c2e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  e0c49c:	e0bfef17 	ldw	r2,-68(fp)
  e0c4a0:	10880020 	cmpeqi	r2,r2,8192
  e0c4a4:	e0bffe15 	stw	r2,-8(fp)
  e0c4a8:	00000506 	br	e0c4c0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  e0c4ac:	0e0c4d80 	call	e0c4d8 <alt_get_errno>
  e0c4b0:	1007883a 	mov	r3,r2
  e0c4b4:	00801444 	movi	r2,81
  e0c4b8:	18800015 	stw	r2,0(r3)
    return 0;
  e0c4bc:	e03ffe15 	stw	zero,-8(fp)
  e0c4c0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  e0c4c4:	e037883a 	mov	sp,fp
  e0c4c8:	dfc00117 	ldw	ra,4(sp)
  e0c4cc:	df000017 	ldw	fp,0(sp)
  e0c4d0:	dec00204 	addi	sp,sp,8
  e0c4d4:	f800283a 	ret

00e0c4d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e0c4d8:	defffd04 	addi	sp,sp,-12
  e0c4dc:	dfc00215 	stw	ra,8(sp)
  e0c4e0:	df000115 	stw	fp,4(sp)
  e0c4e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e0c4e8:	00803874 	movhi	r2,225
  e0c4ec:	108b5204 	addi	r2,r2,11592
  e0c4f0:	10800017 	ldw	r2,0(r2)
  e0c4f4:	1005003a 	cmpeq	r2,r2,zero
  e0c4f8:	1000061e 	bne	r2,zero,e0c514 <alt_get_errno+0x3c>
  e0c4fc:	00803874 	movhi	r2,225
  e0c500:	108b5204 	addi	r2,r2,11592
  e0c504:	10800017 	ldw	r2,0(r2)
  e0c508:	103ee83a 	callr	r2
  e0c50c:	e0bfff15 	stw	r2,-4(fp)
  e0c510:	00000306 	br	e0c520 <alt_get_errno+0x48>
  e0c514:	00803874 	movhi	r2,225
  e0c518:	10925704 	addi	r2,r2,18780
  e0c51c:	e0bfff15 	stw	r2,-4(fp)
  e0c520:	e0bfff17 	ldw	r2,-4(fp)
}
  e0c524:	e037883a 	mov	sp,fp
  e0c528:	dfc00117 	ldw	ra,4(sp)
  e0c52c:	df000017 	ldw	fp,0(sp)
  e0c530:	dec00204 	addi	sp,sp,8
  e0c534:	f800283a 	ret

00e0c538 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  e0c538:	defffe04 	addi	sp,sp,-8
  e0c53c:	dfc00115 	stw	ra,4(sp)
  e0c540:	df000015 	stw	fp,0(sp)
  e0c544:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  e0c548:	01003874 	movhi	r4,225
  e0c54c:	210b5b04 	addi	r4,r4,11628
  e0c550:	01403874 	movhi	r5,225
  e0c554:	29446604 	addi	r5,r5,4504
  e0c558:	01803874 	movhi	r6,225
  e0c55c:	318b5b04 	addi	r6,r6,11628
  e0c560:	0e0c5b80 	call	e0c5b8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  e0c564:	01003834 	movhi	r4,224
  e0c568:	21000804 	addi	r4,r4,32
  e0c56c:	01403834 	movhi	r5,224
  e0c570:	29400804 	addi	r5,r5,32
  e0c574:	01803834 	movhi	r6,224
  e0c578:	31806d04 	addi	r6,r6,436
  e0c57c:	0e0c5b80 	call	e0c5b8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  e0c580:	01003874 	movhi	r4,225
  e0c584:	21032504 	addi	r4,r4,3220
  e0c588:	01403874 	movhi	r5,225
  e0c58c:	29432504 	addi	r5,r5,3220
  e0c590:	01803874 	movhi	r6,225
  e0c594:	31846604 	addi	r6,r6,4504
  e0c598:	0e0c5b80 	call	e0c5b8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  e0c59c:	0e0fa400 	call	e0fa40 <alt_dcache_flush_all>
  alt_icache_flush_all();
  e0c5a0:	0e0fcf40 	call	e0fcf4 <alt_icache_flush_all>
}
  e0c5a4:	e037883a 	mov	sp,fp
  e0c5a8:	dfc00117 	ldw	ra,4(sp)
  e0c5ac:	df000017 	ldw	fp,0(sp)
  e0c5b0:	dec00204 	addi	sp,sp,8
  e0c5b4:	f800283a 	ret

00e0c5b8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  e0c5b8:	defffc04 	addi	sp,sp,-16
  e0c5bc:	df000315 	stw	fp,12(sp)
  e0c5c0:	df000304 	addi	fp,sp,12
  e0c5c4:	e13ffd15 	stw	r4,-12(fp)
  e0c5c8:	e17ffe15 	stw	r5,-8(fp)
  e0c5cc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  e0c5d0:	e0fffe17 	ldw	r3,-8(fp)
  e0c5d4:	e0bffd17 	ldw	r2,-12(fp)
  e0c5d8:	18800e26 	beq	r3,r2,e0c614 <alt_load_section+0x5c>
  {
    while( to != end )
  e0c5dc:	00000a06 	br	e0c608 <alt_load_section+0x50>
    {
      *to++ = *from++;
  e0c5e0:	e0bffd17 	ldw	r2,-12(fp)
  e0c5e4:	10c00017 	ldw	r3,0(r2)
  e0c5e8:	e0bffe17 	ldw	r2,-8(fp)
  e0c5ec:	10c00015 	stw	r3,0(r2)
  e0c5f0:	e0bffe17 	ldw	r2,-8(fp)
  e0c5f4:	10800104 	addi	r2,r2,4
  e0c5f8:	e0bffe15 	stw	r2,-8(fp)
  e0c5fc:	e0bffd17 	ldw	r2,-12(fp)
  e0c600:	10800104 	addi	r2,r2,4
  e0c604:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  e0c608:	e0fffe17 	ldw	r3,-8(fp)
  e0c60c:	e0bfff17 	ldw	r2,-4(fp)
  e0c610:	18bff31e 	bne	r3,r2,e0c5e0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  e0c614:	e037883a 	mov	sp,fp
  e0c618:	df000017 	ldw	fp,0(sp)
  e0c61c:	dec00104 	addi	sp,sp,4
  e0c620:	f800283a 	ret

00e0c624 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  e0c624:	defff804 	addi	sp,sp,-32
  e0c628:	dfc00715 	stw	ra,28(sp)
  e0c62c:	df000615 	stw	fp,24(sp)
  e0c630:	df000604 	addi	fp,sp,24
  e0c634:	e13ffc15 	stw	r4,-16(fp)
  e0c638:	e17ffd15 	stw	r5,-12(fp)
  e0c63c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  e0c640:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  e0c644:	e0bffc17 	ldw	r2,-16(fp)
  e0c648:	1004803a 	cmplt	r2,r2,zero
  e0c64c:	1000081e 	bne	r2,zero,e0c670 <lseek+0x4c>
  e0c650:	e0bffc17 	ldw	r2,-16(fp)
  e0c654:	10800324 	muli	r2,r2,12
  e0c658:	1007883a 	mov	r3,r2
  e0c65c:	00803874 	movhi	r2,225
  e0c660:	10867504 	addi	r2,r2,6612
  e0c664:	1887883a 	add	r3,r3,r2
  e0c668:	e0ffff15 	stw	r3,-4(fp)
  e0c66c:	00000106 	br	e0c674 <lseek+0x50>
  e0c670:	e03fff15 	stw	zero,-4(fp)
  e0c674:	e0bfff17 	ldw	r2,-4(fp)
  e0c678:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  e0c67c:	e0bffb17 	ldw	r2,-20(fp)
  e0c680:	1005003a 	cmpeq	r2,r2,zero
  e0c684:	1000111e 	bne	r2,zero,e0c6cc <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  e0c688:	e0bffb17 	ldw	r2,-20(fp)
  e0c68c:	10800017 	ldw	r2,0(r2)
  e0c690:	10800717 	ldw	r2,28(r2)
  e0c694:	1005003a 	cmpeq	r2,r2,zero
  e0c698:	1000091e 	bne	r2,zero,e0c6c0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  e0c69c:	e0bffb17 	ldw	r2,-20(fp)
  e0c6a0:	10800017 	ldw	r2,0(r2)
  e0c6a4:	10800717 	ldw	r2,28(r2)
  e0c6a8:	e13ffb17 	ldw	r4,-20(fp)
  e0c6ac:	e17ffd17 	ldw	r5,-12(fp)
  e0c6b0:	e1bffe17 	ldw	r6,-8(fp)
  e0c6b4:	103ee83a 	callr	r2
  e0c6b8:	e0bffa15 	stw	r2,-24(fp)
  e0c6bc:	00000506 	br	e0c6d4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  e0c6c0:	00bfde84 	movi	r2,-134
  e0c6c4:	e0bffa15 	stw	r2,-24(fp)
  e0c6c8:	00000206 	br	e0c6d4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  e0c6cc:	00bfebc4 	movi	r2,-81
  e0c6d0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  e0c6d4:	e0bffa17 	ldw	r2,-24(fp)
  e0c6d8:	1004403a 	cmpge	r2,r2,zero
  e0c6dc:	1000071e 	bne	r2,zero,e0c6fc <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  e0c6e0:	0e0c7140 	call	e0c714 <alt_get_errno>
  e0c6e4:	1007883a 	mov	r3,r2
  e0c6e8:	e0bffa17 	ldw	r2,-24(fp)
  e0c6ec:	0085c83a 	sub	r2,zero,r2
  e0c6f0:	18800015 	stw	r2,0(r3)
    rc = -1;
  e0c6f4:	00bfffc4 	movi	r2,-1
  e0c6f8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  e0c6fc:	e0bffa17 	ldw	r2,-24(fp)
}
  e0c700:	e037883a 	mov	sp,fp
  e0c704:	dfc00117 	ldw	ra,4(sp)
  e0c708:	df000017 	ldw	fp,0(sp)
  e0c70c:	dec00204 	addi	sp,sp,8
  e0c710:	f800283a 	ret

00e0c714 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e0c714:	defffd04 	addi	sp,sp,-12
  e0c718:	dfc00215 	stw	ra,8(sp)
  e0c71c:	df000115 	stw	fp,4(sp)
  e0c720:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e0c724:	00803874 	movhi	r2,225
  e0c728:	108b5204 	addi	r2,r2,11592
  e0c72c:	10800017 	ldw	r2,0(r2)
  e0c730:	1005003a 	cmpeq	r2,r2,zero
  e0c734:	1000061e 	bne	r2,zero,e0c750 <alt_get_errno+0x3c>
  e0c738:	00803874 	movhi	r2,225
  e0c73c:	108b5204 	addi	r2,r2,11592
  e0c740:	10800017 	ldw	r2,0(r2)
  e0c744:	103ee83a 	callr	r2
  e0c748:	e0bfff15 	stw	r2,-4(fp)
  e0c74c:	00000306 	br	e0c75c <alt_get_errno+0x48>
  e0c750:	00803874 	movhi	r2,225
  e0c754:	10925704 	addi	r2,r2,18780
  e0c758:	e0bfff15 	stw	r2,-4(fp)
  e0c75c:	e0bfff17 	ldw	r2,-4(fp)
}
  e0c760:	e037883a 	mov	sp,fp
  e0c764:	dfc00117 	ldw	ra,4(sp)
  e0c768:	df000017 	ldw	fp,0(sp)
  e0c76c:	dec00204 	addi	sp,sp,8
  e0c770:	f800283a 	ret

00e0c774 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  e0c774:	defffd04 	addi	sp,sp,-12
  e0c778:	dfc00215 	stw	ra,8(sp)
  e0c77c:	df000115 	stw	fp,4(sp)
  e0c780:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  e0c784:	0009883a 	mov	r4,zero
  e0c788:	0e0cc3c0 	call	e0cc3c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  e0c78c:	0e0cc700 	call	e0cc70 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  e0c790:	01003874 	movhi	r4,225
  e0c794:	21041404 	addi	r4,r4,4176
  e0c798:	01403874 	movhi	r5,225
  e0c79c:	29441404 	addi	r5,r5,4176
  e0c7a0:	01803874 	movhi	r6,225
  e0c7a4:	31841404 	addi	r6,r6,4176
  e0c7a8:	0e100b40 	call	e100b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  e0c7ac:	0e0fb980 	call	e0fb98 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  e0c7b0:	01003874 	movhi	r4,225
  e0c7b4:	213eff04 	addi	r4,r4,-1028
  e0c7b8:	0e1081c0 	call	e1081c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  e0c7bc:	d1271a17 	ldw	r4,-25496(gp)
  e0c7c0:	d1671b17 	ldw	r5,-25492(gp)
  e0c7c4:	d1a71c17 	ldw	r6,-25488(gp)
  e0c7c8:	0e006e80 	call	e006e8 <main>
  e0c7cc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  e0c7d0:	01000044 	movi	r4,1
  e0c7d4:	0e0c15c0 	call	e0c15c <close>
  exit (result);
  e0c7d8:	e13fff17 	ldw	r4,-4(fp)
  e0c7dc:	0e108300 	call	e10830 <exit>

00e0c7e0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  e0c7e0:	defffe04 	addi	sp,sp,-8
  e0c7e4:	df000115 	stw	fp,4(sp)
  e0c7e8:	df000104 	addi	fp,sp,4
  e0c7ec:	e13fff15 	stw	r4,-4(fp)
}
  e0c7f0:	e037883a 	mov	sp,fp
  e0c7f4:	df000017 	ldw	fp,0(sp)
  e0c7f8:	dec00104 	addi	sp,sp,4
  e0c7fc:	f800283a 	ret

00e0c800 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  e0c800:	defffe04 	addi	sp,sp,-8
  e0c804:	df000115 	stw	fp,4(sp)
  e0c808:	df000104 	addi	fp,sp,4
  e0c80c:	e13fff15 	stw	r4,-4(fp)
}
  e0c810:	e037883a 	mov	sp,fp
  e0c814:	df000017 	ldw	fp,0(sp)
  e0c818:	dec00104 	addi	sp,sp,4
  e0c81c:	f800283a 	ret

00e0c820 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  e0c820:	defff704 	addi	sp,sp,-36
  e0c824:	dfc00815 	stw	ra,32(sp)
  e0c828:	df000715 	stw	fp,28(sp)
  e0c82c:	df000704 	addi	fp,sp,28
  e0c830:	e13ffb15 	stw	r4,-20(fp)
  e0c834:	e17ffc15 	stw	r5,-16(fp)
  e0c838:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  e0c83c:	e0bffb17 	ldw	r2,-20(fp)
  e0c840:	1004803a 	cmplt	r2,r2,zero
  e0c844:	1000081e 	bne	r2,zero,e0c868 <read+0x48>
  e0c848:	e0bffb17 	ldw	r2,-20(fp)
  e0c84c:	10800324 	muli	r2,r2,12
  e0c850:	1007883a 	mov	r3,r2
  e0c854:	00803874 	movhi	r2,225
  e0c858:	10867504 	addi	r2,r2,6612
  e0c85c:	1887883a 	add	r3,r3,r2
  e0c860:	e0ffff15 	stw	r3,-4(fp)
  e0c864:	00000106 	br	e0c86c <read+0x4c>
  e0c868:	e03fff15 	stw	zero,-4(fp)
  e0c86c:	e0bfff17 	ldw	r2,-4(fp)
  e0c870:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  e0c874:	e0bffa17 	ldw	r2,-24(fp)
  e0c878:	1005003a 	cmpeq	r2,r2,zero
  e0c87c:	1000241e 	bne	r2,zero,e0c910 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  e0c880:	e0bffa17 	ldw	r2,-24(fp)
  e0c884:	10800217 	ldw	r2,8(r2)
  e0c888:	108000cc 	andi	r2,r2,3
  e0c88c:	10800060 	cmpeqi	r2,r2,1
  e0c890:	10001a1e 	bne	r2,zero,e0c8fc <read+0xdc>
  e0c894:	e0bffa17 	ldw	r2,-24(fp)
  e0c898:	10800017 	ldw	r2,0(r2)
  e0c89c:	10800517 	ldw	r2,20(r2)
  e0c8a0:	1005003a 	cmpeq	r2,r2,zero
  e0c8a4:	1000151e 	bne	r2,zero,e0c8fc <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  e0c8a8:	e0bffa17 	ldw	r2,-24(fp)
  e0c8ac:	10800017 	ldw	r2,0(r2)
  e0c8b0:	10800517 	ldw	r2,20(r2)
  e0c8b4:	e17ffc17 	ldw	r5,-16(fp)
  e0c8b8:	e1bffd17 	ldw	r6,-12(fp)
  e0c8bc:	e13ffa17 	ldw	r4,-24(fp)
  e0c8c0:	103ee83a 	callr	r2
  e0c8c4:	e0bff915 	stw	r2,-28(fp)
  e0c8c8:	e0bff917 	ldw	r2,-28(fp)
  e0c8cc:	1004403a 	cmpge	r2,r2,zero
  e0c8d0:	1000071e 	bne	r2,zero,e0c8f0 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  e0c8d4:	0e0c9400 	call	e0c940 <alt_get_errno>
  e0c8d8:	e0fff917 	ldw	r3,-28(fp)
  e0c8dc:	00c7c83a 	sub	r3,zero,r3
  e0c8e0:	10c00015 	stw	r3,0(r2)
          return -1;
  e0c8e4:	00bfffc4 	movi	r2,-1
  e0c8e8:	e0bffe15 	stw	r2,-8(fp)
  e0c8ec:	00000e06 	br	e0c928 <read+0x108>
        }
        return rval;
  e0c8f0:	e0bff917 	ldw	r2,-28(fp)
  e0c8f4:	e0bffe15 	stw	r2,-8(fp)
  e0c8f8:	00000b06 	br	e0c928 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  e0c8fc:	0e0c9400 	call	e0c940 <alt_get_errno>
  e0c900:	1007883a 	mov	r3,r2
  e0c904:	00800344 	movi	r2,13
  e0c908:	18800015 	stw	r2,0(r3)
  e0c90c:	00000406 	br	e0c920 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  e0c910:	0e0c9400 	call	e0c940 <alt_get_errno>
  e0c914:	1007883a 	mov	r3,r2
  e0c918:	00801444 	movi	r2,81
  e0c91c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  e0c920:	00bfffc4 	movi	r2,-1
  e0c924:	e0bffe15 	stw	r2,-8(fp)
  e0c928:	e0bffe17 	ldw	r2,-8(fp)
}
  e0c92c:	e037883a 	mov	sp,fp
  e0c930:	dfc00117 	ldw	ra,4(sp)
  e0c934:	df000017 	ldw	fp,0(sp)
  e0c938:	dec00204 	addi	sp,sp,8
  e0c93c:	f800283a 	ret

00e0c940 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e0c940:	defffd04 	addi	sp,sp,-12
  e0c944:	dfc00215 	stw	ra,8(sp)
  e0c948:	df000115 	stw	fp,4(sp)
  e0c94c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e0c950:	00803874 	movhi	r2,225
  e0c954:	108b5204 	addi	r2,r2,11592
  e0c958:	10800017 	ldw	r2,0(r2)
  e0c95c:	1005003a 	cmpeq	r2,r2,zero
  e0c960:	1000061e 	bne	r2,zero,e0c97c <alt_get_errno+0x3c>
  e0c964:	00803874 	movhi	r2,225
  e0c968:	108b5204 	addi	r2,r2,11592
  e0c96c:	10800017 	ldw	r2,0(r2)
  e0c970:	103ee83a 	callr	r2
  e0c974:	e0bfff15 	stw	r2,-4(fp)
  e0c978:	00000306 	br	e0c988 <alt_get_errno+0x48>
  e0c97c:	00803874 	movhi	r2,225
  e0c980:	10925704 	addi	r2,r2,18780
  e0c984:	e0bfff15 	stw	r2,-4(fp)
  e0c988:	e0bfff17 	ldw	r2,-4(fp)
}
  e0c98c:	e037883a 	mov	sp,fp
  e0c990:	dfc00117 	ldw	ra,4(sp)
  e0c994:	df000017 	ldw	fp,0(sp)
  e0c998:	dec00204 	addi	sp,sp,8
  e0c99c:	f800283a 	ret

00e0c9a0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  e0c9a0:	defffe04 	addi	sp,sp,-8
  e0c9a4:	df000115 	stw	fp,4(sp)
  e0c9a8:	df000104 	addi	fp,sp,4
  e0c9ac:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  e0c9b0:	e0bfff17 	ldw	r2,-4(fp)
  e0c9b4:	108000d0 	cmplti	r2,r2,3
  e0c9b8:	10000d1e 	bne	r2,zero,e0c9f0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  e0c9bc:	e0bfff17 	ldw	r2,-4(fp)
  e0c9c0:	00c03874 	movhi	r3,225
  e0c9c4:	18c67504 	addi	r3,r3,6612
  e0c9c8:	10800324 	muli	r2,r2,12
  e0c9cc:	10c5883a 	add	r2,r2,r3
  e0c9d0:	10800204 	addi	r2,r2,8
  e0c9d4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  e0c9d8:	e0bfff17 	ldw	r2,-4(fp)
  e0c9dc:	00c03874 	movhi	r3,225
  e0c9e0:	18c67504 	addi	r3,r3,6612
  e0c9e4:	10800324 	muli	r2,r2,12
  e0c9e8:	10c5883a 	add	r2,r2,r3
  e0c9ec:	10000015 	stw	zero,0(r2)
  }
}
  e0c9f0:	e037883a 	mov	sp,fp
  e0c9f4:	df000017 	ldw	fp,0(sp)
  e0c9f8:	dec00104 	addi	sp,sp,4
  e0c9fc:	f800283a 	ret

00e0ca00 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  e0ca00:	defff804 	addi	sp,sp,-32
  e0ca04:	df000715 	stw	fp,28(sp)
  e0ca08:	df000704 	addi	fp,sp,28
  e0ca0c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  e0ca10:	0005303a 	rdctl	r2,status
  e0ca14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  e0ca18:	e0fffb17 	ldw	r3,-20(fp)
  e0ca1c:	00bfff84 	movi	r2,-2
  e0ca20:	1884703a 	and	r2,r3,r2
  e0ca24:	1001703a 	wrctl	status,r2
  
  return context;
  e0ca28:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  e0ca2c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  e0ca30:	d0a01517 	ldw	r2,-32684(gp)
  e0ca34:	10c000c4 	addi	r3,r2,3
  e0ca38:	00bfff04 	movi	r2,-4
  e0ca3c:	1884703a 	and	r2,r3,r2
  e0ca40:	d0a01515 	stw	r2,-32684(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  e0ca44:	d0e01517 	ldw	r3,-32684(gp)
  e0ca48:	e0bffe17 	ldw	r2,-8(fp)
  e0ca4c:	1887883a 	add	r3,r3,r2
  e0ca50:	00804034 	movhi	r2,256
  e0ca54:	10800004 	addi	r2,r2,0
  e0ca58:	10c0072e 	bgeu	r2,r3,e0ca78 <sbrk+0x78>
  e0ca5c:	e0bffd17 	ldw	r2,-12(fp)
  e0ca60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  e0ca64:	e0bffa17 	ldw	r2,-24(fp)
  e0ca68:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  e0ca6c:	00bfffc4 	movi	r2,-1
  e0ca70:	e0bfff15 	stw	r2,-4(fp)
  e0ca74:	00000c06 	br	e0caa8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  e0ca78:	d0a01517 	ldw	r2,-32684(gp)
  e0ca7c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  e0ca80:	d0e01517 	ldw	r3,-32684(gp)
  e0ca84:	e0bffe17 	ldw	r2,-8(fp)
  e0ca88:	1885883a 	add	r2,r3,r2
  e0ca8c:	d0a01515 	stw	r2,-32684(gp)
  e0ca90:	e0bffd17 	ldw	r2,-12(fp)
  e0ca94:	e0bff915 	stw	r2,-28(fp)
  e0ca98:	e0bff917 	ldw	r2,-28(fp)
  e0ca9c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  e0caa0:	e0bffc17 	ldw	r2,-16(fp)
  e0caa4:	e0bfff15 	stw	r2,-4(fp)
  e0caa8:	e0bfff17 	ldw	r2,-4(fp)
} 
  e0caac:	e037883a 	mov	sp,fp
  e0cab0:	df000017 	ldw	fp,0(sp)
  e0cab4:	dec00104 	addi	sp,sp,4
  e0cab8:	f800283a 	ret

00e0cabc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  e0cabc:	defff704 	addi	sp,sp,-36
  e0cac0:	dfc00815 	stw	ra,32(sp)
  e0cac4:	df000715 	stw	fp,28(sp)
  e0cac8:	df000704 	addi	fp,sp,28
  e0cacc:	e13ffb15 	stw	r4,-20(fp)
  e0cad0:	e17ffc15 	stw	r5,-16(fp)
  e0cad4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  e0cad8:	e0bffb17 	ldw	r2,-20(fp)
  e0cadc:	1004803a 	cmplt	r2,r2,zero
  e0cae0:	1000081e 	bne	r2,zero,e0cb04 <write+0x48>
  e0cae4:	e0bffb17 	ldw	r2,-20(fp)
  e0cae8:	10800324 	muli	r2,r2,12
  e0caec:	1007883a 	mov	r3,r2
  e0caf0:	00803874 	movhi	r2,225
  e0caf4:	10867504 	addi	r2,r2,6612
  e0caf8:	1887883a 	add	r3,r3,r2
  e0cafc:	e0ffff15 	stw	r3,-4(fp)
  e0cb00:	00000106 	br	e0cb08 <write+0x4c>
  e0cb04:	e03fff15 	stw	zero,-4(fp)
  e0cb08:	e0bfff17 	ldw	r2,-4(fp)
  e0cb0c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  e0cb10:	e0bffa17 	ldw	r2,-24(fp)
  e0cb14:	1005003a 	cmpeq	r2,r2,zero
  e0cb18:	1000241e 	bne	r2,zero,e0cbac <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  e0cb1c:	e0bffa17 	ldw	r2,-24(fp)
  e0cb20:	10800217 	ldw	r2,8(r2)
  e0cb24:	108000cc 	andi	r2,r2,3
  e0cb28:	1005003a 	cmpeq	r2,r2,zero
  e0cb2c:	10001a1e 	bne	r2,zero,e0cb98 <write+0xdc>
  e0cb30:	e0bffa17 	ldw	r2,-24(fp)
  e0cb34:	10800017 	ldw	r2,0(r2)
  e0cb38:	10800617 	ldw	r2,24(r2)
  e0cb3c:	1005003a 	cmpeq	r2,r2,zero
  e0cb40:	1000151e 	bne	r2,zero,e0cb98 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  e0cb44:	e0bffa17 	ldw	r2,-24(fp)
  e0cb48:	10800017 	ldw	r2,0(r2)
  e0cb4c:	10800617 	ldw	r2,24(r2)
  e0cb50:	e17ffc17 	ldw	r5,-16(fp)
  e0cb54:	e1bffd17 	ldw	r6,-12(fp)
  e0cb58:	e13ffa17 	ldw	r4,-24(fp)
  e0cb5c:	103ee83a 	callr	r2
  e0cb60:	e0bff915 	stw	r2,-28(fp)
  e0cb64:	e0bff917 	ldw	r2,-28(fp)
  e0cb68:	1004403a 	cmpge	r2,r2,zero
  e0cb6c:	1000071e 	bne	r2,zero,e0cb8c <write+0xd0>
      {
        ALT_ERRNO = -rval;
  e0cb70:	0e0cbdc0 	call	e0cbdc <alt_get_errno>
  e0cb74:	e0fff917 	ldw	r3,-28(fp)
  e0cb78:	00c7c83a 	sub	r3,zero,r3
  e0cb7c:	10c00015 	stw	r3,0(r2)
        return -1;
  e0cb80:	00bfffc4 	movi	r2,-1
  e0cb84:	e0bffe15 	stw	r2,-8(fp)
  e0cb88:	00000e06 	br	e0cbc4 <write+0x108>
      }
      return rval;
  e0cb8c:	e0bff917 	ldw	r2,-28(fp)
  e0cb90:	e0bffe15 	stw	r2,-8(fp)
  e0cb94:	00000b06 	br	e0cbc4 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  e0cb98:	0e0cbdc0 	call	e0cbdc <alt_get_errno>
  e0cb9c:	1007883a 	mov	r3,r2
  e0cba0:	00800344 	movi	r2,13
  e0cba4:	18800015 	stw	r2,0(r3)
  e0cba8:	00000406 	br	e0cbbc <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  e0cbac:	0e0cbdc0 	call	e0cbdc <alt_get_errno>
  e0cbb0:	1007883a 	mov	r3,r2
  e0cbb4:	00801444 	movi	r2,81
  e0cbb8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  e0cbbc:	00bfffc4 	movi	r2,-1
  e0cbc0:	e0bffe15 	stw	r2,-8(fp)
  e0cbc4:	e0bffe17 	ldw	r2,-8(fp)
}
  e0cbc8:	e037883a 	mov	sp,fp
  e0cbcc:	dfc00117 	ldw	ra,4(sp)
  e0cbd0:	df000017 	ldw	fp,0(sp)
  e0cbd4:	dec00204 	addi	sp,sp,8
  e0cbd8:	f800283a 	ret

00e0cbdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e0cbdc:	defffd04 	addi	sp,sp,-12
  e0cbe0:	dfc00215 	stw	ra,8(sp)
  e0cbe4:	df000115 	stw	fp,4(sp)
  e0cbe8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e0cbec:	00803874 	movhi	r2,225
  e0cbf0:	108b5204 	addi	r2,r2,11592
  e0cbf4:	10800017 	ldw	r2,0(r2)
  e0cbf8:	1005003a 	cmpeq	r2,r2,zero
  e0cbfc:	1000061e 	bne	r2,zero,e0cc18 <alt_get_errno+0x3c>
  e0cc00:	00803874 	movhi	r2,225
  e0cc04:	108b5204 	addi	r2,r2,11592
  e0cc08:	10800017 	ldw	r2,0(r2)
  e0cc0c:	103ee83a 	callr	r2
  e0cc10:	e0bfff15 	stw	r2,-4(fp)
  e0cc14:	00000306 	br	e0cc24 <alt_get_errno+0x48>
  e0cc18:	00803874 	movhi	r2,225
  e0cc1c:	10925704 	addi	r2,r2,18780
  e0cc20:	e0bfff15 	stw	r2,-4(fp)
  e0cc24:	e0bfff17 	ldw	r2,-4(fp)
}
  e0cc28:	e037883a 	mov	sp,fp
  e0cc2c:	dfc00117 	ldw	ra,4(sp)
  e0cc30:	df000017 	ldw	fp,0(sp)
  e0cc34:	dec00204 	addi	sp,sp,8
  e0cc38:	f800283a 	ret

00e0cc3c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  e0cc3c:	defffd04 	addi	sp,sp,-12
  e0cc40:	dfc00215 	stw	ra,8(sp)
  e0cc44:	df000115 	stw	fp,4(sp)
  e0cc48:	df000104 	addi	fp,sp,4
  e0cc4c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_3, cpu_3);
  e0cc50:	0e105940 	call	e10594 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  e0cc54:	00800044 	movi	r2,1
  e0cc58:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  e0cc5c:	e037883a 	mov	sp,fp
  e0cc60:	dfc00117 	ldw	ra,4(sp)
  e0cc64:	df000017 	ldw	fp,0(sp)
  e0cc68:	dec00204 	addi	sp,sp,8
  e0cc6c:	f800283a 	ret

00e0cc70 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  e0cc70:	defffd04 	addi	sp,sp,-12
  e0cc74:	dfc00215 	stw	ra,8(sp)
  e0cc78:	df000115 	stw	fp,4(sp)
  e0cc7c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_3, jtag_uart_3);
  e0cc80:	01003874 	movhi	r4,225
  e0cc84:	2106df04 	addi	r4,r4,7036
  e0cc88:	000b883a 	mov	r5,zero
  e0cc8c:	01800044 	movi	r6,1
  e0cc90:	0e0d0680 	call	e0d068 <altera_avalon_jtag_uart_init>
  e0cc94:	01003874 	movhi	r4,225
  e0cc98:	2106d504 	addi	r4,r4,6996
  e0cc9c:	0e0cee80 	call	e0cee8 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
  e0cca0:	01003874 	movhi	r4,225
  e0cca4:	210aed04 	addi	r4,r4,11188
  e0cca8:	0e0d9cc0 	call	e0d9cc <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
  e0ccac:	01003874 	movhi	r4,225
  e0ccb0:	210afc04 	addi	r4,r4,11248
  e0ccb4:	0e0d9cc0 	call	e0d9cc <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
  e0ccb8:	01003874 	movhi	r4,225
  e0ccbc:	210b0b04 	addi	r4,r4,11308
  e0ccc0:	0e0d9cc0 	call	e0d9cc <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
  e0ccc4:	01003874 	movhi	r4,225
  e0ccc8:	210b1a04 	addi	r4,r4,11368
  e0cccc:	0e0d9cc0 	call	e0d9cc <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
  e0ccd0:	0007883a 	mov	r3,zero
  e0ccd4:	00800044 	movi	r2,1
  e0ccd8:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  e0ccdc:	00803874 	movhi	r2,225
  e0cce0:	108b2904 	addi	r2,r2,11428
  e0cce4:	10800a17 	ldw	r2,40(r2)
  e0cce8:	10800017 	ldw	r2,0(r2)
  e0ccec:	1007883a 	mov	r3,r2
  e0ccf0:	00803874 	movhi	r2,225
  e0ccf4:	108b2904 	addi	r2,r2,11428
  e0ccf8:	10c00b15 	stw	r3,44(r2)
  e0ccfc:	00803874 	movhi	r2,225
  e0cd00:	108b2904 	addi	r2,r2,11428
  e0cd04:	10800a17 	ldw	r2,40(r2)
  e0cd08:	10800104 	addi	r2,r2,4
  e0cd0c:	10800017 	ldw	r2,0(r2)
  e0cd10:	1007883a 	mov	r3,r2
  e0cd14:	00803874 	movhi	r2,225
  e0cd18:	108b2904 	addi	r2,r2,11428
  e0cd1c:	10c00c15 	stw	r3,48(r2)
  e0cd20:	00803874 	movhi	r2,225
  e0cd24:	108b2904 	addi	r2,r2,11428
  e0cd28:	10800a17 	ldw	r2,40(r2)
  e0cd2c:	10800204 	addi	r2,r2,8
  e0cd30:	10800017 	ldw	r2,0(r2)
  e0cd34:	10ffffcc 	andi	r3,r2,65535
  e0cd38:	00803874 	movhi	r2,225
  e0cd3c:	108b2904 	addi	r2,r2,11428
  e0cd40:	10c00f15 	stw	r3,60(r2)
  e0cd44:	00803874 	movhi	r2,225
  e0cd48:	108b2904 	addi	r2,r2,11428
  e0cd4c:	10800a17 	ldw	r2,40(r2)
  e0cd50:	10800204 	addi	r2,r2,8
  e0cd54:	10800017 	ldw	r2,0(r2)
  e0cd58:	1005d43a 	srai	r2,r2,16
  e0cd5c:	10ffffcc 	andi	r3,r2,65535
  e0cd60:	00803874 	movhi	r2,225
  e0cd64:	108b2904 	addi	r2,r2,11428
  e0cd68:	10c01015 	stw	r3,64(r2)
  e0cd6c:	00803874 	movhi	r2,225
  e0cd70:	108b2904 	addi	r2,r2,11428
  e0cd74:	10800a17 	ldw	r2,40(r2)
  e0cd78:	10800304 	addi	r2,r2,12
  e0cd7c:	10800017 	ldw	r2,0(r2)
  e0cd80:	1005d07a 	srai	r2,r2,1
  e0cd84:	10c0004c 	andi	r3,r2,1
  e0cd88:	00803874 	movhi	r2,225
  e0cd8c:	108b2904 	addi	r2,r2,11428
  e0cd90:	10c00d15 	stw	r3,52(r2)
  e0cd94:	00803874 	movhi	r2,225
  e0cd98:	108b2904 	addi	r2,r2,11428
  e0cd9c:	10800a17 	ldw	r2,40(r2)
  e0cda0:	10800304 	addi	r2,r2,12
  e0cda4:	10800017 	ldw	r2,0(r2)
  e0cda8:	1005d13a 	srai	r2,r2,4
  e0cdac:	10c003cc 	andi	r3,r2,15
  e0cdb0:	00803874 	movhi	r2,225
  e0cdb4:	108b2904 	addi	r2,r2,11428
  e0cdb8:	10c00e15 	stw	r3,56(r2)
  e0cdbc:	00803874 	movhi	r2,225
  e0cdc0:	108b2904 	addi	r2,r2,11428
  e0cdc4:	10800a17 	ldw	r2,40(r2)
  e0cdc8:	10800304 	addi	r2,r2,12
  e0cdcc:	10800017 	ldw	r2,0(r2)
  e0cdd0:	1005d43a 	srai	r2,r2,16
  e0cdd4:	1007883a 	mov	r3,r2
  e0cdd8:	00bfffc4 	movi	r2,-1
  e0cddc:	1884703a 	and	r2,r3,r2
  e0cde0:	e0bfff45 	stb	r2,-3(fp)
  e0cde4:	00803874 	movhi	r2,225
  e0cde8:	108b2904 	addi	r2,r2,11428
  e0cdec:	10800a17 	ldw	r2,40(r2)
  e0cdf0:	10800304 	addi	r2,r2,12
  e0cdf4:	10800017 	ldw	r2,0(r2)
  e0cdf8:	1005d63a 	srai	r2,r2,24
  e0cdfc:	1007883a 	mov	r3,r2
  e0ce00:	00bfffc4 	movi	r2,-1
  e0ce04:	1884703a 	and	r2,r3,r2
  e0ce08:	e0bfff05 	stb	r2,-4(fp)
  e0ce0c:	00803874 	movhi	r2,225
  e0ce10:	108b2904 	addi	r2,r2,11428
  e0ce14:	10800e17 	ldw	r2,56(r2)
  e0ce18:	10800058 	cmpnei	r2,r2,1
  e0ce1c:	1000041e 	bne	r2,zero,e0ce30 <alt_sys_init+0x1c0>
  e0ce20:	00803874 	movhi	r2,225
  e0ce24:	108b2904 	addi	r2,r2,11428
  e0ce28:	10001115 	stw	zero,68(r2)
  e0ce2c:	00000e06 	br	e0ce68 <alt_sys_init+0x1f8>
  e0ce30:	00803874 	movhi	r2,225
  e0ce34:	108b2904 	addi	r2,r2,11428
  e0ce38:	10800e17 	ldw	r2,56(r2)
  e0ce3c:	10800098 	cmpnei	r2,r2,2
  e0ce40:	1000051e 	bne	r2,zero,e0ce58 <alt_sys_init+0x1e8>
  e0ce44:	00c03874 	movhi	r3,225
  e0ce48:	18cb2904 	addi	r3,r3,11428
  e0ce4c:	00800044 	movi	r2,1
  e0ce50:	18801115 	stw	r2,68(r3)
  e0ce54:	00000406 	br	e0ce68 <alt_sys_init+0x1f8>
  e0ce58:	00c03874 	movhi	r3,225
  e0ce5c:	18cb2904 	addi	r3,r3,11428
  e0ce60:	00800084 	movi	r2,2
  e0ce64:	18801115 	stw	r2,68(r3)
  e0ce68:	e0ffff43 	ldbu	r3,-3(fp)
  e0ce6c:	00800804 	movi	r2,32
  e0ce70:	10c7c83a 	sub	r3,r2,r3
  e0ce74:	00bfffc4 	movi	r2,-1
  e0ce78:	10c6d83a 	srl	r3,r2,r3
  e0ce7c:	00803874 	movhi	r2,225
  e0ce80:	108b2904 	addi	r2,r2,11428
  e0ce84:	10c01215 	stw	r3,72(r2)
  e0ce88:	e0ffff43 	ldbu	r3,-3(fp)
  e0ce8c:	00803874 	movhi	r2,225
  e0ce90:	108b2904 	addi	r2,r2,11428
  e0ce94:	10801117 	ldw	r2,68(r2)
  e0ce98:	1887883a 	add	r3,r3,r2
  e0ce9c:	00803874 	movhi	r2,225
  e0cea0:	108b2904 	addi	r2,r2,11428
  e0cea4:	10c01315 	stw	r3,76(r2)
  e0cea8:	e0ffff03 	ldbu	r3,-4(fp)
  e0ceac:	00800804 	movi	r2,32
  e0ceb0:	10c7c83a 	sub	r3,r2,r3
  e0ceb4:	00bfffc4 	movi	r2,-1
  e0ceb8:	10c6d83a 	srl	r3,r2,r3
  e0cebc:	00803874 	movhi	r2,225
  e0cec0:	108b2904 	addi	r2,r2,11428
  e0cec4:	10c01415 	stw	r3,80(r2)
  e0cec8:	01003874 	movhi	r4,225
  e0cecc:	210b2904 	addi	r4,r4,11428
  e0ced0:	0e0cee80 	call	e0cee8 <alt_dev_reg>
}
  e0ced4:	e037883a 	mov	sp,fp
  e0ced8:	dfc00117 	ldw	ra,4(sp)
  e0cedc:	df000017 	ldw	fp,0(sp)
  e0cee0:	dec00204 	addi	sp,sp,8
  e0cee4:	f800283a 	ret

00e0cee8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  e0cee8:	defffd04 	addi	sp,sp,-12
  e0ceec:	dfc00215 	stw	ra,8(sp)
  e0cef0:	df000115 	stw	fp,4(sp)
  e0cef4:	df000104 	addi	fp,sp,4
  e0cef8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  e0cefc:	e13fff17 	ldw	r4,-4(fp)
  e0cf00:	01403874 	movhi	r5,225
  e0cf04:	294b4f04 	addi	r5,r5,11580
  e0cf08:	0e0fa840 	call	e0fa84 <alt_dev_llist_insert>
}
  e0cf0c:	e037883a 	mov	sp,fp
  e0cf10:	dfc00117 	ldw	ra,4(sp)
  e0cf14:	df000017 	ldw	fp,0(sp)
  e0cf18:	dec00204 	addi	sp,sp,8
  e0cf1c:	f800283a 	ret

00e0cf20 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  e0cf20:	defffa04 	addi	sp,sp,-24
  e0cf24:	dfc00515 	stw	ra,20(sp)
  e0cf28:	df000415 	stw	fp,16(sp)
  e0cf2c:	df000404 	addi	fp,sp,16
  e0cf30:	e13ffd15 	stw	r4,-12(fp)
  e0cf34:	e17ffe15 	stw	r5,-8(fp)
  e0cf38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  e0cf3c:	e0bffd17 	ldw	r2,-12(fp)
  e0cf40:	10800017 	ldw	r2,0(r2)
  e0cf44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  e0cf48:	e0bffc17 	ldw	r2,-16(fp)
  e0cf4c:	11000a04 	addi	r4,r2,40
  e0cf50:	e0bffd17 	ldw	r2,-12(fp)
  e0cf54:	11c00217 	ldw	r7,8(r2)
  e0cf58:	e17ffe17 	ldw	r5,-8(fp)
  e0cf5c:	e1bfff17 	ldw	r6,-4(fp)
  e0cf60:	0e0d5680 	call	e0d568 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  e0cf64:	e037883a 	mov	sp,fp
  e0cf68:	dfc00117 	ldw	ra,4(sp)
  e0cf6c:	df000017 	ldw	fp,0(sp)
  e0cf70:	dec00204 	addi	sp,sp,8
  e0cf74:	f800283a 	ret

00e0cf78 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  e0cf78:	defffa04 	addi	sp,sp,-24
  e0cf7c:	dfc00515 	stw	ra,20(sp)
  e0cf80:	df000415 	stw	fp,16(sp)
  e0cf84:	df000404 	addi	fp,sp,16
  e0cf88:	e13ffd15 	stw	r4,-12(fp)
  e0cf8c:	e17ffe15 	stw	r5,-8(fp)
  e0cf90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  e0cf94:	e0bffd17 	ldw	r2,-12(fp)
  e0cf98:	10800017 	ldw	r2,0(r2)
  e0cf9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  e0cfa0:	e0bffc17 	ldw	r2,-16(fp)
  e0cfa4:	11000a04 	addi	r4,r2,40
  e0cfa8:	e0bffd17 	ldw	r2,-12(fp)
  e0cfac:	11c00217 	ldw	r7,8(r2)
  e0cfb0:	e17ffe17 	ldw	r5,-8(fp)
  e0cfb4:	e1bfff17 	ldw	r6,-4(fp)
  e0cfb8:	0e0d78c0 	call	e0d78c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  e0cfbc:	e037883a 	mov	sp,fp
  e0cfc0:	dfc00117 	ldw	ra,4(sp)
  e0cfc4:	df000017 	ldw	fp,0(sp)
  e0cfc8:	dec00204 	addi	sp,sp,8
  e0cfcc:	f800283a 	ret

00e0cfd0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  e0cfd0:	defffc04 	addi	sp,sp,-16
  e0cfd4:	dfc00315 	stw	ra,12(sp)
  e0cfd8:	df000215 	stw	fp,8(sp)
  e0cfdc:	df000204 	addi	fp,sp,8
  e0cfe0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  e0cfe4:	e0bfff17 	ldw	r2,-4(fp)
  e0cfe8:	10800017 	ldw	r2,0(r2)
  e0cfec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  e0cff0:	e0bffe17 	ldw	r2,-8(fp)
  e0cff4:	11000a04 	addi	r4,r2,40
  e0cff8:	e0bfff17 	ldw	r2,-4(fp)
  e0cffc:	11400217 	ldw	r5,8(r2)
  e0d000:	0e0d4000 	call	e0d400 <altera_avalon_jtag_uart_close>
}
  e0d004:	e037883a 	mov	sp,fp
  e0d008:	dfc00117 	ldw	ra,4(sp)
  e0d00c:	df000017 	ldw	fp,0(sp)
  e0d010:	dec00204 	addi	sp,sp,8
  e0d014:	f800283a 	ret

00e0d018 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  e0d018:	defffa04 	addi	sp,sp,-24
  e0d01c:	dfc00515 	stw	ra,20(sp)
  e0d020:	df000415 	stw	fp,16(sp)
  e0d024:	df000404 	addi	fp,sp,16
  e0d028:	e13ffd15 	stw	r4,-12(fp)
  e0d02c:	e17ffe15 	stw	r5,-8(fp)
  e0d030:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  e0d034:	e0bffd17 	ldw	r2,-12(fp)
  e0d038:	10800017 	ldw	r2,0(r2)
  e0d03c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  e0d040:	e0bffc17 	ldw	r2,-16(fp)
  e0d044:	11000a04 	addi	r4,r2,40
  e0d048:	e17ffe17 	ldw	r5,-8(fp)
  e0d04c:	e1bfff17 	ldw	r6,-4(fp)
  e0d050:	0e0d4740 	call	e0d474 <altera_avalon_jtag_uart_ioctl>
}
  e0d054:	e037883a 	mov	sp,fp
  e0d058:	dfc00117 	ldw	ra,4(sp)
  e0d05c:	df000017 	ldw	fp,0(sp)
  e0d060:	dec00204 	addi	sp,sp,8
  e0d064:	f800283a 	ret

00e0d068 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  e0d068:	defffa04 	addi	sp,sp,-24
  e0d06c:	dfc00515 	stw	ra,20(sp)
  e0d070:	df000415 	stw	fp,16(sp)
  e0d074:	df000404 	addi	fp,sp,16
  e0d078:	e13ffd15 	stw	r4,-12(fp)
  e0d07c:	e17ffe15 	stw	r5,-8(fp)
  e0d080:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  e0d084:	e0fffd17 	ldw	r3,-12(fp)
  e0d088:	00800044 	movi	r2,1
  e0d08c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  e0d090:	e0bffd17 	ldw	r2,-12(fp)
  e0d094:	10800017 	ldw	r2,0(r2)
  e0d098:	11000104 	addi	r4,r2,4
  e0d09c:	e0bffd17 	ldw	r2,-12(fp)
  e0d0a0:	10800817 	ldw	r2,32(r2)
  e0d0a4:	1007883a 	mov	r3,r2
  e0d0a8:	2005883a 	mov	r2,r4
  e0d0ac:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  e0d0b0:	e13ffe17 	ldw	r4,-8(fp)
  e0d0b4:	e17fff17 	ldw	r5,-4(fp)
  e0d0b8:	d8000015 	stw	zero,0(sp)
  e0d0bc:	01803874 	movhi	r6,225
  e0d0c0:	31b44a04 	addi	r6,r6,-11992
  e0d0c4:	e1fffd17 	ldw	r7,-12(fp)
  e0d0c8:	0e0fd240 	call	e0fd24 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  e0d0cc:	e0bffd17 	ldw	r2,-12(fp)
  e0d0d0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  e0d0d4:	e0bffd17 	ldw	r2,-12(fp)
  e0d0d8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  e0d0dc:	00803874 	movhi	r2,225
  e0d0e0:	10925c04 	addi	r2,r2,18800
  e0d0e4:	10800017 	ldw	r2,0(r2)
  e0d0e8:	100b883a 	mov	r5,r2
  e0d0ec:	01803874 	movhi	r6,225
  e0d0f0:	31b4d404 	addi	r6,r6,-11440
  e0d0f4:	e1fffd17 	ldw	r7,-12(fp)
  e0d0f8:	0e0f8ec0 	call	e0f8ec <alt_alarm_start>
  e0d0fc:	1004403a 	cmpge	r2,r2,zero
  e0d100:	1000041e 	bne	r2,zero,e0d114 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  e0d104:	e0fffd17 	ldw	r3,-12(fp)
  e0d108:	00a00034 	movhi	r2,32768
  e0d10c:	10bfffc4 	addi	r2,r2,-1
  e0d110:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  e0d114:	e037883a 	mov	sp,fp
  e0d118:	dfc00117 	ldw	ra,4(sp)
  e0d11c:	df000017 	ldw	fp,0(sp)
  e0d120:	dec00204 	addi	sp,sp,8
  e0d124:	f800283a 	ret

00e0d128 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  e0d128:	defff804 	addi	sp,sp,-32
  e0d12c:	df000715 	stw	fp,28(sp)
  e0d130:	df000704 	addi	fp,sp,28
  e0d134:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  e0d138:	e0bfff17 	ldw	r2,-4(fp)
  e0d13c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  e0d140:	e0bffe17 	ldw	r2,-8(fp)
  e0d144:	10800017 	ldw	r2,0(r2)
  e0d148:	e0bffd15 	stw	r2,-12(fp)
  e0d14c:	00000006 	br	e0d150 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  e0d150:	e0bffd17 	ldw	r2,-12(fp)
  e0d154:	10800104 	addi	r2,r2,4
  e0d158:	10800037 	ldwio	r2,0(r2)
  e0d15c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  e0d160:	e0bffc17 	ldw	r2,-16(fp)
  e0d164:	1080c00c 	andi	r2,r2,768
  e0d168:	1005003a 	cmpeq	r2,r2,zero
  e0d16c:	1000741e 	bne	r2,zero,e0d340 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  e0d170:	e0bffc17 	ldw	r2,-16(fp)
  e0d174:	1080400c 	andi	r2,r2,256
  e0d178:	1005003a 	cmpeq	r2,r2,zero
  e0d17c:	1000351e 	bne	r2,zero,e0d254 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  e0d180:	00800074 	movhi	r2,1
  e0d184:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  e0d188:	e0bffe17 	ldw	r2,-8(fp)
  e0d18c:	10800a17 	ldw	r2,40(r2)
  e0d190:	10800044 	addi	r2,r2,1
  e0d194:	1081ffcc 	andi	r2,r2,2047
  e0d198:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  e0d19c:	e0bffe17 	ldw	r2,-8(fp)
  e0d1a0:	10c00b17 	ldw	r3,44(r2)
  e0d1a4:	e0bffa17 	ldw	r2,-24(fp)
  e0d1a8:	18801626 	beq	r3,r2,e0d204 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  e0d1ac:	e0bffd17 	ldw	r2,-12(fp)
  e0d1b0:	10800037 	ldwio	r2,0(r2)
  e0d1b4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  e0d1b8:	e0bffb17 	ldw	r2,-20(fp)
  e0d1bc:	10a0000c 	andi	r2,r2,32768
  e0d1c0:	1005003a 	cmpeq	r2,r2,zero
  e0d1c4:	10000f1e 	bne	r2,zero,e0d204 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  e0d1c8:	e0bffe17 	ldw	r2,-8(fp)
  e0d1cc:	10c00a17 	ldw	r3,40(r2)
  e0d1d0:	e0bffb17 	ldw	r2,-20(fp)
  e0d1d4:	1009883a 	mov	r4,r2
  e0d1d8:	e0bffe17 	ldw	r2,-8(fp)
  e0d1dc:	1885883a 	add	r2,r3,r2
  e0d1e0:	10800e04 	addi	r2,r2,56
  e0d1e4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  e0d1e8:	e0bffe17 	ldw	r2,-8(fp)
  e0d1ec:	10800a17 	ldw	r2,40(r2)
  e0d1f0:	10800044 	addi	r2,r2,1
  e0d1f4:	10c1ffcc 	andi	r3,r2,2047
  e0d1f8:	e0bffe17 	ldw	r2,-8(fp)
  e0d1fc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  e0d200:	003fe106 	br	e0d188 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  e0d204:	e0bffb17 	ldw	r2,-20(fp)
  e0d208:	10bfffec 	andhi	r2,r2,65535
  e0d20c:	1005003a 	cmpeq	r2,r2,zero
  e0d210:	1000101e 	bne	r2,zero,e0d254 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  e0d214:	e0bffe17 	ldw	r2,-8(fp)
  e0d218:	10c00817 	ldw	r3,32(r2)
  e0d21c:	00bfff84 	movi	r2,-2
  e0d220:	1886703a 	and	r3,r3,r2
  e0d224:	e0bffe17 	ldw	r2,-8(fp)
  e0d228:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  e0d22c:	e0bffd17 	ldw	r2,-12(fp)
  e0d230:	11000104 	addi	r4,r2,4
  e0d234:	e0bffe17 	ldw	r2,-8(fp)
  e0d238:	10800817 	ldw	r2,32(r2)
  e0d23c:	1007883a 	mov	r3,r2
  e0d240:	2005883a 	mov	r2,r4
  e0d244:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  e0d248:	e0bffd17 	ldw	r2,-12(fp)
  e0d24c:	10800104 	addi	r2,r2,4
  e0d250:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  e0d254:	e0bffc17 	ldw	r2,-16(fp)
  e0d258:	1080800c 	andi	r2,r2,512
  e0d25c:	1005003a 	cmpeq	r2,r2,zero
  e0d260:	103fbb1e 	bne	r2,zero,e0d150 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  e0d264:	e0bffc17 	ldw	r2,-16(fp)
  e0d268:	10bfffec 	andhi	r2,r2,65535
  e0d26c:	1004d43a 	srli	r2,r2,16
  e0d270:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  e0d274:	00001506 	br	e0d2cc <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  e0d278:	e13ffd17 	ldw	r4,-12(fp)
  e0d27c:	e0bffe17 	ldw	r2,-8(fp)
  e0d280:	10c00d17 	ldw	r3,52(r2)
  e0d284:	e0bffe17 	ldw	r2,-8(fp)
  e0d288:	1885883a 	add	r2,r3,r2
  e0d28c:	10820e04 	addi	r2,r2,2104
  e0d290:	10800003 	ldbu	r2,0(r2)
  e0d294:	10c03fcc 	andi	r3,r2,255
  e0d298:	18c0201c 	xori	r3,r3,128
  e0d29c:	18ffe004 	addi	r3,r3,-128
  e0d2a0:	2005883a 	mov	r2,r4
  e0d2a4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  e0d2a8:	e0bffe17 	ldw	r2,-8(fp)
  e0d2ac:	10800d17 	ldw	r2,52(r2)
  e0d2b0:	10800044 	addi	r2,r2,1
  e0d2b4:	10c1ffcc 	andi	r3,r2,2047
  e0d2b8:	e0bffe17 	ldw	r2,-8(fp)
  e0d2bc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  e0d2c0:	e0bff917 	ldw	r2,-28(fp)
  e0d2c4:	10bfffc4 	addi	r2,r2,-1
  e0d2c8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  e0d2cc:	e0bff917 	ldw	r2,-28(fp)
  e0d2d0:	1005003a 	cmpeq	r2,r2,zero
  e0d2d4:	1000051e 	bne	r2,zero,e0d2ec <altera_avalon_jtag_uart_irq+0x1c4>
  e0d2d8:	e0bffe17 	ldw	r2,-8(fp)
  e0d2dc:	10c00d17 	ldw	r3,52(r2)
  e0d2e0:	e0bffe17 	ldw	r2,-8(fp)
  e0d2e4:	10800c17 	ldw	r2,48(r2)
  e0d2e8:	18bfe31e 	bne	r3,r2,e0d278 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  e0d2ec:	e0bff917 	ldw	r2,-28(fp)
  e0d2f0:	1005003a 	cmpeq	r2,r2,zero
  e0d2f4:	103f961e 	bne	r2,zero,e0d150 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  e0d2f8:	e0bffe17 	ldw	r2,-8(fp)
  e0d2fc:	10c00817 	ldw	r3,32(r2)
  e0d300:	00bfff44 	movi	r2,-3
  e0d304:	1886703a 	and	r3,r3,r2
  e0d308:	e0bffe17 	ldw	r2,-8(fp)
  e0d30c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  e0d310:	e0bffe17 	ldw	r2,-8(fp)
  e0d314:	10800017 	ldw	r2,0(r2)
  e0d318:	11000104 	addi	r4,r2,4
  e0d31c:	e0bffe17 	ldw	r2,-8(fp)
  e0d320:	10800817 	ldw	r2,32(r2)
  e0d324:	1007883a 	mov	r3,r2
  e0d328:	2005883a 	mov	r2,r4
  e0d32c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  e0d330:	e0bffd17 	ldw	r2,-12(fp)
  e0d334:	10800104 	addi	r2,r2,4
  e0d338:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  e0d33c:	003f8406 	br	e0d150 <altera_avalon_jtag_uart_irq+0x28>
}
  e0d340:	e037883a 	mov	sp,fp
  e0d344:	df000017 	ldw	fp,0(sp)
  e0d348:	dec00104 	addi	sp,sp,4
  e0d34c:	f800283a 	ret

00e0d350 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  e0d350:	defffc04 	addi	sp,sp,-16
  e0d354:	df000315 	stw	fp,12(sp)
  e0d358:	df000304 	addi	fp,sp,12
  e0d35c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  e0d360:	e0bfff17 	ldw	r2,-4(fp)
  e0d364:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  e0d368:	e0bffe17 	ldw	r2,-8(fp)
  e0d36c:	10800017 	ldw	r2,0(r2)
  e0d370:	10800104 	addi	r2,r2,4
  e0d374:	10800037 	ldwio	r2,0(r2)
  e0d378:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  e0d37c:	e0bffd17 	ldw	r2,-12(fp)
  e0d380:	1081000c 	andi	r2,r2,1024
  e0d384:	1005003a 	cmpeq	r2,r2,zero
  e0d388:	10000c1e 	bne	r2,zero,e0d3bc <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  e0d38c:	e0bffe17 	ldw	r2,-8(fp)
  e0d390:	10800017 	ldw	r2,0(r2)
  e0d394:	11000104 	addi	r4,r2,4
  e0d398:	e0bffe17 	ldw	r2,-8(fp)
  e0d39c:	10800817 	ldw	r2,32(r2)
  e0d3a0:	10810014 	ori	r2,r2,1024
  e0d3a4:	1007883a 	mov	r3,r2
  e0d3a8:	2005883a 	mov	r2,r4
  e0d3ac:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  e0d3b0:	e0bffe17 	ldw	r2,-8(fp)
  e0d3b4:	10000915 	stw	zero,36(r2)
  e0d3b8:	00000a06 	br	e0d3e4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  e0d3bc:	e0bffe17 	ldw	r2,-8(fp)
  e0d3c0:	10c00917 	ldw	r3,36(r2)
  e0d3c4:	00a00034 	movhi	r2,32768
  e0d3c8:	10bfff04 	addi	r2,r2,-4
  e0d3cc:	10c00536 	bltu	r2,r3,e0d3e4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  e0d3d0:	e0bffe17 	ldw	r2,-8(fp)
  e0d3d4:	10800917 	ldw	r2,36(r2)
  e0d3d8:	10c00044 	addi	r3,r2,1
  e0d3dc:	e0bffe17 	ldw	r2,-8(fp)
  e0d3e0:	10c00915 	stw	r3,36(r2)
  e0d3e4:	00803874 	movhi	r2,225
  e0d3e8:	10925c04 	addi	r2,r2,18800
  e0d3ec:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  e0d3f0:	e037883a 	mov	sp,fp
  e0d3f4:	df000017 	ldw	fp,0(sp)
  e0d3f8:	dec00104 	addi	sp,sp,4
  e0d3fc:	f800283a 	ret

00e0d400 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  e0d400:	defffc04 	addi	sp,sp,-16
  e0d404:	df000315 	stw	fp,12(sp)
  e0d408:	df000304 	addi	fp,sp,12
  e0d40c:	e13ffd15 	stw	r4,-12(fp)
  e0d410:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  e0d414:	00000706 	br	e0d434 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  e0d418:	e0bffe17 	ldw	r2,-8(fp)
  e0d41c:	1090000c 	andi	r2,r2,16384
  e0d420:	1005003a 	cmpeq	r2,r2,zero
  e0d424:	1000031e 	bne	r2,zero,e0d434 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  e0d428:	00bffd44 	movi	r2,-11
  e0d42c:	e0bfff15 	stw	r2,-4(fp)
  e0d430:	00000b06 	br	e0d460 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  e0d434:	e0bffd17 	ldw	r2,-12(fp)
  e0d438:	10c00d17 	ldw	r3,52(r2)
  e0d43c:	e0bffd17 	ldw	r2,-12(fp)
  e0d440:	10800c17 	ldw	r2,48(r2)
  e0d444:	18800526 	beq	r3,r2,e0d45c <altera_avalon_jtag_uart_close+0x5c>
  e0d448:	e0bffd17 	ldw	r2,-12(fp)
  e0d44c:	10c00917 	ldw	r3,36(r2)
  e0d450:	e0bffd17 	ldw	r2,-12(fp)
  e0d454:	10800117 	ldw	r2,4(r2)
  e0d458:	18bfef36 	bltu	r3,r2,e0d418 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  e0d45c:	e03fff15 	stw	zero,-4(fp)
  e0d460:	e0bfff17 	ldw	r2,-4(fp)
}
  e0d464:	e037883a 	mov	sp,fp
  e0d468:	df000017 	ldw	fp,0(sp)
  e0d46c:	dec00104 	addi	sp,sp,4
  e0d470:	f800283a 	ret

00e0d474 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  e0d474:	defff804 	addi	sp,sp,-32
  e0d478:	df000715 	stw	fp,28(sp)
  e0d47c:	df000704 	addi	fp,sp,28
  e0d480:	e13ffb15 	stw	r4,-20(fp)
  e0d484:	e17ffc15 	stw	r5,-16(fp)
  e0d488:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  e0d48c:	00bff9c4 	movi	r2,-25
  e0d490:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  e0d494:	e0bffc17 	ldw	r2,-16(fp)
  e0d498:	e0bfff15 	stw	r2,-4(fp)
  e0d49c:	e0ffff17 	ldw	r3,-4(fp)
  e0d4a0:	189a8060 	cmpeqi	r2,r3,27137
  e0d4a4:	1000041e 	bne	r2,zero,e0d4b8 <altera_avalon_jtag_uart_ioctl+0x44>
  e0d4a8:	e0ffff17 	ldw	r3,-4(fp)
  e0d4ac:	189a80a0 	cmpeqi	r2,r3,27138
  e0d4b0:	10001b1e 	bne	r2,zero,e0d520 <altera_avalon_jtag_uart_ioctl+0xac>
  e0d4b4:	00002706 	br	e0d554 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  e0d4b8:	e0bffb17 	ldw	r2,-20(fp)
  e0d4bc:	10c00117 	ldw	r3,4(r2)
  e0d4c0:	00a00034 	movhi	r2,32768
  e0d4c4:	10bfffc4 	addi	r2,r2,-1
  e0d4c8:	18802226 	beq	r3,r2,e0d554 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  e0d4cc:	e0bffd17 	ldw	r2,-12(fp)
  e0d4d0:	10800017 	ldw	r2,0(r2)
  e0d4d4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  e0d4d8:	e0bff917 	ldw	r2,-28(fp)
  e0d4dc:	10800090 	cmplti	r2,r2,2
  e0d4e0:	1000071e 	bne	r2,zero,e0d500 <altera_avalon_jtag_uart_ioctl+0x8c>
  e0d4e4:	e0fff917 	ldw	r3,-28(fp)
  e0d4e8:	00a00034 	movhi	r2,32768
  e0d4ec:	10bfffc4 	addi	r2,r2,-1
  e0d4f0:	18800326 	beq	r3,r2,e0d500 <altera_avalon_jtag_uart_ioctl+0x8c>
  e0d4f4:	e0bff917 	ldw	r2,-28(fp)
  e0d4f8:	e0bffe15 	stw	r2,-8(fp)
  e0d4fc:	00000306 	br	e0d50c <altera_avalon_jtag_uart_ioctl+0x98>
  e0d500:	00e00034 	movhi	r3,32768
  e0d504:	18ffff84 	addi	r3,r3,-2
  e0d508:	e0fffe15 	stw	r3,-8(fp)
  e0d50c:	e0bffb17 	ldw	r2,-20(fp)
  e0d510:	e0fffe17 	ldw	r3,-8(fp)
  e0d514:	10c00115 	stw	r3,4(r2)
      rc = 0;
  e0d518:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  e0d51c:	00000d06 	br	e0d554 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  e0d520:	e0bffb17 	ldw	r2,-20(fp)
  e0d524:	10c00117 	ldw	r3,4(r2)
  e0d528:	00a00034 	movhi	r2,32768
  e0d52c:	10bfffc4 	addi	r2,r2,-1
  e0d530:	18800826 	beq	r3,r2,e0d554 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  e0d534:	e13ffd17 	ldw	r4,-12(fp)
  e0d538:	e0bffb17 	ldw	r2,-20(fp)
  e0d53c:	10c00917 	ldw	r3,36(r2)
  e0d540:	e0bffb17 	ldw	r2,-20(fp)
  e0d544:	10800117 	ldw	r2,4(r2)
  e0d548:	1885803a 	cmpltu	r2,r3,r2
  e0d54c:	20800015 	stw	r2,0(r4)
      rc = 0;
  e0d550:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  e0d554:	e0bffa17 	ldw	r2,-24(fp)
}
  e0d558:	e037883a 	mov	sp,fp
  e0d55c:	df000017 	ldw	fp,0(sp)
  e0d560:	dec00104 	addi	sp,sp,4
  e0d564:	f800283a 	ret

00e0d568 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  e0d568:	defff204 	addi	sp,sp,-56
  e0d56c:	dfc00d15 	stw	ra,52(sp)
  e0d570:	df000c15 	stw	fp,48(sp)
  e0d574:	df000c04 	addi	fp,sp,48
  e0d578:	e13ffb15 	stw	r4,-20(fp)
  e0d57c:	e17ffc15 	stw	r5,-16(fp)
  e0d580:	e1bffd15 	stw	r6,-12(fp)
  e0d584:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  e0d588:	e0bffc17 	ldw	r2,-16(fp)
  e0d58c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  e0d590:	00004806 	br	e0d6b4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  e0d594:	e0bffb17 	ldw	r2,-20(fp)
  e0d598:	10800a17 	ldw	r2,40(r2)
  e0d59c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  e0d5a0:	e0bffb17 	ldw	r2,-20(fp)
  e0d5a4:	10800b17 	ldw	r2,44(r2)
  e0d5a8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  e0d5ac:	e0fff717 	ldw	r3,-36(fp)
  e0d5b0:	e0bff617 	ldw	r2,-40(fp)
  e0d5b4:	18800536 	bltu	r3,r2,e0d5cc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  e0d5b8:	e0bff717 	ldw	r2,-36(fp)
  e0d5bc:	e0fff617 	ldw	r3,-40(fp)
  e0d5c0:	10c5c83a 	sub	r2,r2,r3
  e0d5c4:	e0bff815 	stw	r2,-32(fp)
  e0d5c8:	00000406 	br	e0d5dc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  e0d5cc:	00820004 	movi	r2,2048
  e0d5d0:	e0fff617 	ldw	r3,-40(fp)
  e0d5d4:	10c5c83a 	sub	r2,r2,r3
  e0d5d8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  e0d5dc:	e0bff817 	ldw	r2,-32(fp)
  e0d5e0:	1005003a 	cmpeq	r2,r2,zero
  e0d5e4:	10001f1e 	bne	r2,zero,e0d664 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  e0d5e8:	e0fffd17 	ldw	r3,-12(fp)
  e0d5ec:	e0bff817 	ldw	r2,-32(fp)
  e0d5f0:	1880022e 	bgeu	r3,r2,e0d5fc <altera_avalon_jtag_uart_read+0x94>
        n = space;
  e0d5f4:	e0bffd17 	ldw	r2,-12(fp)
  e0d5f8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  e0d5fc:	e0bffb17 	ldw	r2,-20(fp)
  e0d600:	10c00e04 	addi	r3,r2,56
  e0d604:	e0bff617 	ldw	r2,-40(fp)
  e0d608:	1887883a 	add	r3,r3,r2
  e0d60c:	e0bffa17 	ldw	r2,-24(fp)
  e0d610:	1009883a 	mov	r4,r2
  e0d614:	180b883a 	mov	r5,r3
  e0d618:	e1bff817 	ldw	r6,-32(fp)
  e0d61c:	0e08bc00 	call	e08bc0 <memcpy>
      ptr   += n;
  e0d620:	e0fff817 	ldw	r3,-32(fp)
  e0d624:	e0bffa17 	ldw	r2,-24(fp)
  e0d628:	10c5883a 	add	r2,r2,r3
  e0d62c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  e0d630:	e0fffd17 	ldw	r3,-12(fp)
  e0d634:	e0bff817 	ldw	r2,-32(fp)
  e0d638:	1885c83a 	sub	r2,r3,r2
  e0d63c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  e0d640:	e0fff617 	ldw	r3,-40(fp)
  e0d644:	e0bff817 	ldw	r2,-32(fp)
  e0d648:	1885883a 	add	r2,r3,r2
  e0d64c:	10c1ffcc 	andi	r3,r2,2047
  e0d650:	e0bffb17 	ldw	r2,-20(fp)
  e0d654:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  e0d658:	e0bffd17 	ldw	r2,-12(fp)
  e0d65c:	10800048 	cmpgei	r2,r2,1
  e0d660:	103fcc1e 	bne	r2,zero,e0d594 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  e0d664:	e0fffa17 	ldw	r3,-24(fp)
  e0d668:	e0bffc17 	ldw	r2,-16(fp)
  e0d66c:	1880141e 	bne	r3,r2,e0d6c0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  e0d670:	e0bffe17 	ldw	r2,-8(fp)
  e0d674:	1090000c 	andi	r2,r2,16384
  e0d678:	1004c03a 	cmpne	r2,r2,zero
  e0d67c:	1000101e 	bne	r2,zero,e0d6c0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  e0d680:	e0bffb17 	ldw	r2,-20(fp)
  e0d684:	10c00a17 	ldw	r3,40(r2)
  e0d688:	e0bff717 	ldw	r2,-36(fp)
  e0d68c:	1880051e 	bne	r3,r2,e0d6a4 <altera_avalon_jtag_uart_read+0x13c>
  e0d690:	e0bffb17 	ldw	r2,-20(fp)
  e0d694:	10c00917 	ldw	r3,36(r2)
  e0d698:	e0bffb17 	ldw	r2,-20(fp)
  e0d69c:	10800117 	ldw	r2,4(r2)
  e0d6a0:	18bff736 	bltu	r3,r2,e0d680 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  e0d6a4:	e0bffb17 	ldw	r2,-20(fp)
  e0d6a8:	10c00a17 	ldw	r3,40(r2)
  e0d6ac:	e0bff717 	ldw	r2,-36(fp)
  e0d6b0:	18800326 	beq	r3,r2,e0d6c0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  e0d6b4:	e0bffd17 	ldw	r2,-12(fp)
  e0d6b8:	10800048 	cmpgei	r2,r2,1
  e0d6bc:	103fb51e 	bne	r2,zero,e0d594 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  e0d6c0:	e0fffa17 	ldw	r3,-24(fp)
  e0d6c4:	e0bffc17 	ldw	r2,-16(fp)
  e0d6c8:	18801926 	beq	r3,r2,e0d730 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  e0d6cc:	0005303a 	rdctl	r2,status
  e0d6d0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  e0d6d4:	e0fff517 	ldw	r3,-44(fp)
  e0d6d8:	00bfff84 	movi	r2,-2
  e0d6dc:	1884703a 	and	r2,r3,r2
  e0d6e0:	1001703a 	wrctl	status,r2
  
  return context;
  e0d6e4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  e0d6e8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  e0d6ec:	e0bffb17 	ldw	r2,-20(fp)
  e0d6f0:	10800817 	ldw	r2,32(r2)
  e0d6f4:	10c00054 	ori	r3,r2,1
  e0d6f8:	e0bffb17 	ldw	r2,-20(fp)
  e0d6fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  e0d700:	e0bffb17 	ldw	r2,-20(fp)
  e0d704:	10800017 	ldw	r2,0(r2)
  e0d708:	11000104 	addi	r4,r2,4
  e0d70c:	e0bffb17 	ldw	r2,-20(fp)
  e0d710:	10800817 	ldw	r2,32(r2)
  e0d714:	1007883a 	mov	r3,r2
  e0d718:	2005883a 	mov	r2,r4
  e0d71c:	10c00035 	stwio	r3,0(r2)
  e0d720:	e0bff917 	ldw	r2,-28(fp)
  e0d724:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  e0d728:	e0bff417 	ldw	r2,-48(fp)
  e0d72c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  e0d730:	e0fffa17 	ldw	r3,-24(fp)
  e0d734:	e0bffc17 	ldw	r2,-16(fp)
  e0d738:	18800526 	beq	r3,r2,e0d750 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  e0d73c:	e0fffa17 	ldw	r3,-24(fp)
  e0d740:	e0bffc17 	ldw	r2,-16(fp)
  e0d744:	1887c83a 	sub	r3,r3,r2
  e0d748:	e0ffff15 	stw	r3,-4(fp)
  e0d74c:	00000906 	br	e0d774 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  e0d750:	e0bffe17 	ldw	r2,-8(fp)
  e0d754:	1090000c 	andi	r2,r2,16384
  e0d758:	1005003a 	cmpeq	r2,r2,zero
  e0d75c:	1000031e 	bne	r2,zero,e0d76c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  e0d760:	00bffd44 	movi	r2,-11
  e0d764:	e0bfff15 	stw	r2,-4(fp)
  e0d768:	00000206 	br	e0d774 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  e0d76c:	00bffec4 	movi	r2,-5
  e0d770:	e0bfff15 	stw	r2,-4(fp)
  e0d774:	e0bfff17 	ldw	r2,-4(fp)
}
  e0d778:	e037883a 	mov	sp,fp
  e0d77c:	dfc00117 	ldw	ra,4(sp)
  e0d780:	df000017 	ldw	fp,0(sp)
  e0d784:	dec00204 	addi	sp,sp,8
  e0d788:	f800283a 	ret

00e0d78c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  e0d78c:	defff204 	addi	sp,sp,-56
  e0d790:	dfc00d15 	stw	ra,52(sp)
  e0d794:	df000c15 	stw	fp,48(sp)
  e0d798:	df000c04 	addi	fp,sp,48
  e0d79c:	e13ffb15 	stw	r4,-20(fp)
  e0d7a0:	e17ffc15 	stw	r5,-16(fp)
  e0d7a4:	e1bffd15 	stw	r6,-12(fp)
  e0d7a8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  e0d7ac:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  e0d7b0:	e0bffc17 	ldw	r2,-16(fp)
  e0d7b4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  e0d7b8:	00003a06 	br	e0d8a4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  e0d7bc:	e0bffb17 	ldw	r2,-20(fp)
  e0d7c0:	10800c17 	ldw	r2,48(r2)
  e0d7c4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  e0d7c8:	e0bffb17 	ldw	r2,-20(fp)
  e0d7cc:	10800d17 	ldw	r2,52(r2)
  e0d7d0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  e0d7d4:	e0fffa17 	ldw	r3,-24(fp)
  e0d7d8:	e0bff917 	ldw	r2,-28(fp)
  e0d7dc:	1880062e 	bgeu	r3,r2,e0d7f8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  e0d7e0:	e0fff917 	ldw	r3,-28(fp)
  e0d7e4:	e0bffa17 	ldw	r2,-24(fp)
  e0d7e8:	1885c83a 	sub	r2,r3,r2
  e0d7ec:	10bfffc4 	addi	r2,r2,-1
  e0d7f0:	e0bff815 	stw	r2,-32(fp)
  e0d7f4:	00000c06 	br	e0d828 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  e0d7f8:	e0bff917 	ldw	r2,-28(fp)
  e0d7fc:	1005003a 	cmpeq	r2,r2,zero
  e0d800:	1000051e 	bne	r2,zero,e0d818 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  e0d804:	00820004 	movi	r2,2048
  e0d808:	e0fffa17 	ldw	r3,-24(fp)
  e0d80c:	10c5c83a 	sub	r2,r2,r3
  e0d810:	e0bff815 	stw	r2,-32(fp)
  e0d814:	00000406 	br	e0d828 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  e0d818:	0081ffc4 	movi	r2,2047
  e0d81c:	e0fffa17 	ldw	r3,-24(fp)
  e0d820:	10c5c83a 	sub	r2,r2,r3
  e0d824:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  e0d828:	e0bff817 	ldw	r2,-32(fp)
  e0d82c:	1005003a 	cmpeq	r2,r2,zero
  e0d830:	10001f1e 	bne	r2,zero,e0d8b0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  e0d834:	e0fffd17 	ldw	r3,-12(fp)
  e0d838:	e0bff817 	ldw	r2,-32(fp)
  e0d83c:	1880022e 	bgeu	r3,r2,e0d848 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  e0d840:	e0bffd17 	ldw	r2,-12(fp)
  e0d844:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  e0d848:	e0bffb17 	ldw	r2,-20(fp)
  e0d84c:	10c20e04 	addi	r3,r2,2104
  e0d850:	e0bffa17 	ldw	r2,-24(fp)
  e0d854:	1885883a 	add	r2,r3,r2
  e0d858:	e0fffc17 	ldw	r3,-16(fp)
  e0d85c:	1009883a 	mov	r4,r2
  e0d860:	180b883a 	mov	r5,r3
  e0d864:	e1bff817 	ldw	r6,-32(fp)
  e0d868:	0e08bc00 	call	e08bc0 <memcpy>
      ptr   += n;
  e0d86c:	e0fff817 	ldw	r3,-32(fp)
  e0d870:	e0bffc17 	ldw	r2,-16(fp)
  e0d874:	10c5883a 	add	r2,r2,r3
  e0d878:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  e0d87c:	e0fffd17 	ldw	r3,-12(fp)
  e0d880:	e0bff817 	ldw	r2,-32(fp)
  e0d884:	1885c83a 	sub	r2,r3,r2
  e0d888:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  e0d88c:	e0fffa17 	ldw	r3,-24(fp)
  e0d890:	e0bff817 	ldw	r2,-32(fp)
  e0d894:	1885883a 	add	r2,r3,r2
  e0d898:	10c1ffcc 	andi	r3,r2,2047
  e0d89c:	e0bffb17 	ldw	r2,-20(fp)
  e0d8a0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  e0d8a4:	e0bffd17 	ldw	r2,-12(fp)
  e0d8a8:	10800048 	cmpgei	r2,r2,1
  e0d8ac:	103fc31e 	bne	r2,zero,e0d7bc <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  e0d8b0:	0005303a 	rdctl	r2,status
  e0d8b4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  e0d8b8:	e0fff517 	ldw	r3,-44(fp)
  e0d8bc:	00bfff84 	movi	r2,-2
  e0d8c0:	1884703a 	and	r2,r3,r2
  e0d8c4:	1001703a 	wrctl	status,r2
  
  return context;
  e0d8c8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  e0d8cc:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  e0d8d0:	e0bffb17 	ldw	r2,-20(fp)
  e0d8d4:	10800817 	ldw	r2,32(r2)
  e0d8d8:	10c00094 	ori	r3,r2,2
  e0d8dc:	e0bffb17 	ldw	r2,-20(fp)
  e0d8e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  e0d8e4:	e0bffb17 	ldw	r2,-20(fp)
  e0d8e8:	10800017 	ldw	r2,0(r2)
  e0d8ec:	11000104 	addi	r4,r2,4
  e0d8f0:	e0bffb17 	ldw	r2,-20(fp)
  e0d8f4:	10800817 	ldw	r2,32(r2)
  e0d8f8:	1007883a 	mov	r3,r2
  e0d8fc:	2005883a 	mov	r2,r4
  e0d900:	10c00035 	stwio	r3,0(r2)
  e0d904:	e0bff717 	ldw	r2,-36(fp)
  e0d908:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  e0d90c:	e0bff417 	ldw	r2,-48(fp)
  e0d910:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  e0d914:	e0bffd17 	ldw	r2,-12(fp)
  e0d918:	10800050 	cmplti	r2,r2,1
  e0d91c:	1000111e 	bne	r2,zero,e0d964 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  e0d920:	e0bffe17 	ldw	r2,-8(fp)
  e0d924:	1090000c 	andi	r2,r2,16384
  e0d928:	1004c03a 	cmpne	r2,r2,zero
  e0d92c:	1000101e 	bne	r2,zero,e0d970 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  e0d930:	e0bffb17 	ldw	r2,-20(fp)
  e0d934:	10c00d17 	ldw	r3,52(r2)
  e0d938:	e0bff917 	ldw	r2,-28(fp)
  e0d93c:	1880051e 	bne	r3,r2,e0d954 <altera_avalon_jtag_uart_write+0x1c8>
  e0d940:	e0bffb17 	ldw	r2,-20(fp)
  e0d944:	10c00917 	ldw	r3,36(r2)
  e0d948:	e0bffb17 	ldw	r2,-20(fp)
  e0d94c:	10800117 	ldw	r2,4(r2)
  e0d950:	18bff736 	bltu	r3,r2,e0d930 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  e0d954:	e0bffb17 	ldw	r2,-20(fp)
  e0d958:	10c00d17 	ldw	r3,52(r2)
  e0d95c:	e0bff917 	ldw	r2,-28(fp)
  e0d960:	18800326 	beq	r3,r2,e0d970 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  e0d964:	e0bffd17 	ldw	r2,-12(fp)
  e0d968:	10800048 	cmpgei	r2,r2,1
  e0d96c:	103fcd1e 	bne	r2,zero,e0d8a4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  e0d970:	e0fffc17 	ldw	r3,-16(fp)
  e0d974:	e0bff617 	ldw	r2,-40(fp)
  e0d978:	18800526 	beq	r3,r2,e0d990 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  e0d97c:	e0fffc17 	ldw	r3,-16(fp)
  e0d980:	e0bff617 	ldw	r2,-40(fp)
  e0d984:	1887c83a 	sub	r3,r3,r2
  e0d988:	e0ffff15 	stw	r3,-4(fp)
  e0d98c:	00000906 	br	e0d9b4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  e0d990:	e0bffe17 	ldw	r2,-8(fp)
  e0d994:	1090000c 	andi	r2,r2,16384
  e0d998:	1005003a 	cmpeq	r2,r2,zero
  e0d99c:	1000031e 	bne	r2,zero,e0d9ac <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  e0d9a0:	00bffd44 	movi	r2,-11
  e0d9a4:	e0bfff15 	stw	r2,-4(fp)
  e0d9a8:	00000206 	br	e0d9b4 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  e0d9ac:	00bffec4 	movi	r2,-5
  e0d9b0:	e0bfff15 	stw	r2,-4(fp)
  e0d9b4:	e0bfff17 	ldw	r2,-4(fp)
}
  e0d9b8:	e037883a 	mov	sp,fp
  e0d9bc:	dfc00117 	ldw	ra,4(sp)
  e0d9c0:	df000017 	ldw	fp,0(sp)
  e0d9c4:	dec00204 	addi	sp,sp,8
  e0d9c8:	f800283a 	ret

00e0d9cc <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
  e0d9cc:	defffa04 	addi	sp,sp,-24
  e0d9d0:	dfc00515 	stw	ra,20(sp)
  e0d9d4:	df000415 	stw	fp,16(sp)
  e0d9d8:	df000404 	addi	fp,sp,16
  e0d9dc:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
  e0d9e0:	e0bfff17 	ldw	r2,-4(fp)
  e0d9e4:	11000704 	addi	r4,r2,28
  e0d9e8:	0e0db240 	call	e0db24 <alt_avalon_mutex_reg>
  e0d9ec:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
  e0d9f0:	e0bffe17 	ldw	r2,-8(fp)
  e0d9f4:	1004c03a 	cmpne	r2,r2,zero
  e0d9f8:	1000041e 	bne	r2,zero,e0da0c <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
  e0d9fc:	e0bfff17 	ldw	r2,-4(fp)
  e0da00:	11000b04 	addi	r4,r2,44
  e0da04:	0e0db240 	call	e0db24 <alt_avalon_mutex_reg>
  e0da08:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  e0da0c:	e0bffe17 	ldw	r2,-8(fp)
  e0da10:	1004c03a 	cmpne	r2,r2,zero
  e0da14:	1000041e 	bne	r2,zero,e0da28 <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
  e0da18:	e13fff17 	ldw	r4,-4(fp)
  e0da1c:	d1601604 	addi	r5,gp,-32680
  e0da20:	0e0fa840 	call	e0fa84 <alt_dev_llist_insert>
  e0da24:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  e0da28:	e0bffe17 	ldw	r2,-8(fp)
  e0da2c:	1004c03a 	cmpne	r2,r2,zero
  e0da30:	1000361e 	bne	r2,zero,e0db0c <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
  e0da34:	e0bfff17 	ldw	r2,-4(fp)
  e0da38:	11000917 	ldw	r4,36(r2)
  e0da3c:	0e0df700 	call	e0df70 <altera_avalon_mutex_open>
  e0da40:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
  e0da44:	e0bffd17 	ldw	r2,-12(fp)
  e0da48:	1005003a 	cmpeq	r2,r2,zero
  e0da4c:	10002f1e 	bne	r2,zero,e0db0c <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
  e0da50:	e0bfff17 	ldw	r2,-4(fp)
  e0da54:	11000d17 	ldw	r4,52(r2)
  e0da58:	0e0df700 	call	e0df70 <altera_avalon_mutex_open>
  e0da5c:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
  e0da60:	e0bffc17 	ldw	r2,-16(fp)
  e0da64:	1005003a 	cmpeq	r2,r2,zero
  e0da68:	1000281e 	bne	r2,zero,e0db0c <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  e0da6c:	00000f06 	br	e0daac <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
  e0da70:	e13ffd17 	ldw	r4,-12(fp)
  e0da74:	01400044 	movi	r5,1
  e0da78:	0e0e0880 	call	e0e088 <altera_avalon_mutex_trylock>
  e0da7c:	1004c03a 	cmpne	r2,r2,zero
  e0da80:	10000a1e 	bne	r2,zero,e0daac <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
  e0da84:	e0bfff17 	ldw	r2,-4(fp)
  e0da88:	10800317 	ldw	r2,12(r2)
  e0da8c:	1009883a 	mov	r4,r2
  e0da90:	e0bfff17 	ldw	r2,-4(fp)
  e0da94:	10800517 	ldw	r2,20(r2)
  e0da98:	1007883a 	mov	r3,r2
  e0da9c:	2005883a 	mov	r2,r4
  e0daa0:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
  e0daa4:	e13ffd17 	ldw	r4,-12(fp)
  e0daa8:	0e0e0c80 	call	e0e0c8 <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  e0daac:	e13ffd17 	ldw	r4,-12(fp)
  e0dab0:	0e0e1a00 	call	e0e1a0 <altera_avalon_mutex_first_lock>
  e0dab4:	1004c03a 	cmpne	r2,r2,zero
  e0dab8:	103fed1e 	bne	r2,zero,e0da70 <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  e0dabc:	00000f06 	br	e0dafc <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
  e0dac0:	e13ffc17 	ldw	r4,-16(fp)
  e0dac4:	01400044 	movi	r5,1
  e0dac8:	0e0e0880 	call	e0e088 <altera_avalon_mutex_trylock>
  e0dacc:	1004c03a 	cmpne	r2,r2,zero
  e0dad0:	10000a1e 	bne	r2,zero,e0dafc <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
  e0dad4:	e0bfff17 	ldw	r2,-4(fp)
  e0dad8:	10800417 	ldw	r2,16(r2)
  e0dadc:	1009883a 	mov	r4,r2
  e0dae0:	e0bfff17 	ldw	r2,-4(fp)
  e0dae4:	10800517 	ldw	r2,20(r2)
  e0dae8:	1007883a 	mov	r3,r2
  e0daec:	2005883a 	mov	r2,r4
  e0daf0:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
  e0daf4:	e13ffc17 	ldw	r4,-16(fp)
  e0daf8:	0e0e0c80 	call	e0e0c8 <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  e0dafc:	e13ffc17 	ldw	r4,-16(fp)
  e0db00:	0e0e1a00 	call	e0e1a0 <altera_avalon_mutex_first_lock>
  e0db04:	1004c03a 	cmpne	r2,r2,zero
  e0db08:	103fed1e 	bne	r2,zero,e0dac0 <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
  e0db0c:	e0bffe17 	ldw	r2,-8(fp)
}
  e0db10:	e037883a 	mov	sp,fp
  e0db14:	dfc00117 	ldw	ra,4(sp)
  e0db18:	df000017 	ldw	fp,0(sp)
  e0db1c:	dec00204 	addi	sp,sp,8
  e0db20:	f800283a 	ret

00e0db24 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
  e0db24:	defffc04 	addi	sp,sp,-16
  e0db28:	dfc00315 	stw	ra,12(sp)
  e0db2c:	df000215 	stw	fp,8(sp)
  e0db30:	df000204 	addi	fp,sp,8
  e0db34:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  e0db38:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  e0db3c:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
  e0db40:	e0bffe17 	ldw	r2,-8(fp)
  e0db44:	1004c03a 	cmpne	r2,r2,zero
  e0db48:	1000061e 	bne	r2,zero,e0db64 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
  e0db4c:	e13fff17 	ldw	r4,-4(fp)
  e0db50:	01403874 	movhi	r5,225
  e0db54:	294b5604 	addi	r5,r5,11608
  e0db58:	0e0fa840 	call	e0fa84 <alt_dev_llist_insert>
  e0db5c:	e0bffe15 	stw	r2,-8(fp)
  e0db60:	00000506 	br	e0db78 <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
  e0db64:	0e0db900 	call	e0db90 <alt_get_errno>
  e0db68:	00c00304 	movi	r3,12
  e0db6c:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
  e0db70:	00bffd04 	movi	r2,-12
  e0db74:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
  e0db78:	e0bffe17 	ldw	r2,-8(fp)
}
  e0db7c:	e037883a 	mov	sp,fp
  e0db80:	dfc00117 	ldw	ra,4(sp)
  e0db84:	df000017 	ldw	fp,0(sp)
  e0db88:	dec00204 	addi	sp,sp,8
  e0db8c:	f800283a 	ret

00e0db90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e0db90:	defffd04 	addi	sp,sp,-12
  e0db94:	dfc00215 	stw	ra,8(sp)
  e0db98:	df000115 	stw	fp,4(sp)
  e0db9c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e0dba0:	00803874 	movhi	r2,225
  e0dba4:	108b5204 	addi	r2,r2,11592
  e0dba8:	10800017 	ldw	r2,0(r2)
  e0dbac:	1005003a 	cmpeq	r2,r2,zero
  e0dbb0:	1000061e 	bne	r2,zero,e0dbcc <alt_get_errno+0x3c>
  e0dbb4:	00803874 	movhi	r2,225
  e0dbb8:	108b5204 	addi	r2,r2,11592
  e0dbbc:	10800017 	ldw	r2,0(r2)
  e0dbc0:	103ee83a 	callr	r2
  e0dbc4:	e0bfff15 	stw	r2,-4(fp)
  e0dbc8:	00000306 	br	e0dbd8 <alt_get_errno+0x48>
  e0dbcc:	00803874 	movhi	r2,225
  e0dbd0:	10925704 	addi	r2,r2,18780
  e0dbd4:	e0bfff15 	stw	r2,-4(fp)
  e0dbd8:	e0bfff17 	ldw	r2,-4(fp)
}
  e0dbdc:	e037883a 	mov	sp,fp
  e0dbe0:	dfc00117 	ldw	ra,4(sp)
  e0dbe4:	df000017 	ldw	fp,0(sp)
  e0dbe8:	dec00204 	addi	sp,sp,8
  e0dbec:	f800283a 	ret

00e0dbf0 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
  e0dbf0:	defffc04 	addi	sp,sp,-16
  e0dbf4:	dfc00315 	stw	ra,12(sp)
  e0dbf8:	df000215 	stw	fp,8(sp)
  e0dbfc:	df000204 	addi	fp,sp,8
  e0dc00:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
  e0dc04:	e13fff17 	ldw	r4,-4(fp)
  e0dc08:	d1601604 	addi	r5,gp,-32680
  e0dc0c:	0e0fc600 	call	e0fc60 <alt_find_dev>
  e0dc10:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  e0dc14:	e0bffe17 	ldw	r2,-8(fp)
  e0dc18:	1004c03a 	cmpne	r2,r2,zero
  e0dc1c:	1000041e 	bne	r2,zero,e0dc30 <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  e0dc20:	0e0db900 	call	e0db90 <alt_get_errno>
  e0dc24:	1007883a 	mov	r3,r2
  e0dc28:	008004c4 	movi	r2,19
  e0dc2c:	18800015 	stw	r2,0(r3)
  }

  return dev;
  e0dc30:	e0bffe17 	ldw	r2,-8(fp)

}
  e0dc34:	e037883a 	mov	sp,fp
  e0dc38:	dfc00117 	ldw	ra,4(sp)
  e0dc3c:	df000017 	ldw	fp,0(sp)
  e0dc40:	dec00204 	addi	sp,sp,8
  e0dc44:	f800283a 	ret

00e0dc48 <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
  e0dc48:	defffe04 	addi	sp,sp,-8
  e0dc4c:	df000115 	stw	fp,4(sp)
  e0dc50:	df000104 	addi	fp,sp,4
  e0dc54:	e13fff15 	stw	r4,-4(fp)
  return;
}
  e0dc58:	e037883a 	mov	sp,fp
  e0dc5c:	df000017 	ldw	fp,0(sp)
  e0dc60:	dec00104 	addi	sp,sp,4
  e0dc64:	f800283a 	ret

00e0dc68 <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
  e0dc68:	defff904 	addi	sp,sp,-28
  e0dc6c:	dfc00615 	stw	ra,24(sp)
  e0dc70:	df000515 	stw	fp,20(sp)
  e0dc74:	df000504 	addi	fp,sp,20
  e0dc78:	e13ffe15 	stw	r4,-8(fp)
  e0dc7c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  e0dc80:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
  e0dc84:	e0bffe17 	ldw	r2,-8(fp)
  e0dc88:	11000704 	addi	r4,r2,28
  e0dc8c:	01400044 	movi	r5,1
  e0dc90:	0e0e0480 	call	e0e048 <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
  e0dc94:	e0bffe17 	ldw	r2,-8(fp)
  e0dc98:	10800317 	ldw	r2,12(r2)
  e0dc9c:	10800037 	ldwio	r2,0(r2)
  e0dca0:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
  e0dca4:	e13ffe17 	ldw	r4,-8(fp)
  e0dca8:	e17ffc17 	ldw	r5,-16(fp)
  e0dcac:	0e0dd240 	call	e0dd24 <alt_mailbox_increment_ptr>
  e0dcb0:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
  e0dcb4:	e0bffe17 	ldw	r2,-8(fp)
  e0dcb8:	10800417 	ldw	r2,16(r2)
  e0dcbc:	10800037 	ldwio	r2,0(r2)
  e0dcc0:	1007883a 	mov	r3,r2
  e0dcc4:	e0bffb17 	ldw	r2,-20(fp)
  e0dcc8:	1880061e 	bne	r3,r2,e0dce4 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
  e0dccc:	0e0db900 	call	e0db90 <alt_get_errno>
  e0dcd0:	00c002c4 	movi	r3,11
  e0dcd4:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
  e0dcd8:	00bffd44 	movi	r2,-11
  e0dcdc:	e0bffd15 	stw	r2,-12(fp)
  e0dce0:	00000706 	br	e0dd00 <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
  e0dce4:	e0bffc17 	ldw	r2,-16(fp)
  e0dce8:	e0ffff17 	ldw	r3,-4(fp)
  e0dcec:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
  e0dcf0:	e0bffe17 	ldw	r2,-8(fp)
  e0dcf4:	10800317 	ldw	r2,12(r2)
  e0dcf8:	e0fffb17 	ldw	r3,-20(fp)
  e0dcfc:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
  e0dd00:	e0bffe17 	ldw	r2,-8(fp)
  e0dd04:	11000704 	addi	r4,r2,28
  e0dd08:	0e0e0c80 	call	e0e0c8 <altera_avalon_mutex_unlock>

  return ret_code;
  e0dd0c:	e0bffd17 	ldw	r2,-12(fp)

}
  e0dd10:	e037883a 	mov	sp,fp
  e0dd14:	dfc00117 	ldw	ra,4(sp)
  e0dd18:	df000017 	ldw	fp,0(sp)
  e0dd1c:	dec00204 	addi	sp,sp,8
  e0dd20:	f800283a 	ret

00e0dd24 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
  e0dd24:	defffd04 	addi	sp,sp,-12
  e0dd28:	df000215 	stw	fp,8(sp)
  e0dd2c:	df000204 	addi	fp,sp,8
  e0dd30:	e13ffe15 	stw	r4,-8(fp)
  e0dd34:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
  e0dd38:	e0bfff17 	ldw	r2,-4(fp)
  e0dd3c:	10800104 	addi	r2,r2,4
  e0dd40:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
  e0dd44:	e0bffe17 	ldw	r2,-8(fp)
  e0dd48:	10c00617 	ldw	r3,24(r2)
  e0dd4c:	e0bfff17 	ldw	r2,-4(fp)
  e0dd50:	1880032e 	bgeu	r3,r2,e0dd60 <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
  e0dd54:	e0bffe17 	ldw	r2,-8(fp)
  e0dd58:	10800517 	ldw	r2,20(r2)
  e0dd5c:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
  e0dd60:	e0bfff17 	ldw	r2,-4(fp)
}
  e0dd64:	e037883a 	mov	sp,fp
  e0dd68:	df000017 	ldw	fp,0(sp)
  e0dd6c:	dec00104 	addi	sp,sp,4
  e0dd70:	f800283a 	ret

00e0dd74 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
  e0dd74:	defffa04 	addi	sp,sp,-24
  e0dd78:	dfc00515 	stw	ra,20(sp)
  e0dd7c:	df000415 	stw	fp,16(sp)
  e0dd80:	dc000315 	stw	r16,12(sp)
  e0dd84:	df000304 	addi	fp,sp,12
  e0dd88:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  e0dd8c:	e0bfff17 	ldw	r2,-4(fp)
  e0dd90:	11000b04 	addi	r4,r2,44
  e0dd94:	01400044 	movi	r5,1
  e0dd98:	0e0e0480 	call	e0e048 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  e0dd9c:	e0bfff17 	ldw	r2,-4(fp)
  e0dda0:	10800417 	ldw	r2,16(r2)
  e0dda4:	10800037 	ldwio	r2,0(r2)
  e0dda8:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
  e0ddac:	e0bfff17 	ldw	r2,-4(fp)
  e0ddb0:	10800317 	ldw	r2,12(r2)
  e0ddb4:	10800037 	ldwio	r2,0(r2)
  e0ddb8:	1007883a 	mov	r3,r2
  e0ddbc:	e0bffd17 	ldw	r2,-12(fp)
  e0ddc0:	18bffa26 	beq	r3,r2,e0ddac <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
  e0ddc4:	e0bffd17 	ldw	r2,-12(fp)
  e0ddc8:	10800037 	ldwio	r2,0(r2)
  e0ddcc:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
  e0ddd0:	e0bfff17 	ldw	r2,-4(fp)
  e0ddd4:	10800417 	ldw	r2,16(r2)
  e0ddd8:	1021883a 	mov	r16,r2
  e0dddc:	e13fff17 	ldw	r4,-4(fp)
  e0dde0:	e17ffd17 	ldw	r5,-12(fp)
  e0dde4:	0e0dd240 	call	e0dd24 <alt_mailbox_increment_ptr>
  e0dde8:	1007883a 	mov	r3,r2
  e0ddec:	8005883a 	mov	r2,r16
  e0ddf0:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
  e0ddf4:	e0bfff17 	ldw	r2,-4(fp)
  e0ddf8:	11000b04 	addi	r4,r2,44
  e0ddfc:	0e0e0c80 	call	e0e0c8 <altera_avalon_mutex_unlock>

  return msg;
  e0de00:	e0bffe17 	ldw	r2,-8(fp)

}
  e0de04:	e037883a 	mov	sp,fp
  e0de08:	dfc00217 	ldw	ra,8(sp)
  e0de0c:	df000117 	ldw	fp,4(sp)
  e0de10:	dc000017 	ldw	r16,0(sp)
  e0de14:	dec00304 	addi	sp,sp,12
  e0de18:	f800283a 	ret

00e0de1c <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
  e0de1c:	defff904 	addi	sp,sp,-28
  e0de20:	dfc00615 	stw	ra,24(sp)
  e0de24:	df000515 	stw	fp,20(sp)
  e0de28:	dc000415 	stw	r16,16(sp)
  e0de2c:	df000404 	addi	fp,sp,16
  e0de30:	e13ffe15 	stw	r4,-8(fp)
  e0de34:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
  e0de38:	e0bfff17 	ldw	r2,-4(fp)
  e0de3c:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  e0de40:	e0bffe17 	ldw	r2,-8(fp)
  e0de44:	11000b04 	addi	r4,r2,44
  e0de48:	01400044 	movi	r5,1
  e0de4c:	0e0e0480 	call	e0e048 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  e0de50:	e0bffe17 	ldw	r2,-8(fp)
  e0de54:	10800417 	ldw	r2,16(r2)
  e0de58:	10800037 	ldwio	r2,0(r2)
  e0de5c:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
  e0de60:	e0bffe17 	ldw	r2,-8(fp)
  e0de64:	10800317 	ldw	r2,12(r2)
  e0de68:	10800037 	ldwio	r2,0(r2)
  e0de6c:	1007883a 	mov	r3,r2
  e0de70:	e0bffc17 	ldw	r2,-16(fp)
  e0de74:	1880091e 	bne	r3,r2,e0de9c <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
  e0de78:	e0ffff17 	ldw	r3,-4(fp)
  e0de7c:	00bffd44 	movi	r2,-11
  e0de80:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
  e0de84:	0e0db900 	call	e0db90 <alt_get_errno>
  e0de88:	1007883a 	mov	r3,r2
  e0de8c:	008002c4 	movi	r2,11
  e0de90:	18800015 	stw	r2,0(r3)
    msg = 0;
  e0de94:	e03ffd15 	stw	zero,-12(fp)
  e0de98:	00000c06 	br	e0decc <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
  e0de9c:	e0bffc17 	ldw	r2,-16(fp)
  e0dea0:	10800037 	ldwio	r2,0(r2)
  e0dea4:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
  e0dea8:	e0bffe17 	ldw	r2,-8(fp)
  e0deac:	10800417 	ldw	r2,16(r2)
  e0deb0:	1021883a 	mov	r16,r2
  e0deb4:	e13ffe17 	ldw	r4,-8(fp)
  e0deb8:	e17ffc17 	ldw	r5,-16(fp)
  e0debc:	0e0dd240 	call	e0dd24 <alt_mailbox_increment_ptr>
  e0dec0:	1007883a 	mov	r3,r2
  e0dec4:	8005883a 	mov	r2,r16
  e0dec8:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
  e0decc:	e0bffe17 	ldw	r2,-8(fp)
  e0ded0:	11000b04 	addi	r4,r2,44
  e0ded4:	0e0e0c80 	call	e0e0c8 <altera_avalon_mutex_unlock>

  return msg;
  e0ded8:	e0bffd17 	ldw	r2,-12(fp)

}
  e0dedc:	e037883a 	mov	sp,fp
  e0dee0:	dfc00217 	ldw	ra,8(sp)
  e0dee4:	df000117 	ldw	fp,4(sp)
  e0dee8:	dc000017 	ldw	r16,0(sp)
  e0deec:	dec00304 	addi	sp,sp,12
  e0def0:	f800283a 	ret

00e0def4 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  e0def4:	defff904 	addi	sp,sp,-28
  e0def8:	df000615 	stw	fp,24(sp)
  e0defc:	df000604 	addi	fp,sp,24
  e0df00:	e13ffe15 	stw	r4,-8(fp)
  e0df04:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
  e0df08:	00bfffc4 	movi	r2,-1
  e0df0c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
  e0df10:	0005317a 	rdctl	r2,cpuid
  e0df14:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
  e0df18:	e0bffd17 	ldw	r2,-12(fp)
  e0df1c:	1006943a 	slli	r3,r2,16
  e0df20:	e0bfff17 	ldw	r2,-4(fp)
  e0df24:	1884b03a 	or	r2,r3,r2
  e0df28:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
  e0df2c:	e0bffe17 	ldw	r2,-8(fp)
  e0df30:	10800317 	ldw	r2,12(r2)
  e0df34:	e0fffc17 	ldw	r3,-16(fp)
  e0df38:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  e0df3c:	e0bffe17 	ldw	r2,-8(fp)
  e0df40:	10800317 	ldw	r2,12(r2)
  e0df44:	10800037 	ldwio	r2,0(r2)
  e0df48:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
  e0df4c:	e0fffb17 	ldw	r3,-20(fp)
  e0df50:	e0bffc17 	ldw	r2,-16(fp)
  e0df54:	1880011e 	bne	r3,r2,e0df5c <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
  e0df58:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
  e0df5c:	e0bffa17 	ldw	r2,-24(fp)
}
  e0df60:	e037883a 	mov	sp,fp
  e0df64:	df000017 	ldw	fp,0(sp)
  e0df68:	dec00104 	addi	sp,sp,4
  e0df6c:	f800283a 	ret

00e0df70 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
  e0df70:	defffc04 	addi	sp,sp,-16
  e0df74:	dfc00315 	stw	ra,12(sp)
  e0df78:	df000215 	stw	fp,8(sp)
  e0df7c:	df000204 	addi	fp,sp,8
  e0df80:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
  e0df84:	e13fff17 	ldw	r4,-4(fp)
  e0df88:	d1601804 	addi	r5,gp,-32672
  e0df8c:	0e0fc600 	call	e0fc60 <alt_find_dev>
  e0df90:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  e0df94:	e0bffe17 	ldw	r2,-8(fp)
  e0df98:	1004c03a 	cmpne	r2,r2,zero
  e0df9c:	1000041e 	bne	r2,zero,e0dfb0 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  e0dfa0:	0e0dfc80 	call	e0dfc8 <alt_get_errno>
  e0dfa4:	1007883a 	mov	r3,r2
  e0dfa8:	008004c4 	movi	r2,19
  e0dfac:	18800015 	stw	r2,0(r3)
  }

  return dev;
  e0dfb0:	e0bffe17 	ldw	r2,-8(fp)
}
  e0dfb4:	e037883a 	mov	sp,fp
  e0dfb8:	dfc00117 	ldw	ra,4(sp)
  e0dfbc:	df000017 	ldw	fp,0(sp)
  e0dfc0:	dec00204 	addi	sp,sp,8
  e0dfc4:	f800283a 	ret

00e0dfc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e0dfc8:	defffd04 	addi	sp,sp,-12
  e0dfcc:	dfc00215 	stw	ra,8(sp)
  e0dfd0:	df000115 	stw	fp,4(sp)
  e0dfd4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e0dfd8:	00803874 	movhi	r2,225
  e0dfdc:	108b5204 	addi	r2,r2,11592
  e0dfe0:	10800017 	ldw	r2,0(r2)
  e0dfe4:	1005003a 	cmpeq	r2,r2,zero
  e0dfe8:	1000061e 	bne	r2,zero,e0e004 <alt_get_errno+0x3c>
  e0dfec:	00803874 	movhi	r2,225
  e0dff0:	108b5204 	addi	r2,r2,11592
  e0dff4:	10800017 	ldw	r2,0(r2)
  e0dff8:	103ee83a 	callr	r2
  e0dffc:	e0bfff15 	stw	r2,-4(fp)
  e0e000:	00000306 	br	e0e010 <alt_get_errno+0x48>
  e0e004:	00803874 	movhi	r2,225
  e0e008:	10925704 	addi	r2,r2,18780
  e0e00c:	e0bfff15 	stw	r2,-4(fp)
  e0e010:	e0bfff17 	ldw	r2,-4(fp)
}
  e0e014:	e037883a 	mov	sp,fp
  e0e018:	dfc00117 	ldw	ra,4(sp)
  e0e01c:	df000017 	ldw	fp,0(sp)
  e0e020:	dec00204 	addi	sp,sp,8
  e0e024:	f800283a 	ret

00e0e028 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
  e0e028:	defffe04 	addi	sp,sp,-8
  e0e02c:	df000115 	stw	fp,4(sp)
  e0e030:	df000104 	addi	fp,sp,4
  e0e034:	e13fff15 	stw	r4,-4(fp)
  return;
}
  e0e038:	e037883a 	mov	sp,fp
  e0e03c:	df000017 	ldw	fp,0(sp)
  e0e040:	dec00104 	addi	sp,sp,4
  e0e044:	f800283a 	ret

00e0e048 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
  e0e048:	defffc04 	addi	sp,sp,-16
  e0e04c:	dfc00315 	stw	ra,12(sp)
  e0e050:	df000215 	stw	fp,8(sp)
  e0e054:	df000204 	addi	fp,sp,8
  e0e058:	e13ffe15 	stw	r4,-8(fp)
  e0e05c:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
  e0e060:	e13ffe17 	ldw	r4,-8(fp)
  e0e064:	e17fff17 	ldw	r5,-4(fp)
  e0e068:	0e0def40 	call	e0def4 <alt_mutex_trylock>
  e0e06c:	1004c03a 	cmpne	r2,r2,zero
  e0e070:	103ffb1e 	bne	r2,zero,e0e060 <altera_avalon_mutex_lock+0x18>
}
  e0e074:	e037883a 	mov	sp,fp
  e0e078:	dfc00117 	ldw	ra,4(sp)
  e0e07c:	df000017 	ldw	fp,0(sp)
  e0e080:	dec00204 	addi	sp,sp,8
  e0e084:	f800283a 	ret

00e0e088 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  e0e088:	defffb04 	addi	sp,sp,-20
  e0e08c:	dfc00415 	stw	ra,16(sp)
  e0e090:	df000315 	stw	fp,12(sp)
  e0e094:	df000304 	addi	fp,sp,12
  e0e098:	e13ffe15 	stw	r4,-8(fp)
  e0e09c:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
  e0e0a0:	e13ffe17 	ldw	r4,-8(fp)
  e0e0a4:	e17fff17 	ldw	r5,-4(fp)
  e0e0a8:	0e0def40 	call	e0def4 <alt_mutex_trylock>
  e0e0ac:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
  e0e0b0:	e0bffd17 	ldw	r2,-12(fp)
}
  e0e0b4:	e037883a 	mov	sp,fp
  e0e0b8:	dfc00117 	ldw	ra,4(sp)
  e0e0bc:	df000017 	ldw	fp,0(sp)
  e0e0c0:	dec00204 	addi	sp,sp,8
  e0e0c4:	f800283a 	ret

00e0e0c8 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  e0e0c8:	defffd04 	addi	sp,sp,-12
  e0e0cc:	df000215 	stw	fp,8(sp)
  e0e0d0:	df000204 	addi	fp,sp,8
  e0e0d4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
  e0e0d8:	0005317a 	rdctl	r2,cpuid
  e0e0dc:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
  e0e0e0:	e0bfff17 	ldw	r2,-4(fp)
  e0e0e4:	10800317 	ldw	r2,12(r2)
  e0e0e8:	10800104 	addi	r2,r2,4
  e0e0ec:	1007883a 	mov	r3,r2
  e0e0f0:	00800044 	movi	r2,1
  e0e0f4:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
  e0e0f8:	e0bfff17 	ldw	r2,-4(fp)
  e0e0fc:	11000317 	ldw	r4,12(r2)
  e0e100:	e0bffe17 	ldw	r2,-8(fp)
  e0e104:	1004943a 	slli	r2,r2,16
  e0e108:	1007883a 	mov	r3,r2
  e0e10c:	2005883a 	mov	r2,r4
  e0e110:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
  e0e114:	e037883a 	mov	sp,fp
  e0e118:	df000017 	ldw	fp,0(sp)
  e0e11c:	dec00104 	addi	sp,sp,4
  e0e120:	f800283a 	ret

00e0e124 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  e0e124:	defff904 	addi	sp,sp,-28
  e0e128:	df000615 	stw	fp,24(sp)
  e0e12c:	df000604 	addi	fp,sp,24
  e0e130:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
  e0e134:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
  e0e138:	0005317a 	rdctl	r2,cpuid
  e0e13c:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  e0e140:	e0bfff17 	ldw	r2,-4(fp)
  e0e144:	10800317 	ldw	r2,12(r2)
  e0e148:	10800037 	ldwio	r2,0(r2)
  e0e14c:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
  e0e150:	e0bffd17 	ldw	r2,-12(fp)
  e0e154:	10bfffec 	andhi	r2,r2,65535
  e0e158:	1004d43a 	srli	r2,r2,16
  e0e15c:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
  e0e160:	e0fffc17 	ldw	r3,-16(fp)
  e0e164:	e0bffe17 	ldw	r2,-8(fp)
  e0e168:	1880081e 	bne	r3,r2,e0e18c <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
  e0e16c:	e0bffd17 	ldw	r2,-12(fp)
  e0e170:	10bfffcc 	andi	r2,r2,65535
  e0e174:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
  e0e178:	e0bffb17 	ldw	r2,-20(fp)
  e0e17c:	1005003a 	cmpeq	r2,r2,zero
  e0e180:	1000021e 	bne	r2,zero,e0e18c <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
  e0e184:	00800044 	movi	r2,1
  e0e188:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
  e0e18c:	e0bffa17 	ldw	r2,-24(fp)
}
  e0e190:	e037883a 	mov	sp,fp
  e0e194:	df000017 	ldw	fp,0(sp)
  e0e198:	dec00104 	addi	sp,sp,4
  e0e19c:	f800283a 	ret

00e0e1a0 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  e0e1a0:	defffc04 	addi	sp,sp,-16
  e0e1a4:	df000315 	stw	fp,12(sp)
  e0e1a8:	df000304 	addi	fp,sp,12
  e0e1ac:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
  e0e1b0:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
  e0e1b4:	e0bfff17 	ldw	r2,-4(fp)
  e0e1b8:	10800317 	ldw	r2,12(r2)
  e0e1bc:	10800104 	addi	r2,r2,4
  e0e1c0:	10800037 	ldwio	r2,0(r2)
  e0e1c4:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
  e0e1c8:	e0bffe17 	ldw	r2,-8(fp)
  e0e1cc:	1080004c 	andi	r2,r2,1
  e0e1d0:	10803fcc 	andi	r2,r2,255
  e0e1d4:	1005003a 	cmpeq	r2,r2,zero
  e0e1d8:	1000021e 	bne	r2,zero,e0e1e4 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
  e0e1dc:	00800044 	movi	r2,1
  e0e1e0:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
  e0e1e4:	e0bffd17 	ldw	r2,-12(fp)
}
  e0e1e8:	e037883a 	mov	sp,fp
  e0e1ec:	df000017 	ldw	fp,0(sp)
  e0e1f0:	dec00104 	addi	sp,sp,4
  e0e1f4:	f800283a 	ret

00e0e1f8 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
  e0e1f8:	defff904 	addi	sp,sp,-28
  e0e1fc:	df000615 	stw	fp,24(sp)
  e0e200:	df000604 	addi	fp,sp,24
  e0e204:	e13ffe15 	stw	r4,-8(fp)
  e0e208:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
  e0e20c:	e03ffa15 	stw	zero,-24(fp)
  e0e210:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
  e0e214:	e0bffe17 	ldw	r2,-8(fp)
  e0e218:	10000035 	stwio	zero,0(r2)
  lo = IORD(hw_base_address, ( which_section*4   ));
  e0e21c:	e0bfff17 	ldw	r2,-4(fp)
  e0e220:	1004913a 	slli	r2,r2,4
  e0e224:	1007883a 	mov	r3,r2
  e0e228:	e0bffe17 	ldw	r2,-8(fp)
  e0e22c:	1885883a 	add	r2,r3,r2
  e0e230:	10800037 	ldwio	r2,0(r2)
  e0e234:	e0bffd15 	stw	r2,-12(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
  e0e238:	e0bfff17 	ldw	r2,-4(fp)
  e0e23c:	1004913a 	slli	r2,r2,4
  e0e240:	1007883a 	mov	r3,r2
  e0e244:	e0bffe17 	ldw	r2,-8(fp)
  e0e248:	1885883a 	add	r2,r3,r2
  e0e24c:	10800104 	addi	r2,r2,4
  e0e250:	10800037 	ldwio	r2,0(r2)
  e0e254:	e0bffc15 	stw	r2,-16(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
  e0e258:	e0bffc17 	ldw	r2,-16(fp)
  e0e25c:	0007883a 	mov	r3,zero
  e0e260:	100a983a 	sll	r5,r2,zero
  e0e264:	0009883a 	mov	r4,zero
  e0e268:	e0bffd17 	ldw	r2,-12(fp)
  e0e26c:	0007883a 	mov	r3,zero
  e0e270:	208cb03a 	or	r6,r4,r2
  e0e274:	e1bffa15 	stw	r6,-24(fp)
  e0e278:	28c4b03a 	or	r2,r5,r3
  e0e27c:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
  e0e280:	e17ffa17 	ldw	r5,-24(fp)
  e0e284:	e1bffb17 	ldw	r6,-20(fp)
  e0e288:	2807883a 	mov	r3,r5
  e0e28c:	3009883a 	mov	r4,r6
}
  e0e290:	1805883a 	mov	r2,r3
  e0e294:	2007883a 	mov	r3,r4
  e0e298:	e037883a 	mov	sp,fp
  e0e29c:	df000017 	ldw	fp,0(sp)
  e0e2a0:	dec00104 	addi	sp,sp,4
  e0e2a4:	f800283a 	ret

00e0e2a8 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
  e0e2a8:	defffd04 	addi	sp,sp,-12
  e0e2ac:	dfc00215 	stw	ra,8(sp)
  e0e2b0:	df000115 	stw	fp,4(sp)
  e0e2b4:	df000104 	addi	fp,sp,4
  e0e2b8:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
  e0e2bc:	e13fff17 	ldw	r4,-4(fp)
  e0e2c0:	000b883a 	mov	r5,zero
  e0e2c4:	0e0e1f80 	call	e0e1f8 <perf_get_section_time>
  e0e2c8:	1009883a 	mov	r4,r2
  e0e2cc:	180b883a 	mov	r5,r3
  e0e2d0:	200d883a 	mov	r6,r4
  e0e2d4:	280f883a 	mov	r7,r5
  e0e2d8:	3007883a 	mov	r3,r6
  e0e2dc:	3809883a 	mov	r4,r7
}
  e0e2e0:	1805883a 	mov	r2,r3
  e0e2e4:	2007883a 	mov	r3,r4
  e0e2e8:	e037883a 	mov	sp,fp
  e0e2ec:	dfc00117 	ldw	ra,4(sp)
  e0e2f0:	df000017 	ldw	fp,0(sp)
  e0e2f4:	dec00204 	addi	sp,sp,8
  e0e2f8:	f800283a 	ret

00e0e2fc <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
  e0e2fc:	defffd04 	addi	sp,sp,-12
  e0e300:	df000215 	stw	fp,8(sp)
  e0e304:	df000204 	addi	fp,sp,8
  e0e308:	e13ffe15 	stw	r4,-8(fp)
  e0e30c:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
  e0e310:	e0bfff17 	ldw	r2,-4(fp)
  e0e314:	1004913a 	slli	r2,r2,4
  e0e318:	1007883a 	mov	r3,r2
  e0e31c:	e0bffe17 	ldw	r2,-8(fp)
  e0e320:	1885883a 	add	r2,r3,r2
  e0e324:	10800204 	addi	r2,r2,8
  e0e328:	10800037 	ldwio	r2,0(r2)
}
  e0e32c:	e037883a 	mov	sp,fp
  e0e330:	df000017 	ldw	fp,0(sp)
  e0e334:	dec00104 	addi	sp,sp,4
  e0e338:	f800283a 	ret

00e0e33c <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
  e0e33c:	deffff04 	addi	sp,sp,-4
  e0e340:	df000015 	stw	fp,0(sp)
  e0e344:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
  e0e348:	0005883a 	mov	r2,zero
#else
    return (void*)0;
#endif
}
  e0e34c:	e037883a 	mov	sp,fp
  e0e350:	df000017 	ldw	fp,0(sp)
  e0e354:	dec00104 	addi	sp,sp,4
  e0e358:	f800283a 	ret

00e0e35c <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
  e0e35c:	deffff04 	addi	sp,sp,-4
  e0e360:	df000015 	stw	fp,0(sp)
  e0e364:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
  e0e368:	0080bef4 	movhi	r2,763
  e0e36c:	10bc2004 	addi	r2,r2,-3968
}
  e0e370:	e037883a 	mov	sp,fp
  e0e374:	df000017 	ldw	fp,0(sp)
  e0e378:	dec00104 	addi	sp,sp,4
  e0e37c:	f800283a 	ret

00e0e380 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  e0e380:	defffc04 	addi	sp,sp,-16
  e0e384:	dfc00315 	stw	ra,12(sp)
  e0e388:	df000215 	stw	fp,8(sp)
  e0e38c:	df000204 	addi	fp,sp,8
  e0e390:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  e0e394:	e13fff17 	ldw	r4,-4(fp)
  e0e398:	01403874 	movhi	r5,225
  e0e39c:	294b4f04 	addi	r5,r5,11580
  e0e3a0:	0e0fc600 	call	e0fc60 <alt_find_dev>
  e0e3a4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  e0e3a8:	e0bffe17 	ldw	r2,-8(fp)
}
  e0e3ac:	e037883a 	mov	sp,fp
  e0e3b0:	dfc00117 	ldw	ra,4(sp)
  e0e3b4:	df000017 	ldw	fp,0(sp)
  e0e3b8:	dec00204 	addi	sp,sp,8
  e0e3bc:	f800283a 	ret

00e0e3c0 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  e0e3c0:	defff904 	addi	sp,sp,-28
  e0e3c4:	df000615 	stw	fp,24(sp)
  e0e3c8:	df000604 	addi	fp,sp,24
  e0e3cc:	e13ffb15 	stw	r4,-20(fp)
  e0e3d0:	e17ffc15 	stw	r5,-16(fp)
  e0e3d4:	e1bffd15 	stw	r6,-12(fp)
  e0e3d8:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  e0e3dc:	e0bffb17 	ldw	r2,-20(fp)
  e0e3e0:	10c00f17 	ldw	r3,60(r2)
  e0e3e4:	e0bffd17 	ldw	r2,-12(fp)
  e0e3e8:	10c0042e 	bgeu	r2,r3,e0e3fc <alt_up_pixel_buffer_dma_draw+0x3c>
  e0e3ec:	e0bffb17 	ldw	r2,-20(fp)
  e0e3f0:	10c01017 	ldw	r3,64(r2)
  e0e3f4:	e0bffe17 	ldw	r2,-8(fp)
  e0e3f8:	10c00336 	bltu	r2,r3,e0e408 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  e0e3fc:	00bfffc4 	movi	r2,-1
  e0e400:	e0bfff15 	stw	r2,-4(fp)
  e0e404:	00005106 	br	e0e54c <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  e0e408:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  e0e40c:	e0bffb17 	ldw	r2,-20(fp)
  e0e410:	10800d17 	ldw	r2,52(r2)
  e0e414:	1004c03a 	cmpne	r2,r2,zero
  e0e418:	1000151e 	bne	r2,zero,e0e470 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  e0e41c:	e0bffb17 	ldw	r2,-20(fp)
  e0e420:	10c01217 	ldw	r3,72(r2)
  e0e424:	e0bffd17 	ldw	r2,-12(fp)
  e0e428:	1886703a 	and	r3,r3,r2
  e0e42c:	e0bffb17 	ldw	r2,-20(fp)
  e0e430:	10801117 	ldw	r2,68(r2)
  e0e434:	1886983a 	sll	r3,r3,r2
  e0e438:	e0bffa17 	ldw	r2,-24(fp)
  e0e43c:	10c4b03a 	or	r2,r2,r3
  e0e440:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  e0e444:	e0bffb17 	ldw	r2,-20(fp)
  e0e448:	10c01417 	ldw	r3,80(r2)
  e0e44c:	e0bffe17 	ldw	r2,-8(fp)
  e0e450:	1886703a 	and	r3,r3,r2
  e0e454:	e0bffb17 	ldw	r2,-20(fp)
  e0e458:	10801317 	ldw	r2,76(r2)
  e0e45c:	1886983a 	sll	r3,r3,r2
  e0e460:	e0bffa17 	ldw	r2,-24(fp)
  e0e464:	10c4b03a 	or	r2,r2,r3
  e0e468:	e0bffa15 	stw	r2,-24(fp)
  e0e46c:	00001706 	br	e0e4cc <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  e0e470:	e0bffb17 	ldw	r2,-20(fp)
  e0e474:	10c01217 	ldw	r3,72(r2)
  e0e478:	e0bffd17 	ldw	r2,-12(fp)
  e0e47c:	1886703a 	and	r3,r3,r2
  e0e480:	e0bffb17 	ldw	r2,-20(fp)
  e0e484:	10801117 	ldw	r2,68(r2)
  e0e488:	1886983a 	sll	r3,r3,r2
  e0e48c:	e0bffa17 	ldw	r2,-24(fp)
  e0e490:	10c5883a 	add	r2,r2,r3
  e0e494:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  e0e498:	e0bffb17 	ldw	r2,-20(fp)
  e0e49c:	10c01417 	ldw	r3,80(r2)
  e0e4a0:	e0bffe17 	ldw	r2,-8(fp)
  e0e4a4:	1886703a 	and	r3,r3,r2
  e0e4a8:	e0bffb17 	ldw	r2,-20(fp)
  e0e4ac:	10800f17 	ldw	r2,60(r2)
  e0e4b0:	1887383a 	mul	r3,r3,r2
  e0e4b4:	e0bffb17 	ldw	r2,-20(fp)
  e0e4b8:	10801117 	ldw	r2,68(r2)
  e0e4bc:	1886983a 	sll	r3,r3,r2
  e0e4c0:	e0bffa17 	ldw	r2,-24(fp)
  e0e4c4:	10c5883a 	add	r2,r2,r3
  e0e4c8:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  e0e4cc:	e0bffb17 	ldw	r2,-20(fp)
  e0e4d0:	10800e17 	ldw	r2,56(r2)
  e0e4d4:	10800058 	cmpnei	r2,r2,1
  e0e4d8:	1000081e 	bne	r2,zero,e0e4fc <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  e0e4dc:	e0bffb17 	ldw	r2,-20(fp)
  e0e4e0:	10800c17 	ldw	r2,48(r2)
  e0e4e4:	1007883a 	mov	r3,r2
  e0e4e8:	e0bffa17 	ldw	r2,-24(fp)
  e0e4ec:	1885883a 	add	r2,r3,r2
  e0e4f0:	e0fffc17 	ldw	r3,-16(fp)
  e0e4f4:	10c00025 	stbio	r3,0(r2)
  e0e4f8:	00001306 	br	e0e548 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  e0e4fc:	e0bffb17 	ldw	r2,-20(fp)
  e0e500:	10800e17 	ldw	r2,56(r2)
  e0e504:	10800098 	cmpnei	r2,r2,2
  e0e508:	1000081e 	bne	r2,zero,e0e52c <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  e0e50c:	e0bffb17 	ldw	r2,-20(fp)
  e0e510:	10800c17 	ldw	r2,48(r2)
  e0e514:	1007883a 	mov	r3,r2
  e0e518:	e0bffa17 	ldw	r2,-24(fp)
  e0e51c:	1885883a 	add	r2,r3,r2
  e0e520:	e0fffc17 	ldw	r3,-16(fp)
  e0e524:	10c0002d 	sthio	r3,0(r2)
  e0e528:	00000706 	br	e0e548 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  e0e52c:	e0bffb17 	ldw	r2,-20(fp)
  e0e530:	10800c17 	ldw	r2,48(r2)
  e0e534:	1007883a 	mov	r3,r2
  e0e538:	e0bffa17 	ldw	r2,-24(fp)
  e0e53c:	1885883a 	add	r2,r3,r2
  e0e540:	e0fffc17 	ldw	r3,-16(fp)
  e0e544:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  e0e548:	e03fff15 	stw	zero,-4(fp)
  e0e54c:	e0bfff17 	ldw	r2,-4(fp)
}
  e0e550:	e037883a 	mov	sp,fp
  e0e554:	df000017 	ldw	fp,0(sp)
  e0e558:	dec00104 	addi	sp,sp,4
  e0e55c:	f800283a 	ret

00e0e560 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  e0e560:	defffd04 	addi	sp,sp,-12
  e0e564:	df000215 	stw	fp,8(sp)
  e0e568:	df000204 	addi	fp,sp,8
  e0e56c:	e13ffe15 	stw	r4,-8(fp)
  e0e570:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  e0e574:	e0bffe17 	ldw	r2,-8(fp)
  e0e578:	10800a17 	ldw	r2,40(r2)
  e0e57c:	10800104 	addi	r2,r2,4
  e0e580:	e0ffff17 	ldw	r3,-4(fp)
  e0e584:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  e0e588:	e0bffe17 	ldw	r2,-8(fp)
  e0e58c:	10800a17 	ldw	r2,40(r2)
  e0e590:	10800104 	addi	r2,r2,4
  e0e594:	10800037 	ldwio	r2,0(r2)
  e0e598:	1007883a 	mov	r3,r2
  e0e59c:	e0bffe17 	ldw	r2,-8(fp)
  e0e5a0:	10c00c15 	stw	r3,48(r2)
	return 0;
  e0e5a4:	0005883a 	mov	r2,zero
}
  e0e5a8:	e037883a 	mov	sp,fp
  e0e5ac:	df000017 	ldw	fp,0(sp)
  e0e5b0:	dec00104 	addi	sp,sp,4
  e0e5b4:	f800283a 	ret

00e0e5b8 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  e0e5b8:	defffe04 	addi	sp,sp,-8
  e0e5bc:	df000115 	stw	fp,4(sp)
  e0e5c0:	df000104 	addi	fp,sp,4
  e0e5c4:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  e0e5c8:	e0bfff17 	ldw	r2,-4(fp)
  e0e5cc:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  e0e5d0:	e0bfff17 	ldw	r2,-4(fp)
  e0e5d4:	10800a17 	ldw	r2,40(r2)
  e0e5d8:	1007883a 	mov	r3,r2
  e0e5dc:	00800044 	movi	r2,1
  e0e5e0:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  e0e5e4:	e0bfff17 	ldw	r2,-4(fp)
  e0e5e8:	10c00b17 	ldw	r3,44(r2)
  e0e5ec:	e0bfff17 	ldw	r2,-4(fp)
  e0e5f0:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  e0e5f4:	e0bfff17 	ldw	r2,-4(fp)
  e0e5f8:	11000b15 	stw	r4,44(r2)
	return 0;
  e0e5fc:	0005883a 	mov	r2,zero
}
  e0e600:	e037883a 	mov	sp,fp
  e0e604:	df000017 	ldw	fp,0(sp)
  e0e608:	dec00104 	addi	sp,sp,4
  e0e60c:	f800283a 	ret

00e0e610 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  e0e610:	defffe04 	addi	sp,sp,-8
  e0e614:	df000115 	stw	fp,4(sp)
  e0e618:	df000104 	addi	fp,sp,4
  e0e61c:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  e0e620:	e0bfff17 	ldw	r2,-4(fp)
  e0e624:	10800a17 	ldw	r2,40(r2)
  e0e628:	10800304 	addi	r2,r2,12
  e0e62c:	10800037 	ldwio	r2,0(r2)
  e0e630:	1080004c 	andi	r2,r2,1
}
  e0e634:	e037883a 	mov	sp,fp
  e0e638:	df000017 	ldw	fp,0(sp)
  e0e63c:	dec00104 	addi	sp,sp,4
  e0e640:	f800283a 	ret

00e0e644 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  e0e644:	defff604 	addi	sp,sp,-40
  e0e648:	df000915 	stw	fp,36(sp)
  e0e64c:	df000904 	addi	fp,sp,36
  e0e650:	e13ff715 	stw	r4,-36(fp)
  e0e654:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  e0e658:	e0bff817 	ldw	r2,-32(fp)
  e0e65c:	10800058 	cmpnei	r2,r2,1
  e0e660:	1000041e 	bne	r2,zero,e0e674 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  e0e664:	e0bff717 	ldw	r2,-36(fp)
  e0e668:	10800c17 	ldw	r2,48(r2)
  e0e66c:	e0bfff15 	stw	r2,-4(fp)
  e0e670:	00000306 	br	e0e680 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  e0e674:	e0bff717 	ldw	r2,-36(fp)
  e0e678:	10800b17 	ldw	r2,44(r2)
  e0e67c:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  e0e680:	e0bff717 	ldw	r2,-36(fp)
  e0e684:	10800f17 	ldw	r2,60(r2)
  e0e688:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  e0e68c:	e0bff717 	ldw	r2,-36(fp)
  e0e690:	10800e17 	ldw	r2,56(r2)
  e0e694:	10800098 	cmpnei	r2,r2,2
  e0e698:	1000051e 	bne	r2,zero,e0e6b0 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  e0e69c:	e0fffe17 	ldw	r3,-8(fp)
  e0e6a0:	e0fffe17 	ldw	r3,-8(fp)
  e0e6a4:	18c5883a 	add	r2,r3,r3
  e0e6a8:	e0bffe15 	stw	r2,-8(fp)
  e0e6ac:	00000506 	br	e0e6c4 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  e0e6b0:	e13ffe17 	ldw	r4,-8(fp)
  e0e6b4:	e13ffe17 	ldw	r4,-8(fp)
  e0e6b8:	2105883a 	add	r2,r4,r4
  e0e6bc:	1085883a 	add	r2,r2,r2
  e0e6c0:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  e0e6c4:	e0bff717 	ldw	r2,-36(fp)
  e0e6c8:	10801017 	ldw	r2,64(r2)
  e0e6cc:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  e0e6d0:	e0bff717 	ldw	r2,-36(fp)
  e0e6d4:	10800d17 	ldw	r2,52(r2)
  e0e6d8:	1004c03a 	cmpne	r2,r2,zero
  e0e6dc:	10001e1e 	bne	r2,zero,e0e758 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  e0e6e0:	e0bff717 	ldw	r2,-36(fp)
  e0e6e4:	10801317 	ldw	r2,76(r2)
  e0e6e8:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  e0e6ec:	e03ffb15 	stw	zero,-20(fp)
  e0e6f0:	00001506 	br	e0e748 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  e0e6f4:	e03ffc15 	stw	zero,-16(fp)
  e0e6f8:	00000706 	br	e0e718 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  e0e6fc:	e0ffff17 	ldw	r3,-4(fp)
  e0e700:	e0bffc17 	ldw	r2,-16(fp)
  e0e704:	1885883a 	add	r2,r3,r2
  e0e708:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  e0e70c:	e0bffc17 	ldw	r2,-16(fp)
  e0e710:	10800104 	addi	r2,r2,4
  e0e714:	e0bffc15 	stw	r2,-16(fp)
  e0e718:	e0fffc17 	ldw	r3,-16(fp)
  e0e71c:	e13ffe17 	ldw	r4,-8(fp)
  e0e720:	193ff636 	bltu	r3,r4,e0e6fc <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  e0e724:	e0fffa17 	ldw	r3,-24(fp)
  e0e728:	00800044 	movi	r2,1
  e0e72c:	10c4983a 	sll	r2,r2,r3
  e0e730:	e0ffff17 	ldw	r3,-4(fp)
  e0e734:	1887883a 	add	r3,r3,r2
  e0e738:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  e0e73c:	e13ffb17 	ldw	r4,-20(fp)
  e0e740:	21000044 	addi	r4,r4,1
  e0e744:	e13ffb15 	stw	r4,-20(fp)
  e0e748:	e0bffb17 	ldw	r2,-20(fp)
  e0e74c:	e0fffd17 	ldw	r3,-12(fp)
  e0e750:	10ffe836 	bltu	r2,r3,e0e6f4 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  e0e754:	00001006 	br	e0e798 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  e0e758:	e13ffd17 	ldw	r4,-12(fp)
  e0e75c:	e0bffe17 	ldw	r2,-8(fp)
  e0e760:	2089383a 	mul	r4,r4,r2
  e0e764:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  e0e768:	e03ff915 	stw	zero,-28(fp)
  e0e76c:	00000706 	br	e0e78c <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  e0e770:	e0ffff17 	ldw	r3,-4(fp)
  e0e774:	e0bff917 	ldw	r2,-28(fp)
  e0e778:	1885883a 	add	r2,r3,r2
  e0e77c:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  e0e780:	e0fff917 	ldw	r3,-28(fp)
  e0e784:	18c00104 	addi	r3,r3,4
  e0e788:	e0fff915 	stw	r3,-28(fp)
  e0e78c:	e0bff917 	ldw	r2,-28(fp)
  e0e790:	e13ffd17 	ldw	r4,-12(fp)
  e0e794:	113ff636 	bltu	r2,r4,e0e770 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  e0e798:	e037883a 	mov	sp,fp
  e0e79c:	df000017 	ldw	fp,0(sp)
  e0e7a0:	dec00104 	addi	sp,sp,4
  e0e7a4:	f800283a 	ret

00e0e7a8 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  e0e7a8:	deffed04 	addi	sp,sp,-76
  e0e7ac:	df001215 	stw	fp,72(sp)
  e0e7b0:	df001204 	addi	fp,sp,72
  e0e7b4:	e13fee15 	stw	r4,-72(fp)
  e0e7b8:	e17fef15 	stw	r5,-68(fp)
  e0e7bc:	e1bff015 	stw	r6,-64(fp)
  e0e7c0:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  e0e7c4:	e0bfee17 	ldw	r2,-72(fp)
  e0e7c8:	10800f17 	ldw	r2,60(r2)
  e0e7cc:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  e0e7d0:	e0bfee17 	ldw	r2,-72(fp)
  e0e7d4:	10801017 	ldw	r2,64(r2)
  e0e7d8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  e0e7dc:	e0bfef17 	ldw	r2,-68(fp)
  e0e7e0:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  e0e7e4:	e0fff117 	ldw	r3,-60(fp)
  e0e7e8:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  e0e7ec:	e13ff017 	ldw	r4,-64(fp)
  e0e7f0:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  e0e7f4:	e0800117 	ldw	r2,4(fp)
  e0e7f8:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  e0e7fc:	e0c00217 	ldw	r3,8(fp)
  e0e800:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  e0e804:	e13ffa17 	ldw	r4,-24(fp)
  e0e808:	e0bffb17 	ldw	r2,-20(fp)
  e0e80c:	2080062e 	bgeu	r4,r2,e0e828 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  e0e810:	e0fffb17 	ldw	r3,-20(fp)
  e0e814:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  e0e818:	e13ffa17 	ldw	r4,-24(fp)
  e0e81c:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  e0e820:	e0bffc17 	ldw	r2,-16(fp)
  e0e824:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  e0e828:	e0fff817 	ldw	r3,-32(fp)
  e0e82c:	e13ff917 	ldw	r4,-28(fp)
  e0e830:	1900062e 	bgeu	r3,r4,e0e84c <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  e0e834:	e0bff917 	ldw	r2,-28(fp)
  e0e838:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  e0e83c:	e0fff817 	ldw	r3,-32(fp)
  e0e840:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  e0e844:	e13ffc17 	ldw	r4,-16(fp)
  e0e848:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  e0e84c:	e0bffb17 	ldw	r2,-20(fp)
  e0e850:	e0fffe17 	ldw	r3,-8(fp)
  e0e854:	10c10d2e 	bgeu	r2,r3,e0ec8c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  e0e858:	e13ff917 	ldw	r4,-28(fp)
  e0e85c:	e0bffd17 	ldw	r2,-12(fp)
  e0e860:	20800136 	bltu	r4,r2,e0e868 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  e0e864:	00010906 	br	e0ec8c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  e0e868:	e0fffa17 	ldw	r3,-24(fp)
  e0e86c:	e13ffe17 	ldw	r4,-8(fp)
  e0e870:	19000336 	bltu	r3,r4,e0e880 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  e0e874:	e0bffe17 	ldw	r2,-8(fp)
  e0e878:	10bfffc4 	addi	r2,r2,-1
  e0e87c:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  e0e880:	e0fff817 	ldw	r3,-32(fp)
  e0e884:	e13ffd17 	ldw	r4,-12(fp)
  e0e888:	19000336 	bltu	r3,r4,e0e898 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  e0e88c:	e0bffd17 	ldw	r2,-12(fp)
  e0e890:	10bfffc4 	addi	r2,r2,-1
  e0e894:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  e0e898:	e0800317 	ldw	r2,12(fp)
  e0e89c:	10800058 	cmpnei	r2,r2,1
  e0e8a0:	1000041e 	bne	r2,zero,e0e8b4 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  e0e8a4:	e0bfee17 	ldw	r2,-72(fp)
  e0e8a8:	10800c17 	ldw	r2,48(r2)
  e0e8ac:	e0bfff15 	stw	r2,-4(fp)
  e0e8b0:	00000306 	br	e0e8c0 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  e0e8b4:	e0bfee17 	ldw	r2,-72(fp)
  e0e8b8:	10800b17 	ldw	r2,44(r2)
  e0e8bc:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  e0e8c0:	e0bfee17 	ldw	r2,-72(fp)
  e0e8c4:	10800d17 	ldw	r2,52(r2)
  e0e8c8:	1004c03a 	cmpne	r2,r2,zero
  e0e8cc:	1000721e 	bne	r2,zero,e0ea98 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  e0e8d0:	e0bfee17 	ldw	r2,-72(fp)
  e0e8d4:	10801317 	ldw	r2,76(r2)
  e0e8d8:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  e0e8dc:	e0bff417 	ldw	r2,-48(fp)
  e0e8e0:	e0fff917 	ldw	r3,-28(fp)
  e0e8e4:	1884983a 	sll	r2,r3,r2
  e0e8e8:	e13fff17 	ldw	r4,-4(fp)
  e0e8ec:	2089883a 	add	r4,r4,r2
  e0e8f0:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  e0e8f4:	e0bfee17 	ldw	r2,-72(fp)
  e0e8f8:	10800e17 	ldw	r2,56(r2)
  e0e8fc:	10800058 	cmpnei	r2,r2,1
  e0e900:	10001e1e 	bne	r2,zero,e0e97c <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  e0e904:	e0bff917 	ldw	r2,-28(fp)
  e0e908:	e0bff515 	stw	r2,-44(fp)
  e0e90c:	00001706 	br	e0e96c <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  e0e910:	e0fffb17 	ldw	r3,-20(fp)
  e0e914:	e0fff615 	stw	r3,-40(fp)
  e0e918:	00000806 	br	e0e93c <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  e0e91c:	e0ffff17 	ldw	r3,-4(fp)
  e0e920:	e0bff617 	ldw	r2,-40(fp)
  e0e924:	1885883a 	add	r2,r3,r2
  e0e928:	e0fff717 	ldw	r3,-36(fp)
  e0e92c:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  e0e930:	e13ff617 	ldw	r4,-40(fp)
  e0e934:	21000044 	addi	r4,r4,1
  e0e938:	e13ff615 	stw	r4,-40(fp)
  e0e93c:	e0bffa17 	ldw	r2,-24(fp)
  e0e940:	e0fff617 	ldw	r3,-40(fp)
  e0e944:	10fff52e 	bgeu	r2,r3,e0e91c <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  e0e948:	e0fff417 	ldw	r3,-48(fp)
  e0e94c:	00800044 	movi	r2,1
  e0e950:	10c4983a 	sll	r2,r2,r3
  e0e954:	e13fff17 	ldw	r4,-4(fp)
  e0e958:	2089883a 	add	r4,r4,r2
  e0e95c:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  e0e960:	e0bff517 	ldw	r2,-44(fp)
  e0e964:	10800044 	addi	r2,r2,1
  e0e968:	e0bff515 	stw	r2,-44(fp)
  e0e96c:	e0fff817 	ldw	r3,-32(fp)
  e0e970:	e13ff517 	ldw	r4,-44(fp)
  e0e974:	193fe62e 	bgeu	r3,r4,e0e910 <alt_up_pixel_buffer_dma_draw_box+0x168>
  e0e978:	0000c406 	br	e0ec8c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  e0e97c:	e0bfee17 	ldw	r2,-72(fp)
  e0e980:	10800e17 	ldw	r2,56(r2)
  e0e984:	10800098 	cmpnei	r2,r2,2
  e0e988:	1000211e 	bne	r2,zero,e0ea10 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  e0e98c:	e0bff917 	ldw	r2,-28(fp)
  e0e990:	e0bff515 	stw	r2,-44(fp)
  e0e994:	00001a06 	br	e0ea00 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  e0e998:	e0fffb17 	ldw	r3,-20(fp)
  e0e99c:	e0fff615 	stw	r3,-40(fp)
  e0e9a0:	00000b06 	br	e0e9d0 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  e0e9a4:	e13ff617 	ldw	r4,-40(fp)
  e0e9a8:	e13ff617 	ldw	r4,-40(fp)
  e0e9ac:	2105883a 	add	r2,r4,r4
  e0e9b0:	1007883a 	mov	r3,r2
  e0e9b4:	e0bfff17 	ldw	r2,-4(fp)
  e0e9b8:	1885883a 	add	r2,r3,r2
  e0e9bc:	e0fff717 	ldw	r3,-36(fp)
  e0e9c0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  e0e9c4:	e0bff617 	ldw	r2,-40(fp)
  e0e9c8:	10800044 	addi	r2,r2,1
  e0e9cc:	e0bff615 	stw	r2,-40(fp)
  e0e9d0:	e0fffa17 	ldw	r3,-24(fp)
  e0e9d4:	e13ff617 	ldw	r4,-40(fp)
  e0e9d8:	193ff22e 	bgeu	r3,r4,e0e9a4 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  e0e9dc:	e0fff417 	ldw	r3,-48(fp)
  e0e9e0:	00800044 	movi	r2,1
  e0e9e4:	10c4983a 	sll	r2,r2,r3
  e0e9e8:	e0ffff17 	ldw	r3,-4(fp)
  e0e9ec:	1887883a 	add	r3,r3,r2
  e0e9f0:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  e0e9f4:	e13ff517 	ldw	r4,-44(fp)
  e0e9f8:	21000044 	addi	r4,r4,1
  e0e9fc:	e13ff515 	stw	r4,-44(fp)
  e0ea00:	e0bff817 	ldw	r2,-32(fp)
  e0ea04:	e0fff517 	ldw	r3,-44(fp)
  e0ea08:	10ffe32e 	bgeu	r2,r3,e0e998 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  e0ea0c:	00009f06 	br	e0ec8c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  e0ea10:	e13ff917 	ldw	r4,-28(fp)
  e0ea14:	e13ff515 	stw	r4,-44(fp)
  e0ea18:	00001b06 	br	e0ea88 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  e0ea1c:	e0bffb17 	ldw	r2,-20(fp)
  e0ea20:	e0bff615 	stw	r2,-40(fp)
  e0ea24:	00000c06 	br	e0ea58 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  e0ea28:	e0fff617 	ldw	r3,-40(fp)
  e0ea2c:	e0fff617 	ldw	r3,-40(fp)
  e0ea30:	18c5883a 	add	r2,r3,r3
  e0ea34:	1085883a 	add	r2,r2,r2
  e0ea38:	1007883a 	mov	r3,r2
  e0ea3c:	e0bfff17 	ldw	r2,-4(fp)
  e0ea40:	1885883a 	add	r2,r3,r2
  e0ea44:	e0fff717 	ldw	r3,-36(fp)
  e0ea48:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  e0ea4c:	e13ff617 	ldw	r4,-40(fp)
  e0ea50:	21000044 	addi	r4,r4,1
  e0ea54:	e13ff615 	stw	r4,-40(fp)
  e0ea58:	e0bffa17 	ldw	r2,-24(fp)
  e0ea5c:	e0fff617 	ldw	r3,-40(fp)
  e0ea60:	10fff12e 	bgeu	r2,r3,e0ea28 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  e0ea64:	e0fff417 	ldw	r3,-48(fp)
  e0ea68:	00800044 	movi	r2,1
  e0ea6c:	10c4983a 	sll	r2,r2,r3
  e0ea70:	e13fff17 	ldw	r4,-4(fp)
  e0ea74:	2089883a 	add	r4,r4,r2
  e0ea78:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  e0ea7c:	e0bff517 	ldw	r2,-44(fp)
  e0ea80:	10800044 	addi	r2,r2,1
  e0ea84:	e0bff515 	stw	r2,-44(fp)
  e0ea88:	e0fff817 	ldw	r3,-32(fp)
  e0ea8c:	e13ff517 	ldw	r4,-44(fp)
  e0ea90:	193fe22e 	bgeu	r3,r4,e0ea1c <alt_up_pixel_buffer_dma_draw_box+0x274>
  e0ea94:	00007d06 	br	e0ec8c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  e0ea98:	e0bfee17 	ldw	r2,-72(fp)
  e0ea9c:	10800e17 	ldw	r2,56(r2)
  e0eaa0:	10800058 	cmpnei	r2,r2,1
  e0eaa4:	1000221e 	bne	r2,zero,e0eb30 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  e0eaa8:	e0fff917 	ldw	r3,-28(fp)
  e0eaac:	e13ffe17 	ldw	r4,-8(fp)
  e0eab0:	1905383a 	mul	r2,r3,r4
  e0eab4:	e0ffff17 	ldw	r3,-4(fp)
  e0eab8:	1887883a 	add	r3,r3,r2
  e0eabc:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  e0eac0:	e13ff917 	ldw	r4,-28(fp)
  e0eac4:	e13ff215 	stw	r4,-56(fp)
  e0eac8:	00001506 	br	e0eb20 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  e0eacc:	e0bffb17 	ldw	r2,-20(fp)
  e0ead0:	e0bff315 	stw	r2,-52(fp)
  e0ead4:	00000806 	br	e0eaf8 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  e0ead8:	e0ffff17 	ldw	r3,-4(fp)
  e0eadc:	e0bff317 	ldw	r2,-52(fp)
  e0eae0:	1885883a 	add	r2,r3,r2
  e0eae4:	e0fff717 	ldw	r3,-36(fp)
  e0eae8:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  e0eaec:	e0fff317 	ldw	r3,-52(fp)
  e0eaf0:	18c00044 	addi	r3,r3,1
  e0eaf4:	e0fff315 	stw	r3,-52(fp)
  e0eaf8:	e13ffa17 	ldw	r4,-24(fp)
  e0eafc:	e0bff317 	ldw	r2,-52(fp)
  e0eb00:	20bff52e 	bgeu	r4,r2,e0ead8 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  e0eb04:	e0ffff17 	ldw	r3,-4(fp)
  e0eb08:	e13ffe17 	ldw	r4,-8(fp)
  e0eb0c:	1907883a 	add	r3,r3,r4
  e0eb10:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  e0eb14:	e0bff217 	ldw	r2,-56(fp)
  e0eb18:	10800044 	addi	r2,r2,1
  e0eb1c:	e0bff215 	stw	r2,-56(fp)
  e0eb20:	e0fff817 	ldw	r3,-32(fp)
  e0eb24:	e13ff217 	ldw	r4,-56(fp)
  e0eb28:	193fe82e 	bgeu	r3,r4,e0eacc <alt_up_pixel_buffer_dma_draw_box+0x324>
  e0eb2c:	00005706 	br	e0ec8c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  e0eb30:	e0bfee17 	ldw	r2,-72(fp)
  e0eb34:	10800e17 	ldw	r2,56(r2)
  e0eb38:	10800098 	cmpnei	r2,r2,2
  e0eb3c:	1000291e 	bne	r2,zero,e0ebe4 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  e0eb40:	e0fffe17 	ldw	r3,-8(fp)
  e0eb44:	e0fffe17 	ldw	r3,-8(fp)
  e0eb48:	18c5883a 	add	r2,r3,r3
  e0eb4c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  e0eb50:	e13ff917 	ldw	r4,-28(fp)
  e0eb54:	e0fffe17 	ldw	r3,-8(fp)
  e0eb58:	20c5383a 	mul	r2,r4,r3
  e0eb5c:	e13fff17 	ldw	r4,-4(fp)
  e0eb60:	2089883a 	add	r4,r4,r2
  e0eb64:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  e0eb68:	e0bff917 	ldw	r2,-28(fp)
  e0eb6c:	e0bff215 	stw	r2,-56(fp)
  e0eb70:	00001806 	br	e0ebd4 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  e0eb74:	e0fffb17 	ldw	r3,-20(fp)
  e0eb78:	e0fff315 	stw	r3,-52(fp)
  e0eb7c:	00000b06 	br	e0ebac <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  e0eb80:	e13ff317 	ldw	r4,-52(fp)
  e0eb84:	e13ff317 	ldw	r4,-52(fp)
  e0eb88:	2105883a 	add	r2,r4,r4
  e0eb8c:	1007883a 	mov	r3,r2
  e0eb90:	e0bfff17 	ldw	r2,-4(fp)
  e0eb94:	1885883a 	add	r2,r3,r2
  e0eb98:	e0fff717 	ldw	r3,-36(fp)
  e0eb9c:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  e0eba0:	e0bff317 	ldw	r2,-52(fp)
  e0eba4:	10800044 	addi	r2,r2,1
  e0eba8:	e0bff315 	stw	r2,-52(fp)
  e0ebac:	e0fffa17 	ldw	r3,-24(fp)
  e0ebb0:	e13ff317 	ldw	r4,-52(fp)
  e0ebb4:	193ff22e 	bgeu	r3,r4,e0eb80 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  e0ebb8:	e0bfff17 	ldw	r2,-4(fp)
  e0ebbc:	e0fffe17 	ldw	r3,-8(fp)
  e0ebc0:	10c5883a 	add	r2,r2,r3
  e0ebc4:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  e0ebc8:	e13ff217 	ldw	r4,-56(fp)
  e0ebcc:	21000044 	addi	r4,r4,1
  e0ebd0:	e13ff215 	stw	r4,-56(fp)
  e0ebd4:	e0bff817 	ldw	r2,-32(fp)
  e0ebd8:	e0fff217 	ldw	r3,-56(fp)
  e0ebdc:	10ffe52e 	bgeu	r2,r3,e0eb74 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  e0ebe0:	00002a06 	br	e0ec8c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  e0ebe4:	e13ffe17 	ldw	r4,-8(fp)
  e0ebe8:	e13ffe17 	ldw	r4,-8(fp)
  e0ebec:	2105883a 	add	r2,r4,r4
  e0ebf0:	1085883a 	add	r2,r2,r2
  e0ebf4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  e0ebf8:	e0fff917 	ldw	r3,-28(fp)
  e0ebfc:	e13ffe17 	ldw	r4,-8(fp)
  e0ec00:	1905383a 	mul	r2,r3,r4
  e0ec04:	e0ffff17 	ldw	r3,-4(fp)
  e0ec08:	1887883a 	add	r3,r3,r2
  e0ec0c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  e0ec10:	e13ff917 	ldw	r4,-28(fp)
  e0ec14:	e13ff215 	stw	r4,-56(fp)
  e0ec18:	00001906 	br	e0ec80 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  e0ec1c:	e0bffb17 	ldw	r2,-20(fp)
  e0ec20:	e0bff315 	stw	r2,-52(fp)
  e0ec24:	00000c06 	br	e0ec58 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  e0ec28:	e0fff317 	ldw	r3,-52(fp)
  e0ec2c:	e0fff317 	ldw	r3,-52(fp)
  e0ec30:	18c5883a 	add	r2,r3,r3
  e0ec34:	1085883a 	add	r2,r2,r2
  e0ec38:	1007883a 	mov	r3,r2
  e0ec3c:	e0bfff17 	ldw	r2,-4(fp)
  e0ec40:	1885883a 	add	r2,r3,r2
  e0ec44:	e0fff717 	ldw	r3,-36(fp)
  e0ec48:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  e0ec4c:	e13ff317 	ldw	r4,-52(fp)
  e0ec50:	21000044 	addi	r4,r4,1
  e0ec54:	e13ff315 	stw	r4,-52(fp)
  e0ec58:	e0bffa17 	ldw	r2,-24(fp)
  e0ec5c:	e0fff317 	ldw	r3,-52(fp)
  e0ec60:	10fff12e 	bgeu	r2,r3,e0ec28 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  e0ec64:	e13fff17 	ldw	r4,-4(fp)
  e0ec68:	e0bffe17 	ldw	r2,-8(fp)
  e0ec6c:	2089883a 	add	r4,r4,r2
  e0ec70:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  e0ec74:	e0fff217 	ldw	r3,-56(fp)
  e0ec78:	18c00044 	addi	r3,r3,1
  e0ec7c:	e0fff215 	stw	r3,-56(fp)
  e0ec80:	e13ff817 	ldw	r4,-32(fp)
  e0ec84:	e0bff217 	ldw	r2,-56(fp)
  e0ec88:	20bfe42e 	bgeu	r4,r2,e0ec1c <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  e0ec8c:	e037883a 	mov	sp,fp
  e0ec90:	df000017 	ldw	fp,0(sp)
  e0ec94:	dec00104 	addi	sp,sp,4
  e0ec98:	f800283a 	ret

00e0ec9c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  e0ec9c:	defff204 	addi	sp,sp,-56
  e0eca0:	df000d15 	stw	fp,52(sp)
  e0eca4:	df000d04 	addi	fp,sp,52
  e0eca8:	e13ff315 	stw	r4,-52(fp)
  e0ecac:	e17ff415 	stw	r5,-48(fp)
  e0ecb0:	e1bff515 	stw	r6,-44(fp)
  e0ecb4:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  e0ecb8:	e0bff317 	ldw	r2,-52(fp)
  e0ecbc:	10800f17 	ldw	r2,60(r2)
  e0ecc0:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  e0ecc4:	e0bff317 	ldw	r2,-52(fp)
  e0ecc8:	10801017 	ldw	r2,64(r2)
  e0eccc:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  e0ecd0:	e0bff417 	ldw	r2,-48(fp)
  e0ecd4:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  e0ecd8:	e0fff517 	ldw	r3,-44(fp)
  e0ecdc:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  e0ece0:	e13ff617 	ldw	r4,-40(fp)
  e0ece4:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  e0ece8:	e0800117 	ldw	r2,4(fp)
  e0ecec:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  e0ecf0:	e0fffb17 	ldw	r3,-20(fp)
  e0ecf4:	e13ffc17 	ldw	r4,-16(fp)
  e0ecf8:	1900042e 	bgeu	r3,r4,e0ed0c <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  e0ecfc:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  e0ed00:	e0fffb17 	ldw	r3,-20(fp)
  e0ed04:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  e0ed08:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  e0ed0c:	e13ffc17 	ldw	r4,-16(fp)
  e0ed10:	e0bffe17 	ldw	r2,-8(fp)
  e0ed14:	2080b12e 	bgeu	r4,r2,e0efdc <alt_up_pixel_buffer_dma_draw_hline+0x340>
  e0ed18:	e0fffa17 	ldw	r3,-24(fp)
  e0ed1c:	e13ffd17 	ldw	r4,-12(fp)
  e0ed20:	19000136 	bltu	r3,r4,e0ed28 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  e0ed24:	0000ad06 	br	e0efdc <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  e0ed28:	e0bffb17 	ldw	r2,-20(fp)
  e0ed2c:	e0fffe17 	ldw	r3,-8(fp)
  e0ed30:	10c00336 	bltu	r2,r3,e0ed40 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  e0ed34:	e13ffe17 	ldw	r4,-8(fp)
  e0ed38:	213fffc4 	addi	r4,r4,-1
  e0ed3c:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  e0ed40:	e0800217 	ldw	r2,8(fp)
  e0ed44:	10800058 	cmpnei	r2,r2,1
  e0ed48:	1000041e 	bne	r2,zero,e0ed5c <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  e0ed4c:	e0bff317 	ldw	r2,-52(fp)
  e0ed50:	10800c17 	ldw	r2,48(r2)
  e0ed54:	e0bfff15 	stw	r2,-4(fp)
  e0ed58:	00000306 	br	e0ed68 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  e0ed5c:	e0bff317 	ldw	r2,-52(fp)
  e0ed60:	10800b17 	ldw	r2,44(r2)
  e0ed64:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  e0ed68:	e0bff317 	ldw	r2,-52(fp)
  e0ed6c:	10800d17 	ldw	r2,52(r2)
  e0ed70:	1004c03a 	cmpne	r2,r2,zero
  e0ed74:	1000431e 	bne	r2,zero,e0ee84 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  e0ed78:	e0bff317 	ldw	r2,-52(fp)
  e0ed7c:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  e0ed80:	e0fffa17 	ldw	r3,-24(fp)
  e0ed84:	1884983a 	sll	r2,r3,r2
  e0ed88:	e13fff17 	ldw	r4,-4(fp)
  e0ed8c:	2089883a 	add	r4,r4,r2
  e0ed90:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  e0ed94:	e0bff317 	ldw	r2,-52(fp)
  e0ed98:	10800e17 	ldw	r2,56(r2)
  e0ed9c:	10800058 	cmpnei	r2,r2,1
  e0eda0:	10000f1e 	bne	r2,zero,e0ede0 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  e0eda4:	e0bffc17 	ldw	r2,-16(fp)
  e0eda8:	e0bff815 	stw	r2,-32(fp)
  e0edac:	00000806 	br	e0edd0 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  e0edb0:	e0ffff17 	ldw	r3,-4(fp)
  e0edb4:	e0bff817 	ldw	r2,-32(fp)
  e0edb8:	1885883a 	add	r2,r3,r2
  e0edbc:	e0fff917 	ldw	r3,-28(fp)
  e0edc0:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  e0edc4:	e0fff817 	ldw	r3,-32(fp)
  e0edc8:	18c00044 	addi	r3,r3,1
  e0edcc:	e0fff815 	stw	r3,-32(fp)
  e0edd0:	e13ffb17 	ldw	r4,-20(fp)
  e0edd4:	e0bff817 	ldw	r2,-32(fp)
  e0edd8:	20bff52e 	bgeu	r4,r2,e0edb0 <alt_up_pixel_buffer_dma_draw_hline+0x114>
  e0eddc:	00007f06 	br	e0efdc <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  e0ede0:	e0bff317 	ldw	r2,-52(fp)
  e0ede4:	10800e17 	ldw	r2,56(r2)
  e0ede8:	10800098 	cmpnei	r2,r2,2
  e0edec:	1000121e 	bne	r2,zero,e0ee38 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  e0edf0:	e0fffc17 	ldw	r3,-16(fp)
  e0edf4:	e0fff815 	stw	r3,-32(fp)
  e0edf8:	00000b06 	br	e0ee28 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  e0edfc:	e13ff817 	ldw	r4,-32(fp)
  e0ee00:	e13ff817 	ldw	r4,-32(fp)
  e0ee04:	2105883a 	add	r2,r4,r4
  e0ee08:	1007883a 	mov	r3,r2
  e0ee0c:	e0bfff17 	ldw	r2,-4(fp)
  e0ee10:	1885883a 	add	r2,r3,r2
  e0ee14:	e0fff917 	ldw	r3,-28(fp)
  e0ee18:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  e0ee1c:	e0bff817 	ldw	r2,-32(fp)
  e0ee20:	10800044 	addi	r2,r2,1
  e0ee24:	e0bff815 	stw	r2,-32(fp)
  e0ee28:	e0fffb17 	ldw	r3,-20(fp)
  e0ee2c:	e13ff817 	ldw	r4,-32(fp)
  e0ee30:	193ff22e 	bgeu	r3,r4,e0edfc <alt_up_pixel_buffer_dma_draw_hline+0x160>
  e0ee34:	00006906 	br	e0efdc <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  e0ee38:	e0bffc17 	ldw	r2,-16(fp)
  e0ee3c:	e0bff815 	stw	r2,-32(fp)
  e0ee40:	00000c06 	br	e0ee74 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  e0ee44:	e0fff817 	ldw	r3,-32(fp)
  e0ee48:	e0fff817 	ldw	r3,-32(fp)
  e0ee4c:	18c5883a 	add	r2,r3,r3
  e0ee50:	1085883a 	add	r2,r2,r2
  e0ee54:	1007883a 	mov	r3,r2
  e0ee58:	e0bfff17 	ldw	r2,-4(fp)
  e0ee5c:	1885883a 	add	r2,r3,r2
  e0ee60:	e0fff917 	ldw	r3,-28(fp)
  e0ee64:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  e0ee68:	e13ff817 	ldw	r4,-32(fp)
  e0ee6c:	21000044 	addi	r4,r4,1
  e0ee70:	e13ff815 	stw	r4,-32(fp)
  e0ee74:	e0bffb17 	ldw	r2,-20(fp)
  e0ee78:	e0fff817 	ldw	r3,-32(fp)
  e0ee7c:	10fff12e 	bgeu	r2,r3,e0ee44 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  e0ee80:	00005606 	br	e0efdc <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  e0ee84:	e0bff317 	ldw	r2,-52(fp)
  e0ee88:	10800e17 	ldw	r2,56(r2)
  e0ee8c:	10800058 	cmpnei	r2,r2,1
  e0ee90:	1000151e 	bne	r2,zero,e0eee8 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  e0ee94:	e13ffa17 	ldw	r4,-24(fp)
  e0ee98:	e0fffe17 	ldw	r3,-8(fp)
  e0ee9c:	20c5383a 	mul	r2,r4,r3
  e0eea0:	e13fff17 	ldw	r4,-4(fp)
  e0eea4:	2089883a 	add	r4,r4,r2
  e0eea8:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  e0eeac:	e0bffc17 	ldw	r2,-16(fp)
  e0eeb0:	e0bff715 	stw	r2,-36(fp)
  e0eeb4:	00000806 	br	e0eed8 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  e0eeb8:	e0ffff17 	ldw	r3,-4(fp)
  e0eebc:	e0bff717 	ldw	r2,-36(fp)
  e0eec0:	1885883a 	add	r2,r3,r2
  e0eec4:	e0fff917 	ldw	r3,-28(fp)
  e0eec8:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  e0eecc:	e0fff717 	ldw	r3,-36(fp)
  e0eed0:	18c00044 	addi	r3,r3,1
  e0eed4:	e0fff715 	stw	r3,-36(fp)
  e0eed8:	e13ffb17 	ldw	r4,-20(fp)
  e0eedc:	e0bff717 	ldw	r2,-36(fp)
  e0eee0:	20bff52e 	bgeu	r4,r2,e0eeb8 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  e0eee4:	00003d06 	br	e0efdc <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  e0eee8:	e0bff317 	ldw	r2,-52(fp)
  e0eeec:	10800e17 	ldw	r2,56(r2)
  e0eef0:	10800098 	cmpnei	r2,r2,2
  e0eef4:	10001c1e 	bne	r2,zero,e0ef68 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  e0eef8:	e0fffe17 	ldw	r3,-8(fp)
  e0eefc:	e0fffe17 	ldw	r3,-8(fp)
  e0ef00:	18c5883a 	add	r2,r3,r3
  e0ef04:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  e0ef08:	e13ffa17 	ldw	r4,-24(fp)
  e0ef0c:	e0fffe17 	ldw	r3,-8(fp)
  e0ef10:	20c5383a 	mul	r2,r4,r3
  e0ef14:	e13fff17 	ldw	r4,-4(fp)
  e0ef18:	2089883a 	add	r4,r4,r2
  e0ef1c:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  e0ef20:	e0bffc17 	ldw	r2,-16(fp)
  e0ef24:	e0bff715 	stw	r2,-36(fp)
  e0ef28:	00000b06 	br	e0ef58 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  e0ef2c:	e0fff717 	ldw	r3,-36(fp)
  e0ef30:	e0fff717 	ldw	r3,-36(fp)
  e0ef34:	18c5883a 	add	r2,r3,r3
  e0ef38:	1007883a 	mov	r3,r2
  e0ef3c:	e0bfff17 	ldw	r2,-4(fp)
  e0ef40:	1885883a 	add	r2,r3,r2
  e0ef44:	e0fff917 	ldw	r3,-28(fp)
  e0ef48:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  e0ef4c:	e13ff717 	ldw	r4,-36(fp)
  e0ef50:	21000044 	addi	r4,r4,1
  e0ef54:	e13ff715 	stw	r4,-36(fp)
  e0ef58:	e0bffb17 	ldw	r2,-20(fp)
  e0ef5c:	e0fff717 	ldw	r3,-36(fp)
  e0ef60:	10fff22e 	bgeu	r2,r3,e0ef2c <alt_up_pixel_buffer_dma_draw_hline+0x290>
  e0ef64:	00001d06 	br	e0efdc <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  e0ef68:	e13ffe17 	ldw	r4,-8(fp)
  e0ef6c:	e13ffe17 	ldw	r4,-8(fp)
  e0ef70:	2105883a 	add	r2,r4,r4
  e0ef74:	1085883a 	add	r2,r2,r2
  e0ef78:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  e0ef7c:	e0fffa17 	ldw	r3,-24(fp)
  e0ef80:	e13ffe17 	ldw	r4,-8(fp)
  e0ef84:	1905383a 	mul	r2,r3,r4
  e0ef88:	e0ffff17 	ldw	r3,-4(fp)
  e0ef8c:	1887883a 	add	r3,r3,r2
  e0ef90:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  e0ef94:	e13ffc17 	ldw	r4,-16(fp)
  e0ef98:	e13ff715 	stw	r4,-36(fp)
  e0ef9c:	00000c06 	br	e0efd0 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  e0efa0:	e0fff717 	ldw	r3,-36(fp)
  e0efa4:	e0fff717 	ldw	r3,-36(fp)
  e0efa8:	18c5883a 	add	r2,r3,r3
  e0efac:	1085883a 	add	r2,r2,r2
  e0efb0:	1007883a 	mov	r3,r2
  e0efb4:	e0bfff17 	ldw	r2,-4(fp)
  e0efb8:	1885883a 	add	r2,r3,r2
  e0efbc:	e0fff917 	ldw	r3,-28(fp)
  e0efc0:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  e0efc4:	e13ff717 	ldw	r4,-36(fp)
  e0efc8:	21000044 	addi	r4,r4,1
  e0efcc:	e13ff715 	stw	r4,-36(fp)
  e0efd0:	e0bffb17 	ldw	r2,-20(fp)
  e0efd4:	e0fff717 	ldw	r3,-36(fp)
  e0efd8:	10fff12e 	bgeu	r2,r3,e0efa0 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  e0efdc:	e037883a 	mov	sp,fp
  e0efe0:	df000017 	ldw	fp,0(sp)
  e0efe4:	dec00104 	addi	sp,sp,4
  e0efe8:	f800283a 	ret

00e0efec <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  e0efec:	defff104 	addi	sp,sp,-60
  e0eff0:	df000e15 	stw	fp,56(sp)
  e0eff4:	df000e04 	addi	fp,sp,56
  e0eff8:	e13ff215 	stw	r4,-56(fp)
  e0effc:	e17ff315 	stw	r5,-52(fp)
  e0f000:	e1bff415 	stw	r6,-48(fp)
  e0f004:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  e0f008:	e0bff217 	ldw	r2,-56(fp)
  e0f00c:	10800f17 	ldw	r2,60(r2)
  e0f010:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  e0f014:	e0bff217 	ldw	r2,-56(fp)
  e0f018:	10801017 	ldw	r2,64(r2)
  e0f01c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  e0f020:	e0bff317 	ldw	r2,-52(fp)
  e0f024:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  e0f028:	e0fff417 	ldw	r3,-48(fp)
  e0f02c:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  e0f030:	e13ff517 	ldw	r4,-44(fp)
  e0f034:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  e0f038:	e0800117 	ldw	r2,4(fp)
  e0f03c:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  e0f040:	e0fffa17 	ldw	r3,-24(fp)
  e0f044:	e13ffb17 	ldw	r4,-20(fp)
  e0f048:	1900042e 	bgeu	r3,r4,e0f05c <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  e0f04c:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  e0f050:	e0fffa17 	ldw	r3,-24(fp)
  e0f054:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  e0f058:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  e0f05c:	e13ffc17 	ldw	r4,-16(fp)
  e0f060:	e0bffe17 	ldw	r2,-8(fp)
  e0f064:	2080d12e 	bgeu	r4,r2,e0f3ac <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  e0f068:	e0fffb17 	ldw	r3,-20(fp)
  e0f06c:	e13ffd17 	ldw	r4,-12(fp)
  e0f070:	19000136 	bltu	r3,r4,e0f078 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  e0f074:	0000cd06 	br	e0f3ac <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  e0f078:	e0bffa17 	ldw	r2,-24(fp)
  e0f07c:	e0fffd17 	ldw	r3,-12(fp)
  e0f080:	10c00336 	bltu	r2,r3,e0f090 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  e0f084:	e13ffd17 	ldw	r4,-12(fp)
  e0f088:	213fffc4 	addi	r4,r4,-1
  e0f08c:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  e0f090:	e0800217 	ldw	r2,8(fp)
  e0f094:	10800058 	cmpnei	r2,r2,1
  e0f098:	1000041e 	bne	r2,zero,e0f0ac <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  e0f09c:	e0bff217 	ldw	r2,-56(fp)
  e0f0a0:	10800c17 	ldw	r2,48(r2)
  e0f0a4:	e0bfff15 	stw	r2,-4(fp)
  e0f0a8:	00000306 	br	e0f0b8 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  e0f0ac:	e0bff217 	ldw	r2,-56(fp)
  e0f0b0:	10800b17 	ldw	r2,44(r2)
  e0f0b4:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  e0f0b8:	e0bff217 	ldw	r2,-56(fp)
  e0f0bc:	10800d17 	ldw	r2,52(r2)
  e0f0c0:	1004c03a 	cmpne	r2,r2,zero
  e0f0c4:	1000571e 	bne	r2,zero,e0f224 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  e0f0c8:	e0bff217 	ldw	r2,-56(fp)
  e0f0cc:	10801317 	ldw	r2,76(r2)
  e0f0d0:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  e0f0d4:	e0bff717 	ldw	r2,-36(fp)
  e0f0d8:	e0fffb17 	ldw	r3,-20(fp)
  e0f0dc:	1884983a 	sll	r2,r3,r2
  e0f0e0:	e13fff17 	ldw	r4,-4(fp)
  e0f0e4:	2089883a 	add	r4,r4,r2
  e0f0e8:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  e0f0ec:	e0bff217 	ldw	r2,-56(fp)
  e0f0f0:	10800e17 	ldw	r2,56(r2)
  e0f0f4:	10800058 	cmpnei	r2,r2,1
  e0f0f8:	1000151e 	bne	r2,zero,e0f150 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  e0f0fc:	e0bffb17 	ldw	r2,-20(fp)
  e0f100:	e0bff815 	stw	r2,-32(fp)
  e0f104:	00000e06 	br	e0f140 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  e0f108:	e0ffff17 	ldw	r3,-4(fp)
  e0f10c:	e0bffc17 	ldw	r2,-16(fp)
  e0f110:	1885883a 	add	r2,r3,r2
  e0f114:	e0fff917 	ldw	r3,-28(fp)
  e0f118:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  e0f11c:	e0fff717 	ldw	r3,-36(fp)
  e0f120:	00800044 	movi	r2,1
  e0f124:	10c4983a 	sll	r2,r2,r3
  e0f128:	e0ffff17 	ldw	r3,-4(fp)
  e0f12c:	1887883a 	add	r3,r3,r2
  e0f130:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  e0f134:	e13ff817 	ldw	r4,-32(fp)
  e0f138:	21000044 	addi	r4,r4,1
  e0f13c:	e13ff815 	stw	r4,-32(fp)
  e0f140:	e0bffa17 	ldw	r2,-24(fp)
  e0f144:	e0fff817 	ldw	r3,-32(fp)
  e0f148:	10ffef2e 	bgeu	r2,r3,e0f108 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  e0f14c:	00009706 	br	e0f3ac <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  e0f150:	e0bff217 	ldw	r2,-56(fp)
  e0f154:	10800e17 	ldw	r2,56(r2)
  e0f158:	10800098 	cmpnei	r2,r2,2
  e0f15c:	1000181e 	bne	r2,zero,e0f1c0 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  e0f160:	e13ffb17 	ldw	r4,-20(fp)
  e0f164:	e13ff815 	stw	r4,-32(fp)
  e0f168:	00001106 	br	e0f1b0 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  e0f16c:	e0fffc17 	ldw	r3,-16(fp)
  e0f170:	e0fffc17 	ldw	r3,-16(fp)
  e0f174:	18c5883a 	add	r2,r3,r3
  e0f178:	1007883a 	mov	r3,r2
  e0f17c:	e0bfff17 	ldw	r2,-4(fp)
  e0f180:	1885883a 	add	r2,r3,r2
  e0f184:	e0fff917 	ldw	r3,-28(fp)
  e0f188:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  e0f18c:	e0fff717 	ldw	r3,-36(fp)
  e0f190:	00800044 	movi	r2,1
  e0f194:	10c4983a 	sll	r2,r2,r3
  e0f198:	e13fff17 	ldw	r4,-4(fp)
  e0f19c:	2089883a 	add	r4,r4,r2
  e0f1a0:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  e0f1a4:	e0bff817 	ldw	r2,-32(fp)
  e0f1a8:	10800044 	addi	r2,r2,1
  e0f1ac:	e0bff815 	stw	r2,-32(fp)
  e0f1b0:	e0fffa17 	ldw	r3,-24(fp)
  e0f1b4:	e13ff817 	ldw	r4,-32(fp)
  e0f1b8:	193fec2e 	bgeu	r3,r4,e0f16c <alt_up_pixel_buffer_dma_draw_vline+0x180>
  e0f1bc:	00007b06 	br	e0f3ac <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  e0f1c0:	e0bffb17 	ldw	r2,-20(fp)
  e0f1c4:	e0bff815 	stw	r2,-32(fp)
  e0f1c8:	00001206 	br	e0f214 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  e0f1cc:	e0fffc17 	ldw	r3,-16(fp)
  e0f1d0:	e0fffc17 	ldw	r3,-16(fp)
  e0f1d4:	18c5883a 	add	r2,r3,r3
  e0f1d8:	1085883a 	add	r2,r2,r2
  e0f1dc:	1007883a 	mov	r3,r2
  e0f1e0:	e0bfff17 	ldw	r2,-4(fp)
  e0f1e4:	1885883a 	add	r2,r3,r2
  e0f1e8:	e0fff917 	ldw	r3,-28(fp)
  e0f1ec:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  e0f1f0:	e0fff717 	ldw	r3,-36(fp)
  e0f1f4:	00800044 	movi	r2,1
  e0f1f8:	10c4983a 	sll	r2,r2,r3
  e0f1fc:	e13fff17 	ldw	r4,-4(fp)
  e0f200:	2089883a 	add	r4,r4,r2
  e0f204:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  e0f208:	e0bff817 	ldw	r2,-32(fp)
  e0f20c:	10800044 	addi	r2,r2,1
  e0f210:	e0bff815 	stw	r2,-32(fp)
  e0f214:	e0fffa17 	ldw	r3,-24(fp)
  e0f218:	e13ff817 	ldw	r4,-32(fp)
  e0f21c:	193feb2e 	bgeu	r3,r4,e0f1cc <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  e0f220:	00006206 	br	e0f3ac <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  e0f224:	e0bff217 	ldw	r2,-56(fp)
  e0f228:	10800e17 	ldw	r2,56(r2)
  e0f22c:	10800058 	cmpnei	r2,r2,1
  e0f230:	1000191e 	bne	r2,zero,e0f298 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  e0f234:	e0fffb17 	ldw	r3,-20(fp)
  e0f238:	e13ffe17 	ldw	r4,-8(fp)
  e0f23c:	1905383a 	mul	r2,r3,r4
  e0f240:	e0ffff17 	ldw	r3,-4(fp)
  e0f244:	1887883a 	add	r3,r3,r2
  e0f248:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  e0f24c:	e13ffb17 	ldw	r4,-20(fp)
  e0f250:	e13ff615 	stw	r4,-40(fp)
  e0f254:	00000c06 	br	e0f288 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  e0f258:	e0ffff17 	ldw	r3,-4(fp)
  e0f25c:	e0bffc17 	ldw	r2,-16(fp)
  e0f260:	1885883a 	add	r2,r3,r2
  e0f264:	e0fff917 	ldw	r3,-28(fp)
  e0f268:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  e0f26c:	e0bfff17 	ldw	r2,-4(fp)
  e0f270:	e0fffe17 	ldw	r3,-8(fp)
  e0f274:	10c5883a 	add	r2,r2,r3
  e0f278:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  e0f27c:	e13ff617 	ldw	r4,-40(fp)
  e0f280:	21000044 	addi	r4,r4,1
  e0f284:	e13ff615 	stw	r4,-40(fp)
  e0f288:	e0bffa17 	ldw	r2,-24(fp)
  e0f28c:	e0fff617 	ldw	r3,-40(fp)
  e0f290:	10fff12e 	bgeu	r2,r3,e0f258 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  e0f294:	00004506 	br	e0f3ac <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  e0f298:	e0bff217 	ldw	r2,-56(fp)
  e0f29c:	10800e17 	ldw	r2,56(r2)
  e0f2a0:	10800098 	cmpnei	r2,r2,2
  e0f2a4:	1000201e 	bne	r2,zero,e0f328 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  e0f2a8:	e13ffe17 	ldw	r4,-8(fp)
  e0f2ac:	e13ffe17 	ldw	r4,-8(fp)
  e0f2b0:	2105883a 	add	r2,r4,r4
  e0f2b4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  e0f2b8:	e0fffb17 	ldw	r3,-20(fp)
  e0f2bc:	e13ffe17 	ldw	r4,-8(fp)
  e0f2c0:	1905383a 	mul	r2,r3,r4
  e0f2c4:	e0ffff17 	ldw	r3,-4(fp)
  e0f2c8:	1887883a 	add	r3,r3,r2
  e0f2cc:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  e0f2d0:	e13ffb17 	ldw	r4,-20(fp)
  e0f2d4:	e13ff615 	stw	r4,-40(fp)
  e0f2d8:	00000f06 	br	e0f318 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  e0f2dc:	e0fffc17 	ldw	r3,-16(fp)
  e0f2e0:	e0fffc17 	ldw	r3,-16(fp)
  e0f2e4:	18c5883a 	add	r2,r3,r3
  e0f2e8:	1007883a 	mov	r3,r2
  e0f2ec:	e0bfff17 	ldw	r2,-4(fp)
  e0f2f0:	1885883a 	add	r2,r3,r2
  e0f2f4:	e0fff917 	ldw	r3,-28(fp)
  e0f2f8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  e0f2fc:	e13fff17 	ldw	r4,-4(fp)
  e0f300:	e0bffe17 	ldw	r2,-8(fp)
  e0f304:	2089883a 	add	r4,r4,r2
  e0f308:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  e0f30c:	e0fff617 	ldw	r3,-40(fp)
  e0f310:	18c00044 	addi	r3,r3,1
  e0f314:	e0fff615 	stw	r3,-40(fp)
  e0f318:	e13ffa17 	ldw	r4,-24(fp)
  e0f31c:	e0bff617 	ldw	r2,-40(fp)
  e0f320:	20bfee2e 	bgeu	r4,r2,e0f2dc <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  e0f324:	00002106 	br	e0f3ac <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  e0f328:	e0fffe17 	ldw	r3,-8(fp)
  e0f32c:	e0fffe17 	ldw	r3,-8(fp)
  e0f330:	18c5883a 	add	r2,r3,r3
  e0f334:	1085883a 	add	r2,r2,r2
  e0f338:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  e0f33c:	e13ffb17 	ldw	r4,-20(fp)
  e0f340:	e0fffe17 	ldw	r3,-8(fp)
  e0f344:	20c5383a 	mul	r2,r4,r3
  e0f348:	e13fff17 	ldw	r4,-4(fp)
  e0f34c:	2089883a 	add	r4,r4,r2
  e0f350:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  e0f354:	e0bffb17 	ldw	r2,-20(fp)
  e0f358:	e0bff615 	stw	r2,-40(fp)
  e0f35c:	00001006 	br	e0f3a0 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  e0f360:	e0fffc17 	ldw	r3,-16(fp)
  e0f364:	e0fffc17 	ldw	r3,-16(fp)
  e0f368:	18c5883a 	add	r2,r3,r3
  e0f36c:	1085883a 	add	r2,r2,r2
  e0f370:	1007883a 	mov	r3,r2
  e0f374:	e0bfff17 	ldw	r2,-4(fp)
  e0f378:	1885883a 	add	r2,r3,r2
  e0f37c:	e0fff917 	ldw	r3,-28(fp)
  e0f380:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  e0f384:	e13fff17 	ldw	r4,-4(fp)
  e0f388:	e0bffe17 	ldw	r2,-8(fp)
  e0f38c:	2089883a 	add	r4,r4,r2
  e0f390:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  e0f394:	e0fff617 	ldw	r3,-40(fp)
  e0f398:	18c00044 	addi	r3,r3,1
  e0f39c:	e0fff615 	stw	r3,-40(fp)
  e0f3a0:	e13ffa17 	ldw	r4,-24(fp)
  e0f3a4:	e0bff617 	ldw	r2,-40(fp)
  e0f3a8:	20bfed2e 	bgeu	r4,r2,e0f360 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  e0f3ac:	e037883a 	mov	sp,fp
  e0f3b0:	df000017 	ldw	fp,0(sp)
  e0f3b4:	dec00104 	addi	sp,sp,4
  e0f3b8:	f800283a 	ret

00e0f3bc <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  e0f3bc:	defff804 	addi	sp,sp,-32
  e0f3c0:	dfc00715 	stw	ra,28(sp)
  e0f3c4:	df000615 	stw	fp,24(sp)
  e0f3c8:	df000604 	addi	fp,sp,24
  e0f3cc:	e13ffc15 	stw	r4,-16(fp)
  e0f3d0:	e17ffd15 	stw	r5,-12(fp)
  e0f3d4:	e1bffe15 	stw	r6,-8(fp)
  e0f3d8:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  e0f3dc:	e0800317 	ldw	r2,12(fp)
  e0f3e0:	d8800015 	stw	r2,0(sp)
  e0f3e4:	e0800417 	ldw	r2,16(fp)
  e0f3e8:	d8800115 	stw	r2,4(sp)
  e0f3ec:	e13ffc17 	ldw	r4,-16(fp)
  e0f3f0:	e17ffd17 	ldw	r5,-12(fp)
  e0f3f4:	e1bfff17 	ldw	r6,-4(fp)
  e0f3f8:	e1fffe17 	ldw	r7,-8(fp)
  e0f3fc:	0e0ec9c0 	call	e0ec9c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  e0f400:	e0800317 	ldw	r2,12(fp)
  e0f404:	d8800015 	stw	r2,0(sp)
  e0f408:	e0800417 	ldw	r2,16(fp)
  e0f40c:	d8800115 	stw	r2,4(sp)
  e0f410:	e13ffc17 	ldw	r4,-16(fp)
  e0f414:	e17ffd17 	ldw	r5,-12(fp)
  e0f418:	e1bfff17 	ldw	r6,-4(fp)
  e0f41c:	e1c00217 	ldw	r7,8(fp)
  e0f420:	0e0ec9c0 	call	e0ec9c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  e0f424:	e0800317 	ldw	r2,12(fp)
  e0f428:	d8800015 	stw	r2,0(sp)
  e0f42c:	e0800417 	ldw	r2,16(fp)
  e0f430:	d8800115 	stw	r2,4(sp)
  e0f434:	e13ffc17 	ldw	r4,-16(fp)
  e0f438:	e17ffd17 	ldw	r5,-12(fp)
  e0f43c:	e1bffe17 	ldw	r6,-8(fp)
  e0f440:	e1c00217 	ldw	r7,8(fp)
  e0f444:	0e0efec0 	call	e0efec <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  e0f448:	e0800317 	ldw	r2,12(fp)
  e0f44c:	d8800015 	stw	r2,0(sp)
  e0f450:	e0800417 	ldw	r2,16(fp)
  e0f454:	d8800115 	stw	r2,4(sp)
  e0f458:	e13ffc17 	ldw	r4,-16(fp)
  e0f45c:	e17fff17 	ldw	r5,-4(fp)
  e0f460:	e1bffe17 	ldw	r6,-8(fp)
  e0f464:	e1c00217 	ldw	r7,8(fp)
  e0f468:	0e0efec0 	call	e0efec <alt_up_pixel_buffer_dma_draw_vline>
}
  e0f46c:	e037883a 	mov	sp,fp
  e0f470:	dfc00117 	ldw	ra,4(sp)
  e0f474:	df000017 	ldw	fp,0(sp)
  e0f478:	dec00204 	addi	sp,sp,8
  e0f47c:	f800283a 	ret

00e0f480 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  e0f480:	defffb04 	addi	sp,sp,-20
  e0f484:	df000415 	stw	fp,16(sp)
  e0f488:	df000404 	addi	fp,sp,16
  e0f48c:	e13ffc15 	stw	r4,-16(fp)
  e0f490:	e17ffd15 	stw	r5,-12(fp)
  e0f494:	e1bffe15 	stw	r6,-8(fp)
  e0f498:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  e0f49c:	e0c00217 	ldw	r3,8(fp)
  e0f4a0:	1804c03a 	cmpne	r2,r3,zero
  e0f4a4:	10000b1e 	bne	r2,zero,e0f4d4 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  e0f4a8:	e13ffd17 	ldw	r4,-12(fp)
  e0f4ac:	e0ffff17 	ldw	r3,-4(fp)
  e0f4b0:	20c5383a 	mul	r2,r4,r3
  e0f4b4:	e13ffe17 	ldw	r4,-8(fp)
  e0f4b8:	1105883a 	add	r2,r2,r4
  e0f4bc:	1007883a 	mov	r3,r2
  e0f4c0:	e0bffc17 	ldw	r2,-16(fp)
  e0f4c4:	1885883a 	add	r2,r3,r2
  e0f4c8:	e0c00117 	ldw	r3,4(fp)
  e0f4cc:	10c00025 	stbio	r3,0(r2)
  e0f4d0:	00001b06 	br	e0f540 <helper_plot_pixel+0xc0>
	else if (mode == 1)
  e0f4d4:	e1000217 	ldw	r4,8(fp)
  e0f4d8:	20800058 	cmpnei	r2,r4,1
  e0f4dc:	10000c1e 	bne	r2,zero,e0f510 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  e0f4e0:	e0fffd17 	ldw	r3,-12(fp)
  e0f4e4:	e13fff17 	ldw	r4,-4(fp)
  e0f4e8:	1905383a 	mul	r2,r3,r4
  e0f4ec:	e0fffe17 	ldw	r3,-8(fp)
  e0f4f0:	10c5883a 	add	r2,r2,r3
  e0f4f4:	1085883a 	add	r2,r2,r2
  e0f4f8:	1007883a 	mov	r3,r2
  e0f4fc:	e0bffc17 	ldw	r2,-16(fp)
  e0f500:	1885883a 	add	r2,r3,r2
  e0f504:	e1000117 	ldw	r4,4(fp)
  e0f508:	1100002d 	sthio	r4,0(r2)
  e0f50c:	00000c06 	br	e0f540 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  e0f510:	e0fffd17 	ldw	r3,-12(fp)
  e0f514:	e13fff17 	ldw	r4,-4(fp)
  e0f518:	1905383a 	mul	r2,r3,r4
  e0f51c:	e0fffe17 	ldw	r3,-8(fp)
  e0f520:	10c5883a 	add	r2,r2,r3
  e0f524:	1085883a 	add	r2,r2,r2
  e0f528:	1085883a 	add	r2,r2,r2
  e0f52c:	1007883a 	mov	r3,r2
  e0f530:	e0bffc17 	ldw	r2,-16(fp)
  e0f534:	1885883a 	add	r2,r3,r2
  e0f538:	e1000117 	ldw	r4,4(fp)
  e0f53c:	11000035 	stwio	r4,0(r2)
}
  e0f540:	e037883a 	mov	sp,fp
  e0f544:	df000017 	ldw	fp,0(sp)
  e0f548:	dec00104 	addi	sp,sp,4
  e0f54c:	f800283a 	ret

00e0f550 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  e0f550:	deffe404 	addi	sp,sp,-112
  e0f554:	dfc01b15 	stw	ra,108(sp)
  e0f558:	df001a15 	stw	fp,104(sp)
  e0f55c:	df001a04 	addi	fp,sp,104
  e0f560:	e13fe815 	stw	r4,-96(fp)
  e0f564:	e17fe915 	stw	r5,-92(fp)
  e0f568:	e1bfea15 	stw	r6,-88(fp)
  e0f56c:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  e0f570:	e0bfe917 	ldw	r2,-92(fp)
  e0f574:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  e0f578:	e0ffea17 	ldw	r3,-88(fp)
  e0f57c:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  e0f580:	e13feb17 	ldw	r4,-84(fp)
  e0f584:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  e0f588:	e0800217 	ldw	r2,8(fp)
  e0f58c:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  e0f590:	e0fff717 	ldw	r3,-36(fp)
  e0f594:	e13ff917 	ldw	r4,-28(fp)
  e0f598:	1905c83a 	sub	r2,r3,r4
  e0f59c:	e0bfff15 	stw	r2,-4(fp)
  e0f5a0:	e0ffff17 	ldw	r3,-4(fp)
  e0f5a4:	1804403a 	cmpge	r2,r3,zero
  e0f5a8:	1000031e 	bne	r2,zero,e0f5b8 <alt_up_pixel_buffer_dma_draw_line+0x68>
  e0f5ac:	e13fff17 	ldw	r4,-4(fp)
  e0f5b0:	0109c83a 	sub	r4,zero,r4
  e0f5b4:	e13fff15 	stw	r4,-4(fp)
  e0f5b8:	e0fff817 	ldw	r3,-32(fp)
  e0f5bc:	e13ffa17 	ldw	r4,-24(fp)
  e0f5c0:	1905c83a 	sub	r2,r3,r4
  e0f5c4:	e0bffe15 	stw	r2,-8(fp)
  e0f5c8:	e0fffe17 	ldw	r3,-8(fp)
  e0f5cc:	1804403a 	cmpge	r2,r3,zero
  e0f5d0:	1000031e 	bne	r2,zero,e0f5e0 <alt_up_pixel_buffer_dma_draw_line+0x90>
  e0f5d4:	e13ffe17 	ldw	r4,-8(fp)
  e0f5d8:	0109c83a 	sub	r4,zero,r4
  e0f5dc:	e13ffe15 	stw	r4,-8(fp)
  e0f5e0:	e0fffe17 	ldw	r3,-8(fp)
  e0f5e4:	e13fff17 	ldw	r4,-4(fp)
  e0f5e8:	1904803a 	cmplt	r2,r3,r4
  e0f5ec:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  e0f5f0:	e0bfe817 	ldw	r2,-96(fp)
  e0f5f4:	10800e17 	ldw	r2,56(r2)
  e0f5f8:	10800060 	cmpeqi	r2,r2,1
  e0f5fc:	10000c1e 	bne	r2,zero,e0f630 <alt_up_pixel_buffer_dma_draw_line+0xe0>
  e0f600:	e0bfe817 	ldw	r2,-96(fp)
  e0f604:	10800e17 	ldw	r2,56(r2)
  e0f608:	10800098 	cmpnei	r2,r2,2
  e0f60c:	1000031e 	bne	r2,zero,e0f61c <alt_up_pixel_buffer_dma_draw_line+0xcc>
  e0f610:	00800044 	movi	r2,1
  e0f614:	e0bffc15 	stw	r2,-16(fp)
  e0f618:	00000206 	br	e0f624 <alt_up_pixel_buffer_dma_draw_line+0xd4>
  e0f61c:	00c00084 	movi	r3,2
  e0f620:	e0fffc15 	stw	r3,-16(fp)
  e0f624:	e13ffc17 	ldw	r4,-16(fp)
  e0f628:	e13ffd15 	stw	r4,-12(fp)
  e0f62c:	00000106 	br	e0f634 <alt_up_pixel_buffer_dma_draw_line+0xe4>
  e0f630:	e03ffd15 	stw	zero,-12(fp)
  e0f634:	e0bffd17 	ldw	r2,-12(fp)
  e0f638:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  e0f63c:	e0c00317 	ldw	r3,12(fp)
  e0f640:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  e0f644:	e0bfe817 	ldw	r2,-96(fp)
  e0f648:	10800d17 	ldw	r2,52(r2)
  e0f64c:	1004c03a 	cmpne	r2,r2,zero
  e0f650:	1000091e 	bne	r2,zero,e0f678 <alt_up_pixel_buffer_dma_draw_line+0x128>
  e0f654:	e0bfe817 	ldw	r2,-96(fp)
  e0f658:	10c01317 	ldw	r3,76(r2)
  e0f65c:	e0bfef17 	ldw	r2,-68(fp)
  e0f660:	1885c83a 	sub	r2,r3,r2
  e0f664:	1007883a 	mov	r3,r2
  e0f668:	00800044 	movi	r2,1
  e0f66c:	10c4983a 	sll	r2,r2,r3
  e0f670:	e0bffb15 	stw	r2,-20(fp)
  e0f674:	00000306 	br	e0f684 <alt_up_pixel_buffer_dma_draw_line+0x134>
  e0f678:	e0bfe817 	ldw	r2,-96(fp)
  e0f67c:	10800f17 	ldw	r2,60(r2)
  e0f680:	e0bffb15 	stw	r2,-20(fp)
  e0f684:	e13ffb17 	ldw	r4,-20(fp)
  e0f688:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  e0f68c:	e0800417 	ldw	r2,16(fp)
  e0f690:	10800058 	cmpnei	r2,r2,1
  e0f694:	1000041e 	bne	r2,zero,e0f6a8 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  e0f698:	e0bfe817 	ldw	r2,-96(fp)
  e0f69c:	10800c17 	ldw	r2,48(r2)
  e0f6a0:	e0bfed15 	stw	r2,-76(fp)
  e0f6a4:	00000306 	br	e0f6b4 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  e0f6a8:	e0bfe817 	ldw	r2,-96(fp)
  e0f6ac:	10800b17 	ldw	r2,44(r2)
  e0f6b0:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  e0f6b4:	e0fff603 	ldbu	r3,-40(fp)
  e0f6b8:	18803fcc 	andi	r2,r3,255
  e0f6bc:	1080201c 	xori	r2,r2,128
  e0f6c0:	10bfe004 	addi	r2,r2,-128
  e0f6c4:	10800050 	cmplti	r2,r2,1
  e0f6c8:	10000c1e 	bne	r2,zero,e0f6fc <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  e0f6cc:	e13ffa17 	ldw	r4,-24(fp)
  e0f6d0:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  e0f6d4:	e0bff917 	ldw	r2,-28(fp)
  e0f6d8:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  e0f6dc:	e0fff317 	ldw	r3,-52(fp)
  e0f6e0:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  e0f6e4:	e13ff817 	ldw	r4,-32(fp)
  e0f6e8:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  e0f6ec:	e0bff717 	ldw	r2,-36(fp)
  e0f6f0:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  e0f6f4:	e0fff317 	ldw	r3,-52(fp)
  e0f6f8:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  e0f6fc:	e13ff817 	ldw	r4,-32(fp)
  e0f700:	e0bffa17 	ldw	r2,-24(fp)
  e0f704:	20800c0e 	bge	r4,r2,e0f738 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  e0f708:	e0fffa17 	ldw	r3,-24(fp)
  e0f70c:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  e0f710:	e13ff817 	ldw	r4,-32(fp)
  e0f714:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  e0f718:	e0bff317 	ldw	r2,-52(fp)
  e0f71c:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  e0f720:	e0fff917 	ldw	r3,-28(fp)
  e0f724:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  e0f728:	e13ff717 	ldw	r4,-36(fp)
  e0f72c:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  e0f730:	e0bff317 	ldw	r2,-52(fp)
  e0f734:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  e0f738:	e0fff817 	ldw	r3,-32(fp)
  e0f73c:	e13ffa17 	ldw	r4,-24(fp)
  e0f740:	1907c83a 	sub	r3,r3,r4
  e0f744:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  e0f748:	e0fff717 	ldw	r3,-36(fp)
  e0f74c:	e13ff917 	ldw	r4,-28(fp)
  e0f750:	1905c83a 	sub	r2,r3,r4
  e0f754:	e0bff415 	stw	r2,-48(fp)
  e0f758:	e0fff417 	ldw	r3,-48(fp)
  e0f75c:	1804403a 	cmpge	r2,r3,zero
  e0f760:	1000031e 	bne	r2,zero,e0f770 <alt_up_pixel_buffer_dma_draw_line+0x220>
  e0f764:	e13ff417 	ldw	r4,-48(fp)
  e0f768:	0109c83a 	sub	r4,zero,r4
  e0f76c:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  e0f770:	e0fff517 	ldw	r3,-44(fp)
  e0f774:	1804d7fa 	srli	r2,r3,31
  e0f778:	e13ff517 	ldw	r4,-44(fp)
  e0f77c:	1105883a 	add	r2,r2,r4
  e0f780:	1005d07a 	srai	r2,r2,1
  e0f784:	0085c83a 	sub	r2,zero,r2
  e0f788:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  e0f78c:	e0bff917 	ldw	r2,-28(fp)
  e0f790:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  e0f794:	e0fff917 	ldw	r3,-28(fp)
  e0f798:	e13ff717 	ldw	r4,-36(fp)
  e0f79c:	1900030e 	bge	r3,r4,e0f7ac <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  e0f7a0:	00800044 	movi	r2,1
  e0f7a4:	e0bff215 	stw	r2,-56(fp)
  e0f7a8:	00000206 	br	e0f7b4 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  e0f7ac:	00ffffc4 	movi	r3,-1
  e0f7b0:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  e0f7b4:	e13ff603 	ldbu	r4,-40(fp)
  e0f7b8:	20803fcc 	andi	r2,r4,255
  e0f7bc:	1080201c 	xori	r2,r2,128
  e0f7c0:	10bfe004 	addi	r2,r2,-128
  e0f7c4:	10800058 	cmpnei	r2,r2,1
  e0f7c8:	1000221e 	bne	r2,zero,e0f854 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  e0f7cc:	e0bffa17 	ldw	r2,-24(fp)
  e0f7d0:	e0bff115 	stw	r2,-60(fp)
  e0f7d4:	00001b06 	br	e0f844 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  e0f7d8:	e0ffee17 	ldw	r3,-72(fp)
  e0f7dc:	d8c00015 	stw	r3,0(sp)
  e0f7e0:	e13fef17 	ldw	r4,-68(fp)
  e0f7e4:	d9000115 	stw	r4,4(sp)
  e0f7e8:	e13fed17 	ldw	r4,-76(fp)
  e0f7ec:	e17fec17 	ldw	r5,-80(fp)
  e0f7f0:	e1bff017 	ldw	r6,-64(fp)
  e0f7f4:	e1fff117 	ldw	r7,-60(fp)
  e0f7f8:	0e0f4800 	call	e0f480 <helper_plot_pixel>
			error = error + deltay;
  e0f7fc:	e0bff317 	ldw	r2,-52(fp)
  e0f800:	e0fff417 	ldw	r3,-48(fp)
  e0f804:	10c5883a 	add	r2,r2,r3
  e0f808:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  e0f80c:	e13ff317 	ldw	r4,-52(fp)
  e0f810:	20800050 	cmplti	r2,r4,1
  e0f814:	1000081e 	bne	r2,zero,e0f838 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  e0f818:	e0bff017 	ldw	r2,-64(fp)
  e0f81c:	e0fff217 	ldw	r3,-56(fp)
  e0f820:	10c5883a 	add	r2,r2,r3
  e0f824:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  e0f828:	e13ff317 	ldw	r4,-52(fp)
  e0f82c:	e0bff517 	ldw	r2,-44(fp)
  e0f830:	2089c83a 	sub	r4,r4,r2
  e0f834:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  e0f838:	e0fff117 	ldw	r3,-60(fp)
  e0f83c:	18c00044 	addi	r3,r3,1
  e0f840:	e0fff115 	stw	r3,-60(fp)
  e0f844:	e13ff817 	ldw	r4,-32(fp)
  e0f848:	e0bff117 	ldw	r2,-60(fp)
  e0f84c:	20bfe20e 	bge	r4,r2,e0f7d8 <alt_up_pixel_buffer_dma_draw_line+0x288>
  e0f850:	00002106 	br	e0f8d8 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  e0f854:	e0fffa17 	ldw	r3,-24(fp)
  e0f858:	e0fff115 	stw	r3,-60(fp)
  e0f85c:	00001b06 	br	e0f8cc <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  e0f860:	e13fee17 	ldw	r4,-72(fp)
  e0f864:	d9000015 	stw	r4,0(sp)
  e0f868:	e0bfef17 	ldw	r2,-68(fp)
  e0f86c:	d8800115 	stw	r2,4(sp)
  e0f870:	e13fed17 	ldw	r4,-76(fp)
  e0f874:	e17fec17 	ldw	r5,-80(fp)
  e0f878:	e1bff117 	ldw	r6,-60(fp)
  e0f87c:	e1fff017 	ldw	r7,-64(fp)
  e0f880:	0e0f4800 	call	e0f480 <helper_plot_pixel>
			error = error + deltay;
  e0f884:	e0fff317 	ldw	r3,-52(fp)
  e0f888:	e13ff417 	ldw	r4,-48(fp)
  e0f88c:	1907883a 	add	r3,r3,r4
  e0f890:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  e0f894:	e0fff317 	ldw	r3,-52(fp)
  e0f898:	18800050 	cmplti	r2,r3,1
  e0f89c:	1000081e 	bne	r2,zero,e0f8c0 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  e0f8a0:	e13ff017 	ldw	r4,-64(fp)
  e0f8a4:	e0bff217 	ldw	r2,-56(fp)
  e0f8a8:	2089883a 	add	r4,r4,r2
  e0f8ac:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  e0f8b0:	e0fff317 	ldw	r3,-52(fp)
  e0f8b4:	e13ff517 	ldw	r4,-44(fp)
  e0f8b8:	1907c83a 	sub	r3,r3,r4
  e0f8bc:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  e0f8c0:	e0bff117 	ldw	r2,-60(fp)
  e0f8c4:	10800044 	addi	r2,r2,1
  e0f8c8:	e0bff115 	stw	r2,-60(fp)
  e0f8cc:	e0fff817 	ldw	r3,-32(fp)
  e0f8d0:	e13ff117 	ldw	r4,-60(fp)
  e0f8d4:	193fe20e 	bge	r3,r4,e0f860 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  e0f8d8:	e037883a 	mov	sp,fp
  e0f8dc:	dfc00117 	ldw	ra,4(sp)
  e0f8e0:	df000017 	ldw	fp,0(sp)
  e0f8e4:	dec00204 	addi	sp,sp,8
  e0f8e8:	f800283a 	ret

00e0f8ec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  e0f8ec:	defff404 	addi	sp,sp,-48
  e0f8f0:	df000b15 	stw	fp,44(sp)
  e0f8f4:	df000b04 	addi	fp,sp,44
  e0f8f8:	e13ffb15 	stw	r4,-20(fp)
  e0f8fc:	e17ffc15 	stw	r5,-16(fp)
  e0f900:	e1bffd15 	stw	r6,-12(fp)
  e0f904:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  e0f908:	e03ff915 	stw	zero,-28(fp)
  e0f90c:	00803874 	movhi	r2,225
  e0f910:	10925c04 	addi	r2,r2,18800
  e0f914:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  e0f918:	1005003a 	cmpeq	r2,r2,zero
  e0f91c:	1000411e 	bne	r2,zero,e0fa24 <alt_alarm_start+0x138>
  {
    if (alarm)
  e0f920:	e0bffb17 	ldw	r2,-20(fp)
  e0f924:	1005003a 	cmpeq	r2,r2,zero
  e0f928:	10003b1e 	bne	r2,zero,e0fa18 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  e0f92c:	e0fffb17 	ldw	r3,-20(fp)
  e0f930:	e0bffd17 	ldw	r2,-12(fp)
  e0f934:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  e0f938:	e0fffb17 	ldw	r3,-20(fp)
  e0f93c:	e0bffe17 	ldw	r2,-8(fp)
  e0f940:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  e0f944:	0005303a 	rdctl	r2,status
  e0f948:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  e0f94c:	e0fff817 	ldw	r3,-32(fp)
  e0f950:	00bfff84 	movi	r2,-2
  e0f954:	1884703a 	and	r2,r3,r2
  e0f958:	1001703a 	wrctl	status,r2
  
  return context;
  e0f95c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  e0f960:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  e0f964:	00803874 	movhi	r2,225
  e0f968:	10925d04 	addi	r2,r2,18804
  e0f96c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  e0f970:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  e0f974:	e0fffc17 	ldw	r3,-16(fp)
  e0f978:	e0bff917 	ldw	r2,-28(fp)
  e0f97c:	1885883a 	add	r2,r3,r2
  e0f980:	10c00044 	addi	r3,r2,1
  e0f984:	e0bffb17 	ldw	r2,-20(fp)
  e0f988:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  e0f98c:	e0bffb17 	ldw	r2,-20(fp)
  e0f990:	10c00217 	ldw	r3,8(r2)
  e0f994:	e0bff917 	ldw	r2,-28(fp)
  e0f998:	1880042e 	bgeu	r3,r2,e0f9ac <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  e0f99c:	e0fffb17 	ldw	r3,-20(fp)
  e0f9a0:	00800044 	movi	r2,1
  e0f9a4:	18800405 	stb	r2,16(r3)
  e0f9a8:	00000206 	br	e0f9b4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  e0f9ac:	e0bffb17 	ldw	r2,-20(fp)
  e0f9b0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  e0f9b4:	e0fffb17 	ldw	r3,-20(fp)
  e0f9b8:	00803874 	movhi	r2,225
  e0f9bc:	108b5904 	addi	r2,r2,11620
  e0f9c0:	e0bff615 	stw	r2,-40(fp)
  e0f9c4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  e0f9c8:	e0fff717 	ldw	r3,-36(fp)
  e0f9cc:	e0bff617 	ldw	r2,-40(fp)
  e0f9d0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  e0f9d4:	e0bff617 	ldw	r2,-40(fp)
  e0f9d8:	10c00017 	ldw	r3,0(r2)
  e0f9dc:	e0bff717 	ldw	r2,-36(fp)
  e0f9e0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  e0f9e4:	e0bff617 	ldw	r2,-40(fp)
  e0f9e8:	10c00017 	ldw	r3,0(r2)
  e0f9ec:	e0bff717 	ldw	r2,-36(fp)
  e0f9f0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  e0f9f4:	e0fff617 	ldw	r3,-40(fp)
  e0f9f8:	e0bff717 	ldw	r2,-36(fp)
  e0f9fc:	18800015 	stw	r2,0(r3)
  e0fa00:	e0bffa17 	ldw	r2,-24(fp)
  e0fa04:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  e0fa08:	e0bff517 	ldw	r2,-44(fp)
  e0fa0c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  e0fa10:	e03fff15 	stw	zero,-4(fp)
  e0fa14:	00000506 	br	e0fa2c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  e0fa18:	00bffa84 	movi	r2,-22
  e0fa1c:	e0bfff15 	stw	r2,-4(fp)
  e0fa20:	00000206 	br	e0fa2c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  e0fa24:	00bfde84 	movi	r2,-134
  e0fa28:	e0bfff15 	stw	r2,-4(fp)
  e0fa2c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  e0fa30:	e037883a 	mov	sp,fp
  e0fa34:	df000017 	ldw	fp,0(sp)
  e0fa38:	dec00104 	addi	sp,sp,4
  e0fa3c:	f800283a 	ret

00e0fa40 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  e0fa40:	defffe04 	addi	sp,sp,-8
  e0fa44:	df000115 	stw	fp,4(sp)
  e0fa48:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  e0fa4c:	e03fff15 	stw	zero,-4(fp)
  e0fa50:	00000506 	br	e0fa68 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  e0fa54:	e0bfff17 	ldw	r2,-4(fp)
  e0fa58:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  e0fa5c:	e0bfff17 	ldw	r2,-4(fp)
  e0fa60:	10800804 	addi	r2,r2,32
  e0fa64:	e0bfff15 	stw	r2,-4(fp)
  e0fa68:	e0bfff17 	ldw	r2,-4(fp)
  e0fa6c:	10810030 	cmpltui	r2,r2,1024
  e0fa70:	103ff81e 	bne	r2,zero,e0fa54 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  e0fa74:	e037883a 	mov	sp,fp
  e0fa78:	df000017 	ldw	fp,0(sp)
  e0fa7c:	dec00104 	addi	sp,sp,4
  e0fa80:	f800283a 	ret

00e0fa84 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  e0fa84:	defff904 	addi	sp,sp,-28
  e0fa88:	dfc00615 	stw	ra,24(sp)
  e0fa8c:	df000515 	stw	fp,20(sp)
  e0fa90:	df000504 	addi	fp,sp,20
  e0fa94:	e13ffd15 	stw	r4,-12(fp)
  e0fa98:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  e0fa9c:	e0bffd17 	ldw	r2,-12(fp)
  e0faa0:	1005003a 	cmpeq	r2,r2,zero
  e0faa4:	1000041e 	bne	r2,zero,e0fab8 <alt_dev_llist_insert+0x34>
  e0faa8:	e0bffd17 	ldw	r2,-12(fp)
  e0faac:	10800217 	ldw	r2,8(r2)
  e0fab0:	1004c03a 	cmpne	r2,r2,zero
  e0fab4:	1000071e 	bne	r2,zero,e0fad4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  e0fab8:	0e0fb380 	call	e0fb38 <alt_get_errno>
  e0fabc:	1007883a 	mov	r3,r2
  e0fac0:	00800584 	movi	r2,22
  e0fac4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  e0fac8:	00bffa84 	movi	r2,-22
  e0facc:	e0bfff15 	stw	r2,-4(fp)
  e0fad0:	00001306 	br	e0fb20 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  e0fad4:	e0fffd17 	ldw	r3,-12(fp)
  e0fad8:	e0bffe17 	ldw	r2,-8(fp)
  e0fadc:	e0bffb15 	stw	r2,-20(fp)
  e0fae0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  e0fae4:	e0fffc17 	ldw	r3,-16(fp)
  e0fae8:	e0bffb17 	ldw	r2,-20(fp)
  e0faec:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  e0faf0:	e0bffb17 	ldw	r2,-20(fp)
  e0faf4:	10c00017 	ldw	r3,0(r2)
  e0faf8:	e0bffc17 	ldw	r2,-16(fp)
  e0fafc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  e0fb00:	e0bffb17 	ldw	r2,-20(fp)
  e0fb04:	10c00017 	ldw	r3,0(r2)
  e0fb08:	e0bffc17 	ldw	r2,-16(fp)
  e0fb0c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  e0fb10:	e0fffb17 	ldw	r3,-20(fp)
  e0fb14:	e0bffc17 	ldw	r2,-16(fp)
  e0fb18:	18800015 	stw	r2,0(r3)

  return 0;  
  e0fb1c:	e03fff15 	stw	zero,-4(fp)
  e0fb20:	e0bfff17 	ldw	r2,-4(fp)
}
  e0fb24:	e037883a 	mov	sp,fp
  e0fb28:	dfc00117 	ldw	ra,4(sp)
  e0fb2c:	df000017 	ldw	fp,0(sp)
  e0fb30:	dec00204 	addi	sp,sp,8
  e0fb34:	f800283a 	ret

00e0fb38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e0fb38:	defffd04 	addi	sp,sp,-12
  e0fb3c:	dfc00215 	stw	ra,8(sp)
  e0fb40:	df000115 	stw	fp,4(sp)
  e0fb44:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e0fb48:	00803874 	movhi	r2,225
  e0fb4c:	108b5204 	addi	r2,r2,11592
  e0fb50:	10800017 	ldw	r2,0(r2)
  e0fb54:	1005003a 	cmpeq	r2,r2,zero
  e0fb58:	1000061e 	bne	r2,zero,e0fb74 <alt_get_errno+0x3c>
  e0fb5c:	00803874 	movhi	r2,225
  e0fb60:	108b5204 	addi	r2,r2,11592
  e0fb64:	10800017 	ldw	r2,0(r2)
  e0fb68:	103ee83a 	callr	r2
  e0fb6c:	e0bfff15 	stw	r2,-4(fp)
  e0fb70:	00000306 	br	e0fb80 <alt_get_errno+0x48>
  e0fb74:	00803874 	movhi	r2,225
  e0fb78:	10925704 	addi	r2,r2,18780
  e0fb7c:	e0bfff15 	stw	r2,-4(fp)
  e0fb80:	e0bfff17 	ldw	r2,-4(fp)
}
  e0fb84:	e037883a 	mov	sp,fp
  e0fb88:	dfc00117 	ldw	ra,4(sp)
  e0fb8c:	df000017 	ldw	fp,0(sp)
  e0fb90:	dec00204 	addi	sp,sp,8
  e0fb94:	f800283a 	ret

00e0fb98 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  e0fb98:	defffd04 	addi	sp,sp,-12
  e0fb9c:	dfc00215 	stw	ra,8(sp)
  e0fba0:	df000115 	stw	fp,4(sp)
  e0fba4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  e0fba8:	00bfff04 	movi	r2,-4
  e0fbac:	00c03874 	movhi	r3,225
  e0fbb0:	18c32504 	addi	r3,r3,3220
  e0fbb4:	1885883a 	add	r2,r3,r2
  e0fbb8:	e0bfff15 	stw	r2,-4(fp)
  e0fbbc:	00000606 	br	e0fbd8 <_do_ctors+0x40>
        (*ctor) (); 
  e0fbc0:	e0bfff17 	ldw	r2,-4(fp)
  e0fbc4:	10800017 	ldw	r2,0(r2)
  e0fbc8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  e0fbcc:	e0bfff17 	ldw	r2,-4(fp)
  e0fbd0:	10bfff04 	addi	r2,r2,-4
  e0fbd4:	e0bfff15 	stw	r2,-4(fp)
  e0fbd8:	e0ffff17 	ldw	r3,-4(fp)
  e0fbdc:	00803874 	movhi	r2,225
  e0fbe0:	10832404 	addi	r2,r2,3216
  e0fbe4:	18bff62e 	bgeu	r3,r2,e0fbc0 <_do_ctors+0x28>
        (*ctor) (); 
}
  e0fbe8:	e037883a 	mov	sp,fp
  e0fbec:	dfc00117 	ldw	ra,4(sp)
  e0fbf0:	df000017 	ldw	fp,0(sp)
  e0fbf4:	dec00204 	addi	sp,sp,8
  e0fbf8:	f800283a 	ret

00e0fbfc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  e0fbfc:	defffd04 	addi	sp,sp,-12
  e0fc00:	dfc00215 	stw	ra,8(sp)
  e0fc04:	df000115 	stw	fp,4(sp)
  e0fc08:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  e0fc0c:	00bfff04 	movi	r2,-4
  e0fc10:	00c03874 	movhi	r3,225
  e0fc14:	18c32504 	addi	r3,r3,3220
  e0fc18:	1885883a 	add	r2,r3,r2
  e0fc1c:	e0bfff15 	stw	r2,-4(fp)
  e0fc20:	00000606 	br	e0fc3c <_do_dtors+0x40>
        (*dtor) (); 
  e0fc24:	e0bfff17 	ldw	r2,-4(fp)
  e0fc28:	10800017 	ldw	r2,0(r2)
  e0fc2c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  e0fc30:	e0bfff17 	ldw	r2,-4(fp)
  e0fc34:	10bfff04 	addi	r2,r2,-4
  e0fc38:	e0bfff15 	stw	r2,-4(fp)
  e0fc3c:	e0ffff17 	ldw	r3,-4(fp)
  e0fc40:	00803874 	movhi	r2,225
  e0fc44:	10832504 	addi	r2,r2,3220
  e0fc48:	18bff62e 	bgeu	r3,r2,e0fc24 <_do_dtors+0x28>
        (*dtor) (); 
}
  e0fc4c:	e037883a 	mov	sp,fp
  e0fc50:	dfc00117 	ldw	ra,4(sp)
  e0fc54:	df000017 	ldw	fp,0(sp)
  e0fc58:	dec00204 	addi	sp,sp,8
  e0fc5c:	f800283a 	ret

00e0fc60 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  e0fc60:	defff904 	addi	sp,sp,-28
  e0fc64:	dfc00615 	stw	ra,24(sp)
  e0fc68:	df000515 	stw	fp,20(sp)
  e0fc6c:	df000504 	addi	fp,sp,20
  e0fc70:	e13ffd15 	stw	r4,-12(fp)
  e0fc74:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  e0fc78:	e0bffe17 	ldw	r2,-8(fp)
  e0fc7c:	10800017 	ldw	r2,0(r2)
  e0fc80:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  e0fc84:	e13ffd17 	ldw	r4,-12(fp)
  e0fc88:	0e039540 	call	e03954 <strlen>
  e0fc8c:	10800044 	addi	r2,r2,1
  e0fc90:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  e0fc94:	00000d06 	br	e0fccc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  e0fc98:	e0bffc17 	ldw	r2,-16(fp)
  e0fc9c:	11000217 	ldw	r4,8(r2)
  e0fca0:	e1bffb17 	ldw	r6,-20(fp)
  e0fca4:	e17ffd17 	ldw	r5,-12(fp)
  e0fca8:	0e108680 	call	e10868 <memcmp>
  e0fcac:	1004c03a 	cmpne	r2,r2,zero
  e0fcb0:	1000031e 	bne	r2,zero,e0fcc0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  e0fcb4:	e0bffc17 	ldw	r2,-16(fp)
  e0fcb8:	e0bfff15 	stw	r2,-4(fp)
  e0fcbc:	00000706 	br	e0fcdc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  e0fcc0:	e0bffc17 	ldw	r2,-16(fp)
  e0fcc4:	10800017 	ldw	r2,0(r2)
  e0fcc8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  e0fccc:	e0fffe17 	ldw	r3,-8(fp)
  e0fcd0:	e0bffc17 	ldw	r2,-16(fp)
  e0fcd4:	10fff01e 	bne	r2,r3,e0fc98 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  e0fcd8:	e03fff15 	stw	zero,-4(fp)
  e0fcdc:	e0bfff17 	ldw	r2,-4(fp)
}
  e0fce0:	e037883a 	mov	sp,fp
  e0fce4:	dfc00117 	ldw	ra,4(sp)
  e0fce8:	df000017 	ldw	fp,0(sp)
  e0fcec:	dec00204 	addi	sp,sp,8
  e0fcf0:	f800283a 	ret

00e0fcf4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  e0fcf4:	defffe04 	addi	sp,sp,-8
  e0fcf8:	dfc00115 	stw	ra,4(sp)
  e0fcfc:	df000015 	stw	fp,0(sp)
  e0fd00:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  e0fd04:	0009883a 	mov	r4,zero
  e0fd08:	01440004 	movi	r5,4096
  e0fd0c:	0e1078c0 	call	e1078c <alt_icache_flush>
#endif
}
  e0fd10:	e037883a 	mov	sp,fp
  e0fd14:	dfc00117 	ldw	ra,4(sp)
  e0fd18:	df000017 	ldw	fp,0(sp)
  e0fd1c:	dec00204 	addi	sp,sp,8
  e0fd20:	f800283a 	ret

00e0fd24 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  e0fd24:	defff904 	addi	sp,sp,-28
  e0fd28:	dfc00615 	stw	ra,24(sp)
  e0fd2c:	df000515 	stw	fp,20(sp)
  e0fd30:	df000504 	addi	fp,sp,20
  e0fd34:	e13ffc15 	stw	r4,-16(fp)
  e0fd38:	e17ffd15 	stw	r5,-12(fp)
  e0fd3c:	e1bffe15 	stw	r6,-8(fp)
  e0fd40:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  e0fd44:	e0800217 	ldw	r2,8(fp)
  e0fd48:	d8800015 	stw	r2,0(sp)
  e0fd4c:	e13ffc17 	ldw	r4,-16(fp)
  e0fd50:	e17ffd17 	ldw	r5,-12(fp)
  e0fd54:	e1bffe17 	ldw	r6,-8(fp)
  e0fd58:	e1ffff17 	ldw	r7,-4(fp)
  e0fd5c:	0e0fef80 	call	e0fef8 <alt_iic_isr_register>
}  
  e0fd60:	e037883a 	mov	sp,fp
  e0fd64:	dfc00117 	ldw	ra,4(sp)
  e0fd68:	df000017 	ldw	fp,0(sp)
  e0fd6c:	dec00204 	addi	sp,sp,8
  e0fd70:	f800283a 	ret

00e0fd74 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  e0fd74:	defff904 	addi	sp,sp,-28
  e0fd78:	df000615 	stw	fp,24(sp)
  e0fd7c:	df000604 	addi	fp,sp,24
  e0fd80:	e13ffe15 	stw	r4,-8(fp)
  e0fd84:	e17fff15 	stw	r5,-4(fp)
  e0fd88:	e0bfff17 	ldw	r2,-4(fp)
  e0fd8c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  e0fd90:	0005303a 	rdctl	r2,status
  e0fd94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  e0fd98:	e0fffb17 	ldw	r3,-20(fp)
  e0fd9c:	00bfff84 	movi	r2,-2
  e0fda0:	1884703a 	and	r2,r3,r2
  e0fda4:	1001703a 	wrctl	status,r2
  
  return context;
  e0fda8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  e0fdac:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  e0fdb0:	e0fffc17 	ldw	r3,-16(fp)
  e0fdb4:	00800044 	movi	r2,1
  e0fdb8:	10c4983a 	sll	r2,r2,r3
  e0fdbc:	1007883a 	mov	r3,r2
  e0fdc0:	00803874 	movhi	r2,225
  e0fdc4:	10925b04 	addi	r2,r2,18796
  e0fdc8:	10800017 	ldw	r2,0(r2)
  e0fdcc:	1886b03a 	or	r3,r3,r2
  e0fdd0:	00803874 	movhi	r2,225
  e0fdd4:	10925b04 	addi	r2,r2,18796
  e0fdd8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  e0fddc:	00803874 	movhi	r2,225
  e0fde0:	10925b04 	addi	r2,r2,18796
  e0fde4:	10800017 	ldw	r2,0(r2)
  e0fde8:	100170fa 	wrctl	ienable,r2
  e0fdec:	e0bffd17 	ldw	r2,-12(fp)
  e0fdf0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  e0fdf4:	e0bffa17 	ldw	r2,-24(fp)
  e0fdf8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  e0fdfc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  e0fe00:	e037883a 	mov	sp,fp
  e0fe04:	df000017 	ldw	fp,0(sp)
  e0fe08:	dec00104 	addi	sp,sp,4
  e0fe0c:	f800283a 	ret

00e0fe10 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  e0fe10:	defff904 	addi	sp,sp,-28
  e0fe14:	df000615 	stw	fp,24(sp)
  e0fe18:	df000604 	addi	fp,sp,24
  e0fe1c:	e13ffe15 	stw	r4,-8(fp)
  e0fe20:	e17fff15 	stw	r5,-4(fp)
  e0fe24:	e0bfff17 	ldw	r2,-4(fp)
  e0fe28:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  e0fe2c:	0005303a 	rdctl	r2,status
  e0fe30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  e0fe34:	e0fffb17 	ldw	r3,-20(fp)
  e0fe38:	00bfff84 	movi	r2,-2
  e0fe3c:	1884703a 	and	r2,r3,r2
  e0fe40:	1001703a 	wrctl	status,r2
  
  return context;
  e0fe44:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  e0fe48:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  e0fe4c:	e0fffc17 	ldw	r3,-16(fp)
  e0fe50:	00800044 	movi	r2,1
  e0fe54:	10c4983a 	sll	r2,r2,r3
  e0fe58:	0084303a 	nor	r2,zero,r2
  e0fe5c:	1007883a 	mov	r3,r2
  e0fe60:	00803874 	movhi	r2,225
  e0fe64:	10925b04 	addi	r2,r2,18796
  e0fe68:	10800017 	ldw	r2,0(r2)
  e0fe6c:	1886703a 	and	r3,r3,r2
  e0fe70:	00803874 	movhi	r2,225
  e0fe74:	10925b04 	addi	r2,r2,18796
  e0fe78:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  e0fe7c:	00803874 	movhi	r2,225
  e0fe80:	10925b04 	addi	r2,r2,18796
  e0fe84:	10800017 	ldw	r2,0(r2)
  e0fe88:	100170fa 	wrctl	ienable,r2
  e0fe8c:	e0bffd17 	ldw	r2,-12(fp)
  e0fe90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  e0fe94:	e0bffa17 	ldw	r2,-24(fp)
  e0fe98:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  e0fe9c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  e0fea0:	e037883a 	mov	sp,fp
  e0fea4:	df000017 	ldw	fp,0(sp)
  e0fea8:	dec00104 	addi	sp,sp,4
  e0feac:	f800283a 	ret

00e0feb0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  e0feb0:	defffc04 	addi	sp,sp,-16
  e0feb4:	df000315 	stw	fp,12(sp)
  e0feb8:	df000304 	addi	fp,sp,12
  e0febc:	e13ffe15 	stw	r4,-8(fp)
  e0fec0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  e0fec4:	000530fa 	rdctl	r2,ienable
  e0fec8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  e0fecc:	e0ffff17 	ldw	r3,-4(fp)
  e0fed0:	00800044 	movi	r2,1
  e0fed4:	10c4983a 	sll	r2,r2,r3
  e0fed8:	1007883a 	mov	r3,r2
  e0fedc:	e0bffd17 	ldw	r2,-12(fp)
  e0fee0:	1884703a 	and	r2,r3,r2
  e0fee4:	1004c03a 	cmpne	r2,r2,zero
}
  e0fee8:	e037883a 	mov	sp,fp
  e0feec:	df000017 	ldw	fp,0(sp)
  e0fef0:	dec00104 	addi	sp,sp,4
  e0fef4:	f800283a 	ret

00e0fef8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  e0fef8:	defff404 	addi	sp,sp,-48
  e0fefc:	dfc00b15 	stw	ra,44(sp)
  e0ff00:	df000a15 	stw	fp,40(sp)
  e0ff04:	df000a04 	addi	fp,sp,40
  e0ff08:	e13ffb15 	stw	r4,-20(fp)
  e0ff0c:	e17ffc15 	stw	r5,-16(fp)
  e0ff10:	e1bffd15 	stw	r6,-12(fp)
  e0ff14:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  e0ff18:	00bffa84 	movi	r2,-22
  e0ff1c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  e0ff20:	e0bffc17 	ldw	r2,-16(fp)
  e0ff24:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  e0ff28:	e0bff917 	ldw	r2,-28(fp)
  e0ff2c:	10800808 	cmpgei	r2,r2,32
  e0ff30:	1000291e 	bne	r2,zero,e0ffd8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  e0ff34:	0005303a 	rdctl	r2,status
  e0ff38:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  e0ff3c:	e0fff717 	ldw	r3,-36(fp)
  e0ff40:	00bfff84 	movi	r2,-2
  e0ff44:	1884703a 	and	r2,r3,r2
  e0ff48:	1001703a 	wrctl	status,r2
  
  return context;
  e0ff4c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  e0ff50:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  e0ff54:	e0bff917 	ldw	r2,-28(fp)
  e0ff58:	00c03874 	movhi	r3,225
  e0ff5c:	18d26804 	addi	r3,r3,18848
  e0ff60:	100490fa 	slli	r2,r2,3
  e0ff64:	10c7883a 	add	r3,r2,r3
  e0ff68:	e0bffd17 	ldw	r2,-12(fp)
  e0ff6c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  e0ff70:	e0bff917 	ldw	r2,-28(fp)
  e0ff74:	00c03874 	movhi	r3,225
  e0ff78:	18d26804 	addi	r3,r3,18848
  e0ff7c:	100490fa 	slli	r2,r2,3
  e0ff80:	10c5883a 	add	r2,r2,r3
  e0ff84:	10c00104 	addi	r3,r2,4
  e0ff88:	e0bffe17 	ldw	r2,-8(fp)
  e0ff8c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  e0ff90:	e0bffd17 	ldw	r2,-12(fp)
  e0ff94:	1005003a 	cmpeq	r2,r2,zero
  e0ff98:	1000051e 	bne	r2,zero,e0ffb0 <alt_iic_isr_register+0xb8>
  e0ff9c:	e17ff917 	ldw	r5,-28(fp)
  e0ffa0:	e13ffb17 	ldw	r4,-20(fp)
  e0ffa4:	0e0fd740 	call	e0fd74 <alt_ic_irq_enable>
  e0ffa8:	e0bfff15 	stw	r2,-4(fp)
  e0ffac:	00000406 	br	e0ffc0 <alt_iic_isr_register+0xc8>
  e0ffb0:	e17ff917 	ldw	r5,-28(fp)
  e0ffb4:	e13ffb17 	ldw	r4,-20(fp)
  e0ffb8:	0e0fe100 	call	e0fe10 <alt_ic_irq_disable>
  e0ffbc:	e0bfff15 	stw	r2,-4(fp)
  e0ffc0:	e0bfff17 	ldw	r2,-4(fp)
  e0ffc4:	e0bffa15 	stw	r2,-24(fp)
  e0ffc8:	e0bff817 	ldw	r2,-32(fp)
  e0ffcc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  e0ffd0:	e0bff617 	ldw	r2,-40(fp)
  e0ffd4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  e0ffd8:	e0bffa17 	ldw	r2,-24(fp)
}
  e0ffdc:	e037883a 	mov	sp,fp
  e0ffe0:	dfc00117 	ldw	ra,4(sp)
  e0ffe4:	df000017 	ldw	fp,0(sp)
  e0ffe8:	dec00204 	addi	sp,sp,8
  e0ffec:	f800283a 	ret

00e0fff0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  e0fff0:	defff904 	addi	sp,sp,-28
  e0fff4:	dfc00615 	stw	ra,24(sp)
  e0fff8:	df000515 	stw	fp,20(sp)
  e0fffc:	df000504 	addi	fp,sp,20
  e10000:	e13ffc15 	stw	r4,-16(fp)
  e10004:	e17ffd15 	stw	r5,-12(fp)
  e10008:	e1bffe15 	stw	r6,-8(fp)
  e1000c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  e10010:	e13ffd17 	ldw	r4,-12(fp)
  e10014:	e17ffe17 	ldw	r5,-8(fp)
  e10018:	e1bfff17 	ldw	r6,-4(fp)
  e1001c:	0e102080 	call	e10208 <open>
  e10020:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  e10024:	e0bffb17 	ldw	r2,-20(fp)
  e10028:	1004803a 	cmplt	r2,r2,zero
  e1002c:	10001c1e 	bne	r2,zero,e100a0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  e10030:	e0bffb17 	ldw	r2,-20(fp)
  e10034:	00c03874 	movhi	r3,225
  e10038:	18c67504 	addi	r3,r3,6612
  e1003c:	10800324 	muli	r2,r2,12
  e10040:	10c5883a 	add	r2,r2,r3
  e10044:	10c00017 	ldw	r3,0(r2)
  e10048:	e0bffc17 	ldw	r2,-16(fp)
  e1004c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  e10050:	e0bffb17 	ldw	r2,-20(fp)
  e10054:	00c03874 	movhi	r3,225
  e10058:	18c67504 	addi	r3,r3,6612
  e1005c:	10800324 	muli	r2,r2,12
  e10060:	10c5883a 	add	r2,r2,r3
  e10064:	10800104 	addi	r2,r2,4
  e10068:	10c00017 	ldw	r3,0(r2)
  e1006c:	e0bffc17 	ldw	r2,-16(fp)
  e10070:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  e10074:	e0bffb17 	ldw	r2,-20(fp)
  e10078:	00c03874 	movhi	r3,225
  e1007c:	18c67504 	addi	r3,r3,6612
  e10080:	10800324 	muli	r2,r2,12
  e10084:	10c5883a 	add	r2,r2,r3
  e10088:	10800204 	addi	r2,r2,8
  e1008c:	10c00017 	ldw	r3,0(r2)
  e10090:	e0bffc17 	ldw	r2,-16(fp)
  e10094:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  e10098:	e13ffb17 	ldw	r4,-20(fp)
  e1009c:	0e0c9a00 	call	e0c9a0 <alt_release_fd>
  }
} 
  e100a0:	e037883a 	mov	sp,fp
  e100a4:	dfc00117 	ldw	ra,4(sp)
  e100a8:	df000017 	ldw	fp,0(sp)
  e100ac:	dec00204 	addi	sp,sp,8
  e100b0:	f800283a 	ret

00e100b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  e100b4:	defffb04 	addi	sp,sp,-20
  e100b8:	dfc00415 	stw	ra,16(sp)
  e100bc:	df000315 	stw	fp,12(sp)
  e100c0:	df000304 	addi	fp,sp,12
  e100c4:	e13ffd15 	stw	r4,-12(fp)
  e100c8:	e17ffe15 	stw	r5,-8(fp)
  e100cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  e100d0:	01003874 	movhi	r4,225
  e100d4:	21067804 	addi	r4,r4,6624
  e100d8:	e17ffd17 	ldw	r5,-12(fp)
  e100dc:	01800044 	movi	r6,1
  e100e0:	01c07fc4 	movi	r7,511
  e100e4:	0e0fff00 	call	e0fff0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  e100e8:	01003874 	movhi	r4,225
  e100ec:	21067504 	addi	r4,r4,6612
  e100f0:	e17ffe17 	ldw	r5,-8(fp)
  e100f4:	000d883a 	mov	r6,zero
  e100f8:	01c07fc4 	movi	r7,511
  e100fc:	0e0fff00 	call	e0fff0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  e10100:	01003874 	movhi	r4,225
  e10104:	21067b04 	addi	r4,r4,6636
  e10108:	e17fff17 	ldw	r5,-4(fp)
  e1010c:	01800044 	movi	r6,1
  e10110:	01c07fc4 	movi	r7,511
  e10114:	0e0fff00 	call	e0fff0 <alt_open_fd>
}  
  e10118:	e037883a 	mov	sp,fp
  e1011c:	dfc00117 	ldw	ra,4(sp)
  e10120:	df000017 	ldw	fp,0(sp)
  e10124:	dec00204 	addi	sp,sp,8
  e10128:	f800283a 	ret

00e1012c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  e1012c:	defffc04 	addi	sp,sp,-16
  e10130:	df000315 	stw	fp,12(sp)
  e10134:	df000304 	addi	fp,sp,12
  e10138:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  e1013c:	e0bffe17 	ldw	r2,-8(fp)
  e10140:	10800217 	ldw	r2,8(r2)
  e10144:	10d00034 	orhi	r3,r2,16384
  e10148:	e0bffe17 	ldw	r2,-8(fp)
  e1014c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  e10150:	e03ffd15 	stw	zero,-12(fp)
  e10154:	00002006 	br	e101d8 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  e10158:	e0bffd17 	ldw	r2,-12(fp)
  e1015c:	00c03874 	movhi	r3,225
  e10160:	18c67504 	addi	r3,r3,6612
  e10164:	10800324 	muli	r2,r2,12
  e10168:	10c5883a 	add	r2,r2,r3
  e1016c:	10c00017 	ldw	r3,0(r2)
  e10170:	e0bffe17 	ldw	r2,-8(fp)
  e10174:	10800017 	ldw	r2,0(r2)
  e10178:	1880141e 	bne	r3,r2,e101cc <alt_file_locked+0xa0>
  e1017c:	e0bffd17 	ldw	r2,-12(fp)
  e10180:	00c03874 	movhi	r3,225
  e10184:	18c67504 	addi	r3,r3,6612
  e10188:	10800324 	muli	r2,r2,12
  e1018c:	10c5883a 	add	r2,r2,r3
  e10190:	10800204 	addi	r2,r2,8
  e10194:	10800017 	ldw	r2,0(r2)
  e10198:	1004403a 	cmpge	r2,r2,zero
  e1019c:	10000b1e 	bne	r2,zero,e101cc <alt_file_locked+0xa0>
  e101a0:	e0bffd17 	ldw	r2,-12(fp)
  e101a4:	10800324 	muli	r2,r2,12
  e101a8:	1007883a 	mov	r3,r2
  e101ac:	00803874 	movhi	r2,225
  e101b0:	10867504 	addi	r2,r2,6612
  e101b4:	1887883a 	add	r3,r3,r2
  e101b8:	e0bffe17 	ldw	r2,-8(fp)
  e101bc:	18800326 	beq	r3,r2,e101cc <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  e101c0:	00bffcc4 	movi	r2,-13
  e101c4:	e0bfff15 	stw	r2,-4(fp)
  e101c8:	00000a06 	br	e101f4 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  e101cc:	e0bffd17 	ldw	r2,-12(fp)
  e101d0:	10800044 	addi	r2,r2,1
  e101d4:	e0bffd15 	stw	r2,-12(fp)
  e101d8:	00803874 	movhi	r2,225
  e101dc:	108b5104 	addi	r2,r2,11588
  e101e0:	10800017 	ldw	r2,0(r2)
  e101e4:	1007883a 	mov	r3,r2
  e101e8:	e0bffd17 	ldw	r2,-12(fp)
  e101ec:	18bfda2e 	bgeu	r3,r2,e10158 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  e101f0:	e03fff15 	stw	zero,-4(fp)
  e101f4:	e0bfff17 	ldw	r2,-4(fp)
}
  e101f8:	e037883a 	mov	sp,fp
  e101fc:	df000017 	ldw	fp,0(sp)
  e10200:	dec00104 	addi	sp,sp,4
  e10204:	f800283a 	ret

00e10208 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  e10208:	defff404 	addi	sp,sp,-48
  e1020c:	dfc00b15 	stw	ra,44(sp)
  e10210:	df000a15 	stw	fp,40(sp)
  e10214:	df000a04 	addi	fp,sp,40
  e10218:	e13ffb15 	stw	r4,-20(fp)
  e1021c:	e17ffc15 	stw	r5,-16(fp)
  e10220:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  e10224:	00bfffc4 	movi	r2,-1
  e10228:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  e1022c:	00bffb44 	movi	r2,-19
  e10230:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  e10234:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  e10238:	e13ffb17 	ldw	r4,-20(fp)
  e1023c:	01403874 	movhi	r5,225
  e10240:	294b4f04 	addi	r5,r5,11580
  e10244:	0e0fc600 	call	e0fc60 <alt_find_dev>
  e10248:	e0bffa15 	stw	r2,-24(fp)
  e1024c:	e0bffa17 	ldw	r2,-24(fp)
  e10250:	1004c03a 	cmpne	r2,r2,zero
  e10254:	1000051e 	bne	r2,zero,e1026c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  e10258:	e13ffb17 	ldw	r4,-20(fp)
  e1025c:	0e105b40 	call	e105b4 <alt_find_file>
  e10260:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  e10264:	00800044 	movi	r2,1
  e10268:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  e1026c:	e0bffa17 	ldw	r2,-24(fp)
  e10270:	1005003a 	cmpeq	r2,r2,zero
  e10274:	1000301e 	bne	r2,zero,e10338 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  e10278:	e13ffa17 	ldw	r4,-24(fp)
  e1027c:	0e106d40 	call	e106d4 <alt_get_fd>
  e10280:	e0bff815 	stw	r2,-32(fp)
  e10284:	e0bff817 	ldw	r2,-32(fp)
  e10288:	1004403a 	cmpge	r2,r2,zero
  e1028c:	1000031e 	bne	r2,zero,e1029c <open+0x94>
    {
      status = index;
  e10290:	e0bff817 	ldw	r2,-32(fp)
  e10294:	e0bff715 	stw	r2,-36(fp)
  e10298:	00002906 	br	e10340 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  e1029c:	e0bff817 	ldw	r2,-32(fp)
  e102a0:	10800324 	muli	r2,r2,12
  e102a4:	1007883a 	mov	r3,r2
  e102a8:	00803874 	movhi	r2,225
  e102ac:	10867504 	addi	r2,r2,6612
  e102b0:	1885883a 	add	r2,r3,r2
  e102b4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  e102b8:	e0fffc17 	ldw	r3,-16(fp)
  e102bc:	00900034 	movhi	r2,16384
  e102c0:	10bfffc4 	addi	r2,r2,-1
  e102c4:	1886703a 	and	r3,r3,r2
  e102c8:	e0bff917 	ldw	r2,-28(fp)
  e102cc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  e102d0:	e0bff617 	ldw	r2,-40(fp)
  e102d4:	1004c03a 	cmpne	r2,r2,zero
  e102d8:	1000061e 	bne	r2,zero,e102f4 <open+0xec>
  e102dc:	e13ff917 	ldw	r4,-28(fp)
  e102e0:	0e1012c0 	call	e1012c <alt_file_locked>
  e102e4:	e0bff715 	stw	r2,-36(fp)
  e102e8:	e0bff717 	ldw	r2,-36(fp)
  e102ec:	1004803a 	cmplt	r2,r2,zero
  e102f0:	1000131e 	bne	r2,zero,e10340 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  e102f4:	e0bffa17 	ldw	r2,-24(fp)
  e102f8:	10800317 	ldw	r2,12(r2)
  e102fc:	1005003a 	cmpeq	r2,r2,zero
  e10300:	1000091e 	bne	r2,zero,e10328 <open+0x120>
  e10304:	e0bffa17 	ldw	r2,-24(fp)
  e10308:	10800317 	ldw	r2,12(r2)
  e1030c:	e13ff917 	ldw	r4,-28(fp)
  e10310:	e17ffb17 	ldw	r5,-20(fp)
  e10314:	e1bffc17 	ldw	r6,-16(fp)
  e10318:	e1fffd17 	ldw	r7,-12(fp)
  e1031c:	103ee83a 	callr	r2
  e10320:	e0bfff15 	stw	r2,-4(fp)
  e10324:	00000106 	br	e1032c <open+0x124>
  e10328:	e03fff15 	stw	zero,-4(fp)
  e1032c:	e0bfff17 	ldw	r2,-4(fp)
  e10330:	e0bff715 	stw	r2,-36(fp)
  e10334:	00000206 	br	e10340 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  e10338:	00bffb44 	movi	r2,-19
  e1033c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  e10340:	e0bff717 	ldw	r2,-36(fp)
  e10344:	1004403a 	cmpge	r2,r2,zero
  e10348:	1000091e 	bne	r2,zero,e10370 <open+0x168>
  {
    alt_release_fd (index);  
  e1034c:	e13ff817 	ldw	r4,-32(fp)
  e10350:	0e0c9a00 	call	e0c9a0 <alt_release_fd>
    ALT_ERRNO = -status;
  e10354:	0e103900 	call	e10390 <alt_get_errno>
  e10358:	e0fff717 	ldw	r3,-36(fp)
  e1035c:	00c7c83a 	sub	r3,zero,r3
  e10360:	10c00015 	stw	r3,0(r2)
    return -1;
  e10364:	00bfffc4 	movi	r2,-1
  e10368:	e0bffe15 	stw	r2,-8(fp)
  e1036c:	00000206 	br	e10378 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  e10370:	e0bff817 	ldw	r2,-32(fp)
  e10374:	e0bffe15 	stw	r2,-8(fp)
  e10378:	e0bffe17 	ldw	r2,-8(fp)
}
  e1037c:	e037883a 	mov	sp,fp
  e10380:	dfc00117 	ldw	ra,4(sp)
  e10384:	df000017 	ldw	fp,0(sp)
  e10388:	dec00204 	addi	sp,sp,8
  e1038c:	f800283a 	ret

00e10390 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e10390:	defffd04 	addi	sp,sp,-12
  e10394:	dfc00215 	stw	ra,8(sp)
  e10398:	df000115 	stw	fp,4(sp)
  e1039c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e103a0:	00803874 	movhi	r2,225
  e103a4:	108b5204 	addi	r2,r2,11592
  e103a8:	10800017 	ldw	r2,0(r2)
  e103ac:	1005003a 	cmpeq	r2,r2,zero
  e103b0:	1000061e 	bne	r2,zero,e103cc <alt_get_errno+0x3c>
  e103b4:	00803874 	movhi	r2,225
  e103b8:	108b5204 	addi	r2,r2,11592
  e103bc:	10800017 	ldw	r2,0(r2)
  e103c0:	103ee83a 	callr	r2
  e103c4:	e0bfff15 	stw	r2,-4(fp)
  e103c8:	00000306 	br	e103d8 <alt_get_errno+0x48>
  e103cc:	00803874 	movhi	r2,225
  e103d0:	10925704 	addi	r2,r2,18780
  e103d4:	e0bfff15 	stw	r2,-4(fp)
  e103d8:	e0bfff17 	ldw	r2,-4(fp)
}
  e103dc:	e037883a 	mov	sp,fp
  e103e0:	dfc00117 	ldw	ra,4(sp)
  e103e4:	df000017 	ldw	fp,0(sp)
  e103e8:	dec00204 	addi	sp,sp,8
  e103ec:	f800283a 	ret

00e103f0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  e103f0:	defffa04 	addi	sp,sp,-24
  e103f4:	df000515 	stw	fp,20(sp)
  e103f8:	df000504 	addi	fp,sp,20
  e103fc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  e10400:	0005303a 	rdctl	r2,status
  e10404:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  e10408:	e0fffd17 	ldw	r3,-12(fp)
  e1040c:	00bfff84 	movi	r2,-2
  e10410:	1884703a 	and	r2,r3,r2
  e10414:	1001703a 	wrctl	status,r2
  
  return context;
  e10418:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  e1041c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  e10420:	e0bfff17 	ldw	r2,-4(fp)
  e10424:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  e10428:	e0bffc17 	ldw	r2,-16(fp)
  e1042c:	10c00017 	ldw	r3,0(r2)
  e10430:	e0bffc17 	ldw	r2,-16(fp)
  e10434:	10800117 	ldw	r2,4(r2)
  e10438:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  e1043c:	e0bffc17 	ldw	r2,-16(fp)
  e10440:	10c00117 	ldw	r3,4(r2)
  e10444:	e0bffc17 	ldw	r2,-16(fp)
  e10448:	10800017 	ldw	r2,0(r2)
  e1044c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  e10450:	e0fffc17 	ldw	r3,-16(fp)
  e10454:	e0bffc17 	ldw	r2,-16(fp)
  e10458:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  e1045c:	e0fffc17 	ldw	r3,-16(fp)
  e10460:	e0bffc17 	ldw	r2,-16(fp)
  e10464:	18800015 	stw	r2,0(r3)
  e10468:	e0bffe17 	ldw	r2,-8(fp)
  e1046c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  e10470:	e0bffb17 	ldw	r2,-20(fp)
  e10474:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  e10478:	e037883a 	mov	sp,fp
  e1047c:	df000017 	ldw	fp,0(sp)
  e10480:	dec00104 	addi	sp,sp,4
  e10484:	f800283a 	ret

00e10488 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  e10488:	defffb04 	addi	sp,sp,-20
  e1048c:	dfc00415 	stw	ra,16(sp)
  e10490:	df000315 	stw	fp,12(sp)
  e10494:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  e10498:	d0a01b17 	ldw	r2,-32660(gp)
  e1049c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  e104a0:	d0a71f17 	ldw	r2,-25476(gp)
  e104a4:	10800044 	addi	r2,r2,1
  e104a8:	d0a71f15 	stw	r2,-25476(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  e104ac:	00003106 	br	e10574 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  e104b0:	e0bffe17 	ldw	r2,-8(fp)
  e104b4:	10800017 	ldw	r2,0(r2)
  e104b8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  e104bc:	e0bffe17 	ldw	r2,-8(fp)
  e104c0:	10800403 	ldbu	r2,16(r2)
  e104c4:	10803fcc 	andi	r2,r2,255
  e104c8:	1005003a 	cmpeq	r2,r2,zero
  e104cc:	1000051e 	bne	r2,zero,e104e4 <alt_tick+0x5c>
  e104d0:	d0a71f17 	ldw	r2,-25476(gp)
  e104d4:	1004c03a 	cmpne	r2,r2,zero
  e104d8:	1000021e 	bne	r2,zero,e104e4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  e104dc:	e0bffe17 	ldw	r2,-8(fp)
  e104e0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  e104e4:	e0bffe17 	ldw	r2,-8(fp)
  e104e8:	10c00217 	ldw	r3,8(r2)
  e104ec:	d0a71f17 	ldw	r2,-25476(gp)
  e104f0:	10c01e36 	bltu	r2,r3,e1056c <alt_tick+0xe4>
  e104f4:	e0bffe17 	ldw	r2,-8(fp)
  e104f8:	10800403 	ldbu	r2,16(r2)
  e104fc:	10803fcc 	andi	r2,r2,255
  e10500:	1004c03a 	cmpne	r2,r2,zero
  e10504:	1000191e 	bne	r2,zero,e1056c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  e10508:	e0bffe17 	ldw	r2,-8(fp)
  e1050c:	10c00317 	ldw	r3,12(r2)
  e10510:	e0bffe17 	ldw	r2,-8(fp)
  e10514:	11000517 	ldw	r4,20(r2)
  e10518:	183ee83a 	callr	r3
  e1051c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  e10520:	e0bffd17 	ldw	r2,-12(fp)
  e10524:	1004c03a 	cmpne	r2,r2,zero
  e10528:	1000031e 	bne	r2,zero,e10538 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  e1052c:	e13ffe17 	ldw	r4,-8(fp)
  e10530:	0e103f00 	call	e103f0 <alt_alarm_stop>
  e10534:	00000d06 	br	e1056c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  e10538:	e0bffe17 	ldw	r2,-8(fp)
  e1053c:	10c00217 	ldw	r3,8(r2)
  e10540:	e0bffd17 	ldw	r2,-12(fp)
  e10544:	1887883a 	add	r3,r3,r2
  e10548:	e0bffe17 	ldw	r2,-8(fp)
  e1054c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  e10550:	e0bffe17 	ldw	r2,-8(fp)
  e10554:	10c00217 	ldw	r3,8(r2)
  e10558:	d0a71f17 	ldw	r2,-25476(gp)
  e1055c:	1880032e 	bgeu	r3,r2,e1056c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  e10560:	e0fffe17 	ldw	r3,-8(fp)
  e10564:	00800044 	movi	r2,1
  e10568:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  e1056c:	e0bfff17 	ldw	r2,-4(fp)
  e10570:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  e10574:	d0e01b04 	addi	r3,gp,-32660
  e10578:	e0bffe17 	ldw	r2,-8(fp)
  e1057c:	10ffcc1e 	bne	r2,r3,e104b0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  e10580:	e037883a 	mov	sp,fp
  e10584:	dfc00117 	ldw	ra,4(sp)
  e10588:	df000017 	ldw	fp,0(sp)
  e1058c:	dec00204 	addi	sp,sp,8
  e10590:	f800283a 	ret

00e10594 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  e10594:	deffff04 	addi	sp,sp,-4
  e10598:	df000015 	stw	fp,0(sp)
  e1059c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  e105a0:	000170fa 	wrctl	ienable,zero
}
  e105a4:	e037883a 	mov	sp,fp
  e105a8:	df000017 	ldw	fp,0(sp)
  e105ac:	dec00104 	addi	sp,sp,4
  e105b0:	f800283a 	ret

00e105b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  e105b4:	defffa04 	addi	sp,sp,-24
  e105b8:	dfc00515 	stw	ra,20(sp)
  e105bc:	df000415 	stw	fp,16(sp)
  e105c0:	df000404 	addi	fp,sp,16
  e105c4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  e105c8:	00803874 	movhi	r2,225
  e105cc:	108b4d04 	addi	r2,r2,11572
  e105d0:	10800017 	ldw	r2,0(r2)
  e105d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  e105d8:	00003306 	br	e106a8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  e105dc:	e0bffd17 	ldw	r2,-12(fp)
  e105e0:	11000217 	ldw	r4,8(r2)
  e105e4:	0e039540 	call	e03954 <strlen>
  e105e8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  e105ec:	e0bffd17 	ldw	r2,-12(fp)
  e105f0:	10c00217 	ldw	r3,8(r2)
  e105f4:	e0bffc17 	ldw	r2,-16(fp)
  e105f8:	1885883a 	add	r2,r3,r2
  e105fc:	10bfffc4 	addi	r2,r2,-1
  e10600:	10800003 	ldbu	r2,0(r2)
  e10604:	10803fcc 	andi	r2,r2,255
  e10608:	1080201c 	xori	r2,r2,128
  e1060c:	10bfe004 	addi	r2,r2,-128
  e10610:	10800bd8 	cmpnei	r2,r2,47
  e10614:	1000031e 	bne	r2,zero,e10624 <alt_find_file+0x70>
    {
      len -= 1;
  e10618:	e0bffc17 	ldw	r2,-16(fp)
  e1061c:	10bfffc4 	addi	r2,r2,-1
  e10620:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  e10624:	e0bffc17 	ldw	r2,-16(fp)
  e10628:	1007883a 	mov	r3,r2
  e1062c:	e0bffe17 	ldw	r2,-8(fp)
  e10630:	1885883a 	add	r2,r3,r2
  e10634:	10800003 	ldbu	r2,0(r2)
  e10638:	10803fcc 	andi	r2,r2,255
  e1063c:	1080201c 	xori	r2,r2,128
  e10640:	10bfe004 	addi	r2,r2,-128
  e10644:	10800be0 	cmpeqi	r2,r2,47
  e10648:	10000a1e 	bne	r2,zero,e10674 <alt_find_file+0xc0>
  e1064c:	e0bffc17 	ldw	r2,-16(fp)
  e10650:	1007883a 	mov	r3,r2
  e10654:	e0bffe17 	ldw	r2,-8(fp)
  e10658:	1885883a 	add	r2,r3,r2
  e1065c:	10800003 	ldbu	r2,0(r2)
  e10660:	10803fcc 	andi	r2,r2,255
  e10664:	1080201c 	xori	r2,r2,128
  e10668:	10bfe004 	addi	r2,r2,-128
  e1066c:	1004c03a 	cmpne	r2,r2,zero
  e10670:	10000a1e 	bne	r2,zero,e1069c <alt_find_file+0xe8>
  e10674:	e0bffd17 	ldw	r2,-12(fp)
  e10678:	11000217 	ldw	r4,8(r2)
  e1067c:	e1bffc17 	ldw	r6,-16(fp)
  e10680:	e17ffe17 	ldw	r5,-8(fp)
  e10684:	0e108680 	call	e10868 <memcmp>
  e10688:	1004c03a 	cmpne	r2,r2,zero
  e1068c:	1000031e 	bne	r2,zero,e1069c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  e10690:	e0bffd17 	ldw	r2,-12(fp)
  e10694:	e0bfff15 	stw	r2,-4(fp)
  e10698:	00000806 	br	e106bc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  e1069c:	e0bffd17 	ldw	r2,-12(fp)
  e106a0:	10800017 	ldw	r2,0(r2)
  e106a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  e106a8:	00c03874 	movhi	r3,225
  e106ac:	18cb4d04 	addi	r3,r3,11572
  e106b0:	e0bffd17 	ldw	r2,-12(fp)
  e106b4:	10ffc91e 	bne	r2,r3,e105dc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  e106b8:	e03fff15 	stw	zero,-4(fp)
  e106bc:	e0bfff17 	ldw	r2,-4(fp)
}
  e106c0:	e037883a 	mov	sp,fp
  e106c4:	dfc00117 	ldw	ra,4(sp)
  e106c8:	df000017 	ldw	fp,0(sp)
  e106cc:	dec00204 	addi	sp,sp,8
  e106d0:	f800283a 	ret

00e106d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  e106d4:	defffc04 	addi	sp,sp,-16
  e106d8:	df000315 	stw	fp,12(sp)
  e106dc:	df000304 	addi	fp,sp,12
  e106e0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  e106e4:	00bffa04 	movi	r2,-24
  e106e8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  e106ec:	e03ffe15 	stw	zero,-8(fp)
  e106f0:	00001e06 	br	e1076c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  e106f4:	e0bffe17 	ldw	r2,-8(fp)
  e106f8:	00c03874 	movhi	r3,225
  e106fc:	18c67504 	addi	r3,r3,6612
  e10700:	10800324 	muli	r2,r2,12
  e10704:	10c5883a 	add	r2,r2,r3
  e10708:	10800017 	ldw	r2,0(r2)
  e1070c:	1004c03a 	cmpne	r2,r2,zero
  e10710:	1000131e 	bne	r2,zero,e10760 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  e10714:	e0bffe17 	ldw	r2,-8(fp)
  e10718:	00c03874 	movhi	r3,225
  e1071c:	18c67504 	addi	r3,r3,6612
  e10720:	10800324 	muli	r2,r2,12
  e10724:	10c7883a 	add	r3,r2,r3
  e10728:	e0bfff17 	ldw	r2,-4(fp)
  e1072c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  e10730:	00803874 	movhi	r2,225
  e10734:	108b5104 	addi	r2,r2,11588
  e10738:	10c00017 	ldw	r3,0(r2)
  e1073c:	e0bffe17 	ldw	r2,-8(fp)
  e10740:	1880040e 	bge	r3,r2,e10754 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  e10744:	00c03874 	movhi	r3,225
  e10748:	18cb5104 	addi	r3,r3,11588
  e1074c:	e0bffe17 	ldw	r2,-8(fp)
  e10750:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  e10754:	e0bffe17 	ldw	r2,-8(fp)
  e10758:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  e1075c:	00000606 	br	e10778 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  e10760:	e0bffe17 	ldw	r2,-8(fp)
  e10764:	10800044 	addi	r2,r2,1
  e10768:	e0bffe15 	stw	r2,-8(fp)
  e1076c:	e0bffe17 	ldw	r2,-8(fp)
  e10770:	10800810 	cmplti	r2,r2,32
  e10774:	103fdf1e 	bne	r2,zero,e106f4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  e10778:	e0bffd17 	ldw	r2,-12(fp)
}
  e1077c:	e037883a 	mov	sp,fp
  e10780:	df000017 	ldw	fp,0(sp)
  e10784:	dec00104 	addi	sp,sp,4
  e10788:	f800283a 	ret

00e1078c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  e1078c:	defffb04 	addi	sp,sp,-20
  e10790:	df000415 	stw	fp,16(sp)
  e10794:	df000404 	addi	fp,sp,16
  e10798:	e13ffe15 	stw	r4,-8(fp)
  e1079c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  e107a0:	e0bfff17 	ldw	r2,-4(fp)
  e107a4:	10840070 	cmpltui	r2,r2,4097
  e107a8:	1000021e 	bne	r2,zero,e107b4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  e107ac:	00840004 	movi	r2,4096
  e107b0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  e107b4:	e0fffe17 	ldw	r3,-8(fp)
  e107b8:	e0bfff17 	ldw	r2,-4(fp)
  e107bc:	1885883a 	add	r2,r3,r2
  e107c0:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  e107c4:	e0bffe17 	ldw	r2,-8(fp)
  e107c8:	e0bffd15 	stw	r2,-12(fp)
  e107cc:	00000506 	br	e107e4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  e107d0:	e0bffd17 	ldw	r2,-12(fp)
  e107d4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  e107d8:	e0bffd17 	ldw	r2,-12(fp)
  e107dc:	10800804 	addi	r2,r2,32
  e107e0:	e0bffd15 	stw	r2,-12(fp)
  e107e4:	e0fffd17 	ldw	r3,-12(fp)
  e107e8:	e0bffc17 	ldw	r2,-16(fp)
  e107ec:	18bff836 	bltu	r3,r2,e107d0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  e107f0:	e0bffe17 	ldw	r2,-8(fp)
  e107f4:	108007cc 	andi	r2,r2,31
  e107f8:	1005003a 	cmpeq	r2,r2,zero
  e107fc:	1000021e 	bne	r2,zero,e10808 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  e10800:	e0bffd17 	ldw	r2,-12(fp)
  e10804:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  e10808:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  e1080c:	e037883a 	mov	sp,fp
  e10810:	df000017 	ldw	fp,0(sp)
  e10814:	dec00104 	addi	sp,sp,4
  e10818:	f800283a 	ret

00e1081c <atexit>:
  e1081c:	200b883a 	mov	r5,r4
  e10820:	000d883a 	mov	r6,zero
  e10824:	0009883a 	mov	r4,zero
  e10828:	000f883a 	mov	r7,zero
  e1082c:	0e108dc1 	jmpi	e108dc <__register_exitproc>

00e10830 <exit>:
  e10830:	defffe04 	addi	sp,sp,-8
  e10834:	000b883a 	mov	r5,zero
  e10838:	dc000015 	stw	r16,0(sp)
  e1083c:	dfc00115 	stw	ra,4(sp)
  e10840:	2021883a 	mov	r16,r4
  e10844:	0e10a140 	call	e10a14 <__call_exitprocs>
  e10848:	00803874 	movhi	r2,225
  e1084c:	108b4804 	addi	r2,r2,11552
  e10850:	11000017 	ldw	r4,0(r2)
  e10854:	20800f17 	ldw	r2,60(r4)
  e10858:	10000126 	beq	r2,zero,e10860 <exit+0x30>
  e1085c:	103ee83a 	callr	r2
  e10860:	8009883a 	mov	r4,r16
  e10864:	0e10c040 	call	e10c04 <_exit>

00e10868 <memcmp>:
  e10868:	00c000c4 	movi	r3,3
  e1086c:	1980032e 	bgeu	r3,r6,e1087c <memcmp+0x14>
  e10870:	2144b03a 	or	r2,r4,r5
  e10874:	10c4703a 	and	r2,r2,r3
  e10878:	10000f26 	beq	r2,zero,e108b8 <memcmp+0x50>
  e1087c:	31ffffc4 	addi	r7,r6,-1
  e10880:	3000061e 	bne	r6,zero,e1089c <memcmp+0x34>
  e10884:	00000a06 	br	e108b0 <memcmp+0x48>
  e10888:	39ffffc4 	addi	r7,r7,-1
  e1088c:	00bfffc4 	movi	r2,-1
  e10890:	21000044 	addi	r4,r4,1
  e10894:	29400044 	addi	r5,r5,1
  e10898:	38800526 	beq	r7,r2,e108b0 <memcmp+0x48>
  e1089c:	20c00003 	ldbu	r3,0(r4)
  e108a0:	28800003 	ldbu	r2,0(r5)
  e108a4:	18bff826 	beq	r3,r2,e10888 <memcmp+0x20>
  e108a8:	1885c83a 	sub	r2,r3,r2
  e108ac:	f800283a 	ret
  e108b0:	0005883a 	mov	r2,zero
  e108b4:	f800283a 	ret
  e108b8:	180f883a 	mov	r7,r3
  e108bc:	20c00017 	ldw	r3,0(r4)
  e108c0:	28800017 	ldw	r2,0(r5)
  e108c4:	18bfed1e 	bne	r3,r2,e1087c <memcmp+0x14>
  e108c8:	31bfff04 	addi	r6,r6,-4
  e108cc:	21000104 	addi	r4,r4,4
  e108d0:	29400104 	addi	r5,r5,4
  e108d4:	39bff936 	bltu	r7,r6,e108bc <memcmp+0x54>
  e108d8:	003fe806 	br	e1087c <memcmp+0x14>

00e108dc <__register_exitproc>:
  e108dc:	defffa04 	addi	sp,sp,-24
  e108e0:	00803874 	movhi	r2,225
  e108e4:	108b4804 	addi	r2,r2,11552
  e108e8:	dc000015 	stw	r16,0(sp)
  e108ec:	14000017 	ldw	r16,0(r2)
  e108f0:	dd000415 	stw	r20,16(sp)
  e108f4:	2829883a 	mov	r20,r5
  e108f8:	81405217 	ldw	r5,328(r16)
  e108fc:	dcc00315 	stw	r19,12(sp)
  e10900:	dc800215 	stw	r18,8(sp)
  e10904:	dc400115 	stw	r17,4(sp)
  e10908:	dfc00515 	stw	ra,20(sp)
  e1090c:	2023883a 	mov	r17,r4
  e10910:	3027883a 	mov	r19,r6
  e10914:	3825883a 	mov	r18,r7
  e10918:	28002526 	beq	r5,zero,e109b0 <__register_exitproc+0xd4>
  e1091c:	29000117 	ldw	r4,4(r5)
  e10920:	008007c4 	movi	r2,31
  e10924:	11002716 	blt	r2,r4,e109c4 <__register_exitproc+0xe8>
  e10928:	8800101e 	bne	r17,zero,e1096c <__register_exitproc+0x90>
  e1092c:	2105883a 	add	r2,r4,r4
  e10930:	1085883a 	add	r2,r2,r2
  e10934:	20c00044 	addi	r3,r4,1
  e10938:	1145883a 	add	r2,r2,r5
  e1093c:	0009883a 	mov	r4,zero
  e10940:	15000215 	stw	r20,8(r2)
  e10944:	28c00115 	stw	r3,4(r5)
  e10948:	2005883a 	mov	r2,r4
  e1094c:	dfc00517 	ldw	ra,20(sp)
  e10950:	dd000417 	ldw	r20,16(sp)
  e10954:	dcc00317 	ldw	r19,12(sp)
  e10958:	dc800217 	ldw	r18,8(sp)
  e1095c:	dc400117 	ldw	r17,4(sp)
  e10960:	dc000017 	ldw	r16,0(sp)
  e10964:	dec00604 	addi	sp,sp,24
  e10968:	f800283a 	ret
  e1096c:	29802204 	addi	r6,r5,136
  e10970:	00800044 	movi	r2,1
  e10974:	110e983a 	sll	r7,r2,r4
  e10978:	30c04017 	ldw	r3,256(r6)
  e1097c:	2105883a 	add	r2,r4,r4
  e10980:	1085883a 	add	r2,r2,r2
  e10984:	1185883a 	add	r2,r2,r6
  e10988:	19c6b03a 	or	r3,r3,r7
  e1098c:	14802015 	stw	r18,128(r2)
  e10990:	14c00015 	stw	r19,0(r2)
  e10994:	00800084 	movi	r2,2
  e10998:	30c04015 	stw	r3,256(r6)
  e1099c:	88bfe31e 	bne	r17,r2,e1092c <__register_exitproc+0x50>
  e109a0:	30804117 	ldw	r2,260(r6)
  e109a4:	11c4b03a 	or	r2,r2,r7
  e109a8:	30804115 	stw	r2,260(r6)
  e109ac:	003fdf06 	br	e1092c <__register_exitproc+0x50>
  e109b0:	00803874 	movhi	r2,225
  e109b4:	1092a804 	addi	r2,r2,19104
  e109b8:	100b883a 	mov	r5,r2
  e109bc:	80805215 	stw	r2,328(r16)
  e109c0:	003fd606 	br	e1091c <__register_exitproc+0x40>
  e109c4:	00800034 	movhi	r2,0
  e109c8:	10800004 	addi	r2,r2,0
  e109cc:	1000021e 	bne	r2,zero,e109d8 <__register_exitproc+0xfc>
  e109d0:	013fffc4 	movi	r4,-1
  e109d4:	003fdc06 	br	e10948 <__register_exitproc+0x6c>
  e109d8:	01006404 	movi	r4,400
  e109dc:	103ee83a 	callr	r2
  e109e0:	1007883a 	mov	r3,r2
  e109e4:	103ffa26 	beq	r2,zero,e109d0 <__register_exitproc+0xf4>
  e109e8:	80805217 	ldw	r2,328(r16)
  e109ec:	180b883a 	mov	r5,r3
  e109f0:	18000115 	stw	zero,4(r3)
  e109f4:	18800015 	stw	r2,0(r3)
  e109f8:	80c05215 	stw	r3,328(r16)
  e109fc:	18006215 	stw	zero,392(r3)
  e10a00:	18006315 	stw	zero,396(r3)
  e10a04:	0009883a 	mov	r4,zero
  e10a08:	883fc826 	beq	r17,zero,e1092c <__register_exitproc+0x50>
  e10a0c:	003fd706 	br	e1096c <__register_exitproc+0x90>

00e10a10 <register_fini>:
  e10a10:	f800283a 	ret

00e10a14 <__call_exitprocs>:
  e10a14:	00803874 	movhi	r2,225
  e10a18:	108b4804 	addi	r2,r2,11552
  e10a1c:	10800017 	ldw	r2,0(r2)
  e10a20:	defff304 	addi	sp,sp,-52
  e10a24:	df000b15 	stw	fp,44(sp)
  e10a28:	d8800115 	stw	r2,4(sp)
  e10a2c:	00800034 	movhi	r2,0
  e10a30:	10800004 	addi	r2,r2,0
  e10a34:	1005003a 	cmpeq	r2,r2,zero
  e10a38:	d8800215 	stw	r2,8(sp)
  e10a3c:	d8800117 	ldw	r2,4(sp)
  e10a40:	dd400815 	stw	r21,32(sp)
  e10a44:	dd000715 	stw	r20,28(sp)
  e10a48:	10805204 	addi	r2,r2,328
  e10a4c:	dfc00c15 	stw	ra,48(sp)
  e10a50:	ddc00a15 	stw	r23,40(sp)
  e10a54:	dd800915 	stw	r22,36(sp)
  e10a58:	dcc00615 	stw	r19,24(sp)
  e10a5c:	dc800515 	stw	r18,20(sp)
  e10a60:	dc400415 	stw	r17,16(sp)
  e10a64:	dc000315 	stw	r16,12(sp)
  e10a68:	282b883a 	mov	r21,r5
  e10a6c:	2039883a 	mov	fp,r4
  e10a70:	d8800015 	stw	r2,0(sp)
  e10a74:	2829003a 	cmpeq	r20,r5,zero
  e10a78:	d8800117 	ldw	r2,4(sp)
  e10a7c:	14405217 	ldw	r17,328(r2)
  e10a80:	88001026 	beq	r17,zero,e10ac4 <__call_exitprocs+0xb0>
  e10a84:	ddc00017 	ldw	r23,0(sp)
  e10a88:	88800117 	ldw	r2,4(r17)
  e10a8c:	8c802204 	addi	r18,r17,136
  e10a90:	143fffc4 	addi	r16,r2,-1
  e10a94:	80000916 	blt	r16,zero,e10abc <__call_exitprocs+0xa8>
  e10a98:	05bfffc4 	movi	r22,-1
  e10a9c:	a000151e 	bne	r20,zero,e10af4 <__call_exitprocs+0xe0>
  e10aa0:	8409883a 	add	r4,r16,r16
  e10aa4:	2105883a 	add	r2,r4,r4
  e10aa8:	1485883a 	add	r2,r2,r18
  e10aac:	10c02017 	ldw	r3,128(r2)
  e10ab0:	a8c01126 	beq	r21,r3,e10af8 <__call_exitprocs+0xe4>
  e10ab4:	843fffc4 	addi	r16,r16,-1
  e10ab8:	85bff81e 	bne	r16,r22,e10a9c <__call_exitprocs+0x88>
  e10abc:	d8800217 	ldw	r2,8(sp)
  e10ac0:	10003126 	beq	r2,zero,e10b88 <__call_exitprocs+0x174>
  e10ac4:	dfc00c17 	ldw	ra,48(sp)
  e10ac8:	df000b17 	ldw	fp,44(sp)
  e10acc:	ddc00a17 	ldw	r23,40(sp)
  e10ad0:	dd800917 	ldw	r22,36(sp)
  e10ad4:	dd400817 	ldw	r21,32(sp)
  e10ad8:	dd000717 	ldw	r20,28(sp)
  e10adc:	dcc00617 	ldw	r19,24(sp)
  e10ae0:	dc800517 	ldw	r18,20(sp)
  e10ae4:	dc400417 	ldw	r17,16(sp)
  e10ae8:	dc000317 	ldw	r16,12(sp)
  e10aec:	dec00d04 	addi	sp,sp,52
  e10af0:	f800283a 	ret
  e10af4:	8409883a 	add	r4,r16,r16
  e10af8:	88c00117 	ldw	r3,4(r17)
  e10afc:	2105883a 	add	r2,r4,r4
  e10b00:	1445883a 	add	r2,r2,r17
  e10b04:	18ffffc4 	addi	r3,r3,-1
  e10b08:	11800217 	ldw	r6,8(r2)
  e10b0c:	1c001526 	beq	r3,r16,e10b64 <__call_exitprocs+0x150>
  e10b10:	10000215 	stw	zero,8(r2)
  e10b14:	303fe726 	beq	r6,zero,e10ab4 <__call_exitprocs+0xa0>
  e10b18:	00c00044 	movi	r3,1
  e10b1c:	1c06983a 	sll	r3,r3,r16
  e10b20:	90804017 	ldw	r2,256(r18)
  e10b24:	8cc00117 	ldw	r19,4(r17)
  e10b28:	1884703a 	and	r2,r3,r2
  e10b2c:	10001426 	beq	r2,zero,e10b80 <__call_exitprocs+0x16c>
  e10b30:	90804117 	ldw	r2,260(r18)
  e10b34:	1884703a 	and	r2,r3,r2
  e10b38:	10000c1e 	bne	r2,zero,e10b6c <__call_exitprocs+0x158>
  e10b3c:	2105883a 	add	r2,r4,r4
  e10b40:	1485883a 	add	r2,r2,r18
  e10b44:	11400017 	ldw	r5,0(r2)
  e10b48:	e009883a 	mov	r4,fp
  e10b4c:	303ee83a 	callr	r6
  e10b50:	88800117 	ldw	r2,4(r17)
  e10b54:	98bfc81e 	bne	r19,r2,e10a78 <__call_exitprocs+0x64>
  e10b58:	b8800017 	ldw	r2,0(r23)
  e10b5c:	147fd526 	beq	r2,r17,e10ab4 <__call_exitprocs+0xa0>
  e10b60:	003fc506 	br	e10a78 <__call_exitprocs+0x64>
  e10b64:	8c000115 	stw	r16,4(r17)
  e10b68:	003fea06 	br	e10b14 <__call_exitprocs+0x100>
  e10b6c:	2105883a 	add	r2,r4,r4
  e10b70:	1485883a 	add	r2,r2,r18
  e10b74:	11000017 	ldw	r4,0(r2)
  e10b78:	303ee83a 	callr	r6
  e10b7c:	003ff406 	br	e10b50 <__call_exitprocs+0x13c>
  e10b80:	303ee83a 	callr	r6
  e10b84:	003ff206 	br	e10b50 <__call_exitprocs+0x13c>
  e10b88:	88800117 	ldw	r2,4(r17)
  e10b8c:	1000081e 	bne	r2,zero,e10bb0 <__call_exitprocs+0x19c>
  e10b90:	89000017 	ldw	r4,0(r17)
  e10b94:	20000726 	beq	r4,zero,e10bb4 <__call_exitprocs+0x1a0>
  e10b98:	b9000015 	stw	r4,0(r23)
  e10b9c:	8809883a 	mov	r4,r17
  e10ba0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  e10ba4:	bc400017 	ldw	r17,0(r23)
  e10ba8:	883fb71e 	bne	r17,zero,e10a88 <__call_exitprocs+0x74>
  e10bac:	003fc506 	br	e10ac4 <__call_exitprocs+0xb0>
  e10bb0:	89000017 	ldw	r4,0(r17)
  e10bb4:	882f883a 	mov	r23,r17
  e10bb8:	2023883a 	mov	r17,r4
  e10bbc:	883fb21e 	bne	r17,zero,e10a88 <__call_exitprocs+0x74>
  e10bc0:	003fc006 	br	e10ac4 <__call_exitprocs+0xb0>

00e10bc4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  e10bc4:	defffd04 	addi	sp,sp,-12
  e10bc8:	df000215 	stw	fp,8(sp)
  e10bcc:	df000204 	addi	fp,sp,8
  e10bd0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  e10bd4:	e0bfff17 	ldw	r2,-4(fp)
  e10bd8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  e10bdc:	e0bffe17 	ldw	r2,-8(fp)
  e10be0:	1005003a 	cmpeq	r2,r2,zero
  e10be4:	1000021e 	bne	r2,zero,e10bf0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  e10be8:	002af070 	cmpltui	zero,zero,43969
  e10bec:	00000106 	br	e10bf4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  e10bf0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  e10bf4:	e037883a 	mov	sp,fp
  e10bf8:	df000017 	ldw	fp,0(sp)
  e10bfc:	dec00104 	addi	sp,sp,4
  e10c00:	f800283a 	ret

00e10c04 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  e10c04:	defffd04 	addi	sp,sp,-12
  e10c08:	dfc00215 	stw	ra,8(sp)
  e10c0c:	df000115 	stw	fp,4(sp)
  e10c10:	df000104 	addi	fp,sp,4
  e10c14:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  e10c18:	e13fff17 	ldw	r4,-4(fp)
  e10c1c:	0e10bc40 	call	e10bc4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  e10c20:	003fff06 	br	e10c20 <_exit+0x1c>
  e10c24:	00000010 	cmplti	zero,zero,0
  e10c28:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  e10c2c:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_3+0x4b7a0>
  e10c30:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_3+0x1187c0>
  e10c34:	001b0c0b 	ldhu	zero,27696(zero)
  e10c38:	00000028 	cmpgeui	zero,zero,0
  e10c3c:	00000018 	cmpnei	zero,zero,0
  e10c40:	00e0ab3c 	xorhi	r3,zero,33452
  e10c44:	000005dc 	xori	zero,zero,23
  e10c48:	400e4400 	call	400e440 <__alt_mem_sram_0+0x278e440>
  e10c4c:	92099170 	cmpltui	r8,r18,9797
  e10c50:	95079308 	cmpgei	r20,r18,7756
  e10c54:	97049605 	stb	fp,4696(r18)
  e10c58:	90019f03 	ldbu	zero,1660(r18)
  e10c5c:	9c06940a 	0x9c06940a
  e10c60:	00000002 	0x2
  e10c64:	00000028 	cmpgeui	zero,zero,0
  e10c68:	00000044 	movi	zero,1
  e10c6c:	00e0b118 	cmpnei	r3,zero,-32060
  e10c70:	000005b0 	cmpltui	zero,zero,22
  e10c74:	3c0e4400 	call	3c0e440 <__alt_mem_sram_0+0x238e440>
  e10c78:	92099168 	cmpgeui	r8,r18,9797
  e10c7c:	95079308 	cmpgei	r20,r18,7756
  e10c80:	9c039705 	stb	r16,3676(r19)
  e10c84:	90019f02 	0x90019f02
  e10c88:	9606940a 	0x9606940a
  e10c8c:	00000004 	movi	zero,0
  e10c90:	00e10a10 	cmplti	r3,zero,-31704
