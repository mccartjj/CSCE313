
Fractal_cpu3.elf:     file format elf32-littlenios2
Fractal_cpu3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00e501b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00e50000 paddr 0x00e50000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00e50020 paddr 0x00e50020 align 2**12
         filesz 0x000116c4 memsz 0x000116c4 flags r-x
    LOAD off    0x000126e4 vaddr 0x00e616e4 paddr 0x00e632bc align 2**12
         filesz 0x00001bd8 memsz 0x00001bd8 flags rw-
    LOAD off    0x00014e94 vaddr 0x00e64e94 paddr 0x00e64e94 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00e50000  00e50000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00e50020  00e50020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010fe8  00e501b4  00e501b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000548  00e6119c  00e6119c  0001219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd8  00e616e4  00e632bc  000126e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  00e64e94  00e64e94  00014e94  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000142bc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001098  00000000  00000000  000142e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001c71  00000000  00000000  00015378  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002a8a1  00000000  00000000  00016fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a27c  00000000  00000000  0004188a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00019f1b  00000000  00000000  0004bb06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000021dc  00000000  00000000  00065a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002ce5  00000000  00000000  00067c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e5ce  00000000  00000000  0006a8e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00078eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000e78  00000000  00000000  00078ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007db79  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007db7c  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0007db81  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0007db82  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0007db86  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0007db8a  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0007db8e  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0007db99  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0007dba4  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0007dbaf  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0007dbba  2**0
                  CONTENTS, READONLY
 28 .jdi          0000ff9d  00000000  00000000  0007dbda  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000cf0fa  00000000  00000000  0008db77  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00e50000 l    d  .entry	00000000 .entry
00e50020 l    d  .exceptions	00000000 .exceptions
00e501b4 l    d  .text	00000000 .text
00e6119c l    d  .rodata	00000000 .rodata
00e616e4 l    d  .rwdata	00000000 .rwdata
00e64e94 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00e501fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Fractal.c
00000000 l    df *ABS*	00000000 Project.c
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 ef_pow.c
00e63250 l     O .rwdata	00000008 bp
00e63258 l     O .rwdata	00000008 dp_l
00e63260 l     O .rwdata	00000008 dp_h
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_rint.c
00e6126c l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_isnan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00e521c0 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00e52b2c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00e616e4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00e53ed0 l     F .text	00000058 __sprint_r
00e6140e l     O .rodata	00000010 blanks.3452
00e613fe l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00e55f34 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00e57930 l     F .text	00000058 std
00e57a3c l     F .text	00000008 __fp_lock
00e57a44 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00e63278 l     O .rwdata	00000004 charset
00e6143c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00e61584 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00e5c518 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00e5c760 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00e5c7c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00e5c8c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00e5c9e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00e5cac0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00e5cc1c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00e5ce48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00e6329c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00e5d0e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00e620a0 l     O .rwdata	00001060 jtag_uart_3
00e63100 l     O .rwdata	0000003c mailbox_0
00e6313c l     O .rwdata	0000003c mailbox_1
00e63178 l     O .rwdata	0000003c mailbox_2
00e631b4 l     O .rwdata	0000003c mailbox_3
00e631f0 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00e5d3f0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00e5d630 l     F .text	00000228 altera_avalon_jtag_uart_irq
00e5d858 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
00e5e02c l     F .text	0000006c alt_avalon_mutex_reg
00e5e098 l     F .text	00000060 alt_get_errno
00e5e22c l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00e5e3fc l     F .text	0000007c alt_mutex_trylock
00e5e4d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00e60040 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00e604f8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00e60634 l     F .text	000000dc alt_file_locked
00e60898 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00e60f18 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00e610cc l     F .text	00000040 alt_sim_halt
00e50200 g     F .text	00000070 genColor
00e63244 g     O .rwdata	00000008 targetArrayXYMaster
00e596ec g     F .text	00000094 _mprec_log10
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
00e597d8 g     F .text	00000088 __any_on
00e5aee4 g     F .text	00000070 _isatty_r
00e6155c g     O .rodata	00000028 __mprec_tinytens
00e5cc7c g     F .text	0000006c alt_main
00e5e27c g     F .text	000000a8 altera_avalon_mailbox_pend
00e5f4f4 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00e53cd4 g     F .text	000000a0 _puts_r
00e64ef4 g     O .bss	00000100 alt_irq
00e5af54 g     F .text	00000078 _lseek_r
00e632bc g       *ABS*	00000000 __flash_rwdata_start
00e5bf94 g     F .text	00000088 __eqdf2
00e65184 g       *ABS*	00000000 __alt_heap_start
00e5e324 g     F .text	000000d8 altera_avalon_mailbox_get
00e53c5c g     F .text	00000044 printf
00e5a9b0 g     F .text	00000068 __sseek
00e57998 g     F .text	000000a4 __sinit
00e5e864 g     F .text	00000024 alt_get_cpu_freq
00e50434 g     F .text	00000020 startTimer
00e58670 g     F .text	00000084 _setlocale_r
00e57a98 g     F .text	00000068 __sfmoreglue
00e5cd08 g     F .text	00000020 __malloc_unlock
00e52658 g     F .text	00000174 __divsf3
00e59168 g     F .text	000000e0 memmove
00e57a88 g     F .text	00000010 _cleanup
00e50c88 g     F .text	00000458 powf
00e5e590 g     F .text	00000040 altera_avalon_mutex_trylock
00e59860 g     F .text	000000bc _Balloc
00e52a44 g     F .text	00000094 __fixsfsi
00e5e8c8 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00e5c01c g     F .text	00000088 __gtdf2
00e53c4c g     F .text	00000010 __errno
00e5e888 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00e50000 g     F .entry	0000001c __reset
00e5e62c g     F .text	0000007c altera_avalon_mutex_is_mine
00e50020 g       *ABS*	00000000 __flash_exceptions_start
00e5ae70 g     F .text	00000074 _fstat_r
00e64eb0 g     O .bss	00000004 errno
00e53310 g     F .text	00000038 __make_dp
00e5370c g     F .text	0000002c __make_fp
00e64eb8 g     O .bss	00000004 alt_argv
00e6b244 g       *ABS*	00000000 _gp
00e523a4 g     F .text	00000070 __subsf3
00e5ea68 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00006000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
00e61f20 g     O .rwdata	00000180 alt_fd_list
00e60168 g     F .text	00000094 alt_find_dev
00e590c8 g     F .text	000000a0 memcpy
00e57a7c g     F .text	0000000c _cleanup_r
00e5c1b4 g     F .text	000000f8 __floatsidf
00e605bc g     F .text	00000078 alt_io_redirect
00e5c12c g     F .text	00000088 __ltdf2
00e6119c g       *ABS*	00000000 __DTOR_END__
00e53d74 g     F .text	00000014 puts
00e60a9c g     F .text	00000020 altera_nios2_irq_init
00e5963c g     F .text	000000b0 __ratio
00e5e170 g     F .text	000000bc altera_avalon_mailbox_post
00e5eb18 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00e5da70 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00e53ca0 g     F .text	00000034 _printf_r
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00e5c654 g     F .text	00000008 __udivsi3
00e5c920 g     F .text	000000c0 isatty
00e6146c g     O .rodata	000000c8 __mprec_tens
00e5e150 g     F .text	00000020 altera_avalon_mailbox_close
00e5f1a4 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00e5864c g     F .text	00000008 __locale_charset
00e52934 g     F .text	00000078 __lesf2
00e60c94 g     F .text	00000090 alt_icache_flush
00e64ea4 g     O .bss	00000004 __malloc_top_pad
00e5e804 g     F .text	00000040 perf_get_num_starts
00e63274 g     O .rwdata	00000004 __mb_cur_max
00e58654 g     F .text	0000000c _localeconv_r
00e59f58 g     F .text	0000003c __i2b
00e58030 g     F .text	0000049c __sfvwrite_r
00e51f88 g     F .text	0000001c finitef
00e5a938 g     F .text	00000070 _sbrk_r
00e5f988 g     F .text	000000d0 helper_plot_pixel
00e51f78 g     F .text	00000010 fabsf
00e5afcc g     F .text	00000078 _read_r
00e61ae4 g     O .rwdata	0000000c __lc_ctype
00e63294 g     O .rwdata	00000004 alt_max_fd
00e53a4c g     F .text	00000138 __unpack_d
00e5ad4c g     F .text	00000110 _fclose_r
00e578fc g     F .text	00000034 fflush
00e64ea8 g     O .bss	00000004 __malloc_max_sbrked_mem
00e52ad8 g     F .text	00000054 __extendsfdf2
00e51fa4 g     F .text	00000018 isnanf
00e52fbc g     F .text	00000074 __adddf3
00e5951c g     F .text	00000120 __b2d
00e5eb4c g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
00e5b620 g     F .text	000005b0 __umoddi3
00e5cb2c g     F .text	000000f0 lseek
00e5e6a8 g     F .text	00000058 altera_avalon_mutex_first_lock
00e63268 g     O .rwdata	00000004 __fdlib_version
00e63270 g     O .rwdata	00000004 _global_impure_ptr
00e5a2d4 g     F .text	000005f4 _realloc_r
00e65184 g       *ABS*	00000000 __bss_end
00e60400 g     F .text	000000f8 alt_iic_isr_register
00e5ecb0 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00e60990 g     F .text	0000010c alt_tick
00e5b044 g     F .text	000005dc __udivdi3
00e61534 g     O .rodata	00000028 __mprec_bigtens
00e5a1b4 g     F .text	00000120 __s2b
00e5c384 g     F .text	00000194 __floatunsidf
00e5943c g     F .text	00000060 __mcmp
00e50454 g     F .text	00000040 endTimeAndPrint
00e57a64 g     F .text	00000018 __fp_lock_all
00e603b8 g     F .text	00000048 alt_ic_irq_enabled
00e608f8 g     F .text	00000098 alt_alarm_stop
00e64ec0 g     O .bss	00000004 alt_irq_active
00e500ec g     F .exceptions	000000c8 alt_irq_handler
00e503d0 g     F .text	00000020 FloatToFixed
00e61ef8 g     O .rwdata	00000028 alt_dev_null
00e50560 g     F .text	000001ac barrier
00e5e478 g     F .text	00000058 altera_avalon_mutex_open
00e51d68 g     F .text	00000210 rint
00e5359c g     F .text	000000c8 __unpack_f
00e5ff48 g     F .text	00000044 alt_dcache_flush_all
00e59308 g     F .text	00000070 __hi0bits
00e5f8c4 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
00e5c2ac g     F .text	000000d8 __fixdfsi
00e632bc g       *ABS*	00000000 __ram_rwdata_end
00e6328c g     O .rwdata	00000008 alt_dev_list
00e5cfc4 g     F .text	00000120 write
00e5fa58 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00e52844 g     F .text	00000078 __gtsf2
00e632a8 g     O .rwdata	00000008 alt_mutex_list
00e616e4 g       *ABS*	00000000 __ram_rodata_end
00e5c7ec g     F .text	000000d4 fstat
00e50494 g     F .text	000000c0 getNewXY
00e5a094 g     F .text	00000120 __pow5mult
00e64e98 g     O .bss	00000004 __nlocale_changed
00e5c65c g     F .text	00000008 __umodsi3
00e65184 g       *ABS*	00000000 end
00e5343c g     F .text	00000160 __pack_f
00e64e94 g     O .bss	00000004 myPixelBuffer
00e5d570 g     F .text	000000c0 altera_avalon_jtag_uart_init
00e61198 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00e533bc g     F .text	00000080 __clzsi2
00e5dc94 g     F .text	00000240 altera_avalon_jtag_uart_write
00e5ded4 g     F .text	00000158 alt_avalon_mailbox_init
00e57988 g     F .text	00000004 __sfp_lock_acquire
00e58fe4 g     F .text	000000e4 memchr
00e53f28 g     F .text	00001eac ___vfprintf_internal_r
00e53dfc g     F .text	00000060 _sprintf_r
00e57d1c g     F .text	00000314 _free_r
00e60f1c g     F .text	000001b0 __call_exitprocs
00e64e9c g     O .bss	00000004 __mlocale_changed
00e63280 g     O .rwdata	00000004 __malloc_sbrk_base
00e501b4 g     F .text	0000004c _start
00e64ec4 g     O .bss	00000004 _alt_tick_rate
00e59c24 g     F .text	0000014c __lshift
00e64ec8 g     O .bss	00000004 _alt_nticks
00e5cd28 g     F .text	00000120 read
00e5d178 g     F .text	00000278 alt_sys_init
00e529ac g     F .text	00000098 __floatsisf
00e503f8 g     F .text	0000003c fixedPointMultiply64
00e60de4 g     F .text	00000134 __register_exitproc
00e5e5d0 g     F .text	0000005c altera_avalon_mutex_unlock
00e59d70 g     F .text	000001e8 __multiply
00e5d908 g     F .text	00000074 altera_avalon_jtag_uart_close
00e616e4 g       *ABS*	00000000 __ram_rwdata_start
00e6119c g       *ABS*	00000000 __ram_rodata_start
00e64ecc g     O .bss	00000028 __malloc_current_mallinfo
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00e527cc g     F .text	00000078 __eqsf2
00e5991c g     F .text	0000017c __d2b
00e5d428 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00e60bdc g     F .text	000000b8 alt_get_fd
00e53b84 g     F .text	000000c8 __fpcmp_parts_d
00e5acdc g     F .text	00000070 _close_r
00e50750 g     F .text	000004b4 drawFrame
00e5e700 g     F .text	000000b0 perf_get_section_time
00e60d70 g     F .text	00000074 memcmp
00e5d4d8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00e65184 g       *ABS*	00000000 __alt_stack_base
00e5d520 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00e55df8 g     F .text	0000013c __swsetup_r
00e53030 g     F .text	00000258 __divdf3
00e57b00 g     F .text	000000f0 __sfp
00e59780 g     F .text	00000058 __copybits
00e5e7b0 g     F .text	00000054 perf_get_total_time
00e61af0 g     O .rwdata	00000408 __malloc_av_
00e57994 g     F .text	00000004 __sinit_lock_release
00e5bbd0 g     F .text	000003c4 __muldf3
00e510e0 g     F .text	00000b14 __ieee754_powf
00e5aa94 g     F .text	00000060 __sread
00e6127c g     O .rodata	00000010 __thenan_sf
00e60abc g     F .text	00000120 alt_find_file
00e5ff8c g     F .text	000000b4 alt_dev_llist_insert
00e5cce8 g     F .text	00000020 __malloc_lock
00e5cf08 g     F .text	000000bc sbrk
00e51fc4 g     F .text	0000014c scalbnf
00e57700 g     F .text	000001fc _fflush_r
00e5ac28 g     F .text	000000b4 _calloc_r
00e503f0 g     F .text	00000008 fixedPointMultiply32
00e64e94 g       *ABS*	00000000 __bss_start
00e59248 g     F .text	00000098 memset
00e51bf4 g     F .text	0000016c __ieee754_sqrtf
00e50c04 g     F .text	00000084 main
00e64ebc g     O .bss	00000004 alt_envp
00e64eac g     O .bss	00000004 __malloc_max_total_mem
00e5eac0 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
00e5d480 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00e528bc g     F .text	00000078 __ltsf2
00e5a9a8 g     F .text	00000008 __sclose
00e51d60 g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
00e5ae5c g     F .text	00000014 fclose
00e53348 g     F .text	00000074 __truncdfsf2
00e64ff4 g     O .bss	00000190 _atexit0
00e5e550 g     F .text	00000040 altera_avalon_mutex_lock
00e5614c g     F .text	000015b4 _dtoa_r
00e588a4 g     F .text	00000740 _malloc_r
00e63298 g     O .rwdata	00000004 alt_errno
00e58594 g     F .text	000000b8 _fwalk
00e5c594 g     F .text	00000060 __divsi3
00e6128c g     O .rodata	00000014 __thenan_df
00e57bf0 g     F .text	0000012c _malloc_trim_r
00e6119c g       *ABS*	00000000 __CTOR_END__
00e52478 g     F .text	000001e0 __mulsf3
00e5aaf4 g     F .text	000000bc strcmp
00e6119c g       *ABS*	00000000 __flash_rodata_start
00e6119c g       *ABS*	00000000 __DTOR_LIST__
00e53288 g     F .text	00000088 __nedf2
00e5d144 g     F .text	00000034 alt_irq_init
00e5cea8 g     F .text	00000060 alt_release_fd
00e52110 g     F .text	00000018 copysignf
00e53d88 g     F .text	00000074 sprintf
00e612a0 g     O .rodata	00000100 __clz_tab
00e64ea0 g     O .bss	00000004 _PathLocale
00e60d24 g     F .text	00000014 atexit
00e5abb0 g     F .text	00000078 _write_r
00e586f4 g     F .text	0000001c setlocale
00e51fbc g     F .text	00000008 nanf
00e6326c g     O .rwdata	00000004 _impure_ptr
00e64eb4 g     O .bss	00000004 alt_argc
00e60104 g     F .text	00000064 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00e50020 g       .exceptions	00000000 alt_irq_entry
00e5949c g     F .text	00000080 __ulp
00e5a8c8 g     F .text	00000040 __isinfd
00e57a4c g     F .text	00000018 __fp_unlock_all
00e632a0 g     O .rwdata	00000008 alt_mailbox_list
00e5070c g     F .text	00000044 setup
00e63284 g     O .rwdata	00000008 alt_fs_list
00e50020 g       *ABS*	00000000 __ram_exceptions_start
00e58660 g     F .text	00000010 localeconv
00e6022c g     F .text	00000050 alt_ic_isr_register
00e632bc g       *ABS*	00000000 _edata
00e65184 g       *ABS*	00000000 _end
00e501b4 g       *ABS*	00000000 __ram_exceptions_end
00e5d97c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00e60318 g     F .text	000000a0 alt_ic_irq_disable
00e5aa18 g     F .text	0000007c __swrite
00e6327c g     O .rwdata	00000004 __malloc_trim_threshold
00e5e844 g     F .text	00000020 alt_get_performance_counter_base
00e60d38 g     F .text	00000038 exit
00e584cc g     F .text	000000c8 _fwalk_reent
00e59a98 g     F .text	0000018c __mdiff
00e50270 g     F .text	00000160 mandelbrot
00e5c5f4 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00e50020 g     F .exceptions	00000000 alt_exception
00e5798c g     F .text	00000004 __sfp_lock_release
00e5e0f8 g     F .text	00000058 altera_avalon_mailbox_open
00e53664 g     F .text	000000a8 __fpcmp_parts_f
00e6110c g     F .text	00000020 _exit
00e5a908 g     F .text	00000030 __isnand
00e5fdf4 g     F .text	00000154 alt_alarm_start
00e52128 g     F .text	00000098 __muldi3
00e58710 g     F .text	00000194 __smakebuf_r
00e53e5c g     F .text	00000074 strlen
00e60710 g     F .text	00000188 open
00e5c0a4 g     F .text	00000088 __gedf2
00e50554 g     F .text	0000000c clearScreen
00e601fc g     F .text	00000030 alt_icache_flush_all
00e632b0 g     O .rwdata	00000004 alt_priority_mask
00e6027c g     F .text	0000009c alt_ic_irq_enable
00e55dd4 g     F .text	00000024 __vfprintf_internal
00e5e530 g     F .text	00000020 altera_avalon_mutex_close
00e52f3c g     F .text	00000080 __subdf3
00e59378 g     F .text	000000c4 __lo0bits
00e6324c g     O .rwdata	00000004 targetArrayXY
00e632b4 g     O .rwdata	00000008 alt_alarm_list
00e600a0 g     F .text	00000064 _do_ctors
00e5c664 g     F .text	000000fc close
00e52414 g     F .text	00000064 __addsf3
00e5ca40 g     F .text	00000080 alt_load
00e53738 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00e57990 g     F .text	00000004 __sinit_lock_acquire
00e59f94 g     F .text	00000100 __multadd
00e592e0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00e50000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  e50000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  e50004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  e50008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  e5000c:	00bffd16 	blt	zero,r2,e50004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  e50010:	00403974 	movhi	at,229
    ori r1, r1, %lo(_start)
  e50014:	08406d14 	ori	at,at,436
    jmp r1
  e50018:	0800683a 	jmp	at
  e5001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

00e50020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  e50020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  e50024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  e50028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  e5002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  e50030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  e50034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  e50038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  e5003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  e50040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  e50044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  e50048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  e5004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  e50050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  e50054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  e50058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  e5005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  e50060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  e50064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  e50068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  e5006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  e50070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  e50074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  e50078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  e5007c:	10000326 	beq	r2,zero,e5008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  e50080:	20000226 	beq	r4,zero,e5008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  e50084:	0e500ec0 	call	e500ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  e50088:	00000306 	br	e50098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  e5008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  e50090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  e50094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  e50098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  e5009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  e500a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  e500a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  e500a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  e500ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  e500b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  e500b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  e500b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  e500bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  e500c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  e500c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e500c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e500cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e500d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e500d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e500d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  e500dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e500e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e500e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e500e8:	ef80083a 	eret

00e500ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  e500ec:	defff904 	addi	sp,sp,-28
  e500f0:	dfc00615 	stw	ra,24(sp)
  e500f4:	df000515 	stw	fp,20(sp)
  e500f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  e500fc:	0005313a 	rdctl	r2,ipending
  e50100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  e50104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  e50108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  e5010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  e50110:	00800044 	movi	r2,1
  e50114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  e50118:	e0ffff17 	ldw	r3,-4(fp)
  e5011c:	e0bffe17 	ldw	r2,-8(fp)
  e50120:	1884703a 	and	r2,r3,r2
  e50124:	1005003a 	cmpeq	r2,r2,zero
  e50128:	1000161e 	bne	r2,zero,e50184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  e5012c:	e0bffd17 	ldw	r2,-12(fp)
  e50130:	00c039b4 	movhi	r3,230
  e50134:	18d3bd04 	addi	r3,r3,20212
  e50138:	100490fa 	slli	r2,r2,3
  e5013c:	10c5883a 	add	r2,r2,r3
  e50140:	11400017 	ldw	r5,0(r2)
  e50144:	e0bffd17 	ldw	r2,-12(fp)
  e50148:	00c039b4 	movhi	r3,230
  e5014c:	18d3bd04 	addi	r3,r3,20212
  e50150:	100490fa 	slli	r2,r2,3
  e50154:	10c5883a 	add	r2,r2,r3
  e50158:	10800104 	addi	r2,r2,4
  e5015c:	11000017 	ldw	r4,0(r2)
  e50160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  e50164:	0005313a 	rdctl	r2,ipending
  e50168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  e5016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  e50170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  e50174:	e0bfff17 	ldw	r2,-4(fp)
  e50178:	1004c03a 	cmpne	r2,r2,zero
  e5017c:	103fe31e 	bne	r2,zero,e5010c <alt_irq_handler+0x20>
  e50180:	00000706 	br	e501a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  e50184:	e0bffe17 	ldw	r2,-8(fp)
  e50188:	1085883a 	add	r2,r2,r2
  e5018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  e50190:	e0bffd17 	ldw	r2,-12(fp)
  e50194:	10800044 	addi	r2,r2,1
  e50198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  e5019c:	003fde06 	br	e50118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  e501a0:	e037883a 	mov	sp,fp
  e501a4:	dfc00117 	ldw	ra,4(sp)
  e501a8:	df000017 	ldw	fp,0(sp)
  e501ac:	dec00204 	addi	sp,sp,8
  e501b0:	f800283a 	ret

Disassembly of section .text:

00e501b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  e501b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
  e501b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  e501bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  e501c0:	00bffd16 	blt	zero,r2,e501b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  e501c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  e501c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  e501cc:	068039b4 	movhi	gp,230
    ori gp, gp, %lo(_gp)
  e501d0:	d6ac9114 	ori	gp,gp,45636
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  e501d4:	008039b4 	movhi	r2,230
    ori r2, r2, %lo(__bss_start)
  e501d8:	1093a514 	ori	r2,r2,20116

    movhi r3, %hi(__bss_end)
  e501dc:	00c039b4 	movhi	r3,230
    ori r3, r3, %lo(__bss_end)
  e501e0:	18d46114 	ori	r3,r3,20868

    beq r2, r3, 1f
  e501e4:	10c00326 	beq	r2,r3,e501f4 <_start+0x40>

0:
    stw zero, (r2)
  e501e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  e501ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  e501f0:	10fffd36 	bltu	r2,r3,e501e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  e501f4:	0e5ca400 	call	e5ca40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  e501f8:	0e5cc7c0 	call	e5cc7c <alt_main>

00e501fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  e501fc:	003fff06 	br	e501fc <alt_after_alt_main>

00e50200 <genColor>:
}

//makes the color for display
int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  e50200:	00801904 	movi	r2,100
		color = grey;
	}
	else {
		int red = iter;
		int green = iter * 6;
  e50204:	200b883a 	mov	r5,r4
  e50208:	018007c4 	movi	r6,31
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  e5020c:	01c00fc4 	movi	r7,63
}

//makes the color for display
int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  e50210:	00defbc4 	movi	r3,31727
  e50214:	20800b26 	beq	r4,r2,e50244 <genColor+0x44>
		color = grey;
	}
	else {
		int red = iter;
		int green = iter * 6;
  e50218:	210001a4 	muli	r4,r4,6
  e5021c:	31400d16 	blt	r6,r5,e50254 <genColor+0x54>
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  e50220:	280492fa 	slli	r2,r5,11
  e50224:	29403fcc 	andi	r5,r5,255
  e50228:	10fe000c 	andi	r3,r2,63488
  e5022c:	2005883a 	mov	r2,r4
  e50230:	39000616 	blt	r7,r4,e5024c <genColor+0x4c>
  e50234:	1004917a 	slli	r2,r2,5
  e50238:	1946b03a 	or	r3,r3,r5
  e5023c:	1081f80c 	andi	r2,r2,2016
  e50240:	10c6b03a 	or	r3,r2,r3
	}
	return color;
}
  e50244:	1805883a 	mov	r2,r3
  e50248:	f800283a 	ret
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  e5024c:	3805883a 	mov	r2,r7
  e50250:	003ff806 	br	e50234 <genColor+0x34>
	if (iter == maxIter) {
		color = grey;
	}
	else {
		int red = iter;
		int green = iter * 6;
  e50254:	300b883a 	mov	r5,r6
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  e50258:	280492fa 	slli	r2,r5,11
  e5025c:	29403fcc 	andi	r5,r5,255
  e50260:	10fe000c 	andi	r3,r2,63488
  e50264:	2005883a 	mov	r2,r4
  e50268:	393ff20e 	bge	r7,r4,e50234 <genColor+0x34>
  e5026c:	003ff706 	br	e5024c <genColor+0x4c>

00e50270 <mandelbrot>:
	}
	return color;
}

//this calculates the math to find if a location is in the Mandelbrot set
int mandelbrot(long x0, long y0, long *xOut, long *yOut) {
  e50270:	defff304 	addi	sp,sp,-52
  e50274:	df000b15 	stw	fp,44(sp)
  e50278:	ddc00a15 	stw	r23,40(sp)
  e5027c:	dd400815 	stw	r21,32(sp)
  e50280:	dcc00615 	stw	r19,24(sp)
  e50284:	dc800515 	stw	r18,20(sp)
  e50288:	dc400415 	stw	r17,16(sp)
  e5028c:	dc000315 	stw	r16,12(sp)
  e50290:	0025883a 	mov	r18,zero
  e50294:	0021883a 	mov	r16,zero
  e50298:	2839883a 	mov	fp,r5
  e5029c:	0017883a 	mov	r11,zero
  e502a0:	0023883a 	mov	r17,zero
  e502a4:	002b883a 	mov	r21,zero
  e502a8:	002f883a 	mov	r23,zero
  e502ac:	0027883a 	mov	r19,zero
  e502b0:	dfc00c15 	stw	ra,48(sp)
  e502b4:	dd800915 	stw	r22,36(sp)
  e502b8:	dd000715 	stw	r20,28(sp)
  e502bc:	d9000015 	stw	r4,0(sp)
  e502c0:	d9800115 	stw	r6,4(sp)
  e502c4:	d9c00215 	stw	r7,8(sp)
  e502c8:	00000206 	br	e502d4 <mandelbrot+0x64>
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  e502cc:	00801904 	movi	r2,100
  e502d0:	b8802e26 	beq	r23,r2,e5038c <mandelbrot+0x11c>
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  e502d4:	9008d17a 	srli	r4,r18,5
  e502d8:	980696fa 	slli	r3,r19,27
  e502dc:	900496fa 	slli	r2,r18,27

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  e502e0:	da800017 	ldw	r10,0(sp)
  e502e4:	aad7c83a 	sub	r11,r21,r11
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  e502e8:	20c6b03a 	or	r3,r4,r3

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  e502ec:	5aad883a 	add	r22,r11,r10
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  e502f0:	1010d6ba 	srli	r8,r2,26
  e502f4:	181491ba 	slli	r10,r3,6
  e502f8:	880b883a 	mov	r5,r17
  e502fc:	8009883a 	mov	r4,r16
  e50300:	5210b03a 	or	r8,r10,r8
  e50304:	4005d7fa 	srai	r2,r8,31
  e50308:	400d883a 	mov	r6,r8
}

//Multiplies a (32, 26) fixed point nubmer with another (32,26) fixed point number
long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  e5030c:	b027d7fa 	srai	r19,r22,31
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  e50310:	100f883a 	mov	r7,r2
  e50314:	0e521280 	call	e52128 <__muldi3>
  e50318:	180c91ba 	slli	r6,r3,6
  e5031c:	1004d6ba 	srli	r2,r2,26
//Multiplies a (32, 26) fixed point nubmer with another (32,26) fixed point number
long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  e50320:	b009883a 	mov	r4,r22
  e50324:	980b883a 	mov	r5,r19
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  e50328:	3084b03a 	or	r2,r6,r2
//Multiplies a (32, 26) fixed point nubmer with another (32,26) fixed point number
long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  e5032c:	980f883a 	mov	r7,r19
  e50330:	b00d883a 	mov	r6,r22
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  e50334:	e0a9883a 	add	r20,fp,r2
//Multiplies a (32, 26) fixed point nubmer with another (32,26) fixed point number
long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  e50338:	0e521280 	call	e52128 <__muldi3>
  e5033c:	180c91ba 	slli	r6,r3,6
}

//Multiplies a (32, 26) fixed point nubmer with another (32,26) fixed point number
long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  e50340:	a023d7fa 	srai	r17,r20,31

	return c >> 26;
  e50344:	1004d6ba 	srli	r2,r2,26
  e50348:	a009883a 	mov	r4,r20
  e5034c:	880b883a 	mov	r5,r17
  e50350:	3084b03a 	or	r2,r6,r2
  e50354:	880f883a 	mov	r7,r17
  e50358:	a00d883a 	mov	r6,r20
  e5035c:	102b883a 	mov	r21,r2
  e50360:	0e521280 	call	e52128 <__muldi3>
  e50364:	180c91ba 	slli	r6,r3,6
  e50368:	1004d6ba 	srli	r2,r2,26
		/*if (cpu == 3) {
		 endTimeAndPrint();
		 }//*/

		x = xtemp;
		iter++;
  e5036c:	bdc00044 	addi	r23,r23,1
}

//Multiplies a (32, 26) fixed point nubmer with another (32,26) fixed point number
long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  e50370:	b025883a 	mov	r18,r22

	return c >> 26;
  e50374:	3084b03a 	or	r2,r6,r2
  e50378:	1017883a 	mov	r11,r2
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  e5037c:	a889883a 	add	r4,r21,r2
  e50380:	00840034 	movhi	r2,4096
}

//Multiplies a (32, 26) fixed point nubmer with another (32,26) fixed point number
long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  e50384:	a021883a 	mov	r16,r20
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  e50388:	113fd00e 	bge	r2,r4,e502cc <mandelbrot+0x5c>

		x = xtemp;
		iter++;

	}
	*xOut = x;
  e5038c:	d8800117 	ldw	r2,4(sp)
	*yOut = y;
  e50390:	da800217 	ldw	r10,8(sp)

		x = xtemp;
		iter++;

	}
	*xOut = x;
  e50394:	15800015 	stw	r22,0(r2)
	*yOut = y;

	return iter;
}
  e50398:	b805883a 	mov	r2,r23
		x = xtemp;
		iter++;

	}
	*xOut = x;
	*yOut = y;
  e5039c:	55000015 	stw	r20,0(r10)

	return iter;
}
  e503a0:	dfc00c17 	ldw	ra,48(sp)
  e503a4:	df000b17 	ldw	fp,44(sp)
  e503a8:	ddc00a17 	ldw	r23,40(sp)
  e503ac:	dd800917 	ldw	r22,36(sp)
  e503b0:	dd400817 	ldw	r21,32(sp)
  e503b4:	dd000717 	ldw	r20,28(sp)
  e503b8:	dcc00617 	ldw	r19,24(sp)
  e503bc:	dc800517 	ldw	r18,20(sp)
  e503c0:	dc400417 	ldw	r17,16(sp)
  e503c4:	dc000317 	ldw	r16,12(sp)
  e503c8:	dec00d04 	addi	sp,sp,52
  e503cc:	f800283a 	ret

00e503d0 <FloatToFixed>:

	printf("Cycles : %llu \n\n", (cycles));
}

//turns a float into a (32, 26) fixed point number
long FloatToFixed(float fixMe) {
  e503d0:	00934034 	movhi	r2,19712
  e503d4:	deffff04 	addi	sp,sp,-4
  e503d8:	2089ff32 	custom	252,r4,r4,r2
  e503dc:	dfc00015 	stw	ra,0(sp)
  e503e0:	0e52a440 	call	e52a44 <__fixsfsi>
	return (long) (fixMe * ((float) 134217728));
}
  e503e4:	dfc00017 	ldw	ra,0(sp)
  e503e8:	dec00104 	addi	sp,sp,4
  e503ec:	f800283a 	ret

00e503f0 <fixedPointMultiply32>:

//Multiples a (32, 26) fixed point number and a normal integer
long fixedPointMultiply32(long a, long b) {
	return (long long) a * (long long) b;
}
  e503f0:	2145383a 	mul	r2,r4,r5
  e503f4:	f800283a 	ret

00e503f8 <fixedPointMultiply64>:

//Multiplies a (32, 26) fixed point nubmer with another (32,26) fixed point number
long fixedPointMultiply64(long a, long b) {
  e503f8:	2813d7fa 	srai	r9,r5,31
  e503fc:	2007d7fa 	srai	r3,r4,31
  e50400:	2811883a 	mov	r8,r5
  e50404:	deffff04 	addi	sp,sp,-4
  e50408:	400d883a 	mov	r6,r8
  e5040c:	180b883a 	mov	r5,r3
  e50410:	480f883a 	mov	r7,r9
  e50414:	dfc00015 	stw	ra,0(sp)
  e50418:	0e521280 	call	e52128 <__muldi3>
  e5041c:	180c91ba 	slli	r6,r3,6
  e50420:	1004d6ba 	srli	r2,r2,26
  e50424:	3084b03a 	or	r2,r6,r2

	long long c = (long long) a * (long long) b;

	return c >> 26;
}
  e50428:	dfc00017 	ldw	ra,0(sp)
  e5042c:	dec00104 	addi	sp,sp,4
  e50430:	f800283a 	ret

00e50434 <startTimer>:
	}
}

//starts the performance counter
void startTimer(void) {
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
  e50434:	01000044 	movi	r4,1
  e50438:	0005883a 	mov	r2,zero
  e5043c:	11000035 	stwio	r4,0(r2)
	PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
  e50440:	00c00104 	movi	r3,4
  e50444:	18000035 	stwio	zero,0(r3)
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
  e50448:	00800504 	movi	r2,20
  e5044c:	10000035 	stwio	zero,0(r2)
}
  e50450:	f800283a 	ret

00e50454 <endTimeAndPrint>:

//stops the timer and prints out the number of cycles
void endTimeAndPrint(void) {
  e50454:	deffff04 	addi	sp,sp,-4
	unsigned long long cycles = 0;

	PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
  e50458:	00800404 	movi	r2,16
	PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
}

//stops the timer and prints out the number of cycles
void endTimeAndPrint(void) {
  e5045c:	dfc00015 	stw	ra,0(sp)
	unsigned long long cycles = 0;

	PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
  e50460:	10000035 	stwio	zero,0(r2)
	PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
  e50464:	0007883a 	mov	r3,zero
  e50468:	18000035 	stwio	zero,0(r3)
	cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);
  e5046c:	0009883a 	mov	r4,zero
  e50470:	01400044 	movi	r5,1
  e50474:	0e5e7000 	call	e5e700 <perf_get_section_time>

	printf("Cycles : %llu \n\n", (cycles));
  e50478:	180d883a 	mov	r6,r3
  e5047c:	010039b4 	movhi	r4,230
  e50480:	21046704 	addi	r4,r4,4508
  e50484:	100b883a 	mov	r5,r2
}
  e50488:	dfc00017 	ldw	ra,0(sp)
  e5048c:	dec00104 	addi	sp,sp,4

	PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
	PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
	cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);

	printf("Cycles : %llu \n\n", (cycles));
  e50490:	0e53c5c1 	jmpi	e53c5c <printf>

00e50494 <getNewXY>:
void clearScreen(void) {
	//clears the part of the screen controlled by the pixel buffer
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
}

void getNewXY(long x, long y, int result, int zoom, int *recalculateTargetFlag, int cpu, int oldResult) {
  e50494:	defffd04 	addi	sp,sp,-12
  e50498:	d9c00317 	ldw	r7,12(sp)
  e5049c:	dc000015 	stw	r16,0(sp)
  e504a0:	2021883a 	mov	r16,r4
	if (*recalculateTargetFlag) {
  e504a4:	39000017 	ldw	r4,0(r7)
void clearScreen(void) {
	//clears the part of the screen controlled by the pixel buffer
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
}

void getNewXY(long x, long y, int result, int zoom, int *recalculateTargetFlag, int cpu, int oldResult) {
  e504a8:	dc400115 	stw	r17,4(sp)
  e504ac:	dfc00215 	stw	ra,8(sp)
  e504b0:	2823883a 	mov	r17,r5
  e504b4:	d8c00417 	ldw	r3,16(sp)
  e504b8:	da000517 	ldw	r8,20(sp)
	if (*recalculateTargetFlag) {
  e504bc:	20000226 	beq	r4,zero,e504c8 <getNewXY+0x34>

		//makes sure only CPU 3 is doing this function
		//this is why we have one slow CPU since it has to calculate all the following code
		if (cpu == 3) {
  e504c0:	008000c4 	movi	r2,3
  e504c4:	18800526 	beq	r3,r2,e504dc <getNewXY+0x48>
				}
			}
			//			}
		}
	}
}
  e504c8:	dfc00217 	ldw	ra,8(sp)
  e504cc:	dc400117 	ldw	r17,4(sp)
  e504d0:	dc000017 	ldw	r16,0(sp)
  e504d4:	dec00304 	addi	sp,sp,12
  e504d8:	f800283a 	ret

		//makes sure only CPU 3 is doing this function
		//this is why we have one slow CPU since it has to calculate all the following code
		if (cpu == 3) {
			//			if ((oldResult < maxIter) && (oldResult > 31)) {
			if (result > (maxIter - 2)) {
  e504dc:	00801884 	movi	r2,98
  e504e0:	11bff90e 	bge	r2,r6,e504c8 <getNewXY+0x34>

				//the bounding conditions use these to tune where you will be zooming in at
				//remember this is in fixed point to get back to normal floating point divide by 2^26
				if ((x > 60818) && (y > 0)) {
  e504e4:	00bb6494 	movui	r2,60818
  e504e8:	143ff70e 	bge	r2,r16,e504c8 <getNewXY+0x34>
  e504ec:	017ff60e 	bge	zero,r5,e504c8 <getNewXY+0x34>
					if ((x < 2531832) && (y < 61548816)) {
  e504f0:	008009f4 	movhi	r2,39
  e504f4:	10a87dc4 	addi	r2,r2,-24073
  e504f8:	143ff316 	blt	r2,r16,e504c8 <getNewXY+0x34>
  e504fc:	0080eaf4 	movhi	r2,939
  e50500:	108a43c4 	addi	r2,r2,10511
						targetArrayXYMaster[0] = x;
						targetArrayXYMaster[1] = y;

						//this decrements the flag so the function will not run if it is not needed
						//as in we have already found a good point for the next frame to zoom in on
						*recalculateTargetFlag = *recalculateTargetFlag - 1;
  e50504:	20ffffc4 	addi	r3,r4,-1

						printf("point iteration number: %d old iteration: %d \n", result, oldResult);
  e50508:	300b883a 	mov	r5,r6
  e5050c:	010039b4 	movhi	r4,230
  e50510:	21046c04 	addi	r4,r4,4528
  e50514:	400d883a 	mov	r6,r8
			if (result > (maxIter - 2)) {

				//the bounding conditions use these to tune where you will be zooming in at
				//remember this is in fixed point to get back to normal floating point divide by 2^26
				if ((x > 60818) && (y > 0)) {
					if ((x < 2531832) && (y < 61548816)) {
  e50518:	147feb16 	blt	r2,r17,e504c8 <getNewXY+0x34>

						//setting the master point that all the other CPU's will zoom in on
						targetArrayXYMaster[0] = x;
						targetArrayXYMaster[1] = y;
  e5051c:	d0a00004 	addi	r2,gp,-32768

						//this decrements the flag so the function will not run if it is not needed
						//as in we have already found a good point for the next frame to zoom in on
						*recalculateTargetFlag = *recalculateTargetFlag - 1;
  e50520:	38c00015 	stw	r3,0(r7)
				if ((x > 60818) && (y > 0)) {
					if ((x < 2531832) && (y < 61548816)) {

						//setting the master point that all the other CPU's will zoom in on
						targetArrayXYMaster[0] = x;
						targetArrayXYMaster[1] = y;
  e50524:	14400115 	stw	r17,4(r2)
				//remember this is in fixed point to get back to normal floating point divide by 2^26
				if ((x > 60818) && (y > 0)) {
					if ((x < 2531832) && (y < 61548816)) {

						//setting the master point that all the other CPU's will zoom in on
						targetArrayXYMaster[0] = x;
  e50528:	d4200015 	stw	r16,-32768(gp)

						//this decrements the flag so the function will not run if it is not needed
						//as in we have already found a good point for the next frame to zoom in on
						*recalculateTargetFlag = *recalculateTargetFlag - 1;

						printf("point iteration number: %d old iteration: %d \n", result, oldResult);
  e5052c:	0e53c5c0 	call	e53c5c <printf>
						printf("X, Y: %ld, %ld\n", x, y);
  e50530:	800b883a 	mov	r5,r16
  e50534:	880d883a 	mov	r6,r17
  e50538:	010039b4 	movhi	r4,230
  e5053c:	21047804 	addi	r4,r4,4576
				}
			}
			//			}
		}
	}
}
  e50540:	dfc00217 	ldw	ra,8(sp)
  e50544:	dc400117 	ldw	r17,4(sp)
  e50548:	dc000017 	ldw	r16,0(sp)
  e5054c:	dec00304 	addi	sp,sp,12
						//this decrements the flag so the function will not run if it is not needed
						//as in we have already found a good point for the next frame to zoom in on
						*recalculateTargetFlag = *recalculateTargetFlag - 1;

						printf("point iteration number: %d old iteration: %d \n", result, oldResult);
						printf("X, Y: %ld, %ld\n", x, y);
  e50550:	0e53c5c1 	jmpi	e53c5c <printf>

00e50554 <clearScreen>:
}

//sends the command to the altera board to refresh the dma
void clearScreen(void) {
	//clears the part of the screen controlled by the pixel buffer
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
  e50554:	d1271417 	ldw	r4,-25520(gp)
  e50558:	000b883a 	mov	r5,zero
  e5055c:	0e5eb4c1 	jmpi	e5eb4c <alt_up_pixel_buffer_dma_clear_screen>

00e50560 <barrier>:
	}

}

//forces the CPU to halt until it gets a message to continue
void barrier(alt_u8 barrierNum) {
  e50560:	deffe104 	addi	sp,sp,-124
  e50564:	dfc01e15 	stw	ra,120(sp)
  e50568:	dd401d15 	stw	r21,116(sp)
  e5056c:	dd001c15 	stw	r20,112(sp)
  e50570:	dcc01b15 	stw	r19,108(sp)
  e50574:	dc801a15 	stw	r18,104(sp)
  e50578:	dc401915 	stw	r17,100(sp)
  e5057c:	dc001815 	stw	r16,96(sp)
	alt_u32 msg;
	alt_mailbox_dev *mb[NUM_CPUS];
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
  e50580:	0027317a 	rdctl	r19,cpuid
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  e50584:	dc400404 	addi	r17,sp,16
  e50588:	014039b4 	movhi	r5,230
  e5058c:	29447c04 	addi	r5,r5,4592
  e50590:	000d883a 	mov	r6,zero
  e50594:	8809883a 	mov	r4,r17
  e50598:	0e53d880 	call	e53d88 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  e5059c:	8809883a 	mov	r4,r17
  e505a0:	0e5e0f80 	call	e5e0f8 <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  e505a4:	05400044 	movi	r21,1
  e505a8:	014039b4 	movhi	r5,230
  e505ac:	29447c04 	addi	r5,r5,4592
  e505b0:	a80d883a 	mov	r6,r21
  e505b4:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  e505b8:	d8800015 	stw	r2,0(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  e505bc:	0e53d880 	call	e53d88 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  e505c0:	8809883a 	mov	r4,r17
  e505c4:	0e5e0f80 	call	e5e0f8 <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  e505c8:	05000084 	movi	r20,2
  e505cc:	014039b4 	movhi	r5,230
  e505d0:	29447c04 	addi	r5,r5,4592
  e505d4:	a00d883a 	mov	r6,r20
  e505d8:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  e505dc:	d8800115 	stw	r2,4(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  e505e0:	0e53d880 	call	e53d88 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  e505e4:	8809883a 	mov	r4,r17
  e505e8:	0e5e0f80 	call	e5e0f8 <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  e505ec:	048000c4 	movi	r18,3
  e505f0:	014039b4 	movhi	r5,230
  e505f4:	29447c04 	addi	r5,r5,4592
  e505f8:	900d883a 	mov	r6,r18
  e505fc:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  e50600:	d8800215 	stw	r2,8(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  e50604:	0e53d880 	call	e53d88 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  e50608:	8809883a 	mov	r4,r17
  e5060c:	0e5e0f80 	call	e5e0f8 <altera_avalon_mailbox_open>
  e50610:	1021883a 	mov	r16,r2
  e50614:	d8800315 	stw	r2,12(sp)
  e50618:	9c803026 	beq	r19,r18,e506dc <barrier+0x17c>
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  e5061c:	98000426 	beq	r19,zero,e50630 <barrier+0xd0>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  e50620:	d9000017 	ldw	r4,0(sp)
  e50624:	000b883a 	mov	r5,zero
  e50628:	0e5e1700 	call	e5e170 <altera_avalon_mailbox_post>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  e5062c:	9d400426 	beq	r19,r21,e50640 <barrier+0xe0>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  e50630:	d9000117 	ldw	r4,4(sp)
  e50634:	000b883a 	mov	r5,zero
  e50638:	0e5e1700 	call	e5e170 <altera_avalon_mailbox_post>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  e5063c:	9d000326 	beq	r19,r20,e5064c <barrier+0xec>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  e50640:	d9000217 	ldw	r4,8(sp)
  e50644:	000b883a 	mov	r5,zero
  e50648:	0e5e1700 	call	e5e170 <altera_avalon_mailbox_post>
  e5064c:	8009883a 	mov	r4,r16
  e50650:	000b883a 	mov	r5,zero
  e50654:	0e5e1700 	call	e5e170 <altera_avalon_mailbox_post>
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  e50658:	9cc5883a 	add	r2,r19,r19
  e5065c:	1085883a 	add	r2,r2,r2
  e50660:	16c5883a 	add	r2,r2,sp
  e50664:	14400017 	ldw	r17,0(r2)
  e50668:	8809883a 	mov	r4,r17
  e5066c:	0e5e27c0 	call	e5e27c <altera_avalon_mailbox_pend>

		if (msg != 0) {
  e50670:	10000126 	beq	r2,zero,e50678 <barrier+0x118>
			targetArrayXY = (long *) msg;
  e50674:	d0a00215 	stw	r2,-32760(gp)
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  e50678:	8809883a 	mov	r4,r17
  e5067c:	0e5e27c0 	call	e5e27c <altera_avalon_mailbox_pend>

		if (msg != 0) {
  e50680:	10000126 	beq	r2,zero,e50688 <barrier+0x128>
			targetArrayXY = (long *) msg;
  e50684:	d0a00215 	stw	r2,-32760(gp)
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  e50688:	8809883a 	mov	r4,r17
  e5068c:	0e5e27c0 	call	e5e27c <altera_avalon_mailbox_pend>

		if (msg != 0) {
  e50690:	10000126 	beq	r2,zero,e50698 <barrier+0x138>
			targetArrayXY = (long *) msg;
  e50694:	d0a00215 	stw	r2,-32760(gp)
		}
	}
	for (i = 0; i < NUM_CPUS; i++) {
		altera_avalon_mailbox_close(mb[i]);
  e50698:	d9000017 	ldw	r4,0(sp)
  e5069c:	0e5e1500 	call	e5e150 <altera_avalon_mailbox_close>
  e506a0:	d9000117 	ldw	r4,4(sp)
  e506a4:	0e5e1500 	call	e5e150 <altera_avalon_mailbox_close>
  e506a8:	d9000217 	ldw	r4,8(sp)
  e506ac:	0e5e1500 	call	e5e150 <altera_avalon_mailbox_close>
  e506b0:	8009883a 	mov	r4,r16
  e506b4:	0e5e1500 	call	e5e150 <altera_avalon_mailbox_close>
	}
}
  e506b8:	dfc01e17 	ldw	ra,120(sp)
  e506bc:	dd401d17 	ldw	r21,116(sp)
  e506c0:	dd001c17 	ldw	r20,112(sp)
  e506c4:	dcc01b17 	ldw	r19,108(sp)
  e506c8:	dc801a17 	ldw	r18,104(sp)
  e506cc:	dc401917 	ldw	r17,100(sp)
  e506d0:	dc001817 	ldw	r16,96(sp)
  e506d4:	dec01f04 	addi	sp,sp,124
  e506d8:	f800283a 	ret
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
  e506dc:	0025883a 	mov	r18,zero
  e506e0:	d823883a 	mov	r17,sp
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
  e506e4:	89000017 	ldw	r4,0(r17)
  e506e8:	d1600004 	addi	r5,gp,-32768
	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
  e506ec:	94800044 	addi	r18,r18,1
		if (i != cpu) {

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
  e506f0:	0e5e1700 	call	e5e170 <altera_avalon_mailbox_post>
	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
  e506f4:	00800104 	movi	r2,4
  e506f8:	8c400104 	addi	r17,r17,4
  e506fc:	90bfd626 	beq	r18,r2,e50658 <barrier+0xf8>
		if (i != cpu) {
  e50700:	008000c4 	movi	r2,3
  e50704:	90bff71e 	bne	r18,r2,e506e4 <barrier+0x184>
  e50708:	003fd306 	br	e50658 <barrier+0xf8>

00e5070c <setup>:
long targetArrayXYMaster[2] = { -52679047, -13416037 };
volatile long *targetArrayXY = targetArrayXYMaster;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  e5070c:	deffff04 	addi	sp,sp,-4
		alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
	}
	*buffaddr = pixel_buffer_memory;
#endif

	barrier(0);
  e50710:	0009883a 	mov	r4,zero
long targetArrayXYMaster[2] = { -52679047, -13416037 };
volatile long *targetArrayXY = targetArrayXYMaster;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  e50714:	dfc00015 	stw	ra,0(sp)
		alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
	}
	*buffaddr = pixel_buffer_memory;
#endif

	barrier(0);
  e50718:	0e505600 	call	e50560 <barrier>

#ifndef MASTER
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  e5071c:	010039b4 	movhi	r4,230
  e50720:	21048004 	addi	r4,r4,4608
  e50724:	0e5e8880 	call	e5e888 <alt_up_pixel_buffer_dma_open_dev>

	myPixelBuffer->back_buffer_start_address = (unsigned int) *buffaddr;
  e50728:	00cc7f44 	movi	r3,12797
  e5072c:	19000017 	ldw	r4,0(r3)
#endif

	barrier(0);

#ifndef MASTER
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  e50730:	d0a71415 	stw	r2,-25520(gp)

	myPixelBuffer->back_buffer_start_address = (unsigned int) *buffaddr;
#endif

	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
  e50734:	00c00044 	movi	r3,1
	barrier(0);

#ifndef MASTER
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");

	myPixelBuffer->back_buffer_start_address = (unsigned int) *buffaddr;
  e50738:	11000c15 	stw	r4,48(r2)
#endif

	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
  e5073c:	0005883a 	mov	r2,zero
  e50740:	10c00035 	stwio	r3,0(r2)
}
  e50744:	dfc00017 	ldw	ra,0(sp)
  e50748:	dec00104 	addi	sp,sp,4
  e5074c:	f800283a 	ret

00e50750 <drawFrame>:
	*yOut = y;

	return iter;
}

void drawFrame(int zoom) {
  e50750:	deffe204 	addi	sp,sp,-120
  e50754:	dfc01d15 	stw	ra,116(sp)
  e50758:	df001c15 	stw	fp,112(sp)
  e5075c:	ddc01b15 	stw	r23,108(sp)
  e50760:	dd801a15 	stw	r22,104(sp)
  e50764:	dd401915 	stw	r21,100(sp)
  e50768:	dd001815 	stw	r20,96(sp)
  e5076c:	dcc01715 	stw	r19,92(sp)
  e50770:	dc801615 	stw	r18,88(sp)
  e50774:	dc401515 	stw	r17,84(sp)
  e50778:	dc001415 	stw	r16,80(sp)
	int i;
	int j;
	int result = 0;
	int oldResult = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
  e5077c:	0005317a 	rdctl	r2,cpuid
  e50780:	d8800d15 	stw	r2,52(sp)
	long oneOverColSize = 65536;
	long rowOverRowSize = 0;
	long colOverColSize = 0;

	//calculating the point we are going to be zooming in on
	minX = targetArrayXY[0] - FloatToFixed(1.0 / powf(1.5, zoom));
  e50784:	d0a00217 	ldw	r2,-32760(gp)
  e50788:	040ff034 	movhi	r16,16320
  e5078c:	17000017 	ldw	fp,0(r2)
  e50790:	0e529ac0 	call	e529ac <__floatsisf>
  e50794:	100b883a 	mov	r5,r2
  e50798:	8009883a 	mov	r4,r16
  e5079c:	1023883a 	mov	r17,r2
  e507a0:	0e50c880 	call	e50c88 <powf>
  e507a4:	1025883a 	mov	r18,r2
	maxX = targetArrayXY[0] + FloatToFixed(1.0 / powf(1.5, zoom));
  e507a8:	d0a00217 	ldw	r2,-32760(gp)
  e507ac:	880b883a 	mov	r5,r17
  e507b0:	8009883a 	mov	r4,r16
  e507b4:	15c00017 	ldw	r23,0(r2)
  e507b8:	0e50c880 	call	e50c88 <powf>
  e507bc:	d8801215 	stw	r2,72(sp)
	minY = targetArrayXY[1] - FloatToFixed(0.75 / powf(1.5, zoom));
  e507c0:	d0a00217 	ldw	r2,-32760(gp)
  e507c4:	880b883a 	mov	r5,r17
  e507c8:	8009883a 	mov	r4,r16
  e507cc:	15800117 	ldw	r22,4(r2)
  e507d0:	0e50c880 	call	e50c88 <powf>
  e507d4:	1029883a 	mov	r20,r2
	maxY = targetArrayXY[1] + FloatToFixed(0.75 / powf(1.5, zoom));
  e507d8:	d0a00217 	ldw	r2,-32760(gp)
  e507dc:	8009883a 	mov	r4,r16
  e507e0:	880b883a 	mov	r5,r17
  e507e4:	15400117 	ldw	r21,4(r2)
  e507e8:	0e50c880 	call	e50c88 <powf>

	//the loop that goes over the rows
	for (i = cpu; i < rowSize; i = i + NUM_CPUS) {
  e507ec:	d8c00d17 	ldw	r3,52(sp)
  e507f0:	0100bfc4 	movi	r4,767

	//calculating the point we are going to be zooming in on
	minX = targetArrayXY[0] - FloatToFixed(1.0 / powf(1.5, zoom));
	maxX = targetArrayXY[0] + FloatToFixed(1.0 / powf(1.5, zoom));
	minY = targetArrayXY[1] - FloatToFixed(0.75 / powf(1.5, zoom));
	maxY = targetArrayXY[1] + FloatToFixed(0.75 / powf(1.5, zoom));
  e507f4:	1023883a 	mov	r17,r2

	//the loop that goes over the rows
	for (i = cpu; i < rowSize; i = i + NUM_CPUS) {
  e507f8:	20c0d816 	blt	r4,r3,e50b5c <drawFrame+0x40c>
	long oneOverColSize = 65536;
	long rowOverRowSize = 0;
	long colOverColSize = 0;

	//calculating the point we are going to be zooming in on
	minX = targetArrayXY[0] - FloatToFixed(1.0 / powf(1.5, zoom));
  e507fc:	04cfe034 	movhi	r19,16256
  e50800:	900b883a 	mov	r5,r18
  e50804:	9809883a 	mov	r4,r19
  e50808:	0e526580 	call	e52658 <__divsf3>
  e5080c:	04934034 	movhi	r18,19712
  e50810:	1489ff32 	custom	252,r4,r2,r18
  e50814:	0e52a440 	call	e52a44 <__fixsfsi>
	maxX = targetArrayXY[0] + FloatToFixed(1.0 / powf(1.5, zoom));
	minY = targetArrayXY[1] - FloatToFixed(0.75 / powf(1.5, zoom));
  e50818:	040fd034 	movhi	r16,16192
  e5081c:	a00b883a 	mov	r5,r20
  e50820:	8009883a 	mov	r4,r16
	long oneOverColSize = 65536;
	long rowOverRowSize = 0;
	long colOverColSize = 0;

	//calculating the point we are going to be zooming in on
	minX = targetArrayXY[0] - FloatToFixed(1.0 / powf(1.5, zoom));
  e50824:	e0b9c83a 	sub	fp,fp,r2
  e50828:	df000b15 	stw	fp,44(sp)
	maxX = targetArrayXY[0] + FloatToFixed(1.0 / powf(1.5, zoom));
	minY = targetArrayXY[1] - FloatToFixed(0.75 / powf(1.5, zoom));
  e5082c:	0e526580 	call	e52658 <__divsf3>
  e50830:	1489ff32 	custom	252,r4,r2,r18
  e50834:	0e52a440 	call	e52a44 <__fixsfsi>
  e50838:	880b883a 	mov	r5,r17
  e5083c:	8009883a 	mov	r4,r16
  e50840:	b0adc83a 	sub	r22,r22,r2
  e50844:	dd800a15 	stw	r22,40(sp)
  e50848:	0e526580 	call	e52658 <__divsf3>
  e5084c:	1489ff32 	custom	252,r4,r2,r18
  e50850:	0e52a440 	call	e52a44 <__fixsfsi>
  e50854:	dd800a17 	ldw	r22,40(sp)
  e50858:	d9401217 	ldw	r5,72(sp)
  e5085c:	a885883a 	add	r2,r21,r2
  e50860:	1585c83a 	sub	r2,r2,r22
  e50864:	9809883a 	mov	r4,r19
  e50868:	1021883a 	mov	r16,r2
  e5086c:	1023d7fa 	srai	r17,r2,31
  e50870:	0e526580 	call	e52658 <__divsf3>
  e50874:	1489ff32 	custom	252,r4,r2,r18
  e50878:	0e52a440 	call	e52a44 <__fixsfsi>
  e5087c:	df000b17 	ldw	fp,44(sp)
  e50880:	b885883a 	add	r2,r23,r2
  e50884:	023ffef4 	movhi	r8,65531
  e50888:	422aab04 	addi	r8,r8,-21844
  e5088c:	1705c83a 	sub	r2,r2,fp
  e50890:	d8800815 	stw	r2,32(sp)
  e50894:	1005d7fa 	srai	r2,r2,31
  e50898:	027fffc4 	movi	r9,-1
  e5089c:	480f883a 	mov	r7,r9
  e508a0:	400d883a 	mov	r6,r8
  e508a4:	8009883a 	mov	r4,r16
  e508a8:	880b883a 	mov	r5,r17
  e508ac:	d8800915 	stw	r2,36(sp)
  e508b0:	0e521280 	call	e52128 <__muldi3>
  e508b4:	d9000d17 	ldw	r4,52(sp)
  e508b8:	0180bfc4 	movi	r6,767
  e508bc:	880f883a 	mov	r7,r17
  e508c0:	310bc83a 	sub	r5,r6,r4
  e508c4:	01000074 	movhi	r4,1
  e508c8:	21155544 	addi	r4,r4,21845
  e508cc:	290b383a 	mul	r5,r5,r4
  e508d0:	800d883a 	mov	r6,r16
  e508d4:	d8800015 	stw	r2,0(sp)
  e508d8:	2813d7fa 	srai	r9,r5,31
  e508dc:	2811883a 	mov	r8,r5
  e508e0:	4009883a 	mov	r4,r8
  e508e4:	480b883a 	mov	r5,r9
  e508e8:	d8c00115 	stw	r3,4(sp)
  e508ec:	0e521280 	call	e52128 <__muldi3>
  e508f0:	180b883a 	mov	r5,r3
  e508f4:	d8c00817 	ldw	r3,32(sp)
  e508f8:	1009883a 	mov	r4,r2
  e508fc:	d8800d17 	ldw	r2,52(sp)
  e50900:	1806d43a 	srli	r3,r3,16
  e50904:	d9000415 	stw	r4,16(sp)
  e50908:	d9400515 	stw	r5,20(sp)
  e5090c:	d8c01315 	stw	r3,76(sp)
  e50910:	00c00044 	movi	r3,1
  e50914:	d8801015 	stw	r2,64(sp)
  e50918:	d8000e15 	stw	zero,56(sp)
  e5091c:	d8c00c15 	stw	r3,48(sp)
//Multiplies a (32, 26) fixed point nubmer with another (32,26) fixed point number
long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  e50920:	d9400517 	ldw	r5,20(sp)
  e50924:	d9800417 	ldw	r6,16(sp)
  e50928:	d8000f15 	stw	zero,60(sp)
  e5092c:	280891ba 	slli	r4,r5,6
  e50930:	d9400917 	ldw	r5,36(sp)
  e50934:	3004d6ba 	srli	r2,r6,26
  e50938:	000d883a 	mov	r6,zero
  e5093c:	280a943a 	slli	r5,r5,16
  e50940:	2084b03a 	or	r2,r4,r2
  e50944:	d9000817 	ldw	r4,32(sp)
  e50948:	d9800615 	stw	r6,24(sp)
  e5094c:	280d883a 	mov	r6,r5
  e50950:	d9401317 	ldw	r5,76(sp)
  e50954:	2008943a 	slli	r4,r4,16
  e50958:	d8801115 	stw	r2,68(sp)
  e5095c:	298cb03a 	or	r6,r5,r6
  e50960:	000b883a 	mov	r5,zero
  e50964:	d9800315 	stw	r6,12(sp)
  e50968:	d9000215 	stw	r4,8(sp)
  e5096c:	d9400715 	stw	r5,28(sp)
  e50970:	d9800717 	ldw	r6,28(sp)
  e50974:	d9400617 	ldw	r5,24(sp)
  e50978:	0021883a 	mov	r16,zero
  e5097c:	300891ba 	slli	r4,r6,6
  e50980:	2804d6ba 	srli	r2,r5,26
  e50984:	0025883a 	mov	r18,zero
  e50988:	002f883a 	mov	r23,zero
  e5098c:	2084b03a 	or	r2,r4,r2
  e50990:	0015883a 	mov	r10,zero
  e50994:	1039883a 	mov	fp,r2
  e50998:	0023883a 	mov	r17,zero
  e5099c:	0029883a 	mov	r20,zero
  e509a0:	0027883a 	mov	r19,zero
  e509a4:	00000206 	br	e509b0 <drawFrame+0x260>
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  e509a8:	00801904 	movi	r2,100
  e509ac:	b8803226 	beq	r23,r2,e50a78 <drawFrame+0x328>
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  e509b0:	9008d17a 	srli	r4,r18,5
  e509b4:	980696fa 	slli	r3,r19,27
  e509b8:	900496fa 	slli	r2,r18,27

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  e509bc:	a295c83a 	sub	r10,r20,r10
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  e509c0:	20c6b03a 	or	r3,r4,r3
  e509c4:	181691ba 	slli	r11,r3,6
  e509c8:	1010d6ba 	srli	r8,r2,26

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  e509cc:	d9000b17 	ldw	r4,44(sp)
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  e509d0:	880b883a 	mov	r5,r17
  e509d4:	5a10b03a 	or	r8,r11,r8
  e509d8:	4005d7fa 	srai	r2,r8,31

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  e509dc:	2295883a 	add	r10,r4,r10
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  e509e0:	400d883a 	mov	r6,r8
  e509e4:	8009883a 	mov	r4,r16
  e509e8:	100f883a 	mov	r7,r2

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  e509ec:	e2ad883a 	add	r22,fp,r10
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  e509f0:	0e521280 	call	e52128 <__muldi3>
  e509f4:	180c91ba 	slli	r6,r3,6
  e509f8:	1004d6ba 	srli	r2,r2,26
}

//Multiplies a (32, 26) fixed point nubmer with another (32,26) fixed point number
long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  e509fc:	b027d7fa 	srai	r19,r22,31
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  e50a00:	d8c01117 	ldw	r3,68(sp)
  e50a04:	3084b03a 	or	r2,r6,r2
  e50a08:	d9800a17 	ldw	r6,40(sp)
//Multiplies a (32, 26) fixed point nubmer with another (32,26) fixed point number
long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  e50a0c:	b009883a 	mov	r4,r22
  e50a10:	980b883a 	mov	r5,r19
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  e50a14:	3085883a 	add	r2,r6,r2
//Multiplies a (32, 26) fixed point nubmer with another (32,26) fixed point number
long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  e50a18:	980f883a 	mov	r7,r19
  e50a1c:	b00d883a 	mov	r6,r22
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  e50a20:	18ab883a 	add	r21,r3,r2
//Multiplies a (32, 26) fixed point nubmer with another (32,26) fixed point number
long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  e50a24:	0e521280 	call	e52128 <__muldi3>
  e50a28:	180c91ba 	slli	r6,r3,6
}

//Multiplies a (32, 26) fixed point nubmer with another (32,26) fixed point number
long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  e50a2c:	a823d7fa 	srai	r17,r21,31

	return c >> 26;
  e50a30:	1004d6ba 	srli	r2,r2,26
  e50a34:	a809883a 	mov	r4,r21
  e50a38:	880b883a 	mov	r5,r17
  e50a3c:	3084b03a 	or	r2,r6,r2
  e50a40:	880f883a 	mov	r7,r17
  e50a44:	a80d883a 	mov	r6,r21
  e50a48:	1029883a 	mov	r20,r2
  e50a4c:	0e521280 	call	e52128 <__muldi3>
  e50a50:	180c91ba 	slli	r6,r3,6
  e50a54:	1004d6ba 	srli	r2,r2,26
		/*if (cpu == 3) {
		 endTimeAndPrint();
		 }//*/

		x = xtemp;
		iter++;
  e50a58:	bdc00044 	addi	r23,r23,1
}

//Multiplies a (32, 26) fixed point nubmer with another (32,26) fixed point number
long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  e50a5c:	b025883a 	mov	r18,r22

	return c >> 26;
  e50a60:	3084b03a 	or	r2,r6,r2
  e50a64:	1015883a 	mov	r10,r2
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  e50a68:	a089883a 	add	r4,r20,r2
  e50a6c:	00840034 	movhi	r2,4096
}

//Multiplies a (32, 26) fixed point nubmer with another (32,26) fixed point number
long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  e50a70:	a821883a 	mov	r16,r21
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  e50a74:	113fcc0e 	bge	r2,r4,e509a8 <drawFrame+0x258>
	//clears the part of the screen controlled by the pixel buffer
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
}

void getNewXY(long x, long y, int result, int zoom, int *recalculateTargetFlag, int cpu, int oldResult) {
	if (*recalculateTargetFlag) {
  e50a78:	d9000c17 	ldw	r4,48(sp)
  e50a7c:	20000326 	beq	r4,zero,e50a8c <drawFrame+0x33c>

		//makes sure only CPU 3 is doing this function
		//this is why we have one slow CPU since it has to calculate all the following code
		if (cpu == 3) {
  e50a80:	d9400d17 	ldw	r5,52(sp)
  e50a84:	008000c4 	movi	r2,3
  e50a88:	28804226 	beq	r5,r2,e50b94 <drawFrame+0x444>
}

//makes the color for display
int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  e50a8c:	00801904 	movi	r2,100
  e50a90:	b8803e26 	beq	r23,r2,e50b8c <drawFrame+0x43c>
		color = grey;
	}
	else {
		int red = iter;
		int green = iter * 6;
  e50a94:	008007c4 	movi	r2,31
  e50a98:	b8c001a4 	muli	r3,r23,6
  e50a9c:	b809883a 	mov	r4,r23
  e50aa0:	15c0010e 	bge	r2,r23,e50aa8 <drawFrame+0x358>
  e50aa4:	1009883a 	mov	r4,r2
  e50aa8:	00800fc4 	movi	r2,63
  e50aac:	10c0010e 	bge	r2,r3,e50ab4 <drawFrame+0x364>
  e50ab0:	1007883a 	mov	r3,r2
  e50ab4:	200492fa 	slli	r2,r4,11
  e50ab8:	1806917a 	slli	r3,r3,5
  e50abc:	21003fcc 	andi	r4,r4,255
  e50ac0:	10be000c 	andi	r2,r2,63488
  e50ac4:	1104b03a 	or	r2,r2,r4
  e50ac8:	18c1f80c 	andi	r3,r3,2016
  e50acc:	188ab03a 	or	r5,r3,r2

			//gets the color using the result of the manderbrot function
			color = genColor(result);

			//gets the color we give it and sets the pixel at the i j position to that color
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, j, i);
  e50ad0:	d1271417 	ldw	r4,-25520(gp)
  e50ad4:	d9800f17 	ldw	r6,60(sp)
  e50ad8:	d9c01017 	ldw	r7,64(sp)
  e50adc:	0e5e8c80 	call	e5e8c8 <alt_up_pixel_buffer_dma_draw>
		//calculating the y0
		rowOverRowSize = fixedPointMultiply32(((rowSize - 1) - i), oneOverRowSize);
		y0 = fixedPointMultiply64(rowOverRowSize, (maxY - minY)) + minY;

		//the loop that goes over the columns
		for (j = 0; j < colSize; j++) {
  e50ae0:	d9400617 	ldw	r5,24(sp)
  e50ae4:	d9800217 	ldw	r6,8(sp)
  e50ae8:	ddc00e15 	stw	r23,56(sp)
  e50aec:	2987883a 	add	r3,r5,r6
  e50af0:	1945803a 	cmpltu	r2,r3,r5
  e50af4:	d9800717 	ldw	r6,28(sp)
  e50af8:	d9400317 	ldw	r5,12(sp)
  e50afc:	d8c00615 	stw	r3,24(sp)
  e50b00:	3149883a 	add	r4,r6,r5
  e50b04:	d9800f17 	ldw	r6,60(sp)
  e50b08:	1105883a 	add	r2,r2,r4
  e50b0c:	d8800715 	stw	r2,28(sp)
  e50b10:	31800044 	addi	r6,r6,1
  e50b14:	00810004 	movi	r2,1024
  e50b18:	d9800f15 	stw	r6,60(sp)
  e50b1c:	30bf941e 	bne	r6,r2,e50970 <drawFrame+0x220>
	maxX = targetArrayXY[0] + FloatToFixed(1.0 / powf(1.5, zoom));
	minY = targetArrayXY[1] - FloatToFixed(0.75 / powf(1.5, zoom));
	maxY = targetArrayXY[1] + FloatToFixed(0.75 / powf(1.5, zoom));

	//the loop that goes over the rows
	for (i = cpu; i < rowSize; i = i + NUM_CPUS) {
  e50b20:	d9000417 	ldw	r4,16(sp)
  e50b24:	d9400017 	ldw	r5,0(sp)
  e50b28:	d9800117 	ldw	r6,4(sp)
  e50b2c:	2145883a 	add	r2,r4,r5
  e50b30:	d9400517 	ldw	r5,20(sp)
  e50b34:	1109803a 	cmpltu	r4,r2,r4
  e50b38:	d8800415 	stw	r2,16(sp)
  e50b3c:	2987883a 	add	r3,r5,r6
  e50b40:	d9401017 	ldw	r5,64(sp)
  e50b44:	20c9883a 	add	r4,r4,r3
  e50b48:	0080bfc4 	movi	r2,767
  e50b4c:	29400104 	addi	r5,r5,4
  e50b50:	d9401015 	stw	r5,64(sp)
  e50b54:	d9000515 	stw	r4,20(sp)
  e50b58:	117f710e 	bge	r2,r5,e50920 <drawFrame+0x1d0>
			//gets the color we give it and sets the pixel at the i j position to that color
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, j, i);
		}
	}

}
  e50b5c:	dfc01d17 	ldw	ra,116(sp)
  e50b60:	df001c17 	ldw	fp,112(sp)
  e50b64:	ddc01b17 	ldw	r23,108(sp)
  e50b68:	dd801a17 	ldw	r22,104(sp)
  e50b6c:	dd401917 	ldw	r21,100(sp)
  e50b70:	dd001817 	ldw	r20,96(sp)
  e50b74:	dcc01717 	ldw	r19,92(sp)
  e50b78:	dc801617 	ldw	r18,88(sp)
  e50b7c:	dc401517 	ldw	r17,84(sp)
  e50b80:	dc001417 	ldw	r16,80(sp)
  e50b84:	dec01e04 	addi	sp,sp,120
  e50b88:	f800283a 	ret
}

//makes the color for display
int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  e50b8c:	015efbc4 	movi	r5,31727
  e50b90:	003fcf06 	br	e50ad0 <drawFrame+0x380>

		//makes sure only CPU 3 is doing this function
		//this is why we have one slow CPU since it has to calculate all the following code
		if (cpu == 3) {
			//			if ((oldResult < maxIter) && (oldResult > 31)) {
			if (result > (maxIter - 2)) {
  e50b94:	00801884 	movi	r2,98
  e50b98:	15ffbc0e 	bge	r2,r23,e50a8c <drawFrame+0x33c>

				//the bounding conditions use these to tune where you will be zooming in at
				//remember this is in fixed point to get back to normal floating point divide by 2^26
				if ((x > 60818) && (y > 0)) {
  e50b9c:	00bb6494 	movui	r2,60818
  e50ba0:	15bfba0e 	bge	r2,r22,e50a8c <drawFrame+0x33c>
  e50ba4:	057fb90e 	bge	zero,r21,e50a8c <drawFrame+0x33c>
					if ((x < 2531832) && (y < 61548816)) {
  e50ba8:	008009f4 	movhi	r2,39
  e50bac:	10a87dc4 	addi	r2,r2,-24073
  e50bb0:	15bfb616 	blt	r2,r22,e50a8c <drawFrame+0x33c>
  e50bb4:	0080eaf4 	movhi	r2,939
  e50bb8:	108a43c4 	addi	r2,r2,10511
  e50bbc:	157fb316 	blt	r2,r21,e50a8c <drawFrame+0x33c>

						//this decrements the flag so the function will not run if it is not needed
						//as in we have already found a good point for the next frame to zoom in on
						*recalculateTargetFlag = *recalculateTargetFlag - 1;

						printf("point iteration number: %d old iteration: %d \n", result, oldResult);
  e50bc0:	d9800e17 	ldw	r6,56(sp)
				if ((x > 60818) && (y > 0)) {
					if ((x < 2531832) && (y < 61548816)) {

						//setting the master point that all the other CPU's will zoom in on
						targetArrayXYMaster[0] = x;
						targetArrayXYMaster[1] = y;
  e50bc4:	d0a00004 	addi	r2,gp,-32768

						//this decrements the flag so the function will not run if it is not needed
						//as in we have already found a good point for the next frame to zoom in on
						*recalculateTargetFlag = *recalculateTargetFlag - 1;

						printf("point iteration number: %d old iteration: %d \n", result, oldResult);
  e50bc8:	b80b883a 	mov	r5,r23
  e50bcc:	010039b4 	movhi	r4,230
  e50bd0:	21046c04 	addi	r4,r4,4528
				if ((x > 60818) && (y > 0)) {
					if ((x < 2531832) && (y < 61548816)) {

						//setting the master point that all the other CPU's will zoom in on
						targetArrayXYMaster[0] = x;
						targetArrayXYMaster[1] = y;
  e50bd4:	15400115 	stw	r21,4(r2)
				//remember this is in fixed point to get back to normal floating point divide by 2^26
				if ((x > 60818) && (y > 0)) {
					if ((x < 2531832) && (y < 61548816)) {

						//setting the master point that all the other CPU's will zoom in on
						targetArrayXYMaster[0] = x;
  e50bd8:	d5a00015 	stw	r22,-32768(gp)

						//this decrements the flag so the function will not run if it is not needed
						//as in we have already found a good point for the next frame to zoom in on
						*recalculateTargetFlag = *recalculateTargetFlag - 1;

						printf("point iteration number: %d old iteration: %d \n", result, oldResult);
  e50bdc:	0e53c5c0 	call	e53c5c <printf>
						targetArrayXYMaster[0] = x;
						targetArrayXYMaster[1] = y;

						//this decrements the flag so the function will not run if it is not needed
						//as in we have already found a good point for the next frame to zoom in on
						*recalculateTargetFlag = *recalculateTargetFlag - 1;
  e50be0:	d8800c17 	ldw	r2,48(sp)

						printf("point iteration number: %d old iteration: %d \n", result, oldResult);
						printf("X, Y: %ld, %ld\n", x, y);
  e50be4:	b00b883a 	mov	r5,r22
  e50be8:	a80d883a 	mov	r6,r21
  e50bec:	010039b4 	movhi	r4,230
  e50bf0:	21047804 	addi	r4,r4,4576
						targetArrayXYMaster[0] = x;
						targetArrayXYMaster[1] = y;

						//this decrements the flag so the function will not run if it is not needed
						//as in we have already found a good point for the next frame to zoom in on
						*recalculateTargetFlag = *recalculateTargetFlag - 1;
  e50bf4:	10bfffc4 	addi	r2,r2,-1
  e50bf8:	d8800c15 	stw	r2,48(sp)

						printf("point iteration number: %d old iteration: %d \n", result, oldResult);
						printf("X, Y: %ld, %ld\n", x, y);
  e50bfc:	0e53c5c0 	call	e53c5c <printf>
  e50c00:	003fa206 	br	e50a8c <drawFrame+0x33c>

00e50c04 <main>:
#define key1 6
#define key0 7

#define FIXED_POINT

int main() {
  e50c04:	defffd04 	addi	sp,sp,-12

	barrier(0);
  e50c08:	0009883a 	mov	r4,zero
#define key1 6
#define key0 7

#define FIXED_POINT

int main() {
  e50c0c:	dfc00215 	stw	ra,8(sp)
  e50c10:	dc400115 	stw	r17,4(sp)
  e50c14:	dc000015 	stw	r16,0(sp)

	barrier(0);
  e50c18:	0e505600 	call	e50560 <barrier>
	setup();
  e50c1c:	0e5070c0 	call	e5070c <setup>

	printf("Program running (UART)...\n");
  e50c20:	010039b4 	movhi	r4,230
  e50c24:	21048804 	addi	r4,r4,4640
  e50c28:	0e53d740 	call	e53d74 <puts>

	//how to reset the interrupt vector
	//the following will show you the number to put in SOPC video DMA controller
	//reset address: 0090FFE4
	//default buffer start address: 0x01880000
	printf("ADDRESS: %08X \n", myPixelBuffer->back_buffer_start_address);
  e50c2c:	d0a71417 	ldw	r2,-25520(gp)
  e50c30:	010039b4 	movhi	r4,230
  e50c34:	21048f04 	addi	r4,r4,4668
  e50c38:	11400c17 	ldw	r5,48(r2)
  e50c3c:	0e53c5c0 	call	e53c5c <printf>
	int cpu = __builtin_rdctl(5);
  e50c40:	000b317a 	rdctl	r5,cpuid
	printf("cpu %d \n", cpu);
  e50c44:	010039b4 	movhi	r4,230
  e50c48:	21049304 	addi	r4,r4,4684
  e50c4c:	0e53c5c0 	call	e53c5c <printf>
  e50c50:	04401944 	movi	r17,101
  e50c54:	0021883a 	mov	r16,zero
	while (1) {

		int zoom;
		for (zoom = 0; zoom <= 100; zoom++) {

			printf("zoom: %d\n", zoom);
  e50c58:	800b883a 	mov	r5,r16
  e50c5c:	010039b4 	movhi	r4,230
  e50c60:	21049604 	addi	r4,r4,4696
  e50c64:	0e53c5c0 	call	e53c5c <printf>

			//startTimer();
			clearScreen();
  e50c68:	0e505540 	call	e50554 <clearScreen>

			drawFrame(zoom);
  e50c6c:	8009883a 	mov	r4,r16
  e50c70:	0e507500 	call	e50750 <drawFrame>
	//unsigned long long cycles = 0;
	//the main program loop
	while (1) {

		int zoom;
		for (zoom = 0; zoom <= 100; zoom++) {
  e50c74:	84000044 	addi	r16,r16,1
			clearScreen();

			drawFrame(zoom);

			//printf("before barrier %d \n", zoom);
			barrier(0);
  e50c78:	0009883a 	mov	r4,zero
  e50c7c:	0e505600 	call	e50560 <barrier>
	//unsigned long long cycles = 0;
	//the main program loop
	while (1) {

		int zoom;
		for (zoom = 0; zoom <= 100; zoom++) {
  e50c80:	847ff51e 	bne	r16,r17,e50c58 <main+0x54>
  e50c84:	003ff306 	br	e50c54 <main+0x50>

00e50c88 <powf>:
  e50c88:	defff104 	addi	sp,sp,-60
  e50c8c:	dd000d15 	stw	r20,52(sp)
  e50c90:	dcc00c15 	stw	r19,48(sp)
  e50c94:	dc800b15 	stw	r18,44(sp)
  e50c98:	dc400a15 	stw	r17,40(sp)
  e50c9c:	dc000915 	stw	r16,36(sp)
  e50ca0:	dfc00e15 	stw	ra,56(sp)
  e50ca4:	050039b4 	movhi	r20,230
  e50ca8:	a50c9a04 	addi	r20,r20,12904
  e50cac:	2027883a 	mov	r19,r4
  e50cb0:	2825883a 	mov	r18,r5
  e50cb4:	0e510e00 	call	e510e0 <__ieee754_powf>
  e50cb8:	1021883a 	mov	r16,r2
  e50cbc:	a0800017 	ldw	r2,0(r20)
  e50cc0:	047fffc4 	movi	r17,-1
  e50cc4:	14400326 	beq	r2,r17,e50cd4 <powf+0x4c>
  e50cc8:	9009883a 	mov	r4,r18
  e50ccc:	0e51fa40 	call	e51fa4 <isnanf>
  e50cd0:	10000926 	beq	r2,zero,e50cf8 <powf+0x70>
  e50cd4:	8005883a 	mov	r2,r16
  e50cd8:	dfc00e17 	ldw	ra,56(sp)
  e50cdc:	dd000d17 	ldw	r20,52(sp)
  e50ce0:	dcc00c17 	ldw	r19,48(sp)
  e50ce4:	dc800b17 	ldw	r18,44(sp)
  e50ce8:	dc400a17 	ldw	r17,40(sp)
  e50cec:	dc000917 	ldw	r16,36(sp)
  e50cf0:	dec00f04 	addi	sp,sp,60
  e50cf4:	f800283a 	ret
  e50cf8:	9809883a 	mov	r4,r19
  e50cfc:	0e51fa40 	call	e51fa4 <isnanf>
  e50d00:	1000151e 	bne	r2,zero,e50d58 <powf+0xd0>
  e50d04:	9809883a 	mov	r4,r19
  e50d08:	000b883a 	mov	r5,zero
  e50d0c:	0e527cc0 	call	e527cc <__eqsf2>
  e50d10:	10005a1e 	bne	r2,zero,e50e7c <powf+0x1f4>
  e50d14:	9009883a 	mov	r4,r18
  e50d18:	000b883a 	mov	r5,zero
  e50d1c:	0e527cc0 	call	e527cc <__eqsf2>
  e50d20:	1000331e 	bne	r2,zero,e50df0 <powf+0x168>
  e50d24:	a0800017 	ldw	r2,0(r20)
  e50d28:	d8000615 	stw	zero,24(sp)
  e50d2c:	d8000715 	stw	zero,28(sp)
  e50d30:	10001426 	beq	r2,zero,e50d84 <powf+0xfc>
  e50d34:	008ffc34 	movhi	r2,16368
  e50d38:	d8800715 	stw	r2,28(sp)
  e50d3c:	d8800617 	ldw	r2,24(sp)
  e50d40:	d8c00717 	ldw	r3,28(sp)
  e50d44:	1009883a 	mov	r4,r2
  e50d48:	180b883a 	mov	r5,r3
  e50d4c:	0e533480 	call	e53348 <__truncdfsf2>
  e50d50:	1021883a 	mov	r16,r2
  e50d54:	003fdf06 	br	e50cd4 <powf+0x4c>
  e50d58:	9009883a 	mov	r4,r18
  e50d5c:	000b883a 	mov	r5,zero
  e50d60:	0e527cc0 	call	e527cc <__eqsf2>
  e50d64:	103fdb1e 	bne	r2,zero,e50cd4 <powf+0x4c>
  e50d68:	a0c00017 	ldw	r3,0(r20)
  e50d6c:	010ffc34 	movhi	r4,16368
  e50d70:	d8000615 	stw	zero,24(sp)
  e50d74:	d9000715 	stw	r4,28(sp)
  e50d78:	1c401a26 	beq	r3,r17,e50de4 <powf+0x15c>
  e50d7c:	00800084 	movi	r2,2
  e50d80:	18801826 	beq	r3,r2,e50de4 <powf+0x15c>
  e50d84:	9009883a 	mov	r4,r18
  e50d88:	0e52ad80 	call	e52ad8 <__extendsfdf2>
  e50d8c:	9809883a 	mov	r4,r19
  e50d90:	d8c00515 	stw	r3,20(sp)
  e50d94:	d8800415 	stw	r2,16(sp)
  e50d98:	0e52ad80 	call	e52ad8 <__extendsfdf2>
  e50d9c:	100b883a 	mov	r5,r2
  e50da0:	d8c00315 	stw	r3,12(sp)
  e50da4:	008039b4 	movhi	r2,230
  e50da8:	10849904 	addi	r2,r2,4708
  e50dac:	00c00044 	movi	r3,1
  e50db0:	d809883a 	mov	r4,sp
  e50db4:	d8800115 	stw	r2,4(sp)
  e50db8:	d8c00015 	stw	r3,0(sp)
  e50dbc:	d9400215 	stw	r5,8(sp)
  e50dc0:	d8000815 	stw	zero,32(sp)
  e50dc4:	0e51d600 	call	e51d60 <matherr>
  e50dc8:	10002826 	beq	r2,zero,e50e6c <powf+0x1e4>
  e50dcc:	d8800817 	ldw	r2,32(sp)
  e50dd0:	103fda26 	beq	r2,zero,e50d3c <powf+0xb4>
  e50dd4:	0e53c4c0 	call	e53c4c <__errno>
  e50dd8:	d8c00817 	ldw	r3,32(sp)
  e50ddc:	10c00015 	stw	r3,0(r2)
  e50de0:	003fd606 	br	e50d3c <powf+0xb4>
  e50de4:	d9000715 	stw	r4,28(sp)
  e50de8:	d8000615 	stw	zero,24(sp)
  e50dec:	003fd306 	br	e50d3c <powf+0xb4>
  e50df0:	9009883a 	mov	r4,r18
  e50df4:	0e51f880 	call	e51f88 <finitef>
  e50df8:	103fb626 	beq	r2,zero,e50cd4 <powf+0x4c>
  e50dfc:	9009883a 	mov	r4,r18
  e50e00:	000b883a 	mov	r5,zero
  e50e04:	0e528bc0 	call	e528bc <__ltsf2>
  e50e08:	103fb20e 	bge	r2,zero,e50cd4 <powf+0x4c>
  e50e0c:	9809883a 	mov	r4,r19
  e50e10:	00800044 	movi	r2,1
  e50e14:	00c039b4 	movhi	r3,230
  e50e18:	18c49904 	addi	r3,r3,4708
  e50e1c:	d8800015 	stw	r2,0(sp)
  e50e20:	d8c00115 	stw	r3,4(sp)
  e50e24:	d8000815 	stw	zero,32(sp)
  e50e28:	0e52ad80 	call	e52ad8 <__extendsfdf2>
  e50e2c:	9009883a 	mov	r4,r18
  e50e30:	d8c00315 	stw	r3,12(sp)
  e50e34:	d8800215 	stw	r2,8(sp)
  e50e38:	0e52ad80 	call	e52ad8 <__extendsfdf2>
  e50e3c:	a1800017 	ldw	r6,0(r20)
  e50e40:	d8c00515 	stw	r3,20(sp)
  e50e44:	d8800415 	stw	r2,16(sp)
  e50e48:	30005626 	beq	r6,zero,e50fa4 <powf+0x31c>
  e50e4c:	00bffc34 	movhi	r2,65520
  e50e50:	d8800715 	stw	r2,28(sp)
  e50e54:	00800084 	movi	r2,2
  e50e58:	d8000615 	stw	zero,24(sp)
  e50e5c:	30800326 	beq	r6,r2,e50e6c <powf+0x1e4>
  e50e60:	d809883a 	mov	r4,sp
  e50e64:	0e51d600 	call	e51d60 <matherr>
  e50e68:	103fd81e 	bne	r2,zero,e50dcc <powf+0x144>
  e50e6c:	0e53c4c0 	call	e53c4c <__errno>
  e50e70:	00c00844 	movi	r3,33
  e50e74:	10c00015 	stw	r3,0(r2)
  e50e78:	003fd406 	br	e50dcc <powf+0x144>
  e50e7c:	8009883a 	mov	r4,r16
  e50e80:	0e51f880 	call	e51f88 <finitef>
  e50e84:	10002426 	beq	r2,zero,e50f18 <powf+0x290>
  e50e88:	8009883a 	mov	r4,r16
  e50e8c:	000b883a 	mov	r5,zero
  e50e90:	0e527cc0 	call	e527cc <__eqsf2>
  e50e94:	103f8f1e 	bne	r2,zero,e50cd4 <powf+0x4c>
  e50e98:	9809883a 	mov	r4,r19
  e50e9c:	0e51f880 	call	e51f88 <finitef>
  e50ea0:	103f8c26 	beq	r2,zero,e50cd4 <powf+0x4c>
  e50ea4:	9009883a 	mov	r4,r18
  e50ea8:	0e51f880 	call	e51f88 <finitef>
  e50eac:	103f8926 	beq	r2,zero,e50cd4 <powf+0x4c>
  e50eb0:	9809883a 	mov	r4,r19
  e50eb4:	00800104 	movi	r2,4
  e50eb8:	00c039b4 	movhi	r3,230
  e50ebc:	18c49904 	addi	r3,r3,4708
  e50ec0:	d8800015 	stw	r2,0(sp)
  e50ec4:	d8c00115 	stw	r3,4(sp)
  e50ec8:	d8000815 	stw	zero,32(sp)
  e50ecc:	0e52ad80 	call	e52ad8 <__extendsfdf2>
  e50ed0:	9009883a 	mov	r4,r18
  e50ed4:	d8c00315 	stw	r3,12(sp)
  e50ed8:	d8800215 	stw	r2,8(sp)
  e50edc:	0e52ad80 	call	e52ad8 <__extendsfdf2>
  e50ee0:	a1800017 	ldw	r6,0(r20)
  e50ee4:	d8800415 	stw	r2,16(sp)
  e50ee8:	00800084 	movi	r2,2
  e50eec:	d8c00515 	stw	r3,20(sp)
  e50ef0:	d8000615 	stw	zero,24(sp)
  e50ef4:	d8000715 	stw	zero,28(sp)
  e50ef8:	30800326 	beq	r6,r2,e50f08 <powf+0x280>
  e50efc:	d809883a 	mov	r4,sp
  e50f00:	0e51d600 	call	e51d60 <matherr>
  e50f04:	103fb11e 	bne	r2,zero,e50dcc <powf+0x144>
  e50f08:	0e53c4c0 	call	e53c4c <__errno>
  e50f0c:	00c00884 	movi	r3,34
  e50f10:	10c00015 	stw	r3,0(r2)
  e50f14:	003fad06 	br	e50dcc <powf+0x144>
  e50f18:	9809883a 	mov	r4,r19
  e50f1c:	0e51f880 	call	e51f88 <finitef>
  e50f20:	103fd926 	beq	r2,zero,e50e88 <powf+0x200>
  e50f24:	9009883a 	mov	r4,r18
  e50f28:	0e51f880 	call	e51f88 <finitef>
  e50f2c:	103fd626 	beq	r2,zero,e50e88 <powf+0x200>
  e50f30:	8009883a 	mov	r4,r16
  e50f34:	0e51fa40 	call	e51fa4 <isnanf>
  e50f38:	10001d26 	beq	r2,zero,e50fb0 <powf+0x328>
  e50f3c:	9809883a 	mov	r4,r19
  e50f40:	00800044 	movi	r2,1
  e50f44:	00c039b4 	movhi	r3,230
  e50f48:	18c49904 	addi	r3,r3,4708
  e50f4c:	d8800015 	stw	r2,0(sp)
  e50f50:	d8c00115 	stw	r3,4(sp)
  e50f54:	d8000815 	stw	zero,32(sp)
  e50f58:	0e52ad80 	call	e52ad8 <__extendsfdf2>
  e50f5c:	9009883a 	mov	r4,r18
  e50f60:	d8c00315 	stw	r3,12(sp)
  e50f64:	d8800215 	stw	r2,8(sp)
  e50f68:	0e52ad80 	call	e52ad8 <__extendsfdf2>
  e50f6c:	a4000017 	ldw	r16,0(r20)
  e50f70:	d8c00515 	stw	r3,20(sp)
  e50f74:	d8800415 	stw	r2,16(sp)
  e50f78:	80000a26 	beq	r16,zero,e50fa4 <powf+0x31c>
  e50f7c:	0009883a 	mov	r4,zero
  e50f80:	000d883a 	mov	r6,zero
  e50f84:	000b883a 	mov	r5,zero
  e50f88:	000f883a 	mov	r7,zero
  e50f8c:	0e530300 	call	e53030 <__divdf3>
  e50f90:	d8800615 	stw	r2,24(sp)
  e50f94:	00800084 	movi	r2,2
  e50f98:	d8c00715 	stw	r3,28(sp)
  e50f9c:	80bfb01e 	bne	r16,r2,e50e60 <powf+0x1d8>
  e50fa0:	003fb206 	br	e50e6c <powf+0x1e4>
  e50fa4:	d8000615 	stw	zero,24(sp)
  e50fa8:	d8000715 	stw	zero,28(sp)
  e50fac:	003fac06 	br	e50e60 <powf+0x1d8>
  e50fb0:	9809883a 	mov	r4,r19
  e50fb4:	008000c4 	movi	r2,3
  e50fb8:	00c039b4 	movhi	r3,230
  e50fbc:	18c49904 	addi	r3,r3,4708
  e50fc0:	d8800015 	stw	r2,0(sp)
  e50fc4:	d8c00115 	stw	r3,4(sp)
  e50fc8:	d8000815 	stw	zero,32(sp)
  e50fcc:	0e52ad80 	call	e52ad8 <__extendsfdf2>
  e50fd0:	9009883a 	mov	r4,r18
  e50fd4:	d8c00315 	stw	r3,12(sp)
  e50fd8:	d8800215 	stw	r2,8(sp)
  e50fdc:	0e52ad80 	call	e52ad8 <__extendsfdf2>
  e50fe0:	a1800017 	ldw	r6,0(r20)
  e50fe4:	d8c00515 	stw	r3,20(sp)
  e50fe8:	d8800415 	stw	r2,16(sp)
  e50fec:	3000211e 	bne	r6,zero,e51074 <powf+0x3ec>
  e50ff0:	9809883a 	mov	r4,r19
  e50ff4:	0091fc34 	movhi	r2,18416
  e50ff8:	10bfffc4 	addi	r2,r2,-1
  e50ffc:	04f80034 	movhi	r19,57344
  e51000:	000b883a 	mov	r5,zero
  e51004:	d8800715 	stw	r2,28(sp)
  e51008:	dcc00615 	stw	r19,24(sp)
  e5100c:	0e528bc0 	call	e528bc <__ltsf2>
  e51010:	103fba0e 	bge	r2,zero,e50efc <powf+0x274>
  e51014:	014fc034 	movhi	r5,16128
  e51018:	9009883a 	mov	r4,r18
  e5101c:	0e524780 	call	e52478 <__mulsf3>
  e51020:	1009883a 	mov	r4,r2
  e51024:	0e52ad80 	call	e52ad8 <__extendsfdf2>
  e51028:	1009883a 	mov	r4,r2
  e5102c:	180b883a 	mov	r5,r3
  e51030:	1021883a 	mov	r16,r2
  e51034:	1823883a 	mov	r17,r3
  e51038:	0e51d680 	call	e51d68 <rint>
  e5103c:	180f883a 	mov	r7,r3
  e51040:	880b883a 	mov	r5,r17
  e51044:	8009883a 	mov	r4,r16
  e51048:	100d883a 	mov	r6,r2
  e5104c:	0e532880 	call	e53288 <__nedf2>
  e51050:	10000426 	beq	r2,zero,e51064 <powf+0x3dc>
  e51054:	00b1fc34 	movhi	r2,51184
  e51058:	10bfffc4 	addi	r2,r2,-1
  e5105c:	dcc00615 	stw	r19,24(sp)
  e51060:	d8800715 	stw	r2,28(sp)
  e51064:	a0c00017 	ldw	r3,0(r20)
  e51068:	00800084 	movi	r2,2
  e5106c:	18bfa31e 	bne	r3,r2,e50efc <powf+0x274>
  e51070:	003fa506 	br	e50f08 <powf+0x280>
  e51074:	009ffc34 	movhi	r2,32752
  e51078:	9809883a 	mov	r4,r19
  e5107c:	000b883a 	mov	r5,zero
  e51080:	d8800715 	stw	r2,28(sp)
  e51084:	d8000615 	stw	zero,24(sp)
  e51088:	0e528bc0 	call	e528bc <__ltsf2>
  e5108c:	103ff50e 	bge	r2,zero,e51064 <powf+0x3dc>
  e51090:	014fc034 	movhi	r5,16128
  e51094:	9009883a 	mov	r4,r18
  e51098:	0e524780 	call	e52478 <__mulsf3>
  e5109c:	1009883a 	mov	r4,r2
  e510a0:	0e52ad80 	call	e52ad8 <__extendsfdf2>
  e510a4:	1009883a 	mov	r4,r2
  e510a8:	180b883a 	mov	r5,r3
  e510ac:	1021883a 	mov	r16,r2
  e510b0:	1823883a 	mov	r17,r3
  e510b4:	0e51d680 	call	e51d68 <rint>
  e510b8:	180f883a 	mov	r7,r3
  e510bc:	880b883a 	mov	r5,r17
  e510c0:	8009883a 	mov	r4,r16
  e510c4:	100d883a 	mov	r6,r2
  e510c8:	0e532880 	call	e53288 <__nedf2>
  e510cc:	103fe526 	beq	r2,zero,e51064 <powf+0x3dc>
  e510d0:	00bffc34 	movhi	r2,65520
  e510d4:	d8800715 	stw	r2,28(sp)
  e510d8:	d8000615 	stw	zero,24(sp)
  e510dc:	003fe106 	br	e51064 <powf+0x3dc>

00e510e0 <__ieee754_powf>:
  e510e0:	defff004 	addi	sp,sp,-64
  e510e4:	00a00034 	movhi	r2,32768
  e510e8:	10bfffc4 	addi	r2,r2,-1
  e510ec:	dc000615 	stw	r16,24(sp)
  e510f0:	28a0703a 	and	r16,r5,r2
  e510f4:	df000e15 	stw	fp,56(sp)
  e510f8:	dcc00915 	stw	r19,36(sp)
  e510fc:	dc800815 	stw	r18,32(sp)
  e51100:	2027883a 	mov	r19,r4
  e51104:	dfc00f15 	stw	ra,60(sp)
  e51108:	ddc00d15 	stw	r23,52(sp)
  e5110c:	dd800c15 	stw	r22,48(sp)
  e51110:	dd400b15 	stw	r21,44(sp)
  e51114:	dd000a15 	stw	r20,40(sp)
  e51118:	dc400715 	stw	r17,28(sp)
  e5111c:	2839883a 	mov	fp,r5
  e51120:	2825883a 	mov	r18,r5
  e51124:	2809883a 	mov	r4,r5
  e51128:	80003526 	beq	r16,zero,e51200 <__ieee754_powf+0x120>
  e5112c:	98a2703a 	and	r17,r19,r2
  e51130:	009fe034 	movhi	r2,32640
  e51134:	9829883a 	mov	r20,r19
  e51138:	1440100e 	bge	r2,r17,e5117c <__ieee754_powf+0x9c>
  e5113c:	008fe034 	movhi	r2,16256
  e51140:	88803d26 	beq	r17,r2,e51238 <__ieee754_powf+0x158>
  e51144:	010039b4 	movhi	r4,230
  e51148:	21046b04 	addi	r4,r4,4524
  e5114c:	dfc00f17 	ldw	ra,60(sp)
  e51150:	df000e17 	ldw	fp,56(sp)
  e51154:	ddc00d17 	ldw	r23,52(sp)
  e51158:	dd800c17 	ldw	r22,48(sp)
  e5115c:	dd400b17 	ldw	r21,44(sp)
  e51160:	dd000a17 	ldw	r20,40(sp)
  e51164:	dcc00917 	ldw	r19,36(sp)
  e51168:	dc800817 	ldw	r18,32(sp)
  e5116c:	dc400717 	ldw	r17,28(sp)
  e51170:	dc000617 	ldw	r16,24(sp)
  e51174:	dec01004 	addi	sp,sp,64
  e51178:	0e51fbc1 	jmpi	e51fbc <nanf>
  e5117c:	143fef16 	blt	r2,r16,e5113c <__ieee754_powf+0x5c>
  e51180:	982a403a 	cmpge	r21,r19,zero
  e51184:	a8004526 	beq	r21,zero,e5129c <__ieee754_powf+0x1bc>
  e51188:	002f883a 	mov	r23,zero
  e5118c:	009fe034 	movhi	r2,32640
  e51190:	80803926 	beq	r16,r2,e51278 <__ieee754_powf+0x198>
  e51194:	008fe034 	movhi	r2,16256
  e51198:	80803d26 	beq	r16,r2,e51290 <__ieee754_powf+0x1b0>
  e5119c:	00900034 	movhi	r2,16384
  e511a0:	20805326 	beq	r4,r2,e512f0 <__ieee754_powf+0x210>
  e511a4:	008fc034 	movhi	r2,16128
  e511a8:	20802526 	beq	r4,r2,e51240 <__ieee754_powf+0x160>
  e511ac:	9809883a 	mov	r4,r19
  e511b0:	0e51f780 	call	e51f78 <fabsf>
  e511b4:	1009883a 	mov	r4,r2
  e511b8:	009fe034 	movhi	r2,32640
  e511bc:	88803c26 	beq	r17,r2,e512b0 <__ieee754_powf+0x1d0>
  e511c0:	88003b26 	beq	r17,zero,e512b0 <__ieee754_powf+0x1d0>
  e511c4:	014fe034 	movhi	r5,16256
  e511c8:	89403926 	beq	r17,r5,e512b0 <__ieee754_powf+0x1d0>
  e511cc:	a004d7fa 	srli	r2,r20,31
  e511d0:	10bfffc4 	addi	r2,r2,-1
  e511d4:	15c6b03a 	or	r3,r2,r23
  e511d8:	d8800215 	stw	r2,8(sp)
  e511dc:	1800661e 	bne	r3,zero,e51378 <__ieee754_powf+0x298>
  e511e0:	980b883a 	mov	r5,r19
  e511e4:	9809883a 	mov	r4,r19
  e511e8:	0e523a40 	call	e523a4 <__subsf3>
  e511ec:	1009883a 	mov	r4,r2
  e511f0:	100b883a 	mov	r5,r2
  e511f4:	0e526580 	call	e52658 <__divsf3>
  e511f8:	1039883a 	mov	fp,r2
  e511fc:	00000106 	br	e51204 <__ieee754_powf+0x124>
  e51200:	070fe034 	movhi	fp,16256
  e51204:	e005883a 	mov	r2,fp
  e51208:	dfc00f17 	ldw	ra,60(sp)
  e5120c:	df000e17 	ldw	fp,56(sp)
  e51210:	ddc00d17 	ldw	r23,52(sp)
  e51214:	dd800c17 	ldw	r22,48(sp)
  e51218:	dd400b17 	ldw	r21,44(sp)
  e5121c:	dd000a17 	ldw	r20,40(sp)
  e51220:	dcc00917 	ldw	r19,36(sp)
  e51224:	dc800817 	ldw	r18,32(sp)
  e51228:	dc400717 	ldw	r17,28(sp)
  e5122c:	dc000617 	ldw	r16,24(sp)
  e51230:	dec01004 	addi	sp,sp,64
  e51234:	f800283a 	ret
  e51238:	8839883a 	mov	fp,r17
  e5123c:	003ff106 	br	e51204 <__ieee754_powf+0x124>
  e51240:	a03fda16 	blt	r20,zero,e511ac <__ieee754_powf+0xcc>
  e51244:	9809883a 	mov	r4,r19
  e51248:	dfc00f17 	ldw	ra,60(sp)
  e5124c:	df000e17 	ldw	fp,56(sp)
  e51250:	ddc00d17 	ldw	r23,52(sp)
  e51254:	dd800c17 	ldw	r22,48(sp)
  e51258:	dd400b17 	ldw	r21,44(sp)
  e5125c:	dd000a17 	ldw	r20,40(sp)
  e51260:	dcc00917 	ldw	r19,36(sp)
  e51264:	dc800817 	ldw	r18,32(sp)
  e51268:	dc400717 	ldw	r17,28(sp)
  e5126c:	dc000617 	ldw	r16,24(sp)
  e51270:	dec01004 	addi	sp,sp,64
  e51274:	0e51bf41 	jmpi	e51bf4 <__ieee754_sqrtf>
  e51278:	008fe034 	movhi	r2,16256
  e5127c:	88bfee26 	beq	r17,r2,e51238 <__ieee754_powf+0x158>
  e51280:	1440200e 	bge	r2,r17,e51304 <__ieee754_powf+0x224>
  e51284:	903fdf0e 	bge	r18,zero,e51204 <__ieee754_powf+0x124>
  e51288:	0039883a 	mov	fp,zero
  e5128c:	003fdd06 	br	e51204 <__ieee754_powf+0x124>
  e51290:	90002f16 	blt	r18,zero,e51350 <__ieee754_powf+0x270>
  e51294:	9839883a 	mov	fp,r19
  e51298:	003fda06 	br	e51204 <__ieee754_powf+0x124>
  e5129c:	0092e034 	movhi	r2,19328
  e512a0:	10bfffc4 	addi	r2,r2,-1
  e512a4:	14001b0e 	bge	r2,r16,e51314 <__ieee754_powf+0x234>
  e512a8:	05c00084 	movi	r23,2
  e512ac:	003fb706 	br	e5118c <__ieee754_powf+0xac>
  e512b0:	90000916 	blt	r18,zero,e512d8 <__ieee754_powf+0x1f8>
  e512b4:	a8000226 	beq	r21,zero,e512c0 <__ieee754_powf+0x1e0>
  e512b8:	2039883a 	mov	fp,r4
  e512bc:	003fd106 	br	e51204 <__ieee754_powf+0x124>
  e512c0:	00b02034 	movhi	r2,49280
  e512c4:	8885883a 	add	r2,r17,r2
  e512c8:	b884b03a 	or	r2,r23,r2
  e512cc:	1000251e 	bne	r2,zero,e51364 <__ieee754_powf+0x284>
  e512d0:	200b883a 	mov	r5,r4
  e512d4:	003fc406 	br	e511e8 <__ieee754_powf+0x108>
  e512d8:	200b883a 	mov	r5,r4
  e512dc:	010fe034 	movhi	r4,16256
  e512e0:	0e526580 	call	e52658 <__divsf3>
  e512e4:	1009883a 	mov	r4,r2
  e512e8:	a83ff31e 	bne	r21,zero,e512b8 <__ieee754_powf+0x1d8>
  e512ec:	003ff406 	br	e512c0 <__ieee754_powf+0x1e0>
  e512f0:	980b883a 	mov	r5,r19
  e512f4:	9809883a 	mov	r4,r19
  e512f8:	0e524780 	call	e52478 <__mulsf3>
  e512fc:	1039883a 	mov	fp,r2
  e51300:	003fc006 	br	e51204 <__ieee754_powf+0x124>
  e51304:	903fe00e 	bge	r18,zero,e51288 <__ieee754_powf+0x1a8>
  e51308:	e0a0003c 	xorhi	r2,fp,32768
  e5130c:	1039883a 	mov	fp,r2
  e51310:	003fbc06 	br	e51204 <__ieee754_powf+0x124>
  e51314:	008fe034 	movhi	r2,16256
  e51318:	10bfffc4 	addi	r2,r2,-1
  e5131c:	1400060e 	bge	r2,r16,e51338 <__ieee754_powf+0x258>
  e51320:	8007d5fa 	srai	r3,r16,23
  e51324:	00802584 	movi	r2,150
  e51328:	10c5c83a 	sub	r2,r2,r3
  e5132c:	8087d83a 	sra	r3,r16,r2
  e51330:	1884983a 	sll	r2,r3,r2
  e51334:	80800226 	beq	r16,r2,e51340 <__ieee754_powf+0x260>
  e51338:	002f883a 	mov	r23,zero
  e5133c:	003f9506 	br	e51194 <__ieee754_powf+0xb4>
  e51340:	18c0004c 	andi	r3,r3,1
  e51344:	00800084 	movi	r2,2
  e51348:	10efc83a 	sub	r23,r2,r3
  e5134c:	003f9106 	br	e51194 <__ieee754_powf+0xb4>
  e51350:	8009883a 	mov	r4,r16
  e51354:	980b883a 	mov	r5,r19
  e51358:	0e526580 	call	e52658 <__divsf3>
  e5135c:	1039883a 	mov	fp,r2
  e51360:	003fa806 	br	e51204 <__ieee754_powf+0x124>
  e51364:	00800044 	movi	r2,1
  e51368:	b8bfd31e 	bne	r23,r2,e512b8 <__ieee754_powf+0x1d8>
  e5136c:	20a0003c 	xorhi	r2,r4,32768
  e51370:	1039883a 	mov	fp,r2
  e51374:	003fa306 	br	e51204 <__ieee754_powf+0x124>
  e51378:	00934034 	movhi	r2,19712
  e5137c:	14000a0e 	bge	r2,r16,e513a8 <__ieee754_powf+0x2c8>
  e51380:	008fe034 	movhi	r2,16256
  e51384:	10bffdc4 	addi	r2,r2,-9
  e51388:	1441b016 	blt	r2,r17,e51a4c <__ieee754_powf+0x96c>
  e5138c:	903fbe0e 	bge	r18,zero,e51288 <__ieee754_powf+0x1a8>
  e51390:	011c52b4 	movhi	r4,29002
  e51394:	213cb284 	addi	r4,r4,-3382
  e51398:	200b883a 	mov	r5,r4
  e5139c:	0e524780 	call	e52478 <__mulsf3>
  e513a0:	1039883a 	mov	fp,r2
  e513a4:	003f9706 	br	e51204 <__ieee754_powf+0x124>
  e513a8:	00802034 	movhi	r2,128
  e513ac:	10bfffc4 	addi	r2,r2,-1
  e513b0:	1441a10e 	bge	r2,r17,e51a38 <__ieee754_powf+0x958>
  e513b4:	0009883a 	mov	r4,zero
  e513b8:	8805d5fa 	srai	r2,r17,23
  e513bc:	00c02034 	movhi	r3,128
  e513c0:	18ffffc4 	addi	r3,r3,-1
  e513c4:	88c6703a 	and	r3,r17,r3
  e513c8:	2089883a 	add	r4,r4,r2
  e513cc:	20bfe044 	addi	r2,r4,-127
  e513d0:	d8800015 	stw	r2,0(sp)
  e513d4:	00800774 	movhi	r2,29
  e513d8:	10b11c44 	addi	r2,r2,-15247
  e513dc:	1c0fe034 	orhi	r16,r3,16256
  e513e0:	10c1790e 	bge	r2,r3,e519c8 <__ieee754_powf+0x8e8>
  e513e4:	008017b4 	movhi	r2,94
  e513e8:	10acf584 	addi	r2,r2,-19498
  e513ec:	10c17216 	blt	r2,r3,e519b8 <__ieee754_powf+0x8d8>
  e513f0:	00800934 	movhi	r2,36
  e513f4:	05000044 	movi	r20,1
  e513f8:	d8800115 	stw	r2,4(sp)
  e513fc:	a529883a 	add	r20,r20,r20
  e51400:	a529883a 	add	r20,r20,r20
  e51404:	d0a00304 	addi	r2,gp,-32756
  e51408:	a085883a 	add	r2,r20,r2
  e5140c:	14800017 	ldw	r18,0(r2)
  e51410:	8009883a 	mov	r4,r16
  e51414:	8023d07a 	srai	r17,r16,1
  e51418:	900b883a 	mov	r5,r18
  e5141c:	0e523a40 	call	e523a4 <__subsf3>
  e51420:	8009883a 	mov	r4,r16
  e51424:	900b883a 	mov	r5,r18
  e51428:	1027883a 	mov	r19,r2
  e5142c:	0e524140 	call	e52414 <__addsf3>
  e51430:	100b883a 	mov	r5,r2
  e51434:	010fe034 	movhi	r4,16256
  e51438:	0e526580 	call	e52658 <__divsf3>
  e5143c:	100b883a 	mov	r5,r2
  e51440:	9809883a 	mov	r4,r19
  e51444:	102b883a 	mov	r21,r2
  e51448:	0e524780 	call	e52478 <__mulsf3>
  e5144c:	d8800315 	stw	r2,12(sp)
  e51450:	d8c00317 	ldw	r3,12(sp)
  e51454:	00bc0004 	movi	r2,-4096
  e51458:	8c480034 	orhi	r17,r17,8192
  e5145c:	10ec703a 	and	r22,r2,r3
  e51460:	d8800117 	ldw	r2,4(sp)
  e51464:	b009883a 	mov	r4,r22
  e51468:	88a3883a 	add	r17,r17,r2
  e5146c:	880b883a 	mov	r5,r17
  e51470:	0e524780 	call	e52478 <__mulsf3>
  e51474:	100b883a 	mov	r5,r2
  e51478:	9809883a 	mov	r4,r19
  e5147c:	0e523a40 	call	e523a4 <__subsf3>
  e51480:	8809883a 	mov	r4,r17
  e51484:	900b883a 	mov	r5,r18
  e51488:	1027883a 	mov	r19,r2
  e5148c:	0e523a40 	call	e523a4 <__subsf3>
  e51490:	100b883a 	mov	r5,r2
  e51494:	8009883a 	mov	r4,r16
  e51498:	0e523a40 	call	e523a4 <__subsf3>
  e5149c:	100b883a 	mov	r5,r2
  e514a0:	b009883a 	mov	r4,r22
  e514a4:	0e524780 	call	e52478 <__mulsf3>
  e514a8:	100b883a 	mov	r5,r2
  e514ac:	9809883a 	mov	r4,r19
  e514b0:	0e523a40 	call	e523a4 <__subsf3>
  e514b4:	100b883a 	mov	r5,r2
  e514b8:	a809883a 	mov	r4,r21
  e514bc:	0e524780 	call	e52478 <__mulsf3>
  e514c0:	d9000317 	ldw	r4,12(sp)
  e514c4:	d8800415 	stw	r2,16(sp)
  e514c8:	05501034 	movhi	r21,16448
  e514cc:	200b883a 	mov	r5,r4
  e514d0:	0e524780 	call	e52478 <__mulsf3>
  e514d4:	1021883a 	mov	r16,r2
  e514d8:	1009883a 	mov	r4,r2
  e514dc:	100b883a 	mov	r5,r2
  e514e0:	0e524780 	call	e52478 <__mulsf3>
  e514e4:	8009883a 	mov	r4,r16
  e514e8:	014f9534 	movhi	r5,15956
  e514ec:	297c5084 	addi	r5,r5,-3774
  e514f0:	1023883a 	mov	r17,r2
  e514f4:	0e524780 	call	e52478 <__mulsf3>
  e514f8:	1009883a 	mov	r4,r2
  e514fc:	014f9b34 	movhi	r5,15980
  e51500:	294c9544 	addi	r5,r5,12885
  e51504:	0e524140 	call	e52414 <__addsf3>
  e51508:	100b883a 	mov	r5,r2
  e5150c:	8009883a 	mov	r4,r16
  e51510:	0e524780 	call	e52478 <__mulsf3>
  e51514:	1009883a 	mov	r4,r2
  e51518:	014fa334 	movhi	r5,16012
  e5151c:	2968c144 	addi	r5,r5,-23803
  e51520:	0e524140 	call	e52414 <__addsf3>
  e51524:	100b883a 	mov	r5,r2
  e51528:	8009883a 	mov	r4,r16
  e5152c:	0e524780 	call	e52478 <__mulsf3>
  e51530:	1009883a 	mov	r4,r2
  e51534:	014faaf4 	movhi	r5,16043
  e51538:	296aaac4 	addi	r5,r5,-21845
  e5153c:	0e524140 	call	e52414 <__addsf3>
  e51540:	100b883a 	mov	r5,r2
  e51544:	8009883a 	mov	r4,r16
  e51548:	0e524780 	call	e52478 <__mulsf3>
  e5154c:	1009883a 	mov	r4,r2
  e51550:	014fb6f4 	movhi	r5,16091
  e51554:	295b6dc4 	addi	r5,r5,28087
  e51558:	0e524140 	call	e52414 <__addsf3>
  e5155c:	100b883a 	mov	r5,r2
  e51560:	8009883a 	mov	r4,r16
  e51564:	0e524780 	call	e52478 <__mulsf3>
  e51568:	1009883a 	mov	r4,r2
  e5156c:	014fc6b4 	movhi	r5,16154
  e51570:	29666684 	addi	r5,r5,-26214
  e51574:	0e524140 	call	e52414 <__addsf3>
  e51578:	100b883a 	mov	r5,r2
  e5157c:	8809883a 	mov	r4,r17
  e51580:	0e524780 	call	e52478 <__mulsf3>
  e51584:	d9000317 	ldw	r4,12(sp)
  e51588:	b00b883a 	mov	r5,r22
  e5158c:	1021883a 	mov	r16,r2
  e51590:	0e524140 	call	e52414 <__addsf3>
  e51594:	d9000417 	ldw	r4,16(sp)
  e51598:	100b883a 	mov	r5,r2
  e5159c:	0e524780 	call	e52478 <__mulsf3>
  e515a0:	100b883a 	mov	r5,r2
  e515a4:	8009883a 	mov	r4,r16
  e515a8:	0e524140 	call	e52414 <__addsf3>
  e515ac:	b009883a 	mov	r4,r22
  e515b0:	b00b883a 	mov	r5,r22
  e515b4:	1025883a 	mov	r18,r2
  e515b8:	0e524780 	call	e52478 <__mulsf3>
  e515bc:	1009883a 	mov	r4,r2
  e515c0:	a80b883a 	mov	r5,r21
  e515c4:	1027883a 	mov	r19,r2
  e515c8:	0e524140 	call	e52414 <__addsf3>
  e515cc:	100b883a 	mov	r5,r2
  e515d0:	9009883a 	mov	r4,r18
  e515d4:	0e524140 	call	e52414 <__addsf3>
  e515d8:	00fc0004 	movi	r3,-4096
  e515dc:	10e2703a 	and	r17,r2,r3
  e515e0:	880b883a 	mov	r5,r17
  e515e4:	b009883a 	mov	r4,r22
  e515e8:	0e524780 	call	e52478 <__mulsf3>
  e515ec:	d9000417 	ldw	r4,16(sp)
  e515f0:	880b883a 	mov	r5,r17
  e515f4:	d8800515 	stw	r2,20(sp)
  e515f8:	0e524780 	call	e52478 <__mulsf3>
  e515fc:	8809883a 	mov	r4,r17
  e51600:	a80b883a 	mov	r5,r21
  e51604:	1021883a 	mov	r16,r2
  e51608:	0e523a40 	call	e523a4 <__subsf3>
  e5160c:	1009883a 	mov	r4,r2
  e51610:	980b883a 	mov	r5,r19
  e51614:	0e523a40 	call	e523a4 <__subsf3>
  e51618:	100b883a 	mov	r5,r2
  e5161c:	9009883a 	mov	r4,r18
  e51620:	0e523a40 	call	e523a4 <__subsf3>
  e51624:	d9000317 	ldw	r4,12(sp)
  e51628:	100b883a 	mov	r5,r2
  e5162c:	0e524780 	call	e52478 <__mulsf3>
  e51630:	100b883a 	mov	r5,r2
  e51634:	8009883a 	mov	r4,r16
  e51638:	0e524140 	call	e52414 <__addsf3>
  e5163c:	d9000517 	ldw	r4,20(sp)
  e51640:	100b883a 	mov	r5,r2
  e51644:	1027883a 	mov	r19,r2
  e51648:	0e524140 	call	e52414 <__addsf3>
  e5164c:	00fc0004 	movi	r3,-4096
  e51650:	10e2703a 	and	r17,r2,r3
  e51654:	8809883a 	mov	r4,r17
  e51658:	014fddb4 	movhi	r5,16246
  e5165c:	294e0004 	addi	r5,r5,14336
  e51660:	0e524780 	call	e52478 <__mulsf3>
  e51664:	8809883a 	mov	r4,r17
  e51668:	014da7b4 	movhi	r5,13982
  e5166c:	2970e804 	addi	r5,r5,-15456
  e51670:	102b883a 	mov	r21,r2
  e51674:	0e524780 	call	e52478 <__mulsf3>
  e51678:	d9400517 	ldw	r5,20(sp)
  e5167c:	8809883a 	mov	r4,r17
  e51680:	1025883a 	mov	r18,r2
  e51684:	0e523a40 	call	e523a4 <__subsf3>
  e51688:	100b883a 	mov	r5,r2
  e5168c:	9809883a 	mov	r4,r19
  e51690:	0e523a40 	call	e523a4 <__subsf3>
  e51694:	1009883a 	mov	r4,r2
  e51698:	014fddb4 	movhi	r5,16246
  e5169c:	294e13c4 	addi	r5,r5,14415
  e516a0:	0e524780 	call	e52478 <__mulsf3>
  e516a4:	100b883a 	mov	r5,r2
  e516a8:	9009883a 	mov	r4,r18
  e516ac:	0e524140 	call	e52414 <__addsf3>
  e516b0:	d0e00504 	addi	r3,gp,-32748
  e516b4:	a0c7883a 	add	r3,r20,r3
  e516b8:	19400017 	ldw	r5,0(r3)
  e516bc:	1009883a 	mov	r4,r2
  e516c0:	0e524140 	call	e52414 <__addsf3>
  e516c4:	d9000017 	ldw	r4,0(sp)
  e516c8:	1023883a 	mov	r17,r2
  e516cc:	0e529ac0 	call	e529ac <__floatsisf>
  e516d0:	1021883a 	mov	r16,r2
  e516d4:	d0a00704 	addi	r2,gp,-32740
  e516d8:	a0a9883a 	add	r20,r20,r2
  e516dc:	a4800017 	ldw	r18,0(r20)
  e516e0:	a809883a 	mov	r4,r21
  e516e4:	880b883a 	mov	r5,r17
  e516e8:	0e524140 	call	e52414 <__addsf3>
  e516ec:	1009883a 	mov	r4,r2
  e516f0:	900b883a 	mov	r5,r18
  e516f4:	0e524140 	call	e52414 <__addsf3>
  e516f8:	100b883a 	mov	r5,r2
  e516fc:	8009883a 	mov	r4,r16
  e51700:	0e524140 	call	e52414 <__addsf3>
  e51704:	00fc0004 	movi	r3,-4096
  e51708:	10c4703a 	and	r2,r2,r3
  e5170c:	800b883a 	mov	r5,r16
  e51710:	1009883a 	mov	r4,r2
  e51714:	1027883a 	mov	r19,r2
  e51718:	0e523a40 	call	e523a4 <__subsf3>
  e5171c:	1009883a 	mov	r4,r2
  e51720:	900b883a 	mov	r5,r18
  e51724:	0e523a40 	call	e523a4 <__subsf3>
  e51728:	1009883a 	mov	r4,r2
  e5172c:	a80b883a 	mov	r5,r21
  e51730:	0e523a40 	call	e523a4 <__subsf3>
  e51734:	100b883a 	mov	r5,r2
  e51738:	8809883a 	mov	r4,r17
  e5173c:	0e523a40 	call	e523a4 <__subsf3>
  e51740:	1021883a 	mov	r16,r2
  e51744:	d8c00217 	ldw	r3,8(sp)
  e51748:	b8bfffc4 	addi	r2,r23,-1
  e5174c:	1884b03a 	or	r2,r3,r2
  e51750:	1000a11e 	bne	r2,zero,e519d8 <__ieee754_powf+0x8f8>
  e51754:	05efe034 	movhi	r23,49024
  e51758:	047c0004 	movi	r17,-4096
  e5175c:	8f22703a 	and	r17,r17,fp
  e51760:	e009883a 	mov	r4,fp
  e51764:	880b883a 	mov	r5,r17
  e51768:	0e523a40 	call	e523a4 <__subsf3>
  e5176c:	100b883a 	mov	r5,r2
  e51770:	9809883a 	mov	r4,r19
  e51774:	0e524780 	call	e52478 <__mulsf3>
  e51778:	8009883a 	mov	r4,r16
  e5177c:	e00b883a 	mov	r5,fp
  e51780:	1025883a 	mov	r18,r2
  e51784:	0e524780 	call	e52478 <__mulsf3>
  e51788:	100b883a 	mov	r5,r2
  e5178c:	9009883a 	mov	r4,r18
  e51790:	0e524140 	call	e52414 <__addsf3>
  e51794:	9809883a 	mov	r4,r19
  e51798:	880b883a 	mov	r5,r17
  e5179c:	1021883a 	mov	r16,r2
  e517a0:	0e524780 	call	e52478 <__mulsf3>
  e517a4:	100b883a 	mov	r5,r2
  e517a8:	8009883a 	mov	r4,r16
  e517ac:	1027883a 	mov	r19,r2
  e517b0:	0e524140 	call	e52414 <__addsf3>
  e517b4:	1023883a 	mov	r17,r2
  e517b8:	1029883a 	mov	r20,r2
  e517bc:	00a00034 	movhi	r2,32768
  e517c0:	10bfffc4 	addi	r2,r2,-1
  e517c4:	88a4703a 	and	r18,r17,r2
  e517c8:	8039883a 	mov	fp,r16
  e517cc:	982b883a 	mov	r21,r19
  e517d0:	8807883a 	mov	r3,r17
  e517d4:	0440a30e 	bge	zero,r17,e51a64 <__ieee754_powf+0x984>
  e517d8:	0090c034 	movhi	r2,17152
  e517dc:	14808c16 	blt	r2,r18,e51a10 <__ieee754_powf+0x930>
  e517e0:	90807f26 	beq	r18,r2,e519e0 <__ieee754_powf+0x900>
  e517e4:	008fc034 	movhi	r2,16128
  e517e8:	1480a816 	blt	r2,r18,e51a8c <__ieee754_powf+0x9ac>
  e517ec:	002d883a 	mov	r22,zero
  e517f0:	0029883a 	mov	r20,zero
  e517f4:	047c0004 	movi	r17,-4096
  e517f8:	88e2703a 	and	r17,r17,r3
  e517fc:	8809883a 	mov	r4,r17
  e51800:	014fcc74 	movhi	r5,16177
  e51804:	295c8004 	addi	r5,r5,29184
  e51808:	0e524780 	call	e52478 <__mulsf3>
  e5180c:	8809883a 	mov	r4,r17
  e51810:	a80b883a 	mov	r5,r21
  e51814:	1027883a 	mov	r19,r2
  e51818:	0e523a40 	call	e523a4 <__subsf3>
  e5181c:	100b883a 	mov	r5,r2
  e51820:	e009883a 	mov	r4,fp
  e51824:	0e523a40 	call	e523a4 <__subsf3>
  e51828:	1009883a 	mov	r4,r2
  e5182c:	014fcc74 	movhi	r5,16177
  e51830:	295c8604 	addi	r5,r5,29208
  e51834:	0e524780 	call	e52478 <__mulsf3>
  e51838:	8809883a 	mov	r4,r17
  e5183c:	014d7034 	movhi	r5,13760
  e51840:	296fa304 	addi	r5,r5,-16756
  e51844:	1025883a 	mov	r18,r2
  e51848:	0e524780 	call	e52478 <__mulsf3>
  e5184c:	100b883a 	mov	r5,r2
  e51850:	9009883a 	mov	r4,r18
  e51854:	0e524140 	call	e52414 <__addsf3>
  e51858:	100b883a 	mov	r5,r2
  e5185c:	9809883a 	mov	r4,r19
  e51860:	1021883a 	mov	r16,r2
  e51864:	0e524140 	call	e52414 <__addsf3>
  e51868:	1009883a 	mov	r4,r2
  e5186c:	980b883a 	mov	r5,r19
  e51870:	1025883a 	mov	r18,r2
  e51874:	0e523a40 	call	e523a4 <__subsf3>
  e51878:	100b883a 	mov	r5,r2
  e5187c:	8009883a 	mov	r4,r16
  e51880:	0e523a40 	call	e523a4 <__subsf3>
  e51884:	9009883a 	mov	r4,r18
  e51888:	900b883a 	mov	r5,r18
  e5188c:	1027883a 	mov	r19,r2
  e51890:	0e524780 	call	e52478 <__mulsf3>
  e51894:	1009883a 	mov	r4,r2
  e51898:	014cccb4 	movhi	r5,13106
  e5189c:	296ed304 	addi	r5,r5,-17588
  e518a0:	1021883a 	mov	r16,r2
  e518a4:	0e524780 	call	e52478 <__mulsf3>
  e518a8:	1009883a 	mov	r4,r2
  e518ac:	014d77b4 	movhi	r5,13790
  e518b0:	297a8384 	addi	r5,r5,-5618
  e518b4:	0e523a40 	call	e523a4 <__subsf3>
  e518b8:	100b883a 	mov	r5,r2
  e518bc:	8009883a 	mov	r4,r16
  e518c0:	0e524780 	call	e52478 <__mulsf3>
  e518c4:	1009883a 	mov	r4,r2
  e518c8:	014e22f4 	movhi	r5,14475
  e518cc:	296cd544 	addi	r5,r5,-19627
  e518d0:	0e524140 	call	e52414 <__addsf3>
  e518d4:	100b883a 	mov	r5,r2
  e518d8:	8009883a 	mov	r4,r16
  e518dc:	0e524780 	call	e52478 <__mulsf3>
  e518e0:	1009883a 	mov	r4,r2
  e518e4:	014ecdb4 	movhi	r5,15158
  e518e8:	2942d844 	addi	r5,r5,2913
  e518ec:	0e523a40 	call	e523a4 <__subsf3>
  e518f0:	100b883a 	mov	r5,r2
  e518f4:	8009883a 	mov	r4,r16
  e518f8:	0e524780 	call	e52478 <__mulsf3>
  e518fc:	1009883a 	mov	r4,r2
  e51900:	014f8af4 	movhi	r5,15915
  e51904:	296aaac4 	addi	r5,r5,-21845
  e51908:	0e524140 	call	e52414 <__addsf3>
  e5190c:	100b883a 	mov	r5,r2
  e51910:	8009883a 	mov	r4,r16
  e51914:	0e524780 	call	e52478 <__mulsf3>
  e51918:	100b883a 	mov	r5,r2
  e5191c:	9009883a 	mov	r4,r18
  e51920:	0e523a40 	call	e523a4 <__subsf3>
  e51924:	1021883a 	mov	r16,r2
  e51928:	9009883a 	mov	r4,r18
  e5192c:	100b883a 	mov	r5,r2
  e51930:	0e524780 	call	e52478 <__mulsf3>
  e51934:	8009883a 	mov	r4,r16
  e51938:	01500034 	movhi	r5,16384
  e5193c:	1023883a 	mov	r17,r2
  e51940:	0e523a40 	call	e523a4 <__subsf3>
  e51944:	100b883a 	mov	r5,r2
  e51948:	8809883a 	mov	r4,r17
  e5194c:	0e526580 	call	e52658 <__divsf3>
  e51950:	9009883a 	mov	r4,r18
  e51954:	980b883a 	mov	r5,r19
  e51958:	1021883a 	mov	r16,r2
  e5195c:	0e524780 	call	e52478 <__mulsf3>
  e51960:	100b883a 	mov	r5,r2
  e51964:	9809883a 	mov	r4,r19
  e51968:	0e524140 	call	e52414 <__addsf3>
  e5196c:	100b883a 	mov	r5,r2
  e51970:	8009883a 	mov	r4,r16
  e51974:	0e523a40 	call	e523a4 <__subsf3>
  e51978:	1009883a 	mov	r4,r2
  e5197c:	900b883a 	mov	r5,r18
  e51980:	0e523a40 	call	e523a4 <__subsf3>
  e51984:	100b883a 	mov	r5,r2
  e51988:	010fe034 	movhi	r4,16256
  e5198c:	0e523a40 	call	e523a4 <__subsf3>
  e51990:	a087883a 	add	r3,r20,r2
  e51994:	1009883a 	mov	r4,r2
  e51998:	1805d5fa 	srai	r2,r3,23
  e5199c:	0080920e 	bge	zero,r2,e51be8 <__ieee754_powf+0xb08>
  e519a0:	1805883a 	mov	r2,r3
  e519a4:	1009883a 	mov	r4,r2
  e519a8:	b80b883a 	mov	r5,r23
  e519ac:	0e524780 	call	e52478 <__mulsf3>
  e519b0:	1039883a 	mov	fp,r2
  e519b4:	003e1306 	br	e51204 <__ieee754_powf+0x124>
  e519b8:	00bfe034 	movhi	r2,65408
  e519bc:	213fe084 	addi	r4,r4,-126
  e519c0:	80a1883a 	add	r16,r16,r2
  e519c4:	d9000015 	stw	r4,0(sp)
  e519c8:	00c00134 	movhi	r3,4
  e519cc:	0029883a 	mov	r20,zero
  e519d0:	d8c00115 	stw	r3,4(sp)
  e519d4:	003e8906 	br	e513fc <__ieee754_powf+0x31c>
  e519d8:	05cfe034 	movhi	r23,16256
  e519dc:	003f5e06 	br	e51758 <__ieee754_powf+0x678>
  e519e0:	8009883a 	mov	r4,r16
  e519e4:	014cce74 	movhi	r5,13113
  e519e8:	296a8f04 	addi	r5,r5,-21956
  e519ec:	0e524140 	call	e52414 <__addsf3>
  e519f0:	8809883a 	mov	r4,r17
  e519f4:	980b883a 	mov	r5,r19
  e519f8:	1021883a 	mov	r16,r2
  e519fc:	0e523a40 	call	e523a4 <__subsf3>
  e51a00:	100b883a 	mov	r5,r2
  e51a04:	8009883a 	mov	r4,r16
  e51a08:	0e528440 	call	e52844 <__gtsf2>
  e51a0c:	00801f0e 	bge	zero,r2,e51a8c <__ieee754_powf+0x9ac>
  e51a10:	041c52b4 	movhi	r16,29002
  e51a14:	843cb284 	addi	r16,r16,-3382
  e51a18:	b809883a 	mov	r4,r23
  e51a1c:	800b883a 	mov	r5,r16
  e51a20:	0e524780 	call	e52478 <__mulsf3>
  e51a24:	1009883a 	mov	r4,r2
  e51a28:	800b883a 	mov	r5,r16
  e51a2c:	0e524780 	call	e52478 <__mulsf3>
  e51a30:	1039883a 	mov	fp,r2
  e51a34:	003df306 	br	e51204 <__ieee754_powf+0x124>
  e51a38:	0152e034 	movhi	r5,19328
  e51a3c:	0e524780 	call	e52478 <__mulsf3>
  e51a40:	1023883a 	mov	r17,r2
  e51a44:	013ffa04 	movi	r4,-24
  e51a48:	003e5b06 	br	e513b8 <__ieee754_powf+0x2d8>
  e51a4c:	008fe034 	movhi	r2,16256
  e51a50:	108001c4 	addi	r2,r2,7
  e51a54:	14402c0e 	bge	r2,r17,e51b08 <__ieee754_powf+0xa28>
  e51a58:	04be4d16 	blt	zero,r18,e51390 <__ieee754_powf+0x2b0>
  e51a5c:	0039883a 	mov	fp,zero
  e51a60:	003de806 	br	e51204 <__ieee754_powf+0x124>
  e51a64:	0090c5b4 	movhi	r2,17174
  e51a68:	14802416 	blt	r2,r18,e51afc <__ieee754_powf+0xa1c>
  e51a6c:	90bf5d1e 	bne	r18,r2,e517e4 <__ieee754_powf+0x704>
  e51a70:	8809883a 	mov	r4,r17
  e51a74:	980b883a 	mov	r5,r19
  e51a78:	0e523a40 	call	e523a4 <__subsf3>
  e51a7c:	100b883a 	mov	r5,r2
  e51a80:	8009883a 	mov	r4,r16
  e51a84:	0e529340 	call	e52934 <__lesf2>
  e51a88:	00801c0e 	bge	zero,r2,e51afc <__ieee754_powf+0xa1c>
  e51a8c:	9005d5fa 	srai	r2,r18,23
  e51a90:	01002034 	movhi	r4,128
  e51a94:	01402034 	movhi	r5,128
  e51a98:	297fffc4 	addi	r5,r5,-1
  e51a9c:	10bfe084 	addi	r2,r2,-126
  e51aa0:	2089d83a 	sra	r4,r4,r2
  e51aa4:	008005c4 	movi	r2,23
  e51aa8:	a109883a 	add	r4,r20,r4
  e51aac:	2006d5fa 	srli	r3,r4,23
  e51ab0:	214c703a 	and	r6,r4,r5
  e51ab4:	31802034 	orhi	r6,r6,128
  e51ab8:	18c03fcc 	andi	r3,r3,255
  e51abc:	18ffe044 	addi	r3,r3,-127
  e51ac0:	28cbd83a 	sra	r5,r5,r3
  e51ac4:	10c5c83a 	sub	r2,r2,r3
  e51ac8:	30add83a 	sra	r22,r6,r2
  e51acc:	014a303a 	nor	r5,zero,r5
  e51ad0:	214a703a 	and	r5,r4,r5
  e51ad4:	a0004216 	blt	r20,zero,e51be0 <__ieee754_powf+0xb00>
  e51ad8:	a809883a 	mov	r4,r21
  e51adc:	0e523a40 	call	e523a4 <__subsf3>
  e51ae0:	100b883a 	mov	r5,r2
  e51ae4:	e009883a 	mov	r4,fp
  e51ae8:	b02895fa 	slli	r20,r22,23
  e51aec:	102b883a 	mov	r21,r2
  e51af0:	0e524140 	call	e52414 <__addsf3>
  e51af4:	1007883a 	mov	r3,r2
  e51af8:	003f3e06 	br	e517f4 <__ieee754_powf+0x714>
  e51afc:	040368b4 	movhi	r16,3490
  e51b00:	84109804 	addi	r16,r16,16992
  e51b04:	003fc406 	br	e51a18 <__ieee754_powf+0x938>
  e51b08:	0e523a40 	call	e523a4 <__subsf3>
  e51b0c:	1021883a 	mov	r16,r2
  e51b10:	1009883a 	mov	r4,r2
  e51b14:	014fee74 	movhi	r5,16313
  e51b18:	296a8004 	addi	r5,r5,-22016
  e51b1c:	0e524780 	call	e52478 <__mulsf3>
  e51b20:	8009883a 	mov	r4,r16
  e51b24:	014dbb74 	movhi	r5,14061
  e51b28:	29695c04 	addi	r5,r5,-23184
  e51b2c:	1023883a 	mov	r17,r2
  e51b30:	0e524780 	call	e52478 <__mulsf3>
  e51b34:	8009883a 	mov	r4,r16
  e51b38:	800b883a 	mov	r5,r16
  e51b3c:	1025883a 	mov	r18,r2
  e51b40:	0e524780 	call	e52478 <__mulsf3>
  e51b44:	8009883a 	mov	r4,r16
  e51b48:	016fa034 	movhi	r5,48768
  e51b4c:	1027883a 	mov	r19,r2
  e51b50:	0e524780 	call	e52478 <__mulsf3>
  e51b54:	1009883a 	mov	r4,r2
  e51b58:	014faaf4 	movhi	r5,16043
  e51b5c:	296aaac4 	addi	r5,r5,-21845
  e51b60:	0e524140 	call	e52414 <__addsf3>
  e51b64:	100b883a 	mov	r5,r2
  e51b68:	8009883a 	mov	r4,r16
  e51b6c:	0e524780 	call	e52478 <__mulsf3>
  e51b70:	100b883a 	mov	r5,r2
  e51b74:	010fc034 	movhi	r4,16128
  e51b78:	0e523a40 	call	e523a4 <__subsf3>
  e51b7c:	100b883a 	mov	r5,r2
  e51b80:	9809883a 	mov	r4,r19
  e51b84:	0e524780 	call	e52478 <__mulsf3>
  e51b88:	1009883a 	mov	r4,r2
  e51b8c:	016fee74 	movhi	r5,49081
  e51b90:	296a8ec4 	addi	r5,r5,-21957
  e51b94:	0e524780 	call	e52478 <__mulsf3>
  e51b98:	100b883a 	mov	r5,r2
  e51b9c:	9009883a 	mov	r4,r18
  e51ba0:	0e524140 	call	e52414 <__addsf3>
  e51ba4:	100b883a 	mov	r5,r2
  e51ba8:	8809883a 	mov	r4,r17
  e51bac:	1021883a 	mov	r16,r2
  e51bb0:	0e524140 	call	e52414 <__addsf3>
  e51bb4:	00fc0004 	movi	r3,-4096
  e51bb8:	10c4703a 	and	r2,r2,r3
  e51bbc:	1009883a 	mov	r4,r2
  e51bc0:	880b883a 	mov	r5,r17
  e51bc4:	1027883a 	mov	r19,r2
  e51bc8:	0e523a40 	call	e523a4 <__subsf3>
  e51bcc:	100b883a 	mov	r5,r2
  e51bd0:	8009883a 	mov	r4,r16
  e51bd4:	0e523a40 	call	e523a4 <__subsf3>
  e51bd8:	1021883a 	mov	r16,r2
  e51bdc:	003ed906 	br	e51744 <__ieee754_powf+0x664>
  e51be0:	05adc83a 	sub	r22,zero,r22
  e51be4:	003fbc06 	br	e51ad8 <__ieee754_powf+0x9f8>
  e51be8:	b00b883a 	mov	r5,r22
  e51bec:	0e51fc40 	call	e51fc4 <scalbnf>
  e51bf0:	003f6c06 	br	e519a4 <__ieee754_powf+0x8c4>

00e51bf4 <__ieee754_sqrtf>:
  e51bf4:	00a00034 	movhi	r2,32768
  e51bf8:	10bfffc4 	addi	r2,r2,-1
  e51bfc:	defffe04 	addi	sp,sp,-8
  e51c00:	208c703a 	and	r6,r4,r2
  e51c04:	00dfe034 	movhi	r3,32640
  e51c08:	18ffffc4 	addi	r3,r3,-1
  e51c0c:	dc000015 	stw	r16,0(sp)
  e51c10:	dfc00115 	stw	ra,4(sp)
  e51c14:	2021883a 	mov	r16,r4
  e51c18:	200b883a 	mov	r5,r4
  e51c1c:	19800a2e 	bgeu	r3,r6,e51c48 <__ieee754_sqrtf+0x54>
  e51c20:	0e524780 	call	e52478 <__mulsf3>
  e51c24:	100b883a 	mov	r5,r2
  e51c28:	8009883a 	mov	r4,r16
  e51c2c:	0e524140 	call	e52414 <__addsf3>
  e51c30:	1021883a 	mov	r16,r2
  e51c34:	8005883a 	mov	r2,r16
  e51c38:	dfc00117 	ldw	ra,4(sp)
  e51c3c:	dc000017 	ldw	r16,0(sp)
  e51c40:	dec00204 	addi	sp,sp,8
  e51c44:	f800283a 	ret
  e51c48:	303ffa26 	beq	r6,zero,e51c34 <__ieee754_sqrtf+0x40>
  e51c4c:	20003b16 	blt	r4,zero,e51d3c <__ieee754_sqrtf+0x148>
  e51c50:	00802034 	movhi	r2,128
  e51c54:	10bfffc4 	addi	r2,r2,-1
  e51c58:	2007d5fa 	srai	r3,r4,23
  e51c5c:	11800936 	bltu	r2,r6,e51c84 <__ieee754_sqrtf+0x90>
  e51c60:	2080202c 	andhi	r2,r4,128
  e51c64:	10003c1e 	bne	r2,zero,e51d58 <__ieee754_sqrtf+0x164>
  e51c68:	0009883a 	mov	r4,zero
  e51c6c:	294b883a 	add	r5,r5,r5
  e51c70:	2880202c 	andhi	r2,r5,128
  e51c74:	21000044 	addi	r4,r4,1
  e51c78:	103ffc26 	beq	r2,zero,e51c6c <__ieee754_sqrtf+0x78>
  e51c7c:	1905c83a 	sub	r2,r3,r4
  e51c80:	10c00044 	addi	r3,r2,1
  e51c84:	1a7fe044 	addi	r9,r3,-127
  e51c88:	48c0004c 	andi	r3,r9,1
  e51c8c:	00802034 	movhi	r2,128
  e51c90:	10bfffc4 	addi	r2,r2,-1
  e51c94:	2884703a 	and	r2,r5,r2
  e51c98:	1807003a 	cmpeq	r3,r3,zero
  e51c9c:	10802034 	orhi	r2,r2,128
  e51ca0:	18002426 	beq	r3,zero,e51d34 <__ieee754_sqrtf+0x140>
  e51ca4:	1085883a 	add	r2,r2,r2
  e51ca8:	01404034 	movhi	r5,256
  e51cac:	000f883a 	mov	r7,zero
  e51cb0:	0007883a 	mov	r3,zero
  e51cb4:	000d883a 	mov	r6,zero
  e51cb8:	02000644 	movi	r8,25
  e51cbc:	3949883a 	add	r4,r7,r5
  e51cc0:	31800044 	addi	r6,r6,1
  e51cc4:	11000316 	blt	r2,r4,e51cd4 <__ieee754_sqrtf+0xe0>
  e51cc8:	1105c83a 	sub	r2,r2,r4
  e51ccc:	1947883a 	add	r3,r3,r5
  e51cd0:	214f883a 	add	r7,r4,r5
  e51cd4:	1085883a 	add	r2,r2,r2
  e51cd8:	280ad07a 	srli	r5,r5,1
  e51cdc:	323ff71e 	bne	r6,r8,e51cbc <__ieee754_sqrtf+0xc8>
  e51ce0:	10000b1e 	bne	r2,zero,e51d10 <__ieee754_sqrtf+0x11c>
  e51ce4:	4805d07a 	srai	r2,r9,1
  e51ce8:	1807d07a 	srai	r3,r3,1
  e51cec:	010fc034 	movhi	r4,16128
  e51cf0:	100495fa 	slli	r2,r2,23
  e51cf4:	1907883a 	add	r3,r3,r4
  e51cf8:	18a1883a 	add	r16,r3,r2
  e51cfc:	8005883a 	mov	r2,r16
  e51d00:	dfc00117 	ldw	ra,4(sp)
  e51d04:	dc000017 	ldw	r16,0(sp)
  e51d08:	dec00204 	addi	sp,sp,8
  e51d0c:	f800283a 	ret
  e51d10:	1880004c 	andi	r2,r3,1
  e51d14:	1887883a 	add	r3,r3,r2
  e51d18:	4805d07a 	srai	r2,r9,1
  e51d1c:	1807d07a 	srai	r3,r3,1
  e51d20:	010fc034 	movhi	r4,16128
  e51d24:	100495fa 	slli	r2,r2,23
  e51d28:	1907883a 	add	r3,r3,r4
  e51d2c:	18a1883a 	add	r16,r3,r2
  e51d30:	003ff206 	br	e51cfc <__ieee754_sqrtf+0x108>
  e51d34:	1085883a 	add	r2,r2,r2
  e51d38:	003fda06 	br	e51ca4 <__ieee754_sqrtf+0xb0>
  e51d3c:	200b883a 	mov	r5,r4
  e51d40:	0e523a40 	call	e523a4 <__subsf3>
  e51d44:	1009883a 	mov	r4,r2
  e51d48:	100b883a 	mov	r5,r2
  e51d4c:	0e526580 	call	e52658 <__divsf3>
  e51d50:	1021883a 	mov	r16,r2
  e51d54:	003fb706 	br	e51c34 <__ieee754_sqrtf+0x40>
  e51d58:	0009883a 	mov	r4,zero
  e51d5c:	003fc706 	br	e51c7c <__ieee754_sqrtf+0x88>

00e51d60 <matherr>:
  e51d60:	0005883a 	mov	r2,zero
  e51d64:	f800283a 	ret

00e51d68 <rint>:
  e51d68:	2015883a 	mov	r10,r4
  e51d6c:	2809d53a 	srai	r4,r5,20
  e51d70:	defff904 	addi	sp,sp,-28
  e51d74:	034004c4 	movi	r13,19
  e51d78:	2101ffcc 	andi	r4,r4,2047
  e51d7c:	227f0044 	addi	r9,r4,-1023
  e51d80:	dc800415 	stw	r18,16(sp)
  e51d84:	dfc00615 	stw	ra,24(sp)
  e51d88:	dcc00515 	stw	r19,20(sp)
  e51d8c:	dc400315 	stw	r17,12(sp)
  e51d90:	dc000215 	stw	r16,8(sp)
  e51d94:	2817883a 	mov	r11,r5
  e51d98:	500d883a 	mov	r6,r10
  e51d9c:	2824d7fa 	srli	r18,r5,31
  e51da0:	6a403016 	blt	r13,r9,e51e64 <rint+0xfc>
  e51da4:	48004916 	blt	r9,zero,e51ecc <rint+0x164>
  e51da8:	00800434 	movhi	r2,16
  e51dac:	10bfffc4 	addi	r2,r2,-1
  e51db0:	1247d83a 	sra	r3,r2,r9
  e51db4:	2809883a 	mov	r4,r5
  e51db8:	1944703a 	and	r2,r3,r5
  e51dbc:	5084b03a 	or	r2,r10,r2
  e51dc0:	10001f26 	beq	r2,zero,e51e40 <rint+0xd8>
  e51dc4:	180ad07a 	srli	r5,r3,1
  e51dc8:	5944703a 	and	r2,r11,r5
  e51dcc:	5084b03a 	or	r2,r10,r2
  e51dd0:	10000626 	beq	r2,zero,e51dec <rint+0x84>
  e51dd4:	4b406626 	beq	r9,r13,e51f70 <rint+0x208>
  e51dd8:	00c000b4 	movhi	r3,2
  e51ddc:	1a47d83a 	sra	r3,r3,r9
  e51de0:	0144303a 	nor	r2,zero,r5
  e51de4:	5884703a 	and	r2,r11,r2
  e51de8:	10c8b03a 	or	r4,r2,r3
  e51dec:	900690fa 	slli	r3,r18,3
  e51df0:	008039b4 	movhi	r2,230
  e51df4:	10849b04 	addi	r2,r2,4716
  e51df8:	200f883a 	mov	r7,r4
  e51dfc:	1887883a 	add	r3,r3,r2
  e51e00:	1c000017 	ldw	r16,0(r3)
  e51e04:	1c400117 	ldw	r17,4(r3)
  e51e08:	8009883a 	mov	r4,r16
  e51e0c:	880b883a 	mov	r5,r17
  e51e10:	0e52fbc0 	call	e52fbc <__adddf3>
  e51e14:	d8800015 	stw	r2,0(sp)
  e51e18:	d8c00115 	stw	r3,4(sp)
  e51e1c:	d8800017 	ldw	r2,0(sp)
  e51e20:	d8c00117 	ldw	r3,4(sp)
  e51e24:	880f883a 	mov	r7,r17
  e51e28:	800d883a 	mov	r6,r16
  e51e2c:	180b883a 	mov	r5,r3
  e51e30:	1009883a 	mov	r4,r2
  e51e34:	0e52f3c0 	call	e52f3c <__subdf3>
  e51e38:	1015883a 	mov	r10,r2
  e51e3c:	1817883a 	mov	r11,r3
  e51e40:	5005883a 	mov	r2,r10
  e51e44:	5807883a 	mov	r3,r11
  e51e48:	dfc00617 	ldw	ra,24(sp)
  e51e4c:	dcc00517 	ldw	r19,20(sp)
  e51e50:	dc800417 	ldw	r18,16(sp)
  e51e54:	dc400317 	ldw	r17,12(sp)
  e51e58:	dc000217 	ldw	r16,8(sp)
  e51e5c:	dec00704 	addi	sp,sp,28
  e51e60:	f800283a 	ret
  e51e64:	00800cc4 	movi	r2,51
  e51e68:	12400f16 	blt	r2,r9,e51ea8 <rint+0x140>
  e51e6c:	213efb44 	addi	r4,r4,-1043
  e51e70:	00bfffc4 	movi	r2,-1
  e51e74:	1104d83a 	srl	r2,r2,r4
  e51e78:	5086703a 	and	r3,r10,r2
  e51e7c:	183ff026 	beq	r3,zero,e51e40 <rint+0xd8>
  e51e80:	100ad07a 	srli	r5,r2,1
  e51e84:	5144703a 	and	r2,r10,r5
  e51e88:	10000526 	beq	r2,zero,e51ea0 <rint+0x138>
  e51e8c:	00d00034 	movhi	r3,16384
  e51e90:	1907d83a 	sra	r3,r3,r4
  e51e94:	0144303a 	nor	r2,zero,r5
  e51e98:	5084703a 	and	r2,r10,r2
  e51e9c:	10ccb03a 	or	r6,r2,r3
  e51ea0:	5809883a 	mov	r4,r11
  e51ea4:	003fd106 	br	e51dec <rint+0x84>
  e51ea8:	00810004 	movi	r2,1024
  e51eac:	48bfe41e 	bne	r9,r2,e51e40 <rint+0xd8>
  e51eb0:	5009883a 	mov	r4,r10
  e51eb4:	500d883a 	mov	r6,r10
  e51eb8:	280f883a 	mov	r7,r5
  e51ebc:	0e52fbc0 	call	e52fbc <__adddf3>
  e51ec0:	1015883a 	mov	r10,r2
  e51ec4:	1817883a 	mov	r11,r3
  e51ec8:	003fdd06 	br	e51e40 <rint+0xd8>
  e51ecc:	04e00034 	movhi	r19,32768
  e51ed0:	9cffffc4 	addi	r19,r19,-1
  e51ed4:	2cc4703a 	and	r2,r5,r19
  e51ed8:	5084b03a 	or	r2,r10,r2
  e51edc:	103fd826 	beq	r2,zero,e51e40 <rint+0xd8>
  e51ee0:	00c00434 	movhi	r3,16
  e51ee4:	18ffffc4 	addi	r3,r3,-1
  e51ee8:	28c6703a 	and	r3,r5,r3
  e51eec:	50c6b03a 	or	r3,r10,r3
  e51ef0:	00cdc83a 	sub	r6,zero,r3
  e51ef4:	900a90fa 	slli	r5,r18,3
  e51ef8:	1986b03a 	or	r3,r3,r6
  e51efc:	010039b4 	movhi	r4,230
  e51f00:	21049b04 	addi	r4,r4,4716
  e51f04:	1806d33a 	srli	r3,r3,12
  e51f08:	290b883a 	add	r5,r5,r4
  e51f0c:	2c000017 	ldw	r16,0(r5)
  e51f10:	2c400117 	ldw	r17,4(r5)
  e51f14:	593fffac 	andhi	r4,r11,65534
  e51f18:	18c0022c 	andhi	r3,r3,8
  e51f1c:	1906b03a 	or	r3,r3,r4
  e51f20:	500d883a 	mov	r6,r10
  e51f24:	180f883a 	mov	r7,r3
  e51f28:	8009883a 	mov	r4,r16
  e51f2c:	880b883a 	mov	r5,r17
  e51f30:	0e52fbc0 	call	e52fbc <__adddf3>
  e51f34:	d8800015 	stw	r2,0(sp)
  e51f38:	d8c00115 	stw	r3,4(sp)
  e51f3c:	d8800017 	ldw	r2,0(sp)
  e51f40:	d8c00117 	ldw	r3,4(sp)
  e51f44:	880f883a 	mov	r7,r17
  e51f48:	800d883a 	mov	r6,r16
  e51f4c:	180b883a 	mov	r5,r3
  e51f50:	1009883a 	mov	r4,r2
  e51f54:	0e52f3c0 	call	e52f3c <__subdf3>
  e51f58:	901297fa 	slli	r9,r18,31
  e51f5c:	98d0703a 	and	r8,r19,r3
  e51f60:	1015883a 	mov	r10,r2
  e51f64:	4250b03a 	or	r8,r8,r9
  e51f68:	4017883a 	mov	r11,r8
  e51f6c:	003fb406 	br	e51e40 <rint+0xd8>
  e51f70:	01900034 	movhi	r6,16384
  e51f74:	003f9d06 	br	e51dec <rint+0x84>

00e51f78 <fabsf>:
  e51f78:	00a00034 	movhi	r2,32768
  e51f7c:	10bfffc4 	addi	r2,r2,-1
  e51f80:	2084703a 	and	r2,r4,r2
  e51f84:	f800283a 	ret

00e51f88 <finitef>:
  e51f88:	00a00034 	movhi	r2,32768
  e51f8c:	10bfffc4 	addi	r2,r2,-1
  e51f90:	2088703a 	and	r4,r4,r2
  e51f94:	009fe034 	movhi	r2,32640
  e51f98:	10bfffc4 	addi	r2,r2,-1
  e51f9c:	1104403a 	cmpge	r2,r2,r4
  e51fa0:	f800283a 	ret

00e51fa4 <isnanf>:
  e51fa4:	00a00034 	movhi	r2,32768
  e51fa8:	10bfffc4 	addi	r2,r2,-1
  e51fac:	2088703a 	and	r4,r4,r2
  e51fb0:	009fe034 	movhi	r2,32640
  e51fb4:	1104803a 	cmplt	r2,r2,r4
  e51fb8:	f800283a 	ret

00e51fbc <nanf>:
  e51fbc:	009ff034 	movhi	r2,32704
  e51fc0:	f800283a 	ret

00e51fc4 <scalbnf>:
  e51fc4:	00a00034 	movhi	r2,32768
  e51fc8:	10bfffc4 	addi	r2,r2,-1
  e51fcc:	defffe04 	addi	sp,sp,-8
  e51fd0:	2086703a 	and	r3,r4,r2
  e51fd4:	dc000015 	stw	r16,0(sp)
  e51fd8:	dfc00115 	stw	ra,4(sp)
  e51fdc:	200d883a 	mov	r6,r4
  e51fe0:	200f883a 	mov	r7,r4
  e51fe4:	2821883a 	mov	r16,r5
  e51fe8:	18001a26 	beq	r3,zero,e52054 <scalbnf+0x90>
  e51fec:	009fe034 	movhi	r2,32640
  e51ff0:	10bfffc4 	addi	r2,r2,-1
  e51ff4:	10c01c36 	bltu	r2,r3,e52068 <scalbnf+0xa4>
  e51ff8:	00802034 	movhi	r2,128
  e51ffc:	10bfffc4 	addi	r2,r2,-1
  e52000:	10c02136 	bltu	r2,r3,e52088 <scalbnf+0xc4>
  e52004:	01530034 	movhi	r5,19456
  e52008:	0e524780 	call	e52478 <__mulsf3>
  e5200c:	1009883a 	mov	r4,r2
  e52010:	100d883a 	mov	r6,r2
  e52014:	00bffff4 	movhi	r2,65535
  e52018:	108f2c04 	addi	r2,r2,15536
  e5201c:	80802616 	blt	r16,r2,e520b8 <scalbnf+0xf4>
  e52020:	209fe02c 	andhi	r2,r4,32640
  e52024:	1005d5fa 	srai	r2,r2,23
  e52028:	200f883a 	mov	r7,r4
  e5202c:	10bff9c4 	addi	r2,r2,-25
  e52030:	1407883a 	add	r3,r2,r16
  e52034:	00803f84 	movi	r2,254
  e52038:	10c01516 	blt	r2,r3,e52090 <scalbnf+0xcc>
  e5203c:	00c0230e 	bge	zero,r3,e520cc <scalbnf+0x108>
  e52040:	180695fa 	slli	r3,r3,23
  e52044:	00a02034 	movhi	r2,32896
  e52048:	10bfffc4 	addi	r2,r2,-1
  e5204c:	3884703a 	and	r2,r7,r2
  e52050:	10ccb03a 	or	r6,r2,r3
  e52054:	3005883a 	mov	r2,r6
  e52058:	dfc00117 	ldw	ra,4(sp)
  e5205c:	dc000017 	ldw	r16,0(sp)
  e52060:	dec00204 	addi	sp,sp,8
  e52064:	f800283a 	ret
  e52068:	200b883a 	mov	r5,r4
  e5206c:	0e524140 	call	e52414 <__addsf3>
  e52070:	100d883a 	mov	r6,r2
  e52074:	3005883a 	mov	r2,r6
  e52078:	dfc00117 	ldw	ra,4(sp)
  e5207c:	dc000017 	ldw	r16,0(sp)
  e52080:	dec00204 	addi	sp,sp,8
  e52084:	f800283a 	ret
  e52088:	1804d5fa 	srli	r2,r3,23
  e5208c:	003fe806 	br	e52030 <scalbnf+0x6c>
  e52090:	041c52b4 	movhi	r16,29002
  e52094:	843cb284 	addi	r16,r16,-3382
  e52098:	300b883a 	mov	r5,r6
  e5209c:	8009883a 	mov	r4,r16
  e520a0:	0e521100 	call	e52110 <copysignf>
  e520a4:	1009883a 	mov	r4,r2
  e520a8:	800b883a 	mov	r5,r16
  e520ac:	0e524780 	call	e52478 <__mulsf3>
  e520b0:	100d883a 	mov	r6,r2
  e520b4:	003fe706 	br	e52054 <scalbnf+0x90>
  e520b8:	014368b4 	movhi	r5,3490
  e520bc:	29509804 	addi	r5,r5,16992
  e520c0:	0e524780 	call	e52478 <__mulsf3>
  e520c4:	100d883a 	mov	r6,r2
  e520c8:	003fe206 	br	e52054 <scalbnf+0x90>
  e520cc:	00bffa84 	movi	r2,-22
  e520d0:	1880050e 	bge	r3,r2,e520e8 <scalbnf+0x124>
  e520d4:	00b0d414 	movui	r2,50000
  e520d8:	143fed16 	blt	r2,r16,e52090 <scalbnf+0xcc>
  e520dc:	040368b4 	movhi	r16,3490
  e520e0:	84109804 	addi	r16,r16,16992
  e520e4:	003fec06 	br	e52098 <scalbnf+0xd4>
  e520e8:	18800644 	addi	r2,r3,25
  e520ec:	100495fa 	slli	r2,r2,23
  e520f0:	01202034 	movhi	r4,32896
  e520f4:	213fffc4 	addi	r4,r4,-1
  e520f8:	3908703a 	and	r4,r7,r4
  e520fc:	2088b03a 	or	r4,r4,r2
  e52100:	014cc034 	movhi	r5,13056
  e52104:	0e524780 	call	e52478 <__mulsf3>
  e52108:	100d883a 	mov	r6,r2
  e5210c:	003fd106 	br	e52054 <scalbnf+0x90>

00e52110 <copysignf>:
  e52110:	00a00034 	movhi	r2,32768
  e52114:	10bfffc4 	addi	r2,r2,-1
  e52118:	2088703a 	and	r4,r4,r2
  e5211c:	28a0002c 	andhi	r2,r5,32768
  e52120:	2084b03a 	or	r2,r4,r2
  e52124:	f800283a 	ret

00e52128 <__muldi3>:
  e52128:	2011883a 	mov	r8,r4
  e5212c:	427fffcc 	andi	r9,r8,65535
  e52130:	4018d43a 	srli	r12,r8,16
  e52134:	32bfffcc 	andi	r10,r6,65535
  e52138:	3016d43a 	srli	r11,r6,16
  e5213c:	4a85383a 	mul	r2,r9,r10
  e52140:	6295383a 	mul	r10,r12,r10
  e52144:	4ad3383a 	mul	r9,r9,r11
  e52148:	113fffcc 	andi	r4,r2,65535
  e5214c:	1004d43a 	srli	r2,r2,16
  e52150:	4a93883a 	add	r9,r9,r10
  e52154:	3807883a 	mov	r3,r7
  e52158:	1245883a 	add	r2,r2,r9
  e5215c:	280f883a 	mov	r7,r5
  e52160:	180b883a 	mov	r5,r3
  e52164:	1006943a 	slli	r3,r2,16
  e52168:	defffd04 	addi	sp,sp,-12
  e5216c:	dc800215 	stw	r18,8(sp)
  e52170:	1907883a 	add	r3,r3,r4
  e52174:	dc400115 	stw	r17,4(sp)
  e52178:	dc000015 	stw	r16,0(sp)
  e5217c:	4165383a 	mul	r18,r8,r5
  e52180:	31e3383a 	mul	r17,r6,r7
  e52184:	1012d43a 	srli	r9,r2,16
  e52188:	62d9383a 	mul	r12,r12,r11
  e5218c:	181f883a 	mov	r15,r3
  e52190:	1280022e 	bgeu	r2,r10,e5219c <__muldi3+0x74>
  e52194:	00800074 	movhi	r2,1
  e52198:	6099883a 	add	r12,r12,r2
  e5219c:	624d883a 	add	r6,r12,r9
  e521a0:	9187883a 	add	r3,r18,r6
  e521a4:	88c7883a 	add	r3,r17,r3
  e521a8:	7805883a 	mov	r2,r15
  e521ac:	dc800217 	ldw	r18,8(sp)
  e521b0:	dc400117 	ldw	r17,4(sp)
  e521b4:	dc000017 	ldw	r16,0(sp)
  e521b8:	dec00304 	addi	sp,sp,12
  e521bc:	f800283a 	ret

00e521c0 <_fpadd_parts>:
  e521c0:	21c00017 	ldw	r7,0(r4)
  e521c4:	02000044 	movi	r8,1
  e521c8:	41c0332e 	bgeu	r8,r7,e52298 <_fpadd_parts+0xd8>
  e521cc:	28800017 	ldw	r2,0(r5)
  e521d0:	4080462e 	bgeu	r8,r2,e522ec <_fpadd_parts+0x12c>
  e521d4:	00c00104 	movi	r3,4
  e521d8:	38c06b26 	beq	r7,r3,e52388 <_fpadd_parts+0x1c8>
  e521dc:	10c04326 	beq	r2,r3,e522ec <_fpadd_parts+0x12c>
  e521e0:	00c00084 	movi	r3,2
  e521e4:	10c02e26 	beq	r2,r3,e522a0 <_fpadd_parts+0xe0>
  e521e8:	38c04026 	beq	r7,r3,e522ec <_fpadd_parts+0x12c>
  e521ec:	22800217 	ldw	r10,8(r4)
  e521f0:	28c00217 	ldw	r3,8(r5)
  e521f4:	23000317 	ldw	r12,12(r4)
  e521f8:	2a400317 	ldw	r9,12(r5)
  e521fc:	50cfc83a 	sub	r7,r10,r3
  e52200:	3817883a 	mov	r11,r7
  e52204:	38004f16 	blt	r7,zero,e52344 <_fpadd_parts+0x184>
  e52208:	008007c4 	movi	r2,31
  e5220c:	11c03316 	blt	r2,r7,e522dc <_fpadd_parts+0x11c>
  e52210:	02c0540e 	bge	zero,r11,e52364 <_fpadd_parts+0x1a4>
  e52214:	41c4983a 	sll	r2,r8,r7
  e52218:	49c6d83a 	srl	r3,r9,r7
  e5221c:	10bfffc4 	addi	r2,r2,-1
  e52220:	4884703a 	and	r2,r9,r2
  e52224:	1004c03a 	cmpne	r2,r2,zero
  e52228:	1892b03a 	or	r9,r3,r2
  e5222c:	20c00117 	ldw	r3,4(r4)
  e52230:	28800117 	ldw	r2,4(r5)
  e52234:	18803c26 	beq	r3,r2,e52328 <_fpadd_parts+0x168>
  e52238:	18002f26 	beq	r3,zero,e522f8 <_fpadd_parts+0x138>
  e5223c:	4b05c83a 	sub	r2,r9,r12
  e52240:	10004216 	blt	r2,zero,e5234c <_fpadd_parts+0x18c>
  e52244:	32800215 	stw	r10,8(r6)
  e52248:	30800315 	stw	r2,12(r6)
  e5224c:	30000115 	stw	zero,4(r6)
  e52250:	31000317 	ldw	r4,12(r6)
  e52254:	01d00034 	movhi	r7,16384
  e52258:	39ffff84 	addi	r7,r7,-2
  e5225c:	20bfffc4 	addi	r2,r4,-1
  e52260:	2007883a 	mov	r3,r4
  e52264:	38800836 	bltu	r7,r2,e52288 <_fpadd_parts+0xc8>
  e52268:	31400217 	ldw	r5,8(r6)
  e5226c:	18c9883a 	add	r4,r3,r3
  e52270:	20bfffc4 	addi	r2,r4,-1
  e52274:	297fffc4 	addi	r5,r5,-1
  e52278:	2007883a 	mov	r3,r4
  e5227c:	38bffb2e 	bgeu	r7,r2,e5226c <_fpadd_parts+0xac>
  e52280:	31400215 	stw	r5,8(r6)
  e52284:	31000315 	stw	r4,12(r6)
  e52288:	008000c4 	movi	r2,3
  e5228c:	30800015 	stw	r2,0(r6)
  e52290:	20001b16 	blt	r4,zero,e52300 <_fpadd_parts+0x140>
  e52294:	3009883a 	mov	r4,r6
  e52298:	2005883a 	mov	r2,r4
  e5229c:	f800283a 	ret
  e522a0:	38fffd1e 	bne	r7,r3,e52298 <_fpadd_parts+0xd8>
  e522a4:	31c00015 	stw	r7,0(r6)
  e522a8:	20800117 	ldw	r2,4(r4)
  e522ac:	30800115 	stw	r2,4(r6)
  e522b0:	20c00217 	ldw	r3,8(r4)
  e522b4:	30c00215 	stw	r3,8(r6)
  e522b8:	20800317 	ldw	r2,12(r4)
  e522bc:	30800315 	stw	r2,12(r6)
  e522c0:	20c00117 	ldw	r3,4(r4)
  e522c4:	28800117 	ldw	r2,4(r5)
  e522c8:	3009883a 	mov	r4,r6
  e522cc:	1886703a 	and	r3,r3,r2
  e522d0:	2005883a 	mov	r2,r4
  e522d4:	30c00115 	stw	r3,4(r6)
  e522d8:	f800283a 	ret
  e522dc:	1a801716 	blt	r3,r10,e5233c <_fpadd_parts+0x17c>
  e522e0:	1815883a 	mov	r10,r3
  e522e4:	0019883a 	mov	r12,zero
  e522e8:	003fd006 	br	e5222c <_fpadd_parts+0x6c>
  e522ec:	2809883a 	mov	r4,r5
  e522f0:	2005883a 	mov	r2,r4
  e522f4:	f800283a 	ret
  e522f8:	6245c83a 	sub	r2,r12,r9
  e522fc:	003fd006 	br	e52240 <_fpadd_parts+0x80>
  e52300:	30800217 	ldw	r2,8(r6)
  e52304:	2006d07a 	srli	r3,r4,1
  e52308:	2100004c 	andi	r4,r4,1
  e5230c:	10800044 	addi	r2,r2,1
  e52310:	1906b03a 	or	r3,r3,r4
  e52314:	3009883a 	mov	r4,r6
  e52318:	30800215 	stw	r2,8(r6)
  e5231c:	2005883a 	mov	r2,r4
  e52320:	30c00315 	stw	r3,12(r6)
  e52324:	f800283a 	ret
  e52328:	4b09883a 	add	r4,r9,r12
  e5232c:	30c00115 	stw	r3,4(r6)
  e52330:	32800215 	stw	r10,8(r6)
  e52334:	31000315 	stw	r4,12(r6)
  e52338:	003fd306 	br	e52288 <_fpadd_parts+0xc8>
  e5233c:	0013883a 	mov	r9,zero
  e52340:	003fba06 	br	e5222c <_fpadd_parts+0x6c>
  e52344:	01cfc83a 	sub	r7,zero,r7
  e52348:	003faf06 	br	e52208 <_fpadd_parts+0x48>
  e5234c:	0089c83a 	sub	r4,zero,r2
  e52350:	00800044 	movi	r2,1
  e52354:	30800115 	stw	r2,4(r6)
  e52358:	32800215 	stw	r10,8(r6)
  e5235c:	31000315 	stw	r4,12(r6)
  e52360:	003fbb06 	br	e52250 <_fpadd_parts+0x90>
  e52364:	583fb126 	beq	r11,zero,e5222c <_fpadd_parts+0x6c>
  e52368:	41c4983a 	sll	r2,r8,r7
  e5236c:	61c6d83a 	srl	r3,r12,r7
  e52370:	51d5883a 	add	r10,r10,r7
  e52374:	10bfffc4 	addi	r2,r2,-1
  e52378:	6084703a 	and	r2,r12,r2
  e5237c:	1004c03a 	cmpne	r2,r2,zero
  e52380:	1898b03a 	or	r12,r3,r2
  e52384:	003fa906 	br	e5222c <_fpadd_parts+0x6c>
  e52388:	11ffc31e 	bne	r2,r7,e52298 <_fpadd_parts+0xd8>
  e5238c:	28c00117 	ldw	r3,4(r5)
  e52390:	20800117 	ldw	r2,4(r4)
  e52394:	10ffc026 	beq	r2,r3,e52298 <_fpadd_parts+0xd8>
  e52398:	010039b4 	movhi	r4,230
  e5239c:	21049f04 	addi	r4,r4,4732
  e523a0:	003fbd06 	br	e52298 <_fpadd_parts+0xd8>

00e523a4 <__subsf3>:
  e523a4:	deffef04 	addi	sp,sp,-68
  e523a8:	dcc00f15 	stw	r19,60(sp)
  e523ac:	dcc00204 	addi	r19,sp,8
  e523b0:	dc400e15 	stw	r17,56(sp)
  e523b4:	d9000015 	stw	r4,0(sp)
  e523b8:	d9400115 	stw	r5,4(sp)
  e523bc:	d809883a 	mov	r4,sp
  e523c0:	980b883a 	mov	r5,r19
  e523c4:	dc400604 	addi	r17,sp,24
  e523c8:	dfc01015 	stw	ra,64(sp)
  e523cc:	0e5359c0 	call	e5359c <__unpack_f>
  e523d0:	d9000104 	addi	r4,sp,4
  e523d4:	880b883a 	mov	r5,r17
  e523d8:	0e5359c0 	call	e5359c <__unpack_f>
  e523dc:	d8800717 	ldw	r2,28(sp)
  e523e0:	9809883a 	mov	r4,r19
  e523e4:	880b883a 	mov	r5,r17
  e523e8:	d9800a04 	addi	r6,sp,40
  e523ec:	1080005c 	xori	r2,r2,1
  e523f0:	d8800715 	stw	r2,28(sp)
  e523f4:	0e521c00 	call	e521c0 <_fpadd_parts>
  e523f8:	1009883a 	mov	r4,r2
  e523fc:	0e5343c0 	call	e5343c <__pack_f>
  e52400:	dfc01017 	ldw	ra,64(sp)
  e52404:	dcc00f17 	ldw	r19,60(sp)
  e52408:	dc400e17 	ldw	r17,56(sp)
  e5240c:	dec01104 	addi	sp,sp,68
  e52410:	f800283a 	ret

00e52414 <__addsf3>:
  e52414:	deffef04 	addi	sp,sp,-68
  e52418:	dcc00f15 	stw	r19,60(sp)
  e5241c:	dcc00204 	addi	r19,sp,8
  e52420:	dc400e15 	stw	r17,56(sp)
  e52424:	d9000015 	stw	r4,0(sp)
  e52428:	d9400115 	stw	r5,4(sp)
  e5242c:	d809883a 	mov	r4,sp
  e52430:	980b883a 	mov	r5,r19
  e52434:	dc400604 	addi	r17,sp,24
  e52438:	dfc01015 	stw	ra,64(sp)
  e5243c:	0e5359c0 	call	e5359c <__unpack_f>
  e52440:	d9000104 	addi	r4,sp,4
  e52444:	880b883a 	mov	r5,r17
  e52448:	0e5359c0 	call	e5359c <__unpack_f>
  e5244c:	d9800a04 	addi	r6,sp,40
  e52450:	9809883a 	mov	r4,r19
  e52454:	880b883a 	mov	r5,r17
  e52458:	0e521c00 	call	e521c0 <_fpadd_parts>
  e5245c:	1009883a 	mov	r4,r2
  e52460:	0e5343c0 	call	e5343c <__pack_f>
  e52464:	dfc01017 	ldw	ra,64(sp)
  e52468:	dcc00f17 	ldw	r19,60(sp)
  e5246c:	dc400e17 	ldw	r17,56(sp)
  e52470:	dec01104 	addi	sp,sp,68
  e52474:	f800283a 	ret

00e52478 <__mulsf3>:
  e52478:	deffef04 	addi	sp,sp,-68
  e5247c:	dc400f15 	stw	r17,60(sp)
  e52480:	dc400204 	addi	r17,sp,8
  e52484:	dc000e15 	stw	r16,56(sp)
  e52488:	d9000015 	stw	r4,0(sp)
  e5248c:	d9400115 	stw	r5,4(sp)
  e52490:	d809883a 	mov	r4,sp
  e52494:	880b883a 	mov	r5,r17
  e52498:	dc000604 	addi	r16,sp,24
  e5249c:	dfc01015 	stw	ra,64(sp)
  e524a0:	0e5359c0 	call	e5359c <__unpack_f>
  e524a4:	d9000104 	addi	r4,sp,4
  e524a8:	800b883a 	mov	r5,r16
  e524ac:	0e5359c0 	call	e5359c <__unpack_f>
  e524b0:	d9000217 	ldw	r4,8(sp)
  e524b4:	00800044 	movi	r2,1
  e524b8:	01400104 	movi	r5,4
  e524bc:	1100142e 	bgeu	r2,r4,e52510 <__mulsf3+0x98>
  e524c0:	d8c00617 	ldw	r3,24(sp)
  e524c4:	10c0052e 	bgeu	r2,r3,e524dc <__mulsf3+0x64>
  e524c8:	21400f26 	beq	r4,r5,e52508 <__mulsf3+0x90>
  e524cc:	19405d26 	beq	r3,r5,e52644 <__mulsf3+0x1cc>
  e524d0:	00800084 	movi	r2,2
  e524d4:	20800e26 	beq	r4,r2,e52510 <__mulsf3+0x98>
  e524d8:	1880181e 	bne	r3,r2,e5253c <__mulsf3+0xc4>
  e524dc:	d8c00717 	ldw	r3,28(sp)
  e524e0:	d8800317 	ldw	r2,12(sp)
  e524e4:	8009883a 	mov	r4,r16
  e524e8:	10c4c03a 	cmpne	r2,r2,r3
  e524ec:	d8800715 	stw	r2,28(sp)
  e524f0:	0e5343c0 	call	e5343c <__pack_f>
  e524f4:	dfc01017 	ldw	ra,64(sp)
  e524f8:	dc400f17 	ldw	r17,60(sp)
  e524fc:	dc000e17 	ldw	r16,56(sp)
  e52500:	dec01104 	addi	sp,sp,68
  e52504:	f800283a 	ret
  e52508:	00800084 	movi	r2,2
  e5250c:	18804f26 	beq	r3,r2,e5264c <__mulsf3+0x1d4>
  e52510:	d8800317 	ldw	r2,12(sp)
  e52514:	d8c00717 	ldw	r3,28(sp)
  e52518:	8809883a 	mov	r4,r17
  e5251c:	10c4c03a 	cmpne	r2,r2,r3
  e52520:	d8800315 	stw	r2,12(sp)
  e52524:	0e5343c0 	call	e5343c <__pack_f>
  e52528:	dfc01017 	ldw	ra,64(sp)
  e5252c:	dc400f17 	ldw	r17,60(sp)
  e52530:	dc000e17 	ldw	r16,56(sp)
  e52534:	dec01104 	addi	sp,sp,68
  e52538:	f800283a 	ret
  e5253c:	d8800517 	ldw	r2,20(sp)
  e52540:	da000917 	ldw	r8,36(sp)
  e52544:	0013883a 	mov	r9,zero
  e52548:	0007883a 	mov	r3,zero
  e5254c:	480f883a 	mov	r7,r9
  e52550:	180b883a 	mov	r5,r3
  e52554:	400d883a 	mov	r6,r8
  e52558:	1009883a 	mov	r4,r2
  e5255c:	0e521280 	call	e52128 <__muldi3>
  e52560:	da800417 	ldw	r10,16(sp)
  e52564:	d9800817 	ldw	r6,32(sp)
  e52568:	da400317 	ldw	r9,12(sp)
  e5256c:	52800084 	addi	r10,r10,2
  e52570:	3295883a 	add	r10,r6,r10
  e52574:	d9800717 	ldw	r6,28(sp)
  e52578:	180b883a 	mov	r5,r3
  e5257c:	180f883a 	mov	r7,r3
  e52580:	4992c03a 	cmpne	r9,r9,r6
  e52584:	da400b15 	stw	r9,44(sp)
  e52588:	1007883a 	mov	r3,r2
  e5258c:	da800c15 	stw	r10,48(sp)
  e52590:	2800070e 	bge	r5,zero,e525b0 <__mulsf3+0x138>
  e52594:	2880004c 	andi	r2,r5,1
  e52598:	1005003a 	cmpeq	r2,r2,zero
  e5259c:	500d883a 	mov	r6,r10
  e525a0:	10001e26 	beq	r2,zero,e5261c <__mulsf3+0x1a4>
  e525a4:	380ed07a 	srli	r7,r7,1
  e525a8:	31800044 	addi	r6,r6,1
  e525ac:	d9800c15 	stw	r6,48(sp)
  e525b0:	01100034 	movhi	r4,16384
  e525b4:	213fffc4 	addi	r4,r4,-1
  e525b8:	21c00b36 	bltu	r4,r7,e525e8 <__mulsf3+0x170>
  e525bc:	d8800c17 	ldw	r2,48(sp)
  e525c0:	00000206 	br	e525cc <__mulsf3+0x154>
  e525c4:	18c7883a 	add	r3,r3,r3
  e525c8:	21c00636 	bltu	r4,r7,e525e4 <__mulsf3+0x16c>
  e525cc:	10bfffc4 	addi	r2,r2,-1
  e525d0:	39cf883a 	add	r7,r7,r7
  e525d4:	183ffb0e 	bge	r3,zero,e525c4 <__mulsf3+0x14c>
  e525d8:	39c00054 	ori	r7,r7,1
  e525dc:	18c7883a 	add	r3,r3,r3
  e525e0:	21fffa2e 	bgeu	r4,r7,e525cc <__mulsf3+0x154>
  e525e4:	d8800c15 	stw	r2,48(sp)
  e525e8:	39001fcc 	andi	r4,r7,127
  e525ec:	00801004 	movi	r2,64
  e525f0:	20800d26 	beq	r4,r2,e52628 <__mulsf3+0x1b0>
  e525f4:	008000c4 	movi	r2,3
  e525f8:	d9000a04 	addi	r4,sp,40
  e525fc:	d9c00d15 	stw	r7,52(sp)
  e52600:	d8800a15 	stw	r2,40(sp)
  e52604:	0e5343c0 	call	e5343c <__pack_f>
  e52608:	dfc01017 	ldw	ra,64(sp)
  e5260c:	dc400f17 	ldw	r17,60(sp)
  e52610:	dc000e17 	ldw	r16,56(sp)
  e52614:	dec01104 	addi	sp,sp,68
  e52618:	f800283a 	ret
  e5261c:	1804d07a 	srli	r2,r3,1
  e52620:	10e00034 	orhi	r3,r2,32768
  e52624:	003fdf06 	br	e525a4 <__mulsf3+0x12c>
  e52628:	3880200c 	andi	r2,r7,128
  e5262c:	103ff11e 	bne	r2,zero,e525f4 <__mulsf3+0x17c>
  e52630:	183ff026 	beq	r3,zero,e525f4 <__mulsf3+0x17c>
  e52634:	3907883a 	add	r3,r7,r4
  e52638:	00bfe004 	movi	r2,-128
  e5263c:	188e703a 	and	r7,r3,r2
  e52640:	003fec06 	br	e525f4 <__mulsf3+0x17c>
  e52644:	00800084 	movi	r2,2
  e52648:	20bfa41e 	bne	r4,r2,e524dc <__mulsf3+0x64>
  e5264c:	010039b4 	movhi	r4,230
  e52650:	21049f04 	addi	r4,r4,4732
  e52654:	003fb306 	br	e52524 <__mulsf3+0xac>

00e52658 <__divsf3>:
  e52658:	defff304 	addi	sp,sp,-52
  e5265c:	dc400b15 	stw	r17,44(sp)
  e52660:	dc400204 	addi	r17,sp,8
  e52664:	dc000a15 	stw	r16,40(sp)
  e52668:	d9000015 	stw	r4,0(sp)
  e5266c:	d9400115 	stw	r5,4(sp)
  e52670:	d809883a 	mov	r4,sp
  e52674:	880b883a 	mov	r5,r17
  e52678:	dc000604 	addi	r16,sp,24
  e5267c:	dfc00c15 	stw	ra,48(sp)
  e52680:	0e5359c0 	call	e5359c <__unpack_f>
  e52684:	d9000104 	addi	r4,sp,4
  e52688:	800b883a 	mov	r5,r16
  e5268c:	0e5359c0 	call	e5359c <__unpack_f>
  e52690:	d9000217 	ldw	r4,8(sp)
  e52694:	00800044 	movi	r2,1
  e52698:	01800104 	movi	r6,4
  e5269c:	11000a2e 	bgeu	r2,r4,e526c8 <__divsf3+0x70>
  e526a0:	d9400617 	ldw	r5,24(sp)
  e526a4:	1140432e 	bgeu	r2,r5,e527b4 <__divsf3+0x15c>
  e526a8:	d8800317 	ldw	r2,12(sp)
  e526ac:	d8c00717 	ldw	r3,28(sp)
  e526b0:	10c4f03a 	xor	r2,r2,r3
  e526b4:	d8800315 	stw	r2,12(sp)
  e526b8:	21800226 	beq	r4,r6,e526c4 <__divsf3+0x6c>
  e526bc:	00800084 	movi	r2,2
  e526c0:	2080101e 	bne	r4,r2,e52704 <__divsf3+0xac>
  e526c4:	29000726 	beq	r5,r4,e526e4 <__divsf3+0x8c>
  e526c8:	8809883a 	mov	r4,r17
  e526cc:	0e5343c0 	call	e5343c <__pack_f>
  e526d0:	dfc00c17 	ldw	ra,48(sp)
  e526d4:	dc400b17 	ldw	r17,44(sp)
  e526d8:	dc000a17 	ldw	r16,40(sp)
  e526dc:	dec00d04 	addi	sp,sp,52
  e526e0:	f800283a 	ret
  e526e4:	010039b4 	movhi	r4,230
  e526e8:	21049f04 	addi	r4,r4,4732
  e526ec:	0e5343c0 	call	e5343c <__pack_f>
  e526f0:	dfc00c17 	ldw	ra,48(sp)
  e526f4:	dc400b17 	ldw	r17,44(sp)
  e526f8:	dc000a17 	ldw	r16,40(sp)
  e526fc:	dec00d04 	addi	sp,sp,52
  e52700:	f800283a 	ret
  e52704:	29802d26 	beq	r5,r6,e527bc <__divsf3+0x164>
  e52708:	28801a26 	beq	r5,r2,e52774 <__divsf3+0x11c>
  e5270c:	d8c00417 	ldw	r3,16(sp)
  e52710:	d8800817 	ldw	r2,32(sp)
  e52714:	d9000517 	ldw	r4,20(sp)
  e52718:	d9800917 	ldw	r6,36(sp)
  e5271c:	1885c83a 	sub	r2,r3,r2
  e52720:	d8800415 	stw	r2,16(sp)
  e52724:	2180032e 	bgeu	r4,r6,e52734 <__divsf3+0xdc>
  e52728:	10bfffc4 	addi	r2,r2,-1
  e5272c:	d8800415 	stw	r2,16(sp)
  e52730:	2109883a 	add	r4,r4,r4
  e52734:	01500034 	movhi	r5,16384
  e52738:	0007883a 	mov	r3,zero
  e5273c:	0005883a 	mov	r2,zero
  e52740:	01c007c4 	movi	r7,31
  e52744:	10800044 	addi	r2,r2,1
  e52748:	21800236 	bltu	r4,r6,e52754 <__divsf3+0xfc>
  e5274c:	1946b03a 	or	r3,r3,r5
  e52750:	2189c83a 	sub	r4,r4,r6
  e52754:	280ad07a 	srli	r5,r5,1
  e52758:	2109883a 	add	r4,r4,r4
  e5275c:	11fff91e 	bne	r2,r7,e52744 <__divsf3+0xec>
  e52760:	19401fcc 	andi	r5,r3,127
  e52764:	00801004 	movi	r2,64
  e52768:	28800a26 	beq	r5,r2,e52794 <__divsf3+0x13c>
  e5276c:	d8c00515 	stw	r3,20(sp)
  e52770:	003fd506 	br	e526c8 <__divsf3+0x70>
  e52774:	8809883a 	mov	r4,r17
  e52778:	d9800215 	stw	r6,8(sp)
  e5277c:	0e5343c0 	call	e5343c <__pack_f>
  e52780:	dfc00c17 	ldw	ra,48(sp)
  e52784:	dc400b17 	ldw	r17,44(sp)
  e52788:	dc000a17 	ldw	r16,40(sp)
  e5278c:	dec00d04 	addi	sp,sp,52
  e52790:	f800283a 	ret
  e52794:	1880200c 	andi	r2,r3,128
  e52798:	103ff41e 	bne	r2,zero,e5276c <__divsf3+0x114>
  e5279c:	203ff326 	beq	r4,zero,e5276c <__divsf3+0x114>
  e527a0:	1947883a 	add	r3,r3,r5
  e527a4:	00bfe004 	movi	r2,-128
  e527a8:	1886703a 	and	r3,r3,r2
  e527ac:	d8c00515 	stw	r3,20(sp)
  e527b0:	003fc506 	br	e526c8 <__divsf3+0x70>
  e527b4:	8009883a 	mov	r4,r16
  e527b8:	003fc406 	br	e526cc <__divsf3+0x74>
  e527bc:	8809883a 	mov	r4,r17
  e527c0:	d8000515 	stw	zero,20(sp)
  e527c4:	d8000415 	stw	zero,16(sp)
  e527c8:	003fc006 	br	e526cc <__divsf3+0x74>

00e527cc <__eqsf2>:
  e527cc:	defff304 	addi	sp,sp,-52
  e527d0:	dc400b15 	stw	r17,44(sp)
  e527d4:	dc400204 	addi	r17,sp,8
  e527d8:	dc000a15 	stw	r16,40(sp)
  e527dc:	d9000015 	stw	r4,0(sp)
  e527e0:	d9400115 	stw	r5,4(sp)
  e527e4:	d809883a 	mov	r4,sp
  e527e8:	880b883a 	mov	r5,r17
  e527ec:	dc000604 	addi	r16,sp,24
  e527f0:	dfc00c15 	stw	ra,48(sp)
  e527f4:	0e5359c0 	call	e5359c <__unpack_f>
  e527f8:	d9000104 	addi	r4,sp,4
  e527fc:	800b883a 	mov	r5,r16
  e52800:	0e5359c0 	call	e5359c <__unpack_f>
  e52804:	d8800217 	ldw	r2,8(sp)
  e52808:	00c00044 	movi	r3,1
  e5280c:	180d883a 	mov	r6,r3
  e52810:	1880062e 	bgeu	r3,r2,e5282c <__eqsf2+0x60>
  e52814:	d8800617 	ldw	r2,24(sp)
  e52818:	8809883a 	mov	r4,r17
  e5281c:	800b883a 	mov	r5,r16
  e52820:	1880022e 	bgeu	r3,r2,e5282c <__eqsf2+0x60>
  e52824:	0e536640 	call	e53664 <__fpcmp_parts_f>
  e52828:	100d883a 	mov	r6,r2
  e5282c:	3005883a 	mov	r2,r6
  e52830:	dfc00c17 	ldw	ra,48(sp)
  e52834:	dc400b17 	ldw	r17,44(sp)
  e52838:	dc000a17 	ldw	r16,40(sp)
  e5283c:	dec00d04 	addi	sp,sp,52
  e52840:	f800283a 	ret

00e52844 <__gtsf2>:
  e52844:	defff304 	addi	sp,sp,-52
  e52848:	dc400b15 	stw	r17,44(sp)
  e5284c:	dc400204 	addi	r17,sp,8
  e52850:	dc000a15 	stw	r16,40(sp)
  e52854:	d9000015 	stw	r4,0(sp)
  e52858:	d9400115 	stw	r5,4(sp)
  e5285c:	d809883a 	mov	r4,sp
  e52860:	880b883a 	mov	r5,r17
  e52864:	dc000604 	addi	r16,sp,24
  e52868:	dfc00c15 	stw	ra,48(sp)
  e5286c:	0e5359c0 	call	e5359c <__unpack_f>
  e52870:	d9000104 	addi	r4,sp,4
  e52874:	800b883a 	mov	r5,r16
  e52878:	0e5359c0 	call	e5359c <__unpack_f>
  e5287c:	d8800217 	ldw	r2,8(sp)
  e52880:	00c00044 	movi	r3,1
  e52884:	01bfffc4 	movi	r6,-1
  e52888:	1880062e 	bgeu	r3,r2,e528a4 <__gtsf2+0x60>
  e5288c:	d8800617 	ldw	r2,24(sp)
  e52890:	8809883a 	mov	r4,r17
  e52894:	800b883a 	mov	r5,r16
  e52898:	1880022e 	bgeu	r3,r2,e528a4 <__gtsf2+0x60>
  e5289c:	0e536640 	call	e53664 <__fpcmp_parts_f>
  e528a0:	100d883a 	mov	r6,r2
  e528a4:	3005883a 	mov	r2,r6
  e528a8:	dfc00c17 	ldw	ra,48(sp)
  e528ac:	dc400b17 	ldw	r17,44(sp)
  e528b0:	dc000a17 	ldw	r16,40(sp)
  e528b4:	dec00d04 	addi	sp,sp,52
  e528b8:	f800283a 	ret

00e528bc <__ltsf2>:
  e528bc:	defff304 	addi	sp,sp,-52
  e528c0:	dc400b15 	stw	r17,44(sp)
  e528c4:	dc400204 	addi	r17,sp,8
  e528c8:	dc000a15 	stw	r16,40(sp)
  e528cc:	d9000015 	stw	r4,0(sp)
  e528d0:	d9400115 	stw	r5,4(sp)
  e528d4:	d809883a 	mov	r4,sp
  e528d8:	880b883a 	mov	r5,r17
  e528dc:	dc000604 	addi	r16,sp,24
  e528e0:	dfc00c15 	stw	ra,48(sp)
  e528e4:	0e5359c0 	call	e5359c <__unpack_f>
  e528e8:	d9000104 	addi	r4,sp,4
  e528ec:	800b883a 	mov	r5,r16
  e528f0:	0e5359c0 	call	e5359c <__unpack_f>
  e528f4:	d8800217 	ldw	r2,8(sp)
  e528f8:	00c00044 	movi	r3,1
  e528fc:	180d883a 	mov	r6,r3
  e52900:	1880062e 	bgeu	r3,r2,e5291c <__ltsf2+0x60>
  e52904:	d8800617 	ldw	r2,24(sp)
  e52908:	8809883a 	mov	r4,r17
  e5290c:	800b883a 	mov	r5,r16
  e52910:	1880022e 	bgeu	r3,r2,e5291c <__ltsf2+0x60>
  e52914:	0e536640 	call	e53664 <__fpcmp_parts_f>
  e52918:	100d883a 	mov	r6,r2
  e5291c:	3005883a 	mov	r2,r6
  e52920:	dfc00c17 	ldw	ra,48(sp)
  e52924:	dc400b17 	ldw	r17,44(sp)
  e52928:	dc000a17 	ldw	r16,40(sp)
  e5292c:	dec00d04 	addi	sp,sp,52
  e52930:	f800283a 	ret

00e52934 <__lesf2>:
  e52934:	defff304 	addi	sp,sp,-52
  e52938:	dc400b15 	stw	r17,44(sp)
  e5293c:	dc400204 	addi	r17,sp,8
  e52940:	dc000a15 	stw	r16,40(sp)
  e52944:	d9000015 	stw	r4,0(sp)
  e52948:	d9400115 	stw	r5,4(sp)
  e5294c:	d809883a 	mov	r4,sp
  e52950:	880b883a 	mov	r5,r17
  e52954:	dc000604 	addi	r16,sp,24
  e52958:	dfc00c15 	stw	ra,48(sp)
  e5295c:	0e5359c0 	call	e5359c <__unpack_f>
  e52960:	d9000104 	addi	r4,sp,4
  e52964:	800b883a 	mov	r5,r16
  e52968:	0e5359c0 	call	e5359c <__unpack_f>
  e5296c:	d8800217 	ldw	r2,8(sp)
  e52970:	00c00044 	movi	r3,1
  e52974:	180d883a 	mov	r6,r3
  e52978:	1880062e 	bgeu	r3,r2,e52994 <__lesf2+0x60>
  e5297c:	d8800617 	ldw	r2,24(sp)
  e52980:	8809883a 	mov	r4,r17
  e52984:	800b883a 	mov	r5,r16
  e52988:	1880022e 	bgeu	r3,r2,e52994 <__lesf2+0x60>
  e5298c:	0e536640 	call	e53664 <__fpcmp_parts_f>
  e52990:	100d883a 	mov	r6,r2
  e52994:	3005883a 	mov	r2,r6
  e52998:	dfc00c17 	ldw	ra,48(sp)
  e5299c:	dc400b17 	ldw	r17,44(sp)
  e529a0:	dc000a17 	ldw	r16,40(sp)
  e529a4:	dec00d04 	addi	sp,sp,52
  e529a8:	f800283a 	ret

00e529ac <__floatsisf>:
  e529ac:	2006d7fa 	srli	r3,r4,31
  e529b0:	defffa04 	addi	sp,sp,-24
  e529b4:	008000c4 	movi	r2,3
  e529b8:	dfc00515 	stw	ra,20(sp)
  e529bc:	dc000415 	stw	r16,16(sp)
  e529c0:	d8800015 	stw	r2,0(sp)
  e529c4:	d8c00115 	stw	r3,4(sp)
  e529c8:	2000081e 	bne	r4,zero,e529ec <__floatsisf+0x40>
  e529cc:	00800084 	movi	r2,2
  e529d0:	d8800015 	stw	r2,0(sp)
  e529d4:	d809883a 	mov	r4,sp
  e529d8:	0e5343c0 	call	e5343c <__pack_f>
  e529dc:	dfc00517 	ldw	ra,20(sp)
  e529e0:	dc000417 	ldw	r16,16(sp)
  e529e4:	dec00604 	addi	sp,sp,24
  e529e8:	f800283a 	ret
  e529ec:	00800784 	movi	r2,30
  e529f0:	1807003a 	cmpeq	r3,r3,zero
  e529f4:	d8800215 	stw	r2,8(sp)
  e529f8:	18000e1e 	bne	r3,zero,e52a34 <__floatsisf+0x88>
  e529fc:	00a00034 	movhi	r2,32768
  e52a00:	20800e26 	beq	r4,r2,e52a3c <__floatsisf+0x90>
  e52a04:	0121c83a 	sub	r16,zero,r4
  e52a08:	8009883a 	mov	r4,r16
  e52a0c:	dc000315 	stw	r16,12(sp)
  e52a10:	0e533bc0 	call	e533bc <__clzsi2>
  e52a14:	117fffc4 	addi	r5,r2,-1
  e52a18:	017fee0e 	bge	zero,r5,e529d4 <__floatsisf+0x28>
  e52a1c:	d8800217 	ldw	r2,8(sp)
  e52a20:	8146983a 	sll	r3,r16,r5
  e52a24:	1145c83a 	sub	r2,r2,r5
  e52a28:	d8c00315 	stw	r3,12(sp)
  e52a2c:	d8800215 	stw	r2,8(sp)
  e52a30:	003fe806 	br	e529d4 <__floatsisf+0x28>
  e52a34:	2021883a 	mov	r16,r4
  e52a38:	003ff306 	br	e52a08 <__floatsisf+0x5c>
  e52a3c:	00b3c034 	movhi	r2,52992
  e52a40:	003fe606 	br	e529dc <__floatsisf+0x30>

00e52a44 <__fixsfsi>:
  e52a44:	defffa04 	addi	sp,sp,-24
  e52a48:	d9000015 	stw	r4,0(sp)
  e52a4c:	d9400104 	addi	r5,sp,4
  e52a50:	d809883a 	mov	r4,sp
  e52a54:	dfc00515 	stw	ra,20(sp)
  e52a58:	0e5359c0 	call	e5359c <__unpack_f>
  e52a5c:	d8c00117 	ldw	r3,4(sp)
  e52a60:	00800084 	movi	r2,2
  e52a64:	1880041e 	bne	r3,r2,e52a78 <__fixsfsi+0x34>
  e52a68:	0005883a 	mov	r2,zero
  e52a6c:	dfc00517 	ldw	ra,20(sp)
  e52a70:	dec00604 	addi	sp,sp,24
  e52a74:	f800283a 	ret
  e52a78:	00800044 	movi	r2,1
  e52a7c:	10fffa2e 	bgeu	r2,r3,e52a68 <__fixsfsi+0x24>
  e52a80:	00800104 	movi	r2,4
  e52a84:	18800426 	beq	r3,r2,e52a98 <__fixsfsi+0x54>
  e52a88:	d8800317 	ldw	r2,12(sp)
  e52a8c:	103ff616 	blt	r2,zero,e52a68 <__fixsfsi+0x24>
  e52a90:	00c00784 	movi	r3,30
  e52a94:	1880070e 	bge	r3,r2,e52ab4 <__fixsfsi+0x70>
  e52a98:	d8800217 	ldw	r2,8(sp)
  e52a9c:	10000c1e 	bne	r2,zero,e52ad0 <__fixsfsi+0x8c>
  e52aa0:	00a00034 	movhi	r2,32768
  e52aa4:	10bfffc4 	addi	r2,r2,-1
  e52aa8:	dfc00517 	ldw	ra,20(sp)
  e52aac:	dec00604 	addi	sp,sp,24
  e52ab0:	f800283a 	ret
  e52ab4:	1885c83a 	sub	r2,r3,r2
  e52ab8:	d9000217 	ldw	r4,8(sp)
  e52abc:	d8c00417 	ldw	r3,16(sp)
  e52ac0:	1884d83a 	srl	r2,r3,r2
  e52ac4:	203fe926 	beq	r4,zero,e52a6c <__fixsfsi+0x28>
  e52ac8:	0085c83a 	sub	r2,zero,r2
  e52acc:	003fe706 	br	e52a6c <__fixsfsi+0x28>
  e52ad0:	00a00034 	movhi	r2,32768
  e52ad4:	003fe506 	br	e52a6c <__fixsfsi+0x28>

00e52ad8 <__extendsfdf2>:
  e52ad8:	defff904 	addi	sp,sp,-28
  e52adc:	d9000115 	stw	r4,4(sp)
  e52ae0:	d9400204 	addi	r5,sp,8
  e52ae4:	d9000104 	addi	r4,sp,4
  e52ae8:	dfc00615 	stw	ra,24(sp)
  e52aec:	0e5359c0 	call	e5359c <__unpack_f>
  e52af0:	d9c00517 	ldw	r7,20(sp)
  e52af4:	0011883a 	mov	r8,zero
  e52af8:	400697ba 	slli	r3,r8,30
  e52afc:	3812d0ba 	srli	r9,r7,2
  e52b00:	380497ba 	slli	r2,r7,30
  e52b04:	d9000217 	ldw	r4,8(sp)
  e52b08:	d9400317 	ldw	r5,12(sp)
  e52b0c:	d9800417 	ldw	r6,16(sp)
  e52b10:	48c6b03a 	or	r3,r9,r3
  e52b14:	100f883a 	mov	r7,r2
  e52b18:	d8c00015 	stw	r3,0(sp)
  e52b1c:	0e533100 	call	e53310 <__make_dp>
  e52b20:	dfc00617 	ldw	ra,24(sp)
  e52b24:	dec00704 	addi	sp,sp,28
  e52b28:	f800283a 	ret

00e52b2c <_fpadd_parts>:
  e52b2c:	defff804 	addi	sp,sp,-32
  e52b30:	dcc00315 	stw	r19,12(sp)
  e52b34:	2027883a 	mov	r19,r4
  e52b38:	21000017 	ldw	r4,0(r4)
  e52b3c:	00c00044 	movi	r3,1
  e52b40:	dd400515 	stw	r21,20(sp)
  e52b44:	dd000415 	stw	r20,16(sp)
  e52b48:	ddc00715 	stw	r23,28(sp)
  e52b4c:	dd800615 	stw	r22,24(sp)
  e52b50:	dc800215 	stw	r18,8(sp)
  e52b54:	dc400115 	stw	r17,4(sp)
  e52b58:	dc000015 	stw	r16,0(sp)
  e52b5c:	282b883a 	mov	r21,r5
  e52b60:	3029883a 	mov	r20,r6
  e52b64:	1900632e 	bgeu	r3,r4,e52cf4 <_fpadd_parts+0x1c8>
  e52b68:	28800017 	ldw	r2,0(r5)
  e52b6c:	1880812e 	bgeu	r3,r2,e52d74 <_fpadd_parts+0x248>
  e52b70:	00c00104 	movi	r3,4
  e52b74:	20c0dc26 	beq	r4,r3,e52ee8 <_fpadd_parts+0x3bc>
  e52b78:	10c07e26 	beq	r2,r3,e52d74 <_fpadd_parts+0x248>
  e52b7c:	00c00084 	movi	r3,2
  e52b80:	10c06726 	beq	r2,r3,e52d20 <_fpadd_parts+0x1f4>
  e52b84:	20c07b26 	beq	r4,r3,e52d74 <_fpadd_parts+0x248>
  e52b88:	9dc00217 	ldw	r23,8(r19)
  e52b8c:	28c00217 	ldw	r3,8(r5)
  e52b90:	9c400317 	ldw	r17,12(r19)
  e52b94:	2bc00317 	ldw	r15,12(r5)
  e52b98:	b8cdc83a 	sub	r6,r23,r3
  e52b9c:	9c800417 	ldw	r18,16(r19)
  e52ba0:	2c000417 	ldw	r16,16(r5)
  e52ba4:	3009883a 	mov	r4,r6
  e52ba8:	30009716 	blt	r6,zero,e52e08 <_fpadd_parts+0x2dc>
  e52bac:	00800fc4 	movi	r2,63
  e52bb0:	11806b16 	blt	r2,r6,e52d60 <_fpadd_parts+0x234>
  e52bb4:	0100a40e 	bge	zero,r4,e52e48 <_fpadd_parts+0x31c>
  e52bb8:	35bff804 	addi	r22,r6,-32
  e52bbc:	b000bc16 	blt	r22,zero,e52eb0 <_fpadd_parts+0x384>
  e52bc0:	8596d83a 	srl	r11,r16,r22
  e52bc4:	0019883a 	mov	r12,zero
  e52bc8:	0013883a 	mov	r9,zero
  e52bcc:	01000044 	movi	r4,1
  e52bd0:	0015883a 	mov	r10,zero
  e52bd4:	b000be16 	blt	r22,zero,e52ed0 <_fpadd_parts+0x3a4>
  e52bd8:	2590983a 	sll	r8,r4,r22
  e52bdc:	000f883a 	mov	r7,zero
  e52be0:	00bfffc4 	movi	r2,-1
  e52be4:	3889883a 	add	r4,r7,r2
  e52be8:	408b883a 	add	r5,r8,r2
  e52bec:	21cd803a 	cmpltu	r6,r4,r7
  e52bf0:	314b883a 	add	r5,r6,r5
  e52bf4:	7904703a 	and	r2,r15,r4
  e52bf8:	8146703a 	and	r3,r16,r5
  e52bfc:	10c4b03a 	or	r2,r2,r3
  e52c00:	10000226 	beq	r2,zero,e52c0c <_fpadd_parts+0xe0>
  e52c04:	02400044 	movi	r9,1
  e52c08:	0015883a 	mov	r10,zero
  e52c0c:	5a5eb03a 	or	r15,r11,r9
  e52c10:	62a0b03a 	or	r16,r12,r10
  e52c14:	99400117 	ldw	r5,4(r19)
  e52c18:	a8800117 	ldw	r2,4(r21)
  e52c1c:	28806e26 	beq	r5,r2,e52dd8 <_fpadd_parts+0x2ac>
  e52c20:	28006626 	beq	r5,zero,e52dbc <_fpadd_parts+0x290>
  e52c24:	7c45c83a 	sub	r2,r15,r17
  e52c28:	7889803a 	cmpltu	r4,r15,r2
  e52c2c:	8487c83a 	sub	r3,r16,r18
  e52c30:	1909c83a 	sub	r4,r3,r4
  e52c34:	100d883a 	mov	r6,r2
  e52c38:	200f883a 	mov	r7,r4
  e52c3c:	38007716 	blt	r7,zero,e52e1c <_fpadd_parts+0x2f0>
  e52c40:	a5c00215 	stw	r23,8(r20)
  e52c44:	a1c00415 	stw	r7,16(r20)
  e52c48:	a0000115 	stw	zero,4(r20)
  e52c4c:	a1800315 	stw	r6,12(r20)
  e52c50:	a2000317 	ldw	r8,12(r20)
  e52c54:	a2400417 	ldw	r9,16(r20)
  e52c58:	00bfffc4 	movi	r2,-1
  e52c5c:	408b883a 	add	r5,r8,r2
  e52c60:	2a09803a 	cmpltu	r4,r5,r8
  e52c64:	488d883a 	add	r6,r9,r2
  e52c68:	01c40034 	movhi	r7,4096
  e52c6c:	39ffffc4 	addi	r7,r7,-1
  e52c70:	218d883a 	add	r6,r4,r6
  e52c74:	39801736 	bltu	r7,r6,e52cd4 <_fpadd_parts+0x1a8>
  e52c78:	31c06526 	beq	r6,r7,e52e10 <_fpadd_parts+0x2e4>
  e52c7c:	a3000217 	ldw	r12,8(r20)
  e52c80:	4209883a 	add	r4,r8,r8
  e52c84:	00bfffc4 	movi	r2,-1
  e52c88:	220f803a 	cmpltu	r7,r4,r8
  e52c8c:	4a4b883a 	add	r5,r9,r9
  e52c90:	394f883a 	add	r7,r7,r5
  e52c94:	2095883a 	add	r10,r4,r2
  e52c98:	3897883a 	add	r11,r7,r2
  e52c9c:	510d803a 	cmpltu	r6,r10,r4
  e52ca0:	6099883a 	add	r12,r12,r2
  e52ca4:	32d7883a 	add	r11,r6,r11
  e52ca8:	00840034 	movhi	r2,4096
  e52cac:	10bfffc4 	addi	r2,r2,-1
  e52cb0:	2011883a 	mov	r8,r4
  e52cb4:	3813883a 	mov	r9,r7
  e52cb8:	a1000315 	stw	r4,12(r20)
  e52cbc:	a1c00415 	stw	r7,16(r20)
  e52cc0:	a3000215 	stw	r12,8(r20)
  e52cc4:	12c00336 	bltu	r2,r11,e52cd4 <_fpadd_parts+0x1a8>
  e52cc8:	58bfed1e 	bne	r11,r2,e52c80 <_fpadd_parts+0x154>
  e52ccc:	00bfff84 	movi	r2,-2
  e52cd0:	12bfeb2e 	bgeu	r2,r10,e52c80 <_fpadd_parts+0x154>
  e52cd4:	a2800417 	ldw	r10,16(r20)
  e52cd8:	008000c4 	movi	r2,3
  e52cdc:	00c80034 	movhi	r3,8192
  e52ce0:	18ffffc4 	addi	r3,r3,-1
  e52ce4:	a2400317 	ldw	r9,12(r20)
  e52ce8:	a0800015 	stw	r2,0(r20)
  e52cec:	1a802336 	bltu	r3,r10,e52d7c <_fpadd_parts+0x250>
  e52cf0:	a027883a 	mov	r19,r20
  e52cf4:	9805883a 	mov	r2,r19
  e52cf8:	ddc00717 	ldw	r23,28(sp)
  e52cfc:	dd800617 	ldw	r22,24(sp)
  e52d00:	dd400517 	ldw	r21,20(sp)
  e52d04:	dd000417 	ldw	r20,16(sp)
  e52d08:	dcc00317 	ldw	r19,12(sp)
  e52d0c:	dc800217 	ldw	r18,8(sp)
  e52d10:	dc400117 	ldw	r17,4(sp)
  e52d14:	dc000017 	ldw	r16,0(sp)
  e52d18:	dec00804 	addi	sp,sp,32
  e52d1c:	f800283a 	ret
  e52d20:	20fff41e 	bne	r4,r3,e52cf4 <_fpadd_parts+0x1c8>
  e52d24:	31000015 	stw	r4,0(r6)
  e52d28:	98800117 	ldw	r2,4(r19)
  e52d2c:	30800115 	stw	r2,4(r6)
  e52d30:	98c00217 	ldw	r3,8(r19)
  e52d34:	30c00215 	stw	r3,8(r6)
  e52d38:	98800317 	ldw	r2,12(r19)
  e52d3c:	30800315 	stw	r2,12(r6)
  e52d40:	98c00417 	ldw	r3,16(r19)
  e52d44:	30c00415 	stw	r3,16(r6)
  e52d48:	98800117 	ldw	r2,4(r19)
  e52d4c:	28c00117 	ldw	r3,4(r5)
  e52d50:	3027883a 	mov	r19,r6
  e52d54:	10c4703a 	and	r2,r2,r3
  e52d58:	30800115 	stw	r2,4(r6)
  e52d5c:	003fe506 	br	e52cf4 <_fpadd_parts+0x1c8>
  e52d60:	1dc02616 	blt	r3,r23,e52dfc <_fpadd_parts+0x2d0>
  e52d64:	0023883a 	mov	r17,zero
  e52d68:	182f883a 	mov	r23,r3
  e52d6c:	0025883a 	mov	r18,zero
  e52d70:	003fa806 	br	e52c14 <_fpadd_parts+0xe8>
  e52d74:	a827883a 	mov	r19,r21
  e52d78:	003fde06 	br	e52cf4 <_fpadd_parts+0x1c8>
  e52d7c:	01800044 	movi	r6,1
  e52d80:	500497fa 	slli	r2,r10,31
  e52d84:	4808d07a 	srli	r4,r9,1
  e52d88:	518ad83a 	srl	r5,r10,r6
  e52d8c:	a2000217 	ldw	r8,8(r20)
  e52d90:	1108b03a 	or	r4,r2,r4
  e52d94:	0007883a 	mov	r3,zero
  e52d98:	4984703a 	and	r2,r9,r6
  e52d9c:	208cb03a 	or	r6,r4,r2
  e52da0:	28ceb03a 	or	r7,r5,r3
  e52da4:	42000044 	addi	r8,r8,1
  e52da8:	a027883a 	mov	r19,r20
  e52dac:	a1c00415 	stw	r7,16(r20)
  e52db0:	a2000215 	stw	r8,8(r20)
  e52db4:	a1800315 	stw	r6,12(r20)
  e52db8:	003fce06 	br	e52cf4 <_fpadd_parts+0x1c8>
  e52dbc:	8bc5c83a 	sub	r2,r17,r15
  e52dc0:	8889803a 	cmpltu	r4,r17,r2
  e52dc4:	9407c83a 	sub	r3,r18,r16
  e52dc8:	1909c83a 	sub	r4,r3,r4
  e52dcc:	100d883a 	mov	r6,r2
  e52dd0:	200f883a 	mov	r7,r4
  e52dd4:	003f9906 	br	e52c3c <_fpadd_parts+0x110>
  e52dd8:	7c45883a 	add	r2,r15,r17
  e52ddc:	13c9803a 	cmpltu	r4,r2,r15
  e52de0:	8487883a 	add	r3,r16,r18
  e52de4:	20c9883a 	add	r4,r4,r3
  e52de8:	a1400115 	stw	r5,4(r20)
  e52dec:	a5c00215 	stw	r23,8(r20)
  e52df0:	a0800315 	stw	r2,12(r20)
  e52df4:	a1000415 	stw	r4,16(r20)
  e52df8:	003fb606 	br	e52cd4 <_fpadd_parts+0x1a8>
  e52dfc:	001f883a 	mov	r15,zero
  e52e00:	0021883a 	mov	r16,zero
  e52e04:	003f8306 	br	e52c14 <_fpadd_parts+0xe8>
  e52e08:	018dc83a 	sub	r6,zero,r6
  e52e0c:	003f6706 	br	e52bac <_fpadd_parts+0x80>
  e52e10:	00bfff84 	movi	r2,-2
  e52e14:	117faf36 	bltu	r2,r5,e52cd4 <_fpadd_parts+0x1a8>
  e52e18:	003f9806 	br	e52c7c <_fpadd_parts+0x150>
  e52e1c:	0005883a 	mov	r2,zero
  e52e20:	1189c83a 	sub	r4,r2,r6
  e52e24:	1105803a 	cmpltu	r2,r2,r4
  e52e28:	01cbc83a 	sub	r5,zero,r7
  e52e2c:	2885c83a 	sub	r2,r5,r2
  e52e30:	01800044 	movi	r6,1
  e52e34:	a1800115 	stw	r6,4(r20)
  e52e38:	a5c00215 	stw	r23,8(r20)
  e52e3c:	a1000315 	stw	r4,12(r20)
  e52e40:	a0800415 	stw	r2,16(r20)
  e52e44:	003f8206 	br	e52c50 <_fpadd_parts+0x124>
  e52e48:	203f7226 	beq	r4,zero,e52c14 <_fpadd_parts+0xe8>
  e52e4c:	35bff804 	addi	r22,r6,-32
  e52e50:	b9af883a 	add	r23,r23,r6
  e52e54:	b0003116 	blt	r22,zero,e52f1c <_fpadd_parts+0x3f0>
  e52e58:	959ad83a 	srl	r13,r18,r22
  e52e5c:	001d883a 	mov	r14,zero
  e52e60:	000f883a 	mov	r7,zero
  e52e64:	01000044 	movi	r4,1
  e52e68:	0011883a 	mov	r8,zero
  e52e6c:	b0002516 	blt	r22,zero,e52f04 <_fpadd_parts+0x3d8>
  e52e70:	2594983a 	sll	r10,r4,r22
  e52e74:	0013883a 	mov	r9,zero
  e52e78:	00bfffc4 	movi	r2,-1
  e52e7c:	4889883a 	add	r4,r9,r2
  e52e80:	508b883a 	add	r5,r10,r2
  e52e84:	224d803a 	cmpltu	r6,r4,r9
  e52e88:	314b883a 	add	r5,r6,r5
  e52e8c:	8904703a 	and	r2,r17,r4
  e52e90:	9146703a 	and	r3,r18,r5
  e52e94:	10c4b03a 	or	r2,r2,r3
  e52e98:	10000226 	beq	r2,zero,e52ea4 <_fpadd_parts+0x378>
  e52e9c:	01c00044 	movi	r7,1
  e52ea0:	0011883a 	mov	r8,zero
  e52ea4:	69e2b03a 	or	r17,r13,r7
  e52ea8:	7224b03a 	or	r18,r14,r8
  e52eac:	003f5906 	br	e52c14 <_fpadd_parts+0xe8>
  e52eb0:	8407883a 	add	r3,r16,r16
  e52eb4:	008007c4 	movi	r2,31
  e52eb8:	1185c83a 	sub	r2,r2,r6
  e52ebc:	1886983a 	sll	r3,r3,r2
  e52ec0:	7996d83a 	srl	r11,r15,r6
  e52ec4:	8198d83a 	srl	r12,r16,r6
  e52ec8:	1ad6b03a 	or	r11,r3,r11
  e52ecc:	003f3e06 	br	e52bc8 <_fpadd_parts+0x9c>
  e52ed0:	2006d07a 	srli	r3,r4,1
  e52ed4:	008007c4 	movi	r2,31
  e52ed8:	1185c83a 	sub	r2,r2,r6
  e52edc:	1890d83a 	srl	r8,r3,r2
  e52ee0:	218e983a 	sll	r7,r4,r6
  e52ee4:	003f3e06 	br	e52be0 <_fpadd_parts+0xb4>
  e52ee8:	113f821e 	bne	r2,r4,e52cf4 <_fpadd_parts+0x1c8>
  e52eec:	28c00117 	ldw	r3,4(r5)
  e52ef0:	98800117 	ldw	r2,4(r19)
  e52ef4:	10ff7f26 	beq	r2,r3,e52cf4 <_fpadd_parts+0x1c8>
  e52ef8:	04c039b4 	movhi	r19,230
  e52efc:	9cc4a304 	addi	r19,r19,4748
  e52f00:	003f7c06 	br	e52cf4 <_fpadd_parts+0x1c8>
  e52f04:	2006d07a 	srli	r3,r4,1
  e52f08:	008007c4 	movi	r2,31
  e52f0c:	1185c83a 	sub	r2,r2,r6
  e52f10:	1894d83a 	srl	r10,r3,r2
  e52f14:	2192983a 	sll	r9,r4,r6
  e52f18:	003fd706 	br	e52e78 <_fpadd_parts+0x34c>
  e52f1c:	9487883a 	add	r3,r18,r18
  e52f20:	008007c4 	movi	r2,31
  e52f24:	1185c83a 	sub	r2,r2,r6
  e52f28:	1886983a 	sll	r3,r3,r2
  e52f2c:	899ad83a 	srl	r13,r17,r6
  e52f30:	919cd83a 	srl	r14,r18,r6
  e52f34:	1b5ab03a 	or	r13,r3,r13
  e52f38:	003fc906 	br	e52e60 <_fpadd_parts+0x334>

00e52f3c <__subdf3>:
  e52f3c:	deffea04 	addi	sp,sp,-88
  e52f40:	dcc01415 	stw	r19,80(sp)
  e52f44:	dcc00404 	addi	r19,sp,16
  e52f48:	2011883a 	mov	r8,r4
  e52f4c:	2813883a 	mov	r9,r5
  e52f50:	dc401315 	stw	r17,76(sp)
  e52f54:	d809883a 	mov	r4,sp
  e52f58:	980b883a 	mov	r5,r19
  e52f5c:	dc400904 	addi	r17,sp,36
  e52f60:	dfc01515 	stw	ra,84(sp)
  e52f64:	da400115 	stw	r9,4(sp)
  e52f68:	d9c00315 	stw	r7,12(sp)
  e52f6c:	da000015 	stw	r8,0(sp)
  e52f70:	d9800215 	stw	r6,8(sp)
  e52f74:	0e53a4c0 	call	e53a4c <__unpack_d>
  e52f78:	d9000204 	addi	r4,sp,8
  e52f7c:	880b883a 	mov	r5,r17
  e52f80:	0e53a4c0 	call	e53a4c <__unpack_d>
  e52f84:	d8800a17 	ldw	r2,40(sp)
  e52f88:	880b883a 	mov	r5,r17
  e52f8c:	9809883a 	mov	r4,r19
  e52f90:	d9800e04 	addi	r6,sp,56
  e52f94:	1080005c 	xori	r2,r2,1
  e52f98:	d8800a15 	stw	r2,40(sp)
  e52f9c:	0e52b2c0 	call	e52b2c <_fpadd_parts>
  e52fa0:	1009883a 	mov	r4,r2
  e52fa4:	0e537380 	call	e53738 <__pack_d>
  e52fa8:	dfc01517 	ldw	ra,84(sp)
  e52fac:	dcc01417 	ldw	r19,80(sp)
  e52fb0:	dc401317 	ldw	r17,76(sp)
  e52fb4:	dec01604 	addi	sp,sp,88
  e52fb8:	f800283a 	ret

00e52fbc <__adddf3>:
  e52fbc:	deffea04 	addi	sp,sp,-88
  e52fc0:	dcc01415 	stw	r19,80(sp)
  e52fc4:	dcc00404 	addi	r19,sp,16
  e52fc8:	2011883a 	mov	r8,r4
  e52fcc:	2813883a 	mov	r9,r5
  e52fd0:	dc401315 	stw	r17,76(sp)
  e52fd4:	d809883a 	mov	r4,sp
  e52fd8:	980b883a 	mov	r5,r19
  e52fdc:	dc400904 	addi	r17,sp,36
  e52fe0:	dfc01515 	stw	ra,84(sp)
  e52fe4:	da400115 	stw	r9,4(sp)
  e52fe8:	d9c00315 	stw	r7,12(sp)
  e52fec:	da000015 	stw	r8,0(sp)
  e52ff0:	d9800215 	stw	r6,8(sp)
  e52ff4:	0e53a4c0 	call	e53a4c <__unpack_d>
  e52ff8:	d9000204 	addi	r4,sp,8
  e52ffc:	880b883a 	mov	r5,r17
  e53000:	0e53a4c0 	call	e53a4c <__unpack_d>
  e53004:	d9800e04 	addi	r6,sp,56
  e53008:	9809883a 	mov	r4,r19
  e5300c:	880b883a 	mov	r5,r17
  e53010:	0e52b2c0 	call	e52b2c <_fpadd_parts>
  e53014:	1009883a 	mov	r4,r2
  e53018:	0e537380 	call	e53738 <__pack_d>
  e5301c:	dfc01517 	ldw	ra,84(sp)
  e53020:	dcc01417 	ldw	r19,80(sp)
  e53024:	dc401317 	ldw	r17,76(sp)
  e53028:	dec01604 	addi	sp,sp,88
  e5302c:	f800283a 	ret

00e53030 <__divdf3>:
  e53030:	deffed04 	addi	sp,sp,-76
  e53034:	dcc01115 	stw	r19,68(sp)
  e53038:	dcc00404 	addi	r19,sp,16
  e5303c:	2011883a 	mov	r8,r4
  e53040:	2813883a 	mov	r9,r5
  e53044:	dc000e15 	stw	r16,56(sp)
  e53048:	d809883a 	mov	r4,sp
  e5304c:	980b883a 	mov	r5,r19
  e53050:	dc000904 	addi	r16,sp,36
  e53054:	dfc01215 	stw	ra,72(sp)
  e53058:	da400115 	stw	r9,4(sp)
  e5305c:	d9c00315 	stw	r7,12(sp)
  e53060:	da000015 	stw	r8,0(sp)
  e53064:	d9800215 	stw	r6,8(sp)
  e53068:	dc801015 	stw	r18,64(sp)
  e5306c:	dc400f15 	stw	r17,60(sp)
  e53070:	0e53a4c0 	call	e53a4c <__unpack_d>
  e53074:	d9000204 	addi	r4,sp,8
  e53078:	800b883a 	mov	r5,r16
  e5307c:	0e53a4c0 	call	e53a4c <__unpack_d>
  e53080:	d9000417 	ldw	r4,16(sp)
  e53084:	00800044 	movi	r2,1
  e53088:	11000b2e 	bgeu	r2,r4,e530b8 <__divdf3+0x88>
  e5308c:	d9400917 	ldw	r5,36(sp)
  e53090:	1140762e 	bgeu	r2,r5,e5326c <__divdf3+0x23c>
  e53094:	d8800517 	ldw	r2,20(sp)
  e53098:	d8c00a17 	ldw	r3,40(sp)
  e5309c:	01800104 	movi	r6,4
  e530a0:	10c4f03a 	xor	r2,r2,r3
  e530a4:	d8800515 	stw	r2,20(sp)
  e530a8:	21800226 	beq	r4,r6,e530b4 <__divdf3+0x84>
  e530ac:	00800084 	movi	r2,2
  e530b0:	2080141e 	bne	r4,r2,e53104 <__divdf3+0xd4>
  e530b4:	29000926 	beq	r5,r4,e530dc <__divdf3+0xac>
  e530b8:	9809883a 	mov	r4,r19
  e530bc:	0e537380 	call	e53738 <__pack_d>
  e530c0:	dfc01217 	ldw	ra,72(sp)
  e530c4:	dcc01117 	ldw	r19,68(sp)
  e530c8:	dc801017 	ldw	r18,64(sp)
  e530cc:	dc400f17 	ldw	r17,60(sp)
  e530d0:	dc000e17 	ldw	r16,56(sp)
  e530d4:	dec01304 	addi	sp,sp,76
  e530d8:	f800283a 	ret
  e530dc:	010039b4 	movhi	r4,230
  e530e0:	2104a304 	addi	r4,r4,4748
  e530e4:	0e537380 	call	e53738 <__pack_d>
  e530e8:	dfc01217 	ldw	ra,72(sp)
  e530ec:	dcc01117 	ldw	r19,68(sp)
  e530f0:	dc801017 	ldw	r18,64(sp)
  e530f4:	dc400f17 	ldw	r17,60(sp)
  e530f8:	dc000e17 	ldw	r16,56(sp)
  e530fc:	dec01304 	addi	sp,sp,76
  e53100:	f800283a 	ret
  e53104:	29805b26 	beq	r5,r6,e53274 <__divdf3+0x244>
  e53108:	28802d26 	beq	r5,r2,e531c0 <__divdf3+0x190>
  e5310c:	d8c00617 	ldw	r3,24(sp)
  e53110:	d8800b17 	ldw	r2,44(sp)
  e53114:	d9c00817 	ldw	r7,32(sp)
  e53118:	dc400d17 	ldw	r17,52(sp)
  e5311c:	188bc83a 	sub	r5,r3,r2
  e53120:	d9800717 	ldw	r6,28(sp)
  e53124:	dc000c17 	ldw	r16,48(sp)
  e53128:	d9400615 	stw	r5,24(sp)
  e5312c:	3c403836 	bltu	r7,r17,e53210 <__divdf3+0x1e0>
  e53130:	89c03626 	beq	r17,r7,e5320c <__divdf3+0x1dc>
  e53134:	0015883a 	mov	r10,zero
  e53138:	001d883a 	mov	r14,zero
  e5313c:	02c40034 	movhi	r11,4096
  e53140:	001f883a 	mov	r15,zero
  e53144:	003f883a 	mov	ra,zero
  e53148:	04800f44 	movi	r18,61
  e5314c:	00000f06 	br	e5318c <__divdf3+0x15c>
  e53150:	601d883a 	mov	r14,r12
  e53154:	681f883a 	mov	r15,r13
  e53158:	400d883a 	mov	r6,r8
  e5315c:	100f883a 	mov	r7,r2
  e53160:	3191883a 	add	r8,r6,r6
  e53164:	5808d07a 	srli	r4,r11,1
  e53168:	4185803a 	cmpltu	r2,r8,r6
  e5316c:	39d3883a 	add	r9,r7,r7
  e53170:	28c6b03a 	or	r3,r5,r3
  e53174:	1245883a 	add	r2,r2,r9
  e53178:	1815883a 	mov	r10,r3
  e5317c:	2017883a 	mov	r11,r4
  e53180:	400d883a 	mov	r6,r8
  e53184:	100f883a 	mov	r7,r2
  e53188:	fc801726 	beq	ra,r18,e531e8 <__divdf3+0x1b8>
  e5318c:	580a97fa 	slli	r5,r11,31
  e53190:	5006d07a 	srli	r3,r10,1
  e53194:	ffc00044 	addi	ra,ra,1
  e53198:	3c7ff136 	bltu	r7,r17,e53160 <__divdf3+0x130>
  e5319c:	3411c83a 	sub	r8,r6,r16
  e531a0:	3205803a 	cmpltu	r2,r6,r8
  e531a4:	3c53c83a 	sub	r9,r7,r17
  e531a8:	7298b03a 	or	r12,r14,r10
  e531ac:	7adab03a 	or	r13,r15,r11
  e531b0:	4885c83a 	sub	r2,r9,r2
  e531b4:	89ffe61e 	bne	r17,r7,e53150 <__divdf3+0x120>
  e531b8:	343fe936 	bltu	r6,r16,e53160 <__divdf3+0x130>
  e531bc:	003fe406 	br	e53150 <__divdf3+0x120>
  e531c0:	9809883a 	mov	r4,r19
  e531c4:	d9800415 	stw	r6,16(sp)
  e531c8:	0e537380 	call	e53738 <__pack_d>
  e531cc:	dfc01217 	ldw	ra,72(sp)
  e531d0:	dcc01117 	ldw	r19,68(sp)
  e531d4:	dc801017 	ldw	r18,64(sp)
  e531d8:	dc400f17 	ldw	r17,60(sp)
  e531dc:	dc000e17 	ldw	r16,56(sp)
  e531e0:	dec01304 	addi	sp,sp,76
  e531e4:	f800283a 	ret
  e531e8:	00803fc4 	movi	r2,255
  e531ec:	7090703a 	and	r8,r14,r2
  e531f0:	00802004 	movi	r2,128
  e531f4:	0007883a 	mov	r3,zero
  e531f8:	0013883a 	mov	r9,zero
  e531fc:	40800d26 	beq	r8,r2,e53234 <__divdf3+0x204>
  e53200:	dbc00815 	stw	r15,32(sp)
  e53204:	db800715 	stw	r14,28(sp)
  e53208:	003fab06 	br	e530b8 <__divdf3+0x88>
  e5320c:	343fc92e 	bgeu	r6,r16,e53134 <__divdf3+0x104>
  e53210:	3185883a 	add	r2,r6,r6
  e53214:	1189803a 	cmpltu	r4,r2,r6
  e53218:	39c7883a 	add	r3,r7,r7
  e5321c:	20c9883a 	add	r4,r4,r3
  e53220:	297fffc4 	addi	r5,r5,-1
  e53224:	100d883a 	mov	r6,r2
  e53228:	200f883a 	mov	r7,r4
  e5322c:	d9400615 	stw	r5,24(sp)
  e53230:	003fc006 	br	e53134 <__divdf3+0x104>
  e53234:	483ff21e 	bne	r9,zero,e53200 <__divdf3+0x1d0>
  e53238:	01004004 	movi	r4,256
  e5323c:	7104703a 	and	r2,r14,r4
  e53240:	10c4b03a 	or	r2,r2,r3
  e53244:	103fee1e 	bne	r2,zero,e53200 <__divdf3+0x1d0>
  e53248:	31c4b03a 	or	r2,r6,r7
  e5324c:	103fec26 	beq	r2,zero,e53200 <__divdf3+0x1d0>
  e53250:	7205883a 	add	r2,r14,r8
  e53254:	1391803a 	cmpltu	r8,r2,r14
  e53258:	43d1883a 	add	r8,r8,r15
  e5325c:	013fc004 	movi	r4,-256
  e53260:	111c703a 	and	r14,r2,r4
  e53264:	401f883a 	mov	r15,r8
  e53268:	003fe506 	br	e53200 <__divdf3+0x1d0>
  e5326c:	8009883a 	mov	r4,r16
  e53270:	003f9206 	br	e530bc <__divdf3+0x8c>
  e53274:	9809883a 	mov	r4,r19
  e53278:	d8000715 	stw	zero,28(sp)
  e5327c:	d8000815 	stw	zero,32(sp)
  e53280:	d8000615 	stw	zero,24(sp)
  e53284:	003f8d06 	br	e530bc <__divdf3+0x8c>

00e53288 <__nedf2>:
  e53288:	deffef04 	addi	sp,sp,-68
  e5328c:	dc400f15 	stw	r17,60(sp)
  e53290:	dc400404 	addi	r17,sp,16
  e53294:	2005883a 	mov	r2,r4
  e53298:	2807883a 	mov	r3,r5
  e5329c:	dc000e15 	stw	r16,56(sp)
  e532a0:	d809883a 	mov	r4,sp
  e532a4:	880b883a 	mov	r5,r17
  e532a8:	dc000904 	addi	r16,sp,36
  e532ac:	d8c00115 	stw	r3,4(sp)
  e532b0:	d8800015 	stw	r2,0(sp)
  e532b4:	d9800215 	stw	r6,8(sp)
  e532b8:	dfc01015 	stw	ra,64(sp)
  e532bc:	d9c00315 	stw	r7,12(sp)
  e532c0:	0e53a4c0 	call	e53a4c <__unpack_d>
  e532c4:	d9000204 	addi	r4,sp,8
  e532c8:	800b883a 	mov	r5,r16
  e532cc:	0e53a4c0 	call	e53a4c <__unpack_d>
  e532d0:	d8800417 	ldw	r2,16(sp)
  e532d4:	00c00044 	movi	r3,1
  e532d8:	180d883a 	mov	r6,r3
  e532dc:	1880062e 	bgeu	r3,r2,e532f8 <__nedf2+0x70>
  e532e0:	d8800917 	ldw	r2,36(sp)
  e532e4:	8809883a 	mov	r4,r17
  e532e8:	800b883a 	mov	r5,r16
  e532ec:	1880022e 	bgeu	r3,r2,e532f8 <__nedf2+0x70>
  e532f0:	0e53b840 	call	e53b84 <__fpcmp_parts_d>
  e532f4:	100d883a 	mov	r6,r2
  e532f8:	3005883a 	mov	r2,r6
  e532fc:	dfc01017 	ldw	ra,64(sp)
  e53300:	dc400f17 	ldw	r17,60(sp)
  e53304:	dc000e17 	ldw	r16,56(sp)
  e53308:	dec01104 	addi	sp,sp,68
  e5330c:	f800283a 	ret

00e53310 <__make_dp>:
  e53310:	defff904 	addi	sp,sp,-28
  e53314:	d8c00717 	ldw	r3,28(sp)
  e53318:	d9000015 	stw	r4,0(sp)
  e5331c:	d809883a 	mov	r4,sp
  e53320:	dfc00515 	stw	ra,20(sp)
  e53324:	d9c00615 	stw	r7,24(sp)
  e53328:	d9400115 	stw	r5,4(sp)
  e5332c:	d9800215 	stw	r6,8(sp)
  e53330:	d8c00415 	stw	r3,16(sp)
  e53334:	d9c00315 	stw	r7,12(sp)
  e53338:	0e537380 	call	e53738 <__pack_d>
  e5333c:	dfc00517 	ldw	ra,20(sp)
  e53340:	dec00704 	addi	sp,sp,28
  e53344:	f800283a 	ret

00e53348 <__truncdfsf2>:
  e53348:	defff804 	addi	sp,sp,-32
  e5334c:	2005883a 	mov	r2,r4
  e53350:	2807883a 	mov	r3,r5
  e53354:	d809883a 	mov	r4,sp
  e53358:	d9400204 	addi	r5,sp,8
  e5335c:	d8c00115 	stw	r3,4(sp)
  e53360:	d8800015 	stw	r2,0(sp)
  e53364:	dfc00715 	stw	ra,28(sp)
  e53368:	0e53a4c0 	call	e53a4c <__unpack_d>
  e5336c:	d9c00517 	ldw	r7,20(sp)
  e53370:	da000617 	ldw	r8,24(sp)
  e53374:	02d00034 	movhi	r11,16384
  e53378:	5affffc4 	addi	r11,r11,-1
  e5337c:	3812d7ba 	srli	r9,r7,30
  e53380:	401a90ba 	slli	r13,r8,2
  e53384:	3ac4703a 	and	r2,r7,r11
  e53388:	0007883a 	mov	r3,zero
  e5338c:	6a52b03a 	or	r9,r13,r9
  e53390:	10c4b03a 	or	r2,r2,r3
  e53394:	d9000217 	ldw	r4,8(sp)
  e53398:	d9400317 	ldw	r5,12(sp)
  e5339c:	d9800417 	ldw	r6,16(sp)
  e533a0:	480f883a 	mov	r7,r9
  e533a4:	10000126 	beq	r2,zero,e533ac <__truncdfsf2+0x64>
  e533a8:	49c00054 	ori	r7,r9,1
  e533ac:	0e5370c0 	call	e5370c <__make_fp>
  e533b0:	dfc00717 	ldw	ra,28(sp)
  e533b4:	dec00804 	addi	sp,sp,32
  e533b8:	f800283a 	ret

00e533bc <__clzsi2>:
  e533bc:	00bfffd4 	movui	r2,65535
  e533c0:	11000e36 	bltu	r2,r4,e533fc <__clzsi2+0x40>
  e533c4:	00803fc4 	movi	r2,255
  e533c8:	01400204 	movi	r5,8
  e533cc:	0007883a 	mov	r3,zero
  e533d0:	11001036 	bltu	r2,r4,e53414 <__clzsi2+0x58>
  e533d4:	000b883a 	mov	r5,zero
  e533d8:	20c6d83a 	srl	r3,r4,r3
  e533dc:	008039b4 	movhi	r2,230
  e533e0:	1084a804 	addi	r2,r2,4768
  e533e4:	1887883a 	add	r3,r3,r2
  e533e8:	18800003 	ldbu	r2,0(r3)
  e533ec:	00c00804 	movi	r3,32
  e533f0:	2885883a 	add	r2,r5,r2
  e533f4:	1885c83a 	sub	r2,r3,r2
  e533f8:	f800283a 	ret
  e533fc:	01400404 	movi	r5,16
  e53400:	00804034 	movhi	r2,256
  e53404:	10bfffc4 	addi	r2,r2,-1
  e53408:	2807883a 	mov	r3,r5
  e5340c:	113ff22e 	bgeu	r2,r4,e533d8 <__clzsi2+0x1c>
  e53410:	01400604 	movi	r5,24
  e53414:	2807883a 	mov	r3,r5
  e53418:	20c6d83a 	srl	r3,r4,r3
  e5341c:	008039b4 	movhi	r2,230
  e53420:	1084a804 	addi	r2,r2,4768
  e53424:	1887883a 	add	r3,r3,r2
  e53428:	18800003 	ldbu	r2,0(r3)
  e5342c:	00c00804 	movi	r3,32
  e53430:	2885883a 	add	r2,r5,r2
  e53434:	1885c83a 	sub	r2,r3,r2
  e53438:	f800283a 	ret

00e5343c <__pack_f>:
  e5343c:	20c00017 	ldw	r3,0(r4)
  e53440:	01c00044 	movi	r7,1
  e53444:	21800317 	ldw	r6,12(r4)
  e53448:	21400117 	ldw	r5,4(r4)
  e5344c:	38c02d2e 	bgeu	r7,r3,e53504 <__pack_f+0xc8>
  e53450:	00800104 	movi	r2,4
  e53454:	18802826 	beq	r3,r2,e534f8 <__pack_f+0xbc>
  e53458:	00800084 	movi	r2,2
  e5345c:	18800126 	beq	r3,r2,e53464 <__pack_f+0x28>
  e53460:	3000101e 	bne	r6,zero,e534a4 <__pack_f+0x68>
  e53464:	000d883a 	mov	r6,zero
  e53468:	0007883a 	mov	r3,zero
  e5346c:	19003fcc 	andi	r4,r3,255
  e53470:	200895fa 	slli	r4,r4,23
  e53474:	00c02034 	movhi	r3,128
  e53478:	18ffffc4 	addi	r3,r3,-1
  e5347c:	30c6703a 	and	r3,r6,r3
  e53480:	10a0002c 	andhi	r2,r2,32768
  e53484:	10c4b03a 	or	r2,r2,r3
  e53488:	280a97fa 	slli	r5,r5,31
  e5348c:	1104b03a 	or	r2,r2,r4
  e53490:	00e00034 	movhi	r3,32768
  e53494:	18ffffc4 	addi	r3,r3,-1
  e53498:	10c4703a 	and	r2,r2,r3
  e5349c:	1144b03a 	or	r2,r2,r5
  e534a0:	f800283a 	ret
  e534a4:	21000217 	ldw	r4,8(r4)
  e534a8:	00bfe084 	movi	r2,-126
  e534ac:	20801b16 	blt	r4,r2,e5351c <__pack_f+0xe0>
  e534b0:	00801fc4 	movi	r2,127
  e534b4:	11001016 	blt	r2,r4,e534f8 <__pack_f+0xbc>
  e534b8:	308e703a 	and	r7,r6,r2
  e534bc:	2087883a 	add	r3,r4,r2
  e534c0:	00801004 	movi	r2,64
  e534c4:	38800526 	beq	r7,r2,e534dc <__pack_f+0xa0>
  e534c8:	31800fc4 	addi	r6,r6,63
  e534cc:	30000716 	blt	r6,zero,e534ec <__pack_f+0xb0>
  e534d0:	300490ba 	slli	r2,r6,2
  e534d4:	100cd27a 	srli	r6,r2,9
  e534d8:	003fe406 	br	e5346c <__pack_f+0x30>
  e534dc:	3080200c 	andi	r2,r6,128
  e534e0:	103ffa26 	beq	r2,zero,e534cc <__pack_f+0x90>
  e534e4:	31cd883a 	add	r6,r6,r7
  e534e8:	003ff806 	br	e534cc <__pack_f+0x90>
  e534ec:	300cd07a 	srli	r6,r6,1
  e534f0:	18c00044 	addi	r3,r3,1
  e534f4:	003ff606 	br	e534d0 <__pack_f+0x94>
  e534f8:	000d883a 	mov	r6,zero
  e534fc:	00ffffc4 	movi	r3,-1
  e53500:	003fda06 	br	e5346c <__pack_f+0x30>
  e53504:	31800434 	orhi	r6,r6,16
  e53508:	00802034 	movhi	r2,128
  e5350c:	10bfffc4 	addi	r2,r2,-1
  e53510:	308c703a 	and	r6,r6,r2
  e53514:	00ffffc4 	movi	r3,-1
  e53518:	003fd406 	br	e5346c <__pack_f+0x30>
  e5351c:	1109c83a 	sub	r4,r2,r4
  e53520:	00800644 	movi	r2,25
  e53524:	11001216 	blt	r2,r4,e53570 <__pack_f+0x134>
  e53528:	3904983a 	sll	r2,r7,r4
  e5352c:	3106d83a 	srl	r3,r6,r4
  e53530:	10bfffc4 	addi	r2,r2,-1
  e53534:	3084703a 	and	r2,r6,r2
  e53538:	1004c03a 	cmpne	r2,r2,zero
  e5353c:	1886b03a 	or	r3,r3,r2
  e53540:	19001fcc 	andi	r4,r3,127
  e53544:	00801004 	movi	r2,64
  e53548:	20800c26 	beq	r4,r2,e5357c <__pack_f+0x140>
  e5354c:	18c00fc4 	addi	r3,r3,63
  e53550:	00900034 	movhi	r2,16384
  e53554:	10bfffc4 	addi	r2,r2,-1
  e53558:	180cd1fa 	srli	r6,r3,7
  e5355c:	10c7803a 	cmpltu	r3,r2,r3
  e53560:	00802034 	movhi	r2,128
  e53564:	10bfffc4 	addi	r2,r2,-1
  e53568:	308c703a 	and	r6,r6,r2
  e5356c:	003fbf06 	br	e5346c <__pack_f+0x30>
  e53570:	0007883a 	mov	r3,zero
  e53574:	000d883a 	mov	r6,zero
  e53578:	003ff906 	br	e53560 <__pack_f+0x124>
  e5357c:	1880200c 	andi	r2,r3,128
  e53580:	10000126 	beq	r2,zero,e53588 <__pack_f+0x14c>
  e53584:	1907883a 	add	r3,r3,r4
  e53588:	180cd1fa 	srli	r6,r3,7
  e5358c:	00900034 	movhi	r2,16384
  e53590:	10bfffc4 	addi	r2,r2,-1
  e53594:	10c7803a 	cmpltu	r3,r2,r3
  e53598:	003ff106 	br	e53560 <__pack_f+0x124>

00e5359c <__unpack_f>:
  e5359c:	21800017 	ldw	r6,0(r4)
  e535a0:	00c02034 	movhi	r3,128
  e535a4:	18ffffc4 	addi	r3,r3,-1
  e535a8:	3004d5fa 	srli	r2,r6,23
  e535ac:	3008d7fa 	srli	r4,r6,31
  e535b0:	30ce703a 	and	r7,r6,r3
  e535b4:	10c03fcc 	andi	r3,r2,255
  e535b8:	29000115 	stw	r4,4(r5)
  e535bc:	1800131e 	bne	r3,zero,e5360c <__unpack_f+0x70>
  e535c0:	38000f26 	beq	r7,zero,e53600 <__unpack_f+0x64>
  e535c4:	380691fa 	slli	r3,r7,7
  e535c8:	01bfe084 	movi	r6,-126
  e535cc:	008000c4 	movi	r2,3
  e535d0:	01100034 	movhi	r4,16384
  e535d4:	213fffc4 	addi	r4,r4,-1
  e535d8:	28800015 	stw	r2,0(r5)
  e535dc:	29800215 	stw	r6,8(r5)
  e535e0:	20c00536 	bltu	r4,r3,e535f8 <__unpack_f+0x5c>
  e535e4:	3005883a 	mov	r2,r6
  e535e8:	18c7883a 	add	r3,r3,r3
  e535ec:	10bfffc4 	addi	r2,r2,-1
  e535f0:	20fffd2e 	bgeu	r4,r3,e535e8 <__unpack_f+0x4c>
  e535f4:	28800215 	stw	r2,8(r5)
  e535f8:	28c00315 	stw	r3,12(r5)
  e535fc:	f800283a 	ret
  e53600:	00800084 	movi	r2,2
  e53604:	28800015 	stw	r2,0(r5)
  e53608:	f800283a 	ret
  e5360c:	00803fc4 	movi	r2,255
  e53610:	18800826 	beq	r3,r2,e53634 <__unpack_f+0x98>
  e53614:	380491fa 	slli	r2,r7,7
  e53618:	18ffe044 	addi	r3,r3,-127
  e5361c:	28c00215 	stw	r3,8(r5)
  e53620:	10900034 	orhi	r2,r2,16384
  e53624:	28800315 	stw	r2,12(r5)
  e53628:	008000c4 	movi	r2,3
  e5362c:	28800015 	stw	r2,0(r5)
  e53630:	f800283a 	ret
  e53634:	3800031e 	bne	r7,zero,e53644 <__unpack_f+0xa8>
  e53638:	00800104 	movi	r2,4
  e5363c:	28800015 	stw	r2,0(r5)
  e53640:	f800283a 	ret
  e53644:	3080042c 	andhi	r2,r6,16
  e53648:	10000426 	beq	r2,zero,e5365c <__unpack_f+0xc0>
  e5364c:	00800044 	movi	r2,1
  e53650:	28800015 	stw	r2,0(r5)
  e53654:	29c00315 	stw	r7,12(r5)
  e53658:	f800283a 	ret
  e5365c:	28000015 	stw	zero,0(r5)
  e53660:	003ffc06 	br	e53654 <__unpack_f+0xb8>

00e53664 <__fpcmp_parts_f>:
  e53664:	21800017 	ldw	r6,0(r4)
  e53668:	00c00044 	movi	r3,1
  e5366c:	19800a2e 	bgeu	r3,r6,e53698 <__fpcmp_parts_f+0x34>
  e53670:	28800017 	ldw	r2,0(r5)
  e53674:	1880082e 	bgeu	r3,r2,e53698 <__fpcmp_parts_f+0x34>
  e53678:	00c00104 	movi	r3,4
  e5367c:	30c01e26 	beq	r6,r3,e536f8 <__fpcmp_parts_f+0x94>
  e53680:	10c01a26 	beq	r2,r3,e536ec <__fpcmp_parts_f+0x88>
  e53684:	00c00084 	movi	r3,2
  e53688:	30c00526 	beq	r6,r3,e536a0 <__fpcmp_parts_f+0x3c>
  e5368c:	10c0071e 	bne	r2,r3,e536ac <__fpcmp_parts_f+0x48>
  e53690:	20800117 	ldw	r2,4(r4)
  e53694:	1000091e 	bne	r2,zero,e536bc <__fpcmp_parts_f+0x58>
  e53698:	00800044 	movi	r2,1
  e5369c:	f800283a 	ret
  e536a0:	10c0121e 	bne	r2,r3,e536ec <__fpcmp_parts_f+0x88>
  e536a4:	0005883a 	mov	r2,zero
  e536a8:	f800283a 	ret
  e536ac:	20c00117 	ldw	r3,4(r4)
  e536b0:	28800117 	ldw	r2,4(r5)
  e536b4:	18800326 	beq	r3,r2,e536c4 <__fpcmp_parts_f+0x60>
  e536b8:	183ff726 	beq	r3,zero,e53698 <__fpcmp_parts_f+0x34>
  e536bc:	00bfffc4 	movi	r2,-1
  e536c0:	f800283a 	ret
  e536c4:	21800217 	ldw	r6,8(r4)
  e536c8:	28800217 	ldw	r2,8(r5)
  e536cc:	11bffa16 	blt	r2,r6,e536b8 <__fpcmp_parts_f+0x54>
  e536d0:	30800416 	blt	r6,r2,e536e4 <__fpcmp_parts_f+0x80>
  e536d4:	21000317 	ldw	r4,12(r4)
  e536d8:	29400317 	ldw	r5,12(r5)
  e536dc:	293ff636 	bltu	r5,r4,e536b8 <__fpcmp_parts_f+0x54>
  e536e0:	217ff02e 	bgeu	r4,r5,e536a4 <__fpcmp_parts_f+0x40>
  e536e4:	183fec1e 	bne	r3,zero,e53698 <__fpcmp_parts_f+0x34>
  e536e8:	003ff406 	br	e536bc <__fpcmp_parts_f+0x58>
  e536ec:	28800117 	ldw	r2,4(r5)
  e536f0:	103fe91e 	bne	r2,zero,e53698 <__fpcmp_parts_f+0x34>
  e536f4:	003ff106 	br	e536bc <__fpcmp_parts_f+0x58>
  e536f8:	11bfe51e 	bne	r2,r6,e53690 <__fpcmp_parts_f+0x2c>
  e536fc:	28c00117 	ldw	r3,4(r5)
  e53700:	20800117 	ldw	r2,4(r4)
  e53704:	1885c83a 	sub	r2,r3,r2
  e53708:	f800283a 	ret

00e5370c <__make_fp>:
  e5370c:	defffb04 	addi	sp,sp,-20
  e53710:	d9000015 	stw	r4,0(sp)
  e53714:	d809883a 	mov	r4,sp
  e53718:	dfc00415 	stw	ra,16(sp)
  e5371c:	d9400115 	stw	r5,4(sp)
  e53720:	d9800215 	stw	r6,8(sp)
  e53724:	d9c00315 	stw	r7,12(sp)
  e53728:	0e5343c0 	call	e5343c <__pack_f>
  e5372c:	dfc00417 	ldw	ra,16(sp)
  e53730:	dec00504 	addi	sp,sp,20
  e53734:	f800283a 	ret

00e53738 <__pack_d>:
  e53738:	20c00017 	ldw	r3,0(r4)
  e5373c:	defffd04 	addi	sp,sp,-12
  e53740:	dc000015 	stw	r16,0(sp)
  e53744:	dc800215 	stw	r18,8(sp)
  e53748:	dc400115 	stw	r17,4(sp)
  e5374c:	00800044 	movi	r2,1
  e53750:	22000317 	ldw	r8,12(r4)
  e53754:	001f883a 	mov	r15,zero
  e53758:	22400417 	ldw	r9,16(r4)
  e5375c:	24000117 	ldw	r16,4(r4)
  e53760:	10c0552e 	bgeu	r2,r3,e538b8 <__pack_d+0x180>
  e53764:	00800104 	movi	r2,4
  e53768:	18804f26 	beq	r3,r2,e538a8 <__pack_d+0x170>
  e5376c:	00800084 	movi	r2,2
  e53770:	18800226 	beq	r3,r2,e5377c <__pack_d+0x44>
  e53774:	4244b03a 	or	r2,r8,r9
  e53778:	10001a1e 	bne	r2,zero,e537e4 <__pack_d+0xac>
  e5377c:	000d883a 	mov	r6,zero
  e53780:	000f883a 	mov	r7,zero
  e53784:	0011883a 	mov	r8,zero
  e53788:	00800434 	movhi	r2,16
  e5378c:	10bfffc4 	addi	r2,r2,-1
  e53790:	301d883a 	mov	r14,r6
  e53794:	3884703a 	and	r2,r7,r2
  e53798:	400a953a 	slli	r5,r8,20
  e5379c:	79bffc2c 	andhi	r6,r15,65520
  e537a0:	308cb03a 	or	r6,r6,r2
  e537a4:	00e00434 	movhi	r3,32784
  e537a8:	18ffffc4 	addi	r3,r3,-1
  e537ac:	800497fa 	slli	r2,r16,31
  e537b0:	30c6703a 	and	r3,r6,r3
  e537b4:	1946b03a 	or	r3,r3,r5
  e537b8:	01600034 	movhi	r5,32768
  e537bc:	297fffc4 	addi	r5,r5,-1
  e537c0:	194a703a 	and	r5,r3,r5
  e537c4:	288ab03a 	or	r5,r5,r2
  e537c8:	2807883a 	mov	r3,r5
  e537cc:	7005883a 	mov	r2,r14
  e537d0:	dc800217 	ldw	r18,8(sp)
  e537d4:	dc400117 	ldw	r17,4(sp)
  e537d8:	dc000017 	ldw	r16,0(sp)
  e537dc:	dec00304 	addi	sp,sp,12
  e537e0:	f800283a 	ret
  e537e4:	21000217 	ldw	r4,8(r4)
  e537e8:	00bf0084 	movi	r2,-1022
  e537ec:	20803f16 	blt	r4,r2,e538ec <__pack_d+0x1b4>
  e537f0:	0080ffc4 	movi	r2,1023
  e537f4:	11002c16 	blt	r2,r4,e538a8 <__pack_d+0x170>
  e537f8:	00803fc4 	movi	r2,255
  e537fc:	408c703a 	and	r6,r8,r2
  e53800:	00802004 	movi	r2,128
  e53804:	0007883a 	mov	r3,zero
  e53808:	000f883a 	mov	r7,zero
  e5380c:	2280ffc4 	addi	r10,r4,1023
  e53810:	30801e26 	beq	r6,r2,e5388c <__pack_d+0x154>
  e53814:	00801fc4 	movi	r2,127
  e53818:	4089883a 	add	r4,r8,r2
  e5381c:	220d803a 	cmpltu	r6,r4,r8
  e53820:	324d883a 	add	r6,r6,r9
  e53824:	2011883a 	mov	r8,r4
  e53828:	3013883a 	mov	r9,r6
  e5382c:	00880034 	movhi	r2,8192
  e53830:	10bfffc4 	addi	r2,r2,-1
  e53834:	12400d36 	bltu	r2,r9,e5386c <__pack_d+0x134>
  e53838:	4804963a 	slli	r2,r9,24
  e5383c:	400cd23a 	srli	r6,r8,8
  e53840:	480ed23a 	srli	r7,r9,8
  e53844:	013fffc4 	movi	r4,-1
  e53848:	118cb03a 	or	r6,r2,r6
  e5384c:	01400434 	movhi	r5,16
  e53850:	297fffc4 	addi	r5,r5,-1
  e53854:	3104703a 	and	r2,r6,r4
  e53858:	3946703a 	and	r3,r7,r5
  e5385c:	5201ffcc 	andi	r8,r10,2047
  e53860:	100d883a 	mov	r6,r2
  e53864:	180f883a 	mov	r7,r3
  e53868:	003fc706 	br	e53788 <__pack_d+0x50>
  e5386c:	480897fa 	slli	r4,r9,31
  e53870:	4004d07a 	srli	r2,r8,1
  e53874:	4806d07a 	srli	r3,r9,1
  e53878:	52800044 	addi	r10,r10,1
  e5387c:	2084b03a 	or	r2,r4,r2
  e53880:	1011883a 	mov	r8,r2
  e53884:	1813883a 	mov	r9,r3
  e53888:	003feb06 	br	e53838 <__pack_d+0x100>
  e5388c:	383fe11e 	bne	r7,zero,e53814 <__pack_d+0xdc>
  e53890:	01004004 	movi	r4,256
  e53894:	4104703a 	and	r2,r8,r4
  e53898:	10c4b03a 	or	r2,r2,r3
  e5389c:	103fe326 	beq	r2,zero,e5382c <__pack_d+0xf4>
  e538a0:	3005883a 	mov	r2,r6
  e538a4:	003fdc06 	br	e53818 <__pack_d+0xe0>
  e538a8:	000d883a 	mov	r6,zero
  e538ac:	000f883a 	mov	r7,zero
  e538b0:	0201ffc4 	movi	r8,2047
  e538b4:	003fb406 	br	e53788 <__pack_d+0x50>
  e538b8:	0005883a 	mov	r2,zero
  e538bc:	00c00234 	movhi	r3,8
  e538c0:	408cb03a 	or	r6,r8,r2
  e538c4:	48ceb03a 	or	r7,r9,r3
  e538c8:	013fffc4 	movi	r4,-1
  e538cc:	01400434 	movhi	r5,16
  e538d0:	297fffc4 	addi	r5,r5,-1
  e538d4:	3104703a 	and	r2,r6,r4
  e538d8:	3946703a 	and	r3,r7,r5
  e538dc:	100d883a 	mov	r6,r2
  e538e0:	180f883a 	mov	r7,r3
  e538e4:	0201ffc4 	movi	r8,2047
  e538e8:	003fa706 	br	e53788 <__pack_d+0x50>
  e538ec:	1109c83a 	sub	r4,r2,r4
  e538f0:	00800e04 	movi	r2,56
  e538f4:	11004316 	blt	r2,r4,e53a04 <__pack_d+0x2cc>
  e538f8:	21fff804 	addi	r7,r4,-32
  e538fc:	38004516 	blt	r7,zero,e53a14 <__pack_d+0x2dc>
  e53900:	49d8d83a 	srl	r12,r9,r7
  e53904:	001b883a 	mov	r13,zero
  e53908:	0023883a 	mov	r17,zero
  e5390c:	01400044 	movi	r5,1
  e53910:	0025883a 	mov	r18,zero
  e53914:	38004716 	blt	r7,zero,e53a34 <__pack_d+0x2fc>
  e53918:	29d6983a 	sll	r11,r5,r7
  e5391c:	0015883a 	mov	r10,zero
  e53920:	00bfffc4 	movi	r2,-1
  e53924:	5089883a 	add	r4,r10,r2
  e53928:	588b883a 	add	r5,r11,r2
  e5392c:	228d803a 	cmpltu	r6,r4,r10
  e53930:	314b883a 	add	r5,r6,r5
  e53934:	4104703a 	and	r2,r8,r4
  e53938:	4946703a 	and	r3,r9,r5
  e5393c:	10c4b03a 	or	r2,r2,r3
  e53940:	10000226 	beq	r2,zero,e5394c <__pack_d+0x214>
  e53944:	04400044 	movi	r17,1
  e53948:	0025883a 	mov	r18,zero
  e5394c:	00803fc4 	movi	r2,255
  e53950:	644eb03a 	or	r7,r12,r17
  e53954:	3892703a 	and	r9,r7,r2
  e53958:	00802004 	movi	r2,128
  e5395c:	6c90b03a 	or	r8,r13,r18
  e53960:	0015883a 	mov	r10,zero
  e53964:	48801626 	beq	r9,r2,e539c0 <__pack_d+0x288>
  e53968:	01001fc4 	movi	r4,127
  e5396c:	3905883a 	add	r2,r7,r4
  e53970:	11cd803a 	cmpltu	r6,r2,r7
  e53974:	320d883a 	add	r6,r6,r8
  e53978:	100f883a 	mov	r7,r2
  e5397c:	00840034 	movhi	r2,4096
  e53980:	10bfffc4 	addi	r2,r2,-1
  e53984:	3011883a 	mov	r8,r6
  e53988:	0007883a 	mov	r3,zero
  e5398c:	11801b36 	bltu	r2,r6,e539fc <__pack_d+0x2c4>
  e53990:	4004963a 	slli	r2,r8,24
  e53994:	3808d23a 	srli	r4,r7,8
  e53998:	400ad23a 	srli	r5,r8,8
  e5399c:	1813883a 	mov	r9,r3
  e539a0:	1108b03a 	or	r4,r2,r4
  e539a4:	00bfffc4 	movi	r2,-1
  e539a8:	00c00434 	movhi	r3,16
  e539ac:	18ffffc4 	addi	r3,r3,-1
  e539b0:	208c703a 	and	r6,r4,r2
  e539b4:	28ce703a 	and	r7,r5,r3
  e539b8:	4a01ffcc 	andi	r8,r9,2047
  e539bc:	003f7206 	br	e53788 <__pack_d+0x50>
  e539c0:	503fe91e 	bne	r10,zero,e53968 <__pack_d+0x230>
  e539c4:	01004004 	movi	r4,256
  e539c8:	3904703a 	and	r2,r7,r4
  e539cc:	0007883a 	mov	r3,zero
  e539d0:	10c4b03a 	or	r2,r2,r3
  e539d4:	10000626 	beq	r2,zero,e539f0 <__pack_d+0x2b8>
  e539d8:	3a45883a 	add	r2,r7,r9
  e539dc:	11cd803a 	cmpltu	r6,r2,r7
  e539e0:	320d883a 	add	r6,r6,r8
  e539e4:	100f883a 	mov	r7,r2
  e539e8:	3011883a 	mov	r8,r6
  e539ec:	0007883a 	mov	r3,zero
  e539f0:	00840034 	movhi	r2,4096
  e539f4:	10bfffc4 	addi	r2,r2,-1
  e539f8:	123fe52e 	bgeu	r2,r8,e53990 <__pack_d+0x258>
  e539fc:	00c00044 	movi	r3,1
  e53a00:	003fe306 	br	e53990 <__pack_d+0x258>
  e53a04:	0009883a 	mov	r4,zero
  e53a08:	0013883a 	mov	r9,zero
  e53a0c:	000b883a 	mov	r5,zero
  e53a10:	003fe406 	br	e539a4 <__pack_d+0x26c>
  e53a14:	4a47883a 	add	r3,r9,r9
  e53a18:	008007c4 	movi	r2,31
  e53a1c:	1105c83a 	sub	r2,r2,r4
  e53a20:	1886983a 	sll	r3,r3,r2
  e53a24:	4118d83a 	srl	r12,r8,r4
  e53a28:	491ad83a 	srl	r13,r9,r4
  e53a2c:	1b18b03a 	or	r12,r3,r12
  e53a30:	003fb506 	br	e53908 <__pack_d+0x1d0>
  e53a34:	2806d07a 	srli	r3,r5,1
  e53a38:	008007c4 	movi	r2,31
  e53a3c:	1105c83a 	sub	r2,r2,r4
  e53a40:	1896d83a 	srl	r11,r3,r2
  e53a44:	2914983a 	sll	r10,r5,r4
  e53a48:	003fb506 	br	e53920 <__pack_d+0x1e8>

00e53a4c <__unpack_d>:
  e53a4c:	20c00117 	ldw	r3,4(r4)
  e53a50:	22400017 	ldw	r9,0(r4)
  e53a54:	00800434 	movhi	r2,16
  e53a58:	10bfffc4 	addi	r2,r2,-1
  e53a5c:	1808d53a 	srli	r4,r3,20
  e53a60:	180cd7fa 	srli	r6,r3,31
  e53a64:	1894703a 	and	r10,r3,r2
  e53a68:	2201ffcc 	andi	r8,r4,2047
  e53a6c:	281b883a 	mov	r13,r5
  e53a70:	4817883a 	mov	r11,r9
  e53a74:	29800115 	stw	r6,4(r5)
  e53a78:	5019883a 	mov	r12,r10
  e53a7c:	40001e1e 	bne	r8,zero,e53af8 <__unpack_d+0xac>
  e53a80:	4a84b03a 	or	r2,r9,r10
  e53a84:	10001926 	beq	r2,zero,e53aec <__unpack_d+0xa0>
  e53a88:	4804d63a 	srli	r2,r9,24
  e53a8c:	500c923a 	slli	r6,r10,8
  e53a90:	013f0084 	movi	r4,-1022
  e53a94:	00c40034 	movhi	r3,4096
  e53a98:	18ffffc4 	addi	r3,r3,-1
  e53a9c:	118cb03a 	or	r6,r2,r6
  e53aa0:	008000c4 	movi	r2,3
  e53aa4:	480a923a 	slli	r5,r9,8
  e53aa8:	68800015 	stw	r2,0(r13)
  e53aac:	69000215 	stw	r4,8(r13)
  e53ab0:	19800b36 	bltu	r3,r6,e53ae0 <__unpack_d+0x94>
  e53ab4:	200f883a 	mov	r7,r4
  e53ab8:	1811883a 	mov	r8,r3
  e53abc:	2945883a 	add	r2,r5,r5
  e53ac0:	1149803a 	cmpltu	r4,r2,r5
  e53ac4:	3187883a 	add	r3,r6,r6
  e53ac8:	20c9883a 	add	r4,r4,r3
  e53acc:	100b883a 	mov	r5,r2
  e53ad0:	200d883a 	mov	r6,r4
  e53ad4:	39ffffc4 	addi	r7,r7,-1
  e53ad8:	413ff82e 	bgeu	r8,r4,e53abc <__unpack_d+0x70>
  e53adc:	69c00215 	stw	r7,8(r13)
  e53ae0:	69800415 	stw	r6,16(r13)
  e53ae4:	69400315 	stw	r5,12(r13)
  e53ae8:	f800283a 	ret
  e53aec:	00800084 	movi	r2,2
  e53af0:	28800015 	stw	r2,0(r5)
  e53af4:	f800283a 	ret
  e53af8:	0081ffc4 	movi	r2,2047
  e53afc:	40800f26 	beq	r8,r2,e53b3c <__unpack_d+0xf0>
  e53b00:	480cd63a 	srli	r6,r9,24
  e53b04:	5006923a 	slli	r3,r10,8
  e53b08:	4804923a 	slli	r2,r9,8
  e53b0c:	0009883a 	mov	r4,zero
  e53b10:	30c6b03a 	or	r3,r6,r3
  e53b14:	01440034 	movhi	r5,4096
  e53b18:	110cb03a 	or	r6,r2,r4
  e53b1c:	423f0044 	addi	r8,r8,-1023
  e53b20:	194eb03a 	or	r7,r3,r5
  e53b24:	008000c4 	movi	r2,3
  e53b28:	69c00415 	stw	r7,16(r13)
  e53b2c:	6a000215 	stw	r8,8(r13)
  e53b30:	68800015 	stw	r2,0(r13)
  e53b34:	69800315 	stw	r6,12(r13)
  e53b38:	f800283a 	ret
  e53b3c:	4a84b03a 	or	r2,r9,r10
  e53b40:	1000031e 	bne	r2,zero,e53b50 <__unpack_d+0x104>
  e53b44:	00800104 	movi	r2,4
  e53b48:	28800015 	stw	r2,0(r5)
  e53b4c:	f800283a 	ret
  e53b50:	0009883a 	mov	r4,zero
  e53b54:	01400234 	movhi	r5,8
  e53b58:	4904703a 	and	r2,r9,r4
  e53b5c:	5146703a 	and	r3,r10,r5
  e53b60:	10c4b03a 	or	r2,r2,r3
  e53b64:	10000526 	beq	r2,zero,e53b7c <__unpack_d+0x130>
  e53b68:	00800044 	movi	r2,1
  e53b6c:	68800015 	stw	r2,0(r13)
  e53b70:	6b000415 	stw	r12,16(r13)
  e53b74:	6ac00315 	stw	r11,12(r13)
  e53b78:	f800283a 	ret
  e53b7c:	68000015 	stw	zero,0(r13)
  e53b80:	003ffb06 	br	e53b70 <__unpack_d+0x124>

00e53b84 <__fpcmp_parts_d>:
  e53b84:	21800017 	ldw	r6,0(r4)
  e53b88:	00c00044 	movi	r3,1
  e53b8c:	19800a2e 	bgeu	r3,r6,e53bb8 <__fpcmp_parts_d+0x34>
  e53b90:	28800017 	ldw	r2,0(r5)
  e53b94:	1880082e 	bgeu	r3,r2,e53bb8 <__fpcmp_parts_d+0x34>
  e53b98:	00c00104 	movi	r3,4
  e53b9c:	30c02626 	beq	r6,r3,e53c38 <__fpcmp_parts_d+0xb4>
  e53ba0:	10c02226 	beq	r2,r3,e53c2c <__fpcmp_parts_d+0xa8>
  e53ba4:	00c00084 	movi	r3,2
  e53ba8:	30c00526 	beq	r6,r3,e53bc0 <__fpcmp_parts_d+0x3c>
  e53bac:	10c0071e 	bne	r2,r3,e53bcc <__fpcmp_parts_d+0x48>
  e53bb0:	20800117 	ldw	r2,4(r4)
  e53bb4:	1000091e 	bne	r2,zero,e53bdc <__fpcmp_parts_d+0x58>
  e53bb8:	00800044 	movi	r2,1
  e53bbc:	f800283a 	ret
  e53bc0:	10c01a1e 	bne	r2,r3,e53c2c <__fpcmp_parts_d+0xa8>
  e53bc4:	0005883a 	mov	r2,zero
  e53bc8:	f800283a 	ret
  e53bcc:	22000117 	ldw	r8,4(r4)
  e53bd0:	28800117 	ldw	r2,4(r5)
  e53bd4:	40800326 	beq	r8,r2,e53be4 <__fpcmp_parts_d+0x60>
  e53bd8:	403ff726 	beq	r8,zero,e53bb8 <__fpcmp_parts_d+0x34>
  e53bdc:	00bfffc4 	movi	r2,-1
  e53be0:	f800283a 	ret
  e53be4:	20c00217 	ldw	r3,8(r4)
  e53be8:	28800217 	ldw	r2,8(r5)
  e53bec:	10fffa16 	blt	r2,r3,e53bd8 <__fpcmp_parts_d+0x54>
  e53bf0:	18800916 	blt	r3,r2,e53c18 <__fpcmp_parts_d+0x94>
  e53bf4:	21c00417 	ldw	r7,16(r4)
  e53bf8:	28c00417 	ldw	r3,16(r5)
  e53bfc:	21800317 	ldw	r6,12(r4)
  e53c00:	28800317 	ldw	r2,12(r5)
  e53c04:	19fff436 	bltu	r3,r7,e53bd8 <__fpcmp_parts_d+0x54>
  e53c08:	38c00526 	beq	r7,r3,e53c20 <__fpcmp_parts_d+0x9c>
  e53c0c:	38c00236 	bltu	r7,r3,e53c18 <__fpcmp_parts_d+0x94>
  e53c10:	19ffec1e 	bne	r3,r7,e53bc4 <__fpcmp_parts_d+0x40>
  e53c14:	30bfeb2e 	bgeu	r6,r2,e53bc4 <__fpcmp_parts_d+0x40>
  e53c18:	403fe71e 	bne	r8,zero,e53bb8 <__fpcmp_parts_d+0x34>
  e53c1c:	003fef06 	br	e53bdc <__fpcmp_parts_d+0x58>
  e53c20:	11bffa2e 	bgeu	r2,r6,e53c0c <__fpcmp_parts_d+0x88>
  e53c24:	403fe426 	beq	r8,zero,e53bb8 <__fpcmp_parts_d+0x34>
  e53c28:	003fec06 	br	e53bdc <__fpcmp_parts_d+0x58>
  e53c2c:	28800117 	ldw	r2,4(r5)
  e53c30:	103fe11e 	bne	r2,zero,e53bb8 <__fpcmp_parts_d+0x34>
  e53c34:	003fe906 	br	e53bdc <__fpcmp_parts_d+0x58>
  e53c38:	11bfdd1e 	bne	r2,r6,e53bb0 <__fpcmp_parts_d+0x2c>
  e53c3c:	28c00117 	ldw	r3,4(r5)
  e53c40:	20800117 	ldw	r2,4(r4)
  e53c44:	1885c83a 	sub	r2,r3,r2
  e53c48:	f800283a 	ret

00e53c4c <__errno>:
  e53c4c:	00c039b4 	movhi	r3,230
  e53c50:	18cc9b04 	addi	r3,r3,12908
  e53c54:	18800017 	ldw	r2,0(r3)
  e53c58:	f800283a 	ret

00e53c5c <printf>:
  e53c5c:	defffb04 	addi	sp,sp,-20
  e53c60:	dfc00115 	stw	ra,4(sp)
  e53c64:	d9400215 	stw	r5,8(sp)
  e53c68:	d9800315 	stw	r6,12(sp)
  e53c6c:	d9c00415 	stw	r7,16(sp)
  e53c70:	008039b4 	movhi	r2,230
  e53c74:	108c9b04 	addi	r2,r2,12908
  e53c78:	10c00017 	ldw	r3,0(r2)
  e53c7c:	200b883a 	mov	r5,r4
  e53c80:	d8800204 	addi	r2,sp,8
  e53c84:	19000217 	ldw	r4,8(r3)
  e53c88:	100d883a 	mov	r6,r2
  e53c8c:	d8800015 	stw	r2,0(sp)
  e53c90:	0e55dd40 	call	e55dd4 <__vfprintf_internal>
  e53c94:	dfc00117 	ldw	ra,4(sp)
  e53c98:	dec00504 	addi	sp,sp,20
  e53c9c:	f800283a 	ret

00e53ca0 <_printf_r>:
  e53ca0:	defffc04 	addi	sp,sp,-16
  e53ca4:	dfc00115 	stw	ra,4(sp)
  e53ca8:	d9800215 	stw	r6,8(sp)
  e53cac:	d9c00315 	stw	r7,12(sp)
  e53cb0:	280d883a 	mov	r6,r5
  e53cb4:	21400217 	ldw	r5,8(r4)
  e53cb8:	d8c00204 	addi	r3,sp,8
  e53cbc:	180f883a 	mov	r7,r3
  e53cc0:	d8c00015 	stw	r3,0(sp)
  e53cc4:	0e53f280 	call	e53f28 <___vfprintf_internal_r>
  e53cc8:	dfc00117 	ldw	ra,4(sp)
  e53ccc:	dec00404 	addi	sp,sp,16
  e53cd0:	f800283a 	ret

00e53cd4 <_puts_r>:
  e53cd4:	defff604 	addi	sp,sp,-40
  e53cd8:	dc400715 	stw	r17,28(sp)
  e53cdc:	2023883a 	mov	r17,r4
  e53ce0:	2809883a 	mov	r4,r5
  e53ce4:	dfc00915 	stw	ra,36(sp)
  e53ce8:	dcc00815 	stw	r19,32(sp)
  e53cec:	2827883a 	mov	r19,r5
  e53cf0:	0e53e5c0 	call	e53e5c <strlen>
  e53cf4:	89400217 	ldw	r5,8(r17)
  e53cf8:	00c039b4 	movhi	r3,230
  e53cfc:	18c49804 	addi	r3,r3,4704
  e53d00:	01c00044 	movi	r7,1
  e53d04:	12000044 	addi	r8,r2,1
  e53d08:	d8c00515 	stw	r3,20(sp)
  e53d0c:	d9c00615 	stw	r7,24(sp)
  e53d10:	d8c00304 	addi	r3,sp,12
  e53d14:	01c00084 	movi	r7,2
  e53d18:	8809883a 	mov	r4,r17
  e53d1c:	d80d883a 	mov	r6,sp
  e53d20:	d8c00015 	stw	r3,0(sp)
  e53d24:	dcc00315 	stw	r19,12(sp)
  e53d28:	da000215 	stw	r8,8(sp)
  e53d2c:	d9c00115 	stw	r7,4(sp)
  e53d30:	d8800415 	stw	r2,16(sp)
  e53d34:	0e580300 	call	e58030 <__sfvwrite_r>
  e53d38:	00ffffc4 	movi	r3,-1
  e53d3c:	10000626 	beq	r2,zero,e53d58 <_puts_r+0x84>
  e53d40:	1805883a 	mov	r2,r3
  e53d44:	dfc00917 	ldw	ra,36(sp)
  e53d48:	dcc00817 	ldw	r19,32(sp)
  e53d4c:	dc400717 	ldw	r17,28(sp)
  e53d50:	dec00a04 	addi	sp,sp,40
  e53d54:	f800283a 	ret
  e53d58:	00c00284 	movi	r3,10
  e53d5c:	1805883a 	mov	r2,r3
  e53d60:	dfc00917 	ldw	ra,36(sp)
  e53d64:	dcc00817 	ldw	r19,32(sp)
  e53d68:	dc400717 	ldw	r17,28(sp)
  e53d6c:	dec00a04 	addi	sp,sp,40
  e53d70:	f800283a 	ret

00e53d74 <puts>:
  e53d74:	008039b4 	movhi	r2,230
  e53d78:	108c9b04 	addi	r2,r2,12908
  e53d7c:	200b883a 	mov	r5,r4
  e53d80:	11000017 	ldw	r4,0(r2)
  e53d84:	0e53cd41 	jmpi	e53cd4 <_puts_r>

00e53d88 <sprintf>:
  e53d88:	deffe504 	addi	sp,sp,-108
  e53d8c:	2013883a 	mov	r9,r4
  e53d90:	dfc01815 	stw	ra,96(sp)
  e53d94:	d9801915 	stw	r6,100(sp)
  e53d98:	d9c01a15 	stw	r7,104(sp)
  e53d9c:	d8801904 	addi	r2,sp,100
  e53da0:	d8800015 	stw	r2,0(sp)
  e53da4:	008039b4 	movhi	r2,230
  e53da8:	108c9b04 	addi	r2,r2,12908
  e53dac:	11000017 	ldw	r4,0(r2)
  e53db0:	d9c00017 	ldw	r7,0(sp)
  e53db4:	00808204 	movi	r2,520
  e53db8:	00e00034 	movhi	r3,32768
  e53dbc:	18ffffc4 	addi	r3,r3,-1
  e53dc0:	280d883a 	mov	r6,r5
  e53dc4:	d880040d 	sth	r2,16(sp)
  e53dc8:	d9400104 	addi	r5,sp,4
  e53dcc:	00bfffc4 	movi	r2,-1
  e53dd0:	d8c00615 	stw	r3,24(sp)
  e53dd4:	d8c00315 	stw	r3,12(sp)
  e53dd8:	da400515 	stw	r9,20(sp)
  e53ddc:	d880048d 	sth	r2,18(sp)
  e53de0:	da400115 	stw	r9,4(sp)
  e53de4:	0e53f280 	call	e53f28 <___vfprintf_internal_r>
  e53de8:	d8c00117 	ldw	r3,4(sp)
  e53dec:	18000005 	stb	zero,0(r3)
  e53df0:	dfc01817 	ldw	ra,96(sp)
  e53df4:	dec01b04 	addi	sp,sp,108
  e53df8:	f800283a 	ret

00e53dfc <_sprintf_r>:
  e53dfc:	deffe604 	addi	sp,sp,-104
  e53e00:	2813883a 	mov	r9,r5
  e53e04:	dfc01815 	stw	ra,96(sp)
  e53e08:	d9c01915 	stw	r7,100(sp)
  e53e0c:	d8801904 	addi	r2,sp,100
  e53e10:	d8800015 	stw	r2,0(sp)
  e53e14:	100f883a 	mov	r7,r2
  e53e18:	00808204 	movi	r2,520
  e53e1c:	00e00034 	movhi	r3,32768
  e53e20:	18ffffc4 	addi	r3,r3,-1
  e53e24:	d880040d 	sth	r2,16(sp)
  e53e28:	d9400104 	addi	r5,sp,4
  e53e2c:	00bfffc4 	movi	r2,-1
  e53e30:	d8c00615 	stw	r3,24(sp)
  e53e34:	d8c00315 	stw	r3,12(sp)
  e53e38:	da400515 	stw	r9,20(sp)
  e53e3c:	d880048d 	sth	r2,18(sp)
  e53e40:	da400115 	stw	r9,4(sp)
  e53e44:	0e53f280 	call	e53f28 <___vfprintf_internal_r>
  e53e48:	d8c00117 	ldw	r3,4(sp)
  e53e4c:	18000005 	stb	zero,0(r3)
  e53e50:	dfc01817 	ldw	ra,96(sp)
  e53e54:	dec01a04 	addi	sp,sp,104
  e53e58:	f800283a 	ret

00e53e5c <strlen>:
  e53e5c:	208000cc 	andi	r2,r4,3
  e53e60:	2011883a 	mov	r8,r4
  e53e64:	1000161e 	bne	r2,zero,e53ec0 <strlen+0x64>
  e53e68:	20c00017 	ldw	r3,0(r4)
  e53e6c:	017fbff4 	movhi	r5,65279
  e53e70:	297fbfc4 	addi	r5,r5,-257
  e53e74:	01e02074 	movhi	r7,32897
  e53e78:	39e02004 	addi	r7,r7,-32640
  e53e7c:	1945883a 	add	r2,r3,r5
  e53e80:	11c4703a 	and	r2,r2,r7
  e53e84:	00c6303a 	nor	r3,zero,r3
  e53e88:	1886703a 	and	r3,r3,r2
  e53e8c:	18000c1e 	bne	r3,zero,e53ec0 <strlen+0x64>
  e53e90:	280d883a 	mov	r6,r5
  e53e94:	380b883a 	mov	r5,r7
  e53e98:	21000104 	addi	r4,r4,4
  e53e9c:	20800017 	ldw	r2,0(r4)
  e53ea0:	1187883a 	add	r3,r2,r6
  e53ea4:	1946703a 	and	r3,r3,r5
  e53ea8:	0084303a 	nor	r2,zero,r2
  e53eac:	10c4703a 	and	r2,r2,r3
  e53eb0:	103ff926 	beq	r2,zero,e53e98 <strlen+0x3c>
  e53eb4:	20800007 	ldb	r2,0(r4)
  e53eb8:	10000326 	beq	r2,zero,e53ec8 <strlen+0x6c>
  e53ebc:	21000044 	addi	r4,r4,1
  e53ec0:	20800007 	ldb	r2,0(r4)
  e53ec4:	103ffd1e 	bne	r2,zero,e53ebc <strlen+0x60>
  e53ec8:	2205c83a 	sub	r2,r4,r8
  e53ecc:	f800283a 	ret

00e53ed0 <__sprint_r>:
  e53ed0:	30800217 	ldw	r2,8(r6)
  e53ed4:	defffe04 	addi	sp,sp,-8
  e53ed8:	dc000015 	stw	r16,0(sp)
  e53edc:	dfc00115 	stw	ra,4(sp)
  e53ee0:	3021883a 	mov	r16,r6
  e53ee4:	0007883a 	mov	r3,zero
  e53ee8:	1000061e 	bne	r2,zero,e53f04 <__sprint_r+0x34>
  e53eec:	1805883a 	mov	r2,r3
  e53ef0:	30000115 	stw	zero,4(r6)
  e53ef4:	dfc00117 	ldw	ra,4(sp)
  e53ef8:	dc000017 	ldw	r16,0(sp)
  e53efc:	dec00204 	addi	sp,sp,8
  e53f00:	f800283a 	ret
  e53f04:	0e580300 	call	e58030 <__sfvwrite_r>
  e53f08:	1007883a 	mov	r3,r2
  e53f0c:	1805883a 	mov	r2,r3
  e53f10:	80000115 	stw	zero,4(r16)
  e53f14:	80000215 	stw	zero,8(r16)
  e53f18:	dfc00117 	ldw	ra,4(sp)
  e53f1c:	dc000017 	ldw	r16,0(sp)
  e53f20:	dec00204 	addi	sp,sp,8
  e53f24:	f800283a 	ret

00e53f28 <___vfprintf_internal_r>:
  e53f28:	defea404 	addi	sp,sp,-1392
  e53f2c:	dd815815 	stw	r22,1376(sp)
  e53f30:	dc015215 	stw	r16,1352(sp)
  e53f34:	d9c15115 	stw	r7,1348(sp)
  e53f38:	dfc15b15 	stw	ra,1388(sp)
  e53f3c:	df015a15 	stw	fp,1384(sp)
  e53f40:	ddc15915 	stw	r23,1380(sp)
  e53f44:	dd415715 	stw	r21,1372(sp)
  e53f48:	dd015615 	stw	r20,1368(sp)
  e53f4c:	dcc15515 	stw	r19,1364(sp)
  e53f50:	dc815415 	stw	r18,1360(sp)
  e53f54:	dc415315 	stw	r17,1356(sp)
  e53f58:	282d883a 	mov	r22,r5
  e53f5c:	3021883a 	mov	r16,r6
  e53f60:	d9014f15 	stw	r4,1340(sp)
  e53f64:	0e586540 	call	e58654 <_localeconv_r>
  e53f68:	10800017 	ldw	r2,0(r2)
  e53f6c:	d9c15117 	ldw	r7,1348(sp)
  e53f70:	d8814915 	stw	r2,1316(sp)
  e53f74:	d8814f17 	ldw	r2,1340(sp)
  e53f78:	10000226 	beq	r2,zero,e53f84 <___vfprintf_internal_r+0x5c>
  e53f7c:	10800e17 	ldw	r2,56(r2)
  e53f80:	10020d26 	beq	r2,zero,e547b8 <___vfprintf_internal_r+0x890>
  e53f84:	b080030b 	ldhu	r2,12(r22)
  e53f88:	1080020c 	andi	r2,r2,8
  e53f8c:	10020e26 	beq	r2,zero,e547c8 <___vfprintf_internal_r+0x8a0>
  e53f90:	b0800417 	ldw	r2,16(r22)
  e53f94:	10020c26 	beq	r2,zero,e547c8 <___vfprintf_internal_r+0x8a0>
  e53f98:	b200030b 	ldhu	r8,12(r22)
  e53f9c:	00800284 	movi	r2,10
  e53fa0:	40c0068c 	andi	r3,r8,26
  e53fa4:	18802f1e 	bne	r3,r2,e54064 <___vfprintf_internal_r+0x13c>
  e53fa8:	b080038f 	ldh	r2,14(r22)
  e53fac:	10002d16 	blt	r2,zero,e54064 <___vfprintf_internal_r+0x13c>
  e53fb0:	b240038b 	ldhu	r9,14(r22)
  e53fb4:	b2800717 	ldw	r10,28(r22)
  e53fb8:	b2c00917 	ldw	r11,36(r22)
  e53fbc:	d9014f17 	ldw	r4,1340(sp)
  e53fc0:	dc402904 	addi	r17,sp,164
  e53fc4:	d8804004 	addi	r2,sp,256
  e53fc8:	00c10004 	movi	r3,1024
  e53fcc:	423fff4c 	andi	r8,r8,65533
  e53fd0:	800d883a 	mov	r6,r16
  e53fd4:	880b883a 	mov	r5,r17
  e53fd8:	da002c0d 	sth	r8,176(sp)
  e53fdc:	da402c8d 	sth	r9,178(sp)
  e53fe0:	da803015 	stw	r10,192(sp)
  e53fe4:	dac03215 	stw	r11,200(sp)
  e53fe8:	d8802d15 	stw	r2,180(sp)
  e53fec:	d8c02e15 	stw	r3,184(sp)
  e53ff0:	d8802915 	stw	r2,164(sp)
  e53ff4:	d8c02b15 	stw	r3,172(sp)
  e53ff8:	d8002f15 	stw	zero,188(sp)
  e53ffc:	0e53f280 	call	e53f28 <___vfprintf_internal_r>
  e54000:	d8814b15 	stw	r2,1324(sp)
  e54004:	10000416 	blt	r2,zero,e54018 <___vfprintf_internal_r+0xf0>
  e54008:	d9014f17 	ldw	r4,1340(sp)
  e5400c:	880b883a 	mov	r5,r17
  e54010:	0e577000 	call	e57700 <_fflush_r>
  e54014:	1002321e 	bne	r2,zero,e548e0 <___vfprintf_internal_r+0x9b8>
  e54018:	d8802c0b 	ldhu	r2,176(sp)
  e5401c:	1080100c 	andi	r2,r2,64
  e54020:	10000326 	beq	r2,zero,e54030 <___vfprintf_internal_r+0x108>
  e54024:	b080030b 	ldhu	r2,12(r22)
  e54028:	10801014 	ori	r2,r2,64
  e5402c:	b080030d 	sth	r2,12(r22)
  e54030:	d8814b17 	ldw	r2,1324(sp)
  e54034:	dfc15b17 	ldw	ra,1388(sp)
  e54038:	df015a17 	ldw	fp,1384(sp)
  e5403c:	ddc15917 	ldw	r23,1380(sp)
  e54040:	dd815817 	ldw	r22,1376(sp)
  e54044:	dd415717 	ldw	r21,1372(sp)
  e54048:	dd015617 	ldw	r20,1368(sp)
  e5404c:	dcc15517 	ldw	r19,1364(sp)
  e54050:	dc815417 	ldw	r18,1360(sp)
  e54054:	dc415317 	ldw	r17,1356(sp)
  e54058:	dc015217 	ldw	r16,1352(sp)
  e5405c:	dec15c04 	addi	sp,sp,1392
  e54060:	f800283a 	ret
  e54064:	0005883a 	mov	r2,zero
  e54068:	0007883a 	mov	r3,zero
  e5406c:	dd401904 	addi	r21,sp,100
  e54070:	d8814215 	stw	r2,1288(sp)
  e54074:	802f883a 	mov	r23,r16
  e54078:	d8c14315 	stw	r3,1292(sp)
  e5407c:	d8014b15 	stw	zero,1324(sp)
  e54080:	d8014815 	stw	zero,1312(sp)
  e54084:	d8014415 	stw	zero,1296(sp)
  e54088:	d8014715 	stw	zero,1308(sp)
  e5408c:	dd400c15 	stw	r21,48(sp)
  e54090:	d8000e15 	stw	zero,56(sp)
  e54094:	d8000d15 	stw	zero,52(sp)
  e54098:	b8800007 	ldb	r2,0(r23)
  e5409c:	10001926 	beq	r2,zero,e54104 <___vfprintf_internal_r+0x1dc>
  e540a0:	00c00944 	movi	r3,37
  e540a4:	10c01726 	beq	r2,r3,e54104 <___vfprintf_internal_r+0x1dc>
  e540a8:	b821883a 	mov	r16,r23
  e540ac:	00000106 	br	e540b4 <___vfprintf_internal_r+0x18c>
  e540b0:	10c00326 	beq	r2,r3,e540c0 <___vfprintf_internal_r+0x198>
  e540b4:	84000044 	addi	r16,r16,1
  e540b8:	80800007 	ldb	r2,0(r16)
  e540bc:	103ffc1e 	bne	r2,zero,e540b0 <___vfprintf_internal_r+0x188>
  e540c0:	85e7c83a 	sub	r19,r16,r23
  e540c4:	98000e26 	beq	r19,zero,e54100 <___vfprintf_internal_r+0x1d8>
  e540c8:	dc800e17 	ldw	r18,56(sp)
  e540cc:	dc400d17 	ldw	r17,52(sp)
  e540d0:	008001c4 	movi	r2,7
  e540d4:	94e5883a 	add	r18,r18,r19
  e540d8:	8c400044 	addi	r17,r17,1
  e540dc:	adc00015 	stw	r23,0(r21)
  e540e0:	dc800e15 	stw	r18,56(sp)
  e540e4:	acc00115 	stw	r19,4(r21)
  e540e8:	dc400d15 	stw	r17,52(sp)
  e540ec:	14428b16 	blt	r2,r17,e54b1c <___vfprintf_internal_r+0xbf4>
  e540f0:	ad400204 	addi	r21,r21,8
  e540f4:	d9014b17 	ldw	r4,1324(sp)
  e540f8:	24c9883a 	add	r4,r4,r19
  e540fc:	d9014b15 	stw	r4,1324(sp)
  e54100:	802f883a 	mov	r23,r16
  e54104:	b8800007 	ldb	r2,0(r23)
  e54108:	10013c26 	beq	r2,zero,e545fc <___vfprintf_internal_r+0x6d4>
  e5410c:	bdc00044 	addi	r23,r23,1
  e54110:	d8000405 	stb	zero,16(sp)
  e54114:	b8c00007 	ldb	r3,0(r23)
  e54118:	04ffffc4 	movi	r19,-1
  e5411c:	d8014c15 	stw	zero,1328(sp)
  e54120:	d8014a15 	stw	zero,1320(sp)
  e54124:	d8c14d15 	stw	r3,1332(sp)
  e54128:	bdc00044 	addi	r23,r23,1
  e5412c:	d9414d17 	ldw	r5,1332(sp)
  e54130:	00801604 	movi	r2,88
  e54134:	28fff804 	addi	r3,r5,-32
  e54138:	10c06036 	bltu	r2,r3,e542bc <___vfprintf_internal_r+0x394>
  e5413c:	18c5883a 	add	r2,r3,r3
  e54140:	1085883a 	add	r2,r2,r2
  e54144:	00c03974 	movhi	r3,229
  e54148:	18d05604 	addi	r3,r3,16728
  e5414c:	10c5883a 	add	r2,r2,r3
  e54150:	11000017 	ldw	r4,0(r2)
  e54154:	2000683a 	jmp	r4
  e54158:	00e550cc 	andi	r3,zero,38211
  e5415c:	00e542bc 	xorhi	r3,zero,38154
  e54160:	00e542bc 	xorhi	r3,zero,38154
  e54164:	00e550b8 	rdprs	r3,zero,-27326
  e54168:	00e542bc 	xorhi	r3,zero,38154
  e5416c:	00e542bc 	xorhi	r3,zero,38154
  e54170:	00e542bc 	xorhi	r3,zero,38154
  e54174:	00e542bc 	xorhi	r3,zero,38154
  e54178:	00e542bc 	xorhi	r3,zero,38154
  e5417c:	00e542bc 	xorhi	r3,zero,38154
  e54180:	00e54e98 	cmpnei	r3,zero,-27334
  e54184:	00e550a8 	cmpgeui	r3,zero,38210
  e54188:	00e542bc 	xorhi	r3,zero,38154
  e5418c:	00e54eb0 	cmpltui	r3,zero,38202
  e54190:	00e55144 	movi	r3,-27323
  e54194:	00e542bc 	xorhi	r3,zero,38154
  e54198:	00e55130 	cmpltui	r3,zero,38212
  e5419c:	00e550f8 	rdprs	r3,zero,-27325
  e541a0:	00e550f8 	rdprs	r3,zero,-27325
  e541a4:	00e550f8 	rdprs	r3,zero,-27325
  e541a8:	00e550f8 	rdprs	r3,zero,-27325
  e541ac:	00e550f8 	rdprs	r3,zero,-27325
  e541b0:	00e550f8 	rdprs	r3,zero,-27325
  e541b4:	00e550f8 	rdprs	r3,zero,-27325
  e541b8:	00e550f8 	rdprs	r3,zero,-27325
  e541bc:	00e550f8 	rdprs	r3,zero,-27325
  e541c0:	00e542bc 	xorhi	r3,zero,38154
  e541c4:	00e542bc 	xorhi	r3,zero,38154
  e541c8:	00e542bc 	xorhi	r3,zero,38154
  e541cc:	00e542bc 	xorhi	r3,zero,38154
  e541d0:	00e542bc 	xorhi	r3,zero,38154
  e541d4:	00e542bc 	xorhi	r3,zero,38154
  e541d8:	00e542bc 	xorhi	r3,zero,38154
  e541dc:	00e542bc 	xorhi	r3,zero,38154
  e541e0:	00e542bc 	xorhi	r3,zero,38154
  e541e4:	00e542bc 	xorhi	r3,zero,38154
  e541e8:	00e54914 	movui	r3,38180
  e541ec:	00e54f80 	call	e54f8 <__alt_mem_onchip_memory2_3+0xde4f8>
  e541f0:	00e542bc 	xorhi	r3,zero,38154
  e541f4:	00e54f80 	call	e54f8 <__alt_mem_onchip_memory2_3+0xde4f8>
  e541f8:	00e542bc 	xorhi	r3,zero,38154
  e541fc:	00e542bc 	xorhi	r3,zero,38154
  e54200:	00e542bc 	xorhi	r3,zero,38154
  e54204:	00e542bc 	xorhi	r3,zero,38154
  e54208:	00e550e4 	muli	r3,zero,-27325
  e5420c:	00e542bc 	xorhi	r3,zero,38154
  e54210:	00e542bc 	xorhi	r3,zero,38154
  e54214:	00e549c8 	cmpgei	r3,zero,-27353
  e54218:	00e542bc 	xorhi	r3,zero,38154
  e5421c:	00e542bc 	xorhi	r3,zero,38154
  e54220:	00e542bc 	xorhi	r3,zero,38154
  e54224:	00e542bc 	xorhi	r3,zero,38154
  e54228:	00e542bc 	xorhi	r3,zero,38154
  e5422c:	00e54a14 	movui	r3,38184
  e54230:	00e542bc 	xorhi	r3,zero,38154
  e54234:	00e542bc 	xorhi	r3,zero,38154
  e54238:	00e55034 	movhi	r3,38208
  e5423c:	00e542bc 	xorhi	r3,zero,38154
  e54240:	00e542bc 	xorhi	r3,zero,38154
  e54244:	00e542bc 	xorhi	r3,zero,38154
  e54248:	00e542bc 	xorhi	r3,zero,38154
  e5424c:	00e542bc 	xorhi	r3,zero,38154
  e54250:	00e542bc 	xorhi	r3,zero,38154
  e54254:	00e542bc 	xorhi	r3,zero,38154
  e54258:	00e542bc 	xorhi	r3,zero,38154
  e5425c:	00e542bc 	xorhi	r3,zero,38154
  e54260:	00e542bc 	xorhi	r3,zero,38154
  e54264:	00e55008 	cmpgei	r3,zero,-27328
  e54268:	00e54920 	cmpeqi	r3,zero,-27356
  e5426c:	00e54f80 	call	e54f8 <__alt_mem_onchip_memory2_3+0xde4f8>
  e54270:	00e54f80 	call	e54f8 <__alt_mem_onchip_memory2_3+0xde4f8>
  e54274:	00e54f80 	call	e54f8 <__alt_mem_onchip_memory2_3+0xde4f8>
  e54278:	00e54f6c 	andhi	r3,zero,38205
  e5427c:	00e54920 	cmpeqi	r3,zero,-27356
  e54280:	00e542bc 	xorhi	r3,zero,38154
  e54284:	00e542bc 	xorhi	r3,zero,38154
  e54288:	00e54ef4 	movhi	r3,38203
  e5428c:	00e542bc 	xorhi	r3,zero,38154
  e54290:	00e54ec4 	movi	r3,-27333
  e54294:	00e549d4 	movui	r3,38183
  e54298:	00e54f24 	muli	r3,zero,-27332
  e5429c:	00e54f10 	cmplti	r3,zero,-27332
  e542a0:	00e542bc 	xorhi	r3,zero,38154
  e542a4:	00e551a0 	cmpeqi	r3,zero,-27322
  e542a8:	00e542bc 	xorhi	r3,zero,38154
  e542ac:	00e54a20 	cmpeqi	r3,zero,-27352
  e542b0:	00e542bc 	xorhi	r3,zero,38154
  e542b4:	00e542bc 	xorhi	r3,zero,38154
  e542b8:	00e55098 	cmpnei	r3,zero,-27326
  e542bc:	d9014d17 	ldw	r4,1332(sp)
  e542c0:	2000ce26 	beq	r4,zero,e545fc <___vfprintf_internal_r+0x6d4>
  e542c4:	01400044 	movi	r5,1
  e542c8:	d9800f04 	addi	r6,sp,60
  e542cc:	d9c14015 	stw	r7,1280(sp)
  e542d0:	d9414515 	stw	r5,1300(sp)
  e542d4:	d9814115 	stw	r6,1284(sp)
  e542d8:	280f883a 	mov	r7,r5
  e542dc:	d9000f05 	stb	r4,60(sp)
  e542e0:	d8000405 	stb	zero,16(sp)
  e542e4:	d8014615 	stw	zero,1304(sp)
  e542e8:	d8c14c17 	ldw	r3,1328(sp)
  e542ec:	1880008c 	andi	r2,r3,2
  e542f0:	1005003a 	cmpeq	r2,r2,zero
  e542f4:	d8815015 	stw	r2,1344(sp)
  e542f8:	1000031e 	bne	r2,zero,e54308 <___vfprintf_internal_r+0x3e0>
  e542fc:	d9014517 	ldw	r4,1300(sp)
  e54300:	21000084 	addi	r4,r4,2
  e54304:	d9014515 	stw	r4,1300(sp)
  e54308:	d9414c17 	ldw	r5,1328(sp)
  e5430c:	2940210c 	andi	r5,r5,132
  e54310:	d9414e15 	stw	r5,1336(sp)
  e54314:	28002d1e 	bne	r5,zero,e543cc <___vfprintf_internal_r+0x4a4>
  e54318:	d9814a17 	ldw	r6,1320(sp)
  e5431c:	d8814517 	ldw	r2,1300(sp)
  e54320:	30a1c83a 	sub	r16,r6,r2
  e54324:	0400290e 	bge	zero,r16,e543cc <___vfprintf_internal_r+0x4a4>
  e54328:	00800404 	movi	r2,16
  e5432c:	1404580e 	bge	r2,r16,e55490 <___vfprintf_internal_r+0x1568>
  e54330:	dc800e17 	ldw	r18,56(sp)
  e54334:	dc400d17 	ldw	r17,52(sp)
  e54338:	1027883a 	mov	r19,r2
  e5433c:	070039b4 	movhi	fp,230
  e54340:	e7050384 	addi	fp,fp,5134
  e54344:	050001c4 	movi	r20,7
  e54348:	00000306 	br	e54358 <___vfprintf_internal_r+0x430>
  e5434c:	843ffc04 	addi	r16,r16,-16
  e54350:	ad400204 	addi	r21,r21,8
  e54354:	9c00130e 	bge	r19,r16,e543a4 <___vfprintf_internal_r+0x47c>
  e54358:	94800404 	addi	r18,r18,16
  e5435c:	8c400044 	addi	r17,r17,1
  e54360:	af000015 	stw	fp,0(r21)
  e54364:	acc00115 	stw	r19,4(r21)
  e54368:	dc800e15 	stw	r18,56(sp)
  e5436c:	dc400d15 	stw	r17,52(sp)
  e54370:	a47ff60e 	bge	r20,r17,e5434c <___vfprintf_internal_r+0x424>
  e54374:	d9014f17 	ldw	r4,1340(sp)
  e54378:	b00b883a 	mov	r5,r22
  e5437c:	d9800c04 	addi	r6,sp,48
  e54380:	d9c15115 	stw	r7,1348(sp)
  e54384:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54388:	d9c15117 	ldw	r7,1348(sp)
  e5438c:	10009e1e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e54390:	843ffc04 	addi	r16,r16,-16
  e54394:	dc800e17 	ldw	r18,56(sp)
  e54398:	dc400d17 	ldw	r17,52(sp)
  e5439c:	dd401904 	addi	r21,sp,100
  e543a0:	9c3fed16 	blt	r19,r16,e54358 <___vfprintf_internal_r+0x430>
  e543a4:	9425883a 	add	r18,r18,r16
  e543a8:	8c400044 	addi	r17,r17,1
  e543ac:	008001c4 	movi	r2,7
  e543b0:	af000015 	stw	fp,0(r21)
  e543b4:	ac000115 	stw	r16,4(r21)
  e543b8:	dc800e15 	stw	r18,56(sp)
  e543bc:	dc400d15 	stw	r17,52(sp)
  e543c0:	1441f516 	blt	r2,r17,e54b98 <___vfprintf_internal_r+0xc70>
  e543c4:	ad400204 	addi	r21,r21,8
  e543c8:	00000206 	br	e543d4 <___vfprintf_internal_r+0x4ac>
  e543cc:	dc800e17 	ldw	r18,56(sp)
  e543d0:	dc400d17 	ldw	r17,52(sp)
  e543d4:	d8800407 	ldb	r2,16(sp)
  e543d8:	10000b26 	beq	r2,zero,e54408 <___vfprintf_internal_r+0x4e0>
  e543dc:	00800044 	movi	r2,1
  e543e0:	94800044 	addi	r18,r18,1
  e543e4:	8c400044 	addi	r17,r17,1
  e543e8:	a8800115 	stw	r2,4(r21)
  e543ec:	d8c00404 	addi	r3,sp,16
  e543f0:	008001c4 	movi	r2,7
  e543f4:	a8c00015 	stw	r3,0(r21)
  e543f8:	dc800e15 	stw	r18,56(sp)
  e543fc:	dc400d15 	stw	r17,52(sp)
  e54400:	1441da16 	blt	r2,r17,e54b6c <___vfprintf_internal_r+0xc44>
  e54404:	ad400204 	addi	r21,r21,8
  e54408:	d9015017 	ldw	r4,1344(sp)
  e5440c:	20000b1e 	bne	r4,zero,e5443c <___vfprintf_internal_r+0x514>
  e54410:	d8800444 	addi	r2,sp,17
  e54414:	94800084 	addi	r18,r18,2
  e54418:	8c400044 	addi	r17,r17,1
  e5441c:	a8800015 	stw	r2,0(r21)
  e54420:	00c00084 	movi	r3,2
  e54424:	008001c4 	movi	r2,7
  e54428:	a8c00115 	stw	r3,4(r21)
  e5442c:	dc800e15 	stw	r18,56(sp)
  e54430:	dc400d15 	stw	r17,52(sp)
  e54434:	1441c216 	blt	r2,r17,e54b40 <___vfprintf_internal_r+0xc18>
  e54438:	ad400204 	addi	r21,r21,8
  e5443c:	d9414e17 	ldw	r5,1336(sp)
  e54440:	00802004 	movi	r2,128
  e54444:	2880b126 	beq	r5,r2,e5470c <___vfprintf_internal_r+0x7e4>
  e54448:	d8c14617 	ldw	r3,1304(sp)
  e5444c:	19e1c83a 	sub	r16,r3,r7
  e54450:	0400260e 	bge	zero,r16,e544ec <___vfprintf_internal_r+0x5c4>
  e54454:	00800404 	movi	r2,16
  e54458:	1403c90e 	bge	r2,r16,e55380 <___vfprintf_internal_r+0x1458>
  e5445c:	1027883a 	mov	r19,r2
  e54460:	070039b4 	movhi	fp,230
  e54464:	e704ff84 	addi	fp,fp,5118
  e54468:	050001c4 	movi	r20,7
  e5446c:	00000306 	br	e5447c <___vfprintf_internal_r+0x554>
  e54470:	843ffc04 	addi	r16,r16,-16
  e54474:	ad400204 	addi	r21,r21,8
  e54478:	9c00130e 	bge	r19,r16,e544c8 <___vfprintf_internal_r+0x5a0>
  e5447c:	94800404 	addi	r18,r18,16
  e54480:	8c400044 	addi	r17,r17,1
  e54484:	af000015 	stw	fp,0(r21)
  e54488:	acc00115 	stw	r19,4(r21)
  e5448c:	dc800e15 	stw	r18,56(sp)
  e54490:	dc400d15 	stw	r17,52(sp)
  e54494:	a47ff60e 	bge	r20,r17,e54470 <___vfprintf_internal_r+0x548>
  e54498:	d9014f17 	ldw	r4,1340(sp)
  e5449c:	b00b883a 	mov	r5,r22
  e544a0:	d9800c04 	addi	r6,sp,48
  e544a4:	d9c15115 	stw	r7,1348(sp)
  e544a8:	0e53ed00 	call	e53ed0 <__sprint_r>
  e544ac:	d9c15117 	ldw	r7,1348(sp)
  e544b0:	1000551e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e544b4:	843ffc04 	addi	r16,r16,-16
  e544b8:	dc800e17 	ldw	r18,56(sp)
  e544bc:	dc400d17 	ldw	r17,52(sp)
  e544c0:	dd401904 	addi	r21,sp,100
  e544c4:	9c3fed16 	blt	r19,r16,e5447c <___vfprintf_internal_r+0x554>
  e544c8:	9425883a 	add	r18,r18,r16
  e544cc:	8c400044 	addi	r17,r17,1
  e544d0:	008001c4 	movi	r2,7
  e544d4:	af000015 	stw	fp,0(r21)
  e544d8:	ac000115 	stw	r16,4(r21)
  e544dc:	dc800e15 	stw	r18,56(sp)
  e544e0:	dc400d15 	stw	r17,52(sp)
  e544e4:	14418216 	blt	r2,r17,e54af0 <___vfprintf_internal_r+0xbc8>
  e544e8:	ad400204 	addi	r21,r21,8
  e544ec:	d9014c17 	ldw	r4,1328(sp)
  e544f0:	2080400c 	andi	r2,r4,256
  e544f4:	10004a1e 	bne	r2,zero,e54620 <___vfprintf_internal_r+0x6f8>
  e544f8:	d9414117 	ldw	r5,1284(sp)
  e544fc:	91e5883a 	add	r18,r18,r7
  e54500:	8c400044 	addi	r17,r17,1
  e54504:	008001c4 	movi	r2,7
  e54508:	a9400015 	stw	r5,0(r21)
  e5450c:	a9c00115 	stw	r7,4(r21)
  e54510:	dc800e15 	stw	r18,56(sp)
  e54514:	dc400d15 	stw	r17,52(sp)
  e54518:	14416716 	blt	r2,r17,e54ab8 <___vfprintf_internal_r+0xb90>
  e5451c:	a8c00204 	addi	r3,r21,8
  e54520:	d9814c17 	ldw	r6,1328(sp)
  e54524:	3080010c 	andi	r2,r6,4
  e54528:	10002826 	beq	r2,zero,e545cc <___vfprintf_internal_r+0x6a4>
  e5452c:	d8814a17 	ldw	r2,1320(sp)
  e54530:	d9014517 	ldw	r4,1300(sp)
  e54534:	1121c83a 	sub	r16,r2,r4
  e54538:	0400240e 	bge	zero,r16,e545cc <___vfprintf_internal_r+0x6a4>
  e5453c:	00800404 	movi	r2,16
  e54540:	14044f0e 	bge	r2,r16,e55680 <___vfprintf_internal_r+0x1758>
  e54544:	dc400d17 	ldw	r17,52(sp)
  e54548:	1027883a 	mov	r19,r2
  e5454c:	070039b4 	movhi	fp,230
  e54550:	e7050384 	addi	fp,fp,5134
  e54554:	050001c4 	movi	r20,7
  e54558:	00000306 	br	e54568 <___vfprintf_internal_r+0x640>
  e5455c:	843ffc04 	addi	r16,r16,-16
  e54560:	18c00204 	addi	r3,r3,8
  e54564:	9c00110e 	bge	r19,r16,e545ac <___vfprintf_internal_r+0x684>
  e54568:	94800404 	addi	r18,r18,16
  e5456c:	8c400044 	addi	r17,r17,1
  e54570:	1f000015 	stw	fp,0(r3)
  e54574:	1cc00115 	stw	r19,4(r3)
  e54578:	dc800e15 	stw	r18,56(sp)
  e5457c:	dc400d15 	stw	r17,52(sp)
  e54580:	a47ff60e 	bge	r20,r17,e5455c <___vfprintf_internal_r+0x634>
  e54584:	d9014f17 	ldw	r4,1340(sp)
  e54588:	b00b883a 	mov	r5,r22
  e5458c:	d9800c04 	addi	r6,sp,48
  e54590:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54594:	10001c1e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e54598:	843ffc04 	addi	r16,r16,-16
  e5459c:	dc800e17 	ldw	r18,56(sp)
  e545a0:	dc400d17 	ldw	r17,52(sp)
  e545a4:	d8c01904 	addi	r3,sp,100
  e545a8:	9c3fef16 	blt	r19,r16,e54568 <___vfprintf_internal_r+0x640>
  e545ac:	9425883a 	add	r18,r18,r16
  e545b0:	8c400044 	addi	r17,r17,1
  e545b4:	008001c4 	movi	r2,7
  e545b8:	1f000015 	stw	fp,0(r3)
  e545bc:	1c000115 	stw	r16,4(r3)
  e545c0:	dc800e15 	stw	r18,56(sp)
  e545c4:	dc400d15 	stw	r17,52(sp)
  e545c8:	1440cb16 	blt	r2,r17,e548f8 <___vfprintf_internal_r+0x9d0>
  e545cc:	d8814a17 	ldw	r2,1320(sp)
  e545d0:	d9414517 	ldw	r5,1300(sp)
  e545d4:	1140010e 	bge	r2,r5,e545dc <___vfprintf_internal_r+0x6b4>
  e545d8:	2805883a 	mov	r2,r5
  e545dc:	d9814b17 	ldw	r6,1324(sp)
  e545e0:	308d883a 	add	r6,r6,r2
  e545e4:	d9814b15 	stw	r6,1324(sp)
  e545e8:	90013b1e 	bne	r18,zero,e54ad8 <___vfprintf_internal_r+0xbb0>
  e545ec:	d9c14017 	ldw	r7,1280(sp)
  e545f0:	dd401904 	addi	r21,sp,100
  e545f4:	d8000d15 	stw	zero,52(sp)
  e545f8:	003ea706 	br	e54098 <___vfprintf_internal_r+0x170>
  e545fc:	d8800e17 	ldw	r2,56(sp)
  e54600:	10053f1e 	bne	r2,zero,e55b00 <___vfprintf_internal_r+0x1bd8>
  e54604:	d8000d15 	stw	zero,52(sp)
  e54608:	b080030b 	ldhu	r2,12(r22)
  e5460c:	1080100c 	andi	r2,r2,64
  e54610:	103e8726 	beq	r2,zero,e54030 <___vfprintf_internal_r+0x108>
  e54614:	00bfffc4 	movi	r2,-1
  e54618:	d8814b15 	stw	r2,1324(sp)
  e5461c:	003e8406 	br	e54030 <___vfprintf_internal_r+0x108>
  e54620:	d9814d17 	ldw	r6,1332(sp)
  e54624:	00801944 	movi	r2,101
  e54628:	11806e16 	blt	r2,r6,e547e4 <___vfprintf_internal_r+0x8bc>
  e5462c:	d9414717 	ldw	r5,1308(sp)
  e54630:	00c00044 	movi	r3,1
  e54634:	1943430e 	bge	r3,r5,e55344 <___vfprintf_internal_r+0x141c>
  e54638:	d8814117 	ldw	r2,1284(sp)
  e5463c:	94800044 	addi	r18,r18,1
  e54640:	8c400044 	addi	r17,r17,1
  e54644:	a8800015 	stw	r2,0(r21)
  e54648:	008001c4 	movi	r2,7
  e5464c:	a8c00115 	stw	r3,4(r21)
  e54650:	dc800e15 	stw	r18,56(sp)
  e54654:	dc400d15 	stw	r17,52(sp)
  e54658:	1441ca16 	blt	r2,r17,e54d84 <___vfprintf_internal_r+0xe5c>
  e5465c:	a8c00204 	addi	r3,r21,8
  e54660:	d9014917 	ldw	r4,1316(sp)
  e54664:	00800044 	movi	r2,1
  e54668:	94800044 	addi	r18,r18,1
  e5466c:	8c400044 	addi	r17,r17,1
  e54670:	18800115 	stw	r2,4(r3)
  e54674:	008001c4 	movi	r2,7
  e54678:	19000015 	stw	r4,0(r3)
  e5467c:	dc800e15 	stw	r18,56(sp)
  e54680:	dc400d15 	stw	r17,52(sp)
  e54684:	1441b616 	blt	r2,r17,e54d60 <___vfprintf_internal_r+0xe38>
  e54688:	1cc00204 	addi	r19,r3,8
  e5468c:	d9014217 	ldw	r4,1288(sp)
  e54690:	d9414317 	ldw	r5,1292(sp)
  e54694:	000d883a 	mov	r6,zero
  e54698:	000f883a 	mov	r7,zero
  e5469c:	0e532880 	call	e53288 <__nedf2>
  e546a0:	10017426 	beq	r2,zero,e54c74 <___vfprintf_internal_r+0xd4c>
  e546a4:	d9414717 	ldw	r5,1308(sp)
  e546a8:	d9814117 	ldw	r6,1284(sp)
  e546ac:	8c400044 	addi	r17,r17,1
  e546b0:	2c85883a 	add	r2,r5,r18
  e546b4:	14bfffc4 	addi	r18,r2,-1
  e546b8:	28bfffc4 	addi	r2,r5,-1
  e546bc:	30c00044 	addi	r3,r6,1
  e546c0:	98800115 	stw	r2,4(r19)
  e546c4:	008001c4 	movi	r2,7
  e546c8:	98c00015 	stw	r3,0(r19)
  e546cc:	dc800e15 	stw	r18,56(sp)
  e546d0:	dc400d15 	stw	r17,52(sp)
  e546d4:	14418e16 	blt	r2,r17,e54d10 <___vfprintf_internal_r+0xde8>
  e546d8:	9cc00204 	addi	r19,r19,8
  e546dc:	d9414817 	ldw	r5,1312(sp)
  e546e0:	d8800804 	addi	r2,sp,32
  e546e4:	8c400044 	addi	r17,r17,1
  e546e8:	9165883a 	add	r18,r18,r5
  e546ec:	98800015 	stw	r2,0(r19)
  e546f0:	008001c4 	movi	r2,7
  e546f4:	99400115 	stw	r5,4(r19)
  e546f8:	dc800e15 	stw	r18,56(sp)
  e546fc:	dc400d15 	stw	r17,52(sp)
  e54700:	1440ed16 	blt	r2,r17,e54ab8 <___vfprintf_internal_r+0xb90>
  e54704:	98c00204 	addi	r3,r19,8
  e54708:	003f8506 	br	e54520 <___vfprintf_internal_r+0x5f8>
  e5470c:	d9814a17 	ldw	r6,1320(sp)
  e54710:	d8814517 	ldw	r2,1300(sp)
  e54714:	30a1c83a 	sub	r16,r6,r2
  e54718:	043f4b0e 	bge	zero,r16,e54448 <___vfprintf_internal_r+0x520>
  e5471c:	00800404 	movi	r2,16
  e54720:	1404340e 	bge	r2,r16,e557f4 <___vfprintf_internal_r+0x18cc>
  e54724:	1027883a 	mov	r19,r2
  e54728:	070039b4 	movhi	fp,230
  e5472c:	e704ff84 	addi	fp,fp,5118
  e54730:	050001c4 	movi	r20,7
  e54734:	00000306 	br	e54744 <___vfprintf_internal_r+0x81c>
  e54738:	843ffc04 	addi	r16,r16,-16
  e5473c:	ad400204 	addi	r21,r21,8
  e54740:	9c00130e 	bge	r19,r16,e54790 <___vfprintf_internal_r+0x868>
  e54744:	94800404 	addi	r18,r18,16
  e54748:	8c400044 	addi	r17,r17,1
  e5474c:	af000015 	stw	fp,0(r21)
  e54750:	acc00115 	stw	r19,4(r21)
  e54754:	dc800e15 	stw	r18,56(sp)
  e54758:	dc400d15 	stw	r17,52(sp)
  e5475c:	a47ff60e 	bge	r20,r17,e54738 <___vfprintf_internal_r+0x810>
  e54760:	d9014f17 	ldw	r4,1340(sp)
  e54764:	b00b883a 	mov	r5,r22
  e54768:	d9800c04 	addi	r6,sp,48
  e5476c:	d9c15115 	stw	r7,1348(sp)
  e54770:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54774:	d9c15117 	ldw	r7,1348(sp)
  e54778:	103fa31e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e5477c:	843ffc04 	addi	r16,r16,-16
  e54780:	dc800e17 	ldw	r18,56(sp)
  e54784:	dc400d17 	ldw	r17,52(sp)
  e54788:	dd401904 	addi	r21,sp,100
  e5478c:	9c3fed16 	blt	r19,r16,e54744 <___vfprintf_internal_r+0x81c>
  e54790:	9425883a 	add	r18,r18,r16
  e54794:	8c400044 	addi	r17,r17,1
  e54798:	008001c4 	movi	r2,7
  e5479c:	af000015 	stw	fp,0(r21)
  e547a0:	ac000115 	stw	r16,4(r21)
  e547a4:	dc800e15 	stw	r18,56(sp)
  e547a8:	dc400d15 	stw	r17,52(sp)
  e547ac:	14416116 	blt	r2,r17,e54d34 <___vfprintf_internal_r+0xe0c>
  e547b0:	ad400204 	addi	r21,r21,8
  e547b4:	003f2406 	br	e54448 <___vfprintf_internal_r+0x520>
  e547b8:	d9014f17 	ldw	r4,1340(sp)
  e547bc:	0e579980 	call	e57998 <__sinit>
  e547c0:	d9c15117 	ldw	r7,1348(sp)
  e547c4:	003def06 	br	e53f84 <___vfprintf_internal_r+0x5c>
  e547c8:	d9014f17 	ldw	r4,1340(sp)
  e547cc:	b00b883a 	mov	r5,r22
  e547d0:	d9c15115 	stw	r7,1348(sp)
  e547d4:	0e55df80 	call	e55df8 <__swsetup_r>
  e547d8:	d9c15117 	ldw	r7,1348(sp)
  e547dc:	103dee26 	beq	r2,zero,e53f98 <___vfprintf_internal_r+0x70>
  e547e0:	003f8c06 	br	e54614 <___vfprintf_internal_r+0x6ec>
  e547e4:	d9014217 	ldw	r4,1288(sp)
  e547e8:	d9414317 	ldw	r5,1292(sp)
  e547ec:	000d883a 	mov	r6,zero
  e547f0:	000f883a 	mov	r7,zero
  e547f4:	0e5bf940 	call	e5bf94 <__eqdf2>
  e547f8:	1000f21e 	bne	r2,zero,e54bc4 <___vfprintf_internal_r+0xc9c>
  e547fc:	008039b4 	movhi	r2,230
  e54800:	10848704 	addi	r2,r2,4636
  e54804:	94800044 	addi	r18,r18,1
  e54808:	8c400044 	addi	r17,r17,1
  e5480c:	a8800015 	stw	r2,0(r21)
  e54810:	00c00044 	movi	r3,1
  e54814:	008001c4 	movi	r2,7
  e54818:	a8c00115 	stw	r3,4(r21)
  e5481c:	dc800e15 	stw	r18,56(sp)
  e54820:	dc400d15 	stw	r17,52(sp)
  e54824:	1442fa16 	blt	r2,r17,e55410 <___vfprintf_internal_r+0x14e8>
  e54828:	a8c00204 	addi	r3,r21,8
  e5482c:	d8800517 	ldw	r2,20(sp)
  e54830:	d9014717 	ldw	r4,1308(sp)
  e54834:	11015c0e 	bge	r2,r4,e54da8 <___vfprintf_internal_r+0xe80>
  e54838:	dc400d17 	ldw	r17,52(sp)
  e5483c:	d9814917 	ldw	r6,1316(sp)
  e54840:	00800044 	movi	r2,1
  e54844:	94800044 	addi	r18,r18,1
  e54848:	8c400044 	addi	r17,r17,1
  e5484c:	18800115 	stw	r2,4(r3)
  e54850:	008001c4 	movi	r2,7
  e54854:	19800015 	stw	r6,0(r3)
  e54858:	dc800e15 	stw	r18,56(sp)
  e5485c:	dc400d15 	stw	r17,52(sp)
  e54860:	14431016 	blt	r2,r17,e554a4 <___vfprintf_internal_r+0x157c>
  e54864:	18c00204 	addi	r3,r3,8
  e54868:	d8814717 	ldw	r2,1308(sp)
  e5486c:	143fffc4 	addi	r16,r2,-1
  e54870:	043f2b0e 	bge	zero,r16,e54520 <___vfprintf_internal_r+0x5f8>
  e54874:	00800404 	movi	r2,16
  e54878:	1402a20e 	bge	r2,r16,e55304 <___vfprintf_internal_r+0x13dc>
  e5487c:	dc400d17 	ldw	r17,52(sp)
  e54880:	1027883a 	mov	r19,r2
  e54884:	070039b4 	movhi	fp,230
  e54888:	e704ff84 	addi	fp,fp,5118
  e5488c:	050001c4 	movi	r20,7
  e54890:	00000306 	br	e548a0 <___vfprintf_internal_r+0x978>
  e54894:	18c00204 	addi	r3,r3,8
  e54898:	843ffc04 	addi	r16,r16,-16
  e5489c:	9c029c0e 	bge	r19,r16,e55310 <___vfprintf_internal_r+0x13e8>
  e548a0:	94800404 	addi	r18,r18,16
  e548a4:	8c400044 	addi	r17,r17,1
  e548a8:	1f000015 	stw	fp,0(r3)
  e548ac:	1cc00115 	stw	r19,4(r3)
  e548b0:	dc800e15 	stw	r18,56(sp)
  e548b4:	dc400d15 	stw	r17,52(sp)
  e548b8:	a47ff60e 	bge	r20,r17,e54894 <___vfprintf_internal_r+0x96c>
  e548bc:	d9014f17 	ldw	r4,1340(sp)
  e548c0:	b00b883a 	mov	r5,r22
  e548c4:	d9800c04 	addi	r6,sp,48
  e548c8:	0e53ed00 	call	e53ed0 <__sprint_r>
  e548cc:	103f4e1e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e548d0:	dc800e17 	ldw	r18,56(sp)
  e548d4:	dc400d17 	ldw	r17,52(sp)
  e548d8:	d8c01904 	addi	r3,sp,100
  e548dc:	003fee06 	br	e54898 <___vfprintf_internal_r+0x970>
  e548e0:	d8802c0b 	ldhu	r2,176(sp)
  e548e4:	00ffffc4 	movi	r3,-1
  e548e8:	d8c14b15 	stw	r3,1324(sp)
  e548ec:	1080100c 	andi	r2,r2,64
  e548f0:	103dcc1e 	bne	r2,zero,e54024 <___vfprintf_internal_r+0xfc>
  e548f4:	003dce06 	br	e54030 <___vfprintf_internal_r+0x108>
  e548f8:	d9014f17 	ldw	r4,1340(sp)
  e548fc:	b00b883a 	mov	r5,r22
  e54900:	d9800c04 	addi	r6,sp,48
  e54904:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54908:	103f3f1e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e5490c:	dc800e17 	ldw	r18,56(sp)
  e54910:	003f2e06 	br	e545cc <___vfprintf_internal_r+0x6a4>
  e54914:	d9414c17 	ldw	r5,1328(sp)
  e54918:	29400414 	ori	r5,r5,16
  e5491c:	d9414c15 	stw	r5,1328(sp)
  e54920:	d9814c17 	ldw	r6,1328(sp)
  e54924:	3080080c 	andi	r2,r6,32
  e54928:	10014f1e 	bne	r2,zero,e54e68 <___vfprintf_internal_r+0xf40>
  e5492c:	d8c14c17 	ldw	r3,1328(sp)
  e54930:	1880040c 	andi	r2,r3,16
  e54934:	1002ea1e 	bne	r2,zero,e554e0 <___vfprintf_internal_r+0x15b8>
  e54938:	d9014c17 	ldw	r4,1328(sp)
  e5493c:	2080100c 	andi	r2,r4,64
  e54940:	1002e726 	beq	r2,zero,e554e0 <___vfprintf_internal_r+0x15b8>
  e54944:	3880000f 	ldh	r2,0(r7)
  e54948:	39c00104 	addi	r7,r7,4
  e5494c:	d9c14015 	stw	r7,1280(sp)
  e54950:	1023d7fa 	srai	r17,r2,31
  e54954:	1021883a 	mov	r16,r2
  e54958:	88037216 	blt	r17,zero,e55724 <___vfprintf_internal_r+0x17fc>
  e5495c:	01000044 	movi	r4,1
  e54960:	98000416 	blt	r19,zero,e54974 <___vfprintf_internal_r+0xa4c>
  e54964:	d8c14c17 	ldw	r3,1328(sp)
  e54968:	00bfdfc4 	movi	r2,-129
  e5496c:	1886703a 	and	r3,r3,r2
  e54970:	d8c14c15 	stw	r3,1328(sp)
  e54974:	8444b03a 	or	r2,r16,r17
  e54978:	1002261e 	bne	r2,zero,e55214 <___vfprintf_internal_r+0x12ec>
  e5497c:	9802251e 	bne	r19,zero,e55214 <___vfprintf_internal_r+0x12ec>
  e54980:	20803fcc 	andi	r2,r4,255
  e54984:	10029b26 	beq	r2,zero,e553f4 <___vfprintf_internal_r+0x14cc>
  e54988:	d8c01904 	addi	r3,sp,100
  e5498c:	dd000f04 	addi	r20,sp,60
  e54990:	d8c14115 	stw	r3,1284(sp)
  e54994:	d8c14117 	ldw	r3,1284(sp)
  e54998:	dcc14515 	stw	r19,1300(sp)
  e5499c:	a0c5c83a 	sub	r2,r20,r3
  e549a0:	11c00a04 	addi	r7,r2,40
  e549a4:	99c0010e 	bge	r19,r7,e549ac <___vfprintf_internal_r+0xa84>
  e549a8:	d9c14515 	stw	r7,1300(sp)
  e549ac:	dcc14615 	stw	r19,1304(sp)
  e549b0:	d8800407 	ldb	r2,16(sp)
  e549b4:	103e4c26 	beq	r2,zero,e542e8 <___vfprintf_internal_r+0x3c0>
  e549b8:	d8814517 	ldw	r2,1300(sp)
  e549bc:	10800044 	addi	r2,r2,1
  e549c0:	d8814515 	stw	r2,1300(sp)
  e549c4:	003e4806 	br	e542e8 <___vfprintf_internal_r+0x3c0>
  e549c8:	d9814c17 	ldw	r6,1328(sp)
  e549cc:	31800414 	ori	r6,r6,16
  e549d0:	d9814c15 	stw	r6,1328(sp)
  e549d4:	d8c14c17 	ldw	r3,1328(sp)
  e549d8:	1880080c 	andi	r2,r3,32
  e549dc:	1001271e 	bne	r2,zero,e54e7c <___vfprintf_internal_r+0xf54>
  e549e0:	d9414c17 	ldw	r5,1328(sp)
  e549e4:	2880040c 	andi	r2,r5,16
  e549e8:	1002b61e 	bne	r2,zero,e554c4 <___vfprintf_internal_r+0x159c>
  e549ec:	d9814c17 	ldw	r6,1328(sp)
  e549f0:	3080100c 	andi	r2,r6,64
  e549f4:	1002b326 	beq	r2,zero,e554c4 <___vfprintf_internal_r+0x159c>
  e549f8:	3c00000b 	ldhu	r16,0(r7)
  e549fc:	0009883a 	mov	r4,zero
  e54a00:	39c00104 	addi	r7,r7,4
  e54a04:	0023883a 	mov	r17,zero
  e54a08:	d9c14015 	stw	r7,1280(sp)
  e54a0c:	d8000405 	stb	zero,16(sp)
  e54a10:	003fd306 	br	e54960 <___vfprintf_internal_r+0xa38>
  e54a14:	d9014c17 	ldw	r4,1328(sp)
  e54a18:	21000414 	ori	r4,r4,16
  e54a1c:	d9014c15 	stw	r4,1328(sp)
  e54a20:	d9414c17 	ldw	r5,1328(sp)
  e54a24:	2880080c 	andi	r2,r5,32
  e54a28:	1001081e 	bne	r2,zero,e54e4c <___vfprintf_internal_r+0xf24>
  e54a2c:	d8c14c17 	ldw	r3,1328(sp)
  e54a30:	1880040c 	andi	r2,r3,16
  e54a34:	1002b01e 	bne	r2,zero,e554f8 <___vfprintf_internal_r+0x15d0>
  e54a38:	d9014c17 	ldw	r4,1328(sp)
  e54a3c:	2080100c 	andi	r2,r4,64
  e54a40:	1002ad26 	beq	r2,zero,e554f8 <___vfprintf_internal_r+0x15d0>
  e54a44:	3c00000b 	ldhu	r16,0(r7)
  e54a48:	01000044 	movi	r4,1
  e54a4c:	39c00104 	addi	r7,r7,4
  e54a50:	0023883a 	mov	r17,zero
  e54a54:	d9c14015 	stw	r7,1280(sp)
  e54a58:	d8000405 	stb	zero,16(sp)
  e54a5c:	003fc006 	br	e54960 <___vfprintf_internal_r+0xa38>
  e54a60:	d9014f17 	ldw	r4,1340(sp)
  e54a64:	b00b883a 	mov	r5,r22
  e54a68:	d9800c04 	addi	r6,sp,48
  e54a6c:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54a70:	103ee51e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e54a74:	dc800e17 	ldw	r18,56(sp)
  e54a78:	d8c01904 	addi	r3,sp,100
  e54a7c:	d9814c17 	ldw	r6,1328(sp)
  e54a80:	3080004c 	andi	r2,r6,1
  e54a84:	1005003a 	cmpeq	r2,r2,zero
  e54a88:	103ea51e 	bne	r2,zero,e54520 <___vfprintf_internal_r+0x5f8>
  e54a8c:	00800044 	movi	r2,1
  e54a90:	dc400d17 	ldw	r17,52(sp)
  e54a94:	18800115 	stw	r2,4(r3)
  e54a98:	d8814917 	ldw	r2,1316(sp)
  e54a9c:	94800044 	addi	r18,r18,1
  e54aa0:	8c400044 	addi	r17,r17,1
  e54aa4:	18800015 	stw	r2,0(r3)
  e54aa8:	008001c4 	movi	r2,7
  e54aac:	dc800e15 	stw	r18,56(sp)
  e54ab0:	dc400d15 	stw	r17,52(sp)
  e54ab4:	14421e0e 	bge	r2,r17,e55330 <___vfprintf_internal_r+0x1408>
  e54ab8:	d9014f17 	ldw	r4,1340(sp)
  e54abc:	b00b883a 	mov	r5,r22
  e54ac0:	d9800c04 	addi	r6,sp,48
  e54ac4:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54ac8:	103ecf1e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e54acc:	dc800e17 	ldw	r18,56(sp)
  e54ad0:	d8c01904 	addi	r3,sp,100
  e54ad4:	003e9206 	br	e54520 <___vfprintf_internal_r+0x5f8>
  e54ad8:	d9014f17 	ldw	r4,1340(sp)
  e54adc:	b00b883a 	mov	r5,r22
  e54ae0:	d9800c04 	addi	r6,sp,48
  e54ae4:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54ae8:	103ec026 	beq	r2,zero,e545ec <___vfprintf_internal_r+0x6c4>
  e54aec:	003ec606 	br	e54608 <___vfprintf_internal_r+0x6e0>
  e54af0:	d9014f17 	ldw	r4,1340(sp)
  e54af4:	b00b883a 	mov	r5,r22
  e54af8:	d9800c04 	addi	r6,sp,48
  e54afc:	d9c15115 	stw	r7,1348(sp)
  e54b00:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54b04:	d9c15117 	ldw	r7,1348(sp)
  e54b08:	103ebf1e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e54b0c:	dc800e17 	ldw	r18,56(sp)
  e54b10:	dc400d17 	ldw	r17,52(sp)
  e54b14:	dd401904 	addi	r21,sp,100
  e54b18:	003e7406 	br	e544ec <___vfprintf_internal_r+0x5c4>
  e54b1c:	d9014f17 	ldw	r4,1340(sp)
  e54b20:	b00b883a 	mov	r5,r22
  e54b24:	d9800c04 	addi	r6,sp,48
  e54b28:	d9c15115 	stw	r7,1348(sp)
  e54b2c:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54b30:	d9c15117 	ldw	r7,1348(sp)
  e54b34:	103eb41e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e54b38:	dd401904 	addi	r21,sp,100
  e54b3c:	003d6d06 	br	e540f4 <___vfprintf_internal_r+0x1cc>
  e54b40:	d9014f17 	ldw	r4,1340(sp)
  e54b44:	b00b883a 	mov	r5,r22
  e54b48:	d9800c04 	addi	r6,sp,48
  e54b4c:	d9c15115 	stw	r7,1348(sp)
  e54b50:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54b54:	d9c15117 	ldw	r7,1348(sp)
  e54b58:	103eab1e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e54b5c:	dc800e17 	ldw	r18,56(sp)
  e54b60:	dc400d17 	ldw	r17,52(sp)
  e54b64:	dd401904 	addi	r21,sp,100
  e54b68:	003e3406 	br	e5443c <___vfprintf_internal_r+0x514>
  e54b6c:	d9014f17 	ldw	r4,1340(sp)
  e54b70:	b00b883a 	mov	r5,r22
  e54b74:	d9800c04 	addi	r6,sp,48
  e54b78:	d9c15115 	stw	r7,1348(sp)
  e54b7c:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54b80:	d9c15117 	ldw	r7,1348(sp)
  e54b84:	103ea01e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e54b88:	dc800e17 	ldw	r18,56(sp)
  e54b8c:	dc400d17 	ldw	r17,52(sp)
  e54b90:	dd401904 	addi	r21,sp,100
  e54b94:	003e1c06 	br	e54408 <___vfprintf_internal_r+0x4e0>
  e54b98:	d9014f17 	ldw	r4,1340(sp)
  e54b9c:	b00b883a 	mov	r5,r22
  e54ba0:	d9800c04 	addi	r6,sp,48
  e54ba4:	d9c15115 	stw	r7,1348(sp)
  e54ba8:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54bac:	d9c15117 	ldw	r7,1348(sp)
  e54bb0:	103e951e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e54bb4:	dc800e17 	ldw	r18,56(sp)
  e54bb8:	dc400d17 	ldw	r17,52(sp)
  e54bbc:	dd401904 	addi	r21,sp,100
  e54bc0:	003e0406 	br	e543d4 <___vfprintf_internal_r+0x4ac>
  e54bc4:	d9000517 	ldw	r4,20(sp)
  e54bc8:	0102520e 	bge	zero,r4,e55514 <___vfprintf_internal_r+0x15ec>
  e54bcc:	d9814717 	ldw	r6,1308(sp)
  e54bd0:	21807a16 	blt	r4,r6,e54dbc <___vfprintf_internal_r+0xe94>
  e54bd4:	d8814117 	ldw	r2,1284(sp)
  e54bd8:	91a5883a 	add	r18,r18,r6
  e54bdc:	8c400044 	addi	r17,r17,1
  e54be0:	a8800015 	stw	r2,0(r21)
  e54be4:	008001c4 	movi	r2,7
  e54be8:	a9800115 	stw	r6,4(r21)
  e54bec:	dc800e15 	stw	r18,56(sp)
  e54bf0:	dc400d15 	stw	r17,52(sp)
  e54bf4:	1442f616 	blt	r2,r17,e557d0 <___vfprintf_internal_r+0x18a8>
  e54bf8:	a8c00204 	addi	r3,r21,8
  e54bfc:	d9414717 	ldw	r5,1308(sp)
  e54c00:	2161c83a 	sub	r16,r4,r5
  e54c04:	043f9d0e 	bge	zero,r16,e54a7c <___vfprintf_internal_r+0xb54>
  e54c08:	00800404 	movi	r2,16
  e54c0c:	1402130e 	bge	r2,r16,e5545c <___vfprintf_internal_r+0x1534>
  e54c10:	dc400d17 	ldw	r17,52(sp)
  e54c14:	1027883a 	mov	r19,r2
  e54c18:	070039b4 	movhi	fp,230
  e54c1c:	e704ff84 	addi	fp,fp,5118
  e54c20:	050001c4 	movi	r20,7
  e54c24:	00000306 	br	e54c34 <___vfprintf_internal_r+0xd0c>
  e54c28:	18c00204 	addi	r3,r3,8
  e54c2c:	843ffc04 	addi	r16,r16,-16
  e54c30:	9c020d0e 	bge	r19,r16,e55468 <___vfprintf_internal_r+0x1540>
  e54c34:	94800404 	addi	r18,r18,16
  e54c38:	8c400044 	addi	r17,r17,1
  e54c3c:	1f000015 	stw	fp,0(r3)
  e54c40:	1cc00115 	stw	r19,4(r3)
  e54c44:	dc800e15 	stw	r18,56(sp)
  e54c48:	dc400d15 	stw	r17,52(sp)
  e54c4c:	a47ff60e 	bge	r20,r17,e54c28 <___vfprintf_internal_r+0xd00>
  e54c50:	d9014f17 	ldw	r4,1340(sp)
  e54c54:	b00b883a 	mov	r5,r22
  e54c58:	d9800c04 	addi	r6,sp,48
  e54c5c:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54c60:	103e691e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e54c64:	dc800e17 	ldw	r18,56(sp)
  e54c68:	dc400d17 	ldw	r17,52(sp)
  e54c6c:	d8c01904 	addi	r3,sp,100
  e54c70:	003fee06 	br	e54c2c <___vfprintf_internal_r+0xd04>
  e54c74:	d8814717 	ldw	r2,1308(sp)
  e54c78:	143fffc4 	addi	r16,r2,-1
  e54c7c:	043e970e 	bge	zero,r16,e546dc <___vfprintf_internal_r+0x7b4>
  e54c80:	00800404 	movi	r2,16
  e54c84:	1400180e 	bge	r2,r16,e54ce8 <___vfprintf_internal_r+0xdc0>
  e54c88:	1029883a 	mov	r20,r2
  e54c8c:	070039b4 	movhi	fp,230
  e54c90:	e704ff84 	addi	fp,fp,5118
  e54c94:	054001c4 	movi	r21,7
  e54c98:	00000306 	br	e54ca8 <___vfprintf_internal_r+0xd80>
  e54c9c:	9cc00204 	addi	r19,r19,8
  e54ca0:	843ffc04 	addi	r16,r16,-16
  e54ca4:	a400120e 	bge	r20,r16,e54cf0 <___vfprintf_internal_r+0xdc8>
  e54ca8:	94800404 	addi	r18,r18,16
  e54cac:	8c400044 	addi	r17,r17,1
  e54cb0:	9f000015 	stw	fp,0(r19)
  e54cb4:	9d000115 	stw	r20,4(r19)
  e54cb8:	dc800e15 	stw	r18,56(sp)
  e54cbc:	dc400d15 	stw	r17,52(sp)
  e54cc0:	ac7ff60e 	bge	r21,r17,e54c9c <___vfprintf_internal_r+0xd74>
  e54cc4:	d9014f17 	ldw	r4,1340(sp)
  e54cc8:	b00b883a 	mov	r5,r22
  e54ccc:	d9800c04 	addi	r6,sp,48
  e54cd0:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54cd4:	103e4c1e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e54cd8:	dc800e17 	ldw	r18,56(sp)
  e54cdc:	dc400d17 	ldw	r17,52(sp)
  e54ce0:	dcc01904 	addi	r19,sp,100
  e54ce4:	003fee06 	br	e54ca0 <___vfprintf_internal_r+0xd78>
  e54ce8:	070039b4 	movhi	fp,230
  e54cec:	e704ff84 	addi	fp,fp,5118
  e54cf0:	9425883a 	add	r18,r18,r16
  e54cf4:	8c400044 	addi	r17,r17,1
  e54cf8:	008001c4 	movi	r2,7
  e54cfc:	9f000015 	stw	fp,0(r19)
  e54d00:	9c000115 	stw	r16,4(r19)
  e54d04:	dc800e15 	stw	r18,56(sp)
  e54d08:	dc400d15 	stw	r17,52(sp)
  e54d0c:	147e720e 	bge	r2,r17,e546d8 <___vfprintf_internal_r+0x7b0>
  e54d10:	d9014f17 	ldw	r4,1340(sp)
  e54d14:	b00b883a 	mov	r5,r22
  e54d18:	d9800c04 	addi	r6,sp,48
  e54d1c:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54d20:	103e391e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e54d24:	dc800e17 	ldw	r18,56(sp)
  e54d28:	dc400d17 	ldw	r17,52(sp)
  e54d2c:	dcc01904 	addi	r19,sp,100
  e54d30:	003e6a06 	br	e546dc <___vfprintf_internal_r+0x7b4>
  e54d34:	d9014f17 	ldw	r4,1340(sp)
  e54d38:	b00b883a 	mov	r5,r22
  e54d3c:	d9800c04 	addi	r6,sp,48
  e54d40:	d9c15115 	stw	r7,1348(sp)
  e54d44:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54d48:	d9c15117 	ldw	r7,1348(sp)
  e54d4c:	103e2e1e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e54d50:	dc800e17 	ldw	r18,56(sp)
  e54d54:	dc400d17 	ldw	r17,52(sp)
  e54d58:	dd401904 	addi	r21,sp,100
  e54d5c:	003dba06 	br	e54448 <___vfprintf_internal_r+0x520>
  e54d60:	d9014f17 	ldw	r4,1340(sp)
  e54d64:	b00b883a 	mov	r5,r22
  e54d68:	d9800c04 	addi	r6,sp,48
  e54d6c:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54d70:	103e251e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e54d74:	dc800e17 	ldw	r18,56(sp)
  e54d78:	dc400d17 	ldw	r17,52(sp)
  e54d7c:	dcc01904 	addi	r19,sp,100
  e54d80:	003e4206 	br	e5468c <___vfprintf_internal_r+0x764>
  e54d84:	d9014f17 	ldw	r4,1340(sp)
  e54d88:	b00b883a 	mov	r5,r22
  e54d8c:	d9800c04 	addi	r6,sp,48
  e54d90:	0e53ed00 	call	e53ed0 <__sprint_r>
  e54d94:	103e1c1e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e54d98:	dc800e17 	ldw	r18,56(sp)
  e54d9c:	dc400d17 	ldw	r17,52(sp)
  e54da0:	d8c01904 	addi	r3,sp,100
  e54da4:	003e2e06 	br	e54660 <___vfprintf_internal_r+0x738>
  e54da8:	d9414c17 	ldw	r5,1328(sp)
  e54dac:	2880004c 	andi	r2,r5,1
  e54db0:	1005003a 	cmpeq	r2,r2,zero
  e54db4:	103dda1e 	bne	r2,zero,e54520 <___vfprintf_internal_r+0x5f8>
  e54db8:	003e9f06 	br	e54838 <___vfprintf_internal_r+0x910>
  e54dbc:	d8c14117 	ldw	r3,1284(sp)
  e54dc0:	9125883a 	add	r18,r18,r4
  e54dc4:	8c400044 	addi	r17,r17,1
  e54dc8:	008001c4 	movi	r2,7
  e54dcc:	a8c00015 	stw	r3,0(r21)
  e54dd0:	a9000115 	stw	r4,4(r21)
  e54dd4:	dc800e15 	stw	r18,56(sp)
  e54dd8:	dc400d15 	stw	r17,52(sp)
  e54ddc:	14426616 	blt	r2,r17,e55778 <___vfprintf_internal_r+0x1850>
  e54de0:	a8c00204 	addi	r3,r21,8
  e54de4:	d9414917 	ldw	r5,1316(sp)
  e54de8:	00800044 	movi	r2,1
  e54dec:	94800044 	addi	r18,r18,1
  e54df0:	8c400044 	addi	r17,r17,1
  e54df4:	18800115 	stw	r2,4(r3)
  e54df8:	008001c4 	movi	r2,7
  e54dfc:	19400015 	stw	r5,0(r3)
  e54e00:	dc800e15 	stw	r18,56(sp)
  e54e04:	dc400d15 	stw	r17,52(sp)
  e54e08:	2021883a 	mov	r16,r4
  e54e0c:	14425016 	blt	r2,r17,e55750 <___vfprintf_internal_r+0x1828>
  e54e10:	19400204 	addi	r5,r3,8
  e54e14:	d9814717 	ldw	r6,1308(sp)
  e54e18:	8c400044 	addi	r17,r17,1
  e54e1c:	dc400d15 	stw	r17,52(sp)
  e54e20:	3107c83a 	sub	r3,r6,r4
  e54e24:	d9014117 	ldw	r4,1284(sp)
  e54e28:	90e5883a 	add	r18,r18,r3
  e54e2c:	28c00115 	stw	r3,4(r5)
  e54e30:	8105883a 	add	r2,r16,r4
  e54e34:	28800015 	stw	r2,0(r5)
  e54e38:	008001c4 	movi	r2,7
  e54e3c:	dc800e15 	stw	r18,56(sp)
  e54e40:	147f1d16 	blt	r2,r17,e54ab8 <___vfprintf_internal_r+0xb90>
  e54e44:	28c00204 	addi	r3,r5,8
  e54e48:	003db506 	br	e54520 <___vfprintf_internal_r+0x5f8>
  e54e4c:	3c000017 	ldw	r16,0(r7)
  e54e50:	3c400117 	ldw	r17,4(r7)
  e54e54:	39800204 	addi	r6,r7,8
  e54e58:	01000044 	movi	r4,1
  e54e5c:	d9814015 	stw	r6,1280(sp)
  e54e60:	d8000405 	stb	zero,16(sp)
  e54e64:	003ebe06 	br	e54960 <___vfprintf_internal_r+0xa38>
  e54e68:	3c000017 	ldw	r16,0(r7)
  e54e6c:	3c400117 	ldw	r17,4(r7)
  e54e70:	38800204 	addi	r2,r7,8
  e54e74:	d8814015 	stw	r2,1280(sp)
  e54e78:	003eb706 	br	e54958 <___vfprintf_internal_r+0xa30>
  e54e7c:	3c000017 	ldw	r16,0(r7)
  e54e80:	3c400117 	ldw	r17,4(r7)
  e54e84:	39000204 	addi	r4,r7,8
  e54e88:	d9014015 	stw	r4,1280(sp)
  e54e8c:	0009883a 	mov	r4,zero
  e54e90:	d8000405 	stb	zero,16(sp)
  e54e94:	003eb206 	br	e54960 <___vfprintf_internal_r+0xa38>
  e54e98:	38c00017 	ldw	r3,0(r7)
  e54e9c:	39c00104 	addi	r7,r7,4
  e54ea0:	d8c14a15 	stw	r3,1320(sp)
  e54ea4:	1800d10e 	bge	r3,zero,e551ec <___vfprintf_internal_r+0x12c4>
  e54ea8:	00c7c83a 	sub	r3,zero,r3
  e54eac:	d8c14a15 	stw	r3,1320(sp)
  e54eb0:	d9014c17 	ldw	r4,1328(sp)
  e54eb4:	b8c00007 	ldb	r3,0(r23)
  e54eb8:	21000114 	ori	r4,r4,4
  e54ebc:	d9014c15 	stw	r4,1328(sp)
  e54ec0:	003c9806 	br	e54124 <___vfprintf_internal_r+0x1fc>
  e54ec4:	d9814c17 	ldw	r6,1328(sp)
  e54ec8:	3080080c 	andi	r2,r6,32
  e54ecc:	1001f026 	beq	r2,zero,e55690 <___vfprintf_internal_r+0x1768>
  e54ed0:	d9014b17 	ldw	r4,1324(sp)
  e54ed4:	38800017 	ldw	r2,0(r7)
  e54ed8:	39c00104 	addi	r7,r7,4
  e54edc:	d9c14015 	stw	r7,1280(sp)
  e54ee0:	2007d7fa 	srai	r3,r4,31
  e54ee4:	d9c14017 	ldw	r7,1280(sp)
  e54ee8:	11000015 	stw	r4,0(r2)
  e54eec:	10c00115 	stw	r3,4(r2)
  e54ef0:	003c6906 	br	e54098 <___vfprintf_internal_r+0x170>
  e54ef4:	b8c00007 	ldb	r3,0(r23)
  e54ef8:	00801b04 	movi	r2,108
  e54efc:	18824f26 	beq	r3,r2,e5583c <___vfprintf_internal_r+0x1914>
  e54f00:	d9414c17 	ldw	r5,1328(sp)
  e54f04:	29400414 	ori	r5,r5,16
  e54f08:	d9414c15 	stw	r5,1328(sp)
  e54f0c:	003c8506 	br	e54124 <___vfprintf_internal_r+0x1fc>
  e54f10:	d9814c17 	ldw	r6,1328(sp)
  e54f14:	b8c00007 	ldb	r3,0(r23)
  e54f18:	31800814 	ori	r6,r6,32
  e54f1c:	d9814c15 	stw	r6,1328(sp)
  e54f20:	003c8006 	br	e54124 <___vfprintf_internal_r+0x1fc>
  e54f24:	d8814c17 	ldw	r2,1328(sp)
  e54f28:	3c000017 	ldw	r16,0(r7)
  e54f2c:	00c01e04 	movi	r3,120
  e54f30:	10800094 	ori	r2,r2,2
  e54f34:	d8814c15 	stw	r2,1328(sp)
  e54f38:	39c00104 	addi	r7,r7,4
  e54f3c:	014039b4 	movhi	r5,230
  e54f40:	2944e904 	addi	r5,r5,5028
  e54f44:	00800c04 	movi	r2,48
  e54f48:	0023883a 	mov	r17,zero
  e54f4c:	01000084 	movi	r4,2
  e54f50:	d9c14015 	stw	r7,1280(sp)
  e54f54:	d8c14d15 	stw	r3,1332(sp)
  e54f58:	d9414415 	stw	r5,1296(sp)
  e54f5c:	d8800445 	stb	r2,17(sp)
  e54f60:	d8c00485 	stb	r3,18(sp)
  e54f64:	d8000405 	stb	zero,16(sp)
  e54f68:	003e7d06 	br	e54960 <___vfprintf_internal_r+0xa38>
  e54f6c:	d8814c17 	ldw	r2,1328(sp)
  e54f70:	b8c00007 	ldb	r3,0(r23)
  e54f74:	10801014 	ori	r2,r2,64
  e54f78:	d8814c15 	stw	r2,1328(sp)
  e54f7c:	003c6906 	br	e54124 <___vfprintf_internal_r+0x1fc>
  e54f80:	d9414c17 	ldw	r5,1328(sp)
  e54f84:	2880020c 	andi	r2,r5,8
  e54f88:	1001df26 	beq	r2,zero,e55708 <___vfprintf_internal_r+0x17e0>
  e54f8c:	39800017 	ldw	r6,0(r7)
  e54f90:	38800204 	addi	r2,r7,8
  e54f94:	d8814015 	stw	r2,1280(sp)
  e54f98:	d9814215 	stw	r6,1288(sp)
  e54f9c:	39c00117 	ldw	r7,4(r7)
  e54fa0:	d9c14315 	stw	r7,1292(sp)
  e54fa4:	d9014217 	ldw	r4,1288(sp)
  e54fa8:	d9414317 	ldw	r5,1292(sp)
  e54fac:	0e5a8c80 	call	e5a8c8 <__isinfd>
  e54fb0:	10021726 	beq	r2,zero,e55810 <___vfprintf_internal_r+0x18e8>
  e54fb4:	d9014217 	ldw	r4,1288(sp)
  e54fb8:	d9414317 	ldw	r5,1292(sp)
  e54fbc:	000d883a 	mov	r6,zero
  e54fc0:	000f883a 	mov	r7,zero
  e54fc4:	0e5c12c0 	call	e5c12c <__ltdf2>
  e54fc8:	1002ca16 	blt	r2,zero,e55af4 <___vfprintf_internal_r+0x1bcc>
  e54fcc:	d9414d17 	ldw	r5,1332(sp)
  e54fd0:	008011c4 	movi	r2,71
  e54fd4:	11420a16 	blt	r2,r5,e55800 <___vfprintf_internal_r+0x18d8>
  e54fd8:	018039b4 	movhi	r6,230
  e54fdc:	3184ee04 	addi	r6,r6,5048
  e54fe0:	d9814115 	stw	r6,1284(sp)
  e54fe4:	d9014c17 	ldw	r4,1328(sp)
  e54fe8:	00c000c4 	movi	r3,3
  e54fec:	00bfdfc4 	movi	r2,-129
  e54ff0:	2088703a 	and	r4,r4,r2
  e54ff4:	180f883a 	mov	r7,r3
  e54ff8:	d8c14515 	stw	r3,1300(sp)
  e54ffc:	d9014c15 	stw	r4,1328(sp)
  e55000:	d8014615 	stw	zero,1304(sp)
  e55004:	003e6a06 	br	e549b0 <___vfprintf_internal_r+0xa88>
  e55008:	38800017 	ldw	r2,0(r7)
  e5500c:	00c00044 	movi	r3,1
  e55010:	39c00104 	addi	r7,r7,4
  e55014:	d9c14015 	stw	r7,1280(sp)
  e55018:	d9000f04 	addi	r4,sp,60
  e5501c:	180f883a 	mov	r7,r3
  e55020:	d8c14515 	stw	r3,1300(sp)
  e55024:	d9014115 	stw	r4,1284(sp)
  e55028:	d8800f05 	stb	r2,60(sp)
  e5502c:	d8000405 	stb	zero,16(sp)
  e55030:	003cac06 	br	e542e4 <___vfprintf_internal_r+0x3bc>
  e55034:	014039b4 	movhi	r5,230
  e55038:	2944f404 	addi	r5,r5,5072
  e5503c:	d9414415 	stw	r5,1296(sp)
  e55040:	d9814c17 	ldw	r6,1328(sp)
  e55044:	3080080c 	andi	r2,r6,32
  e55048:	1000f926 	beq	r2,zero,e55430 <___vfprintf_internal_r+0x1508>
  e5504c:	3c000017 	ldw	r16,0(r7)
  e55050:	3c400117 	ldw	r17,4(r7)
  e55054:	38800204 	addi	r2,r7,8
  e55058:	d8814015 	stw	r2,1280(sp)
  e5505c:	d9414c17 	ldw	r5,1328(sp)
  e55060:	2880004c 	andi	r2,r5,1
  e55064:	1005003a 	cmpeq	r2,r2,zero
  e55068:	1000b31e 	bne	r2,zero,e55338 <___vfprintf_internal_r+0x1410>
  e5506c:	8444b03a 	or	r2,r16,r17
  e55070:	1000b126 	beq	r2,zero,e55338 <___vfprintf_internal_r+0x1410>
  e55074:	d9814d17 	ldw	r6,1332(sp)
  e55078:	29400094 	ori	r5,r5,2
  e5507c:	00800c04 	movi	r2,48
  e55080:	01000084 	movi	r4,2
  e55084:	d9414c15 	stw	r5,1328(sp)
  e55088:	d8800445 	stb	r2,17(sp)
  e5508c:	d9800485 	stb	r6,18(sp)
  e55090:	d8000405 	stb	zero,16(sp)
  e55094:	003e3206 	br	e54960 <___vfprintf_internal_r+0xa38>
  e55098:	018039b4 	movhi	r6,230
  e5509c:	3184e904 	addi	r6,r6,5028
  e550a0:	d9814415 	stw	r6,1296(sp)
  e550a4:	003fe606 	br	e55040 <___vfprintf_internal_r+0x1118>
  e550a8:	00800ac4 	movi	r2,43
  e550ac:	d8800405 	stb	r2,16(sp)
  e550b0:	b8c00007 	ldb	r3,0(r23)
  e550b4:	003c1b06 	br	e54124 <___vfprintf_internal_r+0x1fc>
  e550b8:	d8814c17 	ldw	r2,1328(sp)
  e550bc:	b8c00007 	ldb	r3,0(r23)
  e550c0:	10800054 	ori	r2,r2,1
  e550c4:	d8814c15 	stw	r2,1328(sp)
  e550c8:	003c1606 	br	e54124 <___vfprintf_internal_r+0x1fc>
  e550cc:	d8800407 	ldb	r2,16(sp)
  e550d0:	1000461e 	bne	r2,zero,e551ec <___vfprintf_internal_r+0x12c4>
  e550d4:	00800804 	movi	r2,32
  e550d8:	d8800405 	stb	r2,16(sp)
  e550dc:	b8c00007 	ldb	r3,0(r23)
  e550e0:	003c1006 	br	e54124 <___vfprintf_internal_r+0x1fc>
  e550e4:	d9814c17 	ldw	r6,1328(sp)
  e550e8:	b8c00007 	ldb	r3,0(r23)
  e550ec:	31800214 	ori	r6,r6,8
  e550f0:	d9814c15 	stw	r6,1328(sp)
  e550f4:	003c0b06 	br	e54124 <___vfprintf_internal_r+0x1fc>
  e550f8:	0007883a 	mov	r3,zero
  e550fc:	01000244 	movi	r4,9
  e55100:	188002a4 	muli	r2,r3,10
  e55104:	b8c00007 	ldb	r3,0(r23)
  e55108:	d9814d17 	ldw	r6,1332(sp)
  e5510c:	bdc00044 	addi	r23,r23,1
  e55110:	d8c14d15 	stw	r3,1332(sp)
  e55114:	d9414d17 	ldw	r5,1332(sp)
  e55118:	3085883a 	add	r2,r6,r2
  e5511c:	10fff404 	addi	r3,r2,-48
  e55120:	28bff404 	addi	r2,r5,-48
  e55124:	20bff62e 	bgeu	r4,r2,e55100 <___vfprintf_internal_r+0x11d8>
  e55128:	d8c14a15 	stw	r3,1320(sp)
  e5512c:	003bff06 	br	e5412c <___vfprintf_internal_r+0x204>
  e55130:	d9414c17 	ldw	r5,1328(sp)
  e55134:	b8c00007 	ldb	r3,0(r23)
  e55138:	29402014 	ori	r5,r5,128
  e5513c:	d9414c15 	stw	r5,1328(sp)
  e55140:	003bf806 	br	e54124 <___vfprintf_internal_r+0x1fc>
  e55144:	b8c00007 	ldb	r3,0(r23)
  e55148:	00800a84 	movi	r2,42
  e5514c:	bdc00044 	addi	r23,r23,1
  e55150:	18831526 	beq	r3,r2,e55da8 <___vfprintf_internal_r+0x1e80>
  e55154:	d8c14d15 	stw	r3,1332(sp)
  e55158:	18bff404 	addi	r2,r3,-48
  e5515c:	00c00244 	movi	r3,9
  e55160:	18827836 	bltu	r3,r2,e55b44 <___vfprintf_internal_r+0x1c1c>
  e55164:	000d883a 	mov	r6,zero
  e55168:	308002a4 	muli	r2,r6,10
  e5516c:	b9800007 	ldb	r6,0(r23)
  e55170:	d9414d17 	ldw	r5,1332(sp)
  e55174:	bdc00044 	addi	r23,r23,1
  e55178:	d9814d15 	stw	r6,1332(sp)
  e5517c:	d9014d17 	ldw	r4,1332(sp)
  e55180:	1145883a 	add	r2,r2,r5
  e55184:	11bff404 	addi	r6,r2,-48
  e55188:	20bff404 	addi	r2,r4,-48
  e5518c:	18bff62e 	bgeu	r3,r2,e55168 <___vfprintf_internal_r+0x1240>
  e55190:	3027883a 	mov	r19,r6
  e55194:	303be50e 	bge	r6,zero,e5412c <___vfprintf_internal_r+0x204>
  e55198:	04ffffc4 	movi	r19,-1
  e5519c:	003be306 	br	e5412c <___vfprintf_internal_r+0x204>
  e551a0:	d8000405 	stb	zero,16(sp)
  e551a4:	39800017 	ldw	r6,0(r7)
  e551a8:	39c00104 	addi	r7,r7,4
  e551ac:	d9c14015 	stw	r7,1280(sp)
  e551b0:	d9814115 	stw	r6,1284(sp)
  e551b4:	3001c926 	beq	r6,zero,e558dc <___vfprintf_internal_r+0x19b4>
  e551b8:	98000e16 	blt	r19,zero,e551f4 <___vfprintf_internal_r+0x12cc>
  e551bc:	d9014117 	ldw	r4,1284(sp)
  e551c0:	000b883a 	mov	r5,zero
  e551c4:	980d883a 	mov	r6,r19
  e551c8:	0e58fe40 	call	e58fe4 <memchr>
  e551cc:	10025926 	beq	r2,zero,e55b34 <___vfprintf_internal_r+0x1c0c>
  e551d0:	d8c14117 	ldw	r3,1284(sp)
  e551d4:	10cfc83a 	sub	r7,r2,r3
  e551d8:	99c19e16 	blt	r19,r7,e55854 <___vfprintf_internal_r+0x192c>
  e551dc:	d9c14515 	stw	r7,1300(sp)
  e551e0:	38000916 	blt	r7,zero,e55208 <___vfprintf_internal_r+0x12e0>
  e551e4:	d8014615 	stw	zero,1304(sp)
  e551e8:	003df106 	br	e549b0 <___vfprintf_internal_r+0xa88>
  e551ec:	b8c00007 	ldb	r3,0(r23)
  e551f0:	003bcc06 	br	e54124 <___vfprintf_internal_r+0x1fc>
  e551f4:	d9014117 	ldw	r4,1284(sp)
  e551f8:	0e53e5c0 	call	e53e5c <strlen>
  e551fc:	d8814515 	stw	r2,1300(sp)
  e55200:	100f883a 	mov	r7,r2
  e55204:	103ff70e 	bge	r2,zero,e551e4 <___vfprintf_internal_r+0x12bc>
  e55208:	d8014515 	stw	zero,1300(sp)
  e5520c:	d8014615 	stw	zero,1304(sp)
  e55210:	003de706 	br	e549b0 <___vfprintf_internal_r+0xa88>
  e55214:	20c03fcc 	andi	r3,r4,255
  e55218:	00800044 	movi	r2,1
  e5521c:	18802d26 	beq	r3,r2,e552d4 <___vfprintf_internal_r+0x13ac>
  e55220:	18800e36 	bltu	r3,r2,e5525c <___vfprintf_internal_r+0x1334>
  e55224:	00800084 	movi	r2,2
  e55228:	1880fa26 	beq	r3,r2,e55614 <___vfprintf_internal_r+0x16ec>
  e5522c:	010039b4 	movhi	r4,230
  e55230:	2104f904 	addi	r4,r4,5092
  e55234:	0e53e5c0 	call	e53e5c <strlen>
  e55238:	100f883a 	mov	r7,r2
  e5523c:	dcc14515 	stw	r19,1300(sp)
  e55240:	9880010e 	bge	r19,r2,e55248 <___vfprintf_internal_r+0x1320>
  e55244:	d8814515 	stw	r2,1300(sp)
  e55248:	008039b4 	movhi	r2,230
  e5524c:	1084f904 	addi	r2,r2,5092
  e55250:	dcc14615 	stw	r19,1304(sp)
  e55254:	d8814115 	stw	r2,1284(sp)
  e55258:	003dd506 	br	e549b0 <___vfprintf_internal_r+0xa88>
  e5525c:	d9401904 	addi	r5,sp,100
  e55260:	dd000f04 	addi	r20,sp,60
  e55264:	d9414115 	stw	r5,1284(sp)
  e55268:	880a977a 	slli	r5,r17,29
  e5526c:	d9814117 	ldw	r6,1284(sp)
  e55270:	8004d0fa 	srli	r2,r16,3
  e55274:	8806d0fa 	srli	r3,r17,3
  e55278:	810001cc 	andi	r4,r16,7
  e5527c:	2884b03a 	or	r2,r5,r2
  e55280:	31bfffc4 	addi	r6,r6,-1
  e55284:	21000c04 	addi	r4,r4,48
  e55288:	d9814115 	stw	r6,1284(sp)
  e5528c:	10cab03a 	or	r5,r2,r3
  e55290:	31000005 	stb	r4,0(r6)
  e55294:	1021883a 	mov	r16,r2
  e55298:	1823883a 	mov	r17,r3
  e5529c:	283ff21e 	bne	r5,zero,e55268 <___vfprintf_internal_r+0x1340>
  e552a0:	d8c14c17 	ldw	r3,1328(sp)
  e552a4:	1880004c 	andi	r2,r3,1
  e552a8:	1005003a 	cmpeq	r2,r2,zero
  e552ac:	103db91e 	bne	r2,zero,e54994 <___vfprintf_internal_r+0xa6c>
  e552b0:	20803fcc 	andi	r2,r4,255
  e552b4:	1080201c 	xori	r2,r2,128
  e552b8:	10bfe004 	addi	r2,r2,-128
  e552bc:	00c00c04 	movi	r3,48
  e552c0:	10fdb426 	beq	r2,r3,e54994 <___vfprintf_internal_r+0xa6c>
  e552c4:	31bfffc4 	addi	r6,r6,-1
  e552c8:	d9814115 	stw	r6,1284(sp)
  e552cc:	30c00005 	stb	r3,0(r6)
  e552d0:	003db006 	br	e54994 <___vfprintf_internal_r+0xa6c>
  e552d4:	88800068 	cmpgeui	r2,r17,1
  e552d8:	10002c1e 	bne	r2,zero,e5538c <___vfprintf_internal_r+0x1464>
  e552dc:	8800021e 	bne	r17,zero,e552e8 <___vfprintf_internal_r+0x13c0>
  e552e0:	00800244 	movi	r2,9
  e552e4:	14002936 	bltu	r2,r16,e5538c <___vfprintf_internal_r+0x1464>
  e552e8:	d90018c4 	addi	r4,sp,99
  e552ec:	dd000f04 	addi	r20,sp,60
  e552f0:	d9014115 	stw	r4,1284(sp)
  e552f4:	d9014117 	ldw	r4,1284(sp)
  e552f8:	80800c04 	addi	r2,r16,48
  e552fc:	20800005 	stb	r2,0(r4)
  e55300:	003da406 	br	e54994 <___vfprintf_internal_r+0xa6c>
  e55304:	dc400d17 	ldw	r17,52(sp)
  e55308:	070039b4 	movhi	fp,230
  e5530c:	e704ff84 	addi	fp,fp,5118
  e55310:	9425883a 	add	r18,r18,r16
  e55314:	8c400044 	addi	r17,r17,1
  e55318:	008001c4 	movi	r2,7
  e5531c:	1f000015 	stw	fp,0(r3)
  e55320:	1c000115 	stw	r16,4(r3)
  e55324:	dc800e15 	stw	r18,56(sp)
  e55328:	dc400d15 	stw	r17,52(sp)
  e5532c:	147de216 	blt	r2,r17,e54ab8 <___vfprintf_internal_r+0xb90>
  e55330:	18c00204 	addi	r3,r3,8
  e55334:	003c7a06 	br	e54520 <___vfprintf_internal_r+0x5f8>
  e55338:	01000084 	movi	r4,2
  e5533c:	d8000405 	stb	zero,16(sp)
  e55340:	003d8706 	br	e54960 <___vfprintf_internal_r+0xa38>
  e55344:	d9814c17 	ldw	r6,1328(sp)
  e55348:	30c4703a 	and	r2,r6,r3
  e5534c:	1005003a 	cmpeq	r2,r2,zero
  e55350:	103cb926 	beq	r2,zero,e54638 <___vfprintf_internal_r+0x710>
  e55354:	d9014117 	ldw	r4,1284(sp)
  e55358:	94800044 	addi	r18,r18,1
  e5535c:	8c400044 	addi	r17,r17,1
  e55360:	008001c4 	movi	r2,7
  e55364:	a9000015 	stw	r4,0(r21)
  e55368:	a8c00115 	stw	r3,4(r21)
  e5536c:	dc800e15 	stw	r18,56(sp)
  e55370:	dc400d15 	stw	r17,52(sp)
  e55374:	147e6616 	blt	r2,r17,e54d10 <___vfprintf_internal_r+0xde8>
  e55378:	acc00204 	addi	r19,r21,8
  e5537c:	003cd706 	br	e546dc <___vfprintf_internal_r+0x7b4>
  e55380:	070039b4 	movhi	fp,230
  e55384:	e704ff84 	addi	fp,fp,5118
  e55388:	003c4f06 	br	e544c8 <___vfprintf_internal_r+0x5a0>
  e5538c:	dd000f04 	addi	r20,sp,60
  e55390:	dc801904 	addi	r18,sp,100
  e55394:	8009883a 	mov	r4,r16
  e55398:	880b883a 	mov	r5,r17
  e5539c:	01800284 	movi	r6,10
  e553a0:	000f883a 	mov	r7,zero
  e553a4:	0e5b6200 	call	e5b620 <__umoddi3>
  e553a8:	12000c04 	addi	r8,r2,48
  e553ac:	94bfffc4 	addi	r18,r18,-1
  e553b0:	8009883a 	mov	r4,r16
  e553b4:	880b883a 	mov	r5,r17
  e553b8:	01800284 	movi	r6,10
  e553bc:	000f883a 	mov	r7,zero
  e553c0:	92000005 	stb	r8,0(r18)
  e553c4:	0e5b0440 	call	e5b044 <__udivdi3>
  e553c8:	1009883a 	mov	r4,r2
  e553cc:	1021883a 	mov	r16,r2
  e553d0:	18800068 	cmpgeui	r2,r3,1
  e553d4:	1823883a 	mov	r17,r3
  e553d8:	103fee1e 	bne	r2,zero,e55394 <___vfprintf_internal_r+0x146c>
  e553dc:	1800021e 	bne	r3,zero,e553e8 <___vfprintf_internal_r+0x14c0>
  e553e0:	00800244 	movi	r2,9
  e553e4:	113feb36 	bltu	r2,r4,e55394 <___vfprintf_internal_r+0x146c>
  e553e8:	94bfffc4 	addi	r18,r18,-1
  e553ec:	dc814115 	stw	r18,1284(sp)
  e553f0:	003fc006 	br	e552f4 <___vfprintf_internal_r+0x13cc>
  e553f4:	d9014c17 	ldw	r4,1328(sp)
  e553f8:	2080004c 	andi	r2,r4,1
  e553fc:	10009a1e 	bne	r2,zero,e55668 <___vfprintf_internal_r+0x1740>
  e55400:	d9401904 	addi	r5,sp,100
  e55404:	dd000f04 	addi	r20,sp,60
  e55408:	d9414115 	stw	r5,1284(sp)
  e5540c:	003d6106 	br	e54994 <___vfprintf_internal_r+0xa6c>
  e55410:	d9014f17 	ldw	r4,1340(sp)
  e55414:	b00b883a 	mov	r5,r22
  e55418:	d9800c04 	addi	r6,sp,48
  e5541c:	0e53ed00 	call	e53ed0 <__sprint_r>
  e55420:	103c791e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e55424:	dc800e17 	ldw	r18,56(sp)
  e55428:	d8c01904 	addi	r3,sp,100
  e5542c:	003cff06 	br	e5482c <___vfprintf_internal_r+0x904>
  e55430:	d8c14c17 	ldw	r3,1328(sp)
  e55434:	1880040c 	andi	r2,r3,16
  e55438:	1000711e 	bne	r2,zero,e55600 <___vfprintf_internal_r+0x16d8>
  e5543c:	d9014c17 	ldw	r4,1328(sp)
  e55440:	2080100c 	andi	r2,r4,64
  e55444:	10006e26 	beq	r2,zero,e55600 <___vfprintf_internal_r+0x16d8>
  e55448:	3c00000b 	ldhu	r16,0(r7)
  e5544c:	0023883a 	mov	r17,zero
  e55450:	39c00104 	addi	r7,r7,4
  e55454:	d9c14015 	stw	r7,1280(sp)
  e55458:	003f0006 	br	e5505c <___vfprintf_internal_r+0x1134>
  e5545c:	dc400d17 	ldw	r17,52(sp)
  e55460:	070039b4 	movhi	fp,230
  e55464:	e704ff84 	addi	fp,fp,5118
  e55468:	9425883a 	add	r18,r18,r16
  e5546c:	8c400044 	addi	r17,r17,1
  e55470:	008001c4 	movi	r2,7
  e55474:	1f000015 	stw	fp,0(r3)
  e55478:	1c000115 	stw	r16,4(r3)
  e5547c:	dc800e15 	stw	r18,56(sp)
  e55480:	dc400d15 	stw	r17,52(sp)
  e55484:	147d7616 	blt	r2,r17,e54a60 <___vfprintf_internal_r+0xb38>
  e55488:	18c00204 	addi	r3,r3,8
  e5548c:	003d7b06 	br	e54a7c <___vfprintf_internal_r+0xb54>
  e55490:	dc800e17 	ldw	r18,56(sp)
  e55494:	dc400d17 	ldw	r17,52(sp)
  e55498:	070039b4 	movhi	fp,230
  e5549c:	e7050384 	addi	fp,fp,5134
  e554a0:	003bc006 	br	e543a4 <___vfprintf_internal_r+0x47c>
  e554a4:	d9014f17 	ldw	r4,1340(sp)
  e554a8:	b00b883a 	mov	r5,r22
  e554ac:	d9800c04 	addi	r6,sp,48
  e554b0:	0e53ed00 	call	e53ed0 <__sprint_r>
  e554b4:	103c541e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e554b8:	dc800e17 	ldw	r18,56(sp)
  e554bc:	d8c01904 	addi	r3,sp,100
  e554c0:	003ce906 	br	e54868 <___vfprintf_internal_r+0x940>
  e554c4:	3c000017 	ldw	r16,0(r7)
  e554c8:	0009883a 	mov	r4,zero
  e554cc:	39c00104 	addi	r7,r7,4
  e554d0:	0023883a 	mov	r17,zero
  e554d4:	d9c14015 	stw	r7,1280(sp)
  e554d8:	d8000405 	stb	zero,16(sp)
  e554dc:	003d2006 	br	e54960 <___vfprintf_internal_r+0xa38>
  e554e0:	38800017 	ldw	r2,0(r7)
  e554e4:	39c00104 	addi	r7,r7,4
  e554e8:	d9c14015 	stw	r7,1280(sp)
  e554ec:	1023d7fa 	srai	r17,r2,31
  e554f0:	1021883a 	mov	r16,r2
  e554f4:	003d1806 	br	e54958 <___vfprintf_internal_r+0xa30>
  e554f8:	3c000017 	ldw	r16,0(r7)
  e554fc:	01000044 	movi	r4,1
  e55500:	39c00104 	addi	r7,r7,4
  e55504:	0023883a 	mov	r17,zero
  e55508:	d9c14015 	stw	r7,1280(sp)
  e5550c:	d8000405 	stb	zero,16(sp)
  e55510:	003d1306 	br	e54960 <___vfprintf_internal_r+0xa38>
  e55514:	008039b4 	movhi	r2,230
  e55518:	10848704 	addi	r2,r2,4636
  e5551c:	94800044 	addi	r18,r18,1
  e55520:	8c400044 	addi	r17,r17,1
  e55524:	a8800015 	stw	r2,0(r21)
  e55528:	00c00044 	movi	r3,1
  e5552c:	008001c4 	movi	r2,7
  e55530:	a8c00115 	stw	r3,4(r21)
  e55534:	dc800e15 	stw	r18,56(sp)
  e55538:	dc400d15 	stw	r17,52(sp)
  e5553c:	1440ca16 	blt	r2,r17,e55868 <___vfprintf_internal_r+0x1940>
  e55540:	a8c00204 	addi	r3,r21,8
  e55544:	2000061e 	bne	r4,zero,e55560 <___vfprintf_internal_r+0x1638>
  e55548:	d9414717 	ldw	r5,1308(sp)
  e5554c:	2800041e 	bne	r5,zero,e55560 <___vfprintf_internal_r+0x1638>
  e55550:	d9814c17 	ldw	r6,1328(sp)
  e55554:	3080004c 	andi	r2,r6,1
  e55558:	1005003a 	cmpeq	r2,r2,zero
  e5555c:	103bf01e 	bne	r2,zero,e54520 <___vfprintf_internal_r+0x5f8>
  e55560:	00800044 	movi	r2,1
  e55564:	dc400d17 	ldw	r17,52(sp)
  e55568:	18800115 	stw	r2,4(r3)
  e5556c:	d8814917 	ldw	r2,1316(sp)
  e55570:	94800044 	addi	r18,r18,1
  e55574:	8c400044 	addi	r17,r17,1
  e55578:	18800015 	stw	r2,0(r3)
  e5557c:	008001c4 	movi	r2,7
  e55580:	dc800e15 	stw	r18,56(sp)
  e55584:	dc400d15 	stw	r17,52(sp)
  e55588:	1440ca16 	blt	r2,r17,e558b4 <___vfprintf_internal_r+0x198c>
  e5558c:	18c00204 	addi	r3,r3,8
  e55590:	0121c83a 	sub	r16,zero,r4
  e55594:	0400500e 	bge	zero,r16,e556d8 <___vfprintf_internal_r+0x17b0>
  e55598:	00800404 	movi	r2,16
  e5559c:	1400800e 	bge	r2,r16,e557a0 <___vfprintf_internal_r+0x1878>
  e555a0:	1027883a 	mov	r19,r2
  e555a4:	070039b4 	movhi	fp,230
  e555a8:	e704ff84 	addi	fp,fp,5118
  e555ac:	050001c4 	movi	r20,7
  e555b0:	00000306 	br	e555c0 <___vfprintf_internal_r+0x1698>
  e555b4:	18c00204 	addi	r3,r3,8
  e555b8:	843ffc04 	addi	r16,r16,-16
  e555bc:	9c007a0e 	bge	r19,r16,e557a8 <___vfprintf_internal_r+0x1880>
  e555c0:	94800404 	addi	r18,r18,16
  e555c4:	8c400044 	addi	r17,r17,1
  e555c8:	1f000015 	stw	fp,0(r3)
  e555cc:	1cc00115 	stw	r19,4(r3)
  e555d0:	dc800e15 	stw	r18,56(sp)
  e555d4:	dc400d15 	stw	r17,52(sp)
  e555d8:	a47ff60e 	bge	r20,r17,e555b4 <___vfprintf_internal_r+0x168c>
  e555dc:	d9014f17 	ldw	r4,1340(sp)
  e555e0:	b00b883a 	mov	r5,r22
  e555e4:	d9800c04 	addi	r6,sp,48
  e555e8:	0e53ed00 	call	e53ed0 <__sprint_r>
  e555ec:	103c061e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e555f0:	dc800e17 	ldw	r18,56(sp)
  e555f4:	dc400d17 	ldw	r17,52(sp)
  e555f8:	d8c01904 	addi	r3,sp,100
  e555fc:	003fee06 	br	e555b8 <___vfprintf_internal_r+0x1690>
  e55600:	3c000017 	ldw	r16,0(r7)
  e55604:	0023883a 	mov	r17,zero
  e55608:	39c00104 	addi	r7,r7,4
  e5560c:	d9c14015 	stw	r7,1280(sp)
  e55610:	003e9206 	br	e5505c <___vfprintf_internal_r+0x1134>
  e55614:	d9401904 	addi	r5,sp,100
  e55618:	dd000f04 	addi	r20,sp,60
  e5561c:	d9414115 	stw	r5,1284(sp)
  e55620:	d9814417 	ldw	r6,1296(sp)
  e55624:	880a973a 	slli	r5,r17,28
  e55628:	8004d13a 	srli	r2,r16,4
  e5562c:	810003cc 	andi	r4,r16,15
  e55630:	3109883a 	add	r4,r6,r4
  e55634:	2884b03a 	or	r2,r5,r2
  e55638:	21400003 	ldbu	r5,0(r4)
  e5563c:	d9014117 	ldw	r4,1284(sp)
  e55640:	8806d13a 	srli	r3,r17,4
  e55644:	1021883a 	mov	r16,r2
  e55648:	213fffc4 	addi	r4,r4,-1
  e5564c:	d9014115 	stw	r4,1284(sp)
  e55650:	d9814117 	ldw	r6,1284(sp)
  e55654:	10c8b03a 	or	r4,r2,r3
  e55658:	1823883a 	mov	r17,r3
  e5565c:	31400005 	stb	r5,0(r6)
  e55660:	203fef1e 	bne	r4,zero,e55620 <___vfprintf_internal_r+0x16f8>
  e55664:	003ccb06 	br	e54994 <___vfprintf_internal_r+0xa6c>
  e55668:	00800c04 	movi	r2,48
  e5566c:	d98018c4 	addi	r6,sp,99
  e55670:	dd000f04 	addi	r20,sp,60
  e55674:	d88018c5 	stb	r2,99(sp)
  e55678:	d9814115 	stw	r6,1284(sp)
  e5567c:	003cc506 	br	e54994 <___vfprintf_internal_r+0xa6c>
  e55680:	dc400d17 	ldw	r17,52(sp)
  e55684:	070039b4 	movhi	fp,230
  e55688:	e7050384 	addi	fp,fp,5134
  e5568c:	003bc706 	br	e545ac <___vfprintf_internal_r+0x684>
  e55690:	d9414c17 	ldw	r5,1328(sp)
  e55694:	2880040c 	andi	r2,r5,16
  e55698:	10007c26 	beq	r2,zero,e5588c <___vfprintf_internal_r+0x1964>
  e5569c:	38800017 	ldw	r2,0(r7)
  e556a0:	39c00104 	addi	r7,r7,4
  e556a4:	d9c14015 	stw	r7,1280(sp)
  e556a8:	d9814b17 	ldw	r6,1324(sp)
  e556ac:	d9c14017 	ldw	r7,1280(sp)
  e556b0:	11800015 	stw	r6,0(r2)
  e556b4:	003a7806 	br	e54098 <___vfprintf_internal_r+0x170>
  e556b8:	d9014f17 	ldw	r4,1340(sp)
  e556bc:	b00b883a 	mov	r5,r22
  e556c0:	d9800c04 	addi	r6,sp,48
  e556c4:	0e53ed00 	call	e53ed0 <__sprint_r>
  e556c8:	103bcf1e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e556cc:	dc800e17 	ldw	r18,56(sp)
  e556d0:	dc400d17 	ldw	r17,52(sp)
  e556d4:	d8c01904 	addi	r3,sp,100
  e556d8:	d9014717 	ldw	r4,1308(sp)
  e556dc:	d9414117 	ldw	r5,1284(sp)
  e556e0:	8c400044 	addi	r17,r17,1
  e556e4:	9125883a 	add	r18,r18,r4
  e556e8:	008001c4 	movi	r2,7
  e556ec:	19400015 	stw	r5,0(r3)
  e556f0:	19000115 	stw	r4,4(r3)
  e556f4:	dc800e15 	stw	r18,56(sp)
  e556f8:	dc400d15 	stw	r17,52(sp)
  e556fc:	147cee16 	blt	r2,r17,e54ab8 <___vfprintf_internal_r+0xb90>
  e55700:	18c00204 	addi	r3,r3,8
  e55704:	003b8606 	br	e54520 <___vfprintf_internal_r+0x5f8>
  e55708:	38c00017 	ldw	r3,0(r7)
  e5570c:	39000204 	addi	r4,r7,8
  e55710:	d9014015 	stw	r4,1280(sp)
  e55714:	d8c14215 	stw	r3,1288(sp)
  e55718:	39c00117 	ldw	r7,4(r7)
  e5571c:	d9c14315 	stw	r7,1292(sp)
  e55720:	003e2006 	br	e54fa4 <___vfprintf_internal_r+0x107c>
  e55724:	0005883a 	mov	r2,zero
  e55728:	1409c83a 	sub	r4,r2,r16
  e5572c:	1105803a 	cmpltu	r2,r2,r4
  e55730:	044bc83a 	sub	r5,zero,r17
  e55734:	2885c83a 	sub	r2,r5,r2
  e55738:	2021883a 	mov	r16,r4
  e5573c:	1023883a 	mov	r17,r2
  e55740:	01000044 	movi	r4,1
  e55744:	00800b44 	movi	r2,45
  e55748:	d8800405 	stb	r2,16(sp)
  e5574c:	003c8406 	br	e54960 <___vfprintf_internal_r+0xa38>
  e55750:	d9014f17 	ldw	r4,1340(sp)
  e55754:	b00b883a 	mov	r5,r22
  e55758:	d9800c04 	addi	r6,sp,48
  e5575c:	0e53ed00 	call	e53ed0 <__sprint_r>
  e55760:	103ba91e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e55764:	dc800e17 	ldw	r18,56(sp)
  e55768:	dc400d17 	ldw	r17,52(sp)
  e5576c:	d9000517 	ldw	r4,20(sp)
  e55770:	d9401904 	addi	r5,sp,100
  e55774:	003da706 	br	e54e14 <___vfprintf_internal_r+0xeec>
  e55778:	d9014f17 	ldw	r4,1340(sp)
  e5577c:	b00b883a 	mov	r5,r22
  e55780:	d9800c04 	addi	r6,sp,48
  e55784:	0e53ed00 	call	e53ed0 <__sprint_r>
  e55788:	103b9f1e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e5578c:	dc800e17 	ldw	r18,56(sp)
  e55790:	dc400d17 	ldw	r17,52(sp)
  e55794:	d9000517 	ldw	r4,20(sp)
  e55798:	d8c01904 	addi	r3,sp,100
  e5579c:	003d9106 	br	e54de4 <___vfprintf_internal_r+0xebc>
  e557a0:	070039b4 	movhi	fp,230
  e557a4:	e704ff84 	addi	fp,fp,5118
  e557a8:	9425883a 	add	r18,r18,r16
  e557ac:	8c400044 	addi	r17,r17,1
  e557b0:	008001c4 	movi	r2,7
  e557b4:	1f000015 	stw	fp,0(r3)
  e557b8:	1c000115 	stw	r16,4(r3)
  e557bc:	dc800e15 	stw	r18,56(sp)
  e557c0:	dc400d15 	stw	r17,52(sp)
  e557c4:	147fbc16 	blt	r2,r17,e556b8 <___vfprintf_internal_r+0x1790>
  e557c8:	18c00204 	addi	r3,r3,8
  e557cc:	003fc206 	br	e556d8 <___vfprintf_internal_r+0x17b0>
  e557d0:	d9014f17 	ldw	r4,1340(sp)
  e557d4:	b00b883a 	mov	r5,r22
  e557d8:	d9800c04 	addi	r6,sp,48
  e557dc:	0e53ed00 	call	e53ed0 <__sprint_r>
  e557e0:	103b891e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e557e4:	dc800e17 	ldw	r18,56(sp)
  e557e8:	d9000517 	ldw	r4,20(sp)
  e557ec:	d8c01904 	addi	r3,sp,100
  e557f0:	003d0206 	br	e54bfc <___vfprintf_internal_r+0xcd4>
  e557f4:	070039b4 	movhi	fp,230
  e557f8:	e704ff84 	addi	fp,fp,5118
  e557fc:	003be406 	br	e54790 <___vfprintf_internal_r+0x868>
  e55800:	008039b4 	movhi	r2,230
  e55804:	1084ef04 	addi	r2,r2,5052
  e55808:	d8814115 	stw	r2,1284(sp)
  e5580c:	003df506 	br	e54fe4 <___vfprintf_internal_r+0x10bc>
  e55810:	d9014217 	ldw	r4,1288(sp)
  e55814:	d9414317 	ldw	r5,1292(sp)
  e55818:	0e5a9080 	call	e5a908 <__isnand>
  e5581c:	10003926 	beq	r2,zero,e55904 <___vfprintf_internal_r+0x19dc>
  e55820:	d9414d17 	ldw	r5,1332(sp)
  e55824:	008011c4 	movi	r2,71
  e55828:	1140ce16 	blt	r2,r5,e55b64 <___vfprintf_internal_r+0x1c3c>
  e5582c:	018039b4 	movhi	r6,230
  e55830:	3184f004 	addi	r6,r6,5056
  e55834:	d9814115 	stw	r6,1284(sp)
  e55838:	003dea06 	br	e54fe4 <___vfprintf_internal_r+0x10bc>
  e5583c:	d9014c17 	ldw	r4,1328(sp)
  e55840:	bdc00044 	addi	r23,r23,1
  e55844:	b8c00007 	ldb	r3,0(r23)
  e55848:	21000814 	ori	r4,r4,32
  e5584c:	d9014c15 	stw	r4,1328(sp)
  e55850:	003a3406 	br	e54124 <___vfprintf_internal_r+0x1fc>
  e55854:	dcc14515 	stw	r19,1300(sp)
  e55858:	98011016 	blt	r19,zero,e55c9c <___vfprintf_internal_r+0x1d74>
  e5585c:	980f883a 	mov	r7,r19
  e55860:	d8014615 	stw	zero,1304(sp)
  e55864:	003c5206 	br	e549b0 <___vfprintf_internal_r+0xa88>
  e55868:	d9014f17 	ldw	r4,1340(sp)
  e5586c:	b00b883a 	mov	r5,r22
  e55870:	d9800c04 	addi	r6,sp,48
  e55874:	0e53ed00 	call	e53ed0 <__sprint_r>
  e55878:	103b631e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e5587c:	dc800e17 	ldw	r18,56(sp)
  e55880:	d9000517 	ldw	r4,20(sp)
  e55884:	d8c01904 	addi	r3,sp,100
  e55888:	003f2e06 	br	e55544 <___vfprintf_internal_r+0x161c>
  e5588c:	d8c14c17 	ldw	r3,1328(sp)
  e55890:	1880100c 	andi	r2,r3,64
  e55894:	1000a026 	beq	r2,zero,e55b18 <___vfprintf_internal_r+0x1bf0>
  e55898:	38800017 	ldw	r2,0(r7)
  e5589c:	39c00104 	addi	r7,r7,4
  e558a0:	d9c14015 	stw	r7,1280(sp)
  e558a4:	d9014b17 	ldw	r4,1324(sp)
  e558a8:	d9c14017 	ldw	r7,1280(sp)
  e558ac:	1100000d 	sth	r4,0(r2)
  e558b0:	0039f906 	br	e54098 <___vfprintf_internal_r+0x170>
  e558b4:	d9014f17 	ldw	r4,1340(sp)
  e558b8:	b00b883a 	mov	r5,r22
  e558bc:	d9800c04 	addi	r6,sp,48
  e558c0:	0e53ed00 	call	e53ed0 <__sprint_r>
  e558c4:	103b501e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e558c8:	dc800e17 	ldw	r18,56(sp)
  e558cc:	dc400d17 	ldw	r17,52(sp)
  e558d0:	d9000517 	ldw	r4,20(sp)
  e558d4:	d8c01904 	addi	r3,sp,100
  e558d8:	003f2d06 	br	e55590 <___vfprintf_internal_r+0x1668>
  e558dc:	00800184 	movi	r2,6
  e558e0:	14c09a36 	bltu	r2,r19,e55b4c <___vfprintf_internal_r+0x1c24>
  e558e4:	dcc14515 	stw	r19,1300(sp)
  e558e8:	9800010e 	bge	r19,zero,e558f0 <___vfprintf_internal_r+0x19c8>
  e558ec:	d8014515 	stw	zero,1300(sp)
  e558f0:	008039b4 	movhi	r2,230
  e558f4:	1084f204 	addi	r2,r2,5064
  e558f8:	980f883a 	mov	r7,r19
  e558fc:	d8814115 	stw	r2,1284(sp)
  e55900:	003a7806 	br	e542e4 <___vfprintf_internal_r+0x3bc>
  e55904:	00bfffc4 	movi	r2,-1
  e55908:	9880e226 	beq	r19,r2,e55c94 <___vfprintf_internal_r+0x1d6c>
  e5590c:	d9414d17 	ldw	r5,1332(sp)
  e55910:	008019c4 	movi	r2,103
  e55914:	2880dc26 	beq	r5,r2,e55c88 <___vfprintf_internal_r+0x1d60>
  e55918:	008011c4 	movi	r2,71
  e5591c:	2880da26 	beq	r5,r2,e55c88 <___vfprintf_internal_r+0x1d60>
  e55920:	d9414c17 	ldw	r5,1328(sp)
  e55924:	d9014317 	ldw	r4,1292(sp)
  e55928:	d9814217 	ldw	r6,1288(sp)
  e5592c:	29404014 	ori	r5,r5,256
  e55930:	d9414c15 	stw	r5,1328(sp)
  e55934:	2000cc16 	blt	r4,zero,e55c68 <___vfprintf_internal_r+0x1d40>
  e55938:	3021883a 	mov	r16,r6
  e5593c:	2023883a 	mov	r17,r4
  e55940:	0039883a 	mov	fp,zero
  e55944:	d9414d17 	ldw	r5,1332(sp)
  e55948:	00801984 	movi	r2,102
  e5594c:	2880b726 	beq	r5,r2,e55c2c <___vfprintf_internal_r+0x1d04>
  e55950:	00801184 	movi	r2,70
  e55954:	2880b526 	beq	r5,r2,e55c2c <___vfprintf_internal_r+0x1d04>
  e55958:	00801944 	movi	r2,101
  e5595c:	2880c826 	beq	r5,r2,e55c80 <___vfprintf_internal_r+0x1d58>
  e55960:	00801144 	movi	r2,69
  e55964:	2880c626 	beq	r5,r2,e55c80 <___vfprintf_internal_r+0x1d58>
  e55968:	9829883a 	mov	r20,r19
  e5596c:	d9014f17 	ldw	r4,1340(sp)
  e55970:	d8800504 	addi	r2,sp,20
  e55974:	880d883a 	mov	r6,r17
  e55978:	d8800115 	stw	r2,4(sp)
  e5597c:	d8c00604 	addi	r3,sp,24
  e55980:	d8800704 	addi	r2,sp,28
  e55984:	800b883a 	mov	r5,r16
  e55988:	01c00084 	movi	r7,2
  e5598c:	d8c00215 	stw	r3,8(sp)
  e55990:	d8800315 	stw	r2,12(sp)
  e55994:	dd000015 	stw	r20,0(sp)
  e55998:	0e5614c0 	call	e5614c <_dtoa_r>
  e5599c:	d9814d17 	ldw	r6,1332(sp)
  e559a0:	d8814115 	stw	r2,1284(sp)
  e559a4:	008019c4 	movi	r2,103
  e559a8:	30809526 	beq	r6,r2,e55c00 <___vfprintf_internal_r+0x1cd8>
  e559ac:	d8c14d17 	ldw	r3,1332(sp)
  e559b0:	008011c4 	movi	r2,71
  e559b4:	18809226 	beq	r3,r2,e55c00 <___vfprintf_internal_r+0x1cd8>
  e559b8:	d9414117 	ldw	r5,1284(sp)
  e559bc:	d9814d17 	ldw	r6,1332(sp)
  e559c0:	00801984 	movi	r2,102
  e559c4:	2d25883a 	add	r18,r5,r20
  e559c8:	30808626 	beq	r6,r2,e55be4 <___vfprintf_internal_r+0x1cbc>
  e559cc:	00801184 	movi	r2,70
  e559d0:	30808426 	beq	r6,r2,e55be4 <___vfprintf_internal_r+0x1cbc>
  e559d4:	000d883a 	mov	r6,zero
  e559d8:	000f883a 	mov	r7,zero
  e559dc:	880b883a 	mov	r5,r17
  e559e0:	8009883a 	mov	r4,r16
  e559e4:	0e5bf940 	call	e5bf94 <__eqdf2>
  e559e8:	1000751e 	bne	r2,zero,e55bc0 <___vfprintf_internal_r+0x1c98>
  e559ec:	9005883a 	mov	r2,r18
  e559f0:	dc800715 	stw	r18,28(sp)
  e559f4:	d9014117 	ldw	r4,1284(sp)
  e559f8:	d9414d17 	ldw	r5,1332(sp)
  e559fc:	00c019c4 	movi	r3,103
  e55a00:	1125c83a 	sub	r18,r2,r4
  e55a04:	28c06826 	beq	r5,r3,e55ba8 <___vfprintf_internal_r+0x1c80>
  e55a08:	008011c4 	movi	r2,71
  e55a0c:	28806626 	beq	r5,r2,e55ba8 <___vfprintf_internal_r+0x1c80>
  e55a10:	d9000517 	ldw	r4,20(sp)
  e55a14:	d8c14d17 	ldw	r3,1332(sp)
  e55a18:	00801944 	movi	r2,101
  e55a1c:	10c05516 	blt	r2,r3,e55b74 <___vfprintf_internal_r+0x1c4c>
  e55a20:	213fffc4 	addi	r4,r4,-1
  e55a24:	d9000515 	stw	r4,20(sp)
  e55a28:	d8c00805 	stb	r3,32(sp)
  e55a2c:	2021883a 	mov	r16,r4
  e55a30:	2000c116 	blt	r4,zero,e55d38 <___vfprintf_internal_r+0x1e10>
  e55a34:	00800ac4 	movi	r2,43
  e55a38:	d8800845 	stb	r2,33(sp)
  e55a3c:	00800244 	movi	r2,9
  e55a40:	1400af0e 	bge	r2,r16,e55d00 <___vfprintf_internal_r+0x1dd8>
  e55a44:	1027883a 	mov	r19,r2
  e55a48:	dc400b84 	addi	r17,sp,46
  e55a4c:	8009883a 	mov	r4,r16
  e55a50:	01400284 	movi	r5,10
  e55a54:	0e5c5f40 	call	e5c5f4 <__modsi3>
  e55a58:	10800c04 	addi	r2,r2,48
  e55a5c:	8c7fffc4 	addi	r17,r17,-1
  e55a60:	8009883a 	mov	r4,r16
  e55a64:	01400284 	movi	r5,10
  e55a68:	88800005 	stb	r2,0(r17)
  e55a6c:	0e5c5940 	call	e5c594 <__divsi3>
  e55a70:	1021883a 	mov	r16,r2
  e55a74:	98bff516 	blt	r19,r2,e55a4c <___vfprintf_internal_r+0x1b24>
  e55a78:	10c00c04 	addi	r3,r2,48
  e55a7c:	d88009c4 	addi	r2,sp,39
  e55a80:	108001c4 	addi	r2,r2,7
  e55a84:	897fffc4 	addi	r5,r17,-1
  e55a88:	88ffffc5 	stb	r3,-1(r17)
  e55a8c:	2880a72e 	bgeu	r5,r2,e55d2c <___vfprintf_internal_r+0x1e04>
  e55a90:	1009883a 	mov	r4,r2
  e55a94:	d9800804 	addi	r6,sp,32
  e55a98:	d8c00884 	addi	r3,sp,34
  e55a9c:	28800003 	ldbu	r2,0(r5)
  e55aa0:	29400044 	addi	r5,r5,1
  e55aa4:	18800005 	stb	r2,0(r3)
  e55aa8:	18c00044 	addi	r3,r3,1
  e55aac:	293ffb36 	bltu	r5,r4,e55a9c <___vfprintf_internal_r+0x1b74>
  e55ab0:	1987c83a 	sub	r3,r3,r6
  e55ab4:	00800044 	movi	r2,1
  e55ab8:	d8c14815 	stw	r3,1312(sp)
  e55abc:	90cf883a 	add	r7,r18,r3
  e55ac0:	1480960e 	bge	r2,r18,e55d1c <___vfprintf_internal_r+0x1df4>
  e55ac4:	39c00044 	addi	r7,r7,1
  e55ac8:	d9c14515 	stw	r7,1300(sp)
  e55acc:	38003416 	blt	r7,zero,e55ba0 <___vfprintf_internal_r+0x1c78>
  e55ad0:	e0803fcc 	andi	r2,fp,255
  e55ad4:	1080201c 	xori	r2,r2,128
  e55ad8:	10bfe004 	addi	r2,r2,-128
  e55adc:	10004e26 	beq	r2,zero,e55c18 <___vfprintf_internal_r+0x1cf0>
  e55ae0:	00800b44 	movi	r2,45
  e55ae4:	dc814715 	stw	r18,1308(sp)
  e55ae8:	d8014615 	stw	zero,1304(sp)
  e55aec:	d8800405 	stb	r2,16(sp)
  e55af0:	003bb106 	br	e549b8 <___vfprintf_internal_r+0xa90>
  e55af4:	00800b44 	movi	r2,45
  e55af8:	d8800405 	stb	r2,16(sp)
  e55afc:	003d3306 	br	e54fcc <___vfprintf_internal_r+0x10a4>
  e55b00:	d9014f17 	ldw	r4,1340(sp)
  e55b04:	b00b883a 	mov	r5,r22
  e55b08:	d9800c04 	addi	r6,sp,48
  e55b0c:	0e53ed00 	call	e53ed0 <__sprint_r>
  e55b10:	103abd1e 	bne	r2,zero,e54608 <___vfprintf_internal_r+0x6e0>
  e55b14:	003abb06 	br	e54604 <___vfprintf_internal_r+0x6dc>
  e55b18:	38800017 	ldw	r2,0(r7)
  e55b1c:	39c00104 	addi	r7,r7,4
  e55b20:	d9c14015 	stw	r7,1280(sp)
  e55b24:	d9414b17 	ldw	r5,1324(sp)
  e55b28:	d9c14017 	ldw	r7,1280(sp)
  e55b2c:	11400015 	stw	r5,0(r2)
  e55b30:	00395906 	br	e54098 <___vfprintf_internal_r+0x170>
  e55b34:	980f883a 	mov	r7,r19
  e55b38:	dcc14515 	stw	r19,1300(sp)
  e55b3c:	d8014615 	stw	zero,1304(sp)
  e55b40:	003b9b06 	br	e549b0 <___vfprintf_internal_r+0xa88>
  e55b44:	0027883a 	mov	r19,zero
  e55b48:	00397806 	br	e5412c <___vfprintf_internal_r+0x204>
  e55b4c:	00c039b4 	movhi	r3,230
  e55b50:	18c4f204 	addi	r3,r3,5064
  e55b54:	100f883a 	mov	r7,r2
  e55b58:	d8814515 	stw	r2,1300(sp)
  e55b5c:	d8c14115 	stw	r3,1284(sp)
  e55b60:	0039e006 	br	e542e4 <___vfprintf_internal_r+0x3bc>
  e55b64:	008039b4 	movhi	r2,230
  e55b68:	1084f104 	addi	r2,r2,5060
  e55b6c:	d8814115 	stw	r2,1284(sp)
  e55b70:	003d1c06 	br	e54fe4 <___vfprintf_internal_r+0x10bc>
  e55b74:	d9414d17 	ldw	r5,1332(sp)
  e55b78:	00801984 	movi	r2,102
  e55b7c:	28804926 	beq	r5,r2,e55ca4 <___vfprintf_internal_r+0x1d7c>
  e55b80:	200f883a 	mov	r7,r4
  e55b84:	24805716 	blt	r4,r18,e55ce4 <___vfprintf_internal_r+0x1dbc>
  e55b88:	d9414c17 	ldw	r5,1328(sp)
  e55b8c:	2880004c 	andi	r2,r5,1
  e55b90:	10000126 	beq	r2,zero,e55b98 <___vfprintf_internal_r+0x1c70>
  e55b94:	21c00044 	addi	r7,r4,1
  e55b98:	d9c14515 	stw	r7,1300(sp)
  e55b9c:	383fcc0e 	bge	r7,zero,e55ad0 <___vfprintf_internal_r+0x1ba8>
  e55ba0:	d8014515 	stw	zero,1300(sp)
  e55ba4:	003fca06 	br	e55ad0 <___vfprintf_internal_r+0x1ba8>
  e55ba8:	d9000517 	ldw	r4,20(sp)
  e55bac:	00bfff04 	movi	r2,-4
  e55bb0:	1100480e 	bge	r2,r4,e55cd4 <___vfprintf_internal_r+0x1dac>
  e55bb4:	99004716 	blt	r19,r4,e55cd4 <___vfprintf_internal_r+0x1dac>
  e55bb8:	d8c14d15 	stw	r3,1332(sp)
  e55bbc:	003ff006 	br	e55b80 <___vfprintf_internal_r+0x1c58>
  e55bc0:	d8800717 	ldw	r2,28(sp)
  e55bc4:	14bf8b2e 	bgeu	r2,r18,e559f4 <___vfprintf_internal_r+0x1acc>
  e55bc8:	9007883a 	mov	r3,r18
  e55bcc:	01000c04 	movi	r4,48
  e55bd0:	11000005 	stb	r4,0(r2)
  e55bd4:	10800044 	addi	r2,r2,1
  e55bd8:	d8800715 	stw	r2,28(sp)
  e55bdc:	18bffc1e 	bne	r3,r2,e55bd0 <___vfprintf_internal_r+0x1ca8>
  e55be0:	003f8406 	br	e559f4 <___vfprintf_internal_r+0x1acc>
  e55be4:	d8814117 	ldw	r2,1284(sp)
  e55be8:	10c00007 	ldb	r3,0(r2)
  e55bec:	00800c04 	movi	r2,48
  e55bf0:	18805b26 	beq	r3,r2,e55d60 <___vfprintf_internal_r+0x1e38>
  e55bf4:	d9000517 	ldw	r4,20(sp)
  e55bf8:	9125883a 	add	r18,r18,r4
  e55bfc:	003f7506 	br	e559d4 <___vfprintf_internal_r+0x1aac>
  e55c00:	d9014c17 	ldw	r4,1328(sp)
  e55c04:	2080004c 	andi	r2,r4,1
  e55c08:	1005003a 	cmpeq	r2,r2,zero
  e55c0c:	103f6a26 	beq	r2,zero,e559b8 <___vfprintf_internal_r+0x1a90>
  e55c10:	d8800717 	ldw	r2,28(sp)
  e55c14:	003f7706 	br	e559f4 <___vfprintf_internal_r+0x1acc>
  e55c18:	d9c14515 	stw	r7,1300(sp)
  e55c1c:	38004d16 	blt	r7,zero,e55d54 <___vfprintf_internal_r+0x1e2c>
  e55c20:	dc814715 	stw	r18,1308(sp)
  e55c24:	d8014615 	stw	zero,1304(sp)
  e55c28:	003b6106 	br	e549b0 <___vfprintf_internal_r+0xa88>
  e55c2c:	d9014f17 	ldw	r4,1340(sp)
  e55c30:	d8800504 	addi	r2,sp,20
  e55c34:	d8800115 	stw	r2,4(sp)
  e55c38:	d8c00604 	addi	r3,sp,24
  e55c3c:	d8800704 	addi	r2,sp,28
  e55c40:	800b883a 	mov	r5,r16
  e55c44:	880d883a 	mov	r6,r17
  e55c48:	01c000c4 	movi	r7,3
  e55c4c:	d8c00215 	stw	r3,8(sp)
  e55c50:	d8800315 	stw	r2,12(sp)
  e55c54:	dcc00015 	stw	r19,0(sp)
  e55c58:	9829883a 	mov	r20,r19
  e55c5c:	0e5614c0 	call	e5614c <_dtoa_r>
  e55c60:	d8814115 	stw	r2,1284(sp)
  e55c64:	003f5106 	br	e559ac <___vfprintf_internal_r+0x1a84>
  e55c68:	d8c14217 	ldw	r3,1288(sp)
  e55c6c:	d9014317 	ldw	r4,1292(sp)
  e55c70:	07000b44 	movi	fp,45
  e55c74:	1821883a 	mov	r16,r3
  e55c78:	2460003c 	xorhi	r17,r4,32768
  e55c7c:	003f3106 	br	e55944 <___vfprintf_internal_r+0x1a1c>
  e55c80:	9d000044 	addi	r20,r19,1
  e55c84:	003f3906 	br	e5596c <___vfprintf_internal_r+0x1a44>
  e55c88:	983f251e 	bne	r19,zero,e55920 <___vfprintf_internal_r+0x19f8>
  e55c8c:	04c00044 	movi	r19,1
  e55c90:	003f2306 	br	e55920 <___vfprintf_internal_r+0x19f8>
  e55c94:	04c00184 	movi	r19,6
  e55c98:	003f2106 	br	e55920 <___vfprintf_internal_r+0x19f8>
  e55c9c:	d8014515 	stw	zero,1300(sp)
  e55ca0:	003eee06 	br	e5585c <___vfprintf_internal_r+0x1934>
  e55ca4:	200f883a 	mov	r7,r4
  e55ca8:	0100370e 	bge	zero,r4,e55d88 <___vfprintf_internal_r+0x1e60>
  e55cac:	9800031e 	bne	r19,zero,e55cbc <___vfprintf_internal_r+0x1d94>
  e55cb0:	d9814c17 	ldw	r6,1328(sp)
  e55cb4:	3080004c 	andi	r2,r6,1
  e55cb8:	103fb726 	beq	r2,zero,e55b98 <___vfprintf_internal_r+0x1c70>
  e55cbc:	20800044 	addi	r2,r4,1
  e55cc0:	98a7883a 	add	r19,r19,r2
  e55cc4:	dcc14515 	stw	r19,1300(sp)
  e55cc8:	980f883a 	mov	r7,r19
  e55ccc:	983f800e 	bge	r19,zero,e55ad0 <___vfprintf_internal_r+0x1ba8>
  e55cd0:	003fb306 	br	e55ba0 <___vfprintf_internal_r+0x1c78>
  e55cd4:	d9814d17 	ldw	r6,1332(sp)
  e55cd8:	31bfff84 	addi	r6,r6,-2
  e55cdc:	d9814d15 	stw	r6,1332(sp)
  e55ce0:	003f4c06 	br	e55a14 <___vfprintf_internal_r+0x1aec>
  e55ce4:	0100180e 	bge	zero,r4,e55d48 <___vfprintf_internal_r+0x1e20>
  e55ce8:	00800044 	movi	r2,1
  e55cec:	1485883a 	add	r2,r2,r18
  e55cf0:	d8814515 	stw	r2,1300(sp)
  e55cf4:	100f883a 	mov	r7,r2
  e55cf8:	103f750e 	bge	r2,zero,e55ad0 <___vfprintf_internal_r+0x1ba8>
  e55cfc:	003fa806 	br	e55ba0 <___vfprintf_internal_r+0x1c78>
  e55d00:	80c00c04 	addi	r3,r16,48
  e55d04:	00800c04 	movi	r2,48
  e55d08:	d8c008c5 	stb	r3,35(sp)
  e55d0c:	d9800804 	addi	r6,sp,32
  e55d10:	d8c00904 	addi	r3,sp,36
  e55d14:	d8800885 	stb	r2,34(sp)
  e55d18:	003f6506 	br	e55ab0 <___vfprintf_internal_r+0x1b88>
  e55d1c:	d9014c17 	ldw	r4,1328(sp)
  e55d20:	2084703a 	and	r2,r4,r2
  e55d24:	103f9c26 	beq	r2,zero,e55b98 <___vfprintf_internal_r+0x1c70>
  e55d28:	003f6606 	br	e55ac4 <___vfprintf_internal_r+0x1b9c>
  e55d2c:	d9800804 	addi	r6,sp,32
  e55d30:	d8c00884 	addi	r3,sp,34
  e55d34:	003f5e06 	br	e55ab0 <___vfprintf_internal_r+0x1b88>
  e55d38:	00800b44 	movi	r2,45
  e55d3c:	0121c83a 	sub	r16,zero,r4
  e55d40:	d8800845 	stb	r2,33(sp)
  e55d44:	003f3d06 	br	e55a3c <___vfprintf_internal_r+0x1b14>
  e55d48:	00800084 	movi	r2,2
  e55d4c:	1105c83a 	sub	r2,r2,r4
  e55d50:	003fe606 	br	e55cec <___vfprintf_internal_r+0x1dc4>
  e55d54:	d8014515 	stw	zero,1300(sp)
  e55d58:	dc814715 	stw	r18,1308(sp)
  e55d5c:	003fb106 	br	e55c24 <___vfprintf_internal_r+0x1cfc>
  e55d60:	000d883a 	mov	r6,zero
  e55d64:	000f883a 	mov	r7,zero
  e55d68:	8009883a 	mov	r4,r16
  e55d6c:	880b883a 	mov	r5,r17
  e55d70:	0e532880 	call	e53288 <__nedf2>
  e55d74:	103f9f26 	beq	r2,zero,e55bf4 <___vfprintf_internal_r+0x1ccc>
  e55d78:	00800044 	movi	r2,1
  e55d7c:	1509c83a 	sub	r4,r2,r20
  e55d80:	d9000515 	stw	r4,20(sp)
  e55d84:	003f9b06 	br	e55bf4 <___vfprintf_internal_r+0x1ccc>
  e55d88:	98000d1e 	bne	r19,zero,e55dc0 <___vfprintf_internal_r+0x1e98>
  e55d8c:	d8c14c17 	ldw	r3,1328(sp)
  e55d90:	1880004c 	andi	r2,r3,1
  e55d94:	10000a1e 	bne	r2,zero,e55dc0 <___vfprintf_internal_r+0x1e98>
  e55d98:	01000044 	movi	r4,1
  e55d9c:	200f883a 	mov	r7,r4
  e55da0:	d9014515 	stw	r4,1300(sp)
  e55da4:	003f4a06 	br	e55ad0 <___vfprintf_internal_r+0x1ba8>
  e55da8:	3cc00017 	ldw	r19,0(r7)
  e55dac:	39c00104 	addi	r7,r7,4
  e55db0:	983d0e0e 	bge	r19,zero,e551ec <___vfprintf_internal_r+0x12c4>
  e55db4:	b8c00007 	ldb	r3,0(r23)
  e55db8:	04ffffc4 	movi	r19,-1
  e55dbc:	0038d906 	br	e54124 <___vfprintf_internal_r+0x1fc>
  e55dc0:	9cc00084 	addi	r19,r19,2
  e55dc4:	dcc14515 	stw	r19,1300(sp)
  e55dc8:	980f883a 	mov	r7,r19
  e55dcc:	983f400e 	bge	r19,zero,e55ad0 <___vfprintf_internal_r+0x1ba8>
  e55dd0:	003f7306 	br	e55ba0 <___vfprintf_internal_r+0x1c78>

00e55dd4 <__vfprintf_internal>:
  e55dd4:	008039b4 	movhi	r2,230
  e55dd8:	108c9b04 	addi	r2,r2,12908
  e55ddc:	2013883a 	mov	r9,r4
  e55de0:	11000017 	ldw	r4,0(r2)
  e55de4:	2805883a 	mov	r2,r5
  e55de8:	300f883a 	mov	r7,r6
  e55dec:	480b883a 	mov	r5,r9
  e55df0:	100d883a 	mov	r6,r2
  e55df4:	0e53f281 	jmpi	e53f28 <___vfprintf_internal_r>

00e55df8 <__swsetup_r>:
  e55df8:	008039b4 	movhi	r2,230
  e55dfc:	108c9b04 	addi	r2,r2,12908
  e55e00:	10c00017 	ldw	r3,0(r2)
  e55e04:	defffd04 	addi	sp,sp,-12
  e55e08:	dc400115 	stw	r17,4(sp)
  e55e0c:	dc000015 	stw	r16,0(sp)
  e55e10:	dfc00215 	stw	ra,8(sp)
  e55e14:	2023883a 	mov	r17,r4
  e55e18:	2821883a 	mov	r16,r5
  e55e1c:	18000226 	beq	r3,zero,e55e28 <__swsetup_r+0x30>
  e55e20:	18800e17 	ldw	r2,56(r3)
  e55e24:	10001f26 	beq	r2,zero,e55ea4 <__swsetup_r+0xac>
  e55e28:	8100030b 	ldhu	r4,12(r16)
  e55e2c:	2080020c 	andi	r2,r4,8
  e55e30:	10002826 	beq	r2,zero,e55ed4 <__swsetup_r+0xdc>
  e55e34:	81400417 	ldw	r5,16(r16)
  e55e38:	28001d26 	beq	r5,zero,e55eb0 <__swsetup_r+0xb8>
  e55e3c:	2080004c 	andi	r2,r4,1
  e55e40:	1005003a 	cmpeq	r2,r2,zero
  e55e44:	10000b26 	beq	r2,zero,e55e74 <__swsetup_r+0x7c>
  e55e48:	2080008c 	andi	r2,r4,2
  e55e4c:	10001226 	beq	r2,zero,e55e98 <__swsetup_r+0xa0>
  e55e50:	0005883a 	mov	r2,zero
  e55e54:	80800215 	stw	r2,8(r16)
  e55e58:	28000b26 	beq	r5,zero,e55e88 <__swsetup_r+0x90>
  e55e5c:	0005883a 	mov	r2,zero
  e55e60:	dfc00217 	ldw	ra,8(sp)
  e55e64:	dc400117 	ldw	r17,4(sp)
  e55e68:	dc000017 	ldw	r16,0(sp)
  e55e6c:	dec00304 	addi	sp,sp,12
  e55e70:	f800283a 	ret
  e55e74:	80800517 	ldw	r2,20(r16)
  e55e78:	80000215 	stw	zero,8(r16)
  e55e7c:	0085c83a 	sub	r2,zero,r2
  e55e80:	80800615 	stw	r2,24(r16)
  e55e84:	283ff51e 	bne	r5,zero,e55e5c <__swsetup_r+0x64>
  e55e88:	2080200c 	andi	r2,r4,128
  e55e8c:	103ff326 	beq	r2,zero,e55e5c <__swsetup_r+0x64>
  e55e90:	00bfffc4 	movi	r2,-1
  e55e94:	003ff206 	br	e55e60 <__swsetup_r+0x68>
  e55e98:	80800517 	ldw	r2,20(r16)
  e55e9c:	80800215 	stw	r2,8(r16)
  e55ea0:	003fed06 	br	e55e58 <__swsetup_r+0x60>
  e55ea4:	1809883a 	mov	r4,r3
  e55ea8:	0e579980 	call	e57998 <__sinit>
  e55eac:	003fde06 	br	e55e28 <__swsetup_r+0x30>
  e55eb0:	20c0a00c 	andi	r3,r4,640
  e55eb4:	00808004 	movi	r2,512
  e55eb8:	18bfe026 	beq	r3,r2,e55e3c <__swsetup_r+0x44>
  e55ebc:	8809883a 	mov	r4,r17
  e55ec0:	800b883a 	mov	r5,r16
  e55ec4:	0e587100 	call	e58710 <__smakebuf_r>
  e55ec8:	8100030b 	ldhu	r4,12(r16)
  e55ecc:	81400417 	ldw	r5,16(r16)
  e55ed0:	003fda06 	br	e55e3c <__swsetup_r+0x44>
  e55ed4:	2080040c 	andi	r2,r4,16
  e55ed8:	103fed26 	beq	r2,zero,e55e90 <__swsetup_r+0x98>
  e55edc:	2080010c 	andi	r2,r4,4
  e55ee0:	10001226 	beq	r2,zero,e55f2c <__swsetup_r+0x134>
  e55ee4:	81400c17 	ldw	r5,48(r16)
  e55ee8:	28000526 	beq	r5,zero,e55f00 <__swsetup_r+0x108>
  e55eec:	80801004 	addi	r2,r16,64
  e55ef0:	28800226 	beq	r5,r2,e55efc <__swsetup_r+0x104>
  e55ef4:	8809883a 	mov	r4,r17
  e55ef8:	0e57d1c0 	call	e57d1c <_free_r>
  e55efc:	80000c15 	stw	zero,48(r16)
  e55f00:	8080030b 	ldhu	r2,12(r16)
  e55f04:	81400417 	ldw	r5,16(r16)
  e55f08:	80000115 	stw	zero,4(r16)
  e55f0c:	10bff6cc 	andi	r2,r2,65499
  e55f10:	8080030d 	sth	r2,12(r16)
  e55f14:	81400015 	stw	r5,0(r16)
  e55f18:	8080030b 	ldhu	r2,12(r16)
  e55f1c:	10800214 	ori	r2,r2,8
  e55f20:	113fffcc 	andi	r4,r2,65535
  e55f24:	8080030d 	sth	r2,12(r16)
  e55f28:	003fc306 	br	e55e38 <__swsetup_r+0x40>
  e55f2c:	81400417 	ldw	r5,16(r16)
  e55f30:	003ff906 	br	e55f18 <__swsetup_r+0x120>

00e55f34 <quorem>:
  e55f34:	28c00417 	ldw	r3,16(r5)
  e55f38:	20800417 	ldw	r2,16(r4)
  e55f3c:	defff604 	addi	sp,sp,-40
  e55f40:	ddc00715 	stw	r23,28(sp)
  e55f44:	dd400515 	stw	r21,20(sp)
  e55f48:	dfc00915 	stw	ra,36(sp)
  e55f4c:	df000815 	stw	fp,32(sp)
  e55f50:	dd800615 	stw	r22,24(sp)
  e55f54:	dd000415 	stw	r20,16(sp)
  e55f58:	dcc00315 	stw	r19,12(sp)
  e55f5c:	dc800215 	stw	r18,8(sp)
  e55f60:	dc400115 	stw	r17,4(sp)
  e55f64:	dc000015 	stw	r16,0(sp)
  e55f68:	202f883a 	mov	r23,r4
  e55f6c:	282b883a 	mov	r21,r5
  e55f70:	10c07416 	blt	r2,r3,e56144 <quorem+0x210>
  e55f74:	1c7fffc4 	addi	r17,r3,-1
  e55f78:	8c45883a 	add	r2,r17,r17
  e55f7c:	1085883a 	add	r2,r2,r2
  e55f80:	2c000504 	addi	r16,r5,20
  e55f84:	24c00504 	addi	r19,r4,20
  e55f88:	14ed883a 	add	r22,r2,r19
  e55f8c:	80a5883a 	add	r18,r16,r2
  e55f90:	b7000017 	ldw	fp,0(r22)
  e55f94:	91400017 	ldw	r5,0(r18)
  e55f98:	e009883a 	mov	r4,fp
  e55f9c:	29400044 	addi	r5,r5,1
  e55fa0:	0e5c6540 	call	e5c654 <__udivsi3>
  e55fa4:	1029883a 	mov	r20,r2
  e55fa8:	10003c1e 	bne	r2,zero,e5609c <quorem+0x168>
  e55fac:	a80b883a 	mov	r5,r21
  e55fb0:	b809883a 	mov	r4,r23
  e55fb4:	0e5943c0 	call	e5943c <__mcmp>
  e55fb8:	10002b16 	blt	r2,zero,e56068 <quorem+0x134>
  e55fbc:	a5000044 	addi	r20,r20,1
  e55fc0:	980f883a 	mov	r7,r19
  e55fc4:	0011883a 	mov	r8,zero
  e55fc8:	0009883a 	mov	r4,zero
  e55fcc:	81400017 	ldw	r5,0(r16)
  e55fd0:	38c00017 	ldw	r3,0(r7)
  e55fd4:	84000104 	addi	r16,r16,4
  e55fd8:	28bfffcc 	andi	r2,r5,65535
  e55fdc:	2085883a 	add	r2,r4,r2
  e55fe0:	11bfffcc 	andi	r6,r2,65535
  e55fe4:	193fffcc 	andi	r4,r3,65535
  e55fe8:	1004d43a 	srli	r2,r2,16
  e55fec:	280ad43a 	srli	r5,r5,16
  e55ff0:	2189c83a 	sub	r4,r4,r6
  e55ff4:	2209883a 	add	r4,r4,r8
  e55ff8:	1806d43a 	srli	r3,r3,16
  e55ffc:	288b883a 	add	r5,r5,r2
  e56000:	200dd43a 	srai	r6,r4,16
  e56004:	28bfffcc 	andi	r2,r5,65535
  e56008:	1887c83a 	sub	r3,r3,r2
  e5600c:	1987883a 	add	r3,r3,r6
  e56010:	3900000d 	sth	r4,0(r7)
  e56014:	38c0008d 	sth	r3,2(r7)
  e56018:	2808d43a 	srli	r4,r5,16
  e5601c:	39c00104 	addi	r7,r7,4
  e56020:	1811d43a 	srai	r8,r3,16
  e56024:	943fe92e 	bgeu	r18,r16,e55fcc <quorem+0x98>
  e56028:	8c45883a 	add	r2,r17,r17
  e5602c:	1085883a 	add	r2,r2,r2
  e56030:	9885883a 	add	r2,r19,r2
  e56034:	10c00017 	ldw	r3,0(r2)
  e56038:	18000b1e 	bne	r3,zero,e56068 <quorem+0x134>
  e5603c:	113fff04 	addi	r4,r2,-4
  e56040:	9900082e 	bgeu	r19,r4,e56064 <quorem+0x130>
  e56044:	10bfff17 	ldw	r2,-4(r2)
  e56048:	10000326 	beq	r2,zero,e56058 <quorem+0x124>
  e5604c:	00000506 	br	e56064 <quorem+0x130>
  e56050:	20800017 	ldw	r2,0(r4)
  e56054:	1000031e 	bne	r2,zero,e56064 <quorem+0x130>
  e56058:	213fff04 	addi	r4,r4,-4
  e5605c:	8c7fffc4 	addi	r17,r17,-1
  e56060:	993ffb36 	bltu	r19,r4,e56050 <quorem+0x11c>
  e56064:	bc400415 	stw	r17,16(r23)
  e56068:	a005883a 	mov	r2,r20
  e5606c:	dfc00917 	ldw	ra,36(sp)
  e56070:	df000817 	ldw	fp,32(sp)
  e56074:	ddc00717 	ldw	r23,28(sp)
  e56078:	dd800617 	ldw	r22,24(sp)
  e5607c:	dd400517 	ldw	r21,20(sp)
  e56080:	dd000417 	ldw	r20,16(sp)
  e56084:	dcc00317 	ldw	r19,12(sp)
  e56088:	dc800217 	ldw	r18,8(sp)
  e5608c:	dc400117 	ldw	r17,4(sp)
  e56090:	dc000017 	ldw	r16,0(sp)
  e56094:	dec00a04 	addi	sp,sp,40
  e56098:	f800283a 	ret
  e5609c:	980f883a 	mov	r7,r19
  e560a0:	8011883a 	mov	r8,r16
  e560a4:	0013883a 	mov	r9,zero
  e560a8:	000d883a 	mov	r6,zero
  e560ac:	40c00017 	ldw	r3,0(r8)
  e560b0:	39000017 	ldw	r4,0(r7)
  e560b4:	42000104 	addi	r8,r8,4
  e560b8:	18bfffcc 	andi	r2,r3,65535
  e560bc:	a085383a 	mul	r2,r20,r2
  e560c0:	1806d43a 	srli	r3,r3,16
  e560c4:	217fffcc 	andi	r5,r4,65535
  e560c8:	3085883a 	add	r2,r6,r2
  e560cc:	11bfffcc 	andi	r6,r2,65535
  e560d0:	a0c7383a 	mul	r3,r20,r3
  e560d4:	1004d43a 	srli	r2,r2,16
  e560d8:	298bc83a 	sub	r5,r5,r6
  e560dc:	2a4b883a 	add	r5,r5,r9
  e560e0:	2008d43a 	srli	r4,r4,16
  e560e4:	1887883a 	add	r3,r3,r2
  e560e8:	280dd43a 	srai	r6,r5,16
  e560ec:	18bfffcc 	andi	r2,r3,65535
  e560f0:	2089c83a 	sub	r4,r4,r2
  e560f4:	2189883a 	add	r4,r4,r6
  e560f8:	3900008d 	sth	r4,2(r7)
  e560fc:	3940000d 	sth	r5,0(r7)
  e56100:	180cd43a 	srli	r6,r3,16
  e56104:	39c00104 	addi	r7,r7,4
  e56108:	2013d43a 	srai	r9,r4,16
  e5610c:	923fe72e 	bgeu	r18,r8,e560ac <quorem+0x178>
  e56110:	e03fa61e 	bne	fp,zero,e55fac <quorem+0x78>
  e56114:	b0ffff04 	addi	r3,r22,-4
  e56118:	98c0082e 	bgeu	r19,r3,e5613c <quorem+0x208>
  e5611c:	b0bfff17 	ldw	r2,-4(r22)
  e56120:	10000326 	beq	r2,zero,e56130 <quorem+0x1fc>
  e56124:	00000506 	br	e5613c <quorem+0x208>
  e56128:	18800017 	ldw	r2,0(r3)
  e5612c:	1000031e 	bne	r2,zero,e5613c <quorem+0x208>
  e56130:	18ffff04 	addi	r3,r3,-4
  e56134:	8c7fffc4 	addi	r17,r17,-1
  e56138:	98fffb36 	bltu	r19,r3,e56128 <quorem+0x1f4>
  e5613c:	bc400415 	stw	r17,16(r23)
  e56140:	003f9a06 	br	e55fac <quorem+0x78>
  e56144:	0005883a 	mov	r2,zero
  e56148:	003fc806 	br	e5606c <quorem+0x138>

00e5614c <_dtoa_r>:
  e5614c:	22001017 	ldw	r8,64(r4)
  e56150:	deffda04 	addi	sp,sp,-152
  e56154:	dd402115 	stw	r21,132(sp)
  e56158:	dd002015 	stw	r20,128(sp)
  e5615c:	dc801e15 	stw	r18,120(sp)
  e56160:	dc401d15 	stw	r17,116(sp)
  e56164:	dfc02515 	stw	ra,148(sp)
  e56168:	df002415 	stw	fp,144(sp)
  e5616c:	ddc02315 	stw	r23,140(sp)
  e56170:	dd802215 	stw	r22,136(sp)
  e56174:	dcc01f15 	stw	r19,124(sp)
  e56178:	dc001c15 	stw	r16,112(sp)
  e5617c:	d9001615 	stw	r4,88(sp)
  e56180:	3023883a 	mov	r17,r6
  e56184:	2829883a 	mov	r20,r5
  e56188:	d9c01715 	stw	r7,92(sp)
  e5618c:	dc802817 	ldw	r18,160(sp)
  e56190:	302b883a 	mov	r21,r6
  e56194:	40000a26 	beq	r8,zero,e561c0 <_dtoa_r+0x74>
  e56198:	20801117 	ldw	r2,68(r4)
  e5619c:	400b883a 	mov	r5,r8
  e561a0:	40800115 	stw	r2,4(r8)
  e561a4:	20c01117 	ldw	r3,68(r4)
  e561a8:	00800044 	movi	r2,1
  e561ac:	10c4983a 	sll	r2,r2,r3
  e561b0:	40800215 	stw	r2,8(r8)
  e561b4:	0e592e00 	call	e592e0 <_Bfree>
  e561b8:	d8c01617 	ldw	r3,88(sp)
  e561bc:	18001015 	stw	zero,64(r3)
  e561c0:	8800a316 	blt	r17,zero,e56450 <_dtoa_r+0x304>
  e561c4:	90000015 	stw	zero,0(r18)
  e561c8:	a8dffc2c 	andhi	r3,r21,32752
  e561cc:	009ffc34 	movhi	r2,32752
  e561d0:	18809126 	beq	r3,r2,e56418 <_dtoa_r+0x2cc>
  e561d4:	000d883a 	mov	r6,zero
  e561d8:	000f883a 	mov	r7,zero
  e561dc:	a009883a 	mov	r4,r20
  e561e0:	a80b883a 	mov	r5,r21
  e561e4:	dd001215 	stw	r20,72(sp)
  e561e8:	dd401315 	stw	r21,76(sp)
  e561ec:	0e532880 	call	e53288 <__nedf2>
  e561f0:	1000171e 	bne	r2,zero,e56250 <_dtoa_r+0x104>
  e561f4:	d9802717 	ldw	r6,156(sp)
  e561f8:	00800044 	movi	r2,1
  e561fc:	30800015 	stw	r2,0(r6)
  e56200:	d8802917 	ldw	r2,164(sp)
  e56204:	10029b26 	beq	r2,zero,e56c74 <_dtoa_r+0xb28>
  e56208:	d9002917 	ldw	r4,164(sp)
  e5620c:	008039b4 	movhi	r2,230
  e56210:	10848744 	addi	r2,r2,4637
  e56214:	10ffffc4 	addi	r3,r2,-1
  e56218:	20800015 	stw	r2,0(r4)
  e5621c:	1805883a 	mov	r2,r3
  e56220:	dfc02517 	ldw	ra,148(sp)
  e56224:	df002417 	ldw	fp,144(sp)
  e56228:	ddc02317 	ldw	r23,140(sp)
  e5622c:	dd802217 	ldw	r22,136(sp)
  e56230:	dd402117 	ldw	r21,132(sp)
  e56234:	dd002017 	ldw	r20,128(sp)
  e56238:	dcc01f17 	ldw	r19,124(sp)
  e5623c:	dc801e17 	ldw	r18,120(sp)
  e56240:	dc401d17 	ldw	r17,116(sp)
  e56244:	dc001c17 	ldw	r16,112(sp)
  e56248:	dec02604 	addi	sp,sp,152
  e5624c:	f800283a 	ret
  e56250:	d9001617 	ldw	r4,88(sp)
  e56254:	d9401217 	ldw	r5,72(sp)
  e56258:	d8800104 	addi	r2,sp,4
  e5625c:	a80d883a 	mov	r6,r21
  e56260:	d9c00204 	addi	r7,sp,8
  e56264:	d8800015 	stw	r2,0(sp)
  e56268:	0e5991c0 	call	e5991c <__d2b>
  e5626c:	d8800715 	stw	r2,28(sp)
  e56270:	a804d53a 	srli	r2,r21,20
  e56274:	1101ffcc 	andi	r4,r2,2047
  e56278:	20008626 	beq	r4,zero,e56494 <_dtoa_r+0x348>
  e5627c:	d8c01217 	ldw	r3,72(sp)
  e56280:	00800434 	movhi	r2,16
  e56284:	10bfffc4 	addi	r2,r2,-1
  e56288:	ddc00117 	ldw	r23,4(sp)
  e5628c:	a884703a 	and	r2,r21,r2
  e56290:	1811883a 	mov	r8,r3
  e56294:	124ffc34 	orhi	r9,r2,16368
  e56298:	25bf0044 	addi	r22,r4,-1023
  e5629c:	d8000815 	stw	zero,32(sp)
  e562a0:	0005883a 	mov	r2,zero
  e562a4:	00cffe34 	movhi	r3,16376
  e562a8:	480b883a 	mov	r5,r9
  e562ac:	4009883a 	mov	r4,r8
  e562b0:	180f883a 	mov	r7,r3
  e562b4:	100d883a 	mov	r6,r2
  e562b8:	0e52f3c0 	call	e52f3c <__subdf3>
  e562bc:	0218dbf4 	movhi	r8,25455
  e562c0:	4210d844 	addi	r8,r8,17249
  e562c4:	024ff4f4 	movhi	r9,16339
  e562c8:	4a61e9c4 	addi	r9,r9,-30809
  e562cc:	480f883a 	mov	r7,r9
  e562d0:	400d883a 	mov	r6,r8
  e562d4:	180b883a 	mov	r5,r3
  e562d8:	1009883a 	mov	r4,r2
  e562dc:	0e5bbd00 	call	e5bbd0 <__muldf3>
  e562e0:	0222d874 	movhi	r8,35681
  e562e4:	42322cc4 	addi	r8,r8,-14157
  e562e8:	024ff1f4 	movhi	r9,16327
  e562ec:	4a628a04 	addi	r9,r9,-30168
  e562f0:	480f883a 	mov	r7,r9
  e562f4:	400d883a 	mov	r6,r8
  e562f8:	180b883a 	mov	r5,r3
  e562fc:	1009883a 	mov	r4,r2
  e56300:	0e52fbc0 	call	e52fbc <__adddf3>
  e56304:	b009883a 	mov	r4,r22
  e56308:	1021883a 	mov	r16,r2
  e5630c:	1823883a 	mov	r17,r3
  e56310:	0e5c1b40 	call	e5c1b4 <__floatsidf>
  e56314:	021427f4 	movhi	r8,20639
  e56318:	421e7ec4 	addi	r8,r8,31227
  e5631c:	024ff4f4 	movhi	r9,16339
  e56320:	4a5104c4 	addi	r9,r9,17427
  e56324:	480f883a 	mov	r7,r9
  e56328:	400d883a 	mov	r6,r8
  e5632c:	180b883a 	mov	r5,r3
  e56330:	1009883a 	mov	r4,r2
  e56334:	0e5bbd00 	call	e5bbd0 <__muldf3>
  e56338:	180f883a 	mov	r7,r3
  e5633c:	880b883a 	mov	r5,r17
  e56340:	100d883a 	mov	r6,r2
  e56344:	8009883a 	mov	r4,r16
  e56348:	0e52fbc0 	call	e52fbc <__adddf3>
  e5634c:	1009883a 	mov	r4,r2
  e56350:	180b883a 	mov	r5,r3
  e56354:	1021883a 	mov	r16,r2
  e56358:	1823883a 	mov	r17,r3
  e5635c:	0e5c2ac0 	call	e5c2ac <__fixdfsi>
  e56360:	000d883a 	mov	r6,zero
  e56364:	000f883a 	mov	r7,zero
  e56368:	8009883a 	mov	r4,r16
  e5636c:	880b883a 	mov	r5,r17
  e56370:	d8800d15 	stw	r2,52(sp)
  e56374:	0e5c12c0 	call	e5c12c <__ltdf2>
  e56378:	10031716 	blt	r2,zero,e56fd8 <_dtoa_r+0xe8c>
  e5637c:	d8c00d17 	ldw	r3,52(sp)
  e56380:	00800584 	movi	r2,22
  e56384:	10c1482e 	bgeu	r2,r3,e568a8 <_dtoa_r+0x75c>
  e56388:	01000044 	movi	r4,1
  e5638c:	d9000c15 	stw	r4,48(sp)
  e56390:	bd85c83a 	sub	r2,r23,r22
  e56394:	11bfffc4 	addi	r6,r2,-1
  e56398:	30030b16 	blt	r6,zero,e56fc8 <_dtoa_r+0xe7c>
  e5639c:	d9800a15 	stw	r6,40(sp)
  e563a0:	d8001115 	stw	zero,68(sp)
  e563a4:	d8c00d17 	ldw	r3,52(sp)
  e563a8:	1802ff16 	blt	r3,zero,e56fa8 <_dtoa_r+0xe5c>
  e563ac:	d9000a17 	ldw	r4,40(sp)
  e563b0:	d8c00915 	stw	r3,36(sp)
  e563b4:	d8001015 	stw	zero,64(sp)
  e563b8:	20c9883a 	add	r4,r4,r3
  e563bc:	d9000a15 	stw	r4,40(sp)
  e563c0:	d9001717 	ldw	r4,92(sp)
  e563c4:	00800244 	movi	r2,9
  e563c8:	11004636 	bltu	r2,r4,e564e4 <_dtoa_r+0x398>
  e563cc:	00800144 	movi	r2,5
  e563d0:	11020416 	blt	r2,r4,e56be4 <_dtoa_r+0xa98>
  e563d4:	04400044 	movi	r17,1
  e563d8:	d8c01717 	ldw	r3,92(sp)
  e563dc:	00800144 	movi	r2,5
  e563e0:	10c1ed36 	bltu	r2,r3,e56b98 <_dtoa_r+0xa4c>
  e563e4:	18c5883a 	add	r2,r3,r3
  e563e8:	1085883a 	add	r2,r2,r2
  e563ec:	00c03974 	movhi	r3,229
  e563f0:	18d90004 	addi	r3,r3,25600
  e563f4:	10c5883a 	add	r2,r2,r3
  e563f8:	11000017 	ldw	r4,0(r2)
  e563fc:	2000683a 	jmp	r4
  e56400:	00e564ec 	andhi	r3,zero,38291
  e56404:	00e564ec 	andhi	r3,zero,38291
  e56408:	00e56eec 	andhi	r3,zero,38331
  e5640c:	00e56ec4 	movi	r3,-27205
  e56410:	00e56f08 	cmpgei	r3,zero,-27204
  e56414:	00e56f14 	movui	r3,38332
  e56418:	d9002717 	ldw	r4,156(sp)
  e5641c:	0089c3c4 	movi	r2,9999
  e56420:	20800015 	stw	r2,0(r4)
  e56424:	a0001026 	beq	r20,zero,e56468 <_dtoa_r+0x31c>
  e56428:	00c039b4 	movhi	r3,230
  e5642c:	18c50b04 	addi	r3,r3,5164
  e56430:	d9802917 	ldw	r6,164(sp)
  e56434:	303f7926 	beq	r6,zero,e5621c <_dtoa_r+0xd0>
  e56438:	188000c7 	ldb	r2,3(r3)
  e5643c:	190000c4 	addi	r4,r3,3
  e56440:	1000101e 	bne	r2,zero,e56484 <_dtoa_r+0x338>
  e56444:	d8802917 	ldw	r2,164(sp)
  e56448:	11000015 	stw	r4,0(r2)
  e5644c:	003f7306 	br	e5621c <_dtoa_r+0xd0>
  e56450:	00a00034 	movhi	r2,32768
  e56454:	10bfffc4 	addi	r2,r2,-1
  e56458:	00c00044 	movi	r3,1
  e5645c:	88aa703a 	and	r21,r17,r2
  e56460:	90c00015 	stw	r3,0(r18)
  e56464:	003f5806 	br	e561c8 <_dtoa_r+0x7c>
  e56468:	00800434 	movhi	r2,16
  e5646c:	10bfffc4 	addi	r2,r2,-1
  e56470:	a884703a 	and	r2,r21,r2
  e56474:	103fec1e 	bne	r2,zero,e56428 <_dtoa_r+0x2dc>
  e56478:	00c039b4 	movhi	r3,230
  e5647c:	18c50804 	addi	r3,r3,5152
  e56480:	003feb06 	br	e56430 <_dtoa_r+0x2e4>
  e56484:	d8802917 	ldw	r2,164(sp)
  e56488:	19000204 	addi	r4,r3,8
  e5648c:	11000015 	stw	r4,0(r2)
  e56490:	003f6206 	br	e5621c <_dtoa_r+0xd0>
  e56494:	ddc00117 	ldw	r23,4(sp)
  e56498:	d8800217 	ldw	r2,8(sp)
  e5649c:	01000804 	movi	r4,32
  e564a0:	b8c10c84 	addi	r3,r23,1074
  e564a4:	18a3883a 	add	r17,r3,r2
  e564a8:	2441b80e 	bge	r4,r17,e56b8c <_dtoa_r+0xa40>
  e564ac:	00c01004 	movi	r3,64
  e564b0:	1c47c83a 	sub	r3,r3,r17
  e564b4:	88bff804 	addi	r2,r17,-32
  e564b8:	a8c6983a 	sll	r3,r21,r3
  e564bc:	a084d83a 	srl	r2,r20,r2
  e564c0:	1888b03a 	or	r4,r3,r2
  e564c4:	0e5c3840 	call	e5c384 <__floatunsidf>
  e564c8:	1011883a 	mov	r8,r2
  e564cc:	00bf8434 	movhi	r2,65040
  e564d0:	01000044 	movi	r4,1
  e564d4:	10d3883a 	add	r9,r2,r3
  e564d8:	8dbef344 	addi	r22,r17,-1075
  e564dc:	d9000815 	stw	r4,32(sp)
  e564e0:	003f6f06 	br	e562a0 <_dtoa_r+0x154>
  e564e4:	d8001715 	stw	zero,92(sp)
  e564e8:	04400044 	movi	r17,1
  e564ec:	00bfffc4 	movi	r2,-1
  e564f0:	00c00044 	movi	r3,1
  e564f4:	d8800e15 	stw	r2,56(sp)
  e564f8:	d8002615 	stw	zero,152(sp)
  e564fc:	d8800f15 	stw	r2,60(sp)
  e56500:	d8c00b15 	stw	r3,44(sp)
  e56504:	1021883a 	mov	r16,r2
  e56508:	d8801617 	ldw	r2,88(sp)
  e5650c:	10001115 	stw	zero,68(r2)
  e56510:	d8801617 	ldw	r2,88(sp)
  e56514:	11401117 	ldw	r5,68(r2)
  e56518:	1009883a 	mov	r4,r2
  e5651c:	0e598600 	call	e59860 <_Balloc>
  e56520:	d8c01617 	ldw	r3,88(sp)
  e56524:	d8800515 	stw	r2,20(sp)
  e56528:	18801015 	stw	r2,64(r3)
  e5652c:	00800384 	movi	r2,14
  e56530:	14006836 	bltu	r2,r16,e566d4 <_dtoa_r+0x588>
  e56534:	8805003a 	cmpeq	r2,r17,zero
  e56538:	1000661e 	bne	r2,zero,e566d4 <_dtoa_r+0x588>
  e5653c:	d9000d17 	ldw	r4,52(sp)
  e56540:	0102300e 	bge	zero,r4,e56e04 <_dtoa_r+0xcb8>
  e56544:	208003cc 	andi	r2,r4,15
  e56548:	100490fa 	slli	r2,r2,3
  e5654c:	2025d13a 	srai	r18,r4,4
  e56550:	00c039b4 	movhi	r3,230
  e56554:	18c51b04 	addi	r3,r3,5228
  e56558:	10c5883a 	add	r2,r2,r3
  e5655c:	90c0040c 	andi	r3,r18,16
  e56560:	14000017 	ldw	r16,0(r2)
  e56564:	14400117 	ldw	r17,4(r2)
  e56568:	18036a1e 	bne	r3,zero,e57314 <_dtoa_r+0x11c8>
  e5656c:	05800084 	movi	r22,2
  e56570:	90001026 	beq	r18,zero,e565b4 <_dtoa_r+0x468>
  e56574:	04c039b4 	movhi	r19,230
  e56578:	9cc54d04 	addi	r19,r19,5428
  e5657c:	9080004c 	andi	r2,r18,1
  e56580:	1005003a 	cmpeq	r2,r2,zero
  e56584:	1000081e 	bne	r2,zero,e565a8 <_dtoa_r+0x45c>
  e56588:	99800017 	ldw	r6,0(r19)
  e5658c:	99c00117 	ldw	r7,4(r19)
  e56590:	880b883a 	mov	r5,r17
  e56594:	8009883a 	mov	r4,r16
  e56598:	0e5bbd00 	call	e5bbd0 <__muldf3>
  e5659c:	1021883a 	mov	r16,r2
  e565a0:	b5800044 	addi	r22,r22,1
  e565a4:	1823883a 	mov	r17,r3
  e565a8:	9025d07a 	srai	r18,r18,1
  e565ac:	9cc00204 	addi	r19,r19,8
  e565b0:	903ff21e 	bne	r18,zero,e5657c <_dtoa_r+0x430>
  e565b4:	a80b883a 	mov	r5,r21
  e565b8:	a009883a 	mov	r4,r20
  e565bc:	880f883a 	mov	r7,r17
  e565c0:	800d883a 	mov	r6,r16
  e565c4:	0e530300 	call	e53030 <__divdf3>
  e565c8:	1029883a 	mov	r20,r2
  e565cc:	182b883a 	mov	r21,r3
  e565d0:	d8c00c17 	ldw	r3,48(sp)
  e565d4:	1805003a 	cmpeq	r2,r3,zero
  e565d8:	1000081e 	bne	r2,zero,e565fc <_dtoa_r+0x4b0>
  e565dc:	0005883a 	mov	r2,zero
  e565e0:	00cffc34 	movhi	r3,16368
  e565e4:	180f883a 	mov	r7,r3
  e565e8:	a009883a 	mov	r4,r20
  e565ec:	a80b883a 	mov	r5,r21
  e565f0:	100d883a 	mov	r6,r2
  e565f4:	0e5c12c0 	call	e5c12c <__ltdf2>
  e565f8:	1003fe16 	blt	r2,zero,e575f4 <_dtoa_r+0x14a8>
  e565fc:	b009883a 	mov	r4,r22
  e56600:	0e5c1b40 	call	e5c1b4 <__floatsidf>
  e56604:	180b883a 	mov	r5,r3
  e56608:	1009883a 	mov	r4,r2
  e5660c:	a00d883a 	mov	r6,r20
  e56610:	a80f883a 	mov	r7,r21
  e56614:	0e5bbd00 	call	e5bbd0 <__muldf3>
  e56618:	0011883a 	mov	r8,zero
  e5661c:	02500734 	movhi	r9,16412
  e56620:	1009883a 	mov	r4,r2
  e56624:	180b883a 	mov	r5,r3
  e56628:	480f883a 	mov	r7,r9
  e5662c:	400d883a 	mov	r6,r8
  e56630:	0e52fbc0 	call	e52fbc <__adddf3>
  e56634:	d9000f17 	ldw	r4,60(sp)
  e56638:	102d883a 	mov	r22,r2
  e5663c:	00bf3034 	movhi	r2,64704
  e56640:	18b9883a 	add	fp,r3,r2
  e56644:	e02f883a 	mov	r23,fp
  e56648:	20028f1e 	bne	r4,zero,e57088 <_dtoa_r+0xf3c>
  e5664c:	0005883a 	mov	r2,zero
  e56650:	00d00534 	movhi	r3,16404
  e56654:	a009883a 	mov	r4,r20
  e56658:	a80b883a 	mov	r5,r21
  e5665c:	180f883a 	mov	r7,r3
  e56660:	100d883a 	mov	r6,r2
  e56664:	0e52f3c0 	call	e52f3c <__subdf3>
  e56668:	1009883a 	mov	r4,r2
  e5666c:	e00f883a 	mov	r7,fp
  e56670:	180b883a 	mov	r5,r3
  e56674:	b00d883a 	mov	r6,r22
  e56678:	1025883a 	mov	r18,r2
  e5667c:	1827883a 	mov	r19,r3
  e56680:	0e5c01c0 	call	e5c01c <__gtdf2>
  e56684:	00834f16 	blt	zero,r2,e573c4 <_dtoa_r+0x1278>
  e56688:	e0e0003c 	xorhi	r3,fp,32768
  e5668c:	9009883a 	mov	r4,r18
  e56690:	980b883a 	mov	r5,r19
  e56694:	180f883a 	mov	r7,r3
  e56698:	b00d883a 	mov	r6,r22
  e5669c:	0e5c12c0 	call	e5c12c <__ltdf2>
  e566a0:	1000080e 	bge	r2,zero,e566c4 <_dtoa_r+0x578>
  e566a4:	0027883a 	mov	r19,zero
  e566a8:	0025883a 	mov	r18,zero
  e566ac:	d8802617 	ldw	r2,152(sp)
  e566b0:	df000517 	ldw	fp,20(sp)
  e566b4:	d8000615 	stw	zero,24(sp)
  e566b8:	0084303a 	nor	r2,zero,r2
  e566bc:	d8800d15 	stw	r2,52(sp)
  e566c0:	00019b06 	br	e56d30 <_dtoa_r+0xbe4>
  e566c4:	d9801217 	ldw	r6,72(sp)
  e566c8:	d8801317 	ldw	r2,76(sp)
  e566cc:	3029883a 	mov	r20,r6
  e566d0:	102b883a 	mov	r21,r2
  e566d4:	d8c00217 	ldw	r3,8(sp)
  e566d8:	18008516 	blt	r3,zero,e568f0 <_dtoa_r+0x7a4>
  e566dc:	d9000d17 	ldw	r4,52(sp)
  e566e0:	00800384 	movi	r2,14
  e566e4:	11008216 	blt	r2,r4,e568f0 <_dtoa_r+0x7a4>
  e566e8:	200490fa 	slli	r2,r4,3
  e566ec:	d9802617 	ldw	r6,152(sp)
  e566f0:	00c039b4 	movhi	r3,230
  e566f4:	18c51b04 	addi	r3,r3,5228
  e566f8:	10c5883a 	add	r2,r2,r3
  e566fc:	14800017 	ldw	r18,0(r2)
  e56700:	14c00117 	ldw	r19,4(r2)
  e56704:	30031e16 	blt	r6,zero,e57380 <_dtoa_r+0x1234>
  e56708:	d9000517 	ldw	r4,20(sp)
  e5670c:	d8c00f17 	ldw	r3,60(sp)
  e56710:	a823883a 	mov	r17,r21
  e56714:	a021883a 	mov	r16,r20
  e56718:	192b883a 	add	r21,r3,r4
  e5671c:	2039883a 	mov	fp,r4
  e56720:	00000f06 	br	e56760 <_dtoa_r+0x614>
  e56724:	0005883a 	mov	r2,zero
  e56728:	00d00934 	movhi	r3,16420
  e5672c:	5009883a 	mov	r4,r10
  e56730:	580b883a 	mov	r5,r11
  e56734:	180f883a 	mov	r7,r3
  e56738:	100d883a 	mov	r6,r2
  e5673c:	0e5bbd00 	call	e5bbd0 <__muldf3>
  e56740:	180b883a 	mov	r5,r3
  e56744:	000d883a 	mov	r6,zero
  e56748:	000f883a 	mov	r7,zero
  e5674c:	1009883a 	mov	r4,r2
  e56750:	1021883a 	mov	r16,r2
  e56754:	1823883a 	mov	r17,r3
  e56758:	0e532880 	call	e53288 <__nedf2>
  e5675c:	10004526 	beq	r2,zero,e56874 <_dtoa_r+0x728>
  e56760:	900d883a 	mov	r6,r18
  e56764:	980f883a 	mov	r7,r19
  e56768:	8009883a 	mov	r4,r16
  e5676c:	880b883a 	mov	r5,r17
  e56770:	0e530300 	call	e53030 <__divdf3>
  e56774:	180b883a 	mov	r5,r3
  e56778:	1009883a 	mov	r4,r2
  e5677c:	0e5c2ac0 	call	e5c2ac <__fixdfsi>
  e56780:	1009883a 	mov	r4,r2
  e56784:	1029883a 	mov	r20,r2
  e56788:	0e5c1b40 	call	e5c1b4 <__floatsidf>
  e5678c:	180f883a 	mov	r7,r3
  e56790:	9009883a 	mov	r4,r18
  e56794:	980b883a 	mov	r5,r19
  e56798:	100d883a 	mov	r6,r2
  e5679c:	0e5bbd00 	call	e5bbd0 <__muldf3>
  e567a0:	180f883a 	mov	r7,r3
  e567a4:	880b883a 	mov	r5,r17
  e567a8:	8009883a 	mov	r4,r16
  e567ac:	100d883a 	mov	r6,r2
  e567b0:	0e52f3c0 	call	e52f3c <__subdf3>
  e567b4:	1015883a 	mov	r10,r2
  e567b8:	a0800c04 	addi	r2,r20,48
  e567bc:	e0800005 	stb	r2,0(fp)
  e567c0:	e7000044 	addi	fp,fp,1
  e567c4:	1817883a 	mov	r11,r3
  e567c8:	e57fd61e 	bne	fp,r21,e56724 <_dtoa_r+0x5d8>
  e567cc:	500d883a 	mov	r6,r10
  e567d0:	180f883a 	mov	r7,r3
  e567d4:	5009883a 	mov	r4,r10
  e567d8:	180b883a 	mov	r5,r3
  e567dc:	0e52fbc0 	call	e52fbc <__adddf3>
  e567e0:	100d883a 	mov	r6,r2
  e567e4:	9009883a 	mov	r4,r18
  e567e8:	980b883a 	mov	r5,r19
  e567ec:	180f883a 	mov	r7,r3
  e567f0:	1021883a 	mov	r16,r2
  e567f4:	1823883a 	mov	r17,r3
  e567f8:	0e5c12c0 	call	e5c12c <__ltdf2>
  e567fc:	10000816 	blt	r2,zero,e56820 <_dtoa_r+0x6d4>
  e56800:	980b883a 	mov	r5,r19
  e56804:	800d883a 	mov	r6,r16
  e56808:	880f883a 	mov	r7,r17
  e5680c:	9009883a 	mov	r4,r18
  e56810:	0e5bf940 	call	e5bf94 <__eqdf2>
  e56814:	1000171e 	bne	r2,zero,e56874 <_dtoa_r+0x728>
  e56818:	a080004c 	andi	r2,r20,1
  e5681c:	10001526 	beq	r2,zero,e56874 <_dtoa_r+0x728>
  e56820:	d8800d17 	ldw	r2,52(sp)
  e56824:	d8800415 	stw	r2,16(sp)
  e56828:	e009883a 	mov	r4,fp
  e5682c:	213fffc4 	addi	r4,r4,-1
  e56830:	20c00007 	ldb	r3,0(r4)
  e56834:	00800e44 	movi	r2,57
  e56838:	1880081e 	bne	r3,r2,e5685c <_dtoa_r+0x710>
  e5683c:	d8800517 	ldw	r2,20(sp)
  e56840:	113ffa1e 	bne	r2,r4,e5682c <_dtoa_r+0x6e0>
  e56844:	d8c00417 	ldw	r3,16(sp)
  e56848:	d9800517 	ldw	r6,20(sp)
  e5684c:	00800c04 	movi	r2,48
  e56850:	18c00044 	addi	r3,r3,1
  e56854:	d8c00415 	stw	r3,16(sp)
  e56858:	30800005 	stb	r2,0(r6)
  e5685c:	20800003 	ldbu	r2,0(r4)
  e56860:	d8c00417 	ldw	r3,16(sp)
  e56864:	27000044 	addi	fp,r4,1
  e56868:	10800044 	addi	r2,r2,1
  e5686c:	d8c00d15 	stw	r3,52(sp)
  e56870:	20800005 	stb	r2,0(r4)
  e56874:	d9001617 	ldw	r4,88(sp)
  e56878:	d9400717 	ldw	r5,28(sp)
  e5687c:	0e592e00 	call	e592e0 <_Bfree>
  e56880:	e0000005 	stb	zero,0(fp)
  e56884:	d9800d17 	ldw	r6,52(sp)
  e56888:	d8c02717 	ldw	r3,156(sp)
  e5688c:	d9002917 	ldw	r4,164(sp)
  e56890:	30800044 	addi	r2,r6,1
  e56894:	18800015 	stw	r2,0(r3)
  e56898:	20029c26 	beq	r4,zero,e5730c <_dtoa_r+0x11c0>
  e5689c:	d8c00517 	ldw	r3,20(sp)
  e568a0:	27000015 	stw	fp,0(r4)
  e568a4:	003e5d06 	br	e5621c <_dtoa_r+0xd0>
  e568a8:	d9800d17 	ldw	r6,52(sp)
  e568ac:	00c039b4 	movhi	r3,230
  e568b0:	18c51b04 	addi	r3,r3,5228
  e568b4:	d9001217 	ldw	r4,72(sp)
  e568b8:	300490fa 	slli	r2,r6,3
  e568bc:	d9401317 	ldw	r5,76(sp)
  e568c0:	10c5883a 	add	r2,r2,r3
  e568c4:	12000017 	ldw	r8,0(r2)
  e568c8:	12400117 	ldw	r9,4(r2)
  e568cc:	400d883a 	mov	r6,r8
  e568d0:	480f883a 	mov	r7,r9
  e568d4:	0e5c12c0 	call	e5c12c <__ltdf2>
  e568d8:	1000030e 	bge	r2,zero,e568e8 <_dtoa_r+0x79c>
  e568dc:	d8800d17 	ldw	r2,52(sp)
  e568e0:	10bfffc4 	addi	r2,r2,-1
  e568e4:	d8800d15 	stw	r2,52(sp)
  e568e8:	d8000c15 	stw	zero,48(sp)
  e568ec:	003ea806 	br	e56390 <_dtoa_r+0x244>
  e568f0:	d9000b17 	ldw	r4,44(sp)
  e568f4:	202cc03a 	cmpne	r22,r4,zero
  e568f8:	b000c71e 	bne	r22,zero,e56c18 <_dtoa_r+0xacc>
  e568fc:	dc001117 	ldw	r16,68(sp)
  e56900:	dc801017 	ldw	r18,64(sp)
  e56904:	0027883a 	mov	r19,zero
  e56908:	04000b0e 	bge	zero,r16,e56938 <_dtoa_r+0x7ec>
  e5690c:	d8c00a17 	ldw	r3,40(sp)
  e56910:	00c0090e 	bge	zero,r3,e56938 <_dtoa_r+0x7ec>
  e56914:	8005883a 	mov	r2,r16
  e56918:	1c011316 	blt	r3,r16,e56d68 <_dtoa_r+0xc1c>
  e5691c:	d9000a17 	ldw	r4,40(sp)
  e56920:	d9801117 	ldw	r6,68(sp)
  e56924:	80a1c83a 	sub	r16,r16,r2
  e56928:	2089c83a 	sub	r4,r4,r2
  e5692c:	308dc83a 	sub	r6,r6,r2
  e56930:	d9000a15 	stw	r4,40(sp)
  e56934:	d9801115 	stw	r6,68(sp)
  e56938:	d8801017 	ldw	r2,64(sp)
  e5693c:	0080150e 	bge	zero,r2,e56994 <_dtoa_r+0x848>
  e56940:	d8c00b17 	ldw	r3,44(sp)
  e56944:	1805003a 	cmpeq	r2,r3,zero
  e56948:	1001c91e 	bne	r2,zero,e57070 <_dtoa_r+0xf24>
  e5694c:	04800e0e 	bge	zero,r18,e56988 <_dtoa_r+0x83c>
  e56950:	d9001617 	ldw	r4,88(sp)
  e56954:	980b883a 	mov	r5,r19
  e56958:	900d883a 	mov	r6,r18
  e5695c:	0e5a0940 	call	e5a094 <__pow5mult>
  e56960:	d9001617 	ldw	r4,88(sp)
  e56964:	d9800717 	ldw	r6,28(sp)
  e56968:	100b883a 	mov	r5,r2
  e5696c:	1027883a 	mov	r19,r2
  e56970:	0e59d700 	call	e59d70 <__multiply>
  e56974:	d9001617 	ldw	r4,88(sp)
  e56978:	d9400717 	ldw	r5,28(sp)
  e5697c:	1023883a 	mov	r17,r2
  e56980:	0e592e00 	call	e592e0 <_Bfree>
  e56984:	dc400715 	stw	r17,28(sp)
  e56988:	d9001017 	ldw	r4,64(sp)
  e5698c:	248dc83a 	sub	r6,r4,r18
  e56990:	30010e1e 	bne	r6,zero,e56dcc <_dtoa_r+0xc80>
  e56994:	d9001617 	ldw	r4,88(sp)
  e56998:	04400044 	movi	r17,1
  e5699c:	880b883a 	mov	r5,r17
  e569a0:	0e59f580 	call	e59f58 <__i2b>
  e569a4:	d9800917 	ldw	r6,36(sp)
  e569a8:	1025883a 	mov	r18,r2
  e569ac:	0180040e 	bge	zero,r6,e569c0 <_dtoa_r+0x874>
  e569b0:	d9001617 	ldw	r4,88(sp)
  e569b4:	100b883a 	mov	r5,r2
  e569b8:	0e5a0940 	call	e5a094 <__pow5mult>
  e569bc:	1025883a 	mov	r18,r2
  e569c0:	d8801717 	ldw	r2,92(sp)
  e569c4:	8880f30e 	bge	r17,r2,e56d94 <_dtoa_r+0xc48>
  e569c8:	0023883a 	mov	r17,zero
  e569cc:	d9800917 	ldw	r6,36(sp)
  e569d0:	30019e1e 	bne	r6,zero,e5704c <_dtoa_r+0xf00>
  e569d4:	00c00044 	movi	r3,1
  e569d8:	d9000a17 	ldw	r4,40(sp)
  e569dc:	20c5883a 	add	r2,r4,r3
  e569e0:	10c007cc 	andi	r3,r2,31
  e569e4:	1800841e 	bne	r3,zero,e56bf8 <_dtoa_r+0xaac>
  e569e8:	00800704 	movi	r2,28
  e569ec:	d9000a17 	ldw	r4,40(sp)
  e569f0:	d9801117 	ldw	r6,68(sp)
  e569f4:	80a1883a 	add	r16,r16,r2
  e569f8:	2089883a 	add	r4,r4,r2
  e569fc:	308d883a 	add	r6,r6,r2
  e56a00:	d9000a15 	stw	r4,40(sp)
  e56a04:	d9801115 	stw	r6,68(sp)
  e56a08:	d8801117 	ldw	r2,68(sp)
  e56a0c:	0080050e 	bge	zero,r2,e56a24 <_dtoa_r+0x8d8>
  e56a10:	d9400717 	ldw	r5,28(sp)
  e56a14:	d9001617 	ldw	r4,88(sp)
  e56a18:	100d883a 	mov	r6,r2
  e56a1c:	0e59c240 	call	e59c24 <__lshift>
  e56a20:	d8800715 	stw	r2,28(sp)
  e56a24:	d8c00a17 	ldw	r3,40(sp)
  e56a28:	00c0050e 	bge	zero,r3,e56a40 <_dtoa_r+0x8f4>
  e56a2c:	d9001617 	ldw	r4,88(sp)
  e56a30:	900b883a 	mov	r5,r18
  e56a34:	180d883a 	mov	r6,r3
  e56a38:	0e59c240 	call	e59c24 <__lshift>
  e56a3c:	1025883a 	mov	r18,r2
  e56a40:	d9000c17 	ldw	r4,48(sp)
  e56a44:	2005003a 	cmpeq	r2,r4,zero
  e56a48:	10016f26 	beq	r2,zero,e57008 <_dtoa_r+0xebc>
  e56a4c:	d9000f17 	ldw	r4,60(sp)
  e56a50:	0102170e 	bge	zero,r4,e572b0 <_dtoa_r+0x1164>
  e56a54:	d9800b17 	ldw	r6,44(sp)
  e56a58:	3005003a 	cmpeq	r2,r6,zero
  e56a5c:	1000881e 	bne	r2,zero,e56c80 <_dtoa_r+0xb34>
  e56a60:	0400050e 	bge	zero,r16,e56a78 <_dtoa_r+0x92c>
  e56a64:	d9001617 	ldw	r4,88(sp)
  e56a68:	980b883a 	mov	r5,r19
  e56a6c:	800d883a 	mov	r6,r16
  e56a70:	0e59c240 	call	e59c24 <__lshift>
  e56a74:	1027883a 	mov	r19,r2
  e56a78:	8804c03a 	cmpne	r2,r17,zero
  e56a7c:	1002541e 	bne	r2,zero,e573d0 <_dtoa_r+0x1284>
  e56a80:	980b883a 	mov	r5,r19
  e56a84:	dd800517 	ldw	r22,20(sp)
  e56a88:	dcc00615 	stw	r19,24(sp)
  e56a8c:	a700004c 	andi	fp,r20,1
  e56a90:	2827883a 	mov	r19,r5
  e56a94:	d9000717 	ldw	r4,28(sp)
  e56a98:	900b883a 	mov	r5,r18
  e56a9c:	0e55f340 	call	e55f34 <quorem>
  e56aa0:	d9000717 	ldw	r4,28(sp)
  e56aa4:	d9400617 	ldw	r5,24(sp)
  e56aa8:	1023883a 	mov	r17,r2
  e56aac:	8dc00c04 	addi	r23,r17,48
  e56ab0:	0e5943c0 	call	e5943c <__mcmp>
  e56ab4:	d9001617 	ldw	r4,88(sp)
  e56ab8:	900b883a 	mov	r5,r18
  e56abc:	980d883a 	mov	r6,r19
  e56ac0:	1029883a 	mov	r20,r2
  e56ac4:	0e59a980 	call	e59a98 <__mdiff>
  e56ac8:	102b883a 	mov	r21,r2
  e56acc:	10800317 	ldw	r2,12(r2)
  e56ad0:	1001281e 	bne	r2,zero,e56f74 <_dtoa_r+0xe28>
  e56ad4:	d9000717 	ldw	r4,28(sp)
  e56ad8:	a80b883a 	mov	r5,r21
  e56adc:	0e5943c0 	call	e5943c <__mcmp>
  e56ae0:	d9001617 	ldw	r4,88(sp)
  e56ae4:	1021883a 	mov	r16,r2
  e56ae8:	a80b883a 	mov	r5,r21
  e56aec:	0e592e00 	call	e592e0 <_Bfree>
  e56af0:	8000041e 	bne	r16,zero,e56b04 <_dtoa_r+0x9b8>
  e56af4:	d8801717 	ldw	r2,92(sp)
  e56af8:	1000021e 	bne	r2,zero,e56b04 <_dtoa_r+0x9b8>
  e56afc:	e004c03a 	cmpne	r2,fp,zero
  e56b00:	10011726 	beq	r2,zero,e56f60 <_dtoa_r+0xe14>
  e56b04:	a0010616 	blt	r20,zero,e56f20 <_dtoa_r+0xdd4>
  e56b08:	a000041e 	bne	r20,zero,e56b1c <_dtoa_r+0x9d0>
  e56b0c:	d8c01717 	ldw	r3,92(sp)
  e56b10:	1800021e 	bne	r3,zero,e56b1c <_dtoa_r+0x9d0>
  e56b14:	e004c03a 	cmpne	r2,fp,zero
  e56b18:	10010126 	beq	r2,zero,e56f20 <_dtoa_r+0xdd4>
  e56b1c:	04023d16 	blt	zero,r16,e57414 <_dtoa_r+0x12c8>
  e56b20:	b5c00005 	stb	r23,0(r22)
  e56b24:	d9800517 	ldw	r6,20(sp)
  e56b28:	d9000f17 	ldw	r4,60(sp)
  e56b2c:	b5800044 	addi	r22,r22,1
  e56b30:	3105883a 	add	r2,r6,r4
  e56b34:	b0806526 	beq	r22,r2,e56ccc <_dtoa_r+0xb80>
  e56b38:	d9400717 	ldw	r5,28(sp)
  e56b3c:	d9001617 	ldw	r4,88(sp)
  e56b40:	01800284 	movi	r6,10
  e56b44:	000f883a 	mov	r7,zero
  e56b48:	0e59f940 	call	e59f94 <__multadd>
  e56b4c:	d8800715 	stw	r2,28(sp)
  e56b50:	d8800617 	ldw	r2,24(sp)
  e56b54:	14c10c26 	beq	r2,r19,e56f88 <_dtoa_r+0xe3c>
  e56b58:	d9400617 	ldw	r5,24(sp)
  e56b5c:	d9001617 	ldw	r4,88(sp)
  e56b60:	01800284 	movi	r6,10
  e56b64:	000f883a 	mov	r7,zero
  e56b68:	0e59f940 	call	e59f94 <__multadd>
  e56b6c:	d9001617 	ldw	r4,88(sp)
  e56b70:	980b883a 	mov	r5,r19
  e56b74:	01800284 	movi	r6,10
  e56b78:	000f883a 	mov	r7,zero
  e56b7c:	d8800615 	stw	r2,24(sp)
  e56b80:	0e59f940 	call	e59f94 <__multadd>
  e56b84:	1027883a 	mov	r19,r2
  e56b88:	003fc206 	br	e56a94 <_dtoa_r+0x948>
  e56b8c:	2445c83a 	sub	r2,r4,r17
  e56b90:	a088983a 	sll	r4,r20,r2
  e56b94:	003e4b06 	br	e564c4 <_dtoa_r+0x378>
  e56b98:	01bfffc4 	movi	r6,-1
  e56b9c:	00800044 	movi	r2,1
  e56ba0:	d9800e15 	stw	r6,56(sp)
  e56ba4:	d9800f15 	stw	r6,60(sp)
  e56ba8:	d8800b15 	stw	r2,44(sp)
  e56bac:	d8c01617 	ldw	r3,88(sp)
  e56bb0:	008005c4 	movi	r2,23
  e56bb4:	18001115 	stw	zero,68(r3)
  e56bb8:	1580082e 	bgeu	r2,r22,e56bdc <_dtoa_r+0xa90>
  e56bbc:	00c00104 	movi	r3,4
  e56bc0:	0009883a 	mov	r4,zero
  e56bc4:	18c7883a 	add	r3,r3,r3
  e56bc8:	18800504 	addi	r2,r3,20
  e56bcc:	21000044 	addi	r4,r4,1
  e56bd0:	b0bffc2e 	bgeu	r22,r2,e56bc4 <_dtoa_r+0xa78>
  e56bd4:	d9801617 	ldw	r6,88(sp)
  e56bd8:	31001115 	stw	r4,68(r6)
  e56bdc:	dc000f17 	ldw	r16,60(sp)
  e56be0:	003e4b06 	br	e56510 <_dtoa_r+0x3c4>
  e56be4:	d9801717 	ldw	r6,92(sp)
  e56be8:	0023883a 	mov	r17,zero
  e56bec:	31bfff04 	addi	r6,r6,-4
  e56bf0:	d9801715 	stw	r6,92(sp)
  e56bf4:	003df806 	br	e563d8 <_dtoa_r+0x28c>
  e56bf8:	00800804 	movi	r2,32
  e56bfc:	10c9c83a 	sub	r4,r2,r3
  e56c00:	00c00104 	movi	r3,4
  e56c04:	19005a16 	blt	r3,r4,e56d70 <_dtoa_r+0xc24>
  e56c08:	008000c4 	movi	r2,3
  e56c0c:	113f7e16 	blt	r2,r4,e56a08 <_dtoa_r+0x8bc>
  e56c10:	20800704 	addi	r2,r4,28
  e56c14:	003f7506 	br	e569ec <_dtoa_r+0x8a0>
  e56c18:	d9801717 	ldw	r6,92(sp)
  e56c1c:	00800044 	movi	r2,1
  e56c20:	1180a10e 	bge	r2,r6,e56ea8 <_dtoa_r+0xd5c>
  e56c24:	d9800f17 	ldw	r6,60(sp)
  e56c28:	d8c01017 	ldw	r3,64(sp)
  e56c2c:	30bfffc4 	addi	r2,r6,-1
  e56c30:	1881c616 	blt	r3,r2,e5734c <_dtoa_r+0x1200>
  e56c34:	18a5c83a 	sub	r18,r3,r2
  e56c38:	d8800f17 	ldw	r2,60(sp)
  e56c3c:	10026216 	blt	r2,zero,e575c8 <_dtoa_r+0x147c>
  e56c40:	dc001117 	ldw	r16,68(sp)
  e56c44:	1007883a 	mov	r3,r2
  e56c48:	d9800a17 	ldw	r6,40(sp)
  e56c4c:	d8801117 	ldw	r2,68(sp)
  e56c50:	d9001617 	ldw	r4,88(sp)
  e56c54:	30cd883a 	add	r6,r6,r3
  e56c58:	10c5883a 	add	r2,r2,r3
  e56c5c:	01400044 	movi	r5,1
  e56c60:	d9800a15 	stw	r6,40(sp)
  e56c64:	d8801115 	stw	r2,68(sp)
  e56c68:	0e59f580 	call	e59f58 <__i2b>
  e56c6c:	1027883a 	mov	r19,r2
  e56c70:	003f2506 	br	e56908 <_dtoa_r+0x7bc>
  e56c74:	00c039b4 	movhi	r3,230
  e56c78:	18c48704 	addi	r3,r3,4636
  e56c7c:	003d6706 	br	e5621c <_dtoa_r+0xd0>
  e56c80:	dd800517 	ldw	r22,20(sp)
  e56c84:	04000044 	movi	r16,1
  e56c88:	00000706 	br	e56ca8 <_dtoa_r+0xb5c>
  e56c8c:	d9400717 	ldw	r5,28(sp)
  e56c90:	d9001617 	ldw	r4,88(sp)
  e56c94:	01800284 	movi	r6,10
  e56c98:	000f883a 	mov	r7,zero
  e56c9c:	0e59f940 	call	e59f94 <__multadd>
  e56ca0:	d8800715 	stw	r2,28(sp)
  e56ca4:	84000044 	addi	r16,r16,1
  e56ca8:	d9000717 	ldw	r4,28(sp)
  e56cac:	900b883a 	mov	r5,r18
  e56cb0:	0e55f340 	call	e55f34 <quorem>
  e56cb4:	15c00c04 	addi	r23,r2,48
  e56cb8:	b5c00005 	stb	r23,0(r22)
  e56cbc:	d8c00f17 	ldw	r3,60(sp)
  e56cc0:	b5800044 	addi	r22,r22,1
  e56cc4:	80fff116 	blt	r16,r3,e56c8c <_dtoa_r+0xb40>
  e56cc8:	d8000615 	stw	zero,24(sp)
  e56ccc:	d9400717 	ldw	r5,28(sp)
  e56cd0:	d9001617 	ldw	r4,88(sp)
  e56cd4:	01800044 	movi	r6,1
  e56cd8:	0e59c240 	call	e59c24 <__lshift>
  e56cdc:	1009883a 	mov	r4,r2
  e56ce0:	900b883a 	mov	r5,r18
  e56ce4:	d8800715 	stw	r2,28(sp)
  e56ce8:	0e5943c0 	call	e5943c <__mcmp>
  e56cec:	00803c0e 	bge	zero,r2,e56de0 <_dtoa_r+0xc94>
  e56cf0:	b009883a 	mov	r4,r22
  e56cf4:	213fffc4 	addi	r4,r4,-1
  e56cf8:	21400003 	ldbu	r5,0(r4)
  e56cfc:	00800e44 	movi	r2,57
  e56d00:	28c03fcc 	andi	r3,r5,255
  e56d04:	18c0201c 	xori	r3,r3,128
  e56d08:	18ffe004 	addi	r3,r3,-128
  e56d0c:	1881981e 	bne	r3,r2,e57370 <_dtoa_r+0x1224>
  e56d10:	d9800517 	ldw	r6,20(sp)
  e56d14:	21bff71e 	bne	r4,r6,e56cf4 <_dtoa_r+0xba8>
  e56d18:	d8800d17 	ldw	r2,52(sp)
  e56d1c:	37000044 	addi	fp,r6,1
  e56d20:	10800044 	addi	r2,r2,1
  e56d24:	d8800d15 	stw	r2,52(sp)
  e56d28:	00800c44 	movi	r2,49
  e56d2c:	30800005 	stb	r2,0(r6)
  e56d30:	d9001617 	ldw	r4,88(sp)
  e56d34:	900b883a 	mov	r5,r18
  e56d38:	0e592e00 	call	e592e0 <_Bfree>
  e56d3c:	983ecd26 	beq	r19,zero,e56874 <_dtoa_r+0x728>
  e56d40:	d8c00617 	ldw	r3,24(sp)
  e56d44:	18000426 	beq	r3,zero,e56d58 <_dtoa_r+0xc0c>
  e56d48:	1cc00326 	beq	r3,r19,e56d58 <_dtoa_r+0xc0c>
  e56d4c:	d9001617 	ldw	r4,88(sp)
  e56d50:	180b883a 	mov	r5,r3
  e56d54:	0e592e00 	call	e592e0 <_Bfree>
  e56d58:	d9001617 	ldw	r4,88(sp)
  e56d5c:	980b883a 	mov	r5,r19
  e56d60:	0e592e00 	call	e592e0 <_Bfree>
  e56d64:	003ec306 	br	e56874 <_dtoa_r+0x728>
  e56d68:	1805883a 	mov	r2,r3
  e56d6c:	003eeb06 	br	e5691c <_dtoa_r+0x7d0>
  e56d70:	d9800a17 	ldw	r6,40(sp)
  e56d74:	d8c01117 	ldw	r3,68(sp)
  e56d78:	20bfff04 	addi	r2,r4,-4
  e56d7c:	308d883a 	add	r6,r6,r2
  e56d80:	1887883a 	add	r3,r3,r2
  e56d84:	80a1883a 	add	r16,r16,r2
  e56d88:	d9800a15 	stw	r6,40(sp)
  e56d8c:	d8c01115 	stw	r3,68(sp)
  e56d90:	003f1d06 	br	e56a08 <_dtoa_r+0x8bc>
  e56d94:	a03f0c1e 	bne	r20,zero,e569c8 <_dtoa_r+0x87c>
  e56d98:	00800434 	movhi	r2,16
  e56d9c:	10bfffc4 	addi	r2,r2,-1
  e56da0:	a884703a 	and	r2,r21,r2
  e56da4:	103f081e 	bne	r2,zero,e569c8 <_dtoa_r+0x87c>
  e56da8:	a89ffc2c 	andhi	r2,r21,32752
  e56dac:	103f0626 	beq	r2,zero,e569c8 <_dtoa_r+0x87c>
  e56db0:	d8c01117 	ldw	r3,68(sp)
  e56db4:	d9000a17 	ldw	r4,40(sp)
  e56db8:	18c00044 	addi	r3,r3,1
  e56dbc:	21000044 	addi	r4,r4,1
  e56dc0:	d8c01115 	stw	r3,68(sp)
  e56dc4:	d9000a15 	stw	r4,40(sp)
  e56dc8:	003f0006 	br	e569cc <_dtoa_r+0x880>
  e56dcc:	d9400717 	ldw	r5,28(sp)
  e56dd0:	d9001617 	ldw	r4,88(sp)
  e56dd4:	0e5a0940 	call	e5a094 <__pow5mult>
  e56dd8:	d8800715 	stw	r2,28(sp)
  e56ddc:	003eed06 	br	e56994 <_dtoa_r+0x848>
  e56de0:	1000021e 	bne	r2,zero,e56dec <_dtoa_r+0xca0>
  e56de4:	b880004c 	andi	r2,r23,1
  e56de8:	103fc11e 	bne	r2,zero,e56cf0 <_dtoa_r+0xba4>
  e56dec:	b5bfffc4 	addi	r22,r22,-1
  e56df0:	b0c00007 	ldb	r3,0(r22)
  e56df4:	00800c04 	movi	r2,48
  e56df8:	18bffc26 	beq	r3,r2,e56dec <_dtoa_r+0xca0>
  e56dfc:	b7000044 	addi	fp,r22,1
  e56e00:	003fcb06 	br	e56d30 <_dtoa_r+0xbe4>
  e56e04:	d9800d17 	ldw	r6,52(sp)
  e56e08:	018fc83a 	sub	r7,zero,r6
  e56e0c:	3801f726 	beq	r7,zero,e575ec <_dtoa_r+0x14a0>
  e56e10:	398003cc 	andi	r6,r7,15
  e56e14:	300c90fa 	slli	r6,r6,3
  e56e18:	014039b4 	movhi	r5,230
  e56e1c:	29451b04 	addi	r5,r5,5228
  e56e20:	d9001217 	ldw	r4,72(sp)
  e56e24:	314d883a 	add	r6,r6,r5
  e56e28:	30c00117 	ldw	r3,4(r6)
  e56e2c:	30800017 	ldw	r2,0(r6)
  e56e30:	d9401317 	ldw	r5,76(sp)
  e56e34:	3821d13a 	srai	r16,r7,4
  e56e38:	100d883a 	mov	r6,r2
  e56e3c:	180f883a 	mov	r7,r3
  e56e40:	0e5bbd00 	call	e5bbd0 <__muldf3>
  e56e44:	1011883a 	mov	r8,r2
  e56e48:	1813883a 	mov	r9,r3
  e56e4c:	1029883a 	mov	r20,r2
  e56e50:	182b883a 	mov	r21,r3
  e56e54:	8001e526 	beq	r16,zero,e575ec <_dtoa_r+0x14a0>
  e56e58:	05800084 	movi	r22,2
  e56e5c:	044039b4 	movhi	r17,230
  e56e60:	8c454d04 	addi	r17,r17,5428
  e56e64:	8080004c 	andi	r2,r16,1
  e56e68:	1005003a 	cmpeq	r2,r2,zero
  e56e6c:	1000081e 	bne	r2,zero,e56e90 <_dtoa_r+0xd44>
  e56e70:	89800017 	ldw	r6,0(r17)
  e56e74:	89c00117 	ldw	r7,4(r17)
  e56e78:	480b883a 	mov	r5,r9
  e56e7c:	4009883a 	mov	r4,r8
  e56e80:	0e5bbd00 	call	e5bbd0 <__muldf3>
  e56e84:	1011883a 	mov	r8,r2
  e56e88:	b5800044 	addi	r22,r22,1
  e56e8c:	1813883a 	mov	r9,r3
  e56e90:	8021d07a 	srai	r16,r16,1
  e56e94:	8c400204 	addi	r17,r17,8
  e56e98:	803ff21e 	bne	r16,zero,e56e64 <_dtoa_r+0xd18>
  e56e9c:	4029883a 	mov	r20,r8
  e56ea0:	482b883a 	mov	r21,r9
  e56ea4:	003dca06 	br	e565d0 <_dtoa_r+0x484>
  e56ea8:	d9000817 	ldw	r4,32(sp)
  e56eac:	2005003a 	cmpeq	r2,r4,zero
  e56eb0:	1001f61e 	bne	r2,zero,e5768c <_dtoa_r+0x1540>
  e56eb4:	dc001117 	ldw	r16,68(sp)
  e56eb8:	dc801017 	ldw	r18,64(sp)
  e56ebc:	18c10cc4 	addi	r3,r3,1075
  e56ec0:	003f6106 	br	e56c48 <_dtoa_r+0xafc>
  e56ec4:	d8000b15 	stw	zero,44(sp)
  e56ec8:	d9802617 	ldw	r6,152(sp)
  e56ecc:	d8c00d17 	ldw	r3,52(sp)
  e56ed0:	30800044 	addi	r2,r6,1
  e56ed4:	18ad883a 	add	r22,r3,r2
  e56ed8:	b13fffc4 	addi	r4,r22,-1
  e56edc:	d9000e15 	stw	r4,56(sp)
  e56ee0:	0581f60e 	bge	zero,r22,e576bc <_dtoa_r+0x1570>
  e56ee4:	dd800f15 	stw	r22,60(sp)
  e56ee8:	003f3006 	br	e56bac <_dtoa_r+0xa60>
  e56eec:	d8000b15 	stw	zero,44(sp)
  e56ef0:	d9002617 	ldw	r4,152(sp)
  e56ef4:	0101eb0e 	bge	zero,r4,e576a4 <_dtoa_r+0x1558>
  e56ef8:	202d883a 	mov	r22,r4
  e56efc:	d9000e15 	stw	r4,56(sp)
  e56f00:	d9000f15 	stw	r4,60(sp)
  e56f04:	003f2906 	br	e56bac <_dtoa_r+0xa60>
  e56f08:	01800044 	movi	r6,1
  e56f0c:	d9800b15 	stw	r6,44(sp)
  e56f10:	003ff706 	br	e56ef0 <_dtoa_r+0xda4>
  e56f14:	01000044 	movi	r4,1
  e56f18:	d9000b15 	stw	r4,44(sp)
  e56f1c:	003fea06 	br	e56ec8 <_dtoa_r+0xd7c>
  e56f20:	04000c0e 	bge	zero,r16,e56f54 <_dtoa_r+0xe08>
  e56f24:	d9400717 	ldw	r5,28(sp)
  e56f28:	d9001617 	ldw	r4,88(sp)
  e56f2c:	01800044 	movi	r6,1
  e56f30:	0e59c240 	call	e59c24 <__lshift>
  e56f34:	1009883a 	mov	r4,r2
  e56f38:	900b883a 	mov	r5,r18
  e56f3c:	d8800715 	stw	r2,28(sp)
  e56f40:	0e5943c0 	call	e5943c <__mcmp>
  e56f44:	0081e00e 	bge	zero,r2,e576c8 <_dtoa_r+0x157c>
  e56f48:	bdc00044 	addi	r23,r23,1
  e56f4c:	00800e84 	movi	r2,58
  e56f50:	b881a226 	beq	r23,r2,e575dc <_dtoa_r+0x1490>
  e56f54:	b7000044 	addi	fp,r22,1
  e56f58:	b5c00005 	stb	r23,0(r22)
  e56f5c:	003f7406 	br	e56d30 <_dtoa_r+0xbe4>
  e56f60:	00800e44 	movi	r2,57
  e56f64:	b8819d26 	beq	r23,r2,e575dc <_dtoa_r+0x1490>
  e56f68:	053ffa0e 	bge	zero,r20,e56f54 <_dtoa_r+0xe08>
  e56f6c:	8dc00c44 	addi	r23,r17,49
  e56f70:	003ff806 	br	e56f54 <_dtoa_r+0xe08>
  e56f74:	d9001617 	ldw	r4,88(sp)
  e56f78:	a80b883a 	mov	r5,r21
  e56f7c:	04000044 	movi	r16,1
  e56f80:	0e592e00 	call	e592e0 <_Bfree>
  e56f84:	003edf06 	br	e56b04 <_dtoa_r+0x9b8>
  e56f88:	d9001617 	ldw	r4,88(sp)
  e56f8c:	980b883a 	mov	r5,r19
  e56f90:	01800284 	movi	r6,10
  e56f94:	000f883a 	mov	r7,zero
  e56f98:	0e59f940 	call	e59f94 <__multadd>
  e56f9c:	1027883a 	mov	r19,r2
  e56fa0:	d8800615 	stw	r2,24(sp)
  e56fa4:	003ebb06 	br	e56a94 <_dtoa_r+0x948>
  e56fa8:	d9801117 	ldw	r6,68(sp)
  e56fac:	d8800d17 	ldw	r2,52(sp)
  e56fb0:	d8000915 	stw	zero,36(sp)
  e56fb4:	308dc83a 	sub	r6,r6,r2
  e56fb8:	0087c83a 	sub	r3,zero,r2
  e56fbc:	d9801115 	stw	r6,68(sp)
  e56fc0:	d8c01015 	stw	r3,64(sp)
  e56fc4:	003cfe06 	br	e563c0 <_dtoa_r+0x274>
  e56fc8:	018dc83a 	sub	r6,zero,r6
  e56fcc:	d9801115 	stw	r6,68(sp)
  e56fd0:	d8000a15 	stw	zero,40(sp)
  e56fd4:	003cf306 	br	e563a4 <_dtoa_r+0x258>
  e56fd8:	d9000d17 	ldw	r4,52(sp)
  e56fdc:	0e5c1b40 	call	e5c1b4 <__floatsidf>
  e56fe0:	880b883a 	mov	r5,r17
  e56fe4:	8009883a 	mov	r4,r16
  e56fe8:	180f883a 	mov	r7,r3
  e56fec:	100d883a 	mov	r6,r2
  e56ff0:	0e532880 	call	e53288 <__nedf2>
  e56ff4:	103ce126 	beq	r2,zero,e5637c <_dtoa_r+0x230>
  e56ff8:	d9800d17 	ldw	r6,52(sp)
  e56ffc:	31bfffc4 	addi	r6,r6,-1
  e57000:	d9800d15 	stw	r6,52(sp)
  e57004:	003cdd06 	br	e5637c <_dtoa_r+0x230>
  e57008:	d9000717 	ldw	r4,28(sp)
  e5700c:	900b883a 	mov	r5,r18
  e57010:	0e5943c0 	call	e5943c <__mcmp>
  e57014:	103e8d0e 	bge	r2,zero,e56a4c <_dtoa_r+0x900>
  e57018:	d9400717 	ldw	r5,28(sp)
  e5701c:	d9001617 	ldw	r4,88(sp)
  e57020:	01800284 	movi	r6,10
  e57024:	000f883a 	mov	r7,zero
  e57028:	0e59f940 	call	e59f94 <__multadd>
  e5702c:	d9800d17 	ldw	r6,52(sp)
  e57030:	d8800715 	stw	r2,28(sp)
  e57034:	31bfffc4 	addi	r6,r6,-1
  e57038:	d9800d15 	stw	r6,52(sp)
  e5703c:	b001a71e 	bne	r22,zero,e576dc <_dtoa_r+0x1590>
  e57040:	d8800e17 	ldw	r2,56(sp)
  e57044:	d8800f15 	stw	r2,60(sp)
  e57048:	003e8006 	br	e56a4c <_dtoa_r+0x900>
  e5704c:	90800417 	ldw	r2,16(r18)
  e57050:	1085883a 	add	r2,r2,r2
  e57054:	1085883a 	add	r2,r2,r2
  e57058:	1485883a 	add	r2,r2,r18
  e5705c:	11000417 	ldw	r4,16(r2)
  e57060:	0e593080 	call	e59308 <__hi0bits>
  e57064:	00c00804 	movi	r3,32
  e57068:	1887c83a 	sub	r3,r3,r2
  e5706c:	003e5a06 	br	e569d8 <_dtoa_r+0x88c>
  e57070:	d9400717 	ldw	r5,28(sp)
  e57074:	d9801017 	ldw	r6,64(sp)
  e57078:	d9001617 	ldw	r4,88(sp)
  e5707c:	0e5a0940 	call	e5a094 <__pow5mult>
  e57080:	d8800715 	stw	r2,28(sp)
  e57084:	003e4306 	br	e56994 <_dtoa_r+0x848>
  e57088:	d9800f17 	ldw	r6,60(sp)
  e5708c:	d8800d17 	ldw	r2,52(sp)
  e57090:	d9800315 	stw	r6,12(sp)
  e57094:	d8800415 	stw	r2,16(sp)
  e57098:	d8c00b17 	ldw	r3,44(sp)
  e5709c:	1805003a 	cmpeq	r2,r3,zero
  e570a0:	1000e21e 	bne	r2,zero,e5742c <_dtoa_r+0x12e0>
  e570a4:	d9000317 	ldw	r4,12(sp)
  e570a8:	0005883a 	mov	r2,zero
  e570ac:	00cff834 	movhi	r3,16352
  e570b0:	200c90fa 	slli	r6,r4,3
  e570b4:	010039b4 	movhi	r4,230
  e570b8:	21051b04 	addi	r4,r4,5228
  e570bc:	180b883a 	mov	r5,r3
  e570c0:	310d883a 	add	r6,r6,r4
  e570c4:	327fff17 	ldw	r9,-4(r6)
  e570c8:	323ffe17 	ldw	r8,-8(r6)
  e570cc:	1009883a 	mov	r4,r2
  e570d0:	480f883a 	mov	r7,r9
  e570d4:	400d883a 	mov	r6,r8
  e570d8:	0e530300 	call	e53030 <__divdf3>
  e570dc:	180b883a 	mov	r5,r3
  e570e0:	b00d883a 	mov	r6,r22
  e570e4:	b80f883a 	mov	r7,r23
  e570e8:	1009883a 	mov	r4,r2
  e570ec:	0e52f3c0 	call	e52f3c <__subdf3>
  e570f0:	a80b883a 	mov	r5,r21
  e570f4:	a009883a 	mov	r4,r20
  e570f8:	d8c01915 	stw	r3,100(sp)
  e570fc:	d8801815 	stw	r2,96(sp)
  e57100:	0e5c2ac0 	call	e5c2ac <__fixdfsi>
  e57104:	1009883a 	mov	r4,r2
  e57108:	1027883a 	mov	r19,r2
  e5710c:	0e5c1b40 	call	e5c1b4 <__floatsidf>
  e57110:	a80b883a 	mov	r5,r21
  e57114:	a009883a 	mov	r4,r20
  e57118:	180f883a 	mov	r7,r3
  e5711c:	100d883a 	mov	r6,r2
  e57120:	0e52f3c0 	call	e52f3c <__subdf3>
  e57124:	d9801817 	ldw	r6,96(sp)
  e57128:	1823883a 	mov	r17,r3
  e5712c:	d8801415 	stw	r2,80(sp)
  e57130:	302d883a 	mov	r22,r6
  e57134:	d9800517 	ldw	r6,20(sp)
  e57138:	9cc00c04 	addi	r19,r19,48
  e5713c:	dc401515 	stw	r17,84(sp)
  e57140:	d8c01917 	ldw	r3,100(sp)
  e57144:	34c00005 	stb	r19,0(r6)
  e57148:	d8800517 	ldw	r2,20(sp)
  e5714c:	d9401917 	ldw	r5,100(sp)
  e57150:	d9801417 	ldw	r6,80(sp)
  e57154:	b009883a 	mov	r4,r22
  e57158:	880f883a 	mov	r7,r17
  e5715c:	182f883a 	mov	r23,r3
  e57160:	17000044 	addi	fp,r2,1
  e57164:	0e5c01c0 	call	e5c01c <__gtdf2>
  e57168:	00804e16 	blt	zero,r2,e572a4 <_dtoa_r+0x1158>
  e5716c:	d9801417 	ldw	r6,80(sp)
  e57170:	0005883a 	mov	r2,zero
  e57174:	00cffc34 	movhi	r3,16368
  e57178:	180b883a 	mov	r5,r3
  e5717c:	880f883a 	mov	r7,r17
  e57180:	1009883a 	mov	r4,r2
  e57184:	0e52f3c0 	call	e52f3c <__subdf3>
  e57188:	d9401917 	ldw	r5,100(sp)
  e5718c:	180f883a 	mov	r7,r3
  e57190:	b009883a 	mov	r4,r22
  e57194:	100d883a 	mov	r6,r2
  e57198:	0e5c01c0 	call	e5c01c <__gtdf2>
  e5719c:	00bda216 	blt	zero,r2,e56828 <_dtoa_r+0x6dc>
  e571a0:	d8c00317 	ldw	r3,12(sp)
  e571a4:	00800044 	movi	r2,1
  e571a8:	10c01216 	blt	r2,r3,e571f4 <_dtoa_r+0x10a8>
  e571ac:	003d4506 	br	e566c4 <_dtoa_r+0x578>
  e571b0:	d9801417 	ldw	r6,80(sp)
  e571b4:	0005883a 	mov	r2,zero
  e571b8:	00cffc34 	movhi	r3,16368
  e571bc:	180b883a 	mov	r5,r3
  e571c0:	880f883a 	mov	r7,r17
  e571c4:	1009883a 	mov	r4,r2
  e571c8:	0e52f3c0 	call	e52f3c <__subdf3>
  e571cc:	d9c01b17 	ldw	r7,108(sp)
  e571d0:	180b883a 	mov	r5,r3
  e571d4:	1009883a 	mov	r4,r2
  e571d8:	b00d883a 	mov	r6,r22
  e571dc:	0e5c12c0 	call	e5c12c <__ltdf2>
  e571e0:	103d9116 	blt	r2,zero,e56828 <_dtoa_r+0x6dc>
  e571e4:	d9800517 	ldw	r6,20(sp)
  e571e8:	d9000317 	ldw	r4,12(sp)
  e571ec:	3105883a 	add	r2,r6,r4
  e571f0:	e0bd3426 	beq	fp,r2,e566c4 <_dtoa_r+0x578>
  e571f4:	04500934 	movhi	r17,16420
  e571f8:	0021883a 	mov	r16,zero
  e571fc:	b80b883a 	mov	r5,r23
  e57200:	b009883a 	mov	r4,r22
  e57204:	800d883a 	mov	r6,r16
  e57208:	880f883a 	mov	r7,r17
  e5720c:	0e5bbd00 	call	e5bbd0 <__muldf3>
  e57210:	d9401517 	ldw	r5,84(sp)
  e57214:	d9001417 	ldw	r4,80(sp)
  e57218:	880f883a 	mov	r7,r17
  e5721c:	000d883a 	mov	r6,zero
  e57220:	d8801a15 	stw	r2,104(sp)
  e57224:	d8c01b15 	stw	r3,108(sp)
  e57228:	0e5bbd00 	call	e5bbd0 <__muldf3>
  e5722c:	180b883a 	mov	r5,r3
  e57230:	1009883a 	mov	r4,r2
  e57234:	1823883a 	mov	r17,r3
  e57238:	1021883a 	mov	r16,r2
  e5723c:	0e5c2ac0 	call	e5c2ac <__fixdfsi>
  e57240:	1009883a 	mov	r4,r2
  e57244:	102b883a 	mov	r21,r2
  e57248:	0e5c1b40 	call	e5c1b4 <__floatsidf>
  e5724c:	880b883a 	mov	r5,r17
  e57250:	8009883a 	mov	r4,r16
  e57254:	180f883a 	mov	r7,r3
  e57258:	100d883a 	mov	r6,r2
  e5725c:	0e52f3c0 	call	e52f3c <__subdf3>
  e57260:	1021883a 	mov	r16,r2
  e57264:	d9001b17 	ldw	r4,108(sp)
  e57268:	1823883a 	mov	r17,r3
  e5726c:	dc001415 	stw	r16,80(sp)
  e57270:	ad400c04 	addi	r21,r21,48
  e57274:	dc401515 	stw	r17,84(sp)
  e57278:	d8801a17 	ldw	r2,104(sp)
  e5727c:	e5400005 	stb	r21,0(fp)
  e57280:	202f883a 	mov	r23,r4
  e57284:	d9c01b17 	ldw	r7,108(sp)
  e57288:	d9001417 	ldw	r4,80(sp)
  e5728c:	880b883a 	mov	r5,r17
  e57290:	100d883a 	mov	r6,r2
  e57294:	102d883a 	mov	r22,r2
  e57298:	e7000044 	addi	fp,fp,1
  e5729c:	0e5c12c0 	call	e5c12c <__ltdf2>
  e572a0:	103fc30e 	bge	r2,zero,e571b0 <_dtoa_r+0x1064>
  e572a4:	d9000417 	ldw	r4,16(sp)
  e572a8:	d9000d15 	stw	r4,52(sp)
  e572ac:	003d7106 	br	e56874 <_dtoa_r+0x728>
  e572b0:	d9801717 	ldw	r6,92(sp)
  e572b4:	00800084 	movi	r2,2
  e572b8:	11bde60e 	bge	r2,r6,e56a54 <_dtoa_r+0x908>
  e572bc:	203cfb1e 	bne	r4,zero,e566ac <_dtoa_r+0x560>
  e572c0:	d9001617 	ldw	r4,88(sp)
  e572c4:	900b883a 	mov	r5,r18
  e572c8:	01800144 	movi	r6,5
  e572cc:	000f883a 	mov	r7,zero
  e572d0:	0e59f940 	call	e59f94 <__multadd>
  e572d4:	d9000717 	ldw	r4,28(sp)
  e572d8:	100b883a 	mov	r5,r2
  e572dc:	1025883a 	mov	r18,r2
  e572e0:	0e5943c0 	call	e5943c <__mcmp>
  e572e4:	00bcf10e 	bge	zero,r2,e566ac <_dtoa_r+0x560>
  e572e8:	d8c00d17 	ldw	r3,52(sp)
  e572ec:	d9000517 	ldw	r4,20(sp)
  e572f0:	d8000615 	stw	zero,24(sp)
  e572f4:	18c00044 	addi	r3,r3,1
  e572f8:	d8c00d15 	stw	r3,52(sp)
  e572fc:	00800c44 	movi	r2,49
  e57300:	27000044 	addi	fp,r4,1
  e57304:	20800005 	stb	r2,0(r4)
  e57308:	003e8906 	br	e56d30 <_dtoa_r+0xbe4>
  e5730c:	d8c00517 	ldw	r3,20(sp)
  e57310:	003bc206 	br	e5621c <_dtoa_r+0xd0>
  e57314:	018039b4 	movhi	r6,230
  e57318:	31854d04 	addi	r6,r6,5428
  e5731c:	30c00917 	ldw	r3,36(r6)
  e57320:	30800817 	ldw	r2,32(r6)
  e57324:	d9001217 	ldw	r4,72(sp)
  e57328:	d9401317 	ldw	r5,76(sp)
  e5732c:	180f883a 	mov	r7,r3
  e57330:	100d883a 	mov	r6,r2
  e57334:	0e530300 	call	e53030 <__divdf3>
  e57338:	948003cc 	andi	r18,r18,15
  e5733c:	058000c4 	movi	r22,3
  e57340:	1029883a 	mov	r20,r2
  e57344:	182b883a 	mov	r21,r3
  e57348:	003c8906 	br	e56570 <_dtoa_r+0x424>
  e5734c:	d9001017 	ldw	r4,64(sp)
  e57350:	d9800917 	ldw	r6,36(sp)
  e57354:	0025883a 	mov	r18,zero
  e57358:	1105c83a 	sub	r2,r2,r4
  e5735c:	2089883a 	add	r4,r4,r2
  e57360:	308d883a 	add	r6,r6,r2
  e57364:	d9001015 	stw	r4,64(sp)
  e57368:	d9800915 	stw	r6,36(sp)
  e5736c:	003e3206 	br	e56c38 <_dtoa_r+0xaec>
  e57370:	28800044 	addi	r2,r5,1
  e57374:	27000044 	addi	fp,r4,1
  e57378:	20800005 	stb	r2,0(r4)
  e5737c:	003e6c06 	br	e56d30 <_dtoa_r+0xbe4>
  e57380:	d8800f17 	ldw	r2,60(sp)
  e57384:	00bce016 	blt	zero,r2,e56708 <_dtoa_r+0x5bc>
  e57388:	d9800f17 	ldw	r6,60(sp)
  e5738c:	303cc51e 	bne	r6,zero,e566a4 <_dtoa_r+0x558>
  e57390:	0005883a 	mov	r2,zero
  e57394:	00d00534 	movhi	r3,16404
  e57398:	980b883a 	mov	r5,r19
  e5739c:	180f883a 	mov	r7,r3
  e573a0:	9009883a 	mov	r4,r18
  e573a4:	100d883a 	mov	r6,r2
  e573a8:	0e5bbd00 	call	e5bbd0 <__muldf3>
  e573ac:	180b883a 	mov	r5,r3
  e573b0:	a80f883a 	mov	r7,r21
  e573b4:	1009883a 	mov	r4,r2
  e573b8:	a00d883a 	mov	r6,r20
  e573bc:	0e5c0a40 	call	e5c0a4 <__gedf2>
  e573c0:	103cb80e 	bge	r2,zero,e566a4 <_dtoa_r+0x558>
  e573c4:	0027883a 	mov	r19,zero
  e573c8:	0025883a 	mov	r18,zero
  e573cc:	003fc606 	br	e572e8 <_dtoa_r+0x119c>
  e573d0:	99400117 	ldw	r5,4(r19)
  e573d4:	d9001617 	ldw	r4,88(sp)
  e573d8:	0e598600 	call	e59860 <_Balloc>
  e573dc:	99800417 	ldw	r6,16(r19)
  e573e0:	11000304 	addi	r4,r2,12
  e573e4:	99400304 	addi	r5,r19,12
  e573e8:	318d883a 	add	r6,r6,r6
  e573ec:	318d883a 	add	r6,r6,r6
  e573f0:	31800204 	addi	r6,r6,8
  e573f4:	1023883a 	mov	r17,r2
  e573f8:	0e590c80 	call	e590c8 <memcpy>
  e573fc:	d9001617 	ldw	r4,88(sp)
  e57400:	880b883a 	mov	r5,r17
  e57404:	01800044 	movi	r6,1
  e57408:	0e59c240 	call	e59c24 <__lshift>
  e5740c:	100b883a 	mov	r5,r2
  e57410:	003d9c06 	br	e56a84 <_dtoa_r+0x938>
  e57414:	00800e44 	movi	r2,57
  e57418:	b8807026 	beq	r23,r2,e575dc <_dtoa_r+0x1490>
  e5741c:	b8800044 	addi	r2,r23,1
  e57420:	b7000044 	addi	fp,r22,1
  e57424:	b0800005 	stb	r2,0(r22)
  e57428:	003e4106 	br	e56d30 <_dtoa_r+0xbe4>
  e5742c:	d8800317 	ldw	r2,12(sp)
  e57430:	018039b4 	movhi	r6,230
  e57434:	31851b04 	addi	r6,r6,5228
  e57438:	b009883a 	mov	r4,r22
  e5743c:	100e90fa 	slli	r7,r2,3
  e57440:	b80b883a 	mov	r5,r23
  e57444:	398f883a 	add	r7,r7,r6
  e57448:	38bffe17 	ldw	r2,-8(r7)
  e5744c:	d9800517 	ldw	r6,20(sp)
  e57450:	38ffff17 	ldw	r3,-4(r7)
  e57454:	37000044 	addi	fp,r6,1
  e57458:	180f883a 	mov	r7,r3
  e5745c:	100d883a 	mov	r6,r2
  e57460:	0e5bbd00 	call	e5bbd0 <__muldf3>
  e57464:	a80b883a 	mov	r5,r21
  e57468:	a009883a 	mov	r4,r20
  e5746c:	182f883a 	mov	r23,r3
  e57470:	102d883a 	mov	r22,r2
  e57474:	0e5c2ac0 	call	e5c2ac <__fixdfsi>
  e57478:	1009883a 	mov	r4,r2
  e5747c:	1027883a 	mov	r19,r2
  e57480:	0e5c1b40 	call	e5c1b4 <__floatsidf>
  e57484:	a80b883a 	mov	r5,r21
  e57488:	a009883a 	mov	r4,r20
  e5748c:	180f883a 	mov	r7,r3
  e57490:	100d883a 	mov	r6,r2
  e57494:	0e52f3c0 	call	e52f3c <__subdf3>
  e57498:	180b883a 	mov	r5,r3
  e5749c:	d8c00517 	ldw	r3,20(sp)
  e574a0:	9cc00c04 	addi	r19,r19,48
  e574a4:	1009883a 	mov	r4,r2
  e574a8:	1cc00005 	stb	r19,0(r3)
  e574ac:	2021883a 	mov	r16,r4
  e574b0:	d9000317 	ldw	r4,12(sp)
  e574b4:	00800044 	movi	r2,1
  e574b8:	2823883a 	mov	r17,r5
  e574bc:	20802226 	beq	r4,r2,e57548 <_dtoa_r+0x13fc>
  e574c0:	1029883a 	mov	r20,r2
  e574c4:	0005883a 	mov	r2,zero
  e574c8:	00d00934 	movhi	r3,16420
  e574cc:	180f883a 	mov	r7,r3
  e574d0:	100d883a 	mov	r6,r2
  e574d4:	880b883a 	mov	r5,r17
  e574d8:	8009883a 	mov	r4,r16
  e574dc:	0e5bbd00 	call	e5bbd0 <__muldf3>
  e574e0:	180b883a 	mov	r5,r3
  e574e4:	1009883a 	mov	r4,r2
  e574e8:	1823883a 	mov	r17,r3
  e574ec:	1021883a 	mov	r16,r2
  e574f0:	0e5c2ac0 	call	e5c2ac <__fixdfsi>
  e574f4:	1009883a 	mov	r4,r2
  e574f8:	102b883a 	mov	r21,r2
  e574fc:	0e5c1b40 	call	e5c1b4 <__floatsidf>
  e57500:	880b883a 	mov	r5,r17
  e57504:	8009883a 	mov	r4,r16
  e57508:	180f883a 	mov	r7,r3
  e5750c:	100d883a 	mov	r6,r2
  e57510:	0e52f3c0 	call	e52f3c <__subdf3>
  e57514:	180b883a 	mov	r5,r3
  e57518:	d8c00517 	ldw	r3,20(sp)
  e5751c:	1009883a 	mov	r4,r2
  e57520:	ad400c04 	addi	r21,r21,48
  e57524:	1d05883a 	add	r2,r3,r20
  e57528:	15400005 	stb	r21,0(r2)
  e5752c:	2021883a 	mov	r16,r4
  e57530:	d9000317 	ldw	r4,12(sp)
  e57534:	a5000044 	addi	r20,r20,1
  e57538:	2823883a 	mov	r17,r5
  e5753c:	a13fe11e 	bne	r20,r4,e574c4 <_dtoa_r+0x1378>
  e57540:	e505883a 	add	r2,fp,r20
  e57544:	173fffc4 	addi	fp,r2,-1
  e57548:	0025883a 	mov	r18,zero
  e5754c:	04cff834 	movhi	r19,16352
  e57550:	b009883a 	mov	r4,r22
  e57554:	b80b883a 	mov	r5,r23
  e57558:	900d883a 	mov	r6,r18
  e5755c:	980f883a 	mov	r7,r19
  e57560:	0e52fbc0 	call	e52fbc <__adddf3>
  e57564:	180b883a 	mov	r5,r3
  e57568:	1009883a 	mov	r4,r2
  e5756c:	800d883a 	mov	r6,r16
  e57570:	880f883a 	mov	r7,r17
  e57574:	0e5c12c0 	call	e5c12c <__ltdf2>
  e57578:	103cab16 	blt	r2,zero,e56828 <_dtoa_r+0x6dc>
  e5757c:	0009883a 	mov	r4,zero
  e57580:	980b883a 	mov	r5,r19
  e57584:	b80f883a 	mov	r7,r23
  e57588:	b00d883a 	mov	r6,r22
  e5758c:	0e52f3c0 	call	e52f3c <__subdf3>
  e57590:	180b883a 	mov	r5,r3
  e57594:	880f883a 	mov	r7,r17
  e57598:	1009883a 	mov	r4,r2
  e5759c:	800d883a 	mov	r6,r16
  e575a0:	0e5c01c0 	call	e5c01c <__gtdf2>
  e575a4:	00bc470e 	bge	zero,r2,e566c4 <_dtoa_r+0x578>
  e575a8:	00c00c04 	movi	r3,48
  e575ac:	e73fffc4 	addi	fp,fp,-1
  e575b0:	e0800007 	ldb	r2,0(fp)
  e575b4:	10fffd26 	beq	r2,r3,e575ac <_dtoa_r+0x1460>
  e575b8:	d9800417 	ldw	r6,16(sp)
  e575bc:	e7000044 	addi	fp,fp,1
  e575c0:	d9800d15 	stw	r6,52(sp)
  e575c4:	003cab06 	br	e56874 <_dtoa_r+0x728>
  e575c8:	d8c00f17 	ldw	r3,60(sp)
  e575cc:	d9001117 	ldw	r4,68(sp)
  e575d0:	20e1c83a 	sub	r16,r4,r3
  e575d4:	0007883a 	mov	r3,zero
  e575d8:	003d9b06 	br	e56c48 <_dtoa_r+0xafc>
  e575dc:	00800e44 	movi	r2,57
  e575e0:	b0800005 	stb	r2,0(r22)
  e575e4:	b5800044 	addi	r22,r22,1
  e575e8:	003dc106 	br	e56cf0 <_dtoa_r+0xba4>
  e575ec:	05800084 	movi	r22,2
  e575f0:	003bf706 	br	e565d0 <_dtoa_r+0x484>
  e575f4:	d9000f17 	ldw	r4,60(sp)
  e575f8:	013c000e 	bge	zero,r4,e565fc <_dtoa_r+0x4b0>
  e575fc:	d9800e17 	ldw	r6,56(sp)
  e57600:	01bc300e 	bge	zero,r6,e566c4 <_dtoa_r+0x578>
  e57604:	0005883a 	mov	r2,zero
  e57608:	00d00934 	movhi	r3,16420
  e5760c:	a80b883a 	mov	r5,r21
  e57610:	180f883a 	mov	r7,r3
  e57614:	a009883a 	mov	r4,r20
  e57618:	100d883a 	mov	r6,r2
  e5761c:	0e5bbd00 	call	e5bbd0 <__muldf3>
  e57620:	b1000044 	addi	r4,r22,1
  e57624:	1021883a 	mov	r16,r2
  e57628:	1823883a 	mov	r17,r3
  e5762c:	0e5c1b40 	call	e5c1b4 <__floatsidf>
  e57630:	880b883a 	mov	r5,r17
  e57634:	8009883a 	mov	r4,r16
  e57638:	180f883a 	mov	r7,r3
  e5763c:	100d883a 	mov	r6,r2
  e57640:	0e5bbd00 	call	e5bbd0 <__muldf3>
  e57644:	0011883a 	mov	r8,zero
  e57648:	02500734 	movhi	r9,16412
  e5764c:	180b883a 	mov	r5,r3
  e57650:	480f883a 	mov	r7,r9
  e57654:	1009883a 	mov	r4,r2
  e57658:	400d883a 	mov	r6,r8
  e5765c:	0e52fbc0 	call	e52fbc <__adddf3>
  e57660:	102d883a 	mov	r22,r2
  e57664:	00bf3034 	movhi	r2,64704
  e57668:	10ef883a 	add	r23,r2,r3
  e5766c:	d8800d17 	ldw	r2,52(sp)
  e57670:	d8c00e17 	ldw	r3,56(sp)
  e57674:	8029883a 	mov	r20,r16
  e57678:	10bfffc4 	addi	r2,r2,-1
  e5767c:	882b883a 	mov	r21,r17
  e57680:	d8800415 	stw	r2,16(sp)
  e57684:	d8c00315 	stw	r3,12(sp)
  e57688:	003e8306 	br	e57098 <_dtoa_r+0xf4c>
  e5768c:	d8800117 	ldw	r2,4(sp)
  e57690:	dc001117 	ldw	r16,68(sp)
  e57694:	dc801017 	ldw	r18,64(sp)
  e57698:	00c00d84 	movi	r3,54
  e5769c:	1887c83a 	sub	r3,r3,r2
  e576a0:	003d6906 	br	e56c48 <_dtoa_r+0xafc>
  e576a4:	01800044 	movi	r6,1
  e576a8:	3021883a 	mov	r16,r6
  e576ac:	d9800f15 	stw	r6,60(sp)
  e576b0:	d9802615 	stw	r6,152(sp)
  e576b4:	d9800e15 	stw	r6,56(sp)
  e576b8:	003b9306 	br	e56508 <_dtoa_r+0x3bc>
  e576bc:	b021883a 	mov	r16,r22
  e576c0:	dd800f15 	stw	r22,60(sp)
  e576c4:	003b9006 	br	e56508 <_dtoa_r+0x3bc>
  e576c8:	103e221e 	bne	r2,zero,e56f54 <_dtoa_r+0xe08>
  e576cc:	b880004c 	andi	r2,r23,1
  e576d0:	1005003a 	cmpeq	r2,r2,zero
  e576d4:	103e1f1e 	bne	r2,zero,e56f54 <_dtoa_r+0xe08>
  e576d8:	003e1b06 	br	e56f48 <_dtoa_r+0xdfc>
  e576dc:	d9001617 	ldw	r4,88(sp)
  e576e0:	980b883a 	mov	r5,r19
  e576e4:	01800284 	movi	r6,10
  e576e8:	000f883a 	mov	r7,zero
  e576ec:	0e59f940 	call	e59f94 <__multadd>
  e576f0:	d8c00e17 	ldw	r3,56(sp)
  e576f4:	1027883a 	mov	r19,r2
  e576f8:	d8c00f15 	stw	r3,60(sp)
  e576fc:	003cd306 	br	e56a4c <_dtoa_r+0x900>

00e57700 <_fflush_r>:
  e57700:	defffb04 	addi	sp,sp,-20
  e57704:	dcc00315 	stw	r19,12(sp)
  e57708:	dc800215 	stw	r18,8(sp)
  e5770c:	dfc00415 	stw	ra,16(sp)
  e57710:	dc400115 	stw	r17,4(sp)
  e57714:	dc000015 	stw	r16,0(sp)
  e57718:	2027883a 	mov	r19,r4
  e5771c:	2825883a 	mov	r18,r5
  e57720:	20000226 	beq	r4,zero,e5772c <_fflush_r+0x2c>
  e57724:	20800e17 	ldw	r2,56(r4)
  e57728:	10005626 	beq	r2,zero,e57884 <_fflush_r+0x184>
  e5772c:	9100030b 	ldhu	r4,12(r18)
  e57730:	20ffffcc 	andi	r3,r4,65535
  e57734:	18e0001c 	xori	r3,r3,32768
  e57738:	18e00004 	addi	r3,r3,-32768
  e5773c:	1880020c 	andi	r2,r3,8
  e57740:	1000261e 	bne	r2,zero,e577dc <_fflush_r+0xdc>
  e57744:	90c00117 	ldw	r3,4(r18)
  e57748:	20820014 	ori	r2,r4,2048
  e5774c:	9080030d 	sth	r2,12(r18)
  e57750:	1009883a 	mov	r4,r2
  e57754:	00c0400e 	bge	zero,r3,e57858 <_fflush_r+0x158>
  e57758:	92000a17 	ldw	r8,40(r18)
  e5775c:	40004026 	beq	r8,zero,e57860 <_fflush_r+0x160>
  e57760:	2084000c 	andi	r2,r4,4096
  e57764:	10005326 	beq	r2,zero,e578b4 <_fflush_r+0x1b4>
  e57768:	94001417 	ldw	r16,80(r18)
  e5776c:	9080030b 	ldhu	r2,12(r18)
  e57770:	1080010c 	andi	r2,r2,4
  e57774:	1000481e 	bne	r2,zero,e57898 <_fflush_r+0x198>
  e57778:	91400717 	ldw	r5,28(r18)
  e5777c:	9809883a 	mov	r4,r19
  e57780:	800d883a 	mov	r6,r16
  e57784:	000f883a 	mov	r7,zero
  e57788:	403ee83a 	callr	r8
  e5778c:	8080261e 	bne	r16,r2,e57828 <_fflush_r+0x128>
  e57790:	9080030b 	ldhu	r2,12(r18)
  e57794:	91000417 	ldw	r4,16(r18)
  e57798:	90000115 	stw	zero,4(r18)
  e5779c:	10bdffcc 	andi	r2,r2,63487
  e577a0:	10ffffcc 	andi	r3,r2,65535
  e577a4:	18c4000c 	andi	r3,r3,4096
  e577a8:	9080030d 	sth	r2,12(r18)
  e577ac:	91000015 	stw	r4,0(r18)
  e577b0:	18002b26 	beq	r3,zero,e57860 <_fflush_r+0x160>
  e577b4:	0007883a 	mov	r3,zero
  e577b8:	1805883a 	mov	r2,r3
  e577bc:	94001415 	stw	r16,80(r18)
  e577c0:	dfc00417 	ldw	ra,16(sp)
  e577c4:	dcc00317 	ldw	r19,12(sp)
  e577c8:	dc800217 	ldw	r18,8(sp)
  e577cc:	dc400117 	ldw	r17,4(sp)
  e577d0:	dc000017 	ldw	r16,0(sp)
  e577d4:	dec00504 	addi	sp,sp,20
  e577d8:	f800283a 	ret
  e577dc:	94400417 	ldw	r17,16(r18)
  e577e0:	88001f26 	beq	r17,zero,e57860 <_fflush_r+0x160>
  e577e4:	90800017 	ldw	r2,0(r18)
  e577e8:	18c000cc 	andi	r3,r3,3
  e577ec:	94400015 	stw	r17,0(r18)
  e577f0:	1461c83a 	sub	r16,r2,r17
  e577f4:	18002526 	beq	r3,zero,e5788c <_fflush_r+0x18c>
  e577f8:	0005883a 	mov	r2,zero
  e577fc:	90800215 	stw	r2,8(r18)
  e57800:	0400170e 	bge	zero,r16,e57860 <_fflush_r+0x160>
  e57804:	90c00917 	ldw	r3,36(r18)
  e57808:	91400717 	ldw	r5,28(r18)
  e5780c:	880d883a 	mov	r6,r17
  e57810:	800f883a 	mov	r7,r16
  e57814:	9809883a 	mov	r4,r19
  e57818:	183ee83a 	callr	r3
  e5781c:	88a3883a 	add	r17,r17,r2
  e57820:	80a1c83a 	sub	r16,r16,r2
  e57824:	00bff616 	blt	zero,r2,e57800 <_fflush_r+0x100>
  e57828:	9080030b 	ldhu	r2,12(r18)
  e5782c:	00ffffc4 	movi	r3,-1
  e57830:	10801014 	ori	r2,r2,64
  e57834:	9080030d 	sth	r2,12(r18)
  e57838:	1805883a 	mov	r2,r3
  e5783c:	dfc00417 	ldw	ra,16(sp)
  e57840:	dcc00317 	ldw	r19,12(sp)
  e57844:	dc800217 	ldw	r18,8(sp)
  e57848:	dc400117 	ldw	r17,4(sp)
  e5784c:	dc000017 	ldw	r16,0(sp)
  e57850:	dec00504 	addi	sp,sp,20
  e57854:	f800283a 	ret
  e57858:	90800f17 	ldw	r2,60(r18)
  e5785c:	00bfbe16 	blt	zero,r2,e57758 <_fflush_r+0x58>
  e57860:	0007883a 	mov	r3,zero
  e57864:	1805883a 	mov	r2,r3
  e57868:	dfc00417 	ldw	ra,16(sp)
  e5786c:	dcc00317 	ldw	r19,12(sp)
  e57870:	dc800217 	ldw	r18,8(sp)
  e57874:	dc400117 	ldw	r17,4(sp)
  e57878:	dc000017 	ldw	r16,0(sp)
  e5787c:	dec00504 	addi	sp,sp,20
  e57880:	f800283a 	ret
  e57884:	0e579980 	call	e57998 <__sinit>
  e57888:	003fa806 	br	e5772c <_fflush_r+0x2c>
  e5788c:	90800517 	ldw	r2,20(r18)
  e57890:	90800215 	stw	r2,8(r18)
  e57894:	003fda06 	br	e57800 <_fflush_r+0x100>
  e57898:	90800117 	ldw	r2,4(r18)
  e5789c:	90c00c17 	ldw	r3,48(r18)
  e578a0:	80a1c83a 	sub	r16,r16,r2
  e578a4:	183fb426 	beq	r3,zero,e57778 <_fflush_r+0x78>
  e578a8:	90800f17 	ldw	r2,60(r18)
  e578ac:	80a1c83a 	sub	r16,r16,r2
  e578b0:	003fb106 	br	e57778 <_fflush_r+0x78>
  e578b4:	91400717 	ldw	r5,28(r18)
  e578b8:	9809883a 	mov	r4,r19
  e578bc:	000d883a 	mov	r6,zero
  e578c0:	01c00044 	movi	r7,1
  e578c4:	403ee83a 	callr	r8
  e578c8:	1021883a 	mov	r16,r2
  e578cc:	00bfffc4 	movi	r2,-1
  e578d0:	80800226 	beq	r16,r2,e578dc <_fflush_r+0x1dc>
  e578d4:	92000a17 	ldw	r8,40(r18)
  e578d8:	003fa406 	br	e5776c <_fflush_r+0x6c>
  e578dc:	98c00017 	ldw	r3,0(r19)
  e578e0:	00800744 	movi	r2,29
  e578e4:	18bfde26 	beq	r3,r2,e57860 <_fflush_r+0x160>
  e578e8:	9080030b 	ldhu	r2,12(r18)
  e578ec:	8007883a 	mov	r3,r16
  e578f0:	10801014 	ori	r2,r2,64
  e578f4:	9080030d 	sth	r2,12(r18)
  e578f8:	003fcf06 	br	e57838 <_fflush_r+0x138>

00e578fc <fflush>:
  e578fc:	01403974 	movhi	r5,229
  e57900:	295dc004 	addi	r5,r5,30464
  e57904:	2007883a 	mov	r3,r4
  e57908:	20000526 	beq	r4,zero,e57920 <fflush+0x24>
  e5790c:	008039b4 	movhi	r2,230
  e57910:	108c9b04 	addi	r2,r2,12908
  e57914:	11000017 	ldw	r4,0(r2)
  e57918:	180b883a 	mov	r5,r3
  e5791c:	0e577001 	jmpi	e57700 <_fflush_r>
  e57920:	008039b4 	movhi	r2,230
  e57924:	108c9c04 	addi	r2,r2,12912
  e57928:	11000017 	ldw	r4,0(r2)
  e5792c:	0e584cc1 	jmpi	e584cc <_fwalk_reent>

00e57930 <std>:
  e57930:	008039b4 	movhi	r2,230
  e57934:	10aa6a04 	addi	r2,r2,-22104
  e57938:	20800b15 	stw	r2,44(r4)
  e5793c:	008039b4 	movhi	r2,230
  e57940:	10aaa504 	addi	r2,r2,-21868
  e57944:	20800815 	stw	r2,32(r4)
  e57948:	00c039b4 	movhi	r3,230
  e5794c:	18ea8604 	addi	r3,r3,-21992
  e57950:	008039b4 	movhi	r2,230
  e57954:	10aa6c04 	addi	r2,r2,-22096
  e57958:	2140030d 	sth	r5,12(r4)
  e5795c:	2180038d 	sth	r6,14(r4)
  e57960:	20c00915 	stw	r3,36(r4)
  e57964:	20800a15 	stw	r2,40(r4)
  e57968:	20000015 	stw	zero,0(r4)
  e5796c:	20000115 	stw	zero,4(r4)
  e57970:	20000215 	stw	zero,8(r4)
  e57974:	20000415 	stw	zero,16(r4)
  e57978:	20000515 	stw	zero,20(r4)
  e5797c:	20000615 	stw	zero,24(r4)
  e57980:	21000715 	stw	r4,28(r4)
  e57984:	f800283a 	ret

00e57988 <__sfp_lock_acquire>:
  e57988:	f800283a 	ret

00e5798c <__sfp_lock_release>:
  e5798c:	f800283a 	ret

00e57990 <__sinit_lock_acquire>:
  e57990:	f800283a 	ret

00e57994 <__sinit_lock_release>:
  e57994:	f800283a 	ret

00e57998 <__sinit>:
  e57998:	20800e17 	ldw	r2,56(r4)
  e5799c:	defffd04 	addi	sp,sp,-12
  e579a0:	dc400115 	stw	r17,4(sp)
  e579a4:	dc000015 	stw	r16,0(sp)
  e579a8:	dfc00215 	stw	ra,8(sp)
  e579ac:	04400044 	movi	r17,1
  e579b0:	01400104 	movi	r5,4
  e579b4:	000d883a 	mov	r6,zero
  e579b8:	2021883a 	mov	r16,r4
  e579bc:	2200bb04 	addi	r8,r4,748
  e579c0:	200f883a 	mov	r7,r4
  e579c4:	10000526 	beq	r2,zero,e579dc <__sinit+0x44>
  e579c8:	dfc00217 	ldw	ra,8(sp)
  e579cc:	dc400117 	ldw	r17,4(sp)
  e579d0:	dc000017 	ldw	r16,0(sp)
  e579d4:	dec00304 	addi	sp,sp,12
  e579d8:	f800283a 	ret
  e579dc:	21000117 	ldw	r4,4(r4)
  e579e0:	00803974 	movhi	r2,229
  e579e4:	109e9f04 	addi	r2,r2,31356
  e579e8:	00c000c4 	movi	r3,3
  e579ec:	80800f15 	stw	r2,60(r16)
  e579f0:	80c0b915 	stw	r3,740(r16)
  e579f4:	8200ba15 	stw	r8,744(r16)
  e579f8:	84400e15 	stw	r17,56(r16)
  e579fc:	8000b815 	stw	zero,736(r16)
  e57a00:	0e579300 	call	e57930 <std>
  e57a04:	81000217 	ldw	r4,8(r16)
  e57a08:	880d883a 	mov	r6,r17
  e57a0c:	800f883a 	mov	r7,r16
  e57a10:	01400284 	movi	r5,10
  e57a14:	0e579300 	call	e57930 <std>
  e57a18:	81000317 	ldw	r4,12(r16)
  e57a1c:	800f883a 	mov	r7,r16
  e57a20:	01400484 	movi	r5,18
  e57a24:	01800084 	movi	r6,2
  e57a28:	dfc00217 	ldw	ra,8(sp)
  e57a2c:	dc400117 	ldw	r17,4(sp)
  e57a30:	dc000017 	ldw	r16,0(sp)
  e57a34:	dec00304 	addi	sp,sp,12
  e57a38:	0e579301 	jmpi	e57930 <std>

00e57a3c <__fp_lock>:
  e57a3c:	0005883a 	mov	r2,zero
  e57a40:	f800283a 	ret

00e57a44 <__fp_unlock>:
  e57a44:	0005883a 	mov	r2,zero
  e57a48:	f800283a 	ret

00e57a4c <__fp_unlock_all>:
  e57a4c:	008039b4 	movhi	r2,230
  e57a50:	108c9b04 	addi	r2,r2,12908
  e57a54:	11000017 	ldw	r4,0(r2)
  e57a58:	01403974 	movhi	r5,229
  e57a5c:	295e9104 	addi	r5,r5,31300
  e57a60:	0e585941 	jmpi	e58594 <_fwalk>

00e57a64 <__fp_lock_all>:
  e57a64:	008039b4 	movhi	r2,230
  e57a68:	108c9b04 	addi	r2,r2,12908
  e57a6c:	11000017 	ldw	r4,0(r2)
  e57a70:	01403974 	movhi	r5,229
  e57a74:	295e8f04 	addi	r5,r5,31292
  e57a78:	0e585941 	jmpi	e58594 <_fwalk>

00e57a7c <_cleanup_r>:
  e57a7c:	014039b4 	movhi	r5,230
  e57a80:	296b9704 	addi	r5,r5,-20900
  e57a84:	0e585941 	jmpi	e58594 <_fwalk>

00e57a88 <_cleanup>:
  e57a88:	008039b4 	movhi	r2,230
  e57a8c:	108c9c04 	addi	r2,r2,12912
  e57a90:	11000017 	ldw	r4,0(r2)
  e57a94:	0e57a7c1 	jmpi	e57a7c <_cleanup_r>

00e57a98 <__sfmoreglue>:
  e57a98:	defffc04 	addi	sp,sp,-16
  e57a9c:	dc400115 	stw	r17,4(sp)
  e57aa0:	2c401724 	muli	r17,r5,92
  e57aa4:	dc800215 	stw	r18,8(sp)
  e57aa8:	2825883a 	mov	r18,r5
  e57aac:	89400304 	addi	r5,r17,12
  e57ab0:	dc000015 	stw	r16,0(sp)
  e57ab4:	dfc00315 	stw	ra,12(sp)
  e57ab8:	0e588a40 	call	e588a4 <_malloc_r>
  e57abc:	0021883a 	mov	r16,zero
  e57ac0:	880d883a 	mov	r6,r17
  e57ac4:	000b883a 	mov	r5,zero
  e57ac8:	10000626 	beq	r2,zero,e57ae4 <__sfmoreglue+0x4c>
  e57acc:	11000304 	addi	r4,r2,12
  e57ad0:	14800115 	stw	r18,4(r2)
  e57ad4:	10000015 	stw	zero,0(r2)
  e57ad8:	11000215 	stw	r4,8(r2)
  e57adc:	1021883a 	mov	r16,r2
  e57ae0:	0e592480 	call	e59248 <memset>
  e57ae4:	8005883a 	mov	r2,r16
  e57ae8:	dfc00317 	ldw	ra,12(sp)
  e57aec:	dc800217 	ldw	r18,8(sp)
  e57af0:	dc400117 	ldw	r17,4(sp)
  e57af4:	dc000017 	ldw	r16,0(sp)
  e57af8:	dec00404 	addi	sp,sp,16
  e57afc:	f800283a 	ret

00e57b00 <__sfp>:
  e57b00:	defffd04 	addi	sp,sp,-12
  e57b04:	008039b4 	movhi	r2,230
  e57b08:	108c9c04 	addi	r2,r2,12912
  e57b0c:	dc000015 	stw	r16,0(sp)
  e57b10:	14000017 	ldw	r16,0(r2)
  e57b14:	dc400115 	stw	r17,4(sp)
  e57b18:	dfc00215 	stw	ra,8(sp)
  e57b1c:	80800e17 	ldw	r2,56(r16)
  e57b20:	2023883a 	mov	r17,r4
  e57b24:	10002626 	beq	r2,zero,e57bc0 <__sfp+0xc0>
  e57b28:	8400b804 	addi	r16,r16,736
  e57b2c:	80800117 	ldw	r2,4(r16)
  e57b30:	81000217 	ldw	r4,8(r16)
  e57b34:	10ffffc4 	addi	r3,r2,-1
  e57b38:	18000916 	blt	r3,zero,e57b60 <__sfp+0x60>
  e57b3c:	2080030f 	ldh	r2,12(r4)
  e57b40:	10000b26 	beq	r2,zero,e57b70 <__sfp+0x70>
  e57b44:	017fffc4 	movi	r5,-1
  e57b48:	00000206 	br	e57b54 <__sfp+0x54>
  e57b4c:	2080030f 	ldh	r2,12(r4)
  e57b50:	10000726 	beq	r2,zero,e57b70 <__sfp+0x70>
  e57b54:	18ffffc4 	addi	r3,r3,-1
  e57b58:	21001704 	addi	r4,r4,92
  e57b5c:	197ffb1e 	bne	r3,r5,e57b4c <__sfp+0x4c>
  e57b60:	80800017 	ldw	r2,0(r16)
  e57b64:	10001926 	beq	r2,zero,e57bcc <__sfp+0xcc>
  e57b68:	1021883a 	mov	r16,r2
  e57b6c:	003fef06 	br	e57b2c <__sfp+0x2c>
  e57b70:	00bfffc4 	movi	r2,-1
  e57b74:	00c00044 	movi	r3,1
  e57b78:	2080038d 	sth	r2,14(r4)
  e57b7c:	20c0030d 	sth	r3,12(r4)
  e57b80:	20000015 	stw	zero,0(r4)
  e57b84:	20000215 	stw	zero,8(r4)
  e57b88:	20000115 	stw	zero,4(r4)
  e57b8c:	20000415 	stw	zero,16(r4)
  e57b90:	20000515 	stw	zero,20(r4)
  e57b94:	20000615 	stw	zero,24(r4)
  e57b98:	20000c15 	stw	zero,48(r4)
  e57b9c:	20000d15 	stw	zero,52(r4)
  e57ba0:	20001115 	stw	zero,68(r4)
  e57ba4:	20001215 	stw	zero,72(r4)
  e57ba8:	2005883a 	mov	r2,r4
  e57bac:	dfc00217 	ldw	ra,8(sp)
  e57bb0:	dc400117 	ldw	r17,4(sp)
  e57bb4:	dc000017 	ldw	r16,0(sp)
  e57bb8:	dec00304 	addi	sp,sp,12
  e57bbc:	f800283a 	ret
  e57bc0:	8009883a 	mov	r4,r16
  e57bc4:	0e579980 	call	e57998 <__sinit>
  e57bc8:	003fd706 	br	e57b28 <__sfp+0x28>
  e57bcc:	8809883a 	mov	r4,r17
  e57bd0:	01400104 	movi	r5,4
  e57bd4:	0e57a980 	call	e57a98 <__sfmoreglue>
  e57bd8:	80800015 	stw	r2,0(r16)
  e57bdc:	103fe21e 	bne	r2,zero,e57b68 <__sfp+0x68>
  e57be0:	00800304 	movi	r2,12
  e57be4:	0009883a 	mov	r4,zero
  e57be8:	88800015 	stw	r2,0(r17)
  e57bec:	003fee06 	br	e57ba8 <__sfp+0xa8>

00e57bf0 <_malloc_trim_r>:
  e57bf0:	defffb04 	addi	sp,sp,-20
  e57bf4:	dcc00315 	stw	r19,12(sp)
  e57bf8:	04c039b4 	movhi	r19,230
  e57bfc:	9cc6bc04 	addi	r19,r19,6896
  e57c00:	dc800215 	stw	r18,8(sp)
  e57c04:	dc400115 	stw	r17,4(sp)
  e57c08:	dc000015 	stw	r16,0(sp)
  e57c0c:	2823883a 	mov	r17,r5
  e57c10:	2025883a 	mov	r18,r4
  e57c14:	dfc00415 	stw	ra,16(sp)
  e57c18:	0e5cce80 	call	e5cce8 <__malloc_lock>
  e57c1c:	98800217 	ldw	r2,8(r19)
  e57c20:	9009883a 	mov	r4,r18
  e57c24:	000b883a 	mov	r5,zero
  e57c28:	10c00117 	ldw	r3,4(r2)
  e57c2c:	00bfff04 	movi	r2,-4
  e57c30:	18a0703a 	and	r16,r3,r2
  e57c34:	8463c83a 	sub	r17,r16,r17
  e57c38:	8c43fbc4 	addi	r17,r17,4079
  e57c3c:	8822d33a 	srli	r17,r17,12
  e57c40:	0083ffc4 	movi	r2,4095
  e57c44:	8c7fffc4 	addi	r17,r17,-1
  e57c48:	8822933a 	slli	r17,r17,12
  e57c4c:	1440060e 	bge	r2,r17,e57c68 <_malloc_trim_r+0x78>
  e57c50:	0e5a9380 	call	e5a938 <_sbrk_r>
  e57c54:	98c00217 	ldw	r3,8(r19)
  e57c58:	9009883a 	mov	r4,r18
  e57c5c:	044bc83a 	sub	r5,zero,r17
  e57c60:	80c7883a 	add	r3,r16,r3
  e57c64:	10c00926 	beq	r2,r3,e57c8c <_malloc_trim_r+0x9c>
  e57c68:	0e5cd080 	call	e5cd08 <__malloc_unlock>
  e57c6c:	0005883a 	mov	r2,zero
  e57c70:	dfc00417 	ldw	ra,16(sp)
  e57c74:	dcc00317 	ldw	r19,12(sp)
  e57c78:	dc800217 	ldw	r18,8(sp)
  e57c7c:	dc400117 	ldw	r17,4(sp)
  e57c80:	dc000017 	ldw	r16,0(sp)
  e57c84:	dec00504 	addi	sp,sp,20
  e57c88:	f800283a 	ret
  e57c8c:	9009883a 	mov	r4,r18
  e57c90:	0e5a9380 	call	e5a938 <_sbrk_r>
  e57c94:	844dc83a 	sub	r6,r16,r17
  e57c98:	00ffffc4 	movi	r3,-1
  e57c9c:	9009883a 	mov	r4,r18
  e57ca0:	000b883a 	mov	r5,zero
  e57ca4:	01c039b4 	movhi	r7,230
  e57ca8:	39d3b304 	addi	r7,r7,20172
  e57cac:	31800054 	ori	r6,r6,1
  e57cb0:	10c00926 	beq	r2,r3,e57cd8 <_malloc_trim_r+0xe8>
  e57cb4:	38800017 	ldw	r2,0(r7)
  e57cb8:	98c00217 	ldw	r3,8(r19)
  e57cbc:	9009883a 	mov	r4,r18
  e57cc0:	1445c83a 	sub	r2,r2,r17
  e57cc4:	38800015 	stw	r2,0(r7)
  e57cc8:	19800115 	stw	r6,4(r3)
  e57ccc:	0e5cd080 	call	e5cd08 <__malloc_unlock>
  e57cd0:	00800044 	movi	r2,1
  e57cd4:	003fe606 	br	e57c70 <_malloc_trim_r+0x80>
  e57cd8:	0e5a9380 	call	e5a938 <_sbrk_r>
  e57cdc:	99800217 	ldw	r6,8(r19)
  e57ce0:	100f883a 	mov	r7,r2
  e57ce4:	9009883a 	mov	r4,r18
  e57ce8:	1187c83a 	sub	r3,r2,r6
  e57cec:	008003c4 	movi	r2,15
  e57cf0:	19400054 	ori	r5,r3,1
  e57cf4:	10ffdc0e 	bge	r2,r3,e57c68 <_malloc_trim_r+0x78>
  e57cf8:	008039b4 	movhi	r2,230
  e57cfc:	108ca004 	addi	r2,r2,12928
  e57d00:	10c00017 	ldw	r3,0(r2)
  e57d04:	008039b4 	movhi	r2,230
  e57d08:	1093b304 	addi	r2,r2,20172
  e57d0c:	31400115 	stw	r5,4(r6)
  e57d10:	38c7c83a 	sub	r3,r7,r3
  e57d14:	10c00015 	stw	r3,0(r2)
  e57d18:	003fd306 	br	e57c68 <_malloc_trim_r+0x78>

00e57d1c <_free_r>:
  e57d1c:	defffd04 	addi	sp,sp,-12
  e57d20:	dc400115 	stw	r17,4(sp)
  e57d24:	dc000015 	stw	r16,0(sp)
  e57d28:	dfc00215 	stw	ra,8(sp)
  e57d2c:	2821883a 	mov	r16,r5
  e57d30:	2023883a 	mov	r17,r4
  e57d34:	28005a26 	beq	r5,zero,e57ea0 <_free_r+0x184>
  e57d38:	0e5cce80 	call	e5cce8 <__malloc_lock>
  e57d3c:	823ffe04 	addi	r8,r16,-8
  e57d40:	41400117 	ldw	r5,4(r8)
  e57d44:	00bfff84 	movi	r2,-2
  e57d48:	028039b4 	movhi	r10,230
  e57d4c:	5286bc04 	addi	r10,r10,6896
  e57d50:	288e703a 	and	r7,r5,r2
  e57d54:	41cd883a 	add	r6,r8,r7
  e57d58:	30c00117 	ldw	r3,4(r6)
  e57d5c:	51000217 	ldw	r4,8(r10)
  e57d60:	00bfff04 	movi	r2,-4
  e57d64:	1892703a 	and	r9,r3,r2
  e57d68:	5017883a 	mov	r11,r10
  e57d6c:	31006726 	beq	r6,r4,e57f0c <_free_r+0x1f0>
  e57d70:	2880004c 	andi	r2,r5,1
  e57d74:	1005003a 	cmpeq	r2,r2,zero
  e57d78:	32400115 	stw	r9,4(r6)
  e57d7c:	10001a1e 	bne	r2,zero,e57de8 <_free_r+0xcc>
  e57d80:	000b883a 	mov	r5,zero
  e57d84:	3247883a 	add	r3,r6,r9
  e57d88:	18800117 	ldw	r2,4(r3)
  e57d8c:	1080004c 	andi	r2,r2,1
  e57d90:	1000231e 	bne	r2,zero,e57e20 <_free_r+0x104>
  e57d94:	280ac03a 	cmpne	r5,r5,zero
  e57d98:	3a4f883a 	add	r7,r7,r9
  e57d9c:	2800451e 	bne	r5,zero,e57eb4 <_free_r+0x198>
  e57da0:	31000217 	ldw	r4,8(r6)
  e57da4:	008039b4 	movhi	r2,230
  e57da8:	1086be04 	addi	r2,r2,6904
  e57dac:	20807b26 	beq	r4,r2,e57f9c <_free_r+0x280>
  e57db0:	30800317 	ldw	r2,12(r6)
  e57db4:	3a07883a 	add	r3,r7,r8
  e57db8:	19c00015 	stw	r7,0(r3)
  e57dbc:	11000215 	stw	r4,8(r2)
  e57dc0:	20800315 	stw	r2,12(r4)
  e57dc4:	38800054 	ori	r2,r7,1
  e57dc8:	40800115 	stw	r2,4(r8)
  e57dcc:	28001a26 	beq	r5,zero,e57e38 <_free_r+0x11c>
  e57dd0:	8809883a 	mov	r4,r17
  e57dd4:	dfc00217 	ldw	ra,8(sp)
  e57dd8:	dc400117 	ldw	r17,4(sp)
  e57ddc:	dc000017 	ldw	r16,0(sp)
  e57de0:	dec00304 	addi	sp,sp,12
  e57de4:	0e5cd081 	jmpi	e5cd08 <__malloc_unlock>
  e57de8:	80bffe17 	ldw	r2,-8(r16)
  e57dec:	50c00204 	addi	r3,r10,8
  e57df0:	4091c83a 	sub	r8,r8,r2
  e57df4:	41000217 	ldw	r4,8(r8)
  e57df8:	388f883a 	add	r7,r7,r2
  e57dfc:	20c06126 	beq	r4,r3,e57f84 <_free_r+0x268>
  e57e00:	40800317 	ldw	r2,12(r8)
  e57e04:	3247883a 	add	r3,r6,r9
  e57e08:	000b883a 	mov	r5,zero
  e57e0c:	11000215 	stw	r4,8(r2)
  e57e10:	20800315 	stw	r2,12(r4)
  e57e14:	18800117 	ldw	r2,4(r3)
  e57e18:	1080004c 	andi	r2,r2,1
  e57e1c:	103fdd26 	beq	r2,zero,e57d94 <_free_r+0x78>
  e57e20:	38800054 	ori	r2,r7,1
  e57e24:	3a07883a 	add	r3,r7,r8
  e57e28:	280ac03a 	cmpne	r5,r5,zero
  e57e2c:	40800115 	stw	r2,4(r8)
  e57e30:	19c00015 	stw	r7,0(r3)
  e57e34:	283fe61e 	bne	r5,zero,e57dd0 <_free_r+0xb4>
  e57e38:	00807fc4 	movi	r2,511
  e57e3c:	11c01f2e 	bgeu	r2,r7,e57ebc <_free_r+0x1a0>
  e57e40:	3806d27a 	srli	r3,r7,9
  e57e44:	1800481e 	bne	r3,zero,e57f68 <_free_r+0x24c>
  e57e48:	3804d0fa 	srli	r2,r7,3
  e57e4c:	100690fa 	slli	r3,r2,3
  e57e50:	1acd883a 	add	r6,r3,r11
  e57e54:	31400217 	ldw	r5,8(r6)
  e57e58:	31405926 	beq	r6,r5,e57fc0 <_free_r+0x2a4>
  e57e5c:	28800117 	ldw	r2,4(r5)
  e57e60:	00ffff04 	movi	r3,-4
  e57e64:	10c4703a 	and	r2,r2,r3
  e57e68:	3880022e 	bgeu	r7,r2,e57e74 <_free_r+0x158>
  e57e6c:	29400217 	ldw	r5,8(r5)
  e57e70:	317ffa1e 	bne	r6,r5,e57e5c <_free_r+0x140>
  e57e74:	29800317 	ldw	r6,12(r5)
  e57e78:	41800315 	stw	r6,12(r8)
  e57e7c:	41400215 	stw	r5,8(r8)
  e57e80:	8809883a 	mov	r4,r17
  e57e84:	2a000315 	stw	r8,12(r5)
  e57e88:	32000215 	stw	r8,8(r6)
  e57e8c:	dfc00217 	ldw	ra,8(sp)
  e57e90:	dc400117 	ldw	r17,4(sp)
  e57e94:	dc000017 	ldw	r16,0(sp)
  e57e98:	dec00304 	addi	sp,sp,12
  e57e9c:	0e5cd081 	jmpi	e5cd08 <__malloc_unlock>
  e57ea0:	dfc00217 	ldw	ra,8(sp)
  e57ea4:	dc400117 	ldw	r17,4(sp)
  e57ea8:	dc000017 	ldw	r16,0(sp)
  e57eac:	dec00304 	addi	sp,sp,12
  e57eb0:	f800283a 	ret
  e57eb4:	31000217 	ldw	r4,8(r6)
  e57eb8:	003fbd06 	br	e57db0 <_free_r+0x94>
  e57ebc:	3806d0fa 	srli	r3,r7,3
  e57ec0:	00800044 	movi	r2,1
  e57ec4:	51400117 	ldw	r5,4(r10)
  e57ec8:	180890fa 	slli	r4,r3,3
  e57ecc:	1807d0ba 	srai	r3,r3,2
  e57ed0:	22c9883a 	add	r4,r4,r11
  e57ed4:	21800217 	ldw	r6,8(r4)
  e57ed8:	10c4983a 	sll	r2,r2,r3
  e57edc:	41000315 	stw	r4,12(r8)
  e57ee0:	41800215 	stw	r6,8(r8)
  e57ee4:	288ab03a 	or	r5,r5,r2
  e57ee8:	22000215 	stw	r8,8(r4)
  e57eec:	8809883a 	mov	r4,r17
  e57ef0:	51400115 	stw	r5,4(r10)
  e57ef4:	32000315 	stw	r8,12(r6)
  e57ef8:	dfc00217 	ldw	ra,8(sp)
  e57efc:	dc400117 	ldw	r17,4(sp)
  e57f00:	dc000017 	ldw	r16,0(sp)
  e57f04:	dec00304 	addi	sp,sp,12
  e57f08:	0e5cd081 	jmpi	e5cd08 <__malloc_unlock>
  e57f0c:	2880004c 	andi	r2,r5,1
  e57f10:	3a4d883a 	add	r6,r7,r9
  e57f14:	1000071e 	bne	r2,zero,e57f34 <_free_r+0x218>
  e57f18:	80bffe17 	ldw	r2,-8(r16)
  e57f1c:	4091c83a 	sub	r8,r8,r2
  e57f20:	41000317 	ldw	r4,12(r8)
  e57f24:	40c00217 	ldw	r3,8(r8)
  e57f28:	308d883a 	add	r6,r6,r2
  e57f2c:	20c00215 	stw	r3,8(r4)
  e57f30:	19000315 	stw	r4,12(r3)
  e57f34:	008039b4 	movhi	r2,230
  e57f38:	108c9f04 	addi	r2,r2,12924
  e57f3c:	11000017 	ldw	r4,0(r2)
  e57f40:	30c00054 	ori	r3,r6,1
  e57f44:	52000215 	stw	r8,8(r10)
  e57f48:	40c00115 	stw	r3,4(r8)
  e57f4c:	313fa036 	bltu	r6,r4,e57dd0 <_free_r+0xb4>
  e57f50:	008039b4 	movhi	r2,230
  e57f54:	1093a904 	addi	r2,r2,20132
  e57f58:	11400017 	ldw	r5,0(r2)
  e57f5c:	8809883a 	mov	r4,r17
  e57f60:	0e57bf00 	call	e57bf0 <_malloc_trim_r>
  e57f64:	003f9a06 	br	e57dd0 <_free_r+0xb4>
  e57f68:	00800104 	movi	r2,4
  e57f6c:	10c0072e 	bgeu	r2,r3,e57f8c <_free_r+0x270>
  e57f70:	00800504 	movi	r2,20
  e57f74:	10c01936 	bltu	r2,r3,e57fdc <_free_r+0x2c0>
  e57f78:	188016c4 	addi	r2,r3,91
  e57f7c:	100690fa 	slli	r3,r2,3
  e57f80:	003fb306 	br	e57e50 <_free_r+0x134>
  e57f84:	01400044 	movi	r5,1
  e57f88:	003f7e06 	br	e57d84 <_free_r+0x68>
  e57f8c:	3804d1ba 	srli	r2,r7,6
  e57f90:	10800e04 	addi	r2,r2,56
  e57f94:	100690fa 	slli	r3,r2,3
  e57f98:	003fad06 	br	e57e50 <_free_r+0x134>
  e57f9c:	22000315 	stw	r8,12(r4)
  e57fa0:	22000215 	stw	r8,8(r4)
  e57fa4:	3a05883a 	add	r2,r7,r8
  e57fa8:	38c00054 	ori	r3,r7,1
  e57fac:	11c00015 	stw	r7,0(r2)
  e57fb0:	41000215 	stw	r4,8(r8)
  e57fb4:	40c00115 	stw	r3,4(r8)
  e57fb8:	41000315 	stw	r4,12(r8)
  e57fbc:	003f8406 	br	e57dd0 <_free_r+0xb4>
  e57fc0:	1005d0ba 	srai	r2,r2,2
  e57fc4:	00c00044 	movi	r3,1
  e57fc8:	51000117 	ldw	r4,4(r10)
  e57fcc:	1886983a 	sll	r3,r3,r2
  e57fd0:	20c8b03a 	or	r4,r4,r3
  e57fd4:	51000115 	stw	r4,4(r10)
  e57fd8:	003fa706 	br	e57e78 <_free_r+0x15c>
  e57fdc:	00801504 	movi	r2,84
  e57fe0:	10c00436 	bltu	r2,r3,e57ff4 <_free_r+0x2d8>
  e57fe4:	3804d33a 	srli	r2,r7,12
  e57fe8:	10801b84 	addi	r2,r2,110
  e57fec:	100690fa 	slli	r3,r2,3
  e57ff0:	003f9706 	br	e57e50 <_free_r+0x134>
  e57ff4:	00805504 	movi	r2,340
  e57ff8:	10c00436 	bltu	r2,r3,e5800c <_free_r+0x2f0>
  e57ffc:	3804d3fa 	srli	r2,r7,15
  e58000:	10801dc4 	addi	r2,r2,119
  e58004:	100690fa 	slli	r3,r2,3
  e58008:	003f9106 	br	e57e50 <_free_r+0x134>
  e5800c:	00815504 	movi	r2,1364
  e58010:	10c0032e 	bgeu	r2,r3,e58020 <_free_r+0x304>
  e58014:	00801f84 	movi	r2,126
  e58018:	00c0fc04 	movi	r3,1008
  e5801c:	003f8c06 	br	e57e50 <_free_r+0x134>
  e58020:	3804d4ba 	srli	r2,r7,18
  e58024:	10801f04 	addi	r2,r2,124
  e58028:	100690fa 	slli	r3,r2,3
  e5802c:	003f8806 	br	e57e50 <_free_r+0x134>

00e58030 <__sfvwrite_r>:
  e58030:	30800217 	ldw	r2,8(r6)
  e58034:	defff504 	addi	sp,sp,-44
  e58038:	df000915 	stw	fp,36(sp)
  e5803c:	dd800715 	stw	r22,28(sp)
  e58040:	dc800315 	stw	r18,12(sp)
  e58044:	dfc00a15 	stw	ra,40(sp)
  e58048:	ddc00815 	stw	r23,32(sp)
  e5804c:	dd400615 	stw	r21,24(sp)
  e58050:	dd000515 	stw	r20,20(sp)
  e58054:	dcc00415 	stw	r19,16(sp)
  e58058:	dc400215 	stw	r17,8(sp)
  e5805c:	dc000115 	stw	r16,4(sp)
  e58060:	302d883a 	mov	r22,r6
  e58064:	2039883a 	mov	fp,r4
  e58068:	2825883a 	mov	r18,r5
  e5806c:	10001c26 	beq	r2,zero,e580e0 <__sfvwrite_r+0xb0>
  e58070:	29c0030b 	ldhu	r7,12(r5)
  e58074:	3880020c 	andi	r2,r7,8
  e58078:	10002726 	beq	r2,zero,e58118 <__sfvwrite_r+0xe8>
  e5807c:	28800417 	ldw	r2,16(r5)
  e58080:	10002526 	beq	r2,zero,e58118 <__sfvwrite_r+0xe8>
  e58084:	3880008c 	andi	r2,r7,2
  e58088:	b5400017 	ldw	r21,0(r22)
  e5808c:	10002826 	beq	r2,zero,e58130 <__sfvwrite_r+0x100>
  e58090:	0021883a 	mov	r16,zero
  e58094:	0023883a 	mov	r17,zero
  e58098:	880d883a 	mov	r6,r17
  e5809c:	e009883a 	mov	r4,fp
  e580a0:	00810004 	movi	r2,1024
  e580a4:	80006e26 	beq	r16,zero,e58260 <__sfvwrite_r+0x230>
  e580a8:	800f883a 	mov	r7,r16
  e580ac:	91400717 	ldw	r5,28(r18)
  e580b0:	1400012e 	bgeu	r2,r16,e580b8 <__sfvwrite_r+0x88>
  e580b4:	100f883a 	mov	r7,r2
  e580b8:	90c00917 	ldw	r3,36(r18)
  e580bc:	183ee83a 	callr	r3
  e580c0:	1007883a 	mov	r3,r2
  e580c4:	80a1c83a 	sub	r16,r16,r2
  e580c8:	88a3883a 	add	r17,r17,r2
  e580cc:	00806d0e 	bge	zero,r2,e58284 <__sfvwrite_r+0x254>
  e580d0:	b0800217 	ldw	r2,8(r22)
  e580d4:	10c5c83a 	sub	r2,r2,r3
  e580d8:	b0800215 	stw	r2,8(r22)
  e580dc:	103fee1e 	bne	r2,zero,e58098 <__sfvwrite_r+0x68>
  e580e0:	0009883a 	mov	r4,zero
  e580e4:	2005883a 	mov	r2,r4
  e580e8:	dfc00a17 	ldw	ra,40(sp)
  e580ec:	df000917 	ldw	fp,36(sp)
  e580f0:	ddc00817 	ldw	r23,32(sp)
  e580f4:	dd800717 	ldw	r22,28(sp)
  e580f8:	dd400617 	ldw	r21,24(sp)
  e580fc:	dd000517 	ldw	r20,20(sp)
  e58100:	dcc00417 	ldw	r19,16(sp)
  e58104:	dc800317 	ldw	r18,12(sp)
  e58108:	dc400217 	ldw	r17,8(sp)
  e5810c:	dc000117 	ldw	r16,4(sp)
  e58110:	dec00b04 	addi	sp,sp,44
  e58114:	f800283a 	ret
  e58118:	0e55df80 	call	e55df8 <__swsetup_r>
  e5811c:	1000e41e 	bne	r2,zero,e584b0 <__sfvwrite_r+0x480>
  e58120:	91c0030b 	ldhu	r7,12(r18)
  e58124:	b5400017 	ldw	r21,0(r22)
  e58128:	3880008c 	andi	r2,r7,2
  e5812c:	103fd81e 	bne	r2,zero,e58090 <__sfvwrite_r+0x60>
  e58130:	3880004c 	andi	r2,r7,1
  e58134:	1005003a 	cmpeq	r2,r2,zero
  e58138:	10005726 	beq	r2,zero,e58298 <__sfvwrite_r+0x268>
  e5813c:	0029883a 	mov	r20,zero
  e58140:	002f883a 	mov	r23,zero
  e58144:	a0004226 	beq	r20,zero,e58250 <__sfvwrite_r+0x220>
  e58148:	3880800c 	andi	r2,r7,512
  e5814c:	94000217 	ldw	r16,8(r18)
  e58150:	10008b26 	beq	r2,zero,e58380 <__sfvwrite_r+0x350>
  e58154:	800d883a 	mov	r6,r16
  e58158:	a400a536 	bltu	r20,r16,e583f0 <__sfvwrite_r+0x3c0>
  e5815c:	3881200c 	andi	r2,r7,1152
  e58160:	10002726 	beq	r2,zero,e58200 <__sfvwrite_r+0x1d0>
  e58164:	90800517 	ldw	r2,20(r18)
  e58168:	92000417 	ldw	r8,16(r18)
  e5816c:	91400017 	ldw	r5,0(r18)
  e58170:	1087883a 	add	r3,r2,r2
  e58174:	1887883a 	add	r3,r3,r2
  e58178:	1808d7fa 	srli	r4,r3,31
  e5817c:	2a21c83a 	sub	r16,r5,r8
  e58180:	80800044 	addi	r2,r16,1
  e58184:	20c9883a 	add	r4,r4,r3
  e58188:	2027d07a 	srai	r19,r4,1
  e5818c:	a085883a 	add	r2,r20,r2
  e58190:	980d883a 	mov	r6,r19
  e58194:	9880022e 	bgeu	r19,r2,e581a0 <__sfvwrite_r+0x170>
  e58198:	1027883a 	mov	r19,r2
  e5819c:	100d883a 	mov	r6,r2
  e581a0:	3881000c 	andi	r2,r7,1024
  e581a4:	1000b826 	beq	r2,zero,e58488 <__sfvwrite_r+0x458>
  e581a8:	300b883a 	mov	r5,r6
  e581ac:	e009883a 	mov	r4,fp
  e581b0:	0e588a40 	call	e588a4 <_malloc_r>
  e581b4:	10003126 	beq	r2,zero,e5827c <__sfvwrite_r+0x24c>
  e581b8:	91400417 	ldw	r5,16(r18)
  e581bc:	1009883a 	mov	r4,r2
  e581c0:	800d883a 	mov	r6,r16
  e581c4:	1023883a 	mov	r17,r2
  e581c8:	0e590c80 	call	e590c8 <memcpy>
  e581cc:	90c0030b 	ldhu	r3,12(r18)
  e581d0:	00beffc4 	movi	r2,-1025
  e581d4:	1886703a 	and	r3,r3,r2
  e581d8:	18c02014 	ori	r3,r3,128
  e581dc:	90c0030d 	sth	r3,12(r18)
  e581e0:	9c07c83a 	sub	r3,r19,r16
  e581e4:	8c05883a 	add	r2,r17,r16
  e581e8:	a00d883a 	mov	r6,r20
  e581ec:	a021883a 	mov	r16,r20
  e581f0:	90800015 	stw	r2,0(r18)
  e581f4:	90c00215 	stw	r3,8(r18)
  e581f8:	94400415 	stw	r17,16(r18)
  e581fc:	94c00515 	stw	r19,20(r18)
  e58200:	91000017 	ldw	r4,0(r18)
  e58204:	b80b883a 	mov	r5,r23
  e58208:	a023883a 	mov	r17,r20
  e5820c:	0e591680 	call	e59168 <memmove>
  e58210:	90c00217 	ldw	r3,8(r18)
  e58214:	90800017 	ldw	r2,0(r18)
  e58218:	a027883a 	mov	r19,r20
  e5821c:	1c07c83a 	sub	r3,r3,r16
  e58220:	1405883a 	add	r2,r2,r16
  e58224:	90c00215 	stw	r3,8(r18)
  e58228:	a021883a 	mov	r16,r20
  e5822c:	90800015 	stw	r2,0(r18)
  e58230:	b0800217 	ldw	r2,8(r22)
  e58234:	1405c83a 	sub	r2,r2,r16
  e58238:	b0800215 	stw	r2,8(r22)
  e5823c:	103fa826 	beq	r2,zero,e580e0 <__sfvwrite_r+0xb0>
  e58240:	a469c83a 	sub	r20,r20,r17
  e58244:	91c0030b 	ldhu	r7,12(r18)
  e58248:	bcef883a 	add	r23,r23,r19
  e5824c:	a03fbe1e 	bne	r20,zero,e58148 <__sfvwrite_r+0x118>
  e58250:	adc00017 	ldw	r23,0(r21)
  e58254:	ad000117 	ldw	r20,4(r21)
  e58258:	ad400204 	addi	r21,r21,8
  e5825c:	003fb906 	br	e58144 <__sfvwrite_r+0x114>
  e58260:	ac400017 	ldw	r17,0(r21)
  e58264:	ac000117 	ldw	r16,4(r21)
  e58268:	ad400204 	addi	r21,r21,8
  e5826c:	003f8a06 	br	e58098 <__sfvwrite_r+0x68>
  e58270:	91400417 	ldw	r5,16(r18)
  e58274:	e009883a 	mov	r4,fp
  e58278:	0e57d1c0 	call	e57d1c <_free_r>
  e5827c:	00800304 	movi	r2,12
  e58280:	e0800015 	stw	r2,0(fp)
  e58284:	9080030b 	ldhu	r2,12(r18)
  e58288:	013fffc4 	movi	r4,-1
  e5828c:	10801014 	ori	r2,r2,64
  e58290:	9080030d 	sth	r2,12(r18)
  e58294:	003f9306 	br	e580e4 <__sfvwrite_r+0xb4>
  e58298:	0027883a 	mov	r19,zero
  e5829c:	002f883a 	mov	r23,zero
  e582a0:	d8000015 	stw	zero,0(sp)
  e582a4:	0029883a 	mov	r20,zero
  e582a8:	98001e26 	beq	r19,zero,e58324 <__sfvwrite_r+0x2f4>
  e582ac:	d8c00017 	ldw	r3,0(sp)
  e582b0:	1804c03a 	cmpne	r2,r3,zero
  e582b4:	10005e26 	beq	r2,zero,e58430 <__sfvwrite_r+0x400>
  e582b8:	9821883a 	mov	r16,r19
  e582bc:	a4c0012e 	bgeu	r20,r19,e582c4 <__sfvwrite_r+0x294>
  e582c0:	a021883a 	mov	r16,r20
  e582c4:	91000017 	ldw	r4,0(r18)
  e582c8:	90800417 	ldw	r2,16(r18)
  e582cc:	91800217 	ldw	r6,8(r18)
  e582d0:	91c00517 	ldw	r7,20(r18)
  e582d4:	1100022e 	bgeu	r2,r4,e582e0 <__sfvwrite_r+0x2b0>
  e582d8:	31e3883a 	add	r17,r6,r7
  e582dc:	8c001616 	blt	r17,r16,e58338 <__sfvwrite_r+0x308>
  e582e0:	81c03816 	blt	r16,r7,e583c4 <__sfvwrite_r+0x394>
  e582e4:	90c00917 	ldw	r3,36(r18)
  e582e8:	91400717 	ldw	r5,28(r18)
  e582ec:	e009883a 	mov	r4,fp
  e582f0:	b80d883a 	mov	r6,r23
  e582f4:	183ee83a 	callr	r3
  e582f8:	1023883a 	mov	r17,r2
  e582fc:	00bfe10e 	bge	zero,r2,e58284 <__sfvwrite_r+0x254>
  e58300:	a469c83a 	sub	r20,r20,r17
  e58304:	a0001826 	beq	r20,zero,e58368 <__sfvwrite_r+0x338>
  e58308:	b0800217 	ldw	r2,8(r22)
  e5830c:	1445c83a 	sub	r2,r2,r17
  e58310:	b0800215 	stw	r2,8(r22)
  e58314:	103f7226 	beq	r2,zero,e580e0 <__sfvwrite_r+0xb0>
  e58318:	9c67c83a 	sub	r19,r19,r17
  e5831c:	bc6f883a 	add	r23,r23,r17
  e58320:	983fe21e 	bne	r19,zero,e582ac <__sfvwrite_r+0x27c>
  e58324:	adc00017 	ldw	r23,0(r21)
  e58328:	acc00117 	ldw	r19,4(r21)
  e5832c:	ad400204 	addi	r21,r21,8
  e58330:	d8000015 	stw	zero,0(sp)
  e58334:	003fdc06 	br	e582a8 <__sfvwrite_r+0x278>
  e58338:	b80b883a 	mov	r5,r23
  e5833c:	880d883a 	mov	r6,r17
  e58340:	0e591680 	call	e59168 <memmove>
  e58344:	90c00017 	ldw	r3,0(r18)
  e58348:	e009883a 	mov	r4,fp
  e5834c:	900b883a 	mov	r5,r18
  e58350:	1c47883a 	add	r3,r3,r17
  e58354:	90c00015 	stw	r3,0(r18)
  e58358:	0e577000 	call	e57700 <_fflush_r>
  e5835c:	103fc91e 	bne	r2,zero,e58284 <__sfvwrite_r+0x254>
  e58360:	a469c83a 	sub	r20,r20,r17
  e58364:	a03fe81e 	bne	r20,zero,e58308 <__sfvwrite_r+0x2d8>
  e58368:	e009883a 	mov	r4,fp
  e5836c:	900b883a 	mov	r5,r18
  e58370:	0e577000 	call	e57700 <_fflush_r>
  e58374:	103fc31e 	bne	r2,zero,e58284 <__sfvwrite_r+0x254>
  e58378:	d8000015 	stw	zero,0(sp)
  e5837c:	003fe206 	br	e58308 <__sfvwrite_r+0x2d8>
  e58380:	91000017 	ldw	r4,0(r18)
  e58384:	90800417 	ldw	r2,16(r18)
  e58388:	1100022e 	bgeu	r2,r4,e58394 <__sfvwrite_r+0x364>
  e5838c:	8023883a 	mov	r17,r16
  e58390:	85003136 	bltu	r16,r20,e58458 <__sfvwrite_r+0x428>
  e58394:	91c00517 	ldw	r7,20(r18)
  e58398:	a1c01836 	bltu	r20,r7,e583fc <__sfvwrite_r+0x3cc>
  e5839c:	90c00917 	ldw	r3,36(r18)
  e583a0:	91400717 	ldw	r5,28(r18)
  e583a4:	e009883a 	mov	r4,fp
  e583a8:	b80d883a 	mov	r6,r23
  e583ac:	183ee83a 	callr	r3
  e583b0:	1021883a 	mov	r16,r2
  e583b4:	00bfb30e 	bge	zero,r2,e58284 <__sfvwrite_r+0x254>
  e583b8:	1023883a 	mov	r17,r2
  e583bc:	1027883a 	mov	r19,r2
  e583c0:	003f9b06 	br	e58230 <__sfvwrite_r+0x200>
  e583c4:	b80b883a 	mov	r5,r23
  e583c8:	800d883a 	mov	r6,r16
  e583cc:	0e591680 	call	e59168 <memmove>
  e583d0:	90c00217 	ldw	r3,8(r18)
  e583d4:	90800017 	ldw	r2,0(r18)
  e583d8:	8023883a 	mov	r17,r16
  e583dc:	1c07c83a 	sub	r3,r3,r16
  e583e0:	1405883a 	add	r2,r2,r16
  e583e4:	90c00215 	stw	r3,8(r18)
  e583e8:	90800015 	stw	r2,0(r18)
  e583ec:	003fc406 	br	e58300 <__sfvwrite_r+0x2d0>
  e583f0:	a00d883a 	mov	r6,r20
  e583f4:	a021883a 	mov	r16,r20
  e583f8:	003f8106 	br	e58200 <__sfvwrite_r+0x1d0>
  e583fc:	b80b883a 	mov	r5,r23
  e58400:	a00d883a 	mov	r6,r20
  e58404:	0e591680 	call	e59168 <memmove>
  e58408:	90c00217 	ldw	r3,8(r18)
  e5840c:	90800017 	ldw	r2,0(r18)
  e58410:	a021883a 	mov	r16,r20
  e58414:	1d07c83a 	sub	r3,r3,r20
  e58418:	1505883a 	add	r2,r2,r20
  e5841c:	a023883a 	mov	r17,r20
  e58420:	a027883a 	mov	r19,r20
  e58424:	90c00215 	stw	r3,8(r18)
  e58428:	90800015 	stw	r2,0(r18)
  e5842c:	003f8006 	br	e58230 <__sfvwrite_r+0x200>
  e58430:	b809883a 	mov	r4,r23
  e58434:	01400284 	movi	r5,10
  e58438:	980d883a 	mov	r6,r19
  e5843c:	0e58fe40 	call	e58fe4 <memchr>
  e58440:	10001726 	beq	r2,zero,e584a0 <__sfvwrite_r+0x470>
  e58444:	15c5c83a 	sub	r2,r2,r23
  e58448:	15000044 	addi	r20,r2,1
  e5844c:	00800044 	movi	r2,1
  e58450:	d8800015 	stw	r2,0(sp)
  e58454:	003f9806 	br	e582b8 <__sfvwrite_r+0x288>
  e58458:	b80b883a 	mov	r5,r23
  e5845c:	800d883a 	mov	r6,r16
  e58460:	0e591680 	call	e59168 <memmove>
  e58464:	90c00017 	ldw	r3,0(r18)
  e58468:	e009883a 	mov	r4,fp
  e5846c:	900b883a 	mov	r5,r18
  e58470:	1c07883a 	add	r3,r3,r16
  e58474:	90c00015 	stw	r3,0(r18)
  e58478:	8027883a 	mov	r19,r16
  e5847c:	0e577000 	call	e57700 <_fflush_r>
  e58480:	103f6b26 	beq	r2,zero,e58230 <__sfvwrite_r+0x200>
  e58484:	003f7f06 	br	e58284 <__sfvwrite_r+0x254>
  e58488:	400b883a 	mov	r5,r8
  e5848c:	e009883a 	mov	r4,fp
  e58490:	0e5a2d40 	call	e5a2d4 <_realloc_r>
  e58494:	103f7626 	beq	r2,zero,e58270 <__sfvwrite_r+0x240>
  e58498:	1023883a 	mov	r17,r2
  e5849c:	003f5006 	br	e581e0 <__sfvwrite_r+0x1b0>
  e584a0:	00c00044 	movi	r3,1
  e584a4:	9d000044 	addi	r20,r19,1
  e584a8:	d8c00015 	stw	r3,0(sp)
  e584ac:	003f8206 	br	e582b8 <__sfvwrite_r+0x288>
  e584b0:	9080030b 	ldhu	r2,12(r18)
  e584b4:	00c00244 	movi	r3,9
  e584b8:	013fffc4 	movi	r4,-1
  e584bc:	10801014 	ori	r2,r2,64
  e584c0:	9080030d 	sth	r2,12(r18)
  e584c4:	e0c00015 	stw	r3,0(fp)
  e584c8:	003f0606 	br	e580e4 <__sfvwrite_r+0xb4>

00e584cc <_fwalk_reent>:
  e584cc:	defff704 	addi	sp,sp,-36
  e584d0:	dcc00315 	stw	r19,12(sp)
  e584d4:	24c0b804 	addi	r19,r4,736
  e584d8:	dd800615 	stw	r22,24(sp)
  e584dc:	dd400515 	stw	r21,20(sp)
  e584e0:	dfc00815 	stw	ra,32(sp)
  e584e4:	ddc00715 	stw	r23,28(sp)
  e584e8:	dd000415 	stw	r20,16(sp)
  e584ec:	dc800215 	stw	r18,8(sp)
  e584f0:	dc400115 	stw	r17,4(sp)
  e584f4:	dc000015 	stw	r16,0(sp)
  e584f8:	202b883a 	mov	r21,r4
  e584fc:	282d883a 	mov	r22,r5
  e58500:	0e579880 	call	e57988 <__sfp_lock_acquire>
  e58504:	98002126 	beq	r19,zero,e5858c <_fwalk_reent+0xc0>
  e58508:	002f883a 	mov	r23,zero
  e5850c:	9c800117 	ldw	r18,4(r19)
  e58510:	9c000217 	ldw	r16,8(r19)
  e58514:	90bfffc4 	addi	r2,r18,-1
  e58518:	10000d16 	blt	r2,zero,e58550 <_fwalk_reent+0x84>
  e5851c:	0023883a 	mov	r17,zero
  e58520:	053fffc4 	movi	r20,-1
  e58524:	8080030f 	ldh	r2,12(r16)
  e58528:	8c400044 	addi	r17,r17,1
  e5852c:	10000626 	beq	r2,zero,e58548 <_fwalk_reent+0x7c>
  e58530:	8080038f 	ldh	r2,14(r16)
  e58534:	800b883a 	mov	r5,r16
  e58538:	a809883a 	mov	r4,r21
  e5853c:	15000226 	beq	r2,r20,e58548 <_fwalk_reent+0x7c>
  e58540:	b03ee83a 	callr	r22
  e58544:	b8aeb03a 	or	r23,r23,r2
  e58548:	84001704 	addi	r16,r16,92
  e5854c:	947ff51e 	bne	r18,r17,e58524 <_fwalk_reent+0x58>
  e58550:	9cc00017 	ldw	r19,0(r19)
  e58554:	983fed1e 	bne	r19,zero,e5850c <_fwalk_reent+0x40>
  e58558:	0e5798c0 	call	e5798c <__sfp_lock_release>
  e5855c:	b805883a 	mov	r2,r23
  e58560:	dfc00817 	ldw	ra,32(sp)
  e58564:	ddc00717 	ldw	r23,28(sp)
  e58568:	dd800617 	ldw	r22,24(sp)
  e5856c:	dd400517 	ldw	r21,20(sp)
  e58570:	dd000417 	ldw	r20,16(sp)
  e58574:	dcc00317 	ldw	r19,12(sp)
  e58578:	dc800217 	ldw	r18,8(sp)
  e5857c:	dc400117 	ldw	r17,4(sp)
  e58580:	dc000017 	ldw	r16,0(sp)
  e58584:	dec00904 	addi	sp,sp,36
  e58588:	f800283a 	ret
  e5858c:	002f883a 	mov	r23,zero
  e58590:	003ff106 	br	e58558 <_fwalk_reent+0x8c>

00e58594 <_fwalk>:
  e58594:	defff804 	addi	sp,sp,-32
  e58598:	dcc00315 	stw	r19,12(sp)
  e5859c:	24c0b804 	addi	r19,r4,736
  e585a0:	dd400515 	stw	r21,20(sp)
  e585a4:	dfc00715 	stw	ra,28(sp)
  e585a8:	dd800615 	stw	r22,24(sp)
  e585ac:	dd000415 	stw	r20,16(sp)
  e585b0:	dc800215 	stw	r18,8(sp)
  e585b4:	dc400115 	stw	r17,4(sp)
  e585b8:	dc000015 	stw	r16,0(sp)
  e585bc:	282b883a 	mov	r21,r5
  e585c0:	0e579880 	call	e57988 <__sfp_lock_acquire>
  e585c4:	98001f26 	beq	r19,zero,e58644 <_fwalk+0xb0>
  e585c8:	002d883a 	mov	r22,zero
  e585cc:	9c800117 	ldw	r18,4(r19)
  e585d0:	9c000217 	ldw	r16,8(r19)
  e585d4:	90bfffc4 	addi	r2,r18,-1
  e585d8:	10000c16 	blt	r2,zero,e5860c <_fwalk+0x78>
  e585dc:	0023883a 	mov	r17,zero
  e585e0:	053fffc4 	movi	r20,-1
  e585e4:	8080030f 	ldh	r2,12(r16)
  e585e8:	8c400044 	addi	r17,r17,1
  e585ec:	10000526 	beq	r2,zero,e58604 <_fwalk+0x70>
  e585f0:	8080038f 	ldh	r2,14(r16)
  e585f4:	8009883a 	mov	r4,r16
  e585f8:	15000226 	beq	r2,r20,e58604 <_fwalk+0x70>
  e585fc:	a83ee83a 	callr	r21
  e58600:	b0acb03a 	or	r22,r22,r2
  e58604:	84001704 	addi	r16,r16,92
  e58608:	947ff61e 	bne	r18,r17,e585e4 <_fwalk+0x50>
  e5860c:	9cc00017 	ldw	r19,0(r19)
  e58610:	983fee1e 	bne	r19,zero,e585cc <_fwalk+0x38>
  e58614:	0e5798c0 	call	e5798c <__sfp_lock_release>
  e58618:	b005883a 	mov	r2,r22
  e5861c:	dfc00717 	ldw	ra,28(sp)
  e58620:	dd800617 	ldw	r22,24(sp)
  e58624:	dd400517 	ldw	r21,20(sp)
  e58628:	dd000417 	ldw	r20,16(sp)
  e5862c:	dcc00317 	ldw	r19,12(sp)
  e58630:	dc800217 	ldw	r18,8(sp)
  e58634:	dc400117 	ldw	r17,4(sp)
  e58638:	dc000017 	ldw	r16,0(sp)
  e5863c:	dec00804 	addi	sp,sp,32
  e58640:	f800283a 	ret
  e58644:	002d883a 	mov	r22,zero
  e58648:	003ff206 	br	e58614 <_fwalk+0x80>

00e5864c <__locale_charset>:
  e5864c:	d0a00d17 	ldw	r2,-32716(gp)
  e58650:	f800283a 	ret

00e58654 <_localeconv_r>:
  e58654:	008039b4 	movhi	r2,230
  e58658:	10850f04 	addi	r2,r2,5180
  e5865c:	f800283a 	ret

00e58660 <localeconv>:
  e58660:	008039b4 	movhi	r2,230
  e58664:	108c9b04 	addi	r2,r2,12908
  e58668:	11000017 	ldw	r4,0(r2)
  e5866c:	0e586541 	jmpi	e58654 <_localeconv_r>

00e58670 <_setlocale_r>:
  e58670:	defffc04 	addi	sp,sp,-16
  e58674:	00c039b4 	movhi	r3,230
  e58678:	18c4e804 	addi	r3,r3,5024
  e5867c:	dc800215 	stw	r18,8(sp)
  e58680:	dc400115 	stw	r17,4(sp)
  e58684:	dc000015 	stw	r16,0(sp)
  e58688:	2023883a 	mov	r17,r4
  e5868c:	2825883a 	mov	r18,r5
  e58690:	dfc00315 	stw	ra,12(sp)
  e58694:	3021883a 	mov	r16,r6
  e58698:	3009883a 	mov	r4,r6
  e5869c:	180b883a 	mov	r5,r3
  e586a0:	30000926 	beq	r6,zero,e586c8 <_setlocale_r+0x58>
  e586a4:	0e5aaf40 	call	e5aaf4 <strcmp>
  e586a8:	8009883a 	mov	r4,r16
  e586ac:	014039b4 	movhi	r5,230
  e586b0:	29446b04 	addi	r5,r5,4524
  e586b4:	10000b1e 	bne	r2,zero,e586e4 <_setlocale_r+0x74>
  e586b8:	8c000d15 	stw	r16,52(r17)
  e586bc:	8c800c15 	stw	r18,48(r17)
  e586c0:	00c039b4 	movhi	r3,230
  e586c4:	18c4e804 	addi	r3,r3,5024
  e586c8:	1805883a 	mov	r2,r3
  e586cc:	dfc00317 	ldw	ra,12(sp)
  e586d0:	dc800217 	ldw	r18,8(sp)
  e586d4:	dc400117 	ldw	r17,4(sp)
  e586d8:	dc000017 	ldw	r16,0(sp)
  e586dc:	dec00404 	addi	sp,sp,16
  e586e0:	f800283a 	ret
  e586e4:	0e5aaf40 	call	e5aaf4 <strcmp>
  e586e8:	0007883a 	mov	r3,zero
  e586ec:	103ff226 	beq	r2,zero,e586b8 <_setlocale_r+0x48>
  e586f0:	003ff506 	br	e586c8 <_setlocale_r+0x58>

00e586f4 <setlocale>:
  e586f4:	018039b4 	movhi	r6,230
  e586f8:	318c9b04 	addi	r6,r6,12908
  e586fc:	2007883a 	mov	r3,r4
  e58700:	31000017 	ldw	r4,0(r6)
  e58704:	280d883a 	mov	r6,r5
  e58708:	180b883a 	mov	r5,r3
  e5870c:	0e586701 	jmpi	e58670 <_setlocale_r>

00e58710 <__smakebuf_r>:
  e58710:	2880030b 	ldhu	r2,12(r5)
  e58714:	deffed04 	addi	sp,sp,-76
  e58718:	dc401015 	stw	r17,64(sp)
  e5871c:	1080008c 	andi	r2,r2,2
  e58720:	dc000f15 	stw	r16,60(sp)
  e58724:	dfc01215 	stw	ra,72(sp)
  e58728:	dc801115 	stw	r18,68(sp)
  e5872c:	2821883a 	mov	r16,r5
  e58730:	2023883a 	mov	r17,r4
  e58734:	10000b26 	beq	r2,zero,e58764 <__smakebuf_r+0x54>
  e58738:	28c010c4 	addi	r3,r5,67
  e5873c:	00800044 	movi	r2,1
  e58740:	28800515 	stw	r2,20(r5)
  e58744:	28c00415 	stw	r3,16(r5)
  e58748:	28c00015 	stw	r3,0(r5)
  e5874c:	dfc01217 	ldw	ra,72(sp)
  e58750:	dc801117 	ldw	r18,68(sp)
  e58754:	dc401017 	ldw	r17,64(sp)
  e58758:	dc000f17 	ldw	r16,60(sp)
  e5875c:	dec01304 	addi	sp,sp,76
  e58760:	f800283a 	ret
  e58764:	2940038f 	ldh	r5,14(r5)
  e58768:	28002116 	blt	r5,zero,e587f0 <__smakebuf_r+0xe0>
  e5876c:	d80d883a 	mov	r6,sp
  e58770:	0e5ae700 	call	e5ae70 <_fstat_r>
  e58774:	10001e16 	blt	r2,zero,e587f0 <__smakebuf_r+0xe0>
  e58778:	d8800117 	ldw	r2,4(sp)
  e5877c:	00e00014 	movui	r3,32768
  e58780:	113c000c 	andi	r4,r2,61440
  e58784:	20c03126 	beq	r4,r3,e5884c <__smakebuf_r+0x13c>
  e58788:	8080030b 	ldhu	r2,12(r16)
  e5878c:	00c80004 	movi	r3,8192
  e58790:	10820014 	ori	r2,r2,2048
  e58794:	8080030d 	sth	r2,12(r16)
  e58798:	20c01e26 	beq	r4,r3,e58814 <__smakebuf_r+0x104>
  e5879c:	04810004 	movi	r18,1024
  e587a0:	8809883a 	mov	r4,r17
  e587a4:	900b883a 	mov	r5,r18
  e587a8:	0e588a40 	call	e588a4 <_malloc_r>
  e587ac:	1009883a 	mov	r4,r2
  e587b0:	10003126 	beq	r2,zero,e58878 <__smakebuf_r+0x168>
  e587b4:	80c0030b 	ldhu	r3,12(r16)
  e587b8:	00803974 	movhi	r2,229
  e587bc:	109e9f04 	addi	r2,r2,31356
  e587c0:	88800f15 	stw	r2,60(r17)
  e587c4:	18c02014 	ori	r3,r3,128
  e587c8:	84800515 	stw	r18,20(r16)
  e587cc:	80c0030d 	sth	r3,12(r16)
  e587d0:	81000415 	stw	r4,16(r16)
  e587d4:	81000015 	stw	r4,0(r16)
  e587d8:	dfc01217 	ldw	ra,72(sp)
  e587dc:	dc801117 	ldw	r18,68(sp)
  e587e0:	dc401017 	ldw	r17,64(sp)
  e587e4:	dc000f17 	ldw	r16,60(sp)
  e587e8:	dec01304 	addi	sp,sp,76
  e587ec:	f800283a 	ret
  e587f0:	80c0030b 	ldhu	r3,12(r16)
  e587f4:	1880200c 	andi	r2,r3,128
  e587f8:	10000426 	beq	r2,zero,e5880c <__smakebuf_r+0xfc>
  e587fc:	04801004 	movi	r18,64
  e58800:	18820014 	ori	r2,r3,2048
  e58804:	8080030d 	sth	r2,12(r16)
  e58808:	003fe506 	br	e587a0 <__smakebuf_r+0x90>
  e5880c:	04810004 	movi	r18,1024
  e58810:	003ffb06 	br	e58800 <__smakebuf_r+0xf0>
  e58814:	8140038f 	ldh	r5,14(r16)
  e58818:	8809883a 	mov	r4,r17
  e5881c:	0e5aee40 	call	e5aee4 <_isatty_r>
  e58820:	103fde26 	beq	r2,zero,e5879c <__smakebuf_r+0x8c>
  e58824:	8080030b 	ldhu	r2,12(r16)
  e58828:	80c010c4 	addi	r3,r16,67
  e5882c:	04810004 	movi	r18,1024
  e58830:	10800054 	ori	r2,r2,1
  e58834:	8080030d 	sth	r2,12(r16)
  e58838:	00800044 	movi	r2,1
  e5883c:	80c00415 	stw	r3,16(r16)
  e58840:	80800515 	stw	r2,20(r16)
  e58844:	80c00015 	stw	r3,0(r16)
  e58848:	003fd506 	br	e587a0 <__smakebuf_r+0x90>
  e5884c:	80c00a17 	ldw	r3,40(r16)
  e58850:	008039b4 	movhi	r2,230
  e58854:	10aa6c04 	addi	r2,r2,-22096
  e58858:	18bfcb1e 	bne	r3,r2,e58788 <__smakebuf_r+0x78>
  e5885c:	8080030b 	ldhu	r2,12(r16)
  e58860:	00c10004 	movi	r3,1024
  e58864:	1825883a 	mov	r18,r3
  e58868:	10c4b03a 	or	r2,r2,r3
  e5886c:	8080030d 	sth	r2,12(r16)
  e58870:	80c01315 	stw	r3,76(r16)
  e58874:	003fca06 	br	e587a0 <__smakebuf_r+0x90>
  e58878:	8100030b 	ldhu	r4,12(r16)
  e5887c:	2080800c 	andi	r2,r4,512
  e58880:	103fb21e 	bne	r2,zero,e5874c <__smakebuf_r+0x3c>
  e58884:	80c010c4 	addi	r3,r16,67
  e58888:	21000094 	ori	r4,r4,2
  e5888c:	00800044 	movi	r2,1
  e58890:	80800515 	stw	r2,20(r16)
  e58894:	8100030d 	sth	r4,12(r16)
  e58898:	80c00415 	stw	r3,16(r16)
  e5889c:	80c00015 	stw	r3,0(r16)
  e588a0:	003faa06 	br	e5874c <__smakebuf_r+0x3c>

00e588a4 <_malloc_r>:
  e588a4:	defff604 	addi	sp,sp,-40
  e588a8:	28c002c4 	addi	r3,r5,11
  e588ac:	00800584 	movi	r2,22
  e588b0:	dc800215 	stw	r18,8(sp)
  e588b4:	dfc00915 	stw	ra,36(sp)
  e588b8:	df000815 	stw	fp,32(sp)
  e588bc:	ddc00715 	stw	r23,28(sp)
  e588c0:	dd800615 	stw	r22,24(sp)
  e588c4:	dd400515 	stw	r21,20(sp)
  e588c8:	dd000415 	stw	r20,16(sp)
  e588cc:	dcc00315 	stw	r19,12(sp)
  e588d0:	dc400115 	stw	r17,4(sp)
  e588d4:	dc000015 	stw	r16,0(sp)
  e588d8:	2025883a 	mov	r18,r4
  e588dc:	10c01236 	bltu	r2,r3,e58928 <_malloc_r+0x84>
  e588e0:	04400404 	movi	r17,16
  e588e4:	8940142e 	bgeu	r17,r5,e58938 <_malloc_r+0x94>
  e588e8:	00800304 	movi	r2,12
  e588ec:	0007883a 	mov	r3,zero
  e588f0:	90800015 	stw	r2,0(r18)
  e588f4:	1805883a 	mov	r2,r3
  e588f8:	dfc00917 	ldw	ra,36(sp)
  e588fc:	df000817 	ldw	fp,32(sp)
  e58900:	ddc00717 	ldw	r23,28(sp)
  e58904:	dd800617 	ldw	r22,24(sp)
  e58908:	dd400517 	ldw	r21,20(sp)
  e5890c:	dd000417 	ldw	r20,16(sp)
  e58910:	dcc00317 	ldw	r19,12(sp)
  e58914:	dc800217 	ldw	r18,8(sp)
  e58918:	dc400117 	ldw	r17,4(sp)
  e5891c:	dc000017 	ldw	r16,0(sp)
  e58920:	dec00a04 	addi	sp,sp,40
  e58924:	f800283a 	ret
  e58928:	00bffe04 	movi	r2,-8
  e5892c:	18a2703a 	and	r17,r3,r2
  e58930:	883fed16 	blt	r17,zero,e588e8 <_malloc_r+0x44>
  e58934:	897fec36 	bltu	r17,r5,e588e8 <_malloc_r+0x44>
  e58938:	9009883a 	mov	r4,r18
  e5893c:	0e5cce80 	call	e5cce8 <__malloc_lock>
  e58940:	00807dc4 	movi	r2,503
  e58944:	14402b2e 	bgeu	r2,r17,e589f4 <_malloc_r+0x150>
  e58948:	8806d27a 	srli	r3,r17,9
  e5894c:	18003f1e 	bne	r3,zero,e58a4c <_malloc_r+0x1a8>
  e58950:	880cd0fa 	srli	r6,r17,3
  e58954:	300490fa 	slli	r2,r6,3
  e58958:	02c039b4 	movhi	r11,230
  e5895c:	5ac6bc04 	addi	r11,r11,6896
  e58960:	12cb883a 	add	r5,r2,r11
  e58964:	2c000317 	ldw	r16,12(r5)
  e58968:	580f883a 	mov	r7,r11
  e5896c:	2c00041e 	bne	r5,r16,e58980 <_malloc_r+0xdc>
  e58970:	00000a06 	br	e5899c <_malloc_r+0xf8>
  e58974:	1800860e 	bge	r3,zero,e58b90 <_malloc_r+0x2ec>
  e58978:	84000317 	ldw	r16,12(r16)
  e5897c:	2c000726 	beq	r5,r16,e5899c <_malloc_r+0xf8>
  e58980:	80800117 	ldw	r2,4(r16)
  e58984:	00ffff04 	movi	r3,-4
  e58988:	10c8703a 	and	r4,r2,r3
  e5898c:	2447c83a 	sub	r3,r4,r17
  e58990:	008003c4 	movi	r2,15
  e58994:	10fff70e 	bge	r2,r3,e58974 <_malloc_r+0xd0>
  e58998:	31bfffc4 	addi	r6,r6,-1
  e5899c:	32400044 	addi	r9,r6,1
  e589a0:	028039b4 	movhi	r10,230
  e589a4:	5286be04 	addi	r10,r10,6904
  e589a8:	54000217 	ldw	r16,8(r10)
  e589ac:	8280a026 	beq	r16,r10,e58c30 <_malloc_r+0x38c>
  e589b0:	80800117 	ldw	r2,4(r16)
  e589b4:	00ffff04 	movi	r3,-4
  e589b8:	10ca703a 	and	r5,r2,r3
  e589bc:	2c4dc83a 	sub	r6,r5,r17
  e589c0:	008003c4 	movi	r2,15
  e589c4:	11808316 	blt	r2,r6,e58bd4 <_malloc_r+0x330>
  e589c8:	52800315 	stw	r10,12(r10)
  e589cc:	52800215 	stw	r10,8(r10)
  e589d0:	30002916 	blt	r6,zero,e58a78 <_malloc_r+0x1d4>
  e589d4:	8147883a 	add	r3,r16,r5
  e589d8:	18800117 	ldw	r2,4(r3)
  e589dc:	9009883a 	mov	r4,r18
  e589e0:	10800054 	ori	r2,r2,1
  e589e4:	18800115 	stw	r2,4(r3)
  e589e8:	0e5cd080 	call	e5cd08 <__malloc_unlock>
  e589ec:	80c00204 	addi	r3,r16,8
  e589f0:	003fc006 	br	e588f4 <_malloc_r+0x50>
  e589f4:	02c039b4 	movhi	r11,230
  e589f8:	5ac6bc04 	addi	r11,r11,6896
  e589fc:	8ac5883a 	add	r2,r17,r11
  e58a00:	14000317 	ldw	r16,12(r2)
  e58a04:	580f883a 	mov	r7,r11
  e58a08:	8806d0fa 	srli	r3,r17,3
  e58a0c:	14006c26 	beq	r2,r16,e58bc0 <_malloc_r+0x31c>
  e58a10:	80c00117 	ldw	r3,4(r16)
  e58a14:	00bfff04 	movi	r2,-4
  e58a18:	81800317 	ldw	r6,12(r16)
  e58a1c:	1886703a 	and	r3,r3,r2
  e58a20:	80c7883a 	add	r3,r16,r3
  e58a24:	18800117 	ldw	r2,4(r3)
  e58a28:	81400217 	ldw	r5,8(r16)
  e58a2c:	9009883a 	mov	r4,r18
  e58a30:	10800054 	ori	r2,r2,1
  e58a34:	18800115 	stw	r2,4(r3)
  e58a38:	31400215 	stw	r5,8(r6)
  e58a3c:	29800315 	stw	r6,12(r5)
  e58a40:	0e5cd080 	call	e5cd08 <__malloc_unlock>
  e58a44:	80c00204 	addi	r3,r16,8
  e58a48:	003faa06 	br	e588f4 <_malloc_r+0x50>
  e58a4c:	00800104 	movi	r2,4
  e58a50:	10c0052e 	bgeu	r2,r3,e58a68 <_malloc_r+0x1c4>
  e58a54:	00800504 	movi	r2,20
  e58a58:	10c07836 	bltu	r2,r3,e58c3c <_malloc_r+0x398>
  e58a5c:	198016c4 	addi	r6,r3,91
  e58a60:	300490fa 	slli	r2,r6,3
  e58a64:	003fbc06 	br	e58958 <_malloc_r+0xb4>
  e58a68:	8804d1ba 	srli	r2,r17,6
  e58a6c:	11800e04 	addi	r6,r2,56
  e58a70:	300490fa 	slli	r2,r6,3
  e58a74:	003fb806 	br	e58958 <_malloc_r+0xb4>
  e58a78:	00807fc4 	movi	r2,511
  e58a7c:	1140bb36 	bltu	r2,r5,e58d6c <_malloc_r+0x4c8>
  e58a80:	2806d0fa 	srli	r3,r5,3
  e58a84:	573ffe04 	addi	fp,r10,-8
  e58a88:	00800044 	movi	r2,1
  e58a8c:	180890fa 	slli	r4,r3,3
  e58a90:	1807d0ba 	srai	r3,r3,2
  e58a94:	e1c00117 	ldw	r7,4(fp)
  e58a98:	5909883a 	add	r4,r11,r4
  e58a9c:	21400217 	ldw	r5,8(r4)
  e58aa0:	10c4983a 	sll	r2,r2,r3
  e58aa4:	81000315 	stw	r4,12(r16)
  e58aa8:	81400215 	stw	r5,8(r16)
  e58aac:	388eb03a 	or	r7,r7,r2
  e58ab0:	2c000315 	stw	r16,12(r5)
  e58ab4:	24000215 	stw	r16,8(r4)
  e58ab8:	e1c00115 	stw	r7,4(fp)
  e58abc:	4807883a 	mov	r3,r9
  e58ac0:	4800cd16 	blt	r9,zero,e58df8 <_malloc_r+0x554>
  e58ac4:	1807d0ba 	srai	r3,r3,2
  e58ac8:	00800044 	movi	r2,1
  e58acc:	10c8983a 	sll	r4,r2,r3
  e58ad0:	39004436 	bltu	r7,r4,e58be4 <_malloc_r+0x340>
  e58ad4:	21c4703a 	and	r2,r4,r7
  e58ad8:	10000a1e 	bne	r2,zero,e58b04 <_malloc_r+0x260>
  e58adc:	2109883a 	add	r4,r4,r4
  e58ae0:	00bfff04 	movi	r2,-4
  e58ae4:	4884703a 	and	r2,r9,r2
  e58ae8:	3906703a 	and	r3,r7,r4
  e58aec:	12400104 	addi	r9,r2,4
  e58af0:	1800041e 	bne	r3,zero,e58b04 <_malloc_r+0x260>
  e58af4:	2109883a 	add	r4,r4,r4
  e58af8:	3904703a 	and	r2,r7,r4
  e58afc:	4a400104 	addi	r9,r9,4
  e58b00:	103ffc26 	beq	r2,zero,e58af4 <_malloc_r+0x250>
  e58b04:	480490fa 	slli	r2,r9,3
  e58b08:	4819883a 	mov	r12,r9
  e58b0c:	023fff04 	movi	r8,-4
  e58b10:	589b883a 	add	r13,r11,r2
  e58b14:	6807883a 	mov	r3,r13
  e58b18:	014003c4 	movi	r5,15
  e58b1c:	1c000317 	ldw	r16,12(r3)
  e58b20:	1c00041e 	bne	r3,r16,e58b34 <_malloc_r+0x290>
  e58b24:	0000a706 	br	e58dc4 <_malloc_r+0x520>
  e58b28:	3000ab0e 	bge	r6,zero,e58dd8 <_malloc_r+0x534>
  e58b2c:	84000317 	ldw	r16,12(r16)
  e58b30:	1c00a426 	beq	r3,r16,e58dc4 <_malloc_r+0x520>
  e58b34:	80800117 	ldw	r2,4(r16)
  e58b38:	1204703a 	and	r2,r2,r8
  e58b3c:	144dc83a 	sub	r6,r2,r17
  e58b40:	29bff90e 	bge	r5,r6,e58b28 <_malloc_r+0x284>
  e58b44:	81000317 	ldw	r4,12(r16)
  e58b48:	80c00217 	ldw	r3,8(r16)
  e58b4c:	89400054 	ori	r5,r17,1
  e58b50:	8445883a 	add	r2,r16,r17
  e58b54:	20c00215 	stw	r3,8(r4)
  e58b58:	19000315 	stw	r4,12(r3)
  e58b5c:	81400115 	stw	r5,4(r16)
  e58b60:	1187883a 	add	r3,r2,r6
  e58b64:	31000054 	ori	r4,r6,1
  e58b68:	50800315 	stw	r2,12(r10)
  e58b6c:	50800215 	stw	r2,8(r10)
  e58b70:	19800015 	stw	r6,0(r3)
  e58b74:	11000115 	stw	r4,4(r2)
  e58b78:	12800215 	stw	r10,8(r2)
  e58b7c:	12800315 	stw	r10,12(r2)
  e58b80:	9009883a 	mov	r4,r18
  e58b84:	0e5cd080 	call	e5cd08 <__malloc_unlock>
  e58b88:	80c00204 	addi	r3,r16,8
  e58b8c:	003f5906 	br	e588f4 <_malloc_r+0x50>
  e58b90:	8109883a 	add	r4,r16,r4
  e58b94:	20800117 	ldw	r2,4(r4)
  e58b98:	80c00217 	ldw	r3,8(r16)
  e58b9c:	81400317 	ldw	r5,12(r16)
  e58ba0:	10800054 	ori	r2,r2,1
  e58ba4:	20800115 	stw	r2,4(r4)
  e58ba8:	28c00215 	stw	r3,8(r5)
  e58bac:	19400315 	stw	r5,12(r3)
  e58bb0:	9009883a 	mov	r4,r18
  e58bb4:	0e5cd080 	call	e5cd08 <__malloc_unlock>
  e58bb8:	80c00204 	addi	r3,r16,8
  e58bbc:	003f4d06 	br	e588f4 <_malloc_r+0x50>
  e58bc0:	80800204 	addi	r2,r16,8
  e58bc4:	14000317 	ldw	r16,12(r2)
  e58bc8:	143f911e 	bne	r2,r16,e58a10 <_malloc_r+0x16c>
  e58bcc:	1a400084 	addi	r9,r3,2
  e58bd0:	003f7306 	br	e589a0 <_malloc_r+0xfc>
  e58bd4:	88c00054 	ori	r3,r17,1
  e58bd8:	8445883a 	add	r2,r16,r17
  e58bdc:	80c00115 	stw	r3,4(r16)
  e58be0:	003fdf06 	br	e58b60 <_malloc_r+0x2bc>
  e58be4:	e4000217 	ldw	r16,8(fp)
  e58be8:	00bfff04 	movi	r2,-4
  e58bec:	80c00117 	ldw	r3,4(r16)
  e58bf0:	802d883a 	mov	r22,r16
  e58bf4:	18aa703a 	and	r21,r3,r2
  e58bf8:	ac401636 	bltu	r21,r17,e58c54 <_malloc_r+0x3b0>
  e58bfc:	ac49c83a 	sub	r4,r21,r17
  e58c00:	008003c4 	movi	r2,15
  e58c04:	1100130e 	bge	r2,r4,e58c54 <_malloc_r+0x3b0>
  e58c08:	88800054 	ori	r2,r17,1
  e58c0c:	8447883a 	add	r3,r16,r17
  e58c10:	80800115 	stw	r2,4(r16)
  e58c14:	20800054 	ori	r2,r4,1
  e58c18:	18800115 	stw	r2,4(r3)
  e58c1c:	e0c00215 	stw	r3,8(fp)
  e58c20:	9009883a 	mov	r4,r18
  e58c24:	0e5cd080 	call	e5cd08 <__malloc_unlock>
  e58c28:	80c00204 	addi	r3,r16,8
  e58c2c:	003f3106 	br	e588f4 <_malloc_r+0x50>
  e58c30:	39c00117 	ldw	r7,4(r7)
  e58c34:	573ffe04 	addi	fp,r10,-8
  e58c38:	003fa006 	br	e58abc <_malloc_r+0x218>
  e58c3c:	00801504 	movi	r2,84
  e58c40:	10c06736 	bltu	r2,r3,e58de0 <_malloc_r+0x53c>
  e58c44:	8804d33a 	srli	r2,r17,12
  e58c48:	11801b84 	addi	r6,r2,110
  e58c4c:	300490fa 	slli	r2,r6,3
  e58c50:	003f4106 	br	e58958 <_malloc_r+0xb4>
  e58c54:	d0a71817 	ldw	r2,-25504(gp)
  e58c58:	d0e00f17 	ldw	r3,-32708(gp)
  e58c5c:	053fffc4 	movi	r20,-1
  e58c60:	10800404 	addi	r2,r2,16
  e58c64:	88a7883a 	add	r19,r17,r2
  e58c68:	1d000326 	beq	r3,r20,e58c78 <_malloc_r+0x3d4>
  e58c6c:	98c3ffc4 	addi	r3,r19,4095
  e58c70:	00bc0004 	movi	r2,-4096
  e58c74:	18a6703a 	and	r19,r3,r2
  e58c78:	9009883a 	mov	r4,r18
  e58c7c:	980b883a 	mov	r5,r19
  e58c80:	0e5a9380 	call	e5a938 <_sbrk_r>
  e58c84:	1009883a 	mov	r4,r2
  e58c88:	15000426 	beq	r2,r20,e58c9c <_malloc_r+0x3f8>
  e58c8c:	854b883a 	add	r5,r16,r21
  e58c90:	1029883a 	mov	r20,r2
  e58c94:	11405a2e 	bgeu	r2,r5,e58e00 <_malloc_r+0x55c>
  e58c98:	87000c26 	beq	r16,fp,e58ccc <_malloc_r+0x428>
  e58c9c:	e4000217 	ldw	r16,8(fp)
  e58ca0:	80c00117 	ldw	r3,4(r16)
  e58ca4:	00bfff04 	movi	r2,-4
  e58ca8:	1884703a 	and	r2,r3,r2
  e58cac:	14400336 	bltu	r2,r17,e58cbc <_malloc_r+0x418>
  e58cb0:	1449c83a 	sub	r4,r2,r17
  e58cb4:	008003c4 	movi	r2,15
  e58cb8:	113fd316 	blt	r2,r4,e58c08 <_malloc_r+0x364>
  e58cbc:	9009883a 	mov	r4,r18
  e58cc0:	0e5cd080 	call	e5cd08 <__malloc_unlock>
  e58cc4:	0007883a 	mov	r3,zero
  e58cc8:	003f0a06 	br	e588f4 <_malloc_r+0x50>
  e58ccc:	05c039b4 	movhi	r23,230
  e58cd0:	bdd3b304 	addi	r23,r23,20172
  e58cd4:	b8800017 	ldw	r2,0(r23)
  e58cd8:	988d883a 	add	r6,r19,r2
  e58cdc:	b9800015 	stw	r6,0(r23)
  e58ce0:	d0e00f17 	ldw	r3,-32708(gp)
  e58ce4:	00bfffc4 	movi	r2,-1
  e58ce8:	18808e26 	beq	r3,r2,e58f24 <_malloc_r+0x680>
  e58cec:	2145c83a 	sub	r2,r4,r5
  e58cf0:	3085883a 	add	r2,r6,r2
  e58cf4:	b8800015 	stw	r2,0(r23)
  e58cf8:	20c001cc 	andi	r3,r4,7
  e58cfc:	18005f1e 	bne	r3,zero,e58e7c <_malloc_r+0x5d8>
  e58d00:	000b883a 	mov	r5,zero
  e58d04:	a4c5883a 	add	r2,r20,r19
  e58d08:	1083ffcc 	andi	r2,r2,4095
  e58d0c:	00c40004 	movi	r3,4096
  e58d10:	1887c83a 	sub	r3,r3,r2
  e58d14:	28e7883a 	add	r19,r5,r3
  e58d18:	9009883a 	mov	r4,r18
  e58d1c:	980b883a 	mov	r5,r19
  e58d20:	0e5a9380 	call	e5a938 <_sbrk_r>
  e58d24:	1007883a 	mov	r3,r2
  e58d28:	00bfffc4 	movi	r2,-1
  e58d2c:	18807a26 	beq	r3,r2,e58f18 <_malloc_r+0x674>
  e58d30:	1d05c83a 	sub	r2,r3,r20
  e58d34:	9885883a 	add	r2,r19,r2
  e58d38:	10c00054 	ori	r3,r2,1
  e58d3c:	b8800017 	ldw	r2,0(r23)
  e58d40:	a021883a 	mov	r16,r20
  e58d44:	a0c00115 	stw	r3,4(r20)
  e58d48:	9885883a 	add	r2,r19,r2
  e58d4c:	b8800015 	stw	r2,0(r23)
  e58d50:	e5000215 	stw	r20,8(fp)
  e58d54:	b7003626 	beq	r22,fp,e58e30 <_malloc_r+0x58c>
  e58d58:	018003c4 	movi	r6,15
  e58d5c:	35404b36 	bltu	r6,r21,e58e8c <_malloc_r+0x5e8>
  e58d60:	00800044 	movi	r2,1
  e58d64:	a0800115 	stw	r2,4(r20)
  e58d68:	003fcd06 	br	e58ca0 <_malloc_r+0x3fc>
  e58d6c:	2808d27a 	srli	r4,r5,9
  e58d70:	2000371e 	bne	r4,zero,e58e50 <_malloc_r+0x5ac>
  e58d74:	2808d0fa 	srli	r4,r5,3
  e58d78:	200690fa 	slli	r3,r4,3
  e58d7c:	1ad1883a 	add	r8,r3,r11
  e58d80:	41800217 	ldw	r6,8(r8)
  e58d84:	41805b26 	beq	r8,r6,e58ef4 <_malloc_r+0x650>
  e58d88:	30800117 	ldw	r2,4(r6)
  e58d8c:	00ffff04 	movi	r3,-4
  e58d90:	10c4703a 	and	r2,r2,r3
  e58d94:	2880022e 	bgeu	r5,r2,e58da0 <_malloc_r+0x4fc>
  e58d98:	31800217 	ldw	r6,8(r6)
  e58d9c:	41bffa1e 	bne	r8,r6,e58d88 <_malloc_r+0x4e4>
  e58da0:	32000317 	ldw	r8,12(r6)
  e58da4:	39c00117 	ldw	r7,4(r7)
  e58da8:	82000315 	stw	r8,12(r16)
  e58dac:	81800215 	stw	r6,8(r16)
  e58db0:	070039b4 	movhi	fp,230
  e58db4:	e706bc04 	addi	fp,fp,6896
  e58db8:	34000315 	stw	r16,12(r6)
  e58dbc:	44000215 	stw	r16,8(r8)
  e58dc0:	003f3e06 	br	e58abc <_malloc_r+0x218>
  e58dc4:	63000044 	addi	r12,r12,1
  e58dc8:	608000cc 	andi	r2,r12,3
  e58dcc:	10005d26 	beq	r2,zero,e58f44 <_malloc_r+0x6a0>
  e58dd0:	18c00204 	addi	r3,r3,8
  e58dd4:	003f5106 	br	e58b1c <_malloc_r+0x278>
  e58dd8:	8089883a 	add	r4,r16,r2
  e58ddc:	003f6d06 	br	e58b94 <_malloc_r+0x2f0>
  e58de0:	00805504 	movi	r2,340
  e58de4:	10c02036 	bltu	r2,r3,e58e68 <_malloc_r+0x5c4>
  e58de8:	8804d3fa 	srli	r2,r17,15
  e58dec:	11801dc4 	addi	r6,r2,119
  e58df0:	300490fa 	slli	r2,r6,3
  e58df4:	003ed806 	br	e58958 <_malloc_r+0xb4>
  e58df8:	48c000c4 	addi	r3,r9,3
  e58dfc:	003f3106 	br	e58ac4 <_malloc_r+0x220>
  e58e00:	05c039b4 	movhi	r23,230
  e58e04:	bdd3b304 	addi	r23,r23,20172
  e58e08:	b8800017 	ldw	r2,0(r23)
  e58e0c:	988d883a 	add	r6,r19,r2
  e58e10:	b9800015 	stw	r6,0(r23)
  e58e14:	293fb21e 	bne	r5,r4,e58ce0 <_malloc_r+0x43c>
  e58e18:	2083ffcc 	andi	r2,r4,4095
  e58e1c:	103fb01e 	bne	r2,zero,e58ce0 <_malloc_r+0x43c>
  e58e20:	e4000217 	ldw	r16,8(fp)
  e58e24:	9d45883a 	add	r2,r19,r21
  e58e28:	10800054 	ori	r2,r2,1
  e58e2c:	80800115 	stw	r2,4(r16)
  e58e30:	b8c00017 	ldw	r3,0(r23)
  e58e34:	d0a71917 	ldw	r2,-25500(gp)
  e58e38:	10c0012e 	bgeu	r2,r3,e58e40 <_malloc_r+0x59c>
  e58e3c:	d0e71915 	stw	r3,-25500(gp)
  e58e40:	d0a71a17 	ldw	r2,-25496(gp)
  e58e44:	10ff962e 	bgeu	r2,r3,e58ca0 <_malloc_r+0x3fc>
  e58e48:	d0e71a15 	stw	r3,-25496(gp)
  e58e4c:	003f9406 	br	e58ca0 <_malloc_r+0x3fc>
  e58e50:	00800104 	movi	r2,4
  e58e54:	11001e36 	bltu	r2,r4,e58ed0 <_malloc_r+0x62c>
  e58e58:	2804d1ba 	srli	r2,r5,6
  e58e5c:	11000e04 	addi	r4,r2,56
  e58e60:	200690fa 	slli	r3,r4,3
  e58e64:	003fc506 	br	e58d7c <_malloc_r+0x4d8>
  e58e68:	00815504 	movi	r2,1364
  e58e6c:	10c01d2e 	bgeu	r2,r3,e58ee4 <_malloc_r+0x640>
  e58e70:	01801f84 	movi	r6,126
  e58e74:	0080fc04 	movi	r2,1008
  e58e78:	003eb706 	br	e58958 <_malloc_r+0xb4>
  e58e7c:	00800204 	movi	r2,8
  e58e80:	10cbc83a 	sub	r5,r2,r3
  e58e84:	2169883a 	add	r20,r4,r5
  e58e88:	003f9e06 	br	e58d04 <_malloc_r+0x460>
  e58e8c:	00bffe04 	movi	r2,-8
  e58e90:	a93ffd04 	addi	r4,r21,-12
  e58e94:	2088703a 	and	r4,r4,r2
  e58e98:	b10b883a 	add	r5,r22,r4
  e58e9c:	00c00144 	movi	r3,5
  e58ea0:	28c00215 	stw	r3,8(r5)
  e58ea4:	28c00115 	stw	r3,4(r5)
  e58ea8:	b0800117 	ldw	r2,4(r22)
  e58eac:	1080004c 	andi	r2,r2,1
  e58eb0:	2084b03a 	or	r2,r4,r2
  e58eb4:	b0800115 	stw	r2,4(r22)
  e58eb8:	313fdd2e 	bgeu	r6,r4,e58e30 <_malloc_r+0x58c>
  e58ebc:	b1400204 	addi	r5,r22,8
  e58ec0:	9009883a 	mov	r4,r18
  e58ec4:	0e57d1c0 	call	e57d1c <_free_r>
  e58ec8:	e4000217 	ldw	r16,8(fp)
  e58ecc:	003fd806 	br	e58e30 <_malloc_r+0x58c>
  e58ed0:	00800504 	movi	r2,20
  e58ed4:	11001536 	bltu	r2,r4,e58f2c <_malloc_r+0x688>
  e58ed8:	210016c4 	addi	r4,r4,91
  e58edc:	200690fa 	slli	r3,r4,3
  e58ee0:	003fa606 	br	e58d7c <_malloc_r+0x4d8>
  e58ee4:	8804d4ba 	srli	r2,r17,18
  e58ee8:	11801f04 	addi	r6,r2,124
  e58eec:	300490fa 	slli	r2,r6,3
  e58ef0:	003e9906 	br	e58958 <_malloc_r+0xb4>
  e58ef4:	2009d0ba 	srai	r4,r4,2
  e58ef8:	014039b4 	movhi	r5,230
  e58efc:	2946bc04 	addi	r5,r5,6896
  e58f00:	00c00044 	movi	r3,1
  e58f04:	28800117 	ldw	r2,4(r5)
  e58f08:	1906983a 	sll	r3,r3,r4
  e58f0c:	10c4b03a 	or	r2,r2,r3
  e58f10:	28800115 	stw	r2,4(r5)
  e58f14:	003fa306 	br	e58da4 <_malloc_r+0x500>
  e58f18:	0027883a 	mov	r19,zero
  e58f1c:	00c00044 	movi	r3,1
  e58f20:	003f8606 	br	e58d3c <_malloc_r+0x498>
  e58f24:	d1200f15 	stw	r4,-32708(gp)
  e58f28:	003f7306 	br	e58cf8 <_malloc_r+0x454>
  e58f2c:	00801504 	movi	r2,84
  e58f30:	11001936 	bltu	r2,r4,e58f98 <_malloc_r+0x6f4>
  e58f34:	2804d33a 	srli	r2,r5,12
  e58f38:	11001b84 	addi	r4,r2,110
  e58f3c:	200690fa 	slli	r3,r4,3
  e58f40:	003f8e06 	br	e58d7c <_malloc_r+0x4d8>
  e58f44:	480b883a 	mov	r5,r9
  e58f48:	6807883a 	mov	r3,r13
  e58f4c:	288000cc 	andi	r2,r5,3
  e58f50:	18fffe04 	addi	r3,r3,-8
  e58f54:	297fffc4 	addi	r5,r5,-1
  e58f58:	10001526 	beq	r2,zero,e58fb0 <_malloc_r+0x70c>
  e58f5c:	18800217 	ldw	r2,8(r3)
  e58f60:	10fffa26 	beq	r2,r3,e58f4c <_malloc_r+0x6a8>
  e58f64:	2109883a 	add	r4,r4,r4
  e58f68:	393f1e36 	bltu	r7,r4,e58be4 <_malloc_r+0x340>
  e58f6c:	203f1d26 	beq	r4,zero,e58be4 <_malloc_r+0x340>
  e58f70:	21c4703a 	and	r2,r4,r7
  e58f74:	10000226 	beq	r2,zero,e58f80 <_malloc_r+0x6dc>
  e58f78:	6013883a 	mov	r9,r12
  e58f7c:	003ee106 	br	e58b04 <_malloc_r+0x260>
  e58f80:	2109883a 	add	r4,r4,r4
  e58f84:	3904703a 	and	r2,r7,r4
  e58f88:	63000104 	addi	r12,r12,4
  e58f8c:	103ffc26 	beq	r2,zero,e58f80 <_malloc_r+0x6dc>
  e58f90:	6013883a 	mov	r9,r12
  e58f94:	003edb06 	br	e58b04 <_malloc_r+0x260>
  e58f98:	00805504 	movi	r2,340
  e58f9c:	11000836 	bltu	r2,r4,e58fc0 <_malloc_r+0x71c>
  e58fa0:	2804d3fa 	srli	r2,r5,15
  e58fa4:	11001dc4 	addi	r4,r2,119
  e58fa8:	200690fa 	slli	r3,r4,3
  e58fac:	003f7306 	br	e58d7c <_malloc_r+0x4d8>
  e58fb0:	0104303a 	nor	r2,zero,r4
  e58fb4:	388e703a 	and	r7,r7,r2
  e58fb8:	e1c00115 	stw	r7,4(fp)
  e58fbc:	003fe906 	br	e58f64 <_malloc_r+0x6c0>
  e58fc0:	00815504 	movi	r2,1364
  e58fc4:	1100032e 	bgeu	r2,r4,e58fd4 <_malloc_r+0x730>
  e58fc8:	01001f84 	movi	r4,126
  e58fcc:	00c0fc04 	movi	r3,1008
  e58fd0:	003f6a06 	br	e58d7c <_malloc_r+0x4d8>
  e58fd4:	2804d4ba 	srli	r2,r5,18
  e58fd8:	11001f04 	addi	r4,r2,124
  e58fdc:	200690fa 	slli	r3,r4,3
  e58fe0:	003f6606 	br	e58d7c <_malloc_r+0x4d8>

00e58fe4 <memchr>:
  e58fe4:	008000c4 	movi	r2,3
  e58fe8:	29403fcc 	andi	r5,r5,255
  e58fec:	2007883a 	mov	r3,r4
  e58ff0:	1180022e 	bgeu	r2,r6,e58ffc <memchr+0x18>
  e58ff4:	2084703a 	and	r2,r4,r2
  e58ff8:	10000b26 	beq	r2,zero,e59028 <memchr+0x44>
  e58ffc:	313fffc4 	addi	r4,r6,-1
  e59000:	3000051e 	bne	r6,zero,e59018 <memchr+0x34>
  e59004:	00002c06 	br	e590b8 <memchr+0xd4>
  e59008:	213fffc4 	addi	r4,r4,-1
  e5900c:	00bfffc4 	movi	r2,-1
  e59010:	18c00044 	addi	r3,r3,1
  e59014:	20802826 	beq	r4,r2,e590b8 <memchr+0xd4>
  e59018:	18800003 	ldbu	r2,0(r3)
  e5901c:	28bffa1e 	bne	r5,r2,e59008 <memchr+0x24>
  e59020:	1805883a 	mov	r2,r3
  e59024:	f800283a 	ret
  e59028:	0011883a 	mov	r8,zero
  e5902c:	0007883a 	mov	r3,zero
  e59030:	01c00104 	movi	r7,4
  e59034:	4004923a 	slli	r2,r8,8
  e59038:	18c00044 	addi	r3,r3,1
  e5903c:	1151883a 	add	r8,r2,r5
  e59040:	19fffc1e 	bne	r3,r7,e59034 <memchr+0x50>
  e59044:	02bfbff4 	movhi	r10,65279
  e59048:	52bfbfc4 	addi	r10,r10,-257
  e5904c:	02602074 	movhi	r9,32897
  e59050:	4a602004 	addi	r9,r9,-32640
  e59054:	02c000c4 	movi	r11,3
  e59058:	20800017 	ldw	r2,0(r4)
  e5905c:	31bfff04 	addi	r6,r6,-4
  e59060:	200f883a 	mov	r7,r4
  e59064:	1204f03a 	xor	r2,r2,r8
  e59068:	1287883a 	add	r3,r2,r10
  e5906c:	1a46703a 	and	r3,r3,r9
  e59070:	0084303a 	nor	r2,zero,r2
  e59074:	10c4703a 	and	r2,r2,r3
  e59078:	10000b26 	beq	r2,zero,e590a8 <memchr+0xc4>
  e5907c:	20800003 	ldbu	r2,0(r4)
  e59080:	28800f26 	beq	r5,r2,e590c0 <memchr+0xdc>
  e59084:	20800043 	ldbu	r2,1(r4)
  e59088:	21c00044 	addi	r7,r4,1
  e5908c:	28800c26 	beq	r5,r2,e590c0 <memchr+0xdc>
  e59090:	20800083 	ldbu	r2,2(r4)
  e59094:	21c00084 	addi	r7,r4,2
  e59098:	28800926 	beq	r5,r2,e590c0 <memchr+0xdc>
  e5909c:	208000c3 	ldbu	r2,3(r4)
  e590a0:	21c000c4 	addi	r7,r4,3
  e590a4:	28800626 	beq	r5,r2,e590c0 <memchr+0xdc>
  e590a8:	21000104 	addi	r4,r4,4
  e590ac:	59bfea36 	bltu	r11,r6,e59058 <memchr+0x74>
  e590b0:	2007883a 	mov	r3,r4
  e590b4:	003fd106 	br	e58ffc <memchr+0x18>
  e590b8:	0005883a 	mov	r2,zero
  e590bc:	f800283a 	ret
  e590c0:	3805883a 	mov	r2,r7
  e590c4:	f800283a 	ret

00e590c8 <memcpy>:
  e590c8:	01c003c4 	movi	r7,15
  e590cc:	2007883a 	mov	r3,r4
  e590d0:	3980032e 	bgeu	r7,r6,e590e0 <memcpy+0x18>
  e590d4:	2904b03a 	or	r2,r5,r4
  e590d8:	108000cc 	andi	r2,r2,3
  e590dc:	10000926 	beq	r2,zero,e59104 <memcpy+0x3c>
  e590e0:	30000626 	beq	r6,zero,e590fc <memcpy+0x34>
  e590e4:	30cd883a 	add	r6,r6,r3
  e590e8:	28800003 	ldbu	r2,0(r5)
  e590ec:	29400044 	addi	r5,r5,1
  e590f0:	18800005 	stb	r2,0(r3)
  e590f4:	18c00044 	addi	r3,r3,1
  e590f8:	30fffb1e 	bne	r6,r3,e590e8 <memcpy+0x20>
  e590fc:	2005883a 	mov	r2,r4
  e59100:	f800283a 	ret
  e59104:	3811883a 	mov	r8,r7
  e59108:	200f883a 	mov	r7,r4
  e5910c:	28c00017 	ldw	r3,0(r5)
  e59110:	31bffc04 	addi	r6,r6,-16
  e59114:	38c00015 	stw	r3,0(r7)
  e59118:	28800117 	ldw	r2,4(r5)
  e5911c:	38800115 	stw	r2,4(r7)
  e59120:	28c00217 	ldw	r3,8(r5)
  e59124:	38c00215 	stw	r3,8(r7)
  e59128:	28800317 	ldw	r2,12(r5)
  e5912c:	29400404 	addi	r5,r5,16
  e59130:	38800315 	stw	r2,12(r7)
  e59134:	39c00404 	addi	r7,r7,16
  e59138:	41bff436 	bltu	r8,r6,e5910c <memcpy+0x44>
  e5913c:	008000c4 	movi	r2,3
  e59140:	1180072e 	bgeu	r2,r6,e59160 <memcpy+0x98>
  e59144:	1007883a 	mov	r3,r2
  e59148:	28800017 	ldw	r2,0(r5)
  e5914c:	31bfff04 	addi	r6,r6,-4
  e59150:	29400104 	addi	r5,r5,4
  e59154:	38800015 	stw	r2,0(r7)
  e59158:	39c00104 	addi	r7,r7,4
  e5915c:	19bffa36 	bltu	r3,r6,e59148 <memcpy+0x80>
  e59160:	3807883a 	mov	r3,r7
  e59164:	003fde06 	br	e590e0 <memcpy+0x18>

00e59168 <memmove>:
  e59168:	2807883a 	mov	r3,r5
  e5916c:	2011883a 	mov	r8,r4
  e59170:	29000c2e 	bgeu	r5,r4,e591a4 <memmove+0x3c>
  e59174:	298f883a 	add	r7,r5,r6
  e59178:	21c00a2e 	bgeu	r4,r7,e591a4 <memmove+0x3c>
  e5917c:	30000726 	beq	r6,zero,e5919c <memmove+0x34>
  e59180:	2187883a 	add	r3,r4,r6
  e59184:	198dc83a 	sub	r6,r3,r6
  e59188:	39ffffc4 	addi	r7,r7,-1
  e5918c:	38800003 	ldbu	r2,0(r7)
  e59190:	18ffffc4 	addi	r3,r3,-1
  e59194:	18800005 	stb	r2,0(r3)
  e59198:	19bffb1e 	bne	r3,r6,e59188 <memmove+0x20>
  e5919c:	2005883a 	mov	r2,r4
  e591a0:	f800283a 	ret
  e591a4:	01c003c4 	movi	r7,15
  e591a8:	39800a36 	bltu	r7,r6,e591d4 <memmove+0x6c>
  e591ac:	303ffb26 	beq	r6,zero,e5919c <memmove+0x34>
  e591b0:	400f883a 	mov	r7,r8
  e591b4:	320d883a 	add	r6,r6,r8
  e591b8:	28800003 	ldbu	r2,0(r5)
  e591bc:	29400044 	addi	r5,r5,1
  e591c0:	38800005 	stb	r2,0(r7)
  e591c4:	39c00044 	addi	r7,r7,1
  e591c8:	39bffb1e 	bne	r7,r6,e591b8 <memmove+0x50>
  e591cc:	2005883a 	mov	r2,r4
  e591d0:	f800283a 	ret
  e591d4:	1904b03a 	or	r2,r3,r4
  e591d8:	108000cc 	andi	r2,r2,3
  e591dc:	103ff31e 	bne	r2,zero,e591ac <memmove+0x44>
  e591e0:	3811883a 	mov	r8,r7
  e591e4:	180b883a 	mov	r5,r3
  e591e8:	200f883a 	mov	r7,r4
  e591ec:	28c00017 	ldw	r3,0(r5)
  e591f0:	31bffc04 	addi	r6,r6,-16
  e591f4:	38c00015 	stw	r3,0(r7)
  e591f8:	28800117 	ldw	r2,4(r5)
  e591fc:	38800115 	stw	r2,4(r7)
  e59200:	28c00217 	ldw	r3,8(r5)
  e59204:	38c00215 	stw	r3,8(r7)
  e59208:	28800317 	ldw	r2,12(r5)
  e5920c:	29400404 	addi	r5,r5,16
  e59210:	38800315 	stw	r2,12(r7)
  e59214:	39c00404 	addi	r7,r7,16
  e59218:	41bff436 	bltu	r8,r6,e591ec <memmove+0x84>
  e5921c:	008000c4 	movi	r2,3
  e59220:	1180072e 	bgeu	r2,r6,e59240 <memmove+0xd8>
  e59224:	1007883a 	mov	r3,r2
  e59228:	28800017 	ldw	r2,0(r5)
  e5922c:	31bfff04 	addi	r6,r6,-4
  e59230:	29400104 	addi	r5,r5,4
  e59234:	38800015 	stw	r2,0(r7)
  e59238:	39c00104 	addi	r7,r7,4
  e5923c:	19bffa36 	bltu	r3,r6,e59228 <memmove+0xc0>
  e59240:	3811883a 	mov	r8,r7
  e59244:	003fd906 	br	e591ac <memmove+0x44>

00e59248 <memset>:
  e59248:	008000c4 	movi	r2,3
  e5924c:	29403fcc 	andi	r5,r5,255
  e59250:	2007883a 	mov	r3,r4
  e59254:	1180022e 	bgeu	r2,r6,e59260 <memset+0x18>
  e59258:	2084703a 	and	r2,r4,r2
  e5925c:	10000826 	beq	r2,zero,e59280 <memset+0x38>
  e59260:	30000526 	beq	r6,zero,e59278 <memset+0x30>
  e59264:	2805883a 	mov	r2,r5
  e59268:	30cd883a 	add	r6,r6,r3
  e5926c:	18800005 	stb	r2,0(r3)
  e59270:	18c00044 	addi	r3,r3,1
  e59274:	19bffd1e 	bne	r3,r6,e5926c <memset+0x24>
  e59278:	2005883a 	mov	r2,r4
  e5927c:	f800283a 	ret
  e59280:	2804923a 	slli	r2,r5,8
  e59284:	020003c4 	movi	r8,15
  e59288:	200f883a 	mov	r7,r4
  e5928c:	2884b03a 	or	r2,r5,r2
  e59290:	1006943a 	slli	r3,r2,16
  e59294:	10c6b03a 	or	r3,r2,r3
  e59298:	41800a2e 	bgeu	r8,r6,e592c4 <memset+0x7c>
  e5929c:	4005883a 	mov	r2,r8
  e592a0:	31bffc04 	addi	r6,r6,-16
  e592a4:	38c00015 	stw	r3,0(r7)
  e592a8:	38c00115 	stw	r3,4(r7)
  e592ac:	38c00215 	stw	r3,8(r7)
  e592b0:	38c00315 	stw	r3,12(r7)
  e592b4:	39c00404 	addi	r7,r7,16
  e592b8:	11bff936 	bltu	r2,r6,e592a0 <memset+0x58>
  e592bc:	008000c4 	movi	r2,3
  e592c0:	1180052e 	bgeu	r2,r6,e592d8 <memset+0x90>
  e592c4:	31bfff04 	addi	r6,r6,-4
  e592c8:	008000c4 	movi	r2,3
  e592cc:	38c00015 	stw	r3,0(r7)
  e592d0:	39c00104 	addi	r7,r7,4
  e592d4:	11bffb36 	bltu	r2,r6,e592c4 <memset+0x7c>
  e592d8:	3807883a 	mov	r3,r7
  e592dc:	003fe006 	br	e59260 <memset+0x18>

00e592e0 <_Bfree>:
  e592e0:	28000826 	beq	r5,zero,e59304 <_Bfree+0x24>
  e592e4:	28800117 	ldw	r2,4(r5)
  e592e8:	21001317 	ldw	r4,76(r4)
  e592ec:	1085883a 	add	r2,r2,r2
  e592f0:	1085883a 	add	r2,r2,r2
  e592f4:	1105883a 	add	r2,r2,r4
  e592f8:	10c00017 	ldw	r3,0(r2)
  e592fc:	28c00015 	stw	r3,0(r5)
  e59300:	11400015 	stw	r5,0(r2)
  e59304:	f800283a 	ret

00e59308 <__hi0bits>:
  e59308:	20bfffec 	andhi	r2,r4,65535
  e5930c:	10001426 	beq	r2,zero,e59360 <__hi0bits+0x58>
  e59310:	0007883a 	mov	r3,zero
  e59314:	20bfc02c 	andhi	r2,r4,65280
  e59318:	1000021e 	bne	r2,zero,e59324 <__hi0bits+0x1c>
  e5931c:	2008923a 	slli	r4,r4,8
  e59320:	18c00204 	addi	r3,r3,8
  e59324:	20bc002c 	andhi	r2,r4,61440
  e59328:	1000021e 	bne	r2,zero,e59334 <__hi0bits+0x2c>
  e5932c:	2008913a 	slli	r4,r4,4
  e59330:	18c00104 	addi	r3,r3,4
  e59334:	20b0002c 	andhi	r2,r4,49152
  e59338:	1000031e 	bne	r2,zero,e59348 <__hi0bits+0x40>
  e5933c:	2105883a 	add	r2,r4,r4
  e59340:	18c00084 	addi	r3,r3,2
  e59344:	1089883a 	add	r4,r2,r2
  e59348:	20000316 	blt	r4,zero,e59358 <__hi0bits+0x50>
  e5934c:	2090002c 	andhi	r2,r4,16384
  e59350:	10000626 	beq	r2,zero,e5936c <__hi0bits+0x64>
  e59354:	18c00044 	addi	r3,r3,1
  e59358:	1805883a 	mov	r2,r3
  e5935c:	f800283a 	ret
  e59360:	2008943a 	slli	r4,r4,16
  e59364:	00c00404 	movi	r3,16
  e59368:	003fea06 	br	e59314 <__hi0bits+0xc>
  e5936c:	00c00804 	movi	r3,32
  e59370:	1805883a 	mov	r2,r3
  e59374:	f800283a 	ret

00e59378 <__lo0bits>:
  e59378:	20c00017 	ldw	r3,0(r4)
  e5937c:	188001cc 	andi	r2,r3,7
  e59380:	10000a26 	beq	r2,zero,e593ac <__lo0bits+0x34>
  e59384:	1880004c 	andi	r2,r3,1
  e59388:	1005003a 	cmpeq	r2,r2,zero
  e5938c:	10002126 	beq	r2,zero,e59414 <__lo0bits+0x9c>
  e59390:	1880008c 	andi	r2,r3,2
  e59394:	1000251e 	bne	r2,zero,e5942c <__lo0bits+0xb4>
  e59398:	1804d0ba 	srli	r2,r3,2
  e5939c:	01400084 	movi	r5,2
  e593a0:	20800015 	stw	r2,0(r4)
  e593a4:	2805883a 	mov	r2,r5
  e593a8:	f800283a 	ret
  e593ac:	18bfffcc 	andi	r2,r3,65535
  e593b0:	10001526 	beq	r2,zero,e59408 <__lo0bits+0x90>
  e593b4:	000b883a 	mov	r5,zero
  e593b8:	18803fcc 	andi	r2,r3,255
  e593bc:	1000021e 	bne	r2,zero,e593c8 <__lo0bits+0x50>
  e593c0:	1806d23a 	srli	r3,r3,8
  e593c4:	29400204 	addi	r5,r5,8
  e593c8:	188003cc 	andi	r2,r3,15
  e593cc:	1000021e 	bne	r2,zero,e593d8 <__lo0bits+0x60>
  e593d0:	1806d13a 	srli	r3,r3,4
  e593d4:	29400104 	addi	r5,r5,4
  e593d8:	188000cc 	andi	r2,r3,3
  e593dc:	1000021e 	bne	r2,zero,e593e8 <__lo0bits+0x70>
  e593e0:	1806d0ba 	srli	r3,r3,2
  e593e4:	29400084 	addi	r5,r5,2
  e593e8:	1880004c 	andi	r2,r3,1
  e593ec:	1000031e 	bne	r2,zero,e593fc <__lo0bits+0x84>
  e593f0:	1806d07a 	srli	r3,r3,1
  e593f4:	18000a26 	beq	r3,zero,e59420 <__lo0bits+0xa8>
  e593f8:	29400044 	addi	r5,r5,1
  e593fc:	2805883a 	mov	r2,r5
  e59400:	20c00015 	stw	r3,0(r4)
  e59404:	f800283a 	ret
  e59408:	1806d43a 	srli	r3,r3,16
  e5940c:	01400404 	movi	r5,16
  e59410:	003fe906 	br	e593b8 <__lo0bits+0x40>
  e59414:	000b883a 	mov	r5,zero
  e59418:	2805883a 	mov	r2,r5
  e5941c:	f800283a 	ret
  e59420:	01400804 	movi	r5,32
  e59424:	2805883a 	mov	r2,r5
  e59428:	f800283a 	ret
  e5942c:	1804d07a 	srli	r2,r3,1
  e59430:	01400044 	movi	r5,1
  e59434:	20800015 	stw	r2,0(r4)
  e59438:	003fda06 	br	e593a4 <__lo0bits+0x2c>

00e5943c <__mcmp>:
  e5943c:	20800417 	ldw	r2,16(r4)
  e59440:	28c00417 	ldw	r3,16(r5)
  e59444:	10cfc83a 	sub	r7,r2,r3
  e59448:	38000c1e 	bne	r7,zero,e5947c <__mcmp+0x40>
  e5944c:	18c5883a 	add	r2,r3,r3
  e59450:	1085883a 	add	r2,r2,r2
  e59454:	10c00504 	addi	r3,r2,20
  e59458:	21000504 	addi	r4,r4,20
  e5945c:	28cb883a 	add	r5,r5,r3
  e59460:	2085883a 	add	r2,r4,r2
  e59464:	10bfff04 	addi	r2,r2,-4
  e59468:	297fff04 	addi	r5,r5,-4
  e5946c:	11800017 	ldw	r6,0(r2)
  e59470:	28c00017 	ldw	r3,0(r5)
  e59474:	30c0031e 	bne	r6,r3,e59484 <__mcmp+0x48>
  e59478:	20bffa36 	bltu	r4,r2,e59464 <__mcmp+0x28>
  e5947c:	3805883a 	mov	r2,r7
  e59480:	f800283a 	ret
  e59484:	30c00336 	bltu	r6,r3,e59494 <__mcmp+0x58>
  e59488:	01c00044 	movi	r7,1
  e5948c:	3805883a 	mov	r2,r7
  e59490:	f800283a 	ret
  e59494:	01ffffc4 	movi	r7,-1
  e59498:	003ff806 	br	e5947c <__mcmp+0x40>

00e5949c <__ulp>:
  e5949c:	295ffc2c 	andhi	r5,r5,32752
  e594a0:	013f3034 	movhi	r4,64704
  e594a4:	290b883a 	add	r5,r5,r4
  e594a8:	0145c83a 	sub	r2,zero,r5
  e594ac:	1007d53a 	srai	r3,r2,20
  e594b0:	000d883a 	mov	r6,zero
  e594b4:	0140040e 	bge	zero,r5,e594c8 <__ulp+0x2c>
  e594b8:	280f883a 	mov	r7,r5
  e594bc:	3807883a 	mov	r3,r7
  e594c0:	3005883a 	mov	r2,r6
  e594c4:	f800283a 	ret
  e594c8:	008004c4 	movi	r2,19
  e594cc:	193ffb04 	addi	r4,r3,-20
  e594d0:	10c00c0e 	bge	r2,r3,e59504 <__ulp+0x68>
  e594d4:	008007c4 	movi	r2,31
  e594d8:	1107c83a 	sub	r3,r2,r4
  e594dc:	00800784 	movi	r2,30
  e594e0:	01400044 	movi	r5,1
  e594e4:	11000216 	blt	r2,r4,e594f0 <__ulp+0x54>
  e594e8:	00800044 	movi	r2,1
  e594ec:	10ca983a 	sll	r5,r2,r3
  e594f0:	000f883a 	mov	r7,zero
  e594f4:	280d883a 	mov	r6,r5
  e594f8:	3807883a 	mov	r3,r7
  e594fc:	3005883a 	mov	r2,r6
  e59500:	f800283a 	ret
  e59504:	00800234 	movhi	r2,8
  e59508:	10cfd83a 	sra	r7,r2,r3
  e5950c:	000d883a 	mov	r6,zero
  e59510:	3005883a 	mov	r2,r6
  e59514:	3807883a 	mov	r3,r7
  e59518:	f800283a 	ret

00e5951c <__b2d>:
  e5951c:	20800417 	ldw	r2,16(r4)
  e59520:	defff904 	addi	sp,sp,-28
  e59524:	dd000415 	stw	r20,16(sp)
  e59528:	1085883a 	add	r2,r2,r2
  e5952c:	25000504 	addi	r20,r4,20
  e59530:	1085883a 	add	r2,r2,r2
  e59534:	dc000015 	stw	r16,0(sp)
  e59538:	a0a1883a 	add	r16,r20,r2
  e5953c:	dd400515 	stw	r21,20(sp)
  e59540:	857fff17 	ldw	r21,-4(r16)
  e59544:	dc400115 	stw	r17,4(sp)
  e59548:	dfc00615 	stw	ra,24(sp)
  e5954c:	a809883a 	mov	r4,r21
  e59550:	2823883a 	mov	r17,r5
  e59554:	dcc00315 	stw	r19,12(sp)
  e59558:	dc800215 	stw	r18,8(sp)
  e5955c:	0e593080 	call	e59308 <__hi0bits>
  e59560:	100b883a 	mov	r5,r2
  e59564:	00800804 	movi	r2,32
  e59568:	1145c83a 	sub	r2,r2,r5
  e5956c:	88800015 	stw	r2,0(r17)
  e59570:	00800284 	movi	r2,10
  e59574:	80ffff04 	addi	r3,r16,-4
  e59578:	11401416 	blt	r2,r5,e595cc <__b2d+0xb0>
  e5957c:	008002c4 	movi	r2,11
  e59580:	1149c83a 	sub	r4,r2,r5
  e59584:	a0c02736 	bltu	r20,r3,e59624 <__b2d+0x108>
  e59588:	000d883a 	mov	r6,zero
  e5958c:	28800544 	addi	r2,r5,21
  e59590:	a906d83a 	srl	r3,r21,r4
  e59594:	a884983a 	sll	r2,r21,r2
  e59598:	1ccffc34 	orhi	r19,r3,16368
  e5959c:	11a4b03a 	or	r18,r2,r6
  e595a0:	9005883a 	mov	r2,r18
  e595a4:	9807883a 	mov	r3,r19
  e595a8:	dfc00617 	ldw	ra,24(sp)
  e595ac:	dd400517 	ldw	r21,20(sp)
  e595b0:	dd000417 	ldw	r20,16(sp)
  e595b4:	dcc00317 	ldw	r19,12(sp)
  e595b8:	dc800217 	ldw	r18,8(sp)
  e595bc:	dc400117 	ldw	r17,4(sp)
  e595c0:	dc000017 	ldw	r16,0(sp)
  e595c4:	dec00704 	addi	sp,sp,28
  e595c8:	f800283a 	ret
  e595cc:	a0c00e36 	bltu	r20,r3,e59608 <__b2d+0xec>
  e595d0:	293ffd44 	addi	r4,r5,-11
  e595d4:	000d883a 	mov	r6,zero
  e595d8:	20000f26 	beq	r4,zero,e59618 <__b2d+0xfc>
  e595dc:	00800804 	movi	r2,32
  e595e0:	110bc83a 	sub	r5,r2,r4
  e595e4:	a0c01236 	bltu	r20,r3,e59630 <__b2d+0x114>
  e595e8:	000f883a 	mov	r7,zero
  e595ec:	a904983a 	sll	r2,r21,r4
  e595f0:	3146d83a 	srl	r3,r6,r5
  e595f4:	3108983a 	sll	r4,r6,r4
  e595f8:	108ffc34 	orhi	r2,r2,16368
  e595fc:	18a6b03a 	or	r19,r3,r2
  e59600:	3924b03a 	or	r18,r7,r4
  e59604:	003fe606 	br	e595a0 <__b2d+0x84>
  e59608:	293ffd44 	addi	r4,r5,-11
  e5960c:	81bffe17 	ldw	r6,-8(r16)
  e59610:	80fffe04 	addi	r3,r16,-8
  e59614:	203ff11e 	bne	r4,zero,e595dc <__b2d+0xc0>
  e59618:	accffc34 	orhi	r19,r21,16368
  e5961c:	3025883a 	mov	r18,r6
  e59620:	003fdf06 	br	e595a0 <__b2d+0x84>
  e59624:	18bfff17 	ldw	r2,-4(r3)
  e59628:	110cd83a 	srl	r6,r2,r4
  e5962c:	003fd706 	br	e5958c <__b2d+0x70>
  e59630:	18bfff17 	ldw	r2,-4(r3)
  e59634:	114ed83a 	srl	r7,r2,r5
  e59638:	003fec06 	br	e595ec <__b2d+0xd0>

00e5963c <__ratio>:
  e5963c:	defff904 	addi	sp,sp,-28
  e59640:	dc400215 	stw	r17,8(sp)
  e59644:	2823883a 	mov	r17,r5
  e59648:	d80b883a 	mov	r5,sp
  e5964c:	dfc00615 	stw	ra,24(sp)
  e59650:	dd000515 	stw	r20,20(sp)
  e59654:	dcc00415 	stw	r19,16(sp)
  e59658:	dc800315 	stw	r18,12(sp)
  e5965c:	2025883a 	mov	r18,r4
  e59660:	0e5951c0 	call	e5951c <__b2d>
  e59664:	8809883a 	mov	r4,r17
  e59668:	d9400104 	addi	r5,sp,4
  e5966c:	1027883a 	mov	r19,r2
  e59670:	1829883a 	mov	r20,r3
  e59674:	0e5951c0 	call	e5951c <__b2d>
  e59678:	89000417 	ldw	r4,16(r17)
  e5967c:	91c00417 	ldw	r7,16(r18)
  e59680:	d9800117 	ldw	r6,4(sp)
  e59684:	180b883a 	mov	r5,r3
  e59688:	390fc83a 	sub	r7,r7,r4
  e5968c:	1009883a 	mov	r4,r2
  e59690:	d8800017 	ldw	r2,0(sp)
  e59694:	380e917a 	slli	r7,r7,5
  e59698:	2011883a 	mov	r8,r4
  e5969c:	1185c83a 	sub	r2,r2,r6
  e596a0:	11c5883a 	add	r2,r2,r7
  e596a4:	1006953a 	slli	r3,r2,20
  e596a8:	2813883a 	mov	r9,r5
  e596ac:	00800d0e 	bge	zero,r2,e596e4 <__ratio+0xa8>
  e596b0:	1d29883a 	add	r20,r3,r20
  e596b4:	a00b883a 	mov	r5,r20
  e596b8:	480f883a 	mov	r7,r9
  e596bc:	9809883a 	mov	r4,r19
  e596c0:	400d883a 	mov	r6,r8
  e596c4:	0e530300 	call	e53030 <__divdf3>
  e596c8:	dfc00617 	ldw	ra,24(sp)
  e596cc:	dd000517 	ldw	r20,20(sp)
  e596d0:	dcc00417 	ldw	r19,16(sp)
  e596d4:	dc800317 	ldw	r18,12(sp)
  e596d8:	dc400217 	ldw	r17,8(sp)
  e596dc:	dec00704 	addi	sp,sp,28
  e596e0:	f800283a 	ret
  e596e4:	28d3c83a 	sub	r9,r5,r3
  e596e8:	003ff206 	br	e596b4 <__ratio+0x78>

00e596ec <_mprec_log10>:
  e596ec:	defffe04 	addi	sp,sp,-8
  e596f0:	008005c4 	movi	r2,23
  e596f4:	dc000015 	stw	r16,0(sp)
  e596f8:	dfc00115 	stw	ra,4(sp)
  e596fc:	2021883a 	mov	r16,r4
  e59700:	11000c16 	blt	r2,r4,e59734 <_mprec_log10+0x48>
  e59704:	200490fa 	slli	r2,r4,3
  e59708:	00c039b4 	movhi	r3,230
  e5970c:	18c51b04 	addi	r3,r3,5228
  e59710:	10c5883a 	add	r2,r2,r3
  e59714:	12400117 	ldw	r9,4(r2)
  e59718:	12000017 	ldw	r8,0(r2)
  e5971c:	4807883a 	mov	r3,r9
  e59720:	4005883a 	mov	r2,r8
  e59724:	dfc00117 	ldw	ra,4(sp)
  e59728:	dc000017 	ldw	r16,0(sp)
  e5972c:	dec00204 	addi	sp,sp,8
  e59730:	f800283a 	ret
  e59734:	0011883a 	mov	r8,zero
  e59738:	024ffc34 	movhi	r9,16368
  e5973c:	0005883a 	mov	r2,zero
  e59740:	00d00934 	movhi	r3,16420
  e59744:	480b883a 	mov	r5,r9
  e59748:	4009883a 	mov	r4,r8
  e5974c:	180f883a 	mov	r7,r3
  e59750:	100d883a 	mov	r6,r2
  e59754:	0e5bbd00 	call	e5bbd0 <__muldf3>
  e59758:	843fffc4 	addi	r16,r16,-1
  e5975c:	1011883a 	mov	r8,r2
  e59760:	1813883a 	mov	r9,r3
  e59764:	803ff51e 	bne	r16,zero,e5973c <_mprec_log10+0x50>
  e59768:	4005883a 	mov	r2,r8
  e5976c:	4807883a 	mov	r3,r9
  e59770:	dfc00117 	ldw	ra,4(sp)
  e59774:	dc000017 	ldw	r16,0(sp)
  e59778:	dec00204 	addi	sp,sp,8
  e5977c:	f800283a 	ret

00e59780 <__copybits>:
  e59780:	297fffc4 	addi	r5,r5,-1
  e59784:	30800417 	ldw	r2,16(r6)
  e59788:	280bd17a 	srai	r5,r5,5
  e5978c:	31800504 	addi	r6,r6,20
  e59790:	1085883a 	add	r2,r2,r2
  e59794:	294b883a 	add	r5,r5,r5
  e59798:	294b883a 	add	r5,r5,r5
  e5979c:	1085883a 	add	r2,r2,r2
  e597a0:	290b883a 	add	r5,r5,r4
  e597a4:	3087883a 	add	r3,r6,r2
  e597a8:	29400104 	addi	r5,r5,4
  e597ac:	30c0052e 	bgeu	r6,r3,e597c4 <__copybits+0x44>
  e597b0:	30800017 	ldw	r2,0(r6)
  e597b4:	31800104 	addi	r6,r6,4
  e597b8:	20800015 	stw	r2,0(r4)
  e597bc:	21000104 	addi	r4,r4,4
  e597c0:	30fffb36 	bltu	r6,r3,e597b0 <__copybits+0x30>
  e597c4:	2140032e 	bgeu	r4,r5,e597d4 <__copybits+0x54>
  e597c8:	20000015 	stw	zero,0(r4)
  e597cc:	21000104 	addi	r4,r4,4
  e597d0:	217ffd36 	bltu	r4,r5,e597c8 <__copybits+0x48>
  e597d4:	f800283a 	ret

00e597d8 <__any_on>:
  e597d8:	20800417 	ldw	r2,16(r4)
  e597dc:	2807d17a 	srai	r3,r5,5
  e597e0:	21000504 	addi	r4,r4,20
  e597e4:	10c00d0e 	bge	r2,r3,e5981c <__any_on+0x44>
  e597e8:	1085883a 	add	r2,r2,r2
  e597ec:	1085883a 	add	r2,r2,r2
  e597f0:	208d883a 	add	r6,r4,r2
  e597f4:	2180182e 	bgeu	r4,r6,e59858 <__any_on+0x80>
  e597f8:	30bfff17 	ldw	r2,-4(r6)
  e597fc:	30ffff04 	addi	r3,r6,-4
  e59800:	1000041e 	bne	r2,zero,e59814 <__any_on+0x3c>
  e59804:	20c0142e 	bgeu	r4,r3,e59858 <__any_on+0x80>
  e59808:	18ffff04 	addi	r3,r3,-4
  e5980c:	18800017 	ldw	r2,0(r3)
  e59810:	103ffc26 	beq	r2,zero,e59804 <__any_on+0x2c>
  e59814:	00800044 	movi	r2,1
  e59818:	f800283a 	ret
  e5981c:	18800a0e 	bge	r3,r2,e59848 <__any_on+0x70>
  e59820:	294007cc 	andi	r5,r5,31
  e59824:	28000826 	beq	r5,zero,e59848 <__any_on+0x70>
  e59828:	18c5883a 	add	r2,r3,r3
  e5982c:	1085883a 	add	r2,r2,r2
  e59830:	208d883a 	add	r6,r4,r2
  e59834:	30c00017 	ldw	r3,0(r6)
  e59838:	1944d83a 	srl	r2,r3,r5
  e5983c:	1144983a 	sll	r2,r2,r5
  e59840:	18bff41e 	bne	r3,r2,e59814 <__any_on+0x3c>
  e59844:	003feb06 	br	e597f4 <__any_on+0x1c>
  e59848:	18c5883a 	add	r2,r3,r3
  e5984c:	1085883a 	add	r2,r2,r2
  e59850:	208d883a 	add	r6,r4,r2
  e59854:	003fe706 	br	e597f4 <__any_on+0x1c>
  e59858:	0005883a 	mov	r2,zero
  e5985c:	f800283a 	ret

00e59860 <_Balloc>:
  e59860:	20c01317 	ldw	r3,76(r4)
  e59864:	defffb04 	addi	sp,sp,-20
  e59868:	dcc00315 	stw	r19,12(sp)
  e5986c:	dc800215 	stw	r18,8(sp)
  e59870:	dfc00415 	stw	ra,16(sp)
  e59874:	2825883a 	mov	r18,r5
  e59878:	dc400115 	stw	r17,4(sp)
  e5987c:	dc000015 	stw	r16,0(sp)
  e59880:	2027883a 	mov	r19,r4
  e59884:	01800404 	movi	r6,16
  e59888:	01400104 	movi	r5,4
  e5988c:	18001726 	beq	r3,zero,e598ec <_Balloc+0x8c>
  e59890:	01400044 	movi	r5,1
  e59894:	9485883a 	add	r2,r18,r18
  e59898:	2ca2983a 	sll	r17,r5,r18
  e5989c:	1085883a 	add	r2,r2,r2
  e598a0:	10c7883a 	add	r3,r2,r3
  e598a4:	1c000017 	ldw	r16,0(r3)
  e598a8:	8c4d883a 	add	r6,r17,r17
  e598ac:	318d883a 	add	r6,r6,r6
  e598b0:	9809883a 	mov	r4,r19
  e598b4:	31800504 	addi	r6,r6,20
  e598b8:	80001226 	beq	r16,zero,e59904 <_Balloc+0xa4>
  e598bc:	80800017 	ldw	r2,0(r16)
  e598c0:	18800015 	stw	r2,0(r3)
  e598c4:	80000415 	stw	zero,16(r16)
  e598c8:	80000315 	stw	zero,12(r16)
  e598cc:	8005883a 	mov	r2,r16
  e598d0:	dfc00417 	ldw	ra,16(sp)
  e598d4:	dcc00317 	ldw	r19,12(sp)
  e598d8:	dc800217 	ldw	r18,8(sp)
  e598dc:	dc400117 	ldw	r17,4(sp)
  e598e0:	dc000017 	ldw	r16,0(sp)
  e598e4:	dec00504 	addi	sp,sp,20
  e598e8:	f800283a 	ret
  e598ec:	0e5ac280 	call	e5ac28 <_calloc_r>
  e598f0:	1007883a 	mov	r3,r2
  e598f4:	0021883a 	mov	r16,zero
  e598f8:	98801315 	stw	r2,76(r19)
  e598fc:	103fe41e 	bne	r2,zero,e59890 <_Balloc+0x30>
  e59900:	003ff206 	br	e598cc <_Balloc+0x6c>
  e59904:	0e5ac280 	call	e5ac28 <_calloc_r>
  e59908:	103ff026 	beq	r2,zero,e598cc <_Balloc+0x6c>
  e5990c:	1021883a 	mov	r16,r2
  e59910:	14800115 	stw	r18,4(r2)
  e59914:	14400215 	stw	r17,8(r2)
  e59918:	003fea06 	br	e598c4 <_Balloc+0x64>

00e5991c <__d2b>:
  e5991c:	defff504 	addi	sp,sp,-44
  e59920:	dcc00515 	stw	r19,20(sp)
  e59924:	04c00044 	movi	r19,1
  e59928:	dc000215 	stw	r16,8(sp)
  e5992c:	2821883a 	mov	r16,r5
  e59930:	980b883a 	mov	r5,r19
  e59934:	ddc00915 	stw	r23,36(sp)
  e59938:	dd800815 	stw	r22,32(sp)
  e5993c:	dd400715 	stw	r21,28(sp)
  e59940:	dd000615 	stw	r20,24(sp)
  e59944:	dc800415 	stw	r18,16(sp)
  e59948:	dc400315 	stw	r17,12(sp)
  e5994c:	dfc00a15 	stw	ra,40(sp)
  e59950:	3023883a 	mov	r17,r6
  e59954:	382d883a 	mov	r22,r7
  e59958:	ddc00b17 	ldw	r23,44(sp)
  e5995c:	0e598600 	call	e59860 <_Balloc>
  e59960:	1025883a 	mov	r18,r2
  e59964:	00a00034 	movhi	r2,32768
  e59968:	10bfffc4 	addi	r2,r2,-1
  e5996c:	8888703a 	and	r4,r17,r2
  e59970:	202ad53a 	srli	r21,r4,20
  e59974:	00800434 	movhi	r2,16
  e59978:	10bfffc4 	addi	r2,r2,-1
  e5997c:	8886703a 	and	r3,r17,r2
  e59980:	a829003a 	cmpeq	r20,r21,zero
  e59984:	800b883a 	mov	r5,r16
  e59988:	d8c00115 	stw	r3,4(sp)
  e5998c:	94000504 	addi	r16,r18,20
  e59990:	a000021e 	bne	r20,zero,e5999c <__d2b+0x80>
  e59994:	18c00434 	orhi	r3,r3,16
  e59998:	d8c00115 	stw	r3,4(sp)
  e5999c:	28002726 	beq	r5,zero,e59a3c <__d2b+0x120>
  e599a0:	d809883a 	mov	r4,sp
  e599a4:	d9400015 	stw	r5,0(sp)
  e599a8:	0e593780 	call	e59378 <__lo0bits>
  e599ac:	100d883a 	mov	r6,r2
  e599b0:	10003526 	beq	r2,zero,e59a88 <__d2b+0x16c>
  e599b4:	d8c00117 	ldw	r3,4(sp)
  e599b8:	00800804 	movi	r2,32
  e599bc:	1185c83a 	sub	r2,r2,r6
  e599c0:	d9000017 	ldw	r4,0(sp)
  e599c4:	1886983a 	sll	r3,r3,r2
  e599c8:	1906b03a 	or	r3,r3,r4
  e599cc:	90c00515 	stw	r3,20(r18)
  e599d0:	d8c00117 	ldw	r3,4(sp)
  e599d4:	1986d83a 	srl	r3,r3,r6
  e599d8:	d8c00115 	stw	r3,4(sp)
  e599dc:	180b003a 	cmpeq	r5,r3,zero
  e599e0:	00800084 	movi	r2,2
  e599e4:	114bc83a 	sub	r5,r2,r5
  e599e8:	80c00115 	stw	r3,4(r16)
  e599ec:	91400415 	stw	r5,16(r18)
  e599f0:	a0001a1e 	bne	r20,zero,e59a5c <__d2b+0x140>
  e599f4:	3545883a 	add	r2,r6,r21
  e599f8:	10bef344 	addi	r2,r2,-1075
  e599fc:	00c00d44 	movi	r3,53
  e59a00:	b0800015 	stw	r2,0(r22)
  e59a04:	1987c83a 	sub	r3,r3,r6
  e59a08:	b8c00015 	stw	r3,0(r23)
  e59a0c:	9005883a 	mov	r2,r18
  e59a10:	dfc00a17 	ldw	ra,40(sp)
  e59a14:	ddc00917 	ldw	r23,36(sp)
  e59a18:	dd800817 	ldw	r22,32(sp)
  e59a1c:	dd400717 	ldw	r21,28(sp)
  e59a20:	dd000617 	ldw	r20,24(sp)
  e59a24:	dcc00517 	ldw	r19,20(sp)
  e59a28:	dc800417 	ldw	r18,16(sp)
  e59a2c:	dc400317 	ldw	r17,12(sp)
  e59a30:	dc000217 	ldw	r16,8(sp)
  e59a34:	dec00b04 	addi	sp,sp,44
  e59a38:	f800283a 	ret
  e59a3c:	d9000104 	addi	r4,sp,4
  e59a40:	0e593780 	call	e59378 <__lo0bits>
  e59a44:	11800804 	addi	r6,r2,32
  e59a48:	d8800117 	ldw	r2,4(sp)
  e59a4c:	94c00415 	stw	r19,16(r18)
  e59a50:	980b883a 	mov	r5,r19
  e59a54:	90800515 	stw	r2,20(r18)
  e59a58:	a03fe626 	beq	r20,zero,e599f4 <__d2b+0xd8>
  e59a5c:	2945883a 	add	r2,r5,r5
  e59a60:	1085883a 	add	r2,r2,r2
  e59a64:	1405883a 	add	r2,r2,r16
  e59a68:	113fff17 	ldw	r4,-4(r2)
  e59a6c:	30fef384 	addi	r3,r6,-1074
  e59a70:	2820917a 	slli	r16,r5,5
  e59a74:	b0c00015 	stw	r3,0(r22)
  e59a78:	0e593080 	call	e59308 <__hi0bits>
  e59a7c:	80a1c83a 	sub	r16,r16,r2
  e59a80:	bc000015 	stw	r16,0(r23)
  e59a84:	003fe106 	br	e59a0c <__d2b+0xf0>
  e59a88:	d8800017 	ldw	r2,0(sp)
  e59a8c:	90800515 	stw	r2,20(r18)
  e59a90:	d8c00117 	ldw	r3,4(sp)
  e59a94:	003fd106 	br	e599dc <__d2b+0xc0>

00e59a98 <__mdiff>:
  e59a98:	defffb04 	addi	sp,sp,-20
  e59a9c:	dc000015 	stw	r16,0(sp)
  e59aa0:	2821883a 	mov	r16,r5
  e59aa4:	dc800215 	stw	r18,8(sp)
  e59aa8:	300b883a 	mov	r5,r6
  e59aac:	2025883a 	mov	r18,r4
  e59ab0:	8009883a 	mov	r4,r16
  e59ab4:	dc400115 	stw	r17,4(sp)
  e59ab8:	dfc00415 	stw	ra,16(sp)
  e59abc:	dcc00315 	stw	r19,12(sp)
  e59ac0:	3023883a 	mov	r17,r6
  e59ac4:	0e5943c0 	call	e5943c <__mcmp>
  e59ac8:	10004226 	beq	r2,zero,e59bd4 <__mdiff+0x13c>
  e59acc:	10005016 	blt	r2,zero,e59c10 <__mdiff+0x178>
  e59ad0:	0027883a 	mov	r19,zero
  e59ad4:	81400117 	ldw	r5,4(r16)
  e59ad8:	9009883a 	mov	r4,r18
  e59adc:	0e598600 	call	e59860 <_Balloc>
  e59ae0:	1019883a 	mov	r12,r2
  e59ae4:	82800417 	ldw	r10,16(r16)
  e59ae8:	88800417 	ldw	r2,16(r17)
  e59aec:	81800504 	addi	r6,r16,20
  e59af0:	5287883a 	add	r3,r10,r10
  e59af4:	1085883a 	add	r2,r2,r2
  e59af8:	18c7883a 	add	r3,r3,r3
  e59afc:	1085883a 	add	r2,r2,r2
  e59b00:	8a000504 	addi	r8,r17,20
  e59b04:	64c00315 	stw	r19,12(r12)
  e59b08:	30db883a 	add	r13,r6,r3
  e59b0c:	4097883a 	add	r11,r8,r2
  e59b10:	61c00504 	addi	r7,r12,20
  e59b14:	0013883a 	mov	r9,zero
  e59b18:	31000017 	ldw	r4,0(r6)
  e59b1c:	41400017 	ldw	r5,0(r8)
  e59b20:	42000104 	addi	r8,r8,4
  e59b24:	20bfffcc 	andi	r2,r4,65535
  e59b28:	28ffffcc 	andi	r3,r5,65535
  e59b2c:	10c5c83a 	sub	r2,r2,r3
  e59b30:	1245883a 	add	r2,r2,r9
  e59b34:	2008d43a 	srli	r4,r4,16
  e59b38:	280ad43a 	srli	r5,r5,16
  e59b3c:	1007d43a 	srai	r3,r2,16
  e59b40:	3880000d 	sth	r2,0(r7)
  e59b44:	2149c83a 	sub	r4,r4,r5
  e59b48:	20c9883a 	add	r4,r4,r3
  e59b4c:	3900008d 	sth	r4,2(r7)
  e59b50:	31800104 	addi	r6,r6,4
  e59b54:	39c00104 	addi	r7,r7,4
  e59b58:	2013d43a 	srai	r9,r4,16
  e59b5c:	42ffee36 	bltu	r8,r11,e59b18 <__mdiff+0x80>
  e59b60:	33400c2e 	bgeu	r6,r13,e59b94 <__mdiff+0xfc>
  e59b64:	30800017 	ldw	r2,0(r6)
  e59b68:	31800104 	addi	r6,r6,4
  e59b6c:	10ffffcc 	andi	r3,r2,65535
  e59b70:	1a47883a 	add	r3,r3,r9
  e59b74:	1004d43a 	srli	r2,r2,16
  e59b78:	1809d43a 	srai	r4,r3,16
  e59b7c:	38c0000d 	sth	r3,0(r7)
  e59b80:	1105883a 	add	r2,r2,r4
  e59b84:	3880008d 	sth	r2,2(r7)
  e59b88:	1013d43a 	srai	r9,r2,16
  e59b8c:	39c00104 	addi	r7,r7,4
  e59b90:	337ff436 	bltu	r6,r13,e59b64 <__mdiff+0xcc>
  e59b94:	38bfff17 	ldw	r2,-4(r7)
  e59b98:	38ffff04 	addi	r3,r7,-4
  e59b9c:	1000041e 	bne	r2,zero,e59bb0 <__mdiff+0x118>
  e59ba0:	18ffff04 	addi	r3,r3,-4
  e59ba4:	18800017 	ldw	r2,0(r3)
  e59ba8:	52bfffc4 	addi	r10,r10,-1
  e59bac:	103ffc26 	beq	r2,zero,e59ba0 <__mdiff+0x108>
  e59bb0:	6005883a 	mov	r2,r12
  e59bb4:	62800415 	stw	r10,16(r12)
  e59bb8:	dfc00417 	ldw	ra,16(sp)
  e59bbc:	dcc00317 	ldw	r19,12(sp)
  e59bc0:	dc800217 	ldw	r18,8(sp)
  e59bc4:	dc400117 	ldw	r17,4(sp)
  e59bc8:	dc000017 	ldw	r16,0(sp)
  e59bcc:	dec00504 	addi	sp,sp,20
  e59bd0:	f800283a 	ret
  e59bd4:	9009883a 	mov	r4,r18
  e59bd8:	000b883a 	mov	r5,zero
  e59bdc:	0e598600 	call	e59860 <_Balloc>
  e59be0:	1019883a 	mov	r12,r2
  e59be4:	00800044 	movi	r2,1
  e59be8:	60800415 	stw	r2,16(r12)
  e59bec:	6005883a 	mov	r2,r12
  e59bf0:	60000515 	stw	zero,20(r12)
  e59bf4:	dfc00417 	ldw	ra,16(sp)
  e59bf8:	dcc00317 	ldw	r19,12(sp)
  e59bfc:	dc800217 	ldw	r18,8(sp)
  e59c00:	dc400117 	ldw	r17,4(sp)
  e59c04:	dc000017 	ldw	r16,0(sp)
  e59c08:	dec00504 	addi	sp,sp,20
  e59c0c:	f800283a 	ret
  e59c10:	880d883a 	mov	r6,r17
  e59c14:	04c00044 	movi	r19,1
  e59c18:	8023883a 	mov	r17,r16
  e59c1c:	3021883a 	mov	r16,r6
  e59c20:	003fac06 	br	e59ad4 <__mdiff+0x3c>

00e59c24 <__lshift>:
  e59c24:	defff904 	addi	sp,sp,-28
  e59c28:	28800417 	ldw	r2,16(r5)
  e59c2c:	dc000015 	stw	r16,0(sp)
  e59c30:	3021d17a 	srai	r16,r6,5
  e59c34:	28c00217 	ldw	r3,8(r5)
  e59c38:	10800044 	addi	r2,r2,1
  e59c3c:	dc400115 	stw	r17,4(sp)
  e59c40:	80a3883a 	add	r17,r16,r2
  e59c44:	dd400515 	stw	r21,20(sp)
  e59c48:	dd000415 	stw	r20,16(sp)
  e59c4c:	dc800215 	stw	r18,8(sp)
  e59c50:	dfc00615 	stw	ra,24(sp)
  e59c54:	2825883a 	mov	r18,r5
  e59c58:	dcc00315 	stw	r19,12(sp)
  e59c5c:	3029883a 	mov	r20,r6
  e59c60:	202b883a 	mov	r21,r4
  e59c64:	29400117 	ldw	r5,4(r5)
  e59c68:	1c40030e 	bge	r3,r17,e59c78 <__lshift+0x54>
  e59c6c:	18c7883a 	add	r3,r3,r3
  e59c70:	29400044 	addi	r5,r5,1
  e59c74:	1c7ffd16 	blt	r3,r17,e59c6c <__lshift+0x48>
  e59c78:	a809883a 	mov	r4,r21
  e59c7c:	0e598600 	call	e59860 <_Balloc>
  e59c80:	1027883a 	mov	r19,r2
  e59c84:	11400504 	addi	r5,r2,20
  e59c88:	0400090e 	bge	zero,r16,e59cb0 <__lshift+0x8c>
  e59c8c:	2805883a 	mov	r2,r5
  e59c90:	0007883a 	mov	r3,zero
  e59c94:	18c00044 	addi	r3,r3,1
  e59c98:	10000015 	stw	zero,0(r2)
  e59c9c:	10800104 	addi	r2,r2,4
  e59ca0:	80fffc1e 	bne	r16,r3,e59c94 <__lshift+0x70>
  e59ca4:	8405883a 	add	r2,r16,r16
  e59ca8:	1085883a 	add	r2,r2,r2
  e59cac:	288b883a 	add	r5,r5,r2
  e59cb0:	90800417 	ldw	r2,16(r18)
  e59cb4:	91000504 	addi	r4,r18,20
  e59cb8:	a18007cc 	andi	r6,r20,31
  e59cbc:	1085883a 	add	r2,r2,r2
  e59cc0:	1085883a 	add	r2,r2,r2
  e59cc4:	208f883a 	add	r7,r4,r2
  e59cc8:	30001e26 	beq	r6,zero,e59d44 <__lshift+0x120>
  e59ccc:	00800804 	movi	r2,32
  e59cd0:	1191c83a 	sub	r8,r2,r6
  e59cd4:	0007883a 	mov	r3,zero
  e59cd8:	20800017 	ldw	r2,0(r4)
  e59cdc:	1184983a 	sll	r2,r2,r6
  e59ce0:	1884b03a 	or	r2,r3,r2
  e59ce4:	28800015 	stw	r2,0(r5)
  e59ce8:	20c00017 	ldw	r3,0(r4)
  e59cec:	21000104 	addi	r4,r4,4
  e59cf0:	29400104 	addi	r5,r5,4
  e59cf4:	1a06d83a 	srl	r3,r3,r8
  e59cf8:	21fff736 	bltu	r4,r7,e59cd8 <__lshift+0xb4>
  e59cfc:	28c00015 	stw	r3,0(r5)
  e59d00:	18000126 	beq	r3,zero,e59d08 <__lshift+0xe4>
  e59d04:	8c400044 	addi	r17,r17,1
  e59d08:	88bfffc4 	addi	r2,r17,-1
  e59d0c:	98800415 	stw	r2,16(r19)
  e59d10:	a809883a 	mov	r4,r21
  e59d14:	900b883a 	mov	r5,r18
  e59d18:	0e592e00 	call	e592e0 <_Bfree>
  e59d1c:	9805883a 	mov	r2,r19
  e59d20:	dfc00617 	ldw	ra,24(sp)
  e59d24:	dd400517 	ldw	r21,20(sp)
  e59d28:	dd000417 	ldw	r20,16(sp)
  e59d2c:	dcc00317 	ldw	r19,12(sp)
  e59d30:	dc800217 	ldw	r18,8(sp)
  e59d34:	dc400117 	ldw	r17,4(sp)
  e59d38:	dc000017 	ldw	r16,0(sp)
  e59d3c:	dec00704 	addi	sp,sp,28
  e59d40:	f800283a 	ret
  e59d44:	20800017 	ldw	r2,0(r4)
  e59d48:	21000104 	addi	r4,r4,4
  e59d4c:	28800015 	stw	r2,0(r5)
  e59d50:	29400104 	addi	r5,r5,4
  e59d54:	21ffec2e 	bgeu	r4,r7,e59d08 <__lshift+0xe4>
  e59d58:	20800017 	ldw	r2,0(r4)
  e59d5c:	21000104 	addi	r4,r4,4
  e59d60:	28800015 	stw	r2,0(r5)
  e59d64:	29400104 	addi	r5,r5,4
  e59d68:	21fff636 	bltu	r4,r7,e59d44 <__lshift+0x120>
  e59d6c:	003fe606 	br	e59d08 <__lshift+0xe4>

00e59d70 <__multiply>:
  e59d70:	defff904 	addi	sp,sp,-28
  e59d74:	dcc00315 	stw	r19,12(sp)
  e59d78:	dc800215 	stw	r18,8(sp)
  e59d7c:	2cc00417 	ldw	r19,16(r5)
  e59d80:	34800417 	ldw	r18,16(r6)
  e59d84:	dd000415 	stw	r20,16(sp)
  e59d88:	dc400115 	stw	r17,4(sp)
  e59d8c:	dfc00615 	stw	ra,24(sp)
  e59d90:	dd400515 	stw	r21,20(sp)
  e59d94:	dc000015 	stw	r16,0(sp)
  e59d98:	2823883a 	mov	r17,r5
  e59d9c:	3029883a 	mov	r20,r6
  e59da0:	9c80040e 	bge	r19,r18,e59db4 <__multiply+0x44>
  e59da4:	9027883a 	mov	r19,r18
  e59da8:	2c800417 	ldw	r18,16(r5)
  e59dac:	2829883a 	mov	r20,r5
  e59db0:	3023883a 	mov	r17,r6
  e59db4:	88800217 	ldw	r2,8(r17)
  e59db8:	9ca1883a 	add	r16,r19,r18
  e59dbc:	89400117 	ldw	r5,4(r17)
  e59dc0:	1400010e 	bge	r2,r16,e59dc8 <__multiply+0x58>
  e59dc4:	29400044 	addi	r5,r5,1
  e59dc8:	0e598600 	call	e59860 <_Balloc>
  e59dcc:	102b883a 	mov	r21,r2
  e59dd0:	8405883a 	add	r2,r16,r16
  e59dd4:	1085883a 	add	r2,r2,r2
  e59dd8:	a9000504 	addi	r4,r21,20
  e59ddc:	209d883a 	add	r14,r4,r2
  e59de0:	2380042e 	bgeu	r4,r14,e59df4 <__multiply+0x84>
  e59de4:	2005883a 	mov	r2,r4
  e59de8:	10000015 	stw	zero,0(r2)
  e59dec:	10800104 	addi	r2,r2,4
  e59df0:	13bffd36 	bltu	r2,r14,e59de8 <__multiply+0x78>
  e59df4:	9485883a 	add	r2,r18,r18
  e59df8:	9cc7883a 	add	r3,r19,r19
  e59dfc:	a1800504 	addi	r6,r20,20
  e59e00:	1085883a 	add	r2,r2,r2
  e59e04:	8b400504 	addi	r13,r17,20
  e59e08:	18c7883a 	add	r3,r3,r3
  e59e0c:	309f883a 	add	r15,r6,r2
  e59e10:	68d7883a 	add	r11,r13,r3
  e59e14:	33c03b2e 	bgeu	r6,r15,e59f04 <__multiply+0x194>
  e59e18:	2019883a 	mov	r12,r4
  e59e1c:	30800017 	ldw	r2,0(r6)
  e59e20:	127fffcc 	andi	r9,r2,65535
  e59e24:	48001826 	beq	r9,zero,e59e88 <__multiply+0x118>
  e59e28:	6811883a 	mov	r8,r13
  e59e2c:	600f883a 	mov	r7,r12
  e59e30:	0015883a 	mov	r10,zero
  e59e34:	40c00017 	ldw	r3,0(r8)
  e59e38:	39400017 	ldw	r5,0(r7)
  e59e3c:	42000104 	addi	r8,r8,4
  e59e40:	193fffcc 	andi	r4,r3,65535
  e59e44:	4909383a 	mul	r4,r9,r4
  e59e48:	1806d43a 	srli	r3,r3,16
  e59e4c:	28bfffcc 	andi	r2,r5,65535
  e59e50:	5085883a 	add	r2,r10,r2
  e59e54:	2089883a 	add	r4,r4,r2
  e59e58:	48c7383a 	mul	r3,r9,r3
  e59e5c:	280ad43a 	srli	r5,r5,16
  e59e60:	2004d43a 	srli	r2,r4,16
  e59e64:	3900000d 	sth	r4,0(r7)
  e59e68:	1947883a 	add	r3,r3,r5
  e59e6c:	10c5883a 	add	r2,r2,r3
  e59e70:	3880008d 	sth	r2,2(r7)
  e59e74:	1014d43a 	srli	r10,r2,16
  e59e78:	39c00104 	addi	r7,r7,4
  e59e7c:	42ffed36 	bltu	r8,r11,e59e34 <__multiply+0xc4>
  e59e80:	3a800015 	stw	r10,0(r7)
  e59e84:	30800017 	ldw	r2,0(r6)
  e59e88:	1012d43a 	srli	r9,r2,16
  e59e8c:	48001926 	beq	r9,zero,e59ef4 <__multiply+0x184>
  e59e90:	60800017 	ldw	r2,0(r12)
  e59e94:	6811883a 	mov	r8,r13
  e59e98:	600f883a 	mov	r7,r12
  e59e9c:	0015883a 	mov	r10,zero
  e59ea0:	100b883a 	mov	r5,r2
  e59ea4:	41000017 	ldw	r4,0(r8)
  e59ea8:	2806d43a 	srli	r3,r5,16
  e59eac:	3880000d 	sth	r2,0(r7)
  e59eb0:	20bfffcc 	andi	r2,r4,65535
  e59eb4:	4885383a 	mul	r2,r9,r2
  e59eb8:	50c7883a 	add	r3,r10,r3
  e59ebc:	2008d43a 	srli	r4,r4,16
  e59ec0:	10c5883a 	add	r2,r2,r3
  e59ec4:	3880008d 	sth	r2,2(r7)
  e59ec8:	39c00104 	addi	r7,r7,4
  e59ecc:	39400017 	ldw	r5,0(r7)
  e59ed0:	4909383a 	mul	r4,r9,r4
  e59ed4:	1004d43a 	srli	r2,r2,16
  e59ed8:	28ffffcc 	andi	r3,r5,65535
  e59edc:	20c9883a 	add	r4,r4,r3
  e59ee0:	1105883a 	add	r2,r2,r4
  e59ee4:	42000104 	addi	r8,r8,4
  e59ee8:	1014d43a 	srli	r10,r2,16
  e59eec:	42ffed36 	bltu	r8,r11,e59ea4 <__multiply+0x134>
  e59ef0:	38800015 	stw	r2,0(r7)
  e59ef4:	31800104 	addi	r6,r6,4
  e59ef8:	33c0022e 	bgeu	r6,r15,e59f04 <__multiply+0x194>
  e59efc:	63000104 	addi	r12,r12,4
  e59f00:	003fc606 	br	e59e1c <__multiply+0xac>
  e59f04:	0400090e 	bge	zero,r16,e59f2c <__multiply+0x1bc>
  e59f08:	70bfff17 	ldw	r2,-4(r14)
  e59f0c:	70ffff04 	addi	r3,r14,-4
  e59f10:	10000326 	beq	r2,zero,e59f20 <__multiply+0x1b0>
  e59f14:	00000506 	br	e59f2c <__multiply+0x1bc>
  e59f18:	18800017 	ldw	r2,0(r3)
  e59f1c:	1000031e 	bne	r2,zero,e59f2c <__multiply+0x1bc>
  e59f20:	843fffc4 	addi	r16,r16,-1
  e59f24:	18ffff04 	addi	r3,r3,-4
  e59f28:	803ffb1e 	bne	r16,zero,e59f18 <__multiply+0x1a8>
  e59f2c:	a805883a 	mov	r2,r21
  e59f30:	ac000415 	stw	r16,16(r21)
  e59f34:	dfc00617 	ldw	ra,24(sp)
  e59f38:	dd400517 	ldw	r21,20(sp)
  e59f3c:	dd000417 	ldw	r20,16(sp)
  e59f40:	dcc00317 	ldw	r19,12(sp)
  e59f44:	dc800217 	ldw	r18,8(sp)
  e59f48:	dc400117 	ldw	r17,4(sp)
  e59f4c:	dc000017 	ldw	r16,0(sp)
  e59f50:	dec00704 	addi	sp,sp,28
  e59f54:	f800283a 	ret

00e59f58 <__i2b>:
  e59f58:	defffd04 	addi	sp,sp,-12
  e59f5c:	dc000015 	stw	r16,0(sp)
  e59f60:	04000044 	movi	r16,1
  e59f64:	dc800115 	stw	r18,4(sp)
  e59f68:	2825883a 	mov	r18,r5
  e59f6c:	800b883a 	mov	r5,r16
  e59f70:	dfc00215 	stw	ra,8(sp)
  e59f74:	0e598600 	call	e59860 <_Balloc>
  e59f78:	14000415 	stw	r16,16(r2)
  e59f7c:	14800515 	stw	r18,20(r2)
  e59f80:	dfc00217 	ldw	ra,8(sp)
  e59f84:	dc800117 	ldw	r18,4(sp)
  e59f88:	dc000017 	ldw	r16,0(sp)
  e59f8c:	dec00304 	addi	sp,sp,12
  e59f90:	f800283a 	ret

00e59f94 <__multadd>:
  e59f94:	defffa04 	addi	sp,sp,-24
  e59f98:	dc800215 	stw	r18,8(sp)
  e59f9c:	2c800417 	ldw	r18,16(r5)
  e59fa0:	dd000415 	stw	r20,16(sp)
  e59fa4:	dcc00315 	stw	r19,12(sp)
  e59fa8:	dc000015 	stw	r16,0(sp)
  e59fac:	dfc00515 	stw	ra,20(sp)
  e59fb0:	3821883a 	mov	r16,r7
  e59fb4:	dc400115 	stw	r17,4(sp)
  e59fb8:	2827883a 	mov	r19,r5
  e59fbc:	2029883a 	mov	r20,r4
  e59fc0:	2a000504 	addi	r8,r5,20
  e59fc4:	000f883a 	mov	r7,zero
  e59fc8:	40800017 	ldw	r2,0(r8)
  e59fcc:	39c00044 	addi	r7,r7,1
  e59fd0:	10ffffcc 	andi	r3,r2,65535
  e59fd4:	1987383a 	mul	r3,r3,r6
  e59fd8:	1004d43a 	srli	r2,r2,16
  e59fdc:	1c07883a 	add	r3,r3,r16
  e59fe0:	180ad43a 	srli	r5,r3,16
  e59fe4:	1185383a 	mul	r2,r2,r6
  e59fe8:	18ffffcc 	andi	r3,r3,65535
  e59fec:	1145883a 	add	r2,r2,r5
  e59ff0:	1008943a 	slli	r4,r2,16
  e59ff4:	1020d43a 	srli	r16,r2,16
  e59ff8:	20c9883a 	add	r4,r4,r3
  e59ffc:	41000015 	stw	r4,0(r8)
  e5a000:	42000104 	addi	r8,r8,4
  e5a004:	3cbff016 	blt	r7,r18,e59fc8 <__multadd+0x34>
  e5a008:	80000826 	beq	r16,zero,e5a02c <__multadd+0x98>
  e5a00c:	98800217 	ldw	r2,8(r19)
  e5a010:	90800f0e 	bge	r18,r2,e5a050 <__multadd+0xbc>
  e5a014:	9485883a 	add	r2,r18,r18
  e5a018:	1085883a 	add	r2,r2,r2
  e5a01c:	14c5883a 	add	r2,r2,r19
  e5a020:	90c00044 	addi	r3,r18,1
  e5a024:	14000515 	stw	r16,20(r2)
  e5a028:	98c00415 	stw	r3,16(r19)
  e5a02c:	9805883a 	mov	r2,r19
  e5a030:	dfc00517 	ldw	ra,20(sp)
  e5a034:	dd000417 	ldw	r20,16(sp)
  e5a038:	dcc00317 	ldw	r19,12(sp)
  e5a03c:	dc800217 	ldw	r18,8(sp)
  e5a040:	dc400117 	ldw	r17,4(sp)
  e5a044:	dc000017 	ldw	r16,0(sp)
  e5a048:	dec00604 	addi	sp,sp,24
  e5a04c:	f800283a 	ret
  e5a050:	99400117 	ldw	r5,4(r19)
  e5a054:	a009883a 	mov	r4,r20
  e5a058:	29400044 	addi	r5,r5,1
  e5a05c:	0e598600 	call	e59860 <_Balloc>
  e5a060:	99800417 	ldw	r6,16(r19)
  e5a064:	99400304 	addi	r5,r19,12
  e5a068:	11000304 	addi	r4,r2,12
  e5a06c:	318d883a 	add	r6,r6,r6
  e5a070:	318d883a 	add	r6,r6,r6
  e5a074:	31800204 	addi	r6,r6,8
  e5a078:	1023883a 	mov	r17,r2
  e5a07c:	0e590c80 	call	e590c8 <memcpy>
  e5a080:	980b883a 	mov	r5,r19
  e5a084:	a009883a 	mov	r4,r20
  e5a088:	0e592e00 	call	e592e0 <_Bfree>
  e5a08c:	8827883a 	mov	r19,r17
  e5a090:	003fe006 	br	e5a014 <__multadd+0x80>

00e5a094 <__pow5mult>:
  e5a094:	defffa04 	addi	sp,sp,-24
  e5a098:	308000cc 	andi	r2,r6,3
  e5a09c:	dd000415 	stw	r20,16(sp)
  e5a0a0:	dcc00315 	stw	r19,12(sp)
  e5a0a4:	dc000015 	stw	r16,0(sp)
  e5a0a8:	dfc00515 	stw	ra,20(sp)
  e5a0ac:	dc800215 	stw	r18,8(sp)
  e5a0b0:	dc400115 	stw	r17,4(sp)
  e5a0b4:	3021883a 	mov	r16,r6
  e5a0b8:	2027883a 	mov	r19,r4
  e5a0bc:	2829883a 	mov	r20,r5
  e5a0c0:	10002b1e 	bne	r2,zero,e5a170 <__pow5mult+0xdc>
  e5a0c4:	8025d0ba 	srai	r18,r16,2
  e5a0c8:	90001b26 	beq	r18,zero,e5a138 <__pow5mult+0xa4>
  e5a0cc:	9c001217 	ldw	r16,72(r19)
  e5a0d0:	8000081e 	bne	r16,zero,e5a0f4 <__pow5mult+0x60>
  e5a0d4:	00003006 	br	e5a198 <__pow5mult+0x104>
  e5a0d8:	800b883a 	mov	r5,r16
  e5a0dc:	800d883a 	mov	r6,r16
  e5a0e0:	9809883a 	mov	r4,r19
  e5a0e4:	90001426 	beq	r18,zero,e5a138 <__pow5mult+0xa4>
  e5a0e8:	80800017 	ldw	r2,0(r16)
  e5a0ec:	10001b26 	beq	r2,zero,e5a15c <__pow5mult+0xc8>
  e5a0f0:	1021883a 	mov	r16,r2
  e5a0f4:	9080004c 	andi	r2,r18,1
  e5a0f8:	1005003a 	cmpeq	r2,r2,zero
  e5a0fc:	9025d07a 	srai	r18,r18,1
  e5a100:	800d883a 	mov	r6,r16
  e5a104:	9809883a 	mov	r4,r19
  e5a108:	a00b883a 	mov	r5,r20
  e5a10c:	103ff21e 	bne	r2,zero,e5a0d8 <__pow5mult+0x44>
  e5a110:	0e59d700 	call	e59d70 <__multiply>
  e5a114:	a00b883a 	mov	r5,r20
  e5a118:	9809883a 	mov	r4,r19
  e5a11c:	1023883a 	mov	r17,r2
  e5a120:	0e592e00 	call	e592e0 <_Bfree>
  e5a124:	8829883a 	mov	r20,r17
  e5a128:	800b883a 	mov	r5,r16
  e5a12c:	800d883a 	mov	r6,r16
  e5a130:	9809883a 	mov	r4,r19
  e5a134:	903fec1e 	bne	r18,zero,e5a0e8 <__pow5mult+0x54>
  e5a138:	a005883a 	mov	r2,r20
  e5a13c:	dfc00517 	ldw	ra,20(sp)
  e5a140:	dd000417 	ldw	r20,16(sp)
  e5a144:	dcc00317 	ldw	r19,12(sp)
  e5a148:	dc800217 	ldw	r18,8(sp)
  e5a14c:	dc400117 	ldw	r17,4(sp)
  e5a150:	dc000017 	ldw	r16,0(sp)
  e5a154:	dec00604 	addi	sp,sp,24
  e5a158:	f800283a 	ret
  e5a15c:	0e59d700 	call	e59d70 <__multiply>
  e5a160:	80800015 	stw	r2,0(r16)
  e5a164:	1021883a 	mov	r16,r2
  e5a168:	10000015 	stw	zero,0(r2)
  e5a16c:	003fe106 	br	e5a0f4 <__pow5mult+0x60>
  e5a170:	1085883a 	add	r2,r2,r2
  e5a174:	00c039b4 	movhi	r3,230
  e5a178:	18c56104 	addi	r3,r3,5508
  e5a17c:	1085883a 	add	r2,r2,r2
  e5a180:	10c5883a 	add	r2,r2,r3
  e5a184:	11bfff17 	ldw	r6,-4(r2)
  e5a188:	000f883a 	mov	r7,zero
  e5a18c:	0e59f940 	call	e59f94 <__multadd>
  e5a190:	1029883a 	mov	r20,r2
  e5a194:	003fcb06 	br	e5a0c4 <__pow5mult+0x30>
  e5a198:	9809883a 	mov	r4,r19
  e5a19c:	01409c44 	movi	r5,625
  e5a1a0:	0e59f580 	call	e59f58 <__i2b>
  e5a1a4:	98801215 	stw	r2,72(r19)
  e5a1a8:	1021883a 	mov	r16,r2
  e5a1ac:	10000015 	stw	zero,0(r2)
  e5a1b0:	003fd006 	br	e5a0f4 <__pow5mult+0x60>

00e5a1b4 <__s2b>:
  e5a1b4:	defff904 	addi	sp,sp,-28
  e5a1b8:	dcc00315 	stw	r19,12(sp)
  e5a1bc:	dc800215 	stw	r18,8(sp)
  e5a1c0:	2827883a 	mov	r19,r5
  e5a1c4:	2025883a 	mov	r18,r4
  e5a1c8:	01400244 	movi	r5,9
  e5a1cc:	39000204 	addi	r4,r7,8
  e5a1d0:	dd000415 	stw	r20,16(sp)
  e5a1d4:	dc400115 	stw	r17,4(sp)
  e5a1d8:	dfc00615 	stw	ra,24(sp)
  e5a1dc:	dd400515 	stw	r21,20(sp)
  e5a1e0:	dc000015 	stw	r16,0(sp)
  e5a1e4:	3829883a 	mov	r20,r7
  e5a1e8:	3023883a 	mov	r17,r6
  e5a1ec:	0e5c5940 	call	e5c594 <__divsi3>
  e5a1f0:	00c00044 	movi	r3,1
  e5a1f4:	1880350e 	bge	r3,r2,e5a2cc <__s2b+0x118>
  e5a1f8:	000b883a 	mov	r5,zero
  e5a1fc:	18c7883a 	add	r3,r3,r3
  e5a200:	29400044 	addi	r5,r5,1
  e5a204:	18bffd16 	blt	r3,r2,e5a1fc <__s2b+0x48>
  e5a208:	9009883a 	mov	r4,r18
  e5a20c:	0e598600 	call	e59860 <_Balloc>
  e5a210:	1011883a 	mov	r8,r2
  e5a214:	d8800717 	ldw	r2,28(sp)
  e5a218:	00c00044 	movi	r3,1
  e5a21c:	01800244 	movi	r6,9
  e5a220:	40800515 	stw	r2,20(r8)
  e5a224:	40c00415 	stw	r3,16(r8)
  e5a228:	3440260e 	bge	r6,r17,e5a2c4 <__s2b+0x110>
  e5a22c:	3021883a 	mov	r16,r6
  e5a230:	99ab883a 	add	r21,r19,r6
  e5a234:	9c05883a 	add	r2,r19,r16
  e5a238:	11c00007 	ldb	r7,0(r2)
  e5a23c:	400b883a 	mov	r5,r8
  e5a240:	9009883a 	mov	r4,r18
  e5a244:	39fff404 	addi	r7,r7,-48
  e5a248:	01800284 	movi	r6,10
  e5a24c:	0e59f940 	call	e59f94 <__multadd>
  e5a250:	84000044 	addi	r16,r16,1
  e5a254:	1011883a 	mov	r8,r2
  e5a258:	8c3ff61e 	bne	r17,r16,e5a234 <__s2b+0x80>
  e5a25c:	ac45883a 	add	r2,r21,r17
  e5a260:	117ffe04 	addi	r5,r2,-8
  e5a264:	880d883a 	mov	r6,r17
  e5a268:	35000c0e 	bge	r6,r20,e5a29c <__s2b+0xe8>
  e5a26c:	a185c83a 	sub	r2,r20,r6
  e5a270:	2821883a 	mov	r16,r5
  e5a274:	28a3883a 	add	r17,r5,r2
  e5a278:	81c00007 	ldb	r7,0(r16)
  e5a27c:	400b883a 	mov	r5,r8
  e5a280:	9009883a 	mov	r4,r18
  e5a284:	39fff404 	addi	r7,r7,-48
  e5a288:	01800284 	movi	r6,10
  e5a28c:	0e59f940 	call	e59f94 <__multadd>
  e5a290:	84000044 	addi	r16,r16,1
  e5a294:	1011883a 	mov	r8,r2
  e5a298:	847ff71e 	bne	r16,r17,e5a278 <__s2b+0xc4>
  e5a29c:	4005883a 	mov	r2,r8
  e5a2a0:	dfc00617 	ldw	ra,24(sp)
  e5a2a4:	dd400517 	ldw	r21,20(sp)
  e5a2a8:	dd000417 	ldw	r20,16(sp)
  e5a2ac:	dcc00317 	ldw	r19,12(sp)
  e5a2b0:	dc800217 	ldw	r18,8(sp)
  e5a2b4:	dc400117 	ldw	r17,4(sp)
  e5a2b8:	dc000017 	ldw	r16,0(sp)
  e5a2bc:	dec00704 	addi	sp,sp,28
  e5a2c0:	f800283a 	ret
  e5a2c4:	99400284 	addi	r5,r19,10
  e5a2c8:	003fe706 	br	e5a268 <__s2b+0xb4>
  e5a2cc:	000b883a 	mov	r5,zero
  e5a2d0:	003fcd06 	br	e5a208 <__s2b+0x54>

00e5a2d4 <_realloc_r>:
  e5a2d4:	defff404 	addi	sp,sp,-48
  e5a2d8:	dd800815 	stw	r22,32(sp)
  e5a2dc:	dc800415 	stw	r18,16(sp)
  e5a2e0:	dc400315 	stw	r17,12(sp)
  e5a2e4:	dfc00b15 	stw	ra,44(sp)
  e5a2e8:	df000a15 	stw	fp,40(sp)
  e5a2ec:	ddc00915 	stw	r23,36(sp)
  e5a2f0:	dd400715 	stw	r21,28(sp)
  e5a2f4:	dd000615 	stw	r20,24(sp)
  e5a2f8:	dcc00515 	stw	r19,20(sp)
  e5a2fc:	dc000215 	stw	r16,8(sp)
  e5a300:	2825883a 	mov	r18,r5
  e5a304:	3023883a 	mov	r17,r6
  e5a308:	202d883a 	mov	r22,r4
  e5a30c:	2800c926 	beq	r5,zero,e5a634 <_realloc_r+0x360>
  e5a310:	0e5cce80 	call	e5cce8 <__malloc_lock>
  e5a314:	943ffe04 	addi	r16,r18,-8
  e5a318:	88c002c4 	addi	r3,r17,11
  e5a31c:	00800584 	movi	r2,22
  e5a320:	82000117 	ldw	r8,4(r16)
  e5a324:	10c01b2e 	bgeu	r2,r3,e5a394 <_realloc_r+0xc0>
  e5a328:	00bffe04 	movi	r2,-8
  e5a32c:	188e703a 	and	r7,r3,r2
  e5a330:	3839883a 	mov	fp,r7
  e5a334:	38001a16 	blt	r7,zero,e5a3a0 <_realloc_r+0xcc>
  e5a338:	e4401936 	bltu	fp,r17,e5a3a0 <_realloc_r+0xcc>
  e5a33c:	013fff04 	movi	r4,-4
  e5a340:	4126703a 	and	r19,r8,r4
  e5a344:	99c02616 	blt	r19,r7,e5a3e0 <_realloc_r+0x10c>
  e5a348:	802b883a 	mov	r21,r16
  e5a34c:	9829883a 	mov	r20,r19
  e5a350:	84000204 	addi	r16,r16,8
  e5a354:	a80f883a 	mov	r7,r21
  e5a358:	a70dc83a 	sub	r6,r20,fp
  e5a35c:	008003c4 	movi	r2,15
  e5a360:	1180c136 	bltu	r2,r6,e5a668 <_realloc_r+0x394>
  e5a364:	38800117 	ldw	r2,4(r7)
  e5a368:	a549883a 	add	r4,r20,r21
  e5a36c:	1080004c 	andi	r2,r2,1
  e5a370:	a084b03a 	or	r2,r20,r2
  e5a374:	38800115 	stw	r2,4(r7)
  e5a378:	20c00117 	ldw	r3,4(r4)
  e5a37c:	18c00054 	ori	r3,r3,1
  e5a380:	20c00115 	stw	r3,4(r4)
  e5a384:	b009883a 	mov	r4,r22
  e5a388:	0e5cd080 	call	e5cd08 <__malloc_unlock>
  e5a38c:	8023883a 	mov	r17,r16
  e5a390:	00000606 	br	e5a3ac <_realloc_r+0xd8>
  e5a394:	01c00404 	movi	r7,16
  e5a398:	3839883a 	mov	fp,r7
  e5a39c:	e47fe72e 	bgeu	fp,r17,e5a33c <_realloc_r+0x68>
  e5a3a0:	00800304 	movi	r2,12
  e5a3a4:	0023883a 	mov	r17,zero
  e5a3a8:	b0800015 	stw	r2,0(r22)
  e5a3ac:	8805883a 	mov	r2,r17
  e5a3b0:	dfc00b17 	ldw	ra,44(sp)
  e5a3b4:	df000a17 	ldw	fp,40(sp)
  e5a3b8:	ddc00917 	ldw	r23,36(sp)
  e5a3bc:	dd800817 	ldw	r22,32(sp)
  e5a3c0:	dd400717 	ldw	r21,28(sp)
  e5a3c4:	dd000617 	ldw	r20,24(sp)
  e5a3c8:	dcc00517 	ldw	r19,20(sp)
  e5a3cc:	dc800417 	ldw	r18,16(sp)
  e5a3d0:	dc400317 	ldw	r17,12(sp)
  e5a3d4:	dc000217 	ldw	r16,8(sp)
  e5a3d8:	dec00c04 	addi	sp,sp,48
  e5a3dc:	f800283a 	ret
  e5a3e0:	008039b4 	movhi	r2,230
  e5a3e4:	1086bc04 	addi	r2,r2,6896
  e5a3e8:	12400217 	ldw	r9,8(r2)
  e5a3ec:	84cd883a 	add	r6,r16,r19
  e5a3f0:	802b883a 	mov	r21,r16
  e5a3f4:	3240b926 	beq	r6,r9,e5a6dc <_realloc_r+0x408>
  e5a3f8:	31400117 	ldw	r5,4(r6)
  e5a3fc:	00bfff84 	movi	r2,-2
  e5a400:	2884703a 	and	r2,r5,r2
  e5a404:	1185883a 	add	r2,r2,r6
  e5a408:	10c00117 	ldw	r3,4(r2)
  e5a40c:	18c0004c 	andi	r3,r3,1
  e5a410:	1807003a 	cmpeq	r3,r3,zero
  e5a414:	1800a326 	beq	r3,zero,e5a6a4 <_realloc_r+0x3d0>
  e5a418:	2908703a 	and	r4,r5,r4
  e5a41c:	9929883a 	add	r20,r19,r4
  e5a420:	a1c0a30e 	bge	r20,r7,e5a6b0 <_realloc_r+0x3dc>
  e5a424:	4080004c 	andi	r2,r8,1
  e5a428:	1000551e 	bne	r2,zero,e5a580 <_realloc_r+0x2ac>
  e5a42c:	80800017 	ldw	r2,0(r16)
  e5a430:	80afc83a 	sub	r23,r16,r2
  e5a434:	b8c00117 	ldw	r3,4(r23)
  e5a438:	00bfff04 	movi	r2,-4
  e5a43c:	1884703a 	and	r2,r3,r2
  e5a440:	30002e26 	beq	r6,zero,e5a4fc <_realloc_r+0x228>
  e5a444:	3240b926 	beq	r6,r9,e5a72c <_realloc_r+0x458>
  e5a448:	98a9883a 	add	r20,r19,r2
  e5a44c:	2509883a 	add	r4,r4,r20
  e5a450:	d9000015 	stw	r4,0(sp)
  e5a454:	21c02a16 	blt	r4,r7,e5a500 <_realloc_r+0x22c>
  e5a458:	30800317 	ldw	r2,12(r6)
  e5a45c:	30c00217 	ldw	r3,8(r6)
  e5a460:	01400904 	movi	r5,36
  e5a464:	99bfff04 	addi	r6,r19,-4
  e5a468:	18800315 	stw	r2,12(r3)
  e5a46c:	10c00215 	stw	r3,8(r2)
  e5a470:	b9000317 	ldw	r4,12(r23)
  e5a474:	b8800217 	ldw	r2,8(r23)
  e5a478:	b82b883a 	mov	r21,r23
  e5a47c:	bc000204 	addi	r16,r23,8
  e5a480:	20800215 	stw	r2,8(r4)
  e5a484:	11000315 	stw	r4,12(r2)
  e5a488:	2980e436 	bltu	r5,r6,e5a81c <_realloc_r+0x548>
  e5a48c:	008004c4 	movi	r2,19
  e5a490:	9009883a 	mov	r4,r18
  e5a494:	8011883a 	mov	r8,r16
  e5a498:	11800f2e 	bgeu	r2,r6,e5a4d8 <_realloc_r+0x204>
  e5a49c:	90800017 	ldw	r2,0(r18)
  e5a4a0:	ba000404 	addi	r8,r23,16
  e5a4a4:	91000204 	addi	r4,r18,8
  e5a4a8:	b8800215 	stw	r2,8(r23)
  e5a4ac:	90c00117 	ldw	r3,4(r18)
  e5a4b0:	008006c4 	movi	r2,27
  e5a4b4:	b8c00315 	stw	r3,12(r23)
  e5a4b8:	1180072e 	bgeu	r2,r6,e5a4d8 <_realloc_r+0x204>
  e5a4bc:	90c00217 	ldw	r3,8(r18)
  e5a4c0:	ba000604 	addi	r8,r23,24
  e5a4c4:	91000404 	addi	r4,r18,16
  e5a4c8:	b8c00415 	stw	r3,16(r23)
  e5a4cc:	90800317 	ldw	r2,12(r18)
  e5a4d0:	b8800515 	stw	r2,20(r23)
  e5a4d4:	3140e726 	beq	r6,r5,e5a874 <_realloc_r+0x5a0>
  e5a4d8:	20800017 	ldw	r2,0(r4)
  e5a4dc:	dd000017 	ldw	r20,0(sp)
  e5a4e0:	b80f883a 	mov	r7,r23
  e5a4e4:	40800015 	stw	r2,0(r8)
  e5a4e8:	20c00117 	ldw	r3,4(r4)
  e5a4ec:	40c00115 	stw	r3,4(r8)
  e5a4f0:	20800217 	ldw	r2,8(r4)
  e5a4f4:	40800215 	stw	r2,8(r8)
  e5a4f8:	003f9706 	br	e5a358 <_realloc_r+0x84>
  e5a4fc:	98a9883a 	add	r20,r19,r2
  e5a500:	a1c01f16 	blt	r20,r7,e5a580 <_realloc_r+0x2ac>
  e5a504:	b8c00317 	ldw	r3,12(r23)
  e5a508:	b8800217 	ldw	r2,8(r23)
  e5a50c:	99bfff04 	addi	r6,r19,-4
  e5a510:	01400904 	movi	r5,36
  e5a514:	b82b883a 	mov	r21,r23
  e5a518:	18800215 	stw	r2,8(r3)
  e5a51c:	10c00315 	stw	r3,12(r2)
  e5a520:	bc000204 	addi	r16,r23,8
  e5a524:	2980c336 	bltu	r5,r6,e5a834 <_realloc_r+0x560>
  e5a528:	008004c4 	movi	r2,19
  e5a52c:	9009883a 	mov	r4,r18
  e5a530:	8011883a 	mov	r8,r16
  e5a534:	11800f2e 	bgeu	r2,r6,e5a574 <_realloc_r+0x2a0>
  e5a538:	90800017 	ldw	r2,0(r18)
  e5a53c:	ba000404 	addi	r8,r23,16
  e5a540:	91000204 	addi	r4,r18,8
  e5a544:	b8800215 	stw	r2,8(r23)
  e5a548:	90c00117 	ldw	r3,4(r18)
  e5a54c:	008006c4 	movi	r2,27
  e5a550:	b8c00315 	stw	r3,12(r23)
  e5a554:	1180072e 	bgeu	r2,r6,e5a574 <_realloc_r+0x2a0>
  e5a558:	90c00217 	ldw	r3,8(r18)
  e5a55c:	ba000604 	addi	r8,r23,24
  e5a560:	91000404 	addi	r4,r18,16
  e5a564:	b8c00415 	stw	r3,16(r23)
  e5a568:	90800317 	ldw	r2,12(r18)
  e5a56c:	b8800515 	stw	r2,20(r23)
  e5a570:	3140c726 	beq	r6,r5,e5a890 <_realloc_r+0x5bc>
  e5a574:	20800017 	ldw	r2,0(r4)
  e5a578:	b80f883a 	mov	r7,r23
  e5a57c:	003fd906 	br	e5a4e4 <_realloc_r+0x210>
  e5a580:	880b883a 	mov	r5,r17
  e5a584:	b009883a 	mov	r4,r22
  e5a588:	0e588a40 	call	e588a4 <_malloc_r>
  e5a58c:	1023883a 	mov	r17,r2
  e5a590:	10002526 	beq	r2,zero,e5a628 <_realloc_r+0x354>
  e5a594:	80800117 	ldw	r2,4(r16)
  e5a598:	00ffff84 	movi	r3,-2
  e5a59c:	893ffe04 	addi	r4,r17,-8
  e5a5a0:	10c4703a 	and	r2,r2,r3
  e5a5a4:	8085883a 	add	r2,r16,r2
  e5a5a8:	20809526 	beq	r4,r2,e5a800 <_realloc_r+0x52c>
  e5a5ac:	99bfff04 	addi	r6,r19,-4
  e5a5b0:	01c00904 	movi	r7,36
  e5a5b4:	39804536 	bltu	r7,r6,e5a6cc <_realloc_r+0x3f8>
  e5a5b8:	008004c4 	movi	r2,19
  e5a5bc:	9009883a 	mov	r4,r18
  e5a5c0:	880b883a 	mov	r5,r17
  e5a5c4:	11800f2e 	bgeu	r2,r6,e5a604 <_realloc_r+0x330>
  e5a5c8:	90800017 	ldw	r2,0(r18)
  e5a5cc:	89400204 	addi	r5,r17,8
  e5a5d0:	91000204 	addi	r4,r18,8
  e5a5d4:	88800015 	stw	r2,0(r17)
  e5a5d8:	90c00117 	ldw	r3,4(r18)
  e5a5dc:	008006c4 	movi	r2,27
  e5a5e0:	88c00115 	stw	r3,4(r17)
  e5a5e4:	1180072e 	bgeu	r2,r6,e5a604 <_realloc_r+0x330>
  e5a5e8:	90c00217 	ldw	r3,8(r18)
  e5a5ec:	89400404 	addi	r5,r17,16
  e5a5f0:	91000404 	addi	r4,r18,16
  e5a5f4:	88c00215 	stw	r3,8(r17)
  e5a5f8:	90800317 	ldw	r2,12(r18)
  e5a5fc:	88800315 	stw	r2,12(r17)
  e5a600:	31c09126 	beq	r6,r7,e5a848 <_realloc_r+0x574>
  e5a604:	20800017 	ldw	r2,0(r4)
  e5a608:	28800015 	stw	r2,0(r5)
  e5a60c:	20c00117 	ldw	r3,4(r4)
  e5a610:	28c00115 	stw	r3,4(r5)
  e5a614:	20800217 	ldw	r2,8(r4)
  e5a618:	28800215 	stw	r2,8(r5)
  e5a61c:	900b883a 	mov	r5,r18
  e5a620:	b009883a 	mov	r4,r22
  e5a624:	0e57d1c0 	call	e57d1c <_free_r>
  e5a628:	b009883a 	mov	r4,r22
  e5a62c:	0e5cd080 	call	e5cd08 <__malloc_unlock>
  e5a630:	003f5e06 	br	e5a3ac <_realloc_r+0xd8>
  e5a634:	300b883a 	mov	r5,r6
  e5a638:	dfc00b17 	ldw	ra,44(sp)
  e5a63c:	df000a17 	ldw	fp,40(sp)
  e5a640:	ddc00917 	ldw	r23,36(sp)
  e5a644:	dd800817 	ldw	r22,32(sp)
  e5a648:	dd400717 	ldw	r21,28(sp)
  e5a64c:	dd000617 	ldw	r20,24(sp)
  e5a650:	dcc00517 	ldw	r19,20(sp)
  e5a654:	dc800417 	ldw	r18,16(sp)
  e5a658:	dc400317 	ldw	r17,12(sp)
  e5a65c:	dc000217 	ldw	r16,8(sp)
  e5a660:	dec00c04 	addi	sp,sp,48
  e5a664:	0e588a41 	jmpi	e588a4 <_malloc_r>
  e5a668:	38800117 	ldw	r2,4(r7)
  e5a66c:	e54b883a 	add	r5,fp,r21
  e5a670:	31000054 	ori	r4,r6,1
  e5a674:	1080004c 	andi	r2,r2,1
  e5a678:	1704b03a 	or	r2,r2,fp
  e5a67c:	38800115 	stw	r2,4(r7)
  e5a680:	29000115 	stw	r4,4(r5)
  e5a684:	2987883a 	add	r3,r5,r6
  e5a688:	18800117 	ldw	r2,4(r3)
  e5a68c:	29400204 	addi	r5,r5,8
  e5a690:	b009883a 	mov	r4,r22
  e5a694:	10800054 	ori	r2,r2,1
  e5a698:	18800115 	stw	r2,4(r3)
  e5a69c:	0e57d1c0 	call	e57d1c <_free_r>
  e5a6a0:	003f3806 	br	e5a384 <_realloc_r+0xb0>
  e5a6a4:	000d883a 	mov	r6,zero
  e5a6a8:	0009883a 	mov	r4,zero
  e5a6ac:	003f5d06 	br	e5a424 <_realloc_r+0x150>
  e5a6b0:	30c00217 	ldw	r3,8(r6)
  e5a6b4:	30800317 	ldw	r2,12(r6)
  e5a6b8:	800f883a 	mov	r7,r16
  e5a6bc:	84000204 	addi	r16,r16,8
  e5a6c0:	10c00215 	stw	r3,8(r2)
  e5a6c4:	18800315 	stw	r2,12(r3)
  e5a6c8:	003f2306 	br	e5a358 <_realloc_r+0x84>
  e5a6cc:	8809883a 	mov	r4,r17
  e5a6d0:	900b883a 	mov	r5,r18
  e5a6d4:	0e591680 	call	e59168 <memmove>
  e5a6d8:	003fd006 	br	e5a61c <_realloc_r+0x348>
  e5a6dc:	30800117 	ldw	r2,4(r6)
  e5a6e0:	e0c00404 	addi	r3,fp,16
  e5a6e4:	1108703a 	and	r4,r2,r4
  e5a6e8:	9905883a 	add	r2,r19,r4
  e5a6ec:	10ff4d16 	blt	r2,r3,e5a424 <_realloc_r+0x150>
  e5a6f0:	1705c83a 	sub	r2,r2,fp
  e5a6f4:	870b883a 	add	r5,r16,fp
  e5a6f8:	10800054 	ori	r2,r2,1
  e5a6fc:	28800115 	stw	r2,4(r5)
  e5a700:	80c00117 	ldw	r3,4(r16)
  e5a704:	008039b4 	movhi	r2,230
  e5a708:	1086bc04 	addi	r2,r2,6896
  e5a70c:	b009883a 	mov	r4,r22
  e5a710:	18c0004c 	andi	r3,r3,1
  e5a714:	e0c6b03a 	or	r3,fp,r3
  e5a718:	11400215 	stw	r5,8(r2)
  e5a71c:	80c00115 	stw	r3,4(r16)
  e5a720:	0e5cd080 	call	e5cd08 <__malloc_unlock>
  e5a724:	84400204 	addi	r17,r16,8
  e5a728:	003f2006 	br	e5a3ac <_realloc_r+0xd8>
  e5a72c:	98a9883a 	add	r20,r19,r2
  e5a730:	2509883a 	add	r4,r4,r20
  e5a734:	e0800404 	addi	r2,fp,16
  e5a738:	d9000115 	stw	r4,4(sp)
  e5a73c:	20bf7016 	blt	r4,r2,e5a500 <_realloc_r+0x22c>
  e5a740:	b8c00317 	ldw	r3,12(r23)
  e5a744:	b8800217 	ldw	r2,8(r23)
  e5a748:	99bfff04 	addi	r6,r19,-4
  e5a74c:	01400904 	movi	r5,36
  e5a750:	18800215 	stw	r2,8(r3)
  e5a754:	10c00315 	stw	r3,12(r2)
  e5a758:	bc400204 	addi	r17,r23,8
  e5a75c:	29804136 	bltu	r5,r6,e5a864 <_realloc_r+0x590>
  e5a760:	008004c4 	movi	r2,19
  e5a764:	9009883a 	mov	r4,r18
  e5a768:	880f883a 	mov	r7,r17
  e5a76c:	11800f2e 	bgeu	r2,r6,e5a7ac <_realloc_r+0x4d8>
  e5a770:	90800017 	ldw	r2,0(r18)
  e5a774:	b9c00404 	addi	r7,r23,16
  e5a778:	91000204 	addi	r4,r18,8
  e5a77c:	b8800215 	stw	r2,8(r23)
  e5a780:	90c00117 	ldw	r3,4(r18)
  e5a784:	008006c4 	movi	r2,27
  e5a788:	b8c00315 	stw	r3,12(r23)
  e5a78c:	1180072e 	bgeu	r2,r6,e5a7ac <_realloc_r+0x4d8>
  e5a790:	90c00217 	ldw	r3,8(r18)
  e5a794:	b9c00604 	addi	r7,r23,24
  e5a798:	91000404 	addi	r4,r18,16
  e5a79c:	b8c00415 	stw	r3,16(r23)
  e5a7a0:	90800317 	ldw	r2,12(r18)
  e5a7a4:	b8800515 	stw	r2,20(r23)
  e5a7a8:	31404026 	beq	r6,r5,e5a8ac <_realloc_r+0x5d8>
  e5a7ac:	20800017 	ldw	r2,0(r4)
  e5a7b0:	38800015 	stw	r2,0(r7)
  e5a7b4:	20c00117 	ldw	r3,4(r4)
  e5a7b8:	38c00115 	stw	r3,4(r7)
  e5a7bc:	20800217 	ldw	r2,8(r4)
  e5a7c0:	38800215 	stw	r2,8(r7)
  e5a7c4:	d8c00117 	ldw	r3,4(sp)
  e5a7c8:	bf0b883a 	add	r5,r23,fp
  e5a7cc:	b009883a 	mov	r4,r22
  e5a7d0:	1f05c83a 	sub	r2,r3,fp
  e5a7d4:	10800054 	ori	r2,r2,1
  e5a7d8:	28800115 	stw	r2,4(r5)
  e5a7dc:	b8c00117 	ldw	r3,4(r23)
  e5a7e0:	008039b4 	movhi	r2,230
  e5a7e4:	1086bc04 	addi	r2,r2,6896
  e5a7e8:	11400215 	stw	r5,8(r2)
  e5a7ec:	18c0004c 	andi	r3,r3,1
  e5a7f0:	e0c6b03a 	or	r3,fp,r3
  e5a7f4:	b8c00115 	stw	r3,4(r23)
  e5a7f8:	0e5cd080 	call	e5cd08 <__malloc_unlock>
  e5a7fc:	003eeb06 	br	e5a3ac <_realloc_r+0xd8>
  e5a800:	20800117 	ldw	r2,4(r4)
  e5a804:	00ffff04 	movi	r3,-4
  e5a808:	800f883a 	mov	r7,r16
  e5a80c:	10c4703a 	and	r2,r2,r3
  e5a810:	98a9883a 	add	r20,r19,r2
  e5a814:	84000204 	addi	r16,r16,8
  e5a818:	003ecf06 	br	e5a358 <_realloc_r+0x84>
  e5a81c:	900b883a 	mov	r5,r18
  e5a820:	8009883a 	mov	r4,r16
  e5a824:	0e591680 	call	e59168 <memmove>
  e5a828:	dd000017 	ldw	r20,0(sp)
  e5a82c:	b80f883a 	mov	r7,r23
  e5a830:	003ec906 	br	e5a358 <_realloc_r+0x84>
  e5a834:	900b883a 	mov	r5,r18
  e5a838:	8009883a 	mov	r4,r16
  e5a83c:	0e591680 	call	e59168 <memmove>
  e5a840:	b80f883a 	mov	r7,r23
  e5a844:	003ec406 	br	e5a358 <_realloc_r+0x84>
  e5a848:	90c00417 	ldw	r3,16(r18)
  e5a84c:	89400604 	addi	r5,r17,24
  e5a850:	91000604 	addi	r4,r18,24
  e5a854:	88c00415 	stw	r3,16(r17)
  e5a858:	90800517 	ldw	r2,20(r18)
  e5a85c:	88800515 	stw	r2,20(r17)
  e5a860:	003f6806 	br	e5a604 <_realloc_r+0x330>
  e5a864:	900b883a 	mov	r5,r18
  e5a868:	8809883a 	mov	r4,r17
  e5a86c:	0e591680 	call	e59168 <memmove>
  e5a870:	003fd406 	br	e5a7c4 <_realloc_r+0x4f0>
  e5a874:	90c00417 	ldw	r3,16(r18)
  e5a878:	91000604 	addi	r4,r18,24
  e5a87c:	ba000804 	addi	r8,r23,32
  e5a880:	b8c00615 	stw	r3,24(r23)
  e5a884:	90800517 	ldw	r2,20(r18)
  e5a888:	b8800715 	stw	r2,28(r23)
  e5a88c:	003f1206 	br	e5a4d8 <_realloc_r+0x204>
  e5a890:	90c00417 	ldw	r3,16(r18)
  e5a894:	91000604 	addi	r4,r18,24
  e5a898:	ba000804 	addi	r8,r23,32
  e5a89c:	b8c00615 	stw	r3,24(r23)
  e5a8a0:	90800517 	ldw	r2,20(r18)
  e5a8a4:	b8800715 	stw	r2,28(r23)
  e5a8a8:	003f3206 	br	e5a574 <_realloc_r+0x2a0>
  e5a8ac:	90c00417 	ldw	r3,16(r18)
  e5a8b0:	91000604 	addi	r4,r18,24
  e5a8b4:	b9c00804 	addi	r7,r23,32
  e5a8b8:	b8c00615 	stw	r3,24(r23)
  e5a8bc:	90800517 	ldw	r2,20(r18)
  e5a8c0:	b8800715 	stw	r2,28(r23)
  e5a8c4:	003fb906 	br	e5a7ac <_realloc_r+0x4d8>

00e5a8c8 <__isinfd>:
  e5a8c8:	200d883a 	mov	r6,r4
  e5a8cc:	0109c83a 	sub	r4,zero,r4
  e5a8d0:	2188b03a 	or	r4,r4,r6
  e5a8d4:	2008d7fa 	srli	r4,r4,31
  e5a8d8:	00a00034 	movhi	r2,32768
  e5a8dc:	10bfffc4 	addi	r2,r2,-1
  e5a8e0:	1144703a 	and	r2,r2,r5
  e5a8e4:	2088b03a 	or	r4,r4,r2
  e5a8e8:	009ffc34 	movhi	r2,32752
  e5a8ec:	1105c83a 	sub	r2,r2,r4
  e5a8f0:	0087c83a 	sub	r3,zero,r2
  e5a8f4:	10c4b03a 	or	r2,r2,r3
  e5a8f8:	1004d7fa 	srli	r2,r2,31
  e5a8fc:	00c00044 	movi	r3,1
  e5a900:	1885c83a 	sub	r2,r3,r2
  e5a904:	f800283a 	ret

00e5a908 <__isnand>:
  e5a908:	200d883a 	mov	r6,r4
  e5a90c:	0109c83a 	sub	r4,zero,r4
  e5a910:	2188b03a 	or	r4,r4,r6
  e5a914:	2008d7fa 	srli	r4,r4,31
  e5a918:	00a00034 	movhi	r2,32768
  e5a91c:	10bfffc4 	addi	r2,r2,-1
  e5a920:	1144703a 	and	r2,r2,r5
  e5a924:	2088b03a 	or	r4,r4,r2
  e5a928:	009ffc34 	movhi	r2,32752
  e5a92c:	1105c83a 	sub	r2,r2,r4
  e5a930:	1004d7fa 	srli	r2,r2,31
  e5a934:	f800283a 	ret

00e5a938 <_sbrk_r>:
  e5a938:	defffd04 	addi	sp,sp,-12
  e5a93c:	dc000015 	stw	r16,0(sp)
  e5a940:	040039b4 	movhi	r16,230
  e5a944:	8413ac04 	addi	r16,r16,20144
  e5a948:	dc400115 	stw	r17,4(sp)
  e5a94c:	80000015 	stw	zero,0(r16)
  e5a950:	2023883a 	mov	r17,r4
  e5a954:	2809883a 	mov	r4,r5
  e5a958:	dfc00215 	stw	ra,8(sp)
  e5a95c:	0e5cf080 	call	e5cf08 <sbrk>
  e5a960:	1007883a 	mov	r3,r2
  e5a964:	00bfffc4 	movi	r2,-1
  e5a968:	18800626 	beq	r3,r2,e5a984 <_sbrk_r+0x4c>
  e5a96c:	1805883a 	mov	r2,r3
  e5a970:	dfc00217 	ldw	ra,8(sp)
  e5a974:	dc400117 	ldw	r17,4(sp)
  e5a978:	dc000017 	ldw	r16,0(sp)
  e5a97c:	dec00304 	addi	sp,sp,12
  e5a980:	f800283a 	ret
  e5a984:	80800017 	ldw	r2,0(r16)
  e5a988:	103ff826 	beq	r2,zero,e5a96c <_sbrk_r+0x34>
  e5a98c:	88800015 	stw	r2,0(r17)
  e5a990:	1805883a 	mov	r2,r3
  e5a994:	dfc00217 	ldw	ra,8(sp)
  e5a998:	dc400117 	ldw	r17,4(sp)
  e5a99c:	dc000017 	ldw	r16,0(sp)
  e5a9a0:	dec00304 	addi	sp,sp,12
  e5a9a4:	f800283a 	ret

00e5a9a8 <__sclose>:
  e5a9a8:	2940038f 	ldh	r5,14(r5)
  e5a9ac:	0e5acdc1 	jmpi	e5acdc <_close_r>

00e5a9b0 <__sseek>:
  e5a9b0:	defffe04 	addi	sp,sp,-8
  e5a9b4:	dc000015 	stw	r16,0(sp)
  e5a9b8:	2821883a 	mov	r16,r5
  e5a9bc:	2940038f 	ldh	r5,14(r5)
  e5a9c0:	dfc00115 	stw	ra,4(sp)
  e5a9c4:	0e5af540 	call	e5af54 <_lseek_r>
  e5a9c8:	1007883a 	mov	r3,r2
  e5a9cc:	00bfffc4 	movi	r2,-1
  e5a9d0:	18800926 	beq	r3,r2,e5a9f8 <__sseek+0x48>
  e5a9d4:	8080030b 	ldhu	r2,12(r16)
  e5a9d8:	80c01415 	stw	r3,80(r16)
  e5a9dc:	10840014 	ori	r2,r2,4096
  e5a9e0:	8080030d 	sth	r2,12(r16)
  e5a9e4:	1805883a 	mov	r2,r3
  e5a9e8:	dfc00117 	ldw	ra,4(sp)
  e5a9ec:	dc000017 	ldw	r16,0(sp)
  e5a9f0:	dec00204 	addi	sp,sp,8
  e5a9f4:	f800283a 	ret
  e5a9f8:	8080030b 	ldhu	r2,12(r16)
  e5a9fc:	10bbffcc 	andi	r2,r2,61439
  e5aa00:	8080030d 	sth	r2,12(r16)
  e5aa04:	1805883a 	mov	r2,r3
  e5aa08:	dfc00117 	ldw	ra,4(sp)
  e5aa0c:	dc000017 	ldw	r16,0(sp)
  e5aa10:	dec00204 	addi	sp,sp,8
  e5aa14:	f800283a 	ret

00e5aa18 <__swrite>:
  e5aa18:	2880030b 	ldhu	r2,12(r5)
  e5aa1c:	defffb04 	addi	sp,sp,-20
  e5aa20:	dcc00315 	stw	r19,12(sp)
  e5aa24:	1080400c 	andi	r2,r2,256
  e5aa28:	dc800215 	stw	r18,8(sp)
  e5aa2c:	dc400115 	stw	r17,4(sp)
  e5aa30:	dc000015 	stw	r16,0(sp)
  e5aa34:	3027883a 	mov	r19,r6
  e5aa38:	3825883a 	mov	r18,r7
  e5aa3c:	dfc00415 	stw	ra,16(sp)
  e5aa40:	2821883a 	mov	r16,r5
  e5aa44:	000d883a 	mov	r6,zero
  e5aa48:	01c00084 	movi	r7,2
  e5aa4c:	2023883a 	mov	r17,r4
  e5aa50:	10000226 	beq	r2,zero,e5aa5c <__swrite+0x44>
  e5aa54:	2940038f 	ldh	r5,14(r5)
  e5aa58:	0e5af540 	call	e5af54 <_lseek_r>
  e5aa5c:	8080030b 	ldhu	r2,12(r16)
  e5aa60:	8140038f 	ldh	r5,14(r16)
  e5aa64:	8809883a 	mov	r4,r17
  e5aa68:	10bbffcc 	andi	r2,r2,61439
  e5aa6c:	980d883a 	mov	r6,r19
  e5aa70:	900f883a 	mov	r7,r18
  e5aa74:	8080030d 	sth	r2,12(r16)
  e5aa78:	dfc00417 	ldw	ra,16(sp)
  e5aa7c:	dcc00317 	ldw	r19,12(sp)
  e5aa80:	dc800217 	ldw	r18,8(sp)
  e5aa84:	dc400117 	ldw	r17,4(sp)
  e5aa88:	dc000017 	ldw	r16,0(sp)
  e5aa8c:	dec00504 	addi	sp,sp,20
  e5aa90:	0e5abb01 	jmpi	e5abb0 <_write_r>

00e5aa94 <__sread>:
  e5aa94:	defffe04 	addi	sp,sp,-8
  e5aa98:	dc000015 	stw	r16,0(sp)
  e5aa9c:	2821883a 	mov	r16,r5
  e5aaa0:	2940038f 	ldh	r5,14(r5)
  e5aaa4:	dfc00115 	stw	ra,4(sp)
  e5aaa8:	0e5afcc0 	call	e5afcc <_read_r>
  e5aaac:	1007883a 	mov	r3,r2
  e5aab0:	10000816 	blt	r2,zero,e5aad4 <__sread+0x40>
  e5aab4:	80801417 	ldw	r2,80(r16)
  e5aab8:	10c5883a 	add	r2,r2,r3
  e5aabc:	80801415 	stw	r2,80(r16)
  e5aac0:	1805883a 	mov	r2,r3
  e5aac4:	dfc00117 	ldw	ra,4(sp)
  e5aac8:	dc000017 	ldw	r16,0(sp)
  e5aacc:	dec00204 	addi	sp,sp,8
  e5aad0:	f800283a 	ret
  e5aad4:	8080030b 	ldhu	r2,12(r16)
  e5aad8:	10bbffcc 	andi	r2,r2,61439
  e5aadc:	8080030d 	sth	r2,12(r16)
  e5aae0:	1805883a 	mov	r2,r3
  e5aae4:	dfc00117 	ldw	ra,4(sp)
  e5aae8:	dc000017 	ldw	r16,0(sp)
  e5aaec:	dec00204 	addi	sp,sp,8
  e5aaf0:	f800283a 	ret

00e5aaf4 <strcmp>:
  e5aaf4:	2144b03a 	or	r2,r4,r5
  e5aaf8:	108000cc 	andi	r2,r2,3
  e5aafc:	10001d1e 	bne	r2,zero,e5ab74 <strcmp+0x80>
  e5ab00:	200f883a 	mov	r7,r4
  e5ab04:	28800017 	ldw	r2,0(r5)
  e5ab08:	21000017 	ldw	r4,0(r4)
  e5ab0c:	280d883a 	mov	r6,r5
  e5ab10:	2080161e 	bne	r4,r2,e5ab6c <strcmp+0x78>
  e5ab14:	023fbff4 	movhi	r8,65279
  e5ab18:	423fbfc4 	addi	r8,r8,-257
  e5ab1c:	2207883a 	add	r3,r4,r8
  e5ab20:	01602074 	movhi	r5,32897
  e5ab24:	29602004 	addi	r5,r5,-32640
  e5ab28:	1946703a 	and	r3,r3,r5
  e5ab2c:	0104303a 	nor	r2,zero,r4
  e5ab30:	10c4703a 	and	r2,r2,r3
  e5ab34:	10001c1e 	bne	r2,zero,e5aba8 <strcmp+0xb4>
  e5ab38:	4013883a 	mov	r9,r8
  e5ab3c:	2811883a 	mov	r8,r5
  e5ab40:	00000106 	br	e5ab48 <strcmp+0x54>
  e5ab44:	1800181e 	bne	r3,zero,e5aba8 <strcmp+0xb4>
  e5ab48:	39c00104 	addi	r7,r7,4
  e5ab4c:	39000017 	ldw	r4,0(r7)
  e5ab50:	31800104 	addi	r6,r6,4
  e5ab54:	31400017 	ldw	r5,0(r6)
  e5ab58:	2245883a 	add	r2,r4,r9
  e5ab5c:	1204703a 	and	r2,r2,r8
  e5ab60:	0106303a 	nor	r3,zero,r4
  e5ab64:	1886703a 	and	r3,r3,r2
  e5ab68:	217ff626 	beq	r4,r5,e5ab44 <strcmp+0x50>
  e5ab6c:	3809883a 	mov	r4,r7
  e5ab70:	300b883a 	mov	r5,r6
  e5ab74:	20c00007 	ldb	r3,0(r4)
  e5ab78:	1800051e 	bne	r3,zero,e5ab90 <strcmp+0x9c>
  e5ab7c:	00000606 	br	e5ab98 <strcmp+0xa4>
  e5ab80:	21000044 	addi	r4,r4,1
  e5ab84:	20c00007 	ldb	r3,0(r4)
  e5ab88:	29400044 	addi	r5,r5,1
  e5ab8c:	18000226 	beq	r3,zero,e5ab98 <strcmp+0xa4>
  e5ab90:	28800007 	ldb	r2,0(r5)
  e5ab94:	18bffa26 	beq	r3,r2,e5ab80 <strcmp+0x8c>
  e5ab98:	20c00003 	ldbu	r3,0(r4)
  e5ab9c:	28800003 	ldbu	r2,0(r5)
  e5aba0:	1885c83a 	sub	r2,r3,r2
  e5aba4:	f800283a 	ret
  e5aba8:	0005883a 	mov	r2,zero
  e5abac:	f800283a 	ret

00e5abb0 <_write_r>:
  e5abb0:	defffd04 	addi	sp,sp,-12
  e5abb4:	dc000015 	stw	r16,0(sp)
  e5abb8:	040039b4 	movhi	r16,230
  e5abbc:	8413ac04 	addi	r16,r16,20144
  e5abc0:	dc400115 	stw	r17,4(sp)
  e5abc4:	80000015 	stw	zero,0(r16)
  e5abc8:	2023883a 	mov	r17,r4
  e5abcc:	2809883a 	mov	r4,r5
  e5abd0:	300b883a 	mov	r5,r6
  e5abd4:	380d883a 	mov	r6,r7
  e5abd8:	dfc00215 	stw	ra,8(sp)
  e5abdc:	0e5cfc40 	call	e5cfc4 <write>
  e5abe0:	1007883a 	mov	r3,r2
  e5abe4:	00bfffc4 	movi	r2,-1
  e5abe8:	18800626 	beq	r3,r2,e5ac04 <_write_r+0x54>
  e5abec:	1805883a 	mov	r2,r3
  e5abf0:	dfc00217 	ldw	ra,8(sp)
  e5abf4:	dc400117 	ldw	r17,4(sp)
  e5abf8:	dc000017 	ldw	r16,0(sp)
  e5abfc:	dec00304 	addi	sp,sp,12
  e5ac00:	f800283a 	ret
  e5ac04:	80800017 	ldw	r2,0(r16)
  e5ac08:	103ff826 	beq	r2,zero,e5abec <_write_r+0x3c>
  e5ac0c:	88800015 	stw	r2,0(r17)
  e5ac10:	1805883a 	mov	r2,r3
  e5ac14:	dfc00217 	ldw	ra,8(sp)
  e5ac18:	dc400117 	ldw	r17,4(sp)
  e5ac1c:	dc000017 	ldw	r16,0(sp)
  e5ac20:	dec00304 	addi	sp,sp,12
  e5ac24:	f800283a 	ret

00e5ac28 <_calloc_r>:
  e5ac28:	298b383a 	mul	r5,r5,r6
  e5ac2c:	defffe04 	addi	sp,sp,-8
  e5ac30:	dc000015 	stw	r16,0(sp)
  e5ac34:	dfc00115 	stw	ra,4(sp)
  e5ac38:	0e588a40 	call	e588a4 <_malloc_r>
  e5ac3c:	1021883a 	mov	r16,r2
  e5ac40:	01c00904 	movi	r7,36
  e5ac44:	10000d26 	beq	r2,zero,e5ac7c <_calloc_r+0x54>
  e5ac48:	10ffff17 	ldw	r3,-4(r2)
  e5ac4c:	1009883a 	mov	r4,r2
  e5ac50:	00bfff04 	movi	r2,-4
  e5ac54:	1886703a 	and	r3,r3,r2
  e5ac58:	1887883a 	add	r3,r3,r2
  e5ac5c:	180d883a 	mov	r6,r3
  e5ac60:	000b883a 	mov	r5,zero
  e5ac64:	38c01736 	bltu	r7,r3,e5acc4 <_calloc_r+0x9c>
  e5ac68:	008004c4 	movi	r2,19
  e5ac6c:	10c00836 	bltu	r2,r3,e5ac90 <_calloc_r+0x68>
  e5ac70:	20000215 	stw	zero,8(r4)
  e5ac74:	20000015 	stw	zero,0(r4)
  e5ac78:	20000115 	stw	zero,4(r4)
  e5ac7c:	8005883a 	mov	r2,r16
  e5ac80:	dfc00117 	ldw	ra,4(sp)
  e5ac84:	dc000017 	ldw	r16,0(sp)
  e5ac88:	dec00204 	addi	sp,sp,8
  e5ac8c:	f800283a 	ret
  e5ac90:	008006c4 	movi	r2,27
  e5ac94:	80000015 	stw	zero,0(r16)
  e5ac98:	80000115 	stw	zero,4(r16)
  e5ac9c:	81000204 	addi	r4,r16,8
  e5aca0:	10fff32e 	bgeu	r2,r3,e5ac70 <_calloc_r+0x48>
  e5aca4:	80000215 	stw	zero,8(r16)
  e5aca8:	80000315 	stw	zero,12(r16)
  e5acac:	81000404 	addi	r4,r16,16
  e5acb0:	19ffef1e 	bne	r3,r7,e5ac70 <_calloc_r+0x48>
  e5acb4:	81000604 	addi	r4,r16,24
  e5acb8:	80000415 	stw	zero,16(r16)
  e5acbc:	80000515 	stw	zero,20(r16)
  e5acc0:	003feb06 	br	e5ac70 <_calloc_r+0x48>
  e5acc4:	0e592480 	call	e59248 <memset>
  e5acc8:	8005883a 	mov	r2,r16
  e5accc:	dfc00117 	ldw	ra,4(sp)
  e5acd0:	dc000017 	ldw	r16,0(sp)
  e5acd4:	dec00204 	addi	sp,sp,8
  e5acd8:	f800283a 	ret

00e5acdc <_close_r>:
  e5acdc:	defffd04 	addi	sp,sp,-12
  e5ace0:	dc000015 	stw	r16,0(sp)
  e5ace4:	040039b4 	movhi	r16,230
  e5ace8:	8413ac04 	addi	r16,r16,20144
  e5acec:	dc400115 	stw	r17,4(sp)
  e5acf0:	80000015 	stw	zero,0(r16)
  e5acf4:	2023883a 	mov	r17,r4
  e5acf8:	2809883a 	mov	r4,r5
  e5acfc:	dfc00215 	stw	ra,8(sp)
  e5ad00:	0e5c6640 	call	e5c664 <close>
  e5ad04:	1007883a 	mov	r3,r2
  e5ad08:	00bfffc4 	movi	r2,-1
  e5ad0c:	18800626 	beq	r3,r2,e5ad28 <_close_r+0x4c>
  e5ad10:	1805883a 	mov	r2,r3
  e5ad14:	dfc00217 	ldw	ra,8(sp)
  e5ad18:	dc400117 	ldw	r17,4(sp)
  e5ad1c:	dc000017 	ldw	r16,0(sp)
  e5ad20:	dec00304 	addi	sp,sp,12
  e5ad24:	f800283a 	ret
  e5ad28:	80800017 	ldw	r2,0(r16)
  e5ad2c:	103ff826 	beq	r2,zero,e5ad10 <_close_r+0x34>
  e5ad30:	88800015 	stw	r2,0(r17)
  e5ad34:	1805883a 	mov	r2,r3
  e5ad38:	dfc00217 	ldw	ra,8(sp)
  e5ad3c:	dc400117 	ldw	r17,4(sp)
  e5ad40:	dc000017 	ldw	r16,0(sp)
  e5ad44:	dec00304 	addi	sp,sp,12
  e5ad48:	f800283a 	ret

00e5ad4c <_fclose_r>:
  e5ad4c:	defffc04 	addi	sp,sp,-16
  e5ad50:	dc400115 	stw	r17,4(sp)
  e5ad54:	dc000015 	stw	r16,0(sp)
  e5ad58:	dfc00315 	stw	ra,12(sp)
  e5ad5c:	dc800215 	stw	r18,8(sp)
  e5ad60:	2821883a 	mov	r16,r5
  e5ad64:	2023883a 	mov	r17,r4
  e5ad68:	28002926 	beq	r5,zero,e5ae10 <_fclose_r+0xc4>
  e5ad6c:	0e579880 	call	e57988 <__sfp_lock_acquire>
  e5ad70:	88000226 	beq	r17,zero,e5ad7c <_fclose_r+0x30>
  e5ad74:	88800e17 	ldw	r2,56(r17)
  e5ad78:	10002d26 	beq	r2,zero,e5ae30 <_fclose_r+0xe4>
  e5ad7c:	8080030f 	ldh	r2,12(r16)
  e5ad80:	10002226 	beq	r2,zero,e5ae0c <_fclose_r+0xc0>
  e5ad84:	8809883a 	mov	r4,r17
  e5ad88:	800b883a 	mov	r5,r16
  e5ad8c:	0e577000 	call	e57700 <_fflush_r>
  e5ad90:	1025883a 	mov	r18,r2
  e5ad94:	80800b17 	ldw	r2,44(r16)
  e5ad98:	10000426 	beq	r2,zero,e5adac <_fclose_r+0x60>
  e5ad9c:	81400717 	ldw	r5,28(r16)
  e5ada0:	8809883a 	mov	r4,r17
  e5ada4:	103ee83a 	callr	r2
  e5ada8:	10002a16 	blt	r2,zero,e5ae54 <_fclose_r+0x108>
  e5adac:	8080030b 	ldhu	r2,12(r16)
  e5adb0:	1080200c 	andi	r2,r2,128
  e5adb4:	1000231e 	bne	r2,zero,e5ae44 <_fclose_r+0xf8>
  e5adb8:	81400c17 	ldw	r5,48(r16)
  e5adbc:	28000526 	beq	r5,zero,e5add4 <_fclose_r+0x88>
  e5adc0:	80801004 	addi	r2,r16,64
  e5adc4:	28800226 	beq	r5,r2,e5add0 <_fclose_r+0x84>
  e5adc8:	8809883a 	mov	r4,r17
  e5adcc:	0e57d1c0 	call	e57d1c <_free_r>
  e5add0:	80000c15 	stw	zero,48(r16)
  e5add4:	81401117 	ldw	r5,68(r16)
  e5add8:	28000326 	beq	r5,zero,e5ade8 <_fclose_r+0x9c>
  e5addc:	8809883a 	mov	r4,r17
  e5ade0:	0e57d1c0 	call	e57d1c <_free_r>
  e5ade4:	80001115 	stw	zero,68(r16)
  e5ade8:	8000030d 	sth	zero,12(r16)
  e5adec:	0e5798c0 	call	e5798c <__sfp_lock_release>
  e5adf0:	9005883a 	mov	r2,r18
  e5adf4:	dfc00317 	ldw	ra,12(sp)
  e5adf8:	dc800217 	ldw	r18,8(sp)
  e5adfc:	dc400117 	ldw	r17,4(sp)
  e5ae00:	dc000017 	ldw	r16,0(sp)
  e5ae04:	dec00404 	addi	sp,sp,16
  e5ae08:	f800283a 	ret
  e5ae0c:	0e5798c0 	call	e5798c <__sfp_lock_release>
  e5ae10:	0025883a 	mov	r18,zero
  e5ae14:	9005883a 	mov	r2,r18
  e5ae18:	dfc00317 	ldw	ra,12(sp)
  e5ae1c:	dc800217 	ldw	r18,8(sp)
  e5ae20:	dc400117 	ldw	r17,4(sp)
  e5ae24:	dc000017 	ldw	r16,0(sp)
  e5ae28:	dec00404 	addi	sp,sp,16
  e5ae2c:	f800283a 	ret
  e5ae30:	8809883a 	mov	r4,r17
  e5ae34:	0e579980 	call	e57998 <__sinit>
  e5ae38:	8080030f 	ldh	r2,12(r16)
  e5ae3c:	103fd11e 	bne	r2,zero,e5ad84 <_fclose_r+0x38>
  e5ae40:	003ff206 	br	e5ae0c <_fclose_r+0xc0>
  e5ae44:	81400417 	ldw	r5,16(r16)
  e5ae48:	8809883a 	mov	r4,r17
  e5ae4c:	0e57d1c0 	call	e57d1c <_free_r>
  e5ae50:	003fd906 	br	e5adb8 <_fclose_r+0x6c>
  e5ae54:	04bfffc4 	movi	r18,-1
  e5ae58:	003fd406 	br	e5adac <_fclose_r+0x60>

00e5ae5c <fclose>:
  e5ae5c:	008039b4 	movhi	r2,230
  e5ae60:	108c9b04 	addi	r2,r2,12908
  e5ae64:	200b883a 	mov	r5,r4
  e5ae68:	11000017 	ldw	r4,0(r2)
  e5ae6c:	0e5ad4c1 	jmpi	e5ad4c <_fclose_r>

00e5ae70 <_fstat_r>:
  e5ae70:	defffd04 	addi	sp,sp,-12
  e5ae74:	dc000015 	stw	r16,0(sp)
  e5ae78:	040039b4 	movhi	r16,230
  e5ae7c:	8413ac04 	addi	r16,r16,20144
  e5ae80:	dc400115 	stw	r17,4(sp)
  e5ae84:	80000015 	stw	zero,0(r16)
  e5ae88:	2023883a 	mov	r17,r4
  e5ae8c:	2809883a 	mov	r4,r5
  e5ae90:	300b883a 	mov	r5,r6
  e5ae94:	dfc00215 	stw	ra,8(sp)
  e5ae98:	0e5c7ec0 	call	e5c7ec <fstat>
  e5ae9c:	1007883a 	mov	r3,r2
  e5aea0:	00bfffc4 	movi	r2,-1
  e5aea4:	18800626 	beq	r3,r2,e5aec0 <_fstat_r+0x50>
  e5aea8:	1805883a 	mov	r2,r3
  e5aeac:	dfc00217 	ldw	ra,8(sp)
  e5aeb0:	dc400117 	ldw	r17,4(sp)
  e5aeb4:	dc000017 	ldw	r16,0(sp)
  e5aeb8:	dec00304 	addi	sp,sp,12
  e5aebc:	f800283a 	ret
  e5aec0:	80800017 	ldw	r2,0(r16)
  e5aec4:	103ff826 	beq	r2,zero,e5aea8 <_fstat_r+0x38>
  e5aec8:	88800015 	stw	r2,0(r17)
  e5aecc:	1805883a 	mov	r2,r3
  e5aed0:	dfc00217 	ldw	ra,8(sp)
  e5aed4:	dc400117 	ldw	r17,4(sp)
  e5aed8:	dc000017 	ldw	r16,0(sp)
  e5aedc:	dec00304 	addi	sp,sp,12
  e5aee0:	f800283a 	ret

00e5aee4 <_isatty_r>:
  e5aee4:	defffd04 	addi	sp,sp,-12
  e5aee8:	dc000015 	stw	r16,0(sp)
  e5aeec:	040039b4 	movhi	r16,230
  e5aef0:	8413ac04 	addi	r16,r16,20144
  e5aef4:	dc400115 	stw	r17,4(sp)
  e5aef8:	80000015 	stw	zero,0(r16)
  e5aefc:	2023883a 	mov	r17,r4
  e5af00:	2809883a 	mov	r4,r5
  e5af04:	dfc00215 	stw	ra,8(sp)
  e5af08:	0e5c9200 	call	e5c920 <isatty>
  e5af0c:	1007883a 	mov	r3,r2
  e5af10:	00bfffc4 	movi	r2,-1
  e5af14:	18800626 	beq	r3,r2,e5af30 <_isatty_r+0x4c>
  e5af18:	1805883a 	mov	r2,r3
  e5af1c:	dfc00217 	ldw	ra,8(sp)
  e5af20:	dc400117 	ldw	r17,4(sp)
  e5af24:	dc000017 	ldw	r16,0(sp)
  e5af28:	dec00304 	addi	sp,sp,12
  e5af2c:	f800283a 	ret
  e5af30:	80800017 	ldw	r2,0(r16)
  e5af34:	103ff826 	beq	r2,zero,e5af18 <_isatty_r+0x34>
  e5af38:	88800015 	stw	r2,0(r17)
  e5af3c:	1805883a 	mov	r2,r3
  e5af40:	dfc00217 	ldw	ra,8(sp)
  e5af44:	dc400117 	ldw	r17,4(sp)
  e5af48:	dc000017 	ldw	r16,0(sp)
  e5af4c:	dec00304 	addi	sp,sp,12
  e5af50:	f800283a 	ret

00e5af54 <_lseek_r>:
  e5af54:	defffd04 	addi	sp,sp,-12
  e5af58:	dc000015 	stw	r16,0(sp)
  e5af5c:	040039b4 	movhi	r16,230
  e5af60:	8413ac04 	addi	r16,r16,20144
  e5af64:	dc400115 	stw	r17,4(sp)
  e5af68:	80000015 	stw	zero,0(r16)
  e5af6c:	2023883a 	mov	r17,r4
  e5af70:	2809883a 	mov	r4,r5
  e5af74:	300b883a 	mov	r5,r6
  e5af78:	380d883a 	mov	r6,r7
  e5af7c:	dfc00215 	stw	ra,8(sp)
  e5af80:	0e5cb2c0 	call	e5cb2c <lseek>
  e5af84:	1007883a 	mov	r3,r2
  e5af88:	00bfffc4 	movi	r2,-1
  e5af8c:	18800626 	beq	r3,r2,e5afa8 <_lseek_r+0x54>
  e5af90:	1805883a 	mov	r2,r3
  e5af94:	dfc00217 	ldw	ra,8(sp)
  e5af98:	dc400117 	ldw	r17,4(sp)
  e5af9c:	dc000017 	ldw	r16,0(sp)
  e5afa0:	dec00304 	addi	sp,sp,12
  e5afa4:	f800283a 	ret
  e5afa8:	80800017 	ldw	r2,0(r16)
  e5afac:	103ff826 	beq	r2,zero,e5af90 <_lseek_r+0x3c>
  e5afb0:	88800015 	stw	r2,0(r17)
  e5afb4:	1805883a 	mov	r2,r3
  e5afb8:	dfc00217 	ldw	ra,8(sp)
  e5afbc:	dc400117 	ldw	r17,4(sp)
  e5afc0:	dc000017 	ldw	r16,0(sp)
  e5afc4:	dec00304 	addi	sp,sp,12
  e5afc8:	f800283a 	ret

00e5afcc <_read_r>:
  e5afcc:	defffd04 	addi	sp,sp,-12
  e5afd0:	dc000015 	stw	r16,0(sp)
  e5afd4:	040039b4 	movhi	r16,230
  e5afd8:	8413ac04 	addi	r16,r16,20144
  e5afdc:	dc400115 	stw	r17,4(sp)
  e5afe0:	80000015 	stw	zero,0(r16)
  e5afe4:	2023883a 	mov	r17,r4
  e5afe8:	2809883a 	mov	r4,r5
  e5afec:	300b883a 	mov	r5,r6
  e5aff0:	380d883a 	mov	r6,r7
  e5aff4:	dfc00215 	stw	ra,8(sp)
  e5aff8:	0e5cd280 	call	e5cd28 <read>
  e5affc:	1007883a 	mov	r3,r2
  e5b000:	00bfffc4 	movi	r2,-1
  e5b004:	18800626 	beq	r3,r2,e5b020 <_read_r+0x54>
  e5b008:	1805883a 	mov	r2,r3
  e5b00c:	dfc00217 	ldw	ra,8(sp)
  e5b010:	dc400117 	ldw	r17,4(sp)
  e5b014:	dc000017 	ldw	r16,0(sp)
  e5b018:	dec00304 	addi	sp,sp,12
  e5b01c:	f800283a 	ret
  e5b020:	80800017 	ldw	r2,0(r16)
  e5b024:	103ff826 	beq	r2,zero,e5b008 <_read_r+0x3c>
  e5b028:	88800015 	stw	r2,0(r17)
  e5b02c:	1805883a 	mov	r2,r3
  e5b030:	dfc00217 	ldw	ra,8(sp)
  e5b034:	dc400117 	ldw	r17,4(sp)
  e5b038:	dc000017 	ldw	r16,0(sp)
  e5b03c:	dec00304 	addi	sp,sp,12
  e5b040:	f800283a 	ret

00e5b044 <__udivdi3>:
  e5b044:	defff004 	addi	sp,sp,-64
  e5b048:	2005883a 	mov	r2,r4
  e5b04c:	3011883a 	mov	r8,r6
  e5b050:	df000e15 	stw	fp,56(sp)
  e5b054:	dd000a15 	stw	r20,40(sp)
  e5b058:	dc000615 	stw	r16,24(sp)
  e5b05c:	dfc00f15 	stw	ra,60(sp)
  e5b060:	ddc00d15 	stw	r23,52(sp)
  e5b064:	dd800c15 	stw	r22,48(sp)
  e5b068:	dd400b15 	stw	r21,44(sp)
  e5b06c:	dcc00915 	stw	r19,36(sp)
  e5b070:	dc800815 	stw	r18,32(sp)
  e5b074:	dc400715 	stw	r17,28(sp)
  e5b078:	4021883a 	mov	r16,r8
  e5b07c:	1039883a 	mov	fp,r2
  e5b080:	2829883a 	mov	r20,r5
  e5b084:	38003b1e 	bne	r7,zero,e5b174 <__udivdi3+0x130>
  e5b088:	2a005c36 	bltu	r5,r8,e5b1fc <__udivdi3+0x1b8>
  e5b08c:	4000a626 	beq	r8,zero,e5b328 <__udivdi3+0x2e4>
  e5b090:	00bfffd4 	movui	r2,65535
  e5b094:	14009e36 	bltu	r2,r16,e5b310 <__udivdi3+0x2cc>
  e5b098:	00803fc4 	movi	r2,255
  e5b09c:	14013d36 	bltu	r2,r16,e5b594 <__udivdi3+0x550>
  e5b0a0:	000b883a 	mov	r5,zero
  e5b0a4:	0005883a 	mov	r2,zero
  e5b0a8:	8084d83a 	srl	r2,r16,r2
  e5b0ac:	010039b4 	movhi	r4,230
  e5b0b0:	2104a804 	addi	r4,r4,4768
  e5b0b4:	01800804 	movi	r6,32
  e5b0b8:	1105883a 	add	r2,r2,r4
  e5b0bc:	10c00003 	ldbu	r3,0(r2)
  e5b0c0:	28c7883a 	add	r3,r5,r3
  e5b0c4:	30edc83a 	sub	r22,r6,r3
  e5b0c8:	b000ee1e 	bne	r22,zero,e5b484 <__udivdi3+0x440>
  e5b0cc:	802ad43a 	srli	r21,r16,16
  e5b0d0:	00800044 	movi	r2,1
  e5b0d4:	a423c83a 	sub	r17,r20,r16
  e5b0d8:	85ffffcc 	andi	r23,r16,65535
  e5b0dc:	d8800315 	stw	r2,12(sp)
  e5b0e0:	8809883a 	mov	r4,r17
  e5b0e4:	a80b883a 	mov	r5,r21
  e5b0e8:	0e5c6540 	call	e5c654 <__udivsi3>
  e5b0ec:	8809883a 	mov	r4,r17
  e5b0f0:	a80b883a 	mov	r5,r21
  e5b0f4:	102d883a 	mov	r22,r2
  e5b0f8:	0e5c65c0 	call	e5c65c <__umodsi3>
  e5b0fc:	1004943a 	slli	r2,r2,16
  e5b100:	e006d43a 	srli	r3,fp,16
  e5b104:	bda3383a 	mul	r17,r23,r22
  e5b108:	10c4b03a 	or	r2,r2,r3
  e5b10c:	1440042e 	bgeu	r2,r17,e5b120 <__udivdi3+0xdc>
  e5b110:	1405883a 	add	r2,r2,r16
  e5b114:	b5bfffc4 	addi	r22,r22,-1
  e5b118:	14000136 	bltu	r2,r16,e5b120 <__udivdi3+0xdc>
  e5b11c:	14413d36 	bltu	r2,r17,e5b614 <__udivdi3+0x5d0>
  e5b120:	1463c83a 	sub	r17,r2,r17
  e5b124:	8809883a 	mov	r4,r17
  e5b128:	a80b883a 	mov	r5,r21
  e5b12c:	0e5c6540 	call	e5c654 <__udivsi3>
  e5b130:	8809883a 	mov	r4,r17
  e5b134:	a80b883a 	mov	r5,r21
  e5b138:	1029883a 	mov	r20,r2
  e5b13c:	0e5c65c0 	call	e5c65c <__umodsi3>
  e5b140:	1004943a 	slli	r2,r2,16
  e5b144:	bd09383a 	mul	r4,r23,r20
  e5b148:	e0ffffcc 	andi	r3,fp,65535
  e5b14c:	10c4b03a 	or	r2,r2,r3
  e5b150:	1100042e 	bgeu	r2,r4,e5b164 <__udivdi3+0x120>
  e5b154:	8085883a 	add	r2,r16,r2
  e5b158:	a53fffc4 	addi	r20,r20,-1
  e5b15c:	14000136 	bltu	r2,r16,e5b164 <__udivdi3+0x120>
  e5b160:	11012036 	bltu	r2,r4,e5b5e4 <__udivdi3+0x5a0>
  e5b164:	b004943a 	slli	r2,r22,16
  e5b168:	d9000317 	ldw	r4,12(sp)
  e5b16c:	a084b03a 	or	r2,r20,r2
  e5b170:	00001506 	br	e5b1c8 <__udivdi3+0x184>
  e5b174:	380d883a 	mov	r6,r7
  e5b178:	29c06236 	bltu	r5,r7,e5b304 <__udivdi3+0x2c0>
  e5b17c:	00bfffd4 	movui	r2,65535
  e5b180:	11c05a36 	bltu	r2,r7,e5b2ec <__udivdi3+0x2a8>
  e5b184:	00803fc4 	movi	r2,255
  e5b188:	11c0fc36 	bltu	r2,r7,e5b57c <__udivdi3+0x538>
  e5b18c:	000b883a 	mov	r5,zero
  e5b190:	0005883a 	mov	r2,zero
  e5b194:	3084d83a 	srl	r2,r6,r2
  e5b198:	010039b4 	movhi	r4,230
  e5b19c:	2104a804 	addi	r4,r4,4768
  e5b1a0:	01c00804 	movi	r7,32
  e5b1a4:	1105883a 	add	r2,r2,r4
  e5b1a8:	10c00003 	ldbu	r3,0(r2)
  e5b1ac:	28c7883a 	add	r3,r5,r3
  e5b1b0:	38efc83a 	sub	r23,r7,r3
  e5b1b4:	b800691e 	bne	r23,zero,e5b35c <__udivdi3+0x318>
  e5b1b8:	35000136 	bltu	r6,r20,e5b1c0 <__udivdi3+0x17c>
  e5b1bc:	e4005136 	bltu	fp,r16,e5b304 <__udivdi3+0x2c0>
  e5b1c0:	00800044 	movi	r2,1
  e5b1c4:	0009883a 	mov	r4,zero
  e5b1c8:	2007883a 	mov	r3,r4
  e5b1cc:	dfc00f17 	ldw	ra,60(sp)
  e5b1d0:	df000e17 	ldw	fp,56(sp)
  e5b1d4:	ddc00d17 	ldw	r23,52(sp)
  e5b1d8:	dd800c17 	ldw	r22,48(sp)
  e5b1dc:	dd400b17 	ldw	r21,44(sp)
  e5b1e0:	dd000a17 	ldw	r20,40(sp)
  e5b1e4:	dcc00917 	ldw	r19,36(sp)
  e5b1e8:	dc800817 	ldw	r18,32(sp)
  e5b1ec:	dc400717 	ldw	r17,28(sp)
  e5b1f0:	dc000617 	ldw	r16,24(sp)
  e5b1f4:	dec01004 	addi	sp,sp,64
  e5b1f8:	f800283a 	ret
  e5b1fc:	00bfffd4 	movui	r2,65535
  e5b200:	12005036 	bltu	r2,r8,e5b344 <__udivdi3+0x300>
  e5b204:	00803fc4 	movi	r2,255
  e5b208:	1200e836 	bltu	r2,r8,e5b5ac <__udivdi3+0x568>
  e5b20c:	000b883a 	mov	r5,zero
  e5b210:	0005883a 	mov	r2,zero
  e5b214:	8084d83a 	srl	r2,r16,r2
  e5b218:	010039b4 	movhi	r4,230
  e5b21c:	2104a804 	addi	r4,r4,4768
  e5b220:	01800804 	movi	r6,32
  e5b224:	1105883a 	add	r2,r2,r4
  e5b228:	10c00003 	ldbu	r3,0(r2)
  e5b22c:	28c7883a 	add	r3,r5,r3
  e5b230:	30cbc83a 	sub	r5,r6,r3
  e5b234:	28000626 	beq	r5,zero,e5b250 <__udivdi3+0x20c>
  e5b238:	3145c83a 	sub	r2,r6,r5
  e5b23c:	e084d83a 	srl	r2,fp,r2
  e5b240:	a146983a 	sll	r3,r20,r5
  e5b244:	e178983a 	sll	fp,fp,r5
  e5b248:	8160983a 	sll	r16,r16,r5
  e5b24c:	18a8b03a 	or	r20,r3,r2
  e5b250:	802ad43a 	srli	r21,r16,16
  e5b254:	a009883a 	mov	r4,r20
  e5b258:	85ffffcc 	andi	r23,r16,65535
  e5b25c:	a80b883a 	mov	r5,r21
  e5b260:	0e5c6540 	call	e5c654 <__udivsi3>
  e5b264:	a009883a 	mov	r4,r20
  e5b268:	a80b883a 	mov	r5,r21
  e5b26c:	102d883a 	mov	r22,r2
  e5b270:	0e5c65c0 	call	e5c65c <__umodsi3>
  e5b274:	1004943a 	slli	r2,r2,16
  e5b278:	e006d43a 	srli	r3,fp,16
  e5b27c:	bda3383a 	mul	r17,r23,r22
  e5b280:	10c4b03a 	or	r2,r2,r3
  e5b284:	1440042e 	bgeu	r2,r17,e5b298 <__udivdi3+0x254>
  e5b288:	1405883a 	add	r2,r2,r16
  e5b28c:	b5bfffc4 	addi	r22,r22,-1
  e5b290:	14000136 	bltu	r2,r16,e5b298 <__udivdi3+0x254>
  e5b294:	1440d536 	bltu	r2,r17,e5b5ec <__udivdi3+0x5a8>
  e5b298:	1463c83a 	sub	r17,r2,r17
  e5b29c:	8809883a 	mov	r4,r17
  e5b2a0:	a80b883a 	mov	r5,r21
  e5b2a4:	0e5c6540 	call	e5c654 <__udivsi3>
  e5b2a8:	8809883a 	mov	r4,r17
  e5b2ac:	a80b883a 	mov	r5,r21
  e5b2b0:	1029883a 	mov	r20,r2
  e5b2b4:	0e5c65c0 	call	e5c65c <__umodsi3>
  e5b2b8:	1004943a 	slli	r2,r2,16
  e5b2bc:	bd09383a 	mul	r4,r23,r20
  e5b2c0:	e0ffffcc 	andi	r3,fp,65535
  e5b2c4:	10c4b03a 	or	r2,r2,r3
  e5b2c8:	1100042e 	bgeu	r2,r4,e5b2dc <__udivdi3+0x298>
  e5b2cc:	8085883a 	add	r2,r16,r2
  e5b2d0:	a53fffc4 	addi	r20,r20,-1
  e5b2d4:	14000136 	bltu	r2,r16,e5b2dc <__udivdi3+0x298>
  e5b2d8:	1100c736 	bltu	r2,r4,e5b5f8 <__udivdi3+0x5b4>
  e5b2dc:	b004943a 	slli	r2,r22,16
  e5b2e0:	0009883a 	mov	r4,zero
  e5b2e4:	a084b03a 	or	r2,r20,r2
  e5b2e8:	003fb706 	br	e5b1c8 <__udivdi3+0x184>
  e5b2ec:	00804034 	movhi	r2,256
  e5b2f0:	10bfffc4 	addi	r2,r2,-1
  e5b2f4:	11c0a436 	bltu	r2,r7,e5b588 <__udivdi3+0x544>
  e5b2f8:	01400404 	movi	r5,16
  e5b2fc:	2805883a 	mov	r2,r5
  e5b300:	003fa406 	br	e5b194 <__udivdi3+0x150>
  e5b304:	0005883a 	mov	r2,zero
  e5b308:	0009883a 	mov	r4,zero
  e5b30c:	003fae06 	br	e5b1c8 <__udivdi3+0x184>
  e5b310:	00804034 	movhi	r2,256
  e5b314:	10bfffc4 	addi	r2,r2,-1
  e5b318:	1400a136 	bltu	r2,r16,e5b5a0 <__udivdi3+0x55c>
  e5b31c:	01400404 	movi	r5,16
  e5b320:	2805883a 	mov	r2,r5
  e5b324:	003f6006 	br	e5b0a8 <__udivdi3+0x64>
  e5b328:	01000044 	movi	r4,1
  e5b32c:	000b883a 	mov	r5,zero
  e5b330:	0e5c6540 	call	e5c654 <__udivsi3>
  e5b334:	1021883a 	mov	r16,r2
  e5b338:	00bfffd4 	movui	r2,65535
  e5b33c:	143ff436 	bltu	r2,r16,e5b310 <__udivdi3+0x2cc>
  e5b340:	003f5506 	br	e5b098 <__udivdi3+0x54>
  e5b344:	00804034 	movhi	r2,256
  e5b348:	10bfffc4 	addi	r2,r2,-1
  e5b34c:	12009a36 	bltu	r2,r8,e5b5b8 <__udivdi3+0x574>
  e5b350:	01400404 	movi	r5,16
  e5b354:	2805883a 	mov	r2,r5
  e5b358:	003fae06 	br	e5b214 <__udivdi3+0x1d0>
  e5b35c:	3dc5c83a 	sub	r2,r7,r23
  e5b360:	35c8983a 	sll	r4,r6,r23
  e5b364:	8086d83a 	srl	r3,r16,r2
  e5b368:	a0a2d83a 	srl	r17,r20,r2
  e5b36c:	e084d83a 	srl	r2,fp,r2
  e5b370:	20eab03a 	or	r21,r4,r3
  e5b374:	a82cd43a 	srli	r22,r21,16
  e5b378:	a5c6983a 	sll	r3,r20,r23
  e5b37c:	8809883a 	mov	r4,r17
  e5b380:	b00b883a 	mov	r5,r22
  e5b384:	1886b03a 	or	r3,r3,r2
  e5b388:	d8c00215 	stw	r3,8(sp)
  e5b38c:	0e5c6540 	call	e5c654 <__udivsi3>
  e5b390:	8809883a 	mov	r4,r17
  e5b394:	b00b883a 	mov	r5,r22
  e5b398:	1029883a 	mov	r20,r2
  e5b39c:	0e5c65c0 	call	e5c65c <__umodsi3>
  e5b3a0:	a8ffffcc 	andi	r3,r21,65535
  e5b3a4:	d8c00515 	stw	r3,20(sp)
  e5b3a8:	d9000217 	ldw	r4,8(sp)
  e5b3ac:	d9400517 	ldw	r5,20(sp)
  e5b3b0:	1004943a 	slli	r2,r2,16
  e5b3b4:	2006d43a 	srli	r3,r4,16
  e5b3b8:	85e0983a 	sll	r16,r16,r23
  e5b3bc:	2d23383a 	mul	r17,r5,r20
  e5b3c0:	10c4b03a 	or	r2,r2,r3
  e5b3c4:	dc000015 	stw	r16,0(sp)
  e5b3c8:	1440032e 	bgeu	r2,r17,e5b3d8 <__udivdi3+0x394>
  e5b3cc:	1545883a 	add	r2,r2,r21
  e5b3d0:	a53fffc4 	addi	r20,r20,-1
  e5b3d4:	15407f2e 	bgeu	r2,r21,e5b5d4 <__udivdi3+0x590>
  e5b3d8:	1463c83a 	sub	r17,r2,r17
  e5b3dc:	8809883a 	mov	r4,r17
  e5b3e0:	b00b883a 	mov	r5,r22
  e5b3e4:	0e5c6540 	call	e5c654 <__udivsi3>
  e5b3e8:	8809883a 	mov	r4,r17
  e5b3ec:	b00b883a 	mov	r5,r22
  e5b3f0:	1021883a 	mov	r16,r2
  e5b3f4:	0e5c65c0 	call	e5c65c <__umodsi3>
  e5b3f8:	d8c00517 	ldw	r3,20(sp)
  e5b3fc:	d9000217 	ldw	r4,8(sp)
  e5b400:	1004943a 	slli	r2,r2,16
  e5b404:	1c0f383a 	mul	r7,r3,r16
  e5b408:	20ffffcc 	andi	r3,r4,65535
  e5b40c:	10e2b03a 	or	r17,r2,r3
  e5b410:	89c0032e 	bgeu	r17,r7,e5b420 <__udivdi3+0x3dc>
  e5b414:	8d63883a 	add	r17,r17,r21
  e5b418:	843fffc4 	addi	r16,r16,-1
  e5b41c:	8d40692e 	bgeu	r17,r21,e5b5c4 <__udivdi3+0x580>
  e5b420:	a008943a 	slli	r4,r20,16
  e5b424:	d9400017 	ldw	r5,0(sp)
  e5b428:	89e3c83a 	sub	r17,r17,r7
  e5b42c:	8110b03a 	or	r8,r16,r4
  e5b430:	280cd43a 	srli	r6,r5,16
  e5b434:	28ffffcc 	andi	r3,r5,65535
  e5b438:	40bfffcc 	andi	r2,r8,65535
  e5b43c:	400ad43a 	srli	r5,r8,16
  e5b440:	10d3383a 	mul	r9,r2,r3
  e5b444:	1185383a 	mul	r2,r2,r6
  e5b448:	28c7383a 	mul	r3,r5,r3
  e5b44c:	4808d43a 	srli	r4,r9,16
  e5b450:	298b383a 	mul	r5,r5,r6
  e5b454:	10c5883a 	add	r2,r2,r3
  e5b458:	2089883a 	add	r4,r4,r2
  e5b45c:	20c0022e 	bgeu	r4,r3,e5b468 <__udivdi3+0x424>
  e5b460:	00800074 	movhi	r2,1
  e5b464:	288b883a 	add	r5,r5,r2
  e5b468:	2004d43a 	srli	r2,r4,16
  e5b46c:	288b883a 	add	r5,r5,r2
  e5b470:	89403f36 	bltu	r17,r5,e5b570 <__udivdi3+0x52c>
  e5b474:	89403926 	beq	r17,r5,e5b55c <__udivdi3+0x518>
  e5b478:	4005883a 	mov	r2,r8
  e5b47c:	0009883a 	mov	r4,zero
  e5b480:	003f5106 	br	e5b1c8 <__udivdi3+0x184>
  e5b484:	85a0983a 	sll	r16,r16,r22
  e5b488:	3585c83a 	sub	r2,r6,r22
  e5b48c:	a0a2d83a 	srl	r17,r20,r2
  e5b490:	802ad43a 	srli	r21,r16,16
  e5b494:	e084d83a 	srl	r2,fp,r2
  e5b498:	a586983a 	sll	r3,r20,r22
  e5b49c:	8809883a 	mov	r4,r17
  e5b4a0:	a80b883a 	mov	r5,r21
  e5b4a4:	1886b03a 	or	r3,r3,r2
  e5b4a8:	d8c00115 	stw	r3,4(sp)
  e5b4ac:	0e5c6540 	call	e5c654 <__udivsi3>
  e5b4b0:	8809883a 	mov	r4,r17
  e5b4b4:	a80b883a 	mov	r5,r21
  e5b4b8:	d8800415 	stw	r2,16(sp)
  e5b4bc:	0e5c65c0 	call	e5c65c <__umodsi3>
  e5b4c0:	d9000117 	ldw	r4,4(sp)
  e5b4c4:	d9400417 	ldw	r5,16(sp)
  e5b4c8:	1004943a 	slli	r2,r2,16
  e5b4cc:	85ffffcc 	andi	r23,r16,65535
  e5b4d0:	2006d43a 	srli	r3,r4,16
  e5b4d4:	b963383a 	mul	r17,r23,r5
  e5b4d8:	10c4b03a 	or	r2,r2,r3
  e5b4dc:	1440042e 	bgeu	r2,r17,e5b4f0 <__udivdi3+0x4ac>
  e5b4e0:	297fffc4 	addi	r5,r5,-1
  e5b4e4:	1405883a 	add	r2,r2,r16
  e5b4e8:	d9400415 	stw	r5,16(sp)
  e5b4ec:	1400442e 	bgeu	r2,r16,e5b600 <__udivdi3+0x5bc>
  e5b4f0:	1463c83a 	sub	r17,r2,r17
  e5b4f4:	8809883a 	mov	r4,r17
  e5b4f8:	a80b883a 	mov	r5,r21
  e5b4fc:	0e5c6540 	call	e5c654 <__udivsi3>
  e5b500:	8809883a 	mov	r4,r17
  e5b504:	a80b883a 	mov	r5,r21
  e5b508:	1029883a 	mov	r20,r2
  e5b50c:	0e5c65c0 	call	e5c65c <__umodsi3>
  e5b510:	d9400117 	ldw	r5,4(sp)
  e5b514:	1004943a 	slli	r2,r2,16
  e5b518:	bd09383a 	mul	r4,r23,r20
  e5b51c:	28ffffcc 	andi	r3,r5,65535
  e5b520:	10c6b03a 	or	r3,r2,r3
  e5b524:	1900062e 	bgeu	r3,r4,e5b540 <__udivdi3+0x4fc>
  e5b528:	1c07883a 	add	r3,r3,r16
  e5b52c:	a53fffc4 	addi	r20,r20,-1
  e5b530:	1c000336 	bltu	r3,r16,e5b540 <__udivdi3+0x4fc>
  e5b534:	1900022e 	bgeu	r3,r4,e5b540 <__udivdi3+0x4fc>
  e5b538:	a53fffc4 	addi	r20,r20,-1
  e5b53c:	1c07883a 	add	r3,r3,r16
  e5b540:	d9400417 	ldw	r5,16(sp)
  e5b544:	e5b8983a 	sll	fp,fp,r22
  e5b548:	1923c83a 	sub	r17,r3,r4
  e5b54c:	2804943a 	slli	r2,r5,16
  e5b550:	a0a8b03a 	or	r20,r20,r2
  e5b554:	dd000315 	stw	r20,12(sp)
  e5b558:	003ee106 	br	e5b0e0 <__udivdi3+0x9c>
  e5b55c:	2004943a 	slli	r2,r4,16
  e5b560:	e5c8983a 	sll	r4,fp,r23
  e5b564:	48ffffcc 	andi	r3,r9,65535
  e5b568:	10c5883a 	add	r2,r2,r3
  e5b56c:	20bfc22e 	bgeu	r4,r2,e5b478 <__udivdi3+0x434>
  e5b570:	40bfffc4 	addi	r2,r8,-1
  e5b574:	0009883a 	mov	r4,zero
  e5b578:	003f1306 	br	e5b1c8 <__udivdi3+0x184>
  e5b57c:	01400204 	movi	r5,8
  e5b580:	2805883a 	mov	r2,r5
  e5b584:	003f0306 	br	e5b194 <__udivdi3+0x150>
  e5b588:	01400604 	movi	r5,24
  e5b58c:	2805883a 	mov	r2,r5
  e5b590:	003f0006 	br	e5b194 <__udivdi3+0x150>
  e5b594:	01400204 	movi	r5,8
  e5b598:	2805883a 	mov	r2,r5
  e5b59c:	003ec206 	br	e5b0a8 <__udivdi3+0x64>
  e5b5a0:	01400604 	movi	r5,24
  e5b5a4:	2805883a 	mov	r2,r5
  e5b5a8:	003ebf06 	br	e5b0a8 <__udivdi3+0x64>
  e5b5ac:	01400204 	movi	r5,8
  e5b5b0:	2805883a 	mov	r2,r5
  e5b5b4:	003f1706 	br	e5b214 <__udivdi3+0x1d0>
  e5b5b8:	01400604 	movi	r5,24
  e5b5bc:	2805883a 	mov	r2,r5
  e5b5c0:	003f1406 	br	e5b214 <__udivdi3+0x1d0>
  e5b5c4:	89ff962e 	bgeu	r17,r7,e5b420 <__udivdi3+0x3dc>
  e5b5c8:	8d63883a 	add	r17,r17,r21
  e5b5cc:	843fffc4 	addi	r16,r16,-1
  e5b5d0:	003f9306 	br	e5b420 <__udivdi3+0x3dc>
  e5b5d4:	147f802e 	bgeu	r2,r17,e5b3d8 <__udivdi3+0x394>
  e5b5d8:	a53fffc4 	addi	r20,r20,-1
  e5b5dc:	1545883a 	add	r2,r2,r21
  e5b5e0:	003f7d06 	br	e5b3d8 <__udivdi3+0x394>
  e5b5e4:	a53fffc4 	addi	r20,r20,-1
  e5b5e8:	003ede06 	br	e5b164 <__udivdi3+0x120>
  e5b5ec:	b5bfffc4 	addi	r22,r22,-1
  e5b5f0:	1405883a 	add	r2,r2,r16
  e5b5f4:	003f2806 	br	e5b298 <__udivdi3+0x254>
  e5b5f8:	a53fffc4 	addi	r20,r20,-1
  e5b5fc:	003f3706 	br	e5b2dc <__udivdi3+0x298>
  e5b600:	147fbb2e 	bgeu	r2,r17,e5b4f0 <__udivdi3+0x4ac>
  e5b604:	297fffc4 	addi	r5,r5,-1
  e5b608:	1405883a 	add	r2,r2,r16
  e5b60c:	d9400415 	stw	r5,16(sp)
  e5b610:	003fb706 	br	e5b4f0 <__udivdi3+0x4ac>
  e5b614:	b5bfffc4 	addi	r22,r22,-1
  e5b618:	1405883a 	add	r2,r2,r16
  e5b61c:	003ec006 	br	e5b120 <__udivdi3+0xdc>

00e5b620 <__umoddi3>:
  e5b620:	defff104 	addi	sp,sp,-60
  e5b624:	dd800b15 	stw	r22,44(sp)
  e5b628:	dd000915 	stw	r20,36(sp)
  e5b62c:	dc000515 	stw	r16,20(sp)
  e5b630:	dfc00e15 	stw	ra,56(sp)
  e5b634:	df000d15 	stw	fp,52(sp)
  e5b638:	ddc00c15 	stw	r23,48(sp)
  e5b63c:	dd400a15 	stw	r21,40(sp)
  e5b640:	dcc00815 	stw	r19,32(sp)
  e5b644:	dc800715 	stw	r18,28(sp)
  e5b648:	dc400615 	stw	r17,24(sp)
  e5b64c:	3021883a 	mov	r16,r6
  e5b650:	202d883a 	mov	r22,r4
  e5b654:	2829883a 	mov	r20,r5
  e5b658:	38002b1e 	bne	r7,zero,e5b708 <__umoddi3+0xe8>
  e5b65c:	29805036 	bltu	r5,r6,e5b7a0 <__umoddi3+0x180>
  e5b660:	30008a26 	beq	r6,zero,e5b88c <__umoddi3+0x26c>
  e5b664:	00bfffd4 	movui	r2,65535
  e5b668:	14008236 	bltu	r2,r16,e5b874 <__umoddi3+0x254>
  e5b66c:	00803fc4 	movi	r2,255
  e5b670:	14013636 	bltu	r2,r16,e5bb4c <__umoddi3+0x52c>
  e5b674:	000b883a 	mov	r5,zero
  e5b678:	0005883a 	mov	r2,zero
  e5b67c:	8084d83a 	srl	r2,r16,r2
  e5b680:	010039b4 	movhi	r4,230
  e5b684:	2104a804 	addi	r4,r4,4768
  e5b688:	01800804 	movi	r6,32
  e5b68c:	1105883a 	add	r2,r2,r4
  e5b690:	10c00003 	ldbu	r3,0(r2)
  e5b694:	28c7883a 	add	r3,r5,r3
  e5b698:	30efc83a 	sub	r23,r6,r3
  e5b69c:	b800941e 	bne	r23,zero,e5b8f0 <__umoddi3+0x2d0>
  e5b6a0:	802ad43a 	srli	r21,r16,16
  e5b6a4:	a423c83a 	sub	r17,r20,r16
  e5b6a8:	0039883a 	mov	fp,zero
  e5b6ac:	853fffcc 	andi	r20,r16,65535
  e5b6b0:	8809883a 	mov	r4,r17
  e5b6b4:	a80b883a 	mov	r5,r21
  e5b6b8:	0e5c6540 	call	e5c654 <__udivsi3>
  e5b6bc:	8809883a 	mov	r4,r17
  e5b6c0:	a80b883a 	mov	r5,r21
  e5b6c4:	a0a3383a 	mul	r17,r20,r2
  e5b6c8:	0e5c65c0 	call	e5c65c <__umodsi3>
  e5b6cc:	1004943a 	slli	r2,r2,16
  e5b6d0:	b006d43a 	srli	r3,r22,16
  e5b6d4:	10c4b03a 	or	r2,r2,r3
  e5b6d8:	1440032e 	bgeu	r2,r17,e5b6e8 <__umoddi3+0xc8>
  e5b6dc:	1405883a 	add	r2,r2,r16
  e5b6e0:	14000136 	bltu	r2,r16,e5b6e8 <__umoddi3+0xc8>
  e5b6e4:	14413536 	bltu	r2,r17,e5bbbc <__umoddi3+0x59c>
  e5b6e8:	1463c83a 	sub	r17,r2,r17
  e5b6ec:	8809883a 	mov	r4,r17
  e5b6f0:	a80b883a 	mov	r5,r21
  e5b6f4:	0e5c6540 	call	e5c654 <__udivsi3>
  e5b6f8:	8809883a 	mov	r4,r17
  e5b6fc:	a0a3383a 	mul	r17,r20,r2
  e5b700:	a80b883a 	mov	r5,r21
  e5b704:	00004d06 	br	e5b83c <__umoddi3+0x21c>
  e5b708:	380d883a 	mov	r6,r7
  e5b70c:	29c0102e 	bgeu	r5,r7,e5b750 <__umoddi3+0x130>
  e5b710:	2011883a 	mov	r8,r4
  e5b714:	2813883a 	mov	r9,r5
  e5b718:	4005883a 	mov	r2,r8
  e5b71c:	4807883a 	mov	r3,r9
  e5b720:	dfc00e17 	ldw	ra,56(sp)
  e5b724:	df000d17 	ldw	fp,52(sp)
  e5b728:	ddc00c17 	ldw	r23,48(sp)
  e5b72c:	dd800b17 	ldw	r22,44(sp)
  e5b730:	dd400a17 	ldw	r21,40(sp)
  e5b734:	dd000917 	ldw	r20,36(sp)
  e5b738:	dcc00817 	ldw	r19,32(sp)
  e5b73c:	dc800717 	ldw	r18,28(sp)
  e5b740:	dc400617 	ldw	r17,24(sp)
  e5b744:	dc000517 	ldw	r16,20(sp)
  e5b748:	dec00f04 	addi	sp,sp,60
  e5b74c:	f800283a 	ret
  e5b750:	00bfffd4 	movui	r2,65535
  e5b754:	11c05a36 	bltu	r2,r7,e5b8c0 <__umoddi3+0x2a0>
  e5b758:	00803fc4 	movi	r2,255
  e5b75c:	11c0fe36 	bltu	r2,r7,e5bb58 <__umoddi3+0x538>
  e5b760:	000b883a 	mov	r5,zero
  e5b764:	0005883a 	mov	r2,zero
  e5b768:	3084d83a 	srl	r2,r6,r2
  e5b76c:	010039b4 	movhi	r4,230
  e5b770:	2104a804 	addi	r4,r4,4768
  e5b774:	01c00804 	movi	r7,32
  e5b778:	1105883a 	add	r2,r2,r4
  e5b77c:	10c00003 	ldbu	r3,0(r2)
  e5b780:	28c7883a 	add	r3,r5,r3
  e5b784:	38ebc83a 	sub	r21,r7,r3
  e5b788:	a800851e 	bne	r21,zero,e5b9a0 <__umoddi3+0x380>
  e5b78c:	35005236 	bltu	r6,r20,e5b8d8 <__umoddi3+0x2b8>
  e5b790:	b400512e 	bgeu	r22,r16,e5b8d8 <__umoddi3+0x2b8>
  e5b794:	b011883a 	mov	r8,r22
  e5b798:	a013883a 	mov	r9,r20
  e5b79c:	003fde06 	br	e5b718 <__umoddi3+0xf8>
  e5b7a0:	00bfffd4 	movui	r2,65535
  e5b7a4:	11804036 	bltu	r2,r6,e5b8a8 <__umoddi3+0x288>
  e5b7a8:	00803fc4 	movi	r2,255
  e5b7ac:	1180ed36 	bltu	r2,r6,e5bb64 <__umoddi3+0x544>
  e5b7b0:	000b883a 	mov	r5,zero
  e5b7b4:	0005883a 	mov	r2,zero
  e5b7b8:	8084d83a 	srl	r2,r16,r2
  e5b7bc:	010039b4 	movhi	r4,230
  e5b7c0:	2104a804 	addi	r4,r4,4768
  e5b7c4:	01800804 	movi	r6,32
  e5b7c8:	1105883a 	add	r2,r2,r4
  e5b7cc:	10c00003 	ldbu	r3,0(r2)
  e5b7d0:	28c7883a 	add	r3,r5,r3
  e5b7d4:	30c7c83a 	sub	r3,r6,r3
  e5b7d8:	1800bf1e 	bne	r3,zero,e5bad8 <__umoddi3+0x4b8>
  e5b7dc:	0039883a 	mov	fp,zero
  e5b7e0:	802ad43a 	srli	r21,r16,16
  e5b7e4:	a009883a 	mov	r4,r20
  e5b7e8:	85ffffcc 	andi	r23,r16,65535
  e5b7ec:	a80b883a 	mov	r5,r21
  e5b7f0:	0e5c6540 	call	e5c654 <__udivsi3>
  e5b7f4:	a009883a 	mov	r4,r20
  e5b7f8:	a80b883a 	mov	r5,r21
  e5b7fc:	b8a3383a 	mul	r17,r23,r2
  e5b800:	0e5c65c0 	call	e5c65c <__umodsi3>
  e5b804:	1004943a 	slli	r2,r2,16
  e5b808:	b006d43a 	srli	r3,r22,16
  e5b80c:	10c4b03a 	or	r2,r2,r3
  e5b810:	1440032e 	bgeu	r2,r17,e5b820 <__umoddi3+0x200>
  e5b814:	1405883a 	add	r2,r2,r16
  e5b818:	14000136 	bltu	r2,r16,e5b820 <__umoddi3+0x200>
  e5b81c:	1440e536 	bltu	r2,r17,e5bbb4 <__umoddi3+0x594>
  e5b820:	1463c83a 	sub	r17,r2,r17
  e5b824:	8809883a 	mov	r4,r17
  e5b828:	a80b883a 	mov	r5,r21
  e5b82c:	0e5c6540 	call	e5c654 <__udivsi3>
  e5b830:	8809883a 	mov	r4,r17
  e5b834:	b8a3383a 	mul	r17,r23,r2
  e5b838:	a80b883a 	mov	r5,r21
  e5b83c:	0e5c65c0 	call	e5c65c <__umodsi3>
  e5b840:	1004943a 	slli	r2,r2,16
  e5b844:	b0ffffcc 	andi	r3,r22,65535
  e5b848:	10c4b03a 	or	r2,r2,r3
  e5b84c:	1440042e 	bgeu	r2,r17,e5b860 <__umoddi3+0x240>
  e5b850:	1405883a 	add	r2,r2,r16
  e5b854:	14000236 	bltu	r2,r16,e5b860 <__umoddi3+0x240>
  e5b858:	1440012e 	bgeu	r2,r17,e5b860 <__umoddi3+0x240>
  e5b85c:	1405883a 	add	r2,r2,r16
  e5b860:	1445c83a 	sub	r2,r2,r17
  e5b864:	1724d83a 	srl	r18,r2,fp
  e5b868:	0013883a 	mov	r9,zero
  e5b86c:	9011883a 	mov	r8,r18
  e5b870:	003fa906 	br	e5b718 <__umoddi3+0xf8>
  e5b874:	00804034 	movhi	r2,256
  e5b878:	10bfffc4 	addi	r2,r2,-1
  e5b87c:	1400b036 	bltu	r2,r16,e5bb40 <__umoddi3+0x520>
  e5b880:	01400404 	movi	r5,16
  e5b884:	2805883a 	mov	r2,r5
  e5b888:	003f7c06 	br	e5b67c <__umoddi3+0x5c>
  e5b88c:	01000044 	movi	r4,1
  e5b890:	000b883a 	mov	r5,zero
  e5b894:	0e5c6540 	call	e5c654 <__udivsi3>
  e5b898:	1021883a 	mov	r16,r2
  e5b89c:	00bfffd4 	movui	r2,65535
  e5b8a0:	143ff436 	bltu	r2,r16,e5b874 <__umoddi3+0x254>
  e5b8a4:	003f7106 	br	e5b66c <__umoddi3+0x4c>
  e5b8a8:	00804034 	movhi	r2,256
  e5b8ac:	10bfffc4 	addi	r2,r2,-1
  e5b8b0:	1180af36 	bltu	r2,r6,e5bb70 <__umoddi3+0x550>
  e5b8b4:	01400404 	movi	r5,16
  e5b8b8:	2805883a 	mov	r2,r5
  e5b8bc:	003fbe06 	br	e5b7b8 <__umoddi3+0x198>
  e5b8c0:	00804034 	movhi	r2,256
  e5b8c4:	10bfffc4 	addi	r2,r2,-1
  e5b8c8:	11c0ac36 	bltu	r2,r7,e5bb7c <__umoddi3+0x55c>
  e5b8cc:	01400404 	movi	r5,16
  e5b8d0:	2805883a 	mov	r2,r5
  e5b8d4:	003fa406 	br	e5b768 <__umoddi3+0x148>
  e5b8d8:	b409c83a 	sub	r4,r22,r16
  e5b8dc:	b105803a 	cmpltu	r2,r22,r4
  e5b8e0:	a187c83a 	sub	r3,r20,r6
  e5b8e4:	18a9c83a 	sub	r20,r3,r2
  e5b8e8:	202d883a 	mov	r22,r4
  e5b8ec:	003fa906 	br	e5b794 <__umoddi3+0x174>
  e5b8f0:	85e0983a 	sll	r16,r16,r23
  e5b8f4:	35c5c83a 	sub	r2,r6,r23
  e5b8f8:	a0a2d83a 	srl	r17,r20,r2
  e5b8fc:	802ad43a 	srli	r21,r16,16
  e5b900:	b084d83a 	srl	r2,r22,r2
  e5b904:	a5c6983a 	sll	r3,r20,r23
  e5b908:	8809883a 	mov	r4,r17
  e5b90c:	a80b883a 	mov	r5,r21
  e5b910:	1886b03a 	or	r3,r3,r2
  e5b914:	d8c00115 	stw	r3,4(sp)
  e5b918:	853fffcc 	andi	r20,r16,65535
  e5b91c:	0e5c6540 	call	e5c654 <__udivsi3>
  e5b920:	8809883a 	mov	r4,r17
  e5b924:	a80b883a 	mov	r5,r21
  e5b928:	a0a3383a 	mul	r17,r20,r2
  e5b92c:	0e5c65c0 	call	e5c65c <__umodsi3>
  e5b930:	d9000117 	ldw	r4,4(sp)
  e5b934:	1004943a 	slli	r2,r2,16
  e5b938:	b839883a 	mov	fp,r23
  e5b93c:	2006d43a 	srli	r3,r4,16
  e5b940:	10c4b03a 	or	r2,r2,r3
  e5b944:	1440022e 	bgeu	r2,r17,e5b950 <__umoddi3+0x330>
  e5b948:	1405883a 	add	r2,r2,r16
  e5b94c:	1400962e 	bgeu	r2,r16,e5bba8 <__umoddi3+0x588>
  e5b950:	1463c83a 	sub	r17,r2,r17
  e5b954:	8809883a 	mov	r4,r17
  e5b958:	a80b883a 	mov	r5,r21
  e5b95c:	0e5c6540 	call	e5c654 <__udivsi3>
  e5b960:	8809883a 	mov	r4,r17
  e5b964:	a80b883a 	mov	r5,r21
  e5b968:	a0a3383a 	mul	r17,r20,r2
  e5b96c:	0e5c65c0 	call	e5c65c <__umodsi3>
  e5b970:	d9400117 	ldw	r5,4(sp)
  e5b974:	1004943a 	slli	r2,r2,16
  e5b978:	28ffffcc 	andi	r3,r5,65535
  e5b97c:	10c4b03a 	or	r2,r2,r3
  e5b980:	1440042e 	bgeu	r2,r17,e5b994 <__umoddi3+0x374>
  e5b984:	1405883a 	add	r2,r2,r16
  e5b988:	14000236 	bltu	r2,r16,e5b994 <__umoddi3+0x374>
  e5b98c:	1440012e 	bgeu	r2,r17,e5b994 <__umoddi3+0x374>
  e5b990:	1405883a 	add	r2,r2,r16
  e5b994:	b5ec983a 	sll	r22,r22,r23
  e5b998:	1463c83a 	sub	r17,r2,r17
  e5b99c:	003f4406 	br	e5b6b0 <__umoddi3+0x90>
  e5b9a0:	3d4fc83a 	sub	r7,r7,r21
  e5b9a4:	3546983a 	sll	r3,r6,r21
  e5b9a8:	81c4d83a 	srl	r2,r16,r7
  e5b9ac:	a1e2d83a 	srl	r17,r20,r7
  e5b9b0:	a54c983a 	sll	r6,r20,r21
  e5b9b4:	18aeb03a 	or	r23,r3,r2
  e5b9b8:	b828d43a 	srli	r20,r23,16
  e5b9bc:	b1c4d83a 	srl	r2,r22,r7
  e5b9c0:	8809883a 	mov	r4,r17
  e5b9c4:	a00b883a 	mov	r5,r20
  e5b9c8:	308cb03a 	or	r6,r6,r2
  e5b9cc:	d9c00315 	stw	r7,12(sp)
  e5b9d0:	d9800215 	stw	r6,8(sp)
  e5b9d4:	0e5c6540 	call	e5c654 <__udivsi3>
  e5b9d8:	8809883a 	mov	r4,r17
  e5b9dc:	a00b883a 	mov	r5,r20
  e5b9e0:	1039883a 	mov	fp,r2
  e5b9e4:	0e5c65c0 	call	e5c65c <__umodsi3>
  e5b9e8:	b8ffffcc 	andi	r3,r23,65535
  e5b9ec:	d8c00415 	stw	r3,16(sp)
  e5b9f0:	d9000217 	ldw	r4,8(sp)
  e5b9f4:	d9400417 	ldw	r5,16(sp)
  e5b9f8:	1004943a 	slli	r2,r2,16
  e5b9fc:	2006d43a 	srli	r3,r4,16
  e5ba00:	8560983a 	sll	r16,r16,r21
  e5ba04:	2f23383a 	mul	r17,r5,fp
  e5ba08:	10c4b03a 	or	r2,r2,r3
  e5ba0c:	dc000015 	stw	r16,0(sp)
  e5ba10:	b56c983a 	sll	r22,r22,r21
  e5ba14:	1440032e 	bgeu	r2,r17,e5ba24 <__umoddi3+0x404>
  e5ba18:	15c5883a 	add	r2,r2,r23
  e5ba1c:	e73fffc4 	addi	fp,fp,-1
  e5ba20:	15c05d2e 	bgeu	r2,r23,e5bb98 <__umoddi3+0x578>
  e5ba24:	1463c83a 	sub	r17,r2,r17
  e5ba28:	8809883a 	mov	r4,r17
  e5ba2c:	a00b883a 	mov	r5,r20
  e5ba30:	0e5c6540 	call	e5c654 <__udivsi3>
  e5ba34:	8809883a 	mov	r4,r17
  e5ba38:	a00b883a 	mov	r5,r20
  e5ba3c:	1021883a 	mov	r16,r2
  e5ba40:	0e5c65c0 	call	e5c65c <__umodsi3>
  e5ba44:	d8c00417 	ldw	r3,16(sp)
  e5ba48:	d9000217 	ldw	r4,8(sp)
  e5ba4c:	1004943a 	slli	r2,r2,16
  e5ba50:	1c23383a 	mul	r17,r3,r16
  e5ba54:	20ffffcc 	andi	r3,r4,65535
  e5ba58:	10ceb03a 	or	r7,r2,r3
  e5ba5c:	3c40032e 	bgeu	r7,r17,e5ba6c <__umoddi3+0x44c>
  e5ba60:	3dcf883a 	add	r7,r7,r23
  e5ba64:	843fffc4 	addi	r16,r16,-1
  e5ba68:	3dc0472e 	bgeu	r7,r23,e5bb88 <__umoddi3+0x568>
  e5ba6c:	e004943a 	slli	r2,fp,16
  e5ba70:	d9400017 	ldw	r5,0(sp)
  e5ba74:	3c4fc83a 	sub	r7,r7,r17
  e5ba78:	8084b03a 	or	r2,r16,r2
  e5ba7c:	28ffffcc 	andi	r3,r5,65535
  e5ba80:	280cd43a 	srli	r6,r5,16
  e5ba84:	100ad43a 	srli	r5,r2,16
  e5ba88:	10bfffcc 	andi	r2,r2,65535
  e5ba8c:	10d1383a 	mul	r8,r2,r3
  e5ba90:	28c7383a 	mul	r3,r5,r3
  e5ba94:	1185383a 	mul	r2,r2,r6
  e5ba98:	4008d43a 	srli	r4,r8,16
  e5ba9c:	298b383a 	mul	r5,r5,r6
  e5baa0:	10c5883a 	add	r2,r2,r3
  e5baa4:	2089883a 	add	r4,r4,r2
  e5baa8:	20c0022e 	bgeu	r4,r3,e5bab4 <__umoddi3+0x494>
  e5baac:	00800074 	movhi	r2,1
  e5bab0:	288b883a 	add	r5,r5,r2
  e5bab4:	2004d43a 	srli	r2,r4,16
  e5bab8:	2008943a 	slli	r4,r4,16
  e5babc:	40ffffcc 	andi	r3,r8,65535
  e5bac0:	288b883a 	add	r5,r5,r2
  e5bac4:	20c9883a 	add	r4,r4,r3
  e5bac8:	39400b36 	bltu	r7,r5,e5baf8 <__umoddi3+0x4d8>
  e5bacc:	39403d26 	beq	r7,r5,e5bbc4 <__umoddi3+0x5a4>
  e5bad0:	394bc83a 	sub	r5,r7,r5
  e5bad4:	00000f06 	br	e5bb14 <__umoddi3+0x4f4>
  e5bad8:	30c5c83a 	sub	r2,r6,r3
  e5badc:	1839883a 	mov	fp,r3
  e5bae0:	b084d83a 	srl	r2,r22,r2
  e5bae4:	a0c6983a 	sll	r3,r20,r3
  e5bae8:	8720983a 	sll	r16,r16,fp
  e5baec:	b72c983a 	sll	r22,r22,fp
  e5baf0:	18a8b03a 	or	r20,r3,r2
  e5baf4:	003f3a06 	br	e5b7e0 <__umoddi3+0x1c0>
  e5baf8:	d8c00017 	ldw	r3,0(sp)
  e5bafc:	20c5c83a 	sub	r2,r4,r3
  e5bb00:	2089803a 	cmpltu	r4,r4,r2
  e5bb04:	2dc7c83a 	sub	r3,r5,r23
  e5bb08:	1907c83a 	sub	r3,r3,r4
  e5bb0c:	38cbc83a 	sub	r5,r7,r3
  e5bb10:	1009883a 	mov	r4,r2
  e5bb14:	b105c83a 	sub	r2,r22,r4
  e5bb18:	b087803a 	cmpltu	r3,r22,r2
  e5bb1c:	28c7c83a 	sub	r3,r5,r3
  e5bb20:	d9400317 	ldw	r5,12(sp)
  e5bb24:	1544d83a 	srl	r2,r2,r21
  e5bb28:	1948983a 	sll	r4,r3,r5
  e5bb2c:	1d46d83a 	srl	r3,r3,r21
  e5bb30:	20a4b03a 	or	r18,r4,r2
  e5bb34:	9011883a 	mov	r8,r18
  e5bb38:	1813883a 	mov	r9,r3
  e5bb3c:	003ef606 	br	e5b718 <__umoddi3+0xf8>
  e5bb40:	01400604 	movi	r5,24
  e5bb44:	2805883a 	mov	r2,r5
  e5bb48:	003ecc06 	br	e5b67c <__umoddi3+0x5c>
  e5bb4c:	01400204 	movi	r5,8
  e5bb50:	2805883a 	mov	r2,r5
  e5bb54:	003ec906 	br	e5b67c <__umoddi3+0x5c>
  e5bb58:	01400204 	movi	r5,8
  e5bb5c:	2805883a 	mov	r2,r5
  e5bb60:	003f0106 	br	e5b768 <__umoddi3+0x148>
  e5bb64:	01400204 	movi	r5,8
  e5bb68:	2805883a 	mov	r2,r5
  e5bb6c:	003f1206 	br	e5b7b8 <__umoddi3+0x198>
  e5bb70:	01400604 	movi	r5,24
  e5bb74:	2805883a 	mov	r2,r5
  e5bb78:	003f0f06 	br	e5b7b8 <__umoddi3+0x198>
  e5bb7c:	01400604 	movi	r5,24
  e5bb80:	2805883a 	mov	r2,r5
  e5bb84:	003ef806 	br	e5b768 <__umoddi3+0x148>
  e5bb88:	3c7fb82e 	bgeu	r7,r17,e5ba6c <__umoddi3+0x44c>
  e5bb8c:	843fffc4 	addi	r16,r16,-1
  e5bb90:	3dcf883a 	add	r7,r7,r23
  e5bb94:	003fb506 	br	e5ba6c <__umoddi3+0x44c>
  e5bb98:	147fa22e 	bgeu	r2,r17,e5ba24 <__umoddi3+0x404>
  e5bb9c:	e73fffc4 	addi	fp,fp,-1
  e5bba0:	15c5883a 	add	r2,r2,r23
  e5bba4:	003f9f06 	br	e5ba24 <__umoddi3+0x404>
  e5bba8:	147f692e 	bgeu	r2,r17,e5b950 <__umoddi3+0x330>
  e5bbac:	1405883a 	add	r2,r2,r16
  e5bbb0:	003f6706 	br	e5b950 <__umoddi3+0x330>
  e5bbb4:	1405883a 	add	r2,r2,r16
  e5bbb8:	003f1906 	br	e5b820 <__umoddi3+0x200>
  e5bbbc:	1405883a 	add	r2,r2,r16
  e5bbc0:	003ec906 	br	e5b6e8 <__umoddi3+0xc8>
  e5bbc4:	b13fcc36 	bltu	r22,r4,e5baf8 <__umoddi3+0x4d8>
  e5bbc8:	000b883a 	mov	r5,zero
  e5bbcc:	003fd106 	br	e5bb14 <__umoddi3+0x4f4>

00e5bbd0 <__muldf3>:
  e5bbd0:	deffe004 	addi	sp,sp,-128
  e5bbd4:	dc401815 	stw	r17,96(sp)
  e5bbd8:	dc400404 	addi	r17,sp,16
  e5bbdc:	2011883a 	mov	r8,r4
  e5bbe0:	2813883a 	mov	r9,r5
  e5bbe4:	dc001715 	stw	r16,92(sp)
  e5bbe8:	d809883a 	mov	r4,sp
  e5bbec:	880b883a 	mov	r5,r17
  e5bbf0:	dc000904 	addi	r16,sp,36
  e5bbf4:	dfc01f15 	stw	ra,124(sp)
  e5bbf8:	da400115 	stw	r9,4(sp)
  e5bbfc:	d9c00315 	stw	r7,12(sp)
  e5bc00:	da000015 	stw	r8,0(sp)
  e5bc04:	d9800215 	stw	r6,8(sp)
  e5bc08:	ddc01e15 	stw	r23,120(sp)
  e5bc0c:	dd801d15 	stw	r22,116(sp)
  e5bc10:	dd401c15 	stw	r21,112(sp)
  e5bc14:	dd001b15 	stw	r20,108(sp)
  e5bc18:	dcc01a15 	stw	r19,104(sp)
  e5bc1c:	dc801915 	stw	r18,100(sp)
  e5bc20:	0e53a4c0 	call	e53a4c <__unpack_d>
  e5bc24:	d9000204 	addi	r4,sp,8
  e5bc28:	800b883a 	mov	r5,r16
  e5bc2c:	0e53a4c0 	call	e53a4c <__unpack_d>
  e5bc30:	d9000417 	ldw	r4,16(sp)
  e5bc34:	00800044 	movi	r2,1
  e5bc38:	1100102e 	bgeu	r2,r4,e5bc7c <__muldf3+0xac>
  e5bc3c:	d8c00917 	ldw	r3,36(sp)
  e5bc40:	10c0062e 	bgeu	r2,r3,e5bc5c <__muldf3+0x8c>
  e5bc44:	00800104 	movi	r2,4
  e5bc48:	20800a26 	beq	r4,r2,e5bc74 <__muldf3+0xa4>
  e5bc4c:	1880cc26 	beq	r3,r2,e5bf80 <__muldf3+0x3b0>
  e5bc50:	00800084 	movi	r2,2
  e5bc54:	20800926 	beq	r4,r2,e5bc7c <__muldf3+0xac>
  e5bc58:	1880191e 	bne	r3,r2,e5bcc0 <__muldf3+0xf0>
  e5bc5c:	d8c00a17 	ldw	r3,40(sp)
  e5bc60:	d8800517 	ldw	r2,20(sp)
  e5bc64:	8009883a 	mov	r4,r16
  e5bc68:	10c4c03a 	cmpne	r2,r2,r3
  e5bc6c:	d8800a15 	stw	r2,40(sp)
  e5bc70:	00000706 	br	e5bc90 <__muldf3+0xc0>
  e5bc74:	00800084 	movi	r2,2
  e5bc78:	1880c326 	beq	r3,r2,e5bf88 <__muldf3+0x3b8>
  e5bc7c:	d8800517 	ldw	r2,20(sp)
  e5bc80:	d8c00a17 	ldw	r3,40(sp)
  e5bc84:	8809883a 	mov	r4,r17
  e5bc88:	10c4c03a 	cmpne	r2,r2,r3
  e5bc8c:	d8800515 	stw	r2,20(sp)
  e5bc90:	0e537380 	call	e53738 <__pack_d>
  e5bc94:	dfc01f17 	ldw	ra,124(sp)
  e5bc98:	ddc01e17 	ldw	r23,120(sp)
  e5bc9c:	dd801d17 	ldw	r22,116(sp)
  e5bca0:	dd401c17 	ldw	r21,112(sp)
  e5bca4:	dd001b17 	ldw	r20,108(sp)
  e5bca8:	dcc01a17 	ldw	r19,104(sp)
  e5bcac:	dc801917 	ldw	r18,100(sp)
  e5bcb0:	dc401817 	ldw	r17,96(sp)
  e5bcb4:	dc001717 	ldw	r16,92(sp)
  e5bcb8:	dec02004 	addi	sp,sp,128
  e5bcbc:	f800283a 	ret
  e5bcc0:	dd800717 	ldw	r22,28(sp)
  e5bcc4:	dc800c17 	ldw	r18,48(sp)
  e5bcc8:	002b883a 	mov	r21,zero
  e5bccc:	0023883a 	mov	r17,zero
  e5bcd0:	a80b883a 	mov	r5,r21
  e5bcd4:	b00d883a 	mov	r6,r22
  e5bcd8:	880f883a 	mov	r7,r17
  e5bcdc:	ddc00817 	ldw	r23,32(sp)
  e5bce0:	dcc00d17 	ldw	r19,52(sp)
  e5bce4:	9009883a 	mov	r4,r18
  e5bce8:	0e521280 	call	e52128 <__muldi3>
  e5bcec:	001b883a 	mov	r13,zero
  e5bcf0:	680f883a 	mov	r7,r13
  e5bcf4:	b009883a 	mov	r4,r22
  e5bcf8:	000b883a 	mov	r5,zero
  e5bcfc:	980d883a 	mov	r6,r19
  e5bd00:	b82d883a 	mov	r22,r23
  e5bd04:	002f883a 	mov	r23,zero
  e5bd08:	db401615 	stw	r13,88(sp)
  e5bd0c:	d8801315 	stw	r2,76(sp)
  e5bd10:	d8c01415 	stw	r3,80(sp)
  e5bd14:	dcc01515 	stw	r19,84(sp)
  e5bd18:	0e521280 	call	e52128 <__muldi3>
  e5bd1c:	b00d883a 	mov	r6,r22
  e5bd20:	000b883a 	mov	r5,zero
  e5bd24:	9009883a 	mov	r4,r18
  e5bd28:	b80f883a 	mov	r7,r23
  e5bd2c:	1021883a 	mov	r16,r2
  e5bd30:	1823883a 	mov	r17,r3
  e5bd34:	0e521280 	call	e52128 <__muldi3>
  e5bd38:	8085883a 	add	r2,r16,r2
  e5bd3c:	140d803a 	cmpltu	r6,r2,r16
  e5bd40:	88c7883a 	add	r3,r17,r3
  e5bd44:	30cd883a 	add	r6,r6,r3
  e5bd48:	1029883a 	mov	r20,r2
  e5bd4c:	302b883a 	mov	r21,r6
  e5bd50:	da801317 	ldw	r10,76(sp)
  e5bd54:	dac01417 	ldw	r11,80(sp)
  e5bd58:	db001517 	ldw	r12,84(sp)
  e5bd5c:	db401617 	ldw	r13,88(sp)
  e5bd60:	3440612e 	bgeu	r6,r17,e5bee8 <__muldf3+0x318>
  e5bd64:	0009883a 	mov	r4,zero
  e5bd68:	5105883a 	add	r2,r10,r4
  e5bd6c:	128d803a 	cmpltu	r6,r2,r10
  e5bd70:	5d07883a 	add	r3,r11,r20
  e5bd74:	30cd883a 	add	r6,r6,r3
  e5bd78:	0021883a 	mov	r16,zero
  e5bd7c:	04400044 	movi	r17,1
  e5bd80:	1025883a 	mov	r18,r2
  e5bd84:	3027883a 	mov	r19,r6
  e5bd88:	32c06236 	bltu	r6,r11,e5bf14 <__muldf3+0x344>
  e5bd8c:	59807a26 	beq	r11,r6,e5bf78 <__muldf3+0x3a8>
  e5bd90:	680b883a 	mov	r5,r13
  e5bd94:	b80f883a 	mov	r7,r23
  e5bd98:	6009883a 	mov	r4,r12
  e5bd9c:	b00d883a 	mov	r6,r22
  e5bda0:	0e521280 	call	e52128 <__muldi3>
  e5bda4:	1009883a 	mov	r4,r2
  e5bda8:	000f883a 	mov	r7,zero
  e5bdac:	1545883a 	add	r2,r2,r21
  e5bdb0:	1111803a 	cmpltu	r8,r2,r4
  e5bdb4:	19c7883a 	add	r3,r3,r7
  e5bdb8:	40c7883a 	add	r3,r8,r3
  e5bdbc:	88cb883a 	add	r5,r17,r3
  e5bdc0:	d8c00617 	ldw	r3,24(sp)
  e5bdc4:	8089883a 	add	r4,r16,r2
  e5bdc8:	d8800b17 	ldw	r2,44(sp)
  e5bdcc:	18c00104 	addi	r3,r3,4
  e5bdd0:	240d803a 	cmpltu	r6,r4,r16
  e5bdd4:	10c7883a 	add	r3,r2,r3
  e5bdd8:	2013883a 	mov	r9,r4
  e5bddc:	d8800a17 	ldw	r2,40(sp)
  e5bde0:	d9000517 	ldw	r4,20(sp)
  e5bde4:	314d883a 	add	r6,r6,r5
  e5bde8:	3015883a 	mov	r10,r6
  e5bdec:	2088c03a 	cmpne	r4,r4,r2
  e5bdf0:	00880034 	movhi	r2,8192
  e5bdf4:	10bfffc4 	addi	r2,r2,-1
  e5bdf8:	d9000f15 	stw	r4,60(sp)
  e5bdfc:	d8c01015 	stw	r3,64(sp)
  e5be00:	1180162e 	bgeu	r2,r6,e5be5c <__muldf3+0x28c>
  e5be04:	1811883a 	mov	r8,r3
  e5be08:	101f883a 	mov	r15,r2
  e5be0c:	980497fa 	slli	r2,r19,31
  e5be10:	9016d07a 	srli	r11,r18,1
  e5be14:	500697fa 	slli	r3,r10,31
  e5be18:	480cd07a 	srli	r6,r9,1
  e5be1c:	500ed07a 	srli	r7,r10,1
  e5be20:	12d6b03a 	or	r11,r2,r11
  e5be24:	00800044 	movi	r2,1
  e5be28:	198cb03a 	or	r6,r3,r6
  e5be2c:	4888703a 	and	r4,r9,r2
  e5be30:	9818d07a 	srli	r12,r19,1
  e5be34:	001b883a 	mov	r13,zero
  e5be38:	03a00034 	movhi	r14,32768
  e5be3c:	3013883a 	mov	r9,r6
  e5be40:	3815883a 	mov	r10,r7
  e5be44:	4091883a 	add	r8,r8,r2
  e5be48:	20000226 	beq	r4,zero,e5be54 <__muldf3+0x284>
  e5be4c:	5b64b03a 	or	r18,r11,r13
  e5be50:	63a6b03a 	or	r19,r12,r14
  e5be54:	7abfed36 	bltu	r15,r10,e5be0c <__muldf3+0x23c>
  e5be58:	da001015 	stw	r8,64(sp)
  e5be5c:	00840034 	movhi	r2,4096
  e5be60:	10bfffc4 	addi	r2,r2,-1
  e5be64:	12801436 	bltu	r2,r10,e5beb8 <__muldf3+0x2e8>
  e5be68:	da001017 	ldw	r8,64(sp)
  e5be6c:	101f883a 	mov	r15,r2
  e5be70:	4a45883a 	add	r2,r9,r9
  e5be74:	124d803a 	cmpltu	r6,r2,r9
  e5be78:	5287883a 	add	r3,r10,r10
  e5be7c:	9497883a 	add	r11,r18,r18
  e5be80:	5c8f803a 	cmpltu	r7,r11,r18
  e5be84:	9cd9883a 	add	r12,r19,r19
  e5be88:	01000044 	movi	r4,1
  e5be8c:	30cd883a 	add	r6,r6,r3
  e5be90:	3b0f883a 	add	r7,r7,r12
  e5be94:	423fffc4 	addi	r8,r8,-1
  e5be98:	1013883a 	mov	r9,r2
  e5be9c:	3015883a 	mov	r10,r6
  e5bea0:	111ab03a 	or	r13,r2,r4
  e5bea4:	98003016 	blt	r19,zero,e5bf68 <__muldf3+0x398>
  e5bea8:	5825883a 	mov	r18,r11
  e5beac:	3827883a 	mov	r19,r7
  e5beb0:	7abfef2e 	bgeu	r15,r10,e5be70 <__muldf3+0x2a0>
  e5beb4:	da001015 	stw	r8,64(sp)
  e5beb8:	00803fc4 	movi	r2,255
  e5bebc:	488e703a 	and	r7,r9,r2
  e5bec0:	00802004 	movi	r2,128
  e5bec4:	0007883a 	mov	r3,zero
  e5bec8:	0011883a 	mov	r8,zero
  e5becc:	38801826 	beq	r7,r2,e5bf30 <__muldf3+0x360>
  e5bed0:	008000c4 	movi	r2,3
  e5bed4:	d9000e04 	addi	r4,sp,56
  e5bed8:	da801215 	stw	r10,72(sp)
  e5bedc:	d8800e15 	stw	r2,56(sp)
  e5bee0:	da401115 	stw	r9,68(sp)
  e5bee4:	003f6a06 	br	e5bc90 <__muldf3+0xc0>
  e5bee8:	89802126 	beq	r17,r6,e5bf70 <__muldf3+0x3a0>
  e5beec:	0009883a 	mov	r4,zero
  e5bef0:	5105883a 	add	r2,r10,r4
  e5bef4:	128d803a 	cmpltu	r6,r2,r10
  e5bef8:	5d07883a 	add	r3,r11,r20
  e5befc:	30cd883a 	add	r6,r6,r3
  e5bf00:	0021883a 	mov	r16,zero
  e5bf04:	0023883a 	mov	r17,zero
  e5bf08:	1025883a 	mov	r18,r2
  e5bf0c:	3027883a 	mov	r19,r6
  e5bf10:	32ff9e2e 	bgeu	r6,r11,e5bd8c <__muldf3+0x1bc>
  e5bf14:	00800044 	movi	r2,1
  e5bf18:	8089883a 	add	r4,r16,r2
  e5bf1c:	240d803a 	cmpltu	r6,r4,r16
  e5bf20:	344d883a 	add	r6,r6,r17
  e5bf24:	2021883a 	mov	r16,r4
  e5bf28:	3023883a 	mov	r17,r6
  e5bf2c:	003f9806 	br	e5bd90 <__muldf3+0x1c0>
  e5bf30:	403fe71e 	bne	r8,zero,e5bed0 <__muldf3+0x300>
  e5bf34:	01004004 	movi	r4,256
  e5bf38:	4904703a 	and	r2,r9,r4
  e5bf3c:	10c4b03a 	or	r2,r2,r3
  e5bf40:	103fe31e 	bne	r2,zero,e5bed0 <__muldf3+0x300>
  e5bf44:	94c4b03a 	or	r2,r18,r19
  e5bf48:	103fe126 	beq	r2,zero,e5bed0 <__muldf3+0x300>
  e5bf4c:	49c5883a 	add	r2,r9,r7
  e5bf50:	1251803a 	cmpltu	r8,r2,r9
  e5bf54:	4291883a 	add	r8,r8,r10
  e5bf58:	013fc004 	movi	r4,-256
  e5bf5c:	1112703a 	and	r9,r2,r4
  e5bf60:	4015883a 	mov	r10,r8
  e5bf64:	003fda06 	br	e5bed0 <__muldf3+0x300>
  e5bf68:	6813883a 	mov	r9,r13
  e5bf6c:	003fce06 	br	e5bea8 <__muldf3+0x2d8>
  e5bf70:	143f7c36 	bltu	r2,r16,e5bd64 <__muldf3+0x194>
  e5bf74:	003fdd06 	br	e5beec <__muldf3+0x31c>
  e5bf78:	12bf852e 	bgeu	r2,r10,e5bd90 <__muldf3+0x1c0>
  e5bf7c:	003fe506 	br	e5bf14 <__muldf3+0x344>
  e5bf80:	00800084 	movi	r2,2
  e5bf84:	20bf351e 	bne	r4,r2,e5bc5c <__muldf3+0x8c>
  e5bf88:	010039b4 	movhi	r4,230
  e5bf8c:	2104a304 	addi	r4,r4,4748
  e5bf90:	003f3f06 	br	e5bc90 <__muldf3+0xc0>

00e5bf94 <__eqdf2>:
  e5bf94:	deffef04 	addi	sp,sp,-68
  e5bf98:	dc400f15 	stw	r17,60(sp)
  e5bf9c:	dc400404 	addi	r17,sp,16
  e5bfa0:	2005883a 	mov	r2,r4
  e5bfa4:	2807883a 	mov	r3,r5
  e5bfa8:	dc000e15 	stw	r16,56(sp)
  e5bfac:	d809883a 	mov	r4,sp
  e5bfb0:	880b883a 	mov	r5,r17
  e5bfb4:	dc000904 	addi	r16,sp,36
  e5bfb8:	d8c00115 	stw	r3,4(sp)
  e5bfbc:	d8800015 	stw	r2,0(sp)
  e5bfc0:	d9800215 	stw	r6,8(sp)
  e5bfc4:	dfc01015 	stw	ra,64(sp)
  e5bfc8:	d9c00315 	stw	r7,12(sp)
  e5bfcc:	0e53a4c0 	call	e53a4c <__unpack_d>
  e5bfd0:	d9000204 	addi	r4,sp,8
  e5bfd4:	800b883a 	mov	r5,r16
  e5bfd8:	0e53a4c0 	call	e53a4c <__unpack_d>
  e5bfdc:	d8800417 	ldw	r2,16(sp)
  e5bfe0:	00c00044 	movi	r3,1
  e5bfe4:	180d883a 	mov	r6,r3
  e5bfe8:	1880062e 	bgeu	r3,r2,e5c004 <__eqdf2+0x70>
  e5bfec:	d8800917 	ldw	r2,36(sp)
  e5bff0:	8809883a 	mov	r4,r17
  e5bff4:	800b883a 	mov	r5,r16
  e5bff8:	1880022e 	bgeu	r3,r2,e5c004 <__eqdf2+0x70>
  e5bffc:	0e53b840 	call	e53b84 <__fpcmp_parts_d>
  e5c000:	100d883a 	mov	r6,r2
  e5c004:	3005883a 	mov	r2,r6
  e5c008:	dfc01017 	ldw	ra,64(sp)
  e5c00c:	dc400f17 	ldw	r17,60(sp)
  e5c010:	dc000e17 	ldw	r16,56(sp)
  e5c014:	dec01104 	addi	sp,sp,68
  e5c018:	f800283a 	ret

00e5c01c <__gtdf2>:
  e5c01c:	deffef04 	addi	sp,sp,-68
  e5c020:	dc400f15 	stw	r17,60(sp)
  e5c024:	dc400404 	addi	r17,sp,16
  e5c028:	2005883a 	mov	r2,r4
  e5c02c:	2807883a 	mov	r3,r5
  e5c030:	dc000e15 	stw	r16,56(sp)
  e5c034:	d809883a 	mov	r4,sp
  e5c038:	880b883a 	mov	r5,r17
  e5c03c:	dc000904 	addi	r16,sp,36
  e5c040:	d8c00115 	stw	r3,4(sp)
  e5c044:	d8800015 	stw	r2,0(sp)
  e5c048:	d9800215 	stw	r6,8(sp)
  e5c04c:	dfc01015 	stw	ra,64(sp)
  e5c050:	d9c00315 	stw	r7,12(sp)
  e5c054:	0e53a4c0 	call	e53a4c <__unpack_d>
  e5c058:	d9000204 	addi	r4,sp,8
  e5c05c:	800b883a 	mov	r5,r16
  e5c060:	0e53a4c0 	call	e53a4c <__unpack_d>
  e5c064:	d8800417 	ldw	r2,16(sp)
  e5c068:	00c00044 	movi	r3,1
  e5c06c:	01bfffc4 	movi	r6,-1
  e5c070:	1880062e 	bgeu	r3,r2,e5c08c <__gtdf2+0x70>
  e5c074:	d8800917 	ldw	r2,36(sp)
  e5c078:	8809883a 	mov	r4,r17
  e5c07c:	800b883a 	mov	r5,r16
  e5c080:	1880022e 	bgeu	r3,r2,e5c08c <__gtdf2+0x70>
  e5c084:	0e53b840 	call	e53b84 <__fpcmp_parts_d>
  e5c088:	100d883a 	mov	r6,r2
  e5c08c:	3005883a 	mov	r2,r6
  e5c090:	dfc01017 	ldw	ra,64(sp)
  e5c094:	dc400f17 	ldw	r17,60(sp)
  e5c098:	dc000e17 	ldw	r16,56(sp)
  e5c09c:	dec01104 	addi	sp,sp,68
  e5c0a0:	f800283a 	ret

00e5c0a4 <__gedf2>:
  e5c0a4:	deffef04 	addi	sp,sp,-68
  e5c0a8:	dc400f15 	stw	r17,60(sp)
  e5c0ac:	dc400404 	addi	r17,sp,16
  e5c0b0:	2005883a 	mov	r2,r4
  e5c0b4:	2807883a 	mov	r3,r5
  e5c0b8:	dc000e15 	stw	r16,56(sp)
  e5c0bc:	d809883a 	mov	r4,sp
  e5c0c0:	880b883a 	mov	r5,r17
  e5c0c4:	dc000904 	addi	r16,sp,36
  e5c0c8:	d8c00115 	stw	r3,4(sp)
  e5c0cc:	d8800015 	stw	r2,0(sp)
  e5c0d0:	d9800215 	stw	r6,8(sp)
  e5c0d4:	dfc01015 	stw	ra,64(sp)
  e5c0d8:	d9c00315 	stw	r7,12(sp)
  e5c0dc:	0e53a4c0 	call	e53a4c <__unpack_d>
  e5c0e0:	d9000204 	addi	r4,sp,8
  e5c0e4:	800b883a 	mov	r5,r16
  e5c0e8:	0e53a4c0 	call	e53a4c <__unpack_d>
  e5c0ec:	d8800417 	ldw	r2,16(sp)
  e5c0f0:	00c00044 	movi	r3,1
  e5c0f4:	01bfffc4 	movi	r6,-1
  e5c0f8:	1880062e 	bgeu	r3,r2,e5c114 <__gedf2+0x70>
  e5c0fc:	d8800917 	ldw	r2,36(sp)
  e5c100:	8809883a 	mov	r4,r17
  e5c104:	800b883a 	mov	r5,r16
  e5c108:	1880022e 	bgeu	r3,r2,e5c114 <__gedf2+0x70>
  e5c10c:	0e53b840 	call	e53b84 <__fpcmp_parts_d>
  e5c110:	100d883a 	mov	r6,r2
  e5c114:	3005883a 	mov	r2,r6
  e5c118:	dfc01017 	ldw	ra,64(sp)
  e5c11c:	dc400f17 	ldw	r17,60(sp)
  e5c120:	dc000e17 	ldw	r16,56(sp)
  e5c124:	dec01104 	addi	sp,sp,68
  e5c128:	f800283a 	ret

00e5c12c <__ltdf2>:
  e5c12c:	deffef04 	addi	sp,sp,-68
  e5c130:	dc400f15 	stw	r17,60(sp)
  e5c134:	dc400404 	addi	r17,sp,16
  e5c138:	2005883a 	mov	r2,r4
  e5c13c:	2807883a 	mov	r3,r5
  e5c140:	dc000e15 	stw	r16,56(sp)
  e5c144:	d809883a 	mov	r4,sp
  e5c148:	880b883a 	mov	r5,r17
  e5c14c:	dc000904 	addi	r16,sp,36
  e5c150:	d8c00115 	stw	r3,4(sp)
  e5c154:	d8800015 	stw	r2,0(sp)
  e5c158:	d9800215 	stw	r6,8(sp)
  e5c15c:	dfc01015 	stw	ra,64(sp)
  e5c160:	d9c00315 	stw	r7,12(sp)
  e5c164:	0e53a4c0 	call	e53a4c <__unpack_d>
  e5c168:	d9000204 	addi	r4,sp,8
  e5c16c:	800b883a 	mov	r5,r16
  e5c170:	0e53a4c0 	call	e53a4c <__unpack_d>
  e5c174:	d8800417 	ldw	r2,16(sp)
  e5c178:	00c00044 	movi	r3,1
  e5c17c:	180d883a 	mov	r6,r3
  e5c180:	1880062e 	bgeu	r3,r2,e5c19c <__ltdf2+0x70>
  e5c184:	d8800917 	ldw	r2,36(sp)
  e5c188:	8809883a 	mov	r4,r17
  e5c18c:	800b883a 	mov	r5,r16
  e5c190:	1880022e 	bgeu	r3,r2,e5c19c <__ltdf2+0x70>
  e5c194:	0e53b840 	call	e53b84 <__fpcmp_parts_d>
  e5c198:	100d883a 	mov	r6,r2
  e5c19c:	3005883a 	mov	r2,r6
  e5c1a0:	dfc01017 	ldw	ra,64(sp)
  e5c1a4:	dc400f17 	ldw	r17,60(sp)
  e5c1a8:	dc000e17 	ldw	r16,56(sp)
  e5c1ac:	dec01104 	addi	sp,sp,68
  e5c1b0:	f800283a 	ret

00e5c1b4 <__floatsidf>:
  e5c1b4:	2006d7fa 	srli	r3,r4,31
  e5c1b8:	defff604 	addi	sp,sp,-40
  e5c1bc:	008000c4 	movi	r2,3
  e5c1c0:	dfc00915 	stw	ra,36(sp)
  e5c1c4:	dcc00815 	stw	r19,32(sp)
  e5c1c8:	dc800715 	stw	r18,28(sp)
  e5c1cc:	dc400615 	stw	r17,24(sp)
  e5c1d0:	dc000515 	stw	r16,20(sp)
  e5c1d4:	d8800015 	stw	r2,0(sp)
  e5c1d8:	d8c00115 	stw	r3,4(sp)
  e5c1dc:	20000f1e 	bne	r4,zero,e5c21c <__floatsidf+0x68>
  e5c1e0:	00800084 	movi	r2,2
  e5c1e4:	d8800015 	stw	r2,0(sp)
  e5c1e8:	d809883a 	mov	r4,sp
  e5c1ec:	0e537380 	call	e53738 <__pack_d>
  e5c1f0:	1009883a 	mov	r4,r2
  e5c1f4:	180b883a 	mov	r5,r3
  e5c1f8:	2005883a 	mov	r2,r4
  e5c1fc:	2807883a 	mov	r3,r5
  e5c200:	dfc00917 	ldw	ra,36(sp)
  e5c204:	dcc00817 	ldw	r19,32(sp)
  e5c208:	dc800717 	ldw	r18,28(sp)
  e5c20c:	dc400617 	ldw	r17,24(sp)
  e5c210:	dc000517 	ldw	r16,20(sp)
  e5c214:	dec00a04 	addi	sp,sp,40
  e5c218:	f800283a 	ret
  e5c21c:	00800f04 	movi	r2,60
  e5c220:	1807003a 	cmpeq	r3,r3,zero
  e5c224:	d8800215 	stw	r2,8(sp)
  e5c228:	18001126 	beq	r3,zero,e5c270 <__floatsidf+0xbc>
  e5c22c:	0027883a 	mov	r19,zero
  e5c230:	2025883a 	mov	r18,r4
  e5c234:	d9000315 	stw	r4,12(sp)
  e5c238:	dcc00415 	stw	r19,16(sp)
  e5c23c:	0e533bc0 	call	e533bc <__clzsi2>
  e5c240:	11000744 	addi	r4,r2,29
  e5c244:	013fe80e 	bge	zero,r4,e5c1e8 <__floatsidf+0x34>
  e5c248:	10bfff44 	addi	r2,r2,-3
  e5c24c:	10000c16 	blt	r2,zero,e5c280 <__floatsidf+0xcc>
  e5c250:	90a2983a 	sll	r17,r18,r2
  e5c254:	0021883a 	mov	r16,zero
  e5c258:	d8800217 	ldw	r2,8(sp)
  e5c25c:	dc400415 	stw	r17,16(sp)
  e5c260:	dc000315 	stw	r16,12(sp)
  e5c264:	1105c83a 	sub	r2,r2,r4
  e5c268:	d8800215 	stw	r2,8(sp)
  e5c26c:	003fde06 	br	e5c1e8 <__floatsidf+0x34>
  e5c270:	00a00034 	movhi	r2,32768
  e5c274:	20800a26 	beq	r4,r2,e5c2a0 <__floatsidf+0xec>
  e5c278:	0109c83a 	sub	r4,zero,r4
  e5c27c:	003feb06 	br	e5c22c <__floatsidf+0x78>
  e5c280:	9006d07a 	srli	r3,r18,1
  e5c284:	008007c4 	movi	r2,31
  e5c288:	1105c83a 	sub	r2,r2,r4
  e5c28c:	1886d83a 	srl	r3,r3,r2
  e5c290:	9922983a 	sll	r17,r19,r4
  e5c294:	9120983a 	sll	r16,r18,r4
  e5c298:	1c62b03a 	or	r17,r3,r17
  e5c29c:	003fee06 	br	e5c258 <__floatsidf+0xa4>
  e5c2a0:	0009883a 	mov	r4,zero
  e5c2a4:	01707834 	movhi	r5,49632
  e5c2a8:	003fd306 	br	e5c1f8 <__floatsidf+0x44>

00e5c2ac <__fixdfsi>:
  e5c2ac:	defff804 	addi	sp,sp,-32
  e5c2b0:	2005883a 	mov	r2,r4
  e5c2b4:	2807883a 	mov	r3,r5
  e5c2b8:	d809883a 	mov	r4,sp
  e5c2bc:	d9400204 	addi	r5,sp,8
  e5c2c0:	d8c00115 	stw	r3,4(sp)
  e5c2c4:	d8800015 	stw	r2,0(sp)
  e5c2c8:	dfc00715 	stw	ra,28(sp)
  e5c2cc:	0e53a4c0 	call	e53a4c <__unpack_d>
  e5c2d0:	d8c00217 	ldw	r3,8(sp)
  e5c2d4:	00800084 	movi	r2,2
  e5c2d8:	1880051e 	bne	r3,r2,e5c2f0 <__fixdfsi+0x44>
  e5c2dc:	0007883a 	mov	r3,zero
  e5c2e0:	1805883a 	mov	r2,r3
  e5c2e4:	dfc00717 	ldw	ra,28(sp)
  e5c2e8:	dec00804 	addi	sp,sp,32
  e5c2ec:	f800283a 	ret
  e5c2f0:	00800044 	movi	r2,1
  e5c2f4:	10fff92e 	bgeu	r2,r3,e5c2dc <__fixdfsi+0x30>
  e5c2f8:	00800104 	movi	r2,4
  e5c2fc:	18800426 	beq	r3,r2,e5c310 <__fixdfsi+0x64>
  e5c300:	d8c00417 	ldw	r3,16(sp)
  e5c304:	183ff516 	blt	r3,zero,e5c2dc <__fixdfsi+0x30>
  e5c308:	00800784 	movi	r2,30
  e5c30c:	10c0080e 	bge	r2,r3,e5c330 <__fixdfsi+0x84>
  e5c310:	d8800317 	ldw	r2,12(sp)
  e5c314:	1000121e 	bne	r2,zero,e5c360 <__fixdfsi+0xb4>
  e5c318:	00e00034 	movhi	r3,32768
  e5c31c:	18ffffc4 	addi	r3,r3,-1
  e5c320:	1805883a 	mov	r2,r3
  e5c324:	dfc00717 	ldw	ra,28(sp)
  e5c328:	dec00804 	addi	sp,sp,32
  e5c32c:	f800283a 	ret
  e5c330:	00800f04 	movi	r2,60
  e5c334:	10d1c83a 	sub	r8,r2,r3
  e5c338:	40bff804 	addi	r2,r8,-32
  e5c33c:	d9800517 	ldw	r6,20(sp)
  e5c340:	d9c00617 	ldw	r7,24(sp)
  e5c344:	10000816 	blt	r2,zero,e5c368 <__fixdfsi+0xbc>
  e5c348:	3888d83a 	srl	r4,r7,r2
  e5c34c:	d8800317 	ldw	r2,12(sp)
  e5c350:	2007883a 	mov	r3,r4
  e5c354:	103fe226 	beq	r2,zero,e5c2e0 <__fixdfsi+0x34>
  e5c358:	0107c83a 	sub	r3,zero,r4
  e5c35c:	003fe006 	br	e5c2e0 <__fixdfsi+0x34>
  e5c360:	00e00034 	movhi	r3,32768
  e5c364:	003fde06 	br	e5c2e0 <__fixdfsi+0x34>
  e5c368:	39c7883a 	add	r3,r7,r7
  e5c36c:	008007c4 	movi	r2,31
  e5c370:	1205c83a 	sub	r2,r2,r8
  e5c374:	1886983a 	sll	r3,r3,r2
  e5c378:	3208d83a 	srl	r4,r6,r8
  e5c37c:	1908b03a 	or	r4,r3,r4
  e5c380:	003ff206 	br	e5c34c <__fixdfsi+0xa0>

00e5c384 <__floatunsidf>:
  e5c384:	defff204 	addi	sp,sp,-56
  e5c388:	dfc00d15 	stw	ra,52(sp)
  e5c38c:	ddc00c15 	stw	r23,48(sp)
  e5c390:	dd800b15 	stw	r22,44(sp)
  e5c394:	dd400a15 	stw	r21,40(sp)
  e5c398:	dd000915 	stw	r20,36(sp)
  e5c39c:	dcc00815 	stw	r19,32(sp)
  e5c3a0:	dc800715 	stw	r18,28(sp)
  e5c3a4:	dc400615 	stw	r17,24(sp)
  e5c3a8:	dc000515 	stw	r16,20(sp)
  e5c3ac:	d8000115 	stw	zero,4(sp)
  e5c3b0:	20000f1e 	bne	r4,zero,e5c3f0 <__floatunsidf+0x6c>
  e5c3b4:	00800084 	movi	r2,2
  e5c3b8:	d8800015 	stw	r2,0(sp)
  e5c3bc:	d809883a 	mov	r4,sp
  e5c3c0:	0e537380 	call	e53738 <__pack_d>
  e5c3c4:	dfc00d17 	ldw	ra,52(sp)
  e5c3c8:	ddc00c17 	ldw	r23,48(sp)
  e5c3cc:	dd800b17 	ldw	r22,44(sp)
  e5c3d0:	dd400a17 	ldw	r21,40(sp)
  e5c3d4:	dd000917 	ldw	r20,36(sp)
  e5c3d8:	dcc00817 	ldw	r19,32(sp)
  e5c3dc:	dc800717 	ldw	r18,28(sp)
  e5c3e0:	dc400617 	ldw	r17,24(sp)
  e5c3e4:	dc000517 	ldw	r16,20(sp)
  e5c3e8:	dec00e04 	addi	sp,sp,56
  e5c3ec:	f800283a 	ret
  e5c3f0:	008000c4 	movi	r2,3
  e5c3f4:	00c00f04 	movi	r3,60
  e5c3f8:	002f883a 	mov	r23,zero
  e5c3fc:	202d883a 	mov	r22,r4
  e5c400:	d8800015 	stw	r2,0(sp)
  e5c404:	d8c00215 	stw	r3,8(sp)
  e5c408:	d9000315 	stw	r4,12(sp)
  e5c40c:	ddc00415 	stw	r23,16(sp)
  e5c410:	0e533bc0 	call	e533bc <__clzsi2>
  e5c414:	12400744 	addi	r9,r2,29
  e5c418:	48000b16 	blt	r9,zero,e5c448 <__floatunsidf+0xc4>
  e5c41c:	483fe726 	beq	r9,zero,e5c3bc <__floatunsidf+0x38>
  e5c420:	10bfff44 	addi	r2,r2,-3
  e5c424:	10002e16 	blt	r2,zero,e5c4e0 <__floatunsidf+0x15c>
  e5c428:	b0a2983a 	sll	r17,r22,r2
  e5c42c:	0021883a 	mov	r16,zero
  e5c430:	d8800217 	ldw	r2,8(sp)
  e5c434:	dc400415 	stw	r17,16(sp)
  e5c438:	dc000315 	stw	r16,12(sp)
  e5c43c:	1245c83a 	sub	r2,r2,r9
  e5c440:	d8800215 	stw	r2,8(sp)
  e5c444:	003fdd06 	br	e5c3bc <__floatunsidf+0x38>
  e5c448:	0255c83a 	sub	r10,zero,r9
  e5c44c:	51bff804 	addi	r6,r10,-32
  e5c450:	30001b16 	blt	r6,zero,e5c4c0 <__floatunsidf+0x13c>
  e5c454:	b9a8d83a 	srl	r20,r23,r6
  e5c458:	002b883a 	mov	r21,zero
  e5c45c:	000f883a 	mov	r7,zero
  e5c460:	01000044 	movi	r4,1
  e5c464:	0011883a 	mov	r8,zero
  e5c468:	30002516 	blt	r6,zero,e5c500 <__floatunsidf+0x17c>
  e5c46c:	21a6983a 	sll	r19,r4,r6
  e5c470:	0025883a 	mov	r18,zero
  e5c474:	00bfffc4 	movi	r2,-1
  e5c478:	9089883a 	add	r4,r18,r2
  e5c47c:	988b883a 	add	r5,r19,r2
  e5c480:	248d803a 	cmpltu	r6,r4,r18
  e5c484:	314b883a 	add	r5,r6,r5
  e5c488:	b104703a 	and	r2,r22,r4
  e5c48c:	b946703a 	and	r3,r23,r5
  e5c490:	10c4b03a 	or	r2,r2,r3
  e5c494:	10000226 	beq	r2,zero,e5c4a0 <__floatunsidf+0x11c>
  e5c498:	01c00044 	movi	r7,1
  e5c49c:	0011883a 	mov	r8,zero
  e5c4a0:	d9000217 	ldw	r4,8(sp)
  e5c4a4:	a1c4b03a 	or	r2,r20,r7
  e5c4a8:	aa06b03a 	or	r3,r21,r8
  e5c4ac:	2249c83a 	sub	r4,r4,r9
  e5c4b0:	d8c00415 	stw	r3,16(sp)
  e5c4b4:	d9000215 	stw	r4,8(sp)
  e5c4b8:	d8800315 	stw	r2,12(sp)
  e5c4bc:	003fbf06 	br	e5c3bc <__floatunsidf+0x38>
  e5c4c0:	bdc7883a 	add	r3,r23,r23
  e5c4c4:	008007c4 	movi	r2,31
  e5c4c8:	1285c83a 	sub	r2,r2,r10
  e5c4cc:	1886983a 	sll	r3,r3,r2
  e5c4d0:	b2a8d83a 	srl	r20,r22,r10
  e5c4d4:	baaad83a 	srl	r21,r23,r10
  e5c4d8:	1d28b03a 	or	r20,r3,r20
  e5c4dc:	003fdf06 	br	e5c45c <__floatunsidf+0xd8>
  e5c4e0:	b006d07a 	srli	r3,r22,1
  e5c4e4:	008007c4 	movi	r2,31
  e5c4e8:	1245c83a 	sub	r2,r2,r9
  e5c4ec:	1886d83a 	srl	r3,r3,r2
  e5c4f0:	ba62983a 	sll	r17,r23,r9
  e5c4f4:	b260983a 	sll	r16,r22,r9
  e5c4f8:	1c62b03a 	or	r17,r3,r17
  e5c4fc:	003fcc06 	br	e5c430 <__floatunsidf+0xac>
  e5c500:	2006d07a 	srli	r3,r4,1
  e5c504:	008007c4 	movi	r2,31
  e5c508:	1285c83a 	sub	r2,r2,r10
  e5c50c:	18a6d83a 	srl	r19,r3,r2
  e5c510:	22a4983a 	sll	r18,r4,r10
  e5c514:	003fd706 	br	e5c474 <__floatunsidf+0xf0>

00e5c518 <udivmodsi4>:
  e5c518:	29001b2e 	bgeu	r5,r4,e5c588 <udivmodsi4+0x70>
  e5c51c:	28001a16 	blt	r5,zero,e5c588 <udivmodsi4+0x70>
  e5c520:	00800044 	movi	r2,1
  e5c524:	0007883a 	mov	r3,zero
  e5c528:	01c007c4 	movi	r7,31
  e5c52c:	00000306 	br	e5c53c <udivmodsi4+0x24>
  e5c530:	19c01326 	beq	r3,r7,e5c580 <udivmodsi4+0x68>
  e5c534:	18c00044 	addi	r3,r3,1
  e5c538:	28000416 	blt	r5,zero,e5c54c <udivmodsi4+0x34>
  e5c53c:	294b883a 	add	r5,r5,r5
  e5c540:	1085883a 	add	r2,r2,r2
  e5c544:	293ffa36 	bltu	r5,r4,e5c530 <udivmodsi4+0x18>
  e5c548:	10000d26 	beq	r2,zero,e5c580 <udivmodsi4+0x68>
  e5c54c:	0007883a 	mov	r3,zero
  e5c550:	21400236 	bltu	r4,r5,e5c55c <udivmodsi4+0x44>
  e5c554:	2149c83a 	sub	r4,r4,r5
  e5c558:	1886b03a 	or	r3,r3,r2
  e5c55c:	1004d07a 	srli	r2,r2,1
  e5c560:	280ad07a 	srli	r5,r5,1
  e5c564:	103ffa1e 	bne	r2,zero,e5c550 <udivmodsi4+0x38>
  e5c568:	30000226 	beq	r6,zero,e5c574 <udivmodsi4+0x5c>
  e5c56c:	2005883a 	mov	r2,r4
  e5c570:	f800283a 	ret
  e5c574:	1809883a 	mov	r4,r3
  e5c578:	2005883a 	mov	r2,r4
  e5c57c:	f800283a 	ret
  e5c580:	0007883a 	mov	r3,zero
  e5c584:	003ff806 	br	e5c568 <udivmodsi4+0x50>
  e5c588:	00800044 	movi	r2,1
  e5c58c:	0007883a 	mov	r3,zero
  e5c590:	003fef06 	br	e5c550 <udivmodsi4+0x38>

00e5c594 <__divsi3>:
  e5c594:	defffe04 	addi	sp,sp,-8
  e5c598:	dc000015 	stw	r16,0(sp)
  e5c59c:	dfc00115 	stw	ra,4(sp)
  e5c5a0:	0021883a 	mov	r16,zero
  e5c5a4:	20000c16 	blt	r4,zero,e5c5d8 <__divsi3+0x44>
  e5c5a8:	000d883a 	mov	r6,zero
  e5c5ac:	28000e16 	blt	r5,zero,e5c5e8 <__divsi3+0x54>
  e5c5b0:	0e5c5180 	call	e5c518 <udivmodsi4>
  e5c5b4:	1007883a 	mov	r3,r2
  e5c5b8:	8005003a 	cmpeq	r2,r16,zero
  e5c5bc:	1000011e 	bne	r2,zero,e5c5c4 <__divsi3+0x30>
  e5c5c0:	00c7c83a 	sub	r3,zero,r3
  e5c5c4:	1805883a 	mov	r2,r3
  e5c5c8:	dfc00117 	ldw	ra,4(sp)
  e5c5cc:	dc000017 	ldw	r16,0(sp)
  e5c5d0:	dec00204 	addi	sp,sp,8
  e5c5d4:	f800283a 	ret
  e5c5d8:	0109c83a 	sub	r4,zero,r4
  e5c5dc:	04000044 	movi	r16,1
  e5c5e0:	000d883a 	mov	r6,zero
  e5c5e4:	283ff20e 	bge	r5,zero,e5c5b0 <__divsi3+0x1c>
  e5c5e8:	014bc83a 	sub	r5,zero,r5
  e5c5ec:	8021003a 	cmpeq	r16,r16,zero
  e5c5f0:	003fef06 	br	e5c5b0 <__divsi3+0x1c>

00e5c5f4 <__modsi3>:
  e5c5f4:	deffff04 	addi	sp,sp,-4
  e5c5f8:	dfc00015 	stw	ra,0(sp)
  e5c5fc:	01800044 	movi	r6,1
  e5c600:	2807883a 	mov	r3,r5
  e5c604:	20000416 	blt	r4,zero,e5c618 <__modsi3+0x24>
  e5c608:	28000c16 	blt	r5,zero,e5c63c <__modsi3+0x48>
  e5c60c:	dfc00017 	ldw	ra,0(sp)
  e5c610:	dec00104 	addi	sp,sp,4
  e5c614:	0e5c5181 	jmpi	e5c518 <udivmodsi4>
  e5c618:	0109c83a 	sub	r4,zero,r4
  e5c61c:	28000b16 	blt	r5,zero,e5c64c <__modsi3+0x58>
  e5c620:	180b883a 	mov	r5,r3
  e5c624:	01800044 	movi	r6,1
  e5c628:	0e5c5180 	call	e5c518 <udivmodsi4>
  e5c62c:	0085c83a 	sub	r2,zero,r2
  e5c630:	dfc00017 	ldw	ra,0(sp)
  e5c634:	dec00104 	addi	sp,sp,4
  e5c638:	f800283a 	ret
  e5c63c:	014bc83a 	sub	r5,zero,r5
  e5c640:	dfc00017 	ldw	ra,0(sp)
  e5c644:	dec00104 	addi	sp,sp,4
  e5c648:	0e5c5181 	jmpi	e5c518 <udivmodsi4>
  e5c64c:	0147c83a 	sub	r3,zero,r5
  e5c650:	003ff306 	br	e5c620 <__modsi3+0x2c>

00e5c654 <__udivsi3>:
  e5c654:	000d883a 	mov	r6,zero
  e5c658:	0e5c5181 	jmpi	e5c518 <udivmodsi4>

00e5c65c <__umodsi3>:
  e5c65c:	01800044 	movi	r6,1
  e5c660:	0e5c5181 	jmpi	e5c518 <udivmodsi4>

00e5c664 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  e5c664:	defff804 	addi	sp,sp,-32
  e5c668:	dfc00715 	stw	ra,28(sp)
  e5c66c:	df000615 	stw	fp,24(sp)
  e5c670:	df000604 	addi	fp,sp,24
  e5c674:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  e5c678:	e0bffc17 	ldw	r2,-16(fp)
  e5c67c:	1004803a 	cmplt	r2,r2,zero
  e5c680:	1000081e 	bne	r2,zero,e5c6a4 <close+0x40>
  e5c684:	e0bffc17 	ldw	r2,-16(fp)
  e5c688:	10800324 	muli	r2,r2,12
  e5c68c:	1007883a 	mov	r3,r2
  e5c690:	008039b4 	movhi	r2,230
  e5c694:	1087c804 	addi	r2,r2,7968
  e5c698:	1887883a 	add	r3,r3,r2
  e5c69c:	e0ffff15 	stw	r3,-4(fp)
  e5c6a0:	00000106 	br	e5c6a8 <close+0x44>
  e5c6a4:	e03fff15 	stw	zero,-4(fp)
  e5c6a8:	e0bfff17 	ldw	r2,-4(fp)
  e5c6ac:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  e5c6b0:	e0bffb17 	ldw	r2,-20(fp)
  e5c6b4:	1005003a 	cmpeq	r2,r2,zero
  e5c6b8:	10001d1e 	bne	r2,zero,e5c730 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  e5c6bc:	e0bffb17 	ldw	r2,-20(fp)
  e5c6c0:	10800017 	ldw	r2,0(r2)
  e5c6c4:	10800417 	ldw	r2,16(r2)
  e5c6c8:	1005003a 	cmpeq	r2,r2,zero
  e5c6cc:	1000071e 	bne	r2,zero,e5c6ec <close+0x88>
  e5c6d0:	e0bffb17 	ldw	r2,-20(fp)
  e5c6d4:	10800017 	ldw	r2,0(r2)
  e5c6d8:	10800417 	ldw	r2,16(r2)
  e5c6dc:	e13ffb17 	ldw	r4,-20(fp)
  e5c6e0:	103ee83a 	callr	r2
  e5c6e4:	e0bffe15 	stw	r2,-8(fp)
  e5c6e8:	00000106 	br	e5c6f0 <close+0x8c>
  e5c6ec:	e03ffe15 	stw	zero,-8(fp)
  e5c6f0:	e0bffe17 	ldw	r2,-8(fp)
  e5c6f4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  e5c6f8:	e13ffc17 	ldw	r4,-16(fp)
  e5c6fc:	0e5cea80 	call	e5cea8 <alt_release_fd>
    if (rval < 0)
  e5c700:	e0bffa17 	ldw	r2,-24(fp)
  e5c704:	1004403a 	cmpge	r2,r2,zero
  e5c708:	1000071e 	bne	r2,zero,e5c728 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  e5c70c:	0e5c7600 	call	e5c760 <alt_get_errno>
  e5c710:	e0fffa17 	ldw	r3,-24(fp)
  e5c714:	00c7c83a 	sub	r3,zero,r3
  e5c718:	10c00015 	stw	r3,0(r2)
      return -1;
  e5c71c:	00bfffc4 	movi	r2,-1
  e5c720:	e0bffd15 	stw	r2,-12(fp)
  e5c724:	00000806 	br	e5c748 <close+0xe4>
    }
    return 0;
  e5c728:	e03ffd15 	stw	zero,-12(fp)
  e5c72c:	00000606 	br	e5c748 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  e5c730:	0e5c7600 	call	e5c760 <alt_get_errno>
  e5c734:	1007883a 	mov	r3,r2
  e5c738:	00801444 	movi	r2,81
  e5c73c:	18800015 	stw	r2,0(r3)
    return -1;
  e5c740:	00bfffc4 	movi	r2,-1
  e5c744:	e0bffd15 	stw	r2,-12(fp)
  e5c748:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  e5c74c:	e037883a 	mov	sp,fp
  e5c750:	dfc00117 	ldw	ra,4(sp)
  e5c754:	df000017 	ldw	fp,0(sp)
  e5c758:	dec00204 	addi	sp,sp,8
  e5c75c:	f800283a 	ret

00e5c760 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e5c760:	defffd04 	addi	sp,sp,-12
  e5c764:	dfc00215 	stw	ra,8(sp)
  e5c768:	df000115 	stw	fp,4(sp)
  e5c76c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e5c770:	008039b4 	movhi	r2,230
  e5c774:	108ca604 	addi	r2,r2,12952
  e5c778:	10800017 	ldw	r2,0(r2)
  e5c77c:	1005003a 	cmpeq	r2,r2,zero
  e5c780:	1000061e 	bne	r2,zero,e5c79c <alt_get_errno+0x3c>
  e5c784:	008039b4 	movhi	r2,230
  e5c788:	108ca604 	addi	r2,r2,12952
  e5c78c:	10800017 	ldw	r2,0(r2)
  e5c790:	103ee83a 	callr	r2
  e5c794:	e0bfff15 	stw	r2,-4(fp)
  e5c798:	00000306 	br	e5c7a8 <alt_get_errno+0x48>
  e5c79c:	008039b4 	movhi	r2,230
  e5c7a0:	1093ac04 	addi	r2,r2,20144
  e5c7a4:	e0bfff15 	stw	r2,-4(fp)
  e5c7a8:	e0bfff17 	ldw	r2,-4(fp)
}
  e5c7ac:	e037883a 	mov	sp,fp
  e5c7b0:	dfc00117 	ldw	ra,4(sp)
  e5c7b4:	df000017 	ldw	fp,0(sp)
  e5c7b8:	dec00204 	addi	sp,sp,8
  e5c7bc:	f800283a 	ret

00e5c7c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  e5c7c0:	defffc04 	addi	sp,sp,-16
  e5c7c4:	df000315 	stw	fp,12(sp)
  e5c7c8:	df000304 	addi	fp,sp,12
  e5c7cc:	e13ffd15 	stw	r4,-12(fp)
  e5c7d0:	e17ffe15 	stw	r5,-8(fp)
  e5c7d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
  e5c7d8:	e0bfff17 	ldw	r2,-4(fp)
}
  e5c7dc:	e037883a 	mov	sp,fp
  e5c7e0:	df000017 	ldw	fp,0(sp)
  e5c7e4:	dec00104 	addi	sp,sp,4
  e5c7e8:	f800283a 	ret

00e5c7ec <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  e5c7ec:	defff904 	addi	sp,sp,-28
  e5c7f0:	dfc00615 	stw	ra,24(sp)
  e5c7f4:	df000515 	stw	fp,20(sp)
  e5c7f8:	df000504 	addi	fp,sp,20
  e5c7fc:	e13ffc15 	stw	r4,-16(fp)
  e5c800:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  e5c804:	e0bffc17 	ldw	r2,-16(fp)
  e5c808:	1004803a 	cmplt	r2,r2,zero
  e5c80c:	1000081e 	bne	r2,zero,e5c830 <fstat+0x44>
  e5c810:	e0bffc17 	ldw	r2,-16(fp)
  e5c814:	10800324 	muli	r2,r2,12
  e5c818:	1007883a 	mov	r3,r2
  e5c81c:	008039b4 	movhi	r2,230
  e5c820:	1087c804 	addi	r2,r2,7968
  e5c824:	1887883a 	add	r3,r3,r2
  e5c828:	e0ffff15 	stw	r3,-4(fp)
  e5c82c:	00000106 	br	e5c834 <fstat+0x48>
  e5c830:	e03fff15 	stw	zero,-4(fp)
  e5c834:	e0bfff17 	ldw	r2,-4(fp)
  e5c838:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  e5c83c:	e0bffb17 	ldw	r2,-20(fp)
  e5c840:	1005003a 	cmpeq	r2,r2,zero
  e5c844:	1000121e 	bne	r2,zero,e5c890 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  e5c848:	e0bffb17 	ldw	r2,-20(fp)
  e5c84c:	10800017 	ldw	r2,0(r2)
  e5c850:	10800817 	ldw	r2,32(r2)
  e5c854:	1005003a 	cmpeq	r2,r2,zero
  e5c858:	1000081e 	bne	r2,zero,e5c87c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  e5c85c:	e0bffb17 	ldw	r2,-20(fp)
  e5c860:	10800017 	ldw	r2,0(r2)
  e5c864:	10800817 	ldw	r2,32(r2)
  e5c868:	e13ffb17 	ldw	r4,-20(fp)
  e5c86c:	e17ffd17 	ldw	r5,-12(fp)
  e5c870:	103ee83a 	callr	r2
  e5c874:	e0bffe15 	stw	r2,-8(fp)
  e5c878:	00000b06 	br	e5c8a8 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  e5c87c:	e0fffd17 	ldw	r3,-12(fp)
  e5c880:	00880004 	movi	r2,8192
  e5c884:	18800115 	stw	r2,4(r3)
      return 0;
  e5c888:	e03ffe15 	stw	zero,-8(fp)
  e5c88c:	00000606 	br	e5c8a8 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  e5c890:	0e5c8c00 	call	e5c8c0 <alt_get_errno>
  e5c894:	1007883a 	mov	r3,r2
  e5c898:	00801444 	movi	r2,81
  e5c89c:	18800015 	stw	r2,0(r3)
    return -1;
  e5c8a0:	00bfffc4 	movi	r2,-1
  e5c8a4:	e0bffe15 	stw	r2,-8(fp)
  e5c8a8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  e5c8ac:	e037883a 	mov	sp,fp
  e5c8b0:	dfc00117 	ldw	ra,4(sp)
  e5c8b4:	df000017 	ldw	fp,0(sp)
  e5c8b8:	dec00204 	addi	sp,sp,8
  e5c8bc:	f800283a 	ret

00e5c8c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e5c8c0:	defffd04 	addi	sp,sp,-12
  e5c8c4:	dfc00215 	stw	ra,8(sp)
  e5c8c8:	df000115 	stw	fp,4(sp)
  e5c8cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e5c8d0:	008039b4 	movhi	r2,230
  e5c8d4:	108ca604 	addi	r2,r2,12952
  e5c8d8:	10800017 	ldw	r2,0(r2)
  e5c8dc:	1005003a 	cmpeq	r2,r2,zero
  e5c8e0:	1000061e 	bne	r2,zero,e5c8fc <alt_get_errno+0x3c>
  e5c8e4:	008039b4 	movhi	r2,230
  e5c8e8:	108ca604 	addi	r2,r2,12952
  e5c8ec:	10800017 	ldw	r2,0(r2)
  e5c8f0:	103ee83a 	callr	r2
  e5c8f4:	e0bfff15 	stw	r2,-4(fp)
  e5c8f8:	00000306 	br	e5c908 <alt_get_errno+0x48>
  e5c8fc:	008039b4 	movhi	r2,230
  e5c900:	1093ac04 	addi	r2,r2,20144
  e5c904:	e0bfff15 	stw	r2,-4(fp)
  e5c908:	e0bfff17 	ldw	r2,-4(fp)
}
  e5c90c:	e037883a 	mov	sp,fp
  e5c910:	dfc00117 	ldw	ra,4(sp)
  e5c914:	df000017 	ldw	fp,0(sp)
  e5c918:	dec00204 	addi	sp,sp,8
  e5c91c:	f800283a 	ret

00e5c920 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  e5c920:	deffeb04 	addi	sp,sp,-84
  e5c924:	dfc01415 	stw	ra,80(sp)
  e5c928:	df001315 	stw	fp,76(sp)
  e5c92c:	df001304 	addi	fp,sp,76
  e5c930:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  e5c934:	e0bffd17 	ldw	r2,-12(fp)
  e5c938:	1004803a 	cmplt	r2,r2,zero
  e5c93c:	1000081e 	bne	r2,zero,e5c960 <isatty+0x40>
  e5c940:	e0bffd17 	ldw	r2,-12(fp)
  e5c944:	10800324 	muli	r2,r2,12
  e5c948:	1007883a 	mov	r3,r2
  e5c94c:	008039b4 	movhi	r2,230
  e5c950:	1087c804 	addi	r2,r2,7968
  e5c954:	1887883a 	add	r3,r3,r2
  e5c958:	e0ffff15 	stw	r3,-4(fp)
  e5c95c:	00000106 	br	e5c964 <isatty+0x44>
  e5c960:	e03fff15 	stw	zero,-4(fp)
  e5c964:	e0bfff17 	ldw	r2,-4(fp)
  e5c968:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  e5c96c:	e0bfed17 	ldw	r2,-76(fp)
  e5c970:	1005003a 	cmpeq	r2,r2,zero
  e5c974:	10000f1e 	bne	r2,zero,e5c9b4 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  e5c978:	e0bfed17 	ldw	r2,-76(fp)
  e5c97c:	10800017 	ldw	r2,0(r2)
  e5c980:	10800817 	ldw	r2,32(r2)
  e5c984:	1004c03a 	cmpne	r2,r2,zero
  e5c988:	1000031e 	bne	r2,zero,e5c998 <isatty+0x78>
    {
      return 1;
  e5c98c:	00800044 	movi	r2,1
  e5c990:	e0bffe15 	stw	r2,-8(fp)
  e5c994:	00000c06 	br	e5c9c8 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  e5c998:	e17fee04 	addi	r5,fp,-72
  e5c99c:	e13ffd17 	ldw	r4,-12(fp)
  e5c9a0:	0e5c7ec0 	call	e5c7ec <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  e5c9a4:	e0bfef17 	ldw	r2,-68(fp)
  e5c9a8:	10880020 	cmpeqi	r2,r2,8192
  e5c9ac:	e0bffe15 	stw	r2,-8(fp)
  e5c9b0:	00000506 	br	e5c9c8 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  e5c9b4:	0e5c9e00 	call	e5c9e0 <alt_get_errno>
  e5c9b8:	1007883a 	mov	r3,r2
  e5c9bc:	00801444 	movi	r2,81
  e5c9c0:	18800015 	stw	r2,0(r3)
    return 0;
  e5c9c4:	e03ffe15 	stw	zero,-8(fp)
  e5c9c8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  e5c9cc:	e037883a 	mov	sp,fp
  e5c9d0:	dfc00117 	ldw	ra,4(sp)
  e5c9d4:	df000017 	ldw	fp,0(sp)
  e5c9d8:	dec00204 	addi	sp,sp,8
  e5c9dc:	f800283a 	ret

00e5c9e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e5c9e0:	defffd04 	addi	sp,sp,-12
  e5c9e4:	dfc00215 	stw	ra,8(sp)
  e5c9e8:	df000115 	stw	fp,4(sp)
  e5c9ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e5c9f0:	008039b4 	movhi	r2,230
  e5c9f4:	108ca604 	addi	r2,r2,12952
  e5c9f8:	10800017 	ldw	r2,0(r2)
  e5c9fc:	1005003a 	cmpeq	r2,r2,zero
  e5ca00:	1000061e 	bne	r2,zero,e5ca1c <alt_get_errno+0x3c>
  e5ca04:	008039b4 	movhi	r2,230
  e5ca08:	108ca604 	addi	r2,r2,12952
  e5ca0c:	10800017 	ldw	r2,0(r2)
  e5ca10:	103ee83a 	callr	r2
  e5ca14:	e0bfff15 	stw	r2,-4(fp)
  e5ca18:	00000306 	br	e5ca28 <alt_get_errno+0x48>
  e5ca1c:	008039b4 	movhi	r2,230
  e5ca20:	1093ac04 	addi	r2,r2,20144
  e5ca24:	e0bfff15 	stw	r2,-4(fp)
  e5ca28:	e0bfff17 	ldw	r2,-4(fp)
}
  e5ca2c:	e037883a 	mov	sp,fp
  e5ca30:	dfc00117 	ldw	ra,4(sp)
  e5ca34:	df000017 	ldw	fp,0(sp)
  e5ca38:	dec00204 	addi	sp,sp,8
  e5ca3c:	f800283a 	ret

00e5ca40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  e5ca40:	defffe04 	addi	sp,sp,-8
  e5ca44:	dfc00115 	stw	ra,4(sp)
  e5ca48:	df000015 	stw	fp,0(sp)
  e5ca4c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  e5ca50:	010039b4 	movhi	r4,230
  e5ca54:	210caf04 	addi	r4,r4,12988
  e5ca58:	014039b4 	movhi	r5,230
  e5ca5c:	2945b904 	addi	r5,r5,5860
  e5ca60:	018039b4 	movhi	r6,230
  e5ca64:	318caf04 	addi	r6,r6,12988
  e5ca68:	0e5cac00 	call	e5cac0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  e5ca6c:	01003974 	movhi	r4,229
  e5ca70:	21000804 	addi	r4,r4,32
  e5ca74:	01403974 	movhi	r5,229
  e5ca78:	29400804 	addi	r5,r5,32
  e5ca7c:	01803974 	movhi	r6,229
  e5ca80:	31806d04 	addi	r6,r6,436
  e5ca84:	0e5cac00 	call	e5cac0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  e5ca88:	010039b4 	movhi	r4,230
  e5ca8c:	21046704 	addi	r4,r4,4508
  e5ca90:	014039b4 	movhi	r5,230
  e5ca94:	29446704 	addi	r5,r5,4508
  e5ca98:	018039b4 	movhi	r6,230
  e5ca9c:	3185b904 	addi	r6,r6,5860
  e5caa0:	0e5cac00 	call	e5cac0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  e5caa4:	0e5ff480 	call	e5ff48 <alt_dcache_flush_all>
  alt_icache_flush_all();
  e5caa8:	0e601fc0 	call	e601fc <alt_icache_flush_all>
}
  e5caac:	e037883a 	mov	sp,fp
  e5cab0:	dfc00117 	ldw	ra,4(sp)
  e5cab4:	df000017 	ldw	fp,0(sp)
  e5cab8:	dec00204 	addi	sp,sp,8
  e5cabc:	f800283a 	ret

00e5cac0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  e5cac0:	defffc04 	addi	sp,sp,-16
  e5cac4:	df000315 	stw	fp,12(sp)
  e5cac8:	df000304 	addi	fp,sp,12
  e5cacc:	e13ffd15 	stw	r4,-12(fp)
  e5cad0:	e17ffe15 	stw	r5,-8(fp)
  e5cad4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  e5cad8:	e0fffe17 	ldw	r3,-8(fp)
  e5cadc:	e0bffd17 	ldw	r2,-12(fp)
  e5cae0:	18800e26 	beq	r3,r2,e5cb1c <alt_load_section+0x5c>
  {
    while( to != end )
  e5cae4:	00000a06 	br	e5cb10 <alt_load_section+0x50>
    {
      *to++ = *from++;
  e5cae8:	e0bffd17 	ldw	r2,-12(fp)
  e5caec:	10c00017 	ldw	r3,0(r2)
  e5caf0:	e0bffe17 	ldw	r2,-8(fp)
  e5caf4:	10c00015 	stw	r3,0(r2)
  e5caf8:	e0bffe17 	ldw	r2,-8(fp)
  e5cafc:	10800104 	addi	r2,r2,4
  e5cb00:	e0bffe15 	stw	r2,-8(fp)
  e5cb04:	e0bffd17 	ldw	r2,-12(fp)
  e5cb08:	10800104 	addi	r2,r2,4
  e5cb0c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  e5cb10:	e0fffe17 	ldw	r3,-8(fp)
  e5cb14:	e0bfff17 	ldw	r2,-4(fp)
  e5cb18:	18bff31e 	bne	r3,r2,e5cae8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  e5cb1c:	e037883a 	mov	sp,fp
  e5cb20:	df000017 	ldw	fp,0(sp)
  e5cb24:	dec00104 	addi	sp,sp,4
  e5cb28:	f800283a 	ret

00e5cb2c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  e5cb2c:	defff804 	addi	sp,sp,-32
  e5cb30:	dfc00715 	stw	ra,28(sp)
  e5cb34:	df000615 	stw	fp,24(sp)
  e5cb38:	df000604 	addi	fp,sp,24
  e5cb3c:	e13ffc15 	stw	r4,-16(fp)
  e5cb40:	e17ffd15 	stw	r5,-12(fp)
  e5cb44:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  e5cb48:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  e5cb4c:	e0bffc17 	ldw	r2,-16(fp)
  e5cb50:	1004803a 	cmplt	r2,r2,zero
  e5cb54:	1000081e 	bne	r2,zero,e5cb78 <lseek+0x4c>
  e5cb58:	e0bffc17 	ldw	r2,-16(fp)
  e5cb5c:	10800324 	muli	r2,r2,12
  e5cb60:	1007883a 	mov	r3,r2
  e5cb64:	008039b4 	movhi	r2,230
  e5cb68:	1087c804 	addi	r2,r2,7968
  e5cb6c:	1887883a 	add	r3,r3,r2
  e5cb70:	e0ffff15 	stw	r3,-4(fp)
  e5cb74:	00000106 	br	e5cb7c <lseek+0x50>
  e5cb78:	e03fff15 	stw	zero,-4(fp)
  e5cb7c:	e0bfff17 	ldw	r2,-4(fp)
  e5cb80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  e5cb84:	e0bffb17 	ldw	r2,-20(fp)
  e5cb88:	1005003a 	cmpeq	r2,r2,zero
  e5cb8c:	1000111e 	bne	r2,zero,e5cbd4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  e5cb90:	e0bffb17 	ldw	r2,-20(fp)
  e5cb94:	10800017 	ldw	r2,0(r2)
  e5cb98:	10800717 	ldw	r2,28(r2)
  e5cb9c:	1005003a 	cmpeq	r2,r2,zero
  e5cba0:	1000091e 	bne	r2,zero,e5cbc8 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  e5cba4:	e0bffb17 	ldw	r2,-20(fp)
  e5cba8:	10800017 	ldw	r2,0(r2)
  e5cbac:	10800717 	ldw	r2,28(r2)
  e5cbb0:	e13ffb17 	ldw	r4,-20(fp)
  e5cbb4:	e17ffd17 	ldw	r5,-12(fp)
  e5cbb8:	e1bffe17 	ldw	r6,-8(fp)
  e5cbbc:	103ee83a 	callr	r2
  e5cbc0:	e0bffa15 	stw	r2,-24(fp)
  e5cbc4:	00000506 	br	e5cbdc <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  e5cbc8:	00bfde84 	movi	r2,-134
  e5cbcc:	e0bffa15 	stw	r2,-24(fp)
  e5cbd0:	00000206 	br	e5cbdc <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  e5cbd4:	00bfebc4 	movi	r2,-81
  e5cbd8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  e5cbdc:	e0bffa17 	ldw	r2,-24(fp)
  e5cbe0:	1004403a 	cmpge	r2,r2,zero
  e5cbe4:	1000071e 	bne	r2,zero,e5cc04 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  e5cbe8:	0e5cc1c0 	call	e5cc1c <alt_get_errno>
  e5cbec:	1007883a 	mov	r3,r2
  e5cbf0:	e0bffa17 	ldw	r2,-24(fp)
  e5cbf4:	0085c83a 	sub	r2,zero,r2
  e5cbf8:	18800015 	stw	r2,0(r3)
    rc = -1;
  e5cbfc:	00bfffc4 	movi	r2,-1
  e5cc00:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  e5cc04:	e0bffa17 	ldw	r2,-24(fp)
}
  e5cc08:	e037883a 	mov	sp,fp
  e5cc0c:	dfc00117 	ldw	ra,4(sp)
  e5cc10:	df000017 	ldw	fp,0(sp)
  e5cc14:	dec00204 	addi	sp,sp,8
  e5cc18:	f800283a 	ret

00e5cc1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e5cc1c:	defffd04 	addi	sp,sp,-12
  e5cc20:	dfc00215 	stw	ra,8(sp)
  e5cc24:	df000115 	stw	fp,4(sp)
  e5cc28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e5cc2c:	008039b4 	movhi	r2,230
  e5cc30:	108ca604 	addi	r2,r2,12952
  e5cc34:	10800017 	ldw	r2,0(r2)
  e5cc38:	1005003a 	cmpeq	r2,r2,zero
  e5cc3c:	1000061e 	bne	r2,zero,e5cc58 <alt_get_errno+0x3c>
  e5cc40:	008039b4 	movhi	r2,230
  e5cc44:	108ca604 	addi	r2,r2,12952
  e5cc48:	10800017 	ldw	r2,0(r2)
  e5cc4c:	103ee83a 	callr	r2
  e5cc50:	e0bfff15 	stw	r2,-4(fp)
  e5cc54:	00000306 	br	e5cc64 <alt_get_errno+0x48>
  e5cc58:	008039b4 	movhi	r2,230
  e5cc5c:	1093ac04 	addi	r2,r2,20144
  e5cc60:	e0bfff15 	stw	r2,-4(fp)
  e5cc64:	e0bfff17 	ldw	r2,-4(fp)
}
  e5cc68:	e037883a 	mov	sp,fp
  e5cc6c:	dfc00117 	ldw	ra,4(sp)
  e5cc70:	df000017 	ldw	fp,0(sp)
  e5cc74:	dec00204 	addi	sp,sp,8
  e5cc78:	f800283a 	ret

00e5cc7c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  e5cc7c:	defffd04 	addi	sp,sp,-12
  e5cc80:	dfc00215 	stw	ra,8(sp)
  e5cc84:	df000115 	stw	fp,4(sp)
  e5cc88:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  e5cc8c:	0009883a 	mov	r4,zero
  e5cc90:	0e5d1440 	call	e5d144 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  e5cc94:	0e5d1780 	call	e5d178 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  e5cc98:	010039b4 	movhi	r4,230
  e5cc9c:	21056704 	addi	r4,r4,5532
  e5cca0:	014039b4 	movhi	r5,230
  e5cca4:	29456704 	addi	r5,r5,5532
  e5cca8:	018039b4 	movhi	r6,230
  e5ccac:	31856704 	addi	r6,r6,5532
  e5ccb0:	0e605bc0 	call	e605bc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  e5ccb4:	0e600a00 	call	e600a0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  e5ccb8:	010039b4 	movhi	r4,230
  e5ccbc:	21004104 	addi	r4,r4,260
  e5ccc0:	0e60d240 	call	e60d24 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  e5ccc4:	d1271c17 	ldw	r4,-25488(gp)
  e5ccc8:	d1671d17 	ldw	r5,-25484(gp)
  e5cccc:	d1a71e17 	ldw	r6,-25480(gp)
  e5ccd0:	0e50c040 	call	e50c04 <main>
  e5ccd4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  e5ccd8:	01000044 	movi	r4,1
  e5ccdc:	0e5c6640 	call	e5c664 <close>
  exit (result);
  e5cce0:	e13fff17 	ldw	r4,-4(fp)
  e5cce4:	0e60d380 	call	e60d38 <exit>

00e5cce8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  e5cce8:	defffe04 	addi	sp,sp,-8
  e5ccec:	df000115 	stw	fp,4(sp)
  e5ccf0:	df000104 	addi	fp,sp,4
  e5ccf4:	e13fff15 	stw	r4,-4(fp)
}
  e5ccf8:	e037883a 	mov	sp,fp
  e5ccfc:	df000017 	ldw	fp,0(sp)
  e5cd00:	dec00104 	addi	sp,sp,4
  e5cd04:	f800283a 	ret

00e5cd08 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  e5cd08:	defffe04 	addi	sp,sp,-8
  e5cd0c:	df000115 	stw	fp,4(sp)
  e5cd10:	df000104 	addi	fp,sp,4
  e5cd14:	e13fff15 	stw	r4,-4(fp)
}
  e5cd18:	e037883a 	mov	sp,fp
  e5cd1c:	df000017 	ldw	fp,0(sp)
  e5cd20:	dec00104 	addi	sp,sp,4
  e5cd24:	f800283a 	ret

00e5cd28 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  e5cd28:	defff704 	addi	sp,sp,-36
  e5cd2c:	dfc00815 	stw	ra,32(sp)
  e5cd30:	df000715 	stw	fp,28(sp)
  e5cd34:	df000704 	addi	fp,sp,28
  e5cd38:	e13ffb15 	stw	r4,-20(fp)
  e5cd3c:	e17ffc15 	stw	r5,-16(fp)
  e5cd40:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  e5cd44:	e0bffb17 	ldw	r2,-20(fp)
  e5cd48:	1004803a 	cmplt	r2,r2,zero
  e5cd4c:	1000081e 	bne	r2,zero,e5cd70 <read+0x48>
  e5cd50:	e0bffb17 	ldw	r2,-20(fp)
  e5cd54:	10800324 	muli	r2,r2,12
  e5cd58:	1007883a 	mov	r3,r2
  e5cd5c:	008039b4 	movhi	r2,230
  e5cd60:	1087c804 	addi	r2,r2,7968
  e5cd64:	1887883a 	add	r3,r3,r2
  e5cd68:	e0ffff15 	stw	r3,-4(fp)
  e5cd6c:	00000106 	br	e5cd74 <read+0x4c>
  e5cd70:	e03fff15 	stw	zero,-4(fp)
  e5cd74:	e0bfff17 	ldw	r2,-4(fp)
  e5cd78:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  e5cd7c:	e0bffa17 	ldw	r2,-24(fp)
  e5cd80:	1005003a 	cmpeq	r2,r2,zero
  e5cd84:	1000241e 	bne	r2,zero,e5ce18 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  e5cd88:	e0bffa17 	ldw	r2,-24(fp)
  e5cd8c:	10800217 	ldw	r2,8(r2)
  e5cd90:	108000cc 	andi	r2,r2,3
  e5cd94:	10800060 	cmpeqi	r2,r2,1
  e5cd98:	10001a1e 	bne	r2,zero,e5ce04 <read+0xdc>
  e5cd9c:	e0bffa17 	ldw	r2,-24(fp)
  e5cda0:	10800017 	ldw	r2,0(r2)
  e5cda4:	10800517 	ldw	r2,20(r2)
  e5cda8:	1005003a 	cmpeq	r2,r2,zero
  e5cdac:	1000151e 	bne	r2,zero,e5ce04 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  e5cdb0:	e0bffa17 	ldw	r2,-24(fp)
  e5cdb4:	10800017 	ldw	r2,0(r2)
  e5cdb8:	10800517 	ldw	r2,20(r2)
  e5cdbc:	e17ffc17 	ldw	r5,-16(fp)
  e5cdc0:	e1bffd17 	ldw	r6,-12(fp)
  e5cdc4:	e13ffa17 	ldw	r4,-24(fp)
  e5cdc8:	103ee83a 	callr	r2
  e5cdcc:	e0bff915 	stw	r2,-28(fp)
  e5cdd0:	e0bff917 	ldw	r2,-28(fp)
  e5cdd4:	1004403a 	cmpge	r2,r2,zero
  e5cdd8:	1000071e 	bne	r2,zero,e5cdf8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  e5cddc:	0e5ce480 	call	e5ce48 <alt_get_errno>
  e5cde0:	e0fff917 	ldw	r3,-28(fp)
  e5cde4:	00c7c83a 	sub	r3,zero,r3
  e5cde8:	10c00015 	stw	r3,0(r2)
          return -1;
  e5cdec:	00bfffc4 	movi	r2,-1
  e5cdf0:	e0bffe15 	stw	r2,-8(fp)
  e5cdf4:	00000e06 	br	e5ce30 <read+0x108>
        }
        return rval;
  e5cdf8:	e0bff917 	ldw	r2,-28(fp)
  e5cdfc:	e0bffe15 	stw	r2,-8(fp)
  e5ce00:	00000b06 	br	e5ce30 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  e5ce04:	0e5ce480 	call	e5ce48 <alt_get_errno>
  e5ce08:	1007883a 	mov	r3,r2
  e5ce0c:	00800344 	movi	r2,13
  e5ce10:	18800015 	stw	r2,0(r3)
  e5ce14:	00000406 	br	e5ce28 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  e5ce18:	0e5ce480 	call	e5ce48 <alt_get_errno>
  e5ce1c:	1007883a 	mov	r3,r2
  e5ce20:	00801444 	movi	r2,81
  e5ce24:	18800015 	stw	r2,0(r3)
  }
  return -1;
  e5ce28:	00bfffc4 	movi	r2,-1
  e5ce2c:	e0bffe15 	stw	r2,-8(fp)
  e5ce30:	e0bffe17 	ldw	r2,-8(fp)
}
  e5ce34:	e037883a 	mov	sp,fp
  e5ce38:	dfc00117 	ldw	ra,4(sp)
  e5ce3c:	df000017 	ldw	fp,0(sp)
  e5ce40:	dec00204 	addi	sp,sp,8
  e5ce44:	f800283a 	ret

00e5ce48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e5ce48:	defffd04 	addi	sp,sp,-12
  e5ce4c:	dfc00215 	stw	ra,8(sp)
  e5ce50:	df000115 	stw	fp,4(sp)
  e5ce54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e5ce58:	008039b4 	movhi	r2,230
  e5ce5c:	108ca604 	addi	r2,r2,12952
  e5ce60:	10800017 	ldw	r2,0(r2)
  e5ce64:	1005003a 	cmpeq	r2,r2,zero
  e5ce68:	1000061e 	bne	r2,zero,e5ce84 <alt_get_errno+0x3c>
  e5ce6c:	008039b4 	movhi	r2,230
  e5ce70:	108ca604 	addi	r2,r2,12952
  e5ce74:	10800017 	ldw	r2,0(r2)
  e5ce78:	103ee83a 	callr	r2
  e5ce7c:	e0bfff15 	stw	r2,-4(fp)
  e5ce80:	00000306 	br	e5ce90 <alt_get_errno+0x48>
  e5ce84:	008039b4 	movhi	r2,230
  e5ce88:	1093ac04 	addi	r2,r2,20144
  e5ce8c:	e0bfff15 	stw	r2,-4(fp)
  e5ce90:	e0bfff17 	ldw	r2,-4(fp)
}
  e5ce94:	e037883a 	mov	sp,fp
  e5ce98:	dfc00117 	ldw	ra,4(sp)
  e5ce9c:	df000017 	ldw	fp,0(sp)
  e5cea0:	dec00204 	addi	sp,sp,8
  e5cea4:	f800283a 	ret

00e5cea8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  e5cea8:	defffe04 	addi	sp,sp,-8
  e5ceac:	df000115 	stw	fp,4(sp)
  e5ceb0:	df000104 	addi	fp,sp,4
  e5ceb4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  e5ceb8:	e0bfff17 	ldw	r2,-4(fp)
  e5cebc:	108000d0 	cmplti	r2,r2,3
  e5cec0:	10000d1e 	bne	r2,zero,e5cef8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  e5cec4:	e0bfff17 	ldw	r2,-4(fp)
  e5cec8:	00c039b4 	movhi	r3,230
  e5cecc:	18c7c804 	addi	r3,r3,7968
  e5ced0:	10800324 	muli	r2,r2,12
  e5ced4:	10c5883a 	add	r2,r2,r3
  e5ced8:	10800204 	addi	r2,r2,8
  e5cedc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  e5cee0:	e0bfff17 	ldw	r2,-4(fp)
  e5cee4:	00c039b4 	movhi	r3,230
  e5cee8:	18c7c804 	addi	r3,r3,7968
  e5ceec:	10800324 	muli	r2,r2,12
  e5cef0:	10c5883a 	add	r2,r2,r3
  e5cef4:	10000015 	stw	zero,0(r2)
  }
}
  e5cef8:	e037883a 	mov	sp,fp
  e5cefc:	df000017 	ldw	fp,0(sp)
  e5cf00:	dec00104 	addi	sp,sp,4
  e5cf04:	f800283a 	ret

00e5cf08 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  e5cf08:	defff804 	addi	sp,sp,-32
  e5cf0c:	df000715 	stw	fp,28(sp)
  e5cf10:	df000704 	addi	fp,sp,28
  e5cf14:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  e5cf18:	0005303a 	rdctl	r2,status
  e5cf1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  e5cf20:	e0fffb17 	ldw	r3,-20(fp)
  e5cf24:	00bfff84 	movi	r2,-2
  e5cf28:	1884703a 	and	r2,r3,r2
  e5cf2c:	1001703a 	wrctl	status,r2
  
  return context;
  e5cf30:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  e5cf34:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  e5cf38:	d0a01617 	ldw	r2,-32680(gp)
  e5cf3c:	10c000c4 	addi	r3,r2,3
  e5cf40:	00bfff04 	movi	r2,-4
  e5cf44:	1884703a 	and	r2,r3,r2
  e5cf48:	d0a01615 	stw	r2,-32680(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  e5cf4c:	d0e01617 	ldw	r3,-32680(gp)
  e5cf50:	e0bffe17 	ldw	r2,-8(fp)
  e5cf54:	1887883a 	add	r3,r3,r2
  e5cf58:	00804034 	movhi	r2,256
  e5cf5c:	10800004 	addi	r2,r2,0
  e5cf60:	10c0072e 	bgeu	r2,r3,e5cf80 <sbrk+0x78>
  e5cf64:	e0bffd17 	ldw	r2,-12(fp)
  e5cf68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  e5cf6c:	e0bffa17 	ldw	r2,-24(fp)
  e5cf70:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  e5cf74:	00bfffc4 	movi	r2,-1
  e5cf78:	e0bfff15 	stw	r2,-4(fp)
  e5cf7c:	00000c06 	br	e5cfb0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  e5cf80:	d0a01617 	ldw	r2,-32680(gp)
  e5cf84:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  e5cf88:	d0e01617 	ldw	r3,-32680(gp)
  e5cf8c:	e0bffe17 	ldw	r2,-8(fp)
  e5cf90:	1885883a 	add	r2,r3,r2
  e5cf94:	d0a01615 	stw	r2,-32680(gp)
  e5cf98:	e0bffd17 	ldw	r2,-12(fp)
  e5cf9c:	e0bff915 	stw	r2,-28(fp)
  e5cfa0:	e0bff917 	ldw	r2,-28(fp)
  e5cfa4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  e5cfa8:	e0bffc17 	ldw	r2,-16(fp)
  e5cfac:	e0bfff15 	stw	r2,-4(fp)
  e5cfb0:	e0bfff17 	ldw	r2,-4(fp)
} 
  e5cfb4:	e037883a 	mov	sp,fp
  e5cfb8:	df000017 	ldw	fp,0(sp)
  e5cfbc:	dec00104 	addi	sp,sp,4
  e5cfc0:	f800283a 	ret

00e5cfc4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  e5cfc4:	defff704 	addi	sp,sp,-36
  e5cfc8:	dfc00815 	stw	ra,32(sp)
  e5cfcc:	df000715 	stw	fp,28(sp)
  e5cfd0:	df000704 	addi	fp,sp,28
  e5cfd4:	e13ffb15 	stw	r4,-20(fp)
  e5cfd8:	e17ffc15 	stw	r5,-16(fp)
  e5cfdc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  e5cfe0:	e0bffb17 	ldw	r2,-20(fp)
  e5cfe4:	1004803a 	cmplt	r2,r2,zero
  e5cfe8:	1000081e 	bne	r2,zero,e5d00c <write+0x48>
  e5cfec:	e0bffb17 	ldw	r2,-20(fp)
  e5cff0:	10800324 	muli	r2,r2,12
  e5cff4:	1007883a 	mov	r3,r2
  e5cff8:	008039b4 	movhi	r2,230
  e5cffc:	1087c804 	addi	r2,r2,7968
  e5d000:	1887883a 	add	r3,r3,r2
  e5d004:	e0ffff15 	stw	r3,-4(fp)
  e5d008:	00000106 	br	e5d010 <write+0x4c>
  e5d00c:	e03fff15 	stw	zero,-4(fp)
  e5d010:	e0bfff17 	ldw	r2,-4(fp)
  e5d014:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  e5d018:	e0bffa17 	ldw	r2,-24(fp)
  e5d01c:	1005003a 	cmpeq	r2,r2,zero
  e5d020:	1000241e 	bne	r2,zero,e5d0b4 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  e5d024:	e0bffa17 	ldw	r2,-24(fp)
  e5d028:	10800217 	ldw	r2,8(r2)
  e5d02c:	108000cc 	andi	r2,r2,3
  e5d030:	1005003a 	cmpeq	r2,r2,zero
  e5d034:	10001a1e 	bne	r2,zero,e5d0a0 <write+0xdc>
  e5d038:	e0bffa17 	ldw	r2,-24(fp)
  e5d03c:	10800017 	ldw	r2,0(r2)
  e5d040:	10800617 	ldw	r2,24(r2)
  e5d044:	1005003a 	cmpeq	r2,r2,zero
  e5d048:	1000151e 	bne	r2,zero,e5d0a0 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  e5d04c:	e0bffa17 	ldw	r2,-24(fp)
  e5d050:	10800017 	ldw	r2,0(r2)
  e5d054:	10800617 	ldw	r2,24(r2)
  e5d058:	e17ffc17 	ldw	r5,-16(fp)
  e5d05c:	e1bffd17 	ldw	r6,-12(fp)
  e5d060:	e13ffa17 	ldw	r4,-24(fp)
  e5d064:	103ee83a 	callr	r2
  e5d068:	e0bff915 	stw	r2,-28(fp)
  e5d06c:	e0bff917 	ldw	r2,-28(fp)
  e5d070:	1004403a 	cmpge	r2,r2,zero
  e5d074:	1000071e 	bne	r2,zero,e5d094 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  e5d078:	0e5d0e40 	call	e5d0e4 <alt_get_errno>
  e5d07c:	e0fff917 	ldw	r3,-28(fp)
  e5d080:	00c7c83a 	sub	r3,zero,r3
  e5d084:	10c00015 	stw	r3,0(r2)
        return -1;
  e5d088:	00bfffc4 	movi	r2,-1
  e5d08c:	e0bffe15 	stw	r2,-8(fp)
  e5d090:	00000e06 	br	e5d0cc <write+0x108>
      }
      return rval;
  e5d094:	e0bff917 	ldw	r2,-28(fp)
  e5d098:	e0bffe15 	stw	r2,-8(fp)
  e5d09c:	00000b06 	br	e5d0cc <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  e5d0a0:	0e5d0e40 	call	e5d0e4 <alt_get_errno>
  e5d0a4:	1007883a 	mov	r3,r2
  e5d0a8:	00800344 	movi	r2,13
  e5d0ac:	18800015 	stw	r2,0(r3)
  e5d0b0:	00000406 	br	e5d0c4 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  e5d0b4:	0e5d0e40 	call	e5d0e4 <alt_get_errno>
  e5d0b8:	1007883a 	mov	r3,r2
  e5d0bc:	00801444 	movi	r2,81
  e5d0c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  e5d0c4:	00bfffc4 	movi	r2,-1
  e5d0c8:	e0bffe15 	stw	r2,-8(fp)
  e5d0cc:	e0bffe17 	ldw	r2,-8(fp)
}
  e5d0d0:	e037883a 	mov	sp,fp
  e5d0d4:	dfc00117 	ldw	ra,4(sp)
  e5d0d8:	df000017 	ldw	fp,0(sp)
  e5d0dc:	dec00204 	addi	sp,sp,8
  e5d0e0:	f800283a 	ret

00e5d0e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e5d0e4:	defffd04 	addi	sp,sp,-12
  e5d0e8:	dfc00215 	stw	ra,8(sp)
  e5d0ec:	df000115 	stw	fp,4(sp)
  e5d0f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e5d0f4:	008039b4 	movhi	r2,230
  e5d0f8:	108ca604 	addi	r2,r2,12952
  e5d0fc:	10800017 	ldw	r2,0(r2)
  e5d100:	1005003a 	cmpeq	r2,r2,zero
  e5d104:	1000061e 	bne	r2,zero,e5d120 <alt_get_errno+0x3c>
  e5d108:	008039b4 	movhi	r2,230
  e5d10c:	108ca604 	addi	r2,r2,12952
  e5d110:	10800017 	ldw	r2,0(r2)
  e5d114:	103ee83a 	callr	r2
  e5d118:	e0bfff15 	stw	r2,-4(fp)
  e5d11c:	00000306 	br	e5d12c <alt_get_errno+0x48>
  e5d120:	008039b4 	movhi	r2,230
  e5d124:	1093ac04 	addi	r2,r2,20144
  e5d128:	e0bfff15 	stw	r2,-4(fp)
  e5d12c:	e0bfff17 	ldw	r2,-4(fp)
}
  e5d130:	e037883a 	mov	sp,fp
  e5d134:	dfc00117 	ldw	ra,4(sp)
  e5d138:	df000017 	ldw	fp,0(sp)
  e5d13c:	dec00204 	addi	sp,sp,8
  e5d140:	f800283a 	ret

00e5d144 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  e5d144:	defffd04 	addi	sp,sp,-12
  e5d148:	dfc00215 	stw	ra,8(sp)
  e5d14c:	df000115 	stw	fp,4(sp)
  e5d150:	df000104 	addi	fp,sp,4
  e5d154:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_3, cpu_3);
  e5d158:	0e60a9c0 	call	e60a9c <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  e5d15c:	00800044 	movi	r2,1
  e5d160:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  e5d164:	e037883a 	mov	sp,fp
  e5d168:	dfc00117 	ldw	ra,4(sp)
  e5d16c:	df000017 	ldw	fp,0(sp)
  e5d170:	dec00204 	addi	sp,sp,8
  e5d174:	f800283a 	ret

00e5d178 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  e5d178:	defffd04 	addi	sp,sp,-12
  e5d17c:	dfc00215 	stw	ra,8(sp)
  e5d180:	df000115 	stw	fp,4(sp)
  e5d184:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_3, jtag_uart_3);
  e5d188:	010039b4 	movhi	r4,230
  e5d18c:	21083204 	addi	r4,r4,8392
  e5d190:	000b883a 	mov	r5,zero
  e5d194:	01800044 	movi	r6,1
  e5d198:	0e5d5700 	call	e5d570 <altera_avalon_jtag_uart_init>
  e5d19c:	010039b4 	movhi	r4,230
  e5d1a0:	21082804 	addi	r4,r4,8352
  e5d1a4:	0e5d3f00 	call	e5d3f0 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
  e5d1a8:	010039b4 	movhi	r4,230
  e5d1ac:	210c4004 	addi	r4,r4,12544
  e5d1b0:	0e5ded40 	call	e5ded4 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
  e5d1b4:	010039b4 	movhi	r4,230
  e5d1b8:	210c4f04 	addi	r4,r4,12604
  e5d1bc:	0e5ded40 	call	e5ded4 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
  e5d1c0:	010039b4 	movhi	r4,230
  e5d1c4:	210c5e04 	addi	r4,r4,12664
  e5d1c8:	0e5ded40 	call	e5ded4 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
  e5d1cc:	010039b4 	movhi	r4,230
  e5d1d0:	210c6d04 	addi	r4,r4,12724
  e5d1d4:	0e5ded40 	call	e5ded4 <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
  e5d1d8:	0007883a 	mov	r3,zero
  e5d1dc:	00800044 	movi	r2,1
  e5d1e0:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  e5d1e4:	008039b4 	movhi	r2,230
  e5d1e8:	108c7c04 	addi	r2,r2,12784
  e5d1ec:	10800a17 	ldw	r2,40(r2)
  e5d1f0:	10800017 	ldw	r2,0(r2)
  e5d1f4:	1007883a 	mov	r3,r2
  e5d1f8:	008039b4 	movhi	r2,230
  e5d1fc:	108c7c04 	addi	r2,r2,12784
  e5d200:	10c00b15 	stw	r3,44(r2)
  e5d204:	008039b4 	movhi	r2,230
  e5d208:	108c7c04 	addi	r2,r2,12784
  e5d20c:	10800a17 	ldw	r2,40(r2)
  e5d210:	10800104 	addi	r2,r2,4
  e5d214:	10800017 	ldw	r2,0(r2)
  e5d218:	1007883a 	mov	r3,r2
  e5d21c:	008039b4 	movhi	r2,230
  e5d220:	108c7c04 	addi	r2,r2,12784
  e5d224:	10c00c15 	stw	r3,48(r2)
  e5d228:	008039b4 	movhi	r2,230
  e5d22c:	108c7c04 	addi	r2,r2,12784
  e5d230:	10800a17 	ldw	r2,40(r2)
  e5d234:	10800204 	addi	r2,r2,8
  e5d238:	10800017 	ldw	r2,0(r2)
  e5d23c:	10ffffcc 	andi	r3,r2,65535
  e5d240:	008039b4 	movhi	r2,230
  e5d244:	108c7c04 	addi	r2,r2,12784
  e5d248:	10c00f15 	stw	r3,60(r2)
  e5d24c:	008039b4 	movhi	r2,230
  e5d250:	108c7c04 	addi	r2,r2,12784
  e5d254:	10800a17 	ldw	r2,40(r2)
  e5d258:	10800204 	addi	r2,r2,8
  e5d25c:	10800017 	ldw	r2,0(r2)
  e5d260:	1005d43a 	srai	r2,r2,16
  e5d264:	10ffffcc 	andi	r3,r2,65535
  e5d268:	008039b4 	movhi	r2,230
  e5d26c:	108c7c04 	addi	r2,r2,12784
  e5d270:	10c01015 	stw	r3,64(r2)
  e5d274:	008039b4 	movhi	r2,230
  e5d278:	108c7c04 	addi	r2,r2,12784
  e5d27c:	10800a17 	ldw	r2,40(r2)
  e5d280:	10800304 	addi	r2,r2,12
  e5d284:	10800017 	ldw	r2,0(r2)
  e5d288:	1005d07a 	srai	r2,r2,1
  e5d28c:	10c0004c 	andi	r3,r2,1
  e5d290:	008039b4 	movhi	r2,230
  e5d294:	108c7c04 	addi	r2,r2,12784
  e5d298:	10c00d15 	stw	r3,52(r2)
  e5d29c:	008039b4 	movhi	r2,230
  e5d2a0:	108c7c04 	addi	r2,r2,12784
  e5d2a4:	10800a17 	ldw	r2,40(r2)
  e5d2a8:	10800304 	addi	r2,r2,12
  e5d2ac:	10800017 	ldw	r2,0(r2)
  e5d2b0:	1005d13a 	srai	r2,r2,4
  e5d2b4:	10c003cc 	andi	r3,r2,15
  e5d2b8:	008039b4 	movhi	r2,230
  e5d2bc:	108c7c04 	addi	r2,r2,12784
  e5d2c0:	10c00e15 	stw	r3,56(r2)
  e5d2c4:	008039b4 	movhi	r2,230
  e5d2c8:	108c7c04 	addi	r2,r2,12784
  e5d2cc:	10800a17 	ldw	r2,40(r2)
  e5d2d0:	10800304 	addi	r2,r2,12
  e5d2d4:	10800017 	ldw	r2,0(r2)
  e5d2d8:	1005d43a 	srai	r2,r2,16
  e5d2dc:	1007883a 	mov	r3,r2
  e5d2e0:	00bfffc4 	movi	r2,-1
  e5d2e4:	1884703a 	and	r2,r3,r2
  e5d2e8:	e0bfff45 	stb	r2,-3(fp)
  e5d2ec:	008039b4 	movhi	r2,230
  e5d2f0:	108c7c04 	addi	r2,r2,12784
  e5d2f4:	10800a17 	ldw	r2,40(r2)
  e5d2f8:	10800304 	addi	r2,r2,12
  e5d2fc:	10800017 	ldw	r2,0(r2)
  e5d300:	1005d63a 	srai	r2,r2,24
  e5d304:	1007883a 	mov	r3,r2
  e5d308:	00bfffc4 	movi	r2,-1
  e5d30c:	1884703a 	and	r2,r3,r2
  e5d310:	e0bfff05 	stb	r2,-4(fp)
  e5d314:	008039b4 	movhi	r2,230
  e5d318:	108c7c04 	addi	r2,r2,12784
  e5d31c:	10800e17 	ldw	r2,56(r2)
  e5d320:	10800058 	cmpnei	r2,r2,1
  e5d324:	1000041e 	bne	r2,zero,e5d338 <alt_sys_init+0x1c0>
  e5d328:	008039b4 	movhi	r2,230
  e5d32c:	108c7c04 	addi	r2,r2,12784
  e5d330:	10001115 	stw	zero,68(r2)
  e5d334:	00000e06 	br	e5d370 <alt_sys_init+0x1f8>
  e5d338:	008039b4 	movhi	r2,230
  e5d33c:	108c7c04 	addi	r2,r2,12784
  e5d340:	10800e17 	ldw	r2,56(r2)
  e5d344:	10800098 	cmpnei	r2,r2,2
  e5d348:	1000051e 	bne	r2,zero,e5d360 <alt_sys_init+0x1e8>
  e5d34c:	00c039b4 	movhi	r3,230
  e5d350:	18cc7c04 	addi	r3,r3,12784
  e5d354:	00800044 	movi	r2,1
  e5d358:	18801115 	stw	r2,68(r3)
  e5d35c:	00000406 	br	e5d370 <alt_sys_init+0x1f8>
  e5d360:	00c039b4 	movhi	r3,230
  e5d364:	18cc7c04 	addi	r3,r3,12784
  e5d368:	00800084 	movi	r2,2
  e5d36c:	18801115 	stw	r2,68(r3)
  e5d370:	e0ffff43 	ldbu	r3,-3(fp)
  e5d374:	00800804 	movi	r2,32
  e5d378:	10c7c83a 	sub	r3,r2,r3
  e5d37c:	00bfffc4 	movi	r2,-1
  e5d380:	10c6d83a 	srl	r3,r2,r3
  e5d384:	008039b4 	movhi	r2,230
  e5d388:	108c7c04 	addi	r2,r2,12784
  e5d38c:	10c01215 	stw	r3,72(r2)
  e5d390:	e0ffff43 	ldbu	r3,-3(fp)
  e5d394:	008039b4 	movhi	r2,230
  e5d398:	108c7c04 	addi	r2,r2,12784
  e5d39c:	10801117 	ldw	r2,68(r2)
  e5d3a0:	1887883a 	add	r3,r3,r2
  e5d3a4:	008039b4 	movhi	r2,230
  e5d3a8:	108c7c04 	addi	r2,r2,12784
  e5d3ac:	10c01315 	stw	r3,76(r2)
  e5d3b0:	e0ffff03 	ldbu	r3,-4(fp)
  e5d3b4:	00800804 	movi	r2,32
  e5d3b8:	10c7c83a 	sub	r3,r2,r3
  e5d3bc:	00bfffc4 	movi	r2,-1
  e5d3c0:	10c6d83a 	srl	r3,r2,r3
  e5d3c4:	008039b4 	movhi	r2,230
  e5d3c8:	108c7c04 	addi	r2,r2,12784
  e5d3cc:	10c01415 	stw	r3,80(r2)
  e5d3d0:	010039b4 	movhi	r4,230
  e5d3d4:	210c7c04 	addi	r4,r4,12784
  e5d3d8:	0e5d3f00 	call	e5d3f0 <alt_dev_reg>
}
  e5d3dc:	e037883a 	mov	sp,fp
  e5d3e0:	dfc00117 	ldw	ra,4(sp)
  e5d3e4:	df000017 	ldw	fp,0(sp)
  e5d3e8:	dec00204 	addi	sp,sp,8
  e5d3ec:	f800283a 	ret

00e5d3f0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  e5d3f0:	defffd04 	addi	sp,sp,-12
  e5d3f4:	dfc00215 	stw	ra,8(sp)
  e5d3f8:	df000115 	stw	fp,4(sp)
  e5d3fc:	df000104 	addi	fp,sp,4
  e5d400:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  e5d404:	e13fff17 	ldw	r4,-4(fp)
  e5d408:	014039b4 	movhi	r5,230
  e5d40c:	294ca304 	addi	r5,r5,12940
  e5d410:	0e5ff8c0 	call	e5ff8c <alt_dev_llist_insert>
}
  e5d414:	e037883a 	mov	sp,fp
  e5d418:	dfc00117 	ldw	ra,4(sp)
  e5d41c:	df000017 	ldw	fp,0(sp)
  e5d420:	dec00204 	addi	sp,sp,8
  e5d424:	f800283a 	ret

00e5d428 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  e5d428:	defffa04 	addi	sp,sp,-24
  e5d42c:	dfc00515 	stw	ra,20(sp)
  e5d430:	df000415 	stw	fp,16(sp)
  e5d434:	df000404 	addi	fp,sp,16
  e5d438:	e13ffd15 	stw	r4,-12(fp)
  e5d43c:	e17ffe15 	stw	r5,-8(fp)
  e5d440:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  e5d444:	e0bffd17 	ldw	r2,-12(fp)
  e5d448:	10800017 	ldw	r2,0(r2)
  e5d44c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  e5d450:	e0bffc17 	ldw	r2,-16(fp)
  e5d454:	11000a04 	addi	r4,r2,40
  e5d458:	e0bffd17 	ldw	r2,-12(fp)
  e5d45c:	11c00217 	ldw	r7,8(r2)
  e5d460:	e17ffe17 	ldw	r5,-8(fp)
  e5d464:	e1bfff17 	ldw	r6,-4(fp)
  e5d468:	0e5da700 	call	e5da70 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  e5d46c:	e037883a 	mov	sp,fp
  e5d470:	dfc00117 	ldw	ra,4(sp)
  e5d474:	df000017 	ldw	fp,0(sp)
  e5d478:	dec00204 	addi	sp,sp,8
  e5d47c:	f800283a 	ret

00e5d480 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  e5d480:	defffa04 	addi	sp,sp,-24
  e5d484:	dfc00515 	stw	ra,20(sp)
  e5d488:	df000415 	stw	fp,16(sp)
  e5d48c:	df000404 	addi	fp,sp,16
  e5d490:	e13ffd15 	stw	r4,-12(fp)
  e5d494:	e17ffe15 	stw	r5,-8(fp)
  e5d498:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  e5d49c:	e0bffd17 	ldw	r2,-12(fp)
  e5d4a0:	10800017 	ldw	r2,0(r2)
  e5d4a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  e5d4a8:	e0bffc17 	ldw	r2,-16(fp)
  e5d4ac:	11000a04 	addi	r4,r2,40
  e5d4b0:	e0bffd17 	ldw	r2,-12(fp)
  e5d4b4:	11c00217 	ldw	r7,8(r2)
  e5d4b8:	e17ffe17 	ldw	r5,-8(fp)
  e5d4bc:	e1bfff17 	ldw	r6,-4(fp)
  e5d4c0:	0e5dc940 	call	e5dc94 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  e5d4c4:	e037883a 	mov	sp,fp
  e5d4c8:	dfc00117 	ldw	ra,4(sp)
  e5d4cc:	df000017 	ldw	fp,0(sp)
  e5d4d0:	dec00204 	addi	sp,sp,8
  e5d4d4:	f800283a 	ret

00e5d4d8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  e5d4d8:	defffc04 	addi	sp,sp,-16
  e5d4dc:	dfc00315 	stw	ra,12(sp)
  e5d4e0:	df000215 	stw	fp,8(sp)
  e5d4e4:	df000204 	addi	fp,sp,8
  e5d4e8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  e5d4ec:	e0bfff17 	ldw	r2,-4(fp)
  e5d4f0:	10800017 	ldw	r2,0(r2)
  e5d4f4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  e5d4f8:	e0bffe17 	ldw	r2,-8(fp)
  e5d4fc:	11000a04 	addi	r4,r2,40
  e5d500:	e0bfff17 	ldw	r2,-4(fp)
  e5d504:	11400217 	ldw	r5,8(r2)
  e5d508:	0e5d9080 	call	e5d908 <altera_avalon_jtag_uart_close>
}
  e5d50c:	e037883a 	mov	sp,fp
  e5d510:	dfc00117 	ldw	ra,4(sp)
  e5d514:	df000017 	ldw	fp,0(sp)
  e5d518:	dec00204 	addi	sp,sp,8
  e5d51c:	f800283a 	ret

00e5d520 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  e5d520:	defffa04 	addi	sp,sp,-24
  e5d524:	dfc00515 	stw	ra,20(sp)
  e5d528:	df000415 	stw	fp,16(sp)
  e5d52c:	df000404 	addi	fp,sp,16
  e5d530:	e13ffd15 	stw	r4,-12(fp)
  e5d534:	e17ffe15 	stw	r5,-8(fp)
  e5d538:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  e5d53c:	e0bffd17 	ldw	r2,-12(fp)
  e5d540:	10800017 	ldw	r2,0(r2)
  e5d544:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  e5d548:	e0bffc17 	ldw	r2,-16(fp)
  e5d54c:	11000a04 	addi	r4,r2,40
  e5d550:	e17ffe17 	ldw	r5,-8(fp)
  e5d554:	e1bfff17 	ldw	r6,-4(fp)
  e5d558:	0e5d97c0 	call	e5d97c <altera_avalon_jtag_uart_ioctl>
}
  e5d55c:	e037883a 	mov	sp,fp
  e5d560:	dfc00117 	ldw	ra,4(sp)
  e5d564:	df000017 	ldw	fp,0(sp)
  e5d568:	dec00204 	addi	sp,sp,8
  e5d56c:	f800283a 	ret

00e5d570 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  e5d570:	defffa04 	addi	sp,sp,-24
  e5d574:	dfc00515 	stw	ra,20(sp)
  e5d578:	df000415 	stw	fp,16(sp)
  e5d57c:	df000404 	addi	fp,sp,16
  e5d580:	e13ffd15 	stw	r4,-12(fp)
  e5d584:	e17ffe15 	stw	r5,-8(fp)
  e5d588:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  e5d58c:	e0fffd17 	ldw	r3,-12(fp)
  e5d590:	00800044 	movi	r2,1
  e5d594:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  e5d598:	e0bffd17 	ldw	r2,-12(fp)
  e5d59c:	10800017 	ldw	r2,0(r2)
  e5d5a0:	11000104 	addi	r4,r2,4
  e5d5a4:	e0bffd17 	ldw	r2,-12(fp)
  e5d5a8:	10800817 	ldw	r2,32(r2)
  e5d5ac:	1007883a 	mov	r3,r2
  e5d5b0:	2005883a 	mov	r2,r4
  e5d5b4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  e5d5b8:	e13ffe17 	ldw	r4,-8(fp)
  e5d5bc:	e17fff17 	ldw	r5,-4(fp)
  e5d5c0:	d8000015 	stw	zero,0(sp)
  e5d5c4:	018039b4 	movhi	r6,230
  e5d5c8:	31b58c04 	addi	r6,r6,-10704
  e5d5cc:	e1fffd17 	ldw	r7,-12(fp)
  e5d5d0:	0e6022c0 	call	e6022c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  e5d5d4:	e0bffd17 	ldw	r2,-12(fp)
  e5d5d8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  e5d5dc:	e0bffd17 	ldw	r2,-12(fp)
  e5d5e0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  e5d5e4:	008039b4 	movhi	r2,230
  e5d5e8:	1093b104 	addi	r2,r2,20164
  e5d5ec:	10800017 	ldw	r2,0(r2)
  e5d5f0:	100b883a 	mov	r5,r2
  e5d5f4:	018039b4 	movhi	r6,230
  e5d5f8:	31b61604 	addi	r6,r6,-10152
  e5d5fc:	e1fffd17 	ldw	r7,-12(fp)
  e5d600:	0e5fdf40 	call	e5fdf4 <alt_alarm_start>
  e5d604:	1004403a 	cmpge	r2,r2,zero
  e5d608:	1000041e 	bne	r2,zero,e5d61c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  e5d60c:	e0fffd17 	ldw	r3,-12(fp)
  e5d610:	00a00034 	movhi	r2,32768
  e5d614:	10bfffc4 	addi	r2,r2,-1
  e5d618:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  e5d61c:	e037883a 	mov	sp,fp
  e5d620:	dfc00117 	ldw	ra,4(sp)
  e5d624:	df000017 	ldw	fp,0(sp)
  e5d628:	dec00204 	addi	sp,sp,8
  e5d62c:	f800283a 	ret

00e5d630 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  e5d630:	defff804 	addi	sp,sp,-32
  e5d634:	df000715 	stw	fp,28(sp)
  e5d638:	df000704 	addi	fp,sp,28
  e5d63c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  e5d640:	e0bfff17 	ldw	r2,-4(fp)
  e5d644:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  e5d648:	e0bffe17 	ldw	r2,-8(fp)
  e5d64c:	10800017 	ldw	r2,0(r2)
  e5d650:	e0bffd15 	stw	r2,-12(fp)
  e5d654:	00000006 	br	e5d658 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  e5d658:	e0bffd17 	ldw	r2,-12(fp)
  e5d65c:	10800104 	addi	r2,r2,4
  e5d660:	10800037 	ldwio	r2,0(r2)
  e5d664:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  e5d668:	e0bffc17 	ldw	r2,-16(fp)
  e5d66c:	1080c00c 	andi	r2,r2,768
  e5d670:	1005003a 	cmpeq	r2,r2,zero
  e5d674:	1000741e 	bne	r2,zero,e5d848 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  e5d678:	e0bffc17 	ldw	r2,-16(fp)
  e5d67c:	1080400c 	andi	r2,r2,256
  e5d680:	1005003a 	cmpeq	r2,r2,zero
  e5d684:	1000351e 	bne	r2,zero,e5d75c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  e5d688:	00800074 	movhi	r2,1
  e5d68c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  e5d690:	e0bffe17 	ldw	r2,-8(fp)
  e5d694:	10800a17 	ldw	r2,40(r2)
  e5d698:	10800044 	addi	r2,r2,1
  e5d69c:	1081ffcc 	andi	r2,r2,2047
  e5d6a0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  e5d6a4:	e0bffe17 	ldw	r2,-8(fp)
  e5d6a8:	10c00b17 	ldw	r3,44(r2)
  e5d6ac:	e0bffa17 	ldw	r2,-24(fp)
  e5d6b0:	18801626 	beq	r3,r2,e5d70c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  e5d6b4:	e0bffd17 	ldw	r2,-12(fp)
  e5d6b8:	10800037 	ldwio	r2,0(r2)
  e5d6bc:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  e5d6c0:	e0bffb17 	ldw	r2,-20(fp)
  e5d6c4:	10a0000c 	andi	r2,r2,32768
  e5d6c8:	1005003a 	cmpeq	r2,r2,zero
  e5d6cc:	10000f1e 	bne	r2,zero,e5d70c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  e5d6d0:	e0bffe17 	ldw	r2,-8(fp)
  e5d6d4:	10c00a17 	ldw	r3,40(r2)
  e5d6d8:	e0bffb17 	ldw	r2,-20(fp)
  e5d6dc:	1009883a 	mov	r4,r2
  e5d6e0:	e0bffe17 	ldw	r2,-8(fp)
  e5d6e4:	1885883a 	add	r2,r3,r2
  e5d6e8:	10800e04 	addi	r2,r2,56
  e5d6ec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  e5d6f0:	e0bffe17 	ldw	r2,-8(fp)
  e5d6f4:	10800a17 	ldw	r2,40(r2)
  e5d6f8:	10800044 	addi	r2,r2,1
  e5d6fc:	10c1ffcc 	andi	r3,r2,2047
  e5d700:	e0bffe17 	ldw	r2,-8(fp)
  e5d704:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  e5d708:	003fe106 	br	e5d690 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  e5d70c:	e0bffb17 	ldw	r2,-20(fp)
  e5d710:	10bfffec 	andhi	r2,r2,65535
  e5d714:	1005003a 	cmpeq	r2,r2,zero
  e5d718:	1000101e 	bne	r2,zero,e5d75c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  e5d71c:	e0bffe17 	ldw	r2,-8(fp)
  e5d720:	10c00817 	ldw	r3,32(r2)
  e5d724:	00bfff84 	movi	r2,-2
  e5d728:	1886703a 	and	r3,r3,r2
  e5d72c:	e0bffe17 	ldw	r2,-8(fp)
  e5d730:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  e5d734:	e0bffd17 	ldw	r2,-12(fp)
  e5d738:	11000104 	addi	r4,r2,4
  e5d73c:	e0bffe17 	ldw	r2,-8(fp)
  e5d740:	10800817 	ldw	r2,32(r2)
  e5d744:	1007883a 	mov	r3,r2
  e5d748:	2005883a 	mov	r2,r4
  e5d74c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  e5d750:	e0bffd17 	ldw	r2,-12(fp)
  e5d754:	10800104 	addi	r2,r2,4
  e5d758:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  e5d75c:	e0bffc17 	ldw	r2,-16(fp)
  e5d760:	1080800c 	andi	r2,r2,512
  e5d764:	1005003a 	cmpeq	r2,r2,zero
  e5d768:	103fbb1e 	bne	r2,zero,e5d658 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  e5d76c:	e0bffc17 	ldw	r2,-16(fp)
  e5d770:	10bfffec 	andhi	r2,r2,65535
  e5d774:	1004d43a 	srli	r2,r2,16
  e5d778:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  e5d77c:	00001506 	br	e5d7d4 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  e5d780:	e13ffd17 	ldw	r4,-12(fp)
  e5d784:	e0bffe17 	ldw	r2,-8(fp)
  e5d788:	10c00d17 	ldw	r3,52(r2)
  e5d78c:	e0bffe17 	ldw	r2,-8(fp)
  e5d790:	1885883a 	add	r2,r3,r2
  e5d794:	10820e04 	addi	r2,r2,2104
  e5d798:	10800003 	ldbu	r2,0(r2)
  e5d79c:	10c03fcc 	andi	r3,r2,255
  e5d7a0:	18c0201c 	xori	r3,r3,128
  e5d7a4:	18ffe004 	addi	r3,r3,-128
  e5d7a8:	2005883a 	mov	r2,r4
  e5d7ac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  e5d7b0:	e0bffe17 	ldw	r2,-8(fp)
  e5d7b4:	10800d17 	ldw	r2,52(r2)
  e5d7b8:	10800044 	addi	r2,r2,1
  e5d7bc:	10c1ffcc 	andi	r3,r2,2047
  e5d7c0:	e0bffe17 	ldw	r2,-8(fp)
  e5d7c4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  e5d7c8:	e0bff917 	ldw	r2,-28(fp)
  e5d7cc:	10bfffc4 	addi	r2,r2,-1
  e5d7d0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  e5d7d4:	e0bff917 	ldw	r2,-28(fp)
  e5d7d8:	1005003a 	cmpeq	r2,r2,zero
  e5d7dc:	1000051e 	bne	r2,zero,e5d7f4 <altera_avalon_jtag_uart_irq+0x1c4>
  e5d7e0:	e0bffe17 	ldw	r2,-8(fp)
  e5d7e4:	10c00d17 	ldw	r3,52(r2)
  e5d7e8:	e0bffe17 	ldw	r2,-8(fp)
  e5d7ec:	10800c17 	ldw	r2,48(r2)
  e5d7f0:	18bfe31e 	bne	r3,r2,e5d780 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  e5d7f4:	e0bff917 	ldw	r2,-28(fp)
  e5d7f8:	1005003a 	cmpeq	r2,r2,zero
  e5d7fc:	103f961e 	bne	r2,zero,e5d658 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  e5d800:	e0bffe17 	ldw	r2,-8(fp)
  e5d804:	10c00817 	ldw	r3,32(r2)
  e5d808:	00bfff44 	movi	r2,-3
  e5d80c:	1886703a 	and	r3,r3,r2
  e5d810:	e0bffe17 	ldw	r2,-8(fp)
  e5d814:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  e5d818:	e0bffe17 	ldw	r2,-8(fp)
  e5d81c:	10800017 	ldw	r2,0(r2)
  e5d820:	11000104 	addi	r4,r2,4
  e5d824:	e0bffe17 	ldw	r2,-8(fp)
  e5d828:	10800817 	ldw	r2,32(r2)
  e5d82c:	1007883a 	mov	r3,r2
  e5d830:	2005883a 	mov	r2,r4
  e5d834:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  e5d838:	e0bffd17 	ldw	r2,-12(fp)
  e5d83c:	10800104 	addi	r2,r2,4
  e5d840:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  e5d844:	003f8406 	br	e5d658 <altera_avalon_jtag_uart_irq+0x28>
}
  e5d848:	e037883a 	mov	sp,fp
  e5d84c:	df000017 	ldw	fp,0(sp)
  e5d850:	dec00104 	addi	sp,sp,4
  e5d854:	f800283a 	ret

00e5d858 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  e5d858:	defffc04 	addi	sp,sp,-16
  e5d85c:	df000315 	stw	fp,12(sp)
  e5d860:	df000304 	addi	fp,sp,12
  e5d864:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  e5d868:	e0bfff17 	ldw	r2,-4(fp)
  e5d86c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  e5d870:	e0bffe17 	ldw	r2,-8(fp)
  e5d874:	10800017 	ldw	r2,0(r2)
  e5d878:	10800104 	addi	r2,r2,4
  e5d87c:	10800037 	ldwio	r2,0(r2)
  e5d880:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  e5d884:	e0bffd17 	ldw	r2,-12(fp)
  e5d888:	1081000c 	andi	r2,r2,1024
  e5d88c:	1005003a 	cmpeq	r2,r2,zero
  e5d890:	10000c1e 	bne	r2,zero,e5d8c4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  e5d894:	e0bffe17 	ldw	r2,-8(fp)
  e5d898:	10800017 	ldw	r2,0(r2)
  e5d89c:	11000104 	addi	r4,r2,4
  e5d8a0:	e0bffe17 	ldw	r2,-8(fp)
  e5d8a4:	10800817 	ldw	r2,32(r2)
  e5d8a8:	10810014 	ori	r2,r2,1024
  e5d8ac:	1007883a 	mov	r3,r2
  e5d8b0:	2005883a 	mov	r2,r4
  e5d8b4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  e5d8b8:	e0bffe17 	ldw	r2,-8(fp)
  e5d8bc:	10000915 	stw	zero,36(r2)
  e5d8c0:	00000a06 	br	e5d8ec <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  e5d8c4:	e0bffe17 	ldw	r2,-8(fp)
  e5d8c8:	10c00917 	ldw	r3,36(r2)
  e5d8cc:	00a00034 	movhi	r2,32768
  e5d8d0:	10bfff04 	addi	r2,r2,-4
  e5d8d4:	10c00536 	bltu	r2,r3,e5d8ec <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  e5d8d8:	e0bffe17 	ldw	r2,-8(fp)
  e5d8dc:	10800917 	ldw	r2,36(r2)
  e5d8e0:	10c00044 	addi	r3,r2,1
  e5d8e4:	e0bffe17 	ldw	r2,-8(fp)
  e5d8e8:	10c00915 	stw	r3,36(r2)
  e5d8ec:	008039b4 	movhi	r2,230
  e5d8f0:	1093b104 	addi	r2,r2,20164
  e5d8f4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  e5d8f8:	e037883a 	mov	sp,fp
  e5d8fc:	df000017 	ldw	fp,0(sp)
  e5d900:	dec00104 	addi	sp,sp,4
  e5d904:	f800283a 	ret

00e5d908 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  e5d908:	defffc04 	addi	sp,sp,-16
  e5d90c:	df000315 	stw	fp,12(sp)
  e5d910:	df000304 	addi	fp,sp,12
  e5d914:	e13ffd15 	stw	r4,-12(fp)
  e5d918:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  e5d91c:	00000706 	br	e5d93c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  e5d920:	e0bffe17 	ldw	r2,-8(fp)
  e5d924:	1090000c 	andi	r2,r2,16384
  e5d928:	1005003a 	cmpeq	r2,r2,zero
  e5d92c:	1000031e 	bne	r2,zero,e5d93c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  e5d930:	00bffd44 	movi	r2,-11
  e5d934:	e0bfff15 	stw	r2,-4(fp)
  e5d938:	00000b06 	br	e5d968 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  e5d93c:	e0bffd17 	ldw	r2,-12(fp)
  e5d940:	10c00d17 	ldw	r3,52(r2)
  e5d944:	e0bffd17 	ldw	r2,-12(fp)
  e5d948:	10800c17 	ldw	r2,48(r2)
  e5d94c:	18800526 	beq	r3,r2,e5d964 <altera_avalon_jtag_uart_close+0x5c>
  e5d950:	e0bffd17 	ldw	r2,-12(fp)
  e5d954:	10c00917 	ldw	r3,36(r2)
  e5d958:	e0bffd17 	ldw	r2,-12(fp)
  e5d95c:	10800117 	ldw	r2,4(r2)
  e5d960:	18bfef36 	bltu	r3,r2,e5d920 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  e5d964:	e03fff15 	stw	zero,-4(fp)
  e5d968:	e0bfff17 	ldw	r2,-4(fp)
}
  e5d96c:	e037883a 	mov	sp,fp
  e5d970:	df000017 	ldw	fp,0(sp)
  e5d974:	dec00104 	addi	sp,sp,4
  e5d978:	f800283a 	ret

00e5d97c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  e5d97c:	defff804 	addi	sp,sp,-32
  e5d980:	df000715 	stw	fp,28(sp)
  e5d984:	df000704 	addi	fp,sp,28
  e5d988:	e13ffb15 	stw	r4,-20(fp)
  e5d98c:	e17ffc15 	stw	r5,-16(fp)
  e5d990:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  e5d994:	00bff9c4 	movi	r2,-25
  e5d998:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  e5d99c:	e0bffc17 	ldw	r2,-16(fp)
  e5d9a0:	e0bfff15 	stw	r2,-4(fp)
  e5d9a4:	e0ffff17 	ldw	r3,-4(fp)
  e5d9a8:	189a8060 	cmpeqi	r2,r3,27137
  e5d9ac:	1000041e 	bne	r2,zero,e5d9c0 <altera_avalon_jtag_uart_ioctl+0x44>
  e5d9b0:	e0ffff17 	ldw	r3,-4(fp)
  e5d9b4:	189a80a0 	cmpeqi	r2,r3,27138
  e5d9b8:	10001b1e 	bne	r2,zero,e5da28 <altera_avalon_jtag_uart_ioctl+0xac>
  e5d9bc:	00002706 	br	e5da5c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  e5d9c0:	e0bffb17 	ldw	r2,-20(fp)
  e5d9c4:	10c00117 	ldw	r3,4(r2)
  e5d9c8:	00a00034 	movhi	r2,32768
  e5d9cc:	10bfffc4 	addi	r2,r2,-1
  e5d9d0:	18802226 	beq	r3,r2,e5da5c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  e5d9d4:	e0bffd17 	ldw	r2,-12(fp)
  e5d9d8:	10800017 	ldw	r2,0(r2)
  e5d9dc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  e5d9e0:	e0bff917 	ldw	r2,-28(fp)
  e5d9e4:	10800090 	cmplti	r2,r2,2
  e5d9e8:	1000071e 	bne	r2,zero,e5da08 <altera_avalon_jtag_uart_ioctl+0x8c>
  e5d9ec:	e0fff917 	ldw	r3,-28(fp)
  e5d9f0:	00a00034 	movhi	r2,32768
  e5d9f4:	10bfffc4 	addi	r2,r2,-1
  e5d9f8:	18800326 	beq	r3,r2,e5da08 <altera_avalon_jtag_uart_ioctl+0x8c>
  e5d9fc:	e0bff917 	ldw	r2,-28(fp)
  e5da00:	e0bffe15 	stw	r2,-8(fp)
  e5da04:	00000306 	br	e5da14 <altera_avalon_jtag_uart_ioctl+0x98>
  e5da08:	00e00034 	movhi	r3,32768
  e5da0c:	18ffff84 	addi	r3,r3,-2
  e5da10:	e0fffe15 	stw	r3,-8(fp)
  e5da14:	e0bffb17 	ldw	r2,-20(fp)
  e5da18:	e0fffe17 	ldw	r3,-8(fp)
  e5da1c:	10c00115 	stw	r3,4(r2)
      rc = 0;
  e5da20:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  e5da24:	00000d06 	br	e5da5c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  e5da28:	e0bffb17 	ldw	r2,-20(fp)
  e5da2c:	10c00117 	ldw	r3,4(r2)
  e5da30:	00a00034 	movhi	r2,32768
  e5da34:	10bfffc4 	addi	r2,r2,-1
  e5da38:	18800826 	beq	r3,r2,e5da5c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  e5da3c:	e13ffd17 	ldw	r4,-12(fp)
  e5da40:	e0bffb17 	ldw	r2,-20(fp)
  e5da44:	10c00917 	ldw	r3,36(r2)
  e5da48:	e0bffb17 	ldw	r2,-20(fp)
  e5da4c:	10800117 	ldw	r2,4(r2)
  e5da50:	1885803a 	cmpltu	r2,r3,r2
  e5da54:	20800015 	stw	r2,0(r4)
      rc = 0;
  e5da58:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  e5da5c:	e0bffa17 	ldw	r2,-24(fp)
}
  e5da60:	e037883a 	mov	sp,fp
  e5da64:	df000017 	ldw	fp,0(sp)
  e5da68:	dec00104 	addi	sp,sp,4
  e5da6c:	f800283a 	ret

00e5da70 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  e5da70:	defff204 	addi	sp,sp,-56
  e5da74:	dfc00d15 	stw	ra,52(sp)
  e5da78:	df000c15 	stw	fp,48(sp)
  e5da7c:	df000c04 	addi	fp,sp,48
  e5da80:	e13ffb15 	stw	r4,-20(fp)
  e5da84:	e17ffc15 	stw	r5,-16(fp)
  e5da88:	e1bffd15 	stw	r6,-12(fp)
  e5da8c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  e5da90:	e0bffc17 	ldw	r2,-16(fp)
  e5da94:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  e5da98:	00004806 	br	e5dbbc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  e5da9c:	e0bffb17 	ldw	r2,-20(fp)
  e5daa0:	10800a17 	ldw	r2,40(r2)
  e5daa4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  e5daa8:	e0bffb17 	ldw	r2,-20(fp)
  e5daac:	10800b17 	ldw	r2,44(r2)
  e5dab0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  e5dab4:	e0fff717 	ldw	r3,-36(fp)
  e5dab8:	e0bff617 	ldw	r2,-40(fp)
  e5dabc:	18800536 	bltu	r3,r2,e5dad4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  e5dac0:	e0bff717 	ldw	r2,-36(fp)
  e5dac4:	e0fff617 	ldw	r3,-40(fp)
  e5dac8:	10c5c83a 	sub	r2,r2,r3
  e5dacc:	e0bff815 	stw	r2,-32(fp)
  e5dad0:	00000406 	br	e5dae4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  e5dad4:	00820004 	movi	r2,2048
  e5dad8:	e0fff617 	ldw	r3,-40(fp)
  e5dadc:	10c5c83a 	sub	r2,r2,r3
  e5dae0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  e5dae4:	e0bff817 	ldw	r2,-32(fp)
  e5dae8:	1005003a 	cmpeq	r2,r2,zero
  e5daec:	10001f1e 	bne	r2,zero,e5db6c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  e5daf0:	e0fffd17 	ldw	r3,-12(fp)
  e5daf4:	e0bff817 	ldw	r2,-32(fp)
  e5daf8:	1880022e 	bgeu	r3,r2,e5db04 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  e5dafc:	e0bffd17 	ldw	r2,-12(fp)
  e5db00:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  e5db04:	e0bffb17 	ldw	r2,-20(fp)
  e5db08:	10c00e04 	addi	r3,r2,56
  e5db0c:	e0bff617 	ldw	r2,-40(fp)
  e5db10:	1887883a 	add	r3,r3,r2
  e5db14:	e0bffa17 	ldw	r2,-24(fp)
  e5db18:	1009883a 	mov	r4,r2
  e5db1c:	180b883a 	mov	r5,r3
  e5db20:	e1bff817 	ldw	r6,-32(fp)
  e5db24:	0e590c80 	call	e590c8 <memcpy>
      ptr   += n;
  e5db28:	e0fff817 	ldw	r3,-32(fp)
  e5db2c:	e0bffa17 	ldw	r2,-24(fp)
  e5db30:	10c5883a 	add	r2,r2,r3
  e5db34:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  e5db38:	e0fffd17 	ldw	r3,-12(fp)
  e5db3c:	e0bff817 	ldw	r2,-32(fp)
  e5db40:	1885c83a 	sub	r2,r3,r2
  e5db44:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  e5db48:	e0fff617 	ldw	r3,-40(fp)
  e5db4c:	e0bff817 	ldw	r2,-32(fp)
  e5db50:	1885883a 	add	r2,r3,r2
  e5db54:	10c1ffcc 	andi	r3,r2,2047
  e5db58:	e0bffb17 	ldw	r2,-20(fp)
  e5db5c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  e5db60:	e0bffd17 	ldw	r2,-12(fp)
  e5db64:	10800048 	cmpgei	r2,r2,1
  e5db68:	103fcc1e 	bne	r2,zero,e5da9c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  e5db6c:	e0fffa17 	ldw	r3,-24(fp)
  e5db70:	e0bffc17 	ldw	r2,-16(fp)
  e5db74:	1880141e 	bne	r3,r2,e5dbc8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  e5db78:	e0bffe17 	ldw	r2,-8(fp)
  e5db7c:	1090000c 	andi	r2,r2,16384
  e5db80:	1004c03a 	cmpne	r2,r2,zero
  e5db84:	1000101e 	bne	r2,zero,e5dbc8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  e5db88:	e0bffb17 	ldw	r2,-20(fp)
  e5db8c:	10c00a17 	ldw	r3,40(r2)
  e5db90:	e0bff717 	ldw	r2,-36(fp)
  e5db94:	1880051e 	bne	r3,r2,e5dbac <altera_avalon_jtag_uart_read+0x13c>
  e5db98:	e0bffb17 	ldw	r2,-20(fp)
  e5db9c:	10c00917 	ldw	r3,36(r2)
  e5dba0:	e0bffb17 	ldw	r2,-20(fp)
  e5dba4:	10800117 	ldw	r2,4(r2)
  e5dba8:	18bff736 	bltu	r3,r2,e5db88 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  e5dbac:	e0bffb17 	ldw	r2,-20(fp)
  e5dbb0:	10c00a17 	ldw	r3,40(r2)
  e5dbb4:	e0bff717 	ldw	r2,-36(fp)
  e5dbb8:	18800326 	beq	r3,r2,e5dbc8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  e5dbbc:	e0bffd17 	ldw	r2,-12(fp)
  e5dbc0:	10800048 	cmpgei	r2,r2,1
  e5dbc4:	103fb51e 	bne	r2,zero,e5da9c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  e5dbc8:	e0fffa17 	ldw	r3,-24(fp)
  e5dbcc:	e0bffc17 	ldw	r2,-16(fp)
  e5dbd0:	18801926 	beq	r3,r2,e5dc38 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  e5dbd4:	0005303a 	rdctl	r2,status
  e5dbd8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  e5dbdc:	e0fff517 	ldw	r3,-44(fp)
  e5dbe0:	00bfff84 	movi	r2,-2
  e5dbe4:	1884703a 	and	r2,r3,r2
  e5dbe8:	1001703a 	wrctl	status,r2
  
  return context;
  e5dbec:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  e5dbf0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  e5dbf4:	e0bffb17 	ldw	r2,-20(fp)
  e5dbf8:	10800817 	ldw	r2,32(r2)
  e5dbfc:	10c00054 	ori	r3,r2,1
  e5dc00:	e0bffb17 	ldw	r2,-20(fp)
  e5dc04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  e5dc08:	e0bffb17 	ldw	r2,-20(fp)
  e5dc0c:	10800017 	ldw	r2,0(r2)
  e5dc10:	11000104 	addi	r4,r2,4
  e5dc14:	e0bffb17 	ldw	r2,-20(fp)
  e5dc18:	10800817 	ldw	r2,32(r2)
  e5dc1c:	1007883a 	mov	r3,r2
  e5dc20:	2005883a 	mov	r2,r4
  e5dc24:	10c00035 	stwio	r3,0(r2)
  e5dc28:	e0bff917 	ldw	r2,-28(fp)
  e5dc2c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  e5dc30:	e0bff417 	ldw	r2,-48(fp)
  e5dc34:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  e5dc38:	e0fffa17 	ldw	r3,-24(fp)
  e5dc3c:	e0bffc17 	ldw	r2,-16(fp)
  e5dc40:	18800526 	beq	r3,r2,e5dc58 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  e5dc44:	e0fffa17 	ldw	r3,-24(fp)
  e5dc48:	e0bffc17 	ldw	r2,-16(fp)
  e5dc4c:	1887c83a 	sub	r3,r3,r2
  e5dc50:	e0ffff15 	stw	r3,-4(fp)
  e5dc54:	00000906 	br	e5dc7c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  e5dc58:	e0bffe17 	ldw	r2,-8(fp)
  e5dc5c:	1090000c 	andi	r2,r2,16384
  e5dc60:	1005003a 	cmpeq	r2,r2,zero
  e5dc64:	1000031e 	bne	r2,zero,e5dc74 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  e5dc68:	00bffd44 	movi	r2,-11
  e5dc6c:	e0bfff15 	stw	r2,-4(fp)
  e5dc70:	00000206 	br	e5dc7c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  e5dc74:	00bffec4 	movi	r2,-5
  e5dc78:	e0bfff15 	stw	r2,-4(fp)
  e5dc7c:	e0bfff17 	ldw	r2,-4(fp)
}
  e5dc80:	e037883a 	mov	sp,fp
  e5dc84:	dfc00117 	ldw	ra,4(sp)
  e5dc88:	df000017 	ldw	fp,0(sp)
  e5dc8c:	dec00204 	addi	sp,sp,8
  e5dc90:	f800283a 	ret

00e5dc94 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  e5dc94:	defff204 	addi	sp,sp,-56
  e5dc98:	dfc00d15 	stw	ra,52(sp)
  e5dc9c:	df000c15 	stw	fp,48(sp)
  e5dca0:	df000c04 	addi	fp,sp,48
  e5dca4:	e13ffb15 	stw	r4,-20(fp)
  e5dca8:	e17ffc15 	stw	r5,-16(fp)
  e5dcac:	e1bffd15 	stw	r6,-12(fp)
  e5dcb0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  e5dcb4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  e5dcb8:	e0bffc17 	ldw	r2,-16(fp)
  e5dcbc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  e5dcc0:	00003a06 	br	e5ddac <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  e5dcc4:	e0bffb17 	ldw	r2,-20(fp)
  e5dcc8:	10800c17 	ldw	r2,48(r2)
  e5dccc:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  e5dcd0:	e0bffb17 	ldw	r2,-20(fp)
  e5dcd4:	10800d17 	ldw	r2,52(r2)
  e5dcd8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  e5dcdc:	e0fffa17 	ldw	r3,-24(fp)
  e5dce0:	e0bff917 	ldw	r2,-28(fp)
  e5dce4:	1880062e 	bgeu	r3,r2,e5dd00 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  e5dce8:	e0fff917 	ldw	r3,-28(fp)
  e5dcec:	e0bffa17 	ldw	r2,-24(fp)
  e5dcf0:	1885c83a 	sub	r2,r3,r2
  e5dcf4:	10bfffc4 	addi	r2,r2,-1
  e5dcf8:	e0bff815 	stw	r2,-32(fp)
  e5dcfc:	00000c06 	br	e5dd30 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  e5dd00:	e0bff917 	ldw	r2,-28(fp)
  e5dd04:	1005003a 	cmpeq	r2,r2,zero
  e5dd08:	1000051e 	bne	r2,zero,e5dd20 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  e5dd0c:	00820004 	movi	r2,2048
  e5dd10:	e0fffa17 	ldw	r3,-24(fp)
  e5dd14:	10c5c83a 	sub	r2,r2,r3
  e5dd18:	e0bff815 	stw	r2,-32(fp)
  e5dd1c:	00000406 	br	e5dd30 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  e5dd20:	0081ffc4 	movi	r2,2047
  e5dd24:	e0fffa17 	ldw	r3,-24(fp)
  e5dd28:	10c5c83a 	sub	r2,r2,r3
  e5dd2c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  e5dd30:	e0bff817 	ldw	r2,-32(fp)
  e5dd34:	1005003a 	cmpeq	r2,r2,zero
  e5dd38:	10001f1e 	bne	r2,zero,e5ddb8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  e5dd3c:	e0fffd17 	ldw	r3,-12(fp)
  e5dd40:	e0bff817 	ldw	r2,-32(fp)
  e5dd44:	1880022e 	bgeu	r3,r2,e5dd50 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  e5dd48:	e0bffd17 	ldw	r2,-12(fp)
  e5dd4c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  e5dd50:	e0bffb17 	ldw	r2,-20(fp)
  e5dd54:	10c20e04 	addi	r3,r2,2104
  e5dd58:	e0bffa17 	ldw	r2,-24(fp)
  e5dd5c:	1885883a 	add	r2,r3,r2
  e5dd60:	e0fffc17 	ldw	r3,-16(fp)
  e5dd64:	1009883a 	mov	r4,r2
  e5dd68:	180b883a 	mov	r5,r3
  e5dd6c:	e1bff817 	ldw	r6,-32(fp)
  e5dd70:	0e590c80 	call	e590c8 <memcpy>
      ptr   += n;
  e5dd74:	e0fff817 	ldw	r3,-32(fp)
  e5dd78:	e0bffc17 	ldw	r2,-16(fp)
  e5dd7c:	10c5883a 	add	r2,r2,r3
  e5dd80:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  e5dd84:	e0fffd17 	ldw	r3,-12(fp)
  e5dd88:	e0bff817 	ldw	r2,-32(fp)
  e5dd8c:	1885c83a 	sub	r2,r3,r2
  e5dd90:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  e5dd94:	e0fffa17 	ldw	r3,-24(fp)
  e5dd98:	e0bff817 	ldw	r2,-32(fp)
  e5dd9c:	1885883a 	add	r2,r3,r2
  e5dda0:	10c1ffcc 	andi	r3,r2,2047
  e5dda4:	e0bffb17 	ldw	r2,-20(fp)
  e5dda8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  e5ddac:	e0bffd17 	ldw	r2,-12(fp)
  e5ddb0:	10800048 	cmpgei	r2,r2,1
  e5ddb4:	103fc31e 	bne	r2,zero,e5dcc4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  e5ddb8:	0005303a 	rdctl	r2,status
  e5ddbc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  e5ddc0:	e0fff517 	ldw	r3,-44(fp)
  e5ddc4:	00bfff84 	movi	r2,-2
  e5ddc8:	1884703a 	and	r2,r3,r2
  e5ddcc:	1001703a 	wrctl	status,r2
  
  return context;
  e5ddd0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  e5ddd4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  e5ddd8:	e0bffb17 	ldw	r2,-20(fp)
  e5dddc:	10800817 	ldw	r2,32(r2)
  e5dde0:	10c00094 	ori	r3,r2,2
  e5dde4:	e0bffb17 	ldw	r2,-20(fp)
  e5dde8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  e5ddec:	e0bffb17 	ldw	r2,-20(fp)
  e5ddf0:	10800017 	ldw	r2,0(r2)
  e5ddf4:	11000104 	addi	r4,r2,4
  e5ddf8:	e0bffb17 	ldw	r2,-20(fp)
  e5ddfc:	10800817 	ldw	r2,32(r2)
  e5de00:	1007883a 	mov	r3,r2
  e5de04:	2005883a 	mov	r2,r4
  e5de08:	10c00035 	stwio	r3,0(r2)
  e5de0c:	e0bff717 	ldw	r2,-36(fp)
  e5de10:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  e5de14:	e0bff417 	ldw	r2,-48(fp)
  e5de18:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  e5de1c:	e0bffd17 	ldw	r2,-12(fp)
  e5de20:	10800050 	cmplti	r2,r2,1
  e5de24:	1000111e 	bne	r2,zero,e5de6c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  e5de28:	e0bffe17 	ldw	r2,-8(fp)
  e5de2c:	1090000c 	andi	r2,r2,16384
  e5de30:	1004c03a 	cmpne	r2,r2,zero
  e5de34:	1000101e 	bne	r2,zero,e5de78 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  e5de38:	e0bffb17 	ldw	r2,-20(fp)
  e5de3c:	10c00d17 	ldw	r3,52(r2)
  e5de40:	e0bff917 	ldw	r2,-28(fp)
  e5de44:	1880051e 	bne	r3,r2,e5de5c <altera_avalon_jtag_uart_write+0x1c8>
  e5de48:	e0bffb17 	ldw	r2,-20(fp)
  e5de4c:	10c00917 	ldw	r3,36(r2)
  e5de50:	e0bffb17 	ldw	r2,-20(fp)
  e5de54:	10800117 	ldw	r2,4(r2)
  e5de58:	18bff736 	bltu	r3,r2,e5de38 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  e5de5c:	e0bffb17 	ldw	r2,-20(fp)
  e5de60:	10c00d17 	ldw	r3,52(r2)
  e5de64:	e0bff917 	ldw	r2,-28(fp)
  e5de68:	18800326 	beq	r3,r2,e5de78 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  e5de6c:	e0bffd17 	ldw	r2,-12(fp)
  e5de70:	10800048 	cmpgei	r2,r2,1
  e5de74:	103fcd1e 	bne	r2,zero,e5ddac <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  e5de78:	e0fffc17 	ldw	r3,-16(fp)
  e5de7c:	e0bff617 	ldw	r2,-40(fp)
  e5de80:	18800526 	beq	r3,r2,e5de98 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  e5de84:	e0fffc17 	ldw	r3,-16(fp)
  e5de88:	e0bff617 	ldw	r2,-40(fp)
  e5de8c:	1887c83a 	sub	r3,r3,r2
  e5de90:	e0ffff15 	stw	r3,-4(fp)
  e5de94:	00000906 	br	e5debc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  e5de98:	e0bffe17 	ldw	r2,-8(fp)
  e5de9c:	1090000c 	andi	r2,r2,16384
  e5dea0:	1005003a 	cmpeq	r2,r2,zero
  e5dea4:	1000031e 	bne	r2,zero,e5deb4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  e5dea8:	00bffd44 	movi	r2,-11
  e5deac:	e0bfff15 	stw	r2,-4(fp)
  e5deb0:	00000206 	br	e5debc <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  e5deb4:	00bffec4 	movi	r2,-5
  e5deb8:	e0bfff15 	stw	r2,-4(fp)
  e5debc:	e0bfff17 	ldw	r2,-4(fp)
}
  e5dec0:	e037883a 	mov	sp,fp
  e5dec4:	dfc00117 	ldw	ra,4(sp)
  e5dec8:	df000017 	ldw	fp,0(sp)
  e5decc:	dec00204 	addi	sp,sp,8
  e5ded0:	f800283a 	ret

00e5ded4 <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
  e5ded4:	defffa04 	addi	sp,sp,-24
  e5ded8:	dfc00515 	stw	ra,20(sp)
  e5dedc:	df000415 	stw	fp,16(sp)
  e5dee0:	df000404 	addi	fp,sp,16
  e5dee4:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
  e5dee8:	e0bfff17 	ldw	r2,-4(fp)
  e5deec:	11000704 	addi	r4,r2,28
  e5def0:	0e5e02c0 	call	e5e02c <alt_avalon_mutex_reg>
  e5def4:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
  e5def8:	e0bffe17 	ldw	r2,-8(fp)
  e5defc:	1004c03a 	cmpne	r2,r2,zero
  e5df00:	1000041e 	bne	r2,zero,e5df14 <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
  e5df04:	e0bfff17 	ldw	r2,-4(fp)
  e5df08:	11000b04 	addi	r4,r2,44
  e5df0c:	0e5e02c0 	call	e5e02c <alt_avalon_mutex_reg>
  e5df10:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  e5df14:	e0bffe17 	ldw	r2,-8(fp)
  e5df18:	1004c03a 	cmpne	r2,r2,zero
  e5df1c:	1000041e 	bne	r2,zero,e5df30 <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
  e5df20:	e13fff17 	ldw	r4,-4(fp)
  e5df24:	d1601704 	addi	r5,gp,-32676
  e5df28:	0e5ff8c0 	call	e5ff8c <alt_dev_llist_insert>
  e5df2c:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  e5df30:	e0bffe17 	ldw	r2,-8(fp)
  e5df34:	1004c03a 	cmpne	r2,r2,zero
  e5df38:	1000361e 	bne	r2,zero,e5e014 <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
  e5df3c:	e0bfff17 	ldw	r2,-4(fp)
  e5df40:	11000917 	ldw	r4,36(r2)
  e5df44:	0e5e4780 	call	e5e478 <altera_avalon_mutex_open>
  e5df48:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
  e5df4c:	e0bffd17 	ldw	r2,-12(fp)
  e5df50:	1005003a 	cmpeq	r2,r2,zero
  e5df54:	10002f1e 	bne	r2,zero,e5e014 <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
  e5df58:	e0bfff17 	ldw	r2,-4(fp)
  e5df5c:	11000d17 	ldw	r4,52(r2)
  e5df60:	0e5e4780 	call	e5e478 <altera_avalon_mutex_open>
  e5df64:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
  e5df68:	e0bffc17 	ldw	r2,-16(fp)
  e5df6c:	1005003a 	cmpeq	r2,r2,zero
  e5df70:	1000281e 	bne	r2,zero,e5e014 <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  e5df74:	00000f06 	br	e5dfb4 <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
  e5df78:	e13ffd17 	ldw	r4,-12(fp)
  e5df7c:	01400044 	movi	r5,1
  e5df80:	0e5e5900 	call	e5e590 <altera_avalon_mutex_trylock>
  e5df84:	1004c03a 	cmpne	r2,r2,zero
  e5df88:	10000a1e 	bne	r2,zero,e5dfb4 <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
  e5df8c:	e0bfff17 	ldw	r2,-4(fp)
  e5df90:	10800317 	ldw	r2,12(r2)
  e5df94:	1009883a 	mov	r4,r2
  e5df98:	e0bfff17 	ldw	r2,-4(fp)
  e5df9c:	10800517 	ldw	r2,20(r2)
  e5dfa0:	1007883a 	mov	r3,r2
  e5dfa4:	2005883a 	mov	r2,r4
  e5dfa8:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
  e5dfac:	e13ffd17 	ldw	r4,-12(fp)
  e5dfb0:	0e5e5d00 	call	e5e5d0 <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  e5dfb4:	e13ffd17 	ldw	r4,-12(fp)
  e5dfb8:	0e5e6a80 	call	e5e6a8 <altera_avalon_mutex_first_lock>
  e5dfbc:	1004c03a 	cmpne	r2,r2,zero
  e5dfc0:	103fed1e 	bne	r2,zero,e5df78 <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  e5dfc4:	00000f06 	br	e5e004 <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
  e5dfc8:	e13ffc17 	ldw	r4,-16(fp)
  e5dfcc:	01400044 	movi	r5,1
  e5dfd0:	0e5e5900 	call	e5e590 <altera_avalon_mutex_trylock>
  e5dfd4:	1004c03a 	cmpne	r2,r2,zero
  e5dfd8:	10000a1e 	bne	r2,zero,e5e004 <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
  e5dfdc:	e0bfff17 	ldw	r2,-4(fp)
  e5dfe0:	10800417 	ldw	r2,16(r2)
  e5dfe4:	1009883a 	mov	r4,r2
  e5dfe8:	e0bfff17 	ldw	r2,-4(fp)
  e5dfec:	10800517 	ldw	r2,20(r2)
  e5dff0:	1007883a 	mov	r3,r2
  e5dff4:	2005883a 	mov	r2,r4
  e5dff8:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
  e5dffc:	e13ffc17 	ldw	r4,-16(fp)
  e5e000:	0e5e5d00 	call	e5e5d0 <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  e5e004:	e13ffc17 	ldw	r4,-16(fp)
  e5e008:	0e5e6a80 	call	e5e6a8 <altera_avalon_mutex_first_lock>
  e5e00c:	1004c03a 	cmpne	r2,r2,zero
  e5e010:	103fed1e 	bne	r2,zero,e5dfc8 <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
  e5e014:	e0bffe17 	ldw	r2,-8(fp)
}
  e5e018:	e037883a 	mov	sp,fp
  e5e01c:	dfc00117 	ldw	ra,4(sp)
  e5e020:	df000017 	ldw	fp,0(sp)
  e5e024:	dec00204 	addi	sp,sp,8
  e5e028:	f800283a 	ret

00e5e02c <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
  e5e02c:	defffc04 	addi	sp,sp,-16
  e5e030:	dfc00315 	stw	ra,12(sp)
  e5e034:	df000215 	stw	fp,8(sp)
  e5e038:	df000204 	addi	fp,sp,8
  e5e03c:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  e5e040:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  e5e044:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
  e5e048:	e0bffe17 	ldw	r2,-8(fp)
  e5e04c:	1004c03a 	cmpne	r2,r2,zero
  e5e050:	1000061e 	bne	r2,zero,e5e06c <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
  e5e054:	e13fff17 	ldw	r4,-4(fp)
  e5e058:	014039b4 	movhi	r5,230
  e5e05c:	294caa04 	addi	r5,r5,12968
  e5e060:	0e5ff8c0 	call	e5ff8c <alt_dev_llist_insert>
  e5e064:	e0bffe15 	stw	r2,-8(fp)
  e5e068:	00000506 	br	e5e080 <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
  e5e06c:	0e5e0980 	call	e5e098 <alt_get_errno>
  e5e070:	00c00304 	movi	r3,12
  e5e074:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
  e5e078:	00bffd04 	movi	r2,-12
  e5e07c:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
  e5e080:	e0bffe17 	ldw	r2,-8(fp)
}
  e5e084:	e037883a 	mov	sp,fp
  e5e088:	dfc00117 	ldw	ra,4(sp)
  e5e08c:	df000017 	ldw	fp,0(sp)
  e5e090:	dec00204 	addi	sp,sp,8
  e5e094:	f800283a 	ret

00e5e098 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e5e098:	defffd04 	addi	sp,sp,-12
  e5e09c:	dfc00215 	stw	ra,8(sp)
  e5e0a0:	df000115 	stw	fp,4(sp)
  e5e0a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e5e0a8:	008039b4 	movhi	r2,230
  e5e0ac:	108ca604 	addi	r2,r2,12952
  e5e0b0:	10800017 	ldw	r2,0(r2)
  e5e0b4:	1005003a 	cmpeq	r2,r2,zero
  e5e0b8:	1000061e 	bne	r2,zero,e5e0d4 <alt_get_errno+0x3c>
  e5e0bc:	008039b4 	movhi	r2,230
  e5e0c0:	108ca604 	addi	r2,r2,12952
  e5e0c4:	10800017 	ldw	r2,0(r2)
  e5e0c8:	103ee83a 	callr	r2
  e5e0cc:	e0bfff15 	stw	r2,-4(fp)
  e5e0d0:	00000306 	br	e5e0e0 <alt_get_errno+0x48>
  e5e0d4:	008039b4 	movhi	r2,230
  e5e0d8:	1093ac04 	addi	r2,r2,20144
  e5e0dc:	e0bfff15 	stw	r2,-4(fp)
  e5e0e0:	e0bfff17 	ldw	r2,-4(fp)
}
  e5e0e4:	e037883a 	mov	sp,fp
  e5e0e8:	dfc00117 	ldw	ra,4(sp)
  e5e0ec:	df000017 	ldw	fp,0(sp)
  e5e0f0:	dec00204 	addi	sp,sp,8
  e5e0f4:	f800283a 	ret

00e5e0f8 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
  e5e0f8:	defffc04 	addi	sp,sp,-16
  e5e0fc:	dfc00315 	stw	ra,12(sp)
  e5e100:	df000215 	stw	fp,8(sp)
  e5e104:	df000204 	addi	fp,sp,8
  e5e108:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
  e5e10c:	e13fff17 	ldw	r4,-4(fp)
  e5e110:	d1601704 	addi	r5,gp,-32676
  e5e114:	0e601680 	call	e60168 <alt_find_dev>
  e5e118:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  e5e11c:	e0bffe17 	ldw	r2,-8(fp)
  e5e120:	1004c03a 	cmpne	r2,r2,zero
  e5e124:	1000041e 	bne	r2,zero,e5e138 <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  e5e128:	0e5e0980 	call	e5e098 <alt_get_errno>
  e5e12c:	1007883a 	mov	r3,r2
  e5e130:	008004c4 	movi	r2,19
  e5e134:	18800015 	stw	r2,0(r3)
  }

  return dev;
  e5e138:	e0bffe17 	ldw	r2,-8(fp)

}
  e5e13c:	e037883a 	mov	sp,fp
  e5e140:	dfc00117 	ldw	ra,4(sp)
  e5e144:	df000017 	ldw	fp,0(sp)
  e5e148:	dec00204 	addi	sp,sp,8
  e5e14c:	f800283a 	ret

00e5e150 <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
  e5e150:	defffe04 	addi	sp,sp,-8
  e5e154:	df000115 	stw	fp,4(sp)
  e5e158:	df000104 	addi	fp,sp,4
  e5e15c:	e13fff15 	stw	r4,-4(fp)
  return;
}
  e5e160:	e037883a 	mov	sp,fp
  e5e164:	df000017 	ldw	fp,0(sp)
  e5e168:	dec00104 	addi	sp,sp,4
  e5e16c:	f800283a 	ret

00e5e170 <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
  e5e170:	defff904 	addi	sp,sp,-28
  e5e174:	dfc00615 	stw	ra,24(sp)
  e5e178:	df000515 	stw	fp,20(sp)
  e5e17c:	df000504 	addi	fp,sp,20
  e5e180:	e13ffe15 	stw	r4,-8(fp)
  e5e184:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  e5e188:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
  e5e18c:	e0bffe17 	ldw	r2,-8(fp)
  e5e190:	11000704 	addi	r4,r2,28
  e5e194:	01400044 	movi	r5,1
  e5e198:	0e5e5500 	call	e5e550 <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
  e5e19c:	e0bffe17 	ldw	r2,-8(fp)
  e5e1a0:	10800317 	ldw	r2,12(r2)
  e5e1a4:	10800037 	ldwio	r2,0(r2)
  e5e1a8:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
  e5e1ac:	e13ffe17 	ldw	r4,-8(fp)
  e5e1b0:	e17ffc17 	ldw	r5,-16(fp)
  e5e1b4:	0e5e22c0 	call	e5e22c <alt_mailbox_increment_ptr>
  e5e1b8:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
  e5e1bc:	e0bffe17 	ldw	r2,-8(fp)
  e5e1c0:	10800417 	ldw	r2,16(r2)
  e5e1c4:	10800037 	ldwio	r2,0(r2)
  e5e1c8:	1007883a 	mov	r3,r2
  e5e1cc:	e0bffb17 	ldw	r2,-20(fp)
  e5e1d0:	1880061e 	bne	r3,r2,e5e1ec <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
  e5e1d4:	0e5e0980 	call	e5e098 <alt_get_errno>
  e5e1d8:	00c002c4 	movi	r3,11
  e5e1dc:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
  e5e1e0:	00bffd44 	movi	r2,-11
  e5e1e4:	e0bffd15 	stw	r2,-12(fp)
  e5e1e8:	00000706 	br	e5e208 <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
  e5e1ec:	e0bffc17 	ldw	r2,-16(fp)
  e5e1f0:	e0ffff17 	ldw	r3,-4(fp)
  e5e1f4:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
  e5e1f8:	e0bffe17 	ldw	r2,-8(fp)
  e5e1fc:	10800317 	ldw	r2,12(r2)
  e5e200:	e0fffb17 	ldw	r3,-20(fp)
  e5e204:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
  e5e208:	e0bffe17 	ldw	r2,-8(fp)
  e5e20c:	11000704 	addi	r4,r2,28
  e5e210:	0e5e5d00 	call	e5e5d0 <altera_avalon_mutex_unlock>

  return ret_code;
  e5e214:	e0bffd17 	ldw	r2,-12(fp)

}
  e5e218:	e037883a 	mov	sp,fp
  e5e21c:	dfc00117 	ldw	ra,4(sp)
  e5e220:	df000017 	ldw	fp,0(sp)
  e5e224:	dec00204 	addi	sp,sp,8
  e5e228:	f800283a 	ret

00e5e22c <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
  e5e22c:	defffd04 	addi	sp,sp,-12
  e5e230:	df000215 	stw	fp,8(sp)
  e5e234:	df000204 	addi	fp,sp,8
  e5e238:	e13ffe15 	stw	r4,-8(fp)
  e5e23c:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
  e5e240:	e0bfff17 	ldw	r2,-4(fp)
  e5e244:	10800104 	addi	r2,r2,4
  e5e248:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
  e5e24c:	e0bffe17 	ldw	r2,-8(fp)
  e5e250:	10c00617 	ldw	r3,24(r2)
  e5e254:	e0bfff17 	ldw	r2,-4(fp)
  e5e258:	1880032e 	bgeu	r3,r2,e5e268 <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
  e5e25c:	e0bffe17 	ldw	r2,-8(fp)
  e5e260:	10800517 	ldw	r2,20(r2)
  e5e264:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
  e5e268:	e0bfff17 	ldw	r2,-4(fp)
}
  e5e26c:	e037883a 	mov	sp,fp
  e5e270:	df000017 	ldw	fp,0(sp)
  e5e274:	dec00104 	addi	sp,sp,4
  e5e278:	f800283a 	ret

00e5e27c <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
  e5e27c:	defffa04 	addi	sp,sp,-24
  e5e280:	dfc00515 	stw	ra,20(sp)
  e5e284:	df000415 	stw	fp,16(sp)
  e5e288:	dc000315 	stw	r16,12(sp)
  e5e28c:	df000304 	addi	fp,sp,12
  e5e290:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  e5e294:	e0bfff17 	ldw	r2,-4(fp)
  e5e298:	11000b04 	addi	r4,r2,44
  e5e29c:	01400044 	movi	r5,1
  e5e2a0:	0e5e5500 	call	e5e550 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  e5e2a4:	e0bfff17 	ldw	r2,-4(fp)
  e5e2a8:	10800417 	ldw	r2,16(r2)
  e5e2ac:	10800037 	ldwio	r2,0(r2)
  e5e2b0:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
  e5e2b4:	e0bfff17 	ldw	r2,-4(fp)
  e5e2b8:	10800317 	ldw	r2,12(r2)
  e5e2bc:	10800037 	ldwio	r2,0(r2)
  e5e2c0:	1007883a 	mov	r3,r2
  e5e2c4:	e0bffd17 	ldw	r2,-12(fp)
  e5e2c8:	18bffa26 	beq	r3,r2,e5e2b4 <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
  e5e2cc:	e0bffd17 	ldw	r2,-12(fp)
  e5e2d0:	10800037 	ldwio	r2,0(r2)
  e5e2d4:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
  e5e2d8:	e0bfff17 	ldw	r2,-4(fp)
  e5e2dc:	10800417 	ldw	r2,16(r2)
  e5e2e0:	1021883a 	mov	r16,r2
  e5e2e4:	e13fff17 	ldw	r4,-4(fp)
  e5e2e8:	e17ffd17 	ldw	r5,-12(fp)
  e5e2ec:	0e5e22c0 	call	e5e22c <alt_mailbox_increment_ptr>
  e5e2f0:	1007883a 	mov	r3,r2
  e5e2f4:	8005883a 	mov	r2,r16
  e5e2f8:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
  e5e2fc:	e0bfff17 	ldw	r2,-4(fp)
  e5e300:	11000b04 	addi	r4,r2,44
  e5e304:	0e5e5d00 	call	e5e5d0 <altera_avalon_mutex_unlock>

  return msg;
  e5e308:	e0bffe17 	ldw	r2,-8(fp)

}
  e5e30c:	e037883a 	mov	sp,fp
  e5e310:	dfc00217 	ldw	ra,8(sp)
  e5e314:	df000117 	ldw	fp,4(sp)
  e5e318:	dc000017 	ldw	r16,0(sp)
  e5e31c:	dec00304 	addi	sp,sp,12
  e5e320:	f800283a 	ret

00e5e324 <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
  e5e324:	defff904 	addi	sp,sp,-28
  e5e328:	dfc00615 	stw	ra,24(sp)
  e5e32c:	df000515 	stw	fp,20(sp)
  e5e330:	dc000415 	stw	r16,16(sp)
  e5e334:	df000404 	addi	fp,sp,16
  e5e338:	e13ffe15 	stw	r4,-8(fp)
  e5e33c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
  e5e340:	e0bfff17 	ldw	r2,-4(fp)
  e5e344:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  e5e348:	e0bffe17 	ldw	r2,-8(fp)
  e5e34c:	11000b04 	addi	r4,r2,44
  e5e350:	01400044 	movi	r5,1
  e5e354:	0e5e5500 	call	e5e550 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  e5e358:	e0bffe17 	ldw	r2,-8(fp)
  e5e35c:	10800417 	ldw	r2,16(r2)
  e5e360:	10800037 	ldwio	r2,0(r2)
  e5e364:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
  e5e368:	e0bffe17 	ldw	r2,-8(fp)
  e5e36c:	10800317 	ldw	r2,12(r2)
  e5e370:	10800037 	ldwio	r2,0(r2)
  e5e374:	1007883a 	mov	r3,r2
  e5e378:	e0bffc17 	ldw	r2,-16(fp)
  e5e37c:	1880091e 	bne	r3,r2,e5e3a4 <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
  e5e380:	e0ffff17 	ldw	r3,-4(fp)
  e5e384:	00bffd44 	movi	r2,-11
  e5e388:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
  e5e38c:	0e5e0980 	call	e5e098 <alt_get_errno>
  e5e390:	1007883a 	mov	r3,r2
  e5e394:	008002c4 	movi	r2,11
  e5e398:	18800015 	stw	r2,0(r3)
    msg = 0;
  e5e39c:	e03ffd15 	stw	zero,-12(fp)
  e5e3a0:	00000c06 	br	e5e3d4 <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
  e5e3a4:	e0bffc17 	ldw	r2,-16(fp)
  e5e3a8:	10800037 	ldwio	r2,0(r2)
  e5e3ac:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
  e5e3b0:	e0bffe17 	ldw	r2,-8(fp)
  e5e3b4:	10800417 	ldw	r2,16(r2)
  e5e3b8:	1021883a 	mov	r16,r2
  e5e3bc:	e13ffe17 	ldw	r4,-8(fp)
  e5e3c0:	e17ffc17 	ldw	r5,-16(fp)
  e5e3c4:	0e5e22c0 	call	e5e22c <alt_mailbox_increment_ptr>
  e5e3c8:	1007883a 	mov	r3,r2
  e5e3cc:	8005883a 	mov	r2,r16
  e5e3d0:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
  e5e3d4:	e0bffe17 	ldw	r2,-8(fp)
  e5e3d8:	11000b04 	addi	r4,r2,44
  e5e3dc:	0e5e5d00 	call	e5e5d0 <altera_avalon_mutex_unlock>

  return msg;
  e5e3e0:	e0bffd17 	ldw	r2,-12(fp)

}
  e5e3e4:	e037883a 	mov	sp,fp
  e5e3e8:	dfc00217 	ldw	ra,8(sp)
  e5e3ec:	df000117 	ldw	fp,4(sp)
  e5e3f0:	dc000017 	ldw	r16,0(sp)
  e5e3f4:	dec00304 	addi	sp,sp,12
  e5e3f8:	f800283a 	ret

00e5e3fc <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  e5e3fc:	defff904 	addi	sp,sp,-28
  e5e400:	df000615 	stw	fp,24(sp)
  e5e404:	df000604 	addi	fp,sp,24
  e5e408:	e13ffe15 	stw	r4,-8(fp)
  e5e40c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
  e5e410:	00bfffc4 	movi	r2,-1
  e5e414:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
  e5e418:	0005317a 	rdctl	r2,cpuid
  e5e41c:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
  e5e420:	e0bffd17 	ldw	r2,-12(fp)
  e5e424:	1006943a 	slli	r3,r2,16
  e5e428:	e0bfff17 	ldw	r2,-4(fp)
  e5e42c:	1884b03a 	or	r2,r3,r2
  e5e430:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
  e5e434:	e0bffe17 	ldw	r2,-8(fp)
  e5e438:	10800317 	ldw	r2,12(r2)
  e5e43c:	e0fffc17 	ldw	r3,-16(fp)
  e5e440:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  e5e444:	e0bffe17 	ldw	r2,-8(fp)
  e5e448:	10800317 	ldw	r2,12(r2)
  e5e44c:	10800037 	ldwio	r2,0(r2)
  e5e450:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
  e5e454:	e0fffb17 	ldw	r3,-20(fp)
  e5e458:	e0bffc17 	ldw	r2,-16(fp)
  e5e45c:	1880011e 	bne	r3,r2,e5e464 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
  e5e460:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
  e5e464:	e0bffa17 	ldw	r2,-24(fp)
}
  e5e468:	e037883a 	mov	sp,fp
  e5e46c:	df000017 	ldw	fp,0(sp)
  e5e470:	dec00104 	addi	sp,sp,4
  e5e474:	f800283a 	ret

00e5e478 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
  e5e478:	defffc04 	addi	sp,sp,-16
  e5e47c:	dfc00315 	stw	ra,12(sp)
  e5e480:	df000215 	stw	fp,8(sp)
  e5e484:	df000204 	addi	fp,sp,8
  e5e488:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
  e5e48c:	e13fff17 	ldw	r4,-4(fp)
  e5e490:	d1601904 	addi	r5,gp,-32668
  e5e494:	0e601680 	call	e60168 <alt_find_dev>
  e5e498:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  e5e49c:	e0bffe17 	ldw	r2,-8(fp)
  e5e4a0:	1004c03a 	cmpne	r2,r2,zero
  e5e4a4:	1000041e 	bne	r2,zero,e5e4b8 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  e5e4a8:	0e5e4d00 	call	e5e4d0 <alt_get_errno>
  e5e4ac:	1007883a 	mov	r3,r2
  e5e4b0:	008004c4 	movi	r2,19
  e5e4b4:	18800015 	stw	r2,0(r3)
  }

  return dev;
  e5e4b8:	e0bffe17 	ldw	r2,-8(fp)
}
  e5e4bc:	e037883a 	mov	sp,fp
  e5e4c0:	dfc00117 	ldw	ra,4(sp)
  e5e4c4:	df000017 	ldw	fp,0(sp)
  e5e4c8:	dec00204 	addi	sp,sp,8
  e5e4cc:	f800283a 	ret

00e5e4d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e5e4d0:	defffd04 	addi	sp,sp,-12
  e5e4d4:	dfc00215 	stw	ra,8(sp)
  e5e4d8:	df000115 	stw	fp,4(sp)
  e5e4dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e5e4e0:	008039b4 	movhi	r2,230
  e5e4e4:	108ca604 	addi	r2,r2,12952
  e5e4e8:	10800017 	ldw	r2,0(r2)
  e5e4ec:	1005003a 	cmpeq	r2,r2,zero
  e5e4f0:	1000061e 	bne	r2,zero,e5e50c <alt_get_errno+0x3c>
  e5e4f4:	008039b4 	movhi	r2,230
  e5e4f8:	108ca604 	addi	r2,r2,12952
  e5e4fc:	10800017 	ldw	r2,0(r2)
  e5e500:	103ee83a 	callr	r2
  e5e504:	e0bfff15 	stw	r2,-4(fp)
  e5e508:	00000306 	br	e5e518 <alt_get_errno+0x48>
  e5e50c:	008039b4 	movhi	r2,230
  e5e510:	1093ac04 	addi	r2,r2,20144
  e5e514:	e0bfff15 	stw	r2,-4(fp)
  e5e518:	e0bfff17 	ldw	r2,-4(fp)
}
  e5e51c:	e037883a 	mov	sp,fp
  e5e520:	dfc00117 	ldw	ra,4(sp)
  e5e524:	df000017 	ldw	fp,0(sp)
  e5e528:	dec00204 	addi	sp,sp,8
  e5e52c:	f800283a 	ret

00e5e530 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
  e5e530:	defffe04 	addi	sp,sp,-8
  e5e534:	df000115 	stw	fp,4(sp)
  e5e538:	df000104 	addi	fp,sp,4
  e5e53c:	e13fff15 	stw	r4,-4(fp)
  return;
}
  e5e540:	e037883a 	mov	sp,fp
  e5e544:	df000017 	ldw	fp,0(sp)
  e5e548:	dec00104 	addi	sp,sp,4
  e5e54c:	f800283a 	ret

00e5e550 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
  e5e550:	defffc04 	addi	sp,sp,-16
  e5e554:	dfc00315 	stw	ra,12(sp)
  e5e558:	df000215 	stw	fp,8(sp)
  e5e55c:	df000204 	addi	fp,sp,8
  e5e560:	e13ffe15 	stw	r4,-8(fp)
  e5e564:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
  e5e568:	e13ffe17 	ldw	r4,-8(fp)
  e5e56c:	e17fff17 	ldw	r5,-4(fp)
  e5e570:	0e5e3fc0 	call	e5e3fc <alt_mutex_trylock>
  e5e574:	1004c03a 	cmpne	r2,r2,zero
  e5e578:	103ffb1e 	bne	r2,zero,e5e568 <altera_avalon_mutex_lock+0x18>
}
  e5e57c:	e037883a 	mov	sp,fp
  e5e580:	dfc00117 	ldw	ra,4(sp)
  e5e584:	df000017 	ldw	fp,0(sp)
  e5e588:	dec00204 	addi	sp,sp,8
  e5e58c:	f800283a 	ret

00e5e590 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  e5e590:	defffb04 	addi	sp,sp,-20
  e5e594:	dfc00415 	stw	ra,16(sp)
  e5e598:	df000315 	stw	fp,12(sp)
  e5e59c:	df000304 	addi	fp,sp,12
  e5e5a0:	e13ffe15 	stw	r4,-8(fp)
  e5e5a4:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
  e5e5a8:	e13ffe17 	ldw	r4,-8(fp)
  e5e5ac:	e17fff17 	ldw	r5,-4(fp)
  e5e5b0:	0e5e3fc0 	call	e5e3fc <alt_mutex_trylock>
  e5e5b4:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
  e5e5b8:	e0bffd17 	ldw	r2,-12(fp)
}
  e5e5bc:	e037883a 	mov	sp,fp
  e5e5c0:	dfc00117 	ldw	ra,4(sp)
  e5e5c4:	df000017 	ldw	fp,0(sp)
  e5e5c8:	dec00204 	addi	sp,sp,8
  e5e5cc:	f800283a 	ret

00e5e5d0 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  e5e5d0:	defffd04 	addi	sp,sp,-12
  e5e5d4:	df000215 	stw	fp,8(sp)
  e5e5d8:	df000204 	addi	fp,sp,8
  e5e5dc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
  e5e5e0:	0005317a 	rdctl	r2,cpuid
  e5e5e4:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
  e5e5e8:	e0bfff17 	ldw	r2,-4(fp)
  e5e5ec:	10800317 	ldw	r2,12(r2)
  e5e5f0:	10800104 	addi	r2,r2,4
  e5e5f4:	1007883a 	mov	r3,r2
  e5e5f8:	00800044 	movi	r2,1
  e5e5fc:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
  e5e600:	e0bfff17 	ldw	r2,-4(fp)
  e5e604:	11000317 	ldw	r4,12(r2)
  e5e608:	e0bffe17 	ldw	r2,-8(fp)
  e5e60c:	1004943a 	slli	r2,r2,16
  e5e610:	1007883a 	mov	r3,r2
  e5e614:	2005883a 	mov	r2,r4
  e5e618:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
  e5e61c:	e037883a 	mov	sp,fp
  e5e620:	df000017 	ldw	fp,0(sp)
  e5e624:	dec00104 	addi	sp,sp,4
  e5e628:	f800283a 	ret

00e5e62c <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  e5e62c:	defff904 	addi	sp,sp,-28
  e5e630:	df000615 	stw	fp,24(sp)
  e5e634:	df000604 	addi	fp,sp,24
  e5e638:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
  e5e63c:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
  e5e640:	0005317a 	rdctl	r2,cpuid
  e5e644:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  e5e648:	e0bfff17 	ldw	r2,-4(fp)
  e5e64c:	10800317 	ldw	r2,12(r2)
  e5e650:	10800037 	ldwio	r2,0(r2)
  e5e654:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
  e5e658:	e0bffd17 	ldw	r2,-12(fp)
  e5e65c:	10bfffec 	andhi	r2,r2,65535
  e5e660:	1004d43a 	srli	r2,r2,16
  e5e664:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
  e5e668:	e0fffc17 	ldw	r3,-16(fp)
  e5e66c:	e0bffe17 	ldw	r2,-8(fp)
  e5e670:	1880081e 	bne	r3,r2,e5e694 <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
  e5e674:	e0bffd17 	ldw	r2,-12(fp)
  e5e678:	10bfffcc 	andi	r2,r2,65535
  e5e67c:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
  e5e680:	e0bffb17 	ldw	r2,-20(fp)
  e5e684:	1005003a 	cmpeq	r2,r2,zero
  e5e688:	1000021e 	bne	r2,zero,e5e694 <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
  e5e68c:	00800044 	movi	r2,1
  e5e690:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
  e5e694:	e0bffa17 	ldw	r2,-24(fp)
}
  e5e698:	e037883a 	mov	sp,fp
  e5e69c:	df000017 	ldw	fp,0(sp)
  e5e6a0:	dec00104 	addi	sp,sp,4
  e5e6a4:	f800283a 	ret

00e5e6a8 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  e5e6a8:	defffc04 	addi	sp,sp,-16
  e5e6ac:	df000315 	stw	fp,12(sp)
  e5e6b0:	df000304 	addi	fp,sp,12
  e5e6b4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
  e5e6b8:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
  e5e6bc:	e0bfff17 	ldw	r2,-4(fp)
  e5e6c0:	10800317 	ldw	r2,12(r2)
  e5e6c4:	10800104 	addi	r2,r2,4
  e5e6c8:	10800037 	ldwio	r2,0(r2)
  e5e6cc:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
  e5e6d0:	e0bffe17 	ldw	r2,-8(fp)
  e5e6d4:	1080004c 	andi	r2,r2,1
  e5e6d8:	10803fcc 	andi	r2,r2,255
  e5e6dc:	1005003a 	cmpeq	r2,r2,zero
  e5e6e0:	1000021e 	bne	r2,zero,e5e6ec <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
  e5e6e4:	00800044 	movi	r2,1
  e5e6e8:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
  e5e6ec:	e0bffd17 	ldw	r2,-12(fp)
}
  e5e6f0:	e037883a 	mov	sp,fp
  e5e6f4:	df000017 	ldw	fp,0(sp)
  e5e6f8:	dec00104 	addi	sp,sp,4
  e5e6fc:	f800283a 	ret

00e5e700 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
  e5e700:	defff904 	addi	sp,sp,-28
  e5e704:	df000615 	stw	fp,24(sp)
  e5e708:	df000604 	addi	fp,sp,24
  e5e70c:	e13ffe15 	stw	r4,-8(fp)
  e5e710:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
  e5e714:	e03ffa15 	stw	zero,-24(fp)
  e5e718:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
  e5e71c:	e0bffe17 	ldw	r2,-8(fp)
  e5e720:	10000035 	stwio	zero,0(r2)
  lo = IORD(hw_base_address, ( which_section*4   ));
  e5e724:	e0bfff17 	ldw	r2,-4(fp)
  e5e728:	1004913a 	slli	r2,r2,4
  e5e72c:	1007883a 	mov	r3,r2
  e5e730:	e0bffe17 	ldw	r2,-8(fp)
  e5e734:	1885883a 	add	r2,r3,r2
  e5e738:	10800037 	ldwio	r2,0(r2)
  e5e73c:	e0bffd15 	stw	r2,-12(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
  e5e740:	e0bfff17 	ldw	r2,-4(fp)
  e5e744:	1004913a 	slli	r2,r2,4
  e5e748:	1007883a 	mov	r3,r2
  e5e74c:	e0bffe17 	ldw	r2,-8(fp)
  e5e750:	1885883a 	add	r2,r3,r2
  e5e754:	10800104 	addi	r2,r2,4
  e5e758:	10800037 	ldwio	r2,0(r2)
  e5e75c:	e0bffc15 	stw	r2,-16(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
  e5e760:	e0bffc17 	ldw	r2,-16(fp)
  e5e764:	0007883a 	mov	r3,zero
  e5e768:	100a983a 	sll	r5,r2,zero
  e5e76c:	0009883a 	mov	r4,zero
  e5e770:	e0bffd17 	ldw	r2,-12(fp)
  e5e774:	0007883a 	mov	r3,zero
  e5e778:	208cb03a 	or	r6,r4,r2
  e5e77c:	e1bffa15 	stw	r6,-24(fp)
  e5e780:	28c4b03a 	or	r2,r5,r3
  e5e784:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
  e5e788:	e17ffa17 	ldw	r5,-24(fp)
  e5e78c:	e1bffb17 	ldw	r6,-20(fp)
  e5e790:	2807883a 	mov	r3,r5
  e5e794:	3009883a 	mov	r4,r6
}
  e5e798:	1805883a 	mov	r2,r3
  e5e79c:	2007883a 	mov	r3,r4
  e5e7a0:	e037883a 	mov	sp,fp
  e5e7a4:	df000017 	ldw	fp,0(sp)
  e5e7a8:	dec00104 	addi	sp,sp,4
  e5e7ac:	f800283a 	ret

00e5e7b0 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
  e5e7b0:	defffd04 	addi	sp,sp,-12
  e5e7b4:	dfc00215 	stw	ra,8(sp)
  e5e7b8:	df000115 	stw	fp,4(sp)
  e5e7bc:	df000104 	addi	fp,sp,4
  e5e7c0:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
  e5e7c4:	e13fff17 	ldw	r4,-4(fp)
  e5e7c8:	000b883a 	mov	r5,zero
  e5e7cc:	0e5e7000 	call	e5e700 <perf_get_section_time>
  e5e7d0:	1009883a 	mov	r4,r2
  e5e7d4:	180b883a 	mov	r5,r3
  e5e7d8:	200d883a 	mov	r6,r4
  e5e7dc:	280f883a 	mov	r7,r5
  e5e7e0:	3007883a 	mov	r3,r6
  e5e7e4:	3809883a 	mov	r4,r7
}
  e5e7e8:	1805883a 	mov	r2,r3
  e5e7ec:	2007883a 	mov	r3,r4
  e5e7f0:	e037883a 	mov	sp,fp
  e5e7f4:	dfc00117 	ldw	ra,4(sp)
  e5e7f8:	df000017 	ldw	fp,0(sp)
  e5e7fc:	dec00204 	addi	sp,sp,8
  e5e800:	f800283a 	ret

00e5e804 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
  e5e804:	defffd04 	addi	sp,sp,-12
  e5e808:	df000215 	stw	fp,8(sp)
  e5e80c:	df000204 	addi	fp,sp,8
  e5e810:	e13ffe15 	stw	r4,-8(fp)
  e5e814:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
  e5e818:	e0bfff17 	ldw	r2,-4(fp)
  e5e81c:	1004913a 	slli	r2,r2,4
  e5e820:	1007883a 	mov	r3,r2
  e5e824:	e0bffe17 	ldw	r2,-8(fp)
  e5e828:	1885883a 	add	r2,r3,r2
  e5e82c:	10800204 	addi	r2,r2,8
  e5e830:	10800037 	ldwio	r2,0(r2)
}
  e5e834:	e037883a 	mov	sp,fp
  e5e838:	df000017 	ldw	fp,0(sp)
  e5e83c:	dec00104 	addi	sp,sp,4
  e5e840:	f800283a 	ret

00e5e844 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
  e5e844:	deffff04 	addi	sp,sp,-4
  e5e848:	df000015 	stw	fp,0(sp)
  e5e84c:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
  e5e850:	0005883a 	mov	r2,zero
#else
    return (void*)0;
#endif
}
  e5e854:	e037883a 	mov	sp,fp
  e5e858:	df000017 	ldw	fp,0(sp)
  e5e85c:	dec00104 	addi	sp,sp,4
  e5e860:	f800283a 	ret

00e5e864 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
  e5e864:	deffff04 	addi	sp,sp,-4
  e5e868:	df000015 	stw	fp,0(sp)
  e5e86c:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
  e5e870:	0080bef4 	movhi	r2,763
  e5e874:	10bc2004 	addi	r2,r2,-3968
}
  e5e878:	e037883a 	mov	sp,fp
  e5e87c:	df000017 	ldw	fp,0(sp)
  e5e880:	dec00104 	addi	sp,sp,4
  e5e884:	f800283a 	ret

00e5e888 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  e5e888:	defffc04 	addi	sp,sp,-16
  e5e88c:	dfc00315 	stw	ra,12(sp)
  e5e890:	df000215 	stw	fp,8(sp)
  e5e894:	df000204 	addi	fp,sp,8
  e5e898:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  e5e89c:	e13fff17 	ldw	r4,-4(fp)
  e5e8a0:	014039b4 	movhi	r5,230
  e5e8a4:	294ca304 	addi	r5,r5,12940
  e5e8a8:	0e601680 	call	e60168 <alt_find_dev>
  e5e8ac:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  e5e8b0:	e0bffe17 	ldw	r2,-8(fp)
}
  e5e8b4:	e037883a 	mov	sp,fp
  e5e8b8:	dfc00117 	ldw	ra,4(sp)
  e5e8bc:	df000017 	ldw	fp,0(sp)
  e5e8c0:	dec00204 	addi	sp,sp,8
  e5e8c4:	f800283a 	ret

00e5e8c8 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  e5e8c8:	defff904 	addi	sp,sp,-28
  e5e8cc:	df000615 	stw	fp,24(sp)
  e5e8d0:	df000604 	addi	fp,sp,24
  e5e8d4:	e13ffb15 	stw	r4,-20(fp)
  e5e8d8:	e17ffc15 	stw	r5,-16(fp)
  e5e8dc:	e1bffd15 	stw	r6,-12(fp)
  e5e8e0:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  e5e8e4:	e0bffb17 	ldw	r2,-20(fp)
  e5e8e8:	10c00f17 	ldw	r3,60(r2)
  e5e8ec:	e0bffd17 	ldw	r2,-12(fp)
  e5e8f0:	10c0042e 	bgeu	r2,r3,e5e904 <alt_up_pixel_buffer_dma_draw+0x3c>
  e5e8f4:	e0bffb17 	ldw	r2,-20(fp)
  e5e8f8:	10c01017 	ldw	r3,64(r2)
  e5e8fc:	e0bffe17 	ldw	r2,-8(fp)
  e5e900:	10c00336 	bltu	r2,r3,e5e910 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  e5e904:	00bfffc4 	movi	r2,-1
  e5e908:	e0bfff15 	stw	r2,-4(fp)
  e5e90c:	00005106 	br	e5ea54 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  e5e910:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  e5e914:	e0bffb17 	ldw	r2,-20(fp)
  e5e918:	10800d17 	ldw	r2,52(r2)
  e5e91c:	1004c03a 	cmpne	r2,r2,zero
  e5e920:	1000151e 	bne	r2,zero,e5e978 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  e5e924:	e0bffb17 	ldw	r2,-20(fp)
  e5e928:	10c01217 	ldw	r3,72(r2)
  e5e92c:	e0bffd17 	ldw	r2,-12(fp)
  e5e930:	1886703a 	and	r3,r3,r2
  e5e934:	e0bffb17 	ldw	r2,-20(fp)
  e5e938:	10801117 	ldw	r2,68(r2)
  e5e93c:	1886983a 	sll	r3,r3,r2
  e5e940:	e0bffa17 	ldw	r2,-24(fp)
  e5e944:	10c4b03a 	or	r2,r2,r3
  e5e948:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  e5e94c:	e0bffb17 	ldw	r2,-20(fp)
  e5e950:	10c01417 	ldw	r3,80(r2)
  e5e954:	e0bffe17 	ldw	r2,-8(fp)
  e5e958:	1886703a 	and	r3,r3,r2
  e5e95c:	e0bffb17 	ldw	r2,-20(fp)
  e5e960:	10801317 	ldw	r2,76(r2)
  e5e964:	1886983a 	sll	r3,r3,r2
  e5e968:	e0bffa17 	ldw	r2,-24(fp)
  e5e96c:	10c4b03a 	or	r2,r2,r3
  e5e970:	e0bffa15 	stw	r2,-24(fp)
  e5e974:	00001706 	br	e5e9d4 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  e5e978:	e0bffb17 	ldw	r2,-20(fp)
  e5e97c:	10c01217 	ldw	r3,72(r2)
  e5e980:	e0bffd17 	ldw	r2,-12(fp)
  e5e984:	1886703a 	and	r3,r3,r2
  e5e988:	e0bffb17 	ldw	r2,-20(fp)
  e5e98c:	10801117 	ldw	r2,68(r2)
  e5e990:	1886983a 	sll	r3,r3,r2
  e5e994:	e0bffa17 	ldw	r2,-24(fp)
  e5e998:	10c5883a 	add	r2,r2,r3
  e5e99c:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  e5e9a0:	e0bffb17 	ldw	r2,-20(fp)
  e5e9a4:	10c01417 	ldw	r3,80(r2)
  e5e9a8:	e0bffe17 	ldw	r2,-8(fp)
  e5e9ac:	1886703a 	and	r3,r3,r2
  e5e9b0:	e0bffb17 	ldw	r2,-20(fp)
  e5e9b4:	10800f17 	ldw	r2,60(r2)
  e5e9b8:	1887383a 	mul	r3,r3,r2
  e5e9bc:	e0bffb17 	ldw	r2,-20(fp)
  e5e9c0:	10801117 	ldw	r2,68(r2)
  e5e9c4:	1886983a 	sll	r3,r3,r2
  e5e9c8:	e0bffa17 	ldw	r2,-24(fp)
  e5e9cc:	10c5883a 	add	r2,r2,r3
  e5e9d0:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  e5e9d4:	e0bffb17 	ldw	r2,-20(fp)
  e5e9d8:	10800e17 	ldw	r2,56(r2)
  e5e9dc:	10800058 	cmpnei	r2,r2,1
  e5e9e0:	1000081e 	bne	r2,zero,e5ea04 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  e5e9e4:	e0bffb17 	ldw	r2,-20(fp)
  e5e9e8:	10800c17 	ldw	r2,48(r2)
  e5e9ec:	1007883a 	mov	r3,r2
  e5e9f0:	e0bffa17 	ldw	r2,-24(fp)
  e5e9f4:	1885883a 	add	r2,r3,r2
  e5e9f8:	e0fffc17 	ldw	r3,-16(fp)
  e5e9fc:	10c00025 	stbio	r3,0(r2)
  e5ea00:	00001306 	br	e5ea50 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  e5ea04:	e0bffb17 	ldw	r2,-20(fp)
  e5ea08:	10800e17 	ldw	r2,56(r2)
  e5ea0c:	10800098 	cmpnei	r2,r2,2
  e5ea10:	1000081e 	bne	r2,zero,e5ea34 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  e5ea14:	e0bffb17 	ldw	r2,-20(fp)
  e5ea18:	10800c17 	ldw	r2,48(r2)
  e5ea1c:	1007883a 	mov	r3,r2
  e5ea20:	e0bffa17 	ldw	r2,-24(fp)
  e5ea24:	1885883a 	add	r2,r3,r2
  e5ea28:	e0fffc17 	ldw	r3,-16(fp)
  e5ea2c:	10c0002d 	sthio	r3,0(r2)
  e5ea30:	00000706 	br	e5ea50 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  e5ea34:	e0bffb17 	ldw	r2,-20(fp)
  e5ea38:	10800c17 	ldw	r2,48(r2)
  e5ea3c:	1007883a 	mov	r3,r2
  e5ea40:	e0bffa17 	ldw	r2,-24(fp)
  e5ea44:	1885883a 	add	r2,r3,r2
  e5ea48:	e0fffc17 	ldw	r3,-16(fp)
  e5ea4c:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  e5ea50:	e03fff15 	stw	zero,-4(fp)
  e5ea54:	e0bfff17 	ldw	r2,-4(fp)
}
  e5ea58:	e037883a 	mov	sp,fp
  e5ea5c:	df000017 	ldw	fp,0(sp)
  e5ea60:	dec00104 	addi	sp,sp,4
  e5ea64:	f800283a 	ret

00e5ea68 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  e5ea68:	defffd04 	addi	sp,sp,-12
  e5ea6c:	df000215 	stw	fp,8(sp)
  e5ea70:	df000204 	addi	fp,sp,8
  e5ea74:	e13ffe15 	stw	r4,-8(fp)
  e5ea78:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  e5ea7c:	e0bffe17 	ldw	r2,-8(fp)
  e5ea80:	10800a17 	ldw	r2,40(r2)
  e5ea84:	10800104 	addi	r2,r2,4
  e5ea88:	e0ffff17 	ldw	r3,-4(fp)
  e5ea8c:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  e5ea90:	e0bffe17 	ldw	r2,-8(fp)
  e5ea94:	10800a17 	ldw	r2,40(r2)
  e5ea98:	10800104 	addi	r2,r2,4
  e5ea9c:	10800037 	ldwio	r2,0(r2)
  e5eaa0:	1007883a 	mov	r3,r2
  e5eaa4:	e0bffe17 	ldw	r2,-8(fp)
  e5eaa8:	10c00c15 	stw	r3,48(r2)
	return 0;
  e5eaac:	0005883a 	mov	r2,zero
}
  e5eab0:	e037883a 	mov	sp,fp
  e5eab4:	df000017 	ldw	fp,0(sp)
  e5eab8:	dec00104 	addi	sp,sp,4
  e5eabc:	f800283a 	ret

00e5eac0 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  e5eac0:	defffe04 	addi	sp,sp,-8
  e5eac4:	df000115 	stw	fp,4(sp)
  e5eac8:	df000104 	addi	fp,sp,4
  e5eacc:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  e5ead0:	e0bfff17 	ldw	r2,-4(fp)
  e5ead4:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  e5ead8:	e0bfff17 	ldw	r2,-4(fp)
  e5eadc:	10800a17 	ldw	r2,40(r2)
  e5eae0:	1007883a 	mov	r3,r2
  e5eae4:	00800044 	movi	r2,1
  e5eae8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  e5eaec:	e0bfff17 	ldw	r2,-4(fp)
  e5eaf0:	10c00b17 	ldw	r3,44(r2)
  e5eaf4:	e0bfff17 	ldw	r2,-4(fp)
  e5eaf8:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  e5eafc:	e0bfff17 	ldw	r2,-4(fp)
  e5eb00:	11000b15 	stw	r4,44(r2)
	return 0;
  e5eb04:	0005883a 	mov	r2,zero
}
  e5eb08:	e037883a 	mov	sp,fp
  e5eb0c:	df000017 	ldw	fp,0(sp)
  e5eb10:	dec00104 	addi	sp,sp,4
  e5eb14:	f800283a 	ret

00e5eb18 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  e5eb18:	defffe04 	addi	sp,sp,-8
  e5eb1c:	df000115 	stw	fp,4(sp)
  e5eb20:	df000104 	addi	fp,sp,4
  e5eb24:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  e5eb28:	e0bfff17 	ldw	r2,-4(fp)
  e5eb2c:	10800a17 	ldw	r2,40(r2)
  e5eb30:	10800304 	addi	r2,r2,12
  e5eb34:	10800037 	ldwio	r2,0(r2)
  e5eb38:	1080004c 	andi	r2,r2,1
}
  e5eb3c:	e037883a 	mov	sp,fp
  e5eb40:	df000017 	ldw	fp,0(sp)
  e5eb44:	dec00104 	addi	sp,sp,4
  e5eb48:	f800283a 	ret

00e5eb4c <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  e5eb4c:	defff604 	addi	sp,sp,-40
  e5eb50:	df000915 	stw	fp,36(sp)
  e5eb54:	df000904 	addi	fp,sp,36
  e5eb58:	e13ff715 	stw	r4,-36(fp)
  e5eb5c:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  e5eb60:	e0bff817 	ldw	r2,-32(fp)
  e5eb64:	10800058 	cmpnei	r2,r2,1
  e5eb68:	1000041e 	bne	r2,zero,e5eb7c <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  e5eb6c:	e0bff717 	ldw	r2,-36(fp)
  e5eb70:	10800c17 	ldw	r2,48(r2)
  e5eb74:	e0bfff15 	stw	r2,-4(fp)
  e5eb78:	00000306 	br	e5eb88 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  e5eb7c:	e0bff717 	ldw	r2,-36(fp)
  e5eb80:	10800b17 	ldw	r2,44(r2)
  e5eb84:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  e5eb88:	e0bff717 	ldw	r2,-36(fp)
  e5eb8c:	10800f17 	ldw	r2,60(r2)
  e5eb90:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  e5eb94:	e0bff717 	ldw	r2,-36(fp)
  e5eb98:	10800e17 	ldw	r2,56(r2)
  e5eb9c:	10800098 	cmpnei	r2,r2,2
  e5eba0:	1000051e 	bne	r2,zero,e5ebb8 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  e5eba4:	e0fffe17 	ldw	r3,-8(fp)
  e5eba8:	e0fffe17 	ldw	r3,-8(fp)
  e5ebac:	18c5883a 	add	r2,r3,r3
  e5ebb0:	e0bffe15 	stw	r2,-8(fp)
  e5ebb4:	00000506 	br	e5ebcc <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  e5ebb8:	e13ffe17 	ldw	r4,-8(fp)
  e5ebbc:	e13ffe17 	ldw	r4,-8(fp)
  e5ebc0:	2105883a 	add	r2,r4,r4
  e5ebc4:	1085883a 	add	r2,r2,r2
  e5ebc8:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  e5ebcc:	e0bff717 	ldw	r2,-36(fp)
  e5ebd0:	10801017 	ldw	r2,64(r2)
  e5ebd4:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  e5ebd8:	e0bff717 	ldw	r2,-36(fp)
  e5ebdc:	10800d17 	ldw	r2,52(r2)
  e5ebe0:	1004c03a 	cmpne	r2,r2,zero
  e5ebe4:	10001e1e 	bne	r2,zero,e5ec60 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  e5ebe8:	e0bff717 	ldw	r2,-36(fp)
  e5ebec:	10801317 	ldw	r2,76(r2)
  e5ebf0:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  e5ebf4:	e03ffb15 	stw	zero,-20(fp)
  e5ebf8:	00001506 	br	e5ec50 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  e5ebfc:	e03ffc15 	stw	zero,-16(fp)
  e5ec00:	00000706 	br	e5ec20 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  e5ec04:	e0ffff17 	ldw	r3,-4(fp)
  e5ec08:	e0bffc17 	ldw	r2,-16(fp)
  e5ec0c:	1885883a 	add	r2,r3,r2
  e5ec10:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  e5ec14:	e0bffc17 	ldw	r2,-16(fp)
  e5ec18:	10800104 	addi	r2,r2,4
  e5ec1c:	e0bffc15 	stw	r2,-16(fp)
  e5ec20:	e0fffc17 	ldw	r3,-16(fp)
  e5ec24:	e13ffe17 	ldw	r4,-8(fp)
  e5ec28:	193ff636 	bltu	r3,r4,e5ec04 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  e5ec2c:	e0fffa17 	ldw	r3,-24(fp)
  e5ec30:	00800044 	movi	r2,1
  e5ec34:	10c4983a 	sll	r2,r2,r3
  e5ec38:	e0ffff17 	ldw	r3,-4(fp)
  e5ec3c:	1887883a 	add	r3,r3,r2
  e5ec40:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  e5ec44:	e13ffb17 	ldw	r4,-20(fp)
  e5ec48:	21000044 	addi	r4,r4,1
  e5ec4c:	e13ffb15 	stw	r4,-20(fp)
  e5ec50:	e0bffb17 	ldw	r2,-20(fp)
  e5ec54:	e0fffd17 	ldw	r3,-12(fp)
  e5ec58:	10ffe836 	bltu	r2,r3,e5ebfc <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  e5ec5c:	00001006 	br	e5eca0 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  e5ec60:	e13ffd17 	ldw	r4,-12(fp)
  e5ec64:	e0bffe17 	ldw	r2,-8(fp)
  e5ec68:	2089383a 	mul	r4,r4,r2
  e5ec6c:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  e5ec70:	e03ff915 	stw	zero,-28(fp)
  e5ec74:	00000706 	br	e5ec94 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  e5ec78:	e0ffff17 	ldw	r3,-4(fp)
  e5ec7c:	e0bff917 	ldw	r2,-28(fp)
  e5ec80:	1885883a 	add	r2,r3,r2
  e5ec84:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  e5ec88:	e0fff917 	ldw	r3,-28(fp)
  e5ec8c:	18c00104 	addi	r3,r3,4
  e5ec90:	e0fff915 	stw	r3,-28(fp)
  e5ec94:	e0bff917 	ldw	r2,-28(fp)
  e5ec98:	e13ffd17 	ldw	r4,-12(fp)
  e5ec9c:	113ff636 	bltu	r2,r4,e5ec78 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  e5eca0:	e037883a 	mov	sp,fp
  e5eca4:	df000017 	ldw	fp,0(sp)
  e5eca8:	dec00104 	addi	sp,sp,4
  e5ecac:	f800283a 	ret

00e5ecb0 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  e5ecb0:	deffed04 	addi	sp,sp,-76
  e5ecb4:	df001215 	stw	fp,72(sp)
  e5ecb8:	df001204 	addi	fp,sp,72
  e5ecbc:	e13fee15 	stw	r4,-72(fp)
  e5ecc0:	e17fef15 	stw	r5,-68(fp)
  e5ecc4:	e1bff015 	stw	r6,-64(fp)
  e5ecc8:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  e5eccc:	e0bfee17 	ldw	r2,-72(fp)
  e5ecd0:	10800f17 	ldw	r2,60(r2)
  e5ecd4:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  e5ecd8:	e0bfee17 	ldw	r2,-72(fp)
  e5ecdc:	10801017 	ldw	r2,64(r2)
  e5ece0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  e5ece4:	e0bfef17 	ldw	r2,-68(fp)
  e5ece8:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  e5ecec:	e0fff117 	ldw	r3,-60(fp)
  e5ecf0:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  e5ecf4:	e13ff017 	ldw	r4,-64(fp)
  e5ecf8:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  e5ecfc:	e0800117 	ldw	r2,4(fp)
  e5ed00:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  e5ed04:	e0c00217 	ldw	r3,8(fp)
  e5ed08:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  e5ed0c:	e13ffa17 	ldw	r4,-24(fp)
  e5ed10:	e0bffb17 	ldw	r2,-20(fp)
  e5ed14:	2080062e 	bgeu	r4,r2,e5ed30 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  e5ed18:	e0fffb17 	ldw	r3,-20(fp)
  e5ed1c:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  e5ed20:	e13ffa17 	ldw	r4,-24(fp)
  e5ed24:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  e5ed28:	e0bffc17 	ldw	r2,-16(fp)
  e5ed2c:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  e5ed30:	e0fff817 	ldw	r3,-32(fp)
  e5ed34:	e13ff917 	ldw	r4,-28(fp)
  e5ed38:	1900062e 	bgeu	r3,r4,e5ed54 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  e5ed3c:	e0bff917 	ldw	r2,-28(fp)
  e5ed40:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  e5ed44:	e0fff817 	ldw	r3,-32(fp)
  e5ed48:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  e5ed4c:	e13ffc17 	ldw	r4,-16(fp)
  e5ed50:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  e5ed54:	e0bffb17 	ldw	r2,-20(fp)
  e5ed58:	e0fffe17 	ldw	r3,-8(fp)
  e5ed5c:	10c10d2e 	bgeu	r2,r3,e5f194 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  e5ed60:	e13ff917 	ldw	r4,-28(fp)
  e5ed64:	e0bffd17 	ldw	r2,-12(fp)
  e5ed68:	20800136 	bltu	r4,r2,e5ed70 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  e5ed6c:	00010906 	br	e5f194 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  e5ed70:	e0fffa17 	ldw	r3,-24(fp)
  e5ed74:	e13ffe17 	ldw	r4,-8(fp)
  e5ed78:	19000336 	bltu	r3,r4,e5ed88 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  e5ed7c:	e0bffe17 	ldw	r2,-8(fp)
  e5ed80:	10bfffc4 	addi	r2,r2,-1
  e5ed84:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  e5ed88:	e0fff817 	ldw	r3,-32(fp)
  e5ed8c:	e13ffd17 	ldw	r4,-12(fp)
  e5ed90:	19000336 	bltu	r3,r4,e5eda0 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  e5ed94:	e0bffd17 	ldw	r2,-12(fp)
  e5ed98:	10bfffc4 	addi	r2,r2,-1
  e5ed9c:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  e5eda0:	e0800317 	ldw	r2,12(fp)
  e5eda4:	10800058 	cmpnei	r2,r2,1
  e5eda8:	1000041e 	bne	r2,zero,e5edbc <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  e5edac:	e0bfee17 	ldw	r2,-72(fp)
  e5edb0:	10800c17 	ldw	r2,48(r2)
  e5edb4:	e0bfff15 	stw	r2,-4(fp)
  e5edb8:	00000306 	br	e5edc8 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  e5edbc:	e0bfee17 	ldw	r2,-72(fp)
  e5edc0:	10800b17 	ldw	r2,44(r2)
  e5edc4:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  e5edc8:	e0bfee17 	ldw	r2,-72(fp)
  e5edcc:	10800d17 	ldw	r2,52(r2)
  e5edd0:	1004c03a 	cmpne	r2,r2,zero
  e5edd4:	1000721e 	bne	r2,zero,e5efa0 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  e5edd8:	e0bfee17 	ldw	r2,-72(fp)
  e5eddc:	10801317 	ldw	r2,76(r2)
  e5ede0:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  e5ede4:	e0bff417 	ldw	r2,-48(fp)
  e5ede8:	e0fff917 	ldw	r3,-28(fp)
  e5edec:	1884983a 	sll	r2,r3,r2
  e5edf0:	e13fff17 	ldw	r4,-4(fp)
  e5edf4:	2089883a 	add	r4,r4,r2
  e5edf8:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  e5edfc:	e0bfee17 	ldw	r2,-72(fp)
  e5ee00:	10800e17 	ldw	r2,56(r2)
  e5ee04:	10800058 	cmpnei	r2,r2,1
  e5ee08:	10001e1e 	bne	r2,zero,e5ee84 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  e5ee0c:	e0bff917 	ldw	r2,-28(fp)
  e5ee10:	e0bff515 	stw	r2,-44(fp)
  e5ee14:	00001706 	br	e5ee74 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  e5ee18:	e0fffb17 	ldw	r3,-20(fp)
  e5ee1c:	e0fff615 	stw	r3,-40(fp)
  e5ee20:	00000806 	br	e5ee44 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  e5ee24:	e0ffff17 	ldw	r3,-4(fp)
  e5ee28:	e0bff617 	ldw	r2,-40(fp)
  e5ee2c:	1885883a 	add	r2,r3,r2
  e5ee30:	e0fff717 	ldw	r3,-36(fp)
  e5ee34:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  e5ee38:	e13ff617 	ldw	r4,-40(fp)
  e5ee3c:	21000044 	addi	r4,r4,1
  e5ee40:	e13ff615 	stw	r4,-40(fp)
  e5ee44:	e0bffa17 	ldw	r2,-24(fp)
  e5ee48:	e0fff617 	ldw	r3,-40(fp)
  e5ee4c:	10fff52e 	bgeu	r2,r3,e5ee24 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  e5ee50:	e0fff417 	ldw	r3,-48(fp)
  e5ee54:	00800044 	movi	r2,1
  e5ee58:	10c4983a 	sll	r2,r2,r3
  e5ee5c:	e13fff17 	ldw	r4,-4(fp)
  e5ee60:	2089883a 	add	r4,r4,r2
  e5ee64:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  e5ee68:	e0bff517 	ldw	r2,-44(fp)
  e5ee6c:	10800044 	addi	r2,r2,1
  e5ee70:	e0bff515 	stw	r2,-44(fp)
  e5ee74:	e0fff817 	ldw	r3,-32(fp)
  e5ee78:	e13ff517 	ldw	r4,-44(fp)
  e5ee7c:	193fe62e 	bgeu	r3,r4,e5ee18 <alt_up_pixel_buffer_dma_draw_box+0x168>
  e5ee80:	0000c406 	br	e5f194 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  e5ee84:	e0bfee17 	ldw	r2,-72(fp)
  e5ee88:	10800e17 	ldw	r2,56(r2)
  e5ee8c:	10800098 	cmpnei	r2,r2,2
  e5ee90:	1000211e 	bne	r2,zero,e5ef18 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  e5ee94:	e0bff917 	ldw	r2,-28(fp)
  e5ee98:	e0bff515 	stw	r2,-44(fp)
  e5ee9c:	00001a06 	br	e5ef08 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  e5eea0:	e0fffb17 	ldw	r3,-20(fp)
  e5eea4:	e0fff615 	stw	r3,-40(fp)
  e5eea8:	00000b06 	br	e5eed8 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  e5eeac:	e13ff617 	ldw	r4,-40(fp)
  e5eeb0:	e13ff617 	ldw	r4,-40(fp)
  e5eeb4:	2105883a 	add	r2,r4,r4
  e5eeb8:	1007883a 	mov	r3,r2
  e5eebc:	e0bfff17 	ldw	r2,-4(fp)
  e5eec0:	1885883a 	add	r2,r3,r2
  e5eec4:	e0fff717 	ldw	r3,-36(fp)
  e5eec8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  e5eecc:	e0bff617 	ldw	r2,-40(fp)
  e5eed0:	10800044 	addi	r2,r2,1
  e5eed4:	e0bff615 	stw	r2,-40(fp)
  e5eed8:	e0fffa17 	ldw	r3,-24(fp)
  e5eedc:	e13ff617 	ldw	r4,-40(fp)
  e5eee0:	193ff22e 	bgeu	r3,r4,e5eeac <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  e5eee4:	e0fff417 	ldw	r3,-48(fp)
  e5eee8:	00800044 	movi	r2,1
  e5eeec:	10c4983a 	sll	r2,r2,r3
  e5eef0:	e0ffff17 	ldw	r3,-4(fp)
  e5eef4:	1887883a 	add	r3,r3,r2
  e5eef8:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  e5eefc:	e13ff517 	ldw	r4,-44(fp)
  e5ef00:	21000044 	addi	r4,r4,1
  e5ef04:	e13ff515 	stw	r4,-44(fp)
  e5ef08:	e0bff817 	ldw	r2,-32(fp)
  e5ef0c:	e0fff517 	ldw	r3,-44(fp)
  e5ef10:	10ffe32e 	bgeu	r2,r3,e5eea0 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  e5ef14:	00009f06 	br	e5f194 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  e5ef18:	e13ff917 	ldw	r4,-28(fp)
  e5ef1c:	e13ff515 	stw	r4,-44(fp)
  e5ef20:	00001b06 	br	e5ef90 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  e5ef24:	e0bffb17 	ldw	r2,-20(fp)
  e5ef28:	e0bff615 	stw	r2,-40(fp)
  e5ef2c:	00000c06 	br	e5ef60 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  e5ef30:	e0fff617 	ldw	r3,-40(fp)
  e5ef34:	e0fff617 	ldw	r3,-40(fp)
  e5ef38:	18c5883a 	add	r2,r3,r3
  e5ef3c:	1085883a 	add	r2,r2,r2
  e5ef40:	1007883a 	mov	r3,r2
  e5ef44:	e0bfff17 	ldw	r2,-4(fp)
  e5ef48:	1885883a 	add	r2,r3,r2
  e5ef4c:	e0fff717 	ldw	r3,-36(fp)
  e5ef50:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  e5ef54:	e13ff617 	ldw	r4,-40(fp)
  e5ef58:	21000044 	addi	r4,r4,1
  e5ef5c:	e13ff615 	stw	r4,-40(fp)
  e5ef60:	e0bffa17 	ldw	r2,-24(fp)
  e5ef64:	e0fff617 	ldw	r3,-40(fp)
  e5ef68:	10fff12e 	bgeu	r2,r3,e5ef30 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  e5ef6c:	e0fff417 	ldw	r3,-48(fp)
  e5ef70:	00800044 	movi	r2,1
  e5ef74:	10c4983a 	sll	r2,r2,r3
  e5ef78:	e13fff17 	ldw	r4,-4(fp)
  e5ef7c:	2089883a 	add	r4,r4,r2
  e5ef80:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  e5ef84:	e0bff517 	ldw	r2,-44(fp)
  e5ef88:	10800044 	addi	r2,r2,1
  e5ef8c:	e0bff515 	stw	r2,-44(fp)
  e5ef90:	e0fff817 	ldw	r3,-32(fp)
  e5ef94:	e13ff517 	ldw	r4,-44(fp)
  e5ef98:	193fe22e 	bgeu	r3,r4,e5ef24 <alt_up_pixel_buffer_dma_draw_box+0x274>
  e5ef9c:	00007d06 	br	e5f194 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  e5efa0:	e0bfee17 	ldw	r2,-72(fp)
  e5efa4:	10800e17 	ldw	r2,56(r2)
  e5efa8:	10800058 	cmpnei	r2,r2,1
  e5efac:	1000221e 	bne	r2,zero,e5f038 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  e5efb0:	e0fff917 	ldw	r3,-28(fp)
  e5efb4:	e13ffe17 	ldw	r4,-8(fp)
  e5efb8:	1905383a 	mul	r2,r3,r4
  e5efbc:	e0ffff17 	ldw	r3,-4(fp)
  e5efc0:	1887883a 	add	r3,r3,r2
  e5efc4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  e5efc8:	e13ff917 	ldw	r4,-28(fp)
  e5efcc:	e13ff215 	stw	r4,-56(fp)
  e5efd0:	00001506 	br	e5f028 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  e5efd4:	e0bffb17 	ldw	r2,-20(fp)
  e5efd8:	e0bff315 	stw	r2,-52(fp)
  e5efdc:	00000806 	br	e5f000 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  e5efe0:	e0ffff17 	ldw	r3,-4(fp)
  e5efe4:	e0bff317 	ldw	r2,-52(fp)
  e5efe8:	1885883a 	add	r2,r3,r2
  e5efec:	e0fff717 	ldw	r3,-36(fp)
  e5eff0:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  e5eff4:	e0fff317 	ldw	r3,-52(fp)
  e5eff8:	18c00044 	addi	r3,r3,1
  e5effc:	e0fff315 	stw	r3,-52(fp)
  e5f000:	e13ffa17 	ldw	r4,-24(fp)
  e5f004:	e0bff317 	ldw	r2,-52(fp)
  e5f008:	20bff52e 	bgeu	r4,r2,e5efe0 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  e5f00c:	e0ffff17 	ldw	r3,-4(fp)
  e5f010:	e13ffe17 	ldw	r4,-8(fp)
  e5f014:	1907883a 	add	r3,r3,r4
  e5f018:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  e5f01c:	e0bff217 	ldw	r2,-56(fp)
  e5f020:	10800044 	addi	r2,r2,1
  e5f024:	e0bff215 	stw	r2,-56(fp)
  e5f028:	e0fff817 	ldw	r3,-32(fp)
  e5f02c:	e13ff217 	ldw	r4,-56(fp)
  e5f030:	193fe82e 	bgeu	r3,r4,e5efd4 <alt_up_pixel_buffer_dma_draw_box+0x324>
  e5f034:	00005706 	br	e5f194 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  e5f038:	e0bfee17 	ldw	r2,-72(fp)
  e5f03c:	10800e17 	ldw	r2,56(r2)
  e5f040:	10800098 	cmpnei	r2,r2,2
  e5f044:	1000291e 	bne	r2,zero,e5f0ec <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  e5f048:	e0fffe17 	ldw	r3,-8(fp)
  e5f04c:	e0fffe17 	ldw	r3,-8(fp)
  e5f050:	18c5883a 	add	r2,r3,r3
  e5f054:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  e5f058:	e13ff917 	ldw	r4,-28(fp)
  e5f05c:	e0fffe17 	ldw	r3,-8(fp)
  e5f060:	20c5383a 	mul	r2,r4,r3
  e5f064:	e13fff17 	ldw	r4,-4(fp)
  e5f068:	2089883a 	add	r4,r4,r2
  e5f06c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  e5f070:	e0bff917 	ldw	r2,-28(fp)
  e5f074:	e0bff215 	stw	r2,-56(fp)
  e5f078:	00001806 	br	e5f0dc <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  e5f07c:	e0fffb17 	ldw	r3,-20(fp)
  e5f080:	e0fff315 	stw	r3,-52(fp)
  e5f084:	00000b06 	br	e5f0b4 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  e5f088:	e13ff317 	ldw	r4,-52(fp)
  e5f08c:	e13ff317 	ldw	r4,-52(fp)
  e5f090:	2105883a 	add	r2,r4,r4
  e5f094:	1007883a 	mov	r3,r2
  e5f098:	e0bfff17 	ldw	r2,-4(fp)
  e5f09c:	1885883a 	add	r2,r3,r2
  e5f0a0:	e0fff717 	ldw	r3,-36(fp)
  e5f0a4:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  e5f0a8:	e0bff317 	ldw	r2,-52(fp)
  e5f0ac:	10800044 	addi	r2,r2,1
  e5f0b0:	e0bff315 	stw	r2,-52(fp)
  e5f0b4:	e0fffa17 	ldw	r3,-24(fp)
  e5f0b8:	e13ff317 	ldw	r4,-52(fp)
  e5f0bc:	193ff22e 	bgeu	r3,r4,e5f088 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  e5f0c0:	e0bfff17 	ldw	r2,-4(fp)
  e5f0c4:	e0fffe17 	ldw	r3,-8(fp)
  e5f0c8:	10c5883a 	add	r2,r2,r3
  e5f0cc:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  e5f0d0:	e13ff217 	ldw	r4,-56(fp)
  e5f0d4:	21000044 	addi	r4,r4,1
  e5f0d8:	e13ff215 	stw	r4,-56(fp)
  e5f0dc:	e0bff817 	ldw	r2,-32(fp)
  e5f0e0:	e0fff217 	ldw	r3,-56(fp)
  e5f0e4:	10ffe52e 	bgeu	r2,r3,e5f07c <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  e5f0e8:	00002a06 	br	e5f194 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  e5f0ec:	e13ffe17 	ldw	r4,-8(fp)
  e5f0f0:	e13ffe17 	ldw	r4,-8(fp)
  e5f0f4:	2105883a 	add	r2,r4,r4
  e5f0f8:	1085883a 	add	r2,r2,r2
  e5f0fc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  e5f100:	e0fff917 	ldw	r3,-28(fp)
  e5f104:	e13ffe17 	ldw	r4,-8(fp)
  e5f108:	1905383a 	mul	r2,r3,r4
  e5f10c:	e0ffff17 	ldw	r3,-4(fp)
  e5f110:	1887883a 	add	r3,r3,r2
  e5f114:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  e5f118:	e13ff917 	ldw	r4,-28(fp)
  e5f11c:	e13ff215 	stw	r4,-56(fp)
  e5f120:	00001906 	br	e5f188 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  e5f124:	e0bffb17 	ldw	r2,-20(fp)
  e5f128:	e0bff315 	stw	r2,-52(fp)
  e5f12c:	00000c06 	br	e5f160 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  e5f130:	e0fff317 	ldw	r3,-52(fp)
  e5f134:	e0fff317 	ldw	r3,-52(fp)
  e5f138:	18c5883a 	add	r2,r3,r3
  e5f13c:	1085883a 	add	r2,r2,r2
  e5f140:	1007883a 	mov	r3,r2
  e5f144:	e0bfff17 	ldw	r2,-4(fp)
  e5f148:	1885883a 	add	r2,r3,r2
  e5f14c:	e0fff717 	ldw	r3,-36(fp)
  e5f150:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  e5f154:	e13ff317 	ldw	r4,-52(fp)
  e5f158:	21000044 	addi	r4,r4,1
  e5f15c:	e13ff315 	stw	r4,-52(fp)
  e5f160:	e0bffa17 	ldw	r2,-24(fp)
  e5f164:	e0fff317 	ldw	r3,-52(fp)
  e5f168:	10fff12e 	bgeu	r2,r3,e5f130 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  e5f16c:	e13fff17 	ldw	r4,-4(fp)
  e5f170:	e0bffe17 	ldw	r2,-8(fp)
  e5f174:	2089883a 	add	r4,r4,r2
  e5f178:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  e5f17c:	e0fff217 	ldw	r3,-56(fp)
  e5f180:	18c00044 	addi	r3,r3,1
  e5f184:	e0fff215 	stw	r3,-56(fp)
  e5f188:	e13ff817 	ldw	r4,-32(fp)
  e5f18c:	e0bff217 	ldw	r2,-56(fp)
  e5f190:	20bfe42e 	bgeu	r4,r2,e5f124 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  e5f194:	e037883a 	mov	sp,fp
  e5f198:	df000017 	ldw	fp,0(sp)
  e5f19c:	dec00104 	addi	sp,sp,4
  e5f1a0:	f800283a 	ret

00e5f1a4 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  e5f1a4:	defff204 	addi	sp,sp,-56
  e5f1a8:	df000d15 	stw	fp,52(sp)
  e5f1ac:	df000d04 	addi	fp,sp,52
  e5f1b0:	e13ff315 	stw	r4,-52(fp)
  e5f1b4:	e17ff415 	stw	r5,-48(fp)
  e5f1b8:	e1bff515 	stw	r6,-44(fp)
  e5f1bc:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  e5f1c0:	e0bff317 	ldw	r2,-52(fp)
  e5f1c4:	10800f17 	ldw	r2,60(r2)
  e5f1c8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  e5f1cc:	e0bff317 	ldw	r2,-52(fp)
  e5f1d0:	10801017 	ldw	r2,64(r2)
  e5f1d4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  e5f1d8:	e0bff417 	ldw	r2,-48(fp)
  e5f1dc:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  e5f1e0:	e0fff517 	ldw	r3,-44(fp)
  e5f1e4:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  e5f1e8:	e13ff617 	ldw	r4,-40(fp)
  e5f1ec:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  e5f1f0:	e0800117 	ldw	r2,4(fp)
  e5f1f4:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  e5f1f8:	e0fffb17 	ldw	r3,-20(fp)
  e5f1fc:	e13ffc17 	ldw	r4,-16(fp)
  e5f200:	1900042e 	bgeu	r3,r4,e5f214 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  e5f204:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  e5f208:	e0fffb17 	ldw	r3,-20(fp)
  e5f20c:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  e5f210:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  e5f214:	e13ffc17 	ldw	r4,-16(fp)
  e5f218:	e0bffe17 	ldw	r2,-8(fp)
  e5f21c:	2080b12e 	bgeu	r4,r2,e5f4e4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
  e5f220:	e0fffa17 	ldw	r3,-24(fp)
  e5f224:	e13ffd17 	ldw	r4,-12(fp)
  e5f228:	19000136 	bltu	r3,r4,e5f230 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  e5f22c:	0000ad06 	br	e5f4e4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  e5f230:	e0bffb17 	ldw	r2,-20(fp)
  e5f234:	e0fffe17 	ldw	r3,-8(fp)
  e5f238:	10c00336 	bltu	r2,r3,e5f248 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  e5f23c:	e13ffe17 	ldw	r4,-8(fp)
  e5f240:	213fffc4 	addi	r4,r4,-1
  e5f244:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  e5f248:	e0800217 	ldw	r2,8(fp)
  e5f24c:	10800058 	cmpnei	r2,r2,1
  e5f250:	1000041e 	bne	r2,zero,e5f264 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  e5f254:	e0bff317 	ldw	r2,-52(fp)
  e5f258:	10800c17 	ldw	r2,48(r2)
  e5f25c:	e0bfff15 	stw	r2,-4(fp)
  e5f260:	00000306 	br	e5f270 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  e5f264:	e0bff317 	ldw	r2,-52(fp)
  e5f268:	10800b17 	ldw	r2,44(r2)
  e5f26c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  e5f270:	e0bff317 	ldw	r2,-52(fp)
  e5f274:	10800d17 	ldw	r2,52(r2)
  e5f278:	1004c03a 	cmpne	r2,r2,zero
  e5f27c:	1000431e 	bne	r2,zero,e5f38c <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  e5f280:	e0bff317 	ldw	r2,-52(fp)
  e5f284:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  e5f288:	e0fffa17 	ldw	r3,-24(fp)
  e5f28c:	1884983a 	sll	r2,r3,r2
  e5f290:	e13fff17 	ldw	r4,-4(fp)
  e5f294:	2089883a 	add	r4,r4,r2
  e5f298:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  e5f29c:	e0bff317 	ldw	r2,-52(fp)
  e5f2a0:	10800e17 	ldw	r2,56(r2)
  e5f2a4:	10800058 	cmpnei	r2,r2,1
  e5f2a8:	10000f1e 	bne	r2,zero,e5f2e8 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  e5f2ac:	e0bffc17 	ldw	r2,-16(fp)
  e5f2b0:	e0bff815 	stw	r2,-32(fp)
  e5f2b4:	00000806 	br	e5f2d8 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  e5f2b8:	e0ffff17 	ldw	r3,-4(fp)
  e5f2bc:	e0bff817 	ldw	r2,-32(fp)
  e5f2c0:	1885883a 	add	r2,r3,r2
  e5f2c4:	e0fff917 	ldw	r3,-28(fp)
  e5f2c8:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  e5f2cc:	e0fff817 	ldw	r3,-32(fp)
  e5f2d0:	18c00044 	addi	r3,r3,1
  e5f2d4:	e0fff815 	stw	r3,-32(fp)
  e5f2d8:	e13ffb17 	ldw	r4,-20(fp)
  e5f2dc:	e0bff817 	ldw	r2,-32(fp)
  e5f2e0:	20bff52e 	bgeu	r4,r2,e5f2b8 <alt_up_pixel_buffer_dma_draw_hline+0x114>
  e5f2e4:	00007f06 	br	e5f4e4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  e5f2e8:	e0bff317 	ldw	r2,-52(fp)
  e5f2ec:	10800e17 	ldw	r2,56(r2)
  e5f2f0:	10800098 	cmpnei	r2,r2,2
  e5f2f4:	1000121e 	bne	r2,zero,e5f340 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  e5f2f8:	e0fffc17 	ldw	r3,-16(fp)
  e5f2fc:	e0fff815 	stw	r3,-32(fp)
  e5f300:	00000b06 	br	e5f330 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  e5f304:	e13ff817 	ldw	r4,-32(fp)
  e5f308:	e13ff817 	ldw	r4,-32(fp)
  e5f30c:	2105883a 	add	r2,r4,r4
  e5f310:	1007883a 	mov	r3,r2
  e5f314:	e0bfff17 	ldw	r2,-4(fp)
  e5f318:	1885883a 	add	r2,r3,r2
  e5f31c:	e0fff917 	ldw	r3,-28(fp)
  e5f320:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  e5f324:	e0bff817 	ldw	r2,-32(fp)
  e5f328:	10800044 	addi	r2,r2,1
  e5f32c:	e0bff815 	stw	r2,-32(fp)
  e5f330:	e0fffb17 	ldw	r3,-20(fp)
  e5f334:	e13ff817 	ldw	r4,-32(fp)
  e5f338:	193ff22e 	bgeu	r3,r4,e5f304 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  e5f33c:	00006906 	br	e5f4e4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  e5f340:	e0bffc17 	ldw	r2,-16(fp)
  e5f344:	e0bff815 	stw	r2,-32(fp)
  e5f348:	00000c06 	br	e5f37c <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  e5f34c:	e0fff817 	ldw	r3,-32(fp)
  e5f350:	e0fff817 	ldw	r3,-32(fp)
  e5f354:	18c5883a 	add	r2,r3,r3
  e5f358:	1085883a 	add	r2,r2,r2
  e5f35c:	1007883a 	mov	r3,r2
  e5f360:	e0bfff17 	ldw	r2,-4(fp)
  e5f364:	1885883a 	add	r2,r3,r2
  e5f368:	e0fff917 	ldw	r3,-28(fp)
  e5f36c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  e5f370:	e13ff817 	ldw	r4,-32(fp)
  e5f374:	21000044 	addi	r4,r4,1
  e5f378:	e13ff815 	stw	r4,-32(fp)
  e5f37c:	e0bffb17 	ldw	r2,-20(fp)
  e5f380:	e0fff817 	ldw	r3,-32(fp)
  e5f384:	10fff12e 	bgeu	r2,r3,e5f34c <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  e5f388:	00005606 	br	e5f4e4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  e5f38c:	e0bff317 	ldw	r2,-52(fp)
  e5f390:	10800e17 	ldw	r2,56(r2)
  e5f394:	10800058 	cmpnei	r2,r2,1
  e5f398:	1000151e 	bne	r2,zero,e5f3f0 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  e5f39c:	e13ffa17 	ldw	r4,-24(fp)
  e5f3a0:	e0fffe17 	ldw	r3,-8(fp)
  e5f3a4:	20c5383a 	mul	r2,r4,r3
  e5f3a8:	e13fff17 	ldw	r4,-4(fp)
  e5f3ac:	2089883a 	add	r4,r4,r2
  e5f3b0:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  e5f3b4:	e0bffc17 	ldw	r2,-16(fp)
  e5f3b8:	e0bff715 	stw	r2,-36(fp)
  e5f3bc:	00000806 	br	e5f3e0 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  e5f3c0:	e0ffff17 	ldw	r3,-4(fp)
  e5f3c4:	e0bff717 	ldw	r2,-36(fp)
  e5f3c8:	1885883a 	add	r2,r3,r2
  e5f3cc:	e0fff917 	ldw	r3,-28(fp)
  e5f3d0:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  e5f3d4:	e0fff717 	ldw	r3,-36(fp)
  e5f3d8:	18c00044 	addi	r3,r3,1
  e5f3dc:	e0fff715 	stw	r3,-36(fp)
  e5f3e0:	e13ffb17 	ldw	r4,-20(fp)
  e5f3e4:	e0bff717 	ldw	r2,-36(fp)
  e5f3e8:	20bff52e 	bgeu	r4,r2,e5f3c0 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  e5f3ec:	00003d06 	br	e5f4e4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  e5f3f0:	e0bff317 	ldw	r2,-52(fp)
  e5f3f4:	10800e17 	ldw	r2,56(r2)
  e5f3f8:	10800098 	cmpnei	r2,r2,2
  e5f3fc:	10001c1e 	bne	r2,zero,e5f470 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  e5f400:	e0fffe17 	ldw	r3,-8(fp)
  e5f404:	e0fffe17 	ldw	r3,-8(fp)
  e5f408:	18c5883a 	add	r2,r3,r3
  e5f40c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  e5f410:	e13ffa17 	ldw	r4,-24(fp)
  e5f414:	e0fffe17 	ldw	r3,-8(fp)
  e5f418:	20c5383a 	mul	r2,r4,r3
  e5f41c:	e13fff17 	ldw	r4,-4(fp)
  e5f420:	2089883a 	add	r4,r4,r2
  e5f424:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  e5f428:	e0bffc17 	ldw	r2,-16(fp)
  e5f42c:	e0bff715 	stw	r2,-36(fp)
  e5f430:	00000b06 	br	e5f460 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  e5f434:	e0fff717 	ldw	r3,-36(fp)
  e5f438:	e0fff717 	ldw	r3,-36(fp)
  e5f43c:	18c5883a 	add	r2,r3,r3
  e5f440:	1007883a 	mov	r3,r2
  e5f444:	e0bfff17 	ldw	r2,-4(fp)
  e5f448:	1885883a 	add	r2,r3,r2
  e5f44c:	e0fff917 	ldw	r3,-28(fp)
  e5f450:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  e5f454:	e13ff717 	ldw	r4,-36(fp)
  e5f458:	21000044 	addi	r4,r4,1
  e5f45c:	e13ff715 	stw	r4,-36(fp)
  e5f460:	e0bffb17 	ldw	r2,-20(fp)
  e5f464:	e0fff717 	ldw	r3,-36(fp)
  e5f468:	10fff22e 	bgeu	r2,r3,e5f434 <alt_up_pixel_buffer_dma_draw_hline+0x290>
  e5f46c:	00001d06 	br	e5f4e4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  e5f470:	e13ffe17 	ldw	r4,-8(fp)
  e5f474:	e13ffe17 	ldw	r4,-8(fp)
  e5f478:	2105883a 	add	r2,r4,r4
  e5f47c:	1085883a 	add	r2,r2,r2
  e5f480:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  e5f484:	e0fffa17 	ldw	r3,-24(fp)
  e5f488:	e13ffe17 	ldw	r4,-8(fp)
  e5f48c:	1905383a 	mul	r2,r3,r4
  e5f490:	e0ffff17 	ldw	r3,-4(fp)
  e5f494:	1887883a 	add	r3,r3,r2
  e5f498:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  e5f49c:	e13ffc17 	ldw	r4,-16(fp)
  e5f4a0:	e13ff715 	stw	r4,-36(fp)
  e5f4a4:	00000c06 	br	e5f4d8 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  e5f4a8:	e0fff717 	ldw	r3,-36(fp)
  e5f4ac:	e0fff717 	ldw	r3,-36(fp)
  e5f4b0:	18c5883a 	add	r2,r3,r3
  e5f4b4:	1085883a 	add	r2,r2,r2
  e5f4b8:	1007883a 	mov	r3,r2
  e5f4bc:	e0bfff17 	ldw	r2,-4(fp)
  e5f4c0:	1885883a 	add	r2,r3,r2
  e5f4c4:	e0fff917 	ldw	r3,-28(fp)
  e5f4c8:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  e5f4cc:	e13ff717 	ldw	r4,-36(fp)
  e5f4d0:	21000044 	addi	r4,r4,1
  e5f4d4:	e13ff715 	stw	r4,-36(fp)
  e5f4d8:	e0bffb17 	ldw	r2,-20(fp)
  e5f4dc:	e0fff717 	ldw	r3,-36(fp)
  e5f4e0:	10fff12e 	bgeu	r2,r3,e5f4a8 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  e5f4e4:	e037883a 	mov	sp,fp
  e5f4e8:	df000017 	ldw	fp,0(sp)
  e5f4ec:	dec00104 	addi	sp,sp,4
  e5f4f0:	f800283a 	ret

00e5f4f4 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  e5f4f4:	defff104 	addi	sp,sp,-60
  e5f4f8:	df000e15 	stw	fp,56(sp)
  e5f4fc:	df000e04 	addi	fp,sp,56
  e5f500:	e13ff215 	stw	r4,-56(fp)
  e5f504:	e17ff315 	stw	r5,-52(fp)
  e5f508:	e1bff415 	stw	r6,-48(fp)
  e5f50c:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  e5f510:	e0bff217 	ldw	r2,-56(fp)
  e5f514:	10800f17 	ldw	r2,60(r2)
  e5f518:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  e5f51c:	e0bff217 	ldw	r2,-56(fp)
  e5f520:	10801017 	ldw	r2,64(r2)
  e5f524:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  e5f528:	e0bff317 	ldw	r2,-52(fp)
  e5f52c:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  e5f530:	e0fff417 	ldw	r3,-48(fp)
  e5f534:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  e5f538:	e13ff517 	ldw	r4,-44(fp)
  e5f53c:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  e5f540:	e0800117 	ldw	r2,4(fp)
  e5f544:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  e5f548:	e0fffa17 	ldw	r3,-24(fp)
  e5f54c:	e13ffb17 	ldw	r4,-20(fp)
  e5f550:	1900042e 	bgeu	r3,r4,e5f564 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  e5f554:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  e5f558:	e0fffa17 	ldw	r3,-24(fp)
  e5f55c:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  e5f560:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  e5f564:	e13ffc17 	ldw	r4,-16(fp)
  e5f568:	e0bffe17 	ldw	r2,-8(fp)
  e5f56c:	2080d12e 	bgeu	r4,r2,e5f8b4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  e5f570:	e0fffb17 	ldw	r3,-20(fp)
  e5f574:	e13ffd17 	ldw	r4,-12(fp)
  e5f578:	19000136 	bltu	r3,r4,e5f580 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  e5f57c:	0000cd06 	br	e5f8b4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  e5f580:	e0bffa17 	ldw	r2,-24(fp)
  e5f584:	e0fffd17 	ldw	r3,-12(fp)
  e5f588:	10c00336 	bltu	r2,r3,e5f598 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  e5f58c:	e13ffd17 	ldw	r4,-12(fp)
  e5f590:	213fffc4 	addi	r4,r4,-1
  e5f594:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  e5f598:	e0800217 	ldw	r2,8(fp)
  e5f59c:	10800058 	cmpnei	r2,r2,1
  e5f5a0:	1000041e 	bne	r2,zero,e5f5b4 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  e5f5a4:	e0bff217 	ldw	r2,-56(fp)
  e5f5a8:	10800c17 	ldw	r2,48(r2)
  e5f5ac:	e0bfff15 	stw	r2,-4(fp)
  e5f5b0:	00000306 	br	e5f5c0 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  e5f5b4:	e0bff217 	ldw	r2,-56(fp)
  e5f5b8:	10800b17 	ldw	r2,44(r2)
  e5f5bc:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  e5f5c0:	e0bff217 	ldw	r2,-56(fp)
  e5f5c4:	10800d17 	ldw	r2,52(r2)
  e5f5c8:	1004c03a 	cmpne	r2,r2,zero
  e5f5cc:	1000571e 	bne	r2,zero,e5f72c <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  e5f5d0:	e0bff217 	ldw	r2,-56(fp)
  e5f5d4:	10801317 	ldw	r2,76(r2)
  e5f5d8:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  e5f5dc:	e0bff717 	ldw	r2,-36(fp)
  e5f5e0:	e0fffb17 	ldw	r3,-20(fp)
  e5f5e4:	1884983a 	sll	r2,r3,r2
  e5f5e8:	e13fff17 	ldw	r4,-4(fp)
  e5f5ec:	2089883a 	add	r4,r4,r2
  e5f5f0:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  e5f5f4:	e0bff217 	ldw	r2,-56(fp)
  e5f5f8:	10800e17 	ldw	r2,56(r2)
  e5f5fc:	10800058 	cmpnei	r2,r2,1
  e5f600:	1000151e 	bne	r2,zero,e5f658 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  e5f604:	e0bffb17 	ldw	r2,-20(fp)
  e5f608:	e0bff815 	stw	r2,-32(fp)
  e5f60c:	00000e06 	br	e5f648 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  e5f610:	e0ffff17 	ldw	r3,-4(fp)
  e5f614:	e0bffc17 	ldw	r2,-16(fp)
  e5f618:	1885883a 	add	r2,r3,r2
  e5f61c:	e0fff917 	ldw	r3,-28(fp)
  e5f620:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  e5f624:	e0fff717 	ldw	r3,-36(fp)
  e5f628:	00800044 	movi	r2,1
  e5f62c:	10c4983a 	sll	r2,r2,r3
  e5f630:	e0ffff17 	ldw	r3,-4(fp)
  e5f634:	1887883a 	add	r3,r3,r2
  e5f638:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  e5f63c:	e13ff817 	ldw	r4,-32(fp)
  e5f640:	21000044 	addi	r4,r4,1
  e5f644:	e13ff815 	stw	r4,-32(fp)
  e5f648:	e0bffa17 	ldw	r2,-24(fp)
  e5f64c:	e0fff817 	ldw	r3,-32(fp)
  e5f650:	10ffef2e 	bgeu	r2,r3,e5f610 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  e5f654:	00009706 	br	e5f8b4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  e5f658:	e0bff217 	ldw	r2,-56(fp)
  e5f65c:	10800e17 	ldw	r2,56(r2)
  e5f660:	10800098 	cmpnei	r2,r2,2
  e5f664:	1000181e 	bne	r2,zero,e5f6c8 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  e5f668:	e13ffb17 	ldw	r4,-20(fp)
  e5f66c:	e13ff815 	stw	r4,-32(fp)
  e5f670:	00001106 	br	e5f6b8 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  e5f674:	e0fffc17 	ldw	r3,-16(fp)
  e5f678:	e0fffc17 	ldw	r3,-16(fp)
  e5f67c:	18c5883a 	add	r2,r3,r3
  e5f680:	1007883a 	mov	r3,r2
  e5f684:	e0bfff17 	ldw	r2,-4(fp)
  e5f688:	1885883a 	add	r2,r3,r2
  e5f68c:	e0fff917 	ldw	r3,-28(fp)
  e5f690:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  e5f694:	e0fff717 	ldw	r3,-36(fp)
  e5f698:	00800044 	movi	r2,1
  e5f69c:	10c4983a 	sll	r2,r2,r3
  e5f6a0:	e13fff17 	ldw	r4,-4(fp)
  e5f6a4:	2089883a 	add	r4,r4,r2
  e5f6a8:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  e5f6ac:	e0bff817 	ldw	r2,-32(fp)
  e5f6b0:	10800044 	addi	r2,r2,1
  e5f6b4:	e0bff815 	stw	r2,-32(fp)
  e5f6b8:	e0fffa17 	ldw	r3,-24(fp)
  e5f6bc:	e13ff817 	ldw	r4,-32(fp)
  e5f6c0:	193fec2e 	bgeu	r3,r4,e5f674 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  e5f6c4:	00007b06 	br	e5f8b4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  e5f6c8:	e0bffb17 	ldw	r2,-20(fp)
  e5f6cc:	e0bff815 	stw	r2,-32(fp)
  e5f6d0:	00001206 	br	e5f71c <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  e5f6d4:	e0fffc17 	ldw	r3,-16(fp)
  e5f6d8:	e0fffc17 	ldw	r3,-16(fp)
  e5f6dc:	18c5883a 	add	r2,r3,r3
  e5f6e0:	1085883a 	add	r2,r2,r2
  e5f6e4:	1007883a 	mov	r3,r2
  e5f6e8:	e0bfff17 	ldw	r2,-4(fp)
  e5f6ec:	1885883a 	add	r2,r3,r2
  e5f6f0:	e0fff917 	ldw	r3,-28(fp)
  e5f6f4:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  e5f6f8:	e0fff717 	ldw	r3,-36(fp)
  e5f6fc:	00800044 	movi	r2,1
  e5f700:	10c4983a 	sll	r2,r2,r3
  e5f704:	e13fff17 	ldw	r4,-4(fp)
  e5f708:	2089883a 	add	r4,r4,r2
  e5f70c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  e5f710:	e0bff817 	ldw	r2,-32(fp)
  e5f714:	10800044 	addi	r2,r2,1
  e5f718:	e0bff815 	stw	r2,-32(fp)
  e5f71c:	e0fffa17 	ldw	r3,-24(fp)
  e5f720:	e13ff817 	ldw	r4,-32(fp)
  e5f724:	193feb2e 	bgeu	r3,r4,e5f6d4 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  e5f728:	00006206 	br	e5f8b4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  e5f72c:	e0bff217 	ldw	r2,-56(fp)
  e5f730:	10800e17 	ldw	r2,56(r2)
  e5f734:	10800058 	cmpnei	r2,r2,1
  e5f738:	1000191e 	bne	r2,zero,e5f7a0 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  e5f73c:	e0fffb17 	ldw	r3,-20(fp)
  e5f740:	e13ffe17 	ldw	r4,-8(fp)
  e5f744:	1905383a 	mul	r2,r3,r4
  e5f748:	e0ffff17 	ldw	r3,-4(fp)
  e5f74c:	1887883a 	add	r3,r3,r2
  e5f750:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  e5f754:	e13ffb17 	ldw	r4,-20(fp)
  e5f758:	e13ff615 	stw	r4,-40(fp)
  e5f75c:	00000c06 	br	e5f790 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  e5f760:	e0ffff17 	ldw	r3,-4(fp)
  e5f764:	e0bffc17 	ldw	r2,-16(fp)
  e5f768:	1885883a 	add	r2,r3,r2
  e5f76c:	e0fff917 	ldw	r3,-28(fp)
  e5f770:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  e5f774:	e0bfff17 	ldw	r2,-4(fp)
  e5f778:	e0fffe17 	ldw	r3,-8(fp)
  e5f77c:	10c5883a 	add	r2,r2,r3
  e5f780:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  e5f784:	e13ff617 	ldw	r4,-40(fp)
  e5f788:	21000044 	addi	r4,r4,1
  e5f78c:	e13ff615 	stw	r4,-40(fp)
  e5f790:	e0bffa17 	ldw	r2,-24(fp)
  e5f794:	e0fff617 	ldw	r3,-40(fp)
  e5f798:	10fff12e 	bgeu	r2,r3,e5f760 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  e5f79c:	00004506 	br	e5f8b4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  e5f7a0:	e0bff217 	ldw	r2,-56(fp)
  e5f7a4:	10800e17 	ldw	r2,56(r2)
  e5f7a8:	10800098 	cmpnei	r2,r2,2
  e5f7ac:	1000201e 	bne	r2,zero,e5f830 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  e5f7b0:	e13ffe17 	ldw	r4,-8(fp)
  e5f7b4:	e13ffe17 	ldw	r4,-8(fp)
  e5f7b8:	2105883a 	add	r2,r4,r4
  e5f7bc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  e5f7c0:	e0fffb17 	ldw	r3,-20(fp)
  e5f7c4:	e13ffe17 	ldw	r4,-8(fp)
  e5f7c8:	1905383a 	mul	r2,r3,r4
  e5f7cc:	e0ffff17 	ldw	r3,-4(fp)
  e5f7d0:	1887883a 	add	r3,r3,r2
  e5f7d4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  e5f7d8:	e13ffb17 	ldw	r4,-20(fp)
  e5f7dc:	e13ff615 	stw	r4,-40(fp)
  e5f7e0:	00000f06 	br	e5f820 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  e5f7e4:	e0fffc17 	ldw	r3,-16(fp)
  e5f7e8:	e0fffc17 	ldw	r3,-16(fp)
  e5f7ec:	18c5883a 	add	r2,r3,r3
  e5f7f0:	1007883a 	mov	r3,r2
  e5f7f4:	e0bfff17 	ldw	r2,-4(fp)
  e5f7f8:	1885883a 	add	r2,r3,r2
  e5f7fc:	e0fff917 	ldw	r3,-28(fp)
  e5f800:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  e5f804:	e13fff17 	ldw	r4,-4(fp)
  e5f808:	e0bffe17 	ldw	r2,-8(fp)
  e5f80c:	2089883a 	add	r4,r4,r2
  e5f810:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  e5f814:	e0fff617 	ldw	r3,-40(fp)
  e5f818:	18c00044 	addi	r3,r3,1
  e5f81c:	e0fff615 	stw	r3,-40(fp)
  e5f820:	e13ffa17 	ldw	r4,-24(fp)
  e5f824:	e0bff617 	ldw	r2,-40(fp)
  e5f828:	20bfee2e 	bgeu	r4,r2,e5f7e4 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  e5f82c:	00002106 	br	e5f8b4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  e5f830:	e0fffe17 	ldw	r3,-8(fp)
  e5f834:	e0fffe17 	ldw	r3,-8(fp)
  e5f838:	18c5883a 	add	r2,r3,r3
  e5f83c:	1085883a 	add	r2,r2,r2
  e5f840:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  e5f844:	e13ffb17 	ldw	r4,-20(fp)
  e5f848:	e0fffe17 	ldw	r3,-8(fp)
  e5f84c:	20c5383a 	mul	r2,r4,r3
  e5f850:	e13fff17 	ldw	r4,-4(fp)
  e5f854:	2089883a 	add	r4,r4,r2
  e5f858:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  e5f85c:	e0bffb17 	ldw	r2,-20(fp)
  e5f860:	e0bff615 	stw	r2,-40(fp)
  e5f864:	00001006 	br	e5f8a8 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  e5f868:	e0fffc17 	ldw	r3,-16(fp)
  e5f86c:	e0fffc17 	ldw	r3,-16(fp)
  e5f870:	18c5883a 	add	r2,r3,r3
  e5f874:	1085883a 	add	r2,r2,r2
  e5f878:	1007883a 	mov	r3,r2
  e5f87c:	e0bfff17 	ldw	r2,-4(fp)
  e5f880:	1885883a 	add	r2,r3,r2
  e5f884:	e0fff917 	ldw	r3,-28(fp)
  e5f888:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  e5f88c:	e13fff17 	ldw	r4,-4(fp)
  e5f890:	e0bffe17 	ldw	r2,-8(fp)
  e5f894:	2089883a 	add	r4,r4,r2
  e5f898:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  e5f89c:	e0fff617 	ldw	r3,-40(fp)
  e5f8a0:	18c00044 	addi	r3,r3,1
  e5f8a4:	e0fff615 	stw	r3,-40(fp)
  e5f8a8:	e13ffa17 	ldw	r4,-24(fp)
  e5f8ac:	e0bff617 	ldw	r2,-40(fp)
  e5f8b0:	20bfed2e 	bgeu	r4,r2,e5f868 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  e5f8b4:	e037883a 	mov	sp,fp
  e5f8b8:	df000017 	ldw	fp,0(sp)
  e5f8bc:	dec00104 	addi	sp,sp,4
  e5f8c0:	f800283a 	ret

00e5f8c4 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  e5f8c4:	defff804 	addi	sp,sp,-32
  e5f8c8:	dfc00715 	stw	ra,28(sp)
  e5f8cc:	df000615 	stw	fp,24(sp)
  e5f8d0:	df000604 	addi	fp,sp,24
  e5f8d4:	e13ffc15 	stw	r4,-16(fp)
  e5f8d8:	e17ffd15 	stw	r5,-12(fp)
  e5f8dc:	e1bffe15 	stw	r6,-8(fp)
  e5f8e0:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  e5f8e4:	e0800317 	ldw	r2,12(fp)
  e5f8e8:	d8800015 	stw	r2,0(sp)
  e5f8ec:	e0800417 	ldw	r2,16(fp)
  e5f8f0:	d8800115 	stw	r2,4(sp)
  e5f8f4:	e13ffc17 	ldw	r4,-16(fp)
  e5f8f8:	e17ffd17 	ldw	r5,-12(fp)
  e5f8fc:	e1bfff17 	ldw	r6,-4(fp)
  e5f900:	e1fffe17 	ldw	r7,-8(fp)
  e5f904:	0e5f1a40 	call	e5f1a4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  e5f908:	e0800317 	ldw	r2,12(fp)
  e5f90c:	d8800015 	stw	r2,0(sp)
  e5f910:	e0800417 	ldw	r2,16(fp)
  e5f914:	d8800115 	stw	r2,4(sp)
  e5f918:	e13ffc17 	ldw	r4,-16(fp)
  e5f91c:	e17ffd17 	ldw	r5,-12(fp)
  e5f920:	e1bfff17 	ldw	r6,-4(fp)
  e5f924:	e1c00217 	ldw	r7,8(fp)
  e5f928:	0e5f1a40 	call	e5f1a4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  e5f92c:	e0800317 	ldw	r2,12(fp)
  e5f930:	d8800015 	stw	r2,0(sp)
  e5f934:	e0800417 	ldw	r2,16(fp)
  e5f938:	d8800115 	stw	r2,4(sp)
  e5f93c:	e13ffc17 	ldw	r4,-16(fp)
  e5f940:	e17ffd17 	ldw	r5,-12(fp)
  e5f944:	e1bffe17 	ldw	r6,-8(fp)
  e5f948:	e1c00217 	ldw	r7,8(fp)
  e5f94c:	0e5f4f40 	call	e5f4f4 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  e5f950:	e0800317 	ldw	r2,12(fp)
  e5f954:	d8800015 	stw	r2,0(sp)
  e5f958:	e0800417 	ldw	r2,16(fp)
  e5f95c:	d8800115 	stw	r2,4(sp)
  e5f960:	e13ffc17 	ldw	r4,-16(fp)
  e5f964:	e17fff17 	ldw	r5,-4(fp)
  e5f968:	e1bffe17 	ldw	r6,-8(fp)
  e5f96c:	e1c00217 	ldw	r7,8(fp)
  e5f970:	0e5f4f40 	call	e5f4f4 <alt_up_pixel_buffer_dma_draw_vline>
}
  e5f974:	e037883a 	mov	sp,fp
  e5f978:	dfc00117 	ldw	ra,4(sp)
  e5f97c:	df000017 	ldw	fp,0(sp)
  e5f980:	dec00204 	addi	sp,sp,8
  e5f984:	f800283a 	ret

00e5f988 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  e5f988:	defffb04 	addi	sp,sp,-20
  e5f98c:	df000415 	stw	fp,16(sp)
  e5f990:	df000404 	addi	fp,sp,16
  e5f994:	e13ffc15 	stw	r4,-16(fp)
  e5f998:	e17ffd15 	stw	r5,-12(fp)
  e5f99c:	e1bffe15 	stw	r6,-8(fp)
  e5f9a0:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  e5f9a4:	e0c00217 	ldw	r3,8(fp)
  e5f9a8:	1804c03a 	cmpne	r2,r3,zero
  e5f9ac:	10000b1e 	bne	r2,zero,e5f9dc <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  e5f9b0:	e13ffd17 	ldw	r4,-12(fp)
  e5f9b4:	e0ffff17 	ldw	r3,-4(fp)
  e5f9b8:	20c5383a 	mul	r2,r4,r3
  e5f9bc:	e13ffe17 	ldw	r4,-8(fp)
  e5f9c0:	1105883a 	add	r2,r2,r4
  e5f9c4:	1007883a 	mov	r3,r2
  e5f9c8:	e0bffc17 	ldw	r2,-16(fp)
  e5f9cc:	1885883a 	add	r2,r3,r2
  e5f9d0:	e0c00117 	ldw	r3,4(fp)
  e5f9d4:	10c00025 	stbio	r3,0(r2)
  e5f9d8:	00001b06 	br	e5fa48 <helper_plot_pixel+0xc0>
	else if (mode == 1)
  e5f9dc:	e1000217 	ldw	r4,8(fp)
  e5f9e0:	20800058 	cmpnei	r2,r4,1
  e5f9e4:	10000c1e 	bne	r2,zero,e5fa18 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  e5f9e8:	e0fffd17 	ldw	r3,-12(fp)
  e5f9ec:	e13fff17 	ldw	r4,-4(fp)
  e5f9f0:	1905383a 	mul	r2,r3,r4
  e5f9f4:	e0fffe17 	ldw	r3,-8(fp)
  e5f9f8:	10c5883a 	add	r2,r2,r3
  e5f9fc:	1085883a 	add	r2,r2,r2
  e5fa00:	1007883a 	mov	r3,r2
  e5fa04:	e0bffc17 	ldw	r2,-16(fp)
  e5fa08:	1885883a 	add	r2,r3,r2
  e5fa0c:	e1000117 	ldw	r4,4(fp)
  e5fa10:	1100002d 	sthio	r4,0(r2)
  e5fa14:	00000c06 	br	e5fa48 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  e5fa18:	e0fffd17 	ldw	r3,-12(fp)
  e5fa1c:	e13fff17 	ldw	r4,-4(fp)
  e5fa20:	1905383a 	mul	r2,r3,r4
  e5fa24:	e0fffe17 	ldw	r3,-8(fp)
  e5fa28:	10c5883a 	add	r2,r2,r3
  e5fa2c:	1085883a 	add	r2,r2,r2
  e5fa30:	1085883a 	add	r2,r2,r2
  e5fa34:	1007883a 	mov	r3,r2
  e5fa38:	e0bffc17 	ldw	r2,-16(fp)
  e5fa3c:	1885883a 	add	r2,r3,r2
  e5fa40:	e1000117 	ldw	r4,4(fp)
  e5fa44:	11000035 	stwio	r4,0(r2)
}
  e5fa48:	e037883a 	mov	sp,fp
  e5fa4c:	df000017 	ldw	fp,0(sp)
  e5fa50:	dec00104 	addi	sp,sp,4
  e5fa54:	f800283a 	ret

00e5fa58 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  e5fa58:	deffe404 	addi	sp,sp,-112
  e5fa5c:	dfc01b15 	stw	ra,108(sp)
  e5fa60:	df001a15 	stw	fp,104(sp)
  e5fa64:	df001a04 	addi	fp,sp,104
  e5fa68:	e13fe815 	stw	r4,-96(fp)
  e5fa6c:	e17fe915 	stw	r5,-92(fp)
  e5fa70:	e1bfea15 	stw	r6,-88(fp)
  e5fa74:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  e5fa78:	e0bfe917 	ldw	r2,-92(fp)
  e5fa7c:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  e5fa80:	e0ffea17 	ldw	r3,-88(fp)
  e5fa84:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  e5fa88:	e13feb17 	ldw	r4,-84(fp)
  e5fa8c:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  e5fa90:	e0800217 	ldw	r2,8(fp)
  e5fa94:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  e5fa98:	e0fff717 	ldw	r3,-36(fp)
  e5fa9c:	e13ff917 	ldw	r4,-28(fp)
  e5faa0:	1905c83a 	sub	r2,r3,r4
  e5faa4:	e0bfff15 	stw	r2,-4(fp)
  e5faa8:	e0ffff17 	ldw	r3,-4(fp)
  e5faac:	1804403a 	cmpge	r2,r3,zero
  e5fab0:	1000031e 	bne	r2,zero,e5fac0 <alt_up_pixel_buffer_dma_draw_line+0x68>
  e5fab4:	e13fff17 	ldw	r4,-4(fp)
  e5fab8:	0109c83a 	sub	r4,zero,r4
  e5fabc:	e13fff15 	stw	r4,-4(fp)
  e5fac0:	e0fff817 	ldw	r3,-32(fp)
  e5fac4:	e13ffa17 	ldw	r4,-24(fp)
  e5fac8:	1905c83a 	sub	r2,r3,r4
  e5facc:	e0bffe15 	stw	r2,-8(fp)
  e5fad0:	e0fffe17 	ldw	r3,-8(fp)
  e5fad4:	1804403a 	cmpge	r2,r3,zero
  e5fad8:	1000031e 	bne	r2,zero,e5fae8 <alt_up_pixel_buffer_dma_draw_line+0x90>
  e5fadc:	e13ffe17 	ldw	r4,-8(fp)
  e5fae0:	0109c83a 	sub	r4,zero,r4
  e5fae4:	e13ffe15 	stw	r4,-8(fp)
  e5fae8:	e0fffe17 	ldw	r3,-8(fp)
  e5faec:	e13fff17 	ldw	r4,-4(fp)
  e5faf0:	1904803a 	cmplt	r2,r3,r4
  e5faf4:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  e5faf8:	e0bfe817 	ldw	r2,-96(fp)
  e5fafc:	10800e17 	ldw	r2,56(r2)
  e5fb00:	10800060 	cmpeqi	r2,r2,1
  e5fb04:	10000c1e 	bne	r2,zero,e5fb38 <alt_up_pixel_buffer_dma_draw_line+0xe0>
  e5fb08:	e0bfe817 	ldw	r2,-96(fp)
  e5fb0c:	10800e17 	ldw	r2,56(r2)
  e5fb10:	10800098 	cmpnei	r2,r2,2
  e5fb14:	1000031e 	bne	r2,zero,e5fb24 <alt_up_pixel_buffer_dma_draw_line+0xcc>
  e5fb18:	00800044 	movi	r2,1
  e5fb1c:	e0bffc15 	stw	r2,-16(fp)
  e5fb20:	00000206 	br	e5fb2c <alt_up_pixel_buffer_dma_draw_line+0xd4>
  e5fb24:	00c00084 	movi	r3,2
  e5fb28:	e0fffc15 	stw	r3,-16(fp)
  e5fb2c:	e13ffc17 	ldw	r4,-16(fp)
  e5fb30:	e13ffd15 	stw	r4,-12(fp)
  e5fb34:	00000106 	br	e5fb3c <alt_up_pixel_buffer_dma_draw_line+0xe4>
  e5fb38:	e03ffd15 	stw	zero,-12(fp)
  e5fb3c:	e0bffd17 	ldw	r2,-12(fp)
  e5fb40:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  e5fb44:	e0c00317 	ldw	r3,12(fp)
  e5fb48:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  e5fb4c:	e0bfe817 	ldw	r2,-96(fp)
  e5fb50:	10800d17 	ldw	r2,52(r2)
  e5fb54:	1004c03a 	cmpne	r2,r2,zero
  e5fb58:	1000091e 	bne	r2,zero,e5fb80 <alt_up_pixel_buffer_dma_draw_line+0x128>
  e5fb5c:	e0bfe817 	ldw	r2,-96(fp)
  e5fb60:	10c01317 	ldw	r3,76(r2)
  e5fb64:	e0bfef17 	ldw	r2,-68(fp)
  e5fb68:	1885c83a 	sub	r2,r3,r2
  e5fb6c:	1007883a 	mov	r3,r2
  e5fb70:	00800044 	movi	r2,1
  e5fb74:	10c4983a 	sll	r2,r2,r3
  e5fb78:	e0bffb15 	stw	r2,-20(fp)
  e5fb7c:	00000306 	br	e5fb8c <alt_up_pixel_buffer_dma_draw_line+0x134>
  e5fb80:	e0bfe817 	ldw	r2,-96(fp)
  e5fb84:	10800f17 	ldw	r2,60(r2)
  e5fb88:	e0bffb15 	stw	r2,-20(fp)
  e5fb8c:	e13ffb17 	ldw	r4,-20(fp)
  e5fb90:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  e5fb94:	e0800417 	ldw	r2,16(fp)
  e5fb98:	10800058 	cmpnei	r2,r2,1
  e5fb9c:	1000041e 	bne	r2,zero,e5fbb0 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  e5fba0:	e0bfe817 	ldw	r2,-96(fp)
  e5fba4:	10800c17 	ldw	r2,48(r2)
  e5fba8:	e0bfed15 	stw	r2,-76(fp)
  e5fbac:	00000306 	br	e5fbbc <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  e5fbb0:	e0bfe817 	ldw	r2,-96(fp)
  e5fbb4:	10800b17 	ldw	r2,44(r2)
  e5fbb8:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  e5fbbc:	e0fff603 	ldbu	r3,-40(fp)
  e5fbc0:	18803fcc 	andi	r2,r3,255
  e5fbc4:	1080201c 	xori	r2,r2,128
  e5fbc8:	10bfe004 	addi	r2,r2,-128
  e5fbcc:	10800050 	cmplti	r2,r2,1
  e5fbd0:	10000c1e 	bne	r2,zero,e5fc04 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  e5fbd4:	e13ffa17 	ldw	r4,-24(fp)
  e5fbd8:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  e5fbdc:	e0bff917 	ldw	r2,-28(fp)
  e5fbe0:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  e5fbe4:	e0fff317 	ldw	r3,-52(fp)
  e5fbe8:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  e5fbec:	e13ff817 	ldw	r4,-32(fp)
  e5fbf0:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  e5fbf4:	e0bff717 	ldw	r2,-36(fp)
  e5fbf8:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  e5fbfc:	e0fff317 	ldw	r3,-52(fp)
  e5fc00:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  e5fc04:	e13ff817 	ldw	r4,-32(fp)
  e5fc08:	e0bffa17 	ldw	r2,-24(fp)
  e5fc0c:	20800c0e 	bge	r4,r2,e5fc40 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  e5fc10:	e0fffa17 	ldw	r3,-24(fp)
  e5fc14:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  e5fc18:	e13ff817 	ldw	r4,-32(fp)
  e5fc1c:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  e5fc20:	e0bff317 	ldw	r2,-52(fp)
  e5fc24:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  e5fc28:	e0fff917 	ldw	r3,-28(fp)
  e5fc2c:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  e5fc30:	e13ff717 	ldw	r4,-36(fp)
  e5fc34:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  e5fc38:	e0bff317 	ldw	r2,-52(fp)
  e5fc3c:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  e5fc40:	e0fff817 	ldw	r3,-32(fp)
  e5fc44:	e13ffa17 	ldw	r4,-24(fp)
  e5fc48:	1907c83a 	sub	r3,r3,r4
  e5fc4c:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  e5fc50:	e0fff717 	ldw	r3,-36(fp)
  e5fc54:	e13ff917 	ldw	r4,-28(fp)
  e5fc58:	1905c83a 	sub	r2,r3,r4
  e5fc5c:	e0bff415 	stw	r2,-48(fp)
  e5fc60:	e0fff417 	ldw	r3,-48(fp)
  e5fc64:	1804403a 	cmpge	r2,r3,zero
  e5fc68:	1000031e 	bne	r2,zero,e5fc78 <alt_up_pixel_buffer_dma_draw_line+0x220>
  e5fc6c:	e13ff417 	ldw	r4,-48(fp)
  e5fc70:	0109c83a 	sub	r4,zero,r4
  e5fc74:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  e5fc78:	e0fff517 	ldw	r3,-44(fp)
  e5fc7c:	1804d7fa 	srli	r2,r3,31
  e5fc80:	e13ff517 	ldw	r4,-44(fp)
  e5fc84:	1105883a 	add	r2,r2,r4
  e5fc88:	1005d07a 	srai	r2,r2,1
  e5fc8c:	0085c83a 	sub	r2,zero,r2
  e5fc90:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  e5fc94:	e0bff917 	ldw	r2,-28(fp)
  e5fc98:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  e5fc9c:	e0fff917 	ldw	r3,-28(fp)
  e5fca0:	e13ff717 	ldw	r4,-36(fp)
  e5fca4:	1900030e 	bge	r3,r4,e5fcb4 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  e5fca8:	00800044 	movi	r2,1
  e5fcac:	e0bff215 	stw	r2,-56(fp)
  e5fcb0:	00000206 	br	e5fcbc <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  e5fcb4:	00ffffc4 	movi	r3,-1
  e5fcb8:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  e5fcbc:	e13ff603 	ldbu	r4,-40(fp)
  e5fcc0:	20803fcc 	andi	r2,r4,255
  e5fcc4:	1080201c 	xori	r2,r2,128
  e5fcc8:	10bfe004 	addi	r2,r2,-128
  e5fccc:	10800058 	cmpnei	r2,r2,1
  e5fcd0:	1000221e 	bne	r2,zero,e5fd5c <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  e5fcd4:	e0bffa17 	ldw	r2,-24(fp)
  e5fcd8:	e0bff115 	stw	r2,-60(fp)
  e5fcdc:	00001b06 	br	e5fd4c <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  e5fce0:	e0ffee17 	ldw	r3,-72(fp)
  e5fce4:	d8c00015 	stw	r3,0(sp)
  e5fce8:	e13fef17 	ldw	r4,-68(fp)
  e5fcec:	d9000115 	stw	r4,4(sp)
  e5fcf0:	e13fed17 	ldw	r4,-76(fp)
  e5fcf4:	e17fec17 	ldw	r5,-80(fp)
  e5fcf8:	e1bff017 	ldw	r6,-64(fp)
  e5fcfc:	e1fff117 	ldw	r7,-60(fp)
  e5fd00:	0e5f9880 	call	e5f988 <helper_plot_pixel>
			error = error + deltay;
  e5fd04:	e0bff317 	ldw	r2,-52(fp)
  e5fd08:	e0fff417 	ldw	r3,-48(fp)
  e5fd0c:	10c5883a 	add	r2,r2,r3
  e5fd10:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  e5fd14:	e13ff317 	ldw	r4,-52(fp)
  e5fd18:	20800050 	cmplti	r2,r4,1
  e5fd1c:	1000081e 	bne	r2,zero,e5fd40 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  e5fd20:	e0bff017 	ldw	r2,-64(fp)
  e5fd24:	e0fff217 	ldw	r3,-56(fp)
  e5fd28:	10c5883a 	add	r2,r2,r3
  e5fd2c:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  e5fd30:	e13ff317 	ldw	r4,-52(fp)
  e5fd34:	e0bff517 	ldw	r2,-44(fp)
  e5fd38:	2089c83a 	sub	r4,r4,r2
  e5fd3c:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  e5fd40:	e0fff117 	ldw	r3,-60(fp)
  e5fd44:	18c00044 	addi	r3,r3,1
  e5fd48:	e0fff115 	stw	r3,-60(fp)
  e5fd4c:	e13ff817 	ldw	r4,-32(fp)
  e5fd50:	e0bff117 	ldw	r2,-60(fp)
  e5fd54:	20bfe20e 	bge	r4,r2,e5fce0 <alt_up_pixel_buffer_dma_draw_line+0x288>
  e5fd58:	00002106 	br	e5fde0 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  e5fd5c:	e0fffa17 	ldw	r3,-24(fp)
  e5fd60:	e0fff115 	stw	r3,-60(fp)
  e5fd64:	00001b06 	br	e5fdd4 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  e5fd68:	e13fee17 	ldw	r4,-72(fp)
  e5fd6c:	d9000015 	stw	r4,0(sp)
  e5fd70:	e0bfef17 	ldw	r2,-68(fp)
  e5fd74:	d8800115 	stw	r2,4(sp)
  e5fd78:	e13fed17 	ldw	r4,-76(fp)
  e5fd7c:	e17fec17 	ldw	r5,-80(fp)
  e5fd80:	e1bff117 	ldw	r6,-60(fp)
  e5fd84:	e1fff017 	ldw	r7,-64(fp)
  e5fd88:	0e5f9880 	call	e5f988 <helper_plot_pixel>
			error = error + deltay;
  e5fd8c:	e0fff317 	ldw	r3,-52(fp)
  e5fd90:	e13ff417 	ldw	r4,-48(fp)
  e5fd94:	1907883a 	add	r3,r3,r4
  e5fd98:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  e5fd9c:	e0fff317 	ldw	r3,-52(fp)
  e5fda0:	18800050 	cmplti	r2,r3,1
  e5fda4:	1000081e 	bne	r2,zero,e5fdc8 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  e5fda8:	e13ff017 	ldw	r4,-64(fp)
  e5fdac:	e0bff217 	ldw	r2,-56(fp)
  e5fdb0:	2089883a 	add	r4,r4,r2
  e5fdb4:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  e5fdb8:	e0fff317 	ldw	r3,-52(fp)
  e5fdbc:	e13ff517 	ldw	r4,-44(fp)
  e5fdc0:	1907c83a 	sub	r3,r3,r4
  e5fdc4:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  e5fdc8:	e0bff117 	ldw	r2,-60(fp)
  e5fdcc:	10800044 	addi	r2,r2,1
  e5fdd0:	e0bff115 	stw	r2,-60(fp)
  e5fdd4:	e0fff817 	ldw	r3,-32(fp)
  e5fdd8:	e13ff117 	ldw	r4,-60(fp)
  e5fddc:	193fe20e 	bge	r3,r4,e5fd68 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  e5fde0:	e037883a 	mov	sp,fp
  e5fde4:	dfc00117 	ldw	ra,4(sp)
  e5fde8:	df000017 	ldw	fp,0(sp)
  e5fdec:	dec00204 	addi	sp,sp,8
  e5fdf0:	f800283a 	ret

00e5fdf4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  e5fdf4:	defff404 	addi	sp,sp,-48
  e5fdf8:	df000b15 	stw	fp,44(sp)
  e5fdfc:	df000b04 	addi	fp,sp,44
  e5fe00:	e13ffb15 	stw	r4,-20(fp)
  e5fe04:	e17ffc15 	stw	r5,-16(fp)
  e5fe08:	e1bffd15 	stw	r6,-12(fp)
  e5fe0c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  e5fe10:	e03ff915 	stw	zero,-28(fp)
  e5fe14:	008039b4 	movhi	r2,230
  e5fe18:	1093b104 	addi	r2,r2,20164
  e5fe1c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  e5fe20:	1005003a 	cmpeq	r2,r2,zero
  e5fe24:	1000411e 	bne	r2,zero,e5ff2c <alt_alarm_start+0x138>
  {
    if (alarm)
  e5fe28:	e0bffb17 	ldw	r2,-20(fp)
  e5fe2c:	1005003a 	cmpeq	r2,r2,zero
  e5fe30:	10003b1e 	bne	r2,zero,e5ff20 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  e5fe34:	e0fffb17 	ldw	r3,-20(fp)
  e5fe38:	e0bffd17 	ldw	r2,-12(fp)
  e5fe3c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  e5fe40:	e0fffb17 	ldw	r3,-20(fp)
  e5fe44:	e0bffe17 	ldw	r2,-8(fp)
  e5fe48:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  e5fe4c:	0005303a 	rdctl	r2,status
  e5fe50:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  e5fe54:	e0fff817 	ldw	r3,-32(fp)
  e5fe58:	00bfff84 	movi	r2,-2
  e5fe5c:	1884703a 	and	r2,r3,r2
  e5fe60:	1001703a 	wrctl	status,r2
  
  return context;
  e5fe64:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  e5fe68:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  e5fe6c:	008039b4 	movhi	r2,230
  e5fe70:	1093b204 	addi	r2,r2,20168
  e5fe74:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  e5fe78:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  e5fe7c:	e0fffc17 	ldw	r3,-16(fp)
  e5fe80:	e0bff917 	ldw	r2,-28(fp)
  e5fe84:	1885883a 	add	r2,r3,r2
  e5fe88:	10c00044 	addi	r3,r2,1
  e5fe8c:	e0bffb17 	ldw	r2,-20(fp)
  e5fe90:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  e5fe94:	e0bffb17 	ldw	r2,-20(fp)
  e5fe98:	10c00217 	ldw	r3,8(r2)
  e5fe9c:	e0bff917 	ldw	r2,-28(fp)
  e5fea0:	1880042e 	bgeu	r3,r2,e5feb4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  e5fea4:	e0fffb17 	ldw	r3,-20(fp)
  e5fea8:	00800044 	movi	r2,1
  e5feac:	18800405 	stb	r2,16(r3)
  e5feb0:	00000206 	br	e5febc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  e5feb4:	e0bffb17 	ldw	r2,-20(fp)
  e5feb8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  e5febc:	e0fffb17 	ldw	r3,-20(fp)
  e5fec0:	008039b4 	movhi	r2,230
  e5fec4:	108cad04 	addi	r2,r2,12980
  e5fec8:	e0bff615 	stw	r2,-40(fp)
  e5fecc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  e5fed0:	e0fff717 	ldw	r3,-36(fp)
  e5fed4:	e0bff617 	ldw	r2,-40(fp)
  e5fed8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  e5fedc:	e0bff617 	ldw	r2,-40(fp)
  e5fee0:	10c00017 	ldw	r3,0(r2)
  e5fee4:	e0bff717 	ldw	r2,-36(fp)
  e5fee8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  e5feec:	e0bff617 	ldw	r2,-40(fp)
  e5fef0:	10c00017 	ldw	r3,0(r2)
  e5fef4:	e0bff717 	ldw	r2,-36(fp)
  e5fef8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  e5fefc:	e0fff617 	ldw	r3,-40(fp)
  e5ff00:	e0bff717 	ldw	r2,-36(fp)
  e5ff04:	18800015 	stw	r2,0(r3)
  e5ff08:	e0bffa17 	ldw	r2,-24(fp)
  e5ff0c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  e5ff10:	e0bff517 	ldw	r2,-44(fp)
  e5ff14:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  e5ff18:	e03fff15 	stw	zero,-4(fp)
  e5ff1c:	00000506 	br	e5ff34 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  e5ff20:	00bffa84 	movi	r2,-22
  e5ff24:	e0bfff15 	stw	r2,-4(fp)
  e5ff28:	00000206 	br	e5ff34 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  e5ff2c:	00bfde84 	movi	r2,-134
  e5ff30:	e0bfff15 	stw	r2,-4(fp)
  e5ff34:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  e5ff38:	e037883a 	mov	sp,fp
  e5ff3c:	df000017 	ldw	fp,0(sp)
  e5ff40:	dec00104 	addi	sp,sp,4
  e5ff44:	f800283a 	ret

00e5ff48 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  e5ff48:	defffe04 	addi	sp,sp,-8
  e5ff4c:	df000115 	stw	fp,4(sp)
  e5ff50:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  e5ff54:	e03fff15 	stw	zero,-4(fp)
  e5ff58:	00000506 	br	e5ff70 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  e5ff5c:	e0bfff17 	ldw	r2,-4(fp)
  e5ff60:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  e5ff64:	e0bfff17 	ldw	r2,-4(fp)
  e5ff68:	10800804 	addi	r2,r2,32
  e5ff6c:	e0bfff15 	stw	r2,-4(fp)
  e5ff70:	e0bfff17 	ldw	r2,-4(fp)
  e5ff74:	10810030 	cmpltui	r2,r2,1024
  e5ff78:	103ff81e 	bne	r2,zero,e5ff5c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  e5ff7c:	e037883a 	mov	sp,fp
  e5ff80:	df000017 	ldw	fp,0(sp)
  e5ff84:	dec00104 	addi	sp,sp,4
  e5ff88:	f800283a 	ret

00e5ff8c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  e5ff8c:	defff904 	addi	sp,sp,-28
  e5ff90:	dfc00615 	stw	ra,24(sp)
  e5ff94:	df000515 	stw	fp,20(sp)
  e5ff98:	df000504 	addi	fp,sp,20
  e5ff9c:	e13ffd15 	stw	r4,-12(fp)
  e5ffa0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  e5ffa4:	e0bffd17 	ldw	r2,-12(fp)
  e5ffa8:	1005003a 	cmpeq	r2,r2,zero
  e5ffac:	1000041e 	bne	r2,zero,e5ffc0 <alt_dev_llist_insert+0x34>
  e5ffb0:	e0bffd17 	ldw	r2,-12(fp)
  e5ffb4:	10800217 	ldw	r2,8(r2)
  e5ffb8:	1004c03a 	cmpne	r2,r2,zero
  e5ffbc:	1000071e 	bne	r2,zero,e5ffdc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  e5ffc0:	0e600400 	call	e60040 <alt_get_errno>
  e5ffc4:	1007883a 	mov	r3,r2
  e5ffc8:	00800584 	movi	r2,22
  e5ffcc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  e5ffd0:	00bffa84 	movi	r2,-22
  e5ffd4:	e0bfff15 	stw	r2,-4(fp)
  e5ffd8:	00001306 	br	e60028 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  e5ffdc:	e0fffd17 	ldw	r3,-12(fp)
  e5ffe0:	e0bffe17 	ldw	r2,-8(fp)
  e5ffe4:	e0bffb15 	stw	r2,-20(fp)
  e5ffe8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  e5ffec:	e0fffc17 	ldw	r3,-16(fp)
  e5fff0:	e0bffb17 	ldw	r2,-20(fp)
  e5fff4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  e5fff8:	e0bffb17 	ldw	r2,-20(fp)
  e5fffc:	10c00017 	ldw	r3,0(r2)
  e60000:	e0bffc17 	ldw	r2,-16(fp)
  e60004:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  e60008:	e0bffb17 	ldw	r2,-20(fp)
  e6000c:	10c00017 	ldw	r3,0(r2)
  e60010:	e0bffc17 	ldw	r2,-16(fp)
  e60014:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  e60018:	e0fffb17 	ldw	r3,-20(fp)
  e6001c:	e0bffc17 	ldw	r2,-16(fp)
  e60020:	18800015 	stw	r2,0(r3)

  return 0;  
  e60024:	e03fff15 	stw	zero,-4(fp)
  e60028:	e0bfff17 	ldw	r2,-4(fp)
}
  e6002c:	e037883a 	mov	sp,fp
  e60030:	dfc00117 	ldw	ra,4(sp)
  e60034:	df000017 	ldw	fp,0(sp)
  e60038:	dec00204 	addi	sp,sp,8
  e6003c:	f800283a 	ret

00e60040 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e60040:	defffd04 	addi	sp,sp,-12
  e60044:	dfc00215 	stw	ra,8(sp)
  e60048:	df000115 	stw	fp,4(sp)
  e6004c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e60050:	008039b4 	movhi	r2,230
  e60054:	108ca604 	addi	r2,r2,12952
  e60058:	10800017 	ldw	r2,0(r2)
  e6005c:	1005003a 	cmpeq	r2,r2,zero
  e60060:	1000061e 	bne	r2,zero,e6007c <alt_get_errno+0x3c>
  e60064:	008039b4 	movhi	r2,230
  e60068:	108ca604 	addi	r2,r2,12952
  e6006c:	10800017 	ldw	r2,0(r2)
  e60070:	103ee83a 	callr	r2
  e60074:	e0bfff15 	stw	r2,-4(fp)
  e60078:	00000306 	br	e60088 <alt_get_errno+0x48>
  e6007c:	008039b4 	movhi	r2,230
  e60080:	1093ac04 	addi	r2,r2,20144
  e60084:	e0bfff15 	stw	r2,-4(fp)
  e60088:	e0bfff17 	ldw	r2,-4(fp)
}
  e6008c:	e037883a 	mov	sp,fp
  e60090:	dfc00117 	ldw	ra,4(sp)
  e60094:	df000017 	ldw	fp,0(sp)
  e60098:	dec00204 	addi	sp,sp,8
  e6009c:	f800283a 	ret

00e600a0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  e600a0:	defffd04 	addi	sp,sp,-12
  e600a4:	dfc00215 	stw	ra,8(sp)
  e600a8:	df000115 	stw	fp,4(sp)
  e600ac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  e600b0:	00bfff04 	movi	r2,-4
  e600b4:	00c039b4 	movhi	r3,230
  e600b8:	18c46704 	addi	r3,r3,4508
  e600bc:	1885883a 	add	r2,r3,r2
  e600c0:	e0bfff15 	stw	r2,-4(fp)
  e600c4:	00000606 	br	e600e0 <_do_ctors+0x40>
        (*ctor) (); 
  e600c8:	e0bfff17 	ldw	r2,-4(fp)
  e600cc:	10800017 	ldw	r2,0(r2)
  e600d0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  e600d4:	e0bfff17 	ldw	r2,-4(fp)
  e600d8:	10bfff04 	addi	r2,r2,-4
  e600dc:	e0bfff15 	stw	r2,-4(fp)
  e600e0:	e0ffff17 	ldw	r3,-4(fp)
  e600e4:	008039b4 	movhi	r2,230
  e600e8:	10846604 	addi	r2,r2,4504
  e600ec:	18bff62e 	bgeu	r3,r2,e600c8 <_do_ctors+0x28>
        (*ctor) (); 
}
  e600f0:	e037883a 	mov	sp,fp
  e600f4:	dfc00117 	ldw	ra,4(sp)
  e600f8:	df000017 	ldw	fp,0(sp)
  e600fc:	dec00204 	addi	sp,sp,8
  e60100:	f800283a 	ret

00e60104 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  e60104:	defffd04 	addi	sp,sp,-12
  e60108:	dfc00215 	stw	ra,8(sp)
  e6010c:	df000115 	stw	fp,4(sp)
  e60110:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  e60114:	00bfff04 	movi	r2,-4
  e60118:	00c039b4 	movhi	r3,230
  e6011c:	18c46704 	addi	r3,r3,4508
  e60120:	1885883a 	add	r2,r3,r2
  e60124:	e0bfff15 	stw	r2,-4(fp)
  e60128:	00000606 	br	e60144 <_do_dtors+0x40>
        (*dtor) (); 
  e6012c:	e0bfff17 	ldw	r2,-4(fp)
  e60130:	10800017 	ldw	r2,0(r2)
  e60134:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  e60138:	e0bfff17 	ldw	r2,-4(fp)
  e6013c:	10bfff04 	addi	r2,r2,-4
  e60140:	e0bfff15 	stw	r2,-4(fp)
  e60144:	e0ffff17 	ldw	r3,-4(fp)
  e60148:	008039b4 	movhi	r2,230
  e6014c:	10846704 	addi	r2,r2,4508
  e60150:	18bff62e 	bgeu	r3,r2,e6012c <_do_dtors+0x28>
        (*dtor) (); 
}
  e60154:	e037883a 	mov	sp,fp
  e60158:	dfc00117 	ldw	ra,4(sp)
  e6015c:	df000017 	ldw	fp,0(sp)
  e60160:	dec00204 	addi	sp,sp,8
  e60164:	f800283a 	ret

00e60168 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  e60168:	defff904 	addi	sp,sp,-28
  e6016c:	dfc00615 	stw	ra,24(sp)
  e60170:	df000515 	stw	fp,20(sp)
  e60174:	df000504 	addi	fp,sp,20
  e60178:	e13ffd15 	stw	r4,-12(fp)
  e6017c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  e60180:	e0bffe17 	ldw	r2,-8(fp)
  e60184:	10800017 	ldw	r2,0(r2)
  e60188:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  e6018c:	e13ffd17 	ldw	r4,-12(fp)
  e60190:	0e53e5c0 	call	e53e5c <strlen>
  e60194:	10800044 	addi	r2,r2,1
  e60198:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  e6019c:	00000d06 	br	e601d4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  e601a0:	e0bffc17 	ldw	r2,-16(fp)
  e601a4:	11000217 	ldw	r4,8(r2)
  e601a8:	e1bffb17 	ldw	r6,-20(fp)
  e601ac:	e17ffd17 	ldw	r5,-12(fp)
  e601b0:	0e60d700 	call	e60d70 <memcmp>
  e601b4:	1004c03a 	cmpne	r2,r2,zero
  e601b8:	1000031e 	bne	r2,zero,e601c8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  e601bc:	e0bffc17 	ldw	r2,-16(fp)
  e601c0:	e0bfff15 	stw	r2,-4(fp)
  e601c4:	00000706 	br	e601e4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  e601c8:	e0bffc17 	ldw	r2,-16(fp)
  e601cc:	10800017 	ldw	r2,0(r2)
  e601d0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  e601d4:	e0fffe17 	ldw	r3,-8(fp)
  e601d8:	e0bffc17 	ldw	r2,-16(fp)
  e601dc:	10fff01e 	bne	r2,r3,e601a0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  e601e0:	e03fff15 	stw	zero,-4(fp)
  e601e4:	e0bfff17 	ldw	r2,-4(fp)
}
  e601e8:	e037883a 	mov	sp,fp
  e601ec:	dfc00117 	ldw	ra,4(sp)
  e601f0:	df000017 	ldw	fp,0(sp)
  e601f4:	dec00204 	addi	sp,sp,8
  e601f8:	f800283a 	ret

00e601fc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  e601fc:	defffe04 	addi	sp,sp,-8
  e60200:	dfc00115 	stw	ra,4(sp)
  e60204:	df000015 	stw	fp,0(sp)
  e60208:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  e6020c:	0009883a 	mov	r4,zero
  e60210:	01440004 	movi	r5,4096
  e60214:	0e60c940 	call	e60c94 <alt_icache_flush>
#endif
}
  e60218:	e037883a 	mov	sp,fp
  e6021c:	dfc00117 	ldw	ra,4(sp)
  e60220:	df000017 	ldw	fp,0(sp)
  e60224:	dec00204 	addi	sp,sp,8
  e60228:	f800283a 	ret

00e6022c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  e6022c:	defff904 	addi	sp,sp,-28
  e60230:	dfc00615 	stw	ra,24(sp)
  e60234:	df000515 	stw	fp,20(sp)
  e60238:	df000504 	addi	fp,sp,20
  e6023c:	e13ffc15 	stw	r4,-16(fp)
  e60240:	e17ffd15 	stw	r5,-12(fp)
  e60244:	e1bffe15 	stw	r6,-8(fp)
  e60248:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  e6024c:	e0800217 	ldw	r2,8(fp)
  e60250:	d8800015 	stw	r2,0(sp)
  e60254:	e13ffc17 	ldw	r4,-16(fp)
  e60258:	e17ffd17 	ldw	r5,-12(fp)
  e6025c:	e1bffe17 	ldw	r6,-8(fp)
  e60260:	e1ffff17 	ldw	r7,-4(fp)
  e60264:	0e604000 	call	e60400 <alt_iic_isr_register>
}  
  e60268:	e037883a 	mov	sp,fp
  e6026c:	dfc00117 	ldw	ra,4(sp)
  e60270:	df000017 	ldw	fp,0(sp)
  e60274:	dec00204 	addi	sp,sp,8
  e60278:	f800283a 	ret

00e6027c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  e6027c:	defff904 	addi	sp,sp,-28
  e60280:	df000615 	stw	fp,24(sp)
  e60284:	df000604 	addi	fp,sp,24
  e60288:	e13ffe15 	stw	r4,-8(fp)
  e6028c:	e17fff15 	stw	r5,-4(fp)
  e60290:	e0bfff17 	ldw	r2,-4(fp)
  e60294:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  e60298:	0005303a 	rdctl	r2,status
  e6029c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  e602a0:	e0fffb17 	ldw	r3,-20(fp)
  e602a4:	00bfff84 	movi	r2,-2
  e602a8:	1884703a 	and	r2,r3,r2
  e602ac:	1001703a 	wrctl	status,r2
  
  return context;
  e602b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  e602b4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  e602b8:	e0fffc17 	ldw	r3,-16(fp)
  e602bc:	00800044 	movi	r2,1
  e602c0:	10c4983a 	sll	r2,r2,r3
  e602c4:	1007883a 	mov	r3,r2
  e602c8:	008039b4 	movhi	r2,230
  e602cc:	1093b004 	addi	r2,r2,20160
  e602d0:	10800017 	ldw	r2,0(r2)
  e602d4:	1886b03a 	or	r3,r3,r2
  e602d8:	008039b4 	movhi	r2,230
  e602dc:	1093b004 	addi	r2,r2,20160
  e602e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  e602e4:	008039b4 	movhi	r2,230
  e602e8:	1093b004 	addi	r2,r2,20160
  e602ec:	10800017 	ldw	r2,0(r2)
  e602f0:	100170fa 	wrctl	ienable,r2
  e602f4:	e0bffd17 	ldw	r2,-12(fp)
  e602f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  e602fc:	e0bffa17 	ldw	r2,-24(fp)
  e60300:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  e60304:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  e60308:	e037883a 	mov	sp,fp
  e6030c:	df000017 	ldw	fp,0(sp)
  e60310:	dec00104 	addi	sp,sp,4
  e60314:	f800283a 	ret

00e60318 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  e60318:	defff904 	addi	sp,sp,-28
  e6031c:	df000615 	stw	fp,24(sp)
  e60320:	df000604 	addi	fp,sp,24
  e60324:	e13ffe15 	stw	r4,-8(fp)
  e60328:	e17fff15 	stw	r5,-4(fp)
  e6032c:	e0bfff17 	ldw	r2,-4(fp)
  e60330:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  e60334:	0005303a 	rdctl	r2,status
  e60338:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  e6033c:	e0fffb17 	ldw	r3,-20(fp)
  e60340:	00bfff84 	movi	r2,-2
  e60344:	1884703a 	and	r2,r3,r2
  e60348:	1001703a 	wrctl	status,r2
  
  return context;
  e6034c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  e60350:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  e60354:	e0fffc17 	ldw	r3,-16(fp)
  e60358:	00800044 	movi	r2,1
  e6035c:	10c4983a 	sll	r2,r2,r3
  e60360:	0084303a 	nor	r2,zero,r2
  e60364:	1007883a 	mov	r3,r2
  e60368:	008039b4 	movhi	r2,230
  e6036c:	1093b004 	addi	r2,r2,20160
  e60370:	10800017 	ldw	r2,0(r2)
  e60374:	1886703a 	and	r3,r3,r2
  e60378:	008039b4 	movhi	r2,230
  e6037c:	1093b004 	addi	r2,r2,20160
  e60380:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  e60384:	008039b4 	movhi	r2,230
  e60388:	1093b004 	addi	r2,r2,20160
  e6038c:	10800017 	ldw	r2,0(r2)
  e60390:	100170fa 	wrctl	ienable,r2
  e60394:	e0bffd17 	ldw	r2,-12(fp)
  e60398:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  e6039c:	e0bffa17 	ldw	r2,-24(fp)
  e603a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  e603a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  e603a8:	e037883a 	mov	sp,fp
  e603ac:	df000017 	ldw	fp,0(sp)
  e603b0:	dec00104 	addi	sp,sp,4
  e603b4:	f800283a 	ret

00e603b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  e603b8:	defffc04 	addi	sp,sp,-16
  e603bc:	df000315 	stw	fp,12(sp)
  e603c0:	df000304 	addi	fp,sp,12
  e603c4:	e13ffe15 	stw	r4,-8(fp)
  e603c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  e603cc:	000530fa 	rdctl	r2,ienable
  e603d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  e603d4:	e0ffff17 	ldw	r3,-4(fp)
  e603d8:	00800044 	movi	r2,1
  e603dc:	10c4983a 	sll	r2,r2,r3
  e603e0:	1007883a 	mov	r3,r2
  e603e4:	e0bffd17 	ldw	r2,-12(fp)
  e603e8:	1884703a 	and	r2,r3,r2
  e603ec:	1004c03a 	cmpne	r2,r2,zero
}
  e603f0:	e037883a 	mov	sp,fp
  e603f4:	df000017 	ldw	fp,0(sp)
  e603f8:	dec00104 	addi	sp,sp,4
  e603fc:	f800283a 	ret

00e60400 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  e60400:	defff404 	addi	sp,sp,-48
  e60404:	dfc00b15 	stw	ra,44(sp)
  e60408:	df000a15 	stw	fp,40(sp)
  e6040c:	df000a04 	addi	fp,sp,40
  e60410:	e13ffb15 	stw	r4,-20(fp)
  e60414:	e17ffc15 	stw	r5,-16(fp)
  e60418:	e1bffd15 	stw	r6,-12(fp)
  e6041c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  e60420:	00bffa84 	movi	r2,-22
  e60424:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  e60428:	e0bffc17 	ldw	r2,-16(fp)
  e6042c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  e60430:	e0bff917 	ldw	r2,-28(fp)
  e60434:	10800808 	cmpgei	r2,r2,32
  e60438:	1000291e 	bne	r2,zero,e604e0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  e6043c:	0005303a 	rdctl	r2,status
  e60440:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  e60444:	e0fff717 	ldw	r3,-36(fp)
  e60448:	00bfff84 	movi	r2,-2
  e6044c:	1884703a 	and	r2,r3,r2
  e60450:	1001703a 	wrctl	status,r2
  
  return context;
  e60454:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  e60458:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  e6045c:	e0bff917 	ldw	r2,-28(fp)
  e60460:	00c039b4 	movhi	r3,230
  e60464:	18d3bd04 	addi	r3,r3,20212
  e60468:	100490fa 	slli	r2,r2,3
  e6046c:	10c7883a 	add	r3,r2,r3
  e60470:	e0bffd17 	ldw	r2,-12(fp)
  e60474:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  e60478:	e0bff917 	ldw	r2,-28(fp)
  e6047c:	00c039b4 	movhi	r3,230
  e60480:	18d3bd04 	addi	r3,r3,20212
  e60484:	100490fa 	slli	r2,r2,3
  e60488:	10c5883a 	add	r2,r2,r3
  e6048c:	10c00104 	addi	r3,r2,4
  e60490:	e0bffe17 	ldw	r2,-8(fp)
  e60494:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  e60498:	e0bffd17 	ldw	r2,-12(fp)
  e6049c:	1005003a 	cmpeq	r2,r2,zero
  e604a0:	1000051e 	bne	r2,zero,e604b8 <alt_iic_isr_register+0xb8>
  e604a4:	e17ff917 	ldw	r5,-28(fp)
  e604a8:	e13ffb17 	ldw	r4,-20(fp)
  e604ac:	0e6027c0 	call	e6027c <alt_ic_irq_enable>
  e604b0:	e0bfff15 	stw	r2,-4(fp)
  e604b4:	00000406 	br	e604c8 <alt_iic_isr_register+0xc8>
  e604b8:	e17ff917 	ldw	r5,-28(fp)
  e604bc:	e13ffb17 	ldw	r4,-20(fp)
  e604c0:	0e603180 	call	e60318 <alt_ic_irq_disable>
  e604c4:	e0bfff15 	stw	r2,-4(fp)
  e604c8:	e0bfff17 	ldw	r2,-4(fp)
  e604cc:	e0bffa15 	stw	r2,-24(fp)
  e604d0:	e0bff817 	ldw	r2,-32(fp)
  e604d4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  e604d8:	e0bff617 	ldw	r2,-40(fp)
  e604dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  e604e0:	e0bffa17 	ldw	r2,-24(fp)
}
  e604e4:	e037883a 	mov	sp,fp
  e604e8:	dfc00117 	ldw	ra,4(sp)
  e604ec:	df000017 	ldw	fp,0(sp)
  e604f0:	dec00204 	addi	sp,sp,8
  e604f4:	f800283a 	ret

00e604f8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  e604f8:	defff904 	addi	sp,sp,-28
  e604fc:	dfc00615 	stw	ra,24(sp)
  e60500:	df000515 	stw	fp,20(sp)
  e60504:	df000504 	addi	fp,sp,20
  e60508:	e13ffc15 	stw	r4,-16(fp)
  e6050c:	e17ffd15 	stw	r5,-12(fp)
  e60510:	e1bffe15 	stw	r6,-8(fp)
  e60514:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  e60518:	e13ffd17 	ldw	r4,-12(fp)
  e6051c:	e17ffe17 	ldw	r5,-8(fp)
  e60520:	e1bfff17 	ldw	r6,-4(fp)
  e60524:	0e607100 	call	e60710 <open>
  e60528:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  e6052c:	e0bffb17 	ldw	r2,-20(fp)
  e60530:	1004803a 	cmplt	r2,r2,zero
  e60534:	10001c1e 	bne	r2,zero,e605a8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  e60538:	e0bffb17 	ldw	r2,-20(fp)
  e6053c:	00c039b4 	movhi	r3,230
  e60540:	18c7c804 	addi	r3,r3,7968
  e60544:	10800324 	muli	r2,r2,12
  e60548:	10c5883a 	add	r2,r2,r3
  e6054c:	10c00017 	ldw	r3,0(r2)
  e60550:	e0bffc17 	ldw	r2,-16(fp)
  e60554:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  e60558:	e0bffb17 	ldw	r2,-20(fp)
  e6055c:	00c039b4 	movhi	r3,230
  e60560:	18c7c804 	addi	r3,r3,7968
  e60564:	10800324 	muli	r2,r2,12
  e60568:	10c5883a 	add	r2,r2,r3
  e6056c:	10800104 	addi	r2,r2,4
  e60570:	10c00017 	ldw	r3,0(r2)
  e60574:	e0bffc17 	ldw	r2,-16(fp)
  e60578:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  e6057c:	e0bffb17 	ldw	r2,-20(fp)
  e60580:	00c039b4 	movhi	r3,230
  e60584:	18c7c804 	addi	r3,r3,7968
  e60588:	10800324 	muli	r2,r2,12
  e6058c:	10c5883a 	add	r2,r2,r3
  e60590:	10800204 	addi	r2,r2,8
  e60594:	10c00017 	ldw	r3,0(r2)
  e60598:	e0bffc17 	ldw	r2,-16(fp)
  e6059c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  e605a0:	e13ffb17 	ldw	r4,-20(fp)
  e605a4:	0e5cea80 	call	e5cea8 <alt_release_fd>
  }
} 
  e605a8:	e037883a 	mov	sp,fp
  e605ac:	dfc00117 	ldw	ra,4(sp)
  e605b0:	df000017 	ldw	fp,0(sp)
  e605b4:	dec00204 	addi	sp,sp,8
  e605b8:	f800283a 	ret

00e605bc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  e605bc:	defffb04 	addi	sp,sp,-20
  e605c0:	dfc00415 	stw	ra,16(sp)
  e605c4:	df000315 	stw	fp,12(sp)
  e605c8:	df000304 	addi	fp,sp,12
  e605cc:	e13ffd15 	stw	r4,-12(fp)
  e605d0:	e17ffe15 	stw	r5,-8(fp)
  e605d4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  e605d8:	010039b4 	movhi	r4,230
  e605dc:	2107cb04 	addi	r4,r4,7980
  e605e0:	e17ffd17 	ldw	r5,-12(fp)
  e605e4:	01800044 	movi	r6,1
  e605e8:	01c07fc4 	movi	r7,511
  e605ec:	0e604f80 	call	e604f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  e605f0:	010039b4 	movhi	r4,230
  e605f4:	2107c804 	addi	r4,r4,7968
  e605f8:	e17ffe17 	ldw	r5,-8(fp)
  e605fc:	000d883a 	mov	r6,zero
  e60600:	01c07fc4 	movi	r7,511
  e60604:	0e604f80 	call	e604f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  e60608:	010039b4 	movhi	r4,230
  e6060c:	2107ce04 	addi	r4,r4,7992
  e60610:	e17fff17 	ldw	r5,-4(fp)
  e60614:	01800044 	movi	r6,1
  e60618:	01c07fc4 	movi	r7,511
  e6061c:	0e604f80 	call	e604f8 <alt_open_fd>
}  
  e60620:	e037883a 	mov	sp,fp
  e60624:	dfc00117 	ldw	ra,4(sp)
  e60628:	df000017 	ldw	fp,0(sp)
  e6062c:	dec00204 	addi	sp,sp,8
  e60630:	f800283a 	ret

00e60634 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  e60634:	defffc04 	addi	sp,sp,-16
  e60638:	df000315 	stw	fp,12(sp)
  e6063c:	df000304 	addi	fp,sp,12
  e60640:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  e60644:	e0bffe17 	ldw	r2,-8(fp)
  e60648:	10800217 	ldw	r2,8(r2)
  e6064c:	10d00034 	orhi	r3,r2,16384
  e60650:	e0bffe17 	ldw	r2,-8(fp)
  e60654:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  e60658:	e03ffd15 	stw	zero,-12(fp)
  e6065c:	00002006 	br	e606e0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  e60660:	e0bffd17 	ldw	r2,-12(fp)
  e60664:	00c039b4 	movhi	r3,230
  e60668:	18c7c804 	addi	r3,r3,7968
  e6066c:	10800324 	muli	r2,r2,12
  e60670:	10c5883a 	add	r2,r2,r3
  e60674:	10c00017 	ldw	r3,0(r2)
  e60678:	e0bffe17 	ldw	r2,-8(fp)
  e6067c:	10800017 	ldw	r2,0(r2)
  e60680:	1880141e 	bne	r3,r2,e606d4 <alt_file_locked+0xa0>
  e60684:	e0bffd17 	ldw	r2,-12(fp)
  e60688:	00c039b4 	movhi	r3,230
  e6068c:	18c7c804 	addi	r3,r3,7968
  e60690:	10800324 	muli	r2,r2,12
  e60694:	10c5883a 	add	r2,r2,r3
  e60698:	10800204 	addi	r2,r2,8
  e6069c:	10800017 	ldw	r2,0(r2)
  e606a0:	1004403a 	cmpge	r2,r2,zero
  e606a4:	10000b1e 	bne	r2,zero,e606d4 <alt_file_locked+0xa0>
  e606a8:	e0bffd17 	ldw	r2,-12(fp)
  e606ac:	10800324 	muli	r2,r2,12
  e606b0:	1007883a 	mov	r3,r2
  e606b4:	008039b4 	movhi	r2,230
  e606b8:	1087c804 	addi	r2,r2,7968
  e606bc:	1887883a 	add	r3,r3,r2
  e606c0:	e0bffe17 	ldw	r2,-8(fp)
  e606c4:	18800326 	beq	r3,r2,e606d4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  e606c8:	00bffcc4 	movi	r2,-13
  e606cc:	e0bfff15 	stw	r2,-4(fp)
  e606d0:	00000a06 	br	e606fc <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  e606d4:	e0bffd17 	ldw	r2,-12(fp)
  e606d8:	10800044 	addi	r2,r2,1
  e606dc:	e0bffd15 	stw	r2,-12(fp)
  e606e0:	008039b4 	movhi	r2,230
  e606e4:	108ca504 	addi	r2,r2,12948
  e606e8:	10800017 	ldw	r2,0(r2)
  e606ec:	1007883a 	mov	r3,r2
  e606f0:	e0bffd17 	ldw	r2,-12(fp)
  e606f4:	18bfda2e 	bgeu	r3,r2,e60660 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  e606f8:	e03fff15 	stw	zero,-4(fp)
  e606fc:	e0bfff17 	ldw	r2,-4(fp)
}
  e60700:	e037883a 	mov	sp,fp
  e60704:	df000017 	ldw	fp,0(sp)
  e60708:	dec00104 	addi	sp,sp,4
  e6070c:	f800283a 	ret

00e60710 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  e60710:	defff404 	addi	sp,sp,-48
  e60714:	dfc00b15 	stw	ra,44(sp)
  e60718:	df000a15 	stw	fp,40(sp)
  e6071c:	df000a04 	addi	fp,sp,40
  e60720:	e13ffb15 	stw	r4,-20(fp)
  e60724:	e17ffc15 	stw	r5,-16(fp)
  e60728:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  e6072c:	00bfffc4 	movi	r2,-1
  e60730:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  e60734:	00bffb44 	movi	r2,-19
  e60738:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  e6073c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  e60740:	e13ffb17 	ldw	r4,-20(fp)
  e60744:	014039b4 	movhi	r5,230
  e60748:	294ca304 	addi	r5,r5,12940
  e6074c:	0e601680 	call	e60168 <alt_find_dev>
  e60750:	e0bffa15 	stw	r2,-24(fp)
  e60754:	e0bffa17 	ldw	r2,-24(fp)
  e60758:	1004c03a 	cmpne	r2,r2,zero
  e6075c:	1000051e 	bne	r2,zero,e60774 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  e60760:	e13ffb17 	ldw	r4,-20(fp)
  e60764:	0e60abc0 	call	e60abc <alt_find_file>
  e60768:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  e6076c:	00800044 	movi	r2,1
  e60770:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  e60774:	e0bffa17 	ldw	r2,-24(fp)
  e60778:	1005003a 	cmpeq	r2,r2,zero
  e6077c:	1000301e 	bne	r2,zero,e60840 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  e60780:	e13ffa17 	ldw	r4,-24(fp)
  e60784:	0e60bdc0 	call	e60bdc <alt_get_fd>
  e60788:	e0bff815 	stw	r2,-32(fp)
  e6078c:	e0bff817 	ldw	r2,-32(fp)
  e60790:	1004403a 	cmpge	r2,r2,zero
  e60794:	1000031e 	bne	r2,zero,e607a4 <open+0x94>
    {
      status = index;
  e60798:	e0bff817 	ldw	r2,-32(fp)
  e6079c:	e0bff715 	stw	r2,-36(fp)
  e607a0:	00002906 	br	e60848 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  e607a4:	e0bff817 	ldw	r2,-32(fp)
  e607a8:	10800324 	muli	r2,r2,12
  e607ac:	1007883a 	mov	r3,r2
  e607b0:	008039b4 	movhi	r2,230
  e607b4:	1087c804 	addi	r2,r2,7968
  e607b8:	1885883a 	add	r2,r3,r2
  e607bc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  e607c0:	e0fffc17 	ldw	r3,-16(fp)
  e607c4:	00900034 	movhi	r2,16384
  e607c8:	10bfffc4 	addi	r2,r2,-1
  e607cc:	1886703a 	and	r3,r3,r2
  e607d0:	e0bff917 	ldw	r2,-28(fp)
  e607d4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  e607d8:	e0bff617 	ldw	r2,-40(fp)
  e607dc:	1004c03a 	cmpne	r2,r2,zero
  e607e0:	1000061e 	bne	r2,zero,e607fc <open+0xec>
  e607e4:	e13ff917 	ldw	r4,-28(fp)
  e607e8:	0e606340 	call	e60634 <alt_file_locked>
  e607ec:	e0bff715 	stw	r2,-36(fp)
  e607f0:	e0bff717 	ldw	r2,-36(fp)
  e607f4:	1004803a 	cmplt	r2,r2,zero
  e607f8:	1000131e 	bne	r2,zero,e60848 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  e607fc:	e0bffa17 	ldw	r2,-24(fp)
  e60800:	10800317 	ldw	r2,12(r2)
  e60804:	1005003a 	cmpeq	r2,r2,zero
  e60808:	1000091e 	bne	r2,zero,e60830 <open+0x120>
  e6080c:	e0bffa17 	ldw	r2,-24(fp)
  e60810:	10800317 	ldw	r2,12(r2)
  e60814:	e13ff917 	ldw	r4,-28(fp)
  e60818:	e17ffb17 	ldw	r5,-20(fp)
  e6081c:	e1bffc17 	ldw	r6,-16(fp)
  e60820:	e1fffd17 	ldw	r7,-12(fp)
  e60824:	103ee83a 	callr	r2
  e60828:	e0bfff15 	stw	r2,-4(fp)
  e6082c:	00000106 	br	e60834 <open+0x124>
  e60830:	e03fff15 	stw	zero,-4(fp)
  e60834:	e0bfff17 	ldw	r2,-4(fp)
  e60838:	e0bff715 	stw	r2,-36(fp)
  e6083c:	00000206 	br	e60848 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  e60840:	00bffb44 	movi	r2,-19
  e60844:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  e60848:	e0bff717 	ldw	r2,-36(fp)
  e6084c:	1004403a 	cmpge	r2,r2,zero
  e60850:	1000091e 	bne	r2,zero,e60878 <open+0x168>
  {
    alt_release_fd (index);  
  e60854:	e13ff817 	ldw	r4,-32(fp)
  e60858:	0e5cea80 	call	e5cea8 <alt_release_fd>
    ALT_ERRNO = -status;
  e6085c:	0e608980 	call	e60898 <alt_get_errno>
  e60860:	e0fff717 	ldw	r3,-36(fp)
  e60864:	00c7c83a 	sub	r3,zero,r3
  e60868:	10c00015 	stw	r3,0(r2)
    return -1;
  e6086c:	00bfffc4 	movi	r2,-1
  e60870:	e0bffe15 	stw	r2,-8(fp)
  e60874:	00000206 	br	e60880 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  e60878:	e0bff817 	ldw	r2,-32(fp)
  e6087c:	e0bffe15 	stw	r2,-8(fp)
  e60880:	e0bffe17 	ldw	r2,-8(fp)
}
  e60884:	e037883a 	mov	sp,fp
  e60888:	dfc00117 	ldw	ra,4(sp)
  e6088c:	df000017 	ldw	fp,0(sp)
  e60890:	dec00204 	addi	sp,sp,8
  e60894:	f800283a 	ret

00e60898 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  e60898:	defffd04 	addi	sp,sp,-12
  e6089c:	dfc00215 	stw	ra,8(sp)
  e608a0:	df000115 	stw	fp,4(sp)
  e608a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  e608a8:	008039b4 	movhi	r2,230
  e608ac:	108ca604 	addi	r2,r2,12952
  e608b0:	10800017 	ldw	r2,0(r2)
  e608b4:	1005003a 	cmpeq	r2,r2,zero
  e608b8:	1000061e 	bne	r2,zero,e608d4 <alt_get_errno+0x3c>
  e608bc:	008039b4 	movhi	r2,230
  e608c0:	108ca604 	addi	r2,r2,12952
  e608c4:	10800017 	ldw	r2,0(r2)
  e608c8:	103ee83a 	callr	r2
  e608cc:	e0bfff15 	stw	r2,-4(fp)
  e608d0:	00000306 	br	e608e0 <alt_get_errno+0x48>
  e608d4:	008039b4 	movhi	r2,230
  e608d8:	1093ac04 	addi	r2,r2,20144
  e608dc:	e0bfff15 	stw	r2,-4(fp)
  e608e0:	e0bfff17 	ldw	r2,-4(fp)
}
  e608e4:	e037883a 	mov	sp,fp
  e608e8:	dfc00117 	ldw	ra,4(sp)
  e608ec:	df000017 	ldw	fp,0(sp)
  e608f0:	dec00204 	addi	sp,sp,8
  e608f4:	f800283a 	ret

00e608f8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  e608f8:	defffa04 	addi	sp,sp,-24
  e608fc:	df000515 	stw	fp,20(sp)
  e60900:	df000504 	addi	fp,sp,20
  e60904:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  e60908:	0005303a 	rdctl	r2,status
  e6090c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  e60910:	e0fffd17 	ldw	r3,-12(fp)
  e60914:	00bfff84 	movi	r2,-2
  e60918:	1884703a 	and	r2,r3,r2
  e6091c:	1001703a 	wrctl	status,r2
  
  return context;
  e60920:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  e60924:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  e60928:	e0bfff17 	ldw	r2,-4(fp)
  e6092c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  e60930:	e0bffc17 	ldw	r2,-16(fp)
  e60934:	10c00017 	ldw	r3,0(r2)
  e60938:	e0bffc17 	ldw	r2,-16(fp)
  e6093c:	10800117 	ldw	r2,4(r2)
  e60940:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  e60944:	e0bffc17 	ldw	r2,-16(fp)
  e60948:	10c00117 	ldw	r3,4(r2)
  e6094c:	e0bffc17 	ldw	r2,-16(fp)
  e60950:	10800017 	ldw	r2,0(r2)
  e60954:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  e60958:	e0fffc17 	ldw	r3,-16(fp)
  e6095c:	e0bffc17 	ldw	r2,-16(fp)
  e60960:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  e60964:	e0fffc17 	ldw	r3,-16(fp)
  e60968:	e0bffc17 	ldw	r2,-16(fp)
  e6096c:	18800015 	stw	r2,0(r3)
  e60970:	e0bffe17 	ldw	r2,-8(fp)
  e60974:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  e60978:	e0bffb17 	ldw	r2,-20(fp)
  e6097c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  e60980:	e037883a 	mov	sp,fp
  e60984:	df000017 	ldw	fp,0(sp)
  e60988:	dec00104 	addi	sp,sp,4
  e6098c:	f800283a 	ret

00e60990 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  e60990:	defffb04 	addi	sp,sp,-20
  e60994:	dfc00415 	stw	ra,16(sp)
  e60998:	df000315 	stw	fp,12(sp)
  e6099c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  e609a0:	d0a01c17 	ldw	r2,-32656(gp)
  e609a4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  e609a8:	d0a72117 	ldw	r2,-25468(gp)
  e609ac:	10800044 	addi	r2,r2,1
  e609b0:	d0a72115 	stw	r2,-25468(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  e609b4:	00003106 	br	e60a7c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  e609b8:	e0bffe17 	ldw	r2,-8(fp)
  e609bc:	10800017 	ldw	r2,0(r2)
  e609c0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  e609c4:	e0bffe17 	ldw	r2,-8(fp)
  e609c8:	10800403 	ldbu	r2,16(r2)
  e609cc:	10803fcc 	andi	r2,r2,255
  e609d0:	1005003a 	cmpeq	r2,r2,zero
  e609d4:	1000051e 	bne	r2,zero,e609ec <alt_tick+0x5c>
  e609d8:	d0a72117 	ldw	r2,-25468(gp)
  e609dc:	1004c03a 	cmpne	r2,r2,zero
  e609e0:	1000021e 	bne	r2,zero,e609ec <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  e609e4:	e0bffe17 	ldw	r2,-8(fp)
  e609e8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  e609ec:	e0bffe17 	ldw	r2,-8(fp)
  e609f0:	10c00217 	ldw	r3,8(r2)
  e609f4:	d0a72117 	ldw	r2,-25468(gp)
  e609f8:	10c01e36 	bltu	r2,r3,e60a74 <alt_tick+0xe4>
  e609fc:	e0bffe17 	ldw	r2,-8(fp)
  e60a00:	10800403 	ldbu	r2,16(r2)
  e60a04:	10803fcc 	andi	r2,r2,255
  e60a08:	1004c03a 	cmpne	r2,r2,zero
  e60a0c:	1000191e 	bne	r2,zero,e60a74 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  e60a10:	e0bffe17 	ldw	r2,-8(fp)
  e60a14:	10c00317 	ldw	r3,12(r2)
  e60a18:	e0bffe17 	ldw	r2,-8(fp)
  e60a1c:	11000517 	ldw	r4,20(r2)
  e60a20:	183ee83a 	callr	r3
  e60a24:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  e60a28:	e0bffd17 	ldw	r2,-12(fp)
  e60a2c:	1004c03a 	cmpne	r2,r2,zero
  e60a30:	1000031e 	bne	r2,zero,e60a40 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  e60a34:	e13ffe17 	ldw	r4,-8(fp)
  e60a38:	0e608f80 	call	e608f8 <alt_alarm_stop>
  e60a3c:	00000d06 	br	e60a74 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  e60a40:	e0bffe17 	ldw	r2,-8(fp)
  e60a44:	10c00217 	ldw	r3,8(r2)
  e60a48:	e0bffd17 	ldw	r2,-12(fp)
  e60a4c:	1887883a 	add	r3,r3,r2
  e60a50:	e0bffe17 	ldw	r2,-8(fp)
  e60a54:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  e60a58:	e0bffe17 	ldw	r2,-8(fp)
  e60a5c:	10c00217 	ldw	r3,8(r2)
  e60a60:	d0a72117 	ldw	r2,-25468(gp)
  e60a64:	1880032e 	bgeu	r3,r2,e60a74 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  e60a68:	e0fffe17 	ldw	r3,-8(fp)
  e60a6c:	00800044 	movi	r2,1
  e60a70:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  e60a74:	e0bfff17 	ldw	r2,-4(fp)
  e60a78:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  e60a7c:	d0e01c04 	addi	r3,gp,-32656
  e60a80:	e0bffe17 	ldw	r2,-8(fp)
  e60a84:	10ffcc1e 	bne	r2,r3,e609b8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  e60a88:	e037883a 	mov	sp,fp
  e60a8c:	dfc00117 	ldw	ra,4(sp)
  e60a90:	df000017 	ldw	fp,0(sp)
  e60a94:	dec00204 	addi	sp,sp,8
  e60a98:	f800283a 	ret

00e60a9c <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  e60a9c:	deffff04 	addi	sp,sp,-4
  e60aa0:	df000015 	stw	fp,0(sp)
  e60aa4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  e60aa8:	000170fa 	wrctl	ienable,zero
}
  e60aac:	e037883a 	mov	sp,fp
  e60ab0:	df000017 	ldw	fp,0(sp)
  e60ab4:	dec00104 	addi	sp,sp,4
  e60ab8:	f800283a 	ret

00e60abc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  e60abc:	defffa04 	addi	sp,sp,-24
  e60ac0:	dfc00515 	stw	ra,20(sp)
  e60ac4:	df000415 	stw	fp,16(sp)
  e60ac8:	df000404 	addi	fp,sp,16
  e60acc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  e60ad0:	008039b4 	movhi	r2,230
  e60ad4:	108ca104 	addi	r2,r2,12932
  e60ad8:	10800017 	ldw	r2,0(r2)
  e60adc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  e60ae0:	00003306 	br	e60bb0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  e60ae4:	e0bffd17 	ldw	r2,-12(fp)
  e60ae8:	11000217 	ldw	r4,8(r2)
  e60aec:	0e53e5c0 	call	e53e5c <strlen>
  e60af0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  e60af4:	e0bffd17 	ldw	r2,-12(fp)
  e60af8:	10c00217 	ldw	r3,8(r2)
  e60afc:	e0bffc17 	ldw	r2,-16(fp)
  e60b00:	1885883a 	add	r2,r3,r2
  e60b04:	10bfffc4 	addi	r2,r2,-1
  e60b08:	10800003 	ldbu	r2,0(r2)
  e60b0c:	10803fcc 	andi	r2,r2,255
  e60b10:	1080201c 	xori	r2,r2,128
  e60b14:	10bfe004 	addi	r2,r2,-128
  e60b18:	10800bd8 	cmpnei	r2,r2,47
  e60b1c:	1000031e 	bne	r2,zero,e60b2c <alt_find_file+0x70>
    {
      len -= 1;
  e60b20:	e0bffc17 	ldw	r2,-16(fp)
  e60b24:	10bfffc4 	addi	r2,r2,-1
  e60b28:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  e60b2c:	e0bffc17 	ldw	r2,-16(fp)
  e60b30:	1007883a 	mov	r3,r2
  e60b34:	e0bffe17 	ldw	r2,-8(fp)
  e60b38:	1885883a 	add	r2,r3,r2
  e60b3c:	10800003 	ldbu	r2,0(r2)
  e60b40:	10803fcc 	andi	r2,r2,255
  e60b44:	1080201c 	xori	r2,r2,128
  e60b48:	10bfe004 	addi	r2,r2,-128
  e60b4c:	10800be0 	cmpeqi	r2,r2,47
  e60b50:	10000a1e 	bne	r2,zero,e60b7c <alt_find_file+0xc0>
  e60b54:	e0bffc17 	ldw	r2,-16(fp)
  e60b58:	1007883a 	mov	r3,r2
  e60b5c:	e0bffe17 	ldw	r2,-8(fp)
  e60b60:	1885883a 	add	r2,r3,r2
  e60b64:	10800003 	ldbu	r2,0(r2)
  e60b68:	10803fcc 	andi	r2,r2,255
  e60b6c:	1080201c 	xori	r2,r2,128
  e60b70:	10bfe004 	addi	r2,r2,-128
  e60b74:	1004c03a 	cmpne	r2,r2,zero
  e60b78:	10000a1e 	bne	r2,zero,e60ba4 <alt_find_file+0xe8>
  e60b7c:	e0bffd17 	ldw	r2,-12(fp)
  e60b80:	11000217 	ldw	r4,8(r2)
  e60b84:	e1bffc17 	ldw	r6,-16(fp)
  e60b88:	e17ffe17 	ldw	r5,-8(fp)
  e60b8c:	0e60d700 	call	e60d70 <memcmp>
  e60b90:	1004c03a 	cmpne	r2,r2,zero
  e60b94:	1000031e 	bne	r2,zero,e60ba4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  e60b98:	e0bffd17 	ldw	r2,-12(fp)
  e60b9c:	e0bfff15 	stw	r2,-4(fp)
  e60ba0:	00000806 	br	e60bc4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  e60ba4:	e0bffd17 	ldw	r2,-12(fp)
  e60ba8:	10800017 	ldw	r2,0(r2)
  e60bac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  e60bb0:	00c039b4 	movhi	r3,230
  e60bb4:	18cca104 	addi	r3,r3,12932
  e60bb8:	e0bffd17 	ldw	r2,-12(fp)
  e60bbc:	10ffc91e 	bne	r2,r3,e60ae4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  e60bc0:	e03fff15 	stw	zero,-4(fp)
  e60bc4:	e0bfff17 	ldw	r2,-4(fp)
}
  e60bc8:	e037883a 	mov	sp,fp
  e60bcc:	dfc00117 	ldw	ra,4(sp)
  e60bd0:	df000017 	ldw	fp,0(sp)
  e60bd4:	dec00204 	addi	sp,sp,8
  e60bd8:	f800283a 	ret

00e60bdc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  e60bdc:	defffc04 	addi	sp,sp,-16
  e60be0:	df000315 	stw	fp,12(sp)
  e60be4:	df000304 	addi	fp,sp,12
  e60be8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  e60bec:	00bffa04 	movi	r2,-24
  e60bf0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  e60bf4:	e03ffe15 	stw	zero,-8(fp)
  e60bf8:	00001e06 	br	e60c74 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  e60bfc:	e0bffe17 	ldw	r2,-8(fp)
  e60c00:	00c039b4 	movhi	r3,230
  e60c04:	18c7c804 	addi	r3,r3,7968
  e60c08:	10800324 	muli	r2,r2,12
  e60c0c:	10c5883a 	add	r2,r2,r3
  e60c10:	10800017 	ldw	r2,0(r2)
  e60c14:	1004c03a 	cmpne	r2,r2,zero
  e60c18:	1000131e 	bne	r2,zero,e60c68 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  e60c1c:	e0bffe17 	ldw	r2,-8(fp)
  e60c20:	00c039b4 	movhi	r3,230
  e60c24:	18c7c804 	addi	r3,r3,7968
  e60c28:	10800324 	muli	r2,r2,12
  e60c2c:	10c7883a 	add	r3,r2,r3
  e60c30:	e0bfff17 	ldw	r2,-4(fp)
  e60c34:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  e60c38:	008039b4 	movhi	r2,230
  e60c3c:	108ca504 	addi	r2,r2,12948
  e60c40:	10c00017 	ldw	r3,0(r2)
  e60c44:	e0bffe17 	ldw	r2,-8(fp)
  e60c48:	1880040e 	bge	r3,r2,e60c5c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  e60c4c:	00c039b4 	movhi	r3,230
  e60c50:	18cca504 	addi	r3,r3,12948
  e60c54:	e0bffe17 	ldw	r2,-8(fp)
  e60c58:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  e60c5c:	e0bffe17 	ldw	r2,-8(fp)
  e60c60:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  e60c64:	00000606 	br	e60c80 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  e60c68:	e0bffe17 	ldw	r2,-8(fp)
  e60c6c:	10800044 	addi	r2,r2,1
  e60c70:	e0bffe15 	stw	r2,-8(fp)
  e60c74:	e0bffe17 	ldw	r2,-8(fp)
  e60c78:	10800810 	cmplti	r2,r2,32
  e60c7c:	103fdf1e 	bne	r2,zero,e60bfc <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  e60c80:	e0bffd17 	ldw	r2,-12(fp)
}
  e60c84:	e037883a 	mov	sp,fp
  e60c88:	df000017 	ldw	fp,0(sp)
  e60c8c:	dec00104 	addi	sp,sp,4
  e60c90:	f800283a 	ret

00e60c94 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  e60c94:	defffb04 	addi	sp,sp,-20
  e60c98:	df000415 	stw	fp,16(sp)
  e60c9c:	df000404 	addi	fp,sp,16
  e60ca0:	e13ffe15 	stw	r4,-8(fp)
  e60ca4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  e60ca8:	e0bfff17 	ldw	r2,-4(fp)
  e60cac:	10840070 	cmpltui	r2,r2,4097
  e60cb0:	1000021e 	bne	r2,zero,e60cbc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  e60cb4:	00840004 	movi	r2,4096
  e60cb8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  e60cbc:	e0fffe17 	ldw	r3,-8(fp)
  e60cc0:	e0bfff17 	ldw	r2,-4(fp)
  e60cc4:	1885883a 	add	r2,r3,r2
  e60cc8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  e60ccc:	e0bffe17 	ldw	r2,-8(fp)
  e60cd0:	e0bffd15 	stw	r2,-12(fp)
  e60cd4:	00000506 	br	e60cec <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  e60cd8:	e0bffd17 	ldw	r2,-12(fp)
  e60cdc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  e60ce0:	e0bffd17 	ldw	r2,-12(fp)
  e60ce4:	10800804 	addi	r2,r2,32
  e60ce8:	e0bffd15 	stw	r2,-12(fp)
  e60cec:	e0fffd17 	ldw	r3,-12(fp)
  e60cf0:	e0bffc17 	ldw	r2,-16(fp)
  e60cf4:	18bff836 	bltu	r3,r2,e60cd8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  e60cf8:	e0bffe17 	ldw	r2,-8(fp)
  e60cfc:	108007cc 	andi	r2,r2,31
  e60d00:	1005003a 	cmpeq	r2,r2,zero
  e60d04:	1000021e 	bne	r2,zero,e60d10 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  e60d08:	e0bffd17 	ldw	r2,-12(fp)
  e60d0c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  e60d10:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  e60d14:	e037883a 	mov	sp,fp
  e60d18:	df000017 	ldw	fp,0(sp)
  e60d1c:	dec00104 	addi	sp,sp,4
  e60d20:	f800283a 	ret

00e60d24 <atexit>:
  e60d24:	200b883a 	mov	r5,r4
  e60d28:	000d883a 	mov	r6,zero
  e60d2c:	0009883a 	mov	r4,zero
  e60d30:	000f883a 	mov	r7,zero
  e60d34:	0e60de41 	jmpi	e60de4 <__register_exitproc>

00e60d38 <exit>:
  e60d38:	defffe04 	addi	sp,sp,-8
  e60d3c:	000b883a 	mov	r5,zero
  e60d40:	dc000015 	stw	r16,0(sp)
  e60d44:	dfc00115 	stw	ra,4(sp)
  e60d48:	2021883a 	mov	r16,r4
  e60d4c:	0e60f1c0 	call	e60f1c <__call_exitprocs>
  e60d50:	008039b4 	movhi	r2,230
  e60d54:	108c9c04 	addi	r2,r2,12912
  e60d58:	11000017 	ldw	r4,0(r2)
  e60d5c:	20800f17 	ldw	r2,60(r4)
  e60d60:	10000126 	beq	r2,zero,e60d68 <exit+0x30>
  e60d64:	103ee83a 	callr	r2
  e60d68:	8009883a 	mov	r4,r16
  e60d6c:	0e6110c0 	call	e6110c <_exit>

00e60d70 <memcmp>:
  e60d70:	00c000c4 	movi	r3,3
  e60d74:	1980032e 	bgeu	r3,r6,e60d84 <memcmp+0x14>
  e60d78:	2144b03a 	or	r2,r4,r5
  e60d7c:	10c4703a 	and	r2,r2,r3
  e60d80:	10000f26 	beq	r2,zero,e60dc0 <memcmp+0x50>
  e60d84:	31ffffc4 	addi	r7,r6,-1
  e60d88:	3000061e 	bne	r6,zero,e60da4 <memcmp+0x34>
  e60d8c:	00000a06 	br	e60db8 <memcmp+0x48>
  e60d90:	39ffffc4 	addi	r7,r7,-1
  e60d94:	00bfffc4 	movi	r2,-1
  e60d98:	21000044 	addi	r4,r4,1
  e60d9c:	29400044 	addi	r5,r5,1
  e60da0:	38800526 	beq	r7,r2,e60db8 <memcmp+0x48>
  e60da4:	20c00003 	ldbu	r3,0(r4)
  e60da8:	28800003 	ldbu	r2,0(r5)
  e60dac:	18bff826 	beq	r3,r2,e60d90 <memcmp+0x20>
  e60db0:	1885c83a 	sub	r2,r3,r2
  e60db4:	f800283a 	ret
  e60db8:	0005883a 	mov	r2,zero
  e60dbc:	f800283a 	ret
  e60dc0:	180f883a 	mov	r7,r3
  e60dc4:	20c00017 	ldw	r3,0(r4)
  e60dc8:	28800017 	ldw	r2,0(r5)
  e60dcc:	18bfed1e 	bne	r3,r2,e60d84 <memcmp+0x14>
  e60dd0:	31bfff04 	addi	r6,r6,-4
  e60dd4:	21000104 	addi	r4,r4,4
  e60dd8:	29400104 	addi	r5,r5,4
  e60ddc:	39bff936 	bltu	r7,r6,e60dc4 <memcmp+0x54>
  e60de0:	003fe806 	br	e60d84 <memcmp+0x14>

00e60de4 <__register_exitproc>:
  e60de4:	defffa04 	addi	sp,sp,-24
  e60de8:	008039b4 	movhi	r2,230
  e60dec:	108c9c04 	addi	r2,r2,12912
  e60df0:	dc000015 	stw	r16,0(sp)
  e60df4:	14000017 	ldw	r16,0(r2)
  e60df8:	dd000415 	stw	r20,16(sp)
  e60dfc:	2829883a 	mov	r20,r5
  e60e00:	81405217 	ldw	r5,328(r16)
  e60e04:	dcc00315 	stw	r19,12(sp)
  e60e08:	dc800215 	stw	r18,8(sp)
  e60e0c:	dc400115 	stw	r17,4(sp)
  e60e10:	dfc00515 	stw	ra,20(sp)
  e60e14:	2023883a 	mov	r17,r4
  e60e18:	3027883a 	mov	r19,r6
  e60e1c:	3825883a 	mov	r18,r7
  e60e20:	28002526 	beq	r5,zero,e60eb8 <__register_exitproc+0xd4>
  e60e24:	29000117 	ldw	r4,4(r5)
  e60e28:	008007c4 	movi	r2,31
  e60e2c:	11002716 	blt	r2,r4,e60ecc <__register_exitproc+0xe8>
  e60e30:	8800101e 	bne	r17,zero,e60e74 <__register_exitproc+0x90>
  e60e34:	2105883a 	add	r2,r4,r4
  e60e38:	1085883a 	add	r2,r2,r2
  e60e3c:	20c00044 	addi	r3,r4,1
  e60e40:	1145883a 	add	r2,r2,r5
  e60e44:	0009883a 	mov	r4,zero
  e60e48:	15000215 	stw	r20,8(r2)
  e60e4c:	28c00115 	stw	r3,4(r5)
  e60e50:	2005883a 	mov	r2,r4
  e60e54:	dfc00517 	ldw	ra,20(sp)
  e60e58:	dd000417 	ldw	r20,16(sp)
  e60e5c:	dcc00317 	ldw	r19,12(sp)
  e60e60:	dc800217 	ldw	r18,8(sp)
  e60e64:	dc400117 	ldw	r17,4(sp)
  e60e68:	dc000017 	ldw	r16,0(sp)
  e60e6c:	dec00604 	addi	sp,sp,24
  e60e70:	f800283a 	ret
  e60e74:	29802204 	addi	r6,r5,136
  e60e78:	00800044 	movi	r2,1
  e60e7c:	110e983a 	sll	r7,r2,r4
  e60e80:	30c04017 	ldw	r3,256(r6)
  e60e84:	2105883a 	add	r2,r4,r4
  e60e88:	1085883a 	add	r2,r2,r2
  e60e8c:	1185883a 	add	r2,r2,r6
  e60e90:	19c6b03a 	or	r3,r3,r7
  e60e94:	14802015 	stw	r18,128(r2)
  e60e98:	14c00015 	stw	r19,0(r2)
  e60e9c:	00800084 	movi	r2,2
  e60ea0:	30c04015 	stw	r3,256(r6)
  e60ea4:	88bfe31e 	bne	r17,r2,e60e34 <__register_exitproc+0x50>
  e60ea8:	30804117 	ldw	r2,260(r6)
  e60eac:	11c4b03a 	or	r2,r2,r7
  e60eb0:	30804115 	stw	r2,260(r6)
  e60eb4:	003fdf06 	br	e60e34 <__register_exitproc+0x50>
  e60eb8:	008039b4 	movhi	r2,230
  e60ebc:	1093fd04 	addi	r2,r2,20468
  e60ec0:	100b883a 	mov	r5,r2
  e60ec4:	80805215 	stw	r2,328(r16)
  e60ec8:	003fd606 	br	e60e24 <__register_exitproc+0x40>
  e60ecc:	00800034 	movhi	r2,0
  e60ed0:	10800004 	addi	r2,r2,0
  e60ed4:	1000021e 	bne	r2,zero,e60ee0 <__register_exitproc+0xfc>
  e60ed8:	013fffc4 	movi	r4,-1
  e60edc:	003fdc06 	br	e60e50 <__register_exitproc+0x6c>
  e60ee0:	01006404 	movi	r4,400
  e60ee4:	103ee83a 	callr	r2
  e60ee8:	1007883a 	mov	r3,r2
  e60eec:	103ffa26 	beq	r2,zero,e60ed8 <__register_exitproc+0xf4>
  e60ef0:	80805217 	ldw	r2,328(r16)
  e60ef4:	180b883a 	mov	r5,r3
  e60ef8:	18000115 	stw	zero,4(r3)
  e60efc:	18800015 	stw	r2,0(r3)
  e60f00:	80c05215 	stw	r3,328(r16)
  e60f04:	18006215 	stw	zero,392(r3)
  e60f08:	18006315 	stw	zero,396(r3)
  e60f0c:	0009883a 	mov	r4,zero
  e60f10:	883fc826 	beq	r17,zero,e60e34 <__register_exitproc+0x50>
  e60f14:	003fd706 	br	e60e74 <__register_exitproc+0x90>

00e60f18 <register_fini>:
  e60f18:	f800283a 	ret

00e60f1c <__call_exitprocs>:
  e60f1c:	008039b4 	movhi	r2,230
  e60f20:	108c9c04 	addi	r2,r2,12912
  e60f24:	10800017 	ldw	r2,0(r2)
  e60f28:	defff304 	addi	sp,sp,-52
  e60f2c:	df000b15 	stw	fp,44(sp)
  e60f30:	d8800115 	stw	r2,4(sp)
  e60f34:	00800034 	movhi	r2,0
  e60f38:	10800004 	addi	r2,r2,0
  e60f3c:	1005003a 	cmpeq	r2,r2,zero
  e60f40:	d8800215 	stw	r2,8(sp)
  e60f44:	d8800117 	ldw	r2,4(sp)
  e60f48:	dd400815 	stw	r21,32(sp)
  e60f4c:	dd000715 	stw	r20,28(sp)
  e60f50:	10805204 	addi	r2,r2,328
  e60f54:	dfc00c15 	stw	ra,48(sp)
  e60f58:	ddc00a15 	stw	r23,40(sp)
  e60f5c:	dd800915 	stw	r22,36(sp)
  e60f60:	dcc00615 	stw	r19,24(sp)
  e60f64:	dc800515 	stw	r18,20(sp)
  e60f68:	dc400415 	stw	r17,16(sp)
  e60f6c:	dc000315 	stw	r16,12(sp)
  e60f70:	282b883a 	mov	r21,r5
  e60f74:	2039883a 	mov	fp,r4
  e60f78:	d8800015 	stw	r2,0(sp)
  e60f7c:	2829003a 	cmpeq	r20,r5,zero
  e60f80:	d8800117 	ldw	r2,4(sp)
  e60f84:	14405217 	ldw	r17,328(r2)
  e60f88:	88001026 	beq	r17,zero,e60fcc <__call_exitprocs+0xb0>
  e60f8c:	ddc00017 	ldw	r23,0(sp)
  e60f90:	88800117 	ldw	r2,4(r17)
  e60f94:	8c802204 	addi	r18,r17,136
  e60f98:	143fffc4 	addi	r16,r2,-1
  e60f9c:	80000916 	blt	r16,zero,e60fc4 <__call_exitprocs+0xa8>
  e60fa0:	05bfffc4 	movi	r22,-1
  e60fa4:	a000151e 	bne	r20,zero,e60ffc <__call_exitprocs+0xe0>
  e60fa8:	8409883a 	add	r4,r16,r16
  e60fac:	2105883a 	add	r2,r4,r4
  e60fb0:	1485883a 	add	r2,r2,r18
  e60fb4:	10c02017 	ldw	r3,128(r2)
  e60fb8:	a8c01126 	beq	r21,r3,e61000 <__call_exitprocs+0xe4>
  e60fbc:	843fffc4 	addi	r16,r16,-1
  e60fc0:	85bff81e 	bne	r16,r22,e60fa4 <__call_exitprocs+0x88>
  e60fc4:	d8800217 	ldw	r2,8(sp)
  e60fc8:	10003126 	beq	r2,zero,e61090 <__call_exitprocs+0x174>
  e60fcc:	dfc00c17 	ldw	ra,48(sp)
  e60fd0:	df000b17 	ldw	fp,44(sp)
  e60fd4:	ddc00a17 	ldw	r23,40(sp)
  e60fd8:	dd800917 	ldw	r22,36(sp)
  e60fdc:	dd400817 	ldw	r21,32(sp)
  e60fe0:	dd000717 	ldw	r20,28(sp)
  e60fe4:	dcc00617 	ldw	r19,24(sp)
  e60fe8:	dc800517 	ldw	r18,20(sp)
  e60fec:	dc400417 	ldw	r17,16(sp)
  e60ff0:	dc000317 	ldw	r16,12(sp)
  e60ff4:	dec00d04 	addi	sp,sp,52
  e60ff8:	f800283a 	ret
  e60ffc:	8409883a 	add	r4,r16,r16
  e61000:	88c00117 	ldw	r3,4(r17)
  e61004:	2105883a 	add	r2,r4,r4
  e61008:	1445883a 	add	r2,r2,r17
  e6100c:	18ffffc4 	addi	r3,r3,-1
  e61010:	11800217 	ldw	r6,8(r2)
  e61014:	1c001526 	beq	r3,r16,e6106c <__call_exitprocs+0x150>
  e61018:	10000215 	stw	zero,8(r2)
  e6101c:	303fe726 	beq	r6,zero,e60fbc <__call_exitprocs+0xa0>
  e61020:	00c00044 	movi	r3,1
  e61024:	1c06983a 	sll	r3,r3,r16
  e61028:	90804017 	ldw	r2,256(r18)
  e6102c:	8cc00117 	ldw	r19,4(r17)
  e61030:	1884703a 	and	r2,r3,r2
  e61034:	10001426 	beq	r2,zero,e61088 <__call_exitprocs+0x16c>
  e61038:	90804117 	ldw	r2,260(r18)
  e6103c:	1884703a 	and	r2,r3,r2
  e61040:	10000c1e 	bne	r2,zero,e61074 <__call_exitprocs+0x158>
  e61044:	2105883a 	add	r2,r4,r4
  e61048:	1485883a 	add	r2,r2,r18
  e6104c:	11400017 	ldw	r5,0(r2)
  e61050:	e009883a 	mov	r4,fp
  e61054:	303ee83a 	callr	r6
  e61058:	88800117 	ldw	r2,4(r17)
  e6105c:	98bfc81e 	bne	r19,r2,e60f80 <__call_exitprocs+0x64>
  e61060:	b8800017 	ldw	r2,0(r23)
  e61064:	147fd526 	beq	r2,r17,e60fbc <__call_exitprocs+0xa0>
  e61068:	003fc506 	br	e60f80 <__call_exitprocs+0x64>
  e6106c:	8c000115 	stw	r16,4(r17)
  e61070:	003fea06 	br	e6101c <__call_exitprocs+0x100>
  e61074:	2105883a 	add	r2,r4,r4
  e61078:	1485883a 	add	r2,r2,r18
  e6107c:	11000017 	ldw	r4,0(r2)
  e61080:	303ee83a 	callr	r6
  e61084:	003ff406 	br	e61058 <__call_exitprocs+0x13c>
  e61088:	303ee83a 	callr	r6
  e6108c:	003ff206 	br	e61058 <__call_exitprocs+0x13c>
  e61090:	88800117 	ldw	r2,4(r17)
  e61094:	1000081e 	bne	r2,zero,e610b8 <__call_exitprocs+0x19c>
  e61098:	89000017 	ldw	r4,0(r17)
  e6109c:	20000726 	beq	r4,zero,e610bc <__call_exitprocs+0x1a0>
  e610a0:	b9000015 	stw	r4,0(r23)
  e610a4:	8809883a 	mov	r4,r17
  e610a8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  e610ac:	bc400017 	ldw	r17,0(r23)
  e610b0:	883fb71e 	bne	r17,zero,e60f90 <__call_exitprocs+0x74>
  e610b4:	003fc506 	br	e60fcc <__call_exitprocs+0xb0>
  e610b8:	89000017 	ldw	r4,0(r17)
  e610bc:	882f883a 	mov	r23,r17
  e610c0:	2023883a 	mov	r17,r4
  e610c4:	883fb21e 	bne	r17,zero,e60f90 <__call_exitprocs+0x74>
  e610c8:	003fc006 	br	e60fcc <__call_exitprocs+0xb0>

00e610cc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  e610cc:	defffd04 	addi	sp,sp,-12
  e610d0:	df000215 	stw	fp,8(sp)
  e610d4:	df000204 	addi	fp,sp,8
  e610d8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  e610dc:	e0bfff17 	ldw	r2,-4(fp)
  e610e0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  e610e4:	e0bffe17 	ldw	r2,-8(fp)
  e610e8:	1005003a 	cmpeq	r2,r2,zero
  e610ec:	1000021e 	bne	r2,zero,e610f8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  e610f0:	002af070 	cmpltui	zero,zero,43969
  e610f4:	00000106 	br	e610fc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  e610f8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  e610fc:	e037883a 	mov	sp,fp
  e61100:	df000017 	ldw	fp,0(sp)
  e61104:	dec00104 	addi	sp,sp,4
  e61108:	f800283a 	ret

00e6110c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  e6110c:	defffd04 	addi	sp,sp,-12
  e61110:	dfc00215 	stw	ra,8(sp)
  e61114:	df000115 	stw	fp,4(sp)
  e61118:	df000104 	addi	fp,sp,4
  e6111c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  e61120:	e13fff17 	ldw	r4,-4(fp)
  e61124:	0e610cc0 	call	e610cc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  e61128:	003fff06 	br	e61128 <_exit+0x1c>
  e6112c:	00000010 	cmplti	zero,zero,0
  e61130:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  e61134:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_3+0x4b7a0>
  e61138:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_3+0x1187c0>
  e6113c:	001b0c0b 	ldhu	zero,27696(zero)
  e61140:	00000028 	cmpgeui	zero,zero,0
  e61144:	00000018 	cmpnei	zero,zero,0
  e61148:	00e5b044 	movi	r3,-26943
  e6114c:	000005dc 	xori	zero,zero,23
  e61150:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  e61154:	92099170 	cmpltui	r8,r18,9797
  e61158:	95079308 	cmpgei	r20,r18,7756
  e6115c:	97049605 	stb	fp,4696(r18)
  e61160:	90019f03 	ldbu	zero,1660(r18)
  e61164:	9c06940a 	0x9c06940a
  e61168:	00000002 	0x2
  e6116c:	00000028 	cmpgeui	zero,zero,0
  e61170:	00000044 	movi	zero,1
  e61174:	00e5b620 	cmpeqi	r3,zero,-26920
  e61178:	000005b0 	cmpltui	zero,zero,22
  e6117c:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  e61180:	92099168 	cmpgeui	r8,r18,9797
  e61184:	95079308 	cmpgei	r20,r18,7756
  e61188:	9c039705 	stb	r16,3676(r19)
  e6118c:	90019f02 	0x90019f02
  e61190:	9606940a 	0x9606940a
  e61194:	00000004 	movi	zero,0
  e61198:	00e60f18 	cmpnei	r3,zero,-26564
