
lights.elf:     file format elf32-littlenios2
lights.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00012370 memsz 0x00012370 flags r-x
    LOAD off    0x00013390 vaddr 0x00812390 paddr 0x00813f98 align 2**12
         filesz 0x00001c08 memsz 0x00001c08 flags rw-
    LOAD off    0x00015ba0 vaddr 0x00815ba0 paddr 0x00815ba0 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011c88  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000554  00811e3c  00811e3c  00012e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c08  00812390  00813f98  00013390  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  00815ba0  00815ba0  00015ba0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00014f98  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000010f8  00000000  00000000  00014fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001d46  00000000  00000000  000160b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002bb69  00000000  00000000  00017dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a5da  00000000  00000000  00043967  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001ac5a  00000000  00000000  0004df41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000023c8  00000000  00000000  00068b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002dcb  00000000  00000000  0006af64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e889  00000000  00000000  0006dd2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0007c5b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000e60  00000000  00000000  0007c5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000814fc  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000814ff  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00081504  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00081505  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00081509  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0008150d  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00081511  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0008151c  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00081527  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00081532  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0008153d  2**0
                  CONTENTS, READONLY
 28 .jdi          0000ff9d  00000000  00000000  0008155d  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000cf0fa  00000000  00000000  000914fa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00811e3c l    d  .rodata	00000000 .rodata
00812390 l    d  .rwdata	00000000 .rwdata
00815ba0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Fractal.c
00000000 l    df *ABS*	00000000 Project.c
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 ef_pow.c
00813f2c l     O .rwdata	00000008 bp
00813f34 l     O .rwdata	00000008 dp_l
00813f3c l     O .rwdata	00000008 dp_h
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_rint.c
00811f08 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_isnan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00802150 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00802abc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00812390 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00803e60 l     F .text	00000058 __sprint_r
008120aa l     O .rodata	00000010 blanks.3452
0081209a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00805ec4 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008078c0 l     F .text	00000058 std
008079cc l     F .text	00000008 __fp_lock
008079d4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00813f54 l     O .rwdata	00000004 charset
008120d8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00812220 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080c4a8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
0080c6f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080c750 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080c850 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080c970 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080ca50 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080cbac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080cdd8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00813f78 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080d074 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00812d4c l     O .rwdata	00001060 jtag_uart_0
00813dac l     O .rwdata	0000003c mailbox_0
00813de8 l     O .rwdata	0000003c mailbox_1
00813e24 l     O .rwdata	0000003c mailbox_2
00813e60 l     O .rwdata	0000003c mailbox_3
00813e9c l     O .rwdata	00000030 altera_ro_zipfs
00813ecc l     O .rwdata	00000054 video_pixel_buffer_dma_0
0080d3a0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080d5e0 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080d808 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
0080dfdc l     F .text	0000006c alt_avalon_mutex_reg
0080e048 l     F .text	00000060 alt_get_errno
0080e1dc l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0080e3ac l     F .text	0000007c alt_mutex_trylock
0080e480 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_ro_zipfs.c
0080e838 l     F .text	00000074 read_word
0080e8ac l     F .text	00000050 read_word_inc
0080e8fc l     F .text	00000048 read_half_word
0080e944 l     F .text	00000050 read_half_word_inc
0080e994 l     F .text	00000118 check_file_header
0080ebd8 l     F .text	000000a0 check_directory_table
0080ec78 l     F .text	000000ac find_directory_entry
0080ed24 l     F .text	00000160 find_file_entry_by_name
0080ee84 l     F .text	00000180 find_file_entry
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00810b60 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008110a8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
008111e4 l     F .text	000000dc alt_file_locked
00811448 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00811bb8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00811d6c l     F .text	00000040 alt_sim_halt
00800200 g     F .text	00000070 genColor
00813f20 g     O .rwdata	00000008 targetArrayXYMaster
0080967c g     F .text	00000094 _mprec_log10
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
00809768 g     F .text	00000088 __any_on
0080ae74 g     F .text	00000070 _isatty_r
008121f8 g     O .rodata	00000028 __mprec_tinytens
0080cc0c g     F .text	0000006c alt_main
0080e22c g     F .text	000000a8 altera_avalon_mailbox_pend
00810014 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00803c64 g     F .text	000000a0 _puts_r
00815c00 g     O .bss	00000100 alt_irq
0080aee4 g     F .text	00000078 _lseek_r
00813f98 g       *ABS*	00000000 __flash_rwdata_start
0080bf24 g     F .text	00000088 __eqdf2
00815e90 g       *ABS*	00000000 __alt_heap_start
0080e2d4 g     F .text	000000d8 altera_avalon_mailbox_get
00803bec g     F .text	00000044 printf
0080a940 g     F .text	00000068 __sseek
00807928 g     F .text	000000a4 __sinit
0080e814 g     F .text	00000024 alt_get_cpu_freq
00800434 g     F .text	00000020 startTimer
00808600 g     F .text	00000084 _setlocale_r
00807a28 g     F .text	00000068 __sfmoreglue
0080cc98 g     F .text	00000020 __malloc_unlock
008025e8 g     F .text	00000174 __divsf3
008090f8 g     F .text	000000e0 memmove
00807a18 g     F .text	00000010 _cleanup
00800c18 g     F .text	00000458 powf
0080e540 g     F .text	00000040 altera_avalon_mutex_trylock
008097f0 g     F .text	000000bc _Balloc
008029d4 g     F .text	00000094 __fixsfsi
0080f3e8 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
0080bfac g     F .text	00000088 __gtdf2
00803bdc g     F .text	00000010 __errno
0080f3a8 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00800000 g     F .entry	0000001c __reset
0080e5dc g     F .text	0000007c altera_avalon_mutex_is_mine
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080ae00 g     F .text	00000074 _fstat_r
00815bbc g     O .bss	00000004 errno
008032a0 g     F .text	00000038 __make_dp
0080369c g     F .text	0000002c __make_fp
00815bc4 g     O .bss	00000004 alt_argv
0081bf20 g       *ABS*	00000000 _gp
00802334 g     F .text	00000070 __subsf3
0080f588 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00006000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
00812bcc g     O .rwdata	00000180 alt_fd_list
00810c88 g     F .text	00000094 alt_find_dev
00809058 g     F .text	000000a0 memcpy
00807a0c g     F .text	0000000c _cleanup_r
0080c144 g     F .text	000000f8 __floatsidf
00810d1c g     F .text	00000090 alt_fs_reg
0081116c g     F .text	00000078 alt_io_redirect
0080c0bc g     F .text	00000088 __ltdf2
00811e3c g       *ABS*	00000000 __DTOR_END__
00803d04 g     F .text	00000014 puts
0080f004 g     F .text	00000098 alt_ro_zipfs_open
0081164c g     F .text	00000020 altera_nios2_irq_init
008095cc g     F .text	000000b0 __ratio
0080e120 g     F .text	000000bc altera_avalon_mailbox_post
0080f638 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0080da20 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00803c30 g     F .text	00000034 _printf_r
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0080c5e4 g     F .text	00000008 __udivsi3
0080c8b0 g     F .text	000000c0 isatty
00812108 g     O .rodata	000000c8 __mprec_tens
0080e100 g     F .text	00000020 altera_avalon_mailbox_close
0080fcc4 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
008085dc g     F .text	00000008 __locale_charset
008028c4 g     F .text	00000078 __lesf2
00811844 g     F .text	00000090 alt_icache_flush
00815bb0 g     O .bss	00000004 __malloc_top_pad
0080e7b4 g     F .text	00000040 perf_get_num_starts
00813f50 g     O .rwdata	00000004 __mb_cur_max
008085e4 g     F .text	0000000c _localeconv_r
00809ee8 g     F .text	0000003c __i2b
00807fc0 g     F .text	0000049c __sfvwrite_r
00801f18 g     F .text	0000001c finitef
0080a8c8 g     F .text	00000070 _sbrk_r
008104a8 g     F .text	000000d0 helper_plot_pixel
00801f08 g     F .text	00000010 fabsf
0080af5c g     F .text	00000078 _read_r
00812790 g     O .rwdata	0000000c __lc_ctype
00813f70 g     O .rwdata	00000004 alt_max_fd
008039dc g     F .text	00000138 __unpack_d
0080acdc g     F .text	00000110 _fclose_r
0080788c g     F .text	00000034 fflush
00815bb4 g     O .bss	00000004 __malloc_max_sbrked_mem
00802a68 g     F .text	00000054 __extendsfdf2
00801f34 g     F .text	00000018 isnanf
00802f4c g     F .text	00000074 __adddf3
008094ac g     F .text	00000120 __b2d
0080f66c g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0080b5b0 g     F .text	000005b0 __umoddi3
0080cabc g     F .text	000000f0 lseek
0080e658 g     F .text	00000058 altera_avalon_mutex_first_lock
00813f44 g     O .rwdata	00000004 __fdlib_version
00813f4c g     O .rwdata	00000004 _global_impure_ptr
0080a264 g     F .text	000005f4 _realloc_r
00815e90 g       *ABS*	00000000 __bss_end
00810fb0 g     F .text	000000f8 alt_iic_isr_register
0080f7d0 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00811540 g     F .text	0000010c alt_tick
0080afd4 g     F .text	000005dc __udivdi3
008121d0 g     O .rodata	00000028 __mprec_bigtens
0080a144 g     F .text	00000120 __s2b
0080c314 g     F .text	00000194 __floatunsidf
008093cc g     F .text	00000060 __mcmp
00800454 g     F .text	00000040 endTimeAndPrint
008079f4 g     F .text	00000018 __fp_lock_all
00810f68 g     F .text	00000048 alt_ic_irq_enabled
008114a8 g     F .text	00000098 alt_alarm_stop
00815bcc g     O .bss	00000004 alt_irq_active
0080f198 g     F .text	00000148 alt_ro_zipfs_seek
008000ec g     F .exceptions	000000c8 alt_irq_handler
008003d0 g     F .text	00000020 FloatToFixed
00812ba4 g     O .rwdata	00000028 alt_dev_null
008004a0 g     F .text	000001ac barrier
0080e428 g     F .text	00000058 altera_avalon_mutex_open
00801cf8 g     F .text	00000210 rint
0080352c g     F .text	000000c8 __unpack_f
00810a68 g     F .text	00000044 alt_dcache_flush_all
00809298 g     F .text	00000070 __hi0bits
008103e4 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0080c23c g     F .text	000000d8 __fixdfsi
00813f98 g       *ABS*	00000000 __ram_rwdata_end
00813f68 g     O .rwdata	00000008 alt_dev_list
0080cf54 g     F .text	00000120 write
00810578 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
008027d4 g     F .text	00000078 __gtsf2
00813f84 g     O .rwdata	00000008 alt_mutex_list
00812390 g       *ABS*	00000000 __ram_rodata_end
0080c77c g     F .text	000000d4 fstat
0080a024 g     F .text	00000120 __pow5mult
00815ba4 g     O .bss	00000004 __nlocale_changed
0080c5ec g     F .text	00000008 __umodsi3
00815e90 g       *ABS*	00000000 end
008033cc g     F .text	00000160 __pack_f
00815ba0 g     O .bss	00000004 myPixelBuffer
0080d520 g     F .text	000000c0 altera_avalon_jtag_uart_init
00811e38 g       *ABS*	00000000 __CTOR_LIST__
00b50000 g       *ABS*	00000000 __alt_stack_pointer
0080334c g     F .text	00000080 __clzsi2
0080dc44 g     F .text	00000240 altera_avalon_jtag_uart_write
0080de84 g     F .text	00000158 alt_avalon_mailbox_init
00807918 g     F .text	00000004 __sfp_lock_acquire
00808f74 g     F .text	000000e4 memchr
00803eb8 g     F .text	00001eac ___vfprintf_internal_r
00803d8c g     F .text	00000060 _sprintf_r
00807cac g     F .text	00000314 _free_r
00811bbc g     F .text	000001b0 __call_exitprocs
00815ba8 g     O .bss	00000004 __mlocale_changed
00813f5c g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
00815bd0 g     O .bss	00000004 _alt_tick_rate
00809bb4 g     F .text	0000014c __lshift
00815bd4 g     O .bss	00000004 _alt_nticks
0080ccb8 g     F .text	00000120 read
0080d108 g     F .text	00000298 alt_sys_init
0080293c g     F .text	00000098 __floatsisf
008003f8 g     F .text	0000003c fixedPointMultiply64
00811a84 g     F .text	00000134 __register_exitproc
00811994 g     F .text	000000f0 strncmp
0080e580 g     F .text	0000005c altera_avalon_mutex_unlock
00809d00 g     F .text	000001e8 __multiply
0080d8b8 g     F .text	00000074 altera_avalon_jtag_uart_close
00812390 g       *ABS*	00000000 __ram_rwdata_start
00811e3c g       *ABS*	00000000 __ram_rodata_start
00815bd8 g     O .bss	00000028 __malloc_current_mallinfo
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
0080275c g     F .text	00000078 __eqsf2
008098ac g     F .text	0000017c __d2b
0080d3d8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0081178c g     F .text	000000b8 alt_get_fd
00803b14 g     F .text	000000c8 __fpcmp_parts_d
0080ac6c g     F .text	00000070 _close_r
008006d4 g     F .text	000004c4 drawFrame
0080e6b0 g     F .text	000000b0 perf_get_section_time
00811920 g     F .text	00000074 memcmp
0080d488 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00815e90 g       *ABS*	00000000 __alt_stack_base
0080d4d0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00805d88 g     F .text	0000013c __swsetup_r
00802fc0 g     F .text	00000258 __divdf3
00807a90 g     F .text	000000f0 __sfp
00809710 g     F .text	00000058 __copybits
0080e760 g     F .text	00000054 perf_get_total_time
0081279c g     O .rwdata	00000408 __malloc_av_
00807924 g     F .text	00000004 __sinit_lock_release
0080bb60 g     F .text	000003c4 __muldf3
00801070 g     F .text	00000b14 __ieee754_powf
0080aa24 g     F .text	00000060 __sread
00811f18 g     O .rodata	00000010 __thenan_sf
0081166c g     F .text	00000120 alt_find_file
00810aac g     F .text	000000b4 alt_dev_llist_insert
0080cc78 g     F .text	00000020 __malloc_lock
0080ce98 g     F .text	000000bc sbrk
00801f54 g     F .text	0000014c scalbnf
00807690 g     F .text	000001fc _fflush_r
0080abb8 g     F .text	000000b4 _calloc_r
008003f0 g     F .text	00000008 fixedPointMultiply32
00815ba0 g       *ABS*	00000000 __bss_start
008091d8 g     F .text	00000098 memset
00801b84 g     F .text	0000016c __ieee754_sqrtf
00800b98 g     F .text	00000080 main
00815bc8 g     O .bss	00000004 alt_envp
00815bb8 g     O .bss	00000004 __malloc_max_total_mem
0080f5e0 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0080d430 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080284c g     F .text	00000078 __ltsf2
0080a938 g     F .text	00000008 __sclose
00801cf0 g     F .text	00000008 matherr
00b50000 g       *ABS*	00000000 __alt_heap_limit
0080adec g     F .text	00000014 fclose
008032d8 g     F .text	00000074 __truncdfsf2
00815d00 g     O .bss	00000190 _atexit0
0080e500 g     F .text	00000040 altera_avalon_mutex_lock
008060dc g     F .text	000015b4 _dtoa_r
00808834 g     F .text	00000740 _malloc_r
00813f74 g     O .rwdata	00000004 alt_errno
00808524 g     F .text	000000b8 _fwalk
0080c524 g     F .text	00000060 __divsi3
0080f09c g     F .text	000000fc alt_ro_zipfs_read
00811f28 g     O .rodata	00000014 __thenan_df
00807b80 g     F .text	0000012c _malloc_trim_r
00811e3c g       *ABS*	00000000 __CTOR_END__
00802408 g     F .text	000001e0 __mulsf3
0080f350 g     F .text	00000058 alt_ro_zipfs_check_valid
0080aa84 g     F .text	000000bc strcmp
00811e3c g       *ABS*	00000000 __flash_rodata_start
00811e3c g       *ABS*	00000000 __DTOR_LIST__
00803218 g     F .text	00000088 __nedf2
0080f2e0 g     F .text	00000070 alt_ro_zipfs_fstat
0080d0d4 g     F .text	00000034 alt_irq_init
0080ce38 g     F .text	00000060 alt_release_fd
008020a0 g     F .text	00000018 copysignf
00803d18 g     F .text	00000074 sprintf
00811f3c g     O .rodata	00000100 __clz_tab
00815bac g     O .bss	00000004 _PathLocale
008118d4 g     F .text	00000014 atexit
0080ab40 g     F .text	00000078 _write_r
00808684 g     F .text	0000001c setlocale
00801f4c g     F .text	00000008 nanf
00813f48 g     O .rwdata	00000004 _impure_ptr
00815bc0 g     O .bss	00000004 alt_argc
00810c24 g     F .text	00000064 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
0080942c g     F .text	00000080 __ulp
0080a858 g     F .text	00000040 __isinfd
008079dc g     F .text	00000018 __fp_unlock_all
00813f7c g     O .rwdata	00000008 alt_mailbox_list
0080064c g     F .text	00000088 setup
00813f60 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
008085f0 g     F .text	00000010 localeconv
00810ddc g     F .text	00000050 alt_ic_isr_register
00813f98 g       *ABS*	00000000 _edata
00815e90 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080d92c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00810ec8 g     F .text	000000a0 alt_ic_irq_disable
0080a9a8 g     F .text	0000007c __swrite
00813f58 g     O .rwdata	00000004 __malloc_trim_threshold
0080e7f4 g     F .text	00000020 alt_get_performance_counter_base
008118e8 g     F .text	00000038 exit
0080845c g     F .text	000000c8 _fwalk_reent
00809a28 g     F .text	0000018c __mdiff
00800270 g     F .text	00000160 mandelbrot
0080c584 g     F .text	00000060 __modsi3
00b50000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080791c g     F .text	00000004 __sfp_lock_release
0080e0a8 g     F .text	00000058 altera_avalon_mailbox_open
008035f4 g     F .text	000000a8 __fpcmp_parts_f
00811dac g     F .text	00000020 _exit
0080a898 g     F .text	00000030 __isnand
00810914 g     F .text	00000154 alt_alarm_start
008020b8 g     F .text	00000098 __muldi3
008086a0 g     F .text	00000194 __smakebuf_r
00803dec g     F .text	00000074 strlen
008112c0 g     F .text	00000188 open
0080c034 g     F .text	00000088 __gedf2
00800494 g     F .text	0000000c clearScreen
00810dac g     F .text	00000030 alt_icache_flush_all
00813f8c g     O .rwdata	00000004 alt_priority_mask
00810e2c g     F .text	0000009c alt_ic_irq_enable
00805d64 g     F .text	00000024 __vfprintf_internal
0080e4e0 g     F .text	00000020 altera_avalon_mutex_close
00802ecc g     F .text	00000080 __subdf3
00809308 g     F .text	000000c4 __lo0bits
00813f28 g     O .rwdata	00000004 targetArrayXY
00813f90 g     O .rwdata	00000008 alt_alarm_list
00810bc0 g     F .text	00000064 _do_ctors
0080c5f4 g     F .text	000000fc close
008023a4 g     F .text	00000064 __addsf3
0080c9d0 g     F .text	00000080 alt_load
008036c8 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00807920 g     F .text	00000004 __sinit_lock_acquire
00809f24 g     F .text	00000100 __multadd
00809270 g     F .text	00000028 _Bfree
0080eaac g     F .text	0000012c check_directory_header



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18d70004 	addi	r3,r3,23552
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18d70004 	addi	r3,r3,23552
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c02d74 	movhi	sp,181
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d6afc814 	ori	gp,gp,48928
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001d8:	1096e814 	ori	r2,r2,23456

    movhi r3, %hi(__bss_end)
  8001dc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001e0:	18d7a414 	ori	r3,r3,24208

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	080c9d00 	call	80c9d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	080cc0c0 	call	80cc0c <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <genColor>:
}

//makes the color for display
int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  800200:	00801904 	movi	r2,100
		color = grey;
	}
	else {
		int red = iter;
		int green = iter * 6;
  800204:	200b883a 	mov	r5,r4
  800208:	018007c4 	movi	r6,31
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  80020c:	01c00fc4 	movi	r7,63
}

//makes the color for display
int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  800210:	00defbc4 	movi	r3,31727
  800214:	20800b26 	beq	r4,r2,800244 <genColor+0x44>
		color = grey;
	}
	else {
		int red = iter;
		int green = iter * 6;
  800218:	210001a4 	muli	r4,r4,6
  80021c:	31400d16 	blt	r6,r5,800254 <genColor+0x54>
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  800220:	280492fa 	slli	r2,r5,11
  800224:	29403fcc 	andi	r5,r5,255
  800228:	10fe000c 	andi	r3,r2,63488
  80022c:	2005883a 	mov	r2,r4
  800230:	39000616 	blt	r7,r4,80024c <genColor+0x4c>
  800234:	1004917a 	slli	r2,r2,5
  800238:	1946b03a 	or	r3,r3,r5
  80023c:	1081f80c 	andi	r2,r2,2016
  800240:	10c6b03a 	or	r3,r2,r3
	}
	return color;
}
  800244:	1805883a 	mov	r2,r3
  800248:	f800283a 	ret
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  80024c:	3805883a 	mov	r2,r7
  800250:	003ff806 	br	800234 <genColor+0x34>
	if (iter == maxIter) {
		color = grey;
	}
	else {
		int red = iter;
		int green = iter * 6;
  800254:	300b883a 	mov	r5,r6
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  800258:	280492fa 	slli	r2,r5,11
  80025c:	29403fcc 	andi	r5,r5,255
  800260:	10fe000c 	andi	r3,r2,63488
  800264:	2005883a 	mov	r2,r4
  800268:	393ff20e 	bge	r7,r4,800234 <genColor+0x34>
  80026c:	003ff706 	br	80024c <genColor+0x4c>

00800270 <mandelbrot>:
	}
	return color;
}

//this calculates the math to find if a location is in the Mandelbrot set
int mandelbrot(long x0, long y0, long *xOut, long *yOut) {
  800270:	defff304 	addi	sp,sp,-52
  800274:	df000b15 	stw	fp,44(sp)
  800278:	ddc00a15 	stw	r23,40(sp)
  80027c:	dd400815 	stw	r21,32(sp)
  800280:	dcc00615 	stw	r19,24(sp)
  800284:	dc800515 	stw	r18,20(sp)
  800288:	dc400415 	stw	r17,16(sp)
  80028c:	dc000315 	stw	r16,12(sp)
  800290:	0025883a 	mov	r18,zero
  800294:	0021883a 	mov	r16,zero
  800298:	2839883a 	mov	fp,r5
  80029c:	0017883a 	mov	r11,zero
  8002a0:	0023883a 	mov	r17,zero
  8002a4:	002b883a 	mov	r21,zero
  8002a8:	002f883a 	mov	r23,zero
  8002ac:	0027883a 	mov	r19,zero
  8002b0:	dfc00c15 	stw	ra,48(sp)
  8002b4:	dd800915 	stw	r22,36(sp)
  8002b8:	dd000715 	stw	r20,28(sp)
  8002bc:	d9000015 	stw	r4,0(sp)
  8002c0:	d9800115 	stw	r6,4(sp)
  8002c4:	d9c00215 	stw	r7,8(sp)
  8002c8:	00000206 	br	8002d4 <mandelbrot+0x64>
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  8002cc:	00801904 	movi	r2,100
  8002d0:	b8802e26 	beq	r23,r2,80038c <mandelbrot+0x11c>
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  8002d4:	9008d17a 	srli	r4,r18,5
  8002d8:	980696fa 	slli	r3,r19,27
  8002dc:	900496fa 	slli	r2,r18,27

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  8002e0:	da800017 	ldw	r10,0(sp)
  8002e4:	aad7c83a 	sub	r11,r21,r11
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  8002e8:	20c6b03a 	or	r3,r4,r3

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  8002ec:	5aad883a 	add	r22,r11,r10
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  8002f0:	1010d6ba 	srli	r8,r2,26
  8002f4:	181491ba 	slli	r10,r3,6
  8002f8:	880b883a 	mov	r5,r17
  8002fc:	8009883a 	mov	r4,r16
  800300:	5210b03a 	or	r8,r10,r8
  800304:	4005d7fa 	srai	r2,r8,31
  800308:	400d883a 	mov	r6,r8
	return (long long) a * (long long) b;
}

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  80030c:	b027d7fa 	srai	r19,r22,31
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  800310:	100f883a 	mov	r7,r2
  800314:	08020b80 	call	8020b8 <__muldi3>
  800318:	180c91ba 	slli	r6,r3,6
  80031c:	1004d6ba 	srli	r2,r2,26

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  800320:	b009883a 	mov	r4,r22
  800324:	980b883a 	mov	r5,r19
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  800328:	3084b03a 	or	r2,r6,r2

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  80032c:	980f883a 	mov	r7,r19
  800330:	b00d883a 	mov	r6,r22
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  800334:	e0a9883a 	add	r20,fp,r2

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  800338:	08020b80 	call	8020b8 <__muldi3>
  80033c:	180c91ba 	slli	r6,r3,6
	return (long long) a * (long long) b;
}

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  800340:	a023d7fa 	srai	r17,r20,31

	return c >> 26;
  800344:	1004d6ba 	srli	r2,r2,26
  800348:	a009883a 	mov	r4,r20
  80034c:	880b883a 	mov	r5,r17
  800350:	3084b03a 	or	r2,r6,r2
  800354:	880f883a 	mov	r7,r17
  800358:	a00d883a 	mov	r6,r20
  80035c:	102b883a 	mov	r21,r2
  800360:	08020b80 	call	8020b8 <__muldi3>
  800364:	180c91ba 	slli	r6,r3,6
  800368:	1004d6ba 	srli	r2,r2,26
		 if (cpu == 3) {
		 endTimeAndPrint();
		 }//*/

		x = xtemp;
		iter++;
  80036c:	bdc00044 	addi	r23,r23,1
	return (long long) a * (long long) b;
}

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  800370:	b025883a 	mov	r18,r22

	return c >> 26;
  800374:	3084b03a 	or	r2,r6,r2
  800378:	1017883a 	mov	r11,r2
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  80037c:	a889883a 	add	r4,r21,r2
  800380:	00840034 	movhi	r2,4096
	return (long long) a * (long long) b;
}

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  800384:	a021883a 	mov	r16,r20
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  800388:	113fd00e 	bge	r2,r4,8002cc <mandelbrot+0x5c>

		x = xtemp;
		iter++;

	}
	*xOut = x;
  80038c:	d8800117 	ldw	r2,4(sp)
	*yOut = y;
  800390:	da800217 	ldw	r10,8(sp)

		x = xtemp;
		iter++;

	}
	*xOut = x;
  800394:	15800015 	stw	r22,0(r2)
	*yOut = y;

	return iter;
}
  800398:	b805883a 	mov	r2,r23
		x = xtemp;
		iter++;

	}
	*xOut = x;
	*yOut = y;
  80039c:	55000015 	stw	r20,0(r10)

	return iter;
}
  8003a0:	dfc00c17 	ldw	ra,48(sp)
  8003a4:	df000b17 	ldw	fp,44(sp)
  8003a8:	ddc00a17 	ldw	r23,40(sp)
  8003ac:	dd800917 	ldw	r22,36(sp)
  8003b0:	dd400817 	ldw	r21,32(sp)
  8003b4:	dd000717 	ldw	r20,28(sp)
  8003b8:	dcc00617 	ldw	r19,24(sp)
  8003bc:	dc800517 	ldw	r18,20(sp)
  8003c0:	dc400417 	ldw	r17,16(sp)
  8003c4:	dc000317 	ldw	r16,12(sp)
  8003c8:	dec00d04 	addi	sp,sp,52
  8003cc:	f800283a 	ret

008003d0 <FloatToFixed>:
	cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);

	printf("Cycles : %llu \n\n", (cycles));
}

long FloatToFixed(float fixMe) {
  8003d0:	00934034 	movhi	r2,19712
  8003d4:	deffff04 	addi	sp,sp,-4
  8003d8:	2089ff32 	custom	252,r4,r4,r2
  8003dc:	dfc00015 	stw	ra,0(sp)
  8003e0:	08029d40 	call	8029d4 <__fixsfsi>
	return (long) (fixMe * ((float) 134217728));
}
  8003e4:	dfc00017 	ldw	ra,0(sp)
  8003e8:	dec00104 	addi	sp,sp,4
  8003ec:	f800283a 	ret

008003f0 <fixedPointMultiply32>:

long fixedPointMultiply32(long a, long b) {
	return (long long) a * (long long) b;
}
  8003f0:	2145383a 	mul	r2,r4,r5
  8003f4:	f800283a 	ret

008003f8 <fixedPointMultiply64>:

long fixedPointMultiply64(long a, long b) {
  8003f8:	2813d7fa 	srai	r9,r5,31
  8003fc:	2007d7fa 	srai	r3,r4,31
  800400:	2811883a 	mov	r8,r5
  800404:	deffff04 	addi	sp,sp,-4
  800408:	400d883a 	mov	r6,r8
  80040c:	180b883a 	mov	r5,r3
  800410:	480f883a 	mov	r7,r9
  800414:	dfc00015 	stw	ra,0(sp)
  800418:	08020b80 	call	8020b8 <__muldi3>
  80041c:	180c91ba 	slli	r6,r3,6
  800420:	1004d6ba 	srli	r2,r2,26
  800424:	3084b03a 	or	r2,r6,r2

	long long c = (long long) a * (long long) b;

	return c >> 26;
}
  800428:	dfc00017 	ldw	ra,0(sp)
  80042c:	dec00104 	addi	sp,sp,4
  800430:	f800283a 	ret

00800434 <startTimer>:
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
}

//starts the performance counter
void startTimer(void) {
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
  800434:	01000044 	movi	r4,1
  800438:	0005883a 	mov	r2,zero
  80043c:	11000035 	stwio	r4,0(r2)
	PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
  800440:	00c00104 	movi	r3,4
  800444:	18000035 	stwio	zero,0(r3)
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
  800448:	00800504 	movi	r2,20
  80044c:	10000035 	stwio	zero,0(r2)
}
  800450:	f800283a 	ret

00800454 <endTimeAndPrint>:

//stops the timer and prints out the number of cycles
void endTimeAndPrint(void) {
  800454:	deffff04 	addi	sp,sp,-4
	unsigned long long cycles = 0;

	PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
  800458:	00800404 	movi	r2,16
	PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
}

//stops the timer and prints out the number of cycles
void endTimeAndPrint(void) {
  80045c:	dfc00015 	stw	ra,0(sp)
	unsigned long long cycles = 0;

	PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
  800460:	10000035 	stwio	zero,0(r2)
	PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
  800464:	0007883a 	mov	r3,zero
  800468:	18000035 	stwio	zero,0(r3)
	cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);
  80046c:	0009883a 	mov	r4,zero
  800470:	01400044 	movi	r5,1
  800474:	080e6b00 	call	80e6b0 <perf_get_section_time>

	printf("Cycles : %llu \n\n", (cycles));
  800478:	180d883a 	mov	r6,r3
  80047c:	01002074 	movhi	r4,129
  800480:	21078f04 	addi	r4,r4,7740
  800484:	100b883a 	mov	r5,r2
}
  800488:	dfc00017 	ldw	ra,0(sp)
  80048c:	dec00104 	addi	sp,sp,4

	PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
	PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
	cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);

	printf("Cycles : %llu \n\n", (cycles));
  800490:	0803bec1 	jmpi	803bec <printf>

00800494 <clearScreen>:
	}
}

void clearScreen(void) {
	//clears the part of the screen controlled by the pixel buffer
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
  800494:	d1272017 	ldw	r4,-25472(gp)
  800498:	000b883a 	mov	r5,zero
  80049c:	080f66c1 	jmpi	80f66c <alt_up_pixel_buffer_dma_clear_screen>

008004a0 <barrier>:
		}
	}

}

void barrier(alt_u8 barrierNum) {
  8004a0:	deffe104 	addi	sp,sp,-124
  8004a4:	dfc01e15 	stw	ra,120(sp)
  8004a8:	dd401d15 	stw	r21,116(sp)
  8004ac:	dd001c15 	stw	r20,112(sp)
  8004b0:	dcc01b15 	stw	r19,108(sp)
  8004b4:	dc801a15 	stw	r18,104(sp)
  8004b8:	dc401915 	stw	r17,100(sp)
  8004bc:	dc001815 	stw	r16,96(sp)
	alt_u32 msg;
	alt_mailbox_dev *mb[NUM_CPUS];
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
  8004c0:	0027317a 	rdctl	r19,cpuid
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  8004c4:	dc400404 	addi	r17,sp,16
  8004c8:	01402074 	movhi	r5,129
  8004cc:	29479404 	addi	r5,r5,7760
  8004d0:	000d883a 	mov	r6,zero
  8004d4:	8809883a 	mov	r4,r17
  8004d8:	0803d180 	call	803d18 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  8004dc:	8809883a 	mov	r4,r17
  8004e0:	080e0a80 	call	80e0a8 <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  8004e4:	05400044 	movi	r21,1
  8004e8:	01402074 	movhi	r5,129
  8004ec:	29479404 	addi	r5,r5,7760
  8004f0:	a80d883a 	mov	r6,r21
  8004f4:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  8004f8:	d8800015 	stw	r2,0(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  8004fc:	0803d180 	call	803d18 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  800500:	8809883a 	mov	r4,r17
  800504:	080e0a80 	call	80e0a8 <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  800508:	05000084 	movi	r20,2
  80050c:	01402074 	movhi	r5,129
  800510:	29479404 	addi	r5,r5,7760
  800514:	a00d883a 	mov	r6,r20
  800518:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  80051c:	d8800115 	stw	r2,4(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  800520:	0803d180 	call	803d18 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  800524:	8809883a 	mov	r4,r17
  800528:	080e0a80 	call	80e0a8 <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  80052c:	048000c4 	movi	r18,3
  800530:	01402074 	movhi	r5,129
  800534:	29479404 	addi	r5,r5,7760
  800538:	900d883a 	mov	r6,r18
  80053c:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  800540:	d8800215 	stw	r2,8(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  800544:	0803d180 	call	803d18 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  800548:	8809883a 	mov	r4,r17
  80054c:	080e0a80 	call	80e0a8 <altera_avalon_mailbox_open>
  800550:	1021883a 	mov	r16,r2
  800554:	d8800315 	stw	r2,12(sp)
  800558:	9c803026 	beq	r19,r18,80061c <barrier+0x17c>
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  80055c:	98000426 	beq	r19,zero,800570 <barrier+0xd0>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  800560:	d9000017 	ldw	r4,0(sp)
  800564:	000b883a 	mov	r5,zero
  800568:	080e1200 	call	80e120 <altera_avalon_mailbox_post>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  80056c:	9d400426 	beq	r19,r21,800580 <barrier+0xe0>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  800570:	d9000117 	ldw	r4,4(sp)
  800574:	000b883a 	mov	r5,zero
  800578:	080e1200 	call	80e120 <altera_avalon_mailbox_post>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  80057c:	9d000326 	beq	r19,r20,80058c <barrier+0xec>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  800580:	d9000217 	ldw	r4,8(sp)
  800584:	000b883a 	mov	r5,zero
  800588:	080e1200 	call	80e120 <altera_avalon_mailbox_post>
  80058c:	8009883a 	mov	r4,r16
  800590:	000b883a 	mov	r5,zero
  800594:	080e1200 	call	80e120 <altera_avalon_mailbox_post>
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  800598:	9cc5883a 	add	r2,r19,r19
  80059c:	1085883a 	add	r2,r2,r2
  8005a0:	16c5883a 	add	r2,r2,sp
  8005a4:	14400017 	ldw	r17,0(r2)
  8005a8:	8809883a 	mov	r4,r17
  8005ac:	080e22c0 	call	80e22c <altera_avalon_mailbox_pend>

		if (msg != 0) {
  8005b0:	10000126 	beq	r2,zero,8005b8 <barrier+0x118>
			targetArrayXY = (long *) msg;
  8005b4:	d0a00215 	stw	r2,-32760(gp)
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  8005b8:	8809883a 	mov	r4,r17
  8005bc:	080e22c0 	call	80e22c <altera_avalon_mailbox_pend>

		if (msg != 0) {
  8005c0:	10000126 	beq	r2,zero,8005c8 <barrier+0x128>
			targetArrayXY = (long *) msg;
  8005c4:	d0a00215 	stw	r2,-32760(gp)
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  8005c8:	8809883a 	mov	r4,r17
  8005cc:	080e22c0 	call	80e22c <altera_avalon_mailbox_pend>

		if (msg != 0) {
  8005d0:	10000126 	beq	r2,zero,8005d8 <barrier+0x138>
			targetArrayXY = (long *) msg;
  8005d4:	d0a00215 	stw	r2,-32760(gp)
		}
	}
	for (i = 0; i < NUM_CPUS; i++) {
		altera_avalon_mailbox_close(mb[i]);
  8005d8:	d9000017 	ldw	r4,0(sp)
  8005dc:	080e1000 	call	80e100 <altera_avalon_mailbox_close>
  8005e0:	d9000117 	ldw	r4,4(sp)
  8005e4:	080e1000 	call	80e100 <altera_avalon_mailbox_close>
  8005e8:	d9000217 	ldw	r4,8(sp)
  8005ec:	080e1000 	call	80e100 <altera_avalon_mailbox_close>
  8005f0:	8009883a 	mov	r4,r16
  8005f4:	080e1000 	call	80e100 <altera_avalon_mailbox_close>
	}
}
  8005f8:	dfc01e17 	ldw	ra,120(sp)
  8005fc:	dd401d17 	ldw	r21,116(sp)
  800600:	dd001c17 	ldw	r20,112(sp)
  800604:	dcc01b17 	ldw	r19,108(sp)
  800608:	dc801a17 	ldw	r18,104(sp)
  80060c:	dc401917 	ldw	r17,100(sp)
  800610:	dc001817 	ldw	r16,96(sp)
  800614:	dec01f04 	addi	sp,sp,124
  800618:	f800283a 	ret
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
  80061c:	0025883a 	mov	r18,zero
  800620:	d823883a 	mov	r17,sp
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
  800624:	89000017 	ldw	r4,0(r17)
  800628:	d1600004 	addi	r5,gp,-32768
	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
  80062c:	94800044 	addi	r18,r18,1
		if (i != cpu) {

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
  800630:	080e1200 	call	80e120 <altera_avalon_mailbox_post>
	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
  800634:	00800104 	movi	r2,4
  800638:	8c400104 	addi	r17,r17,4
  80063c:	90bfd626 	beq	r18,r2,800598 <barrier+0xf8>
		if (i != cpu) {
  800640:	008000c4 	movi	r2,3
  800644:	90bff71e 	bne	r18,r2,800624 <barrier+0x184>
  800648:	003fd306 	br	800598 <barrier+0xf8>

0080064c <setup>:
long targetArrayXYMaster[2] = { -52679047, -13416037 };
volatile long *targetArrayXY = targetArrayXYMaster;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  80064c:	023ff734 	movhi	r8,65500
  800650:	defffe04 	addi	sp,sp,-8
  800654:	dfc00115 	stw	ra,4(sp)
  800658:	dc000015 	stw	r16,0(sp)

	volatile void **buffaddr = (volatile void**) 0x31FD;

	//moving the frame buffer to work with the high resolution
#ifdef MASTER
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  80065c:	01002074 	movhi	r4,129
  800660:	21079804 	addi	r4,r4,7776
long targetArrayXYMaster[2] = { -52679047, -13416037 };
volatile long *targetArrayXY = targetArrayXYMaster;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  800664:	da37883a 	add	sp,sp,r8

	volatile void **buffaddr = (volatile void**) 0x31FD;

	//moving the frame buffer to work with the high resolution
#ifdef MASTER
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  800668:	080f3a80 	call	80f3a8 <alt_up_pixel_buffer_dma_open_dev>
	volatile alt_u8 pixel_buffer_memory[2359296];
	alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
  80066c:	1009883a 	mov	r4,r2
  800670:	d80b883a 	mov	r5,sp

	volatile void **buffaddr = (volatile void**) 0x31FD;

	//moving the frame buffer to work with the high resolution
#ifdef MASTER
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  800674:	d0a72015 	stw	r2,-25472(gp)
	volatile alt_u8 pixel_buffer_memory[2359296];
	alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
  800678:	080f5880 	call	80f588 <alt_up_pixel_buffer_dma_change_back_buffer_address>
	alt_up_pixel_buffer_dma_swap_buffers(myPixelBuffer);
  80067c:	d1272017 	ldw	r4,-25472(gp)
  800680:	080f5e00 	call	80f5e0 <alt_up_pixel_buffer_dma_swap_buffers>
  800684:	00000206 	br	800690 <setup+0x44>
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(myPixelBuffer)) {
		alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
  800688:	d1272017 	ldw	r4,-25472(gp)
  80068c:	080f5880 	call	80f588 <alt_up_pixel_buffer_dma_change_back_buffer_address>
#ifdef MASTER
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
	volatile alt_u8 pixel_buffer_memory[2359296];
	alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
	alt_up_pixel_buffer_dma_swap_buffers(myPixelBuffer);
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(myPixelBuffer)) {
  800690:	d1272017 	ldw	r4,-25472(gp)
  800694:	080f6380 	call	80f638 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  800698:	1021883a 	mov	r16,r2
		alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
  80069c:	d80b883a 	mov	r5,sp
#ifdef MASTER
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
	volatile alt_u8 pixel_buffer_memory[2359296];
	alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
	alt_up_pixel_buffer_dma_swap_buffers(myPixelBuffer);
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(myPixelBuffer)) {
  8006a0:	103ff91e 	bne	r2,zero,800688 <setup+0x3c>
		alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
	}
	*buffaddr = pixel_buffer_memory;
  8006a4:	008c7f44 	movi	r2,12797
  8006a8:	16c00015 	stw	sp,0(r2)
#endif

	barrier(0);
  8006ac:	0009883a 	mov	r4,zero
  8006b0:	08004a00 	call	8004a0 <barrier>
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");

	myPixelBuffer->back_buffer_start_address = (unsigned int) *buffaddr;
#endif

	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
  8006b4:	00800044 	movi	r2,1
  8006b8:	80800035 	stwio	r2,0(r16)
}
  8006bc:	02000934 	movhi	r8,36
  8006c0:	da37883a 	add	sp,sp,r8
  8006c4:	dfc00117 	ldw	ra,4(sp)
  8006c8:	dc000017 	ldw	r16,0(sp)
  8006cc:	dec00204 	addi	sp,sp,8
  8006d0:	f800283a 	ret

008006d4 <drawFrame>:
	*yOut = y;

	return iter;
}

void drawFrame(int zoom) {
  8006d4:	deffe304 	addi	sp,sp,-116
  8006d8:	dfc01c15 	stw	ra,112(sp)
  8006dc:	df001b15 	stw	fp,108(sp)
  8006e0:	ddc01a15 	stw	r23,104(sp)
  8006e4:	dd801915 	stw	r22,100(sp)
  8006e8:	dd401815 	stw	r21,96(sp)
  8006ec:	dd001715 	stw	r20,92(sp)
  8006f0:	dcc01615 	stw	r19,88(sp)
  8006f4:	dc801515 	stw	r18,84(sp)
  8006f8:	dc401415 	stw	r17,80(sp)
  8006fc:	dc001315 	stw	r16,76(sp)
  800700:	d9001115 	stw	r4,68(sp)
	int i;
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
  800704:	0005317a 	rdctl	r2,cpuid
  800708:	d8800d15 	stw	r2,52(sp)
	long oneOverRowSize = 87381;
	long oneOverColSize = 65536;
	long rowOverRowSize = 0;
	long colOverColSize = 0;

	if (zoom == 0) {
  80070c:	2000ed1e 	bne	r4,zero,800ac4 <drawFrame+0x3f0>
  800710:	013b0034 	movhi	r4,60416
  800714:	05420034 	movhi	r21,2048
  800718:	017e0034 	movhi	r5,63488
  80071c:	d9000b15 	stw	r4,44(sp)
  800720:	d9400a15 	stw	r5,40(sp)
  800724:	a809883a 	mov	r4,r21
		minY = targetArrayXY[1] - FloatToFixed(0.75 / powf(1.5, zoom));
		maxY = targetArrayXY[1] + FloatToFixed(0.75 / powf(1.5, zoom));
	}

	//the loop that goes over the rows
	for (i = cpu; i < rowSize; i = i + NUM_CPUS) {
  800728:	d9800d17 	ldw	r6,52(sp)
  80072c:	0480bfc4 	movi	r18,767
  800730:	9180bb16 	blt	r18,r6,800a20 <drawFrame+0x34c>
  800734:	d8800a17 	ldw	r2,40(sp)
  800738:	00ffffc4 	movi	r3,-1
  80073c:	180f883a 	mov	r7,r3
  800740:	2089c83a 	sub	r4,r4,r2
  800744:	2021883a 	mov	r16,r4
  800748:	2023d7fa 	srai	r17,r4,31
  80074c:	d9000b17 	ldw	r4,44(sp)
  800750:	00bffef4 	movhi	r2,65531
  800754:	10aaab04 	addi	r2,r2,-21844
  800758:	880b883a 	mov	r5,r17
  80075c:	a911c83a 	sub	r8,r21,r4
  800760:	da000815 	stw	r8,32(sp)
  800764:	4011d7fa 	srai	r8,r8,31
  800768:	8009883a 	mov	r4,r16
  80076c:	100d883a 	mov	r6,r2
  800770:	da000915 	stw	r8,36(sp)
  800774:	08020b80 	call	8020b8 <__muldi3>
  800778:	d9000d17 	ldw	r4,52(sp)
  80077c:	d8800015 	stw	r2,0(sp)
  800780:	d8c00115 	stw	r3,4(sp)
  800784:	910bc83a 	sub	r5,r18,r4
  800788:	01000074 	movhi	r4,1
  80078c:	21155544 	addi	r4,r4,21845
  800790:	290b383a 	mul	r5,r5,r4
  800794:	8009883a 	mov	r4,r16
  800798:	2813d7fa 	srai	r9,r5,31
  80079c:	2811883a 	mov	r8,r5
  8007a0:	400d883a 	mov	r6,r8
  8007a4:	880b883a 	mov	r5,r17
  8007a8:	480f883a 	mov	r7,r9
  8007ac:	08020b80 	call	8020b8 <__muldi3>
  8007b0:	1009883a 	mov	r4,r2
  8007b4:	d8800817 	ldw	r2,32(sp)
  8007b8:	d9000415 	stw	r4,16(sp)
  8007bc:	d9000d17 	ldw	r4,52(sp)
  8007c0:	1004d43a 	srli	r2,r2,16
  8007c4:	180b883a 	mov	r5,r3
  8007c8:	d9400515 	stw	r5,20(sp)
  8007cc:	01400044 	movi	r5,1
  8007d0:	d8801215 	stw	r2,72(sp)
  8007d4:	d9000f15 	stw	r4,60(sp)
  8007d8:	d9400c15 	stw	r5,48(sp)

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  8007dc:	d9800517 	ldw	r6,20(sp)
  8007e0:	d9400417 	ldw	r5,16(sp)
  8007e4:	d8000e15 	stw	zero,56(sp)
  8007e8:	300891ba 	slli	r4,r6,6
  8007ec:	d9800917 	ldw	r6,36(sp)
  8007f0:	2804d6ba 	srli	r2,r5,26
  8007f4:	000b883a 	mov	r5,zero
  8007f8:	300c943a 	slli	r6,r6,16
  8007fc:	2084b03a 	or	r2,r4,r2
  800800:	d9400215 	stw	r5,8(sp)
  800804:	d9800715 	stw	r6,28(sp)
  800808:	d9800817 	ldw	r6,32(sp)
  80080c:	d9400717 	ldw	r5,28(sp)
  800810:	d9001217 	ldw	r4,72(sp)
  800814:	300c943a 	slli	r6,r6,16
  800818:	d8801015 	stw	r2,64(sp)
  80081c:	214ab03a 	or	r5,r4,r5
  800820:	0005883a 	mov	r2,zero
  800824:	d9400715 	stw	r5,28(sp)
  800828:	d9800615 	stw	r6,24(sp)
  80082c:	d8800315 	stw	r2,12(sp)
  800830:	d8c00317 	ldw	r3,12(sp)
  800834:	d9400217 	ldw	r5,8(sp)
  800838:	0021883a 	mov	r16,zero
  80083c:	180891ba 	slli	r4,r3,6
  800840:	2804d6ba 	srli	r2,r5,26
  800844:	0025883a 	mov	r18,zero
  800848:	002f883a 	mov	r23,zero
  80084c:	2084b03a 	or	r2,r4,r2
  800850:	0015883a 	mov	r10,zero
  800854:	1039883a 	mov	fp,r2
  800858:	0023883a 	mov	r17,zero
  80085c:	0029883a 	mov	r20,zero
  800860:	0027883a 	mov	r19,zero
  800864:	00000206 	br	800870 <drawFrame+0x19c>
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  800868:	00801904 	movi	r2,100
  80086c:	b8803226 	beq	r23,r2,800938 <drawFrame+0x264>
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  800870:	9008d17a 	srli	r4,r18,5
  800874:	980696fa 	slli	r3,r19,27
  800878:	900496fa 	slli	r2,r18,27

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  80087c:	a295c83a 	sub	r10,r20,r10
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  800880:	20c6b03a 	or	r3,r4,r3
  800884:	181691ba 	slli	r11,r3,6
  800888:	1010d6ba 	srli	r8,r2,26

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  80088c:	d9000b17 	ldw	r4,44(sp)
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  800890:	880b883a 	mov	r5,r17
  800894:	5a10b03a 	or	r8,r11,r8
  800898:	4005d7fa 	srai	r2,r8,31

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  80089c:	2295883a 	add	r10,r4,r10
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  8008a0:	400d883a 	mov	r6,r8
  8008a4:	8009883a 	mov	r4,r16
  8008a8:	100f883a 	mov	r7,r2

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  8008ac:	e2ad883a 	add	r22,fp,r10
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  8008b0:	08020b80 	call	8020b8 <__muldi3>
  8008b4:	180c91ba 	slli	r6,r3,6
  8008b8:	1004d6ba 	srli	r2,r2,26
	return (long long) a * (long long) b;
}

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  8008bc:	b027d7fa 	srai	r19,r22,31
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  8008c0:	d8c01017 	ldw	r3,64(sp)
  8008c4:	3084b03a 	or	r2,r6,r2
  8008c8:	d9800a17 	ldw	r6,40(sp)

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  8008cc:	b009883a 	mov	r4,r22
  8008d0:	980b883a 	mov	r5,r19
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  8008d4:	3085883a 	add	r2,r6,r2

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  8008d8:	980f883a 	mov	r7,r19
  8008dc:	b00d883a 	mov	r6,r22
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  8008e0:	18ab883a 	add	r21,r3,r2

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  8008e4:	08020b80 	call	8020b8 <__muldi3>
  8008e8:	180c91ba 	slli	r6,r3,6
	return (long long) a * (long long) b;
}

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  8008ec:	a823d7fa 	srai	r17,r21,31

	return c >> 26;
  8008f0:	1004d6ba 	srli	r2,r2,26
  8008f4:	a809883a 	mov	r4,r21
  8008f8:	880b883a 	mov	r5,r17
  8008fc:	3084b03a 	or	r2,r6,r2
  800900:	880f883a 	mov	r7,r17
  800904:	a80d883a 	mov	r6,r21
  800908:	1029883a 	mov	r20,r2
  80090c:	08020b80 	call	8020b8 <__muldi3>
  800910:	180c91ba 	slli	r6,r3,6
  800914:	1004d6ba 	srli	r2,r2,26
		 if (cpu == 3) {
		 endTimeAndPrint();
		 }//*/

		x = xtemp;
		iter++;
  800918:	bdc00044 	addi	r23,r23,1
	return (long long) a * (long long) b;
}

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  80091c:	b025883a 	mov	r18,r22

	return c >> 26;
  800920:	3084b03a 	or	r2,r6,r2
  800924:	1015883a 	mov	r10,r2
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  800928:	a089883a 	add	r4,r20,r2
  80092c:	00840034 	movhi	r2,4096
	return (long long) a * (long long) b;
}

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  800930:	a821883a 	mov	r16,r21
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  800934:	113fcc0e 	bge	r2,r4,800868 <drawFrame+0x194>

			//getting the number of iterations it takes a location to go out of the set
			result = mandelbrot(x0, y0, &x, &y);

			//recalculates the x and y
			if (zoom > 6) {
  800938:	d9001117 	ldw	r4,68(sp)
  80093c:	00800184 	movi	r2,6
  800940:	1100030e 	bge	r2,r4,800950 <drawFrame+0x27c>
				if (cpu == 3) {
  800944:	d9400d17 	ldw	r5,52(sp)
  800948:	008000c4 	movi	r2,3
  80094c:	28804226 	beq	r5,r2,800a58 <drawFrame+0x384>
}

//makes the color for display
int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  800950:	00801904 	movi	r2,100
  800954:	b8803e26 	beq	r23,r2,800a50 <drawFrame+0x37c>
		color = grey;
	}
	else {
		int red = iter;
		int green = iter * 6;
  800958:	00c007c4 	movi	r3,31
  80095c:	b809883a 	mov	r4,r23
  800960:	b88001a4 	muli	r2,r23,6
  800964:	1dc0010e 	bge	r3,r23,80096c <drawFrame+0x298>
  800968:	1809883a 	mov	r4,r3
  80096c:	1007883a 	mov	r3,r2
  800970:	00800fc4 	movi	r2,63
  800974:	10c0010e 	bge	r2,r3,80097c <drawFrame+0x2a8>
  800978:	1007883a 	mov	r3,r2
  80097c:	200492fa 	slli	r2,r4,11
  800980:	1806917a 	slli	r3,r3,5
  800984:	21003fcc 	andi	r4,r4,255
  800988:	10be000c 	andi	r2,r2,63488
  80098c:	1104b03a 	or	r2,r2,r4
  800990:	18c1f80c 	andi	r3,r3,2016
  800994:	188ab03a 	or	r5,r3,r2
					}
				}
			}

			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, j, i);
  800998:	d1272017 	ldw	r4,-25472(gp)
  80099c:	d9800e17 	ldw	r6,56(sp)
  8009a0:	d9c00f17 	ldw	r7,60(sp)
  8009a4:	080f3e80 	call	80f3e8 <alt_up_pixel_buffer_dma_draw>
		//calculating the y0
		rowOverRowSize = fixedPointMultiply32(((rowSize - 1) - i), oneOverRowSize);
		y0 = fixedPointMultiply64(rowOverRowSize, (maxY - minY)) + minY;

		//the loop that goes over the columns
		for (j = 0; j < colSize; j++) {
  8009a8:	d9400217 	ldw	r5,8(sp)
  8009ac:	d9800617 	ldw	r6,24(sp)
  8009b0:	d8800717 	ldw	r2,28(sp)
  8009b4:	2987883a 	add	r3,r5,r6
  8009b8:	d9800317 	ldw	r6,12(sp)
  8009bc:	194b803a 	cmpltu	r5,r3,r5
  8009c0:	d8c00215 	stw	r3,8(sp)
  8009c4:	3089883a 	add	r4,r6,r2
  8009c8:	d9800e17 	ldw	r6,56(sp)
  8009cc:	290b883a 	add	r5,r5,r4
  8009d0:	00810004 	movi	r2,1024
  8009d4:	31800044 	addi	r6,r6,1
  8009d8:	d9800e15 	stw	r6,56(sp)
  8009dc:	d9400315 	stw	r5,12(sp)
  8009e0:	30bf931e 	bne	r6,r2,800830 <drawFrame+0x15c>
		minY = targetArrayXY[1] - FloatToFixed(0.75 / powf(1.5, zoom));
		maxY = targetArrayXY[1] + FloatToFixed(0.75 / powf(1.5, zoom));
	}

	//the loop that goes over the rows
	for (i = cpu; i < rowSize; i = i + NUM_CPUS) {
  8009e4:	d9000417 	ldw	r4,16(sp)
  8009e8:	d9400017 	ldw	r5,0(sp)
  8009ec:	d9800117 	ldw	r6,4(sp)
  8009f0:	2145883a 	add	r2,r4,r5
  8009f4:	d9400517 	ldw	r5,20(sp)
  8009f8:	1109803a 	cmpltu	r4,r2,r4
  8009fc:	d8800415 	stw	r2,16(sp)
  800a00:	2987883a 	add	r3,r5,r6
  800a04:	d9400f17 	ldw	r5,60(sp)
  800a08:	20c9883a 	add	r4,r4,r3
  800a0c:	0080bfc4 	movi	r2,767
  800a10:	29400104 	addi	r5,r5,4
  800a14:	d9400f15 	stw	r5,60(sp)
  800a18:	d9000515 	stw	r4,20(sp)
  800a1c:	117f6f0e 	bge	r2,r5,8007dc <drawFrame+0x108>
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, j, i);
		}
	}

}
  800a20:	dfc01c17 	ldw	ra,112(sp)
  800a24:	df001b17 	ldw	fp,108(sp)
  800a28:	ddc01a17 	ldw	r23,104(sp)
  800a2c:	dd801917 	ldw	r22,100(sp)
  800a30:	dd401817 	ldw	r21,96(sp)
  800a34:	dd001717 	ldw	r20,92(sp)
  800a38:	dcc01617 	ldw	r19,88(sp)
  800a3c:	dc801517 	ldw	r18,84(sp)
  800a40:	dc401417 	ldw	r17,80(sp)
  800a44:	dc001317 	ldw	r16,76(sp)
  800a48:	dec01d04 	addi	sp,sp,116
  800a4c:	f800283a 	ret
}

//makes the color for display
int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  800a50:	015efbc4 	movi	r5,31727
  800a54:	003fd006 	br	800998 <drawFrame+0x2c4>
			result = mandelbrot(x0, y0, &x, &y);

			//recalculates the x and y
			if (zoom > 6) {
				if (cpu == 3) {
					printf("iter: %d\n", result);
  800a58:	01002074 	movhi	r4,129
  800a5c:	2107a004 	addi	r4,r4,7808
  800a60:	b80b883a 	mov	r5,r23
  800a64:	0803bec0 	call	803bec <printf>
					if (recalculateTargetFlag) {
  800a68:	d9800c17 	ldw	r6,48(sp)
  800a6c:	303fb826 	beq	r6,zero,800950 <drawFrame+0x27c>
						if (result > (maxIter - 5) && (result < maxIter)) {
  800a70:	d8c00d17 	ldw	r3,52(sp)
  800a74:	b8bfe804 	addi	r2,r23,-96
  800a78:	18bfb536 	bltu	r3,r2,800950 <drawFrame+0x27c>
							if (result < maxIter) {
  800a7c:	008018c4 	movi	r2,99
  800a80:	15ffb316 	blt	r2,r23,800950 <drawFrame+0x27c>
								targetArrayXYMaster[0] = x;
								targetArrayXYMaster[1] = y;
								recalculateTargetFlag = recalculateTargetFlag - 1;
								printf("zoom level: %d \n", zoom);
  800a84:	d9401117 	ldw	r5,68(sp)
					printf("iter: %d\n", result);
					if (recalculateTargetFlag) {
						if (result > (maxIter - 5) && (result < maxIter)) {
							if (result < maxIter) {
								targetArrayXYMaster[0] = x;
								targetArrayXYMaster[1] = y;
  800a88:	d0a00004 	addi	r2,gp,-32768
								recalculateTargetFlag = recalculateTargetFlag - 1;
								printf("zoom level: %d \n", zoom);
  800a8c:	01002074 	movhi	r4,129
  800a90:	2107a304 	addi	r4,r4,7820
					printf("iter: %d\n", result);
					if (recalculateTargetFlag) {
						if (result > (maxIter - 5) && (result < maxIter)) {
							if (result < maxIter) {
								targetArrayXYMaster[0] = x;
								targetArrayXYMaster[1] = y;
  800a94:	15400115 	stw	r21,4(r2)
				if (cpu == 3) {
					printf("iter: %d\n", result);
					if (recalculateTargetFlag) {
						if (result > (maxIter - 5) && (result < maxIter)) {
							if (result < maxIter) {
								targetArrayXYMaster[0] = x;
  800a98:	d5a00015 	stw	r22,-32768(gp)
								targetArrayXYMaster[1] = y;
								recalculateTargetFlag = recalculateTargetFlag - 1;
								printf("zoom level: %d \n", zoom);
  800a9c:	0803bec0 	call	803bec <printf>
					if (recalculateTargetFlag) {
						if (result > (maxIter - 5) && (result < maxIter)) {
							if (result < maxIter) {
								targetArrayXYMaster[0] = x;
								targetArrayXYMaster[1] = y;
								recalculateTargetFlag = recalculateTargetFlag - 1;
  800aa0:	d8800c17 	ldw	r2,48(sp)
								printf("zoom level: %d \n", zoom);
								printf("X, Y: %d, %d\n", x, y);
  800aa4:	a80d883a 	mov	r6,r21
  800aa8:	b00b883a 	mov	r5,r22
  800aac:	01002074 	movhi	r4,129
  800ab0:	2107a804 	addi	r4,r4,7840
					if (recalculateTargetFlag) {
						if (result > (maxIter - 5) && (result < maxIter)) {
							if (result < maxIter) {
								targetArrayXYMaster[0] = x;
								targetArrayXYMaster[1] = y;
								recalculateTargetFlag = recalculateTargetFlag - 1;
  800ab4:	10bfffc4 	addi	r2,r2,-1
  800ab8:	d8800c15 	stw	r2,48(sp)
								printf("zoom level: %d \n", zoom);
								printf("X, Y: %d, %d\n", x, y);
  800abc:	0803bec0 	call	803bec <printf>
  800ac0:	003fa506 	br	800958 <drawFrame+0x284>
		minY = FloatToFixed(-1.0);
		maxY = FloatToFixed(1.0);
	}

	else {
		minX = targetArrayXY[0] - FloatToFixed(1.0 / powf(1.5, zoom));
  800ac4:	d0a00217 	ldw	r2,-32760(gp)
  800ac8:	040ff034 	movhi	r16,16320
  800acc:	050fe034 	movhi	r20,16256
  800ad0:	14c00017 	ldw	r19,0(r2)
  800ad4:	080293c0 	call	80293c <__floatsisf>
  800ad8:	100b883a 	mov	r5,r2
  800adc:	8009883a 	mov	r4,r16
  800ae0:	1023883a 	mov	r17,r2
  800ae4:	0800c180 	call	800c18 <powf>
  800ae8:	100b883a 	mov	r5,r2
  800aec:	a009883a 	mov	r4,r20
  800af0:	08025e80 	call	8025e8 <__divsf3>
  800af4:	04934034 	movhi	r18,19712
  800af8:	1489ff32 	custom	252,r4,r2,r18
  800afc:	08029d40 	call	8029d4 <__fixsfsi>
  800b00:	98a7c83a 	sub	r19,r19,r2
		maxX = targetArrayXY[0] + FloatToFixed(1.0 / powf(1.5, zoom));
  800b04:	d0a00217 	ldw	r2,-32760(gp)
  800b08:	8009883a 	mov	r4,r16
  800b0c:	880b883a 	mov	r5,r17
		minY = FloatToFixed(-1.0);
		maxY = FloatToFixed(1.0);
	}

	else {
		minX = targetArrayXY[0] - FloatToFixed(1.0 / powf(1.5, zoom));
  800b10:	dcc00b15 	stw	r19,44(sp)
		maxX = targetArrayXY[0] + FloatToFixed(1.0 / powf(1.5, zoom));
  800b14:	14c00017 	ldw	r19,0(r2)
  800b18:	0800c180 	call	800c18 <powf>
  800b1c:	100b883a 	mov	r5,r2
  800b20:	a009883a 	mov	r4,r20
  800b24:	08025e80 	call	8025e8 <__divsf3>
  800b28:	1489ff32 	custom	252,r4,r2,r18
  800b2c:	08029d40 	call	8029d4 <__fixsfsi>
  800b30:	98ab883a 	add	r21,r19,r2
		minY = targetArrayXY[1] - FloatToFixed(0.75 / powf(1.5, zoom));
  800b34:	d0a00217 	ldw	r2,-32760(gp)
  800b38:	8009883a 	mov	r4,r16
  800b3c:	880b883a 	mov	r5,r17
  800b40:	14c00117 	ldw	r19,4(r2)
  800b44:	050fd034 	movhi	r20,16192
  800b48:	0800c180 	call	800c18 <powf>
  800b4c:	100b883a 	mov	r5,r2
  800b50:	a009883a 	mov	r4,r20
  800b54:	08025e80 	call	8025e8 <__divsf3>
  800b58:	1489ff32 	custom	252,r4,r2,r18
  800b5c:	08029d40 	call	8029d4 <__fixsfsi>
  800b60:	98a7c83a 	sub	r19,r19,r2
		maxY = targetArrayXY[1] + FloatToFixed(0.75 / powf(1.5, zoom));
  800b64:	d0a00217 	ldw	r2,-32760(gp)
  800b68:	8009883a 	mov	r4,r16
  800b6c:	880b883a 	mov	r5,r17
  800b70:	14000117 	ldw	r16,4(r2)
	}

	else {
		minX = targetArrayXY[0] - FloatToFixed(1.0 / powf(1.5, zoom));
		maxX = targetArrayXY[0] + FloatToFixed(1.0 / powf(1.5, zoom));
		minY = targetArrayXY[1] - FloatToFixed(0.75 / powf(1.5, zoom));
  800b74:	dcc00a15 	stw	r19,40(sp)
		maxY = targetArrayXY[1] + FloatToFixed(0.75 / powf(1.5, zoom));
  800b78:	0800c180 	call	800c18 <powf>
  800b7c:	100b883a 	mov	r5,r2
  800b80:	a009883a 	mov	r4,r20
  800b84:	08025e80 	call	8025e8 <__divsf3>
  800b88:	1489ff32 	custom	252,r4,r2,r18
  800b8c:	08029d40 	call	8029d4 <__fixsfsi>
  800b90:	8089883a 	add	r4,r16,r2
  800b94:	003ee406 	br	800728 <drawFrame+0x54>

00800b98 <main>:
#define key1 6
#define key0 7

#define FIXED_POINT

int main() {
  800b98:	defffd04 	addi	sp,sp,-12

	barrier(0);
  800b9c:	0009883a 	mov	r4,zero
#define key1 6
#define key0 7

#define FIXED_POINT

int main() {
  800ba0:	dfc00215 	stw	ra,8(sp)
  800ba4:	dc400115 	stw	r17,4(sp)
  800ba8:	dc000015 	stw	r16,0(sp)

	barrier(0);
  800bac:	08004a00 	call	8004a0 <barrier>
	setup();
  800bb0:	080064c0 	call	80064c <setup>

	printf("Program running (UART)...\n");
  800bb4:	01002074 	movhi	r4,129
  800bb8:	2107ac04 	addi	r4,r4,7856
  800bbc:	0803d040 	call	803d04 <puts>

	//how to reset the interrupt vector
	//the following will show you the number to put in SOPC video DMA controller
	//reset address: 0090FFE4
	//default buffer start address: 0x01880000
	printf("ADDRESS: %08X \n", myPixelBuffer->back_buffer_start_address);
  800bc0:	d0a72017 	ldw	r2,-25472(gp)
  800bc4:	01002074 	movhi	r4,129
  800bc8:	2107b304 	addi	r4,r4,7884
  800bcc:	11400c17 	ldw	r5,48(r2)
  800bd0:	0803bec0 	call	803bec <printf>
	int cpu = __builtin_rdctl(5);
  800bd4:	000b317a 	rdctl	r5,cpuid
	printf("cpu %d \n", cpu);
  800bd8:	01002074 	movhi	r4,129
  800bdc:	2107b704 	addi	r4,r4,7900
  800be0:	0803bec0 	call	803bec <printf>
  800be4:	04401944 	movi	r17,101

	//unsigned long long cycles = 0;
	//the main program loop
	while (1) {

		printf("entering the main loop \n");
  800be8:	01002074 	movhi	r4,129
  800bec:	2107ba04 	addi	r4,r4,7912
  800bf0:	0803d040 	call	803d04 <puts>
  800bf4:	0021883a 	mov	r16,zero

		int zoom;
		for (zoom = 0; zoom <= 100; zoom++) {

			//startTimer();
			clearScreen();
  800bf8:	08004940 	call	800494 <clearScreen>

			drawFrame(zoom);
  800bfc:	8009883a 	mov	r4,r16
  800c00:	08006d40 	call	8006d4 <drawFrame>
	while (1) {

		printf("entering the main loop \n");

		int zoom;
		for (zoom = 0; zoom <= 100; zoom++) {
  800c04:	84000044 	addi	r16,r16,1
			clearScreen();

			drawFrame(zoom);

			//printf("before barrier %d \n", zoom);
			barrier(0);
  800c08:	0009883a 	mov	r4,zero
  800c0c:	08004a00 	call	8004a0 <barrier>
	while (1) {

		printf("entering the main loop \n");

		int zoom;
		for (zoom = 0; zoom <= 100; zoom++) {
  800c10:	847ff91e 	bne	r16,r17,800bf8 <main+0x60>
  800c14:	003ff406 	br	800be8 <main+0x50>

00800c18 <powf>:
  800c18:	defff104 	addi	sp,sp,-60
  800c1c:	dd000d15 	stw	r20,52(sp)
  800c20:	dcc00c15 	stw	r19,48(sp)
  800c24:	dc800b15 	stw	r18,44(sp)
  800c28:	dc400a15 	stw	r17,40(sp)
  800c2c:	dc000915 	stw	r16,36(sp)
  800c30:	dfc00e15 	stw	ra,56(sp)
  800c34:	05002074 	movhi	r20,129
  800c38:	a50fd104 	addi	r20,r20,16196
  800c3c:	2027883a 	mov	r19,r4
  800c40:	2825883a 	mov	r18,r5
  800c44:	08010700 	call	801070 <__ieee754_powf>
  800c48:	1021883a 	mov	r16,r2
  800c4c:	a0800017 	ldw	r2,0(r20)
  800c50:	047fffc4 	movi	r17,-1
  800c54:	14400326 	beq	r2,r17,800c64 <powf+0x4c>
  800c58:	9009883a 	mov	r4,r18
  800c5c:	0801f340 	call	801f34 <isnanf>
  800c60:	10000926 	beq	r2,zero,800c88 <powf+0x70>
  800c64:	8005883a 	mov	r2,r16
  800c68:	dfc00e17 	ldw	ra,56(sp)
  800c6c:	dd000d17 	ldw	r20,52(sp)
  800c70:	dcc00c17 	ldw	r19,48(sp)
  800c74:	dc800b17 	ldw	r18,44(sp)
  800c78:	dc400a17 	ldw	r17,40(sp)
  800c7c:	dc000917 	ldw	r16,36(sp)
  800c80:	dec00f04 	addi	sp,sp,60
  800c84:	f800283a 	ret
  800c88:	9809883a 	mov	r4,r19
  800c8c:	0801f340 	call	801f34 <isnanf>
  800c90:	1000151e 	bne	r2,zero,800ce8 <powf+0xd0>
  800c94:	9809883a 	mov	r4,r19
  800c98:	000b883a 	mov	r5,zero
  800c9c:	080275c0 	call	80275c <__eqsf2>
  800ca0:	10005a1e 	bne	r2,zero,800e0c <powf+0x1f4>
  800ca4:	9009883a 	mov	r4,r18
  800ca8:	000b883a 	mov	r5,zero
  800cac:	080275c0 	call	80275c <__eqsf2>
  800cb0:	1000331e 	bne	r2,zero,800d80 <powf+0x168>
  800cb4:	a0800017 	ldw	r2,0(r20)
  800cb8:	d8000615 	stw	zero,24(sp)
  800cbc:	d8000715 	stw	zero,28(sp)
  800cc0:	10001426 	beq	r2,zero,800d14 <powf+0xfc>
  800cc4:	008ffc34 	movhi	r2,16368
  800cc8:	d8800715 	stw	r2,28(sp)
  800ccc:	d8800617 	ldw	r2,24(sp)
  800cd0:	d8c00717 	ldw	r3,28(sp)
  800cd4:	1009883a 	mov	r4,r2
  800cd8:	180b883a 	mov	r5,r3
  800cdc:	08032d80 	call	8032d8 <__truncdfsf2>
  800ce0:	1021883a 	mov	r16,r2
  800ce4:	003fdf06 	br	800c64 <powf+0x4c>
  800ce8:	9009883a 	mov	r4,r18
  800cec:	000b883a 	mov	r5,zero
  800cf0:	080275c0 	call	80275c <__eqsf2>
  800cf4:	103fdb1e 	bne	r2,zero,800c64 <powf+0x4c>
  800cf8:	a0c00017 	ldw	r3,0(r20)
  800cfc:	010ffc34 	movhi	r4,16368
  800d00:	d8000615 	stw	zero,24(sp)
  800d04:	d9000715 	stw	r4,28(sp)
  800d08:	1c401a26 	beq	r3,r17,800d74 <powf+0x15c>
  800d0c:	00800084 	movi	r2,2
  800d10:	18801826 	beq	r3,r2,800d74 <powf+0x15c>
  800d14:	9009883a 	mov	r4,r18
  800d18:	0802a680 	call	802a68 <__extendsfdf2>
  800d1c:	9809883a 	mov	r4,r19
  800d20:	d8c00515 	stw	r3,20(sp)
  800d24:	d8800415 	stw	r2,16(sp)
  800d28:	0802a680 	call	802a68 <__extendsfdf2>
  800d2c:	100b883a 	mov	r5,r2
  800d30:	d8c00315 	stw	r3,12(sp)
  800d34:	00802074 	movhi	r2,129
  800d38:	1087c004 	addi	r2,r2,7936
  800d3c:	00c00044 	movi	r3,1
  800d40:	d809883a 	mov	r4,sp
  800d44:	d8800115 	stw	r2,4(sp)
  800d48:	d8c00015 	stw	r3,0(sp)
  800d4c:	d9400215 	stw	r5,8(sp)
  800d50:	d8000815 	stw	zero,32(sp)
  800d54:	0801cf00 	call	801cf0 <matherr>
  800d58:	10002826 	beq	r2,zero,800dfc <powf+0x1e4>
  800d5c:	d8800817 	ldw	r2,32(sp)
  800d60:	103fda26 	beq	r2,zero,800ccc <powf+0xb4>
  800d64:	0803bdc0 	call	803bdc <__errno>
  800d68:	d8c00817 	ldw	r3,32(sp)
  800d6c:	10c00015 	stw	r3,0(r2)
  800d70:	003fd606 	br	800ccc <powf+0xb4>
  800d74:	d9000715 	stw	r4,28(sp)
  800d78:	d8000615 	stw	zero,24(sp)
  800d7c:	003fd306 	br	800ccc <powf+0xb4>
  800d80:	9009883a 	mov	r4,r18
  800d84:	0801f180 	call	801f18 <finitef>
  800d88:	103fb626 	beq	r2,zero,800c64 <powf+0x4c>
  800d8c:	9009883a 	mov	r4,r18
  800d90:	000b883a 	mov	r5,zero
  800d94:	080284c0 	call	80284c <__ltsf2>
  800d98:	103fb20e 	bge	r2,zero,800c64 <powf+0x4c>
  800d9c:	9809883a 	mov	r4,r19
  800da0:	00800044 	movi	r2,1
  800da4:	00c02074 	movhi	r3,129
  800da8:	18c7c004 	addi	r3,r3,7936
  800dac:	d8800015 	stw	r2,0(sp)
  800db0:	d8c00115 	stw	r3,4(sp)
  800db4:	d8000815 	stw	zero,32(sp)
  800db8:	0802a680 	call	802a68 <__extendsfdf2>
  800dbc:	9009883a 	mov	r4,r18
  800dc0:	d8c00315 	stw	r3,12(sp)
  800dc4:	d8800215 	stw	r2,8(sp)
  800dc8:	0802a680 	call	802a68 <__extendsfdf2>
  800dcc:	a1800017 	ldw	r6,0(r20)
  800dd0:	d8c00515 	stw	r3,20(sp)
  800dd4:	d8800415 	stw	r2,16(sp)
  800dd8:	30005626 	beq	r6,zero,800f34 <powf+0x31c>
  800ddc:	00bffc34 	movhi	r2,65520
  800de0:	d8800715 	stw	r2,28(sp)
  800de4:	00800084 	movi	r2,2
  800de8:	d8000615 	stw	zero,24(sp)
  800dec:	30800326 	beq	r6,r2,800dfc <powf+0x1e4>
  800df0:	d809883a 	mov	r4,sp
  800df4:	0801cf00 	call	801cf0 <matherr>
  800df8:	103fd81e 	bne	r2,zero,800d5c <powf+0x144>
  800dfc:	0803bdc0 	call	803bdc <__errno>
  800e00:	00c00844 	movi	r3,33
  800e04:	10c00015 	stw	r3,0(r2)
  800e08:	003fd406 	br	800d5c <powf+0x144>
  800e0c:	8009883a 	mov	r4,r16
  800e10:	0801f180 	call	801f18 <finitef>
  800e14:	10002426 	beq	r2,zero,800ea8 <powf+0x290>
  800e18:	8009883a 	mov	r4,r16
  800e1c:	000b883a 	mov	r5,zero
  800e20:	080275c0 	call	80275c <__eqsf2>
  800e24:	103f8f1e 	bne	r2,zero,800c64 <powf+0x4c>
  800e28:	9809883a 	mov	r4,r19
  800e2c:	0801f180 	call	801f18 <finitef>
  800e30:	103f8c26 	beq	r2,zero,800c64 <powf+0x4c>
  800e34:	9009883a 	mov	r4,r18
  800e38:	0801f180 	call	801f18 <finitef>
  800e3c:	103f8926 	beq	r2,zero,800c64 <powf+0x4c>
  800e40:	9809883a 	mov	r4,r19
  800e44:	00800104 	movi	r2,4
  800e48:	00c02074 	movhi	r3,129
  800e4c:	18c7c004 	addi	r3,r3,7936
  800e50:	d8800015 	stw	r2,0(sp)
  800e54:	d8c00115 	stw	r3,4(sp)
  800e58:	d8000815 	stw	zero,32(sp)
  800e5c:	0802a680 	call	802a68 <__extendsfdf2>
  800e60:	9009883a 	mov	r4,r18
  800e64:	d8c00315 	stw	r3,12(sp)
  800e68:	d8800215 	stw	r2,8(sp)
  800e6c:	0802a680 	call	802a68 <__extendsfdf2>
  800e70:	a1800017 	ldw	r6,0(r20)
  800e74:	d8800415 	stw	r2,16(sp)
  800e78:	00800084 	movi	r2,2
  800e7c:	d8c00515 	stw	r3,20(sp)
  800e80:	d8000615 	stw	zero,24(sp)
  800e84:	d8000715 	stw	zero,28(sp)
  800e88:	30800326 	beq	r6,r2,800e98 <powf+0x280>
  800e8c:	d809883a 	mov	r4,sp
  800e90:	0801cf00 	call	801cf0 <matherr>
  800e94:	103fb11e 	bne	r2,zero,800d5c <powf+0x144>
  800e98:	0803bdc0 	call	803bdc <__errno>
  800e9c:	00c00884 	movi	r3,34
  800ea0:	10c00015 	stw	r3,0(r2)
  800ea4:	003fad06 	br	800d5c <powf+0x144>
  800ea8:	9809883a 	mov	r4,r19
  800eac:	0801f180 	call	801f18 <finitef>
  800eb0:	103fd926 	beq	r2,zero,800e18 <powf+0x200>
  800eb4:	9009883a 	mov	r4,r18
  800eb8:	0801f180 	call	801f18 <finitef>
  800ebc:	103fd626 	beq	r2,zero,800e18 <powf+0x200>
  800ec0:	8009883a 	mov	r4,r16
  800ec4:	0801f340 	call	801f34 <isnanf>
  800ec8:	10001d26 	beq	r2,zero,800f40 <powf+0x328>
  800ecc:	9809883a 	mov	r4,r19
  800ed0:	00800044 	movi	r2,1
  800ed4:	00c02074 	movhi	r3,129
  800ed8:	18c7c004 	addi	r3,r3,7936
  800edc:	d8800015 	stw	r2,0(sp)
  800ee0:	d8c00115 	stw	r3,4(sp)
  800ee4:	d8000815 	stw	zero,32(sp)
  800ee8:	0802a680 	call	802a68 <__extendsfdf2>
  800eec:	9009883a 	mov	r4,r18
  800ef0:	d8c00315 	stw	r3,12(sp)
  800ef4:	d8800215 	stw	r2,8(sp)
  800ef8:	0802a680 	call	802a68 <__extendsfdf2>
  800efc:	a4000017 	ldw	r16,0(r20)
  800f00:	d8c00515 	stw	r3,20(sp)
  800f04:	d8800415 	stw	r2,16(sp)
  800f08:	80000a26 	beq	r16,zero,800f34 <powf+0x31c>
  800f0c:	0009883a 	mov	r4,zero
  800f10:	000d883a 	mov	r6,zero
  800f14:	000b883a 	mov	r5,zero
  800f18:	000f883a 	mov	r7,zero
  800f1c:	0802fc00 	call	802fc0 <__divdf3>
  800f20:	d8800615 	stw	r2,24(sp)
  800f24:	00800084 	movi	r2,2
  800f28:	d8c00715 	stw	r3,28(sp)
  800f2c:	80bfb01e 	bne	r16,r2,800df0 <powf+0x1d8>
  800f30:	003fb206 	br	800dfc <powf+0x1e4>
  800f34:	d8000615 	stw	zero,24(sp)
  800f38:	d8000715 	stw	zero,28(sp)
  800f3c:	003fac06 	br	800df0 <powf+0x1d8>
  800f40:	9809883a 	mov	r4,r19
  800f44:	008000c4 	movi	r2,3
  800f48:	00c02074 	movhi	r3,129
  800f4c:	18c7c004 	addi	r3,r3,7936
  800f50:	d8800015 	stw	r2,0(sp)
  800f54:	d8c00115 	stw	r3,4(sp)
  800f58:	d8000815 	stw	zero,32(sp)
  800f5c:	0802a680 	call	802a68 <__extendsfdf2>
  800f60:	9009883a 	mov	r4,r18
  800f64:	d8c00315 	stw	r3,12(sp)
  800f68:	d8800215 	stw	r2,8(sp)
  800f6c:	0802a680 	call	802a68 <__extendsfdf2>
  800f70:	a1800017 	ldw	r6,0(r20)
  800f74:	d8c00515 	stw	r3,20(sp)
  800f78:	d8800415 	stw	r2,16(sp)
  800f7c:	3000211e 	bne	r6,zero,801004 <powf+0x3ec>
  800f80:	9809883a 	mov	r4,r19
  800f84:	0091fc34 	movhi	r2,18416
  800f88:	10bfffc4 	addi	r2,r2,-1
  800f8c:	04f80034 	movhi	r19,57344
  800f90:	000b883a 	mov	r5,zero
  800f94:	d8800715 	stw	r2,28(sp)
  800f98:	dcc00615 	stw	r19,24(sp)
  800f9c:	080284c0 	call	80284c <__ltsf2>
  800fa0:	103fba0e 	bge	r2,zero,800e8c <powf+0x274>
  800fa4:	014fc034 	movhi	r5,16128
  800fa8:	9009883a 	mov	r4,r18
  800fac:	08024080 	call	802408 <__mulsf3>
  800fb0:	1009883a 	mov	r4,r2
  800fb4:	0802a680 	call	802a68 <__extendsfdf2>
  800fb8:	1009883a 	mov	r4,r2
  800fbc:	180b883a 	mov	r5,r3
  800fc0:	1021883a 	mov	r16,r2
  800fc4:	1823883a 	mov	r17,r3
  800fc8:	0801cf80 	call	801cf8 <rint>
  800fcc:	180f883a 	mov	r7,r3
  800fd0:	880b883a 	mov	r5,r17
  800fd4:	8009883a 	mov	r4,r16
  800fd8:	100d883a 	mov	r6,r2
  800fdc:	08032180 	call	803218 <__nedf2>
  800fe0:	10000426 	beq	r2,zero,800ff4 <powf+0x3dc>
  800fe4:	00b1fc34 	movhi	r2,51184
  800fe8:	10bfffc4 	addi	r2,r2,-1
  800fec:	dcc00615 	stw	r19,24(sp)
  800ff0:	d8800715 	stw	r2,28(sp)
  800ff4:	a0c00017 	ldw	r3,0(r20)
  800ff8:	00800084 	movi	r2,2
  800ffc:	18bfa31e 	bne	r3,r2,800e8c <powf+0x274>
  801000:	003fa506 	br	800e98 <powf+0x280>
  801004:	009ffc34 	movhi	r2,32752
  801008:	9809883a 	mov	r4,r19
  80100c:	000b883a 	mov	r5,zero
  801010:	d8800715 	stw	r2,28(sp)
  801014:	d8000615 	stw	zero,24(sp)
  801018:	080284c0 	call	80284c <__ltsf2>
  80101c:	103ff50e 	bge	r2,zero,800ff4 <powf+0x3dc>
  801020:	014fc034 	movhi	r5,16128
  801024:	9009883a 	mov	r4,r18
  801028:	08024080 	call	802408 <__mulsf3>
  80102c:	1009883a 	mov	r4,r2
  801030:	0802a680 	call	802a68 <__extendsfdf2>
  801034:	1009883a 	mov	r4,r2
  801038:	180b883a 	mov	r5,r3
  80103c:	1021883a 	mov	r16,r2
  801040:	1823883a 	mov	r17,r3
  801044:	0801cf80 	call	801cf8 <rint>
  801048:	180f883a 	mov	r7,r3
  80104c:	880b883a 	mov	r5,r17
  801050:	8009883a 	mov	r4,r16
  801054:	100d883a 	mov	r6,r2
  801058:	08032180 	call	803218 <__nedf2>
  80105c:	103fe526 	beq	r2,zero,800ff4 <powf+0x3dc>
  801060:	00bffc34 	movhi	r2,65520
  801064:	d8800715 	stw	r2,28(sp)
  801068:	d8000615 	stw	zero,24(sp)
  80106c:	003fe106 	br	800ff4 <powf+0x3dc>

00801070 <__ieee754_powf>:
  801070:	defff004 	addi	sp,sp,-64
  801074:	00a00034 	movhi	r2,32768
  801078:	10bfffc4 	addi	r2,r2,-1
  80107c:	dc000615 	stw	r16,24(sp)
  801080:	28a0703a 	and	r16,r5,r2
  801084:	df000e15 	stw	fp,56(sp)
  801088:	dcc00915 	stw	r19,36(sp)
  80108c:	dc800815 	stw	r18,32(sp)
  801090:	2027883a 	mov	r19,r4
  801094:	dfc00f15 	stw	ra,60(sp)
  801098:	ddc00d15 	stw	r23,52(sp)
  80109c:	dd800c15 	stw	r22,48(sp)
  8010a0:	dd400b15 	stw	r21,44(sp)
  8010a4:	dd000a15 	stw	r20,40(sp)
  8010a8:	dc400715 	stw	r17,28(sp)
  8010ac:	2839883a 	mov	fp,r5
  8010b0:	2825883a 	mov	r18,r5
  8010b4:	2809883a 	mov	r4,r5
  8010b8:	80003526 	beq	r16,zero,801190 <__ieee754_powf+0x120>
  8010bc:	98a2703a 	and	r17,r19,r2
  8010c0:	009fe034 	movhi	r2,32640
  8010c4:	9829883a 	mov	r20,r19
  8010c8:	1440100e 	bge	r2,r17,80110c <__ieee754_powf+0x9c>
  8010cc:	008fe034 	movhi	r2,16256
  8010d0:	88803d26 	beq	r17,r2,8011c8 <__ieee754_powf+0x158>
  8010d4:	01002074 	movhi	r4,129
  8010d8:	21079304 	addi	r4,r4,7756
  8010dc:	dfc00f17 	ldw	ra,60(sp)
  8010e0:	df000e17 	ldw	fp,56(sp)
  8010e4:	ddc00d17 	ldw	r23,52(sp)
  8010e8:	dd800c17 	ldw	r22,48(sp)
  8010ec:	dd400b17 	ldw	r21,44(sp)
  8010f0:	dd000a17 	ldw	r20,40(sp)
  8010f4:	dcc00917 	ldw	r19,36(sp)
  8010f8:	dc800817 	ldw	r18,32(sp)
  8010fc:	dc400717 	ldw	r17,28(sp)
  801100:	dc000617 	ldw	r16,24(sp)
  801104:	dec01004 	addi	sp,sp,64
  801108:	0801f4c1 	jmpi	801f4c <nanf>
  80110c:	143fef16 	blt	r2,r16,8010cc <__ieee754_powf+0x5c>
  801110:	982a403a 	cmpge	r21,r19,zero
  801114:	a8004526 	beq	r21,zero,80122c <__ieee754_powf+0x1bc>
  801118:	002f883a 	mov	r23,zero
  80111c:	009fe034 	movhi	r2,32640
  801120:	80803926 	beq	r16,r2,801208 <__ieee754_powf+0x198>
  801124:	008fe034 	movhi	r2,16256
  801128:	80803d26 	beq	r16,r2,801220 <__ieee754_powf+0x1b0>
  80112c:	00900034 	movhi	r2,16384
  801130:	20805326 	beq	r4,r2,801280 <__ieee754_powf+0x210>
  801134:	008fc034 	movhi	r2,16128
  801138:	20802526 	beq	r4,r2,8011d0 <__ieee754_powf+0x160>
  80113c:	9809883a 	mov	r4,r19
  801140:	0801f080 	call	801f08 <fabsf>
  801144:	1009883a 	mov	r4,r2
  801148:	009fe034 	movhi	r2,32640
  80114c:	88803c26 	beq	r17,r2,801240 <__ieee754_powf+0x1d0>
  801150:	88003b26 	beq	r17,zero,801240 <__ieee754_powf+0x1d0>
  801154:	014fe034 	movhi	r5,16256
  801158:	89403926 	beq	r17,r5,801240 <__ieee754_powf+0x1d0>
  80115c:	a004d7fa 	srli	r2,r20,31
  801160:	10bfffc4 	addi	r2,r2,-1
  801164:	15c6b03a 	or	r3,r2,r23
  801168:	d8800215 	stw	r2,8(sp)
  80116c:	1800661e 	bne	r3,zero,801308 <__ieee754_powf+0x298>
  801170:	980b883a 	mov	r5,r19
  801174:	9809883a 	mov	r4,r19
  801178:	08023340 	call	802334 <__subsf3>
  80117c:	1009883a 	mov	r4,r2
  801180:	100b883a 	mov	r5,r2
  801184:	08025e80 	call	8025e8 <__divsf3>
  801188:	1039883a 	mov	fp,r2
  80118c:	00000106 	br	801194 <__ieee754_powf+0x124>
  801190:	070fe034 	movhi	fp,16256
  801194:	e005883a 	mov	r2,fp
  801198:	dfc00f17 	ldw	ra,60(sp)
  80119c:	df000e17 	ldw	fp,56(sp)
  8011a0:	ddc00d17 	ldw	r23,52(sp)
  8011a4:	dd800c17 	ldw	r22,48(sp)
  8011a8:	dd400b17 	ldw	r21,44(sp)
  8011ac:	dd000a17 	ldw	r20,40(sp)
  8011b0:	dcc00917 	ldw	r19,36(sp)
  8011b4:	dc800817 	ldw	r18,32(sp)
  8011b8:	dc400717 	ldw	r17,28(sp)
  8011bc:	dc000617 	ldw	r16,24(sp)
  8011c0:	dec01004 	addi	sp,sp,64
  8011c4:	f800283a 	ret
  8011c8:	8839883a 	mov	fp,r17
  8011cc:	003ff106 	br	801194 <__ieee754_powf+0x124>
  8011d0:	a03fda16 	blt	r20,zero,80113c <__ieee754_powf+0xcc>
  8011d4:	9809883a 	mov	r4,r19
  8011d8:	dfc00f17 	ldw	ra,60(sp)
  8011dc:	df000e17 	ldw	fp,56(sp)
  8011e0:	ddc00d17 	ldw	r23,52(sp)
  8011e4:	dd800c17 	ldw	r22,48(sp)
  8011e8:	dd400b17 	ldw	r21,44(sp)
  8011ec:	dd000a17 	ldw	r20,40(sp)
  8011f0:	dcc00917 	ldw	r19,36(sp)
  8011f4:	dc800817 	ldw	r18,32(sp)
  8011f8:	dc400717 	ldw	r17,28(sp)
  8011fc:	dc000617 	ldw	r16,24(sp)
  801200:	dec01004 	addi	sp,sp,64
  801204:	0801b841 	jmpi	801b84 <__ieee754_sqrtf>
  801208:	008fe034 	movhi	r2,16256
  80120c:	88bfee26 	beq	r17,r2,8011c8 <__ieee754_powf+0x158>
  801210:	1440200e 	bge	r2,r17,801294 <__ieee754_powf+0x224>
  801214:	903fdf0e 	bge	r18,zero,801194 <__ieee754_powf+0x124>
  801218:	0039883a 	mov	fp,zero
  80121c:	003fdd06 	br	801194 <__ieee754_powf+0x124>
  801220:	90002f16 	blt	r18,zero,8012e0 <__ieee754_powf+0x270>
  801224:	9839883a 	mov	fp,r19
  801228:	003fda06 	br	801194 <__ieee754_powf+0x124>
  80122c:	0092e034 	movhi	r2,19328
  801230:	10bfffc4 	addi	r2,r2,-1
  801234:	14001b0e 	bge	r2,r16,8012a4 <__ieee754_powf+0x234>
  801238:	05c00084 	movi	r23,2
  80123c:	003fb706 	br	80111c <__ieee754_powf+0xac>
  801240:	90000916 	blt	r18,zero,801268 <__ieee754_powf+0x1f8>
  801244:	a8000226 	beq	r21,zero,801250 <__ieee754_powf+0x1e0>
  801248:	2039883a 	mov	fp,r4
  80124c:	003fd106 	br	801194 <__ieee754_powf+0x124>
  801250:	00b02034 	movhi	r2,49280
  801254:	8885883a 	add	r2,r17,r2
  801258:	b884b03a 	or	r2,r23,r2
  80125c:	1000251e 	bne	r2,zero,8012f4 <__ieee754_powf+0x284>
  801260:	200b883a 	mov	r5,r4
  801264:	003fc406 	br	801178 <__ieee754_powf+0x108>
  801268:	200b883a 	mov	r5,r4
  80126c:	010fe034 	movhi	r4,16256
  801270:	08025e80 	call	8025e8 <__divsf3>
  801274:	1009883a 	mov	r4,r2
  801278:	a83ff31e 	bne	r21,zero,801248 <__ieee754_powf+0x1d8>
  80127c:	003ff406 	br	801250 <__ieee754_powf+0x1e0>
  801280:	980b883a 	mov	r5,r19
  801284:	9809883a 	mov	r4,r19
  801288:	08024080 	call	802408 <__mulsf3>
  80128c:	1039883a 	mov	fp,r2
  801290:	003fc006 	br	801194 <__ieee754_powf+0x124>
  801294:	903fe00e 	bge	r18,zero,801218 <__ieee754_powf+0x1a8>
  801298:	e0a0003c 	xorhi	r2,fp,32768
  80129c:	1039883a 	mov	fp,r2
  8012a0:	003fbc06 	br	801194 <__ieee754_powf+0x124>
  8012a4:	008fe034 	movhi	r2,16256
  8012a8:	10bfffc4 	addi	r2,r2,-1
  8012ac:	1400060e 	bge	r2,r16,8012c8 <__ieee754_powf+0x258>
  8012b0:	8007d5fa 	srai	r3,r16,23
  8012b4:	00802584 	movi	r2,150
  8012b8:	10c5c83a 	sub	r2,r2,r3
  8012bc:	8087d83a 	sra	r3,r16,r2
  8012c0:	1884983a 	sll	r2,r3,r2
  8012c4:	80800226 	beq	r16,r2,8012d0 <__ieee754_powf+0x260>
  8012c8:	002f883a 	mov	r23,zero
  8012cc:	003f9506 	br	801124 <__ieee754_powf+0xb4>
  8012d0:	18c0004c 	andi	r3,r3,1
  8012d4:	00800084 	movi	r2,2
  8012d8:	10efc83a 	sub	r23,r2,r3
  8012dc:	003f9106 	br	801124 <__ieee754_powf+0xb4>
  8012e0:	8009883a 	mov	r4,r16
  8012e4:	980b883a 	mov	r5,r19
  8012e8:	08025e80 	call	8025e8 <__divsf3>
  8012ec:	1039883a 	mov	fp,r2
  8012f0:	003fa806 	br	801194 <__ieee754_powf+0x124>
  8012f4:	00800044 	movi	r2,1
  8012f8:	b8bfd31e 	bne	r23,r2,801248 <__ieee754_powf+0x1d8>
  8012fc:	20a0003c 	xorhi	r2,r4,32768
  801300:	1039883a 	mov	fp,r2
  801304:	003fa306 	br	801194 <__ieee754_powf+0x124>
  801308:	00934034 	movhi	r2,19712
  80130c:	14000a0e 	bge	r2,r16,801338 <__ieee754_powf+0x2c8>
  801310:	008fe034 	movhi	r2,16256
  801314:	10bffdc4 	addi	r2,r2,-9
  801318:	1441b016 	blt	r2,r17,8019dc <__ieee754_powf+0x96c>
  80131c:	903fbe0e 	bge	r18,zero,801218 <__ieee754_powf+0x1a8>
  801320:	011c52b4 	movhi	r4,29002
  801324:	213cb284 	addi	r4,r4,-3382
  801328:	200b883a 	mov	r5,r4
  80132c:	08024080 	call	802408 <__mulsf3>
  801330:	1039883a 	mov	fp,r2
  801334:	003f9706 	br	801194 <__ieee754_powf+0x124>
  801338:	00802034 	movhi	r2,128
  80133c:	10bfffc4 	addi	r2,r2,-1
  801340:	1441a10e 	bge	r2,r17,8019c8 <__ieee754_powf+0x958>
  801344:	0009883a 	mov	r4,zero
  801348:	8805d5fa 	srai	r2,r17,23
  80134c:	00c02034 	movhi	r3,128
  801350:	18ffffc4 	addi	r3,r3,-1
  801354:	88c6703a 	and	r3,r17,r3
  801358:	2089883a 	add	r4,r4,r2
  80135c:	20bfe044 	addi	r2,r4,-127
  801360:	d8800015 	stw	r2,0(sp)
  801364:	00800774 	movhi	r2,29
  801368:	10b11c44 	addi	r2,r2,-15247
  80136c:	1c0fe034 	orhi	r16,r3,16256
  801370:	10c1790e 	bge	r2,r3,801958 <__ieee754_powf+0x8e8>
  801374:	008017b4 	movhi	r2,94
  801378:	10acf584 	addi	r2,r2,-19498
  80137c:	10c17216 	blt	r2,r3,801948 <__ieee754_powf+0x8d8>
  801380:	00800934 	movhi	r2,36
  801384:	05000044 	movi	r20,1
  801388:	d8800115 	stw	r2,4(sp)
  80138c:	a529883a 	add	r20,r20,r20
  801390:	a529883a 	add	r20,r20,r20
  801394:	d0a00304 	addi	r2,gp,-32756
  801398:	a085883a 	add	r2,r20,r2
  80139c:	14800017 	ldw	r18,0(r2)
  8013a0:	8009883a 	mov	r4,r16
  8013a4:	8023d07a 	srai	r17,r16,1
  8013a8:	900b883a 	mov	r5,r18
  8013ac:	08023340 	call	802334 <__subsf3>
  8013b0:	8009883a 	mov	r4,r16
  8013b4:	900b883a 	mov	r5,r18
  8013b8:	1027883a 	mov	r19,r2
  8013bc:	08023a40 	call	8023a4 <__addsf3>
  8013c0:	100b883a 	mov	r5,r2
  8013c4:	010fe034 	movhi	r4,16256
  8013c8:	08025e80 	call	8025e8 <__divsf3>
  8013cc:	100b883a 	mov	r5,r2
  8013d0:	9809883a 	mov	r4,r19
  8013d4:	102b883a 	mov	r21,r2
  8013d8:	08024080 	call	802408 <__mulsf3>
  8013dc:	d8800315 	stw	r2,12(sp)
  8013e0:	d8c00317 	ldw	r3,12(sp)
  8013e4:	00bc0004 	movi	r2,-4096
  8013e8:	8c480034 	orhi	r17,r17,8192
  8013ec:	10ec703a 	and	r22,r2,r3
  8013f0:	d8800117 	ldw	r2,4(sp)
  8013f4:	b009883a 	mov	r4,r22
  8013f8:	88a3883a 	add	r17,r17,r2
  8013fc:	880b883a 	mov	r5,r17
  801400:	08024080 	call	802408 <__mulsf3>
  801404:	100b883a 	mov	r5,r2
  801408:	9809883a 	mov	r4,r19
  80140c:	08023340 	call	802334 <__subsf3>
  801410:	8809883a 	mov	r4,r17
  801414:	900b883a 	mov	r5,r18
  801418:	1027883a 	mov	r19,r2
  80141c:	08023340 	call	802334 <__subsf3>
  801420:	100b883a 	mov	r5,r2
  801424:	8009883a 	mov	r4,r16
  801428:	08023340 	call	802334 <__subsf3>
  80142c:	100b883a 	mov	r5,r2
  801430:	b009883a 	mov	r4,r22
  801434:	08024080 	call	802408 <__mulsf3>
  801438:	100b883a 	mov	r5,r2
  80143c:	9809883a 	mov	r4,r19
  801440:	08023340 	call	802334 <__subsf3>
  801444:	100b883a 	mov	r5,r2
  801448:	a809883a 	mov	r4,r21
  80144c:	08024080 	call	802408 <__mulsf3>
  801450:	d9000317 	ldw	r4,12(sp)
  801454:	d8800415 	stw	r2,16(sp)
  801458:	05501034 	movhi	r21,16448
  80145c:	200b883a 	mov	r5,r4
  801460:	08024080 	call	802408 <__mulsf3>
  801464:	1021883a 	mov	r16,r2
  801468:	1009883a 	mov	r4,r2
  80146c:	100b883a 	mov	r5,r2
  801470:	08024080 	call	802408 <__mulsf3>
  801474:	8009883a 	mov	r4,r16
  801478:	014f9534 	movhi	r5,15956
  80147c:	297c5084 	addi	r5,r5,-3774
  801480:	1023883a 	mov	r17,r2
  801484:	08024080 	call	802408 <__mulsf3>
  801488:	1009883a 	mov	r4,r2
  80148c:	014f9b34 	movhi	r5,15980
  801490:	294c9544 	addi	r5,r5,12885
  801494:	08023a40 	call	8023a4 <__addsf3>
  801498:	100b883a 	mov	r5,r2
  80149c:	8009883a 	mov	r4,r16
  8014a0:	08024080 	call	802408 <__mulsf3>
  8014a4:	1009883a 	mov	r4,r2
  8014a8:	014fa334 	movhi	r5,16012
  8014ac:	2968c144 	addi	r5,r5,-23803
  8014b0:	08023a40 	call	8023a4 <__addsf3>
  8014b4:	100b883a 	mov	r5,r2
  8014b8:	8009883a 	mov	r4,r16
  8014bc:	08024080 	call	802408 <__mulsf3>
  8014c0:	1009883a 	mov	r4,r2
  8014c4:	014faaf4 	movhi	r5,16043
  8014c8:	296aaac4 	addi	r5,r5,-21845
  8014cc:	08023a40 	call	8023a4 <__addsf3>
  8014d0:	100b883a 	mov	r5,r2
  8014d4:	8009883a 	mov	r4,r16
  8014d8:	08024080 	call	802408 <__mulsf3>
  8014dc:	1009883a 	mov	r4,r2
  8014e0:	014fb6f4 	movhi	r5,16091
  8014e4:	295b6dc4 	addi	r5,r5,28087
  8014e8:	08023a40 	call	8023a4 <__addsf3>
  8014ec:	100b883a 	mov	r5,r2
  8014f0:	8009883a 	mov	r4,r16
  8014f4:	08024080 	call	802408 <__mulsf3>
  8014f8:	1009883a 	mov	r4,r2
  8014fc:	014fc6b4 	movhi	r5,16154
  801500:	29666684 	addi	r5,r5,-26214
  801504:	08023a40 	call	8023a4 <__addsf3>
  801508:	100b883a 	mov	r5,r2
  80150c:	8809883a 	mov	r4,r17
  801510:	08024080 	call	802408 <__mulsf3>
  801514:	d9000317 	ldw	r4,12(sp)
  801518:	b00b883a 	mov	r5,r22
  80151c:	1021883a 	mov	r16,r2
  801520:	08023a40 	call	8023a4 <__addsf3>
  801524:	d9000417 	ldw	r4,16(sp)
  801528:	100b883a 	mov	r5,r2
  80152c:	08024080 	call	802408 <__mulsf3>
  801530:	100b883a 	mov	r5,r2
  801534:	8009883a 	mov	r4,r16
  801538:	08023a40 	call	8023a4 <__addsf3>
  80153c:	b009883a 	mov	r4,r22
  801540:	b00b883a 	mov	r5,r22
  801544:	1025883a 	mov	r18,r2
  801548:	08024080 	call	802408 <__mulsf3>
  80154c:	1009883a 	mov	r4,r2
  801550:	a80b883a 	mov	r5,r21
  801554:	1027883a 	mov	r19,r2
  801558:	08023a40 	call	8023a4 <__addsf3>
  80155c:	100b883a 	mov	r5,r2
  801560:	9009883a 	mov	r4,r18
  801564:	08023a40 	call	8023a4 <__addsf3>
  801568:	00fc0004 	movi	r3,-4096
  80156c:	10e2703a 	and	r17,r2,r3
  801570:	880b883a 	mov	r5,r17
  801574:	b009883a 	mov	r4,r22
  801578:	08024080 	call	802408 <__mulsf3>
  80157c:	d9000417 	ldw	r4,16(sp)
  801580:	880b883a 	mov	r5,r17
  801584:	d8800515 	stw	r2,20(sp)
  801588:	08024080 	call	802408 <__mulsf3>
  80158c:	8809883a 	mov	r4,r17
  801590:	a80b883a 	mov	r5,r21
  801594:	1021883a 	mov	r16,r2
  801598:	08023340 	call	802334 <__subsf3>
  80159c:	1009883a 	mov	r4,r2
  8015a0:	980b883a 	mov	r5,r19
  8015a4:	08023340 	call	802334 <__subsf3>
  8015a8:	100b883a 	mov	r5,r2
  8015ac:	9009883a 	mov	r4,r18
  8015b0:	08023340 	call	802334 <__subsf3>
  8015b4:	d9000317 	ldw	r4,12(sp)
  8015b8:	100b883a 	mov	r5,r2
  8015bc:	08024080 	call	802408 <__mulsf3>
  8015c0:	100b883a 	mov	r5,r2
  8015c4:	8009883a 	mov	r4,r16
  8015c8:	08023a40 	call	8023a4 <__addsf3>
  8015cc:	d9000517 	ldw	r4,20(sp)
  8015d0:	100b883a 	mov	r5,r2
  8015d4:	1027883a 	mov	r19,r2
  8015d8:	08023a40 	call	8023a4 <__addsf3>
  8015dc:	00fc0004 	movi	r3,-4096
  8015e0:	10e2703a 	and	r17,r2,r3
  8015e4:	8809883a 	mov	r4,r17
  8015e8:	014fddb4 	movhi	r5,16246
  8015ec:	294e0004 	addi	r5,r5,14336
  8015f0:	08024080 	call	802408 <__mulsf3>
  8015f4:	8809883a 	mov	r4,r17
  8015f8:	014da7b4 	movhi	r5,13982
  8015fc:	2970e804 	addi	r5,r5,-15456
  801600:	102b883a 	mov	r21,r2
  801604:	08024080 	call	802408 <__mulsf3>
  801608:	d9400517 	ldw	r5,20(sp)
  80160c:	8809883a 	mov	r4,r17
  801610:	1025883a 	mov	r18,r2
  801614:	08023340 	call	802334 <__subsf3>
  801618:	100b883a 	mov	r5,r2
  80161c:	9809883a 	mov	r4,r19
  801620:	08023340 	call	802334 <__subsf3>
  801624:	1009883a 	mov	r4,r2
  801628:	014fddb4 	movhi	r5,16246
  80162c:	294e13c4 	addi	r5,r5,14415
  801630:	08024080 	call	802408 <__mulsf3>
  801634:	100b883a 	mov	r5,r2
  801638:	9009883a 	mov	r4,r18
  80163c:	08023a40 	call	8023a4 <__addsf3>
  801640:	d0e00504 	addi	r3,gp,-32748
  801644:	a0c7883a 	add	r3,r20,r3
  801648:	19400017 	ldw	r5,0(r3)
  80164c:	1009883a 	mov	r4,r2
  801650:	08023a40 	call	8023a4 <__addsf3>
  801654:	d9000017 	ldw	r4,0(sp)
  801658:	1023883a 	mov	r17,r2
  80165c:	080293c0 	call	80293c <__floatsisf>
  801660:	1021883a 	mov	r16,r2
  801664:	d0a00704 	addi	r2,gp,-32740
  801668:	a0a9883a 	add	r20,r20,r2
  80166c:	a4800017 	ldw	r18,0(r20)
  801670:	a809883a 	mov	r4,r21
  801674:	880b883a 	mov	r5,r17
  801678:	08023a40 	call	8023a4 <__addsf3>
  80167c:	1009883a 	mov	r4,r2
  801680:	900b883a 	mov	r5,r18
  801684:	08023a40 	call	8023a4 <__addsf3>
  801688:	100b883a 	mov	r5,r2
  80168c:	8009883a 	mov	r4,r16
  801690:	08023a40 	call	8023a4 <__addsf3>
  801694:	00fc0004 	movi	r3,-4096
  801698:	10c4703a 	and	r2,r2,r3
  80169c:	800b883a 	mov	r5,r16
  8016a0:	1009883a 	mov	r4,r2
  8016a4:	1027883a 	mov	r19,r2
  8016a8:	08023340 	call	802334 <__subsf3>
  8016ac:	1009883a 	mov	r4,r2
  8016b0:	900b883a 	mov	r5,r18
  8016b4:	08023340 	call	802334 <__subsf3>
  8016b8:	1009883a 	mov	r4,r2
  8016bc:	a80b883a 	mov	r5,r21
  8016c0:	08023340 	call	802334 <__subsf3>
  8016c4:	100b883a 	mov	r5,r2
  8016c8:	8809883a 	mov	r4,r17
  8016cc:	08023340 	call	802334 <__subsf3>
  8016d0:	1021883a 	mov	r16,r2
  8016d4:	d8c00217 	ldw	r3,8(sp)
  8016d8:	b8bfffc4 	addi	r2,r23,-1
  8016dc:	1884b03a 	or	r2,r3,r2
  8016e0:	1000a11e 	bne	r2,zero,801968 <__ieee754_powf+0x8f8>
  8016e4:	05efe034 	movhi	r23,49024
  8016e8:	047c0004 	movi	r17,-4096
  8016ec:	8f22703a 	and	r17,r17,fp
  8016f0:	e009883a 	mov	r4,fp
  8016f4:	880b883a 	mov	r5,r17
  8016f8:	08023340 	call	802334 <__subsf3>
  8016fc:	100b883a 	mov	r5,r2
  801700:	9809883a 	mov	r4,r19
  801704:	08024080 	call	802408 <__mulsf3>
  801708:	8009883a 	mov	r4,r16
  80170c:	e00b883a 	mov	r5,fp
  801710:	1025883a 	mov	r18,r2
  801714:	08024080 	call	802408 <__mulsf3>
  801718:	100b883a 	mov	r5,r2
  80171c:	9009883a 	mov	r4,r18
  801720:	08023a40 	call	8023a4 <__addsf3>
  801724:	9809883a 	mov	r4,r19
  801728:	880b883a 	mov	r5,r17
  80172c:	1021883a 	mov	r16,r2
  801730:	08024080 	call	802408 <__mulsf3>
  801734:	100b883a 	mov	r5,r2
  801738:	8009883a 	mov	r4,r16
  80173c:	1027883a 	mov	r19,r2
  801740:	08023a40 	call	8023a4 <__addsf3>
  801744:	1023883a 	mov	r17,r2
  801748:	1029883a 	mov	r20,r2
  80174c:	00a00034 	movhi	r2,32768
  801750:	10bfffc4 	addi	r2,r2,-1
  801754:	88a4703a 	and	r18,r17,r2
  801758:	8039883a 	mov	fp,r16
  80175c:	982b883a 	mov	r21,r19
  801760:	8807883a 	mov	r3,r17
  801764:	0440a30e 	bge	zero,r17,8019f4 <__ieee754_powf+0x984>
  801768:	0090c034 	movhi	r2,17152
  80176c:	14808c16 	blt	r2,r18,8019a0 <__ieee754_powf+0x930>
  801770:	90807f26 	beq	r18,r2,801970 <__ieee754_powf+0x900>
  801774:	008fc034 	movhi	r2,16128
  801778:	1480a816 	blt	r2,r18,801a1c <__ieee754_powf+0x9ac>
  80177c:	002d883a 	mov	r22,zero
  801780:	0029883a 	mov	r20,zero
  801784:	047c0004 	movi	r17,-4096
  801788:	88e2703a 	and	r17,r17,r3
  80178c:	8809883a 	mov	r4,r17
  801790:	014fcc74 	movhi	r5,16177
  801794:	295c8004 	addi	r5,r5,29184
  801798:	08024080 	call	802408 <__mulsf3>
  80179c:	8809883a 	mov	r4,r17
  8017a0:	a80b883a 	mov	r5,r21
  8017a4:	1027883a 	mov	r19,r2
  8017a8:	08023340 	call	802334 <__subsf3>
  8017ac:	100b883a 	mov	r5,r2
  8017b0:	e009883a 	mov	r4,fp
  8017b4:	08023340 	call	802334 <__subsf3>
  8017b8:	1009883a 	mov	r4,r2
  8017bc:	014fcc74 	movhi	r5,16177
  8017c0:	295c8604 	addi	r5,r5,29208
  8017c4:	08024080 	call	802408 <__mulsf3>
  8017c8:	8809883a 	mov	r4,r17
  8017cc:	014d7034 	movhi	r5,13760
  8017d0:	296fa304 	addi	r5,r5,-16756
  8017d4:	1025883a 	mov	r18,r2
  8017d8:	08024080 	call	802408 <__mulsf3>
  8017dc:	100b883a 	mov	r5,r2
  8017e0:	9009883a 	mov	r4,r18
  8017e4:	08023a40 	call	8023a4 <__addsf3>
  8017e8:	100b883a 	mov	r5,r2
  8017ec:	9809883a 	mov	r4,r19
  8017f0:	1021883a 	mov	r16,r2
  8017f4:	08023a40 	call	8023a4 <__addsf3>
  8017f8:	1009883a 	mov	r4,r2
  8017fc:	980b883a 	mov	r5,r19
  801800:	1025883a 	mov	r18,r2
  801804:	08023340 	call	802334 <__subsf3>
  801808:	100b883a 	mov	r5,r2
  80180c:	8009883a 	mov	r4,r16
  801810:	08023340 	call	802334 <__subsf3>
  801814:	9009883a 	mov	r4,r18
  801818:	900b883a 	mov	r5,r18
  80181c:	1027883a 	mov	r19,r2
  801820:	08024080 	call	802408 <__mulsf3>
  801824:	1009883a 	mov	r4,r2
  801828:	014cccb4 	movhi	r5,13106
  80182c:	296ed304 	addi	r5,r5,-17588
  801830:	1021883a 	mov	r16,r2
  801834:	08024080 	call	802408 <__mulsf3>
  801838:	1009883a 	mov	r4,r2
  80183c:	014d77b4 	movhi	r5,13790
  801840:	297a8384 	addi	r5,r5,-5618
  801844:	08023340 	call	802334 <__subsf3>
  801848:	100b883a 	mov	r5,r2
  80184c:	8009883a 	mov	r4,r16
  801850:	08024080 	call	802408 <__mulsf3>
  801854:	1009883a 	mov	r4,r2
  801858:	014e22f4 	movhi	r5,14475
  80185c:	296cd544 	addi	r5,r5,-19627
  801860:	08023a40 	call	8023a4 <__addsf3>
  801864:	100b883a 	mov	r5,r2
  801868:	8009883a 	mov	r4,r16
  80186c:	08024080 	call	802408 <__mulsf3>
  801870:	1009883a 	mov	r4,r2
  801874:	014ecdb4 	movhi	r5,15158
  801878:	2942d844 	addi	r5,r5,2913
  80187c:	08023340 	call	802334 <__subsf3>
  801880:	100b883a 	mov	r5,r2
  801884:	8009883a 	mov	r4,r16
  801888:	08024080 	call	802408 <__mulsf3>
  80188c:	1009883a 	mov	r4,r2
  801890:	014f8af4 	movhi	r5,15915
  801894:	296aaac4 	addi	r5,r5,-21845
  801898:	08023a40 	call	8023a4 <__addsf3>
  80189c:	100b883a 	mov	r5,r2
  8018a0:	8009883a 	mov	r4,r16
  8018a4:	08024080 	call	802408 <__mulsf3>
  8018a8:	100b883a 	mov	r5,r2
  8018ac:	9009883a 	mov	r4,r18
  8018b0:	08023340 	call	802334 <__subsf3>
  8018b4:	1021883a 	mov	r16,r2
  8018b8:	9009883a 	mov	r4,r18
  8018bc:	100b883a 	mov	r5,r2
  8018c0:	08024080 	call	802408 <__mulsf3>
  8018c4:	8009883a 	mov	r4,r16
  8018c8:	01500034 	movhi	r5,16384
  8018cc:	1023883a 	mov	r17,r2
  8018d0:	08023340 	call	802334 <__subsf3>
  8018d4:	100b883a 	mov	r5,r2
  8018d8:	8809883a 	mov	r4,r17
  8018dc:	08025e80 	call	8025e8 <__divsf3>
  8018e0:	9009883a 	mov	r4,r18
  8018e4:	980b883a 	mov	r5,r19
  8018e8:	1021883a 	mov	r16,r2
  8018ec:	08024080 	call	802408 <__mulsf3>
  8018f0:	100b883a 	mov	r5,r2
  8018f4:	9809883a 	mov	r4,r19
  8018f8:	08023a40 	call	8023a4 <__addsf3>
  8018fc:	100b883a 	mov	r5,r2
  801900:	8009883a 	mov	r4,r16
  801904:	08023340 	call	802334 <__subsf3>
  801908:	1009883a 	mov	r4,r2
  80190c:	900b883a 	mov	r5,r18
  801910:	08023340 	call	802334 <__subsf3>
  801914:	100b883a 	mov	r5,r2
  801918:	010fe034 	movhi	r4,16256
  80191c:	08023340 	call	802334 <__subsf3>
  801920:	a087883a 	add	r3,r20,r2
  801924:	1009883a 	mov	r4,r2
  801928:	1805d5fa 	srai	r2,r3,23
  80192c:	0080920e 	bge	zero,r2,801b78 <__ieee754_powf+0xb08>
  801930:	1805883a 	mov	r2,r3
  801934:	1009883a 	mov	r4,r2
  801938:	b80b883a 	mov	r5,r23
  80193c:	08024080 	call	802408 <__mulsf3>
  801940:	1039883a 	mov	fp,r2
  801944:	003e1306 	br	801194 <__ieee754_powf+0x124>
  801948:	00bfe034 	movhi	r2,65408
  80194c:	213fe084 	addi	r4,r4,-126
  801950:	80a1883a 	add	r16,r16,r2
  801954:	d9000015 	stw	r4,0(sp)
  801958:	00c00134 	movhi	r3,4
  80195c:	0029883a 	mov	r20,zero
  801960:	d8c00115 	stw	r3,4(sp)
  801964:	003e8906 	br	80138c <__ieee754_powf+0x31c>
  801968:	05cfe034 	movhi	r23,16256
  80196c:	003f5e06 	br	8016e8 <__ieee754_powf+0x678>
  801970:	8009883a 	mov	r4,r16
  801974:	014cce74 	movhi	r5,13113
  801978:	296a8f04 	addi	r5,r5,-21956
  80197c:	08023a40 	call	8023a4 <__addsf3>
  801980:	8809883a 	mov	r4,r17
  801984:	980b883a 	mov	r5,r19
  801988:	1021883a 	mov	r16,r2
  80198c:	08023340 	call	802334 <__subsf3>
  801990:	100b883a 	mov	r5,r2
  801994:	8009883a 	mov	r4,r16
  801998:	08027d40 	call	8027d4 <__gtsf2>
  80199c:	00801f0e 	bge	zero,r2,801a1c <__ieee754_powf+0x9ac>
  8019a0:	041c52b4 	movhi	r16,29002
  8019a4:	843cb284 	addi	r16,r16,-3382
  8019a8:	b809883a 	mov	r4,r23
  8019ac:	800b883a 	mov	r5,r16
  8019b0:	08024080 	call	802408 <__mulsf3>
  8019b4:	1009883a 	mov	r4,r2
  8019b8:	800b883a 	mov	r5,r16
  8019bc:	08024080 	call	802408 <__mulsf3>
  8019c0:	1039883a 	mov	fp,r2
  8019c4:	003df306 	br	801194 <__ieee754_powf+0x124>
  8019c8:	0152e034 	movhi	r5,19328
  8019cc:	08024080 	call	802408 <__mulsf3>
  8019d0:	1023883a 	mov	r17,r2
  8019d4:	013ffa04 	movi	r4,-24
  8019d8:	003e5b06 	br	801348 <__ieee754_powf+0x2d8>
  8019dc:	008fe034 	movhi	r2,16256
  8019e0:	108001c4 	addi	r2,r2,7
  8019e4:	14402c0e 	bge	r2,r17,801a98 <__ieee754_powf+0xa28>
  8019e8:	04be4d16 	blt	zero,r18,801320 <__ieee754_powf+0x2b0>
  8019ec:	0039883a 	mov	fp,zero
  8019f0:	003de806 	br	801194 <__ieee754_powf+0x124>
  8019f4:	0090c5b4 	movhi	r2,17174
  8019f8:	14802416 	blt	r2,r18,801a8c <__ieee754_powf+0xa1c>
  8019fc:	90bf5d1e 	bne	r18,r2,801774 <__ieee754_powf+0x704>
  801a00:	8809883a 	mov	r4,r17
  801a04:	980b883a 	mov	r5,r19
  801a08:	08023340 	call	802334 <__subsf3>
  801a0c:	100b883a 	mov	r5,r2
  801a10:	8009883a 	mov	r4,r16
  801a14:	08028c40 	call	8028c4 <__lesf2>
  801a18:	00801c0e 	bge	zero,r2,801a8c <__ieee754_powf+0xa1c>
  801a1c:	9005d5fa 	srai	r2,r18,23
  801a20:	01002034 	movhi	r4,128
  801a24:	01402034 	movhi	r5,128
  801a28:	297fffc4 	addi	r5,r5,-1
  801a2c:	10bfe084 	addi	r2,r2,-126
  801a30:	2089d83a 	sra	r4,r4,r2
  801a34:	008005c4 	movi	r2,23
  801a38:	a109883a 	add	r4,r20,r4
  801a3c:	2006d5fa 	srli	r3,r4,23
  801a40:	214c703a 	and	r6,r4,r5
  801a44:	31802034 	orhi	r6,r6,128
  801a48:	18c03fcc 	andi	r3,r3,255
  801a4c:	18ffe044 	addi	r3,r3,-127
  801a50:	28cbd83a 	sra	r5,r5,r3
  801a54:	10c5c83a 	sub	r2,r2,r3
  801a58:	30add83a 	sra	r22,r6,r2
  801a5c:	014a303a 	nor	r5,zero,r5
  801a60:	214a703a 	and	r5,r4,r5
  801a64:	a0004216 	blt	r20,zero,801b70 <__ieee754_powf+0xb00>
  801a68:	a809883a 	mov	r4,r21
  801a6c:	08023340 	call	802334 <__subsf3>
  801a70:	100b883a 	mov	r5,r2
  801a74:	e009883a 	mov	r4,fp
  801a78:	b02895fa 	slli	r20,r22,23
  801a7c:	102b883a 	mov	r21,r2
  801a80:	08023a40 	call	8023a4 <__addsf3>
  801a84:	1007883a 	mov	r3,r2
  801a88:	003f3e06 	br	801784 <__ieee754_powf+0x714>
  801a8c:	040368b4 	movhi	r16,3490
  801a90:	84109804 	addi	r16,r16,16992
  801a94:	003fc406 	br	8019a8 <__ieee754_powf+0x938>
  801a98:	08023340 	call	802334 <__subsf3>
  801a9c:	1021883a 	mov	r16,r2
  801aa0:	1009883a 	mov	r4,r2
  801aa4:	014fee74 	movhi	r5,16313
  801aa8:	296a8004 	addi	r5,r5,-22016
  801aac:	08024080 	call	802408 <__mulsf3>
  801ab0:	8009883a 	mov	r4,r16
  801ab4:	014dbb74 	movhi	r5,14061
  801ab8:	29695c04 	addi	r5,r5,-23184
  801abc:	1023883a 	mov	r17,r2
  801ac0:	08024080 	call	802408 <__mulsf3>
  801ac4:	8009883a 	mov	r4,r16
  801ac8:	800b883a 	mov	r5,r16
  801acc:	1025883a 	mov	r18,r2
  801ad0:	08024080 	call	802408 <__mulsf3>
  801ad4:	8009883a 	mov	r4,r16
  801ad8:	016fa034 	movhi	r5,48768
  801adc:	1027883a 	mov	r19,r2
  801ae0:	08024080 	call	802408 <__mulsf3>
  801ae4:	1009883a 	mov	r4,r2
  801ae8:	014faaf4 	movhi	r5,16043
  801aec:	296aaac4 	addi	r5,r5,-21845
  801af0:	08023a40 	call	8023a4 <__addsf3>
  801af4:	100b883a 	mov	r5,r2
  801af8:	8009883a 	mov	r4,r16
  801afc:	08024080 	call	802408 <__mulsf3>
  801b00:	100b883a 	mov	r5,r2
  801b04:	010fc034 	movhi	r4,16128
  801b08:	08023340 	call	802334 <__subsf3>
  801b0c:	100b883a 	mov	r5,r2
  801b10:	9809883a 	mov	r4,r19
  801b14:	08024080 	call	802408 <__mulsf3>
  801b18:	1009883a 	mov	r4,r2
  801b1c:	016fee74 	movhi	r5,49081
  801b20:	296a8ec4 	addi	r5,r5,-21957
  801b24:	08024080 	call	802408 <__mulsf3>
  801b28:	100b883a 	mov	r5,r2
  801b2c:	9009883a 	mov	r4,r18
  801b30:	08023a40 	call	8023a4 <__addsf3>
  801b34:	100b883a 	mov	r5,r2
  801b38:	8809883a 	mov	r4,r17
  801b3c:	1021883a 	mov	r16,r2
  801b40:	08023a40 	call	8023a4 <__addsf3>
  801b44:	00fc0004 	movi	r3,-4096
  801b48:	10c4703a 	and	r2,r2,r3
  801b4c:	1009883a 	mov	r4,r2
  801b50:	880b883a 	mov	r5,r17
  801b54:	1027883a 	mov	r19,r2
  801b58:	08023340 	call	802334 <__subsf3>
  801b5c:	100b883a 	mov	r5,r2
  801b60:	8009883a 	mov	r4,r16
  801b64:	08023340 	call	802334 <__subsf3>
  801b68:	1021883a 	mov	r16,r2
  801b6c:	003ed906 	br	8016d4 <__ieee754_powf+0x664>
  801b70:	05adc83a 	sub	r22,zero,r22
  801b74:	003fbc06 	br	801a68 <__ieee754_powf+0x9f8>
  801b78:	b00b883a 	mov	r5,r22
  801b7c:	0801f540 	call	801f54 <scalbnf>
  801b80:	003f6c06 	br	801934 <__ieee754_powf+0x8c4>

00801b84 <__ieee754_sqrtf>:
  801b84:	00a00034 	movhi	r2,32768
  801b88:	10bfffc4 	addi	r2,r2,-1
  801b8c:	defffe04 	addi	sp,sp,-8
  801b90:	208c703a 	and	r6,r4,r2
  801b94:	00dfe034 	movhi	r3,32640
  801b98:	18ffffc4 	addi	r3,r3,-1
  801b9c:	dc000015 	stw	r16,0(sp)
  801ba0:	dfc00115 	stw	ra,4(sp)
  801ba4:	2021883a 	mov	r16,r4
  801ba8:	200b883a 	mov	r5,r4
  801bac:	19800a2e 	bgeu	r3,r6,801bd8 <__ieee754_sqrtf+0x54>
  801bb0:	08024080 	call	802408 <__mulsf3>
  801bb4:	100b883a 	mov	r5,r2
  801bb8:	8009883a 	mov	r4,r16
  801bbc:	08023a40 	call	8023a4 <__addsf3>
  801bc0:	1021883a 	mov	r16,r2
  801bc4:	8005883a 	mov	r2,r16
  801bc8:	dfc00117 	ldw	ra,4(sp)
  801bcc:	dc000017 	ldw	r16,0(sp)
  801bd0:	dec00204 	addi	sp,sp,8
  801bd4:	f800283a 	ret
  801bd8:	303ffa26 	beq	r6,zero,801bc4 <__ieee754_sqrtf+0x40>
  801bdc:	20003b16 	blt	r4,zero,801ccc <__ieee754_sqrtf+0x148>
  801be0:	00802034 	movhi	r2,128
  801be4:	10bfffc4 	addi	r2,r2,-1
  801be8:	2007d5fa 	srai	r3,r4,23
  801bec:	11800936 	bltu	r2,r6,801c14 <__ieee754_sqrtf+0x90>
  801bf0:	2080202c 	andhi	r2,r4,128
  801bf4:	10003c1e 	bne	r2,zero,801ce8 <__ieee754_sqrtf+0x164>
  801bf8:	0009883a 	mov	r4,zero
  801bfc:	294b883a 	add	r5,r5,r5
  801c00:	2880202c 	andhi	r2,r5,128
  801c04:	21000044 	addi	r4,r4,1
  801c08:	103ffc26 	beq	r2,zero,801bfc <__ieee754_sqrtf+0x78>
  801c0c:	1905c83a 	sub	r2,r3,r4
  801c10:	10c00044 	addi	r3,r2,1
  801c14:	1a7fe044 	addi	r9,r3,-127
  801c18:	48c0004c 	andi	r3,r9,1
  801c1c:	00802034 	movhi	r2,128
  801c20:	10bfffc4 	addi	r2,r2,-1
  801c24:	2884703a 	and	r2,r5,r2
  801c28:	1807003a 	cmpeq	r3,r3,zero
  801c2c:	10802034 	orhi	r2,r2,128
  801c30:	18002426 	beq	r3,zero,801cc4 <__ieee754_sqrtf+0x140>
  801c34:	1085883a 	add	r2,r2,r2
  801c38:	01404034 	movhi	r5,256
  801c3c:	000f883a 	mov	r7,zero
  801c40:	0007883a 	mov	r3,zero
  801c44:	000d883a 	mov	r6,zero
  801c48:	02000644 	movi	r8,25
  801c4c:	3949883a 	add	r4,r7,r5
  801c50:	31800044 	addi	r6,r6,1
  801c54:	11000316 	blt	r2,r4,801c64 <__ieee754_sqrtf+0xe0>
  801c58:	1105c83a 	sub	r2,r2,r4
  801c5c:	1947883a 	add	r3,r3,r5
  801c60:	214f883a 	add	r7,r4,r5
  801c64:	1085883a 	add	r2,r2,r2
  801c68:	280ad07a 	srli	r5,r5,1
  801c6c:	323ff71e 	bne	r6,r8,801c4c <__ieee754_sqrtf+0xc8>
  801c70:	10000b1e 	bne	r2,zero,801ca0 <__ieee754_sqrtf+0x11c>
  801c74:	4805d07a 	srai	r2,r9,1
  801c78:	1807d07a 	srai	r3,r3,1
  801c7c:	010fc034 	movhi	r4,16128
  801c80:	100495fa 	slli	r2,r2,23
  801c84:	1907883a 	add	r3,r3,r4
  801c88:	18a1883a 	add	r16,r3,r2
  801c8c:	8005883a 	mov	r2,r16
  801c90:	dfc00117 	ldw	ra,4(sp)
  801c94:	dc000017 	ldw	r16,0(sp)
  801c98:	dec00204 	addi	sp,sp,8
  801c9c:	f800283a 	ret
  801ca0:	1880004c 	andi	r2,r3,1
  801ca4:	1887883a 	add	r3,r3,r2
  801ca8:	4805d07a 	srai	r2,r9,1
  801cac:	1807d07a 	srai	r3,r3,1
  801cb0:	010fc034 	movhi	r4,16128
  801cb4:	100495fa 	slli	r2,r2,23
  801cb8:	1907883a 	add	r3,r3,r4
  801cbc:	18a1883a 	add	r16,r3,r2
  801cc0:	003ff206 	br	801c8c <__ieee754_sqrtf+0x108>
  801cc4:	1085883a 	add	r2,r2,r2
  801cc8:	003fda06 	br	801c34 <__ieee754_sqrtf+0xb0>
  801ccc:	200b883a 	mov	r5,r4
  801cd0:	08023340 	call	802334 <__subsf3>
  801cd4:	1009883a 	mov	r4,r2
  801cd8:	100b883a 	mov	r5,r2
  801cdc:	08025e80 	call	8025e8 <__divsf3>
  801ce0:	1021883a 	mov	r16,r2
  801ce4:	003fb706 	br	801bc4 <__ieee754_sqrtf+0x40>
  801ce8:	0009883a 	mov	r4,zero
  801cec:	003fc706 	br	801c0c <__ieee754_sqrtf+0x88>

00801cf0 <matherr>:
  801cf0:	0005883a 	mov	r2,zero
  801cf4:	f800283a 	ret

00801cf8 <rint>:
  801cf8:	2015883a 	mov	r10,r4
  801cfc:	2809d53a 	srai	r4,r5,20
  801d00:	defff904 	addi	sp,sp,-28
  801d04:	034004c4 	movi	r13,19
  801d08:	2101ffcc 	andi	r4,r4,2047
  801d0c:	227f0044 	addi	r9,r4,-1023
  801d10:	dc800415 	stw	r18,16(sp)
  801d14:	dfc00615 	stw	ra,24(sp)
  801d18:	dcc00515 	stw	r19,20(sp)
  801d1c:	dc400315 	stw	r17,12(sp)
  801d20:	dc000215 	stw	r16,8(sp)
  801d24:	2817883a 	mov	r11,r5
  801d28:	500d883a 	mov	r6,r10
  801d2c:	2824d7fa 	srli	r18,r5,31
  801d30:	6a403016 	blt	r13,r9,801df4 <rint+0xfc>
  801d34:	48004916 	blt	r9,zero,801e5c <rint+0x164>
  801d38:	00800434 	movhi	r2,16
  801d3c:	10bfffc4 	addi	r2,r2,-1
  801d40:	1247d83a 	sra	r3,r2,r9
  801d44:	2809883a 	mov	r4,r5
  801d48:	1944703a 	and	r2,r3,r5
  801d4c:	5084b03a 	or	r2,r10,r2
  801d50:	10001f26 	beq	r2,zero,801dd0 <rint+0xd8>
  801d54:	180ad07a 	srli	r5,r3,1
  801d58:	5944703a 	and	r2,r11,r5
  801d5c:	5084b03a 	or	r2,r10,r2
  801d60:	10000626 	beq	r2,zero,801d7c <rint+0x84>
  801d64:	4b406626 	beq	r9,r13,801f00 <rint+0x208>
  801d68:	00c000b4 	movhi	r3,2
  801d6c:	1a47d83a 	sra	r3,r3,r9
  801d70:	0144303a 	nor	r2,zero,r5
  801d74:	5884703a 	and	r2,r11,r2
  801d78:	10c8b03a 	or	r4,r2,r3
  801d7c:	900690fa 	slli	r3,r18,3
  801d80:	00802074 	movhi	r2,129
  801d84:	1087c204 	addi	r2,r2,7944
  801d88:	200f883a 	mov	r7,r4
  801d8c:	1887883a 	add	r3,r3,r2
  801d90:	1c000017 	ldw	r16,0(r3)
  801d94:	1c400117 	ldw	r17,4(r3)
  801d98:	8009883a 	mov	r4,r16
  801d9c:	880b883a 	mov	r5,r17
  801da0:	0802f4c0 	call	802f4c <__adddf3>
  801da4:	d8800015 	stw	r2,0(sp)
  801da8:	d8c00115 	stw	r3,4(sp)
  801dac:	d8800017 	ldw	r2,0(sp)
  801db0:	d8c00117 	ldw	r3,4(sp)
  801db4:	880f883a 	mov	r7,r17
  801db8:	800d883a 	mov	r6,r16
  801dbc:	180b883a 	mov	r5,r3
  801dc0:	1009883a 	mov	r4,r2
  801dc4:	0802ecc0 	call	802ecc <__subdf3>
  801dc8:	1015883a 	mov	r10,r2
  801dcc:	1817883a 	mov	r11,r3
  801dd0:	5005883a 	mov	r2,r10
  801dd4:	5807883a 	mov	r3,r11
  801dd8:	dfc00617 	ldw	ra,24(sp)
  801ddc:	dcc00517 	ldw	r19,20(sp)
  801de0:	dc800417 	ldw	r18,16(sp)
  801de4:	dc400317 	ldw	r17,12(sp)
  801de8:	dc000217 	ldw	r16,8(sp)
  801dec:	dec00704 	addi	sp,sp,28
  801df0:	f800283a 	ret
  801df4:	00800cc4 	movi	r2,51
  801df8:	12400f16 	blt	r2,r9,801e38 <rint+0x140>
  801dfc:	213efb44 	addi	r4,r4,-1043
  801e00:	00bfffc4 	movi	r2,-1
  801e04:	1104d83a 	srl	r2,r2,r4
  801e08:	5086703a 	and	r3,r10,r2
  801e0c:	183ff026 	beq	r3,zero,801dd0 <rint+0xd8>
  801e10:	100ad07a 	srli	r5,r2,1
  801e14:	5144703a 	and	r2,r10,r5
  801e18:	10000526 	beq	r2,zero,801e30 <rint+0x138>
  801e1c:	00d00034 	movhi	r3,16384
  801e20:	1907d83a 	sra	r3,r3,r4
  801e24:	0144303a 	nor	r2,zero,r5
  801e28:	5084703a 	and	r2,r10,r2
  801e2c:	10ccb03a 	or	r6,r2,r3
  801e30:	5809883a 	mov	r4,r11
  801e34:	003fd106 	br	801d7c <rint+0x84>
  801e38:	00810004 	movi	r2,1024
  801e3c:	48bfe41e 	bne	r9,r2,801dd0 <rint+0xd8>
  801e40:	5009883a 	mov	r4,r10
  801e44:	500d883a 	mov	r6,r10
  801e48:	280f883a 	mov	r7,r5
  801e4c:	0802f4c0 	call	802f4c <__adddf3>
  801e50:	1015883a 	mov	r10,r2
  801e54:	1817883a 	mov	r11,r3
  801e58:	003fdd06 	br	801dd0 <rint+0xd8>
  801e5c:	04e00034 	movhi	r19,32768
  801e60:	9cffffc4 	addi	r19,r19,-1
  801e64:	2cc4703a 	and	r2,r5,r19
  801e68:	5084b03a 	or	r2,r10,r2
  801e6c:	103fd826 	beq	r2,zero,801dd0 <rint+0xd8>
  801e70:	00c00434 	movhi	r3,16
  801e74:	18ffffc4 	addi	r3,r3,-1
  801e78:	28c6703a 	and	r3,r5,r3
  801e7c:	50c6b03a 	or	r3,r10,r3
  801e80:	00cdc83a 	sub	r6,zero,r3
  801e84:	900a90fa 	slli	r5,r18,3
  801e88:	1986b03a 	or	r3,r3,r6
  801e8c:	01002074 	movhi	r4,129
  801e90:	2107c204 	addi	r4,r4,7944
  801e94:	1806d33a 	srli	r3,r3,12
  801e98:	290b883a 	add	r5,r5,r4
  801e9c:	2c000017 	ldw	r16,0(r5)
  801ea0:	2c400117 	ldw	r17,4(r5)
  801ea4:	593fffac 	andhi	r4,r11,65534
  801ea8:	18c0022c 	andhi	r3,r3,8
  801eac:	1906b03a 	or	r3,r3,r4
  801eb0:	500d883a 	mov	r6,r10
  801eb4:	180f883a 	mov	r7,r3
  801eb8:	8009883a 	mov	r4,r16
  801ebc:	880b883a 	mov	r5,r17
  801ec0:	0802f4c0 	call	802f4c <__adddf3>
  801ec4:	d8800015 	stw	r2,0(sp)
  801ec8:	d8c00115 	stw	r3,4(sp)
  801ecc:	d8800017 	ldw	r2,0(sp)
  801ed0:	d8c00117 	ldw	r3,4(sp)
  801ed4:	880f883a 	mov	r7,r17
  801ed8:	800d883a 	mov	r6,r16
  801edc:	180b883a 	mov	r5,r3
  801ee0:	1009883a 	mov	r4,r2
  801ee4:	0802ecc0 	call	802ecc <__subdf3>
  801ee8:	901297fa 	slli	r9,r18,31
  801eec:	98d0703a 	and	r8,r19,r3
  801ef0:	1015883a 	mov	r10,r2
  801ef4:	4250b03a 	or	r8,r8,r9
  801ef8:	4017883a 	mov	r11,r8
  801efc:	003fb406 	br	801dd0 <rint+0xd8>
  801f00:	01900034 	movhi	r6,16384
  801f04:	003f9d06 	br	801d7c <rint+0x84>

00801f08 <fabsf>:
  801f08:	00a00034 	movhi	r2,32768
  801f0c:	10bfffc4 	addi	r2,r2,-1
  801f10:	2084703a 	and	r2,r4,r2
  801f14:	f800283a 	ret

00801f18 <finitef>:
  801f18:	00a00034 	movhi	r2,32768
  801f1c:	10bfffc4 	addi	r2,r2,-1
  801f20:	2088703a 	and	r4,r4,r2
  801f24:	009fe034 	movhi	r2,32640
  801f28:	10bfffc4 	addi	r2,r2,-1
  801f2c:	1104403a 	cmpge	r2,r2,r4
  801f30:	f800283a 	ret

00801f34 <isnanf>:
  801f34:	00a00034 	movhi	r2,32768
  801f38:	10bfffc4 	addi	r2,r2,-1
  801f3c:	2088703a 	and	r4,r4,r2
  801f40:	009fe034 	movhi	r2,32640
  801f44:	1104803a 	cmplt	r2,r2,r4
  801f48:	f800283a 	ret

00801f4c <nanf>:
  801f4c:	009ff034 	movhi	r2,32704
  801f50:	f800283a 	ret

00801f54 <scalbnf>:
  801f54:	00a00034 	movhi	r2,32768
  801f58:	10bfffc4 	addi	r2,r2,-1
  801f5c:	defffe04 	addi	sp,sp,-8
  801f60:	2086703a 	and	r3,r4,r2
  801f64:	dc000015 	stw	r16,0(sp)
  801f68:	dfc00115 	stw	ra,4(sp)
  801f6c:	200d883a 	mov	r6,r4
  801f70:	200f883a 	mov	r7,r4
  801f74:	2821883a 	mov	r16,r5
  801f78:	18001a26 	beq	r3,zero,801fe4 <scalbnf+0x90>
  801f7c:	009fe034 	movhi	r2,32640
  801f80:	10bfffc4 	addi	r2,r2,-1
  801f84:	10c01c36 	bltu	r2,r3,801ff8 <scalbnf+0xa4>
  801f88:	00802034 	movhi	r2,128
  801f8c:	10bfffc4 	addi	r2,r2,-1
  801f90:	10c02136 	bltu	r2,r3,802018 <scalbnf+0xc4>
  801f94:	01530034 	movhi	r5,19456
  801f98:	08024080 	call	802408 <__mulsf3>
  801f9c:	1009883a 	mov	r4,r2
  801fa0:	100d883a 	mov	r6,r2
  801fa4:	00bffff4 	movhi	r2,65535
  801fa8:	108f2c04 	addi	r2,r2,15536
  801fac:	80802616 	blt	r16,r2,802048 <scalbnf+0xf4>
  801fb0:	209fe02c 	andhi	r2,r4,32640
  801fb4:	1005d5fa 	srai	r2,r2,23
  801fb8:	200f883a 	mov	r7,r4
  801fbc:	10bff9c4 	addi	r2,r2,-25
  801fc0:	1407883a 	add	r3,r2,r16
  801fc4:	00803f84 	movi	r2,254
  801fc8:	10c01516 	blt	r2,r3,802020 <scalbnf+0xcc>
  801fcc:	00c0230e 	bge	zero,r3,80205c <scalbnf+0x108>
  801fd0:	180695fa 	slli	r3,r3,23
  801fd4:	00a02034 	movhi	r2,32896
  801fd8:	10bfffc4 	addi	r2,r2,-1
  801fdc:	3884703a 	and	r2,r7,r2
  801fe0:	10ccb03a 	or	r6,r2,r3
  801fe4:	3005883a 	mov	r2,r6
  801fe8:	dfc00117 	ldw	ra,4(sp)
  801fec:	dc000017 	ldw	r16,0(sp)
  801ff0:	dec00204 	addi	sp,sp,8
  801ff4:	f800283a 	ret
  801ff8:	200b883a 	mov	r5,r4
  801ffc:	08023a40 	call	8023a4 <__addsf3>
  802000:	100d883a 	mov	r6,r2
  802004:	3005883a 	mov	r2,r6
  802008:	dfc00117 	ldw	ra,4(sp)
  80200c:	dc000017 	ldw	r16,0(sp)
  802010:	dec00204 	addi	sp,sp,8
  802014:	f800283a 	ret
  802018:	1804d5fa 	srli	r2,r3,23
  80201c:	003fe806 	br	801fc0 <scalbnf+0x6c>
  802020:	041c52b4 	movhi	r16,29002
  802024:	843cb284 	addi	r16,r16,-3382
  802028:	300b883a 	mov	r5,r6
  80202c:	8009883a 	mov	r4,r16
  802030:	08020a00 	call	8020a0 <copysignf>
  802034:	1009883a 	mov	r4,r2
  802038:	800b883a 	mov	r5,r16
  80203c:	08024080 	call	802408 <__mulsf3>
  802040:	100d883a 	mov	r6,r2
  802044:	003fe706 	br	801fe4 <scalbnf+0x90>
  802048:	014368b4 	movhi	r5,3490
  80204c:	29509804 	addi	r5,r5,16992
  802050:	08024080 	call	802408 <__mulsf3>
  802054:	100d883a 	mov	r6,r2
  802058:	003fe206 	br	801fe4 <scalbnf+0x90>
  80205c:	00bffa84 	movi	r2,-22
  802060:	1880050e 	bge	r3,r2,802078 <scalbnf+0x124>
  802064:	00b0d414 	movui	r2,50000
  802068:	143fed16 	blt	r2,r16,802020 <scalbnf+0xcc>
  80206c:	040368b4 	movhi	r16,3490
  802070:	84109804 	addi	r16,r16,16992
  802074:	003fec06 	br	802028 <scalbnf+0xd4>
  802078:	18800644 	addi	r2,r3,25
  80207c:	100495fa 	slli	r2,r2,23
  802080:	01202034 	movhi	r4,32896
  802084:	213fffc4 	addi	r4,r4,-1
  802088:	3908703a 	and	r4,r7,r4
  80208c:	2088b03a 	or	r4,r4,r2
  802090:	014cc034 	movhi	r5,13056
  802094:	08024080 	call	802408 <__mulsf3>
  802098:	100d883a 	mov	r6,r2
  80209c:	003fd106 	br	801fe4 <scalbnf+0x90>

008020a0 <copysignf>:
  8020a0:	00a00034 	movhi	r2,32768
  8020a4:	10bfffc4 	addi	r2,r2,-1
  8020a8:	2088703a 	and	r4,r4,r2
  8020ac:	28a0002c 	andhi	r2,r5,32768
  8020b0:	2084b03a 	or	r2,r4,r2
  8020b4:	f800283a 	ret

008020b8 <__muldi3>:
  8020b8:	2011883a 	mov	r8,r4
  8020bc:	427fffcc 	andi	r9,r8,65535
  8020c0:	4018d43a 	srli	r12,r8,16
  8020c4:	32bfffcc 	andi	r10,r6,65535
  8020c8:	3016d43a 	srli	r11,r6,16
  8020cc:	4a85383a 	mul	r2,r9,r10
  8020d0:	6295383a 	mul	r10,r12,r10
  8020d4:	4ad3383a 	mul	r9,r9,r11
  8020d8:	113fffcc 	andi	r4,r2,65535
  8020dc:	1004d43a 	srli	r2,r2,16
  8020e0:	4a93883a 	add	r9,r9,r10
  8020e4:	3807883a 	mov	r3,r7
  8020e8:	1245883a 	add	r2,r2,r9
  8020ec:	280f883a 	mov	r7,r5
  8020f0:	180b883a 	mov	r5,r3
  8020f4:	1006943a 	slli	r3,r2,16
  8020f8:	defffd04 	addi	sp,sp,-12
  8020fc:	dc800215 	stw	r18,8(sp)
  802100:	1907883a 	add	r3,r3,r4
  802104:	dc400115 	stw	r17,4(sp)
  802108:	dc000015 	stw	r16,0(sp)
  80210c:	4165383a 	mul	r18,r8,r5
  802110:	31e3383a 	mul	r17,r6,r7
  802114:	1012d43a 	srli	r9,r2,16
  802118:	62d9383a 	mul	r12,r12,r11
  80211c:	181f883a 	mov	r15,r3
  802120:	1280022e 	bgeu	r2,r10,80212c <__muldi3+0x74>
  802124:	00800074 	movhi	r2,1
  802128:	6099883a 	add	r12,r12,r2
  80212c:	624d883a 	add	r6,r12,r9
  802130:	9187883a 	add	r3,r18,r6
  802134:	88c7883a 	add	r3,r17,r3
  802138:	7805883a 	mov	r2,r15
  80213c:	dc800217 	ldw	r18,8(sp)
  802140:	dc400117 	ldw	r17,4(sp)
  802144:	dc000017 	ldw	r16,0(sp)
  802148:	dec00304 	addi	sp,sp,12
  80214c:	f800283a 	ret

00802150 <_fpadd_parts>:
  802150:	21c00017 	ldw	r7,0(r4)
  802154:	02000044 	movi	r8,1
  802158:	41c0332e 	bgeu	r8,r7,802228 <_fpadd_parts+0xd8>
  80215c:	28800017 	ldw	r2,0(r5)
  802160:	4080462e 	bgeu	r8,r2,80227c <_fpadd_parts+0x12c>
  802164:	00c00104 	movi	r3,4
  802168:	38c06b26 	beq	r7,r3,802318 <_fpadd_parts+0x1c8>
  80216c:	10c04326 	beq	r2,r3,80227c <_fpadd_parts+0x12c>
  802170:	00c00084 	movi	r3,2
  802174:	10c02e26 	beq	r2,r3,802230 <_fpadd_parts+0xe0>
  802178:	38c04026 	beq	r7,r3,80227c <_fpadd_parts+0x12c>
  80217c:	22800217 	ldw	r10,8(r4)
  802180:	28c00217 	ldw	r3,8(r5)
  802184:	23000317 	ldw	r12,12(r4)
  802188:	2a400317 	ldw	r9,12(r5)
  80218c:	50cfc83a 	sub	r7,r10,r3
  802190:	3817883a 	mov	r11,r7
  802194:	38004f16 	blt	r7,zero,8022d4 <_fpadd_parts+0x184>
  802198:	008007c4 	movi	r2,31
  80219c:	11c03316 	blt	r2,r7,80226c <_fpadd_parts+0x11c>
  8021a0:	02c0540e 	bge	zero,r11,8022f4 <_fpadd_parts+0x1a4>
  8021a4:	41c4983a 	sll	r2,r8,r7
  8021a8:	49c6d83a 	srl	r3,r9,r7
  8021ac:	10bfffc4 	addi	r2,r2,-1
  8021b0:	4884703a 	and	r2,r9,r2
  8021b4:	1004c03a 	cmpne	r2,r2,zero
  8021b8:	1892b03a 	or	r9,r3,r2
  8021bc:	20c00117 	ldw	r3,4(r4)
  8021c0:	28800117 	ldw	r2,4(r5)
  8021c4:	18803c26 	beq	r3,r2,8022b8 <_fpadd_parts+0x168>
  8021c8:	18002f26 	beq	r3,zero,802288 <_fpadd_parts+0x138>
  8021cc:	4b05c83a 	sub	r2,r9,r12
  8021d0:	10004216 	blt	r2,zero,8022dc <_fpadd_parts+0x18c>
  8021d4:	32800215 	stw	r10,8(r6)
  8021d8:	30800315 	stw	r2,12(r6)
  8021dc:	30000115 	stw	zero,4(r6)
  8021e0:	31000317 	ldw	r4,12(r6)
  8021e4:	01d00034 	movhi	r7,16384
  8021e8:	39ffff84 	addi	r7,r7,-2
  8021ec:	20bfffc4 	addi	r2,r4,-1
  8021f0:	2007883a 	mov	r3,r4
  8021f4:	38800836 	bltu	r7,r2,802218 <_fpadd_parts+0xc8>
  8021f8:	31400217 	ldw	r5,8(r6)
  8021fc:	18c9883a 	add	r4,r3,r3
  802200:	20bfffc4 	addi	r2,r4,-1
  802204:	297fffc4 	addi	r5,r5,-1
  802208:	2007883a 	mov	r3,r4
  80220c:	38bffb2e 	bgeu	r7,r2,8021fc <_fpadd_parts+0xac>
  802210:	31400215 	stw	r5,8(r6)
  802214:	31000315 	stw	r4,12(r6)
  802218:	008000c4 	movi	r2,3
  80221c:	30800015 	stw	r2,0(r6)
  802220:	20001b16 	blt	r4,zero,802290 <_fpadd_parts+0x140>
  802224:	3009883a 	mov	r4,r6
  802228:	2005883a 	mov	r2,r4
  80222c:	f800283a 	ret
  802230:	38fffd1e 	bne	r7,r3,802228 <_fpadd_parts+0xd8>
  802234:	31c00015 	stw	r7,0(r6)
  802238:	20800117 	ldw	r2,4(r4)
  80223c:	30800115 	stw	r2,4(r6)
  802240:	20c00217 	ldw	r3,8(r4)
  802244:	30c00215 	stw	r3,8(r6)
  802248:	20800317 	ldw	r2,12(r4)
  80224c:	30800315 	stw	r2,12(r6)
  802250:	20c00117 	ldw	r3,4(r4)
  802254:	28800117 	ldw	r2,4(r5)
  802258:	3009883a 	mov	r4,r6
  80225c:	1886703a 	and	r3,r3,r2
  802260:	2005883a 	mov	r2,r4
  802264:	30c00115 	stw	r3,4(r6)
  802268:	f800283a 	ret
  80226c:	1a801716 	blt	r3,r10,8022cc <_fpadd_parts+0x17c>
  802270:	1815883a 	mov	r10,r3
  802274:	0019883a 	mov	r12,zero
  802278:	003fd006 	br	8021bc <_fpadd_parts+0x6c>
  80227c:	2809883a 	mov	r4,r5
  802280:	2005883a 	mov	r2,r4
  802284:	f800283a 	ret
  802288:	6245c83a 	sub	r2,r12,r9
  80228c:	003fd006 	br	8021d0 <_fpadd_parts+0x80>
  802290:	30800217 	ldw	r2,8(r6)
  802294:	2006d07a 	srli	r3,r4,1
  802298:	2100004c 	andi	r4,r4,1
  80229c:	10800044 	addi	r2,r2,1
  8022a0:	1906b03a 	or	r3,r3,r4
  8022a4:	3009883a 	mov	r4,r6
  8022a8:	30800215 	stw	r2,8(r6)
  8022ac:	2005883a 	mov	r2,r4
  8022b0:	30c00315 	stw	r3,12(r6)
  8022b4:	f800283a 	ret
  8022b8:	4b09883a 	add	r4,r9,r12
  8022bc:	30c00115 	stw	r3,4(r6)
  8022c0:	32800215 	stw	r10,8(r6)
  8022c4:	31000315 	stw	r4,12(r6)
  8022c8:	003fd306 	br	802218 <_fpadd_parts+0xc8>
  8022cc:	0013883a 	mov	r9,zero
  8022d0:	003fba06 	br	8021bc <_fpadd_parts+0x6c>
  8022d4:	01cfc83a 	sub	r7,zero,r7
  8022d8:	003faf06 	br	802198 <_fpadd_parts+0x48>
  8022dc:	0089c83a 	sub	r4,zero,r2
  8022e0:	00800044 	movi	r2,1
  8022e4:	30800115 	stw	r2,4(r6)
  8022e8:	32800215 	stw	r10,8(r6)
  8022ec:	31000315 	stw	r4,12(r6)
  8022f0:	003fbb06 	br	8021e0 <_fpadd_parts+0x90>
  8022f4:	583fb126 	beq	r11,zero,8021bc <_fpadd_parts+0x6c>
  8022f8:	41c4983a 	sll	r2,r8,r7
  8022fc:	61c6d83a 	srl	r3,r12,r7
  802300:	51d5883a 	add	r10,r10,r7
  802304:	10bfffc4 	addi	r2,r2,-1
  802308:	6084703a 	and	r2,r12,r2
  80230c:	1004c03a 	cmpne	r2,r2,zero
  802310:	1898b03a 	or	r12,r3,r2
  802314:	003fa906 	br	8021bc <_fpadd_parts+0x6c>
  802318:	11ffc31e 	bne	r2,r7,802228 <_fpadd_parts+0xd8>
  80231c:	28c00117 	ldw	r3,4(r5)
  802320:	20800117 	ldw	r2,4(r4)
  802324:	10ffc026 	beq	r2,r3,802228 <_fpadd_parts+0xd8>
  802328:	01002074 	movhi	r4,129
  80232c:	2107c604 	addi	r4,r4,7960
  802330:	003fbd06 	br	802228 <_fpadd_parts+0xd8>

00802334 <__subsf3>:
  802334:	deffef04 	addi	sp,sp,-68
  802338:	dcc00f15 	stw	r19,60(sp)
  80233c:	dcc00204 	addi	r19,sp,8
  802340:	dc400e15 	stw	r17,56(sp)
  802344:	d9000015 	stw	r4,0(sp)
  802348:	d9400115 	stw	r5,4(sp)
  80234c:	d809883a 	mov	r4,sp
  802350:	980b883a 	mov	r5,r19
  802354:	dc400604 	addi	r17,sp,24
  802358:	dfc01015 	stw	ra,64(sp)
  80235c:	080352c0 	call	80352c <__unpack_f>
  802360:	d9000104 	addi	r4,sp,4
  802364:	880b883a 	mov	r5,r17
  802368:	080352c0 	call	80352c <__unpack_f>
  80236c:	d8800717 	ldw	r2,28(sp)
  802370:	9809883a 	mov	r4,r19
  802374:	880b883a 	mov	r5,r17
  802378:	d9800a04 	addi	r6,sp,40
  80237c:	1080005c 	xori	r2,r2,1
  802380:	d8800715 	stw	r2,28(sp)
  802384:	08021500 	call	802150 <_fpadd_parts>
  802388:	1009883a 	mov	r4,r2
  80238c:	08033cc0 	call	8033cc <__pack_f>
  802390:	dfc01017 	ldw	ra,64(sp)
  802394:	dcc00f17 	ldw	r19,60(sp)
  802398:	dc400e17 	ldw	r17,56(sp)
  80239c:	dec01104 	addi	sp,sp,68
  8023a0:	f800283a 	ret

008023a4 <__addsf3>:
  8023a4:	deffef04 	addi	sp,sp,-68
  8023a8:	dcc00f15 	stw	r19,60(sp)
  8023ac:	dcc00204 	addi	r19,sp,8
  8023b0:	dc400e15 	stw	r17,56(sp)
  8023b4:	d9000015 	stw	r4,0(sp)
  8023b8:	d9400115 	stw	r5,4(sp)
  8023bc:	d809883a 	mov	r4,sp
  8023c0:	980b883a 	mov	r5,r19
  8023c4:	dc400604 	addi	r17,sp,24
  8023c8:	dfc01015 	stw	ra,64(sp)
  8023cc:	080352c0 	call	80352c <__unpack_f>
  8023d0:	d9000104 	addi	r4,sp,4
  8023d4:	880b883a 	mov	r5,r17
  8023d8:	080352c0 	call	80352c <__unpack_f>
  8023dc:	d9800a04 	addi	r6,sp,40
  8023e0:	9809883a 	mov	r4,r19
  8023e4:	880b883a 	mov	r5,r17
  8023e8:	08021500 	call	802150 <_fpadd_parts>
  8023ec:	1009883a 	mov	r4,r2
  8023f0:	08033cc0 	call	8033cc <__pack_f>
  8023f4:	dfc01017 	ldw	ra,64(sp)
  8023f8:	dcc00f17 	ldw	r19,60(sp)
  8023fc:	dc400e17 	ldw	r17,56(sp)
  802400:	dec01104 	addi	sp,sp,68
  802404:	f800283a 	ret

00802408 <__mulsf3>:
  802408:	deffef04 	addi	sp,sp,-68
  80240c:	dc400f15 	stw	r17,60(sp)
  802410:	dc400204 	addi	r17,sp,8
  802414:	dc000e15 	stw	r16,56(sp)
  802418:	d9000015 	stw	r4,0(sp)
  80241c:	d9400115 	stw	r5,4(sp)
  802420:	d809883a 	mov	r4,sp
  802424:	880b883a 	mov	r5,r17
  802428:	dc000604 	addi	r16,sp,24
  80242c:	dfc01015 	stw	ra,64(sp)
  802430:	080352c0 	call	80352c <__unpack_f>
  802434:	d9000104 	addi	r4,sp,4
  802438:	800b883a 	mov	r5,r16
  80243c:	080352c0 	call	80352c <__unpack_f>
  802440:	d9000217 	ldw	r4,8(sp)
  802444:	00800044 	movi	r2,1
  802448:	01400104 	movi	r5,4
  80244c:	1100142e 	bgeu	r2,r4,8024a0 <__mulsf3+0x98>
  802450:	d8c00617 	ldw	r3,24(sp)
  802454:	10c0052e 	bgeu	r2,r3,80246c <__mulsf3+0x64>
  802458:	21400f26 	beq	r4,r5,802498 <__mulsf3+0x90>
  80245c:	19405d26 	beq	r3,r5,8025d4 <__mulsf3+0x1cc>
  802460:	00800084 	movi	r2,2
  802464:	20800e26 	beq	r4,r2,8024a0 <__mulsf3+0x98>
  802468:	1880181e 	bne	r3,r2,8024cc <__mulsf3+0xc4>
  80246c:	d8c00717 	ldw	r3,28(sp)
  802470:	d8800317 	ldw	r2,12(sp)
  802474:	8009883a 	mov	r4,r16
  802478:	10c4c03a 	cmpne	r2,r2,r3
  80247c:	d8800715 	stw	r2,28(sp)
  802480:	08033cc0 	call	8033cc <__pack_f>
  802484:	dfc01017 	ldw	ra,64(sp)
  802488:	dc400f17 	ldw	r17,60(sp)
  80248c:	dc000e17 	ldw	r16,56(sp)
  802490:	dec01104 	addi	sp,sp,68
  802494:	f800283a 	ret
  802498:	00800084 	movi	r2,2
  80249c:	18804f26 	beq	r3,r2,8025dc <__mulsf3+0x1d4>
  8024a0:	d8800317 	ldw	r2,12(sp)
  8024a4:	d8c00717 	ldw	r3,28(sp)
  8024a8:	8809883a 	mov	r4,r17
  8024ac:	10c4c03a 	cmpne	r2,r2,r3
  8024b0:	d8800315 	stw	r2,12(sp)
  8024b4:	08033cc0 	call	8033cc <__pack_f>
  8024b8:	dfc01017 	ldw	ra,64(sp)
  8024bc:	dc400f17 	ldw	r17,60(sp)
  8024c0:	dc000e17 	ldw	r16,56(sp)
  8024c4:	dec01104 	addi	sp,sp,68
  8024c8:	f800283a 	ret
  8024cc:	d8800517 	ldw	r2,20(sp)
  8024d0:	da000917 	ldw	r8,36(sp)
  8024d4:	0013883a 	mov	r9,zero
  8024d8:	0007883a 	mov	r3,zero
  8024dc:	480f883a 	mov	r7,r9
  8024e0:	180b883a 	mov	r5,r3
  8024e4:	400d883a 	mov	r6,r8
  8024e8:	1009883a 	mov	r4,r2
  8024ec:	08020b80 	call	8020b8 <__muldi3>
  8024f0:	da800417 	ldw	r10,16(sp)
  8024f4:	d9800817 	ldw	r6,32(sp)
  8024f8:	da400317 	ldw	r9,12(sp)
  8024fc:	52800084 	addi	r10,r10,2
  802500:	3295883a 	add	r10,r6,r10
  802504:	d9800717 	ldw	r6,28(sp)
  802508:	180b883a 	mov	r5,r3
  80250c:	180f883a 	mov	r7,r3
  802510:	4992c03a 	cmpne	r9,r9,r6
  802514:	da400b15 	stw	r9,44(sp)
  802518:	1007883a 	mov	r3,r2
  80251c:	da800c15 	stw	r10,48(sp)
  802520:	2800070e 	bge	r5,zero,802540 <__mulsf3+0x138>
  802524:	2880004c 	andi	r2,r5,1
  802528:	1005003a 	cmpeq	r2,r2,zero
  80252c:	500d883a 	mov	r6,r10
  802530:	10001e26 	beq	r2,zero,8025ac <__mulsf3+0x1a4>
  802534:	380ed07a 	srli	r7,r7,1
  802538:	31800044 	addi	r6,r6,1
  80253c:	d9800c15 	stw	r6,48(sp)
  802540:	01100034 	movhi	r4,16384
  802544:	213fffc4 	addi	r4,r4,-1
  802548:	21c00b36 	bltu	r4,r7,802578 <__mulsf3+0x170>
  80254c:	d8800c17 	ldw	r2,48(sp)
  802550:	00000206 	br	80255c <__mulsf3+0x154>
  802554:	18c7883a 	add	r3,r3,r3
  802558:	21c00636 	bltu	r4,r7,802574 <__mulsf3+0x16c>
  80255c:	10bfffc4 	addi	r2,r2,-1
  802560:	39cf883a 	add	r7,r7,r7
  802564:	183ffb0e 	bge	r3,zero,802554 <__mulsf3+0x14c>
  802568:	39c00054 	ori	r7,r7,1
  80256c:	18c7883a 	add	r3,r3,r3
  802570:	21fffa2e 	bgeu	r4,r7,80255c <__mulsf3+0x154>
  802574:	d8800c15 	stw	r2,48(sp)
  802578:	39001fcc 	andi	r4,r7,127
  80257c:	00801004 	movi	r2,64
  802580:	20800d26 	beq	r4,r2,8025b8 <__mulsf3+0x1b0>
  802584:	008000c4 	movi	r2,3
  802588:	d9000a04 	addi	r4,sp,40
  80258c:	d9c00d15 	stw	r7,52(sp)
  802590:	d8800a15 	stw	r2,40(sp)
  802594:	08033cc0 	call	8033cc <__pack_f>
  802598:	dfc01017 	ldw	ra,64(sp)
  80259c:	dc400f17 	ldw	r17,60(sp)
  8025a0:	dc000e17 	ldw	r16,56(sp)
  8025a4:	dec01104 	addi	sp,sp,68
  8025a8:	f800283a 	ret
  8025ac:	1804d07a 	srli	r2,r3,1
  8025b0:	10e00034 	orhi	r3,r2,32768
  8025b4:	003fdf06 	br	802534 <__mulsf3+0x12c>
  8025b8:	3880200c 	andi	r2,r7,128
  8025bc:	103ff11e 	bne	r2,zero,802584 <__mulsf3+0x17c>
  8025c0:	183ff026 	beq	r3,zero,802584 <__mulsf3+0x17c>
  8025c4:	3907883a 	add	r3,r7,r4
  8025c8:	00bfe004 	movi	r2,-128
  8025cc:	188e703a 	and	r7,r3,r2
  8025d0:	003fec06 	br	802584 <__mulsf3+0x17c>
  8025d4:	00800084 	movi	r2,2
  8025d8:	20bfa41e 	bne	r4,r2,80246c <__mulsf3+0x64>
  8025dc:	01002074 	movhi	r4,129
  8025e0:	2107c604 	addi	r4,r4,7960
  8025e4:	003fb306 	br	8024b4 <__mulsf3+0xac>

008025e8 <__divsf3>:
  8025e8:	defff304 	addi	sp,sp,-52
  8025ec:	dc400b15 	stw	r17,44(sp)
  8025f0:	dc400204 	addi	r17,sp,8
  8025f4:	dc000a15 	stw	r16,40(sp)
  8025f8:	d9000015 	stw	r4,0(sp)
  8025fc:	d9400115 	stw	r5,4(sp)
  802600:	d809883a 	mov	r4,sp
  802604:	880b883a 	mov	r5,r17
  802608:	dc000604 	addi	r16,sp,24
  80260c:	dfc00c15 	stw	ra,48(sp)
  802610:	080352c0 	call	80352c <__unpack_f>
  802614:	d9000104 	addi	r4,sp,4
  802618:	800b883a 	mov	r5,r16
  80261c:	080352c0 	call	80352c <__unpack_f>
  802620:	d9000217 	ldw	r4,8(sp)
  802624:	00800044 	movi	r2,1
  802628:	01800104 	movi	r6,4
  80262c:	11000a2e 	bgeu	r2,r4,802658 <__divsf3+0x70>
  802630:	d9400617 	ldw	r5,24(sp)
  802634:	1140432e 	bgeu	r2,r5,802744 <__divsf3+0x15c>
  802638:	d8800317 	ldw	r2,12(sp)
  80263c:	d8c00717 	ldw	r3,28(sp)
  802640:	10c4f03a 	xor	r2,r2,r3
  802644:	d8800315 	stw	r2,12(sp)
  802648:	21800226 	beq	r4,r6,802654 <__divsf3+0x6c>
  80264c:	00800084 	movi	r2,2
  802650:	2080101e 	bne	r4,r2,802694 <__divsf3+0xac>
  802654:	29000726 	beq	r5,r4,802674 <__divsf3+0x8c>
  802658:	8809883a 	mov	r4,r17
  80265c:	08033cc0 	call	8033cc <__pack_f>
  802660:	dfc00c17 	ldw	ra,48(sp)
  802664:	dc400b17 	ldw	r17,44(sp)
  802668:	dc000a17 	ldw	r16,40(sp)
  80266c:	dec00d04 	addi	sp,sp,52
  802670:	f800283a 	ret
  802674:	01002074 	movhi	r4,129
  802678:	2107c604 	addi	r4,r4,7960
  80267c:	08033cc0 	call	8033cc <__pack_f>
  802680:	dfc00c17 	ldw	ra,48(sp)
  802684:	dc400b17 	ldw	r17,44(sp)
  802688:	dc000a17 	ldw	r16,40(sp)
  80268c:	dec00d04 	addi	sp,sp,52
  802690:	f800283a 	ret
  802694:	29802d26 	beq	r5,r6,80274c <__divsf3+0x164>
  802698:	28801a26 	beq	r5,r2,802704 <__divsf3+0x11c>
  80269c:	d8c00417 	ldw	r3,16(sp)
  8026a0:	d8800817 	ldw	r2,32(sp)
  8026a4:	d9000517 	ldw	r4,20(sp)
  8026a8:	d9800917 	ldw	r6,36(sp)
  8026ac:	1885c83a 	sub	r2,r3,r2
  8026b0:	d8800415 	stw	r2,16(sp)
  8026b4:	2180032e 	bgeu	r4,r6,8026c4 <__divsf3+0xdc>
  8026b8:	10bfffc4 	addi	r2,r2,-1
  8026bc:	d8800415 	stw	r2,16(sp)
  8026c0:	2109883a 	add	r4,r4,r4
  8026c4:	01500034 	movhi	r5,16384
  8026c8:	0007883a 	mov	r3,zero
  8026cc:	0005883a 	mov	r2,zero
  8026d0:	01c007c4 	movi	r7,31
  8026d4:	10800044 	addi	r2,r2,1
  8026d8:	21800236 	bltu	r4,r6,8026e4 <__divsf3+0xfc>
  8026dc:	1946b03a 	or	r3,r3,r5
  8026e0:	2189c83a 	sub	r4,r4,r6
  8026e4:	280ad07a 	srli	r5,r5,1
  8026e8:	2109883a 	add	r4,r4,r4
  8026ec:	11fff91e 	bne	r2,r7,8026d4 <__divsf3+0xec>
  8026f0:	19401fcc 	andi	r5,r3,127
  8026f4:	00801004 	movi	r2,64
  8026f8:	28800a26 	beq	r5,r2,802724 <__divsf3+0x13c>
  8026fc:	d8c00515 	stw	r3,20(sp)
  802700:	003fd506 	br	802658 <__divsf3+0x70>
  802704:	8809883a 	mov	r4,r17
  802708:	d9800215 	stw	r6,8(sp)
  80270c:	08033cc0 	call	8033cc <__pack_f>
  802710:	dfc00c17 	ldw	ra,48(sp)
  802714:	dc400b17 	ldw	r17,44(sp)
  802718:	dc000a17 	ldw	r16,40(sp)
  80271c:	dec00d04 	addi	sp,sp,52
  802720:	f800283a 	ret
  802724:	1880200c 	andi	r2,r3,128
  802728:	103ff41e 	bne	r2,zero,8026fc <__divsf3+0x114>
  80272c:	203ff326 	beq	r4,zero,8026fc <__divsf3+0x114>
  802730:	1947883a 	add	r3,r3,r5
  802734:	00bfe004 	movi	r2,-128
  802738:	1886703a 	and	r3,r3,r2
  80273c:	d8c00515 	stw	r3,20(sp)
  802740:	003fc506 	br	802658 <__divsf3+0x70>
  802744:	8009883a 	mov	r4,r16
  802748:	003fc406 	br	80265c <__divsf3+0x74>
  80274c:	8809883a 	mov	r4,r17
  802750:	d8000515 	stw	zero,20(sp)
  802754:	d8000415 	stw	zero,16(sp)
  802758:	003fc006 	br	80265c <__divsf3+0x74>

0080275c <__eqsf2>:
  80275c:	defff304 	addi	sp,sp,-52
  802760:	dc400b15 	stw	r17,44(sp)
  802764:	dc400204 	addi	r17,sp,8
  802768:	dc000a15 	stw	r16,40(sp)
  80276c:	d9000015 	stw	r4,0(sp)
  802770:	d9400115 	stw	r5,4(sp)
  802774:	d809883a 	mov	r4,sp
  802778:	880b883a 	mov	r5,r17
  80277c:	dc000604 	addi	r16,sp,24
  802780:	dfc00c15 	stw	ra,48(sp)
  802784:	080352c0 	call	80352c <__unpack_f>
  802788:	d9000104 	addi	r4,sp,4
  80278c:	800b883a 	mov	r5,r16
  802790:	080352c0 	call	80352c <__unpack_f>
  802794:	d8800217 	ldw	r2,8(sp)
  802798:	00c00044 	movi	r3,1
  80279c:	180d883a 	mov	r6,r3
  8027a0:	1880062e 	bgeu	r3,r2,8027bc <__eqsf2+0x60>
  8027a4:	d8800617 	ldw	r2,24(sp)
  8027a8:	8809883a 	mov	r4,r17
  8027ac:	800b883a 	mov	r5,r16
  8027b0:	1880022e 	bgeu	r3,r2,8027bc <__eqsf2+0x60>
  8027b4:	08035f40 	call	8035f4 <__fpcmp_parts_f>
  8027b8:	100d883a 	mov	r6,r2
  8027bc:	3005883a 	mov	r2,r6
  8027c0:	dfc00c17 	ldw	ra,48(sp)
  8027c4:	dc400b17 	ldw	r17,44(sp)
  8027c8:	dc000a17 	ldw	r16,40(sp)
  8027cc:	dec00d04 	addi	sp,sp,52
  8027d0:	f800283a 	ret

008027d4 <__gtsf2>:
  8027d4:	defff304 	addi	sp,sp,-52
  8027d8:	dc400b15 	stw	r17,44(sp)
  8027dc:	dc400204 	addi	r17,sp,8
  8027e0:	dc000a15 	stw	r16,40(sp)
  8027e4:	d9000015 	stw	r4,0(sp)
  8027e8:	d9400115 	stw	r5,4(sp)
  8027ec:	d809883a 	mov	r4,sp
  8027f0:	880b883a 	mov	r5,r17
  8027f4:	dc000604 	addi	r16,sp,24
  8027f8:	dfc00c15 	stw	ra,48(sp)
  8027fc:	080352c0 	call	80352c <__unpack_f>
  802800:	d9000104 	addi	r4,sp,4
  802804:	800b883a 	mov	r5,r16
  802808:	080352c0 	call	80352c <__unpack_f>
  80280c:	d8800217 	ldw	r2,8(sp)
  802810:	00c00044 	movi	r3,1
  802814:	01bfffc4 	movi	r6,-1
  802818:	1880062e 	bgeu	r3,r2,802834 <__gtsf2+0x60>
  80281c:	d8800617 	ldw	r2,24(sp)
  802820:	8809883a 	mov	r4,r17
  802824:	800b883a 	mov	r5,r16
  802828:	1880022e 	bgeu	r3,r2,802834 <__gtsf2+0x60>
  80282c:	08035f40 	call	8035f4 <__fpcmp_parts_f>
  802830:	100d883a 	mov	r6,r2
  802834:	3005883a 	mov	r2,r6
  802838:	dfc00c17 	ldw	ra,48(sp)
  80283c:	dc400b17 	ldw	r17,44(sp)
  802840:	dc000a17 	ldw	r16,40(sp)
  802844:	dec00d04 	addi	sp,sp,52
  802848:	f800283a 	ret

0080284c <__ltsf2>:
  80284c:	defff304 	addi	sp,sp,-52
  802850:	dc400b15 	stw	r17,44(sp)
  802854:	dc400204 	addi	r17,sp,8
  802858:	dc000a15 	stw	r16,40(sp)
  80285c:	d9000015 	stw	r4,0(sp)
  802860:	d9400115 	stw	r5,4(sp)
  802864:	d809883a 	mov	r4,sp
  802868:	880b883a 	mov	r5,r17
  80286c:	dc000604 	addi	r16,sp,24
  802870:	dfc00c15 	stw	ra,48(sp)
  802874:	080352c0 	call	80352c <__unpack_f>
  802878:	d9000104 	addi	r4,sp,4
  80287c:	800b883a 	mov	r5,r16
  802880:	080352c0 	call	80352c <__unpack_f>
  802884:	d8800217 	ldw	r2,8(sp)
  802888:	00c00044 	movi	r3,1
  80288c:	180d883a 	mov	r6,r3
  802890:	1880062e 	bgeu	r3,r2,8028ac <__ltsf2+0x60>
  802894:	d8800617 	ldw	r2,24(sp)
  802898:	8809883a 	mov	r4,r17
  80289c:	800b883a 	mov	r5,r16
  8028a0:	1880022e 	bgeu	r3,r2,8028ac <__ltsf2+0x60>
  8028a4:	08035f40 	call	8035f4 <__fpcmp_parts_f>
  8028a8:	100d883a 	mov	r6,r2
  8028ac:	3005883a 	mov	r2,r6
  8028b0:	dfc00c17 	ldw	ra,48(sp)
  8028b4:	dc400b17 	ldw	r17,44(sp)
  8028b8:	dc000a17 	ldw	r16,40(sp)
  8028bc:	dec00d04 	addi	sp,sp,52
  8028c0:	f800283a 	ret

008028c4 <__lesf2>:
  8028c4:	defff304 	addi	sp,sp,-52
  8028c8:	dc400b15 	stw	r17,44(sp)
  8028cc:	dc400204 	addi	r17,sp,8
  8028d0:	dc000a15 	stw	r16,40(sp)
  8028d4:	d9000015 	stw	r4,0(sp)
  8028d8:	d9400115 	stw	r5,4(sp)
  8028dc:	d809883a 	mov	r4,sp
  8028e0:	880b883a 	mov	r5,r17
  8028e4:	dc000604 	addi	r16,sp,24
  8028e8:	dfc00c15 	stw	ra,48(sp)
  8028ec:	080352c0 	call	80352c <__unpack_f>
  8028f0:	d9000104 	addi	r4,sp,4
  8028f4:	800b883a 	mov	r5,r16
  8028f8:	080352c0 	call	80352c <__unpack_f>
  8028fc:	d8800217 	ldw	r2,8(sp)
  802900:	00c00044 	movi	r3,1
  802904:	180d883a 	mov	r6,r3
  802908:	1880062e 	bgeu	r3,r2,802924 <__lesf2+0x60>
  80290c:	d8800617 	ldw	r2,24(sp)
  802910:	8809883a 	mov	r4,r17
  802914:	800b883a 	mov	r5,r16
  802918:	1880022e 	bgeu	r3,r2,802924 <__lesf2+0x60>
  80291c:	08035f40 	call	8035f4 <__fpcmp_parts_f>
  802920:	100d883a 	mov	r6,r2
  802924:	3005883a 	mov	r2,r6
  802928:	dfc00c17 	ldw	ra,48(sp)
  80292c:	dc400b17 	ldw	r17,44(sp)
  802930:	dc000a17 	ldw	r16,40(sp)
  802934:	dec00d04 	addi	sp,sp,52
  802938:	f800283a 	ret

0080293c <__floatsisf>:
  80293c:	2006d7fa 	srli	r3,r4,31
  802940:	defffa04 	addi	sp,sp,-24
  802944:	008000c4 	movi	r2,3
  802948:	dfc00515 	stw	ra,20(sp)
  80294c:	dc000415 	stw	r16,16(sp)
  802950:	d8800015 	stw	r2,0(sp)
  802954:	d8c00115 	stw	r3,4(sp)
  802958:	2000081e 	bne	r4,zero,80297c <__floatsisf+0x40>
  80295c:	00800084 	movi	r2,2
  802960:	d8800015 	stw	r2,0(sp)
  802964:	d809883a 	mov	r4,sp
  802968:	08033cc0 	call	8033cc <__pack_f>
  80296c:	dfc00517 	ldw	ra,20(sp)
  802970:	dc000417 	ldw	r16,16(sp)
  802974:	dec00604 	addi	sp,sp,24
  802978:	f800283a 	ret
  80297c:	00800784 	movi	r2,30
  802980:	1807003a 	cmpeq	r3,r3,zero
  802984:	d8800215 	stw	r2,8(sp)
  802988:	18000e1e 	bne	r3,zero,8029c4 <__floatsisf+0x88>
  80298c:	00a00034 	movhi	r2,32768
  802990:	20800e26 	beq	r4,r2,8029cc <__floatsisf+0x90>
  802994:	0121c83a 	sub	r16,zero,r4
  802998:	8009883a 	mov	r4,r16
  80299c:	dc000315 	stw	r16,12(sp)
  8029a0:	080334c0 	call	80334c <__clzsi2>
  8029a4:	117fffc4 	addi	r5,r2,-1
  8029a8:	017fee0e 	bge	zero,r5,802964 <__floatsisf+0x28>
  8029ac:	d8800217 	ldw	r2,8(sp)
  8029b0:	8146983a 	sll	r3,r16,r5
  8029b4:	1145c83a 	sub	r2,r2,r5
  8029b8:	d8c00315 	stw	r3,12(sp)
  8029bc:	d8800215 	stw	r2,8(sp)
  8029c0:	003fe806 	br	802964 <__floatsisf+0x28>
  8029c4:	2021883a 	mov	r16,r4
  8029c8:	003ff306 	br	802998 <__floatsisf+0x5c>
  8029cc:	00b3c034 	movhi	r2,52992
  8029d0:	003fe606 	br	80296c <__floatsisf+0x30>

008029d4 <__fixsfsi>:
  8029d4:	defffa04 	addi	sp,sp,-24
  8029d8:	d9000015 	stw	r4,0(sp)
  8029dc:	d9400104 	addi	r5,sp,4
  8029e0:	d809883a 	mov	r4,sp
  8029e4:	dfc00515 	stw	ra,20(sp)
  8029e8:	080352c0 	call	80352c <__unpack_f>
  8029ec:	d8c00117 	ldw	r3,4(sp)
  8029f0:	00800084 	movi	r2,2
  8029f4:	1880041e 	bne	r3,r2,802a08 <__fixsfsi+0x34>
  8029f8:	0005883a 	mov	r2,zero
  8029fc:	dfc00517 	ldw	ra,20(sp)
  802a00:	dec00604 	addi	sp,sp,24
  802a04:	f800283a 	ret
  802a08:	00800044 	movi	r2,1
  802a0c:	10fffa2e 	bgeu	r2,r3,8029f8 <__fixsfsi+0x24>
  802a10:	00800104 	movi	r2,4
  802a14:	18800426 	beq	r3,r2,802a28 <__fixsfsi+0x54>
  802a18:	d8800317 	ldw	r2,12(sp)
  802a1c:	103ff616 	blt	r2,zero,8029f8 <__fixsfsi+0x24>
  802a20:	00c00784 	movi	r3,30
  802a24:	1880070e 	bge	r3,r2,802a44 <__fixsfsi+0x70>
  802a28:	d8800217 	ldw	r2,8(sp)
  802a2c:	10000c1e 	bne	r2,zero,802a60 <__fixsfsi+0x8c>
  802a30:	00a00034 	movhi	r2,32768
  802a34:	10bfffc4 	addi	r2,r2,-1
  802a38:	dfc00517 	ldw	ra,20(sp)
  802a3c:	dec00604 	addi	sp,sp,24
  802a40:	f800283a 	ret
  802a44:	1885c83a 	sub	r2,r3,r2
  802a48:	d9000217 	ldw	r4,8(sp)
  802a4c:	d8c00417 	ldw	r3,16(sp)
  802a50:	1884d83a 	srl	r2,r3,r2
  802a54:	203fe926 	beq	r4,zero,8029fc <__fixsfsi+0x28>
  802a58:	0085c83a 	sub	r2,zero,r2
  802a5c:	003fe706 	br	8029fc <__fixsfsi+0x28>
  802a60:	00a00034 	movhi	r2,32768
  802a64:	003fe506 	br	8029fc <__fixsfsi+0x28>

00802a68 <__extendsfdf2>:
  802a68:	defff904 	addi	sp,sp,-28
  802a6c:	d9000115 	stw	r4,4(sp)
  802a70:	d9400204 	addi	r5,sp,8
  802a74:	d9000104 	addi	r4,sp,4
  802a78:	dfc00615 	stw	ra,24(sp)
  802a7c:	080352c0 	call	80352c <__unpack_f>
  802a80:	d9c00517 	ldw	r7,20(sp)
  802a84:	0011883a 	mov	r8,zero
  802a88:	400697ba 	slli	r3,r8,30
  802a8c:	3812d0ba 	srli	r9,r7,2
  802a90:	380497ba 	slli	r2,r7,30
  802a94:	d9000217 	ldw	r4,8(sp)
  802a98:	d9400317 	ldw	r5,12(sp)
  802a9c:	d9800417 	ldw	r6,16(sp)
  802aa0:	48c6b03a 	or	r3,r9,r3
  802aa4:	100f883a 	mov	r7,r2
  802aa8:	d8c00015 	stw	r3,0(sp)
  802aac:	08032a00 	call	8032a0 <__make_dp>
  802ab0:	dfc00617 	ldw	ra,24(sp)
  802ab4:	dec00704 	addi	sp,sp,28
  802ab8:	f800283a 	ret

00802abc <_fpadd_parts>:
  802abc:	defff804 	addi	sp,sp,-32
  802ac0:	dcc00315 	stw	r19,12(sp)
  802ac4:	2027883a 	mov	r19,r4
  802ac8:	21000017 	ldw	r4,0(r4)
  802acc:	00c00044 	movi	r3,1
  802ad0:	dd400515 	stw	r21,20(sp)
  802ad4:	dd000415 	stw	r20,16(sp)
  802ad8:	ddc00715 	stw	r23,28(sp)
  802adc:	dd800615 	stw	r22,24(sp)
  802ae0:	dc800215 	stw	r18,8(sp)
  802ae4:	dc400115 	stw	r17,4(sp)
  802ae8:	dc000015 	stw	r16,0(sp)
  802aec:	282b883a 	mov	r21,r5
  802af0:	3029883a 	mov	r20,r6
  802af4:	1900632e 	bgeu	r3,r4,802c84 <_fpadd_parts+0x1c8>
  802af8:	28800017 	ldw	r2,0(r5)
  802afc:	1880812e 	bgeu	r3,r2,802d04 <_fpadd_parts+0x248>
  802b00:	00c00104 	movi	r3,4
  802b04:	20c0dc26 	beq	r4,r3,802e78 <_fpadd_parts+0x3bc>
  802b08:	10c07e26 	beq	r2,r3,802d04 <_fpadd_parts+0x248>
  802b0c:	00c00084 	movi	r3,2
  802b10:	10c06726 	beq	r2,r3,802cb0 <_fpadd_parts+0x1f4>
  802b14:	20c07b26 	beq	r4,r3,802d04 <_fpadd_parts+0x248>
  802b18:	9dc00217 	ldw	r23,8(r19)
  802b1c:	28c00217 	ldw	r3,8(r5)
  802b20:	9c400317 	ldw	r17,12(r19)
  802b24:	2bc00317 	ldw	r15,12(r5)
  802b28:	b8cdc83a 	sub	r6,r23,r3
  802b2c:	9c800417 	ldw	r18,16(r19)
  802b30:	2c000417 	ldw	r16,16(r5)
  802b34:	3009883a 	mov	r4,r6
  802b38:	30009716 	blt	r6,zero,802d98 <_fpadd_parts+0x2dc>
  802b3c:	00800fc4 	movi	r2,63
  802b40:	11806b16 	blt	r2,r6,802cf0 <_fpadd_parts+0x234>
  802b44:	0100a40e 	bge	zero,r4,802dd8 <_fpadd_parts+0x31c>
  802b48:	35bff804 	addi	r22,r6,-32
  802b4c:	b000bc16 	blt	r22,zero,802e40 <_fpadd_parts+0x384>
  802b50:	8596d83a 	srl	r11,r16,r22
  802b54:	0019883a 	mov	r12,zero
  802b58:	0013883a 	mov	r9,zero
  802b5c:	01000044 	movi	r4,1
  802b60:	0015883a 	mov	r10,zero
  802b64:	b000be16 	blt	r22,zero,802e60 <_fpadd_parts+0x3a4>
  802b68:	2590983a 	sll	r8,r4,r22
  802b6c:	000f883a 	mov	r7,zero
  802b70:	00bfffc4 	movi	r2,-1
  802b74:	3889883a 	add	r4,r7,r2
  802b78:	408b883a 	add	r5,r8,r2
  802b7c:	21cd803a 	cmpltu	r6,r4,r7
  802b80:	314b883a 	add	r5,r6,r5
  802b84:	7904703a 	and	r2,r15,r4
  802b88:	8146703a 	and	r3,r16,r5
  802b8c:	10c4b03a 	or	r2,r2,r3
  802b90:	10000226 	beq	r2,zero,802b9c <_fpadd_parts+0xe0>
  802b94:	02400044 	movi	r9,1
  802b98:	0015883a 	mov	r10,zero
  802b9c:	5a5eb03a 	or	r15,r11,r9
  802ba0:	62a0b03a 	or	r16,r12,r10
  802ba4:	99400117 	ldw	r5,4(r19)
  802ba8:	a8800117 	ldw	r2,4(r21)
  802bac:	28806e26 	beq	r5,r2,802d68 <_fpadd_parts+0x2ac>
  802bb0:	28006626 	beq	r5,zero,802d4c <_fpadd_parts+0x290>
  802bb4:	7c45c83a 	sub	r2,r15,r17
  802bb8:	7889803a 	cmpltu	r4,r15,r2
  802bbc:	8487c83a 	sub	r3,r16,r18
  802bc0:	1909c83a 	sub	r4,r3,r4
  802bc4:	100d883a 	mov	r6,r2
  802bc8:	200f883a 	mov	r7,r4
  802bcc:	38007716 	blt	r7,zero,802dac <_fpadd_parts+0x2f0>
  802bd0:	a5c00215 	stw	r23,8(r20)
  802bd4:	a1c00415 	stw	r7,16(r20)
  802bd8:	a0000115 	stw	zero,4(r20)
  802bdc:	a1800315 	stw	r6,12(r20)
  802be0:	a2000317 	ldw	r8,12(r20)
  802be4:	a2400417 	ldw	r9,16(r20)
  802be8:	00bfffc4 	movi	r2,-1
  802bec:	408b883a 	add	r5,r8,r2
  802bf0:	2a09803a 	cmpltu	r4,r5,r8
  802bf4:	488d883a 	add	r6,r9,r2
  802bf8:	01c40034 	movhi	r7,4096
  802bfc:	39ffffc4 	addi	r7,r7,-1
  802c00:	218d883a 	add	r6,r4,r6
  802c04:	39801736 	bltu	r7,r6,802c64 <_fpadd_parts+0x1a8>
  802c08:	31c06526 	beq	r6,r7,802da0 <_fpadd_parts+0x2e4>
  802c0c:	a3000217 	ldw	r12,8(r20)
  802c10:	4209883a 	add	r4,r8,r8
  802c14:	00bfffc4 	movi	r2,-1
  802c18:	220f803a 	cmpltu	r7,r4,r8
  802c1c:	4a4b883a 	add	r5,r9,r9
  802c20:	394f883a 	add	r7,r7,r5
  802c24:	2095883a 	add	r10,r4,r2
  802c28:	3897883a 	add	r11,r7,r2
  802c2c:	510d803a 	cmpltu	r6,r10,r4
  802c30:	6099883a 	add	r12,r12,r2
  802c34:	32d7883a 	add	r11,r6,r11
  802c38:	00840034 	movhi	r2,4096
  802c3c:	10bfffc4 	addi	r2,r2,-1
  802c40:	2011883a 	mov	r8,r4
  802c44:	3813883a 	mov	r9,r7
  802c48:	a1000315 	stw	r4,12(r20)
  802c4c:	a1c00415 	stw	r7,16(r20)
  802c50:	a3000215 	stw	r12,8(r20)
  802c54:	12c00336 	bltu	r2,r11,802c64 <_fpadd_parts+0x1a8>
  802c58:	58bfed1e 	bne	r11,r2,802c10 <_fpadd_parts+0x154>
  802c5c:	00bfff84 	movi	r2,-2
  802c60:	12bfeb2e 	bgeu	r2,r10,802c10 <_fpadd_parts+0x154>
  802c64:	a2800417 	ldw	r10,16(r20)
  802c68:	008000c4 	movi	r2,3
  802c6c:	00c80034 	movhi	r3,8192
  802c70:	18ffffc4 	addi	r3,r3,-1
  802c74:	a2400317 	ldw	r9,12(r20)
  802c78:	a0800015 	stw	r2,0(r20)
  802c7c:	1a802336 	bltu	r3,r10,802d0c <_fpadd_parts+0x250>
  802c80:	a027883a 	mov	r19,r20
  802c84:	9805883a 	mov	r2,r19
  802c88:	ddc00717 	ldw	r23,28(sp)
  802c8c:	dd800617 	ldw	r22,24(sp)
  802c90:	dd400517 	ldw	r21,20(sp)
  802c94:	dd000417 	ldw	r20,16(sp)
  802c98:	dcc00317 	ldw	r19,12(sp)
  802c9c:	dc800217 	ldw	r18,8(sp)
  802ca0:	dc400117 	ldw	r17,4(sp)
  802ca4:	dc000017 	ldw	r16,0(sp)
  802ca8:	dec00804 	addi	sp,sp,32
  802cac:	f800283a 	ret
  802cb0:	20fff41e 	bne	r4,r3,802c84 <_fpadd_parts+0x1c8>
  802cb4:	31000015 	stw	r4,0(r6)
  802cb8:	98800117 	ldw	r2,4(r19)
  802cbc:	30800115 	stw	r2,4(r6)
  802cc0:	98c00217 	ldw	r3,8(r19)
  802cc4:	30c00215 	stw	r3,8(r6)
  802cc8:	98800317 	ldw	r2,12(r19)
  802ccc:	30800315 	stw	r2,12(r6)
  802cd0:	98c00417 	ldw	r3,16(r19)
  802cd4:	30c00415 	stw	r3,16(r6)
  802cd8:	98800117 	ldw	r2,4(r19)
  802cdc:	28c00117 	ldw	r3,4(r5)
  802ce0:	3027883a 	mov	r19,r6
  802ce4:	10c4703a 	and	r2,r2,r3
  802ce8:	30800115 	stw	r2,4(r6)
  802cec:	003fe506 	br	802c84 <_fpadd_parts+0x1c8>
  802cf0:	1dc02616 	blt	r3,r23,802d8c <_fpadd_parts+0x2d0>
  802cf4:	0023883a 	mov	r17,zero
  802cf8:	182f883a 	mov	r23,r3
  802cfc:	0025883a 	mov	r18,zero
  802d00:	003fa806 	br	802ba4 <_fpadd_parts+0xe8>
  802d04:	a827883a 	mov	r19,r21
  802d08:	003fde06 	br	802c84 <_fpadd_parts+0x1c8>
  802d0c:	01800044 	movi	r6,1
  802d10:	500497fa 	slli	r2,r10,31
  802d14:	4808d07a 	srli	r4,r9,1
  802d18:	518ad83a 	srl	r5,r10,r6
  802d1c:	a2000217 	ldw	r8,8(r20)
  802d20:	1108b03a 	or	r4,r2,r4
  802d24:	0007883a 	mov	r3,zero
  802d28:	4984703a 	and	r2,r9,r6
  802d2c:	208cb03a 	or	r6,r4,r2
  802d30:	28ceb03a 	or	r7,r5,r3
  802d34:	42000044 	addi	r8,r8,1
  802d38:	a027883a 	mov	r19,r20
  802d3c:	a1c00415 	stw	r7,16(r20)
  802d40:	a2000215 	stw	r8,8(r20)
  802d44:	a1800315 	stw	r6,12(r20)
  802d48:	003fce06 	br	802c84 <_fpadd_parts+0x1c8>
  802d4c:	8bc5c83a 	sub	r2,r17,r15
  802d50:	8889803a 	cmpltu	r4,r17,r2
  802d54:	9407c83a 	sub	r3,r18,r16
  802d58:	1909c83a 	sub	r4,r3,r4
  802d5c:	100d883a 	mov	r6,r2
  802d60:	200f883a 	mov	r7,r4
  802d64:	003f9906 	br	802bcc <_fpadd_parts+0x110>
  802d68:	7c45883a 	add	r2,r15,r17
  802d6c:	13c9803a 	cmpltu	r4,r2,r15
  802d70:	8487883a 	add	r3,r16,r18
  802d74:	20c9883a 	add	r4,r4,r3
  802d78:	a1400115 	stw	r5,4(r20)
  802d7c:	a5c00215 	stw	r23,8(r20)
  802d80:	a0800315 	stw	r2,12(r20)
  802d84:	a1000415 	stw	r4,16(r20)
  802d88:	003fb606 	br	802c64 <_fpadd_parts+0x1a8>
  802d8c:	001f883a 	mov	r15,zero
  802d90:	0021883a 	mov	r16,zero
  802d94:	003f8306 	br	802ba4 <_fpadd_parts+0xe8>
  802d98:	018dc83a 	sub	r6,zero,r6
  802d9c:	003f6706 	br	802b3c <_fpadd_parts+0x80>
  802da0:	00bfff84 	movi	r2,-2
  802da4:	117faf36 	bltu	r2,r5,802c64 <_fpadd_parts+0x1a8>
  802da8:	003f9806 	br	802c0c <_fpadd_parts+0x150>
  802dac:	0005883a 	mov	r2,zero
  802db0:	1189c83a 	sub	r4,r2,r6
  802db4:	1105803a 	cmpltu	r2,r2,r4
  802db8:	01cbc83a 	sub	r5,zero,r7
  802dbc:	2885c83a 	sub	r2,r5,r2
  802dc0:	01800044 	movi	r6,1
  802dc4:	a1800115 	stw	r6,4(r20)
  802dc8:	a5c00215 	stw	r23,8(r20)
  802dcc:	a1000315 	stw	r4,12(r20)
  802dd0:	a0800415 	stw	r2,16(r20)
  802dd4:	003f8206 	br	802be0 <_fpadd_parts+0x124>
  802dd8:	203f7226 	beq	r4,zero,802ba4 <_fpadd_parts+0xe8>
  802ddc:	35bff804 	addi	r22,r6,-32
  802de0:	b9af883a 	add	r23,r23,r6
  802de4:	b0003116 	blt	r22,zero,802eac <_fpadd_parts+0x3f0>
  802de8:	959ad83a 	srl	r13,r18,r22
  802dec:	001d883a 	mov	r14,zero
  802df0:	000f883a 	mov	r7,zero
  802df4:	01000044 	movi	r4,1
  802df8:	0011883a 	mov	r8,zero
  802dfc:	b0002516 	blt	r22,zero,802e94 <_fpadd_parts+0x3d8>
  802e00:	2594983a 	sll	r10,r4,r22
  802e04:	0013883a 	mov	r9,zero
  802e08:	00bfffc4 	movi	r2,-1
  802e0c:	4889883a 	add	r4,r9,r2
  802e10:	508b883a 	add	r5,r10,r2
  802e14:	224d803a 	cmpltu	r6,r4,r9
  802e18:	314b883a 	add	r5,r6,r5
  802e1c:	8904703a 	and	r2,r17,r4
  802e20:	9146703a 	and	r3,r18,r5
  802e24:	10c4b03a 	or	r2,r2,r3
  802e28:	10000226 	beq	r2,zero,802e34 <_fpadd_parts+0x378>
  802e2c:	01c00044 	movi	r7,1
  802e30:	0011883a 	mov	r8,zero
  802e34:	69e2b03a 	or	r17,r13,r7
  802e38:	7224b03a 	or	r18,r14,r8
  802e3c:	003f5906 	br	802ba4 <_fpadd_parts+0xe8>
  802e40:	8407883a 	add	r3,r16,r16
  802e44:	008007c4 	movi	r2,31
  802e48:	1185c83a 	sub	r2,r2,r6
  802e4c:	1886983a 	sll	r3,r3,r2
  802e50:	7996d83a 	srl	r11,r15,r6
  802e54:	8198d83a 	srl	r12,r16,r6
  802e58:	1ad6b03a 	or	r11,r3,r11
  802e5c:	003f3e06 	br	802b58 <_fpadd_parts+0x9c>
  802e60:	2006d07a 	srli	r3,r4,1
  802e64:	008007c4 	movi	r2,31
  802e68:	1185c83a 	sub	r2,r2,r6
  802e6c:	1890d83a 	srl	r8,r3,r2
  802e70:	218e983a 	sll	r7,r4,r6
  802e74:	003f3e06 	br	802b70 <_fpadd_parts+0xb4>
  802e78:	113f821e 	bne	r2,r4,802c84 <_fpadd_parts+0x1c8>
  802e7c:	28c00117 	ldw	r3,4(r5)
  802e80:	98800117 	ldw	r2,4(r19)
  802e84:	10ff7f26 	beq	r2,r3,802c84 <_fpadd_parts+0x1c8>
  802e88:	04c02074 	movhi	r19,129
  802e8c:	9cc7ca04 	addi	r19,r19,7976
  802e90:	003f7c06 	br	802c84 <_fpadd_parts+0x1c8>
  802e94:	2006d07a 	srli	r3,r4,1
  802e98:	008007c4 	movi	r2,31
  802e9c:	1185c83a 	sub	r2,r2,r6
  802ea0:	1894d83a 	srl	r10,r3,r2
  802ea4:	2192983a 	sll	r9,r4,r6
  802ea8:	003fd706 	br	802e08 <_fpadd_parts+0x34c>
  802eac:	9487883a 	add	r3,r18,r18
  802eb0:	008007c4 	movi	r2,31
  802eb4:	1185c83a 	sub	r2,r2,r6
  802eb8:	1886983a 	sll	r3,r3,r2
  802ebc:	899ad83a 	srl	r13,r17,r6
  802ec0:	919cd83a 	srl	r14,r18,r6
  802ec4:	1b5ab03a 	or	r13,r3,r13
  802ec8:	003fc906 	br	802df0 <_fpadd_parts+0x334>

00802ecc <__subdf3>:
  802ecc:	deffea04 	addi	sp,sp,-88
  802ed0:	dcc01415 	stw	r19,80(sp)
  802ed4:	dcc00404 	addi	r19,sp,16
  802ed8:	2011883a 	mov	r8,r4
  802edc:	2813883a 	mov	r9,r5
  802ee0:	dc401315 	stw	r17,76(sp)
  802ee4:	d809883a 	mov	r4,sp
  802ee8:	980b883a 	mov	r5,r19
  802eec:	dc400904 	addi	r17,sp,36
  802ef0:	dfc01515 	stw	ra,84(sp)
  802ef4:	da400115 	stw	r9,4(sp)
  802ef8:	d9c00315 	stw	r7,12(sp)
  802efc:	da000015 	stw	r8,0(sp)
  802f00:	d9800215 	stw	r6,8(sp)
  802f04:	08039dc0 	call	8039dc <__unpack_d>
  802f08:	d9000204 	addi	r4,sp,8
  802f0c:	880b883a 	mov	r5,r17
  802f10:	08039dc0 	call	8039dc <__unpack_d>
  802f14:	d8800a17 	ldw	r2,40(sp)
  802f18:	880b883a 	mov	r5,r17
  802f1c:	9809883a 	mov	r4,r19
  802f20:	d9800e04 	addi	r6,sp,56
  802f24:	1080005c 	xori	r2,r2,1
  802f28:	d8800a15 	stw	r2,40(sp)
  802f2c:	0802abc0 	call	802abc <_fpadd_parts>
  802f30:	1009883a 	mov	r4,r2
  802f34:	08036c80 	call	8036c8 <__pack_d>
  802f38:	dfc01517 	ldw	ra,84(sp)
  802f3c:	dcc01417 	ldw	r19,80(sp)
  802f40:	dc401317 	ldw	r17,76(sp)
  802f44:	dec01604 	addi	sp,sp,88
  802f48:	f800283a 	ret

00802f4c <__adddf3>:
  802f4c:	deffea04 	addi	sp,sp,-88
  802f50:	dcc01415 	stw	r19,80(sp)
  802f54:	dcc00404 	addi	r19,sp,16
  802f58:	2011883a 	mov	r8,r4
  802f5c:	2813883a 	mov	r9,r5
  802f60:	dc401315 	stw	r17,76(sp)
  802f64:	d809883a 	mov	r4,sp
  802f68:	980b883a 	mov	r5,r19
  802f6c:	dc400904 	addi	r17,sp,36
  802f70:	dfc01515 	stw	ra,84(sp)
  802f74:	da400115 	stw	r9,4(sp)
  802f78:	d9c00315 	stw	r7,12(sp)
  802f7c:	da000015 	stw	r8,0(sp)
  802f80:	d9800215 	stw	r6,8(sp)
  802f84:	08039dc0 	call	8039dc <__unpack_d>
  802f88:	d9000204 	addi	r4,sp,8
  802f8c:	880b883a 	mov	r5,r17
  802f90:	08039dc0 	call	8039dc <__unpack_d>
  802f94:	d9800e04 	addi	r6,sp,56
  802f98:	9809883a 	mov	r4,r19
  802f9c:	880b883a 	mov	r5,r17
  802fa0:	0802abc0 	call	802abc <_fpadd_parts>
  802fa4:	1009883a 	mov	r4,r2
  802fa8:	08036c80 	call	8036c8 <__pack_d>
  802fac:	dfc01517 	ldw	ra,84(sp)
  802fb0:	dcc01417 	ldw	r19,80(sp)
  802fb4:	dc401317 	ldw	r17,76(sp)
  802fb8:	dec01604 	addi	sp,sp,88
  802fbc:	f800283a 	ret

00802fc0 <__divdf3>:
  802fc0:	deffed04 	addi	sp,sp,-76
  802fc4:	dcc01115 	stw	r19,68(sp)
  802fc8:	dcc00404 	addi	r19,sp,16
  802fcc:	2011883a 	mov	r8,r4
  802fd0:	2813883a 	mov	r9,r5
  802fd4:	dc000e15 	stw	r16,56(sp)
  802fd8:	d809883a 	mov	r4,sp
  802fdc:	980b883a 	mov	r5,r19
  802fe0:	dc000904 	addi	r16,sp,36
  802fe4:	dfc01215 	stw	ra,72(sp)
  802fe8:	da400115 	stw	r9,4(sp)
  802fec:	d9c00315 	stw	r7,12(sp)
  802ff0:	da000015 	stw	r8,0(sp)
  802ff4:	d9800215 	stw	r6,8(sp)
  802ff8:	dc801015 	stw	r18,64(sp)
  802ffc:	dc400f15 	stw	r17,60(sp)
  803000:	08039dc0 	call	8039dc <__unpack_d>
  803004:	d9000204 	addi	r4,sp,8
  803008:	800b883a 	mov	r5,r16
  80300c:	08039dc0 	call	8039dc <__unpack_d>
  803010:	d9000417 	ldw	r4,16(sp)
  803014:	00800044 	movi	r2,1
  803018:	11000b2e 	bgeu	r2,r4,803048 <__divdf3+0x88>
  80301c:	d9400917 	ldw	r5,36(sp)
  803020:	1140762e 	bgeu	r2,r5,8031fc <__divdf3+0x23c>
  803024:	d8800517 	ldw	r2,20(sp)
  803028:	d8c00a17 	ldw	r3,40(sp)
  80302c:	01800104 	movi	r6,4
  803030:	10c4f03a 	xor	r2,r2,r3
  803034:	d8800515 	stw	r2,20(sp)
  803038:	21800226 	beq	r4,r6,803044 <__divdf3+0x84>
  80303c:	00800084 	movi	r2,2
  803040:	2080141e 	bne	r4,r2,803094 <__divdf3+0xd4>
  803044:	29000926 	beq	r5,r4,80306c <__divdf3+0xac>
  803048:	9809883a 	mov	r4,r19
  80304c:	08036c80 	call	8036c8 <__pack_d>
  803050:	dfc01217 	ldw	ra,72(sp)
  803054:	dcc01117 	ldw	r19,68(sp)
  803058:	dc801017 	ldw	r18,64(sp)
  80305c:	dc400f17 	ldw	r17,60(sp)
  803060:	dc000e17 	ldw	r16,56(sp)
  803064:	dec01304 	addi	sp,sp,76
  803068:	f800283a 	ret
  80306c:	01002074 	movhi	r4,129
  803070:	2107ca04 	addi	r4,r4,7976
  803074:	08036c80 	call	8036c8 <__pack_d>
  803078:	dfc01217 	ldw	ra,72(sp)
  80307c:	dcc01117 	ldw	r19,68(sp)
  803080:	dc801017 	ldw	r18,64(sp)
  803084:	dc400f17 	ldw	r17,60(sp)
  803088:	dc000e17 	ldw	r16,56(sp)
  80308c:	dec01304 	addi	sp,sp,76
  803090:	f800283a 	ret
  803094:	29805b26 	beq	r5,r6,803204 <__divdf3+0x244>
  803098:	28802d26 	beq	r5,r2,803150 <__divdf3+0x190>
  80309c:	d8c00617 	ldw	r3,24(sp)
  8030a0:	d8800b17 	ldw	r2,44(sp)
  8030a4:	d9c00817 	ldw	r7,32(sp)
  8030a8:	dc400d17 	ldw	r17,52(sp)
  8030ac:	188bc83a 	sub	r5,r3,r2
  8030b0:	d9800717 	ldw	r6,28(sp)
  8030b4:	dc000c17 	ldw	r16,48(sp)
  8030b8:	d9400615 	stw	r5,24(sp)
  8030bc:	3c403836 	bltu	r7,r17,8031a0 <__divdf3+0x1e0>
  8030c0:	89c03626 	beq	r17,r7,80319c <__divdf3+0x1dc>
  8030c4:	0015883a 	mov	r10,zero
  8030c8:	001d883a 	mov	r14,zero
  8030cc:	02c40034 	movhi	r11,4096
  8030d0:	001f883a 	mov	r15,zero
  8030d4:	003f883a 	mov	ra,zero
  8030d8:	04800f44 	movi	r18,61
  8030dc:	00000f06 	br	80311c <__divdf3+0x15c>
  8030e0:	601d883a 	mov	r14,r12
  8030e4:	681f883a 	mov	r15,r13
  8030e8:	400d883a 	mov	r6,r8
  8030ec:	100f883a 	mov	r7,r2
  8030f0:	3191883a 	add	r8,r6,r6
  8030f4:	5808d07a 	srli	r4,r11,1
  8030f8:	4185803a 	cmpltu	r2,r8,r6
  8030fc:	39d3883a 	add	r9,r7,r7
  803100:	28c6b03a 	or	r3,r5,r3
  803104:	1245883a 	add	r2,r2,r9
  803108:	1815883a 	mov	r10,r3
  80310c:	2017883a 	mov	r11,r4
  803110:	400d883a 	mov	r6,r8
  803114:	100f883a 	mov	r7,r2
  803118:	fc801726 	beq	ra,r18,803178 <__divdf3+0x1b8>
  80311c:	580a97fa 	slli	r5,r11,31
  803120:	5006d07a 	srli	r3,r10,1
  803124:	ffc00044 	addi	ra,ra,1
  803128:	3c7ff136 	bltu	r7,r17,8030f0 <__divdf3+0x130>
  80312c:	3411c83a 	sub	r8,r6,r16
  803130:	3205803a 	cmpltu	r2,r6,r8
  803134:	3c53c83a 	sub	r9,r7,r17
  803138:	7298b03a 	or	r12,r14,r10
  80313c:	7adab03a 	or	r13,r15,r11
  803140:	4885c83a 	sub	r2,r9,r2
  803144:	89ffe61e 	bne	r17,r7,8030e0 <__divdf3+0x120>
  803148:	343fe936 	bltu	r6,r16,8030f0 <__divdf3+0x130>
  80314c:	003fe406 	br	8030e0 <__divdf3+0x120>
  803150:	9809883a 	mov	r4,r19
  803154:	d9800415 	stw	r6,16(sp)
  803158:	08036c80 	call	8036c8 <__pack_d>
  80315c:	dfc01217 	ldw	ra,72(sp)
  803160:	dcc01117 	ldw	r19,68(sp)
  803164:	dc801017 	ldw	r18,64(sp)
  803168:	dc400f17 	ldw	r17,60(sp)
  80316c:	dc000e17 	ldw	r16,56(sp)
  803170:	dec01304 	addi	sp,sp,76
  803174:	f800283a 	ret
  803178:	00803fc4 	movi	r2,255
  80317c:	7090703a 	and	r8,r14,r2
  803180:	00802004 	movi	r2,128
  803184:	0007883a 	mov	r3,zero
  803188:	0013883a 	mov	r9,zero
  80318c:	40800d26 	beq	r8,r2,8031c4 <__divdf3+0x204>
  803190:	dbc00815 	stw	r15,32(sp)
  803194:	db800715 	stw	r14,28(sp)
  803198:	003fab06 	br	803048 <__divdf3+0x88>
  80319c:	343fc92e 	bgeu	r6,r16,8030c4 <__divdf3+0x104>
  8031a0:	3185883a 	add	r2,r6,r6
  8031a4:	1189803a 	cmpltu	r4,r2,r6
  8031a8:	39c7883a 	add	r3,r7,r7
  8031ac:	20c9883a 	add	r4,r4,r3
  8031b0:	297fffc4 	addi	r5,r5,-1
  8031b4:	100d883a 	mov	r6,r2
  8031b8:	200f883a 	mov	r7,r4
  8031bc:	d9400615 	stw	r5,24(sp)
  8031c0:	003fc006 	br	8030c4 <__divdf3+0x104>
  8031c4:	483ff21e 	bne	r9,zero,803190 <__divdf3+0x1d0>
  8031c8:	01004004 	movi	r4,256
  8031cc:	7104703a 	and	r2,r14,r4
  8031d0:	10c4b03a 	or	r2,r2,r3
  8031d4:	103fee1e 	bne	r2,zero,803190 <__divdf3+0x1d0>
  8031d8:	31c4b03a 	or	r2,r6,r7
  8031dc:	103fec26 	beq	r2,zero,803190 <__divdf3+0x1d0>
  8031e0:	7205883a 	add	r2,r14,r8
  8031e4:	1391803a 	cmpltu	r8,r2,r14
  8031e8:	43d1883a 	add	r8,r8,r15
  8031ec:	013fc004 	movi	r4,-256
  8031f0:	111c703a 	and	r14,r2,r4
  8031f4:	401f883a 	mov	r15,r8
  8031f8:	003fe506 	br	803190 <__divdf3+0x1d0>
  8031fc:	8009883a 	mov	r4,r16
  803200:	003f9206 	br	80304c <__divdf3+0x8c>
  803204:	9809883a 	mov	r4,r19
  803208:	d8000715 	stw	zero,28(sp)
  80320c:	d8000815 	stw	zero,32(sp)
  803210:	d8000615 	stw	zero,24(sp)
  803214:	003f8d06 	br	80304c <__divdf3+0x8c>

00803218 <__nedf2>:
  803218:	deffef04 	addi	sp,sp,-68
  80321c:	dc400f15 	stw	r17,60(sp)
  803220:	dc400404 	addi	r17,sp,16
  803224:	2005883a 	mov	r2,r4
  803228:	2807883a 	mov	r3,r5
  80322c:	dc000e15 	stw	r16,56(sp)
  803230:	d809883a 	mov	r4,sp
  803234:	880b883a 	mov	r5,r17
  803238:	dc000904 	addi	r16,sp,36
  80323c:	d8c00115 	stw	r3,4(sp)
  803240:	d8800015 	stw	r2,0(sp)
  803244:	d9800215 	stw	r6,8(sp)
  803248:	dfc01015 	stw	ra,64(sp)
  80324c:	d9c00315 	stw	r7,12(sp)
  803250:	08039dc0 	call	8039dc <__unpack_d>
  803254:	d9000204 	addi	r4,sp,8
  803258:	800b883a 	mov	r5,r16
  80325c:	08039dc0 	call	8039dc <__unpack_d>
  803260:	d8800417 	ldw	r2,16(sp)
  803264:	00c00044 	movi	r3,1
  803268:	180d883a 	mov	r6,r3
  80326c:	1880062e 	bgeu	r3,r2,803288 <__nedf2+0x70>
  803270:	d8800917 	ldw	r2,36(sp)
  803274:	8809883a 	mov	r4,r17
  803278:	800b883a 	mov	r5,r16
  80327c:	1880022e 	bgeu	r3,r2,803288 <__nedf2+0x70>
  803280:	0803b140 	call	803b14 <__fpcmp_parts_d>
  803284:	100d883a 	mov	r6,r2
  803288:	3005883a 	mov	r2,r6
  80328c:	dfc01017 	ldw	ra,64(sp)
  803290:	dc400f17 	ldw	r17,60(sp)
  803294:	dc000e17 	ldw	r16,56(sp)
  803298:	dec01104 	addi	sp,sp,68
  80329c:	f800283a 	ret

008032a0 <__make_dp>:
  8032a0:	defff904 	addi	sp,sp,-28
  8032a4:	d8c00717 	ldw	r3,28(sp)
  8032a8:	d9000015 	stw	r4,0(sp)
  8032ac:	d809883a 	mov	r4,sp
  8032b0:	dfc00515 	stw	ra,20(sp)
  8032b4:	d9c00615 	stw	r7,24(sp)
  8032b8:	d9400115 	stw	r5,4(sp)
  8032bc:	d9800215 	stw	r6,8(sp)
  8032c0:	d8c00415 	stw	r3,16(sp)
  8032c4:	d9c00315 	stw	r7,12(sp)
  8032c8:	08036c80 	call	8036c8 <__pack_d>
  8032cc:	dfc00517 	ldw	ra,20(sp)
  8032d0:	dec00704 	addi	sp,sp,28
  8032d4:	f800283a 	ret

008032d8 <__truncdfsf2>:
  8032d8:	defff804 	addi	sp,sp,-32
  8032dc:	2005883a 	mov	r2,r4
  8032e0:	2807883a 	mov	r3,r5
  8032e4:	d809883a 	mov	r4,sp
  8032e8:	d9400204 	addi	r5,sp,8
  8032ec:	d8c00115 	stw	r3,4(sp)
  8032f0:	d8800015 	stw	r2,0(sp)
  8032f4:	dfc00715 	stw	ra,28(sp)
  8032f8:	08039dc0 	call	8039dc <__unpack_d>
  8032fc:	d9c00517 	ldw	r7,20(sp)
  803300:	da000617 	ldw	r8,24(sp)
  803304:	02d00034 	movhi	r11,16384
  803308:	5affffc4 	addi	r11,r11,-1
  80330c:	3812d7ba 	srli	r9,r7,30
  803310:	401a90ba 	slli	r13,r8,2
  803314:	3ac4703a 	and	r2,r7,r11
  803318:	0007883a 	mov	r3,zero
  80331c:	6a52b03a 	or	r9,r13,r9
  803320:	10c4b03a 	or	r2,r2,r3
  803324:	d9000217 	ldw	r4,8(sp)
  803328:	d9400317 	ldw	r5,12(sp)
  80332c:	d9800417 	ldw	r6,16(sp)
  803330:	480f883a 	mov	r7,r9
  803334:	10000126 	beq	r2,zero,80333c <__truncdfsf2+0x64>
  803338:	49c00054 	ori	r7,r9,1
  80333c:	080369c0 	call	80369c <__make_fp>
  803340:	dfc00717 	ldw	ra,28(sp)
  803344:	dec00804 	addi	sp,sp,32
  803348:	f800283a 	ret

0080334c <__clzsi2>:
  80334c:	00bfffd4 	movui	r2,65535
  803350:	11000e36 	bltu	r2,r4,80338c <__clzsi2+0x40>
  803354:	00803fc4 	movi	r2,255
  803358:	01400204 	movi	r5,8
  80335c:	0007883a 	mov	r3,zero
  803360:	11001036 	bltu	r2,r4,8033a4 <__clzsi2+0x58>
  803364:	000b883a 	mov	r5,zero
  803368:	20c6d83a 	srl	r3,r4,r3
  80336c:	00802074 	movhi	r2,129
  803370:	1087cf04 	addi	r2,r2,7996
  803374:	1887883a 	add	r3,r3,r2
  803378:	18800003 	ldbu	r2,0(r3)
  80337c:	00c00804 	movi	r3,32
  803380:	2885883a 	add	r2,r5,r2
  803384:	1885c83a 	sub	r2,r3,r2
  803388:	f800283a 	ret
  80338c:	01400404 	movi	r5,16
  803390:	00804034 	movhi	r2,256
  803394:	10bfffc4 	addi	r2,r2,-1
  803398:	2807883a 	mov	r3,r5
  80339c:	113ff22e 	bgeu	r2,r4,803368 <__clzsi2+0x1c>
  8033a0:	01400604 	movi	r5,24
  8033a4:	2807883a 	mov	r3,r5
  8033a8:	20c6d83a 	srl	r3,r4,r3
  8033ac:	00802074 	movhi	r2,129
  8033b0:	1087cf04 	addi	r2,r2,7996
  8033b4:	1887883a 	add	r3,r3,r2
  8033b8:	18800003 	ldbu	r2,0(r3)
  8033bc:	00c00804 	movi	r3,32
  8033c0:	2885883a 	add	r2,r5,r2
  8033c4:	1885c83a 	sub	r2,r3,r2
  8033c8:	f800283a 	ret

008033cc <__pack_f>:
  8033cc:	20c00017 	ldw	r3,0(r4)
  8033d0:	01c00044 	movi	r7,1
  8033d4:	21800317 	ldw	r6,12(r4)
  8033d8:	21400117 	ldw	r5,4(r4)
  8033dc:	38c02d2e 	bgeu	r7,r3,803494 <__pack_f+0xc8>
  8033e0:	00800104 	movi	r2,4
  8033e4:	18802826 	beq	r3,r2,803488 <__pack_f+0xbc>
  8033e8:	00800084 	movi	r2,2
  8033ec:	18800126 	beq	r3,r2,8033f4 <__pack_f+0x28>
  8033f0:	3000101e 	bne	r6,zero,803434 <__pack_f+0x68>
  8033f4:	000d883a 	mov	r6,zero
  8033f8:	0007883a 	mov	r3,zero
  8033fc:	19003fcc 	andi	r4,r3,255
  803400:	200895fa 	slli	r4,r4,23
  803404:	00c02034 	movhi	r3,128
  803408:	18ffffc4 	addi	r3,r3,-1
  80340c:	30c6703a 	and	r3,r6,r3
  803410:	10a0002c 	andhi	r2,r2,32768
  803414:	10c4b03a 	or	r2,r2,r3
  803418:	280a97fa 	slli	r5,r5,31
  80341c:	1104b03a 	or	r2,r2,r4
  803420:	00e00034 	movhi	r3,32768
  803424:	18ffffc4 	addi	r3,r3,-1
  803428:	10c4703a 	and	r2,r2,r3
  80342c:	1144b03a 	or	r2,r2,r5
  803430:	f800283a 	ret
  803434:	21000217 	ldw	r4,8(r4)
  803438:	00bfe084 	movi	r2,-126
  80343c:	20801b16 	blt	r4,r2,8034ac <__pack_f+0xe0>
  803440:	00801fc4 	movi	r2,127
  803444:	11001016 	blt	r2,r4,803488 <__pack_f+0xbc>
  803448:	308e703a 	and	r7,r6,r2
  80344c:	2087883a 	add	r3,r4,r2
  803450:	00801004 	movi	r2,64
  803454:	38800526 	beq	r7,r2,80346c <__pack_f+0xa0>
  803458:	31800fc4 	addi	r6,r6,63
  80345c:	30000716 	blt	r6,zero,80347c <__pack_f+0xb0>
  803460:	300490ba 	slli	r2,r6,2
  803464:	100cd27a 	srli	r6,r2,9
  803468:	003fe406 	br	8033fc <__pack_f+0x30>
  80346c:	3080200c 	andi	r2,r6,128
  803470:	103ffa26 	beq	r2,zero,80345c <__pack_f+0x90>
  803474:	31cd883a 	add	r6,r6,r7
  803478:	003ff806 	br	80345c <__pack_f+0x90>
  80347c:	300cd07a 	srli	r6,r6,1
  803480:	18c00044 	addi	r3,r3,1
  803484:	003ff606 	br	803460 <__pack_f+0x94>
  803488:	000d883a 	mov	r6,zero
  80348c:	00ffffc4 	movi	r3,-1
  803490:	003fda06 	br	8033fc <__pack_f+0x30>
  803494:	31800434 	orhi	r6,r6,16
  803498:	00802034 	movhi	r2,128
  80349c:	10bfffc4 	addi	r2,r2,-1
  8034a0:	308c703a 	and	r6,r6,r2
  8034a4:	00ffffc4 	movi	r3,-1
  8034a8:	003fd406 	br	8033fc <__pack_f+0x30>
  8034ac:	1109c83a 	sub	r4,r2,r4
  8034b0:	00800644 	movi	r2,25
  8034b4:	11001216 	blt	r2,r4,803500 <__pack_f+0x134>
  8034b8:	3904983a 	sll	r2,r7,r4
  8034bc:	3106d83a 	srl	r3,r6,r4
  8034c0:	10bfffc4 	addi	r2,r2,-1
  8034c4:	3084703a 	and	r2,r6,r2
  8034c8:	1004c03a 	cmpne	r2,r2,zero
  8034cc:	1886b03a 	or	r3,r3,r2
  8034d0:	19001fcc 	andi	r4,r3,127
  8034d4:	00801004 	movi	r2,64
  8034d8:	20800c26 	beq	r4,r2,80350c <__pack_f+0x140>
  8034dc:	18c00fc4 	addi	r3,r3,63
  8034e0:	00900034 	movhi	r2,16384
  8034e4:	10bfffc4 	addi	r2,r2,-1
  8034e8:	180cd1fa 	srli	r6,r3,7
  8034ec:	10c7803a 	cmpltu	r3,r2,r3
  8034f0:	00802034 	movhi	r2,128
  8034f4:	10bfffc4 	addi	r2,r2,-1
  8034f8:	308c703a 	and	r6,r6,r2
  8034fc:	003fbf06 	br	8033fc <__pack_f+0x30>
  803500:	0007883a 	mov	r3,zero
  803504:	000d883a 	mov	r6,zero
  803508:	003ff906 	br	8034f0 <__pack_f+0x124>
  80350c:	1880200c 	andi	r2,r3,128
  803510:	10000126 	beq	r2,zero,803518 <__pack_f+0x14c>
  803514:	1907883a 	add	r3,r3,r4
  803518:	180cd1fa 	srli	r6,r3,7
  80351c:	00900034 	movhi	r2,16384
  803520:	10bfffc4 	addi	r2,r2,-1
  803524:	10c7803a 	cmpltu	r3,r2,r3
  803528:	003ff106 	br	8034f0 <__pack_f+0x124>

0080352c <__unpack_f>:
  80352c:	21800017 	ldw	r6,0(r4)
  803530:	00c02034 	movhi	r3,128
  803534:	18ffffc4 	addi	r3,r3,-1
  803538:	3004d5fa 	srli	r2,r6,23
  80353c:	3008d7fa 	srli	r4,r6,31
  803540:	30ce703a 	and	r7,r6,r3
  803544:	10c03fcc 	andi	r3,r2,255
  803548:	29000115 	stw	r4,4(r5)
  80354c:	1800131e 	bne	r3,zero,80359c <__unpack_f+0x70>
  803550:	38000f26 	beq	r7,zero,803590 <__unpack_f+0x64>
  803554:	380691fa 	slli	r3,r7,7
  803558:	01bfe084 	movi	r6,-126
  80355c:	008000c4 	movi	r2,3
  803560:	01100034 	movhi	r4,16384
  803564:	213fffc4 	addi	r4,r4,-1
  803568:	28800015 	stw	r2,0(r5)
  80356c:	29800215 	stw	r6,8(r5)
  803570:	20c00536 	bltu	r4,r3,803588 <__unpack_f+0x5c>
  803574:	3005883a 	mov	r2,r6
  803578:	18c7883a 	add	r3,r3,r3
  80357c:	10bfffc4 	addi	r2,r2,-1
  803580:	20fffd2e 	bgeu	r4,r3,803578 <__unpack_f+0x4c>
  803584:	28800215 	stw	r2,8(r5)
  803588:	28c00315 	stw	r3,12(r5)
  80358c:	f800283a 	ret
  803590:	00800084 	movi	r2,2
  803594:	28800015 	stw	r2,0(r5)
  803598:	f800283a 	ret
  80359c:	00803fc4 	movi	r2,255
  8035a0:	18800826 	beq	r3,r2,8035c4 <__unpack_f+0x98>
  8035a4:	380491fa 	slli	r2,r7,7
  8035a8:	18ffe044 	addi	r3,r3,-127
  8035ac:	28c00215 	stw	r3,8(r5)
  8035b0:	10900034 	orhi	r2,r2,16384
  8035b4:	28800315 	stw	r2,12(r5)
  8035b8:	008000c4 	movi	r2,3
  8035bc:	28800015 	stw	r2,0(r5)
  8035c0:	f800283a 	ret
  8035c4:	3800031e 	bne	r7,zero,8035d4 <__unpack_f+0xa8>
  8035c8:	00800104 	movi	r2,4
  8035cc:	28800015 	stw	r2,0(r5)
  8035d0:	f800283a 	ret
  8035d4:	3080042c 	andhi	r2,r6,16
  8035d8:	10000426 	beq	r2,zero,8035ec <__unpack_f+0xc0>
  8035dc:	00800044 	movi	r2,1
  8035e0:	28800015 	stw	r2,0(r5)
  8035e4:	29c00315 	stw	r7,12(r5)
  8035e8:	f800283a 	ret
  8035ec:	28000015 	stw	zero,0(r5)
  8035f0:	003ffc06 	br	8035e4 <__unpack_f+0xb8>

008035f4 <__fpcmp_parts_f>:
  8035f4:	21800017 	ldw	r6,0(r4)
  8035f8:	00c00044 	movi	r3,1
  8035fc:	19800a2e 	bgeu	r3,r6,803628 <__fpcmp_parts_f+0x34>
  803600:	28800017 	ldw	r2,0(r5)
  803604:	1880082e 	bgeu	r3,r2,803628 <__fpcmp_parts_f+0x34>
  803608:	00c00104 	movi	r3,4
  80360c:	30c01e26 	beq	r6,r3,803688 <__fpcmp_parts_f+0x94>
  803610:	10c01a26 	beq	r2,r3,80367c <__fpcmp_parts_f+0x88>
  803614:	00c00084 	movi	r3,2
  803618:	30c00526 	beq	r6,r3,803630 <__fpcmp_parts_f+0x3c>
  80361c:	10c0071e 	bne	r2,r3,80363c <__fpcmp_parts_f+0x48>
  803620:	20800117 	ldw	r2,4(r4)
  803624:	1000091e 	bne	r2,zero,80364c <__fpcmp_parts_f+0x58>
  803628:	00800044 	movi	r2,1
  80362c:	f800283a 	ret
  803630:	10c0121e 	bne	r2,r3,80367c <__fpcmp_parts_f+0x88>
  803634:	0005883a 	mov	r2,zero
  803638:	f800283a 	ret
  80363c:	20c00117 	ldw	r3,4(r4)
  803640:	28800117 	ldw	r2,4(r5)
  803644:	18800326 	beq	r3,r2,803654 <__fpcmp_parts_f+0x60>
  803648:	183ff726 	beq	r3,zero,803628 <__fpcmp_parts_f+0x34>
  80364c:	00bfffc4 	movi	r2,-1
  803650:	f800283a 	ret
  803654:	21800217 	ldw	r6,8(r4)
  803658:	28800217 	ldw	r2,8(r5)
  80365c:	11bffa16 	blt	r2,r6,803648 <__fpcmp_parts_f+0x54>
  803660:	30800416 	blt	r6,r2,803674 <__fpcmp_parts_f+0x80>
  803664:	21000317 	ldw	r4,12(r4)
  803668:	29400317 	ldw	r5,12(r5)
  80366c:	293ff636 	bltu	r5,r4,803648 <__fpcmp_parts_f+0x54>
  803670:	217ff02e 	bgeu	r4,r5,803634 <__fpcmp_parts_f+0x40>
  803674:	183fec1e 	bne	r3,zero,803628 <__fpcmp_parts_f+0x34>
  803678:	003ff406 	br	80364c <__fpcmp_parts_f+0x58>
  80367c:	28800117 	ldw	r2,4(r5)
  803680:	103fe91e 	bne	r2,zero,803628 <__fpcmp_parts_f+0x34>
  803684:	003ff106 	br	80364c <__fpcmp_parts_f+0x58>
  803688:	11bfe51e 	bne	r2,r6,803620 <__fpcmp_parts_f+0x2c>
  80368c:	28c00117 	ldw	r3,4(r5)
  803690:	20800117 	ldw	r2,4(r4)
  803694:	1885c83a 	sub	r2,r3,r2
  803698:	f800283a 	ret

0080369c <__make_fp>:
  80369c:	defffb04 	addi	sp,sp,-20
  8036a0:	d9000015 	stw	r4,0(sp)
  8036a4:	d809883a 	mov	r4,sp
  8036a8:	dfc00415 	stw	ra,16(sp)
  8036ac:	d9400115 	stw	r5,4(sp)
  8036b0:	d9800215 	stw	r6,8(sp)
  8036b4:	d9c00315 	stw	r7,12(sp)
  8036b8:	08033cc0 	call	8033cc <__pack_f>
  8036bc:	dfc00417 	ldw	ra,16(sp)
  8036c0:	dec00504 	addi	sp,sp,20
  8036c4:	f800283a 	ret

008036c8 <__pack_d>:
  8036c8:	20c00017 	ldw	r3,0(r4)
  8036cc:	defffd04 	addi	sp,sp,-12
  8036d0:	dc000015 	stw	r16,0(sp)
  8036d4:	dc800215 	stw	r18,8(sp)
  8036d8:	dc400115 	stw	r17,4(sp)
  8036dc:	00800044 	movi	r2,1
  8036e0:	22000317 	ldw	r8,12(r4)
  8036e4:	001f883a 	mov	r15,zero
  8036e8:	22400417 	ldw	r9,16(r4)
  8036ec:	24000117 	ldw	r16,4(r4)
  8036f0:	10c0552e 	bgeu	r2,r3,803848 <__pack_d+0x180>
  8036f4:	00800104 	movi	r2,4
  8036f8:	18804f26 	beq	r3,r2,803838 <__pack_d+0x170>
  8036fc:	00800084 	movi	r2,2
  803700:	18800226 	beq	r3,r2,80370c <__pack_d+0x44>
  803704:	4244b03a 	or	r2,r8,r9
  803708:	10001a1e 	bne	r2,zero,803774 <__pack_d+0xac>
  80370c:	000d883a 	mov	r6,zero
  803710:	000f883a 	mov	r7,zero
  803714:	0011883a 	mov	r8,zero
  803718:	00800434 	movhi	r2,16
  80371c:	10bfffc4 	addi	r2,r2,-1
  803720:	301d883a 	mov	r14,r6
  803724:	3884703a 	and	r2,r7,r2
  803728:	400a953a 	slli	r5,r8,20
  80372c:	79bffc2c 	andhi	r6,r15,65520
  803730:	308cb03a 	or	r6,r6,r2
  803734:	00e00434 	movhi	r3,32784
  803738:	18ffffc4 	addi	r3,r3,-1
  80373c:	800497fa 	slli	r2,r16,31
  803740:	30c6703a 	and	r3,r6,r3
  803744:	1946b03a 	or	r3,r3,r5
  803748:	01600034 	movhi	r5,32768
  80374c:	297fffc4 	addi	r5,r5,-1
  803750:	194a703a 	and	r5,r3,r5
  803754:	288ab03a 	or	r5,r5,r2
  803758:	2807883a 	mov	r3,r5
  80375c:	7005883a 	mov	r2,r14
  803760:	dc800217 	ldw	r18,8(sp)
  803764:	dc400117 	ldw	r17,4(sp)
  803768:	dc000017 	ldw	r16,0(sp)
  80376c:	dec00304 	addi	sp,sp,12
  803770:	f800283a 	ret
  803774:	21000217 	ldw	r4,8(r4)
  803778:	00bf0084 	movi	r2,-1022
  80377c:	20803f16 	blt	r4,r2,80387c <__pack_d+0x1b4>
  803780:	0080ffc4 	movi	r2,1023
  803784:	11002c16 	blt	r2,r4,803838 <__pack_d+0x170>
  803788:	00803fc4 	movi	r2,255
  80378c:	408c703a 	and	r6,r8,r2
  803790:	00802004 	movi	r2,128
  803794:	0007883a 	mov	r3,zero
  803798:	000f883a 	mov	r7,zero
  80379c:	2280ffc4 	addi	r10,r4,1023
  8037a0:	30801e26 	beq	r6,r2,80381c <__pack_d+0x154>
  8037a4:	00801fc4 	movi	r2,127
  8037a8:	4089883a 	add	r4,r8,r2
  8037ac:	220d803a 	cmpltu	r6,r4,r8
  8037b0:	324d883a 	add	r6,r6,r9
  8037b4:	2011883a 	mov	r8,r4
  8037b8:	3013883a 	mov	r9,r6
  8037bc:	00880034 	movhi	r2,8192
  8037c0:	10bfffc4 	addi	r2,r2,-1
  8037c4:	12400d36 	bltu	r2,r9,8037fc <__pack_d+0x134>
  8037c8:	4804963a 	slli	r2,r9,24
  8037cc:	400cd23a 	srli	r6,r8,8
  8037d0:	480ed23a 	srli	r7,r9,8
  8037d4:	013fffc4 	movi	r4,-1
  8037d8:	118cb03a 	or	r6,r2,r6
  8037dc:	01400434 	movhi	r5,16
  8037e0:	297fffc4 	addi	r5,r5,-1
  8037e4:	3104703a 	and	r2,r6,r4
  8037e8:	3946703a 	and	r3,r7,r5
  8037ec:	5201ffcc 	andi	r8,r10,2047
  8037f0:	100d883a 	mov	r6,r2
  8037f4:	180f883a 	mov	r7,r3
  8037f8:	003fc706 	br	803718 <__pack_d+0x50>
  8037fc:	480897fa 	slli	r4,r9,31
  803800:	4004d07a 	srli	r2,r8,1
  803804:	4806d07a 	srli	r3,r9,1
  803808:	52800044 	addi	r10,r10,1
  80380c:	2084b03a 	or	r2,r4,r2
  803810:	1011883a 	mov	r8,r2
  803814:	1813883a 	mov	r9,r3
  803818:	003feb06 	br	8037c8 <__pack_d+0x100>
  80381c:	383fe11e 	bne	r7,zero,8037a4 <__pack_d+0xdc>
  803820:	01004004 	movi	r4,256
  803824:	4104703a 	and	r2,r8,r4
  803828:	10c4b03a 	or	r2,r2,r3
  80382c:	103fe326 	beq	r2,zero,8037bc <__pack_d+0xf4>
  803830:	3005883a 	mov	r2,r6
  803834:	003fdc06 	br	8037a8 <__pack_d+0xe0>
  803838:	000d883a 	mov	r6,zero
  80383c:	000f883a 	mov	r7,zero
  803840:	0201ffc4 	movi	r8,2047
  803844:	003fb406 	br	803718 <__pack_d+0x50>
  803848:	0005883a 	mov	r2,zero
  80384c:	00c00234 	movhi	r3,8
  803850:	408cb03a 	or	r6,r8,r2
  803854:	48ceb03a 	or	r7,r9,r3
  803858:	013fffc4 	movi	r4,-1
  80385c:	01400434 	movhi	r5,16
  803860:	297fffc4 	addi	r5,r5,-1
  803864:	3104703a 	and	r2,r6,r4
  803868:	3946703a 	and	r3,r7,r5
  80386c:	100d883a 	mov	r6,r2
  803870:	180f883a 	mov	r7,r3
  803874:	0201ffc4 	movi	r8,2047
  803878:	003fa706 	br	803718 <__pack_d+0x50>
  80387c:	1109c83a 	sub	r4,r2,r4
  803880:	00800e04 	movi	r2,56
  803884:	11004316 	blt	r2,r4,803994 <__pack_d+0x2cc>
  803888:	21fff804 	addi	r7,r4,-32
  80388c:	38004516 	blt	r7,zero,8039a4 <__pack_d+0x2dc>
  803890:	49d8d83a 	srl	r12,r9,r7
  803894:	001b883a 	mov	r13,zero
  803898:	0023883a 	mov	r17,zero
  80389c:	01400044 	movi	r5,1
  8038a0:	0025883a 	mov	r18,zero
  8038a4:	38004716 	blt	r7,zero,8039c4 <__pack_d+0x2fc>
  8038a8:	29d6983a 	sll	r11,r5,r7
  8038ac:	0015883a 	mov	r10,zero
  8038b0:	00bfffc4 	movi	r2,-1
  8038b4:	5089883a 	add	r4,r10,r2
  8038b8:	588b883a 	add	r5,r11,r2
  8038bc:	228d803a 	cmpltu	r6,r4,r10
  8038c0:	314b883a 	add	r5,r6,r5
  8038c4:	4104703a 	and	r2,r8,r4
  8038c8:	4946703a 	and	r3,r9,r5
  8038cc:	10c4b03a 	or	r2,r2,r3
  8038d0:	10000226 	beq	r2,zero,8038dc <__pack_d+0x214>
  8038d4:	04400044 	movi	r17,1
  8038d8:	0025883a 	mov	r18,zero
  8038dc:	00803fc4 	movi	r2,255
  8038e0:	644eb03a 	or	r7,r12,r17
  8038e4:	3892703a 	and	r9,r7,r2
  8038e8:	00802004 	movi	r2,128
  8038ec:	6c90b03a 	or	r8,r13,r18
  8038f0:	0015883a 	mov	r10,zero
  8038f4:	48801626 	beq	r9,r2,803950 <__pack_d+0x288>
  8038f8:	01001fc4 	movi	r4,127
  8038fc:	3905883a 	add	r2,r7,r4
  803900:	11cd803a 	cmpltu	r6,r2,r7
  803904:	320d883a 	add	r6,r6,r8
  803908:	100f883a 	mov	r7,r2
  80390c:	00840034 	movhi	r2,4096
  803910:	10bfffc4 	addi	r2,r2,-1
  803914:	3011883a 	mov	r8,r6
  803918:	0007883a 	mov	r3,zero
  80391c:	11801b36 	bltu	r2,r6,80398c <__pack_d+0x2c4>
  803920:	4004963a 	slli	r2,r8,24
  803924:	3808d23a 	srli	r4,r7,8
  803928:	400ad23a 	srli	r5,r8,8
  80392c:	1813883a 	mov	r9,r3
  803930:	1108b03a 	or	r4,r2,r4
  803934:	00bfffc4 	movi	r2,-1
  803938:	00c00434 	movhi	r3,16
  80393c:	18ffffc4 	addi	r3,r3,-1
  803940:	208c703a 	and	r6,r4,r2
  803944:	28ce703a 	and	r7,r5,r3
  803948:	4a01ffcc 	andi	r8,r9,2047
  80394c:	003f7206 	br	803718 <__pack_d+0x50>
  803950:	503fe91e 	bne	r10,zero,8038f8 <__pack_d+0x230>
  803954:	01004004 	movi	r4,256
  803958:	3904703a 	and	r2,r7,r4
  80395c:	0007883a 	mov	r3,zero
  803960:	10c4b03a 	or	r2,r2,r3
  803964:	10000626 	beq	r2,zero,803980 <__pack_d+0x2b8>
  803968:	3a45883a 	add	r2,r7,r9
  80396c:	11cd803a 	cmpltu	r6,r2,r7
  803970:	320d883a 	add	r6,r6,r8
  803974:	100f883a 	mov	r7,r2
  803978:	3011883a 	mov	r8,r6
  80397c:	0007883a 	mov	r3,zero
  803980:	00840034 	movhi	r2,4096
  803984:	10bfffc4 	addi	r2,r2,-1
  803988:	123fe52e 	bgeu	r2,r8,803920 <__pack_d+0x258>
  80398c:	00c00044 	movi	r3,1
  803990:	003fe306 	br	803920 <__pack_d+0x258>
  803994:	0009883a 	mov	r4,zero
  803998:	0013883a 	mov	r9,zero
  80399c:	000b883a 	mov	r5,zero
  8039a0:	003fe406 	br	803934 <__pack_d+0x26c>
  8039a4:	4a47883a 	add	r3,r9,r9
  8039a8:	008007c4 	movi	r2,31
  8039ac:	1105c83a 	sub	r2,r2,r4
  8039b0:	1886983a 	sll	r3,r3,r2
  8039b4:	4118d83a 	srl	r12,r8,r4
  8039b8:	491ad83a 	srl	r13,r9,r4
  8039bc:	1b18b03a 	or	r12,r3,r12
  8039c0:	003fb506 	br	803898 <__pack_d+0x1d0>
  8039c4:	2806d07a 	srli	r3,r5,1
  8039c8:	008007c4 	movi	r2,31
  8039cc:	1105c83a 	sub	r2,r2,r4
  8039d0:	1896d83a 	srl	r11,r3,r2
  8039d4:	2914983a 	sll	r10,r5,r4
  8039d8:	003fb506 	br	8038b0 <__pack_d+0x1e8>

008039dc <__unpack_d>:
  8039dc:	20c00117 	ldw	r3,4(r4)
  8039e0:	22400017 	ldw	r9,0(r4)
  8039e4:	00800434 	movhi	r2,16
  8039e8:	10bfffc4 	addi	r2,r2,-1
  8039ec:	1808d53a 	srli	r4,r3,20
  8039f0:	180cd7fa 	srli	r6,r3,31
  8039f4:	1894703a 	and	r10,r3,r2
  8039f8:	2201ffcc 	andi	r8,r4,2047
  8039fc:	281b883a 	mov	r13,r5
  803a00:	4817883a 	mov	r11,r9
  803a04:	29800115 	stw	r6,4(r5)
  803a08:	5019883a 	mov	r12,r10
  803a0c:	40001e1e 	bne	r8,zero,803a88 <__unpack_d+0xac>
  803a10:	4a84b03a 	or	r2,r9,r10
  803a14:	10001926 	beq	r2,zero,803a7c <__unpack_d+0xa0>
  803a18:	4804d63a 	srli	r2,r9,24
  803a1c:	500c923a 	slli	r6,r10,8
  803a20:	013f0084 	movi	r4,-1022
  803a24:	00c40034 	movhi	r3,4096
  803a28:	18ffffc4 	addi	r3,r3,-1
  803a2c:	118cb03a 	or	r6,r2,r6
  803a30:	008000c4 	movi	r2,3
  803a34:	480a923a 	slli	r5,r9,8
  803a38:	68800015 	stw	r2,0(r13)
  803a3c:	69000215 	stw	r4,8(r13)
  803a40:	19800b36 	bltu	r3,r6,803a70 <__unpack_d+0x94>
  803a44:	200f883a 	mov	r7,r4
  803a48:	1811883a 	mov	r8,r3
  803a4c:	2945883a 	add	r2,r5,r5
  803a50:	1149803a 	cmpltu	r4,r2,r5
  803a54:	3187883a 	add	r3,r6,r6
  803a58:	20c9883a 	add	r4,r4,r3
  803a5c:	100b883a 	mov	r5,r2
  803a60:	200d883a 	mov	r6,r4
  803a64:	39ffffc4 	addi	r7,r7,-1
  803a68:	413ff82e 	bgeu	r8,r4,803a4c <__unpack_d+0x70>
  803a6c:	69c00215 	stw	r7,8(r13)
  803a70:	69800415 	stw	r6,16(r13)
  803a74:	69400315 	stw	r5,12(r13)
  803a78:	f800283a 	ret
  803a7c:	00800084 	movi	r2,2
  803a80:	28800015 	stw	r2,0(r5)
  803a84:	f800283a 	ret
  803a88:	0081ffc4 	movi	r2,2047
  803a8c:	40800f26 	beq	r8,r2,803acc <__unpack_d+0xf0>
  803a90:	480cd63a 	srli	r6,r9,24
  803a94:	5006923a 	slli	r3,r10,8
  803a98:	4804923a 	slli	r2,r9,8
  803a9c:	0009883a 	mov	r4,zero
  803aa0:	30c6b03a 	or	r3,r6,r3
  803aa4:	01440034 	movhi	r5,4096
  803aa8:	110cb03a 	or	r6,r2,r4
  803aac:	423f0044 	addi	r8,r8,-1023
  803ab0:	194eb03a 	or	r7,r3,r5
  803ab4:	008000c4 	movi	r2,3
  803ab8:	69c00415 	stw	r7,16(r13)
  803abc:	6a000215 	stw	r8,8(r13)
  803ac0:	68800015 	stw	r2,0(r13)
  803ac4:	69800315 	stw	r6,12(r13)
  803ac8:	f800283a 	ret
  803acc:	4a84b03a 	or	r2,r9,r10
  803ad0:	1000031e 	bne	r2,zero,803ae0 <__unpack_d+0x104>
  803ad4:	00800104 	movi	r2,4
  803ad8:	28800015 	stw	r2,0(r5)
  803adc:	f800283a 	ret
  803ae0:	0009883a 	mov	r4,zero
  803ae4:	01400234 	movhi	r5,8
  803ae8:	4904703a 	and	r2,r9,r4
  803aec:	5146703a 	and	r3,r10,r5
  803af0:	10c4b03a 	or	r2,r2,r3
  803af4:	10000526 	beq	r2,zero,803b0c <__unpack_d+0x130>
  803af8:	00800044 	movi	r2,1
  803afc:	68800015 	stw	r2,0(r13)
  803b00:	6b000415 	stw	r12,16(r13)
  803b04:	6ac00315 	stw	r11,12(r13)
  803b08:	f800283a 	ret
  803b0c:	68000015 	stw	zero,0(r13)
  803b10:	003ffb06 	br	803b00 <__unpack_d+0x124>

00803b14 <__fpcmp_parts_d>:
  803b14:	21800017 	ldw	r6,0(r4)
  803b18:	00c00044 	movi	r3,1
  803b1c:	19800a2e 	bgeu	r3,r6,803b48 <__fpcmp_parts_d+0x34>
  803b20:	28800017 	ldw	r2,0(r5)
  803b24:	1880082e 	bgeu	r3,r2,803b48 <__fpcmp_parts_d+0x34>
  803b28:	00c00104 	movi	r3,4
  803b2c:	30c02626 	beq	r6,r3,803bc8 <__fpcmp_parts_d+0xb4>
  803b30:	10c02226 	beq	r2,r3,803bbc <__fpcmp_parts_d+0xa8>
  803b34:	00c00084 	movi	r3,2
  803b38:	30c00526 	beq	r6,r3,803b50 <__fpcmp_parts_d+0x3c>
  803b3c:	10c0071e 	bne	r2,r3,803b5c <__fpcmp_parts_d+0x48>
  803b40:	20800117 	ldw	r2,4(r4)
  803b44:	1000091e 	bne	r2,zero,803b6c <__fpcmp_parts_d+0x58>
  803b48:	00800044 	movi	r2,1
  803b4c:	f800283a 	ret
  803b50:	10c01a1e 	bne	r2,r3,803bbc <__fpcmp_parts_d+0xa8>
  803b54:	0005883a 	mov	r2,zero
  803b58:	f800283a 	ret
  803b5c:	22000117 	ldw	r8,4(r4)
  803b60:	28800117 	ldw	r2,4(r5)
  803b64:	40800326 	beq	r8,r2,803b74 <__fpcmp_parts_d+0x60>
  803b68:	403ff726 	beq	r8,zero,803b48 <__fpcmp_parts_d+0x34>
  803b6c:	00bfffc4 	movi	r2,-1
  803b70:	f800283a 	ret
  803b74:	20c00217 	ldw	r3,8(r4)
  803b78:	28800217 	ldw	r2,8(r5)
  803b7c:	10fffa16 	blt	r2,r3,803b68 <__fpcmp_parts_d+0x54>
  803b80:	18800916 	blt	r3,r2,803ba8 <__fpcmp_parts_d+0x94>
  803b84:	21c00417 	ldw	r7,16(r4)
  803b88:	28c00417 	ldw	r3,16(r5)
  803b8c:	21800317 	ldw	r6,12(r4)
  803b90:	28800317 	ldw	r2,12(r5)
  803b94:	19fff436 	bltu	r3,r7,803b68 <__fpcmp_parts_d+0x54>
  803b98:	38c00526 	beq	r7,r3,803bb0 <__fpcmp_parts_d+0x9c>
  803b9c:	38c00236 	bltu	r7,r3,803ba8 <__fpcmp_parts_d+0x94>
  803ba0:	19ffec1e 	bne	r3,r7,803b54 <__fpcmp_parts_d+0x40>
  803ba4:	30bfeb2e 	bgeu	r6,r2,803b54 <__fpcmp_parts_d+0x40>
  803ba8:	403fe71e 	bne	r8,zero,803b48 <__fpcmp_parts_d+0x34>
  803bac:	003fef06 	br	803b6c <__fpcmp_parts_d+0x58>
  803bb0:	11bffa2e 	bgeu	r2,r6,803b9c <__fpcmp_parts_d+0x88>
  803bb4:	403fe426 	beq	r8,zero,803b48 <__fpcmp_parts_d+0x34>
  803bb8:	003fec06 	br	803b6c <__fpcmp_parts_d+0x58>
  803bbc:	28800117 	ldw	r2,4(r5)
  803bc0:	103fe11e 	bne	r2,zero,803b48 <__fpcmp_parts_d+0x34>
  803bc4:	003fe906 	br	803b6c <__fpcmp_parts_d+0x58>
  803bc8:	11bfdd1e 	bne	r2,r6,803b40 <__fpcmp_parts_d+0x2c>
  803bcc:	28c00117 	ldw	r3,4(r5)
  803bd0:	20800117 	ldw	r2,4(r4)
  803bd4:	1885c83a 	sub	r2,r3,r2
  803bd8:	f800283a 	ret

00803bdc <__errno>:
  803bdc:	00c02074 	movhi	r3,129
  803be0:	18cfd204 	addi	r3,r3,16200
  803be4:	18800017 	ldw	r2,0(r3)
  803be8:	f800283a 	ret

00803bec <printf>:
  803bec:	defffb04 	addi	sp,sp,-20
  803bf0:	dfc00115 	stw	ra,4(sp)
  803bf4:	d9400215 	stw	r5,8(sp)
  803bf8:	d9800315 	stw	r6,12(sp)
  803bfc:	d9c00415 	stw	r7,16(sp)
  803c00:	00802074 	movhi	r2,129
  803c04:	108fd204 	addi	r2,r2,16200
  803c08:	10c00017 	ldw	r3,0(r2)
  803c0c:	200b883a 	mov	r5,r4
  803c10:	d8800204 	addi	r2,sp,8
  803c14:	19000217 	ldw	r4,8(r3)
  803c18:	100d883a 	mov	r6,r2
  803c1c:	d8800015 	stw	r2,0(sp)
  803c20:	0805d640 	call	805d64 <__vfprintf_internal>
  803c24:	dfc00117 	ldw	ra,4(sp)
  803c28:	dec00504 	addi	sp,sp,20
  803c2c:	f800283a 	ret

00803c30 <_printf_r>:
  803c30:	defffc04 	addi	sp,sp,-16
  803c34:	dfc00115 	stw	ra,4(sp)
  803c38:	d9800215 	stw	r6,8(sp)
  803c3c:	d9c00315 	stw	r7,12(sp)
  803c40:	280d883a 	mov	r6,r5
  803c44:	21400217 	ldw	r5,8(r4)
  803c48:	d8c00204 	addi	r3,sp,8
  803c4c:	180f883a 	mov	r7,r3
  803c50:	d8c00015 	stw	r3,0(sp)
  803c54:	0803eb80 	call	803eb8 <___vfprintf_internal_r>
  803c58:	dfc00117 	ldw	ra,4(sp)
  803c5c:	dec00404 	addi	sp,sp,16
  803c60:	f800283a 	ret

00803c64 <_puts_r>:
  803c64:	defff604 	addi	sp,sp,-40
  803c68:	dc400715 	stw	r17,28(sp)
  803c6c:	2023883a 	mov	r17,r4
  803c70:	2809883a 	mov	r4,r5
  803c74:	dfc00915 	stw	ra,36(sp)
  803c78:	dcc00815 	stw	r19,32(sp)
  803c7c:	2827883a 	mov	r19,r5
  803c80:	0803dec0 	call	803dec <strlen>
  803c84:	89400217 	ldw	r5,8(r17)
  803c88:	00c02074 	movhi	r3,129
  803c8c:	18c7ab04 	addi	r3,r3,7852
  803c90:	01c00044 	movi	r7,1
  803c94:	12000044 	addi	r8,r2,1
  803c98:	d8c00515 	stw	r3,20(sp)
  803c9c:	d9c00615 	stw	r7,24(sp)
  803ca0:	d8c00304 	addi	r3,sp,12
  803ca4:	01c00084 	movi	r7,2
  803ca8:	8809883a 	mov	r4,r17
  803cac:	d80d883a 	mov	r6,sp
  803cb0:	d8c00015 	stw	r3,0(sp)
  803cb4:	dcc00315 	stw	r19,12(sp)
  803cb8:	da000215 	stw	r8,8(sp)
  803cbc:	d9c00115 	stw	r7,4(sp)
  803cc0:	d8800415 	stw	r2,16(sp)
  803cc4:	0807fc00 	call	807fc0 <__sfvwrite_r>
  803cc8:	00ffffc4 	movi	r3,-1
  803ccc:	10000626 	beq	r2,zero,803ce8 <_puts_r+0x84>
  803cd0:	1805883a 	mov	r2,r3
  803cd4:	dfc00917 	ldw	ra,36(sp)
  803cd8:	dcc00817 	ldw	r19,32(sp)
  803cdc:	dc400717 	ldw	r17,28(sp)
  803ce0:	dec00a04 	addi	sp,sp,40
  803ce4:	f800283a 	ret
  803ce8:	00c00284 	movi	r3,10
  803cec:	1805883a 	mov	r2,r3
  803cf0:	dfc00917 	ldw	ra,36(sp)
  803cf4:	dcc00817 	ldw	r19,32(sp)
  803cf8:	dc400717 	ldw	r17,28(sp)
  803cfc:	dec00a04 	addi	sp,sp,40
  803d00:	f800283a 	ret

00803d04 <puts>:
  803d04:	00802074 	movhi	r2,129
  803d08:	108fd204 	addi	r2,r2,16200
  803d0c:	200b883a 	mov	r5,r4
  803d10:	11000017 	ldw	r4,0(r2)
  803d14:	0803c641 	jmpi	803c64 <_puts_r>

00803d18 <sprintf>:
  803d18:	deffe504 	addi	sp,sp,-108
  803d1c:	2013883a 	mov	r9,r4
  803d20:	dfc01815 	stw	ra,96(sp)
  803d24:	d9801915 	stw	r6,100(sp)
  803d28:	d9c01a15 	stw	r7,104(sp)
  803d2c:	d8801904 	addi	r2,sp,100
  803d30:	d8800015 	stw	r2,0(sp)
  803d34:	00802074 	movhi	r2,129
  803d38:	108fd204 	addi	r2,r2,16200
  803d3c:	11000017 	ldw	r4,0(r2)
  803d40:	d9c00017 	ldw	r7,0(sp)
  803d44:	00808204 	movi	r2,520
  803d48:	00e00034 	movhi	r3,32768
  803d4c:	18ffffc4 	addi	r3,r3,-1
  803d50:	280d883a 	mov	r6,r5
  803d54:	d880040d 	sth	r2,16(sp)
  803d58:	d9400104 	addi	r5,sp,4
  803d5c:	00bfffc4 	movi	r2,-1
  803d60:	d8c00615 	stw	r3,24(sp)
  803d64:	d8c00315 	stw	r3,12(sp)
  803d68:	da400515 	stw	r9,20(sp)
  803d6c:	d880048d 	sth	r2,18(sp)
  803d70:	da400115 	stw	r9,4(sp)
  803d74:	0803eb80 	call	803eb8 <___vfprintf_internal_r>
  803d78:	d8c00117 	ldw	r3,4(sp)
  803d7c:	18000005 	stb	zero,0(r3)
  803d80:	dfc01817 	ldw	ra,96(sp)
  803d84:	dec01b04 	addi	sp,sp,108
  803d88:	f800283a 	ret

00803d8c <_sprintf_r>:
  803d8c:	deffe604 	addi	sp,sp,-104
  803d90:	2813883a 	mov	r9,r5
  803d94:	dfc01815 	stw	ra,96(sp)
  803d98:	d9c01915 	stw	r7,100(sp)
  803d9c:	d8801904 	addi	r2,sp,100
  803da0:	d8800015 	stw	r2,0(sp)
  803da4:	100f883a 	mov	r7,r2
  803da8:	00808204 	movi	r2,520
  803dac:	00e00034 	movhi	r3,32768
  803db0:	18ffffc4 	addi	r3,r3,-1
  803db4:	d880040d 	sth	r2,16(sp)
  803db8:	d9400104 	addi	r5,sp,4
  803dbc:	00bfffc4 	movi	r2,-1
  803dc0:	d8c00615 	stw	r3,24(sp)
  803dc4:	d8c00315 	stw	r3,12(sp)
  803dc8:	da400515 	stw	r9,20(sp)
  803dcc:	d880048d 	sth	r2,18(sp)
  803dd0:	da400115 	stw	r9,4(sp)
  803dd4:	0803eb80 	call	803eb8 <___vfprintf_internal_r>
  803dd8:	d8c00117 	ldw	r3,4(sp)
  803ddc:	18000005 	stb	zero,0(r3)
  803de0:	dfc01817 	ldw	ra,96(sp)
  803de4:	dec01a04 	addi	sp,sp,104
  803de8:	f800283a 	ret

00803dec <strlen>:
  803dec:	208000cc 	andi	r2,r4,3
  803df0:	2011883a 	mov	r8,r4
  803df4:	1000161e 	bne	r2,zero,803e50 <strlen+0x64>
  803df8:	20c00017 	ldw	r3,0(r4)
  803dfc:	017fbff4 	movhi	r5,65279
  803e00:	297fbfc4 	addi	r5,r5,-257
  803e04:	01e02074 	movhi	r7,32897
  803e08:	39e02004 	addi	r7,r7,-32640
  803e0c:	1945883a 	add	r2,r3,r5
  803e10:	11c4703a 	and	r2,r2,r7
  803e14:	00c6303a 	nor	r3,zero,r3
  803e18:	1886703a 	and	r3,r3,r2
  803e1c:	18000c1e 	bne	r3,zero,803e50 <strlen+0x64>
  803e20:	280d883a 	mov	r6,r5
  803e24:	380b883a 	mov	r5,r7
  803e28:	21000104 	addi	r4,r4,4
  803e2c:	20800017 	ldw	r2,0(r4)
  803e30:	1187883a 	add	r3,r2,r6
  803e34:	1946703a 	and	r3,r3,r5
  803e38:	0084303a 	nor	r2,zero,r2
  803e3c:	10c4703a 	and	r2,r2,r3
  803e40:	103ff926 	beq	r2,zero,803e28 <strlen+0x3c>
  803e44:	20800007 	ldb	r2,0(r4)
  803e48:	10000326 	beq	r2,zero,803e58 <strlen+0x6c>
  803e4c:	21000044 	addi	r4,r4,1
  803e50:	20800007 	ldb	r2,0(r4)
  803e54:	103ffd1e 	bne	r2,zero,803e4c <strlen+0x60>
  803e58:	2205c83a 	sub	r2,r4,r8
  803e5c:	f800283a 	ret

00803e60 <__sprint_r>:
  803e60:	30800217 	ldw	r2,8(r6)
  803e64:	defffe04 	addi	sp,sp,-8
  803e68:	dc000015 	stw	r16,0(sp)
  803e6c:	dfc00115 	stw	ra,4(sp)
  803e70:	3021883a 	mov	r16,r6
  803e74:	0007883a 	mov	r3,zero
  803e78:	1000061e 	bne	r2,zero,803e94 <__sprint_r+0x34>
  803e7c:	1805883a 	mov	r2,r3
  803e80:	30000115 	stw	zero,4(r6)
  803e84:	dfc00117 	ldw	ra,4(sp)
  803e88:	dc000017 	ldw	r16,0(sp)
  803e8c:	dec00204 	addi	sp,sp,8
  803e90:	f800283a 	ret
  803e94:	0807fc00 	call	807fc0 <__sfvwrite_r>
  803e98:	1007883a 	mov	r3,r2
  803e9c:	1805883a 	mov	r2,r3
  803ea0:	80000115 	stw	zero,4(r16)
  803ea4:	80000215 	stw	zero,8(r16)
  803ea8:	dfc00117 	ldw	ra,4(sp)
  803eac:	dc000017 	ldw	r16,0(sp)
  803eb0:	dec00204 	addi	sp,sp,8
  803eb4:	f800283a 	ret

00803eb8 <___vfprintf_internal_r>:
  803eb8:	defea404 	addi	sp,sp,-1392
  803ebc:	dd815815 	stw	r22,1376(sp)
  803ec0:	dc015215 	stw	r16,1352(sp)
  803ec4:	d9c15115 	stw	r7,1348(sp)
  803ec8:	dfc15b15 	stw	ra,1388(sp)
  803ecc:	df015a15 	stw	fp,1384(sp)
  803ed0:	ddc15915 	stw	r23,1380(sp)
  803ed4:	dd415715 	stw	r21,1372(sp)
  803ed8:	dd015615 	stw	r20,1368(sp)
  803edc:	dcc15515 	stw	r19,1364(sp)
  803ee0:	dc815415 	stw	r18,1360(sp)
  803ee4:	dc415315 	stw	r17,1356(sp)
  803ee8:	282d883a 	mov	r22,r5
  803eec:	3021883a 	mov	r16,r6
  803ef0:	d9014f15 	stw	r4,1340(sp)
  803ef4:	08085e40 	call	8085e4 <_localeconv_r>
  803ef8:	10800017 	ldw	r2,0(r2)
  803efc:	d9c15117 	ldw	r7,1348(sp)
  803f00:	d8814915 	stw	r2,1316(sp)
  803f04:	d8814f17 	ldw	r2,1340(sp)
  803f08:	10000226 	beq	r2,zero,803f14 <___vfprintf_internal_r+0x5c>
  803f0c:	10800e17 	ldw	r2,56(r2)
  803f10:	10020d26 	beq	r2,zero,804748 <___vfprintf_internal_r+0x890>
  803f14:	b080030b 	ldhu	r2,12(r22)
  803f18:	1080020c 	andi	r2,r2,8
  803f1c:	10020e26 	beq	r2,zero,804758 <___vfprintf_internal_r+0x8a0>
  803f20:	b0800417 	ldw	r2,16(r22)
  803f24:	10020c26 	beq	r2,zero,804758 <___vfprintf_internal_r+0x8a0>
  803f28:	b200030b 	ldhu	r8,12(r22)
  803f2c:	00800284 	movi	r2,10
  803f30:	40c0068c 	andi	r3,r8,26
  803f34:	18802f1e 	bne	r3,r2,803ff4 <___vfprintf_internal_r+0x13c>
  803f38:	b080038f 	ldh	r2,14(r22)
  803f3c:	10002d16 	blt	r2,zero,803ff4 <___vfprintf_internal_r+0x13c>
  803f40:	b240038b 	ldhu	r9,14(r22)
  803f44:	b2800717 	ldw	r10,28(r22)
  803f48:	b2c00917 	ldw	r11,36(r22)
  803f4c:	d9014f17 	ldw	r4,1340(sp)
  803f50:	dc402904 	addi	r17,sp,164
  803f54:	d8804004 	addi	r2,sp,256
  803f58:	00c10004 	movi	r3,1024
  803f5c:	423fff4c 	andi	r8,r8,65533
  803f60:	800d883a 	mov	r6,r16
  803f64:	880b883a 	mov	r5,r17
  803f68:	da002c0d 	sth	r8,176(sp)
  803f6c:	da402c8d 	sth	r9,178(sp)
  803f70:	da803015 	stw	r10,192(sp)
  803f74:	dac03215 	stw	r11,200(sp)
  803f78:	d8802d15 	stw	r2,180(sp)
  803f7c:	d8c02e15 	stw	r3,184(sp)
  803f80:	d8802915 	stw	r2,164(sp)
  803f84:	d8c02b15 	stw	r3,172(sp)
  803f88:	d8002f15 	stw	zero,188(sp)
  803f8c:	0803eb80 	call	803eb8 <___vfprintf_internal_r>
  803f90:	d8814b15 	stw	r2,1324(sp)
  803f94:	10000416 	blt	r2,zero,803fa8 <___vfprintf_internal_r+0xf0>
  803f98:	d9014f17 	ldw	r4,1340(sp)
  803f9c:	880b883a 	mov	r5,r17
  803fa0:	08076900 	call	807690 <_fflush_r>
  803fa4:	1002321e 	bne	r2,zero,804870 <___vfprintf_internal_r+0x9b8>
  803fa8:	d8802c0b 	ldhu	r2,176(sp)
  803fac:	1080100c 	andi	r2,r2,64
  803fb0:	10000326 	beq	r2,zero,803fc0 <___vfprintf_internal_r+0x108>
  803fb4:	b080030b 	ldhu	r2,12(r22)
  803fb8:	10801014 	ori	r2,r2,64
  803fbc:	b080030d 	sth	r2,12(r22)
  803fc0:	d8814b17 	ldw	r2,1324(sp)
  803fc4:	dfc15b17 	ldw	ra,1388(sp)
  803fc8:	df015a17 	ldw	fp,1384(sp)
  803fcc:	ddc15917 	ldw	r23,1380(sp)
  803fd0:	dd815817 	ldw	r22,1376(sp)
  803fd4:	dd415717 	ldw	r21,1372(sp)
  803fd8:	dd015617 	ldw	r20,1368(sp)
  803fdc:	dcc15517 	ldw	r19,1364(sp)
  803fe0:	dc815417 	ldw	r18,1360(sp)
  803fe4:	dc415317 	ldw	r17,1356(sp)
  803fe8:	dc015217 	ldw	r16,1352(sp)
  803fec:	dec15c04 	addi	sp,sp,1392
  803ff0:	f800283a 	ret
  803ff4:	0005883a 	mov	r2,zero
  803ff8:	0007883a 	mov	r3,zero
  803ffc:	dd401904 	addi	r21,sp,100
  804000:	d8814215 	stw	r2,1288(sp)
  804004:	802f883a 	mov	r23,r16
  804008:	d8c14315 	stw	r3,1292(sp)
  80400c:	d8014b15 	stw	zero,1324(sp)
  804010:	d8014815 	stw	zero,1312(sp)
  804014:	d8014415 	stw	zero,1296(sp)
  804018:	d8014715 	stw	zero,1308(sp)
  80401c:	dd400c15 	stw	r21,48(sp)
  804020:	d8000e15 	stw	zero,56(sp)
  804024:	d8000d15 	stw	zero,52(sp)
  804028:	b8800007 	ldb	r2,0(r23)
  80402c:	10001926 	beq	r2,zero,804094 <___vfprintf_internal_r+0x1dc>
  804030:	00c00944 	movi	r3,37
  804034:	10c01726 	beq	r2,r3,804094 <___vfprintf_internal_r+0x1dc>
  804038:	b821883a 	mov	r16,r23
  80403c:	00000106 	br	804044 <___vfprintf_internal_r+0x18c>
  804040:	10c00326 	beq	r2,r3,804050 <___vfprintf_internal_r+0x198>
  804044:	84000044 	addi	r16,r16,1
  804048:	80800007 	ldb	r2,0(r16)
  80404c:	103ffc1e 	bne	r2,zero,804040 <___vfprintf_internal_r+0x188>
  804050:	85e7c83a 	sub	r19,r16,r23
  804054:	98000e26 	beq	r19,zero,804090 <___vfprintf_internal_r+0x1d8>
  804058:	dc800e17 	ldw	r18,56(sp)
  80405c:	dc400d17 	ldw	r17,52(sp)
  804060:	008001c4 	movi	r2,7
  804064:	94e5883a 	add	r18,r18,r19
  804068:	8c400044 	addi	r17,r17,1
  80406c:	adc00015 	stw	r23,0(r21)
  804070:	dc800e15 	stw	r18,56(sp)
  804074:	acc00115 	stw	r19,4(r21)
  804078:	dc400d15 	stw	r17,52(sp)
  80407c:	14428b16 	blt	r2,r17,804aac <___vfprintf_internal_r+0xbf4>
  804080:	ad400204 	addi	r21,r21,8
  804084:	d9014b17 	ldw	r4,1324(sp)
  804088:	24c9883a 	add	r4,r4,r19
  80408c:	d9014b15 	stw	r4,1324(sp)
  804090:	802f883a 	mov	r23,r16
  804094:	b8800007 	ldb	r2,0(r23)
  804098:	10013c26 	beq	r2,zero,80458c <___vfprintf_internal_r+0x6d4>
  80409c:	bdc00044 	addi	r23,r23,1
  8040a0:	d8000405 	stb	zero,16(sp)
  8040a4:	b8c00007 	ldb	r3,0(r23)
  8040a8:	04ffffc4 	movi	r19,-1
  8040ac:	d8014c15 	stw	zero,1328(sp)
  8040b0:	d8014a15 	stw	zero,1320(sp)
  8040b4:	d8c14d15 	stw	r3,1332(sp)
  8040b8:	bdc00044 	addi	r23,r23,1
  8040bc:	d9414d17 	ldw	r5,1332(sp)
  8040c0:	00801604 	movi	r2,88
  8040c4:	28fff804 	addi	r3,r5,-32
  8040c8:	10c06036 	bltu	r2,r3,80424c <___vfprintf_internal_r+0x394>
  8040cc:	18c5883a 	add	r2,r3,r3
  8040d0:	1085883a 	add	r2,r2,r2
  8040d4:	00c02034 	movhi	r3,128
  8040d8:	18d03a04 	addi	r3,r3,16616
  8040dc:	10c5883a 	add	r2,r2,r3
  8040e0:	11000017 	ldw	r4,0(r2)
  8040e4:	2000683a 	jmp	r4
  8040e8:	0080505c 	xori	r2,zero,321
  8040ec:	0080424c 	andi	r2,zero,265
  8040f0:	0080424c 	andi	r2,zero,265
  8040f4:	00805048 	cmpgei	r2,zero,321
  8040f8:	0080424c 	andi	r2,zero,265
  8040fc:	0080424c 	andi	r2,zero,265
  804100:	0080424c 	andi	r2,zero,265
  804104:	0080424c 	andi	r2,zero,265
  804108:	0080424c 	andi	r2,zero,265
  80410c:	0080424c 	andi	r2,zero,265
  804110:	00804e28 	cmpgeui	r2,zero,312
  804114:	00805038 	rdprs	r2,zero,320
  804118:	0080424c 	andi	r2,zero,265
  80411c:	00804e40 	call	804e4 <__alt_mem_onchip_memory2_3+0x794e4>
  804120:	008050d4 	movui	r2,323
  804124:	0080424c 	andi	r2,zero,265
  804128:	008050c0 	call	8050c <__alt_mem_onchip_memory2_3+0x7950c>
  80412c:	00805088 	cmpgei	r2,zero,322
  804130:	00805088 	cmpgei	r2,zero,322
  804134:	00805088 	cmpgei	r2,zero,322
  804138:	00805088 	cmpgei	r2,zero,322
  80413c:	00805088 	cmpgei	r2,zero,322
  804140:	00805088 	cmpgei	r2,zero,322
  804144:	00805088 	cmpgei	r2,zero,322
  804148:	00805088 	cmpgei	r2,zero,322
  80414c:	00805088 	cmpgei	r2,zero,322
  804150:	0080424c 	andi	r2,zero,265
  804154:	0080424c 	andi	r2,zero,265
  804158:	0080424c 	andi	r2,zero,265
  80415c:	0080424c 	andi	r2,zero,265
  804160:	0080424c 	andi	r2,zero,265
  804164:	0080424c 	andi	r2,zero,265
  804168:	0080424c 	andi	r2,zero,265
  80416c:	0080424c 	andi	r2,zero,265
  804170:	0080424c 	andi	r2,zero,265
  804174:	0080424c 	andi	r2,zero,265
  804178:	008048a4 	muli	r2,zero,290
  80417c:	00804f10 	cmplti	r2,zero,316
  804180:	0080424c 	andi	r2,zero,265
  804184:	00804f10 	cmplti	r2,zero,316
  804188:	0080424c 	andi	r2,zero,265
  80418c:	0080424c 	andi	r2,zero,265
  804190:	0080424c 	andi	r2,zero,265
  804194:	0080424c 	andi	r2,zero,265
  804198:	00805074 	movhi	r2,321
  80419c:	0080424c 	andi	r2,zero,265
  8041a0:	0080424c 	andi	r2,zero,265
  8041a4:	00804958 	cmpnei	r2,zero,293
  8041a8:	0080424c 	andi	r2,zero,265
  8041ac:	0080424c 	andi	r2,zero,265
  8041b0:	0080424c 	andi	r2,zero,265
  8041b4:	0080424c 	andi	r2,zero,265
  8041b8:	0080424c 	andi	r2,zero,265
  8041bc:	008049a4 	muli	r2,zero,294
  8041c0:	0080424c 	andi	r2,zero,265
  8041c4:	0080424c 	andi	r2,zero,265
  8041c8:	00804fc4 	movi	r2,319
  8041cc:	0080424c 	andi	r2,zero,265
  8041d0:	0080424c 	andi	r2,zero,265
  8041d4:	0080424c 	andi	r2,zero,265
  8041d8:	0080424c 	andi	r2,zero,265
  8041dc:	0080424c 	andi	r2,zero,265
  8041e0:	0080424c 	andi	r2,zero,265
  8041e4:	0080424c 	andi	r2,zero,265
  8041e8:	0080424c 	andi	r2,zero,265
  8041ec:	0080424c 	andi	r2,zero,265
  8041f0:	0080424c 	andi	r2,zero,265
  8041f4:	00804f98 	cmpnei	r2,zero,318
  8041f8:	008048b0 	cmpltui	r2,zero,290
  8041fc:	00804f10 	cmplti	r2,zero,316
  804200:	00804f10 	cmplti	r2,zero,316
  804204:	00804f10 	cmplti	r2,zero,316
  804208:	00804efc 	xorhi	r2,zero,315
  80420c:	008048b0 	cmpltui	r2,zero,290
  804210:	0080424c 	andi	r2,zero,265
  804214:	0080424c 	andi	r2,zero,265
  804218:	00804e84 	movi	r2,314
  80421c:	0080424c 	andi	r2,zero,265
  804220:	00804e54 	movui	r2,313
  804224:	00804964 	muli	r2,zero,293
  804228:	00804eb4 	movhi	r2,314
  80422c:	00804ea0 	cmpeqi	r2,zero,314
  804230:	0080424c 	andi	r2,zero,265
  804234:	00805130 	cmpltui	r2,zero,324
  804238:	0080424c 	andi	r2,zero,265
  80423c:	008049b0 	cmpltui	r2,zero,294
  804240:	0080424c 	andi	r2,zero,265
  804244:	0080424c 	andi	r2,zero,265
  804248:	00805028 	cmpgeui	r2,zero,320
  80424c:	d9014d17 	ldw	r4,1332(sp)
  804250:	2000ce26 	beq	r4,zero,80458c <___vfprintf_internal_r+0x6d4>
  804254:	01400044 	movi	r5,1
  804258:	d9800f04 	addi	r6,sp,60
  80425c:	d9c14015 	stw	r7,1280(sp)
  804260:	d9414515 	stw	r5,1300(sp)
  804264:	d9814115 	stw	r6,1284(sp)
  804268:	280f883a 	mov	r7,r5
  80426c:	d9000f05 	stb	r4,60(sp)
  804270:	d8000405 	stb	zero,16(sp)
  804274:	d8014615 	stw	zero,1304(sp)
  804278:	d8c14c17 	ldw	r3,1328(sp)
  80427c:	1880008c 	andi	r2,r3,2
  804280:	1005003a 	cmpeq	r2,r2,zero
  804284:	d8815015 	stw	r2,1344(sp)
  804288:	1000031e 	bne	r2,zero,804298 <___vfprintf_internal_r+0x3e0>
  80428c:	d9014517 	ldw	r4,1300(sp)
  804290:	21000084 	addi	r4,r4,2
  804294:	d9014515 	stw	r4,1300(sp)
  804298:	d9414c17 	ldw	r5,1328(sp)
  80429c:	2940210c 	andi	r5,r5,132
  8042a0:	d9414e15 	stw	r5,1336(sp)
  8042a4:	28002d1e 	bne	r5,zero,80435c <___vfprintf_internal_r+0x4a4>
  8042a8:	d9814a17 	ldw	r6,1320(sp)
  8042ac:	d8814517 	ldw	r2,1300(sp)
  8042b0:	30a1c83a 	sub	r16,r6,r2
  8042b4:	0400290e 	bge	zero,r16,80435c <___vfprintf_internal_r+0x4a4>
  8042b8:	00800404 	movi	r2,16
  8042bc:	1404580e 	bge	r2,r16,805420 <___vfprintf_internal_r+0x1568>
  8042c0:	dc800e17 	ldw	r18,56(sp)
  8042c4:	dc400d17 	ldw	r17,52(sp)
  8042c8:	1027883a 	mov	r19,r2
  8042cc:	07002074 	movhi	fp,129
  8042d0:	e7082a84 	addi	fp,fp,8362
  8042d4:	050001c4 	movi	r20,7
  8042d8:	00000306 	br	8042e8 <___vfprintf_internal_r+0x430>
  8042dc:	843ffc04 	addi	r16,r16,-16
  8042e0:	ad400204 	addi	r21,r21,8
  8042e4:	9c00130e 	bge	r19,r16,804334 <___vfprintf_internal_r+0x47c>
  8042e8:	94800404 	addi	r18,r18,16
  8042ec:	8c400044 	addi	r17,r17,1
  8042f0:	af000015 	stw	fp,0(r21)
  8042f4:	acc00115 	stw	r19,4(r21)
  8042f8:	dc800e15 	stw	r18,56(sp)
  8042fc:	dc400d15 	stw	r17,52(sp)
  804300:	a47ff60e 	bge	r20,r17,8042dc <___vfprintf_internal_r+0x424>
  804304:	d9014f17 	ldw	r4,1340(sp)
  804308:	b00b883a 	mov	r5,r22
  80430c:	d9800c04 	addi	r6,sp,48
  804310:	d9c15115 	stw	r7,1348(sp)
  804314:	0803e600 	call	803e60 <__sprint_r>
  804318:	d9c15117 	ldw	r7,1348(sp)
  80431c:	10009e1e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  804320:	843ffc04 	addi	r16,r16,-16
  804324:	dc800e17 	ldw	r18,56(sp)
  804328:	dc400d17 	ldw	r17,52(sp)
  80432c:	dd401904 	addi	r21,sp,100
  804330:	9c3fed16 	blt	r19,r16,8042e8 <___vfprintf_internal_r+0x430>
  804334:	9425883a 	add	r18,r18,r16
  804338:	8c400044 	addi	r17,r17,1
  80433c:	008001c4 	movi	r2,7
  804340:	af000015 	stw	fp,0(r21)
  804344:	ac000115 	stw	r16,4(r21)
  804348:	dc800e15 	stw	r18,56(sp)
  80434c:	dc400d15 	stw	r17,52(sp)
  804350:	1441f516 	blt	r2,r17,804b28 <___vfprintf_internal_r+0xc70>
  804354:	ad400204 	addi	r21,r21,8
  804358:	00000206 	br	804364 <___vfprintf_internal_r+0x4ac>
  80435c:	dc800e17 	ldw	r18,56(sp)
  804360:	dc400d17 	ldw	r17,52(sp)
  804364:	d8800407 	ldb	r2,16(sp)
  804368:	10000b26 	beq	r2,zero,804398 <___vfprintf_internal_r+0x4e0>
  80436c:	00800044 	movi	r2,1
  804370:	94800044 	addi	r18,r18,1
  804374:	8c400044 	addi	r17,r17,1
  804378:	a8800115 	stw	r2,4(r21)
  80437c:	d8c00404 	addi	r3,sp,16
  804380:	008001c4 	movi	r2,7
  804384:	a8c00015 	stw	r3,0(r21)
  804388:	dc800e15 	stw	r18,56(sp)
  80438c:	dc400d15 	stw	r17,52(sp)
  804390:	1441da16 	blt	r2,r17,804afc <___vfprintf_internal_r+0xc44>
  804394:	ad400204 	addi	r21,r21,8
  804398:	d9015017 	ldw	r4,1344(sp)
  80439c:	20000b1e 	bne	r4,zero,8043cc <___vfprintf_internal_r+0x514>
  8043a0:	d8800444 	addi	r2,sp,17
  8043a4:	94800084 	addi	r18,r18,2
  8043a8:	8c400044 	addi	r17,r17,1
  8043ac:	a8800015 	stw	r2,0(r21)
  8043b0:	00c00084 	movi	r3,2
  8043b4:	008001c4 	movi	r2,7
  8043b8:	a8c00115 	stw	r3,4(r21)
  8043bc:	dc800e15 	stw	r18,56(sp)
  8043c0:	dc400d15 	stw	r17,52(sp)
  8043c4:	1441c216 	blt	r2,r17,804ad0 <___vfprintf_internal_r+0xc18>
  8043c8:	ad400204 	addi	r21,r21,8
  8043cc:	d9414e17 	ldw	r5,1336(sp)
  8043d0:	00802004 	movi	r2,128
  8043d4:	2880b126 	beq	r5,r2,80469c <___vfprintf_internal_r+0x7e4>
  8043d8:	d8c14617 	ldw	r3,1304(sp)
  8043dc:	19e1c83a 	sub	r16,r3,r7
  8043e0:	0400260e 	bge	zero,r16,80447c <___vfprintf_internal_r+0x5c4>
  8043e4:	00800404 	movi	r2,16
  8043e8:	1403c90e 	bge	r2,r16,805310 <___vfprintf_internal_r+0x1458>
  8043ec:	1027883a 	mov	r19,r2
  8043f0:	07002074 	movhi	fp,129
  8043f4:	e7082684 	addi	fp,fp,8346
  8043f8:	050001c4 	movi	r20,7
  8043fc:	00000306 	br	80440c <___vfprintf_internal_r+0x554>
  804400:	843ffc04 	addi	r16,r16,-16
  804404:	ad400204 	addi	r21,r21,8
  804408:	9c00130e 	bge	r19,r16,804458 <___vfprintf_internal_r+0x5a0>
  80440c:	94800404 	addi	r18,r18,16
  804410:	8c400044 	addi	r17,r17,1
  804414:	af000015 	stw	fp,0(r21)
  804418:	acc00115 	stw	r19,4(r21)
  80441c:	dc800e15 	stw	r18,56(sp)
  804420:	dc400d15 	stw	r17,52(sp)
  804424:	a47ff60e 	bge	r20,r17,804400 <___vfprintf_internal_r+0x548>
  804428:	d9014f17 	ldw	r4,1340(sp)
  80442c:	b00b883a 	mov	r5,r22
  804430:	d9800c04 	addi	r6,sp,48
  804434:	d9c15115 	stw	r7,1348(sp)
  804438:	0803e600 	call	803e60 <__sprint_r>
  80443c:	d9c15117 	ldw	r7,1348(sp)
  804440:	1000551e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  804444:	843ffc04 	addi	r16,r16,-16
  804448:	dc800e17 	ldw	r18,56(sp)
  80444c:	dc400d17 	ldw	r17,52(sp)
  804450:	dd401904 	addi	r21,sp,100
  804454:	9c3fed16 	blt	r19,r16,80440c <___vfprintf_internal_r+0x554>
  804458:	9425883a 	add	r18,r18,r16
  80445c:	8c400044 	addi	r17,r17,1
  804460:	008001c4 	movi	r2,7
  804464:	af000015 	stw	fp,0(r21)
  804468:	ac000115 	stw	r16,4(r21)
  80446c:	dc800e15 	stw	r18,56(sp)
  804470:	dc400d15 	stw	r17,52(sp)
  804474:	14418216 	blt	r2,r17,804a80 <___vfprintf_internal_r+0xbc8>
  804478:	ad400204 	addi	r21,r21,8
  80447c:	d9014c17 	ldw	r4,1328(sp)
  804480:	2080400c 	andi	r2,r4,256
  804484:	10004a1e 	bne	r2,zero,8045b0 <___vfprintf_internal_r+0x6f8>
  804488:	d9414117 	ldw	r5,1284(sp)
  80448c:	91e5883a 	add	r18,r18,r7
  804490:	8c400044 	addi	r17,r17,1
  804494:	008001c4 	movi	r2,7
  804498:	a9400015 	stw	r5,0(r21)
  80449c:	a9c00115 	stw	r7,4(r21)
  8044a0:	dc800e15 	stw	r18,56(sp)
  8044a4:	dc400d15 	stw	r17,52(sp)
  8044a8:	14416716 	blt	r2,r17,804a48 <___vfprintf_internal_r+0xb90>
  8044ac:	a8c00204 	addi	r3,r21,8
  8044b0:	d9814c17 	ldw	r6,1328(sp)
  8044b4:	3080010c 	andi	r2,r6,4
  8044b8:	10002826 	beq	r2,zero,80455c <___vfprintf_internal_r+0x6a4>
  8044bc:	d8814a17 	ldw	r2,1320(sp)
  8044c0:	d9014517 	ldw	r4,1300(sp)
  8044c4:	1121c83a 	sub	r16,r2,r4
  8044c8:	0400240e 	bge	zero,r16,80455c <___vfprintf_internal_r+0x6a4>
  8044cc:	00800404 	movi	r2,16
  8044d0:	14044f0e 	bge	r2,r16,805610 <___vfprintf_internal_r+0x1758>
  8044d4:	dc400d17 	ldw	r17,52(sp)
  8044d8:	1027883a 	mov	r19,r2
  8044dc:	07002074 	movhi	fp,129
  8044e0:	e7082a84 	addi	fp,fp,8362
  8044e4:	050001c4 	movi	r20,7
  8044e8:	00000306 	br	8044f8 <___vfprintf_internal_r+0x640>
  8044ec:	843ffc04 	addi	r16,r16,-16
  8044f0:	18c00204 	addi	r3,r3,8
  8044f4:	9c00110e 	bge	r19,r16,80453c <___vfprintf_internal_r+0x684>
  8044f8:	94800404 	addi	r18,r18,16
  8044fc:	8c400044 	addi	r17,r17,1
  804500:	1f000015 	stw	fp,0(r3)
  804504:	1cc00115 	stw	r19,4(r3)
  804508:	dc800e15 	stw	r18,56(sp)
  80450c:	dc400d15 	stw	r17,52(sp)
  804510:	a47ff60e 	bge	r20,r17,8044ec <___vfprintf_internal_r+0x634>
  804514:	d9014f17 	ldw	r4,1340(sp)
  804518:	b00b883a 	mov	r5,r22
  80451c:	d9800c04 	addi	r6,sp,48
  804520:	0803e600 	call	803e60 <__sprint_r>
  804524:	10001c1e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  804528:	843ffc04 	addi	r16,r16,-16
  80452c:	dc800e17 	ldw	r18,56(sp)
  804530:	dc400d17 	ldw	r17,52(sp)
  804534:	d8c01904 	addi	r3,sp,100
  804538:	9c3fef16 	blt	r19,r16,8044f8 <___vfprintf_internal_r+0x640>
  80453c:	9425883a 	add	r18,r18,r16
  804540:	8c400044 	addi	r17,r17,1
  804544:	008001c4 	movi	r2,7
  804548:	1f000015 	stw	fp,0(r3)
  80454c:	1c000115 	stw	r16,4(r3)
  804550:	dc800e15 	stw	r18,56(sp)
  804554:	dc400d15 	stw	r17,52(sp)
  804558:	1440cb16 	blt	r2,r17,804888 <___vfprintf_internal_r+0x9d0>
  80455c:	d8814a17 	ldw	r2,1320(sp)
  804560:	d9414517 	ldw	r5,1300(sp)
  804564:	1140010e 	bge	r2,r5,80456c <___vfprintf_internal_r+0x6b4>
  804568:	2805883a 	mov	r2,r5
  80456c:	d9814b17 	ldw	r6,1324(sp)
  804570:	308d883a 	add	r6,r6,r2
  804574:	d9814b15 	stw	r6,1324(sp)
  804578:	90013b1e 	bne	r18,zero,804a68 <___vfprintf_internal_r+0xbb0>
  80457c:	d9c14017 	ldw	r7,1280(sp)
  804580:	dd401904 	addi	r21,sp,100
  804584:	d8000d15 	stw	zero,52(sp)
  804588:	003ea706 	br	804028 <___vfprintf_internal_r+0x170>
  80458c:	d8800e17 	ldw	r2,56(sp)
  804590:	10053f1e 	bne	r2,zero,805a90 <___vfprintf_internal_r+0x1bd8>
  804594:	d8000d15 	stw	zero,52(sp)
  804598:	b080030b 	ldhu	r2,12(r22)
  80459c:	1080100c 	andi	r2,r2,64
  8045a0:	103e8726 	beq	r2,zero,803fc0 <___vfprintf_internal_r+0x108>
  8045a4:	00bfffc4 	movi	r2,-1
  8045a8:	d8814b15 	stw	r2,1324(sp)
  8045ac:	003e8406 	br	803fc0 <___vfprintf_internal_r+0x108>
  8045b0:	d9814d17 	ldw	r6,1332(sp)
  8045b4:	00801944 	movi	r2,101
  8045b8:	11806e16 	blt	r2,r6,804774 <___vfprintf_internal_r+0x8bc>
  8045bc:	d9414717 	ldw	r5,1308(sp)
  8045c0:	00c00044 	movi	r3,1
  8045c4:	1943430e 	bge	r3,r5,8052d4 <___vfprintf_internal_r+0x141c>
  8045c8:	d8814117 	ldw	r2,1284(sp)
  8045cc:	94800044 	addi	r18,r18,1
  8045d0:	8c400044 	addi	r17,r17,1
  8045d4:	a8800015 	stw	r2,0(r21)
  8045d8:	008001c4 	movi	r2,7
  8045dc:	a8c00115 	stw	r3,4(r21)
  8045e0:	dc800e15 	stw	r18,56(sp)
  8045e4:	dc400d15 	stw	r17,52(sp)
  8045e8:	1441ca16 	blt	r2,r17,804d14 <___vfprintf_internal_r+0xe5c>
  8045ec:	a8c00204 	addi	r3,r21,8
  8045f0:	d9014917 	ldw	r4,1316(sp)
  8045f4:	00800044 	movi	r2,1
  8045f8:	94800044 	addi	r18,r18,1
  8045fc:	8c400044 	addi	r17,r17,1
  804600:	18800115 	stw	r2,4(r3)
  804604:	008001c4 	movi	r2,7
  804608:	19000015 	stw	r4,0(r3)
  80460c:	dc800e15 	stw	r18,56(sp)
  804610:	dc400d15 	stw	r17,52(sp)
  804614:	1441b616 	blt	r2,r17,804cf0 <___vfprintf_internal_r+0xe38>
  804618:	1cc00204 	addi	r19,r3,8
  80461c:	d9014217 	ldw	r4,1288(sp)
  804620:	d9414317 	ldw	r5,1292(sp)
  804624:	000d883a 	mov	r6,zero
  804628:	000f883a 	mov	r7,zero
  80462c:	08032180 	call	803218 <__nedf2>
  804630:	10017426 	beq	r2,zero,804c04 <___vfprintf_internal_r+0xd4c>
  804634:	d9414717 	ldw	r5,1308(sp)
  804638:	d9814117 	ldw	r6,1284(sp)
  80463c:	8c400044 	addi	r17,r17,1
  804640:	2c85883a 	add	r2,r5,r18
  804644:	14bfffc4 	addi	r18,r2,-1
  804648:	28bfffc4 	addi	r2,r5,-1
  80464c:	30c00044 	addi	r3,r6,1
  804650:	98800115 	stw	r2,4(r19)
  804654:	008001c4 	movi	r2,7
  804658:	98c00015 	stw	r3,0(r19)
  80465c:	dc800e15 	stw	r18,56(sp)
  804660:	dc400d15 	stw	r17,52(sp)
  804664:	14418e16 	blt	r2,r17,804ca0 <___vfprintf_internal_r+0xde8>
  804668:	9cc00204 	addi	r19,r19,8
  80466c:	d9414817 	ldw	r5,1312(sp)
  804670:	d8800804 	addi	r2,sp,32
  804674:	8c400044 	addi	r17,r17,1
  804678:	9165883a 	add	r18,r18,r5
  80467c:	98800015 	stw	r2,0(r19)
  804680:	008001c4 	movi	r2,7
  804684:	99400115 	stw	r5,4(r19)
  804688:	dc800e15 	stw	r18,56(sp)
  80468c:	dc400d15 	stw	r17,52(sp)
  804690:	1440ed16 	blt	r2,r17,804a48 <___vfprintf_internal_r+0xb90>
  804694:	98c00204 	addi	r3,r19,8
  804698:	003f8506 	br	8044b0 <___vfprintf_internal_r+0x5f8>
  80469c:	d9814a17 	ldw	r6,1320(sp)
  8046a0:	d8814517 	ldw	r2,1300(sp)
  8046a4:	30a1c83a 	sub	r16,r6,r2
  8046a8:	043f4b0e 	bge	zero,r16,8043d8 <___vfprintf_internal_r+0x520>
  8046ac:	00800404 	movi	r2,16
  8046b0:	1404340e 	bge	r2,r16,805784 <___vfprintf_internal_r+0x18cc>
  8046b4:	1027883a 	mov	r19,r2
  8046b8:	07002074 	movhi	fp,129
  8046bc:	e7082684 	addi	fp,fp,8346
  8046c0:	050001c4 	movi	r20,7
  8046c4:	00000306 	br	8046d4 <___vfprintf_internal_r+0x81c>
  8046c8:	843ffc04 	addi	r16,r16,-16
  8046cc:	ad400204 	addi	r21,r21,8
  8046d0:	9c00130e 	bge	r19,r16,804720 <___vfprintf_internal_r+0x868>
  8046d4:	94800404 	addi	r18,r18,16
  8046d8:	8c400044 	addi	r17,r17,1
  8046dc:	af000015 	stw	fp,0(r21)
  8046e0:	acc00115 	stw	r19,4(r21)
  8046e4:	dc800e15 	stw	r18,56(sp)
  8046e8:	dc400d15 	stw	r17,52(sp)
  8046ec:	a47ff60e 	bge	r20,r17,8046c8 <___vfprintf_internal_r+0x810>
  8046f0:	d9014f17 	ldw	r4,1340(sp)
  8046f4:	b00b883a 	mov	r5,r22
  8046f8:	d9800c04 	addi	r6,sp,48
  8046fc:	d9c15115 	stw	r7,1348(sp)
  804700:	0803e600 	call	803e60 <__sprint_r>
  804704:	d9c15117 	ldw	r7,1348(sp)
  804708:	103fa31e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  80470c:	843ffc04 	addi	r16,r16,-16
  804710:	dc800e17 	ldw	r18,56(sp)
  804714:	dc400d17 	ldw	r17,52(sp)
  804718:	dd401904 	addi	r21,sp,100
  80471c:	9c3fed16 	blt	r19,r16,8046d4 <___vfprintf_internal_r+0x81c>
  804720:	9425883a 	add	r18,r18,r16
  804724:	8c400044 	addi	r17,r17,1
  804728:	008001c4 	movi	r2,7
  80472c:	af000015 	stw	fp,0(r21)
  804730:	ac000115 	stw	r16,4(r21)
  804734:	dc800e15 	stw	r18,56(sp)
  804738:	dc400d15 	stw	r17,52(sp)
  80473c:	14416116 	blt	r2,r17,804cc4 <___vfprintf_internal_r+0xe0c>
  804740:	ad400204 	addi	r21,r21,8
  804744:	003f2406 	br	8043d8 <___vfprintf_internal_r+0x520>
  804748:	d9014f17 	ldw	r4,1340(sp)
  80474c:	08079280 	call	807928 <__sinit>
  804750:	d9c15117 	ldw	r7,1348(sp)
  804754:	003def06 	br	803f14 <___vfprintf_internal_r+0x5c>
  804758:	d9014f17 	ldw	r4,1340(sp)
  80475c:	b00b883a 	mov	r5,r22
  804760:	d9c15115 	stw	r7,1348(sp)
  804764:	0805d880 	call	805d88 <__swsetup_r>
  804768:	d9c15117 	ldw	r7,1348(sp)
  80476c:	103dee26 	beq	r2,zero,803f28 <___vfprintf_internal_r+0x70>
  804770:	003f8c06 	br	8045a4 <___vfprintf_internal_r+0x6ec>
  804774:	d9014217 	ldw	r4,1288(sp)
  804778:	d9414317 	ldw	r5,1292(sp)
  80477c:	000d883a 	mov	r6,zero
  804780:	000f883a 	mov	r7,zero
  804784:	080bf240 	call	80bf24 <__eqdf2>
  804788:	1000f21e 	bne	r2,zero,804b54 <___vfprintf_internal_r+0xc9c>
  80478c:	00802074 	movhi	r2,129
  804790:	10879f04 	addi	r2,r2,7804
  804794:	94800044 	addi	r18,r18,1
  804798:	8c400044 	addi	r17,r17,1
  80479c:	a8800015 	stw	r2,0(r21)
  8047a0:	00c00044 	movi	r3,1
  8047a4:	008001c4 	movi	r2,7
  8047a8:	a8c00115 	stw	r3,4(r21)
  8047ac:	dc800e15 	stw	r18,56(sp)
  8047b0:	dc400d15 	stw	r17,52(sp)
  8047b4:	1442fa16 	blt	r2,r17,8053a0 <___vfprintf_internal_r+0x14e8>
  8047b8:	a8c00204 	addi	r3,r21,8
  8047bc:	d8800517 	ldw	r2,20(sp)
  8047c0:	d9014717 	ldw	r4,1308(sp)
  8047c4:	11015c0e 	bge	r2,r4,804d38 <___vfprintf_internal_r+0xe80>
  8047c8:	dc400d17 	ldw	r17,52(sp)
  8047cc:	d9814917 	ldw	r6,1316(sp)
  8047d0:	00800044 	movi	r2,1
  8047d4:	94800044 	addi	r18,r18,1
  8047d8:	8c400044 	addi	r17,r17,1
  8047dc:	18800115 	stw	r2,4(r3)
  8047e0:	008001c4 	movi	r2,7
  8047e4:	19800015 	stw	r6,0(r3)
  8047e8:	dc800e15 	stw	r18,56(sp)
  8047ec:	dc400d15 	stw	r17,52(sp)
  8047f0:	14431016 	blt	r2,r17,805434 <___vfprintf_internal_r+0x157c>
  8047f4:	18c00204 	addi	r3,r3,8
  8047f8:	d8814717 	ldw	r2,1308(sp)
  8047fc:	143fffc4 	addi	r16,r2,-1
  804800:	043f2b0e 	bge	zero,r16,8044b0 <___vfprintf_internal_r+0x5f8>
  804804:	00800404 	movi	r2,16
  804808:	1402a20e 	bge	r2,r16,805294 <___vfprintf_internal_r+0x13dc>
  80480c:	dc400d17 	ldw	r17,52(sp)
  804810:	1027883a 	mov	r19,r2
  804814:	07002074 	movhi	fp,129
  804818:	e7082684 	addi	fp,fp,8346
  80481c:	050001c4 	movi	r20,7
  804820:	00000306 	br	804830 <___vfprintf_internal_r+0x978>
  804824:	18c00204 	addi	r3,r3,8
  804828:	843ffc04 	addi	r16,r16,-16
  80482c:	9c029c0e 	bge	r19,r16,8052a0 <___vfprintf_internal_r+0x13e8>
  804830:	94800404 	addi	r18,r18,16
  804834:	8c400044 	addi	r17,r17,1
  804838:	1f000015 	stw	fp,0(r3)
  80483c:	1cc00115 	stw	r19,4(r3)
  804840:	dc800e15 	stw	r18,56(sp)
  804844:	dc400d15 	stw	r17,52(sp)
  804848:	a47ff60e 	bge	r20,r17,804824 <___vfprintf_internal_r+0x96c>
  80484c:	d9014f17 	ldw	r4,1340(sp)
  804850:	b00b883a 	mov	r5,r22
  804854:	d9800c04 	addi	r6,sp,48
  804858:	0803e600 	call	803e60 <__sprint_r>
  80485c:	103f4e1e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  804860:	dc800e17 	ldw	r18,56(sp)
  804864:	dc400d17 	ldw	r17,52(sp)
  804868:	d8c01904 	addi	r3,sp,100
  80486c:	003fee06 	br	804828 <___vfprintf_internal_r+0x970>
  804870:	d8802c0b 	ldhu	r2,176(sp)
  804874:	00ffffc4 	movi	r3,-1
  804878:	d8c14b15 	stw	r3,1324(sp)
  80487c:	1080100c 	andi	r2,r2,64
  804880:	103dcc1e 	bne	r2,zero,803fb4 <___vfprintf_internal_r+0xfc>
  804884:	003dce06 	br	803fc0 <___vfprintf_internal_r+0x108>
  804888:	d9014f17 	ldw	r4,1340(sp)
  80488c:	b00b883a 	mov	r5,r22
  804890:	d9800c04 	addi	r6,sp,48
  804894:	0803e600 	call	803e60 <__sprint_r>
  804898:	103f3f1e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  80489c:	dc800e17 	ldw	r18,56(sp)
  8048a0:	003f2e06 	br	80455c <___vfprintf_internal_r+0x6a4>
  8048a4:	d9414c17 	ldw	r5,1328(sp)
  8048a8:	29400414 	ori	r5,r5,16
  8048ac:	d9414c15 	stw	r5,1328(sp)
  8048b0:	d9814c17 	ldw	r6,1328(sp)
  8048b4:	3080080c 	andi	r2,r6,32
  8048b8:	10014f1e 	bne	r2,zero,804df8 <___vfprintf_internal_r+0xf40>
  8048bc:	d8c14c17 	ldw	r3,1328(sp)
  8048c0:	1880040c 	andi	r2,r3,16
  8048c4:	1002ea1e 	bne	r2,zero,805470 <___vfprintf_internal_r+0x15b8>
  8048c8:	d9014c17 	ldw	r4,1328(sp)
  8048cc:	2080100c 	andi	r2,r4,64
  8048d0:	1002e726 	beq	r2,zero,805470 <___vfprintf_internal_r+0x15b8>
  8048d4:	3880000f 	ldh	r2,0(r7)
  8048d8:	39c00104 	addi	r7,r7,4
  8048dc:	d9c14015 	stw	r7,1280(sp)
  8048e0:	1023d7fa 	srai	r17,r2,31
  8048e4:	1021883a 	mov	r16,r2
  8048e8:	88037216 	blt	r17,zero,8056b4 <___vfprintf_internal_r+0x17fc>
  8048ec:	01000044 	movi	r4,1
  8048f0:	98000416 	blt	r19,zero,804904 <___vfprintf_internal_r+0xa4c>
  8048f4:	d8c14c17 	ldw	r3,1328(sp)
  8048f8:	00bfdfc4 	movi	r2,-129
  8048fc:	1886703a 	and	r3,r3,r2
  804900:	d8c14c15 	stw	r3,1328(sp)
  804904:	8444b03a 	or	r2,r16,r17
  804908:	1002261e 	bne	r2,zero,8051a4 <___vfprintf_internal_r+0x12ec>
  80490c:	9802251e 	bne	r19,zero,8051a4 <___vfprintf_internal_r+0x12ec>
  804910:	20803fcc 	andi	r2,r4,255
  804914:	10029b26 	beq	r2,zero,805384 <___vfprintf_internal_r+0x14cc>
  804918:	d8c01904 	addi	r3,sp,100
  80491c:	dd000f04 	addi	r20,sp,60
  804920:	d8c14115 	stw	r3,1284(sp)
  804924:	d8c14117 	ldw	r3,1284(sp)
  804928:	dcc14515 	stw	r19,1300(sp)
  80492c:	a0c5c83a 	sub	r2,r20,r3
  804930:	11c00a04 	addi	r7,r2,40
  804934:	99c0010e 	bge	r19,r7,80493c <___vfprintf_internal_r+0xa84>
  804938:	d9c14515 	stw	r7,1300(sp)
  80493c:	dcc14615 	stw	r19,1304(sp)
  804940:	d8800407 	ldb	r2,16(sp)
  804944:	103e4c26 	beq	r2,zero,804278 <___vfprintf_internal_r+0x3c0>
  804948:	d8814517 	ldw	r2,1300(sp)
  80494c:	10800044 	addi	r2,r2,1
  804950:	d8814515 	stw	r2,1300(sp)
  804954:	003e4806 	br	804278 <___vfprintf_internal_r+0x3c0>
  804958:	d9814c17 	ldw	r6,1328(sp)
  80495c:	31800414 	ori	r6,r6,16
  804960:	d9814c15 	stw	r6,1328(sp)
  804964:	d8c14c17 	ldw	r3,1328(sp)
  804968:	1880080c 	andi	r2,r3,32
  80496c:	1001271e 	bne	r2,zero,804e0c <___vfprintf_internal_r+0xf54>
  804970:	d9414c17 	ldw	r5,1328(sp)
  804974:	2880040c 	andi	r2,r5,16
  804978:	1002b61e 	bne	r2,zero,805454 <___vfprintf_internal_r+0x159c>
  80497c:	d9814c17 	ldw	r6,1328(sp)
  804980:	3080100c 	andi	r2,r6,64
  804984:	1002b326 	beq	r2,zero,805454 <___vfprintf_internal_r+0x159c>
  804988:	3c00000b 	ldhu	r16,0(r7)
  80498c:	0009883a 	mov	r4,zero
  804990:	39c00104 	addi	r7,r7,4
  804994:	0023883a 	mov	r17,zero
  804998:	d9c14015 	stw	r7,1280(sp)
  80499c:	d8000405 	stb	zero,16(sp)
  8049a0:	003fd306 	br	8048f0 <___vfprintf_internal_r+0xa38>
  8049a4:	d9014c17 	ldw	r4,1328(sp)
  8049a8:	21000414 	ori	r4,r4,16
  8049ac:	d9014c15 	stw	r4,1328(sp)
  8049b0:	d9414c17 	ldw	r5,1328(sp)
  8049b4:	2880080c 	andi	r2,r5,32
  8049b8:	1001081e 	bne	r2,zero,804ddc <___vfprintf_internal_r+0xf24>
  8049bc:	d8c14c17 	ldw	r3,1328(sp)
  8049c0:	1880040c 	andi	r2,r3,16
  8049c4:	1002b01e 	bne	r2,zero,805488 <___vfprintf_internal_r+0x15d0>
  8049c8:	d9014c17 	ldw	r4,1328(sp)
  8049cc:	2080100c 	andi	r2,r4,64
  8049d0:	1002ad26 	beq	r2,zero,805488 <___vfprintf_internal_r+0x15d0>
  8049d4:	3c00000b 	ldhu	r16,0(r7)
  8049d8:	01000044 	movi	r4,1
  8049dc:	39c00104 	addi	r7,r7,4
  8049e0:	0023883a 	mov	r17,zero
  8049e4:	d9c14015 	stw	r7,1280(sp)
  8049e8:	d8000405 	stb	zero,16(sp)
  8049ec:	003fc006 	br	8048f0 <___vfprintf_internal_r+0xa38>
  8049f0:	d9014f17 	ldw	r4,1340(sp)
  8049f4:	b00b883a 	mov	r5,r22
  8049f8:	d9800c04 	addi	r6,sp,48
  8049fc:	0803e600 	call	803e60 <__sprint_r>
  804a00:	103ee51e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  804a04:	dc800e17 	ldw	r18,56(sp)
  804a08:	d8c01904 	addi	r3,sp,100
  804a0c:	d9814c17 	ldw	r6,1328(sp)
  804a10:	3080004c 	andi	r2,r6,1
  804a14:	1005003a 	cmpeq	r2,r2,zero
  804a18:	103ea51e 	bne	r2,zero,8044b0 <___vfprintf_internal_r+0x5f8>
  804a1c:	00800044 	movi	r2,1
  804a20:	dc400d17 	ldw	r17,52(sp)
  804a24:	18800115 	stw	r2,4(r3)
  804a28:	d8814917 	ldw	r2,1316(sp)
  804a2c:	94800044 	addi	r18,r18,1
  804a30:	8c400044 	addi	r17,r17,1
  804a34:	18800015 	stw	r2,0(r3)
  804a38:	008001c4 	movi	r2,7
  804a3c:	dc800e15 	stw	r18,56(sp)
  804a40:	dc400d15 	stw	r17,52(sp)
  804a44:	14421e0e 	bge	r2,r17,8052c0 <___vfprintf_internal_r+0x1408>
  804a48:	d9014f17 	ldw	r4,1340(sp)
  804a4c:	b00b883a 	mov	r5,r22
  804a50:	d9800c04 	addi	r6,sp,48
  804a54:	0803e600 	call	803e60 <__sprint_r>
  804a58:	103ecf1e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  804a5c:	dc800e17 	ldw	r18,56(sp)
  804a60:	d8c01904 	addi	r3,sp,100
  804a64:	003e9206 	br	8044b0 <___vfprintf_internal_r+0x5f8>
  804a68:	d9014f17 	ldw	r4,1340(sp)
  804a6c:	b00b883a 	mov	r5,r22
  804a70:	d9800c04 	addi	r6,sp,48
  804a74:	0803e600 	call	803e60 <__sprint_r>
  804a78:	103ec026 	beq	r2,zero,80457c <___vfprintf_internal_r+0x6c4>
  804a7c:	003ec606 	br	804598 <___vfprintf_internal_r+0x6e0>
  804a80:	d9014f17 	ldw	r4,1340(sp)
  804a84:	b00b883a 	mov	r5,r22
  804a88:	d9800c04 	addi	r6,sp,48
  804a8c:	d9c15115 	stw	r7,1348(sp)
  804a90:	0803e600 	call	803e60 <__sprint_r>
  804a94:	d9c15117 	ldw	r7,1348(sp)
  804a98:	103ebf1e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  804a9c:	dc800e17 	ldw	r18,56(sp)
  804aa0:	dc400d17 	ldw	r17,52(sp)
  804aa4:	dd401904 	addi	r21,sp,100
  804aa8:	003e7406 	br	80447c <___vfprintf_internal_r+0x5c4>
  804aac:	d9014f17 	ldw	r4,1340(sp)
  804ab0:	b00b883a 	mov	r5,r22
  804ab4:	d9800c04 	addi	r6,sp,48
  804ab8:	d9c15115 	stw	r7,1348(sp)
  804abc:	0803e600 	call	803e60 <__sprint_r>
  804ac0:	d9c15117 	ldw	r7,1348(sp)
  804ac4:	103eb41e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  804ac8:	dd401904 	addi	r21,sp,100
  804acc:	003d6d06 	br	804084 <___vfprintf_internal_r+0x1cc>
  804ad0:	d9014f17 	ldw	r4,1340(sp)
  804ad4:	b00b883a 	mov	r5,r22
  804ad8:	d9800c04 	addi	r6,sp,48
  804adc:	d9c15115 	stw	r7,1348(sp)
  804ae0:	0803e600 	call	803e60 <__sprint_r>
  804ae4:	d9c15117 	ldw	r7,1348(sp)
  804ae8:	103eab1e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  804aec:	dc800e17 	ldw	r18,56(sp)
  804af0:	dc400d17 	ldw	r17,52(sp)
  804af4:	dd401904 	addi	r21,sp,100
  804af8:	003e3406 	br	8043cc <___vfprintf_internal_r+0x514>
  804afc:	d9014f17 	ldw	r4,1340(sp)
  804b00:	b00b883a 	mov	r5,r22
  804b04:	d9800c04 	addi	r6,sp,48
  804b08:	d9c15115 	stw	r7,1348(sp)
  804b0c:	0803e600 	call	803e60 <__sprint_r>
  804b10:	d9c15117 	ldw	r7,1348(sp)
  804b14:	103ea01e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  804b18:	dc800e17 	ldw	r18,56(sp)
  804b1c:	dc400d17 	ldw	r17,52(sp)
  804b20:	dd401904 	addi	r21,sp,100
  804b24:	003e1c06 	br	804398 <___vfprintf_internal_r+0x4e0>
  804b28:	d9014f17 	ldw	r4,1340(sp)
  804b2c:	b00b883a 	mov	r5,r22
  804b30:	d9800c04 	addi	r6,sp,48
  804b34:	d9c15115 	stw	r7,1348(sp)
  804b38:	0803e600 	call	803e60 <__sprint_r>
  804b3c:	d9c15117 	ldw	r7,1348(sp)
  804b40:	103e951e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  804b44:	dc800e17 	ldw	r18,56(sp)
  804b48:	dc400d17 	ldw	r17,52(sp)
  804b4c:	dd401904 	addi	r21,sp,100
  804b50:	003e0406 	br	804364 <___vfprintf_internal_r+0x4ac>
  804b54:	d9000517 	ldw	r4,20(sp)
  804b58:	0102520e 	bge	zero,r4,8054a4 <___vfprintf_internal_r+0x15ec>
  804b5c:	d9814717 	ldw	r6,1308(sp)
  804b60:	21807a16 	blt	r4,r6,804d4c <___vfprintf_internal_r+0xe94>
  804b64:	d8814117 	ldw	r2,1284(sp)
  804b68:	91a5883a 	add	r18,r18,r6
  804b6c:	8c400044 	addi	r17,r17,1
  804b70:	a8800015 	stw	r2,0(r21)
  804b74:	008001c4 	movi	r2,7
  804b78:	a9800115 	stw	r6,4(r21)
  804b7c:	dc800e15 	stw	r18,56(sp)
  804b80:	dc400d15 	stw	r17,52(sp)
  804b84:	1442f616 	blt	r2,r17,805760 <___vfprintf_internal_r+0x18a8>
  804b88:	a8c00204 	addi	r3,r21,8
  804b8c:	d9414717 	ldw	r5,1308(sp)
  804b90:	2161c83a 	sub	r16,r4,r5
  804b94:	043f9d0e 	bge	zero,r16,804a0c <___vfprintf_internal_r+0xb54>
  804b98:	00800404 	movi	r2,16
  804b9c:	1402130e 	bge	r2,r16,8053ec <___vfprintf_internal_r+0x1534>
  804ba0:	dc400d17 	ldw	r17,52(sp)
  804ba4:	1027883a 	mov	r19,r2
  804ba8:	07002074 	movhi	fp,129
  804bac:	e7082684 	addi	fp,fp,8346
  804bb0:	050001c4 	movi	r20,7
  804bb4:	00000306 	br	804bc4 <___vfprintf_internal_r+0xd0c>
  804bb8:	18c00204 	addi	r3,r3,8
  804bbc:	843ffc04 	addi	r16,r16,-16
  804bc0:	9c020d0e 	bge	r19,r16,8053f8 <___vfprintf_internal_r+0x1540>
  804bc4:	94800404 	addi	r18,r18,16
  804bc8:	8c400044 	addi	r17,r17,1
  804bcc:	1f000015 	stw	fp,0(r3)
  804bd0:	1cc00115 	stw	r19,4(r3)
  804bd4:	dc800e15 	stw	r18,56(sp)
  804bd8:	dc400d15 	stw	r17,52(sp)
  804bdc:	a47ff60e 	bge	r20,r17,804bb8 <___vfprintf_internal_r+0xd00>
  804be0:	d9014f17 	ldw	r4,1340(sp)
  804be4:	b00b883a 	mov	r5,r22
  804be8:	d9800c04 	addi	r6,sp,48
  804bec:	0803e600 	call	803e60 <__sprint_r>
  804bf0:	103e691e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  804bf4:	dc800e17 	ldw	r18,56(sp)
  804bf8:	dc400d17 	ldw	r17,52(sp)
  804bfc:	d8c01904 	addi	r3,sp,100
  804c00:	003fee06 	br	804bbc <___vfprintf_internal_r+0xd04>
  804c04:	d8814717 	ldw	r2,1308(sp)
  804c08:	143fffc4 	addi	r16,r2,-1
  804c0c:	043e970e 	bge	zero,r16,80466c <___vfprintf_internal_r+0x7b4>
  804c10:	00800404 	movi	r2,16
  804c14:	1400180e 	bge	r2,r16,804c78 <___vfprintf_internal_r+0xdc0>
  804c18:	1029883a 	mov	r20,r2
  804c1c:	07002074 	movhi	fp,129
  804c20:	e7082684 	addi	fp,fp,8346
  804c24:	054001c4 	movi	r21,7
  804c28:	00000306 	br	804c38 <___vfprintf_internal_r+0xd80>
  804c2c:	9cc00204 	addi	r19,r19,8
  804c30:	843ffc04 	addi	r16,r16,-16
  804c34:	a400120e 	bge	r20,r16,804c80 <___vfprintf_internal_r+0xdc8>
  804c38:	94800404 	addi	r18,r18,16
  804c3c:	8c400044 	addi	r17,r17,1
  804c40:	9f000015 	stw	fp,0(r19)
  804c44:	9d000115 	stw	r20,4(r19)
  804c48:	dc800e15 	stw	r18,56(sp)
  804c4c:	dc400d15 	stw	r17,52(sp)
  804c50:	ac7ff60e 	bge	r21,r17,804c2c <___vfprintf_internal_r+0xd74>
  804c54:	d9014f17 	ldw	r4,1340(sp)
  804c58:	b00b883a 	mov	r5,r22
  804c5c:	d9800c04 	addi	r6,sp,48
  804c60:	0803e600 	call	803e60 <__sprint_r>
  804c64:	103e4c1e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  804c68:	dc800e17 	ldw	r18,56(sp)
  804c6c:	dc400d17 	ldw	r17,52(sp)
  804c70:	dcc01904 	addi	r19,sp,100
  804c74:	003fee06 	br	804c30 <___vfprintf_internal_r+0xd78>
  804c78:	07002074 	movhi	fp,129
  804c7c:	e7082684 	addi	fp,fp,8346
  804c80:	9425883a 	add	r18,r18,r16
  804c84:	8c400044 	addi	r17,r17,1
  804c88:	008001c4 	movi	r2,7
  804c8c:	9f000015 	stw	fp,0(r19)
  804c90:	9c000115 	stw	r16,4(r19)
  804c94:	dc800e15 	stw	r18,56(sp)
  804c98:	dc400d15 	stw	r17,52(sp)
  804c9c:	147e720e 	bge	r2,r17,804668 <___vfprintf_internal_r+0x7b0>
  804ca0:	d9014f17 	ldw	r4,1340(sp)
  804ca4:	b00b883a 	mov	r5,r22
  804ca8:	d9800c04 	addi	r6,sp,48
  804cac:	0803e600 	call	803e60 <__sprint_r>
  804cb0:	103e391e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  804cb4:	dc800e17 	ldw	r18,56(sp)
  804cb8:	dc400d17 	ldw	r17,52(sp)
  804cbc:	dcc01904 	addi	r19,sp,100
  804cc0:	003e6a06 	br	80466c <___vfprintf_internal_r+0x7b4>
  804cc4:	d9014f17 	ldw	r4,1340(sp)
  804cc8:	b00b883a 	mov	r5,r22
  804ccc:	d9800c04 	addi	r6,sp,48
  804cd0:	d9c15115 	stw	r7,1348(sp)
  804cd4:	0803e600 	call	803e60 <__sprint_r>
  804cd8:	d9c15117 	ldw	r7,1348(sp)
  804cdc:	103e2e1e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  804ce0:	dc800e17 	ldw	r18,56(sp)
  804ce4:	dc400d17 	ldw	r17,52(sp)
  804ce8:	dd401904 	addi	r21,sp,100
  804cec:	003dba06 	br	8043d8 <___vfprintf_internal_r+0x520>
  804cf0:	d9014f17 	ldw	r4,1340(sp)
  804cf4:	b00b883a 	mov	r5,r22
  804cf8:	d9800c04 	addi	r6,sp,48
  804cfc:	0803e600 	call	803e60 <__sprint_r>
  804d00:	103e251e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  804d04:	dc800e17 	ldw	r18,56(sp)
  804d08:	dc400d17 	ldw	r17,52(sp)
  804d0c:	dcc01904 	addi	r19,sp,100
  804d10:	003e4206 	br	80461c <___vfprintf_internal_r+0x764>
  804d14:	d9014f17 	ldw	r4,1340(sp)
  804d18:	b00b883a 	mov	r5,r22
  804d1c:	d9800c04 	addi	r6,sp,48
  804d20:	0803e600 	call	803e60 <__sprint_r>
  804d24:	103e1c1e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  804d28:	dc800e17 	ldw	r18,56(sp)
  804d2c:	dc400d17 	ldw	r17,52(sp)
  804d30:	d8c01904 	addi	r3,sp,100
  804d34:	003e2e06 	br	8045f0 <___vfprintf_internal_r+0x738>
  804d38:	d9414c17 	ldw	r5,1328(sp)
  804d3c:	2880004c 	andi	r2,r5,1
  804d40:	1005003a 	cmpeq	r2,r2,zero
  804d44:	103dda1e 	bne	r2,zero,8044b0 <___vfprintf_internal_r+0x5f8>
  804d48:	003e9f06 	br	8047c8 <___vfprintf_internal_r+0x910>
  804d4c:	d8c14117 	ldw	r3,1284(sp)
  804d50:	9125883a 	add	r18,r18,r4
  804d54:	8c400044 	addi	r17,r17,1
  804d58:	008001c4 	movi	r2,7
  804d5c:	a8c00015 	stw	r3,0(r21)
  804d60:	a9000115 	stw	r4,4(r21)
  804d64:	dc800e15 	stw	r18,56(sp)
  804d68:	dc400d15 	stw	r17,52(sp)
  804d6c:	14426616 	blt	r2,r17,805708 <___vfprintf_internal_r+0x1850>
  804d70:	a8c00204 	addi	r3,r21,8
  804d74:	d9414917 	ldw	r5,1316(sp)
  804d78:	00800044 	movi	r2,1
  804d7c:	94800044 	addi	r18,r18,1
  804d80:	8c400044 	addi	r17,r17,1
  804d84:	18800115 	stw	r2,4(r3)
  804d88:	008001c4 	movi	r2,7
  804d8c:	19400015 	stw	r5,0(r3)
  804d90:	dc800e15 	stw	r18,56(sp)
  804d94:	dc400d15 	stw	r17,52(sp)
  804d98:	2021883a 	mov	r16,r4
  804d9c:	14425016 	blt	r2,r17,8056e0 <___vfprintf_internal_r+0x1828>
  804da0:	19400204 	addi	r5,r3,8
  804da4:	d9814717 	ldw	r6,1308(sp)
  804da8:	8c400044 	addi	r17,r17,1
  804dac:	dc400d15 	stw	r17,52(sp)
  804db0:	3107c83a 	sub	r3,r6,r4
  804db4:	d9014117 	ldw	r4,1284(sp)
  804db8:	90e5883a 	add	r18,r18,r3
  804dbc:	28c00115 	stw	r3,4(r5)
  804dc0:	8105883a 	add	r2,r16,r4
  804dc4:	28800015 	stw	r2,0(r5)
  804dc8:	008001c4 	movi	r2,7
  804dcc:	dc800e15 	stw	r18,56(sp)
  804dd0:	147f1d16 	blt	r2,r17,804a48 <___vfprintf_internal_r+0xb90>
  804dd4:	28c00204 	addi	r3,r5,8
  804dd8:	003db506 	br	8044b0 <___vfprintf_internal_r+0x5f8>
  804ddc:	3c000017 	ldw	r16,0(r7)
  804de0:	3c400117 	ldw	r17,4(r7)
  804de4:	39800204 	addi	r6,r7,8
  804de8:	01000044 	movi	r4,1
  804dec:	d9814015 	stw	r6,1280(sp)
  804df0:	d8000405 	stb	zero,16(sp)
  804df4:	003ebe06 	br	8048f0 <___vfprintf_internal_r+0xa38>
  804df8:	3c000017 	ldw	r16,0(r7)
  804dfc:	3c400117 	ldw	r17,4(r7)
  804e00:	38800204 	addi	r2,r7,8
  804e04:	d8814015 	stw	r2,1280(sp)
  804e08:	003eb706 	br	8048e8 <___vfprintf_internal_r+0xa30>
  804e0c:	3c000017 	ldw	r16,0(r7)
  804e10:	3c400117 	ldw	r17,4(r7)
  804e14:	39000204 	addi	r4,r7,8
  804e18:	d9014015 	stw	r4,1280(sp)
  804e1c:	0009883a 	mov	r4,zero
  804e20:	d8000405 	stb	zero,16(sp)
  804e24:	003eb206 	br	8048f0 <___vfprintf_internal_r+0xa38>
  804e28:	38c00017 	ldw	r3,0(r7)
  804e2c:	39c00104 	addi	r7,r7,4
  804e30:	d8c14a15 	stw	r3,1320(sp)
  804e34:	1800d10e 	bge	r3,zero,80517c <___vfprintf_internal_r+0x12c4>
  804e38:	00c7c83a 	sub	r3,zero,r3
  804e3c:	d8c14a15 	stw	r3,1320(sp)
  804e40:	d9014c17 	ldw	r4,1328(sp)
  804e44:	b8c00007 	ldb	r3,0(r23)
  804e48:	21000114 	ori	r4,r4,4
  804e4c:	d9014c15 	stw	r4,1328(sp)
  804e50:	003c9806 	br	8040b4 <___vfprintf_internal_r+0x1fc>
  804e54:	d9814c17 	ldw	r6,1328(sp)
  804e58:	3080080c 	andi	r2,r6,32
  804e5c:	1001f026 	beq	r2,zero,805620 <___vfprintf_internal_r+0x1768>
  804e60:	d9014b17 	ldw	r4,1324(sp)
  804e64:	38800017 	ldw	r2,0(r7)
  804e68:	39c00104 	addi	r7,r7,4
  804e6c:	d9c14015 	stw	r7,1280(sp)
  804e70:	2007d7fa 	srai	r3,r4,31
  804e74:	d9c14017 	ldw	r7,1280(sp)
  804e78:	11000015 	stw	r4,0(r2)
  804e7c:	10c00115 	stw	r3,4(r2)
  804e80:	003c6906 	br	804028 <___vfprintf_internal_r+0x170>
  804e84:	b8c00007 	ldb	r3,0(r23)
  804e88:	00801b04 	movi	r2,108
  804e8c:	18824f26 	beq	r3,r2,8057cc <___vfprintf_internal_r+0x1914>
  804e90:	d9414c17 	ldw	r5,1328(sp)
  804e94:	29400414 	ori	r5,r5,16
  804e98:	d9414c15 	stw	r5,1328(sp)
  804e9c:	003c8506 	br	8040b4 <___vfprintf_internal_r+0x1fc>
  804ea0:	d9814c17 	ldw	r6,1328(sp)
  804ea4:	b8c00007 	ldb	r3,0(r23)
  804ea8:	31800814 	ori	r6,r6,32
  804eac:	d9814c15 	stw	r6,1328(sp)
  804eb0:	003c8006 	br	8040b4 <___vfprintf_internal_r+0x1fc>
  804eb4:	d8814c17 	ldw	r2,1328(sp)
  804eb8:	3c000017 	ldw	r16,0(r7)
  804ebc:	00c01e04 	movi	r3,120
  804ec0:	10800094 	ori	r2,r2,2
  804ec4:	d8814c15 	stw	r2,1328(sp)
  804ec8:	39c00104 	addi	r7,r7,4
  804ecc:	01402074 	movhi	r5,129
  804ed0:	29481004 	addi	r5,r5,8256
  804ed4:	00800c04 	movi	r2,48
  804ed8:	0023883a 	mov	r17,zero
  804edc:	01000084 	movi	r4,2
  804ee0:	d9c14015 	stw	r7,1280(sp)
  804ee4:	d8c14d15 	stw	r3,1332(sp)
  804ee8:	d9414415 	stw	r5,1296(sp)
  804eec:	d8800445 	stb	r2,17(sp)
  804ef0:	d8c00485 	stb	r3,18(sp)
  804ef4:	d8000405 	stb	zero,16(sp)
  804ef8:	003e7d06 	br	8048f0 <___vfprintf_internal_r+0xa38>
  804efc:	d8814c17 	ldw	r2,1328(sp)
  804f00:	b8c00007 	ldb	r3,0(r23)
  804f04:	10801014 	ori	r2,r2,64
  804f08:	d8814c15 	stw	r2,1328(sp)
  804f0c:	003c6906 	br	8040b4 <___vfprintf_internal_r+0x1fc>
  804f10:	d9414c17 	ldw	r5,1328(sp)
  804f14:	2880020c 	andi	r2,r5,8
  804f18:	1001df26 	beq	r2,zero,805698 <___vfprintf_internal_r+0x17e0>
  804f1c:	39800017 	ldw	r6,0(r7)
  804f20:	38800204 	addi	r2,r7,8
  804f24:	d8814015 	stw	r2,1280(sp)
  804f28:	d9814215 	stw	r6,1288(sp)
  804f2c:	39c00117 	ldw	r7,4(r7)
  804f30:	d9c14315 	stw	r7,1292(sp)
  804f34:	d9014217 	ldw	r4,1288(sp)
  804f38:	d9414317 	ldw	r5,1292(sp)
  804f3c:	080a8580 	call	80a858 <__isinfd>
  804f40:	10021726 	beq	r2,zero,8057a0 <___vfprintf_internal_r+0x18e8>
  804f44:	d9014217 	ldw	r4,1288(sp)
  804f48:	d9414317 	ldw	r5,1292(sp)
  804f4c:	000d883a 	mov	r6,zero
  804f50:	000f883a 	mov	r7,zero
  804f54:	080c0bc0 	call	80c0bc <__ltdf2>
  804f58:	1002ca16 	blt	r2,zero,805a84 <___vfprintf_internal_r+0x1bcc>
  804f5c:	d9414d17 	ldw	r5,1332(sp)
  804f60:	008011c4 	movi	r2,71
  804f64:	11420a16 	blt	r2,r5,805790 <___vfprintf_internal_r+0x18d8>
  804f68:	01802074 	movhi	r6,129
  804f6c:	31881504 	addi	r6,r6,8276
  804f70:	d9814115 	stw	r6,1284(sp)
  804f74:	d9014c17 	ldw	r4,1328(sp)
  804f78:	00c000c4 	movi	r3,3
  804f7c:	00bfdfc4 	movi	r2,-129
  804f80:	2088703a 	and	r4,r4,r2
  804f84:	180f883a 	mov	r7,r3
  804f88:	d8c14515 	stw	r3,1300(sp)
  804f8c:	d9014c15 	stw	r4,1328(sp)
  804f90:	d8014615 	stw	zero,1304(sp)
  804f94:	003e6a06 	br	804940 <___vfprintf_internal_r+0xa88>
  804f98:	38800017 	ldw	r2,0(r7)
  804f9c:	00c00044 	movi	r3,1
  804fa0:	39c00104 	addi	r7,r7,4
  804fa4:	d9c14015 	stw	r7,1280(sp)
  804fa8:	d9000f04 	addi	r4,sp,60
  804fac:	180f883a 	mov	r7,r3
  804fb0:	d8c14515 	stw	r3,1300(sp)
  804fb4:	d9014115 	stw	r4,1284(sp)
  804fb8:	d8800f05 	stb	r2,60(sp)
  804fbc:	d8000405 	stb	zero,16(sp)
  804fc0:	003cac06 	br	804274 <___vfprintf_internal_r+0x3bc>
  804fc4:	01402074 	movhi	r5,129
  804fc8:	29481b04 	addi	r5,r5,8300
  804fcc:	d9414415 	stw	r5,1296(sp)
  804fd0:	d9814c17 	ldw	r6,1328(sp)
  804fd4:	3080080c 	andi	r2,r6,32
  804fd8:	1000f926 	beq	r2,zero,8053c0 <___vfprintf_internal_r+0x1508>
  804fdc:	3c000017 	ldw	r16,0(r7)
  804fe0:	3c400117 	ldw	r17,4(r7)
  804fe4:	38800204 	addi	r2,r7,8
  804fe8:	d8814015 	stw	r2,1280(sp)
  804fec:	d9414c17 	ldw	r5,1328(sp)
  804ff0:	2880004c 	andi	r2,r5,1
  804ff4:	1005003a 	cmpeq	r2,r2,zero
  804ff8:	1000b31e 	bne	r2,zero,8052c8 <___vfprintf_internal_r+0x1410>
  804ffc:	8444b03a 	or	r2,r16,r17
  805000:	1000b126 	beq	r2,zero,8052c8 <___vfprintf_internal_r+0x1410>
  805004:	d9814d17 	ldw	r6,1332(sp)
  805008:	29400094 	ori	r5,r5,2
  80500c:	00800c04 	movi	r2,48
  805010:	01000084 	movi	r4,2
  805014:	d9414c15 	stw	r5,1328(sp)
  805018:	d8800445 	stb	r2,17(sp)
  80501c:	d9800485 	stb	r6,18(sp)
  805020:	d8000405 	stb	zero,16(sp)
  805024:	003e3206 	br	8048f0 <___vfprintf_internal_r+0xa38>
  805028:	01802074 	movhi	r6,129
  80502c:	31881004 	addi	r6,r6,8256
  805030:	d9814415 	stw	r6,1296(sp)
  805034:	003fe606 	br	804fd0 <___vfprintf_internal_r+0x1118>
  805038:	00800ac4 	movi	r2,43
  80503c:	d8800405 	stb	r2,16(sp)
  805040:	b8c00007 	ldb	r3,0(r23)
  805044:	003c1b06 	br	8040b4 <___vfprintf_internal_r+0x1fc>
  805048:	d8814c17 	ldw	r2,1328(sp)
  80504c:	b8c00007 	ldb	r3,0(r23)
  805050:	10800054 	ori	r2,r2,1
  805054:	d8814c15 	stw	r2,1328(sp)
  805058:	003c1606 	br	8040b4 <___vfprintf_internal_r+0x1fc>
  80505c:	d8800407 	ldb	r2,16(sp)
  805060:	1000461e 	bne	r2,zero,80517c <___vfprintf_internal_r+0x12c4>
  805064:	00800804 	movi	r2,32
  805068:	d8800405 	stb	r2,16(sp)
  80506c:	b8c00007 	ldb	r3,0(r23)
  805070:	003c1006 	br	8040b4 <___vfprintf_internal_r+0x1fc>
  805074:	d9814c17 	ldw	r6,1328(sp)
  805078:	b8c00007 	ldb	r3,0(r23)
  80507c:	31800214 	ori	r6,r6,8
  805080:	d9814c15 	stw	r6,1328(sp)
  805084:	003c0b06 	br	8040b4 <___vfprintf_internal_r+0x1fc>
  805088:	0007883a 	mov	r3,zero
  80508c:	01000244 	movi	r4,9
  805090:	188002a4 	muli	r2,r3,10
  805094:	b8c00007 	ldb	r3,0(r23)
  805098:	d9814d17 	ldw	r6,1332(sp)
  80509c:	bdc00044 	addi	r23,r23,1
  8050a0:	d8c14d15 	stw	r3,1332(sp)
  8050a4:	d9414d17 	ldw	r5,1332(sp)
  8050a8:	3085883a 	add	r2,r6,r2
  8050ac:	10fff404 	addi	r3,r2,-48
  8050b0:	28bff404 	addi	r2,r5,-48
  8050b4:	20bff62e 	bgeu	r4,r2,805090 <___vfprintf_internal_r+0x11d8>
  8050b8:	d8c14a15 	stw	r3,1320(sp)
  8050bc:	003bff06 	br	8040bc <___vfprintf_internal_r+0x204>
  8050c0:	d9414c17 	ldw	r5,1328(sp)
  8050c4:	b8c00007 	ldb	r3,0(r23)
  8050c8:	29402014 	ori	r5,r5,128
  8050cc:	d9414c15 	stw	r5,1328(sp)
  8050d0:	003bf806 	br	8040b4 <___vfprintf_internal_r+0x1fc>
  8050d4:	b8c00007 	ldb	r3,0(r23)
  8050d8:	00800a84 	movi	r2,42
  8050dc:	bdc00044 	addi	r23,r23,1
  8050e0:	18831526 	beq	r3,r2,805d38 <___vfprintf_internal_r+0x1e80>
  8050e4:	d8c14d15 	stw	r3,1332(sp)
  8050e8:	18bff404 	addi	r2,r3,-48
  8050ec:	00c00244 	movi	r3,9
  8050f0:	18827836 	bltu	r3,r2,805ad4 <___vfprintf_internal_r+0x1c1c>
  8050f4:	000d883a 	mov	r6,zero
  8050f8:	308002a4 	muli	r2,r6,10
  8050fc:	b9800007 	ldb	r6,0(r23)
  805100:	d9414d17 	ldw	r5,1332(sp)
  805104:	bdc00044 	addi	r23,r23,1
  805108:	d9814d15 	stw	r6,1332(sp)
  80510c:	d9014d17 	ldw	r4,1332(sp)
  805110:	1145883a 	add	r2,r2,r5
  805114:	11bff404 	addi	r6,r2,-48
  805118:	20bff404 	addi	r2,r4,-48
  80511c:	18bff62e 	bgeu	r3,r2,8050f8 <___vfprintf_internal_r+0x1240>
  805120:	3027883a 	mov	r19,r6
  805124:	303be50e 	bge	r6,zero,8040bc <___vfprintf_internal_r+0x204>
  805128:	04ffffc4 	movi	r19,-1
  80512c:	003be306 	br	8040bc <___vfprintf_internal_r+0x204>
  805130:	d8000405 	stb	zero,16(sp)
  805134:	39800017 	ldw	r6,0(r7)
  805138:	39c00104 	addi	r7,r7,4
  80513c:	d9c14015 	stw	r7,1280(sp)
  805140:	d9814115 	stw	r6,1284(sp)
  805144:	3001c926 	beq	r6,zero,80586c <___vfprintf_internal_r+0x19b4>
  805148:	98000e16 	blt	r19,zero,805184 <___vfprintf_internal_r+0x12cc>
  80514c:	d9014117 	ldw	r4,1284(sp)
  805150:	000b883a 	mov	r5,zero
  805154:	980d883a 	mov	r6,r19
  805158:	0808f740 	call	808f74 <memchr>
  80515c:	10025926 	beq	r2,zero,805ac4 <___vfprintf_internal_r+0x1c0c>
  805160:	d8c14117 	ldw	r3,1284(sp)
  805164:	10cfc83a 	sub	r7,r2,r3
  805168:	99c19e16 	blt	r19,r7,8057e4 <___vfprintf_internal_r+0x192c>
  80516c:	d9c14515 	stw	r7,1300(sp)
  805170:	38000916 	blt	r7,zero,805198 <___vfprintf_internal_r+0x12e0>
  805174:	d8014615 	stw	zero,1304(sp)
  805178:	003df106 	br	804940 <___vfprintf_internal_r+0xa88>
  80517c:	b8c00007 	ldb	r3,0(r23)
  805180:	003bcc06 	br	8040b4 <___vfprintf_internal_r+0x1fc>
  805184:	d9014117 	ldw	r4,1284(sp)
  805188:	0803dec0 	call	803dec <strlen>
  80518c:	d8814515 	stw	r2,1300(sp)
  805190:	100f883a 	mov	r7,r2
  805194:	103ff70e 	bge	r2,zero,805174 <___vfprintf_internal_r+0x12bc>
  805198:	d8014515 	stw	zero,1300(sp)
  80519c:	d8014615 	stw	zero,1304(sp)
  8051a0:	003de706 	br	804940 <___vfprintf_internal_r+0xa88>
  8051a4:	20c03fcc 	andi	r3,r4,255
  8051a8:	00800044 	movi	r2,1
  8051ac:	18802d26 	beq	r3,r2,805264 <___vfprintf_internal_r+0x13ac>
  8051b0:	18800e36 	bltu	r3,r2,8051ec <___vfprintf_internal_r+0x1334>
  8051b4:	00800084 	movi	r2,2
  8051b8:	1880fa26 	beq	r3,r2,8055a4 <___vfprintf_internal_r+0x16ec>
  8051bc:	01002074 	movhi	r4,129
  8051c0:	21082004 	addi	r4,r4,8320
  8051c4:	0803dec0 	call	803dec <strlen>
  8051c8:	100f883a 	mov	r7,r2
  8051cc:	dcc14515 	stw	r19,1300(sp)
  8051d0:	9880010e 	bge	r19,r2,8051d8 <___vfprintf_internal_r+0x1320>
  8051d4:	d8814515 	stw	r2,1300(sp)
  8051d8:	00802074 	movhi	r2,129
  8051dc:	10882004 	addi	r2,r2,8320
  8051e0:	dcc14615 	stw	r19,1304(sp)
  8051e4:	d8814115 	stw	r2,1284(sp)
  8051e8:	003dd506 	br	804940 <___vfprintf_internal_r+0xa88>
  8051ec:	d9401904 	addi	r5,sp,100
  8051f0:	dd000f04 	addi	r20,sp,60
  8051f4:	d9414115 	stw	r5,1284(sp)
  8051f8:	880a977a 	slli	r5,r17,29
  8051fc:	d9814117 	ldw	r6,1284(sp)
  805200:	8004d0fa 	srli	r2,r16,3
  805204:	8806d0fa 	srli	r3,r17,3
  805208:	810001cc 	andi	r4,r16,7
  80520c:	2884b03a 	or	r2,r5,r2
  805210:	31bfffc4 	addi	r6,r6,-1
  805214:	21000c04 	addi	r4,r4,48
  805218:	d9814115 	stw	r6,1284(sp)
  80521c:	10cab03a 	or	r5,r2,r3
  805220:	31000005 	stb	r4,0(r6)
  805224:	1021883a 	mov	r16,r2
  805228:	1823883a 	mov	r17,r3
  80522c:	283ff21e 	bne	r5,zero,8051f8 <___vfprintf_internal_r+0x1340>
  805230:	d8c14c17 	ldw	r3,1328(sp)
  805234:	1880004c 	andi	r2,r3,1
  805238:	1005003a 	cmpeq	r2,r2,zero
  80523c:	103db91e 	bne	r2,zero,804924 <___vfprintf_internal_r+0xa6c>
  805240:	20803fcc 	andi	r2,r4,255
  805244:	1080201c 	xori	r2,r2,128
  805248:	10bfe004 	addi	r2,r2,-128
  80524c:	00c00c04 	movi	r3,48
  805250:	10fdb426 	beq	r2,r3,804924 <___vfprintf_internal_r+0xa6c>
  805254:	31bfffc4 	addi	r6,r6,-1
  805258:	d9814115 	stw	r6,1284(sp)
  80525c:	30c00005 	stb	r3,0(r6)
  805260:	003db006 	br	804924 <___vfprintf_internal_r+0xa6c>
  805264:	88800068 	cmpgeui	r2,r17,1
  805268:	10002c1e 	bne	r2,zero,80531c <___vfprintf_internal_r+0x1464>
  80526c:	8800021e 	bne	r17,zero,805278 <___vfprintf_internal_r+0x13c0>
  805270:	00800244 	movi	r2,9
  805274:	14002936 	bltu	r2,r16,80531c <___vfprintf_internal_r+0x1464>
  805278:	d90018c4 	addi	r4,sp,99
  80527c:	dd000f04 	addi	r20,sp,60
  805280:	d9014115 	stw	r4,1284(sp)
  805284:	d9014117 	ldw	r4,1284(sp)
  805288:	80800c04 	addi	r2,r16,48
  80528c:	20800005 	stb	r2,0(r4)
  805290:	003da406 	br	804924 <___vfprintf_internal_r+0xa6c>
  805294:	dc400d17 	ldw	r17,52(sp)
  805298:	07002074 	movhi	fp,129
  80529c:	e7082684 	addi	fp,fp,8346
  8052a0:	9425883a 	add	r18,r18,r16
  8052a4:	8c400044 	addi	r17,r17,1
  8052a8:	008001c4 	movi	r2,7
  8052ac:	1f000015 	stw	fp,0(r3)
  8052b0:	1c000115 	stw	r16,4(r3)
  8052b4:	dc800e15 	stw	r18,56(sp)
  8052b8:	dc400d15 	stw	r17,52(sp)
  8052bc:	147de216 	blt	r2,r17,804a48 <___vfprintf_internal_r+0xb90>
  8052c0:	18c00204 	addi	r3,r3,8
  8052c4:	003c7a06 	br	8044b0 <___vfprintf_internal_r+0x5f8>
  8052c8:	01000084 	movi	r4,2
  8052cc:	d8000405 	stb	zero,16(sp)
  8052d0:	003d8706 	br	8048f0 <___vfprintf_internal_r+0xa38>
  8052d4:	d9814c17 	ldw	r6,1328(sp)
  8052d8:	30c4703a 	and	r2,r6,r3
  8052dc:	1005003a 	cmpeq	r2,r2,zero
  8052e0:	103cb926 	beq	r2,zero,8045c8 <___vfprintf_internal_r+0x710>
  8052e4:	d9014117 	ldw	r4,1284(sp)
  8052e8:	94800044 	addi	r18,r18,1
  8052ec:	8c400044 	addi	r17,r17,1
  8052f0:	008001c4 	movi	r2,7
  8052f4:	a9000015 	stw	r4,0(r21)
  8052f8:	a8c00115 	stw	r3,4(r21)
  8052fc:	dc800e15 	stw	r18,56(sp)
  805300:	dc400d15 	stw	r17,52(sp)
  805304:	147e6616 	blt	r2,r17,804ca0 <___vfprintf_internal_r+0xde8>
  805308:	acc00204 	addi	r19,r21,8
  80530c:	003cd706 	br	80466c <___vfprintf_internal_r+0x7b4>
  805310:	07002074 	movhi	fp,129
  805314:	e7082684 	addi	fp,fp,8346
  805318:	003c4f06 	br	804458 <___vfprintf_internal_r+0x5a0>
  80531c:	dd000f04 	addi	r20,sp,60
  805320:	dc801904 	addi	r18,sp,100
  805324:	8009883a 	mov	r4,r16
  805328:	880b883a 	mov	r5,r17
  80532c:	01800284 	movi	r6,10
  805330:	000f883a 	mov	r7,zero
  805334:	080b5b00 	call	80b5b0 <__umoddi3>
  805338:	12000c04 	addi	r8,r2,48
  80533c:	94bfffc4 	addi	r18,r18,-1
  805340:	8009883a 	mov	r4,r16
  805344:	880b883a 	mov	r5,r17
  805348:	01800284 	movi	r6,10
  80534c:	000f883a 	mov	r7,zero
  805350:	92000005 	stb	r8,0(r18)
  805354:	080afd40 	call	80afd4 <__udivdi3>
  805358:	1009883a 	mov	r4,r2
  80535c:	1021883a 	mov	r16,r2
  805360:	18800068 	cmpgeui	r2,r3,1
  805364:	1823883a 	mov	r17,r3
  805368:	103fee1e 	bne	r2,zero,805324 <___vfprintf_internal_r+0x146c>
  80536c:	1800021e 	bne	r3,zero,805378 <___vfprintf_internal_r+0x14c0>
  805370:	00800244 	movi	r2,9
  805374:	113feb36 	bltu	r2,r4,805324 <___vfprintf_internal_r+0x146c>
  805378:	94bfffc4 	addi	r18,r18,-1
  80537c:	dc814115 	stw	r18,1284(sp)
  805380:	003fc006 	br	805284 <___vfprintf_internal_r+0x13cc>
  805384:	d9014c17 	ldw	r4,1328(sp)
  805388:	2080004c 	andi	r2,r4,1
  80538c:	10009a1e 	bne	r2,zero,8055f8 <___vfprintf_internal_r+0x1740>
  805390:	d9401904 	addi	r5,sp,100
  805394:	dd000f04 	addi	r20,sp,60
  805398:	d9414115 	stw	r5,1284(sp)
  80539c:	003d6106 	br	804924 <___vfprintf_internal_r+0xa6c>
  8053a0:	d9014f17 	ldw	r4,1340(sp)
  8053a4:	b00b883a 	mov	r5,r22
  8053a8:	d9800c04 	addi	r6,sp,48
  8053ac:	0803e600 	call	803e60 <__sprint_r>
  8053b0:	103c791e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  8053b4:	dc800e17 	ldw	r18,56(sp)
  8053b8:	d8c01904 	addi	r3,sp,100
  8053bc:	003cff06 	br	8047bc <___vfprintf_internal_r+0x904>
  8053c0:	d8c14c17 	ldw	r3,1328(sp)
  8053c4:	1880040c 	andi	r2,r3,16
  8053c8:	1000711e 	bne	r2,zero,805590 <___vfprintf_internal_r+0x16d8>
  8053cc:	d9014c17 	ldw	r4,1328(sp)
  8053d0:	2080100c 	andi	r2,r4,64
  8053d4:	10006e26 	beq	r2,zero,805590 <___vfprintf_internal_r+0x16d8>
  8053d8:	3c00000b 	ldhu	r16,0(r7)
  8053dc:	0023883a 	mov	r17,zero
  8053e0:	39c00104 	addi	r7,r7,4
  8053e4:	d9c14015 	stw	r7,1280(sp)
  8053e8:	003f0006 	br	804fec <___vfprintf_internal_r+0x1134>
  8053ec:	dc400d17 	ldw	r17,52(sp)
  8053f0:	07002074 	movhi	fp,129
  8053f4:	e7082684 	addi	fp,fp,8346
  8053f8:	9425883a 	add	r18,r18,r16
  8053fc:	8c400044 	addi	r17,r17,1
  805400:	008001c4 	movi	r2,7
  805404:	1f000015 	stw	fp,0(r3)
  805408:	1c000115 	stw	r16,4(r3)
  80540c:	dc800e15 	stw	r18,56(sp)
  805410:	dc400d15 	stw	r17,52(sp)
  805414:	147d7616 	blt	r2,r17,8049f0 <___vfprintf_internal_r+0xb38>
  805418:	18c00204 	addi	r3,r3,8
  80541c:	003d7b06 	br	804a0c <___vfprintf_internal_r+0xb54>
  805420:	dc800e17 	ldw	r18,56(sp)
  805424:	dc400d17 	ldw	r17,52(sp)
  805428:	07002074 	movhi	fp,129
  80542c:	e7082a84 	addi	fp,fp,8362
  805430:	003bc006 	br	804334 <___vfprintf_internal_r+0x47c>
  805434:	d9014f17 	ldw	r4,1340(sp)
  805438:	b00b883a 	mov	r5,r22
  80543c:	d9800c04 	addi	r6,sp,48
  805440:	0803e600 	call	803e60 <__sprint_r>
  805444:	103c541e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  805448:	dc800e17 	ldw	r18,56(sp)
  80544c:	d8c01904 	addi	r3,sp,100
  805450:	003ce906 	br	8047f8 <___vfprintf_internal_r+0x940>
  805454:	3c000017 	ldw	r16,0(r7)
  805458:	0009883a 	mov	r4,zero
  80545c:	39c00104 	addi	r7,r7,4
  805460:	0023883a 	mov	r17,zero
  805464:	d9c14015 	stw	r7,1280(sp)
  805468:	d8000405 	stb	zero,16(sp)
  80546c:	003d2006 	br	8048f0 <___vfprintf_internal_r+0xa38>
  805470:	38800017 	ldw	r2,0(r7)
  805474:	39c00104 	addi	r7,r7,4
  805478:	d9c14015 	stw	r7,1280(sp)
  80547c:	1023d7fa 	srai	r17,r2,31
  805480:	1021883a 	mov	r16,r2
  805484:	003d1806 	br	8048e8 <___vfprintf_internal_r+0xa30>
  805488:	3c000017 	ldw	r16,0(r7)
  80548c:	01000044 	movi	r4,1
  805490:	39c00104 	addi	r7,r7,4
  805494:	0023883a 	mov	r17,zero
  805498:	d9c14015 	stw	r7,1280(sp)
  80549c:	d8000405 	stb	zero,16(sp)
  8054a0:	003d1306 	br	8048f0 <___vfprintf_internal_r+0xa38>
  8054a4:	00802074 	movhi	r2,129
  8054a8:	10879f04 	addi	r2,r2,7804
  8054ac:	94800044 	addi	r18,r18,1
  8054b0:	8c400044 	addi	r17,r17,1
  8054b4:	a8800015 	stw	r2,0(r21)
  8054b8:	00c00044 	movi	r3,1
  8054bc:	008001c4 	movi	r2,7
  8054c0:	a8c00115 	stw	r3,4(r21)
  8054c4:	dc800e15 	stw	r18,56(sp)
  8054c8:	dc400d15 	stw	r17,52(sp)
  8054cc:	1440ca16 	blt	r2,r17,8057f8 <___vfprintf_internal_r+0x1940>
  8054d0:	a8c00204 	addi	r3,r21,8
  8054d4:	2000061e 	bne	r4,zero,8054f0 <___vfprintf_internal_r+0x1638>
  8054d8:	d9414717 	ldw	r5,1308(sp)
  8054dc:	2800041e 	bne	r5,zero,8054f0 <___vfprintf_internal_r+0x1638>
  8054e0:	d9814c17 	ldw	r6,1328(sp)
  8054e4:	3080004c 	andi	r2,r6,1
  8054e8:	1005003a 	cmpeq	r2,r2,zero
  8054ec:	103bf01e 	bne	r2,zero,8044b0 <___vfprintf_internal_r+0x5f8>
  8054f0:	00800044 	movi	r2,1
  8054f4:	dc400d17 	ldw	r17,52(sp)
  8054f8:	18800115 	stw	r2,4(r3)
  8054fc:	d8814917 	ldw	r2,1316(sp)
  805500:	94800044 	addi	r18,r18,1
  805504:	8c400044 	addi	r17,r17,1
  805508:	18800015 	stw	r2,0(r3)
  80550c:	008001c4 	movi	r2,7
  805510:	dc800e15 	stw	r18,56(sp)
  805514:	dc400d15 	stw	r17,52(sp)
  805518:	1440ca16 	blt	r2,r17,805844 <___vfprintf_internal_r+0x198c>
  80551c:	18c00204 	addi	r3,r3,8
  805520:	0121c83a 	sub	r16,zero,r4
  805524:	0400500e 	bge	zero,r16,805668 <___vfprintf_internal_r+0x17b0>
  805528:	00800404 	movi	r2,16
  80552c:	1400800e 	bge	r2,r16,805730 <___vfprintf_internal_r+0x1878>
  805530:	1027883a 	mov	r19,r2
  805534:	07002074 	movhi	fp,129
  805538:	e7082684 	addi	fp,fp,8346
  80553c:	050001c4 	movi	r20,7
  805540:	00000306 	br	805550 <___vfprintf_internal_r+0x1698>
  805544:	18c00204 	addi	r3,r3,8
  805548:	843ffc04 	addi	r16,r16,-16
  80554c:	9c007a0e 	bge	r19,r16,805738 <___vfprintf_internal_r+0x1880>
  805550:	94800404 	addi	r18,r18,16
  805554:	8c400044 	addi	r17,r17,1
  805558:	1f000015 	stw	fp,0(r3)
  80555c:	1cc00115 	stw	r19,4(r3)
  805560:	dc800e15 	stw	r18,56(sp)
  805564:	dc400d15 	stw	r17,52(sp)
  805568:	a47ff60e 	bge	r20,r17,805544 <___vfprintf_internal_r+0x168c>
  80556c:	d9014f17 	ldw	r4,1340(sp)
  805570:	b00b883a 	mov	r5,r22
  805574:	d9800c04 	addi	r6,sp,48
  805578:	0803e600 	call	803e60 <__sprint_r>
  80557c:	103c061e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  805580:	dc800e17 	ldw	r18,56(sp)
  805584:	dc400d17 	ldw	r17,52(sp)
  805588:	d8c01904 	addi	r3,sp,100
  80558c:	003fee06 	br	805548 <___vfprintf_internal_r+0x1690>
  805590:	3c000017 	ldw	r16,0(r7)
  805594:	0023883a 	mov	r17,zero
  805598:	39c00104 	addi	r7,r7,4
  80559c:	d9c14015 	stw	r7,1280(sp)
  8055a0:	003e9206 	br	804fec <___vfprintf_internal_r+0x1134>
  8055a4:	d9401904 	addi	r5,sp,100
  8055a8:	dd000f04 	addi	r20,sp,60
  8055ac:	d9414115 	stw	r5,1284(sp)
  8055b0:	d9814417 	ldw	r6,1296(sp)
  8055b4:	880a973a 	slli	r5,r17,28
  8055b8:	8004d13a 	srli	r2,r16,4
  8055bc:	810003cc 	andi	r4,r16,15
  8055c0:	3109883a 	add	r4,r6,r4
  8055c4:	2884b03a 	or	r2,r5,r2
  8055c8:	21400003 	ldbu	r5,0(r4)
  8055cc:	d9014117 	ldw	r4,1284(sp)
  8055d0:	8806d13a 	srli	r3,r17,4
  8055d4:	1021883a 	mov	r16,r2
  8055d8:	213fffc4 	addi	r4,r4,-1
  8055dc:	d9014115 	stw	r4,1284(sp)
  8055e0:	d9814117 	ldw	r6,1284(sp)
  8055e4:	10c8b03a 	or	r4,r2,r3
  8055e8:	1823883a 	mov	r17,r3
  8055ec:	31400005 	stb	r5,0(r6)
  8055f0:	203fef1e 	bne	r4,zero,8055b0 <___vfprintf_internal_r+0x16f8>
  8055f4:	003ccb06 	br	804924 <___vfprintf_internal_r+0xa6c>
  8055f8:	00800c04 	movi	r2,48
  8055fc:	d98018c4 	addi	r6,sp,99
  805600:	dd000f04 	addi	r20,sp,60
  805604:	d88018c5 	stb	r2,99(sp)
  805608:	d9814115 	stw	r6,1284(sp)
  80560c:	003cc506 	br	804924 <___vfprintf_internal_r+0xa6c>
  805610:	dc400d17 	ldw	r17,52(sp)
  805614:	07002074 	movhi	fp,129
  805618:	e7082a84 	addi	fp,fp,8362
  80561c:	003bc706 	br	80453c <___vfprintf_internal_r+0x684>
  805620:	d9414c17 	ldw	r5,1328(sp)
  805624:	2880040c 	andi	r2,r5,16
  805628:	10007c26 	beq	r2,zero,80581c <___vfprintf_internal_r+0x1964>
  80562c:	38800017 	ldw	r2,0(r7)
  805630:	39c00104 	addi	r7,r7,4
  805634:	d9c14015 	stw	r7,1280(sp)
  805638:	d9814b17 	ldw	r6,1324(sp)
  80563c:	d9c14017 	ldw	r7,1280(sp)
  805640:	11800015 	stw	r6,0(r2)
  805644:	003a7806 	br	804028 <___vfprintf_internal_r+0x170>
  805648:	d9014f17 	ldw	r4,1340(sp)
  80564c:	b00b883a 	mov	r5,r22
  805650:	d9800c04 	addi	r6,sp,48
  805654:	0803e600 	call	803e60 <__sprint_r>
  805658:	103bcf1e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  80565c:	dc800e17 	ldw	r18,56(sp)
  805660:	dc400d17 	ldw	r17,52(sp)
  805664:	d8c01904 	addi	r3,sp,100
  805668:	d9014717 	ldw	r4,1308(sp)
  80566c:	d9414117 	ldw	r5,1284(sp)
  805670:	8c400044 	addi	r17,r17,1
  805674:	9125883a 	add	r18,r18,r4
  805678:	008001c4 	movi	r2,7
  80567c:	19400015 	stw	r5,0(r3)
  805680:	19000115 	stw	r4,4(r3)
  805684:	dc800e15 	stw	r18,56(sp)
  805688:	dc400d15 	stw	r17,52(sp)
  80568c:	147cee16 	blt	r2,r17,804a48 <___vfprintf_internal_r+0xb90>
  805690:	18c00204 	addi	r3,r3,8
  805694:	003b8606 	br	8044b0 <___vfprintf_internal_r+0x5f8>
  805698:	38c00017 	ldw	r3,0(r7)
  80569c:	39000204 	addi	r4,r7,8
  8056a0:	d9014015 	stw	r4,1280(sp)
  8056a4:	d8c14215 	stw	r3,1288(sp)
  8056a8:	39c00117 	ldw	r7,4(r7)
  8056ac:	d9c14315 	stw	r7,1292(sp)
  8056b0:	003e2006 	br	804f34 <___vfprintf_internal_r+0x107c>
  8056b4:	0005883a 	mov	r2,zero
  8056b8:	1409c83a 	sub	r4,r2,r16
  8056bc:	1105803a 	cmpltu	r2,r2,r4
  8056c0:	044bc83a 	sub	r5,zero,r17
  8056c4:	2885c83a 	sub	r2,r5,r2
  8056c8:	2021883a 	mov	r16,r4
  8056cc:	1023883a 	mov	r17,r2
  8056d0:	01000044 	movi	r4,1
  8056d4:	00800b44 	movi	r2,45
  8056d8:	d8800405 	stb	r2,16(sp)
  8056dc:	003c8406 	br	8048f0 <___vfprintf_internal_r+0xa38>
  8056e0:	d9014f17 	ldw	r4,1340(sp)
  8056e4:	b00b883a 	mov	r5,r22
  8056e8:	d9800c04 	addi	r6,sp,48
  8056ec:	0803e600 	call	803e60 <__sprint_r>
  8056f0:	103ba91e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  8056f4:	dc800e17 	ldw	r18,56(sp)
  8056f8:	dc400d17 	ldw	r17,52(sp)
  8056fc:	d9000517 	ldw	r4,20(sp)
  805700:	d9401904 	addi	r5,sp,100
  805704:	003da706 	br	804da4 <___vfprintf_internal_r+0xeec>
  805708:	d9014f17 	ldw	r4,1340(sp)
  80570c:	b00b883a 	mov	r5,r22
  805710:	d9800c04 	addi	r6,sp,48
  805714:	0803e600 	call	803e60 <__sprint_r>
  805718:	103b9f1e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  80571c:	dc800e17 	ldw	r18,56(sp)
  805720:	dc400d17 	ldw	r17,52(sp)
  805724:	d9000517 	ldw	r4,20(sp)
  805728:	d8c01904 	addi	r3,sp,100
  80572c:	003d9106 	br	804d74 <___vfprintf_internal_r+0xebc>
  805730:	07002074 	movhi	fp,129
  805734:	e7082684 	addi	fp,fp,8346
  805738:	9425883a 	add	r18,r18,r16
  80573c:	8c400044 	addi	r17,r17,1
  805740:	008001c4 	movi	r2,7
  805744:	1f000015 	stw	fp,0(r3)
  805748:	1c000115 	stw	r16,4(r3)
  80574c:	dc800e15 	stw	r18,56(sp)
  805750:	dc400d15 	stw	r17,52(sp)
  805754:	147fbc16 	blt	r2,r17,805648 <___vfprintf_internal_r+0x1790>
  805758:	18c00204 	addi	r3,r3,8
  80575c:	003fc206 	br	805668 <___vfprintf_internal_r+0x17b0>
  805760:	d9014f17 	ldw	r4,1340(sp)
  805764:	b00b883a 	mov	r5,r22
  805768:	d9800c04 	addi	r6,sp,48
  80576c:	0803e600 	call	803e60 <__sprint_r>
  805770:	103b891e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  805774:	dc800e17 	ldw	r18,56(sp)
  805778:	d9000517 	ldw	r4,20(sp)
  80577c:	d8c01904 	addi	r3,sp,100
  805780:	003d0206 	br	804b8c <___vfprintf_internal_r+0xcd4>
  805784:	07002074 	movhi	fp,129
  805788:	e7082684 	addi	fp,fp,8346
  80578c:	003be406 	br	804720 <___vfprintf_internal_r+0x868>
  805790:	00802074 	movhi	r2,129
  805794:	10881604 	addi	r2,r2,8280
  805798:	d8814115 	stw	r2,1284(sp)
  80579c:	003df506 	br	804f74 <___vfprintf_internal_r+0x10bc>
  8057a0:	d9014217 	ldw	r4,1288(sp)
  8057a4:	d9414317 	ldw	r5,1292(sp)
  8057a8:	080a8980 	call	80a898 <__isnand>
  8057ac:	10003926 	beq	r2,zero,805894 <___vfprintf_internal_r+0x19dc>
  8057b0:	d9414d17 	ldw	r5,1332(sp)
  8057b4:	008011c4 	movi	r2,71
  8057b8:	1140ce16 	blt	r2,r5,805af4 <___vfprintf_internal_r+0x1c3c>
  8057bc:	01802074 	movhi	r6,129
  8057c0:	31881704 	addi	r6,r6,8284
  8057c4:	d9814115 	stw	r6,1284(sp)
  8057c8:	003dea06 	br	804f74 <___vfprintf_internal_r+0x10bc>
  8057cc:	d9014c17 	ldw	r4,1328(sp)
  8057d0:	bdc00044 	addi	r23,r23,1
  8057d4:	b8c00007 	ldb	r3,0(r23)
  8057d8:	21000814 	ori	r4,r4,32
  8057dc:	d9014c15 	stw	r4,1328(sp)
  8057e0:	003a3406 	br	8040b4 <___vfprintf_internal_r+0x1fc>
  8057e4:	dcc14515 	stw	r19,1300(sp)
  8057e8:	98011016 	blt	r19,zero,805c2c <___vfprintf_internal_r+0x1d74>
  8057ec:	980f883a 	mov	r7,r19
  8057f0:	d8014615 	stw	zero,1304(sp)
  8057f4:	003c5206 	br	804940 <___vfprintf_internal_r+0xa88>
  8057f8:	d9014f17 	ldw	r4,1340(sp)
  8057fc:	b00b883a 	mov	r5,r22
  805800:	d9800c04 	addi	r6,sp,48
  805804:	0803e600 	call	803e60 <__sprint_r>
  805808:	103b631e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  80580c:	dc800e17 	ldw	r18,56(sp)
  805810:	d9000517 	ldw	r4,20(sp)
  805814:	d8c01904 	addi	r3,sp,100
  805818:	003f2e06 	br	8054d4 <___vfprintf_internal_r+0x161c>
  80581c:	d8c14c17 	ldw	r3,1328(sp)
  805820:	1880100c 	andi	r2,r3,64
  805824:	1000a026 	beq	r2,zero,805aa8 <___vfprintf_internal_r+0x1bf0>
  805828:	38800017 	ldw	r2,0(r7)
  80582c:	39c00104 	addi	r7,r7,4
  805830:	d9c14015 	stw	r7,1280(sp)
  805834:	d9014b17 	ldw	r4,1324(sp)
  805838:	d9c14017 	ldw	r7,1280(sp)
  80583c:	1100000d 	sth	r4,0(r2)
  805840:	0039f906 	br	804028 <___vfprintf_internal_r+0x170>
  805844:	d9014f17 	ldw	r4,1340(sp)
  805848:	b00b883a 	mov	r5,r22
  80584c:	d9800c04 	addi	r6,sp,48
  805850:	0803e600 	call	803e60 <__sprint_r>
  805854:	103b501e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  805858:	dc800e17 	ldw	r18,56(sp)
  80585c:	dc400d17 	ldw	r17,52(sp)
  805860:	d9000517 	ldw	r4,20(sp)
  805864:	d8c01904 	addi	r3,sp,100
  805868:	003f2d06 	br	805520 <___vfprintf_internal_r+0x1668>
  80586c:	00800184 	movi	r2,6
  805870:	14c09a36 	bltu	r2,r19,805adc <___vfprintf_internal_r+0x1c24>
  805874:	dcc14515 	stw	r19,1300(sp)
  805878:	9800010e 	bge	r19,zero,805880 <___vfprintf_internal_r+0x19c8>
  80587c:	d8014515 	stw	zero,1300(sp)
  805880:	00802074 	movhi	r2,129
  805884:	10881904 	addi	r2,r2,8292
  805888:	980f883a 	mov	r7,r19
  80588c:	d8814115 	stw	r2,1284(sp)
  805890:	003a7806 	br	804274 <___vfprintf_internal_r+0x3bc>
  805894:	00bfffc4 	movi	r2,-1
  805898:	9880e226 	beq	r19,r2,805c24 <___vfprintf_internal_r+0x1d6c>
  80589c:	d9414d17 	ldw	r5,1332(sp)
  8058a0:	008019c4 	movi	r2,103
  8058a4:	2880dc26 	beq	r5,r2,805c18 <___vfprintf_internal_r+0x1d60>
  8058a8:	008011c4 	movi	r2,71
  8058ac:	2880da26 	beq	r5,r2,805c18 <___vfprintf_internal_r+0x1d60>
  8058b0:	d9414c17 	ldw	r5,1328(sp)
  8058b4:	d9014317 	ldw	r4,1292(sp)
  8058b8:	d9814217 	ldw	r6,1288(sp)
  8058bc:	29404014 	ori	r5,r5,256
  8058c0:	d9414c15 	stw	r5,1328(sp)
  8058c4:	2000cc16 	blt	r4,zero,805bf8 <___vfprintf_internal_r+0x1d40>
  8058c8:	3021883a 	mov	r16,r6
  8058cc:	2023883a 	mov	r17,r4
  8058d0:	0039883a 	mov	fp,zero
  8058d4:	d9414d17 	ldw	r5,1332(sp)
  8058d8:	00801984 	movi	r2,102
  8058dc:	2880b726 	beq	r5,r2,805bbc <___vfprintf_internal_r+0x1d04>
  8058e0:	00801184 	movi	r2,70
  8058e4:	2880b526 	beq	r5,r2,805bbc <___vfprintf_internal_r+0x1d04>
  8058e8:	00801944 	movi	r2,101
  8058ec:	2880c826 	beq	r5,r2,805c10 <___vfprintf_internal_r+0x1d58>
  8058f0:	00801144 	movi	r2,69
  8058f4:	2880c626 	beq	r5,r2,805c10 <___vfprintf_internal_r+0x1d58>
  8058f8:	9829883a 	mov	r20,r19
  8058fc:	d9014f17 	ldw	r4,1340(sp)
  805900:	d8800504 	addi	r2,sp,20
  805904:	880d883a 	mov	r6,r17
  805908:	d8800115 	stw	r2,4(sp)
  80590c:	d8c00604 	addi	r3,sp,24
  805910:	d8800704 	addi	r2,sp,28
  805914:	800b883a 	mov	r5,r16
  805918:	01c00084 	movi	r7,2
  80591c:	d8c00215 	stw	r3,8(sp)
  805920:	d8800315 	stw	r2,12(sp)
  805924:	dd000015 	stw	r20,0(sp)
  805928:	08060dc0 	call	8060dc <_dtoa_r>
  80592c:	d9814d17 	ldw	r6,1332(sp)
  805930:	d8814115 	stw	r2,1284(sp)
  805934:	008019c4 	movi	r2,103
  805938:	30809526 	beq	r6,r2,805b90 <___vfprintf_internal_r+0x1cd8>
  80593c:	d8c14d17 	ldw	r3,1332(sp)
  805940:	008011c4 	movi	r2,71
  805944:	18809226 	beq	r3,r2,805b90 <___vfprintf_internal_r+0x1cd8>
  805948:	d9414117 	ldw	r5,1284(sp)
  80594c:	d9814d17 	ldw	r6,1332(sp)
  805950:	00801984 	movi	r2,102
  805954:	2d25883a 	add	r18,r5,r20
  805958:	30808626 	beq	r6,r2,805b74 <___vfprintf_internal_r+0x1cbc>
  80595c:	00801184 	movi	r2,70
  805960:	30808426 	beq	r6,r2,805b74 <___vfprintf_internal_r+0x1cbc>
  805964:	000d883a 	mov	r6,zero
  805968:	000f883a 	mov	r7,zero
  80596c:	880b883a 	mov	r5,r17
  805970:	8009883a 	mov	r4,r16
  805974:	080bf240 	call	80bf24 <__eqdf2>
  805978:	1000751e 	bne	r2,zero,805b50 <___vfprintf_internal_r+0x1c98>
  80597c:	9005883a 	mov	r2,r18
  805980:	dc800715 	stw	r18,28(sp)
  805984:	d9014117 	ldw	r4,1284(sp)
  805988:	d9414d17 	ldw	r5,1332(sp)
  80598c:	00c019c4 	movi	r3,103
  805990:	1125c83a 	sub	r18,r2,r4
  805994:	28c06826 	beq	r5,r3,805b38 <___vfprintf_internal_r+0x1c80>
  805998:	008011c4 	movi	r2,71
  80599c:	28806626 	beq	r5,r2,805b38 <___vfprintf_internal_r+0x1c80>
  8059a0:	d9000517 	ldw	r4,20(sp)
  8059a4:	d8c14d17 	ldw	r3,1332(sp)
  8059a8:	00801944 	movi	r2,101
  8059ac:	10c05516 	blt	r2,r3,805b04 <___vfprintf_internal_r+0x1c4c>
  8059b0:	213fffc4 	addi	r4,r4,-1
  8059b4:	d9000515 	stw	r4,20(sp)
  8059b8:	d8c00805 	stb	r3,32(sp)
  8059bc:	2021883a 	mov	r16,r4
  8059c0:	2000c116 	blt	r4,zero,805cc8 <___vfprintf_internal_r+0x1e10>
  8059c4:	00800ac4 	movi	r2,43
  8059c8:	d8800845 	stb	r2,33(sp)
  8059cc:	00800244 	movi	r2,9
  8059d0:	1400af0e 	bge	r2,r16,805c90 <___vfprintf_internal_r+0x1dd8>
  8059d4:	1027883a 	mov	r19,r2
  8059d8:	dc400b84 	addi	r17,sp,46
  8059dc:	8009883a 	mov	r4,r16
  8059e0:	01400284 	movi	r5,10
  8059e4:	080c5840 	call	80c584 <__modsi3>
  8059e8:	10800c04 	addi	r2,r2,48
  8059ec:	8c7fffc4 	addi	r17,r17,-1
  8059f0:	8009883a 	mov	r4,r16
  8059f4:	01400284 	movi	r5,10
  8059f8:	88800005 	stb	r2,0(r17)
  8059fc:	080c5240 	call	80c524 <__divsi3>
  805a00:	1021883a 	mov	r16,r2
  805a04:	98bff516 	blt	r19,r2,8059dc <___vfprintf_internal_r+0x1b24>
  805a08:	10c00c04 	addi	r3,r2,48
  805a0c:	d88009c4 	addi	r2,sp,39
  805a10:	108001c4 	addi	r2,r2,7
  805a14:	897fffc4 	addi	r5,r17,-1
  805a18:	88ffffc5 	stb	r3,-1(r17)
  805a1c:	2880a72e 	bgeu	r5,r2,805cbc <___vfprintf_internal_r+0x1e04>
  805a20:	1009883a 	mov	r4,r2
  805a24:	d9800804 	addi	r6,sp,32
  805a28:	d8c00884 	addi	r3,sp,34
  805a2c:	28800003 	ldbu	r2,0(r5)
  805a30:	29400044 	addi	r5,r5,1
  805a34:	18800005 	stb	r2,0(r3)
  805a38:	18c00044 	addi	r3,r3,1
  805a3c:	293ffb36 	bltu	r5,r4,805a2c <___vfprintf_internal_r+0x1b74>
  805a40:	1987c83a 	sub	r3,r3,r6
  805a44:	00800044 	movi	r2,1
  805a48:	d8c14815 	stw	r3,1312(sp)
  805a4c:	90cf883a 	add	r7,r18,r3
  805a50:	1480960e 	bge	r2,r18,805cac <___vfprintf_internal_r+0x1df4>
  805a54:	39c00044 	addi	r7,r7,1
  805a58:	d9c14515 	stw	r7,1300(sp)
  805a5c:	38003416 	blt	r7,zero,805b30 <___vfprintf_internal_r+0x1c78>
  805a60:	e0803fcc 	andi	r2,fp,255
  805a64:	1080201c 	xori	r2,r2,128
  805a68:	10bfe004 	addi	r2,r2,-128
  805a6c:	10004e26 	beq	r2,zero,805ba8 <___vfprintf_internal_r+0x1cf0>
  805a70:	00800b44 	movi	r2,45
  805a74:	dc814715 	stw	r18,1308(sp)
  805a78:	d8014615 	stw	zero,1304(sp)
  805a7c:	d8800405 	stb	r2,16(sp)
  805a80:	003bb106 	br	804948 <___vfprintf_internal_r+0xa90>
  805a84:	00800b44 	movi	r2,45
  805a88:	d8800405 	stb	r2,16(sp)
  805a8c:	003d3306 	br	804f5c <___vfprintf_internal_r+0x10a4>
  805a90:	d9014f17 	ldw	r4,1340(sp)
  805a94:	b00b883a 	mov	r5,r22
  805a98:	d9800c04 	addi	r6,sp,48
  805a9c:	0803e600 	call	803e60 <__sprint_r>
  805aa0:	103abd1e 	bne	r2,zero,804598 <___vfprintf_internal_r+0x6e0>
  805aa4:	003abb06 	br	804594 <___vfprintf_internal_r+0x6dc>
  805aa8:	38800017 	ldw	r2,0(r7)
  805aac:	39c00104 	addi	r7,r7,4
  805ab0:	d9c14015 	stw	r7,1280(sp)
  805ab4:	d9414b17 	ldw	r5,1324(sp)
  805ab8:	d9c14017 	ldw	r7,1280(sp)
  805abc:	11400015 	stw	r5,0(r2)
  805ac0:	00395906 	br	804028 <___vfprintf_internal_r+0x170>
  805ac4:	980f883a 	mov	r7,r19
  805ac8:	dcc14515 	stw	r19,1300(sp)
  805acc:	d8014615 	stw	zero,1304(sp)
  805ad0:	003b9b06 	br	804940 <___vfprintf_internal_r+0xa88>
  805ad4:	0027883a 	mov	r19,zero
  805ad8:	00397806 	br	8040bc <___vfprintf_internal_r+0x204>
  805adc:	00c02074 	movhi	r3,129
  805ae0:	18c81904 	addi	r3,r3,8292
  805ae4:	100f883a 	mov	r7,r2
  805ae8:	d8814515 	stw	r2,1300(sp)
  805aec:	d8c14115 	stw	r3,1284(sp)
  805af0:	0039e006 	br	804274 <___vfprintf_internal_r+0x3bc>
  805af4:	00802074 	movhi	r2,129
  805af8:	10881804 	addi	r2,r2,8288
  805afc:	d8814115 	stw	r2,1284(sp)
  805b00:	003d1c06 	br	804f74 <___vfprintf_internal_r+0x10bc>
  805b04:	d9414d17 	ldw	r5,1332(sp)
  805b08:	00801984 	movi	r2,102
  805b0c:	28804926 	beq	r5,r2,805c34 <___vfprintf_internal_r+0x1d7c>
  805b10:	200f883a 	mov	r7,r4
  805b14:	24805716 	blt	r4,r18,805c74 <___vfprintf_internal_r+0x1dbc>
  805b18:	d9414c17 	ldw	r5,1328(sp)
  805b1c:	2880004c 	andi	r2,r5,1
  805b20:	10000126 	beq	r2,zero,805b28 <___vfprintf_internal_r+0x1c70>
  805b24:	21c00044 	addi	r7,r4,1
  805b28:	d9c14515 	stw	r7,1300(sp)
  805b2c:	383fcc0e 	bge	r7,zero,805a60 <___vfprintf_internal_r+0x1ba8>
  805b30:	d8014515 	stw	zero,1300(sp)
  805b34:	003fca06 	br	805a60 <___vfprintf_internal_r+0x1ba8>
  805b38:	d9000517 	ldw	r4,20(sp)
  805b3c:	00bfff04 	movi	r2,-4
  805b40:	1100480e 	bge	r2,r4,805c64 <___vfprintf_internal_r+0x1dac>
  805b44:	99004716 	blt	r19,r4,805c64 <___vfprintf_internal_r+0x1dac>
  805b48:	d8c14d15 	stw	r3,1332(sp)
  805b4c:	003ff006 	br	805b10 <___vfprintf_internal_r+0x1c58>
  805b50:	d8800717 	ldw	r2,28(sp)
  805b54:	14bf8b2e 	bgeu	r2,r18,805984 <___vfprintf_internal_r+0x1acc>
  805b58:	9007883a 	mov	r3,r18
  805b5c:	01000c04 	movi	r4,48
  805b60:	11000005 	stb	r4,0(r2)
  805b64:	10800044 	addi	r2,r2,1
  805b68:	d8800715 	stw	r2,28(sp)
  805b6c:	18bffc1e 	bne	r3,r2,805b60 <___vfprintf_internal_r+0x1ca8>
  805b70:	003f8406 	br	805984 <___vfprintf_internal_r+0x1acc>
  805b74:	d8814117 	ldw	r2,1284(sp)
  805b78:	10c00007 	ldb	r3,0(r2)
  805b7c:	00800c04 	movi	r2,48
  805b80:	18805b26 	beq	r3,r2,805cf0 <___vfprintf_internal_r+0x1e38>
  805b84:	d9000517 	ldw	r4,20(sp)
  805b88:	9125883a 	add	r18,r18,r4
  805b8c:	003f7506 	br	805964 <___vfprintf_internal_r+0x1aac>
  805b90:	d9014c17 	ldw	r4,1328(sp)
  805b94:	2080004c 	andi	r2,r4,1
  805b98:	1005003a 	cmpeq	r2,r2,zero
  805b9c:	103f6a26 	beq	r2,zero,805948 <___vfprintf_internal_r+0x1a90>
  805ba0:	d8800717 	ldw	r2,28(sp)
  805ba4:	003f7706 	br	805984 <___vfprintf_internal_r+0x1acc>
  805ba8:	d9c14515 	stw	r7,1300(sp)
  805bac:	38004d16 	blt	r7,zero,805ce4 <___vfprintf_internal_r+0x1e2c>
  805bb0:	dc814715 	stw	r18,1308(sp)
  805bb4:	d8014615 	stw	zero,1304(sp)
  805bb8:	003b6106 	br	804940 <___vfprintf_internal_r+0xa88>
  805bbc:	d9014f17 	ldw	r4,1340(sp)
  805bc0:	d8800504 	addi	r2,sp,20
  805bc4:	d8800115 	stw	r2,4(sp)
  805bc8:	d8c00604 	addi	r3,sp,24
  805bcc:	d8800704 	addi	r2,sp,28
  805bd0:	800b883a 	mov	r5,r16
  805bd4:	880d883a 	mov	r6,r17
  805bd8:	01c000c4 	movi	r7,3
  805bdc:	d8c00215 	stw	r3,8(sp)
  805be0:	d8800315 	stw	r2,12(sp)
  805be4:	dcc00015 	stw	r19,0(sp)
  805be8:	9829883a 	mov	r20,r19
  805bec:	08060dc0 	call	8060dc <_dtoa_r>
  805bf0:	d8814115 	stw	r2,1284(sp)
  805bf4:	003f5106 	br	80593c <___vfprintf_internal_r+0x1a84>
  805bf8:	d8c14217 	ldw	r3,1288(sp)
  805bfc:	d9014317 	ldw	r4,1292(sp)
  805c00:	07000b44 	movi	fp,45
  805c04:	1821883a 	mov	r16,r3
  805c08:	2460003c 	xorhi	r17,r4,32768
  805c0c:	003f3106 	br	8058d4 <___vfprintf_internal_r+0x1a1c>
  805c10:	9d000044 	addi	r20,r19,1
  805c14:	003f3906 	br	8058fc <___vfprintf_internal_r+0x1a44>
  805c18:	983f251e 	bne	r19,zero,8058b0 <___vfprintf_internal_r+0x19f8>
  805c1c:	04c00044 	movi	r19,1
  805c20:	003f2306 	br	8058b0 <___vfprintf_internal_r+0x19f8>
  805c24:	04c00184 	movi	r19,6
  805c28:	003f2106 	br	8058b0 <___vfprintf_internal_r+0x19f8>
  805c2c:	d8014515 	stw	zero,1300(sp)
  805c30:	003eee06 	br	8057ec <___vfprintf_internal_r+0x1934>
  805c34:	200f883a 	mov	r7,r4
  805c38:	0100370e 	bge	zero,r4,805d18 <___vfprintf_internal_r+0x1e60>
  805c3c:	9800031e 	bne	r19,zero,805c4c <___vfprintf_internal_r+0x1d94>
  805c40:	d9814c17 	ldw	r6,1328(sp)
  805c44:	3080004c 	andi	r2,r6,1
  805c48:	103fb726 	beq	r2,zero,805b28 <___vfprintf_internal_r+0x1c70>
  805c4c:	20800044 	addi	r2,r4,1
  805c50:	98a7883a 	add	r19,r19,r2
  805c54:	dcc14515 	stw	r19,1300(sp)
  805c58:	980f883a 	mov	r7,r19
  805c5c:	983f800e 	bge	r19,zero,805a60 <___vfprintf_internal_r+0x1ba8>
  805c60:	003fb306 	br	805b30 <___vfprintf_internal_r+0x1c78>
  805c64:	d9814d17 	ldw	r6,1332(sp)
  805c68:	31bfff84 	addi	r6,r6,-2
  805c6c:	d9814d15 	stw	r6,1332(sp)
  805c70:	003f4c06 	br	8059a4 <___vfprintf_internal_r+0x1aec>
  805c74:	0100180e 	bge	zero,r4,805cd8 <___vfprintf_internal_r+0x1e20>
  805c78:	00800044 	movi	r2,1
  805c7c:	1485883a 	add	r2,r2,r18
  805c80:	d8814515 	stw	r2,1300(sp)
  805c84:	100f883a 	mov	r7,r2
  805c88:	103f750e 	bge	r2,zero,805a60 <___vfprintf_internal_r+0x1ba8>
  805c8c:	003fa806 	br	805b30 <___vfprintf_internal_r+0x1c78>
  805c90:	80c00c04 	addi	r3,r16,48
  805c94:	00800c04 	movi	r2,48
  805c98:	d8c008c5 	stb	r3,35(sp)
  805c9c:	d9800804 	addi	r6,sp,32
  805ca0:	d8c00904 	addi	r3,sp,36
  805ca4:	d8800885 	stb	r2,34(sp)
  805ca8:	003f6506 	br	805a40 <___vfprintf_internal_r+0x1b88>
  805cac:	d9014c17 	ldw	r4,1328(sp)
  805cb0:	2084703a 	and	r2,r4,r2
  805cb4:	103f9c26 	beq	r2,zero,805b28 <___vfprintf_internal_r+0x1c70>
  805cb8:	003f6606 	br	805a54 <___vfprintf_internal_r+0x1b9c>
  805cbc:	d9800804 	addi	r6,sp,32
  805cc0:	d8c00884 	addi	r3,sp,34
  805cc4:	003f5e06 	br	805a40 <___vfprintf_internal_r+0x1b88>
  805cc8:	00800b44 	movi	r2,45
  805ccc:	0121c83a 	sub	r16,zero,r4
  805cd0:	d8800845 	stb	r2,33(sp)
  805cd4:	003f3d06 	br	8059cc <___vfprintf_internal_r+0x1b14>
  805cd8:	00800084 	movi	r2,2
  805cdc:	1105c83a 	sub	r2,r2,r4
  805ce0:	003fe606 	br	805c7c <___vfprintf_internal_r+0x1dc4>
  805ce4:	d8014515 	stw	zero,1300(sp)
  805ce8:	dc814715 	stw	r18,1308(sp)
  805cec:	003fb106 	br	805bb4 <___vfprintf_internal_r+0x1cfc>
  805cf0:	000d883a 	mov	r6,zero
  805cf4:	000f883a 	mov	r7,zero
  805cf8:	8009883a 	mov	r4,r16
  805cfc:	880b883a 	mov	r5,r17
  805d00:	08032180 	call	803218 <__nedf2>
  805d04:	103f9f26 	beq	r2,zero,805b84 <___vfprintf_internal_r+0x1ccc>
  805d08:	00800044 	movi	r2,1
  805d0c:	1509c83a 	sub	r4,r2,r20
  805d10:	d9000515 	stw	r4,20(sp)
  805d14:	003f9b06 	br	805b84 <___vfprintf_internal_r+0x1ccc>
  805d18:	98000d1e 	bne	r19,zero,805d50 <___vfprintf_internal_r+0x1e98>
  805d1c:	d8c14c17 	ldw	r3,1328(sp)
  805d20:	1880004c 	andi	r2,r3,1
  805d24:	10000a1e 	bne	r2,zero,805d50 <___vfprintf_internal_r+0x1e98>
  805d28:	01000044 	movi	r4,1
  805d2c:	200f883a 	mov	r7,r4
  805d30:	d9014515 	stw	r4,1300(sp)
  805d34:	003f4a06 	br	805a60 <___vfprintf_internal_r+0x1ba8>
  805d38:	3cc00017 	ldw	r19,0(r7)
  805d3c:	39c00104 	addi	r7,r7,4
  805d40:	983d0e0e 	bge	r19,zero,80517c <___vfprintf_internal_r+0x12c4>
  805d44:	b8c00007 	ldb	r3,0(r23)
  805d48:	04ffffc4 	movi	r19,-1
  805d4c:	0038d906 	br	8040b4 <___vfprintf_internal_r+0x1fc>
  805d50:	9cc00084 	addi	r19,r19,2
  805d54:	dcc14515 	stw	r19,1300(sp)
  805d58:	980f883a 	mov	r7,r19
  805d5c:	983f400e 	bge	r19,zero,805a60 <___vfprintf_internal_r+0x1ba8>
  805d60:	003f7306 	br	805b30 <___vfprintf_internal_r+0x1c78>

00805d64 <__vfprintf_internal>:
  805d64:	00802074 	movhi	r2,129
  805d68:	108fd204 	addi	r2,r2,16200
  805d6c:	2013883a 	mov	r9,r4
  805d70:	11000017 	ldw	r4,0(r2)
  805d74:	2805883a 	mov	r2,r5
  805d78:	300f883a 	mov	r7,r6
  805d7c:	480b883a 	mov	r5,r9
  805d80:	100d883a 	mov	r6,r2
  805d84:	0803eb81 	jmpi	803eb8 <___vfprintf_internal_r>

00805d88 <__swsetup_r>:
  805d88:	00802074 	movhi	r2,129
  805d8c:	108fd204 	addi	r2,r2,16200
  805d90:	10c00017 	ldw	r3,0(r2)
  805d94:	defffd04 	addi	sp,sp,-12
  805d98:	dc400115 	stw	r17,4(sp)
  805d9c:	dc000015 	stw	r16,0(sp)
  805da0:	dfc00215 	stw	ra,8(sp)
  805da4:	2023883a 	mov	r17,r4
  805da8:	2821883a 	mov	r16,r5
  805dac:	18000226 	beq	r3,zero,805db8 <__swsetup_r+0x30>
  805db0:	18800e17 	ldw	r2,56(r3)
  805db4:	10001f26 	beq	r2,zero,805e34 <__swsetup_r+0xac>
  805db8:	8100030b 	ldhu	r4,12(r16)
  805dbc:	2080020c 	andi	r2,r4,8
  805dc0:	10002826 	beq	r2,zero,805e64 <__swsetup_r+0xdc>
  805dc4:	81400417 	ldw	r5,16(r16)
  805dc8:	28001d26 	beq	r5,zero,805e40 <__swsetup_r+0xb8>
  805dcc:	2080004c 	andi	r2,r4,1
  805dd0:	1005003a 	cmpeq	r2,r2,zero
  805dd4:	10000b26 	beq	r2,zero,805e04 <__swsetup_r+0x7c>
  805dd8:	2080008c 	andi	r2,r4,2
  805ddc:	10001226 	beq	r2,zero,805e28 <__swsetup_r+0xa0>
  805de0:	0005883a 	mov	r2,zero
  805de4:	80800215 	stw	r2,8(r16)
  805de8:	28000b26 	beq	r5,zero,805e18 <__swsetup_r+0x90>
  805dec:	0005883a 	mov	r2,zero
  805df0:	dfc00217 	ldw	ra,8(sp)
  805df4:	dc400117 	ldw	r17,4(sp)
  805df8:	dc000017 	ldw	r16,0(sp)
  805dfc:	dec00304 	addi	sp,sp,12
  805e00:	f800283a 	ret
  805e04:	80800517 	ldw	r2,20(r16)
  805e08:	80000215 	stw	zero,8(r16)
  805e0c:	0085c83a 	sub	r2,zero,r2
  805e10:	80800615 	stw	r2,24(r16)
  805e14:	283ff51e 	bne	r5,zero,805dec <__swsetup_r+0x64>
  805e18:	2080200c 	andi	r2,r4,128
  805e1c:	103ff326 	beq	r2,zero,805dec <__swsetup_r+0x64>
  805e20:	00bfffc4 	movi	r2,-1
  805e24:	003ff206 	br	805df0 <__swsetup_r+0x68>
  805e28:	80800517 	ldw	r2,20(r16)
  805e2c:	80800215 	stw	r2,8(r16)
  805e30:	003fed06 	br	805de8 <__swsetup_r+0x60>
  805e34:	1809883a 	mov	r4,r3
  805e38:	08079280 	call	807928 <__sinit>
  805e3c:	003fde06 	br	805db8 <__swsetup_r+0x30>
  805e40:	20c0a00c 	andi	r3,r4,640
  805e44:	00808004 	movi	r2,512
  805e48:	18bfe026 	beq	r3,r2,805dcc <__swsetup_r+0x44>
  805e4c:	8809883a 	mov	r4,r17
  805e50:	800b883a 	mov	r5,r16
  805e54:	08086a00 	call	8086a0 <__smakebuf_r>
  805e58:	8100030b 	ldhu	r4,12(r16)
  805e5c:	81400417 	ldw	r5,16(r16)
  805e60:	003fda06 	br	805dcc <__swsetup_r+0x44>
  805e64:	2080040c 	andi	r2,r4,16
  805e68:	103fed26 	beq	r2,zero,805e20 <__swsetup_r+0x98>
  805e6c:	2080010c 	andi	r2,r4,4
  805e70:	10001226 	beq	r2,zero,805ebc <__swsetup_r+0x134>
  805e74:	81400c17 	ldw	r5,48(r16)
  805e78:	28000526 	beq	r5,zero,805e90 <__swsetup_r+0x108>
  805e7c:	80801004 	addi	r2,r16,64
  805e80:	28800226 	beq	r5,r2,805e8c <__swsetup_r+0x104>
  805e84:	8809883a 	mov	r4,r17
  805e88:	0807cac0 	call	807cac <_free_r>
  805e8c:	80000c15 	stw	zero,48(r16)
  805e90:	8080030b 	ldhu	r2,12(r16)
  805e94:	81400417 	ldw	r5,16(r16)
  805e98:	80000115 	stw	zero,4(r16)
  805e9c:	10bff6cc 	andi	r2,r2,65499
  805ea0:	8080030d 	sth	r2,12(r16)
  805ea4:	81400015 	stw	r5,0(r16)
  805ea8:	8080030b 	ldhu	r2,12(r16)
  805eac:	10800214 	ori	r2,r2,8
  805eb0:	113fffcc 	andi	r4,r2,65535
  805eb4:	8080030d 	sth	r2,12(r16)
  805eb8:	003fc306 	br	805dc8 <__swsetup_r+0x40>
  805ebc:	81400417 	ldw	r5,16(r16)
  805ec0:	003ff906 	br	805ea8 <__swsetup_r+0x120>

00805ec4 <quorem>:
  805ec4:	28c00417 	ldw	r3,16(r5)
  805ec8:	20800417 	ldw	r2,16(r4)
  805ecc:	defff604 	addi	sp,sp,-40
  805ed0:	ddc00715 	stw	r23,28(sp)
  805ed4:	dd400515 	stw	r21,20(sp)
  805ed8:	dfc00915 	stw	ra,36(sp)
  805edc:	df000815 	stw	fp,32(sp)
  805ee0:	dd800615 	stw	r22,24(sp)
  805ee4:	dd000415 	stw	r20,16(sp)
  805ee8:	dcc00315 	stw	r19,12(sp)
  805eec:	dc800215 	stw	r18,8(sp)
  805ef0:	dc400115 	stw	r17,4(sp)
  805ef4:	dc000015 	stw	r16,0(sp)
  805ef8:	202f883a 	mov	r23,r4
  805efc:	282b883a 	mov	r21,r5
  805f00:	10c07416 	blt	r2,r3,8060d4 <quorem+0x210>
  805f04:	1c7fffc4 	addi	r17,r3,-1
  805f08:	8c45883a 	add	r2,r17,r17
  805f0c:	1085883a 	add	r2,r2,r2
  805f10:	2c000504 	addi	r16,r5,20
  805f14:	24c00504 	addi	r19,r4,20
  805f18:	14ed883a 	add	r22,r2,r19
  805f1c:	80a5883a 	add	r18,r16,r2
  805f20:	b7000017 	ldw	fp,0(r22)
  805f24:	91400017 	ldw	r5,0(r18)
  805f28:	e009883a 	mov	r4,fp
  805f2c:	29400044 	addi	r5,r5,1
  805f30:	080c5e40 	call	80c5e4 <__udivsi3>
  805f34:	1029883a 	mov	r20,r2
  805f38:	10003c1e 	bne	r2,zero,80602c <quorem+0x168>
  805f3c:	a80b883a 	mov	r5,r21
  805f40:	b809883a 	mov	r4,r23
  805f44:	08093cc0 	call	8093cc <__mcmp>
  805f48:	10002b16 	blt	r2,zero,805ff8 <quorem+0x134>
  805f4c:	a5000044 	addi	r20,r20,1
  805f50:	980f883a 	mov	r7,r19
  805f54:	0011883a 	mov	r8,zero
  805f58:	0009883a 	mov	r4,zero
  805f5c:	81400017 	ldw	r5,0(r16)
  805f60:	38c00017 	ldw	r3,0(r7)
  805f64:	84000104 	addi	r16,r16,4
  805f68:	28bfffcc 	andi	r2,r5,65535
  805f6c:	2085883a 	add	r2,r4,r2
  805f70:	11bfffcc 	andi	r6,r2,65535
  805f74:	193fffcc 	andi	r4,r3,65535
  805f78:	1004d43a 	srli	r2,r2,16
  805f7c:	280ad43a 	srli	r5,r5,16
  805f80:	2189c83a 	sub	r4,r4,r6
  805f84:	2209883a 	add	r4,r4,r8
  805f88:	1806d43a 	srli	r3,r3,16
  805f8c:	288b883a 	add	r5,r5,r2
  805f90:	200dd43a 	srai	r6,r4,16
  805f94:	28bfffcc 	andi	r2,r5,65535
  805f98:	1887c83a 	sub	r3,r3,r2
  805f9c:	1987883a 	add	r3,r3,r6
  805fa0:	3900000d 	sth	r4,0(r7)
  805fa4:	38c0008d 	sth	r3,2(r7)
  805fa8:	2808d43a 	srli	r4,r5,16
  805fac:	39c00104 	addi	r7,r7,4
  805fb0:	1811d43a 	srai	r8,r3,16
  805fb4:	943fe92e 	bgeu	r18,r16,805f5c <quorem+0x98>
  805fb8:	8c45883a 	add	r2,r17,r17
  805fbc:	1085883a 	add	r2,r2,r2
  805fc0:	9885883a 	add	r2,r19,r2
  805fc4:	10c00017 	ldw	r3,0(r2)
  805fc8:	18000b1e 	bne	r3,zero,805ff8 <quorem+0x134>
  805fcc:	113fff04 	addi	r4,r2,-4
  805fd0:	9900082e 	bgeu	r19,r4,805ff4 <quorem+0x130>
  805fd4:	10bfff17 	ldw	r2,-4(r2)
  805fd8:	10000326 	beq	r2,zero,805fe8 <quorem+0x124>
  805fdc:	00000506 	br	805ff4 <quorem+0x130>
  805fe0:	20800017 	ldw	r2,0(r4)
  805fe4:	1000031e 	bne	r2,zero,805ff4 <quorem+0x130>
  805fe8:	213fff04 	addi	r4,r4,-4
  805fec:	8c7fffc4 	addi	r17,r17,-1
  805ff0:	993ffb36 	bltu	r19,r4,805fe0 <quorem+0x11c>
  805ff4:	bc400415 	stw	r17,16(r23)
  805ff8:	a005883a 	mov	r2,r20
  805ffc:	dfc00917 	ldw	ra,36(sp)
  806000:	df000817 	ldw	fp,32(sp)
  806004:	ddc00717 	ldw	r23,28(sp)
  806008:	dd800617 	ldw	r22,24(sp)
  80600c:	dd400517 	ldw	r21,20(sp)
  806010:	dd000417 	ldw	r20,16(sp)
  806014:	dcc00317 	ldw	r19,12(sp)
  806018:	dc800217 	ldw	r18,8(sp)
  80601c:	dc400117 	ldw	r17,4(sp)
  806020:	dc000017 	ldw	r16,0(sp)
  806024:	dec00a04 	addi	sp,sp,40
  806028:	f800283a 	ret
  80602c:	980f883a 	mov	r7,r19
  806030:	8011883a 	mov	r8,r16
  806034:	0013883a 	mov	r9,zero
  806038:	000d883a 	mov	r6,zero
  80603c:	40c00017 	ldw	r3,0(r8)
  806040:	39000017 	ldw	r4,0(r7)
  806044:	42000104 	addi	r8,r8,4
  806048:	18bfffcc 	andi	r2,r3,65535
  80604c:	a085383a 	mul	r2,r20,r2
  806050:	1806d43a 	srli	r3,r3,16
  806054:	217fffcc 	andi	r5,r4,65535
  806058:	3085883a 	add	r2,r6,r2
  80605c:	11bfffcc 	andi	r6,r2,65535
  806060:	a0c7383a 	mul	r3,r20,r3
  806064:	1004d43a 	srli	r2,r2,16
  806068:	298bc83a 	sub	r5,r5,r6
  80606c:	2a4b883a 	add	r5,r5,r9
  806070:	2008d43a 	srli	r4,r4,16
  806074:	1887883a 	add	r3,r3,r2
  806078:	280dd43a 	srai	r6,r5,16
  80607c:	18bfffcc 	andi	r2,r3,65535
  806080:	2089c83a 	sub	r4,r4,r2
  806084:	2189883a 	add	r4,r4,r6
  806088:	3900008d 	sth	r4,2(r7)
  80608c:	3940000d 	sth	r5,0(r7)
  806090:	180cd43a 	srli	r6,r3,16
  806094:	39c00104 	addi	r7,r7,4
  806098:	2013d43a 	srai	r9,r4,16
  80609c:	923fe72e 	bgeu	r18,r8,80603c <quorem+0x178>
  8060a0:	e03fa61e 	bne	fp,zero,805f3c <quorem+0x78>
  8060a4:	b0ffff04 	addi	r3,r22,-4
  8060a8:	98c0082e 	bgeu	r19,r3,8060cc <quorem+0x208>
  8060ac:	b0bfff17 	ldw	r2,-4(r22)
  8060b0:	10000326 	beq	r2,zero,8060c0 <quorem+0x1fc>
  8060b4:	00000506 	br	8060cc <quorem+0x208>
  8060b8:	18800017 	ldw	r2,0(r3)
  8060bc:	1000031e 	bne	r2,zero,8060cc <quorem+0x208>
  8060c0:	18ffff04 	addi	r3,r3,-4
  8060c4:	8c7fffc4 	addi	r17,r17,-1
  8060c8:	98fffb36 	bltu	r19,r3,8060b8 <quorem+0x1f4>
  8060cc:	bc400415 	stw	r17,16(r23)
  8060d0:	003f9a06 	br	805f3c <quorem+0x78>
  8060d4:	0005883a 	mov	r2,zero
  8060d8:	003fc806 	br	805ffc <quorem+0x138>

008060dc <_dtoa_r>:
  8060dc:	22001017 	ldw	r8,64(r4)
  8060e0:	deffda04 	addi	sp,sp,-152
  8060e4:	dd402115 	stw	r21,132(sp)
  8060e8:	dd002015 	stw	r20,128(sp)
  8060ec:	dc801e15 	stw	r18,120(sp)
  8060f0:	dc401d15 	stw	r17,116(sp)
  8060f4:	dfc02515 	stw	ra,148(sp)
  8060f8:	df002415 	stw	fp,144(sp)
  8060fc:	ddc02315 	stw	r23,140(sp)
  806100:	dd802215 	stw	r22,136(sp)
  806104:	dcc01f15 	stw	r19,124(sp)
  806108:	dc001c15 	stw	r16,112(sp)
  80610c:	d9001615 	stw	r4,88(sp)
  806110:	3023883a 	mov	r17,r6
  806114:	2829883a 	mov	r20,r5
  806118:	d9c01715 	stw	r7,92(sp)
  80611c:	dc802817 	ldw	r18,160(sp)
  806120:	302b883a 	mov	r21,r6
  806124:	40000a26 	beq	r8,zero,806150 <_dtoa_r+0x74>
  806128:	20801117 	ldw	r2,68(r4)
  80612c:	400b883a 	mov	r5,r8
  806130:	40800115 	stw	r2,4(r8)
  806134:	20c01117 	ldw	r3,68(r4)
  806138:	00800044 	movi	r2,1
  80613c:	10c4983a 	sll	r2,r2,r3
  806140:	40800215 	stw	r2,8(r8)
  806144:	08092700 	call	809270 <_Bfree>
  806148:	d8c01617 	ldw	r3,88(sp)
  80614c:	18001015 	stw	zero,64(r3)
  806150:	8800a316 	blt	r17,zero,8063e0 <_dtoa_r+0x304>
  806154:	90000015 	stw	zero,0(r18)
  806158:	a8dffc2c 	andhi	r3,r21,32752
  80615c:	009ffc34 	movhi	r2,32752
  806160:	18809126 	beq	r3,r2,8063a8 <_dtoa_r+0x2cc>
  806164:	000d883a 	mov	r6,zero
  806168:	000f883a 	mov	r7,zero
  80616c:	a009883a 	mov	r4,r20
  806170:	a80b883a 	mov	r5,r21
  806174:	dd001215 	stw	r20,72(sp)
  806178:	dd401315 	stw	r21,76(sp)
  80617c:	08032180 	call	803218 <__nedf2>
  806180:	1000171e 	bne	r2,zero,8061e0 <_dtoa_r+0x104>
  806184:	d9802717 	ldw	r6,156(sp)
  806188:	00800044 	movi	r2,1
  80618c:	30800015 	stw	r2,0(r6)
  806190:	d8802917 	ldw	r2,164(sp)
  806194:	10029b26 	beq	r2,zero,806c04 <_dtoa_r+0xb28>
  806198:	d9002917 	ldw	r4,164(sp)
  80619c:	00802074 	movhi	r2,129
  8061a0:	10879f44 	addi	r2,r2,7805
  8061a4:	10ffffc4 	addi	r3,r2,-1
  8061a8:	20800015 	stw	r2,0(r4)
  8061ac:	1805883a 	mov	r2,r3
  8061b0:	dfc02517 	ldw	ra,148(sp)
  8061b4:	df002417 	ldw	fp,144(sp)
  8061b8:	ddc02317 	ldw	r23,140(sp)
  8061bc:	dd802217 	ldw	r22,136(sp)
  8061c0:	dd402117 	ldw	r21,132(sp)
  8061c4:	dd002017 	ldw	r20,128(sp)
  8061c8:	dcc01f17 	ldw	r19,124(sp)
  8061cc:	dc801e17 	ldw	r18,120(sp)
  8061d0:	dc401d17 	ldw	r17,116(sp)
  8061d4:	dc001c17 	ldw	r16,112(sp)
  8061d8:	dec02604 	addi	sp,sp,152
  8061dc:	f800283a 	ret
  8061e0:	d9001617 	ldw	r4,88(sp)
  8061e4:	d9401217 	ldw	r5,72(sp)
  8061e8:	d8800104 	addi	r2,sp,4
  8061ec:	a80d883a 	mov	r6,r21
  8061f0:	d9c00204 	addi	r7,sp,8
  8061f4:	d8800015 	stw	r2,0(sp)
  8061f8:	08098ac0 	call	8098ac <__d2b>
  8061fc:	d8800715 	stw	r2,28(sp)
  806200:	a804d53a 	srli	r2,r21,20
  806204:	1101ffcc 	andi	r4,r2,2047
  806208:	20008626 	beq	r4,zero,806424 <_dtoa_r+0x348>
  80620c:	d8c01217 	ldw	r3,72(sp)
  806210:	00800434 	movhi	r2,16
  806214:	10bfffc4 	addi	r2,r2,-1
  806218:	ddc00117 	ldw	r23,4(sp)
  80621c:	a884703a 	and	r2,r21,r2
  806220:	1811883a 	mov	r8,r3
  806224:	124ffc34 	orhi	r9,r2,16368
  806228:	25bf0044 	addi	r22,r4,-1023
  80622c:	d8000815 	stw	zero,32(sp)
  806230:	0005883a 	mov	r2,zero
  806234:	00cffe34 	movhi	r3,16376
  806238:	480b883a 	mov	r5,r9
  80623c:	4009883a 	mov	r4,r8
  806240:	180f883a 	mov	r7,r3
  806244:	100d883a 	mov	r6,r2
  806248:	0802ecc0 	call	802ecc <__subdf3>
  80624c:	0218dbf4 	movhi	r8,25455
  806250:	4210d844 	addi	r8,r8,17249
  806254:	024ff4f4 	movhi	r9,16339
  806258:	4a61e9c4 	addi	r9,r9,-30809
  80625c:	480f883a 	mov	r7,r9
  806260:	400d883a 	mov	r6,r8
  806264:	180b883a 	mov	r5,r3
  806268:	1009883a 	mov	r4,r2
  80626c:	080bb600 	call	80bb60 <__muldf3>
  806270:	0222d874 	movhi	r8,35681
  806274:	42322cc4 	addi	r8,r8,-14157
  806278:	024ff1f4 	movhi	r9,16327
  80627c:	4a628a04 	addi	r9,r9,-30168
  806280:	480f883a 	mov	r7,r9
  806284:	400d883a 	mov	r6,r8
  806288:	180b883a 	mov	r5,r3
  80628c:	1009883a 	mov	r4,r2
  806290:	0802f4c0 	call	802f4c <__adddf3>
  806294:	b009883a 	mov	r4,r22
  806298:	1021883a 	mov	r16,r2
  80629c:	1823883a 	mov	r17,r3
  8062a0:	080c1440 	call	80c144 <__floatsidf>
  8062a4:	021427f4 	movhi	r8,20639
  8062a8:	421e7ec4 	addi	r8,r8,31227
  8062ac:	024ff4f4 	movhi	r9,16339
  8062b0:	4a5104c4 	addi	r9,r9,17427
  8062b4:	480f883a 	mov	r7,r9
  8062b8:	400d883a 	mov	r6,r8
  8062bc:	180b883a 	mov	r5,r3
  8062c0:	1009883a 	mov	r4,r2
  8062c4:	080bb600 	call	80bb60 <__muldf3>
  8062c8:	180f883a 	mov	r7,r3
  8062cc:	880b883a 	mov	r5,r17
  8062d0:	100d883a 	mov	r6,r2
  8062d4:	8009883a 	mov	r4,r16
  8062d8:	0802f4c0 	call	802f4c <__adddf3>
  8062dc:	1009883a 	mov	r4,r2
  8062e0:	180b883a 	mov	r5,r3
  8062e4:	1021883a 	mov	r16,r2
  8062e8:	1823883a 	mov	r17,r3
  8062ec:	080c23c0 	call	80c23c <__fixdfsi>
  8062f0:	000d883a 	mov	r6,zero
  8062f4:	000f883a 	mov	r7,zero
  8062f8:	8009883a 	mov	r4,r16
  8062fc:	880b883a 	mov	r5,r17
  806300:	d8800d15 	stw	r2,52(sp)
  806304:	080c0bc0 	call	80c0bc <__ltdf2>
  806308:	10031716 	blt	r2,zero,806f68 <_dtoa_r+0xe8c>
  80630c:	d8c00d17 	ldw	r3,52(sp)
  806310:	00800584 	movi	r2,22
  806314:	10c1482e 	bgeu	r2,r3,806838 <_dtoa_r+0x75c>
  806318:	01000044 	movi	r4,1
  80631c:	d9000c15 	stw	r4,48(sp)
  806320:	bd85c83a 	sub	r2,r23,r22
  806324:	11bfffc4 	addi	r6,r2,-1
  806328:	30030b16 	blt	r6,zero,806f58 <_dtoa_r+0xe7c>
  80632c:	d9800a15 	stw	r6,40(sp)
  806330:	d8001115 	stw	zero,68(sp)
  806334:	d8c00d17 	ldw	r3,52(sp)
  806338:	1802ff16 	blt	r3,zero,806f38 <_dtoa_r+0xe5c>
  80633c:	d9000a17 	ldw	r4,40(sp)
  806340:	d8c00915 	stw	r3,36(sp)
  806344:	d8001015 	stw	zero,64(sp)
  806348:	20c9883a 	add	r4,r4,r3
  80634c:	d9000a15 	stw	r4,40(sp)
  806350:	d9001717 	ldw	r4,92(sp)
  806354:	00800244 	movi	r2,9
  806358:	11004636 	bltu	r2,r4,806474 <_dtoa_r+0x398>
  80635c:	00800144 	movi	r2,5
  806360:	11020416 	blt	r2,r4,806b74 <_dtoa_r+0xa98>
  806364:	04400044 	movi	r17,1
  806368:	d8c01717 	ldw	r3,92(sp)
  80636c:	00800144 	movi	r2,5
  806370:	10c1ed36 	bltu	r2,r3,806b28 <_dtoa_r+0xa4c>
  806374:	18c5883a 	add	r2,r3,r3
  806378:	1085883a 	add	r2,r2,r2
  80637c:	00c02034 	movhi	r3,128
  806380:	18d8e404 	addi	r3,r3,25488
  806384:	10c5883a 	add	r2,r2,r3
  806388:	11000017 	ldw	r4,0(r2)
  80638c:	2000683a 	jmp	r4
  806390:	0080647c 	xorhi	r2,zero,401
  806394:	0080647c 	xorhi	r2,zero,401
  806398:	00806e7c 	xorhi	r2,zero,441
  80639c:	00806e54 	movui	r2,441
  8063a0:	00806e98 	cmpnei	r2,zero,442
  8063a4:	00806ea4 	muli	r2,zero,442
  8063a8:	d9002717 	ldw	r4,156(sp)
  8063ac:	0089c3c4 	movi	r2,9999
  8063b0:	20800015 	stw	r2,0(r4)
  8063b4:	a0001026 	beq	r20,zero,8063f8 <_dtoa_r+0x31c>
  8063b8:	00c02074 	movhi	r3,129
  8063bc:	18c83204 	addi	r3,r3,8392
  8063c0:	d9802917 	ldw	r6,164(sp)
  8063c4:	303f7926 	beq	r6,zero,8061ac <_dtoa_r+0xd0>
  8063c8:	188000c7 	ldb	r2,3(r3)
  8063cc:	190000c4 	addi	r4,r3,3
  8063d0:	1000101e 	bne	r2,zero,806414 <_dtoa_r+0x338>
  8063d4:	d8802917 	ldw	r2,164(sp)
  8063d8:	11000015 	stw	r4,0(r2)
  8063dc:	003f7306 	br	8061ac <_dtoa_r+0xd0>
  8063e0:	00a00034 	movhi	r2,32768
  8063e4:	10bfffc4 	addi	r2,r2,-1
  8063e8:	00c00044 	movi	r3,1
  8063ec:	88aa703a 	and	r21,r17,r2
  8063f0:	90c00015 	stw	r3,0(r18)
  8063f4:	003f5806 	br	806158 <_dtoa_r+0x7c>
  8063f8:	00800434 	movhi	r2,16
  8063fc:	10bfffc4 	addi	r2,r2,-1
  806400:	a884703a 	and	r2,r21,r2
  806404:	103fec1e 	bne	r2,zero,8063b8 <_dtoa_r+0x2dc>
  806408:	00c02074 	movhi	r3,129
  80640c:	18c82f04 	addi	r3,r3,8380
  806410:	003feb06 	br	8063c0 <_dtoa_r+0x2e4>
  806414:	d8802917 	ldw	r2,164(sp)
  806418:	19000204 	addi	r4,r3,8
  80641c:	11000015 	stw	r4,0(r2)
  806420:	003f6206 	br	8061ac <_dtoa_r+0xd0>
  806424:	ddc00117 	ldw	r23,4(sp)
  806428:	d8800217 	ldw	r2,8(sp)
  80642c:	01000804 	movi	r4,32
  806430:	b8c10c84 	addi	r3,r23,1074
  806434:	18a3883a 	add	r17,r3,r2
  806438:	2441b80e 	bge	r4,r17,806b1c <_dtoa_r+0xa40>
  80643c:	00c01004 	movi	r3,64
  806440:	1c47c83a 	sub	r3,r3,r17
  806444:	88bff804 	addi	r2,r17,-32
  806448:	a8c6983a 	sll	r3,r21,r3
  80644c:	a084d83a 	srl	r2,r20,r2
  806450:	1888b03a 	or	r4,r3,r2
  806454:	080c3140 	call	80c314 <__floatunsidf>
  806458:	1011883a 	mov	r8,r2
  80645c:	00bf8434 	movhi	r2,65040
  806460:	01000044 	movi	r4,1
  806464:	10d3883a 	add	r9,r2,r3
  806468:	8dbef344 	addi	r22,r17,-1075
  80646c:	d9000815 	stw	r4,32(sp)
  806470:	003f6f06 	br	806230 <_dtoa_r+0x154>
  806474:	d8001715 	stw	zero,92(sp)
  806478:	04400044 	movi	r17,1
  80647c:	00bfffc4 	movi	r2,-1
  806480:	00c00044 	movi	r3,1
  806484:	d8800e15 	stw	r2,56(sp)
  806488:	d8002615 	stw	zero,152(sp)
  80648c:	d8800f15 	stw	r2,60(sp)
  806490:	d8c00b15 	stw	r3,44(sp)
  806494:	1021883a 	mov	r16,r2
  806498:	d8801617 	ldw	r2,88(sp)
  80649c:	10001115 	stw	zero,68(r2)
  8064a0:	d8801617 	ldw	r2,88(sp)
  8064a4:	11401117 	ldw	r5,68(r2)
  8064a8:	1009883a 	mov	r4,r2
  8064ac:	08097f00 	call	8097f0 <_Balloc>
  8064b0:	d8c01617 	ldw	r3,88(sp)
  8064b4:	d8800515 	stw	r2,20(sp)
  8064b8:	18801015 	stw	r2,64(r3)
  8064bc:	00800384 	movi	r2,14
  8064c0:	14006836 	bltu	r2,r16,806664 <_dtoa_r+0x588>
  8064c4:	8805003a 	cmpeq	r2,r17,zero
  8064c8:	1000661e 	bne	r2,zero,806664 <_dtoa_r+0x588>
  8064cc:	d9000d17 	ldw	r4,52(sp)
  8064d0:	0102300e 	bge	zero,r4,806d94 <_dtoa_r+0xcb8>
  8064d4:	208003cc 	andi	r2,r4,15
  8064d8:	100490fa 	slli	r2,r2,3
  8064dc:	2025d13a 	srai	r18,r4,4
  8064e0:	00c02074 	movhi	r3,129
  8064e4:	18c84204 	addi	r3,r3,8456
  8064e8:	10c5883a 	add	r2,r2,r3
  8064ec:	90c0040c 	andi	r3,r18,16
  8064f0:	14000017 	ldw	r16,0(r2)
  8064f4:	14400117 	ldw	r17,4(r2)
  8064f8:	18036a1e 	bne	r3,zero,8072a4 <_dtoa_r+0x11c8>
  8064fc:	05800084 	movi	r22,2
  806500:	90001026 	beq	r18,zero,806544 <_dtoa_r+0x468>
  806504:	04c02074 	movhi	r19,129
  806508:	9cc87404 	addi	r19,r19,8656
  80650c:	9080004c 	andi	r2,r18,1
  806510:	1005003a 	cmpeq	r2,r2,zero
  806514:	1000081e 	bne	r2,zero,806538 <_dtoa_r+0x45c>
  806518:	99800017 	ldw	r6,0(r19)
  80651c:	99c00117 	ldw	r7,4(r19)
  806520:	880b883a 	mov	r5,r17
  806524:	8009883a 	mov	r4,r16
  806528:	080bb600 	call	80bb60 <__muldf3>
  80652c:	1021883a 	mov	r16,r2
  806530:	b5800044 	addi	r22,r22,1
  806534:	1823883a 	mov	r17,r3
  806538:	9025d07a 	srai	r18,r18,1
  80653c:	9cc00204 	addi	r19,r19,8
  806540:	903ff21e 	bne	r18,zero,80650c <_dtoa_r+0x430>
  806544:	a80b883a 	mov	r5,r21
  806548:	a009883a 	mov	r4,r20
  80654c:	880f883a 	mov	r7,r17
  806550:	800d883a 	mov	r6,r16
  806554:	0802fc00 	call	802fc0 <__divdf3>
  806558:	1029883a 	mov	r20,r2
  80655c:	182b883a 	mov	r21,r3
  806560:	d8c00c17 	ldw	r3,48(sp)
  806564:	1805003a 	cmpeq	r2,r3,zero
  806568:	1000081e 	bne	r2,zero,80658c <_dtoa_r+0x4b0>
  80656c:	0005883a 	mov	r2,zero
  806570:	00cffc34 	movhi	r3,16368
  806574:	180f883a 	mov	r7,r3
  806578:	a009883a 	mov	r4,r20
  80657c:	a80b883a 	mov	r5,r21
  806580:	100d883a 	mov	r6,r2
  806584:	080c0bc0 	call	80c0bc <__ltdf2>
  806588:	1003fe16 	blt	r2,zero,807584 <_dtoa_r+0x14a8>
  80658c:	b009883a 	mov	r4,r22
  806590:	080c1440 	call	80c144 <__floatsidf>
  806594:	180b883a 	mov	r5,r3
  806598:	1009883a 	mov	r4,r2
  80659c:	a00d883a 	mov	r6,r20
  8065a0:	a80f883a 	mov	r7,r21
  8065a4:	080bb600 	call	80bb60 <__muldf3>
  8065a8:	0011883a 	mov	r8,zero
  8065ac:	02500734 	movhi	r9,16412
  8065b0:	1009883a 	mov	r4,r2
  8065b4:	180b883a 	mov	r5,r3
  8065b8:	480f883a 	mov	r7,r9
  8065bc:	400d883a 	mov	r6,r8
  8065c0:	0802f4c0 	call	802f4c <__adddf3>
  8065c4:	d9000f17 	ldw	r4,60(sp)
  8065c8:	102d883a 	mov	r22,r2
  8065cc:	00bf3034 	movhi	r2,64704
  8065d0:	18b9883a 	add	fp,r3,r2
  8065d4:	e02f883a 	mov	r23,fp
  8065d8:	20028f1e 	bne	r4,zero,807018 <_dtoa_r+0xf3c>
  8065dc:	0005883a 	mov	r2,zero
  8065e0:	00d00534 	movhi	r3,16404
  8065e4:	a009883a 	mov	r4,r20
  8065e8:	a80b883a 	mov	r5,r21
  8065ec:	180f883a 	mov	r7,r3
  8065f0:	100d883a 	mov	r6,r2
  8065f4:	0802ecc0 	call	802ecc <__subdf3>
  8065f8:	1009883a 	mov	r4,r2
  8065fc:	e00f883a 	mov	r7,fp
  806600:	180b883a 	mov	r5,r3
  806604:	b00d883a 	mov	r6,r22
  806608:	1025883a 	mov	r18,r2
  80660c:	1827883a 	mov	r19,r3
  806610:	080bfac0 	call	80bfac <__gtdf2>
  806614:	00834f16 	blt	zero,r2,807354 <_dtoa_r+0x1278>
  806618:	e0e0003c 	xorhi	r3,fp,32768
  80661c:	9009883a 	mov	r4,r18
  806620:	980b883a 	mov	r5,r19
  806624:	180f883a 	mov	r7,r3
  806628:	b00d883a 	mov	r6,r22
  80662c:	080c0bc0 	call	80c0bc <__ltdf2>
  806630:	1000080e 	bge	r2,zero,806654 <_dtoa_r+0x578>
  806634:	0027883a 	mov	r19,zero
  806638:	0025883a 	mov	r18,zero
  80663c:	d8802617 	ldw	r2,152(sp)
  806640:	df000517 	ldw	fp,20(sp)
  806644:	d8000615 	stw	zero,24(sp)
  806648:	0084303a 	nor	r2,zero,r2
  80664c:	d8800d15 	stw	r2,52(sp)
  806650:	00019b06 	br	806cc0 <_dtoa_r+0xbe4>
  806654:	d9801217 	ldw	r6,72(sp)
  806658:	d8801317 	ldw	r2,76(sp)
  80665c:	3029883a 	mov	r20,r6
  806660:	102b883a 	mov	r21,r2
  806664:	d8c00217 	ldw	r3,8(sp)
  806668:	18008516 	blt	r3,zero,806880 <_dtoa_r+0x7a4>
  80666c:	d9000d17 	ldw	r4,52(sp)
  806670:	00800384 	movi	r2,14
  806674:	11008216 	blt	r2,r4,806880 <_dtoa_r+0x7a4>
  806678:	200490fa 	slli	r2,r4,3
  80667c:	d9802617 	ldw	r6,152(sp)
  806680:	00c02074 	movhi	r3,129
  806684:	18c84204 	addi	r3,r3,8456
  806688:	10c5883a 	add	r2,r2,r3
  80668c:	14800017 	ldw	r18,0(r2)
  806690:	14c00117 	ldw	r19,4(r2)
  806694:	30031e16 	blt	r6,zero,807310 <_dtoa_r+0x1234>
  806698:	d9000517 	ldw	r4,20(sp)
  80669c:	d8c00f17 	ldw	r3,60(sp)
  8066a0:	a823883a 	mov	r17,r21
  8066a4:	a021883a 	mov	r16,r20
  8066a8:	192b883a 	add	r21,r3,r4
  8066ac:	2039883a 	mov	fp,r4
  8066b0:	00000f06 	br	8066f0 <_dtoa_r+0x614>
  8066b4:	0005883a 	mov	r2,zero
  8066b8:	00d00934 	movhi	r3,16420
  8066bc:	5009883a 	mov	r4,r10
  8066c0:	580b883a 	mov	r5,r11
  8066c4:	180f883a 	mov	r7,r3
  8066c8:	100d883a 	mov	r6,r2
  8066cc:	080bb600 	call	80bb60 <__muldf3>
  8066d0:	180b883a 	mov	r5,r3
  8066d4:	000d883a 	mov	r6,zero
  8066d8:	000f883a 	mov	r7,zero
  8066dc:	1009883a 	mov	r4,r2
  8066e0:	1021883a 	mov	r16,r2
  8066e4:	1823883a 	mov	r17,r3
  8066e8:	08032180 	call	803218 <__nedf2>
  8066ec:	10004526 	beq	r2,zero,806804 <_dtoa_r+0x728>
  8066f0:	900d883a 	mov	r6,r18
  8066f4:	980f883a 	mov	r7,r19
  8066f8:	8009883a 	mov	r4,r16
  8066fc:	880b883a 	mov	r5,r17
  806700:	0802fc00 	call	802fc0 <__divdf3>
  806704:	180b883a 	mov	r5,r3
  806708:	1009883a 	mov	r4,r2
  80670c:	080c23c0 	call	80c23c <__fixdfsi>
  806710:	1009883a 	mov	r4,r2
  806714:	1029883a 	mov	r20,r2
  806718:	080c1440 	call	80c144 <__floatsidf>
  80671c:	180f883a 	mov	r7,r3
  806720:	9009883a 	mov	r4,r18
  806724:	980b883a 	mov	r5,r19
  806728:	100d883a 	mov	r6,r2
  80672c:	080bb600 	call	80bb60 <__muldf3>
  806730:	180f883a 	mov	r7,r3
  806734:	880b883a 	mov	r5,r17
  806738:	8009883a 	mov	r4,r16
  80673c:	100d883a 	mov	r6,r2
  806740:	0802ecc0 	call	802ecc <__subdf3>
  806744:	1015883a 	mov	r10,r2
  806748:	a0800c04 	addi	r2,r20,48
  80674c:	e0800005 	stb	r2,0(fp)
  806750:	e7000044 	addi	fp,fp,1
  806754:	1817883a 	mov	r11,r3
  806758:	e57fd61e 	bne	fp,r21,8066b4 <_dtoa_r+0x5d8>
  80675c:	500d883a 	mov	r6,r10
  806760:	180f883a 	mov	r7,r3
  806764:	5009883a 	mov	r4,r10
  806768:	180b883a 	mov	r5,r3
  80676c:	0802f4c0 	call	802f4c <__adddf3>
  806770:	100d883a 	mov	r6,r2
  806774:	9009883a 	mov	r4,r18
  806778:	980b883a 	mov	r5,r19
  80677c:	180f883a 	mov	r7,r3
  806780:	1021883a 	mov	r16,r2
  806784:	1823883a 	mov	r17,r3
  806788:	080c0bc0 	call	80c0bc <__ltdf2>
  80678c:	10000816 	blt	r2,zero,8067b0 <_dtoa_r+0x6d4>
  806790:	980b883a 	mov	r5,r19
  806794:	800d883a 	mov	r6,r16
  806798:	880f883a 	mov	r7,r17
  80679c:	9009883a 	mov	r4,r18
  8067a0:	080bf240 	call	80bf24 <__eqdf2>
  8067a4:	1000171e 	bne	r2,zero,806804 <_dtoa_r+0x728>
  8067a8:	a080004c 	andi	r2,r20,1
  8067ac:	10001526 	beq	r2,zero,806804 <_dtoa_r+0x728>
  8067b0:	d8800d17 	ldw	r2,52(sp)
  8067b4:	d8800415 	stw	r2,16(sp)
  8067b8:	e009883a 	mov	r4,fp
  8067bc:	213fffc4 	addi	r4,r4,-1
  8067c0:	20c00007 	ldb	r3,0(r4)
  8067c4:	00800e44 	movi	r2,57
  8067c8:	1880081e 	bne	r3,r2,8067ec <_dtoa_r+0x710>
  8067cc:	d8800517 	ldw	r2,20(sp)
  8067d0:	113ffa1e 	bne	r2,r4,8067bc <_dtoa_r+0x6e0>
  8067d4:	d8c00417 	ldw	r3,16(sp)
  8067d8:	d9800517 	ldw	r6,20(sp)
  8067dc:	00800c04 	movi	r2,48
  8067e0:	18c00044 	addi	r3,r3,1
  8067e4:	d8c00415 	stw	r3,16(sp)
  8067e8:	30800005 	stb	r2,0(r6)
  8067ec:	20800003 	ldbu	r2,0(r4)
  8067f0:	d8c00417 	ldw	r3,16(sp)
  8067f4:	27000044 	addi	fp,r4,1
  8067f8:	10800044 	addi	r2,r2,1
  8067fc:	d8c00d15 	stw	r3,52(sp)
  806800:	20800005 	stb	r2,0(r4)
  806804:	d9001617 	ldw	r4,88(sp)
  806808:	d9400717 	ldw	r5,28(sp)
  80680c:	08092700 	call	809270 <_Bfree>
  806810:	e0000005 	stb	zero,0(fp)
  806814:	d9800d17 	ldw	r6,52(sp)
  806818:	d8c02717 	ldw	r3,156(sp)
  80681c:	d9002917 	ldw	r4,164(sp)
  806820:	30800044 	addi	r2,r6,1
  806824:	18800015 	stw	r2,0(r3)
  806828:	20029c26 	beq	r4,zero,80729c <_dtoa_r+0x11c0>
  80682c:	d8c00517 	ldw	r3,20(sp)
  806830:	27000015 	stw	fp,0(r4)
  806834:	003e5d06 	br	8061ac <_dtoa_r+0xd0>
  806838:	d9800d17 	ldw	r6,52(sp)
  80683c:	00c02074 	movhi	r3,129
  806840:	18c84204 	addi	r3,r3,8456
  806844:	d9001217 	ldw	r4,72(sp)
  806848:	300490fa 	slli	r2,r6,3
  80684c:	d9401317 	ldw	r5,76(sp)
  806850:	10c5883a 	add	r2,r2,r3
  806854:	12000017 	ldw	r8,0(r2)
  806858:	12400117 	ldw	r9,4(r2)
  80685c:	400d883a 	mov	r6,r8
  806860:	480f883a 	mov	r7,r9
  806864:	080c0bc0 	call	80c0bc <__ltdf2>
  806868:	1000030e 	bge	r2,zero,806878 <_dtoa_r+0x79c>
  80686c:	d8800d17 	ldw	r2,52(sp)
  806870:	10bfffc4 	addi	r2,r2,-1
  806874:	d8800d15 	stw	r2,52(sp)
  806878:	d8000c15 	stw	zero,48(sp)
  80687c:	003ea806 	br	806320 <_dtoa_r+0x244>
  806880:	d9000b17 	ldw	r4,44(sp)
  806884:	202cc03a 	cmpne	r22,r4,zero
  806888:	b000c71e 	bne	r22,zero,806ba8 <_dtoa_r+0xacc>
  80688c:	dc001117 	ldw	r16,68(sp)
  806890:	dc801017 	ldw	r18,64(sp)
  806894:	0027883a 	mov	r19,zero
  806898:	04000b0e 	bge	zero,r16,8068c8 <_dtoa_r+0x7ec>
  80689c:	d8c00a17 	ldw	r3,40(sp)
  8068a0:	00c0090e 	bge	zero,r3,8068c8 <_dtoa_r+0x7ec>
  8068a4:	8005883a 	mov	r2,r16
  8068a8:	1c011316 	blt	r3,r16,806cf8 <_dtoa_r+0xc1c>
  8068ac:	d9000a17 	ldw	r4,40(sp)
  8068b0:	d9801117 	ldw	r6,68(sp)
  8068b4:	80a1c83a 	sub	r16,r16,r2
  8068b8:	2089c83a 	sub	r4,r4,r2
  8068bc:	308dc83a 	sub	r6,r6,r2
  8068c0:	d9000a15 	stw	r4,40(sp)
  8068c4:	d9801115 	stw	r6,68(sp)
  8068c8:	d8801017 	ldw	r2,64(sp)
  8068cc:	0080150e 	bge	zero,r2,806924 <_dtoa_r+0x848>
  8068d0:	d8c00b17 	ldw	r3,44(sp)
  8068d4:	1805003a 	cmpeq	r2,r3,zero
  8068d8:	1001c91e 	bne	r2,zero,807000 <_dtoa_r+0xf24>
  8068dc:	04800e0e 	bge	zero,r18,806918 <_dtoa_r+0x83c>
  8068e0:	d9001617 	ldw	r4,88(sp)
  8068e4:	980b883a 	mov	r5,r19
  8068e8:	900d883a 	mov	r6,r18
  8068ec:	080a0240 	call	80a024 <__pow5mult>
  8068f0:	d9001617 	ldw	r4,88(sp)
  8068f4:	d9800717 	ldw	r6,28(sp)
  8068f8:	100b883a 	mov	r5,r2
  8068fc:	1027883a 	mov	r19,r2
  806900:	0809d000 	call	809d00 <__multiply>
  806904:	d9001617 	ldw	r4,88(sp)
  806908:	d9400717 	ldw	r5,28(sp)
  80690c:	1023883a 	mov	r17,r2
  806910:	08092700 	call	809270 <_Bfree>
  806914:	dc400715 	stw	r17,28(sp)
  806918:	d9001017 	ldw	r4,64(sp)
  80691c:	248dc83a 	sub	r6,r4,r18
  806920:	30010e1e 	bne	r6,zero,806d5c <_dtoa_r+0xc80>
  806924:	d9001617 	ldw	r4,88(sp)
  806928:	04400044 	movi	r17,1
  80692c:	880b883a 	mov	r5,r17
  806930:	0809ee80 	call	809ee8 <__i2b>
  806934:	d9800917 	ldw	r6,36(sp)
  806938:	1025883a 	mov	r18,r2
  80693c:	0180040e 	bge	zero,r6,806950 <_dtoa_r+0x874>
  806940:	d9001617 	ldw	r4,88(sp)
  806944:	100b883a 	mov	r5,r2
  806948:	080a0240 	call	80a024 <__pow5mult>
  80694c:	1025883a 	mov	r18,r2
  806950:	d8801717 	ldw	r2,92(sp)
  806954:	8880f30e 	bge	r17,r2,806d24 <_dtoa_r+0xc48>
  806958:	0023883a 	mov	r17,zero
  80695c:	d9800917 	ldw	r6,36(sp)
  806960:	30019e1e 	bne	r6,zero,806fdc <_dtoa_r+0xf00>
  806964:	00c00044 	movi	r3,1
  806968:	d9000a17 	ldw	r4,40(sp)
  80696c:	20c5883a 	add	r2,r4,r3
  806970:	10c007cc 	andi	r3,r2,31
  806974:	1800841e 	bne	r3,zero,806b88 <_dtoa_r+0xaac>
  806978:	00800704 	movi	r2,28
  80697c:	d9000a17 	ldw	r4,40(sp)
  806980:	d9801117 	ldw	r6,68(sp)
  806984:	80a1883a 	add	r16,r16,r2
  806988:	2089883a 	add	r4,r4,r2
  80698c:	308d883a 	add	r6,r6,r2
  806990:	d9000a15 	stw	r4,40(sp)
  806994:	d9801115 	stw	r6,68(sp)
  806998:	d8801117 	ldw	r2,68(sp)
  80699c:	0080050e 	bge	zero,r2,8069b4 <_dtoa_r+0x8d8>
  8069a0:	d9400717 	ldw	r5,28(sp)
  8069a4:	d9001617 	ldw	r4,88(sp)
  8069a8:	100d883a 	mov	r6,r2
  8069ac:	0809bb40 	call	809bb4 <__lshift>
  8069b0:	d8800715 	stw	r2,28(sp)
  8069b4:	d8c00a17 	ldw	r3,40(sp)
  8069b8:	00c0050e 	bge	zero,r3,8069d0 <_dtoa_r+0x8f4>
  8069bc:	d9001617 	ldw	r4,88(sp)
  8069c0:	900b883a 	mov	r5,r18
  8069c4:	180d883a 	mov	r6,r3
  8069c8:	0809bb40 	call	809bb4 <__lshift>
  8069cc:	1025883a 	mov	r18,r2
  8069d0:	d9000c17 	ldw	r4,48(sp)
  8069d4:	2005003a 	cmpeq	r2,r4,zero
  8069d8:	10016f26 	beq	r2,zero,806f98 <_dtoa_r+0xebc>
  8069dc:	d9000f17 	ldw	r4,60(sp)
  8069e0:	0102170e 	bge	zero,r4,807240 <_dtoa_r+0x1164>
  8069e4:	d9800b17 	ldw	r6,44(sp)
  8069e8:	3005003a 	cmpeq	r2,r6,zero
  8069ec:	1000881e 	bne	r2,zero,806c10 <_dtoa_r+0xb34>
  8069f0:	0400050e 	bge	zero,r16,806a08 <_dtoa_r+0x92c>
  8069f4:	d9001617 	ldw	r4,88(sp)
  8069f8:	980b883a 	mov	r5,r19
  8069fc:	800d883a 	mov	r6,r16
  806a00:	0809bb40 	call	809bb4 <__lshift>
  806a04:	1027883a 	mov	r19,r2
  806a08:	8804c03a 	cmpne	r2,r17,zero
  806a0c:	1002541e 	bne	r2,zero,807360 <_dtoa_r+0x1284>
  806a10:	980b883a 	mov	r5,r19
  806a14:	dd800517 	ldw	r22,20(sp)
  806a18:	dcc00615 	stw	r19,24(sp)
  806a1c:	a700004c 	andi	fp,r20,1
  806a20:	2827883a 	mov	r19,r5
  806a24:	d9000717 	ldw	r4,28(sp)
  806a28:	900b883a 	mov	r5,r18
  806a2c:	0805ec40 	call	805ec4 <quorem>
  806a30:	d9000717 	ldw	r4,28(sp)
  806a34:	d9400617 	ldw	r5,24(sp)
  806a38:	1023883a 	mov	r17,r2
  806a3c:	8dc00c04 	addi	r23,r17,48
  806a40:	08093cc0 	call	8093cc <__mcmp>
  806a44:	d9001617 	ldw	r4,88(sp)
  806a48:	900b883a 	mov	r5,r18
  806a4c:	980d883a 	mov	r6,r19
  806a50:	1029883a 	mov	r20,r2
  806a54:	0809a280 	call	809a28 <__mdiff>
  806a58:	102b883a 	mov	r21,r2
  806a5c:	10800317 	ldw	r2,12(r2)
  806a60:	1001281e 	bne	r2,zero,806f04 <_dtoa_r+0xe28>
  806a64:	d9000717 	ldw	r4,28(sp)
  806a68:	a80b883a 	mov	r5,r21
  806a6c:	08093cc0 	call	8093cc <__mcmp>
  806a70:	d9001617 	ldw	r4,88(sp)
  806a74:	1021883a 	mov	r16,r2
  806a78:	a80b883a 	mov	r5,r21
  806a7c:	08092700 	call	809270 <_Bfree>
  806a80:	8000041e 	bne	r16,zero,806a94 <_dtoa_r+0x9b8>
  806a84:	d8801717 	ldw	r2,92(sp)
  806a88:	1000021e 	bne	r2,zero,806a94 <_dtoa_r+0x9b8>
  806a8c:	e004c03a 	cmpne	r2,fp,zero
  806a90:	10011726 	beq	r2,zero,806ef0 <_dtoa_r+0xe14>
  806a94:	a0010616 	blt	r20,zero,806eb0 <_dtoa_r+0xdd4>
  806a98:	a000041e 	bne	r20,zero,806aac <_dtoa_r+0x9d0>
  806a9c:	d8c01717 	ldw	r3,92(sp)
  806aa0:	1800021e 	bne	r3,zero,806aac <_dtoa_r+0x9d0>
  806aa4:	e004c03a 	cmpne	r2,fp,zero
  806aa8:	10010126 	beq	r2,zero,806eb0 <_dtoa_r+0xdd4>
  806aac:	04023d16 	blt	zero,r16,8073a4 <_dtoa_r+0x12c8>
  806ab0:	b5c00005 	stb	r23,0(r22)
  806ab4:	d9800517 	ldw	r6,20(sp)
  806ab8:	d9000f17 	ldw	r4,60(sp)
  806abc:	b5800044 	addi	r22,r22,1
  806ac0:	3105883a 	add	r2,r6,r4
  806ac4:	b0806526 	beq	r22,r2,806c5c <_dtoa_r+0xb80>
  806ac8:	d9400717 	ldw	r5,28(sp)
  806acc:	d9001617 	ldw	r4,88(sp)
  806ad0:	01800284 	movi	r6,10
  806ad4:	000f883a 	mov	r7,zero
  806ad8:	0809f240 	call	809f24 <__multadd>
  806adc:	d8800715 	stw	r2,28(sp)
  806ae0:	d8800617 	ldw	r2,24(sp)
  806ae4:	14c10c26 	beq	r2,r19,806f18 <_dtoa_r+0xe3c>
  806ae8:	d9400617 	ldw	r5,24(sp)
  806aec:	d9001617 	ldw	r4,88(sp)
  806af0:	01800284 	movi	r6,10
  806af4:	000f883a 	mov	r7,zero
  806af8:	0809f240 	call	809f24 <__multadd>
  806afc:	d9001617 	ldw	r4,88(sp)
  806b00:	980b883a 	mov	r5,r19
  806b04:	01800284 	movi	r6,10
  806b08:	000f883a 	mov	r7,zero
  806b0c:	d8800615 	stw	r2,24(sp)
  806b10:	0809f240 	call	809f24 <__multadd>
  806b14:	1027883a 	mov	r19,r2
  806b18:	003fc206 	br	806a24 <_dtoa_r+0x948>
  806b1c:	2445c83a 	sub	r2,r4,r17
  806b20:	a088983a 	sll	r4,r20,r2
  806b24:	003e4b06 	br	806454 <_dtoa_r+0x378>
  806b28:	01bfffc4 	movi	r6,-1
  806b2c:	00800044 	movi	r2,1
  806b30:	d9800e15 	stw	r6,56(sp)
  806b34:	d9800f15 	stw	r6,60(sp)
  806b38:	d8800b15 	stw	r2,44(sp)
  806b3c:	d8c01617 	ldw	r3,88(sp)
  806b40:	008005c4 	movi	r2,23
  806b44:	18001115 	stw	zero,68(r3)
  806b48:	1580082e 	bgeu	r2,r22,806b6c <_dtoa_r+0xa90>
  806b4c:	00c00104 	movi	r3,4
  806b50:	0009883a 	mov	r4,zero
  806b54:	18c7883a 	add	r3,r3,r3
  806b58:	18800504 	addi	r2,r3,20
  806b5c:	21000044 	addi	r4,r4,1
  806b60:	b0bffc2e 	bgeu	r22,r2,806b54 <_dtoa_r+0xa78>
  806b64:	d9801617 	ldw	r6,88(sp)
  806b68:	31001115 	stw	r4,68(r6)
  806b6c:	dc000f17 	ldw	r16,60(sp)
  806b70:	003e4b06 	br	8064a0 <_dtoa_r+0x3c4>
  806b74:	d9801717 	ldw	r6,92(sp)
  806b78:	0023883a 	mov	r17,zero
  806b7c:	31bfff04 	addi	r6,r6,-4
  806b80:	d9801715 	stw	r6,92(sp)
  806b84:	003df806 	br	806368 <_dtoa_r+0x28c>
  806b88:	00800804 	movi	r2,32
  806b8c:	10c9c83a 	sub	r4,r2,r3
  806b90:	00c00104 	movi	r3,4
  806b94:	19005a16 	blt	r3,r4,806d00 <_dtoa_r+0xc24>
  806b98:	008000c4 	movi	r2,3
  806b9c:	113f7e16 	blt	r2,r4,806998 <_dtoa_r+0x8bc>
  806ba0:	20800704 	addi	r2,r4,28
  806ba4:	003f7506 	br	80697c <_dtoa_r+0x8a0>
  806ba8:	d9801717 	ldw	r6,92(sp)
  806bac:	00800044 	movi	r2,1
  806bb0:	1180a10e 	bge	r2,r6,806e38 <_dtoa_r+0xd5c>
  806bb4:	d9800f17 	ldw	r6,60(sp)
  806bb8:	d8c01017 	ldw	r3,64(sp)
  806bbc:	30bfffc4 	addi	r2,r6,-1
  806bc0:	1881c616 	blt	r3,r2,8072dc <_dtoa_r+0x1200>
  806bc4:	18a5c83a 	sub	r18,r3,r2
  806bc8:	d8800f17 	ldw	r2,60(sp)
  806bcc:	10026216 	blt	r2,zero,807558 <_dtoa_r+0x147c>
  806bd0:	dc001117 	ldw	r16,68(sp)
  806bd4:	1007883a 	mov	r3,r2
  806bd8:	d9800a17 	ldw	r6,40(sp)
  806bdc:	d8801117 	ldw	r2,68(sp)
  806be0:	d9001617 	ldw	r4,88(sp)
  806be4:	30cd883a 	add	r6,r6,r3
  806be8:	10c5883a 	add	r2,r2,r3
  806bec:	01400044 	movi	r5,1
  806bf0:	d9800a15 	stw	r6,40(sp)
  806bf4:	d8801115 	stw	r2,68(sp)
  806bf8:	0809ee80 	call	809ee8 <__i2b>
  806bfc:	1027883a 	mov	r19,r2
  806c00:	003f2506 	br	806898 <_dtoa_r+0x7bc>
  806c04:	00c02074 	movhi	r3,129
  806c08:	18c79f04 	addi	r3,r3,7804
  806c0c:	003d6706 	br	8061ac <_dtoa_r+0xd0>
  806c10:	dd800517 	ldw	r22,20(sp)
  806c14:	04000044 	movi	r16,1
  806c18:	00000706 	br	806c38 <_dtoa_r+0xb5c>
  806c1c:	d9400717 	ldw	r5,28(sp)
  806c20:	d9001617 	ldw	r4,88(sp)
  806c24:	01800284 	movi	r6,10
  806c28:	000f883a 	mov	r7,zero
  806c2c:	0809f240 	call	809f24 <__multadd>
  806c30:	d8800715 	stw	r2,28(sp)
  806c34:	84000044 	addi	r16,r16,1
  806c38:	d9000717 	ldw	r4,28(sp)
  806c3c:	900b883a 	mov	r5,r18
  806c40:	0805ec40 	call	805ec4 <quorem>
  806c44:	15c00c04 	addi	r23,r2,48
  806c48:	b5c00005 	stb	r23,0(r22)
  806c4c:	d8c00f17 	ldw	r3,60(sp)
  806c50:	b5800044 	addi	r22,r22,1
  806c54:	80fff116 	blt	r16,r3,806c1c <_dtoa_r+0xb40>
  806c58:	d8000615 	stw	zero,24(sp)
  806c5c:	d9400717 	ldw	r5,28(sp)
  806c60:	d9001617 	ldw	r4,88(sp)
  806c64:	01800044 	movi	r6,1
  806c68:	0809bb40 	call	809bb4 <__lshift>
  806c6c:	1009883a 	mov	r4,r2
  806c70:	900b883a 	mov	r5,r18
  806c74:	d8800715 	stw	r2,28(sp)
  806c78:	08093cc0 	call	8093cc <__mcmp>
  806c7c:	00803c0e 	bge	zero,r2,806d70 <_dtoa_r+0xc94>
  806c80:	b009883a 	mov	r4,r22
  806c84:	213fffc4 	addi	r4,r4,-1
  806c88:	21400003 	ldbu	r5,0(r4)
  806c8c:	00800e44 	movi	r2,57
  806c90:	28c03fcc 	andi	r3,r5,255
  806c94:	18c0201c 	xori	r3,r3,128
  806c98:	18ffe004 	addi	r3,r3,-128
  806c9c:	1881981e 	bne	r3,r2,807300 <_dtoa_r+0x1224>
  806ca0:	d9800517 	ldw	r6,20(sp)
  806ca4:	21bff71e 	bne	r4,r6,806c84 <_dtoa_r+0xba8>
  806ca8:	d8800d17 	ldw	r2,52(sp)
  806cac:	37000044 	addi	fp,r6,1
  806cb0:	10800044 	addi	r2,r2,1
  806cb4:	d8800d15 	stw	r2,52(sp)
  806cb8:	00800c44 	movi	r2,49
  806cbc:	30800005 	stb	r2,0(r6)
  806cc0:	d9001617 	ldw	r4,88(sp)
  806cc4:	900b883a 	mov	r5,r18
  806cc8:	08092700 	call	809270 <_Bfree>
  806ccc:	983ecd26 	beq	r19,zero,806804 <_dtoa_r+0x728>
  806cd0:	d8c00617 	ldw	r3,24(sp)
  806cd4:	18000426 	beq	r3,zero,806ce8 <_dtoa_r+0xc0c>
  806cd8:	1cc00326 	beq	r3,r19,806ce8 <_dtoa_r+0xc0c>
  806cdc:	d9001617 	ldw	r4,88(sp)
  806ce0:	180b883a 	mov	r5,r3
  806ce4:	08092700 	call	809270 <_Bfree>
  806ce8:	d9001617 	ldw	r4,88(sp)
  806cec:	980b883a 	mov	r5,r19
  806cf0:	08092700 	call	809270 <_Bfree>
  806cf4:	003ec306 	br	806804 <_dtoa_r+0x728>
  806cf8:	1805883a 	mov	r2,r3
  806cfc:	003eeb06 	br	8068ac <_dtoa_r+0x7d0>
  806d00:	d9800a17 	ldw	r6,40(sp)
  806d04:	d8c01117 	ldw	r3,68(sp)
  806d08:	20bfff04 	addi	r2,r4,-4
  806d0c:	308d883a 	add	r6,r6,r2
  806d10:	1887883a 	add	r3,r3,r2
  806d14:	80a1883a 	add	r16,r16,r2
  806d18:	d9800a15 	stw	r6,40(sp)
  806d1c:	d8c01115 	stw	r3,68(sp)
  806d20:	003f1d06 	br	806998 <_dtoa_r+0x8bc>
  806d24:	a03f0c1e 	bne	r20,zero,806958 <_dtoa_r+0x87c>
  806d28:	00800434 	movhi	r2,16
  806d2c:	10bfffc4 	addi	r2,r2,-1
  806d30:	a884703a 	and	r2,r21,r2
  806d34:	103f081e 	bne	r2,zero,806958 <_dtoa_r+0x87c>
  806d38:	a89ffc2c 	andhi	r2,r21,32752
  806d3c:	103f0626 	beq	r2,zero,806958 <_dtoa_r+0x87c>
  806d40:	d8c01117 	ldw	r3,68(sp)
  806d44:	d9000a17 	ldw	r4,40(sp)
  806d48:	18c00044 	addi	r3,r3,1
  806d4c:	21000044 	addi	r4,r4,1
  806d50:	d8c01115 	stw	r3,68(sp)
  806d54:	d9000a15 	stw	r4,40(sp)
  806d58:	003f0006 	br	80695c <_dtoa_r+0x880>
  806d5c:	d9400717 	ldw	r5,28(sp)
  806d60:	d9001617 	ldw	r4,88(sp)
  806d64:	080a0240 	call	80a024 <__pow5mult>
  806d68:	d8800715 	stw	r2,28(sp)
  806d6c:	003eed06 	br	806924 <_dtoa_r+0x848>
  806d70:	1000021e 	bne	r2,zero,806d7c <_dtoa_r+0xca0>
  806d74:	b880004c 	andi	r2,r23,1
  806d78:	103fc11e 	bne	r2,zero,806c80 <_dtoa_r+0xba4>
  806d7c:	b5bfffc4 	addi	r22,r22,-1
  806d80:	b0c00007 	ldb	r3,0(r22)
  806d84:	00800c04 	movi	r2,48
  806d88:	18bffc26 	beq	r3,r2,806d7c <_dtoa_r+0xca0>
  806d8c:	b7000044 	addi	fp,r22,1
  806d90:	003fcb06 	br	806cc0 <_dtoa_r+0xbe4>
  806d94:	d9800d17 	ldw	r6,52(sp)
  806d98:	018fc83a 	sub	r7,zero,r6
  806d9c:	3801f726 	beq	r7,zero,80757c <_dtoa_r+0x14a0>
  806da0:	398003cc 	andi	r6,r7,15
  806da4:	300c90fa 	slli	r6,r6,3
  806da8:	01402074 	movhi	r5,129
  806dac:	29484204 	addi	r5,r5,8456
  806db0:	d9001217 	ldw	r4,72(sp)
  806db4:	314d883a 	add	r6,r6,r5
  806db8:	30c00117 	ldw	r3,4(r6)
  806dbc:	30800017 	ldw	r2,0(r6)
  806dc0:	d9401317 	ldw	r5,76(sp)
  806dc4:	3821d13a 	srai	r16,r7,4
  806dc8:	100d883a 	mov	r6,r2
  806dcc:	180f883a 	mov	r7,r3
  806dd0:	080bb600 	call	80bb60 <__muldf3>
  806dd4:	1011883a 	mov	r8,r2
  806dd8:	1813883a 	mov	r9,r3
  806ddc:	1029883a 	mov	r20,r2
  806de0:	182b883a 	mov	r21,r3
  806de4:	8001e526 	beq	r16,zero,80757c <_dtoa_r+0x14a0>
  806de8:	05800084 	movi	r22,2
  806dec:	04402074 	movhi	r17,129
  806df0:	8c487404 	addi	r17,r17,8656
  806df4:	8080004c 	andi	r2,r16,1
  806df8:	1005003a 	cmpeq	r2,r2,zero
  806dfc:	1000081e 	bne	r2,zero,806e20 <_dtoa_r+0xd44>
  806e00:	89800017 	ldw	r6,0(r17)
  806e04:	89c00117 	ldw	r7,4(r17)
  806e08:	480b883a 	mov	r5,r9
  806e0c:	4009883a 	mov	r4,r8
  806e10:	080bb600 	call	80bb60 <__muldf3>
  806e14:	1011883a 	mov	r8,r2
  806e18:	b5800044 	addi	r22,r22,1
  806e1c:	1813883a 	mov	r9,r3
  806e20:	8021d07a 	srai	r16,r16,1
  806e24:	8c400204 	addi	r17,r17,8
  806e28:	803ff21e 	bne	r16,zero,806df4 <_dtoa_r+0xd18>
  806e2c:	4029883a 	mov	r20,r8
  806e30:	482b883a 	mov	r21,r9
  806e34:	003dca06 	br	806560 <_dtoa_r+0x484>
  806e38:	d9000817 	ldw	r4,32(sp)
  806e3c:	2005003a 	cmpeq	r2,r4,zero
  806e40:	1001f61e 	bne	r2,zero,80761c <_dtoa_r+0x1540>
  806e44:	dc001117 	ldw	r16,68(sp)
  806e48:	dc801017 	ldw	r18,64(sp)
  806e4c:	18c10cc4 	addi	r3,r3,1075
  806e50:	003f6106 	br	806bd8 <_dtoa_r+0xafc>
  806e54:	d8000b15 	stw	zero,44(sp)
  806e58:	d9802617 	ldw	r6,152(sp)
  806e5c:	d8c00d17 	ldw	r3,52(sp)
  806e60:	30800044 	addi	r2,r6,1
  806e64:	18ad883a 	add	r22,r3,r2
  806e68:	b13fffc4 	addi	r4,r22,-1
  806e6c:	d9000e15 	stw	r4,56(sp)
  806e70:	0581f60e 	bge	zero,r22,80764c <_dtoa_r+0x1570>
  806e74:	dd800f15 	stw	r22,60(sp)
  806e78:	003f3006 	br	806b3c <_dtoa_r+0xa60>
  806e7c:	d8000b15 	stw	zero,44(sp)
  806e80:	d9002617 	ldw	r4,152(sp)
  806e84:	0101eb0e 	bge	zero,r4,807634 <_dtoa_r+0x1558>
  806e88:	202d883a 	mov	r22,r4
  806e8c:	d9000e15 	stw	r4,56(sp)
  806e90:	d9000f15 	stw	r4,60(sp)
  806e94:	003f2906 	br	806b3c <_dtoa_r+0xa60>
  806e98:	01800044 	movi	r6,1
  806e9c:	d9800b15 	stw	r6,44(sp)
  806ea0:	003ff706 	br	806e80 <_dtoa_r+0xda4>
  806ea4:	01000044 	movi	r4,1
  806ea8:	d9000b15 	stw	r4,44(sp)
  806eac:	003fea06 	br	806e58 <_dtoa_r+0xd7c>
  806eb0:	04000c0e 	bge	zero,r16,806ee4 <_dtoa_r+0xe08>
  806eb4:	d9400717 	ldw	r5,28(sp)
  806eb8:	d9001617 	ldw	r4,88(sp)
  806ebc:	01800044 	movi	r6,1
  806ec0:	0809bb40 	call	809bb4 <__lshift>
  806ec4:	1009883a 	mov	r4,r2
  806ec8:	900b883a 	mov	r5,r18
  806ecc:	d8800715 	stw	r2,28(sp)
  806ed0:	08093cc0 	call	8093cc <__mcmp>
  806ed4:	0081e00e 	bge	zero,r2,807658 <_dtoa_r+0x157c>
  806ed8:	bdc00044 	addi	r23,r23,1
  806edc:	00800e84 	movi	r2,58
  806ee0:	b881a226 	beq	r23,r2,80756c <_dtoa_r+0x1490>
  806ee4:	b7000044 	addi	fp,r22,1
  806ee8:	b5c00005 	stb	r23,0(r22)
  806eec:	003f7406 	br	806cc0 <_dtoa_r+0xbe4>
  806ef0:	00800e44 	movi	r2,57
  806ef4:	b8819d26 	beq	r23,r2,80756c <_dtoa_r+0x1490>
  806ef8:	053ffa0e 	bge	zero,r20,806ee4 <_dtoa_r+0xe08>
  806efc:	8dc00c44 	addi	r23,r17,49
  806f00:	003ff806 	br	806ee4 <_dtoa_r+0xe08>
  806f04:	d9001617 	ldw	r4,88(sp)
  806f08:	a80b883a 	mov	r5,r21
  806f0c:	04000044 	movi	r16,1
  806f10:	08092700 	call	809270 <_Bfree>
  806f14:	003edf06 	br	806a94 <_dtoa_r+0x9b8>
  806f18:	d9001617 	ldw	r4,88(sp)
  806f1c:	980b883a 	mov	r5,r19
  806f20:	01800284 	movi	r6,10
  806f24:	000f883a 	mov	r7,zero
  806f28:	0809f240 	call	809f24 <__multadd>
  806f2c:	1027883a 	mov	r19,r2
  806f30:	d8800615 	stw	r2,24(sp)
  806f34:	003ebb06 	br	806a24 <_dtoa_r+0x948>
  806f38:	d9801117 	ldw	r6,68(sp)
  806f3c:	d8800d17 	ldw	r2,52(sp)
  806f40:	d8000915 	stw	zero,36(sp)
  806f44:	308dc83a 	sub	r6,r6,r2
  806f48:	0087c83a 	sub	r3,zero,r2
  806f4c:	d9801115 	stw	r6,68(sp)
  806f50:	d8c01015 	stw	r3,64(sp)
  806f54:	003cfe06 	br	806350 <_dtoa_r+0x274>
  806f58:	018dc83a 	sub	r6,zero,r6
  806f5c:	d9801115 	stw	r6,68(sp)
  806f60:	d8000a15 	stw	zero,40(sp)
  806f64:	003cf306 	br	806334 <_dtoa_r+0x258>
  806f68:	d9000d17 	ldw	r4,52(sp)
  806f6c:	080c1440 	call	80c144 <__floatsidf>
  806f70:	880b883a 	mov	r5,r17
  806f74:	8009883a 	mov	r4,r16
  806f78:	180f883a 	mov	r7,r3
  806f7c:	100d883a 	mov	r6,r2
  806f80:	08032180 	call	803218 <__nedf2>
  806f84:	103ce126 	beq	r2,zero,80630c <_dtoa_r+0x230>
  806f88:	d9800d17 	ldw	r6,52(sp)
  806f8c:	31bfffc4 	addi	r6,r6,-1
  806f90:	d9800d15 	stw	r6,52(sp)
  806f94:	003cdd06 	br	80630c <_dtoa_r+0x230>
  806f98:	d9000717 	ldw	r4,28(sp)
  806f9c:	900b883a 	mov	r5,r18
  806fa0:	08093cc0 	call	8093cc <__mcmp>
  806fa4:	103e8d0e 	bge	r2,zero,8069dc <_dtoa_r+0x900>
  806fa8:	d9400717 	ldw	r5,28(sp)
  806fac:	d9001617 	ldw	r4,88(sp)
  806fb0:	01800284 	movi	r6,10
  806fb4:	000f883a 	mov	r7,zero
  806fb8:	0809f240 	call	809f24 <__multadd>
  806fbc:	d9800d17 	ldw	r6,52(sp)
  806fc0:	d8800715 	stw	r2,28(sp)
  806fc4:	31bfffc4 	addi	r6,r6,-1
  806fc8:	d9800d15 	stw	r6,52(sp)
  806fcc:	b001a71e 	bne	r22,zero,80766c <_dtoa_r+0x1590>
  806fd0:	d8800e17 	ldw	r2,56(sp)
  806fd4:	d8800f15 	stw	r2,60(sp)
  806fd8:	003e8006 	br	8069dc <_dtoa_r+0x900>
  806fdc:	90800417 	ldw	r2,16(r18)
  806fe0:	1085883a 	add	r2,r2,r2
  806fe4:	1085883a 	add	r2,r2,r2
  806fe8:	1485883a 	add	r2,r2,r18
  806fec:	11000417 	ldw	r4,16(r2)
  806ff0:	08092980 	call	809298 <__hi0bits>
  806ff4:	00c00804 	movi	r3,32
  806ff8:	1887c83a 	sub	r3,r3,r2
  806ffc:	003e5a06 	br	806968 <_dtoa_r+0x88c>
  807000:	d9400717 	ldw	r5,28(sp)
  807004:	d9801017 	ldw	r6,64(sp)
  807008:	d9001617 	ldw	r4,88(sp)
  80700c:	080a0240 	call	80a024 <__pow5mult>
  807010:	d8800715 	stw	r2,28(sp)
  807014:	003e4306 	br	806924 <_dtoa_r+0x848>
  807018:	d9800f17 	ldw	r6,60(sp)
  80701c:	d8800d17 	ldw	r2,52(sp)
  807020:	d9800315 	stw	r6,12(sp)
  807024:	d8800415 	stw	r2,16(sp)
  807028:	d8c00b17 	ldw	r3,44(sp)
  80702c:	1805003a 	cmpeq	r2,r3,zero
  807030:	1000e21e 	bne	r2,zero,8073bc <_dtoa_r+0x12e0>
  807034:	d9000317 	ldw	r4,12(sp)
  807038:	0005883a 	mov	r2,zero
  80703c:	00cff834 	movhi	r3,16352
  807040:	200c90fa 	slli	r6,r4,3
  807044:	01002074 	movhi	r4,129
  807048:	21084204 	addi	r4,r4,8456
  80704c:	180b883a 	mov	r5,r3
  807050:	310d883a 	add	r6,r6,r4
  807054:	327fff17 	ldw	r9,-4(r6)
  807058:	323ffe17 	ldw	r8,-8(r6)
  80705c:	1009883a 	mov	r4,r2
  807060:	480f883a 	mov	r7,r9
  807064:	400d883a 	mov	r6,r8
  807068:	0802fc00 	call	802fc0 <__divdf3>
  80706c:	180b883a 	mov	r5,r3
  807070:	b00d883a 	mov	r6,r22
  807074:	b80f883a 	mov	r7,r23
  807078:	1009883a 	mov	r4,r2
  80707c:	0802ecc0 	call	802ecc <__subdf3>
  807080:	a80b883a 	mov	r5,r21
  807084:	a009883a 	mov	r4,r20
  807088:	d8c01915 	stw	r3,100(sp)
  80708c:	d8801815 	stw	r2,96(sp)
  807090:	080c23c0 	call	80c23c <__fixdfsi>
  807094:	1009883a 	mov	r4,r2
  807098:	1027883a 	mov	r19,r2
  80709c:	080c1440 	call	80c144 <__floatsidf>
  8070a0:	a80b883a 	mov	r5,r21
  8070a4:	a009883a 	mov	r4,r20
  8070a8:	180f883a 	mov	r7,r3
  8070ac:	100d883a 	mov	r6,r2
  8070b0:	0802ecc0 	call	802ecc <__subdf3>
  8070b4:	d9801817 	ldw	r6,96(sp)
  8070b8:	1823883a 	mov	r17,r3
  8070bc:	d8801415 	stw	r2,80(sp)
  8070c0:	302d883a 	mov	r22,r6
  8070c4:	d9800517 	ldw	r6,20(sp)
  8070c8:	9cc00c04 	addi	r19,r19,48
  8070cc:	dc401515 	stw	r17,84(sp)
  8070d0:	d8c01917 	ldw	r3,100(sp)
  8070d4:	34c00005 	stb	r19,0(r6)
  8070d8:	d8800517 	ldw	r2,20(sp)
  8070dc:	d9401917 	ldw	r5,100(sp)
  8070e0:	d9801417 	ldw	r6,80(sp)
  8070e4:	b009883a 	mov	r4,r22
  8070e8:	880f883a 	mov	r7,r17
  8070ec:	182f883a 	mov	r23,r3
  8070f0:	17000044 	addi	fp,r2,1
  8070f4:	080bfac0 	call	80bfac <__gtdf2>
  8070f8:	00804e16 	blt	zero,r2,807234 <_dtoa_r+0x1158>
  8070fc:	d9801417 	ldw	r6,80(sp)
  807100:	0005883a 	mov	r2,zero
  807104:	00cffc34 	movhi	r3,16368
  807108:	180b883a 	mov	r5,r3
  80710c:	880f883a 	mov	r7,r17
  807110:	1009883a 	mov	r4,r2
  807114:	0802ecc0 	call	802ecc <__subdf3>
  807118:	d9401917 	ldw	r5,100(sp)
  80711c:	180f883a 	mov	r7,r3
  807120:	b009883a 	mov	r4,r22
  807124:	100d883a 	mov	r6,r2
  807128:	080bfac0 	call	80bfac <__gtdf2>
  80712c:	00bda216 	blt	zero,r2,8067b8 <_dtoa_r+0x6dc>
  807130:	d8c00317 	ldw	r3,12(sp)
  807134:	00800044 	movi	r2,1
  807138:	10c01216 	blt	r2,r3,807184 <_dtoa_r+0x10a8>
  80713c:	003d4506 	br	806654 <_dtoa_r+0x578>
  807140:	d9801417 	ldw	r6,80(sp)
  807144:	0005883a 	mov	r2,zero
  807148:	00cffc34 	movhi	r3,16368
  80714c:	180b883a 	mov	r5,r3
  807150:	880f883a 	mov	r7,r17
  807154:	1009883a 	mov	r4,r2
  807158:	0802ecc0 	call	802ecc <__subdf3>
  80715c:	d9c01b17 	ldw	r7,108(sp)
  807160:	180b883a 	mov	r5,r3
  807164:	1009883a 	mov	r4,r2
  807168:	b00d883a 	mov	r6,r22
  80716c:	080c0bc0 	call	80c0bc <__ltdf2>
  807170:	103d9116 	blt	r2,zero,8067b8 <_dtoa_r+0x6dc>
  807174:	d9800517 	ldw	r6,20(sp)
  807178:	d9000317 	ldw	r4,12(sp)
  80717c:	3105883a 	add	r2,r6,r4
  807180:	e0bd3426 	beq	fp,r2,806654 <_dtoa_r+0x578>
  807184:	04500934 	movhi	r17,16420
  807188:	0021883a 	mov	r16,zero
  80718c:	b80b883a 	mov	r5,r23
  807190:	b009883a 	mov	r4,r22
  807194:	800d883a 	mov	r6,r16
  807198:	880f883a 	mov	r7,r17
  80719c:	080bb600 	call	80bb60 <__muldf3>
  8071a0:	d9401517 	ldw	r5,84(sp)
  8071a4:	d9001417 	ldw	r4,80(sp)
  8071a8:	880f883a 	mov	r7,r17
  8071ac:	000d883a 	mov	r6,zero
  8071b0:	d8801a15 	stw	r2,104(sp)
  8071b4:	d8c01b15 	stw	r3,108(sp)
  8071b8:	080bb600 	call	80bb60 <__muldf3>
  8071bc:	180b883a 	mov	r5,r3
  8071c0:	1009883a 	mov	r4,r2
  8071c4:	1823883a 	mov	r17,r3
  8071c8:	1021883a 	mov	r16,r2
  8071cc:	080c23c0 	call	80c23c <__fixdfsi>
  8071d0:	1009883a 	mov	r4,r2
  8071d4:	102b883a 	mov	r21,r2
  8071d8:	080c1440 	call	80c144 <__floatsidf>
  8071dc:	880b883a 	mov	r5,r17
  8071e0:	8009883a 	mov	r4,r16
  8071e4:	180f883a 	mov	r7,r3
  8071e8:	100d883a 	mov	r6,r2
  8071ec:	0802ecc0 	call	802ecc <__subdf3>
  8071f0:	1021883a 	mov	r16,r2
  8071f4:	d9001b17 	ldw	r4,108(sp)
  8071f8:	1823883a 	mov	r17,r3
  8071fc:	dc001415 	stw	r16,80(sp)
  807200:	ad400c04 	addi	r21,r21,48
  807204:	dc401515 	stw	r17,84(sp)
  807208:	d8801a17 	ldw	r2,104(sp)
  80720c:	e5400005 	stb	r21,0(fp)
  807210:	202f883a 	mov	r23,r4
  807214:	d9c01b17 	ldw	r7,108(sp)
  807218:	d9001417 	ldw	r4,80(sp)
  80721c:	880b883a 	mov	r5,r17
  807220:	100d883a 	mov	r6,r2
  807224:	102d883a 	mov	r22,r2
  807228:	e7000044 	addi	fp,fp,1
  80722c:	080c0bc0 	call	80c0bc <__ltdf2>
  807230:	103fc30e 	bge	r2,zero,807140 <_dtoa_r+0x1064>
  807234:	d9000417 	ldw	r4,16(sp)
  807238:	d9000d15 	stw	r4,52(sp)
  80723c:	003d7106 	br	806804 <_dtoa_r+0x728>
  807240:	d9801717 	ldw	r6,92(sp)
  807244:	00800084 	movi	r2,2
  807248:	11bde60e 	bge	r2,r6,8069e4 <_dtoa_r+0x908>
  80724c:	203cfb1e 	bne	r4,zero,80663c <_dtoa_r+0x560>
  807250:	d9001617 	ldw	r4,88(sp)
  807254:	900b883a 	mov	r5,r18
  807258:	01800144 	movi	r6,5
  80725c:	000f883a 	mov	r7,zero
  807260:	0809f240 	call	809f24 <__multadd>
  807264:	d9000717 	ldw	r4,28(sp)
  807268:	100b883a 	mov	r5,r2
  80726c:	1025883a 	mov	r18,r2
  807270:	08093cc0 	call	8093cc <__mcmp>
  807274:	00bcf10e 	bge	zero,r2,80663c <_dtoa_r+0x560>
  807278:	d8c00d17 	ldw	r3,52(sp)
  80727c:	d9000517 	ldw	r4,20(sp)
  807280:	d8000615 	stw	zero,24(sp)
  807284:	18c00044 	addi	r3,r3,1
  807288:	d8c00d15 	stw	r3,52(sp)
  80728c:	00800c44 	movi	r2,49
  807290:	27000044 	addi	fp,r4,1
  807294:	20800005 	stb	r2,0(r4)
  807298:	003e8906 	br	806cc0 <_dtoa_r+0xbe4>
  80729c:	d8c00517 	ldw	r3,20(sp)
  8072a0:	003bc206 	br	8061ac <_dtoa_r+0xd0>
  8072a4:	01802074 	movhi	r6,129
  8072a8:	31887404 	addi	r6,r6,8656
  8072ac:	30c00917 	ldw	r3,36(r6)
  8072b0:	30800817 	ldw	r2,32(r6)
  8072b4:	d9001217 	ldw	r4,72(sp)
  8072b8:	d9401317 	ldw	r5,76(sp)
  8072bc:	180f883a 	mov	r7,r3
  8072c0:	100d883a 	mov	r6,r2
  8072c4:	0802fc00 	call	802fc0 <__divdf3>
  8072c8:	948003cc 	andi	r18,r18,15
  8072cc:	058000c4 	movi	r22,3
  8072d0:	1029883a 	mov	r20,r2
  8072d4:	182b883a 	mov	r21,r3
  8072d8:	003c8906 	br	806500 <_dtoa_r+0x424>
  8072dc:	d9001017 	ldw	r4,64(sp)
  8072e0:	d9800917 	ldw	r6,36(sp)
  8072e4:	0025883a 	mov	r18,zero
  8072e8:	1105c83a 	sub	r2,r2,r4
  8072ec:	2089883a 	add	r4,r4,r2
  8072f0:	308d883a 	add	r6,r6,r2
  8072f4:	d9001015 	stw	r4,64(sp)
  8072f8:	d9800915 	stw	r6,36(sp)
  8072fc:	003e3206 	br	806bc8 <_dtoa_r+0xaec>
  807300:	28800044 	addi	r2,r5,1
  807304:	27000044 	addi	fp,r4,1
  807308:	20800005 	stb	r2,0(r4)
  80730c:	003e6c06 	br	806cc0 <_dtoa_r+0xbe4>
  807310:	d8800f17 	ldw	r2,60(sp)
  807314:	00bce016 	blt	zero,r2,806698 <_dtoa_r+0x5bc>
  807318:	d9800f17 	ldw	r6,60(sp)
  80731c:	303cc51e 	bne	r6,zero,806634 <_dtoa_r+0x558>
  807320:	0005883a 	mov	r2,zero
  807324:	00d00534 	movhi	r3,16404
  807328:	980b883a 	mov	r5,r19
  80732c:	180f883a 	mov	r7,r3
  807330:	9009883a 	mov	r4,r18
  807334:	100d883a 	mov	r6,r2
  807338:	080bb600 	call	80bb60 <__muldf3>
  80733c:	180b883a 	mov	r5,r3
  807340:	a80f883a 	mov	r7,r21
  807344:	1009883a 	mov	r4,r2
  807348:	a00d883a 	mov	r6,r20
  80734c:	080c0340 	call	80c034 <__gedf2>
  807350:	103cb80e 	bge	r2,zero,806634 <_dtoa_r+0x558>
  807354:	0027883a 	mov	r19,zero
  807358:	0025883a 	mov	r18,zero
  80735c:	003fc606 	br	807278 <_dtoa_r+0x119c>
  807360:	99400117 	ldw	r5,4(r19)
  807364:	d9001617 	ldw	r4,88(sp)
  807368:	08097f00 	call	8097f0 <_Balloc>
  80736c:	99800417 	ldw	r6,16(r19)
  807370:	11000304 	addi	r4,r2,12
  807374:	99400304 	addi	r5,r19,12
  807378:	318d883a 	add	r6,r6,r6
  80737c:	318d883a 	add	r6,r6,r6
  807380:	31800204 	addi	r6,r6,8
  807384:	1023883a 	mov	r17,r2
  807388:	08090580 	call	809058 <memcpy>
  80738c:	d9001617 	ldw	r4,88(sp)
  807390:	880b883a 	mov	r5,r17
  807394:	01800044 	movi	r6,1
  807398:	0809bb40 	call	809bb4 <__lshift>
  80739c:	100b883a 	mov	r5,r2
  8073a0:	003d9c06 	br	806a14 <_dtoa_r+0x938>
  8073a4:	00800e44 	movi	r2,57
  8073a8:	b8807026 	beq	r23,r2,80756c <_dtoa_r+0x1490>
  8073ac:	b8800044 	addi	r2,r23,1
  8073b0:	b7000044 	addi	fp,r22,1
  8073b4:	b0800005 	stb	r2,0(r22)
  8073b8:	003e4106 	br	806cc0 <_dtoa_r+0xbe4>
  8073bc:	d8800317 	ldw	r2,12(sp)
  8073c0:	01802074 	movhi	r6,129
  8073c4:	31884204 	addi	r6,r6,8456
  8073c8:	b009883a 	mov	r4,r22
  8073cc:	100e90fa 	slli	r7,r2,3
  8073d0:	b80b883a 	mov	r5,r23
  8073d4:	398f883a 	add	r7,r7,r6
  8073d8:	38bffe17 	ldw	r2,-8(r7)
  8073dc:	d9800517 	ldw	r6,20(sp)
  8073e0:	38ffff17 	ldw	r3,-4(r7)
  8073e4:	37000044 	addi	fp,r6,1
  8073e8:	180f883a 	mov	r7,r3
  8073ec:	100d883a 	mov	r6,r2
  8073f0:	080bb600 	call	80bb60 <__muldf3>
  8073f4:	a80b883a 	mov	r5,r21
  8073f8:	a009883a 	mov	r4,r20
  8073fc:	182f883a 	mov	r23,r3
  807400:	102d883a 	mov	r22,r2
  807404:	080c23c0 	call	80c23c <__fixdfsi>
  807408:	1009883a 	mov	r4,r2
  80740c:	1027883a 	mov	r19,r2
  807410:	080c1440 	call	80c144 <__floatsidf>
  807414:	a80b883a 	mov	r5,r21
  807418:	a009883a 	mov	r4,r20
  80741c:	180f883a 	mov	r7,r3
  807420:	100d883a 	mov	r6,r2
  807424:	0802ecc0 	call	802ecc <__subdf3>
  807428:	180b883a 	mov	r5,r3
  80742c:	d8c00517 	ldw	r3,20(sp)
  807430:	9cc00c04 	addi	r19,r19,48
  807434:	1009883a 	mov	r4,r2
  807438:	1cc00005 	stb	r19,0(r3)
  80743c:	2021883a 	mov	r16,r4
  807440:	d9000317 	ldw	r4,12(sp)
  807444:	00800044 	movi	r2,1
  807448:	2823883a 	mov	r17,r5
  80744c:	20802226 	beq	r4,r2,8074d8 <_dtoa_r+0x13fc>
  807450:	1029883a 	mov	r20,r2
  807454:	0005883a 	mov	r2,zero
  807458:	00d00934 	movhi	r3,16420
  80745c:	180f883a 	mov	r7,r3
  807460:	100d883a 	mov	r6,r2
  807464:	880b883a 	mov	r5,r17
  807468:	8009883a 	mov	r4,r16
  80746c:	080bb600 	call	80bb60 <__muldf3>
  807470:	180b883a 	mov	r5,r3
  807474:	1009883a 	mov	r4,r2
  807478:	1823883a 	mov	r17,r3
  80747c:	1021883a 	mov	r16,r2
  807480:	080c23c0 	call	80c23c <__fixdfsi>
  807484:	1009883a 	mov	r4,r2
  807488:	102b883a 	mov	r21,r2
  80748c:	080c1440 	call	80c144 <__floatsidf>
  807490:	880b883a 	mov	r5,r17
  807494:	8009883a 	mov	r4,r16
  807498:	180f883a 	mov	r7,r3
  80749c:	100d883a 	mov	r6,r2
  8074a0:	0802ecc0 	call	802ecc <__subdf3>
  8074a4:	180b883a 	mov	r5,r3
  8074a8:	d8c00517 	ldw	r3,20(sp)
  8074ac:	1009883a 	mov	r4,r2
  8074b0:	ad400c04 	addi	r21,r21,48
  8074b4:	1d05883a 	add	r2,r3,r20
  8074b8:	15400005 	stb	r21,0(r2)
  8074bc:	2021883a 	mov	r16,r4
  8074c0:	d9000317 	ldw	r4,12(sp)
  8074c4:	a5000044 	addi	r20,r20,1
  8074c8:	2823883a 	mov	r17,r5
  8074cc:	a13fe11e 	bne	r20,r4,807454 <_dtoa_r+0x1378>
  8074d0:	e505883a 	add	r2,fp,r20
  8074d4:	173fffc4 	addi	fp,r2,-1
  8074d8:	0025883a 	mov	r18,zero
  8074dc:	04cff834 	movhi	r19,16352
  8074e0:	b009883a 	mov	r4,r22
  8074e4:	b80b883a 	mov	r5,r23
  8074e8:	900d883a 	mov	r6,r18
  8074ec:	980f883a 	mov	r7,r19
  8074f0:	0802f4c0 	call	802f4c <__adddf3>
  8074f4:	180b883a 	mov	r5,r3
  8074f8:	1009883a 	mov	r4,r2
  8074fc:	800d883a 	mov	r6,r16
  807500:	880f883a 	mov	r7,r17
  807504:	080c0bc0 	call	80c0bc <__ltdf2>
  807508:	103cab16 	blt	r2,zero,8067b8 <_dtoa_r+0x6dc>
  80750c:	0009883a 	mov	r4,zero
  807510:	980b883a 	mov	r5,r19
  807514:	b80f883a 	mov	r7,r23
  807518:	b00d883a 	mov	r6,r22
  80751c:	0802ecc0 	call	802ecc <__subdf3>
  807520:	180b883a 	mov	r5,r3
  807524:	880f883a 	mov	r7,r17
  807528:	1009883a 	mov	r4,r2
  80752c:	800d883a 	mov	r6,r16
  807530:	080bfac0 	call	80bfac <__gtdf2>
  807534:	00bc470e 	bge	zero,r2,806654 <_dtoa_r+0x578>
  807538:	00c00c04 	movi	r3,48
  80753c:	e73fffc4 	addi	fp,fp,-1
  807540:	e0800007 	ldb	r2,0(fp)
  807544:	10fffd26 	beq	r2,r3,80753c <_dtoa_r+0x1460>
  807548:	d9800417 	ldw	r6,16(sp)
  80754c:	e7000044 	addi	fp,fp,1
  807550:	d9800d15 	stw	r6,52(sp)
  807554:	003cab06 	br	806804 <_dtoa_r+0x728>
  807558:	d8c00f17 	ldw	r3,60(sp)
  80755c:	d9001117 	ldw	r4,68(sp)
  807560:	20e1c83a 	sub	r16,r4,r3
  807564:	0007883a 	mov	r3,zero
  807568:	003d9b06 	br	806bd8 <_dtoa_r+0xafc>
  80756c:	00800e44 	movi	r2,57
  807570:	b0800005 	stb	r2,0(r22)
  807574:	b5800044 	addi	r22,r22,1
  807578:	003dc106 	br	806c80 <_dtoa_r+0xba4>
  80757c:	05800084 	movi	r22,2
  807580:	003bf706 	br	806560 <_dtoa_r+0x484>
  807584:	d9000f17 	ldw	r4,60(sp)
  807588:	013c000e 	bge	zero,r4,80658c <_dtoa_r+0x4b0>
  80758c:	d9800e17 	ldw	r6,56(sp)
  807590:	01bc300e 	bge	zero,r6,806654 <_dtoa_r+0x578>
  807594:	0005883a 	mov	r2,zero
  807598:	00d00934 	movhi	r3,16420
  80759c:	a80b883a 	mov	r5,r21
  8075a0:	180f883a 	mov	r7,r3
  8075a4:	a009883a 	mov	r4,r20
  8075a8:	100d883a 	mov	r6,r2
  8075ac:	080bb600 	call	80bb60 <__muldf3>
  8075b0:	b1000044 	addi	r4,r22,1
  8075b4:	1021883a 	mov	r16,r2
  8075b8:	1823883a 	mov	r17,r3
  8075bc:	080c1440 	call	80c144 <__floatsidf>
  8075c0:	880b883a 	mov	r5,r17
  8075c4:	8009883a 	mov	r4,r16
  8075c8:	180f883a 	mov	r7,r3
  8075cc:	100d883a 	mov	r6,r2
  8075d0:	080bb600 	call	80bb60 <__muldf3>
  8075d4:	0011883a 	mov	r8,zero
  8075d8:	02500734 	movhi	r9,16412
  8075dc:	180b883a 	mov	r5,r3
  8075e0:	480f883a 	mov	r7,r9
  8075e4:	1009883a 	mov	r4,r2
  8075e8:	400d883a 	mov	r6,r8
  8075ec:	0802f4c0 	call	802f4c <__adddf3>
  8075f0:	102d883a 	mov	r22,r2
  8075f4:	00bf3034 	movhi	r2,64704
  8075f8:	10ef883a 	add	r23,r2,r3
  8075fc:	d8800d17 	ldw	r2,52(sp)
  807600:	d8c00e17 	ldw	r3,56(sp)
  807604:	8029883a 	mov	r20,r16
  807608:	10bfffc4 	addi	r2,r2,-1
  80760c:	882b883a 	mov	r21,r17
  807610:	d8800415 	stw	r2,16(sp)
  807614:	d8c00315 	stw	r3,12(sp)
  807618:	003e8306 	br	807028 <_dtoa_r+0xf4c>
  80761c:	d8800117 	ldw	r2,4(sp)
  807620:	dc001117 	ldw	r16,68(sp)
  807624:	dc801017 	ldw	r18,64(sp)
  807628:	00c00d84 	movi	r3,54
  80762c:	1887c83a 	sub	r3,r3,r2
  807630:	003d6906 	br	806bd8 <_dtoa_r+0xafc>
  807634:	01800044 	movi	r6,1
  807638:	3021883a 	mov	r16,r6
  80763c:	d9800f15 	stw	r6,60(sp)
  807640:	d9802615 	stw	r6,152(sp)
  807644:	d9800e15 	stw	r6,56(sp)
  807648:	003b9306 	br	806498 <_dtoa_r+0x3bc>
  80764c:	b021883a 	mov	r16,r22
  807650:	dd800f15 	stw	r22,60(sp)
  807654:	003b9006 	br	806498 <_dtoa_r+0x3bc>
  807658:	103e221e 	bne	r2,zero,806ee4 <_dtoa_r+0xe08>
  80765c:	b880004c 	andi	r2,r23,1
  807660:	1005003a 	cmpeq	r2,r2,zero
  807664:	103e1f1e 	bne	r2,zero,806ee4 <_dtoa_r+0xe08>
  807668:	003e1b06 	br	806ed8 <_dtoa_r+0xdfc>
  80766c:	d9001617 	ldw	r4,88(sp)
  807670:	980b883a 	mov	r5,r19
  807674:	01800284 	movi	r6,10
  807678:	000f883a 	mov	r7,zero
  80767c:	0809f240 	call	809f24 <__multadd>
  807680:	d8c00e17 	ldw	r3,56(sp)
  807684:	1027883a 	mov	r19,r2
  807688:	d8c00f15 	stw	r3,60(sp)
  80768c:	003cd306 	br	8069dc <_dtoa_r+0x900>

00807690 <_fflush_r>:
  807690:	defffb04 	addi	sp,sp,-20
  807694:	dcc00315 	stw	r19,12(sp)
  807698:	dc800215 	stw	r18,8(sp)
  80769c:	dfc00415 	stw	ra,16(sp)
  8076a0:	dc400115 	stw	r17,4(sp)
  8076a4:	dc000015 	stw	r16,0(sp)
  8076a8:	2027883a 	mov	r19,r4
  8076ac:	2825883a 	mov	r18,r5
  8076b0:	20000226 	beq	r4,zero,8076bc <_fflush_r+0x2c>
  8076b4:	20800e17 	ldw	r2,56(r4)
  8076b8:	10005626 	beq	r2,zero,807814 <_fflush_r+0x184>
  8076bc:	9100030b 	ldhu	r4,12(r18)
  8076c0:	20ffffcc 	andi	r3,r4,65535
  8076c4:	18e0001c 	xori	r3,r3,32768
  8076c8:	18e00004 	addi	r3,r3,-32768
  8076cc:	1880020c 	andi	r2,r3,8
  8076d0:	1000261e 	bne	r2,zero,80776c <_fflush_r+0xdc>
  8076d4:	90c00117 	ldw	r3,4(r18)
  8076d8:	20820014 	ori	r2,r4,2048
  8076dc:	9080030d 	sth	r2,12(r18)
  8076e0:	1009883a 	mov	r4,r2
  8076e4:	00c0400e 	bge	zero,r3,8077e8 <_fflush_r+0x158>
  8076e8:	92000a17 	ldw	r8,40(r18)
  8076ec:	40004026 	beq	r8,zero,8077f0 <_fflush_r+0x160>
  8076f0:	2084000c 	andi	r2,r4,4096
  8076f4:	10005326 	beq	r2,zero,807844 <_fflush_r+0x1b4>
  8076f8:	94001417 	ldw	r16,80(r18)
  8076fc:	9080030b 	ldhu	r2,12(r18)
  807700:	1080010c 	andi	r2,r2,4
  807704:	1000481e 	bne	r2,zero,807828 <_fflush_r+0x198>
  807708:	91400717 	ldw	r5,28(r18)
  80770c:	9809883a 	mov	r4,r19
  807710:	800d883a 	mov	r6,r16
  807714:	000f883a 	mov	r7,zero
  807718:	403ee83a 	callr	r8
  80771c:	8080261e 	bne	r16,r2,8077b8 <_fflush_r+0x128>
  807720:	9080030b 	ldhu	r2,12(r18)
  807724:	91000417 	ldw	r4,16(r18)
  807728:	90000115 	stw	zero,4(r18)
  80772c:	10bdffcc 	andi	r2,r2,63487
  807730:	10ffffcc 	andi	r3,r2,65535
  807734:	18c4000c 	andi	r3,r3,4096
  807738:	9080030d 	sth	r2,12(r18)
  80773c:	91000015 	stw	r4,0(r18)
  807740:	18002b26 	beq	r3,zero,8077f0 <_fflush_r+0x160>
  807744:	0007883a 	mov	r3,zero
  807748:	1805883a 	mov	r2,r3
  80774c:	94001415 	stw	r16,80(r18)
  807750:	dfc00417 	ldw	ra,16(sp)
  807754:	dcc00317 	ldw	r19,12(sp)
  807758:	dc800217 	ldw	r18,8(sp)
  80775c:	dc400117 	ldw	r17,4(sp)
  807760:	dc000017 	ldw	r16,0(sp)
  807764:	dec00504 	addi	sp,sp,20
  807768:	f800283a 	ret
  80776c:	94400417 	ldw	r17,16(r18)
  807770:	88001f26 	beq	r17,zero,8077f0 <_fflush_r+0x160>
  807774:	90800017 	ldw	r2,0(r18)
  807778:	18c000cc 	andi	r3,r3,3
  80777c:	94400015 	stw	r17,0(r18)
  807780:	1461c83a 	sub	r16,r2,r17
  807784:	18002526 	beq	r3,zero,80781c <_fflush_r+0x18c>
  807788:	0005883a 	mov	r2,zero
  80778c:	90800215 	stw	r2,8(r18)
  807790:	0400170e 	bge	zero,r16,8077f0 <_fflush_r+0x160>
  807794:	90c00917 	ldw	r3,36(r18)
  807798:	91400717 	ldw	r5,28(r18)
  80779c:	880d883a 	mov	r6,r17
  8077a0:	800f883a 	mov	r7,r16
  8077a4:	9809883a 	mov	r4,r19
  8077a8:	183ee83a 	callr	r3
  8077ac:	88a3883a 	add	r17,r17,r2
  8077b0:	80a1c83a 	sub	r16,r16,r2
  8077b4:	00bff616 	blt	zero,r2,807790 <_fflush_r+0x100>
  8077b8:	9080030b 	ldhu	r2,12(r18)
  8077bc:	00ffffc4 	movi	r3,-1
  8077c0:	10801014 	ori	r2,r2,64
  8077c4:	9080030d 	sth	r2,12(r18)
  8077c8:	1805883a 	mov	r2,r3
  8077cc:	dfc00417 	ldw	ra,16(sp)
  8077d0:	dcc00317 	ldw	r19,12(sp)
  8077d4:	dc800217 	ldw	r18,8(sp)
  8077d8:	dc400117 	ldw	r17,4(sp)
  8077dc:	dc000017 	ldw	r16,0(sp)
  8077e0:	dec00504 	addi	sp,sp,20
  8077e4:	f800283a 	ret
  8077e8:	90800f17 	ldw	r2,60(r18)
  8077ec:	00bfbe16 	blt	zero,r2,8076e8 <_fflush_r+0x58>
  8077f0:	0007883a 	mov	r3,zero
  8077f4:	1805883a 	mov	r2,r3
  8077f8:	dfc00417 	ldw	ra,16(sp)
  8077fc:	dcc00317 	ldw	r19,12(sp)
  807800:	dc800217 	ldw	r18,8(sp)
  807804:	dc400117 	ldw	r17,4(sp)
  807808:	dc000017 	ldw	r16,0(sp)
  80780c:	dec00504 	addi	sp,sp,20
  807810:	f800283a 	ret
  807814:	08079280 	call	807928 <__sinit>
  807818:	003fa806 	br	8076bc <_fflush_r+0x2c>
  80781c:	90800517 	ldw	r2,20(r18)
  807820:	90800215 	stw	r2,8(r18)
  807824:	003fda06 	br	807790 <_fflush_r+0x100>
  807828:	90800117 	ldw	r2,4(r18)
  80782c:	90c00c17 	ldw	r3,48(r18)
  807830:	80a1c83a 	sub	r16,r16,r2
  807834:	183fb426 	beq	r3,zero,807708 <_fflush_r+0x78>
  807838:	90800f17 	ldw	r2,60(r18)
  80783c:	80a1c83a 	sub	r16,r16,r2
  807840:	003fb106 	br	807708 <_fflush_r+0x78>
  807844:	91400717 	ldw	r5,28(r18)
  807848:	9809883a 	mov	r4,r19
  80784c:	000d883a 	mov	r6,zero
  807850:	01c00044 	movi	r7,1
  807854:	403ee83a 	callr	r8
  807858:	1021883a 	mov	r16,r2
  80785c:	00bfffc4 	movi	r2,-1
  807860:	80800226 	beq	r16,r2,80786c <_fflush_r+0x1dc>
  807864:	92000a17 	ldw	r8,40(r18)
  807868:	003fa406 	br	8076fc <_fflush_r+0x6c>
  80786c:	98c00017 	ldw	r3,0(r19)
  807870:	00800744 	movi	r2,29
  807874:	18bfde26 	beq	r3,r2,8077f0 <_fflush_r+0x160>
  807878:	9080030b 	ldhu	r2,12(r18)
  80787c:	8007883a 	mov	r3,r16
  807880:	10801014 	ori	r2,r2,64
  807884:	9080030d 	sth	r2,12(r18)
  807888:	003fcf06 	br	8077c8 <_fflush_r+0x138>

0080788c <fflush>:
  80788c:	01402034 	movhi	r5,128
  807890:	295da404 	addi	r5,r5,30352
  807894:	2007883a 	mov	r3,r4
  807898:	20000526 	beq	r4,zero,8078b0 <fflush+0x24>
  80789c:	00802074 	movhi	r2,129
  8078a0:	108fd204 	addi	r2,r2,16200
  8078a4:	11000017 	ldw	r4,0(r2)
  8078a8:	180b883a 	mov	r5,r3
  8078ac:	08076901 	jmpi	807690 <_fflush_r>
  8078b0:	00802074 	movhi	r2,129
  8078b4:	108fd304 	addi	r2,r2,16204
  8078b8:	11000017 	ldw	r4,0(r2)
  8078bc:	080845c1 	jmpi	80845c <_fwalk_reent>

008078c0 <std>:
  8078c0:	00802074 	movhi	r2,129
  8078c4:	10aa4e04 	addi	r2,r2,-22216
  8078c8:	20800b15 	stw	r2,44(r4)
  8078cc:	00802074 	movhi	r2,129
  8078d0:	10aa8904 	addi	r2,r2,-21980
  8078d4:	20800815 	stw	r2,32(r4)
  8078d8:	00c02074 	movhi	r3,129
  8078dc:	18ea6a04 	addi	r3,r3,-22104
  8078e0:	00802074 	movhi	r2,129
  8078e4:	10aa5004 	addi	r2,r2,-22208
  8078e8:	2140030d 	sth	r5,12(r4)
  8078ec:	2180038d 	sth	r6,14(r4)
  8078f0:	20c00915 	stw	r3,36(r4)
  8078f4:	20800a15 	stw	r2,40(r4)
  8078f8:	20000015 	stw	zero,0(r4)
  8078fc:	20000115 	stw	zero,4(r4)
  807900:	20000215 	stw	zero,8(r4)
  807904:	20000415 	stw	zero,16(r4)
  807908:	20000515 	stw	zero,20(r4)
  80790c:	20000615 	stw	zero,24(r4)
  807910:	21000715 	stw	r4,28(r4)
  807914:	f800283a 	ret

00807918 <__sfp_lock_acquire>:
  807918:	f800283a 	ret

0080791c <__sfp_lock_release>:
  80791c:	f800283a 	ret

00807920 <__sinit_lock_acquire>:
  807920:	f800283a 	ret

00807924 <__sinit_lock_release>:
  807924:	f800283a 	ret

00807928 <__sinit>:
  807928:	20800e17 	ldw	r2,56(r4)
  80792c:	defffd04 	addi	sp,sp,-12
  807930:	dc400115 	stw	r17,4(sp)
  807934:	dc000015 	stw	r16,0(sp)
  807938:	dfc00215 	stw	ra,8(sp)
  80793c:	04400044 	movi	r17,1
  807940:	01400104 	movi	r5,4
  807944:	000d883a 	mov	r6,zero
  807948:	2021883a 	mov	r16,r4
  80794c:	2200bb04 	addi	r8,r4,748
  807950:	200f883a 	mov	r7,r4
  807954:	10000526 	beq	r2,zero,80796c <__sinit+0x44>
  807958:	dfc00217 	ldw	ra,8(sp)
  80795c:	dc400117 	ldw	r17,4(sp)
  807960:	dc000017 	ldw	r16,0(sp)
  807964:	dec00304 	addi	sp,sp,12
  807968:	f800283a 	ret
  80796c:	21000117 	ldw	r4,4(r4)
  807970:	00802034 	movhi	r2,128
  807974:	109e8304 	addi	r2,r2,31244
  807978:	00c000c4 	movi	r3,3
  80797c:	80800f15 	stw	r2,60(r16)
  807980:	80c0b915 	stw	r3,740(r16)
  807984:	8200ba15 	stw	r8,744(r16)
  807988:	84400e15 	stw	r17,56(r16)
  80798c:	8000b815 	stw	zero,736(r16)
  807990:	08078c00 	call	8078c0 <std>
  807994:	81000217 	ldw	r4,8(r16)
  807998:	880d883a 	mov	r6,r17
  80799c:	800f883a 	mov	r7,r16
  8079a0:	01400284 	movi	r5,10
  8079a4:	08078c00 	call	8078c0 <std>
  8079a8:	81000317 	ldw	r4,12(r16)
  8079ac:	800f883a 	mov	r7,r16
  8079b0:	01400484 	movi	r5,18
  8079b4:	01800084 	movi	r6,2
  8079b8:	dfc00217 	ldw	ra,8(sp)
  8079bc:	dc400117 	ldw	r17,4(sp)
  8079c0:	dc000017 	ldw	r16,0(sp)
  8079c4:	dec00304 	addi	sp,sp,12
  8079c8:	08078c01 	jmpi	8078c0 <std>

008079cc <__fp_lock>:
  8079cc:	0005883a 	mov	r2,zero
  8079d0:	f800283a 	ret

008079d4 <__fp_unlock>:
  8079d4:	0005883a 	mov	r2,zero
  8079d8:	f800283a 	ret

008079dc <__fp_unlock_all>:
  8079dc:	00802074 	movhi	r2,129
  8079e0:	108fd204 	addi	r2,r2,16200
  8079e4:	11000017 	ldw	r4,0(r2)
  8079e8:	01402034 	movhi	r5,128
  8079ec:	295e7504 	addi	r5,r5,31188
  8079f0:	08085241 	jmpi	808524 <_fwalk>

008079f4 <__fp_lock_all>:
  8079f4:	00802074 	movhi	r2,129
  8079f8:	108fd204 	addi	r2,r2,16200
  8079fc:	11000017 	ldw	r4,0(r2)
  807a00:	01402034 	movhi	r5,128
  807a04:	295e7304 	addi	r5,r5,31180
  807a08:	08085241 	jmpi	808524 <_fwalk>

00807a0c <_cleanup_r>:
  807a0c:	01402074 	movhi	r5,129
  807a10:	296b7b04 	addi	r5,r5,-21012
  807a14:	08085241 	jmpi	808524 <_fwalk>

00807a18 <_cleanup>:
  807a18:	00802074 	movhi	r2,129
  807a1c:	108fd304 	addi	r2,r2,16204
  807a20:	11000017 	ldw	r4,0(r2)
  807a24:	0807a0c1 	jmpi	807a0c <_cleanup_r>

00807a28 <__sfmoreglue>:
  807a28:	defffc04 	addi	sp,sp,-16
  807a2c:	dc400115 	stw	r17,4(sp)
  807a30:	2c401724 	muli	r17,r5,92
  807a34:	dc800215 	stw	r18,8(sp)
  807a38:	2825883a 	mov	r18,r5
  807a3c:	89400304 	addi	r5,r17,12
  807a40:	dc000015 	stw	r16,0(sp)
  807a44:	dfc00315 	stw	ra,12(sp)
  807a48:	08088340 	call	808834 <_malloc_r>
  807a4c:	0021883a 	mov	r16,zero
  807a50:	880d883a 	mov	r6,r17
  807a54:	000b883a 	mov	r5,zero
  807a58:	10000626 	beq	r2,zero,807a74 <__sfmoreglue+0x4c>
  807a5c:	11000304 	addi	r4,r2,12
  807a60:	14800115 	stw	r18,4(r2)
  807a64:	10000015 	stw	zero,0(r2)
  807a68:	11000215 	stw	r4,8(r2)
  807a6c:	1021883a 	mov	r16,r2
  807a70:	08091d80 	call	8091d8 <memset>
  807a74:	8005883a 	mov	r2,r16
  807a78:	dfc00317 	ldw	ra,12(sp)
  807a7c:	dc800217 	ldw	r18,8(sp)
  807a80:	dc400117 	ldw	r17,4(sp)
  807a84:	dc000017 	ldw	r16,0(sp)
  807a88:	dec00404 	addi	sp,sp,16
  807a8c:	f800283a 	ret

00807a90 <__sfp>:
  807a90:	defffd04 	addi	sp,sp,-12
  807a94:	00802074 	movhi	r2,129
  807a98:	108fd304 	addi	r2,r2,16204
  807a9c:	dc000015 	stw	r16,0(sp)
  807aa0:	14000017 	ldw	r16,0(r2)
  807aa4:	dc400115 	stw	r17,4(sp)
  807aa8:	dfc00215 	stw	ra,8(sp)
  807aac:	80800e17 	ldw	r2,56(r16)
  807ab0:	2023883a 	mov	r17,r4
  807ab4:	10002626 	beq	r2,zero,807b50 <__sfp+0xc0>
  807ab8:	8400b804 	addi	r16,r16,736
  807abc:	80800117 	ldw	r2,4(r16)
  807ac0:	81000217 	ldw	r4,8(r16)
  807ac4:	10ffffc4 	addi	r3,r2,-1
  807ac8:	18000916 	blt	r3,zero,807af0 <__sfp+0x60>
  807acc:	2080030f 	ldh	r2,12(r4)
  807ad0:	10000b26 	beq	r2,zero,807b00 <__sfp+0x70>
  807ad4:	017fffc4 	movi	r5,-1
  807ad8:	00000206 	br	807ae4 <__sfp+0x54>
  807adc:	2080030f 	ldh	r2,12(r4)
  807ae0:	10000726 	beq	r2,zero,807b00 <__sfp+0x70>
  807ae4:	18ffffc4 	addi	r3,r3,-1
  807ae8:	21001704 	addi	r4,r4,92
  807aec:	197ffb1e 	bne	r3,r5,807adc <__sfp+0x4c>
  807af0:	80800017 	ldw	r2,0(r16)
  807af4:	10001926 	beq	r2,zero,807b5c <__sfp+0xcc>
  807af8:	1021883a 	mov	r16,r2
  807afc:	003fef06 	br	807abc <__sfp+0x2c>
  807b00:	00bfffc4 	movi	r2,-1
  807b04:	00c00044 	movi	r3,1
  807b08:	2080038d 	sth	r2,14(r4)
  807b0c:	20c0030d 	sth	r3,12(r4)
  807b10:	20000015 	stw	zero,0(r4)
  807b14:	20000215 	stw	zero,8(r4)
  807b18:	20000115 	stw	zero,4(r4)
  807b1c:	20000415 	stw	zero,16(r4)
  807b20:	20000515 	stw	zero,20(r4)
  807b24:	20000615 	stw	zero,24(r4)
  807b28:	20000c15 	stw	zero,48(r4)
  807b2c:	20000d15 	stw	zero,52(r4)
  807b30:	20001115 	stw	zero,68(r4)
  807b34:	20001215 	stw	zero,72(r4)
  807b38:	2005883a 	mov	r2,r4
  807b3c:	dfc00217 	ldw	ra,8(sp)
  807b40:	dc400117 	ldw	r17,4(sp)
  807b44:	dc000017 	ldw	r16,0(sp)
  807b48:	dec00304 	addi	sp,sp,12
  807b4c:	f800283a 	ret
  807b50:	8009883a 	mov	r4,r16
  807b54:	08079280 	call	807928 <__sinit>
  807b58:	003fd706 	br	807ab8 <__sfp+0x28>
  807b5c:	8809883a 	mov	r4,r17
  807b60:	01400104 	movi	r5,4
  807b64:	0807a280 	call	807a28 <__sfmoreglue>
  807b68:	80800015 	stw	r2,0(r16)
  807b6c:	103fe21e 	bne	r2,zero,807af8 <__sfp+0x68>
  807b70:	00800304 	movi	r2,12
  807b74:	0009883a 	mov	r4,zero
  807b78:	88800015 	stw	r2,0(r17)
  807b7c:	003fee06 	br	807b38 <__sfp+0xa8>

00807b80 <_malloc_trim_r>:
  807b80:	defffb04 	addi	sp,sp,-20
  807b84:	dcc00315 	stw	r19,12(sp)
  807b88:	04c02074 	movhi	r19,129
  807b8c:	9cc9e704 	addi	r19,r19,10140
  807b90:	dc800215 	stw	r18,8(sp)
  807b94:	dc400115 	stw	r17,4(sp)
  807b98:	dc000015 	stw	r16,0(sp)
  807b9c:	2823883a 	mov	r17,r5
  807ba0:	2025883a 	mov	r18,r4
  807ba4:	dfc00415 	stw	ra,16(sp)
  807ba8:	080cc780 	call	80cc78 <__malloc_lock>
  807bac:	98800217 	ldw	r2,8(r19)
  807bb0:	9009883a 	mov	r4,r18
  807bb4:	000b883a 	mov	r5,zero
  807bb8:	10c00117 	ldw	r3,4(r2)
  807bbc:	00bfff04 	movi	r2,-4
  807bc0:	18a0703a 	and	r16,r3,r2
  807bc4:	8463c83a 	sub	r17,r16,r17
  807bc8:	8c43fbc4 	addi	r17,r17,4079
  807bcc:	8822d33a 	srli	r17,r17,12
  807bd0:	0083ffc4 	movi	r2,4095
  807bd4:	8c7fffc4 	addi	r17,r17,-1
  807bd8:	8822933a 	slli	r17,r17,12
  807bdc:	1440060e 	bge	r2,r17,807bf8 <_malloc_trim_r+0x78>
  807be0:	080a8c80 	call	80a8c8 <_sbrk_r>
  807be4:	98c00217 	ldw	r3,8(r19)
  807be8:	9009883a 	mov	r4,r18
  807bec:	044bc83a 	sub	r5,zero,r17
  807bf0:	80c7883a 	add	r3,r16,r3
  807bf4:	10c00926 	beq	r2,r3,807c1c <_malloc_trim_r+0x9c>
  807bf8:	080cc980 	call	80cc98 <__malloc_unlock>
  807bfc:	0005883a 	mov	r2,zero
  807c00:	dfc00417 	ldw	ra,16(sp)
  807c04:	dcc00317 	ldw	r19,12(sp)
  807c08:	dc800217 	ldw	r18,8(sp)
  807c0c:	dc400117 	ldw	r17,4(sp)
  807c10:	dc000017 	ldw	r16,0(sp)
  807c14:	dec00504 	addi	sp,sp,20
  807c18:	f800283a 	ret
  807c1c:	9009883a 	mov	r4,r18
  807c20:	080a8c80 	call	80a8c8 <_sbrk_r>
  807c24:	844dc83a 	sub	r6,r16,r17
  807c28:	00ffffc4 	movi	r3,-1
  807c2c:	9009883a 	mov	r4,r18
  807c30:	000b883a 	mov	r5,zero
  807c34:	01c02074 	movhi	r7,129
  807c38:	39d6f604 	addi	r7,r7,23512
  807c3c:	31800054 	ori	r6,r6,1
  807c40:	10c00926 	beq	r2,r3,807c68 <_malloc_trim_r+0xe8>
  807c44:	38800017 	ldw	r2,0(r7)
  807c48:	98c00217 	ldw	r3,8(r19)
  807c4c:	9009883a 	mov	r4,r18
  807c50:	1445c83a 	sub	r2,r2,r17
  807c54:	38800015 	stw	r2,0(r7)
  807c58:	19800115 	stw	r6,4(r3)
  807c5c:	080cc980 	call	80cc98 <__malloc_unlock>
  807c60:	00800044 	movi	r2,1
  807c64:	003fe606 	br	807c00 <_malloc_trim_r+0x80>
  807c68:	080a8c80 	call	80a8c8 <_sbrk_r>
  807c6c:	99800217 	ldw	r6,8(r19)
  807c70:	100f883a 	mov	r7,r2
  807c74:	9009883a 	mov	r4,r18
  807c78:	1187c83a 	sub	r3,r2,r6
  807c7c:	008003c4 	movi	r2,15
  807c80:	19400054 	ori	r5,r3,1
  807c84:	10ffdc0e 	bge	r2,r3,807bf8 <_malloc_trim_r+0x78>
  807c88:	00802074 	movhi	r2,129
  807c8c:	108fd704 	addi	r2,r2,16220
  807c90:	10c00017 	ldw	r3,0(r2)
  807c94:	00802074 	movhi	r2,129
  807c98:	1096f604 	addi	r2,r2,23512
  807c9c:	31400115 	stw	r5,4(r6)
  807ca0:	38c7c83a 	sub	r3,r7,r3
  807ca4:	10c00015 	stw	r3,0(r2)
  807ca8:	003fd306 	br	807bf8 <_malloc_trim_r+0x78>

00807cac <_free_r>:
  807cac:	defffd04 	addi	sp,sp,-12
  807cb0:	dc400115 	stw	r17,4(sp)
  807cb4:	dc000015 	stw	r16,0(sp)
  807cb8:	dfc00215 	stw	ra,8(sp)
  807cbc:	2821883a 	mov	r16,r5
  807cc0:	2023883a 	mov	r17,r4
  807cc4:	28005a26 	beq	r5,zero,807e30 <_free_r+0x184>
  807cc8:	080cc780 	call	80cc78 <__malloc_lock>
  807ccc:	823ffe04 	addi	r8,r16,-8
  807cd0:	41400117 	ldw	r5,4(r8)
  807cd4:	00bfff84 	movi	r2,-2
  807cd8:	02802074 	movhi	r10,129
  807cdc:	5289e704 	addi	r10,r10,10140
  807ce0:	288e703a 	and	r7,r5,r2
  807ce4:	41cd883a 	add	r6,r8,r7
  807ce8:	30c00117 	ldw	r3,4(r6)
  807cec:	51000217 	ldw	r4,8(r10)
  807cf0:	00bfff04 	movi	r2,-4
  807cf4:	1892703a 	and	r9,r3,r2
  807cf8:	5017883a 	mov	r11,r10
  807cfc:	31006726 	beq	r6,r4,807e9c <_free_r+0x1f0>
  807d00:	2880004c 	andi	r2,r5,1
  807d04:	1005003a 	cmpeq	r2,r2,zero
  807d08:	32400115 	stw	r9,4(r6)
  807d0c:	10001a1e 	bne	r2,zero,807d78 <_free_r+0xcc>
  807d10:	000b883a 	mov	r5,zero
  807d14:	3247883a 	add	r3,r6,r9
  807d18:	18800117 	ldw	r2,4(r3)
  807d1c:	1080004c 	andi	r2,r2,1
  807d20:	1000231e 	bne	r2,zero,807db0 <_free_r+0x104>
  807d24:	280ac03a 	cmpne	r5,r5,zero
  807d28:	3a4f883a 	add	r7,r7,r9
  807d2c:	2800451e 	bne	r5,zero,807e44 <_free_r+0x198>
  807d30:	31000217 	ldw	r4,8(r6)
  807d34:	00802074 	movhi	r2,129
  807d38:	1089e904 	addi	r2,r2,10148
  807d3c:	20807b26 	beq	r4,r2,807f2c <_free_r+0x280>
  807d40:	30800317 	ldw	r2,12(r6)
  807d44:	3a07883a 	add	r3,r7,r8
  807d48:	19c00015 	stw	r7,0(r3)
  807d4c:	11000215 	stw	r4,8(r2)
  807d50:	20800315 	stw	r2,12(r4)
  807d54:	38800054 	ori	r2,r7,1
  807d58:	40800115 	stw	r2,4(r8)
  807d5c:	28001a26 	beq	r5,zero,807dc8 <_free_r+0x11c>
  807d60:	8809883a 	mov	r4,r17
  807d64:	dfc00217 	ldw	ra,8(sp)
  807d68:	dc400117 	ldw	r17,4(sp)
  807d6c:	dc000017 	ldw	r16,0(sp)
  807d70:	dec00304 	addi	sp,sp,12
  807d74:	080cc981 	jmpi	80cc98 <__malloc_unlock>
  807d78:	80bffe17 	ldw	r2,-8(r16)
  807d7c:	50c00204 	addi	r3,r10,8
  807d80:	4091c83a 	sub	r8,r8,r2
  807d84:	41000217 	ldw	r4,8(r8)
  807d88:	388f883a 	add	r7,r7,r2
  807d8c:	20c06126 	beq	r4,r3,807f14 <_free_r+0x268>
  807d90:	40800317 	ldw	r2,12(r8)
  807d94:	3247883a 	add	r3,r6,r9
  807d98:	000b883a 	mov	r5,zero
  807d9c:	11000215 	stw	r4,8(r2)
  807da0:	20800315 	stw	r2,12(r4)
  807da4:	18800117 	ldw	r2,4(r3)
  807da8:	1080004c 	andi	r2,r2,1
  807dac:	103fdd26 	beq	r2,zero,807d24 <_free_r+0x78>
  807db0:	38800054 	ori	r2,r7,1
  807db4:	3a07883a 	add	r3,r7,r8
  807db8:	280ac03a 	cmpne	r5,r5,zero
  807dbc:	40800115 	stw	r2,4(r8)
  807dc0:	19c00015 	stw	r7,0(r3)
  807dc4:	283fe61e 	bne	r5,zero,807d60 <_free_r+0xb4>
  807dc8:	00807fc4 	movi	r2,511
  807dcc:	11c01f2e 	bgeu	r2,r7,807e4c <_free_r+0x1a0>
  807dd0:	3806d27a 	srli	r3,r7,9
  807dd4:	1800481e 	bne	r3,zero,807ef8 <_free_r+0x24c>
  807dd8:	3804d0fa 	srli	r2,r7,3
  807ddc:	100690fa 	slli	r3,r2,3
  807de0:	1acd883a 	add	r6,r3,r11
  807de4:	31400217 	ldw	r5,8(r6)
  807de8:	31405926 	beq	r6,r5,807f50 <_free_r+0x2a4>
  807dec:	28800117 	ldw	r2,4(r5)
  807df0:	00ffff04 	movi	r3,-4
  807df4:	10c4703a 	and	r2,r2,r3
  807df8:	3880022e 	bgeu	r7,r2,807e04 <_free_r+0x158>
  807dfc:	29400217 	ldw	r5,8(r5)
  807e00:	317ffa1e 	bne	r6,r5,807dec <_free_r+0x140>
  807e04:	29800317 	ldw	r6,12(r5)
  807e08:	41800315 	stw	r6,12(r8)
  807e0c:	41400215 	stw	r5,8(r8)
  807e10:	8809883a 	mov	r4,r17
  807e14:	2a000315 	stw	r8,12(r5)
  807e18:	32000215 	stw	r8,8(r6)
  807e1c:	dfc00217 	ldw	ra,8(sp)
  807e20:	dc400117 	ldw	r17,4(sp)
  807e24:	dc000017 	ldw	r16,0(sp)
  807e28:	dec00304 	addi	sp,sp,12
  807e2c:	080cc981 	jmpi	80cc98 <__malloc_unlock>
  807e30:	dfc00217 	ldw	ra,8(sp)
  807e34:	dc400117 	ldw	r17,4(sp)
  807e38:	dc000017 	ldw	r16,0(sp)
  807e3c:	dec00304 	addi	sp,sp,12
  807e40:	f800283a 	ret
  807e44:	31000217 	ldw	r4,8(r6)
  807e48:	003fbd06 	br	807d40 <_free_r+0x94>
  807e4c:	3806d0fa 	srli	r3,r7,3
  807e50:	00800044 	movi	r2,1
  807e54:	51400117 	ldw	r5,4(r10)
  807e58:	180890fa 	slli	r4,r3,3
  807e5c:	1807d0ba 	srai	r3,r3,2
  807e60:	22c9883a 	add	r4,r4,r11
  807e64:	21800217 	ldw	r6,8(r4)
  807e68:	10c4983a 	sll	r2,r2,r3
  807e6c:	41000315 	stw	r4,12(r8)
  807e70:	41800215 	stw	r6,8(r8)
  807e74:	288ab03a 	or	r5,r5,r2
  807e78:	22000215 	stw	r8,8(r4)
  807e7c:	8809883a 	mov	r4,r17
  807e80:	51400115 	stw	r5,4(r10)
  807e84:	32000315 	stw	r8,12(r6)
  807e88:	dfc00217 	ldw	ra,8(sp)
  807e8c:	dc400117 	ldw	r17,4(sp)
  807e90:	dc000017 	ldw	r16,0(sp)
  807e94:	dec00304 	addi	sp,sp,12
  807e98:	080cc981 	jmpi	80cc98 <__malloc_unlock>
  807e9c:	2880004c 	andi	r2,r5,1
  807ea0:	3a4d883a 	add	r6,r7,r9
  807ea4:	1000071e 	bne	r2,zero,807ec4 <_free_r+0x218>
  807ea8:	80bffe17 	ldw	r2,-8(r16)
  807eac:	4091c83a 	sub	r8,r8,r2
  807eb0:	41000317 	ldw	r4,12(r8)
  807eb4:	40c00217 	ldw	r3,8(r8)
  807eb8:	308d883a 	add	r6,r6,r2
  807ebc:	20c00215 	stw	r3,8(r4)
  807ec0:	19000315 	stw	r4,12(r3)
  807ec4:	00802074 	movhi	r2,129
  807ec8:	108fd604 	addi	r2,r2,16216
  807ecc:	11000017 	ldw	r4,0(r2)
  807ed0:	30c00054 	ori	r3,r6,1
  807ed4:	52000215 	stw	r8,8(r10)
  807ed8:	40c00115 	stw	r3,4(r8)
  807edc:	313fa036 	bltu	r6,r4,807d60 <_free_r+0xb4>
  807ee0:	00802074 	movhi	r2,129
  807ee4:	1096ec04 	addi	r2,r2,23472
  807ee8:	11400017 	ldw	r5,0(r2)
  807eec:	8809883a 	mov	r4,r17
  807ef0:	0807b800 	call	807b80 <_malloc_trim_r>
  807ef4:	003f9a06 	br	807d60 <_free_r+0xb4>
  807ef8:	00800104 	movi	r2,4
  807efc:	10c0072e 	bgeu	r2,r3,807f1c <_free_r+0x270>
  807f00:	00800504 	movi	r2,20
  807f04:	10c01936 	bltu	r2,r3,807f6c <_free_r+0x2c0>
  807f08:	188016c4 	addi	r2,r3,91
  807f0c:	100690fa 	slli	r3,r2,3
  807f10:	003fb306 	br	807de0 <_free_r+0x134>
  807f14:	01400044 	movi	r5,1
  807f18:	003f7e06 	br	807d14 <_free_r+0x68>
  807f1c:	3804d1ba 	srli	r2,r7,6
  807f20:	10800e04 	addi	r2,r2,56
  807f24:	100690fa 	slli	r3,r2,3
  807f28:	003fad06 	br	807de0 <_free_r+0x134>
  807f2c:	22000315 	stw	r8,12(r4)
  807f30:	22000215 	stw	r8,8(r4)
  807f34:	3a05883a 	add	r2,r7,r8
  807f38:	38c00054 	ori	r3,r7,1
  807f3c:	11c00015 	stw	r7,0(r2)
  807f40:	41000215 	stw	r4,8(r8)
  807f44:	40c00115 	stw	r3,4(r8)
  807f48:	41000315 	stw	r4,12(r8)
  807f4c:	003f8406 	br	807d60 <_free_r+0xb4>
  807f50:	1005d0ba 	srai	r2,r2,2
  807f54:	00c00044 	movi	r3,1
  807f58:	51000117 	ldw	r4,4(r10)
  807f5c:	1886983a 	sll	r3,r3,r2
  807f60:	20c8b03a 	or	r4,r4,r3
  807f64:	51000115 	stw	r4,4(r10)
  807f68:	003fa706 	br	807e08 <_free_r+0x15c>
  807f6c:	00801504 	movi	r2,84
  807f70:	10c00436 	bltu	r2,r3,807f84 <_free_r+0x2d8>
  807f74:	3804d33a 	srli	r2,r7,12
  807f78:	10801b84 	addi	r2,r2,110
  807f7c:	100690fa 	slli	r3,r2,3
  807f80:	003f9706 	br	807de0 <_free_r+0x134>
  807f84:	00805504 	movi	r2,340
  807f88:	10c00436 	bltu	r2,r3,807f9c <_free_r+0x2f0>
  807f8c:	3804d3fa 	srli	r2,r7,15
  807f90:	10801dc4 	addi	r2,r2,119
  807f94:	100690fa 	slli	r3,r2,3
  807f98:	003f9106 	br	807de0 <_free_r+0x134>
  807f9c:	00815504 	movi	r2,1364
  807fa0:	10c0032e 	bgeu	r2,r3,807fb0 <_free_r+0x304>
  807fa4:	00801f84 	movi	r2,126
  807fa8:	00c0fc04 	movi	r3,1008
  807fac:	003f8c06 	br	807de0 <_free_r+0x134>
  807fb0:	3804d4ba 	srli	r2,r7,18
  807fb4:	10801f04 	addi	r2,r2,124
  807fb8:	100690fa 	slli	r3,r2,3
  807fbc:	003f8806 	br	807de0 <_free_r+0x134>

00807fc0 <__sfvwrite_r>:
  807fc0:	30800217 	ldw	r2,8(r6)
  807fc4:	defff504 	addi	sp,sp,-44
  807fc8:	df000915 	stw	fp,36(sp)
  807fcc:	dd800715 	stw	r22,28(sp)
  807fd0:	dc800315 	stw	r18,12(sp)
  807fd4:	dfc00a15 	stw	ra,40(sp)
  807fd8:	ddc00815 	stw	r23,32(sp)
  807fdc:	dd400615 	stw	r21,24(sp)
  807fe0:	dd000515 	stw	r20,20(sp)
  807fe4:	dcc00415 	stw	r19,16(sp)
  807fe8:	dc400215 	stw	r17,8(sp)
  807fec:	dc000115 	stw	r16,4(sp)
  807ff0:	302d883a 	mov	r22,r6
  807ff4:	2039883a 	mov	fp,r4
  807ff8:	2825883a 	mov	r18,r5
  807ffc:	10001c26 	beq	r2,zero,808070 <__sfvwrite_r+0xb0>
  808000:	29c0030b 	ldhu	r7,12(r5)
  808004:	3880020c 	andi	r2,r7,8
  808008:	10002726 	beq	r2,zero,8080a8 <__sfvwrite_r+0xe8>
  80800c:	28800417 	ldw	r2,16(r5)
  808010:	10002526 	beq	r2,zero,8080a8 <__sfvwrite_r+0xe8>
  808014:	3880008c 	andi	r2,r7,2
  808018:	b5400017 	ldw	r21,0(r22)
  80801c:	10002826 	beq	r2,zero,8080c0 <__sfvwrite_r+0x100>
  808020:	0021883a 	mov	r16,zero
  808024:	0023883a 	mov	r17,zero
  808028:	880d883a 	mov	r6,r17
  80802c:	e009883a 	mov	r4,fp
  808030:	00810004 	movi	r2,1024
  808034:	80006e26 	beq	r16,zero,8081f0 <__sfvwrite_r+0x230>
  808038:	800f883a 	mov	r7,r16
  80803c:	91400717 	ldw	r5,28(r18)
  808040:	1400012e 	bgeu	r2,r16,808048 <__sfvwrite_r+0x88>
  808044:	100f883a 	mov	r7,r2
  808048:	90c00917 	ldw	r3,36(r18)
  80804c:	183ee83a 	callr	r3
  808050:	1007883a 	mov	r3,r2
  808054:	80a1c83a 	sub	r16,r16,r2
  808058:	88a3883a 	add	r17,r17,r2
  80805c:	00806d0e 	bge	zero,r2,808214 <__sfvwrite_r+0x254>
  808060:	b0800217 	ldw	r2,8(r22)
  808064:	10c5c83a 	sub	r2,r2,r3
  808068:	b0800215 	stw	r2,8(r22)
  80806c:	103fee1e 	bne	r2,zero,808028 <__sfvwrite_r+0x68>
  808070:	0009883a 	mov	r4,zero
  808074:	2005883a 	mov	r2,r4
  808078:	dfc00a17 	ldw	ra,40(sp)
  80807c:	df000917 	ldw	fp,36(sp)
  808080:	ddc00817 	ldw	r23,32(sp)
  808084:	dd800717 	ldw	r22,28(sp)
  808088:	dd400617 	ldw	r21,24(sp)
  80808c:	dd000517 	ldw	r20,20(sp)
  808090:	dcc00417 	ldw	r19,16(sp)
  808094:	dc800317 	ldw	r18,12(sp)
  808098:	dc400217 	ldw	r17,8(sp)
  80809c:	dc000117 	ldw	r16,4(sp)
  8080a0:	dec00b04 	addi	sp,sp,44
  8080a4:	f800283a 	ret
  8080a8:	0805d880 	call	805d88 <__swsetup_r>
  8080ac:	1000e41e 	bne	r2,zero,808440 <__sfvwrite_r+0x480>
  8080b0:	91c0030b 	ldhu	r7,12(r18)
  8080b4:	b5400017 	ldw	r21,0(r22)
  8080b8:	3880008c 	andi	r2,r7,2
  8080bc:	103fd81e 	bne	r2,zero,808020 <__sfvwrite_r+0x60>
  8080c0:	3880004c 	andi	r2,r7,1
  8080c4:	1005003a 	cmpeq	r2,r2,zero
  8080c8:	10005726 	beq	r2,zero,808228 <__sfvwrite_r+0x268>
  8080cc:	0029883a 	mov	r20,zero
  8080d0:	002f883a 	mov	r23,zero
  8080d4:	a0004226 	beq	r20,zero,8081e0 <__sfvwrite_r+0x220>
  8080d8:	3880800c 	andi	r2,r7,512
  8080dc:	94000217 	ldw	r16,8(r18)
  8080e0:	10008b26 	beq	r2,zero,808310 <__sfvwrite_r+0x350>
  8080e4:	800d883a 	mov	r6,r16
  8080e8:	a400a536 	bltu	r20,r16,808380 <__sfvwrite_r+0x3c0>
  8080ec:	3881200c 	andi	r2,r7,1152
  8080f0:	10002726 	beq	r2,zero,808190 <__sfvwrite_r+0x1d0>
  8080f4:	90800517 	ldw	r2,20(r18)
  8080f8:	92000417 	ldw	r8,16(r18)
  8080fc:	91400017 	ldw	r5,0(r18)
  808100:	1087883a 	add	r3,r2,r2
  808104:	1887883a 	add	r3,r3,r2
  808108:	1808d7fa 	srli	r4,r3,31
  80810c:	2a21c83a 	sub	r16,r5,r8
  808110:	80800044 	addi	r2,r16,1
  808114:	20c9883a 	add	r4,r4,r3
  808118:	2027d07a 	srai	r19,r4,1
  80811c:	a085883a 	add	r2,r20,r2
  808120:	980d883a 	mov	r6,r19
  808124:	9880022e 	bgeu	r19,r2,808130 <__sfvwrite_r+0x170>
  808128:	1027883a 	mov	r19,r2
  80812c:	100d883a 	mov	r6,r2
  808130:	3881000c 	andi	r2,r7,1024
  808134:	1000b826 	beq	r2,zero,808418 <__sfvwrite_r+0x458>
  808138:	300b883a 	mov	r5,r6
  80813c:	e009883a 	mov	r4,fp
  808140:	08088340 	call	808834 <_malloc_r>
  808144:	10003126 	beq	r2,zero,80820c <__sfvwrite_r+0x24c>
  808148:	91400417 	ldw	r5,16(r18)
  80814c:	1009883a 	mov	r4,r2
  808150:	800d883a 	mov	r6,r16
  808154:	1023883a 	mov	r17,r2
  808158:	08090580 	call	809058 <memcpy>
  80815c:	90c0030b 	ldhu	r3,12(r18)
  808160:	00beffc4 	movi	r2,-1025
  808164:	1886703a 	and	r3,r3,r2
  808168:	18c02014 	ori	r3,r3,128
  80816c:	90c0030d 	sth	r3,12(r18)
  808170:	9c07c83a 	sub	r3,r19,r16
  808174:	8c05883a 	add	r2,r17,r16
  808178:	a00d883a 	mov	r6,r20
  80817c:	a021883a 	mov	r16,r20
  808180:	90800015 	stw	r2,0(r18)
  808184:	90c00215 	stw	r3,8(r18)
  808188:	94400415 	stw	r17,16(r18)
  80818c:	94c00515 	stw	r19,20(r18)
  808190:	91000017 	ldw	r4,0(r18)
  808194:	b80b883a 	mov	r5,r23
  808198:	a023883a 	mov	r17,r20
  80819c:	08090f80 	call	8090f8 <memmove>
  8081a0:	90c00217 	ldw	r3,8(r18)
  8081a4:	90800017 	ldw	r2,0(r18)
  8081a8:	a027883a 	mov	r19,r20
  8081ac:	1c07c83a 	sub	r3,r3,r16
  8081b0:	1405883a 	add	r2,r2,r16
  8081b4:	90c00215 	stw	r3,8(r18)
  8081b8:	a021883a 	mov	r16,r20
  8081bc:	90800015 	stw	r2,0(r18)
  8081c0:	b0800217 	ldw	r2,8(r22)
  8081c4:	1405c83a 	sub	r2,r2,r16
  8081c8:	b0800215 	stw	r2,8(r22)
  8081cc:	103fa826 	beq	r2,zero,808070 <__sfvwrite_r+0xb0>
  8081d0:	a469c83a 	sub	r20,r20,r17
  8081d4:	91c0030b 	ldhu	r7,12(r18)
  8081d8:	bcef883a 	add	r23,r23,r19
  8081dc:	a03fbe1e 	bne	r20,zero,8080d8 <__sfvwrite_r+0x118>
  8081e0:	adc00017 	ldw	r23,0(r21)
  8081e4:	ad000117 	ldw	r20,4(r21)
  8081e8:	ad400204 	addi	r21,r21,8
  8081ec:	003fb906 	br	8080d4 <__sfvwrite_r+0x114>
  8081f0:	ac400017 	ldw	r17,0(r21)
  8081f4:	ac000117 	ldw	r16,4(r21)
  8081f8:	ad400204 	addi	r21,r21,8
  8081fc:	003f8a06 	br	808028 <__sfvwrite_r+0x68>
  808200:	91400417 	ldw	r5,16(r18)
  808204:	e009883a 	mov	r4,fp
  808208:	0807cac0 	call	807cac <_free_r>
  80820c:	00800304 	movi	r2,12
  808210:	e0800015 	stw	r2,0(fp)
  808214:	9080030b 	ldhu	r2,12(r18)
  808218:	013fffc4 	movi	r4,-1
  80821c:	10801014 	ori	r2,r2,64
  808220:	9080030d 	sth	r2,12(r18)
  808224:	003f9306 	br	808074 <__sfvwrite_r+0xb4>
  808228:	0027883a 	mov	r19,zero
  80822c:	002f883a 	mov	r23,zero
  808230:	d8000015 	stw	zero,0(sp)
  808234:	0029883a 	mov	r20,zero
  808238:	98001e26 	beq	r19,zero,8082b4 <__sfvwrite_r+0x2f4>
  80823c:	d8c00017 	ldw	r3,0(sp)
  808240:	1804c03a 	cmpne	r2,r3,zero
  808244:	10005e26 	beq	r2,zero,8083c0 <__sfvwrite_r+0x400>
  808248:	9821883a 	mov	r16,r19
  80824c:	a4c0012e 	bgeu	r20,r19,808254 <__sfvwrite_r+0x294>
  808250:	a021883a 	mov	r16,r20
  808254:	91000017 	ldw	r4,0(r18)
  808258:	90800417 	ldw	r2,16(r18)
  80825c:	91800217 	ldw	r6,8(r18)
  808260:	91c00517 	ldw	r7,20(r18)
  808264:	1100022e 	bgeu	r2,r4,808270 <__sfvwrite_r+0x2b0>
  808268:	31e3883a 	add	r17,r6,r7
  80826c:	8c001616 	blt	r17,r16,8082c8 <__sfvwrite_r+0x308>
  808270:	81c03816 	blt	r16,r7,808354 <__sfvwrite_r+0x394>
  808274:	90c00917 	ldw	r3,36(r18)
  808278:	91400717 	ldw	r5,28(r18)
  80827c:	e009883a 	mov	r4,fp
  808280:	b80d883a 	mov	r6,r23
  808284:	183ee83a 	callr	r3
  808288:	1023883a 	mov	r17,r2
  80828c:	00bfe10e 	bge	zero,r2,808214 <__sfvwrite_r+0x254>
  808290:	a469c83a 	sub	r20,r20,r17
  808294:	a0001826 	beq	r20,zero,8082f8 <__sfvwrite_r+0x338>
  808298:	b0800217 	ldw	r2,8(r22)
  80829c:	1445c83a 	sub	r2,r2,r17
  8082a0:	b0800215 	stw	r2,8(r22)
  8082a4:	103f7226 	beq	r2,zero,808070 <__sfvwrite_r+0xb0>
  8082a8:	9c67c83a 	sub	r19,r19,r17
  8082ac:	bc6f883a 	add	r23,r23,r17
  8082b0:	983fe21e 	bne	r19,zero,80823c <__sfvwrite_r+0x27c>
  8082b4:	adc00017 	ldw	r23,0(r21)
  8082b8:	acc00117 	ldw	r19,4(r21)
  8082bc:	ad400204 	addi	r21,r21,8
  8082c0:	d8000015 	stw	zero,0(sp)
  8082c4:	003fdc06 	br	808238 <__sfvwrite_r+0x278>
  8082c8:	b80b883a 	mov	r5,r23
  8082cc:	880d883a 	mov	r6,r17
  8082d0:	08090f80 	call	8090f8 <memmove>
  8082d4:	90c00017 	ldw	r3,0(r18)
  8082d8:	e009883a 	mov	r4,fp
  8082dc:	900b883a 	mov	r5,r18
  8082e0:	1c47883a 	add	r3,r3,r17
  8082e4:	90c00015 	stw	r3,0(r18)
  8082e8:	08076900 	call	807690 <_fflush_r>
  8082ec:	103fc91e 	bne	r2,zero,808214 <__sfvwrite_r+0x254>
  8082f0:	a469c83a 	sub	r20,r20,r17
  8082f4:	a03fe81e 	bne	r20,zero,808298 <__sfvwrite_r+0x2d8>
  8082f8:	e009883a 	mov	r4,fp
  8082fc:	900b883a 	mov	r5,r18
  808300:	08076900 	call	807690 <_fflush_r>
  808304:	103fc31e 	bne	r2,zero,808214 <__sfvwrite_r+0x254>
  808308:	d8000015 	stw	zero,0(sp)
  80830c:	003fe206 	br	808298 <__sfvwrite_r+0x2d8>
  808310:	91000017 	ldw	r4,0(r18)
  808314:	90800417 	ldw	r2,16(r18)
  808318:	1100022e 	bgeu	r2,r4,808324 <__sfvwrite_r+0x364>
  80831c:	8023883a 	mov	r17,r16
  808320:	85003136 	bltu	r16,r20,8083e8 <__sfvwrite_r+0x428>
  808324:	91c00517 	ldw	r7,20(r18)
  808328:	a1c01836 	bltu	r20,r7,80838c <__sfvwrite_r+0x3cc>
  80832c:	90c00917 	ldw	r3,36(r18)
  808330:	91400717 	ldw	r5,28(r18)
  808334:	e009883a 	mov	r4,fp
  808338:	b80d883a 	mov	r6,r23
  80833c:	183ee83a 	callr	r3
  808340:	1021883a 	mov	r16,r2
  808344:	00bfb30e 	bge	zero,r2,808214 <__sfvwrite_r+0x254>
  808348:	1023883a 	mov	r17,r2
  80834c:	1027883a 	mov	r19,r2
  808350:	003f9b06 	br	8081c0 <__sfvwrite_r+0x200>
  808354:	b80b883a 	mov	r5,r23
  808358:	800d883a 	mov	r6,r16
  80835c:	08090f80 	call	8090f8 <memmove>
  808360:	90c00217 	ldw	r3,8(r18)
  808364:	90800017 	ldw	r2,0(r18)
  808368:	8023883a 	mov	r17,r16
  80836c:	1c07c83a 	sub	r3,r3,r16
  808370:	1405883a 	add	r2,r2,r16
  808374:	90c00215 	stw	r3,8(r18)
  808378:	90800015 	stw	r2,0(r18)
  80837c:	003fc406 	br	808290 <__sfvwrite_r+0x2d0>
  808380:	a00d883a 	mov	r6,r20
  808384:	a021883a 	mov	r16,r20
  808388:	003f8106 	br	808190 <__sfvwrite_r+0x1d0>
  80838c:	b80b883a 	mov	r5,r23
  808390:	a00d883a 	mov	r6,r20
  808394:	08090f80 	call	8090f8 <memmove>
  808398:	90c00217 	ldw	r3,8(r18)
  80839c:	90800017 	ldw	r2,0(r18)
  8083a0:	a021883a 	mov	r16,r20
  8083a4:	1d07c83a 	sub	r3,r3,r20
  8083a8:	1505883a 	add	r2,r2,r20
  8083ac:	a023883a 	mov	r17,r20
  8083b0:	a027883a 	mov	r19,r20
  8083b4:	90c00215 	stw	r3,8(r18)
  8083b8:	90800015 	stw	r2,0(r18)
  8083bc:	003f8006 	br	8081c0 <__sfvwrite_r+0x200>
  8083c0:	b809883a 	mov	r4,r23
  8083c4:	01400284 	movi	r5,10
  8083c8:	980d883a 	mov	r6,r19
  8083cc:	0808f740 	call	808f74 <memchr>
  8083d0:	10001726 	beq	r2,zero,808430 <__sfvwrite_r+0x470>
  8083d4:	15c5c83a 	sub	r2,r2,r23
  8083d8:	15000044 	addi	r20,r2,1
  8083dc:	00800044 	movi	r2,1
  8083e0:	d8800015 	stw	r2,0(sp)
  8083e4:	003f9806 	br	808248 <__sfvwrite_r+0x288>
  8083e8:	b80b883a 	mov	r5,r23
  8083ec:	800d883a 	mov	r6,r16
  8083f0:	08090f80 	call	8090f8 <memmove>
  8083f4:	90c00017 	ldw	r3,0(r18)
  8083f8:	e009883a 	mov	r4,fp
  8083fc:	900b883a 	mov	r5,r18
  808400:	1c07883a 	add	r3,r3,r16
  808404:	90c00015 	stw	r3,0(r18)
  808408:	8027883a 	mov	r19,r16
  80840c:	08076900 	call	807690 <_fflush_r>
  808410:	103f6b26 	beq	r2,zero,8081c0 <__sfvwrite_r+0x200>
  808414:	003f7f06 	br	808214 <__sfvwrite_r+0x254>
  808418:	400b883a 	mov	r5,r8
  80841c:	e009883a 	mov	r4,fp
  808420:	080a2640 	call	80a264 <_realloc_r>
  808424:	103f7626 	beq	r2,zero,808200 <__sfvwrite_r+0x240>
  808428:	1023883a 	mov	r17,r2
  80842c:	003f5006 	br	808170 <__sfvwrite_r+0x1b0>
  808430:	00c00044 	movi	r3,1
  808434:	9d000044 	addi	r20,r19,1
  808438:	d8c00015 	stw	r3,0(sp)
  80843c:	003f8206 	br	808248 <__sfvwrite_r+0x288>
  808440:	9080030b 	ldhu	r2,12(r18)
  808444:	00c00244 	movi	r3,9
  808448:	013fffc4 	movi	r4,-1
  80844c:	10801014 	ori	r2,r2,64
  808450:	9080030d 	sth	r2,12(r18)
  808454:	e0c00015 	stw	r3,0(fp)
  808458:	003f0606 	br	808074 <__sfvwrite_r+0xb4>

0080845c <_fwalk_reent>:
  80845c:	defff704 	addi	sp,sp,-36
  808460:	dcc00315 	stw	r19,12(sp)
  808464:	24c0b804 	addi	r19,r4,736
  808468:	dd800615 	stw	r22,24(sp)
  80846c:	dd400515 	stw	r21,20(sp)
  808470:	dfc00815 	stw	ra,32(sp)
  808474:	ddc00715 	stw	r23,28(sp)
  808478:	dd000415 	stw	r20,16(sp)
  80847c:	dc800215 	stw	r18,8(sp)
  808480:	dc400115 	stw	r17,4(sp)
  808484:	dc000015 	stw	r16,0(sp)
  808488:	202b883a 	mov	r21,r4
  80848c:	282d883a 	mov	r22,r5
  808490:	08079180 	call	807918 <__sfp_lock_acquire>
  808494:	98002126 	beq	r19,zero,80851c <_fwalk_reent+0xc0>
  808498:	002f883a 	mov	r23,zero
  80849c:	9c800117 	ldw	r18,4(r19)
  8084a0:	9c000217 	ldw	r16,8(r19)
  8084a4:	90bfffc4 	addi	r2,r18,-1
  8084a8:	10000d16 	blt	r2,zero,8084e0 <_fwalk_reent+0x84>
  8084ac:	0023883a 	mov	r17,zero
  8084b0:	053fffc4 	movi	r20,-1
  8084b4:	8080030f 	ldh	r2,12(r16)
  8084b8:	8c400044 	addi	r17,r17,1
  8084bc:	10000626 	beq	r2,zero,8084d8 <_fwalk_reent+0x7c>
  8084c0:	8080038f 	ldh	r2,14(r16)
  8084c4:	800b883a 	mov	r5,r16
  8084c8:	a809883a 	mov	r4,r21
  8084cc:	15000226 	beq	r2,r20,8084d8 <_fwalk_reent+0x7c>
  8084d0:	b03ee83a 	callr	r22
  8084d4:	b8aeb03a 	or	r23,r23,r2
  8084d8:	84001704 	addi	r16,r16,92
  8084dc:	947ff51e 	bne	r18,r17,8084b4 <_fwalk_reent+0x58>
  8084e0:	9cc00017 	ldw	r19,0(r19)
  8084e4:	983fed1e 	bne	r19,zero,80849c <_fwalk_reent+0x40>
  8084e8:	080791c0 	call	80791c <__sfp_lock_release>
  8084ec:	b805883a 	mov	r2,r23
  8084f0:	dfc00817 	ldw	ra,32(sp)
  8084f4:	ddc00717 	ldw	r23,28(sp)
  8084f8:	dd800617 	ldw	r22,24(sp)
  8084fc:	dd400517 	ldw	r21,20(sp)
  808500:	dd000417 	ldw	r20,16(sp)
  808504:	dcc00317 	ldw	r19,12(sp)
  808508:	dc800217 	ldw	r18,8(sp)
  80850c:	dc400117 	ldw	r17,4(sp)
  808510:	dc000017 	ldw	r16,0(sp)
  808514:	dec00904 	addi	sp,sp,36
  808518:	f800283a 	ret
  80851c:	002f883a 	mov	r23,zero
  808520:	003ff106 	br	8084e8 <_fwalk_reent+0x8c>

00808524 <_fwalk>:
  808524:	defff804 	addi	sp,sp,-32
  808528:	dcc00315 	stw	r19,12(sp)
  80852c:	24c0b804 	addi	r19,r4,736
  808530:	dd400515 	stw	r21,20(sp)
  808534:	dfc00715 	stw	ra,28(sp)
  808538:	dd800615 	stw	r22,24(sp)
  80853c:	dd000415 	stw	r20,16(sp)
  808540:	dc800215 	stw	r18,8(sp)
  808544:	dc400115 	stw	r17,4(sp)
  808548:	dc000015 	stw	r16,0(sp)
  80854c:	282b883a 	mov	r21,r5
  808550:	08079180 	call	807918 <__sfp_lock_acquire>
  808554:	98001f26 	beq	r19,zero,8085d4 <_fwalk+0xb0>
  808558:	002d883a 	mov	r22,zero
  80855c:	9c800117 	ldw	r18,4(r19)
  808560:	9c000217 	ldw	r16,8(r19)
  808564:	90bfffc4 	addi	r2,r18,-1
  808568:	10000c16 	blt	r2,zero,80859c <_fwalk+0x78>
  80856c:	0023883a 	mov	r17,zero
  808570:	053fffc4 	movi	r20,-1
  808574:	8080030f 	ldh	r2,12(r16)
  808578:	8c400044 	addi	r17,r17,1
  80857c:	10000526 	beq	r2,zero,808594 <_fwalk+0x70>
  808580:	8080038f 	ldh	r2,14(r16)
  808584:	8009883a 	mov	r4,r16
  808588:	15000226 	beq	r2,r20,808594 <_fwalk+0x70>
  80858c:	a83ee83a 	callr	r21
  808590:	b0acb03a 	or	r22,r22,r2
  808594:	84001704 	addi	r16,r16,92
  808598:	947ff61e 	bne	r18,r17,808574 <_fwalk+0x50>
  80859c:	9cc00017 	ldw	r19,0(r19)
  8085a0:	983fee1e 	bne	r19,zero,80855c <_fwalk+0x38>
  8085a4:	080791c0 	call	80791c <__sfp_lock_release>
  8085a8:	b005883a 	mov	r2,r22
  8085ac:	dfc00717 	ldw	ra,28(sp)
  8085b0:	dd800617 	ldw	r22,24(sp)
  8085b4:	dd400517 	ldw	r21,20(sp)
  8085b8:	dd000417 	ldw	r20,16(sp)
  8085bc:	dcc00317 	ldw	r19,12(sp)
  8085c0:	dc800217 	ldw	r18,8(sp)
  8085c4:	dc400117 	ldw	r17,4(sp)
  8085c8:	dc000017 	ldw	r16,0(sp)
  8085cc:	dec00804 	addi	sp,sp,32
  8085d0:	f800283a 	ret
  8085d4:	002d883a 	mov	r22,zero
  8085d8:	003ff206 	br	8085a4 <_fwalk+0x80>

008085dc <__locale_charset>:
  8085dc:	d0a00d17 	ldw	r2,-32716(gp)
  8085e0:	f800283a 	ret

008085e4 <_localeconv_r>:
  8085e4:	00802074 	movhi	r2,129
  8085e8:	10883604 	addi	r2,r2,8408
  8085ec:	f800283a 	ret

008085f0 <localeconv>:
  8085f0:	00802074 	movhi	r2,129
  8085f4:	108fd204 	addi	r2,r2,16200
  8085f8:	11000017 	ldw	r4,0(r2)
  8085fc:	08085e41 	jmpi	8085e4 <_localeconv_r>

00808600 <_setlocale_r>:
  808600:	defffc04 	addi	sp,sp,-16
  808604:	00c02074 	movhi	r3,129
  808608:	18c80f04 	addi	r3,r3,8252
  80860c:	dc800215 	stw	r18,8(sp)
  808610:	dc400115 	stw	r17,4(sp)
  808614:	dc000015 	stw	r16,0(sp)
  808618:	2023883a 	mov	r17,r4
  80861c:	2825883a 	mov	r18,r5
  808620:	dfc00315 	stw	ra,12(sp)
  808624:	3021883a 	mov	r16,r6
  808628:	3009883a 	mov	r4,r6
  80862c:	180b883a 	mov	r5,r3
  808630:	30000926 	beq	r6,zero,808658 <_setlocale_r+0x58>
  808634:	080aa840 	call	80aa84 <strcmp>
  808638:	8009883a 	mov	r4,r16
  80863c:	01402074 	movhi	r5,129
  808640:	29479304 	addi	r5,r5,7756
  808644:	10000b1e 	bne	r2,zero,808674 <_setlocale_r+0x74>
  808648:	8c000d15 	stw	r16,52(r17)
  80864c:	8c800c15 	stw	r18,48(r17)
  808650:	00c02074 	movhi	r3,129
  808654:	18c80f04 	addi	r3,r3,8252
  808658:	1805883a 	mov	r2,r3
  80865c:	dfc00317 	ldw	ra,12(sp)
  808660:	dc800217 	ldw	r18,8(sp)
  808664:	dc400117 	ldw	r17,4(sp)
  808668:	dc000017 	ldw	r16,0(sp)
  80866c:	dec00404 	addi	sp,sp,16
  808670:	f800283a 	ret
  808674:	080aa840 	call	80aa84 <strcmp>
  808678:	0007883a 	mov	r3,zero
  80867c:	103ff226 	beq	r2,zero,808648 <_setlocale_r+0x48>
  808680:	003ff506 	br	808658 <_setlocale_r+0x58>

00808684 <setlocale>:
  808684:	01802074 	movhi	r6,129
  808688:	318fd204 	addi	r6,r6,16200
  80868c:	2007883a 	mov	r3,r4
  808690:	31000017 	ldw	r4,0(r6)
  808694:	280d883a 	mov	r6,r5
  808698:	180b883a 	mov	r5,r3
  80869c:	08086001 	jmpi	808600 <_setlocale_r>

008086a0 <__smakebuf_r>:
  8086a0:	2880030b 	ldhu	r2,12(r5)
  8086a4:	deffed04 	addi	sp,sp,-76
  8086a8:	dc401015 	stw	r17,64(sp)
  8086ac:	1080008c 	andi	r2,r2,2
  8086b0:	dc000f15 	stw	r16,60(sp)
  8086b4:	dfc01215 	stw	ra,72(sp)
  8086b8:	dc801115 	stw	r18,68(sp)
  8086bc:	2821883a 	mov	r16,r5
  8086c0:	2023883a 	mov	r17,r4
  8086c4:	10000b26 	beq	r2,zero,8086f4 <__smakebuf_r+0x54>
  8086c8:	28c010c4 	addi	r3,r5,67
  8086cc:	00800044 	movi	r2,1
  8086d0:	28800515 	stw	r2,20(r5)
  8086d4:	28c00415 	stw	r3,16(r5)
  8086d8:	28c00015 	stw	r3,0(r5)
  8086dc:	dfc01217 	ldw	ra,72(sp)
  8086e0:	dc801117 	ldw	r18,68(sp)
  8086e4:	dc401017 	ldw	r17,64(sp)
  8086e8:	dc000f17 	ldw	r16,60(sp)
  8086ec:	dec01304 	addi	sp,sp,76
  8086f0:	f800283a 	ret
  8086f4:	2940038f 	ldh	r5,14(r5)
  8086f8:	28002116 	blt	r5,zero,808780 <__smakebuf_r+0xe0>
  8086fc:	d80d883a 	mov	r6,sp
  808700:	080ae000 	call	80ae00 <_fstat_r>
  808704:	10001e16 	blt	r2,zero,808780 <__smakebuf_r+0xe0>
  808708:	d8800117 	ldw	r2,4(sp)
  80870c:	00e00014 	movui	r3,32768
  808710:	113c000c 	andi	r4,r2,61440
  808714:	20c03126 	beq	r4,r3,8087dc <__smakebuf_r+0x13c>
  808718:	8080030b 	ldhu	r2,12(r16)
  80871c:	00c80004 	movi	r3,8192
  808720:	10820014 	ori	r2,r2,2048
  808724:	8080030d 	sth	r2,12(r16)
  808728:	20c01e26 	beq	r4,r3,8087a4 <__smakebuf_r+0x104>
  80872c:	04810004 	movi	r18,1024
  808730:	8809883a 	mov	r4,r17
  808734:	900b883a 	mov	r5,r18
  808738:	08088340 	call	808834 <_malloc_r>
  80873c:	1009883a 	mov	r4,r2
  808740:	10003126 	beq	r2,zero,808808 <__smakebuf_r+0x168>
  808744:	80c0030b 	ldhu	r3,12(r16)
  808748:	00802034 	movhi	r2,128
  80874c:	109e8304 	addi	r2,r2,31244
  808750:	88800f15 	stw	r2,60(r17)
  808754:	18c02014 	ori	r3,r3,128
  808758:	84800515 	stw	r18,20(r16)
  80875c:	80c0030d 	sth	r3,12(r16)
  808760:	81000415 	stw	r4,16(r16)
  808764:	81000015 	stw	r4,0(r16)
  808768:	dfc01217 	ldw	ra,72(sp)
  80876c:	dc801117 	ldw	r18,68(sp)
  808770:	dc401017 	ldw	r17,64(sp)
  808774:	dc000f17 	ldw	r16,60(sp)
  808778:	dec01304 	addi	sp,sp,76
  80877c:	f800283a 	ret
  808780:	80c0030b 	ldhu	r3,12(r16)
  808784:	1880200c 	andi	r2,r3,128
  808788:	10000426 	beq	r2,zero,80879c <__smakebuf_r+0xfc>
  80878c:	04801004 	movi	r18,64
  808790:	18820014 	ori	r2,r3,2048
  808794:	8080030d 	sth	r2,12(r16)
  808798:	003fe506 	br	808730 <__smakebuf_r+0x90>
  80879c:	04810004 	movi	r18,1024
  8087a0:	003ffb06 	br	808790 <__smakebuf_r+0xf0>
  8087a4:	8140038f 	ldh	r5,14(r16)
  8087a8:	8809883a 	mov	r4,r17
  8087ac:	080ae740 	call	80ae74 <_isatty_r>
  8087b0:	103fde26 	beq	r2,zero,80872c <__smakebuf_r+0x8c>
  8087b4:	8080030b 	ldhu	r2,12(r16)
  8087b8:	80c010c4 	addi	r3,r16,67
  8087bc:	04810004 	movi	r18,1024
  8087c0:	10800054 	ori	r2,r2,1
  8087c4:	8080030d 	sth	r2,12(r16)
  8087c8:	00800044 	movi	r2,1
  8087cc:	80c00415 	stw	r3,16(r16)
  8087d0:	80800515 	stw	r2,20(r16)
  8087d4:	80c00015 	stw	r3,0(r16)
  8087d8:	003fd506 	br	808730 <__smakebuf_r+0x90>
  8087dc:	80c00a17 	ldw	r3,40(r16)
  8087e0:	00802074 	movhi	r2,129
  8087e4:	10aa5004 	addi	r2,r2,-22208
  8087e8:	18bfcb1e 	bne	r3,r2,808718 <__smakebuf_r+0x78>
  8087ec:	8080030b 	ldhu	r2,12(r16)
  8087f0:	00c10004 	movi	r3,1024
  8087f4:	1825883a 	mov	r18,r3
  8087f8:	10c4b03a 	or	r2,r2,r3
  8087fc:	8080030d 	sth	r2,12(r16)
  808800:	80c01315 	stw	r3,76(r16)
  808804:	003fca06 	br	808730 <__smakebuf_r+0x90>
  808808:	8100030b 	ldhu	r4,12(r16)
  80880c:	2080800c 	andi	r2,r4,512
  808810:	103fb21e 	bne	r2,zero,8086dc <__smakebuf_r+0x3c>
  808814:	80c010c4 	addi	r3,r16,67
  808818:	21000094 	ori	r4,r4,2
  80881c:	00800044 	movi	r2,1
  808820:	80800515 	stw	r2,20(r16)
  808824:	8100030d 	sth	r4,12(r16)
  808828:	80c00415 	stw	r3,16(r16)
  80882c:	80c00015 	stw	r3,0(r16)
  808830:	003faa06 	br	8086dc <__smakebuf_r+0x3c>

00808834 <_malloc_r>:
  808834:	defff604 	addi	sp,sp,-40
  808838:	28c002c4 	addi	r3,r5,11
  80883c:	00800584 	movi	r2,22
  808840:	dc800215 	stw	r18,8(sp)
  808844:	dfc00915 	stw	ra,36(sp)
  808848:	df000815 	stw	fp,32(sp)
  80884c:	ddc00715 	stw	r23,28(sp)
  808850:	dd800615 	stw	r22,24(sp)
  808854:	dd400515 	stw	r21,20(sp)
  808858:	dd000415 	stw	r20,16(sp)
  80885c:	dcc00315 	stw	r19,12(sp)
  808860:	dc400115 	stw	r17,4(sp)
  808864:	dc000015 	stw	r16,0(sp)
  808868:	2025883a 	mov	r18,r4
  80886c:	10c01236 	bltu	r2,r3,8088b8 <_malloc_r+0x84>
  808870:	04400404 	movi	r17,16
  808874:	8940142e 	bgeu	r17,r5,8088c8 <_malloc_r+0x94>
  808878:	00800304 	movi	r2,12
  80887c:	0007883a 	mov	r3,zero
  808880:	90800015 	stw	r2,0(r18)
  808884:	1805883a 	mov	r2,r3
  808888:	dfc00917 	ldw	ra,36(sp)
  80888c:	df000817 	ldw	fp,32(sp)
  808890:	ddc00717 	ldw	r23,28(sp)
  808894:	dd800617 	ldw	r22,24(sp)
  808898:	dd400517 	ldw	r21,20(sp)
  80889c:	dd000417 	ldw	r20,16(sp)
  8088a0:	dcc00317 	ldw	r19,12(sp)
  8088a4:	dc800217 	ldw	r18,8(sp)
  8088a8:	dc400117 	ldw	r17,4(sp)
  8088ac:	dc000017 	ldw	r16,0(sp)
  8088b0:	dec00a04 	addi	sp,sp,40
  8088b4:	f800283a 	ret
  8088b8:	00bffe04 	movi	r2,-8
  8088bc:	18a2703a 	and	r17,r3,r2
  8088c0:	883fed16 	blt	r17,zero,808878 <_malloc_r+0x44>
  8088c4:	897fec36 	bltu	r17,r5,808878 <_malloc_r+0x44>
  8088c8:	9009883a 	mov	r4,r18
  8088cc:	080cc780 	call	80cc78 <__malloc_lock>
  8088d0:	00807dc4 	movi	r2,503
  8088d4:	14402b2e 	bgeu	r2,r17,808984 <_malloc_r+0x150>
  8088d8:	8806d27a 	srli	r3,r17,9
  8088dc:	18003f1e 	bne	r3,zero,8089dc <_malloc_r+0x1a8>
  8088e0:	880cd0fa 	srli	r6,r17,3
  8088e4:	300490fa 	slli	r2,r6,3
  8088e8:	02c02074 	movhi	r11,129
  8088ec:	5ac9e704 	addi	r11,r11,10140
  8088f0:	12cb883a 	add	r5,r2,r11
  8088f4:	2c000317 	ldw	r16,12(r5)
  8088f8:	580f883a 	mov	r7,r11
  8088fc:	2c00041e 	bne	r5,r16,808910 <_malloc_r+0xdc>
  808900:	00000a06 	br	80892c <_malloc_r+0xf8>
  808904:	1800860e 	bge	r3,zero,808b20 <_malloc_r+0x2ec>
  808908:	84000317 	ldw	r16,12(r16)
  80890c:	2c000726 	beq	r5,r16,80892c <_malloc_r+0xf8>
  808910:	80800117 	ldw	r2,4(r16)
  808914:	00ffff04 	movi	r3,-4
  808918:	10c8703a 	and	r4,r2,r3
  80891c:	2447c83a 	sub	r3,r4,r17
  808920:	008003c4 	movi	r2,15
  808924:	10fff70e 	bge	r2,r3,808904 <_malloc_r+0xd0>
  808928:	31bfffc4 	addi	r6,r6,-1
  80892c:	32400044 	addi	r9,r6,1
  808930:	02802074 	movhi	r10,129
  808934:	5289e904 	addi	r10,r10,10148
  808938:	54000217 	ldw	r16,8(r10)
  80893c:	8280a026 	beq	r16,r10,808bc0 <_malloc_r+0x38c>
  808940:	80800117 	ldw	r2,4(r16)
  808944:	00ffff04 	movi	r3,-4
  808948:	10ca703a 	and	r5,r2,r3
  80894c:	2c4dc83a 	sub	r6,r5,r17
  808950:	008003c4 	movi	r2,15
  808954:	11808316 	blt	r2,r6,808b64 <_malloc_r+0x330>
  808958:	52800315 	stw	r10,12(r10)
  80895c:	52800215 	stw	r10,8(r10)
  808960:	30002916 	blt	r6,zero,808a08 <_malloc_r+0x1d4>
  808964:	8147883a 	add	r3,r16,r5
  808968:	18800117 	ldw	r2,4(r3)
  80896c:	9009883a 	mov	r4,r18
  808970:	10800054 	ori	r2,r2,1
  808974:	18800115 	stw	r2,4(r3)
  808978:	080cc980 	call	80cc98 <__malloc_unlock>
  80897c:	80c00204 	addi	r3,r16,8
  808980:	003fc006 	br	808884 <_malloc_r+0x50>
  808984:	02c02074 	movhi	r11,129
  808988:	5ac9e704 	addi	r11,r11,10140
  80898c:	8ac5883a 	add	r2,r17,r11
  808990:	14000317 	ldw	r16,12(r2)
  808994:	580f883a 	mov	r7,r11
  808998:	8806d0fa 	srli	r3,r17,3
  80899c:	14006c26 	beq	r2,r16,808b50 <_malloc_r+0x31c>
  8089a0:	80c00117 	ldw	r3,4(r16)
  8089a4:	00bfff04 	movi	r2,-4
  8089a8:	81800317 	ldw	r6,12(r16)
  8089ac:	1886703a 	and	r3,r3,r2
  8089b0:	80c7883a 	add	r3,r16,r3
  8089b4:	18800117 	ldw	r2,4(r3)
  8089b8:	81400217 	ldw	r5,8(r16)
  8089bc:	9009883a 	mov	r4,r18
  8089c0:	10800054 	ori	r2,r2,1
  8089c4:	18800115 	stw	r2,4(r3)
  8089c8:	31400215 	stw	r5,8(r6)
  8089cc:	29800315 	stw	r6,12(r5)
  8089d0:	080cc980 	call	80cc98 <__malloc_unlock>
  8089d4:	80c00204 	addi	r3,r16,8
  8089d8:	003faa06 	br	808884 <_malloc_r+0x50>
  8089dc:	00800104 	movi	r2,4
  8089e0:	10c0052e 	bgeu	r2,r3,8089f8 <_malloc_r+0x1c4>
  8089e4:	00800504 	movi	r2,20
  8089e8:	10c07836 	bltu	r2,r3,808bcc <_malloc_r+0x398>
  8089ec:	198016c4 	addi	r6,r3,91
  8089f0:	300490fa 	slli	r2,r6,3
  8089f4:	003fbc06 	br	8088e8 <_malloc_r+0xb4>
  8089f8:	8804d1ba 	srli	r2,r17,6
  8089fc:	11800e04 	addi	r6,r2,56
  808a00:	300490fa 	slli	r2,r6,3
  808a04:	003fb806 	br	8088e8 <_malloc_r+0xb4>
  808a08:	00807fc4 	movi	r2,511
  808a0c:	1140bb36 	bltu	r2,r5,808cfc <_malloc_r+0x4c8>
  808a10:	2806d0fa 	srli	r3,r5,3
  808a14:	573ffe04 	addi	fp,r10,-8
  808a18:	00800044 	movi	r2,1
  808a1c:	180890fa 	slli	r4,r3,3
  808a20:	1807d0ba 	srai	r3,r3,2
  808a24:	e1c00117 	ldw	r7,4(fp)
  808a28:	5909883a 	add	r4,r11,r4
  808a2c:	21400217 	ldw	r5,8(r4)
  808a30:	10c4983a 	sll	r2,r2,r3
  808a34:	81000315 	stw	r4,12(r16)
  808a38:	81400215 	stw	r5,8(r16)
  808a3c:	388eb03a 	or	r7,r7,r2
  808a40:	2c000315 	stw	r16,12(r5)
  808a44:	24000215 	stw	r16,8(r4)
  808a48:	e1c00115 	stw	r7,4(fp)
  808a4c:	4807883a 	mov	r3,r9
  808a50:	4800cd16 	blt	r9,zero,808d88 <_malloc_r+0x554>
  808a54:	1807d0ba 	srai	r3,r3,2
  808a58:	00800044 	movi	r2,1
  808a5c:	10c8983a 	sll	r4,r2,r3
  808a60:	39004436 	bltu	r7,r4,808b74 <_malloc_r+0x340>
  808a64:	21c4703a 	and	r2,r4,r7
  808a68:	10000a1e 	bne	r2,zero,808a94 <_malloc_r+0x260>
  808a6c:	2109883a 	add	r4,r4,r4
  808a70:	00bfff04 	movi	r2,-4
  808a74:	4884703a 	and	r2,r9,r2
  808a78:	3906703a 	and	r3,r7,r4
  808a7c:	12400104 	addi	r9,r2,4
  808a80:	1800041e 	bne	r3,zero,808a94 <_malloc_r+0x260>
  808a84:	2109883a 	add	r4,r4,r4
  808a88:	3904703a 	and	r2,r7,r4
  808a8c:	4a400104 	addi	r9,r9,4
  808a90:	103ffc26 	beq	r2,zero,808a84 <_malloc_r+0x250>
  808a94:	480490fa 	slli	r2,r9,3
  808a98:	4819883a 	mov	r12,r9
  808a9c:	023fff04 	movi	r8,-4
  808aa0:	589b883a 	add	r13,r11,r2
  808aa4:	6807883a 	mov	r3,r13
  808aa8:	014003c4 	movi	r5,15
  808aac:	1c000317 	ldw	r16,12(r3)
  808ab0:	1c00041e 	bne	r3,r16,808ac4 <_malloc_r+0x290>
  808ab4:	0000a706 	br	808d54 <_malloc_r+0x520>
  808ab8:	3000ab0e 	bge	r6,zero,808d68 <_malloc_r+0x534>
  808abc:	84000317 	ldw	r16,12(r16)
  808ac0:	1c00a426 	beq	r3,r16,808d54 <_malloc_r+0x520>
  808ac4:	80800117 	ldw	r2,4(r16)
  808ac8:	1204703a 	and	r2,r2,r8
  808acc:	144dc83a 	sub	r6,r2,r17
  808ad0:	29bff90e 	bge	r5,r6,808ab8 <_malloc_r+0x284>
  808ad4:	81000317 	ldw	r4,12(r16)
  808ad8:	80c00217 	ldw	r3,8(r16)
  808adc:	89400054 	ori	r5,r17,1
  808ae0:	8445883a 	add	r2,r16,r17
  808ae4:	20c00215 	stw	r3,8(r4)
  808ae8:	19000315 	stw	r4,12(r3)
  808aec:	81400115 	stw	r5,4(r16)
  808af0:	1187883a 	add	r3,r2,r6
  808af4:	31000054 	ori	r4,r6,1
  808af8:	50800315 	stw	r2,12(r10)
  808afc:	50800215 	stw	r2,8(r10)
  808b00:	19800015 	stw	r6,0(r3)
  808b04:	11000115 	stw	r4,4(r2)
  808b08:	12800215 	stw	r10,8(r2)
  808b0c:	12800315 	stw	r10,12(r2)
  808b10:	9009883a 	mov	r4,r18
  808b14:	080cc980 	call	80cc98 <__malloc_unlock>
  808b18:	80c00204 	addi	r3,r16,8
  808b1c:	003f5906 	br	808884 <_malloc_r+0x50>
  808b20:	8109883a 	add	r4,r16,r4
  808b24:	20800117 	ldw	r2,4(r4)
  808b28:	80c00217 	ldw	r3,8(r16)
  808b2c:	81400317 	ldw	r5,12(r16)
  808b30:	10800054 	ori	r2,r2,1
  808b34:	20800115 	stw	r2,4(r4)
  808b38:	28c00215 	stw	r3,8(r5)
  808b3c:	19400315 	stw	r5,12(r3)
  808b40:	9009883a 	mov	r4,r18
  808b44:	080cc980 	call	80cc98 <__malloc_unlock>
  808b48:	80c00204 	addi	r3,r16,8
  808b4c:	003f4d06 	br	808884 <_malloc_r+0x50>
  808b50:	80800204 	addi	r2,r16,8
  808b54:	14000317 	ldw	r16,12(r2)
  808b58:	143f911e 	bne	r2,r16,8089a0 <_malloc_r+0x16c>
  808b5c:	1a400084 	addi	r9,r3,2
  808b60:	003f7306 	br	808930 <_malloc_r+0xfc>
  808b64:	88c00054 	ori	r3,r17,1
  808b68:	8445883a 	add	r2,r16,r17
  808b6c:	80c00115 	stw	r3,4(r16)
  808b70:	003fdf06 	br	808af0 <_malloc_r+0x2bc>
  808b74:	e4000217 	ldw	r16,8(fp)
  808b78:	00bfff04 	movi	r2,-4
  808b7c:	80c00117 	ldw	r3,4(r16)
  808b80:	802d883a 	mov	r22,r16
  808b84:	18aa703a 	and	r21,r3,r2
  808b88:	ac401636 	bltu	r21,r17,808be4 <_malloc_r+0x3b0>
  808b8c:	ac49c83a 	sub	r4,r21,r17
  808b90:	008003c4 	movi	r2,15
  808b94:	1100130e 	bge	r2,r4,808be4 <_malloc_r+0x3b0>
  808b98:	88800054 	ori	r2,r17,1
  808b9c:	8447883a 	add	r3,r16,r17
  808ba0:	80800115 	stw	r2,4(r16)
  808ba4:	20800054 	ori	r2,r4,1
  808ba8:	18800115 	stw	r2,4(r3)
  808bac:	e0c00215 	stw	r3,8(fp)
  808bb0:	9009883a 	mov	r4,r18
  808bb4:	080cc980 	call	80cc98 <__malloc_unlock>
  808bb8:	80c00204 	addi	r3,r16,8
  808bbc:	003f3106 	br	808884 <_malloc_r+0x50>
  808bc0:	39c00117 	ldw	r7,4(r7)
  808bc4:	573ffe04 	addi	fp,r10,-8
  808bc8:	003fa006 	br	808a4c <_malloc_r+0x218>
  808bcc:	00801504 	movi	r2,84
  808bd0:	10c06736 	bltu	r2,r3,808d70 <_malloc_r+0x53c>
  808bd4:	8804d33a 	srli	r2,r17,12
  808bd8:	11801b84 	addi	r6,r2,110
  808bdc:	300490fa 	slli	r2,r6,3
  808be0:	003f4106 	br	8088e8 <_malloc_r+0xb4>
  808be4:	d0a72417 	ldw	r2,-25456(gp)
  808be8:	d0e00f17 	ldw	r3,-32708(gp)
  808bec:	053fffc4 	movi	r20,-1
  808bf0:	10800404 	addi	r2,r2,16
  808bf4:	88a7883a 	add	r19,r17,r2
  808bf8:	1d000326 	beq	r3,r20,808c08 <_malloc_r+0x3d4>
  808bfc:	98c3ffc4 	addi	r3,r19,4095
  808c00:	00bc0004 	movi	r2,-4096
  808c04:	18a6703a 	and	r19,r3,r2
  808c08:	9009883a 	mov	r4,r18
  808c0c:	980b883a 	mov	r5,r19
  808c10:	080a8c80 	call	80a8c8 <_sbrk_r>
  808c14:	1009883a 	mov	r4,r2
  808c18:	15000426 	beq	r2,r20,808c2c <_malloc_r+0x3f8>
  808c1c:	854b883a 	add	r5,r16,r21
  808c20:	1029883a 	mov	r20,r2
  808c24:	11405a2e 	bgeu	r2,r5,808d90 <_malloc_r+0x55c>
  808c28:	87000c26 	beq	r16,fp,808c5c <_malloc_r+0x428>
  808c2c:	e4000217 	ldw	r16,8(fp)
  808c30:	80c00117 	ldw	r3,4(r16)
  808c34:	00bfff04 	movi	r2,-4
  808c38:	1884703a 	and	r2,r3,r2
  808c3c:	14400336 	bltu	r2,r17,808c4c <_malloc_r+0x418>
  808c40:	1449c83a 	sub	r4,r2,r17
  808c44:	008003c4 	movi	r2,15
  808c48:	113fd316 	blt	r2,r4,808b98 <_malloc_r+0x364>
  808c4c:	9009883a 	mov	r4,r18
  808c50:	080cc980 	call	80cc98 <__malloc_unlock>
  808c54:	0007883a 	mov	r3,zero
  808c58:	003f0a06 	br	808884 <_malloc_r+0x50>
  808c5c:	05c02074 	movhi	r23,129
  808c60:	bdd6f604 	addi	r23,r23,23512
  808c64:	b8800017 	ldw	r2,0(r23)
  808c68:	988d883a 	add	r6,r19,r2
  808c6c:	b9800015 	stw	r6,0(r23)
  808c70:	d0e00f17 	ldw	r3,-32708(gp)
  808c74:	00bfffc4 	movi	r2,-1
  808c78:	18808e26 	beq	r3,r2,808eb4 <_malloc_r+0x680>
  808c7c:	2145c83a 	sub	r2,r4,r5
  808c80:	3085883a 	add	r2,r6,r2
  808c84:	b8800015 	stw	r2,0(r23)
  808c88:	20c001cc 	andi	r3,r4,7
  808c8c:	18005f1e 	bne	r3,zero,808e0c <_malloc_r+0x5d8>
  808c90:	000b883a 	mov	r5,zero
  808c94:	a4c5883a 	add	r2,r20,r19
  808c98:	1083ffcc 	andi	r2,r2,4095
  808c9c:	00c40004 	movi	r3,4096
  808ca0:	1887c83a 	sub	r3,r3,r2
  808ca4:	28e7883a 	add	r19,r5,r3
  808ca8:	9009883a 	mov	r4,r18
  808cac:	980b883a 	mov	r5,r19
  808cb0:	080a8c80 	call	80a8c8 <_sbrk_r>
  808cb4:	1007883a 	mov	r3,r2
  808cb8:	00bfffc4 	movi	r2,-1
  808cbc:	18807a26 	beq	r3,r2,808ea8 <_malloc_r+0x674>
  808cc0:	1d05c83a 	sub	r2,r3,r20
  808cc4:	9885883a 	add	r2,r19,r2
  808cc8:	10c00054 	ori	r3,r2,1
  808ccc:	b8800017 	ldw	r2,0(r23)
  808cd0:	a021883a 	mov	r16,r20
  808cd4:	a0c00115 	stw	r3,4(r20)
  808cd8:	9885883a 	add	r2,r19,r2
  808cdc:	b8800015 	stw	r2,0(r23)
  808ce0:	e5000215 	stw	r20,8(fp)
  808ce4:	b7003626 	beq	r22,fp,808dc0 <_malloc_r+0x58c>
  808ce8:	018003c4 	movi	r6,15
  808cec:	35404b36 	bltu	r6,r21,808e1c <_malloc_r+0x5e8>
  808cf0:	00800044 	movi	r2,1
  808cf4:	a0800115 	stw	r2,4(r20)
  808cf8:	003fcd06 	br	808c30 <_malloc_r+0x3fc>
  808cfc:	2808d27a 	srli	r4,r5,9
  808d00:	2000371e 	bne	r4,zero,808de0 <_malloc_r+0x5ac>
  808d04:	2808d0fa 	srli	r4,r5,3
  808d08:	200690fa 	slli	r3,r4,3
  808d0c:	1ad1883a 	add	r8,r3,r11
  808d10:	41800217 	ldw	r6,8(r8)
  808d14:	41805b26 	beq	r8,r6,808e84 <_malloc_r+0x650>
  808d18:	30800117 	ldw	r2,4(r6)
  808d1c:	00ffff04 	movi	r3,-4
  808d20:	10c4703a 	and	r2,r2,r3
  808d24:	2880022e 	bgeu	r5,r2,808d30 <_malloc_r+0x4fc>
  808d28:	31800217 	ldw	r6,8(r6)
  808d2c:	41bffa1e 	bne	r8,r6,808d18 <_malloc_r+0x4e4>
  808d30:	32000317 	ldw	r8,12(r6)
  808d34:	39c00117 	ldw	r7,4(r7)
  808d38:	82000315 	stw	r8,12(r16)
  808d3c:	81800215 	stw	r6,8(r16)
  808d40:	07002074 	movhi	fp,129
  808d44:	e709e704 	addi	fp,fp,10140
  808d48:	34000315 	stw	r16,12(r6)
  808d4c:	44000215 	stw	r16,8(r8)
  808d50:	003f3e06 	br	808a4c <_malloc_r+0x218>
  808d54:	63000044 	addi	r12,r12,1
  808d58:	608000cc 	andi	r2,r12,3
  808d5c:	10005d26 	beq	r2,zero,808ed4 <_malloc_r+0x6a0>
  808d60:	18c00204 	addi	r3,r3,8
  808d64:	003f5106 	br	808aac <_malloc_r+0x278>
  808d68:	8089883a 	add	r4,r16,r2
  808d6c:	003f6d06 	br	808b24 <_malloc_r+0x2f0>
  808d70:	00805504 	movi	r2,340
  808d74:	10c02036 	bltu	r2,r3,808df8 <_malloc_r+0x5c4>
  808d78:	8804d3fa 	srli	r2,r17,15
  808d7c:	11801dc4 	addi	r6,r2,119
  808d80:	300490fa 	slli	r2,r6,3
  808d84:	003ed806 	br	8088e8 <_malloc_r+0xb4>
  808d88:	48c000c4 	addi	r3,r9,3
  808d8c:	003f3106 	br	808a54 <_malloc_r+0x220>
  808d90:	05c02074 	movhi	r23,129
  808d94:	bdd6f604 	addi	r23,r23,23512
  808d98:	b8800017 	ldw	r2,0(r23)
  808d9c:	988d883a 	add	r6,r19,r2
  808da0:	b9800015 	stw	r6,0(r23)
  808da4:	293fb21e 	bne	r5,r4,808c70 <_malloc_r+0x43c>
  808da8:	2083ffcc 	andi	r2,r4,4095
  808dac:	103fb01e 	bne	r2,zero,808c70 <_malloc_r+0x43c>
  808db0:	e4000217 	ldw	r16,8(fp)
  808db4:	9d45883a 	add	r2,r19,r21
  808db8:	10800054 	ori	r2,r2,1
  808dbc:	80800115 	stw	r2,4(r16)
  808dc0:	b8c00017 	ldw	r3,0(r23)
  808dc4:	d0a72517 	ldw	r2,-25452(gp)
  808dc8:	10c0012e 	bgeu	r2,r3,808dd0 <_malloc_r+0x59c>
  808dcc:	d0e72515 	stw	r3,-25452(gp)
  808dd0:	d0a72617 	ldw	r2,-25448(gp)
  808dd4:	10ff962e 	bgeu	r2,r3,808c30 <_malloc_r+0x3fc>
  808dd8:	d0e72615 	stw	r3,-25448(gp)
  808ddc:	003f9406 	br	808c30 <_malloc_r+0x3fc>
  808de0:	00800104 	movi	r2,4
  808de4:	11001e36 	bltu	r2,r4,808e60 <_malloc_r+0x62c>
  808de8:	2804d1ba 	srli	r2,r5,6
  808dec:	11000e04 	addi	r4,r2,56
  808df0:	200690fa 	slli	r3,r4,3
  808df4:	003fc506 	br	808d0c <_malloc_r+0x4d8>
  808df8:	00815504 	movi	r2,1364
  808dfc:	10c01d2e 	bgeu	r2,r3,808e74 <_malloc_r+0x640>
  808e00:	01801f84 	movi	r6,126
  808e04:	0080fc04 	movi	r2,1008
  808e08:	003eb706 	br	8088e8 <_malloc_r+0xb4>
  808e0c:	00800204 	movi	r2,8
  808e10:	10cbc83a 	sub	r5,r2,r3
  808e14:	2169883a 	add	r20,r4,r5
  808e18:	003f9e06 	br	808c94 <_malloc_r+0x460>
  808e1c:	00bffe04 	movi	r2,-8
  808e20:	a93ffd04 	addi	r4,r21,-12
  808e24:	2088703a 	and	r4,r4,r2
  808e28:	b10b883a 	add	r5,r22,r4
  808e2c:	00c00144 	movi	r3,5
  808e30:	28c00215 	stw	r3,8(r5)
  808e34:	28c00115 	stw	r3,4(r5)
  808e38:	b0800117 	ldw	r2,4(r22)
  808e3c:	1080004c 	andi	r2,r2,1
  808e40:	2084b03a 	or	r2,r4,r2
  808e44:	b0800115 	stw	r2,4(r22)
  808e48:	313fdd2e 	bgeu	r6,r4,808dc0 <_malloc_r+0x58c>
  808e4c:	b1400204 	addi	r5,r22,8
  808e50:	9009883a 	mov	r4,r18
  808e54:	0807cac0 	call	807cac <_free_r>
  808e58:	e4000217 	ldw	r16,8(fp)
  808e5c:	003fd806 	br	808dc0 <_malloc_r+0x58c>
  808e60:	00800504 	movi	r2,20
  808e64:	11001536 	bltu	r2,r4,808ebc <_malloc_r+0x688>
  808e68:	210016c4 	addi	r4,r4,91
  808e6c:	200690fa 	slli	r3,r4,3
  808e70:	003fa606 	br	808d0c <_malloc_r+0x4d8>
  808e74:	8804d4ba 	srli	r2,r17,18
  808e78:	11801f04 	addi	r6,r2,124
  808e7c:	300490fa 	slli	r2,r6,3
  808e80:	003e9906 	br	8088e8 <_malloc_r+0xb4>
  808e84:	2009d0ba 	srai	r4,r4,2
  808e88:	01402074 	movhi	r5,129
  808e8c:	2949e704 	addi	r5,r5,10140
  808e90:	00c00044 	movi	r3,1
  808e94:	28800117 	ldw	r2,4(r5)
  808e98:	1906983a 	sll	r3,r3,r4
  808e9c:	10c4b03a 	or	r2,r2,r3
  808ea0:	28800115 	stw	r2,4(r5)
  808ea4:	003fa306 	br	808d34 <_malloc_r+0x500>
  808ea8:	0027883a 	mov	r19,zero
  808eac:	00c00044 	movi	r3,1
  808eb0:	003f8606 	br	808ccc <_malloc_r+0x498>
  808eb4:	d1200f15 	stw	r4,-32708(gp)
  808eb8:	003f7306 	br	808c88 <_malloc_r+0x454>
  808ebc:	00801504 	movi	r2,84
  808ec0:	11001936 	bltu	r2,r4,808f28 <_malloc_r+0x6f4>
  808ec4:	2804d33a 	srli	r2,r5,12
  808ec8:	11001b84 	addi	r4,r2,110
  808ecc:	200690fa 	slli	r3,r4,3
  808ed0:	003f8e06 	br	808d0c <_malloc_r+0x4d8>
  808ed4:	480b883a 	mov	r5,r9
  808ed8:	6807883a 	mov	r3,r13
  808edc:	288000cc 	andi	r2,r5,3
  808ee0:	18fffe04 	addi	r3,r3,-8
  808ee4:	297fffc4 	addi	r5,r5,-1
  808ee8:	10001526 	beq	r2,zero,808f40 <_malloc_r+0x70c>
  808eec:	18800217 	ldw	r2,8(r3)
  808ef0:	10fffa26 	beq	r2,r3,808edc <_malloc_r+0x6a8>
  808ef4:	2109883a 	add	r4,r4,r4
  808ef8:	393f1e36 	bltu	r7,r4,808b74 <_malloc_r+0x340>
  808efc:	203f1d26 	beq	r4,zero,808b74 <_malloc_r+0x340>
  808f00:	21c4703a 	and	r2,r4,r7
  808f04:	10000226 	beq	r2,zero,808f10 <_malloc_r+0x6dc>
  808f08:	6013883a 	mov	r9,r12
  808f0c:	003ee106 	br	808a94 <_malloc_r+0x260>
  808f10:	2109883a 	add	r4,r4,r4
  808f14:	3904703a 	and	r2,r7,r4
  808f18:	63000104 	addi	r12,r12,4
  808f1c:	103ffc26 	beq	r2,zero,808f10 <_malloc_r+0x6dc>
  808f20:	6013883a 	mov	r9,r12
  808f24:	003edb06 	br	808a94 <_malloc_r+0x260>
  808f28:	00805504 	movi	r2,340
  808f2c:	11000836 	bltu	r2,r4,808f50 <_malloc_r+0x71c>
  808f30:	2804d3fa 	srli	r2,r5,15
  808f34:	11001dc4 	addi	r4,r2,119
  808f38:	200690fa 	slli	r3,r4,3
  808f3c:	003f7306 	br	808d0c <_malloc_r+0x4d8>
  808f40:	0104303a 	nor	r2,zero,r4
  808f44:	388e703a 	and	r7,r7,r2
  808f48:	e1c00115 	stw	r7,4(fp)
  808f4c:	003fe906 	br	808ef4 <_malloc_r+0x6c0>
  808f50:	00815504 	movi	r2,1364
  808f54:	1100032e 	bgeu	r2,r4,808f64 <_malloc_r+0x730>
  808f58:	01001f84 	movi	r4,126
  808f5c:	00c0fc04 	movi	r3,1008
  808f60:	003f6a06 	br	808d0c <_malloc_r+0x4d8>
  808f64:	2804d4ba 	srli	r2,r5,18
  808f68:	11001f04 	addi	r4,r2,124
  808f6c:	200690fa 	slli	r3,r4,3
  808f70:	003f6606 	br	808d0c <_malloc_r+0x4d8>

00808f74 <memchr>:
  808f74:	008000c4 	movi	r2,3
  808f78:	29403fcc 	andi	r5,r5,255
  808f7c:	2007883a 	mov	r3,r4
  808f80:	1180022e 	bgeu	r2,r6,808f8c <memchr+0x18>
  808f84:	2084703a 	and	r2,r4,r2
  808f88:	10000b26 	beq	r2,zero,808fb8 <memchr+0x44>
  808f8c:	313fffc4 	addi	r4,r6,-1
  808f90:	3000051e 	bne	r6,zero,808fa8 <memchr+0x34>
  808f94:	00002c06 	br	809048 <memchr+0xd4>
  808f98:	213fffc4 	addi	r4,r4,-1
  808f9c:	00bfffc4 	movi	r2,-1
  808fa0:	18c00044 	addi	r3,r3,1
  808fa4:	20802826 	beq	r4,r2,809048 <memchr+0xd4>
  808fa8:	18800003 	ldbu	r2,0(r3)
  808fac:	28bffa1e 	bne	r5,r2,808f98 <memchr+0x24>
  808fb0:	1805883a 	mov	r2,r3
  808fb4:	f800283a 	ret
  808fb8:	0011883a 	mov	r8,zero
  808fbc:	0007883a 	mov	r3,zero
  808fc0:	01c00104 	movi	r7,4
  808fc4:	4004923a 	slli	r2,r8,8
  808fc8:	18c00044 	addi	r3,r3,1
  808fcc:	1151883a 	add	r8,r2,r5
  808fd0:	19fffc1e 	bne	r3,r7,808fc4 <memchr+0x50>
  808fd4:	02bfbff4 	movhi	r10,65279
  808fd8:	52bfbfc4 	addi	r10,r10,-257
  808fdc:	02602074 	movhi	r9,32897
  808fe0:	4a602004 	addi	r9,r9,-32640
  808fe4:	02c000c4 	movi	r11,3
  808fe8:	20800017 	ldw	r2,0(r4)
  808fec:	31bfff04 	addi	r6,r6,-4
  808ff0:	200f883a 	mov	r7,r4
  808ff4:	1204f03a 	xor	r2,r2,r8
  808ff8:	1287883a 	add	r3,r2,r10
  808ffc:	1a46703a 	and	r3,r3,r9
  809000:	0084303a 	nor	r2,zero,r2
  809004:	10c4703a 	and	r2,r2,r3
  809008:	10000b26 	beq	r2,zero,809038 <memchr+0xc4>
  80900c:	20800003 	ldbu	r2,0(r4)
  809010:	28800f26 	beq	r5,r2,809050 <memchr+0xdc>
  809014:	20800043 	ldbu	r2,1(r4)
  809018:	21c00044 	addi	r7,r4,1
  80901c:	28800c26 	beq	r5,r2,809050 <memchr+0xdc>
  809020:	20800083 	ldbu	r2,2(r4)
  809024:	21c00084 	addi	r7,r4,2
  809028:	28800926 	beq	r5,r2,809050 <memchr+0xdc>
  80902c:	208000c3 	ldbu	r2,3(r4)
  809030:	21c000c4 	addi	r7,r4,3
  809034:	28800626 	beq	r5,r2,809050 <memchr+0xdc>
  809038:	21000104 	addi	r4,r4,4
  80903c:	59bfea36 	bltu	r11,r6,808fe8 <memchr+0x74>
  809040:	2007883a 	mov	r3,r4
  809044:	003fd106 	br	808f8c <memchr+0x18>
  809048:	0005883a 	mov	r2,zero
  80904c:	f800283a 	ret
  809050:	3805883a 	mov	r2,r7
  809054:	f800283a 	ret

00809058 <memcpy>:
  809058:	01c003c4 	movi	r7,15
  80905c:	2007883a 	mov	r3,r4
  809060:	3980032e 	bgeu	r7,r6,809070 <memcpy+0x18>
  809064:	2904b03a 	or	r2,r5,r4
  809068:	108000cc 	andi	r2,r2,3
  80906c:	10000926 	beq	r2,zero,809094 <memcpy+0x3c>
  809070:	30000626 	beq	r6,zero,80908c <memcpy+0x34>
  809074:	30cd883a 	add	r6,r6,r3
  809078:	28800003 	ldbu	r2,0(r5)
  80907c:	29400044 	addi	r5,r5,1
  809080:	18800005 	stb	r2,0(r3)
  809084:	18c00044 	addi	r3,r3,1
  809088:	30fffb1e 	bne	r6,r3,809078 <memcpy+0x20>
  80908c:	2005883a 	mov	r2,r4
  809090:	f800283a 	ret
  809094:	3811883a 	mov	r8,r7
  809098:	200f883a 	mov	r7,r4
  80909c:	28c00017 	ldw	r3,0(r5)
  8090a0:	31bffc04 	addi	r6,r6,-16
  8090a4:	38c00015 	stw	r3,0(r7)
  8090a8:	28800117 	ldw	r2,4(r5)
  8090ac:	38800115 	stw	r2,4(r7)
  8090b0:	28c00217 	ldw	r3,8(r5)
  8090b4:	38c00215 	stw	r3,8(r7)
  8090b8:	28800317 	ldw	r2,12(r5)
  8090bc:	29400404 	addi	r5,r5,16
  8090c0:	38800315 	stw	r2,12(r7)
  8090c4:	39c00404 	addi	r7,r7,16
  8090c8:	41bff436 	bltu	r8,r6,80909c <memcpy+0x44>
  8090cc:	008000c4 	movi	r2,3
  8090d0:	1180072e 	bgeu	r2,r6,8090f0 <memcpy+0x98>
  8090d4:	1007883a 	mov	r3,r2
  8090d8:	28800017 	ldw	r2,0(r5)
  8090dc:	31bfff04 	addi	r6,r6,-4
  8090e0:	29400104 	addi	r5,r5,4
  8090e4:	38800015 	stw	r2,0(r7)
  8090e8:	39c00104 	addi	r7,r7,4
  8090ec:	19bffa36 	bltu	r3,r6,8090d8 <memcpy+0x80>
  8090f0:	3807883a 	mov	r3,r7
  8090f4:	003fde06 	br	809070 <memcpy+0x18>

008090f8 <memmove>:
  8090f8:	2807883a 	mov	r3,r5
  8090fc:	2011883a 	mov	r8,r4
  809100:	29000c2e 	bgeu	r5,r4,809134 <memmove+0x3c>
  809104:	298f883a 	add	r7,r5,r6
  809108:	21c00a2e 	bgeu	r4,r7,809134 <memmove+0x3c>
  80910c:	30000726 	beq	r6,zero,80912c <memmove+0x34>
  809110:	2187883a 	add	r3,r4,r6
  809114:	198dc83a 	sub	r6,r3,r6
  809118:	39ffffc4 	addi	r7,r7,-1
  80911c:	38800003 	ldbu	r2,0(r7)
  809120:	18ffffc4 	addi	r3,r3,-1
  809124:	18800005 	stb	r2,0(r3)
  809128:	19bffb1e 	bne	r3,r6,809118 <memmove+0x20>
  80912c:	2005883a 	mov	r2,r4
  809130:	f800283a 	ret
  809134:	01c003c4 	movi	r7,15
  809138:	39800a36 	bltu	r7,r6,809164 <memmove+0x6c>
  80913c:	303ffb26 	beq	r6,zero,80912c <memmove+0x34>
  809140:	400f883a 	mov	r7,r8
  809144:	320d883a 	add	r6,r6,r8
  809148:	28800003 	ldbu	r2,0(r5)
  80914c:	29400044 	addi	r5,r5,1
  809150:	38800005 	stb	r2,0(r7)
  809154:	39c00044 	addi	r7,r7,1
  809158:	39bffb1e 	bne	r7,r6,809148 <memmove+0x50>
  80915c:	2005883a 	mov	r2,r4
  809160:	f800283a 	ret
  809164:	1904b03a 	or	r2,r3,r4
  809168:	108000cc 	andi	r2,r2,3
  80916c:	103ff31e 	bne	r2,zero,80913c <memmove+0x44>
  809170:	3811883a 	mov	r8,r7
  809174:	180b883a 	mov	r5,r3
  809178:	200f883a 	mov	r7,r4
  80917c:	28c00017 	ldw	r3,0(r5)
  809180:	31bffc04 	addi	r6,r6,-16
  809184:	38c00015 	stw	r3,0(r7)
  809188:	28800117 	ldw	r2,4(r5)
  80918c:	38800115 	stw	r2,4(r7)
  809190:	28c00217 	ldw	r3,8(r5)
  809194:	38c00215 	stw	r3,8(r7)
  809198:	28800317 	ldw	r2,12(r5)
  80919c:	29400404 	addi	r5,r5,16
  8091a0:	38800315 	stw	r2,12(r7)
  8091a4:	39c00404 	addi	r7,r7,16
  8091a8:	41bff436 	bltu	r8,r6,80917c <memmove+0x84>
  8091ac:	008000c4 	movi	r2,3
  8091b0:	1180072e 	bgeu	r2,r6,8091d0 <memmove+0xd8>
  8091b4:	1007883a 	mov	r3,r2
  8091b8:	28800017 	ldw	r2,0(r5)
  8091bc:	31bfff04 	addi	r6,r6,-4
  8091c0:	29400104 	addi	r5,r5,4
  8091c4:	38800015 	stw	r2,0(r7)
  8091c8:	39c00104 	addi	r7,r7,4
  8091cc:	19bffa36 	bltu	r3,r6,8091b8 <memmove+0xc0>
  8091d0:	3811883a 	mov	r8,r7
  8091d4:	003fd906 	br	80913c <memmove+0x44>

008091d8 <memset>:
  8091d8:	008000c4 	movi	r2,3
  8091dc:	29403fcc 	andi	r5,r5,255
  8091e0:	2007883a 	mov	r3,r4
  8091e4:	1180022e 	bgeu	r2,r6,8091f0 <memset+0x18>
  8091e8:	2084703a 	and	r2,r4,r2
  8091ec:	10000826 	beq	r2,zero,809210 <memset+0x38>
  8091f0:	30000526 	beq	r6,zero,809208 <memset+0x30>
  8091f4:	2805883a 	mov	r2,r5
  8091f8:	30cd883a 	add	r6,r6,r3
  8091fc:	18800005 	stb	r2,0(r3)
  809200:	18c00044 	addi	r3,r3,1
  809204:	19bffd1e 	bne	r3,r6,8091fc <memset+0x24>
  809208:	2005883a 	mov	r2,r4
  80920c:	f800283a 	ret
  809210:	2804923a 	slli	r2,r5,8
  809214:	020003c4 	movi	r8,15
  809218:	200f883a 	mov	r7,r4
  80921c:	2884b03a 	or	r2,r5,r2
  809220:	1006943a 	slli	r3,r2,16
  809224:	10c6b03a 	or	r3,r2,r3
  809228:	41800a2e 	bgeu	r8,r6,809254 <memset+0x7c>
  80922c:	4005883a 	mov	r2,r8
  809230:	31bffc04 	addi	r6,r6,-16
  809234:	38c00015 	stw	r3,0(r7)
  809238:	38c00115 	stw	r3,4(r7)
  80923c:	38c00215 	stw	r3,8(r7)
  809240:	38c00315 	stw	r3,12(r7)
  809244:	39c00404 	addi	r7,r7,16
  809248:	11bff936 	bltu	r2,r6,809230 <memset+0x58>
  80924c:	008000c4 	movi	r2,3
  809250:	1180052e 	bgeu	r2,r6,809268 <memset+0x90>
  809254:	31bfff04 	addi	r6,r6,-4
  809258:	008000c4 	movi	r2,3
  80925c:	38c00015 	stw	r3,0(r7)
  809260:	39c00104 	addi	r7,r7,4
  809264:	11bffb36 	bltu	r2,r6,809254 <memset+0x7c>
  809268:	3807883a 	mov	r3,r7
  80926c:	003fe006 	br	8091f0 <memset+0x18>

00809270 <_Bfree>:
  809270:	28000826 	beq	r5,zero,809294 <_Bfree+0x24>
  809274:	28800117 	ldw	r2,4(r5)
  809278:	21001317 	ldw	r4,76(r4)
  80927c:	1085883a 	add	r2,r2,r2
  809280:	1085883a 	add	r2,r2,r2
  809284:	1105883a 	add	r2,r2,r4
  809288:	10c00017 	ldw	r3,0(r2)
  80928c:	28c00015 	stw	r3,0(r5)
  809290:	11400015 	stw	r5,0(r2)
  809294:	f800283a 	ret

00809298 <__hi0bits>:
  809298:	20bfffec 	andhi	r2,r4,65535
  80929c:	10001426 	beq	r2,zero,8092f0 <__hi0bits+0x58>
  8092a0:	0007883a 	mov	r3,zero
  8092a4:	20bfc02c 	andhi	r2,r4,65280
  8092a8:	1000021e 	bne	r2,zero,8092b4 <__hi0bits+0x1c>
  8092ac:	2008923a 	slli	r4,r4,8
  8092b0:	18c00204 	addi	r3,r3,8
  8092b4:	20bc002c 	andhi	r2,r4,61440
  8092b8:	1000021e 	bne	r2,zero,8092c4 <__hi0bits+0x2c>
  8092bc:	2008913a 	slli	r4,r4,4
  8092c0:	18c00104 	addi	r3,r3,4
  8092c4:	20b0002c 	andhi	r2,r4,49152
  8092c8:	1000031e 	bne	r2,zero,8092d8 <__hi0bits+0x40>
  8092cc:	2105883a 	add	r2,r4,r4
  8092d0:	18c00084 	addi	r3,r3,2
  8092d4:	1089883a 	add	r4,r2,r2
  8092d8:	20000316 	blt	r4,zero,8092e8 <__hi0bits+0x50>
  8092dc:	2090002c 	andhi	r2,r4,16384
  8092e0:	10000626 	beq	r2,zero,8092fc <__hi0bits+0x64>
  8092e4:	18c00044 	addi	r3,r3,1
  8092e8:	1805883a 	mov	r2,r3
  8092ec:	f800283a 	ret
  8092f0:	2008943a 	slli	r4,r4,16
  8092f4:	00c00404 	movi	r3,16
  8092f8:	003fea06 	br	8092a4 <__hi0bits+0xc>
  8092fc:	00c00804 	movi	r3,32
  809300:	1805883a 	mov	r2,r3
  809304:	f800283a 	ret

00809308 <__lo0bits>:
  809308:	20c00017 	ldw	r3,0(r4)
  80930c:	188001cc 	andi	r2,r3,7
  809310:	10000a26 	beq	r2,zero,80933c <__lo0bits+0x34>
  809314:	1880004c 	andi	r2,r3,1
  809318:	1005003a 	cmpeq	r2,r2,zero
  80931c:	10002126 	beq	r2,zero,8093a4 <__lo0bits+0x9c>
  809320:	1880008c 	andi	r2,r3,2
  809324:	1000251e 	bne	r2,zero,8093bc <__lo0bits+0xb4>
  809328:	1804d0ba 	srli	r2,r3,2
  80932c:	01400084 	movi	r5,2
  809330:	20800015 	stw	r2,0(r4)
  809334:	2805883a 	mov	r2,r5
  809338:	f800283a 	ret
  80933c:	18bfffcc 	andi	r2,r3,65535
  809340:	10001526 	beq	r2,zero,809398 <__lo0bits+0x90>
  809344:	000b883a 	mov	r5,zero
  809348:	18803fcc 	andi	r2,r3,255
  80934c:	1000021e 	bne	r2,zero,809358 <__lo0bits+0x50>
  809350:	1806d23a 	srli	r3,r3,8
  809354:	29400204 	addi	r5,r5,8
  809358:	188003cc 	andi	r2,r3,15
  80935c:	1000021e 	bne	r2,zero,809368 <__lo0bits+0x60>
  809360:	1806d13a 	srli	r3,r3,4
  809364:	29400104 	addi	r5,r5,4
  809368:	188000cc 	andi	r2,r3,3
  80936c:	1000021e 	bne	r2,zero,809378 <__lo0bits+0x70>
  809370:	1806d0ba 	srli	r3,r3,2
  809374:	29400084 	addi	r5,r5,2
  809378:	1880004c 	andi	r2,r3,1
  80937c:	1000031e 	bne	r2,zero,80938c <__lo0bits+0x84>
  809380:	1806d07a 	srli	r3,r3,1
  809384:	18000a26 	beq	r3,zero,8093b0 <__lo0bits+0xa8>
  809388:	29400044 	addi	r5,r5,1
  80938c:	2805883a 	mov	r2,r5
  809390:	20c00015 	stw	r3,0(r4)
  809394:	f800283a 	ret
  809398:	1806d43a 	srli	r3,r3,16
  80939c:	01400404 	movi	r5,16
  8093a0:	003fe906 	br	809348 <__lo0bits+0x40>
  8093a4:	000b883a 	mov	r5,zero
  8093a8:	2805883a 	mov	r2,r5
  8093ac:	f800283a 	ret
  8093b0:	01400804 	movi	r5,32
  8093b4:	2805883a 	mov	r2,r5
  8093b8:	f800283a 	ret
  8093bc:	1804d07a 	srli	r2,r3,1
  8093c0:	01400044 	movi	r5,1
  8093c4:	20800015 	stw	r2,0(r4)
  8093c8:	003fda06 	br	809334 <__lo0bits+0x2c>

008093cc <__mcmp>:
  8093cc:	20800417 	ldw	r2,16(r4)
  8093d0:	28c00417 	ldw	r3,16(r5)
  8093d4:	10cfc83a 	sub	r7,r2,r3
  8093d8:	38000c1e 	bne	r7,zero,80940c <__mcmp+0x40>
  8093dc:	18c5883a 	add	r2,r3,r3
  8093e0:	1085883a 	add	r2,r2,r2
  8093e4:	10c00504 	addi	r3,r2,20
  8093e8:	21000504 	addi	r4,r4,20
  8093ec:	28cb883a 	add	r5,r5,r3
  8093f0:	2085883a 	add	r2,r4,r2
  8093f4:	10bfff04 	addi	r2,r2,-4
  8093f8:	297fff04 	addi	r5,r5,-4
  8093fc:	11800017 	ldw	r6,0(r2)
  809400:	28c00017 	ldw	r3,0(r5)
  809404:	30c0031e 	bne	r6,r3,809414 <__mcmp+0x48>
  809408:	20bffa36 	bltu	r4,r2,8093f4 <__mcmp+0x28>
  80940c:	3805883a 	mov	r2,r7
  809410:	f800283a 	ret
  809414:	30c00336 	bltu	r6,r3,809424 <__mcmp+0x58>
  809418:	01c00044 	movi	r7,1
  80941c:	3805883a 	mov	r2,r7
  809420:	f800283a 	ret
  809424:	01ffffc4 	movi	r7,-1
  809428:	003ff806 	br	80940c <__mcmp+0x40>

0080942c <__ulp>:
  80942c:	295ffc2c 	andhi	r5,r5,32752
  809430:	013f3034 	movhi	r4,64704
  809434:	290b883a 	add	r5,r5,r4
  809438:	0145c83a 	sub	r2,zero,r5
  80943c:	1007d53a 	srai	r3,r2,20
  809440:	000d883a 	mov	r6,zero
  809444:	0140040e 	bge	zero,r5,809458 <__ulp+0x2c>
  809448:	280f883a 	mov	r7,r5
  80944c:	3807883a 	mov	r3,r7
  809450:	3005883a 	mov	r2,r6
  809454:	f800283a 	ret
  809458:	008004c4 	movi	r2,19
  80945c:	193ffb04 	addi	r4,r3,-20
  809460:	10c00c0e 	bge	r2,r3,809494 <__ulp+0x68>
  809464:	008007c4 	movi	r2,31
  809468:	1107c83a 	sub	r3,r2,r4
  80946c:	00800784 	movi	r2,30
  809470:	01400044 	movi	r5,1
  809474:	11000216 	blt	r2,r4,809480 <__ulp+0x54>
  809478:	00800044 	movi	r2,1
  80947c:	10ca983a 	sll	r5,r2,r3
  809480:	000f883a 	mov	r7,zero
  809484:	280d883a 	mov	r6,r5
  809488:	3807883a 	mov	r3,r7
  80948c:	3005883a 	mov	r2,r6
  809490:	f800283a 	ret
  809494:	00800234 	movhi	r2,8
  809498:	10cfd83a 	sra	r7,r2,r3
  80949c:	000d883a 	mov	r6,zero
  8094a0:	3005883a 	mov	r2,r6
  8094a4:	3807883a 	mov	r3,r7
  8094a8:	f800283a 	ret

008094ac <__b2d>:
  8094ac:	20800417 	ldw	r2,16(r4)
  8094b0:	defff904 	addi	sp,sp,-28
  8094b4:	dd000415 	stw	r20,16(sp)
  8094b8:	1085883a 	add	r2,r2,r2
  8094bc:	25000504 	addi	r20,r4,20
  8094c0:	1085883a 	add	r2,r2,r2
  8094c4:	dc000015 	stw	r16,0(sp)
  8094c8:	a0a1883a 	add	r16,r20,r2
  8094cc:	dd400515 	stw	r21,20(sp)
  8094d0:	857fff17 	ldw	r21,-4(r16)
  8094d4:	dc400115 	stw	r17,4(sp)
  8094d8:	dfc00615 	stw	ra,24(sp)
  8094dc:	a809883a 	mov	r4,r21
  8094e0:	2823883a 	mov	r17,r5
  8094e4:	dcc00315 	stw	r19,12(sp)
  8094e8:	dc800215 	stw	r18,8(sp)
  8094ec:	08092980 	call	809298 <__hi0bits>
  8094f0:	100b883a 	mov	r5,r2
  8094f4:	00800804 	movi	r2,32
  8094f8:	1145c83a 	sub	r2,r2,r5
  8094fc:	88800015 	stw	r2,0(r17)
  809500:	00800284 	movi	r2,10
  809504:	80ffff04 	addi	r3,r16,-4
  809508:	11401416 	blt	r2,r5,80955c <__b2d+0xb0>
  80950c:	008002c4 	movi	r2,11
  809510:	1149c83a 	sub	r4,r2,r5
  809514:	a0c02736 	bltu	r20,r3,8095b4 <__b2d+0x108>
  809518:	000d883a 	mov	r6,zero
  80951c:	28800544 	addi	r2,r5,21
  809520:	a906d83a 	srl	r3,r21,r4
  809524:	a884983a 	sll	r2,r21,r2
  809528:	1ccffc34 	orhi	r19,r3,16368
  80952c:	11a4b03a 	or	r18,r2,r6
  809530:	9005883a 	mov	r2,r18
  809534:	9807883a 	mov	r3,r19
  809538:	dfc00617 	ldw	ra,24(sp)
  80953c:	dd400517 	ldw	r21,20(sp)
  809540:	dd000417 	ldw	r20,16(sp)
  809544:	dcc00317 	ldw	r19,12(sp)
  809548:	dc800217 	ldw	r18,8(sp)
  80954c:	dc400117 	ldw	r17,4(sp)
  809550:	dc000017 	ldw	r16,0(sp)
  809554:	dec00704 	addi	sp,sp,28
  809558:	f800283a 	ret
  80955c:	a0c00e36 	bltu	r20,r3,809598 <__b2d+0xec>
  809560:	293ffd44 	addi	r4,r5,-11
  809564:	000d883a 	mov	r6,zero
  809568:	20000f26 	beq	r4,zero,8095a8 <__b2d+0xfc>
  80956c:	00800804 	movi	r2,32
  809570:	110bc83a 	sub	r5,r2,r4
  809574:	a0c01236 	bltu	r20,r3,8095c0 <__b2d+0x114>
  809578:	000f883a 	mov	r7,zero
  80957c:	a904983a 	sll	r2,r21,r4
  809580:	3146d83a 	srl	r3,r6,r5
  809584:	3108983a 	sll	r4,r6,r4
  809588:	108ffc34 	orhi	r2,r2,16368
  80958c:	18a6b03a 	or	r19,r3,r2
  809590:	3924b03a 	or	r18,r7,r4
  809594:	003fe606 	br	809530 <__b2d+0x84>
  809598:	293ffd44 	addi	r4,r5,-11
  80959c:	81bffe17 	ldw	r6,-8(r16)
  8095a0:	80fffe04 	addi	r3,r16,-8
  8095a4:	203ff11e 	bne	r4,zero,80956c <__b2d+0xc0>
  8095a8:	accffc34 	orhi	r19,r21,16368
  8095ac:	3025883a 	mov	r18,r6
  8095b0:	003fdf06 	br	809530 <__b2d+0x84>
  8095b4:	18bfff17 	ldw	r2,-4(r3)
  8095b8:	110cd83a 	srl	r6,r2,r4
  8095bc:	003fd706 	br	80951c <__b2d+0x70>
  8095c0:	18bfff17 	ldw	r2,-4(r3)
  8095c4:	114ed83a 	srl	r7,r2,r5
  8095c8:	003fec06 	br	80957c <__b2d+0xd0>

008095cc <__ratio>:
  8095cc:	defff904 	addi	sp,sp,-28
  8095d0:	dc400215 	stw	r17,8(sp)
  8095d4:	2823883a 	mov	r17,r5
  8095d8:	d80b883a 	mov	r5,sp
  8095dc:	dfc00615 	stw	ra,24(sp)
  8095e0:	dd000515 	stw	r20,20(sp)
  8095e4:	dcc00415 	stw	r19,16(sp)
  8095e8:	dc800315 	stw	r18,12(sp)
  8095ec:	2025883a 	mov	r18,r4
  8095f0:	08094ac0 	call	8094ac <__b2d>
  8095f4:	8809883a 	mov	r4,r17
  8095f8:	d9400104 	addi	r5,sp,4
  8095fc:	1027883a 	mov	r19,r2
  809600:	1829883a 	mov	r20,r3
  809604:	08094ac0 	call	8094ac <__b2d>
  809608:	89000417 	ldw	r4,16(r17)
  80960c:	91c00417 	ldw	r7,16(r18)
  809610:	d9800117 	ldw	r6,4(sp)
  809614:	180b883a 	mov	r5,r3
  809618:	390fc83a 	sub	r7,r7,r4
  80961c:	1009883a 	mov	r4,r2
  809620:	d8800017 	ldw	r2,0(sp)
  809624:	380e917a 	slli	r7,r7,5
  809628:	2011883a 	mov	r8,r4
  80962c:	1185c83a 	sub	r2,r2,r6
  809630:	11c5883a 	add	r2,r2,r7
  809634:	1006953a 	slli	r3,r2,20
  809638:	2813883a 	mov	r9,r5
  80963c:	00800d0e 	bge	zero,r2,809674 <__ratio+0xa8>
  809640:	1d29883a 	add	r20,r3,r20
  809644:	a00b883a 	mov	r5,r20
  809648:	480f883a 	mov	r7,r9
  80964c:	9809883a 	mov	r4,r19
  809650:	400d883a 	mov	r6,r8
  809654:	0802fc00 	call	802fc0 <__divdf3>
  809658:	dfc00617 	ldw	ra,24(sp)
  80965c:	dd000517 	ldw	r20,20(sp)
  809660:	dcc00417 	ldw	r19,16(sp)
  809664:	dc800317 	ldw	r18,12(sp)
  809668:	dc400217 	ldw	r17,8(sp)
  80966c:	dec00704 	addi	sp,sp,28
  809670:	f800283a 	ret
  809674:	28d3c83a 	sub	r9,r5,r3
  809678:	003ff206 	br	809644 <__ratio+0x78>

0080967c <_mprec_log10>:
  80967c:	defffe04 	addi	sp,sp,-8
  809680:	008005c4 	movi	r2,23
  809684:	dc000015 	stw	r16,0(sp)
  809688:	dfc00115 	stw	ra,4(sp)
  80968c:	2021883a 	mov	r16,r4
  809690:	11000c16 	blt	r2,r4,8096c4 <_mprec_log10+0x48>
  809694:	200490fa 	slli	r2,r4,3
  809698:	00c02074 	movhi	r3,129
  80969c:	18c84204 	addi	r3,r3,8456
  8096a0:	10c5883a 	add	r2,r2,r3
  8096a4:	12400117 	ldw	r9,4(r2)
  8096a8:	12000017 	ldw	r8,0(r2)
  8096ac:	4807883a 	mov	r3,r9
  8096b0:	4005883a 	mov	r2,r8
  8096b4:	dfc00117 	ldw	ra,4(sp)
  8096b8:	dc000017 	ldw	r16,0(sp)
  8096bc:	dec00204 	addi	sp,sp,8
  8096c0:	f800283a 	ret
  8096c4:	0011883a 	mov	r8,zero
  8096c8:	024ffc34 	movhi	r9,16368
  8096cc:	0005883a 	mov	r2,zero
  8096d0:	00d00934 	movhi	r3,16420
  8096d4:	480b883a 	mov	r5,r9
  8096d8:	4009883a 	mov	r4,r8
  8096dc:	180f883a 	mov	r7,r3
  8096e0:	100d883a 	mov	r6,r2
  8096e4:	080bb600 	call	80bb60 <__muldf3>
  8096e8:	843fffc4 	addi	r16,r16,-1
  8096ec:	1011883a 	mov	r8,r2
  8096f0:	1813883a 	mov	r9,r3
  8096f4:	803ff51e 	bne	r16,zero,8096cc <_mprec_log10+0x50>
  8096f8:	4005883a 	mov	r2,r8
  8096fc:	4807883a 	mov	r3,r9
  809700:	dfc00117 	ldw	ra,4(sp)
  809704:	dc000017 	ldw	r16,0(sp)
  809708:	dec00204 	addi	sp,sp,8
  80970c:	f800283a 	ret

00809710 <__copybits>:
  809710:	297fffc4 	addi	r5,r5,-1
  809714:	30800417 	ldw	r2,16(r6)
  809718:	280bd17a 	srai	r5,r5,5
  80971c:	31800504 	addi	r6,r6,20
  809720:	1085883a 	add	r2,r2,r2
  809724:	294b883a 	add	r5,r5,r5
  809728:	294b883a 	add	r5,r5,r5
  80972c:	1085883a 	add	r2,r2,r2
  809730:	290b883a 	add	r5,r5,r4
  809734:	3087883a 	add	r3,r6,r2
  809738:	29400104 	addi	r5,r5,4
  80973c:	30c0052e 	bgeu	r6,r3,809754 <__copybits+0x44>
  809740:	30800017 	ldw	r2,0(r6)
  809744:	31800104 	addi	r6,r6,4
  809748:	20800015 	stw	r2,0(r4)
  80974c:	21000104 	addi	r4,r4,4
  809750:	30fffb36 	bltu	r6,r3,809740 <__copybits+0x30>
  809754:	2140032e 	bgeu	r4,r5,809764 <__copybits+0x54>
  809758:	20000015 	stw	zero,0(r4)
  80975c:	21000104 	addi	r4,r4,4
  809760:	217ffd36 	bltu	r4,r5,809758 <__copybits+0x48>
  809764:	f800283a 	ret

00809768 <__any_on>:
  809768:	20800417 	ldw	r2,16(r4)
  80976c:	2807d17a 	srai	r3,r5,5
  809770:	21000504 	addi	r4,r4,20
  809774:	10c00d0e 	bge	r2,r3,8097ac <__any_on+0x44>
  809778:	1085883a 	add	r2,r2,r2
  80977c:	1085883a 	add	r2,r2,r2
  809780:	208d883a 	add	r6,r4,r2
  809784:	2180182e 	bgeu	r4,r6,8097e8 <__any_on+0x80>
  809788:	30bfff17 	ldw	r2,-4(r6)
  80978c:	30ffff04 	addi	r3,r6,-4
  809790:	1000041e 	bne	r2,zero,8097a4 <__any_on+0x3c>
  809794:	20c0142e 	bgeu	r4,r3,8097e8 <__any_on+0x80>
  809798:	18ffff04 	addi	r3,r3,-4
  80979c:	18800017 	ldw	r2,0(r3)
  8097a0:	103ffc26 	beq	r2,zero,809794 <__any_on+0x2c>
  8097a4:	00800044 	movi	r2,1
  8097a8:	f800283a 	ret
  8097ac:	18800a0e 	bge	r3,r2,8097d8 <__any_on+0x70>
  8097b0:	294007cc 	andi	r5,r5,31
  8097b4:	28000826 	beq	r5,zero,8097d8 <__any_on+0x70>
  8097b8:	18c5883a 	add	r2,r3,r3
  8097bc:	1085883a 	add	r2,r2,r2
  8097c0:	208d883a 	add	r6,r4,r2
  8097c4:	30c00017 	ldw	r3,0(r6)
  8097c8:	1944d83a 	srl	r2,r3,r5
  8097cc:	1144983a 	sll	r2,r2,r5
  8097d0:	18bff41e 	bne	r3,r2,8097a4 <__any_on+0x3c>
  8097d4:	003feb06 	br	809784 <__any_on+0x1c>
  8097d8:	18c5883a 	add	r2,r3,r3
  8097dc:	1085883a 	add	r2,r2,r2
  8097e0:	208d883a 	add	r6,r4,r2
  8097e4:	003fe706 	br	809784 <__any_on+0x1c>
  8097e8:	0005883a 	mov	r2,zero
  8097ec:	f800283a 	ret

008097f0 <_Balloc>:
  8097f0:	20c01317 	ldw	r3,76(r4)
  8097f4:	defffb04 	addi	sp,sp,-20
  8097f8:	dcc00315 	stw	r19,12(sp)
  8097fc:	dc800215 	stw	r18,8(sp)
  809800:	dfc00415 	stw	ra,16(sp)
  809804:	2825883a 	mov	r18,r5
  809808:	dc400115 	stw	r17,4(sp)
  80980c:	dc000015 	stw	r16,0(sp)
  809810:	2027883a 	mov	r19,r4
  809814:	01800404 	movi	r6,16
  809818:	01400104 	movi	r5,4
  80981c:	18001726 	beq	r3,zero,80987c <_Balloc+0x8c>
  809820:	01400044 	movi	r5,1
  809824:	9485883a 	add	r2,r18,r18
  809828:	2ca2983a 	sll	r17,r5,r18
  80982c:	1085883a 	add	r2,r2,r2
  809830:	10c7883a 	add	r3,r2,r3
  809834:	1c000017 	ldw	r16,0(r3)
  809838:	8c4d883a 	add	r6,r17,r17
  80983c:	318d883a 	add	r6,r6,r6
  809840:	9809883a 	mov	r4,r19
  809844:	31800504 	addi	r6,r6,20
  809848:	80001226 	beq	r16,zero,809894 <_Balloc+0xa4>
  80984c:	80800017 	ldw	r2,0(r16)
  809850:	18800015 	stw	r2,0(r3)
  809854:	80000415 	stw	zero,16(r16)
  809858:	80000315 	stw	zero,12(r16)
  80985c:	8005883a 	mov	r2,r16
  809860:	dfc00417 	ldw	ra,16(sp)
  809864:	dcc00317 	ldw	r19,12(sp)
  809868:	dc800217 	ldw	r18,8(sp)
  80986c:	dc400117 	ldw	r17,4(sp)
  809870:	dc000017 	ldw	r16,0(sp)
  809874:	dec00504 	addi	sp,sp,20
  809878:	f800283a 	ret
  80987c:	080abb80 	call	80abb8 <_calloc_r>
  809880:	1007883a 	mov	r3,r2
  809884:	0021883a 	mov	r16,zero
  809888:	98801315 	stw	r2,76(r19)
  80988c:	103fe41e 	bne	r2,zero,809820 <_Balloc+0x30>
  809890:	003ff206 	br	80985c <_Balloc+0x6c>
  809894:	080abb80 	call	80abb8 <_calloc_r>
  809898:	103ff026 	beq	r2,zero,80985c <_Balloc+0x6c>
  80989c:	1021883a 	mov	r16,r2
  8098a0:	14800115 	stw	r18,4(r2)
  8098a4:	14400215 	stw	r17,8(r2)
  8098a8:	003fea06 	br	809854 <_Balloc+0x64>

008098ac <__d2b>:
  8098ac:	defff504 	addi	sp,sp,-44
  8098b0:	dcc00515 	stw	r19,20(sp)
  8098b4:	04c00044 	movi	r19,1
  8098b8:	dc000215 	stw	r16,8(sp)
  8098bc:	2821883a 	mov	r16,r5
  8098c0:	980b883a 	mov	r5,r19
  8098c4:	ddc00915 	stw	r23,36(sp)
  8098c8:	dd800815 	stw	r22,32(sp)
  8098cc:	dd400715 	stw	r21,28(sp)
  8098d0:	dd000615 	stw	r20,24(sp)
  8098d4:	dc800415 	stw	r18,16(sp)
  8098d8:	dc400315 	stw	r17,12(sp)
  8098dc:	dfc00a15 	stw	ra,40(sp)
  8098e0:	3023883a 	mov	r17,r6
  8098e4:	382d883a 	mov	r22,r7
  8098e8:	ddc00b17 	ldw	r23,44(sp)
  8098ec:	08097f00 	call	8097f0 <_Balloc>
  8098f0:	1025883a 	mov	r18,r2
  8098f4:	00a00034 	movhi	r2,32768
  8098f8:	10bfffc4 	addi	r2,r2,-1
  8098fc:	8888703a 	and	r4,r17,r2
  809900:	202ad53a 	srli	r21,r4,20
  809904:	00800434 	movhi	r2,16
  809908:	10bfffc4 	addi	r2,r2,-1
  80990c:	8886703a 	and	r3,r17,r2
  809910:	a829003a 	cmpeq	r20,r21,zero
  809914:	800b883a 	mov	r5,r16
  809918:	d8c00115 	stw	r3,4(sp)
  80991c:	94000504 	addi	r16,r18,20
  809920:	a000021e 	bne	r20,zero,80992c <__d2b+0x80>
  809924:	18c00434 	orhi	r3,r3,16
  809928:	d8c00115 	stw	r3,4(sp)
  80992c:	28002726 	beq	r5,zero,8099cc <__d2b+0x120>
  809930:	d809883a 	mov	r4,sp
  809934:	d9400015 	stw	r5,0(sp)
  809938:	08093080 	call	809308 <__lo0bits>
  80993c:	100d883a 	mov	r6,r2
  809940:	10003526 	beq	r2,zero,809a18 <__d2b+0x16c>
  809944:	d8c00117 	ldw	r3,4(sp)
  809948:	00800804 	movi	r2,32
  80994c:	1185c83a 	sub	r2,r2,r6
  809950:	d9000017 	ldw	r4,0(sp)
  809954:	1886983a 	sll	r3,r3,r2
  809958:	1906b03a 	or	r3,r3,r4
  80995c:	90c00515 	stw	r3,20(r18)
  809960:	d8c00117 	ldw	r3,4(sp)
  809964:	1986d83a 	srl	r3,r3,r6
  809968:	d8c00115 	stw	r3,4(sp)
  80996c:	180b003a 	cmpeq	r5,r3,zero
  809970:	00800084 	movi	r2,2
  809974:	114bc83a 	sub	r5,r2,r5
  809978:	80c00115 	stw	r3,4(r16)
  80997c:	91400415 	stw	r5,16(r18)
  809980:	a0001a1e 	bne	r20,zero,8099ec <__d2b+0x140>
  809984:	3545883a 	add	r2,r6,r21
  809988:	10bef344 	addi	r2,r2,-1075
  80998c:	00c00d44 	movi	r3,53
  809990:	b0800015 	stw	r2,0(r22)
  809994:	1987c83a 	sub	r3,r3,r6
  809998:	b8c00015 	stw	r3,0(r23)
  80999c:	9005883a 	mov	r2,r18
  8099a0:	dfc00a17 	ldw	ra,40(sp)
  8099a4:	ddc00917 	ldw	r23,36(sp)
  8099a8:	dd800817 	ldw	r22,32(sp)
  8099ac:	dd400717 	ldw	r21,28(sp)
  8099b0:	dd000617 	ldw	r20,24(sp)
  8099b4:	dcc00517 	ldw	r19,20(sp)
  8099b8:	dc800417 	ldw	r18,16(sp)
  8099bc:	dc400317 	ldw	r17,12(sp)
  8099c0:	dc000217 	ldw	r16,8(sp)
  8099c4:	dec00b04 	addi	sp,sp,44
  8099c8:	f800283a 	ret
  8099cc:	d9000104 	addi	r4,sp,4
  8099d0:	08093080 	call	809308 <__lo0bits>
  8099d4:	11800804 	addi	r6,r2,32
  8099d8:	d8800117 	ldw	r2,4(sp)
  8099dc:	94c00415 	stw	r19,16(r18)
  8099e0:	980b883a 	mov	r5,r19
  8099e4:	90800515 	stw	r2,20(r18)
  8099e8:	a03fe626 	beq	r20,zero,809984 <__d2b+0xd8>
  8099ec:	2945883a 	add	r2,r5,r5
  8099f0:	1085883a 	add	r2,r2,r2
  8099f4:	1405883a 	add	r2,r2,r16
  8099f8:	113fff17 	ldw	r4,-4(r2)
  8099fc:	30fef384 	addi	r3,r6,-1074
  809a00:	2820917a 	slli	r16,r5,5
  809a04:	b0c00015 	stw	r3,0(r22)
  809a08:	08092980 	call	809298 <__hi0bits>
  809a0c:	80a1c83a 	sub	r16,r16,r2
  809a10:	bc000015 	stw	r16,0(r23)
  809a14:	003fe106 	br	80999c <__d2b+0xf0>
  809a18:	d8800017 	ldw	r2,0(sp)
  809a1c:	90800515 	stw	r2,20(r18)
  809a20:	d8c00117 	ldw	r3,4(sp)
  809a24:	003fd106 	br	80996c <__d2b+0xc0>

00809a28 <__mdiff>:
  809a28:	defffb04 	addi	sp,sp,-20
  809a2c:	dc000015 	stw	r16,0(sp)
  809a30:	2821883a 	mov	r16,r5
  809a34:	dc800215 	stw	r18,8(sp)
  809a38:	300b883a 	mov	r5,r6
  809a3c:	2025883a 	mov	r18,r4
  809a40:	8009883a 	mov	r4,r16
  809a44:	dc400115 	stw	r17,4(sp)
  809a48:	dfc00415 	stw	ra,16(sp)
  809a4c:	dcc00315 	stw	r19,12(sp)
  809a50:	3023883a 	mov	r17,r6
  809a54:	08093cc0 	call	8093cc <__mcmp>
  809a58:	10004226 	beq	r2,zero,809b64 <__mdiff+0x13c>
  809a5c:	10005016 	blt	r2,zero,809ba0 <__mdiff+0x178>
  809a60:	0027883a 	mov	r19,zero
  809a64:	81400117 	ldw	r5,4(r16)
  809a68:	9009883a 	mov	r4,r18
  809a6c:	08097f00 	call	8097f0 <_Balloc>
  809a70:	1019883a 	mov	r12,r2
  809a74:	82800417 	ldw	r10,16(r16)
  809a78:	88800417 	ldw	r2,16(r17)
  809a7c:	81800504 	addi	r6,r16,20
  809a80:	5287883a 	add	r3,r10,r10
  809a84:	1085883a 	add	r2,r2,r2
  809a88:	18c7883a 	add	r3,r3,r3
  809a8c:	1085883a 	add	r2,r2,r2
  809a90:	8a000504 	addi	r8,r17,20
  809a94:	64c00315 	stw	r19,12(r12)
  809a98:	30db883a 	add	r13,r6,r3
  809a9c:	4097883a 	add	r11,r8,r2
  809aa0:	61c00504 	addi	r7,r12,20
  809aa4:	0013883a 	mov	r9,zero
  809aa8:	31000017 	ldw	r4,0(r6)
  809aac:	41400017 	ldw	r5,0(r8)
  809ab0:	42000104 	addi	r8,r8,4
  809ab4:	20bfffcc 	andi	r2,r4,65535
  809ab8:	28ffffcc 	andi	r3,r5,65535
  809abc:	10c5c83a 	sub	r2,r2,r3
  809ac0:	1245883a 	add	r2,r2,r9
  809ac4:	2008d43a 	srli	r4,r4,16
  809ac8:	280ad43a 	srli	r5,r5,16
  809acc:	1007d43a 	srai	r3,r2,16
  809ad0:	3880000d 	sth	r2,0(r7)
  809ad4:	2149c83a 	sub	r4,r4,r5
  809ad8:	20c9883a 	add	r4,r4,r3
  809adc:	3900008d 	sth	r4,2(r7)
  809ae0:	31800104 	addi	r6,r6,4
  809ae4:	39c00104 	addi	r7,r7,4
  809ae8:	2013d43a 	srai	r9,r4,16
  809aec:	42ffee36 	bltu	r8,r11,809aa8 <__mdiff+0x80>
  809af0:	33400c2e 	bgeu	r6,r13,809b24 <__mdiff+0xfc>
  809af4:	30800017 	ldw	r2,0(r6)
  809af8:	31800104 	addi	r6,r6,4
  809afc:	10ffffcc 	andi	r3,r2,65535
  809b00:	1a47883a 	add	r3,r3,r9
  809b04:	1004d43a 	srli	r2,r2,16
  809b08:	1809d43a 	srai	r4,r3,16
  809b0c:	38c0000d 	sth	r3,0(r7)
  809b10:	1105883a 	add	r2,r2,r4
  809b14:	3880008d 	sth	r2,2(r7)
  809b18:	1013d43a 	srai	r9,r2,16
  809b1c:	39c00104 	addi	r7,r7,4
  809b20:	337ff436 	bltu	r6,r13,809af4 <__mdiff+0xcc>
  809b24:	38bfff17 	ldw	r2,-4(r7)
  809b28:	38ffff04 	addi	r3,r7,-4
  809b2c:	1000041e 	bne	r2,zero,809b40 <__mdiff+0x118>
  809b30:	18ffff04 	addi	r3,r3,-4
  809b34:	18800017 	ldw	r2,0(r3)
  809b38:	52bfffc4 	addi	r10,r10,-1
  809b3c:	103ffc26 	beq	r2,zero,809b30 <__mdiff+0x108>
  809b40:	6005883a 	mov	r2,r12
  809b44:	62800415 	stw	r10,16(r12)
  809b48:	dfc00417 	ldw	ra,16(sp)
  809b4c:	dcc00317 	ldw	r19,12(sp)
  809b50:	dc800217 	ldw	r18,8(sp)
  809b54:	dc400117 	ldw	r17,4(sp)
  809b58:	dc000017 	ldw	r16,0(sp)
  809b5c:	dec00504 	addi	sp,sp,20
  809b60:	f800283a 	ret
  809b64:	9009883a 	mov	r4,r18
  809b68:	000b883a 	mov	r5,zero
  809b6c:	08097f00 	call	8097f0 <_Balloc>
  809b70:	1019883a 	mov	r12,r2
  809b74:	00800044 	movi	r2,1
  809b78:	60800415 	stw	r2,16(r12)
  809b7c:	6005883a 	mov	r2,r12
  809b80:	60000515 	stw	zero,20(r12)
  809b84:	dfc00417 	ldw	ra,16(sp)
  809b88:	dcc00317 	ldw	r19,12(sp)
  809b8c:	dc800217 	ldw	r18,8(sp)
  809b90:	dc400117 	ldw	r17,4(sp)
  809b94:	dc000017 	ldw	r16,0(sp)
  809b98:	dec00504 	addi	sp,sp,20
  809b9c:	f800283a 	ret
  809ba0:	880d883a 	mov	r6,r17
  809ba4:	04c00044 	movi	r19,1
  809ba8:	8023883a 	mov	r17,r16
  809bac:	3021883a 	mov	r16,r6
  809bb0:	003fac06 	br	809a64 <__mdiff+0x3c>

00809bb4 <__lshift>:
  809bb4:	defff904 	addi	sp,sp,-28
  809bb8:	28800417 	ldw	r2,16(r5)
  809bbc:	dc000015 	stw	r16,0(sp)
  809bc0:	3021d17a 	srai	r16,r6,5
  809bc4:	28c00217 	ldw	r3,8(r5)
  809bc8:	10800044 	addi	r2,r2,1
  809bcc:	dc400115 	stw	r17,4(sp)
  809bd0:	80a3883a 	add	r17,r16,r2
  809bd4:	dd400515 	stw	r21,20(sp)
  809bd8:	dd000415 	stw	r20,16(sp)
  809bdc:	dc800215 	stw	r18,8(sp)
  809be0:	dfc00615 	stw	ra,24(sp)
  809be4:	2825883a 	mov	r18,r5
  809be8:	dcc00315 	stw	r19,12(sp)
  809bec:	3029883a 	mov	r20,r6
  809bf0:	202b883a 	mov	r21,r4
  809bf4:	29400117 	ldw	r5,4(r5)
  809bf8:	1c40030e 	bge	r3,r17,809c08 <__lshift+0x54>
  809bfc:	18c7883a 	add	r3,r3,r3
  809c00:	29400044 	addi	r5,r5,1
  809c04:	1c7ffd16 	blt	r3,r17,809bfc <__lshift+0x48>
  809c08:	a809883a 	mov	r4,r21
  809c0c:	08097f00 	call	8097f0 <_Balloc>
  809c10:	1027883a 	mov	r19,r2
  809c14:	11400504 	addi	r5,r2,20
  809c18:	0400090e 	bge	zero,r16,809c40 <__lshift+0x8c>
  809c1c:	2805883a 	mov	r2,r5
  809c20:	0007883a 	mov	r3,zero
  809c24:	18c00044 	addi	r3,r3,1
  809c28:	10000015 	stw	zero,0(r2)
  809c2c:	10800104 	addi	r2,r2,4
  809c30:	80fffc1e 	bne	r16,r3,809c24 <__lshift+0x70>
  809c34:	8405883a 	add	r2,r16,r16
  809c38:	1085883a 	add	r2,r2,r2
  809c3c:	288b883a 	add	r5,r5,r2
  809c40:	90800417 	ldw	r2,16(r18)
  809c44:	91000504 	addi	r4,r18,20
  809c48:	a18007cc 	andi	r6,r20,31
  809c4c:	1085883a 	add	r2,r2,r2
  809c50:	1085883a 	add	r2,r2,r2
  809c54:	208f883a 	add	r7,r4,r2
  809c58:	30001e26 	beq	r6,zero,809cd4 <__lshift+0x120>
  809c5c:	00800804 	movi	r2,32
  809c60:	1191c83a 	sub	r8,r2,r6
  809c64:	0007883a 	mov	r3,zero
  809c68:	20800017 	ldw	r2,0(r4)
  809c6c:	1184983a 	sll	r2,r2,r6
  809c70:	1884b03a 	or	r2,r3,r2
  809c74:	28800015 	stw	r2,0(r5)
  809c78:	20c00017 	ldw	r3,0(r4)
  809c7c:	21000104 	addi	r4,r4,4
  809c80:	29400104 	addi	r5,r5,4
  809c84:	1a06d83a 	srl	r3,r3,r8
  809c88:	21fff736 	bltu	r4,r7,809c68 <__lshift+0xb4>
  809c8c:	28c00015 	stw	r3,0(r5)
  809c90:	18000126 	beq	r3,zero,809c98 <__lshift+0xe4>
  809c94:	8c400044 	addi	r17,r17,1
  809c98:	88bfffc4 	addi	r2,r17,-1
  809c9c:	98800415 	stw	r2,16(r19)
  809ca0:	a809883a 	mov	r4,r21
  809ca4:	900b883a 	mov	r5,r18
  809ca8:	08092700 	call	809270 <_Bfree>
  809cac:	9805883a 	mov	r2,r19
  809cb0:	dfc00617 	ldw	ra,24(sp)
  809cb4:	dd400517 	ldw	r21,20(sp)
  809cb8:	dd000417 	ldw	r20,16(sp)
  809cbc:	dcc00317 	ldw	r19,12(sp)
  809cc0:	dc800217 	ldw	r18,8(sp)
  809cc4:	dc400117 	ldw	r17,4(sp)
  809cc8:	dc000017 	ldw	r16,0(sp)
  809ccc:	dec00704 	addi	sp,sp,28
  809cd0:	f800283a 	ret
  809cd4:	20800017 	ldw	r2,0(r4)
  809cd8:	21000104 	addi	r4,r4,4
  809cdc:	28800015 	stw	r2,0(r5)
  809ce0:	29400104 	addi	r5,r5,4
  809ce4:	21ffec2e 	bgeu	r4,r7,809c98 <__lshift+0xe4>
  809ce8:	20800017 	ldw	r2,0(r4)
  809cec:	21000104 	addi	r4,r4,4
  809cf0:	28800015 	stw	r2,0(r5)
  809cf4:	29400104 	addi	r5,r5,4
  809cf8:	21fff636 	bltu	r4,r7,809cd4 <__lshift+0x120>
  809cfc:	003fe606 	br	809c98 <__lshift+0xe4>

00809d00 <__multiply>:
  809d00:	defff904 	addi	sp,sp,-28
  809d04:	dcc00315 	stw	r19,12(sp)
  809d08:	dc800215 	stw	r18,8(sp)
  809d0c:	2cc00417 	ldw	r19,16(r5)
  809d10:	34800417 	ldw	r18,16(r6)
  809d14:	dd000415 	stw	r20,16(sp)
  809d18:	dc400115 	stw	r17,4(sp)
  809d1c:	dfc00615 	stw	ra,24(sp)
  809d20:	dd400515 	stw	r21,20(sp)
  809d24:	dc000015 	stw	r16,0(sp)
  809d28:	2823883a 	mov	r17,r5
  809d2c:	3029883a 	mov	r20,r6
  809d30:	9c80040e 	bge	r19,r18,809d44 <__multiply+0x44>
  809d34:	9027883a 	mov	r19,r18
  809d38:	2c800417 	ldw	r18,16(r5)
  809d3c:	2829883a 	mov	r20,r5
  809d40:	3023883a 	mov	r17,r6
  809d44:	88800217 	ldw	r2,8(r17)
  809d48:	9ca1883a 	add	r16,r19,r18
  809d4c:	89400117 	ldw	r5,4(r17)
  809d50:	1400010e 	bge	r2,r16,809d58 <__multiply+0x58>
  809d54:	29400044 	addi	r5,r5,1
  809d58:	08097f00 	call	8097f0 <_Balloc>
  809d5c:	102b883a 	mov	r21,r2
  809d60:	8405883a 	add	r2,r16,r16
  809d64:	1085883a 	add	r2,r2,r2
  809d68:	a9000504 	addi	r4,r21,20
  809d6c:	209d883a 	add	r14,r4,r2
  809d70:	2380042e 	bgeu	r4,r14,809d84 <__multiply+0x84>
  809d74:	2005883a 	mov	r2,r4
  809d78:	10000015 	stw	zero,0(r2)
  809d7c:	10800104 	addi	r2,r2,4
  809d80:	13bffd36 	bltu	r2,r14,809d78 <__multiply+0x78>
  809d84:	9485883a 	add	r2,r18,r18
  809d88:	9cc7883a 	add	r3,r19,r19
  809d8c:	a1800504 	addi	r6,r20,20
  809d90:	1085883a 	add	r2,r2,r2
  809d94:	8b400504 	addi	r13,r17,20
  809d98:	18c7883a 	add	r3,r3,r3
  809d9c:	309f883a 	add	r15,r6,r2
  809da0:	68d7883a 	add	r11,r13,r3
  809da4:	33c03b2e 	bgeu	r6,r15,809e94 <__multiply+0x194>
  809da8:	2019883a 	mov	r12,r4
  809dac:	30800017 	ldw	r2,0(r6)
  809db0:	127fffcc 	andi	r9,r2,65535
  809db4:	48001826 	beq	r9,zero,809e18 <__multiply+0x118>
  809db8:	6811883a 	mov	r8,r13
  809dbc:	600f883a 	mov	r7,r12
  809dc0:	0015883a 	mov	r10,zero
  809dc4:	40c00017 	ldw	r3,0(r8)
  809dc8:	39400017 	ldw	r5,0(r7)
  809dcc:	42000104 	addi	r8,r8,4
  809dd0:	193fffcc 	andi	r4,r3,65535
  809dd4:	4909383a 	mul	r4,r9,r4
  809dd8:	1806d43a 	srli	r3,r3,16
  809ddc:	28bfffcc 	andi	r2,r5,65535
  809de0:	5085883a 	add	r2,r10,r2
  809de4:	2089883a 	add	r4,r4,r2
  809de8:	48c7383a 	mul	r3,r9,r3
  809dec:	280ad43a 	srli	r5,r5,16
  809df0:	2004d43a 	srli	r2,r4,16
  809df4:	3900000d 	sth	r4,0(r7)
  809df8:	1947883a 	add	r3,r3,r5
  809dfc:	10c5883a 	add	r2,r2,r3
  809e00:	3880008d 	sth	r2,2(r7)
  809e04:	1014d43a 	srli	r10,r2,16
  809e08:	39c00104 	addi	r7,r7,4
  809e0c:	42ffed36 	bltu	r8,r11,809dc4 <__multiply+0xc4>
  809e10:	3a800015 	stw	r10,0(r7)
  809e14:	30800017 	ldw	r2,0(r6)
  809e18:	1012d43a 	srli	r9,r2,16
  809e1c:	48001926 	beq	r9,zero,809e84 <__multiply+0x184>
  809e20:	60800017 	ldw	r2,0(r12)
  809e24:	6811883a 	mov	r8,r13
  809e28:	600f883a 	mov	r7,r12
  809e2c:	0015883a 	mov	r10,zero
  809e30:	100b883a 	mov	r5,r2
  809e34:	41000017 	ldw	r4,0(r8)
  809e38:	2806d43a 	srli	r3,r5,16
  809e3c:	3880000d 	sth	r2,0(r7)
  809e40:	20bfffcc 	andi	r2,r4,65535
  809e44:	4885383a 	mul	r2,r9,r2
  809e48:	50c7883a 	add	r3,r10,r3
  809e4c:	2008d43a 	srli	r4,r4,16
  809e50:	10c5883a 	add	r2,r2,r3
  809e54:	3880008d 	sth	r2,2(r7)
  809e58:	39c00104 	addi	r7,r7,4
  809e5c:	39400017 	ldw	r5,0(r7)
  809e60:	4909383a 	mul	r4,r9,r4
  809e64:	1004d43a 	srli	r2,r2,16
  809e68:	28ffffcc 	andi	r3,r5,65535
  809e6c:	20c9883a 	add	r4,r4,r3
  809e70:	1105883a 	add	r2,r2,r4
  809e74:	42000104 	addi	r8,r8,4
  809e78:	1014d43a 	srli	r10,r2,16
  809e7c:	42ffed36 	bltu	r8,r11,809e34 <__multiply+0x134>
  809e80:	38800015 	stw	r2,0(r7)
  809e84:	31800104 	addi	r6,r6,4
  809e88:	33c0022e 	bgeu	r6,r15,809e94 <__multiply+0x194>
  809e8c:	63000104 	addi	r12,r12,4
  809e90:	003fc606 	br	809dac <__multiply+0xac>
  809e94:	0400090e 	bge	zero,r16,809ebc <__multiply+0x1bc>
  809e98:	70bfff17 	ldw	r2,-4(r14)
  809e9c:	70ffff04 	addi	r3,r14,-4
  809ea0:	10000326 	beq	r2,zero,809eb0 <__multiply+0x1b0>
  809ea4:	00000506 	br	809ebc <__multiply+0x1bc>
  809ea8:	18800017 	ldw	r2,0(r3)
  809eac:	1000031e 	bne	r2,zero,809ebc <__multiply+0x1bc>
  809eb0:	843fffc4 	addi	r16,r16,-1
  809eb4:	18ffff04 	addi	r3,r3,-4
  809eb8:	803ffb1e 	bne	r16,zero,809ea8 <__multiply+0x1a8>
  809ebc:	a805883a 	mov	r2,r21
  809ec0:	ac000415 	stw	r16,16(r21)
  809ec4:	dfc00617 	ldw	ra,24(sp)
  809ec8:	dd400517 	ldw	r21,20(sp)
  809ecc:	dd000417 	ldw	r20,16(sp)
  809ed0:	dcc00317 	ldw	r19,12(sp)
  809ed4:	dc800217 	ldw	r18,8(sp)
  809ed8:	dc400117 	ldw	r17,4(sp)
  809edc:	dc000017 	ldw	r16,0(sp)
  809ee0:	dec00704 	addi	sp,sp,28
  809ee4:	f800283a 	ret

00809ee8 <__i2b>:
  809ee8:	defffd04 	addi	sp,sp,-12
  809eec:	dc000015 	stw	r16,0(sp)
  809ef0:	04000044 	movi	r16,1
  809ef4:	dc800115 	stw	r18,4(sp)
  809ef8:	2825883a 	mov	r18,r5
  809efc:	800b883a 	mov	r5,r16
  809f00:	dfc00215 	stw	ra,8(sp)
  809f04:	08097f00 	call	8097f0 <_Balloc>
  809f08:	14000415 	stw	r16,16(r2)
  809f0c:	14800515 	stw	r18,20(r2)
  809f10:	dfc00217 	ldw	ra,8(sp)
  809f14:	dc800117 	ldw	r18,4(sp)
  809f18:	dc000017 	ldw	r16,0(sp)
  809f1c:	dec00304 	addi	sp,sp,12
  809f20:	f800283a 	ret

00809f24 <__multadd>:
  809f24:	defffa04 	addi	sp,sp,-24
  809f28:	dc800215 	stw	r18,8(sp)
  809f2c:	2c800417 	ldw	r18,16(r5)
  809f30:	dd000415 	stw	r20,16(sp)
  809f34:	dcc00315 	stw	r19,12(sp)
  809f38:	dc000015 	stw	r16,0(sp)
  809f3c:	dfc00515 	stw	ra,20(sp)
  809f40:	3821883a 	mov	r16,r7
  809f44:	dc400115 	stw	r17,4(sp)
  809f48:	2827883a 	mov	r19,r5
  809f4c:	2029883a 	mov	r20,r4
  809f50:	2a000504 	addi	r8,r5,20
  809f54:	000f883a 	mov	r7,zero
  809f58:	40800017 	ldw	r2,0(r8)
  809f5c:	39c00044 	addi	r7,r7,1
  809f60:	10ffffcc 	andi	r3,r2,65535
  809f64:	1987383a 	mul	r3,r3,r6
  809f68:	1004d43a 	srli	r2,r2,16
  809f6c:	1c07883a 	add	r3,r3,r16
  809f70:	180ad43a 	srli	r5,r3,16
  809f74:	1185383a 	mul	r2,r2,r6
  809f78:	18ffffcc 	andi	r3,r3,65535
  809f7c:	1145883a 	add	r2,r2,r5
  809f80:	1008943a 	slli	r4,r2,16
  809f84:	1020d43a 	srli	r16,r2,16
  809f88:	20c9883a 	add	r4,r4,r3
  809f8c:	41000015 	stw	r4,0(r8)
  809f90:	42000104 	addi	r8,r8,4
  809f94:	3cbff016 	blt	r7,r18,809f58 <__multadd+0x34>
  809f98:	80000826 	beq	r16,zero,809fbc <__multadd+0x98>
  809f9c:	98800217 	ldw	r2,8(r19)
  809fa0:	90800f0e 	bge	r18,r2,809fe0 <__multadd+0xbc>
  809fa4:	9485883a 	add	r2,r18,r18
  809fa8:	1085883a 	add	r2,r2,r2
  809fac:	14c5883a 	add	r2,r2,r19
  809fb0:	90c00044 	addi	r3,r18,1
  809fb4:	14000515 	stw	r16,20(r2)
  809fb8:	98c00415 	stw	r3,16(r19)
  809fbc:	9805883a 	mov	r2,r19
  809fc0:	dfc00517 	ldw	ra,20(sp)
  809fc4:	dd000417 	ldw	r20,16(sp)
  809fc8:	dcc00317 	ldw	r19,12(sp)
  809fcc:	dc800217 	ldw	r18,8(sp)
  809fd0:	dc400117 	ldw	r17,4(sp)
  809fd4:	dc000017 	ldw	r16,0(sp)
  809fd8:	dec00604 	addi	sp,sp,24
  809fdc:	f800283a 	ret
  809fe0:	99400117 	ldw	r5,4(r19)
  809fe4:	a009883a 	mov	r4,r20
  809fe8:	29400044 	addi	r5,r5,1
  809fec:	08097f00 	call	8097f0 <_Balloc>
  809ff0:	99800417 	ldw	r6,16(r19)
  809ff4:	99400304 	addi	r5,r19,12
  809ff8:	11000304 	addi	r4,r2,12
  809ffc:	318d883a 	add	r6,r6,r6
  80a000:	318d883a 	add	r6,r6,r6
  80a004:	31800204 	addi	r6,r6,8
  80a008:	1023883a 	mov	r17,r2
  80a00c:	08090580 	call	809058 <memcpy>
  80a010:	980b883a 	mov	r5,r19
  80a014:	a009883a 	mov	r4,r20
  80a018:	08092700 	call	809270 <_Bfree>
  80a01c:	8827883a 	mov	r19,r17
  80a020:	003fe006 	br	809fa4 <__multadd+0x80>

0080a024 <__pow5mult>:
  80a024:	defffa04 	addi	sp,sp,-24
  80a028:	308000cc 	andi	r2,r6,3
  80a02c:	dd000415 	stw	r20,16(sp)
  80a030:	dcc00315 	stw	r19,12(sp)
  80a034:	dc000015 	stw	r16,0(sp)
  80a038:	dfc00515 	stw	ra,20(sp)
  80a03c:	dc800215 	stw	r18,8(sp)
  80a040:	dc400115 	stw	r17,4(sp)
  80a044:	3021883a 	mov	r16,r6
  80a048:	2027883a 	mov	r19,r4
  80a04c:	2829883a 	mov	r20,r5
  80a050:	10002b1e 	bne	r2,zero,80a100 <__pow5mult+0xdc>
  80a054:	8025d0ba 	srai	r18,r16,2
  80a058:	90001b26 	beq	r18,zero,80a0c8 <__pow5mult+0xa4>
  80a05c:	9c001217 	ldw	r16,72(r19)
  80a060:	8000081e 	bne	r16,zero,80a084 <__pow5mult+0x60>
  80a064:	00003006 	br	80a128 <__pow5mult+0x104>
  80a068:	800b883a 	mov	r5,r16
  80a06c:	800d883a 	mov	r6,r16
  80a070:	9809883a 	mov	r4,r19
  80a074:	90001426 	beq	r18,zero,80a0c8 <__pow5mult+0xa4>
  80a078:	80800017 	ldw	r2,0(r16)
  80a07c:	10001b26 	beq	r2,zero,80a0ec <__pow5mult+0xc8>
  80a080:	1021883a 	mov	r16,r2
  80a084:	9080004c 	andi	r2,r18,1
  80a088:	1005003a 	cmpeq	r2,r2,zero
  80a08c:	9025d07a 	srai	r18,r18,1
  80a090:	800d883a 	mov	r6,r16
  80a094:	9809883a 	mov	r4,r19
  80a098:	a00b883a 	mov	r5,r20
  80a09c:	103ff21e 	bne	r2,zero,80a068 <__pow5mult+0x44>
  80a0a0:	0809d000 	call	809d00 <__multiply>
  80a0a4:	a00b883a 	mov	r5,r20
  80a0a8:	9809883a 	mov	r4,r19
  80a0ac:	1023883a 	mov	r17,r2
  80a0b0:	08092700 	call	809270 <_Bfree>
  80a0b4:	8829883a 	mov	r20,r17
  80a0b8:	800b883a 	mov	r5,r16
  80a0bc:	800d883a 	mov	r6,r16
  80a0c0:	9809883a 	mov	r4,r19
  80a0c4:	903fec1e 	bne	r18,zero,80a078 <__pow5mult+0x54>
  80a0c8:	a005883a 	mov	r2,r20
  80a0cc:	dfc00517 	ldw	ra,20(sp)
  80a0d0:	dd000417 	ldw	r20,16(sp)
  80a0d4:	dcc00317 	ldw	r19,12(sp)
  80a0d8:	dc800217 	ldw	r18,8(sp)
  80a0dc:	dc400117 	ldw	r17,4(sp)
  80a0e0:	dc000017 	ldw	r16,0(sp)
  80a0e4:	dec00604 	addi	sp,sp,24
  80a0e8:	f800283a 	ret
  80a0ec:	0809d000 	call	809d00 <__multiply>
  80a0f0:	80800015 	stw	r2,0(r16)
  80a0f4:	1021883a 	mov	r16,r2
  80a0f8:	10000015 	stw	zero,0(r2)
  80a0fc:	003fe106 	br	80a084 <__pow5mult+0x60>
  80a100:	1085883a 	add	r2,r2,r2
  80a104:	00c02074 	movhi	r3,129
  80a108:	18c88804 	addi	r3,r3,8736
  80a10c:	1085883a 	add	r2,r2,r2
  80a110:	10c5883a 	add	r2,r2,r3
  80a114:	11bfff17 	ldw	r6,-4(r2)
  80a118:	000f883a 	mov	r7,zero
  80a11c:	0809f240 	call	809f24 <__multadd>
  80a120:	1029883a 	mov	r20,r2
  80a124:	003fcb06 	br	80a054 <__pow5mult+0x30>
  80a128:	9809883a 	mov	r4,r19
  80a12c:	01409c44 	movi	r5,625
  80a130:	0809ee80 	call	809ee8 <__i2b>
  80a134:	98801215 	stw	r2,72(r19)
  80a138:	1021883a 	mov	r16,r2
  80a13c:	10000015 	stw	zero,0(r2)
  80a140:	003fd006 	br	80a084 <__pow5mult+0x60>

0080a144 <__s2b>:
  80a144:	defff904 	addi	sp,sp,-28
  80a148:	dcc00315 	stw	r19,12(sp)
  80a14c:	dc800215 	stw	r18,8(sp)
  80a150:	2827883a 	mov	r19,r5
  80a154:	2025883a 	mov	r18,r4
  80a158:	01400244 	movi	r5,9
  80a15c:	39000204 	addi	r4,r7,8
  80a160:	dd000415 	stw	r20,16(sp)
  80a164:	dc400115 	stw	r17,4(sp)
  80a168:	dfc00615 	stw	ra,24(sp)
  80a16c:	dd400515 	stw	r21,20(sp)
  80a170:	dc000015 	stw	r16,0(sp)
  80a174:	3829883a 	mov	r20,r7
  80a178:	3023883a 	mov	r17,r6
  80a17c:	080c5240 	call	80c524 <__divsi3>
  80a180:	00c00044 	movi	r3,1
  80a184:	1880350e 	bge	r3,r2,80a25c <__s2b+0x118>
  80a188:	000b883a 	mov	r5,zero
  80a18c:	18c7883a 	add	r3,r3,r3
  80a190:	29400044 	addi	r5,r5,1
  80a194:	18bffd16 	blt	r3,r2,80a18c <__s2b+0x48>
  80a198:	9009883a 	mov	r4,r18
  80a19c:	08097f00 	call	8097f0 <_Balloc>
  80a1a0:	1011883a 	mov	r8,r2
  80a1a4:	d8800717 	ldw	r2,28(sp)
  80a1a8:	00c00044 	movi	r3,1
  80a1ac:	01800244 	movi	r6,9
  80a1b0:	40800515 	stw	r2,20(r8)
  80a1b4:	40c00415 	stw	r3,16(r8)
  80a1b8:	3440260e 	bge	r6,r17,80a254 <__s2b+0x110>
  80a1bc:	3021883a 	mov	r16,r6
  80a1c0:	99ab883a 	add	r21,r19,r6
  80a1c4:	9c05883a 	add	r2,r19,r16
  80a1c8:	11c00007 	ldb	r7,0(r2)
  80a1cc:	400b883a 	mov	r5,r8
  80a1d0:	9009883a 	mov	r4,r18
  80a1d4:	39fff404 	addi	r7,r7,-48
  80a1d8:	01800284 	movi	r6,10
  80a1dc:	0809f240 	call	809f24 <__multadd>
  80a1e0:	84000044 	addi	r16,r16,1
  80a1e4:	1011883a 	mov	r8,r2
  80a1e8:	8c3ff61e 	bne	r17,r16,80a1c4 <__s2b+0x80>
  80a1ec:	ac45883a 	add	r2,r21,r17
  80a1f0:	117ffe04 	addi	r5,r2,-8
  80a1f4:	880d883a 	mov	r6,r17
  80a1f8:	35000c0e 	bge	r6,r20,80a22c <__s2b+0xe8>
  80a1fc:	a185c83a 	sub	r2,r20,r6
  80a200:	2821883a 	mov	r16,r5
  80a204:	28a3883a 	add	r17,r5,r2
  80a208:	81c00007 	ldb	r7,0(r16)
  80a20c:	400b883a 	mov	r5,r8
  80a210:	9009883a 	mov	r4,r18
  80a214:	39fff404 	addi	r7,r7,-48
  80a218:	01800284 	movi	r6,10
  80a21c:	0809f240 	call	809f24 <__multadd>
  80a220:	84000044 	addi	r16,r16,1
  80a224:	1011883a 	mov	r8,r2
  80a228:	847ff71e 	bne	r16,r17,80a208 <__s2b+0xc4>
  80a22c:	4005883a 	mov	r2,r8
  80a230:	dfc00617 	ldw	ra,24(sp)
  80a234:	dd400517 	ldw	r21,20(sp)
  80a238:	dd000417 	ldw	r20,16(sp)
  80a23c:	dcc00317 	ldw	r19,12(sp)
  80a240:	dc800217 	ldw	r18,8(sp)
  80a244:	dc400117 	ldw	r17,4(sp)
  80a248:	dc000017 	ldw	r16,0(sp)
  80a24c:	dec00704 	addi	sp,sp,28
  80a250:	f800283a 	ret
  80a254:	99400284 	addi	r5,r19,10
  80a258:	003fe706 	br	80a1f8 <__s2b+0xb4>
  80a25c:	000b883a 	mov	r5,zero
  80a260:	003fcd06 	br	80a198 <__s2b+0x54>

0080a264 <_realloc_r>:
  80a264:	defff404 	addi	sp,sp,-48
  80a268:	dd800815 	stw	r22,32(sp)
  80a26c:	dc800415 	stw	r18,16(sp)
  80a270:	dc400315 	stw	r17,12(sp)
  80a274:	dfc00b15 	stw	ra,44(sp)
  80a278:	df000a15 	stw	fp,40(sp)
  80a27c:	ddc00915 	stw	r23,36(sp)
  80a280:	dd400715 	stw	r21,28(sp)
  80a284:	dd000615 	stw	r20,24(sp)
  80a288:	dcc00515 	stw	r19,20(sp)
  80a28c:	dc000215 	stw	r16,8(sp)
  80a290:	2825883a 	mov	r18,r5
  80a294:	3023883a 	mov	r17,r6
  80a298:	202d883a 	mov	r22,r4
  80a29c:	2800c926 	beq	r5,zero,80a5c4 <_realloc_r+0x360>
  80a2a0:	080cc780 	call	80cc78 <__malloc_lock>
  80a2a4:	943ffe04 	addi	r16,r18,-8
  80a2a8:	88c002c4 	addi	r3,r17,11
  80a2ac:	00800584 	movi	r2,22
  80a2b0:	82000117 	ldw	r8,4(r16)
  80a2b4:	10c01b2e 	bgeu	r2,r3,80a324 <_realloc_r+0xc0>
  80a2b8:	00bffe04 	movi	r2,-8
  80a2bc:	188e703a 	and	r7,r3,r2
  80a2c0:	3839883a 	mov	fp,r7
  80a2c4:	38001a16 	blt	r7,zero,80a330 <_realloc_r+0xcc>
  80a2c8:	e4401936 	bltu	fp,r17,80a330 <_realloc_r+0xcc>
  80a2cc:	013fff04 	movi	r4,-4
  80a2d0:	4126703a 	and	r19,r8,r4
  80a2d4:	99c02616 	blt	r19,r7,80a370 <_realloc_r+0x10c>
  80a2d8:	802b883a 	mov	r21,r16
  80a2dc:	9829883a 	mov	r20,r19
  80a2e0:	84000204 	addi	r16,r16,8
  80a2e4:	a80f883a 	mov	r7,r21
  80a2e8:	a70dc83a 	sub	r6,r20,fp
  80a2ec:	008003c4 	movi	r2,15
  80a2f0:	1180c136 	bltu	r2,r6,80a5f8 <_realloc_r+0x394>
  80a2f4:	38800117 	ldw	r2,4(r7)
  80a2f8:	a549883a 	add	r4,r20,r21
  80a2fc:	1080004c 	andi	r2,r2,1
  80a300:	a084b03a 	or	r2,r20,r2
  80a304:	38800115 	stw	r2,4(r7)
  80a308:	20c00117 	ldw	r3,4(r4)
  80a30c:	18c00054 	ori	r3,r3,1
  80a310:	20c00115 	stw	r3,4(r4)
  80a314:	b009883a 	mov	r4,r22
  80a318:	080cc980 	call	80cc98 <__malloc_unlock>
  80a31c:	8023883a 	mov	r17,r16
  80a320:	00000606 	br	80a33c <_realloc_r+0xd8>
  80a324:	01c00404 	movi	r7,16
  80a328:	3839883a 	mov	fp,r7
  80a32c:	e47fe72e 	bgeu	fp,r17,80a2cc <_realloc_r+0x68>
  80a330:	00800304 	movi	r2,12
  80a334:	0023883a 	mov	r17,zero
  80a338:	b0800015 	stw	r2,0(r22)
  80a33c:	8805883a 	mov	r2,r17
  80a340:	dfc00b17 	ldw	ra,44(sp)
  80a344:	df000a17 	ldw	fp,40(sp)
  80a348:	ddc00917 	ldw	r23,36(sp)
  80a34c:	dd800817 	ldw	r22,32(sp)
  80a350:	dd400717 	ldw	r21,28(sp)
  80a354:	dd000617 	ldw	r20,24(sp)
  80a358:	dcc00517 	ldw	r19,20(sp)
  80a35c:	dc800417 	ldw	r18,16(sp)
  80a360:	dc400317 	ldw	r17,12(sp)
  80a364:	dc000217 	ldw	r16,8(sp)
  80a368:	dec00c04 	addi	sp,sp,48
  80a36c:	f800283a 	ret
  80a370:	00802074 	movhi	r2,129
  80a374:	1089e704 	addi	r2,r2,10140
  80a378:	12400217 	ldw	r9,8(r2)
  80a37c:	84cd883a 	add	r6,r16,r19
  80a380:	802b883a 	mov	r21,r16
  80a384:	3240b926 	beq	r6,r9,80a66c <_realloc_r+0x408>
  80a388:	31400117 	ldw	r5,4(r6)
  80a38c:	00bfff84 	movi	r2,-2
  80a390:	2884703a 	and	r2,r5,r2
  80a394:	1185883a 	add	r2,r2,r6
  80a398:	10c00117 	ldw	r3,4(r2)
  80a39c:	18c0004c 	andi	r3,r3,1
  80a3a0:	1807003a 	cmpeq	r3,r3,zero
  80a3a4:	1800a326 	beq	r3,zero,80a634 <_realloc_r+0x3d0>
  80a3a8:	2908703a 	and	r4,r5,r4
  80a3ac:	9929883a 	add	r20,r19,r4
  80a3b0:	a1c0a30e 	bge	r20,r7,80a640 <_realloc_r+0x3dc>
  80a3b4:	4080004c 	andi	r2,r8,1
  80a3b8:	1000551e 	bne	r2,zero,80a510 <_realloc_r+0x2ac>
  80a3bc:	80800017 	ldw	r2,0(r16)
  80a3c0:	80afc83a 	sub	r23,r16,r2
  80a3c4:	b8c00117 	ldw	r3,4(r23)
  80a3c8:	00bfff04 	movi	r2,-4
  80a3cc:	1884703a 	and	r2,r3,r2
  80a3d0:	30002e26 	beq	r6,zero,80a48c <_realloc_r+0x228>
  80a3d4:	3240b926 	beq	r6,r9,80a6bc <_realloc_r+0x458>
  80a3d8:	98a9883a 	add	r20,r19,r2
  80a3dc:	2509883a 	add	r4,r4,r20
  80a3e0:	d9000015 	stw	r4,0(sp)
  80a3e4:	21c02a16 	blt	r4,r7,80a490 <_realloc_r+0x22c>
  80a3e8:	30800317 	ldw	r2,12(r6)
  80a3ec:	30c00217 	ldw	r3,8(r6)
  80a3f0:	01400904 	movi	r5,36
  80a3f4:	99bfff04 	addi	r6,r19,-4
  80a3f8:	18800315 	stw	r2,12(r3)
  80a3fc:	10c00215 	stw	r3,8(r2)
  80a400:	b9000317 	ldw	r4,12(r23)
  80a404:	b8800217 	ldw	r2,8(r23)
  80a408:	b82b883a 	mov	r21,r23
  80a40c:	bc000204 	addi	r16,r23,8
  80a410:	20800215 	stw	r2,8(r4)
  80a414:	11000315 	stw	r4,12(r2)
  80a418:	2980e436 	bltu	r5,r6,80a7ac <_realloc_r+0x548>
  80a41c:	008004c4 	movi	r2,19
  80a420:	9009883a 	mov	r4,r18
  80a424:	8011883a 	mov	r8,r16
  80a428:	11800f2e 	bgeu	r2,r6,80a468 <_realloc_r+0x204>
  80a42c:	90800017 	ldw	r2,0(r18)
  80a430:	ba000404 	addi	r8,r23,16
  80a434:	91000204 	addi	r4,r18,8
  80a438:	b8800215 	stw	r2,8(r23)
  80a43c:	90c00117 	ldw	r3,4(r18)
  80a440:	008006c4 	movi	r2,27
  80a444:	b8c00315 	stw	r3,12(r23)
  80a448:	1180072e 	bgeu	r2,r6,80a468 <_realloc_r+0x204>
  80a44c:	90c00217 	ldw	r3,8(r18)
  80a450:	ba000604 	addi	r8,r23,24
  80a454:	91000404 	addi	r4,r18,16
  80a458:	b8c00415 	stw	r3,16(r23)
  80a45c:	90800317 	ldw	r2,12(r18)
  80a460:	b8800515 	stw	r2,20(r23)
  80a464:	3140e726 	beq	r6,r5,80a804 <_realloc_r+0x5a0>
  80a468:	20800017 	ldw	r2,0(r4)
  80a46c:	dd000017 	ldw	r20,0(sp)
  80a470:	b80f883a 	mov	r7,r23
  80a474:	40800015 	stw	r2,0(r8)
  80a478:	20c00117 	ldw	r3,4(r4)
  80a47c:	40c00115 	stw	r3,4(r8)
  80a480:	20800217 	ldw	r2,8(r4)
  80a484:	40800215 	stw	r2,8(r8)
  80a488:	003f9706 	br	80a2e8 <_realloc_r+0x84>
  80a48c:	98a9883a 	add	r20,r19,r2
  80a490:	a1c01f16 	blt	r20,r7,80a510 <_realloc_r+0x2ac>
  80a494:	b8c00317 	ldw	r3,12(r23)
  80a498:	b8800217 	ldw	r2,8(r23)
  80a49c:	99bfff04 	addi	r6,r19,-4
  80a4a0:	01400904 	movi	r5,36
  80a4a4:	b82b883a 	mov	r21,r23
  80a4a8:	18800215 	stw	r2,8(r3)
  80a4ac:	10c00315 	stw	r3,12(r2)
  80a4b0:	bc000204 	addi	r16,r23,8
  80a4b4:	2980c336 	bltu	r5,r6,80a7c4 <_realloc_r+0x560>
  80a4b8:	008004c4 	movi	r2,19
  80a4bc:	9009883a 	mov	r4,r18
  80a4c0:	8011883a 	mov	r8,r16
  80a4c4:	11800f2e 	bgeu	r2,r6,80a504 <_realloc_r+0x2a0>
  80a4c8:	90800017 	ldw	r2,0(r18)
  80a4cc:	ba000404 	addi	r8,r23,16
  80a4d0:	91000204 	addi	r4,r18,8
  80a4d4:	b8800215 	stw	r2,8(r23)
  80a4d8:	90c00117 	ldw	r3,4(r18)
  80a4dc:	008006c4 	movi	r2,27
  80a4e0:	b8c00315 	stw	r3,12(r23)
  80a4e4:	1180072e 	bgeu	r2,r6,80a504 <_realloc_r+0x2a0>
  80a4e8:	90c00217 	ldw	r3,8(r18)
  80a4ec:	ba000604 	addi	r8,r23,24
  80a4f0:	91000404 	addi	r4,r18,16
  80a4f4:	b8c00415 	stw	r3,16(r23)
  80a4f8:	90800317 	ldw	r2,12(r18)
  80a4fc:	b8800515 	stw	r2,20(r23)
  80a500:	3140c726 	beq	r6,r5,80a820 <_realloc_r+0x5bc>
  80a504:	20800017 	ldw	r2,0(r4)
  80a508:	b80f883a 	mov	r7,r23
  80a50c:	003fd906 	br	80a474 <_realloc_r+0x210>
  80a510:	880b883a 	mov	r5,r17
  80a514:	b009883a 	mov	r4,r22
  80a518:	08088340 	call	808834 <_malloc_r>
  80a51c:	1023883a 	mov	r17,r2
  80a520:	10002526 	beq	r2,zero,80a5b8 <_realloc_r+0x354>
  80a524:	80800117 	ldw	r2,4(r16)
  80a528:	00ffff84 	movi	r3,-2
  80a52c:	893ffe04 	addi	r4,r17,-8
  80a530:	10c4703a 	and	r2,r2,r3
  80a534:	8085883a 	add	r2,r16,r2
  80a538:	20809526 	beq	r4,r2,80a790 <_realloc_r+0x52c>
  80a53c:	99bfff04 	addi	r6,r19,-4
  80a540:	01c00904 	movi	r7,36
  80a544:	39804536 	bltu	r7,r6,80a65c <_realloc_r+0x3f8>
  80a548:	008004c4 	movi	r2,19
  80a54c:	9009883a 	mov	r4,r18
  80a550:	880b883a 	mov	r5,r17
  80a554:	11800f2e 	bgeu	r2,r6,80a594 <_realloc_r+0x330>
  80a558:	90800017 	ldw	r2,0(r18)
  80a55c:	89400204 	addi	r5,r17,8
  80a560:	91000204 	addi	r4,r18,8
  80a564:	88800015 	stw	r2,0(r17)
  80a568:	90c00117 	ldw	r3,4(r18)
  80a56c:	008006c4 	movi	r2,27
  80a570:	88c00115 	stw	r3,4(r17)
  80a574:	1180072e 	bgeu	r2,r6,80a594 <_realloc_r+0x330>
  80a578:	90c00217 	ldw	r3,8(r18)
  80a57c:	89400404 	addi	r5,r17,16
  80a580:	91000404 	addi	r4,r18,16
  80a584:	88c00215 	stw	r3,8(r17)
  80a588:	90800317 	ldw	r2,12(r18)
  80a58c:	88800315 	stw	r2,12(r17)
  80a590:	31c09126 	beq	r6,r7,80a7d8 <_realloc_r+0x574>
  80a594:	20800017 	ldw	r2,0(r4)
  80a598:	28800015 	stw	r2,0(r5)
  80a59c:	20c00117 	ldw	r3,4(r4)
  80a5a0:	28c00115 	stw	r3,4(r5)
  80a5a4:	20800217 	ldw	r2,8(r4)
  80a5a8:	28800215 	stw	r2,8(r5)
  80a5ac:	900b883a 	mov	r5,r18
  80a5b0:	b009883a 	mov	r4,r22
  80a5b4:	0807cac0 	call	807cac <_free_r>
  80a5b8:	b009883a 	mov	r4,r22
  80a5bc:	080cc980 	call	80cc98 <__malloc_unlock>
  80a5c0:	003f5e06 	br	80a33c <_realloc_r+0xd8>
  80a5c4:	300b883a 	mov	r5,r6
  80a5c8:	dfc00b17 	ldw	ra,44(sp)
  80a5cc:	df000a17 	ldw	fp,40(sp)
  80a5d0:	ddc00917 	ldw	r23,36(sp)
  80a5d4:	dd800817 	ldw	r22,32(sp)
  80a5d8:	dd400717 	ldw	r21,28(sp)
  80a5dc:	dd000617 	ldw	r20,24(sp)
  80a5e0:	dcc00517 	ldw	r19,20(sp)
  80a5e4:	dc800417 	ldw	r18,16(sp)
  80a5e8:	dc400317 	ldw	r17,12(sp)
  80a5ec:	dc000217 	ldw	r16,8(sp)
  80a5f0:	dec00c04 	addi	sp,sp,48
  80a5f4:	08088341 	jmpi	808834 <_malloc_r>
  80a5f8:	38800117 	ldw	r2,4(r7)
  80a5fc:	e54b883a 	add	r5,fp,r21
  80a600:	31000054 	ori	r4,r6,1
  80a604:	1080004c 	andi	r2,r2,1
  80a608:	1704b03a 	or	r2,r2,fp
  80a60c:	38800115 	stw	r2,4(r7)
  80a610:	29000115 	stw	r4,4(r5)
  80a614:	2987883a 	add	r3,r5,r6
  80a618:	18800117 	ldw	r2,4(r3)
  80a61c:	29400204 	addi	r5,r5,8
  80a620:	b009883a 	mov	r4,r22
  80a624:	10800054 	ori	r2,r2,1
  80a628:	18800115 	stw	r2,4(r3)
  80a62c:	0807cac0 	call	807cac <_free_r>
  80a630:	003f3806 	br	80a314 <_realloc_r+0xb0>
  80a634:	000d883a 	mov	r6,zero
  80a638:	0009883a 	mov	r4,zero
  80a63c:	003f5d06 	br	80a3b4 <_realloc_r+0x150>
  80a640:	30c00217 	ldw	r3,8(r6)
  80a644:	30800317 	ldw	r2,12(r6)
  80a648:	800f883a 	mov	r7,r16
  80a64c:	84000204 	addi	r16,r16,8
  80a650:	10c00215 	stw	r3,8(r2)
  80a654:	18800315 	stw	r2,12(r3)
  80a658:	003f2306 	br	80a2e8 <_realloc_r+0x84>
  80a65c:	8809883a 	mov	r4,r17
  80a660:	900b883a 	mov	r5,r18
  80a664:	08090f80 	call	8090f8 <memmove>
  80a668:	003fd006 	br	80a5ac <_realloc_r+0x348>
  80a66c:	30800117 	ldw	r2,4(r6)
  80a670:	e0c00404 	addi	r3,fp,16
  80a674:	1108703a 	and	r4,r2,r4
  80a678:	9905883a 	add	r2,r19,r4
  80a67c:	10ff4d16 	blt	r2,r3,80a3b4 <_realloc_r+0x150>
  80a680:	1705c83a 	sub	r2,r2,fp
  80a684:	870b883a 	add	r5,r16,fp
  80a688:	10800054 	ori	r2,r2,1
  80a68c:	28800115 	stw	r2,4(r5)
  80a690:	80c00117 	ldw	r3,4(r16)
  80a694:	00802074 	movhi	r2,129
  80a698:	1089e704 	addi	r2,r2,10140
  80a69c:	b009883a 	mov	r4,r22
  80a6a0:	18c0004c 	andi	r3,r3,1
  80a6a4:	e0c6b03a 	or	r3,fp,r3
  80a6a8:	11400215 	stw	r5,8(r2)
  80a6ac:	80c00115 	stw	r3,4(r16)
  80a6b0:	080cc980 	call	80cc98 <__malloc_unlock>
  80a6b4:	84400204 	addi	r17,r16,8
  80a6b8:	003f2006 	br	80a33c <_realloc_r+0xd8>
  80a6bc:	98a9883a 	add	r20,r19,r2
  80a6c0:	2509883a 	add	r4,r4,r20
  80a6c4:	e0800404 	addi	r2,fp,16
  80a6c8:	d9000115 	stw	r4,4(sp)
  80a6cc:	20bf7016 	blt	r4,r2,80a490 <_realloc_r+0x22c>
  80a6d0:	b8c00317 	ldw	r3,12(r23)
  80a6d4:	b8800217 	ldw	r2,8(r23)
  80a6d8:	99bfff04 	addi	r6,r19,-4
  80a6dc:	01400904 	movi	r5,36
  80a6e0:	18800215 	stw	r2,8(r3)
  80a6e4:	10c00315 	stw	r3,12(r2)
  80a6e8:	bc400204 	addi	r17,r23,8
  80a6ec:	29804136 	bltu	r5,r6,80a7f4 <_realloc_r+0x590>
  80a6f0:	008004c4 	movi	r2,19
  80a6f4:	9009883a 	mov	r4,r18
  80a6f8:	880f883a 	mov	r7,r17
  80a6fc:	11800f2e 	bgeu	r2,r6,80a73c <_realloc_r+0x4d8>
  80a700:	90800017 	ldw	r2,0(r18)
  80a704:	b9c00404 	addi	r7,r23,16
  80a708:	91000204 	addi	r4,r18,8
  80a70c:	b8800215 	stw	r2,8(r23)
  80a710:	90c00117 	ldw	r3,4(r18)
  80a714:	008006c4 	movi	r2,27
  80a718:	b8c00315 	stw	r3,12(r23)
  80a71c:	1180072e 	bgeu	r2,r6,80a73c <_realloc_r+0x4d8>
  80a720:	90c00217 	ldw	r3,8(r18)
  80a724:	b9c00604 	addi	r7,r23,24
  80a728:	91000404 	addi	r4,r18,16
  80a72c:	b8c00415 	stw	r3,16(r23)
  80a730:	90800317 	ldw	r2,12(r18)
  80a734:	b8800515 	stw	r2,20(r23)
  80a738:	31404026 	beq	r6,r5,80a83c <_realloc_r+0x5d8>
  80a73c:	20800017 	ldw	r2,0(r4)
  80a740:	38800015 	stw	r2,0(r7)
  80a744:	20c00117 	ldw	r3,4(r4)
  80a748:	38c00115 	stw	r3,4(r7)
  80a74c:	20800217 	ldw	r2,8(r4)
  80a750:	38800215 	stw	r2,8(r7)
  80a754:	d8c00117 	ldw	r3,4(sp)
  80a758:	bf0b883a 	add	r5,r23,fp
  80a75c:	b009883a 	mov	r4,r22
  80a760:	1f05c83a 	sub	r2,r3,fp
  80a764:	10800054 	ori	r2,r2,1
  80a768:	28800115 	stw	r2,4(r5)
  80a76c:	b8c00117 	ldw	r3,4(r23)
  80a770:	00802074 	movhi	r2,129
  80a774:	1089e704 	addi	r2,r2,10140
  80a778:	11400215 	stw	r5,8(r2)
  80a77c:	18c0004c 	andi	r3,r3,1
  80a780:	e0c6b03a 	or	r3,fp,r3
  80a784:	b8c00115 	stw	r3,4(r23)
  80a788:	080cc980 	call	80cc98 <__malloc_unlock>
  80a78c:	003eeb06 	br	80a33c <_realloc_r+0xd8>
  80a790:	20800117 	ldw	r2,4(r4)
  80a794:	00ffff04 	movi	r3,-4
  80a798:	800f883a 	mov	r7,r16
  80a79c:	10c4703a 	and	r2,r2,r3
  80a7a0:	98a9883a 	add	r20,r19,r2
  80a7a4:	84000204 	addi	r16,r16,8
  80a7a8:	003ecf06 	br	80a2e8 <_realloc_r+0x84>
  80a7ac:	900b883a 	mov	r5,r18
  80a7b0:	8009883a 	mov	r4,r16
  80a7b4:	08090f80 	call	8090f8 <memmove>
  80a7b8:	dd000017 	ldw	r20,0(sp)
  80a7bc:	b80f883a 	mov	r7,r23
  80a7c0:	003ec906 	br	80a2e8 <_realloc_r+0x84>
  80a7c4:	900b883a 	mov	r5,r18
  80a7c8:	8009883a 	mov	r4,r16
  80a7cc:	08090f80 	call	8090f8 <memmove>
  80a7d0:	b80f883a 	mov	r7,r23
  80a7d4:	003ec406 	br	80a2e8 <_realloc_r+0x84>
  80a7d8:	90c00417 	ldw	r3,16(r18)
  80a7dc:	89400604 	addi	r5,r17,24
  80a7e0:	91000604 	addi	r4,r18,24
  80a7e4:	88c00415 	stw	r3,16(r17)
  80a7e8:	90800517 	ldw	r2,20(r18)
  80a7ec:	88800515 	stw	r2,20(r17)
  80a7f0:	003f6806 	br	80a594 <_realloc_r+0x330>
  80a7f4:	900b883a 	mov	r5,r18
  80a7f8:	8809883a 	mov	r4,r17
  80a7fc:	08090f80 	call	8090f8 <memmove>
  80a800:	003fd406 	br	80a754 <_realloc_r+0x4f0>
  80a804:	90c00417 	ldw	r3,16(r18)
  80a808:	91000604 	addi	r4,r18,24
  80a80c:	ba000804 	addi	r8,r23,32
  80a810:	b8c00615 	stw	r3,24(r23)
  80a814:	90800517 	ldw	r2,20(r18)
  80a818:	b8800715 	stw	r2,28(r23)
  80a81c:	003f1206 	br	80a468 <_realloc_r+0x204>
  80a820:	90c00417 	ldw	r3,16(r18)
  80a824:	91000604 	addi	r4,r18,24
  80a828:	ba000804 	addi	r8,r23,32
  80a82c:	b8c00615 	stw	r3,24(r23)
  80a830:	90800517 	ldw	r2,20(r18)
  80a834:	b8800715 	stw	r2,28(r23)
  80a838:	003f3206 	br	80a504 <_realloc_r+0x2a0>
  80a83c:	90c00417 	ldw	r3,16(r18)
  80a840:	91000604 	addi	r4,r18,24
  80a844:	b9c00804 	addi	r7,r23,32
  80a848:	b8c00615 	stw	r3,24(r23)
  80a84c:	90800517 	ldw	r2,20(r18)
  80a850:	b8800715 	stw	r2,28(r23)
  80a854:	003fb906 	br	80a73c <_realloc_r+0x4d8>

0080a858 <__isinfd>:
  80a858:	200d883a 	mov	r6,r4
  80a85c:	0109c83a 	sub	r4,zero,r4
  80a860:	2188b03a 	or	r4,r4,r6
  80a864:	2008d7fa 	srli	r4,r4,31
  80a868:	00a00034 	movhi	r2,32768
  80a86c:	10bfffc4 	addi	r2,r2,-1
  80a870:	1144703a 	and	r2,r2,r5
  80a874:	2088b03a 	or	r4,r4,r2
  80a878:	009ffc34 	movhi	r2,32752
  80a87c:	1105c83a 	sub	r2,r2,r4
  80a880:	0087c83a 	sub	r3,zero,r2
  80a884:	10c4b03a 	or	r2,r2,r3
  80a888:	1004d7fa 	srli	r2,r2,31
  80a88c:	00c00044 	movi	r3,1
  80a890:	1885c83a 	sub	r2,r3,r2
  80a894:	f800283a 	ret

0080a898 <__isnand>:
  80a898:	200d883a 	mov	r6,r4
  80a89c:	0109c83a 	sub	r4,zero,r4
  80a8a0:	2188b03a 	or	r4,r4,r6
  80a8a4:	2008d7fa 	srli	r4,r4,31
  80a8a8:	00a00034 	movhi	r2,32768
  80a8ac:	10bfffc4 	addi	r2,r2,-1
  80a8b0:	1144703a 	and	r2,r2,r5
  80a8b4:	2088b03a 	or	r4,r4,r2
  80a8b8:	009ffc34 	movhi	r2,32752
  80a8bc:	1105c83a 	sub	r2,r2,r4
  80a8c0:	1004d7fa 	srli	r2,r2,31
  80a8c4:	f800283a 	ret

0080a8c8 <_sbrk_r>:
  80a8c8:	defffd04 	addi	sp,sp,-12
  80a8cc:	dc000015 	stw	r16,0(sp)
  80a8d0:	04002074 	movhi	r16,129
  80a8d4:	8416ef04 	addi	r16,r16,23484
  80a8d8:	dc400115 	stw	r17,4(sp)
  80a8dc:	80000015 	stw	zero,0(r16)
  80a8e0:	2023883a 	mov	r17,r4
  80a8e4:	2809883a 	mov	r4,r5
  80a8e8:	dfc00215 	stw	ra,8(sp)
  80a8ec:	080ce980 	call	80ce98 <sbrk>
  80a8f0:	1007883a 	mov	r3,r2
  80a8f4:	00bfffc4 	movi	r2,-1
  80a8f8:	18800626 	beq	r3,r2,80a914 <_sbrk_r+0x4c>
  80a8fc:	1805883a 	mov	r2,r3
  80a900:	dfc00217 	ldw	ra,8(sp)
  80a904:	dc400117 	ldw	r17,4(sp)
  80a908:	dc000017 	ldw	r16,0(sp)
  80a90c:	dec00304 	addi	sp,sp,12
  80a910:	f800283a 	ret
  80a914:	80800017 	ldw	r2,0(r16)
  80a918:	103ff826 	beq	r2,zero,80a8fc <_sbrk_r+0x34>
  80a91c:	88800015 	stw	r2,0(r17)
  80a920:	1805883a 	mov	r2,r3
  80a924:	dfc00217 	ldw	ra,8(sp)
  80a928:	dc400117 	ldw	r17,4(sp)
  80a92c:	dc000017 	ldw	r16,0(sp)
  80a930:	dec00304 	addi	sp,sp,12
  80a934:	f800283a 	ret

0080a938 <__sclose>:
  80a938:	2940038f 	ldh	r5,14(r5)
  80a93c:	080ac6c1 	jmpi	80ac6c <_close_r>

0080a940 <__sseek>:
  80a940:	defffe04 	addi	sp,sp,-8
  80a944:	dc000015 	stw	r16,0(sp)
  80a948:	2821883a 	mov	r16,r5
  80a94c:	2940038f 	ldh	r5,14(r5)
  80a950:	dfc00115 	stw	ra,4(sp)
  80a954:	080aee40 	call	80aee4 <_lseek_r>
  80a958:	1007883a 	mov	r3,r2
  80a95c:	00bfffc4 	movi	r2,-1
  80a960:	18800926 	beq	r3,r2,80a988 <__sseek+0x48>
  80a964:	8080030b 	ldhu	r2,12(r16)
  80a968:	80c01415 	stw	r3,80(r16)
  80a96c:	10840014 	ori	r2,r2,4096
  80a970:	8080030d 	sth	r2,12(r16)
  80a974:	1805883a 	mov	r2,r3
  80a978:	dfc00117 	ldw	ra,4(sp)
  80a97c:	dc000017 	ldw	r16,0(sp)
  80a980:	dec00204 	addi	sp,sp,8
  80a984:	f800283a 	ret
  80a988:	8080030b 	ldhu	r2,12(r16)
  80a98c:	10bbffcc 	andi	r2,r2,61439
  80a990:	8080030d 	sth	r2,12(r16)
  80a994:	1805883a 	mov	r2,r3
  80a998:	dfc00117 	ldw	ra,4(sp)
  80a99c:	dc000017 	ldw	r16,0(sp)
  80a9a0:	dec00204 	addi	sp,sp,8
  80a9a4:	f800283a 	ret

0080a9a8 <__swrite>:
  80a9a8:	2880030b 	ldhu	r2,12(r5)
  80a9ac:	defffb04 	addi	sp,sp,-20
  80a9b0:	dcc00315 	stw	r19,12(sp)
  80a9b4:	1080400c 	andi	r2,r2,256
  80a9b8:	dc800215 	stw	r18,8(sp)
  80a9bc:	dc400115 	stw	r17,4(sp)
  80a9c0:	dc000015 	stw	r16,0(sp)
  80a9c4:	3027883a 	mov	r19,r6
  80a9c8:	3825883a 	mov	r18,r7
  80a9cc:	dfc00415 	stw	ra,16(sp)
  80a9d0:	2821883a 	mov	r16,r5
  80a9d4:	000d883a 	mov	r6,zero
  80a9d8:	01c00084 	movi	r7,2
  80a9dc:	2023883a 	mov	r17,r4
  80a9e0:	10000226 	beq	r2,zero,80a9ec <__swrite+0x44>
  80a9e4:	2940038f 	ldh	r5,14(r5)
  80a9e8:	080aee40 	call	80aee4 <_lseek_r>
  80a9ec:	8080030b 	ldhu	r2,12(r16)
  80a9f0:	8140038f 	ldh	r5,14(r16)
  80a9f4:	8809883a 	mov	r4,r17
  80a9f8:	10bbffcc 	andi	r2,r2,61439
  80a9fc:	980d883a 	mov	r6,r19
  80aa00:	900f883a 	mov	r7,r18
  80aa04:	8080030d 	sth	r2,12(r16)
  80aa08:	dfc00417 	ldw	ra,16(sp)
  80aa0c:	dcc00317 	ldw	r19,12(sp)
  80aa10:	dc800217 	ldw	r18,8(sp)
  80aa14:	dc400117 	ldw	r17,4(sp)
  80aa18:	dc000017 	ldw	r16,0(sp)
  80aa1c:	dec00504 	addi	sp,sp,20
  80aa20:	080ab401 	jmpi	80ab40 <_write_r>

0080aa24 <__sread>:
  80aa24:	defffe04 	addi	sp,sp,-8
  80aa28:	dc000015 	stw	r16,0(sp)
  80aa2c:	2821883a 	mov	r16,r5
  80aa30:	2940038f 	ldh	r5,14(r5)
  80aa34:	dfc00115 	stw	ra,4(sp)
  80aa38:	080af5c0 	call	80af5c <_read_r>
  80aa3c:	1007883a 	mov	r3,r2
  80aa40:	10000816 	blt	r2,zero,80aa64 <__sread+0x40>
  80aa44:	80801417 	ldw	r2,80(r16)
  80aa48:	10c5883a 	add	r2,r2,r3
  80aa4c:	80801415 	stw	r2,80(r16)
  80aa50:	1805883a 	mov	r2,r3
  80aa54:	dfc00117 	ldw	ra,4(sp)
  80aa58:	dc000017 	ldw	r16,0(sp)
  80aa5c:	dec00204 	addi	sp,sp,8
  80aa60:	f800283a 	ret
  80aa64:	8080030b 	ldhu	r2,12(r16)
  80aa68:	10bbffcc 	andi	r2,r2,61439
  80aa6c:	8080030d 	sth	r2,12(r16)
  80aa70:	1805883a 	mov	r2,r3
  80aa74:	dfc00117 	ldw	ra,4(sp)
  80aa78:	dc000017 	ldw	r16,0(sp)
  80aa7c:	dec00204 	addi	sp,sp,8
  80aa80:	f800283a 	ret

0080aa84 <strcmp>:
  80aa84:	2144b03a 	or	r2,r4,r5
  80aa88:	108000cc 	andi	r2,r2,3
  80aa8c:	10001d1e 	bne	r2,zero,80ab04 <strcmp+0x80>
  80aa90:	200f883a 	mov	r7,r4
  80aa94:	28800017 	ldw	r2,0(r5)
  80aa98:	21000017 	ldw	r4,0(r4)
  80aa9c:	280d883a 	mov	r6,r5
  80aaa0:	2080161e 	bne	r4,r2,80aafc <strcmp+0x78>
  80aaa4:	023fbff4 	movhi	r8,65279
  80aaa8:	423fbfc4 	addi	r8,r8,-257
  80aaac:	2207883a 	add	r3,r4,r8
  80aab0:	01602074 	movhi	r5,32897
  80aab4:	29602004 	addi	r5,r5,-32640
  80aab8:	1946703a 	and	r3,r3,r5
  80aabc:	0104303a 	nor	r2,zero,r4
  80aac0:	10c4703a 	and	r2,r2,r3
  80aac4:	10001c1e 	bne	r2,zero,80ab38 <strcmp+0xb4>
  80aac8:	4013883a 	mov	r9,r8
  80aacc:	2811883a 	mov	r8,r5
  80aad0:	00000106 	br	80aad8 <strcmp+0x54>
  80aad4:	1800181e 	bne	r3,zero,80ab38 <strcmp+0xb4>
  80aad8:	39c00104 	addi	r7,r7,4
  80aadc:	39000017 	ldw	r4,0(r7)
  80aae0:	31800104 	addi	r6,r6,4
  80aae4:	31400017 	ldw	r5,0(r6)
  80aae8:	2245883a 	add	r2,r4,r9
  80aaec:	1204703a 	and	r2,r2,r8
  80aaf0:	0106303a 	nor	r3,zero,r4
  80aaf4:	1886703a 	and	r3,r3,r2
  80aaf8:	217ff626 	beq	r4,r5,80aad4 <strcmp+0x50>
  80aafc:	3809883a 	mov	r4,r7
  80ab00:	300b883a 	mov	r5,r6
  80ab04:	20c00007 	ldb	r3,0(r4)
  80ab08:	1800051e 	bne	r3,zero,80ab20 <strcmp+0x9c>
  80ab0c:	00000606 	br	80ab28 <strcmp+0xa4>
  80ab10:	21000044 	addi	r4,r4,1
  80ab14:	20c00007 	ldb	r3,0(r4)
  80ab18:	29400044 	addi	r5,r5,1
  80ab1c:	18000226 	beq	r3,zero,80ab28 <strcmp+0xa4>
  80ab20:	28800007 	ldb	r2,0(r5)
  80ab24:	18bffa26 	beq	r3,r2,80ab10 <strcmp+0x8c>
  80ab28:	20c00003 	ldbu	r3,0(r4)
  80ab2c:	28800003 	ldbu	r2,0(r5)
  80ab30:	1885c83a 	sub	r2,r3,r2
  80ab34:	f800283a 	ret
  80ab38:	0005883a 	mov	r2,zero
  80ab3c:	f800283a 	ret

0080ab40 <_write_r>:
  80ab40:	defffd04 	addi	sp,sp,-12
  80ab44:	dc000015 	stw	r16,0(sp)
  80ab48:	04002074 	movhi	r16,129
  80ab4c:	8416ef04 	addi	r16,r16,23484
  80ab50:	dc400115 	stw	r17,4(sp)
  80ab54:	80000015 	stw	zero,0(r16)
  80ab58:	2023883a 	mov	r17,r4
  80ab5c:	2809883a 	mov	r4,r5
  80ab60:	300b883a 	mov	r5,r6
  80ab64:	380d883a 	mov	r6,r7
  80ab68:	dfc00215 	stw	ra,8(sp)
  80ab6c:	080cf540 	call	80cf54 <write>
  80ab70:	1007883a 	mov	r3,r2
  80ab74:	00bfffc4 	movi	r2,-1
  80ab78:	18800626 	beq	r3,r2,80ab94 <_write_r+0x54>
  80ab7c:	1805883a 	mov	r2,r3
  80ab80:	dfc00217 	ldw	ra,8(sp)
  80ab84:	dc400117 	ldw	r17,4(sp)
  80ab88:	dc000017 	ldw	r16,0(sp)
  80ab8c:	dec00304 	addi	sp,sp,12
  80ab90:	f800283a 	ret
  80ab94:	80800017 	ldw	r2,0(r16)
  80ab98:	103ff826 	beq	r2,zero,80ab7c <_write_r+0x3c>
  80ab9c:	88800015 	stw	r2,0(r17)
  80aba0:	1805883a 	mov	r2,r3
  80aba4:	dfc00217 	ldw	ra,8(sp)
  80aba8:	dc400117 	ldw	r17,4(sp)
  80abac:	dc000017 	ldw	r16,0(sp)
  80abb0:	dec00304 	addi	sp,sp,12
  80abb4:	f800283a 	ret

0080abb8 <_calloc_r>:
  80abb8:	298b383a 	mul	r5,r5,r6
  80abbc:	defffe04 	addi	sp,sp,-8
  80abc0:	dc000015 	stw	r16,0(sp)
  80abc4:	dfc00115 	stw	ra,4(sp)
  80abc8:	08088340 	call	808834 <_malloc_r>
  80abcc:	1021883a 	mov	r16,r2
  80abd0:	01c00904 	movi	r7,36
  80abd4:	10000d26 	beq	r2,zero,80ac0c <_calloc_r+0x54>
  80abd8:	10ffff17 	ldw	r3,-4(r2)
  80abdc:	1009883a 	mov	r4,r2
  80abe0:	00bfff04 	movi	r2,-4
  80abe4:	1886703a 	and	r3,r3,r2
  80abe8:	1887883a 	add	r3,r3,r2
  80abec:	180d883a 	mov	r6,r3
  80abf0:	000b883a 	mov	r5,zero
  80abf4:	38c01736 	bltu	r7,r3,80ac54 <_calloc_r+0x9c>
  80abf8:	008004c4 	movi	r2,19
  80abfc:	10c00836 	bltu	r2,r3,80ac20 <_calloc_r+0x68>
  80ac00:	20000215 	stw	zero,8(r4)
  80ac04:	20000015 	stw	zero,0(r4)
  80ac08:	20000115 	stw	zero,4(r4)
  80ac0c:	8005883a 	mov	r2,r16
  80ac10:	dfc00117 	ldw	ra,4(sp)
  80ac14:	dc000017 	ldw	r16,0(sp)
  80ac18:	dec00204 	addi	sp,sp,8
  80ac1c:	f800283a 	ret
  80ac20:	008006c4 	movi	r2,27
  80ac24:	80000015 	stw	zero,0(r16)
  80ac28:	80000115 	stw	zero,4(r16)
  80ac2c:	81000204 	addi	r4,r16,8
  80ac30:	10fff32e 	bgeu	r2,r3,80ac00 <_calloc_r+0x48>
  80ac34:	80000215 	stw	zero,8(r16)
  80ac38:	80000315 	stw	zero,12(r16)
  80ac3c:	81000404 	addi	r4,r16,16
  80ac40:	19ffef1e 	bne	r3,r7,80ac00 <_calloc_r+0x48>
  80ac44:	81000604 	addi	r4,r16,24
  80ac48:	80000415 	stw	zero,16(r16)
  80ac4c:	80000515 	stw	zero,20(r16)
  80ac50:	003feb06 	br	80ac00 <_calloc_r+0x48>
  80ac54:	08091d80 	call	8091d8 <memset>
  80ac58:	8005883a 	mov	r2,r16
  80ac5c:	dfc00117 	ldw	ra,4(sp)
  80ac60:	dc000017 	ldw	r16,0(sp)
  80ac64:	dec00204 	addi	sp,sp,8
  80ac68:	f800283a 	ret

0080ac6c <_close_r>:
  80ac6c:	defffd04 	addi	sp,sp,-12
  80ac70:	dc000015 	stw	r16,0(sp)
  80ac74:	04002074 	movhi	r16,129
  80ac78:	8416ef04 	addi	r16,r16,23484
  80ac7c:	dc400115 	stw	r17,4(sp)
  80ac80:	80000015 	stw	zero,0(r16)
  80ac84:	2023883a 	mov	r17,r4
  80ac88:	2809883a 	mov	r4,r5
  80ac8c:	dfc00215 	stw	ra,8(sp)
  80ac90:	080c5f40 	call	80c5f4 <close>
  80ac94:	1007883a 	mov	r3,r2
  80ac98:	00bfffc4 	movi	r2,-1
  80ac9c:	18800626 	beq	r3,r2,80acb8 <_close_r+0x4c>
  80aca0:	1805883a 	mov	r2,r3
  80aca4:	dfc00217 	ldw	ra,8(sp)
  80aca8:	dc400117 	ldw	r17,4(sp)
  80acac:	dc000017 	ldw	r16,0(sp)
  80acb0:	dec00304 	addi	sp,sp,12
  80acb4:	f800283a 	ret
  80acb8:	80800017 	ldw	r2,0(r16)
  80acbc:	103ff826 	beq	r2,zero,80aca0 <_close_r+0x34>
  80acc0:	88800015 	stw	r2,0(r17)
  80acc4:	1805883a 	mov	r2,r3
  80acc8:	dfc00217 	ldw	ra,8(sp)
  80accc:	dc400117 	ldw	r17,4(sp)
  80acd0:	dc000017 	ldw	r16,0(sp)
  80acd4:	dec00304 	addi	sp,sp,12
  80acd8:	f800283a 	ret

0080acdc <_fclose_r>:
  80acdc:	defffc04 	addi	sp,sp,-16
  80ace0:	dc400115 	stw	r17,4(sp)
  80ace4:	dc000015 	stw	r16,0(sp)
  80ace8:	dfc00315 	stw	ra,12(sp)
  80acec:	dc800215 	stw	r18,8(sp)
  80acf0:	2821883a 	mov	r16,r5
  80acf4:	2023883a 	mov	r17,r4
  80acf8:	28002926 	beq	r5,zero,80ada0 <_fclose_r+0xc4>
  80acfc:	08079180 	call	807918 <__sfp_lock_acquire>
  80ad00:	88000226 	beq	r17,zero,80ad0c <_fclose_r+0x30>
  80ad04:	88800e17 	ldw	r2,56(r17)
  80ad08:	10002d26 	beq	r2,zero,80adc0 <_fclose_r+0xe4>
  80ad0c:	8080030f 	ldh	r2,12(r16)
  80ad10:	10002226 	beq	r2,zero,80ad9c <_fclose_r+0xc0>
  80ad14:	8809883a 	mov	r4,r17
  80ad18:	800b883a 	mov	r5,r16
  80ad1c:	08076900 	call	807690 <_fflush_r>
  80ad20:	1025883a 	mov	r18,r2
  80ad24:	80800b17 	ldw	r2,44(r16)
  80ad28:	10000426 	beq	r2,zero,80ad3c <_fclose_r+0x60>
  80ad2c:	81400717 	ldw	r5,28(r16)
  80ad30:	8809883a 	mov	r4,r17
  80ad34:	103ee83a 	callr	r2
  80ad38:	10002a16 	blt	r2,zero,80ade4 <_fclose_r+0x108>
  80ad3c:	8080030b 	ldhu	r2,12(r16)
  80ad40:	1080200c 	andi	r2,r2,128
  80ad44:	1000231e 	bne	r2,zero,80add4 <_fclose_r+0xf8>
  80ad48:	81400c17 	ldw	r5,48(r16)
  80ad4c:	28000526 	beq	r5,zero,80ad64 <_fclose_r+0x88>
  80ad50:	80801004 	addi	r2,r16,64
  80ad54:	28800226 	beq	r5,r2,80ad60 <_fclose_r+0x84>
  80ad58:	8809883a 	mov	r4,r17
  80ad5c:	0807cac0 	call	807cac <_free_r>
  80ad60:	80000c15 	stw	zero,48(r16)
  80ad64:	81401117 	ldw	r5,68(r16)
  80ad68:	28000326 	beq	r5,zero,80ad78 <_fclose_r+0x9c>
  80ad6c:	8809883a 	mov	r4,r17
  80ad70:	0807cac0 	call	807cac <_free_r>
  80ad74:	80001115 	stw	zero,68(r16)
  80ad78:	8000030d 	sth	zero,12(r16)
  80ad7c:	080791c0 	call	80791c <__sfp_lock_release>
  80ad80:	9005883a 	mov	r2,r18
  80ad84:	dfc00317 	ldw	ra,12(sp)
  80ad88:	dc800217 	ldw	r18,8(sp)
  80ad8c:	dc400117 	ldw	r17,4(sp)
  80ad90:	dc000017 	ldw	r16,0(sp)
  80ad94:	dec00404 	addi	sp,sp,16
  80ad98:	f800283a 	ret
  80ad9c:	080791c0 	call	80791c <__sfp_lock_release>
  80ada0:	0025883a 	mov	r18,zero
  80ada4:	9005883a 	mov	r2,r18
  80ada8:	dfc00317 	ldw	ra,12(sp)
  80adac:	dc800217 	ldw	r18,8(sp)
  80adb0:	dc400117 	ldw	r17,4(sp)
  80adb4:	dc000017 	ldw	r16,0(sp)
  80adb8:	dec00404 	addi	sp,sp,16
  80adbc:	f800283a 	ret
  80adc0:	8809883a 	mov	r4,r17
  80adc4:	08079280 	call	807928 <__sinit>
  80adc8:	8080030f 	ldh	r2,12(r16)
  80adcc:	103fd11e 	bne	r2,zero,80ad14 <_fclose_r+0x38>
  80add0:	003ff206 	br	80ad9c <_fclose_r+0xc0>
  80add4:	81400417 	ldw	r5,16(r16)
  80add8:	8809883a 	mov	r4,r17
  80addc:	0807cac0 	call	807cac <_free_r>
  80ade0:	003fd906 	br	80ad48 <_fclose_r+0x6c>
  80ade4:	04bfffc4 	movi	r18,-1
  80ade8:	003fd406 	br	80ad3c <_fclose_r+0x60>

0080adec <fclose>:
  80adec:	00802074 	movhi	r2,129
  80adf0:	108fd204 	addi	r2,r2,16200
  80adf4:	200b883a 	mov	r5,r4
  80adf8:	11000017 	ldw	r4,0(r2)
  80adfc:	080acdc1 	jmpi	80acdc <_fclose_r>

0080ae00 <_fstat_r>:
  80ae00:	defffd04 	addi	sp,sp,-12
  80ae04:	dc000015 	stw	r16,0(sp)
  80ae08:	04002074 	movhi	r16,129
  80ae0c:	8416ef04 	addi	r16,r16,23484
  80ae10:	dc400115 	stw	r17,4(sp)
  80ae14:	80000015 	stw	zero,0(r16)
  80ae18:	2023883a 	mov	r17,r4
  80ae1c:	2809883a 	mov	r4,r5
  80ae20:	300b883a 	mov	r5,r6
  80ae24:	dfc00215 	stw	ra,8(sp)
  80ae28:	080c77c0 	call	80c77c <fstat>
  80ae2c:	1007883a 	mov	r3,r2
  80ae30:	00bfffc4 	movi	r2,-1
  80ae34:	18800626 	beq	r3,r2,80ae50 <_fstat_r+0x50>
  80ae38:	1805883a 	mov	r2,r3
  80ae3c:	dfc00217 	ldw	ra,8(sp)
  80ae40:	dc400117 	ldw	r17,4(sp)
  80ae44:	dc000017 	ldw	r16,0(sp)
  80ae48:	dec00304 	addi	sp,sp,12
  80ae4c:	f800283a 	ret
  80ae50:	80800017 	ldw	r2,0(r16)
  80ae54:	103ff826 	beq	r2,zero,80ae38 <_fstat_r+0x38>
  80ae58:	88800015 	stw	r2,0(r17)
  80ae5c:	1805883a 	mov	r2,r3
  80ae60:	dfc00217 	ldw	ra,8(sp)
  80ae64:	dc400117 	ldw	r17,4(sp)
  80ae68:	dc000017 	ldw	r16,0(sp)
  80ae6c:	dec00304 	addi	sp,sp,12
  80ae70:	f800283a 	ret

0080ae74 <_isatty_r>:
  80ae74:	defffd04 	addi	sp,sp,-12
  80ae78:	dc000015 	stw	r16,0(sp)
  80ae7c:	04002074 	movhi	r16,129
  80ae80:	8416ef04 	addi	r16,r16,23484
  80ae84:	dc400115 	stw	r17,4(sp)
  80ae88:	80000015 	stw	zero,0(r16)
  80ae8c:	2023883a 	mov	r17,r4
  80ae90:	2809883a 	mov	r4,r5
  80ae94:	dfc00215 	stw	ra,8(sp)
  80ae98:	080c8b00 	call	80c8b0 <isatty>
  80ae9c:	1007883a 	mov	r3,r2
  80aea0:	00bfffc4 	movi	r2,-1
  80aea4:	18800626 	beq	r3,r2,80aec0 <_isatty_r+0x4c>
  80aea8:	1805883a 	mov	r2,r3
  80aeac:	dfc00217 	ldw	ra,8(sp)
  80aeb0:	dc400117 	ldw	r17,4(sp)
  80aeb4:	dc000017 	ldw	r16,0(sp)
  80aeb8:	dec00304 	addi	sp,sp,12
  80aebc:	f800283a 	ret
  80aec0:	80800017 	ldw	r2,0(r16)
  80aec4:	103ff826 	beq	r2,zero,80aea8 <_isatty_r+0x34>
  80aec8:	88800015 	stw	r2,0(r17)
  80aecc:	1805883a 	mov	r2,r3
  80aed0:	dfc00217 	ldw	ra,8(sp)
  80aed4:	dc400117 	ldw	r17,4(sp)
  80aed8:	dc000017 	ldw	r16,0(sp)
  80aedc:	dec00304 	addi	sp,sp,12
  80aee0:	f800283a 	ret

0080aee4 <_lseek_r>:
  80aee4:	defffd04 	addi	sp,sp,-12
  80aee8:	dc000015 	stw	r16,0(sp)
  80aeec:	04002074 	movhi	r16,129
  80aef0:	8416ef04 	addi	r16,r16,23484
  80aef4:	dc400115 	stw	r17,4(sp)
  80aef8:	80000015 	stw	zero,0(r16)
  80aefc:	2023883a 	mov	r17,r4
  80af00:	2809883a 	mov	r4,r5
  80af04:	300b883a 	mov	r5,r6
  80af08:	380d883a 	mov	r6,r7
  80af0c:	dfc00215 	stw	ra,8(sp)
  80af10:	080cabc0 	call	80cabc <lseek>
  80af14:	1007883a 	mov	r3,r2
  80af18:	00bfffc4 	movi	r2,-1
  80af1c:	18800626 	beq	r3,r2,80af38 <_lseek_r+0x54>
  80af20:	1805883a 	mov	r2,r3
  80af24:	dfc00217 	ldw	ra,8(sp)
  80af28:	dc400117 	ldw	r17,4(sp)
  80af2c:	dc000017 	ldw	r16,0(sp)
  80af30:	dec00304 	addi	sp,sp,12
  80af34:	f800283a 	ret
  80af38:	80800017 	ldw	r2,0(r16)
  80af3c:	103ff826 	beq	r2,zero,80af20 <_lseek_r+0x3c>
  80af40:	88800015 	stw	r2,0(r17)
  80af44:	1805883a 	mov	r2,r3
  80af48:	dfc00217 	ldw	ra,8(sp)
  80af4c:	dc400117 	ldw	r17,4(sp)
  80af50:	dc000017 	ldw	r16,0(sp)
  80af54:	dec00304 	addi	sp,sp,12
  80af58:	f800283a 	ret

0080af5c <_read_r>:
  80af5c:	defffd04 	addi	sp,sp,-12
  80af60:	dc000015 	stw	r16,0(sp)
  80af64:	04002074 	movhi	r16,129
  80af68:	8416ef04 	addi	r16,r16,23484
  80af6c:	dc400115 	stw	r17,4(sp)
  80af70:	80000015 	stw	zero,0(r16)
  80af74:	2023883a 	mov	r17,r4
  80af78:	2809883a 	mov	r4,r5
  80af7c:	300b883a 	mov	r5,r6
  80af80:	380d883a 	mov	r6,r7
  80af84:	dfc00215 	stw	ra,8(sp)
  80af88:	080ccb80 	call	80ccb8 <read>
  80af8c:	1007883a 	mov	r3,r2
  80af90:	00bfffc4 	movi	r2,-1
  80af94:	18800626 	beq	r3,r2,80afb0 <_read_r+0x54>
  80af98:	1805883a 	mov	r2,r3
  80af9c:	dfc00217 	ldw	ra,8(sp)
  80afa0:	dc400117 	ldw	r17,4(sp)
  80afa4:	dc000017 	ldw	r16,0(sp)
  80afa8:	dec00304 	addi	sp,sp,12
  80afac:	f800283a 	ret
  80afb0:	80800017 	ldw	r2,0(r16)
  80afb4:	103ff826 	beq	r2,zero,80af98 <_read_r+0x3c>
  80afb8:	88800015 	stw	r2,0(r17)
  80afbc:	1805883a 	mov	r2,r3
  80afc0:	dfc00217 	ldw	ra,8(sp)
  80afc4:	dc400117 	ldw	r17,4(sp)
  80afc8:	dc000017 	ldw	r16,0(sp)
  80afcc:	dec00304 	addi	sp,sp,12
  80afd0:	f800283a 	ret

0080afd4 <__udivdi3>:
  80afd4:	defff004 	addi	sp,sp,-64
  80afd8:	2005883a 	mov	r2,r4
  80afdc:	3011883a 	mov	r8,r6
  80afe0:	df000e15 	stw	fp,56(sp)
  80afe4:	dd000a15 	stw	r20,40(sp)
  80afe8:	dc000615 	stw	r16,24(sp)
  80afec:	dfc00f15 	stw	ra,60(sp)
  80aff0:	ddc00d15 	stw	r23,52(sp)
  80aff4:	dd800c15 	stw	r22,48(sp)
  80aff8:	dd400b15 	stw	r21,44(sp)
  80affc:	dcc00915 	stw	r19,36(sp)
  80b000:	dc800815 	stw	r18,32(sp)
  80b004:	dc400715 	stw	r17,28(sp)
  80b008:	4021883a 	mov	r16,r8
  80b00c:	1039883a 	mov	fp,r2
  80b010:	2829883a 	mov	r20,r5
  80b014:	38003b1e 	bne	r7,zero,80b104 <__udivdi3+0x130>
  80b018:	2a005c36 	bltu	r5,r8,80b18c <__udivdi3+0x1b8>
  80b01c:	4000a626 	beq	r8,zero,80b2b8 <__udivdi3+0x2e4>
  80b020:	00bfffd4 	movui	r2,65535
  80b024:	14009e36 	bltu	r2,r16,80b2a0 <__udivdi3+0x2cc>
  80b028:	00803fc4 	movi	r2,255
  80b02c:	14013d36 	bltu	r2,r16,80b524 <__udivdi3+0x550>
  80b030:	000b883a 	mov	r5,zero
  80b034:	0005883a 	mov	r2,zero
  80b038:	8084d83a 	srl	r2,r16,r2
  80b03c:	01002074 	movhi	r4,129
  80b040:	2107cf04 	addi	r4,r4,7996
  80b044:	01800804 	movi	r6,32
  80b048:	1105883a 	add	r2,r2,r4
  80b04c:	10c00003 	ldbu	r3,0(r2)
  80b050:	28c7883a 	add	r3,r5,r3
  80b054:	30edc83a 	sub	r22,r6,r3
  80b058:	b000ee1e 	bne	r22,zero,80b414 <__udivdi3+0x440>
  80b05c:	802ad43a 	srli	r21,r16,16
  80b060:	00800044 	movi	r2,1
  80b064:	a423c83a 	sub	r17,r20,r16
  80b068:	85ffffcc 	andi	r23,r16,65535
  80b06c:	d8800315 	stw	r2,12(sp)
  80b070:	8809883a 	mov	r4,r17
  80b074:	a80b883a 	mov	r5,r21
  80b078:	080c5e40 	call	80c5e4 <__udivsi3>
  80b07c:	8809883a 	mov	r4,r17
  80b080:	a80b883a 	mov	r5,r21
  80b084:	102d883a 	mov	r22,r2
  80b088:	080c5ec0 	call	80c5ec <__umodsi3>
  80b08c:	1004943a 	slli	r2,r2,16
  80b090:	e006d43a 	srli	r3,fp,16
  80b094:	bda3383a 	mul	r17,r23,r22
  80b098:	10c4b03a 	or	r2,r2,r3
  80b09c:	1440042e 	bgeu	r2,r17,80b0b0 <__udivdi3+0xdc>
  80b0a0:	1405883a 	add	r2,r2,r16
  80b0a4:	b5bfffc4 	addi	r22,r22,-1
  80b0a8:	14000136 	bltu	r2,r16,80b0b0 <__udivdi3+0xdc>
  80b0ac:	14413d36 	bltu	r2,r17,80b5a4 <__udivdi3+0x5d0>
  80b0b0:	1463c83a 	sub	r17,r2,r17
  80b0b4:	8809883a 	mov	r4,r17
  80b0b8:	a80b883a 	mov	r5,r21
  80b0bc:	080c5e40 	call	80c5e4 <__udivsi3>
  80b0c0:	8809883a 	mov	r4,r17
  80b0c4:	a80b883a 	mov	r5,r21
  80b0c8:	1029883a 	mov	r20,r2
  80b0cc:	080c5ec0 	call	80c5ec <__umodsi3>
  80b0d0:	1004943a 	slli	r2,r2,16
  80b0d4:	bd09383a 	mul	r4,r23,r20
  80b0d8:	e0ffffcc 	andi	r3,fp,65535
  80b0dc:	10c4b03a 	or	r2,r2,r3
  80b0e0:	1100042e 	bgeu	r2,r4,80b0f4 <__udivdi3+0x120>
  80b0e4:	8085883a 	add	r2,r16,r2
  80b0e8:	a53fffc4 	addi	r20,r20,-1
  80b0ec:	14000136 	bltu	r2,r16,80b0f4 <__udivdi3+0x120>
  80b0f0:	11012036 	bltu	r2,r4,80b574 <__udivdi3+0x5a0>
  80b0f4:	b004943a 	slli	r2,r22,16
  80b0f8:	d9000317 	ldw	r4,12(sp)
  80b0fc:	a084b03a 	or	r2,r20,r2
  80b100:	00001506 	br	80b158 <__udivdi3+0x184>
  80b104:	380d883a 	mov	r6,r7
  80b108:	29c06236 	bltu	r5,r7,80b294 <__udivdi3+0x2c0>
  80b10c:	00bfffd4 	movui	r2,65535
  80b110:	11c05a36 	bltu	r2,r7,80b27c <__udivdi3+0x2a8>
  80b114:	00803fc4 	movi	r2,255
  80b118:	11c0fc36 	bltu	r2,r7,80b50c <__udivdi3+0x538>
  80b11c:	000b883a 	mov	r5,zero
  80b120:	0005883a 	mov	r2,zero
  80b124:	3084d83a 	srl	r2,r6,r2
  80b128:	01002074 	movhi	r4,129
  80b12c:	2107cf04 	addi	r4,r4,7996
  80b130:	01c00804 	movi	r7,32
  80b134:	1105883a 	add	r2,r2,r4
  80b138:	10c00003 	ldbu	r3,0(r2)
  80b13c:	28c7883a 	add	r3,r5,r3
  80b140:	38efc83a 	sub	r23,r7,r3
  80b144:	b800691e 	bne	r23,zero,80b2ec <__udivdi3+0x318>
  80b148:	35000136 	bltu	r6,r20,80b150 <__udivdi3+0x17c>
  80b14c:	e4005136 	bltu	fp,r16,80b294 <__udivdi3+0x2c0>
  80b150:	00800044 	movi	r2,1
  80b154:	0009883a 	mov	r4,zero
  80b158:	2007883a 	mov	r3,r4
  80b15c:	dfc00f17 	ldw	ra,60(sp)
  80b160:	df000e17 	ldw	fp,56(sp)
  80b164:	ddc00d17 	ldw	r23,52(sp)
  80b168:	dd800c17 	ldw	r22,48(sp)
  80b16c:	dd400b17 	ldw	r21,44(sp)
  80b170:	dd000a17 	ldw	r20,40(sp)
  80b174:	dcc00917 	ldw	r19,36(sp)
  80b178:	dc800817 	ldw	r18,32(sp)
  80b17c:	dc400717 	ldw	r17,28(sp)
  80b180:	dc000617 	ldw	r16,24(sp)
  80b184:	dec01004 	addi	sp,sp,64
  80b188:	f800283a 	ret
  80b18c:	00bfffd4 	movui	r2,65535
  80b190:	12005036 	bltu	r2,r8,80b2d4 <__udivdi3+0x300>
  80b194:	00803fc4 	movi	r2,255
  80b198:	1200e836 	bltu	r2,r8,80b53c <__udivdi3+0x568>
  80b19c:	000b883a 	mov	r5,zero
  80b1a0:	0005883a 	mov	r2,zero
  80b1a4:	8084d83a 	srl	r2,r16,r2
  80b1a8:	01002074 	movhi	r4,129
  80b1ac:	2107cf04 	addi	r4,r4,7996
  80b1b0:	01800804 	movi	r6,32
  80b1b4:	1105883a 	add	r2,r2,r4
  80b1b8:	10c00003 	ldbu	r3,0(r2)
  80b1bc:	28c7883a 	add	r3,r5,r3
  80b1c0:	30cbc83a 	sub	r5,r6,r3
  80b1c4:	28000626 	beq	r5,zero,80b1e0 <__udivdi3+0x20c>
  80b1c8:	3145c83a 	sub	r2,r6,r5
  80b1cc:	e084d83a 	srl	r2,fp,r2
  80b1d0:	a146983a 	sll	r3,r20,r5
  80b1d4:	e178983a 	sll	fp,fp,r5
  80b1d8:	8160983a 	sll	r16,r16,r5
  80b1dc:	18a8b03a 	or	r20,r3,r2
  80b1e0:	802ad43a 	srli	r21,r16,16
  80b1e4:	a009883a 	mov	r4,r20
  80b1e8:	85ffffcc 	andi	r23,r16,65535
  80b1ec:	a80b883a 	mov	r5,r21
  80b1f0:	080c5e40 	call	80c5e4 <__udivsi3>
  80b1f4:	a009883a 	mov	r4,r20
  80b1f8:	a80b883a 	mov	r5,r21
  80b1fc:	102d883a 	mov	r22,r2
  80b200:	080c5ec0 	call	80c5ec <__umodsi3>
  80b204:	1004943a 	slli	r2,r2,16
  80b208:	e006d43a 	srli	r3,fp,16
  80b20c:	bda3383a 	mul	r17,r23,r22
  80b210:	10c4b03a 	or	r2,r2,r3
  80b214:	1440042e 	bgeu	r2,r17,80b228 <__udivdi3+0x254>
  80b218:	1405883a 	add	r2,r2,r16
  80b21c:	b5bfffc4 	addi	r22,r22,-1
  80b220:	14000136 	bltu	r2,r16,80b228 <__udivdi3+0x254>
  80b224:	1440d536 	bltu	r2,r17,80b57c <__udivdi3+0x5a8>
  80b228:	1463c83a 	sub	r17,r2,r17
  80b22c:	8809883a 	mov	r4,r17
  80b230:	a80b883a 	mov	r5,r21
  80b234:	080c5e40 	call	80c5e4 <__udivsi3>
  80b238:	8809883a 	mov	r4,r17
  80b23c:	a80b883a 	mov	r5,r21
  80b240:	1029883a 	mov	r20,r2
  80b244:	080c5ec0 	call	80c5ec <__umodsi3>
  80b248:	1004943a 	slli	r2,r2,16
  80b24c:	bd09383a 	mul	r4,r23,r20
  80b250:	e0ffffcc 	andi	r3,fp,65535
  80b254:	10c4b03a 	or	r2,r2,r3
  80b258:	1100042e 	bgeu	r2,r4,80b26c <__udivdi3+0x298>
  80b25c:	8085883a 	add	r2,r16,r2
  80b260:	a53fffc4 	addi	r20,r20,-1
  80b264:	14000136 	bltu	r2,r16,80b26c <__udivdi3+0x298>
  80b268:	1100c736 	bltu	r2,r4,80b588 <__udivdi3+0x5b4>
  80b26c:	b004943a 	slli	r2,r22,16
  80b270:	0009883a 	mov	r4,zero
  80b274:	a084b03a 	or	r2,r20,r2
  80b278:	003fb706 	br	80b158 <__udivdi3+0x184>
  80b27c:	00804034 	movhi	r2,256
  80b280:	10bfffc4 	addi	r2,r2,-1
  80b284:	11c0a436 	bltu	r2,r7,80b518 <__udivdi3+0x544>
  80b288:	01400404 	movi	r5,16
  80b28c:	2805883a 	mov	r2,r5
  80b290:	003fa406 	br	80b124 <__udivdi3+0x150>
  80b294:	0005883a 	mov	r2,zero
  80b298:	0009883a 	mov	r4,zero
  80b29c:	003fae06 	br	80b158 <__udivdi3+0x184>
  80b2a0:	00804034 	movhi	r2,256
  80b2a4:	10bfffc4 	addi	r2,r2,-1
  80b2a8:	1400a136 	bltu	r2,r16,80b530 <__udivdi3+0x55c>
  80b2ac:	01400404 	movi	r5,16
  80b2b0:	2805883a 	mov	r2,r5
  80b2b4:	003f6006 	br	80b038 <__udivdi3+0x64>
  80b2b8:	01000044 	movi	r4,1
  80b2bc:	000b883a 	mov	r5,zero
  80b2c0:	080c5e40 	call	80c5e4 <__udivsi3>
  80b2c4:	1021883a 	mov	r16,r2
  80b2c8:	00bfffd4 	movui	r2,65535
  80b2cc:	143ff436 	bltu	r2,r16,80b2a0 <__udivdi3+0x2cc>
  80b2d0:	003f5506 	br	80b028 <__udivdi3+0x54>
  80b2d4:	00804034 	movhi	r2,256
  80b2d8:	10bfffc4 	addi	r2,r2,-1
  80b2dc:	12009a36 	bltu	r2,r8,80b548 <__udivdi3+0x574>
  80b2e0:	01400404 	movi	r5,16
  80b2e4:	2805883a 	mov	r2,r5
  80b2e8:	003fae06 	br	80b1a4 <__udivdi3+0x1d0>
  80b2ec:	3dc5c83a 	sub	r2,r7,r23
  80b2f0:	35c8983a 	sll	r4,r6,r23
  80b2f4:	8086d83a 	srl	r3,r16,r2
  80b2f8:	a0a2d83a 	srl	r17,r20,r2
  80b2fc:	e084d83a 	srl	r2,fp,r2
  80b300:	20eab03a 	or	r21,r4,r3
  80b304:	a82cd43a 	srli	r22,r21,16
  80b308:	a5c6983a 	sll	r3,r20,r23
  80b30c:	8809883a 	mov	r4,r17
  80b310:	b00b883a 	mov	r5,r22
  80b314:	1886b03a 	or	r3,r3,r2
  80b318:	d8c00215 	stw	r3,8(sp)
  80b31c:	080c5e40 	call	80c5e4 <__udivsi3>
  80b320:	8809883a 	mov	r4,r17
  80b324:	b00b883a 	mov	r5,r22
  80b328:	1029883a 	mov	r20,r2
  80b32c:	080c5ec0 	call	80c5ec <__umodsi3>
  80b330:	a8ffffcc 	andi	r3,r21,65535
  80b334:	d8c00515 	stw	r3,20(sp)
  80b338:	d9000217 	ldw	r4,8(sp)
  80b33c:	d9400517 	ldw	r5,20(sp)
  80b340:	1004943a 	slli	r2,r2,16
  80b344:	2006d43a 	srli	r3,r4,16
  80b348:	85e0983a 	sll	r16,r16,r23
  80b34c:	2d23383a 	mul	r17,r5,r20
  80b350:	10c4b03a 	or	r2,r2,r3
  80b354:	dc000015 	stw	r16,0(sp)
  80b358:	1440032e 	bgeu	r2,r17,80b368 <__udivdi3+0x394>
  80b35c:	1545883a 	add	r2,r2,r21
  80b360:	a53fffc4 	addi	r20,r20,-1
  80b364:	15407f2e 	bgeu	r2,r21,80b564 <__udivdi3+0x590>
  80b368:	1463c83a 	sub	r17,r2,r17
  80b36c:	8809883a 	mov	r4,r17
  80b370:	b00b883a 	mov	r5,r22
  80b374:	080c5e40 	call	80c5e4 <__udivsi3>
  80b378:	8809883a 	mov	r4,r17
  80b37c:	b00b883a 	mov	r5,r22
  80b380:	1021883a 	mov	r16,r2
  80b384:	080c5ec0 	call	80c5ec <__umodsi3>
  80b388:	d8c00517 	ldw	r3,20(sp)
  80b38c:	d9000217 	ldw	r4,8(sp)
  80b390:	1004943a 	slli	r2,r2,16
  80b394:	1c0f383a 	mul	r7,r3,r16
  80b398:	20ffffcc 	andi	r3,r4,65535
  80b39c:	10e2b03a 	or	r17,r2,r3
  80b3a0:	89c0032e 	bgeu	r17,r7,80b3b0 <__udivdi3+0x3dc>
  80b3a4:	8d63883a 	add	r17,r17,r21
  80b3a8:	843fffc4 	addi	r16,r16,-1
  80b3ac:	8d40692e 	bgeu	r17,r21,80b554 <__udivdi3+0x580>
  80b3b0:	a008943a 	slli	r4,r20,16
  80b3b4:	d9400017 	ldw	r5,0(sp)
  80b3b8:	89e3c83a 	sub	r17,r17,r7
  80b3bc:	8110b03a 	or	r8,r16,r4
  80b3c0:	280cd43a 	srli	r6,r5,16
  80b3c4:	28ffffcc 	andi	r3,r5,65535
  80b3c8:	40bfffcc 	andi	r2,r8,65535
  80b3cc:	400ad43a 	srli	r5,r8,16
  80b3d0:	10d3383a 	mul	r9,r2,r3
  80b3d4:	1185383a 	mul	r2,r2,r6
  80b3d8:	28c7383a 	mul	r3,r5,r3
  80b3dc:	4808d43a 	srli	r4,r9,16
  80b3e0:	298b383a 	mul	r5,r5,r6
  80b3e4:	10c5883a 	add	r2,r2,r3
  80b3e8:	2089883a 	add	r4,r4,r2
  80b3ec:	20c0022e 	bgeu	r4,r3,80b3f8 <__udivdi3+0x424>
  80b3f0:	00800074 	movhi	r2,1
  80b3f4:	288b883a 	add	r5,r5,r2
  80b3f8:	2004d43a 	srli	r2,r4,16
  80b3fc:	288b883a 	add	r5,r5,r2
  80b400:	89403f36 	bltu	r17,r5,80b500 <__udivdi3+0x52c>
  80b404:	89403926 	beq	r17,r5,80b4ec <__udivdi3+0x518>
  80b408:	4005883a 	mov	r2,r8
  80b40c:	0009883a 	mov	r4,zero
  80b410:	003f5106 	br	80b158 <__udivdi3+0x184>
  80b414:	85a0983a 	sll	r16,r16,r22
  80b418:	3585c83a 	sub	r2,r6,r22
  80b41c:	a0a2d83a 	srl	r17,r20,r2
  80b420:	802ad43a 	srli	r21,r16,16
  80b424:	e084d83a 	srl	r2,fp,r2
  80b428:	a586983a 	sll	r3,r20,r22
  80b42c:	8809883a 	mov	r4,r17
  80b430:	a80b883a 	mov	r5,r21
  80b434:	1886b03a 	or	r3,r3,r2
  80b438:	d8c00115 	stw	r3,4(sp)
  80b43c:	080c5e40 	call	80c5e4 <__udivsi3>
  80b440:	8809883a 	mov	r4,r17
  80b444:	a80b883a 	mov	r5,r21
  80b448:	d8800415 	stw	r2,16(sp)
  80b44c:	080c5ec0 	call	80c5ec <__umodsi3>
  80b450:	d9000117 	ldw	r4,4(sp)
  80b454:	d9400417 	ldw	r5,16(sp)
  80b458:	1004943a 	slli	r2,r2,16
  80b45c:	85ffffcc 	andi	r23,r16,65535
  80b460:	2006d43a 	srli	r3,r4,16
  80b464:	b963383a 	mul	r17,r23,r5
  80b468:	10c4b03a 	or	r2,r2,r3
  80b46c:	1440042e 	bgeu	r2,r17,80b480 <__udivdi3+0x4ac>
  80b470:	297fffc4 	addi	r5,r5,-1
  80b474:	1405883a 	add	r2,r2,r16
  80b478:	d9400415 	stw	r5,16(sp)
  80b47c:	1400442e 	bgeu	r2,r16,80b590 <__udivdi3+0x5bc>
  80b480:	1463c83a 	sub	r17,r2,r17
  80b484:	8809883a 	mov	r4,r17
  80b488:	a80b883a 	mov	r5,r21
  80b48c:	080c5e40 	call	80c5e4 <__udivsi3>
  80b490:	8809883a 	mov	r4,r17
  80b494:	a80b883a 	mov	r5,r21
  80b498:	1029883a 	mov	r20,r2
  80b49c:	080c5ec0 	call	80c5ec <__umodsi3>
  80b4a0:	d9400117 	ldw	r5,4(sp)
  80b4a4:	1004943a 	slli	r2,r2,16
  80b4a8:	bd09383a 	mul	r4,r23,r20
  80b4ac:	28ffffcc 	andi	r3,r5,65535
  80b4b0:	10c6b03a 	or	r3,r2,r3
  80b4b4:	1900062e 	bgeu	r3,r4,80b4d0 <__udivdi3+0x4fc>
  80b4b8:	1c07883a 	add	r3,r3,r16
  80b4bc:	a53fffc4 	addi	r20,r20,-1
  80b4c0:	1c000336 	bltu	r3,r16,80b4d0 <__udivdi3+0x4fc>
  80b4c4:	1900022e 	bgeu	r3,r4,80b4d0 <__udivdi3+0x4fc>
  80b4c8:	a53fffc4 	addi	r20,r20,-1
  80b4cc:	1c07883a 	add	r3,r3,r16
  80b4d0:	d9400417 	ldw	r5,16(sp)
  80b4d4:	e5b8983a 	sll	fp,fp,r22
  80b4d8:	1923c83a 	sub	r17,r3,r4
  80b4dc:	2804943a 	slli	r2,r5,16
  80b4e0:	a0a8b03a 	or	r20,r20,r2
  80b4e4:	dd000315 	stw	r20,12(sp)
  80b4e8:	003ee106 	br	80b070 <__udivdi3+0x9c>
  80b4ec:	2004943a 	slli	r2,r4,16
  80b4f0:	e5c8983a 	sll	r4,fp,r23
  80b4f4:	48ffffcc 	andi	r3,r9,65535
  80b4f8:	10c5883a 	add	r2,r2,r3
  80b4fc:	20bfc22e 	bgeu	r4,r2,80b408 <__udivdi3+0x434>
  80b500:	40bfffc4 	addi	r2,r8,-1
  80b504:	0009883a 	mov	r4,zero
  80b508:	003f1306 	br	80b158 <__udivdi3+0x184>
  80b50c:	01400204 	movi	r5,8
  80b510:	2805883a 	mov	r2,r5
  80b514:	003f0306 	br	80b124 <__udivdi3+0x150>
  80b518:	01400604 	movi	r5,24
  80b51c:	2805883a 	mov	r2,r5
  80b520:	003f0006 	br	80b124 <__udivdi3+0x150>
  80b524:	01400204 	movi	r5,8
  80b528:	2805883a 	mov	r2,r5
  80b52c:	003ec206 	br	80b038 <__udivdi3+0x64>
  80b530:	01400604 	movi	r5,24
  80b534:	2805883a 	mov	r2,r5
  80b538:	003ebf06 	br	80b038 <__udivdi3+0x64>
  80b53c:	01400204 	movi	r5,8
  80b540:	2805883a 	mov	r2,r5
  80b544:	003f1706 	br	80b1a4 <__udivdi3+0x1d0>
  80b548:	01400604 	movi	r5,24
  80b54c:	2805883a 	mov	r2,r5
  80b550:	003f1406 	br	80b1a4 <__udivdi3+0x1d0>
  80b554:	89ff962e 	bgeu	r17,r7,80b3b0 <__udivdi3+0x3dc>
  80b558:	8d63883a 	add	r17,r17,r21
  80b55c:	843fffc4 	addi	r16,r16,-1
  80b560:	003f9306 	br	80b3b0 <__udivdi3+0x3dc>
  80b564:	147f802e 	bgeu	r2,r17,80b368 <__udivdi3+0x394>
  80b568:	a53fffc4 	addi	r20,r20,-1
  80b56c:	1545883a 	add	r2,r2,r21
  80b570:	003f7d06 	br	80b368 <__udivdi3+0x394>
  80b574:	a53fffc4 	addi	r20,r20,-1
  80b578:	003ede06 	br	80b0f4 <__udivdi3+0x120>
  80b57c:	b5bfffc4 	addi	r22,r22,-1
  80b580:	1405883a 	add	r2,r2,r16
  80b584:	003f2806 	br	80b228 <__udivdi3+0x254>
  80b588:	a53fffc4 	addi	r20,r20,-1
  80b58c:	003f3706 	br	80b26c <__udivdi3+0x298>
  80b590:	147fbb2e 	bgeu	r2,r17,80b480 <__udivdi3+0x4ac>
  80b594:	297fffc4 	addi	r5,r5,-1
  80b598:	1405883a 	add	r2,r2,r16
  80b59c:	d9400415 	stw	r5,16(sp)
  80b5a0:	003fb706 	br	80b480 <__udivdi3+0x4ac>
  80b5a4:	b5bfffc4 	addi	r22,r22,-1
  80b5a8:	1405883a 	add	r2,r2,r16
  80b5ac:	003ec006 	br	80b0b0 <__udivdi3+0xdc>

0080b5b0 <__umoddi3>:
  80b5b0:	defff104 	addi	sp,sp,-60
  80b5b4:	dd800b15 	stw	r22,44(sp)
  80b5b8:	dd000915 	stw	r20,36(sp)
  80b5bc:	dc000515 	stw	r16,20(sp)
  80b5c0:	dfc00e15 	stw	ra,56(sp)
  80b5c4:	df000d15 	stw	fp,52(sp)
  80b5c8:	ddc00c15 	stw	r23,48(sp)
  80b5cc:	dd400a15 	stw	r21,40(sp)
  80b5d0:	dcc00815 	stw	r19,32(sp)
  80b5d4:	dc800715 	stw	r18,28(sp)
  80b5d8:	dc400615 	stw	r17,24(sp)
  80b5dc:	3021883a 	mov	r16,r6
  80b5e0:	202d883a 	mov	r22,r4
  80b5e4:	2829883a 	mov	r20,r5
  80b5e8:	38002b1e 	bne	r7,zero,80b698 <__umoddi3+0xe8>
  80b5ec:	29805036 	bltu	r5,r6,80b730 <__umoddi3+0x180>
  80b5f0:	30008a26 	beq	r6,zero,80b81c <__umoddi3+0x26c>
  80b5f4:	00bfffd4 	movui	r2,65535
  80b5f8:	14008236 	bltu	r2,r16,80b804 <__umoddi3+0x254>
  80b5fc:	00803fc4 	movi	r2,255
  80b600:	14013636 	bltu	r2,r16,80badc <__umoddi3+0x52c>
  80b604:	000b883a 	mov	r5,zero
  80b608:	0005883a 	mov	r2,zero
  80b60c:	8084d83a 	srl	r2,r16,r2
  80b610:	01002074 	movhi	r4,129
  80b614:	2107cf04 	addi	r4,r4,7996
  80b618:	01800804 	movi	r6,32
  80b61c:	1105883a 	add	r2,r2,r4
  80b620:	10c00003 	ldbu	r3,0(r2)
  80b624:	28c7883a 	add	r3,r5,r3
  80b628:	30efc83a 	sub	r23,r6,r3
  80b62c:	b800941e 	bne	r23,zero,80b880 <__umoddi3+0x2d0>
  80b630:	802ad43a 	srli	r21,r16,16
  80b634:	a423c83a 	sub	r17,r20,r16
  80b638:	0039883a 	mov	fp,zero
  80b63c:	853fffcc 	andi	r20,r16,65535
  80b640:	8809883a 	mov	r4,r17
  80b644:	a80b883a 	mov	r5,r21
  80b648:	080c5e40 	call	80c5e4 <__udivsi3>
  80b64c:	8809883a 	mov	r4,r17
  80b650:	a80b883a 	mov	r5,r21
  80b654:	a0a3383a 	mul	r17,r20,r2
  80b658:	080c5ec0 	call	80c5ec <__umodsi3>
  80b65c:	1004943a 	slli	r2,r2,16
  80b660:	b006d43a 	srli	r3,r22,16
  80b664:	10c4b03a 	or	r2,r2,r3
  80b668:	1440032e 	bgeu	r2,r17,80b678 <__umoddi3+0xc8>
  80b66c:	1405883a 	add	r2,r2,r16
  80b670:	14000136 	bltu	r2,r16,80b678 <__umoddi3+0xc8>
  80b674:	14413536 	bltu	r2,r17,80bb4c <__umoddi3+0x59c>
  80b678:	1463c83a 	sub	r17,r2,r17
  80b67c:	8809883a 	mov	r4,r17
  80b680:	a80b883a 	mov	r5,r21
  80b684:	080c5e40 	call	80c5e4 <__udivsi3>
  80b688:	8809883a 	mov	r4,r17
  80b68c:	a0a3383a 	mul	r17,r20,r2
  80b690:	a80b883a 	mov	r5,r21
  80b694:	00004d06 	br	80b7cc <__umoddi3+0x21c>
  80b698:	380d883a 	mov	r6,r7
  80b69c:	29c0102e 	bgeu	r5,r7,80b6e0 <__umoddi3+0x130>
  80b6a0:	2011883a 	mov	r8,r4
  80b6a4:	2813883a 	mov	r9,r5
  80b6a8:	4005883a 	mov	r2,r8
  80b6ac:	4807883a 	mov	r3,r9
  80b6b0:	dfc00e17 	ldw	ra,56(sp)
  80b6b4:	df000d17 	ldw	fp,52(sp)
  80b6b8:	ddc00c17 	ldw	r23,48(sp)
  80b6bc:	dd800b17 	ldw	r22,44(sp)
  80b6c0:	dd400a17 	ldw	r21,40(sp)
  80b6c4:	dd000917 	ldw	r20,36(sp)
  80b6c8:	dcc00817 	ldw	r19,32(sp)
  80b6cc:	dc800717 	ldw	r18,28(sp)
  80b6d0:	dc400617 	ldw	r17,24(sp)
  80b6d4:	dc000517 	ldw	r16,20(sp)
  80b6d8:	dec00f04 	addi	sp,sp,60
  80b6dc:	f800283a 	ret
  80b6e0:	00bfffd4 	movui	r2,65535
  80b6e4:	11c05a36 	bltu	r2,r7,80b850 <__umoddi3+0x2a0>
  80b6e8:	00803fc4 	movi	r2,255
  80b6ec:	11c0fe36 	bltu	r2,r7,80bae8 <__umoddi3+0x538>
  80b6f0:	000b883a 	mov	r5,zero
  80b6f4:	0005883a 	mov	r2,zero
  80b6f8:	3084d83a 	srl	r2,r6,r2
  80b6fc:	01002074 	movhi	r4,129
  80b700:	2107cf04 	addi	r4,r4,7996
  80b704:	01c00804 	movi	r7,32
  80b708:	1105883a 	add	r2,r2,r4
  80b70c:	10c00003 	ldbu	r3,0(r2)
  80b710:	28c7883a 	add	r3,r5,r3
  80b714:	38ebc83a 	sub	r21,r7,r3
  80b718:	a800851e 	bne	r21,zero,80b930 <__umoddi3+0x380>
  80b71c:	35005236 	bltu	r6,r20,80b868 <__umoddi3+0x2b8>
  80b720:	b400512e 	bgeu	r22,r16,80b868 <__umoddi3+0x2b8>
  80b724:	b011883a 	mov	r8,r22
  80b728:	a013883a 	mov	r9,r20
  80b72c:	003fde06 	br	80b6a8 <__umoddi3+0xf8>
  80b730:	00bfffd4 	movui	r2,65535
  80b734:	11804036 	bltu	r2,r6,80b838 <__umoddi3+0x288>
  80b738:	00803fc4 	movi	r2,255
  80b73c:	1180ed36 	bltu	r2,r6,80baf4 <__umoddi3+0x544>
  80b740:	000b883a 	mov	r5,zero
  80b744:	0005883a 	mov	r2,zero
  80b748:	8084d83a 	srl	r2,r16,r2
  80b74c:	01002074 	movhi	r4,129
  80b750:	2107cf04 	addi	r4,r4,7996
  80b754:	01800804 	movi	r6,32
  80b758:	1105883a 	add	r2,r2,r4
  80b75c:	10c00003 	ldbu	r3,0(r2)
  80b760:	28c7883a 	add	r3,r5,r3
  80b764:	30c7c83a 	sub	r3,r6,r3
  80b768:	1800bf1e 	bne	r3,zero,80ba68 <__umoddi3+0x4b8>
  80b76c:	0039883a 	mov	fp,zero
  80b770:	802ad43a 	srli	r21,r16,16
  80b774:	a009883a 	mov	r4,r20
  80b778:	85ffffcc 	andi	r23,r16,65535
  80b77c:	a80b883a 	mov	r5,r21
  80b780:	080c5e40 	call	80c5e4 <__udivsi3>
  80b784:	a009883a 	mov	r4,r20
  80b788:	a80b883a 	mov	r5,r21
  80b78c:	b8a3383a 	mul	r17,r23,r2
  80b790:	080c5ec0 	call	80c5ec <__umodsi3>
  80b794:	1004943a 	slli	r2,r2,16
  80b798:	b006d43a 	srli	r3,r22,16
  80b79c:	10c4b03a 	or	r2,r2,r3
  80b7a0:	1440032e 	bgeu	r2,r17,80b7b0 <__umoddi3+0x200>
  80b7a4:	1405883a 	add	r2,r2,r16
  80b7a8:	14000136 	bltu	r2,r16,80b7b0 <__umoddi3+0x200>
  80b7ac:	1440e536 	bltu	r2,r17,80bb44 <__umoddi3+0x594>
  80b7b0:	1463c83a 	sub	r17,r2,r17
  80b7b4:	8809883a 	mov	r4,r17
  80b7b8:	a80b883a 	mov	r5,r21
  80b7bc:	080c5e40 	call	80c5e4 <__udivsi3>
  80b7c0:	8809883a 	mov	r4,r17
  80b7c4:	b8a3383a 	mul	r17,r23,r2
  80b7c8:	a80b883a 	mov	r5,r21
  80b7cc:	080c5ec0 	call	80c5ec <__umodsi3>
  80b7d0:	1004943a 	slli	r2,r2,16
  80b7d4:	b0ffffcc 	andi	r3,r22,65535
  80b7d8:	10c4b03a 	or	r2,r2,r3
  80b7dc:	1440042e 	bgeu	r2,r17,80b7f0 <__umoddi3+0x240>
  80b7e0:	1405883a 	add	r2,r2,r16
  80b7e4:	14000236 	bltu	r2,r16,80b7f0 <__umoddi3+0x240>
  80b7e8:	1440012e 	bgeu	r2,r17,80b7f0 <__umoddi3+0x240>
  80b7ec:	1405883a 	add	r2,r2,r16
  80b7f0:	1445c83a 	sub	r2,r2,r17
  80b7f4:	1724d83a 	srl	r18,r2,fp
  80b7f8:	0013883a 	mov	r9,zero
  80b7fc:	9011883a 	mov	r8,r18
  80b800:	003fa906 	br	80b6a8 <__umoddi3+0xf8>
  80b804:	00804034 	movhi	r2,256
  80b808:	10bfffc4 	addi	r2,r2,-1
  80b80c:	1400b036 	bltu	r2,r16,80bad0 <__umoddi3+0x520>
  80b810:	01400404 	movi	r5,16
  80b814:	2805883a 	mov	r2,r5
  80b818:	003f7c06 	br	80b60c <__umoddi3+0x5c>
  80b81c:	01000044 	movi	r4,1
  80b820:	000b883a 	mov	r5,zero
  80b824:	080c5e40 	call	80c5e4 <__udivsi3>
  80b828:	1021883a 	mov	r16,r2
  80b82c:	00bfffd4 	movui	r2,65535
  80b830:	143ff436 	bltu	r2,r16,80b804 <__umoddi3+0x254>
  80b834:	003f7106 	br	80b5fc <__umoddi3+0x4c>
  80b838:	00804034 	movhi	r2,256
  80b83c:	10bfffc4 	addi	r2,r2,-1
  80b840:	1180af36 	bltu	r2,r6,80bb00 <__umoddi3+0x550>
  80b844:	01400404 	movi	r5,16
  80b848:	2805883a 	mov	r2,r5
  80b84c:	003fbe06 	br	80b748 <__umoddi3+0x198>
  80b850:	00804034 	movhi	r2,256
  80b854:	10bfffc4 	addi	r2,r2,-1
  80b858:	11c0ac36 	bltu	r2,r7,80bb0c <__umoddi3+0x55c>
  80b85c:	01400404 	movi	r5,16
  80b860:	2805883a 	mov	r2,r5
  80b864:	003fa406 	br	80b6f8 <__umoddi3+0x148>
  80b868:	b409c83a 	sub	r4,r22,r16
  80b86c:	b105803a 	cmpltu	r2,r22,r4
  80b870:	a187c83a 	sub	r3,r20,r6
  80b874:	18a9c83a 	sub	r20,r3,r2
  80b878:	202d883a 	mov	r22,r4
  80b87c:	003fa906 	br	80b724 <__umoddi3+0x174>
  80b880:	85e0983a 	sll	r16,r16,r23
  80b884:	35c5c83a 	sub	r2,r6,r23
  80b888:	a0a2d83a 	srl	r17,r20,r2
  80b88c:	802ad43a 	srli	r21,r16,16
  80b890:	b084d83a 	srl	r2,r22,r2
  80b894:	a5c6983a 	sll	r3,r20,r23
  80b898:	8809883a 	mov	r4,r17
  80b89c:	a80b883a 	mov	r5,r21
  80b8a0:	1886b03a 	or	r3,r3,r2
  80b8a4:	d8c00115 	stw	r3,4(sp)
  80b8a8:	853fffcc 	andi	r20,r16,65535
  80b8ac:	080c5e40 	call	80c5e4 <__udivsi3>
  80b8b0:	8809883a 	mov	r4,r17
  80b8b4:	a80b883a 	mov	r5,r21
  80b8b8:	a0a3383a 	mul	r17,r20,r2
  80b8bc:	080c5ec0 	call	80c5ec <__umodsi3>
  80b8c0:	d9000117 	ldw	r4,4(sp)
  80b8c4:	1004943a 	slli	r2,r2,16
  80b8c8:	b839883a 	mov	fp,r23
  80b8cc:	2006d43a 	srli	r3,r4,16
  80b8d0:	10c4b03a 	or	r2,r2,r3
  80b8d4:	1440022e 	bgeu	r2,r17,80b8e0 <__umoddi3+0x330>
  80b8d8:	1405883a 	add	r2,r2,r16
  80b8dc:	1400962e 	bgeu	r2,r16,80bb38 <__umoddi3+0x588>
  80b8e0:	1463c83a 	sub	r17,r2,r17
  80b8e4:	8809883a 	mov	r4,r17
  80b8e8:	a80b883a 	mov	r5,r21
  80b8ec:	080c5e40 	call	80c5e4 <__udivsi3>
  80b8f0:	8809883a 	mov	r4,r17
  80b8f4:	a80b883a 	mov	r5,r21
  80b8f8:	a0a3383a 	mul	r17,r20,r2
  80b8fc:	080c5ec0 	call	80c5ec <__umodsi3>
  80b900:	d9400117 	ldw	r5,4(sp)
  80b904:	1004943a 	slli	r2,r2,16
  80b908:	28ffffcc 	andi	r3,r5,65535
  80b90c:	10c4b03a 	or	r2,r2,r3
  80b910:	1440042e 	bgeu	r2,r17,80b924 <__umoddi3+0x374>
  80b914:	1405883a 	add	r2,r2,r16
  80b918:	14000236 	bltu	r2,r16,80b924 <__umoddi3+0x374>
  80b91c:	1440012e 	bgeu	r2,r17,80b924 <__umoddi3+0x374>
  80b920:	1405883a 	add	r2,r2,r16
  80b924:	b5ec983a 	sll	r22,r22,r23
  80b928:	1463c83a 	sub	r17,r2,r17
  80b92c:	003f4406 	br	80b640 <__umoddi3+0x90>
  80b930:	3d4fc83a 	sub	r7,r7,r21
  80b934:	3546983a 	sll	r3,r6,r21
  80b938:	81c4d83a 	srl	r2,r16,r7
  80b93c:	a1e2d83a 	srl	r17,r20,r7
  80b940:	a54c983a 	sll	r6,r20,r21
  80b944:	18aeb03a 	or	r23,r3,r2
  80b948:	b828d43a 	srli	r20,r23,16
  80b94c:	b1c4d83a 	srl	r2,r22,r7
  80b950:	8809883a 	mov	r4,r17
  80b954:	a00b883a 	mov	r5,r20
  80b958:	308cb03a 	or	r6,r6,r2
  80b95c:	d9c00315 	stw	r7,12(sp)
  80b960:	d9800215 	stw	r6,8(sp)
  80b964:	080c5e40 	call	80c5e4 <__udivsi3>
  80b968:	8809883a 	mov	r4,r17
  80b96c:	a00b883a 	mov	r5,r20
  80b970:	1039883a 	mov	fp,r2
  80b974:	080c5ec0 	call	80c5ec <__umodsi3>
  80b978:	b8ffffcc 	andi	r3,r23,65535
  80b97c:	d8c00415 	stw	r3,16(sp)
  80b980:	d9000217 	ldw	r4,8(sp)
  80b984:	d9400417 	ldw	r5,16(sp)
  80b988:	1004943a 	slli	r2,r2,16
  80b98c:	2006d43a 	srli	r3,r4,16
  80b990:	8560983a 	sll	r16,r16,r21
  80b994:	2f23383a 	mul	r17,r5,fp
  80b998:	10c4b03a 	or	r2,r2,r3
  80b99c:	dc000015 	stw	r16,0(sp)
  80b9a0:	b56c983a 	sll	r22,r22,r21
  80b9a4:	1440032e 	bgeu	r2,r17,80b9b4 <__umoddi3+0x404>
  80b9a8:	15c5883a 	add	r2,r2,r23
  80b9ac:	e73fffc4 	addi	fp,fp,-1
  80b9b0:	15c05d2e 	bgeu	r2,r23,80bb28 <__umoddi3+0x578>
  80b9b4:	1463c83a 	sub	r17,r2,r17
  80b9b8:	8809883a 	mov	r4,r17
  80b9bc:	a00b883a 	mov	r5,r20
  80b9c0:	080c5e40 	call	80c5e4 <__udivsi3>
  80b9c4:	8809883a 	mov	r4,r17
  80b9c8:	a00b883a 	mov	r5,r20
  80b9cc:	1021883a 	mov	r16,r2
  80b9d0:	080c5ec0 	call	80c5ec <__umodsi3>
  80b9d4:	d8c00417 	ldw	r3,16(sp)
  80b9d8:	d9000217 	ldw	r4,8(sp)
  80b9dc:	1004943a 	slli	r2,r2,16
  80b9e0:	1c23383a 	mul	r17,r3,r16
  80b9e4:	20ffffcc 	andi	r3,r4,65535
  80b9e8:	10ceb03a 	or	r7,r2,r3
  80b9ec:	3c40032e 	bgeu	r7,r17,80b9fc <__umoddi3+0x44c>
  80b9f0:	3dcf883a 	add	r7,r7,r23
  80b9f4:	843fffc4 	addi	r16,r16,-1
  80b9f8:	3dc0472e 	bgeu	r7,r23,80bb18 <__umoddi3+0x568>
  80b9fc:	e004943a 	slli	r2,fp,16
  80ba00:	d9400017 	ldw	r5,0(sp)
  80ba04:	3c4fc83a 	sub	r7,r7,r17
  80ba08:	8084b03a 	or	r2,r16,r2
  80ba0c:	28ffffcc 	andi	r3,r5,65535
  80ba10:	280cd43a 	srli	r6,r5,16
  80ba14:	100ad43a 	srli	r5,r2,16
  80ba18:	10bfffcc 	andi	r2,r2,65535
  80ba1c:	10d1383a 	mul	r8,r2,r3
  80ba20:	28c7383a 	mul	r3,r5,r3
  80ba24:	1185383a 	mul	r2,r2,r6
  80ba28:	4008d43a 	srli	r4,r8,16
  80ba2c:	298b383a 	mul	r5,r5,r6
  80ba30:	10c5883a 	add	r2,r2,r3
  80ba34:	2089883a 	add	r4,r4,r2
  80ba38:	20c0022e 	bgeu	r4,r3,80ba44 <__umoddi3+0x494>
  80ba3c:	00800074 	movhi	r2,1
  80ba40:	288b883a 	add	r5,r5,r2
  80ba44:	2004d43a 	srli	r2,r4,16
  80ba48:	2008943a 	slli	r4,r4,16
  80ba4c:	40ffffcc 	andi	r3,r8,65535
  80ba50:	288b883a 	add	r5,r5,r2
  80ba54:	20c9883a 	add	r4,r4,r3
  80ba58:	39400b36 	bltu	r7,r5,80ba88 <__umoddi3+0x4d8>
  80ba5c:	39403d26 	beq	r7,r5,80bb54 <__umoddi3+0x5a4>
  80ba60:	394bc83a 	sub	r5,r7,r5
  80ba64:	00000f06 	br	80baa4 <__umoddi3+0x4f4>
  80ba68:	30c5c83a 	sub	r2,r6,r3
  80ba6c:	1839883a 	mov	fp,r3
  80ba70:	b084d83a 	srl	r2,r22,r2
  80ba74:	a0c6983a 	sll	r3,r20,r3
  80ba78:	8720983a 	sll	r16,r16,fp
  80ba7c:	b72c983a 	sll	r22,r22,fp
  80ba80:	18a8b03a 	or	r20,r3,r2
  80ba84:	003f3a06 	br	80b770 <__umoddi3+0x1c0>
  80ba88:	d8c00017 	ldw	r3,0(sp)
  80ba8c:	20c5c83a 	sub	r2,r4,r3
  80ba90:	2089803a 	cmpltu	r4,r4,r2
  80ba94:	2dc7c83a 	sub	r3,r5,r23
  80ba98:	1907c83a 	sub	r3,r3,r4
  80ba9c:	38cbc83a 	sub	r5,r7,r3
  80baa0:	1009883a 	mov	r4,r2
  80baa4:	b105c83a 	sub	r2,r22,r4
  80baa8:	b087803a 	cmpltu	r3,r22,r2
  80baac:	28c7c83a 	sub	r3,r5,r3
  80bab0:	d9400317 	ldw	r5,12(sp)
  80bab4:	1544d83a 	srl	r2,r2,r21
  80bab8:	1948983a 	sll	r4,r3,r5
  80babc:	1d46d83a 	srl	r3,r3,r21
  80bac0:	20a4b03a 	or	r18,r4,r2
  80bac4:	9011883a 	mov	r8,r18
  80bac8:	1813883a 	mov	r9,r3
  80bacc:	003ef606 	br	80b6a8 <__umoddi3+0xf8>
  80bad0:	01400604 	movi	r5,24
  80bad4:	2805883a 	mov	r2,r5
  80bad8:	003ecc06 	br	80b60c <__umoddi3+0x5c>
  80badc:	01400204 	movi	r5,8
  80bae0:	2805883a 	mov	r2,r5
  80bae4:	003ec906 	br	80b60c <__umoddi3+0x5c>
  80bae8:	01400204 	movi	r5,8
  80baec:	2805883a 	mov	r2,r5
  80baf0:	003f0106 	br	80b6f8 <__umoddi3+0x148>
  80baf4:	01400204 	movi	r5,8
  80baf8:	2805883a 	mov	r2,r5
  80bafc:	003f1206 	br	80b748 <__umoddi3+0x198>
  80bb00:	01400604 	movi	r5,24
  80bb04:	2805883a 	mov	r2,r5
  80bb08:	003f0f06 	br	80b748 <__umoddi3+0x198>
  80bb0c:	01400604 	movi	r5,24
  80bb10:	2805883a 	mov	r2,r5
  80bb14:	003ef806 	br	80b6f8 <__umoddi3+0x148>
  80bb18:	3c7fb82e 	bgeu	r7,r17,80b9fc <__umoddi3+0x44c>
  80bb1c:	843fffc4 	addi	r16,r16,-1
  80bb20:	3dcf883a 	add	r7,r7,r23
  80bb24:	003fb506 	br	80b9fc <__umoddi3+0x44c>
  80bb28:	147fa22e 	bgeu	r2,r17,80b9b4 <__umoddi3+0x404>
  80bb2c:	e73fffc4 	addi	fp,fp,-1
  80bb30:	15c5883a 	add	r2,r2,r23
  80bb34:	003f9f06 	br	80b9b4 <__umoddi3+0x404>
  80bb38:	147f692e 	bgeu	r2,r17,80b8e0 <__umoddi3+0x330>
  80bb3c:	1405883a 	add	r2,r2,r16
  80bb40:	003f6706 	br	80b8e0 <__umoddi3+0x330>
  80bb44:	1405883a 	add	r2,r2,r16
  80bb48:	003f1906 	br	80b7b0 <__umoddi3+0x200>
  80bb4c:	1405883a 	add	r2,r2,r16
  80bb50:	003ec906 	br	80b678 <__umoddi3+0xc8>
  80bb54:	b13fcc36 	bltu	r22,r4,80ba88 <__umoddi3+0x4d8>
  80bb58:	000b883a 	mov	r5,zero
  80bb5c:	003fd106 	br	80baa4 <__umoddi3+0x4f4>

0080bb60 <__muldf3>:
  80bb60:	deffe004 	addi	sp,sp,-128
  80bb64:	dc401815 	stw	r17,96(sp)
  80bb68:	dc400404 	addi	r17,sp,16
  80bb6c:	2011883a 	mov	r8,r4
  80bb70:	2813883a 	mov	r9,r5
  80bb74:	dc001715 	stw	r16,92(sp)
  80bb78:	d809883a 	mov	r4,sp
  80bb7c:	880b883a 	mov	r5,r17
  80bb80:	dc000904 	addi	r16,sp,36
  80bb84:	dfc01f15 	stw	ra,124(sp)
  80bb88:	da400115 	stw	r9,4(sp)
  80bb8c:	d9c00315 	stw	r7,12(sp)
  80bb90:	da000015 	stw	r8,0(sp)
  80bb94:	d9800215 	stw	r6,8(sp)
  80bb98:	ddc01e15 	stw	r23,120(sp)
  80bb9c:	dd801d15 	stw	r22,116(sp)
  80bba0:	dd401c15 	stw	r21,112(sp)
  80bba4:	dd001b15 	stw	r20,108(sp)
  80bba8:	dcc01a15 	stw	r19,104(sp)
  80bbac:	dc801915 	stw	r18,100(sp)
  80bbb0:	08039dc0 	call	8039dc <__unpack_d>
  80bbb4:	d9000204 	addi	r4,sp,8
  80bbb8:	800b883a 	mov	r5,r16
  80bbbc:	08039dc0 	call	8039dc <__unpack_d>
  80bbc0:	d9000417 	ldw	r4,16(sp)
  80bbc4:	00800044 	movi	r2,1
  80bbc8:	1100102e 	bgeu	r2,r4,80bc0c <__muldf3+0xac>
  80bbcc:	d8c00917 	ldw	r3,36(sp)
  80bbd0:	10c0062e 	bgeu	r2,r3,80bbec <__muldf3+0x8c>
  80bbd4:	00800104 	movi	r2,4
  80bbd8:	20800a26 	beq	r4,r2,80bc04 <__muldf3+0xa4>
  80bbdc:	1880cc26 	beq	r3,r2,80bf10 <__muldf3+0x3b0>
  80bbe0:	00800084 	movi	r2,2
  80bbe4:	20800926 	beq	r4,r2,80bc0c <__muldf3+0xac>
  80bbe8:	1880191e 	bne	r3,r2,80bc50 <__muldf3+0xf0>
  80bbec:	d8c00a17 	ldw	r3,40(sp)
  80bbf0:	d8800517 	ldw	r2,20(sp)
  80bbf4:	8009883a 	mov	r4,r16
  80bbf8:	10c4c03a 	cmpne	r2,r2,r3
  80bbfc:	d8800a15 	stw	r2,40(sp)
  80bc00:	00000706 	br	80bc20 <__muldf3+0xc0>
  80bc04:	00800084 	movi	r2,2
  80bc08:	1880c326 	beq	r3,r2,80bf18 <__muldf3+0x3b8>
  80bc0c:	d8800517 	ldw	r2,20(sp)
  80bc10:	d8c00a17 	ldw	r3,40(sp)
  80bc14:	8809883a 	mov	r4,r17
  80bc18:	10c4c03a 	cmpne	r2,r2,r3
  80bc1c:	d8800515 	stw	r2,20(sp)
  80bc20:	08036c80 	call	8036c8 <__pack_d>
  80bc24:	dfc01f17 	ldw	ra,124(sp)
  80bc28:	ddc01e17 	ldw	r23,120(sp)
  80bc2c:	dd801d17 	ldw	r22,116(sp)
  80bc30:	dd401c17 	ldw	r21,112(sp)
  80bc34:	dd001b17 	ldw	r20,108(sp)
  80bc38:	dcc01a17 	ldw	r19,104(sp)
  80bc3c:	dc801917 	ldw	r18,100(sp)
  80bc40:	dc401817 	ldw	r17,96(sp)
  80bc44:	dc001717 	ldw	r16,92(sp)
  80bc48:	dec02004 	addi	sp,sp,128
  80bc4c:	f800283a 	ret
  80bc50:	dd800717 	ldw	r22,28(sp)
  80bc54:	dc800c17 	ldw	r18,48(sp)
  80bc58:	002b883a 	mov	r21,zero
  80bc5c:	0023883a 	mov	r17,zero
  80bc60:	a80b883a 	mov	r5,r21
  80bc64:	b00d883a 	mov	r6,r22
  80bc68:	880f883a 	mov	r7,r17
  80bc6c:	ddc00817 	ldw	r23,32(sp)
  80bc70:	dcc00d17 	ldw	r19,52(sp)
  80bc74:	9009883a 	mov	r4,r18
  80bc78:	08020b80 	call	8020b8 <__muldi3>
  80bc7c:	001b883a 	mov	r13,zero
  80bc80:	680f883a 	mov	r7,r13
  80bc84:	b009883a 	mov	r4,r22
  80bc88:	000b883a 	mov	r5,zero
  80bc8c:	980d883a 	mov	r6,r19
  80bc90:	b82d883a 	mov	r22,r23
  80bc94:	002f883a 	mov	r23,zero
  80bc98:	db401615 	stw	r13,88(sp)
  80bc9c:	d8801315 	stw	r2,76(sp)
  80bca0:	d8c01415 	stw	r3,80(sp)
  80bca4:	dcc01515 	stw	r19,84(sp)
  80bca8:	08020b80 	call	8020b8 <__muldi3>
  80bcac:	b00d883a 	mov	r6,r22
  80bcb0:	000b883a 	mov	r5,zero
  80bcb4:	9009883a 	mov	r4,r18
  80bcb8:	b80f883a 	mov	r7,r23
  80bcbc:	1021883a 	mov	r16,r2
  80bcc0:	1823883a 	mov	r17,r3
  80bcc4:	08020b80 	call	8020b8 <__muldi3>
  80bcc8:	8085883a 	add	r2,r16,r2
  80bccc:	140d803a 	cmpltu	r6,r2,r16
  80bcd0:	88c7883a 	add	r3,r17,r3
  80bcd4:	30cd883a 	add	r6,r6,r3
  80bcd8:	1029883a 	mov	r20,r2
  80bcdc:	302b883a 	mov	r21,r6
  80bce0:	da801317 	ldw	r10,76(sp)
  80bce4:	dac01417 	ldw	r11,80(sp)
  80bce8:	db001517 	ldw	r12,84(sp)
  80bcec:	db401617 	ldw	r13,88(sp)
  80bcf0:	3440612e 	bgeu	r6,r17,80be78 <__muldf3+0x318>
  80bcf4:	0009883a 	mov	r4,zero
  80bcf8:	5105883a 	add	r2,r10,r4
  80bcfc:	128d803a 	cmpltu	r6,r2,r10
  80bd00:	5d07883a 	add	r3,r11,r20
  80bd04:	30cd883a 	add	r6,r6,r3
  80bd08:	0021883a 	mov	r16,zero
  80bd0c:	04400044 	movi	r17,1
  80bd10:	1025883a 	mov	r18,r2
  80bd14:	3027883a 	mov	r19,r6
  80bd18:	32c06236 	bltu	r6,r11,80bea4 <__muldf3+0x344>
  80bd1c:	59807a26 	beq	r11,r6,80bf08 <__muldf3+0x3a8>
  80bd20:	680b883a 	mov	r5,r13
  80bd24:	b80f883a 	mov	r7,r23
  80bd28:	6009883a 	mov	r4,r12
  80bd2c:	b00d883a 	mov	r6,r22
  80bd30:	08020b80 	call	8020b8 <__muldi3>
  80bd34:	1009883a 	mov	r4,r2
  80bd38:	000f883a 	mov	r7,zero
  80bd3c:	1545883a 	add	r2,r2,r21
  80bd40:	1111803a 	cmpltu	r8,r2,r4
  80bd44:	19c7883a 	add	r3,r3,r7
  80bd48:	40c7883a 	add	r3,r8,r3
  80bd4c:	88cb883a 	add	r5,r17,r3
  80bd50:	d8c00617 	ldw	r3,24(sp)
  80bd54:	8089883a 	add	r4,r16,r2
  80bd58:	d8800b17 	ldw	r2,44(sp)
  80bd5c:	18c00104 	addi	r3,r3,4
  80bd60:	240d803a 	cmpltu	r6,r4,r16
  80bd64:	10c7883a 	add	r3,r2,r3
  80bd68:	2013883a 	mov	r9,r4
  80bd6c:	d8800a17 	ldw	r2,40(sp)
  80bd70:	d9000517 	ldw	r4,20(sp)
  80bd74:	314d883a 	add	r6,r6,r5
  80bd78:	3015883a 	mov	r10,r6
  80bd7c:	2088c03a 	cmpne	r4,r4,r2
  80bd80:	00880034 	movhi	r2,8192
  80bd84:	10bfffc4 	addi	r2,r2,-1
  80bd88:	d9000f15 	stw	r4,60(sp)
  80bd8c:	d8c01015 	stw	r3,64(sp)
  80bd90:	1180162e 	bgeu	r2,r6,80bdec <__muldf3+0x28c>
  80bd94:	1811883a 	mov	r8,r3
  80bd98:	101f883a 	mov	r15,r2
  80bd9c:	980497fa 	slli	r2,r19,31
  80bda0:	9016d07a 	srli	r11,r18,1
  80bda4:	500697fa 	slli	r3,r10,31
  80bda8:	480cd07a 	srli	r6,r9,1
  80bdac:	500ed07a 	srli	r7,r10,1
  80bdb0:	12d6b03a 	or	r11,r2,r11
  80bdb4:	00800044 	movi	r2,1
  80bdb8:	198cb03a 	or	r6,r3,r6
  80bdbc:	4888703a 	and	r4,r9,r2
  80bdc0:	9818d07a 	srli	r12,r19,1
  80bdc4:	001b883a 	mov	r13,zero
  80bdc8:	03a00034 	movhi	r14,32768
  80bdcc:	3013883a 	mov	r9,r6
  80bdd0:	3815883a 	mov	r10,r7
  80bdd4:	4091883a 	add	r8,r8,r2
  80bdd8:	20000226 	beq	r4,zero,80bde4 <__muldf3+0x284>
  80bddc:	5b64b03a 	or	r18,r11,r13
  80bde0:	63a6b03a 	or	r19,r12,r14
  80bde4:	7abfed36 	bltu	r15,r10,80bd9c <__muldf3+0x23c>
  80bde8:	da001015 	stw	r8,64(sp)
  80bdec:	00840034 	movhi	r2,4096
  80bdf0:	10bfffc4 	addi	r2,r2,-1
  80bdf4:	12801436 	bltu	r2,r10,80be48 <__muldf3+0x2e8>
  80bdf8:	da001017 	ldw	r8,64(sp)
  80bdfc:	101f883a 	mov	r15,r2
  80be00:	4a45883a 	add	r2,r9,r9
  80be04:	124d803a 	cmpltu	r6,r2,r9
  80be08:	5287883a 	add	r3,r10,r10
  80be0c:	9497883a 	add	r11,r18,r18
  80be10:	5c8f803a 	cmpltu	r7,r11,r18
  80be14:	9cd9883a 	add	r12,r19,r19
  80be18:	01000044 	movi	r4,1
  80be1c:	30cd883a 	add	r6,r6,r3
  80be20:	3b0f883a 	add	r7,r7,r12
  80be24:	423fffc4 	addi	r8,r8,-1
  80be28:	1013883a 	mov	r9,r2
  80be2c:	3015883a 	mov	r10,r6
  80be30:	111ab03a 	or	r13,r2,r4
  80be34:	98003016 	blt	r19,zero,80bef8 <__muldf3+0x398>
  80be38:	5825883a 	mov	r18,r11
  80be3c:	3827883a 	mov	r19,r7
  80be40:	7abfef2e 	bgeu	r15,r10,80be00 <__muldf3+0x2a0>
  80be44:	da001015 	stw	r8,64(sp)
  80be48:	00803fc4 	movi	r2,255
  80be4c:	488e703a 	and	r7,r9,r2
  80be50:	00802004 	movi	r2,128
  80be54:	0007883a 	mov	r3,zero
  80be58:	0011883a 	mov	r8,zero
  80be5c:	38801826 	beq	r7,r2,80bec0 <__muldf3+0x360>
  80be60:	008000c4 	movi	r2,3
  80be64:	d9000e04 	addi	r4,sp,56
  80be68:	da801215 	stw	r10,72(sp)
  80be6c:	d8800e15 	stw	r2,56(sp)
  80be70:	da401115 	stw	r9,68(sp)
  80be74:	003f6a06 	br	80bc20 <__muldf3+0xc0>
  80be78:	89802126 	beq	r17,r6,80bf00 <__muldf3+0x3a0>
  80be7c:	0009883a 	mov	r4,zero
  80be80:	5105883a 	add	r2,r10,r4
  80be84:	128d803a 	cmpltu	r6,r2,r10
  80be88:	5d07883a 	add	r3,r11,r20
  80be8c:	30cd883a 	add	r6,r6,r3
  80be90:	0021883a 	mov	r16,zero
  80be94:	0023883a 	mov	r17,zero
  80be98:	1025883a 	mov	r18,r2
  80be9c:	3027883a 	mov	r19,r6
  80bea0:	32ff9e2e 	bgeu	r6,r11,80bd1c <__muldf3+0x1bc>
  80bea4:	00800044 	movi	r2,1
  80bea8:	8089883a 	add	r4,r16,r2
  80beac:	240d803a 	cmpltu	r6,r4,r16
  80beb0:	344d883a 	add	r6,r6,r17
  80beb4:	2021883a 	mov	r16,r4
  80beb8:	3023883a 	mov	r17,r6
  80bebc:	003f9806 	br	80bd20 <__muldf3+0x1c0>
  80bec0:	403fe71e 	bne	r8,zero,80be60 <__muldf3+0x300>
  80bec4:	01004004 	movi	r4,256
  80bec8:	4904703a 	and	r2,r9,r4
  80becc:	10c4b03a 	or	r2,r2,r3
  80bed0:	103fe31e 	bne	r2,zero,80be60 <__muldf3+0x300>
  80bed4:	94c4b03a 	or	r2,r18,r19
  80bed8:	103fe126 	beq	r2,zero,80be60 <__muldf3+0x300>
  80bedc:	49c5883a 	add	r2,r9,r7
  80bee0:	1251803a 	cmpltu	r8,r2,r9
  80bee4:	4291883a 	add	r8,r8,r10
  80bee8:	013fc004 	movi	r4,-256
  80beec:	1112703a 	and	r9,r2,r4
  80bef0:	4015883a 	mov	r10,r8
  80bef4:	003fda06 	br	80be60 <__muldf3+0x300>
  80bef8:	6813883a 	mov	r9,r13
  80befc:	003fce06 	br	80be38 <__muldf3+0x2d8>
  80bf00:	143f7c36 	bltu	r2,r16,80bcf4 <__muldf3+0x194>
  80bf04:	003fdd06 	br	80be7c <__muldf3+0x31c>
  80bf08:	12bf852e 	bgeu	r2,r10,80bd20 <__muldf3+0x1c0>
  80bf0c:	003fe506 	br	80bea4 <__muldf3+0x344>
  80bf10:	00800084 	movi	r2,2
  80bf14:	20bf351e 	bne	r4,r2,80bbec <__muldf3+0x8c>
  80bf18:	01002074 	movhi	r4,129
  80bf1c:	2107ca04 	addi	r4,r4,7976
  80bf20:	003f3f06 	br	80bc20 <__muldf3+0xc0>

0080bf24 <__eqdf2>:
  80bf24:	deffef04 	addi	sp,sp,-68
  80bf28:	dc400f15 	stw	r17,60(sp)
  80bf2c:	dc400404 	addi	r17,sp,16
  80bf30:	2005883a 	mov	r2,r4
  80bf34:	2807883a 	mov	r3,r5
  80bf38:	dc000e15 	stw	r16,56(sp)
  80bf3c:	d809883a 	mov	r4,sp
  80bf40:	880b883a 	mov	r5,r17
  80bf44:	dc000904 	addi	r16,sp,36
  80bf48:	d8c00115 	stw	r3,4(sp)
  80bf4c:	d8800015 	stw	r2,0(sp)
  80bf50:	d9800215 	stw	r6,8(sp)
  80bf54:	dfc01015 	stw	ra,64(sp)
  80bf58:	d9c00315 	stw	r7,12(sp)
  80bf5c:	08039dc0 	call	8039dc <__unpack_d>
  80bf60:	d9000204 	addi	r4,sp,8
  80bf64:	800b883a 	mov	r5,r16
  80bf68:	08039dc0 	call	8039dc <__unpack_d>
  80bf6c:	d8800417 	ldw	r2,16(sp)
  80bf70:	00c00044 	movi	r3,1
  80bf74:	180d883a 	mov	r6,r3
  80bf78:	1880062e 	bgeu	r3,r2,80bf94 <__eqdf2+0x70>
  80bf7c:	d8800917 	ldw	r2,36(sp)
  80bf80:	8809883a 	mov	r4,r17
  80bf84:	800b883a 	mov	r5,r16
  80bf88:	1880022e 	bgeu	r3,r2,80bf94 <__eqdf2+0x70>
  80bf8c:	0803b140 	call	803b14 <__fpcmp_parts_d>
  80bf90:	100d883a 	mov	r6,r2
  80bf94:	3005883a 	mov	r2,r6
  80bf98:	dfc01017 	ldw	ra,64(sp)
  80bf9c:	dc400f17 	ldw	r17,60(sp)
  80bfa0:	dc000e17 	ldw	r16,56(sp)
  80bfa4:	dec01104 	addi	sp,sp,68
  80bfa8:	f800283a 	ret

0080bfac <__gtdf2>:
  80bfac:	deffef04 	addi	sp,sp,-68
  80bfb0:	dc400f15 	stw	r17,60(sp)
  80bfb4:	dc400404 	addi	r17,sp,16
  80bfb8:	2005883a 	mov	r2,r4
  80bfbc:	2807883a 	mov	r3,r5
  80bfc0:	dc000e15 	stw	r16,56(sp)
  80bfc4:	d809883a 	mov	r4,sp
  80bfc8:	880b883a 	mov	r5,r17
  80bfcc:	dc000904 	addi	r16,sp,36
  80bfd0:	d8c00115 	stw	r3,4(sp)
  80bfd4:	d8800015 	stw	r2,0(sp)
  80bfd8:	d9800215 	stw	r6,8(sp)
  80bfdc:	dfc01015 	stw	ra,64(sp)
  80bfe0:	d9c00315 	stw	r7,12(sp)
  80bfe4:	08039dc0 	call	8039dc <__unpack_d>
  80bfe8:	d9000204 	addi	r4,sp,8
  80bfec:	800b883a 	mov	r5,r16
  80bff0:	08039dc0 	call	8039dc <__unpack_d>
  80bff4:	d8800417 	ldw	r2,16(sp)
  80bff8:	00c00044 	movi	r3,1
  80bffc:	01bfffc4 	movi	r6,-1
  80c000:	1880062e 	bgeu	r3,r2,80c01c <__gtdf2+0x70>
  80c004:	d8800917 	ldw	r2,36(sp)
  80c008:	8809883a 	mov	r4,r17
  80c00c:	800b883a 	mov	r5,r16
  80c010:	1880022e 	bgeu	r3,r2,80c01c <__gtdf2+0x70>
  80c014:	0803b140 	call	803b14 <__fpcmp_parts_d>
  80c018:	100d883a 	mov	r6,r2
  80c01c:	3005883a 	mov	r2,r6
  80c020:	dfc01017 	ldw	ra,64(sp)
  80c024:	dc400f17 	ldw	r17,60(sp)
  80c028:	dc000e17 	ldw	r16,56(sp)
  80c02c:	dec01104 	addi	sp,sp,68
  80c030:	f800283a 	ret

0080c034 <__gedf2>:
  80c034:	deffef04 	addi	sp,sp,-68
  80c038:	dc400f15 	stw	r17,60(sp)
  80c03c:	dc400404 	addi	r17,sp,16
  80c040:	2005883a 	mov	r2,r4
  80c044:	2807883a 	mov	r3,r5
  80c048:	dc000e15 	stw	r16,56(sp)
  80c04c:	d809883a 	mov	r4,sp
  80c050:	880b883a 	mov	r5,r17
  80c054:	dc000904 	addi	r16,sp,36
  80c058:	d8c00115 	stw	r3,4(sp)
  80c05c:	d8800015 	stw	r2,0(sp)
  80c060:	d9800215 	stw	r6,8(sp)
  80c064:	dfc01015 	stw	ra,64(sp)
  80c068:	d9c00315 	stw	r7,12(sp)
  80c06c:	08039dc0 	call	8039dc <__unpack_d>
  80c070:	d9000204 	addi	r4,sp,8
  80c074:	800b883a 	mov	r5,r16
  80c078:	08039dc0 	call	8039dc <__unpack_d>
  80c07c:	d8800417 	ldw	r2,16(sp)
  80c080:	00c00044 	movi	r3,1
  80c084:	01bfffc4 	movi	r6,-1
  80c088:	1880062e 	bgeu	r3,r2,80c0a4 <__gedf2+0x70>
  80c08c:	d8800917 	ldw	r2,36(sp)
  80c090:	8809883a 	mov	r4,r17
  80c094:	800b883a 	mov	r5,r16
  80c098:	1880022e 	bgeu	r3,r2,80c0a4 <__gedf2+0x70>
  80c09c:	0803b140 	call	803b14 <__fpcmp_parts_d>
  80c0a0:	100d883a 	mov	r6,r2
  80c0a4:	3005883a 	mov	r2,r6
  80c0a8:	dfc01017 	ldw	ra,64(sp)
  80c0ac:	dc400f17 	ldw	r17,60(sp)
  80c0b0:	dc000e17 	ldw	r16,56(sp)
  80c0b4:	dec01104 	addi	sp,sp,68
  80c0b8:	f800283a 	ret

0080c0bc <__ltdf2>:
  80c0bc:	deffef04 	addi	sp,sp,-68
  80c0c0:	dc400f15 	stw	r17,60(sp)
  80c0c4:	dc400404 	addi	r17,sp,16
  80c0c8:	2005883a 	mov	r2,r4
  80c0cc:	2807883a 	mov	r3,r5
  80c0d0:	dc000e15 	stw	r16,56(sp)
  80c0d4:	d809883a 	mov	r4,sp
  80c0d8:	880b883a 	mov	r5,r17
  80c0dc:	dc000904 	addi	r16,sp,36
  80c0e0:	d8c00115 	stw	r3,4(sp)
  80c0e4:	d8800015 	stw	r2,0(sp)
  80c0e8:	d9800215 	stw	r6,8(sp)
  80c0ec:	dfc01015 	stw	ra,64(sp)
  80c0f0:	d9c00315 	stw	r7,12(sp)
  80c0f4:	08039dc0 	call	8039dc <__unpack_d>
  80c0f8:	d9000204 	addi	r4,sp,8
  80c0fc:	800b883a 	mov	r5,r16
  80c100:	08039dc0 	call	8039dc <__unpack_d>
  80c104:	d8800417 	ldw	r2,16(sp)
  80c108:	00c00044 	movi	r3,1
  80c10c:	180d883a 	mov	r6,r3
  80c110:	1880062e 	bgeu	r3,r2,80c12c <__ltdf2+0x70>
  80c114:	d8800917 	ldw	r2,36(sp)
  80c118:	8809883a 	mov	r4,r17
  80c11c:	800b883a 	mov	r5,r16
  80c120:	1880022e 	bgeu	r3,r2,80c12c <__ltdf2+0x70>
  80c124:	0803b140 	call	803b14 <__fpcmp_parts_d>
  80c128:	100d883a 	mov	r6,r2
  80c12c:	3005883a 	mov	r2,r6
  80c130:	dfc01017 	ldw	ra,64(sp)
  80c134:	dc400f17 	ldw	r17,60(sp)
  80c138:	dc000e17 	ldw	r16,56(sp)
  80c13c:	dec01104 	addi	sp,sp,68
  80c140:	f800283a 	ret

0080c144 <__floatsidf>:
  80c144:	2006d7fa 	srli	r3,r4,31
  80c148:	defff604 	addi	sp,sp,-40
  80c14c:	008000c4 	movi	r2,3
  80c150:	dfc00915 	stw	ra,36(sp)
  80c154:	dcc00815 	stw	r19,32(sp)
  80c158:	dc800715 	stw	r18,28(sp)
  80c15c:	dc400615 	stw	r17,24(sp)
  80c160:	dc000515 	stw	r16,20(sp)
  80c164:	d8800015 	stw	r2,0(sp)
  80c168:	d8c00115 	stw	r3,4(sp)
  80c16c:	20000f1e 	bne	r4,zero,80c1ac <__floatsidf+0x68>
  80c170:	00800084 	movi	r2,2
  80c174:	d8800015 	stw	r2,0(sp)
  80c178:	d809883a 	mov	r4,sp
  80c17c:	08036c80 	call	8036c8 <__pack_d>
  80c180:	1009883a 	mov	r4,r2
  80c184:	180b883a 	mov	r5,r3
  80c188:	2005883a 	mov	r2,r4
  80c18c:	2807883a 	mov	r3,r5
  80c190:	dfc00917 	ldw	ra,36(sp)
  80c194:	dcc00817 	ldw	r19,32(sp)
  80c198:	dc800717 	ldw	r18,28(sp)
  80c19c:	dc400617 	ldw	r17,24(sp)
  80c1a0:	dc000517 	ldw	r16,20(sp)
  80c1a4:	dec00a04 	addi	sp,sp,40
  80c1a8:	f800283a 	ret
  80c1ac:	00800f04 	movi	r2,60
  80c1b0:	1807003a 	cmpeq	r3,r3,zero
  80c1b4:	d8800215 	stw	r2,8(sp)
  80c1b8:	18001126 	beq	r3,zero,80c200 <__floatsidf+0xbc>
  80c1bc:	0027883a 	mov	r19,zero
  80c1c0:	2025883a 	mov	r18,r4
  80c1c4:	d9000315 	stw	r4,12(sp)
  80c1c8:	dcc00415 	stw	r19,16(sp)
  80c1cc:	080334c0 	call	80334c <__clzsi2>
  80c1d0:	11000744 	addi	r4,r2,29
  80c1d4:	013fe80e 	bge	zero,r4,80c178 <__floatsidf+0x34>
  80c1d8:	10bfff44 	addi	r2,r2,-3
  80c1dc:	10000c16 	blt	r2,zero,80c210 <__floatsidf+0xcc>
  80c1e0:	90a2983a 	sll	r17,r18,r2
  80c1e4:	0021883a 	mov	r16,zero
  80c1e8:	d8800217 	ldw	r2,8(sp)
  80c1ec:	dc400415 	stw	r17,16(sp)
  80c1f0:	dc000315 	stw	r16,12(sp)
  80c1f4:	1105c83a 	sub	r2,r2,r4
  80c1f8:	d8800215 	stw	r2,8(sp)
  80c1fc:	003fde06 	br	80c178 <__floatsidf+0x34>
  80c200:	00a00034 	movhi	r2,32768
  80c204:	20800a26 	beq	r4,r2,80c230 <__floatsidf+0xec>
  80c208:	0109c83a 	sub	r4,zero,r4
  80c20c:	003feb06 	br	80c1bc <__floatsidf+0x78>
  80c210:	9006d07a 	srli	r3,r18,1
  80c214:	008007c4 	movi	r2,31
  80c218:	1105c83a 	sub	r2,r2,r4
  80c21c:	1886d83a 	srl	r3,r3,r2
  80c220:	9922983a 	sll	r17,r19,r4
  80c224:	9120983a 	sll	r16,r18,r4
  80c228:	1c62b03a 	or	r17,r3,r17
  80c22c:	003fee06 	br	80c1e8 <__floatsidf+0xa4>
  80c230:	0009883a 	mov	r4,zero
  80c234:	01707834 	movhi	r5,49632
  80c238:	003fd306 	br	80c188 <__floatsidf+0x44>

0080c23c <__fixdfsi>:
  80c23c:	defff804 	addi	sp,sp,-32
  80c240:	2005883a 	mov	r2,r4
  80c244:	2807883a 	mov	r3,r5
  80c248:	d809883a 	mov	r4,sp
  80c24c:	d9400204 	addi	r5,sp,8
  80c250:	d8c00115 	stw	r3,4(sp)
  80c254:	d8800015 	stw	r2,0(sp)
  80c258:	dfc00715 	stw	ra,28(sp)
  80c25c:	08039dc0 	call	8039dc <__unpack_d>
  80c260:	d8c00217 	ldw	r3,8(sp)
  80c264:	00800084 	movi	r2,2
  80c268:	1880051e 	bne	r3,r2,80c280 <__fixdfsi+0x44>
  80c26c:	0007883a 	mov	r3,zero
  80c270:	1805883a 	mov	r2,r3
  80c274:	dfc00717 	ldw	ra,28(sp)
  80c278:	dec00804 	addi	sp,sp,32
  80c27c:	f800283a 	ret
  80c280:	00800044 	movi	r2,1
  80c284:	10fff92e 	bgeu	r2,r3,80c26c <__fixdfsi+0x30>
  80c288:	00800104 	movi	r2,4
  80c28c:	18800426 	beq	r3,r2,80c2a0 <__fixdfsi+0x64>
  80c290:	d8c00417 	ldw	r3,16(sp)
  80c294:	183ff516 	blt	r3,zero,80c26c <__fixdfsi+0x30>
  80c298:	00800784 	movi	r2,30
  80c29c:	10c0080e 	bge	r2,r3,80c2c0 <__fixdfsi+0x84>
  80c2a0:	d8800317 	ldw	r2,12(sp)
  80c2a4:	1000121e 	bne	r2,zero,80c2f0 <__fixdfsi+0xb4>
  80c2a8:	00e00034 	movhi	r3,32768
  80c2ac:	18ffffc4 	addi	r3,r3,-1
  80c2b0:	1805883a 	mov	r2,r3
  80c2b4:	dfc00717 	ldw	ra,28(sp)
  80c2b8:	dec00804 	addi	sp,sp,32
  80c2bc:	f800283a 	ret
  80c2c0:	00800f04 	movi	r2,60
  80c2c4:	10d1c83a 	sub	r8,r2,r3
  80c2c8:	40bff804 	addi	r2,r8,-32
  80c2cc:	d9800517 	ldw	r6,20(sp)
  80c2d0:	d9c00617 	ldw	r7,24(sp)
  80c2d4:	10000816 	blt	r2,zero,80c2f8 <__fixdfsi+0xbc>
  80c2d8:	3888d83a 	srl	r4,r7,r2
  80c2dc:	d8800317 	ldw	r2,12(sp)
  80c2e0:	2007883a 	mov	r3,r4
  80c2e4:	103fe226 	beq	r2,zero,80c270 <__fixdfsi+0x34>
  80c2e8:	0107c83a 	sub	r3,zero,r4
  80c2ec:	003fe006 	br	80c270 <__fixdfsi+0x34>
  80c2f0:	00e00034 	movhi	r3,32768
  80c2f4:	003fde06 	br	80c270 <__fixdfsi+0x34>
  80c2f8:	39c7883a 	add	r3,r7,r7
  80c2fc:	008007c4 	movi	r2,31
  80c300:	1205c83a 	sub	r2,r2,r8
  80c304:	1886983a 	sll	r3,r3,r2
  80c308:	3208d83a 	srl	r4,r6,r8
  80c30c:	1908b03a 	or	r4,r3,r4
  80c310:	003ff206 	br	80c2dc <__fixdfsi+0xa0>

0080c314 <__floatunsidf>:
  80c314:	defff204 	addi	sp,sp,-56
  80c318:	dfc00d15 	stw	ra,52(sp)
  80c31c:	ddc00c15 	stw	r23,48(sp)
  80c320:	dd800b15 	stw	r22,44(sp)
  80c324:	dd400a15 	stw	r21,40(sp)
  80c328:	dd000915 	stw	r20,36(sp)
  80c32c:	dcc00815 	stw	r19,32(sp)
  80c330:	dc800715 	stw	r18,28(sp)
  80c334:	dc400615 	stw	r17,24(sp)
  80c338:	dc000515 	stw	r16,20(sp)
  80c33c:	d8000115 	stw	zero,4(sp)
  80c340:	20000f1e 	bne	r4,zero,80c380 <__floatunsidf+0x6c>
  80c344:	00800084 	movi	r2,2
  80c348:	d8800015 	stw	r2,0(sp)
  80c34c:	d809883a 	mov	r4,sp
  80c350:	08036c80 	call	8036c8 <__pack_d>
  80c354:	dfc00d17 	ldw	ra,52(sp)
  80c358:	ddc00c17 	ldw	r23,48(sp)
  80c35c:	dd800b17 	ldw	r22,44(sp)
  80c360:	dd400a17 	ldw	r21,40(sp)
  80c364:	dd000917 	ldw	r20,36(sp)
  80c368:	dcc00817 	ldw	r19,32(sp)
  80c36c:	dc800717 	ldw	r18,28(sp)
  80c370:	dc400617 	ldw	r17,24(sp)
  80c374:	dc000517 	ldw	r16,20(sp)
  80c378:	dec00e04 	addi	sp,sp,56
  80c37c:	f800283a 	ret
  80c380:	008000c4 	movi	r2,3
  80c384:	00c00f04 	movi	r3,60
  80c388:	002f883a 	mov	r23,zero
  80c38c:	202d883a 	mov	r22,r4
  80c390:	d8800015 	stw	r2,0(sp)
  80c394:	d8c00215 	stw	r3,8(sp)
  80c398:	d9000315 	stw	r4,12(sp)
  80c39c:	ddc00415 	stw	r23,16(sp)
  80c3a0:	080334c0 	call	80334c <__clzsi2>
  80c3a4:	12400744 	addi	r9,r2,29
  80c3a8:	48000b16 	blt	r9,zero,80c3d8 <__floatunsidf+0xc4>
  80c3ac:	483fe726 	beq	r9,zero,80c34c <__floatunsidf+0x38>
  80c3b0:	10bfff44 	addi	r2,r2,-3
  80c3b4:	10002e16 	blt	r2,zero,80c470 <__floatunsidf+0x15c>
  80c3b8:	b0a2983a 	sll	r17,r22,r2
  80c3bc:	0021883a 	mov	r16,zero
  80c3c0:	d8800217 	ldw	r2,8(sp)
  80c3c4:	dc400415 	stw	r17,16(sp)
  80c3c8:	dc000315 	stw	r16,12(sp)
  80c3cc:	1245c83a 	sub	r2,r2,r9
  80c3d0:	d8800215 	stw	r2,8(sp)
  80c3d4:	003fdd06 	br	80c34c <__floatunsidf+0x38>
  80c3d8:	0255c83a 	sub	r10,zero,r9
  80c3dc:	51bff804 	addi	r6,r10,-32
  80c3e0:	30001b16 	blt	r6,zero,80c450 <__floatunsidf+0x13c>
  80c3e4:	b9a8d83a 	srl	r20,r23,r6
  80c3e8:	002b883a 	mov	r21,zero
  80c3ec:	000f883a 	mov	r7,zero
  80c3f0:	01000044 	movi	r4,1
  80c3f4:	0011883a 	mov	r8,zero
  80c3f8:	30002516 	blt	r6,zero,80c490 <__floatunsidf+0x17c>
  80c3fc:	21a6983a 	sll	r19,r4,r6
  80c400:	0025883a 	mov	r18,zero
  80c404:	00bfffc4 	movi	r2,-1
  80c408:	9089883a 	add	r4,r18,r2
  80c40c:	988b883a 	add	r5,r19,r2
  80c410:	248d803a 	cmpltu	r6,r4,r18
  80c414:	314b883a 	add	r5,r6,r5
  80c418:	b104703a 	and	r2,r22,r4
  80c41c:	b946703a 	and	r3,r23,r5
  80c420:	10c4b03a 	or	r2,r2,r3
  80c424:	10000226 	beq	r2,zero,80c430 <__floatunsidf+0x11c>
  80c428:	01c00044 	movi	r7,1
  80c42c:	0011883a 	mov	r8,zero
  80c430:	d9000217 	ldw	r4,8(sp)
  80c434:	a1c4b03a 	or	r2,r20,r7
  80c438:	aa06b03a 	or	r3,r21,r8
  80c43c:	2249c83a 	sub	r4,r4,r9
  80c440:	d8c00415 	stw	r3,16(sp)
  80c444:	d9000215 	stw	r4,8(sp)
  80c448:	d8800315 	stw	r2,12(sp)
  80c44c:	003fbf06 	br	80c34c <__floatunsidf+0x38>
  80c450:	bdc7883a 	add	r3,r23,r23
  80c454:	008007c4 	movi	r2,31
  80c458:	1285c83a 	sub	r2,r2,r10
  80c45c:	1886983a 	sll	r3,r3,r2
  80c460:	b2a8d83a 	srl	r20,r22,r10
  80c464:	baaad83a 	srl	r21,r23,r10
  80c468:	1d28b03a 	or	r20,r3,r20
  80c46c:	003fdf06 	br	80c3ec <__floatunsidf+0xd8>
  80c470:	b006d07a 	srli	r3,r22,1
  80c474:	008007c4 	movi	r2,31
  80c478:	1245c83a 	sub	r2,r2,r9
  80c47c:	1886d83a 	srl	r3,r3,r2
  80c480:	ba62983a 	sll	r17,r23,r9
  80c484:	b260983a 	sll	r16,r22,r9
  80c488:	1c62b03a 	or	r17,r3,r17
  80c48c:	003fcc06 	br	80c3c0 <__floatunsidf+0xac>
  80c490:	2006d07a 	srli	r3,r4,1
  80c494:	008007c4 	movi	r2,31
  80c498:	1285c83a 	sub	r2,r2,r10
  80c49c:	18a6d83a 	srl	r19,r3,r2
  80c4a0:	22a4983a 	sll	r18,r4,r10
  80c4a4:	003fd706 	br	80c404 <__floatunsidf+0xf0>

0080c4a8 <udivmodsi4>:
  80c4a8:	29001b2e 	bgeu	r5,r4,80c518 <udivmodsi4+0x70>
  80c4ac:	28001a16 	blt	r5,zero,80c518 <udivmodsi4+0x70>
  80c4b0:	00800044 	movi	r2,1
  80c4b4:	0007883a 	mov	r3,zero
  80c4b8:	01c007c4 	movi	r7,31
  80c4bc:	00000306 	br	80c4cc <udivmodsi4+0x24>
  80c4c0:	19c01326 	beq	r3,r7,80c510 <udivmodsi4+0x68>
  80c4c4:	18c00044 	addi	r3,r3,1
  80c4c8:	28000416 	blt	r5,zero,80c4dc <udivmodsi4+0x34>
  80c4cc:	294b883a 	add	r5,r5,r5
  80c4d0:	1085883a 	add	r2,r2,r2
  80c4d4:	293ffa36 	bltu	r5,r4,80c4c0 <udivmodsi4+0x18>
  80c4d8:	10000d26 	beq	r2,zero,80c510 <udivmodsi4+0x68>
  80c4dc:	0007883a 	mov	r3,zero
  80c4e0:	21400236 	bltu	r4,r5,80c4ec <udivmodsi4+0x44>
  80c4e4:	2149c83a 	sub	r4,r4,r5
  80c4e8:	1886b03a 	or	r3,r3,r2
  80c4ec:	1004d07a 	srli	r2,r2,1
  80c4f0:	280ad07a 	srli	r5,r5,1
  80c4f4:	103ffa1e 	bne	r2,zero,80c4e0 <udivmodsi4+0x38>
  80c4f8:	30000226 	beq	r6,zero,80c504 <udivmodsi4+0x5c>
  80c4fc:	2005883a 	mov	r2,r4
  80c500:	f800283a 	ret
  80c504:	1809883a 	mov	r4,r3
  80c508:	2005883a 	mov	r2,r4
  80c50c:	f800283a 	ret
  80c510:	0007883a 	mov	r3,zero
  80c514:	003ff806 	br	80c4f8 <udivmodsi4+0x50>
  80c518:	00800044 	movi	r2,1
  80c51c:	0007883a 	mov	r3,zero
  80c520:	003fef06 	br	80c4e0 <udivmodsi4+0x38>

0080c524 <__divsi3>:
  80c524:	defffe04 	addi	sp,sp,-8
  80c528:	dc000015 	stw	r16,0(sp)
  80c52c:	dfc00115 	stw	ra,4(sp)
  80c530:	0021883a 	mov	r16,zero
  80c534:	20000c16 	blt	r4,zero,80c568 <__divsi3+0x44>
  80c538:	000d883a 	mov	r6,zero
  80c53c:	28000e16 	blt	r5,zero,80c578 <__divsi3+0x54>
  80c540:	080c4a80 	call	80c4a8 <udivmodsi4>
  80c544:	1007883a 	mov	r3,r2
  80c548:	8005003a 	cmpeq	r2,r16,zero
  80c54c:	1000011e 	bne	r2,zero,80c554 <__divsi3+0x30>
  80c550:	00c7c83a 	sub	r3,zero,r3
  80c554:	1805883a 	mov	r2,r3
  80c558:	dfc00117 	ldw	ra,4(sp)
  80c55c:	dc000017 	ldw	r16,0(sp)
  80c560:	dec00204 	addi	sp,sp,8
  80c564:	f800283a 	ret
  80c568:	0109c83a 	sub	r4,zero,r4
  80c56c:	04000044 	movi	r16,1
  80c570:	000d883a 	mov	r6,zero
  80c574:	283ff20e 	bge	r5,zero,80c540 <__divsi3+0x1c>
  80c578:	014bc83a 	sub	r5,zero,r5
  80c57c:	8021003a 	cmpeq	r16,r16,zero
  80c580:	003fef06 	br	80c540 <__divsi3+0x1c>

0080c584 <__modsi3>:
  80c584:	deffff04 	addi	sp,sp,-4
  80c588:	dfc00015 	stw	ra,0(sp)
  80c58c:	01800044 	movi	r6,1
  80c590:	2807883a 	mov	r3,r5
  80c594:	20000416 	blt	r4,zero,80c5a8 <__modsi3+0x24>
  80c598:	28000c16 	blt	r5,zero,80c5cc <__modsi3+0x48>
  80c59c:	dfc00017 	ldw	ra,0(sp)
  80c5a0:	dec00104 	addi	sp,sp,4
  80c5a4:	080c4a81 	jmpi	80c4a8 <udivmodsi4>
  80c5a8:	0109c83a 	sub	r4,zero,r4
  80c5ac:	28000b16 	blt	r5,zero,80c5dc <__modsi3+0x58>
  80c5b0:	180b883a 	mov	r5,r3
  80c5b4:	01800044 	movi	r6,1
  80c5b8:	080c4a80 	call	80c4a8 <udivmodsi4>
  80c5bc:	0085c83a 	sub	r2,zero,r2
  80c5c0:	dfc00017 	ldw	ra,0(sp)
  80c5c4:	dec00104 	addi	sp,sp,4
  80c5c8:	f800283a 	ret
  80c5cc:	014bc83a 	sub	r5,zero,r5
  80c5d0:	dfc00017 	ldw	ra,0(sp)
  80c5d4:	dec00104 	addi	sp,sp,4
  80c5d8:	080c4a81 	jmpi	80c4a8 <udivmodsi4>
  80c5dc:	0147c83a 	sub	r3,zero,r5
  80c5e0:	003ff306 	br	80c5b0 <__modsi3+0x2c>

0080c5e4 <__udivsi3>:
  80c5e4:	000d883a 	mov	r6,zero
  80c5e8:	080c4a81 	jmpi	80c4a8 <udivmodsi4>

0080c5ec <__umodsi3>:
  80c5ec:	01800044 	movi	r6,1
  80c5f0:	080c4a81 	jmpi	80c4a8 <udivmodsi4>

0080c5f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80c5f4:	defff804 	addi	sp,sp,-32
  80c5f8:	dfc00715 	stw	ra,28(sp)
  80c5fc:	df000615 	stw	fp,24(sp)
  80c600:	df000604 	addi	fp,sp,24
  80c604:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80c608:	e0bffc17 	ldw	r2,-16(fp)
  80c60c:	1004803a 	cmplt	r2,r2,zero
  80c610:	1000081e 	bne	r2,zero,80c634 <close+0x40>
  80c614:	e0bffc17 	ldw	r2,-16(fp)
  80c618:	10800324 	muli	r2,r2,12
  80c61c:	1007883a 	mov	r3,r2
  80c620:	00802074 	movhi	r2,129
  80c624:	108af304 	addi	r2,r2,11212
  80c628:	1887883a 	add	r3,r3,r2
  80c62c:	e0ffff15 	stw	r3,-4(fp)
  80c630:	00000106 	br	80c638 <close+0x44>
  80c634:	e03fff15 	stw	zero,-4(fp)
  80c638:	e0bfff17 	ldw	r2,-4(fp)
  80c63c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80c640:	e0bffb17 	ldw	r2,-20(fp)
  80c644:	1005003a 	cmpeq	r2,r2,zero
  80c648:	10001d1e 	bne	r2,zero,80c6c0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80c64c:	e0bffb17 	ldw	r2,-20(fp)
  80c650:	10800017 	ldw	r2,0(r2)
  80c654:	10800417 	ldw	r2,16(r2)
  80c658:	1005003a 	cmpeq	r2,r2,zero
  80c65c:	1000071e 	bne	r2,zero,80c67c <close+0x88>
  80c660:	e0bffb17 	ldw	r2,-20(fp)
  80c664:	10800017 	ldw	r2,0(r2)
  80c668:	10800417 	ldw	r2,16(r2)
  80c66c:	e13ffb17 	ldw	r4,-20(fp)
  80c670:	103ee83a 	callr	r2
  80c674:	e0bffe15 	stw	r2,-8(fp)
  80c678:	00000106 	br	80c680 <close+0x8c>
  80c67c:	e03ffe15 	stw	zero,-8(fp)
  80c680:	e0bffe17 	ldw	r2,-8(fp)
  80c684:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c688:	e13ffc17 	ldw	r4,-16(fp)
  80c68c:	080ce380 	call	80ce38 <alt_release_fd>
    if (rval < 0)
  80c690:	e0bffa17 	ldw	r2,-24(fp)
  80c694:	1004403a 	cmpge	r2,r2,zero
  80c698:	1000071e 	bne	r2,zero,80c6b8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80c69c:	080c6f00 	call	80c6f0 <alt_get_errno>
  80c6a0:	e0fffa17 	ldw	r3,-24(fp)
  80c6a4:	00c7c83a 	sub	r3,zero,r3
  80c6a8:	10c00015 	stw	r3,0(r2)
      return -1;
  80c6ac:	00bfffc4 	movi	r2,-1
  80c6b0:	e0bffd15 	stw	r2,-12(fp)
  80c6b4:	00000806 	br	80c6d8 <close+0xe4>
    }
    return 0;
  80c6b8:	e03ffd15 	stw	zero,-12(fp)
  80c6bc:	00000606 	br	80c6d8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c6c0:	080c6f00 	call	80c6f0 <alt_get_errno>
  80c6c4:	1007883a 	mov	r3,r2
  80c6c8:	00801444 	movi	r2,81
  80c6cc:	18800015 	stw	r2,0(r3)
    return -1;
  80c6d0:	00bfffc4 	movi	r2,-1
  80c6d4:	e0bffd15 	stw	r2,-12(fp)
  80c6d8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80c6dc:	e037883a 	mov	sp,fp
  80c6e0:	dfc00117 	ldw	ra,4(sp)
  80c6e4:	df000017 	ldw	fp,0(sp)
  80c6e8:	dec00204 	addi	sp,sp,8
  80c6ec:	f800283a 	ret

0080c6f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c6f0:	defffd04 	addi	sp,sp,-12
  80c6f4:	dfc00215 	stw	ra,8(sp)
  80c6f8:	df000115 	stw	fp,4(sp)
  80c6fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c700:	00802074 	movhi	r2,129
  80c704:	108fdd04 	addi	r2,r2,16244
  80c708:	10800017 	ldw	r2,0(r2)
  80c70c:	1005003a 	cmpeq	r2,r2,zero
  80c710:	1000061e 	bne	r2,zero,80c72c <alt_get_errno+0x3c>
  80c714:	00802074 	movhi	r2,129
  80c718:	108fdd04 	addi	r2,r2,16244
  80c71c:	10800017 	ldw	r2,0(r2)
  80c720:	103ee83a 	callr	r2
  80c724:	e0bfff15 	stw	r2,-4(fp)
  80c728:	00000306 	br	80c738 <alt_get_errno+0x48>
  80c72c:	00802074 	movhi	r2,129
  80c730:	1096ef04 	addi	r2,r2,23484
  80c734:	e0bfff15 	stw	r2,-4(fp)
  80c738:	e0bfff17 	ldw	r2,-4(fp)
}
  80c73c:	e037883a 	mov	sp,fp
  80c740:	dfc00117 	ldw	ra,4(sp)
  80c744:	df000017 	ldw	fp,0(sp)
  80c748:	dec00204 	addi	sp,sp,8
  80c74c:	f800283a 	ret

0080c750 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80c750:	defffc04 	addi	sp,sp,-16
  80c754:	df000315 	stw	fp,12(sp)
  80c758:	df000304 	addi	fp,sp,12
  80c75c:	e13ffd15 	stw	r4,-12(fp)
  80c760:	e17ffe15 	stw	r5,-8(fp)
  80c764:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80c768:	e0bfff17 	ldw	r2,-4(fp)
}
  80c76c:	e037883a 	mov	sp,fp
  80c770:	df000017 	ldw	fp,0(sp)
  80c774:	dec00104 	addi	sp,sp,4
  80c778:	f800283a 	ret

0080c77c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80c77c:	defff904 	addi	sp,sp,-28
  80c780:	dfc00615 	stw	ra,24(sp)
  80c784:	df000515 	stw	fp,20(sp)
  80c788:	df000504 	addi	fp,sp,20
  80c78c:	e13ffc15 	stw	r4,-16(fp)
  80c790:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c794:	e0bffc17 	ldw	r2,-16(fp)
  80c798:	1004803a 	cmplt	r2,r2,zero
  80c79c:	1000081e 	bne	r2,zero,80c7c0 <fstat+0x44>
  80c7a0:	e0bffc17 	ldw	r2,-16(fp)
  80c7a4:	10800324 	muli	r2,r2,12
  80c7a8:	1007883a 	mov	r3,r2
  80c7ac:	00802074 	movhi	r2,129
  80c7b0:	108af304 	addi	r2,r2,11212
  80c7b4:	1887883a 	add	r3,r3,r2
  80c7b8:	e0ffff15 	stw	r3,-4(fp)
  80c7bc:	00000106 	br	80c7c4 <fstat+0x48>
  80c7c0:	e03fff15 	stw	zero,-4(fp)
  80c7c4:	e0bfff17 	ldw	r2,-4(fp)
  80c7c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80c7cc:	e0bffb17 	ldw	r2,-20(fp)
  80c7d0:	1005003a 	cmpeq	r2,r2,zero
  80c7d4:	1000121e 	bne	r2,zero,80c820 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80c7d8:	e0bffb17 	ldw	r2,-20(fp)
  80c7dc:	10800017 	ldw	r2,0(r2)
  80c7e0:	10800817 	ldw	r2,32(r2)
  80c7e4:	1005003a 	cmpeq	r2,r2,zero
  80c7e8:	1000081e 	bne	r2,zero,80c80c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80c7ec:	e0bffb17 	ldw	r2,-20(fp)
  80c7f0:	10800017 	ldw	r2,0(r2)
  80c7f4:	10800817 	ldw	r2,32(r2)
  80c7f8:	e13ffb17 	ldw	r4,-20(fp)
  80c7fc:	e17ffd17 	ldw	r5,-12(fp)
  80c800:	103ee83a 	callr	r2
  80c804:	e0bffe15 	stw	r2,-8(fp)
  80c808:	00000b06 	br	80c838 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80c80c:	e0fffd17 	ldw	r3,-12(fp)
  80c810:	00880004 	movi	r2,8192
  80c814:	18800115 	stw	r2,4(r3)
      return 0;
  80c818:	e03ffe15 	stw	zero,-8(fp)
  80c81c:	00000606 	br	80c838 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c820:	080c8500 	call	80c850 <alt_get_errno>
  80c824:	1007883a 	mov	r3,r2
  80c828:	00801444 	movi	r2,81
  80c82c:	18800015 	stw	r2,0(r3)
    return -1;
  80c830:	00bfffc4 	movi	r2,-1
  80c834:	e0bffe15 	stw	r2,-8(fp)
  80c838:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80c83c:	e037883a 	mov	sp,fp
  80c840:	dfc00117 	ldw	ra,4(sp)
  80c844:	df000017 	ldw	fp,0(sp)
  80c848:	dec00204 	addi	sp,sp,8
  80c84c:	f800283a 	ret

0080c850 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c850:	defffd04 	addi	sp,sp,-12
  80c854:	dfc00215 	stw	ra,8(sp)
  80c858:	df000115 	stw	fp,4(sp)
  80c85c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c860:	00802074 	movhi	r2,129
  80c864:	108fdd04 	addi	r2,r2,16244
  80c868:	10800017 	ldw	r2,0(r2)
  80c86c:	1005003a 	cmpeq	r2,r2,zero
  80c870:	1000061e 	bne	r2,zero,80c88c <alt_get_errno+0x3c>
  80c874:	00802074 	movhi	r2,129
  80c878:	108fdd04 	addi	r2,r2,16244
  80c87c:	10800017 	ldw	r2,0(r2)
  80c880:	103ee83a 	callr	r2
  80c884:	e0bfff15 	stw	r2,-4(fp)
  80c888:	00000306 	br	80c898 <alt_get_errno+0x48>
  80c88c:	00802074 	movhi	r2,129
  80c890:	1096ef04 	addi	r2,r2,23484
  80c894:	e0bfff15 	stw	r2,-4(fp)
  80c898:	e0bfff17 	ldw	r2,-4(fp)
}
  80c89c:	e037883a 	mov	sp,fp
  80c8a0:	dfc00117 	ldw	ra,4(sp)
  80c8a4:	df000017 	ldw	fp,0(sp)
  80c8a8:	dec00204 	addi	sp,sp,8
  80c8ac:	f800283a 	ret

0080c8b0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80c8b0:	deffeb04 	addi	sp,sp,-84
  80c8b4:	dfc01415 	stw	ra,80(sp)
  80c8b8:	df001315 	stw	fp,76(sp)
  80c8bc:	df001304 	addi	fp,sp,76
  80c8c0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c8c4:	e0bffd17 	ldw	r2,-12(fp)
  80c8c8:	1004803a 	cmplt	r2,r2,zero
  80c8cc:	1000081e 	bne	r2,zero,80c8f0 <isatty+0x40>
  80c8d0:	e0bffd17 	ldw	r2,-12(fp)
  80c8d4:	10800324 	muli	r2,r2,12
  80c8d8:	1007883a 	mov	r3,r2
  80c8dc:	00802074 	movhi	r2,129
  80c8e0:	108af304 	addi	r2,r2,11212
  80c8e4:	1887883a 	add	r3,r3,r2
  80c8e8:	e0ffff15 	stw	r3,-4(fp)
  80c8ec:	00000106 	br	80c8f4 <isatty+0x44>
  80c8f0:	e03fff15 	stw	zero,-4(fp)
  80c8f4:	e0bfff17 	ldw	r2,-4(fp)
  80c8f8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80c8fc:	e0bfed17 	ldw	r2,-76(fp)
  80c900:	1005003a 	cmpeq	r2,r2,zero
  80c904:	10000f1e 	bne	r2,zero,80c944 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80c908:	e0bfed17 	ldw	r2,-76(fp)
  80c90c:	10800017 	ldw	r2,0(r2)
  80c910:	10800817 	ldw	r2,32(r2)
  80c914:	1004c03a 	cmpne	r2,r2,zero
  80c918:	1000031e 	bne	r2,zero,80c928 <isatty+0x78>
    {
      return 1;
  80c91c:	00800044 	movi	r2,1
  80c920:	e0bffe15 	stw	r2,-8(fp)
  80c924:	00000c06 	br	80c958 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80c928:	e17fee04 	addi	r5,fp,-72
  80c92c:	e13ffd17 	ldw	r4,-12(fp)
  80c930:	080c77c0 	call	80c77c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80c934:	e0bfef17 	ldw	r2,-68(fp)
  80c938:	10880020 	cmpeqi	r2,r2,8192
  80c93c:	e0bffe15 	stw	r2,-8(fp)
  80c940:	00000506 	br	80c958 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c944:	080c9700 	call	80c970 <alt_get_errno>
  80c948:	1007883a 	mov	r3,r2
  80c94c:	00801444 	movi	r2,81
  80c950:	18800015 	stw	r2,0(r3)
    return 0;
  80c954:	e03ffe15 	stw	zero,-8(fp)
  80c958:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80c95c:	e037883a 	mov	sp,fp
  80c960:	dfc00117 	ldw	ra,4(sp)
  80c964:	df000017 	ldw	fp,0(sp)
  80c968:	dec00204 	addi	sp,sp,8
  80c96c:	f800283a 	ret

0080c970 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c970:	defffd04 	addi	sp,sp,-12
  80c974:	dfc00215 	stw	ra,8(sp)
  80c978:	df000115 	stw	fp,4(sp)
  80c97c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c980:	00802074 	movhi	r2,129
  80c984:	108fdd04 	addi	r2,r2,16244
  80c988:	10800017 	ldw	r2,0(r2)
  80c98c:	1005003a 	cmpeq	r2,r2,zero
  80c990:	1000061e 	bne	r2,zero,80c9ac <alt_get_errno+0x3c>
  80c994:	00802074 	movhi	r2,129
  80c998:	108fdd04 	addi	r2,r2,16244
  80c99c:	10800017 	ldw	r2,0(r2)
  80c9a0:	103ee83a 	callr	r2
  80c9a4:	e0bfff15 	stw	r2,-4(fp)
  80c9a8:	00000306 	br	80c9b8 <alt_get_errno+0x48>
  80c9ac:	00802074 	movhi	r2,129
  80c9b0:	1096ef04 	addi	r2,r2,23484
  80c9b4:	e0bfff15 	stw	r2,-4(fp)
  80c9b8:	e0bfff17 	ldw	r2,-4(fp)
}
  80c9bc:	e037883a 	mov	sp,fp
  80c9c0:	dfc00117 	ldw	ra,4(sp)
  80c9c4:	df000017 	ldw	fp,0(sp)
  80c9c8:	dec00204 	addi	sp,sp,8
  80c9cc:	f800283a 	ret

0080c9d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80c9d0:	defffe04 	addi	sp,sp,-8
  80c9d4:	dfc00115 	stw	ra,4(sp)
  80c9d8:	df000015 	stw	fp,0(sp)
  80c9dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80c9e0:	01002074 	movhi	r4,129
  80c9e4:	210fe604 	addi	r4,r4,16280
  80c9e8:	01402074 	movhi	r5,129
  80c9ec:	2948e404 	addi	r5,r5,9104
  80c9f0:	01802074 	movhi	r6,129
  80c9f4:	318fe604 	addi	r6,r6,16280
  80c9f8:	080ca500 	call	80ca50 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80c9fc:	01002034 	movhi	r4,128
  80ca00:	21000804 	addi	r4,r4,32
  80ca04:	01402034 	movhi	r5,128
  80ca08:	29400804 	addi	r5,r5,32
  80ca0c:	01802034 	movhi	r6,128
  80ca10:	31806d04 	addi	r6,r6,436
  80ca14:	080ca500 	call	80ca50 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80ca18:	01002074 	movhi	r4,129
  80ca1c:	21078f04 	addi	r4,r4,7740
  80ca20:	01402074 	movhi	r5,129
  80ca24:	29478f04 	addi	r5,r5,7740
  80ca28:	01802074 	movhi	r6,129
  80ca2c:	3188e404 	addi	r6,r6,9104
  80ca30:	080ca500 	call	80ca50 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80ca34:	0810a680 	call	810a68 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80ca38:	0810dac0 	call	810dac <alt_icache_flush_all>
}
  80ca3c:	e037883a 	mov	sp,fp
  80ca40:	dfc00117 	ldw	ra,4(sp)
  80ca44:	df000017 	ldw	fp,0(sp)
  80ca48:	dec00204 	addi	sp,sp,8
  80ca4c:	f800283a 	ret

0080ca50 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80ca50:	defffc04 	addi	sp,sp,-16
  80ca54:	df000315 	stw	fp,12(sp)
  80ca58:	df000304 	addi	fp,sp,12
  80ca5c:	e13ffd15 	stw	r4,-12(fp)
  80ca60:	e17ffe15 	stw	r5,-8(fp)
  80ca64:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80ca68:	e0fffe17 	ldw	r3,-8(fp)
  80ca6c:	e0bffd17 	ldw	r2,-12(fp)
  80ca70:	18800e26 	beq	r3,r2,80caac <alt_load_section+0x5c>
  {
    while( to != end )
  80ca74:	00000a06 	br	80caa0 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80ca78:	e0bffd17 	ldw	r2,-12(fp)
  80ca7c:	10c00017 	ldw	r3,0(r2)
  80ca80:	e0bffe17 	ldw	r2,-8(fp)
  80ca84:	10c00015 	stw	r3,0(r2)
  80ca88:	e0bffe17 	ldw	r2,-8(fp)
  80ca8c:	10800104 	addi	r2,r2,4
  80ca90:	e0bffe15 	stw	r2,-8(fp)
  80ca94:	e0bffd17 	ldw	r2,-12(fp)
  80ca98:	10800104 	addi	r2,r2,4
  80ca9c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80caa0:	e0fffe17 	ldw	r3,-8(fp)
  80caa4:	e0bfff17 	ldw	r2,-4(fp)
  80caa8:	18bff31e 	bne	r3,r2,80ca78 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80caac:	e037883a 	mov	sp,fp
  80cab0:	df000017 	ldw	fp,0(sp)
  80cab4:	dec00104 	addi	sp,sp,4
  80cab8:	f800283a 	ret

0080cabc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80cabc:	defff804 	addi	sp,sp,-32
  80cac0:	dfc00715 	stw	ra,28(sp)
  80cac4:	df000615 	stw	fp,24(sp)
  80cac8:	df000604 	addi	fp,sp,24
  80cacc:	e13ffc15 	stw	r4,-16(fp)
  80cad0:	e17ffd15 	stw	r5,-12(fp)
  80cad4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80cad8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80cadc:	e0bffc17 	ldw	r2,-16(fp)
  80cae0:	1004803a 	cmplt	r2,r2,zero
  80cae4:	1000081e 	bne	r2,zero,80cb08 <lseek+0x4c>
  80cae8:	e0bffc17 	ldw	r2,-16(fp)
  80caec:	10800324 	muli	r2,r2,12
  80caf0:	1007883a 	mov	r3,r2
  80caf4:	00802074 	movhi	r2,129
  80caf8:	108af304 	addi	r2,r2,11212
  80cafc:	1887883a 	add	r3,r3,r2
  80cb00:	e0ffff15 	stw	r3,-4(fp)
  80cb04:	00000106 	br	80cb0c <lseek+0x50>
  80cb08:	e03fff15 	stw	zero,-4(fp)
  80cb0c:	e0bfff17 	ldw	r2,-4(fp)
  80cb10:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80cb14:	e0bffb17 	ldw	r2,-20(fp)
  80cb18:	1005003a 	cmpeq	r2,r2,zero
  80cb1c:	1000111e 	bne	r2,zero,80cb64 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80cb20:	e0bffb17 	ldw	r2,-20(fp)
  80cb24:	10800017 	ldw	r2,0(r2)
  80cb28:	10800717 	ldw	r2,28(r2)
  80cb2c:	1005003a 	cmpeq	r2,r2,zero
  80cb30:	1000091e 	bne	r2,zero,80cb58 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80cb34:	e0bffb17 	ldw	r2,-20(fp)
  80cb38:	10800017 	ldw	r2,0(r2)
  80cb3c:	10800717 	ldw	r2,28(r2)
  80cb40:	e13ffb17 	ldw	r4,-20(fp)
  80cb44:	e17ffd17 	ldw	r5,-12(fp)
  80cb48:	e1bffe17 	ldw	r6,-8(fp)
  80cb4c:	103ee83a 	callr	r2
  80cb50:	e0bffa15 	stw	r2,-24(fp)
  80cb54:	00000506 	br	80cb6c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80cb58:	00bfde84 	movi	r2,-134
  80cb5c:	e0bffa15 	stw	r2,-24(fp)
  80cb60:	00000206 	br	80cb6c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80cb64:	00bfebc4 	movi	r2,-81
  80cb68:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80cb6c:	e0bffa17 	ldw	r2,-24(fp)
  80cb70:	1004403a 	cmpge	r2,r2,zero
  80cb74:	1000071e 	bne	r2,zero,80cb94 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80cb78:	080cbac0 	call	80cbac <alt_get_errno>
  80cb7c:	1007883a 	mov	r3,r2
  80cb80:	e0bffa17 	ldw	r2,-24(fp)
  80cb84:	0085c83a 	sub	r2,zero,r2
  80cb88:	18800015 	stw	r2,0(r3)
    rc = -1;
  80cb8c:	00bfffc4 	movi	r2,-1
  80cb90:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80cb94:	e0bffa17 	ldw	r2,-24(fp)
}
  80cb98:	e037883a 	mov	sp,fp
  80cb9c:	dfc00117 	ldw	ra,4(sp)
  80cba0:	df000017 	ldw	fp,0(sp)
  80cba4:	dec00204 	addi	sp,sp,8
  80cba8:	f800283a 	ret

0080cbac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cbac:	defffd04 	addi	sp,sp,-12
  80cbb0:	dfc00215 	stw	ra,8(sp)
  80cbb4:	df000115 	stw	fp,4(sp)
  80cbb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80cbbc:	00802074 	movhi	r2,129
  80cbc0:	108fdd04 	addi	r2,r2,16244
  80cbc4:	10800017 	ldw	r2,0(r2)
  80cbc8:	1005003a 	cmpeq	r2,r2,zero
  80cbcc:	1000061e 	bne	r2,zero,80cbe8 <alt_get_errno+0x3c>
  80cbd0:	00802074 	movhi	r2,129
  80cbd4:	108fdd04 	addi	r2,r2,16244
  80cbd8:	10800017 	ldw	r2,0(r2)
  80cbdc:	103ee83a 	callr	r2
  80cbe0:	e0bfff15 	stw	r2,-4(fp)
  80cbe4:	00000306 	br	80cbf4 <alt_get_errno+0x48>
  80cbe8:	00802074 	movhi	r2,129
  80cbec:	1096ef04 	addi	r2,r2,23484
  80cbf0:	e0bfff15 	stw	r2,-4(fp)
  80cbf4:	e0bfff17 	ldw	r2,-4(fp)
}
  80cbf8:	e037883a 	mov	sp,fp
  80cbfc:	dfc00117 	ldw	ra,4(sp)
  80cc00:	df000017 	ldw	fp,0(sp)
  80cc04:	dec00204 	addi	sp,sp,8
  80cc08:	f800283a 	ret

0080cc0c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80cc0c:	defffd04 	addi	sp,sp,-12
  80cc10:	dfc00215 	stw	ra,8(sp)
  80cc14:	df000115 	stw	fp,4(sp)
  80cc18:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80cc1c:	0009883a 	mov	r4,zero
  80cc20:	080d0d40 	call	80d0d4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80cc24:	080d1080 	call	80d108 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80cc28:	01002074 	movhi	r4,129
  80cc2c:	21088e04 	addi	r4,r4,8760
  80cc30:	01402074 	movhi	r5,129
  80cc34:	29488e04 	addi	r5,r5,8760
  80cc38:	01802074 	movhi	r6,129
  80cc3c:	31888e04 	addi	r6,r6,8760
  80cc40:	081116c0 	call	81116c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80cc44:	0810bc00 	call	810bc0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80cc48:	01002074 	movhi	r4,129
  80cc4c:	21030904 	addi	r4,r4,3108
  80cc50:	08118d40 	call	8118d4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80cc54:	d1272817 	ldw	r4,-25440(gp)
  80cc58:	d1672917 	ldw	r5,-25436(gp)
  80cc5c:	d1a72a17 	ldw	r6,-25432(gp)
  80cc60:	0800b980 	call	800b98 <main>
  80cc64:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80cc68:	01000044 	movi	r4,1
  80cc6c:	080c5f40 	call	80c5f4 <close>
  exit (result);
  80cc70:	e13fff17 	ldw	r4,-4(fp)
  80cc74:	08118e80 	call	8118e8 <exit>

0080cc78 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80cc78:	defffe04 	addi	sp,sp,-8
  80cc7c:	df000115 	stw	fp,4(sp)
  80cc80:	df000104 	addi	fp,sp,4
  80cc84:	e13fff15 	stw	r4,-4(fp)
}
  80cc88:	e037883a 	mov	sp,fp
  80cc8c:	df000017 	ldw	fp,0(sp)
  80cc90:	dec00104 	addi	sp,sp,4
  80cc94:	f800283a 	ret

0080cc98 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80cc98:	defffe04 	addi	sp,sp,-8
  80cc9c:	df000115 	stw	fp,4(sp)
  80cca0:	df000104 	addi	fp,sp,4
  80cca4:	e13fff15 	stw	r4,-4(fp)
}
  80cca8:	e037883a 	mov	sp,fp
  80ccac:	df000017 	ldw	fp,0(sp)
  80ccb0:	dec00104 	addi	sp,sp,4
  80ccb4:	f800283a 	ret

0080ccb8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80ccb8:	defff704 	addi	sp,sp,-36
  80ccbc:	dfc00815 	stw	ra,32(sp)
  80ccc0:	df000715 	stw	fp,28(sp)
  80ccc4:	df000704 	addi	fp,sp,28
  80ccc8:	e13ffb15 	stw	r4,-20(fp)
  80cccc:	e17ffc15 	stw	r5,-16(fp)
  80ccd0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ccd4:	e0bffb17 	ldw	r2,-20(fp)
  80ccd8:	1004803a 	cmplt	r2,r2,zero
  80ccdc:	1000081e 	bne	r2,zero,80cd00 <read+0x48>
  80cce0:	e0bffb17 	ldw	r2,-20(fp)
  80cce4:	10800324 	muli	r2,r2,12
  80cce8:	1007883a 	mov	r3,r2
  80ccec:	00802074 	movhi	r2,129
  80ccf0:	108af304 	addi	r2,r2,11212
  80ccf4:	1887883a 	add	r3,r3,r2
  80ccf8:	e0ffff15 	stw	r3,-4(fp)
  80ccfc:	00000106 	br	80cd04 <read+0x4c>
  80cd00:	e03fff15 	stw	zero,-4(fp)
  80cd04:	e0bfff17 	ldw	r2,-4(fp)
  80cd08:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80cd0c:	e0bffa17 	ldw	r2,-24(fp)
  80cd10:	1005003a 	cmpeq	r2,r2,zero
  80cd14:	1000241e 	bne	r2,zero,80cda8 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80cd18:	e0bffa17 	ldw	r2,-24(fp)
  80cd1c:	10800217 	ldw	r2,8(r2)
  80cd20:	108000cc 	andi	r2,r2,3
  80cd24:	10800060 	cmpeqi	r2,r2,1
  80cd28:	10001a1e 	bne	r2,zero,80cd94 <read+0xdc>
  80cd2c:	e0bffa17 	ldw	r2,-24(fp)
  80cd30:	10800017 	ldw	r2,0(r2)
  80cd34:	10800517 	ldw	r2,20(r2)
  80cd38:	1005003a 	cmpeq	r2,r2,zero
  80cd3c:	1000151e 	bne	r2,zero,80cd94 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80cd40:	e0bffa17 	ldw	r2,-24(fp)
  80cd44:	10800017 	ldw	r2,0(r2)
  80cd48:	10800517 	ldw	r2,20(r2)
  80cd4c:	e17ffc17 	ldw	r5,-16(fp)
  80cd50:	e1bffd17 	ldw	r6,-12(fp)
  80cd54:	e13ffa17 	ldw	r4,-24(fp)
  80cd58:	103ee83a 	callr	r2
  80cd5c:	e0bff915 	stw	r2,-28(fp)
  80cd60:	e0bff917 	ldw	r2,-28(fp)
  80cd64:	1004403a 	cmpge	r2,r2,zero
  80cd68:	1000071e 	bne	r2,zero,80cd88 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80cd6c:	080cdd80 	call	80cdd8 <alt_get_errno>
  80cd70:	e0fff917 	ldw	r3,-28(fp)
  80cd74:	00c7c83a 	sub	r3,zero,r3
  80cd78:	10c00015 	stw	r3,0(r2)
          return -1;
  80cd7c:	00bfffc4 	movi	r2,-1
  80cd80:	e0bffe15 	stw	r2,-8(fp)
  80cd84:	00000e06 	br	80cdc0 <read+0x108>
        }
        return rval;
  80cd88:	e0bff917 	ldw	r2,-28(fp)
  80cd8c:	e0bffe15 	stw	r2,-8(fp)
  80cd90:	00000b06 	br	80cdc0 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80cd94:	080cdd80 	call	80cdd8 <alt_get_errno>
  80cd98:	1007883a 	mov	r3,r2
  80cd9c:	00800344 	movi	r2,13
  80cda0:	18800015 	stw	r2,0(r3)
  80cda4:	00000406 	br	80cdb8 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80cda8:	080cdd80 	call	80cdd8 <alt_get_errno>
  80cdac:	1007883a 	mov	r3,r2
  80cdb0:	00801444 	movi	r2,81
  80cdb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80cdb8:	00bfffc4 	movi	r2,-1
  80cdbc:	e0bffe15 	stw	r2,-8(fp)
  80cdc0:	e0bffe17 	ldw	r2,-8(fp)
}
  80cdc4:	e037883a 	mov	sp,fp
  80cdc8:	dfc00117 	ldw	ra,4(sp)
  80cdcc:	df000017 	ldw	fp,0(sp)
  80cdd0:	dec00204 	addi	sp,sp,8
  80cdd4:	f800283a 	ret

0080cdd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cdd8:	defffd04 	addi	sp,sp,-12
  80cddc:	dfc00215 	stw	ra,8(sp)
  80cde0:	df000115 	stw	fp,4(sp)
  80cde4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80cde8:	00802074 	movhi	r2,129
  80cdec:	108fdd04 	addi	r2,r2,16244
  80cdf0:	10800017 	ldw	r2,0(r2)
  80cdf4:	1005003a 	cmpeq	r2,r2,zero
  80cdf8:	1000061e 	bne	r2,zero,80ce14 <alt_get_errno+0x3c>
  80cdfc:	00802074 	movhi	r2,129
  80ce00:	108fdd04 	addi	r2,r2,16244
  80ce04:	10800017 	ldw	r2,0(r2)
  80ce08:	103ee83a 	callr	r2
  80ce0c:	e0bfff15 	stw	r2,-4(fp)
  80ce10:	00000306 	br	80ce20 <alt_get_errno+0x48>
  80ce14:	00802074 	movhi	r2,129
  80ce18:	1096ef04 	addi	r2,r2,23484
  80ce1c:	e0bfff15 	stw	r2,-4(fp)
  80ce20:	e0bfff17 	ldw	r2,-4(fp)
}
  80ce24:	e037883a 	mov	sp,fp
  80ce28:	dfc00117 	ldw	ra,4(sp)
  80ce2c:	df000017 	ldw	fp,0(sp)
  80ce30:	dec00204 	addi	sp,sp,8
  80ce34:	f800283a 	ret

0080ce38 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80ce38:	defffe04 	addi	sp,sp,-8
  80ce3c:	df000115 	stw	fp,4(sp)
  80ce40:	df000104 	addi	fp,sp,4
  80ce44:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80ce48:	e0bfff17 	ldw	r2,-4(fp)
  80ce4c:	108000d0 	cmplti	r2,r2,3
  80ce50:	10000d1e 	bne	r2,zero,80ce88 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80ce54:	e0bfff17 	ldw	r2,-4(fp)
  80ce58:	00c02074 	movhi	r3,129
  80ce5c:	18caf304 	addi	r3,r3,11212
  80ce60:	10800324 	muli	r2,r2,12
  80ce64:	10c5883a 	add	r2,r2,r3
  80ce68:	10800204 	addi	r2,r2,8
  80ce6c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80ce70:	e0bfff17 	ldw	r2,-4(fp)
  80ce74:	00c02074 	movhi	r3,129
  80ce78:	18caf304 	addi	r3,r3,11212
  80ce7c:	10800324 	muli	r2,r2,12
  80ce80:	10c5883a 	add	r2,r2,r3
  80ce84:	10000015 	stw	zero,0(r2)
  }
}
  80ce88:	e037883a 	mov	sp,fp
  80ce8c:	df000017 	ldw	fp,0(sp)
  80ce90:	dec00104 	addi	sp,sp,4
  80ce94:	f800283a 	ret

0080ce98 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80ce98:	defff804 	addi	sp,sp,-32
  80ce9c:	df000715 	stw	fp,28(sp)
  80cea0:	df000704 	addi	fp,sp,28
  80cea4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cea8:	0005303a 	rdctl	r2,status
  80ceac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ceb0:	e0fffb17 	ldw	r3,-20(fp)
  80ceb4:	00bfff84 	movi	r2,-2
  80ceb8:	1884703a 	and	r2,r3,r2
  80cebc:	1001703a 	wrctl	status,r2
  
  return context;
  80cec0:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80cec4:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80cec8:	d0a01617 	ldw	r2,-32680(gp)
  80cecc:	10c000c4 	addi	r3,r2,3
  80ced0:	00bfff04 	movi	r2,-4
  80ced4:	1884703a 	and	r2,r3,r2
  80ced8:	d0a01615 	stw	r2,-32680(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80cedc:	d0e01617 	ldw	r3,-32680(gp)
  80cee0:	e0bffe17 	ldw	r2,-8(fp)
  80cee4:	1887883a 	add	r3,r3,r2
  80cee8:	00802d74 	movhi	r2,181
  80ceec:	10800004 	addi	r2,r2,0
  80cef0:	10c0072e 	bgeu	r2,r3,80cf10 <sbrk+0x78>
  80cef4:	e0bffd17 	ldw	r2,-12(fp)
  80cef8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cefc:	e0bffa17 	ldw	r2,-24(fp)
  80cf00:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80cf04:	00bfffc4 	movi	r2,-1
  80cf08:	e0bfff15 	stw	r2,-4(fp)
  80cf0c:	00000c06 	br	80cf40 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80cf10:	d0a01617 	ldw	r2,-32680(gp)
  80cf14:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80cf18:	d0e01617 	ldw	r3,-32680(gp)
  80cf1c:	e0bffe17 	ldw	r2,-8(fp)
  80cf20:	1885883a 	add	r2,r3,r2
  80cf24:	d0a01615 	stw	r2,-32680(gp)
  80cf28:	e0bffd17 	ldw	r2,-12(fp)
  80cf2c:	e0bff915 	stw	r2,-28(fp)
  80cf30:	e0bff917 	ldw	r2,-28(fp)
  80cf34:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80cf38:	e0bffc17 	ldw	r2,-16(fp)
  80cf3c:	e0bfff15 	stw	r2,-4(fp)
  80cf40:	e0bfff17 	ldw	r2,-4(fp)
} 
  80cf44:	e037883a 	mov	sp,fp
  80cf48:	df000017 	ldw	fp,0(sp)
  80cf4c:	dec00104 	addi	sp,sp,4
  80cf50:	f800283a 	ret

0080cf54 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80cf54:	defff704 	addi	sp,sp,-36
  80cf58:	dfc00815 	stw	ra,32(sp)
  80cf5c:	df000715 	stw	fp,28(sp)
  80cf60:	df000704 	addi	fp,sp,28
  80cf64:	e13ffb15 	stw	r4,-20(fp)
  80cf68:	e17ffc15 	stw	r5,-16(fp)
  80cf6c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80cf70:	e0bffb17 	ldw	r2,-20(fp)
  80cf74:	1004803a 	cmplt	r2,r2,zero
  80cf78:	1000081e 	bne	r2,zero,80cf9c <write+0x48>
  80cf7c:	e0bffb17 	ldw	r2,-20(fp)
  80cf80:	10800324 	muli	r2,r2,12
  80cf84:	1007883a 	mov	r3,r2
  80cf88:	00802074 	movhi	r2,129
  80cf8c:	108af304 	addi	r2,r2,11212
  80cf90:	1887883a 	add	r3,r3,r2
  80cf94:	e0ffff15 	stw	r3,-4(fp)
  80cf98:	00000106 	br	80cfa0 <write+0x4c>
  80cf9c:	e03fff15 	stw	zero,-4(fp)
  80cfa0:	e0bfff17 	ldw	r2,-4(fp)
  80cfa4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80cfa8:	e0bffa17 	ldw	r2,-24(fp)
  80cfac:	1005003a 	cmpeq	r2,r2,zero
  80cfb0:	1000241e 	bne	r2,zero,80d044 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80cfb4:	e0bffa17 	ldw	r2,-24(fp)
  80cfb8:	10800217 	ldw	r2,8(r2)
  80cfbc:	108000cc 	andi	r2,r2,3
  80cfc0:	1005003a 	cmpeq	r2,r2,zero
  80cfc4:	10001a1e 	bne	r2,zero,80d030 <write+0xdc>
  80cfc8:	e0bffa17 	ldw	r2,-24(fp)
  80cfcc:	10800017 	ldw	r2,0(r2)
  80cfd0:	10800617 	ldw	r2,24(r2)
  80cfd4:	1005003a 	cmpeq	r2,r2,zero
  80cfd8:	1000151e 	bne	r2,zero,80d030 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80cfdc:	e0bffa17 	ldw	r2,-24(fp)
  80cfe0:	10800017 	ldw	r2,0(r2)
  80cfe4:	10800617 	ldw	r2,24(r2)
  80cfe8:	e17ffc17 	ldw	r5,-16(fp)
  80cfec:	e1bffd17 	ldw	r6,-12(fp)
  80cff0:	e13ffa17 	ldw	r4,-24(fp)
  80cff4:	103ee83a 	callr	r2
  80cff8:	e0bff915 	stw	r2,-28(fp)
  80cffc:	e0bff917 	ldw	r2,-28(fp)
  80d000:	1004403a 	cmpge	r2,r2,zero
  80d004:	1000071e 	bne	r2,zero,80d024 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80d008:	080d0740 	call	80d074 <alt_get_errno>
  80d00c:	e0fff917 	ldw	r3,-28(fp)
  80d010:	00c7c83a 	sub	r3,zero,r3
  80d014:	10c00015 	stw	r3,0(r2)
        return -1;
  80d018:	00bfffc4 	movi	r2,-1
  80d01c:	e0bffe15 	stw	r2,-8(fp)
  80d020:	00000e06 	br	80d05c <write+0x108>
      }
      return rval;
  80d024:	e0bff917 	ldw	r2,-28(fp)
  80d028:	e0bffe15 	stw	r2,-8(fp)
  80d02c:	00000b06 	br	80d05c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80d030:	080d0740 	call	80d074 <alt_get_errno>
  80d034:	1007883a 	mov	r3,r2
  80d038:	00800344 	movi	r2,13
  80d03c:	18800015 	stw	r2,0(r3)
  80d040:	00000406 	br	80d054 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80d044:	080d0740 	call	80d074 <alt_get_errno>
  80d048:	1007883a 	mov	r3,r2
  80d04c:	00801444 	movi	r2,81
  80d050:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80d054:	00bfffc4 	movi	r2,-1
  80d058:	e0bffe15 	stw	r2,-8(fp)
  80d05c:	e0bffe17 	ldw	r2,-8(fp)
}
  80d060:	e037883a 	mov	sp,fp
  80d064:	dfc00117 	ldw	ra,4(sp)
  80d068:	df000017 	ldw	fp,0(sp)
  80d06c:	dec00204 	addi	sp,sp,8
  80d070:	f800283a 	ret

0080d074 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d074:	defffd04 	addi	sp,sp,-12
  80d078:	dfc00215 	stw	ra,8(sp)
  80d07c:	df000115 	stw	fp,4(sp)
  80d080:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d084:	00802074 	movhi	r2,129
  80d088:	108fdd04 	addi	r2,r2,16244
  80d08c:	10800017 	ldw	r2,0(r2)
  80d090:	1005003a 	cmpeq	r2,r2,zero
  80d094:	1000061e 	bne	r2,zero,80d0b0 <alt_get_errno+0x3c>
  80d098:	00802074 	movhi	r2,129
  80d09c:	108fdd04 	addi	r2,r2,16244
  80d0a0:	10800017 	ldw	r2,0(r2)
  80d0a4:	103ee83a 	callr	r2
  80d0a8:	e0bfff15 	stw	r2,-4(fp)
  80d0ac:	00000306 	br	80d0bc <alt_get_errno+0x48>
  80d0b0:	00802074 	movhi	r2,129
  80d0b4:	1096ef04 	addi	r2,r2,23484
  80d0b8:	e0bfff15 	stw	r2,-4(fp)
  80d0bc:	e0bfff17 	ldw	r2,-4(fp)
}
  80d0c0:	e037883a 	mov	sp,fp
  80d0c4:	dfc00117 	ldw	ra,4(sp)
  80d0c8:	df000017 	ldw	fp,0(sp)
  80d0cc:	dec00204 	addi	sp,sp,8
  80d0d0:	f800283a 	ret

0080d0d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80d0d4:	defffd04 	addi	sp,sp,-12
  80d0d8:	dfc00215 	stw	ra,8(sp)
  80d0dc:	df000115 	stw	fp,4(sp)
  80d0e0:	df000104 	addi	fp,sp,4
  80d0e4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
  80d0e8:	081164c0 	call	81164c <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80d0ec:	00800044 	movi	r2,1
  80d0f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80d0f4:	e037883a 	mov	sp,fp
  80d0f8:	dfc00117 	ldw	ra,4(sp)
  80d0fc:	df000017 	ldw	fp,0(sp)
  80d100:	dec00204 	addi	sp,sp,8
  80d104:	f800283a 	ret

0080d108 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80d108:	defffd04 	addi	sp,sp,-12
  80d10c:	dfc00215 	stw	ra,8(sp)
  80d110:	df000115 	stw	fp,4(sp)
  80d114:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80d118:	01002074 	movhi	r4,129
  80d11c:	210b5d04 	addi	r4,r4,11636
  80d120:	000b883a 	mov	r5,zero
  80d124:	01800044 	movi	r6,1
  80d128:	080d5200 	call	80d520 <altera_avalon_jtag_uart_init>
  80d12c:	01002074 	movhi	r4,129
  80d130:	210b5304 	addi	r4,r4,11596
  80d134:	080d3a00 	call	80d3a0 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
  80d138:	01002074 	movhi	r4,129
  80d13c:	210f6b04 	addi	r4,r4,15788
  80d140:	080de840 	call	80de84 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
  80d144:	01002074 	movhi	r4,129
  80d148:	210f7a04 	addi	r4,r4,15848
  80d14c:	080de840 	call	80de84 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
  80d150:	01002074 	movhi	r4,129
  80d154:	210f8904 	addi	r4,r4,15908
  80d158:	080de840 	call	80de84 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
  80d15c:	01002074 	movhi	r4,129
  80d160:	210f9804 	addi	r4,r4,15968
  80d164:	080de840 	call	80de84 <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
  80d168:	0007883a 	mov	r3,zero
  80d16c:	00800044 	movi	r2,1
  80d170:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_RO_ZIPFS_INIT ( ALTERA_RO_ZIPFS, altera_ro_zipfs);
  80d174:	01002074 	movhi	r4,129
  80d178:	210fa704 	addi	r4,r4,16028
  80d17c:	080f3500 	call	80f350 <alt_ro_zipfs_check_valid>
  80d180:	1005003a 	cmpeq	r2,r2,zero
  80d184:	1000031e 	bne	r2,zero,80d194 <alt_sys_init+0x8c>
  80d188:	01002074 	movhi	r4,129
  80d18c:	210fa704 	addi	r4,r4,16028
  80d190:	0810d1c0 	call	810d1c <alt_fs_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  80d194:	00802074 	movhi	r2,129
  80d198:	108fb304 	addi	r2,r2,16076
  80d19c:	10800a17 	ldw	r2,40(r2)
  80d1a0:	10800017 	ldw	r2,0(r2)
  80d1a4:	1007883a 	mov	r3,r2
  80d1a8:	00802074 	movhi	r2,129
  80d1ac:	108fb304 	addi	r2,r2,16076
  80d1b0:	10c00b15 	stw	r3,44(r2)
  80d1b4:	00802074 	movhi	r2,129
  80d1b8:	108fb304 	addi	r2,r2,16076
  80d1bc:	10800a17 	ldw	r2,40(r2)
  80d1c0:	10800104 	addi	r2,r2,4
  80d1c4:	10800017 	ldw	r2,0(r2)
  80d1c8:	1007883a 	mov	r3,r2
  80d1cc:	00802074 	movhi	r2,129
  80d1d0:	108fb304 	addi	r2,r2,16076
  80d1d4:	10c00c15 	stw	r3,48(r2)
  80d1d8:	00802074 	movhi	r2,129
  80d1dc:	108fb304 	addi	r2,r2,16076
  80d1e0:	10800a17 	ldw	r2,40(r2)
  80d1e4:	10800204 	addi	r2,r2,8
  80d1e8:	10800017 	ldw	r2,0(r2)
  80d1ec:	10ffffcc 	andi	r3,r2,65535
  80d1f0:	00802074 	movhi	r2,129
  80d1f4:	108fb304 	addi	r2,r2,16076
  80d1f8:	10c00f15 	stw	r3,60(r2)
  80d1fc:	00802074 	movhi	r2,129
  80d200:	108fb304 	addi	r2,r2,16076
  80d204:	10800a17 	ldw	r2,40(r2)
  80d208:	10800204 	addi	r2,r2,8
  80d20c:	10800017 	ldw	r2,0(r2)
  80d210:	1005d43a 	srai	r2,r2,16
  80d214:	10ffffcc 	andi	r3,r2,65535
  80d218:	00802074 	movhi	r2,129
  80d21c:	108fb304 	addi	r2,r2,16076
  80d220:	10c01015 	stw	r3,64(r2)
  80d224:	00802074 	movhi	r2,129
  80d228:	108fb304 	addi	r2,r2,16076
  80d22c:	10800a17 	ldw	r2,40(r2)
  80d230:	10800304 	addi	r2,r2,12
  80d234:	10800017 	ldw	r2,0(r2)
  80d238:	1005d07a 	srai	r2,r2,1
  80d23c:	10c0004c 	andi	r3,r2,1
  80d240:	00802074 	movhi	r2,129
  80d244:	108fb304 	addi	r2,r2,16076
  80d248:	10c00d15 	stw	r3,52(r2)
  80d24c:	00802074 	movhi	r2,129
  80d250:	108fb304 	addi	r2,r2,16076
  80d254:	10800a17 	ldw	r2,40(r2)
  80d258:	10800304 	addi	r2,r2,12
  80d25c:	10800017 	ldw	r2,0(r2)
  80d260:	1005d13a 	srai	r2,r2,4
  80d264:	10c003cc 	andi	r3,r2,15
  80d268:	00802074 	movhi	r2,129
  80d26c:	108fb304 	addi	r2,r2,16076
  80d270:	10c00e15 	stw	r3,56(r2)
  80d274:	00802074 	movhi	r2,129
  80d278:	108fb304 	addi	r2,r2,16076
  80d27c:	10800a17 	ldw	r2,40(r2)
  80d280:	10800304 	addi	r2,r2,12
  80d284:	10800017 	ldw	r2,0(r2)
  80d288:	1005d43a 	srai	r2,r2,16
  80d28c:	1007883a 	mov	r3,r2
  80d290:	00bfffc4 	movi	r2,-1
  80d294:	1884703a 	and	r2,r3,r2
  80d298:	e0bfff45 	stb	r2,-3(fp)
  80d29c:	00802074 	movhi	r2,129
  80d2a0:	108fb304 	addi	r2,r2,16076
  80d2a4:	10800a17 	ldw	r2,40(r2)
  80d2a8:	10800304 	addi	r2,r2,12
  80d2ac:	10800017 	ldw	r2,0(r2)
  80d2b0:	1005d63a 	srai	r2,r2,24
  80d2b4:	1007883a 	mov	r3,r2
  80d2b8:	00bfffc4 	movi	r2,-1
  80d2bc:	1884703a 	and	r2,r3,r2
  80d2c0:	e0bfff05 	stb	r2,-4(fp)
  80d2c4:	00802074 	movhi	r2,129
  80d2c8:	108fb304 	addi	r2,r2,16076
  80d2cc:	10800e17 	ldw	r2,56(r2)
  80d2d0:	10800058 	cmpnei	r2,r2,1
  80d2d4:	1000041e 	bne	r2,zero,80d2e8 <alt_sys_init+0x1e0>
  80d2d8:	00802074 	movhi	r2,129
  80d2dc:	108fb304 	addi	r2,r2,16076
  80d2e0:	10001115 	stw	zero,68(r2)
  80d2e4:	00000e06 	br	80d320 <alt_sys_init+0x218>
  80d2e8:	00802074 	movhi	r2,129
  80d2ec:	108fb304 	addi	r2,r2,16076
  80d2f0:	10800e17 	ldw	r2,56(r2)
  80d2f4:	10800098 	cmpnei	r2,r2,2
  80d2f8:	1000051e 	bne	r2,zero,80d310 <alt_sys_init+0x208>
  80d2fc:	00c02074 	movhi	r3,129
  80d300:	18cfb304 	addi	r3,r3,16076
  80d304:	00800044 	movi	r2,1
  80d308:	18801115 	stw	r2,68(r3)
  80d30c:	00000406 	br	80d320 <alt_sys_init+0x218>
  80d310:	00c02074 	movhi	r3,129
  80d314:	18cfb304 	addi	r3,r3,16076
  80d318:	00800084 	movi	r2,2
  80d31c:	18801115 	stw	r2,68(r3)
  80d320:	e0ffff43 	ldbu	r3,-3(fp)
  80d324:	00800804 	movi	r2,32
  80d328:	10c7c83a 	sub	r3,r2,r3
  80d32c:	00bfffc4 	movi	r2,-1
  80d330:	10c6d83a 	srl	r3,r2,r3
  80d334:	00802074 	movhi	r2,129
  80d338:	108fb304 	addi	r2,r2,16076
  80d33c:	10c01215 	stw	r3,72(r2)
  80d340:	e0ffff43 	ldbu	r3,-3(fp)
  80d344:	00802074 	movhi	r2,129
  80d348:	108fb304 	addi	r2,r2,16076
  80d34c:	10801117 	ldw	r2,68(r2)
  80d350:	1887883a 	add	r3,r3,r2
  80d354:	00802074 	movhi	r2,129
  80d358:	108fb304 	addi	r2,r2,16076
  80d35c:	10c01315 	stw	r3,76(r2)
  80d360:	e0ffff03 	ldbu	r3,-4(fp)
  80d364:	00800804 	movi	r2,32
  80d368:	10c7c83a 	sub	r3,r2,r3
  80d36c:	00bfffc4 	movi	r2,-1
  80d370:	10c6d83a 	srl	r3,r2,r3
  80d374:	00802074 	movhi	r2,129
  80d378:	108fb304 	addi	r2,r2,16076
  80d37c:	10c01415 	stw	r3,80(r2)
  80d380:	01002074 	movhi	r4,129
  80d384:	210fb304 	addi	r4,r4,16076
  80d388:	080d3a00 	call	80d3a0 <alt_dev_reg>
}
  80d38c:	e037883a 	mov	sp,fp
  80d390:	dfc00117 	ldw	ra,4(sp)
  80d394:	df000017 	ldw	fp,0(sp)
  80d398:	dec00204 	addi	sp,sp,8
  80d39c:	f800283a 	ret

0080d3a0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80d3a0:	defffd04 	addi	sp,sp,-12
  80d3a4:	dfc00215 	stw	ra,8(sp)
  80d3a8:	df000115 	stw	fp,4(sp)
  80d3ac:	df000104 	addi	fp,sp,4
  80d3b0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80d3b4:	e13fff17 	ldw	r4,-4(fp)
  80d3b8:	01402074 	movhi	r5,129
  80d3bc:	294fda04 	addi	r5,r5,16232
  80d3c0:	0810aac0 	call	810aac <alt_dev_llist_insert>
}
  80d3c4:	e037883a 	mov	sp,fp
  80d3c8:	dfc00117 	ldw	ra,4(sp)
  80d3cc:	df000017 	ldw	fp,0(sp)
  80d3d0:	dec00204 	addi	sp,sp,8
  80d3d4:	f800283a 	ret

0080d3d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80d3d8:	defffa04 	addi	sp,sp,-24
  80d3dc:	dfc00515 	stw	ra,20(sp)
  80d3e0:	df000415 	stw	fp,16(sp)
  80d3e4:	df000404 	addi	fp,sp,16
  80d3e8:	e13ffd15 	stw	r4,-12(fp)
  80d3ec:	e17ffe15 	stw	r5,-8(fp)
  80d3f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80d3f4:	e0bffd17 	ldw	r2,-12(fp)
  80d3f8:	10800017 	ldw	r2,0(r2)
  80d3fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80d400:	e0bffc17 	ldw	r2,-16(fp)
  80d404:	11000a04 	addi	r4,r2,40
  80d408:	e0bffd17 	ldw	r2,-12(fp)
  80d40c:	11c00217 	ldw	r7,8(r2)
  80d410:	e17ffe17 	ldw	r5,-8(fp)
  80d414:	e1bfff17 	ldw	r6,-4(fp)
  80d418:	080da200 	call	80da20 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80d41c:	e037883a 	mov	sp,fp
  80d420:	dfc00117 	ldw	ra,4(sp)
  80d424:	df000017 	ldw	fp,0(sp)
  80d428:	dec00204 	addi	sp,sp,8
  80d42c:	f800283a 	ret

0080d430 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80d430:	defffa04 	addi	sp,sp,-24
  80d434:	dfc00515 	stw	ra,20(sp)
  80d438:	df000415 	stw	fp,16(sp)
  80d43c:	df000404 	addi	fp,sp,16
  80d440:	e13ffd15 	stw	r4,-12(fp)
  80d444:	e17ffe15 	stw	r5,-8(fp)
  80d448:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80d44c:	e0bffd17 	ldw	r2,-12(fp)
  80d450:	10800017 	ldw	r2,0(r2)
  80d454:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80d458:	e0bffc17 	ldw	r2,-16(fp)
  80d45c:	11000a04 	addi	r4,r2,40
  80d460:	e0bffd17 	ldw	r2,-12(fp)
  80d464:	11c00217 	ldw	r7,8(r2)
  80d468:	e17ffe17 	ldw	r5,-8(fp)
  80d46c:	e1bfff17 	ldw	r6,-4(fp)
  80d470:	080dc440 	call	80dc44 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80d474:	e037883a 	mov	sp,fp
  80d478:	dfc00117 	ldw	ra,4(sp)
  80d47c:	df000017 	ldw	fp,0(sp)
  80d480:	dec00204 	addi	sp,sp,8
  80d484:	f800283a 	ret

0080d488 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80d488:	defffc04 	addi	sp,sp,-16
  80d48c:	dfc00315 	stw	ra,12(sp)
  80d490:	df000215 	stw	fp,8(sp)
  80d494:	df000204 	addi	fp,sp,8
  80d498:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80d49c:	e0bfff17 	ldw	r2,-4(fp)
  80d4a0:	10800017 	ldw	r2,0(r2)
  80d4a4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80d4a8:	e0bffe17 	ldw	r2,-8(fp)
  80d4ac:	11000a04 	addi	r4,r2,40
  80d4b0:	e0bfff17 	ldw	r2,-4(fp)
  80d4b4:	11400217 	ldw	r5,8(r2)
  80d4b8:	080d8b80 	call	80d8b8 <altera_avalon_jtag_uart_close>
}
  80d4bc:	e037883a 	mov	sp,fp
  80d4c0:	dfc00117 	ldw	ra,4(sp)
  80d4c4:	df000017 	ldw	fp,0(sp)
  80d4c8:	dec00204 	addi	sp,sp,8
  80d4cc:	f800283a 	ret

0080d4d0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80d4d0:	defffa04 	addi	sp,sp,-24
  80d4d4:	dfc00515 	stw	ra,20(sp)
  80d4d8:	df000415 	stw	fp,16(sp)
  80d4dc:	df000404 	addi	fp,sp,16
  80d4e0:	e13ffd15 	stw	r4,-12(fp)
  80d4e4:	e17ffe15 	stw	r5,-8(fp)
  80d4e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80d4ec:	e0bffd17 	ldw	r2,-12(fp)
  80d4f0:	10800017 	ldw	r2,0(r2)
  80d4f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80d4f8:	e0bffc17 	ldw	r2,-16(fp)
  80d4fc:	11000a04 	addi	r4,r2,40
  80d500:	e17ffe17 	ldw	r5,-8(fp)
  80d504:	e1bfff17 	ldw	r6,-4(fp)
  80d508:	080d92c0 	call	80d92c <altera_avalon_jtag_uart_ioctl>
}
  80d50c:	e037883a 	mov	sp,fp
  80d510:	dfc00117 	ldw	ra,4(sp)
  80d514:	df000017 	ldw	fp,0(sp)
  80d518:	dec00204 	addi	sp,sp,8
  80d51c:	f800283a 	ret

0080d520 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80d520:	defffa04 	addi	sp,sp,-24
  80d524:	dfc00515 	stw	ra,20(sp)
  80d528:	df000415 	stw	fp,16(sp)
  80d52c:	df000404 	addi	fp,sp,16
  80d530:	e13ffd15 	stw	r4,-12(fp)
  80d534:	e17ffe15 	stw	r5,-8(fp)
  80d538:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d53c:	e0fffd17 	ldw	r3,-12(fp)
  80d540:	00800044 	movi	r2,1
  80d544:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80d548:	e0bffd17 	ldw	r2,-12(fp)
  80d54c:	10800017 	ldw	r2,0(r2)
  80d550:	11000104 	addi	r4,r2,4
  80d554:	e0bffd17 	ldw	r2,-12(fp)
  80d558:	10800817 	ldw	r2,32(r2)
  80d55c:	1007883a 	mov	r3,r2
  80d560:	2005883a 	mov	r2,r4
  80d564:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80d568:	e13ffe17 	ldw	r4,-8(fp)
  80d56c:	e17fff17 	ldw	r5,-4(fp)
  80d570:	d8000015 	stw	zero,0(sp)
  80d574:	01802074 	movhi	r6,129
  80d578:	31b57804 	addi	r6,r6,-10784
  80d57c:	e1fffd17 	ldw	r7,-12(fp)
  80d580:	0810ddc0 	call	810ddc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80d584:	e0bffd17 	ldw	r2,-12(fp)
  80d588:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80d58c:	e0bffd17 	ldw	r2,-12(fp)
  80d590:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80d594:	00802074 	movhi	r2,129
  80d598:	1096f404 	addi	r2,r2,23504
  80d59c:	10800017 	ldw	r2,0(r2)
  80d5a0:	100b883a 	mov	r5,r2
  80d5a4:	01802074 	movhi	r6,129
  80d5a8:	31b60204 	addi	r6,r6,-10232
  80d5ac:	e1fffd17 	ldw	r7,-12(fp)
  80d5b0:	08109140 	call	810914 <alt_alarm_start>
  80d5b4:	1004403a 	cmpge	r2,r2,zero
  80d5b8:	1000041e 	bne	r2,zero,80d5cc <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80d5bc:	e0fffd17 	ldw	r3,-12(fp)
  80d5c0:	00a00034 	movhi	r2,32768
  80d5c4:	10bfffc4 	addi	r2,r2,-1
  80d5c8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80d5cc:	e037883a 	mov	sp,fp
  80d5d0:	dfc00117 	ldw	ra,4(sp)
  80d5d4:	df000017 	ldw	fp,0(sp)
  80d5d8:	dec00204 	addi	sp,sp,8
  80d5dc:	f800283a 	ret

0080d5e0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80d5e0:	defff804 	addi	sp,sp,-32
  80d5e4:	df000715 	stw	fp,28(sp)
  80d5e8:	df000704 	addi	fp,sp,28
  80d5ec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80d5f0:	e0bfff17 	ldw	r2,-4(fp)
  80d5f4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80d5f8:	e0bffe17 	ldw	r2,-8(fp)
  80d5fc:	10800017 	ldw	r2,0(r2)
  80d600:	e0bffd15 	stw	r2,-12(fp)
  80d604:	00000006 	br	80d608 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d608:	e0bffd17 	ldw	r2,-12(fp)
  80d60c:	10800104 	addi	r2,r2,4
  80d610:	10800037 	ldwio	r2,0(r2)
  80d614:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80d618:	e0bffc17 	ldw	r2,-16(fp)
  80d61c:	1080c00c 	andi	r2,r2,768
  80d620:	1005003a 	cmpeq	r2,r2,zero
  80d624:	1000741e 	bne	r2,zero,80d7f8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80d628:	e0bffc17 	ldw	r2,-16(fp)
  80d62c:	1080400c 	andi	r2,r2,256
  80d630:	1005003a 	cmpeq	r2,r2,zero
  80d634:	1000351e 	bne	r2,zero,80d70c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80d638:	00800074 	movhi	r2,1
  80d63c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d640:	e0bffe17 	ldw	r2,-8(fp)
  80d644:	10800a17 	ldw	r2,40(r2)
  80d648:	10800044 	addi	r2,r2,1
  80d64c:	1081ffcc 	andi	r2,r2,2047
  80d650:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80d654:	e0bffe17 	ldw	r2,-8(fp)
  80d658:	10c00b17 	ldw	r3,44(r2)
  80d65c:	e0bffa17 	ldw	r2,-24(fp)
  80d660:	18801626 	beq	r3,r2,80d6bc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80d664:	e0bffd17 	ldw	r2,-12(fp)
  80d668:	10800037 	ldwio	r2,0(r2)
  80d66c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80d670:	e0bffb17 	ldw	r2,-20(fp)
  80d674:	10a0000c 	andi	r2,r2,32768
  80d678:	1005003a 	cmpeq	r2,r2,zero
  80d67c:	10000f1e 	bne	r2,zero,80d6bc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80d680:	e0bffe17 	ldw	r2,-8(fp)
  80d684:	10c00a17 	ldw	r3,40(r2)
  80d688:	e0bffb17 	ldw	r2,-20(fp)
  80d68c:	1009883a 	mov	r4,r2
  80d690:	e0bffe17 	ldw	r2,-8(fp)
  80d694:	1885883a 	add	r2,r3,r2
  80d698:	10800e04 	addi	r2,r2,56
  80d69c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d6a0:	e0bffe17 	ldw	r2,-8(fp)
  80d6a4:	10800a17 	ldw	r2,40(r2)
  80d6a8:	10800044 	addi	r2,r2,1
  80d6ac:	10c1ffcc 	andi	r3,r2,2047
  80d6b0:	e0bffe17 	ldw	r2,-8(fp)
  80d6b4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80d6b8:	003fe106 	br	80d640 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80d6bc:	e0bffb17 	ldw	r2,-20(fp)
  80d6c0:	10bfffec 	andhi	r2,r2,65535
  80d6c4:	1005003a 	cmpeq	r2,r2,zero
  80d6c8:	1000101e 	bne	r2,zero,80d70c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d6cc:	e0bffe17 	ldw	r2,-8(fp)
  80d6d0:	10c00817 	ldw	r3,32(r2)
  80d6d4:	00bfff84 	movi	r2,-2
  80d6d8:	1886703a 	and	r3,r3,r2
  80d6dc:	e0bffe17 	ldw	r2,-8(fp)
  80d6e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80d6e4:	e0bffd17 	ldw	r2,-12(fp)
  80d6e8:	11000104 	addi	r4,r2,4
  80d6ec:	e0bffe17 	ldw	r2,-8(fp)
  80d6f0:	10800817 	ldw	r2,32(r2)
  80d6f4:	1007883a 	mov	r3,r2
  80d6f8:	2005883a 	mov	r2,r4
  80d6fc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d700:	e0bffd17 	ldw	r2,-12(fp)
  80d704:	10800104 	addi	r2,r2,4
  80d708:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80d70c:	e0bffc17 	ldw	r2,-16(fp)
  80d710:	1080800c 	andi	r2,r2,512
  80d714:	1005003a 	cmpeq	r2,r2,zero
  80d718:	103fbb1e 	bne	r2,zero,80d608 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80d71c:	e0bffc17 	ldw	r2,-16(fp)
  80d720:	10bfffec 	andhi	r2,r2,65535
  80d724:	1004d43a 	srli	r2,r2,16
  80d728:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80d72c:	00001506 	br	80d784 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80d730:	e13ffd17 	ldw	r4,-12(fp)
  80d734:	e0bffe17 	ldw	r2,-8(fp)
  80d738:	10c00d17 	ldw	r3,52(r2)
  80d73c:	e0bffe17 	ldw	r2,-8(fp)
  80d740:	1885883a 	add	r2,r3,r2
  80d744:	10820e04 	addi	r2,r2,2104
  80d748:	10800003 	ldbu	r2,0(r2)
  80d74c:	10c03fcc 	andi	r3,r2,255
  80d750:	18c0201c 	xori	r3,r3,128
  80d754:	18ffe004 	addi	r3,r3,-128
  80d758:	2005883a 	mov	r2,r4
  80d75c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d760:	e0bffe17 	ldw	r2,-8(fp)
  80d764:	10800d17 	ldw	r2,52(r2)
  80d768:	10800044 	addi	r2,r2,1
  80d76c:	10c1ffcc 	andi	r3,r2,2047
  80d770:	e0bffe17 	ldw	r2,-8(fp)
  80d774:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80d778:	e0bff917 	ldw	r2,-28(fp)
  80d77c:	10bfffc4 	addi	r2,r2,-1
  80d780:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80d784:	e0bff917 	ldw	r2,-28(fp)
  80d788:	1005003a 	cmpeq	r2,r2,zero
  80d78c:	1000051e 	bne	r2,zero,80d7a4 <altera_avalon_jtag_uart_irq+0x1c4>
  80d790:	e0bffe17 	ldw	r2,-8(fp)
  80d794:	10c00d17 	ldw	r3,52(r2)
  80d798:	e0bffe17 	ldw	r2,-8(fp)
  80d79c:	10800c17 	ldw	r2,48(r2)
  80d7a0:	18bfe31e 	bne	r3,r2,80d730 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80d7a4:	e0bff917 	ldw	r2,-28(fp)
  80d7a8:	1005003a 	cmpeq	r2,r2,zero
  80d7ac:	103f961e 	bne	r2,zero,80d608 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d7b0:	e0bffe17 	ldw	r2,-8(fp)
  80d7b4:	10c00817 	ldw	r3,32(r2)
  80d7b8:	00bfff44 	movi	r2,-3
  80d7bc:	1886703a 	and	r3,r3,r2
  80d7c0:	e0bffe17 	ldw	r2,-8(fp)
  80d7c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d7c8:	e0bffe17 	ldw	r2,-8(fp)
  80d7cc:	10800017 	ldw	r2,0(r2)
  80d7d0:	11000104 	addi	r4,r2,4
  80d7d4:	e0bffe17 	ldw	r2,-8(fp)
  80d7d8:	10800817 	ldw	r2,32(r2)
  80d7dc:	1007883a 	mov	r3,r2
  80d7e0:	2005883a 	mov	r2,r4
  80d7e4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d7e8:	e0bffd17 	ldw	r2,-12(fp)
  80d7ec:	10800104 	addi	r2,r2,4
  80d7f0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80d7f4:	003f8406 	br	80d608 <altera_avalon_jtag_uart_irq+0x28>
}
  80d7f8:	e037883a 	mov	sp,fp
  80d7fc:	df000017 	ldw	fp,0(sp)
  80d800:	dec00104 	addi	sp,sp,4
  80d804:	f800283a 	ret

0080d808 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80d808:	defffc04 	addi	sp,sp,-16
  80d80c:	df000315 	stw	fp,12(sp)
  80d810:	df000304 	addi	fp,sp,12
  80d814:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80d818:	e0bfff17 	ldw	r2,-4(fp)
  80d81c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80d820:	e0bffe17 	ldw	r2,-8(fp)
  80d824:	10800017 	ldw	r2,0(r2)
  80d828:	10800104 	addi	r2,r2,4
  80d82c:	10800037 	ldwio	r2,0(r2)
  80d830:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80d834:	e0bffd17 	ldw	r2,-12(fp)
  80d838:	1081000c 	andi	r2,r2,1024
  80d83c:	1005003a 	cmpeq	r2,r2,zero
  80d840:	10000c1e 	bne	r2,zero,80d874 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80d844:	e0bffe17 	ldw	r2,-8(fp)
  80d848:	10800017 	ldw	r2,0(r2)
  80d84c:	11000104 	addi	r4,r2,4
  80d850:	e0bffe17 	ldw	r2,-8(fp)
  80d854:	10800817 	ldw	r2,32(r2)
  80d858:	10810014 	ori	r2,r2,1024
  80d85c:	1007883a 	mov	r3,r2
  80d860:	2005883a 	mov	r2,r4
  80d864:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80d868:	e0bffe17 	ldw	r2,-8(fp)
  80d86c:	10000915 	stw	zero,36(r2)
  80d870:	00000a06 	br	80d89c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80d874:	e0bffe17 	ldw	r2,-8(fp)
  80d878:	10c00917 	ldw	r3,36(r2)
  80d87c:	00a00034 	movhi	r2,32768
  80d880:	10bfff04 	addi	r2,r2,-4
  80d884:	10c00536 	bltu	r2,r3,80d89c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80d888:	e0bffe17 	ldw	r2,-8(fp)
  80d88c:	10800917 	ldw	r2,36(r2)
  80d890:	10c00044 	addi	r3,r2,1
  80d894:	e0bffe17 	ldw	r2,-8(fp)
  80d898:	10c00915 	stw	r3,36(r2)
  80d89c:	00802074 	movhi	r2,129
  80d8a0:	1096f404 	addi	r2,r2,23504
  80d8a4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80d8a8:	e037883a 	mov	sp,fp
  80d8ac:	df000017 	ldw	fp,0(sp)
  80d8b0:	dec00104 	addi	sp,sp,4
  80d8b4:	f800283a 	ret

0080d8b8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80d8b8:	defffc04 	addi	sp,sp,-16
  80d8bc:	df000315 	stw	fp,12(sp)
  80d8c0:	df000304 	addi	fp,sp,12
  80d8c4:	e13ffd15 	stw	r4,-12(fp)
  80d8c8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80d8cc:	00000706 	br	80d8ec <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80d8d0:	e0bffe17 	ldw	r2,-8(fp)
  80d8d4:	1090000c 	andi	r2,r2,16384
  80d8d8:	1005003a 	cmpeq	r2,r2,zero
  80d8dc:	1000031e 	bne	r2,zero,80d8ec <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80d8e0:	00bffd44 	movi	r2,-11
  80d8e4:	e0bfff15 	stw	r2,-4(fp)
  80d8e8:	00000b06 	br	80d918 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80d8ec:	e0bffd17 	ldw	r2,-12(fp)
  80d8f0:	10c00d17 	ldw	r3,52(r2)
  80d8f4:	e0bffd17 	ldw	r2,-12(fp)
  80d8f8:	10800c17 	ldw	r2,48(r2)
  80d8fc:	18800526 	beq	r3,r2,80d914 <altera_avalon_jtag_uart_close+0x5c>
  80d900:	e0bffd17 	ldw	r2,-12(fp)
  80d904:	10c00917 	ldw	r3,36(r2)
  80d908:	e0bffd17 	ldw	r2,-12(fp)
  80d90c:	10800117 	ldw	r2,4(r2)
  80d910:	18bfef36 	bltu	r3,r2,80d8d0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80d914:	e03fff15 	stw	zero,-4(fp)
  80d918:	e0bfff17 	ldw	r2,-4(fp)
}
  80d91c:	e037883a 	mov	sp,fp
  80d920:	df000017 	ldw	fp,0(sp)
  80d924:	dec00104 	addi	sp,sp,4
  80d928:	f800283a 	ret

0080d92c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80d92c:	defff804 	addi	sp,sp,-32
  80d930:	df000715 	stw	fp,28(sp)
  80d934:	df000704 	addi	fp,sp,28
  80d938:	e13ffb15 	stw	r4,-20(fp)
  80d93c:	e17ffc15 	stw	r5,-16(fp)
  80d940:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80d944:	00bff9c4 	movi	r2,-25
  80d948:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80d94c:	e0bffc17 	ldw	r2,-16(fp)
  80d950:	e0bfff15 	stw	r2,-4(fp)
  80d954:	e0ffff17 	ldw	r3,-4(fp)
  80d958:	189a8060 	cmpeqi	r2,r3,27137
  80d95c:	1000041e 	bne	r2,zero,80d970 <altera_avalon_jtag_uart_ioctl+0x44>
  80d960:	e0ffff17 	ldw	r3,-4(fp)
  80d964:	189a80a0 	cmpeqi	r2,r3,27138
  80d968:	10001b1e 	bne	r2,zero,80d9d8 <altera_avalon_jtag_uart_ioctl+0xac>
  80d96c:	00002706 	br	80da0c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80d970:	e0bffb17 	ldw	r2,-20(fp)
  80d974:	10c00117 	ldw	r3,4(r2)
  80d978:	00a00034 	movhi	r2,32768
  80d97c:	10bfffc4 	addi	r2,r2,-1
  80d980:	18802226 	beq	r3,r2,80da0c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80d984:	e0bffd17 	ldw	r2,-12(fp)
  80d988:	10800017 	ldw	r2,0(r2)
  80d98c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80d990:	e0bff917 	ldw	r2,-28(fp)
  80d994:	10800090 	cmplti	r2,r2,2
  80d998:	1000071e 	bne	r2,zero,80d9b8 <altera_avalon_jtag_uart_ioctl+0x8c>
  80d99c:	e0fff917 	ldw	r3,-28(fp)
  80d9a0:	00a00034 	movhi	r2,32768
  80d9a4:	10bfffc4 	addi	r2,r2,-1
  80d9a8:	18800326 	beq	r3,r2,80d9b8 <altera_avalon_jtag_uart_ioctl+0x8c>
  80d9ac:	e0bff917 	ldw	r2,-28(fp)
  80d9b0:	e0bffe15 	stw	r2,-8(fp)
  80d9b4:	00000306 	br	80d9c4 <altera_avalon_jtag_uart_ioctl+0x98>
  80d9b8:	00e00034 	movhi	r3,32768
  80d9bc:	18ffff84 	addi	r3,r3,-2
  80d9c0:	e0fffe15 	stw	r3,-8(fp)
  80d9c4:	e0bffb17 	ldw	r2,-20(fp)
  80d9c8:	e0fffe17 	ldw	r3,-8(fp)
  80d9cc:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80d9d0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80d9d4:	00000d06 	br	80da0c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80d9d8:	e0bffb17 	ldw	r2,-20(fp)
  80d9dc:	10c00117 	ldw	r3,4(r2)
  80d9e0:	00a00034 	movhi	r2,32768
  80d9e4:	10bfffc4 	addi	r2,r2,-1
  80d9e8:	18800826 	beq	r3,r2,80da0c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80d9ec:	e13ffd17 	ldw	r4,-12(fp)
  80d9f0:	e0bffb17 	ldw	r2,-20(fp)
  80d9f4:	10c00917 	ldw	r3,36(r2)
  80d9f8:	e0bffb17 	ldw	r2,-20(fp)
  80d9fc:	10800117 	ldw	r2,4(r2)
  80da00:	1885803a 	cmpltu	r2,r3,r2
  80da04:	20800015 	stw	r2,0(r4)
      rc = 0;
  80da08:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80da0c:	e0bffa17 	ldw	r2,-24(fp)
}
  80da10:	e037883a 	mov	sp,fp
  80da14:	df000017 	ldw	fp,0(sp)
  80da18:	dec00104 	addi	sp,sp,4
  80da1c:	f800283a 	ret

0080da20 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80da20:	defff204 	addi	sp,sp,-56
  80da24:	dfc00d15 	stw	ra,52(sp)
  80da28:	df000c15 	stw	fp,48(sp)
  80da2c:	df000c04 	addi	fp,sp,48
  80da30:	e13ffb15 	stw	r4,-20(fp)
  80da34:	e17ffc15 	stw	r5,-16(fp)
  80da38:	e1bffd15 	stw	r6,-12(fp)
  80da3c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80da40:	e0bffc17 	ldw	r2,-16(fp)
  80da44:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80da48:	00004806 	br	80db6c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80da4c:	e0bffb17 	ldw	r2,-20(fp)
  80da50:	10800a17 	ldw	r2,40(r2)
  80da54:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80da58:	e0bffb17 	ldw	r2,-20(fp)
  80da5c:	10800b17 	ldw	r2,44(r2)
  80da60:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80da64:	e0fff717 	ldw	r3,-36(fp)
  80da68:	e0bff617 	ldw	r2,-40(fp)
  80da6c:	18800536 	bltu	r3,r2,80da84 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80da70:	e0bff717 	ldw	r2,-36(fp)
  80da74:	e0fff617 	ldw	r3,-40(fp)
  80da78:	10c5c83a 	sub	r2,r2,r3
  80da7c:	e0bff815 	stw	r2,-32(fp)
  80da80:	00000406 	br	80da94 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80da84:	00820004 	movi	r2,2048
  80da88:	e0fff617 	ldw	r3,-40(fp)
  80da8c:	10c5c83a 	sub	r2,r2,r3
  80da90:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80da94:	e0bff817 	ldw	r2,-32(fp)
  80da98:	1005003a 	cmpeq	r2,r2,zero
  80da9c:	10001f1e 	bne	r2,zero,80db1c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80daa0:	e0fffd17 	ldw	r3,-12(fp)
  80daa4:	e0bff817 	ldw	r2,-32(fp)
  80daa8:	1880022e 	bgeu	r3,r2,80dab4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80daac:	e0bffd17 	ldw	r2,-12(fp)
  80dab0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80dab4:	e0bffb17 	ldw	r2,-20(fp)
  80dab8:	10c00e04 	addi	r3,r2,56
  80dabc:	e0bff617 	ldw	r2,-40(fp)
  80dac0:	1887883a 	add	r3,r3,r2
  80dac4:	e0bffa17 	ldw	r2,-24(fp)
  80dac8:	1009883a 	mov	r4,r2
  80dacc:	180b883a 	mov	r5,r3
  80dad0:	e1bff817 	ldw	r6,-32(fp)
  80dad4:	08090580 	call	809058 <memcpy>
      ptr   += n;
  80dad8:	e0fff817 	ldw	r3,-32(fp)
  80dadc:	e0bffa17 	ldw	r2,-24(fp)
  80dae0:	10c5883a 	add	r2,r2,r3
  80dae4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80dae8:	e0fffd17 	ldw	r3,-12(fp)
  80daec:	e0bff817 	ldw	r2,-32(fp)
  80daf0:	1885c83a 	sub	r2,r3,r2
  80daf4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80daf8:	e0fff617 	ldw	r3,-40(fp)
  80dafc:	e0bff817 	ldw	r2,-32(fp)
  80db00:	1885883a 	add	r2,r3,r2
  80db04:	10c1ffcc 	andi	r3,r2,2047
  80db08:	e0bffb17 	ldw	r2,-20(fp)
  80db0c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80db10:	e0bffd17 	ldw	r2,-12(fp)
  80db14:	10800048 	cmpgei	r2,r2,1
  80db18:	103fcc1e 	bne	r2,zero,80da4c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80db1c:	e0fffa17 	ldw	r3,-24(fp)
  80db20:	e0bffc17 	ldw	r2,-16(fp)
  80db24:	1880141e 	bne	r3,r2,80db78 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80db28:	e0bffe17 	ldw	r2,-8(fp)
  80db2c:	1090000c 	andi	r2,r2,16384
  80db30:	1004c03a 	cmpne	r2,r2,zero
  80db34:	1000101e 	bne	r2,zero,80db78 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80db38:	e0bffb17 	ldw	r2,-20(fp)
  80db3c:	10c00a17 	ldw	r3,40(r2)
  80db40:	e0bff717 	ldw	r2,-36(fp)
  80db44:	1880051e 	bne	r3,r2,80db5c <altera_avalon_jtag_uart_read+0x13c>
  80db48:	e0bffb17 	ldw	r2,-20(fp)
  80db4c:	10c00917 	ldw	r3,36(r2)
  80db50:	e0bffb17 	ldw	r2,-20(fp)
  80db54:	10800117 	ldw	r2,4(r2)
  80db58:	18bff736 	bltu	r3,r2,80db38 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80db5c:	e0bffb17 	ldw	r2,-20(fp)
  80db60:	10c00a17 	ldw	r3,40(r2)
  80db64:	e0bff717 	ldw	r2,-36(fp)
  80db68:	18800326 	beq	r3,r2,80db78 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80db6c:	e0bffd17 	ldw	r2,-12(fp)
  80db70:	10800048 	cmpgei	r2,r2,1
  80db74:	103fb51e 	bne	r2,zero,80da4c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80db78:	e0fffa17 	ldw	r3,-24(fp)
  80db7c:	e0bffc17 	ldw	r2,-16(fp)
  80db80:	18801926 	beq	r3,r2,80dbe8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80db84:	0005303a 	rdctl	r2,status
  80db88:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80db8c:	e0fff517 	ldw	r3,-44(fp)
  80db90:	00bfff84 	movi	r2,-2
  80db94:	1884703a 	and	r2,r3,r2
  80db98:	1001703a 	wrctl	status,r2
  
  return context;
  80db9c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80dba0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80dba4:	e0bffb17 	ldw	r2,-20(fp)
  80dba8:	10800817 	ldw	r2,32(r2)
  80dbac:	10c00054 	ori	r3,r2,1
  80dbb0:	e0bffb17 	ldw	r2,-20(fp)
  80dbb4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80dbb8:	e0bffb17 	ldw	r2,-20(fp)
  80dbbc:	10800017 	ldw	r2,0(r2)
  80dbc0:	11000104 	addi	r4,r2,4
  80dbc4:	e0bffb17 	ldw	r2,-20(fp)
  80dbc8:	10800817 	ldw	r2,32(r2)
  80dbcc:	1007883a 	mov	r3,r2
  80dbd0:	2005883a 	mov	r2,r4
  80dbd4:	10c00035 	stwio	r3,0(r2)
  80dbd8:	e0bff917 	ldw	r2,-28(fp)
  80dbdc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dbe0:	e0bff417 	ldw	r2,-48(fp)
  80dbe4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80dbe8:	e0fffa17 	ldw	r3,-24(fp)
  80dbec:	e0bffc17 	ldw	r2,-16(fp)
  80dbf0:	18800526 	beq	r3,r2,80dc08 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80dbf4:	e0fffa17 	ldw	r3,-24(fp)
  80dbf8:	e0bffc17 	ldw	r2,-16(fp)
  80dbfc:	1887c83a 	sub	r3,r3,r2
  80dc00:	e0ffff15 	stw	r3,-4(fp)
  80dc04:	00000906 	br	80dc2c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80dc08:	e0bffe17 	ldw	r2,-8(fp)
  80dc0c:	1090000c 	andi	r2,r2,16384
  80dc10:	1005003a 	cmpeq	r2,r2,zero
  80dc14:	1000031e 	bne	r2,zero,80dc24 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80dc18:	00bffd44 	movi	r2,-11
  80dc1c:	e0bfff15 	stw	r2,-4(fp)
  80dc20:	00000206 	br	80dc2c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80dc24:	00bffec4 	movi	r2,-5
  80dc28:	e0bfff15 	stw	r2,-4(fp)
  80dc2c:	e0bfff17 	ldw	r2,-4(fp)
}
  80dc30:	e037883a 	mov	sp,fp
  80dc34:	dfc00117 	ldw	ra,4(sp)
  80dc38:	df000017 	ldw	fp,0(sp)
  80dc3c:	dec00204 	addi	sp,sp,8
  80dc40:	f800283a 	ret

0080dc44 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80dc44:	defff204 	addi	sp,sp,-56
  80dc48:	dfc00d15 	stw	ra,52(sp)
  80dc4c:	df000c15 	stw	fp,48(sp)
  80dc50:	df000c04 	addi	fp,sp,48
  80dc54:	e13ffb15 	stw	r4,-20(fp)
  80dc58:	e17ffc15 	stw	r5,-16(fp)
  80dc5c:	e1bffd15 	stw	r6,-12(fp)
  80dc60:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80dc64:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80dc68:	e0bffc17 	ldw	r2,-16(fp)
  80dc6c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80dc70:	00003a06 	br	80dd5c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80dc74:	e0bffb17 	ldw	r2,-20(fp)
  80dc78:	10800c17 	ldw	r2,48(r2)
  80dc7c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80dc80:	e0bffb17 	ldw	r2,-20(fp)
  80dc84:	10800d17 	ldw	r2,52(r2)
  80dc88:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80dc8c:	e0fffa17 	ldw	r3,-24(fp)
  80dc90:	e0bff917 	ldw	r2,-28(fp)
  80dc94:	1880062e 	bgeu	r3,r2,80dcb0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80dc98:	e0fff917 	ldw	r3,-28(fp)
  80dc9c:	e0bffa17 	ldw	r2,-24(fp)
  80dca0:	1885c83a 	sub	r2,r3,r2
  80dca4:	10bfffc4 	addi	r2,r2,-1
  80dca8:	e0bff815 	stw	r2,-32(fp)
  80dcac:	00000c06 	br	80dce0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80dcb0:	e0bff917 	ldw	r2,-28(fp)
  80dcb4:	1005003a 	cmpeq	r2,r2,zero
  80dcb8:	1000051e 	bne	r2,zero,80dcd0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80dcbc:	00820004 	movi	r2,2048
  80dcc0:	e0fffa17 	ldw	r3,-24(fp)
  80dcc4:	10c5c83a 	sub	r2,r2,r3
  80dcc8:	e0bff815 	stw	r2,-32(fp)
  80dccc:	00000406 	br	80dce0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80dcd0:	0081ffc4 	movi	r2,2047
  80dcd4:	e0fffa17 	ldw	r3,-24(fp)
  80dcd8:	10c5c83a 	sub	r2,r2,r3
  80dcdc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80dce0:	e0bff817 	ldw	r2,-32(fp)
  80dce4:	1005003a 	cmpeq	r2,r2,zero
  80dce8:	10001f1e 	bne	r2,zero,80dd68 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80dcec:	e0fffd17 	ldw	r3,-12(fp)
  80dcf0:	e0bff817 	ldw	r2,-32(fp)
  80dcf4:	1880022e 	bgeu	r3,r2,80dd00 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80dcf8:	e0bffd17 	ldw	r2,-12(fp)
  80dcfc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80dd00:	e0bffb17 	ldw	r2,-20(fp)
  80dd04:	10c20e04 	addi	r3,r2,2104
  80dd08:	e0bffa17 	ldw	r2,-24(fp)
  80dd0c:	1885883a 	add	r2,r3,r2
  80dd10:	e0fffc17 	ldw	r3,-16(fp)
  80dd14:	1009883a 	mov	r4,r2
  80dd18:	180b883a 	mov	r5,r3
  80dd1c:	e1bff817 	ldw	r6,-32(fp)
  80dd20:	08090580 	call	809058 <memcpy>
      ptr   += n;
  80dd24:	e0fff817 	ldw	r3,-32(fp)
  80dd28:	e0bffc17 	ldw	r2,-16(fp)
  80dd2c:	10c5883a 	add	r2,r2,r3
  80dd30:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80dd34:	e0fffd17 	ldw	r3,-12(fp)
  80dd38:	e0bff817 	ldw	r2,-32(fp)
  80dd3c:	1885c83a 	sub	r2,r3,r2
  80dd40:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80dd44:	e0fffa17 	ldw	r3,-24(fp)
  80dd48:	e0bff817 	ldw	r2,-32(fp)
  80dd4c:	1885883a 	add	r2,r3,r2
  80dd50:	10c1ffcc 	andi	r3,r2,2047
  80dd54:	e0bffb17 	ldw	r2,-20(fp)
  80dd58:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80dd5c:	e0bffd17 	ldw	r2,-12(fp)
  80dd60:	10800048 	cmpgei	r2,r2,1
  80dd64:	103fc31e 	bne	r2,zero,80dc74 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dd68:	0005303a 	rdctl	r2,status
  80dd6c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dd70:	e0fff517 	ldw	r3,-44(fp)
  80dd74:	00bfff84 	movi	r2,-2
  80dd78:	1884703a 	and	r2,r3,r2
  80dd7c:	1001703a 	wrctl	status,r2
  
  return context;
  80dd80:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80dd84:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80dd88:	e0bffb17 	ldw	r2,-20(fp)
  80dd8c:	10800817 	ldw	r2,32(r2)
  80dd90:	10c00094 	ori	r3,r2,2
  80dd94:	e0bffb17 	ldw	r2,-20(fp)
  80dd98:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80dd9c:	e0bffb17 	ldw	r2,-20(fp)
  80dda0:	10800017 	ldw	r2,0(r2)
  80dda4:	11000104 	addi	r4,r2,4
  80dda8:	e0bffb17 	ldw	r2,-20(fp)
  80ddac:	10800817 	ldw	r2,32(r2)
  80ddb0:	1007883a 	mov	r3,r2
  80ddb4:	2005883a 	mov	r2,r4
  80ddb8:	10c00035 	stwio	r3,0(r2)
  80ddbc:	e0bff717 	ldw	r2,-36(fp)
  80ddc0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ddc4:	e0bff417 	ldw	r2,-48(fp)
  80ddc8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80ddcc:	e0bffd17 	ldw	r2,-12(fp)
  80ddd0:	10800050 	cmplti	r2,r2,1
  80ddd4:	1000111e 	bne	r2,zero,80de1c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80ddd8:	e0bffe17 	ldw	r2,-8(fp)
  80dddc:	1090000c 	andi	r2,r2,16384
  80dde0:	1004c03a 	cmpne	r2,r2,zero
  80dde4:	1000101e 	bne	r2,zero,80de28 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80dde8:	e0bffb17 	ldw	r2,-20(fp)
  80ddec:	10c00d17 	ldw	r3,52(r2)
  80ddf0:	e0bff917 	ldw	r2,-28(fp)
  80ddf4:	1880051e 	bne	r3,r2,80de0c <altera_avalon_jtag_uart_write+0x1c8>
  80ddf8:	e0bffb17 	ldw	r2,-20(fp)
  80ddfc:	10c00917 	ldw	r3,36(r2)
  80de00:	e0bffb17 	ldw	r2,-20(fp)
  80de04:	10800117 	ldw	r2,4(r2)
  80de08:	18bff736 	bltu	r3,r2,80dde8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80de0c:	e0bffb17 	ldw	r2,-20(fp)
  80de10:	10c00d17 	ldw	r3,52(r2)
  80de14:	e0bff917 	ldw	r2,-28(fp)
  80de18:	18800326 	beq	r3,r2,80de28 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  80de1c:	e0bffd17 	ldw	r2,-12(fp)
  80de20:	10800048 	cmpgei	r2,r2,1
  80de24:	103fcd1e 	bne	r2,zero,80dd5c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80de28:	e0fffc17 	ldw	r3,-16(fp)
  80de2c:	e0bff617 	ldw	r2,-40(fp)
  80de30:	18800526 	beq	r3,r2,80de48 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80de34:	e0fffc17 	ldw	r3,-16(fp)
  80de38:	e0bff617 	ldw	r2,-40(fp)
  80de3c:	1887c83a 	sub	r3,r3,r2
  80de40:	e0ffff15 	stw	r3,-4(fp)
  80de44:	00000906 	br	80de6c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80de48:	e0bffe17 	ldw	r2,-8(fp)
  80de4c:	1090000c 	andi	r2,r2,16384
  80de50:	1005003a 	cmpeq	r2,r2,zero
  80de54:	1000031e 	bne	r2,zero,80de64 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80de58:	00bffd44 	movi	r2,-11
  80de5c:	e0bfff15 	stw	r2,-4(fp)
  80de60:	00000206 	br	80de6c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  80de64:	00bffec4 	movi	r2,-5
  80de68:	e0bfff15 	stw	r2,-4(fp)
  80de6c:	e0bfff17 	ldw	r2,-4(fp)
}
  80de70:	e037883a 	mov	sp,fp
  80de74:	dfc00117 	ldw	ra,4(sp)
  80de78:	df000017 	ldw	fp,0(sp)
  80de7c:	dec00204 	addi	sp,sp,8
  80de80:	f800283a 	ret

0080de84 <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
  80de84:	defffa04 	addi	sp,sp,-24
  80de88:	dfc00515 	stw	ra,20(sp)
  80de8c:	df000415 	stw	fp,16(sp)
  80de90:	df000404 	addi	fp,sp,16
  80de94:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
  80de98:	e0bfff17 	ldw	r2,-4(fp)
  80de9c:	11000704 	addi	r4,r2,28
  80dea0:	080dfdc0 	call	80dfdc <alt_avalon_mutex_reg>
  80dea4:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
  80dea8:	e0bffe17 	ldw	r2,-8(fp)
  80deac:	1004c03a 	cmpne	r2,r2,zero
  80deb0:	1000041e 	bne	r2,zero,80dec4 <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
  80deb4:	e0bfff17 	ldw	r2,-4(fp)
  80deb8:	11000b04 	addi	r4,r2,44
  80debc:	080dfdc0 	call	80dfdc <alt_avalon_mutex_reg>
  80dec0:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  80dec4:	e0bffe17 	ldw	r2,-8(fp)
  80dec8:	1004c03a 	cmpne	r2,r2,zero
  80decc:	1000041e 	bne	r2,zero,80dee0 <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
  80ded0:	e13fff17 	ldw	r4,-4(fp)
  80ded4:	d1601704 	addi	r5,gp,-32676
  80ded8:	0810aac0 	call	810aac <alt_dev_llist_insert>
  80dedc:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  80dee0:	e0bffe17 	ldw	r2,-8(fp)
  80dee4:	1004c03a 	cmpne	r2,r2,zero
  80dee8:	1000361e 	bne	r2,zero,80dfc4 <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
  80deec:	e0bfff17 	ldw	r2,-4(fp)
  80def0:	11000917 	ldw	r4,36(r2)
  80def4:	080e4280 	call	80e428 <altera_avalon_mutex_open>
  80def8:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
  80defc:	e0bffd17 	ldw	r2,-12(fp)
  80df00:	1005003a 	cmpeq	r2,r2,zero
  80df04:	10002f1e 	bne	r2,zero,80dfc4 <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
  80df08:	e0bfff17 	ldw	r2,-4(fp)
  80df0c:	11000d17 	ldw	r4,52(r2)
  80df10:	080e4280 	call	80e428 <altera_avalon_mutex_open>
  80df14:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
  80df18:	e0bffc17 	ldw	r2,-16(fp)
  80df1c:	1005003a 	cmpeq	r2,r2,zero
  80df20:	1000281e 	bne	r2,zero,80dfc4 <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  80df24:	00000f06 	br	80df64 <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
  80df28:	e13ffd17 	ldw	r4,-12(fp)
  80df2c:	01400044 	movi	r5,1
  80df30:	080e5400 	call	80e540 <altera_avalon_mutex_trylock>
  80df34:	1004c03a 	cmpne	r2,r2,zero
  80df38:	10000a1e 	bne	r2,zero,80df64 <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
  80df3c:	e0bfff17 	ldw	r2,-4(fp)
  80df40:	10800317 	ldw	r2,12(r2)
  80df44:	1009883a 	mov	r4,r2
  80df48:	e0bfff17 	ldw	r2,-4(fp)
  80df4c:	10800517 	ldw	r2,20(r2)
  80df50:	1007883a 	mov	r3,r2
  80df54:	2005883a 	mov	r2,r4
  80df58:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
  80df5c:	e13ffd17 	ldw	r4,-12(fp)
  80df60:	080e5800 	call	80e580 <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  80df64:	e13ffd17 	ldw	r4,-12(fp)
  80df68:	080e6580 	call	80e658 <altera_avalon_mutex_first_lock>
  80df6c:	1004c03a 	cmpne	r2,r2,zero
  80df70:	103fed1e 	bne	r2,zero,80df28 <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  80df74:	00000f06 	br	80dfb4 <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
  80df78:	e13ffc17 	ldw	r4,-16(fp)
  80df7c:	01400044 	movi	r5,1
  80df80:	080e5400 	call	80e540 <altera_avalon_mutex_trylock>
  80df84:	1004c03a 	cmpne	r2,r2,zero
  80df88:	10000a1e 	bne	r2,zero,80dfb4 <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
  80df8c:	e0bfff17 	ldw	r2,-4(fp)
  80df90:	10800417 	ldw	r2,16(r2)
  80df94:	1009883a 	mov	r4,r2
  80df98:	e0bfff17 	ldw	r2,-4(fp)
  80df9c:	10800517 	ldw	r2,20(r2)
  80dfa0:	1007883a 	mov	r3,r2
  80dfa4:	2005883a 	mov	r2,r4
  80dfa8:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
  80dfac:	e13ffc17 	ldw	r4,-16(fp)
  80dfb0:	080e5800 	call	80e580 <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  80dfb4:	e13ffc17 	ldw	r4,-16(fp)
  80dfb8:	080e6580 	call	80e658 <altera_avalon_mutex_first_lock>
  80dfbc:	1004c03a 	cmpne	r2,r2,zero
  80dfc0:	103fed1e 	bne	r2,zero,80df78 <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
  80dfc4:	e0bffe17 	ldw	r2,-8(fp)
}
  80dfc8:	e037883a 	mov	sp,fp
  80dfcc:	dfc00117 	ldw	ra,4(sp)
  80dfd0:	df000017 	ldw	fp,0(sp)
  80dfd4:	dec00204 	addi	sp,sp,8
  80dfd8:	f800283a 	ret

0080dfdc <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
  80dfdc:	defffc04 	addi	sp,sp,-16
  80dfe0:	dfc00315 	stw	ra,12(sp)
  80dfe4:	df000215 	stw	fp,8(sp)
  80dfe8:	df000204 	addi	fp,sp,8
  80dfec:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80dff0:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  80dff4:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
  80dff8:	e0bffe17 	ldw	r2,-8(fp)
  80dffc:	1004c03a 	cmpne	r2,r2,zero
  80e000:	1000061e 	bne	r2,zero,80e01c <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
  80e004:	e13fff17 	ldw	r4,-4(fp)
  80e008:	01402074 	movhi	r5,129
  80e00c:	294fe104 	addi	r5,r5,16260
  80e010:	0810aac0 	call	810aac <alt_dev_llist_insert>
  80e014:	e0bffe15 	stw	r2,-8(fp)
  80e018:	00000506 	br	80e030 <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
  80e01c:	080e0480 	call	80e048 <alt_get_errno>
  80e020:	00c00304 	movi	r3,12
  80e024:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
  80e028:	00bffd04 	movi	r2,-12
  80e02c:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
  80e030:	e0bffe17 	ldw	r2,-8(fp)
}
  80e034:	e037883a 	mov	sp,fp
  80e038:	dfc00117 	ldw	ra,4(sp)
  80e03c:	df000017 	ldw	fp,0(sp)
  80e040:	dec00204 	addi	sp,sp,8
  80e044:	f800283a 	ret

0080e048 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e048:	defffd04 	addi	sp,sp,-12
  80e04c:	dfc00215 	stw	ra,8(sp)
  80e050:	df000115 	stw	fp,4(sp)
  80e054:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e058:	00802074 	movhi	r2,129
  80e05c:	108fdd04 	addi	r2,r2,16244
  80e060:	10800017 	ldw	r2,0(r2)
  80e064:	1005003a 	cmpeq	r2,r2,zero
  80e068:	1000061e 	bne	r2,zero,80e084 <alt_get_errno+0x3c>
  80e06c:	00802074 	movhi	r2,129
  80e070:	108fdd04 	addi	r2,r2,16244
  80e074:	10800017 	ldw	r2,0(r2)
  80e078:	103ee83a 	callr	r2
  80e07c:	e0bfff15 	stw	r2,-4(fp)
  80e080:	00000306 	br	80e090 <alt_get_errno+0x48>
  80e084:	00802074 	movhi	r2,129
  80e088:	1096ef04 	addi	r2,r2,23484
  80e08c:	e0bfff15 	stw	r2,-4(fp)
  80e090:	e0bfff17 	ldw	r2,-4(fp)
}
  80e094:	e037883a 	mov	sp,fp
  80e098:	dfc00117 	ldw	ra,4(sp)
  80e09c:	df000017 	ldw	fp,0(sp)
  80e0a0:	dec00204 	addi	sp,sp,8
  80e0a4:	f800283a 	ret

0080e0a8 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
  80e0a8:	defffc04 	addi	sp,sp,-16
  80e0ac:	dfc00315 	stw	ra,12(sp)
  80e0b0:	df000215 	stw	fp,8(sp)
  80e0b4:	df000204 	addi	fp,sp,8
  80e0b8:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
  80e0bc:	e13fff17 	ldw	r4,-4(fp)
  80e0c0:	d1601704 	addi	r5,gp,-32676
  80e0c4:	0810c880 	call	810c88 <alt_find_dev>
  80e0c8:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  80e0cc:	e0bffe17 	ldw	r2,-8(fp)
  80e0d0:	1004c03a 	cmpne	r2,r2,zero
  80e0d4:	1000041e 	bne	r2,zero,80e0e8 <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  80e0d8:	080e0480 	call	80e048 <alt_get_errno>
  80e0dc:	1007883a 	mov	r3,r2
  80e0e0:	008004c4 	movi	r2,19
  80e0e4:	18800015 	stw	r2,0(r3)
  }

  return dev;
  80e0e8:	e0bffe17 	ldw	r2,-8(fp)

}
  80e0ec:	e037883a 	mov	sp,fp
  80e0f0:	dfc00117 	ldw	ra,4(sp)
  80e0f4:	df000017 	ldw	fp,0(sp)
  80e0f8:	dec00204 	addi	sp,sp,8
  80e0fc:	f800283a 	ret

0080e100 <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
  80e100:	defffe04 	addi	sp,sp,-8
  80e104:	df000115 	stw	fp,4(sp)
  80e108:	df000104 	addi	fp,sp,4
  80e10c:	e13fff15 	stw	r4,-4(fp)
  return;
}
  80e110:	e037883a 	mov	sp,fp
  80e114:	df000017 	ldw	fp,0(sp)
  80e118:	dec00104 	addi	sp,sp,4
  80e11c:	f800283a 	ret

0080e120 <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
  80e120:	defff904 	addi	sp,sp,-28
  80e124:	dfc00615 	stw	ra,24(sp)
  80e128:	df000515 	stw	fp,20(sp)
  80e12c:	df000504 	addi	fp,sp,20
  80e130:	e13ffe15 	stw	r4,-8(fp)
  80e134:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  80e138:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
  80e13c:	e0bffe17 	ldw	r2,-8(fp)
  80e140:	11000704 	addi	r4,r2,28
  80e144:	01400044 	movi	r5,1
  80e148:	080e5000 	call	80e500 <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
  80e14c:	e0bffe17 	ldw	r2,-8(fp)
  80e150:	10800317 	ldw	r2,12(r2)
  80e154:	10800037 	ldwio	r2,0(r2)
  80e158:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
  80e15c:	e13ffe17 	ldw	r4,-8(fp)
  80e160:	e17ffc17 	ldw	r5,-16(fp)
  80e164:	080e1dc0 	call	80e1dc <alt_mailbox_increment_ptr>
  80e168:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
  80e16c:	e0bffe17 	ldw	r2,-8(fp)
  80e170:	10800417 	ldw	r2,16(r2)
  80e174:	10800037 	ldwio	r2,0(r2)
  80e178:	1007883a 	mov	r3,r2
  80e17c:	e0bffb17 	ldw	r2,-20(fp)
  80e180:	1880061e 	bne	r3,r2,80e19c <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
  80e184:	080e0480 	call	80e048 <alt_get_errno>
  80e188:	00c002c4 	movi	r3,11
  80e18c:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
  80e190:	00bffd44 	movi	r2,-11
  80e194:	e0bffd15 	stw	r2,-12(fp)
  80e198:	00000706 	br	80e1b8 <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
  80e19c:	e0bffc17 	ldw	r2,-16(fp)
  80e1a0:	e0ffff17 	ldw	r3,-4(fp)
  80e1a4:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
  80e1a8:	e0bffe17 	ldw	r2,-8(fp)
  80e1ac:	10800317 	ldw	r2,12(r2)
  80e1b0:	e0fffb17 	ldw	r3,-20(fp)
  80e1b4:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
  80e1b8:	e0bffe17 	ldw	r2,-8(fp)
  80e1bc:	11000704 	addi	r4,r2,28
  80e1c0:	080e5800 	call	80e580 <altera_avalon_mutex_unlock>

  return ret_code;
  80e1c4:	e0bffd17 	ldw	r2,-12(fp)

}
  80e1c8:	e037883a 	mov	sp,fp
  80e1cc:	dfc00117 	ldw	ra,4(sp)
  80e1d0:	df000017 	ldw	fp,0(sp)
  80e1d4:	dec00204 	addi	sp,sp,8
  80e1d8:	f800283a 	ret

0080e1dc <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
  80e1dc:	defffd04 	addi	sp,sp,-12
  80e1e0:	df000215 	stw	fp,8(sp)
  80e1e4:	df000204 	addi	fp,sp,8
  80e1e8:	e13ffe15 	stw	r4,-8(fp)
  80e1ec:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
  80e1f0:	e0bfff17 	ldw	r2,-4(fp)
  80e1f4:	10800104 	addi	r2,r2,4
  80e1f8:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
  80e1fc:	e0bffe17 	ldw	r2,-8(fp)
  80e200:	10c00617 	ldw	r3,24(r2)
  80e204:	e0bfff17 	ldw	r2,-4(fp)
  80e208:	1880032e 	bgeu	r3,r2,80e218 <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
  80e20c:	e0bffe17 	ldw	r2,-8(fp)
  80e210:	10800517 	ldw	r2,20(r2)
  80e214:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
  80e218:	e0bfff17 	ldw	r2,-4(fp)
}
  80e21c:	e037883a 	mov	sp,fp
  80e220:	df000017 	ldw	fp,0(sp)
  80e224:	dec00104 	addi	sp,sp,4
  80e228:	f800283a 	ret

0080e22c <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
  80e22c:	defffa04 	addi	sp,sp,-24
  80e230:	dfc00515 	stw	ra,20(sp)
  80e234:	df000415 	stw	fp,16(sp)
  80e238:	dc000315 	stw	r16,12(sp)
  80e23c:	df000304 	addi	fp,sp,12
  80e240:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  80e244:	e0bfff17 	ldw	r2,-4(fp)
  80e248:	11000b04 	addi	r4,r2,44
  80e24c:	01400044 	movi	r5,1
  80e250:	080e5000 	call	80e500 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  80e254:	e0bfff17 	ldw	r2,-4(fp)
  80e258:	10800417 	ldw	r2,16(r2)
  80e25c:	10800037 	ldwio	r2,0(r2)
  80e260:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
  80e264:	e0bfff17 	ldw	r2,-4(fp)
  80e268:	10800317 	ldw	r2,12(r2)
  80e26c:	10800037 	ldwio	r2,0(r2)
  80e270:	1007883a 	mov	r3,r2
  80e274:	e0bffd17 	ldw	r2,-12(fp)
  80e278:	18bffa26 	beq	r3,r2,80e264 <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
  80e27c:	e0bffd17 	ldw	r2,-12(fp)
  80e280:	10800037 	ldwio	r2,0(r2)
  80e284:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
  80e288:	e0bfff17 	ldw	r2,-4(fp)
  80e28c:	10800417 	ldw	r2,16(r2)
  80e290:	1021883a 	mov	r16,r2
  80e294:	e13fff17 	ldw	r4,-4(fp)
  80e298:	e17ffd17 	ldw	r5,-12(fp)
  80e29c:	080e1dc0 	call	80e1dc <alt_mailbox_increment_ptr>
  80e2a0:	1007883a 	mov	r3,r2
  80e2a4:	8005883a 	mov	r2,r16
  80e2a8:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
  80e2ac:	e0bfff17 	ldw	r2,-4(fp)
  80e2b0:	11000b04 	addi	r4,r2,44
  80e2b4:	080e5800 	call	80e580 <altera_avalon_mutex_unlock>

  return msg;
  80e2b8:	e0bffe17 	ldw	r2,-8(fp)

}
  80e2bc:	e037883a 	mov	sp,fp
  80e2c0:	dfc00217 	ldw	ra,8(sp)
  80e2c4:	df000117 	ldw	fp,4(sp)
  80e2c8:	dc000017 	ldw	r16,0(sp)
  80e2cc:	dec00304 	addi	sp,sp,12
  80e2d0:	f800283a 	ret

0080e2d4 <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
  80e2d4:	defff904 	addi	sp,sp,-28
  80e2d8:	dfc00615 	stw	ra,24(sp)
  80e2dc:	df000515 	stw	fp,20(sp)
  80e2e0:	dc000415 	stw	r16,16(sp)
  80e2e4:	df000404 	addi	fp,sp,16
  80e2e8:	e13ffe15 	stw	r4,-8(fp)
  80e2ec:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
  80e2f0:	e0bfff17 	ldw	r2,-4(fp)
  80e2f4:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  80e2f8:	e0bffe17 	ldw	r2,-8(fp)
  80e2fc:	11000b04 	addi	r4,r2,44
  80e300:	01400044 	movi	r5,1
  80e304:	080e5000 	call	80e500 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  80e308:	e0bffe17 	ldw	r2,-8(fp)
  80e30c:	10800417 	ldw	r2,16(r2)
  80e310:	10800037 	ldwio	r2,0(r2)
  80e314:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
  80e318:	e0bffe17 	ldw	r2,-8(fp)
  80e31c:	10800317 	ldw	r2,12(r2)
  80e320:	10800037 	ldwio	r2,0(r2)
  80e324:	1007883a 	mov	r3,r2
  80e328:	e0bffc17 	ldw	r2,-16(fp)
  80e32c:	1880091e 	bne	r3,r2,80e354 <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
  80e330:	e0ffff17 	ldw	r3,-4(fp)
  80e334:	00bffd44 	movi	r2,-11
  80e338:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
  80e33c:	080e0480 	call	80e048 <alt_get_errno>
  80e340:	1007883a 	mov	r3,r2
  80e344:	008002c4 	movi	r2,11
  80e348:	18800015 	stw	r2,0(r3)
    msg = 0;
  80e34c:	e03ffd15 	stw	zero,-12(fp)
  80e350:	00000c06 	br	80e384 <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
  80e354:	e0bffc17 	ldw	r2,-16(fp)
  80e358:	10800037 	ldwio	r2,0(r2)
  80e35c:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
  80e360:	e0bffe17 	ldw	r2,-8(fp)
  80e364:	10800417 	ldw	r2,16(r2)
  80e368:	1021883a 	mov	r16,r2
  80e36c:	e13ffe17 	ldw	r4,-8(fp)
  80e370:	e17ffc17 	ldw	r5,-16(fp)
  80e374:	080e1dc0 	call	80e1dc <alt_mailbox_increment_ptr>
  80e378:	1007883a 	mov	r3,r2
  80e37c:	8005883a 	mov	r2,r16
  80e380:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
  80e384:	e0bffe17 	ldw	r2,-8(fp)
  80e388:	11000b04 	addi	r4,r2,44
  80e38c:	080e5800 	call	80e580 <altera_avalon_mutex_unlock>

  return msg;
  80e390:	e0bffd17 	ldw	r2,-12(fp)

}
  80e394:	e037883a 	mov	sp,fp
  80e398:	dfc00217 	ldw	ra,8(sp)
  80e39c:	df000117 	ldw	fp,4(sp)
  80e3a0:	dc000017 	ldw	r16,0(sp)
  80e3a4:	dec00304 	addi	sp,sp,12
  80e3a8:	f800283a 	ret

0080e3ac <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  80e3ac:	defff904 	addi	sp,sp,-28
  80e3b0:	df000615 	stw	fp,24(sp)
  80e3b4:	df000604 	addi	fp,sp,24
  80e3b8:	e13ffe15 	stw	r4,-8(fp)
  80e3bc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
  80e3c0:	00bfffc4 	movi	r2,-1
  80e3c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
  80e3c8:	0005317a 	rdctl	r2,cpuid
  80e3cc:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
  80e3d0:	e0bffd17 	ldw	r2,-12(fp)
  80e3d4:	1006943a 	slli	r3,r2,16
  80e3d8:	e0bfff17 	ldw	r2,-4(fp)
  80e3dc:	1884b03a 	or	r2,r3,r2
  80e3e0:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
  80e3e4:	e0bffe17 	ldw	r2,-8(fp)
  80e3e8:	10800317 	ldw	r2,12(r2)
  80e3ec:	e0fffc17 	ldw	r3,-16(fp)
  80e3f0:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  80e3f4:	e0bffe17 	ldw	r2,-8(fp)
  80e3f8:	10800317 	ldw	r2,12(r2)
  80e3fc:	10800037 	ldwio	r2,0(r2)
  80e400:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
  80e404:	e0fffb17 	ldw	r3,-20(fp)
  80e408:	e0bffc17 	ldw	r2,-16(fp)
  80e40c:	1880011e 	bne	r3,r2,80e414 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
  80e410:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
  80e414:	e0bffa17 	ldw	r2,-24(fp)
}
  80e418:	e037883a 	mov	sp,fp
  80e41c:	df000017 	ldw	fp,0(sp)
  80e420:	dec00104 	addi	sp,sp,4
  80e424:	f800283a 	ret

0080e428 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
  80e428:	defffc04 	addi	sp,sp,-16
  80e42c:	dfc00315 	stw	ra,12(sp)
  80e430:	df000215 	stw	fp,8(sp)
  80e434:	df000204 	addi	fp,sp,8
  80e438:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
  80e43c:	e13fff17 	ldw	r4,-4(fp)
  80e440:	d1601904 	addi	r5,gp,-32668
  80e444:	0810c880 	call	810c88 <alt_find_dev>
  80e448:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  80e44c:	e0bffe17 	ldw	r2,-8(fp)
  80e450:	1004c03a 	cmpne	r2,r2,zero
  80e454:	1000041e 	bne	r2,zero,80e468 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  80e458:	080e4800 	call	80e480 <alt_get_errno>
  80e45c:	1007883a 	mov	r3,r2
  80e460:	008004c4 	movi	r2,19
  80e464:	18800015 	stw	r2,0(r3)
  }

  return dev;
  80e468:	e0bffe17 	ldw	r2,-8(fp)
}
  80e46c:	e037883a 	mov	sp,fp
  80e470:	dfc00117 	ldw	ra,4(sp)
  80e474:	df000017 	ldw	fp,0(sp)
  80e478:	dec00204 	addi	sp,sp,8
  80e47c:	f800283a 	ret

0080e480 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e480:	defffd04 	addi	sp,sp,-12
  80e484:	dfc00215 	stw	ra,8(sp)
  80e488:	df000115 	stw	fp,4(sp)
  80e48c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e490:	00802074 	movhi	r2,129
  80e494:	108fdd04 	addi	r2,r2,16244
  80e498:	10800017 	ldw	r2,0(r2)
  80e49c:	1005003a 	cmpeq	r2,r2,zero
  80e4a0:	1000061e 	bne	r2,zero,80e4bc <alt_get_errno+0x3c>
  80e4a4:	00802074 	movhi	r2,129
  80e4a8:	108fdd04 	addi	r2,r2,16244
  80e4ac:	10800017 	ldw	r2,0(r2)
  80e4b0:	103ee83a 	callr	r2
  80e4b4:	e0bfff15 	stw	r2,-4(fp)
  80e4b8:	00000306 	br	80e4c8 <alt_get_errno+0x48>
  80e4bc:	00802074 	movhi	r2,129
  80e4c0:	1096ef04 	addi	r2,r2,23484
  80e4c4:	e0bfff15 	stw	r2,-4(fp)
  80e4c8:	e0bfff17 	ldw	r2,-4(fp)
}
  80e4cc:	e037883a 	mov	sp,fp
  80e4d0:	dfc00117 	ldw	ra,4(sp)
  80e4d4:	df000017 	ldw	fp,0(sp)
  80e4d8:	dec00204 	addi	sp,sp,8
  80e4dc:	f800283a 	ret

0080e4e0 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
  80e4e0:	defffe04 	addi	sp,sp,-8
  80e4e4:	df000115 	stw	fp,4(sp)
  80e4e8:	df000104 	addi	fp,sp,4
  80e4ec:	e13fff15 	stw	r4,-4(fp)
  return;
}
  80e4f0:	e037883a 	mov	sp,fp
  80e4f4:	df000017 	ldw	fp,0(sp)
  80e4f8:	dec00104 	addi	sp,sp,4
  80e4fc:	f800283a 	ret

0080e500 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
  80e500:	defffc04 	addi	sp,sp,-16
  80e504:	dfc00315 	stw	ra,12(sp)
  80e508:	df000215 	stw	fp,8(sp)
  80e50c:	df000204 	addi	fp,sp,8
  80e510:	e13ffe15 	stw	r4,-8(fp)
  80e514:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
  80e518:	e13ffe17 	ldw	r4,-8(fp)
  80e51c:	e17fff17 	ldw	r5,-4(fp)
  80e520:	080e3ac0 	call	80e3ac <alt_mutex_trylock>
  80e524:	1004c03a 	cmpne	r2,r2,zero
  80e528:	103ffb1e 	bne	r2,zero,80e518 <altera_avalon_mutex_lock+0x18>
}
  80e52c:	e037883a 	mov	sp,fp
  80e530:	dfc00117 	ldw	ra,4(sp)
  80e534:	df000017 	ldw	fp,0(sp)
  80e538:	dec00204 	addi	sp,sp,8
  80e53c:	f800283a 	ret

0080e540 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  80e540:	defffb04 	addi	sp,sp,-20
  80e544:	dfc00415 	stw	ra,16(sp)
  80e548:	df000315 	stw	fp,12(sp)
  80e54c:	df000304 	addi	fp,sp,12
  80e550:	e13ffe15 	stw	r4,-8(fp)
  80e554:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
  80e558:	e13ffe17 	ldw	r4,-8(fp)
  80e55c:	e17fff17 	ldw	r5,-4(fp)
  80e560:	080e3ac0 	call	80e3ac <alt_mutex_trylock>
  80e564:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
  80e568:	e0bffd17 	ldw	r2,-12(fp)
}
  80e56c:	e037883a 	mov	sp,fp
  80e570:	dfc00117 	ldw	ra,4(sp)
  80e574:	df000017 	ldw	fp,0(sp)
  80e578:	dec00204 	addi	sp,sp,8
  80e57c:	f800283a 	ret

0080e580 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  80e580:	defffd04 	addi	sp,sp,-12
  80e584:	df000215 	stw	fp,8(sp)
  80e588:	df000204 	addi	fp,sp,8
  80e58c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
  80e590:	0005317a 	rdctl	r2,cpuid
  80e594:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
  80e598:	e0bfff17 	ldw	r2,-4(fp)
  80e59c:	10800317 	ldw	r2,12(r2)
  80e5a0:	10800104 	addi	r2,r2,4
  80e5a4:	1007883a 	mov	r3,r2
  80e5a8:	00800044 	movi	r2,1
  80e5ac:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
  80e5b0:	e0bfff17 	ldw	r2,-4(fp)
  80e5b4:	11000317 	ldw	r4,12(r2)
  80e5b8:	e0bffe17 	ldw	r2,-8(fp)
  80e5bc:	1004943a 	slli	r2,r2,16
  80e5c0:	1007883a 	mov	r3,r2
  80e5c4:	2005883a 	mov	r2,r4
  80e5c8:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
  80e5cc:	e037883a 	mov	sp,fp
  80e5d0:	df000017 	ldw	fp,0(sp)
  80e5d4:	dec00104 	addi	sp,sp,4
  80e5d8:	f800283a 	ret

0080e5dc <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  80e5dc:	defff904 	addi	sp,sp,-28
  80e5e0:	df000615 	stw	fp,24(sp)
  80e5e4:	df000604 	addi	fp,sp,24
  80e5e8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
  80e5ec:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
  80e5f0:	0005317a 	rdctl	r2,cpuid
  80e5f4:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  80e5f8:	e0bfff17 	ldw	r2,-4(fp)
  80e5fc:	10800317 	ldw	r2,12(r2)
  80e600:	10800037 	ldwio	r2,0(r2)
  80e604:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
  80e608:	e0bffd17 	ldw	r2,-12(fp)
  80e60c:	10bfffec 	andhi	r2,r2,65535
  80e610:	1004d43a 	srli	r2,r2,16
  80e614:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
  80e618:	e0fffc17 	ldw	r3,-16(fp)
  80e61c:	e0bffe17 	ldw	r2,-8(fp)
  80e620:	1880081e 	bne	r3,r2,80e644 <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
  80e624:	e0bffd17 	ldw	r2,-12(fp)
  80e628:	10bfffcc 	andi	r2,r2,65535
  80e62c:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
  80e630:	e0bffb17 	ldw	r2,-20(fp)
  80e634:	1005003a 	cmpeq	r2,r2,zero
  80e638:	1000021e 	bne	r2,zero,80e644 <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
  80e63c:	00800044 	movi	r2,1
  80e640:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
  80e644:	e0bffa17 	ldw	r2,-24(fp)
}
  80e648:	e037883a 	mov	sp,fp
  80e64c:	df000017 	ldw	fp,0(sp)
  80e650:	dec00104 	addi	sp,sp,4
  80e654:	f800283a 	ret

0080e658 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  80e658:	defffc04 	addi	sp,sp,-16
  80e65c:	df000315 	stw	fp,12(sp)
  80e660:	df000304 	addi	fp,sp,12
  80e664:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
  80e668:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
  80e66c:	e0bfff17 	ldw	r2,-4(fp)
  80e670:	10800317 	ldw	r2,12(r2)
  80e674:	10800104 	addi	r2,r2,4
  80e678:	10800037 	ldwio	r2,0(r2)
  80e67c:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
  80e680:	e0bffe17 	ldw	r2,-8(fp)
  80e684:	1080004c 	andi	r2,r2,1
  80e688:	10803fcc 	andi	r2,r2,255
  80e68c:	1005003a 	cmpeq	r2,r2,zero
  80e690:	1000021e 	bne	r2,zero,80e69c <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
  80e694:	00800044 	movi	r2,1
  80e698:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
  80e69c:	e0bffd17 	ldw	r2,-12(fp)
}
  80e6a0:	e037883a 	mov	sp,fp
  80e6a4:	df000017 	ldw	fp,0(sp)
  80e6a8:	dec00104 	addi	sp,sp,4
  80e6ac:	f800283a 	ret

0080e6b0 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
  80e6b0:	defff904 	addi	sp,sp,-28
  80e6b4:	df000615 	stw	fp,24(sp)
  80e6b8:	df000604 	addi	fp,sp,24
  80e6bc:	e13ffe15 	stw	r4,-8(fp)
  80e6c0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
  80e6c4:	e03ffa15 	stw	zero,-24(fp)
  80e6c8:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
  80e6cc:	e0bffe17 	ldw	r2,-8(fp)
  80e6d0:	10000035 	stwio	zero,0(r2)
  lo = IORD(hw_base_address, ( which_section*4   ));
  80e6d4:	e0bfff17 	ldw	r2,-4(fp)
  80e6d8:	1004913a 	slli	r2,r2,4
  80e6dc:	1007883a 	mov	r3,r2
  80e6e0:	e0bffe17 	ldw	r2,-8(fp)
  80e6e4:	1885883a 	add	r2,r3,r2
  80e6e8:	10800037 	ldwio	r2,0(r2)
  80e6ec:	e0bffd15 	stw	r2,-12(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
  80e6f0:	e0bfff17 	ldw	r2,-4(fp)
  80e6f4:	1004913a 	slli	r2,r2,4
  80e6f8:	1007883a 	mov	r3,r2
  80e6fc:	e0bffe17 	ldw	r2,-8(fp)
  80e700:	1885883a 	add	r2,r3,r2
  80e704:	10800104 	addi	r2,r2,4
  80e708:	10800037 	ldwio	r2,0(r2)
  80e70c:	e0bffc15 	stw	r2,-16(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
  80e710:	e0bffc17 	ldw	r2,-16(fp)
  80e714:	0007883a 	mov	r3,zero
  80e718:	100a983a 	sll	r5,r2,zero
  80e71c:	0009883a 	mov	r4,zero
  80e720:	e0bffd17 	ldw	r2,-12(fp)
  80e724:	0007883a 	mov	r3,zero
  80e728:	208cb03a 	or	r6,r4,r2
  80e72c:	e1bffa15 	stw	r6,-24(fp)
  80e730:	28c4b03a 	or	r2,r5,r3
  80e734:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
  80e738:	e17ffa17 	ldw	r5,-24(fp)
  80e73c:	e1bffb17 	ldw	r6,-20(fp)
  80e740:	2807883a 	mov	r3,r5
  80e744:	3009883a 	mov	r4,r6
}
  80e748:	1805883a 	mov	r2,r3
  80e74c:	2007883a 	mov	r3,r4
  80e750:	e037883a 	mov	sp,fp
  80e754:	df000017 	ldw	fp,0(sp)
  80e758:	dec00104 	addi	sp,sp,4
  80e75c:	f800283a 	ret

0080e760 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
  80e760:	defffd04 	addi	sp,sp,-12
  80e764:	dfc00215 	stw	ra,8(sp)
  80e768:	df000115 	stw	fp,4(sp)
  80e76c:	df000104 	addi	fp,sp,4
  80e770:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
  80e774:	e13fff17 	ldw	r4,-4(fp)
  80e778:	000b883a 	mov	r5,zero
  80e77c:	080e6b00 	call	80e6b0 <perf_get_section_time>
  80e780:	1009883a 	mov	r4,r2
  80e784:	180b883a 	mov	r5,r3
  80e788:	200d883a 	mov	r6,r4
  80e78c:	280f883a 	mov	r7,r5
  80e790:	3007883a 	mov	r3,r6
  80e794:	3809883a 	mov	r4,r7
}
  80e798:	1805883a 	mov	r2,r3
  80e79c:	2007883a 	mov	r3,r4
  80e7a0:	e037883a 	mov	sp,fp
  80e7a4:	dfc00117 	ldw	ra,4(sp)
  80e7a8:	df000017 	ldw	fp,0(sp)
  80e7ac:	dec00204 	addi	sp,sp,8
  80e7b0:	f800283a 	ret

0080e7b4 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
  80e7b4:	defffd04 	addi	sp,sp,-12
  80e7b8:	df000215 	stw	fp,8(sp)
  80e7bc:	df000204 	addi	fp,sp,8
  80e7c0:	e13ffe15 	stw	r4,-8(fp)
  80e7c4:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
  80e7c8:	e0bfff17 	ldw	r2,-4(fp)
  80e7cc:	1004913a 	slli	r2,r2,4
  80e7d0:	1007883a 	mov	r3,r2
  80e7d4:	e0bffe17 	ldw	r2,-8(fp)
  80e7d8:	1885883a 	add	r2,r3,r2
  80e7dc:	10800204 	addi	r2,r2,8
  80e7e0:	10800037 	ldwio	r2,0(r2)
}
  80e7e4:	e037883a 	mov	sp,fp
  80e7e8:	df000017 	ldw	fp,0(sp)
  80e7ec:	dec00104 	addi	sp,sp,4
  80e7f0:	f800283a 	ret

0080e7f4 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
  80e7f4:	deffff04 	addi	sp,sp,-4
  80e7f8:	df000015 	stw	fp,0(sp)
  80e7fc:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
  80e800:	0005883a 	mov	r2,zero
#else
    return (void*)0;
#endif
}
  80e804:	e037883a 	mov	sp,fp
  80e808:	df000017 	ldw	fp,0(sp)
  80e80c:	dec00104 	addi	sp,sp,4
  80e810:	f800283a 	ret

0080e814 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
  80e814:	deffff04 	addi	sp,sp,-4
  80e818:	df000015 	stw	fp,0(sp)
  80e81c:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
  80e820:	0080bef4 	movhi	r2,763
  80e824:	10bc2004 	addi	r2,r2,-3968
}
  80e828:	e037883a 	mov	sp,fp
  80e82c:	df000017 	ldw	fp,0(sp)
  80e830:	dec00104 	addi	sp,sp,4
  80e834:	f800283a 	ret

0080e838 <read_word>:
* reads a word from an address in flash
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word(alt_u8* current_ptr)
{
  80e838:	defffe04 	addi	sp,sp,-8
  80e83c:	df000115 	stw	fp,4(sp)
  80e840:	df000104 	addi	fp,sp,4
  80e844:	e13fff15 	stw	r4,-4(fp)
  return (alt_u32)(*current_ptr | 
  80e848:	e0bfff17 	ldw	r2,-4(fp)
  80e84c:	10800003 	ldbu	r2,0(r2)
  80e850:	10c03fcc 	andi	r3,r2,255
  80e854:	e0bfff17 	ldw	r2,-4(fp)
  80e858:	10800044 	addi	r2,r2,1
  80e85c:	10800003 	ldbu	r2,0(r2)
  80e860:	10803fcc 	andi	r2,r2,255
  80e864:	1004923a 	slli	r2,r2,8
  80e868:	1886b03a 	or	r3,r3,r2
  80e86c:	e0bfff17 	ldw	r2,-4(fp)
  80e870:	10800084 	addi	r2,r2,2
  80e874:	10800003 	ldbu	r2,0(r2)
  80e878:	10803fcc 	andi	r2,r2,255
  80e87c:	1004943a 	slli	r2,r2,16
  80e880:	1886b03a 	or	r3,r3,r2
  80e884:	e0bfff17 	ldw	r2,-4(fp)
  80e888:	108000c4 	addi	r2,r2,3
  80e88c:	10800003 	ldbu	r2,0(r2)
  80e890:	10803fcc 	andi	r2,r2,255
  80e894:	1004963a 	slli	r2,r2,24
  80e898:	1884b03a 	or	r2,r3,r2
         (*(current_ptr+1) << 8) | 
         (*(current_ptr+2) << 16) |
         (*(current_ptr+3) << 24 ));
}
  80e89c:	e037883a 	mov	sp,fp
  80e8a0:	df000017 	ldw	fp,0(sp)
  80e8a4:	dec00104 	addi	sp,sp,4
  80e8a8:	f800283a 	ret

0080e8ac <read_word_inc>:
* reads a word from an address in flash, and increments the ptr
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word_inc(alt_u8** current_ptr)
{
  80e8ac:	defffc04 	addi	sp,sp,-16
  80e8b0:	dfc00315 	stw	ra,12(sp)
  80e8b4:	df000215 	stw	fp,8(sp)
  80e8b8:	df000204 	addi	fp,sp,8
  80e8bc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 value = read_word(*current_ptr);
  80e8c0:	e0bfff17 	ldw	r2,-4(fp)
  80e8c4:	11000017 	ldw	r4,0(r2)
  80e8c8:	080e8380 	call	80e838 <read_word>
  80e8cc:	e0bffe15 	stw	r2,-8(fp)
  *current_ptr += 4;
  80e8d0:	e0bfff17 	ldw	r2,-4(fp)
  80e8d4:	10800017 	ldw	r2,0(r2)
  80e8d8:	10c00104 	addi	r3,r2,4
  80e8dc:	e0bfff17 	ldw	r2,-4(fp)
  80e8e0:	10c00015 	stw	r3,0(r2)
  return value;
  80e8e4:	e0bffe17 	ldw	r2,-8(fp)
}
  80e8e8:	e037883a 	mov	sp,fp
  80e8ec:	dfc00117 	ldw	ra,4(sp)
  80e8f0:	df000017 	ldw	fp,0(sp)
  80e8f4:	dec00204 	addi	sp,sp,8
  80e8f8:	f800283a 	ret

0080e8fc <read_half_word>:
* reads a half word from an address in flash
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u16 read_half_word(alt_u8* current_ptr)
{
  80e8fc:	defffe04 	addi	sp,sp,-8
  80e900:	df000115 	stw	fp,4(sp)
  80e904:	df000104 	addi	fp,sp,4
  80e908:	e13fff15 	stw	r4,-4(fp)
  return (alt_u16)(*current_ptr | 
  80e90c:	e0bfff17 	ldw	r2,-4(fp)
  80e910:	10800003 	ldbu	r2,0(r2)
  80e914:	10c03fcc 	andi	r3,r2,255
  80e918:	e0bfff17 	ldw	r2,-4(fp)
  80e91c:	10800044 	addi	r2,r2,1
  80e920:	10800003 	ldbu	r2,0(r2)
  80e924:	10803fcc 	andi	r2,r2,255
  80e928:	1004923a 	slli	r2,r2,8
  80e92c:	1884b03a 	or	r2,r3,r2
  80e930:	10bfffcc 	andi	r2,r2,65535
         (*(current_ptr+1) << 8));
}
  80e934:	e037883a 	mov	sp,fp
  80e938:	df000017 	ldw	fp,0(sp)
  80e93c:	dec00104 	addi	sp,sp,4
  80e940:	f800283a 	ret

0080e944 <read_half_word_inc>:
* reads a half word from an address in flash, and increment the ptr
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u16 read_half_word_inc(alt_u8** current_ptr)
{
  80e944:	defffc04 	addi	sp,sp,-16
  80e948:	dfc00315 	stw	ra,12(sp)
  80e94c:	df000215 	stw	fp,8(sp)
  80e950:	df000204 	addi	fp,sp,8
  80e954:	e13fff15 	stw	r4,-4(fp)
  alt_u16 value = read_word(*current_ptr);
  80e958:	e0bfff17 	ldw	r2,-4(fp)
  80e95c:	11000017 	ldw	r4,0(r2)
  80e960:	080e8380 	call	80e838 <read_word>
  80e964:	e0bffe0d 	sth	r2,-8(fp)
  *current_ptr += 2;
  80e968:	e0bfff17 	ldw	r2,-4(fp)
  80e96c:	10800017 	ldw	r2,0(r2)
  80e970:	10c00084 	addi	r3,r2,2
  80e974:	e0bfff17 	ldw	r2,-4(fp)
  80e978:	10c00015 	stw	r3,0(r2)
  return value;
  80e97c:	e0bffe0b 	ldhu	r2,-8(fp)
}
  80e980:	e037883a 	mov	sp,fp
  80e984:	dfc00117 	ldw	ra,4(sp)
  80e988:	df000017 	ldw	fp,0(sp)
  80e98c:	dec00204 	addi	sp,sp,8
  80e990:	f800283a 	ret

0080e994 <check_file_header>:
*
* Check that this is a file header we can cope with and inrement the current ptr 
* accordingly
*/
static int check_file_header(alt_u8** current_ptr)
{
  80e994:	defff704 	addi	sp,sp,-36
  80e998:	dfc00815 	stw	ra,32(sp)
  80e99c:	df000715 	stw	fp,28(sp)
  80e9a0:	df000704 	addi	fp,sp,28
  80e9a4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = -ENOENT;
  80e9a8:	00bfff84 	movi	r2,-2
  80e9ac:	e0bffe15 	stw	r2,-8(fp)
  alt_u16 name_len, extra_len, version, flags, compression;
  alt_u32 uncompressed_len, compressed_len;

  version = read_half_word_inc(current_ptr);
  80e9b0:	e13fff17 	ldw	r4,-4(fp)
  80e9b4:	080e9440 	call	80e944 <read_half_word_inc>
  80e9b8:	e0bffc0d 	sth	r2,-16(fp)

  /* We can parse files designed for version 10 */
  if (version > 10)
  80e9bc:	e0bffc0b 	ldhu	r2,-16(fp)
  80e9c0:	108002e8 	cmpgeui	r2,r2,11
  80e9c4:	1000331e 	bne	r2,zero,80ea94 <check_file_header+0x100>
  {
    goto exit;
  }

  /* Read the flags, right now any flags are an error */
  flags = read_half_word_inc(current_ptr);
  80e9c8:	e13fff17 	ldw	r4,-4(fp)
  80e9cc:	080e9440 	call	80e944 <read_half_word_inc>
  80e9d0:	e0bffb8d 	sth	r2,-18(fp)

  if (flags )
  80e9d4:	e0bffb8b 	ldhu	r2,-18(fp)
  80e9d8:	1004c03a 	cmpne	r2,r2,zero
  80e9dc:	10002d1e 	bne	r2,zero,80ea94 <check_file_header+0x100>
  {
    goto exit;
  }

  compression = read_half_word_inc(current_ptr);
  80e9e0:	e13fff17 	ldw	r4,-4(fp)
  80e9e4:	080e9440 	call	80e944 <read_half_word_inc>
  80e9e8:	e0bffb0d 	sth	r2,-20(fp)

  /* Skip the mod times and the CRC */
  *current_ptr += 8;
  80e9ec:	e0bfff17 	ldw	r2,-4(fp)
  80e9f0:	10800017 	ldw	r2,0(r2)
  80e9f4:	10c00204 	addi	r3,r2,8
  80e9f8:	e0bfff17 	ldw	r2,-4(fp)
  80e9fc:	10c00015 	stw	r3,0(r2)

  /* Read the compressed and uncompressed lengths, these should be the same */
  compressed_len = read_word_inc(current_ptr);
  80ea00:	e13fff17 	ldw	r4,-4(fp)
  80ea04:	080e8ac0 	call	80e8ac <read_word_inc>
  80ea08:	e0bff915 	stw	r2,-28(fp)
  uncompressed_len = read_word_inc(current_ptr);
  80ea0c:	e13fff17 	ldw	r4,-4(fp)
  80ea10:	080e8ac0 	call	80e8ac <read_word_inc>
  80ea14:	e0bffa15 	stw	r2,-24(fp)

  if ((compression) || (compressed_len != uncompressed_len))
  80ea18:	e0bffb0b 	ldhu	r2,-20(fp)
  80ea1c:	1004c03a 	cmpne	r2,r2,zero
  80ea20:	10001c1e 	bne	r2,zero,80ea94 <check_file_header+0x100>
  80ea24:	e0fff917 	ldw	r3,-28(fp)
  80ea28:	e0bffa17 	ldw	r2,-24(fp)
  80ea2c:	1880191e 	bne	r3,r2,80ea94 <check_file_header+0x100>
  {
    goto exit;
  }

  /* Read the length of the name and extra fields */
  name_len = read_half_word_inc(current_ptr);
  80ea30:	e13fff17 	ldw	r4,-4(fp)
  80ea34:	080e9440 	call	80e944 <read_half_word_inc>
  80ea38:	e0bffd0d 	sth	r2,-12(fp)
  extra_len = read_half_word_inc(current_ptr);
  80ea3c:	e13fff17 	ldw	r4,-4(fp)
  80ea40:	080e9440 	call	80e944 <read_half_word_inc>
  80ea44:	e0bffc8d 	sth	r2,-14(fp)

  /* Skip the name and extra fields */
  *current_ptr += name_len;
  80ea48:	e0bfff17 	ldw	r2,-4(fp)
  80ea4c:	10c00017 	ldw	r3,0(r2)
  80ea50:	e0bffd0b 	ldhu	r2,-12(fp)
  80ea54:	1887883a 	add	r3,r3,r2
  80ea58:	e0bfff17 	ldw	r2,-4(fp)
  80ea5c:	10c00015 	stw	r3,0(r2)
  *current_ptr += extra_len;
  80ea60:	e0bfff17 	ldw	r2,-4(fp)
  80ea64:	10c00017 	ldw	r3,0(r2)
  80ea68:	e0bffc8b 	ldhu	r2,-14(fp)
  80ea6c:	1887883a 	add	r3,r3,r2
  80ea70:	e0bfff17 	ldw	r2,-4(fp)
  80ea74:	10c00015 	stw	r3,0(r2)

  *current_ptr += compressed_len;
  80ea78:	e0bfff17 	ldw	r2,-4(fp)
  80ea7c:	10c00017 	ldw	r3,0(r2)
  80ea80:	e0bff917 	ldw	r2,-28(fp)
  80ea84:	1887883a 	add	r3,r3,r2
  80ea88:	e0bfff17 	ldw	r2,-4(fp)
  80ea8c:	10c00015 	stw	r3,0(r2)

  ret_code = 0;
  80ea90:	e03ffe15 	stw	zero,-8(fp)

exit:
  return ret_code;
  80ea94:	e0bffe17 	ldw	r2,-8(fp)
}
  80ea98:	e037883a 	mov	sp,fp
  80ea9c:	dfc00117 	ldw	ra,4(sp)
  80eaa0:	df000017 	ldw	fp,0(sp)
  80eaa4:	dec00204 	addi	sp,sp,8
  80eaa8:	f800283a 	ret

0080eaac <check_directory_header>:
* Sanity check an entry in the directory structure
* 
* returns 0 for success -ENOENT if not
*/
int check_directory_header(alt_u8** current_ptr)
{
  80eaac:	defff704 	addi	sp,sp,-36
  80eab0:	dfc00815 	stw	ra,32(sp)
  80eab4:	df000715 	stw	fp,28(sp)
  80eab8:	df000704 	addi	fp,sp,28
  80eabc:	e13fff15 	stw	r4,-4(fp)
  int ret_code = -ENOENT;
  80eac0:	00bfff84 	movi	r2,-2
  80eac4:	e0bffe15 	stw	r2,-8(fp)
  alt_u16 version, flags, compression, name_len, extra_len, comment_len;
  alt_u32 compressed_len, uncompressed_len;

  /* We don't care what version made this file */
  *current_ptr += 2;
  80eac8:	e0bfff17 	ldw	r2,-4(fp)
  80eacc:	10800017 	ldw	r2,0(r2)
  80ead0:	10c00084 	addi	r3,r2,2
  80ead4:	e0bfff17 	ldw	r2,-4(fp)
  80ead8:	10c00015 	stw	r3,0(r2)

  /* We can parse files designed for version 10 */
  version = read_half_word_inc(current_ptr);
  80eadc:	e13fff17 	ldw	r4,-4(fp)
  80eae0:	080e9440 	call	80e944 <read_half_word_inc>
  80eae4:	e0bffd8d 	sth	r2,-10(fp)
  if (version > 10)
  80eae8:	e0bffd8b 	ldhu	r2,-10(fp)
  80eaec:	108002e8 	cmpgeui	r2,r2,11
  80eaf0:	1000331e 	bne	r2,zero,80ebc0 <check_directory_header+0x114>
  {
    goto exit;
  }

  /* Read the flags, any set are an error */
  flags = read_half_word_inc(current_ptr);
  80eaf4:	e13fff17 	ldw	r4,-4(fp)
  80eaf8:	080e9440 	call	80e944 <read_half_word_inc>
  80eafc:	e0bffd0d 	sth	r2,-12(fp)

  if (flags )
  80eb00:	e0bffd0b 	ldhu	r2,-12(fp)
  80eb04:	1004c03a 	cmpne	r2,r2,zero
  80eb08:	10002d1e 	bne	r2,zero,80ebc0 <check_directory_header+0x114>
  {
    goto exit;
  }

  compression = read_half_word_inc(current_ptr);
  80eb0c:	e13fff17 	ldw	r4,-4(fp)
  80eb10:	080e9440 	call	80e944 <read_half_word_inc>
  80eb14:	e0bffc8d 	sth	r2,-14(fp)


  /* Skip the mod times and the CRC */
  *current_ptr += 8;
  80eb18:	e0bfff17 	ldw	r2,-4(fp)
  80eb1c:	10800017 	ldw	r2,0(r2)
  80eb20:	10c00204 	addi	r3,r2,8
  80eb24:	e0bfff17 	ldw	r2,-4(fp)
  80eb28:	10c00015 	stw	r3,0(r2)

  /* Read the compressed and uncompressed lengths,these should be the same */
  compressed_len = read_word_inc(current_ptr);
  80eb2c:	e13fff17 	ldw	r4,-4(fp)
  80eb30:	080e8ac0 	call	80e8ac <read_word_inc>
  80eb34:	e0bffa15 	stw	r2,-24(fp)
  uncompressed_len = read_word_inc(current_ptr);
  80eb38:	e13fff17 	ldw	r4,-4(fp)
  80eb3c:	080e8ac0 	call	80e8ac <read_word_inc>
  80eb40:	e0bff915 	stw	r2,-28(fp)

  if ((compression) || (compressed_len != uncompressed_len))
  80eb44:	e0bffc8b 	ldhu	r2,-14(fp)
  80eb48:	1004c03a 	cmpne	r2,r2,zero
  80eb4c:	10001c1e 	bne	r2,zero,80ebc0 <check_directory_header+0x114>
  80eb50:	e0fffa17 	ldw	r3,-24(fp)
  80eb54:	e0bff917 	ldw	r2,-28(fp)
  80eb58:	1880191e 	bne	r3,r2,80ebc0 <check_directory_header+0x114>
  {
    goto exit;
  }

  /* Read the length of the name, extra fields and comment fields*/
  name_len = read_half_word_inc(current_ptr);
  80eb5c:	e13fff17 	ldw	r4,-4(fp)
  80eb60:	080e9440 	call	80e944 <read_half_word_inc>
  80eb64:	e0bffc0d 	sth	r2,-16(fp)
  extra_len = read_half_word_inc(current_ptr);
  80eb68:	e13fff17 	ldw	r4,-4(fp)
  80eb6c:	080e9440 	call	80e944 <read_half_word_inc>
  80eb70:	e0bffb8d 	sth	r2,-18(fp)
  comment_len = read_half_word_inc(current_ptr);
  80eb74:	e13fff17 	ldw	r4,-4(fp)
  80eb78:	080e9440 	call	80e944 <read_half_word_inc>
  80eb7c:	e0bffb0d 	sth	r2,-20(fp)

  /* We don't care about the disk number, the file attributes or the offset */
  *current_ptr += 12;
  80eb80:	e0bfff17 	ldw	r2,-4(fp)
  80eb84:	10800017 	ldw	r2,0(r2)
  80eb88:	10c00304 	addi	r3,r2,12
  80eb8c:	e0bfff17 	ldw	r2,-4(fp)
  80eb90:	10c00015 	stw	r3,0(r2)

  *current_ptr += (name_len + extra_len + comment_len);
  80eb94:	e0bfff17 	ldw	r2,-4(fp)
  80eb98:	11000017 	ldw	r4,0(r2)
  80eb9c:	e0fffc0b 	ldhu	r3,-16(fp)
  80eba0:	e0bffb8b 	ldhu	r2,-18(fp)
  80eba4:	1887883a 	add	r3,r3,r2
  80eba8:	e0bffb0b 	ldhu	r2,-20(fp)
  80ebac:	1885883a 	add	r2,r3,r2
  80ebb0:	2087883a 	add	r3,r4,r2
  80ebb4:	e0bfff17 	ldw	r2,-4(fp)
  80ebb8:	10c00015 	stw	r3,0(r2)

  ret_code = 0;
  80ebbc:	e03ffe15 	stw	zero,-8(fp)
exit:
  return ret_code;
  80ebc0:	e0bffe17 	ldw	r2,-8(fp)
}
  80ebc4:	e037883a 	mov	sp,fp
  80ebc8:	dfc00117 	ldw	ra,4(sp)
  80ebcc:	df000017 	ldw	fp,0(sp)
  80ebd0:	dec00204 	addi	sp,sp,8
  80ebd4:	f800283a 	ret

0080ebd8 <check_directory_table>:
* tokens are in the right place, none of the files are compressed etc.
* 
* returns 0 for success -ENOENT if not
*/
static int check_directory_table(alt_ro_zipfs_dev* dev)
{
  80ebd8:	defff904 	addi	sp,sp,-28
  80ebdc:	dfc00615 	stw	ra,24(sp)
  80ebe0:	df000515 	stw	fp,20(sp)
  80ebe4:	df000504 	addi	fp,sp,20
  80ebe8:	e13ffe15 	stw	r4,-8(fp)
  int ret_code = 0;
  80ebec:	e03ffc15 	stw	zero,-16(fp)
  alt_u8* current_ptr = (alt_u8*)dev->directory;
  80ebf0:	e0bffe17 	ldw	r2,-8(fp)
  80ebf4:	10800b17 	ldw	r2,44(r2)
  80ebf8:	e0bffd15 	stw	r2,-12(fp)
  alt_u32 token;

  while(1)
  {
    token = read_word_inc(&current_ptr);
  80ebfc:	e13ffd04 	addi	r4,fp,-12
  80ec00:	080e8ac0 	call	80e8ac <read_word_inc>
  80ec04:	e0bffb15 	stw	r2,-20(fp)

    switch(token)
  80ec08:	e0bffb17 	ldw	r2,-20(fp)
  80ec0c:	e0bfff15 	stw	r2,-4(fp)
  80ec10:	00808074 	movhi	r2,513
  80ec14:	1092d404 	addi	r2,r2,19280
  80ec18:	e0ffff17 	ldw	r3,-4(fp)
  80ec1c:	18800526 	beq	r3,r2,80ec34 <check_directory_table+0x5c>
  80ec20:	00818174 	movhi	r2,1541
  80ec24:	1092d404 	addi	r2,r2,19280
  80ec28:	e0ffff17 	ldw	r3,-4(fp)
  80ec2c:	18800826 	beq	r3,r2,80ec50 <check_directory_table+0x78>
  80ec30:	00000906 	br	80ec58 <check_directory_table+0x80>
    {
    case ZIP_DIRECTORY_RECORD:
      {
        ret_code = check_directory_header(&current_ptr);
  80ec34:	e13ffd04 	addi	r4,fp,-12
  80ec38:	080eaac0 	call	80eaac <check_directory_header>
  80ec3c:	e0bffc15 	stw	r2,-16(fp)
        if (ret_code)
  80ec40:	e0bffc17 	ldw	r2,-16(fp)
  80ec44:	1004c03a 	cmpne	r2,r2,zero
  80ec48:	1000051e 	bne	r2,zero,80ec60 <check_directory_table+0x88>
      {
        ret_code = -ENOENT;
        goto exit;
      }
    }
  }
  80ec4c:	003feb06 	br	80ebfc <check_directory_table+0x24>
        }
        break;
      }
    case ZIP_END_OF_DIRECTORY_RECORD:
      {
        ret_code = 0;
  80ec50:	e03ffc15 	stw	zero,-16(fp)
        goto exit;
  80ec54:	00000206 	br	80ec60 <check_directory_table+0x88>
      }
    default:
      {
        ret_code = -ENOENT;
  80ec58:	00bfff84 	movi	r2,-2
  80ec5c:	e0bffc15 	stw	r2,-16(fp)
      }
    }
  }

exit:
  return ret_code;
  80ec60:	e0bffc17 	ldw	r2,-16(fp)
}
  80ec64:	e037883a 	mov	sp,fp
  80ec68:	dfc00117 	ldw	ra,4(sp)
  80ec6c:	df000017 	ldw	fp,0(sp)
  80ec70:	dec00204 	addi	sp,sp,8
  80ec74:	f800283a 	ret

0080ec78 <find_directory_entry>:
* tokens are in the right place, none of the files are comrpessed etc.
* 
* returns 0 for success -ENOENT if not
*/
static int find_directory_entry(alt_ro_zipfs_dev* dev)
{
  80ec78:	defff904 	addi	sp,sp,-28
  80ec7c:	dfc00615 	stw	ra,24(sp)
  80ec80:	df000515 	stw	fp,20(sp)
  80ec84:	df000504 	addi	fp,sp,20
  80ec88:	e13ffe15 	stw	r4,-8(fp)
  int ret_code = 0;
  80ec8c:	e03ffc15 	stw	zero,-16(fp)
  alt_u32 token;
  alt_u8* current_ptr = dev->base;
  80ec90:	e0bffe17 	ldw	r2,-8(fp)
  80ec94:	10800a17 	ldw	r2,40(r2)
  80ec98:	e0bffd15 	stw	r2,-12(fp)

  while(1)
  {
    token = read_word_inc(&current_ptr);
  80ec9c:	e13ffd04 	addi	r4,fp,-12
  80eca0:	080e8ac0 	call	80e8ac <read_word_inc>
  80eca4:	e0bffb15 	stw	r2,-20(fp)

    switch(token)
  80eca8:	e0bffb17 	ldw	r2,-20(fp)
  80ecac:	e0bfff15 	stw	r2,-4(fp)
  80ecb0:	00808074 	movhi	r2,513
  80ecb4:	1092d404 	addi	r2,r2,19280
  80ecb8:	e0ffff17 	ldw	r3,-4(fp)
  80ecbc:	18800c26 	beq	r3,r2,80ecf0 <find_directory_entry+0x78>
  80ecc0:	008100f4 	movhi	r2,1027
  80ecc4:	1092d404 	addi	r2,r2,19280
  80ecc8:	e0ffff17 	ldw	r3,-4(fp)
  80eccc:	18800126 	beq	r3,r2,80ecd4 <find_directory_entry+0x5c>
  80ecd0:	00000c06 	br	80ed04 <find_directory_entry+0x8c>
    {
    case ZIP_FILE_RECORD:
      {
        ret_code = check_file_header(&current_ptr);
  80ecd4:	e13ffd04 	addi	r4,fp,-12
  80ecd8:	080e9940 	call	80e994 <check_file_header>
  80ecdc:	e0bffc15 	stw	r2,-16(fp)
        if(ret_code)
  80ece0:	e0bffc17 	ldw	r2,-16(fp)
  80ece4:	1004c03a 	cmpne	r2,r2,zero
  80ece8:	1000081e 	bne	r2,zero,80ed0c <find_directory_entry+0x94>
      {
        ret_code = -ENOENT;
        goto exit;
      }
    }
  }
  80ecec:	003feb06 	br	80ec9c <find_directory_entry+0x24>
        }
        break;
      }
    case ZIP_DIRECTORY_RECORD:
      {
        dev->directory = current_ptr - 4;
  80ecf0:	e0bffd17 	ldw	r2,-12(fp)
  80ecf4:	10ffff04 	addi	r3,r2,-4
  80ecf8:	e0bffe17 	ldw	r2,-8(fp)
  80ecfc:	10c00b15 	stw	r3,44(r2)
        goto exit;
  80ed00:	00000206 	br	80ed0c <find_directory_entry+0x94>
      }
    default:
      {
        ret_code = -ENOENT;
  80ed04:	00bfff84 	movi	r2,-2
  80ed08:	e0bffc15 	stw	r2,-16(fp)
        goto exit;
      }
    }
  }
exit:
  return ret_code;
  80ed0c:	e0bffc17 	ldw	r2,-16(fp)
}
  80ed10:	e037883a 	mov	sp,fp
  80ed14:	dfc00117 	ldw	ra,4(sp)
  80ed18:	df000017 	ldw	fp,0(sp)
  80ed1c:	dec00204 	addi	sp,sp,8
  80ed20:	f800283a 	ret

0080ed24 <find_file_entry_by_name>:
*
* returns -ENOENT if fails
*/
static int find_file_entry_by_name( alt_ro_zipfs_dev* dev, alt_fd* fd, 
                                    const alt_u8* name)
{
  80ed24:	defff504 	addi	sp,sp,-44
  80ed28:	dfc00a15 	stw	ra,40(sp)
  80ed2c:	df000915 	stw	fp,36(sp)
  80ed30:	df000904 	addi	fp,sp,36
  80ed34:	e13ffd15 	stw	r4,-12(fp)
  80ed38:	e17ffe15 	stw	r5,-8(fp)
  80ed3c:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = -ENOENT;
  80ed40:	00bfff84 	movi	r2,-2
  80ed44:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 token;
  alt_u8* current_ptr = dev->directory;
  80ed48:	e0bffd17 	ldw	r2,-12(fp)
  80ed4c:	10800b17 	ldw	r2,44(r2)
  80ed50:	e0bffa15 	stw	r2,-24(fp)
  alt_u16 name_len, extra_len, comment_len, extra_file_len;
  alt_u32 offset;

  current_ptr = dev->directory;
  80ed54:	e0bffd17 	ldw	r2,-12(fp)
  80ed58:	10800b17 	ldw	r2,44(r2)
  80ed5c:	e0bffa15 	stw	r2,-24(fp)

  while(1)
  {
    token = read_word(current_ptr);
  80ed60:	e13ffa17 	ldw	r4,-24(fp)
  80ed64:	080e8380 	call	80e838 <read_word>
  80ed68:	e0bffb15 	stw	r2,-20(fp)

    if(token != ZIP_DIRECTORY_RECORD)
  80ed6c:	e0fffb17 	ldw	r3,-20(fp)
  80ed70:	00808074 	movhi	r2,513
  80ed74:	1092d404 	addi	r2,r2,19280
  80ed78:	18803c1e 	bne	r3,r2,80ee6c <find_file_entry_by_name+0x148>
    {
      break;
    }

    offset = read_word(current_ptr + ZIP_DIR_OFFSET);
  80ed7c:	e0bffa17 	ldw	r2,-24(fp)
  80ed80:	11000a84 	addi	r4,r2,42
  80ed84:	080e8380 	call	80e838 <read_word>
  80ed88:	e0bff715 	stw	r2,-36(fp)
    name_len = read_half_word(current_ptr + ZIP_DIR_NAME_LEN);
  80ed8c:	e0bffa17 	ldw	r2,-24(fp)
  80ed90:	11000704 	addi	r4,r2,28
  80ed94:	080e8fc0 	call	80e8fc <read_half_word>
  80ed98:	e0bff98d 	sth	r2,-26(fp)
    extra_len = read_half_word(current_ptr + ZIP_DIR_EXTRA_LEN);
  80ed9c:	e0bffa17 	ldw	r2,-24(fp)
  80eda0:	11000784 	addi	r4,r2,30
  80eda4:	080e8fc0 	call	80e8fc <read_half_word>
  80eda8:	e0bff90d 	sth	r2,-28(fp)
    comment_len = read_half_word(current_ptr + ZIP_DIR_COMMENT_LEN);
  80edac:	e0bffa17 	ldw	r2,-24(fp)
  80edb0:	11000804 	addi	r4,r2,32
  80edb4:	080e8fc0 	call	80e8fc <read_half_word>
  80edb8:	e0bff88d 	sth	r2,-30(fp)

    if ((strlen((const char *)name) == name_len) && 
  80edbc:	e13fff17 	ldw	r4,-4(fp)
  80edc0:	0803dec0 	call	803dec <strlen>
  80edc4:	1007883a 	mov	r3,r2
  80edc8:	e0bff98b 	ldhu	r2,-26(fp)
  80edcc:	18801c1e 	bne	r3,r2,80ee40 <find_file_entry_by_name+0x11c>
  80edd0:	e0bffa17 	ldw	r2,-24(fp)
  80edd4:	10800b84 	addi	r2,r2,46
  80edd8:	1009883a 	mov	r4,r2
  80eddc:	e17fff17 	ldw	r5,-4(fp)
  80ede0:	e1bff98b 	ldhu	r6,-26(fp)
  80ede4:	08119940 	call	811994 <strncmp>
  80ede8:	1004c03a 	cmpne	r2,r2,zero
  80edec:	1000141e 	bne	r2,zero,80ee40 <find_file_entry_by_name+0x11c>
    (!strncmp((const char *)(current_ptr+ZIP_DIR_HEADER_SIZE), (const char *)name, name_len)))
    {
      extra_file_len = read_half_word(dev->base + offset + ZIP_FILE_EXTRA_LEN); 
  80edf0:	e0bffd17 	ldw	r2,-12(fp)
  80edf4:	10c00a17 	ldw	r3,40(r2)
  80edf8:	e0bff717 	ldw	r2,-36(fp)
  80edfc:	1885883a 	add	r2,r3,r2
  80ee00:	11000704 	addi	r4,r2,28
  80ee04:	080e8fc0 	call	80e8fc <read_half_word>
  80ee08:	e0bff80d 	sth	r2,-32(fp)
      fd->priv = dev->base + ZIP_FILE_HEADER_SIZE 
  80ee0c:	e0bffd17 	ldw	r2,-12(fp)
  80ee10:	10c00a17 	ldw	r3,40(r2)
  80ee14:	e0bff717 	ldw	r2,-36(fp)
  80ee18:	1887883a 	add	r3,r3,r2
  80ee1c:	e0bff80b 	ldhu	r2,-32(fp)
  80ee20:	1887883a 	add	r3,r3,r2
  80ee24:	e0bff98b 	ldhu	r2,-26(fp)
  80ee28:	1885883a 	add	r2,r3,r2
  80ee2c:	10c00784 	addi	r3,r2,30
  80ee30:	e0bffe17 	ldw	r2,-8(fp)
  80ee34:	10c00115 	stw	r3,4(r2)
                  + offset + extra_file_len + name_len;
      ret_code = 0;
  80ee38:	e03ffc15 	stw	zero,-16(fp)
      break;
  80ee3c:	00000b06 	br	80ee6c <find_file_entry_by_name+0x148>
    }
    current_ptr += ZIP_DIR_HEADER_SIZE + name_len + extra_len + comment_len;
  80ee40:	e0fff98b 	ldhu	r3,-26(fp)
  80ee44:	e0bff90b 	ldhu	r2,-28(fp)
  80ee48:	1887883a 	add	r3,r3,r2
  80ee4c:	e0bff88b 	ldhu	r2,-30(fp)
  80ee50:	1885883a 	add	r2,r3,r2
  80ee54:	1007883a 	mov	r3,r2
  80ee58:	e0bffa17 	ldw	r2,-24(fp)
  80ee5c:	1885883a 	add	r2,r3,r2
  80ee60:	10800b84 	addi	r2,r2,46
  80ee64:	e0bffa15 	stw	r2,-24(fp)
  }
  80ee68:	003fbd06 	br	80ed60 <find_file_entry_by_name+0x3c>

  return ret_code;
  80ee6c:	e0bffc17 	ldw	r2,-16(fp)
}
  80ee70:	e037883a 	mov	sp,fp
  80ee74:	dfc00117 	ldw	ra,4(sp)
  80ee78:	df000017 	ldw	fp,0(sp)
  80ee7c:	dec00204 	addi	sp,sp,8
  80ee80:	f800283a 	ret

0080ee84 <find_file_entry>:
*
* returns -EBADF if fails
*/
static int find_file_entry( alt_ro_zipfs_dev* dev, alt_fd* fd, 
                            alt_u8** start, alt_u32* len)
{
  80ee84:	defff304 	addi	sp,sp,-52
  80ee88:	dfc00c15 	stw	ra,48(sp)
  80ee8c:	df000b15 	stw	fp,44(sp)
  80ee90:	df000b04 	addi	fp,sp,44
  80ee94:	e13ffc15 	stw	r4,-16(fp)
  80ee98:	e17ffd15 	stw	r5,-12(fp)
  80ee9c:	e1bffe15 	stw	r6,-8(fp)
  80eea0:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = -EBADF;
  80eea4:	00bffdc4 	movi	r2,-9
  80eea8:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 token;
  alt_u8* current_ptr = (alt_u8*)dev->directory;
  80eeac:	e0bffc17 	ldw	r2,-16(fp)
  80eeb0:	10800b17 	ldw	r2,44(r2)
  80eeb4:	e0bff915 	stw	r2,-28(fp)
  alt_u8* end;
  alt_u16 name_len, extra_len, comment_len, extra_file_len;
  alt_u32 offset;

  current_ptr = dev->directory;
  80eeb8:	e0bffc17 	ldw	r2,-16(fp)
  80eebc:	10800b17 	ldw	r2,44(r2)
  80eec0:	e0bff915 	stw	r2,-28(fp)
  80eec4:	00000006 	br	80eec8 <find_file_entry+0x44>

  while(1)
  {
    token = read_word(current_ptr);
  80eec8:	e13ff917 	ldw	r4,-28(fp)
  80eecc:	080e8380 	call	80e838 <read_word>
  80eed0:	e0bffa15 	stw	r2,-24(fp)

    if(token != ZIP_DIRECTORY_RECORD)
  80eed4:	e0fffa17 	ldw	r3,-24(fp)
  80eed8:	00808074 	movhi	r2,513
  80eedc:	1092d404 	addi	r2,r2,19280
  80eee0:	1880421e 	bne	r3,r2,80efec <find_file_entry+0x168>
    {
      break;
    }
    
    *len = read_word(current_ptr + ZIP_DIR_UNCOMPRESSED_LEN);
  80eee4:	e0bff917 	ldw	r2,-28(fp)
  80eee8:	11000604 	addi	r4,r2,24
  80eeec:	080e8380 	call	80e838 <read_word>
  80eef0:	1007883a 	mov	r3,r2
  80eef4:	e0bfff17 	ldw	r2,-4(fp)
  80eef8:	10c00015 	stw	r3,0(r2)
    offset = read_word(current_ptr + ZIP_DIR_OFFSET);
  80eefc:	e0bff917 	ldw	r2,-28(fp)
  80ef00:	11000a84 	addi	r4,r2,42
  80ef04:	080e8380 	call	80e838 <read_word>
  80ef08:	e0bff515 	stw	r2,-44(fp)
    name_len = read_half_word(current_ptr + ZIP_DIR_NAME_LEN);
  80ef0c:	e0bff917 	ldw	r2,-28(fp)
  80ef10:	11000704 	addi	r4,r2,28
  80ef14:	080e8fc0 	call	80e8fc <read_half_word>
  80ef18:	e0bff78d 	sth	r2,-34(fp)
    extra_len = read_half_word(current_ptr + ZIP_DIR_EXTRA_LEN);
  80ef1c:	e0bff917 	ldw	r2,-28(fp)
  80ef20:	11000784 	addi	r4,r2,30
  80ef24:	080e8fc0 	call	80e8fc <read_half_word>
  80ef28:	e0bff70d 	sth	r2,-36(fp)
    comment_len = read_half_word(current_ptr + ZIP_DIR_COMMENT_LEN);
  80ef2c:	e0bff917 	ldw	r2,-28(fp)
  80ef30:	11000804 	addi	r4,r2,32
  80ef34:	080e8fc0 	call	80e8fc <read_half_word>
  80ef38:	e0bff68d 	sth	r2,-38(fp)
    current_ptr += ZIP_DIR_HEADER_SIZE + name_len + extra_len + comment_len;
  80ef3c:	e0fff78b 	ldhu	r3,-34(fp)
  80ef40:	e0bff70b 	ldhu	r2,-36(fp)
  80ef44:	1887883a 	add	r3,r3,r2
  80ef48:	e0bff68b 	ldhu	r2,-38(fp)
  80ef4c:	1885883a 	add	r2,r3,r2
  80ef50:	1007883a 	mov	r3,r2
  80ef54:	e0bff917 	ldw	r2,-28(fp)
  80ef58:	1885883a 	add	r2,r3,r2
  80ef5c:	10800b84 	addi	r2,r2,46
  80ef60:	e0bff915 	stw	r2,-28(fp)

    extra_file_len = read_half_word(dev->base + offset + ZIP_FILE_EXTRA_LEN); 
  80ef64:	e0bffc17 	ldw	r2,-16(fp)
  80ef68:	10c00a17 	ldw	r3,40(r2)
  80ef6c:	e0bff517 	ldw	r2,-44(fp)
  80ef70:	1885883a 	add	r2,r3,r2
  80ef74:	11000704 	addi	r4,r2,28
  80ef78:	080e8fc0 	call	80e8fc <read_half_word>
  80ef7c:	e0bff60d 	sth	r2,-40(fp)

    *start = dev->base + ZIP_FILE_HEADER_SIZE + offset + extra_file_len + name_len;
  80ef80:	e0bffc17 	ldw	r2,-16(fp)
  80ef84:	10c00a17 	ldw	r3,40(r2)
  80ef88:	e0bff517 	ldw	r2,-44(fp)
  80ef8c:	1887883a 	add	r3,r3,r2
  80ef90:	e0bff60b 	ldhu	r2,-40(fp)
  80ef94:	1887883a 	add	r3,r3,r2
  80ef98:	e0bff78b 	ldhu	r2,-34(fp)
  80ef9c:	1885883a 	add	r2,r3,r2
  80efa0:	10c00784 	addi	r3,r2,30
  80efa4:	e0bffe17 	ldw	r2,-8(fp)
  80efa8:	10c00015 	stw	r3,0(r2)

    /* The plus 1 is for the End of file condition */
    end = *start + *len;
  80efac:	e0bffe17 	ldw	r2,-8(fp)
  80efb0:	10c00017 	ldw	r3,0(r2)
  80efb4:	e0bfff17 	ldw	r2,-4(fp)
  80efb8:	10800017 	ldw	r2,0(r2)
  80efbc:	1885883a 	add	r2,r3,r2
  80efc0:	e0bff815 	stw	r2,-32(fp)
    if ((fd->priv >= *start ) &&
  80efc4:	e0bffd17 	ldw	r2,-12(fp)
  80efc8:	10c00117 	ldw	r3,4(r2)
  80efcc:	e0bffe17 	ldw	r2,-8(fp)
  80efd0:	10800017 	ldw	r2,0(r2)
  80efd4:	18bfbc36 	bltu	r3,r2,80eec8 <find_file_entry+0x44>
  80efd8:	e0bffd17 	ldw	r2,-12(fp)
  80efdc:	10c00117 	ldw	r3,4(r2)
  80efe0:	e0bff817 	ldw	r2,-32(fp)
  80efe4:	10ffb836 	bltu	r2,r3,80eec8 <find_file_entry+0x44>
        (fd->priv <= end))
    {
      ret_code = 0;
  80efe8:	e03ffb15 	stw	zero,-20(fp)
      break;
    }
  }

  return ret_code;
  80efec:	e0bffb17 	ldw	r2,-20(fp)
}
  80eff0:	e037883a 	mov	sp,fp
  80eff4:	dfc00117 	ldw	ra,4(sp)
  80eff8:	df000017 	ldw	fp,0(sp)
  80effc:	dec00204 	addi	sp,sp,8
  80f000:	f800283a 	ret

0080f004 <alt_ro_zipfs_open>:
* Find the Central dircetory and then find the pointer to this file
* from that.
*
*/
int alt_ro_zipfs_open(alt_fd* fd, const char* name, int flags, int mode)
{
  80f004:	defff804 	addi	sp,sp,-32
  80f008:	dfc00715 	stw	ra,28(sp)
  80f00c:	df000615 	stw	fp,24(sp)
  80f010:	df000604 	addi	fp,sp,24
  80f014:	e13ffc15 	stw	r4,-16(fp)
  80f018:	e17ffd15 	stw	r5,-12(fp)
  80f01c:	e1bffe15 	stw	r6,-8(fp)
  80f020:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = -EROFS;
  80f024:	00bff884 	movi	r2,-30
  80f028:	e0bffb15 	stw	r2,-20(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  80f02c:	e0bffc17 	ldw	r2,-16(fp)
  80f030:	10800017 	ldw	r2,0(r2)
  80f034:	e0bffa15 	stw	r2,-24(fp)

#ifdef ALT_USE_DIRECT_DRIVERS
  ALT_LINK_ERROR("Error: Read-only ZIP filesystem not supported when direct drivers are used.");
#endif

  if (flags == O_RDONLY )
  80f038:	e0bffe17 	ldw	r2,-8(fp)
  80f03c:	1004c03a 	cmpne	r2,r2,zero
  80f040:	1000101e 	bne	r2,zero,80f084 <alt_ro_zipfs_open+0x80>
  {
    if (dev->directory != NULL)
  80f044:	e0bffa17 	ldw	r2,-24(fp)
  80f048:	10800b17 	ldw	r2,44(r2)
  80f04c:	1005003a 	cmpeq	r2,r2,zero
  80f050:	10000c1e 	bne	r2,zero,80f084 <alt_ro_zipfs_open+0x80>
    {
      ret_code = find_file_entry_by_name( dev, fd, 
  80f054:	e0bffa17 	ldw	r2,-24(fp)
  80f058:	11000217 	ldw	r4,8(r2)
  80f05c:	0803dec0 	call	803dec <strlen>
  80f060:	1007883a 	mov	r3,r2
  80f064:	e0bffd17 	ldw	r2,-12(fp)
  80f068:	1885883a 	add	r2,r3,r2
  80f06c:	10800044 	addi	r2,r2,1
  80f070:	100d883a 	mov	r6,r2
  80f074:	e13ffa17 	ldw	r4,-24(fp)
  80f078:	e17ffc17 	ldw	r5,-16(fp)
  80f07c:	080ed240 	call	80ed24 <find_file_entry_by_name>
  80f080:	e0bffb15 	stw	r2,-20(fp)
                                          (const alt_u8*)(name+strlen(dev->fs_dev.name)+1));
    }
  }

  return ret_code;
  80f084:	e0bffb17 	ldw	r2,-20(fp)
}
  80f088:	e037883a 	mov	sp,fp
  80f08c:	dfc00117 	ldw	ra,4(sp)
  80f090:	df000017 	ldw	fp,0(sp)
  80f094:	dec00204 	addi	sp,sp,8
  80f098:	f800283a 	ret

0080f09c <alt_ro_zipfs_read>:
* alt_ro_zipfs_read
*
* Read the file
*/
int alt_ro_zipfs_read(alt_fd* fd, char* ptr, int len)
{
  80f09c:	defff104 	addi	sp,sp,-60
  80f0a0:	dfc00e15 	stw	ra,56(sp)
  80f0a4:	df000d15 	stw	fp,52(sp)
  80f0a8:	df000d04 	addi	fp,sp,52
  80f0ac:	e13ffb15 	stw	r4,-20(fp)
  80f0b0:	e17ffc15 	stw	r5,-16(fp)
  80f0b4:	e1bffd15 	stw	r6,-12(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  80f0b8:	e0bffb17 	ldw	r2,-20(fp)
  80f0bc:	10800017 	ldw	r2,0(r2)
  80f0c0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 *start, *current;
  alt_u32 file_len;
  int amount_to_copy;
  alt_irq_context context;

  find_file_entry(dev, fd, &start, &file_len);
  80f0c4:	e1bff904 	addi	r6,fp,-28
  80f0c8:	e1fffa04 	addi	r7,fp,-24
  80f0cc:	e13ff817 	ldw	r4,-32(fp)
  80f0d0:	e17ffb17 	ldw	r5,-20(fp)
  80f0d4:	080ee840 	call	80ee84 <find_file_entry>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f0d8:	0005303a 	rdctl	r2,status
  80f0dc:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f0e0:	e0fff417 	ldw	r3,-48(fp)
  80f0e4:	00bfff84 	movi	r2,-2
  80f0e8:	1884703a 	and	r2,r3,r2
  80f0ec:	1001703a 	wrctl	status,r2
  
  return context;
  80f0f0:	e0bff417 	ldw	r2,-48(fp)
  *
  * We could use a Mutex or a binary semaphore, but those would have 
  * a much bigger code footprint and disable interrupts for as many 
  * instructions anyway
  */
  context = alt_irq_disable_all();
  80f0f4:	e0bff515 	stw	r2,-44(fp)
  current = fd->priv;
  80f0f8:	e0bffb17 	ldw	r2,-20(fp)
  80f0fc:	10800117 	ldw	r2,4(r2)
  80f100:	e0bff715 	stw	r2,-36(fp)
  amount_to_copy = MIN(len, file_len - (current - start));
  80f104:	e13ffa17 	ldw	r4,-24(fp)
  80f108:	e0fff717 	ldw	r3,-36(fp)
  80f10c:	e0bff917 	ldw	r2,-28(fp)
  80f110:	1885c83a 	sub	r2,r3,r2
  80f114:	2085c83a 	sub	r2,r4,r2
  80f118:	e0fffd17 	ldw	r3,-12(fp)
  80f11c:	e0ffff15 	stw	r3,-4(fp)
  80f120:	e0bffe15 	stw	r2,-8(fp)
  80f124:	e0bfff17 	ldw	r2,-4(fp)
  80f128:	e0fffe17 	ldw	r3,-8(fp)
  80f12c:	10c0022e 	bgeu	r2,r3,80f138 <alt_ro_zipfs_read+0x9c>
  80f130:	e0bfff17 	ldw	r2,-4(fp)
  80f134:	e0bffe15 	stw	r2,-8(fp)
  80f138:	e0fffe17 	ldw	r3,-8(fp)
  80f13c:	e0fff615 	stw	r3,-40(fp)
  fd->priv += amount_to_copy;
  80f140:	e0bffb17 	ldw	r2,-20(fp)
  80f144:	10c00117 	ldw	r3,4(r2)
  80f148:	e0bff617 	ldw	r2,-40(fp)
  80f14c:	1887883a 	add	r3,r3,r2
  80f150:	e0bffb17 	ldw	r2,-20(fp)
  80f154:	10c00115 	stw	r3,4(r2)
  80f158:	e0bff517 	ldw	r2,-44(fp)
  80f15c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f160:	e0bff317 	ldw	r2,-52(fp)
  80f164:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(context);

  memcpy(ptr, current, amount_to_copy);
  80f168:	e1bff617 	ldw	r6,-40(fp)
  80f16c:	e0bffc17 	ldw	r2,-16(fp)
  80f170:	e0fff717 	ldw	r3,-36(fp)
  80f174:	1009883a 	mov	r4,r2
  80f178:	180b883a 	mov	r5,r3
  80f17c:	08090580 	call	809058 <memcpy>
  
  return amount_to_copy;
  80f180:	e0bff617 	ldw	r2,-40(fp)
}
  80f184:	e037883a 	mov	sp,fp
  80f188:	dfc00117 	ldw	ra,4(sp)
  80f18c:	df000017 	ldw	fp,0(sp)
  80f190:	dec00204 	addi	sp,sp,8
  80f194:	f800283a 	ret

0080f198 <alt_ro_zipfs_seek>:
* Move around within a file
*
* returns -EROFS for a seek beyond the end of the file
*/
int alt_ro_zipfs_seek(alt_fd* fd, int ptr, int dir)
{
  80f198:	defff604 	addi	sp,sp,-40
  80f19c:	dfc00915 	stw	ra,36(sp)
  80f1a0:	df000815 	stw	fp,32(sp)
  80f1a4:	df000804 	addi	fp,sp,32
  80f1a8:	e13ffc15 	stw	r4,-16(fp)
  80f1ac:	e17ffd15 	stw	r5,-12(fp)
  80f1b0:	e1bffe15 	stw	r6,-8(fp)
  int ret_code;
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  80f1b4:	e0bffc17 	ldw	r2,-16(fp)
  80f1b8:	10800017 	ldw	r2,0(r2)
  80f1bc:	e0bff815 	stw	r2,-32(fp)
  alt_u8* start;
  alt_u32 len;

  find_file_entry(dev, fd, &start, &len);
  80f1c0:	e1bffa04 	addi	r6,fp,-24
  80f1c4:	e1fffb04 	addi	r7,fp,-20
  80f1c8:	e13ff817 	ldw	r4,-32(fp)
  80f1cc:	e17ffc17 	ldw	r5,-16(fp)
  80f1d0:	080ee840 	call	80ee84 <find_file_entry>

  switch(dir)
  80f1d4:	e0bffe17 	ldw	r2,-8(fp)
  80f1d8:	e0bfff15 	stw	r2,-4(fp)
  80f1dc:	e0ffff17 	ldw	r3,-4(fp)
  80f1e0:	18800060 	cmpeqi	r2,r3,1
  80f1e4:	1000071e 	bne	r2,zero,80f204 <alt_ro_zipfs_seek+0x6c>
  80f1e8:	e0ffff17 	ldw	r3,-4(fp)
  80f1ec:	188000a0 	cmpeqi	r2,r3,2
  80f1f0:	1000221e 	bne	r2,zero,80f27c <alt_ro_zipfs_seek+0xe4>
  80f1f4:	e0ffff17 	ldw	r3,-4(fp)
  80f1f8:	1805003a 	cmpeq	r2,r3,zero
  80f1fc:	1000131e 	bne	r2,zero,80f24c <alt_ro_zipfs_seek+0xb4>
  80f200:	00002b06 	br	80f2b0 <alt_ro_zipfs_seek+0x118>
  {

  case SEEK_CUR:
    {
      /* Seek from current position */
      if ((fd->priv + ptr) > (start +len))
  80f204:	e0bffc17 	ldw	r2,-16(fp)
  80f208:	10c00117 	ldw	r3,4(r2)
  80f20c:	e0bffd17 	ldw	r2,-12(fp)
  80f210:	1889883a 	add	r4,r3,r2
  80f214:	e0fffa17 	ldw	r3,-24(fp)
  80f218:	e0bffb17 	ldw	r2,-20(fp)
  80f21c:	1885883a 	add	r2,r3,r2
  80f220:	1100032e 	bgeu	r2,r4,80f230 <alt_ro_zipfs_seek+0x98>
      {
        ret_code = -EINVAL;
  80f224:	00bffa84 	movi	r2,-22
  80f228:	e0bff915 	stw	r2,-28(fp)
        goto exit;
  80f22c:	00002606 	br	80f2c8 <alt_ro_zipfs_seek+0x130>
      }

      fd->priv += ptr;
  80f230:	e0bffc17 	ldw	r2,-16(fp)
  80f234:	10c00117 	ldw	r3,4(r2)
  80f238:	e0bffd17 	ldw	r2,-12(fp)
  80f23c:	1887883a 	add	r3,r3,r2
  80f240:	e0bffc17 	ldw	r2,-16(fp)
  80f244:	10c00115 	stw	r3,4(r2)
      break;
  80f248:	00001906 	br	80f2b0 <alt_ro_zipfs_seek+0x118>
    }
  case SEEK_SET:
    {
      /* Seek from the beginning */
      if (ptr > len)
  80f24c:	e0fffd17 	ldw	r3,-12(fp)
  80f250:	e0bffb17 	ldw	r2,-20(fp)
  80f254:	10c0032e 	bgeu	r2,r3,80f264 <alt_ro_zipfs_seek+0xcc>
      {
        ret_code = -EINVAL;
  80f258:	00bffa84 	movi	r2,-22
  80f25c:	e0bff915 	stw	r2,-28(fp)
        goto exit;
  80f260:	00001906 	br	80f2c8 <alt_ro_zipfs_seek+0x130>
      }

      fd->priv = start + ptr;
  80f264:	e0fffa17 	ldw	r3,-24(fp)
  80f268:	e0bffd17 	ldw	r2,-12(fp)
  80f26c:	1887883a 	add	r3,r3,r2
  80f270:	e0bffc17 	ldw	r2,-16(fp)
  80f274:	10c00115 	stw	r3,4(r2)
      break;
  80f278:	00000d06 	br	80f2b0 <alt_ro_zipfs_seek+0x118>
    }
  case SEEK_END:
    {
      if(ptr > 0)
  80f27c:	e0bffd17 	ldw	r2,-12(fp)
  80f280:	10800050 	cmplti	r2,r2,1
  80f284:	1000031e 	bne	r2,zero,80f294 <alt_ro_zipfs_seek+0xfc>
      {
        ret_code = -EINVAL;
  80f288:	00bffa84 	movi	r2,-22
  80f28c:	e0bff915 	stw	r2,-28(fp)
        goto exit;
  80f290:	00000d06 	br	80f2c8 <alt_ro_zipfs_seek+0x130>
      }

      fd->priv = start + ptr + len;
  80f294:	e0fffa17 	ldw	r3,-24(fp)
  80f298:	e0bffd17 	ldw	r2,-12(fp)
  80f29c:	1887883a 	add	r3,r3,r2
  80f2a0:	e0bffb17 	ldw	r2,-20(fp)
  80f2a4:	1887883a 	add	r3,r3,r2
  80f2a8:	e0bffc17 	ldw	r2,-16(fp)
  80f2ac:	10c00115 	stw	r3,4(r2)
      break;
    }
  }
  ret_code = (int)(fd->priv - start);
  80f2b0:	e0bffc17 	ldw	r2,-16(fp)
  80f2b4:	10800117 	ldw	r2,4(r2)
  80f2b8:	1007883a 	mov	r3,r2
  80f2bc:	e0bffa17 	ldw	r2,-24(fp)
  80f2c0:	1885c83a 	sub	r2,r3,r2
  80f2c4:	e0bff915 	stw	r2,-28(fp)

exit:
  return ret_code;
  80f2c8:	e0bff917 	ldw	r2,-28(fp)
}
  80f2cc:	e037883a 	mov	sp,fp
  80f2d0:	dfc00117 	ldw	ra,4(sp)
  80f2d4:	df000017 	ldw	fp,0(sp)
  80f2d8:	dec00204 	addi	sp,sp,8
  80f2dc:	f800283a 	ret

0080f2e0 <alt_ro_zipfs_fstat>:
* 
* Return the file status information, the only fields we fill in are
* the size and that this really is a file, not a device
*/
int alt_ro_zipfs_fstat(alt_fd* fd, struct stat* buf)
{
  80f2e0:	defff804 	addi	sp,sp,-32
  80f2e4:	dfc00715 	stw	ra,28(sp)
  80f2e8:	df000615 	stw	fp,24(sp)
  80f2ec:	df000604 	addi	fp,sp,24
  80f2f0:	e13ffe15 	stw	r4,-8(fp)
  80f2f4:	e17fff15 	stw	r5,-4(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  80f2f8:	e0bffe17 	ldw	r2,-8(fp)
  80f2fc:	10800017 	ldw	r2,0(r2)
  80f300:	e0bffb15 	stw	r2,-20(fp)
  alt_u8* start;
  alt_u32 len;
  int ret_code = 0;
  80f304:	e03ffa15 	stw	zero,-24(fp)

  find_file_entry(dev, fd, &start, &len);
  80f308:	e1bffc04 	addi	r6,fp,-16
  80f30c:	e1fffd04 	addi	r7,fp,-12
  80f310:	e13ffb17 	ldw	r4,-20(fp)
  80f314:	e17ffe17 	ldw	r5,-8(fp)
  80f318:	080ee840 	call	80ee84 <find_file_entry>
  buf->st_mode = S_IFREG;
  80f31c:	e0ffff17 	ldw	r3,-4(fp)
  80f320:	00a00014 	movui	r2,32768
  80f324:	18800115 	stw	r2,4(r3)
  buf->st_size = (off_t)len;
  80f328:	e0bffd17 	ldw	r2,-12(fp)
  80f32c:	1007883a 	mov	r3,r2
  80f330:	e0bfff17 	ldw	r2,-4(fp)
  80f334:	10c00415 	stw	r3,16(r2)

  return ret_code;
  80f338:	e0bffa17 	ldw	r2,-24(fp)
}
  80f33c:	e037883a 	mov	sp,fp
  80f340:	dfc00117 	ldw	ra,4(sp)
  80f344:	df000017 	ldw	fp,0(sp)
  80f348:	dec00204 	addi	sp,sp,8
  80f34c:	f800283a 	ret

0080f350 <alt_ro_zipfs_check_valid>:
* check that the file system is a valid zip file
* if so return 1
*
*/
int alt_ro_zipfs_check_valid(alt_ro_zipfs_dev* dev)
{
  80f350:	defffc04 	addi	sp,sp,-16
  80f354:	dfc00315 	stw	ra,12(sp)
  80f358:	df000215 	stw	fp,8(sp)
  80f35c:	df000204 	addi	fp,sp,8
  80f360:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  80f364:	e03ffe15 	stw	zero,-8(fp)
  if (find_directory_entry(dev) != -ENOENT)
  80f368:	e13fff17 	ldw	r4,-4(fp)
  80f36c:	080ec780 	call	80ec78 <find_directory_entry>
  80f370:	10bfffa0 	cmpeqi	r2,r2,-2
  80f374:	1000061e 	bne	r2,zero,80f390 <alt_ro_zipfs_check_valid+0x40>
  {
    if (check_directory_table(dev) != -ENOENT)
  80f378:	e13fff17 	ldw	r4,-4(fp)
  80f37c:	080ebd80 	call	80ebd8 <check_directory_table>
  80f380:	10bfffa0 	cmpeqi	r2,r2,-2
  80f384:	1000021e 	bne	r2,zero,80f390 <alt_ro_zipfs_check_valid+0x40>
    {
      ret_code = 1;
  80f388:	00800044 	movi	r2,1
  80f38c:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  return ret_code;
  80f390:	e0bffe17 	ldw	r2,-8(fp)
}
  80f394:	e037883a 	mov	sp,fp
  80f398:	dfc00117 	ldw	ra,4(sp)
  80f39c:	df000017 	ldw	fp,0(sp)
  80f3a0:	dec00204 	addi	sp,sp,8
  80f3a4:	f800283a 	ret

0080f3a8 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  80f3a8:	defffc04 	addi	sp,sp,-16
  80f3ac:	dfc00315 	stw	ra,12(sp)
  80f3b0:	df000215 	stw	fp,8(sp)
  80f3b4:	df000204 	addi	fp,sp,8
  80f3b8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  80f3bc:	e13fff17 	ldw	r4,-4(fp)
  80f3c0:	01402074 	movhi	r5,129
  80f3c4:	294fda04 	addi	r5,r5,16232
  80f3c8:	0810c880 	call	810c88 <alt_find_dev>
  80f3cc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  80f3d0:	e0bffe17 	ldw	r2,-8(fp)
}
  80f3d4:	e037883a 	mov	sp,fp
  80f3d8:	dfc00117 	ldw	ra,4(sp)
  80f3dc:	df000017 	ldw	fp,0(sp)
  80f3e0:	dec00204 	addi	sp,sp,8
  80f3e4:	f800283a 	ret

0080f3e8 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  80f3e8:	defff904 	addi	sp,sp,-28
  80f3ec:	df000615 	stw	fp,24(sp)
  80f3f0:	df000604 	addi	fp,sp,24
  80f3f4:	e13ffb15 	stw	r4,-20(fp)
  80f3f8:	e17ffc15 	stw	r5,-16(fp)
  80f3fc:	e1bffd15 	stw	r6,-12(fp)
  80f400:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  80f404:	e0bffb17 	ldw	r2,-20(fp)
  80f408:	10c00f17 	ldw	r3,60(r2)
  80f40c:	e0bffd17 	ldw	r2,-12(fp)
  80f410:	10c0042e 	bgeu	r2,r3,80f424 <alt_up_pixel_buffer_dma_draw+0x3c>
  80f414:	e0bffb17 	ldw	r2,-20(fp)
  80f418:	10c01017 	ldw	r3,64(r2)
  80f41c:	e0bffe17 	ldw	r2,-8(fp)
  80f420:	10c00336 	bltu	r2,r3,80f430 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  80f424:	00bfffc4 	movi	r2,-1
  80f428:	e0bfff15 	stw	r2,-4(fp)
  80f42c:	00005106 	br	80f574 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  80f430:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80f434:	e0bffb17 	ldw	r2,-20(fp)
  80f438:	10800d17 	ldw	r2,52(r2)
  80f43c:	1004c03a 	cmpne	r2,r2,zero
  80f440:	1000151e 	bne	r2,zero,80f498 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  80f444:	e0bffb17 	ldw	r2,-20(fp)
  80f448:	10c01217 	ldw	r3,72(r2)
  80f44c:	e0bffd17 	ldw	r2,-12(fp)
  80f450:	1886703a 	and	r3,r3,r2
  80f454:	e0bffb17 	ldw	r2,-20(fp)
  80f458:	10801117 	ldw	r2,68(r2)
  80f45c:	1886983a 	sll	r3,r3,r2
  80f460:	e0bffa17 	ldw	r2,-24(fp)
  80f464:	10c4b03a 	or	r2,r2,r3
  80f468:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  80f46c:	e0bffb17 	ldw	r2,-20(fp)
  80f470:	10c01417 	ldw	r3,80(r2)
  80f474:	e0bffe17 	ldw	r2,-8(fp)
  80f478:	1886703a 	and	r3,r3,r2
  80f47c:	e0bffb17 	ldw	r2,-20(fp)
  80f480:	10801317 	ldw	r2,76(r2)
  80f484:	1886983a 	sll	r3,r3,r2
  80f488:	e0bffa17 	ldw	r2,-24(fp)
  80f48c:	10c4b03a 	or	r2,r2,r3
  80f490:	e0bffa15 	stw	r2,-24(fp)
  80f494:	00001706 	br	80f4f4 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  80f498:	e0bffb17 	ldw	r2,-20(fp)
  80f49c:	10c01217 	ldw	r3,72(r2)
  80f4a0:	e0bffd17 	ldw	r2,-12(fp)
  80f4a4:	1886703a 	and	r3,r3,r2
  80f4a8:	e0bffb17 	ldw	r2,-20(fp)
  80f4ac:	10801117 	ldw	r2,68(r2)
  80f4b0:	1886983a 	sll	r3,r3,r2
  80f4b4:	e0bffa17 	ldw	r2,-24(fp)
  80f4b8:	10c5883a 	add	r2,r2,r3
  80f4bc:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  80f4c0:	e0bffb17 	ldw	r2,-20(fp)
  80f4c4:	10c01417 	ldw	r3,80(r2)
  80f4c8:	e0bffe17 	ldw	r2,-8(fp)
  80f4cc:	1886703a 	and	r3,r3,r2
  80f4d0:	e0bffb17 	ldw	r2,-20(fp)
  80f4d4:	10800f17 	ldw	r2,60(r2)
  80f4d8:	1887383a 	mul	r3,r3,r2
  80f4dc:	e0bffb17 	ldw	r2,-20(fp)
  80f4e0:	10801117 	ldw	r2,68(r2)
  80f4e4:	1886983a 	sll	r3,r3,r2
  80f4e8:	e0bffa17 	ldw	r2,-24(fp)
  80f4ec:	10c5883a 	add	r2,r2,r3
  80f4f0:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80f4f4:	e0bffb17 	ldw	r2,-20(fp)
  80f4f8:	10800e17 	ldw	r2,56(r2)
  80f4fc:	10800058 	cmpnei	r2,r2,1
  80f500:	1000081e 	bne	r2,zero,80f524 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80f504:	e0bffb17 	ldw	r2,-20(fp)
  80f508:	10800c17 	ldw	r2,48(r2)
  80f50c:	1007883a 	mov	r3,r2
  80f510:	e0bffa17 	ldw	r2,-24(fp)
  80f514:	1885883a 	add	r2,r3,r2
  80f518:	e0fffc17 	ldw	r3,-16(fp)
  80f51c:	10c00025 	stbio	r3,0(r2)
  80f520:	00001306 	br	80f570 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80f524:	e0bffb17 	ldw	r2,-20(fp)
  80f528:	10800e17 	ldw	r2,56(r2)
  80f52c:	10800098 	cmpnei	r2,r2,2
  80f530:	1000081e 	bne	r2,zero,80f554 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80f534:	e0bffb17 	ldw	r2,-20(fp)
  80f538:	10800c17 	ldw	r2,48(r2)
  80f53c:	1007883a 	mov	r3,r2
  80f540:	e0bffa17 	ldw	r2,-24(fp)
  80f544:	1885883a 	add	r2,r3,r2
  80f548:	e0fffc17 	ldw	r3,-16(fp)
  80f54c:	10c0002d 	sthio	r3,0(r2)
  80f550:	00000706 	br	80f570 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80f554:	e0bffb17 	ldw	r2,-20(fp)
  80f558:	10800c17 	ldw	r2,48(r2)
  80f55c:	1007883a 	mov	r3,r2
  80f560:	e0bffa17 	ldw	r2,-24(fp)
  80f564:	1885883a 	add	r2,r3,r2
  80f568:	e0fffc17 	ldw	r3,-16(fp)
  80f56c:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  80f570:	e03fff15 	stw	zero,-4(fp)
  80f574:	e0bfff17 	ldw	r2,-4(fp)
}
  80f578:	e037883a 	mov	sp,fp
  80f57c:	df000017 	ldw	fp,0(sp)
  80f580:	dec00104 	addi	sp,sp,4
  80f584:	f800283a 	ret

0080f588 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  80f588:	defffd04 	addi	sp,sp,-12
  80f58c:	df000215 	stw	fp,8(sp)
  80f590:	df000204 	addi	fp,sp,8
  80f594:	e13ffe15 	stw	r4,-8(fp)
  80f598:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  80f59c:	e0bffe17 	ldw	r2,-8(fp)
  80f5a0:	10800a17 	ldw	r2,40(r2)
  80f5a4:	10800104 	addi	r2,r2,4
  80f5a8:	e0ffff17 	ldw	r3,-4(fp)
  80f5ac:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  80f5b0:	e0bffe17 	ldw	r2,-8(fp)
  80f5b4:	10800a17 	ldw	r2,40(r2)
  80f5b8:	10800104 	addi	r2,r2,4
  80f5bc:	10800037 	ldwio	r2,0(r2)
  80f5c0:	1007883a 	mov	r3,r2
  80f5c4:	e0bffe17 	ldw	r2,-8(fp)
  80f5c8:	10c00c15 	stw	r3,48(r2)
	return 0;
  80f5cc:	0005883a 	mov	r2,zero
}
  80f5d0:	e037883a 	mov	sp,fp
  80f5d4:	df000017 	ldw	fp,0(sp)
  80f5d8:	dec00104 	addi	sp,sp,4
  80f5dc:	f800283a 	ret

0080f5e0 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  80f5e0:	defffe04 	addi	sp,sp,-8
  80f5e4:	df000115 	stw	fp,4(sp)
  80f5e8:	df000104 	addi	fp,sp,4
  80f5ec:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  80f5f0:	e0bfff17 	ldw	r2,-4(fp)
  80f5f4:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  80f5f8:	e0bfff17 	ldw	r2,-4(fp)
  80f5fc:	10800a17 	ldw	r2,40(r2)
  80f600:	1007883a 	mov	r3,r2
  80f604:	00800044 	movi	r2,1
  80f608:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  80f60c:	e0bfff17 	ldw	r2,-4(fp)
  80f610:	10c00b17 	ldw	r3,44(r2)
  80f614:	e0bfff17 	ldw	r2,-4(fp)
  80f618:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  80f61c:	e0bfff17 	ldw	r2,-4(fp)
  80f620:	11000b15 	stw	r4,44(r2)
	return 0;
  80f624:	0005883a 	mov	r2,zero
}
  80f628:	e037883a 	mov	sp,fp
  80f62c:	df000017 	ldw	fp,0(sp)
  80f630:	dec00104 	addi	sp,sp,4
  80f634:	f800283a 	ret

0080f638 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  80f638:	defffe04 	addi	sp,sp,-8
  80f63c:	df000115 	stw	fp,4(sp)
  80f640:	df000104 	addi	fp,sp,4
  80f644:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  80f648:	e0bfff17 	ldw	r2,-4(fp)
  80f64c:	10800a17 	ldw	r2,40(r2)
  80f650:	10800304 	addi	r2,r2,12
  80f654:	10800037 	ldwio	r2,0(r2)
  80f658:	1080004c 	andi	r2,r2,1
}
  80f65c:	e037883a 	mov	sp,fp
  80f660:	df000017 	ldw	fp,0(sp)
  80f664:	dec00104 	addi	sp,sp,4
  80f668:	f800283a 	ret

0080f66c <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  80f66c:	defff604 	addi	sp,sp,-40
  80f670:	df000915 	stw	fp,36(sp)
  80f674:	df000904 	addi	fp,sp,36
  80f678:	e13ff715 	stw	r4,-36(fp)
  80f67c:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80f680:	e0bff817 	ldw	r2,-32(fp)
  80f684:	10800058 	cmpnei	r2,r2,1
  80f688:	1000041e 	bne	r2,zero,80f69c <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  80f68c:	e0bff717 	ldw	r2,-36(fp)
  80f690:	10800c17 	ldw	r2,48(r2)
  80f694:	e0bfff15 	stw	r2,-4(fp)
  80f698:	00000306 	br	80f6a8 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  80f69c:	e0bff717 	ldw	r2,-36(fp)
  80f6a0:	10800b17 	ldw	r2,44(r2)
  80f6a4:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  80f6a8:	e0bff717 	ldw	r2,-36(fp)
  80f6ac:	10800f17 	ldw	r2,60(r2)
  80f6b0:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80f6b4:	e0bff717 	ldw	r2,-36(fp)
  80f6b8:	10800e17 	ldw	r2,56(r2)
  80f6bc:	10800098 	cmpnei	r2,r2,2
  80f6c0:	1000051e 	bne	r2,zero,80f6d8 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  80f6c4:	e0fffe17 	ldw	r3,-8(fp)
  80f6c8:	e0fffe17 	ldw	r3,-8(fp)
  80f6cc:	18c5883a 	add	r2,r3,r3
  80f6d0:	e0bffe15 	stw	r2,-8(fp)
  80f6d4:	00000506 	br	80f6ec <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  80f6d8:	e13ffe17 	ldw	r4,-8(fp)
  80f6dc:	e13ffe17 	ldw	r4,-8(fp)
  80f6e0:	2105883a 	add	r2,r4,r4
  80f6e4:	1085883a 	add	r2,r2,r2
  80f6e8:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  80f6ec:	e0bff717 	ldw	r2,-36(fp)
  80f6f0:	10801017 	ldw	r2,64(r2)
  80f6f4:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80f6f8:	e0bff717 	ldw	r2,-36(fp)
  80f6fc:	10800d17 	ldw	r2,52(r2)
  80f700:	1004c03a 	cmpne	r2,r2,zero
  80f704:	10001e1e 	bne	r2,zero,80f780 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80f708:	e0bff717 	ldw	r2,-36(fp)
  80f70c:	10801317 	ldw	r2,76(r2)
  80f710:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  80f714:	e03ffb15 	stw	zero,-20(fp)
  80f718:	00001506 	br	80f770 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  80f71c:	e03ffc15 	stw	zero,-16(fp)
  80f720:	00000706 	br	80f740 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  80f724:	e0ffff17 	ldw	r3,-4(fp)
  80f728:	e0bffc17 	ldw	r2,-16(fp)
  80f72c:	1885883a 	add	r2,r3,r2
  80f730:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  80f734:	e0bffc17 	ldw	r2,-16(fp)
  80f738:	10800104 	addi	r2,r2,4
  80f73c:	e0bffc15 	stw	r2,-16(fp)
  80f740:	e0fffc17 	ldw	r3,-16(fp)
  80f744:	e13ffe17 	ldw	r4,-8(fp)
  80f748:	193ff636 	bltu	r3,r4,80f724 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  80f74c:	e0fffa17 	ldw	r3,-24(fp)
  80f750:	00800044 	movi	r2,1
  80f754:	10c4983a 	sll	r2,r2,r3
  80f758:	e0ffff17 	ldw	r3,-4(fp)
  80f75c:	1887883a 	add	r3,r3,r2
  80f760:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  80f764:	e13ffb17 	ldw	r4,-20(fp)
  80f768:	21000044 	addi	r4,r4,1
  80f76c:	e13ffb15 	stw	r4,-20(fp)
  80f770:	e0bffb17 	ldw	r2,-20(fp)
  80f774:	e0fffd17 	ldw	r3,-12(fp)
  80f778:	10ffe836 	bltu	r2,r3,80f71c <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  80f77c:	00001006 	br	80f7c0 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  80f780:	e13ffd17 	ldw	r4,-12(fp)
  80f784:	e0bffe17 	ldw	r2,-8(fp)
  80f788:	2089383a 	mul	r4,r4,r2
  80f78c:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  80f790:	e03ff915 	stw	zero,-28(fp)
  80f794:	00000706 	br	80f7b4 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  80f798:	e0ffff17 	ldw	r3,-4(fp)
  80f79c:	e0bff917 	ldw	r2,-28(fp)
  80f7a0:	1885883a 	add	r2,r3,r2
  80f7a4:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  80f7a8:	e0fff917 	ldw	r3,-28(fp)
  80f7ac:	18c00104 	addi	r3,r3,4
  80f7b0:	e0fff915 	stw	r3,-28(fp)
  80f7b4:	e0bff917 	ldw	r2,-28(fp)
  80f7b8:	e13ffd17 	ldw	r4,-12(fp)
  80f7bc:	113ff636 	bltu	r2,r4,80f798 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  80f7c0:	e037883a 	mov	sp,fp
  80f7c4:	df000017 	ldw	fp,0(sp)
  80f7c8:	dec00104 	addi	sp,sp,4
  80f7cc:	f800283a 	ret

0080f7d0 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  80f7d0:	deffed04 	addi	sp,sp,-76
  80f7d4:	df001215 	stw	fp,72(sp)
  80f7d8:	df001204 	addi	fp,sp,72
  80f7dc:	e13fee15 	stw	r4,-72(fp)
  80f7e0:	e17fef15 	stw	r5,-68(fp)
  80f7e4:	e1bff015 	stw	r6,-64(fp)
  80f7e8:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80f7ec:	e0bfee17 	ldw	r2,-72(fp)
  80f7f0:	10800f17 	ldw	r2,60(r2)
  80f7f4:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80f7f8:	e0bfee17 	ldw	r2,-72(fp)
  80f7fc:	10801017 	ldw	r2,64(r2)
  80f800:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  80f804:	e0bfef17 	ldw	r2,-68(fp)
  80f808:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  80f80c:	e0fff117 	ldw	r3,-60(fp)
  80f810:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  80f814:	e13ff017 	ldw	r4,-64(fp)
  80f818:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  80f81c:	e0800117 	ldw	r2,4(fp)
  80f820:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  80f824:	e0c00217 	ldw	r3,8(fp)
  80f828:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  80f82c:	e13ffa17 	ldw	r4,-24(fp)
  80f830:	e0bffb17 	ldw	r2,-20(fp)
  80f834:	2080062e 	bgeu	r4,r2,80f850 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  80f838:	e0fffb17 	ldw	r3,-20(fp)
  80f83c:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  80f840:	e13ffa17 	ldw	r4,-24(fp)
  80f844:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  80f848:	e0bffc17 	ldw	r2,-16(fp)
  80f84c:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  80f850:	e0fff817 	ldw	r3,-32(fp)
  80f854:	e13ff917 	ldw	r4,-28(fp)
  80f858:	1900062e 	bgeu	r3,r4,80f874 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  80f85c:	e0bff917 	ldw	r2,-28(fp)
  80f860:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  80f864:	e0fff817 	ldw	r3,-32(fp)
  80f868:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  80f86c:	e13ffc17 	ldw	r4,-16(fp)
  80f870:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  80f874:	e0bffb17 	ldw	r2,-20(fp)
  80f878:	e0fffe17 	ldw	r3,-8(fp)
  80f87c:	10c10d2e 	bgeu	r2,r3,80fcb4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  80f880:	e13ff917 	ldw	r4,-28(fp)
  80f884:	e0bffd17 	ldw	r2,-12(fp)
  80f888:	20800136 	bltu	r4,r2,80f890 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  80f88c:	00010906 	br	80fcb4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80f890:	e0fffa17 	ldw	r3,-24(fp)
  80f894:	e13ffe17 	ldw	r4,-8(fp)
  80f898:	19000336 	bltu	r3,r4,80f8a8 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  80f89c:	e0bffe17 	ldw	r2,-8(fp)
  80f8a0:	10bfffc4 	addi	r2,r2,-1
  80f8a4:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  80f8a8:	e0fff817 	ldw	r3,-32(fp)
  80f8ac:	e13ffd17 	ldw	r4,-12(fp)
  80f8b0:	19000336 	bltu	r3,r4,80f8c0 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  80f8b4:	e0bffd17 	ldw	r2,-12(fp)
  80f8b8:	10bfffc4 	addi	r2,r2,-1
  80f8bc:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80f8c0:	e0800317 	ldw	r2,12(fp)
  80f8c4:	10800058 	cmpnei	r2,r2,1
  80f8c8:	1000041e 	bne	r2,zero,80f8dc <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  80f8cc:	e0bfee17 	ldw	r2,-72(fp)
  80f8d0:	10800c17 	ldw	r2,48(r2)
  80f8d4:	e0bfff15 	stw	r2,-4(fp)
  80f8d8:	00000306 	br	80f8e8 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  80f8dc:	e0bfee17 	ldw	r2,-72(fp)
  80f8e0:	10800b17 	ldw	r2,44(r2)
  80f8e4:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80f8e8:	e0bfee17 	ldw	r2,-72(fp)
  80f8ec:	10800d17 	ldw	r2,52(r2)
  80f8f0:	1004c03a 	cmpne	r2,r2,zero
  80f8f4:	1000721e 	bne	r2,zero,80fac0 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80f8f8:	e0bfee17 	ldw	r2,-72(fp)
  80f8fc:	10801317 	ldw	r2,76(r2)
  80f900:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  80f904:	e0bff417 	ldw	r2,-48(fp)
  80f908:	e0fff917 	ldw	r3,-28(fp)
  80f90c:	1884983a 	sll	r2,r3,r2
  80f910:	e13fff17 	ldw	r4,-4(fp)
  80f914:	2089883a 	add	r4,r4,r2
  80f918:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80f91c:	e0bfee17 	ldw	r2,-72(fp)
  80f920:	10800e17 	ldw	r2,56(r2)
  80f924:	10800058 	cmpnei	r2,r2,1
  80f928:	10001e1e 	bne	r2,zero,80f9a4 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  80f92c:	e0bff917 	ldw	r2,-28(fp)
  80f930:	e0bff515 	stw	r2,-44(fp)
  80f934:	00001706 	br	80f994 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  80f938:	e0fffb17 	ldw	r3,-20(fp)
  80f93c:	e0fff615 	stw	r3,-40(fp)
  80f940:	00000806 	br	80f964 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  80f944:	e0ffff17 	ldw	r3,-4(fp)
  80f948:	e0bff617 	ldw	r2,-40(fp)
  80f94c:	1885883a 	add	r2,r3,r2
  80f950:	e0fff717 	ldw	r3,-36(fp)
  80f954:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80f958:	e13ff617 	ldw	r4,-40(fp)
  80f95c:	21000044 	addi	r4,r4,1
  80f960:	e13ff615 	stw	r4,-40(fp)
  80f964:	e0bffa17 	ldw	r2,-24(fp)
  80f968:	e0fff617 	ldw	r3,-40(fp)
  80f96c:	10fff52e 	bgeu	r2,r3,80f944 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  80f970:	e0fff417 	ldw	r3,-48(fp)
  80f974:	00800044 	movi	r2,1
  80f978:	10c4983a 	sll	r2,r2,r3
  80f97c:	e13fff17 	ldw	r4,-4(fp)
  80f980:	2089883a 	add	r4,r4,r2
  80f984:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80f988:	e0bff517 	ldw	r2,-44(fp)
  80f98c:	10800044 	addi	r2,r2,1
  80f990:	e0bff515 	stw	r2,-44(fp)
  80f994:	e0fff817 	ldw	r3,-32(fp)
  80f998:	e13ff517 	ldw	r4,-44(fp)
  80f99c:	193fe62e 	bgeu	r3,r4,80f938 <alt_up_pixel_buffer_dma_draw_box+0x168>
  80f9a0:	0000c406 	br	80fcb4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80f9a4:	e0bfee17 	ldw	r2,-72(fp)
  80f9a8:	10800e17 	ldw	r2,56(r2)
  80f9ac:	10800098 	cmpnei	r2,r2,2
  80f9b0:	1000211e 	bne	r2,zero,80fa38 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  80f9b4:	e0bff917 	ldw	r2,-28(fp)
  80f9b8:	e0bff515 	stw	r2,-44(fp)
  80f9bc:	00001a06 	br	80fa28 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  80f9c0:	e0fffb17 	ldw	r3,-20(fp)
  80f9c4:	e0fff615 	stw	r3,-40(fp)
  80f9c8:	00000b06 	br	80f9f8 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80f9cc:	e13ff617 	ldw	r4,-40(fp)
  80f9d0:	e13ff617 	ldw	r4,-40(fp)
  80f9d4:	2105883a 	add	r2,r4,r4
  80f9d8:	1007883a 	mov	r3,r2
  80f9dc:	e0bfff17 	ldw	r2,-4(fp)
  80f9e0:	1885883a 	add	r2,r3,r2
  80f9e4:	e0fff717 	ldw	r3,-36(fp)
  80f9e8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80f9ec:	e0bff617 	ldw	r2,-40(fp)
  80f9f0:	10800044 	addi	r2,r2,1
  80f9f4:	e0bff615 	stw	r2,-40(fp)
  80f9f8:	e0fffa17 	ldw	r3,-24(fp)
  80f9fc:	e13ff617 	ldw	r4,-40(fp)
  80fa00:	193ff22e 	bgeu	r3,r4,80f9cc <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  80fa04:	e0fff417 	ldw	r3,-48(fp)
  80fa08:	00800044 	movi	r2,1
  80fa0c:	10c4983a 	sll	r2,r2,r3
  80fa10:	e0ffff17 	ldw	r3,-4(fp)
  80fa14:	1887883a 	add	r3,r3,r2
  80fa18:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80fa1c:	e13ff517 	ldw	r4,-44(fp)
  80fa20:	21000044 	addi	r4,r4,1
  80fa24:	e13ff515 	stw	r4,-44(fp)
  80fa28:	e0bff817 	ldw	r2,-32(fp)
  80fa2c:	e0fff517 	ldw	r3,-44(fp)
  80fa30:	10ffe32e 	bgeu	r2,r3,80f9c0 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  80fa34:	00009f06 	br	80fcb4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80fa38:	e13ff917 	ldw	r4,-28(fp)
  80fa3c:	e13ff515 	stw	r4,-44(fp)
  80fa40:	00001b06 	br	80fab0 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  80fa44:	e0bffb17 	ldw	r2,-20(fp)
  80fa48:	e0bff615 	stw	r2,-40(fp)
  80fa4c:	00000c06 	br	80fa80 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80fa50:	e0fff617 	ldw	r3,-40(fp)
  80fa54:	e0fff617 	ldw	r3,-40(fp)
  80fa58:	18c5883a 	add	r2,r3,r3
  80fa5c:	1085883a 	add	r2,r2,r2
  80fa60:	1007883a 	mov	r3,r2
  80fa64:	e0bfff17 	ldw	r2,-4(fp)
  80fa68:	1885883a 	add	r2,r3,r2
  80fa6c:	e0fff717 	ldw	r3,-36(fp)
  80fa70:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80fa74:	e13ff617 	ldw	r4,-40(fp)
  80fa78:	21000044 	addi	r4,r4,1
  80fa7c:	e13ff615 	stw	r4,-40(fp)
  80fa80:	e0bffa17 	ldw	r2,-24(fp)
  80fa84:	e0fff617 	ldw	r3,-40(fp)
  80fa88:	10fff12e 	bgeu	r2,r3,80fa50 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  80fa8c:	e0fff417 	ldw	r3,-48(fp)
  80fa90:	00800044 	movi	r2,1
  80fa94:	10c4983a 	sll	r2,r2,r3
  80fa98:	e13fff17 	ldw	r4,-4(fp)
  80fa9c:	2089883a 	add	r4,r4,r2
  80faa0:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80faa4:	e0bff517 	ldw	r2,-44(fp)
  80faa8:	10800044 	addi	r2,r2,1
  80faac:	e0bff515 	stw	r2,-44(fp)
  80fab0:	e0fff817 	ldw	r3,-32(fp)
  80fab4:	e13ff517 	ldw	r4,-44(fp)
  80fab8:	193fe22e 	bgeu	r3,r4,80fa44 <alt_up_pixel_buffer_dma_draw_box+0x274>
  80fabc:	00007d06 	br	80fcb4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80fac0:	e0bfee17 	ldw	r2,-72(fp)
  80fac4:	10800e17 	ldw	r2,56(r2)
  80fac8:	10800058 	cmpnei	r2,r2,1
  80facc:	1000221e 	bne	r2,zero,80fb58 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  80fad0:	e0fff917 	ldw	r3,-28(fp)
  80fad4:	e13ffe17 	ldw	r4,-8(fp)
  80fad8:	1905383a 	mul	r2,r3,r4
  80fadc:	e0ffff17 	ldw	r3,-4(fp)
  80fae0:	1887883a 	add	r3,r3,r2
  80fae4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80fae8:	e13ff917 	ldw	r4,-28(fp)
  80faec:	e13ff215 	stw	r4,-56(fp)
  80faf0:	00001506 	br	80fb48 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  80faf4:	e0bffb17 	ldw	r2,-20(fp)
  80faf8:	e0bff315 	stw	r2,-52(fp)
  80fafc:	00000806 	br	80fb20 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  80fb00:	e0ffff17 	ldw	r3,-4(fp)
  80fb04:	e0bff317 	ldw	r2,-52(fp)
  80fb08:	1885883a 	add	r2,r3,r2
  80fb0c:	e0fff717 	ldw	r3,-36(fp)
  80fb10:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80fb14:	e0fff317 	ldw	r3,-52(fp)
  80fb18:	18c00044 	addi	r3,r3,1
  80fb1c:	e0fff315 	stw	r3,-52(fp)
  80fb20:	e13ffa17 	ldw	r4,-24(fp)
  80fb24:	e0bff317 	ldw	r2,-52(fp)
  80fb28:	20bff52e 	bgeu	r4,r2,80fb00 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  80fb2c:	e0ffff17 	ldw	r3,-4(fp)
  80fb30:	e13ffe17 	ldw	r4,-8(fp)
  80fb34:	1907883a 	add	r3,r3,r4
  80fb38:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80fb3c:	e0bff217 	ldw	r2,-56(fp)
  80fb40:	10800044 	addi	r2,r2,1
  80fb44:	e0bff215 	stw	r2,-56(fp)
  80fb48:	e0fff817 	ldw	r3,-32(fp)
  80fb4c:	e13ff217 	ldw	r4,-56(fp)
  80fb50:	193fe82e 	bgeu	r3,r4,80faf4 <alt_up_pixel_buffer_dma_draw_box+0x324>
  80fb54:	00005706 	br	80fcb4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80fb58:	e0bfee17 	ldw	r2,-72(fp)
  80fb5c:	10800e17 	ldw	r2,56(r2)
  80fb60:	10800098 	cmpnei	r2,r2,2
  80fb64:	1000291e 	bne	r2,zero,80fc0c <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  80fb68:	e0fffe17 	ldw	r3,-8(fp)
  80fb6c:	e0fffe17 	ldw	r3,-8(fp)
  80fb70:	18c5883a 	add	r2,r3,r3
  80fb74:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80fb78:	e13ff917 	ldw	r4,-28(fp)
  80fb7c:	e0fffe17 	ldw	r3,-8(fp)
  80fb80:	20c5383a 	mul	r2,r4,r3
  80fb84:	e13fff17 	ldw	r4,-4(fp)
  80fb88:	2089883a 	add	r4,r4,r2
  80fb8c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80fb90:	e0bff917 	ldw	r2,-28(fp)
  80fb94:	e0bff215 	stw	r2,-56(fp)
  80fb98:	00001806 	br	80fbfc <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  80fb9c:	e0fffb17 	ldw	r3,-20(fp)
  80fba0:	e0fff315 	stw	r3,-52(fp)
  80fba4:	00000b06 	br	80fbd4 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80fba8:	e13ff317 	ldw	r4,-52(fp)
  80fbac:	e13ff317 	ldw	r4,-52(fp)
  80fbb0:	2105883a 	add	r2,r4,r4
  80fbb4:	1007883a 	mov	r3,r2
  80fbb8:	e0bfff17 	ldw	r2,-4(fp)
  80fbbc:	1885883a 	add	r2,r3,r2
  80fbc0:	e0fff717 	ldw	r3,-36(fp)
  80fbc4:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80fbc8:	e0bff317 	ldw	r2,-52(fp)
  80fbcc:	10800044 	addi	r2,r2,1
  80fbd0:	e0bff315 	stw	r2,-52(fp)
  80fbd4:	e0fffa17 	ldw	r3,-24(fp)
  80fbd8:	e13ff317 	ldw	r4,-52(fp)
  80fbdc:	193ff22e 	bgeu	r3,r4,80fba8 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  80fbe0:	e0bfff17 	ldw	r2,-4(fp)
  80fbe4:	e0fffe17 	ldw	r3,-8(fp)
  80fbe8:	10c5883a 	add	r2,r2,r3
  80fbec:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80fbf0:	e13ff217 	ldw	r4,-56(fp)
  80fbf4:	21000044 	addi	r4,r4,1
  80fbf8:	e13ff215 	stw	r4,-56(fp)
  80fbfc:	e0bff817 	ldw	r2,-32(fp)
  80fc00:	e0fff217 	ldw	r3,-56(fp)
  80fc04:	10ffe52e 	bgeu	r2,r3,80fb9c <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  80fc08:	00002a06 	br	80fcb4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80fc0c:	e13ffe17 	ldw	r4,-8(fp)
  80fc10:	e13ffe17 	ldw	r4,-8(fp)
  80fc14:	2105883a 	add	r2,r4,r4
  80fc18:	1085883a 	add	r2,r2,r2
  80fc1c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80fc20:	e0fff917 	ldw	r3,-28(fp)
  80fc24:	e13ffe17 	ldw	r4,-8(fp)
  80fc28:	1905383a 	mul	r2,r3,r4
  80fc2c:	e0ffff17 	ldw	r3,-4(fp)
  80fc30:	1887883a 	add	r3,r3,r2
  80fc34:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80fc38:	e13ff917 	ldw	r4,-28(fp)
  80fc3c:	e13ff215 	stw	r4,-56(fp)
  80fc40:	00001906 	br	80fca8 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  80fc44:	e0bffb17 	ldw	r2,-20(fp)
  80fc48:	e0bff315 	stw	r2,-52(fp)
  80fc4c:	00000c06 	br	80fc80 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80fc50:	e0fff317 	ldw	r3,-52(fp)
  80fc54:	e0fff317 	ldw	r3,-52(fp)
  80fc58:	18c5883a 	add	r2,r3,r3
  80fc5c:	1085883a 	add	r2,r2,r2
  80fc60:	1007883a 	mov	r3,r2
  80fc64:	e0bfff17 	ldw	r2,-4(fp)
  80fc68:	1885883a 	add	r2,r3,r2
  80fc6c:	e0fff717 	ldw	r3,-36(fp)
  80fc70:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80fc74:	e13ff317 	ldw	r4,-52(fp)
  80fc78:	21000044 	addi	r4,r4,1
  80fc7c:	e13ff315 	stw	r4,-52(fp)
  80fc80:	e0bffa17 	ldw	r2,-24(fp)
  80fc84:	e0fff317 	ldw	r3,-52(fp)
  80fc88:	10fff12e 	bgeu	r2,r3,80fc50 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  80fc8c:	e13fff17 	ldw	r4,-4(fp)
  80fc90:	e0bffe17 	ldw	r2,-8(fp)
  80fc94:	2089883a 	add	r4,r4,r2
  80fc98:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80fc9c:	e0fff217 	ldw	r3,-56(fp)
  80fca0:	18c00044 	addi	r3,r3,1
  80fca4:	e0fff215 	stw	r3,-56(fp)
  80fca8:	e13ff817 	ldw	r4,-32(fp)
  80fcac:	e0bff217 	ldw	r2,-56(fp)
  80fcb0:	20bfe42e 	bgeu	r4,r2,80fc44 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  80fcb4:	e037883a 	mov	sp,fp
  80fcb8:	df000017 	ldw	fp,0(sp)
  80fcbc:	dec00104 	addi	sp,sp,4
  80fcc0:	f800283a 	ret

0080fcc4 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  80fcc4:	defff204 	addi	sp,sp,-56
  80fcc8:	df000d15 	stw	fp,52(sp)
  80fccc:	df000d04 	addi	fp,sp,52
  80fcd0:	e13ff315 	stw	r4,-52(fp)
  80fcd4:	e17ff415 	stw	r5,-48(fp)
  80fcd8:	e1bff515 	stw	r6,-44(fp)
  80fcdc:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80fce0:	e0bff317 	ldw	r2,-52(fp)
  80fce4:	10800f17 	ldw	r2,60(r2)
  80fce8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80fcec:	e0bff317 	ldw	r2,-52(fp)
  80fcf0:	10801017 	ldw	r2,64(r2)
  80fcf4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  80fcf8:	e0bff417 	ldw	r2,-48(fp)
  80fcfc:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  80fd00:	e0fff517 	ldw	r3,-44(fp)
  80fd04:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  80fd08:	e13ff617 	ldw	r4,-40(fp)
  80fd0c:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  80fd10:	e0800117 	ldw	r2,4(fp)
  80fd14:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  80fd18:	e0fffb17 	ldw	r3,-20(fp)
  80fd1c:	e13ffc17 	ldw	r4,-16(fp)
  80fd20:	1900042e 	bgeu	r3,r4,80fd34 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  80fd24:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  80fd28:	e0fffb17 	ldw	r3,-20(fp)
  80fd2c:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  80fd30:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  80fd34:	e13ffc17 	ldw	r4,-16(fp)
  80fd38:	e0bffe17 	ldw	r2,-8(fp)
  80fd3c:	2080b12e 	bgeu	r4,r2,810004 <alt_up_pixel_buffer_dma_draw_hline+0x340>
  80fd40:	e0fffa17 	ldw	r3,-24(fp)
  80fd44:	e13ffd17 	ldw	r4,-12(fp)
  80fd48:	19000136 	bltu	r3,r4,80fd50 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  80fd4c:	0000ad06 	br	810004 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80fd50:	e0bffb17 	ldw	r2,-20(fp)
  80fd54:	e0fffe17 	ldw	r3,-8(fp)
  80fd58:	10c00336 	bltu	r2,r3,80fd68 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  80fd5c:	e13ffe17 	ldw	r4,-8(fp)
  80fd60:	213fffc4 	addi	r4,r4,-1
  80fd64:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80fd68:	e0800217 	ldw	r2,8(fp)
  80fd6c:	10800058 	cmpnei	r2,r2,1
  80fd70:	1000041e 	bne	r2,zero,80fd84 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  80fd74:	e0bff317 	ldw	r2,-52(fp)
  80fd78:	10800c17 	ldw	r2,48(r2)
  80fd7c:	e0bfff15 	stw	r2,-4(fp)
  80fd80:	00000306 	br	80fd90 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  80fd84:	e0bff317 	ldw	r2,-52(fp)
  80fd88:	10800b17 	ldw	r2,44(r2)
  80fd8c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80fd90:	e0bff317 	ldw	r2,-52(fp)
  80fd94:	10800d17 	ldw	r2,52(r2)
  80fd98:	1004c03a 	cmpne	r2,r2,zero
  80fd9c:	1000431e 	bne	r2,zero,80feac <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80fda0:	e0bff317 	ldw	r2,-52(fp)
  80fda4:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  80fda8:	e0fffa17 	ldw	r3,-24(fp)
  80fdac:	1884983a 	sll	r2,r3,r2
  80fdb0:	e13fff17 	ldw	r4,-4(fp)
  80fdb4:	2089883a 	add	r4,r4,r2
  80fdb8:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80fdbc:	e0bff317 	ldw	r2,-52(fp)
  80fdc0:	10800e17 	ldw	r2,56(r2)
  80fdc4:	10800058 	cmpnei	r2,r2,1
  80fdc8:	10000f1e 	bne	r2,zero,80fe08 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  80fdcc:	e0bffc17 	ldw	r2,-16(fp)
  80fdd0:	e0bff815 	stw	r2,-32(fp)
  80fdd4:	00000806 	br	80fdf8 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  80fdd8:	e0ffff17 	ldw	r3,-4(fp)
  80fddc:	e0bff817 	ldw	r2,-32(fp)
  80fde0:	1885883a 	add	r2,r3,r2
  80fde4:	e0fff917 	ldw	r3,-28(fp)
  80fde8:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80fdec:	e0fff817 	ldw	r3,-32(fp)
  80fdf0:	18c00044 	addi	r3,r3,1
  80fdf4:	e0fff815 	stw	r3,-32(fp)
  80fdf8:	e13ffb17 	ldw	r4,-20(fp)
  80fdfc:	e0bff817 	ldw	r2,-32(fp)
  80fe00:	20bff52e 	bgeu	r4,r2,80fdd8 <alt_up_pixel_buffer_dma_draw_hline+0x114>
  80fe04:	00007f06 	br	810004 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80fe08:	e0bff317 	ldw	r2,-52(fp)
  80fe0c:	10800e17 	ldw	r2,56(r2)
  80fe10:	10800098 	cmpnei	r2,r2,2
  80fe14:	1000121e 	bne	r2,zero,80fe60 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  80fe18:	e0fffc17 	ldw	r3,-16(fp)
  80fe1c:	e0fff815 	stw	r3,-32(fp)
  80fe20:	00000b06 	br	80fe50 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80fe24:	e13ff817 	ldw	r4,-32(fp)
  80fe28:	e13ff817 	ldw	r4,-32(fp)
  80fe2c:	2105883a 	add	r2,r4,r4
  80fe30:	1007883a 	mov	r3,r2
  80fe34:	e0bfff17 	ldw	r2,-4(fp)
  80fe38:	1885883a 	add	r2,r3,r2
  80fe3c:	e0fff917 	ldw	r3,-28(fp)
  80fe40:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80fe44:	e0bff817 	ldw	r2,-32(fp)
  80fe48:	10800044 	addi	r2,r2,1
  80fe4c:	e0bff815 	stw	r2,-32(fp)
  80fe50:	e0fffb17 	ldw	r3,-20(fp)
  80fe54:	e13ff817 	ldw	r4,-32(fp)
  80fe58:	193ff22e 	bgeu	r3,r4,80fe24 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  80fe5c:	00006906 	br	810004 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80fe60:	e0bffc17 	ldw	r2,-16(fp)
  80fe64:	e0bff815 	stw	r2,-32(fp)
  80fe68:	00000c06 	br	80fe9c <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80fe6c:	e0fff817 	ldw	r3,-32(fp)
  80fe70:	e0fff817 	ldw	r3,-32(fp)
  80fe74:	18c5883a 	add	r2,r3,r3
  80fe78:	1085883a 	add	r2,r2,r2
  80fe7c:	1007883a 	mov	r3,r2
  80fe80:	e0bfff17 	ldw	r2,-4(fp)
  80fe84:	1885883a 	add	r2,r3,r2
  80fe88:	e0fff917 	ldw	r3,-28(fp)
  80fe8c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80fe90:	e13ff817 	ldw	r4,-32(fp)
  80fe94:	21000044 	addi	r4,r4,1
  80fe98:	e13ff815 	stw	r4,-32(fp)
  80fe9c:	e0bffb17 	ldw	r2,-20(fp)
  80fea0:	e0fff817 	ldw	r3,-32(fp)
  80fea4:	10fff12e 	bgeu	r2,r3,80fe6c <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  80fea8:	00005606 	br	810004 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80feac:	e0bff317 	ldw	r2,-52(fp)
  80feb0:	10800e17 	ldw	r2,56(r2)
  80feb4:	10800058 	cmpnei	r2,r2,1
  80feb8:	1000151e 	bne	r2,zero,80ff10 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  80febc:	e13ffa17 	ldw	r4,-24(fp)
  80fec0:	e0fffe17 	ldw	r3,-8(fp)
  80fec4:	20c5383a 	mul	r2,r4,r3
  80fec8:	e13fff17 	ldw	r4,-4(fp)
  80fecc:	2089883a 	add	r4,r4,r2
  80fed0:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80fed4:	e0bffc17 	ldw	r2,-16(fp)
  80fed8:	e0bff715 	stw	r2,-36(fp)
  80fedc:	00000806 	br	80ff00 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  80fee0:	e0ffff17 	ldw	r3,-4(fp)
  80fee4:	e0bff717 	ldw	r2,-36(fp)
  80fee8:	1885883a 	add	r2,r3,r2
  80feec:	e0fff917 	ldw	r3,-28(fp)
  80fef0:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80fef4:	e0fff717 	ldw	r3,-36(fp)
  80fef8:	18c00044 	addi	r3,r3,1
  80fefc:	e0fff715 	stw	r3,-36(fp)
  80ff00:	e13ffb17 	ldw	r4,-20(fp)
  80ff04:	e0bff717 	ldw	r2,-36(fp)
  80ff08:	20bff52e 	bgeu	r4,r2,80fee0 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  80ff0c:	00003d06 	br	810004 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80ff10:	e0bff317 	ldw	r2,-52(fp)
  80ff14:	10800e17 	ldw	r2,56(r2)
  80ff18:	10800098 	cmpnei	r2,r2,2
  80ff1c:	10001c1e 	bne	r2,zero,80ff90 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  80ff20:	e0fffe17 	ldw	r3,-8(fp)
  80ff24:	e0fffe17 	ldw	r3,-8(fp)
  80ff28:	18c5883a 	add	r2,r3,r3
  80ff2c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  80ff30:	e13ffa17 	ldw	r4,-24(fp)
  80ff34:	e0fffe17 	ldw	r3,-8(fp)
  80ff38:	20c5383a 	mul	r2,r4,r3
  80ff3c:	e13fff17 	ldw	r4,-4(fp)
  80ff40:	2089883a 	add	r4,r4,r2
  80ff44:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80ff48:	e0bffc17 	ldw	r2,-16(fp)
  80ff4c:	e0bff715 	stw	r2,-36(fp)
  80ff50:	00000b06 	br	80ff80 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80ff54:	e0fff717 	ldw	r3,-36(fp)
  80ff58:	e0fff717 	ldw	r3,-36(fp)
  80ff5c:	18c5883a 	add	r2,r3,r3
  80ff60:	1007883a 	mov	r3,r2
  80ff64:	e0bfff17 	ldw	r2,-4(fp)
  80ff68:	1885883a 	add	r2,r3,r2
  80ff6c:	e0fff917 	ldw	r3,-28(fp)
  80ff70:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80ff74:	e13ff717 	ldw	r4,-36(fp)
  80ff78:	21000044 	addi	r4,r4,1
  80ff7c:	e13ff715 	stw	r4,-36(fp)
  80ff80:	e0bffb17 	ldw	r2,-20(fp)
  80ff84:	e0fff717 	ldw	r3,-36(fp)
  80ff88:	10fff22e 	bgeu	r2,r3,80ff54 <alt_up_pixel_buffer_dma_draw_hline+0x290>
  80ff8c:	00001d06 	br	810004 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80ff90:	e13ffe17 	ldw	r4,-8(fp)
  80ff94:	e13ffe17 	ldw	r4,-8(fp)
  80ff98:	2105883a 	add	r2,r4,r4
  80ff9c:	1085883a 	add	r2,r2,r2
  80ffa0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  80ffa4:	e0fffa17 	ldw	r3,-24(fp)
  80ffa8:	e13ffe17 	ldw	r4,-8(fp)
  80ffac:	1905383a 	mul	r2,r3,r4
  80ffb0:	e0ffff17 	ldw	r3,-4(fp)
  80ffb4:	1887883a 	add	r3,r3,r2
  80ffb8:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80ffbc:	e13ffc17 	ldw	r4,-16(fp)
  80ffc0:	e13ff715 	stw	r4,-36(fp)
  80ffc4:	00000c06 	br	80fff8 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80ffc8:	e0fff717 	ldw	r3,-36(fp)
  80ffcc:	e0fff717 	ldw	r3,-36(fp)
  80ffd0:	18c5883a 	add	r2,r3,r3
  80ffd4:	1085883a 	add	r2,r2,r2
  80ffd8:	1007883a 	mov	r3,r2
  80ffdc:	e0bfff17 	ldw	r2,-4(fp)
  80ffe0:	1885883a 	add	r2,r3,r2
  80ffe4:	e0fff917 	ldw	r3,-28(fp)
  80ffe8:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80ffec:	e13ff717 	ldw	r4,-36(fp)
  80fff0:	21000044 	addi	r4,r4,1
  80fff4:	e13ff715 	stw	r4,-36(fp)
  80fff8:	e0bffb17 	ldw	r2,-20(fp)
  80fffc:	e0fff717 	ldw	r3,-36(fp)
  810000:	10fff12e 	bgeu	r2,r3,80ffc8 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  810004:	e037883a 	mov	sp,fp
  810008:	df000017 	ldw	fp,0(sp)
  81000c:	dec00104 	addi	sp,sp,4
  810010:	f800283a 	ret

00810014 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  810014:	defff104 	addi	sp,sp,-60
  810018:	df000e15 	stw	fp,56(sp)
  81001c:	df000e04 	addi	fp,sp,56
  810020:	e13ff215 	stw	r4,-56(fp)
  810024:	e17ff315 	stw	r5,-52(fp)
  810028:	e1bff415 	stw	r6,-48(fp)
  81002c:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  810030:	e0bff217 	ldw	r2,-56(fp)
  810034:	10800f17 	ldw	r2,60(r2)
  810038:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  81003c:	e0bff217 	ldw	r2,-56(fp)
  810040:	10801017 	ldw	r2,64(r2)
  810044:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  810048:	e0bff317 	ldw	r2,-52(fp)
  81004c:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  810050:	e0fff417 	ldw	r3,-48(fp)
  810054:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  810058:	e13ff517 	ldw	r4,-44(fp)
  81005c:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  810060:	e0800117 	ldw	r2,4(fp)
  810064:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  810068:	e0fffa17 	ldw	r3,-24(fp)
  81006c:	e13ffb17 	ldw	r4,-20(fp)
  810070:	1900042e 	bgeu	r3,r4,810084 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  810074:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  810078:	e0fffa17 	ldw	r3,-24(fp)
  81007c:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  810080:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  810084:	e13ffc17 	ldw	r4,-16(fp)
  810088:	e0bffe17 	ldw	r2,-8(fp)
  81008c:	2080d12e 	bgeu	r4,r2,8103d4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  810090:	e0fffb17 	ldw	r3,-20(fp)
  810094:	e13ffd17 	ldw	r4,-12(fp)
  810098:	19000136 	bltu	r3,r4,8100a0 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  81009c:	0000cd06 	br	8103d4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  8100a0:	e0bffa17 	ldw	r2,-24(fp)
  8100a4:	e0fffd17 	ldw	r3,-12(fp)
  8100a8:	10c00336 	bltu	r2,r3,8100b8 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  8100ac:	e13ffd17 	ldw	r4,-12(fp)
  8100b0:	213fffc4 	addi	r4,r4,-1
  8100b4:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  8100b8:	e0800217 	ldw	r2,8(fp)
  8100bc:	10800058 	cmpnei	r2,r2,1
  8100c0:	1000041e 	bne	r2,zero,8100d4 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  8100c4:	e0bff217 	ldw	r2,-56(fp)
  8100c8:	10800c17 	ldw	r2,48(r2)
  8100cc:	e0bfff15 	stw	r2,-4(fp)
  8100d0:	00000306 	br	8100e0 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  8100d4:	e0bff217 	ldw	r2,-56(fp)
  8100d8:	10800b17 	ldw	r2,44(r2)
  8100dc:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  8100e0:	e0bff217 	ldw	r2,-56(fp)
  8100e4:	10800d17 	ldw	r2,52(r2)
  8100e8:	1004c03a 	cmpne	r2,r2,zero
  8100ec:	1000571e 	bne	r2,zero,81024c <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  8100f0:	e0bff217 	ldw	r2,-56(fp)
  8100f4:	10801317 	ldw	r2,76(r2)
  8100f8:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  8100fc:	e0bff717 	ldw	r2,-36(fp)
  810100:	e0fffb17 	ldw	r3,-20(fp)
  810104:	1884983a 	sll	r2,r3,r2
  810108:	e13fff17 	ldw	r4,-4(fp)
  81010c:	2089883a 	add	r4,r4,r2
  810110:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  810114:	e0bff217 	ldw	r2,-56(fp)
  810118:	10800e17 	ldw	r2,56(r2)
  81011c:	10800058 	cmpnei	r2,r2,1
  810120:	1000151e 	bne	r2,zero,810178 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  810124:	e0bffb17 	ldw	r2,-20(fp)
  810128:	e0bff815 	stw	r2,-32(fp)
  81012c:	00000e06 	br	810168 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  810130:	e0ffff17 	ldw	r3,-4(fp)
  810134:	e0bffc17 	ldw	r2,-16(fp)
  810138:	1885883a 	add	r2,r3,r2
  81013c:	e0fff917 	ldw	r3,-28(fp)
  810140:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  810144:	e0fff717 	ldw	r3,-36(fp)
  810148:	00800044 	movi	r2,1
  81014c:	10c4983a 	sll	r2,r2,r3
  810150:	e0ffff17 	ldw	r3,-4(fp)
  810154:	1887883a 	add	r3,r3,r2
  810158:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  81015c:	e13ff817 	ldw	r4,-32(fp)
  810160:	21000044 	addi	r4,r4,1
  810164:	e13ff815 	stw	r4,-32(fp)
  810168:	e0bffa17 	ldw	r2,-24(fp)
  81016c:	e0fff817 	ldw	r3,-32(fp)
  810170:	10ffef2e 	bgeu	r2,r3,810130 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  810174:	00009706 	br	8103d4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  810178:	e0bff217 	ldw	r2,-56(fp)
  81017c:	10800e17 	ldw	r2,56(r2)
  810180:	10800098 	cmpnei	r2,r2,2
  810184:	1000181e 	bne	r2,zero,8101e8 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  810188:	e13ffb17 	ldw	r4,-20(fp)
  81018c:	e13ff815 	stw	r4,-32(fp)
  810190:	00001106 	br	8101d8 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  810194:	e0fffc17 	ldw	r3,-16(fp)
  810198:	e0fffc17 	ldw	r3,-16(fp)
  81019c:	18c5883a 	add	r2,r3,r3
  8101a0:	1007883a 	mov	r3,r2
  8101a4:	e0bfff17 	ldw	r2,-4(fp)
  8101a8:	1885883a 	add	r2,r3,r2
  8101ac:	e0fff917 	ldw	r3,-28(fp)
  8101b0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  8101b4:	e0fff717 	ldw	r3,-36(fp)
  8101b8:	00800044 	movi	r2,1
  8101bc:	10c4983a 	sll	r2,r2,r3
  8101c0:	e13fff17 	ldw	r4,-4(fp)
  8101c4:	2089883a 	add	r4,r4,r2
  8101c8:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  8101cc:	e0bff817 	ldw	r2,-32(fp)
  8101d0:	10800044 	addi	r2,r2,1
  8101d4:	e0bff815 	stw	r2,-32(fp)
  8101d8:	e0fffa17 	ldw	r3,-24(fp)
  8101dc:	e13ff817 	ldw	r4,-32(fp)
  8101e0:	193fec2e 	bgeu	r3,r4,810194 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  8101e4:	00007b06 	br	8103d4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  8101e8:	e0bffb17 	ldw	r2,-20(fp)
  8101ec:	e0bff815 	stw	r2,-32(fp)
  8101f0:	00001206 	br	81023c <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  8101f4:	e0fffc17 	ldw	r3,-16(fp)
  8101f8:	e0fffc17 	ldw	r3,-16(fp)
  8101fc:	18c5883a 	add	r2,r3,r3
  810200:	1085883a 	add	r2,r2,r2
  810204:	1007883a 	mov	r3,r2
  810208:	e0bfff17 	ldw	r2,-4(fp)
  81020c:	1885883a 	add	r2,r3,r2
  810210:	e0fff917 	ldw	r3,-28(fp)
  810214:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  810218:	e0fff717 	ldw	r3,-36(fp)
  81021c:	00800044 	movi	r2,1
  810220:	10c4983a 	sll	r2,r2,r3
  810224:	e13fff17 	ldw	r4,-4(fp)
  810228:	2089883a 	add	r4,r4,r2
  81022c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  810230:	e0bff817 	ldw	r2,-32(fp)
  810234:	10800044 	addi	r2,r2,1
  810238:	e0bff815 	stw	r2,-32(fp)
  81023c:	e0fffa17 	ldw	r3,-24(fp)
  810240:	e13ff817 	ldw	r4,-32(fp)
  810244:	193feb2e 	bgeu	r3,r4,8101f4 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  810248:	00006206 	br	8103d4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  81024c:	e0bff217 	ldw	r2,-56(fp)
  810250:	10800e17 	ldw	r2,56(r2)
  810254:	10800058 	cmpnei	r2,r2,1
  810258:	1000191e 	bne	r2,zero,8102c0 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  81025c:	e0fffb17 	ldw	r3,-20(fp)
  810260:	e13ffe17 	ldw	r4,-8(fp)
  810264:	1905383a 	mul	r2,r3,r4
  810268:	e0ffff17 	ldw	r3,-4(fp)
  81026c:	1887883a 	add	r3,r3,r2
  810270:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  810274:	e13ffb17 	ldw	r4,-20(fp)
  810278:	e13ff615 	stw	r4,-40(fp)
  81027c:	00000c06 	br	8102b0 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  810280:	e0ffff17 	ldw	r3,-4(fp)
  810284:	e0bffc17 	ldw	r2,-16(fp)
  810288:	1885883a 	add	r2,r3,r2
  81028c:	e0fff917 	ldw	r3,-28(fp)
  810290:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  810294:	e0bfff17 	ldw	r2,-4(fp)
  810298:	e0fffe17 	ldw	r3,-8(fp)
  81029c:	10c5883a 	add	r2,r2,r3
  8102a0:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  8102a4:	e13ff617 	ldw	r4,-40(fp)
  8102a8:	21000044 	addi	r4,r4,1
  8102ac:	e13ff615 	stw	r4,-40(fp)
  8102b0:	e0bffa17 	ldw	r2,-24(fp)
  8102b4:	e0fff617 	ldw	r3,-40(fp)
  8102b8:	10fff12e 	bgeu	r2,r3,810280 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  8102bc:	00004506 	br	8103d4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8102c0:	e0bff217 	ldw	r2,-56(fp)
  8102c4:	10800e17 	ldw	r2,56(r2)
  8102c8:	10800098 	cmpnei	r2,r2,2
  8102cc:	1000201e 	bne	r2,zero,810350 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  8102d0:	e13ffe17 	ldw	r4,-8(fp)
  8102d4:	e13ffe17 	ldw	r4,-8(fp)
  8102d8:	2105883a 	add	r2,r4,r4
  8102dc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  8102e0:	e0fffb17 	ldw	r3,-20(fp)
  8102e4:	e13ffe17 	ldw	r4,-8(fp)
  8102e8:	1905383a 	mul	r2,r3,r4
  8102ec:	e0ffff17 	ldw	r3,-4(fp)
  8102f0:	1887883a 	add	r3,r3,r2
  8102f4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  8102f8:	e13ffb17 	ldw	r4,-20(fp)
  8102fc:	e13ff615 	stw	r4,-40(fp)
  810300:	00000f06 	br	810340 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  810304:	e0fffc17 	ldw	r3,-16(fp)
  810308:	e0fffc17 	ldw	r3,-16(fp)
  81030c:	18c5883a 	add	r2,r3,r3
  810310:	1007883a 	mov	r3,r2
  810314:	e0bfff17 	ldw	r2,-4(fp)
  810318:	1885883a 	add	r2,r3,r2
  81031c:	e0fff917 	ldw	r3,-28(fp)
  810320:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  810324:	e13fff17 	ldw	r4,-4(fp)
  810328:	e0bffe17 	ldw	r2,-8(fp)
  81032c:	2089883a 	add	r4,r4,r2
  810330:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  810334:	e0fff617 	ldw	r3,-40(fp)
  810338:	18c00044 	addi	r3,r3,1
  81033c:	e0fff615 	stw	r3,-40(fp)
  810340:	e13ffa17 	ldw	r4,-24(fp)
  810344:	e0bff617 	ldw	r2,-40(fp)
  810348:	20bfee2e 	bgeu	r4,r2,810304 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  81034c:	00002106 	br	8103d4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  810350:	e0fffe17 	ldw	r3,-8(fp)
  810354:	e0fffe17 	ldw	r3,-8(fp)
  810358:	18c5883a 	add	r2,r3,r3
  81035c:	1085883a 	add	r2,r2,r2
  810360:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  810364:	e13ffb17 	ldw	r4,-20(fp)
  810368:	e0fffe17 	ldw	r3,-8(fp)
  81036c:	20c5383a 	mul	r2,r4,r3
  810370:	e13fff17 	ldw	r4,-4(fp)
  810374:	2089883a 	add	r4,r4,r2
  810378:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  81037c:	e0bffb17 	ldw	r2,-20(fp)
  810380:	e0bff615 	stw	r2,-40(fp)
  810384:	00001006 	br	8103c8 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  810388:	e0fffc17 	ldw	r3,-16(fp)
  81038c:	e0fffc17 	ldw	r3,-16(fp)
  810390:	18c5883a 	add	r2,r3,r3
  810394:	1085883a 	add	r2,r2,r2
  810398:	1007883a 	mov	r3,r2
  81039c:	e0bfff17 	ldw	r2,-4(fp)
  8103a0:	1885883a 	add	r2,r3,r2
  8103a4:	e0fff917 	ldw	r3,-28(fp)
  8103a8:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  8103ac:	e13fff17 	ldw	r4,-4(fp)
  8103b0:	e0bffe17 	ldw	r2,-8(fp)
  8103b4:	2089883a 	add	r4,r4,r2
  8103b8:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  8103bc:	e0fff617 	ldw	r3,-40(fp)
  8103c0:	18c00044 	addi	r3,r3,1
  8103c4:	e0fff615 	stw	r3,-40(fp)
  8103c8:	e13ffa17 	ldw	r4,-24(fp)
  8103cc:	e0bff617 	ldw	r2,-40(fp)
  8103d0:	20bfed2e 	bgeu	r4,r2,810388 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  8103d4:	e037883a 	mov	sp,fp
  8103d8:	df000017 	ldw	fp,0(sp)
  8103dc:	dec00104 	addi	sp,sp,4
  8103e0:	f800283a 	ret

008103e4 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  8103e4:	defff804 	addi	sp,sp,-32
  8103e8:	dfc00715 	stw	ra,28(sp)
  8103ec:	df000615 	stw	fp,24(sp)
  8103f0:	df000604 	addi	fp,sp,24
  8103f4:	e13ffc15 	stw	r4,-16(fp)
  8103f8:	e17ffd15 	stw	r5,-12(fp)
  8103fc:	e1bffe15 	stw	r6,-8(fp)
  810400:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  810404:	e0800317 	ldw	r2,12(fp)
  810408:	d8800015 	stw	r2,0(sp)
  81040c:	e0800417 	ldw	r2,16(fp)
  810410:	d8800115 	stw	r2,4(sp)
  810414:	e13ffc17 	ldw	r4,-16(fp)
  810418:	e17ffd17 	ldw	r5,-12(fp)
  81041c:	e1bfff17 	ldw	r6,-4(fp)
  810420:	e1fffe17 	ldw	r7,-8(fp)
  810424:	080fcc40 	call	80fcc4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  810428:	e0800317 	ldw	r2,12(fp)
  81042c:	d8800015 	stw	r2,0(sp)
  810430:	e0800417 	ldw	r2,16(fp)
  810434:	d8800115 	stw	r2,4(sp)
  810438:	e13ffc17 	ldw	r4,-16(fp)
  81043c:	e17ffd17 	ldw	r5,-12(fp)
  810440:	e1bfff17 	ldw	r6,-4(fp)
  810444:	e1c00217 	ldw	r7,8(fp)
  810448:	080fcc40 	call	80fcc4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  81044c:	e0800317 	ldw	r2,12(fp)
  810450:	d8800015 	stw	r2,0(sp)
  810454:	e0800417 	ldw	r2,16(fp)
  810458:	d8800115 	stw	r2,4(sp)
  81045c:	e13ffc17 	ldw	r4,-16(fp)
  810460:	e17ffd17 	ldw	r5,-12(fp)
  810464:	e1bffe17 	ldw	r6,-8(fp)
  810468:	e1c00217 	ldw	r7,8(fp)
  81046c:	08100140 	call	810014 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  810470:	e0800317 	ldw	r2,12(fp)
  810474:	d8800015 	stw	r2,0(sp)
  810478:	e0800417 	ldw	r2,16(fp)
  81047c:	d8800115 	stw	r2,4(sp)
  810480:	e13ffc17 	ldw	r4,-16(fp)
  810484:	e17fff17 	ldw	r5,-4(fp)
  810488:	e1bffe17 	ldw	r6,-8(fp)
  81048c:	e1c00217 	ldw	r7,8(fp)
  810490:	08100140 	call	810014 <alt_up_pixel_buffer_dma_draw_vline>
}
  810494:	e037883a 	mov	sp,fp
  810498:	dfc00117 	ldw	ra,4(sp)
  81049c:	df000017 	ldw	fp,0(sp)
  8104a0:	dec00204 	addi	sp,sp,8
  8104a4:	f800283a 	ret

008104a8 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  8104a8:	defffb04 	addi	sp,sp,-20
  8104ac:	df000415 	stw	fp,16(sp)
  8104b0:	df000404 	addi	fp,sp,16
  8104b4:	e13ffc15 	stw	r4,-16(fp)
  8104b8:	e17ffd15 	stw	r5,-12(fp)
  8104bc:	e1bffe15 	stw	r6,-8(fp)
  8104c0:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  8104c4:	e0c00217 	ldw	r3,8(fp)
  8104c8:	1804c03a 	cmpne	r2,r3,zero
  8104cc:	10000b1e 	bne	r2,zero,8104fc <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  8104d0:	e13ffd17 	ldw	r4,-12(fp)
  8104d4:	e0ffff17 	ldw	r3,-4(fp)
  8104d8:	20c5383a 	mul	r2,r4,r3
  8104dc:	e13ffe17 	ldw	r4,-8(fp)
  8104e0:	1105883a 	add	r2,r2,r4
  8104e4:	1007883a 	mov	r3,r2
  8104e8:	e0bffc17 	ldw	r2,-16(fp)
  8104ec:	1885883a 	add	r2,r3,r2
  8104f0:	e0c00117 	ldw	r3,4(fp)
  8104f4:	10c00025 	stbio	r3,0(r2)
  8104f8:	00001b06 	br	810568 <helper_plot_pixel+0xc0>
	else if (mode == 1)
  8104fc:	e1000217 	ldw	r4,8(fp)
  810500:	20800058 	cmpnei	r2,r4,1
  810504:	10000c1e 	bne	r2,zero,810538 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  810508:	e0fffd17 	ldw	r3,-12(fp)
  81050c:	e13fff17 	ldw	r4,-4(fp)
  810510:	1905383a 	mul	r2,r3,r4
  810514:	e0fffe17 	ldw	r3,-8(fp)
  810518:	10c5883a 	add	r2,r2,r3
  81051c:	1085883a 	add	r2,r2,r2
  810520:	1007883a 	mov	r3,r2
  810524:	e0bffc17 	ldw	r2,-16(fp)
  810528:	1885883a 	add	r2,r3,r2
  81052c:	e1000117 	ldw	r4,4(fp)
  810530:	1100002d 	sthio	r4,0(r2)
  810534:	00000c06 	br	810568 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  810538:	e0fffd17 	ldw	r3,-12(fp)
  81053c:	e13fff17 	ldw	r4,-4(fp)
  810540:	1905383a 	mul	r2,r3,r4
  810544:	e0fffe17 	ldw	r3,-8(fp)
  810548:	10c5883a 	add	r2,r2,r3
  81054c:	1085883a 	add	r2,r2,r2
  810550:	1085883a 	add	r2,r2,r2
  810554:	1007883a 	mov	r3,r2
  810558:	e0bffc17 	ldw	r2,-16(fp)
  81055c:	1885883a 	add	r2,r3,r2
  810560:	e1000117 	ldw	r4,4(fp)
  810564:	11000035 	stwio	r4,0(r2)
}
  810568:	e037883a 	mov	sp,fp
  81056c:	df000017 	ldw	fp,0(sp)
  810570:	dec00104 	addi	sp,sp,4
  810574:	f800283a 	ret

00810578 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  810578:	deffe404 	addi	sp,sp,-112
  81057c:	dfc01b15 	stw	ra,108(sp)
  810580:	df001a15 	stw	fp,104(sp)
  810584:	df001a04 	addi	fp,sp,104
  810588:	e13fe815 	stw	r4,-96(fp)
  81058c:	e17fe915 	stw	r5,-92(fp)
  810590:	e1bfea15 	stw	r6,-88(fp)
  810594:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  810598:	e0bfe917 	ldw	r2,-92(fp)
  81059c:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  8105a0:	e0ffea17 	ldw	r3,-88(fp)
  8105a4:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  8105a8:	e13feb17 	ldw	r4,-84(fp)
  8105ac:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  8105b0:	e0800217 	ldw	r2,8(fp)
  8105b4:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  8105b8:	e0fff717 	ldw	r3,-36(fp)
  8105bc:	e13ff917 	ldw	r4,-28(fp)
  8105c0:	1905c83a 	sub	r2,r3,r4
  8105c4:	e0bfff15 	stw	r2,-4(fp)
  8105c8:	e0ffff17 	ldw	r3,-4(fp)
  8105cc:	1804403a 	cmpge	r2,r3,zero
  8105d0:	1000031e 	bne	r2,zero,8105e0 <alt_up_pixel_buffer_dma_draw_line+0x68>
  8105d4:	e13fff17 	ldw	r4,-4(fp)
  8105d8:	0109c83a 	sub	r4,zero,r4
  8105dc:	e13fff15 	stw	r4,-4(fp)
  8105e0:	e0fff817 	ldw	r3,-32(fp)
  8105e4:	e13ffa17 	ldw	r4,-24(fp)
  8105e8:	1905c83a 	sub	r2,r3,r4
  8105ec:	e0bffe15 	stw	r2,-8(fp)
  8105f0:	e0fffe17 	ldw	r3,-8(fp)
  8105f4:	1804403a 	cmpge	r2,r3,zero
  8105f8:	1000031e 	bne	r2,zero,810608 <alt_up_pixel_buffer_dma_draw_line+0x90>
  8105fc:	e13ffe17 	ldw	r4,-8(fp)
  810600:	0109c83a 	sub	r4,zero,r4
  810604:	e13ffe15 	stw	r4,-8(fp)
  810608:	e0fffe17 	ldw	r3,-8(fp)
  81060c:	e13fff17 	ldw	r4,-4(fp)
  810610:	1904803a 	cmplt	r2,r3,r4
  810614:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  810618:	e0bfe817 	ldw	r2,-96(fp)
  81061c:	10800e17 	ldw	r2,56(r2)
  810620:	10800060 	cmpeqi	r2,r2,1
  810624:	10000c1e 	bne	r2,zero,810658 <alt_up_pixel_buffer_dma_draw_line+0xe0>
  810628:	e0bfe817 	ldw	r2,-96(fp)
  81062c:	10800e17 	ldw	r2,56(r2)
  810630:	10800098 	cmpnei	r2,r2,2
  810634:	1000031e 	bne	r2,zero,810644 <alt_up_pixel_buffer_dma_draw_line+0xcc>
  810638:	00800044 	movi	r2,1
  81063c:	e0bffc15 	stw	r2,-16(fp)
  810640:	00000206 	br	81064c <alt_up_pixel_buffer_dma_draw_line+0xd4>
  810644:	00c00084 	movi	r3,2
  810648:	e0fffc15 	stw	r3,-16(fp)
  81064c:	e13ffc17 	ldw	r4,-16(fp)
  810650:	e13ffd15 	stw	r4,-12(fp)
  810654:	00000106 	br	81065c <alt_up_pixel_buffer_dma_draw_line+0xe4>
  810658:	e03ffd15 	stw	zero,-12(fp)
  81065c:	e0bffd17 	ldw	r2,-12(fp)
  810660:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  810664:	e0c00317 	ldw	r3,12(fp)
  810668:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  81066c:	e0bfe817 	ldw	r2,-96(fp)
  810670:	10800d17 	ldw	r2,52(r2)
  810674:	1004c03a 	cmpne	r2,r2,zero
  810678:	1000091e 	bne	r2,zero,8106a0 <alt_up_pixel_buffer_dma_draw_line+0x128>
  81067c:	e0bfe817 	ldw	r2,-96(fp)
  810680:	10c01317 	ldw	r3,76(r2)
  810684:	e0bfef17 	ldw	r2,-68(fp)
  810688:	1885c83a 	sub	r2,r3,r2
  81068c:	1007883a 	mov	r3,r2
  810690:	00800044 	movi	r2,1
  810694:	10c4983a 	sll	r2,r2,r3
  810698:	e0bffb15 	stw	r2,-20(fp)
  81069c:	00000306 	br	8106ac <alt_up_pixel_buffer_dma_draw_line+0x134>
  8106a0:	e0bfe817 	ldw	r2,-96(fp)
  8106a4:	10800f17 	ldw	r2,60(r2)
  8106a8:	e0bffb15 	stw	r2,-20(fp)
  8106ac:	e13ffb17 	ldw	r4,-20(fp)
  8106b0:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  8106b4:	e0800417 	ldw	r2,16(fp)
  8106b8:	10800058 	cmpnei	r2,r2,1
  8106bc:	1000041e 	bne	r2,zero,8106d0 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  8106c0:	e0bfe817 	ldw	r2,-96(fp)
  8106c4:	10800c17 	ldw	r2,48(r2)
  8106c8:	e0bfed15 	stw	r2,-76(fp)
  8106cc:	00000306 	br	8106dc <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  8106d0:	e0bfe817 	ldw	r2,-96(fp)
  8106d4:	10800b17 	ldw	r2,44(r2)
  8106d8:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  8106dc:	e0fff603 	ldbu	r3,-40(fp)
  8106e0:	18803fcc 	andi	r2,r3,255
  8106e4:	1080201c 	xori	r2,r2,128
  8106e8:	10bfe004 	addi	r2,r2,-128
  8106ec:	10800050 	cmplti	r2,r2,1
  8106f0:	10000c1e 	bne	r2,zero,810724 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  8106f4:	e13ffa17 	ldw	r4,-24(fp)
  8106f8:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  8106fc:	e0bff917 	ldw	r2,-28(fp)
  810700:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  810704:	e0fff317 	ldw	r3,-52(fp)
  810708:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  81070c:	e13ff817 	ldw	r4,-32(fp)
  810710:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  810714:	e0bff717 	ldw	r2,-36(fp)
  810718:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  81071c:	e0fff317 	ldw	r3,-52(fp)
  810720:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  810724:	e13ff817 	ldw	r4,-32(fp)
  810728:	e0bffa17 	ldw	r2,-24(fp)
  81072c:	20800c0e 	bge	r4,r2,810760 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  810730:	e0fffa17 	ldw	r3,-24(fp)
  810734:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  810738:	e13ff817 	ldw	r4,-32(fp)
  81073c:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  810740:	e0bff317 	ldw	r2,-52(fp)
  810744:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  810748:	e0fff917 	ldw	r3,-28(fp)
  81074c:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  810750:	e13ff717 	ldw	r4,-36(fp)
  810754:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  810758:	e0bff317 	ldw	r2,-52(fp)
  81075c:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  810760:	e0fff817 	ldw	r3,-32(fp)
  810764:	e13ffa17 	ldw	r4,-24(fp)
  810768:	1907c83a 	sub	r3,r3,r4
  81076c:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  810770:	e0fff717 	ldw	r3,-36(fp)
  810774:	e13ff917 	ldw	r4,-28(fp)
  810778:	1905c83a 	sub	r2,r3,r4
  81077c:	e0bff415 	stw	r2,-48(fp)
  810780:	e0fff417 	ldw	r3,-48(fp)
  810784:	1804403a 	cmpge	r2,r3,zero
  810788:	1000031e 	bne	r2,zero,810798 <alt_up_pixel_buffer_dma_draw_line+0x220>
  81078c:	e13ff417 	ldw	r4,-48(fp)
  810790:	0109c83a 	sub	r4,zero,r4
  810794:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  810798:	e0fff517 	ldw	r3,-44(fp)
  81079c:	1804d7fa 	srli	r2,r3,31
  8107a0:	e13ff517 	ldw	r4,-44(fp)
  8107a4:	1105883a 	add	r2,r2,r4
  8107a8:	1005d07a 	srai	r2,r2,1
  8107ac:	0085c83a 	sub	r2,zero,r2
  8107b0:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  8107b4:	e0bff917 	ldw	r2,-28(fp)
  8107b8:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  8107bc:	e0fff917 	ldw	r3,-28(fp)
  8107c0:	e13ff717 	ldw	r4,-36(fp)
  8107c4:	1900030e 	bge	r3,r4,8107d4 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  8107c8:	00800044 	movi	r2,1
  8107cc:	e0bff215 	stw	r2,-56(fp)
  8107d0:	00000206 	br	8107dc <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  8107d4:	00ffffc4 	movi	r3,-1
  8107d8:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  8107dc:	e13ff603 	ldbu	r4,-40(fp)
  8107e0:	20803fcc 	andi	r2,r4,255
  8107e4:	1080201c 	xori	r2,r2,128
  8107e8:	10bfe004 	addi	r2,r2,-128
  8107ec:	10800058 	cmpnei	r2,r2,1
  8107f0:	1000221e 	bne	r2,zero,81087c <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  8107f4:	e0bffa17 	ldw	r2,-24(fp)
  8107f8:	e0bff115 	stw	r2,-60(fp)
  8107fc:	00001b06 	br	81086c <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  810800:	e0ffee17 	ldw	r3,-72(fp)
  810804:	d8c00015 	stw	r3,0(sp)
  810808:	e13fef17 	ldw	r4,-68(fp)
  81080c:	d9000115 	stw	r4,4(sp)
  810810:	e13fed17 	ldw	r4,-76(fp)
  810814:	e17fec17 	ldw	r5,-80(fp)
  810818:	e1bff017 	ldw	r6,-64(fp)
  81081c:	e1fff117 	ldw	r7,-60(fp)
  810820:	08104a80 	call	8104a8 <helper_plot_pixel>
			error = error + deltay;
  810824:	e0bff317 	ldw	r2,-52(fp)
  810828:	e0fff417 	ldw	r3,-48(fp)
  81082c:	10c5883a 	add	r2,r2,r3
  810830:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  810834:	e13ff317 	ldw	r4,-52(fp)
  810838:	20800050 	cmplti	r2,r4,1
  81083c:	1000081e 	bne	r2,zero,810860 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  810840:	e0bff017 	ldw	r2,-64(fp)
  810844:	e0fff217 	ldw	r3,-56(fp)
  810848:	10c5883a 	add	r2,r2,r3
  81084c:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  810850:	e13ff317 	ldw	r4,-52(fp)
  810854:	e0bff517 	ldw	r2,-44(fp)
  810858:	2089c83a 	sub	r4,r4,r2
  81085c:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  810860:	e0fff117 	ldw	r3,-60(fp)
  810864:	18c00044 	addi	r3,r3,1
  810868:	e0fff115 	stw	r3,-60(fp)
  81086c:	e13ff817 	ldw	r4,-32(fp)
  810870:	e0bff117 	ldw	r2,-60(fp)
  810874:	20bfe20e 	bge	r4,r2,810800 <alt_up_pixel_buffer_dma_draw_line+0x288>
  810878:	00002106 	br	810900 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  81087c:	e0fffa17 	ldw	r3,-24(fp)
  810880:	e0fff115 	stw	r3,-60(fp)
  810884:	00001b06 	br	8108f4 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  810888:	e13fee17 	ldw	r4,-72(fp)
  81088c:	d9000015 	stw	r4,0(sp)
  810890:	e0bfef17 	ldw	r2,-68(fp)
  810894:	d8800115 	stw	r2,4(sp)
  810898:	e13fed17 	ldw	r4,-76(fp)
  81089c:	e17fec17 	ldw	r5,-80(fp)
  8108a0:	e1bff117 	ldw	r6,-60(fp)
  8108a4:	e1fff017 	ldw	r7,-64(fp)
  8108a8:	08104a80 	call	8104a8 <helper_plot_pixel>
			error = error + deltay;
  8108ac:	e0fff317 	ldw	r3,-52(fp)
  8108b0:	e13ff417 	ldw	r4,-48(fp)
  8108b4:	1907883a 	add	r3,r3,r4
  8108b8:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  8108bc:	e0fff317 	ldw	r3,-52(fp)
  8108c0:	18800050 	cmplti	r2,r3,1
  8108c4:	1000081e 	bne	r2,zero,8108e8 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  8108c8:	e13ff017 	ldw	r4,-64(fp)
  8108cc:	e0bff217 	ldw	r2,-56(fp)
  8108d0:	2089883a 	add	r4,r4,r2
  8108d4:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  8108d8:	e0fff317 	ldw	r3,-52(fp)
  8108dc:	e13ff517 	ldw	r4,-44(fp)
  8108e0:	1907c83a 	sub	r3,r3,r4
  8108e4:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  8108e8:	e0bff117 	ldw	r2,-60(fp)
  8108ec:	10800044 	addi	r2,r2,1
  8108f0:	e0bff115 	stw	r2,-60(fp)
  8108f4:	e0fff817 	ldw	r3,-32(fp)
  8108f8:	e13ff117 	ldw	r4,-60(fp)
  8108fc:	193fe20e 	bge	r3,r4,810888 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  810900:	e037883a 	mov	sp,fp
  810904:	dfc00117 	ldw	ra,4(sp)
  810908:	df000017 	ldw	fp,0(sp)
  81090c:	dec00204 	addi	sp,sp,8
  810910:	f800283a 	ret

00810914 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  810914:	defff404 	addi	sp,sp,-48
  810918:	df000b15 	stw	fp,44(sp)
  81091c:	df000b04 	addi	fp,sp,44
  810920:	e13ffb15 	stw	r4,-20(fp)
  810924:	e17ffc15 	stw	r5,-16(fp)
  810928:	e1bffd15 	stw	r6,-12(fp)
  81092c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  810930:	e03ff915 	stw	zero,-28(fp)
  810934:	00802074 	movhi	r2,129
  810938:	1096f404 	addi	r2,r2,23504
  81093c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  810940:	1005003a 	cmpeq	r2,r2,zero
  810944:	1000411e 	bne	r2,zero,810a4c <alt_alarm_start+0x138>
  {
    if (alarm)
  810948:	e0bffb17 	ldw	r2,-20(fp)
  81094c:	1005003a 	cmpeq	r2,r2,zero
  810950:	10003b1e 	bne	r2,zero,810a40 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  810954:	e0fffb17 	ldw	r3,-20(fp)
  810958:	e0bffd17 	ldw	r2,-12(fp)
  81095c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  810960:	e0fffb17 	ldw	r3,-20(fp)
  810964:	e0bffe17 	ldw	r2,-8(fp)
  810968:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81096c:	0005303a 	rdctl	r2,status
  810970:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810974:	e0fff817 	ldw	r3,-32(fp)
  810978:	00bfff84 	movi	r2,-2
  81097c:	1884703a 	and	r2,r3,r2
  810980:	1001703a 	wrctl	status,r2
  
  return context;
  810984:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  810988:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81098c:	00802074 	movhi	r2,129
  810990:	1096f504 	addi	r2,r2,23508
  810994:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  810998:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81099c:	e0fffc17 	ldw	r3,-16(fp)
  8109a0:	e0bff917 	ldw	r2,-28(fp)
  8109a4:	1885883a 	add	r2,r3,r2
  8109a8:	10c00044 	addi	r3,r2,1
  8109ac:	e0bffb17 	ldw	r2,-20(fp)
  8109b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8109b4:	e0bffb17 	ldw	r2,-20(fp)
  8109b8:	10c00217 	ldw	r3,8(r2)
  8109bc:	e0bff917 	ldw	r2,-28(fp)
  8109c0:	1880042e 	bgeu	r3,r2,8109d4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  8109c4:	e0fffb17 	ldw	r3,-20(fp)
  8109c8:	00800044 	movi	r2,1
  8109cc:	18800405 	stb	r2,16(r3)
  8109d0:	00000206 	br	8109dc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  8109d4:	e0bffb17 	ldw	r2,-20(fp)
  8109d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8109dc:	e0fffb17 	ldw	r3,-20(fp)
  8109e0:	00802074 	movhi	r2,129
  8109e4:	108fe404 	addi	r2,r2,16272
  8109e8:	e0bff615 	stw	r2,-40(fp)
  8109ec:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8109f0:	e0fff717 	ldw	r3,-36(fp)
  8109f4:	e0bff617 	ldw	r2,-40(fp)
  8109f8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8109fc:	e0bff617 	ldw	r2,-40(fp)
  810a00:	10c00017 	ldw	r3,0(r2)
  810a04:	e0bff717 	ldw	r2,-36(fp)
  810a08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810a0c:	e0bff617 	ldw	r2,-40(fp)
  810a10:	10c00017 	ldw	r3,0(r2)
  810a14:	e0bff717 	ldw	r2,-36(fp)
  810a18:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  810a1c:	e0fff617 	ldw	r3,-40(fp)
  810a20:	e0bff717 	ldw	r2,-36(fp)
  810a24:	18800015 	stw	r2,0(r3)
  810a28:	e0bffa17 	ldw	r2,-24(fp)
  810a2c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810a30:	e0bff517 	ldw	r2,-44(fp)
  810a34:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  810a38:	e03fff15 	stw	zero,-4(fp)
  810a3c:	00000506 	br	810a54 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  810a40:	00bffa84 	movi	r2,-22
  810a44:	e0bfff15 	stw	r2,-4(fp)
  810a48:	00000206 	br	810a54 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  810a4c:	00bfde84 	movi	r2,-134
  810a50:	e0bfff15 	stw	r2,-4(fp)
  810a54:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  810a58:	e037883a 	mov	sp,fp
  810a5c:	df000017 	ldw	fp,0(sp)
  810a60:	dec00104 	addi	sp,sp,4
  810a64:	f800283a 	ret

00810a68 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  810a68:	defffe04 	addi	sp,sp,-8
  810a6c:	df000115 	stw	fp,4(sp)
  810a70:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  810a74:	e03fff15 	stw	zero,-4(fp)
  810a78:	00000506 	br	810a90 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  810a7c:	e0bfff17 	ldw	r2,-4(fp)
  810a80:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  810a84:	e0bfff17 	ldw	r2,-4(fp)
  810a88:	10800804 	addi	r2,r2,32
  810a8c:	e0bfff15 	stw	r2,-4(fp)
  810a90:	e0bfff17 	ldw	r2,-4(fp)
  810a94:	10810030 	cmpltui	r2,r2,1024
  810a98:	103ff81e 	bne	r2,zero,810a7c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  810a9c:	e037883a 	mov	sp,fp
  810aa0:	df000017 	ldw	fp,0(sp)
  810aa4:	dec00104 	addi	sp,sp,4
  810aa8:	f800283a 	ret

00810aac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  810aac:	defff904 	addi	sp,sp,-28
  810ab0:	dfc00615 	stw	ra,24(sp)
  810ab4:	df000515 	stw	fp,20(sp)
  810ab8:	df000504 	addi	fp,sp,20
  810abc:	e13ffd15 	stw	r4,-12(fp)
  810ac0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  810ac4:	e0bffd17 	ldw	r2,-12(fp)
  810ac8:	1005003a 	cmpeq	r2,r2,zero
  810acc:	1000041e 	bne	r2,zero,810ae0 <alt_dev_llist_insert+0x34>
  810ad0:	e0bffd17 	ldw	r2,-12(fp)
  810ad4:	10800217 	ldw	r2,8(r2)
  810ad8:	1004c03a 	cmpne	r2,r2,zero
  810adc:	1000071e 	bne	r2,zero,810afc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  810ae0:	0810b600 	call	810b60 <alt_get_errno>
  810ae4:	1007883a 	mov	r3,r2
  810ae8:	00800584 	movi	r2,22
  810aec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  810af0:	00bffa84 	movi	r2,-22
  810af4:	e0bfff15 	stw	r2,-4(fp)
  810af8:	00001306 	br	810b48 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  810afc:	e0fffd17 	ldw	r3,-12(fp)
  810b00:	e0bffe17 	ldw	r2,-8(fp)
  810b04:	e0bffb15 	stw	r2,-20(fp)
  810b08:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810b0c:	e0fffc17 	ldw	r3,-16(fp)
  810b10:	e0bffb17 	ldw	r2,-20(fp)
  810b14:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  810b18:	e0bffb17 	ldw	r2,-20(fp)
  810b1c:	10c00017 	ldw	r3,0(r2)
  810b20:	e0bffc17 	ldw	r2,-16(fp)
  810b24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810b28:	e0bffb17 	ldw	r2,-20(fp)
  810b2c:	10c00017 	ldw	r3,0(r2)
  810b30:	e0bffc17 	ldw	r2,-16(fp)
  810b34:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  810b38:	e0fffb17 	ldw	r3,-20(fp)
  810b3c:	e0bffc17 	ldw	r2,-16(fp)
  810b40:	18800015 	stw	r2,0(r3)

  return 0;  
  810b44:	e03fff15 	stw	zero,-4(fp)
  810b48:	e0bfff17 	ldw	r2,-4(fp)
}
  810b4c:	e037883a 	mov	sp,fp
  810b50:	dfc00117 	ldw	ra,4(sp)
  810b54:	df000017 	ldw	fp,0(sp)
  810b58:	dec00204 	addi	sp,sp,8
  810b5c:	f800283a 	ret

00810b60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810b60:	defffd04 	addi	sp,sp,-12
  810b64:	dfc00215 	stw	ra,8(sp)
  810b68:	df000115 	stw	fp,4(sp)
  810b6c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810b70:	00802074 	movhi	r2,129
  810b74:	108fdd04 	addi	r2,r2,16244
  810b78:	10800017 	ldw	r2,0(r2)
  810b7c:	1005003a 	cmpeq	r2,r2,zero
  810b80:	1000061e 	bne	r2,zero,810b9c <alt_get_errno+0x3c>
  810b84:	00802074 	movhi	r2,129
  810b88:	108fdd04 	addi	r2,r2,16244
  810b8c:	10800017 	ldw	r2,0(r2)
  810b90:	103ee83a 	callr	r2
  810b94:	e0bfff15 	stw	r2,-4(fp)
  810b98:	00000306 	br	810ba8 <alt_get_errno+0x48>
  810b9c:	00802074 	movhi	r2,129
  810ba0:	1096ef04 	addi	r2,r2,23484
  810ba4:	e0bfff15 	stw	r2,-4(fp)
  810ba8:	e0bfff17 	ldw	r2,-4(fp)
}
  810bac:	e037883a 	mov	sp,fp
  810bb0:	dfc00117 	ldw	ra,4(sp)
  810bb4:	df000017 	ldw	fp,0(sp)
  810bb8:	dec00204 	addi	sp,sp,8
  810bbc:	f800283a 	ret

00810bc0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  810bc0:	defffd04 	addi	sp,sp,-12
  810bc4:	dfc00215 	stw	ra,8(sp)
  810bc8:	df000115 	stw	fp,4(sp)
  810bcc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  810bd0:	00bfff04 	movi	r2,-4
  810bd4:	00c02074 	movhi	r3,129
  810bd8:	18c78f04 	addi	r3,r3,7740
  810bdc:	1885883a 	add	r2,r3,r2
  810be0:	e0bfff15 	stw	r2,-4(fp)
  810be4:	00000606 	br	810c00 <_do_ctors+0x40>
        (*ctor) (); 
  810be8:	e0bfff17 	ldw	r2,-4(fp)
  810bec:	10800017 	ldw	r2,0(r2)
  810bf0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  810bf4:	e0bfff17 	ldw	r2,-4(fp)
  810bf8:	10bfff04 	addi	r2,r2,-4
  810bfc:	e0bfff15 	stw	r2,-4(fp)
  810c00:	e0ffff17 	ldw	r3,-4(fp)
  810c04:	00802074 	movhi	r2,129
  810c08:	10878e04 	addi	r2,r2,7736
  810c0c:	18bff62e 	bgeu	r3,r2,810be8 <_do_ctors+0x28>
        (*ctor) (); 
}
  810c10:	e037883a 	mov	sp,fp
  810c14:	dfc00117 	ldw	ra,4(sp)
  810c18:	df000017 	ldw	fp,0(sp)
  810c1c:	dec00204 	addi	sp,sp,8
  810c20:	f800283a 	ret

00810c24 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  810c24:	defffd04 	addi	sp,sp,-12
  810c28:	dfc00215 	stw	ra,8(sp)
  810c2c:	df000115 	stw	fp,4(sp)
  810c30:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  810c34:	00bfff04 	movi	r2,-4
  810c38:	00c02074 	movhi	r3,129
  810c3c:	18c78f04 	addi	r3,r3,7740
  810c40:	1885883a 	add	r2,r3,r2
  810c44:	e0bfff15 	stw	r2,-4(fp)
  810c48:	00000606 	br	810c64 <_do_dtors+0x40>
        (*dtor) (); 
  810c4c:	e0bfff17 	ldw	r2,-4(fp)
  810c50:	10800017 	ldw	r2,0(r2)
  810c54:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  810c58:	e0bfff17 	ldw	r2,-4(fp)
  810c5c:	10bfff04 	addi	r2,r2,-4
  810c60:	e0bfff15 	stw	r2,-4(fp)
  810c64:	e0ffff17 	ldw	r3,-4(fp)
  810c68:	00802074 	movhi	r2,129
  810c6c:	10878f04 	addi	r2,r2,7740
  810c70:	18bff62e 	bgeu	r3,r2,810c4c <_do_dtors+0x28>
        (*dtor) (); 
}
  810c74:	e037883a 	mov	sp,fp
  810c78:	dfc00117 	ldw	ra,4(sp)
  810c7c:	df000017 	ldw	fp,0(sp)
  810c80:	dec00204 	addi	sp,sp,8
  810c84:	f800283a 	ret

00810c88 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  810c88:	defff904 	addi	sp,sp,-28
  810c8c:	dfc00615 	stw	ra,24(sp)
  810c90:	df000515 	stw	fp,20(sp)
  810c94:	df000504 	addi	fp,sp,20
  810c98:	e13ffd15 	stw	r4,-12(fp)
  810c9c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  810ca0:	e0bffe17 	ldw	r2,-8(fp)
  810ca4:	10800017 	ldw	r2,0(r2)
  810ca8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  810cac:	e13ffd17 	ldw	r4,-12(fp)
  810cb0:	0803dec0 	call	803dec <strlen>
  810cb4:	10800044 	addi	r2,r2,1
  810cb8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  810cbc:	00000d06 	br	810cf4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  810cc0:	e0bffc17 	ldw	r2,-16(fp)
  810cc4:	11000217 	ldw	r4,8(r2)
  810cc8:	e1bffb17 	ldw	r6,-20(fp)
  810ccc:	e17ffd17 	ldw	r5,-12(fp)
  810cd0:	08119200 	call	811920 <memcmp>
  810cd4:	1004c03a 	cmpne	r2,r2,zero
  810cd8:	1000031e 	bne	r2,zero,810ce8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  810cdc:	e0bffc17 	ldw	r2,-16(fp)
  810ce0:	e0bfff15 	stw	r2,-4(fp)
  810ce4:	00000706 	br	810d04 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  810ce8:	e0bffc17 	ldw	r2,-16(fp)
  810cec:	10800017 	ldw	r2,0(r2)
  810cf0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  810cf4:	e0fffe17 	ldw	r3,-8(fp)
  810cf8:	e0bffc17 	ldw	r2,-16(fp)
  810cfc:	10fff01e 	bne	r2,r3,810cc0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  810d00:	e03fff15 	stw	zero,-4(fp)
  810d04:	e0bfff17 	ldw	r2,-4(fp)
}
  810d08:	e037883a 	mov	sp,fp
  810d0c:	dfc00117 	ldw	ra,4(sp)
  810d10:	df000017 	ldw	fp,0(sp)
  810d14:	dec00204 	addi	sp,sp,8
  810d18:	f800283a 	ret

00810d1c <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
  810d1c:	defffb04 	addi	sp,sp,-20
  810d20:	df000415 	stw	fp,16(sp)
  810d24:	df000404 	addi	fp,sp,16
  810d28:	e13ffe15 	stw	r4,-8(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
  810d2c:	e0bffe17 	ldw	r2,-8(fp)
  810d30:	10800217 	ldw	r2,8(r2)
  810d34:	1004c03a 	cmpne	r2,r2,zero
  810d38:	1000031e 	bne	r2,zero,810d48 <alt_fs_reg+0x2c>
  {
    return -ENODEV;
  810d3c:	00bffb44 	movi	r2,-19
  810d40:	e0bfff15 	stw	r2,-4(fp)
  810d44:	00001406 	br	810d98 <alt_fs_reg+0x7c>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
  810d48:	e0fffe17 	ldw	r3,-8(fp)
  810d4c:	00802074 	movhi	r2,129
  810d50:	108fd804 	addi	r2,r2,16224
  810d54:	e0bffc15 	stw	r2,-16(fp)
  810d58:	e0fffd15 	stw	r3,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810d5c:	e0fffd17 	ldw	r3,-12(fp)
  810d60:	e0bffc17 	ldw	r2,-16(fp)
  810d64:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  810d68:	e0bffc17 	ldw	r2,-16(fp)
  810d6c:	10c00017 	ldw	r3,0(r2)
  810d70:	e0bffd17 	ldw	r2,-12(fp)
  810d74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810d78:	e0bffc17 	ldw	r2,-16(fp)
  810d7c:	10c00017 	ldw	r3,0(r2)
  810d80:	e0bffd17 	ldw	r2,-12(fp)
  810d84:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  810d88:	e0fffc17 	ldw	r3,-16(fp)
  810d8c:	e0bffd17 	ldw	r2,-12(fp)
  810d90:	18800015 	stw	r2,0(r3)

  return 0;
  810d94:	e03fff15 	stw	zero,-4(fp)
  810d98:	e0bfff17 	ldw	r2,-4(fp)
} 
  810d9c:	e037883a 	mov	sp,fp
  810da0:	df000017 	ldw	fp,0(sp)
  810da4:	dec00104 	addi	sp,sp,4
  810da8:	f800283a 	ret

00810dac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  810dac:	defffe04 	addi	sp,sp,-8
  810db0:	dfc00115 	stw	ra,4(sp)
  810db4:	df000015 	stw	fp,0(sp)
  810db8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  810dbc:	0009883a 	mov	r4,zero
  810dc0:	01440004 	movi	r5,4096
  810dc4:	08118440 	call	811844 <alt_icache_flush>
#endif
}
  810dc8:	e037883a 	mov	sp,fp
  810dcc:	dfc00117 	ldw	ra,4(sp)
  810dd0:	df000017 	ldw	fp,0(sp)
  810dd4:	dec00204 	addi	sp,sp,8
  810dd8:	f800283a 	ret

00810ddc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  810ddc:	defff904 	addi	sp,sp,-28
  810de0:	dfc00615 	stw	ra,24(sp)
  810de4:	df000515 	stw	fp,20(sp)
  810de8:	df000504 	addi	fp,sp,20
  810dec:	e13ffc15 	stw	r4,-16(fp)
  810df0:	e17ffd15 	stw	r5,-12(fp)
  810df4:	e1bffe15 	stw	r6,-8(fp)
  810df8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  810dfc:	e0800217 	ldw	r2,8(fp)
  810e00:	d8800015 	stw	r2,0(sp)
  810e04:	e13ffc17 	ldw	r4,-16(fp)
  810e08:	e17ffd17 	ldw	r5,-12(fp)
  810e0c:	e1bffe17 	ldw	r6,-8(fp)
  810e10:	e1ffff17 	ldw	r7,-4(fp)
  810e14:	0810fb00 	call	810fb0 <alt_iic_isr_register>
}  
  810e18:	e037883a 	mov	sp,fp
  810e1c:	dfc00117 	ldw	ra,4(sp)
  810e20:	df000017 	ldw	fp,0(sp)
  810e24:	dec00204 	addi	sp,sp,8
  810e28:	f800283a 	ret

00810e2c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  810e2c:	defff904 	addi	sp,sp,-28
  810e30:	df000615 	stw	fp,24(sp)
  810e34:	df000604 	addi	fp,sp,24
  810e38:	e13ffe15 	stw	r4,-8(fp)
  810e3c:	e17fff15 	stw	r5,-4(fp)
  810e40:	e0bfff17 	ldw	r2,-4(fp)
  810e44:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810e48:	0005303a 	rdctl	r2,status
  810e4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810e50:	e0fffb17 	ldw	r3,-20(fp)
  810e54:	00bfff84 	movi	r2,-2
  810e58:	1884703a 	and	r2,r3,r2
  810e5c:	1001703a 	wrctl	status,r2
  
  return context;
  810e60:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810e64:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  810e68:	e0fffc17 	ldw	r3,-16(fp)
  810e6c:	00800044 	movi	r2,1
  810e70:	10c4983a 	sll	r2,r2,r3
  810e74:	1007883a 	mov	r3,r2
  810e78:	00802074 	movhi	r2,129
  810e7c:	1096f304 	addi	r2,r2,23500
  810e80:	10800017 	ldw	r2,0(r2)
  810e84:	1886b03a 	or	r3,r3,r2
  810e88:	00802074 	movhi	r2,129
  810e8c:	1096f304 	addi	r2,r2,23500
  810e90:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810e94:	00802074 	movhi	r2,129
  810e98:	1096f304 	addi	r2,r2,23500
  810e9c:	10800017 	ldw	r2,0(r2)
  810ea0:	100170fa 	wrctl	ienable,r2
  810ea4:	e0bffd17 	ldw	r2,-12(fp)
  810ea8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810eac:	e0bffa17 	ldw	r2,-24(fp)
  810eb0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810eb4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  810eb8:	e037883a 	mov	sp,fp
  810ebc:	df000017 	ldw	fp,0(sp)
  810ec0:	dec00104 	addi	sp,sp,4
  810ec4:	f800283a 	ret

00810ec8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  810ec8:	defff904 	addi	sp,sp,-28
  810ecc:	df000615 	stw	fp,24(sp)
  810ed0:	df000604 	addi	fp,sp,24
  810ed4:	e13ffe15 	stw	r4,-8(fp)
  810ed8:	e17fff15 	stw	r5,-4(fp)
  810edc:	e0bfff17 	ldw	r2,-4(fp)
  810ee0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810ee4:	0005303a 	rdctl	r2,status
  810ee8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810eec:	e0fffb17 	ldw	r3,-20(fp)
  810ef0:	00bfff84 	movi	r2,-2
  810ef4:	1884703a 	and	r2,r3,r2
  810ef8:	1001703a 	wrctl	status,r2
  
  return context;
  810efc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810f00:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  810f04:	e0fffc17 	ldw	r3,-16(fp)
  810f08:	00800044 	movi	r2,1
  810f0c:	10c4983a 	sll	r2,r2,r3
  810f10:	0084303a 	nor	r2,zero,r2
  810f14:	1007883a 	mov	r3,r2
  810f18:	00802074 	movhi	r2,129
  810f1c:	1096f304 	addi	r2,r2,23500
  810f20:	10800017 	ldw	r2,0(r2)
  810f24:	1886703a 	and	r3,r3,r2
  810f28:	00802074 	movhi	r2,129
  810f2c:	1096f304 	addi	r2,r2,23500
  810f30:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810f34:	00802074 	movhi	r2,129
  810f38:	1096f304 	addi	r2,r2,23500
  810f3c:	10800017 	ldw	r2,0(r2)
  810f40:	100170fa 	wrctl	ienable,r2
  810f44:	e0bffd17 	ldw	r2,-12(fp)
  810f48:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810f4c:	e0bffa17 	ldw	r2,-24(fp)
  810f50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810f54:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  810f58:	e037883a 	mov	sp,fp
  810f5c:	df000017 	ldw	fp,0(sp)
  810f60:	dec00104 	addi	sp,sp,4
  810f64:	f800283a 	ret

00810f68 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  810f68:	defffc04 	addi	sp,sp,-16
  810f6c:	df000315 	stw	fp,12(sp)
  810f70:	df000304 	addi	fp,sp,12
  810f74:	e13ffe15 	stw	r4,-8(fp)
  810f78:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  810f7c:	000530fa 	rdctl	r2,ienable
  810f80:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  810f84:	e0ffff17 	ldw	r3,-4(fp)
  810f88:	00800044 	movi	r2,1
  810f8c:	10c4983a 	sll	r2,r2,r3
  810f90:	1007883a 	mov	r3,r2
  810f94:	e0bffd17 	ldw	r2,-12(fp)
  810f98:	1884703a 	and	r2,r3,r2
  810f9c:	1004c03a 	cmpne	r2,r2,zero
}
  810fa0:	e037883a 	mov	sp,fp
  810fa4:	df000017 	ldw	fp,0(sp)
  810fa8:	dec00104 	addi	sp,sp,4
  810fac:	f800283a 	ret

00810fb0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  810fb0:	defff404 	addi	sp,sp,-48
  810fb4:	dfc00b15 	stw	ra,44(sp)
  810fb8:	df000a15 	stw	fp,40(sp)
  810fbc:	df000a04 	addi	fp,sp,40
  810fc0:	e13ffb15 	stw	r4,-20(fp)
  810fc4:	e17ffc15 	stw	r5,-16(fp)
  810fc8:	e1bffd15 	stw	r6,-12(fp)
  810fcc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  810fd0:	00bffa84 	movi	r2,-22
  810fd4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  810fd8:	e0bffc17 	ldw	r2,-16(fp)
  810fdc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  810fe0:	e0bff917 	ldw	r2,-28(fp)
  810fe4:	10800808 	cmpgei	r2,r2,32
  810fe8:	1000291e 	bne	r2,zero,811090 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810fec:	0005303a 	rdctl	r2,status
  810ff0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810ff4:	e0fff717 	ldw	r3,-36(fp)
  810ff8:	00bfff84 	movi	r2,-2
  810ffc:	1884703a 	and	r2,r3,r2
  811000:	1001703a 	wrctl	status,r2
  
  return context;
  811004:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  811008:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  81100c:	e0bff917 	ldw	r2,-28(fp)
  811010:	00c02074 	movhi	r3,129
  811014:	18d70004 	addi	r3,r3,23552
  811018:	100490fa 	slli	r2,r2,3
  81101c:	10c7883a 	add	r3,r2,r3
  811020:	e0bffd17 	ldw	r2,-12(fp)
  811024:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  811028:	e0bff917 	ldw	r2,-28(fp)
  81102c:	00c02074 	movhi	r3,129
  811030:	18d70004 	addi	r3,r3,23552
  811034:	100490fa 	slli	r2,r2,3
  811038:	10c5883a 	add	r2,r2,r3
  81103c:	10c00104 	addi	r3,r2,4
  811040:	e0bffe17 	ldw	r2,-8(fp)
  811044:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  811048:	e0bffd17 	ldw	r2,-12(fp)
  81104c:	1005003a 	cmpeq	r2,r2,zero
  811050:	1000051e 	bne	r2,zero,811068 <alt_iic_isr_register+0xb8>
  811054:	e17ff917 	ldw	r5,-28(fp)
  811058:	e13ffb17 	ldw	r4,-20(fp)
  81105c:	0810e2c0 	call	810e2c <alt_ic_irq_enable>
  811060:	e0bfff15 	stw	r2,-4(fp)
  811064:	00000406 	br	811078 <alt_iic_isr_register+0xc8>
  811068:	e17ff917 	ldw	r5,-28(fp)
  81106c:	e13ffb17 	ldw	r4,-20(fp)
  811070:	0810ec80 	call	810ec8 <alt_ic_irq_disable>
  811074:	e0bfff15 	stw	r2,-4(fp)
  811078:	e0bfff17 	ldw	r2,-4(fp)
  81107c:	e0bffa15 	stw	r2,-24(fp)
  811080:	e0bff817 	ldw	r2,-32(fp)
  811084:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811088:	e0bff617 	ldw	r2,-40(fp)
  81108c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  811090:	e0bffa17 	ldw	r2,-24(fp)
}
  811094:	e037883a 	mov	sp,fp
  811098:	dfc00117 	ldw	ra,4(sp)
  81109c:	df000017 	ldw	fp,0(sp)
  8110a0:	dec00204 	addi	sp,sp,8
  8110a4:	f800283a 	ret

008110a8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8110a8:	defff904 	addi	sp,sp,-28
  8110ac:	dfc00615 	stw	ra,24(sp)
  8110b0:	df000515 	stw	fp,20(sp)
  8110b4:	df000504 	addi	fp,sp,20
  8110b8:	e13ffc15 	stw	r4,-16(fp)
  8110bc:	e17ffd15 	stw	r5,-12(fp)
  8110c0:	e1bffe15 	stw	r6,-8(fp)
  8110c4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8110c8:	e13ffd17 	ldw	r4,-12(fp)
  8110cc:	e17ffe17 	ldw	r5,-8(fp)
  8110d0:	e1bfff17 	ldw	r6,-4(fp)
  8110d4:	08112c00 	call	8112c0 <open>
  8110d8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8110dc:	e0bffb17 	ldw	r2,-20(fp)
  8110e0:	1004803a 	cmplt	r2,r2,zero
  8110e4:	10001c1e 	bne	r2,zero,811158 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  8110e8:	e0bffb17 	ldw	r2,-20(fp)
  8110ec:	00c02074 	movhi	r3,129
  8110f0:	18caf304 	addi	r3,r3,11212
  8110f4:	10800324 	muli	r2,r2,12
  8110f8:	10c5883a 	add	r2,r2,r3
  8110fc:	10c00017 	ldw	r3,0(r2)
  811100:	e0bffc17 	ldw	r2,-16(fp)
  811104:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  811108:	e0bffb17 	ldw	r2,-20(fp)
  81110c:	00c02074 	movhi	r3,129
  811110:	18caf304 	addi	r3,r3,11212
  811114:	10800324 	muli	r2,r2,12
  811118:	10c5883a 	add	r2,r2,r3
  81111c:	10800104 	addi	r2,r2,4
  811120:	10c00017 	ldw	r3,0(r2)
  811124:	e0bffc17 	ldw	r2,-16(fp)
  811128:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81112c:	e0bffb17 	ldw	r2,-20(fp)
  811130:	00c02074 	movhi	r3,129
  811134:	18caf304 	addi	r3,r3,11212
  811138:	10800324 	muli	r2,r2,12
  81113c:	10c5883a 	add	r2,r2,r3
  811140:	10800204 	addi	r2,r2,8
  811144:	10c00017 	ldw	r3,0(r2)
  811148:	e0bffc17 	ldw	r2,-16(fp)
  81114c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  811150:	e13ffb17 	ldw	r4,-20(fp)
  811154:	080ce380 	call	80ce38 <alt_release_fd>
  }
} 
  811158:	e037883a 	mov	sp,fp
  81115c:	dfc00117 	ldw	ra,4(sp)
  811160:	df000017 	ldw	fp,0(sp)
  811164:	dec00204 	addi	sp,sp,8
  811168:	f800283a 	ret

0081116c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81116c:	defffb04 	addi	sp,sp,-20
  811170:	dfc00415 	stw	ra,16(sp)
  811174:	df000315 	stw	fp,12(sp)
  811178:	df000304 	addi	fp,sp,12
  81117c:	e13ffd15 	stw	r4,-12(fp)
  811180:	e17ffe15 	stw	r5,-8(fp)
  811184:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  811188:	01002074 	movhi	r4,129
  81118c:	210af604 	addi	r4,r4,11224
  811190:	e17ffd17 	ldw	r5,-12(fp)
  811194:	01800044 	movi	r6,1
  811198:	01c07fc4 	movi	r7,511
  81119c:	08110a80 	call	8110a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8111a0:	01002074 	movhi	r4,129
  8111a4:	210af304 	addi	r4,r4,11212
  8111a8:	e17ffe17 	ldw	r5,-8(fp)
  8111ac:	000d883a 	mov	r6,zero
  8111b0:	01c07fc4 	movi	r7,511
  8111b4:	08110a80 	call	8110a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8111b8:	01002074 	movhi	r4,129
  8111bc:	210af904 	addi	r4,r4,11236
  8111c0:	e17fff17 	ldw	r5,-4(fp)
  8111c4:	01800044 	movi	r6,1
  8111c8:	01c07fc4 	movi	r7,511
  8111cc:	08110a80 	call	8110a8 <alt_open_fd>
}  
  8111d0:	e037883a 	mov	sp,fp
  8111d4:	dfc00117 	ldw	ra,4(sp)
  8111d8:	df000017 	ldw	fp,0(sp)
  8111dc:	dec00204 	addi	sp,sp,8
  8111e0:	f800283a 	ret

008111e4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8111e4:	defffc04 	addi	sp,sp,-16
  8111e8:	df000315 	stw	fp,12(sp)
  8111ec:	df000304 	addi	fp,sp,12
  8111f0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8111f4:	e0bffe17 	ldw	r2,-8(fp)
  8111f8:	10800217 	ldw	r2,8(r2)
  8111fc:	10d00034 	orhi	r3,r2,16384
  811200:	e0bffe17 	ldw	r2,-8(fp)
  811204:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  811208:	e03ffd15 	stw	zero,-12(fp)
  81120c:	00002006 	br	811290 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  811210:	e0bffd17 	ldw	r2,-12(fp)
  811214:	00c02074 	movhi	r3,129
  811218:	18caf304 	addi	r3,r3,11212
  81121c:	10800324 	muli	r2,r2,12
  811220:	10c5883a 	add	r2,r2,r3
  811224:	10c00017 	ldw	r3,0(r2)
  811228:	e0bffe17 	ldw	r2,-8(fp)
  81122c:	10800017 	ldw	r2,0(r2)
  811230:	1880141e 	bne	r3,r2,811284 <alt_file_locked+0xa0>
  811234:	e0bffd17 	ldw	r2,-12(fp)
  811238:	00c02074 	movhi	r3,129
  81123c:	18caf304 	addi	r3,r3,11212
  811240:	10800324 	muli	r2,r2,12
  811244:	10c5883a 	add	r2,r2,r3
  811248:	10800204 	addi	r2,r2,8
  81124c:	10800017 	ldw	r2,0(r2)
  811250:	1004403a 	cmpge	r2,r2,zero
  811254:	10000b1e 	bne	r2,zero,811284 <alt_file_locked+0xa0>
  811258:	e0bffd17 	ldw	r2,-12(fp)
  81125c:	10800324 	muli	r2,r2,12
  811260:	1007883a 	mov	r3,r2
  811264:	00802074 	movhi	r2,129
  811268:	108af304 	addi	r2,r2,11212
  81126c:	1887883a 	add	r3,r3,r2
  811270:	e0bffe17 	ldw	r2,-8(fp)
  811274:	18800326 	beq	r3,r2,811284 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  811278:	00bffcc4 	movi	r2,-13
  81127c:	e0bfff15 	stw	r2,-4(fp)
  811280:	00000a06 	br	8112ac <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  811284:	e0bffd17 	ldw	r2,-12(fp)
  811288:	10800044 	addi	r2,r2,1
  81128c:	e0bffd15 	stw	r2,-12(fp)
  811290:	00802074 	movhi	r2,129
  811294:	108fdc04 	addi	r2,r2,16240
  811298:	10800017 	ldw	r2,0(r2)
  81129c:	1007883a 	mov	r3,r2
  8112a0:	e0bffd17 	ldw	r2,-12(fp)
  8112a4:	18bfda2e 	bgeu	r3,r2,811210 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8112a8:	e03fff15 	stw	zero,-4(fp)
  8112ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8112b0:	e037883a 	mov	sp,fp
  8112b4:	df000017 	ldw	fp,0(sp)
  8112b8:	dec00104 	addi	sp,sp,4
  8112bc:	f800283a 	ret

008112c0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8112c0:	defff404 	addi	sp,sp,-48
  8112c4:	dfc00b15 	stw	ra,44(sp)
  8112c8:	df000a15 	stw	fp,40(sp)
  8112cc:	df000a04 	addi	fp,sp,40
  8112d0:	e13ffb15 	stw	r4,-20(fp)
  8112d4:	e17ffc15 	stw	r5,-16(fp)
  8112d8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8112dc:	00bfffc4 	movi	r2,-1
  8112e0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  8112e4:	00bffb44 	movi	r2,-19
  8112e8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  8112ec:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8112f0:	e13ffb17 	ldw	r4,-20(fp)
  8112f4:	01402074 	movhi	r5,129
  8112f8:	294fda04 	addi	r5,r5,16232
  8112fc:	0810c880 	call	810c88 <alt_find_dev>
  811300:	e0bffa15 	stw	r2,-24(fp)
  811304:	e0bffa17 	ldw	r2,-24(fp)
  811308:	1004c03a 	cmpne	r2,r2,zero
  81130c:	1000051e 	bne	r2,zero,811324 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  811310:	e13ffb17 	ldw	r4,-20(fp)
  811314:	081166c0 	call	81166c <alt_find_file>
  811318:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  81131c:	00800044 	movi	r2,1
  811320:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  811324:	e0bffa17 	ldw	r2,-24(fp)
  811328:	1005003a 	cmpeq	r2,r2,zero
  81132c:	1000301e 	bne	r2,zero,8113f0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  811330:	e13ffa17 	ldw	r4,-24(fp)
  811334:	081178c0 	call	81178c <alt_get_fd>
  811338:	e0bff815 	stw	r2,-32(fp)
  81133c:	e0bff817 	ldw	r2,-32(fp)
  811340:	1004403a 	cmpge	r2,r2,zero
  811344:	1000031e 	bne	r2,zero,811354 <open+0x94>
    {
      status = index;
  811348:	e0bff817 	ldw	r2,-32(fp)
  81134c:	e0bff715 	stw	r2,-36(fp)
  811350:	00002906 	br	8113f8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  811354:	e0bff817 	ldw	r2,-32(fp)
  811358:	10800324 	muli	r2,r2,12
  81135c:	1007883a 	mov	r3,r2
  811360:	00802074 	movhi	r2,129
  811364:	108af304 	addi	r2,r2,11212
  811368:	1885883a 	add	r2,r3,r2
  81136c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  811370:	e0fffc17 	ldw	r3,-16(fp)
  811374:	00900034 	movhi	r2,16384
  811378:	10bfffc4 	addi	r2,r2,-1
  81137c:	1886703a 	and	r3,r3,r2
  811380:	e0bff917 	ldw	r2,-28(fp)
  811384:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  811388:	e0bff617 	ldw	r2,-40(fp)
  81138c:	1004c03a 	cmpne	r2,r2,zero
  811390:	1000061e 	bne	r2,zero,8113ac <open+0xec>
  811394:	e13ff917 	ldw	r4,-28(fp)
  811398:	08111e40 	call	8111e4 <alt_file_locked>
  81139c:	e0bff715 	stw	r2,-36(fp)
  8113a0:	e0bff717 	ldw	r2,-36(fp)
  8113a4:	1004803a 	cmplt	r2,r2,zero
  8113a8:	1000131e 	bne	r2,zero,8113f8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8113ac:	e0bffa17 	ldw	r2,-24(fp)
  8113b0:	10800317 	ldw	r2,12(r2)
  8113b4:	1005003a 	cmpeq	r2,r2,zero
  8113b8:	1000091e 	bne	r2,zero,8113e0 <open+0x120>
  8113bc:	e0bffa17 	ldw	r2,-24(fp)
  8113c0:	10800317 	ldw	r2,12(r2)
  8113c4:	e13ff917 	ldw	r4,-28(fp)
  8113c8:	e17ffb17 	ldw	r5,-20(fp)
  8113cc:	e1bffc17 	ldw	r6,-16(fp)
  8113d0:	e1fffd17 	ldw	r7,-12(fp)
  8113d4:	103ee83a 	callr	r2
  8113d8:	e0bfff15 	stw	r2,-4(fp)
  8113dc:	00000106 	br	8113e4 <open+0x124>
  8113e0:	e03fff15 	stw	zero,-4(fp)
  8113e4:	e0bfff17 	ldw	r2,-4(fp)
  8113e8:	e0bff715 	stw	r2,-36(fp)
  8113ec:	00000206 	br	8113f8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8113f0:	00bffb44 	movi	r2,-19
  8113f4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8113f8:	e0bff717 	ldw	r2,-36(fp)
  8113fc:	1004403a 	cmpge	r2,r2,zero
  811400:	1000091e 	bne	r2,zero,811428 <open+0x168>
  {
    alt_release_fd (index);  
  811404:	e13ff817 	ldw	r4,-32(fp)
  811408:	080ce380 	call	80ce38 <alt_release_fd>
    ALT_ERRNO = -status;
  81140c:	08114480 	call	811448 <alt_get_errno>
  811410:	e0fff717 	ldw	r3,-36(fp)
  811414:	00c7c83a 	sub	r3,zero,r3
  811418:	10c00015 	stw	r3,0(r2)
    return -1;
  81141c:	00bfffc4 	movi	r2,-1
  811420:	e0bffe15 	stw	r2,-8(fp)
  811424:	00000206 	br	811430 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  811428:	e0bff817 	ldw	r2,-32(fp)
  81142c:	e0bffe15 	stw	r2,-8(fp)
  811430:	e0bffe17 	ldw	r2,-8(fp)
}
  811434:	e037883a 	mov	sp,fp
  811438:	dfc00117 	ldw	ra,4(sp)
  81143c:	df000017 	ldw	fp,0(sp)
  811440:	dec00204 	addi	sp,sp,8
  811444:	f800283a 	ret

00811448 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811448:	defffd04 	addi	sp,sp,-12
  81144c:	dfc00215 	stw	ra,8(sp)
  811450:	df000115 	stw	fp,4(sp)
  811454:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811458:	00802074 	movhi	r2,129
  81145c:	108fdd04 	addi	r2,r2,16244
  811460:	10800017 	ldw	r2,0(r2)
  811464:	1005003a 	cmpeq	r2,r2,zero
  811468:	1000061e 	bne	r2,zero,811484 <alt_get_errno+0x3c>
  81146c:	00802074 	movhi	r2,129
  811470:	108fdd04 	addi	r2,r2,16244
  811474:	10800017 	ldw	r2,0(r2)
  811478:	103ee83a 	callr	r2
  81147c:	e0bfff15 	stw	r2,-4(fp)
  811480:	00000306 	br	811490 <alt_get_errno+0x48>
  811484:	00802074 	movhi	r2,129
  811488:	1096ef04 	addi	r2,r2,23484
  81148c:	e0bfff15 	stw	r2,-4(fp)
  811490:	e0bfff17 	ldw	r2,-4(fp)
}
  811494:	e037883a 	mov	sp,fp
  811498:	dfc00117 	ldw	ra,4(sp)
  81149c:	df000017 	ldw	fp,0(sp)
  8114a0:	dec00204 	addi	sp,sp,8
  8114a4:	f800283a 	ret

008114a8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8114a8:	defffa04 	addi	sp,sp,-24
  8114ac:	df000515 	stw	fp,20(sp)
  8114b0:	df000504 	addi	fp,sp,20
  8114b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8114b8:	0005303a 	rdctl	r2,status
  8114bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8114c0:	e0fffd17 	ldw	r3,-12(fp)
  8114c4:	00bfff84 	movi	r2,-2
  8114c8:	1884703a 	and	r2,r3,r2
  8114cc:	1001703a 	wrctl	status,r2
  
  return context;
  8114d0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8114d4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8114d8:	e0bfff17 	ldw	r2,-4(fp)
  8114dc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8114e0:	e0bffc17 	ldw	r2,-16(fp)
  8114e4:	10c00017 	ldw	r3,0(r2)
  8114e8:	e0bffc17 	ldw	r2,-16(fp)
  8114ec:	10800117 	ldw	r2,4(r2)
  8114f0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8114f4:	e0bffc17 	ldw	r2,-16(fp)
  8114f8:	10c00117 	ldw	r3,4(r2)
  8114fc:	e0bffc17 	ldw	r2,-16(fp)
  811500:	10800017 	ldw	r2,0(r2)
  811504:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  811508:	e0fffc17 	ldw	r3,-16(fp)
  81150c:	e0bffc17 	ldw	r2,-16(fp)
  811510:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  811514:	e0fffc17 	ldw	r3,-16(fp)
  811518:	e0bffc17 	ldw	r2,-16(fp)
  81151c:	18800015 	stw	r2,0(r3)
  811520:	e0bffe17 	ldw	r2,-8(fp)
  811524:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811528:	e0bffb17 	ldw	r2,-20(fp)
  81152c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  811530:	e037883a 	mov	sp,fp
  811534:	df000017 	ldw	fp,0(sp)
  811538:	dec00104 	addi	sp,sp,4
  81153c:	f800283a 	ret

00811540 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  811540:	defffb04 	addi	sp,sp,-20
  811544:	dfc00415 	stw	ra,16(sp)
  811548:	df000315 	stw	fp,12(sp)
  81154c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  811550:	d0a01c17 	ldw	r2,-32656(gp)
  811554:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  811558:	d0a72d17 	ldw	r2,-25420(gp)
  81155c:	10800044 	addi	r2,r2,1
  811560:	d0a72d15 	stw	r2,-25420(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811564:	00003106 	br	81162c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  811568:	e0bffe17 	ldw	r2,-8(fp)
  81156c:	10800017 	ldw	r2,0(r2)
  811570:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  811574:	e0bffe17 	ldw	r2,-8(fp)
  811578:	10800403 	ldbu	r2,16(r2)
  81157c:	10803fcc 	andi	r2,r2,255
  811580:	1005003a 	cmpeq	r2,r2,zero
  811584:	1000051e 	bne	r2,zero,81159c <alt_tick+0x5c>
  811588:	d0a72d17 	ldw	r2,-25420(gp)
  81158c:	1004c03a 	cmpne	r2,r2,zero
  811590:	1000021e 	bne	r2,zero,81159c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  811594:	e0bffe17 	ldw	r2,-8(fp)
  811598:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  81159c:	e0bffe17 	ldw	r2,-8(fp)
  8115a0:	10c00217 	ldw	r3,8(r2)
  8115a4:	d0a72d17 	ldw	r2,-25420(gp)
  8115a8:	10c01e36 	bltu	r2,r3,811624 <alt_tick+0xe4>
  8115ac:	e0bffe17 	ldw	r2,-8(fp)
  8115b0:	10800403 	ldbu	r2,16(r2)
  8115b4:	10803fcc 	andi	r2,r2,255
  8115b8:	1004c03a 	cmpne	r2,r2,zero
  8115bc:	1000191e 	bne	r2,zero,811624 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  8115c0:	e0bffe17 	ldw	r2,-8(fp)
  8115c4:	10c00317 	ldw	r3,12(r2)
  8115c8:	e0bffe17 	ldw	r2,-8(fp)
  8115cc:	11000517 	ldw	r4,20(r2)
  8115d0:	183ee83a 	callr	r3
  8115d4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8115d8:	e0bffd17 	ldw	r2,-12(fp)
  8115dc:	1004c03a 	cmpne	r2,r2,zero
  8115e0:	1000031e 	bne	r2,zero,8115f0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8115e4:	e13ffe17 	ldw	r4,-8(fp)
  8115e8:	08114a80 	call	8114a8 <alt_alarm_stop>
  8115ec:	00000d06 	br	811624 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8115f0:	e0bffe17 	ldw	r2,-8(fp)
  8115f4:	10c00217 	ldw	r3,8(r2)
  8115f8:	e0bffd17 	ldw	r2,-12(fp)
  8115fc:	1887883a 	add	r3,r3,r2
  811600:	e0bffe17 	ldw	r2,-8(fp)
  811604:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  811608:	e0bffe17 	ldw	r2,-8(fp)
  81160c:	10c00217 	ldw	r3,8(r2)
  811610:	d0a72d17 	ldw	r2,-25420(gp)
  811614:	1880032e 	bgeu	r3,r2,811624 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  811618:	e0fffe17 	ldw	r3,-8(fp)
  81161c:	00800044 	movi	r2,1
  811620:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  811624:	e0bfff17 	ldw	r2,-4(fp)
  811628:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81162c:	d0e01c04 	addi	r3,gp,-32656
  811630:	e0bffe17 	ldw	r2,-8(fp)
  811634:	10ffcc1e 	bne	r2,r3,811568 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  811638:	e037883a 	mov	sp,fp
  81163c:	dfc00117 	ldw	ra,4(sp)
  811640:	df000017 	ldw	fp,0(sp)
  811644:	dec00204 	addi	sp,sp,8
  811648:	f800283a 	ret

0081164c <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  81164c:	deffff04 	addi	sp,sp,-4
  811650:	df000015 	stw	fp,0(sp)
  811654:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  811658:	000170fa 	wrctl	ienable,zero
}
  81165c:	e037883a 	mov	sp,fp
  811660:	df000017 	ldw	fp,0(sp)
  811664:	dec00104 	addi	sp,sp,4
  811668:	f800283a 	ret

0081166c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81166c:	defffa04 	addi	sp,sp,-24
  811670:	dfc00515 	stw	ra,20(sp)
  811674:	df000415 	stw	fp,16(sp)
  811678:	df000404 	addi	fp,sp,16
  81167c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  811680:	00802074 	movhi	r2,129
  811684:	108fd804 	addi	r2,r2,16224
  811688:	10800017 	ldw	r2,0(r2)
  81168c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811690:	00003306 	br	811760 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  811694:	e0bffd17 	ldw	r2,-12(fp)
  811698:	11000217 	ldw	r4,8(r2)
  81169c:	0803dec0 	call	803dec <strlen>
  8116a0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  8116a4:	e0bffd17 	ldw	r2,-12(fp)
  8116a8:	10c00217 	ldw	r3,8(r2)
  8116ac:	e0bffc17 	ldw	r2,-16(fp)
  8116b0:	1885883a 	add	r2,r3,r2
  8116b4:	10bfffc4 	addi	r2,r2,-1
  8116b8:	10800003 	ldbu	r2,0(r2)
  8116bc:	10803fcc 	andi	r2,r2,255
  8116c0:	1080201c 	xori	r2,r2,128
  8116c4:	10bfe004 	addi	r2,r2,-128
  8116c8:	10800bd8 	cmpnei	r2,r2,47
  8116cc:	1000031e 	bne	r2,zero,8116dc <alt_find_file+0x70>
    {
      len -= 1;
  8116d0:	e0bffc17 	ldw	r2,-16(fp)
  8116d4:	10bfffc4 	addi	r2,r2,-1
  8116d8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8116dc:	e0bffc17 	ldw	r2,-16(fp)
  8116e0:	1007883a 	mov	r3,r2
  8116e4:	e0bffe17 	ldw	r2,-8(fp)
  8116e8:	1885883a 	add	r2,r3,r2
  8116ec:	10800003 	ldbu	r2,0(r2)
  8116f0:	10803fcc 	andi	r2,r2,255
  8116f4:	1080201c 	xori	r2,r2,128
  8116f8:	10bfe004 	addi	r2,r2,-128
  8116fc:	10800be0 	cmpeqi	r2,r2,47
  811700:	10000a1e 	bne	r2,zero,81172c <alt_find_file+0xc0>
  811704:	e0bffc17 	ldw	r2,-16(fp)
  811708:	1007883a 	mov	r3,r2
  81170c:	e0bffe17 	ldw	r2,-8(fp)
  811710:	1885883a 	add	r2,r3,r2
  811714:	10800003 	ldbu	r2,0(r2)
  811718:	10803fcc 	andi	r2,r2,255
  81171c:	1080201c 	xori	r2,r2,128
  811720:	10bfe004 	addi	r2,r2,-128
  811724:	1004c03a 	cmpne	r2,r2,zero
  811728:	10000a1e 	bne	r2,zero,811754 <alt_find_file+0xe8>
  81172c:	e0bffd17 	ldw	r2,-12(fp)
  811730:	11000217 	ldw	r4,8(r2)
  811734:	e1bffc17 	ldw	r6,-16(fp)
  811738:	e17ffe17 	ldw	r5,-8(fp)
  81173c:	08119200 	call	811920 <memcmp>
  811740:	1004c03a 	cmpne	r2,r2,zero
  811744:	1000031e 	bne	r2,zero,811754 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  811748:	e0bffd17 	ldw	r2,-12(fp)
  81174c:	e0bfff15 	stw	r2,-4(fp)
  811750:	00000806 	br	811774 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  811754:	e0bffd17 	ldw	r2,-12(fp)
  811758:	10800017 	ldw	r2,0(r2)
  81175c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811760:	00c02074 	movhi	r3,129
  811764:	18cfd804 	addi	r3,r3,16224
  811768:	e0bffd17 	ldw	r2,-12(fp)
  81176c:	10ffc91e 	bne	r2,r3,811694 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  811770:	e03fff15 	stw	zero,-4(fp)
  811774:	e0bfff17 	ldw	r2,-4(fp)
}
  811778:	e037883a 	mov	sp,fp
  81177c:	dfc00117 	ldw	ra,4(sp)
  811780:	df000017 	ldw	fp,0(sp)
  811784:	dec00204 	addi	sp,sp,8
  811788:	f800283a 	ret

0081178c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81178c:	defffc04 	addi	sp,sp,-16
  811790:	df000315 	stw	fp,12(sp)
  811794:	df000304 	addi	fp,sp,12
  811798:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81179c:	00bffa04 	movi	r2,-24
  8117a0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8117a4:	e03ffe15 	stw	zero,-8(fp)
  8117a8:	00001e06 	br	811824 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  8117ac:	e0bffe17 	ldw	r2,-8(fp)
  8117b0:	00c02074 	movhi	r3,129
  8117b4:	18caf304 	addi	r3,r3,11212
  8117b8:	10800324 	muli	r2,r2,12
  8117bc:	10c5883a 	add	r2,r2,r3
  8117c0:	10800017 	ldw	r2,0(r2)
  8117c4:	1004c03a 	cmpne	r2,r2,zero
  8117c8:	1000131e 	bne	r2,zero,811818 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  8117cc:	e0bffe17 	ldw	r2,-8(fp)
  8117d0:	00c02074 	movhi	r3,129
  8117d4:	18caf304 	addi	r3,r3,11212
  8117d8:	10800324 	muli	r2,r2,12
  8117dc:	10c7883a 	add	r3,r2,r3
  8117e0:	e0bfff17 	ldw	r2,-4(fp)
  8117e4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8117e8:	00802074 	movhi	r2,129
  8117ec:	108fdc04 	addi	r2,r2,16240
  8117f0:	10c00017 	ldw	r3,0(r2)
  8117f4:	e0bffe17 	ldw	r2,-8(fp)
  8117f8:	1880040e 	bge	r3,r2,81180c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  8117fc:	00c02074 	movhi	r3,129
  811800:	18cfdc04 	addi	r3,r3,16240
  811804:	e0bffe17 	ldw	r2,-8(fp)
  811808:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  81180c:	e0bffe17 	ldw	r2,-8(fp)
  811810:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  811814:	00000606 	br	811830 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811818:	e0bffe17 	ldw	r2,-8(fp)
  81181c:	10800044 	addi	r2,r2,1
  811820:	e0bffe15 	stw	r2,-8(fp)
  811824:	e0bffe17 	ldw	r2,-8(fp)
  811828:	10800810 	cmplti	r2,r2,32
  81182c:	103fdf1e 	bne	r2,zero,8117ac <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  811830:	e0bffd17 	ldw	r2,-12(fp)
}
  811834:	e037883a 	mov	sp,fp
  811838:	df000017 	ldw	fp,0(sp)
  81183c:	dec00104 	addi	sp,sp,4
  811840:	f800283a 	ret

00811844 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  811844:	defffb04 	addi	sp,sp,-20
  811848:	df000415 	stw	fp,16(sp)
  81184c:	df000404 	addi	fp,sp,16
  811850:	e13ffe15 	stw	r4,-8(fp)
  811854:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  811858:	e0bfff17 	ldw	r2,-4(fp)
  81185c:	10840070 	cmpltui	r2,r2,4097
  811860:	1000021e 	bne	r2,zero,81186c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  811864:	00840004 	movi	r2,4096
  811868:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  81186c:	e0fffe17 	ldw	r3,-8(fp)
  811870:	e0bfff17 	ldw	r2,-4(fp)
  811874:	1885883a 	add	r2,r3,r2
  811878:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81187c:	e0bffe17 	ldw	r2,-8(fp)
  811880:	e0bffd15 	stw	r2,-12(fp)
  811884:	00000506 	br	81189c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  811888:	e0bffd17 	ldw	r2,-12(fp)
  81188c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811890:	e0bffd17 	ldw	r2,-12(fp)
  811894:	10800804 	addi	r2,r2,32
  811898:	e0bffd15 	stw	r2,-12(fp)
  81189c:	e0fffd17 	ldw	r3,-12(fp)
  8118a0:	e0bffc17 	ldw	r2,-16(fp)
  8118a4:	18bff836 	bltu	r3,r2,811888 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8118a8:	e0bffe17 	ldw	r2,-8(fp)
  8118ac:	108007cc 	andi	r2,r2,31
  8118b0:	1005003a 	cmpeq	r2,r2,zero
  8118b4:	1000021e 	bne	r2,zero,8118c0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8118b8:	e0bffd17 	ldw	r2,-12(fp)
  8118bc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8118c0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8118c4:	e037883a 	mov	sp,fp
  8118c8:	df000017 	ldw	fp,0(sp)
  8118cc:	dec00104 	addi	sp,sp,4
  8118d0:	f800283a 	ret

008118d4 <atexit>:
  8118d4:	200b883a 	mov	r5,r4
  8118d8:	000d883a 	mov	r6,zero
  8118dc:	0009883a 	mov	r4,zero
  8118e0:	000f883a 	mov	r7,zero
  8118e4:	0811a841 	jmpi	811a84 <__register_exitproc>

008118e8 <exit>:
  8118e8:	defffe04 	addi	sp,sp,-8
  8118ec:	000b883a 	mov	r5,zero
  8118f0:	dc000015 	stw	r16,0(sp)
  8118f4:	dfc00115 	stw	ra,4(sp)
  8118f8:	2021883a 	mov	r16,r4
  8118fc:	0811bbc0 	call	811bbc <__call_exitprocs>
  811900:	00802074 	movhi	r2,129
  811904:	108fd304 	addi	r2,r2,16204
  811908:	11000017 	ldw	r4,0(r2)
  81190c:	20800f17 	ldw	r2,60(r4)
  811910:	10000126 	beq	r2,zero,811918 <exit+0x30>
  811914:	103ee83a 	callr	r2
  811918:	8009883a 	mov	r4,r16
  81191c:	0811dac0 	call	811dac <_exit>

00811920 <memcmp>:
  811920:	00c000c4 	movi	r3,3
  811924:	1980032e 	bgeu	r3,r6,811934 <memcmp+0x14>
  811928:	2144b03a 	or	r2,r4,r5
  81192c:	10c4703a 	and	r2,r2,r3
  811930:	10000f26 	beq	r2,zero,811970 <memcmp+0x50>
  811934:	31ffffc4 	addi	r7,r6,-1
  811938:	3000061e 	bne	r6,zero,811954 <memcmp+0x34>
  81193c:	00000a06 	br	811968 <memcmp+0x48>
  811940:	39ffffc4 	addi	r7,r7,-1
  811944:	00bfffc4 	movi	r2,-1
  811948:	21000044 	addi	r4,r4,1
  81194c:	29400044 	addi	r5,r5,1
  811950:	38800526 	beq	r7,r2,811968 <memcmp+0x48>
  811954:	20c00003 	ldbu	r3,0(r4)
  811958:	28800003 	ldbu	r2,0(r5)
  81195c:	18bff826 	beq	r3,r2,811940 <memcmp+0x20>
  811960:	1885c83a 	sub	r2,r3,r2
  811964:	f800283a 	ret
  811968:	0005883a 	mov	r2,zero
  81196c:	f800283a 	ret
  811970:	180f883a 	mov	r7,r3
  811974:	20c00017 	ldw	r3,0(r4)
  811978:	28800017 	ldw	r2,0(r5)
  81197c:	18bfed1e 	bne	r3,r2,811934 <memcmp+0x14>
  811980:	31bfff04 	addi	r6,r6,-4
  811984:	21000104 	addi	r4,r4,4
  811988:	29400104 	addi	r5,r5,4
  81198c:	39bff936 	bltu	r7,r6,811974 <memcmp+0x54>
  811990:	003fe806 	br	811934 <memcmp+0x14>

00811994 <strncmp>:
  811994:	30003926 	beq	r6,zero,811a7c <strncmp+0xe8>
  811998:	2144b03a 	or	r2,r4,r5
  81199c:	108000cc 	andi	r2,r2,3
  8119a0:	028000c4 	movi	r10,3
  8119a4:	1000241e 	bne	r2,zero,811a38 <strncmp+0xa4>
  8119a8:	2011883a 	mov	r8,r4
  8119ac:	280f883a 	mov	r7,r5
  8119b0:	51801f2e 	bgeu	r10,r6,811a30 <strncmp+0x9c>
  8119b4:	21000017 	ldw	r4,0(r4)
  8119b8:	28800017 	ldw	r2,0(r5)
  8119bc:	20801c1e 	bne	r4,r2,811a30 <strncmp+0x9c>
  8119c0:	31bfff04 	addi	r6,r6,-4
  8119c4:	30002d26 	beq	r6,zero,811a7c <strncmp+0xe8>
  8119c8:	027fbff4 	movhi	r9,65279
  8119cc:	4a7fbfc4 	addi	r9,r9,-257
  8119d0:	2247883a 	add	r3,r4,r9
  8119d4:	01602074 	movhi	r5,32897
  8119d8:	29602004 	addi	r5,r5,-32640
  8119dc:	1946703a 	and	r3,r3,r5
  8119e0:	0104303a 	nor	r2,zero,r4
  8119e4:	10c4703a 	and	r2,r2,r3
  8119e8:	1000241e 	bne	r2,zero,811a7c <strncmp+0xe8>
  8119ec:	5017883a 	mov	r11,r10
  8119f0:	4815883a 	mov	r10,r9
  8119f4:	2813883a 	mov	r9,r5
  8119f8:	00000a06 	br	811a24 <strncmp+0x90>
  8119fc:	41000017 	ldw	r4,0(r8)
  811a00:	39400017 	ldw	r5,0(r7)
  811a04:	2285883a 	add	r2,r4,r10
  811a08:	1244703a 	and	r2,r2,r9
  811a0c:	0106303a 	nor	r3,zero,r4
  811a10:	1886703a 	and	r3,r3,r2
  811a14:	2140061e 	bne	r4,r5,811a30 <strncmp+0x9c>
  811a18:	31bfff04 	addi	r6,r6,-4
  811a1c:	30001726 	beq	r6,zero,811a7c <strncmp+0xe8>
  811a20:	1800161e 	bne	r3,zero,811a7c <strncmp+0xe8>
  811a24:	42000104 	addi	r8,r8,4
  811a28:	39c00104 	addi	r7,r7,4
  811a2c:	59bff336 	bltu	r11,r6,8119fc <strncmp+0x68>
  811a30:	4009883a 	mov	r4,r8
  811a34:	380b883a 	mov	r5,r7
  811a38:	31bfffc4 	addi	r6,r6,-1
  811a3c:	01ffffc4 	movi	r7,-1
  811a40:	31c00a1e 	bne	r6,r7,811a6c <strncmp+0xd8>
  811a44:	20c00003 	ldbu	r3,0(r4)
  811a48:	28800003 	ldbu	r2,0(r5)
  811a4c:	1885c83a 	sub	r2,r3,r2
  811a50:	f800283a 	ret
  811a54:	30000926 	beq	r6,zero,811a7c <strncmp+0xe8>
  811a58:	18000826 	beq	r3,zero,811a7c <strncmp+0xe8>
  811a5c:	31bfffc4 	addi	r6,r6,-1
  811a60:	21000044 	addi	r4,r4,1
  811a64:	29400044 	addi	r5,r5,1
  811a68:	31fff626 	beq	r6,r7,811a44 <strncmp+0xb0>
  811a6c:	20c00007 	ldb	r3,0(r4)
  811a70:	28800007 	ldb	r2,0(r5)
  811a74:	18bff726 	beq	r3,r2,811a54 <strncmp+0xc0>
  811a78:	003ff206 	br	811a44 <strncmp+0xb0>
  811a7c:	0005883a 	mov	r2,zero
  811a80:	f800283a 	ret

00811a84 <__register_exitproc>:
  811a84:	defffa04 	addi	sp,sp,-24
  811a88:	00802074 	movhi	r2,129
  811a8c:	108fd304 	addi	r2,r2,16204
  811a90:	dc000015 	stw	r16,0(sp)
  811a94:	14000017 	ldw	r16,0(r2)
  811a98:	dd000415 	stw	r20,16(sp)
  811a9c:	2829883a 	mov	r20,r5
  811aa0:	81405217 	ldw	r5,328(r16)
  811aa4:	dcc00315 	stw	r19,12(sp)
  811aa8:	dc800215 	stw	r18,8(sp)
  811aac:	dc400115 	stw	r17,4(sp)
  811ab0:	dfc00515 	stw	ra,20(sp)
  811ab4:	2023883a 	mov	r17,r4
  811ab8:	3027883a 	mov	r19,r6
  811abc:	3825883a 	mov	r18,r7
  811ac0:	28002526 	beq	r5,zero,811b58 <__register_exitproc+0xd4>
  811ac4:	29000117 	ldw	r4,4(r5)
  811ac8:	008007c4 	movi	r2,31
  811acc:	11002716 	blt	r2,r4,811b6c <__register_exitproc+0xe8>
  811ad0:	8800101e 	bne	r17,zero,811b14 <__register_exitproc+0x90>
  811ad4:	2105883a 	add	r2,r4,r4
  811ad8:	1085883a 	add	r2,r2,r2
  811adc:	20c00044 	addi	r3,r4,1
  811ae0:	1145883a 	add	r2,r2,r5
  811ae4:	0009883a 	mov	r4,zero
  811ae8:	15000215 	stw	r20,8(r2)
  811aec:	28c00115 	stw	r3,4(r5)
  811af0:	2005883a 	mov	r2,r4
  811af4:	dfc00517 	ldw	ra,20(sp)
  811af8:	dd000417 	ldw	r20,16(sp)
  811afc:	dcc00317 	ldw	r19,12(sp)
  811b00:	dc800217 	ldw	r18,8(sp)
  811b04:	dc400117 	ldw	r17,4(sp)
  811b08:	dc000017 	ldw	r16,0(sp)
  811b0c:	dec00604 	addi	sp,sp,24
  811b10:	f800283a 	ret
  811b14:	29802204 	addi	r6,r5,136
  811b18:	00800044 	movi	r2,1
  811b1c:	110e983a 	sll	r7,r2,r4
  811b20:	30c04017 	ldw	r3,256(r6)
  811b24:	2105883a 	add	r2,r4,r4
  811b28:	1085883a 	add	r2,r2,r2
  811b2c:	1185883a 	add	r2,r2,r6
  811b30:	19c6b03a 	or	r3,r3,r7
  811b34:	14802015 	stw	r18,128(r2)
  811b38:	14c00015 	stw	r19,0(r2)
  811b3c:	00800084 	movi	r2,2
  811b40:	30c04015 	stw	r3,256(r6)
  811b44:	88bfe31e 	bne	r17,r2,811ad4 <__register_exitproc+0x50>
  811b48:	30804117 	ldw	r2,260(r6)
  811b4c:	11c4b03a 	or	r2,r2,r7
  811b50:	30804115 	stw	r2,260(r6)
  811b54:	003fdf06 	br	811ad4 <__register_exitproc+0x50>
  811b58:	00802074 	movhi	r2,129
  811b5c:	10974004 	addi	r2,r2,23808
  811b60:	100b883a 	mov	r5,r2
  811b64:	80805215 	stw	r2,328(r16)
  811b68:	003fd606 	br	811ac4 <__register_exitproc+0x40>
  811b6c:	00800034 	movhi	r2,0
  811b70:	10800004 	addi	r2,r2,0
  811b74:	1000021e 	bne	r2,zero,811b80 <__register_exitproc+0xfc>
  811b78:	013fffc4 	movi	r4,-1
  811b7c:	003fdc06 	br	811af0 <__register_exitproc+0x6c>
  811b80:	01006404 	movi	r4,400
  811b84:	103ee83a 	callr	r2
  811b88:	1007883a 	mov	r3,r2
  811b8c:	103ffa26 	beq	r2,zero,811b78 <__register_exitproc+0xf4>
  811b90:	80805217 	ldw	r2,328(r16)
  811b94:	180b883a 	mov	r5,r3
  811b98:	18000115 	stw	zero,4(r3)
  811b9c:	18800015 	stw	r2,0(r3)
  811ba0:	80c05215 	stw	r3,328(r16)
  811ba4:	18006215 	stw	zero,392(r3)
  811ba8:	18006315 	stw	zero,396(r3)
  811bac:	0009883a 	mov	r4,zero
  811bb0:	883fc826 	beq	r17,zero,811ad4 <__register_exitproc+0x50>
  811bb4:	003fd706 	br	811b14 <__register_exitproc+0x90>

00811bb8 <register_fini>:
  811bb8:	f800283a 	ret

00811bbc <__call_exitprocs>:
  811bbc:	00802074 	movhi	r2,129
  811bc0:	108fd304 	addi	r2,r2,16204
  811bc4:	10800017 	ldw	r2,0(r2)
  811bc8:	defff304 	addi	sp,sp,-52
  811bcc:	df000b15 	stw	fp,44(sp)
  811bd0:	d8800115 	stw	r2,4(sp)
  811bd4:	00800034 	movhi	r2,0
  811bd8:	10800004 	addi	r2,r2,0
  811bdc:	1005003a 	cmpeq	r2,r2,zero
  811be0:	d8800215 	stw	r2,8(sp)
  811be4:	d8800117 	ldw	r2,4(sp)
  811be8:	dd400815 	stw	r21,32(sp)
  811bec:	dd000715 	stw	r20,28(sp)
  811bf0:	10805204 	addi	r2,r2,328
  811bf4:	dfc00c15 	stw	ra,48(sp)
  811bf8:	ddc00a15 	stw	r23,40(sp)
  811bfc:	dd800915 	stw	r22,36(sp)
  811c00:	dcc00615 	stw	r19,24(sp)
  811c04:	dc800515 	stw	r18,20(sp)
  811c08:	dc400415 	stw	r17,16(sp)
  811c0c:	dc000315 	stw	r16,12(sp)
  811c10:	282b883a 	mov	r21,r5
  811c14:	2039883a 	mov	fp,r4
  811c18:	d8800015 	stw	r2,0(sp)
  811c1c:	2829003a 	cmpeq	r20,r5,zero
  811c20:	d8800117 	ldw	r2,4(sp)
  811c24:	14405217 	ldw	r17,328(r2)
  811c28:	88001026 	beq	r17,zero,811c6c <__call_exitprocs+0xb0>
  811c2c:	ddc00017 	ldw	r23,0(sp)
  811c30:	88800117 	ldw	r2,4(r17)
  811c34:	8c802204 	addi	r18,r17,136
  811c38:	143fffc4 	addi	r16,r2,-1
  811c3c:	80000916 	blt	r16,zero,811c64 <__call_exitprocs+0xa8>
  811c40:	05bfffc4 	movi	r22,-1
  811c44:	a000151e 	bne	r20,zero,811c9c <__call_exitprocs+0xe0>
  811c48:	8409883a 	add	r4,r16,r16
  811c4c:	2105883a 	add	r2,r4,r4
  811c50:	1485883a 	add	r2,r2,r18
  811c54:	10c02017 	ldw	r3,128(r2)
  811c58:	a8c01126 	beq	r21,r3,811ca0 <__call_exitprocs+0xe4>
  811c5c:	843fffc4 	addi	r16,r16,-1
  811c60:	85bff81e 	bne	r16,r22,811c44 <__call_exitprocs+0x88>
  811c64:	d8800217 	ldw	r2,8(sp)
  811c68:	10003126 	beq	r2,zero,811d30 <__call_exitprocs+0x174>
  811c6c:	dfc00c17 	ldw	ra,48(sp)
  811c70:	df000b17 	ldw	fp,44(sp)
  811c74:	ddc00a17 	ldw	r23,40(sp)
  811c78:	dd800917 	ldw	r22,36(sp)
  811c7c:	dd400817 	ldw	r21,32(sp)
  811c80:	dd000717 	ldw	r20,28(sp)
  811c84:	dcc00617 	ldw	r19,24(sp)
  811c88:	dc800517 	ldw	r18,20(sp)
  811c8c:	dc400417 	ldw	r17,16(sp)
  811c90:	dc000317 	ldw	r16,12(sp)
  811c94:	dec00d04 	addi	sp,sp,52
  811c98:	f800283a 	ret
  811c9c:	8409883a 	add	r4,r16,r16
  811ca0:	88c00117 	ldw	r3,4(r17)
  811ca4:	2105883a 	add	r2,r4,r4
  811ca8:	1445883a 	add	r2,r2,r17
  811cac:	18ffffc4 	addi	r3,r3,-1
  811cb0:	11800217 	ldw	r6,8(r2)
  811cb4:	1c001526 	beq	r3,r16,811d0c <__call_exitprocs+0x150>
  811cb8:	10000215 	stw	zero,8(r2)
  811cbc:	303fe726 	beq	r6,zero,811c5c <__call_exitprocs+0xa0>
  811cc0:	00c00044 	movi	r3,1
  811cc4:	1c06983a 	sll	r3,r3,r16
  811cc8:	90804017 	ldw	r2,256(r18)
  811ccc:	8cc00117 	ldw	r19,4(r17)
  811cd0:	1884703a 	and	r2,r3,r2
  811cd4:	10001426 	beq	r2,zero,811d28 <__call_exitprocs+0x16c>
  811cd8:	90804117 	ldw	r2,260(r18)
  811cdc:	1884703a 	and	r2,r3,r2
  811ce0:	10000c1e 	bne	r2,zero,811d14 <__call_exitprocs+0x158>
  811ce4:	2105883a 	add	r2,r4,r4
  811ce8:	1485883a 	add	r2,r2,r18
  811cec:	11400017 	ldw	r5,0(r2)
  811cf0:	e009883a 	mov	r4,fp
  811cf4:	303ee83a 	callr	r6
  811cf8:	88800117 	ldw	r2,4(r17)
  811cfc:	98bfc81e 	bne	r19,r2,811c20 <__call_exitprocs+0x64>
  811d00:	b8800017 	ldw	r2,0(r23)
  811d04:	147fd526 	beq	r2,r17,811c5c <__call_exitprocs+0xa0>
  811d08:	003fc506 	br	811c20 <__call_exitprocs+0x64>
  811d0c:	8c000115 	stw	r16,4(r17)
  811d10:	003fea06 	br	811cbc <__call_exitprocs+0x100>
  811d14:	2105883a 	add	r2,r4,r4
  811d18:	1485883a 	add	r2,r2,r18
  811d1c:	11000017 	ldw	r4,0(r2)
  811d20:	303ee83a 	callr	r6
  811d24:	003ff406 	br	811cf8 <__call_exitprocs+0x13c>
  811d28:	303ee83a 	callr	r6
  811d2c:	003ff206 	br	811cf8 <__call_exitprocs+0x13c>
  811d30:	88800117 	ldw	r2,4(r17)
  811d34:	1000081e 	bne	r2,zero,811d58 <__call_exitprocs+0x19c>
  811d38:	89000017 	ldw	r4,0(r17)
  811d3c:	20000726 	beq	r4,zero,811d5c <__call_exitprocs+0x1a0>
  811d40:	b9000015 	stw	r4,0(r23)
  811d44:	8809883a 	mov	r4,r17
  811d48:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  811d4c:	bc400017 	ldw	r17,0(r23)
  811d50:	883fb71e 	bne	r17,zero,811c30 <__call_exitprocs+0x74>
  811d54:	003fc506 	br	811c6c <__call_exitprocs+0xb0>
  811d58:	89000017 	ldw	r4,0(r17)
  811d5c:	882f883a 	mov	r23,r17
  811d60:	2023883a 	mov	r17,r4
  811d64:	883fb21e 	bne	r17,zero,811c30 <__call_exitprocs+0x74>
  811d68:	003fc006 	br	811c6c <__call_exitprocs+0xb0>

00811d6c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  811d6c:	defffd04 	addi	sp,sp,-12
  811d70:	df000215 	stw	fp,8(sp)
  811d74:	df000204 	addi	fp,sp,8
  811d78:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  811d7c:	e0bfff17 	ldw	r2,-4(fp)
  811d80:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  811d84:	e0bffe17 	ldw	r2,-8(fp)
  811d88:	1005003a 	cmpeq	r2,r2,zero
  811d8c:	1000021e 	bne	r2,zero,811d98 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  811d90:	002af070 	cmpltui	zero,zero,43969
  811d94:	00000106 	br	811d9c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  811d98:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  811d9c:	e037883a 	mov	sp,fp
  811da0:	df000017 	ldw	fp,0(sp)
  811da4:	dec00104 	addi	sp,sp,4
  811da8:	f800283a 	ret

00811dac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  811dac:	defffd04 	addi	sp,sp,-12
  811db0:	dfc00215 	stw	ra,8(sp)
  811db4:	df000115 	stw	fp,4(sp)
  811db8:	df000104 	addi	fp,sp,4
  811dbc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  811dc0:	e13fff17 	ldw	r4,-4(fp)
  811dc4:	0811d6c0 	call	811d6c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  811dc8:	003fff06 	br	811dc8 <_exit+0x1c>
  811dcc:	00000010 	cmplti	zero,zero,0
  811dd0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  811dd4:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_3+0x4b7a0>
  811dd8:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_3+0x1187c0>
  811ddc:	001b0c0b 	ldhu	zero,27696(zero)
  811de0:	00000028 	cmpgeui	zero,zero,0
  811de4:	00000018 	cmpnei	zero,zero,0
  811de8:	0080afd4 	movui	r2,703
  811dec:	000005dc 	xori	zero,zero,23
  811df0:	400e4400 	call	400e440 <__alt_data_end+0x34be440>
  811df4:	92099170 	cmpltui	r8,r18,9797
  811df8:	95079308 	cmpgei	r20,r18,7756
  811dfc:	97049605 	stb	fp,4696(r18)
  811e00:	90019f03 	ldbu	zero,1660(r18)
  811e04:	9c06940a 	0x9c06940a
  811e08:	00000002 	0x2
  811e0c:	00000028 	cmpgeui	zero,zero,0
  811e10:	00000044 	movi	zero,1
  811e14:	0080b5b0 	cmpltui	r2,zero,726
  811e18:	000005b0 	cmpltui	zero,zero,22
  811e1c:	3c0e4400 	call	3c0e440 <__alt_data_end+0x30be440>
  811e20:	92099168 	cmpgeui	r8,r18,9797
  811e24:	95079308 	cmpgei	r20,r18,7756
  811e28:	9c039705 	stb	r16,3676(r19)
  811e2c:	90019f02 	0x90019f02
  811e30:	9606940a 	0x9606940a
  811e34:	00000004 	movi	zero,0
  811e38:	00811bb8 	rdprs	r2,zero,1134
