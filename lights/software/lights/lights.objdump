
lights.elf:     file format elf32-littlenios2
lights.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000e4e8 memsz 0x0000e4e8 flags r-x
    LOAD off    0x0000f508 vaddr 0x0080e508 paddr 0x00810098 align 2**12
         filesz 0x00001b90 memsz 0x00001b90 flags rw-
    LOAD off    0x00011c28 vaddr 0x00811c28 paddr 0x00811c28 align 2**12
         filesz 0x00000000 memsz 0x00000304 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000dc68  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006ec  0080de1c  0080de1c  0000ee1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b90  0080e508  00810098  0000f508  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000304  00811c28  00811c28  00011c28  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00011098  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d98  00000000  00000000  000110c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000015a5  00000000  00000000  00011e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000272af  00000000  00000000  000133fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000084ac  00000000  00000000  0003a6ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015bfd  00000000  00000000  00042b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001b58  00000000  00000000  00058758  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002499  00000000  00000000  0005a2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c30c  00000000  00000000  0005c749  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00068a58  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00068ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006c82b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0006c82e  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0006c833  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0006c834  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0006c838  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0006c83c  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000005  00000000  00000000  0006c840  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0006c845  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0006c850  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0006c85b  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0006c866  2**0
                  CONTENTS, READONLY
 28 .jdi          000040db  00000000  00000000  0006c886  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000614ff  00000000  00000000  00070961  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
0080de1c l    d  .rodata	00000000 .rodata
0080e508 l    d  .rwdata	00000000 .rwdata
00811c28 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 LightsFunctions.c
0080de1c l     O .rodata	00000014 C.2.2856
0080de30 l     O .rodata	00000014 C.1.2855
00000000 l    df *ABS*	00000000 Project.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
008007c4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0080e514 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
00800d1c l     F .text	00000058 __sprint_r
0080df9e l     O .rodata	00000010 blanks.3452
0080df8e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00802d80 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080477c l     F .text	00000058 std
00804888 l     F .text	00000008 __fp_lock
00804890 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0081005c l     O .rwdata	00000004 charset
0080dfd0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0080e118 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00808a88 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080a244 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080a2a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080a3a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080a6e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080a7c0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080a91c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080ab48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00810080 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0080afb8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080eed0 l     O .rwdata	00001060 jtag_uart_0
0080ff30 l     O .rwdata	00000120 lcd_0
0080b0a8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080b2e8 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080b510 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0081008c l     O .rwdata	00000004 colstart
0080bb8c l     F .text	000000b8 lcd_write_command
0080bc44 l     F .text	000000d4 lcd_write_data
0080bd18 l     F .text	000000c4 lcd_clear_screen
0080bddc l     F .text	000001ec lcd_repaint_screen
0080bfc8 l     F .text	000000c8 lcd_scroll_up
0080c090 l     F .text	000002d0 lcd_handle_escape
0080c86c l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080ce64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080d288 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080d3c4 l     F .text	000000dc alt_file_locked
0080d628 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080e385 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0080db98 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0080dd4c l     F .text	00000040 alt_sim_halt
0080650c g     F .text	00000094 _mprec_log10
008065f8 g     F .text	00000088 __any_on
00807d04 g     F .text	00000070 _isatty_r
0080e0f0 g     O .rodata	00000028 __mprec_tinytens
0080a97c g     F .text	0000006c alt_main
00800b04 g     F .text	000000a0 _puts_r
00811c9c g     O .bss	00000100 alt_irq
00807d74 g     F .text	00000078 _lseek_r
00810098 g       *ABS*	00000000 __flash_rwdata_start
008095a8 g     F .text	00000088 __eqdf2
00805498 g     F .text	00000074 _gettimeofday_r
00811f2c g       *ABS*	00000000 __alt_heap_start
00800a8c g     F .text	00000044 printf
008077d0 g     F .text	00000068 __sseek
008047e4 g     F .text	000000a4 __sinit
00805530 g     F .text	00000084 _setlocale_r
008003ec g     F .text	00000068 printRandom
008048e4 g     F .text	00000068 __sfmoreglue
008003a0 g     F .text	0000004c hexBlankAll
0080aa08 g     F .text	00000020 __malloc_unlock
0080e508 g     O .rwdata	0000000b sevenSegmentDisplay
00805f88 g     F .text	000000e0 memmove
008048d4 g     F .text	00000010 _cleanup
00806680 g     F .text	000000bc _Balloc
008096b8 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800234 g     F .text	000000ec hexOutputGeneric
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00807c90 g     F .text	00000074 _fstat_r
00811c30 g     O .bss	00000004 errno
00811c60 g     O .bss	00000004 alt_argv
00818050 g       *ABS*	00000000 _gp
0080ae68 g     F .text	00000030 usleep
0080ed50 g     O .rwdata	00000180 alt_fd_list
0080d6a8 g     F .text	00000094 alt_find_dev
008009ec g     F .text	000000a0 memcpy
008048c8 g     F .text	0000000c _cleanup_r
00809850 g     F .text	000000f8 __floatsidf
0080d34c g     F .text	00000078 alt_io_redirect
008097c8 g     F .text	00000088 __ltdf2
0080de1c g       *ABS*	00000000 __DTOR_END__
00800ba4 g     F .text	00000014 puts
0080d688 g     F .text	00000020 altera_nios2_irq_init
0080645c g     F .text	000000b0 __ratio
0080b728 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00800ad0 g     F .text	00000034 _printf_r
00800900 g     F .text	00000008 __udivsi3
0080a620 g     F .text	000000c0 isatty
0080e000 g     O .rodata	000000c8 __mprec_tens
0080550c g     F .text	00000008 __locale_charset
00811c4c g     O .bss	00000008 alt_timezone
00811c2c g     O .bss	00000001 circleCounter
0080d914 g     F .text	00000090 alt_icache_flush
00811c40 g     O .bss	00000004 __malloc_top_pad
00810058 g     O .rwdata	00000004 __mb_cur_max
00805514 g     F .text	0000000c _localeconv_r
00806d78 g     F .text	0000003c __i2b
00804e7c g     F .text	0000049c __sfvwrite_r
00807758 g     F .text	00000070 _sbrk_r
00807dec g     F .text	00000078 _read_r
0080e914 g     O .rwdata	0000000c __lc_ctype
00810078 g     O .rwdata	00000004 alt_max_fd
00809f48 g     F .text	00000138 __unpack_d
00807b6c g     F .text	00000110 _fclose_r
00804748 g     F .text	00000034 fflush
00811c44 g     O .bss	00000004 __malloc_max_sbrked_mem
00808f18 g     F .text	00000074 __adddf3
0080633c g     F .text	00000120 __b2d
008084d8 g     F .text	000005b0 __umoddi3
0080a82c g     F .text	000000f0 lseek
00810054 g     O .rwdata	00000004 _global_impure_ptr
00800500 g     F .text	0000009c segmentCounter
008070f4 g     F .text	000005f4 _realloc_r
00811f2c g       *ABS*	00000000 __bss_end
0080d190 g     F .text	000000f8 alt_iic_isr_register
0080ad5c g     F .text	0000010c alt_tick
00807efc g     F .text	000005dc __udivdi3
0080e0c8 g     O .rodata	00000028 __mprec_bigtens
00806fd4 g     F .text	00000120 __s2b
00809a20 g     F .text	00000194 __floatunsidf
0080625c g     F .text	00000060 __mcmp
00810094 g     O .rwdata	00000004 __ctype_ptr
008048b0 g     F .text	00000018 __fp_lock_all
0080d148 g     F .text	00000048 alt_ic_irq_enabled
0080acc4 g     F .text	00000098 alt_alarm_stop
00811c70 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
0080ed28 g     O .rwdata	00000028 alt_dev_null
0080cd6c g     F .text	00000044 alt_dcache_flush_all
00806128 g     F .text	00000070 __hi0bits
00809948 g     F .text	000000d8 __fixdfsi
00810098 g       *ABS*	00000000 __ram_rwdata_end
00810070 g     O .rwdata	00000008 alt_dev_list
0080ae98 g     F .text	00000120 write
0080e508 g       *ABS*	00000000 __ram_rodata_end
0080a2d0 g     F .text	000000d4 fstat
00806eb4 g     F .text	00000120 __pow5mult
00811c34 g     O .bss	00000004 __nlocale_changed
00800908 g     F .text	00000008 __umodsi3
00811f2c g       *ABS*	00000000 end
0080c360 g     F .text	0000050c altera_avalon_lcd_16207_write
0080b228 g     F .text	000000c0 altera_avalon_jtag_uart_init
0080de18 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00809bb4 g     F .text	00000080 __clzsi2
0080b94c g     F .text	00000240 altera_avalon_jtag_uart_write
008047d4 g     F .text	00000004 __sfp_lock_acquire
00805ea4 g     F .text	000000e4 memchr
00800d74 g     F .text	00001eac ___vfprintf_internal_r
00804b68 g     F .text	00000314 _free_r
0080db9c g     F .text	000001b0 __call_exitprocs
00811c38 g     O .bss	00000004 __mlocale_changed
00810064 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
00811c68 g     O .bss	00000004 _alt_tick_rate
00800bd4 g     F .text	00000078 rand
00806a44 g     F .text	0000014c __lshift
00811c6c g     O .bss	00000004 _alt_nticks
0080aa28 g     F .text	00000120 read
0080b04c g     F .text	0000005c alt_sys_init
0080da64 g     F .text	00000134 __register_exitproc
00806b90 g     F .text	000001e8 __multiply
0080b5c0 g     F .text	00000074 altera_avalon_jtag_uart_close
0080e508 g       *ABS*	00000000 __ram_rwdata_start
0080de1c g       *ABS*	00000000 __ram_rodata_start
00811c74 g     O .bss	00000028 __malloc_current_mallinfo
0080673c g     F .text	0000017c __d2b
0080b0e0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080d85c g     F .text	000000b8 alt_get_fd
0080cc20 g     F .text	0000014c alt_busy_sleep
0080a080 g     F .text	000000c8 __fpcmp_parts_d
00807afc g     F .text	00000070 _close_r
0080d9f0 g     F .text	00000074 memcmp
0080b190 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00811f2c g       *ABS*	00000000 __alt_stack_base
0080b1d8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00800910 g     F .text	0000009c _fwrite_r
00802c44 g     F .text	0000013c __swsetup_r
00809350 g     F .text	00000258 __divdf3
0080494c g     F .text	000000f0 __sfp
008065a0 g     F .text	00000058 __copybits
0080e920 g     O .rwdata	00000408 __malloc_av_
008047e0 g     F .text	00000004 __sinit_lock_release
00808f8c g     F .text	000003c4 __muldf3
008078b4 g     F .text	00000060 __sread
0080d73c g     F .text	00000120 alt_find_file
0080cdb0 g     F .text	000000b4 alt_dev_llist_insert
0080a9e8 g     F .text	00000020 __malloc_lock
0080ac08 g     F .text	000000bc sbrk
0080454c g     F .text	000001fc _fflush_r
00807a48 g     F .text	000000b4 _calloc_r
0080a404 g     F .text	0000021c gettimeofday
00811c28 g       *ABS*	00000000 __bss_start
00806068 g     F .text	00000098 memset
0080059c g     F .text	00000228 main
00811c64 g     O .bss	00000004 alt_envp
00811c48 g     O .bss	00000004 __malloc_max_total_mem
0080b138 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00800bb8 g     F .text	0000001c srand
0080c938 g     F .text	0000013c altera_avalon_lcd_16207_init
008077c8 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00807c7c g     F .text	00000014 fclose
00811d9c g     O .bss	00000190 _atexit0
00802f98 g     F .text	000015b4 _dtoa_r
00805764 g     F .text	00000740 _malloc_r
00800cc0 g     F .text	0000005c time
0081007c g     O .rwdata	00000004 alt_errno
008053e0 g     F .text	000000b8 _fwalk
00800840 g     F .text	00000060 __divsi3
0080e124 g     O .rodata	00000014 __thenan_df
00804a3c g     F .text	0000012c _malloc_trim_r
0080de1c g       *ABS*	00000000 __CTOR_END__
00807914 g     F .text	000000bc strcmp
0080de1c g       *ABS*	00000000 __flash_rodata_start
0080de1c g       *ABS*	00000000 __DTOR_LIST__
00809630 g     F .text	00000088 __nedf2
0080b018 g     F .text	00000034 alt_irq_init
0080aba8 g     F .text	00000060 alt_release_fd
0080e138 g     O .rodata	00000100 __clz_tab
00811c3c g     O .bss	00000004 _PathLocale
0080d9a4 g     F .text	00000014 atexit
008079d0 g     F .text	00000078 _write_r
008055b4 g     F .text	0000001c setlocale
0080036c g     F .text	00000034 hexOutputBlank
00810050 g     O .rwdata	00000004 _impure_ptr
00811c5c g     O .bss	00000004 alt_argc
0080cf28 g     F .text	00000064 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
008062bc g     F .text	00000080 __ulp
008076e8 g     F .text	00000040 __isinfd
00804898 g     F .text	00000018 __fp_unlock_all
0080ca74 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
00810068 g     O .rwdata	00000008 alt_fs_list
00811c54 g     O .bss	00000008 alt_resettime
00800020 g       *ABS*	00000000 __ram_exceptions_start
00800320 g     F .text	0000004c hexOutputNumber
00805520 g     F .text	00000010 localeconv
0080cfbc g     F .text	00000050 alt_ic_isr_register
008009ac g     F .text	00000040 fwrite
00800200 g     F .text	00000034 setUp
00810098 g       *ABS*	00000000 _edata
00811f2c g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080b634 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080d0a8 g     F .text	000000a0 alt_ic_irq_disable
00807838 g     F .text	0000007c __swrite
00810060 g     O .rwdata	00000004 __malloc_trim_threshold
0080d9b8 g     F .text	00000038 exit
00805318 g     F .text	000000c8 _fwalk_reent
008068b8 g     F .text	0000018c __mdiff
008008a0 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008047d8 g     F .text	00000004 __sfp_lock_release
0080e284 g     O .rodata	00000101 _ctype_
0080dd8c g     F .text	00000020 _exit
00807728 g     F .text	00000030 __isnand
0080cacc g     F .text	00000154 alt_alarm_start
00807e64 g     F .text	00000098 __muldi3
008055d0 g     F .text	00000194 __smakebuf_r
00800c4c g     F .text	00000074 strlen
0080d4a0 g     F .text	00000188 open
00809740 g     F .text	00000088 __gedf2
0080cf8c g     F .text	00000030 alt_icache_flush_all
00810090 g     O .rwdata	00000004 alt_priority_mask
0080d00c g     F .text	0000009c alt_ic_irq_enable
00802c20 g     F .text	00000024 __vfprintf_internal
00808e98 g     F .text	00000080 __subdf3
00811c28 g     O .bss	00000004 currentSegCount
00806198 g     F .text	000000c4 __lo0bits
00810084 g     O .rwdata	00000008 alt_alarm_list
0080cec4 g     F .text	00000064 _do_ctors
0080a148 g     F .text	000000fc close
0080a740 g     F .text	00000080 alt_load
00809c34 g     F .text	00000314 __pack_d
00800454 g     F .text	000000ac segmentCircle
00000000  w      *UND*	00000000 free
008047dc g     F .text	00000004 __sinit_lock_acquire
00806db4 g     F .text	00000100 __multadd
00806100 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18c72704 	addi	r3,r3,7324
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18c72704 	addi	r3,r3,7324
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d6a01414 	ori	gp,gp,32848
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001d8:	10870a14 	ori	r2,r2,7208

    movhi r3, %hi(__bss_end)
  8001dc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001e0:	18c7cb14 	ori	r3,r3,7980

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	080a7400 	call	80a740 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	080a97c0 	call	80a97c <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <setUp>:
//array of digits on a seven segment display from 0 to 9
alt_u8 sevenSegmentDisplay[11] = { 64, 121, 36, 48, 25, 18, 2, 120, 0, 16, blank };
alt_u32 currentSegCount = 0;
alt_u8 circleCounter = 0;

void setUp(void) {
  800200:	defffe04 	addi	sp,sp,-8
  800204:	dfc00115 	stw	ra,4(sp)
  800208:	df000015 	stw	fp,0(sp)
  80020c:	d839883a 	mov	fp,sp
	//setting up the seed for the random number generator
	srand(time(NULL));
  800210:	0009883a 	mov	r4,zero
  800214:	0800cc00 	call	800cc0 <time>
  800218:	1009883a 	mov	r4,r2
  80021c:	0800bb80 	call	800bb8 <srand>
}
  800220:	e037883a 	mov	sp,fp
  800224:	dfc00117 	ldw	ra,4(sp)
  800228:	df000017 	ldw	fp,0(sp)
  80022c:	dec00204 	addi	sp,sp,8
  800230:	f800283a 	ret

00800234 <hexOutputGeneric>:

void hexOutputGeneric(int location, int value) {
  800234:	defffd04 	addi	sp,sp,-12
  800238:	df000215 	stw	fp,8(sp)
  80023c:	df000204 	addi	fp,sp,8
  800240:	e13ffe15 	stw	r4,-8(fp)
  800244:	e17fff15 	stw	r5,-4(fp)
	switch (location) {
  800248:	e0bffe17 	ldw	r2,-8(fp)
  80024c:	10800228 	cmpgeui	r2,r2,8
  800250:	10002f1e 	bne	r2,zero,800310 <hexOutputGeneric+0xdc>
  800254:	e0bffe17 	ldw	r2,-8(fp)
  800258:	1085883a 	add	r2,r2,r2
  80025c:	1087883a 	add	r3,r2,r2
  800260:	00802034 	movhi	r2,128
  800264:	10809d04 	addi	r2,r2,628
  800268:	1885883a 	add	r2,r3,r2
  80026c:	10800017 	ldw	r2,0(r2)
  800270:	1000683a 	jmp	r2
  800274:	00800294 	movui	r2,10
  800278:	008002a4 	muli	r2,zero,10
  80027c:	008002b4 	movhi	r2,10
  800280:	008002c4 	movi	r2,11
  800284:	008002d4 	movui	r2,11
  800288:	008002e4 	muli	r2,zero,11
  80028c:	008002f4 	movhi	r2,11
  800290:	00800304 	movi	r2,12
		case 0:
			IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, value);
  800294:	0007883a 	mov	r3,zero
  800298:	e0bfff17 	ldw	r2,-4(fp)
  80029c:	18800035 	stwio	r2,0(r3)
			break;
  8002a0:	00001b06 	br	800310 <hexOutputGeneric+0xdc>
		case 1:
			IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, value);
  8002a4:	00c00404 	movi	r3,16
  8002a8:	e0bfff17 	ldw	r2,-4(fp)
  8002ac:	18800035 	stwio	r2,0(r3)
			break;
  8002b0:	00001706 	br	800310 <hexOutputGeneric+0xdc>
		case 2:
			IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, value);
  8002b4:	00c00804 	movi	r3,32
  8002b8:	e0bfff17 	ldw	r2,-4(fp)
  8002bc:	18800035 	stwio	r2,0(r3)
			break;
  8002c0:	00001306 	br	800310 <hexOutputGeneric+0xdc>
		case 3:
			IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, value);
  8002c4:	00c00c04 	movi	r3,48
  8002c8:	e0bfff17 	ldw	r2,-4(fp)
  8002cc:	18800035 	stwio	r2,0(r3)
			break;
  8002d0:	00000f06 	br	800310 <hexOutputGeneric+0xdc>
		case 4:
			IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, value);
  8002d4:	00c01004 	movi	r3,64
  8002d8:	e0bfff17 	ldw	r2,-4(fp)
  8002dc:	18800035 	stwio	r2,0(r3)
			break;
  8002e0:	00000b06 	br	800310 <hexOutputGeneric+0xdc>
		case 5:
			IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, value);
  8002e4:	00c01404 	movi	r3,80
  8002e8:	e0bfff17 	ldw	r2,-4(fp)
  8002ec:	18800035 	stwio	r2,0(r3)
			break;
  8002f0:	00000706 	br	800310 <hexOutputGeneric+0xdc>
		case 6:
			IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, value);
  8002f4:	00c01804 	movi	r3,96
  8002f8:	e0bfff17 	ldw	r2,-4(fp)
  8002fc:	18800035 	stwio	r2,0(r3)
			break;
  800300:	00000306 	br	800310 <hexOutputGeneric+0xdc>
		case 7:
			IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, value);
  800304:	00c01c04 	movi	r3,112
  800308:	e0bfff17 	ldw	r2,-4(fp)
  80030c:	18800035 	stwio	r2,0(r3)
			break;
	}
}
  800310:	e037883a 	mov	sp,fp
  800314:	df000017 	ldw	fp,0(sp)
  800318:	dec00104 	addi	sp,sp,4
  80031c:	f800283a 	ret

00800320 <hexOutputNumber>:

void hexOutputNumber(int location, int value) {
  800320:	defffc04 	addi	sp,sp,-16
  800324:	dfc00315 	stw	ra,12(sp)
  800328:	df000215 	stw	fp,8(sp)
  80032c:	df000204 	addi	fp,sp,8
  800330:	e13ffe15 	stw	r4,-8(fp)
  800334:	e17fff15 	stw	r5,-4(fp)
	hexOutputGeneric(location, sevenSegmentDisplay[value]);
  800338:	e0ffff17 	ldw	r3,-4(fp)
  80033c:	00802074 	movhi	r2,129
  800340:	10b94204 	addi	r2,r2,-6904
  800344:	10c5883a 	add	r2,r2,r3
  800348:	10800003 	ldbu	r2,0(r2)
  80034c:	11403fcc 	andi	r5,r2,255
  800350:	e13ffe17 	ldw	r4,-8(fp)
  800354:	08002340 	call	800234 <hexOutputGeneric>
}
  800358:	e037883a 	mov	sp,fp
  80035c:	dfc00117 	ldw	ra,4(sp)
  800360:	df000017 	ldw	fp,0(sp)
  800364:	dec00204 	addi	sp,sp,8
  800368:	f800283a 	ret

0080036c <hexOutputBlank>:

void hexOutputBlank(int location) {
  80036c:	defffd04 	addi	sp,sp,-12
  800370:	dfc00215 	stw	ra,8(sp)
  800374:	df000115 	stw	fp,4(sp)
  800378:	df000104 	addi	fp,sp,4
  80037c:	e13fff15 	stw	r4,-4(fp)
	hexOutputNumber(location, 10);
  800380:	e13fff17 	ldw	r4,-4(fp)
  800384:	01400284 	movi	r5,10
  800388:	08003200 	call	800320 <hexOutputNumber>
}
  80038c:	e037883a 	mov	sp,fp
  800390:	dfc00117 	ldw	ra,4(sp)
  800394:	df000017 	ldw	fp,0(sp)
  800398:	dec00204 	addi	sp,sp,8
  80039c:	f800283a 	ret

008003a0 <hexBlankAll>:

void hexBlankAll(void){
  8003a0:	defffd04 	addi	sp,sp,-12
  8003a4:	dfc00215 	stw	ra,8(sp)
  8003a8:	df000115 	stw	fp,4(sp)
  8003ac:	df000104 	addi	fp,sp,4
	int i = 0;
  8003b0:	e03fff15 	stw	zero,-4(fp)
	while(i < 8){
  8003b4:	00000506 	br	8003cc <hexBlankAll+0x2c>
		hexOutputBlank(i);
  8003b8:	e13fff17 	ldw	r4,-4(fp)
  8003bc:	080036c0 	call	80036c <hexOutputBlank>
		i++;
  8003c0:	e0bfff17 	ldw	r2,-4(fp)
  8003c4:	10800044 	addi	r2,r2,1
  8003c8:	e0bfff15 	stw	r2,-4(fp)
	hexOutputNumber(location, 10);
}

void hexBlankAll(void){
	int i = 0;
	while(i < 8){
  8003cc:	e0bfff17 	ldw	r2,-4(fp)
  8003d0:	10800210 	cmplti	r2,r2,8
  8003d4:	103ff81e 	bne	r2,zero,8003b8 <hexBlankAll+0x18>
		hexOutputBlank(i);
		i++;
	}
}
  8003d8:	e037883a 	mov	sp,fp
  8003dc:	dfc00117 	ldw	ra,4(sp)
  8003e0:	df000017 	ldw	fp,0(sp)
  8003e4:	dec00204 	addi	sp,sp,8
  8003e8:	f800283a 	ret

008003ec <printRandom>:

void printRandom(void) {
  8003ec:	defffc04 	addi	sp,sp,-16
  8003f0:	dfc00315 	stw	ra,12(sp)
  8003f4:	df000215 	stw	fp,8(sp)
  8003f8:	df000204 	addi	fp,sp,8
	int rngNum = 0;
  8003fc:	e03fff15 	stw	zero,-4(fp)
	int i = 0;
  800400:	e03ffe15 	stw	zero,-8(fp)
	while (i < 8) {
  800404:	00000b06 	br	800434 <printRandom+0x48>
		rngNum = rand() % 10;
  800408:	0800bd40 	call	800bd4 <rand>
  80040c:	1009883a 	mov	r4,r2
  800410:	01400284 	movi	r5,10
  800414:	08008a00 	call	8008a0 <__modsi3>
  800418:	e0bfff15 	stw	r2,-4(fp)
		hexOutputNumber(i, rngNum);
  80041c:	e13ffe17 	ldw	r4,-8(fp)
  800420:	e17fff17 	ldw	r5,-4(fp)
  800424:	08003200 	call	800320 <hexOutputNumber>
		i++;
  800428:	e0bffe17 	ldw	r2,-8(fp)
  80042c:	10800044 	addi	r2,r2,1
  800430:	e0bffe15 	stw	r2,-8(fp)
}

void printRandom(void) {
	int rngNum = 0;
	int i = 0;
	while (i < 8) {
  800434:	e0bffe17 	ldw	r2,-8(fp)
  800438:	10800210 	cmplti	r2,r2,8
  80043c:	103ff21e 	bne	r2,zero,800408 <printRandom+0x1c>
		rngNum = rand() % 10;
		hexOutputNumber(i, rngNum);
		i++;
	}
}
  800440:	e037883a 	mov	sp,fp
  800444:	dfc00117 	ldw	ra,4(sp)
  800448:	df000017 	ldw	fp,0(sp)
  80044c:	dec00204 	addi	sp,sp,8
  800450:	f800283a 	ret

00800454 <segmentCircle>:

void segmentCircle(void) {
  800454:	defff404 	addi	sp,sp,-48
  800458:	dfc00b15 	stw	ra,44(sp)
  80045c:	df000a15 	stw	fp,40(sp)
  800460:	df000a04 	addi	fp,sp,40
	alt_u8 location[20] = { 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 6, 5, 4,
			3, 2, 1 };
  800464:	00802074 	movhi	r2,129
  800468:	10b78c04 	addi	r2,r2,-8656
  80046c:	e13ff604 	addi	r4,fp,-40
  800470:	100b883a 	mov	r5,r2
  800474:	01800504 	movi	r6,20
  800478:	08009ec0 	call	8009ec <memcpy>
	alt_u8 value[20] = { segTop, segTopR, segLowR, segLow, segLow, segLow,
			segLow, segLow, segLow, segLow, segLow, segLowL, segTopL, segTop,
			segTop, segTop, segTop, segTop, segTop, segTop };
  80047c:	00802074 	movhi	r2,129
  800480:	10b78704 	addi	r2,r2,-8676
  800484:	e13ffb04 	addi	r4,fp,-20
  800488:	100b883a 	mov	r5,r2
  80048c:	01800504 	movi	r6,20
  800490:	08009ec0 	call	8009ec <memcpy>
	hexBlankAll();
  800494:	08003a00 	call	8003a0 <hexBlankAll>
	hexOutputGeneric(location[circleCounter], value[circleCounter]);
  800498:	d0a6f703 	ldbu	r2,-25636(gp)
  80049c:	10803fcc 	andi	r2,r2,255
  8004a0:	e0fff604 	addi	r3,fp,-40
  8004a4:	1885883a 	add	r2,r3,r2
  8004a8:	10800003 	ldbu	r2,0(r2)
  8004ac:	11003fcc 	andi	r4,r2,255
  8004b0:	d0a6f703 	ldbu	r2,-25636(gp)
  8004b4:	10c03fcc 	andi	r3,r2,255
  8004b8:	e0bffb04 	addi	r2,fp,-20
  8004bc:	10c5883a 	add	r2,r2,r3
  8004c0:	10800003 	ldbu	r2,0(r2)
  8004c4:	11403fcc 	andi	r5,r2,255
  8004c8:	08002340 	call	800234 <hexOutputGeneric>
	circleCounter++;
  8004cc:	d0a6f703 	ldbu	r2,-25636(gp)
  8004d0:	10800044 	addi	r2,r2,1
  8004d4:	d0a6f705 	stb	r2,-25636(gp)
	if(circleCounter > 19){
  8004d8:	d0a6f703 	ldbu	r2,-25636(gp)
  8004dc:	10803fcc 	andi	r2,r2,255
  8004e0:	10800530 	cmpltui	r2,r2,20
  8004e4:	1000011e 	bne	r2,zero,8004ec <segmentCircle+0x98>
		circleCounter = 0;
  8004e8:	d026f705 	stb	zero,-25636(gp)
	}

}
  8004ec:	e037883a 	mov	sp,fp
  8004f0:	dfc00117 	ldw	ra,4(sp)
  8004f4:	df000017 	ldw	fp,0(sp)
  8004f8:	dec00204 	addi	sp,sp,8
  8004fc:	f800283a 	ret

00800500 <segmentCounter>:

void segmentCounter(void) {
  800500:	defffb04 	addi	sp,sp,-20
  800504:	dfc00415 	stw	ra,16(sp)
  800508:	df000315 	stw	fp,12(sp)
  80050c:	df000304 	addi	fp,sp,12
	//resets counter when it reaches 99,999,999
	if (currentSegCount >= 100000000) {
  800510:	d0e6f617 	ldw	r3,-25640(gp)
  800514:	00817db4 	movhi	r2,1526
  800518:	10b83fc4 	addi	r2,r2,-7937
  80051c:	10c0012e 	bgeu	r2,r3,800524 <segmentCounter+0x24>
		currentSegCount = 0;
  800520:	d026f615 	stw	zero,-25640(gp)
	}
	//displaying the current count.
	int i = 0;
  800524:	e03fff15 	stw	zero,-4(fp)
	int displayNumber = 0;
  800528:	e03ffe15 	stw	zero,-8(fp)
	int temp = currentSegCount;
  80052c:	d0a6f617 	ldw	r2,-25640(gp)
  800530:	e0bffd15 	stw	r2,-12(fp)
	while (i < 8) {
  800534:	00000e06 	br	800570 <segmentCounter+0x70>
		//grabs the last digit
		displayNumber = temp % 10;
  800538:	e13ffd17 	ldw	r4,-12(fp)
  80053c:	01400284 	movi	r5,10
  800540:	08008a00 	call	8008a0 <__modsi3>
  800544:	e0bffe15 	stw	r2,-8(fp)
		//displays the digit on the appropriate seven segment display
		hexOutputNumber(i, displayNumber);
  800548:	e13fff17 	ldw	r4,-4(fp)
  80054c:	e17ffe17 	ldw	r5,-8(fp)
  800550:	08003200 	call	800320 <hexOutputNumber>
		//shifts to the next digit.
		temp = temp / 10;
  800554:	e13ffd17 	ldw	r4,-12(fp)
  800558:	01400284 	movi	r5,10
  80055c:	08008400 	call	800840 <__divsi3>
  800560:	e0bffd15 	stw	r2,-12(fp)
		i++;
  800564:	e0bfff17 	ldw	r2,-4(fp)
  800568:	10800044 	addi	r2,r2,1
  80056c:	e0bfff15 	stw	r2,-4(fp)
	}
	//displaying the current count.
	int i = 0;
	int displayNumber = 0;
	int temp = currentSegCount;
	while (i < 8) {
  800570:	e0bfff17 	ldw	r2,-4(fp)
  800574:	10800210 	cmplti	r2,r2,8
  800578:	103fef1e 	bne	r2,zero,800538 <segmentCounter+0x38>
		hexOutputNumber(i, displayNumber);
		//shifts to the next digit.
		temp = temp / 10;
		i++;
	}
	currentSegCount++;
  80057c:	d0a6f617 	ldw	r2,-25640(gp)
  800580:	10800044 	addi	r2,r2,1
  800584:	d0a6f615 	stw	r2,-25640(gp)
}
  800588:	e037883a 	mov	sp,fp
  80058c:	dfc00117 	ldw	ra,4(sp)
  800590:	df000017 	ldw	fp,0(sp)
  800594:	dec00204 	addi	sp,sp,8
  800598:	f800283a 	ret

0080059c <main>:
#include <stdlib.h>
#include "LightsFunctions.h"
#include "altera_avalon_pio_regs.h"
#include "alt_types.h"

int main() {
  80059c:	defffa04 	addi	sp,sp,-24
  8005a0:	dfc00515 	stw	ra,20(sp)
  8005a4:	df000415 	stw	fp,16(sp)
  8005a8:	df000404 	addi	fp,sp,16

	alt_u32 current_value = 1;
  8005ac:	00800044 	movi	r2,1
  8005b0:	e0bfff15 	stw	r2,-4(fp)
	alt_u32 current_state = 3;
  8005b4:	008000c4 	movi	r2,3
  8005b8:	e0bffe15 	stw	r2,-8(fp)
	alt_u8 current_direction = 0;
  8005bc:	e03ffd05 	stb	zero,-12(fp)
	alt_u32 keys = 0;
  8005c0:	e03ffc15 	stw	zero,-16(fp)

	printf("Program running (UART)...\n");
  8005c4:	01002074 	movhi	r4,129
  8005c8:	21379104 	addi	r4,r4,-8636
  8005cc:	0800ba40 	call	800ba4 <puts>
	fprintf(stderr, "Program running (LCD)...\n");
  8005d0:	00802074 	movhi	r2,129
  8005d4:	10801404 	addi	r2,r2,80
  8005d8:	10800017 	ldw	r2,0(r2)
  8005dc:	11c00317 	ldw	r7,12(r2)
  8005e0:	01002074 	movhi	r4,129
  8005e4:	21379804 	addi	r4,r4,-8608
  8005e8:	01400044 	movi	r5,1
  8005ec:	01800644 	movi	r6,25
  8005f0:	08009ac0 	call	8009ac <fwrite>
	setUp();
  8005f4:	08002000 	call	800200 <setUp>
  8005f8:	00000006 	br	8005fc <main+0x60>
	while (1) {
		//reading the current state of the keys
		keys = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
  8005fc:	00804034 	movhi	r2,256
  800600:	10840404 	addi	r2,r2,4112
  800604:	10800037 	ldwio	r2,0(r2)
  800608:	e0bffc15 	stw	r2,-16(fp)

		//switching speeds if necessary
		if ((keys != key0) && (keys != current_state)) {
  80060c:	e0bffc17 	ldw	r2,-16(fp)
  800610:	108001e0 	cmpeqi	r2,r2,7
  800614:	1000381e 	bne	r2,zero,8006f8 <main+0x15c>
  800618:	e0fffc17 	ldw	r3,-16(fp)
  80061c:	e0bffe17 	ldw	r2,-8(fp)
  800620:	18803526 	beq	r3,r2,8006f8 <main+0x15c>

			//switches speed to 250 ms and displays a random number
			if (keys == key3) {
  800624:	e0bffc17 	ldw	r2,-16(fp)
  800628:	108000d8 	cmpnei	r2,r2,3
  80062c:	10000d1e 	bne	r2,zero,800664 <main+0xc8>
				printf("speed set to 250 ms\n");
  800630:	01002074 	movhi	r4,129
  800634:	21379f04 	addi	r4,r4,-8580
  800638:	0800ba40 	call	800ba4 <puts>
				fprintf(stderr, "Speed set 250 ms\n");
  80063c:	00802074 	movhi	r2,129
  800640:	10801404 	addi	r2,r2,80
  800644:	10800017 	ldw	r2,0(r2)
  800648:	11c00317 	ldw	r7,12(r2)
  80064c:	01002074 	movhi	r4,129
  800650:	2137a404 	addi	r4,r4,-8560
  800654:	01400044 	movi	r5,1
  800658:	01800444 	movi	r6,17
  80065c:	08009ac0 	call	8009ac <fwrite>
  800660:	00002306 	br	8006f0 <main+0x154>

			}
			else if (keys == key2) {
  800664:	e0bffc17 	ldw	r2,-16(fp)
  800668:	10800158 	cmpnei	r2,r2,5
  80066c:	10000d1e 	bne	r2,zero,8006a4 <main+0x108>
				printf("speed set to 150 ms\n");
  800670:	01002074 	movhi	r4,129
  800674:	2137a904 	addi	r4,r4,-8540
  800678:	0800ba40 	call	800ba4 <puts>
				fprintf(stderr, "Speed set 150 ms\n");
  80067c:	00802074 	movhi	r2,129
  800680:	10801404 	addi	r2,r2,80
  800684:	10800017 	ldw	r2,0(r2)
  800688:	11c00317 	ldw	r7,12(r2)
  80068c:	01002074 	movhi	r4,129
  800690:	2137ae04 	addi	r4,r4,-8520
  800694:	01400044 	movi	r5,1
  800698:	01800444 	movi	r6,17
  80069c:	08009ac0 	call	8009ac <fwrite>
  8006a0:	00001306 	br	8006f0 <main+0x154>

			}
			else if (keys == key1) {
  8006a4:	e0bffc17 	ldw	r2,-16(fp)
  8006a8:	10800198 	cmpnei	r2,r2,6
  8006ac:	10000d1e 	bne	r2,zero,8006e4 <main+0x148>
				printf("speed set to 50 ms\n");
  8006b0:	01002074 	movhi	r4,129
  8006b4:	2137b304 	addi	r4,r4,-8500
  8006b8:	0800ba40 	call	800ba4 <puts>
				fprintf(stderr, "Speed set 50 ms\n");
  8006bc:	00802074 	movhi	r2,129
  8006c0:	10801404 	addi	r2,r2,80
  8006c4:	10800017 	ldw	r2,0(r2)
  8006c8:	11c00317 	ldw	r7,12(r2)
  8006cc:	01002074 	movhi	r4,129
  8006d0:	2137b804 	addi	r4,r4,-8480
  8006d4:	01400044 	movi	r5,1
  8006d8:	01800404 	movi	r6,16
  8006dc:	08009ac0 	call	8009ac <fwrite>
  8006e0:	00000306 	br	8006f0 <main+0x154>

			}
			else
				printf("keys != 3, 5, or 6. Stop hitting multiple buttons.");
  8006e4:	01002074 	movhi	r4,129
  8006e8:	2137bd04 	addi	r4,r4,-8460
  8006ec:	0800a8c0 	call	800a8c <printf>
			current_state = keys;
  8006f0:	e0bffc17 	ldw	r2,-16(fp)
  8006f4:	e0bffe15 	stw	r2,-8(fp)
		}

		//switches current direction if necessary
		//For current_direction 0 denotes RIGHT, 1 denotes LEFT
		if ((current_direction == 0) && (current_value == (1 << 25)))
  8006f8:	e0bffd03 	ldbu	r2,-12(fp)
  8006fc:	1004c03a 	cmpne	r2,r2,zero
  800700:	1000061e 	bne	r2,zero,80071c <main+0x180>
  800704:	e0ffff17 	ldw	r3,-4(fp)
  800708:	00808034 	movhi	r2,512
  80070c:	1880031e 	bne	r3,r2,80071c <main+0x180>
			current_direction = 1;
  800710:	00800044 	movi	r2,1
  800714:	e0bffd05 	stb	r2,-12(fp)
			current_state = keys;
		}

		//switches current direction if necessary
		//For current_direction 0 denotes RIGHT, 1 denotes LEFT
		if ((current_direction == 0) && (current_value == (1 << 25)))
  800718:	00001206 	br	800764 <main+0x1c8>
			current_direction = 1;
		else if ((current_direction == 1) && (current_value == 1))
  80071c:	e0bffd03 	ldbu	r2,-12(fp)
  800720:	10800058 	cmpnei	r2,r2,1
  800724:	1000051e 	bne	r2,zero,80073c <main+0x1a0>
  800728:	e0bfff17 	ldw	r2,-4(fp)
  80072c:	10800058 	cmpnei	r2,r2,1
  800730:	1000021e 	bne	r2,zero,80073c <main+0x1a0>
			current_direction = 0;
  800734:	e03ffd05 	stb	zero,-12(fp)

		//switches current direction if necessary
		//For current_direction 0 denotes RIGHT, 1 denotes LEFT
		if ((current_direction == 0) && (current_value == (1 << 25)))
			current_direction = 1;
		else if ((current_direction == 1) && (current_value == 1))
  800738:	00000a06 	br	800764 <main+0x1c8>
			current_direction = 0;
		//moving the light
		else if (current_direction == 0)
  80073c:	e0bffd03 	ldbu	r2,-12(fp)
  800740:	1004c03a 	cmpne	r2,r2,zero
  800744:	1000041e 	bne	r2,zero,800758 <main+0x1bc>
			current_value = current_value << 1;
  800748:	e0bfff17 	ldw	r2,-4(fp)
  80074c:	1085883a 	add	r2,r2,r2
  800750:	e0bfff15 	stw	r2,-4(fp)
  800754:	00000306 	br	800764 <main+0x1c8>
		else
			current_value = current_value >> 1;
  800758:	e0bfff17 	ldw	r2,-4(fp)
  80075c:	1004d07a 	srli	r2,r2,1
  800760:	e0bfff15 	stw	r2,-4(fp)
		//updating the lights
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, current_value);
  800764:	e0ffff17 	ldw	r3,-4(fp)
  800768:	00804034 	movhi	r2,256
  80076c:	10840004 	addi	r2,r2,4096
  800770:	10c00035 	stwio	r3,0(r2)

		//sleep
		if (current_state == key3) {
  800774:	e0bffe17 	ldw	r2,-8(fp)
  800778:	108000d8 	cmpnei	r2,r2,3
  80077c:	1000051e 	bne	r2,zero,800794 <main+0x1f8>
			printRandom();
  800780:	08003ec0 	call	8003ec <printRandom>
			usleep(250000);
  800784:	01000134 	movhi	r4,4
  800788:	21342404 	addi	r4,r4,-12144
  80078c:	080ae680 	call	80ae68 <usleep>
  800790:	003f9a06 	br	8005fc <main+0x60>
		}
		else if (current_state == key2) {
  800794:	e0bffe17 	ldw	r2,-8(fp)
  800798:	10800158 	cmpnei	r2,r2,5
  80079c:	1000051e 	bne	r2,zero,8007b4 <main+0x218>
			segmentCircle();
  8007a0:	08004540 	call	800454 <segmentCircle>
			usleep(125000);
  8007a4:	010000b4 	movhi	r4,2
  8007a8:	213a1204 	addi	r4,r4,-6072
  8007ac:	080ae680 	call	80ae68 <usleep>
  8007b0:	003f9206 	br	8005fc <main+0x60>
		}
		else {
			segmentCounter();
  8007b4:	08005000 	call	800500 <segmentCounter>
			usleep(50000);
  8007b8:	0130d414 	movui	r4,50000
  8007bc:	080ae680 	call	80ae68 <usleep>
		}
	}
  8007c0:	003f8e06 	br	8005fc <main+0x60>

008007c4 <udivmodsi4>:
  8007c4:	29001b2e 	bgeu	r5,r4,800834 <udivmodsi4+0x70>
  8007c8:	28001a16 	blt	r5,zero,800834 <udivmodsi4+0x70>
  8007cc:	00800044 	movi	r2,1
  8007d0:	0007883a 	mov	r3,zero
  8007d4:	01c007c4 	movi	r7,31
  8007d8:	00000306 	br	8007e8 <udivmodsi4+0x24>
  8007dc:	19c01326 	beq	r3,r7,80082c <udivmodsi4+0x68>
  8007e0:	18c00044 	addi	r3,r3,1
  8007e4:	28000416 	blt	r5,zero,8007f8 <udivmodsi4+0x34>
  8007e8:	294b883a 	add	r5,r5,r5
  8007ec:	1085883a 	add	r2,r2,r2
  8007f0:	293ffa36 	bltu	r5,r4,8007dc <udivmodsi4+0x18>
  8007f4:	10000d26 	beq	r2,zero,80082c <udivmodsi4+0x68>
  8007f8:	0007883a 	mov	r3,zero
  8007fc:	21400236 	bltu	r4,r5,800808 <udivmodsi4+0x44>
  800800:	2149c83a 	sub	r4,r4,r5
  800804:	1886b03a 	or	r3,r3,r2
  800808:	1004d07a 	srli	r2,r2,1
  80080c:	280ad07a 	srli	r5,r5,1
  800810:	103ffa1e 	bne	r2,zero,8007fc <udivmodsi4+0x38>
  800814:	30000226 	beq	r6,zero,800820 <udivmodsi4+0x5c>
  800818:	2005883a 	mov	r2,r4
  80081c:	f800283a 	ret
  800820:	1809883a 	mov	r4,r3
  800824:	2005883a 	mov	r2,r4
  800828:	f800283a 	ret
  80082c:	0007883a 	mov	r3,zero
  800830:	003ff806 	br	800814 <udivmodsi4+0x50>
  800834:	00800044 	movi	r2,1
  800838:	0007883a 	mov	r3,zero
  80083c:	003fef06 	br	8007fc <udivmodsi4+0x38>

00800840 <__divsi3>:
  800840:	defffe04 	addi	sp,sp,-8
  800844:	dc000015 	stw	r16,0(sp)
  800848:	dfc00115 	stw	ra,4(sp)
  80084c:	0021883a 	mov	r16,zero
  800850:	20000c16 	blt	r4,zero,800884 <__divsi3+0x44>
  800854:	000d883a 	mov	r6,zero
  800858:	28000e16 	blt	r5,zero,800894 <__divsi3+0x54>
  80085c:	08007c40 	call	8007c4 <udivmodsi4>
  800860:	1007883a 	mov	r3,r2
  800864:	8005003a 	cmpeq	r2,r16,zero
  800868:	1000011e 	bne	r2,zero,800870 <__divsi3+0x30>
  80086c:	00c7c83a 	sub	r3,zero,r3
  800870:	1805883a 	mov	r2,r3
  800874:	dfc00117 	ldw	ra,4(sp)
  800878:	dc000017 	ldw	r16,0(sp)
  80087c:	dec00204 	addi	sp,sp,8
  800880:	f800283a 	ret
  800884:	0109c83a 	sub	r4,zero,r4
  800888:	04000044 	movi	r16,1
  80088c:	000d883a 	mov	r6,zero
  800890:	283ff20e 	bge	r5,zero,80085c <__divsi3+0x1c>
  800894:	014bc83a 	sub	r5,zero,r5
  800898:	8021003a 	cmpeq	r16,r16,zero
  80089c:	003fef06 	br	80085c <__divsi3+0x1c>

008008a0 <__modsi3>:
  8008a0:	deffff04 	addi	sp,sp,-4
  8008a4:	dfc00015 	stw	ra,0(sp)
  8008a8:	01800044 	movi	r6,1
  8008ac:	2807883a 	mov	r3,r5
  8008b0:	20000416 	blt	r4,zero,8008c4 <__modsi3+0x24>
  8008b4:	28000c16 	blt	r5,zero,8008e8 <__modsi3+0x48>
  8008b8:	dfc00017 	ldw	ra,0(sp)
  8008bc:	dec00104 	addi	sp,sp,4
  8008c0:	08007c41 	jmpi	8007c4 <udivmodsi4>
  8008c4:	0109c83a 	sub	r4,zero,r4
  8008c8:	28000b16 	blt	r5,zero,8008f8 <__modsi3+0x58>
  8008cc:	180b883a 	mov	r5,r3
  8008d0:	01800044 	movi	r6,1
  8008d4:	08007c40 	call	8007c4 <udivmodsi4>
  8008d8:	0085c83a 	sub	r2,zero,r2
  8008dc:	dfc00017 	ldw	ra,0(sp)
  8008e0:	dec00104 	addi	sp,sp,4
  8008e4:	f800283a 	ret
  8008e8:	014bc83a 	sub	r5,zero,r5
  8008ec:	dfc00017 	ldw	ra,0(sp)
  8008f0:	dec00104 	addi	sp,sp,4
  8008f4:	08007c41 	jmpi	8007c4 <udivmodsi4>
  8008f8:	0147c83a 	sub	r3,zero,r5
  8008fc:	003ff306 	br	8008cc <__modsi3+0x2c>

00800900 <__udivsi3>:
  800900:	000d883a 	mov	r6,zero
  800904:	08007c41 	jmpi	8007c4 <udivmodsi4>

00800908 <__umodsi3>:
  800908:	01800044 	movi	r6,1
  80090c:	08007c41 	jmpi	8007c4 <udivmodsi4>

00800910 <_fwrite_r>:
  800910:	defff604 	addi	sp,sp,-40
  800914:	dc400615 	stw	r17,24(sp)
  800918:	39a3383a 	mul	r17,r7,r6
  80091c:	00800044 	movi	r2,1
  800920:	dcc00815 	stw	r19,32(sp)
  800924:	dc800715 	stw	r18,28(sp)
  800928:	dc000515 	stw	r16,20(sp)
  80092c:	dfc00915 	stw	ra,36(sp)
  800930:	3825883a 	mov	r18,r7
  800934:	3027883a 	mov	r19,r6
  800938:	2021883a 	mov	r16,r4
  80093c:	d9400015 	stw	r5,0(sp)
  800940:	d8800315 	stw	r2,12(sp)
  800944:	dc400115 	stw	r17,4(sp)
  800948:	dc400415 	stw	r17,16(sp)
  80094c:	dec00215 	stw	sp,8(sp)
  800950:	20000226 	beq	r4,zero,80095c <_fwrite_r+0x4c>
  800954:	20800e17 	ldw	r2,56(r4)
  800958:	10001226 	beq	r2,zero,8009a4 <_fwrite_r+0x94>
  80095c:	d9400a17 	ldw	r5,40(sp)
  800960:	8009883a 	mov	r4,r16
  800964:	d9800204 	addi	r6,sp,8
  800968:	0804e7c0 	call	804e7c <__sfvwrite_r>
  80096c:	980b883a 	mov	r5,r19
  800970:	10000426 	beq	r2,zero,800984 <_fwrite_r+0x74>
  800974:	d9000417 	ldw	r4,16(sp)
  800978:	8909c83a 	sub	r4,r17,r4
  80097c:	08009000 	call	800900 <__udivsi3>
  800980:	1025883a 	mov	r18,r2
  800984:	9005883a 	mov	r2,r18
  800988:	dfc00917 	ldw	ra,36(sp)
  80098c:	dcc00817 	ldw	r19,32(sp)
  800990:	dc800717 	ldw	r18,28(sp)
  800994:	dc400617 	ldw	r17,24(sp)
  800998:	dc000517 	ldw	r16,20(sp)
  80099c:	dec00a04 	addi	sp,sp,40
  8009a0:	f800283a 	ret
  8009a4:	08047e40 	call	8047e4 <__sinit>
  8009a8:	003fec06 	br	80095c <_fwrite_r+0x4c>

008009ac <fwrite>:
  8009ac:	00802074 	movhi	r2,129
  8009b0:	10801404 	addi	r2,r2,80
  8009b4:	2017883a 	mov	r11,r4
  8009b8:	11000017 	ldw	r4,0(r2)
  8009bc:	defffe04 	addi	sp,sp,-8
  8009c0:	3013883a 	mov	r9,r6
  8009c4:	2805883a 	mov	r2,r5
  8009c8:	d9c00015 	stw	r7,0(sp)
  8009cc:	580b883a 	mov	r5,r11
  8009d0:	100d883a 	mov	r6,r2
  8009d4:	480f883a 	mov	r7,r9
  8009d8:	dfc00115 	stw	ra,4(sp)
  8009dc:	08009100 	call	800910 <_fwrite_r>
  8009e0:	dfc00117 	ldw	ra,4(sp)
  8009e4:	dec00204 	addi	sp,sp,8
  8009e8:	f800283a 	ret

008009ec <memcpy>:
  8009ec:	01c003c4 	movi	r7,15
  8009f0:	2007883a 	mov	r3,r4
  8009f4:	3980032e 	bgeu	r7,r6,800a04 <memcpy+0x18>
  8009f8:	2904b03a 	or	r2,r5,r4
  8009fc:	108000cc 	andi	r2,r2,3
  800a00:	10000926 	beq	r2,zero,800a28 <memcpy+0x3c>
  800a04:	30000626 	beq	r6,zero,800a20 <memcpy+0x34>
  800a08:	30cd883a 	add	r6,r6,r3
  800a0c:	28800003 	ldbu	r2,0(r5)
  800a10:	29400044 	addi	r5,r5,1
  800a14:	18800005 	stb	r2,0(r3)
  800a18:	18c00044 	addi	r3,r3,1
  800a1c:	30fffb1e 	bne	r6,r3,800a0c <memcpy+0x20>
  800a20:	2005883a 	mov	r2,r4
  800a24:	f800283a 	ret
  800a28:	3811883a 	mov	r8,r7
  800a2c:	200f883a 	mov	r7,r4
  800a30:	28c00017 	ldw	r3,0(r5)
  800a34:	31bffc04 	addi	r6,r6,-16
  800a38:	38c00015 	stw	r3,0(r7)
  800a3c:	28800117 	ldw	r2,4(r5)
  800a40:	38800115 	stw	r2,4(r7)
  800a44:	28c00217 	ldw	r3,8(r5)
  800a48:	38c00215 	stw	r3,8(r7)
  800a4c:	28800317 	ldw	r2,12(r5)
  800a50:	29400404 	addi	r5,r5,16
  800a54:	38800315 	stw	r2,12(r7)
  800a58:	39c00404 	addi	r7,r7,16
  800a5c:	41bff436 	bltu	r8,r6,800a30 <memcpy+0x44>
  800a60:	008000c4 	movi	r2,3
  800a64:	1180072e 	bgeu	r2,r6,800a84 <memcpy+0x98>
  800a68:	1007883a 	mov	r3,r2
  800a6c:	28800017 	ldw	r2,0(r5)
  800a70:	31bfff04 	addi	r6,r6,-4
  800a74:	29400104 	addi	r5,r5,4
  800a78:	38800015 	stw	r2,0(r7)
  800a7c:	39c00104 	addi	r7,r7,4
  800a80:	19bffa36 	bltu	r3,r6,800a6c <memcpy+0x80>
  800a84:	3807883a 	mov	r3,r7
  800a88:	003fde06 	br	800a04 <memcpy+0x18>

00800a8c <printf>:
  800a8c:	defffb04 	addi	sp,sp,-20
  800a90:	dfc00115 	stw	ra,4(sp)
  800a94:	d9400215 	stw	r5,8(sp)
  800a98:	d9800315 	stw	r6,12(sp)
  800a9c:	d9c00415 	stw	r7,16(sp)
  800aa0:	00802074 	movhi	r2,129
  800aa4:	10801404 	addi	r2,r2,80
  800aa8:	10c00017 	ldw	r3,0(r2)
  800aac:	200b883a 	mov	r5,r4
  800ab0:	d8800204 	addi	r2,sp,8
  800ab4:	19000217 	ldw	r4,8(r3)
  800ab8:	100d883a 	mov	r6,r2
  800abc:	d8800015 	stw	r2,0(sp)
  800ac0:	0802c200 	call	802c20 <__vfprintf_internal>
  800ac4:	dfc00117 	ldw	ra,4(sp)
  800ac8:	dec00504 	addi	sp,sp,20
  800acc:	f800283a 	ret

00800ad0 <_printf_r>:
  800ad0:	defffc04 	addi	sp,sp,-16
  800ad4:	dfc00115 	stw	ra,4(sp)
  800ad8:	d9800215 	stw	r6,8(sp)
  800adc:	d9c00315 	stw	r7,12(sp)
  800ae0:	280d883a 	mov	r6,r5
  800ae4:	21400217 	ldw	r5,8(r4)
  800ae8:	d8c00204 	addi	r3,sp,8
  800aec:	180f883a 	mov	r7,r3
  800af0:	d8c00015 	stw	r3,0(sp)
  800af4:	0800d740 	call	800d74 <___vfprintf_internal_r>
  800af8:	dfc00117 	ldw	ra,4(sp)
  800afc:	dec00404 	addi	sp,sp,16
  800b00:	f800283a 	ret

00800b04 <_puts_r>:
  800b04:	defff604 	addi	sp,sp,-40
  800b08:	dc400715 	stw	r17,28(sp)
  800b0c:	2023883a 	mov	r17,r4
  800b10:	2809883a 	mov	r4,r5
  800b14:	dfc00915 	stw	ra,36(sp)
  800b18:	dcc00815 	stw	r19,32(sp)
  800b1c:	2827883a 	mov	r19,r5
  800b20:	0800c4c0 	call	800c4c <strlen>
  800b24:	89400217 	ldw	r5,8(r17)
  800b28:	00c02074 	movhi	r3,129
  800b2c:	18f7cb04 	addi	r3,r3,-8404
  800b30:	01c00044 	movi	r7,1
  800b34:	12000044 	addi	r8,r2,1
  800b38:	d8c00515 	stw	r3,20(sp)
  800b3c:	d9c00615 	stw	r7,24(sp)
  800b40:	d8c00304 	addi	r3,sp,12
  800b44:	01c00084 	movi	r7,2
  800b48:	8809883a 	mov	r4,r17
  800b4c:	d80d883a 	mov	r6,sp
  800b50:	d8c00015 	stw	r3,0(sp)
  800b54:	dcc00315 	stw	r19,12(sp)
  800b58:	da000215 	stw	r8,8(sp)
  800b5c:	d9c00115 	stw	r7,4(sp)
  800b60:	d8800415 	stw	r2,16(sp)
  800b64:	0804e7c0 	call	804e7c <__sfvwrite_r>
  800b68:	00ffffc4 	movi	r3,-1
  800b6c:	10000626 	beq	r2,zero,800b88 <_puts_r+0x84>
  800b70:	1805883a 	mov	r2,r3
  800b74:	dfc00917 	ldw	ra,36(sp)
  800b78:	dcc00817 	ldw	r19,32(sp)
  800b7c:	dc400717 	ldw	r17,28(sp)
  800b80:	dec00a04 	addi	sp,sp,40
  800b84:	f800283a 	ret
  800b88:	00c00284 	movi	r3,10
  800b8c:	1805883a 	mov	r2,r3
  800b90:	dfc00917 	ldw	ra,36(sp)
  800b94:	dcc00817 	ldw	r19,32(sp)
  800b98:	dc400717 	ldw	r17,28(sp)
  800b9c:	dec00a04 	addi	sp,sp,40
  800ba0:	f800283a 	ret

00800ba4 <puts>:
  800ba4:	00802074 	movhi	r2,129
  800ba8:	10801404 	addi	r2,r2,80
  800bac:	200b883a 	mov	r5,r4
  800bb0:	11000017 	ldw	r4,0(r2)
  800bb4:	0800b041 	jmpi	800b04 <_puts_r>

00800bb8 <srand>:
  800bb8:	00802074 	movhi	r2,129
  800bbc:	10801404 	addi	r2,r2,80
  800bc0:	11400017 	ldw	r5,0(r2)
  800bc4:	0007883a 	mov	r3,zero
  800bc8:	28c02a15 	stw	r3,168(r5)
  800bcc:	29002915 	stw	r4,164(r5)
  800bd0:	f800283a 	ret

00800bd4 <rand>:
  800bd4:	defffe04 	addi	sp,sp,-8
  800bd8:	00802074 	movhi	r2,129
  800bdc:	10801404 	addi	r2,r2,80
  800be0:	dc000015 	stw	r16,0(sp)
  800be4:	14000017 	ldw	r16,0(r2)
  800be8:	dfc00115 	stw	ra,4(sp)
  800bec:	00932574 	movhi	r2,19605
  800bf0:	109fcb44 	addi	r2,r2,32557
  800bf4:	82002917 	ldw	r8,164(r16)
  800bf8:	82402a17 	ldw	r9,168(r16)
  800bfc:	00d614b4 	movhi	r3,22610
  800c00:	18fd0b44 	addi	r3,r3,-3027
  800c04:	4009883a 	mov	r4,r8
  800c08:	180f883a 	mov	r7,r3
  800c0c:	100d883a 	mov	r6,r2
  800c10:	480b883a 	mov	r5,r9
  800c14:	0807e640 	call	807e64 <__muldi3>
  800c18:	02000044 	movi	r8,1
  800c1c:	1209883a 	add	r4,r2,r8
  800c20:	2095803a 	cmpltu	r10,r4,r2
  800c24:	50d5883a 	add	r10,r10,r3
  800c28:	81002915 	stw	r4,164(r16)
  800c2c:	01200034 	movhi	r4,32768
  800c30:	213fffc4 	addi	r4,r4,-1
  800c34:	2284703a 	and	r2,r4,r10
  800c38:	82802a15 	stw	r10,168(r16)
  800c3c:	dfc00117 	ldw	ra,4(sp)
  800c40:	dc000017 	ldw	r16,0(sp)
  800c44:	dec00204 	addi	sp,sp,8
  800c48:	f800283a 	ret

00800c4c <strlen>:
  800c4c:	208000cc 	andi	r2,r4,3
  800c50:	2011883a 	mov	r8,r4
  800c54:	1000161e 	bne	r2,zero,800cb0 <strlen+0x64>
  800c58:	20c00017 	ldw	r3,0(r4)
  800c5c:	017fbff4 	movhi	r5,65279
  800c60:	297fbfc4 	addi	r5,r5,-257
  800c64:	01e02074 	movhi	r7,32897
  800c68:	39e02004 	addi	r7,r7,-32640
  800c6c:	1945883a 	add	r2,r3,r5
  800c70:	11c4703a 	and	r2,r2,r7
  800c74:	00c6303a 	nor	r3,zero,r3
  800c78:	1886703a 	and	r3,r3,r2
  800c7c:	18000c1e 	bne	r3,zero,800cb0 <strlen+0x64>
  800c80:	280d883a 	mov	r6,r5
  800c84:	380b883a 	mov	r5,r7
  800c88:	21000104 	addi	r4,r4,4
  800c8c:	20800017 	ldw	r2,0(r4)
  800c90:	1187883a 	add	r3,r2,r6
  800c94:	1946703a 	and	r3,r3,r5
  800c98:	0084303a 	nor	r2,zero,r2
  800c9c:	10c4703a 	and	r2,r2,r3
  800ca0:	103ff926 	beq	r2,zero,800c88 <strlen+0x3c>
  800ca4:	20800007 	ldb	r2,0(r4)
  800ca8:	10000326 	beq	r2,zero,800cb8 <strlen+0x6c>
  800cac:	21000044 	addi	r4,r4,1
  800cb0:	20800007 	ldb	r2,0(r4)
  800cb4:	103ffd1e 	bne	r2,zero,800cac <strlen+0x60>
  800cb8:	2205c83a 	sub	r2,r4,r8
  800cbc:	f800283a 	ret

00800cc0 <time>:
  800cc0:	defffc04 	addi	sp,sp,-16
  800cc4:	00802074 	movhi	r2,129
  800cc8:	10801404 	addi	r2,r2,80
  800ccc:	dc000215 	stw	r16,8(sp)
  800cd0:	2021883a 	mov	r16,r4
  800cd4:	11000017 	ldw	r4,0(r2)
  800cd8:	d80b883a 	mov	r5,sp
  800cdc:	000d883a 	mov	r6,zero
  800ce0:	dfc00315 	stw	ra,12(sp)
  800ce4:	08054980 	call	805498 <_gettimeofday_r>
  800ce8:	00ffffc4 	movi	r3,-1
  800cec:	10000416 	blt	r2,zero,800d00 <time+0x40>
  800cf0:	80000826 	beq	r16,zero,800d14 <time+0x54>
  800cf4:	d8800017 	ldw	r2,0(sp)
  800cf8:	80800015 	stw	r2,0(r16)
  800cfc:	1007883a 	mov	r3,r2
  800d00:	1805883a 	mov	r2,r3
  800d04:	dfc00317 	ldw	ra,12(sp)
  800d08:	dc000217 	ldw	r16,8(sp)
  800d0c:	dec00404 	addi	sp,sp,16
  800d10:	f800283a 	ret
  800d14:	d8800017 	ldw	r2,0(sp)
  800d18:	003ff806 	br	800cfc <time+0x3c>

00800d1c <__sprint_r>:
  800d1c:	30800217 	ldw	r2,8(r6)
  800d20:	defffe04 	addi	sp,sp,-8
  800d24:	dc000015 	stw	r16,0(sp)
  800d28:	dfc00115 	stw	ra,4(sp)
  800d2c:	3021883a 	mov	r16,r6
  800d30:	0007883a 	mov	r3,zero
  800d34:	1000061e 	bne	r2,zero,800d50 <__sprint_r+0x34>
  800d38:	1805883a 	mov	r2,r3
  800d3c:	30000115 	stw	zero,4(r6)
  800d40:	dfc00117 	ldw	ra,4(sp)
  800d44:	dc000017 	ldw	r16,0(sp)
  800d48:	dec00204 	addi	sp,sp,8
  800d4c:	f800283a 	ret
  800d50:	0804e7c0 	call	804e7c <__sfvwrite_r>
  800d54:	1007883a 	mov	r3,r2
  800d58:	1805883a 	mov	r2,r3
  800d5c:	80000115 	stw	zero,4(r16)
  800d60:	80000215 	stw	zero,8(r16)
  800d64:	dfc00117 	ldw	ra,4(sp)
  800d68:	dc000017 	ldw	r16,0(sp)
  800d6c:	dec00204 	addi	sp,sp,8
  800d70:	f800283a 	ret

00800d74 <___vfprintf_internal_r>:
  800d74:	defea404 	addi	sp,sp,-1392
  800d78:	dd815815 	stw	r22,1376(sp)
  800d7c:	dc015215 	stw	r16,1352(sp)
  800d80:	d9c15115 	stw	r7,1348(sp)
  800d84:	dfc15b15 	stw	ra,1388(sp)
  800d88:	df015a15 	stw	fp,1384(sp)
  800d8c:	ddc15915 	stw	r23,1380(sp)
  800d90:	dd415715 	stw	r21,1372(sp)
  800d94:	dd015615 	stw	r20,1368(sp)
  800d98:	dcc15515 	stw	r19,1364(sp)
  800d9c:	dc815415 	stw	r18,1360(sp)
  800da0:	dc415315 	stw	r17,1356(sp)
  800da4:	282d883a 	mov	r22,r5
  800da8:	3021883a 	mov	r16,r6
  800dac:	d9014f15 	stw	r4,1340(sp)
  800db0:	08055140 	call	805514 <_localeconv_r>
  800db4:	10800017 	ldw	r2,0(r2)
  800db8:	d9c15117 	ldw	r7,1348(sp)
  800dbc:	d8814915 	stw	r2,1316(sp)
  800dc0:	d8814f17 	ldw	r2,1340(sp)
  800dc4:	10000226 	beq	r2,zero,800dd0 <___vfprintf_internal_r+0x5c>
  800dc8:	10800e17 	ldw	r2,56(r2)
  800dcc:	10020d26 	beq	r2,zero,801604 <___vfprintf_internal_r+0x890>
  800dd0:	b080030b 	ldhu	r2,12(r22)
  800dd4:	1080020c 	andi	r2,r2,8
  800dd8:	10020e26 	beq	r2,zero,801614 <___vfprintf_internal_r+0x8a0>
  800ddc:	b0800417 	ldw	r2,16(r22)
  800de0:	10020c26 	beq	r2,zero,801614 <___vfprintf_internal_r+0x8a0>
  800de4:	b200030b 	ldhu	r8,12(r22)
  800de8:	00800284 	movi	r2,10
  800dec:	40c0068c 	andi	r3,r8,26
  800df0:	18802f1e 	bne	r3,r2,800eb0 <___vfprintf_internal_r+0x13c>
  800df4:	b080038f 	ldh	r2,14(r22)
  800df8:	10002d16 	blt	r2,zero,800eb0 <___vfprintf_internal_r+0x13c>
  800dfc:	b240038b 	ldhu	r9,14(r22)
  800e00:	b2800717 	ldw	r10,28(r22)
  800e04:	b2c00917 	ldw	r11,36(r22)
  800e08:	d9014f17 	ldw	r4,1340(sp)
  800e0c:	dc402904 	addi	r17,sp,164
  800e10:	d8804004 	addi	r2,sp,256
  800e14:	00c10004 	movi	r3,1024
  800e18:	423fff4c 	andi	r8,r8,65533
  800e1c:	800d883a 	mov	r6,r16
  800e20:	880b883a 	mov	r5,r17
  800e24:	da002c0d 	sth	r8,176(sp)
  800e28:	da402c8d 	sth	r9,178(sp)
  800e2c:	da803015 	stw	r10,192(sp)
  800e30:	dac03215 	stw	r11,200(sp)
  800e34:	d8802d15 	stw	r2,180(sp)
  800e38:	d8c02e15 	stw	r3,184(sp)
  800e3c:	d8802915 	stw	r2,164(sp)
  800e40:	d8c02b15 	stw	r3,172(sp)
  800e44:	d8002f15 	stw	zero,188(sp)
  800e48:	0800d740 	call	800d74 <___vfprintf_internal_r>
  800e4c:	d8814b15 	stw	r2,1324(sp)
  800e50:	10000416 	blt	r2,zero,800e64 <___vfprintf_internal_r+0xf0>
  800e54:	d9014f17 	ldw	r4,1340(sp)
  800e58:	880b883a 	mov	r5,r17
  800e5c:	080454c0 	call	80454c <_fflush_r>
  800e60:	1002321e 	bne	r2,zero,80172c <___vfprintf_internal_r+0x9b8>
  800e64:	d8802c0b 	ldhu	r2,176(sp)
  800e68:	1080100c 	andi	r2,r2,64
  800e6c:	10000326 	beq	r2,zero,800e7c <___vfprintf_internal_r+0x108>
  800e70:	b080030b 	ldhu	r2,12(r22)
  800e74:	10801014 	ori	r2,r2,64
  800e78:	b080030d 	sth	r2,12(r22)
  800e7c:	d8814b17 	ldw	r2,1324(sp)
  800e80:	dfc15b17 	ldw	ra,1388(sp)
  800e84:	df015a17 	ldw	fp,1384(sp)
  800e88:	ddc15917 	ldw	r23,1380(sp)
  800e8c:	dd815817 	ldw	r22,1376(sp)
  800e90:	dd415717 	ldw	r21,1372(sp)
  800e94:	dd015617 	ldw	r20,1368(sp)
  800e98:	dcc15517 	ldw	r19,1364(sp)
  800e9c:	dc815417 	ldw	r18,1360(sp)
  800ea0:	dc415317 	ldw	r17,1356(sp)
  800ea4:	dc015217 	ldw	r16,1352(sp)
  800ea8:	dec15c04 	addi	sp,sp,1392
  800eac:	f800283a 	ret
  800eb0:	0005883a 	mov	r2,zero
  800eb4:	0007883a 	mov	r3,zero
  800eb8:	dd401904 	addi	r21,sp,100
  800ebc:	d8814215 	stw	r2,1288(sp)
  800ec0:	802f883a 	mov	r23,r16
  800ec4:	d8c14315 	stw	r3,1292(sp)
  800ec8:	d8014b15 	stw	zero,1324(sp)
  800ecc:	d8014815 	stw	zero,1312(sp)
  800ed0:	d8014415 	stw	zero,1296(sp)
  800ed4:	d8014715 	stw	zero,1308(sp)
  800ed8:	dd400c15 	stw	r21,48(sp)
  800edc:	d8000e15 	stw	zero,56(sp)
  800ee0:	d8000d15 	stw	zero,52(sp)
  800ee4:	b8800007 	ldb	r2,0(r23)
  800ee8:	10001926 	beq	r2,zero,800f50 <___vfprintf_internal_r+0x1dc>
  800eec:	00c00944 	movi	r3,37
  800ef0:	10c01726 	beq	r2,r3,800f50 <___vfprintf_internal_r+0x1dc>
  800ef4:	b821883a 	mov	r16,r23
  800ef8:	00000106 	br	800f00 <___vfprintf_internal_r+0x18c>
  800efc:	10c00326 	beq	r2,r3,800f0c <___vfprintf_internal_r+0x198>
  800f00:	84000044 	addi	r16,r16,1
  800f04:	80800007 	ldb	r2,0(r16)
  800f08:	103ffc1e 	bne	r2,zero,800efc <___vfprintf_internal_r+0x188>
  800f0c:	85e7c83a 	sub	r19,r16,r23
  800f10:	98000e26 	beq	r19,zero,800f4c <___vfprintf_internal_r+0x1d8>
  800f14:	dc800e17 	ldw	r18,56(sp)
  800f18:	dc400d17 	ldw	r17,52(sp)
  800f1c:	008001c4 	movi	r2,7
  800f20:	94e5883a 	add	r18,r18,r19
  800f24:	8c400044 	addi	r17,r17,1
  800f28:	adc00015 	stw	r23,0(r21)
  800f2c:	dc800e15 	stw	r18,56(sp)
  800f30:	acc00115 	stw	r19,4(r21)
  800f34:	dc400d15 	stw	r17,52(sp)
  800f38:	14428b16 	blt	r2,r17,801968 <___vfprintf_internal_r+0xbf4>
  800f3c:	ad400204 	addi	r21,r21,8
  800f40:	d9014b17 	ldw	r4,1324(sp)
  800f44:	24c9883a 	add	r4,r4,r19
  800f48:	d9014b15 	stw	r4,1324(sp)
  800f4c:	802f883a 	mov	r23,r16
  800f50:	b8800007 	ldb	r2,0(r23)
  800f54:	10013c26 	beq	r2,zero,801448 <___vfprintf_internal_r+0x6d4>
  800f58:	bdc00044 	addi	r23,r23,1
  800f5c:	d8000405 	stb	zero,16(sp)
  800f60:	b8c00007 	ldb	r3,0(r23)
  800f64:	04ffffc4 	movi	r19,-1
  800f68:	d8014c15 	stw	zero,1328(sp)
  800f6c:	d8014a15 	stw	zero,1320(sp)
  800f70:	d8c14d15 	stw	r3,1332(sp)
  800f74:	bdc00044 	addi	r23,r23,1
  800f78:	d9414d17 	ldw	r5,1332(sp)
  800f7c:	00801604 	movi	r2,88
  800f80:	28fff804 	addi	r3,r5,-32
  800f84:	10c06036 	bltu	r2,r3,801108 <___vfprintf_internal_r+0x394>
  800f88:	18c5883a 	add	r2,r3,r3
  800f8c:	1085883a 	add	r2,r2,r2
  800f90:	00c02034 	movhi	r3,128
  800f94:	18c3e904 	addi	r3,r3,4004
  800f98:	10c5883a 	add	r2,r2,r3
  800f9c:	11000017 	ldw	r4,0(r2)
  800fa0:	2000683a 	jmp	r4
  800fa4:	00801f18 	cmpnei	r2,zero,124
  800fa8:	00801108 	cmpgei	r2,zero,68
  800fac:	00801108 	cmpgei	r2,zero,68
  800fb0:	00801f04 	movi	r2,124
  800fb4:	00801108 	cmpgei	r2,zero,68
  800fb8:	00801108 	cmpgei	r2,zero,68
  800fbc:	00801108 	cmpgei	r2,zero,68
  800fc0:	00801108 	cmpgei	r2,zero,68
  800fc4:	00801108 	cmpgei	r2,zero,68
  800fc8:	00801108 	cmpgei	r2,zero,68
  800fcc:	00801ce4 	muli	r2,zero,115
  800fd0:	00801ef4 	movhi	r2,123
  800fd4:	00801108 	cmpgei	r2,zero,68
  800fd8:	00801cfc 	xorhi	r2,zero,115
  800fdc:	00801f90 	cmplti	r2,zero,126
  800fe0:	00801108 	cmpgei	r2,zero,68
  800fe4:	00801f7c 	xorhi	r2,zero,125
  800fe8:	00801f44 	movi	r2,125
  800fec:	00801f44 	movi	r2,125
  800ff0:	00801f44 	movi	r2,125
  800ff4:	00801f44 	movi	r2,125
  800ff8:	00801f44 	movi	r2,125
  800ffc:	00801f44 	movi	r2,125
  801000:	00801f44 	movi	r2,125
  801004:	00801f44 	movi	r2,125
  801008:	00801f44 	movi	r2,125
  80100c:	00801108 	cmpgei	r2,zero,68
  801010:	00801108 	cmpgei	r2,zero,68
  801014:	00801108 	cmpgei	r2,zero,68
  801018:	00801108 	cmpgei	r2,zero,68
  80101c:	00801108 	cmpgei	r2,zero,68
  801020:	00801108 	cmpgei	r2,zero,68
  801024:	00801108 	cmpgei	r2,zero,68
  801028:	00801108 	cmpgei	r2,zero,68
  80102c:	00801108 	cmpgei	r2,zero,68
  801030:	00801108 	cmpgei	r2,zero,68
  801034:	00801760 	cmpeqi	r2,zero,93
  801038:	00801dcc 	andi	r2,zero,119
  80103c:	00801108 	cmpgei	r2,zero,68
  801040:	00801dcc 	andi	r2,zero,119
  801044:	00801108 	cmpgei	r2,zero,68
  801048:	00801108 	cmpgei	r2,zero,68
  80104c:	00801108 	cmpgei	r2,zero,68
  801050:	00801108 	cmpgei	r2,zero,68
  801054:	00801f30 	cmpltui	r2,zero,124
  801058:	00801108 	cmpgei	r2,zero,68
  80105c:	00801108 	cmpgei	r2,zero,68
  801060:	00801814 	movui	r2,96
  801064:	00801108 	cmpgei	r2,zero,68
  801068:	00801108 	cmpgei	r2,zero,68
  80106c:	00801108 	cmpgei	r2,zero,68
  801070:	00801108 	cmpgei	r2,zero,68
  801074:	00801108 	cmpgei	r2,zero,68
  801078:	00801860 	cmpeqi	r2,zero,97
  80107c:	00801108 	cmpgei	r2,zero,68
  801080:	00801108 	cmpgei	r2,zero,68
  801084:	00801e80 	call	801e8 <__alt_mem_sdram_0-0x77fe18>
  801088:	00801108 	cmpgei	r2,zero,68
  80108c:	00801108 	cmpgei	r2,zero,68
  801090:	00801108 	cmpgei	r2,zero,68
  801094:	00801108 	cmpgei	r2,zero,68
  801098:	00801108 	cmpgei	r2,zero,68
  80109c:	00801108 	cmpgei	r2,zero,68
  8010a0:	00801108 	cmpgei	r2,zero,68
  8010a4:	00801108 	cmpgei	r2,zero,68
  8010a8:	00801108 	cmpgei	r2,zero,68
  8010ac:	00801108 	cmpgei	r2,zero,68
  8010b0:	00801e54 	movui	r2,121
  8010b4:	0080176c 	andhi	r2,zero,93
  8010b8:	00801dcc 	andi	r2,zero,119
  8010bc:	00801dcc 	andi	r2,zero,119
  8010c0:	00801dcc 	andi	r2,zero,119
  8010c4:	00801db8 	rdprs	r2,zero,118
  8010c8:	0080176c 	andhi	r2,zero,93
  8010cc:	00801108 	cmpgei	r2,zero,68
  8010d0:	00801108 	cmpgei	r2,zero,68
  8010d4:	00801d40 	call	801d4 <__alt_mem_sdram_0-0x77fe2c>
  8010d8:	00801108 	cmpgei	r2,zero,68
  8010dc:	00801d10 	cmplti	r2,zero,116
  8010e0:	00801820 	cmpeqi	r2,zero,96
  8010e4:	00801d70 	cmpltui	r2,zero,117
  8010e8:	00801d5c 	xori	r2,zero,117
  8010ec:	00801108 	cmpgei	r2,zero,68
  8010f0:	00801fec 	andhi	r2,zero,127
  8010f4:	00801108 	cmpgei	r2,zero,68
  8010f8:	0080186c 	andhi	r2,zero,97
  8010fc:	00801108 	cmpgei	r2,zero,68
  801100:	00801108 	cmpgei	r2,zero,68
  801104:	00801ee4 	muli	r2,zero,123
  801108:	d9014d17 	ldw	r4,1332(sp)
  80110c:	2000ce26 	beq	r4,zero,801448 <___vfprintf_internal_r+0x6d4>
  801110:	01400044 	movi	r5,1
  801114:	d9800f04 	addi	r6,sp,60
  801118:	d9c14015 	stw	r7,1280(sp)
  80111c:	d9414515 	stw	r5,1300(sp)
  801120:	d9814115 	stw	r6,1284(sp)
  801124:	280f883a 	mov	r7,r5
  801128:	d9000f05 	stb	r4,60(sp)
  80112c:	d8000405 	stb	zero,16(sp)
  801130:	d8014615 	stw	zero,1304(sp)
  801134:	d8c14c17 	ldw	r3,1328(sp)
  801138:	1880008c 	andi	r2,r3,2
  80113c:	1005003a 	cmpeq	r2,r2,zero
  801140:	d8815015 	stw	r2,1344(sp)
  801144:	1000031e 	bne	r2,zero,801154 <___vfprintf_internal_r+0x3e0>
  801148:	d9014517 	ldw	r4,1300(sp)
  80114c:	21000084 	addi	r4,r4,2
  801150:	d9014515 	stw	r4,1300(sp)
  801154:	d9414c17 	ldw	r5,1328(sp)
  801158:	2940210c 	andi	r5,r5,132
  80115c:	d9414e15 	stw	r5,1336(sp)
  801160:	28002d1e 	bne	r5,zero,801218 <___vfprintf_internal_r+0x4a4>
  801164:	d9814a17 	ldw	r6,1320(sp)
  801168:	d8814517 	ldw	r2,1300(sp)
  80116c:	30a1c83a 	sub	r16,r6,r2
  801170:	0400290e 	bge	zero,r16,801218 <___vfprintf_internal_r+0x4a4>
  801174:	00800404 	movi	r2,16
  801178:	1404580e 	bge	r2,r16,8022dc <___vfprintf_internal_r+0x1568>
  80117c:	dc800e17 	ldw	r18,56(sp)
  801180:	dc400d17 	ldw	r17,52(sp)
  801184:	1027883a 	mov	r19,r2
  801188:	07002074 	movhi	fp,129
  80118c:	e737e784 	addi	fp,fp,-8290
  801190:	050001c4 	movi	r20,7
  801194:	00000306 	br	8011a4 <___vfprintf_internal_r+0x430>
  801198:	843ffc04 	addi	r16,r16,-16
  80119c:	ad400204 	addi	r21,r21,8
  8011a0:	9c00130e 	bge	r19,r16,8011f0 <___vfprintf_internal_r+0x47c>
  8011a4:	94800404 	addi	r18,r18,16
  8011a8:	8c400044 	addi	r17,r17,1
  8011ac:	af000015 	stw	fp,0(r21)
  8011b0:	acc00115 	stw	r19,4(r21)
  8011b4:	dc800e15 	stw	r18,56(sp)
  8011b8:	dc400d15 	stw	r17,52(sp)
  8011bc:	a47ff60e 	bge	r20,r17,801198 <___vfprintf_internal_r+0x424>
  8011c0:	d9014f17 	ldw	r4,1340(sp)
  8011c4:	b00b883a 	mov	r5,r22
  8011c8:	d9800c04 	addi	r6,sp,48
  8011cc:	d9c15115 	stw	r7,1348(sp)
  8011d0:	0800d1c0 	call	800d1c <__sprint_r>
  8011d4:	d9c15117 	ldw	r7,1348(sp)
  8011d8:	10009e1e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  8011dc:	843ffc04 	addi	r16,r16,-16
  8011e0:	dc800e17 	ldw	r18,56(sp)
  8011e4:	dc400d17 	ldw	r17,52(sp)
  8011e8:	dd401904 	addi	r21,sp,100
  8011ec:	9c3fed16 	blt	r19,r16,8011a4 <___vfprintf_internal_r+0x430>
  8011f0:	9425883a 	add	r18,r18,r16
  8011f4:	8c400044 	addi	r17,r17,1
  8011f8:	008001c4 	movi	r2,7
  8011fc:	af000015 	stw	fp,0(r21)
  801200:	ac000115 	stw	r16,4(r21)
  801204:	dc800e15 	stw	r18,56(sp)
  801208:	dc400d15 	stw	r17,52(sp)
  80120c:	1441f516 	blt	r2,r17,8019e4 <___vfprintf_internal_r+0xc70>
  801210:	ad400204 	addi	r21,r21,8
  801214:	00000206 	br	801220 <___vfprintf_internal_r+0x4ac>
  801218:	dc800e17 	ldw	r18,56(sp)
  80121c:	dc400d17 	ldw	r17,52(sp)
  801220:	d8800407 	ldb	r2,16(sp)
  801224:	10000b26 	beq	r2,zero,801254 <___vfprintf_internal_r+0x4e0>
  801228:	00800044 	movi	r2,1
  80122c:	94800044 	addi	r18,r18,1
  801230:	8c400044 	addi	r17,r17,1
  801234:	a8800115 	stw	r2,4(r21)
  801238:	d8c00404 	addi	r3,sp,16
  80123c:	008001c4 	movi	r2,7
  801240:	a8c00015 	stw	r3,0(r21)
  801244:	dc800e15 	stw	r18,56(sp)
  801248:	dc400d15 	stw	r17,52(sp)
  80124c:	1441da16 	blt	r2,r17,8019b8 <___vfprintf_internal_r+0xc44>
  801250:	ad400204 	addi	r21,r21,8
  801254:	d9015017 	ldw	r4,1344(sp)
  801258:	20000b1e 	bne	r4,zero,801288 <___vfprintf_internal_r+0x514>
  80125c:	d8800444 	addi	r2,sp,17
  801260:	94800084 	addi	r18,r18,2
  801264:	8c400044 	addi	r17,r17,1
  801268:	a8800015 	stw	r2,0(r21)
  80126c:	00c00084 	movi	r3,2
  801270:	008001c4 	movi	r2,7
  801274:	a8c00115 	stw	r3,4(r21)
  801278:	dc800e15 	stw	r18,56(sp)
  80127c:	dc400d15 	stw	r17,52(sp)
  801280:	1441c216 	blt	r2,r17,80198c <___vfprintf_internal_r+0xc18>
  801284:	ad400204 	addi	r21,r21,8
  801288:	d9414e17 	ldw	r5,1336(sp)
  80128c:	00802004 	movi	r2,128
  801290:	2880b126 	beq	r5,r2,801558 <___vfprintf_internal_r+0x7e4>
  801294:	d8c14617 	ldw	r3,1304(sp)
  801298:	19e1c83a 	sub	r16,r3,r7
  80129c:	0400260e 	bge	zero,r16,801338 <___vfprintf_internal_r+0x5c4>
  8012a0:	00800404 	movi	r2,16
  8012a4:	1403c90e 	bge	r2,r16,8021cc <___vfprintf_internal_r+0x1458>
  8012a8:	1027883a 	mov	r19,r2
  8012ac:	07002074 	movhi	fp,129
  8012b0:	e737e384 	addi	fp,fp,-8306
  8012b4:	050001c4 	movi	r20,7
  8012b8:	00000306 	br	8012c8 <___vfprintf_internal_r+0x554>
  8012bc:	843ffc04 	addi	r16,r16,-16
  8012c0:	ad400204 	addi	r21,r21,8
  8012c4:	9c00130e 	bge	r19,r16,801314 <___vfprintf_internal_r+0x5a0>
  8012c8:	94800404 	addi	r18,r18,16
  8012cc:	8c400044 	addi	r17,r17,1
  8012d0:	af000015 	stw	fp,0(r21)
  8012d4:	acc00115 	stw	r19,4(r21)
  8012d8:	dc800e15 	stw	r18,56(sp)
  8012dc:	dc400d15 	stw	r17,52(sp)
  8012e0:	a47ff60e 	bge	r20,r17,8012bc <___vfprintf_internal_r+0x548>
  8012e4:	d9014f17 	ldw	r4,1340(sp)
  8012e8:	b00b883a 	mov	r5,r22
  8012ec:	d9800c04 	addi	r6,sp,48
  8012f0:	d9c15115 	stw	r7,1348(sp)
  8012f4:	0800d1c0 	call	800d1c <__sprint_r>
  8012f8:	d9c15117 	ldw	r7,1348(sp)
  8012fc:	1000551e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  801300:	843ffc04 	addi	r16,r16,-16
  801304:	dc800e17 	ldw	r18,56(sp)
  801308:	dc400d17 	ldw	r17,52(sp)
  80130c:	dd401904 	addi	r21,sp,100
  801310:	9c3fed16 	blt	r19,r16,8012c8 <___vfprintf_internal_r+0x554>
  801314:	9425883a 	add	r18,r18,r16
  801318:	8c400044 	addi	r17,r17,1
  80131c:	008001c4 	movi	r2,7
  801320:	af000015 	stw	fp,0(r21)
  801324:	ac000115 	stw	r16,4(r21)
  801328:	dc800e15 	stw	r18,56(sp)
  80132c:	dc400d15 	stw	r17,52(sp)
  801330:	14418216 	blt	r2,r17,80193c <___vfprintf_internal_r+0xbc8>
  801334:	ad400204 	addi	r21,r21,8
  801338:	d9014c17 	ldw	r4,1328(sp)
  80133c:	2080400c 	andi	r2,r4,256
  801340:	10004a1e 	bne	r2,zero,80146c <___vfprintf_internal_r+0x6f8>
  801344:	d9414117 	ldw	r5,1284(sp)
  801348:	91e5883a 	add	r18,r18,r7
  80134c:	8c400044 	addi	r17,r17,1
  801350:	008001c4 	movi	r2,7
  801354:	a9400015 	stw	r5,0(r21)
  801358:	a9c00115 	stw	r7,4(r21)
  80135c:	dc800e15 	stw	r18,56(sp)
  801360:	dc400d15 	stw	r17,52(sp)
  801364:	14416716 	blt	r2,r17,801904 <___vfprintf_internal_r+0xb90>
  801368:	a8c00204 	addi	r3,r21,8
  80136c:	d9814c17 	ldw	r6,1328(sp)
  801370:	3080010c 	andi	r2,r6,4
  801374:	10002826 	beq	r2,zero,801418 <___vfprintf_internal_r+0x6a4>
  801378:	d8814a17 	ldw	r2,1320(sp)
  80137c:	d9014517 	ldw	r4,1300(sp)
  801380:	1121c83a 	sub	r16,r2,r4
  801384:	0400240e 	bge	zero,r16,801418 <___vfprintf_internal_r+0x6a4>
  801388:	00800404 	movi	r2,16
  80138c:	14044f0e 	bge	r2,r16,8024cc <___vfprintf_internal_r+0x1758>
  801390:	dc400d17 	ldw	r17,52(sp)
  801394:	1027883a 	mov	r19,r2
  801398:	07002074 	movhi	fp,129
  80139c:	e737e784 	addi	fp,fp,-8290
  8013a0:	050001c4 	movi	r20,7
  8013a4:	00000306 	br	8013b4 <___vfprintf_internal_r+0x640>
  8013a8:	843ffc04 	addi	r16,r16,-16
  8013ac:	18c00204 	addi	r3,r3,8
  8013b0:	9c00110e 	bge	r19,r16,8013f8 <___vfprintf_internal_r+0x684>
  8013b4:	94800404 	addi	r18,r18,16
  8013b8:	8c400044 	addi	r17,r17,1
  8013bc:	1f000015 	stw	fp,0(r3)
  8013c0:	1cc00115 	stw	r19,4(r3)
  8013c4:	dc800e15 	stw	r18,56(sp)
  8013c8:	dc400d15 	stw	r17,52(sp)
  8013cc:	a47ff60e 	bge	r20,r17,8013a8 <___vfprintf_internal_r+0x634>
  8013d0:	d9014f17 	ldw	r4,1340(sp)
  8013d4:	b00b883a 	mov	r5,r22
  8013d8:	d9800c04 	addi	r6,sp,48
  8013dc:	0800d1c0 	call	800d1c <__sprint_r>
  8013e0:	10001c1e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  8013e4:	843ffc04 	addi	r16,r16,-16
  8013e8:	dc800e17 	ldw	r18,56(sp)
  8013ec:	dc400d17 	ldw	r17,52(sp)
  8013f0:	d8c01904 	addi	r3,sp,100
  8013f4:	9c3fef16 	blt	r19,r16,8013b4 <___vfprintf_internal_r+0x640>
  8013f8:	9425883a 	add	r18,r18,r16
  8013fc:	8c400044 	addi	r17,r17,1
  801400:	008001c4 	movi	r2,7
  801404:	1f000015 	stw	fp,0(r3)
  801408:	1c000115 	stw	r16,4(r3)
  80140c:	dc800e15 	stw	r18,56(sp)
  801410:	dc400d15 	stw	r17,52(sp)
  801414:	1440cb16 	blt	r2,r17,801744 <___vfprintf_internal_r+0x9d0>
  801418:	d8814a17 	ldw	r2,1320(sp)
  80141c:	d9414517 	ldw	r5,1300(sp)
  801420:	1140010e 	bge	r2,r5,801428 <___vfprintf_internal_r+0x6b4>
  801424:	2805883a 	mov	r2,r5
  801428:	d9814b17 	ldw	r6,1324(sp)
  80142c:	308d883a 	add	r6,r6,r2
  801430:	d9814b15 	stw	r6,1324(sp)
  801434:	90013b1e 	bne	r18,zero,801924 <___vfprintf_internal_r+0xbb0>
  801438:	d9c14017 	ldw	r7,1280(sp)
  80143c:	dd401904 	addi	r21,sp,100
  801440:	d8000d15 	stw	zero,52(sp)
  801444:	003ea706 	br	800ee4 <___vfprintf_internal_r+0x170>
  801448:	d8800e17 	ldw	r2,56(sp)
  80144c:	10053f1e 	bne	r2,zero,80294c <___vfprintf_internal_r+0x1bd8>
  801450:	d8000d15 	stw	zero,52(sp)
  801454:	b080030b 	ldhu	r2,12(r22)
  801458:	1080100c 	andi	r2,r2,64
  80145c:	103e8726 	beq	r2,zero,800e7c <___vfprintf_internal_r+0x108>
  801460:	00bfffc4 	movi	r2,-1
  801464:	d8814b15 	stw	r2,1324(sp)
  801468:	003e8406 	br	800e7c <___vfprintf_internal_r+0x108>
  80146c:	d9814d17 	ldw	r6,1332(sp)
  801470:	00801944 	movi	r2,101
  801474:	11806e16 	blt	r2,r6,801630 <___vfprintf_internal_r+0x8bc>
  801478:	d9414717 	ldw	r5,1308(sp)
  80147c:	00c00044 	movi	r3,1
  801480:	1943430e 	bge	r3,r5,802190 <___vfprintf_internal_r+0x141c>
  801484:	d8814117 	ldw	r2,1284(sp)
  801488:	94800044 	addi	r18,r18,1
  80148c:	8c400044 	addi	r17,r17,1
  801490:	a8800015 	stw	r2,0(r21)
  801494:	008001c4 	movi	r2,7
  801498:	a8c00115 	stw	r3,4(r21)
  80149c:	dc800e15 	stw	r18,56(sp)
  8014a0:	dc400d15 	stw	r17,52(sp)
  8014a4:	1441ca16 	blt	r2,r17,801bd0 <___vfprintf_internal_r+0xe5c>
  8014a8:	a8c00204 	addi	r3,r21,8
  8014ac:	d9014917 	ldw	r4,1316(sp)
  8014b0:	00800044 	movi	r2,1
  8014b4:	94800044 	addi	r18,r18,1
  8014b8:	8c400044 	addi	r17,r17,1
  8014bc:	18800115 	stw	r2,4(r3)
  8014c0:	008001c4 	movi	r2,7
  8014c4:	19000015 	stw	r4,0(r3)
  8014c8:	dc800e15 	stw	r18,56(sp)
  8014cc:	dc400d15 	stw	r17,52(sp)
  8014d0:	1441b616 	blt	r2,r17,801bac <___vfprintf_internal_r+0xe38>
  8014d4:	1cc00204 	addi	r19,r3,8
  8014d8:	d9014217 	ldw	r4,1288(sp)
  8014dc:	d9414317 	ldw	r5,1292(sp)
  8014e0:	000d883a 	mov	r6,zero
  8014e4:	000f883a 	mov	r7,zero
  8014e8:	08096300 	call	809630 <__nedf2>
  8014ec:	10017426 	beq	r2,zero,801ac0 <___vfprintf_internal_r+0xd4c>
  8014f0:	d9414717 	ldw	r5,1308(sp)
  8014f4:	d9814117 	ldw	r6,1284(sp)
  8014f8:	8c400044 	addi	r17,r17,1
  8014fc:	2c85883a 	add	r2,r5,r18
  801500:	14bfffc4 	addi	r18,r2,-1
  801504:	28bfffc4 	addi	r2,r5,-1
  801508:	30c00044 	addi	r3,r6,1
  80150c:	98800115 	stw	r2,4(r19)
  801510:	008001c4 	movi	r2,7
  801514:	98c00015 	stw	r3,0(r19)
  801518:	dc800e15 	stw	r18,56(sp)
  80151c:	dc400d15 	stw	r17,52(sp)
  801520:	14418e16 	blt	r2,r17,801b5c <___vfprintf_internal_r+0xde8>
  801524:	9cc00204 	addi	r19,r19,8
  801528:	d9414817 	ldw	r5,1312(sp)
  80152c:	d8800804 	addi	r2,sp,32
  801530:	8c400044 	addi	r17,r17,1
  801534:	9165883a 	add	r18,r18,r5
  801538:	98800015 	stw	r2,0(r19)
  80153c:	008001c4 	movi	r2,7
  801540:	99400115 	stw	r5,4(r19)
  801544:	dc800e15 	stw	r18,56(sp)
  801548:	dc400d15 	stw	r17,52(sp)
  80154c:	1440ed16 	blt	r2,r17,801904 <___vfprintf_internal_r+0xb90>
  801550:	98c00204 	addi	r3,r19,8
  801554:	003f8506 	br	80136c <___vfprintf_internal_r+0x5f8>
  801558:	d9814a17 	ldw	r6,1320(sp)
  80155c:	d8814517 	ldw	r2,1300(sp)
  801560:	30a1c83a 	sub	r16,r6,r2
  801564:	043f4b0e 	bge	zero,r16,801294 <___vfprintf_internal_r+0x520>
  801568:	00800404 	movi	r2,16
  80156c:	1404340e 	bge	r2,r16,802640 <___vfprintf_internal_r+0x18cc>
  801570:	1027883a 	mov	r19,r2
  801574:	07002074 	movhi	fp,129
  801578:	e737e384 	addi	fp,fp,-8306
  80157c:	050001c4 	movi	r20,7
  801580:	00000306 	br	801590 <___vfprintf_internal_r+0x81c>
  801584:	843ffc04 	addi	r16,r16,-16
  801588:	ad400204 	addi	r21,r21,8
  80158c:	9c00130e 	bge	r19,r16,8015dc <___vfprintf_internal_r+0x868>
  801590:	94800404 	addi	r18,r18,16
  801594:	8c400044 	addi	r17,r17,1
  801598:	af000015 	stw	fp,0(r21)
  80159c:	acc00115 	stw	r19,4(r21)
  8015a0:	dc800e15 	stw	r18,56(sp)
  8015a4:	dc400d15 	stw	r17,52(sp)
  8015a8:	a47ff60e 	bge	r20,r17,801584 <___vfprintf_internal_r+0x810>
  8015ac:	d9014f17 	ldw	r4,1340(sp)
  8015b0:	b00b883a 	mov	r5,r22
  8015b4:	d9800c04 	addi	r6,sp,48
  8015b8:	d9c15115 	stw	r7,1348(sp)
  8015bc:	0800d1c0 	call	800d1c <__sprint_r>
  8015c0:	d9c15117 	ldw	r7,1348(sp)
  8015c4:	103fa31e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  8015c8:	843ffc04 	addi	r16,r16,-16
  8015cc:	dc800e17 	ldw	r18,56(sp)
  8015d0:	dc400d17 	ldw	r17,52(sp)
  8015d4:	dd401904 	addi	r21,sp,100
  8015d8:	9c3fed16 	blt	r19,r16,801590 <___vfprintf_internal_r+0x81c>
  8015dc:	9425883a 	add	r18,r18,r16
  8015e0:	8c400044 	addi	r17,r17,1
  8015e4:	008001c4 	movi	r2,7
  8015e8:	af000015 	stw	fp,0(r21)
  8015ec:	ac000115 	stw	r16,4(r21)
  8015f0:	dc800e15 	stw	r18,56(sp)
  8015f4:	dc400d15 	stw	r17,52(sp)
  8015f8:	14416116 	blt	r2,r17,801b80 <___vfprintf_internal_r+0xe0c>
  8015fc:	ad400204 	addi	r21,r21,8
  801600:	003f2406 	br	801294 <___vfprintf_internal_r+0x520>
  801604:	d9014f17 	ldw	r4,1340(sp)
  801608:	08047e40 	call	8047e4 <__sinit>
  80160c:	d9c15117 	ldw	r7,1348(sp)
  801610:	003def06 	br	800dd0 <___vfprintf_internal_r+0x5c>
  801614:	d9014f17 	ldw	r4,1340(sp)
  801618:	b00b883a 	mov	r5,r22
  80161c:	d9c15115 	stw	r7,1348(sp)
  801620:	0802c440 	call	802c44 <__swsetup_r>
  801624:	d9c15117 	ldw	r7,1348(sp)
  801628:	103dee26 	beq	r2,zero,800de4 <___vfprintf_internal_r+0x70>
  80162c:	003f8c06 	br	801460 <___vfprintf_internal_r+0x6ec>
  801630:	d9014217 	ldw	r4,1288(sp)
  801634:	d9414317 	ldw	r5,1292(sp)
  801638:	000d883a 	mov	r6,zero
  80163c:	000f883a 	mov	r7,zero
  801640:	08095a80 	call	8095a8 <__eqdf2>
  801644:	1000f21e 	bne	r2,zero,801a10 <___vfprintf_internal_r+0xc9c>
  801648:	00802074 	movhi	r2,129
  80164c:	10b7e304 	addi	r2,r2,-8308
  801650:	94800044 	addi	r18,r18,1
  801654:	8c400044 	addi	r17,r17,1
  801658:	a8800015 	stw	r2,0(r21)
  80165c:	00c00044 	movi	r3,1
  801660:	008001c4 	movi	r2,7
  801664:	a8c00115 	stw	r3,4(r21)
  801668:	dc800e15 	stw	r18,56(sp)
  80166c:	dc400d15 	stw	r17,52(sp)
  801670:	1442fa16 	blt	r2,r17,80225c <___vfprintf_internal_r+0x14e8>
  801674:	a8c00204 	addi	r3,r21,8
  801678:	d8800517 	ldw	r2,20(sp)
  80167c:	d9014717 	ldw	r4,1308(sp)
  801680:	11015c0e 	bge	r2,r4,801bf4 <___vfprintf_internal_r+0xe80>
  801684:	dc400d17 	ldw	r17,52(sp)
  801688:	d9814917 	ldw	r6,1316(sp)
  80168c:	00800044 	movi	r2,1
  801690:	94800044 	addi	r18,r18,1
  801694:	8c400044 	addi	r17,r17,1
  801698:	18800115 	stw	r2,4(r3)
  80169c:	008001c4 	movi	r2,7
  8016a0:	19800015 	stw	r6,0(r3)
  8016a4:	dc800e15 	stw	r18,56(sp)
  8016a8:	dc400d15 	stw	r17,52(sp)
  8016ac:	14431016 	blt	r2,r17,8022f0 <___vfprintf_internal_r+0x157c>
  8016b0:	18c00204 	addi	r3,r3,8
  8016b4:	d8814717 	ldw	r2,1308(sp)
  8016b8:	143fffc4 	addi	r16,r2,-1
  8016bc:	043f2b0e 	bge	zero,r16,80136c <___vfprintf_internal_r+0x5f8>
  8016c0:	00800404 	movi	r2,16
  8016c4:	1402a20e 	bge	r2,r16,802150 <___vfprintf_internal_r+0x13dc>
  8016c8:	dc400d17 	ldw	r17,52(sp)
  8016cc:	1027883a 	mov	r19,r2
  8016d0:	07002074 	movhi	fp,129
  8016d4:	e737e384 	addi	fp,fp,-8306
  8016d8:	050001c4 	movi	r20,7
  8016dc:	00000306 	br	8016ec <___vfprintf_internal_r+0x978>
  8016e0:	18c00204 	addi	r3,r3,8
  8016e4:	843ffc04 	addi	r16,r16,-16
  8016e8:	9c029c0e 	bge	r19,r16,80215c <___vfprintf_internal_r+0x13e8>
  8016ec:	94800404 	addi	r18,r18,16
  8016f0:	8c400044 	addi	r17,r17,1
  8016f4:	1f000015 	stw	fp,0(r3)
  8016f8:	1cc00115 	stw	r19,4(r3)
  8016fc:	dc800e15 	stw	r18,56(sp)
  801700:	dc400d15 	stw	r17,52(sp)
  801704:	a47ff60e 	bge	r20,r17,8016e0 <___vfprintf_internal_r+0x96c>
  801708:	d9014f17 	ldw	r4,1340(sp)
  80170c:	b00b883a 	mov	r5,r22
  801710:	d9800c04 	addi	r6,sp,48
  801714:	0800d1c0 	call	800d1c <__sprint_r>
  801718:	103f4e1e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  80171c:	dc800e17 	ldw	r18,56(sp)
  801720:	dc400d17 	ldw	r17,52(sp)
  801724:	d8c01904 	addi	r3,sp,100
  801728:	003fee06 	br	8016e4 <___vfprintf_internal_r+0x970>
  80172c:	d8802c0b 	ldhu	r2,176(sp)
  801730:	00ffffc4 	movi	r3,-1
  801734:	d8c14b15 	stw	r3,1324(sp)
  801738:	1080100c 	andi	r2,r2,64
  80173c:	103dcc1e 	bne	r2,zero,800e70 <___vfprintf_internal_r+0xfc>
  801740:	003dce06 	br	800e7c <___vfprintf_internal_r+0x108>
  801744:	d9014f17 	ldw	r4,1340(sp)
  801748:	b00b883a 	mov	r5,r22
  80174c:	d9800c04 	addi	r6,sp,48
  801750:	0800d1c0 	call	800d1c <__sprint_r>
  801754:	103f3f1e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  801758:	dc800e17 	ldw	r18,56(sp)
  80175c:	003f2e06 	br	801418 <___vfprintf_internal_r+0x6a4>
  801760:	d9414c17 	ldw	r5,1328(sp)
  801764:	29400414 	ori	r5,r5,16
  801768:	d9414c15 	stw	r5,1328(sp)
  80176c:	d9814c17 	ldw	r6,1328(sp)
  801770:	3080080c 	andi	r2,r6,32
  801774:	10014f1e 	bne	r2,zero,801cb4 <___vfprintf_internal_r+0xf40>
  801778:	d8c14c17 	ldw	r3,1328(sp)
  80177c:	1880040c 	andi	r2,r3,16
  801780:	1002ea1e 	bne	r2,zero,80232c <___vfprintf_internal_r+0x15b8>
  801784:	d9014c17 	ldw	r4,1328(sp)
  801788:	2080100c 	andi	r2,r4,64
  80178c:	1002e726 	beq	r2,zero,80232c <___vfprintf_internal_r+0x15b8>
  801790:	3880000f 	ldh	r2,0(r7)
  801794:	39c00104 	addi	r7,r7,4
  801798:	d9c14015 	stw	r7,1280(sp)
  80179c:	1023d7fa 	srai	r17,r2,31
  8017a0:	1021883a 	mov	r16,r2
  8017a4:	88037216 	blt	r17,zero,802570 <___vfprintf_internal_r+0x17fc>
  8017a8:	01000044 	movi	r4,1
  8017ac:	98000416 	blt	r19,zero,8017c0 <___vfprintf_internal_r+0xa4c>
  8017b0:	d8c14c17 	ldw	r3,1328(sp)
  8017b4:	00bfdfc4 	movi	r2,-129
  8017b8:	1886703a 	and	r3,r3,r2
  8017bc:	d8c14c15 	stw	r3,1328(sp)
  8017c0:	8444b03a 	or	r2,r16,r17
  8017c4:	1002261e 	bne	r2,zero,802060 <___vfprintf_internal_r+0x12ec>
  8017c8:	9802251e 	bne	r19,zero,802060 <___vfprintf_internal_r+0x12ec>
  8017cc:	20803fcc 	andi	r2,r4,255
  8017d0:	10029b26 	beq	r2,zero,802240 <___vfprintf_internal_r+0x14cc>
  8017d4:	d8c01904 	addi	r3,sp,100
  8017d8:	dd000f04 	addi	r20,sp,60
  8017dc:	d8c14115 	stw	r3,1284(sp)
  8017e0:	d8c14117 	ldw	r3,1284(sp)
  8017e4:	dcc14515 	stw	r19,1300(sp)
  8017e8:	a0c5c83a 	sub	r2,r20,r3
  8017ec:	11c00a04 	addi	r7,r2,40
  8017f0:	99c0010e 	bge	r19,r7,8017f8 <___vfprintf_internal_r+0xa84>
  8017f4:	d9c14515 	stw	r7,1300(sp)
  8017f8:	dcc14615 	stw	r19,1304(sp)
  8017fc:	d8800407 	ldb	r2,16(sp)
  801800:	103e4c26 	beq	r2,zero,801134 <___vfprintf_internal_r+0x3c0>
  801804:	d8814517 	ldw	r2,1300(sp)
  801808:	10800044 	addi	r2,r2,1
  80180c:	d8814515 	stw	r2,1300(sp)
  801810:	003e4806 	br	801134 <___vfprintf_internal_r+0x3c0>
  801814:	d9814c17 	ldw	r6,1328(sp)
  801818:	31800414 	ori	r6,r6,16
  80181c:	d9814c15 	stw	r6,1328(sp)
  801820:	d8c14c17 	ldw	r3,1328(sp)
  801824:	1880080c 	andi	r2,r3,32
  801828:	1001271e 	bne	r2,zero,801cc8 <___vfprintf_internal_r+0xf54>
  80182c:	d9414c17 	ldw	r5,1328(sp)
  801830:	2880040c 	andi	r2,r5,16
  801834:	1002b61e 	bne	r2,zero,802310 <___vfprintf_internal_r+0x159c>
  801838:	d9814c17 	ldw	r6,1328(sp)
  80183c:	3080100c 	andi	r2,r6,64
  801840:	1002b326 	beq	r2,zero,802310 <___vfprintf_internal_r+0x159c>
  801844:	3c00000b 	ldhu	r16,0(r7)
  801848:	0009883a 	mov	r4,zero
  80184c:	39c00104 	addi	r7,r7,4
  801850:	0023883a 	mov	r17,zero
  801854:	d9c14015 	stw	r7,1280(sp)
  801858:	d8000405 	stb	zero,16(sp)
  80185c:	003fd306 	br	8017ac <___vfprintf_internal_r+0xa38>
  801860:	d9014c17 	ldw	r4,1328(sp)
  801864:	21000414 	ori	r4,r4,16
  801868:	d9014c15 	stw	r4,1328(sp)
  80186c:	d9414c17 	ldw	r5,1328(sp)
  801870:	2880080c 	andi	r2,r5,32
  801874:	1001081e 	bne	r2,zero,801c98 <___vfprintf_internal_r+0xf24>
  801878:	d8c14c17 	ldw	r3,1328(sp)
  80187c:	1880040c 	andi	r2,r3,16
  801880:	1002b01e 	bne	r2,zero,802344 <___vfprintf_internal_r+0x15d0>
  801884:	d9014c17 	ldw	r4,1328(sp)
  801888:	2080100c 	andi	r2,r4,64
  80188c:	1002ad26 	beq	r2,zero,802344 <___vfprintf_internal_r+0x15d0>
  801890:	3c00000b 	ldhu	r16,0(r7)
  801894:	01000044 	movi	r4,1
  801898:	39c00104 	addi	r7,r7,4
  80189c:	0023883a 	mov	r17,zero
  8018a0:	d9c14015 	stw	r7,1280(sp)
  8018a4:	d8000405 	stb	zero,16(sp)
  8018a8:	003fc006 	br	8017ac <___vfprintf_internal_r+0xa38>
  8018ac:	d9014f17 	ldw	r4,1340(sp)
  8018b0:	b00b883a 	mov	r5,r22
  8018b4:	d9800c04 	addi	r6,sp,48
  8018b8:	0800d1c0 	call	800d1c <__sprint_r>
  8018bc:	103ee51e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  8018c0:	dc800e17 	ldw	r18,56(sp)
  8018c4:	d8c01904 	addi	r3,sp,100
  8018c8:	d9814c17 	ldw	r6,1328(sp)
  8018cc:	3080004c 	andi	r2,r6,1
  8018d0:	1005003a 	cmpeq	r2,r2,zero
  8018d4:	103ea51e 	bne	r2,zero,80136c <___vfprintf_internal_r+0x5f8>
  8018d8:	00800044 	movi	r2,1
  8018dc:	dc400d17 	ldw	r17,52(sp)
  8018e0:	18800115 	stw	r2,4(r3)
  8018e4:	d8814917 	ldw	r2,1316(sp)
  8018e8:	94800044 	addi	r18,r18,1
  8018ec:	8c400044 	addi	r17,r17,1
  8018f0:	18800015 	stw	r2,0(r3)
  8018f4:	008001c4 	movi	r2,7
  8018f8:	dc800e15 	stw	r18,56(sp)
  8018fc:	dc400d15 	stw	r17,52(sp)
  801900:	14421e0e 	bge	r2,r17,80217c <___vfprintf_internal_r+0x1408>
  801904:	d9014f17 	ldw	r4,1340(sp)
  801908:	b00b883a 	mov	r5,r22
  80190c:	d9800c04 	addi	r6,sp,48
  801910:	0800d1c0 	call	800d1c <__sprint_r>
  801914:	103ecf1e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  801918:	dc800e17 	ldw	r18,56(sp)
  80191c:	d8c01904 	addi	r3,sp,100
  801920:	003e9206 	br	80136c <___vfprintf_internal_r+0x5f8>
  801924:	d9014f17 	ldw	r4,1340(sp)
  801928:	b00b883a 	mov	r5,r22
  80192c:	d9800c04 	addi	r6,sp,48
  801930:	0800d1c0 	call	800d1c <__sprint_r>
  801934:	103ec026 	beq	r2,zero,801438 <___vfprintf_internal_r+0x6c4>
  801938:	003ec606 	br	801454 <___vfprintf_internal_r+0x6e0>
  80193c:	d9014f17 	ldw	r4,1340(sp)
  801940:	b00b883a 	mov	r5,r22
  801944:	d9800c04 	addi	r6,sp,48
  801948:	d9c15115 	stw	r7,1348(sp)
  80194c:	0800d1c0 	call	800d1c <__sprint_r>
  801950:	d9c15117 	ldw	r7,1348(sp)
  801954:	103ebf1e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  801958:	dc800e17 	ldw	r18,56(sp)
  80195c:	dc400d17 	ldw	r17,52(sp)
  801960:	dd401904 	addi	r21,sp,100
  801964:	003e7406 	br	801338 <___vfprintf_internal_r+0x5c4>
  801968:	d9014f17 	ldw	r4,1340(sp)
  80196c:	b00b883a 	mov	r5,r22
  801970:	d9800c04 	addi	r6,sp,48
  801974:	d9c15115 	stw	r7,1348(sp)
  801978:	0800d1c0 	call	800d1c <__sprint_r>
  80197c:	d9c15117 	ldw	r7,1348(sp)
  801980:	103eb41e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  801984:	dd401904 	addi	r21,sp,100
  801988:	003d6d06 	br	800f40 <___vfprintf_internal_r+0x1cc>
  80198c:	d9014f17 	ldw	r4,1340(sp)
  801990:	b00b883a 	mov	r5,r22
  801994:	d9800c04 	addi	r6,sp,48
  801998:	d9c15115 	stw	r7,1348(sp)
  80199c:	0800d1c0 	call	800d1c <__sprint_r>
  8019a0:	d9c15117 	ldw	r7,1348(sp)
  8019a4:	103eab1e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  8019a8:	dc800e17 	ldw	r18,56(sp)
  8019ac:	dc400d17 	ldw	r17,52(sp)
  8019b0:	dd401904 	addi	r21,sp,100
  8019b4:	003e3406 	br	801288 <___vfprintf_internal_r+0x514>
  8019b8:	d9014f17 	ldw	r4,1340(sp)
  8019bc:	b00b883a 	mov	r5,r22
  8019c0:	d9800c04 	addi	r6,sp,48
  8019c4:	d9c15115 	stw	r7,1348(sp)
  8019c8:	0800d1c0 	call	800d1c <__sprint_r>
  8019cc:	d9c15117 	ldw	r7,1348(sp)
  8019d0:	103ea01e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  8019d4:	dc800e17 	ldw	r18,56(sp)
  8019d8:	dc400d17 	ldw	r17,52(sp)
  8019dc:	dd401904 	addi	r21,sp,100
  8019e0:	003e1c06 	br	801254 <___vfprintf_internal_r+0x4e0>
  8019e4:	d9014f17 	ldw	r4,1340(sp)
  8019e8:	b00b883a 	mov	r5,r22
  8019ec:	d9800c04 	addi	r6,sp,48
  8019f0:	d9c15115 	stw	r7,1348(sp)
  8019f4:	0800d1c0 	call	800d1c <__sprint_r>
  8019f8:	d9c15117 	ldw	r7,1348(sp)
  8019fc:	103e951e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  801a00:	dc800e17 	ldw	r18,56(sp)
  801a04:	dc400d17 	ldw	r17,52(sp)
  801a08:	dd401904 	addi	r21,sp,100
  801a0c:	003e0406 	br	801220 <___vfprintf_internal_r+0x4ac>
  801a10:	d9000517 	ldw	r4,20(sp)
  801a14:	0102520e 	bge	zero,r4,802360 <___vfprintf_internal_r+0x15ec>
  801a18:	d9814717 	ldw	r6,1308(sp)
  801a1c:	21807a16 	blt	r4,r6,801c08 <___vfprintf_internal_r+0xe94>
  801a20:	d8814117 	ldw	r2,1284(sp)
  801a24:	91a5883a 	add	r18,r18,r6
  801a28:	8c400044 	addi	r17,r17,1
  801a2c:	a8800015 	stw	r2,0(r21)
  801a30:	008001c4 	movi	r2,7
  801a34:	a9800115 	stw	r6,4(r21)
  801a38:	dc800e15 	stw	r18,56(sp)
  801a3c:	dc400d15 	stw	r17,52(sp)
  801a40:	1442f616 	blt	r2,r17,80261c <___vfprintf_internal_r+0x18a8>
  801a44:	a8c00204 	addi	r3,r21,8
  801a48:	d9414717 	ldw	r5,1308(sp)
  801a4c:	2161c83a 	sub	r16,r4,r5
  801a50:	043f9d0e 	bge	zero,r16,8018c8 <___vfprintf_internal_r+0xb54>
  801a54:	00800404 	movi	r2,16
  801a58:	1402130e 	bge	r2,r16,8022a8 <___vfprintf_internal_r+0x1534>
  801a5c:	dc400d17 	ldw	r17,52(sp)
  801a60:	1027883a 	mov	r19,r2
  801a64:	07002074 	movhi	fp,129
  801a68:	e737e384 	addi	fp,fp,-8306
  801a6c:	050001c4 	movi	r20,7
  801a70:	00000306 	br	801a80 <___vfprintf_internal_r+0xd0c>
  801a74:	18c00204 	addi	r3,r3,8
  801a78:	843ffc04 	addi	r16,r16,-16
  801a7c:	9c020d0e 	bge	r19,r16,8022b4 <___vfprintf_internal_r+0x1540>
  801a80:	94800404 	addi	r18,r18,16
  801a84:	8c400044 	addi	r17,r17,1
  801a88:	1f000015 	stw	fp,0(r3)
  801a8c:	1cc00115 	stw	r19,4(r3)
  801a90:	dc800e15 	stw	r18,56(sp)
  801a94:	dc400d15 	stw	r17,52(sp)
  801a98:	a47ff60e 	bge	r20,r17,801a74 <___vfprintf_internal_r+0xd00>
  801a9c:	d9014f17 	ldw	r4,1340(sp)
  801aa0:	b00b883a 	mov	r5,r22
  801aa4:	d9800c04 	addi	r6,sp,48
  801aa8:	0800d1c0 	call	800d1c <__sprint_r>
  801aac:	103e691e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  801ab0:	dc800e17 	ldw	r18,56(sp)
  801ab4:	dc400d17 	ldw	r17,52(sp)
  801ab8:	d8c01904 	addi	r3,sp,100
  801abc:	003fee06 	br	801a78 <___vfprintf_internal_r+0xd04>
  801ac0:	d8814717 	ldw	r2,1308(sp)
  801ac4:	143fffc4 	addi	r16,r2,-1
  801ac8:	043e970e 	bge	zero,r16,801528 <___vfprintf_internal_r+0x7b4>
  801acc:	00800404 	movi	r2,16
  801ad0:	1400180e 	bge	r2,r16,801b34 <___vfprintf_internal_r+0xdc0>
  801ad4:	1029883a 	mov	r20,r2
  801ad8:	07002074 	movhi	fp,129
  801adc:	e737e384 	addi	fp,fp,-8306
  801ae0:	054001c4 	movi	r21,7
  801ae4:	00000306 	br	801af4 <___vfprintf_internal_r+0xd80>
  801ae8:	9cc00204 	addi	r19,r19,8
  801aec:	843ffc04 	addi	r16,r16,-16
  801af0:	a400120e 	bge	r20,r16,801b3c <___vfprintf_internal_r+0xdc8>
  801af4:	94800404 	addi	r18,r18,16
  801af8:	8c400044 	addi	r17,r17,1
  801afc:	9f000015 	stw	fp,0(r19)
  801b00:	9d000115 	stw	r20,4(r19)
  801b04:	dc800e15 	stw	r18,56(sp)
  801b08:	dc400d15 	stw	r17,52(sp)
  801b0c:	ac7ff60e 	bge	r21,r17,801ae8 <___vfprintf_internal_r+0xd74>
  801b10:	d9014f17 	ldw	r4,1340(sp)
  801b14:	b00b883a 	mov	r5,r22
  801b18:	d9800c04 	addi	r6,sp,48
  801b1c:	0800d1c0 	call	800d1c <__sprint_r>
  801b20:	103e4c1e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  801b24:	dc800e17 	ldw	r18,56(sp)
  801b28:	dc400d17 	ldw	r17,52(sp)
  801b2c:	dcc01904 	addi	r19,sp,100
  801b30:	003fee06 	br	801aec <___vfprintf_internal_r+0xd78>
  801b34:	07002074 	movhi	fp,129
  801b38:	e737e384 	addi	fp,fp,-8306
  801b3c:	9425883a 	add	r18,r18,r16
  801b40:	8c400044 	addi	r17,r17,1
  801b44:	008001c4 	movi	r2,7
  801b48:	9f000015 	stw	fp,0(r19)
  801b4c:	9c000115 	stw	r16,4(r19)
  801b50:	dc800e15 	stw	r18,56(sp)
  801b54:	dc400d15 	stw	r17,52(sp)
  801b58:	147e720e 	bge	r2,r17,801524 <___vfprintf_internal_r+0x7b0>
  801b5c:	d9014f17 	ldw	r4,1340(sp)
  801b60:	b00b883a 	mov	r5,r22
  801b64:	d9800c04 	addi	r6,sp,48
  801b68:	0800d1c0 	call	800d1c <__sprint_r>
  801b6c:	103e391e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  801b70:	dc800e17 	ldw	r18,56(sp)
  801b74:	dc400d17 	ldw	r17,52(sp)
  801b78:	dcc01904 	addi	r19,sp,100
  801b7c:	003e6a06 	br	801528 <___vfprintf_internal_r+0x7b4>
  801b80:	d9014f17 	ldw	r4,1340(sp)
  801b84:	b00b883a 	mov	r5,r22
  801b88:	d9800c04 	addi	r6,sp,48
  801b8c:	d9c15115 	stw	r7,1348(sp)
  801b90:	0800d1c0 	call	800d1c <__sprint_r>
  801b94:	d9c15117 	ldw	r7,1348(sp)
  801b98:	103e2e1e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  801b9c:	dc800e17 	ldw	r18,56(sp)
  801ba0:	dc400d17 	ldw	r17,52(sp)
  801ba4:	dd401904 	addi	r21,sp,100
  801ba8:	003dba06 	br	801294 <___vfprintf_internal_r+0x520>
  801bac:	d9014f17 	ldw	r4,1340(sp)
  801bb0:	b00b883a 	mov	r5,r22
  801bb4:	d9800c04 	addi	r6,sp,48
  801bb8:	0800d1c0 	call	800d1c <__sprint_r>
  801bbc:	103e251e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  801bc0:	dc800e17 	ldw	r18,56(sp)
  801bc4:	dc400d17 	ldw	r17,52(sp)
  801bc8:	dcc01904 	addi	r19,sp,100
  801bcc:	003e4206 	br	8014d8 <___vfprintf_internal_r+0x764>
  801bd0:	d9014f17 	ldw	r4,1340(sp)
  801bd4:	b00b883a 	mov	r5,r22
  801bd8:	d9800c04 	addi	r6,sp,48
  801bdc:	0800d1c0 	call	800d1c <__sprint_r>
  801be0:	103e1c1e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  801be4:	dc800e17 	ldw	r18,56(sp)
  801be8:	dc400d17 	ldw	r17,52(sp)
  801bec:	d8c01904 	addi	r3,sp,100
  801bf0:	003e2e06 	br	8014ac <___vfprintf_internal_r+0x738>
  801bf4:	d9414c17 	ldw	r5,1328(sp)
  801bf8:	2880004c 	andi	r2,r5,1
  801bfc:	1005003a 	cmpeq	r2,r2,zero
  801c00:	103dda1e 	bne	r2,zero,80136c <___vfprintf_internal_r+0x5f8>
  801c04:	003e9f06 	br	801684 <___vfprintf_internal_r+0x910>
  801c08:	d8c14117 	ldw	r3,1284(sp)
  801c0c:	9125883a 	add	r18,r18,r4
  801c10:	8c400044 	addi	r17,r17,1
  801c14:	008001c4 	movi	r2,7
  801c18:	a8c00015 	stw	r3,0(r21)
  801c1c:	a9000115 	stw	r4,4(r21)
  801c20:	dc800e15 	stw	r18,56(sp)
  801c24:	dc400d15 	stw	r17,52(sp)
  801c28:	14426616 	blt	r2,r17,8025c4 <___vfprintf_internal_r+0x1850>
  801c2c:	a8c00204 	addi	r3,r21,8
  801c30:	d9414917 	ldw	r5,1316(sp)
  801c34:	00800044 	movi	r2,1
  801c38:	94800044 	addi	r18,r18,1
  801c3c:	8c400044 	addi	r17,r17,1
  801c40:	18800115 	stw	r2,4(r3)
  801c44:	008001c4 	movi	r2,7
  801c48:	19400015 	stw	r5,0(r3)
  801c4c:	dc800e15 	stw	r18,56(sp)
  801c50:	dc400d15 	stw	r17,52(sp)
  801c54:	2021883a 	mov	r16,r4
  801c58:	14425016 	blt	r2,r17,80259c <___vfprintf_internal_r+0x1828>
  801c5c:	19400204 	addi	r5,r3,8
  801c60:	d9814717 	ldw	r6,1308(sp)
  801c64:	8c400044 	addi	r17,r17,1
  801c68:	dc400d15 	stw	r17,52(sp)
  801c6c:	3107c83a 	sub	r3,r6,r4
  801c70:	d9014117 	ldw	r4,1284(sp)
  801c74:	90e5883a 	add	r18,r18,r3
  801c78:	28c00115 	stw	r3,4(r5)
  801c7c:	8105883a 	add	r2,r16,r4
  801c80:	28800015 	stw	r2,0(r5)
  801c84:	008001c4 	movi	r2,7
  801c88:	dc800e15 	stw	r18,56(sp)
  801c8c:	147f1d16 	blt	r2,r17,801904 <___vfprintf_internal_r+0xb90>
  801c90:	28c00204 	addi	r3,r5,8
  801c94:	003db506 	br	80136c <___vfprintf_internal_r+0x5f8>
  801c98:	3c000017 	ldw	r16,0(r7)
  801c9c:	3c400117 	ldw	r17,4(r7)
  801ca0:	39800204 	addi	r6,r7,8
  801ca4:	01000044 	movi	r4,1
  801ca8:	d9814015 	stw	r6,1280(sp)
  801cac:	d8000405 	stb	zero,16(sp)
  801cb0:	003ebe06 	br	8017ac <___vfprintf_internal_r+0xa38>
  801cb4:	3c000017 	ldw	r16,0(r7)
  801cb8:	3c400117 	ldw	r17,4(r7)
  801cbc:	38800204 	addi	r2,r7,8
  801cc0:	d8814015 	stw	r2,1280(sp)
  801cc4:	003eb706 	br	8017a4 <___vfprintf_internal_r+0xa30>
  801cc8:	3c000017 	ldw	r16,0(r7)
  801ccc:	3c400117 	ldw	r17,4(r7)
  801cd0:	39000204 	addi	r4,r7,8
  801cd4:	d9014015 	stw	r4,1280(sp)
  801cd8:	0009883a 	mov	r4,zero
  801cdc:	d8000405 	stb	zero,16(sp)
  801ce0:	003eb206 	br	8017ac <___vfprintf_internal_r+0xa38>
  801ce4:	38c00017 	ldw	r3,0(r7)
  801ce8:	39c00104 	addi	r7,r7,4
  801cec:	d8c14a15 	stw	r3,1320(sp)
  801cf0:	1800d10e 	bge	r3,zero,802038 <___vfprintf_internal_r+0x12c4>
  801cf4:	00c7c83a 	sub	r3,zero,r3
  801cf8:	d8c14a15 	stw	r3,1320(sp)
  801cfc:	d9014c17 	ldw	r4,1328(sp)
  801d00:	b8c00007 	ldb	r3,0(r23)
  801d04:	21000114 	ori	r4,r4,4
  801d08:	d9014c15 	stw	r4,1328(sp)
  801d0c:	003c9806 	br	800f70 <___vfprintf_internal_r+0x1fc>
  801d10:	d9814c17 	ldw	r6,1328(sp)
  801d14:	3080080c 	andi	r2,r6,32
  801d18:	1001f026 	beq	r2,zero,8024dc <___vfprintf_internal_r+0x1768>
  801d1c:	d9014b17 	ldw	r4,1324(sp)
  801d20:	38800017 	ldw	r2,0(r7)
  801d24:	39c00104 	addi	r7,r7,4
  801d28:	d9c14015 	stw	r7,1280(sp)
  801d2c:	2007d7fa 	srai	r3,r4,31
  801d30:	d9c14017 	ldw	r7,1280(sp)
  801d34:	11000015 	stw	r4,0(r2)
  801d38:	10c00115 	stw	r3,4(r2)
  801d3c:	003c6906 	br	800ee4 <___vfprintf_internal_r+0x170>
  801d40:	b8c00007 	ldb	r3,0(r23)
  801d44:	00801b04 	movi	r2,108
  801d48:	18824f26 	beq	r3,r2,802688 <___vfprintf_internal_r+0x1914>
  801d4c:	d9414c17 	ldw	r5,1328(sp)
  801d50:	29400414 	ori	r5,r5,16
  801d54:	d9414c15 	stw	r5,1328(sp)
  801d58:	003c8506 	br	800f70 <___vfprintf_internal_r+0x1fc>
  801d5c:	d9814c17 	ldw	r6,1328(sp)
  801d60:	b8c00007 	ldb	r3,0(r23)
  801d64:	31800814 	ori	r6,r6,32
  801d68:	d9814c15 	stw	r6,1328(sp)
  801d6c:	003c8006 	br	800f70 <___vfprintf_internal_r+0x1fc>
  801d70:	d8814c17 	ldw	r2,1328(sp)
  801d74:	3c000017 	ldw	r16,0(r7)
  801d78:	00c01e04 	movi	r3,120
  801d7c:	10800094 	ori	r2,r2,2
  801d80:	d8814c15 	stw	r2,1328(sp)
  801d84:	39c00104 	addi	r7,r7,4
  801d88:	01402074 	movhi	r5,129
  801d8c:	2977cc04 	addi	r5,r5,-8400
  801d90:	00800c04 	movi	r2,48
  801d94:	0023883a 	mov	r17,zero
  801d98:	01000084 	movi	r4,2
  801d9c:	d9c14015 	stw	r7,1280(sp)
  801da0:	d8c14d15 	stw	r3,1332(sp)
  801da4:	d9414415 	stw	r5,1296(sp)
  801da8:	d8800445 	stb	r2,17(sp)
  801dac:	d8c00485 	stb	r3,18(sp)
  801db0:	d8000405 	stb	zero,16(sp)
  801db4:	003e7d06 	br	8017ac <___vfprintf_internal_r+0xa38>
  801db8:	d8814c17 	ldw	r2,1328(sp)
  801dbc:	b8c00007 	ldb	r3,0(r23)
  801dc0:	10801014 	ori	r2,r2,64
  801dc4:	d8814c15 	stw	r2,1328(sp)
  801dc8:	003c6906 	br	800f70 <___vfprintf_internal_r+0x1fc>
  801dcc:	d9414c17 	ldw	r5,1328(sp)
  801dd0:	2880020c 	andi	r2,r5,8
  801dd4:	1001df26 	beq	r2,zero,802554 <___vfprintf_internal_r+0x17e0>
  801dd8:	39800017 	ldw	r6,0(r7)
  801ddc:	38800204 	addi	r2,r7,8
  801de0:	d8814015 	stw	r2,1280(sp)
  801de4:	d9814215 	stw	r6,1288(sp)
  801de8:	39c00117 	ldw	r7,4(r7)
  801dec:	d9c14315 	stw	r7,1292(sp)
  801df0:	d9014217 	ldw	r4,1288(sp)
  801df4:	d9414317 	ldw	r5,1292(sp)
  801df8:	08076e80 	call	8076e8 <__isinfd>
  801dfc:	10021726 	beq	r2,zero,80265c <___vfprintf_internal_r+0x18e8>
  801e00:	d9014217 	ldw	r4,1288(sp)
  801e04:	d9414317 	ldw	r5,1292(sp)
  801e08:	000d883a 	mov	r6,zero
  801e0c:	000f883a 	mov	r7,zero
  801e10:	08097c80 	call	8097c8 <__ltdf2>
  801e14:	1002ca16 	blt	r2,zero,802940 <___vfprintf_internal_r+0x1bcc>
  801e18:	d9414d17 	ldw	r5,1332(sp)
  801e1c:	008011c4 	movi	r2,71
  801e20:	11420a16 	blt	r2,r5,80264c <___vfprintf_internal_r+0x18d8>
  801e24:	01802074 	movhi	r6,129
  801e28:	31b7d104 	addi	r6,r6,-8380
  801e2c:	d9814115 	stw	r6,1284(sp)
  801e30:	d9014c17 	ldw	r4,1328(sp)
  801e34:	00c000c4 	movi	r3,3
  801e38:	00bfdfc4 	movi	r2,-129
  801e3c:	2088703a 	and	r4,r4,r2
  801e40:	180f883a 	mov	r7,r3
  801e44:	d8c14515 	stw	r3,1300(sp)
  801e48:	d9014c15 	stw	r4,1328(sp)
  801e4c:	d8014615 	stw	zero,1304(sp)
  801e50:	003e6a06 	br	8017fc <___vfprintf_internal_r+0xa88>
  801e54:	38800017 	ldw	r2,0(r7)
  801e58:	00c00044 	movi	r3,1
  801e5c:	39c00104 	addi	r7,r7,4
  801e60:	d9c14015 	stw	r7,1280(sp)
  801e64:	d9000f04 	addi	r4,sp,60
  801e68:	180f883a 	mov	r7,r3
  801e6c:	d8c14515 	stw	r3,1300(sp)
  801e70:	d9014115 	stw	r4,1284(sp)
  801e74:	d8800f05 	stb	r2,60(sp)
  801e78:	d8000405 	stb	zero,16(sp)
  801e7c:	003cac06 	br	801130 <___vfprintf_internal_r+0x3bc>
  801e80:	01402074 	movhi	r5,129
  801e84:	2977d704 	addi	r5,r5,-8356
  801e88:	d9414415 	stw	r5,1296(sp)
  801e8c:	d9814c17 	ldw	r6,1328(sp)
  801e90:	3080080c 	andi	r2,r6,32
  801e94:	1000f926 	beq	r2,zero,80227c <___vfprintf_internal_r+0x1508>
  801e98:	3c000017 	ldw	r16,0(r7)
  801e9c:	3c400117 	ldw	r17,4(r7)
  801ea0:	38800204 	addi	r2,r7,8
  801ea4:	d8814015 	stw	r2,1280(sp)
  801ea8:	d9414c17 	ldw	r5,1328(sp)
  801eac:	2880004c 	andi	r2,r5,1
  801eb0:	1005003a 	cmpeq	r2,r2,zero
  801eb4:	1000b31e 	bne	r2,zero,802184 <___vfprintf_internal_r+0x1410>
  801eb8:	8444b03a 	or	r2,r16,r17
  801ebc:	1000b126 	beq	r2,zero,802184 <___vfprintf_internal_r+0x1410>
  801ec0:	d9814d17 	ldw	r6,1332(sp)
  801ec4:	29400094 	ori	r5,r5,2
  801ec8:	00800c04 	movi	r2,48
  801ecc:	01000084 	movi	r4,2
  801ed0:	d9414c15 	stw	r5,1328(sp)
  801ed4:	d8800445 	stb	r2,17(sp)
  801ed8:	d9800485 	stb	r6,18(sp)
  801edc:	d8000405 	stb	zero,16(sp)
  801ee0:	003e3206 	br	8017ac <___vfprintf_internal_r+0xa38>
  801ee4:	01802074 	movhi	r6,129
  801ee8:	31b7cc04 	addi	r6,r6,-8400
  801eec:	d9814415 	stw	r6,1296(sp)
  801ef0:	003fe606 	br	801e8c <___vfprintf_internal_r+0x1118>
  801ef4:	00800ac4 	movi	r2,43
  801ef8:	d8800405 	stb	r2,16(sp)
  801efc:	b8c00007 	ldb	r3,0(r23)
  801f00:	003c1b06 	br	800f70 <___vfprintf_internal_r+0x1fc>
  801f04:	d8814c17 	ldw	r2,1328(sp)
  801f08:	b8c00007 	ldb	r3,0(r23)
  801f0c:	10800054 	ori	r2,r2,1
  801f10:	d8814c15 	stw	r2,1328(sp)
  801f14:	003c1606 	br	800f70 <___vfprintf_internal_r+0x1fc>
  801f18:	d8800407 	ldb	r2,16(sp)
  801f1c:	1000461e 	bne	r2,zero,802038 <___vfprintf_internal_r+0x12c4>
  801f20:	00800804 	movi	r2,32
  801f24:	d8800405 	stb	r2,16(sp)
  801f28:	b8c00007 	ldb	r3,0(r23)
  801f2c:	003c1006 	br	800f70 <___vfprintf_internal_r+0x1fc>
  801f30:	d9814c17 	ldw	r6,1328(sp)
  801f34:	b8c00007 	ldb	r3,0(r23)
  801f38:	31800214 	ori	r6,r6,8
  801f3c:	d9814c15 	stw	r6,1328(sp)
  801f40:	003c0b06 	br	800f70 <___vfprintf_internal_r+0x1fc>
  801f44:	0007883a 	mov	r3,zero
  801f48:	01000244 	movi	r4,9
  801f4c:	188002a4 	muli	r2,r3,10
  801f50:	b8c00007 	ldb	r3,0(r23)
  801f54:	d9814d17 	ldw	r6,1332(sp)
  801f58:	bdc00044 	addi	r23,r23,1
  801f5c:	d8c14d15 	stw	r3,1332(sp)
  801f60:	d9414d17 	ldw	r5,1332(sp)
  801f64:	3085883a 	add	r2,r6,r2
  801f68:	10fff404 	addi	r3,r2,-48
  801f6c:	28bff404 	addi	r2,r5,-48
  801f70:	20bff62e 	bgeu	r4,r2,801f4c <___vfprintf_internal_r+0x11d8>
  801f74:	d8c14a15 	stw	r3,1320(sp)
  801f78:	003bff06 	br	800f78 <___vfprintf_internal_r+0x204>
  801f7c:	d9414c17 	ldw	r5,1328(sp)
  801f80:	b8c00007 	ldb	r3,0(r23)
  801f84:	29402014 	ori	r5,r5,128
  801f88:	d9414c15 	stw	r5,1328(sp)
  801f8c:	003bf806 	br	800f70 <___vfprintf_internal_r+0x1fc>
  801f90:	b8c00007 	ldb	r3,0(r23)
  801f94:	00800a84 	movi	r2,42
  801f98:	bdc00044 	addi	r23,r23,1
  801f9c:	18831526 	beq	r3,r2,802bf4 <___vfprintf_internal_r+0x1e80>
  801fa0:	d8c14d15 	stw	r3,1332(sp)
  801fa4:	18bff404 	addi	r2,r3,-48
  801fa8:	00c00244 	movi	r3,9
  801fac:	18827836 	bltu	r3,r2,802990 <___vfprintf_internal_r+0x1c1c>
  801fb0:	000d883a 	mov	r6,zero
  801fb4:	308002a4 	muli	r2,r6,10
  801fb8:	b9800007 	ldb	r6,0(r23)
  801fbc:	d9414d17 	ldw	r5,1332(sp)
  801fc0:	bdc00044 	addi	r23,r23,1
  801fc4:	d9814d15 	stw	r6,1332(sp)
  801fc8:	d9014d17 	ldw	r4,1332(sp)
  801fcc:	1145883a 	add	r2,r2,r5
  801fd0:	11bff404 	addi	r6,r2,-48
  801fd4:	20bff404 	addi	r2,r4,-48
  801fd8:	18bff62e 	bgeu	r3,r2,801fb4 <___vfprintf_internal_r+0x1240>
  801fdc:	3027883a 	mov	r19,r6
  801fe0:	303be50e 	bge	r6,zero,800f78 <___vfprintf_internal_r+0x204>
  801fe4:	04ffffc4 	movi	r19,-1
  801fe8:	003be306 	br	800f78 <___vfprintf_internal_r+0x204>
  801fec:	d8000405 	stb	zero,16(sp)
  801ff0:	39800017 	ldw	r6,0(r7)
  801ff4:	39c00104 	addi	r7,r7,4
  801ff8:	d9c14015 	stw	r7,1280(sp)
  801ffc:	d9814115 	stw	r6,1284(sp)
  802000:	3001c926 	beq	r6,zero,802728 <___vfprintf_internal_r+0x19b4>
  802004:	98000e16 	blt	r19,zero,802040 <___vfprintf_internal_r+0x12cc>
  802008:	d9014117 	ldw	r4,1284(sp)
  80200c:	000b883a 	mov	r5,zero
  802010:	980d883a 	mov	r6,r19
  802014:	0805ea40 	call	805ea4 <memchr>
  802018:	10025926 	beq	r2,zero,802980 <___vfprintf_internal_r+0x1c0c>
  80201c:	d8c14117 	ldw	r3,1284(sp)
  802020:	10cfc83a 	sub	r7,r2,r3
  802024:	99c19e16 	blt	r19,r7,8026a0 <___vfprintf_internal_r+0x192c>
  802028:	d9c14515 	stw	r7,1300(sp)
  80202c:	38000916 	blt	r7,zero,802054 <___vfprintf_internal_r+0x12e0>
  802030:	d8014615 	stw	zero,1304(sp)
  802034:	003df106 	br	8017fc <___vfprintf_internal_r+0xa88>
  802038:	b8c00007 	ldb	r3,0(r23)
  80203c:	003bcc06 	br	800f70 <___vfprintf_internal_r+0x1fc>
  802040:	d9014117 	ldw	r4,1284(sp)
  802044:	0800c4c0 	call	800c4c <strlen>
  802048:	d8814515 	stw	r2,1300(sp)
  80204c:	100f883a 	mov	r7,r2
  802050:	103ff70e 	bge	r2,zero,802030 <___vfprintf_internal_r+0x12bc>
  802054:	d8014515 	stw	zero,1300(sp)
  802058:	d8014615 	stw	zero,1304(sp)
  80205c:	003de706 	br	8017fc <___vfprintf_internal_r+0xa88>
  802060:	20c03fcc 	andi	r3,r4,255
  802064:	00800044 	movi	r2,1
  802068:	18802d26 	beq	r3,r2,802120 <___vfprintf_internal_r+0x13ac>
  80206c:	18800e36 	bltu	r3,r2,8020a8 <___vfprintf_internal_r+0x1334>
  802070:	00800084 	movi	r2,2
  802074:	1880fa26 	beq	r3,r2,802460 <___vfprintf_internal_r+0x16ec>
  802078:	01002074 	movhi	r4,129
  80207c:	2137dc04 	addi	r4,r4,-8336
  802080:	0800c4c0 	call	800c4c <strlen>
  802084:	100f883a 	mov	r7,r2
  802088:	dcc14515 	stw	r19,1300(sp)
  80208c:	9880010e 	bge	r19,r2,802094 <___vfprintf_internal_r+0x1320>
  802090:	d8814515 	stw	r2,1300(sp)
  802094:	00802074 	movhi	r2,129
  802098:	10b7dc04 	addi	r2,r2,-8336
  80209c:	dcc14615 	stw	r19,1304(sp)
  8020a0:	d8814115 	stw	r2,1284(sp)
  8020a4:	003dd506 	br	8017fc <___vfprintf_internal_r+0xa88>
  8020a8:	d9401904 	addi	r5,sp,100
  8020ac:	dd000f04 	addi	r20,sp,60
  8020b0:	d9414115 	stw	r5,1284(sp)
  8020b4:	880a977a 	slli	r5,r17,29
  8020b8:	d9814117 	ldw	r6,1284(sp)
  8020bc:	8004d0fa 	srli	r2,r16,3
  8020c0:	8806d0fa 	srli	r3,r17,3
  8020c4:	810001cc 	andi	r4,r16,7
  8020c8:	2884b03a 	or	r2,r5,r2
  8020cc:	31bfffc4 	addi	r6,r6,-1
  8020d0:	21000c04 	addi	r4,r4,48
  8020d4:	d9814115 	stw	r6,1284(sp)
  8020d8:	10cab03a 	or	r5,r2,r3
  8020dc:	31000005 	stb	r4,0(r6)
  8020e0:	1021883a 	mov	r16,r2
  8020e4:	1823883a 	mov	r17,r3
  8020e8:	283ff21e 	bne	r5,zero,8020b4 <___vfprintf_internal_r+0x1340>
  8020ec:	d8c14c17 	ldw	r3,1328(sp)
  8020f0:	1880004c 	andi	r2,r3,1
  8020f4:	1005003a 	cmpeq	r2,r2,zero
  8020f8:	103db91e 	bne	r2,zero,8017e0 <___vfprintf_internal_r+0xa6c>
  8020fc:	20803fcc 	andi	r2,r4,255
  802100:	1080201c 	xori	r2,r2,128
  802104:	10bfe004 	addi	r2,r2,-128
  802108:	00c00c04 	movi	r3,48
  80210c:	10fdb426 	beq	r2,r3,8017e0 <___vfprintf_internal_r+0xa6c>
  802110:	31bfffc4 	addi	r6,r6,-1
  802114:	d9814115 	stw	r6,1284(sp)
  802118:	30c00005 	stb	r3,0(r6)
  80211c:	003db006 	br	8017e0 <___vfprintf_internal_r+0xa6c>
  802120:	88800068 	cmpgeui	r2,r17,1
  802124:	10002c1e 	bne	r2,zero,8021d8 <___vfprintf_internal_r+0x1464>
  802128:	8800021e 	bne	r17,zero,802134 <___vfprintf_internal_r+0x13c0>
  80212c:	00800244 	movi	r2,9
  802130:	14002936 	bltu	r2,r16,8021d8 <___vfprintf_internal_r+0x1464>
  802134:	d90018c4 	addi	r4,sp,99
  802138:	dd000f04 	addi	r20,sp,60
  80213c:	d9014115 	stw	r4,1284(sp)
  802140:	d9014117 	ldw	r4,1284(sp)
  802144:	80800c04 	addi	r2,r16,48
  802148:	20800005 	stb	r2,0(r4)
  80214c:	003da406 	br	8017e0 <___vfprintf_internal_r+0xa6c>
  802150:	dc400d17 	ldw	r17,52(sp)
  802154:	07002074 	movhi	fp,129
  802158:	e737e384 	addi	fp,fp,-8306
  80215c:	9425883a 	add	r18,r18,r16
  802160:	8c400044 	addi	r17,r17,1
  802164:	008001c4 	movi	r2,7
  802168:	1f000015 	stw	fp,0(r3)
  80216c:	1c000115 	stw	r16,4(r3)
  802170:	dc800e15 	stw	r18,56(sp)
  802174:	dc400d15 	stw	r17,52(sp)
  802178:	147de216 	blt	r2,r17,801904 <___vfprintf_internal_r+0xb90>
  80217c:	18c00204 	addi	r3,r3,8
  802180:	003c7a06 	br	80136c <___vfprintf_internal_r+0x5f8>
  802184:	01000084 	movi	r4,2
  802188:	d8000405 	stb	zero,16(sp)
  80218c:	003d8706 	br	8017ac <___vfprintf_internal_r+0xa38>
  802190:	d9814c17 	ldw	r6,1328(sp)
  802194:	30c4703a 	and	r2,r6,r3
  802198:	1005003a 	cmpeq	r2,r2,zero
  80219c:	103cb926 	beq	r2,zero,801484 <___vfprintf_internal_r+0x710>
  8021a0:	d9014117 	ldw	r4,1284(sp)
  8021a4:	94800044 	addi	r18,r18,1
  8021a8:	8c400044 	addi	r17,r17,1
  8021ac:	008001c4 	movi	r2,7
  8021b0:	a9000015 	stw	r4,0(r21)
  8021b4:	a8c00115 	stw	r3,4(r21)
  8021b8:	dc800e15 	stw	r18,56(sp)
  8021bc:	dc400d15 	stw	r17,52(sp)
  8021c0:	147e6616 	blt	r2,r17,801b5c <___vfprintf_internal_r+0xde8>
  8021c4:	acc00204 	addi	r19,r21,8
  8021c8:	003cd706 	br	801528 <___vfprintf_internal_r+0x7b4>
  8021cc:	07002074 	movhi	fp,129
  8021d0:	e737e384 	addi	fp,fp,-8306
  8021d4:	003c4f06 	br	801314 <___vfprintf_internal_r+0x5a0>
  8021d8:	dd000f04 	addi	r20,sp,60
  8021dc:	dc801904 	addi	r18,sp,100
  8021e0:	8009883a 	mov	r4,r16
  8021e4:	880b883a 	mov	r5,r17
  8021e8:	01800284 	movi	r6,10
  8021ec:	000f883a 	mov	r7,zero
  8021f0:	08084d80 	call	8084d8 <__umoddi3>
  8021f4:	12000c04 	addi	r8,r2,48
  8021f8:	94bfffc4 	addi	r18,r18,-1
  8021fc:	8009883a 	mov	r4,r16
  802200:	880b883a 	mov	r5,r17
  802204:	01800284 	movi	r6,10
  802208:	000f883a 	mov	r7,zero
  80220c:	92000005 	stb	r8,0(r18)
  802210:	0807efc0 	call	807efc <__udivdi3>
  802214:	1009883a 	mov	r4,r2
  802218:	1021883a 	mov	r16,r2
  80221c:	18800068 	cmpgeui	r2,r3,1
  802220:	1823883a 	mov	r17,r3
  802224:	103fee1e 	bne	r2,zero,8021e0 <___vfprintf_internal_r+0x146c>
  802228:	1800021e 	bne	r3,zero,802234 <___vfprintf_internal_r+0x14c0>
  80222c:	00800244 	movi	r2,9
  802230:	113feb36 	bltu	r2,r4,8021e0 <___vfprintf_internal_r+0x146c>
  802234:	94bfffc4 	addi	r18,r18,-1
  802238:	dc814115 	stw	r18,1284(sp)
  80223c:	003fc006 	br	802140 <___vfprintf_internal_r+0x13cc>
  802240:	d9014c17 	ldw	r4,1328(sp)
  802244:	2080004c 	andi	r2,r4,1
  802248:	10009a1e 	bne	r2,zero,8024b4 <___vfprintf_internal_r+0x1740>
  80224c:	d9401904 	addi	r5,sp,100
  802250:	dd000f04 	addi	r20,sp,60
  802254:	d9414115 	stw	r5,1284(sp)
  802258:	003d6106 	br	8017e0 <___vfprintf_internal_r+0xa6c>
  80225c:	d9014f17 	ldw	r4,1340(sp)
  802260:	b00b883a 	mov	r5,r22
  802264:	d9800c04 	addi	r6,sp,48
  802268:	0800d1c0 	call	800d1c <__sprint_r>
  80226c:	103c791e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  802270:	dc800e17 	ldw	r18,56(sp)
  802274:	d8c01904 	addi	r3,sp,100
  802278:	003cff06 	br	801678 <___vfprintf_internal_r+0x904>
  80227c:	d8c14c17 	ldw	r3,1328(sp)
  802280:	1880040c 	andi	r2,r3,16
  802284:	1000711e 	bne	r2,zero,80244c <___vfprintf_internal_r+0x16d8>
  802288:	d9014c17 	ldw	r4,1328(sp)
  80228c:	2080100c 	andi	r2,r4,64
  802290:	10006e26 	beq	r2,zero,80244c <___vfprintf_internal_r+0x16d8>
  802294:	3c00000b 	ldhu	r16,0(r7)
  802298:	0023883a 	mov	r17,zero
  80229c:	39c00104 	addi	r7,r7,4
  8022a0:	d9c14015 	stw	r7,1280(sp)
  8022a4:	003f0006 	br	801ea8 <___vfprintf_internal_r+0x1134>
  8022a8:	dc400d17 	ldw	r17,52(sp)
  8022ac:	07002074 	movhi	fp,129
  8022b0:	e737e384 	addi	fp,fp,-8306
  8022b4:	9425883a 	add	r18,r18,r16
  8022b8:	8c400044 	addi	r17,r17,1
  8022bc:	008001c4 	movi	r2,7
  8022c0:	1f000015 	stw	fp,0(r3)
  8022c4:	1c000115 	stw	r16,4(r3)
  8022c8:	dc800e15 	stw	r18,56(sp)
  8022cc:	dc400d15 	stw	r17,52(sp)
  8022d0:	147d7616 	blt	r2,r17,8018ac <___vfprintf_internal_r+0xb38>
  8022d4:	18c00204 	addi	r3,r3,8
  8022d8:	003d7b06 	br	8018c8 <___vfprintf_internal_r+0xb54>
  8022dc:	dc800e17 	ldw	r18,56(sp)
  8022e0:	dc400d17 	ldw	r17,52(sp)
  8022e4:	07002074 	movhi	fp,129
  8022e8:	e737e784 	addi	fp,fp,-8290
  8022ec:	003bc006 	br	8011f0 <___vfprintf_internal_r+0x47c>
  8022f0:	d9014f17 	ldw	r4,1340(sp)
  8022f4:	b00b883a 	mov	r5,r22
  8022f8:	d9800c04 	addi	r6,sp,48
  8022fc:	0800d1c0 	call	800d1c <__sprint_r>
  802300:	103c541e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  802304:	dc800e17 	ldw	r18,56(sp)
  802308:	d8c01904 	addi	r3,sp,100
  80230c:	003ce906 	br	8016b4 <___vfprintf_internal_r+0x940>
  802310:	3c000017 	ldw	r16,0(r7)
  802314:	0009883a 	mov	r4,zero
  802318:	39c00104 	addi	r7,r7,4
  80231c:	0023883a 	mov	r17,zero
  802320:	d9c14015 	stw	r7,1280(sp)
  802324:	d8000405 	stb	zero,16(sp)
  802328:	003d2006 	br	8017ac <___vfprintf_internal_r+0xa38>
  80232c:	38800017 	ldw	r2,0(r7)
  802330:	39c00104 	addi	r7,r7,4
  802334:	d9c14015 	stw	r7,1280(sp)
  802338:	1023d7fa 	srai	r17,r2,31
  80233c:	1021883a 	mov	r16,r2
  802340:	003d1806 	br	8017a4 <___vfprintf_internal_r+0xa30>
  802344:	3c000017 	ldw	r16,0(r7)
  802348:	01000044 	movi	r4,1
  80234c:	39c00104 	addi	r7,r7,4
  802350:	0023883a 	mov	r17,zero
  802354:	d9c14015 	stw	r7,1280(sp)
  802358:	d8000405 	stb	zero,16(sp)
  80235c:	003d1306 	br	8017ac <___vfprintf_internal_r+0xa38>
  802360:	00802074 	movhi	r2,129
  802364:	10b7e304 	addi	r2,r2,-8308
  802368:	94800044 	addi	r18,r18,1
  80236c:	8c400044 	addi	r17,r17,1
  802370:	a8800015 	stw	r2,0(r21)
  802374:	00c00044 	movi	r3,1
  802378:	008001c4 	movi	r2,7
  80237c:	a8c00115 	stw	r3,4(r21)
  802380:	dc800e15 	stw	r18,56(sp)
  802384:	dc400d15 	stw	r17,52(sp)
  802388:	1440ca16 	blt	r2,r17,8026b4 <___vfprintf_internal_r+0x1940>
  80238c:	a8c00204 	addi	r3,r21,8
  802390:	2000061e 	bne	r4,zero,8023ac <___vfprintf_internal_r+0x1638>
  802394:	d9414717 	ldw	r5,1308(sp)
  802398:	2800041e 	bne	r5,zero,8023ac <___vfprintf_internal_r+0x1638>
  80239c:	d9814c17 	ldw	r6,1328(sp)
  8023a0:	3080004c 	andi	r2,r6,1
  8023a4:	1005003a 	cmpeq	r2,r2,zero
  8023a8:	103bf01e 	bne	r2,zero,80136c <___vfprintf_internal_r+0x5f8>
  8023ac:	00800044 	movi	r2,1
  8023b0:	dc400d17 	ldw	r17,52(sp)
  8023b4:	18800115 	stw	r2,4(r3)
  8023b8:	d8814917 	ldw	r2,1316(sp)
  8023bc:	94800044 	addi	r18,r18,1
  8023c0:	8c400044 	addi	r17,r17,1
  8023c4:	18800015 	stw	r2,0(r3)
  8023c8:	008001c4 	movi	r2,7
  8023cc:	dc800e15 	stw	r18,56(sp)
  8023d0:	dc400d15 	stw	r17,52(sp)
  8023d4:	1440ca16 	blt	r2,r17,802700 <___vfprintf_internal_r+0x198c>
  8023d8:	18c00204 	addi	r3,r3,8
  8023dc:	0121c83a 	sub	r16,zero,r4
  8023e0:	0400500e 	bge	zero,r16,802524 <___vfprintf_internal_r+0x17b0>
  8023e4:	00800404 	movi	r2,16
  8023e8:	1400800e 	bge	r2,r16,8025ec <___vfprintf_internal_r+0x1878>
  8023ec:	1027883a 	mov	r19,r2
  8023f0:	07002074 	movhi	fp,129
  8023f4:	e737e384 	addi	fp,fp,-8306
  8023f8:	050001c4 	movi	r20,7
  8023fc:	00000306 	br	80240c <___vfprintf_internal_r+0x1698>
  802400:	18c00204 	addi	r3,r3,8
  802404:	843ffc04 	addi	r16,r16,-16
  802408:	9c007a0e 	bge	r19,r16,8025f4 <___vfprintf_internal_r+0x1880>
  80240c:	94800404 	addi	r18,r18,16
  802410:	8c400044 	addi	r17,r17,1
  802414:	1f000015 	stw	fp,0(r3)
  802418:	1cc00115 	stw	r19,4(r3)
  80241c:	dc800e15 	stw	r18,56(sp)
  802420:	dc400d15 	stw	r17,52(sp)
  802424:	a47ff60e 	bge	r20,r17,802400 <___vfprintf_internal_r+0x168c>
  802428:	d9014f17 	ldw	r4,1340(sp)
  80242c:	b00b883a 	mov	r5,r22
  802430:	d9800c04 	addi	r6,sp,48
  802434:	0800d1c0 	call	800d1c <__sprint_r>
  802438:	103c061e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  80243c:	dc800e17 	ldw	r18,56(sp)
  802440:	dc400d17 	ldw	r17,52(sp)
  802444:	d8c01904 	addi	r3,sp,100
  802448:	003fee06 	br	802404 <___vfprintf_internal_r+0x1690>
  80244c:	3c000017 	ldw	r16,0(r7)
  802450:	0023883a 	mov	r17,zero
  802454:	39c00104 	addi	r7,r7,4
  802458:	d9c14015 	stw	r7,1280(sp)
  80245c:	003e9206 	br	801ea8 <___vfprintf_internal_r+0x1134>
  802460:	d9401904 	addi	r5,sp,100
  802464:	dd000f04 	addi	r20,sp,60
  802468:	d9414115 	stw	r5,1284(sp)
  80246c:	d9814417 	ldw	r6,1296(sp)
  802470:	880a973a 	slli	r5,r17,28
  802474:	8004d13a 	srli	r2,r16,4
  802478:	810003cc 	andi	r4,r16,15
  80247c:	3109883a 	add	r4,r6,r4
  802480:	2884b03a 	or	r2,r5,r2
  802484:	21400003 	ldbu	r5,0(r4)
  802488:	d9014117 	ldw	r4,1284(sp)
  80248c:	8806d13a 	srli	r3,r17,4
  802490:	1021883a 	mov	r16,r2
  802494:	213fffc4 	addi	r4,r4,-1
  802498:	d9014115 	stw	r4,1284(sp)
  80249c:	d9814117 	ldw	r6,1284(sp)
  8024a0:	10c8b03a 	or	r4,r2,r3
  8024a4:	1823883a 	mov	r17,r3
  8024a8:	31400005 	stb	r5,0(r6)
  8024ac:	203fef1e 	bne	r4,zero,80246c <___vfprintf_internal_r+0x16f8>
  8024b0:	003ccb06 	br	8017e0 <___vfprintf_internal_r+0xa6c>
  8024b4:	00800c04 	movi	r2,48
  8024b8:	d98018c4 	addi	r6,sp,99
  8024bc:	dd000f04 	addi	r20,sp,60
  8024c0:	d88018c5 	stb	r2,99(sp)
  8024c4:	d9814115 	stw	r6,1284(sp)
  8024c8:	003cc506 	br	8017e0 <___vfprintf_internal_r+0xa6c>
  8024cc:	dc400d17 	ldw	r17,52(sp)
  8024d0:	07002074 	movhi	fp,129
  8024d4:	e737e784 	addi	fp,fp,-8290
  8024d8:	003bc706 	br	8013f8 <___vfprintf_internal_r+0x684>
  8024dc:	d9414c17 	ldw	r5,1328(sp)
  8024e0:	2880040c 	andi	r2,r5,16
  8024e4:	10007c26 	beq	r2,zero,8026d8 <___vfprintf_internal_r+0x1964>
  8024e8:	38800017 	ldw	r2,0(r7)
  8024ec:	39c00104 	addi	r7,r7,4
  8024f0:	d9c14015 	stw	r7,1280(sp)
  8024f4:	d9814b17 	ldw	r6,1324(sp)
  8024f8:	d9c14017 	ldw	r7,1280(sp)
  8024fc:	11800015 	stw	r6,0(r2)
  802500:	003a7806 	br	800ee4 <___vfprintf_internal_r+0x170>
  802504:	d9014f17 	ldw	r4,1340(sp)
  802508:	b00b883a 	mov	r5,r22
  80250c:	d9800c04 	addi	r6,sp,48
  802510:	0800d1c0 	call	800d1c <__sprint_r>
  802514:	103bcf1e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  802518:	dc800e17 	ldw	r18,56(sp)
  80251c:	dc400d17 	ldw	r17,52(sp)
  802520:	d8c01904 	addi	r3,sp,100
  802524:	d9014717 	ldw	r4,1308(sp)
  802528:	d9414117 	ldw	r5,1284(sp)
  80252c:	8c400044 	addi	r17,r17,1
  802530:	9125883a 	add	r18,r18,r4
  802534:	008001c4 	movi	r2,7
  802538:	19400015 	stw	r5,0(r3)
  80253c:	19000115 	stw	r4,4(r3)
  802540:	dc800e15 	stw	r18,56(sp)
  802544:	dc400d15 	stw	r17,52(sp)
  802548:	147cee16 	blt	r2,r17,801904 <___vfprintf_internal_r+0xb90>
  80254c:	18c00204 	addi	r3,r3,8
  802550:	003b8606 	br	80136c <___vfprintf_internal_r+0x5f8>
  802554:	38c00017 	ldw	r3,0(r7)
  802558:	39000204 	addi	r4,r7,8
  80255c:	d9014015 	stw	r4,1280(sp)
  802560:	d8c14215 	stw	r3,1288(sp)
  802564:	39c00117 	ldw	r7,4(r7)
  802568:	d9c14315 	stw	r7,1292(sp)
  80256c:	003e2006 	br	801df0 <___vfprintf_internal_r+0x107c>
  802570:	0005883a 	mov	r2,zero
  802574:	1409c83a 	sub	r4,r2,r16
  802578:	1105803a 	cmpltu	r2,r2,r4
  80257c:	044bc83a 	sub	r5,zero,r17
  802580:	2885c83a 	sub	r2,r5,r2
  802584:	2021883a 	mov	r16,r4
  802588:	1023883a 	mov	r17,r2
  80258c:	01000044 	movi	r4,1
  802590:	00800b44 	movi	r2,45
  802594:	d8800405 	stb	r2,16(sp)
  802598:	003c8406 	br	8017ac <___vfprintf_internal_r+0xa38>
  80259c:	d9014f17 	ldw	r4,1340(sp)
  8025a0:	b00b883a 	mov	r5,r22
  8025a4:	d9800c04 	addi	r6,sp,48
  8025a8:	0800d1c0 	call	800d1c <__sprint_r>
  8025ac:	103ba91e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  8025b0:	dc800e17 	ldw	r18,56(sp)
  8025b4:	dc400d17 	ldw	r17,52(sp)
  8025b8:	d9000517 	ldw	r4,20(sp)
  8025bc:	d9401904 	addi	r5,sp,100
  8025c0:	003da706 	br	801c60 <___vfprintf_internal_r+0xeec>
  8025c4:	d9014f17 	ldw	r4,1340(sp)
  8025c8:	b00b883a 	mov	r5,r22
  8025cc:	d9800c04 	addi	r6,sp,48
  8025d0:	0800d1c0 	call	800d1c <__sprint_r>
  8025d4:	103b9f1e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  8025d8:	dc800e17 	ldw	r18,56(sp)
  8025dc:	dc400d17 	ldw	r17,52(sp)
  8025e0:	d9000517 	ldw	r4,20(sp)
  8025e4:	d8c01904 	addi	r3,sp,100
  8025e8:	003d9106 	br	801c30 <___vfprintf_internal_r+0xebc>
  8025ec:	07002074 	movhi	fp,129
  8025f0:	e737e384 	addi	fp,fp,-8306
  8025f4:	9425883a 	add	r18,r18,r16
  8025f8:	8c400044 	addi	r17,r17,1
  8025fc:	008001c4 	movi	r2,7
  802600:	1f000015 	stw	fp,0(r3)
  802604:	1c000115 	stw	r16,4(r3)
  802608:	dc800e15 	stw	r18,56(sp)
  80260c:	dc400d15 	stw	r17,52(sp)
  802610:	147fbc16 	blt	r2,r17,802504 <___vfprintf_internal_r+0x1790>
  802614:	18c00204 	addi	r3,r3,8
  802618:	003fc206 	br	802524 <___vfprintf_internal_r+0x17b0>
  80261c:	d9014f17 	ldw	r4,1340(sp)
  802620:	b00b883a 	mov	r5,r22
  802624:	d9800c04 	addi	r6,sp,48
  802628:	0800d1c0 	call	800d1c <__sprint_r>
  80262c:	103b891e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  802630:	dc800e17 	ldw	r18,56(sp)
  802634:	d9000517 	ldw	r4,20(sp)
  802638:	d8c01904 	addi	r3,sp,100
  80263c:	003d0206 	br	801a48 <___vfprintf_internal_r+0xcd4>
  802640:	07002074 	movhi	fp,129
  802644:	e737e384 	addi	fp,fp,-8306
  802648:	003be406 	br	8015dc <___vfprintf_internal_r+0x868>
  80264c:	00802074 	movhi	r2,129
  802650:	10b7d204 	addi	r2,r2,-8376
  802654:	d8814115 	stw	r2,1284(sp)
  802658:	003df506 	br	801e30 <___vfprintf_internal_r+0x10bc>
  80265c:	d9014217 	ldw	r4,1288(sp)
  802660:	d9414317 	ldw	r5,1292(sp)
  802664:	08077280 	call	807728 <__isnand>
  802668:	10003926 	beq	r2,zero,802750 <___vfprintf_internal_r+0x19dc>
  80266c:	d9414d17 	ldw	r5,1332(sp)
  802670:	008011c4 	movi	r2,71
  802674:	1140ce16 	blt	r2,r5,8029b0 <___vfprintf_internal_r+0x1c3c>
  802678:	01802074 	movhi	r6,129
  80267c:	31b7d304 	addi	r6,r6,-8372
  802680:	d9814115 	stw	r6,1284(sp)
  802684:	003dea06 	br	801e30 <___vfprintf_internal_r+0x10bc>
  802688:	d9014c17 	ldw	r4,1328(sp)
  80268c:	bdc00044 	addi	r23,r23,1
  802690:	b8c00007 	ldb	r3,0(r23)
  802694:	21000814 	ori	r4,r4,32
  802698:	d9014c15 	stw	r4,1328(sp)
  80269c:	003a3406 	br	800f70 <___vfprintf_internal_r+0x1fc>
  8026a0:	dcc14515 	stw	r19,1300(sp)
  8026a4:	98011016 	blt	r19,zero,802ae8 <___vfprintf_internal_r+0x1d74>
  8026a8:	980f883a 	mov	r7,r19
  8026ac:	d8014615 	stw	zero,1304(sp)
  8026b0:	003c5206 	br	8017fc <___vfprintf_internal_r+0xa88>
  8026b4:	d9014f17 	ldw	r4,1340(sp)
  8026b8:	b00b883a 	mov	r5,r22
  8026bc:	d9800c04 	addi	r6,sp,48
  8026c0:	0800d1c0 	call	800d1c <__sprint_r>
  8026c4:	103b631e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  8026c8:	dc800e17 	ldw	r18,56(sp)
  8026cc:	d9000517 	ldw	r4,20(sp)
  8026d0:	d8c01904 	addi	r3,sp,100
  8026d4:	003f2e06 	br	802390 <___vfprintf_internal_r+0x161c>
  8026d8:	d8c14c17 	ldw	r3,1328(sp)
  8026dc:	1880100c 	andi	r2,r3,64
  8026e0:	1000a026 	beq	r2,zero,802964 <___vfprintf_internal_r+0x1bf0>
  8026e4:	38800017 	ldw	r2,0(r7)
  8026e8:	39c00104 	addi	r7,r7,4
  8026ec:	d9c14015 	stw	r7,1280(sp)
  8026f0:	d9014b17 	ldw	r4,1324(sp)
  8026f4:	d9c14017 	ldw	r7,1280(sp)
  8026f8:	1100000d 	sth	r4,0(r2)
  8026fc:	0039f906 	br	800ee4 <___vfprintf_internal_r+0x170>
  802700:	d9014f17 	ldw	r4,1340(sp)
  802704:	b00b883a 	mov	r5,r22
  802708:	d9800c04 	addi	r6,sp,48
  80270c:	0800d1c0 	call	800d1c <__sprint_r>
  802710:	103b501e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  802714:	dc800e17 	ldw	r18,56(sp)
  802718:	dc400d17 	ldw	r17,52(sp)
  80271c:	d9000517 	ldw	r4,20(sp)
  802720:	d8c01904 	addi	r3,sp,100
  802724:	003f2d06 	br	8023dc <___vfprintf_internal_r+0x1668>
  802728:	00800184 	movi	r2,6
  80272c:	14c09a36 	bltu	r2,r19,802998 <___vfprintf_internal_r+0x1c24>
  802730:	dcc14515 	stw	r19,1300(sp)
  802734:	9800010e 	bge	r19,zero,80273c <___vfprintf_internal_r+0x19c8>
  802738:	d8014515 	stw	zero,1300(sp)
  80273c:	00802074 	movhi	r2,129
  802740:	10b7d504 	addi	r2,r2,-8364
  802744:	980f883a 	mov	r7,r19
  802748:	d8814115 	stw	r2,1284(sp)
  80274c:	003a7806 	br	801130 <___vfprintf_internal_r+0x3bc>
  802750:	00bfffc4 	movi	r2,-1
  802754:	9880e226 	beq	r19,r2,802ae0 <___vfprintf_internal_r+0x1d6c>
  802758:	d9414d17 	ldw	r5,1332(sp)
  80275c:	008019c4 	movi	r2,103
  802760:	2880dc26 	beq	r5,r2,802ad4 <___vfprintf_internal_r+0x1d60>
  802764:	008011c4 	movi	r2,71
  802768:	2880da26 	beq	r5,r2,802ad4 <___vfprintf_internal_r+0x1d60>
  80276c:	d9414c17 	ldw	r5,1328(sp)
  802770:	d9014317 	ldw	r4,1292(sp)
  802774:	d9814217 	ldw	r6,1288(sp)
  802778:	29404014 	ori	r5,r5,256
  80277c:	d9414c15 	stw	r5,1328(sp)
  802780:	2000cc16 	blt	r4,zero,802ab4 <___vfprintf_internal_r+0x1d40>
  802784:	3021883a 	mov	r16,r6
  802788:	2023883a 	mov	r17,r4
  80278c:	0039883a 	mov	fp,zero
  802790:	d9414d17 	ldw	r5,1332(sp)
  802794:	00801984 	movi	r2,102
  802798:	2880b726 	beq	r5,r2,802a78 <___vfprintf_internal_r+0x1d04>
  80279c:	00801184 	movi	r2,70
  8027a0:	2880b526 	beq	r5,r2,802a78 <___vfprintf_internal_r+0x1d04>
  8027a4:	00801944 	movi	r2,101
  8027a8:	2880c826 	beq	r5,r2,802acc <___vfprintf_internal_r+0x1d58>
  8027ac:	00801144 	movi	r2,69
  8027b0:	2880c626 	beq	r5,r2,802acc <___vfprintf_internal_r+0x1d58>
  8027b4:	9829883a 	mov	r20,r19
  8027b8:	d9014f17 	ldw	r4,1340(sp)
  8027bc:	d8800504 	addi	r2,sp,20
  8027c0:	880d883a 	mov	r6,r17
  8027c4:	d8800115 	stw	r2,4(sp)
  8027c8:	d8c00604 	addi	r3,sp,24
  8027cc:	d8800704 	addi	r2,sp,28
  8027d0:	800b883a 	mov	r5,r16
  8027d4:	01c00084 	movi	r7,2
  8027d8:	d8c00215 	stw	r3,8(sp)
  8027dc:	d8800315 	stw	r2,12(sp)
  8027e0:	dd000015 	stw	r20,0(sp)
  8027e4:	0802f980 	call	802f98 <_dtoa_r>
  8027e8:	d9814d17 	ldw	r6,1332(sp)
  8027ec:	d8814115 	stw	r2,1284(sp)
  8027f0:	008019c4 	movi	r2,103
  8027f4:	30809526 	beq	r6,r2,802a4c <___vfprintf_internal_r+0x1cd8>
  8027f8:	d8c14d17 	ldw	r3,1332(sp)
  8027fc:	008011c4 	movi	r2,71
  802800:	18809226 	beq	r3,r2,802a4c <___vfprintf_internal_r+0x1cd8>
  802804:	d9414117 	ldw	r5,1284(sp)
  802808:	d9814d17 	ldw	r6,1332(sp)
  80280c:	00801984 	movi	r2,102
  802810:	2d25883a 	add	r18,r5,r20
  802814:	30808626 	beq	r6,r2,802a30 <___vfprintf_internal_r+0x1cbc>
  802818:	00801184 	movi	r2,70
  80281c:	30808426 	beq	r6,r2,802a30 <___vfprintf_internal_r+0x1cbc>
  802820:	000d883a 	mov	r6,zero
  802824:	000f883a 	mov	r7,zero
  802828:	880b883a 	mov	r5,r17
  80282c:	8009883a 	mov	r4,r16
  802830:	08095a80 	call	8095a8 <__eqdf2>
  802834:	1000751e 	bne	r2,zero,802a0c <___vfprintf_internal_r+0x1c98>
  802838:	9005883a 	mov	r2,r18
  80283c:	dc800715 	stw	r18,28(sp)
  802840:	d9014117 	ldw	r4,1284(sp)
  802844:	d9414d17 	ldw	r5,1332(sp)
  802848:	00c019c4 	movi	r3,103
  80284c:	1125c83a 	sub	r18,r2,r4
  802850:	28c06826 	beq	r5,r3,8029f4 <___vfprintf_internal_r+0x1c80>
  802854:	008011c4 	movi	r2,71
  802858:	28806626 	beq	r5,r2,8029f4 <___vfprintf_internal_r+0x1c80>
  80285c:	d9000517 	ldw	r4,20(sp)
  802860:	d8c14d17 	ldw	r3,1332(sp)
  802864:	00801944 	movi	r2,101
  802868:	10c05516 	blt	r2,r3,8029c0 <___vfprintf_internal_r+0x1c4c>
  80286c:	213fffc4 	addi	r4,r4,-1
  802870:	d9000515 	stw	r4,20(sp)
  802874:	d8c00805 	stb	r3,32(sp)
  802878:	2021883a 	mov	r16,r4
  80287c:	2000c116 	blt	r4,zero,802b84 <___vfprintf_internal_r+0x1e10>
  802880:	00800ac4 	movi	r2,43
  802884:	d8800845 	stb	r2,33(sp)
  802888:	00800244 	movi	r2,9
  80288c:	1400af0e 	bge	r2,r16,802b4c <___vfprintf_internal_r+0x1dd8>
  802890:	1027883a 	mov	r19,r2
  802894:	dc400b84 	addi	r17,sp,46
  802898:	8009883a 	mov	r4,r16
  80289c:	01400284 	movi	r5,10
  8028a0:	08008a00 	call	8008a0 <__modsi3>
  8028a4:	10800c04 	addi	r2,r2,48
  8028a8:	8c7fffc4 	addi	r17,r17,-1
  8028ac:	8009883a 	mov	r4,r16
  8028b0:	01400284 	movi	r5,10
  8028b4:	88800005 	stb	r2,0(r17)
  8028b8:	08008400 	call	800840 <__divsi3>
  8028bc:	1021883a 	mov	r16,r2
  8028c0:	98bff516 	blt	r19,r2,802898 <___vfprintf_internal_r+0x1b24>
  8028c4:	10c00c04 	addi	r3,r2,48
  8028c8:	d88009c4 	addi	r2,sp,39
  8028cc:	108001c4 	addi	r2,r2,7
  8028d0:	897fffc4 	addi	r5,r17,-1
  8028d4:	88ffffc5 	stb	r3,-1(r17)
  8028d8:	2880a72e 	bgeu	r5,r2,802b78 <___vfprintf_internal_r+0x1e04>
  8028dc:	1009883a 	mov	r4,r2
  8028e0:	d9800804 	addi	r6,sp,32
  8028e4:	d8c00884 	addi	r3,sp,34
  8028e8:	28800003 	ldbu	r2,0(r5)
  8028ec:	29400044 	addi	r5,r5,1
  8028f0:	18800005 	stb	r2,0(r3)
  8028f4:	18c00044 	addi	r3,r3,1
  8028f8:	293ffb36 	bltu	r5,r4,8028e8 <___vfprintf_internal_r+0x1b74>
  8028fc:	1987c83a 	sub	r3,r3,r6
  802900:	00800044 	movi	r2,1
  802904:	d8c14815 	stw	r3,1312(sp)
  802908:	90cf883a 	add	r7,r18,r3
  80290c:	1480960e 	bge	r2,r18,802b68 <___vfprintf_internal_r+0x1df4>
  802910:	39c00044 	addi	r7,r7,1
  802914:	d9c14515 	stw	r7,1300(sp)
  802918:	38003416 	blt	r7,zero,8029ec <___vfprintf_internal_r+0x1c78>
  80291c:	e0803fcc 	andi	r2,fp,255
  802920:	1080201c 	xori	r2,r2,128
  802924:	10bfe004 	addi	r2,r2,-128
  802928:	10004e26 	beq	r2,zero,802a64 <___vfprintf_internal_r+0x1cf0>
  80292c:	00800b44 	movi	r2,45
  802930:	dc814715 	stw	r18,1308(sp)
  802934:	d8014615 	stw	zero,1304(sp)
  802938:	d8800405 	stb	r2,16(sp)
  80293c:	003bb106 	br	801804 <___vfprintf_internal_r+0xa90>
  802940:	00800b44 	movi	r2,45
  802944:	d8800405 	stb	r2,16(sp)
  802948:	003d3306 	br	801e18 <___vfprintf_internal_r+0x10a4>
  80294c:	d9014f17 	ldw	r4,1340(sp)
  802950:	b00b883a 	mov	r5,r22
  802954:	d9800c04 	addi	r6,sp,48
  802958:	0800d1c0 	call	800d1c <__sprint_r>
  80295c:	103abd1e 	bne	r2,zero,801454 <___vfprintf_internal_r+0x6e0>
  802960:	003abb06 	br	801450 <___vfprintf_internal_r+0x6dc>
  802964:	38800017 	ldw	r2,0(r7)
  802968:	39c00104 	addi	r7,r7,4
  80296c:	d9c14015 	stw	r7,1280(sp)
  802970:	d9414b17 	ldw	r5,1324(sp)
  802974:	d9c14017 	ldw	r7,1280(sp)
  802978:	11400015 	stw	r5,0(r2)
  80297c:	00395906 	br	800ee4 <___vfprintf_internal_r+0x170>
  802980:	980f883a 	mov	r7,r19
  802984:	dcc14515 	stw	r19,1300(sp)
  802988:	d8014615 	stw	zero,1304(sp)
  80298c:	003b9b06 	br	8017fc <___vfprintf_internal_r+0xa88>
  802990:	0027883a 	mov	r19,zero
  802994:	00397806 	br	800f78 <___vfprintf_internal_r+0x204>
  802998:	00c02074 	movhi	r3,129
  80299c:	18f7d504 	addi	r3,r3,-8364
  8029a0:	100f883a 	mov	r7,r2
  8029a4:	d8814515 	stw	r2,1300(sp)
  8029a8:	d8c14115 	stw	r3,1284(sp)
  8029ac:	0039e006 	br	801130 <___vfprintf_internal_r+0x3bc>
  8029b0:	00802074 	movhi	r2,129
  8029b4:	10b7d404 	addi	r2,r2,-8368
  8029b8:	d8814115 	stw	r2,1284(sp)
  8029bc:	003d1c06 	br	801e30 <___vfprintf_internal_r+0x10bc>
  8029c0:	d9414d17 	ldw	r5,1332(sp)
  8029c4:	00801984 	movi	r2,102
  8029c8:	28804926 	beq	r5,r2,802af0 <___vfprintf_internal_r+0x1d7c>
  8029cc:	200f883a 	mov	r7,r4
  8029d0:	24805716 	blt	r4,r18,802b30 <___vfprintf_internal_r+0x1dbc>
  8029d4:	d9414c17 	ldw	r5,1328(sp)
  8029d8:	2880004c 	andi	r2,r5,1
  8029dc:	10000126 	beq	r2,zero,8029e4 <___vfprintf_internal_r+0x1c70>
  8029e0:	21c00044 	addi	r7,r4,1
  8029e4:	d9c14515 	stw	r7,1300(sp)
  8029e8:	383fcc0e 	bge	r7,zero,80291c <___vfprintf_internal_r+0x1ba8>
  8029ec:	d8014515 	stw	zero,1300(sp)
  8029f0:	003fca06 	br	80291c <___vfprintf_internal_r+0x1ba8>
  8029f4:	d9000517 	ldw	r4,20(sp)
  8029f8:	00bfff04 	movi	r2,-4
  8029fc:	1100480e 	bge	r2,r4,802b20 <___vfprintf_internal_r+0x1dac>
  802a00:	99004716 	blt	r19,r4,802b20 <___vfprintf_internal_r+0x1dac>
  802a04:	d8c14d15 	stw	r3,1332(sp)
  802a08:	003ff006 	br	8029cc <___vfprintf_internal_r+0x1c58>
  802a0c:	d8800717 	ldw	r2,28(sp)
  802a10:	14bf8b2e 	bgeu	r2,r18,802840 <___vfprintf_internal_r+0x1acc>
  802a14:	9007883a 	mov	r3,r18
  802a18:	01000c04 	movi	r4,48
  802a1c:	11000005 	stb	r4,0(r2)
  802a20:	10800044 	addi	r2,r2,1
  802a24:	d8800715 	stw	r2,28(sp)
  802a28:	18bffc1e 	bne	r3,r2,802a1c <___vfprintf_internal_r+0x1ca8>
  802a2c:	003f8406 	br	802840 <___vfprintf_internal_r+0x1acc>
  802a30:	d8814117 	ldw	r2,1284(sp)
  802a34:	10c00007 	ldb	r3,0(r2)
  802a38:	00800c04 	movi	r2,48
  802a3c:	18805b26 	beq	r3,r2,802bac <___vfprintf_internal_r+0x1e38>
  802a40:	d9000517 	ldw	r4,20(sp)
  802a44:	9125883a 	add	r18,r18,r4
  802a48:	003f7506 	br	802820 <___vfprintf_internal_r+0x1aac>
  802a4c:	d9014c17 	ldw	r4,1328(sp)
  802a50:	2080004c 	andi	r2,r4,1
  802a54:	1005003a 	cmpeq	r2,r2,zero
  802a58:	103f6a26 	beq	r2,zero,802804 <___vfprintf_internal_r+0x1a90>
  802a5c:	d8800717 	ldw	r2,28(sp)
  802a60:	003f7706 	br	802840 <___vfprintf_internal_r+0x1acc>
  802a64:	d9c14515 	stw	r7,1300(sp)
  802a68:	38004d16 	blt	r7,zero,802ba0 <___vfprintf_internal_r+0x1e2c>
  802a6c:	dc814715 	stw	r18,1308(sp)
  802a70:	d8014615 	stw	zero,1304(sp)
  802a74:	003b6106 	br	8017fc <___vfprintf_internal_r+0xa88>
  802a78:	d9014f17 	ldw	r4,1340(sp)
  802a7c:	d8800504 	addi	r2,sp,20
  802a80:	d8800115 	stw	r2,4(sp)
  802a84:	d8c00604 	addi	r3,sp,24
  802a88:	d8800704 	addi	r2,sp,28
  802a8c:	800b883a 	mov	r5,r16
  802a90:	880d883a 	mov	r6,r17
  802a94:	01c000c4 	movi	r7,3
  802a98:	d8c00215 	stw	r3,8(sp)
  802a9c:	d8800315 	stw	r2,12(sp)
  802aa0:	dcc00015 	stw	r19,0(sp)
  802aa4:	9829883a 	mov	r20,r19
  802aa8:	0802f980 	call	802f98 <_dtoa_r>
  802aac:	d8814115 	stw	r2,1284(sp)
  802ab0:	003f5106 	br	8027f8 <___vfprintf_internal_r+0x1a84>
  802ab4:	d8c14217 	ldw	r3,1288(sp)
  802ab8:	d9014317 	ldw	r4,1292(sp)
  802abc:	07000b44 	movi	fp,45
  802ac0:	1821883a 	mov	r16,r3
  802ac4:	2460003c 	xorhi	r17,r4,32768
  802ac8:	003f3106 	br	802790 <___vfprintf_internal_r+0x1a1c>
  802acc:	9d000044 	addi	r20,r19,1
  802ad0:	003f3906 	br	8027b8 <___vfprintf_internal_r+0x1a44>
  802ad4:	983f251e 	bne	r19,zero,80276c <___vfprintf_internal_r+0x19f8>
  802ad8:	04c00044 	movi	r19,1
  802adc:	003f2306 	br	80276c <___vfprintf_internal_r+0x19f8>
  802ae0:	04c00184 	movi	r19,6
  802ae4:	003f2106 	br	80276c <___vfprintf_internal_r+0x19f8>
  802ae8:	d8014515 	stw	zero,1300(sp)
  802aec:	003eee06 	br	8026a8 <___vfprintf_internal_r+0x1934>
  802af0:	200f883a 	mov	r7,r4
  802af4:	0100370e 	bge	zero,r4,802bd4 <___vfprintf_internal_r+0x1e60>
  802af8:	9800031e 	bne	r19,zero,802b08 <___vfprintf_internal_r+0x1d94>
  802afc:	d9814c17 	ldw	r6,1328(sp)
  802b00:	3080004c 	andi	r2,r6,1
  802b04:	103fb726 	beq	r2,zero,8029e4 <___vfprintf_internal_r+0x1c70>
  802b08:	20800044 	addi	r2,r4,1
  802b0c:	98a7883a 	add	r19,r19,r2
  802b10:	dcc14515 	stw	r19,1300(sp)
  802b14:	980f883a 	mov	r7,r19
  802b18:	983f800e 	bge	r19,zero,80291c <___vfprintf_internal_r+0x1ba8>
  802b1c:	003fb306 	br	8029ec <___vfprintf_internal_r+0x1c78>
  802b20:	d9814d17 	ldw	r6,1332(sp)
  802b24:	31bfff84 	addi	r6,r6,-2
  802b28:	d9814d15 	stw	r6,1332(sp)
  802b2c:	003f4c06 	br	802860 <___vfprintf_internal_r+0x1aec>
  802b30:	0100180e 	bge	zero,r4,802b94 <___vfprintf_internal_r+0x1e20>
  802b34:	00800044 	movi	r2,1
  802b38:	1485883a 	add	r2,r2,r18
  802b3c:	d8814515 	stw	r2,1300(sp)
  802b40:	100f883a 	mov	r7,r2
  802b44:	103f750e 	bge	r2,zero,80291c <___vfprintf_internal_r+0x1ba8>
  802b48:	003fa806 	br	8029ec <___vfprintf_internal_r+0x1c78>
  802b4c:	80c00c04 	addi	r3,r16,48
  802b50:	00800c04 	movi	r2,48
  802b54:	d8c008c5 	stb	r3,35(sp)
  802b58:	d9800804 	addi	r6,sp,32
  802b5c:	d8c00904 	addi	r3,sp,36
  802b60:	d8800885 	stb	r2,34(sp)
  802b64:	003f6506 	br	8028fc <___vfprintf_internal_r+0x1b88>
  802b68:	d9014c17 	ldw	r4,1328(sp)
  802b6c:	2084703a 	and	r2,r4,r2
  802b70:	103f9c26 	beq	r2,zero,8029e4 <___vfprintf_internal_r+0x1c70>
  802b74:	003f6606 	br	802910 <___vfprintf_internal_r+0x1b9c>
  802b78:	d9800804 	addi	r6,sp,32
  802b7c:	d8c00884 	addi	r3,sp,34
  802b80:	003f5e06 	br	8028fc <___vfprintf_internal_r+0x1b88>
  802b84:	00800b44 	movi	r2,45
  802b88:	0121c83a 	sub	r16,zero,r4
  802b8c:	d8800845 	stb	r2,33(sp)
  802b90:	003f3d06 	br	802888 <___vfprintf_internal_r+0x1b14>
  802b94:	00800084 	movi	r2,2
  802b98:	1105c83a 	sub	r2,r2,r4
  802b9c:	003fe606 	br	802b38 <___vfprintf_internal_r+0x1dc4>
  802ba0:	d8014515 	stw	zero,1300(sp)
  802ba4:	dc814715 	stw	r18,1308(sp)
  802ba8:	003fb106 	br	802a70 <___vfprintf_internal_r+0x1cfc>
  802bac:	000d883a 	mov	r6,zero
  802bb0:	000f883a 	mov	r7,zero
  802bb4:	8009883a 	mov	r4,r16
  802bb8:	880b883a 	mov	r5,r17
  802bbc:	08096300 	call	809630 <__nedf2>
  802bc0:	103f9f26 	beq	r2,zero,802a40 <___vfprintf_internal_r+0x1ccc>
  802bc4:	00800044 	movi	r2,1
  802bc8:	1509c83a 	sub	r4,r2,r20
  802bcc:	d9000515 	stw	r4,20(sp)
  802bd0:	003f9b06 	br	802a40 <___vfprintf_internal_r+0x1ccc>
  802bd4:	98000d1e 	bne	r19,zero,802c0c <___vfprintf_internal_r+0x1e98>
  802bd8:	d8c14c17 	ldw	r3,1328(sp)
  802bdc:	1880004c 	andi	r2,r3,1
  802be0:	10000a1e 	bne	r2,zero,802c0c <___vfprintf_internal_r+0x1e98>
  802be4:	01000044 	movi	r4,1
  802be8:	200f883a 	mov	r7,r4
  802bec:	d9014515 	stw	r4,1300(sp)
  802bf0:	003f4a06 	br	80291c <___vfprintf_internal_r+0x1ba8>
  802bf4:	3cc00017 	ldw	r19,0(r7)
  802bf8:	39c00104 	addi	r7,r7,4
  802bfc:	983d0e0e 	bge	r19,zero,802038 <___vfprintf_internal_r+0x12c4>
  802c00:	b8c00007 	ldb	r3,0(r23)
  802c04:	04ffffc4 	movi	r19,-1
  802c08:	0038d906 	br	800f70 <___vfprintf_internal_r+0x1fc>
  802c0c:	9cc00084 	addi	r19,r19,2
  802c10:	dcc14515 	stw	r19,1300(sp)
  802c14:	980f883a 	mov	r7,r19
  802c18:	983f400e 	bge	r19,zero,80291c <___vfprintf_internal_r+0x1ba8>
  802c1c:	003f7306 	br	8029ec <___vfprintf_internal_r+0x1c78>

00802c20 <__vfprintf_internal>:
  802c20:	00802074 	movhi	r2,129
  802c24:	10801404 	addi	r2,r2,80
  802c28:	2013883a 	mov	r9,r4
  802c2c:	11000017 	ldw	r4,0(r2)
  802c30:	2805883a 	mov	r2,r5
  802c34:	300f883a 	mov	r7,r6
  802c38:	480b883a 	mov	r5,r9
  802c3c:	100d883a 	mov	r6,r2
  802c40:	0800d741 	jmpi	800d74 <___vfprintf_internal_r>

00802c44 <__swsetup_r>:
  802c44:	00802074 	movhi	r2,129
  802c48:	10801404 	addi	r2,r2,80
  802c4c:	10c00017 	ldw	r3,0(r2)
  802c50:	defffd04 	addi	sp,sp,-12
  802c54:	dc400115 	stw	r17,4(sp)
  802c58:	dc000015 	stw	r16,0(sp)
  802c5c:	dfc00215 	stw	ra,8(sp)
  802c60:	2023883a 	mov	r17,r4
  802c64:	2821883a 	mov	r16,r5
  802c68:	18000226 	beq	r3,zero,802c74 <__swsetup_r+0x30>
  802c6c:	18800e17 	ldw	r2,56(r3)
  802c70:	10001f26 	beq	r2,zero,802cf0 <__swsetup_r+0xac>
  802c74:	8100030b 	ldhu	r4,12(r16)
  802c78:	2080020c 	andi	r2,r4,8
  802c7c:	10002826 	beq	r2,zero,802d20 <__swsetup_r+0xdc>
  802c80:	81400417 	ldw	r5,16(r16)
  802c84:	28001d26 	beq	r5,zero,802cfc <__swsetup_r+0xb8>
  802c88:	2080004c 	andi	r2,r4,1
  802c8c:	1005003a 	cmpeq	r2,r2,zero
  802c90:	10000b26 	beq	r2,zero,802cc0 <__swsetup_r+0x7c>
  802c94:	2080008c 	andi	r2,r4,2
  802c98:	10001226 	beq	r2,zero,802ce4 <__swsetup_r+0xa0>
  802c9c:	0005883a 	mov	r2,zero
  802ca0:	80800215 	stw	r2,8(r16)
  802ca4:	28000b26 	beq	r5,zero,802cd4 <__swsetup_r+0x90>
  802ca8:	0005883a 	mov	r2,zero
  802cac:	dfc00217 	ldw	ra,8(sp)
  802cb0:	dc400117 	ldw	r17,4(sp)
  802cb4:	dc000017 	ldw	r16,0(sp)
  802cb8:	dec00304 	addi	sp,sp,12
  802cbc:	f800283a 	ret
  802cc0:	80800517 	ldw	r2,20(r16)
  802cc4:	80000215 	stw	zero,8(r16)
  802cc8:	0085c83a 	sub	r2,zero,r2
  802ccc:	80800615 	stw	r2,24(r16)
  802cd0:	283ff51e 	bne	r5,zero,802ca8 <__swsetup_r+0x64>
  802cd4:	2080200c 	andi	r2,r4,128
  802cd8:	103ff326 	beq	r2,zero,802ca8 <__swsetup_r+0x64>
  802cdc:	00bfffc4 	movi	r2,-1
  802ce0:	003ff206 	br	802cac <__swsetup_r+0x68>
  802ce4:	80800517 	ldw	r2,20(r16)
  802ce8:	80800215 	stw	r2,8(r16)
  802cec:	003fed06 	br	802ca4 <__swsetup_r+0x60>
  802cf0:	1809883a 	mov	r4,r3
  802cf4:	08047e40 	call	8047e4 <__sinit>
  802cf8:	003fde06 	br	802c74 <__swsetup_r+0x30>
  802cfc:	20c0a00c 	andi	r3,r4,640
  802d00:	00808004 	movi	r2,512
  802d04:	18bfe026 	beq	r3,r2,802c88 <__swsetup_r+0x44>
  802d08:	8809883a 	mov	r4,r17
  802d0c:	800b883a 	mov	r5,r16
  802d10:	08055d00 	call	8055d0 <__smakebuf_r>
  802d14:	8100030b 	ldhu	r4,12(r16)
  802d18:	81400417 	ldw	r5,16(r16)
  802d1c:	003fda06 	br	802c88 <__swsetup_r+0x44>
  802d20:	2080040c 	andi	r2,r4,16
  802d24:	103fed26 	beq	r2,zero,802cdc <__swsetup_r+0x98>
  802d28:	2080010c 	andi	r2,r4,4
  802d2c:	10001226 	beq	r2,zero,802d78 <__swsetup_r+0x134>
  802d30:	81400c17 	ldw	r5,48(r16)
  802d34:	28000526 	beq	r5,zero,802d4c <__swsetup_r+0x108>
  802d38:	80801004 	addi	r2,r16,64
  802d3c:	28800226 	beq	r5,r2,802d48 <__swsetup_r+0x104>
  802d40:	8809883a 	mov	r4,r17
  802d44:	0804b680 	call	804b68 <_free_r>
  802d48:	80000c15 	stw	zero,48(r16)
  802d4c:	8080030b 	ldhu	r2,12(r16)
  802d50:	81400417 	ldw	r5,16(r16)
  802d54:	80000115 	stw	zero,4(r16)
  802d58:	10bff6cc 	andi	r2,r2,65499
  802d5c:	8080030d 	sth	r2,12(r16)
  802d60:	81400015 	stw	r5,0(r16)
  802d64:	8080030b 	ldhu	r2,12(r16)
  802d68:	10800214 	ori	r2,r2,8
  802d6c:	113fffcc 	andi	r4,r2,65535
  802d70:	8080030d 	sth	r2,12(r16)
  802d74:	003fc306 	br	802c84 <__swsetup_r+0x40>
  802d78:	81400417 	ldw	r5,16(r16)
  802d7c:	003ff906 	br	802d64 <__swsetup_r+0x120>

00802d80 <quorem>:
  802d80:	28c00417 	ldw	r3,16(r5)
  802d84:	20800417 	ldw	r2,16(r4)
  802d88:	defff604 	addi	sp,sp,-40
  802d8c:	ddc00715 	stw	r23,28(sp)
  802d90:	dd400515 	stw	r21,20(sp)
  802d94:	dfc00915 	stw	ra,36(sp)
  802d98:	df000815 	stw	fp,32(sp)
  802d9c:	dd800615 	stw	r22,24(sp)
  802da0:	dd000415 	stw	r20,16(sp)
  802da4:	dcc00315 	stw	r19,12(sp)
  802da8:	dc800215 	stw	r18,8(sp)
  802dac:	dc400115 	stw	r17,4(sp)
  802db0:	dc000015 	stw	r16,0(sp)
  802db4:	202f883a 	mov	r23,r4
  802db8:	282b883a 	mov	r21,r5
  802dbc:	10c07416 	blt	r2,r3,802f90 <quorem+0x210>
  802dc0:	1c7fffc4 	addi	r17,r3,-1
  802dc4:	8c45883a 	add	r2,r17,r17
  802dc8:	1085883a 	add	r2,r2,r2
  802dcc:	2c000504 	addi	r16,r5,20
  802dd0:	24c00504 	addi	r19,r4,20
  802dd4:	14ed883a 	add	r22,r2,r19
  802dd8:	80a5883a 	add	r18,r16,r2
  802ddc:	b7000017 	ldw	fp,0(r22)
  802de0:	91400017 	ldw	r5,0(r18)
  802de4:	e009883a 	mov	r4,fp
  802de8:	29400044 	addi	r5,r5,1
  802dec:	08009000 	call	800900 <__udivsi3>
  802df0:	1029883a 	mov	r20,r2
  802df4:	10003c1e 	bne	r2,zero,802ee8 <quorem+0x168>
  802df8:	a80b883a 	mov	r5,r21
  802dfc:	b809883a 	mov	r4,r23
  802e00:	080625c0 	call	80625c <__mcmp>
  802e04:	10002b16 	blt	r2,zero,802eb4 <quorem+0x134>
  802e08:	a5000044 	addi	r20,r20,1
  802e0c:	980f883a 	mov	r7,r19
  802e10:	0011883a 	mov	r8,zero
  802e14:	0009883a 	mov	r4,zero
  802e18:	81400017 	ldw	r5,0(r16)
  802e1c:	38c00017 	ldw	r3,0(r7)
  802e20:	84000104 	addi	r16,r16,4
  802e24:	28bfffcc 	andi	r2,r5,65535
  802e28:	2085883a 	add	r2,r4,r2
  802e2c:	11bfffcc 	andi	r6,r2,65535
  802e30:	193fffcc 	andi	r4,r3,65535
  802e34:	1004d43a 	srli	r2,r2,16
  802e38:	280ad43a 	srli	r5,r5,16
  802e3c:	2189c83a 	sub	r4,r4,r6
  802e40:	2209883a 	add	r4,r4,r8
  802e44:	1806d43a 	srli	r3,r3,16
  802e48:	288b883a 	add	r5,r5,r2
  802e4c:	200dd43a 	srai	r6,r4,16
  802e50:	28bfffcc 	andi	r2,r5,65535
  802e54:	1887c83a 	sub	r3,r3,r2
  802e58:	1987883a 	add	r3,r3,r6
  802e5c:	3900000d 	sth	r4,0(r7)
  802e60:	38c0008d 	sth	r3,2(r7)
  802e64:	2808d43a 	srli	r4,r5,16
  802e68:	39c00104 	addi	r7,r7,4
  802e6c:	1811d43a 	srai	r8,r3,16
  802e70:	943fe92e 	bgeu	r18,r16,802e18 <quorem+0x98>
  802e74:	8c45883a 	add	r2,r17,r17
  802e78:	1085883a 	add	r2,r2,r2
  802e7c:	9885883a 	add	r2,r19,r2
  802e80:	10c00017 	ldw	r3,0(r2)
  802e84:	18000b1e 	bne	r3,zero,802eb4 <quorem+0x134>
  802e88:	113fff04 	addi	r4,r2,-4
  802e8c:	9900082e 	bgeu	r19,r4,802eb0 <quorem+0x130>
  802e90:	10bfff17 	ldw	r2,-4(r2)
  802e94:	10000326 	beq	r2,zero,802ea4 <quorem+0x124>
  802e98:	00000506 	br	802eb0 <quorem+0x130>
  802e9c:	20800017 	ldw	r2,0(r4)
  802ea0:	1000031e 	bne	r2,zero,802eb0 <quorem+0x130>
  802ea4:	213fff04 	addi	r4,r4,-4
  802ea8:	8c7fffc4 	addi	r17,r17,-1
  802eac:	993ffb36 	bltu	r19,r4,802e9c <quorem+0x11c>
  802eb0:	bc400415 	stw	r17,16(r23)
  802eb4:	a005883a 	mov	r2,r20
  802eb8:	dfc00917 	ldw	ra,36(sp)
  802ebc:	df000817 	ldw	fp,32(sp)
  802ec0:	ddc00717 	ldw	r23,28(sp)
  802ec4:	dd800617 	ldw	r22,24(sp)
  802ec8:	dd400517 	ldw	r21,20(sp)
  802ecc:	dd000417 	ldw	r20,16(sp)
  802ed0:	dcc00317 	ldw	r19,12(sp)
  802ed4:	dc800217 	ldw	r18,8(sp)
  802ed8:	dc400117 	ldw	r17,4(sp)
  802edc:	dc000017 	ldw	r16,0(sp)
  802ee0:	dec00a04 	addi	sp,sp,40
  802ee4:	f800283a 	ret
  802ee8:	980f883a 	mov	r7,r19
  802eec:	8011883a 	mov	r8,r16
  802ef0:	0013883a 	mov	r9,zero
  802ef4:	000d883a 	mov	r6,zero
  802ef8:	40c00017 	ldw	r3,0(r8)
  802efc:	39000017 	ldw	r4,0(r7)
  802f00:	42000104 	addi	r8,r8,4
  802f04:	18bfffcc 	andi	r2,r3,65535
  802f08:	a085383a 	mul	r2,r20,r2
  802f0c:	1806d43a 	srli	r3,r3,16
  802f10:	217fffcc 	andi	r5,r4,65535
  802f14:	3085883a 	add	r2,r6,r2
  802f18:	11bfffcc 	andi	r6,r2,65535
  802f1c:	a0c7383a 	mul	r3,r20,r3
  802f20:	1004d43a 	srli	r2,r2,16
  802f24:	298bc83a 	sub	r5,r5,r6
  802f28:	2a4b883a 	add	r5,r5,r9
  802f2c:	2008d43a 	srli	r4,r4,16
  802f30:	1887883a 	add	r3,r3,r2
  802f34:	280dd43a 	srai	r6,r5,16
  802f38:	18bfffcc 	andi	r2,r3,65535
  802f3c:	2089c83a 	sub	r4,r4,r2
  802f40:	2189883a 	add	r4,r4,r6
  802f44:	3900008d 	sth	r4,2(r7)
  802f48:	3940000d 	sth	r5,0(r7)
  802f4c:	180cd43a 	srli	r6,r3,16
  802f50:	39c00104 	addi	r7,r7,4
  802f54:	2013d43a 	srai	r9,r4,16
  802f58:	923fe72e 	bgeu	r18,r8,802ef8 <quorem+0x178>
  802f5c:	e03fa61e 	bne	fp,zero,802df8 <quorem+0x78>
  802f60:	b0ffff04 	addi	r3,r22,-4
  802f64:	98c0082e 	bgeu	r19,r3,802f88 <quorem+0x208>
  802f68:	b0bfff17 	ldw	r2,-4(r22)
  802f6c:	10000326 	beq	r2,zero,802f7c <quorem+0x1fc>
  802f70:	00000506 	br	802f88 <quorem+0x208>
  802f74:	18800017 	ldw	r2,0(r3)
  802f78:	1000031e 	bne	r2,zero,802f88 <quorem+0x208>
  802f7c:	18ffff04 	addi	r3,r3,-4
  802f80:	8c7fffc4 	addi	r17,r17,-1
  802f84:	98fffb36 	bltu	r19,r3,802f74 <quorem+0x1f4>
  802f88:	bc400415 	stw	r17,16(r23)
  802f8c:	003f9a06 	br	802df8 <quorem+0x78>
  802f90:	0005883a 	mov	r2,zero
  802f94:	003fc806 	br	802eb8 <quorem+0x138>

00802f98 <_dtoa_r>:
  802f98:	22001017 	ldw	r8,64(r4)
  802f9c:	deffda04 	addi	sp,sp,-152
  802fa0:	dd402115 	stw	r21,132(sp)
  802fa4:	dd002015 	stw	r20,128(sp)
  802fa8:	dc801e15 	stw	r18,120(sp)
  802fac:	dc401d15 	stw	r17,116(sp)
  802fb0:	dfc02515 	stw	ra,148(sp)
  802fb4:	df002415 	stw	fp,144(sp)
  802fb8:	ddc02315 	stw	r23,140(sp)
  802fbc:	dd802215 	stw	r22,136(sp)
  802fc0:	dcc01f15 	stw	r19,124(sp)
  802fc4:	dc001c15 	stw	r16,112(sp)
  802fc8:	d9001615 	stw	r4,88(sp)
  802fcc:	3023883a 	mov	r17,r6
  802fd0:	2829883a 	mov	r20,r5
  802fd4:	d9c01715 	stw	r7,92(sp)
  802fd8:	dc802817 	ldw	r18,160(sp)
  802fdc:	302b883a 	mov	r21,r6
  802fe0:	40000a26 	beq	r8,zero,80300c <_dtoa_r+0x74>
  802fe4:	20801117 	ldw	r2,68(r4)
  802fe8:	400b883a 	mov	r5,r8
  802fec:	40800115 	stw	r2,4(r8)
  802ff0:	20c01117 	ldw	r3,68(r4)
  802ff4:	00800044 	movi	r2,1
  802ff8:	10c4983a 	sll	r2,r2,r3
  802ffc:	40800215 	stw	r2,8(r8)
  803000:	08061000 	call	806100 <_Bfree>
  803004:	d8c01617 	ldw	r3,88(sp)
  803008:	18001015 	stw	zero,64(r3)
  80300c:	8800a316 	blt	r17,zero,80329c <_dtoa_r+0x304>
  803010:	90000015 	stw	zero,0(r18)
  803014:	a8dffc2c 	andhi	r3,r21,32752
  803018:	009ffc34 	movhi	r2,32752
  80301c:	18809126 	beq	r3,r2,803264 <_dtoa_r+0x2cc>
  803020:	000d883a 	mov	r6,zero
  803024:	000f883a 	mov	r7,zero
  803028:	a009883a 	mov	r4,r20
  80302c:	a80b883a 	mov	r5,r21
  803030:	dd001215 	stw	r20,72(sp)
  803034:	dd401315 	stw	r21,76(sp)
  803038:	08096300 	call	809630 <__nedf2>
  80303c:	1000171e 	bne	r2,zero,80309c <_dtoa_r+0x104>
  803040:	d9802717 	ldw	r6,156(sp)
  803044:	00800044 	movi	r2,1
  803048:	30800015 	stw	r2,0(r6)
  80304c:	d8802917 	ldw	r2,164(sp)
  803050:	10029b26 	beq	r2,zero,803ac0 <_dtoa_r+0xb28>
  803054:	d9002917 	ldw	r4,164(sp)
  803058:	00802074 	movhi	r2,129
  80305c:	10b7e344 	addi	r2,r2,-8307
  803060:	10ffffc4 	addi	r3,r2,-1
  803064:	20800015 	stw	r2,0(r4)
  803068:	1805883a 	mov	r2,r3
  80306c:	dfc02517 	ldw	ra,148(sp)
  803070:	df002417 	ldw	fp,144(sp)
  803074:	ddc02317 	ldw	r23,140(sp)
  803078:	dd802217 	ldw	r22,136(sp)
  80307c:	dd402117 	ldw	r21,132(sp)
  803080:	dd002017 	ldw	r20,128(sp)
  803084:	dcc01f17 	ldw	r19,124(sp)
  803088:	dc801e17 	ldw	r18,120(sp)
  80308c:	dc401d17 	ldw	r17,116(sp)
  803090:	dc001c17 	ldw	r16,112(sp)
  803094:	dec02604 	addi	sp,sp,152
  803098:	f800283a 	ret
  80309c:	d9001617 	ldw	r4,88(sp)
  8030a0:	d9401217 	ldw	r5,72(sp)
  8030a4:	d8800104 	addi	r2,sp,4
  8030a8:	a80d883a 	mov	r6,r21
  8030ac:	d9c00204 	addi	r7,sp,8
  8030b0:	d8800015 	stw	r2,0(sp)
  8030b4:	080673c0 	call	80673c <__d2b>
  8030b8:	d8800715 	stw	r2,28(sp)
  8030bc:	a804d53a 	srli	r2,r21,20
  8030c0:	1101ffcc 	andi	r4,r2,2047
  8030c4:	20008626 	beq	r4,zero,8032e0 <_dtoa_r+0x348>
  8030c8:	d8c01217 	ldw	r3,72(sp)
  8030cc:	00800434 	movhi	r2,16
  8030d0:	10bfffc4 	addi	r2,r2,-1
  8030d4:	ddc00117 	ldw	r23,4(sp)
  8030d8:	a884703a 	and	r2,r21,r2
  8030dc:	1811883a 	mov	r8,r3
  8030e0:	124ffc34 	orhi	r9,r2,16368
  8030e4:	25bf0044 	addi	r22,r4,-1023
  8030e8:	d8000815 	stw	zero,32(sp)
  8030ec:	0005883a 	mov	r2,zero
  8030f0:	00cffe34 	movhi	r3,16376
  8030f4:	480b883a 	mov	r5,r9
  8030f8:	4009883a 	mov	r4,r8
  8030fc:	180f883a 	mov	r7,r3
  803100:	100d883a 	mov	r6,r2
  803104:	0808e980 	call	808e98 <__subdf3>
  803108:	0218dbf4 	movhi	r8,25455
  80310c:	4210d844 	addi	r8,r8,17249
  803110:	024ff4f4 	movhi	r9,16339
  803114:	4a61e9c4 	addi	r9,r9,-30809
  803118:	480f883a 	mov	r7,r9
  80311c:	400d883a 	mov	r6,r8
  803120:	180b883a 	mov	r5,r3
  803124:	1009883a 	mov	r4,r2
  803128:	0808f8c0 	call	808f8c <__muldf3>
  80312c:	0222d874 	movhi	r8,35681
  803130:	42322cc4 	addi	r8,r8,-14157
  803134:	024ff1f4 	movhi	r9,16327
  803138:	4a628a04 	addi	r9,r9,-30168
  80313c:	480f883a 	mov	r7,r9
  803140:	400d883a 	mov	r6,r8
  803144:	180b883a 	mov	r5,r3
  803148:	1009883a 	mov	r4,r2
  80314c:	0808f180 	call	808f18 <__adddf3>
  803150:	b009883a 	mov	r4,r22
  803154:	1021883a 	mov	r16,r2
  803158:	1823883a 	mov	r17,r3
  80315c:	08098500 	call	809850 <__floatsidf>
  803160:	021427f4 	movhi	r8,20639
  803164:	421e7ec4 	addi	r8,r8,31227
  803168:	024ff4f4 	movhi	r9,16339
  80316c:	4a5104c4 	addi	r9,r9,17427
  803170:	480f883a 	mov	r7,r9
  803174:	400d883a 	mov	r6,r8
  803178:	180b883a 	mov	r5,r3
  80317c:	1009883a 	mov	r4,r2
  803180:	0808f8c0 	call	808f8c <__muldf3>
  803184:	180f883a 	mov	r7,r3
  803188:	880b883a 	mov	r5,r17
  80318c:	100d883a 	mov	r6,r2
  803190:	8009883a 	mov	r4,r16
  803194:	0808f180 	call	808f18 <__adddf3>
  803198:	1009883a 	mov	r4,r2
  80319c:	180b883a 	mov	r5,r3
  8031a0:	1021883a 	mov	r16,r2
  8031a4:	1823883a 	mov	r17,r3
  8031a8:	08099480 	call	809948 <__fixdfsi>
  8031ac:	000d883a 	mov	r6,zero
  8031b0:	000f883a 	mov	r7,zero
  8031b4:	8009883a 	mov	r4,r16
  8031b8:	880b883a 	mov	r5,r17
  8031bc:	d8800d15 	stw	r2,52(sp)
  8031c0:	08097c80 	call	8097c8 <__ltdf2>
  8031c4:	10031716 	blt	r2,zero,803e24 <_dtoa_r+0xe8c>
  8031c8:	d8c00d17 	ldw	r3,52(sp)
  8031cc:	00800584 	movi	r2,22
  8031d0:	10c1482e 	bgeu	r2,r3,8036f4 <_dtoa_r+0x75c>
  8031d4:	01000044 	movi	r4,1
  8031d8:	d9000c15 	stw	r4,48(sp)
  8031dc:	bd85c83a 	sub	r2,r23,r22
  8031e0:	11bfffc4 	addi	r6,r2,-1
  8031e4:	30030b16 	blt	r6,zero,803e14 <_dtoa_r+0xe7c>
  8031e8:	d9800a15 	stw	r6,40(sp)
  8031ec:	d8001115 	stw	zero,68(sp)
  8031f0:	d8c00d17 	ldw	r3,52(sp)
  8031f4:	1802ff16 	blt	r3,zero,803df4 <_dtoa_r+0xe5c>
  8031f8:	d9000a17 	ldw	r4,40(sp)
  8031fc:	d8c00915 	stw	r3,36(sp)
  803200:	d8001015 	stw	zero,64(sp)
  803204:	20c9883a 	add	r4,r4,r3
  803208:	d9000a15 	stw	r4,40(sp)
  80320c:	d9001717 	ldw	r4,92(sp)
  803210:	00800244 	movi	r2,9
  803214:	11004636 	bltu	r2,r4,803330 <_dtoa_r+0x398>
  803218:	00800144 	movi	r2,5
  80321c:	11020416 	blt	r2,r4,803a30 <_dtoa_r+0xa98>
  803220:	04400044 	movi	r17,1
  803224:	d8c01717 	ldw	r3,92(sp)
  803228:	00800144 	movi	r2,5
  80322c:	10c1ed36 	bltu	r2,r3,8039e4 <_dtoa_r+0xa4c>
  803230:	18c5883a 	add	r2,r3,r3
  803234:	1085883a 	add	r2,r2,r2
  803238:	00c02034 	movhi	r3,128
  80323c:	18cc9304 	addi	r3,r3,12876
  803240:	10c5883a 	add	r2,r2,r3
  803244:	11000017 	ldw	r4,0(r2)
  803248:	2000683a 	jmp	r4
  80324c:	00803338 	rdprs	r2,zero,204
  803250:	00803338 	rdprs	r2,zero,204
  803254:	00803d38 	rdprs	r2,zero,244
  803258:	00803d10 	cmplti	r2,zero,244
  80325c:	00803d54 	movui	r2,245
  803260:	00803d60 	cmpeqi	r2,zero,245
  803264:	d9002717 	ldw	r4,156(sp)
  803268:	0089c3c4 	movi	r2,9999
  80326c:	20800015 	stw	r2,0(r4)
  803270:	a0001026 	beq	r20,zero,8032b4 <_dtoa_r+0x31c>
  803274:	00c02074 	movhi	r3,129
  803278:	18f7ef04 	addi	r3,r3,-8260
  80327c:	d9802917 	ldw	r6,164(sp)
  803280:	303f7926 	beq	r6,zero,803068 <_dtoa_r+0xd0>
  803284:	188000c7 	ldb	r2,3(r3)
  803288:	190000c4 	addi	r4,r3,3
  80328c:	1000101e 	bne	r2,zero,8032d0 <_dtoa_r+0x338>
  803290:	d8802917 	ldw	r2,164(sp)
  803294:	11000015 	stw	r4,0(r2)
  803298:	003f7306 	br	803068 <_dtoa_r+0xd0>
  80329c:	00a00034 	movhi	r2,32768
  8032a0:	10bfffc4 	addi	r2,r2,-1
  8032a4:	00c00044 	movi	r3,1
  8032a8:	88aa703a 	and	r21,r17,r2
  8032ac:	90c00015 	stw	r3,0(r18)
  8032b0:	003f5806 	br	803014 <_dtoa_r+0x7c>
  8032b4:	00800434 	movhi	r2,16
  8032b8:	10bfffc4 	addi	r2,r2,-1
  8032bc:	a884703a 	and	r2,r21,r2
  8032c0:	103fec1e 	bne	r2,zero,803274 <_dtoa_r+0x2dc>
  8032c4:	00c02074 	movhi	r3,129
  8032c8:	18f7ec04 	addi	r3,r3,-8272
  8032cc:	003feb06 	br	80327c <_dtoa_r+0x2e4>
  8032d0:	d8802917 	ldw	r2,164(sp)
  8032d4:	19000204 	addi	r4,r3,8
  8032d8:	11000015 	stw	r4,0(r2)
  8032dc:	003f6206 	br	803068 <_dtoa_r+0xd0>
  8032e0:	ddc00117 	ldw	r23,4(sp)
  8032e4:	d8800217 	ldw	r2,8(sp)
  8032e8:	01000804 	movi	r4,32
  8032ec:	b8c10c84 	addi	r3,r23,1074
  8032f0:	18a3883a 	add	r17,r3,r2
  8032f4:	2441b80e 	bge	r4,r17,8039d8 <_dtoa_r+0xa40>
  8032f8:	00c01004 	movi	r3,64
  8032fc:	1c47c83a 	sub	r3,r3,r17
  803300:	88bff804 	addi	r2,r17,-32
  803304:	a8c6983a 	sll	r3,r21,r3
  803308:	a084d83a 	srl	r2,r20,r2
  80330c:	1888b03a 	or	r4,r3,r2
  803310:	0809a200 	call	809a20 <__floatunsidf>
  803314:	1011883a 	mov	r8,r2
  803318:	00bf8434 	movhi	r2,65040
  80331c:	01000044 	movi	r4,1
  803320:	10d3883a 	add	r9,r2,r3
  803324:	8dbef344 	addi	r22,r17,-1075
  803328:	d9000815 	stw	r4,32(sp)
  80332c:	003f6f06 	br	8030ec <_dtoa_r+0x154>
  803330:	d8001715 	stw	zero,92(sp)
  803334:	04400044 	movi	r17,1
  803338:	00bfffc4 	movi	r2,-1
  80333c:	00c00044 	movi	r3,1
  803340:	d8800e15 	stw	r2,56(sp)
  803344:	d8002615 	stw	zero,152(sp)
  803348:	d8800f15 	stw	r2,60(sp)
  80334c:	d8c00b15 	stw	r3,44(sp)
  803350:	1021883a 	mov	r16,r2
  803354:	d8801617 	ldw	r2,88(sp)
  803358:	10001115 	stw	zero,68(r2)
  80335c:	d8801617 	ldw	r2,88(sp)
  803360:	11401117 	ldw	r5,68(r2)
  803364:	1009883a 	mov	r4,r2
  803368:	08066800 	call	806680 <_Balloc>
  80336c:	d8c01617 	ldw	r3,88(sp)
  803370:	d8800515 	stw	r2,20(sp)
  803374:	18801015 	stw	r2,64(r3)
  803378:	00800384 	movi	r2,14
  80337c:	14006836 	bltu	r2,r16,803520 <_dtoa_r+0x588>
  803380:	8805003a 	cmpeq	r2,r17,zero
  803384:	1000661e 	bne	r2,zero,803520 <_dtoa_r+0x588>
  803388:	d9000d17 	ldw	r4,52(sp)
  80338c:	0102300e 	bge	zero,r4,803c50 <_dtoa_r+0xcb8>
  803390:	208003cc 	andi	r2,r4,15
  803394:	100490fa 	slli	r2,r2,3
  803398:	2025d13a 	srai	r18,r4,4
  80339c:	00c02074 	movhi	r3,129
  8033a0:	18f80004 	addi	r3,r3,-8192
  8033a4:	10c5883a 	add	r2,r2,r3
  8033a8:	90c0040c 	andi	r3,r18,16
  8033ac:	14000017 	ldw	r16,0(r2)
  8033b0:	14400117 	ldw	r17,4(r2)
  8033b4:	18036a1e 	bne	r3,zero,804160 <_dtoa_r+0x11c8>
  8033b8:	05800084 	movi	r22,2
  8033bc:	90001026 	beq	r18,zero,803400 <_dtoa_r+0x468>
  8033c0:	04c02074 	movhi	r19,129
  8033c4:	9cf83204 	addi	r19,r19,-7992
  8033c8:	9080004c 	andi	r2,r18,1
  8033cc:	1005003a 	cmpeq	r2,r2,zero
  8033d0:	1000081e 	bne	r2,zero,8033f4 <_dtoa_r+0x45c>
  8033d4:	99800017 	ldw	r6,0(r19)
  8033d8:	99c00117 	ldw	r7,4(r19)
  8033dc:	880b883a 	mov	r5,r17
  8033e0:	8009883a 	mov	r4,r16
  8033e4:	0808f8c0 	call	808f8c <__muldf3>
  8033e8:	1021883a 	mov	r16,r2
  8033ec:	b5800044 	addi	r22,r22,1
  8033f0:	1823883a 	mov	r17,r3
  8033f4:	9025d07a 	srai	r18,r18,1
  8033f8:	9cc00204 	addi	r19,r19,8
  8033fc:	903ff21e 	bne	r18,zero,8033c8 <_dtoa_r+0x430>
  803400:	a80b883a 	mov	r5,r21
  803404:	a009883a 	mov	r4,r20
  803408:	880f883a 	mov	r7,r17
  80340c:	800d883a 	mov	r6,r16
  803410:	08093500 	call	809350 <__divdf3>
  803414:	1029883a 	mov	r20,r2
  803418:	182b883a 	mov	r21,r3
  80341c:	d8c00c17 	ldw	r3,48(sp)
  803420:	1805003a 	cmpeq	r2,r3,zero
  803424:	1000081e 	bne	r2,zero,803448 <_dtoa_r+0x4b0>
  803428:	0005883a 	mov	r2,zero
  80342c:	00cffc34 	movhi	r3,16368
  803430:	180f883a 	mov	r7,r3
  803434:	a009883a 	mov	r4,r20
  803438:	a80b883a 	mov	r5,r21
  80343c:	100d883a 	mov	r6,r2
  803440:	08097c80 	call	8097c8 <__ltdf2>
  803444:	1003fe16 	blt	r2,zero,804440 <_dtoa_r+0x14a8>
  803448:	b009883a 	mov	r4,r22
  80344c:	08098500 	call	809850 <__floatsidf>
  803450:	180b883a 	mov	r5,r3
  803454:	1009883a 	mov	r4,r2
  803458:	a00d883a 	mov	r6,r20
  80345c:	a80f883a 	mov	r7,r21
  803460:	0808f8c0 	call	808f8c <__muldf3>
  803464:	0011883a 	mov	r8,zero
  803468:	02500734 	movhi	r9,16412
  80346c:	1009883a 	mov	r4,r2
  803470:	180b883a 	mov	r5,r3
  803474:	480f883a 	mov	r7,r9
  803478:	400d883a 	mov	r6,r8
  80347c:	0808f180 	call	808f18 <__adddf3>
  803480:	d9000f17 	ldw	r4,60(sp)
  803484:	102d883a 	mov	r22,r2
  803488:	00bf3034 	movhi	r2,64704
  80348c:	18b9883a 	add	fp,r3,r2
  803490:	e02f883a 	mov	r23,fp
  803494:	20028f1e 	bne	r4,zero,803ed4 <_dtoa_r+0xf3c>
  803498:	0005883a 	mov	r2,zero
  80349c:	00d00534 	movhi	r3,16404
  8034a0:	a009883a 	mov	r4,r20
  8034a4:	a80b883a 	mov	r5,r21
  8034a8:	180f883a 	mov	r7,r3
  8034ac:	100d883a 	mov	r6,r2
  8034b0:	0808e980 	call	808e98 <__subdf3>
  8034b4:	1009883a 	mov	r4,r2
  8034b8:	e00f883a 	mov	r7,fp
  8034bc:	180b883a 	mov	r5,r3
  8034c0:	b00d883a 	mov	r6,r22
  8034c4:	1025883a 	mov	r18,r2
  8034c8:	1827883a 	mov	r19,r3
  8034cc:	08096b80 	call	8096b8 <__gtdf2>
  8034d0:	00834f16 	blt	zero,r2,804210 <_dtoa_r+0x1278>
  8034d4:	e0e0003c 	xorhi	r3,fp,32768
  8034d8:	9009883a 	mov	r4,r18
  8034dc:	980b883a 	mov	r5,r19
  8034e0:	180f883a 	mov	r7,r3
  8034e4:	b00d883a 	mov	r6,r22
  8034e8:	08097c80 	call	8097c8 <__ltdf2>
  8034ec:	1000080e 	bge	r2,zero,803510 <_dtoa_r+0x578>
  8034f0:	0027883a 	mov	r19,zero
  8034f4:	0025883a 	mov	r18,zero
  8034f8:	d8802617 	ldw	r2,152(sp)
  8034fc:	df000517 	ldw	fp,20(sp)
  803500:	d8000615 	stw	zero,24(sp)
  803504:	0084303a 	nor	r2,zero,r2
  803508:	d8800d15 	stw	r2,52(sp)
  80350c:	00019b06 	br	803b7c <_dtoa_r+0xbe4>
  803510:	d9801217 	ldw	r6,72(sp)
  803514:	d8801317 	ldw	r2,76(sp)
  803518:	3029883a 	mov	r20,r6
  80351c:	102b883a 	mov	r21,r2
  803520:	d8c00217 	ldw	r3,8(sp)
  803524:	18008516 	blt	r3,zero,80373c <_dtoa_r+0x7a4>
  803528:	d9000d17 	ldw	r4,52(sp)
  80352c:	00800384 	movi	r2,14
  803530:	11008216 	blt	r2,r4,80373c <_dtoa_r+0x7a4>
  803534:	200490fa 	slli	r2,r4,3
  803538:	d9802617 	ldw	r6,152(sp)
  80353c:	00c02074 	movhi	r3,129
  803540:	18f80004 	addi	r3,r3,-8192
  803544:	10c5883a 	add	r2,r2,r3
  803548:	14800017 	ldw	r18,0(r2)
  80354c:	14c00117 	ldw	r19,4(r2)
  803550:	30031e16 	blt	r6,zero,8041cc <_dtoa_r+0x1234>
  803554:	d9000517 	ldw	r4,20(sp)
  803558:	d8c00f17 	ldw	r3,60(sp)
  80355c:	a823883a 	mov	r17,r21
  803560:	a021883a 	mov	r16,r20
  803564:	192b883a 	add	r21,r3,r4
  803568:	2039883a 	mov	fp,r4
  80356c:	00000f06 	br	8035ac <_dtoa_r+0x614>
  803570:	0005883a 	mov	r2,zero
  803574:	00d00934 	movhi	r3,16420
  803578:	5009883a 	mov	r4,r10
  80357c:	580b883a 	mov	r5,r11
  803580:	180f883a 	mov	r7,r3
  803584:	100d883a 	mov	r6,r2
  803588:	0808f8c0 	call	808f8c <__muldf3>
  80358c:	180b883a 	mov	r5,r3
  803590:	000d883a 	mov	r6,zero
  803594:	000f883a 	mov	r7,zero
  803598:	1009883a 	mov	r4,r2
  80359c:	1021883a 	mov	r16,r2
  8035a0:	1823883a 	mov	r17,r3
  8035a4:	08096300 	call	809630 <__nedf2>
  8035a8:	10004526 	beq	r2,zero,8036c0 <_dtoa_r+0x728>
  8035ac:	900d883a 	mov	r6,r18
  8035b0:	980f883a 	mov	r7,r19
  8035b4:	8009883a 	mov	r4,r16
  8035b8:	880b883a 	mov	r5,r17
  8035bc:	08093500 	call	809350 <__divdf3>
  8035c0:	180b883a 	mov	r5,r3
  8035c4:	1009883a 	mov	r4,r2
  8035c8:	08099480 	call	809948 <__fixdfsi>
  8035cc:	1009883a 	mov	r4,r2
  8035d0:	1029883a 	mov	r20,r2
  8035d4:	08098500 	call	809850 <__floatsidf>
  8035d8:	180f883a 	mov	r7,r3
  8035dc:	9009883a 	mov	r4,r18
  8035e0:	980b883a 	mov	r5,r19
  8035e4:	100d883a 	mov	r6,r2
  8035e8:	0808f8c0 	call	808f8c <__muldf3>
  8035ec:	180f883a 	mov	r7,r3
  8035f0:	880b883a 	mov	r5,r17
  8035f4:	8009883a 	mov	r4,r16
  8035f8:	100d883a 	mov	r6,r2
  8035fc:	0808e980 	call	808e98 <__subdf3>
  803600:	1015883a 	mov	r10,r2
  803604:	a0800c04 	addi	r2,r20,48
  803608:	e0800005 	stb	r2,0(fp)
  80360c:	e7000044 	addi	fp,fp,1
  803610:	1817883a 	mov	r11,r3
  803614:	e57fd61e 	bne	fp,r21,803570 <_dtoa_r+0x5d8>
  803618:	500d883a 	mov	r6,r10
  80361c:	180f883a 	mov	r7,r3
  803620:	5009883a 	mov	r4,r10
  803624:	180b883a 	mov	r5,r3
  803628:	0808f180 	call	808f18 <__adddf3>
  80362c:	100d883a 	mov	r6,r2
  803630:	9009883a 	mov	r4,r18
  803634:	980b883a 	mov	r5,r19
  803638:	180f883a 	mov	r7,r3
  80363c:	1021883a 	mov	r16,r2
  803640:	1823883a 	mov	r17,r3
  803644:	08097c80 	call	8097c8 <__ltdf2>
  803648:	10000816 	blt	r2,zero,80366c <_dtoa_r+0x6d4>
  80364c:	980b883a 	mov	r5,r19
  803650:	800d883a 	mov	r6,r16
  803654:	880f883a 	mov	r7,r17
  803658:	9009883a 	mov	r4,r18
  80365c:	08095a80 	call	8095a8 <__eqdf2>
  803660:	1000171e 	bne	r2,zero,8036c0 <_dtoa_r+0x728>
  803664:	a080004c 	andi	r2,r20,1
  803668:	10001526 	beq	r2,zero,8036c0 <_dtoa_r+0x728>
  80366c:	d8800d17 	ldw	r2,52(sp)
  803670:	d8800415 	stw	r2,16(sp)
  803674:	e009883a 	mov	r4,fp
  803678:	213fffc4 	addi	r4,r4,-1
  80367c:	20c00007 	ldb	r3,0(r4)
  803680:	00800e44 	movi	r2,57
  803684:	1880081e 	bne	r3,r2,8036a8 <_dtoa_r+0x710>
  803688:	d8800517 	ldw	r2,20(sp)
  80368c:	113ffa1e 	bne	r2,r4,803678 <_dtoa_r+0x6e0>
  803690:	d8c00417 	ldw	r3,16(sp)
  803694:	d9800517 	ldw	r6,20(sp)
  803698:	00800c04 	movi	r2,48
  80369c:	18c00044 	addi	r3,r3,1
  8036a0:	d8c00415 	stw	r3,16(sp)
  8036a4:	30800005 	stb	r2,0(r6)
  8036a8:	20800003 	ldbu	r2,0(r4)
  8036ac:	d8c00417 	ldw	r3,16(sp)
  8036b0:	27000044 	addi	fp,r4,1
  8036b4:	10800044 	addi	r2,r2,1
  8036b8:	d8c00d15 	stw	r3,52(sp)
  8036bc:	20800005 	stb	r2,0(r4)
  8036c0:	d9001617 	ldw	r4,88(sp)
  8036c4:	d9400717 	ldw	r5,28(sp)
  8036c8:	08061000 	call	806100 <_Bfree>
  8036cc:	e0000005 	stb	zero,0(fp)
  8036d0:	d9800d17 	ldw	r6,52(sp)
  8036d4:	d8c02717 	ldw	r3,156(sp)
  8036d8:	d9002917 	ldw	r4,164(sp)
  8036dc:	30800044 	addi	r2,r6,1
  8036e0:	18800015 	stw	r2,0(r3)
  8036e4:	20029c26 	beq	r4,zero,804158 <_dtoa_r+0x11c0>
  8036e8:	d8c00517 	ldw	r3,20(sp)
  8036ec:	27000015 	stw	fp,0(r4)
  8036f0:	003e5d06 	br	803068 <_dtoa_r+0xd0>
  8036f4:	d9800d17 	ldw	r6,52(sp)
  8036f8:	00c02074 	movhi	r3,129
  8036fc:	18f80004 	addi	r3,r3,-8192
  803700:	d9001217 	ldw	r4,72(sp)
  803704:	300490fa 	slli	r2,r6,3
  803708:	d9401317 	ldw	r5,76(sp)
  80370c:	10c5883a 	add	r2,r2,r3
  803710:	12000017 	ldw	r8,0(r2)
  803714:	12400117 	ldw	r9,4(r2)
  803718:	400d883a 	mov	r6,r8
  80371c:	480f883a 	mov	r7,r9
  803720:	08097c80 	call	8097c8 <__ltdf2>
  803724:	1000030e 	bge	r2,zero,803734 <_dtoa_r+0x79c>
  803728:	d8800d17 	ldw	r2,52(sp)
  80372c:	10bfffc4 	addi	r2,r2,-1
  803730:	d8800d15 	stw	r2,52(sp)
  803734:	d8000c15 	stw	zero,48(sp)
  803738:	003ea806 	br	8031dc <_dtoa_r+0x244>
  80373c:	d9000b17 	ldw	r4,44(sp)
  803740:	202cc03a 	cmpne	r22,r4,zero
  803744:	b000c71e 	bne	r22,zero,803a64 <_dtoa_r+0xacc>
  803748:	dc001117 	ldw	r16,68(sp)
  80374c:	dc801017 	ldw	r18,64(sp)
  803750:	0027883a 	mov	r19,zero
  803754:	04000b0e 	bge	zero,r16,803784 <_dtoa_r+0x7ec>
  803758:	d8c00a17 	ldw	r3,40(sp)
  80375c:	00c0090e 	bge	zero,r3,803784 <_dtoa_r+0x7ec>
  803760:	8005883a 	mov	r2,r16
  803764:	1c011316 	blt	r3,r16,803bb4 <_dtoa_r+0xc1c>
  803768:	d9000a17 	ldw	r4,40(sp)
  80376c:	d9801117 	ldw	r6,68(sp)
  803770:	80a1c83a 	sub	r16,r16,r2
  803774:	2089c83a 	sub	r4,r4,r2
  803778:	308dc83a 	sub	r6,r6,r2
  80377c:	d9000a15 	stw	r4,40(sp)
  803780:	d9801115 	stw	r6,68(sp)
  803784:	d8801017 	ldw	r2,64(sp)
  803788:	0080150e 	bge	zero,r2,8037e0 <_dtoa_r+0x848>
  80378c:	d8c00b17 	ldw	r3,44(sp)
  803790:	1805003a 	cmpeq	r2,r3,zero
  803794:	1001c91e 	bne	r2,zero,803ebc <_dtoa_r+0xf24>
  803798:	04800e0e 	bge	zero,r18,8037d4 <_dtoa_r+0x83c>
  80379c:	d9001617 	ldw	r4,88(sp)
  8037a0:	980b883a 	mov	r5,r19
  8037a4:	900d883a 	mov	r6,r18
  8037a8:	0806eb40 	call	806eb4 <__pow5mult>
  8037ac:	d9001617 	ldw	r4,88(sp)
  8037b0:	d9800717 	ldw	r6,28(sp)
  8037b4:	100b883a 	mov	r5,r2
  8037b8:	1027883a 	mov	r19,r2
  8037bc:	0806b900 	call	806b90 <__multiply>
  8037c0:	d9001617 	ldw	r4,88(sp)
  8037c4:	d9400717 	ldw	r5,28(sp)
  8037c8:	1023883a 	mov	r17,r2
  8037cc:	08061000 	call	806100 <_Bfree>
  8037d0:	dc400715 	stw	r17,28(sp)
  8037d4:	d9001017 	ldw	r4,64(sp)
  8037d8:	248dc83a 	sub	r6,r4,r18
  8037dc:	30010e1e 	bne	r6,zero,803c18 <_dtoa_r+0xc80>
  8037e0:	d9001617 	ldw	r4,88(sp)
  8037e4:	04400044 	movi	r17,1
  8037e8:	880b883a 	mov	r5,r17
  8037ec:	0806d780 	call	806d78 <__i2b>
  8037f0:	d9800917 	ldw	r6,36(sp)
  8037f4:	1025883a 	mov	r18,r2
  8037f8:	0180040e 	bge	zero,r6,80380c <_dtoa_r+0x874>
  8037fc:	d9001617 	ldw	r4,88(sp)
  803800:	100b883a 	mov	r5,r2
  803804:	0806eb40 	call	806eb4 <__pow5mult>
  803808:	1025883a 	mov	r18,r2
  80380c:	d8801717 	ldw	r2,92(sp)
  803810:	8880f30e 	bge	r17,r2,803be0 <_dtoa_r+0xc48>
  803814:	0023883a 	mov	r17,zero
  803818:	d9800917 	ldw	r6,36(sp)
  80381c:	30019e1e 	bne	r6,zero,803e98 <_dtoa_r+0xf00>
  803820:	00c00044 	movi	r3,1
  803824:	d9000a17 	ldw	r4,40(sp)
  803828:	20c5883a 	add	r2,r4,r3
  80382c:	10c007cc 	andi	r3,r2,31
  803830:	1800841e 	bne	r3,zero,803a44 <_dtoa_r+0xaac>
  803834:	00800704 	movi	r2,28
  803838:	d9000a17 	ldw	r4,40(sp)
  80383c:	d9801117 	ldw	r6,68(sp)
  803840:	80a1883a 	add	r16,r16,r2
  803844:	2089883a 	add	r4,r4,r2
  803848:	308d883a 	add	r6,r6,r2
  80384c:	d9000a15 	stw	r4,40(sp)
  803850:	d9801115 	stw	r6,68(sp)
  803854:	d8801117 	ldw	r2,68(sp)
  803858:	0080050e 	bge	zero,r2,803870 <_dtoa_r+0x8d8>
  80385c:	d9400717 	ldw	r5,28(sp)
  803860:	d9001617 	ldw	r4,88(sp)
  803864:	100d883a 	mov	r6,r2
  803868:	0806a440 	call	806a44 <__lshift>
  80386c:	d8800715 	stw	r2,28(sp)
  803870:	d8c00a17 	ldw	r3,40(sp)
  803874:	00c0050e 	bge	zero,r3,80388c <_dtoa_r+0x8f4>
  803878:	d9001617 	ldw	r4,88(sp)
  80387c:	900b883a 	mov	r5,r18
  803880:	180d883a 	mov	r6,r3
  803884:	0806a440 	call	806a44 <__lshift>
  803888:	1025883a 	mov	r18,r2
  80388c:	d9000c17 	ldw	r4,48(sp)
  803890:	2005003a 	cmpeq	r2,r4,zero
  803894:	10016f26 	beq	r2,zero,803e54 <_dtoa_r+0xebc>
  803898:	d9000f17 	ldw	r4,60(sp)
  80389c:	0102170e 	bge	zero,r4,8040fc <_dtoa_r+0x1164>
  8038a0:	d9800b17 	ldw	r6,44(sp)
  8038a4:	3005003a 	cmpeq	r2,r6,zero
  8038a8:	1000881e 	bne	r2,zero,803acc <_dtoa_r+0xb34>
  8038ac:	0400050e 	bge	zero,r16,8038c4 <_dtoa_r+0x92c>
  8038b0:	d9001617 	ldw	r4,88(sp)
  8038b4:	980b883a 	mov	r5,r19
  8038b8:	800d883a 	mov	r6,r16
  8038bc:	0806a440 	call	806a44 <__lshift>
  8038c0:	1027883a 	mov	r19,r2
  8038c4:	8804c03a 	cmpne	r2,r17,zero
  8038c8:	1002541e 	bne	r2,zero,80421c <_dtoa_r+0x1284>
  8038cc:	980b883a 	mov	r5,r19
  8038d0:	dd800517 	ldw	r22,20(sp)
  8038d4:	dcc00615 	stw	r19,24(sp)
  8038d8:	a700004c 	andi	fp,r20,1
  8038dc:	2827883a 	mov	r19,r5
  8038e0:	d9000717 	ldw	r4,28(sp)
  8038e4:	900b883a 	mov	r5,r18
  8038e8:	0802d800 	call	802d80 <quorem>
  8038ec:	d9000717 	ldw	r4,28(sp)
  8038f0:	d9400617 	ldw	r5,24(sp)
  8038f4:	1023883a 	mov	r17,r2
  8038f8:	8dc00c04 	addi	r23,r17,48
  8038fc:	080625c0 	call	80625c <__mcmp>
  803900:	d9001617 	ldw	r4,88(sp)
  803904:	900b883a 	mov	r5,r18
  803908:	980d883a 	mov	r6,r19
  80390c:	1029883a 	mov	r20,r2
  803910:	08068b80 	call	8068b8 <__mdiff>
  803914:	102b883a 	mov	r21,r2
  803918:	10800317 	ldw	r2,12(r2)
  80391c:	1001281e 	bne	r2,zero,803dc0 <_dtoa_r+0xe28>
  803920:	d9000717 	ldw	r4,28(sp)
  803924:	a80b883a 	mov	r5,r21
  803928:	080625c0 	call	80625c <__mcmp>
  80392c:	d9001617 	ldw	r4,88(sp)
  803930:	1021883a 	mov	r16,r2
  803934:	a80b883a 	mov	r5,r21
  803938:	08061000 	call	806100 <_Bfree>
  80393c:	8000041e 	bne	r16,zero,803950 <_dtoa_r+0x9b8>
  803940:	d8801717 	ldw	r2,92(sp)
  803944:	1000021e 	bne	r2,zero,803950 <_dtoa_r+0x9b8>
  803948:	e004c03a 	cmpne	r2,fp,zero
  80394c:	10011726 	beq	r2,zero,803dac <_dtoa_r+0xe14>
  803950:	a0010616 	blt	r20,zero,803d6c <_dtoa_r+0xdd4>
  803954:	a000041e 	bne	r20,zero,803968 <_dtoa_r+0x9d0>
  803958:	d8c01717 	ldw	r3,92(sp)
  80395c:	1800021e 	bne	r3,zero,803968 <_dtoa_r+0x9d0>
  803960:	e004c03a 	cmpne	r2,fp,zero
  803964:	10010126 	beq	r2,zero,803d6c <_dtoa_r+0xdd4>
  803968:	04023d16 	blt	zero,r16,804260 <_dtoa_r+0x12c8>
  80396c:	b5c00005 	stb	r23,0(r22)
  803970:	d9800517 	ldw	r6,20(sp)
  803974:	d9000f17 	ldw	r4,60(sp)
  803978:	b5800044 	addi	r22,r22,1
  80397c:	3105883a 	add	r2,r6,r4
  803980:	b0806526 	beq	r22,r2,803b18 <_dtoa_r+0xb80>
  803984:	d9400717 	ldw	r5,28(sp)
  803988:	d9001617 	ldw	r4,88(sp)
  80398c:	01800284 	movi	r6,10
  803990:	000f883a 	mov	r7,zero
  803994:	0806db40 	call	806db4 <__multadd>
  803998:	d8800715 	stw	r2,28(sp)
  80399c:	d8800617 	ldw	r2,24(sp)
  8039a0:	14c10c26 	beq	r2,r19,803dd4 <_dtoa_r+0xe3c>
  8039a4:	d9400617 	ldw	r5,24(sp)
  8039a8:	d9001617 	ldw	r4,88(sp)
  8039ac:	01800284 	movi	r6,10
  8039b0:	000f883a 	mov	r7,zero
  8039b4:	0806db40 	call	806db4 <__multadd>
  8039b8:	d9001617 	ldw	r4,88(sp)
  8039bc:	980b883a 	mov	r5,r19
  8039c0:	01800284 	movi	r6,10
  8039c4:	000f883a 	mov	r7,zero
  8039c8:	d8800615 	stw	r2,24(sp)
  8039cc:	0806db40 	call	806db4 <__multadd>
  8039d0:	1027883a 	mov	r19,r2
  8039d4:	003fc206 	br	8038e0 <_dtoa_r+0x948>
  8039d8:	2445c83a 	sub	r2,r4,r17
  8039dc:	a088983a 	sll	r4,r20,r2
  8039e0:	003e4b06 	br	803310 <_dtoa_r+0x378>
  8039e4:	01bfffc4 	movi	r6,-1
  8039e8:	00800044 	movi	r2,1
  8039ec:	d9800e15 	stw	r6,56(sp)
  8039f0:	d9800f15 	stw	r6,60(sp)
  8039f4:	d8800b15 	stw	r2,44(sp)
  8039f8:	d8c01617 	ldw	r3,88(sp)
  8039fc:	008005c4 	movi	r2,23
  803a00:	18001115 	stw	zero,68(r3)
  803a04:	1580082e 	bgeu	r2,r22,803a28 <_dtoa_r+0xa90>
  803a08:	00c00104 	movi	r3,4
  803a0c:	0009883a 	mov	r4,zero
  803a10:	18c7883a 	add	r3,r3,r3
  803a14:	18800504 	addi	r2,r3,20
  803a18:	21000044 	addi	r4,r4,1
  803a1c:	b0bffc2e 	bgeu	r22,r2,803a10 <_dtoa_r+0xa78>
  803a20:	d9801617 	ldw	r6,88(sp)
  803a24:	31001115 	stw	r4,68(r6)
  803a28:	dc000f17 	ldw	r16,60(sp)
  803a2c:	003e4b06 	br	80335c <_dtoa_r+0x3c4>
  803a30:	d9801717 	ldw	r6,92(sp)
  803a34:	0023883a 	mov	r17,zero
  803a38:	31bfff04 	addi	r6,r6,-4
  803a3c:	d9801715 	stw	r6,92(sp)
  803a40:	003df806 	br	803224 <_dtoa_r+0x28c>
  803a44:	00800804 	movi	r2,32
  803a48:	10c9c83a 	sub	r4,r2,r3
  803a4c:	00c00104 	movi	r3,4
  803a50:	19005a16 	blt	r3,r4,803bbc <_dtoa_r+0xc24>
  803a54:	008000c4 	movi	r2,3
  803a58:	113f7e16 	blt	r2,r4,803854 <_dtoa_r+0x8bc>
  803a5c:	20800704 	addi	r2,r4,28
  803a60:	003f7506 	br	803838 <_dtoa_r+0x8a0>
  803a64:	d9801717 	ldw	r6,92(sp)
  803a68:	00800044 	movi	r2,1
  803a6c:	1180a10e 	bge	r2,r6,803cf4 <_dtoa_r+0xd5c>
  803a70:	d9800f17 	ldw	r6,60(sp)
  803a74:	d8c01017 	ldw	r3,64(sp)
  803a78:	30bfffc4 	addi	r2,r6,-1
  803a7c:	1881c616 	blt	r3,r2,804198 <_dtoa_r+0x1200>
  803a80:	18a5c83a 	sub	r18,r3,r2
  803a84:	d8800f17 	ldw	r2,60(sp)
  803a88:	10026216 	blt	r2,zero,804414 <_dtoa_r+0x147c>
  803a8c:	dc001117 	ldw	r16,68(sp)
  803a90:	1007883a 	mov	r3,r2
  803a94:	d9800a17 	ldw	r6,40(sp)
  803a98:	d8801117 	ldw	r2,68(sp)
  803a9c:	d9001617 	ldw	r4,88(sp)
  803aa0:	30cd883a 	add	r6,r6,r3
  803aa4:	10c5883a 	add	r2,r2,r3
  803aa8:	01400044 	movi	r5,1
  803aac:	d9800a15 	stw	r6,40(sp)
  803ab0:	d8801115 	stw	r2,68(sp)
  803ab4:	0806d780 	call	806d78 <__i2b>
  803ab8:	1027883a 	mov	r19,r2
  803abc:	003f2506 	br	803754 <_dtoa_r+0x7bc>
  803ac0:	00c02074 	movhi	r3,129
  803ac4:	18f7e304 	addi	r3,r3,-8308
  803ac8:	003d6706 	br	803068 <_dtoa_r+0xd0>
  803acc:	dd800517 	ldw	r22,20(sp)
  803ad0:	04000044 	movi	r16,1
  803ad4:	00000706 	br	803af4 <_dtoa_r+0xb5c>
  803ad8:	d9400717 	ldw	r5,28(sp)
  803adc:	d9001617 	ldw	r4,88(sp)
  803ae0:	01800284 	movi	r6,10
  803ae4:	000f883a 	mov	r7,zero
  803ae8:	0806db40 	call	806db4 <__multadd>
  803aec:	d8800715 	stw	r2,28(sp)
  803af0:	84000044 	addi	r16,r16,1
  803af4:	d9000717 	ldw	r4,28(sp)
  803af8:	900b883a 	mov	r5,r18
  803afc:	0802d800 	call	802d80 <quorem>
  803b00:	15c00c04 	addi	r23,r2,48
  803b04:	b5c00005 	stb	r23,0(r22)
  803b08:	d8c00f17 	ldw	r3,60(sp)
  803b0c:	b5800044 	addi	r22,r22,1
  803b10:	80fff116 	blt	r16,r3,803ad8 <_dtoa_r+0xb40>
  803b14:	d8000615 	stw	zero,24(sp)
  803b18:	d9400717 	ldw	r5,28(sp)
  803b1c:	d9001617 	ldw	r4,88(sp)
  803b20:	01800044 	movi	r6,1
  803b24:	0806a440 	call	806a44 <__lshift>
  803b28:	1009883a 	mov	r4,r2
  803b2c:	900b883a 	mov	r5,r18
  803b30:	d8800715 	stw	r2,28(sp)
  803b34:	080625c0 	call	80625c <__mcmp>
  803b38:	00803c0e 	bge	zero,r2,803c2c <_dtoa_r+0xc94>
  803b3c:	b009883a 	mov	r4,r22
  803b40:	213fffc4 	addi	r4,r4,-1
  803b44:	21400003 	ldbu	r5,0(r4)
  803b48:	00800e44 	movi	r2,57
  803b4c:	28c03fcc 	andi	r3,r5,255
  803b50:	18c0201c 	xori	r3,r3,128
  803b54:	18ffe004 	addi	r3,r3,-128
  803b58:	1881981e 	bne	r3,r2,8041bc <_dtoa_r+0x1224>
  803b5c:	d9800517 	ldw	r6,20(sp)
  803b60:	21bff71e 	bne	r4,r6,803b40 <_dtoa_r+0xba8>
  803b64:	d8800d17 	ldw	r2,52(sp)
  803b68:	37000044 	addi	fp,r6,1
  803b6c:	10800044 	addi	r2,r2,1
  803b70:	d8800d15 	stw	r2,52(sp)
  803b74:	00800c44 	movi	r2,49
  803b78:	30800005 	stb	r2,0(r6)
  803b7c:	d9001617 	ldw	r4,88(sp)
  803b80:	900b883a 	mov	r5,r18
  803b84:	08061000 	call	806100 <_Bfree>
  803b88:	983ecd26 	beq	r19,zero,8036c0 <_dtoa_r+0x728>
  803b8c:	d8c00617 	ldw	r3,24(sp)
  803b90:	18000426 	beq	r3,zero,803ba4 <_dtoa_r+0xc0c>
  803b94:	1cc00326 	beq	r3,r19,803ba4 <_dtoa_r+0xc0c>
  803b98:	d9001617 	ldw	r4,88(sp)
  803b9c:	180b883a 	mov	r5,r3
  803ba0:	08061000 	call	806100 <_Bfree>
  803ba4:	d9001617 	ldw	r4,88(sp)
  803ba8:	980b883a 	mov	r5,r19
  803bac:	08061000 	call	806100 <_Bfree>
  803bb0:	003ec306 	br	8036c0 <_dtoa_r+0x728>
  803bb4:	1805883a 	mov	r2,r3
  803bb8:	003eeb06 	br	803768 <_dtoa_r+0x7d0>
  803bbc:	d9800a17 	ldw	r6,40(sp)
  803bc0:	d8c01117 	ldw	r3,68(sp)
  803bc4:	20bfff04 	addi	r2,r4,-4
  803bc8:	308d883a 	add	r6,r6,r2
  803bcc:	1887883a 	add	r3,r3,r2
  803bd0:	80a1883a 	add	r16,r16,r2
  803bd4:	d9800a15 	stw	r6,40(sp)
  803bd8:	d8c01115 	stw	r3,68(sp)
  803bdc:	003f1d06 	br	803854 <_dtoa_r+0x8bc>
  803be0:	a03f0c1e 	bne	r20,zero,803814 <_dtoa_r+0x87c>
  803be4:	00800434 	movhi	r2,16
  803be8:	10bfffc4 	addi	r2,r2,-1
  803bec:	a884703a 	and	r2,r21,r2
  803bf0:	103f081e 	bne	r2,zero,803814 <_dtoa_r+0x87c>
  803bf4:	a89ffc2c 	andhi	r2,r21,32752
  803bf8:	103f0626 	beq	r2,zero,803814 <_dtoa_r+0x87c>
  803bfc:	d8c01117 	ldw	r3,68(sp)
  803c00:	d9000a17 	ldw	r4,40(sp)
  803c04:	18c00044 	addi	r3,r3,1
  803c08:	21000044 	addi	r4,r4,1
  803c0c:	d8c01115 	stw	r3,68(sp)
  803c10:	d9000a15 	stw	r4,40(sp)
  803c14:	003f0006 	br	803818 <_dtoa_r+0x880>
  803c18:	d9400717 	ldw	r5,28(sp)
  803c1c:	d9001617 	ldw	r4,88(sp)
  803c20:	0806eb40 	call	806eb4 <__pow5mult>
  803c24:	d8800715 	stw	r2,28(sp)
  803c28:	003eed06 	br	8037e0 <_dtoa_r+0x848>
  803c2c:	1000021e 	bne	r2,zero,803c38 <_dtoa_r+0xca0>
  803c30:	b880004c 	andi	r2,r23,1
  803c34:	103fc11e 	bne	r2,zero,803b3c <_dtoa_r+0xba4>
  803c38:	b5bfffc4 	addi	r22,r22,-1
  803c3c:	b0c00007 	ldb	r3,0(r22)
  803c40:	00800c04 	movi	r2,48
  803c44:	18bffc26 	beq	r3,r2,803c38 <_dtoa_r+0xca0>
  803c48:	b7000044 	addi	fp,r22,1
  803c4c:	003fcb06 	br	803b7c <_dtoa_r+0xbe4>
  803c50:	d9800d17 	ldw	r6,52(sp)
  803c54:	018fc83a 	sub	r7,zero,r6
  803c58:	3801f726 	beq	r7,zero,804438 <_dtoa_r+0x14a0>
  803c5c:	398003cc 	andi	r6,r7,15
  803c60:	300c90fa 	slli	r6,r6,3
  803c64:	01402074 	movhi	r5,129
  803c68:	29780004 	addi	r5,r5,-8192
  803c6c:	d9001217 	ldw	r4,72(sp)
  803c70:	314d883a 	add	r6,r6,r5
  803c74:	30c00117 	ldw	r3,4(r6)
  803c78:	30800017 	ldw	r2,0(r6)
  803c7c:	d9401317 	ldw	r5,76(sp)
  803c80:	3821d13a 	srai	r16,r7,4
  803c84:	100d883a 	mov	r6,r2
  803c88:	180f883a 	mov	r7,r3
  803c8c:	0808f8c0 	call	808f8c <__muldf3>
  803c90:	1011883a 	mov	r8,r2
  803c94:	1813883a 	mov	r9,r3
  803c98:	1029883a 	mov	r20,r2
  803c9c:	182b883a 	mov	r21,r3
  803ca0:	8001e526 	beq	r16,zero,804438 <_dtoa_r+0x14a0>
  803ca4:	05800084 	movi	r22,2
  803ca8:	04402074 	movhi	r17,129
  803cac:	8c783204 	addi	r17,r17,-7992
  803cb0:	8080004c 	andi	r2,r16,1
  803cb4:	1005003a 	cmpeq	r2,r2,zero
  803cb8:	1000081e 	bne	r2,zero,803cdc <_dtoa_r+0xd44>
  803cbc:	89800017 	ldw	r6,0(r17)
  803cc0:	89c00117 	ldw	r7,4(r17)
  803cc4:	480b883a 	mov	r5,r9
  803cc8:	4009883a 	mov	r4,r8
  803ccc:	0808f8c0 	call	808f8c <__muldf3>
  803cd0:	1011883a 	mov	r8,r2
  803cd4:	b5800044 	addi	r22,r22,1
  803cd8:	1813883a 	mov	r9,r3
  803cdc:	8021d07a 	srai	r16,r16,1
  803ce0:	8c400204 	addi	r17,r17,8
  803ce4:	803ff21e 	bne	r16,zero,803cb0 <_dtoa_r+0xd18>
  803ce8:	4029883a 	mov	r20,r8
  803cec:	482b883a 	mov	r21,r9
  803cf0:	003dca06 	br	80341c <_dtoa_r+0x484>
  803cf4:	d9000817 	ldw	r4,32(sp)
  803cf8:	2005003a 	cmpeq	r2,r4,zero
  803cfc:	1001f61e 	bne	r2,zero,8044d8 <_dtoa_r+0x1540>
  803d00:	dc001117 	ldw	r16,68(sp)
  803d04:	dc801017 	ldw	r18,64(sp)
  803d08:	18c10cc4 	addi	r3,r3,1075
  803d0c:	003f6106 	br	803a94 <_dtoa_r+0xafc>
  803d10:	d8000b15 	stw	zero,44(sp)
  803d14:	d9802617 	ldw	r6,152(sp)
  803d18:	d8c00d17 	ldw	r3,52(sp)
  803d1c:	30800044 	addi	r2,r6,1
  803d20:	18ad883a 	add	r22,r3,r2
  803d24:	b13fffc4 	addi	r4,r22,-1
  803d28:	d9000e15 	stw	r4,56(sp)
  803d2c:	0581f60e 	bge	zero,r22,804508 <_dtoa_r+0x1570>
  803d30:	dd800f15 	stw	r22,60(sp)
  803d34:	003f3006 	br	8039f8 <_dtoa_r+0xa60>
  803d38:	d8000b15 	stw	zero,44(sp)
  803d3c:	d9002617 	ldw	r4,152(sp)
  803d40:	0101eb0e 	bge	zero,r4,8044f0 <_dtoa_r+0x1558>
  803d44:	202d883a 	mov	r22,r4
  803d48:	d9000e15 	stw	r4,56(sp)
  803d4c:	d9000f15 	stw	r4,60(sp)
  803d50:	003f2906 	br	8039f8 <_dtoa_r+0xa60>
  803d54:	01800044 	movi	r6,1
  803d58:	d9800b15 	stw	r6,44(sp)
  803d5c:	003ff706 	br	803d3c <_dtoa_r+0xda4>
  803d60:	01000044 	movi	r4,1
  803d64:	d9000b15 	stw	r4,44(sp)
  803d68:	003fea06 	br	803d14 <_dtoa_r+0xd7c>
  803d6c:	04000c0e 	bge	zero,r16,803da0 <_dtoa_r+0xe08>
  803d70:	d9400717 	ldw	r5,28(sp)
  803d74:	d9001617 	ldw	r4,88(sp)
  803d78:	01800044 	movi	r6,1
  803d7c:	0806a440 	call	806a44 <__lshift>
  803d80:	1009883a 	mov	r4,r2
  803d84:	900b883a 	mov	r5,r18
  803d88:	d8800715 	stw	r2,28(sp)
  803d8c:	080625c0 	call	80625c <__mcmp>
  803d90:	0081e00e 	bge	zero,r2,804514 <_dtoa_r+0x157c>
  803d94:	bdc00044 	addi	r23,r23,1
  803d98:	00800e84 	movi	r2,58
  803d9c:	b881a226 	beq	r23,r2,804428 <_dtoa_r+0x1490>
  803da0:	b7000044 	addi	fp,r22,1
  803da4:	b5c00005 	stb	r23,0(r22)
  803da8:	003f7406 	br	803b7c <_dtoa_r+0xbe4>
  803dac:	00800e44 	movi	r2,57
  803db0:	b8819d26 	beq	r23,r2,804428 <_dtoa_r+0x1490>
  803db4:	053ffa0e 	bge	zero,r20,803da0 <_dtoa_r+0xe08>
  803db8:	8dc00c44 	addi	r23,r17,49
  803dbc:	003ff806 	br	803da0 <_dtoa_r+0xe08>
  803dc0:	d9001617 	ldw	r4,88(sp)
  803dc4:	a80b883a 	mov	r5,r21
  803dc8:	04000044 	movi	r16,1
  803dcc:	08061000 	call	806100 <_Bfree>
  803dd0:	003edf06 	br	803950 <_dtoa_r+0x9b8>
  803dd4:	d9001617 	ldw	r4,88(sp)
  803dd8:	980b883a 	mov	r5,r19
  803ddc:	01800284 	movi	r6,10
  803de0:	000f883a 	mov	r7,zero
  803de4:	0806db40 	call	806db4 <__multadd>
  803de8:	1027883a 	mov	r19,r2
  803dec:	d8800615 	stw	r2,24(sp)
  803df0:	003ebb06 	br	8038e0 <_dtoa_r+0x948>
  803df4:	d9801117 	ldw	r6,68(sp)
  803df8:	d8800d17 	ldw	r2,52(sp)
  803dfc:	d8000915 	stw	zero,36(sp)
  803e00:	308dc83a 	sub	r6,r6,r2
  803e04:	0087c83a 	sub	r3,zero,r2
  803e08:	d9801115 	stw	r6,68(sp)
  803e0c:	d8c01015 	stw	r3,64(sp)
  803e10:	003cfe06 	br	80320c <_dtoa_r+0x274>
  803e14:	018dc83a 	sub	r6,zero,r6
  803e18:	d9801115 	stw	r6,68(sp)
  803e1c:	d8000a15 	stw	zero,40(sp)
  803e20:	003cf306 	br	8031f0 <_dtoa_r+0x258>
  803e24:	d9000d17 	ldw	r4,52(sp)
  803e28:	08098500 	call	809850 <__floatsidf>
  803e2c:	880b883a 	mov	r5,r17
  803e30:	8009883a 	mov	r4,r16
  803e34:	180f883a 	mov	r7,r3
  803e38:	100d883a 	mov	r6,r2
  803e3c:	08096300 	call	809630 <__nedf2>
  803e40:	103ce126 	beq	r2,zero,8031c8 <_dtoa_r+0x230>
  803e44:	d9800d17 	ldw	r6,52(sp)
  803e48:	31bfffc4 	addi	r6,r6,-1
  803e4c:	d9800d15 	stw	r6,52(sp)
  803e50:	003cdd06 	br	8031c8 <_dtoa_r+0x230>
  803e54:	d9000717 	ldw	r4,28(sp)
  803e58:	900b883a 	mov	r5,r18
  803e5c:	080625c0 	call	80625c <__mcmp>
  803e60:	103e8d0e 	bge	r2,zero,803898 <_dtoa_r+0x900>
  803e64:	d9400717 	ldw	r5,28(sp)
  803e68:	d9001617 	ldw	r4,88(sp)
  803e6c:	01800284 	movi	r6,10
  803e70:	000f883a 	mov	r7,zero
  803e74:	0806db40 	call	806db4 <__multadd>
  803e78:	d9800d17 	ldw	r6,52(sp)
  803e7c:	d8800715 	stw	r2,28(sp)
  803e80:	31bfffc4 	addi	r6,r6,-1
  803e84:	d9800d15 	stw	r6,52(sp)
  803e88:	b001a71e 	bne	r22,zero,804528 <_dtoa_r+0x1590>
  803e8c:	d8800e17 	ldw	r2,56(sp)
  803e90:	d8800f15 	stw	r2,60(sp)
  803e94:	003e8006 	br	803898 <_dtoa_r+0x900>
  803e98:	90800417 	ldw	r2,16(r18)
  803e9c:	1085883a 	add	r2,r2,r2
  803ea0:	1085883a 	add	r2,r2,r2
  803ea4:	1485883a 	add	r2,r2,r18
  803ea8:	11000417 	ldw	r4,16(r2)
  803eac:	08061280 	call	806128 <__hi0bits>
  803eb0:	00c00804 	movi	r3,32
  803eb4:	1887c83a 	sub	r3,r3,r2
  803eb8:	003e5a06 	br	803824 <_dtoa_r+0x88c>
  803ebc:	d9400717 	ldw	r5,28(sp)
  803ec0:	d9801017 	ldw	r6,64(sp)
  803ec4:	d9001617 	ldw	r4,88(sp)
  803ec8:	0806eb40 	call	806eb4 <__pow5mult>
  803ecc:	d8800715 	stw	r2,28(sp)
  803ed0:	003e4306 	br	8037e0 <_dtoa_r+0x848>
  803ed4:	d9800f17 	ldw	r6,60(sp)
  803ed8:	d8800d17 	ldw	r2,52(sp)
  803edc:	d9800315 	stw	r6,12(sp)
  803ee0:	d8800415 	stw	r2,16(sp)
  803ee4:	d8c00b17 	ldw	r3,44(sp)
  803ee8:	1805003a 	cmpeq	r2,r3,zero
  803eec:	1000e21e 	bne	r2,zero,804278 <_dtoa_r+0x12e0>
  803ef0:	d9000317 	ldw	r4,12(sp)
  803ef4:	0005883a 	mov	r2,zero
  803ef8:	00cff834 	movhi	r3,16352
  803efc:	200c90fa 	slli	r6,r4,3
  803f00:	01002074 	movhi	r4,129
  803f04:	21380004 	addi	r4,r4,-8192
  803f08:	180b883a 	mov	r5,r3
  803f0c:	310d883a 	add	r6,r6,r4
  803f10:	327fff17 	ldw	r9,-4(r6)
  803f14:	323ffe17 	ldw	r8,-8(r6)
  803f18:	1009883a 	mov	r4,r2
  803f1c:	480f883a 	mov	r7,r9
  803f20:	400d883a 	mov	r6,r8
  803f24:	08093500 	call	809350 <__divdf3>
  803f28:	180b883a 	mov	r5,r3
  803f2c:	b00d883a 	mov	r6,r22
  803f30:	b80f883a 	mov	r7,r23
  803f34:	1009883a 	mov	r4,r2
  803f38:	0808e980 	call	808e98 <__subdf3>
  803f3c:	a80b883a 	mov	r5,r21
  803f40:	a009883a 	mov	r4,r20
  803f44:	d8c01915 	stw	r3,100(sp)
  803f48:	d8801815 	stw	r2,96(sp)
  803f4c:	08099480 	call	809948 <__fixdfsi>
  803f50:	1009883a 	mov	r4,r2
  803f54:	1027883a 	mov	r19,r2
  803f58:	08098500 	call	809850 <__floatsidf>
  803f5c:	a80b883a 	mov	r5,r21
  803f60:	a009883a 	mov	r4,r20
  803f64:	180f883a 	mov	r7,r3
  803f68:	100d883a 	mov	r6,r2
  803f6c:	0808e980 	call	808e98 <__subdf3>
  803f70:	d9801817 	ldw	r6,96(sp)
  803f74:	1823883a 	mov	r17,r3
  803f78:	d8801415 	stw	r2,80(sp)
  803f7c:	302d883a 	mov	r22,r6
  803f80:	d9800517 	ldw	r6,20(sp)
  803f84:	9cc00c04 	addi	r19,r19,48
  803f88:	dc401515 	stw	r17,84(sp)
  803f8c:	d8c01917 	ldw	r3,100(sp)
  803f90:	34c00005 	stb	r19,0(r6)
  803f94:	d8800517 	ldw	r2,20(sp)
  803f98:	d9401917 	ldw	r5,100(sp)
  803f9c:	d9801417 	ldw	r6,80(sp)
  803fa0:	b009883a 	mov	r4,r22
  803fa4:	880f883a 	mov	r7,r17
  803fa8:	182f883a 	mov	r23,r3
  803fac:	17000044 	addi	fp,r2,1
  803fb0:	08096b80 	call	8096b8 <__gtdf2>
  803fb4:	00804e16 	blt	zero,r2,8040f0 <_dtoa_r+0x1158>
  803fb8:	d9801417 	ldw	r6,80(sp)
  803fbc:	0005883a 	mov	r2,zero
  803fc0:	00cffc34 	movhi	r3,16368
  803fc4:	180b883a 	mov	r5,r3
  803fc8:	880f883a 	mov	r7,r17
  803fcc:	1009883a 	mov	r4,r2
  803fd0:	0808e980 	call	808e98 <__subdf3>
  803fd4:	d9401917 	ldw	r5,100(sp)
  803fd8:	180f883a 	mov	r7,r3
  803fdc:	b009883a 	mov	r4,r22
  803fe0:	100d883a 	mov	r6,r2
  803fe4:	08096b80 	call	8096b8 <__gtdf2>
  803fe8:	00bda216 	blt	zero,r2,803674 <_dtoa_r+0x6dc>
  803fec:	d8c00317 	ldw	r3,12(sp)
  803ff0:	00800044 	movi	r2,1
  803ff4:	10c01216 	blt	r2,r3,804040 <_dtoa_r+0x10a8>
  803ff8:	003d4506 	br	803510 <_dtoa_r+0x578>
  803ffc:	d9801417 	ldw	r6,80(sp)
  804000:	0005883a 	mov	r2,zero
  804004:	00cffc34 	movhi	r3,16368
  804008:	180b883a 	mov	r5,r3
  80400c:	880f883a 	mov	r7,r17
  804010:	1009883a 	mov	r4,r2
  804014:	0808e980 	call	808e98 <__subdf3>
  804018:	d9c01b17 	ldw	r7,108(sp)
  80401c:	180b883a 	mov	r5,r3
  804020:	1009883a 	mov	r4,r2
  804024:	b00d883a 	mov	r6,r22
  804028:	08097c80 	call	8097c8 <__ltdf2>
  80402c:	103d9116 	blt	r2,zero,803674 <_dtoa_r+0x6dc>
  804030:	d9800517 	ldw	r6,20(sp)
  804034:	d9000317 	ldw	r4,12(sp)
  804038:	3105883a 	add	r2,r6,r4
  80403c:	e0bd3426 	beq	fp,r2,803510 <_dtoa_r+0x578>
  804040:	04500934 	movhi	r17,16420
  804044:	0021883a 	mov	r16,zero
  804048:	b80b883a 	mov	r5,r23
  80404c:	b009883a 	mov	r4,r22
  804050:	800d883a 	mov	r6,r16
  804054:	880f883a 	mov	r7,r17
  804058:	0808f8c0 	call	808f8c <__muldf3>
  80405c:	d9401517 	ldw	r5,84(sp)
  804060:	d9001417 	ldw	r4,80(sp)
  804064:	880f883a 	mov	r7,r17
  804068:	000d883a 	mov	r6,zero
  80406c:	d8801a15 	stw	r2,104(sp)
  804070:	d8c01b15 	stw	r3,108(sp)
  804074:	0808f8c0 	call	808f8c <__muldf3>
  804078:	180b883a 	mov	r5,r3
  80407c:	1009883a 	mov	r4,r2
  804080:	1823883a 	mov	r17,r3
  804084:	1021883a 	mov	r16,r2
  804088:	08099480 	call	809948 <__fixdfsi>
  80408c:	1009883a 	mov	r4,r2
  804090:	102b883a 	mov	r21,r2
  804094:	08098500 	call	809850 <__floatsidf>
  804098:	880b883a 	mov	r5,r17
  80409c:	8009883a 	mov	r4,r16
  8040a0:	180f883a 	mov	r7,r3
  8040a4:	100d883a 	mov	r6,r2
  8040a8:	0808e980 	call	808e98 <__subdf3>
  8040ac:	1021883a 	mov	r16,r2
  8040b0:	d9001b17 	ldw	r4,108(sp)
  8040b4:	1823883a 	mov	r17,r3
  8040b8:	dc001415 	stw	r16,80(sp)
  8040bc:	ad400c04 	addi	r21,r21,48
  8040c0:	dc401515 	stw	r17,84(sp)
  8040c4:	d8801a17 	ldw	r2,104(sp)
  8040c8:	e5400005 	stb	r21,0(fp)
  8040cc:	202f883a 	mov	r23,r4
  8040d0:	d9c01b17 	ldw	r7,108(sp)
  8040d4:	d9001417 	ldw	r4,80(sp)
  8040d8:	880b883a 	mov	r5,r17
  8040dc:	100d883a 	mov	r6,r2
  8040e0:	102d883a 	mov	r22,r2
  8040e4:	e7000044 	addi	fp,fp,1
  8040e8:	08097c80 	call	8097c8 <__ltdf2>
  8040ec:	103fc30e 	bge	r2,zero,803ffc <_dtoa_r+0x1064>
  8040f0:	d9000417 	ldw	r4,16(sp)
  8040f4:	d9000d15 	stw	r4,52(sp)
  8040f8:	003d7106 	br	8036c0 <_dtoa_r+0x728>
  8040fc:	d9801717 	ldw	r6,92(sp)
  804100:	00800084 	movi	r2,2
  804104:	11bde60e 	bge	r2,r6,8038a0 <_dtoa_r+0x908>
  804108:	203cfb1e 	bne	r4,zero,8034f8 <_dtoa_r+0x560>
  80410c:	d9001617 	ldw	r4,88(sp)
  804110:	900b883a 	mov	r5,r18
  804114:	01800144 	movi	r6,5
  804118:	000f883a 	mov	r7,zero
  80411c:	0806db40 	call	806db4 <__multadd>
  804120:	d9000717 	ldw	r4,28(sp)
  804124:	100b883a 	mov	r5,r2
  804128:	1025883a 	mov	r18,r2
  80412c:	080625c0 	call	80625c <__mcmp>
  804130:	00bcf10e 	bge	zero,r2,8034f8 <_dtoa_r+0x560>
  804134:	d8c00d17 	ldw	r3,52(sp)
  804138:	d9000517 	ldw	r4,20(sp)
  80413c:	d8000615 	stw	zero,24(sp)
  804140:	18c00044 	addi	r3,r3,1
  804144:	d8c00d15 	stw	r3,52(sp)
  804148:	00800c44 	movi	r2,49
  80414c:	27000044 	addi	fp,r4,1
  804150:	20800005 	stb	r2,0(r4)
  804154:	003e8906 	br	803b7c <_dtoa_r+0xbe4>
  804158:	d8c00517 	ldw	r3,20(sp)
  80415c:	003bc206 	br	803068 <_dtoa_r+0xd0>
  804160:	01802074 	movhi	r6,129
  804164:	31b83204 	addi	r6,r6,-7992
  804168:	30c00917 	ldw	r3,36(r6)
  80416c:	30800817 	ldw	r2,32(r6)
  804170:	d9001217 	ldw	r4,72(sp)
  804174:	d9401317 	ldw	r5,76(sp)
  804178:	180f883a 	mov	r7,r3
  80417c:	100d883a 	mov	r6,r2
  804180:	08093500 	call	809350 <__divdf3>
  804184:	948003cc 	andi	r18,r18,15
  804188:	058000c4 	movi	r22,3
  80418c:	1029883a 	mov	r20,r2
  804190:	182b883a 	mov	r21,r3
  804194:	003c8906 	br	8033bc <_dtoa_r+0x424>
  804198:	d9001017 	ldw	r4,64(sp)
  80419c:	d9800917 	ldw	r6,36(sp)
  8041a0:	0025883a 	mov	r18,zero
  8041a4:	1105c83a 	sub	r2,r2,r4
  8041a8:	2089883a 	add	r4,r4,r2
  8041ac:	308d883a 	add	r6,r6,r2
  8041b0:	d9001015 	stw	r4,64(sp)
  8041b4:	d9800915 	stw	r6,36(sp)
  8041b8:	003e3206 	br	803a84 <_dtoa_r+0xaec>
  8041bc:	28800044 	addi	r2,r5,1
  8041c0:	27000044 	addi	fp,r4,1
  8041c4:	20800005 	stb	r2,0(r4)
  8041c8:	003e6c06 	br	803b7c <_dtoa_r+0xbe4>
  8041cc:	d8800f17 	ldw	r2,60(sp)
  8041d0:	00bce016 	blt	zero,r2,803554 <_dtoa_r+0x5bc>
  8041d4:	d9800f17 	ldw	r6,60(sp)
  8041d8:	303cc51e 	bne	r6,zero,8034f0 <_dtoa_r+0x558>
  8041dc:	0005883a 	mov	r2,zero
  8041e0:	00d00534 	movhi	r3,16404
  8041e4:	980b883a 	mov	r5,r19
  8041e8:	180f883a 	mov	r7,r3
  8041ec:	9009883a 	mov	r4,r18
  8041f0:	100d883a 	mov	r6,r2
  8041f4:	0808f8c0 	call	808f8c <__muldf3>
  8041f8:	180b883a 	mov	r5,r3
  8041fc:	a80f883a 	mov	r7,r21
  804200:	1009883a 	mov	r4,r2
  804204:	a00d883a 	mov	r6,r20
  804208:	08097400 	call	809740 <__gedf2>
  80420c:	103cb80e 	bge	r2,zero,8034f0 <_dtoa_r+0x558>
  804210:	0027883a 	mov	r19,zero
  804214:	0025883a 	mov	r18,zero
  804218:	003fc606 	br	804134 <_dtoa_r+0x119c>
  80421c:	99400117 	ldw	r5,4(r19)
  804220:	d9001617 	ldw	r4,88(sp)
  804224:	08066800 	call	806680 <_Balloc>
  804228:	99800417 	ldw	r6,16(r19)
  80422c:	11000304 	addi	r4,r2,12
  804230:	99400304 	addi	r5,r19,12
  804234:	318d883a 	add	r6,r6,r6
  804238:	318d883a 	add	r6,r6,r6
  80423c:	31800204 	addi	r6,r6,8
  804240:	1023883a 	mov	r17,r2
  804244:	08009ec0 	call	8009ec <memcpy>
  804248:	d9001617 	ldw	r4,88(sp)
  80424c:	880b883a 	mov	r5,r17
  804250:	01800044 	movi	r6,1
  804254:	0806a440 	call	806a44 <__lshift>
  804258:	100b883a 	mov	r5,r2
  80425c:	003d9c06 	br	8038d0 <_dtoa_r+0x938>
  804260:	00800e44 	movi	r2,57
  804264:	b8807026 	beq	r23,r2,804428 <_dtoa_r+0x1490>
  804268:	b8800044 	addi	r2,r23,1
  80426c:	b7000044 	addi	fp,r22,1
  804270:	b0800005 	stb	r2,0(r22)
  804274:	003e4106 	br	803b7c <_dtoa_r+0xbe4>
  804278:	d8800317 	ldw	r2,12(sp)
  80427c:	01802074 	movhi	r6,129
  804280:	31b80004 	addi	r6,r6,-8192
  804284:	b009883a 	mov	r4,r22
  804288:	100e90fa 	slli	r7,r2,3
  80428c:	b80b883a 	mov	r5,r23
  804290:	398f883a 	add	r7,r7,r6
  804294:	38bffe17 	ldw	r2,-8(r7)
  804298:	d9800517 	ldw	r6,20(sp)
  80429c:	38ffff17 	ldw	r3,-4(r7)
  8042a0:	37000044 	addi	fp,r6,1
  8042a4:	180f883a 	mov	r7,r3
  8042a8:	100d883a 	mov	r6,r2
  8042ac:	0808f8c0 	call	808f8c <__muldf3>
  8042b0:	a80b883a 	mov	r5,r21
  8042b4:	a009883a 	mov	r4,r20
  8042b8:	182f883a 	mov	r23,r3
  8042bc:	102d883a 	mov	r22,r2
  8042c0:	08099480 	call	809948 <__fixdfsi>
  8042c4:	1009883a 	mov	r4,r2
  8042c8:	1027883a 	mov	r19,r2
  8042cc:	08098500 	call	809850 <__floatsidf>
  8042d0:	a80b883a 	mov	r5,r21
  8042d4:	a009883a 	mov	r4,r20
  8042d8:	180f883a 	mov	r7,r3
  8042dc:	100d883a 	mov	r6,r2
  8042e0:	0808e980 	call	808e98 <__subdf3>
  8042e4:	180b883a 	mov	r5,r3
  8042e8:	d8c00517 	ldw	r3,20(sp)
  8042ec:	9cc00c04 	addi	r19,r19,48
  8042f0:	1009883a 	mov	r4,r2
  8042f4:	1cc00005 	stb	r19,0(r3)
  8042f8:	2021883a 	mov	r16,r4
  8042fc:	d9000317 	ldw	r4,12(sp)
  804300:	00800044 	movi	r2,1
  804304:	2823883a 	mov	r17,r5
  804308:	20802226 	beq	r4,r2,804394 <_dtoa_r+0x13fc>
  80430c:	1029883a 	mov	r20,r2
  804310:	0005883a 	mov	r2,zero
  804314:	00d00934 	movhi	r3,16420
  804318:	180f883a 	mov	r7,r3
  80431c:	100d883a 	mov	r6,r2
  804320:	880b883a 	mov	r5,r17
  804324:	8009883a 	mov	r4,r16
  804328:	0808f8c0 	call	808f8c <__muldf3>
  80432c:	180b883a 	mov	r5,r3
  804330:	1009883a 	mov	r4,r2
  804334:	1823883a 	mov	r17,r3
  804338:	1021883a 	mov	r16,r2
  80433c:	08099480 	call	809948 <__fixdfsi>
  804340:	1009883a 	mov	r4,r2
  804344:	102b883a 	mov	r21,r2
  804348:	08098500 	call	809850 <__floatsidf>
  80434c:	880b883a 	mov	r5,r17
  804350:	8009883a 	mov	r4,r16
  804354:	180f883a 	mov	r7,r3
  804358:	100d883a 	mov	r6,r2
  80435c:	0808e980 	call	808e98 <__subdf3>
  804360:	180b883a 	mov	r5,r3
  804364:	d8c00517 	ldw	r3,20(sp)
  804368:	1009883a 	mov	r4,r2
  80436c:	ad400c04 	addi	r21,r21,48
  804370:	1d05883a 	add	r2,r3,r20
  804374:	15400005 	stb	r21,0(r2)
  804378:	2021883a 	mov	r16,r4
  80437c:	d9000317 	ldw	r4,12(sp)
  804380:	a5000044 	addi	r20,r20,1
  804384:	2823883a 	mov	r17,r5
  804388:	a13fe11e 	bne	r20,r4,804310 <_dtoa_r+0x1378>
  80438c:	e505883a 	add	r2,fp,r20
  804390:	173fffc4 	addi	fp,r2,-1
  804394:	0025883a 	mov	r18,zero
  804398:	04cff834 	movhi	r19,16352
  80439c:	b009883a 	mov	r4,r22
  8043a0:	b80b883a 	mov	r5,r23
  8043a4:	900d883a 	mov	r6,r18
  8043a8:	980f883a 	mov	r7,r19
  8043ac:	0808f180 	call	808f18 <__adddf3>
  8043b0:	180b883a 	mov	r5,r3
  8043b4:	1009883a 	mov	r4,r2
  8043b8:	800d883a 	mov	r6,r16
  8043bc:	880f883a 	mov	r7,r17
  8043c0:	08097c80 	call	8097c8 <__ltdf2>
  8043c4:	103cab16 	blt	r2,zero,803674 <_dtoa_r+0x6dc>
  8043c8:	0009883a 	mov	r4,zero
  8043cc:	980b883a 	mov	r5,r19
  8043d0:	b80f883a 	mov	r7,r23
  8043d4:	b00d883a 	mov	r6,r22
  8043d8:	0808e980 	call	808e98 <__subdf3>
  8043dc:	180b883a 	mov	r5,r3
  8043e0:	880f883a 	mov	r7,r17
  8043e4:	1009883a 	mov	r4,r2
  8043e8:	800d883a 	mov	r6,r16
  8043ec:	08096b80 	call	8096b8 <__gtdf2>
  8043f0:	00bc470e 	bge	zero,r2,803510 <_dtoa_r+0x578>
  8043f4:	00c00c04 	movi	r3,48
  8043f8:	e73fffc4 	addi	fp,fp,-1
  8043fc:	e0800007 	ldb	r2,0(fp)
  804400:	10fffd26 	beq	r2,r3,8043f8 <_dtoa_r+0x1460>
  804404:	d9800417 	ldw	r6,16(sp)
  804408:	e7000044 	addi	fp,fp,1
  80440c:	d9800d15 	stw	r6,52(sp)
  804410:	003cab06 	br	8036c0 <_dtoa_r+0x728>
  804414:	d8c00f17 	ldw	r3,60(sp)
  804418:	d9001117 	ldw	r4,68(sp)
  80441c:	20e1c83a 	sub	r16,r4,r3
  804420:	0007883a 	mov	r3,zero
  804424:	003d9b06 	br	803a94 <_dtoa_r+0xafc>
  804428:	00800e44 	movi	r2,57
  80442c:	b0800005 	stb	r2,0(r22)
  804430:	b5800044 	addi	r22,r22,1
  804434:	003dc106 	br	803b3c <_dtoa_r+0xba4>
  804438:	05800084 	movi	r22,2
  80443c:	003bf706 	br	80341c <_dtoa_r+0x484>
  804440:	d9000f17 	ldw	r4,60(sp)
  804444:	013c000e 	bge	zero,r4,803448 <_dtoa_r+0x4b0>
  804448:	d9800e17 	ldw	r6,56(sp)
  80444c:	01bc300e 	bge	zero,r6,803510 <_dtoa_r+0x578>
  804450:	0005883a 	mov	r2,zero
  804454:	00d00934 	movhi	r3,16420
  804458:	a80b883a 	mov	r5,r21
  80445c:	180f883a 	mov	r7,r3
  804460:	a009883a 	mov	r4,r20
  804464:	100d883a 	mov	r6,r2
  804468:	0808f8c0 	call	808f8c <__muldf3>
  80446c:	b1000044 	addi	r4,r22,1
  804470:	1021883a 	mov	r16,r2
  804474:	1823883a 	mov	r17,r3
  804478:	08098500 	call	809850 <__floatsidf>
  80447c:	880b883a 	mov	r5,r17
  804480:	8009883a 	mov	r4,r16
  804484:	180f883a 	mov	r7,r3
  804488:	100d883a 	mov	r6,r2
  80448c:	0808f8c0 	call	808f8c <__muldf3>
  804490:	0011883a 	mov	r8,zero
  804494:	02500734 	movhi	r9,16412
  804498:	180b883a 	mov	r5,r3
  80449c:	480f883a 	mov	r7,r9
  8044a0:	1009883a 	mov	r4,r2
  8044a4:	400d883a 	mov	r6,r8
  8044a8:	0808f180 	call	808f18 <__adddf3>
  8044ac:	102d883a 	mov	r22,r2
  8044b0:	00bf3034 	movhi	r2,64704
  8044b4:	10ef883a 	add	r23,r2,r3
  8044b8:	d8800d17 	ldw	r2,52(sp)
  8044bc:	d8c00e17 	ldw	r3,56(sp)
  8044c0:	8029883a 	mov	r20,r16
  8044c4:	10bfffc4 	addi	r2,r2,-1
  8044c8:	882b883a 	mov	r21,r17
  8044cc:	d8800415 	stw	r2,16(sp)
  8044d0:	d8c00315 	stw	r3,12(sp)
  8044d4:	003e8306 	br	803ee4 <_dtoa_r+0xf4c>
  8044d8:	d8800117 	ldw	r2,4(sp)
  8044dc:	dc001117 	ldw	r16,68(sp)
  8044e0:	dc801017 	ldw	r18,64(sp)
  8044e4:	00c00d84 	movi	r3,54
  8044e8:	1887c83a 	sub	r3,r3,r2
  8044ec:	003d6906 	br	803a94 <_dtoa_r+0xafc>
  8044f0:	01800044 	movi	r6,1
  8044f4:	3021883a 	mov	r16,r6
  8044f8:	d9800f15 	stw	r6,60(sp)
  8044fc:	d9802615 	stw	r6,152(sp)
  804500:	d9800e15 	stw	r6,56(sp)
  804504:	003b9306 	br	803354 <_dtoa_r+0x3bc>
  804508:	b021883a 	mov	r16,r22
  80450c:	dd800f15 	stw	r22,60(sp)
  804510:	003b9006 	br	803354 <_dtoa_r+0x3bc>
  804514:	103e221e 	bne	r2,zero,803da0 <_dtoa_r+0xe08>
  804518:	b880004c 	andi	r2,r23,1
  80451c:	1005003a 	cmpeq	r2,r2,zero
  804520:	103e1f1e 	bne	r2,zero,803da0 <_dtoa_r+0xe08>
  804524:	003e1b06 	br	803d94 <_dtoa_r+0xdfc>
  804528:	d9001617 	ldw	r4,88(sp)
  80452c:	980b883a 	mov	r5,r19
  804530:	01800284 	movi	r6,10
  804534:	000f883a 	mov	r7,zero
  804538:	0806db40 	call	806db4 <__multadd>
  80453c:	d8c00e17 	ldw	r3,56(sp)
  804540:	1027883a 	mov	r19,r2
  804544:	d8c00f15 	stw	r3,60(sp)
  804548:	003cd306 	br	803898 <_dtoa_r+0x900>

0080454c <_fflush_r>:
  80454c:	defffb04 	addi	sp,sp,-20
  804550:	dcc00315 	stw	r19,12(sp)
  804554:	dc800215 	stw	r18,8(sp)
  804558:	dfc00415 	stw	ra,16(sp)
  80455c:	dc400115 	stw	r17,4(sp)
  804560:	dc000015 	stw	r16,0(sp)
  804564:	2027883a 	mov	r19,r4
  804568:	2825883a 	mov	r18,r5
  80456c:	20000226 	beq	r4,zero,804578 <_fflush_r+0x2c>
  804570:	20800e17 	ldw	r2,56(r4)
  804574:	10005626 	beq	r2,zero,8046d0 <_fflush_r+0x184>
  804578:	9100030b 	ldhu	r4,12(r18)
  80457c:	20ffffcc 	andi	r3,r4,65535
  804580:	18e0001c 	xori	r3,r3,32768
  804584:	18e00004 	addi	r3,r3,-32768
  804588:	1880020c 	andi	r2,r3,8
  80458c:	1000261e 	bne	r2,zero,804628 <_fflush_r+0xdc>
  804590:	90c00117 	ldw	r3,4(r18)
  804594:	20820014 	ori	r2,r4,2048
  804598:	9080030d 	sth	r2,12(r18)
  80459c:	1009883a 	mov	r4,r2
  8045a0:	00c0400e 	bge	zero,r3,8046a4 <_fflush_r+0x158>
  8045a4:	92000a17 	ldw	r8,40(r18)
  8045a8:	40004026 	beq	r8,zero,8046ac <_fflush_r+0x160>
  8045ac:	2084000c 	andi	r2,r4,4096
  8045b0:	10005326 	beq	r2,zero,804700 <_fflush_r+0x1b4>
  8045b4:	94001417 	ldw	r16,80(r18)
  8045b8:	9080030b 	ldhu	r2,12(r18)
  8045bc:	1080010c 	andi	r2,r2,4
  8045c0:	1000481e 	bne	r2,zero,8046e4 <_fflush_r+0x198>
  8045c4:	91400717 	ldw	r5,28(r18)
  8045c8:	9809883a 	mov	r4,r19
  8045cc:	800d883a 	mov	r6,r16
  8045d0:	000f883a 	mov	r7,zero
  8045d4:	403ee83a 	callr	r8
  8045d8:	8080261e 	bne	r16,r2,804674 <_fflush_r+0x128>
  8045dc:	9080030b 	ldhu	r2,12(r18)
  8045e0:	91000417 	ldw	r4,16(r18)
  8045e4:	90000115 	stw	zero,4(r18)
  8045e8:	10bdffcc 	andi	r2,r2,63487
  8045ec:	10ffffcc 	andi	r3,r2,65535
  8045f0:	18c4000c 	andi	r3,r3,4096
  8045f4:	9080030d 	sth	r2,12(r18)
  8045f8:	91000015 	stw	r4,0(r18)
  8045fc:	18002b26 	beq	r3,zero,8046ac <_fflush_r+0x160>
  804600:	0007883a 	mov	r3,zero
  804604:	1805883a 	mov	r2,r3
  804608:	94001415 	stw	r16,80(r18)
  80460c:	dfc00417 	ldw	ra,16(sp)
  804610:	dcc00317 	ldw	r19,12(sp)
  804614:	dc800217 	ldw	r18,8(sp)
  804618:	dc400117 	ldw	r17,4(sp)
  80461c:	dc000017 	ldw	r16,0(sp)
  804620:	dec00504 	addi	sp,sp,20
  804624:	f800283a 	ret
  804628:	94400417 	ldw	r17,16(r18)
  80462c:	88001f26 	beq	r17,zero,8046ac <_fflush_r+0x160>
  804630:	90800017 	ldw	r2,0(r18)
  804634:	18c000cc 	andi	r3,r3,3
  804638:	94400015 	stw	r17,0(r18)
  80463c:	1461c83a 	sub	r16,r2,r17
  804640:	18002526 	beq	r3,zero,8046d8 <_fflush_r+0x18c>
  804644:	0005883a 	mov	r2,zero
  804648:	90800215 	stw	r2,8(r18)
  80464c:	0400170e 	bge	zero,r16,8046ac <_fflush_r+0x160>
  804650:	90c00917 	ldw	r3,36(r18)
  804654:	91400717 	ldw	r5,28(r18)
  804658:	880d883a 	mov	r6,r17
  80465c:	800f883a 	mov	r7,r16
  804660:	9809883a 	mov	r4,r19
  804664:	183ee83a 	callr	r3
  804668:	88a3883a 	add	r17,r17,r2
  80466c:	80a1c83a 	sub	r16,r16,r2
  804670:	00bff616 	blt	zero,r2,80464c <_fflush_r+0x100>
  804674:	9080030b 	ldhu	r2,12(r18)
  804678:	00ffffc4 	movi	r3,-1
  80467c:	10801014 	ori	r2,r2,64
  804680:	9080030d 	sth	r2,12(r18)
  804684:	1805883a 	mov	r2,r3
  804688:	dfc00417 	ldw	ra,16(sp)
  80468c:	dcc00317 	ldw	r19,12(sp)
  804690:	dc800217 	ldw	r18,8(sp)
  804694:	dc400117 	ldw	r17,4(sp)
  804698:	dc000017 	ldw	r16,0(sp)
  80469c:	dec00504 	addi	sp,sp,20
  8046a0:	f800283a 	ret
  8046a4:	90800f17 	ldw	r2,60(r18)
  8046a8:	00bfbe16 	blt	zero,r2,8045a4 <_fflush_r+0x58>
  8046ac:	0007883a 	mov	r3,zero
  8046b0:	1805883a 	mov	r2,r3
  8046b4:	dfc00417 	ldw	ra,16(sp)
  8046b8:	dcc00317 	ldw	r19,12(sp)
  8046bc:	dc800217 	ldw	r18,8(sp)
  8046c0:	dc400117 	ldw	r17,4(sp)
  8046c4:	dc000017 	ldw	r16,0(sp)
  8046c8:	dec00504 	addi	sp,sp,20
  8046cc:	f800283a 	ret
  8046d0:	08047e40 	call	8047e4 <__sinit>
  8046d4:	003fa806 	br	804578 <_fflush_r+0x2c>
  8046d8:	90800517 	ldw	r2,20(r18)
  8046dc:	90800215 	stw	r2,8(r18)
  8046e0:	003fda06 	br	80464c <_fflush_r+0x100>
  8046e4:	90800117 	ldw	r2,4(r18)
  8046e8:	90c00c17 	ldw	r3,48(r18)
  8046ec:	80a1c83a 	sub	r16,r16,r2
  8046f0:	183fb426 	beq	r3,zero,8045c4 <_fflush_r+0x78>
  8046f4:	90800f17 	ldw	r2,60(r18)
  8046f8:	80a1c83a 	sub	r16,r16,r2
  8046fc:	003fb106 	br	8045c4 <_fflush_r+0x78>
  804700:	91400717 	ldw	r5,28(r18)
  804704:	9809883a 	mov	r4,r19
  804708:	000d883a 	mov	r6,zero
  80470c:	01c00044 	movi	r7,1
  804710:	403ee83a 	callr	r8
  804714:	1021883a 	mov	r16,r2
  804718:	00bfffc4 	movi	r2,-1
  80471c:	80800226 	beq	r16,r2,804728 <_fflush_r+0x1dc>
  804720:	92000a17 	ldw	r8,40(r18)
  804724:	003fa406 	br	8045b8 <_fflush_r+0x6c>
  804728:	98c00017 	ldw	r3,0(r19)
  80472c:	00800744 	movi	r2,29
  804730:	18bfde26 	beq	r3,r2,8046ac <_fflush_r+0x160>
  804734:	9080030b 	ldhu	r2,12(r18)
  804738:	8007883a 	mov	r3,r16
  80473c:	10801014 	ori	r2,r2,64
  804740:	9080030d 	sth	r2,12(r18)
  804744:	003fcf06 	br	804684 <_fflush_r+0x138>

00804748 <fflush>:
  804748:	01402034 	movhi	r5,128
  80474c:	29515304 	addi	r5,r5,17740
  804750:	2007883a 	mov	r3,r4
  804754:	20000526 	beq	r4,zero,80476c <fflush+0x24>
  804758:	00802074 	movhi	r2,129
  80475c:	10801404 	addi	r2,r2,80
  804760:	11000017 	ldw	r4,0(r2)
  804764:	180b883a 	mov	r5,r3
  804768:	080454c1 	jmpi	80454c <_fflush_r>
  80476c:	00802074 	movhi	r2,129
  804770:	10801504 	addi	r2,r2,84
  804774:	11000017 	ldw	r4,0(r2)
  804778:	08053181 	jmpi	805318 <_fwalk_reent>

0080477c <std>:
  80477c:	00802034 	movhi	r2,128
  804780:	109df204 	addi	r2,r2,30664
  804784:	20800b15 	stw	r2,44(r4)
  804788:	00802034 	movhi	r2,128
  80478c:	109e2d04 	addi	r2,r2,30900
  804790:	20800815 	stw	r2,32(r4)
  804794:	00c02034 	movhi	r3,128
  804798:	18de0e04 	addi	r3,r3,30776
  80479c:	00802034 	movhi	r2,128
  8047a0:	109df404 	addi	r2,r2,30672
  8047a4:	2140030d 	sth	r5,12(r4)
  8047a8:	2180038d 	sth	r6,14(r4)
  8047ac:	20c00915 	stw	r3,36(r4)
  8047b0:	20800a15 	stw	r2,40(r4)
  8047b4:	20000015 	stw	zero,0(r4)
  8047b8:	20000115 	stw	zero,4(r4)
  8047bc:	20000215 	stw	zero,8(r4)
  8047c0:	20000415 	stw	zero,16(r4)
  8047c4:	20000515 	stw	zero,20(r4)
  8047c8:	20000615 	stw	zero,24(r4)
  8047cc:	21000715 	stw	r4,28(r4)
  8047d0:	f800283a 	ret

008047d4 <__sfp_lock_acquire>:
  8047d4:	f800283a 	ret

008047d8 <__sfp_lock_release>:
  8047d8:	f800283a 	ret

008047dc <__sinit_lock_acquire>:
  8047dc:	f800283a 	ret

008047e0 <__sinit_lock_release>:
  8047e0:	f800283a 	ret

008047e4 <__sinit>:
  8047e4:	20800e17 	ldw	r2,56(r4)
  8047e8:	defffd04 	addi	sp,sp,-12
  8047ec:	dc400115 	stw	r17,4(sp)
  8047f0:	dc000015 	stw	r16,0(sp)
  8047f4:	dfc00215 	stw	ra,8(sp)
  8047f8:	04400044 	movi	r17,1
  8047fc:	01400104 	movi	r5,4
  804800:	000d883a 	mov	r6,zero
  804804:	2021883a 	mov	r16,r4
  804808:	2200bb04 	addi	r8,r4,748
  80480c:	200f883a 	mov	r7,r4
  804810:	10000526 	beq	r2,zero,804828 <__sinit+0x44>
  804814:	dfc00217 	ldw	ra,8(sp)
  804818:	dc400117 	ldw	r17,4(sp)
  80481c:	dc000017 	ldw	r16,0(sp)
  804820:	dec00304 	addi	sp,sp,12
  804824:	f800283a 	ret
  804828:	21000117 	ldw	r4,4(r4)
  80482c:	00802034 	movhi	r2,128
  804830:	10923204 	addi	r2,r2,18632
  804834:	00c000c4 	movi	r3,3
  804838:	80800f15 	stw	r2,60(r16)
  80483c:	80c0b915 	stw	r3,740(r16)
  804840:	8200ba15 	stw	r8,744(r16)
  804844:	84400e15 	stw	r17,56(r16)
  804848:	8000b815 	stw	zero,736(r16)
  80484c:	080477c0 	call	80477c <std>
  804850:	81000217 	ldw	r4,8(r16)
  804854:	880d883a 	mov	r6,r17
  804858:	800f883a 	mov	r7,r16
  80485c:	01400284 	movi	r5,10
  804860:	080477c0 	call	80477c <std>
  804864:	81000317 	ldw	r4,12(r16)
  804868:	800f883a 	mov	r7,r16
  80486c:	01400484 	movi	r5,18
  804870:	01800084 	movi	r6,2
  804874:	dfc00217 	ldw	ra,8(sp)
  804878:	dc400117 	ldw	r17,4(sp)
  80487c:	dc000017 	ldw	r16,0(sp)
  804880:	dec00304 	addi	sp,sp,12
  804884:	080477c1 	jmpi	80477c <std>

00804888 <__fp_lock>:
  804888:	0005883a 	mov	r2,zero
  80488c:	f800283a 	ret

00804890 <__fp_unlock>:
  804890:	0005883a 	mov	r2,zero
  804894:	f800283a 	ret

00804898 <__fp_unlock_all>:
  804898:	00802074 	movhi	r2,129
  80489c:	10801404 	addi	r2,r2,80
  8048a0:	11000017 	ldw	r4,0(r2)
  8048a4:	01402034 	movhi	r5,128
  8048a8:	29522404 	addi	r5,r5,18576
  8048ac:	08053e01 	jmpi	8053e0 <_fwalk>

008048b0 <__fp_lock_all>:
  8048b0:	00802074 	movhi	r2,129
  8048b4:	10801404 	addi	r2,r2,80
  8048b8:	11000017 	ldw	r4,0(r2)
  8048bc:	01402034 	movhi	r5,128
  8048c0:	29522204 	addi	r5,r5,18568
  8048c4:	08053e01 	jmpi	8053e0 <_fwalk>

008048c8 <_cleanup_r>:
  8048c8:	01402034 	movhi	r5,128
  8048cc:	295f1f04 	addi	r5,r5,31868
  8048d0:	08053e01 	jmpi	8053e0 <_fwalk>

008048d4 <_cleanup>:
  8048d4:	00802074 	movhi	r2,129
  8048d8:	10801504 	addi	r2,r2,84
  8048dc:	11000017 	ldw	r4,0(r2)
  8048e0:	08048c81 	jmpi	8048c8 <_cleanup_r>

008048e4 <__sfmoreglue>:
  8048e4:	defffc04 	addi	sp,sp,-16
  8048e8:	dc400115 	stw	r17,4(sp)
  8048ec:	2c401724 	muli	r17,r5,92
  8048f0:	dc800215 	stw	r18,8(sp)
  8048f4:	2825883a 	mov	r18,r5
  8048f8:	89400304 	addi	r5,r17,12
  8048fc:	dc000015 	stw	r16,0(sp)
  804900:	dfc00315 	stw	ra,12(sp)
  804904:	08057640 	call	805764 <_malloc_r>
  804908:	0021883a 	mov	r16,zero
  80490c:	880d883a 	mov	r6,r17
  804910:	000b883a 	mov	r5,zero
  804914:	10000626 	beq	r2,zero,804930 <__sfmoreglue+0x4c>
  804918:	11000304 	addi	r4,r2,12
  80491c:	14800115 	stw	r18,4(r2)
  804920:	10000015 	stw	zero,0(r2)
  804924:	11000215 	stw	r4,8(r2)
  804928:	1021883a 	mov	r16,r2
  80492c:	08060680 	call	806068 <memset>
  804930:	8005883a 	mov	r2,r16
  804934:	dfc00317 	ldw	ra,12(sp)
  804938:	dc800217 	ldw	r18,8(sp)
  80493c:	dc400117 	ldw	r17,4(sp)
  804940:	dc000017 	ldw	r16,0(sp)
  804944:	dec00404 	addi	sp,sp,16
  804948:	f800283a 	ret

0080494c <__sfp>:
  80494c:	defffd04 	addi	sp,sp,-12
  804950:	00802074 	movhi	r2,129
  804954:	10801504 	addi	r2,r2,84
  804958:	dc000015 	stw	r16,0(sp)
  80495c:	14000017 	ldw	r16,0(r2)
  804960:	dc400115 	stw	r17,4(sp)
  804964:	dfc00215 	stw	ra,8(sp)
  804968:	80800e17 	ldw	r2,56(r16)
  80496c:	2023883a 	mov	r17,r4
  804970:	10002626 	beq	r2,zero,804a0c <__sfp+0xc0>
  804974:	8400b804 	addi	r16,r16,736
  804978:	80800117 	ldw	r2,4(r16)
  80497c:	81000217 	ldw	r4,8(r16)
  804980:	10ffffc4 	addi	r3,r2,-1
  804984:	18000916 	blt	r3,zero,8049ac <__sfp+0x60>
  804988:	2080030f 	ldh	r2,12(r4)
  80498c:	10000b26 	beq	r2,zero,8049bc <__sfp+0x70>
  804990:	017fffc4 	movi	r5,-1
  804994:	00000206 	br	8049a0 <__sfp+0x54>
  804998:	2080030f 	ldh	r2,12(r4)
  80499c:	10000726 	beq	r2,zero,8049bc <__sfp+0x70>
  8049a0:	18ffffc4 	addi	r3,r3,-1
  8049a4:	21001704 	addi	r4,r4,92
  8049a8:	197ffb1e 	bne	r3,r5,804998 <__sfp+0x4c>
  8049ac:	80800017 	ldw	r2,0(r16)
  8049b0:	10001926 	beq	r2,zero,804a18 <__sfp+0xcc>
  8049b4:	1021883a 	mov	r16,r2
  8049b8:	003fef06 	br	804978 <__sfp+0x2c>
  8049bc:	00bfffc4 	movi	r2,-1
  8049c0:	00c00044 	movi	r3,1
  8049c4:	2080038d 	sth	r2,14(r4)
  8049c8:	20c0030d 	sth	r3,12(r4)
  8049cc:	20000015 	stw	zero,0(r4)
  8049d0:	20000215 	stw	zero,8(r4)
  8049d4:	20000115 	stw	zero,4(r4)
  8049d8:	20000415 	stw	zero,16(r4)
  8049dc:	20000515 	stw	zero,20(r4)
  8049e0:	20000615 	stw	zero,24(r4)
  8049e4:	20000c15 	stw	zero,48(r4)
  8049e8:	20000d15 	stw	zero,52(r4)
  8049ec:	20001115 	stw	zero,68(r4)
  8049f0:	20001215 	stw	zero,72(r4)
  8049f4:	2005883a 	mov	r2,r4
  8049f8:	dfc00217 	ldw	ra,8(sp)
  8049fc:	dc400117 	ldw	r17,4(sp)
  804a00:	dc000017 	ldw	r16,0(sp)
  804a04:	dec00304 	addi	sp,sp,12
  804a08:	f800283a 	ret
  804a0c:	8009883a 	mov	r4,r16
  804a10:	08047e40 	call	8047e4 <__sinit>
  804a14:	003fd706 	br	804974 <__sfp+0x28>
  804a18:	8809883a 	mov	r4,r17
  804a1c:	01400104 	movi	r5,4
  804a20:	08048e40 	call	8048e4 <__sfmoreglue>
  804a24:	80800015 	stw	r2,0(r16)
  804a28:	103fe21e 	bne	r2,zero,8049b4 <__sfp+0x68>
  804a2c:	00800304 	movi	r2,12
  804a30:	0009883a 	mov	r4,zero
  804a34:	88800015 	stw	r2,0(r17)
  804a38:	003fee06 	br	8049f4 <__sfp+0xa8>

00804a3c <_malloc_trim_r>:
  804a3c:	defffb04 	addi	sp,sp,-20
  804a40:	dcc00315 	stw	r19,12(sp)
  804a44:	04c02074 	movhi	r19,129
  804a48:	9cfa4804 	addi	r19,r19,-5856
  804a4c:	dc800215 	stw	r18,8(sp)
  804a50:	dc400115 	stw	r17,4(sp)
  804a54:	dc000015 	stw	r16,0(sp)
  804a58:	2823883a 	mov	r17,r5
  804a5c:	2025883a 	mov	r18,r4
  804a60:	dfc00415 	stw	ra,16(sp)
  804a64:	080a9e80 	call	80a9e8 <__malloc_lock>
  804a68:	98800217 	ldw	r2,8(r19)
  804a6c:	9009883a 	mov	r4,r18
  804a70:	000b883a 	mov	r5,zero
  804a74:	10c00117 	ldw	r3,4(r2)
  804a78:	00bfff04 	movi	r2,-4
  804a7c:	18a0703a 	and	r16,r3,r2
  804a80:	8463c83a 	sub	r17,r16,r17
  804a84:	8c43fbc4 	addi	r17,r17,4079
  804a88:	8822d33a 	srli	r17,r17,12
  804a8c:	0083ffc4 	movi	r2,4095
  804a90:	8c7fffc4 	addi	r17,r17,-1
  804a94:	8822933a 	slli	r17,r17,12
  804a98:	1440060e 	bge	r2,r17,804ab4 <_malloc_trim_r+0x78>
  804a9c:	08077580 	call	807758 <_sbrk_r>
  804aa0:	98c00217 	ldw	r3,8(r19)
  804aa4:	9009883a 	mov	r4,r18
  804aa8:	044bc83a 	sub	r5,zero,r17
  804aac:	80c7883a 	add	r3,r16,r3
  804ab0:	10c00926 	beq	r2,r3,804ad8 <_malloc_trim_r+0x9c>
  804ab4:	080aa080 	call	80aa08 <__malloc_unlock>
  804ab8:	0005883a 	mov	r2,zero
  804abc:	dfc00417 	ldw	ra,16(sp)
  804ac0:	dcc00317 	ldw	r19,12(sp)
  804ac4:	dc800217 	ldw	r18,8(sp)
  804ac8:	dc400117 	ldw	r17,4(sp)
  804acc:	dc000017 	ldw	r16,0(sp)
  804ad0:	dec00504 	addi	sp,sp,20
  804ad4:	f800283a 	ret
  804ad8:	9009883a 	mov	r4,r18
  804adc:	08077580 	call	807758 <_sbrk_r>
  804ae0:	844dc83a 	sub	r6,r16,r17
  804ae4:	00ffffc4 	movi	r3,-1
  804ae8:	9009883a 	mov	r4,r18
  804aec:	000b883a 	mov	r5,zero
  804af0:	01c02074 	movhi	r7,129
  804af4:	39c71d04 	addi	r7,r7,7284
  804af8:	31800054 	ori	r6,r6,1
  804afc:	10c00926 	beq	r2,r3,804b24 <_malloc_trim_r+0xe8>
  804b00:	38800017 	ldw	r2,0(r7)
  804b04:	98c00217 	ldw	r3,8(r19)
  804b08:	9009883a 	mov	r4,r18
  804b0c:	1445c83a 	sub	r2,r2,r17
  804b10:	38800015 	stw	r2,0(r7)
  804b14:	19800115 	stw	r6,4(r3)
  804b18:	080aa080 	call	80aa08 <__malloc_unlock>
  804b1c:	00800044 	movi	r2,1
  804b20:	003fe606 	br	804abc <_malloc_trim_r+0x80>
  804b24:	08077580 	call	807758 <_sbrk_r>
  804b28:	99800217 	ldw	r6,8(r19)
  804b2c:	100f883a 	mov	r7,r2
  804b30:	9009883a 	mov	r4,r18
  804b34:	1187c83a 	sub	r3,r2,r6
  804b38:	008003c4 	movi	r2,15
  804b3c:	19400054 	ori	r5,r3,1
  804b40:	10ffdc0e 	bge	r2,r3,804ab4 <_malloc_trim_r+0x78>
  804b44:	00802074 	movhi	r2,129
  804b48:	10801904 	addi	r2,r2,100
  804b4c:	10c00017 	ldw	r3,0(r2)
  804b50:	00802074 	movhi	r2,129
  804b54:	10871d04 	addi	r2,r2,7284
  804b58:	31400115 	stw	r5,4(r6)
  804b5c:	38c7c83a 	sub	r3,r7,r3
  804b60:	10c00015 	stw	r3,0(r2)
  804b64:	003fd306 	br	804ab4 <_malloc_trim_r+0x78>

00804b68 <_free_r>:
  804b68:	defffd04 	addi	sp,sp,-12
  804b6c:	dc400115 	stw	r17,4(sp)
  804b70:	dc000015 	stw	r16,0(sp)
  804b74:	dfc00215 	stw	ra,8(sp)
  804b78:	2821883a 	mov	r16,r5
  804b7c:	2023883a 	mov	r17,r4
  804b80:	28005a26 	beq	r5,zero,804cec <_free_r+0x184>
  804b84:	080a9e80 	call	80a9e8 <__malloc_lock>
  804b88:	823ffe04 	addi	r8,r16,-8
  804b8c:	41400117 	ldw	r5,4(r8)
  804b90:	00bfff84 	movi	r2,-2
  804b94:	02802074 	movhi	r10,129
  804b98:	52ba4804 	addi	r10,r10,-5856
  804b9c:	288e703a 	and	r7,r5,r2
  804ba0:	41cd883a 	add	r6,r8,r7
  804ba4:	30c00117 	ldw	r3,4(r6)
  804ba8:	51000217 	ldw	r4,8(r10)
  804bac:	00bfff04 	movi	r2,-4
  804bb0:	1892703a 	and	r9,r3,r2
  804bb4:	5017883a 	mov	r11,r10
  804bb8:	31006726 	beq	r6,r4,804d58 <_free_r+0x1f0>
  804bbc:	2880004c 	andi	r2,r5,1
  804bc0:	1005003a 	cmpeq	r2,r2,zero
  804bc4:	32400115 	stw	r9,4(r6)
  804bc8:	10001a1e 	bne	r2,zero,804c34 <_free_r+0xcc>
  804bcc:	000b883a 	mov	r5,zero
  804bd0:	3247883a 	add	r3,r6,r9
  804bd4:	18800117 	ldw	r2,4(r3)
  804bd8:	1080004c 	andi	r2,r2,1
  804bdc:	1000231e 	bne	r2,zero,804c6c <_free_r+0x104>
  804be0:	280ac03a 	cmpne	r5,r5,zero
  804be4:	3a4f883a 	add	r7,r7,r9
  804be8:	2800451e 	bne	r5,zero,804d00 <_free_r+0x198>
  804bec:	31000217 	ldw	r4,8(r6)
  804bf0:	00802074 	movhi	r2,129
  804bf4:	10ba4a04 	addi	r2,r2,-5848
  804bf8:	20807b26 	beq	r4,r2,804de8 <_free_r+0x280>
  804bfc:	30800317 	ldw	r2,12(r6)
  804c00:	3a07883a 	add	r3,r7,r8
  804c04:	19c00015 	stw	r7,0(r3)
  804c08:	11000215 	stw	r4,8(r2)
  804c0c:	20800315 	stw	r2,12(r4)
  804c10:	38800054 	ori	r2,r7,1
  804c14:	40800115 	stw	r2,4(r8)
  804c18:	28001a26 	beq	r5,zero,804c84 <_free_r+0x11c>
  804c1c:	8809883a 	mov	r4,r17
  804c20:	dfc00217 	ldw	ra,8(sp)
  804c24:	dc400117 	ldw	r17,4(sp)
  804c28:	dc000017 	ldw	r16,0(sp)
  804c2c:	dec00304 	addi	sp,sp,12
  804c30:	080aa081 	jmpi	80aa08 <__malloc_unlock>
  804c34:	80bffe17 	ldw	r2,-8(r16)
  804c38:	50c00204 	addi	r3,r10,8
  804c3c:	4091c83a 	sub	r8,r8,r2
  804c40:	41000217 	ldw	r4,8(r8)
  804c44:	388f883a 	add	r7,r7,r2
  804c48:	20c06126 	beq	r4,r3,804dd0 <_free_r+0x268>
  804c4c:	40800317 	ldw	r2,12(r8)
  804c50:	3247883a 	add	r3,r6,r9
  804c54:	000b883a 	mov	r5,zero
  804c58:	11000215 	stw	r4,8(r2)
  804c5c:	20800315 	stw	r2,12(r4)
  804c60:	18800117 	ldw	r2,4(r3)
  804c64:	1080004c 	andi	r2,r2,1
  804c68:	103fdd26 	beq	r2,zero,804be0 <_free_r+0x78>
  804c6c:	38800054 	ori	r2,r7,1
  804c70:	3a07883a 	add	r3,r7,r8
  804c74:	280ac03a 	cmpne	r5,r5,zero
  804c78:	40800115 	stw	r2,4(r8)
  804c7c:	19c00015 	stw	r7,0(r3)
  804c80:	283fe61e 	bne	r5,zero,804c1c <_free_r+0xb4>
  804c84:	00807fc4 	movi	r2,511
  804c88:	11c01f2e 	bgeu	r2,r7,804d08 <_free_r+0x1a0>
  804c8c:	3806d27a 	srli	r3,r7,9
  804c90:	1800481e 	bne	r3,zero,804db4 <_free_r+0x24c>
  804c94:	3804d0fa 	srli	r2,r7,3
  804c98:	100690fa 	slli	r3,r2,3
  804c9c:	1acd883a 	add	r6,r3,r11
  804ca0:	31400217 	ldw	r5,8(r6)
  804ca4:	31405926 	beq	r6,r5,804e0c <_free_r+0x2a4>
  804ca8:	28800117 	ldw	r2,4(r5)
  804cac:	00ffff04 	movi	r3,-4
  804cb0:	10c4703a 	and	r2,r2,r3
  804cb4:	3880022e 	bgeu	r7,r2,804cc0 <_free_r+0x158>
  804cb8:	29400217 	ldw	r5,8(r5)
  804cbc:	317ffa1e 	bne	r6,r5,804ca8 <_free_r+0x140>
  804cc0:	29800317 	ldw	r6,12(r5)
  804cc4:	41800315 	stw	r6,12(r8)
  804cc8:	41400215 	stw	r5,8(r8)
  804ccc:	8809883a 	mov	r4,r17
  804cd0:	2a000315 	stw	r8,12(r5)
  804cd4:	32000215 	stw	r8,8(r6)
  804cd8:	dfc00217 	ldw	ra,8(sp)
  804cdc:	dc400117 	ldw	r17,4(sp)
  804ce0:	dc000017 	ldw	r16,0(sp)
  804ce4:	dec00304 	addi	sp,sp,12
  804ce8:	080aa081 	jmpi	80aa08 <__malloc_unlock>
  804cec:	dfc00217 	ldw	ra,8(sp)
  804cf0:	dc400117 	ldw	r17,4(sp)
  804cf4:	dc000017 	ldw	r16,0(sp)
  804cf8:	dec00304 	addi	sp,sp,12
  804cfc:	f800283a 	ret
  804d00:	31000217 	ldw	r4,8(r6)
  804d04:	003fbd06 	br	804bfc <_free_r+0x94>
  804d08:	3806d0fa 	srli	r3,r7,3
  804d0c:	00800044 	movi	r2,1
  804d10:	51400117 	ldw	r5,4(r10)
  804d14:	180890fa 	slli	r4,r3,3
  804d18:	1807d0ba 	srai	r3,r3,2
  804d1c:	22c9883a 	add	r4,r4,r11
  804d20:	21800217 	ldw	r6,8(r4)
  804d24:	10c4983a 	sll	r2,r2,r3
  804d28:	41000315 	stw	r4,12(r8)
  804d2c:	41800215 	stw	r6,8(r8)
  804d30:	288ab03a 	or	r5,r5,r2
  804d34:	22000215 	stw	r8,8(r4)
  804d38:	8809883a 	mov	r4,r17
  804d3c:	51400115 	stw	r5,4(r10)
  804d40:	32000315 	stw	r8,12(r6)
  804d44:	dfc00217 	ldw	ra,8(sp)
  804d48:	dc400117 	ldw	r17,4(sp)
  804d4c:	dc000017 	ldw	r16,0(sp)
  804d50:	dec00304 	addi	sp,sp,12
  804d54:	080aa081 	jmpi	80aa08 <__malloc_unlock>
  804d58:	2880004c 	andi	r2,r5,1
  804d5c:	3a4d883a 	add	r6,r7,r9
  804d60:	1000071e 	bne	r2,zero,804d80 <_free_r+0x218>
  804d64:	80bffe17 	ldw	r2,-8(r16)
  804d68:	4091c83a 	sub	r8,r8,r2
  804d6c:	41000317 	ldw	r4,12(r8)
  804d70:	40c00217 	ldw	r3,8(r8)
  804d74:	308d883a 	add	r6,r6,r2
  804d78:	20c00215 	stw	r3,8(r4)
  804d7c:	19000315 	stw	r4,12(r3)
  804d80:	00802074 	movhi	r2,129
  804d84:	10801804 	addi	r2,r2,96
  804d88:	11000017 	ldw	r4,0(r2)
  804d8c:	30c00054 	ori	r3,r6,1
  804d90:	52000215 	stw	r8,8(r10)
  804d94:	40c00115 	stw	r3,4(r8)
  804d98:	313fa036 	bltu	r6,r4,804c1c <_free_r+0xb4>
  804d9c:	00802074 	movhi	r2,129
  804da0:	10871004 	addi	r2,r2,7232
  804da4:	11400017 	ldw	r5,0(r2)
  804da8:	8809883a 	mov	r4,r17
  804dac:	0804a3c0 	call	804a3c <_malloc_trim_r>
  804db0:	003f9a06 	br	804c1c <_free_r+0xb4>
  804db4:	00800104 	movi	r2,4
  804db8:	10c0072e 	bgeu	r2,r3,804dd8 <_free_r+0x270>
  804dbc:	00800504 	movi	r2,20
  804dc0:	10c01936 	bltu	r2,r3,804e28 <_free_r+0x2c0>
  804dc4:	188016c4 	addi	r2,r3,91
  804dc8:	100690fa 	slli	r3,r2,3
  804dcc:	003fb306 	br	804c9c <_free_r+0x134>
  804dd0:	01400044 	movi	r5,1
  804dd4:	003f7e06 	br	804bd0 <_free_r+0x68>
  804dd8:	3804d1ba 	srli	r2,r7,6
  804ddc:	10800e04 	addi	r2,r2,56
  804de0:	100690fa 	slli	r3,r2,3
  804de4:	003fad06 	br	804c9c <_free_r+0x134>
  804de8:	22000315 	stw	r8,12(r4)
  804dec:	22000215 	stw	r8,8(r4)
  804df0:	3a05883a 	add	r2,r7,r8
  804df4:	38c00054 	ori	r3,r7,1
  804df8:	11c00015 	stw	r7,0(r2)
  804dfc:	41000215 	stw	r4,8(r8)
  804e00:	40c00115 	stw	r3,4(r8)
  804e04:	41000315 	stw	r4,12(r8)
  804e08:	003f8406 	br	804c1c <_free_r+0xb4>
  804e0c:	1005d0ba 	srai	r2,r2,2
  804e10:	00c00044 	movi	r3,1
  804e14:	51000117 	ldw	r4,4(r10)
  804e18:	1886983a 	sll	r3,r3,r2
  804e1c:	20c8b03a 	or	r4,r4,r3
  804e20:	51000115 	stw	r4,4(r10)
  804e24:	003fa706 	br	804cc4 <_free_r+0x15c>
  804e28:	00801504 	movi	r2,84
  804e2c:	10c00436 	bltu	r2,r3,804e40 <_free_r+0x2d8>
  804e30:	3804d33a 	srli	r2,r7,12
  804e34:	10801b84 	addi	r2,r2,110
  804e38:	100690fa 	slli	r3,r2,3
  804e3c:	003f9706 	br	804c9c <_free_r+0x134>
  804e40:	00805504 	movi	r2,340
  804e44:	10c00436 	bltu	r2,r3,804e58 <_free_r+0x2f0>
  804e48:	3804d3fa 	srli	r2,r7,15
  804e4c:	10801dc4 	addi	r2,r2,119
  804e50:	100690fa 	slli	r3,r2,3
  804e54:	003f9106 	br	804c9c <_free_r+0x134>
  804e58:	00815504 	movi	r2,1364
  804e5c:	10c0032e 	bgeu	r2,r3,804e6c <_free_r+0x304>
  804e60:	00801f84 	movi	r2,126
  804e64:	00c0fc04 	movi	r3,1008
  804e68:	003f8c06 	br	804c9c <_free_r+0x134>
  804e6c:	3804d4ba 	srli	r2,r7,18
  804e70:	10801f04 	addi	r2,r2,124
  804e74:	100690fa 	slli	r3,r2,3
  804e78:	003f8806 	br	804c9c <_free_r+0x134>

00804e7c <__sfvwrite_r>:
  804e7c:	30800217 	ldw	r2,8(r6)
  804e80:	defff504 	addi	sp,sp,-44
  804e84:	df000915 	stw	fp,36(sp)
  804e88:	dd800715 	stw	r22,28(sp)
  804e8c:	dc800315 	stw	r18,12(sp)
  804e90:	dfc00a15 	stw	ra,40(sp)
  804e94:	ddc00815 	stw	r23,32(sp)
  804e98:	dd400615 	stw	r21,24(sp)
  804e9c:	dd000515 	stw	r20,20(sp)
  804ea0:	dcc00415 	stw	r19,16(sp)
  804ea4:	dc400215 	stw	r17,8(sp)
  804ea8:	dc000115 	stw	r16,4(sp)
  804eac:	302d883a 	mov	r22,r6
  804eb0:	2039883a 	mov	fp,r4
  804eb4:	2825883a 	mov	r18,r5
  804eb8:	10001c26 	beq	r2,zero,804f2c <__sfvwrite_r+0xb0>
  804ebc:	29c0030b 	ldhu	r7,12(r5)
  804ec0:	3880020c 	andi	r2,r7,8
  804ec4:	10002726 	beq	r2,zero,804f64 <__sfvwrite_r+0xe8>
  804ec8:	28800417 	ldw	r2,16(r5)
  804ecc:	10002526 	beq	r2,zero,804f64 <__sfvwrite_r+0xe8>
  804ed0:	3880008c 	andi	r2,r7,2
  804ed4:	b5400017 	ldw	r21,0(r22)
  804ed8:	10002826 	beq	r2,zero,804f7c <__sfvwrite_r+0x100>
  804edc:	0021883a 	mov	r16,zero
  804ee0:	0023883a 	mov	r17,zero
  804ee4:	880d883a 	mov	r6,r17
  804ee8:	e009883a 	mov	r4,fp
  804eec:	00810004 	movi	r2,1024
  804ef0:	80006e26 	beq	r16,zero,8050ac <__sfvwrite_r+0x230>
  804ef4:	800f883a 	mov	r7,r16
  804ef8:	91400717 	ldw	r5,28(r18)
  804efc:	1400012e 	bgeu	r2,r16,804f04 <__sfvwrite_r+0x88>
  804f00:	100f883a 	mov	r7,r2
  804f04:	90c00917 	ldw	r3,36(r18)
  804f08:	183ee83a 	callr	r3
  804f0c:	1007883a 	mov	r3,r2
  804f10:	80a1c83a 	sub	r16,r16,r2
  804f14:	88a3883a 	add	r17,r17,r2
  804f18:	00806d0e 	bge	zero,r2,8050d0 <__sfvwrite_r+0x254>
  804f1c:	b0800217 	ldw	r2,8(r22)
  804f20:	10c5c83a 	sub	r2,r2,r3
  804f24:	b0800215 	stw	r2,8(r22)
  804f28:	103fee1e 	bne	r2,zero,804ee4 <__sfvwrite_r+0x68>
  804f2c:	0009883a 	mov	r4,zero
  804f30:	2005883a 	mov	r2,r4
  804f34:	dfc00a17 	ldw	ra,40(sp)
  804f38:	df000917 	ldw	fp,36(sp)
  804f3c:	ddc00817 	ldw	r23,32(sp)
  804f40:	dd800717 	ldw	r22,28(sp)
  804f44:	dd400617 	ldw	r21,24(sp)
  804f48:	dd000517 	ldw	r20,20(sp)
  804f4c:	dcc00417 	ldw	r19,16(sp)
  804f50:	dc800317 	ldw	r18,12(sp)
  804f54:	dc400217 	ldw	r17,8(sp)
  804f58:	dc000117 	ldw	r16,4(sp)
  804f5c:	dec00b04 	addi	sp,sp,44
  804f60:	f800283a 	ret
  804f64:	0802c440 	call	802c44 <__swsetup_r>
  804f68:	1000e41e 	bne	r2,zero,8052fc <__sfvwrite_r+0x480>
  804f6c:	91c0030b 	ldhu	r7,12(r18)
  804f70:	b5400017 	ldw	r21,0(r22)
  804f74:	3880008c 	andi	r2,r7,2
  804f78:	103fd81e 	bne	r2,zero,804edc <__sfvwrite_r+0x60>
  804f7c:	3880004c 	andi	r2,r7,1
  804f80:	1005003a 	cmpeq	r2,r2,zero
  804f84:	10005726 	beq	r2,zero,8050e4 <__sfvwrite_r+0x268>
  804f88:	0029883a 	mov	r20,zero
  804f8c:	002f883a 	mov	r23,zero
  804f90:	a0004226 	beq	r20,zero,80509c <__sfvwrite_r+0x220>
  804f94:	3880800c 	andi	r2,r7,512
  804f98:	94000217 	ldw	r16,8(r18)
  804f9c:	10008b26 	beq	r2,zero,8051cc <__sfvwrite_r+0x350>
  804fa0:	800d883a 	mov	r6,r16
  804fa4:	a400a536 	bltu	r20,r16,80523c <__sfvwrite_r+0x3c0>
  804fa8:	3881200c 	andi	r2,r7,1152
  804fac:	10002726 	beq	r2,zero,80504c <__sfvwrite_r+0x1d0>
  804fb0:	90800517 	ldw	r2,20(r18)
  804fb4:	92000417 	ldw	r8,16(r18)
  804fb8:	91400017 	ldw	r5,0(r18)
  804fbc:	1087883a 	add	r3,r2,r2
  804fc0:	1887883a 	add	r3,r3,r2
  804fc4:	1808d7fa 	srli	r4,r3,31
  804fc8:	2a21c83a 	sub	r16,r5,r8
  804fcc:	80800044 	addi	r2,r16,1
  804fd0:	20c9883a 	add	r4,r4,r3
  804fd4:	2027d07a 	srai	r19,r4,1
  804fd8:	a085883a 	add	r2,r20,r2
  804fdc:	980d883a 	mov	r6,r19
  804fe0:	9880022e 	bgeu	r19,r2,804fec <__sfvwrite_r+0x170>
  804fe4:	1027883a 	mov	r19,r2
  804fe8:	100d883a 	mov	r6,r2
  804fec:	3881000c 	andi	r2,r7,1024
  804ff0:	1000b826 	beq	r2,zero,8052d4 <__sfvwrite_r+0x458>
  804ff4:	300b883a 	mov	r5,r6
  804ff8:	e009883a 	mov	r4,fp
  804ffc:	08057640 	call	805764 <_malloc_r>
  805000:	10003126 	beq	r2,zero,8050c8 <__sfvwrite_r+0x24c>
  805004:	91400417 	ldw	r5,16(r18)
  805008:	1009883a 	mov	r4,r2
  80500c:	800d883a 	mov	r6,r16
  805010:	1023883a 	mov	r17,r2
  805014:	08009ec0 	call	8009ec <memcpy>
  805018:	90c0030b 	ldhu	r3,12(r18)
  80501c:	00beffc4 	movi	r2,-1025
  805020:	1886703a 	and	r3,r3,r2
  805024:	18c02014 	ori	r3,r3,128
  805028:	90c0030d 	sth	r3,12(r18)
  80502c:	9c07c83a 	sub	r3,r19,r16
  805030:	8c05883a 	add	r2,r17,r16
  805034:	a00d883a 	mov	r6,r20
  805038:	a021883a 	mov	r16,r20
  80503c:	90800015 	stw	r2,0(r18)
  805040:	90c00215 	stw	r3,8(r18)
  805044:	94400415 	stw	r17,16(r18)
  805048:	94c00515 	stw	r19,20(r18)
  80504c:	91000017 	ldw	r4,0(r18)
  805050:	b80b883a 	mov	r5,r23
  805054:	a023883a 	mov	r17,r20
  805058:	0805f880 	call	805f88 <memmove>
  80505c:	90c00217 	ldw	r3,8(r18)
  805060:	90800017 	ldw	r2,0(r18)
  805064:	a027883a 	mov	r19,r20
  805068:	1c07c83a 	sub	r3,r3,r16
  80506c:	1405883a 	add	r2,r2,r16
  805070:	90c00215 	stw	r3,8(r18)
  805074:	a021883a 	mov	r16,r20
  805078:	90800015 	stw	r2,0(r18)
  80507c:	b0800217 	ldw	r2,8(r22)
  805080:	1405c83a 	sub	r2,r2,r16
  805084:	b0800215 	stw	r2,8(r22)
  805088:	103fa826 	beq	r2,zero,804f2c <__sfvwrite_r+0xb0>
  80508c:	a469c83a 	sub	r20,r20,r17
  805090:	91c0030b 	ldhu	r7,12(r18)
  805094:	bcef883a 	add	r23,r23,r19
  805098:	a03fbe1e 	bne	r20,zero,804f94 <__sfvwrite_r+0x118>
  80509c:	adc00017 	ldw	r23,0(r21)
  8050a0:	ad000117 	ldw	r20,4(r21)
  8050a4:	ad400204 	addi	r21,r21,8
  8050a8:	003fb906 	br	804f90 <__sfvwrite_r+0x114>
  8050ac:	ac400017 	ldw	r17,0(r21)
  8050b0:	ac000117 	ldw	r16,4(r21)
  8050b4:	ad400204 	addi	r21,r21,8
  8050b8:	003f8a06 	br	804ee4 <__sfvwrite_r+0x68>
  8050bc:	91400417 	ldw	r5,16(r18)
  8050c0:	e009883a 	mov	r4,fp
  8050c4:	0804b680 	call	804b68 <_free_r>
  8050c8:	00800304 	movi	r2,12
  8050cc:	e0800015 	stw	r2,0(fp)
  8050d0:	9080030b 	ldhu	r2,12(r18)
  8050d4:	013fffc4 	movi	r4,-1
  8050d8:	10801014 	ori	r2,r2,64
  8050dc:	9080030d 	sth	r2,12(r18)
  8050e0:	003f9306 	br	804f30 <__sfvwrite_r+0xb4>
  8050e4:	0027883a 	mov	r19,zero
  8050e8:	002f883a 	mov	r23,zero
  8050ec:	d8000015 	stw	zero,0(sp)
  8050f0:	0029883a 	mov	r20,zero
  8050f4:	98001e26 	beq	r19,zero,805170 <__sfvwrite_r+0x2f4>
  8050f8:	d8c00017 	ldw	r3,0(sp)
  8050fc:	1804c03a 	cmpne	r2,r3,zero
  805100:	10005e26 	beq	r2,zero,80527c <__sfvwrite_r+0x400>
  805104:	9821883a 	mov	r16,r19
  805108:	a4c0012e 	bgeu	r20,r19,805110 <__sfvwrite_r+0x294>
  80510c:	a021883a 	mov	r16,r20
  805110:	91000017 	ldw	r4,0(r18)
  805114:	90800417 	ldw	r2,16(r18)
  805118:	91800217 	ldw	r6,8(r18)
  80511c:	91c00517 	ldw	r7,20(r18)
  805120:	1100022e 	bgeu	r2,r4,80512c <__sfvwrite_r+0x2b0>
  805124:	31e3883a 	add	r17,r6,r7
  805128:	8c001616 	blt	r17,r16,805184 <__sfvwrite_r+0x308>
  80512c:	81c03816 	blt	r16,r7,805210 <__sfvwrite_r+0x394>
  805130:	90c00917 	ldw	r3,36(r18)
  805134:	91400717 	ldw	r5,28(r18)
  805138:	e009883a 	mov	r4,fp
  80513c:	b80d883a 	mov	r6,r23
  805140:	183ee83a 	callr	r3
  805144:	1023883a 	mov	r17,r2
  805148:	00bfe10e 	bge	zero,r2,8050d0 <__sfvwrite_r+0x254>
  80514c:	a469c83a 	sub	r20,r20,r17
  805150:	a0001826 	beq	r20,zero,8051b4 <__sfvwrite_r+0x338>
  805154:	b0800217 	ldw	r2,8(r22)
  805158:	1445c83a 	sub	r2,r2,r17
  80515c:	b0800215 	stw	r2,8(r22)
  805160:	103f7226 	beq	r2,zero,804f2c <__sfvwrite_r+0xb0>
  805164:	9c67c83a 	sub	r19,r19,r17
  805168:	bc6f883a 	add	r23,r23,r17
  80516c:	983fe21e 	bne	r19,zero,8050f8 <__sfvwrite_r+0x27c>
  805170:	adc00017 	ldw	r23,0(r21)
  805174:	acc00117 	ldw	r19,4(r21)
  805178:	ad400204 	addi	r21,r21,8
  80517c:	d8000015 	stw	zero,0(sp)
  805180:	003fdc06 	br	8050f4 <__sfvwrite_r+0x278>
  805184:	b80b883a 	mov	r5,r23
  805188:	880d883a 	mov	r6,r17
  80518c:	0805f880 	call	805f88 <memmove>
  805190:	90c00017 	ldw	r3,0(r18)
  805194:	e009883a 	mov	r4,fp
  805198:	900b883a 	mov	r5,r18
  80519c:	1c47883a 	add	r3,r3,r17
  8051a0:	90c00015 	stw	r3,0(r18)
  8051a4:	080454c0 	call	80454c <_fflush_r>
  8051a8:	103fc91e 	bne	r2,zero,8050d0 <__sfvwrite_r+0x254>
  8051ac:	a469c83a 	sub	r20,r20,r17
  8051b0:	a03fe81e 	bne	r20,zero,805154 <__sfvwrite_r+0x2d8>
  8051b4:	e009883a 	mov	r4,fp
  8051b8:	900b883a 	mov	r5,r18
  8051bc:	080454c0 	call	80454c <_fflush_r>
  8051c0:	103fc31e 	bne	r2,zero,8050d0 <__sfvwrite_r+0x254>
  8051c4:	d8000015 	stw	zero,0(sp)
  8051c8:	003fe206 	br	805154 <__sfvwrite_r+0x2d8>
  8051cc:	91000017 	ldw	r4,0(r18)
  8051d0:	90800417 	ldw	r2,16(r18)
  8051d4:	1100022e 	bgeu	r2,r4,8051e0 <__sfvwrite_r+0x364>
  8051d8:	8023883a 	mov	r17,r16
  8051dc:	85003136 	bltu	r16,r20,8052a4 <__sfvwrite_r+0x428>
  8051e0:	91c00517 	ldw	r7,20(r18)
  8051e4:	a1c01836 	bltu	r20,r7,805248 <__sfvwrite_r+0x3cc>
  8051e8:	90c00917 	ldw	r3,36(r18)
  8051ec:	91400717 	ldw	r5,28(r18)
  8051f0:	e009883a 	mov	r4,fp
  8051f4:	b80d883a 	mov	r6,r23
  8051f8:	183ee83a 	callr	r3
  8051fc:	1021883a 	mov	r16,r2
  805200:	00bfb30e 	bge	zero,r2,8050d0 <__sfvwrite_r+0x254>
  805204:	1023883a 	mov	r17,r2
  805208:	1027883a 	mov	r19,r2
  80520c:	003f9b06 	br	80507c <__sfvwrite_r+0x200>
  805210:	b80b883a 	mov	r5,r23
  805214:	800d883a 	mov	r6,r16
  805218:	0805f880 	call	805f88 <memmove>
  80521c:	90c00217 	ldw	r3,8(r18)
  805220:	90800017 	ldw	r2,0(r18)
  805224:	8023883a 	mov	r17,r16
  805228:	1c07c83a 	sub	r3,r3,r16
  80522c:	1405883a 	add	r2,r2,r16
  805230:	90c00215 	stw	r3,8(r18)
  805234:	90800015 	stw	r2,0(r18)
  805238:	003fc406 	br	80514c <__sfvwrite_r+0x2d0>
  80523c:	a00d883a 	mov	r6,r20
  805240:	a021883a 	mov	r16,r20
  805244:	003f8106 	br	80504c <__sfvwrite_r+0x1d0>
  805248:	b80b883a 	mov	r5,r23
  80524c:	a00d883a 	mov	r6,r20
  805250:	0805f880 	call	805f88 <memmove>
  805254:	90c00217 	ldw	r3,8(r18)
  805258:	90800017 	ldw	r2,0(r18)
  80525c:	a021883a 	mov	r16,r20
  805260:	1d07c83a 	sub	r3,r3,r20
  805264:	1505883a 	add	r2,r2,r20
  805268:	a023883a 	mov	r17,r20
  80526c:	a027883a 	mov	r19,r20
  805270:	90c00215 	stw	r3,8(r18)
  805274:	90800015 	stw	r2,0(r18)
  805278:	003f8006 	br	80507c <__sfvwrite_r+0x200>
  80527c:	b809883a 	mov	r4,r23
  805280:	01400284 	movi	r5,10
  805284:	980d883a 	mov	r6,r19
  805288:	0805ea40 	call	805ea4 <memchr>
  80528c:	10001726 	beq	r2,zero,8052ec <__sfvwrite_r+0x470>
  805290:	15c5c83a 	sub	r2,r2,r23
  805294:	15000044 	addi	r20,r2,1
  805298:	00800044 	movi	r2,1
  80529c:	d8800015 	stw	r2,0(sp)
  8052a0:	003f9806 	br	805104 <__sfvwrite_r+0x288>
  8052a4:	b80b883a 	mov	r5,r23
  8052a8:	800d883a 	mov	r6,r16
  8052ac:	0805f880 	call	805f88 <memmove>
  8052b0:	90c00017 	ldw	r3,0(r18)
  8052b4:	e009883a 	mov	r4,fp
  8052b8:	900b883a 	mov	r5,r18
  8052bc:	1c07883a 	add	r3,r3,r16
  8052c0:	90c00015 	stw	r3,0(r18)
  8052c4:	8027883a 	mov	r19,r16
  8052c8:	080454c0 	call	80454c <_fflush_r>
  8052cc:	103f6b26 	beq	r2,zero,80507c <__sfvwrite_r+0x200>
  8052d0:	003f7f06 	br	8050d0 <__sfvwrite_r+0x254>
  8052d4:	400b883a 	mov	r5,r8
  8052d8:	e009883a 	mov	r4,fp
  8052dc:	08070f40 	call	8070f4 <_realloc_r>
  8052e0:	103f7626 	beq	r2,zero,8050bc <__sfvwrite_r+0x240>
  8052e4:	1023883a 	mov	r17,r2
  8052e8:	003f5006 	br	80502c <__sfvwrite_r+0x1b0>
  8052ec:	00c00044 	movi	r3,1
  8052f0:	9d000044 	addi	r20,r19,1
  8052f4:	d8c00015 	stw	r3,0(sp)
  8052f8:	003f8206 	br	805104 <__sfvwrite_r+0x288>
  8052fc:	9080030b 	ldhu	r2,12(r18)
  805300:	00c00244 	movi	r3,9
  805304:	013fffc4 	movi	r4,-1
  805308:	10801014 	ori	r2,r2,64
  80530c:	9080030d 	sth	r2,12(r18)
  805310:	e0c00015 	stw	r3,0(fp)
  805314:	003f0606 	br	804f30 <__sfvwrite_r+0xb4>

00805318 <_fwalk_reent>:
  805318:	defff704 	addi	sp,sp,-36
  80531c:	dcc00315 	stw	r19,12(sp)
  805320:	24c0b804 	addi	r19,r4,736
  805324:	dd800615 	stw	r22,24(sp)
  805328:	dd400515 	stw	r21,20(sp)
  80532c:	dfc00815 	stw	ra,32(sp)
  805330:	ddc00715 	stw	r23,28(sp)
  805334:	dd000415 	stw	r20,16(sp)
  805338:	dc800215 	stw	r18,8(sp)
  80533c:	dc400115 	stw	r17,4(sp)
  805340:	dc000015 	stw	r16,0(sp)
  805344:	202b883a 	mov	r21,r4
  805348:	282d883a 	mov	r22,r5
  80534c:	08047d40 	call	8047d4 <__sfp_lock_acquire>
  805350:	98002126 	beq	r19,zero,8053d8 <_fwalk_reent+0xc0>
  805354:	002f883a 	mov	r23,zero
  805358:	9c800117 	ldw	r18,4(r19)
  80535c:	9c000217 	ldw	r16,8(r19)
  805360:	90bfffc4 	addi	r2,r18,-1
  805364:	10000d16 	blt	r2,zero,80539c <_fwalk_reent+0x84>
  805368:	0023883a 	mov	r17,zero
  80536c:	053fffc4 	movi	r20,-1
  805370:	8080030f 	ldh	r2,12(r16)
  805374:	8c400044 	addi	r17,r17,1
  805378:	10000626 	beq	r2,zero,805394 <_fwalk_reent+0x7c>
  80537c:	8080038f 	ldh	r2,14(r16)
  805380:	800b883a 	mov	r5,r16
  805384:	a809883a 	mov	r4,r21
  805388:	15000226 	beq	r2,r20,805394 <_fwalk_reent+0x7c>
  80538c:	b03ee83a 	callr	r22
  805390:	b8aeb03a 	or	r23,r23,r2
  805394:	84001704 	addi	r16,r16,92
  805398:	947ff51e 	bne	r18,r17,805370 <_fwalk_reent+0x58>
  80539c:	9cc00017 	ldw	r19,0(r19)
  8053a0:	983fed1e 	bne	r19,zero,805358 <_fwalk_reent+0x40>
  8053a4:	08047d80 	call	8047d8 <__sfp_lock_release>
  8053a8:	b805883a 	mov	r2,r23
  8053ac:	dfc00817 	ldw	ra,32(sp)
  8053b0:	ddc00717 	ldw	r23,28(sp)
  8053b4:	dd800617 	ldw	r22,24(sp)
  8053b8:	dd400517 	ldw	r21,20(sp)
  8053bc:	dd000417 	ldw	r20,16(sp)
  8053c0:	dcc00317 	ldw	r19,12(sp)
  8053c4:	dc800217 	ldw	r18,8(sp)
  8053c8:	dc400117 	ldw	r17,4(sp)
  8053cc:	dc000017 	ldw	r16,0(sp)
  8053d0:	dec00904 	addi	sp,sp,36
  8053d4:	f800283a 	ret
  8053d8:	002f883a 	mov	r23,zero
  8053dc:	003ff106 	br	8053a4 <_fwalk_reent+0x8c>

008053e0 <_fwalk>:
  8053e0:	defff804 	addi	sp,sp,-32
  8053e4:	dcc00315 	stw	r19,12(sp)
  8053e8:	24c0b804 	addi	r19,r4,736
  8053ec:	dd400515 	stw	r21,20(sp)
  8053f0:	dfc00715 	stw	ra,28(sp)
  8053f4:	dd800615 	stw	r22,24(sp)
  8053f8:	dd000415 	stw	r20,16(sp)
  8053fc:	dc800215 	stw	r18,8(sp)
  805400:	dc400115 	stw	r17,4(sp)
  805404:	dc000015 	stw	r16,0(sp)
  805408:	282b883a 	mov	r21,r5
  80540c:	08047d40 	call	8047d4 <__sfp_lock_acquire>
  805410:	98001f26 	beq	r19,zero,805490 <_fwalk+0xb0>
  805414:	002d883a 	mov	r22,zero
  805418:	9c800117 	ldw	r18,4(r19)
  80541c:	9c000217 	ldw	r16,8(r19)
  805420:	90bfffc4 	addi	r2,r18,-1
  805424:	10000c16 	blt	r2,zero,805458 <_fwalk+0x78>
  805428:	0023883a 	mov	r17,zero
  80542c:	053fffc4 	movi	r20,-1
  805430:	8080030f 	ldh	r2,12(r16)
  805434:	8c400044 	addi	r17,r17,1
  805438:	10000526 	beq	r2,zero,805450 <_fwalk+0x70>
  80543c:	8080038f 	ldh	r2,14(r16)
  805440:	8009883a 	mov	r4,r16
  805444:	15000226 	beq	r2,r20,805450 <_fwalk+0x70>
  805448:	a83ee83a 	callr	r21
  80544c:	b0acb03a 	or	r22,r22,r2
  805450:	84001704 	addi	r16,r16,92
  805454:	947ff61e 	bne	r18,r17,805430 <_fwalk+0x50>
  805458:	9cc00017 	ldw	r19,0(r19)
  80545c:	983fee1e 	bne	r19,zero,805418 <_fwalk+0x38>
  805460:	08047d80 	call	8047d8 <__sfp_lock_release>
  805464:	b005883a 	mov	r2,r22
  805468:	dfc00717 	ldw	ra,28(sp)
  80546c:	dd800617 	ldw	r22,24(sp)
  805470:	dd400517 	ldw	r21,20(sp)
  805474:	dd000417 	ldw	r20,16(sp)
  805478:	dcc00317 	ldw	r19,12(sp)
  80547c:	dc800217 	ldw	r18,8(sp)
  805480:	dc400117 	ldw	r17,4(sp)
  805484:	dc000017 	ldw	r16,0(sp)
  805488:	dec00804 	addi	sp,sp,32
  80548c:	f800283a 	ret
  805490:	002d883a 	mov	r22,zero
  805494:	003ff206 	br	805460 <_fwalk+0x80>

00805498 <_gettimeofday_r>:
  805498:	defffd04 	addi	sp,sp,-12
  80549c:	dc000015 	stw	r16,0(sp)
  8054a0:	04002074 	movhi	r16,129
  8054a4:	84070c04 	addi	r16,r16,7216
  8054a8:	dc400115 	stw	r17,4(sp)
  8054ac:	80000015 	stw	zero,0(r16)
  8054b0:	2023883a 	mov	r17,r4
  8054b4:	2809883a 	mov	r4,r5
  8054b8:	300b883a 	mov	r5,r6
  8054bc:	dfc00215 	stw	ra,8(sp)
  8054c0:	080a4040 	call	80a404 <gettimeofday>
  8054c4:	1007883a 	mov	r3,r2
  8054c8:	00bfffc4 	movi	r2,-1
  8054cc:	18800626 	beq	r3,r2,8054e8 <_gettimeofday_r+0x50>
  8054d0:	1805883a 	mov	r2,r3
  8054d4:	dfc00217 	ldw	ra,8(sp)
  8054d8:	dc400117 	ldw	r17,4(sp)
  8054dc:	dc000017 	ldw	r16,0(sp)
  8054e0:	dec00304 	addi	sp,sp,12
  8054e4:	f800283a 	ret
  8054e8:	80800017 	ldw	r2,0(r16)
  8054ec:	103ff826 	beq	r2,zero,8054d0 <_gettimeofday_r+0x38>
  8054f0:	88800015 	stw	r2,0(r17)
  8054f4:	1805883a 	mov	r2,r3
  8054f8:	dfc00217 	ldw	ra,8(sp)
  8054fc:	dc400117 	ldw	r17,4(sp)
  805500:	dc000017 	ldw	r16,0(sp)
  805504:	dec00304 	addi	sp,sp,12
  805508:	f800283a 	ret

0080550c <__locale_charset>:
  80550c:	d0a00317 	ldw	r2,-32756(gp)
  805510:	f800283a 	ret

00805514 <_localeconv_r>:
  805514:	00802074 	movhi	r2,129
  805518:	10b7f404 	addi	r2,r2,-8240
  80551c:	f800283a 	ret

00805520 <localeconv>:
  805520:	00802074 	movhi	r2,129
  805524:	10801404 	addi	r2,r2,80
  805528:	11000017 	ldw	r4,0(r2)
  80552c:	08055141 	jmpi	805514 <_localeconv_r>

00805530 <_setlocale_r>:
  805530:	defffc04 	addi	sp,sp,-16
  805534:	00c02074 	movhi	r3,129
  805538:	18f7ca04 	addi	r3,r3,-8408
  80553c:	dc800215 	stw	r18,8(sp)
  805540:	dc400115 	stw	r17,4(sp)
  805544:	dc000015 	stw	r16,0(sp)
  805548:	2023883a 	mov	r17,r4
  80554c:	2825883a 	mov	r18,r5
  805550:	dfc00315 	stw	ra,12(sp)
  805554:	3021883a 	mov	r16,r6
  805558:	3009883a 	mov	r4,r6
  80555c:	180b883a 	mov	r5,r3
  805560:	30000926 	beq	r6,zero,805588 <_setlocale_r+0x58>
  805564:	08079140 	call	807914 <strcmp>
  805568:	8009883a 	mov	r4,r16
  80556c:	01402074 	movhi	r5,129
  805570:	2977db04 	addi	r5,r5,-8340
  805574:	10000b1e 	bne	r2,zero,8055a4 <_setlocale_r+0x74>
  805578:	8c000d15 	stw	r16,52(r17)
  80557c:	8c800c15 	stw	r18,48(r17)
  805580:	00c02074 	movhi	r3,129
  805584:	18f7ca04 	addi	r3,r3,-8408
  805588:	1805883a 	mov	r2,r3
  80558c:	dfc00317 	ldw	ra,12(sp)
  805590:	dc800217 	ldw	r18,8(sp)
  805594:	dc400117 	ldw	r17,4(sp)
  805598:	dc000017 	ldw	r16,0(sp)
  80559c:	dec00404 	addi	sp,sp,16
  8055a0:	f800283a 	ret
  8055a4:	08079140 	call	807914 <strcmp>
  8055a8:	0007883a 	mov	r3,zero
  8055ac:	103ff226 	beq	r2,zero,805578 <_setlocale_r+0x48>
  8055b0:	003ff506 	br	805588 <_setlocale_r+0x58>

008055b4 <setlocale>:
  8055b4:	01802074 	movhi	r6,129
  8055b8:	31801404 	addi	r6,r6,80
  8055bc:	2007883a 	mov	r3,r4
  8055c0:	31000017 	ldw	r4,0(r6)
  8055c4:	280d883a 	mov	r6,r5
  8055c8:	180b883a 	mov	r5,r3
  8055cc:	08055301 	jmpi	805530 <_setlocale_r>

008055d0 <__smakebuf_r>:
  8055d0:	2880030b 	ldhu	r2,12(r5)
  8055d4:	deffed04 	addi	sp,sp,-76
  8055d8:	dc401015 	stw	r17,64(sp)
  8055dc:	1080008c 	andi	r2,r2,2
  8055e0:	dc000f15 	stw	r16,60(sp)
  8055e4:	dfc01215 	stw	ra,72(sp)
  8055e8:	dc801115 	stw	r18,68(sp)
  8055ec:	2821883a 	mov	r16,r5
  8055f0:	2023883a 	mov	r17,r4
  8055f4:	10000b26 	beq	r2,zero,805624 <__smakebuf_r+0x54>
  8055f8:	28c010c4 	addi	r3,r5,67
  8055fc:	00800044 	movi	r2,1
  805600:	28800515 	stw	r2,20(r5)
  805604:	28c00415 	stw	r3,16(r5)
  805608:	28c00015 	stw	r3,0(r5)
  80560c:	dfc01217 	ldw	ra,72(sp)
  805610:	dc801117 	ldw	r18,68(sp)
  805614:	dc401017 	ldw	r17,64(sp)
  805618:	dc000f17 	ldw	r16,60(sp)
  80561c:	dec01304 	addi	sp,sp,76
  805620:	f800283a 	ret
  805624:	2940038f 	ldh	r5,14(r5)
  805628:	28002116 	blt	r5,zero,8056b0 <__smakebuf_r+0xe0>
  80562c:	d80d883a 	mov	r6,sp
  805630:	0807c900 	call	807c90 <_fstat_r>
  805634:	10001e16 	blt	r2,zero,8056b0 <__smakebuf_r+0xe0>
  805638:	d8800117 	ldw	r2,4(sp)
  80563c:	00e00014 	movui	r3,32768
  805640:	113c000c 	andi	r4,r2,61440
  805644:	20c03126 	beq	r4,r3,80570c <__smakebuf_r+0x13c>
  805648:	8080030b 	ldhu	r2,12(r16)
  80564c:	00c80004 	movi	r3,8192
  805650:	10820014 	ori	r2,r2,2048
  805654:	8080030d 	sth	r2,12(r16)
  805658:	20c01e26 	beq	r4,r3,8056d4 <__smakebuf_r+0x104>
  80565c:	04810004 	movi	r18,1024
  805660:	8809883a 	mov	r4,r17
  805664:	900b883a 	mov	r5,r18
  805668:	08057640 	call	805764 <_malloc_r>
  80566c:	1009883a 	mov	r4,r2
  805670:	10003126 	beq	r2,zero,805738 <__smakebuf_r+0x168>
  805674:	80c0030b 	ldhu	r3,12(r16)
  805678:	00802034 	movhi	r2,128
  80567c:	10923204 	addi	r2,r2,18632
  805680:	88800f15 	stw	r2,60(r17)
  805684:	18c02014 	ori	r3,r3,128
  805688:	84800515 	stw	r18,20(r16)
  80568c:	80c0030d 	sth	r3,12(r16)
  805690:	81000415 	stw	r4,16(r16)
  805694:	81000015 	stw	r4,0(r16)
  805698:	dfc01217 	ldw	ra,72(sp)
  80569c:	dc801117 	ldw	r18,68(sp)
  8056a0:	dc401017 	ldw	r17,64(sp)
  8056a4:	dc000f17 	ldw	r16,60(sp)
  8056a8:	dec01304 	addi	sp,sp,76
  8056ac:	f800283a 	ret
  8056b0:	80c0030b 	ldhu	r3,12(r16)
  8056b4:	1880200c 	andi	r2,r3,128
  8056b8:	10000426 	beq	r2,zero,8056cc <__smakebuf_r+0xfc>
  8056bc:	04801004 	movi	r18,64
  8056c0:	18820014 	ori	r2,r3,2048
  8056c4:	8080030d 	sth	r2,12(r16)
  8056c8:	003fe506 	br	805660 <__smakebuf_r+0x90>
  8056cc:	04810004 	movi	r18,1024
  8056d0:	003ffb06 	br	8056c0 <__smakebuf_r+0xf0>
  8056d4:	8140038f 	ldh	r5,14(r16)
  8056d8:	8809883a 	mov	r4,r17
  8056dc:	0807d040 	call	807d04 <_isatty_r>
  8056e0:	103fde26 	beq	r2,zero,80565c <__smakebuf_r+0x8c>
  8056e4:	8080030b 	ldhu	r2,12(r16)
  8056e8:	80c010c4 	addi	r3,r16,67
  8056ec:	04810004 	movi	r18,1024
  8056f0:	10800054 	ori	r2,r2,1
  8056f4:	8080030d 	sth	r2,12(r16)
  8056f8:	00800044 	movi	r2,1
  8056fc:	80c00415 	stw	r3,16(r16)
  805700:	80800515 	stw	r2,20(r16)
  805704:	80c00015 	stw	r3,0(r16)
  805708:	003fd506 	br	805660 <__smakebuf_r+0x90>
  80570c:	80c00a17 	ldw	r3,40(r16)
  805710:	00802034 	movhi	r2,128
  805714:	109df404 	addi	r2,r2,30672
  805718:	18bfcb1e 	bne	r3,r2,805648 <__smakebuf_r+0x78>
  80571c:	8080030b 	ldhu	r2,12(r16)
  805720:	00c10004 	movi	r3,1024
  805724:	1825883a 	mov	r18,r3
  805728:	10c4b03a 	or	r2,r2,r3
  80572c:	8080030d 	sth	r2,12(r16)
  805730:	80c01315 	stw	r3,76(r16)
  805734:	003fca06 	br	805660 <__smakebuf_r+0x90>
  805738:	8100030b 	ldhu	r4,12(r16)
  80573c:	2080800c 	andi	r2,r4,512
  805740:	103fb21e 	bne	r2,zero,80560c <__smakebuf_r+0x3c>
  805744:	80c010c4 	addi	r3,r16,67
  805748:	21000094 	ori	r4,r4,2
  80574c:	00800044 	movi	r2,1
  805750:	80800515 	stw	r2,20(r16)
  805754:	8100030d 	sth	r4,12(r16)
  805758:	80c00415 	stw	r3,16(r16)
  80575c:	80c00015 	stw	r3,0(r16)
  805760:	003faa06 	br	80560c <__smakebuf_r+0x3c>

00805764 <_malloc_r>:
  805764:	defff604 	addi	sp,sp,-40
  805768:	28c002c4 	addi	r3,r5,11
  80576c:	00800584 	movi	r2,22
  805770:	dc800215 	stw	r18,8(sp)
  805774:	dfc00915 	stw	ra,36(sp)
  805778:	df000815 	stw	fp,32(sp)
  80577c:	ddc00715 	stw	r23,28(sp)
  805780:	dd800615 	stw	r22,24(sp)
  805784:	dd400515 	stw	r21,20(sp)
  805788:	dd000415 	stw	r20,16(sp)
  80578c:	dcc00315 	stw	r19,12(sp)
  805790:	dc400115 	stw	r17,4(sp)
  805794:	dc000015 	stw	r16,0(sp)
  805798:	2025883a 	mov	r18,r4
  80579c:	10c01236 	bltu	r2,r3,8057e8 <_malloc_r+0x84>
  8057a0:	04400404 	movi	r17,16
  8057a4:	8940142e 	bgeu	r17,r5,8057f8 <_malloc_r+0x94>
  8057a8:	00800304 	movi	r2,12
  8057ac:	0007883a 	mov	r3,zero
  8057b0:	90800015 	stw	r2,0(r18)
  8057b4:	1805883a 	mov	r2,r3
  8057b8:	dfc00917 	ldw	ra,36(sp)
  8057bc:	df000817 	ldw	fp,32(sp)
  8057c0:	ddc00717 	ldw	r23,28(sp)
  8057c4:	dd800617 	ldw	r22,24(sp)
  8057c8:	dd400517 	ldw	r21,20(sp)
  8057cc:	dd000417 	ldw	r20,16(sp)
  8057d0:	dcc00317 	ldw	r19,12(sp)
  8057d4:	dc800217 	ldw	r18,8(sp)
  8057d8:	dc400117 	ldw	r17,4(sp)
  8057dc:	dc000017 	ldw	r16,0(sp)
  8057e0:	dec00a04 	addi	sp,sp,40
  8057e4:	f800283a 	ret
  8057e8:	00bffe04 	movi	r2,-8
  8057ec:	18a2703a 	and	r17,r3,r2
  8057f0:	883fed16 	blt	r17,zero,8057a8 <_malloc_r+0x44>
  8057f4:	897fec36 	bltu	r17,r5,8057a8 <_malloc_r+0x44>
  8057f8:	9009883a 	mov	r4,r18
  8057fc:	080a9e80 	call	80a9e8 <__malloc_lock>
  805800:	00807dc4 	movi	r2,503
  805804:	14402b2e 	bgeu	r2,r17,8058b4 <_malloc_r+0x150>
  805808:	8806d27a 	srli	r3,r17,9
  80580c:	18003f1e 	bne	r3,zero,80590c <_malloc_r+0x1a8>
  805810:	880cd0fa 	srli	r6,r17,3
  805814:	300490fa 	slli	r2,r6,3
  805818:	02c02074 	movhi	r11,129
  80581c:	5afa4804 	addi	r11,r11,-5856
  805820:	12cb883a 	add	r5,r2,r11
  805824:	2c000317 	ldw	r16,12(r5)
  805828:	580f883a 	mov	r7,r11
  80582c:	2c00041e 	bne	r5,r16,805840 <_malloc_r+0xdc>
  805830:	00000a06 	br	80585c <_malloc_r+0xf8>
  805834:	1800860e 	bge	r3,zero,805a50 <_malloc_r+0x2ec>
  805838:	84000317 	ldw	r16,12(r16)
  80583c:	2c000726 	beq	r5,r16,80585c <_malloc_r+0xf8>
  805840:	80800117 	ldw	r2,4(r16)
  805844:	00ffff04 	movi	r3,-4
  805848:	10c8703a 	and	r4,r2,r3
  80584c:	2447c83a 	sub	r3,r4,r17
  805850:	008003c4 	movi	r2,15
  805854:	10fff70e 	bge	r2,r3,805834 <_malloc_r+0xd0>
  805858:	31bfffc4 	addi	r6,r6,-1
  80585c:	32400044 	addi	r9,r6,1
  805860:	02802074 	movhi	r10,129
  805864:	52ba4a04 	addi	r10,r10,-5848
  805868:	54000217 	ldw	r16,8(r10)
  80586c:	8280a026 	beq	r16,r10,805af0 <_malloc_r+0x38c>
  805870:	80800117 	ldw	r2,4(r16)
  805874:	00ffff04 	movi	r3,-4
  805878:	10ca703a 	and	r5,r2,r3
  80587c:	2c4dc83a 	sub	r6,r5,r17
  805880:	008003c4 	movi	r2,15
  805884:	11808316 	blt	r2,r6,805a94 <_malloc_r+0x330>
  805888:	52800315 	stw	r10,12(r10)
  80588c:	52800215 	stw	r10,8(r10)
  805890:	30002916 	blt	r6,zero,805938 <_malloc_r+0x1d4>
  805894:	8147883a 	add	r3,r16,r5
  805898:	18800117 	ldw	r2,4(r3)
  80589c:	9009883a 	mov	r4,r18
  8058a0:	10800054 	ori	r2,r2,1
  8058a4:	18800115 	stw	r2,4(r3)
  8058a8:	080aa080 	call	80aa08 <__malloc_unlock>
  8058ac:	80c00204 	addi	r3,r16,8
  8058b0:	003fc006 	br	8057b4 <_malloc_r+0x50>
  8058b4:	02c02074 	movhi	r11,129
  8058b8:	5afa4804 	addi	r11,r11,-5856
  8058bc:	8ac5883a 	add	r2,r17,r11
  8058c0:	14000317 	ldw	r16,12(r2)
  8058c4:	580f883a 	mov	r7,r11
  8058c8:	8806d0fa 	srli	r3,r17,3
  8058cc:	14006c26 	beq	r2,r16,805a80 <_malloc_r+0x31c>
  8058d0:	80c00117 	ldw	r3,4(r16)
  8058d4:	00bfff04 	movi	r2,-4
  8058d8:	81800317 	ldw	r6,12(r16)
  8058dc:	1886703a 	and	r3,r3,r2
  8058e0:	80c7883a 	add	r3,r16,r3
  8058e4:	18800117 	ldw	r2,4(r3)
  8058e8:	81400217 	ldw	r5,8(r16)
  8058ec:	9009883a 	mov	r4,r18
  8058f0:	10800054 	ori	r2,r2,1
  8058f4:	18800115 	stw	r2,4(r3)
  8058f8:	31400215 	stw	r5,8(r6)
  8058fc:	29800315 	stw	r6,12(r5)
  805900:	080aa080 	call	80aa08 <__malloc_unlock>
  805904:	80c00204 	addi	r3,r16,8
  805908:	003faa06 	br	8057b4 <_malloc_r+0x50>
  80590c:	00800104 	movi	r2,4
  805910:	10c0052e 	bgeu	r2,r3,805928 <_malloc_r+0x1c4>
  805914:	00800504 	movi	r2,20
  805918:	10c07836 	bltu	r2,r3,805afc <_malloc_r+0x398>
  80591c:	198016c4 	addi	r6,r3,91
  805920:	300490fa 	slli	r2,r6,3
  805924:	003fbc06 	br	805818 <_malloc_r+0xb4>
  805928:	8804d1ba 	srli	r2,r17,6
  80592c:	11800e04 	addi	r6,r2,56
  805930:	300490fa 	slli	r2,r6,3
  805934:	003fb806 	br	805818 <_malloc_r+0xb4>
  805938:	00807fc4 	movi	r2,511
  80593c:	1140bb36 	bltu	r2,r5,805c2c <_malloc_r+0x4c8>
  805940:	2806d0fa 	srli	r3,r5,3
  805944:	573ffe04 	addi	fp,r10,-8
  805948:	00800044 	movi	r2,1
  80594c:	180890fa 	slli	r4,r3,3
  805950:	1807d0ba 	srai	r3,r3,2
  805954:	e1c00117 	ldw	r7,4(fp)
  805958:	5909883a 	add	r4,r11,r4
  80595c:	21400217 	ldw	r5,8(r4)
  805960:	10c4983a 	sll	r2,r2,r3
  805964:	81000315 	stw	r4,12(r16)
  805968:	81400215 	stw	r5,8(r16)
  80596c:	388eb03a 	or	r7,r7,r2
  805970:	2c000315 	stw	r16,12(r5)
  805974:	24000215 	stw	r16,8(r4)
  805978:	e1c00115 	stw	r7,4(fp)
  80597c:	4807883a 	mov	r3,r9
  805980:	4800cd16 	blt	r9,zero,805cb8 <_malloc_r+0x554>
  805984:	1807d0ba 	srai	r3,r3,2
  805988:	00800044 	movi	r2,1
  80598c:	10c8983a 	sll	r4,r2,r3
  805990:	39004436 	bltu	r7,r4,805aa4 <_malloc_r+0x340>
  805994:	21c4703a 	and	r2,r4,r7
  805998:	10000a1e 	bne	r2,zero,8059c4 <_malloc_r+0x260>
  80599c:	2109883a 	add	r4,r4,r4
  8059a0:	00bfff04 	movi	r2,-4
  8059a4:	4884703a 	and	r2,r9,r2
  8059a8:	3906703a 	and	r3,r7,r4
  8059ac:	12400104 	addi	r9,r2,4
  8059b0:	1800041e 	bne	r3,zero,8059c4 <_malloc_r+0x260>
  8059b4:	2109883a 	add	r4,r4,r4
  8059b8:	3904703a 	and	r2,r7,r4
  8059bc:	4a400104 	addi	r9,r9,4
  8059c0:	103ffc26 	beq	r2,zero,8059b4 <_malloc_r+0x250>
  8059c4:	480490fa 	slli	r2,r9,3
  8059c8:	4819883a 	mov	r12,r9
  8059cc:	023fff04 	movi	r8,-4
  8059d0:	589b883a 	add	r13,r11,r2
  8059d4:	6807883a 	mov	r3,r13
  8059d8:	014003c4 	movi	r5,15
  8059dc:	1c000317 	ldw	r16,12(r3)
  8059e0:	1c00041e 	bne	r3,r16,8059f4 <_malloc_r+0x290>
  8059e4:	0000a706 	br	805c84 <_malloc_r+0x520>
  8059e8:	3000ab0e 	bge	r6,zero,805c98 <_malloc_r+0x534>
  8059ec:	84000317 	ldw	r16,12(r16)
  8059f0:	1c00a426 	beq	r3,r16,805c84 <_malloc_r+0x520>
  8059f4:	80800117 	ldw	r2,4(r16)
  8059f8:	1204703a 	and	r2,r2,r8
  8059fc:	144dc83a 	sub	r6,r2,r17
  805a00:	29bff90e 	bge	r5,r6,8059e8 <_malloc_r+0x284>
  805a04:	81000317 	ldw	r4,12(r16)
  805a08:	80c00217 	ldw	r3,8(r16)
  805a0c:	89400054 	ori	r5,r17,1
  805a10:	8445883a 	add	r2,r16,r17
  805a14:	20c00215 	stw	r3,8(r4)
  805a18:	19000315 	stw	r4,12(r3)
  805a1c:	81400115 	stw	r5,4(r16)
  805a20:	1187883a 	add	r3,r2,r6
  805a24:	31000054 	ori	r4,r6,1
  805a28:	50800315 	stw	r2,12(r10)
  805a2c:	50800215 	stw	r2,8(r10)
  805a30:	19800015 	stw	r6,0(r3)
  805a34:	11000115 	stw	r4,4(r2)
  805a38:	12800215 	stw	r10,8(r2)
  805a3c:	12800315 	stw	r10,12(r2)
  805a40:	9009883a 	mov	r4,r18
  805a44:	080aa080 	call	80aa08 <__malloc_unlock>
  805a48:	80c00204 	addi	r3,r16,8
  805a4c:	003f5906 	br	8057b4 <_malloc_r+0x50>
  805a50:	8109883a 	add	r4,r16,r4
  805a54:	20800117 	ldw	r2,4(r4)
  805a58:	80c00217 	ldw	r3,8(r16)
  805a5c:	81400317 	ldw	r5,12(r16)
  805a60:	10800054 	ori	r2,r2,1
  805a64:	20800115 	stw	r2,4(r4)
  805a68:	28c00215 	stw	r3,8(r5)
  805a6c:	19400315 	stw	r5,12(r3)
  805a70:	9009883a 	mov	r4,r18
  805a74:	080aa080 	call	80aa08 <__malloc_unlock>
  805a78:	80c00204 	addi	r3,r16,8
  805a7c:	003f4d06 	br	8057b4 <_malloc_r+0x50>
  805a80:	80800204 	addi	r2,r16,8
  805a84:	14000317 	ldw	r16,12(r2)
  805a88:	143f911e 	bne	r2,r16,8058d0 <_malloc_r+0x16c>
  805a8c:	1a400084 	addi	r9,r3,2
  805a90:	003f7306 	br	805860 <_malloc_r+0xfc>
  805a94:	88c00054 	ori	r3,r17,1
  805a98:	8445883a 	add	r2,r16,r17
  805a9c:	80c00115 	stw	r3,4(r16)
  805aa0:	003fdf06 	br	805a20 <_malloc_r+0x2bc>
  805aa4:	e4000217 	ldw	r16,8(fp)
  805aa8:	00bfff04 	movi	r2,-4
  805aac:	80c00117 	ldw	r3,4(r16)
  805ab0:	802d883a 	mov	r22,r16
  805ab4:	18aa703a 	and	r21,r3,r2
  805ab8:	ac401636 	bltu	r21,r17,805b14 <_malloc_r+0x3b0>
  805abc:	ac49c83a 	sub	r4,r21,r17
  805ac0:	008003c4 	movi	r2,15
  805ac4:	1100130e 	bge	r2,r4,805b14 <_malloc_r+0x3b0>
  805ac8:	88800054 	ori	r2,r17,1
  805acc:	8447883a 	add	r3,r16,r17
  805ad0:	80800115 	stw	r2,4(r16)
  805ad4:	20800054 	ori	r2,r4,1
  805ad8:	18800115 	stw	r2,4(r3)
  805adc:	e0c00215 	stw	r3,8(fp)
  805ae0:	9009883a 	mov	r4,r18
  805ae4:	080aa080 	call	80aa08 <__malloc_unlock>
  805ae8:	80c00204 	addi	r3,r16,8
  805aec:	003f3106 	br	8057b4 <_malloc_r+0x50>
  805af0:	39c00117 	ldw	r7,4(r7)
  805af4:	573ffe04 	addi	fp,r10,-8
  805af8:	003fa006 	br	80597c <_malloc_r+0x218>
  805afc:	00801504 	movi	r2,84
  805b00:	10c06736 	bltu	r2,r3,805ca0 <_malloc_r+0x53c>
  805b04:	8804d33a 	srli	r2,r17,12
  805b08:	11801b84 	addi	r6,r2,110
  805b0c:	300490fa 	slli	r2,r6,3
  805b10:	003f4106 	br	805818 <_malloc_r+0xb4>
  805b14:	d0a6fc17 	ldw	r2,-25616(gp)
  805b18:	d0e00517 	ldw	r3,-32748(gp)
  805b1c:	053fffc4 	movi	r20,-1
  805b20:	10800404 	addi	r2,r2,16
  805b24:	88a7883a 	add	r19,r17,r2
  805b28:	1d000326 	beq	r3,r20,805b38 <_malloc_r+0x3d4>
  805b2c:	98c3ffc4 	addi	r3,r19,4095
  805b30:	00bc0004 	movi	r2,-4096
  805b34:	18a6703a 	and	r19,r3,r2
  805b38:	9009883a 	mov	r4,r18
  805b3c:	980b883a 	mov	r5,r19
  805b40:	08077580 	call	807758 <_sbrk_r>
  805b44:	1009883a 	mov	r4,r2
  805b48:	15000426 	beq	r2,r20,805b5c <_malloc_r+0x3f8>
  805b4c:	854b883a 	add	r5,r16,r21
  805b50:	1029883a 	mov	r20,r2
  805b54:	11405a2e 	bgeu	r2,r5,805cc0 <_malloc_r+0x55c>
  805b58:	87000c26 	beq	r16,fp,805b8c <_malloc_r+0x428>
  805b5c:	e4000217 	ldw	r16,8(fp)
  805b60:	80c00117 	ldw	r3,4(r16)
  805b64:	00bfff04 	movi	r2,-4
  805b68:	1884703a 	and	r2,r3,r2
  805b6c:	14400336 	bltu	r2,r17,805b7c <_malloc_r+0x418>
  805b70:	1449c83a 	sub	r4,r2,r17
  805b74:	008003c4 	movi	r2,15
  805b78:	113fd316 	blt	r2,r4,805ac8 <_malloc_r+0x364>
  805b7c:	9009883a 	mov	r4,r18
  805b80:	080aa080 	call	80aa08 <__malloc_unlock>
  805b84:	0007883a 	mov	r3,zero
  805b88:	003f0a06 	br	8057b4 <_malloc_r+0x50>
  805b8c:	05c02074 	movhi	r23,129
  805b90:	bdc71d04 	addi	r23,r23,7284
  805b94:	b8800017 	ldw	r2,0(r23)
  805b98:	988d883a 	add	r6,r19,r2
  805b9c:	b9800015 	stw	r6,0(r23)
  805ba0:	d0e00517 	ldw	r3,-32748(gp)
  805ba4:	00bfffc4 	movi	r2,-1
  805ba8:	18808e26 	beq	r3,r2,805de4 <_malloc_r+0x680>
  805bac:	2145c83a 	sub	r2,r4,r5
  805bb0:	3085883a 	add	r2,r6,r2
  805bb4:	b8800015 	stw	r2,0(r23)
  805bb8:	20c001cc 	andi	r3,r4,7
  805bbc:	18005f1e 	bne	r3,zero,805d3c <_malloc_r+0x5d8>
  805bc0:	000b883a 	mov	r5,zero
  805bc4:	a4c5883a 	add	r2,r20,r19
  805bc8:	1083ffcc 	andi	r2,r2,4095
  805bcc:	00c40004 	movi	r3,4096
  805bd0:	1887c83a 	sub	r3,r3,r2
  805bd4:	28e7883a 	add	r19,r5,r3
  805bd8:	9009883a 	mov	r4,r18
  805bdc:	980b883a 	mov	r5,r19
  805be0:	08077580 	call	807758 <_sbrk_r>
  805be4:	1007883a 	mov	r3,r2
  805be8:	00bfffc4 	movi	r2,-1
  805bec:	18807a26 	beq	r3,r2,805dd8 <_malloc_r+0x674>
  805bf0:	1d05c83a 	sub	r2,r3,r20
  805bf4:	9885883a 	add	r2,r19,r2
  805bf8:	10c00054 	ori	r3,r2,1
  805bfc:	b8800017 	ldw	r2,0(r23)
  805c00:	a021883a 	mov	r16,r20
  805c04:	a0c00115 	stw	r3,4(r20)
  805c08:	9885883a 	add	r2,r19,r2
  805c0c:	b8800015 	stw	r2,0(r23)
  805c10:	e5000215 	stw	r20,8(fp)
  805c14:	b7003626 	beq	r22,fp,805cf0 <_malloc_r+0x58c>
  805c18:	018003c4 	movi	r6,15
  805c1c:	35404b36 	bltu	r6,r21,805d4c <_malloc_r+0x5e8>
  805c20:	00800044 	movi	r2,1
  805c24:	a0800115 	stw	r2,4(r20)
  805c28:	003fcd06 	br	805b60 <_malloc_r+0x3fc>
  805c2c:	2808d27a 	srli	r4,r5,9
  805c30:	2000371e 	bne	r4,zero,805d10 <_malloc_r+0x5ac>
  805c34:	2808d0fa 	srli	r4,r5,3
  805c38:	200690fa 	slli	r3,r4,3
  805c3c:	1ad1883a 	add	r8,r3,r11
  805c40:	41800217 	ldw	r6,8(r8)
  805c44:	41805b26 	beq	r8,r6,805db4 <_malloc_r+0x650>
  805c48:	30800117 	ldw	r2,4(r6)
  805c4c:	00ffff04 	movi	r3,-4
  805c50:	10c4703a 	and	r2,r2,r3
  805c54:	2880022e 	bgeu	r5,r2,805c60 <_malloc_r+0x4fc>
  805c58:	31800217 	ldw	r6,8(r6)
  805c5c:	41bffa1e 	bne	r8,r6,805c48 <_malloc_r+0x4e4>
  805c60:	32000317 	ldw	r8,12(r6)
  805c64:	39c00117 	ldw	r7,4(r7)
  805c68:	82000315 	stw	r8,12(r16)
  805c6c:	81800215 	stw	r6,8(r16)
  805c70:	07002074 	movhi	fp,129
  805c74:	e73a4804 	addi	fp,fp,-5856
  805c78:	34000315 	stw	r16,12(r6)
  805c7c:	44000215 	stw	r16,8(r8)
  805c80:	003f3e06 	br	80597c <_malloc_r+0x218>
  805c84:	63000044 	addi	r12,r12,1
  805c88:	608000cc 	andi	r2,r12,3
  805c8c:	10005d26 	beq	r2,zero,805e04 <_malloc_r+0x6a0>
  805c90:	18c00204 	addi	r3,r3,8
  805c94:	003f5106 	br	8059dc <_malloc_r+0x278>
  805c98:	8089883a 	add	r4,r16,r2
  805c9c:	003f6d06 	br	805a54 <_malloc_r+0x2f0>
  805ca0:	00805504 	movi	r2,340
  805ca4:	10c02036 	bltu	r2,r3,805d28 <_malloc_r+0x5c4>
  805ca8:	8804d3fa 	srli	r2,r17,15
  805cac:	11801dc4 	addi	r6,r2,119
  805cb0:	300490fa 	slli	r2,r6,3
  805cb4:	003ed806 	br	805818 <_malloc_r+0xb4>
  805cb8:	48c000c4 	addi	r3,r9,3
  805cbc:	003f3106 	br	805984 <_malloc_r+0x220>
  805cc0:	05c02074 	movhi	r23,129
  805cc4:	bdc71d04 	addi	r23,r23,7284
  805cc8:	b8800017 	ldw	r2,0(r23)
  805ccc:	988d883a 	add	r6,r19,r2
  805cd0:	b9800015 	stw	r6,0(r23)
  805cd4:	293fb21e 	bne	r5,r4,805ba0 <_malloc_r+0x43c>
  805cd8:	2083ffcc 	andi	r2,r4,4095
  805cdc:	103fb01e 	bne	r2,zero,805ba0 <_malloc_r+0x43c>
  805ce0:	e4000217 	ldw	r16,8(fp)
  805ce4:	9d45883a 	add	r2,r19,r21
  805ce8:	10800054 	ori	r2,r2,1
  805cec:	80800115 	stw	r2,4(r16)
  805cf0:	b8c00017 	ldw	r3,0(r23)
  805cf4:	d0a6fd17 	ldw	r2,-25612(gp)
  805cf8:	10c0012e 	bgeu	r2,r3,805d00 <_malloc_r+0x59c>
  805cfc:	d0e6fd15 	stw	r3,-25612(gp)
  805d00:	d0a6fe17 	ldw	r2,-25608(gp)
  805d04:	10ff962e 	bgeu	r2,r3,805b60 <_malloc_r+0x3fc>
  805d08:	d0e6fe15 	stw	r3,-25608(gp)
  805d0c:	003f9406 	br	805b60 <_malloc_r+0x3fc>
  805d10:	00800104 	movi	r2,4
  805d14:	11001e36 	bltu	r2,r4,805d90 <_malloc_r+0x62c>
  805d18:	2804d1ba 	srli	r2,r5,6
  805d1c:	11000e04 	addi	r4,r2,56
  805d20:	200690fa 	slli	r3,r4,3
  805d24:	003fc506 	br	805c3c <_malloc_r+0x4d8>
  805d28:	00815504 	movi	r2,1364
  805d2c:	10c01d2e 	bgeu	r2,r3,805da4 <_malloc_r+0x640>
  805d30:	01801f84 	movi	r6,126
  805d34:	0080fc04 	movi	r2,1008
  805d38:	003eb706 	br	805818 <_malloc_r+0xb4>
  805d3c:	00800204 	movi	r2,8
  805d40:	10cbc83a 	sub	r5,r2,r3
  805d44:	2169883a 	add	r20,r4,r5
  805d48:	003f9e06 	br	805bc4 <_malloc_r+0x460>
  805d4c:	00bffe04 	movi	r2,-8
  805d50:	a93ffd04 	addi	r4,r21,-12
  805d54:	2088703a 	and	r4,r4,r2
  805d58:	b10b883a 	add	r5,r22,r4
  805d5c:	00c00144 	movi	r3,5
  805d60:	28c00215 	stw	r3,8(r5)
  805d64:	28c00115 	stw	r3,4(r5)
  805d68:	b0800117 	ldw	r2,4(r22)
  805d6c:	1080004c 	andi	r2,r2,1
  805d70:	2084b03a 	or	r2,r4,r2
  805d74:	b0800115 	stw	r2,4(r22)
  805d78:	313fdd2e 	bgeu	r6,r4,805cf0 <_malloc_r+0x58c>
  805d7c:	b1400204 	addi	r5,r22,8
  805d80:	9009883a 	mov	r4,r18
  805d84:	0804b680 	call	804b68 <_free_r>
  805d88:	e4000217 	ldw	r16,8(fp)
  805d8c:	003fd806 	br	805cf0 <_malloc_r+0x58c>
  805d90:	00800504 	movi	r2,20
  805d94:	11001536 	bltu	r2,r4,805dec <_malloc_r+0x688>
  805d98:	210016c4 	addi	r4,r4,91
  805d9c:	200690fa 	slli	r3,r4,3
  805da0:	003fa606 	br	805c3c <_malloc_r+0x4d8>
  805da4:	8804d4ba 	srli	r2,r17,18
  805da8:	11801f04 	addi	r6,r2,124
  805dac:	300490fa 	slli	r2,r6,3
  805db0:	003e9906 	br	805818 <_malloc_r+0xb4>
  805db4:	2009d0ba 	srai	r4,r4,2
  805db8:	01402074 	movhi	r5,129
  805dbc:	297a4804 	addi	r5,r5,-5856
  805dc0:	00c00044 	movi	r3,1
  805dc4:	28800117 	ldw	r2,4(r5)
  805dc8:	1906983a 	sll	r3,r3,r4
  805dcc:	10c4b03a 	or	r2,r2,r3
  805dd0:	28800115 	stw	r2,4(r5)
  805dd4:	003fa306 	br	805c64 <_malloc_r+0x500>
  805dd8:	0027883a 	mov	r19,zero
  805ddc:	00c00044 	movi	r3,1
  805de0:	003f8606 	br	805bfc <_malloc_r+0x498>
  805de4:	d1200515 	stw	r4,-32748(gp)
  805de8:	003f7306 	br	805bb8 <_malloc_r+0x454>
  805dec:	00801504 	movi	r2,84
  805df0:	11001936 	bltu	r2,r4,805e58 <_malloc_r+0x6f4>
  805df4:	2804d33a 	srli	r2,r5,12
  805df8:	11001b84 	addi	r4,r2,110
  805dfc:	200690fa 	slli	r3,r4,3
  805e00:	003f8e06 	br	805c3c <_malloc_r+0x4d8>
  805e04:	480b883a 	mov	r5,r9
  805e08:	6807883a 	mov	r3,r13
  805e0c:	288000cc 	andi	r2,r5,3
  805e10:	18fffe04 	addi	r3,r3,-8
  805e14:	297fffc4 	addi	r5,r5,-1
  805e18:	10001526 	beq	r2,zero,805e70 <_malloc_r+0x70c>
  805e1c:	18800217 	ldw	r2,8(r3)
  805e20:	10fffa26 	beq	r2,r3,805e0c <_malloc_r+0x6a8>
  805e24:	2109883a 	add	r4,r4,r4
  805e28:	393f1e36 	bltu	r7,r4,805aa4 <_malloc_r+0x340>
  805e2c:	203f1d26 	beq	r4,zero,805aa4 <_malloc_r+0x340>
  805e30:	21c4703a 	and	r2,r4,r7
  805e34:	10000226 	beq	r2,zero,805e40 <_malloc_r+0x6dc>
  805e38:	6013883a 	mov	r9,r12
  805e3c:	003ee106 	br	8059c4 <_malloc_r+0x260>
  805e40:	2109883a 	add	r4,r4,r4
  805e44:	3904703a 	and	r2,r7,r4
  805e48:	63000104 	addi	r12,r12,4
  805e4c:	103ffc26 	beq	r2,zero,805e40 <_malloc_r+0x6dc>
  805e50:	6013883a 	mov	r9,r12
  805e54:	003edb06 	br	8059c4 <_malloc_r+0x260>
  805e58:	00805504 	movi	r2,340
  805e5c:	11000836 	bltu	r2,r4,805e80 <_malloc_r+0x71c>
  805e60:	2804d3fa 	srli	r2,r5,15
  805e64:	11001dc4 	addi	r4,r2,119
  805e68:	200690fa 	slli	r3,r4,3
  805e6c:	003f7306 	br	805c3c <_malloc_r+0x4d8>
  805e70:	0104303a 	nor	r2,zero,r4
  805e74:	388e703a 	and	r7,r7,r2
  805e78:	e1c00115 	stw	r7,4(fp)
  805e7c:	003fe906 	br	805e24 <_malloc_r+0x6c0>
  805e80:	00815504 	movi	r2,1364
  805e84:	1100032e 	bgeu	r2,r4,805e94 <_malloc_r+0x730>
  805e88:	01001f84 	movi	r4,126
  805e8c:	00c0fc04 	movi	r3,1008
  805e90:	003f6a06 	br	805c3c <_malloc_r+0x4d8>
  805e94:	2804d4ba 	srli	r2,r5,18
  805e98:	11001f04 	addi	r4,r2,124
  805e9c:	200690fa 	slli	r3,r4,3
  805ea0:	003f6606 	br	805c3c <_malloc_r+0x4d8>

00805ea4 <memchr>:
  805ea4:	008000c4 	movi	r2,3
  805ea8:	29403fcc 	andi	r5,r5,255
  805eac:	2007883a 	mov	r3,r4
  805eb0:	1180022e 	bgeu	r2,r6,805ebc <memchr+0x18>
  805eb4:	2084703a 	and	r2,r4,r2
  805eb8:	10000b26 	beq	r2,zero,805ee8 <memchr+0x44>
  805ebc:	313fffc4 	addi	r4,r6,-1
  805ec0:	3000051e 	bne	r6,zero,805ed8 <memchr+0x34>
  805ec4:	00002c06 	br	805f78 <memchr+0xd4>
  805ec8:	213fffc4 	addi	r4,r4,-1
  805ecc:	00bfffc4 	movi	r2,-1
  805ed0:	18c00044 	addi	r3,r3,1
  805ed4:	20802826 	beq	r4,r2,805f78 <memchr+0xd4>
  805ed8:	18800003 	ldbu	r2,0(r3)
  805edc:	28bffa1e 	bne	r5,r2,805ec8 <memchr+0x24>
  805ee0:	1805883a 	mov	r2,r3
  805ee4:	f800283a 	ret
  805ee8:	0011883a 	mov	r8,zero
  805eec:	0007883a 	mov	r3,zero
  805ef0:	01c00104 	movi	r7,4
  805ef4:	4004923a 	slli	r2,r8,8
  805ef8:	18c00044 	addi	r3,r3,1
  805efc:	1151883a 	add	r8,r2,r5
  805f00:	19fffc1e 	bne	r3,r7,805ef4 <memchr+0x50>
  805f04:	02bfbff4 	movhi	r10,65279
  805f08:	52bfbfc4 	addi	r10,r10,-257
  805f0c:	02602074 	movhi	r9,32897
  805f10:	4a602004 	addi	r9,r9,-32640
  805f14:	02c000c4 	movi	r11,3
  805f18:	20800017 	ldw	r2,0(r4)
  805f1c:	31bfff04 	addi	r6,r6,-4
  805f20:	200f883a 	mov	r7,r4
  805f24:	1204f03a 	xor	r2,r2,r8
  805f28:	1287883a 	add	r3,r2,r10
  805f2c:	1a46703a 	and	r3,r3,r9
  805f30:	0084303a 	nor	r2,zero,r2
  805f34:	10c4703a 	and	r2,r2,r3
  805f38:	10000b26 	beq	r2,zero,805f68 <memchr+0xc4>
  805f3c:	20800003 	ldbu	r2,0(r4)
  805f40:	28800f26 	beq	r5,r2,805f80 <memchr+0xdc>
  805f44:	20800043 	ldbu	r2,1(r4)
  805f48:	21c00044 	addi	r7,r4,1
  805f4c:	28800c26 	beq	r5,r2,805f80 <memchr+0xdc>
  805f50:	20800083 	ldbu	r2,2(r4)
  805f54:	21c00084 	addi	r7,r4,2
  805f58:	28800926 	beq	r5,r2,805f80 <memchr+0xdc>
  805f5c:	208000c3 	ldbu	r2,3(r4)
  805f60:	21c000c4 	addi	r7,r4,3
  805f64:	28800626 	beq	r5,r2,805f80 <memchr+0xdc>
  805f68:	21000104 	addi	r4,r4,4
  805f6c:	59bfea36 	bltu	r11,r6,805f18 <memchr+0x74>
  805f70:	2007883a 	mov	r3,r4
  805f74:	003fd106 	br	805ebc <memchr+0x18>
  805f78:	0005883a 	mov	r2,zero
  805f7c:	f800283a 	ret
  805f80:	3805883a 	mov	r2,r7
  805f84:	f800283a 	ret

00805f88 <memmove>:
  805f88:	2807883a 	mov	r3,r5
  805f8c:	2011883a 	mov	r8,r4
  805f90:	29000c2e 	bgeu	r5,r4,805fc4 <memmove+0x3c>
  805f94:	298f883a 	add	r7,r5,r6
  805f98:	21c00a2e 	bgeu	r4,r7,805fc4 <memmove+0x3c>
  805f9c:	30000726 	beq	r6,zero,805fbc <memmove+0x34>
  805fa0:	2187883a 	add	r3,r4,r6
  805fa4:	198dc83a 	sub	r6,r3,r6
  805fa8:	39ffffc4 	addi	r7,r7,-1
  805fac:	38800003 	ldbu	r2,0(r7)
  805fb0:	18ffffc4 	addi	r3,r3,-1
  805fb4:	18800005 	stb	r2,0(r3)
  805fb8:	19bffb1e 	bne	r3,r6,805fa8 <memmove+0x20>
  805fbc:	2005883a 	mov	r2,r4
  805fc0:	f800283a 	ret
  805fc4:	01c003c4 	movi	r7,15
  805fc8:	39800a36 	bltu	r7,r6,805ff4 <memmove+0x6c>
  805fcc:	303ffb26 	beq	r6,zero,805fbc <memmove+0x34>
  805fd0:	400f883a 	mov	r7,r8
  805fd4:	320d883a 	add	r6,r6,r8
  805fd8:	28800003 	ldbu	r2,0(r5)
  805fdc:	29400044 	addi	r5,r5,1
  805fe0:	38800005 	stb	r2,0(r7)
  805fe4:	39c00044 	addi	r7,r7,1
  805fe8:	39bffb1e 	bne	r7,r6,805fd8 <memmove+0x50>
  805fec:	2005883a 	mov	r2,r4
  805ff0:	f800283a 	ret
  805ff4:	1904b03a 	or	r2,r3,r4
  805ff8:	108000cc 	andi	r2,r2,3
  805ffc:	103ff31e 	bne	r2,zero,805fcc <memmove+0x44>
  806000:	3811883a 	mov	r8,r7
  806004:	180b883a 	mov	r5,r3
  806008:	200f883a 	mov	r7,r4
  80600c:	28c00017 	ldw	r3,0(r5)
  806010:	31bffc04 	addi	r6,r6,-16
  806014:	38c00015 	stw	r3,0(r7)
  806018:	28800117 	ldw	r2,4(r5)
  80601c:	38800115 	stw	r2,4(r7)
  806020:	28c00217 	ldw	r3,8(r5)
  806024:	38c00215 	stw	r3,8(r7)
  806028:	28800317 	ldw	r2,12(r5)
  80602c:	29400404 	addi	r5,r5,16
  806030:	38800315 	stw	r2,12(r7)
  806034:	39c00404 	addi	r7,r7,16
  806038:	41bff436 	bltu	r8,r6,80600c <memmove+0x84>
  80603c:	008000c4 	movi	r2,3
  806040:	1180072e 	bgeu	r2,r6,806060 <memmove+0xd8>
  806044:	1007883a 	mov	r3,r2
  806048:	28800017 	ldw	r2,0(r5)
  80604c:	31bfff04 	addi	r6,r6,-4
  806050:	29400104 	addi	r5,r5,4
  806054:	38800015 	stw	r2,0(r7)
  806058:	39c00104 	addi	r7,r7,4
  80605c:	19bffa36 	bltu	r3,r6,806048 <memmove+0xc0>
  806060:	3811883a 	mov	r8,r7
  806064:	003fd906 	br	805fcc <memmove+0x44>

00806068 <memset>:
  806068:	008000c4 	movi	r2,3
  80606c:	29403fcc 	andi	r5,r5,255
  806070:	2007883a 	mov	r3,r4
  806074:	1180022e 	bgeu	r2,r6,806080 <memset+0x18>
  806078:	2084703a 	and	r2,r4,r2
  80607c:	10000826 	beq	r2,zero,8060a0 <memset+0x38>
  806080:	30000526 	beq	r6,zero,806098 <memset+0x30>
  806084:	2805883a 	mov	r2,r5
  806088:	30cd883a 	add	r6,r6,r3
  80608c:	18800005 	stb	r2,0(r3)
  806090:	18c00044 	addi	r3,r3,1
  806094:	19bffd1e 	bne	r3,r6,80608c <memset+0x24>
  806098:	2005883a 	mov	r2,r4
  80609c:	f800283a 	ret
  8060a0:	2804923a 	slli	r2,r5,8
  8060a4:	020003c4 	movi	r8,15
  8060a8:	200f883a 	mov	r7,r4
  8060ac:	2884b03a 	or	r2,r5,r2
  8060b0:	1006943a 	slli	r3,r2,16
  8060b4:	10c6b03a 	or	r3,r2,r3
  8060b8:	41800a2e 	bgeu	r8,r6,8060e4 <memset+0x7c>
  8060bc:	4005883a 	mov	r2,r8
  8060c0:	31bffc04 	addi	r6,r6,-16
  8060c4:	38c00015 	stw	r3,0(r7)
  8060c8:	38c00115 	stw	r3,4(r7)
  8060cc:	38c00215 	stw	r3,8(r7)
  8060d0:	38c00315 	stw	r3,12(r7)
  8060d4:	39c00404 	addi	r7,r7,16
  8060d8:	11bff936 	bltu	r2,r6,8060c0 <memset+0x58>
  8060dc:	008000c4 	movi	r2,3
  8060e0:	1180052e 	bgeu	r2,r6,8060f8 <memset+0x90>
  8060e4:	31bfff04 	addi	r6,r6,-4
  8060e8:	008000c4 	movi	r2,3
  8060ec:	38c00015 	stw	r3,0(r7)
  8060f0:	39c00104 	addi	r7,r7,4
  8060f4:	11bffb36 	bltu	r2,r6,8060e4 <memset+0x7c>
  8060f8:	3807883a 	mov	r3,r7
  8060fc:	003fe006 	br	806080 <memset+0x18>

00806100 <_Bfree>:
  806100:	28000826 	beq	r5,zero,806124 <_Bfree+0x24>
  806104:	28800117 	ldw	r2,4(r5)
  806108:	21001317 	ldw	r4,76(r4)
  80610c:	1085883a 	add	r2,r2,r2
  806110:	1085883a 	add	r2,r2,r2
  806114:	1105883a 	add	r2,r2,r4
  806118:	10c00017 	ldw	r3,0(r2)
  80611c:	28c00015 	stw	r3,0(r5)
  806120:	11400015 	stw	r5,0(r2)
  806124:	f800283a 	ret

00806128 <__hi0bits>:
  806128:	20bfffec 	andhi	r2,r4,65535
  80612c:	10001426 	beq	r2,zero,806180 <__hi0bits+0x58>
  806130:	0007883a 	mov	r3,zero
  806134:	20bfc02c 	andhi	r2,r4,65280
  806138:	1000021e 	bne	r2,zero,806144 <__hi0bits+0x1c>
  80613c:	2008923a 	slli	r4,r4,8
  806140:	18c00204 	addi	r3,r3,8
  806144:	20bc002c 	andhi	r2,r4,61440
  806148:	1000021e 	bne	r2,zero,806154 <__hi0bits+0x2c>
  80614c:	2008913a 	slli	r4,r4,4
  806150:	18c00104 	addi	r3,r3,4
  806154:	20b0002c 	andhi	r2,r4,49152
  806158:	1000031e 	bne	r2,zero,806168 <__hi0bits+0x40>
  80615c:	2105883a 	add	r2,r4,r4
  806160:	18c00084 	addi	r3,r3,2
  806164:	1089883a 	add	r4,r2,r2
  806168:	20000316 	blt	r4,zero,806178 <__hi0bits+0x50>
  80616c:	2090002c 	andhi	r2,r4,16384
  806170:	10000626 	beq	r2,zero,80618c <__hi0bits+0x64>
  806174:	18c00044 	addi	r3,r3,1
  806178:	1805883a 	mov	r2,r3
  80617c:	f800283a 	ret
  806180:	2008943a 	slli	r4,r4,16
  806184:	00c00404 	movi	r3,16
  806188:	003fea06 	br	806134 <__hi0bits+0xc>
  80618c:	00c00804 	movi	r3,32
  806190:	1805883a 	mov	r2,r3
  806194:	f800283a 	ret

00806198 <__lo0bits>:
  806198:	20c00017 	ldw	r3,0(r4)
  80619c:	188001cc 	andi	r2,r3,7
  8061a0:	10000a26 	beq	r2,zero,8061cc <__lo0bits+0x34>
  8061a4:	1880004c 	andi	r2,r3,1
  8061a8:	1005003a 	cmpeq	r2,r2,zero
  8061ac:	10002126 	beq	r2,zero,806234 <__lo0bits+0x9c>
  8061b0:	1880008c 	andi	r2,r3,2
  8061b4:	1000251e 	bne	r2,zero,80624c <__lo0bits+0xb4>
  8061b8:	1804d0ba 	srli	r2,r3,2
  8061bc:	01400084 	movi	r5,2
  8061c0:	20800015 	stw	r2,0(r4)
  8061c4:	2805883a 	mov	r2,r5
  8061c8:	f800283a 	ret
  8061cc:	18bfffcc 	andi	r2,r3,65535
  8061d0:	10001526 	beq	r2,zero,806228 <__lo0bits+0x90>
  8061d4:	000b883a 	mov	r5,zero
  8061d8:	18803fcc 	andi	r2,r3,255
  8061dc:	1000021e 	bne	r2,zero,8061e8 <__lo0bits+0x50>
  8061e0:	1806d23a 	srli	r3,r3,8
  8061e4:	29400204 	addi	r5,r5,8
  8061e8:	188003cc 	andi	r2,r3,15
  8061ec:	1000021e 	bne	r2,zero,8061f8 <__lo0bits+0x60>
  8061f0:	1806d13a 	srli	r3,r3,4
  8061f4:	29400104 	addi	r5,r5,4
  8061f8:	188000cc 	andi	r2,r3,3
  8061fc:	1000021e 	bne	r2,zero,806208 <__lo0bits+0x70>
  806200:	1806d0ba 	srli	r3,r3,2
  806204:	29400084 	addi	r5,r5,2
  806208:	1880004c 	andi	r2,r3,1
  80620c:	1000031e 	bne	r2,zero,80621c <__lo0bits+0x84>
  806210:	1806d07a 	srli	r3,r3,1
  806214:	18000a26 	beq	r3,zero,806240 <__lo0bits+0xa8>
  806218:	29400044 	addi	r5,r5,1
  80621c:	2805883a 	mov	r2,r5
  806220:	20c00015 	stw	r3,0(r4)
  806224:	f800283a 	ret
  806228:	1806d43a 	srli	r3,r3,16
  80622c:	01400404 	movi	r5,16
  806230:	003fe906 	br	8061d8 <__lo0bits+0x40>
  806234:	000b883a 	mov	r5,zero
  806238:	2805883a 	mov	r2,r5
  80623c:	f800283a 	ret
  806240:	01400804 	movi	r5,32
  806244:	2805883a 	mov	r2,r5
  806248:	f800283a 	ret
  80624c:	1804d07a 	srli	r2,r3,1
  806250:	01400044 	movi	r5,1
  806254:	20800015 	stw	r2,0(r4)
  806258:	003fda06 	br	8061c4 <__lo0bits+0x2c>

0080625c <__mcmp>:
  80625c:	20800417 	ldw	r2,16(r4)
  806260:	28c00417 	ldw	r3,16(r5)
  806264:	10cfc83a 	sub	r7,r2,r3
  806268:	38000c1e 	bne	r7,zero,80629c <__mcmp+0x40>
  80626c:	18c5883a 	add	r2,r3,r3
  806270:	1085883a 	add	r2,r2,r2
  806274:	10c00504 	addi	r3,r2,20
  806278:	21000504 	addi	r4,r4,20
  80627c:	28cb883a 	add	r5,r5,r3
  806280:	2085883a 	add	r2,r4,r2
  806284:	10bfff04 	addi	r2,r2,-4
  806288:	297fff04 	addi	r5,r5,-4
  80628c:	11800017 	ldw	r6,0(r2)
  806290:	28c00017 	ldw	r3,0(r5)
  806294:	30c0031e 	bne	r6,r3,8062a4 <__mcmp+0x48>
  806298:	20bffa36 	bltu	r4,r2,806284 <__mcmp+0x28>
  80629c:	3805883a 	mov	r2,r7
  8062a0:	f800283a 	ret
  8062a4:	30c00336 	bltu	r6,r3,8062b4 <__mcmp+0x58>
  8062a8:	01c00044 	movi	r7,1
  8062ac:	3805883a 	mov	r2,r7
  8062b0:	f800283a 	ret
  8062b4:	01ffffc4 	movi	r7,-1
  8062b8:	003ff806 	br	80629c <__mcmp+0x40>

008062bc <__ulp>:
  8062bc:	295ffc2c 	andhi	r5,r5,32752
  8062c0:	013f3034 	movhi	r4,64704
  8062c4:	290b883a 	add	r5,r5,r4
  8062c8:	0145c83a 	sub	r2,zero,r5
  8062cc:	1007d53a 	srai	r3,r2,20
  8062d0:	000d883a 	mov	r6,zero
  8062d4:	0140040e 	bge	zero,r5,8062e8 <__ulp+0x2c>
  8062d8:	280f883a 	mov	r7,r5
  8062dc:	3807883a 	mov	r3,r7
  8062e0:	3005883a 	mov	r2,r6
  8062e4:	f800283a 	ret
  8062e8:	008004c4 	movi	r2,19
  8062ec:	193ffb04 	addi	r4,r3,-20
  8062f0:	10c00c0e 	bge	r2,r3,806324 <__ulp+0x68>
  8062f4:	008007c4 	movi	r2,31
  8062f8:	1107c83a 	sub	r3,r2,r4
  8062fc:	00800784 	movi	r2,30
  806300:	01400044 	movi	r5,1
  806304:	11000216 	blt	r2,r4,806310 <__ulp+0x54>
  806308:	00800044 	movi	r2,1
  80630c:	10ca983a 	sll	r5,r2,r3
  806310:	000f883a 	mov	r7,zero
  806314:	280d883a 	mov	r6,r5
  806318:	3807883a 	mov	r3,r7
  80631c:	3005883a 	mov	r2,r6
  806320:	f800283a 	ret
  806324:	00800234 	movhi	r2,8
  806328:	10cfd83a 	sra	r7,r2,r3
  80632c:	000d883a 	mov	r6,zero
  806330:	3005883a 	mov	r2,r6
  806334:	3807883a 	mov	r3,r7
  806338:	f800283a 	ret

0080633c <__b2d>:
  80633c:	20800417 	ldw	r2,16(r4)
  806340:	defff904 	addi	sp,sp,-28
  806344:	dd000415 	stw	r20,16(sp)
  806348:	1085883a 	add	r2,r2,r2
  80634c:	25000504 	addi	r20,r4,20
  806350:	1085883a 	add	r2,r2,r2
  806354:	dc000015 	stw	r16,0(sp)
  806358:	a0a1883a 	add	r16,r20,r2
  80635c:	dd400515 	stw	r21,20(sp)
  806360:	857fff17 	ldw	r21,-4(r16)
  806364:	dc400115 	stw	r17,4(sp)
  806368:	dfc00615 	stw	ra,24(sp)
  80636c:	a809883a 	mov	r4,r21
  806370:	2823883a 	mov	r17,r5
  806374:	dcc00315 	stw	r19,12(sp)
  806378:	dc800215 	stw	r18,8(sp)
  80637c:	08061280 	call	806128 <__hi0bits>
  806380:	100b883a 	mov	r5,r2
  806384:	00800804 	movi	r2,32
  806388:	1145c83a 	sub	r2,r2,r5
  80638c:	88800015 	stw	r2,0(r17)
  806390:	00800284 	movi	r2,10
  806394:	80ffff04 	addi	r3,r16,-4
  806398:	11401416 	blt	r2,r5,8063ec <__b2d+0xb0>
  80639c:	008002c4 	movi	r2,11
  8063a0:	1149c83a 	sub	r4,r2,r5
  8063a4:	a0c02736 	bltu	r20,r3,806444 <__b2d+0x108>
  8063a8:	000d883a 	mov	r6,zero
  8063ac:	28800544 	addi	r2,r5,21
  8063b0:	a906d83a 	srl	r3,r21,r4
  8063b4:	a884983a 	sll	r2,r21,r2
  8063b8:	1ccffc34 	orhi	r19,r3,16368
  8063bc:	11a4b03a 	or	r18,r2,r6
  8063c0:	9005883a 	mov	r2,r18
  8063c4:	9807883a 	mov	r3,r19
  8063c8:	dfc00617 	ldw	ra,24(sp)
  8063cc:	dd400517 	ldw	r21,20(sp)
  8063d0:	dd000417 	ldw	r20,16(sp)
  8063d4:	dcc00317 	ldw	r19,12(sp)
  8063d8:	dc800217 	ldw	r18,8(sp)
  8063dc:	dc400117 	ldw	r17,4(sp)
  8063e0:	dc000017 	ldw	r16,0(sp)
  8063e4:	dec00704 	addi	sp,sp,28
  8063e8:	f800283a 	ret
  8063ec:	a0c00e36 	bltu	r20,r3,806428 <__b2d+0xec>
  8063f0:	293ffd44 	addi	r4,r5,-11
  8063f4:	000d883a 	mov	r6,zero
  8063f8:	20000f26 	beq	r4,zero,806438 <__b2d+0xfc>
  8063fc:	00800804 	movi	r2,32
  806400:	110bc83a 	sub	r5,r2,r4
  806404:	a0c01236 	bltu	r20,r3,806450 <__b2d+0x114>
  806408:	000f883a 	mov	r7,zero
  80640c:	a904983a 	sll	r2,r21,r4
  806410:	3146d83a 	srl	r3,r6,r5
  806414:	3108983a 	sll	r4,r6,r4
  806418:	108ffc34 	orhi	r2,r2,16368
  80641c:	18a6b03a 	or	r19,r3,r2
  806420:	3924b03a 	or	r18,r7,r4
  806424:	003fe606 	br	8063c0 <__b2d+0x84>
  806428:	293ffd44 	addi	r4,r5,-11
  80642c:	81bffe17 	ldw	r6,-8(r16)
  806430:	80fffe04 	addi	r3,r16,-8
  806434:	203ff11e 	bne	r4,zero,8063fc <__b2d+0xc0>
  806438:	accffc34 	orhi	r19,r21,16368
  80643c:	3025883a 	mov	r18,r6
  806440:	003fdf06 	br	8063c0 <__b2d+0x84>
  806444:	18bfff17 	ldw	r2,-4(r3)
  806448:	110cd83a 	srl	r6,r2,r4
  80644c:	003fd706 	br	8063ac <__b2d+0x70>
  806450:	18bfff17 	ldw	r2,-4(r3)
  806454:	114ed83a 	srl	r7,r2,r5
  806458:	003fec06 	br	80640c <__b2d+0xd0>

0080645c <__ratio>:
  80645c:	defff904 	addi	sp,sp,-28
  806460:	dc400215 	stw	r17,8(sp)
  806464:	2823883a 	mov	r17,r5
  806468:	d80b883a 	mov	r5,sp
  80646c:	dfc00615 	stw	ra,24(sp)
  806470:	dd000515 	stw	r20,20(sp)
  806474:	dcc00415 	stw	r19,16(sp)
  806478:	dc800315 	stw	r18,12(sp)
  80647c:	2025883a 	mov	r18,r4
  806480:	080633c0 	call	80633c <__b2d>
  806484:	8809883a 	mov	r4,r17
  806488:	d9400104 	addi	r5,sp,4
  80648c:	1027883a 	mov	r19,r2
  806490:	1829883a 	mov	r20,r3
  806494:	080633c0 	call	80633c <__b2d>
  806498:	89000417 	ldw	r4,16(r17)
  80649c:	91c00417 	ldw	r7,16(r18)
  8064a0:	d9800117 	ldw	r6,4(sp)
  8064a4:	180b883a 	mov	r5,r3
  8064a8:	390fc83a 	sub	r7,r7,r4
  8064ac:	1009883a 	mov	r4,r2
  8064b0:	d8800017 	ldw	r2,0(sp)
  8064b4:	380e917a 	slli	r7,r7,5
  8064b8:	2011883a 	mov	r8,r4
  8064bc:	1185c83a 	sub	r2,r2,r6
  8064c0:	11c5883a 	add	r2,r2,r7
  8064c4:	1006953a 	slli	r3,r2,20
  8064c8:	2813883a 	mov	r9,r5
  8064cc:	00800d0e 	bge	zero,r2,806504 <__ratio+0xa8>
  8064d0:	1d29883a 	add	r20,r3,r20
  8064d4:	a00b883a 	mov	r5,r20
  8064d8:	480f883a 	mov	r7,r9
  8064dc:	9809883a 	mov	r4,r19
  8064e0:	400d883a 	mov	r6,r8
  8064e4:	08093500 	call	809350 <__divdf3>
  8064e8:	dfc00617 	ldw	ra,24(sp)
  8064ec:	dd000517 	ldw	r20,20(sp)
  8064f0:	dcc00417 	ldw	r19,16(sp)
  8064f4:	dc800317 	ldw	r18,12(sp)
  8064f8:	dc400217 	ldw	r17,8(sp)
  8064fc:	dec00704 	addi	sp,sp,28
  806500:	f800283a 	ret
  806504:	28d3c83a 	sub	r9,r5,r3
  806508:	003ff206 	br	8064d4 <__ratio+0x78>

0080650c <_mprec_log10>:
  80650c:	defffe04 	addi	sp,sp,-8
  806510:	008005c4 	movi	r2,23
  806514:	dc000015 	stw	r16,0(sp)
  806518:	dfc00115 	stw	ra,4(sp)
  80651c:	2021883a 	mov	r16,r4
  806520:	11000c16 	blt	r2,r4,806554 <_mprec_log10+0x48>
  806524:	200490fa 	slli	r2,r4,3
  806528:	00c02074 	movhi	r3,129
  80652c:	18f80004 	addi	r3,r3,-8192
  806530:	10c5883a 	add	r2,r2,r3
  806534:	12400117 	ldw	r9,4(r2)
  806538:	12000017 	ldw	r8,0(r2)
  80653c:	4807883a 	mov	r3,r9
  806540:	4005883a 	mov	r2,r8
  806544:	dfc00117 	ldw	ra,4(sp)
  806548:	dc000017 	ldw	r16,0(sp)
  80654c:	dec00204 	addi	sp,sp,8
  806550:	f800283a 	ret
  806554:	0011883a 	mov	r8,zero
  806558:	024ffc34 	movhi	r9,16368
  80655c:	0005883a 	mov	r2,zero
  806560:	00d00934 	movhi	r3,16420
  806564:	480b883a 	mov	r5,r9
  806568:	4009883a 	mov	r4,r8
  80656c:	180f883a 	mov	r7,r3
  806570:	100d883a 	mov	r6,r2
  806574:	0808f8c0 	call	808f8c <__muldf3>
  806578:	843fffc4 	addi	r16,r16,-1
  80657c:	1011883a 	mov	r8,r2
  806580:	1813883a 	mov	r9,r3
  806584:	803ff51e 	bne	r16,zero,80655c <_mprec_log10+0x50>
  806588:	4005883a 	mov	r2,r8
  80658c:	4807883a 	mov	r3,r9
  806590:	dfc00117 	ldw	ra,4(sp)
  806594:	dc000017 	ldw	r16,0(sp)
  806598:	dec00204 	addi	sp,sp,8
  80659c:	f800283a 	ret

008065a0 <__copybits>:
  8065a0:	297fffc4 	addi	r5,r5,-1
  8065a4:	30800417 	ldw	r2,16(r6)
  8065a8:	280bd17a 	srai	r5,r5,5
  8065ac:	31800504 	addi	r6,r6,20
  8065b0:	1085883a 	add	r2,r2,r2
  8065b4:	294b883a 	add	r5,r5,r5
  8065b8:	294b883a 	add	r5,r5,r5
  8065bc:	1085883a 	add	r2,r2,r2
  8065c0:	290b883a 	add	r5,r5,r4
  8065c4:	3087883a 	add	r3,r6,r2
  8065c8:	29400104 	addi	r5,r5,4
  8065cc:	30c0052e 	bgeu	r6,r3,8065e4 <__copybits+0x44>
  8065d0:	30800017 	ldw	r2,0(r6)
  8065d4:	31800104 	addi	r6,r6,4
  8065d8:	20800015 	stw	r2,0(r4)
  8065dc:	21000104 	addi	r4,r4,4
  8065e0:	30fffb36 	bltu	r6,r3,8065d0 <__copybits+0x30>
  8065e4:	2140032e 	bgeu	r4,r5,8065f4 <__copybits+0x54>
  8065e8:	20000015 	stw	zero,0(r4)
  8065ec:	21000104 	addi	r4,r4,4
  8065f0:	217ffd36 	bltu	r4,r5,8065e8 <__copybits+0x48>
  8065f4:	f800283a 	ret

008065f8 <__any_on>:
  8065f8:	20800417 	ldw	r2,16(r4)
  8065fc:	2807d17a 	srai	r3,r5,5
  806600:	21000504 	addi	r4,r4,20
  806604:	10c00d0e 	bge	r2,r3,80663c <__any_on+0x44>
  806608:	1085883a 	add	r2,r2,r2
  80660c:	1085883a 	add	r2,r2,r2
  806610:	208d883a 	add	r6,r4,r2
  806614:	2180182e 	bgeu	r4,r6,806678 <__any_on+0x80>
  806618:	30bfff17 	ldw	r2,-4(r6)
  80661c:	30ffff04 	addi	r3,r6,-4
  806620:	1000041e 	bne	r2,zero,806634 <__any_on+0x3c>
  806624:	20c0142e 	bgeu	r4,r3,806678 <__any_on+0x80>
  806628:	18ffff04 	addi	r3,r3,-4
  80662c:	18800017 	ldw	r2,0(r3)
  806630:	103ffc26 	beq	r2,zero,806624 <__any_on+0x2c>
  806634:	00800044 	movi	r2,1
  806638:	f800283a 	ret
  80663c:	18800a0e 	bge	r3,r2,806668 <__any_on+0x70>
  806640:	294007cc 	andi	r5,r5,31
  806644:	28000826 	beq	r5,zero,806668 <__any_on+0x70>
  806648:	18c5883a 	add	r2,r3,r3
  80664c:	1085883a 	add	r2,r2,r2
  806650:	208d883a 	add	r6,r4,r2
  806654:	30c00017 	ldw	r3,0(r6)
  806658:	1944d83a 	srl	r2,r3,r5
  80665c:	1144983a 	sll	r2,r2,r5
  806660:	18bff41e 	bne	r3,r2,806634 <__any_on+0x3c>
  806664:	003feb06 	br	806614 <__any_on+0x1c>
  806668:	18c5883a 	add	r2,r3,r3
  80666c:	1085883a 	add	r2,r2,r2
  806670:	208d883a 	add	r6,r4,r2
  806674:	003fe706 	br	806614 <__any_on+0x1c>
  806678:	0005883a 	mov	r2,zero
  80667c:	f800283a 	ret

00806680 <_Balloc>:
  806680:	20c01317 	ldw	r3,76(r4)
  806684:	defffb04 	addi	sp,sp,-20
  806688:	dcc00315 	stw	r19,12(sp)
  80668c:	dc800215 	stw	r18,8(sp)
  806690:	dfc00415 	stw	ra,16(sp)
  806694:	2825883a 	mov	r18,r5
  806698:	dc400115 	stw	r17,4(sp)
  80669c:	dc000015 	stw	r16,0(sp)
  8066a0:	2027883a 	mov	r19,r4
  8066a4:	01800404 	movi	r6,16
  8066a8:	01400104 	movi	r5,4
  8066ac:	18001726 	beq	r3,zero,80670c <_Balloc+0x8c>
  8066b0:	01400044 	movi	r5,1
  8066b4:	9485883a 	add	r2,r18,r18
  8066b8:	2ca2983a 	sll	r17,r5,r18
  8066bc:	1085883a 	add	r2,r2,r2
  8066c0:	10c7883a 	add	r3,r2,r3
  8066c4:	1c000017 	ldw	r16,0(r3)
  8066c8:	8c4d883a 	add	r6,r17,r17
  8066cc:	318d883a 	add	r6,r6,r6
  8066d0:	9809883a 	mov	r4,r19
  8066d4:	31800504 	addi	r6,r6,20
  8066d8:	80001226 	beq	r16,zero,806724 <_Balloc+0xa4>
  8066dc:	80800017 	ldw	r2,0(r16)
  8066e0:	18800015 	stw	r2,0(r3)
  8066e4:	80000415 	stw	zero,16(r16)
  8066e8:	80000315 	stw	zero,12(r16)
  8066ec:	8005883a 	mov	r2,r16
  8066f0:	dfc00417 	ldw	ra,16(sp)
  8066f4:	dcc00317 	ldw	r19,12(sp)
  8066f8:	dc800217 	ldw	r18,8(sp)
  8066fc:	dc400117 	ldw	r17,4(sp)
  806700:	dc000017 	ldw	r16,0(sp)
  806704:	dec00504 	addi	sp,sp,20
  806708:	f800283a 	ret
  80670c:	0807a480 	call	807a48 <_calloc_r>
  806710:	1007883a 	mov	r3,r2
  806714:	0021883a 	mov	r16,zero
  806718:	98801315 	stw	r2,76(r19)
  80671c:	103fe41e 	bne	r2,zero,8066b0 <_Balloc+0x30>
  806720:	003ff206 	br	8066ec <_Balloc+0x6c>
  806724:	0807a480 	call	807a48 <_calloc_r>
  806728:	103ff026 	beq	r2,zero,8066ec <_Balloc+0x6c>
  80672c:	1021883a 	mov	r16,r2
  806730:	14800115 	stw	r18,4(r2)
  806734:	14400215 	stw	r17,8(r2)
  806738:	003fea06 	br	8066e4 <_Balloc+0x64>

0080673c <__d2b>:
  80673c:	defff504 	addi	sp,sp,-44
  806740:	dcc00515 	stw	r19,20(sp)
  806744:	04c00044 	movi	r19,1
  806748:	dc000215 	stw	r16,8(sp)
  80674c:	2821883a 	mov	r16,r5
  806750:	980b883a 	mov	r5,r19
  806754:	ddc00915 	stw	r23,36(sp)
  806758:	dd800815 	stw	r22,32(sp)
  80675c:	dd400715 	stw	r21,28(sp)
  806760:	dd000615 	stw	r20,24(sp)
  806764:	dc800415 	stw	r18,16(sp)
  806768:	dc400315 	stw	r17,12(sp)
  80676c:	dfc00a15 	stw	ra,40(sp)
  806770:	3023883a 	mov	r17,r6
  806774:	382d883a 	mov	r22,r7
  806778:	ddc00b17 	ldw	r23,44(sp)
  80677c:	08066800 	call	806680 <_Balloc>
  806780:	1025883a 	mov	r18,r2
  806784:	00a00034 	movhi	r2,32768
  806788:	10bfffc4 	addi	r2,r2,-1
  80678c:	8888703a 	and	r4,r17,r2
  806790:	202ad53a 	srli	r21,r4,20
  806794:	00800434 	movhi	r2,16
  806798:	10bfffc4 	addi	r2,r2,-1
  80679c:	8886703a 	and	r3,r17,r2
  8067a0:	a829003a 	cmpeq	r20,r21,zero
  8067a4:	800b883a 	mov	r5,r16
  8067a8:	d8c00115 	stw	r3,4(sp)
  8067ac:	94000504 	addi	r16,r18,20
  8067b0:	a000021e 	bne	r20,zero,8067bc <__d2b+0x80>
  8067b4:	18c00434 	orhi	r3,r3,16
  8067b8:	d8c00115 	stw	r3,4(sp)
  8067bc:	28002726 	beq	r5,zero,80685c <__d2b+0x120>
  8067c0:	d809883a 	mov	r4,sp
  8067c4:	d9400015 	stw	r5,0(sp)
  8067c8:	08061980 	call	806198 <__lo0bits>
  8067cc:	100d883a 	mov	r6,r2
  8067d0:	10003526 	beq	r2,zero,8068a8 <__d2b+0x16c>
  8067d4:	d8c00117 	ldw	r3,4(sp)
  8067d8:	00800804 	movi	r2,32
  8067dc:	1185c83a 	sub	r2,r2,r6
  8067e0:	d9000017 	ldw	r4,0(sp)
  8067e4:	1886983a 	sll	r3,r3,r2
  8067e8:	1906b03a 	or	r3,r3,r4
  8067ec:	90c00515 	stw	r3,20(r18)
  8067f0:	d8c00117 	ldw	r3,4(sp)
  8067f4:	1986d83a 	srl	r3,r3,r6
  8067f8:	d8c00115 	stw	r3,4(sp)
  8067fc:	180b003a 	cmpeq	r5,r3,zero
  806800:	00800084 	movi	r2,2
  806804:	114bc83a 	sub	r5,r2,r5
  806808:	80c00115 	stw	r3,4(r16)
  80680c:	91400415 	stw	r5,16(r18)
  806810:	a0001a1e 	bne	r20,zero,80687c <__d2b+0x140>
  806814:	3545883a 	add	r2,r6,r21
  806818:	10bef344 	addi	r2,r2,-1075
  80681c:	00c00d44 	movi	r3,53
  806820:	b0800015 	stw	r2,0(r22)
  806824:	1987c83a 	sub	r3,r3,r6
  806828:	b8c00015 	stw	r3,0(r23)
  80682c:	9005883a 	mov	r2,r18
  806830:	dfc00a17 	ldw	ra,40(sp)
  806834:	ddc00917 	ldw	r23,36(sp)
  806838:	dd800817 	ldw	r22,32(sp)
  80683c:	dd400717 	ldw	r21,28(sp)
  806840:	dd000617 	ldw	r20,24(sp)
  806844:	dcc00517 	ldw	r19,20(sp)
  806848:	dc800417 	ldw	r18,16(sp)
  80684c:	dc400317 	ldw	r17,12(sp)
  806850:	dc000217 	ldw	r16,8(sp)
  806854:	dec00b04 	addi	sp,sp,44
  806858:	f800283a 	ret
  80685c:	d9000104 	addi	r4,sp,4
  806860:	08061980 	call	806198 <__lo0bits>
  806864:	11800804 	addi	r6,r2,32
  806868:	d8800117 	ldw	r2,4(sp)
  80686c:	94c00415 	stw	r19,16(r18)
  806870:	980b883a 	mov	r5,r19
  806874:	90800515 	stw	r2,20(r18)
  806878:	a03fe626 	beq	r20,zero,806814 <__d2b+0xd8>
  80687c:	2945883a 	add	r2,r5,r5
  806880:	1085883a 	add	r2,r2,r2
  806884:	1405883a 	add	r2,r2,r16
  806888:	113fff17 	ldw	r4,-4(r2)
  80688c:	30fef384 	addi	r3,r6,-1074
  806890:	2820917a 	slli	r16,r5,5
  806894:	b0c00015 	stw	r3,0(r22)
  806898:	08061280 	call	806128 <__hi0bits>
  80689c:	80a1c83a 	sub	r16,r16,r2
  8068a0:	bc000015 	stw	r16,0(r23)
  8068a4:	003fe106 	br	80682c <__d2b+0xf0>
  8068a8:	d8800017 	ldw	r2,0(sp)
  8068ac:	90800515 	stw	r2,20(r18)
  8068b0:	d8c00117 	ldw	r3,4(sp)
  8068b4:	003fd106 	br	8067fc <__d2b+0xc0>

008068b8 <__mdiff>:
  8068b8:	defffb04 	addi	sp,sp,-20
  8068bc:	dc000015 	stw	r16,0(sp)
  8068c0:	2821883a 	mov	r16,r5
  8068c4:	dc800215 	stw	r18,8(sp)
  8068c8:	300b883a 	mov	r5,r6
  8068cc:	2025883a 	mov	r18,r4
  8068d0:	8009883a 	mov	r4,r16
  8068d4:	dc400115 	stw	r17,4(sp)
  8068d8:	dfc00415 	stw	ra,16(sp)
  8068dc:	dcc00315 	stw	r19,12(sp)
  8068e0:	3023883a 	mov	r17,r6
  8068e4:	080625c0 	call	80625c <__mcmp>
  8068e8:	10004226 	beq	r2,zero,8069f4 <__mdiff+0x13c>
  8068ec:	10005016 	blt	r2,zero,806a30 <__mdiff+0x178>
  8068f0:	0027883a 	mov	r19,zero
  8068f4:	81400117 	ldw	r5,4(r16)
  8068f8:	9009883a 	mov	r4,r18
  8068fc:	08066800 	call	806680 <_Balloc>
  806900:	1019883a 	mov	r12,r2
  806904:	82800417 	ldw	r10,16(r16)
  806908:	88800417 	ldw	r2,16(r17)
  80690c:	81800504 	addi	r6,r16,20
  806910:	5287883a 	add	r3,r10,r10
  806914:	1085883a 	add	r2,r2,r2
  806918:	18c7883a 	add	r3,r3,r3
  80691c:	1085883a 	add	r2,r2,r2
  806920:	8a000504 	addi	r8,r17,20
  806924:	64c00315 	stw	r19,12(r12)
  806928:	30db883a 	add	r13,r6,r3
  80692c:	4097883a 	add	r11,r8,r2
  806930:	61c00504 	addi	r7,r12,20
  806934:	0013883a 	mov	r9,zero
  806938:	31000017 	ldw	r4,0(r6)
  80693c:	41400017 	ldw	r5,0(r8)
  806940:	42000104 	addi	r8,r8,4
  806944:	20bfffcc 	andi	r2,r4,65535
  806948:	28ffffcc 	andi	r3,r5,65535
  80694c:	10c5c83a 	sub	r2,r2,r3
  806950:	1245883a 	add	r2,r2,r9
  806954:	2008d43a 	srli	r4,r4,16
  806958:	280ad43a 	srli	r5,r5,16
  80695c:	1007d43a 	srai	r3,r2,16
  806960:	3880000d 	sth	r2,0(r7)
  806964:	2149c83a 	sub	r4,r4,r5
  806968:	20c9883a 	add	r4,r4,r3
  80696c:	3900008d 	sth	r4,2(r7)
  806970:	31800104 	addi	r6,r6,4
  806974:	39c00104 	addi	r7,r7,4
  806978:	2013d43a 	srai	r9,r4,16
  80697c:	42ffee36 	bltu	r8,r11,806938 <__mdiff+0x80>
  806980:	33400c2e 	bgeu	r6,r13,8069b4 <__mdiff+0xfc>
  806984:	30800017 	ldw	r2,0(r6)
  806988:	31800104 	addi	r6,r6,4
  80698c:	10ffffcc 	andi	r3,r2,65535
  806990:	1a47883a 	add	r3,r3,r9
  806994:	1004d43a 	srli	r2,r2,16
  806998:	1809d43a 	srai	r4,r3,16
  80699c:	38c0000d 	sth	r3,0(r7)
  8069a0:	1105883a 	add	r2,r2,r4
  8069a4:	3880008d 	sth	r2,2(r7)
  8069a8:	1013d43a 	srai	r9,r2,16
  8069ac:	39c00104 	addi	r7,r7,4
  8069b0:	337ff436 	bltu	r6,r13,806984 <__mdiff+0xcc>
  8069b4:	38bfff17 	ldw	r2,-4(r7)
  8069b8:	38ffff04 	addi	r3,r7,-4
  8069bc:	1000041e 	bne	r2,zero,8069d0 <__mdiff+0x118>
  8069c0:	18ffff04 	addi	r3,r3,-4
  8069c4:	18800017 	ldw	r2,0(r3)
  8069c8:	52bfffc4 	addi	r10,r10,-1
  8069cc:	103ffc26 	beq	r2,zero,8069c0 <__mdiff+0x108>
  8069d0:	6005883a 	mov	r2,r12
  8069d4:	62800415 	stw	r10,16(r12)
  8069d8:	dfc00417 	ldw	ra,16(sp)
  8069dc:	dcc00317 	ldw	r19,12(sp)
  8069e0:	dc800217 	ldw	r18,8(sp)
  8069e4:	dc400117 	ldw	r17,4(sp)
  8069e8:	dc000017 	ldw	r16,0(sp)
  8069ec:	dec00504 	addi	sp,sp,20
  8069f0:	f800283a 	ret
  8069f4:	9009883a 	mov	r4,r18
  8069f8:	000b883a 	mov	r5,zero
  8069fc:	08066800 	call	806680 <_Balloc>
  806a00:	1019883a 	mov	r12,r2
  806a04:	00800044 	movi	r2,1
  806a08:	60800415 	stw	r2,16(r12)
  806a0c:	6005883a 	mov	r2,r12
  806a10:	60000515 	stw	zero,20(r12)
  806a14:	dfc00417 	ldw	ra,16(sp)
  806a18:	dcc00317 	ldw	r19,12(sp)
  806a1c:	dc800217 	ldw	r18,8(sp)
  806a20:	dc400117 	ldw	r17,4(sp)
  806a24:	dc000017 	ldw	r16,0(sp)
  806a28:	dec00504 	addi	sp,sp,20
  806a2c:	f800283a 	ret
  806a30:	880d883a 	mov	r6,r17
  806a34:	04c00044 	movi	r19,1
  806a38:	8023883a 	mov	r17,r16
  806a3c:	3021883a 	mov	r16,r6
  806a40:	003fac06 	br	8068f4 <__mdiff+0x3c>

00806a44 <__lshift>:
  806a44:	defff904 	addi	sp,sp,-28
  806a48:	28800417 	ldw	r2,16(r5)
  806a4c:	dc000015 	stw	r16,0(sp)
  806a50:	3021d17a 	srai	r16,r6,5
  806a54:	28c00217 	ldw	r3,8(r5)
  806a58:	10800044 	addi	r2,r2,1
  806a5c:	dc400115 	stw	r17,4(sp)
  806a60:	80a3883a 	add	r17,r16,r2
  806a64:	dd400515 	stw	r21,20(sp)
  806a68:	dd000415 	stw	r20,16(sp)
  806a6c:	dc800215 	stw	r18,8(sp)
  806a70:	dfc00615 	stw	ra,24(sp)
  806a74:	2825883a 	mov	r18,r5
  806a78:	dcc00315 	stw	r19,12(sp)
  806a7c:	3029883a 	mov	r20,r6
  806a80:	202b883a 	mov	r21,r4
  806a84:	29400117 	ldw	r5,4(r5)
  806a88:	1c40030e 	bge	r3,r17,806a98 <__lshift+0x54>
  806a8c:	18c7883a 	add	r3,r3,r3
  806a90:	29400044 	addi	r5,r5,1
  806a94:	1c7ffd16 	blt	r3,r17,806a8c <__lshift+0x48>
  806a98:	a809883a 	mov	r4,r21
  806a9c:	08066800 	call	806680 <_Balloc>
  806aa0:	1027883a 	mov	r19,r2
  806aa4:	11400504 	addi	r5,r2,20
  806aa8:	0400090e 	bge	zero,r16,806ad0 <__lshift+0x8c>
  806aac:	2805883a 	mov	r2,r5
  806ab0:	0007883a 	mov	r3,zero
  806ab4:	18c00044 	addi	r3,r3,1
  806ab8:	10000015 	stw	zero,0(r2)
  806abc:	10800104 	addi	r2,r2,4
  806ac0:	80fffc1e 	bne	r16,r3,806ab4 <__lshift+0x70>
  806ac4:	8405883a 	add	r2,r16,r16
  806ac8:	1085883a 	add	r2,r2,r2
  806acc:	288b883a 	add	r5,r5,r2
  806ad0:	90800417 	ldw	r2,16(r18)
  806ad4:	91000504 	addi	r4,r18,20
  806ad8:	a18007cc 	andi	r6,r20,31
  806adc:	1085883a 	add	r2,r2,r2
  806ae0:	1085883a 	add	r2,r2,r2
  806ae4:	208f883a 	add	r7,r4,r2
  806ae8:	30001e26 	beq	r6,zero,806b64 <__lshift+0x120>
  806aec:	00800804 	movi	r2,32
  806af0:	1191c83a 	sub	r8,r2,r6
  806af4:	0007883a 	mov	r3,zero
  806af8:	20800017 	ldw	r2,0(r4)
  806afc:	1184983a 	sll	r2,r2,r6
  806b00:	1884b03a 	or	r2,r3,r2
  806b04:	28800015 	stw	r2,0(r5)
  806b08:	20c00017 	ldw	r3,0(r4)
  806b0c:	21000104 	addi	r4,r4,4
  806b10:	29400104 	addi	r5,r5,4
  806b14:	1a06d83a 	srl	r3,r3,r8
  806b18:	21fff736 	bltu	r4,r7,806af8 <__lshift+0xb4>
  806b1c:	28c00015 	stw	r3,0(r5)
  806b20:	18000126 	beq	r3,zero,806b28 <__lshift+0xe4>
  806b24:	8c400044 	addi	r17,r17,1
  806b28:	88bfffc4 	addi	r2,r17,-1
  806b2c:	98800415 	stw	r2,16(r19)
  806b30:	a809883a 	mov	r4,r21
  806b34:	900b883a 	mov	r5,r18
  806b38:	08061000 	call	806100 <_Bfree>
  806b3c:	9805883a 	mov	r2,r19
  806b40:	dfc00617 	ldw	ra,24(sp)
  806b44:	dd400517 	ldw	r21,20(sp)
  806b48:	dd000417 	ldw	r20,16(sp)
  806b4c:	dcc00317 	ldw	r19,12(sp)
  806b50:	dc800217 	ldw	r18,8(sp)
  806b54:	dc400117 	ldw	r17,4(sp)
  806b58:	dc000017 	ldw	r16,0(sp)
  806b5c:	dec00704 	addi	sp,sp,28
  806b60:	f800283a 	ret
  806b64:	20800017 	ldw	r2,0(r4)
  806b68:	21000104 	addi	r4,r4,4
  806b6c:	28800015 	stw	r2,0(r5)
  806b70:	29400104 	addi	r5,r5,4
  806b74:	21ffec2e 	bgeu	r4,r7,806b28 <__lshift+0xe4>
  806b78:	20800017 	ldw	r2,0(r4)
  806b7c:	21000104 	addi	r4,r4,4
  806b80:	28800015 	stw	r2,0(r5)
  806b84:	29400104 	addi	r5,r5,4
  806b88:	21fff636 	bltu	r4,r7,806b64 <__lshift+0x120>
  806b8c:	003fe606 	br	806b28 <__lshift+0xe4>

00806b90 <__multiply>:
  806b90:	defff904 	addi	sp,sp,-28
  806b94:	dcc00315 	stw	r19,12(sp)
  806b98:	dc800215 	stw	r18,8(sp)
  806b9c:	2cc00417 	ldw	r19,16(r5)
  806ba0:	34800417 	ldw	r18,16(r6)
  806ba4:	dd000415 	stw	r20,16(sp)
  806ba8:	dc400115 	stw	r17,4(sp)
  806bac:	dfc00615 	stw	ra,24(sp)
  806bb0:	dd400515 	stw	r21,20(sp)
  806bb4:	dc000015 	stw	r16,0(sp)
  806bb8:	2823883a 	mov	r17,r5
  806bbc:	3029883a 	mov	r20,r6
  806bc0:	9c80040e 	bge	r19,r18,806bd4 <__multiply+0x44>
  806bc4:	9027883a 	mov	r19,r18
  806bc8:	2c800417 	ldw	r18,16(r5)
  806bcc:	2829883a 	mov	r20,r5
  806bd0:	3023883a 	mov	r17,r6
  806bd4:	88800217 	ldw	r2,8(r17)
  806bd8:	9ca1883a 	add	r16,r19,r18
  806bdc:	89400117 	ldw	r5,4(r17)
  806be0:	1400010e 	bge	r2,r16,806be8 <__multiply+0x58>
  806be4:	29400044 	addi	r5,r5,1
  806be8:	08066800 	call	806680 <_Balloc>
  806bec:	102b883a 	mov	r21,r2
  806bf0:	8405883a 	add	r2,r16,r16
  806bf4:	1085883a 	add	r2,r2,r2
  806bf8:	a9000504 	addi	r4,r21,20
  806bfc:	209d883a 	add	r14,r4,r2
  806c00:	2380042e 	bgeu	r4,r14,806c14 <__multiply+0x84>
  806c04:	2005883a 	mov	r2,r4
  806c08:	10000015 	stw	zero,0(r2)
  806c0c:	10800104 	addi	r2,r2,4
  806c10:	13bffd36 	bltu	r2,r14,806c08 <__multiply+0x78>
  806c14:	9485883a 	add	r2,r18,r18
  806c18:	9cc7883a 	add	r3,r19,r19
  806c1c:	a1800504 	addi	r6,r20,20
  806c20:	1085883a 	add	r2,r2,r2
  806c24:	8b400504 	addi	r13,r17,20
  806c28:	18c7883a 	add	r3,r3,r3
  806c2c:	309f883a 	add	r15,r6,r2
  806c30:	68d7883a 	add	r11,r13,r3
  806c34:	33c03b2e 	bgeu	r6,r15,806d24 <__multiply+0x194>
  806c38:	2019883a 	mov	r12,r4
  806c3c:	30800017 	ldw	r2,0(r6)
  806c40:	127fffcc 	andi	r9,r2,65535
  806c44:	48001826 	beq	r9,zero,806ca8 <__multiply+0x118>
  806c48:	6811883a 	mov	r8,r13
  806c4c:	600f883a 	mov	r7,r12
  806c50:	0015883a 	mov	r10,zero
  806c54:	40c00017 	ldw	r3,0(r8)
  806c58:	39400017 	ldw	r5,0(r7)
  806c5c:	42000104 	addi	r8,r8,4
  806c60:	193fffcc 	andi	r4,r3,65535
  806c64:	4909383a 	mul	r4,r9,r4
  806c68:	1806d43a 	srli	r3,r3,16
  806c6c:	28bfffcc 	andi	r2,r5,65535
  806c70:	5085883a 	add	r2,r10,r2
  806c74:	2089883a 	add	r4,r4,r2
  806c78:	48c7383a 	mul	r3,r9,r3
  806c7c:	280ad43a 	srli	r5,r5,16
  806c80:	2004d43a 	srli	r2,r4,16
  806c84:	3900000d 	sth	r4,0(r7)
  806c88:	1947883a 	add	r3,r3,r5
  806c8c:	10c5883a 	add	r2,r2,r3
  806c90:	3880008d 	sth	r2,2(r7)
  806c94:	1014d43a 	srli	r10,r2,16
  806c98:	39c00104 	addi	r7,r7,4
  806c9c:	42ffed36 	bltu	r8,r11,806c54 <__multiply+0xc4>
  806ca0:	3a800015 	stw	r10,0(r7)
  806ca4:	30800017 	ldw	r2,0(r6)
  806ca8:	1012d43a 	srli	r9,r2,16
  806cac:	48001926 	beq	r9,zero,806d14 <__multiply+0x184>
  806cb0:	60800017 	ldw	r2,0(r12)
  806cb4:	6811883a 	mov	r8,r13
  806cb8:	600f883a 	mov	r7,r12
  806cbc:	0015883a 	mov	r10,zero
  806cc0:	100b883a 	mov	r5,r2
  806cc4:	41000017 	ldw	r4,0(r8)
  806cc8:	2806d43a 	srli	r3,r5,16
  806ccc:	3880000d 	sth	r2,0(r7)
  806cd0:	20bfffcc 	andi	r2,r4,65535
  806cd4:	4885383a 	mul	r2,r9,r2
  806cd8:	50c7883a 	add	r3,r10,r3
  806cdc:	2008d43a 	srli	r4,r4,16
  806ce0:	10c5883a 	add	r2,r2,r3
  806ce4:	3880008d 	sth	r2,2(r7)
  806ce8:	39c00104 	addi	r7,r7,4
  806cec:	39400017 	ldw	r5,0(r7)
  806cf0:	4909383a 	mul	r4,r9,r4
  806cf4:	1004d43a 	srli	r2,r2,16
  806cf8:	28ffffcc 	andi	r3,r5,65535
  806cfc:	20c9883a 	add	r4,r4,r3
  806d00:	1105883a 	add	r2,r2,r4
  806d04:	42000104 	addi	r8,r8,4
  806d08:	1014d43a 	srli	r10,r2,16
  806d0c:	42ffed36 	bltu	r8,r11,806cc4 <__multiply+0x134>
  806d10:	38800015 	stw	r2,0(r7)
  806d14:	31800104 	addi	r6,r6,4
  806d18:	33c0022e 	bgeu	r6,r15,806d24 <__multiply+0x194>
  806d1c:	63000104 	addi	r12,r12,4
  806d20:	003fc606 	br	806c3c <__multiply+0xac>
  806d24:	0400090e 	bge	zero,r16,806d4c <__multiply+0x1bc>
  806d28:	70bfff17 	ldw	r2,-4(r14)
  806d2c:	70ffff04 	addi	r3,r14,-4
  806d30:	10000326 	beq	r2,zero,806d40 <__multiply+0x1b0>
  806d34:	00000506 	br	806d4c <__multiply+0x1bc>
  806d38:	18800017 	ldw	r2,0(r3)
  806d3c:	1000031e 	bne	r2,zero,806d4c <__multiply+0x1bc>
  806d40:	843fffc4 	addi	r16,r16,-1
  806d44:	18ffff04 	addi	r3,r3,-4
  806d48:	803ffb1e 	bne	r16,zero,806d38 <__multiply+0x1a8>
  806d4c:	a805883a 	mov	r2,r21
  806d50:	ac000415 	stw	r16,16(r21)
  806d54:	dfc00617 	ldw	ra,24(sp)
  806d58:	dd400517 	ldw	r21,20(sp)
  806d5c:	dd000417 	ldw	r20,16(sp)
  806d60:	dcc00317 	ldw	r19,12(sp)
  806d64:	dc800217 	ldw	r18,8(sp)
  806d68:	dc400117 	ldw	r17,4(sp)
  806d6c:	dc000017 	ldw	r16,0(sp)
  806d70:	dec00704 	addi	sp,sp,28
  806d74:	f800283a 	ret

00806d78 <__i2b>:
  806d78:	defffd04 	addi	sp,sp,-12
  806d7c:	dc000015 	stw	r16,0(sp)
  806d80:	04000044 	movi	r16,1
  806d84:	dc800115 	stw	r18,4(sp)
  806d88:	2825883a 	mov	r18,r5
  806d8c:	800b883a 	mov	r5,r16
  806d90:	dfc00215 	stw	ra,8(sp)
  806d94:	08066800 	call	806680 <_Balloc>
  806d98:	14000415 	stw	r16,16(r2)
  806d9c:	14800515 	stw	r18,20(r2)
  806da0:	dfc00217 	ldw	ra,8(sp)
  806da4:	dc800117 	ldw	r18,4(sp)
  806da8:	dc000017 	ldw	r16,0(sp)
  806dac:	dec00304 	addi	sp,sp,12
  806db0:	f800283a 	ret

00806db4 <__multadd>:
  806db4:	defffa04 	addi	sp,sp,-24
  806db8:	dc800215 	stw	r18,8(sp)
  806dbc:	2c800417 	ldw	r18,16(r5)
  806dc0:	dd000415 	stw	r20,16(sp)
  806dc4:	dcc00315 	stw	r19,12(sp)
  806dc8:	dc000015 	stw	r16,0(sp)
  806dcc:	dfc00515 	stw	ra,20(sp)
  806dd0:	3821883a 	mov	r16,r7
  806dd4:	dc400115 	stw	r17,4(sp)
  806dd8:	2827883a 	mov	r19,r5
  806ddc:	2029883a 	mov	r20,r4
  806de0:	2a000504 	addi	r8,r5,20
  806de4:	000f883a 	mov	r7,zero
  806de8:	40800017 	ldw	r2,0(r8)
  806dec:	39c00044 	addi	r7,r7,1
  806df0:	10ffffcc 	andi	r3,r2,65535
  806df4:	1987383a 	mul	r3,r3,r6
  806df8:	1004d43a 	srli	r2,r2,16
  806dfc:	1c07883a 	add	r3,r3,r16
  806e00:	180ad43a 	srli	r5,r3,16
  806e04:	1185383a 	mul	r2,r2,r6
  806e08:	18ffffcc 	andi	r3,r3,65535
  806e0c:	1145883a 	add	r2,r2,r5
  806e10:	1008943a 	slli	r4,r2,16
  806e14:	1020d43a 	srli	r16,r2,16
  806e18:	20c9883a 	add	r4,r4,r3
  806e1c:	41000015 	stw	r4,0(r8)
  806e20:	42000104 	addi	r8,r8,4
  806e24:	3cbff016 	blt	r7,r18,806de8 <__multadd+0x34>
  806e28:	80000826 	beq	r16,zero,806e4c <__multadd+0x98>
  806e2c:	98800217 	ldw	r2,8(r19)
  806e30:	90800f0e 	bge	r18,r2,806e70 <__multadd+0xbc>
  806e34:	9485883a 	add	r2,r18,r18
  806e38:	1085883a 	add	r2,r2,r2
  806e3c:	14c5883a 	add	r2,r2,r19
  806e40:	90c00044 	addi	r3,r18,1
  806e44:	14000515 	stw	r16,20(r2)
  806e48:	98c00415 	stw	r3,16(r19)
  806e4c:	9805883a 	mov	r2,r19
  806e50:	dfc00517 	ldw	ra,20(sp)
  806e54:	dd000417 	ldw	r20,16(sp)
  806e58:	dcc00317 	ldw	r19,12(sp)
  806e5c:	dc800217 	ldw	r18,8(sp)
  806e60:	dc400117 	ldw	r17,4(sp)
  806e64:	dc000017 	ldw	r16,0(sp)
  806e68:	dec00604 	addi	sp,sp,24
  806e6c:	f800283a 	ret
  806e70:	99400117 	ldw	r5,4(r19)
  806e74:	a009883a 	mov	r4,r20
  806e78:	29400044 	addi	r5,r5,1
  806e7c:	08066800 	call	806680 <_Balloc>
  806e80:	99800417 	ldw	r6,16(r19)
  806e84:	99400304 	addi	r5,r19,12
  806e88:	11000304 	addi	r4,r2,12
  806e8c:	318d883a 	add	r6,r6,r6
  806e90:	318d883a 	add	r6,r6,r6
  806e94:	31800204 	addi	r6,r6,8
  806e98:	1023883a 	mov	r17,r2
  806e9c:	08009ec0 	call	8009ec <memcpy>
  806ea0:	980b883a 	mov	r5,r19
  806ea4:	a009883a 	mov	r4,r20
  806ea8:	08061000 	call	806100 <_Bfree>
  806eac:	8827883a 	mov	r19,r17
  806eb0:	003fe006 	br	806e34 <__multadd+0x80>

00806eb4 <__pow5mult>:
  806eb4:	defffa04 	addi	sp,sp,-24
  806eb8:	308000cc 	andi	r2,r6,3
  806ebc:	dd000415 	stw	r20,16(sp)
  806ec0:	dcc00315 	stw	r19,12(sp)
  806ec4:	dc000015 	stw	r16,0(sp)
  806ec8:	dfc00515 	stw	ra,20(sp)
  806ecc:	dc800215 	stw	r18,8(sp)
  806ed0:	dc400115 	stw	r17,4(sp)
  806ed4:	3021883a 	mov	r16,r6
  806ed8:	2027883a 	mov	r19,r4
  806edc:	2829883a 	mov	r20,r5
  806ee0:	10002b1e 	bne	r2,zero,806f90 <__pow5mult+0xdc>
  806ee4:	8025d0ba 	srai	r18,r16,2
  806ee8:	90001b26 	beq	r18,zero,806f58 <__pow5mult+0xa4>
  806eec:	9c001217 	ldw	r16,72(r19)
  806ef0:	8000081e 	bne	r16,zero,806f14 <__pow5mult+0x60>
  806ef4:	00003006 	br	806fb8 <__pow5mult+0x104>
  806ef8:	800b883a 	mov	r5,r16
  806efc:	800d883a 	mov	r6,r16
  806f00:	9809883a 	mov	r4,r19
  806f04:	90001426 	beq	r18,zero,806f58 <__pow5mult+0xa4>
  806f08:	80800017 	ldw	r2,0(r16)
  806f0c:	10001b26 	beq	r2,zero,806f7c <__pow5mult+0xc8>
  806f10:	1021883a 	mov	r16,r2
  806f14:	9080004c 	andi	r2,r18,1
  806f18:	1005003a 	cmpeq	r2,r2,zero
  806f1c:	9025d07a 	srai	r18,r18,1
  806f20:	800d883a 	mov	r6,r16
  806f24:	9809883a 	mov	r4,r19
  806f28:	a00b883a 	mov	r5,r20
  806f2c:	103ff21e 	bne	r2,zero,806ef8 <__pow5mult+0x44>
  806f30:	0806b900 	call	806b90 <__multiply>
  806f34:	a00b883a 	mov	r5,r20
  806f38:	9809883a 	mov	r4,r19
  806f3c:	1023883a 	mov	r17,r2
  806f40:	08061000 	call	806100 <_Bfree>
  806f44:	8829883a 	mov	r20,r17
  806f48:	800b883a 	mov	r5,r16
  806f4c:	800d883a 	mov	r6,r16
  806f50:	9809883a 	mov	r4,r19
  806f54:	903fec1e 	bne	r18,zero,806f08 <__pow5mult+0x54>
  806f58:	a005883a 	mov	r2,r20
  806f5c:	dfc00517 	ldw	ra,20(sp)
  806f60:	dd000417 	ldw	r20,16(sp)
  806f64:	dcc00317 	ldw	r19,12(sp)
  806f68:	dc800217 	ldw	r18,8(sp)
  806f6c:	dc400117 	ldw	r17,4(sp)
  806f70:	dc000017 	ldw	r16,0(sp)
  806f74:	dec00604 	addi	sp,sp,24
  806f78:	f800283a 	ret
  806f7c:	0806b900 	call	806b90 <__multiply>
  806f80:	80800015 	stw	r2,0(r16)
  806f84:	1021883a 	mov	r16,r2
  806f88:	10000015 	stw	zero,0(r2)
  806f8c:	003fe106 	br	806f14 <__pow5mult+0x60>
  806f90:	1085883a 	add	r2,r2,r2
  806f94:	00c02074 	movhi	r3,129
  806f98:	18f84604 	addi	r3,r3,-7912
  806f9c:	1085883a 	add	r2,r2,r2
  806fa0:	10c5883a 	add	r2,r2,r3
  806fa4:	11bfff17 	ldw	r6,-4(r2)
  806fa8:	000f883a 	mov	r7,zero
  806fac:	0806db40 	call	806db4 <__multadd>
  806fb0:	1029883a 	mov	r20,r2
  806fb4:	003fcb06 	br	806ee4 <__pow5mult+0x30>
  806fb8:	9809883a 	mov	r4,r19
  806fbc:	01409c44 	movi	r5,625
  806fc0:	0806d780 	call	806d78 <__i2b>
  806fc4:	98801215 	stw	r2,72(r19)
  806fc8:	1021883a 	mov	r16,r2
  806fcc:	10000015 	stw	zero,0(r2)
  806fd0:	003fd006 	br	806f14 <__pow5mult+0x60>

00806fd4 <__s2b>:
  806fd4:	defff904 	addi	sp,sp,-28
  806fd8:	dcc00315 	stw	r19,12(sp)
  806fdc:	dc800215 	stw	r18,8(sp)
  806fe0:	2827883a 	mov	r19,r5
  806fe4:	2025883a 	mov	r18,r4
  806fe8:	01400244 	movi	r5,9
  806fec:	39000204 	addi	r4,r7,8
  806ff0:	dd000415 	stw	r20,16(sp)
  806ff4:	dc400115 	stw	r17,4(sp)
  806ff8:	dfc00615 	stw	ra,24(sp)
  806ffc:	dd400515 	stw	r21,20(sp)
  807000:	dc000015 	stw	r16,0(sp)
  807004:	3829883a 	mov	r20,r7
  807008:	3023883a 	mov	r17,r6
  80700c:	08008400 	call	800840 <__divsi3>
  807010:	00c00044 	movi	r3,1
  807014:	1880350e 	bge	r3,r2,8070ec <__s2b+0x118>
  807018:	000b883a 	mov	r5,zero
  80701c:	18c7883a 	add	r3,r3,r3
  807020:	29400044 	addi	r5,r5,1
  807024:	18bffd16 	blt	r3,r2,80701c <__s2b+0x48>
  807028:	9009883a 	mov	r4,r18
  80702c:	08066800 	call	806680 <_Balloc>
  807030:	1011883a 	mov	r8,r2
  807034:	d8800717 	ldw	r2,28(sp)
  807038:	00c00044 	movi	r3,1
  80703c:	01800244 	movi	r6,9
  807040:	40800515 	stw	r2,20(r8)
  807044:	40c00415 	stw	r3,16(r8)
  807048:	3440260e 	bge	r6,r17,8070e4 <__s2b+0x110>
  80704c:	3021883a 	mov	r16,r6
  807050:	99ab883a 	add	r21,r19,r6
  807054:	9c05883a 	add	r2,r19,r16
  807058:	11c00007 	ldb	r7,0(r2)
  80705c:	400b883a 	mov	r5,r8
  807060:	9009883a 	mov	r4,r18
  807064:	39fff404 	addi	r7,r7,-48
  807068:	01800284 	movi	r6,10
  80706c:	0806db40 	call	806db4 <__multadd>
  807070:	84000044 	addi	r16,r16,1
  807074:	1011883a 	mov	r8,r2
  807078:	8c3ff61e 	bne	r17,r16,807054 <__s2b+0x80>
  80707c:	ac45883a 	add	r2,r21,r17
  807080:	117ffe04 	addi	r5,r2,-8
  807084:	880d883a 	mov	r6,r17
  807088:	35000c0e 	bge	r6,r20,8070bc <__s2b+0xe8>
  80708c:	a185c83a 	sub	r2,r20,r6
  807090:	2821883a 	mov	r16,r5
  807094:	28a3883a 	add	r17,r5,r2
  807098:	81c00007 	ldb	r7,0(r16)
  80709c:	400b883a 	mov	r5,r8
  8070a0:	9009883a 	mov	r4,r18
  8070a4:	39fff404 	addi	r7,r7,-48
  8070a8:	01800284 	movi	r6,10
  8070ac:	0806db40 	call	806db4 <__multadd>
  8070b0:	84000044 	addi	r16,r16,1
  8070b4:	1011883a 	mov	r8,r2
  8070b8:	847ff71e 	bne	r16,r17,807098 <__s2b+0xc4>
  8070bc:	4005883a 	mov	r2,r8
  8070c0:	dfc00617 	ldw	ra,24(sp)
  8070c4:	dd400517 	ldw	r21,20(sp)
  8070c8:	dd000417 	ldw	r20,16(sp)
  8070cc:	dcc00317 	ldw	r19,12(sp)
  8070d0:	dc800217 	ldw	r18,8(sp)
  8070d4:	dc400117 	ldw	r17,4(sp)
  8070d8:	dc000017 	ldw	r16,0(sp)
  8070dc:	dec00704 	addi	sp,sp,28
  8070e0:	f800283a 	ret
  8070e4:	99400284 	addi	r5,r19,10
  8070e8:	003fe706 	br	807088 <__s2b+0xb4>
  8070ec:	000b883a 	mov	r5,zero
  8070f0:	003fcd06 	br	807028 <__s2b+0x54>

008070f4 <_realloc_r>:
  8070f4:	defff404 	addi	sp,sp,-48
  8070f8:	dd800815 	stw	r22,32(sp)
  8070fc:	dc800415 	stw	r18,16(sp)
  807100:	dc400315 	stw	r17,12(sp)
  807104:	dfc00b15 	stw	ra,44(sp)
  807108:	df000a15 	stw	fp,40(sp)
  80710c:	ddc00915 	stw	r23,36(sp)
  807110:	dd400715 	stw	r21,28(sp)
  807114:	dd000615 	stw	r20,24(sp)
  807118:	dcc00515 	stw	r19,20(sp)
  80711c:	dc000215 	stw	r16,8(sp)
  807120:	2825883a 	mov	r18,r5
  807124:	3023883a 	mov	r17,r6
  807128:	202d883a 	mov	r22,r4
  80712c:	2800c926 	beq	r5,zero,807454 <_realloc_r+0x360>
  807130:	080a9e80 	call	80a9e8 <__malloc_lock>
  807134:	943ffe04 	addi	r16,r18,-8
  807138:	88c002c4 	addi	r3,r17,11
  80713c:	00800584 	movi	r2,22
  807140:	82000117 	ldw	r8,4(r16)
  807144:	10c01b2e 	bgeu	r2,r3,8071b4 <_realloc_r+0xc0>
  807148:	00bffe04 	movi	r2,-8
  80714c:	188e703a 	and	r7,r3,r2
  807150:	3839883a 	mov	fp,r7
  807154:	38001a16 	blt	r7,zero,8071c0 <_realloc_r+0xcc>
  807158:	e4401936 	bltu	fp,r17,8071c0 <_realloc_r+0xcc>
  80715c:	013fff04 	movi	r4,-4
  807160:	4126703a 	and	r19,r8,r4
  807164:	99c02616 	blt	r19,r7,807200 <_realloc_r+0x10c>
  807168:	802b883a 	mov	r21,r16
  80716c:	9829883a 	mov	r20,r19
  807170:	84000204 	addi	r16,r16,8
  807174:	a80f883a 	mov	r7,r21
  807178:	a70dc83a 	sub	r6,r20,fp
  80717c:	008003c4 	movi	r2,15
  807180:	1180c136 	bltu	r2,r6,807488 <_realloc_r+0x394>
  807184:	38800117 	ldw	r2,4(r7)
  807188:	a549883a 	add	r4,r20,r21
  80718c:	1080004c 	andi	r2,r2,1
  807190:	a084b03a 	or	r2,r20,r2
  807194:	38800115 	stw	r2,4(r7)
  807198:	20c00117 	ldw	r3,4(r4)
  80719c:	18c00054 	ori	r3,r3,1
  8071a0:	20c00115 	stw	r3,4(r4)
  8071a4:	b009883a 	mov	r4,r22
  8071a8:	080aa080 	call	80aa08 <__malloc_unlock>
  8071ac:	8023883a 	mov	r17,r16
  8071b0:	00000606 	br	8071cc <_realloc_r+0xd8>
  8071b4:	01c00404 	movi	r7,16
  8071b8:	3839883a 	mov	fp,r7
  8071bc:	e47fe72e 	bgeu	fp,r17,80715c <_realloc_r+0x68>
  8071c0:	00800304 	movi	r2,12
  8071c4:	0023883a 	mov	r17,zero
  8071c8:	b0800015 	stw	r2,0(r22)
  8071cc:	8805883a 	mov	r2,r17
  8071d0:	dfc00b17 	ldw	ra,44(sp)
  8071d4:	df000a17 	ldw	fp,40(sp)
  8071d8:	ddc00917 	ldw	r23,36(sp)
  8071dc:	dd800817 	ldw	r22,32(sp)
  8071e0:	dd400717 	ldw	r21,28(sp)
  8071e4:	dd000617 	ldw	r20,24(sp)
  8071e8:	dcc00517 	ldw	r19,20(sp)
  8071ec:	dc800417 	ldw	r18,16(sp)
  8071f0:	dc400317 	ldw	r17,12(sp)
  8071f4:	dc000217 	ldw	r16,8(sp)
  8071f8:	dec00c04 	addi	sp,sp,48
  8071fc:	f800283a 	ret
  807200:	00802074 	movhi	r2,129
  807204:	10ba4804 	addi	r2,r2,-5856
  807208:	12400217 	ldw	r9,8(r2)
  80720c:	84cd883a 	add	r6,r16,r19
  807210:	802b883a 	mov	r21,r16
  807214:	3240b926 	beq	r6,r9,8074fc <_realloc_r+0x408>
  807218:	31400117 	ldw	r5,4(r6)
  80721c:	00bfff84 	movi	r2,-2
  807220:	2884703a 	and	r2,r5,r2
  807224:	1185883a 	add	r2,r2,r6
  807228:	10c00117 	ldw	r3,4(r2)
  80722c:	18c0004c 	andi	r3,r3,1
  807230:	1807003a 	cmpeq	r3,r3,zero
  807234:	1800a326 	beq	r3,zero,8074c4 <_realloc_r+0x3d0>
  807238:	2908703a 	and	r4,r5,r4
  80723c:	9929883a 	add	r20,r19,r4
  807240:	a1c0a30e 	bge	r20,r7,8074d0 <_realloc_r+0x3dc>
  807244:	4080004c 	andi	r2,r8,1
  807248:	1000551e 	bne	r2,zero,8073a0 <_realloc_r+0x2ac>
  80724c:	80800017 	ldw	r2,0(r16)
  807250:	80afc83a 	sub	r23,r16,r2
  807254:	b8c00117 	ldw	r3,4(r23)
  807258:	00bfff04 	movi	r2,-4
  80725c:	1884703a 	and	r2,r3,r2
  807260:	30002e26 	beq	r6,zero,80731c <_realloc_r+0x228>
  807264:	3240b926 	beq	r6,r9,80754c <_realloc_r+0x458>
  807268:	98a9883a 	add	r20,r19,r2
  80726c:	2509883a 	add	r4,r4,r20
  807270:	d9000015 	stw	r4,0(sp)
  807274:	21c02a16 	blt	r4,r7,807320 <_realloc_r+0x22c>
  807278:	30800317 	ldw	r2,12(r6)
  80727c:	30c00217 	ldw	r3,8(r6)
  807280:	01400904 	movi	r5,36
  807284:	99bfff04 	addi	r6,r19,-4
  807288:	18800315 	stw	r2,12(r3)
  80728c:	10c00215 	stw	r3,8(r2)
  807290:	b9000317 	ldw	r4,12(r23)
  807294:	b8800217 	ldw	r2,8(r23)
  807298:	b82b883a 	mov	r21,r23
  80729c:	bc000204 	addi	r16,r23,8
  8072a0:	20800215 	stw	r2,8(r4)
  8072a4:	11000315 	stw	r4,12(r2)
  8072a8:	2980e436 	bltu	r5,r6,80763c <_realloc_r+0x548>
  8072ac:	008004c4 	movi	r2,19
  8072b0:	9009883a 	mov	r4,r18
  8072b4:	8011883a 	mov	r8,r16
  8072b8:	11800f2e 	bgeu	r2,r6,8072f8 <_realloc_r+0x204>
  8072bc:	90800017 	ldw	r2,0(r18)
  8072c0:	ba000404 	addi	r8,r23,16
  8072c4:	91000204 	addi	r4,r18,8
  8072c8:	b8800215 	stw	r2,8(r23)
  8072cc:	90c00117 	ldw	r3,4(r18)
  8072d0:	008006c4 	movi	r2,27
  8072d4:	b8c00315 	stw	r3,12(r23)
  8072d8:	1180072e 	bgeu	r2,r6,8072f8 <_realloc_r+0x204>
  8072dc:	90c00217 	ldw	r3,8(r18)
  8072e0:	ba000604 	addi	r8,r23,24
  8072e4:	91000404 	addi	r4,r18,16
  8072e8:	b8c00415 	stw	r3,16(r23)
  8072ec:	90800317 	ldw	r2,12(r18)
  8072f0:	b8800515 	stw	r2,20(r23)
  8072f4:	3140e726 	beq	r6,r5,807694 <_realloc_r+0x5a0>
  8072f8:	20800017 	ldw	r2,0(r4)
  8072fc:	dd000017 	ldw	r20,0(sp)
  807300:	b80f883a 	mov	r7,r23
  807304:	40800015 	stw	r2,0(r8)
  807308:	20c00117 	ldw	r3,4(r4)
  80730c:	40c00115 	stw	r3,4(r8)
  807310:	20800217 	ldw	r2,8(r4)
  807314:	40800215 	stw	r2,8(r8)
  807318:	003f9706 	br	807178 <_realloc_r+0x84>
  80731c:	98a9883a 	add	r20,r19,r2
  807320:	a1c01f16 	blt	r20,r7,8073a0 <_realloc_r+0x2ac>
  807324:	b8c00317 	ldw	r3,12(r23)
  807328:	b8800217 	ldw	r2,8(r23)
  80732c:	99bfff04 	addi	r6,r19,-4
  807330:	01400904 	movi	r5,36
  807334:	b82b883a 	mov	r21,r23
  807338:	18800215 	stw	r2,8(r3)
  80733c:	10c00315 	stw	r3,12(r2)
  807340:	bc000204 	addi	r16,r23,8
  807344:	2980c336 	bltu	r5,r6,807654 <_realloc_r+0x560>
  807348:	008004c4 	movi	r2,19
  80734c:	9009883a 	mov	r4,r18
  807350:	8011883a 	mov	r8,r16
  807354:	11800f2e 	bgeu	r2,r6,807394 <_realloc_r+0x2a0>
  807358:	90800017 	ldw	r2,0(r18)
  80735c:	ba000404 	addi	r8,r23,16
  807360:	91000204 	addi	r4,r18,8
  807364:	b8800215 	stw	r2,8(r23)
  807368:	90c00117 	ldw	r3,4(r18)
  80736c:	008006c4 	movi	r2,27
  807370:	b8c00315 	stw	r3,12(r23)
  807374:	1180072e 	bgeu	r2,r6,807394 <_realloc_r+0x2a0>
  807378:	90c00217 	ldw	r3,8(r18)
  80737c:	ba000604 	addi	r8,r23,24
  807380:	91000404 	addi	r4,r18,16
  807384:	b8c00415 	stw	r3,16(r23)
  807388:	90800317 	ldw	r2,12(r18)
  80738c:	b8800515 	stw	r2,20(r23)
  807390:	3140c726 	beq	r6,r5,8076b0 <_realloc_r+0x5bc>
  807394:	20800017 	ldw	r2,0(r4)
  807398:	b80f883a 	mov	r7,r23
  80739c:	003fd906 	br	807304 <_realloc_r+0x210>
  8073a0:	880b883a 	mov	r5,r17
  8073a4:	b009883a 	mov	r4,r22
  8073a8:	08057640 	call	805764 <_malloc_r>
  8073ac:	1023883a 	mov	r17,r2
  8073b0:	10002526 	beq	r2,zero,807448 <_realloc_r+0x354>
  8073b4:	80800117 	ldw	r2,4(r16)
  8073b8:	00ffff84 	movi	r3,-2
  8073bc:	893ffe04 	addi	r4,r17,-8
  8073c0:	10c4703a 	and	r2,r2,r3
  8073c4:	8085883a 	add	r2,r16,r2
  8073c8:	20809526 	beq	r4,r2,807620 <_realloc_r+0x52c>
  8073cc:	99bfff04 	addi	r6,r19,-4
  8073d0:	01c00904 	movi	r7,36
  8073d4:	39804536 	bltu	r7,r6,8074ec <_realloc_r+0x3f8>
  8073d8:	008004c4 	movi	r2,19
  8073dc:	9009883a 	mov	r4,r18
  8073e0:	880b883a 	mov	r5,r17
  8073e4:	11800f2e 	bgeu	r2,r6,807424 <_realloc_r+0x330>
  8073e8:	90800017 	ldw	r2,0(r18)
  8073ec:	89400204 	addi	r5,r17,8
  8073f0:	91000204 	addi	r4,r18,8
  8073f4:	88800015 	stw	r2,0(r17)
  8073f8:	90c00117 	ldw	r3,4(r18)
  8073fc:	008006c4 	movi	r2,27
  807400:	88c00115 	stw	r3,4(r17)
  807404:	1180072e 	bgeu	r2,r6,807424 <_realloc_r+0x330>
  807408:	90c00217 	ldw	r3,8(r18)
  80740c:	89400404 	addi	r5,r17,16
  807410:	91000404 	addi	r4,r18,16
  807414:	88c00215 	stw	r3,8(r17)
  807418:	90800317 	ldw	r2,12(r18)
  80741c:	88800315 	stw	r2,12(r17)
  807420:	31c09126 	beq	r6,r7,807668 <_realloc_r+0x574>
  807424:	20800017 	ldw	r2,0(r4)
  807428:	28800015 	stw	r2,0(r5)
  80742c:	20c00117 	ldw	r3,4(r4)
  807430:	28c00115 	stw	r3,4(r5)
  807434:	20800217 	ldw	r2,8(r4)
  807438:	28800215 	stw	r2,8(r5)
  80743c:	900b883a 	mov	r5,r18
  807440:	b009883a 	mov	r4,r22
  807444:	0804b680 	call	804b68 <_free_r>
  807448:	b009883a 	mov	r4,r22
  80744c:	080aa080 	call	80aa08 <__malloc_unlock>
  807450:	003f5e06 	br	8071cc <_realloc_r+0xd8>
  807454:	300b883a 	mov	r5,r6
  807458:	dfc00b17 	ldw	ra,44(sp)
  80745c:	df000a17 	ldw	fp,40(sp)
  807460:	ddc00917 	ldw	r23,36(sp)
  807464:	dd800817 	ldw	r22,32(sp)
  807468:	dd400717 	ldw	r21,28(sp)
  80746c:	dd000617 	ldw	r20,24(sp)
  807470:	dcc00517 	ldw	r19,20(sp)
  807474:	dc800417 	ldw	r18,16(sp)
  807478:	dc400317 	ldw	r17,12(sp)
  80747c:	dc000217 	ldw	r16,8(sp)
  807480:	dec00c04 	addi	sp,sp,48
  807484:	08057641 	jmpi	805764 <_malloc_r>
  807488:	38800117 	ldw	r2,4(r7)
  80748c:	e54b883a 	add	r5,fp,r21
  807490:	31000054 	ori	r4,r6,1
  807494:	1080004c 	andi	r2,r2,1
  807498:	1704b03a 	or	r2,r2,fp
  80749c:	38800115 	stw	r2,4(r7)
  8074a0:	29000115 	stw	r4,4(r5)
  8074a4:	2987883a 	add	r3,r5,r6
  8074a8:	18800117 	ldw	r2,4(r3)
  8074ac:	29400204 	addi	r5,r5,8
  8074b0:	b009883a 	mov	r4,r22
  8074b4:	10800054 	ori	r2,r2,1
  8074b8:	18800115 	stw	r2,4(r3)
  8074bc:	0804b680 	call	804b68 <_free_r>
  8074c0:	003f3806 	br	8071a4 <_realloc_r+0xb0>
  8074c4:	000d883a 	mov	r6,zero
  8074c8:	0009883a 	mov	r4,zero
  8074cc:	003f5d06 	br	807244 <_realloc_r+0x150>
  8074d0:	30c00217 	ldw	r3,8(r6)
  8074d4:	30800317 	ldw	r2,12(r6)
  8074d8:	800f883a 	mov	r7,r16
  8074dc:	84000204 	addi	r16,r16,8
  8074e0:	10c00215 	stw	r3,8(r2)
  8074e4:	18800315 	stw	r2,12(r3)
  8074e8:	003f2306 	br	807178 <_realloc_r+0x84>
  8074ec:	8809883a 	mov	r4,r17
  8074f0:	900b883a 	mov	r5,r18
  8074f4:	0805f880 	call	805f88 <memmove>
  8074f8:	003fd006 	br	80743c <_realloc_r+0x348>
  8074fc:	30800117 	ldw	r2,4(r6)
  807500:	e0c00404 	addi	r3,fp,16
  807504:	1108703a 	and	r4,r2,r4
  807508:	9905883a 	add	r2,r19,r4
  80750c:	10ff4d16 	blt	r2,r3,807244 <_realloc_r+0x150>
  807510:	1705c83a 	sub	r2,r2,fp
  807514:	870b883a 	add	r5,r16,fp
  807518:	10800054 	ori	r2,r2,1
  80751c:	28800115 	stw	r2,4(r5)
  807520:	80c00117 	ldw	r3,4(r16)
  807524:	00802074 	movhi	r2,129
  807528:	10ba4804 	addi	r2,r2,-5856
  80752c:	b009883a 	mov	r4,r22
  807530:	18c0004c 	andi	r3,r3,1
  807534:	e0c6b03a 	or	r3,fp,r3
  807538:	11400215 	stw	r5,8(r2)
  80753c:	80c00115 	stw	r3,4(r16)
  807540:	080aa080 	call	80aa08 <__malloc_unlock>
  807544:	84400204 	addi	r17,r16,8
  807548:	003f2006 	br	8071cc <_realloc_r+0xd8>
  80754c:	98a9883a 	add	r20,r19,r2
  807550:	2509883a 	add	r4,r4,r20
  807554:	e0800404 	addi	r2,fp,16
  807558:	d9000115 	stw	r4,4(sp)
  80755c:	20bf7016 	blt	r4,r2,807320 <_realloc_r+0x22c>
  807560:	b8c00317 	ldw	r3,12(r23)
  807564:	b8800217 	ldw	r2,8(r23)
  807568:	99bfff04 	addi	r6,r19,-4
  80756c:	01400904 	movi	r5,36
  807570:	18800215 	stw	r2,8(r3)
  807574:	10c00315 	stw	r3,12(r2)
  807578:	bc400204 	addi	r17,r23,8
  80757c:	29804136 	bltu	r5,r6,807684 <_realloc_r+0x590>
  807580:	008004c4 	movi	r2,19
  807584:	9009883a 	mov	r4,r18
  807588:	880f883a 	mov	r7,r17
  80758c:	11800f2e 	bgeu	r2,r6,8075cc <_realloc_r+0x4d8>
  807590:	90800017 	ldw	r2,0(r18)
  807594:	b9c00404 	addi	r7,r23,16
  807598:	91000204 	addi	r4,r18,8
  80759c:	b8800215 	stw	r2,8(r23)
  8075a0:	90c00117 	ldw	r3,4(r18)
  8075a4:	008006c4 	movi	r2,27
  8075a8:	b8c00315 	stw	r3,12(r23)
  8075ac:	1180072e 	bgeu	r2,r6,8075cc <_realloc_r+0x4d8>
  8075b0:	90c00217 	ldw	r3,8(r18)
  8075b4:	b9c00604 	addi	r7,r23,24
  8075b8:	91000404 	addi	r4,r18,16
  8075bc:	b8c00415 	stw	r3,16(r23)
  8075c0:	90800317 	ldw	r2,12(r18)
  8075c4:	b8800515 	stw	r2,20(r23)
  8075c8:	31404026 	beq	r6,r5,8076cc <_realloc_r+0x5d8>
  8075cc:	20800017 	ldw	r2,0(r4)
  8075d0:	38800015 	stw	r2,0(r7)
  8075d4:	20c00117 	ldw	r3,4(r4)
  8075d8:	38c00115 	stw	r3,4(r7)
  8075dc:	20800217 	ldw	r2,8(r4)
  8075e0:	38800215 	stw	r2,8(r7)
  8075e4:	d8c00117 	ldw	r3,4(sp)
  8075e8:	bf0b883a 	add	r5,r23,fp
  8075ec:	b009883a 	mov	r4,r22
  8075f0:	1f05c83a 	sub	r2,r3,fp
  8075f4:	10800054 	ori	r2,r2,1
  8075f8:	28800115 	stw	r2,4(r5)
  8075fc:	b8c00117 	ldw	r3,4(r23)
  807600:	00802074 	movhi	r2,129
  807604:	10ba4804 	addi	r2,r2,-5856
  807608:	11400215 	stw	r5,8(r2)
  80760c:	18c0004c 	andi	r3,r3,1
  807610:	e0c6b03a 	or	r3,fp,r3
  807614:	b8c00115 	stw	r3,4(r23)
  807618:	080aa080 	call	80aa08 <__malloc_unlock>
  80761c:	003eeb06 	br	8071cc <_realloc_r+0xd8>
  807620:	20800117 	ldw	r2,4(r4)
  807624:	00ffff04 	movi	r3,-4
  807628:	800f883a 	mov	r7,r16
  80762c:	10c4703a 	and	r2,r2,r3
  807630:	98a9883a 	add	r20,r19,r2
  807634:	84000204 	addi	r16,r16,8
  807638:	003ecf06 	br	807178 <_realloc_r+0x84>
  80763c:	900b883a 	mov	r5,r18
  807640:	8009883a 	mov	r4,r16
  807644:	0805f880 	call	805f88 <memmove>
  807648:	dd000017 	ldw	r20,0(sp)
  80764c:	b80f883a 	mov	r7,r23
  807650:	003ec906 	br	807178 <_realloc_r+0x84>
  807654:	900b883a 	mov	r5,r18
  807658:	8009883a 	mov	r4,r16
  80765c:	0805f880 	call	805f88 <memmove>
  807660:	b80f883a 	mov	r7,r23
  807664:	003ec406 	br	807178 <_realloc_r+0x84>
  807668:	90c00417 	ldw	r3,16(r18)
  80766c:	89400604 	addi	r5,r17,24
  807670:	91000604 	addi	r4,r18,24
  807674:	88c00415 	stw	r3,16(r17)
  807678:	90800517 	ldw	r2,20(r18)
  80767c:	88800515 	stw	r2,20(r17)
  807680:	003f6806 	br	807424 <_realloc_r+0x330>
  807684:	900b883a 	mov	r5,r18
  807688:	8809883a 	mov	r4,r17
  80768c:	0805f880 	call	805f88 <memmove>
  807690:	003fd406 	br	8075e4 <_realloc_r+0x4f0>
  807694:	90c00417 	ldw	r3,16(r18)
  807698:	91000604 	addi	r4,r18,24
  80769c:	ba000804 	addi	r8,r23,32
  8076a0:	b8c00615 	stw	r3,24(r23)
  8076a4:	90800517 	ldw	r2,20(r18)
  8076a8:	b8800715 	stw	r2,28(r23)
  8076ac:	003f1206 	br	8072f8 <_realloc_r+0x204>
  8076b0:	90c00417 	ldw	r3,16(r18)
  8076b4:	91000604 	addi	r4,r18,24
  8076b8:	ba000804 	addi	r8,r23,32
  8076bc:	b8c00615 	stw	r3,24(r23)
  8076c0:	90800517 	ldw	r2,20(r18)
  8076c4:	b8800715 	stw	r2,28(r23)
  8076c8:	003f3206 	br	807394 <_realloc_r+0x2a0>
  8076cc:	90c00417 	ldw	r3,16(r18)
  8076d0:	91000604 	addi	r4,r18,24
  8076d4:	b9c00804 	addi	r7,r23,32
  8076d8:	b8c00615 	stw	r3,24(r23)
  8076dc:	90800517 	ldw	r2,20(r18)
  8076e0:	b8800715 	stw	r2,28(r23)
  8076e4:	003fb906 	br	8075cc <_realloc_r+0x4d8>

008076e8 <__isinfd>:
  8076e8:	200d883a 	mov	r6,r4
  8076ec:	0109c83a 	sub	r4,zero,r4
  8076f0:	2188b03a 	or	r4,r4,r6
  8076f4:	2008d7fa 	srli	r4,r4,31
  8076f8:	00a00034 	movhi	r2,32768
  8076fc:	10bfffc4 	addi	r2,r2,-1
  807700:	1144703a 	and	r2,r2,r5
  807704:	2088b03a 	or	r4,r4,r2
  807708:	009ffc34 	movhi	r2,32752
  80770c:	1105c83a 	sub	r2,r2,r4
  807710:	0087c83a 	sub	r3,zero,r2
  807714:	10c4b03a 	or	r2,r2,r3
  807718:	1004d7fa 	srli	r2,r2,31
  80771c:	00c00044 	movi	r3,1
  807720:	1885c83a 	sub	r2,r3,r2
  807724:	f800283a 	ret

00807728 <__isnand>:
  807728:	200d883a 	mov	r6,r4
  80772c:	0109c83a 	sub	r4,zero,r4
  807730:	2188b03a 	or	r4,r4,r6
  807734:	2008d7fa 	srli	r4,r4,31
  807738:	00a00034 	movhi	r2,32768
  80773c:	10bfffc4 	addi	r2,r2,-1
  807740:	1144703a 	and	r2,r2,r5
  807744:	2088b03a 	or	r4,r4,r2
  807748:	009ffc34 	movhi	r2,32752
  80774c:	1105c83a 	sub	r2,r2,r4
  807750:	1004d7fa 	srli	r2,r2,31
  807754:	f800283a 	ret

00807758 <_sbrk_r>:
  807758:	defffd04 	addi	sp,sp,-12
  80775c:	dc000015 	stw	r16,0(sp)
  807760:	04002074 	movhi	r16,129
  807764:	84070c04 	addi	r16,r16,7216
  807768:	dc400115 	stw	r17,4(sp)
  80776c:	80000015 	stw	zero,0(r16)
  807770:	2023883a 	mov	r17,r4
  807774:	2809883a 	mov	r4,r5
  807778:	dfc00215 	stw	ra,8(sp)
  80777c:	080ac080 	call	80ac08 <sbrk>
  807780:	1007883a 	mov	r3,r2
  807784:	00bfffc4 	movi	r2,-1
  807788:	18800626 	beq	r3,r2,8077a4 <_sbrk_r+0x4c>
  80778c:	1805883a 	mov	r2,r3
  807790:	dfc00217 	ldw	ra,8(sp)
  807794:	dc400117 	ldw	r17,4(sp)
  807798:	dc000017 	ldw	r16,0(sp)
  80779c:	dec00304 	addi	sp,sp,12
  8077a0:	f800283a 	ret
  8077a4:	80800017 	ldw	r2,0(r16)
  8077a8:	103ff826 	beq	r2,zero,80778c <_sbrk_r+0x34>
  8077ac:	88800015 	stw	r2,0(r17)
  8077b0:	1805883a 	mov	r2,r3
  8077b4:	dfc00217 	ldw	ra,8(sp)
  8077b8:	dc400117 	ldw	r17,4(sp)
  8077bc:	dc000017 	ldw	r16,0(sp)
  8077c0:	dec00304 	addi	sp,sp,12
  8077c4:	f800283a 	ret

008077c8 <__sclose>:
  8077c8:	2940038f 	ldh	r5,14(r5)
  8077cc:	0807afc1 	jmpi	807afc <_close_r>

008077d0 <__sseek>:
  8077d0:	defffe04 	addi	sp,sp,-8
  8077d4:	dc000015 	stw	r16,0(sp)
  8077d8:	2821883a 	mov	r16,r5
  8077dc:	2940038f 	ldh	r5,14(r5)
  8077e0:	dfc00115 	stw	ra,4(sp)
  8077e4:	0807d740 	call	807d74 <_lseek_r>
  8077e8:	1007883a 	mov	r3,r2
  8077ec:	00bfffc4 	movi	r2,-1
  8077f0:	18800926 	beq	r3,r2,807818 <__sseek+0x48>
  8077f4:	8080030b 	ldhu	r2,12(r16)
  8077f8:	80c01415 	stw	r3,80(r16)
  8077fc:	10840014 	ori	r2,r2,4096
  807800:	8080030d 	sth	r2,12(r16)
  807804:	1805883a 	mov	r2,r3
  807808:	dfc00117 	ldw	ra,4(sp)
  80780c:	dc000017 	ldw	r16,0(sp)
  807810:	dec00204 	addi	sp,sp,8
  807814:	f800283a 	ret
  807818:	8080030b 	ldhu	r2,12(r16)
  80781c:	10bbffcc 	andi	r2,r2,61439
  807820:	8080030d 	sth	r2,12(r16)
  807824:	1805883a 	mov	r2,r3
  807828:	dfc00117 	ldw	ra,4(sp)
  80782c:	dc000017 	ldw	r16,0(sp)
  807830:	dec00204 	addi	sp,sp,8
  807834:	f800283a 	ret

00807838 <__swrite>:
  807838:	2880030b 	ldhu	r2,12(r5)
  80783c:	defffb04 	addi	sp,sp,-20
  807840:	dcc00315 	stw	r19,12(sp)
  807844:	1080400c 	andi	r2,r2,256
  807848:	dc800215 	stw	r18,8(sp)
  80784c:	dc400115 	stw	r17,4(sp)
  807850:	dc000015 	stw	r16,0(sp)
  807854:	3027883a 	mov	r19,r6
  807858:	3825883a 	mov	r18,r7
  80785c:	dfc00415 	stw	ra,16(sp)
  807860:	2821883a 	mov	r16,r5
  807864:	000d883a 	mov	r6,zero
  807868:	01c00084 	movi	r7,2
  80786c:	2023883a 	mov	r17,r4
  807870:	10000226 	beq	r2,zero,80787c <__swrite+0x44>
  807874:	2940038f 	ldh	r5,14(r5)
  807878:	0807d740 	call	807d74 <_lseek_r>
  80787c:	8080030b 	ldhu	r2,12(r16)
  807880:	8140038f 	ldh	r5,14(r16)
  807884:	8809883a 	mov	r4,r17
  807888:	10bbffcc 	andi	r2,r2,61439
  80788c:	980d883a 	mov	r6,r19
  807890:	900f883a 	mov	r7,r18
  807894:	8080030d 	sth	r2,12(r16)
  807898:	dfc00417 	ldw	ra,16(sp)
  80789c:	dcc00317 	ldw	r19,12(sp)
  8078a0:	dc800217 	ldw	r18,8(sp)
  8078a4:	dc400117 	ldw	r17,4(sp)
  8078a8:	dc000017 	ldw	r16,0(sp)
  8078ac:	dec00504 	addi	sp,sp,20
  8078b0:	08079d01 	jmpi	8079d0 <_write_r>

008078b4 <__sread>:
  8078b4:	defffe04 	addi	sp,sp,-8
  8078b8:	dc000015 	stw	r16,0(sp)
  8078bc:	2821883a 	mov	r16,r5
  8078c0:	2940038f 	ldh	r5,14(r5)
  8078c4:	dfc00115 	stw	ra,4(sp)
  8078c8:	0807dec0 	call	807dec <_read_r>
  8078cc:	1007883a 	mov	r3,r2
  8078d0:	10000816 	blt	r2,zero,8078f4 <__sread+0x40>
  8078d4:	80801417 	ldw	r2,80(r16)
  8078d8:	10c5883a 	add	r2,r2,r3
  8078dc:	80801415 	stw	r2,80(r16)
  8078e0:	1805883a 	mov	r2,r3
  8078e4:	dfc00117 	ldw	ra,4(sp)
  8078e8:	dc000017 	ldw	r16,0(sp)
  8078ec:	dec00204 	addi	sp,sp,8
  8078f0:	f800283a 	ret
  8078f4:	8080030b 	ldhu	r2,12(r16)
  8078f8:	10bbffcc 	andi	r2,r2,61439
  8078fc:	8080030d 	sth	r2,12(r16)
  807900:	1805883a 	mov	r2,r3
  807904:	dfc00117 	ldw	ra,4(sp)
  807908:	dc000017 	ldw	r16,0(sp)
  80790c:	dec00204 	addi	sp,sp,8
  807910:	f800283a 	ret

00807914 <strcmp>:
  807914:	2144b03a 	or	r2,r4,r5
  807918:	108000cc 	andi	r2,r2,3
  80791c:	10001d1e 	bne	r2,zero,807994 <strcmp+0x80>
  807920:	200f883a 	mov	r7,r4
  807924:	28800017 	ldw	r2,0(r5)
  807928:	21000017 	ldw	r4,0(r4)
  80792c:	280d883a 	mov	r6,r5
  807930:	2080161e 	bne	r4,r2,80798c <strcmp+0x78>
  807934:	023fbff4 	movhi	r8,65279
  807938:	423fbfc4 	addi	r8,r8,-257
  80793c:	2207883a 	add	r3,r4,r8
  807940:	01602074 	movhi	r5,32897
  807944:	29602004 	addi	r5,r5,-32640
  807948:	1946703a 	and	r3,r3,r5
  80794c:	0104303a 	nor	r2,zero,r4
  807950:	10c4703a 	and	r2,r2,r3
  807954:	10001c1e 	bne	r2,zero,8079c8 <strcmp+0xb4>
  807958:	4013883a 	mov	r9,r8
  80795c:	2811883a 	mov	r8,r5
  807960:	00000106 	br	807968 <strcmp+0x54>
  807964:	1800181e 	bne	r3,zero,8079c8 <strcmp+0xb4>
  807968:	39c00104 	addi	r7,r7,4
  80796c:	39000017 	ldw	r4,0(r7)
  807970:	31800104 	addi	r6,r6,4
  807974:	31400017 	ldw	r5,0(r6)
  807978:	2245883a 	add	r2,r4,r9
  80797c:	1204703a 	and	r2,r2,r8
  807980:	0106303a 	nor	r3,zero,r4
  807984:	1886703a 	and	r3,r3,r2
  807988:	217ff626 	beq	r4,r5,807964 <strcmp+0x50>
  80798c:	3809883a 	mov	r4,r7
  807990:	300b883a 	mov	r5,r6
  807994:	20c00007 	ldb	r3,0(r4)
  807998:	1800051e 	bne	r3,zero,8079b0 <strcmp+0x9c>
  80799c:	00000606 	br	8079b8 <strcmp+0xa4>
  8079a0:	21000044 	addi	r4,r4,1
  8079a4:	20c00007 	ldb	r3,0(r4)
  8079a8:	29400044 	addi	r5,r5,1
  8079ac:	18000226 	beq	r3,zero,8079b8 <strcmp+0xa4>
  8079b0:	28800007 	ldb	r2,0(r5)
  8079b4:	18bffa26 	beq	r3,r2,8079a0 <strcmp+0x8c>
  8079b8:	20c00003 	ldbu	r3,0(r4)
  8079bc:	28800003 	ldbu	r2,0(r5)
  8079c0:	1885c83a 	sub	r2,r3,r2
  8079c4:	f800283a 	ret
  8079c8:	0005883a 	mov	r2,zero
  8079cc:	f800283a 	ret

008079d0 <_write_r>:
  8079d0:	defffd04 	addi	sp,sp,-12
  8079d4:	dc000015 	stw	r16,0(sp)
  8079d8:	04002074 	movhi	r16,129
  8079dc:	84070c04 	addi	r16,r16,7216
  8079e0:	dc400115 	stw	r17,4(sp)
  8079e4:	80000015 	stw	zero,0(r16)
  8079e8:	2023883a 	mov	r17,r4
  8079ec:	2809883a 	mov	r4,r5
  8079f0:	300b883a 	mov	r5,r6
  8079f4:	380d883a 	mov	r6,r7
  8079f8:	dfc00215 	stw	ra,8(sp)
  8079fc:	080ae980 	call	80ae98 <write>
  807a00:	1007883a 	mov	r3,r2
  807a04:	00bfffc4 	movi	r2,-1
  807a08:	18800626 	beq	r3,r2,807a24 <_write_r+0x54>
  807a0c:	1805883a 	mov	r2,r3
  807a10:	dfc00217 	ldw	ra,8(sp)
  807a14:	dc400117 	ldw	r17,4(sp)
  807a18:	dc000017 	ldw	r16,0(sp)
  807a1c:	dec00304 	addi	sp,sp,12
  807a20:	f800283a 	ret
  807a24:	80800017 	ldw	r2,0(r16)
  807a28:	103ff826 	beq	r2,zero,807a0c <_write_r+0x3c>
  807a2c:	88800015 	stw	r2,0(r17)
  807a30:	1805883a 	mov	r2,r3
  807a34:	dfc00217 	ldw	ra,8(sp)
  807a38:	dc400117 	ldw	r17,4(sp)
  807a3c:	dc000017 	ldw	r16,0(sp)
  807a40:	dec00304 	addi	sp,sp,12
  807a44:	f800283a 	ret

00807a48 <_calloc_r>:
  807a48:	298b383a 	mul	r5,r5,r6
  807a4c:	defffe04 	addi	sp,sp,-8
  807a50:	dc000015 	stw	r16,0(sp)
  807a54:	dfc00115 	stw	ra,4(sp)
  807a58:	08057640 	call	805764 <_malloc_r>
  807a5c:	1021883a 	mov	r16,r2
  807a60:	01c00904 	movi	r7,36
  807a64:	10000d26 	beq	r2,zero,807a9c <_calloc_r+0x54>
  807a68:	10ffff17 	ldw	r3,-4(r2)
  807a6c:	1009883a 	mov	r4,r2
  807a70:	00bfff04 	movi	r2,-4
  807a74:	1886703a 	and	r3,r3,r2
  807a78:	1887883a 	add	r3,r3,r2
  807a7c:	180d883a 	mov	r6,r3
  807a80:	000b883a 	mov	r5,zero
  807a84:	38c01736 	bltu	r7,r3,807ae4 <_calloc_r+0x9c>
  807a88:	008004c4 	movi	r2,19
  807a8c:	10c00836 	bltu	r2,r3,807ab0 <_calloc_r+0x68>
  807a90:	20000215 	stw	zero,8(r4)
  807a94:	20000015 	stw	zero,0(r4)
  807a98:	20000115 	stw	zero,4(r4)
  807a9c:	8005883a 	mov	r2,r16
  807aa0:	dfc00117 	ldw	ra,4(sp)
  807aa4:	dc000017 	ldw	r16,0(sp)
  807aa8:	dec00204 	addi	sp,sp,8
  807aac:	f800283a 	ret
  807ab0:	008006c4 	movi	r2,27
  807ab4:	80000015 	stw	zero,0(r16)
  807ab8:	80000115 	stw	zero,4(r16)
  807abc:	81000204 	addi	r4,r16,8
  807ac0:	10fff32e 	bgeu	r2,r3,807a90 <_calloc_r+0x48>
  807ac4:	80000215 	stw	zero,8(r16)
  807ac8:	80000315 	stw	zero,12(r16)
  807acc:	81000404 	addi	r4,r16,16
  807ad0:	19ffef1e 	bne	r3,r7,807a90 <_calloc_r+0x48>
  807ad4:	81000604 	addi	r4,r16,24
  807ad8:	80000415 	stw	zero,16(r16)
  807adc:	80000515 	stw	zero,20(r16)
  807ae0:	003feb06 	br	807a90 <_calloc_r+0x48>
  807ae4:	08060680 	call	806068 <memset>
  807ae8:	8005883a 	mov	r2,r16
  807aec:	dfc00117 	ldw	ra,4(sp)
  807af0:	dc000017 	ldw	r16,0(sp)
  807af4:	dec00204 	addi	sp,sp,8
  807af8:	f800283a 	ret

00807afc <_close_r>:
  807afc:	defffd04 	addi	sp,sp,-12
  807b00:	dc000015 	stw	r16,0(sp)
  807b04:	04002074 	movhi	r16,129
  807b08:	84070c04 	addi	r16,r16,7216
  807b0c:	dc400115 	stw	r17,4(sp)
  807b10:	80000015 	stw	zero,0(r16)
  807b14:	2023883a 	mov	r17,r4
  807b18:	2809883a 	mov	r4,r5
  807b1c:	dfc00215 	stw	ra,8(sp)
  807b20:	080a1480 	call	80a148 <close>
  807b24:	1007883a 	mov	r3,r2
  807b28:	00bfffc4 	movi	r2,-1
  807b2c:	18800626 	beq	r3,r2,807b48 <_close_r+0x4c>
  807b30:	1805883a 	mov	r2,r3
  807b34:	dfc00217 	ldw	ra,8(sp)
  807b38:	dc400117 	ldw	r17,4(sp)
  807b3c:	dc000017 	ldw	r16,0(sp)
  807b40:	dec00304 	addi	sp,sp,12
  807b44:	f800283a 	ret
  807b48:	80800017 	ldw	r2,0(r16)
  807b4c:	103ff826 	beq	r2,zero,807b30 <_close_r+0x34>
  807b50:	88800015 	stw	r2,0(r17)
  807b54:	1805883a 	mov	r2,r3
  807b58:	dfc00217 	ldw	ra,8(sp)
  807b5c:	dc400117 	ldw	r17,4(sp)
  807b60:	dc000017 	ldw	r16,0(sp)
  807b64:	dec00304 	addi	sp,sp,12
  807b68:	f800283a 	ret

00807b6c <_fclose_r>:
  807b6c:	defffc04 	addi	sp,sp,-16
  807b70:	dc400115 	stw	r17,4(sp)
  807b74:	dc000015 	stw	r16,0(sp)
  807b78:	dfc00315 	stw	ra,12(sp)
  807b7c:	dc800215 	stw	r18,8(sp)
  807b80:	2821883a 	mov	r16,r5
  807b84:	2023883a 	mov	r17,r4
  807b88:	28002926 	beq	r5,zero,807c30 <_fclose_r+0xc4>
  807b8c:	08047d40 	call	8047d4 <__sfp_lock_acquire>
  807b90:	88000226 	beq	r17,zero,807b9c <_fclose_r+0x30>
  807b94:	88800e17 	ldw	r2,56(r17)
  807b98:	10002d26 	beq	r2,zero,807c50 <_fclose_r+0xe4>
  807b9c:	8080030f 	ldh	r2,12(r16)
  807ba0:	10002226 	beq	r2,zero,807c2c <_fclose_r+0xc0>
  807ba4:	8809883a 	mov	r4,r17
  807ba8:	800b883a 	mov	r5,r16
  807bac:	080454c0 	call	80454c <_fflush_r>
  807bb0:	1025883a 	mov	r18,r2
  807bb4:	80800b17 	ldw	r2,44(r16)
  807bb8:	10000426 	beq	r2,zero,807bcc <_fclose_r+0x60>
  807bbc:	81400717 	ldw	r5,28(r16)
  807bc0:	8809883a 	mov	r4,r17
  807bc4:	103ee83a 	callr	r2
  807bc8:	10002a16 	blt	r2,zero,807c74 <_fclose_r+0x108>
  807bcc:	8080030b 	ldhu	r2,12(r16)
  807bd0:	1080200c 	andi	r2,r2,128
  807bd4:	1000231e 	bne	r2,zero,807c64 <_fclose_r+0xf8>
  807bd8:	81400c17 	ldw	r5,48(r16)
  807bdc:	28000526 	beq	r5,zero,807bf4 <_fclose_r+0x88>
  807be0:	80801004 	addi	r2,r16,64
  807be4:	28800226 	beq	r5,r2,807bf0 <_fclose_r+0x84>
  807be8:	8809883a 	mov	r4,r17
  807bec:	0804b680 	call	804b68 <_free_r>
  807bf0:	80000c15 	stw	zero,48(r16)
  807bf4:	81401117 	ldw	r5,68(r16)
  807bf8:	28000326 	beq	r5,zero,807c08 <_fclose_r+0x9c>
  807bfc:	8809883a 	mov	r4,r17
  807c00:	0804b680 	call	804b68 <_free_r>
  807c04:	80001115 	stw	zero,68(r16)
  807c08:	8000030d 	sth	zero,12(r16)
  807c0c:	08047d80 	call	8047d8 <__sfp_lock_release>
  807c10:	9005883a 	mov	r2,r18
  807c14:	dfc00317 	ldw	ra,12(sp)
  807c18:	dc800217 	ldw	r18,8(sp)
  807c1c:	dc400117 	ldw	r17,4(sp)
  807c20:	dc000017 	ldw	r16,0(sp)
  807c24:	dec00404 	addi	sp,sp,16
  807c28:	f800283a 	ret
  807c2c:	08047d80 	call	8047d8 <__sfp_lock_release>
  807c30:	0025883a 	mov	r18,zero
  807c34:	9005883a 	mov	r2,r18
  807c38:	dfc00317 	ldw	ra,12(sp)
  807c3c:	dc800217 	ldw	r18,8(sp)
  807c40:	dc400117 	ldw	r17,4(sp)
  807c44:	dc000017 	ldw	r16,0(sp)
  807c48:	dec00404 	addi	sp,sp,16
  807c4c:	f800283a 	ret
  807c50:	8809883a 	mov	r4,r17
  807c54:	08047e40 	call	8047e4 <__sinit>
  807c58:	8080030f 	ldh	r2,12(r16)
  807c5c:	103fd11e 	bne	r2,zero,807ba4 <_fclose_r+0x38>
  807c60:	003ff206 	br	807c2c <_fclose_r+0xc0>
  807c64:	81400417 	ldw	r5,16(r16)
  807c68:	8809883a 	mov	r4,r17
  807c6c:	0804b680 	call	804b68 <_free_r>
  807c70:	003fd906 	br	807bd8 <_fclose_r+0x6c>
  807c74:	04bfffc4 	movi	r18,-1
  807c78:	003fd406 	br	807bcc <_fclose_r+0x60>

00807c7c <fclose>:
  807c7c:	00802074 	movhi	r2,129
  807c80:	10801404 	addi	r2,r2,80
  807c84:	200b883a 	mov	r5,r4
  807c88:	11000017 	ldw	r4,0(r2)
  807c8c:	0807b6c1 	jmpi	807b6c <_fclose_r>

00807c90 <_fstat_r>:
  807c90:	defffd04 	addi	sp,sp,-12
  807c94:	dc000015 	stw	r16,0(sp)
  807c98:	04002074 	movhi	r16,129
  807c9c:	84070c04 	addi	r16,r16,7216
  807ca0:	dc400115 	stw	r17,4(sp)
  807ca4:	80000015 	stw	zero,0(r16)
  807ca8:	2023883a 	mov	r17,r4
  807cac:	2809883a 	mov	r4,r5
  807cb0:	300b883a 	mov	r5,r6
  807cb4:	dfc00215 	stw	ra,8(sp)
  807cb8:	080a2d00 	call	80a2d0 <fstat>
  807cbc:	1007883a 	mov	r3,r2
  807cc0:	00bfffc4 	movi	r2,-1
  807cc4:	18800626 	beq	r3,r2,807ce0 <_fstat_r+0x50>
  807cc8:	1805883a 	mov	r2,r3
  807ccc:	dfc00217 	ldw	ra,8(sp)
  807cd0:	dc400117 	ldw	r17,4(sp)
  807cd4:	dc000017 	ldw	r16,0(sp)
  807cd8:	dec00304 	addi	sp,sp,12
  807cdc:	f800283a 	ret
  807ce0:	80800017 	ldw	r2,0(r16)
  807ce4:	103ff826 	beq	r2,zero,807cc8 <_fstat_r+0x38>
  807ce8:	88800015 	stw	r2,0(r17)
  807cec:	1805883a 	mov	r2,r3
  807cf0:	dfc00217 	ldw	ra,8(sp)
  807cf4:	dc400117 	ldw	r17,4(sp)
  807cf8:	dc000017 	ldw	r16,0(sp)
  807cfc:	dec00304 	addi	sp,sp,12
  807d00:	f800283a 	ret

00807d04 <_isatty_r>:
  807d04:	defffd04 	addi	sp,sp,-12
  807d08:	dc000015 	stw	r16,0(sp)
  807d0c:	04002074 	movhi	r16,129
  807d10:	84070c04 	addi	r16,r16,7216
  807d14:	dc400115 	stw	r17,4(sp)
  807d18:	80000015 	stw	zero,0(r16)
  807d1c:	2023883a 	mov	r17,r4
  807d20:	2809883a 	mov	r4,r5
  807d24:	dfc00215 	stw	ra,8(sp)
  807d28:	080a6200 	call	80a620 <isatty>
  807d2c:	1007883a 	mov	r3,r2
  807d30:	00bfffc4 	movi	r2,-1
  807d34:	18800626 	beq	r3,r2,807d50 <_isatty_r+0x4c>
  807d38:	1805883a 	mov	r2,r3
  807d3c:	dfc00217 	ldw	ra,8(sp)
  807d40:	dc400117 	ldw	r17,4(sp)
  807d44:	dc000017 	ldw	r16,0(sp)
  807d48:	dec00304 	addi	sp,sp,12
  807d4c:	f800283a 	ret
  807d50:	80800017 	ldw	r2,0(r16)
  807d54:	103ff826 	beq	r2,zero,807d38 <_isatty_r+0x34>
  807d58:	88800015 	stw	r2,0(r17)
  807d5c:	1805883a 	mov	r2,r3
  807d60:	dfc00217 	ldw	ra,8(sp)
  807d64:	dc400117 	ldw	r17,4(sp)
  807d68:	dc000017 	ldw	r16,0(sp)
  807d6c:	dec00304 	addi	sp,sp,12
  807d70:	f800283a 	ret

00807d74 <_lseek_r>:
  807d74:	defffd04 	addi	sp,sp,-12
  807d78:	dc000015 	stw	r16,0(sp)
  807d7c:	04002074 	movhi	r16,129
  807d80:	84070c04 	addi	r16,r16,7216
  807d84:	dc400115 	stw	r17,4(sp)
  807d88:	80000015 	stw	zero,0(r16)
  807d8c:	2023883a 	mov	r17,r4
  807d90:	2809883a 	mov	r4,r5
  807d94:	300b883a 	mov	r5,r6
  807d98:	380d883a 	mov	r6,r7
  807d9c:	dfc00215 	stw	ra,8(sp)
  807da0:	080a82c0 	call	80a82c <lseek>
  807da4:	1007883a 	mov	r3,r2
  807da8:	00bfffc4 	movi	r2,-1
  807dac:	18800626 	beq	r3,r2,807dc8 <_lseek_r+0x54>
  807db0:	1805883a 	mov	r2,r3
  807db4:	dfc00217 	ldw	ra,8(sp)
  807db8:	dc400117 	ldw	r17,4(sp)
  807dbc:	dc000017 	ldw	r16,0(sp)
  807dc0:	dec00304 	addi	sp,sp,12
  807dc4:	f800283a 	ret
  807dc8:	80800017 	ldw	r2,0(r16)
  807dcc:	103ff826 	beq	r2,zero,807db0 <_lseek_r+0x3c>
  807dd0:	88800015 	stw	r2,0(r17)
  807dd4:	1805883a 	mov	r2,r3
  807dd8:	dfc00217 	ldw	ra,8(sp)
  807ddc:	dc400117 	ldw	r17,4(sp)
  807de0:	dc000017 	ldw	r16,0(sp)
  807de4:	dec00304 	addi	sp,sp,12
  807de8:	f800283a 	ret

00807dec <_read_r>:
  807dec:	defffd04 	addi	sp,sp,-12
  807df0:	dc000015 	stw	r16,0(sp)
  807df4:	04002074 	movhi	r16,129
  807df8:	84070c04 	addi	r16,r16,7216
  807dfc:	dc400115 	stw	r17,4(sp)
  807e00:	80000015 	stw	zero,0(r16)
  807e04:	2023883a 	mov	r17,r4
  807e08:	2809883a 	mov	r4,r5
  807e0c:	300b883a 	mov	r5,r6
  807e10:	380d883a 	mov	r6,r7
  807e14:	dfc00215 	stw	ra,8(sp)
  807e18:	080aa280 	call	80aa28 <read>
  807e1c:	1007883a 	mov	r3,r2
  807e20:	00bfffc4 	movi	r2,-1
  807e24:	18800626 	beq	r3,r2,807e40 <_read_r+0x54>
  807e28:	1805883a 	mov	r2,r3
  807e2c:	dfc00217 	ldw	ra,8(sp)
  807e30:	dc400117 	ldw	r17,4(sp)
  807e34:	dc000017 	ldw	r16,0(sp)
  807e38:	dec00304 	addi	sp,sp,12
  807e3c:	f800283a 	ret
  807e40:	80800017 	ldw	r2,0(r16)
  807e44:	103ff826 	beq	r2,zero,807e28 <_read_r+0x3c>
  807e48:	88800015 	stw	r2,0(r17)
  807e4c:	1805883a 	mov	r2,r3
  807e50:	dfc00217 	ldw	ra,8(sp)
  807e54:	dc400117 	ldw	r17,4(sp)
  807e58:	dc000017 	ldw	r16,0(sp)
  807e5c:	dec00304 	addi	sp,sp,12
  807e60:	f800283a 	ret

00807e64 <__muldi3>:
  807e64:	2011883a 	mov	r8,r4
  807e68:	427fffcc 	andi	r9,r8,65535
  807e6c:	4018d43a 	srli	r12,r8,16
  807e70:	32bfffcc 	andi	r10,r6,65535
  807e74:	3016d43a 	srli	r11,r6,16
  807e78:	4a85383a 	mul	r2,r9,r10
  807e7c:	6295383a 	mul	r10,r12,r10
  807e80:	4ad3383a 	mul	r9,r9,r11
  807e84:	113fffcc 	andi	r4,r2,65535
  807e88:	1004d43a 	srli	r2,r2,16
  807e8c:	4a93883a 	add	r9,r9,r10
  807e90:	3807883a 	mov	r3,r7
  807e94:	1245883a 	add	r2,r2,r9
  807e98:	280f883a 	mov	r7,r5
  807e9c:	180b883a 	mov	r5,r3
  807ea0:	1006943a 	slli	r3,r2,16
  807ea4:	defffd04 	addi	sp,sp,-12
  807ea8:	dc800215 	stw	r18,8(sp)
  807eac:	1907883a 	add	r3,r3,r4
  807eb0:	dc400115 	stw	r17,4(sp)
  807eb4:	dc000015 	stw	r16,0(sp)
  807eb8:	4165383a 	mul	r18,r8,r5
  807ebc:	31e3383a 	mul	r17,r6,r7
  807ec0:	1012d43a 	srli	r9,r2,16
  807ec4:	62d9383a 	mul	r12,r12,r11
  807ec8:	181f883a 	mov	r15,r3
  807ecc:	1280022e 	bgeu	r2,r10,807ed8 <__muldi3+0x74>
  807ed0:	00800074 	movhi	r2,1
  807ed4:	6099883a 	add	r12,r12,r2
  807ed8:	624d883a 	add	r6,r12,r9
  807edc:	9187883a 	add	r3,r18,r6
  807ee0:	88c7883a 	add	r3,r17,r3
  807ee4:	7805883a 	mov	r2,r15
  807ee8:	dc800217 	ldw	r18,8(sp)
  807eec:	dc400117 	ldw	r17,4(sp)
  807ef0:	dc000017 	ldw	r16,0(sp)
  807ef4:	dec00304 	addi	sp,sp,12
  807ef8:	f800283a 	ret

00807efc <__udivdi3>:
  807efc:	defff004 	addi	sp,sp,-64
  807f00:	2005883a 	mov	r2,r4
  807f04:	3011883a 	mov	r8,r6
  807f08:	df000e15 	stw	fp,56(sp)
  807f0c:	dd000a15 	stw	r20,40(sp)
  807f10:	dc000615 	stw	r16,24(sp)
  807f14:	dfc00f15 	stw	ra,60(sp)
  807f18:	ddc00d15 	stw	r23,52(sp)
  807f1c:	dd800c15 	stw	r22,48(sp)
  807f20:	dd400b15 	stw	r21,44(sp)
  807f24:	dcc00915 	stw	r19,36(sp)
  807f28:	dc800815 	stw	r18,32(sp)
  807f2c:	dc400715 	stw	r17,28(sp)
  807f30:	4021883a 	mov	r16,r8
  807f34:	1039883a 	mov	fp,r2
  807f38:	2829883a 	mov	r20,r5
  807f3c:	38003b1e 	bne	r7,zero,80802c <__udivdi3+0x130>
  807f40:	2a005c36 	bltu	r5,r8,8080b4 <__udivdi3+0x1b8>
  807f44:	4000a626 	beq	r8,zero,8081e0 <__udivdi3+0x2e4>
  807f48:	00bfffd4 	movui	r2,65535
  807f4c:	14009e36 	bltu	r2,r16,8081c8 <__udivdi3+0x2cc>
  807f50:	00803fc4 	movi	r2,255
  807f54:	14013d36 	bltu	r2,r16,80844c <__udivdi3+0x550>
  807f58:	000b883a 	mov	r5,zero
  807f5c:	0005883a 	mov	r2,zero
  807f60:	8084d83a 	srl	r2,r16,r2
  807f64:	01002074 	movhi	r4,129
  807f68:	21384e04 	addi	r4,r4,-7880
  807f6c:	01800804 	movi	r6,32
  807f70:	1105883a 	add	r2,r2,r4
  807f74:	10c00003 	ldbu	r3,0(r2)
  807f78:	28c7883a 	add	r3,r5,r3
  807f7c:	30edc83a 	sub	r22,r6,r3
  807f80:	b000ee1e 	bne	r22,zero,80833c <__udivdi3+0x440>
  807f84:	802ad43a 	srli	r21,r16,16
  807f88:	00800044 	movi	r2,1
  807f8c:	a423c83a 	sub	r17,r20,r16
  807f90:	85ffffcc 	andi	r23,r16,65535
  807f94:	d8800315 	stw	r2,12(sp)
  807f98:	8809883a 	mov	r4,r17
  807f9c:	a80b883a 	mov	r5,r21
  807fa0:	08009000 	call	800900 <__udivsi3>
  807fa4:	8809883a 	mov	r4,r17
  807fa8:	a80b883a 	mov	r5,r21
  807fac:	102d883a 	mov	r22,r2
  807fb0:	08009080 	call	800908 <__umodsi3>
  807fb4:	1004943a 	slli	r2,r2,16
  807fb8:	e006d43a 	srli	r3,fp,16
  807fbc:	bda3383a 	mul	r17,r23,r22
  807fc0:	10c4b03a 	or	r2,r2,r3
  807fc4:	1440042e 	bgeu	r2,r17,807fd8 <__udivdi3+0xdc>
  807fc8:	1405883a 	add	r2,r2,r16
  807fcc:	b5bfffc4 	addi	r22,r22,-1
  807fd0:	14000136 	bltu	r2,r16,807fd8 <__udivdi3+0xdc>
  807fd4:	14413d36 	bltu	r2,r17,8084cc <__udivdi3+0x5d0>
  807fd8:	1463c83a 	sub	r17,r2,r17
  807fdc:	8809883a 	mov	r4,r17
  807fe0:	a80b883a 	mov	r5,r21
  807fe4:	08009000 	call	800900 <__udivsi3>
  807fe8:	8809883a 	mov	r4,r17
  807fec:	a80b883a 	mov	r5,r21
  807ff0:	1029883a 	mov	r20,r2
  807ff4:	08009080 	call	800908 <__umodsi3>
  807ff8:	1004943a 	slli	r2,r2,16
  807ffc:	bd09383a 	mul	r4,r23,r20
  808000:	e0ffffcc 	andi	r3,fp,65535
  808004:	10c4b03a 	or	r2,r2,r3
  808008:	1100042e 	bgeu	r2,r4,80801c <__udivdi3+0x120>
  80800c:	8085883a 	add	r2,r16,r2
  808010:	a53fffc4 	addi	r20,r20,-1
  808014:	14000136 	bltu	r2,r16,80801c <__udivdi3+0x120>
  808018:	11012036 	bltu	r2,r4,80849c <__udivdi3+0x5a0>
  80801c:	b004943a 	slli	r2,r22,16
  808020:	d9000317 	ldw	r4,12(sp)
  808024:	a084b03a 	or	r2,r20,r2
  808028:	00001506 	br	808080 <__udivdi3+0x184>
  80802c:	380d883a 	mov	r6,r7
  808030:	29c06236 	bltu	r5,r7,8081bc <__udivdi3+0x2c0>
  808034:	00bfffd4 	movui	r2,65535
  808038:	11c05a36 	bltu	r2,r7,8081a4 <__udivdi3+0x2a8>
  80803c:	00803fc4 	movi	r2,255
  808040:	11c0fc36 	bltu	r2,r7,808434 <__udivdi3+0x538>
  808044:	000b883a 	mov	r5,zero
  808048:	0005883a 	mov	r2,zero
  80804c:	3084d83a 	srl	r2,r6,r2
  808050:	01002074 	movhi	r4,129
  808054:	21384e04 	addi	r4,r4,-7880
  808058:	01c00804 	movi	r7,32
  80805c:	1105883a 	add	r2,r2,r4
  808060:	10c00003 	ldbu	r3,0(r2)
  808064:	28c7883a 	add	r3,r5,r3
  808068:	38efc83a 	sub	r23,r7,r3
  80806c:	b800691e 	bne	r23,zero,808214 <__udivdi3+0x318>
  808070:	35000136 	bltu	r6,r20,808078 <__udivdi3+0x17c>
  808074:	e4005136 	bltu	fp,r16,8081bc <__udivdi3+0x2c0>
  808078:	00800044 	movi	r2,1
  80807c:	0009883a 	mov	r4,zero
  808080:	2007883a 	mov	r3,r4
  808084:	dfc00f17 	ldw	ra,60(sp)
  808088:	df000e17 	ldw	fp,56(sp)
  80808c:	ddc00d17 	ldw	r23,52(sp)
  808090:	dd800c17 	ldw	r22,48(sp)
  808094:	dd400b17 	ldw	r21,44(sp)
  808098:	dd000a17 	ldw	r20,40(sp)
  80809c:	dcc00917 	ldw	r19,36(sp)
  8080a0:	dc800817 	ldw	r18,32(sp)
  8080a4:	dc400717 	ldw	r17,28(sp)
  8080a8:	dc000617 	ldw	r16,24(sp)
  8080ac:	dec01004 	addi	sp,sp,64
  8080b0:	f800283a 	ret
  8080b4:	00bfffd4 	movui	r2,65535
  8080b8:	12005036 	bltu	r2,r8,8081fc <__udivdi3+0x300>
  8080bc:	00803fc4 	movi	r2,255
  8080c0:	1200e836 	bltu	r2,r8,808464 <__udivdi3+0x568>
  8080c4:	000b883a 	mov	r5,zero
  8080c8:	0005883a 	mov	r2,zero
  8080cc:	8084d83a 	srl	r2,r16,r2
  8080d0:	01002074 	movhi	r4,129
  8080d4:	21384e04 	addi	r4,r4,-7880
  8080d8:	01800804 	movi	r6,32
  8080dc:	1105883a 	add	r2,r2,r4
  8080e0:	10c00003 	ldbu	r3,0(r2)
  8080e4:	28c7883a 	add	r3,r5,r3
  8080e8:	30cbc83a 	sub	r5,r6,r3
  8080ec:	28000626 	beq	r5,zero,808108 <__udivdi3+0x20c>
  8080f0:	3145c83a 	sub	r2,r6,r5
  8080f4:	e084d83a 	srl	r2,fp,r2
  8080f8:	a146983a 	sll	r3,r20,r5
  8080fc:	e178983a 	sll	fp,fp,r5
  808100:	8160983a 	sll	r16,r16,r5
  808104:	18a8b03a 	or	r20,r3,r2
  808108:	802ad43a 	srli	r21,r16,16
  80810c:	a009883a 	mov	r4,r20
  808110:	85ffffcc 	andi	r23,r16,65535
  808114:	a80b883a 	mov	r5,r21
  808118:	08009000 	call	800900 <__udivsi3>
  80811c:	a009883a 	mov	r4,r20
  808120:	a80b883a 	mov	r5,r21
  808124:	102d883a 	mov	r22,r2
  808128:	08009080 	call	800908 <__umodsi3>
  80812c:	1004943a 	slli	r2,r2,16
  808130:	e006d43a 	srli	r3,fp,16
  808134:	bda3383a 	mul	r17,r23,r22
  808138:	10c4b03a 	or	r2,r2,r3
  80813c:	1440042e 	bgeu	r2,r17,808150 <__udivdi3+0x254>
  808140:	1405883a 	add	r2,r2,r16
  808144:	b5bfffc4 	addi	r22,r22,-1
  808148:	14000136 	bltu	r2,r16,808150 <__udivdi3+0x254>
  80814c:	1440d536 	bltu	r2,r17,8084a4 <__udivdi3+0x5a8>
  808150:	1463c83a 	sub	r17,r2,r17
  808154:	8809883a 	mov	r4,r17
  808158:	a80b883a 	mov	r5,r21
  80815c:	08009000 	call	800900 <__udivsi3>
  808160:	8809883a 	mov	r4,r17
  808164:	a80b883a 	mov	r5,r21
  808168:	1029883a 	mov	r20,r2
  80816c:	08009080 	call	800908 <__umodsi3>
  808170:	1004943a 	slli	r2,r2,16
  808174:	bd09383a 	mul	r4,r23,r20
  808178:	e0ffffcc 	andi	r3,fp,65535
  80817c:	10c4b03a 	or	r2,r2,r3
  808180:	1100042e 	bgeu	r2,r4,808194 <__udivdi3+0x298>
  808184:	8085883a 	add	r2,r16,r2
  808188:	a53fffc4 	addi	r20,r20,-1
  80818c:	14000136 	bltu	r2,r16,808194 <__udivdi3+0x298>
  808190:	1100c736 	bltu	r2,r4,8084b0 <__udivdi3+0x5b4>
  808194:	b004943a 	slli	r2,r22,16
  808198:	0009883a 	mov	r4,zero
  80819c:	a084b03a 	or	r2,r20,r2
  8081a0:	003fb706 	br	808080 <__udivdi3+0x184>
  8081a4:	00804034 	movhi	r2,256
  8081a8:	10bfffc4 	addi	r2,r2,-1
  8081ac:	11c0a436 	bltu	r2,r7,808440 <__udivdi3+0x544>
  8081b0:	01400404 	movi	r5,16
  8081b4:	2805883a 	mov	r2,r5
  8081b8:	003fa406 	br	80804c <__udivdi3+0x150>
  8081bc:	0005883a 	mov	r2,zero
  8081c0:	0009883a 	mov	r4,zero
  8081c4:	003fae06 	br	808080 <__udivdi3+0x184>
  8081c8:	00804034 	movhi	r2,256
  8081cc:	10bfffc4 	addi	r2,r2,-1
  8081d0:	1400a136 	bltu	r2,r16,808458 <__udivdi3+0x55c>
  8081d4:	01400404 	movi	r5,16
  8081d8:	2805883a 	mov	r2,r5
  8081dc:	003f6006 	br	807f60 <__udivdi3+0x64>
  8081e0:	01000044 	movi	r4,1
  8081e4:	000b883a 	mov	r5,zero
  8081e8:	08009000 	call	800900 <__udivsi3>
  8081ec:	1021883a 	mov	r16,r2
  8081f0:	00bfffd4 	movui	r2,65535
  8081f4:	143ff436 	bltu	r2,r16,8081c8 <__udivdi3+0x2cc>
  8081f8:	003f5506 	br	807f50 <__udivdi3+0x54>
  8081fc:	00804034 	movhi	r2,256
  808200:	10bfffc4 	addi	r2,r2,-1
  808204:	12009a36 	bltu	r2,r8,808470 <__udivdi3+0x574>
  808208:	01400404 	movi	r5,16
  80820c:	2805883a 	mov	r2,r5
  808210:	003fae06 	br	8080cc <__udivdi3+0x1d0>
  808214:	3dc5c83a 	sub	r2,r7,r23
  808218:	35c8983a 	sll	r4,r6,r23
  80821c:	8086d83a 	srl	r3,r16,r2
  808220:	a0a2d83a 	srl	r17,r20,r2
  808224:	e084d83a 	srl	r2,fp,r2
  808228:	20eab03a 	or	r21,r4,r3
  80822c:	a82cd43a 	srli	r22,r21,16
  808230:	a5c6983a 	sll	r3,r20,r23
  808234:	8809883a 	mov	r4,r17
  808238:	b00b883a 	mov	r5,r22
  80823c:	1886b03a 	or	r3,r3,r2
  808240:	d8c00215 	stw	r3,8(sp)
  808244:	08009000 	call	800900 <__udivsi3>
  808248:	8809883a 	mov	r4,r17
  80824c:	b00b883a 	mov	r5,r22
  808250:	1029883a 	mov	r20,r2
  808254:	08009080 	call	800908 <__umodsi3>
  808258:	a8ffffcc 	andi	r3,r21,65535
  80825c:	d8c00515 	stw	r3,20(sp)
  808260:	d9000217 	ldw	r4,8(sp)
  808264:	d9400517 	ldw	r5,20(sp)
  808268:	1004943a 	slli	r2,r2,16
  80826c:	2006d43a 	srli	r3,r4,16
  808270:	85e0983a 	sll	r16,r16,r23
  808274:	2d23383a 	mul	r17,r5,r20
  808278:	10c4b03a 	or	r2,r2,r3
  80827c:	dc000015 	stw	r16,0(sp)
  808280:	1440032e 	bgeu	r2,r17,808290 <__udivdi3+0x394>
  808284:	1545883a 	add	r2,r2,r21
  808288:	a53fffc4 	addi	r20,r20,-1
  80828c:	15407f2e 	bgeu	r2,r21,80848c <__udivdi3+0x590>
  808290:	1463c83a 	sub	r17,r2,r17
  808294:	8809883a 	mov	r4,r17
  808298:	b00b883a 	mov	r5,r22
  80829c:	08009000 	call	800900 <__udivsi3>
  8082a0:	8809883a 	mov	r4,r17
  8082a4:	b00b883a 	mov	r5,r22
  8082a8:	1021883a 	mov	r16,r2
  8082ac:	08009080 	call	800908 <__umodsi3>
  8082b0:	d8c00517 	ldw	r3,20(sp)
  8082b4:	d9000217 	ldw	r4,8(sp)
  8082b8:	1004943a 	slli	r2,r2,16
  8082bc:	1c0f383a 	mul	r7,r3,r16
  8082c0:	20ffffcc 	andi	r3,r4,65535
  8082c4:	10e2b03a 	or	r17,r2,r3
  8082c8:	89c0032e 	bgeu	r17,r7,8082d8 <__udivdi3+0x3dc>
  8082cc:	8d63883a 	add	r17,r17,r21
  8082d0:	843fffc4 	addi	r16,r16,-1
  8082d4:	8d40692e 	bgeu	r17,r21,80847c <__udivdi3+0x580>
  8082d8:	a008943a 	slli	r4,r20,16
  8082dc:	d9400017 	ldw	r5,0(sp)
  8082e0:	89e3c83a 	sub	r17,r17,r7
  8082e4:	8110b03a 	or	r8,r16,r4
  8082e8:	280cd43a 	srli	r6,r5,16
  8082ec:	28ffffcc 	andi	r3,r5,65535
  8082f0:	40bfffcc 	andi	r2,r8,65535
  8082f4:	400ad43a 	srli	r5,r8,16
  8082f8:	10d3383a 	mul	r9,r2,r3
  8082fc:	1185383a 	mul	r2,r2,r6
  808300:	28c7383a 	mul	r3,r5,r3
  808304:	4808d43a 	srli	r4,r9,16
  808308:	298b383a 	mul	r5,r5,r6
  80830c:	10c5883a 	add	r2,r2,r3
  808310:	2089883a 	add	r4,r4,r2
  808314:	20c0022e 	bgeu	r4,r3,808320 <__udivdi3+0x424>
  808318:	00800074 	movhi	r2,1
  80831c:	288b883a 	add	r5,r5,r2
  808320:	2004d43a 	srli	r2,r4,16
  808324:	288b883a 	add	r5,r5,r2
  808328:	89403f36 	bltu	r17,r5,808428 <__udivdi3+0x52c>
  80832c:	89403926 	beq	r17,r5,808414 <__udivdi3+0x518>
  808330:	4005883a 	mov	r2,r8
  808334:	0009883a 	mov	r4,zero
  808338:	003f5106 	br	808080 <__udivdi3+0x184>
  80833c:	85a0983a 	sll	r16,r16,r22
  808340:	3585c83a 	sub	r2,r6,r22
  808344:	a0a2d83a 	srl	r17,r20,r2
  808348:	802ad43a 	srli	r21,r16,16
  80834c:	e084d83a 	srl	r2,fp,r2
  808350:	a586983a 	sll	r3,r20,r22
  808354:	8809883a 	mov	r4,r17
  808358:	a80b883a 	mov	r5,r21
  80835c:	1886b03a 	or	r3,r3,r2
  808360:	d8c00115 	stw	r3,4(sp)
  808364:	08009000 	call	800900 <__udivsi3>
  808368:	8809883a 	mov	r4,r17
  80836c:	a80b883a 	mov	r5,r21
  808370:	d8800415 	stw	r2,16(sp)
  808374:	08009080 	call	800908 <__umodsi3>
  808378:	d9000117 	ldw	r4,4(sp)
  80837c:	d9400417 	ldw	r5,16(sp)
  808380:	1004943a 	slli	r2,r2,16
  808384:	85ffffcc 	andi	r23,r16,65535
  808388:	2006d43a 	srli	r3,r4,16
  80838c:	b963383a 	mul	r17,r23,r5
  808390:	10c4b03a 	or	r2,r2,r3
  808394:	1440042e 	bgeu	r2,r17,8083a8 <__udivdi3+0x4ac>
  808398:	297fffc4 	addi	r5,r5,-1
  80839c:	1405883a 	add	r2,r2,r16
  8083a0:	d9400415 	stw	r5,16(sp)
  8083a4:	1400442e 	bgeu	r2,r16,8084b8 <__udivdi3+0x5bc>
  8083a8:	1463c83a 	sub	r17,r2,r17
  8083ac:	8809883a 	mov	r4,r17
  8083b0:	a80b883a 	mov	r5,r21
  8083b4:	08009000 	call	800900 <__udivsi3>
  8083b8:	8809883a 	mov	r4,r17
  8083bc:	a80b883a 	mov	r5,r21
  8083c0:	1029883a 	mov	r20,r2
  8083c4:	08009080 	call	800908 <__umodsi3>
  8083c8:	d9400117 	ldw	r5,4(sp)
  8083cc:	1004943a 	slli	r2,r2,16
  8083d0:	bd09383a 	mul	r4,r23,r20
  8083d4:	28ffffcc 	andi	r3,r5,65535
  8083d8:	10c6b03a 	or	r3,r2,r3
  8083dc:	1900062e 	bgeu	r3,r4,8083f8 <__udivdi3+0x4fc>
  8083e0:	1c07883a 	add	r3,r3,r16
  8083e4:	a53fffc4 	addi	r20,r20,-1
  8083e8:	1c000336 	bltu	r3,r16,8083f8 <__udivdi3+0x4fc>
  8083ec:	1900022e 	bgeu	r3,r4,8083f8 <__udivdi3+0x4fc>
  8083f0:	a53fffc4 	addi	r20,r20,-1
  8083f4:	1c07883a 	add	r3,r3,r16
  8083f8:	d9400417 	ldw	r5,16(sp)
  8083fc:	e5b8983a 	sll	fp,fp,r22
  808400:	1923c83a 	sub	r17,r3,r4
  808404:	2804943a 	slli	r2,r5,16
  808408:	a0a8b03a 	or	r20,r20,r2
  80840c:	dd000315 	stw	r20,12(sp)
  808410:	003ee106 	br	807f98 <__udivdi3+0x9c>
  808414:	2004943a 	slli	r2,r4,16
  808418:	e5c8983a 	sll	r4,fp,r23
  80841c:	48ffffcc 	andi	r3,r9,65535
  808420:	10c5883a 	add	r2,r2,r3
  808424:	20bfc22e 	bgeu	r4,r2,808330 <__udivdi3+0x434>
  808428:	40bfffc4 	addi	r2,r8,-1
  80842c:	0009883a 	mov	r4,zero
  808430:	003f1306 	br	808080 <__udivdi3+0x184>
  808434:	01400204 	movi	r5,8
  808438:	2805883a 	mov	r2,r5
  80843c:	003f0306 	br	80804c <__udivdi3+0x150>
  808440:	01400604 	movi	r5,24
  808444:	2805883a 	mov	r2,r5
  808448:	003f0006 	br	80804c <__udivdi3+0x150>
  80844c:	01400204 	movi	r5,8
  808450:	2805883a 	mov	r2,r5
  808454:	003ec206 	br	807f60 <__udivdi3+0x64>
  808458:	01400604 	movi	r5,24
  80845c:	2805883a 	mov	r2,r5
  808460:	003ebf06 	br	807f60 <__udivdi3+0x64>
  808464:	01400204 	movi	r5,8
  808468:	2805883a 	mov	r2,r5
  80846c:	003f1706 	br	8080cc <__udivdi3+0x1d0>
  808470:	01400604 	movi	r5,24
  808474:	2805883a 	mov	r2,r5
  808478:	003f1406 	br	8080cc <__udivdi3+0x1d0>
  80847c:	89ff962e 	bgeu	r17,r7,8082d8 <__udivdi3+0x3dc>
  808480:	8d63883a 	add	r17,r17,r21
  808484:	843fffc4 	addi	r16,r16,-1
  808488:	003f9306 	br	8082d8 <__udivdi3+0x3dc>
  80848c:	147f802e 	bgeu	r2,r17,808290 <__udivdi3+0x394>
  808490:	a53fffc4 	addi	r20,r20,-1
  808494:	1545883a 	add	r2,r2,r21
  808498:	003f7d06 	br	808290 <__udivdi3+0x394>
  80849c:	a53fffc4 	addi	r20,r20,-1
  8084a0:	003ede06 	br	80801c <__udivdi3+0x120>
  8084a4:	b5bfffc4 	addi	r22,r22,-1
  8084a8:	1405883a 	add	r2,r2,r16
  8084ac:	003f2806 	br	808150 <__udivdi3+0x254>
  8084b0:	a53fffc4 	addi	r20,r20,-1
  8084b4:	003f3706 	br	808194 <__udivdi3+0x298>
  8084b8:	147fbb2e 	bgeu	r2,r17,8083a8 <__udivdi3+0x4ac>
  8084bc:	297fffc4 	addi	r5,r5,-1
  8084c0:	1405883a 	add	r2,r2,r16
  8084c4:	d9400415 	stw	r5,16(sp)
  8084c8:	003fb706 	br	8083a8 <__udivdi3+0x4ac>
  8084cc:	b5bfffc4 	addi	r22,r22,-1
  8084d0:	1405883a 	add	r2,r2,r16
  8084d4:	003ec006 	br	807fd8 <__udivdi3+0xdc>

008084d8 <__umoddi3>:
  8084d8:	defff104 	addi	sp,sp,-60
  8084dc:	dd800b15 	stw	r22,44(sp)
  8084e0:	dd000915 	stw	r20,36(sp)
  8084e4:	dc000515 	stw	r16,20(sp)
  8084e8:	dfc00e15 	stw	ra,56(sp)
  8084ec:	df000d15 	stw	fp,52(sp)
  8084f0:	ddc00c15 	stw	r23,48(sp)
  8084f4:	dd400a15 	stw	r21,40(sp)
  8084f8:	dcc00815 	stw	r19,32(sp)
  8084fc:	dc800715 	stw	r18,28(sp)
  808500:	dc400615 	stw	r17,24(sp)
  808504:	3021883a 	mov	r16,r6
  808508:	202d883a 	mov	r22,r4
  80850c:	2829883a 	mov	r20,r5
  808510:	38002b1e 	bne	r7,zero,8085c0 <__umoddi3+0xe8>
  808514:	29805036 	bltu	r5,r6,808658 <__umoddi3+0x180>
  808518:	30008a26 	beq	r6,zero,808744 <__umoddi3+0x26c>
  80851c:	00bfffd4 	movui	r2,65535
  808520:	14008236 	bltu	r2,r16,80872c <__umoddi3+0x254>
  808524:	00803fc4 	movi	r2,255
  808528:	14013636 	bltu	r2,r16,808a04 <__umoddi3+0x52c>
  80852c:	000b883a 	mov	r5,zero
  808530:	0005883a 	mov	r2,zero
  808534:	8084d83a 	srl	r2,r16,r2
  808538:	01002074 	movhi	r4,129
  80853c:	21384e04 	addi	r4,r4,-7880
  808540:	01800804 	movi	r6,32
  808544:	1105883a 	add	r2,r2,r4
  808548:	10c00003 	ldbu	r3,0(r2)
  80854c:	28c7883a 	add	r3,r5,r3
  808550:	30efc83a 	sub	r23,r6,r3
  808554:	b800941e 	bne	r23,zero,8087a8 <__umoddi3+0x2d0>
  808558:	802ad43a 	srli	r21,r16,16
  80855c:	a423c83a 	sub	r17,r20,r16
  808560:	0039883a 	mov	fp,zero
  808564:	853fffcc 	andi	r20,r16,65535
  808568:	8809883a 	mov	r4,r17
  80856c:	a80b883a 	mov	r5,r21
  808570:	08009000 	call	800900 <__udivsi3>
  808574:	8809883a 	mov	r4,r17
  808578:	a80b883a 	mov	r5,r21
  80857c:	a0a3383a 	mul	r17,r20,r2
  808580:	08009080 	call	800908 <__umodsi3>
  808584:	1004943a 	slli	r2,r2,16
  808588:	b006d43a 	srli	r3,r22,16
  80858c:	10c4b03a 	or	r2,r2,r3
  808590:	1440032e 	bgeu	r2,r17,8085a0 <__umoddi3+0xc8>
  808594:	1405883a 	add	r2,r2,r16
  808598:	14000136 	bltu	r2,r16,8085a0 <__umoddi3+0xc8>
  80859c:	14413536 	bltu	r2,r17,808a74 <__umoddi3+0x59c>
  8085a0:	1463c83a 	sub	r17,r2,r17
  8085a4:	8809883a 	mov	r4,r17
  8085a8:	a80b883a 	mov	r5,r21
  8085ac:	08009000 	call	800900 <__udivsi3>
  8085b0:	8809883a 	mov	r4,r17
  8085b4:	a0a3383a 	mul	r17,r20,r2
  8085b8:	a80b883a 	mov	r5,r21
  8085bc:	00004d06 	br	8086f4 <__umoddi3+0x21c>
  8085c0:	380d883a 	mov	r6,r7
  8085c4:	29c0102e 	bgeu	r5,r7,808608 <__umoddi3+0x130>
  8085c8:	2011883a 	mov	r8,r4
  8085cc:	2813883a 	mov	r9,r5
  8085d0:	4005883a 	mov	r2,r8
  8085d4:	4807883a 	mov	r3,r9
  8085d8:	dfc00e17 	ldw	ra,56(sp)
  8085dc:	df000d17 	ldw	fp,52(sp)
  8085e0:	ddc00c17 	ldw	r23,48(sp)
  8085e4:	dd800b17 	ldw	r22,44(sp)
  8085e8:	dd400a17 	ldw	r21,40(sp)
  8085ec:	dd000917 	ldw	r20,36(sp)
  8085f0:	dcc00817 	ldw	r19,32(sp)
  8085f4:	dc800717 	ldw	r18,28(sp)
  8085f8:	dc400617 	ldw	r17,24(sp)
  8085fc:	dc000517 	ldw	r16,20(sp)
  808600:	dec00f04 	addi	sp,sp,60
  808604:	f800283a 	ret
  808608:	00bfffd4 	movui	r2,65535
  80860c:	11c05a36 	bltu	r2,r7,808778 <__umoddi3+0x2a0>
  808610:	00803fc4 	movi	r2,255
  808614:	11c0fe36 	bltu	r2,r7,808a10 <__umoddi3+0x538>
  808618:	000b883a 	mov	r5,zero
  80861c:	0005883a 	mov	r2,zero
  808620:	3084d83a 	srl	r2,r6,r2
  808624:	01002074 	movhi	r4,129
  808628:	21384e04 	addi	r4,r4,-7880
  80862c:	01c00804 	movi	r7,32
  808630:	1105883a 	add	r2,r2,r4
  808634:	10c00003 	ldbu	r3,0(r2)
  808638:	28c7883a 	add	r3,r5,r3
  80863c:	38ebc83a 	sub	r21,r7,r3
  808640:	a800851e 	bne	r21,zero,808858 <__umoddi3+0x380>
  808644:	35005236 	bltu	r6,r20,808790 <__umoddi3+0x2b8>
  808648:	b400512e 	bgeu	r22,r16,808790 <__umoddi3+0x2b8>
  80864c:	b011883a 	mov	r8,r22
  808650:	a013883a 	mov	r9,r20
  808654:	003fde06 	br	8085d0 <__umoddi3+0xf8>
  808658:	00bfffd4 	movui	r2,65535
  80865c:	11804036 	bltu	r2,r6,808760 <__umoddi3+0x288>
  808660:	00803fc4 	movi	r2,255
  808664:	1180ed36 	bltu	r2,r6,808a1c <__umoddi3+0x544>
  808668:	000b883a 	mov	r5,zero
  80866c:	0005883a 	mov	r2,zero
  808670:	8084d83a 	srl	r2,r16,r2
  808674:	01002074 	movhi	r4,129
  808678:	21384e04 	addi	r4,r4,-7880
  80867c:	01800804 	movi	r6,32
  808680:	1105883a 	add	r2,r2,r4
  808684:	10c00003 	ldbu	r3,0(r2)
  808688:	28c7883a 	add	r3,r5,r3
  80868c:	30c7c83a 	sub	r3,r6,r3
  808690:	1800bf1e 	bne	r3,zero,808990 <__umoddi3+0x4b8>
  808694:	0039883a 	mov	fp,zero
  808698:	802ad43a 	srli	r21,r16,16
  80869c:	a009883a 	mov	r4,r20
  8086a0:	85ffffcc 	andi	r23,r16,65535
  8086a4:	a80b883a 	mov	r5,r21
  8086a8:	08009000 	call	800900 <__udivsi3>
  8086ac:	a009883a 	mov	r4,r20
  8086b0:	a80b883a 	mov	r5,r21
  8086b4:	b8a3383a 	mul	r17,r23,r2
  8086b8:	08009080 	call	800908 <__umodsi3>
  8086bc:	1004943a 	slli	r2,r2,16
  8086c0:	b006d43a 	srli	r3,r22,16
  8086c4:	10c4b03a 	or	r2,r2,r3
  8086c8:	1440032e 	bgeu	r2,r17,8086d8 <__umoddi3+0x200>
  8086cc:	1405883a 	add	r2,r2,r16
  8086d0:	14000136 	bltu	r2,r16,8086d8 <__umoddi3+0x200>
  8086d4:	1440e536 	bltu	r2,r17,808a6c <__umoddi3+0x594>
  8086d8:	1463c83a 	sub	r17,r2,r17
  8086dc:	8809883a 	mov	r4,r17
  8086e0:	a80b883a 	mov	r5,r21
  8086e4:	08009000 	call	800900 <__udivsi3>
  8086e8:	8809883a 	mov	r4,r17
  8086ec:	b8a3383a 	mul	r17,r23,r2
  8086f0:	a80b883a 	mov	r5,r21
  8086f4:	08009080 	call	800908 <__umodsi3>
  8086f8:	1004943a 	slli	r2,r2,16
  8086fc:	b0ffffcc 	andi	r3,r22,65535
  808700:	10c4b03a 	or	r2,r2,r3
  808704:	1440042e 	bgeu	r2,r17,808718 <__umoddi3+0x240>
  808708:	1405883a 	add	r2,r2,r16
  80870c:	14000236 	bltu	r2,r16,808718 <__umoddi3+0x240>
  808710:	1440012e 	bgeu	r2,r17,808718 <__umoddi3+0x240>
  808714:	1405883a 	add	r2,r2,r16
  808718:	1445c83a 	sub	r2,r2,r17
  80871c:	1724d83a 	srl	r18,r2,fp
  808720:	0013883a 	mov	r9,zero
  808724:	9011883a 	mov	r8,r18
  808728:	003fa906 	br	8085d0 <__umoddi3+0xf8>
  80872c:	00804034 	movhi	r2,256
  808730:	10bfffc4 	addi	r2,r2,-1
  808734:	1400b036 	bltu	r2,r16,8089f8 <__umoddi3+0x520>
  808738:	01400404 	movi	r5,16
  80873c:	2805883a 	mov	r2,r5
  808740:	003f7c06 	br	808534 <__umoddi3+0x5c>
  808744:	01000044 	movi	r4,1
  808748:	000b883a 	mov	r5,zero
  80874c:	08009000 	call	800900 <__udivsi3>
  808750:	1021883a 	mov	r16,r2
  808754:	00bfffd4 	movui	r2,65535
  808758:	143ff436 	bltu	r2,r16,80872c <__umoddi3+0x254>
  80875c:	003f7106 	br	808524 <__umoddi3+0x4c>
  808760:	00804034 	movhi	r2,256
  808764:	10bfffc4 	addi	r2,r2,-1
  808768:	1180af36 	bltu	r2,r6,808a28 <__umoddi3+0x550>
  80876c:	01400404 	movi	r5,16
  808770:	2805883a 	mov	r2,r5
  808774:	003fbe06 	br	808670 <__umoddi3+0x198>
  808778:	00804034 	movhi	r2,256
  80877c:	10bfffc4 	addi	r2,r2,-1
  808780:	11c0ac36 	bltu	r2,r7,808a34 <__umoddi3+0x55c>
  808784:	01400404 	movi	r5,16
  808788:	2805883a 	mov	r2,r5
  80878c:	003fa406 	br	808620 <__umoddi3+0x148>
  808790:	b409c83a 	sub	r4,r22,r16
  808794:	b105803a 	cmpltu	r2,r22,r4
  808798:	a187c83a 	sub	r3,r20,r6
  80879c:	18a9c83a 	sub	r20,r3,r2
  8087a0:	202d883a 	mov	r22,r4
  8087a4:	003fa906 	br	80864c <__umoddi3+0x174>
  8087a8:	85e0983a 	sll	r16,r16,r23
  8087ac:	35c5c83a 	sub	r2,r6,r23
  8087b0:	a0a2d83a 	srl	r17,r20,r2
  8087b4:	802ad43a 	srli	r21,r16,16
  8087b8:	b084d83a 	srl	r2,r22,r2
  8087bc:	a5c6983a 	sll	r3,r20,r23
  8087c0:	8809883a 	mov	r4,r17
  8087c4:	a80b883a 	mov	r5,r21
  8087c8:	1886b03a 	or	r3,r3,r2
  8087cc:	d8c00115 	stw	r3,4(sp)
  8087d0:	853fffcc 	andi	r20,r16,65535
  8087d4:	08009000 	call	800900 <__udivsi3>
  8087d8:	8809883a 	mov	r4,r17
  8087dc:	a80b883a 	mov	r5,r21
  8087e0:	a0a3383a 	mul	r17,r20,r2
  8087e4:	08009080 	call	800908 <__umodsi3>
  8087e8:	d9000117 	ldw	r4,4(sp)
  8087ec:	1004943a 	slli	r2,r2,16
  8087f0:	b839883a 	mov	fp,r23
  8087f4:	2006d43a 	srli	r3,r4,16
  8087f8:	10c4b03a 	or	r2,r2,r3
  8087fc:	1440022e 	bgeu	r2,r17,808808 <__umoddi3+0x330>
  808800:	1405883a 	add	r2,r2,r16
  808804:	1400962e 	bgeu	r2,r16,808a60 <__umoddi3+0x588>
  808808:	1463c83a 	sub	r17,r2,r17
  80880c:	8809883a 	mov	r4,r17
  808810:	a80b883a 	mov	r5,r21
  808814:	08009000 	call	800900 <__udivsi3>
  808818:	8809883a 	mov	r4,r17
  80881c:	a80b883a 	mov	r5,r21
  808820:	a0a3383a 	mul	r17,r20,r2
  808824:	08009080 	call	800908 <__umodsi3>
  808828:	d9400117 	ldw	r5,4(sp)
  80882c:	1004943a 	slli	r2,r2,16
  808830:	28ffffcc 	andi	r3,r5,65535
  808834:	10c4b03a 	or	r2,r2,r3
  808838:	1440042e 	bgeu	r2,r17,80884c <__umoddi3+0x374>
  80883c:	1405883a 	add	r2,r2,r16
  808840:	14000236 	bltu	r2,r16,80884c <__umoddi3+0x374>
  808844:	1440012e 	bgeu	r2,r17,80884c <__umoddi3+0x374>
  808848:	1405883a 	add	r2,r2,r16
  80884c:	b5ec983a 	sll	r22,r22,r23
  808850:	1463c83a 	sub	r17,r2,r17
  808854:	003f4406 	br	808568 <__umoddi3+0x90>
  808858:	3d4fc83a 	sub	r7,r7,r21
  80885c:	3546983a 	sll	r3,r6,r21
  808860:	81c4d83a 	srl	r2,r16,r7
  808864:	a1e2d83a 	srl	r17,r20,r7
  808868:	a54c983a 	sll	r6,r20,r21
  80886c:	18aeb03a 	or	r23,r3,r2
  808870:	b828d43a 	srli	r20,r23,16
  808874:	b1c4d83a 	srl	r2,r22,r7
  808878:	8809883a 	mov	r4,r17
  80887c:	a00b883a 	mov	r5,r20
  808880:	308cb03a 	or	r6,r6,r2
  808884:	d9c00315 	stw	r7,12(sp)
  808888:	d9800215 	stw	r6,8(sp)
  80888c:	08009000 	call	800900 <__udivsi3>
  808890:	8809883a 	mov	r4,r17
  808894:	a00b883a 	mov	r5,r20
  808898:	1039883a 	mov	fp,r2
  80889c:	08009080 	call	800908 <__umodsi3>
  8088a0:	b8ffffcc 	andi	r3,r23,65535
  8088a4:	d8c00415 	stw	r3,16(sp)
  8088a8:	d9000217 	ldw	r4,8(sp)
  8088ac:	d9400417 	ldw	r5,16(sp)
  8088b0:	1004943a 	slli	r2,r2,16
  8088b4:	2006d43a 	srli	r3,r4,16
  8088b8:	8560983a 	sll	r16,r16,r21
  8088bc:	2f23383a 	mul	r17,r5,fp
  8088c0:	10c4b03a 	or	r2,r2,r3
  8088c4:	dc000015 	stw	r16,0(sp)
  8088c8:	b56c983a 	sll	r22,r22,r21
  8088cc:	1440032e 	bgeu	r2,r17,8088dc <__umoddi3+0x404>
  8088d0:	15c5883a 	add	r2,r2,r23
  8088d4:	e73fffc4 	addi	fp,fp,-1
  8088d8:	15c05d2e 	bgeu	r2,r23,808a50 <__umoddi3+0x578>
  8088dc:	1463c83a 	sub	r17,r2,r17
  8088e0:	8809883a 	mov	r4,r17
  8088e4:	a00b883a 	mov	r5,r20
  8088e8:	08009000 	call	800900 <__udivsi3>
  8088ec:	8809883a 	mov	r4,r17
  8088f0:	a00b883a 	mov	r5,r20
  8088f4:	1021883a 	mov	r16,r2
  8088f8:	08009080 	call	800908 <__umodsi3>
  8088fc:	d8c00417 	ldw	r3,16(sp)
  808900:	d9000217 	ldw	r4,8(sp)
  808904:	1004943a 	slli	r2,r2,16
  808908:	1c23383a 	mul	r17,r3,r16
  80890c:	20ffffcc 	andi	r3,r4,65535
  808910:	10ceb03a 	or	r7,r2,r3
  808914:	3c40032e 	bgeu	r7,r17,808924 <__umoddi3+0x44c>
  808918:	3dcf883a 	add	r7,r7,r23
  80891c:	843fffc4 	addi	r16,r16,-1
  808920:	3dc0472e 	bgeu	r7,r23,808a40 <__umoddi3+0x568>
  808924:	e004943a 	slli	r2,fp,16
  808928:	d9400017 	ldw	r5,0(sp)
  80892c:	3c4fc83a 	sub	r7,r7,r17
  808930:	8084b03a 	or	r2,r16,r2
  808934:	28ffffcc 	andi	r3,r5,65535
  808938:	280cd43a 	srli	r6,r5,16
  80893c:	100ad43a 	srli	r5,r2,16
  808940:	10bfffcc 	andi	r2,r2,65535
  808944:	10d1383a 	mul	r8,r2,r3
  808948:	28c7383a 	mul	r3,r5,r3
  80894c:	1185383a 	mul	r2,r2,r6
  808950:	4008d43a 	srli	r4,r8,16
  808954:	298b383a 	mul	r5,r5,r6
  808958:	10c5883a 	add	r2,r2,r3
  80895c:	2089883a 	add	r4,r4,r2
  808960:	20c0022e 	bgeu	r4,r3,80896c <__umoddi3+0x494>
  808964:	00800074 	movhi	r2,1
  808968:	288b883a 	add	r5,r5,r2
  80896c:	2004d43a 	srli	r2,r4,16
  808970:	2008943a 	slli	r4,r4,16
  808974:	40ffffcc 	andi	r3,r8,65535
  808978:	288b883a 	add	r5,r5,r2
  80897c:	20c9883a 	add	r4,r4,r3
  808980:	39400b36 	bltu	r7,r5,8089b0 <__umoddi3+0x4d8>
  808984:	39403d26 	beq	r7,r5,808a7c <__umoddi3+0x5a4>
  808988:	394bc83a 	sub	r5,r7,r5
  80898c:	00000f06 	br	8089cc <__umoddi3+0x4f4>
  808990:	30c5c83a 	sub	r2,r6,r3
  808994:	1839883a 	mov	fp,r3
  808998:	b084d83a 	srl	r2,r22,r2
  80899c:	a0c6983a 	sll	r3,r20,r3
  8089a0:	8720983a 	sll	r16,r16,fp
  8089a4:	b72c983a 	sll	r22,r22,fp
  8089a8:	18a8b03a 	or	r20,r3,r2
  8089ac:	003f3a06 	br	808698 <__umoddi3+0x1c0>
  8089b0:	d8c00017 	ldw	r3,0(sp)
  8089b4:	20c5c83a 	sub	r2,r4,r3
  8089b8:	2089803a 	cmpltu	r4,r4,r2
  8089bc:	2dc7c83a 	sub	r3,r5,r23
  8089c0:	1907c83a 	sub	r3,r3,r4
  8089c4:	38cbc83a 	sub	r5,r7,r3
  8089c8:	1009883a 	mov	r4,r2
  8089cc:	b105c83a 	sub	r2,r22,r4
  8089d0:	b087803a 	cmpltu	r3,r22,r2
  8089d4:	28c7c83a 	sub	r3,r5,r3
  8089d8:	d9400317 	ldw	r5,12(sp)
  8089dc:	1544d83a 	srl	r2,r2,r21
  8089e0:	1948983a 	sll	r4,r3,r5
  8089e4:	1d46d83a 	srl	r3,r3,r21
  8089e8:	20a4b03a 	or	r18,r4,r2
  8089ec:	9011883a 	mov	r8,r18
  8089f0:	1813883a 	mov	r9,r3
  8089f4:	003ef606 	br	8085d0 <__umoddi3+0xf8>
  8089f8:	01400604 	movi	r5,24
  8089fc:	2805883a 	mov	r2,r5
  808a00:	003ecc06 	br	808534 <__umoddi3+0x5c>
  808a04:	01400204 	movi	r5,8
  808a08:	2805883a 	mov	r2,r5
  808a0c:	003ec906 	br	808534 <__umoddi3+0x5c>
  808a10:	01400204 	movi	r5,8
  808a14:	2805883a 	mov	r2,r5
  808a18:	003f0106 	br	808620 <__umoddi3+0x148>
  808a1c:	01400204 	movi	r5,8
  808a20:	2805883a 	mov	r2,r5
  808a24:	003f1206 	br	808670 <__umoddi3+0x198>
  808a28:	01400604 	movi	r5,24
  808a2c:	2805883a 	mov	r2,r5
  808a30:	003f0f06 	br	808670 <__umoddi3+0x198>
  808a34:	01400604 	movi	r5,24
  808a38:	2805883a 	mov	r2,r5
  808a3c:	003ef806 	br	808620 <__umoddi3+0x148>
  808a40:	3c7fb82e 	bgeu	r7,r17,808924 <__umoddi3+0x44c>
  808a44:	843fffc4 	addi	r16,r16,-1
  808a48:	3dcf883a 	add	r7,r7,r23
  808a4c:	003fb506 	br	808924 <__umoddi3+0x44c>
  808a50:	147fa22e 	bgeu	r2,r17,8088dc <__umoddi3+0x404>
  808a54:	e73fffc4 	addi	fp,fp,-1
  808a58:	15c5883a 	add	r2,r2,r23
  808a5c:	003f9f06 	br	8088dc <__umoddi3+0x404>
  808a60:	147f692e 	bgeu	r2,r17,808808 <__umoddi3+0x330>
  808a64:	1405883a 	add	r2,r2,r16
  808a68:	003f6706 	br	808808 <__umoddi3+0x330>
  808a6c:	1405883a 	add	r2,r2,r16
  808a70:	003f1906 	br	8086d8 <__umoddi3+0x200>
  808a74:	1405883a 	add	r2,r2,r16
  808a78:	003ec906 	br	8085a0 <__umoddi3+0xc8>
  808a7c:	b13fcc36 	bltu	r22,r4,8089b0 <__umoddi3+0x4d8>
  808a80:	000b883a 	mov	r5,zero
  808a84:	003fd106 	br	8089cc <__umoddi3+0x4f4>

00808a88 <_fpadd_parts>:
  808a88:	defff804 	addi	sp,sp,-32
  808a8c:	dcc00315 	stw	r19,12(sp)
  808a90:	2027883a 	mov	r19,r4
  808a94:	21000017 	ldw	r4,0(r4)
  808a98:	00c00044 	movi	r3,1
  808a9c:	dd400515 	stw	r21,20(sp)
  808aa0:	dd000415 	stw	r20,16(sp)
  808aa4:	ddc00715 	stw	r23,28(sp)
  808aa8:	dd800615 	stw	r22,24(sp)
  808aac:	dc800215 	stw	r18,8(sp)
  808ab0:	dc400115 	stw	r17,4(sp)
  808ab4:	dc000015 	stw	r16,0(sp)
  808ab8:	282b883a 	mov	r21,r5
  808abc:	3029883a 	mov	r20,r6
  808ac0:	1900632e 	bgeu	r3,r4,808c50 <_fpadd_parts+0x1c8>
  808ac4:	28800017 	ldw	r2,0(r5)
  808ac8:	1880812e 	bgeu	r3,r2,808cd0 <_fpadd_parts+0x248>
  808acc:	00c00104 	movi	r3,4
  808ad0:	20c0dc26 	beq	r4,r3,808e44 <_fpadd_parts+0x3bc>
  808ad4:	10c07e26 	beq	r2,r3,808cd0 <_fpadd_parts+0x248>
  808ad8:	00c00084 	movi	r3,2
  808adc:	10c06726 	beq	r2,r3,808c7c <_fpadd_parts+0x1f4>
  808ae0:	20c07b26 	beq	r4,r3,808cd0 <_fpadd_parts+0x248>
  808ae4:	9dc00217 	ldw	r23,8(r19)
  808ae8:	28c00217 	ldw	r3,8(r5)
  808aec:	9c400317 	ldw	r17,12(r19)
  808af0:	2bc00317 	ldw	r15,12(r5)
  808af4:	b8cdc83a 	sub	r6,r23,r3
  808af8:	9c800417 	ldw	r18,16(r19)
  808afc:	2c000417 	ldw	r16,16(r5)
  808b00:	3009883a 	mov	r4,r6
  808b04:	30009716 	blt	r6,zero,808d64 <_fpadd_parts+0x2dc>
  808b08:	00800fc4 	movi	r2,63
  808b0c:	11806b16 	blt	r2,r6,808cbc <_fpadd_parts+0x234>
  808b10:	0100a40e 	bge	zero,r4,808da4 <_fpadd_parts+0x31c>
  808b14:	35bff804 	addi	r22,r6,-32
  808b18:	b000bc16 	blt	r22,zero,808e0c <_fpadd_parts+0x384>
  808b1c:	8596d83a 	srl	r11,r16,r22
  808b20:	0019883a 	mov	r12,zero
  808b24:	0013883a 	mov	r9,zero
  808b28:	01000044 	movi	r4,1
  808b2c:	0015883a 	mov	r10,zero
  808b30:	b000be16 	blt	r22,zero,808e2c <_fpadd_parts+0x3a4>
  808b34:	2590983a 	sll	r8,r4,r22
  808b38:	000f883a 	mov	r7,zero
  808b3c:	00bfffc4 	movi	r2,-1
  808b40:	3889883a 	add	r4,r7,r2
  808b44:	408b883a 	add	r5,r8,r2
  808b48:	21cd803a 	cmpltu	r6,r4,r7
  808b4c:	314b883a 	add	r5,r6,r5
  808b50:	7904703a 	and	r2,r15,r4
  808b54:	8146703a 	and	r3,r16,r5
  808b58:	10c4b03a 	or	r2,r2,r3
  808b5c:	10000226 	beq	r2,zero,808b68 <_fpadd_parts+0xe0>
  808b60:	02400044 	movi	r9,1
  808b64:	0015883a 	mov	r10,zero
  808b68:	5a5eb03a 	or	r15,r11,r9
  808b6c:	62a0b03a 	or	r16,r12,r10
  808b70:	99400117 	ldw	r5,4(r19)
  808b74:	a8800117 	ldw	r2,4(r21)
  808b78:	28806e26 	beq	r5,r2,808d34 <_fpadd_parts+0x2ac>
  808b7c:	28006626 	beq	r5,zero,808d18 <_fpadd_parts+0x290>
  808b80:	7c45c83a 	sub	r2,r15,r17
  808b84:	7889803a 	cmpltu	r4,r15,r2
  808b88:	8487c83a 	sub	r3,r16,r18
  808b8c:	1909c83a 	sub	r4,r3,r4
  808b90:	100d883a 	mov	r6,r2
  808b94:	200f883a 	mov	r7,r4
  808b98:	38007716 	blt	r7,zero,808d78 <_fpadd_parts+0x2f0>
  808b9c:	a5c00215 	stw	r23,8(r20)
  808ba0:	a1c00415 	stw	r7,16(r20)
  808ba4:	a0000115 	stw	zero,4(r20)
  808ba8:	a1800315 	stw	r6,12(r20)
  808bac:	a2000317 	ldw	r8,12(r20)
  808bb0:	a2400417 	ldw	r9,16(r20)
  808bb4:	00bfffc4 	movi	r2,-1
  808bb8:	408b883a 	add	r5,r8,r2
  808bbc:	2a09803a 	cmpltu	r4,r5,r8
  808bc0:	488d883a 	add	r6,r9,r2
  808bc4:	01c40034 	movhi	r7,4096
  808bc8:	39ffffc4 	addi	r7,r7,-1
  808bcc:	218d883a 	add	r6,r4,r6
  808bd0:	39801736 	bltu	r7,r6,808c30 <_fpadd_parts+0x1a8>
  808bd4:	31c06526 	beq	r6,r7,808d6c <_fpadd_parts+0x2e4>
  808bd8:	a3000217 	ldw	r12,8(r20)
  808bdc:	4209883a 	add	r4,r8,r8
  808be0:	00bfffc4 	movi	r2,-1
  808be4:	220f803a 	cmpltu	r7,r4,r8
  808be8:	4a4b883a 	add	r5,r9,r9
  808bec:	394f883a 	add	r7,r7,r5
  808bf0:	2095883a 	add	r10,r4,r2
  808bf4:	3897883a 	add	r11,r7,r2
  808bf8:	510d803a 	cmpltu	r6,r10,r4
  808bfc:	6099883a 	add	r12,r12,r2
  808c00:	32d7883a 	add	r11,r6,r11
  808c04:	00840034 	movhi	r2,4096
  808c08:	10bfffc4 	addi	r2,r2,-1
  808c0c:	2011883a 	mov	r8,r4
  808c10:	3813883a 	mov	r9,r7
  808c14:	a1000315 	stw	r4,12(r20)
  808c18:	a1c00415 	stw	r7,16(r20)
  808c1c:	a3000215 	stw	r12,8(r20)
  808c20:	12c00336 	bltu	r2,r11,808c30 <_fpadd_parts+0x1a8>
  808c24:	58bfed1e 	bne	r11,r2,808bdc <_fpadd_parts+0x154>
  808c28:	00bfff84 	movi	r2,-2
  808c2c:	12bfeb2e 	bgeu	r2,r10,808bdc <_fpadd_parts+0x154>
  808c30:	a2800417 	ldw	r10,16(r20)
  808c34:	008000c4 	movi	r2,3
  808c38:	00c80034 	movhi	r3,8192
  808c3c:	18ffffc4 	addi	r3,r3,-1
  808c40:	a2400317 	ldw	r9,12(r20)
  808c44:	a0800015 	stw	r2,0(r20)
  808c48:	1a802336 	bltu	r3,r10,808cd8 <_fpadd_parts+0x250>
  808c4c:	a027883a 	mov	r19,r20
  808c50:	9805883a 	mov	r2,r19
  808c54:	ddc00717 	ldw	r23,28(sp)
  808c58:	dd800617 	ldw	r22,24(sp)
  808c5c:	dd400517 	ldw	r21,20(sp)
  808c60:	dd000417 	ldw	r20,16(sp)
  808c64:	dcc00317 	ldw	r19,12(sp)
  808c68:	dc800217 	ldw	r18,8(sp)
  808c6c:	dc400117 	ldw	r17,4(sp)
  808c70:	dc000017 	ldw	r16,0(sp)
  808c74:	dec00804 	addi	sp,sp,32
  808c78:	f800283a 	ret
  808c7c:	20fff41e 	bne	r4,r3,808c50 <_fpadd_parts+0x1c8>
  808c80:	31000015 	stw	r4,0(r6)
  808c84:	98800117 	ldw	r2,4(r19)
  808c88:	30800115 	stw	r2,4(r6)
  808c8c:	98c00217 	ldw	r3,8(r19)
  808c90:	30c00215 	stw	r3,8(r6)
  808c94:	98800317 	ldw	r2,12(r19)
  808c98:	30800315 	stw	r2,12(r6)
  808c9c:	98c00417 	ldw	r3,16(r19)
  808ca0:	30c00415 	stw	r3,16(r6)
  808ca4:	98800117 	ldw	r2,4(r19)
  808ca8:	28c00117 	ldw	r3,4(r5)
  808cac:	3027883a 	mov	r19,r6
  808cb0:	10c4703a 	and	r2,r2,r3
  808cb4:	30800115 	stw	r2,4(r6)
  808cb8:	003fe506 	br	808c50 <_fpadd_parts+0x1c8>
  808cbc:	1dc02616 	blt	r3,r23,808d58 <_fpadd_parts+0x2d0>
  808cc0:	0023883a 	mov	r17,zero
  808cc4:	182f883a 	mov	r23,r3
  808cc8:	0025883a 	mov	r18,zero
  808ccc:	003fa806 	br	808b70 <_fpadd_parts+0xe8>
  808cd0:	a827883a 	mov	r19,r21
  808cd4:	003fde06 	br	808c50 <_fpadd_parts+0x1c8>
  808cd8:	01800044 	movi	r6,1
  808cdc:	500497fa 	slli	r2,r10,31
  808ce0:	4808d07a 	srli	r4,r9,1
  808ce4:	518ad83a 	srl	r5,r10,r6
  808ce8:	a2000217 	ldw	r8,8(r20)
  808cec:	1108b03a 	or	r4,r2,r4
  808cf0:	0007883a 	mov	r3,zero
  808cf4:	4984703a 	and	r2,r9,r6
  808cf8:	208cb03a 	or	r6,r4,r2
  808cfc:	28ceb03a 	or	r7,r5,r3
  808d00:	42000044 	addi	r8,r8,1
  808d04:	a027883a 	mov	r19,r20
  808d08:	a1c00415 	stw	r7,16(r20)
  808d0c:	a2000215 	stw	r8,8(r20)
  808d10:	a1800315 	stw	r6,12(r20)
  808d14:	003fce06 	br	808c50 <_fpadd_parts+0x1c8>
  808d18:	8bc5c83a 	sub	r2,r17,r15
  808d1c:	8889803a 	cmpltu	r4,r17,r2
  808d20:	9407c83a 	sub	r3,r18,r16
  808d24:	1909c83a 	sub	r4,r3,r4
  808d28:	100d883a 	mov	r6,r2
  808d2c:	200f883a 	mov	r7,r4
  808d30:	003f9906 	br	808b98 <_fpadd_parts+0x110>
  808d34:	7c45883a 	add	r2,r15,r17
  808d38:	13c9803a 	cmpltu	r4,r2,r15
  808d3c:	8487883a 	add	r3,r16,r18
  808d40:	20c9883a 	add	r4,r4,r3
  808d44:	a1400115 	stw	r5,4(r20)
  808d48:	a5c00215 	stw	r23,8(r20)
  808d4c:	a0800315 	stw	r2,12(r20)
  808d50:	a1000415 	stw	r4,16(r20)
  808d54:	003fb606 	br	808c30 <_fpadd_parts+0x1a8>
  808d58:	001f883a 	mov	r15,zero
  808d5c:	0021883a 	mov	r16,zero
  808d60:	003f8306 	br	808b70 <_fpadd_parts+0xe8>
  808d64:	018dc83a 	sub	r6,zero,r6
  808d68:	003f6706 	br	808b08 <_fpadd_parts+0x80>
  808d6c:	00bfff84 	movi	r2,-2
  808d70:	117faf36 	bltu	r2,r5,808c30 <_fpadd_parts+0x1a8>
  808d74:	003f9806 	br	808bd8 <_fpadd_parts+0x150>
  808d78:	0005883a 	mov	r2,zero
  808d7c:	1189c83a 	sub	r4,r2,r6
  808d80:	1105803a 	cmpltu	r2,r2,r4
  808d84:	01cbc83a 	sub	r5,zero,r7
  808d88:	2885c83a 	sub	r2,r5,r2
  808d8c:	01800044 	movi	r6,1
  808d90:	a1800115 	stw	r6,4(r20)
  808d94:	a5c00215 	stw	r23,8(r20)
  808d98:	a1000315 	stw	r4,12(r20)
  808d9c:	a0800415 	stw	r2,16(r20)
  808da0:	003f8206 	br	808bac <_fpadd_parts+0x124>
  808da4:	203f7226 	beq	r4,zero,808b70 <_fpadd_parts+0xe8>
  808da8:	35bff804 	addi	r22,r6,-32
  808dac:	b9af883a 	add	r23,r23,r6
  808db0:	b0003116 	blt	r22,zero,808e78 <_fpadd_parts+0x3f0>
  808db4:	959ad83a 	srl	r13,r18,r22
  808db8:	001d883a 	mov	r14,zero
  808dbc:	000f883a 	mov	r7,zero
  808dc0:	01000044 	movi	r4,1
  808dc4:	0011883a 	mov	r8,zero
  808dc8:	b0002516 	blt	r22,zero,808e60 <_fpadd_parts+0x3d8>
  808dcc:	2594983a 	sll	r10,r4,r22
  808dd0:	0013883a 	mov	r9,zero
  808dd4:	00bfffc4 	movi	r2,-1
  808dd8:	4889883a 	add	r4,r9,r2
  808ddc:	508b883a 	add	r5,r10,r2
  808de0:	224d803a 	cmpltu	r6,r4,r9
  808de4:	314b883a 	add	r5,r6,r5
  808de8:	8904703a 	and	r2,r17,r4
  808dec:	9146703a 	and	r3,r18,r5
  808df0:	10c4b03a 	or	r2,r2,r3
  808df4:	10000226 	beq	r2,zero,808e00 <_fpadd_parts+0x378>
  808df8:	01c00044 	movi	r7,1
  808dfc:	0011883a 	mov	r8,zero
  808e00:	69e2b03a 	or	r17,r13,r7
  808e04:	7224b03a 	or	r18,r14,r8
  808e08:	003f5906 	br	808b70 <_fpadd_parts+0xe8>
  808e0c:	8407883a 	add	r3,r16,r16
  808e10:	008007c4 	movi	r2,31
  808e14:	1185c83a 	sub	r2,r2,r6
  808e18:	1886983a 	sll	r3,r3,r2
  808e1c:	7996d83a 	srl	r11,r15,r6
  808e20:	8198d83a 	srl	r12,r16,r6
  808e24:	1ad6b03a 	or	r11,r3,r11
  808e28:	003f3e06 	br	808b24 <_fpadd_parts+0x9c>
  808e2c:	2006d07a 	srli	r3,r4,1
  808e30:	008007c4 	movi	r2,31
  808e34:	1185c83a 	sub	r2,r2,r6
  808e38:	1890d83a 	srl	r8,r3,r2
  808e3c:	218e983a 	sll	r7,r4,r6
  808e40:	003f3e06 	br	808b3c <_fpadd_parts+0xb4>
  808e44:	113f821e 	bne	r2,r4,808c50 <_fpadd_parts+0x1c8>
  808e48:	28c00117 	ldw	r3,4(r5)
  808e4c:	98800117 	ldw	r2,4(r19)
  808e50:	10ff7f26 	beq	r2,r3,808c50 <_fpadd_parts+0x1c8>
  808e54:	04c02074 	movhi	r19,129
  808e58:	9cf84904 	addi	r19,r19,-7900
  808e5c:	003f7c06 	br	808c50 <_fpadd_parts+0x1c8>
  808e60:	2006d07a 	srli	r3,r4,1
  808e64:	008007c4 	movi	r2,31
  808e68:	1185c83a 	sub	r2,r2,r6
  808e6c:	1894d83a 	srl	r10,r3,r2
  808e70:	2192983a 	sll	r9,r4,r6
  808e74:	003fd706 	br	808dd4 <_fpadd_parts+0x34c>
  808e78:	9487883a 	add	r3,r18,r18
  808e7c:	008007c4 	movi	r2,31
  808e80:	1185c83a 	sub	r2,r2,r6
  808e84:	1886983a 	sll	r3,r3,r2
  808e88:	899ad83a 	srl	r13,r17,r6
  808e8c:	919cd83a 	srl	r14,r18,r6
  808e90:	1b5ab03a 	or	r13,r3,r13
  808e94:	003fc906 	br	808dbc <_fpadd_parts+0x334>

00808e98 <__subdf3>:
  808e98:	deffea04 	addi	sp,sp,-88
  808e9c:	dcc01415 	stw	r19,80(sp)
  808ea0:	dcc00404 	addi	r19,sp,16
  808ea4:	2011883a 	mov	r8,r4
  808ea8:	2813883a 	mov	r9,r5
  808eac:	dc401315 	stw	r17,76(sp)
  808eb0:	d809883a 	mov	r4,sp
  808eb4:	980b883a 	mov	r5,r19
  808eb8:	dc400904 	addi	r17,sp,36
  808ebc:	dfc01515 	stw	ra,84(sp)
  808ec0:	da400115 	stw	r9,4(sp)
  808ec4:	d9c00315 	stw	r7,12(sp)
  808ec8:	da000015 	stw	r8,0(sp)
  808ecc:	d9800215 	stw	r6,8(sp)
  808ed0:	0809f480 	call	809f48 <__unpack_d>
  808ed4:	d9000204 	addi	r4,sp,8
  808ed8:	880b883a 	mov	r5,r17
  808edc:	0809f480 	call	809f48 <__unpack_d>
  808ee0:	d8800a17 	ldw	r2,40(sp)
  808ee4:	880b883a 	mov	r5,r17
  808ee8:	9809883a 	mov	r4,r19
  808eec:	d9800e04 	addi	r6,sp,56
  808ef0:	1080005c 	xori	r2,r2,1
  808ef4:	d8800a15 	stw	r2,40(sp)
  808ef8:	0808a880 	call	808a88 <_fpadd_parts>
  808efc:	1009883a 	mov	r4,r2
  808f00:	0809c340 	call	809c34 <__pack_d>
  808f04:	dfc01517 	ldw	ra,84(sp)
  808f08:	dcc01417 	ldw	r19,80(sp)
  808f0c:	dc401317 	ldw	r17,76(sp)
  808f10:	dec01604 	addi	sp,sp,88
  808f14:	f800283a 	ret

00808f18 <__adddf3>:
  808f18:	deffea04 	addi	sp,sp,-88
  808f1c:	dcc01415 	stw	r19,80(sp)
  808f20:	dcc00404 	addi	r19,sp,16
  808f24:	2011883a 	mov	r8,r4
  808f28:	2813883a 	mov	r9,r5
  808f2c:	dc401315 	stw	r17,76(sp)
  808f30:	d809883a 	mov	r4,sp
  808f34:	980b883a 	mov	r5,r19
  808f38:	dc400904 	addi	r17,sp,36
  808f3c:	dfc01515 	stw	ra,84(sp)
  808f40:	da400115 	stw	r9,4(sp)
  808f44:	d9c00315 	stw	r7,12(sp)
  808f48:	da000015 	stw	r8,0(sp)
  808f4c:	d9800215 	stw	r6,8(sp)
  808f50:	0809f480 	call	809f48 <__unpack_d>
  808f54:	d9000204 	addi	r4,sp,8
  808f58:	880b883a 	mov	r5,r17
  808f5c:	0809f480 	call	809f48 <__unpack_d>
  808f60:	d9800e04 	addi	r6,sp,56
  808f64:	9809883a 	mov	r4,r19
  808f68:	880b883a 	mov	r5,r17
  808f6c:	0808a880 	call	808a88 <_fpadd_parts>
  808f70:	1009883a 	mov	r4,r2
  808f74:	0809c340 	call	809c34 <__pack_d>
  808f78:	dfc01517 	ldw	ra,84(sp)
  808f7c:	dcc01417 	ldw	r19,80(sp)
  808f80:	dc401317 	ldw	r17,76(sp)
  808f84:	dec01604 	addi	sp,sp,88
  808f88:	f800283a 	ret

00808f8c <__muldf3>:
  808f8c:	deffe004 	addi	sp,sp,-128
  808f90:	dc401815 	stw	r17,96(sp)
  808f94:	dc400404 	addi	r17,sp,16
  808f98:	2011883a 	mov	r8,r4
  808f9c:	2813883a 	mov	r9,r5
  808fa0:	dc001715 	stw	r16,92(sp)
  808fa4:	d809883a 	mov	r4,sp
  808fa8:	880b883a 	mov	r5,r17
  808fac:	dc000904 	addi	r16,sp,36
  808fb0:	dfc01f15 	stw	ra,124(sp)
  808fb4:	da400115 	stw	r9,4(sp)
  808fb8:	d9c00315 	stw	r7,12(sp)
  808fbc:	da000015 	stw	r8,0(sp)
  808fc0:	d9800215 	stw	r6,8(sp)
  808fc4:	ddc01e15 	stw	r23,120(sp)
  808fc8:	dd801d15 	stw	r22,116(sp)
  808fcc:	dd401c15 	stw	r21,112(sp)
  808fd0:	dd001b15 	stw	r20,108(sp)
  808fd4:	dcc01a15 	stw	r19,104(sp)
  808fd8:	dc801915 	stw	r18,100(sp)
  808fdc:	0809f480 	call	809f48 <__unpack_d>
  808fe0:	d9000204 	addi	r4,sp,8
  808fe4:	800b883a 	mov	r5,r16
  808fe8:	0809f480 	call	809f48 <__unpack_d>
  808fec:	d9000417 	ldw	r4,16(sp)
  808ff0:	00800044 	movi	r2,1
  808ff4:	1100102e 	bgeu	r2,r4,809038 <__muldf3+0xac>
  808ff8:	d8c00917 	ldw	r3,36(sp)
  808ffc:	10c0062e 	bgeu	r2,r3,809018 <__muldf3+0x8c>
  809000:	00800104 	movi	r2,4
  809004:	20800a26 	beq	r4,r2,809030 <__muldf3+0xa4>
  809008:	1880cc26 	beq	r3,r2,80933c <__muldf3+0x3b0>
  80900c:	00800084 	movi	r2,2
  809010:	20800926 	beq	r4,r2,809038 <__muldf3+0xac>
  809014:	1880191e 	bne	r3,r2,80907c <__muldf3+0xf0>
  809018:	d8c00a17 	ldw	r3,40(sp)
  80901c:	d8800517 	ldw	r2,20(sp)
  809020:	8009883a 	mov	r4,r16
  809024:	10c4c03a 	cmpne	r2,r2,r3
  809028:	d8800a15 	stw	r2,40(sp)
  80902c:	00000706 	br	80904c <__muldf3+0xc0>
  809030:	00800084 	movi	r2,2
  809034:	1880c326 	beq	r3,r2,809344 <__muldf3+0x3b8>
  809038:	d8800517 	ldw	r2,20(sp)
  80903c:	d8c00a17 	ldw	r3,40(sp)
  809040:	8809883a 	mov	r4,r17
  809044:	10c4c03a 	cmpne	r2,r2,r3
  809048:	d8800515 	stw	r2,20(sp)
  80904c:	0809c340 	call	809c34 <__pack_d>
  809050:	dfc01f17 	ldw	ra,124(sp)
  809054:	ddc01e17 	ldw	r23,120(sp)
  809058:	dd801d17 	ldw	r22,116(sp)
  80905c:	dd401c17 	ldw	r21,112(sp)
  809060:	dd001b17 	ldw	r20,108(sp)
  809064:	dcc01a17 	ldw	r19,104(sp)
  809068:	dc801917 	ldw	r18,100(sp)
  80906c:	dc401817 	ldw	r17,96(sp)
  809070:	dc001717 	ldw	r16,92(sp)
  809074:	dec02004 	addi	sp,sp,128
  809078:	f800283a 	ret
  80907c:	dd800717 	ldw	r22,28(sp)
  809080:	dc800c17 	ldw	r18,48(sp)
  809084:	002b883a 	mov	r21,zero
  809088:	0023883a 	mov	r17,zero
  80908c:	a80b883a 	mov	r5,r21
  809090:	b00d883a 	mov	r6,r22
  809094:	880f883a 	mov	r7,r17
  809098:	ddc00817 	ldw	r23,32(sp)
  80909c:	dcc00d17 	ldw	r19,52(sp)
  8090a0:	9009883a 	mov	r4,r18
  8090a4:	0807e640 	call	807e64 <__muldi3>
  8090a8:	001b883a 	mov	r13,zero
  8090ac:	680f883a 	mov	r7,r13
  8090b0:	b009883a 	mov	r4,r22
  8090b4:	000b883a 	mov	r5,zero
  8090b8:	980d883a 	mov	r6,r19
  8090bc:	b82d883a 	mov	r22,r23
  8090c0:	002f883a 	mov	r23,zero
  8090c4:	db401615 	stw	r13,88(sp)
  8090c8:	d8801315 	stw	r2,76(sp)
  8090cc:	d8c01415 	stw	r3,80(sp)
  8090d0:	dcc01515 	stw	r19,84(sp)
  8090d4:	0807e640 	call	807e64 <__muldi3>
  8090d8:	b00d883a 	mov	r6,r22
  8090dc:	000b883a 	mov	r5,zero
  8090e0:	9009883a 	mov	r4,r18
  8090e4:	b80f883a 	mov	r7,r23
  8090e8:	1021883a 	mov	r16,r2
  8090ec:	1823883a 	mov	r17,r3
  8090f0:	0807e640 	call	807e64 <__muldi3>
  8090f4:	8085883a 	add	r2,r16,r2
  8090f8:	140d803a 	cmpltu	r6,r2,r16
  8090fc:	88c7883a 	add	r3,r17,r3
  809100:	30cd883a 	add	r6,r6,r3
  809104:	1029883a 	mov	r20,r2
  809108:	302b883a 	mov	r21,r6
  80910c:	da801317 	ldw	r10,76(sp)
  809110:	dac01417 	ldw	r11,80(sp)
  809114:	db001517 	ldw	r12,84(sp)
  809118:	db401617 	ldw	r13,88(sp)
  80911c:	3440612e 	bgeu	r6,r17,8092a4 <__muldf3+0x318>
  809120:	0009883a 	mov	r4,zero
  809124:	5105883a 	add	r2,r10,r4
  809128:	128d803a 	cmpltu	r6,r2,r10
  80912c:	5d07883a 	add	r3,r11,r20
  809130:	30cd883a 	add	r6,r6,r3
  809134:	0021883a 	mov	r16,zero
  809138:	04400044 	movi	r17,1
  80913c:	1025883a 	mov	r18,r2
  809140:	3027883a 	mov	r19,r6
  809144:	32c06236 	bltu	r6,r11,8092d0 <__muldf3+0x344>
  809148:	59807a26 	beq	r11,r6,809334 <__muldf3+0x3a8>
  80914c:	680b883a 	mov	r5,r13
  809150:	b80f883a 	mov	r7,r23
  809154:	6009883a 	mov	r4,r12
  809158:	b00d883a 	mov	r6,r22
  80915c:	0807e640 	call	807e64 <__muldi3>
  809160:	1009883a 	mov	r4,r2
  809164:	000f883a 	mov	r7,zero
  809168:	1545883a 	add	r2,r2,r21
  80916c:	1111803a 	cmpltu	r8,r2,r4
  809170:	19c7883a 	add	r3,r3,r7
  809174:	40c7883a 	add	r3,r8,r3
  809178:	88cb883a 	add	r5,r17,r3
  80917c:	d8c00617 	ldw	r3,24(sp)
  809180:	8089883a 	add	r4,r16,r2
  809184:	d8800b17 	ldw	r2,44(sp)
  809188:	18c00104 	addi	r3,r3,4
  80918c:	240d803a 	cmpltu	r6,r4,r16
  809190:	10c7883a 	add	r3,r2,r3
  809194:	2013883a 	mov	r9,r4
  809198:	d8800a17 	ldw	r2,40(sp)
  80919c:	d9000517 	ldw	r4,20(sp)
  8091a0:	314d883a 	add	r6,r6,r5
  8091a4:	3015883a 	mov	r10,r6
  8091a8:	2088c03a 	cmpne	r4,r4,r2
  8091ac:	00880034 	movhi	r2,8192
  8091b0:	10bfffc4 	addi	r2,r2,-1
  8091b4:	d9000f15 	stw	r4,60(sp)
  8091b8:	d8c01015 	stw	r3,64(sp)
  8091bc:	1180162e 	bgeu	r2,r6,809218 <__muldf3+0x28c>
  8091c0:	1811883a 	mov	r8,r3
  8091c4:	101f883a 	mov	r15,r2
  8091c8:	980497fa 	slli	r2,r19,31
  8091cc:	9016d07a 	srli	r11,r18,1
  8091d0:	500697fa 	slli	r3,r10,31
  8091d4:	480cd07a 	srli	r6,r9,1
  8091d8:	500ed07a 	srli	r7,r10,1
  8091dc:	12d6b03a 	or	r11,r2,r11
  8091e0:	00800044 	movi	r2,1
  8091e4:	198cb03a 	or	r6,r3,r6
  8091e8:	4888703a 	and	r4,r9,r2
  8091ec:	9818d07a 	srli	r12,r19,1
  8091f0:	001b883a 	mov	r13,zero
  8091f4:	03a00034 	movhi	r14,32768
  8091f8:	3013883a 	mov	r9,r6
  8091fc:	3815883a 	mov	r10,r7
  809200:	4091883a 	add	r8,r8,r2
  809204:	20000226 	beq	r4,zero,809210 <__muldf3+0x284>
  809208:	5b64b03a 	or	r18,r11,r13
  80920c:	63a6b03a 	or	r19,r12,r14
  809210:	7abfed36 	bltu	r15,r10,8091c8 <__muldf3+0x23c>
  809214:	da001015 	stw	r8,64(sp)
  809218:	00840034 	movhi	r2,4096
  80921c:	10bfffc4 	addi	r2,r2,-1
  809220:	12801436 	bltu	r2,r10,809274 <__muldf3+0x2e8>
  809224:	da001017 	ldw	r8,64(sp)
  809228:	101f883a 	mov	r15,r2
  80922c:	4a45883a 	add	r2,r9,r9
  809230:	124d803a 	cmpltu	r6,r2,r9
  809234:	5287883a 	add	r3,r10,r10
  809238:	9497883a 	add	r11,r18,r18
  80923c:	5c8f803a 	cmpltu	r7,r11,r18
  809240:	9cd9883a 	add	r12,r19,r19
  809244:	01000044 	movi	r4,1
  809248:	30cd883a 	add	r6,r6,r3
  80924c:	3b0f883a 	add	r7,r7,r12
  809250:	423fffc4 	addi	r8,r8,-1
  809254:	1013883a 	mov	r9,r2
  809258:	3015883a 	mov	r10,r6
  80925c:	111ab03a 	or	r13,r2,r4
  809260:	98003016 	blt	r19,zero,809324 <__muldf3+0x398>
  809264:	5825883a 	mov	r18,r11
  809268:	3827883a 	mov	r19,r7
  80926c:	7abfef2e 	bgeu	r15,r10,80922c <__muldf3+0x2a0>
  809270:	da001015 	stw	r8,64(sp)
  809274:	00803fc4 	movi	r2,255
  809278:	488e703a 	and	r7,r9,r2
  80927c:	00802004 	movi	r2,128
  809280:	0007883a 	mov	r3,zero
  809284:	0011883a 	mov	r8,zero
  809288:	38801826 	beq	r7,r2,8092ec <__muldf3+0x360>
  80928c:	008000c4 	movi	r2,3
  809290:	d9000e04 	addi	r4,sp,56
  809294:	da801215 	stw	r10,72(sp)
  809298:	d8800e15 	stw	r2,56(sp)
  80929c:	da401115 	stw	r9,68(sp)
  8092a0:	003f6a06 	br	80904c <__muldf3+0xc0>
  8092a4:	89802126 	beq	r17,r6,80932c <__muldf3+0x3a0>
  8092a8:	0009883a 	mov	r4,zero
  8092ac:	5105883a 	add	r2,r10,r4
  8092b0:	128d803a 	cmpltu	r6,r2,r10
  8092b4:	5d07883a 	add	r3,r11,r20
  8092b8:	30cd883a 	add	r6,r6,r3
  8092bc:	0021883a 	mov	r16,zero
  8092c0:	0023883a 	mov	r17,zero
  8092c4:	1025883a 	mov	r18,r2
  8092c8:	3027883a 	mov	r19,r6
  8092cc:	32ff9e2e 	bgeu	r6,r11,809148 <__muldf3+0x1bc>
  8092d0:	00800044 	movi	r2,1
  8092d4:	8089883a 	add	r4,r16,r2
  8092d8:	240d803a 	cmpltu	r6,r4,r16
  8092dc:	344d883a 	add	r6,r6,r17
  8092e0:	2021883a 	mov	r16,r4
  8092e4:	3023883a 	mov	r17,r6
  8092e8:	003f9806 	br	80914c <__muldf3+0x1c0>
  8092ec:	403fe71e 	bne	r8,zero,80928c <__muldf3+0x300>
  8092f0:	01004004 	movi	r4,256
  8092f4:	4904703a 	and	r2,r9,r4
  8092f8:	10c4b03a 	or	r2,r2,r3
  8092fc:	103fe31e 	bne	r2,zero,80928c <__muldf3+0x300>
  809300:	94c4b03a 	or	r2,r18,r19
  809304:	103fe126 	beq	r2,zero,80928c <__muldf3+0x300>
  809308:	49c5883a 	add	r2,r9,r7
  80930c:	1251803a 	cmpltu	r8,r2,r9
  809310:	4291883a 	add	r8,r8,r10
  809314:	013fc004 	movi	r4,-256
  809318:	1112703a 	and	r9,r2,r4
  80931c:	4015883a 	mov	r10,r8
  809320:	003fda06 	br	80928c <__muldf3+0x300>
  809324:	6813883a 	mov	r9,r13
  809328:	003fce06 	br	809264 <__muldf3+0x2d8>
  80932c:	143f7c36 	bltu	r2,r16,809120 <__muldf3+0x194>
  809330:	003fdd06 	br	8092a8 <__muldf3+0x31c>
  809334:	12bf852e 	bgeu	r2,r10,80914c <__muldf3+0x1c0>
  809338:	003fe506 	br	8092d0 <__muldf3+0x344>
  80933c:	00800084 	movi	r2,2
  809340:	20bf351e 	bne	r4,r2,809018 <__muldf3+0x8c>
  809344:	01002074 	movhi	r4,129
  809348:	21384904 	addi	r4,r4,-7900
  80934c:	003f3f06 	br	80904c <__muldf3+0xc0>

00809350 <__divdf3>:
  809350:	deffed04 	addi	sp,sp,-76
  809354:	dcc01115 	stw	r19,68(sp)
  809358:	dcc00404 	addi	r19,sp,16
  80935c:	2011883a 	mov	r8,r4
  809360:	2813883a 	mov	r9,r5
  809364:	dc000e15 	stw	r16,56(sp)
  809368:	d809883a 	mov	r4,sp
  80936c:	980b883a 	mov	r5,r19
  809370:	dc000904 	addi	r16,sp,36
  809374:	dfc01215 	stw	ra,72(sp)
  809378:	da400115 	stw	r9,4(sp)
  80937c:	d9c00315 	stw	r7,12(sp)
  809380:	da000015 	stw	r8,0(sp)
  809384:	d9800215 	stw	r6,8(sp)
  809388:	dc801015 	stw	r18,64(sp)
  80938c:	dc400f15 	stw	r17,60(sp)
  809390:	0809f480 	call	809f48 <__unpack_d>
  809394:	d9000204 	addi	r4,sp,8
  809398:	800b883a 	mov	r5,r16
  80939c:	0809f480 	call	809f48 <__unpack_d>
  8093a0:	d9000417 	ldw	r4,16(sp)
  8093a4:	00800044 	movi	r2,1
  8093a8:	11000b2e 	bgeu	r2,r4,8093d8 <__divdf3+0x88>
  8093ac:	d9400917 	ldw	r5,36(sp)
  8093b0:	1140762e 	bgeu	r2,r5,80958c <__divdf3+0x23c>
  8093b4:	d8800517 	ldw	r2,20(sp)
  8093b8:	d8c00a17 	ldw	r3,40(sp)
  8093bc:	01800104 	movi	r6,4
  8093c0:	10c4f03a 	xor	r2,r2,r3
  8093c4:	d8800515 	stw	r2,20(sp)
  8093c8:	21800226 	beq	r4,r6,8093d4 <__divdf3+0x84>
  8093cc:	00800084 	movi	r2,2
  8093d0:	2080141e 	bne	r4,r2,809424 <__divdf3+0xd4>
  8093d4:	29000926 	beq	r5,r4,8093fc <__divdf3+0xac>
  8093d8:	9809883a 	mov	r4,r19
  8093dc:	0809c340 	call	809c34 <__pack_d>
  8093e0:	dfc01217 	ldw	ra,72(sp)
  8093e4:	dcc01117 	ldw	r19,68(sp)
  8093e8:	dc801017 	ldw	r18,64(sp)
  8093ec:	dc400f17 	ldw	r17,60(sp)
  8093f0:	dc000e17 	ldw	r16,56(sp)
  8093f4:	dec01304 	addi	sp,sp,76
  8093f8:	f800283a 	ret
  8093fc:	01002074 	movhi	r4,129
  809400:	21384904 	addi	r4,r4,-7900
  809404:	0809c340 	call	809c34 <__pack_d>
  809408:	dfc01217 	ldw	ra,72(sp)
  80940c:	dcc01117 	ldw	r19,68(sp)
  809410:	dc801017 	ldw	r18,64(sp)
  809414:	dc400f17 	ldw	r17,60(sp)
  809418:	dc000e17 	ldw	r16,56(sp)
  80941c:	dec01304 	addi	sp,sp,76
  809420:	f800283a 	ret
  809424:	29805b26 	beq	r5,r6,809594 <__divdf3+0x244>
  809428:	28802d26 	beq	r5,r2,8094e0 <__divdf3+0x190>
  80942c:	d8c00617 	ldw	r3,24(sp)
  809430:	d8800b17 	ldw	r2,44(sp)
  809434:	d9c00817 	ldw	r7,32(sp)
  809438:	dc400d17 	ldw	r17,52(sp)
  80943c:	188bc83a 	sub	r5,r3,r2
  809440:	d9800717 	ldw	r6,28(sp)
  809444:	dc000c17 	ldw	r16,48(sp)
  809448:	d9400615 	stw	r5,24(sp)
  80944c:	3c403836 	bltu	r7,r17,809530 <__divdf3+0x1e0>
  809450:	89c03626 	beq	r17,r7,80952c <__divdf3+0x1dc>
  809454:	0015883a 	mov	r10,zero
  809458:	001d883a 	mov	r14,zero
  80945c:	02c40034 	movhi	r11,4096
  809460:	001f883a 	mov	r15,zero
  809464:	003f883a 	mov	ra,zero
  809468:	04800f44 	movi	r18,61
  80946c:	00000f06 	br	8094ac <__divdf3+0x15c>
  809470:	601d883a 	mov	r14,r12
  809474:	681f883a 	mov	r15,r13
  809478:	400d883a 	mov	r6,r8
  80947c:	100f883a 	mov	r7,r2
  809480:	3191883a 	add	r8,r6,r6
  809484:	5808d07a 	srli	r4,r11,1
  809488:	4185803a 	cmpltu	r2,r8,r6
  80948c:	39d3883a 	add	r9,r7,r7
  809490:	28c6b03a 	or	r3,r5,r3
  809494:	1245883a 	add	r2,r2,r9
  809498:	1815883a 	mov	r10,r3
  80949c:	2017883a 	mov	r11,r4
  8094a0:	400d883a 	mov	r6,r8
  8094a4:	100f883a 	mov	r7,r2
  8094a8:	fc801726 	beq	ra,r18,809508 <__divdf3+0x1b8>
  8094ac:	580a97fa 	slli	r5,r11,31
  8094b0:	5006d07a 	srli	r3,r10,1
  8094b4:	ffc00044 	addi	ra,ra,1
  8094b8:	3c7ff136 	bltu	r7,r17,809480 <__divdf3+0x130>
  8094bc:	3411c83a 	sub	r8,r6,r16
  8094c0:	3205803a 	cmpltu	r2,r6,r8
  8094c4:	3c53c83a 	sub	r9,r7,r17
  8094c8:	7298b03a 	or	r12,r14,r10
  8094cc:	7adab03a 	or	r13,r15,r11
  8094d0:	4885c83a 	sub	r2,r9,r2
  8094d4:	89ffe61e 	bne	r17,r7,809470 <__divdf3+0x120>
  8094d8:	343fe936 	bltu	r6,r16,809480 <__divdf3+0x130>
  8094dc:	003fe406 	br	809470 <__divdf3+0x120>
  8094e0:	9809883a 	mov	r4,r19
  8094e4:	d9800415 	stw	r6,16(sp)
  8094e8:	0809c340 	call	809c34 <__pack_d>
  8094ec:	dfc01217 	ldw	ra,72(sp)
  8094f0:	dcc01117 	ldw	r19,68(sp)
  8094f4:	dc801017 	ldw	r18,64(sp)
  8094f8:	dc400f17 	ldw	r17,60(sp)
  8094fc:	dc000e17 	ldw	r16,56(sp)
  809500:	dec01304 	addi	sp,sp,76
  809504:	f800283a 	ret
  809508:	00803fc4 	movi	r2,255
  80950c:	7090703a 	and	r8,r14,r2
  809510:	00802004 	movi	r2,128
  809514:	0007883a 	mov	r3,zero
  809518:	0013883a 	mov	r9,zero
  80951c:	40800d26 	beq	r8,r2,809554 <__divdf3+0x204>
  809520:	dbc00815 	stw	r15,32(sp)
  809524:	db800715 	stw	r14,28(sp)
  809528:	003fab06 	br	8093d8 <__divdf3+0x88>
  80952c:	343fc92e 	bgeu	r6,r16,809454 <__divdf3+0x104>
  809530:	3185883a 	add	r2,r6,r6
  809534:	1189803a 	cmpltu	r4,r2,r6
  809538:	39c7883a 	add	r3,r7,r7
  80953c:	20c9883a 	add	r4,r4,r3
  809540:	297fffc4 	addi	r5,r5,-1
  809544:	100d883a 	mov	r6,r2
  809548:	200f883a 	mov	r7,r4
  80954c:	d9400615 	stw	r5,24(sp)
  809550:	003fc006 	br	809454 <__divdf3+0x104>
  809554:	483ff21e 	bne	r9,zero,809520 <__divdf3+0x1d0>
  809558:	01004004 	movi	r4,256
  80955c:	7104703a 	and	r2,r14,r4
  809560:	10c4b03a 	or	r2,r2,r3
  809564:	103fee1e 	bne	r2,zero,809520 <__divdf3+0x1d0>
  809568:	31c4b03a 	or	r2,r6,r7
  80956c:	103fec26 	beq	r2,zero,809520 <__divdf3+0x1d0>
  809570:	7205883a 	add	r2,r14,r8
  809574:	1391803a 	cmpltu	r8,r2,r14
  809578:	43d1883a 	add	r8,r8,r15
  80957c:	013fc004 	movi	r4,-256
  809580:	111c703a 	and	r14,r2,r4
  809584:	401f883a 	mov	r15,r8
  809588:	003fe506 	br	809520 <__divdf3+0x1d0>
  80958c:	8009883a 	mov	r4,r16
  809590:	003f9206 	br	8093dc <__divdf3+0x8c>
  809594:	9809883a 	mov	r4,r19
  809598:	d8000715 	stw	zero,28(sp)
  80959c:	d8000815 	stw	zero,32(sp)
  8095a0:	d8000615 	stw	zero,24(sp)
  8095a4:	003f8d06 	br	8093dc <__divdf3+0x8c>

008095a8 <__eqdf2>:
  8095a8:	deffef04 	addi	sp,sp,-68
  8095ac:	dc400f15 	stw	r17,60(sp)
  8095b0:	dc400404 	addi	r17,sp,16
  8095b4:	2005883a 	mov	r2,r4
  8095b8:	2807883a 	mov	r3,r5
  8095bc:	dc000e15 	stw	r16,56(sp)
  8095c0:	d809883a 	mov	r4,sp
  8095c4:	880b883a 	mov	r5,r17
  8095c8:	dc000904 	addi	r16,sp,36
  8095cc:	d8c00115 	stw	r3,4(sp)
  8095d0:	d8800015 	stw	r2,0(sp)
  8095d4:	d9800215 	stw	r6,8(sp)
  8095d8:	dfc01015 	stw	ra,64(sp)
  8095dc:	d9c00315 	stw	r7,12(sp)
  8095e0:	0809f480 	call	809f48 <__unpack_d>
  8095e4:	d9000204 	addi	r4,sp,8
  8095e8:	800b883a 	mov	r5,r16
  8095ec:	0809f480 	call	809f48 <__unpack_d>
  8095f0:	d8800417 	ldw	r2,16(sp)
  8095f4:	00c00044 	movi	r3,1
  8095f8:	180d883a 	mov	r6,r3
  8095fc:	1880062e 	bgeu	r3,r2,809618 <__eqdf2+0x70>
  809600:	d8800917 	ldw	r2,36(sp)
  809604:	8809883a 	mov	r4,r17
  809608:	800b883a 	mov	r5,r16
  80960c:	1880022e 	bgeu	r3,r2,809618 <__eqdf2+0x70>
  809610:	080a0800 	call	80a080 <__fpcmp_parts_d>
  809614:	100d883a 	mov	r6,r2
  809618:	3005883a 	mov	r2,r6
  80961c:	dfc01017 	ldw	ra,64(sp)
  809620:	dc400f17 	ldw	r17,60(sp)
  809624:	dc000e17 	ldw	r16,56(sp)
  809628:	dec01104 	addi	sp,sp,68
  80962c:	f800283a 	ret

00809630 <__nedf2>:
  809630:	deffef04 	addi	sp,sp,-68
  809634:	dc400f15 	stw	r17,60(sp)
  809638:	dc400404 	addi	r17,sp,16
  80963c:	2005883a 	mov	r2,r4
  809640:	2807883a 	mov	r3,r5
  809644:	dc000e15 	stw	r16,56(sp)
  809648:	d809883a 	mov	r4,sp
  80964c:	880b883a 	mov	r5,r17
  809650:	dc000904 	addi	r16,sp,36
  809654:	d8c00115 	stw	r3,4(sp)
  809658:	d8800015 	stw	r2,0(sp)
  80965c:	d9800215 	stw	r6,8(sp)
  809660:	dfc01015 	stw	ra,64(sp)
  809664:	d9c00315 	stw	r7,12(sp)
  809668:	0809f480 	call	809f48 <__unpack_d>
  80966c:	d9000204 	addi	r4,sp,8
  809670:	800b883a 	mov	r5,r16
  809674:	0809f480 	call	809f48 <__unpack_d>
  809678:	d8800417 	ldw	r2,16(sp)
  80967c:	00c00044 	movi	r3,1
  809680:	180d883a 	mov	r6,r3
  809684:	1880062e 	bgeu	r3,r2,8096a0 <__nedf2+0x70>
  809688:	d8800917 	ldw	r2,36(sp)
  80968c:	8809883a 	mov	r4,r17
  809690:	800b883a 	mov	r5,r16
  809694:	1880022e 	bgeu	r3,r2,8096a0 <__nedf2+0x70>
  809698:	080a0800 	call	80a080 <__fpcmp_parts_d>
  80969c:	100d883a 	mov	r6,r2
  8096a0:	3005883a 	mov	r2,r6
  8096a4:	dfc01017 	ldw	ra,64(sp)
  8096a8:	dc400f17 	ldw	r17,60(sp)
  8096ac:	dc000e17 	ldw	r16,56(sp)
  8096b0:	dec01104 	addi	sp,sp,68
  8096b4:	f800283a 	ret

008096b8 <__gtdf2>:
  8096b8:	deffef04 	addi	sp,sp,-68
  8096bc:	dc400f15 	stw	r17,60(sp)
  8096c0:	dc400404 	addi	r17,sp,16
  8096c4:	2005883a 	mov	r2,r4
  8096c8:	2807883a 	mov	r3,r5
  8096cc:	dc000e15 	stw	r16,56(sp)
  8096d0:	d809883a 	mov	r4,sp
  8096d4:	880b883a 	mov	r5,r17
  8096d8:	dc000904 	addi	r16,sp,36
  8096dc:	d8c00115 	stw	r3,4(sp)
  8096e0:	d8800015 	stw	r2,0(sp)
  8096e4:	d9800215 	stw	r6,8(sp)
  8096e8:	dfc01015 	stw	ra,64(sp)
  8096ec:	d9c00315 	stw	r7,12(sp)
  8096f0:	0809f480 	call	809f48 <__unpack_d>
  8096f4:	d9000204 	addi	r4,sp,8
  8096f8:	800b883a 	mov	r5,r16
  8096fc:	0809f480 	call	809f48 <__unpack_d>
  809700:	d8800417 	ldw	r2,16(sp)
  809704:	00c00044 	movi	r3,1
  809708:	01bfffc4 	movi	r6,-1
  80970c:	1880062e 	bgeu	r3,r2,809728 <__gtdf2+0x70>
  809710:	d8800917 	ldw	r2,36(sp)
  809714:	8809883a 	mov	r4,r17
  809718:	800b883a 	mov	r5,r16
  80971c:	1880022e 	bgeu	r3,r2,809728 <__gtdf2+0x70>
  809720:	080a0800 	call	80a080 <__fpcmp_parts_d>
  809724:	100d883a 	mov	r6,r2
  809728:	3005883a 	mov	r2,r6
  80972c:	dfc01017 	ldw	ra,64(sp)
  809730:	dc400f17 	ldw	r17,60(sp)
  809734:	dc000e17 	ldw	r16,56(sp)
  809738:	dec01104 	addi	sp,sp,68
  80973c:	f800283a 	ret

00809740 <__gedf2>:
  809740:	deffef04 	addi	sp,sp,-68
  809744:	dc400f15 	stw	r17,60(sp)
  809748:	dc400404 	addi	r17,sp,16
  80974c:	2005883a 	mov	r2,r4
  809750:	2807883a 	mov	r3,r5
  809754:	dc000e15 	stw	r16,56(sp)
  809758:	d809883a 	mov	r4,sp
  80975c:	880b883a 	mov	r5,r17
  809760:	dc000904 	addi	r16,sp,36
  809764:	d8c00115 	stw	r3,4(sp)
  809768:	d8800015 	stw	r2,0(sp)
  80976c:	d9800215 	stw	r6,8(sp)
  809770:	dfc01015 	stw	ra,64(sp)
  809774:	d9c00315 	stw	r7,12(sp)
  809778:	0809f480 	call	809f48 <__unpack_d>
  80977c:	d9000204 	addi	r4,sp,8
  809780:	800b883a 	mov	r5,r16
  809784:	0809f480 	call	809f48 <__unpack_d>
  809788:	d8800417 	ldw	r2,16(sp)
  80978c:	00c00044 	movi	r3,1
  809790:	01bfffc4 	movi	r6,-1
  809794:	1880062e 	bgeu	r3,r2,8097b0 <__gedf2+0x70>
  809798:	d8800917 	ldw	r2,36(sp)
  80979c:	8809883a 	mov	r4,r17
  8097a0:	800b883a 	mov	r5,r16
  8097a4:	1880022e 	bgeu	r3,r2,8097b0 <__gedf2+0x70>
  8097a8:	080a0800 	call	80a080 <__fpcmp_parts_d>
  8097ac:	100d883a 	mov	r6,r2
  8097b0:	3005883a 	mov	r2,r6
  8097b4:	dfc01017 	ldw	ra,64(sp)
  8097b8:	dc400f17 	ldw	r17,60(sp)
  8097bc:	dc000e17 	ldw	r16,56(sp)
  8097c0:	dec01104 	addi	sp,sp,68
  8097c4:	f800283a 	ret

008097c8 <__ltdf2>:
  8097c8:	deffef04 	addi	sp,sp,-68
  8097cc:	dc400f15 	stw	r17,60(sp)
  8097d0:	dc400404 	addi	r17,sp,16
  8097d4:	2005883a 	mov	r2,r4
  8097d8:	2807883a 	mov	r3,r5
  8097dc:	dc000e15 	stw	r16,56(sp)
  8097e0:	d809883a 	mov	r4,sp
  8097e4:	880b883a 	mov	r5,r17
  8097e8:	dc000904 	addi	r16,sp,36
  8097ec:	d8c00115 	stw	r3,4(sp)
  8097f0:	d8800015 	stw	r2,0(sp)
  8097f4:	d9800215 	stw	r6,8(sp)
  8097f8:	dfc01015 	stw	ra,64(sp)
  8097fc:	d9c00315 	stw	r7,12(sp)
  809800:	0809f480 	call	809f48 <__unpack_d>
  809804:	d9000204 	addi	r4,sp,8
  809808:	800b883a 	mov	r5,r16
  80980c:	0809f480 	call	809f48 <__unpack_d>
  809810:	d8800417 	ldw	r2,16(sp)
  809814:	00c00044 	movi	r3,1
  809818:	180d883a 	mov	r6,r3
  80981c:	1880062e 	bgeu	r3,r2,809838 <__ltdf2+0x70>
  809820:	d8800917 	ldw	r2,36(sp)
  809824:	8809883a 	mov	r4,r17
  809828:	800b883a 	mov	r5,r16
  80982c:	1880022e 	bgeu	r3,r2,809838 <__ltdf2+0x70>
  809830:	080a0800 	call	80a080 <__fpcmp_parts_d>
  809834:	100d883a 	mov	r6,r2
  809838:	3005883a 	mov	r2,r6
  80983c:	dfc01017 	ldw	ra,64(sp)
  809840:	dc400f17 	ldw	r17,60(sp)
  809844:	dc000e17 	ldw	r16,56(sp)
  809848:	dec01104 	addi	sp,sp,68
  80984c:	f800283a 	ret

00809850 <__floatsidf>:
  809850:	2006d7fa 	srli	r3,r4,31
  809854:	defff604 	addi	sp,sp,-40
  809858:	008000c4 	movi	r2,3
  80985c:	dfc00915 	stw	ra,36(sp)
  809860:	dcc00815 	stw	r19,32(sp)
  809864:	dc800715 	stw	r18,28(sp)
  809868:	dc400615 	stw	r17,24(sp)
  80986c:	dc000515 	stw	r16,20(sp)
  809870:	d8800015 	stw	r2,0(sp)
  809874:	d8c00115 	stw	r3,4(sp)
  809878:	20000f1e 	bne	r4,zero,8098b8 <__floatsidf+0x68>
  80987c:	00800084 	movi	r2,2
  809880:	d8800015 	stw	r2,0(sp)
  809884:	d809883a 	mov	r4,sp
  809888:	0809c340 	call	809c34 <__pack_d>
  80988c:	1009883a 	mov	r4,r2
  809890:	180b883a 	mov	r5,r3
  809894:	2005883a 	mov	r2,r4
  809898:	2807883a 	mov	r3,r5
  80989c:	dfc00917 	ldw	ra,36(sp)
  8098a0:	dcc00817 	ldw	r19,32(sp)
  8098a4:	dc800717 	ldw	r18,28(sp)
  8098a8:	dc400617 	ldw	r17,24(sp)
  8098ac:	dc000517 	ldw	r16,20(sp)
  8098b0:	dec00a04 	addi	sp,sp,40
  8098b4:	f800283a 	ret
  8098b8:	00800f04 	movi	r2,60
  8098bc:	1807003a 	cmpeq	r3,r3,zero
  8098c0:	d8800215 	stw	r2,8(sp)
  8098c4:	18001126 	beq	r3,zero,80990c <__floatsidf+0xbc>
  8098c8:	0027883a 	mov	r19,zero
  8098cc:	2025883a 	mov	r18,r4
  8098d0:	d9000315 	stw	r4,12(sp)
  8098d4:	dcc00415 	stw	r19,16(sp)
  8098d8:	0809bb40 	call	809bb4 <__clzsi2>
  8098dc:	11000744 	addi	r4,r2,29
  8098e0:	013fe80e 	bge	zero,r4,809884 <__floatsidf+0x34>
  8098e4:	10bfff44 	addi	r2,r2,-3
  8098e8:	10000c16 	blt	r2,zero,80991c <__floatsidf+0xcc>
  8098ec:	90a2983a 	sll	r17,r18,r2
  8098f0:	0021883a 	mov	r16,zero
  8098f4:	d8800217 	ldw	r2,8(sp)
  8098f8:	dc400415 	stw	r17,16(sp)
  8098fc:	dc000315 	stw	r16,12(sp)
  809900:	1105c83a 	sub	r2,r2,r4
  809904:	d8800215 	stw	r2,8(sp)
  809908:	003fde06 	br	809884 <__floatsidf+0x34>
  80990c:	00a00034 	movhi	r2,32768
  809910:	20800a26 	beq	r4,r2,80993c <__floatsidf+0xec>
  809914:	0109c83a 	sub	r4,zero,r4
  809918:	003feb06 	br	8098c8 <__floatsidf+0x78>
  80991c:	9006d07a 	srli	r3,r18,1
  809920:	008007c4 	movi	r2,31
  809924:	1105c83a 	sub	r2,r2,r4
  809928:	1886d83a 	srl	r3,r3,r2
  80992c:	9922983a 	sll	r17,r19,r4
  809930:	9120983a 	sll	r16,r18,r4
  809934:	1c62b03a 	or	r17,r3,r17
  809938:	003fee06 	br	8098f4 <__floatsidf+0xa4>
  80993c:	0009883a 	mov	r4,zero
  809940:	01707834 	movhi	r5,49632
  809944:	003fd306 	br	809894 <__floatsidf+0x44>

00809948 <__fixdfsi>:
  809948:	defff804 	addi	sp,sp,-32
  80994c:	2005883a 	mov	r2,r4
  809950:	2807883a 	mov	r3,r5
  809954:	d809883a 	mov	r4,sp
  809958:	d9400204 	addi	r5,sp,8
  80995c:	d8c00115 	stw	r3,4(sp)
  809960:	d8800015 	stw	r2,0(sp)
  809964:	dfc00715 	stw	ra,28(sp)
  809968:	0809f480 	call	809f48 <__unpack_d>
  80996c:	d8c00217 	ldw	r3,8(sp)
  809970:	00800084 	movi	r2,2
  809974:	1880051e 	bne	r3,r2,80998c <__fixdfsi+0x44>
  809978:	0007883a 	mov	r3,zero
  80997c:	1805883a 	mov	r2,r3
  809980:	dfc00717 	ldw	ra,28(sp)
  809984:	dec00804 	addi	sp,sp,32
  809988:	f800283a 	ret
  80998c:	00800044 	movi	r2,1
  809990:	10fff92e 	bgeu	r2,r3,809978 <__fixdfsi+0x30>
  809994:	00800104 	movi	r2,4
  809998:	18800426 	beq	r3,r2,8099ac <__fixdfsi+0x64>
  80999c:	d8c00417 	ldw	r3,16(sp)
  8099a0:	183ff516 	blt	r3,zero,809978 <__fixdfsi+0x30>
  8099a4:	00800784 	movi	r2,30
  8099a8:	10c0080e 	bge	r2,r3,8099cc <__fixdfsi+0x84>
  8099ac:	d8800317 	ldw	r2,12(sp)
  8099b0:	1000121e 	bne	r2,zero,8099fc <__fixdfsi+0xb4>
  8099b4:	00e00034 	movhi	r3,32768
  8099b8:	18ffffc4 	addi	r3,r3,-1
  8099bc:	1805883a 	mov	r2,r3
  8099c0:	dfc00717 	ldw	ra,28(sp)
  8099c4:	dec00804 	addi	sp,sp,32
  8099c8:	f800283a 	ret
  8099cc:	00800f04 	movi	r2,60
  8099d0:	10d1c83a 	sub	r8,r2,r3
  8099d4:	40bff804 	addi	r2,r8,-32
  8099d8:	d9800517 	ldw	r6,20(sp)
  8099dc:	d9c00617 	ldw	r7,24(sp)
  8099e0:	10000816 	blt	r2,zero,809a04 <__fixdfsi+0xbc>
  8099e4:	3888d83a 	srl	r4,r7,r2
  8099e8:	d8800317 	ldw	r2,12(sp)
  8099ec:	2007883a 	mov	r3,r4
  8099f0:	103fe226 	beq	r2,zero,80997c <__fixdfsi+0x34>
  8099f4:	0107c83a 	sub	r3,zero,r4
  8099f8:	003fe006 	br	80997c <__fixdfsi+0x34>
  8099fc:	00e00034 	movhi	r3,32768
  809a00:	003fde06 	br	80997c <__fixdfsi+0x34>
  809a04:	39c7883a 	add	r3,r7,r7
  809a08:	008007c4 	movi	r2,31
  809a0c:	1205c83a 	sub	r2,r2,r8
  809a10:	1886983a 	sll	r3,r3,r2
  809a14:	3208d83a 	srl	r4,r6,r8
  809a18:	1908b03a 	or	r4,r3,r4
  809a1c:	003ff206 	br	8099e8 <__fixdfsi+0xa0>

00809a20 <__floatunsidf>:
  809a20:	defff204 	addi	sp,sp,-56
  809a24:	dfc00d15 	stw	ra,52(sp)
  809a28:	ddc00c15 	stw	r23,48(sp)
  809a2c:	dd800b15 	stw	r22,44(sp)
  809a30:	dd400a15 	stw	r21,40(sp)
  809a34:	dd000915 	stw	r20,36(sp)
  809a38:	dcc00815 	stw	r19,32(sp)
  809a3c:	dc800715 	stw	r18,28(sp)
  809a40:	dc400615 	stw	r17,24(sp)
  809a44:	dc000515 	stw	r16,20(sp)
  809a48:	d8000115 	stw	zero,4(sp)
  809a4c:	20000f1e 	bne	r4,zero,809a8c <__floatunsidf+0x6c>
  809a50:	00800084 	movi	r2,2
  809a54:	d8800015 	stw	r2,0(sp)
  809a58:	d809883a 	mov	r4,sp
  809a5c:	0809c340 	call	809c34 <__pack_d>
  809a60:	dfc00d17 	ldw	ra,52(sp)
  809a64:	ddc00c17 	ldw	r23,48(sp)
  809a68:	dd800b17 	ldw	r22,44(sp)
  809a6c:	dd400a17 	ldw	r21,40(sp)
  809a70:	dd000917 	ldw	r20,36(sp)
  809a74:	dcc00817 	ldw	r19,32(sp)
  809a78:	dc800717 	ldw	r18,28(sp)
  809a7c:	dc400617 	ldw	r17,24(sp)
  809a80:	dc000517 	ldw	r16,20(sp)
  809a84:	dec00e04 	addi	sp,sp,56
  809a88:	f800283a 	ret
  809a8c:	008000c4 	movi	r2,3
  809a90:	00c00f04 	movi	r3,60
  809a94:	002f883a 	mov	r23,zero
  809a98:	202d883a 	mov	r22,r4
  809a9c:	d8800015 	stw	r2,0(sp)
  809aa0:	d8c00215 	stw	r3,8(sp)
  809aa4:	d9000315 	stw	r4,12(sp)
  809aa8:	ddc00415 	stw	r23,16(sp)
  809aac:	0809bb40 	call	809bb4 <__clzsi2>
  809ab0:	12400744 	addi	r9,r2,29
  809ab4:	48000b16 	blt	r9,zero,809ae4 <__floatunsidf+0xc4>
  809ab8:	483fe726 	beq	r9,zero,809a58 <__floatunsidf+0x38>
  809abc:	10bfff44 	addi	r2,r2,-3
  809ac0:	10002e16 	blt	r2,zero,809b7c <__floatunsidf+0x15c>
  809ac4:	b0a2983a 	sll	r17,r22,r2
  809ac8:	0021883a 	mov	r16,zero
  809acc:	d8800217 	ldw	r2,8(sp)
  809ad0:	dc400415 	stw	r17,16(sp)
  809ad4:	dc000315 	stw	r16,12(sp)
  809ad8:	1245c83a 	sub	r2,r2,r9
  809adc:	d8800215 	stw	r2,8(sp)
  809ae0:	003fdd06 	br	809a58 <__floatunsidf+0x38>
  809ae4:	0255c83a 	sub	r10,zero,r9
  809ae8:	51bff804 	addi	r6,r10,-32
  809aec:	30001b16 	blt	r6,zero,809b5c <__floatunsidf+0x13c>
  809af0:	b9a8d83a 	srl	r20,r23,r6
  809af4:	002b883a 	mov	r21,zero
  809af8:	000f883a 	mov	r7,zero
  809afc:	01000044 	movi	r4,1
  809b00:	0011883a 	mov	r8,zero
  809b04:	30002516 	blt	r6,zero,809b9c <__floatunsidf+0x17c>
  809b08:	21a6983a 	sll	r19,r4,r6
  809b0c:	0025883a 	mov	r18,zero
  809b10:	00bfffc4 	movi	r2,-1
  809b14:	9089883a 	add	r4,r18,r2
  809b18:	988b883a 	add	r5,r19,r2
  809b1c:	248d803a 	cmpltu	r6,r4,r18
  809b20:	314b883a 	add	r5,r6,r5
  809b24:	b104703a 	and	r2,r22,r4
  809b28:	b946703a 	and	r3,r23,r5
  809b2c:	10c4b03a 	or	r2,r2,r3
  809b30:	10000226 	beq	r2,zero,809b3c <__floatunsidf+0x11c>
  809b34:	01c00044 	movi	r7,1
  809b38:	0011883a 	mov	r8,zero
  809b3c:	d9000217 	ldw	r4,8(sp)
  809b40:	a1c4b03a 	or	r2,r20,r7
  809b44:	aa06b03a 	or	r3,r21,r8
  809b48:	2249c83a 	sub	r4,r4,r9
  809b4c:	d8c00415 	stw	r3,16(sp)
  809b50:	d9000215 	stw	r4,8(sp)
  809b54:	d8800315 	stw	r2,12(sp)
  809b58:	003fbf06 	br	809a58 <__floatunsidf+0x38>
  809b5c:	bdc7883a 	add	r3,r23,r23
  809b60:	008007c4 	movi	r2,31
  809b64:	1285c83a 	sub	r2,r2,r10
  809b68:	1886983a 	sll	r3,r3,r2
  809b6c:	b2a8d83a 	srl	r20,r22,r10
  809b70:	baaad83a 	srl	r21,r23,r10
  809b74:	1d28b03a 	or	r20,r3,r20
  809b78:	003fdf06 	br	809af8 <__floatunsidf+0xd8>
  809b7c:	b006d07a 	srli	r3,r22,1
  809b80:	008007c4 	movi	r2,31
  809b84:	1245c83a 	sub	r2,r2,r9
  809b88:	1886d83a 	srl	r3,r3,r2
  809b8c:	ba62983a 	sll	r17,r23,r9
  809b90:	b260983a 	sll	r16,r22,r9
  809b94:	1c62b03a 	or	r17,r3,r17
  809b98:	003fcc06 	br	809acc <__floatunsidf+0xac>
  809b9c:	2006d07a 	srli	r3,r4,1
  809ba0:	008007c4 	movi	r2,31
  809ba4:	1285c83a 	sub	r2,r2,r10
  809ba8:	18a6d83a 	srl	r19,r3,r2
  809bac:	22a4983a 	sll	r18,r4,r10
  809bb0:	003fd706 	br	809b10 <__floatunsidf+0xf0>

00809bb4 <__clzsi2>:
  809bb4:	00bfffd4 	movui	r2,65535
  809bb8:	11000e36 	bltu	r2,r4,809bf4 <__clzsi2+0x40>
  809bbc:	00803fc4 	movi	r2,255
  809bc0:	01400204 	movi	r5,8
  809bc4:	0007883a 	mov	r3,zero
  809bc8:	11001036 	bltu	r2,r4,809c0c <__clzsi2+0x58>
  809bcc:	000b883a 	mov	r5,zero
  809bd0:	20c6d83a 	srl	r3,r4,r3
  809bd4:	00802074 	movhi	r2,129
  809bd8:	10b84e04 	addi	r2,r2,-7880
  809bdc:	1887883a 	add	r3,r3,r2
  809be0:	18800003 	ldbu	r2,0(r3)
  809be4:	00c00804 	movi	r3,32
  809be8:	2885883a 	add	r2,r5,r2
  809bec:	1885c83a 	sub	r2,r3,r2
  809bf0:	f800283a 	ret
  809bf4:	01400404 	movi	r5,16
  809bf8:	00804034 	movhi	r2,256
  809bfc:	10bfffc4 	addi	r2,r2,-1
  809c00:	2807883a 	mov	r3,r5
  809c04:	113ff22e 	bgeu	r2,r4,809bd0 <__clzsi2+0x1c>
  809c08:	01400604 	movi	r5,24
  809c0c:	2807883a 	mov	r3,r5
  809c10:	20c6d83a 	srl	r3,r4,r3
  809c14:	00802074 	movhi	r2,129
  809c18:	10b84e04 	addi	r2,r2,-7880
  809c1c:	1887883a 	add	r3,r3,r2
  809c20:	18800003 	ldbu	r2,0(r3)
  809c24:	00c00804 	movi	r3,32
  809c28:	2885883a 	add	r2,r5,r2
  809c2c:	1885c83a 	sub	r2,r3,r2
  809c30:	f800283a 	ret

00809c34 <__pack_d>:
  809c34:	20c00017 	ldw	r3,0(r4)
  809c38:	defffd04 	addi	sp,sp,-12
  809c3c:	dc000015 	stw	r16,0(sp)
  809c40:	dc800215 	stw	r18,8(sp)
  809c44:	dc400115 	stw	r17,4(sp)
  809c48:	00800044 	movi	r2,1
  809c4c:	22000317 	ldw	r8,12(r4)
  809c50:	001f883a 	mov	r15,zero
  809c54:	22400417 	ldw	r9,16(r4)
  809c58:	24000117 	ldw	r16,4(r4)
  809c5c:	10c0552e 	bgeu	r2,r3,809db4 <__pack_d+0x180>
  809c60:	00800104 	movi	r2,4
  809c64:	18804f26 	beq	r3,r2,809da4 <__pack_d+0x170>
  809c68:	00800084 	movi	r2,2
  809c6c:	18800226 	beq	r3,r2,809c78 <__pack_d+0x44>
  809c70:	4244b03a 	or	r2,r8,r9
  809c74:	10001a1e 	bne	r2,zero,809ce0 <__pack_d+0xac>
  809c78:	000d883a 	mov	r6,zero
  809c7c:	000f883a 	mov	r7,zero
  809c80:	0011883a 	mov	r8,zero
  809c84:	00800434 	movhi	r2,16
  809c88:	10bfffc4 	addi	r2,r2,-1
  809c8c:	301d883a 	mov	r14,r6
  809c90:	3884703a 	and	r2,r7,r2
  809c94:	400a953a 	slli	r5,r8,20
  809c98:	79bffc2c 	andhi	r6,r15,65520
  809c9c:	308cb03a 	or	r6,r6,r2
  809ca0:	00e00434 	movhi	r3,32784
  809ca4:	18ffffc4 	addi	r3,r3,-1
  809ca8:	800497fa 	slli	r2,r16,31
  809cac:	30c6703a 	and	r3,r6,r3
  809cb0:	1946b03a 	or	r3,r3,r5
  809cb4:	01600034 	movhi	r5,32768
  809cb8:	297fffc4 	addi	r5,r5,-1
  809cbc:	194a703a 	and	r5,r3,r5
  809cc0:	288ab03a 	or	r5,r5,r2
  809cc4:	2807883a 	mov	r3,r5
  809cc8:	7005883a 	mov	r2,r14
  809ccc:	dc800217 	ldw	r18,8(sp)
  809cd0:	dc400117 	ldw	r17,4(sp)
  809cd4:	dc000017 	ldw	r16,0(sp)
  809cd8:	dec00304 	addi	sp,sp,12
  809cdc:	f800283a 	ret
  809ce0:	21000217 	ldw	r4,8(r4)
  809ce4:	00bf0084 	movi	r2,-1022
  809ce8:	20803f16 	blt	r4,r2,809de8 <__pack_d+0x1b4>
  809cec:	0080ffc4 	movi	r2,1023
  809cf0:	11002c16 	blt	r2,r4,809da4 <__pack_d+0x170>
  809cf4:	00803fc4 	movi	r2,255
  809cf8:	408c703a 	and	r6,r8,r2
  809cfc:	00802004 	movi	r2,128
  809d00:	0007883a 	mov	r3,zero
  809d04:	000f883a 	mov	r7,zero
  809d08:	2280ffc4 	addi	r10,r4,1023
  809d0c:	30801e26 	beq	r6,r2,809d88 <__pack_d+0x154>
  809d10:	00801fc4 	movi	r2,127
  809d14:	4089883a 	add	r4,r8,r2
  809d18:	220d803a 	cmpltu	r6,r4,r8
  809d1c:	324d883a 	add	r6,r6,r9
  809d20:	2011883a 	mov	r8,r4
  809d24:	3013883a 	mov	r9,r6
  809d28:	00880034 	movhi	r2,8192
  809d2c:	10bfffc4 	addi	r2,r2,-1
  809d30:	12400d36 	bltu	r2,r9,809d68 <__pack_d+0x134>
  809d34:	4804963a 	slli	r2,r9,24
  809d38:	400cd23a 	srli	r6,r8,8
  809d3c:	480ed23a 	srli	r7,r9,8
  809d40:	013fffc4 	movi	r4,-1
  809d44:	118cb03a 	or	r6,r2,r6
  809d48:	01400434 	movhi	r5,16
  809d4c:	297fffc4 	addi	r5,r5,-1
  809d50:	3104703a 	and	r2,r6,r4
  809d54:	3946703a 	and	r3,r7,r5
  809d58:	5201ffcc 	andi	r8,r10,2047
  809d5c:	100d883a 	mov	r6,r2
  809d60:	180f883a 	mov	r7,r3
  809d64:	003fc706 	br	809c84 <__pack_d+0x50>
  809d68:	480897fa 	slli	r4,r9,31
  809d6c:	4004d07a 	srli	r2,r8,1
  809d70:	4806d07a 	srli	r3,r9,1
  809d74:	52800044 	addi	r10,r10,1
  809d78:	2084b03a 	or	r2,r4,r2
  809d7c:	1011883a 	mov	r8,r2
  809d80:	1813883a 	mov	r9,r3
  809d84:	003feb06 	br	809d34 <__pack_d+0x100>
  809d88:	383fe11e 	bne	r7,zero,809d10 <__pack_d+0xdc>
  809d8c:	01004004 	movi	r4,256
  809d90:	4104703a 	and	r2,r8,r4
  809d94:	10c4b03a 	or	r2,r2,r3
  809d98:	103fe326 	beq	r2,zero,809d28 <__pack_d+0xf4>
  809d9c:	3005883a 	mov	r2,r6
  809da0:	003fdc06 	br	809d14 <__pack_d+0xe0>
  809da4:	000d883a 	mov	r6,zero
  809da8:	000f883a 	mov	r7,zero
  809dac:	0201ffc4 	movi	r8,2047
  809db0:	003fb406 	br	809c84 <__pack_d+0x50>
  809db4:	0005883a 	mov	r2,zero
  809db8:	00c00234 	movhi	r3,8
  809dbc:	408cb03a 	or	r6,r8,r2
  809dc0:	48ceb03a 	or	r7,r9,r3
  809dc4:	013fffc4 	movi	r4,-1
  809dc8:	01400434 	movhi	r5,16
  809dcc:	297fffc4 	addi	r5,r5,-1
  809dd0:	3104703a 	and	r2,r6,r4
  809dd4:	3946703a 	and	r3,r7,r5
  809dd8:	100d883a 	mov	r6,r2
  809ddc:	180f883a 	mov	r7,r3
  809de0:	0201ffc4 	movi	r8,2047
  809de4:	003fa706 	br	809c84 <__pack_d+0x50>
  809de8:	1109c83a 	sub	r4,r2,r4
  809dec:	00800e04 	movi	r2,56
  809df0:	11004316 	blt	r2,r4,809f00 <__pack_d+0x2cc>
  809df4:	21fff804 	addi	r7,r4,-32
  809df8:	38004516 	blt	r7,zero,809f10 <__pack_d+0x2dc>
  809dfc:	49d8d83a 	srl	r12,r9,r7
  809e00:	001b883a 	mov	r13,zero
  809e04:	0023883a 	mov	r17,zero
  809e08:	01400044 	movi	r5,1
  809e0c:	0025883a 	mov	r18,zero
  809e10:	38004716 	blt	r7,zero,809f30 <__pack_d+0x2fc>
  809e14:	29d6983a 	sll	r11,r5,r7
  809e18:	0015883a 	mov	r10,zero
  809e1c:	00bfffc4 	movi	r2,-1
  809e20:	5089883a 	add	r4,r10,r2
  809e24:	588b883a 	add	r5,r11,r2
  809e28:	228d803a 	cmpltu	r6,r4,r10
  809e2c:	314b883a 	add	r5,r6,r5
  809e30:	4104703a 	and	r2,r8,r4
  809e34:	4946703a 	and	r3,r9,r5
  809e38:	10c4b03a 	or	r2,r2,r3
  809e3c:	10000226 	beq	r2,zero,809e48 <__pack_d+0x214>
  809e40:	04400044 	movi	r17,1
  809e44:	0025883a 	mov	r18,zero
  809e48:	00803fc4 	movi	r2,255
  809e4c:	644eb03a 	or	r7,r12,r17
  809e50:	3892703a 	and	r9,r7,r2
  809e54:	00802004 	movi	r2,128
  809e58:	6c90b03a 	or	r8,r13,r18
  809e5c:	0015883a 	mov	r10,zero
  809e60:	48801626 	beq	r9,r2,809ebc <__pack_d+0x288>
  809e64:	01001fc4 	movi	r4,127
  809e68:	3905883a 	add	r2,r7,r4
  809e6c:	11cd803a 	cmpltu	r6,r2,r7
  809e70:	320d883a 	add	r6,r6,r8
  809e74:	100f883a 	mov	r7,r2
  809e78:	00840034 	movhi	r2,4096
  809e7c:	10bfffc4 	addi	r2,r2,-1
  809e80:	3011883a 	mov	r8,r6
  809e84:	0007883a 	mov	r3,zero
  809e88:	11801b36 	bltu	r2,r6,809ef8 <__pack_d+0x2c4>
  809e8c:	4004963a 	slli	r2,r8,24
  809e90:	3808d23a 	srli	r4,r7,8
  809e94:	400ad23a 	srli	r5,r8,8
  809e98:	1813883a 	mov	r9,r3
  809e9c:	1108b03a 	or	r4,r2,r4
  809ea0:	00bfffc4 	movi	r2,-1
  809ea4:	00c00434 	movhi	r3,16
  809ea8:	18ffffc4 	addi	r3,r3,-1
  809eac:	208c703a 	and	r6,r4,r2
  809eb0:	28ce703a 	and	r7,r5,r3
  809eb4:	4a01ffcc 	andi	r8,r9,2047
  809eb8:	003f7206 	br	809c84 <__pack_d+0x50>
  809ebc:	503fe91e 	bne	r10,zero,809e64 <__pack_d+0x230>
  809ec0:	01004004 	movi	r4,256
  809ec4:	3904703a 	and	r2,r7,r4
  809ec8:	0007883a 	mov	r3,zero
  809ecc:	10c4b03a 	or	r2,r2,r3
  809ed0:	10000626 	beq	r2,zero,809eec <__pack_d+0x2b8>
  809ed4:	3a45883a 	add	r2,r7,r9
  809ed8:	11cd803a 	cmpltu	r6,r2,r7
  809edc:	320d883a 	add	r6,r6,r8
  809ee0:	100f883a 	mov	r7,r2
  809ee4:	3011883a 	mov	r8,r6
  809ee8:	0007883a 	mov	r3,zero
  809eec:	00840034 	movhi	r2,4096
  809ef0:	10bfffc4 	addi	r2,r2,-1
  809ef4:	123fe52e 	bgeu	r2,r8,809e8c <__pack_d+0x258>
  809ef8:	00c00044 	movi	r3,1
  809efc:	003fe306 	br	809e8c <__pack_d+0x258>
  809f00:	0009883a 	mov	r4,zero
  809f04:	0013883a 	mov	r9,zero
  809f08:	000b883a 	mov	r5,zero
  809f0c:	003fe406 	br	809ea0 <__pack_d+0x26c>
  809f10:	4a47883a 	add	r3,r9,r9
  809f14:	008007c4 	movi	r2,31
  809f18:	1105c83a 	sub	r2,r2,r4
  809f1c:	1886983a 	sll	r3,r3,r2
  809f20:	4118d83a 	srl	r12,r8,r4
  809f24:	491ad83a 	srl	r13,r9,r4
  809f28:	1b18b03a 	or	r12,r3,r12
  809f2c:	003fb506 	br	809e04 <__pack_d+0x1d0>
  809f30:	2806d07a 	srli	r3,r5,1
  809f34:	008007c4 	movi	r2,31
  809f38:	1105c83a 	sub	r2,r2,r4
  809f3c:	1896d83a 	srl	r11,r3,r2
  809f40:	2914983a 	sll	r10,r5,r4
  809f44:	003fb506 	br	809e1c <__pack_d+0x1e8>

00809f48 <__unpack_d>:
  809f48:	20c00117 	ldw	r3,4(r4)
  809f4c:	22400017 	ldw	r9,0(r4)
  809f50:	00800434 	movhi	r2,16
  809f54:	10bfffc4 	addi	r2,r2,-1
  809f58:	1808d53a 	srli	r4,r3,20
  809f5c:	180cd7fa 	srli	r6,r3,31
  809f60:	1894703a 	and	r10,r3,r2
  809f64:	2201ffcc 	andi	r8,r4,2047
  809f68:	281b883a 	mov	r13,r5
  809f6c:	4817883a 	mov	r11,r9
  809f70:	29800115 	stw	r6,4(r5)
  809f74:	5019883a 	mov	r12,r10
  809f78:	40001e1e 	bne	r8,zero,809ff4 <__unpack_d+0xac>
  809f7c:	4a84b03a 	or	r2,r9,r10
  809f80:	10001926 	beq	r2,zero,809fe8 <__unpack_d+0xa0>
  809f84:	4804d63a 	srli	r2,r9,24
  809f88:	500c923a 	slli	r6,r10,8
  809f8c:	013f0084 	movi	r4,-1022
  809f90:	00c40034 	movhi	r3,4096
  809f94:	18ffffc4 	addi	r3,r3,-1
  809f98:	118cb03a 	or	r6,r2,r6
  809f9c:	008000c4 	movi	r2,3
  809fa0:	480a923a 	slli	r5,r9,8
  809fa4:	68800015 	stw	r2,0(r13)
  809fa8:	69000215 	stw	r4,8(r13)
  809fac:	19800b36 	bltu	r3,r6,809fdc <__unpack_d+0x94>
  809fb0:	200f883a 	mov	r7,r4
  809fb4:	1811883a 	mov	r8,r3
  809fb8:	2945883a 	add	r2,r5,r5
  809fbc:	1149803a 	cmpltu	r4,r2,r5
  809fc0:	3187883a 	add	r3,r6,r6
  809fc4:	20c9883a 	add	r4,r4,r3
  809fc8:	100b883a 	mov	r5,r2
  809fcc:	200d883a 	mov	r6,r4
  809fd0:	39ffffc4 	addi	r7,r7,-1
  809fd4:	413ff82e 	bgeu	r8,r4,809fb8 <__unpack_d+0x70>
  809fd8:	69c00215 	stw	r7,8(r13)
  809fdc:	69800415 	stw	r6,16(r13)
  809fe0:	69400315 	stw	r5,12(r13)
  809fe4:	f800283a 	ret
  809fe8:	00800084 	movi	r2,2
  809fec:	28800015 	stw	r2,0(r5)
  809ff0:	f800283a 	ret
  809ff4:	0081ffc4 	movi	r2,2047
  809ff8:	40800f26 	beq	r8,r2,80a038 <__unpack_d+0xf0>
  809ffc:	480cd63a 	srli	r6,r9,24
  80a000:	5006923a 	slli	r3,r10,8
  80a004:	4804923a 	slli	r2,r9,8
  80a008:	0009883a 	mov	r4,zero
  80a00c:	30c6b03a 	or	r3,r6,r3
  80a010:	01440034 	movhi	r5,4096
  80a014:	110cb03a 	or	r6,r2,r4
  80a018:	423f0044 	addi	r8,r8,-1023
  80a01c:	194eb03a 	or	r7,r3,r5
  80a020:	008000c4 	movi	r2,3
  80a024:	69c00415 	stw	r7,16(r13)
  80a028:	6a000215 	stw	r8,8(r13)
  80a02c:	68800015 	stw	r2,0(r13)
  80a030:	69800315 	stw	r6,12(r13)
  80a034:	f800283a 	ret
  80a038:	4a84b03a 	or	r2,r9,r10
  80a03c:	1000031e 	bne	r2,zero,80a04c <__unpack_d+0x104>
  80a040:	00800104 	movi	r2,4
  80a044:	28800015 	stw	r2,0(r5)
  80a048:	f800283a 	ret
  80a04c:	0009883a 	mov	r4,zero
  80a050:	01400234 	movhi	r5,8
  80a054:	4904703a 	and	r2,r9,r4
  80a058:	5146703a 	and	r3,r10,r5
  80a05c:	10c4b03a 	or	r2,r2,r3
  80a060:	10000526 	beq	r2,zero,80a078 <__unpack_d+0x130>
  80a064:	00800044 	movi	r2,1
  80a068:	68800015 	stw	r2,0(r13)
  80a06c:	6b000415 	stw	r12,16(r13)
  80a070:	6ac00315 	stw	r11,12(r13)
  80a074:	f800283a 	ret
  80a078:	68000015 	stw	zero,0(r13)
  80a07c:	003ffb06 	br	80a06c <__unpack_d+0x124>

0080a080 <__fpcmp_parts_d>:
  80a080:	21800017 	ldw	r6,0(r4)
  80a084:	00c00044 	movi	r3,1
  80a088:	19800a2e 	bgeu	r3,r6,80a0b4 <__fpcmp_parts_d+0x34>
  80a08c:	28800017 	ldw	r2,0(r5)
  80a090:	1880082e 	bgeu	r3,r2,80a0b4 <__fpcmp_parts_d+0x34>
  80a094:	00c00104 	movi	r3,4
  80a098:	30c02626 	beq	r6,r3,80a134 <__fpcmp_parts_d+0xb4>
  80a09c:	10c02226 	beq	r2,r3,80a128 <__fpcmp_parts_d+0xa8>
  80a0a0:	00c00084 	movi	r3,2
  80a0a4:	30c00526 	beq	r6,r3,80a0bc <__fpcmp_parts_d+0x3c>
  80a0a8:	10c0071e 	bne	r2,r3,80a0c8 <__fpcmp_parts_d+0x48>
  80a0ac:	20800117 	ldw	r2,4(r4)
  80a0b0:	1000091e 	bne	r2,zero,80a0d8 <__fpcmp_parts_d+0x58>
  80a0b4:	00800044 	movi	r2,1
  80a0b8:	f800283a 	ret
  80a0bc:	10c01a1e 	bne	r2,r3,80a128 <__fpcmp_parts_d+0xa8>
  80a0c0:	0005883a 	mov	r2,zero
  80a0c4:	f800283a 	ret
  80a0c8:	22000117 	ldw	r8,4(r4)
  80a0cc:	28800117 	ldw	r2,4(r5)
  80a0d0:	40800326 	beq	r8,r2,80a0e0 <__fpcmp_parts_d+0x60>
  80a0d4:	403ff726 	beq	r8,zero,80a0b4 <__fpcmp_parts_d+0x34>
  80a0d8:	00bfffc4 	movi	r2,-1
  80a0dc:	f800283a 	ret
  80a0e0:	20c00217 	ldw	r3,8(r4)
  80a0e4:	28800217 	ldw	r2,8(r5)
  80a0e8:	10fffa16 	blt	r2,r3,80a0d4 <__fpcmp_parts_d+0x54>
  80a0ec:	18800916 	blt	r3,r2,80a114 <__fpcmp_parts_d+0x94>
  80a0f0:	21c00417 	ldw	r7,16(r4)
  80a0f4:	28c00417 	ldw	r3,16(r5)
  80a0f8:	21800317 	ldw	r6,12(r4)
  80a0fc:	28800317 	ldw	r2,12(r5)
  80a100:	19fff436 	bltu	r3,r7,80a0d4 <__fpcmp_parts_d+0x54>
  80a104:	38c00526 	beq	r7,r3,80a11c <__fpcmp_parts_d+0x9c>
  80a108:	38c00236 	bltu	r7,r3,80a114 <__fpcmp_parts_d+0x94>
  80a10c:	19ffec1e 	bne	r3,r7,80a0c0 <__fpcmp_parts_d+0x40>
  80a110:	30bfeb2e 	bgeu	r6,r2,80a0c0 <__fpcmp_parts_d+0x40>
  80a114:	403fe71e 	bne	r8,zero,80a0b4 <__fpcmp_parts_d+0x34>
  80a118:	003fef06 	br	80a0d8 <__fpcmp_parts_d+0x58>
  80a11c:	11bffa2e 	bgeu	r2,r6,80a108 <__fpcmp_parts_d+0x88>
  80a120:	403fe426 	beq	r8,zero,80a0b4 <__fpcmp_parts_d+0x34>
  80a124:	003fec06 	br	80a0d8 <__fpcmp_parts_d+0x58>
  80a128:	28800117 	ldw	r2,4(r5)
  80a12c:	103fe11e 	bne	r2,zero,80a0b4 <__fpcmp_parts_d+0x34>
  80a130:	003fe906 	br	80a0d8 <__fpcmp_parts_d+0x58>
  80a134:	11bfdd1e 	bne	r2,r6,80a0ac <__fpcmp_parts_d+0x2c>
  80a138:	28c00117 	ldw	r3,4(r5)
  80a13c:	20800117 	ldw	r2,4(r4)
  80a140:	1885c83a 	sub	r2,r3,r2
  80a144:	f800283a 	ret

0080a148 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80a148:	defff804 	addi	sp,sp,-32
  80a14c:	dfc00715 	stw	ra,28(sp)
  80a150:	df000615 	stw	fp,24(sp)
  80a154:	df000604 	addi	fp,sp,24
  80a158:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80a15c:	e0bffc17 	ldw	r2,-16(fp)
  80a160:	1004803a 	cmplt	r2,r2,zero
  80a164:	1000081e 	bne	r2,zero,80a188 <close+0x40>
  80a168:	e0bffc17 	ldw	r2,-16(fp)
  80a16c:	10800324 	muli	r2,r2,12
  80a170:	1007883a 	mov	r3,r2
  80a174:	00802074 	movhi	r2,129
  80a178:	10bb5404 	addi	r2,r2,-4784
  80a17c:	1887883a 	add	r3,r3,r2
  80a180:	e0ffff15 	stw	r3,-4(fp)
  80a184:	00000106 	br	80a18c <close+0x44>
  80a188:	e03fff15 	stw	zero,-4(fp)
  80a18c:	e0bfff17 	ldw	r2,-4(fp)
  80a190:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80a194:	e0bffb17 	ldw	r2,-20(fp)
  80a198:	1005003a 	cmpeq	r2,r2,zero
  80a19c:	10001d1e 	bne	r2,zero,80a214 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80a1a0:	e0bffb17 	ldw	r2,-20(fp)
  80a1a4:	10800017 	ldw	r2,0(r2)
  80a1a8:	10800417 	ldw	r2,16(r2)
  80a1ac:	1005003a 	cmpeq	r2,r2,zero
  80a1b0:	1000071e 	bne	r2,zero,80a1d0 <close+0x88>
  80a1b4:	e0bffb17 	ldw	r2,-20(fp)
  80a1b8:	10800017 	ldw	r2,0(r2)
  80a1bc:	10800417 	ldw	r2,16(r2)
  80a1c0:	e13ffb17 	ldw	r4,-20(fp)
  80a1c4:	103ee83a 	callr	r2
  80a1c8:	e0bffe15 	stw	r2,-8(fp)
  80a1cc:	00000106 	br	80a1d4 <close+0x8c>
  80a1d0:	e03ffe15 	stw	zero,-8(fp)
  80a1d4:	e0bffe17 	ldw	r2,-8(fp)
  80a1d8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80a1dc:	e13ffc17 	ldw	r4,-16(fp)
  80a1e0:	080aba80 	call	80aba8 <alt_release_fd>
    if (rval < 0)
  80a1e4:	e0bffa17 	ldw	r2,-24(fp)
  80a1e8:	1004403a 	cmpge	r2,r2,zero
  80a1ec:	1000071e 	bne	r2,zero,80a20c <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80a1f0:	080a2440 	call	80a244 <alt_get_errno>
  80a1f4:	e0fffa17 	ldw	r3,-24(fp)
  80a1f8:	00c7c83a 	sub	r3,zero,r3
  80a1fc:	10c00015 	stw	r3,0(r2)
      return -1;
  80a200:	00bfffc4 	movi	r2,-1
  80a204:	e0bffd15 	stw	r2,-12(fp)
  80a208:	00000806 	br	80a22c <close+0xe4>
    }
    return 0;
  80a20c:	e03ffd15 	stw	zero,-12(fp)
  80a210:	00000606 	br	80a22c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a214:	080a2440 	call	80a244 <alt_get_errno>
  80a218:	1007883a 	mov	r3,r2
  80a21c:	00801444 	movi	r2,81
  80a220:	18800015 	stw	r2,0(r3)
    return -1;
  80a224:	00bfffc4 	movi	r2,-1
  80a228:	e0bffd15 	stw	r2,-12(fp)
  80a22c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80a230:	e037883a 	mov	sp,fp
  80a234:	dfc00117 	ldw	ra,4(sp)
  80a238:	df000017 	ldw	fp,0(sp)
  80a23c:	dec00204 	addi	sp,sp,8
  80a240:	f800283a 	ret

0080a244 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a244:	defffd04 	addi	sp,sp,-12
  80a248:	dfc00215 	stw	ra,8(sp)
  80a24c:	df000115 	stw	fp,4(sp)
  80a250:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a254:	00802074 	movhi	r2,129
  80a258:	10801f04 	addi	r2,r2,124
  80a25c:	10800017 	ldw	r2,0(r2)
  80a260:	1005003a 	cmpeq	r2,r2,zero
  80a264:	1000061e 	bne	r2,zero,80a280 <alt_get_errno+0x3c>
  80a268:	00802074 	movhi	r2,129
  80a26c:	10801f04 	addi	r2,r2,124
  80a270:	10800017 	ldw	r2,0(r2)
  80a274:	103ee83a 	callr	r2
  80a278:	e0bfff15 	stw	r2,-4(fp)
  80a27c:	00000306 	br	80a28c <alt_get_errno+0x48>
  80a280:	00802074 	movhi	r2,129
  80a284:	10870c04 	addi	r2,r2,7216
  80a288:	e0bfff15 	stw	r2,-4(fp)
  80a28c:	e0bfff17 	ldw	r2,-4(fp)
}
  80a290:	e037883a 	mov	sp,fp
  80a294:	dfc00117 	ldw	ra,4(sp)
  80a298:	df000017 	ldw	fp,0(sp)
  80a29c:	dec00204 	addi	sp,sp,8
  80a2a0:	f800283a 	ret

0080a2a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80a2a4:	defffc04 	addi	sp,sp,-16
  80a2a8:	df000315 	stw	fp,12(sp)
  80a2ac:	df000304 	addi	fp,sp,12
  80a2b0:	e13ffd15 	stw	r4,-12(fp)
  80a2b4:	e17ffe15 	stw	r5,-8(fp)
  80a2b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80a2bc:	e0bfff17 	ldw	r2,-4(fp)
}
  80a2c0:	e037883a 	mov	sp,fp
  80a2c4:	df000017 	ldw	fp,0(sp)
  80a2c8:	dec00104 	addi	sp,sp,4
  80a2cc:	f800283a 	ret

0080a2d0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80a2d0:	defff904 	addi	sp,sp,-28
  80a2d4:	dfc00615 	stw	ra,24(sp)
  80a2d8:	df000515 	stw	fp,20(sp)
  80a2dc:	df000504 	addi	fp,sp,20
  80a2e0:	e13ffc15 	stw	r4,-16(fp)
  80a2e4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a2e8:	e0bffc17 	ldw	r2,-16(fp)
  80a2ec:	1004803a 	cmplt	r2,r2,zero
  80a2f0:	1000081e 	bne	r2,zero,80a314 <fstat+0x44>
  80a2f4:	e0bffc17 	ldw	r2,-16(fp)
  80a2f8:	10800324 	muli	r2,r2,12
  80a2fc:	1007883a 	mov	r3,r2
  80a300:	00802074 	movhi	r2,129
  80a304:	10bb5404 	addi	r2,r2,-4784
  80a308:	1887883a 	add	r3,r3,r2
  80a30c:	e0ffff15 	stw	r3,-4(fp)
  80a310:	00000106 	br	80a318 <fstat+0x48>
  80a314:	e03fff15 	stw	zero,-4(fp)
  80a318:	e0bfff17 	ldw	r2,-4(fp)
  80a31c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80a320:	e0bffb17 	ldw	r2,-20(fp)
  80a324:	1005003a 	cmpeq	r2,r2,zero
  80a328:	1000121e 	bne	r2,zero,80a374 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80a32c:	e0bffb17 	ldw	r2,-20(fp)
  80a330:	10800017 	ldw	r2,0(r2)
  80a334:	10800817 	ldw	r2,32(r2)
  80a338:	1005003a 	cmpeq	r2,r2,zero
  80a33c:	1000081e 	bne	r2,zero,80a360 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80a340:	e0bffb17 	ldw	r2,-20(fp)
  80a344:	10800017 	ldw	r2,0(r2)
  80a348:	10800817 	ldw	r2,32(r2)
  80a34c:	e13ffb17 	ldw	r4,-20(fp)
  80a350:	e17ffd17 	ldw	r5,-12(fp)
  80a354:	103ee83a 	callr	r2
  80a358:	e0bffe15 	stw	r2,-8(fp)
  80a35c:	00000b06 	br	80a38c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80a360:	e0fffd17 	ldw	r3,-12(fp)
  80a364:	00880004 	movi	r2,8192
  80a368:	18800115 	stw	r2,4(r3)
      return 0;
  80a36c:	e03ffe15 	stw	zero,-8(fp)
  80a370:	00000606 	br	80a38c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a374:	080a3a40 	call	80a3a4 <alt_get_errno>
  80a378:	1007883a 	mov	r3,r2
  80a37c:	00801444 	movi	r2,81
  80a380:	18800015 	stw	r2,0(r3)
    return -1;
  80a384:	00bfffc4 	movi	r2,-1
  80a388:	e0bffe15 	stw	r2,-8(fp)
  80a38c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80a390:	e037883a 	mov	sp,fp
  80a394:	dfc00117 	ldw	ra,4(sp)
  80a398:	df000017 	ldw	fp,0(sp)
  80a39c:	dec00204 	addi	sp,sp,8
  80a3a0:	f800283a 	ret

0080a3a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a3a4:	defffd04 	addi	sp,sp,-12
  80a3a8:	dfc00215 	stw	ra,8(sp)
  80a3ac:	df000115 	stw	fp,4(sp)
  80a3b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a3b4:	00802074 	movhi	r2,129
  80a3b8:	10801f04 	addi	r2,r2,124
  80a3bc:	10800017 	ldw	r2,0(r2)
  80a3c0:	1005003a 	cmpeq	r2,r2,zero
  80a3c4:	1000061e 	bne	r2,zero,80a3e0 <alt_get_errno+0x3c>
  80a3c8:	00802074 	movhi	r2,129
  80a3cc:	10801f04 	addi	r2,r2,124
  80a3d0:	10800017 	ldw	r2,0(r2)
  80a3d4:	103ee83a 	callr	r2
  80a3d8:	e0bfff15 	stw	r2,-4(fp)
  80a3dc:	00000306 	br	80a3ec <alt_get_errno+0x48>
  80a3e0:	00802074 	movhi	r2,129
  80a3e4:	10870c04 	addi	r2,r2,7216
  80a3e8:	e0bfff15 	stw	r2,-4(fp)
  80a3ec:	e0bfff17 	ldw	r2,-4(fp)
}
  80a3f0:	e037883a 	mov	sp,fp
  80a3f4:	dfc00117 	ldw	ra,4(sp)
  80a3f8:	df000017 	ldw	fp,0(sp)
  80a3fc:	dec00204 	addi	sp,sp,8
  80a400:	f800283a 	ret

0080a404 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
  80a404:	defff504 	addi	sp,sp,-44
  80a408:	dfc00a15 	stw	ra,40(sp)
  80a40c:	df000915 	stw	fp,36(sp)
  80a410:	dc800815 	stw	r18,32(sp)
  80a414:	dc400715 	stw	r17,28(sp)
  80a418:	dc000615 	stw	r16,24(sp)
  80a41c:	df000604 	addi	fp,sp,24
  80a420:	e13ffd15 	stw	r4,-12(fp)
  80a424:	e17ffe15 	stw	r5,-8(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
  80a428:	e0bffe17 	ldw	r2,-8(fp)
  80a42c:	e0bffc15 	stw	r2,-16(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80a430:	00802074 	movhi	r2,129
  80a434:	10871b04 	addi	r2,r2,7276
  80a438:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
  80a43c:	e0bffb15 	stw	r2,-20(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80a440:	00802074 	movhi	r2,129
  80a444:	10871a04 	addi	r2,r2,7272
  80a448:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
  80a44c:	e0bffa15 	stw	r2,-24(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
  80a450:	e0bffa17 	ldw	r2,-24(fp)
  80a454:	1005003a 	cmpeq	r2,r2,zero
  80a458:	1000661e 	bne	r2,zero,80a5f4 <gettimeofday+0x1f0>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
  80a45c:	d0a70117 	ldw	r2,-25596(gp)
  80a460:	1021883a 	mov	r16,r2
  80a464:	e13ffb17 	ldw	r4,-20(fp)
  80a468:	e17ffa17 	ldw	r5,-24(fp)
  80a46c:	08009000 	call	800900 <__udivsi3>
  80a470:	8085883a 	add	r2,r16,r2
  80a474:	1007883a 	mov	r3,r2
  80a478:	e0bffd17 	ldw	r2,-12(fp)
  80a47c:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
  80a480:	00802074 	movhi	r2,129
  80a484:	10871604 	addi	r2,r2,7256
  80a488:	10800017 	ldw	r2,0(r2)
  80a48c:	1025883a 	mov	r18,r2
  80a490:	e43ffb17 	ldw	r16,-20(fp)
  80a494:	0023883a 	mov	r17,zero
  80a498:	010003f4 	movhi	r4,15
  80a49c:	21109004 	addi	r4,r4,16960
  80a4a0:	e17ffa17 	ldw	r5,-24(fp)
  80a4a4:	08009000 	call	800900 <__udivsi3>
  80a4a8:	1009883a 	mov	r4,r2
  80a4ac:	2005883a 	mov	r2,r4
  80a4b0:	0007883a 	mov	r3,zero
  80a4b4:	8009883a 	mov	r4,r16
  80a4b8:	880b883a 	mov	r5,r17
  80a4bc:	100d883a 	mov	r6,r2
  80a4c0:	180f883a 	mov	r7,r3
  80a4c4:	0807e640 	call	807e64 <__muldi3>
  80a4c8:	1009883a 	mov	r4,r2
  80a4cc:	180b883a 	mov	r5,r3
  80a4d0:	2005883a 	mov	r2,r4
  80a4d4:	2807883a 	mov	r3,r5
  80a4d8:	1009883a 	mov	r4,r2
  80a4dc:	180b883a 	mov	r5,r3
  80a4e0:	018003f4 	movhi	r6,15
  80a4e4:	31909004 	addi	r6,r6,16960
  80a4e8:	000f883a 	mov	r7,zero
  80a4ec:	08084d80 	call	8084d8 <__umoddi3>
  80a4f0:	1009883a 	mov	r4,r2
  80a4f4:	180b883a 	mov	r5,r3
  80a4f8:	2005883a 	mov	r2,r4
  80a4fc:	2807883a 	mov	r3,r5
  80a500:	9085883a 	add	r2,r18,r2
  80a504:	1007883a 	mov	r3,r2
  80a508:	e0bffd17 	ldw	r2,-12(fp)
  80a50c:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
  80a510:	00001506 	br	80a568 <gettimeofday+0x164>
      if (ptimeval->tv_sec <= 0)
  80a514:	e0bffd17 	ldw	r2,-12(fp)
  80a518:	10800017 	ldw	r2,0(r2)
  80a51c:	10800048 	cmpgei	r2,r2,1
  80a520:	1000051e 	bne	r2,zero,80a538 <gettimeofday+0x134>
      {
          ptimeval->tv_sec = 0;
  80a524:	e0bffd17 	ldw	r2,-12(fp)
  80a528:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
  80a52c:	e0bffd17 	ldw	r2,-12(fp)
  80a530:	10000115 	stw	zero,4(r2)
          break;
  80a534:	00001d06 	br	80a5ac <gettimeofday+0x1a8>
      }
      else
      {
          ptimeval->tv_sec--;
  80a538:	e0bffd17 	ldw	r2,-12(fp)
  80a53c:	10800017 	ldw	r2,0(r2)
  80a540:	10ffffc4 	addi	r3,r2,-1
  80a544:	e0bffd17 	ldw	r2,-12(fp)
  80a548:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
  80a54c:	e0bffd17 	ldw	r2,-12(fp)
  80a550:	10c00117 	ldw	r3,4(r2)
  80a554:	008003f4 	movhi	r2,15
  80a558:	10909004 	addi	r2,r2,16960
  80a55c:	1887883a 	add	r3,r3,r2
  80a560:	e0bffd17 	ldw	r2,-12(fp)
  80a564:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
  80a568:	e0bffd17 	ldw	r2,-12(fp)
  80a56c:	10800117 	ldw	r2,4(r2)
  80a570:	1004803a 	cmplt	r2,r2,zero
  80a574:	103fe71e 	bne	r2,zero,80a514 <gettimeofday+0x110>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
  80a578:	00000c06 	br	80a5ac <gettimeofday+0x1a8>
      ptimeval->tv_sec++;
  80a57c:	e0bffd17 	ldw	r2,-12(fp)
  80a580:	10800017 	ldw	r2,0(r2)
  80a584:	10c00044 	addi	r3,r2,1
  80a588:	e0bffd17 	ldw	r2,-12(fp)
  80a58c:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
  80a590:	e0bffd17 	ldw	r2,-12(fp)
  80a594:	10c00117 	ldw	r3,4(r2)
  80a598:	00bffc74 	movhi	r2,65521
  80a59c:	10af7004 	addi	r2,r2,-16960
  80a5a0:	1887883a 	add	r3,r3,r2
  80a5a4:	e0bffd17 	ldw	r2,-12(fp)
  80a5a8:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
  80a5ac:	e0bffd17 	ldw	r2,-12(fp)
  80a5b0:	10c00117 	ldw	r3,4(r2)
  80a5b4:	008003f4 	movhi	r2,15
  80a5b8:	10908fc4 	addi	r2,r2,16959
  80a5bc:	10ffef16 	blt	r2,r3,80a57c <gettimeofday+0x178>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
  80a5c0:	e0bffc17 	ldw	r2,-16(fp)
  80a5c4:	1005003a 	cmpeq	r2,r2,zero
  80a5c8:	1000081e 	bne	r2,zero,80a5ec <gettimeofday+0x1e8>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
  80a5cc:	d0e6ff17 	ldw	r3,-25604(gp)
  80a5d0:	e0bffc17 	ldw	r2,-16(fp)
  80a5d4:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
  80a5d8:	00802074 	movhi	r2,129
  80a5dc:	10871404 	addi	r2,r2,7248
  80a5e0:	10c00017 	ldw	r3,0(r2)
  80a5e4:	e0bffc17 	ldw	r2,-16(fp)
  80a5e8:	10c00115 	stw	r3,4(r2)
    }

    return 0;
  80a5ec:	e03fff15 	stw	zero,-4(fp)
  80a5f0:	00000206 	br	80a5fc <gettimeofday+0x1f8>
  }

  return -ENOTSUP;
  80a5f4:	00bfde84 	movi	r2,-134
  80a5f8:	e0bfff15 	stw	r2,-4(fp)
  80a5fc:	e0bfff17 	ldw	r2,-4(fp)
}
  80a600:	e037883a 	mov	sp,fp
  80a604:	dfc00417 	ldw	ra,16(sp)
  80a608:	df000317 	ldw	fp,12(sp)
  80a60c:	dc800217 	ldw	r18,8(sp)
  80a610:	dc400117 	ldw	r17,4(sp)
  80a614:	dc000017 	ldw	r16,0(sp)
  80a618:	dec00504 	addi	sp,sp,20
  80a61c:	f800283a 	ret

0080a620 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80a620:	deffeb04 	addi	sp,sp,-84
  80a624:	dfc01415 	stw	ra,80(sp)
  80a628:	df001315 	stw	fp,76(sp)
  80a62c:	df001304 	addi	fp,sp,76
  80a630:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a634:	e0bffd17 	ldw	r2,-12(fp)
  80a638:	1004803a 	cmplt	r2,r2,zero
  80a63c:	1000081e 	bne	r2,zero,80a660 <isatty+0x40>
  80a640:	e0bffd17 	ldw	r2,-12(fp)
  80a644:	10800324 	muli	r2,r2,12
  80a648:	1007883a 	mov	r3,r2
  80a64c:	00802074 	movhi	r2,129
  80a650:	10bb5404 	addi	r2,r2,-4784
  80a654:	1887883a 	add	r3,r3,r2
  80a658:	e0ffff15 	stw	r3,-4(fp)
  80a65c:	00000106 	br	80a664 <isatty+0x44>
  80a660:	e03fff15 	stw	zero,-4(fp)
  80a664:	e0bfff17 	ldw	r2,-4(fp)
  80a668:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80a66c:	e0bfed17 	ldw	r2,-76(fp)
  80a670:	1005003a 	cmpeq	r2,r2,zero
  80a674:	10000f1e 	bne	r2,zero,80a6b4 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80a678:	e0bfed17 	ldw	r2,-76(fp)
  80a67c:	10800017 	ldw	r2,0(r2)
  80a680:	10800817 	ldw	r2,32(r2)
  80a684:	1004c03a 	cmpne	r2,r2,zero
  80a688:	1000031e 	bne	r2,zero,80a698 <isatty+0x78>
    {
      return 1;
  80a68c:	00800044 	movi	r2,1
  80a690:	e0bffe15 	stw	r2,-8(fp)
  80a694:	00000c06 	br	80a6c8 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80a698:	e17fee04 	addi	r5,fp,-72
  80a69c:	e13ffd17 	ldw	r4,-12(fp)
  80a6a0:	080a2d00 	call	80a2d0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80a6a4:	e0bfef17 	ldw	r2,-68(fp)
  80a6a8:	10880020 	cmpeqi	r2,r2,8192
  80a6ac:	e0bffe15 	stw	r2,-8(fp)
  80a6b0:	00000506 	br	80a6c8 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a6b4:	080a6e00 	call	80a6e0 <alt_get_errno>
  80a6b8:	1007883a 	mov	r3,r2
  80a6bc:	00801444 	movi	r2,81
  80a6c0:	18800015 	stw	r2,0(r3)
    return 0;
  80a6c4:	e03ffe15 	stw	zero,-8(fp)
  80a6c8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80a6cc:	e037883a 	mov	sp,fp
  80a6d0:	dfc00117 	ldw	ra,4(sp)
  80a6d4:	df000017 	ldw	fp,0(sp)
  80a6d8:	dec00204 	addi	sp,sp,8
  80a6dc:	f800283a 	ret

0080a6e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a6e0:	defffd04 	addi	sp,sp,-12
  80a6e4:	dfc00215 	stw	ra,8(sp)
  80a6e8:	df000115 	stw	fp,4(sp)
  80a6ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a6f0:	00802074 	movhi	r2,129
  80a6f4:	10801f04 	addi	r2,r2,124
  80a6f8:	10800017 	ldw	r2,0(r2)
  80a6fc:	1005003a 	cmpeq	r2,r2,zero
  80a700:	1000061e 	bne	r2,zero,80a71c <alt_get_errno+0x3c>
  80a704:	00802074 	movhi	r2,129
  80a708:	10801f04 	addi	r2,r2,124
  80a70c:	10800017 	ldw	r2,0(r2)
  80a710:	103ee83a 	callr	r2
  80a714:	e0bfff15 	stw	r2,-4(fp)
  80a718:	00000306 	br	80a728 <alt_get_errno+0x48>
  80a71c:	00802074 	movhi	r2,129
  80a720:	10870c04 	addi	r2,r2,7216
  80a724:	e0bfff15 	stw	r2,-4(fp)
  80a728:	e0bfff17 	ldw	r2,-4(fp)
}
  80a72c:	e037883a 	mov	sp,fp
  80a730:	dfc00117 	ldw	ra,4(sp)
  80a734:	df000017 	ldw	fp,0(sp)
  80a738:	dec00204 	addi	sp,sp,8
  80a73c:	f800283a 	ret

0080a740 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80a740:	defffe04 	addi	sp,sp,-8
  80a744:	dfc00115 	stw	ra,4(sp)
  80a748:	df000015 	stw	fp,0(sp)
  80a74c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80a750:	01002074 	movhi	r4,129
  80a754:	21002604 	addi	r4,r4,152
  80a758:	01402074 	movhi	r5,129
  80a75c:	29794204 	addi	r5,r5,-6904
  80a760:	01802074 	movhi	r6,129
  80a764:	31802604 	addi	r6,r6,152
  80a768:	080a7c00 	call	80a7c0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80a76c:	01002034 	movhi	r4,128
  80a770:	21000804 	addi	r4,r4,32
  80a774:	01402034 	movhi	r5,128
  80a778:	29400804 	addi	r5,r5,32
  80a77c:	01802034 	movhi	r6,128
  80a780:	31806d04 	addi	r6,r6,436
  80a784:	080a7c00 	call	80a7c0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80a788:	01002074 	movhi	r4,129
  80a78c:	21378704 	addi	r4,r4,-8676
  80a790:	01402074 	movhi	r5,129
  80a794:	29778704 	addi	r5,r5,-8676
  80a798:	01802074 	movhi	r6,129
  80a79c:	31b94204 	addi	r6,r6,-6904
  80a7a0:	080a7c00 	call	80a7c0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80a7a4:	080cd6c0 	call	80cd6c <alt_dcache_flush_all>
  alt_icache_flush_all();
  80a7a8:	080cf8c0 	call	80cf8c <alt_icache_flush_all>
}
  80a7ac:	e037883a 	mov	sp,fp
  80a7b0:	dfc00117 	ldw	ra,4(sp)
  80a7b4:	df000017 	ldw	fp,0(sp)
  80a7b8:	dec00204 	addi	sp,sp,8
  80a7bc:	f800283a 	ret

0080a7c0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80a7c0:	defffc04 	addi	sp,sp,-16
  80a7c4:	df000315 	stw	fp,12(sp)
  80a7c8:	df000304 	addi	fp,sp,12
  80a7cc:	e13ffd15 	stw	r4,-12(fp)
  80a7d0:	e17ffe15 	stw	r5,-8(fp)
  80a7d4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80a7d8:	e0fffe17 	ldw	r3,-8(fp)
  80a7dc:	e0bffd17 	ldw	r2,-12(fp)
  80a7e0:	18800e26 	beq	r3,r2,80a81c <alt_load_section+0x5c>
  {
    while( to != end )
  80a7e4:	00000a06 	br	80a810 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80a7e8:	e0bffd17 	ldw	r2,-12(fp)
  80a7ec:	10c00017 	ldw	r3,0(r2)
  80a7f0:	e0bffe17 	ldw	r2,-8(fp)
  80a7f4:	10c00015 	stw	r3,0(r2)
  80a7f8:	e0bffe17 	ldw	r2,-8(fp)
  80a7fc:	10800104 	addi	r2,r2,4
  80a800:	e0bffe15 	stw	r2,-8(fp)
  80a804:	e0bffd17 	ldw	r2,-12(fp)
  80a808:	10800104 	addi	r2,r2,4
  80a80c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80a810:	e0fffe17 	ldw	r3,-8(fp)
  80a814:	e0bfff17 	ldw	r2,-4(fp)
  80a818:	18bff31e 	bne	r3,r2,80a7e8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80a81c:	e037883a 	mov	sp,fp
  80a820:	df000017 	ldw	fp,0(sp)
  80a824:	dec00104 	addi	sp,sp,4
  80a828:	f800283a 	ret

0080a82c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80a82c:	defff804 	addi	sp,sp,-32
  80a830:	dfc00715 	stw	ra,28(sp)
  80a834:	df000615 	stw	fp,24(sp)
  80a838:	df000604 	addi	fp,sp,24
  80a83c:	e13ffc15 	stw	r4,-16(fp)
  80a840:	e17ffd15 	stw	r5,-12(fp)
  80a844:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80a848:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a84c:	e0bffc17 	ldw	r2,-16(fp)
  80a850:	1004803a 	cmplt	r2,r2,zero
  80a854:	1000081e 	bne	r2,zero,80a878 <lseek+0x4c>
  80a858:	e0bffc17 	ldw	r2,-16(fp)
  80a85c:	10800324 	muli	r2,r2,12
  80a860:	1007883a 	mov	r3,r2
  80a864:	00802074 	movhi	r2,129
  80a868:	10bb5404 	addi	r2,r2,-4784
  80a86c:	1887883a 	add	r3,r3,r2
  80a870:	e0ffff15 	stw	r3,-4(fp)
  80a874:	00000106 	br	80a87c <lseek+0x50>
  80a878:	e03fff15 	stw	zero,-4(fp)
  80a87c:	e0bfff17 	ldw	r2,-4(fp)
  80a880:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80a884:	e0bffb17 	ldw	r2,-20(fp)
  80a888:	1005003a 	cmpeq	r2,r2,zero
  80a88c:	1000111e 	bne	r2,zero,80a8d4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80a890:	e0bffb17 	ldw	r2,-20(fp)
  80a894:	10800017 	ldw	r2,0(r2)
  80a898:	10800717 	ldw	r2,28(r2)
  80a89c:	1005003a 	cmpeq	r2,r2,zero
  80a8a0:	1000091e 	bne	r2,zero,80a8c8 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80a8a4:	e0bffb17 	ldw	r2,-20(fp)
  80a8a8:	10800017 	ldw	r2,0(r2)
  80a8ac:	10800717 	ldw	r2,28(r2)
  80a8b0:	e13ffb17 	ldw	r4,-20(fp)
  80a8b4:	e17ffd17 	ldw	r5,-12(fp)
  80a8b8:	e1bffe17 	ldw	r6,-8(fp)
  80a8bc:	103ee83a 	callr	r2
  80a8c0:	e0bffa15 	stw	r2,-24(fp)
  80a8c4:	00000506 	br	80a8dc <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80a8c8:	00bfde84 	movi	r2,-134
  80a8cc:	e0bffa15 	stw	r2,-24(fp)
  80a8d0:	00000206 	br	80a8dc <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80a8d4:	00bfebc4 	movi	r2,-81
  80a8d8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80a8dc:	e0bffa17 	ldw	r2,-24(fp)
  80a8e0:	1004403a 	cmpge	r2,r2,zero
  80a8e4:	1000071e 	bne	r2,zero,80a904 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80a8e8:	080a91c0 	call	80a91c <alt_get_errno>
  80a8ec:	1007883a 	mov	r3,r2
  80a8f0:	e0bffa17 	ldw	r2,-24(fp)
  80a8f4:	0085c83a 	sub	r2,zero,r2
  80a8f8:	18800015 	stw	r2,0(r3)
    rc = -1;
  80a8fc:	00bfffc4 	movi	r2,-1
  80a900:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80a904:	e0bffa17 	ldw	r2,-24(fp)
}
  80a908:	e037883a 	mov	sp,fp
  80a90c:	dfc00117 	ldw	ra,4(sp)
  80a910:	df000017 	ldw	fp,0(sp)
  80a914:	dec00204 	addi	sp,sp,8
  80a918:	f800283a 	ret

0080a91c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a91c:	defffd04 	addi	sp,sp,-12
  80a920:	dfc00215 	stw	ra,8(sp)
  80a924:	df000115 	stw	fp,4(sp)
  80a928:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a92c:	00802074 	movhi	r2,129
  80a930:	10801f04 	addi	r2,r2,124
  80a934:	10800017 	ldw	r2,0(r2)
  80a938:	1005003a 	cmpeq	r2,r2,zero
  80a93c:	1000061e 	bne	r2,zero,80a958 <alt_get_errno+0x3c>
  80a940:	00802074 	movhi	r2,129
  80a944:	10801f04 	addi	r2,r2,124
  80a948:	10800017 	ldw	r2,0(r2)
  80a94c:	103ee83a 	callr	r2
  80a950:	e0bfff15 	stw	r2,-4(fp)
  80a954:	00000306 	br	80a964 <alt_get_errno+0x48>
  80a958:	00802074 	movhi	r2,129
  80a95c:	10870c04 	addi	r2,r2,7216
  80a960:	e0bfff15 	stw	r2,-4(fp)
  80a964:	e0bfff17 	ldw	r2,-4(fp)
}
  80a968:	e037883a 	mov	sp,fp
  80a96c:	dfc00117 	ldw	ra,4(sp)
  80a970:	df000017 	ldw	fp,0(sp)
  80a974:	dec00204 	addi	sp,sp,8
  80a978:	f800283a 	ret

0080a97c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80a97c:	defffd04 	addi	sp,sp,-12
  80a980:	dfc00215 	stw	ra,8(sp)
  80a984:	df000115 	stw	fp,4(sp)
  80a988:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80a98c:	0009883a 	mov	r4,zero
  80a990:	080b0180 	call	80b018 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80a994:	080b04c0 	call	80b04c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80a998:	01002074 	movhi	r4,129
  80a99c:	21389104 	addi	r4,r4,-7612
  80a9a0:	01402074 	movhi	r5,129
  80a9a4:	29789104 	addi	r5,r5,-7612
  80a9a8:	01802074 	movhi	r6,129
  80a9ac:	31b89604 	addi	r6,r6,-7592
  80a9b0:	080d34c0 	call	80d34c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80a9b4:	080cec40 	call	80cec4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80a9b8:	01002074 	movhi	r4,129
  80a9bc:	2133ca04 	addi	r4,r4,-12504
  80a9c0:	080d9a40 	call	80d9a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80a9c4:	d1270317 	ldw	r4,-25588(gp)
  80a9c8:	d1670417 	ldw	r5,-25584(gp)
  80a9cc:	d1a70517 	ldw	r6,-25580(gp)
  80a9d0:	080059c0 	call	80059c <main>
  80a9d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80a9d8:	01000044 	movi	r4,1
  80a9dc:	080a1480 	call	80a148 <close>
  exit (result);
  80a9e0:	e13fff17 	ldw	r4,-4(fp)
  80a9e4:	080d9b80 	call	80d9b8 <exit>

0080a9e8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80a9e8:	defffe04 	addi	sp,sp,-8
  80a9ec:	df000115 	stw	fp,4(sp)
  80a9f0:	df000104 	addi	fp,sp,4
  80a9f4:	e13fff15 	stw	r4,-4(fp)
}
  80a9f8:	e037883a 	mov	sp,fp
  80a9fc:	df000017 	ldw	fp,0(sp)
  80aa00:	dec00104 	addi	sp,sp,4
  80aa04:	f800283a 	ret

0080aa08 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80aa08:	defffe04 	addi	sp,sp,-8
  80aa0c:	df000115 	stw	fp,4(sp)
  80aa10:	df000104 	addi	fp,sp,4
  80aa14:	e13fff15 	stw	r4,-4(fp)
}
  80aa18:	e037883a 	mov	sp,fp
  80aa1c:	df000017 	ldw	fp,0(sp)
  80aa20:	dec00104 	addi	sp,sp,4
  80aa24:	f800283a 	ret

0080aa28 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80aa28:	defff704 	addi	sp,sp,-36
  80aa2c:	dfc00815 	stw	ra,32(sp)
  80aa30:	df000715 	stw	fp,28(sp)
  80aa34:	df000704 	addi	fp,sp,28
  80aa38:	e13ffb15 	stw	r4,-20(fp)
  80aa3c:	e17ffc15 	stw	r5,-16(fp)
  80aa40:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80aa44:	e0bffb17 	ldw	r2,-20(fp)
  80aa48:	1004803a 	cmplt	r2,r2,zero
  80aa4c:	1000081e 	bne	r2,zero,80aa70 <read+0x48>
  80aa50:	e0bffb17 	ldw	r2,-20(fp)
  80aa54:	10800324 	muli	r2,r2,12
  80aa58:	1007883a 	mov	r3,r2
  80aa5c:	00802074 	movhi	r2,129
  80aa60:	10bb5404 	addi	r2,r2,-4784
  80aa64:	1887883a 	add	r3,r3,r2
  80aa68:	e0ffff15 	stw	r3,-4(fp)
  80aa6c:	00000106 	br	80aa74 <read+0x4c>
  80aa70:	e03fff15 	stw	zero,-4(fp)
  80aa74:	e0bfff17 	ldw	r2,-4(fp)
  80aa78:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80aa7c:	e0bffa17 	ldw	r2,-24(fp)
  80aa80:	1005003a 	cmpeq	r2,r2,zero
  80aa84:	1000241e 	bne	r2,zero,80ab18 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80aa88:	e0bffa17 	ldw	r2,-24(fp)
  80aa8c:	10800217 	ldw	r2,8(r2)
  80aa90:	108000cc 	andi	r2,r2,3
  80aa94:	10800060 	cmpeqi	r2,r2,1
  80aa98:	10001a1e 	bne	r2,zero,80ab04 <read+0xdc>
  80aa9c:	e0bffa17 	ldw	r2,-24(fp)
  80aaa0:	10800017 	ldw	r2,0(r2)
  80aaa4:	10800517 	ldw	r2,20(r2)
  80aaa8:	1005003a 	cmpeq	r2,r2,zero
  80aaac:	1000151e 	bne	r2,zero,80ab04 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80aab0:	e0bffa17 	ldw	r2,-24(fp)
  80aab4:	10800017 	ldw	r2,0(r2)
  80aab8:	10800517 	ldw	r2,20(r2)
  80aabc:	e17ffc17 	ldw	r5,-16(fp)
  80aac0:	e1bffd17 	ldw	r6,-12(fp)
  80aac4:	e13ffa17 	ldw	r4,-24(fp)
  80aac8:	103ee83a 	callr	r2
  80aacc:	e0bff915 	stw	r2,-28(fp)
  80aad0:	e0bff917 	ldw	r2,-28(fp)
  80aad4:	1004403a 	cmpge	r2,r2,zero
  80aad8:	1000071e 	bne	r2,zero,80aaf8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80aadc:	080ab480 	call	80ab48 <alt_get_errno>
  80aae0:	e0fff917 	ldw	r3,-28(fp)
  80aae4:	00c7c83a 	sub	r3,zero,r3
  80aae8:	10c00015 	stw	r3,0(r2)
          return -1;
  80aaec:	00bfffc4 	movi	r2,-1
  80aaf0:	e0bffe15 	stw	r2,-8(fp)
  80aaf4:	00000e06 	br	80ab30 <read+0x108>
        }
        return rval;
  80aaf8:	e0bff917 	ldw	r2,-28(fp)
  80aafc:	e0bffe15 	stw	r2,-8(fp)
  80ab00:	00000b06 	br	80ab30 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80ab04:	080ab480 	call	80ab48 <alt_get_errno>
  80ab08:	1007883a 	mov	r3,r2
  80ab0c:	00800344 	movi	r2,13
  80ab10:	18800015 	stw	r2,0(r3)
  80ab14:	00000406 	br	80ab28 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80ab18:	080ab480 	call	80ab48 <alt_get_errno>
  80ab1c:	1007883a 	mov	r3,r2
  80ab20:	00801444 	movi	r2,81
  80ab24:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80ab28:	00bfffc4 	movi	r2,-1
  80ab2c:	e0bffe15 	stw	r2,-8(fp)
  80ab30:	e0bffe17 	ldw	r2,-8(fp)
}
  80ab34:	e037883a 	mov	sp,fp
  80ab38:	dfc00117 	ldw	ra,4(sp)
  80ab3c:	df000017 	ldw	fp,0(sp)
  80ab40:	dec00204 	addi	sp,sp,8
  80ab44:	f800283a 	ret

0080ab48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ab48:	defffd04 	addi	sp,sp,-12
  80ab4c:	dfc00215 	stw	ra,8(sp)
  80ab50:	df000115 	stw	fp,4(sp)
  80ab54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ab58:	00802074 	movhi	r2,129
  80ab5c:	10801f04 	addi	r2,r2,124
  80ab60:	10800017 	ldw	r2,0(r2)
  80ab64:	1005003a 	cmpeq	r2,r2,zero
  80ab68:	1000061e 	bne	r2,zero,80ab84 <alt_get_errno+0x3c>
  80ab6c:	00802074 	movhi	r2,129
  80ab70:	10801f04 	addi	r2,r2,124
  80ab74:	10800017 	ldw	r2,0(r2)
  80ab78:	103ee83a 	callr	r2
  80ab7c:	e0bfff15 	stw	r2,-4(fp)
  80ab80:	00000306 	br	80ab90 <alt_get_errno+0x48>
  80ab84:	00802074 	movhi	r2,129
  80ab88:	10870c04 	addi	r2,r2,7216
  80ab8c:	e0bfff15 	stw	r2,-4(fp)
  80ab90:	e0bfff17 	ldw	r2,-4(fp)
}
  80ab94:	e037883a 	mov	sp,fp
  80ab98:	dfc00117 	ldw	ra,4(sp)
  80ab9c:	df000017 	ldw	fp,0(sp)
  80aba0:	dec00204 	addi	sp,sp,8
  80aba4:	f800283a 	ret

0080aba8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80aba8:	defffe04 	addi	sp,sp,-8
  80abac:	df000115 	stw	fp,4(sp)
  80abb0:	df000104 	addi	fp,sp,4
  80abb4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80abb8:	e0bfff17 	ldw	r2,-4(fp)
  80abbc:	108000d0 	cmplti	r2,r2,3
  80abc0:	10000d1e 	bne	r2,zero,80abf8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80abc4:	e0bfff17 	ldw	r2,-4(fp)
  80abc8:	00c02074 	movhi	r3,129
  80abcc:	18fb5404 	addi	r3,r3,-4784
  80abd0:	10800324 	muli	r2,r2,12
  80abd4:	10c5883a 	add	r2,r2,r3
  80abd8:	10800204 	addi	r2,r2,8
  80abdc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80abe0:	e0bfff17 	ldw	r2,-4(fp)
  80abe4:	00c02074 	movhi	r3,129
  80abe8:	18fb5404 	addi	r3,r3,-4784
  80abec:	10800324 	muli	r2,r2,12
  80abf0:	10c5883a 	add	r2,r2,r3
  80abf4:	10000015 	stw	zero,0(r2)
  }
}
  80abf8:	e037883a 	mov	sp,fp
  80abfc:	df000017 	ldw	fp,0(sp)
  80ac00:	dec00104 	addi	sp,sp,4
  80ac04:	f800283a 	ret

0080ac08 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80ac08:	defff804 	addi	sp,sp,-32
  80ac0c:	df000715 	stw	fp,28(sp)
  80ac10:	df000704 	addi	fp,sp,28
  80ac14:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ac18:	0005303a 	rdctl	r2,status
  80ac1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ac20:	e0fffb17 	ldw	r3,-20(fp)
  80ac24:	00bfff84 	movi	r2,-2
  80ac28:	1884703a 	and	r2,r3,r2
  80ac2c:	1001703a 	wrctl	status,r2
  
  return context;
  80ac30:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80ac34:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80ac38:	d0a00c17 	ldw	r2,-32720(gp)
  80ac3c:	10c000c4 	addi	r3,r2,3
  80ac40:	00bfff04 	movi	r2,-4
  80ac44:	1884703a 	and	r2,r3,r2
  80ac48:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80ac4c:	d0e00c17 	ldw	r3,-32720(gp)
  80ac50:	e0bffe17 	ldw	r2,-8(fp)
  80ac54:	1887883a 	add	r3,r3,r2
  80ac58:	00804034 	movhi	r2,256
  80ac5c:	10800004 	addi	r2,r2,0
  80ac60:	10c0072e 	bgeu	r2,r3,80ac80 <sbrk+0x78>
  80ac64:	e0bffd17 	ldw	r2,-12(fp)
  80ac68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ac6c:	e0bffa17 	ldw	r2,-24(fp)
  80ac70:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80ac74:	00bfffc4 	movi	r2,-1
  80ac78:	e0bfff15 	stw	r2,-4(fp)
  80ac7c:	00000c06 	br	80acb0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80ac80:	d0a00c17 	ldw	r2,-32720(gp)
  80ac84:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80ac88:	d0e00c17 	ldw	r3,-32720(gp)
  80ac8c:	e0bffe17 	ldw	r2,-8(fp)
  80ac90:	1885883a 	add	r2,r3,r2
  80ac94:	d0a00c15 	stw	r2,-32720(gp)
  80ac98:	e0bffd17 	ldw	r2,-12(fp)
  80ac9c:	e0bff915 	stw	r2,-28(fp)
  80aca0:	e0bff917 	ldw	r2,-28(fp)
  80aca4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80aca8:	e0bffc17 	ldw	r2,-16(fp)
  80acac:	e0bfff15 	stw	r2,-4(fp)
  80acb0:	e0bfff17 	ldw	r2,-4(fp)
} 
  80acb4:	e037883a 	mov	sp,fp
  80acb8:	df000017 	ldw	fp,0(sp)
  80acbc:	dec00104 	addi	sp,sp,4
  80acc0:	f800283a 	ret

0080acc4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80acc4:	defffa04 	addi	sp,sp,-24
  80acc8:	df000515 	stw	fp,20(sp)
  80accc:	df000504 	addi	fp,sp,20
  80acd0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80acd4:	0005303a 	rdctl	r2,status
  80acd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80acdc:	e0fffd17 	ldw	r3,-12(fp)
  80ace0:	00bfff84 	movi	r2,-2
  80ace4:	1884703a 	and	r2,r3,r2
  80ace8:	1001703a 	wrctl	status,r2
  
  return context;
  80acec:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80acf0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80acf4:	e0bfff17 	ldw	r2,-4(fp)
  80acf8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80acfc:	e0bffc17 	ldw	r2,-16(fp)
  80ad00:	10c00017 	ldw	r3,0(r2)
  80ad04:	e0bffc17 	ldw	r2,-16(fp)
  80ad08:	10800117 	ldw	r2,4(r2)
  80ad0c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80ad10:	e0bffc17 	ldw	r2,-16(fp)
  80ad14:	10c00117 	ldw	r3,4(r2)
  80ad18:	e0bffc17 	ldw	r2,-16(fp)
  80ad1c:	10800017 	ldw	r2,0(r2)
  80ad20:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80ad24:	e0fffc17 	ldw	r3,-16(fp)
  80ad28:	e0bffc17 	ldw	r2,-16(fp)
  80ad2c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80ad30:	e0fffc17 	ldw	r3,-16(fp)
  80ad34:	e0bffc17 	ldw	r2,-16(fp)
  80ad38:	18800015 	stw	r2,0(r3)
  80ad3c:	e0bffe17 	ldw	r2,-8(fp)
  80ad40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ad44:	e0bffb17 	ldw	r2,-20(fp)
  80ad48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80ad4c:	e037883a 	mov	sp,fp
  80ad50:	df000017 	ldw	fp,0(sp)
  80ad54:	dec00104 	addi	sp,sp,4
  80ad58:	f800283a 	ret

0080ad5c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80ad5c:	defffb04 	addi	sp,sp,-20
  80ad60:	dfc00415 	stw	ra,16(sp)
  80ad64:	df000315 	stw	fp,12(sp)
  80ad68:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80ad6c:	d0a00d17 	ldw	r2,-32716(gp)
  80ad70:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80ad74:	d0a70717 	ldw	r2,-25572(gp)
  80ad78:	10800044 	addi	r2,r2,1
  80ad7c:	d0a70715 	stw	r2,-25572(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80ad80:	00003106 	br	80ae48 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80ad84:	e0bffe17 	ldw	r2,-8(fp)
  80ad88:	10800017 	ldw	r2,0(r2)
  80ad8c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80ad90:	e0bffe17 	ldw	r2,-8(fp)
  80ad94:	10800403 	ldbu	r2,16(r2)
  80ad98:	10803fcc 	andi	r2,r2,255
  80ad9c:	1005003a 	cmpeq	r2,r2,zero
  80ada0:	1000051e 	bne	r2,zero,80adb8 <alt_tick+0x5c>
  80ada4:	d0a70717 	ldw	r2,-25572(gp)
  80ada8:	1004c03a 	cmpne	r2,r2,zero
  80adac:	1000021e 	bne	r2,zero,80adb8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80adb0:	e0bffe17 	ldw	r2,-8(fp)
  80adb4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80adb8:	e0bffe17 	ldw	r2,-8(fp)
  80adbc:	10c00217 	ldw	r3,8(r2)
  80adc0:	d0a70717 	ldw	r2,-25572(gp)
  80adc4:	10c01e36 	bltu	r2,r3,80ae40 <alt_tick+0xe4>
  80adc8:	e0bffe17 	ldw	r2,-8(fp)
  80adcc:	10800403 	ldbu	r2,16(r2)
  80add0:	10803fcc 	andi	r2,r2,255
  80add4:	1004c03a 	cmpne	r2,r2,zero
  80add8:	1000191e 	bne	r2,zero,80ae40 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80addc:	e0bffe17 	ldw	r2,-8(fp)
  80ade0:	10c00317 	ldw	r3,12(r2)
  80ade4:	e0bffe17 	ldw	r2,-8(fp)
  80ade8:	11000517 	ldw	r4,20(r2)
  80adec:	183ee83a 	callr	r3
  80adf0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80adf4:	e0bffd17 	ldw	r2,-12(fp)
  80adf8:	1004c03a 	cmpne	r2,r2,zero
  80adfc:	1000031e 	bne	r2,zero,80ae0c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80ae00:	e13ffe17 	ldw	r4,-8(fp)
  80ae04:	080acc40 	call	80acc4 <alt_alarm_stop>
  80ae08:	00000d06 	br	80ae40 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80ae0c:	e0bffe17 	ldw	r2,-8(fp)
  80ae10:	10c00217 	ldw	r3,8(r2)
  80ae14:	e0bffd17 	ldw	r2,-12(fp)
  80ae18:	1887883a 	add	r3,r3,r2
  80ae1c:	e0bffe17 	ldw	r2,-8(fp)
  80ae20:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80ae24:	e0bffe17 	ldw	r2,-8(fp)
  80ae28:	10c00217 	ldw	r3,8(r2)
  80ae2c:	d0a70717 	ldw	r2,-25572(gp)
  80ae30:	1880032e 	bgeu	r3,r2,80ae40 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80ae34:	e0fffe17 	ldw	r3,-8(fp)
  80ae38:	00800044 	movi	r2,1
  80ae3c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80ae40:	e0bfff17 	ldw	r2,-4(fp)
  80ae44:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80ae48:	d0e00d04 	addi	r3,gp,-32716
  80ae4c:	e0bffe17 	ldw	r2,-8(fp)
  80ae50:	10ffcc1e 	bne	r2,r3,80ad84 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80ae54:	e037883a 	mov	sp,fp
  80ae58:	dfc00117 	ldw	ra,4(sp)
  80ae5c:	df000017 	ldw	fp,0(sp)
  80ae60:	dec00204 	addi	sp,sp,8
  80ae64:	f800283a 	ret

0080ae68 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80ae68:	defffd04 	addi	sp,sp,-12
  80ae6c:	dfc00215 	stw	ra,8(sp)
  80ae70:	df000115 	stw	fp,4(sp)
  80ae74:	df000104 	addi	fp,sp,4
  80ae78:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80ae7c:	e13fff17 	ldw	r4,-4(fp)
  80ae80:	080cc200 	call	80cc20 <alt_busy_sleep>
}
  80ae84:	e037883a 	mov	sp,fp
  80ae88:	dfc00117 	ldw	ra,4(sp)
  80ae8c:	df000017 	ldw	fp,0(sp)
  80ae90:	dec00204 	addi	sp,sp,8
  80ae94:	f800283a 	ret

0080ae98 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80ae98:	defff704 	addi	sp,sp,-36
  80ae9c:	dfc00815 	stw	ra,32(sp)
  80aea0:	df000715 	stw	fp,28(sp)
  80aea4:	df000704 	addi	fp,sp,28
  80aea8:	e13ffb15 	stw	r4,-20(fp)
  80aeac:	e17ffc15 	stw	r5,-16(fp)
  80aeb0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80aeb4:	e0bffb17 	ldw	r2,-20(fp)
  80aeb8:	1004803a 	cmplt	r2,r2,zero
  80aebc:	1000081e 	bne	r2,zero,80aee0 <write+0x48>
  80aec0:	e0bffb17 	ldw	r2,-20(fp)
  80aec4:	10800324 	muli	r2,r2,12
  80aec8:	1007883a 	mov	r3,r2
  80aecc:	00802074 	movhi	r2,129
  80aed0:	10bb5404 	addi	r2,r2,-4784
  80aed4:	1887883a 	add	r3,r3,r2
  80aed8:	e0ffff15 	stw	r3,-4(fp)
  80aedc:	00000106 	br	80aee4 <write+0x4c>
  80aee0:	e03fff15 	stw	zero,-4(fp)
  80aee4:	e0bfff17 	ldw	r2,-4(fp)
  80aee8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80aeec:	e0bffa17 	ldw	r2,-24(fp)
  80aef0:	1005003a 	cmpeq	r2,r2,zero
  80aef4:	1000241e 	bne	r2,zero,80af88 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80aef8:	e0bffa17 	ldw	r2,-24(fp)
  80aefc:	10800217 	ldw	r2,8(r2)
  80af00:	108000cc 	andi	r2,r2,3
  80af04:	1005003a 	cmpeq	r2,r2,zero
  80af08:	10001a1e 	bne	r2,zero,80af74 <write+0xdc>
  80af0c:	e0bffa17 	ldw	r2,-24(fp)
  80af10:	10800017 	ldw	r2,0(r2)
  80af14:	10800617 	ldw	r2,24(r2)
  80af18:	1005003a 	cmpeq	r2,r2,zero
  80af1c:	1000151e 	bne	r2,zero,80af74 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80af20:	e0bffa17 	ldw	r2,-24(fp)
  80af24:	10800017 	ldw	r2,0(r2)
  80af28:	10800617 	ldw	r2,24(r2)
  80af2c:	e17ffc17 	ldw	r5,-16(fp)
  80af30:	e1bffd17 	ldw	r6,-12(fp)
  80af34:	e13ffa17 	ldw	r4,-24(fp)
  80af38:	103ee83a 	callr	r2
  80af3c:	e0bff915 	stw	r2,-28(fp)
  80af40:	e0bff917 	ldw	r2,-28(fp)
  80af44:	1004403a 	cmpge	r2,r2,zero
  80af48:	1000071e 	bne	r2,zero,80af68 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80af4c:	080afb80 	call	80afb8 <alt_get_errno>
  80af50:	e0fff917 	ldw	r3,-28(fp)
  80af54:	00c7c83a 	sub	r3,zero,r3
  80af58:	10c00015 	stw	r3,0(r2)
        return -1;
  80af5c:	00bfffc4 	movi	r2,-1
  80af60:	e0bffe15 	stw	r2,-8(fp)
  80af64:	00000e06 	br	80afa0 <write+0x108>
      }
      return rval;
  80af68:	e0bff917 	ldw	r2,-28(fp)
  80af6c:	e0bffe15 	stw	r2,-8(fp)
  80af70:	00000b06 	br	80afa0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80af74:	080afb80 	call	80afb8 <alt_get_errno>
  80af78:	1007883a 	mov	r3,r2
  80af7c:	00800344 	movi	r2,13
  80af80:	18800015 	stw	r2,0(r3)
  80af84:	00000406 	br	80af98 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80af88:	080afb80 	call	80afb8 <alt_get_errno>
  80af8c:	1007883a 	mov	r3,r2
  80af90:	00801444 	movi	r2,81
  80af94:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80af98:	00bfffc4 	movi	r2,-1
  80af9c:	e0bffe15 	stw	r2,-8(fp)
  80afa0:	e0bffe17 	ldw	r2,-8(fp)
}
  80afa4:	e037883a 	mov	sp,fp
  80afa8:	dfc00117 	ldw	ra,4(sp)
  80afac:	df000017 	ldw	fp,0(sp)
  80afb0:	dec00204 	addi	sp,sp,8
  80afb4:	f800283a 	ret

0080afb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80afb8:	defffd04 	addi	sp,sp,-12
  80afbc:	dfc00215 	stw	ra,8(sp)
  80afc0:	df000115 	stw	fp,4(sp)
  80afc4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80afc8:	00802074 	movhi	r2,129
  80afcc:	10801f04 	addi	r2,r2,124
  80afd0:	10800017 	ldw	r2,0(r2)
  80afd4:	1005003a 	cmpeq	r2,r2,zero
  80afd8:	1000061e 	bne	r2,zero,80aff4 <alt_get_errno+0x3c>
  80afdc:	00802074 	movhi	r2,129
  80afe0:	10801f04 	addi	r2,r2,124
  80afe4:	10800017 	ldw	r2,0(r2)
  80afe8:	103ee83a 	callr	r2
  80afec:	e0bfff15 	stw	r2,-4(fp)
  80aff0:	00000306 	br	80b000 <alt_get_errno+0x48>
  80aff4:	00802074 	movhi	r2,129
  80aff8:	10870c04 	addi	r2,r2,7216
  80affc:	e0bfff15 	stw	r2,-4(fp)
  80b000:	e0bfff17 	ldw	r2,-4(fp)
}
  80b004:	e037883a 	mov	sp,fp
  80b008:	dfc00117 	ldw	ra,4(sp)
  80b00c:	df000017 	ldw	fp,0(sp)
  80b010:	dec00204 	addi	sp,sp,8
  80b014:	f800283a 	ret

0080b018 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80b018:	defffd04 	addi	sp,sp,-12
  80b01c:	dfc00215 	stw	ra,8(sp)
  80b020:	df000115 	stw	fp,4(sp)
  80b024:	df000104 	addi	fp,sp,4
  80b028:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
  80b02c:	080d6880 	call	80d688 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80b030:	00800044 	movi	r2,1
  80b034:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80b038:	e037883a 	mov	sp,fp
  80b03c:	dfc00117 	ldw	ra,4(sp)
  80b040:	df000017 	ldw	fp,0(sp)
  80b044:	dec00204 	addi	sp,sp,8
  80b048:	f800283a 	ret

0080b04c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80b04c:	defffe04 	addi	sp,sp,-8
  80b050:	dfc00115 	stw	ra,4(sp)
  80b054:	df000015 	stw	fp,0(sp)
  80b058:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80b05c:	01002074 	movhi	r4,129
  80b060:	213bbe04 	addi	r4,r4,-4360
  80b064:	000b883a 	mov	r5,zero
  80b068:	000d883a 	mov	r6,zero
  80b06c:	080b2280 	call	80b228 <altera_avalon_jtag_uart_init>
  80b070:	01002074 	movhi	r4,129
  80b074:	213bb404 	addi	r4,r4,-4400
  80b078:	080b0a80 	call	80b0a8 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_0, lcd_0);
  80b07c:	01002074 	movhi	r4,129
  80b080:	213fd604 	addi	r4,r4,-168
  80b084:	080c9380 	call	80c938 <altera_avalon_lcd_16207_init>
  80b088:	01002074 	movhi	r4,129
  80b08c:	213fcc04 	addi	r4,r4,-208
  80b090:	080b0a80 	call	80b0a8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
  80b094:	e037883a 	mov	sp,fp
  80b098:	dfc00117 	ldw	ra,4(sp)
  80b09c:	df000017 	ldw	fp,0(sp)
  80b0a0:	dec00204 	addi	sp,sp,8
  80b0a4:	f800283a 	ret

0080b0a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80b0a8:	defffd04 	addi	sp,sp,-12
  80b0ac:	dfc00215 	stw	ra,8(sp)
  80b0b0:	df000115 	stw	fp,4(sp)
  80b0b4:	df000104 	addi	fp,sp,4
  80b0b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80b0bc:	e13fff17 	ldw	r4,-4(fp)
  80b0c0:	01402074 	movhi	r5,129
  80b0c4:	29401c04 	addi	r5,r5,112
  80b0c8:	080cdb00 	call	80cdb0 <alt_dev_llist_insert>
}
  80b0cc:	e037883a 	mov	sp,fp
  80b0d0:	dfc00117 	ldw	ra,4(sp)
  80b0d4:	df000017 	ldw	fp,0(sp)
  80b0d8:	dec00204 	addi	sp,sp,8
  80b0dc:	f800283a 	ret

0080b0e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80b0e0:	defffa04 	addi	sp,sp,-24
  80b0e4:	dfc00515 	stw	ra,20(sp)
  80b0e8:	df000415 	stw	fp,16(sp)
  80b0ec:	df000404 	addi	fp,sp,16
  80b0f0:	e13ffd15 	stw	r4,-12(fp)
  80b0f4:	e17ffe15 	stw	r5,-8(fp)
  80b0f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b0fc:	e0bffd17 	ldw	r2,-12(fp)
  80b100:	10800017 	ldw	r2,0(r2)
  80b104:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80b108:	e0bffc17 	ldw	r2,-16(fp)
  80b10c:	11000a04 	addi	r4,r2,40
  80b110:	e0bffd17 	ldw	r2,-12(fp)
  80b114:	11c00217 	ldw	r7,8(r2)
  80b118:	e17ffe17 	ldw	r5,-8(fp)
  80b11c:	e1bfff17 	ldw	r6,-4(fp)
  80b120:	080b7280 	call	80b728 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80b124:	e037883a 	mov	sp,fp
  80b128:	dfc00117 	ldw	ra,4(sp)
  80b12c:	df000017 	ldw	fp,0(sp)
  80b130:	dec00204 	addi	sp,sp,8
  80b134:	f800283a 	ret

0080b138 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80b138:	defffa04 	addi	sp,sp,-24
  80b13c:	dfc00515 	stw	ra,20(sp)
  80b140:	df000415 	stw	fp,16(sp)
  80b144:	df000404 	addi	fp,sp,16
  80b148:	e13ffd15 	stw	r4,-12(fp)
  80b14c:	e17ffe15 	stw	r5,-8(fp)
  80b150:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b154:	e0bffd17 	ldw	r2,-12(fp)
  80b158:	10800017 	ldw	r2,0(r2)
  80b15c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80b160:	e0bffc17 	ldw	r2,-16(fp)
  80b164:	11000a04 	addi	r4,r2,40
  80b168:	e0bffd17 	ldw	r2,-12(fp)
  80b16c:	11c00217 	ldw	r7,8(r2)
  80b170:	e17ffe17 	ldw	r5,-8(fp)
  80b174:	e1bfff17 	ldw	r6,-4(fp)
  80b178:	080b94c0 	call	80b94c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80b17c:	e037883a 	mov	sp,fp
  80b180:	dfc00117 	ldw	ra,4(sp)
  80b184:	df000017 	ldw	fp,0(sp)
  80b188:	dec00204 	addi	sp,sp,8
  80b18c:	f800283a 	ret

0080b190 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80b190:	defffc04 	addi	sp,sp,-16
  80b194:	dfc00315 	stw	ra,12(sp)
  80b198:	df000215 	stw	fp,8(sp)
  80b19c:	df000204 	addi	fp,sp,8
  80b1a0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b1a4:	e0bfff17 	ldw	r2,-4(fp)
  80b1a8:	10800017 	ldw	r2,0(r2)
  80b1ac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80b1b0:	e0bffe17 	ldw	r2,-8(fp)
  80b1b4:	11000a04 	addi	r4,r2,40
  80b1b8:	e0bfff17 	ldw	r2,-4(fp)
  80b1bc:	11400217 	ldw	r5,8(r2)
  80b1c0:	080b5c00 	call	80b5c0 <altera_avalon_jtag_uart_close>
}
  80b1c4:	e037883a 	mov	sp,fp
  80b1c8:	dfc00117 	ldw	ra,4(sp)
  80b1cc:	df000017 	ldw	fp,0(sp)
  80b1d0:	dec00204 	addi	sp,sp,8
  80b1d4:	f800283a 	ret

0080b1d8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80b1d8:	defffa04 	addi	sp,sp,-24
  80b1dc:	dfc00515 	stw	ra,20(sp)
  80b1e0:	df000415 	stw	fp,16(sp)
  80b1e4:	df000404 	addi	fp,sp,16
  80b1e8:	e13ffd15 	stw	r4,-12(fp)
  80b1ec:	e17ffe15 	stw	r5,-8(fp)
  80b1f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80b1f4:	e0bffd17 	ldw	r2,-12(fp)
  80b1f8:	10800017 	ldw	r2,0(r2)
  80b1fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80b200:	e0bffc17 	ldw	r2,-16(fp)
  80b204:	11000a04 	addi	r4,r2,40
  80b208:	e17ffe17 	ldw	r5,-8(fp)
  80b20c:	e1bfff17 	ldw	r6,-4(fp)
  80b210:	080b6340 	call	80b634 <altera_avalon_jtag_uart_ioctl>
}
  80b214:	e037883a 	mov	sp,fp
  80b218:	dfc00117 	ldw	ra,4(sp)
  80b21c:	df000017 	ldw	fp,0(sp)
  80b220:	dec00204 	addi	sp,sp,8
  80b224:	f800283a 	ret

0080b228 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80b228:	defffa04 	addi	sp,sp,-24
  80b22c:	dfc00515 	stw	ra,20(sp)
  80b230:	df000415 	stw	fp,16(sp)
  80b234:	df000404 	addi	fp,sp,16
  80b238:	e13ffd15 	stw	r4,-12(fp)
  80b23c:	e17ffe15 	stw	r5,-8(fp)
  80b240:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b244:	e0fffd17 	ldw	r3,-12(fp)
  80b248:	00800044 	movi	r2,1
  80b24c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80b250:	e0bffd17 	ldw	r2,-12(fp)
  80b254:	10800017 	ldw	r2,0(r2)
  80b258:	11000104 	addi	r4,r2,4
  80b25c:	e0bffd17 	ldw	r2,-12(fp)
  80b260:	10800817 	ldw	r2,32(r2)
  80b264:	1007883a 	mov	r3,r2
  80b268:	2005883a 	mov	r2,r4
  80b26c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80b270:	e13ffe17 	ldw	r4,-8(fp)
  80b274:	e17fff17 	ldw	r5,-4(fp)
  80b278:	d8000015 	stw	zero,0(sp)
  80b27c:	01802074 	movhi	r6,129
  80b280:	31acba04 	addi	r6,r6,-19736
  80b284:	e1fffd17 	ldw	r7,-12(fp)
  80b288:	080cfbc0 	call	80cfbc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80b28c:	e0bffd17 	ldw	r2,-12(fp)
  80b290:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80b294:	e0bffd17 	ldw	r2,-12(fp)
  80b298:	11000204 	addi	r4,r2,8
  80b29c:	00802074 	movhi	r2,129
  80b2a0:	10871a04 	addi	r2,r2,7272
  80b2a4:	10800017 	ldw	r2,0(r2)
  80b2a8:	100b883a 	mov	r5,r2
  80b2ac:	01802074 	movhi	r6,129
  80b2b0:	31ad4404 	addi	r6,r6,-19184
  80b2b4:	e1fffd17 	ldw	r7,-12(fp)
  80b2b8:	080cacc0 	call	80cacc <alt_alarm_start>
  80b2bc:	1004403a 	cmpge	r2,r2,zero
  80b2c0:	1000041e 	bne	r2,zero,80b2d4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80b2c4:	e0fffd17 	ldw	r3,-12(fp)
  80b2c8:	00a00034 	movhi	r2,32768
  80b2cc:	10bfffc4 	addi	r2,r2,-1
  80b2d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80b2d4:	e037883a 	mov	sp,fp
  80b2d8:	dfc00117 	ldw	ra,4(sp)
  80b2dc:	df000017 	ldw	fp,0(sp)
  80b2e0:	dec00204 	addi	sp,sp,8
  80b2e4:	f800283a 	ret

0080b2e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80b2e8:	defff804 	addi	sp,sp,-32
  80b2ec:	df000715 	stw	fp,28(sp)
  80b2f0:	df000704 	addi	fp,sp,28
  80b2f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80b2f8:	e0bfff17 	ldw	r2,-4(fp)
  80b2fc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80b300:	e0bffe17 	ldw	r2,-8(fp)
  80b304:	10800017 	ldw	r2,0(r2)
  80b308:	e0bffd15 	stw	r2,-12(fp)
  80b30c:	00000006 	br	80b310 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b310:	e0bffd17 	ldw	r2,-12(fp)
  80b314:	10800104 	addi	r2,r2,4
  80b318:	10800037 	ldwio	r2,0(r2)
  80b31c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80b320:	e0bffc17 	ldw	r2,-16(fp)
  80b324:	1080c00c 	andi	r2,r2,768
  80b328:	1005003a 	cmpeq	r2,r2,zero
  80b32c:	1000741e 	bne	r2,zero,80b500 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80b330:	e0bffc17 	ldw	r2,-16(fp)
  80b334:	1080400c 	andi	r2,r2,256
  80b338:	1005003a 	cmpeq	r2,r2,zero
  80b33c:	1000351e 	bne	r2,zero,80b414 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80b340:	00800074 	movhi	r2,1
  80b344:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b348:	e0bffe17 	ldw	r2,-8(fp)
  80b34c:	10800a17 	ldw	r2,40(r2)
  80b350:	10800044 	addi	r2,r2,1
  80b354:	1081ffcc 	andi	r2,r2,2047
  80b358:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80b35c:	e0bffe17 	ldw	r2,-8(fp)
  80b360:	10c00b17 	ldw	r3,44(r2)
  80b364:	e0bffa17 	ldw	r2,-24(fp)
  80b368:	18801626 	beq	r3,r2,80b3c4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80b36c:	e0bffd17 	ldw	r2,-12(fp)
  80b370:	10800037 	ldwio	r2,0(r2)
  80b374:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80b378:	e0bffb17 	ldw	r2,-20(fp)
  80b37c:	10a0000c 	andi	r2,r2,32768
  80b380:	1005003a 	cmpeq	r2,r2,zero
  80b384:	10000f1e 	bne	r2,zero,80b3c4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80b388:	e0bffe17 	ldw	r2,-8(fp)
  80b38c:	10c00a17 	ldw	r3,40(r2)
  80b390:	e0bffb17 	ldw	r2,-20(fp)
  80b394:	1009883a 	mov	r4,r2
  80b398:	e0bffe17 	ldw	r2,-8(fp)
  80b39c:	1885883a 	add	r2,r3,r2
  80b3a0:	10800e04 	addi	r2,r2,56
  80b3a4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b3a8:	e0bffe17 	ldw	r2,-8(fp)
  80b3ac:	10800a17 	ldw	r2,40(r2)
  80b3b0:	10800044 	addi	r2,r2,1
  80b3b4:	10c1ffcc 	andi	r3,r2,2047
  80b3b8:	e0bffe17 	ldw	r2,-8(fp)
  80b3bc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80b3c0:	003fe106 	br	80b348 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80b3c4:	e0bffb17 	ldw	r2,-20(fp)
  80b3c8:	10bfffec 	andhi	r2,r2,65535
  80b3cc:	1005003a 	cmpeq	r2,r2,zero
  80b3d0:	1000101e 	bne	r2,zero,80b414 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b3d4:	e0bffe17 	ldw	r2,-8(fp)
  80b3d8:	10c00817 	ldw	r3,32(r2)
  80b3dc:	00bfff84 	movi	r2,-2
  80b3e0:	1886703a 	and	r3,r3,r2
  80b3e4:	e0bffe17 	ldw	r2,-8(fp)
  80b3e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80b3ec:	e0bffd17 	ldw	r2,-12(fp)
  80b3f0:	11000104 	addi	r4,r2,4
  80b3f4:	e0bffe17 	ldw	r2,-8(fp)
  80b3f8:	10800817 	ldw	r2,32(r2)
  80b3fc:	1007883a 	mov	r3,r2
  80b400:	2005883a 	mov	r2,r4
  80b404:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b408:	e0bffd17 	ldw	r2,-12(fp)
  80b40c:	10800104 	addi	r2,r2,4
  80b410:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80b414:	e0bffc17 	ldw	r2,-16(fp)
  80b418:	1080800c 	andi	r2,r2,512
  80b41c:	1005003a 	cmpeq	r2,r2,zero
  80b420:	103fbb1e 	bne	r2,zero,80b310 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80b424:	e0bffc17 	ldw	r2,-16(fp)
  80b428:	10bfffec 	andhi	r2,r2,65535
  80b42c:	1004d43a 	srli	r2,r2,16
  80b430:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80b434:	00001506 	br	80b48c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80b438:	e13ffd17 	ldw	r4,-12(fp)
  80b43c:	e0bffe17 	ldw	r2,-8(fp)
  80b440:	10c00d17 	ldw	r3,52(r2)
  80b444:	e0bffe17 	ldw	r2,-8(fp)
  80b448:	1885883a 	add	r2,r3,r2
  80b44c:	10820e04 	addi	r2,r2,2104
  80b450:	10800003 	ldbu	r2,0(r2)
  80b454:	10c03fcc 	andi	r3,r2,255
  80b458:	18c0201c 	xori	r3,r3,128
  80b45c:	18ffe004 	addi	r3,r3,-128
  80b460:	2005883a 	mov	r2,r4
  80b464:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b468:	e0bffe17 	ldw	r2,-8(fp)
  80b46c:	10800d17 	ldw	r2,52(r2)
  80b470:	10800044 	addi	r2,r2,1
  80b474:	10c1ffcc 	andi	r3,r2,2047
  80b478:	e0bffe17 	ldw	r2,-8(fp)
  80b47c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80b480:	e0bff917 	ldw	r2,-28(fp)
  80b484:	10bfffc4 	addi	r2,r2,-1
  80b488:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80b48c:	e0bff917 	ldw	r2,-28(fp)
  80b490:	1005003a 	cmpeq	r2,r2,zero
  80b494:	1000051e 	bne	r2,zero,80b4ac <altera_avalon_jtag_uart_irq+0x1c4>
  80b498:	e0bffe17 	ldw	r2,-8(fp)
  80b49c:	10c00d17 	ldw	r3,52(r2)
  80b4a0:	e0bffe17 	ldw	r2,-8(fp)
  80b4a4:	10800c17 	ldw	r2,48(r2)
  80b4a8:	18bfe31e 	bne	r3,r2,80b438 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80b4ac:	e0bff917 	ldw	r2,-28(fp)
  80b4b0:	1005003a 	cmpeq	r2,r2,zero
  80b4b4:	103f961e 	bne	r2,zero,80b310 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b4b8:	e0bffe17 	ldw	r2,-8(fp)
  80b4bc:	10c00817 	ldw	r3,32(r2)
  80b4c0:	00bfff44 	movi	r2,-3
  80b4c4:	1886703a 	and	r3,r3,r2
  80b4c8:	e0bffe17 	ldw	r2,-8(fp)
  80b4cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b4d0:	e0bffe17 	ldw	r2,-8(fp)
  80b4d4:	10800017 	ldw	r2,0(r2)
  80b4d8:	11000104 	addi	r4,r2,4
  80b4dc:	e0bffe17 	ldw	r2,-8(fp)
  80b4e0:	10800817 	ldw	r2,32(r2)
  80b4e4:	1007883a 	mov	r3,r2
  80b4e8:	2005883a 	mov	r2,r4
  80b4ec:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b4f0:	e0bffd17 	ldw	r2,-12(fp)
  80b4f4:	10800104 	addi	r2,r2,4
  80b4f8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80b4fc:	003f8406 	br	80b310 <altera_avalon_jtag_uart_irq+0x28>
}
  80b500:	e037883a 	mov	sp,fp
  80b504:	df000017 	ldw	fp,0(sp)
  80b508:	dec00104 	addi	sp,sp,4
  80b50c:	f800283a 	ret

0080b510 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80b510:	defffc04 	addi	sp,sp,-16
  80b514:	df000315 	stw	fp,12(sp)
  80b518:	df000304 	addi	fp,sp,12
  80b51c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80b520:	e0bfff17 	ldw	r2,-4(fp)
  80b524:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80b528:	e0bffe17 	ldw	r2,-8(fp)
  80b52c:	10800017 	ldw	r2,0(r2)
  80b530:	10800104 	addi	r2,r2,4
  80b534:	10800037 	ldwio	r2,0(r2)
  80b538:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80b53c:	e0bffd17 	ldw	r2,-12(fp)
  80b540:	1081000c 	andi	r2,r2,1024
  80b544:	1005003a 	cmpeq	r2,r2,zero
  80b548:	10000c1e 	bne	r2,zero,80b57c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80b54c:	e0bffe17 	ldw	r2,-8(fp)
  80b550:	10800017 	ldw	r2,0(r2)
  80b554:	11000104 	addi	r4,r2,4
  80b558:	e0bffe17 	ldw	r2,-8(fp)
  80b55c:	10800817 	ldw	r2,32(r2)
  80b560:	10810014 	ori	r2,r2,1024
  80b564:	1007883a 	mov	r3,r2
  80b568:	2005883a 	mov	r2,r4
  80b56c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80b570:	e0bffe17 	ldw	r2,-8(fp)
  80b574:	10000915 	stw	zero,36(r2)
  80b578:	00000a06 	br	80b5a4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80b57c:	e0bffe17 	ldw	r2,-8(fp)
  80b580:	10c00917 	ldw	r3,36(r2)
  80b584:	00a00034 	movhi	r2,32768
  80b588:	10bfff04 	addi	r2,r2,-4
  80b58c:	10c00536 	bltu	r2,r3,80b5a4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80b590:	e0bffe17 	ldw	r2,-8(fp)
  80b594:	10800917 	ldw	r2,36(r2)
  80b598:	10c00044 	addi	r3,r2,1
  80b59c:	e0bffe17 	ldw	r2,-8(fp)
  80b5a0:	10c00915 	stw	r3,36(r2)
  80b5a4:	00802074 	movhi	r2,129
  80b5a8:	10871a04 	addi	r2,r2,7272
  80b5ac:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80b5b0:	e037883a 	mov	sp,fp
  80b5b4:	df000017 	ldw	fp,0(sp)
  80b5b8:	dec00104 	addi	sp,sp,4
  80b5bc:	f800283a 	ret

0080b5c0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80b5c0:	defffc04 	addi	sp,sp,-16
  80b5c4:	df000315 	stw	fp,12(sp)
  80b5c8:	df000304 	addi	fp,sp,12
  80b5cc:	e13ffd15 	stw	r4,-12(fp)
  80b5d0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b5d4:	00000706 	br	80b5f4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80b5d8:	e0bffe17 	ldw	r2,-8(fp)
  80b5dc:	1090000c 	andi	r2,r2,16384
  80b5e0:	1005003a 	cmpeq	r2,r2,zero
  80b5e4:	1000031e 	bne	r2,zero,80b5f4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80b5e8:	00bffd44 	movi	r2,-11
  80b5ec:	e0bfff15 	stw	r2,-4(fp)
  80b5f0:	00000b06 	br	80b620 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b5f4:	e0bffd17 	ldw	r2,-12(fp)
  80b5f8:	10c00d17 	ldw	r3,52(r2)
  80b5fc:	e0bffd17 	ldw	r2,-12(fp)
  80b600:	10800c17 	ldw	r2,48(r2)
  80b604:	18800526 	beq	r3,r2,80b61c <altera_avalon_jtag_uart_close+0x5c>
  80b608:	e0bffd17 	ldw	r2,-12(fp)
  80b60c:	10c00917 	ldw	r3,36(r2)
  80b610:	e0bffd17 	ldw	r2,-12(fp)
  80b614:	10800117 	ldw	r2,4(r2)
  80b618:	18bfef36 	bltu	r3,r2,80b5d8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80b61c:	e03fff15 	stw	zero,-4(fp)
  80b620:	e0bfff17 	ldw	r2,-4(fp)
}
  80b624:	e037883a 	mov	sp,fp
  80b628:	df000017 	ldw	fp,0(sp)
  80b62c:	dec00104 	addi	sp,sp,4
  80b630:	f800283a 	ret

0080b634 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80b634:	defff804 	addi	sp,sp,-32
  80b638:	df000715 	stw	fp,28(sp)
  80b63c:	df000704 	addi	fp,sp,28
  80b640:	e13ffb15 	stw	r4,-20(fp)
  80b644:	e17ffc15 	stw	r5,-16(fp)
  80b648:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80b64c:	00bff9c4 	movi	r2,-25
  80b650:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80b654:	e0bffc17 	ldw	r2,-16(fp)
  80b658:	e0bfff15 	stw	r2,-4(fp)
  80b65c:	e0ffff17 	ldw	r3,-4(fp)
  80b660:	189a8060 	cmpeqi	r2,r3,27137
  80b664:	1000041e 	bne	r2,zero,80b678 <altera_avalon_jtag_uart_ioctl+0x44>
  80b668:	e0ffff17 	ldw	r3,-4(fp)
  80b66c:	189a80a0 	cmpeqi	r2,r3,27138
  80b670:	10001b1e 	bne	r2,zero,80b6e0 <altera_avalon_jtag_uart_ioctl+0xac>
  80b674:	00002706 	br	80b714 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80b678:	e0bffb17 	ldw	r2,-20(fp)
  80b67c:	10c00117 	ldw	r3,4(r2)
  80b680:	00a00034 	movhi	r2,32768
  80b684:	10bfffc4 	addi	r2,r2,-1
  80b688:	18802226 	beq	r3,r2,80b714 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80b68c:	e0bffd17 	ldw	r2,-12(fp)
  80b690:	10800017 	ldw	r2,0(r2)
  80b694:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80b698:	e0bff917 	ldw	r2,-28(fp)
  80b69c:	10800090 	cmplti	r2,r2,2
  80b6a0:	1000071e 	bne	r2,zero,80b6c0 <altera_avalon_jtag_uart_ioctl+0x8c>
  80b6a4:	e0fff917 	ldw	r3,-28(fp)
  80b6a8:	00a00034 	movhi	r2,32768
  80b6ac:	10bfffc4 	addi	r2,r2,-1
  80b6b0:	18800326 	beq	r3,r2,80b6c0 <altera_avalon_jtag_uart_ioctl+0x8c>
  80b6b4:	e0bff917 	ldw	r2,-28(fp)
  80b6b8:	e0bffe15 	stw	r2,-8(fp)
  80b6bc:	00000306 	br	80b6cc <altera_avalon_jtag_uart_ioctl+0x98>
  80b6c0:	00e00034 	movhi	r3,32768
  80b6c4:	18ffff84 	addi	r3,r3,-2
  80b6c8:	e0fffe15 	stw	r3,-8(fp)
  80b6cc:	e0bffb17 	ldw	r2,-20(fp)
  80b6d0:	e0fffe17 	ldw	r3,-8(fp)
  80b6d4:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80b6d8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80b6dc:	00000d06 	br	80b714 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80b6e0:	e0bffb17 	ldw	r2,-20(fp)
  80b6e4:	10c00117 	ldw	r3,4(r2)
  80b6e8:	00a00034 	movhi	r2,32768
  80b6ec:	10bfffc4 	addi	r2,r2,-1
  80b6f0:	18800826 	beq	r3,r2,80b714 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80b6f4:	e13ffd17 	ldw	r4,-12(fp)
  80b6f8:	e0bffb17 	ldw	r2,-20(fp)
  80b6fc:	10c00917 	ldw	r3,36(r2)
  80b700:	e0bffb17 	ldw	r2,-20(fp)
  80b704:	10800117 	ldw	r2,4(r2)
  80b708:	1885803a 	cmpltu	r2,r3,r2
  80b70c:	20800015 	stw	r2,0(r4)
      rc = 0;
  80b710:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80b714:	e0bffa17 	ldw	r2,-24(fp)
}
  80b718:	e037883a 	mov	sp,fp
  80b71c:	df000017 	ldw	fp,0(sp)
  80b720:	dec00104 	addi	sp,sp,4
  80b724:	f800283a 	ret

0080b728 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80b728:	defff204 	addi	sp,sp,-56
  80b72c:	dfc00d15 	stw	ra,52(sp)
  80b730:	df000c15 	stw	fp,48(sp)
  80b734:	df000c04 	addi	fp,sp,48
  80b738:	e13ffb15 	stw	r4,-20(fp)
  80b73c:	e17ffc15 	stw	r5,-16(fp)
  80b740:	e1bffd15 	stw	r6,-12(fp)
  80b744:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80b748:	e0bffc17 	ldw	r2,-16(fp)
  80b74c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b750:	00004806 	br	80b874 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80b754:	e0bffb17 	ldw	r2,-20(fp)
  80b758:	10800a17 	ldw	r2,40(r2)
  80b75c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80b760:	e0bffb17 	ldw	r2,-20(fp)
  80b764:	10800b17 	ldw	r2,44(r2)
  80b768:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80b76c:	e0fff717 	ldw	r3,-36(fp)
  80b770:	e0bff617 	ldw	r2,-40(fp)
  80b774:	18800536 	bltu	r3,r2,80b78c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80b778:	e0bff717 	ldw	r2,-36(fp)
  80b77c:	e0fff617 	ldw	r3,-40(fp)
  80b780:	10c5c83a 	sub	r2,r2,r3
  80b784:	e0bff815 	stw	r2,-32(fp)
  80b788:	00000406 	br	80b79c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80b78c:	00820004 	movi	r2,2048
  80b790:	e0fff617 	ldw	r3,-40(fp)
  80b794:	10c5c83a 	sub	r2,r2,r3
  80b798:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80b79c:	e0bff817 	ldw	r2,-32(fp)
  80b7a0:	1005003a 	cmpeq	r2,r2,zero
  80b7a4:	10001f1e 	bne	r2,zero,80b824 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80b7a8:	e0fffd17 	ldw	r3,-12(fp)
  80b7ac:	e0bff817 	ldw	r2,-32(fp)
  80b7b0:	1880022e 	bgeu	r3,r2,80b7bc <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80b7b4:	e0bffd17 	ldw	r2,-12(fp)
  80b7b8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80b7bc:	e0bffb17 	ldw	r2,-20(fp)
  80b7c0:	10c00e04 	addi	r3,r2,56
  80b7c4:	e0bff617 	ldw	r2,-40(fp)
  80b7c8:	1887883a 	add	r3,r3,r2
  80b7cc:	e0bffa17 	ldw	r2,-24(fp)
  80b7d0:	1009883a 	mov	r4,r2
  80b7d4:	180b883a 	mov	r5,r3
  80b7d8:	e1bff817 	ldw	r6,-32(fp)
  80b7dc:	08009ec0 	call	8009ec <memcpy>
      ptr   += n;
  80b7e0:	e0fff817 	ldw	r3,-32(fp)
  80b7e4:	e0bffa17 	ldw	r2,-24(fp)
  80b7e8:	10c5883a 	add	r2,r2,r3
  80b7ec:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80b7f0:	e0fffd17 	ldw	r3,-12(fp)
  80b7f4:	e0bff817 	ldw	r2,-32(fp)
  80b7f8:	1885c83a 	sub	r2,r3,r2
  80b7fc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b800:	e0fff617 	ldw	r3,-40(fp)
  80b804:	e0bff817 	ldw	r2,-32(fp)
  80b808:	1885883a 	add	r2,r3,r2
  80b80c:	10c1ffcc 	andi	r3,r2,2047
  80b810:	e0bffb17 	ldw	r2,-20(fp)
  80b814:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80b818:	e0bffd17 	ldw	r2,-12(fp)
  80b81c:	10800048 	cmpgei	r2,r2,1
  80b820:	103fcc1e 	bne	r2,zero,80b754 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80b824:	e0fffa17 	ldw	r3,-24(fp)
  80b828:	e0bffc17 	ldw	r2,-16(fp)
  80b82c:	1880141e 	bne	r3,r2,80b880 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80b830:	e0bffe17 	ldw	r2,-8(fp)
  80b834:	1090000c 	andi	r2,r2,16384
  80b838:	1004c03a 	cmpne	r2,r2,zero
  80b83c:	1000101e 	bne	r2,zero,80b880 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80b840:	e0bffb17 	ldw	r2,-20(fp)
  80b844:	10c00a17 	ldw	r3,40(r2)
  80b848:	e0bff717 	ldw	r2,-36(fp)
  80b84c:	1880051e 	bne	r3,r2,80b864 <altera_avalon_jtag_uart_read+0x13c>
  80b850:	e0bffb17 	ldw	r2,-20(fp)
  80b854:	10c00917 	ldw	r3,36(r2)
  80b858:	e0bffb17 	ldw	r2,-20(fp)
  80b85c:	10800117 	ldw	r2,4(r2)
  80b860:	18bff736 	bltu	r3,r2,80b840 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80b864:	e0bffb17 	ldw	r2,-20(fp)
  80b868:	10c00a17 	ldw	r3,40(r2)
  80b86c:	e0bff717 	ldw	r2,-36(fp)
  80b870:	18800326 	beq	r3,r2,80b880 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b874:	e0bffd17 	ldw	r2,-12(fp)
  80b878:	10800048 	cmpgei	r2,r2,1
  80b87c:	103fb51e 	bne	r2,zero,80b754 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80b880:	e0fffa17 	ldw	r3,-24(fp)
  80b884:	e0bffc17 	ldw	r2,-16(fp)
  80b888:	18801926 	beq	r3,r2,80b8f0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b88c:	0005303a 	rdctl	r2,status
  80b890:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b894:	e0fff517 	ldw	r3,-44(fp)
  80b898:	00bfff84 	movi	r2,-2
  80b89c:	1884703a 	and	r2,r3,r2
  80b8a0:	1001703a 	wrctl	status,r2
  
  return context;
  80b8a4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80b8a8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b8ac:	e0bffb17 	ldw	r2,-20(fp)
  80b8b0:	10800817 	ldw	r2,32(r2)
  80b8b4:	10c00054 	ori	r3,r2,1
  80b8b8:	e0bffb17 	ldw	r2,-20(fp)
  80b8bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b8c0:	e0bffb17 	ldw	r2,-20(fp)
  80b8c4:	10800017 	ldw	r2,0(r2)
  80b8c8:	11000104 	addi	r4,r2,4
  80b8cc:	e0bffb17 	ldw	r2,-20(fp)
  80b8d0:	10800817 	ldw	r2,32(r2)
  80b8d4:	1007883a 	mov	r3,r2
  80b8d8:	2005883a 	mov	r2,r4
  80b8dc:	10c00035 	stwio	r3,0(r2)
  80b8e0:	e0bff917 	ldw	r2,-28(fp)
  80b8e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b8e8:	e0bff417 	ldw	r2,-48(fp)
  80b8ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80b8f0:	e0fffa17 	ldw	r3,-24(fp)
  80b8f4:	e0bffc17 	ldw	r2,-16(fp)
  80b8f8:	18800526 	beq	r3,r2,80b910 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80b8fc:	e0fffa17 	ldw	r3,-24(fp)
  80b900:	e0bffc17 	ldw	r2,-16(fp)
  80b904:	1887c83a 	sub	r3,r3,r2
  80b908:	e0ffff15 	stw	r3,-4(fp)
  80b90c:	00000906 	br	80b934 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80b910:	e0bffe17 	ldw	r2,-8(fp)
  80b914:	1090000c 	andi	r2,r2,16384
  80b918:	1005003a 	cmpeq	r2,r2,zero
  80b91c:	1000031e 	bne	r2,zero,80b92c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80b920:	00bffd44 	movi	r2,-11
  80b924:	e0bfff15 	stw	r2,-4(fp)
  80b928:	00000206 	br	80b934 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80b92c:	00bffec4 	movi	r2,-5
  80b930:	e0bfff15 	stw	r2,-4(fp)
  80b934:	e0bfff17 	ldw	r2,-4(fp)
}
  80b938:	e037883a 	mov	sp,fp
  80b93c:	dfc00117 	ldw	ra,4(sp)
  80b940:	df000017 	ldw	fp,0(sp)
  80b944:	dec00204 	addi	sp,sp,8
  80b948:	f800283a 	ret

0080b94c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80b94c:	defff204 	addi	sp,sp,-56
  80b950:	dfc00d15 	stw	ra,52(sp)
  80b954:	df000c15 	stw	fp,48(sp)
  80b958:	df000c04 	addi	fp,sp,48
  80b95c:	e13ffb15 	stw	r4,-20(fp)
  80b960:	e17ffc15 	stw	r5,-16(fp)
  80b964:	e1bffd15 	stw	r6,-12(fp)
  80b968:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80b96c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80b970:	e0bffc17 	ldw	r2,-16(fp)
  80b974:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80b978:	00003a06 	br	80ba64 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80b97c:	e0bffb17 	ldw	r2,-20(fp)
  80b980:	10800c17 	ldw	r2,48(r2)
  80b984:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80b988:	e0bffb17 	ldw	r2,-20(fp)
  80b98c:	10800d17 	ldw	r2,52(r2)
  80b990:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80b994:	e0fffa17 	ldw	r3,-24(fp)
  80b998:	e0bff917 	ldw	r2,-28(fp)
  80b99c:	1880062e 	bgeu	r3,r2,80b9b8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80b9a0:	e0fff917 	ldw	r3,-28(fp)
  80b9a4:	e0bffa17 	ldw	r2,-24(fp)
  80b9a8:	1885c83a 	sub	r2,r3,r2
  80b9ac:	10bfffc4 	addi	r2,r2,-1
  80b9b0:	e0bff815 	stw	r2,-32(fp)
  80b9b4:	00000c06 	br	80b9e8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80b9b8:	e0bff917 	ldw	r2,-28(fp)
  80b9bc:	1005003a 	cmpeq	r2,r2,zero
  80b9c0:	1000051e 	bne	r2,zero,80b9d8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80b9c4:	00820004 	movi	r2,2048
  80b9c8:	e0fffa17 	ldw	r3,-24(fp)
  80b9cc:	10c5c83a 	sub	r2,r2,r3
  80b9d0:	e0bff815 	stw	r2,-32(fp)
  80b9d4:	00000406 	br	80b9e8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80b9d8:	0081ffc4 	movi	r2,2047
  80b9dc:	e0fffa17 	ldw	r3,-24(fp)
  80b9e0:	10c5c83a 	sub	r2,r2,r3
  80b9e4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80b9e8:	e0bff817 	ldw	r2,-32(fp)
  80b9ec:	1005003a 	cmpeq	r2,r2,zero
  80b9f0:	10001f1e 	bne	r2,zero,80ba70 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80b9f4:	e0fffd17 	ldw	r3,-12(fp)
  80b9f8:	e0bff817 	ldw	r2,-32(fp)
  80b9fc:	1880022e 	bgeu	r3,r2,80ba08 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80ba00:	e0bffd17 	ldw	r2,-12(fp)
  80ba04:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80ba08:	e0bffb17 	ldw	r2,-20(fp)
  80ba0c:	10c20e04 	addi	r3,r2,2104
  80ba10:	e0bffa17 	ldw	r2,-24(fp)
  80ba14:	1885883a 	add	r2,r3,r2
  80ba18:	e0fffc17 	ldw	r3,-16(fp)
  80ba1c:	1009883a 	mov	r4,r2
  80ba20:	180b883a 	mov	r5,r3
  80ba24:	e1bff817 	ldw	r6,-32(fp)
  80ba28:	08009ec0 	call	8009ec <memcpy>
      ptr   += n;
  80ba2c:	e0fff817 	ldw	r3,-32(fp)
  80ba30:	e0bffc17 	ldw	r2,-16(fp)
  80ba34:	10c5883a 	add	r2,r2,r3
  80ba38:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80ba3c:	e0fffd17 	ldw	r3,-12(fp)
  80ba40:	e0bff817 	ldw	r2,-32(fp)
  80ba44:	1885c83a 	sub	r2,r3,r2
  80ba48:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ba4c:	e0fffa17 	ldw	r3,-24(fp)
  80ba50:	e0bff817 	ldw	r2,-32(fp)
  80ba54:	1885883a 	add	r2,r3,r2
  80ba58:	10c1ffcc 	andi	r3,r2,2047
  80ba5c:	e0bffb17 	ldw	r2,-20(fp)
  80ba60:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80ba64:	e0bffd17 	ldw	r2,-12(fp)
  80ba68:	10800048 	cmpgei	r2,r2,1
  80ba6c:	103fc31e 	bne	r2,zero,80b97c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ba70:	0005303a 	rdctl	r2,status
  80ba74:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ba78:	e0fff517 	ldw	r3,-44(fp)
  80ba7c:	00bfff84 	movi	r2,-2
  80ba80:	1884703a 	and	r2,r3,r2
  80ba84:	1001703a 	wrctl	status,r2
  
  return context;
  80ba88:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80ba8c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80ba90:	e0bffb17 	ldw	r2,-20(fp)
  80ba94:	10800817 	ldw	r2,32(r2)
  80ba98:	10c00094 	ori	r3,r2,2
  80ba9c:	e0bffb17 	ldw	r2,-20(fp)
  80baa0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80baa4:	e0bffb17 	ldw	r2,-20(fp)
  80baa8:	10800017 	ldw	r2,0(r2)
  80baac:	11000104 	addi	r4,r2,4
  80bab0:	e0bffb17 	ldw	r2,-20(fp)
  80bab4:	10800817 	ldw	r2,32(r2)
  80bab8:	1007883a 	mov	r3,r2
  80babc:	2005883a 	mov	r2,r4
  80bac0:	10c00035 	stwio	r3,0(r2)
  80bac4:	e0bff717 	ldw	r2,-36(fp)
  80bac8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bacc:	e0bff417 	ldw	r2,-48(fp)
  80bad0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80bad4:	e0bffd17 	ldw	r2,-12(fp)
  80bad8:	10800050 	cmplti	r2,r2,1
  80badc:	1000111e 	bne	r2,zero,80bb24 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80bae0:	e0bffe17 	ldw	r2,-8(fp)
  80bae4:	1090000c 	andi	r2,r2,16384
  80bae8:	1004c03a 	cmpne	r2,r2,zero
  80baec:	1000101e 	bne	r2,zero,80bb30 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80baf0:	e0bffb17 	ldw	r2,-20(fp)
  80baf4:	10c00d17 	ldw	r3,52(r2)
  80baf8:	e0bff917 	ldw	r2,-28(fp)
  80bafc:	1880051e 	bne	r3,r2,80bb14 <altera_avalon_jtag_uart_write+0x1c8>
  80bb00:	e0bffb17 	ldw	r2,-20(fp)
  80bb04:	10c00917 	ldw	r3,36(r2)
  80bb08:	e0bffb17 	ldw	r2,-20(fp)
  80bb0c:	10800117 	ldw	r2,4(r2)
  80bb10:	18bff736 	bltu	r3,r2,80baf0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80bb14:	e0bffb17 	ldw	r2,-20(fp)
  80bb18:	10c00d17 	ldw	r3,52(r2)
  80bb1c:	e0bff917 	ldw	r2,-28(fp)
  80bb20:	18800326 	beq	r3,r2,80bb30 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  80bb24:	e0bffd17 	ldw	r2,-12(fp)
  80bb28:	10800048 	cmpgei	r2,r2,1
  80bb2c:	103fcd1e 	bne	r2,zero,80ba64 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80bb30:	e0fffc17 	ldw	r3,-16(fp)
  80bb34:	e0bff617 	ldw	r2,-40(fp)
  80bb38:	18800526 	beq	r3,r2,80bb50 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80bb3c:	e0fffc17 	ldw	r3,-16(fp)
  80bb40:	e0bff617 	ldw	r2,-40(fp)
  80bb44:	1887c83a 	sub	r3,r3,r2
  80bb48:	e0ffff15 	stw	r3,-4(fp)
  80bb4c:	00000906 	br	80bb74 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80bb50:	e0bffe17 	ldw	r2,-8(fp)
  80bb54:	1090000c 	andi	r2,r2,16384
  80bb58:	1005003a 	cmpeq	r2,r2,zero
  80bb5c:	1000031e 	bne	r2,zero,80bb6c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80bb60:	00bffd44 	movi	r2,-11
  80bb64:	e0bfff15 	stw	r2,-4(fp)
  80bb68:	00000206 	br	80bb74 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  80bb6c:	00bffec4 	movi	r2,-5
  80bb70:	e0bfff15 	stw	r2,-4(fp)
  80bb74:	e0bfff17 	ldw	r2,-4(fp)
}
  80bb78:	e037883a 	mov	sp,fp
  80bb7c:	dfc00117 	ldw	ra,4(sp)
  80bb80:	df000017 	ldw	fp,0(sp)
  80bb84:	dec00204 	addi	sp,sp,8
  80bb88:	f800283a 	ret

0080bb8c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80bb8c:	defffa04 	addi	sp,sp,-24
  80bb90:	dfc00515 	stw	ra,20(sp)
  80bb94:	df000415 	stw	fp,16(sp)
  80bb98:	df000404 	addi	fp,sp,16
  80bb9c:	e13ffe15 	stw	r4,-8(fp)
  80bba0:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  80bba4:	e0bffe17 	ldw	r2,-8(fp)
  80bba8:	10800017 	ldw	r2,0(r2)
  80bbac:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80bbb0:	008003f4 	movhi	r2,15
  80bbb4:	10909004 	addi	r2,r2,16960
  80bbb8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80bbbc:	e0bffe17 	ldw	r2,-8(fp)
  80bbc0:	10800803 	ldbu	r2,32(r2)
  80bbc4:	10803fcc 	andi	r2,r2,255
  80bbc8:	1080201c 	xori	r2,r2,128
  80bbcc:	10bfe004 	addi	r2,r2,-128
  80bbd0:	1004c03a 	cmpne	r2,r2,zero
  80bbd4:	1000161e 	bne	r2,zero,80bc30 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80bbd8:	00000a06 	br	80bc04 <lcd_write_command+0x78>
    if (--i == 0)
  80bbdc:	e0bffc17 	ldw	r2,-16(fp)
  80bbe0:	10bfffc4 	addi	r2,r2,-1
  80bbe4:	e0bffc15 	stw	r2,-16(fp)
  80bbe8:	e0bffc17 	ldw	r2,-16(fp)
  80bbec:	1004c03a 	cmpne	r2,r2,zero
  80bbf0:	1000041e 	bne	r2,zero,80bc04 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  80bbf4:	e0fffe17 	ldw	r3,-8(fp)
  80bbf8:	00800044 	movi	r2,1
  80bbfc:	18800805 	stb	r2,32(r3)
      return;
  80bc00:	00000b06 	br	80bc30 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80bc04:	e0bffd17 	ldw	r2,-12(fp)
  80bc08:	10800104 	addi	r2,r2,4
  80bc0c:	10800037 	ldwio	r2,0(r2)
  80bc10:	1080200c 	andi	r2,r2,128
  80bc14:	1004c03a 	cmpne	r2,r2,zero
  80bc18:	103ff01e 	bne	r2,zero,80bbdc <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80bc1c:	01001904 	movi	r4,100
  80bc20:	080ae680 	call	80ae68 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80bc24:	e0bffd17 	ldw	r2,-12(fp)
  80bc28:	e0ffff03 	ldbu	r3,-4(fp)
  80bc2c:	10c00035 	stwio	r3,0(r2)
}
  80bc30:	e037883a 	mov	sp,fp
  80bc34:	dfc00117 	ldw	ra,4(sp)
  80bc38:	df000017 	ldw	fp,0(sp)
  80bc3c:	dec00204 	addi	sp,sp,8
  80bc40:	f800283a 	ret

0080bc44 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80bc44:	defffa04 	addi	sp,sp,-24
  80bc48:	dfc00515 	stw	ra,20(sp)
  80bc4c:	df000415 	stw	fp,16(sp)
  80bc50:	df000404 	addi	fp,sp,16
  80bc54:	e13ffe15 	stw	r4,-8(fp)
  80bc58:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  80bc5c:	e0bffe17 	ldw	r2,-8(fp)
  80bc60:	10800017 	ldw	r2,0(r2)
  80bc64:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80bc68:	008003f4 	movhi	r2,15
  80bc6c:	10909004 	addi	r2,r2,16960
  80bc70:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80bc74:	e0bffe17 	ldw	r2,-8(fp)
  80bc78:	10800803 	ldbu	r2,32(r2)
  80bc7c:	10803fcc 	andi	r2,r2,255
  80bc80:	1080201c 	xori	r2,r2,128
  80bc84:	10bfe004 	addi	r2,r2,-128
  80bc88:	1004c03a 	cmpne	r2,r2,zero
  80bc8c:	10001d1e 	bne	r2,zero,80bd04 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80bc90:	00000a06 	br	80bcbc <lcd_write_data+0x78>
    if (--i == 0)
  80bc94:	e0bffc17 	ldw	r2,-16(fp)
  80bc98:	10bfffc4 	addi	r2,r2,-1
  80bc9c:	e0bffc15 	stw	r2,-16(fp)
  80bca0:	e0bffc17 	ldw	r2,-16(fp)
  80bca4:	1004c03a 	cmpne	r2,r2,zero
  80bca8:	1000041e 	bne	r2,zero,80bcbc <lcd_write_data+0x78>
    {
      sp->broken = 1;
  80bcac:	e0fffe17 	ldw	r3,-8(fp)
  80bcb0:	00800044 	movi	r2,1
  80bcb4:	18800805 	stb	r2,32(r3)
      return;
  80bcb8:	00001206 	br	80bd04 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80bcbc:	e0bffd17 	ldw	r2,-12(fp)
  80bcc0:	10800104 	addi	r2,r2,4
  80bcc4:	10800037 	ldwio	r2,0(r2)
  80bcc8:	1080200c 	andi	r2,r2,128
  80bccc:	1004c03a 	cmpne	r2,r2,zero
  80bcd0:	103ff01e 	bne	r2,zero,80bc94 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80bcd4:	01001904 	movi	r4,100
  80bcd8:	080ae680 	call	80ae68 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80bcdc:	e0bffd17 	ldw	r2,-12(fp)
  80bce0:	10800204 	addi	r2,r2,8
  80bce4:	e0ffff03 	ldbu	r3,-4(fp)
  80bce8:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  80bcec:	e0bffe17 	ldw	r2,-8(fp)
  80bcf0:	108008c3 	ldbu	r2,35(r2)
  80bcf4:	10800044 	addi	r2,r2,1
  80bcf8:	1007883a 	mov	r3,r2
  80bcfc:	e0bffe17 	ldw	r2,-8(fp)
  80bd00:	10c008c5 	stb	r3,35(r2)
}
  80bd04:	e037883a 	mov	sp,fp
  80bd08:	dfc00117 	ldw	ra,4(sp)
  80bd0c:	df000017 	ldw	fp,0(sp)
  80bd10:	dec00204 	addi	sp,sp,8
  80bd14:	f800283a 	ret

0080bd18 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80bd18:	defffc04 	addi	sp,sp,-16
  80bd1c:	dfc00315 	stw	ra,12(sp)
  80bd20:	df000215 	stw	fp,8(sp)
  80bd24:	df000204 	addi	fp,sp,8
  80bd28:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80bd2c:	e13fff17 	ldw	r4,-4(fp)
  80bd30:	01400044 	movi	r5,1
  80bd34:	080bb8c0 	call	80bb8c <lcd_write_command>

  sp->x = 0;
  80bd38:	e0bfff17 	ldw	r2,-4(fp)
  80bd3c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80bd40:	e0bfff17 	ldw	r2,-4(fp)
  80bd44:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80bd48:	e0bfff17 	ldw	r2,-4(fp)
  80bd4c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80bd50:	e03ffe15 	stw	zero,-8(fp)
  80bd54:	00001906 	br	80bdbc <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80bd58:	e0bffe17 	ldw	r2,-8(fp)
  80bd5c:	108018e4 	muli	r2,r2,99
  80bd60:	10c01004 	addi	r3,r2,64
  80bd64:	e0bfff17 	ldw	r2,-4(fp)
  80bd68:	1889883a 	add	r4,r3,r2
  80bd6c:	01400804 	movi	r5,32
  80bd70:	01801444 	movi	r6,81
  80bd74:	08060680 	call	806068 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80bd78:	e0bffe17 	ldw	r2,-8(fp)
  80bd7c:	108018e4 	muli	r2,r2,99
  80bd80:	10c00c04 	addi	r3,r2,48
  80bd84:	e0bfff17 	ldw	r2,-4(fp)
  80bd88:	1889883a 	add	r4,r3,r2
  80bd8c:	01400804 	movi	r5,32
  80bd90:	01800404 	movi	r6,16
  80bd94:	08060680 	call	806068 <memset>
    sp->line[y].width = 0;
  80bd98:	e0bffe17 	ldw	r2,-8(fp)
  80bd9c:	e0ffff17 	ldw	r3,-4(fp)
  80bda0:	108018e4 	muli	r2,r2,99
  80bda4:	10c5883a 	add	r2,r2,r3
  80bda8:	10802404 	addi	r2,r2,144
  80bdac:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80bdb0:	e0bffe17 	ldw	r2,-8(fp)
  80bdb4:	10800044 	addi	r2,r2,1
  80bdb8:	e0bffe15 	stw	r2,-8(fp)
  80bdbc:	e0bffe17 	ldw	r2,-8(fp)
  80bdc0:	10800090 	cmplti	r2,r2,2
  80bdc4:	103fe41e 	bne	r2,zero,80bd58 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80bdc8:	e037883a 	mov	sp,fp
  80bdcc:	dfc00117 	ldw	ra,4(sp)
  80bdd0:	df000017 	ldw	fp,0(sp)
  80bdd4:	dec00204 	addi	sp,sp,8
  80bdd8:	f800283a 	ret

0080bddc <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80bddc:	defff604 	addi	sp,sp,-40
  80bde0:	dfc00915 	stw	ra,36(sp)
  80bde4:	df000815 	stw	fp,32(sp)
  80bde8:	dc000715 	stw	r16,28(sp)
  80bdec:	df000704 	addi	fp,sp,28
  80bdf0:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80bdf4:	e0bfff17 	ldw	r2,-4(fp)
  80bdf8:	10800943 	ldbu	r2,37(r2)
  80bdfc:	10803fcc 	andi	r2,r2,255
  80be00:	1080201c 	xori	r2,r2,128
  80be04:	10bfe004 	addi	r2,r2,-128
  80be08:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80be0c:	e03ffe15 	stw	zero,-8(fp)
  80be10:	00006406 	br	80bfa4 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80be14:	e0bffe17 	ldw	r2,-8(fp)
  80be18:	e0ffff17 	ldw	r3,-4(fp)
  80be1c:	108018e4 	muli	r2,r2,99
  80be20:	10c5883a 	add	r2,r2,r3
  80be24:	10802404 	addi	r2,r2,144
  80be28:	10800043 	ldbu	r2,1(r2)
  80be2c:	10803fcc 	andi	r2,r2,255
  80be30:	1080201c 	xori	r2,r2,128
  80be34:	10bfe004 	addi	r2,r2,-128
  80be38:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80be3c:	e0bffe17 	ldw	r2,-8(fp)
  80be40:	e0ffff17 	ldw	r3,-4(fp)
  80be44:	108018e4 	muli	r2,r2,99
  80be48:	10c5883a 	add	r2,r2,r3
  80be4c:	10802404 	addi	r2,r2,144
  80be50:	10800083 	ldbu	r2,2(r2)
  80be54:	10c03fcc 	andi	r3,r2,255
  80be58:	e0bffc17 	ldw	r2,-16(fp)
  80be5c:	1885383a 	mul	r2,r3,r2
  80be60:	1005d23a 	srai	r2,r2,8
  80be64:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  80be68:	e0fffa17 	ldw	r3,-24(fp)
  80be6c:	e0bffb17 	ldw	r2,-20(fp)
  80be70:	18800116 	blt	r3,r2,80be78 <lcd_repaint_screen+0x9c>
      offset = 0;
  80be74:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80be78:	e03ffd15 	stw	zero,-12(fp)
  80be7c:	00004306 	br	80bf8c <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80be80:	e43ffe17 	ldw	r16,-8(fp)
  80be84:	e0fffd17 	ldw	r3,-12(fp)
  80be88:	e0bffa17 	ldw	r2,-24(fp)
  80be8c:	1889883a 	add	r4,r3,r2
  80be90:	e17ffb17 	ldw	r5,-20(fp)
  80be94:	08008a00 	call	8008a0 <__modsi3>
  80be98:	1009883a 	mov	r4,r2
  80be9c:	e0ffff17 	ldw	r3,-4(fp)
  80bea0:	808018e4 	muli	r2,r16,99
  80bea4:	10c5883a 	add	r2,r2,r3
  80bea8:	1105883a 	add	r2,r2,r4
  80beac:	10801004 	addi	r2,r2,64
  80beb0:	10800003 	ldbu	r2,0(r2)
  80beb4:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80beb8:	e0bffe17 	ldw	r2,-8(fp)
  80bebc:	e13ffd17 	ldw	r4,-12(fp)
  80bec0:	e0ffff17 	ldw	r3,-4(fp)
  80bec4:	108018e4 	muli	r2,r2,99
  80bec8:	10c5883a 	add	r2,r2,r3
  80becc:	1105883a 	add	r2,r2,r4
  80bed0:	10800c04 	addi	r2,r2,48
  80bed4:	10800003 	ldbu	r2,0(r2)
  80bed8:	10c03fcc 	andi	r3,r2,255
  80bedc:	18c0201c 	xori	r3,r3,128
  80bee0:	18ffe004 	addi	r3,r3,-128
  80bee4:	e0bff947 	ldb	r2,-27(fp)
  80bee8:	18802526 	beq	r3,r2,80bf80 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80beec:	e0fffe17 	ldw	r3,-8(fp)
  80bef0:	d0a00f04 	addi	r2,gp,-32708
  80bef4:	1885883a 	add	r2,r3,r2
  80bef8:	10800003 	ldbu	r2,0(r2)
  80befc:	1007883a 	mov	r3,r2
  80bf00:	e0bffd17 	ldw	r2,-12(fp)
  80bf04:	1885883a 	add	r2,r3,r2
  80bf08:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  80bf0c:	e0fff903 	ldbu	r3,-28(fp)
  80bf10:	e0bfff17 	ldw	r2,-4(fp)
  80bf14:	108008c3 	ldbu	r2,35(r2)
  80bf18:	10803fcc 	andi	r2,r2,255
  80bf1c:	1080201c 	xori	r2,r2,128
  80bf20:	10bfe004 	addi	r2,r2,-128
  80bf24:	18800926 	beq	r3,r2,80bf4c <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80bf28:	e0fff903 	ldbu	r3,-28(fp)
  80bf2c:	00bfe004 	movi	r2,-128
  80bf30:	1884b03a 	or	r2,r3,r2
  80bf34:	11403fcc 	andi	r5,r2,255
  80bf38:	e13fff17 	ldw	r4,-4(fp)
  80bf3c:	080bb8c0 	call	80bb8c <lcd_write_command>
          sp->address = address;
  80bf40:	e0fff903 	ldbu	r3,-28(fp)
  80bf44:	e0bfff17 	ldw	r2,-4(fp)
  80bf48:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80bf4c:	e0bff943 	ldbu	r2,-27(fp)
  80bf50:	11403fcc 	andi	r5,r2,255
  80bf54:	e13fff17 	ldw	r4,-4(fp)
  80bf58:	080bc440 	call	80bc44 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80bf5c:	e0bffe17 	ldw	r2,-8(fp)
  80bf60:	e13ffd17 	ldw	r4,-12(fp)
  80bf64:	e0ffff17 	ldw	r3,-4(fp)
  80bf68:	108018e4 	muli	r2,r2,99
  80bf6c:	10c5883a 	add	r2,r2,r3
  80bf70:	1105883a 	add	r2,r2,r4
  80bf74:	10c00c04 	addi	r3,r2,48
  80bf78:	e0bff943 	ldbu	r2,-27(fp)
  80bf7c:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80bf80:	e0bffd17 	ldw	r2,-12(fp)
  80bf84:	10800044 	addi	r2,r2,1
  80bf88:	e0bffd15 	stw	r2,-12(fp)
  80bf8c:	e0bffd17 	ldw	r2,-12(fp)
  80bf90:	10800410 	cmplti	r2,r2,16
  80bf94:	103fba1e 	bne	r2,zero,80be80 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80bf98:	e0bffe17 	ldw	r2,-8(fp)
  80bf9c:	10800044 	addi	r2,r2,1
  80bfa0:	e0bffe15 	stw	r2,-8(fp)
  80bfa4:	e0bffe17 	ldw	r2,-8(fp)
  80bfa8:	10800090 	cmplti	r2,r2,2
  80bfac:	103f991e 	bne	r2,zero,80be14 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80bfb0:	e037883a 	mov	sp,fp
  80bfb4:	dfc00217 	ldw	ra,8(sp)
  80bfb8:	df000117 	ldw	fp,4(sp)
  80bfbc:	dc000017 	ldw	r16,0(sp)
  80bfc0:	dec00304 	addi	sp,sp,12
  80bfc4:	f800283a 	ret

0080bfc8 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80bfc8:	defffc04 	addi	sp,sp,-16
  80bfcc:	dfc00315 	stw	ra,12(sp)
  80bfd0:	df000215 	stw	fp,8(sp)
  80bfd4:	df000204 	addi	fp,sp,8
  80bfd8:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80bfdc:	e03ffe15 	stw	zero,-8(fp)
  80bfe0:	00001d06 	br	80c058 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80bfe4:	e0bffe17 	ldw	r2,-8(fp)
  80bfe8:	10800048 	cmpgei	r2,r2,1
  80bfec:	10000f1e 	bne	r2,zero,80c02c <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80bff0:	e0bffe17 	ldw	r2,-8(fp)
  80bff4:	108018e4 	muli	r2,r2,99
  80bff8:	10c01004 	addi	r3,r2,64
  80bffc:	e0bfff17 	ldw	r2,-4(fp)
  80c000:	1889883a 	add	r4,r3,r2
  80c004:	e0bffe17 	ldw	r2,-8(fp)
  80c008:	10800044 	addi	r2,r2,1
  80c00c:	108018e4 	muli	r2,r2,99
  80c010:	10c01004 	addi	r3,r2,64
  80c014:	e0bfff17 	ldw	r2,-4(fp)
  80c018:	1885883a 	add	r2,r3,r2
  80c01c:	100b883a 	mov	r5,r2
  80c020:	01801404 	movi	r6,80
  80c024:	08009ec0 	call	8009ec <memcpy>
  80c028:	00000806 	br	80c04c <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80c02c:	e0bffe17 	ldw	r2,-8(fp)
  80c030:	108018e4 	muli	r2,r2,99
  80c034:	10c01004 	addi	r3,r2,64
  80c038:	e0bfff17 	ldw	r2,-4(fp)
  80c03c:	1889883a 	add	r4,r3,r2
  80c040:	01400804 	movi	r5,32
  80c044:	01801404 	movi	r6,80
  80c048:	08060680 	call	806068 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c04c:	e0bffe17 	ldw	r2,-8(fp)
  80c050:	10800044 	addi	r2,r2,1
  80c054:	e0bffe15 	stw	r2,-8(fp)
  80c058:	e0bffe17 	ldw	r2,-8(fp)
  80c05c:	10800090 	cmplti	r2,r2,2
  80c060:	103fe01e 	bne	r2,zero,80bfe4 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80c064:	e0bfff17 	ldw	r2,-4(fp)
  80c068:	10800883 	ldbu	r2,34(r2)
  80c06c:	10bfffc4 	addi	r2,r2,-1
  80c070:	1007883a 	mov	r3,r2
  80c074:	e0bfff17 	ldw	r2,-4(fp)
  80c078:	10c00885 	stb	r3,34(r2)
}
  80c07c:	e037883a 	mov	sp,fp
  80c080:	dfc00117 	ldw	ra,4(sp)
  80c084:	df000017 	ldw	fp,0(sp)
  80c088:	dec00204 	addi	sp,sp,8
  80c08c:	f800283a 	ret

0080c090 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80c090:	defff804 	addi	sp,sp,-32
  80c094:	dfc00715 	stw	ra,28(sp)
  80c098:	df000615 	stw	fp,24(sp)
  80c09c:	df000604 	addi	fp,sp,24
  80c0a0:	e13ffd15 	stw	r4,-12(fp)
  80c0a4:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  80c0a8:	e03ffc15 	stw	zero,-16(fp)
  80c0ac:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  80c0b0:	e0bffd17 	ldw	r2,-12(fp)
  80c0b4:	10800a03 	ldbu	r2,40(r2)
  80c0b8:	10803fcc 	andi	r2,r2,255
  80c0bc:	1080201c 	xori	r2,r2,128
  80c0c0:	10bfe004 	addi	r2,r2,-128
  80c0c4:	108016d8 	cmpnei	r2,r2,91
  80c0c8:	1000491e 	bne	r2,zero,80c1f0 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  80c0cc:	e0bffd17 	ldw	r2,-12(fp)
  80c0d0:	10800a04 	addi	r2,r2,40
  80c0d4:	10800044 	addi	r2,r2,1
  80c0d8:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  80c0dc:	00000d06 	br	80c114 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80c0e0:	e0bffc17 	ldw	r2,-16(fp)
  80c0e4:	10c002a4 	muli	r3,r2,10
  80c0e8:	e0bffa17 	ldw	r2,-24(fp)
  80c0ec:	10800003 	ldbu	r2,0(r2)
  80c0f0:	10803fcc 	andi	r2,r2,255
  80c0f4:	1080201c 	xori	r2,r2,128
  80c0f8:	10bfe004 	addi	r2,r2,-128
  80c0fc:	1885883a 	add	r2,r3,r2
  80c100:	10bff404 	addi	r2,r2,-48
  80c104:	e0bffc15 	stw	r2,-16(fp)
  80c108:	e0bffa17 	ldw	r2,-24(fp)
  80c10c:	10800044 	addi	r2,r2,1
  80c110:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80c114:	e0bffa17 	ldw	r2,-24(fp)
  80c118:	10800003 	ldbu	r2,0(r2)
  80c11c:	10803fcc 	andi	r2,r2,255
  80c120:	1080201c 	xori	r2,r2,128
  80c124:	10bfe004 	addi	r2,r2,-128
  80c128:	1007883a 	mov	r3,r2
  80c12c:	00802074 	movhi	r2,129
  80c130:	10802504 	addi	r2,r2,148
  80c134:	10800017 	ldw	r2,0(r2)
  80c138:	1885883a 	add	r2,r3,r2
  80c13c:	10800003 	ldbu	r2,0(r2)
  80c140:	10803fcc 	andi	r2,r2,255
  80c144:	1080010c 	andi	r2,r2,4
  80c148:	1004c03a 	cmpne	r2,r2,zero
  80c14c:	103fe41e 	bne	r2,zero,80c0e0 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80c150:	e0bffa17 	ldw	r2,-24(fp)
  80c154:	10800003 	ldbu	r2,0(r2)
  80c158:	10803fcc 	andi	r2,r2,255
  80c15c:	1080201c 	xori	r2,r2,128
  80c160:	10bfe004 	addi	r2,r2,-128
  80c164:	10800ed8 	cmpnei	r2,r2,59
  80c168:	1000231e 	bne	r2,zero,80c1f8 <lcd_handle_escape+0x168>
    {
      ptr++;
  80c16c:	e0bffa17 	ldw	r2,-24(fp)
  80c170:	10800044 	addi	r2,r2,1
  80c174:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  80c178:	00000d06 	br	80c1b0 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80c17c:	e0bffb17 	ldw	r2,-20(fp)
  80c180:	10c002a4 	muli	r3,r2,10
  80c184:	e0bffa17 	ldw	r2,-24(fp)
  80c188:	10800003 	ldbu	r2,0(r2)
  80c18c:	10803fcc 	andi	r2,r2,255
  80c190:	1080201c 	xori	r2,r2,128
  80c194:	10bfe004 	addi	r2,r2,-128
  80c198:	1885883a 	add	r2,r3,r2
  80c19c:	10bff404 	addi	r2,r2,-48
  80c1a0:	e0bffb15 	stw	r2,-20(fp)
  80c1a4:	e0bffa17 	ldw	r2,-24(fp)
  80c1a8:	10800044 	addi	r2,r2,1
  80c1ac:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80c1b0:	e0bffa17 	ldw	r2,-24(fp)
  80c1b4:	10800003 	ldbu	r2,0(r2)
  80c1b8:	10803fcc 	andi	r2,r2,255
  80c1bc:	1080201c 	xori	r2,r2,128
  80c1c0:	10bfe004 	addi	r2,r2,-128
  80c1c4:	1007883a 	mov	r3,r2
  80c1c8:	00802074 	movhi	r2,129
  80c1cc:	10802504 	addi	r2,r2,148
  80c1d0:	10800017 	ldw	r2,0(r2)
  80c1d4:	1885883a 	add	r2,r3,r2
  80c1d8:	10800003 	ldbu	r2,0(r2)
  80c1dc:	10803fcc 	andi	r2,r2,255
  80c1e0:	1080010c 	andi	r2,r2,4
  80c1e4:	1004c03a 	cmpne	r2,r2,zero
  80c1e8:	103fe41e 	bne	r2,zero,80c17c <lcd_handle_escape+0xec>
  80c1ec:	00000206 	br	80c1f8 <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80c1f0:	00bfffc4 	movi	r2,-1
  80c1f4:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  80c1f8:	e0bffe07 	ldb	r2,-8(fp)
  80c1fc:	e0bfff15 	stw	r2,-4(fp)
  80c200:	e0ffff17 	ldw	r3,-4(fp)
  80c204:	188012a0 	cmpeqi	r2,r3,74
  80c208:	10002f1e 	bne	r2,zero,80c2c8 <lcd_handle_escape+0x238>
  80c20c:	e0ffff17 	ldw	r3,-4(fp)
  80c210:	188012c8 	cmpgei	r2,r3,75
  80c214:	1000041e 	bne	r2,zero,80c228 <lcd_handle_escape+0x198>
  80c218:	e0ffff17 	ldw	r3,-4(fp)
  80c21c:	18801220 	cmpeqi	r2,r3,72
  80c220:	1000081e 	bne	r2,zero,80c244 <lcd_handle_escape+0x1b4>
  80c224:	00004906 	br	80c34c <lcd_handle_escape+0x2bc>
  80c228:	e0ffff17 	ldw	r3,-4(fp)
  80c22c:	188012e0 	cmpeqi	r2,r3,75
  80c230:	10002b1e 	bne	r2,zero,80c2e0 <lcd_handle_escape+0x250>
  80c234:	e0ffff17 	ldw	r3,-4(fp)
  80c238:	188019a0 	cmpeqi	r2,r3,102
  80c23c:	1000011e 	bne	r2,zero,80c244 <lcd_handle_escape+0x1b4>
  80c240:	00004206 	br	80c34c <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80c244:	e0bffb17 	ldw	r2,-20(fp)
  80c248:	10800050 	cmplti	r2,r2,1
  80c24c:	1000051e 	bne	r2,zero,80c264 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  80c250:	e0bffb17 	ldw	r2,-20(fp)
  80c254:	10bfffc4 	addi	r2,r2,-1
  80c258:	1007883a 	mov	r3,r2
  80c25c:	e0bffd17 	ldw	r2,-12(fp)
  80c260:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80c264:	e0bffc17 	ldw	r2,-16(fp)
  80c268:	10800050 	cmplti	r2,r2,1
  80c26c:	1000371e 	bne	r2,zero,80c34c <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  80c270:	e0bffc17 	ldw	r2,-16(fp)
  80c274:	10bfffc4 	addi	r2,r2,-1
  80c278:	1007883a 	mov	r3,r2
  80c27c:	e0bffd17 	ldw	r2,-12(fp)
  80c280:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80c284:	e0bffd17 	ldw	r2,-12(fp)
  80c288:	10800883 	ldbu	r2,34(r2)
  80c28c:	10803fcc 	andi	r2,r2,255
  80c290:	10800170 	cmpltui	r2,r2,5
  80c294:	1000061e 	bne	r2,zero,80c2b0 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  80c298:	e0fffd17 	ldw	r3,-12(fp)
  80c29c:	00800104 	movi	r2,4
  80c2a0:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  80c2a4:	00000206 	br	80c2b0 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  80c2a8:	e13ffd17 	ldw	r4,-12(fp)
  80c2ac:	080bfc80 	call	80bfc8 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80c2b0:	e0bffd17 	ldw	r2,-12(fp)
  80c2b4:	10800883 	ldbu	r2,34(r2)
  80c2b8:	10803fcc 	andi	r2,r2,255
  80c2bc:	108000e8 	cmpgeui	r2,r2,3
  80c2c0:	103ff91e 	bne	r2,zero,80c2a8 <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  80c2c4:	00002106 	br	80c34c <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80c2c8:	e0bffc17 	ldw	r2,-16(fp)
  80c2cc:	10800098 	cmpnei	r2,r2,2
  80c2d0:	10001e1e 	bne	r2,zero,80c34c <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  80c2d4:	e13ffd17 	ldw	r4,-12(fp)
  80c2d8:	080bd180 	call	80bd18 <lcd_clear_screen>
    break;
  80c2dc:	00001b06 	br	80c34c <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80c2e0:	e0bffc17 	ldw	r2,-16(fp)
  80c2e4:	10800048 	cmpgei	r2,r2,1
  80c2e8:	1000181e 	bne	r2,zero,80c34c <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80c2ec:	e0bffd17 	ldw	r2,-12(fp)
  80c2f0:	10800843 	ldbu	r2,33(r2)
  80c2f4:	10803fcc 	andi	r2,r2,255
  80c2f8:	10801428 	cmpgeui	r2,r2,80
  80c2fc:	1000131e 	bne	r2,zero,80c34c <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80c300:	e0bffd17 	ldw	r2,-12(fp)
  80c304:	10800883 	ldbu	r2,34(r2)
  80c308:	10803fcc 	andi	r2,r2,255
  80c30c:	108018e4 	muli	r2,r2,99
  80c310:	10c01004 	addi	r3,r2,64
  80c314:	e0bffd17 	ldw	r2,-12(fp)
  80c318:	1887883a 	add	r3,r3,r2
  80c31c:	e0bffd17 	ldw	r2,-12(fp)
  80c320:	10800843 	ldbu	r2,33(r2)
  80c324:	10803fcc 	andi	r2,r2,255
  80c328:	1889883a 	add	r4,r3,r2
  80c32c:	e0bffd17 	ldw	r2,-12(fp)
  80c330:	10800843 	ldbu	r2,33(r2)
  80c334:	10c03fcc 	andi	r3,r2,255
  80c338:	00801404 	movi	r2,80
  80c33c:	10c5c83a 	sub	r2,r2,r3
  80c340:	100d883a 	mov	r6,r2
  80c344:	01400804 	movi	r5,32
  80c348:	08060680 	call	806068 <memset>
    }
    break;
  }
}
  80c34c:	e037883a 	mov	sp,fp
  80c350:	dfc00117 	ldw	ra,4(sp)
  80c354:	df000017 	ldw	fp,0(sp)
  80c358:	dec00204 	addi	sp,sp,8
  80c35c:	f800283a 	ret

0080c360 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80c360:	defff204 	addi	sp,sp,-56
  80c364:	dfc00d15 	stw	ra,52(sp)
  80c368:	df000c15 	stw	fp,48(sp)
  80c36c:	dc000b15 	stw	r16,44(sp)
  80c370:	df000b04 	addi	fp,sp,44
  80c374:	e13ffc15 	stw	r4,-16(fp)
  80c378:	e17ffd15 	stw	r5,-12(fp)
  80c37c:	e1bffe15 	stw	r6,-8(fp)
  80c380:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80c384:	e0bffe17 	ldw	r2,-8(fp)
  80c388:	1007883a 	mov	r3,r2
  80c38c:	e0bffd17 	ldw	r2,-12(fp)
  80c390:	10c5883a 	add	r2,r2,r3
  80c394:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80c398:	e0fffc17 	ldw	r3,-16(fp)
  80c39c:	00800044 	movi	r2,1
  80c3a0:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  80c3a4:	0000a206 	br	80c630 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
  80c3a8:	e0bffd17 	ldw	r2,-12(fp)
  80c3ac:	10800003 	ldbu	r2,0(r2)
  80c3b0:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  80c3b4:	e0bffc17 	ldw	r2,-16(fp)
  80c3b8:	10800903 	ldbu	r2,36(r2)
  80c3bc:	10803fcc 	andi	r2,r2,255
  80c3c0:	1080201c 	xori	r2,r2,128
  80c3c4:	10bfe004 	addi	r2,r2,-128
  80c3c8:	1004803a 	cmplt	r2,r2,zero
  80c3cc:	10003b1e 	bne	r2,zero,80c4bc <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
  80c3d0:	e0bffc17 	ldw	r2,-16(fp)
  80c3d4:	10800903 	ldbu	r2,36(r2)
  80c3d8:	10803fcc 	andi	r2,r2,255
  80c3dc:	1080201c 	xori	r2,r2,128
  80c3e0:	10bfe004 	addi	r2,r2,-128
  80c3e4:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80c3e8:	e0bff717 	ldw	r2,-36(fp)
  80c3ec:	1004c03a 	cmpne	r2,r2,zero
  80c3f0:	1000031e 	bne	r2,zero,80c400 <altera_avalon_lcd_16207_write+0xa0>
  80c3f4:	e0bff807 	ldb	r2,-32(fp)
  80c3f8:	108016d8 	cmpnei	r2,r2,91
  80c3fc:	1000111e 	bne	r2,zero,80c444 <altera_avalon_lcd_16207_write+0xe4>
  80c400:	e0bff717 	ldw	r2,-36(fp)
  80c404:	1005003a 	cmpeq	r2,r2,zero
  80c408:	10001a1e 	bne	r2,zero,80c474 <altera_avalon_lcd_16207_write+0x114>
  80c40c:	e0bff807 	ldb	r2,-32(fp)
  80c410:	1007883a 	mov	r3,r2
  80c414:	00802074 	movhi	r2,129
  80c418:	10802504 	addi	r2,r2,148
  80c41c:	10800017 	ldw	r2,0(r2)
  80c420:	1885883a 	add	r2,r3,r2
  80c424:	10800003 	ldbu	r2,0(r2)
  80c428:	10803fcc 	andi	r2,r2,255
  80c42c:	1080010c 	andi	r2,r2,4
  80c430:	1004c03a 	cmpne	r2,r2,zero
  80c434:	10000f1e 	bne	r2,zero,80c474 <altera_avalon_lcd_16207_write+0x114>
  80c438:	e0bff807 	ldb	r2,-32(fp)
  80c43c:	10800ee0 	cmpeqi	r2,r2,59
  80c440:	10000c1e 	bne	r2,zero,80c474 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  80c444:	e0fff717 	ldw	r3,-36(fp)
  80c448:	e0bffc17 	ldw	r2,-16(fp)
  80c44c:	1885883a 	add	r2,r3,r2
  80c450:	10800a04 	addi	r2,r2,40
  80c454:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80c458:	e17ff807 	ldb	r5,-32(fp)
  80c45c:	e13ffc17 	ldw	r4,-16(fp)
  80c460:	080c0900 	call	80c090 <lcd_handle_escape>

        sp->esccount = -1;
  80c464:	e0fffc17 	ldw	r3,-16(fp)
  80c468:	00bfffc4 	movi	r2,-1
  80c46c:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80c470:	00006c06 	br	80c624 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80c474:	e0bffc17 	ldw	r2,-16(fp)
  80c478:	10800903 	ldbu	r2,36(r2)
  80c47c:	10803fcc 	andi	r2,r2,255
  80c480:	108001e8 	cmpgeui	r2,r2,7
  80c484:	1000671e 	bne	r2,zero,80c624 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
  80c488:	e0fff717 	ldw	r3,-36(fp)
  80c48c:	e0bffc17 	ldw	r2,-16(fp)
  80c490:	1885883a 	add	r2,r3,r2
  80c494:	10c00a04 	addi	r3,r2,40
  80c498:	e0bff803 	ldbu	r2,-32(fp)
  80c49c:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  80c4a0:	e0bffc17 	ldw	r2,-16(fp)
  80c4a4:	10800903 	ldbu	r2,36(r2)
  80c4a8:	10800044 	addi	r2,r2,1
  80c4ac:	1007883a 	mov	r3,r2
  80c4b0:	e0bffc17 	ldw	r2,-16(fp)
  80c4b4:	10c00905 	stb	r3,36(r2)
  80c4b8:	00005a06 	br	80c624 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
  80c4bc:	e0bff807 	ldb	r2,-32(fp)
  80c4c0:	108006d8 	cmpnei	r2,r2,27
  80c4c4:	1000031e 	bne	r2,zero,80c4d4 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
  80c4c8:	e0bffc17 	ldw	r2,-16(fp)
  80c4cc:	10000905 	stb	zero,36(r2)
  80c4d0:	00005406 	br	80c624 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
  80c4d4:	e0bff807 	ldb	r2,-32(fp)
  80c4d8:	10800358 	cmpnei	r2,r2,13
  80c4dc:	1000031e 	bne	r2,zero,80c4ec <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
  80c4e0:	e0bffc17 	ldw	r2,-16(fp)
  80c4e4:	10000845 	stb	zero,33(r2)
  80c4e8:	00004e06 	br	80c624 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
  80c4ec:	e0bff807 	ldb	r2,-32(fp)
  80c4f0:	10800298 	cmpnei	r2,r2,10
  80c4f4:	1000101e 	bne	r2,zero,80c538 <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
  80c4f8:	e0bffc17 	ldw	r2,-16(fp)
  80c4fc:	10000845 	stb	zero,33(r2)
      sp->y++;
  80c500:	e0bffc17 	ldw	r2,-16(fp)
  80c504:	10800883 	ldbu	r2,34(r2)
  80c508:	10800044 	addi	r2,r2,1
  80c50c:	1007883a 	mov	r3,r2
  80c510:	e0bffc17 	ldw	r2,-16(fp)
  80c514:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80c518:	e0bffc17 	ldw	r2,-16(fp)
  80c51c:	10800883 	ldbu	r2,34(r2)
  80c520:	10803fcc 	andi	r2,r2,255
  80c524:	108000f0 	cmpltui	r2,r2,3
  80c528:	10003e1e 	bne	r2,zero,80c624 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
  80c52c:	e13ffc17 	ldw	r4,-16(fp)
  80c530:	080bfc80 	call	80bfc8 <lcd_scroll_up>
  80c534:	00003b06 	br	80c624 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
  80c538:	e0bff807 	ldb	r2,-32(fp)
  80c53c:	10800218 	cmpnei	r2,r2,8
  80c540:	10000c1e 	bne	r2,zero,80c574 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
  80c544:	e0bffc17 	ldw	r2,-16(fp)
  80c548:	10800843 	ldbu	r2,33(r2)
  80c54c:	10803fcc 	andi	r2,r2,255
  80c550:	1005003a 	cmpeq	r2,r2,zero
  80c554:	1000331e 	bne	r2,zero,80c624 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
  80c558:	e0bffc17 	ldw	r2,-16(fp)
  80c55c:	10800843 	ldbu	r2,33(r2)
  80c560:	10bfffc4 	addi	r2,r2,-1
  80c564:	1007883a 	mov	r3,r2
  80c568:	e0bffc17 	ldw	r2,-16(fp)
  80c56c:	10c00845 	stb	r3,33(r2)
  80c570:	00002c06 	br	80c624 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
  80c574:	e0bff807 	ldb	r2,-32(fp)
  80c578:	1007883a 	mov	r3,r2
  80c57c:	00802074 	movhi	r2,129
  80c580:	10802504 	addi	r2,r2,148
  80c584:	10800017 	ldw	r2,0(r2)
  80c588:	1885883a 	add	r2,r3,r2
  80c58c:	10800003 	ldbu	r2,0(r2)
  80c590:	10803fcc 	andi	r2,r2,255
  80c594:	1080201c 	xori	r2,r2,128
  80c598:	10bfe004 	addi	r2,r2,-128
  80c59c:	108025cc 	andi	r2,r2,151
  80c5a0:	1005003a 	cmpeq	r2,r2,zero
  80c5a4:	10001f1e 	bne	r2,zero,80c624 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80c5a8:	e0bffc17 	ldw	r2,-16(fp)
  80c5ac:	10800883 	ldbu	r2,34(r2)
  80c5b0:	10803fcc 	andi	r2,r2,255
  80c5b4:	108000b0 	cmpltui	r2,r2,2
  80c5b8:	1000021e 	bne	r2,zero,80c5c4 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
  80c5bc:	e13ffc17 	ldw	r4,-16(fp)
  80c5c0:	080bfc80 	call	80bfc8 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80c5c4:	e0bffc17 	ldw	r2,-16(fp)
  80c5c8:	10800843 	ldbu	r2,33(r2)
  80c5cc:	10803fcc 	andi	r2,r2,255
  80c5d0:	10801428 	cmpgeui	r2,r2,80
  80c5d4:	10000d1e 	bne	r2,zero,80c60c <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
  80c5d8:	e0bffc17 	ldw	r2,-16(fp)
  80c5dc:	10800883 	ldbu	r2,34(r2)
  80c5e0:	11003fcc 	andi	r4,r2,255
  80c5e4:	e0bffc17 	ldw	r2,-16(fp)
  80c5e8:	10800843 	ldbu	r2,33(r2)
  80c5ec:	11403fcc 	andi	r5,r2,255
  80c5f0:	e0fffc17 	ldw	r3,-16(fp)
  80c5f4:	208018e4 	muli	r2,r4,99
  80c5f8:	10c5883a 	add	r2,r2,r3
  80c5fc:	1145883a 	add	r2,r2,r5
  80c600:	10c01004 	addi	r3,r2,64
  80c604:	e0bff803 	ldbu	r2,-32(fp)
  80c608:	18800005 	stb	r2,0(r3)

      sp->x++;
  80c60c:	e0bffc17 	ldw	r2,-16(fp)
  80c610:	10800843 	ldbu	r2,33(r2)
  80c614:	10800044 	addi	r2,r2,1
  80c618:	1007883a 	mov	r3,r2
  80c61c:	e0bffc17 	ldw	r2,-16(fp)
  80c620:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80c624:	e0bffd17 	ldw	r2,-12(fp)
  80c628:	10800044 	addi	r2,r2,1
  80c62c:	e0bffd15 	stw	r2,-12(fp)
  80c630:	e0fffd17 	ldw	r3,-12(fp)
  80c634:	e0bffb17 	ldw	r2,-20(fp)
  80c638:	18bf5b36 	bltu	r3,r2,80c3a8 <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80c63c:	00800404 	movi	r2,16
  80c640:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c644:	e03ffa15 	stw	zero,-24(fp)
  80c648:	00003606 	br	80c724 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80c64c:	00801404 	movi	r2,80
  80c650:	e0bff615 	stw	r2,-40(fp)
  80c654:	00001106 	br	80c69c <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
  80c658:	e13ffa17 	ldw	r4,-24(fp)
  80c65c:	e0bff617 	ldw	r2,-40(fp)
  80c660:	117fffc4 	addi	r5,r2,-1
  80c664:	e0fffc17 	ldw	r3,-16(fp)
  80c668:	208018e4 	muli	r2,r4,99
  80c66c:	10c5883a 	add	r2,r2,r3
  80c670:	1145883a 	add	r2,r2,r5
  80c674:	10801004 	addi	r2,r2,64
  80c678:	10800003 	ldbu	r2,0(r2)
  80c67c:	10803fcc 	andi	r2,r2,255
  80c680:	1080201c 	xori	r2,r2,128
  80c684:	10bfe004 	addi	r2,r2,-128
  80c688:	10800818 	cmpnei	r2,r2,32
  80c68c:	1000061e 	bne	r2,zero,80c6a8 <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80c690:	e0bff617 	ldw	r2,-40(fp)
  80c694:	10bfffc4 	addi	r2,r2,-1
  80c698:	e0bff615 	stw	r2,-40(fp)
  80c69c:	e0bff617 	ldw	r2,-40(fp)
  80c6a0:	10800048 	cmpgei	r2,r2,1
  80c6a4:	103fec1e 	bne	r2,zero,80c658 <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80c6a8:	e0bff617 	ldw	r2,-40(fp)
  80c6ac:	10800448 	cmpgei	r2,r2,17
  80c6b0:	1000031e 	bne	r2,zero,80c6c0 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
  80c6b4:	00800404 	movi	r2,16
  80c6b8:	e0bff615 	stw	r2,-40(fp)
  80c6bc:	00000306 	br	80c6cc <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
  80c6c0:	e0bff617 	ldw	r2,-40(fp)
  80c6c4:	10800044 	addi	r2,r2,1
  80c6c8:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  80c6cc:	e13ffa17 	ldw	r4,-24(fp)
  80c6d0:	e0bff617 	ldw	r2,-40(fp)
  80c6d4:	100b883a 	mov	r5,r2
  80c6d8:	e0fffc17 	ldw	r3,-16(fp)
  80c6dc:	208018e4 	muli	r2,r4,99
  80c6e0:	10c5883a 	add	r2,r2,r3
  80c6e4:	10802404 	addi	r2,r2,144
  80c6e8:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  80c6ec:	e0fff917 	ldw	r3,-28(fp)
  80c6f0:	e0bff617 	ldw	r2,-40(fp)
  80c6f4:	1880020e 	bge	r3,r2,80c700 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
  80c6f8:	e0bff617 	ldw	r2,-40(fp)
  80c6fc:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80c700:	e0bffa17 	ldw	r2,-24(fp)
  80c704:	e0fffc17 	ldw	r3,-16(fp)
  80c708:	108018e4 	muli	r2,r2,99
  80c70c:	10c5883a 	add	r2,r2,r3
  80c710:	10802404 	addi	r2,r2,144
  80c714:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c718:	e0bffa17 	ldw	r2,-24(fp)
  80c71c:	10800044 	addi	r2,r2,1
  80c720:	e0bffa15 	stw	r2,-24(fp)
  80c724:	e0bffa17 	ldw	r2,-24(fp)
  80c728:	10800090 	cmplti	r2,r2,2
  80c72c:	103fc71e 	bne	r2,zero,80c64c <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80c730:	e0bff917 	ldw	r2,-28(fp)
  80c734:	10800448 	cmpgei	r2,r2,17
  80c738:	1000031e 	bne	r2,zero,80c748 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
  80c73c:	e0bffc17 	ldw	r2,-16(fp)
  80c740:	10000985 	stb	zero,38(r2)
  80c744:	00002d06 	br	80c7fc <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
  80c748:	e0bff917 	ldw	r2,-28(fp)
  80c74c:	1085883a 	add	r2,r2,r2
  80c750:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  80c754:	e0bff917 	ldw	r2,-28(fp)
  80c758:	1007883a 	mov	r3,r2
  80c75c:	e0bffc17 	ldw	r2,-16(fp)
  80c760:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c764:	e03ffa15 	stw	zero,-24(fp)
  80c768:	00002106 	br	80c7f0 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80c76c:	e0bffa17 	ldw	r2,-24(fp)
  80c770:	e0fffc17 	ldw	r3,-16(fp)
  80c774:	108018e4 	muli	r2,r2,99
  80c778:	10c5883a 	add	r2,r2,r3
  80c77c:	10802404 	addi	r2,r2,144
  80c780:	10800043 	ldbu	r2,1(r2)
  80c784:	10803fcc 	andi	r2,r2,255
  80c788:	1080201c 	xori	r2,r2,128
  80c78c:	10bfe004 	addi	r2,r2,-128
  80c790:	10800450 	cmplti	r2,r2,17
  80c794:	1000131e 	bne	r2,zero,80c7e4 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80c798:	e43ffa17 	ldw	r16,-24(fp)
  80c79c:	e0bffa17 	ldw	r2,-24(fp)
  80c7a0:	e0fffc17 	ldw	r3,-16(fp)
  80c7a4:	108018e4 	muli	r2,r2,99
  80c7a8:	10c5883a 	add	r2,r2,r3
  80c7ac:	10802404 	addi	r2,r2,144
  80c7b0:	10800043 	ldbu	r2,1(r2)
  80c7b4:	10803fcc 	andi	r2,r2,255
  80c7b8:	1080201c 	xori	r2,r2,128
  80c7bc:	10bfe004 	addi	r2,r2,-128
  80c7c0:	1008923a 	slli	r4,r2,8
  80c7c4:	e17ff917 	ldw	r5,-28(fp)
  80c7c8:	08008400 	call	800840 <__divsi3>
  80c7cc:	1009883a 	mov	r4,r2
  80c7d0:	e0fffc17 	ldw	r3,-16(fp)
  80c7d4:	808018e4 	muli	r2,r16,99
  80c7d8:	10c5883a 	add	r2,r2,r3
  80c7dc:	10802404 	addi	r2,r2,144
  80c7e0:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c7e4:	e0bffa17 	ldw	r2,-24(fp)
  80c7e8:	10800044 	addi	r2,r2,1
  80c7ec:	e0bffa15 	stw	r2,-24(fp)
  80c7f0:	e0bffa17 	ldw	r2,-24(fp)
  80c7f4:	10800090 	cmplti	r2,r2,2
  80c7f8:	103fdc1e 	bne	r2,zero,80c76c <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80c7fc:	e0bffc17 	ldw	r2,-16(fp)
  80c800:	10800943 	ldbu	r2,37(r2)
  80c804:	10803fcc 	andi	r2,r2,255
  80c808:	1080201c 	xori	r2,r2,128
  80c80c:	10bfe004 	addi	r2,r2,-128
  80c810:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  80c814:	e13ffc17 	ldw	r4,-16(fp)
  80c818:	080bddc0 	call	80bddc <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80c81c:	e0bffc17 	ldw	r2,-16(fp)
  80c820:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80c824:	e0bffc17 	ldw	r2,-16(fp)
  80c828:	10800943 	ldbu	r2,37(r2)
  80c82c:	10c03fcc 	andi	r3,r2,255
  80c830:	18c0201c 	xori	r3,r3,128
  80c834:	18ffe004 	addi	r3,r3,-128
  80c838:	e0bff517 	ldw	r2,-44(fp)
  80c83c:	18800426 	beq	r3,r2,80c850 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80c840:	e0fffc17 	ldw	r3,-16(fp)
  80c844:	00800044 	movi	r2,1
  80c848:	188009c5 	stb	r2,39(r3)
  }
  80c84c:	003feb06 	br	80c7fc <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80c850:	e0bffe17 	ldw	r2,-8(fp)
}
  80c854:	e037883a 	mov	sp,fp
  80c858:	dfc00217 	ldw	ra,8(sp)
  80c85c:	df000117 	ldw	fp,4(sp)
  80c860:	dc000017 	ldw	r16,0(sp)
  80c864:	dec00304 	addi	sp,sp,12
  80c868:	f800283a 	ret

0080c86c <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80c86c:	defffc04 	addi	sp,sp,-16
  80c870:	dfc00315 	stw	ra,12(sp)
  80c874:	df000215 	stw	fp,8(sp)
  80c878:	df000204 	addi	fp,sp,8
  80c87c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80c880:	e0bfff17 	ldw	r2,-4(fp)
  80c884:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80c888:	e0bffe17 	ldw	r2,-8(fp)
  80c88c:	10800943 	ldbu	r2,37(r2)
  80c890:	10803fcc 	andi	r2,r2,255
  80c894:	1080201c 	xori	r2,r2,128
  80c898:	10bfe004 	addi	r2,r2,-128
  80c89c:	10c00044 	addi	r3,r2,1
  80c8a0:	e0bffe17 	ldw	r2,-8(fp)
  80c8a4:	10800983 	ldbu	r2,38(r2)
  80c8a8:	10803fcc 	andi	r2,r2,255
  80c8ac:	1080201c 	xori	r2,r2,128
  80c8b0:	10bfe004 	addi	r2,r2,-128
  80c8b4:	18800316 	blt	r3,r2,80c8c4 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  80c8b8:	e0bffe17 	ldw	r2,-8(fp)
  80c8bc:	10000945 	stb	zero,37(r2)
  80c8c0:	00000606 	br	80c8dc <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80c8c4:	e0bffe17 	ldw	r2,-8(fp)
  80c8c8:	10800943 	ldbu	r2,37(r2)
  80c8cc:	10800044 	addi	r2,r2,1
  80c8d0:	1007883a 	mov	r3,r2
  80c8d4:	e0bffe17 	ldw	r2,-8(fp)
  80c8d8:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80c8dc:	e0bffe17 	ldw	r2,-8(fp)
  80c8e0:	10800983 	ldbu	r2,38(r2)
  80c8e4:	10803fcc 	andi	r2,r2,255
  80c8e8:	1080201c 	xori	r2,r2,128
  80c8ec:	10bfe004 	addi	r2,r2,-128
  80c8f0:	10800050 	cmplti	r2,r2,1
  80c8f4:	1000091e 	bne	r2,zero,80c91c <alt_lcd_16207_timeout+0xb0>
  80c8f8:	e0bffe17 	ldw	r2,-8(fp)
  80c8fc:	108009c3 	ldbu	r2,39(r2)
  80c900:	10803fcc 	andi	r2,r2,255
  80c904:	1080201c 	xori	r2,r2,128
  80c908:	10bfe004 	addi	r2,r2,-128
  80c90c:	1004c03a 	cmpne	r2,r2,zero
  80c910:	1000021e 	bne	r2,zero,80c91c <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  80c914:	e13ffe17 	ldw	r4,-8(fp)
  80c918:	080bddc0 	call	80bddc <lcd_repaint_screen>

  return sp->period;
  80c91c:	e0bffe17 	ldw	r2,-8(fp)
  80c920:	10800717 	ldw	r2,28(r2)
}
  80c924:	e037883a 	mov	sp,fp
  80c928:	dfc00117 	ldw	ra,4(sp)
  80c92c:	df000017 	ldw	fp,0(sp)
  80c930:	dec00204 	addi	sp,sp,8
  80c934:	f800283a 	ret

0080c938 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80c938:	defffc04 	addi	sp,sp,-16
  80c93c:	dfc00315 	stw	ra,12(sp)
  80c940:	df000215 	stw	fp,8(sp)
  80c944:	df000204 	addi	fp,sp,8
  80c948:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80c94c:	e0bfff17 	ldw	r2,-4(fp)
  80c950:	10800017 	ldw	r2,0(r2)
  80c954:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80c958:	e0bfff17 	ldw	r2,-4(fp)
  80c95c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80c960:	010ea604 	movi	r4,15000
  80c964:	080ae680 	call	80ae68 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80c968:	e0bffe17 	ldw	r2,-8(fp)
  80c96c:	1007883a 	mov	r3,r2
  80c970:	00800c04 	movi	r2,48
  80c974:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80c978:	01040104 	movi	r4,4100
  80c97c:	080ae680 	call	80ae68 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80c980:	e0bffe17 	ldw	r2,-8(fp)
  80c984:	1007883a 	mov	r3,r2
  80c988:	00800c04 	movi	r2,48
  80c98c:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80c990:	0100fa04 	movi	r4,1000
  80c994:	080ae680 	call	80ae68 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80c998:	e0bffe17 	ldw	r2,-8(fp)
  80c99c:	1007883a 	mov	r3,r2
  80c9a0:	00800c04 	movi	r2,48
  80c9a4:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80c9a8:	e13fff17 	ldw	r4,-4(fp)
  80c9ac:	01400e04 	movi	r5,56
  80c9b0:	080bb8c0 	call	80bb8c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80c9b4:	e13fff17 	ldw	r4,-4(fp)
  80c9b8:	01400204 	movi	r5,8
  80c9bc:	080bb8c0 	call	80bb8c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80c9c0:	e13fff17 	ldw	r4,-4(fp)
  80c9c4:	080bd180 	call	80bd18 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80c9c8:	e13fff17 	ldw	r4,-4(fp)
  80c9cc:	01400184 	movi	r5,6
  80c9d0:	080bb8c0 	call	80bb8c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80c9d4:	e13fff17 	ldw	r4,-4(fp)
  80c9d8:	01400304 	movi	r5,12
  80c9dc:	080bb8c0 	call	80bb8c <lcd_write_command>

  sp->esccount = -1;
  80c9e0:	e0ffff17 	ldw	r3,-4(fp)
  80c9e4:	00bfffc4 	movi	r2,-1
  80c9e8:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  80c9ec:	e0bfff17 	ldw	r2,-4(fp)
  80c9f0:	11000a04 	addi	r4,r2,40
  80c9f4:	000b883a 	mov	r5,zero
  80c9f8:	01800204 	movi	r6,8
  80c9fc:	08060680 	call	806068 <memset>

  sp->scrollpos = 0;
  80ca00:	e0bfff17 	ldw	r2,-4(fp)
  80ca04:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80ca08:	e0bfff17 	ldw	r2,-4(fp)
  80ca0c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80ca10:	e0bfff17 	ldw	r2,-4(fp)
  80ca14:	100009c5 	stb	zero,39(r2)
  80ca18:	00802074 	movhi	r2,129
  80ca1c:	10871a04 	addi	r2,r2,7272
  80ca20:	10800017 	ldw	r2,0(r2)
  80ca24:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80ca28:	01400284 	movi	r5,10
  80ca2c:	08009000 	call	800900 <__udivsi3>
  80ca30:	1007883a 	mov	r3,r2
  80ca34:	e0bfff17 	ldw	r2,-4(fp)
  80ca38:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  80ca3c:	e0bfff17 	ldw	r2,-4(fp)
  80ca40:	11000104 	addi	r4,r2,4
  80ca44:	e0bfff17 	ldw	r2,-4(fp)
  80ca48:	10800717 	ldw	r2,28(r2)
  80ca4c:	100b883a 	mov	r5,r2
  80ca50:	01802074 	movhi	r6,129
  80ca54:	31b21b04 	addi	r6,r6,-14228
  80ca58:	e1ffff17 	ldw	r7,-4(fp)
  80ca5c:	080cacc0 	call	80cacc <alt_alarm_start>
}
  80ca60:	e037883a 	mov	sp,fp
  80ca64:	dfc00117 	ldw	ra,4(sp)
  80ca68:	df000017 	ldw	fp,0(sp)
  80ca6c:	dec00204 	addi	sp,sp,8
  80ca70:	f800283a 	ret

0080ca74 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80ca74:	defffa04 	addi	sp,sp,-24
  80ca78:	dfc00515 	stw	ra,20(sp)
  80ca7c:	df000415 	stw	fp,16(sp)
  80ca80:	df000404 	addi	fp,sp,16
  80ca84:	e13ffd15 	stw	r4,-12(fp)
  80ca88:	e17ffe15 	stw	r5,-8(fp)
  80ca8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80ca90:	e0bffd17 	ldw	r2,-12(fp)
  80ca94:	10800017 	ldw	r2,0(r2)
  80ca98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  80ca9c:	e0bffc17 	ldw	r2,-16(fp)
  80caa0:	11000a04 	addi	r4,r2,40
  80caa4:	e0bffd17 	ldw	r2,-12(fp)
  80caa8:	11c00217 	ldw	r7,8(r2)
  80caac:	e17ffe17 	ldw	r5,-8(fp)
  80cab0:	e1bfff17 	ldw	r6,-4(fp)
  80cab4:	080c3600 	call	80c360 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80cab8:	e037883a 	mov	sp,fp
  80cabc:	dfc00117 	ldw	ra,4(sp)
  80cac0:	df000017 	ldw	fp,0(sp)
  80cac4:	dec00204 	addi	sp,sp,8
  80cac8:	f800283a 	ret

0080cacc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80cacc:	defff404 	addi	sp,sp,-48
  80cad0:	df000b15 	stw	fp,44(sp)
  80cad4:	df000b04 	addi	fp,sp,44
  80cad8:	e13ffb15 	stw	r4,-20(fp)
  80cadc:	e17ffc15 	stw	r5,-16(fp)
  80cae0:	e1bffd15 	stw	r6,-12(fp)
  80cae4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80cae8:	e03ff915 	stw	zero,-28(fp)
  80caec:	00802074 	movhi	r2,129
  80caf0:	10871a04 	addi	r2,r2,7272
  80caf4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80caf8:	1005003a 	cmpeq	r2,r2,zero
  80cafc:	1000411e 	bne	r2,zero,80cc04 <alt_alarm_start+0x138>
  {
    if (alarm)
  80cb00:	e0bffb17 	ldw	r2,-20(fp)
  80cb04:	1005003a 	cmpeq	r2,r2,zero
  80cb08:	10003b1e 	bne	r2,zero,80cbf8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80cb0c:	e0fffb17 	ldw	r3,-20(fp)
  80cb10:	e0bffd17 	ldw	r2,-12(fp)
  80cb14:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80cb18:	e0fffb17 	ldw	r3,-20(fp)
  80cb1c:	e0bffe17 	ldw	r2,-8(fp)
  80cb20:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cb24:	0005303a 	rdctl	r2,status
  80cb28:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cb2c:	e0fff817 	ldw	r3,-32(fp)
  80cb30:	00bfff84 	movi	r2,-2
  80cb34:	1884703a 	and	r2,r3,r2
  80cb38:	1001703a 	wrctl	status,r2
  
  return context;
  80cb3c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80cb40:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80cb44:	00802074 	movhi	r2,129
  80cb48:	10871b04 	addi	r2,r2,7276
  80cb4c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80cb50:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80cb54:	e0fffc17 	ldw	r3,-16(fp)
  80cb58:	e0bff917 	ldw	r2,-28(fp)
  80cb5c:	1885883a 	add	r2,r3,r2
  80cb60:	10c00044 	addi	r3,r2,1
  80cb64:	e0bffb17 	ldw	r2,-20(fp)
  80cb68:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80cb6c:	e0bffb17 	ldw	r2,-20(fp)
  80cb70:	10c00217 	ldw	r3,8(r2)
  80cb74:	e0bff917 	ldw	r2,-28(fp)
  80cb78:	1880042e 	bgeu	r3,r2,80cb8c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80cb7c:	e0fffb17 	ldw	r3,-20(fp)
  80cb80:	00800044 	movi	r2,1
  80cb84:	18800405 	stb	r2,16(r3)
  80cb88:	00000206 	br	80cb94 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80cb8c:	e0bffb17 	ldw	r2,-20(fp)
  80cb90:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80cb94:	e0fffb17 	ldw	r3,-20(fp)
  80cb98:	00802074 	movhi	r2,129
  80cb9c:	10802104 	addi	r2,r2,132
  80cba0:	e0bff615 	stw	r2,-40(fp)
  80cba4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80cba8:	e0fff717 	ldw	r3,-36(fp)
  80cbac:	e0bff617 	ldw	r2,-40(fp)
  80cbb0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80cbb4:	e0bff617 	ldw	r2,-40(fp)
  80cbb8:	10c00017 	ldw	r3,0(r2)
  80cbbc:	e0bff717 	ldw	r2,-36(fp)
  80cbc0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80cbc4:	e0bff617 	ldw	r2,-40(fp)
  80cbc8:	10c00017 	ldw	r3,0(r2)
  80cbcc:	e0bff717 	ldw	r2,-36(fp)
  80cbd0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80cbd4:	e0fff617 	ldw	r3,-40(fp)
  80cbd8:	e0bff717 	ldw	r2,-36(fp)
  80cbdc:	18800015 	stw	r2,0(r3)
  80cbe0:	e0bffa17 	ldw	r2,-24(fp)
  80cbe4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cbe8:	e0bff517 	ldw	r2,-44(fp)
  80cbec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80cbf0:	e03fff15 	stw	zero,-4(fp)
  80cbf4:	00000506 	br	80cc0c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80cbf8:	00bffa84 	movi	r2,-22
  80cbfc:	e0bfff15 	stw	r2,-4(fp)
  80cc00:	00000206 	br	80cc0c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80cc04:	00bfde84 	movi	r2,-134
  80cc08:	e0bfff15 	stw	r2,-4(fp)
  80cc0c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80cc10:	e037883a 	mov	sp,fp
  80cc14:	df000017 	ldw	fp,0(sp)
  80cc18:	dec00104 	addi	sp,sp,4
  80cc1c:	f800283a 	ret

0080cc20 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80cc20:	defffa04 	addi	sp,sp,-24
  80cc24:	dfc00515 	stw	ra,20(sp)
  80cc28:	df000415 	stw	fp,16(sp)
  80cc2c:	df000404 	addi	fp,sp,16
  80cc30:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80cc34:	008000c4 	movi	r2,3
  80cc38:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  80cc3c:	e0fffc17 	ldw	r3,-16(fp)
  80cc40:	008003f4 	movhi	r2,15
  80cc44:	10909004 	addi	r2,r2,16960
  80cc48:	188b383a 	mul	r5,r3,r2
  80cc4c:	0100bef4 	movhi	r4,763
  80cc50:	213c2004 	addi	r4,r4,-3968
  80cc54:	08009000 	call	800900 <__udivsi3>
  80cc58:	100b883a 	mov	r5,r2
  80cc5c:	01200034 	movhi	r4,32768
  80cc60:	213fffc4 	addi	r4,r4,-1
  80cc64:	08009000 	call	800900 <__udivsi3>
  80cc68:	100b883a 	mov	r5,r2
  80cc6c:	e13fff17 	ldw	r4,-4(fp)
  80cc70:	08009000 	call	800900 <__udivsi3>
  80cc74:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80cc78:	e0bffd17 	ldw	r2,-12(fp)
  80cc7c:	1005003a 	cmpeq	r2,r2,zero
  80cc80:	1000281e 	bne	r2,zero,80cd24 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  80cc84:	e03ffe15 	stw	zero,-8(fp)
  80cc88:	00001606 	br	80cce4 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80cc8c:	00a00034 	movhi	r2,32768
  80cc90:	10bfffc4 	addi	r2,r2,-1
  80cc94:	10bfffc4 	addi	r2,r2,-1
  80cc98:	103ffe1e 	bne	r2,zero,80cc94 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80cc9c:	e0fffc17 	ldw	r3,-16(fp)
  80cca0:	008003f4 	movhi	r2,15
  80cca4:	10909004 	addi	r2,r2,16960
  80cca8:	188b383a 	mul	r5,r3,r2
  80ccac:	0100bef4 	movhi	r4,763
  80ccb0:	213c2004 	addi	r4,r4,-3968
  80ccb4:	08009000 	call	800900 <__udivsi3>
  80ccb8:	100b883a 	mov	r5,r2
  80ccbc:	01200034 	movhi	r4,32768
  80ccc0:	213fffc4 	addi	r4,r4,-1
  80ccc4:	08009000 	call	800900 <__udivsi3>
  80ccc8:	1007883a 	mov	r3,r2
  80cccc:	e0bfff17 	ldw	r2,-4(fp)
  80ccd0:	10c5c83a 	sub	r2,r2,r3
  80ccd4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80ccd8:	e0bffe17 	ldw	r2,-8(fp)
  80ccdc:	10800044 	addi	r2,r2,1
  80cce0:	e0bffe15 	stw	r2,-8(fp)
  80cce4:	e0fffe17 	ldw	r3,-8(fp)
  80cce8:	e0bffd17 	ldw	r2,-12(fp)
  80ccec:	18bfe716 	blt	r3,r2,80cc8c <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80ccf0:	e0fffc17 	ldw	r3,-16(fp)
  80ccf4:	008003f4 	movhi	r2,15
  80ccf8:	10909004 	addi	r2,r2,16960
  80ccfc:	188b383a 	mul	r5,r3,r2
  80cd00:	0100bef4 	movhi	r4,763
  80cd04:	213c2004 	addi	r4,r4,-3968
  80cd08:	08009000 	call	800900 <__udivsi3>
  80cd0c:	1007883a 	mov	r3,r2
  80cd10:	e0bfff17 	ldw	r2,-4(fp)
  80cd14:	1885383a 	mul	r2,r3,r2
  80cd18:	10bfffc4 	addi	r2,r2,-1
  80cd1c:	103ffe1e 	bne	r2,zero,80cd18 <alt_busy_sleep+0xf8>
  80cd20:	00000c06 	br	80cd54 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80cd24:	e0fffc17 	ldw	r3,-16(fp)
  80cd28:	008003f4 	movhi	r2,15
  80cd2c:	10909004 	addi	r2,r2,16960
  80cd30:	188b383a 	mul	r5,r3,r2
  80cd34:	0100bef4 	movhi	r4,763
  80cd38:	213c2004 	addi	r4,r4,-3968
  80cd3c:	08009000 	call	800900 <__udivsi3>
  80cd40:	1007883a 	mov	r3,r2
  80cd44:	e0bfff17 	ldw	r2,-4(fp)
  80cd48:	1885383a 	mul	r2,r3,r2
  80cd4c:	10bfffc4 	addi	r2,r2,-1
  80cd50:	00bffe16 	blt	zero,r2,80cd4c <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80cd54:	0005883a 	mov	r2,zero
}
  80cd58:	e037883a 	mov	sp,fp
  80cd5c:	dfc00117 	ldw	ra,4(sp)
  80cd60:	df000017 	ldw	fp,0(sp)
  80cd64:	dec00204 	addi	sp,sp,8
  80cd68:	f800283a 	ret

0080cd6c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80cd6c:	defffe04 	addi	sp,sp,-8
  80cd70:	df000115 	stw	fp,4(sp)
  80cd74:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80cd78:	e03fff15 	stw	zero,-4(fp)
  80cd7c:	00000506 	br	80cd94 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80cd80:	e0bfff17 	ldw	r2,-4(fp)
  80cd84:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80cd88:	e0bfff17 	ldw	r2,-4(fp)
  80cd8c:	10800804 	addi	r2,r2,32
  80cd90:	e0bfff15 	stw	r2,-4(fp)
  80cd94:	e0bfff17 	ldw	r2,-4(fp)
  80cd98:	10820030 	cmpltui	r2,r2,2048
  80cd9c:	103ff81e 	bne	r2,zero,80cd80 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80cda0:	e037883a 	mov	sp,fp
  80cda4:	df000017 	ldw	fp,0(sp)
  80cda8:	dec00104 	addi	sp,sp,4
  80cdac:	f800283a 	ret

0080cdb0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80cdb0:	defff904 	addi	sp,sp,-28
  80cdb4:	dfc00615 	stw	ra,24(sp)
  80cdb8:	df000515 	stw	fp,20(sp)
  80cdbc:	df000504 	addi	fp,sp,20
  80cdc0:	e13ffd15 	stw	r4,-12(fp)
  80cdc4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80cdc8:	e0bffd17 	ldw	r2,-12(fp)
  80cdcc:	1005003a 	cmpeq	r2,r2,zero
  80cdd0:	1000041e 	bne	r2,zero,80cde4 <alt_dev_llist_insert+0x34>
  80cdd4:	e0bffd17 	ldw	r2,-12(fp)
  80cdd8:	10800217 	ldw	r2,8(r2)
  80cddc:	1004c03a 	cmpne	r2,r2,zero
  80cde0:	1000071e 	bne	r2,zero,80ce00 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80cde4:	080ce640 	call	80ce64 <alt_get_errno>
  80cde8:	1007883a 	mov	r3,r2
  80cdec:	00800584 	movi	r2,22
  80cdf0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80cdf4:	00bffa84 	movi	r2,-22
  80cdf8:	e0bfff15 	stw	r2,-4(fp)
  80cdfc:	00001306 	br	80ce4c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80ce00:	e0fffd17 	ldw	r3,-12(fp)
  80ce04:	e0bffe17 	ldw	r2,-8(fp)
  80ce08:	e0bffb15 	stw	r2,-20(fp)
  80ce0c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80ce10:	e0fffc17 	ldw	r3,-16(fp)
  80ce14:	e0bffb17 	ldw	r2,-20(fp)
  80ce18:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80ce1c:	e0bffb17 	ldw	r2,-20(fp)
  80ce20:	10c00017 	ldw	r3,0(r2)
  80ce24:	e0bffc17 	ldw	r2,-16(fp)
  80ce28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80ce2c:	e0bffb17 	ldw	r2,-20(fp)
  80ce30:	10c00017 	ldw	r3,0(r2)
  80ce34:	e0bffc17 	ldw	r2,-16(fp)
  80ce38:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80ce3c:	e0fffb17 	ldw	r3,-20(fp)
  80ce40:	e0bffc17 	ldw	r2,-16(fp)
  80ce44:	18800015 	stw	r2,0(r3)

  return 0;  
  80ce48:	e03fff15 	stw	zero,-4(fp)
  80ce4c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ce50:	e037883a 	mov	sp,fp
  80ce54:	dfc00117 	ldw	ra,4(sp)
  80ce58:	df000017 	ldw	fp,0(sp)
  80ce5c:	dec00204 	addi	sp,sp,8
  80ce60:	f800283a 	ret

0080ce64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ce64:	defffd04 	addi	sp,sp,-12
  80ce68:	dfc00215 	stw	ra,8(sp)
  80ce6c:	df000115 	stw	fp,4(sp)
  80ce70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ce74:	00802074 	movhi	r2,129
  80ce78:	10801f04 	addi	r2,r2,124
  80ce7c:	10800017 	ldw	r2,0(r2)
  80ce80:	1005003a 	cmpeq	r2,r2,zero
  80ce84:	1000061e 	bne	r2,zero,80cea0 <alt_get_errno+0x3c>
  80ce88:	00802074 	movhi	r2,129
  80ce8c:	10801f04 	addi	r2,r2,124
  80ce90:	10800017 	ldw	r2,0(r2)
  80ce94:	103ee83a 	callr	r2
  80ce98:	e0bfff15 	stw	r2,-4(fp)
  80ce9c:	00000306 	br	80ceac <alt_get_errno+0x48>
  80cea0:	00802074 	movhi	r2,129
  80cea4:	10870c04 	addi	r2,r2,7216
  80cea8:	e0bfff15 	stw	r2,-4(fp)
  80ceac:	e0bfff17 	ldw	r2,-4(fp)
}
  80ceb0:	e037883a 	mov	sp,fp
  80ceb4:	dfc00117 	ldw	ra,4(sp)
  80ceb8:	df000017 	ldw	fp,0(sp)
  80cebc:	dec00204 	addi	sp,sp,8
  80cec0:	f800283a 	ret

0080cec4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80cec4:	defffd04 	addi	sp,sp,-12
  80cec8:	dfc00215 	stw	ra,8(sp)
  80cecc:	df000115 	stw	fp,4(sp)
  80ced0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ced4:	00bfff04 	movi	r2,-4
  80ced8:	00c02074 	movhi	r3,129
  80cedc:	18f78704 	addi	r3,r3,-8676
  80cee0:	1885883a 	add	r2,r3,r2
  80cee4:	e0bfff15 	stw	r2,-4(fp)
  80cee8:	00000606 	br	80cf04 <_do_ctors+0x40>
        (*ctor) (); 
  80ceec:	e0bfff17 	ldw	r2,-4(fp)
  80cef0:	10800017 	ldw	r2,0(r2)
  80cef4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80cef8:	e0bfff17 	ldw	r2,-4(fp)
  80cefc:	10bfff04 	addi	r2,r2,-4
  80cf00:	e0bfff15 	stw	r2,-4(fp)
  80cf04:	e0ffff17 	ldw	r3,-4(fp)
  80cf08:	00802074 	movhi	r2,129
  80cf0c:	10b78604 	addi	r2,r2,-8680
  80cf10:	18bff62e 	bgeu	r3,r2,80ceec <_do_ctors+0x28>
        (*ctor) (); 
}
  80cf14:	e037883a 	mov	sp,fp
  80cf18:	dfc00117 	ldw	ra,4(sp)
  80cf1c:	df000017 	ldw	fp,0(sp)
  80cf20:	dec00204 	addi	sp,sp,8
  80cf24:	f800283a 	ret

0080cf28 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80cf28:	defffd04 	addi	sp,sp,-12
  80cf2c:	dfc00215 	stw	ra,8(sp)
  80cf30:	df000115 	stw	fp,4(sp)
  80cf34:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80cf38:	00bfff04 	movi	r2,-4
  80cf3c:	00c02074 	movhi	r3,129
  80cf40:	18f78704 	addi	r3,r3,-8676
  80cf44:	1885883a 	add	r2,r3,r2
  80cf48:	e0bfff15 	stw	r2,-4(fp)
  80cf4c:	00000606 	br	80cf68 <_do_dtors+0x40>
        (*dtor) (); 
  80cf50:	e0bfff17 	ldw	r2,-4(fp)
  80cf54:	10800017 	ldw	r2,0(r2)
  80cf58:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80cf5c:	e0bfff17 	ldw	r2,-4(fp)
  80cf60:	10bfff04 	addi	r2,r2,-4
  80cf64:	e0bfff15 	stw	r2,-4(fp)
  80cf68:	e0ffff17 	ldw	r3,-4(fp)
  80cf6c:	00802074 	movhi	r2,129
  80cf70:	10b78704 	addi	r2,r2,-8676
  80cf74:	18bff62e 	bgeu	r3,r2,80cf50 <_do_dtors+0x28>
        (*dtor) (); 
}
  80cf78:	e037883a 	mov	sp,fp
  80cf7c:	dfc00117 	ldw	ra,4(sp)
  80cf80:	df000017 	ldw	fp,0(sp)
  80cf84:	dec00204 	addi	sp,sp,8
  80cf88:	f800283a 	ret

0080cf8c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80cf8c:	defffe04 	addi	sp,sp,-8
  80cf90:	dfc00115 	stw	ra,4(sp)
  80cf94:	df000015 	stw	fp,0(sp)
  80cf98:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80cf9c:	0009883a 	mov	r4,zero
  80cfa0:	01440004 	movi	r5,4096
  80cfa4:	080d9140 	call	80d914 <alt_icache_flush>
#endif
}
  80cfa8:	e037883a 	mov	sp,fp
  80cfac:	dfc00117 	ldw	ra,4(sp)
  80cfb0:	df000017 	ldw	fp,0(sp)
  80cfb4:	dec00204 	addi	sp,sp,8
  80cfb8:	f800283a 	ret

0080cfbc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80cfbc:	defff904 	addi	sp,sp,-28
  80cfc0:	dfc00615 	stw	ra,24(sp)
  80cfc4:	df000515 	stw	fp,20(sp)
  80cfc8:	df000504 	addi	fp,sp,20
  80cfcc:	e13ffc15 	stw	r4,-16(fp)
  80cfd0:	e17ffd15 	stw	r5,-12(fp)
  80cfd4:	e1bffe15 	stw	r6,-8(fp)
  80cfd8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80cfdc:	e0800217 	ldw	r2,8(fp)
  80cfe0:	d8800015 	stw	r2,0(sp)
  80cfe4:	e13ffc17 	ldw	r4,-16(fp)
  80cfe8:	e17ffd17 	ldw	r5,-12(fp)
  80cfec:	e1bffe17 	ldw	r6,-8(fp)
  80cff0:	e1ffff17 	ldw	r7,-4(fp)
  80cff4:	080d1900 	call	80d190 <alt_iic_isr_register>
}  
  80cff8:	e037883a 	mov	sp,fp
  80cffc:	dfc00117 	ldw	ra,4(sp)
  80d000:	df000017 	ldw	fp,0(sp)
  80d004:	dec00204 	addi	sp,sp,8
  80d008:	f800283a 	ret

0080d00c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80d00c:	defff904 	addi	sp,sp,-28
  80d010:	df000615 	stw	fp,24(sp)
  80d014:	df000604 	addi	fp,sp,24
  80d018:	e13ffe15 	stw	r4,-8(fp)
  80d01c:	e17fff15 	stw	r5,-4(fp)
  80d020:	e0bfff17 	ldw	r2,-4(fp)
  80d024:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d028:	0005303a 	rdctl	r2,status
  80d02c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d030:	e0fffb17 	ldw	r3,-20(fp)
  80d034:	00bfff84 	movi	r2,-2
  80d038:	1884703a 	and	r2,r3,r2
  80d03c:	1001703a 	wrctl	status,r2
  
  return context;
  80d040:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80d044:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80d048:	e0fffc17 	ldw	r3,-16(fp)
  80d04c:	00800044 	movi	r2,1
  80d050:	10c4983a 	sll	r2,r2,r3
  80d054:	1007883a 	mov	r3,r2
  80d058:	00802074 	movhi	r2,129
  80d05c:	10871c04 	addi	r2,r2,7280
  80d060:	10800017 	ldw	r2,0(r2)
  80d064:	1886b03a 	or	r3,r3,r2
  80d068:	00802074 	movhi	r2,129
  80d06c:	10871c04 	addi	r2,r2,7280
  80d070:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80d074:	00802074 	movhi	r2,129
  80d078:	10871c04 	addi	r2,r2,7280
  80d07c:	10800017 	ldw	r2,0(r2)
  80d080:	100170fa 	wrctl	ienable,r2
  80d084:	e0bffd17 	ldw	r2,-12(fp)
  80d088:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d08c:	e0bffa17 	ldw	r2,-24(fp)
  80d090:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80d094:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80d098:	e037883a 	mov	sp,fp
  80d09c:	df000017 	ldw	fp,0(sp)
  80d0a0:	dec00104 	addi	sp,sp,4
  80d0a4:	f800283a 	ret

0080d0a8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80d0a8:	defff904 	addi	sp,sp,-28
  80d0ac:	df000615 	stw	fp,24(sp)
  80d0b0:	df000604 	addi	fp,sp,24
  80d0b4:	e13ffe15 	stw	r4,-8(fp)
  80d0b8:	e17fff15 	stw	r5,-4(fp)
  80d0bc:	e0bfff17 	ldw	r2,-4(fp)
  80d0c0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d0c4:	0005303a 	rdctl	r2,status
  80d0c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d0cc:	e0fffb17 	ldw	r3,-20(fp)
  80d0d0:	00bfff84 	movi	r2,-2
  80d0d4:	1884703a 	and	r2,r3,r2
  80d0d8:	1001703a 	wrctl	status,r2
  
  return context;
  80d0dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80d0e0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80d0e4:	e0fffc17 	ldw	r3,-16(fp)
  80d0e8:	00800044 	movi	r2,1
  80d0ec:	10c4983a 	sll	r2,r2,r3
  80d0f0:	0084303a 	nor	r2,zero,r2
  80d0f4:	1007883a 	mov	r3,r2
  80d0f8:	00802074 	movhi	r2,129
  80d0fc:	10871c04 	addi	r2,r2,7280
  80d100:	10800017 	ldw	r2,0(r2)
  80d104:	1886703a 	and	r3,r3,r2
  80d108:	00802074 	movhi	r2,129
  80d10c:	10871c04 	addi	r2,r2,7280
  80d110:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80d114:	00802074 	movhi	r2,129
  80d118:	10871c04 	addi	r2,r2,7280
  80d11c:	10800017 	ldw	r2,0(r2)
  80d120:	100170fa 	wrctl	ienable,r2
  80d124:	e0bffd17 	ldw	r2,-12(fp)
  80d128:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d12c:	e0bffa17 	ldw	r2,-24(fp)
  80d130:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80d134:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80d138:	e037883a 	mov	sp,fp
  80d13c:	df000017 	ldw	fp,0(sp)
  80d140:	dec00104 	addi	sp,sp,4
  80d144:	f800283a 	ret

0080d148 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80d148:	defffc04 	addi	sp,sp,-16
  80d14c:	df000315 	stw	fp,12(sp)
  80d150:	df000304 	addi	fp,sp,12
  80d154:	e13ffe15 	stw	r4,-8(fp)
  80d158:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80d15c:	000530fa 	rdctl	r2,ienable
  80d160:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80d164:	e0ffff17 	ldw	r3,-4(fp)
  80d168:	00800044 	movi	r2,1
  80d16c:	10c4983a 	sll	r2,r2,r3
  80d170:	1007883a 	mov	r3,r2
  80d174:	e0bffd17 	ldw	r2,-12(fp)
  80d178:	1884703a 	and	r2,r3,r2
  80d17c:	1004c03a 	cmpne	r2,r2,zero
}
  80d180:	e037883a 	mov	sp,fp
  80d184:	df000017 	ldw	fp,0(sp)
  80d188:	dec00104 	addi	sp,sp,4
  80d18c:	f800283a 	ret

0080d190 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80d190:	defff404 	addi	sp,sp,-48
  80d194:	dfc00b15 	stw	ra,44(sp)
  80d198:	df000a15 	stw	fp,40(sp)
  80d19c:	df000a04 	addi	fp,sp,40
  80d1a0:	e13ffb15 	stw	r4,-20(fp)
  80d1a4:	e17ffc15 	stw	r5,-16(fp)
  80d1a8:	e1bffd15 	stw	r6,-12(fp)
  80d1ac:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80d1b0:	00bffa84 	movi	r2,-22
  80d1b4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80d1b8:	e0bffc17 	ldw	r2,-16(fp)
  80d1bc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80d1c0:	e0bff917 	ldw	r2,-28(fp)
  80d1c4:	10800808 	cmpgei	r2,r2,32
  80d1c8:	1000291e 	bne	r2,zero,80d270 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d1cc:	0005303a 	rdctl	r2,status
  80d1d0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d1d4:	e0fff717 	ldw	r3,-36(fp)
  80d1d8:	00bfff84 	movi	r2,-2
  80d1dc:	1884703a 	and	r2,r3,r2
  80d1e0:	1001703a 	wrctl	status,r2
  
  return context;
  80d1e4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80d1e8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  80d1ec:	e0bff917 	ldw	r2,-28(fp)
  80d1f0:	00c02074 	movhi	r3,129
  80d1f4:	18c72704 	addi	r3,r3,7324
  80d1f8:	100490fa 	slli	r2,r2,3
  80d1fc:	10c7883a 	add	r3,r2,r3
  80d200:	e0bffd17 	ldw	r2,-12(fp)
  80d204:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80d208:	e0bff917 	ldw	r2,-28(fp)
  80d20c:	00c02074 	movhi	r3,129
  80d210:	18c72704 	addi	r3,r3,7324
  80d214:	100490fa 	slli	r2,r2,3
  80d218:	10c5883a 	add	r2,r2,r3
  80d21c:	10c00104 	addi	r3,r2,4
  80d220:	e0bffe17 	ldw	r2,-8(fp)
  80d224:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80d228:	e0bffd17 	ldw	r2,-12(fp)
  80d22c:	1005003a 	cmpeq	r2,r2,zero
  80d230:	1000051e 	bne	r2,zero,80d248 <alt_iic_isr_register+0xb8>
  80d234:	e17ff917 	ldw	r5,-28(fp)
  80d238:	e13ffb17 	ldw	r4,-20(fp)
  80d23c:	080d00c0 	call	80d00c <alt_ic_irq_enable>
  80d240:	e0bfff15 	stw	r2,-4(fp)
  80d244:	00000406 	br	80d258 <alt_iic_isr_register+0xc8>
  80d248:	e17ff917 	ldw	r5,-28(fp)
  80d24c:	e13ffb17 	ldw	r4,-20(fp)
  80d250:	080d0a80 	call	80d0a8 <alt_ic_irq_disable>
  80d254:	e0bfff15 	stw	r2,-4(fp)
  80d258:	e0bfff17 	ldw	r2,-4(fp)
  80d25c:	e0bffa15 	stw	r2,-24(fp)
  80d260:	e0bff817 	ldw	r2,-32(fp)
  80d264:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d268:	e0bff617 	ldw	r2,-40(fp)
  80d26c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80d270:	e0bffa17 	ldw	r2,-24(fp)
}
  80d274:	e037883a 	mov	sp,fp
  80d278:	dfc00117 	ldw	ra,4(sp)
  80d27c:	df000017 	ldw	fp,0(sp)
  80d280:	dec00204 	addi	sp,sp,8
  80d284:	f800283a 	ret

0080d288 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80d288:	defff904 	addi	sp,sp,-28
  80d28c:	dfc00615 	stw	ra,24(sp)
  80d290:	df000515 	stw	fp,20(sp)
  80d294:	df000504 	addi	fp,sp,20
  80d298:	e13ffc15 	stw	r4,-16(fp)
  80d29c:	e17ffd15 	stw	r5,-12(fp)
  80d2a0:	e1bffe15 	stw	r6,-8(fp)
  80d2a4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80d2a8:	e13ffd17 	ldw	r4,-12(fp)
  80d2ac:	e17ffe17 	ldw	r5,-8(fp)
  80d2b0:	e1bfff17 	ldw	r6,-4(fp)
  80d2b4:	080d4a00 	call	80d4a0 <open>
  80d2b8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80d2bc:	e0bffb17 	ldw	r2,-20(fp)
  80d2c0:	1004803a 	cmplt	r2,r2,zero
  80d2c4:	10001c1e 	bne	r2,zero,80d338 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80d2c8:	e0bffb17 	ldw	r2,-20(fp)
  80d2cc:	00c02074 	movhi	r3,129
  80d2d0:	18fb5404 	addi	r3,r3,-4784
  80d2d4:	10800324 	muli	r2,r2,12
  80d2d8:	10c5883a 	add	r2,r2,r3
  80d2dc:	10c00017 	ldw	r3,0(r2)
  80d2e0:	e0bffc17 	ldw	r2,-16(fp)
  80d2e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80d2e8:	e0bffb17 	ldw	r2,-20(fp)
  80d2ec:	00c02074 	movhi	r3,129
  80d2f0:	18fb5404 	addi	r3,r3,-4784
  80d2f4:	10800324 	muli	r2,r2,12
  80d2f8:	10c5883a 	add	r2,r2,r3
  80d2fc:	10800104 	addi	r2,r2,4
  80d300:	10c00017 	ldw	r3,0(r2)
  80d304:	e0bffc17 	ldw	r2,-16(fp)
  80d308:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80d30c:	e0bffb17 	ldw	r2,-20(fp)
  80d310:	00c02074 	movhi	r3,129
  80d314:	18fb5404 	addi	r3,r3,-4784
  80d318:	10800324 	muli	r2,r2,12
  80d31c:	10c5883a 	add	r2,r2,r3
  80d320:	10800204 	addi	r2,r2,8
  80d324:	10c00017 	ldw	r3,0(r2)
  80d328:	e0bffc17 	ldw	r2,-16(fp)
  80d32c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80d330:	e13ffb17 	ldw	r4,-20(fp)
  80d334:	080aba80 	call	80aba8 <alt_release_fd>
  }
} 
  80d338:	e037883a 	mov	sp,fp
  80d33c:	dfc00117 	ldw	ra,4(sp)
  80d340:	df000017 	ldw	fp,0(sp)
  80d344:	dec00204 	addi	sp,sp,8
  80d348:	f800283a 	ret

0080d34c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80d34c:	defffb04 	addi	sp,sp,-20
  80d350:	dfc00415 	stw	ra,16(sp)
  80d354:	df000315 	stw	fp,12(sp)
  80d358:	df000304 	addi	fp,sp,12
  80d35c:	e13ffd15 	stw	r4,-12(fp)
  80d360:	e17ffe15 	stw	r5,-8(fp)
  80d364:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80d368:	01002074 	movhi	r4,129
  80d36c:	213b5704 	addi	r4,r4,-4772
  80d370:	e17ffd17 	ldw	r5,-12(fp)
  80d374:	01800044 	movi	r6,1
  80d378:	01c07fc4 	movi	r7,511
  80d37c:	080d2880 	call	80d288 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80d380:	01002074 	movhi	r4,129
  80d384:	213b5404 	addi	r4,r4,-4784
  80d388:	e17ffe17 	ldw	r5,-8(fp)
  80d38c:	000d883a 	mov	r6,zero
  80d390:	01c07fc4 	movi	r7,511
  80d394:	080d2880 	call	80d288 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80d398:	01002074 	movhi	r4,129
  80d39c:	213b5a04 	addi	r4,r4,-4760
  80d3a0:	e17fff17 	ldw	r5,-4(fp)
  80d3a4:	01800044 	movi	r6,1
  80d3a8:	01c07fc4 	movi	r7,511
  80d3ac:	080d2880 	call	80d288 <alt_open_fd>
}  
  80d3b0:	e037883a 	mov	sp,fp
  80d3b4:	dfc00117 	ldw	ra,4(sp)
  80d3b8:	df000017 	ldw	fp,0(sp)
  80d3bc:	dec00204 	addi	sp,sp,8
  80d3c0:	f800283a 	ret

0080d3c4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80d3c4:	defffc04 	addi	sp,sp,-16
  80d3c8:	df000315 	stw	fp,12(sp)
  80d3cc:	df000304 	addi	fp,sp,12
  80d3d0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80d3d4:	e0bffe17 	ldw	r2,-8(fp)
  80d3d8:	10800217 	ldw	r2,8(r2)
  80d3dc:	10d00034 	orhi	r3,r2,16384
  80d3e0:	e0bffe17 	ldw	r2,-8(fp)
  80d3e4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80d3e8:	e03ffd15 	stw	zero,-12(fp)
  80d3ec:	00002006 	br	80d470 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80d3f0:	e0bffd17 	ldw	r2,-12(fp)
  80d3f4:	00c02074 	movhi	r3,129
  80d3f8:	18fb5404 	addi	r3,r3,-4784
  80d3fc:	10800324 	muli	r2,r2,12
  80d400:	10c5883a 	add	r2,r2,r3
  80d404:	10c00017 	ldw	r3,0(r2)
  80d408:	e0bffe17 	ldw	r2,-8(fp)
  80d40c:	10800017 	ldw	r2,0(r2)
  80d410:	1880141e 	bne	r3,r2,80d464 <alt_file_locked+0xa0>
  80d414:	e0bffd17 	ldw	r2,-12(fp)
  80d418:	00c02074 	movhi	r3,129
  80d41c:	18fb5404 	addi	r3,r3,-4784
  80d420:	10800324 	muli	r2,r2,12
  80d424:	10c5883a 	add	r2,r2,r3
  80d428:	10800204 	addi	r2,r2,8
  80d42c:	10800017 	ldw	r2,0(r2)
  80d430:	1004403a 	cmpge	r2,r2,zero
  80d434:	10000b1e 	bne	r2,zero,80d464 <alt_file_locked+0xa0>
  80d438:	e0bffd17 	ldw	r2,-12(fp)
  80d43c:	10800324 	muli	r2,r2,12
  80d440:	1007883a 	mov	r3,r2
  80d444:	00802074 	movhi	r2,129
  80d448:	10bb5404 	addi	r2,r2,-4784
  80d44c:	1887883a 	add	r3,r3,r2
  80d450:	e0bffe17 	ldw	r2,-8(fp)
  80d454:	18800326 	beq	r3,r2,80d464 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80d458:	00bffcc4 	movi	r2,-13
  80d45c:	e0bfff15 	stw	r2,-4(fp)
  80d460:	00000a06 	br	80d48c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80d464:	e0bffd17 	ldw	r2,-12(fp)
  80d468:	10800044 	addi	r2,r2,1
  80d46c:	e0bffd15 	stw	r2,-12(fp)
  80d470:	00802074 	movhi	r2,129
  80d474:	10801e04 	addi	r2,r2,120
  80d478:	10800017 	ldw	r2,0(r2)
  80d47c:	1007883a 	mov	r3,r2
  80d480:	e0bffd17 	ldw	r2,-12(fp)
  80d484:	18bfda2e 	bgeu	r3,r2,80d3f0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80d488:	e03fff15 	stw	zero,-4(fp)
  80d48c:	e0bfff17 	ldw	r2,-4(fp)
}
  80d490:	e037883a 	mov	sp,fp
  80d494:	df000017 	ldw	fp,0(sp)
  80d498:	dec00104 	addi	sp,sp,4
  80d49c:	f800283a 	ret

0080d4a0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80d4a0:	defff404 	addi	sp,sp,-48
  80d4a4:	dfc00b15 	stw	ra,44(sp)
  80d4a8:	df000a15 	stw	fp,40(sp)
  80d4ac:	df000a04 	addi	fp,sp,40
  80d4b0:	e13ffb15 	stw	r4,-20(fp)
  80d4b4:	e17ffc15 	stw	r5,-16(fp)
  80d4b8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80d4bc:	00bfffc4 	movi	r2,-1
  80d4c0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80d4c4:	00bffb44 	movi	r2,-19
  80d4c8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80d4cc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80d4d0:	e13ffb17 	ldw	r4,-20(fp)
  80d4d4:	01402074 	movhi	r5,129
  80d4d8:	29401c04 	addi	r5,r5,112
  80d4dc:	080d6a80 	call	80d6a8 <alt_find_dev>
  80d4e0:	e0bffa15 	stw	r2,-24(fp)
  80d4e4:	e0bffa17 	ldw	r2,-24(fp)
  80d4e8:	1004c03a 	cmpne	r2,r2,zero
  80d4ec:	1000051e 	bne	r2,zero,80d504 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80d4f0:	e13ffb17 	ldw	r4,-20(fp)
  80d4f4:	080d73c0 	call	80d73c <alt_find_file>
  80d4f8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80d4fc:	00800044 	movi	r2,1
  80d500:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80d504:	e0bffa17 	ldw	r2,-24(fp)
  80d508:	1005003a 	cmpeq	r2,r2,zero
  80d50c:	1000301e 	bne	r2,zero,80d5d0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80d510:	e13ffa17 	ldw	r4,-24(fp)
  80d514:	080d85c0 	call	80d85c <alt_get_fd>
  80d518:	e0bff815 	stw	r2,-32(fp)
  80d51c:	e0bff817 	ldw	r2,-32(fp)
  80d520:	1004403a 	cmpge	r2,r2,zero
  80d524:	1000031e 	bne	r2,zero,80d534 <open+0x94>
    {
      status = index;
  80d528:	e0bff817 	ldw	r2,-32(fp)
  80d52c:	e0bff715 	stw	r2,-36(fp)
  80d530:	00002906 	br	80d5d8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  80d534:	e0bff817 	ldw	r2,-32(fp)
  80d538:	10800324 	muli	r2,r2,12
  80d53c:	1007883a 	mov	r3,r2
  80d540:	00802074 	movhi	r2,129
  80d544:	10bb5404 	addi	r2,r2,-4784
  80d548:	1885883a 	add	r2,r3,r2
  80d54c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80d550:	e0fffc17 	ldw	r3,-16(fp)
  80d554:	00900034 	movhi	r2,16384
  80d558:	10bfffc4 	addi	r2,r2,-1
  80d55c:	1886703a 	and	r3,r3,r2
  80d560:	e0bff917 	ldw	r2,-28(fp)
  80d564:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80d568:	e0bff617 	ldw	r2,-40(fp)
  80d56c:	1004c03a 	cmpne	r2,r2,zero
  80d570:	1000061e 	bne	r2,zero,80d58c <open+0xec>
  80d574:	e13ff917 	ldw	r4,-28(fp)
  80d578:	080d3c40 	call	80d3c4 <alt_file_locked>
  80d57c:	e0bff715 	stw	r2,-36(fp)
  80d580:	e0bff717 	ldw	r2,-36(fp)
  80d584:	1004803a 	cmplt	r2,r2,zero
  80d588:	1000131e 	bne	r2,zero,80d5d8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80d58c:	e0bffa17 	ldw	r2,-24(fp)
  80d590:	10800317 	ldw	r2,12(r2)
  80d594:	1005003a 	cmpeq	r2,r2,zero
  80d598:	1000091e 	bne	r2,zero,80d5c0 <open+0x120>
  80d59c:	e0bffa17 	ldw	r2,-24(fp)
  80d5a0:	10800317 	ldw	r2,12(r2)
  80d5a4:	e13ff917 	ldw	r4,-28(fp)
  80d5a8:	e17ffb17 	ldw	r5,-20(fp)
  80d5ac:	e1bffc17 	ldw	r6,-16(fp)
  80d5b0:	e1fffd17 	ldw	r7,-12(fp)
  80d5b4:	103ee83a 	callr	r2
  80d5b8:	e0bfff15 	stw	r2,-4(fp)
  80d5bc:	00000106 	br	80d5c4 <open+0x124>
  80d5c0:	e03fff15 	stw	zero,-4(fp)
  80d5c4:	e0bfff17 	ldw	r2,-4(fp)
  80d5c8:	e0bff715 	stw	r2,-36(fp)
  80d5cc:	00000206 	br	80d5d8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80d5d0:	00bffb44 	movi	r2,-19
  80d5d4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80d5d8:	e0bff717 	ldw	r2,-36(fp)
  80d5dc:	1004403a 	cmpge	r2,r2,zero
  80d5e0:	1000091e 	bne	r2,zero,80d608 <open+0x168>
  {
    alt_release_fd (index);  
  80d5e4:	e13ff817 	ldw	r4,-32(fp)
  80d5e8:	080aba80 	call	80aba8 <alt_release_fd>
    ALT_ERRNO = -status;
  80d5ec:	080d6280 	call	80d628 <alt_get_errno>
  80d5f0:	e0fff717 	ldw	r3,-36(fp)
  80d5f4:	00c7c83a 	sub	r3,zero,r3
  80d5f8:	10c00015 	stw	r3,0(r2)
    return -1;
  80d5fc:	00bfffc4 	movi	r2,-1
  80d600:	e0bffe15 	stw	r2,-8(fp)
  80d604:	00000206 	br	80d610 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  80d608:	e0bff817 	ldw	r2,-32(fp)
  80d60c:	e0bffe15 	stw	r2,-8(fp)
  80d610:	e0bffe17 	ldw	r2,-8(fp)
}
  80d614:	e037883a 	mov	sp,fp
  80d618:	dfc00117 	ldw	ra,4(sp)
  80d61c:	df000017 	ldw	fp,0(sp)
  80d620:	dec00204 	addi	sp,sp,8
  80d624:	f800283a 	ret

0080d628 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d628:	defffd04 	addi	sp,sp,-12
  80d62c:	dfc00215 	stw	ra,8(sp)
  80d630:	df000115 	stw	fp,4(sp)
  80d634:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d638:	00802074 	movhi	r2,129
  80d63c:	10801f04 	addi	r2,r2,124
  80d640:	10800017 	ldw	r2,0(r2)
  80d644:	1005003a 	cmpeq	r2,r2,zero
  80d648:	1000061e 	bne	r2,zero,80d664 <alt_get_errno+0x3c>
  80d64c:	00802074 	movhi	r2,129
  80d650:	10801f04 	addi	r2,r2,124
  80d654:	10800017 	ldw	r2,0(r2)
  80d658:	103ee83a 	callr	r2
  80d65c:	e0bfff15 	stw	r2,-4(fp)
  80d660:	00000306 	br	80d670 <alt_get_errno+0x48>
  80d664:	00802074 	movhi	r2,129
  80d668:	10870c04 	addi	r2,r2,7216
  80d66c:	e0bfff15 	stw	r2,-4(fp)
  80d670:	e0bfff17 	ldw	r2,-4(fp)
}
  80d674:	e037883a 	mov	sp,fp
  80d678:	dfc00117 	ldw	ra,4(sp)
  80d67c:	df000017 	ldw	fp,0(sp)
  80d680:	dec00204 	addi	sp,sp,8
  80d684:	f800283a 	ret

0080d688 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  80d688:	deffff04 	addi	sp,sp,-4
  80d68c:	df000015 	stw	fp,0(sp)
  80d690:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80d694:	000170fa 	wrctl	ienable,zero
}
  80d698:	e037883a 	mov	sp,fp
  80d69c:	df000017 	ldw	fp,0(sp)
  80d6a0:	dec00104 	addi	sp,sp,4
  80d6a4:	f800283a 	ret

0080d6a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80d6a8:	defff904 	addi	sp,sp,-28
  80d6ac:	dfc00615 	stw	ra,24(sp)
  80d6b0:	df000515 	stw	fp,20(sp)
  80d6b4:	df000504 	addi	fp,sp,20
  80d6b8:	e13ffd15 	stw	r4,-12(fp)
  80d6bc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80d6c0:	e0bffe17 	ldw	r2,-8(fp)
  80d6c4:	10800017 	ldw	r2,0(r2)
  80d6c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80d6cc:	e13ffd17 	ldw	r4,-12(fp)
  80d6d0:	0800c4c0 	call	800c4c <strlen>
  80d6d4:	10800044 	addi	r2,r2,1
  80d6d8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80d6dc:	00000d06 	br	80d714 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80d6e0:	e0bffc17 	ldw	r2,-16(fp)
  80d6e4:	11000217 	ldw	r4,8(r2)
  80d6e8:	e1bffb17 	ldw	r6,-20(fp)
  80d6ec:	e17ffd17 	ldw	r5,-12(fp)
  80d6f0:	080d9f00 	call	80d9f0 <memcmp>
  80d6f4:	1004c03a 	cmpne	r2,r2,zero
  80d6f8:	1000031e 	bne	r2,zero,80d708 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80d6fc:	e0bffc17 	ldw	r2,-16(fp)
  80d700:	e0bfff15 	stw	r2,-4(fp)
  80d704:	00000706 	br	80d724 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80d708:	e0bffc17 	ldw	r2,-16(fp)
  80d70c:	10800017 	ldw	r2,0(r2)
  80d710:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80d714:	e0fffe17 	ldw	r3,-8(fp)
  80d718:	e0bffc17 	ldw	r2,-16(fp)
  80d71c:	10fff01e 	bne	r2,r3,80d6e0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80d720:	e03fff15 	stw	zero,-4(fp)
  80d724:	e0bfff17 	ldw	r2,-4(fp)
}
  80d728:	e037883a 	mov	sp,fp
  80d72c:	dfc00117 	ldw	ra,4(sp)
  80d730:	df000017 	ldw	fp,0(sp)
  80d734:	dec00204 	addi	sp,sp,8
  80d738:	f800283a 	ret

0080d73c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80d73c:	defffa04 	addi	sp,sp,-24
  80d740:	dfc00515 	stw	ra,20(sp)
  80d744:	df000415 	stw	fp,16(sp)
  80d748:	df000404 	addi	fp,sp,16
  80d74c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80d750:	00802074 	movhi	r2,129
  80d754:	10801a04 	addi	r2,r2,104
  80d758:	10800017 	ldw	r2,0(r2)
  80d75c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80d760:	00003306 	br	80d830 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80d764:	e0bffd17 	ldw	r2,-12(fp)
  80d768:	11000217 	ldw	r4,8(r2)
  80d76c:	0800c4c0 	call	800c4c <strlen>
  80d770:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80d774:	e0bffd17 	ldw	r2,-12(fp)
  80d778:	10c00217 	ldw	r3,8(r2)
  80d77c:	e0bffc17 	ldw	r2,-16(fp)
  80d780:	1885883a 	add	r2,r3,r2
  80d784:	10bfffc4 	addi	r2,r2,-1
  80d788:	10800003 	ldbu	r2,0(r2)
  80d78c:	10803fcc 	andi	r2,r2,255
  80d790:	1080201c 	xori	r2,r2,128
  80d794:	10bfe004 	addi	r2,r2,-128
  80d798:	10800bd8 	cmpnei	r2,r2,47
  80d79c:	1000031e 	bne	r2,zero,80d7ac <alt_find_file+0x70>
    {
      len -= 1;
  80d7a0:	e0bffc17 	ldw	r2,-16(fp)
  80d7a4:	10bfffc4 	addi	r2,r2,-1
  80d7a8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80d7ac:	e0bffc17 	ldw	r2,-16(fp)
  80d7b0:	1007883a 	mov	r3,r2
  80d7b4:	e0bffe17 	ldw	r2,-8(fp)
  80d7b8:	1885883a 	add	r2,r3,r2
  80d7bc:	10800003 	ldbu	r2,0(r2)
  80d7c0:	10803fcc 	andi	r2,r2,255
  80d7c4:	1080201c 	xori	r2,r2,128
  80d7c8:	10bfe004 	addi	r2,r2,-128
  80d7cc:	10800be0 	cmpeqi	r2,r2,47
  80d7d0:	10000a1e 	bne	r2,zero,80d7fc <alt_find_file+0xc0>
  80d7d4:	e0bffc17 	ldw	r2,-16(fp)
  80d7d8:	1007883a 	mov	r3,r2
  80d7dc:	e0bffe17 	ldw	r2,-8(fp)
  80d7e0:	1885883a 	add	r2,r3,r2
  80d7e4:	10800003 	ldbu	r2,0(r2)
  80d7e8:	10803fcc 	andi	r2,r2,255
  80d7ec:	1080201c 	xori	r2,r2,128
  80d7f0:	10bfe004 	addi	r2,r2,-128
  80d7f4:	1004c03a 	cmpne	r2,r2,zero
  80d7f8:	10000a1e 	bne	r2,zero,80d824 <alt_find_file+0xe8>
  80d7fc:	e0bffd17 	ldw	r2,-12(fp)
  80d800:	11000217 	ldw	r4,8(r2)
  80d804:	e1bffc17 	ldw	r6,-16(fp)
  80d808:	e17ffe17 	ldw	r5,-8(fp)
  80d80c:	080d9f00 	call	80d9f0 <memcmp>
  80d810:	1004c03a 	cmpne	r2,r2,zero
  80d814:	1000031e 	bne	r2,zero,80d824 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80d818:	e0bffd17 	ldw	r2,-12(fp)
  80d81c:	e0bfff15 	stw	r2,-4(fp)
  80d820:	00000806 	br	80d844 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80d824:	e0bffd17 	ldw	r2,-12(fp)
  80d828:	10800017 	ldw	r2,0(r2)
  80d82c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80d830:	00c02074 	movhi	r3,129
  80d834:	18c01a04 	addi	r3,r3,104
  80d838:	e0bffd17 	ldw	r2,-12(fp)
  80d83c:	10ffc91e 	bne	r2,r3,80d764 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80d840:	e03fff15 	stw	zero,-4(fp)
  80d844:	e0bfff17 	ldw	r2,-4(fp)
}
  80d848:	e037883a 	mov	sp,fp
  80d84c:	dfc00117 	ldw	ra,4(sp)
  80d850:	df000017 	ldw	fp,0(sp)
  80d854:	dec00204 	addi	sp,sp,8
  80d858:	f800283a 	ret

0080d85c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80d85c:	defffc04 	addi	sp,sp,-16
  80d860:	df000315 	stw	fp,12(sp)
  80d864:	df000304 	addi	fp,sp,12
  80d868:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80d86c:	00bffa04 	movi	r2,-24
  80d870:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80d874:	e03ffe15 	stw	zero,-8(fp)
  80d878:	00001e06 	br	80d8f4 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  80d87c:	e0bffe17 	ldw	r2,-8(fp)
  80d880:	00c02074 	movhi	r3,129
  80d884:	18fb5404 	addi	r3,r3,-4784
  80d888:	10800324 	muli	r2,r2,12
  80d88c:	10c5883a 	add	r2,r2,r3
  80d890:	10800017 	ldw	r2,0(r2)
  80d894:	1004c03a 	cmpne	r2,r2,zero
  80d898:	1000131e 	bne	r2,zero,80d8e8 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  80d89c:	e0bffe17 	ldw	r2,-8(fp)
  80d8a0:	00c02074 	movhi	r3,129
  80d8a4:	18fb5404 	addi	r3,r3,-4784
  80d8a8:	10800324 	muli	r2,r2,12
  80d8ac:	10c7883a 	add	r3,r2,r3
  80d8b0:	e0bfff17 	ldw	r2,-4(fp)
  80d8b4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80d8b8:	00802074 	movhi	r2,129
  80d8bc:	10801e04 	addi	r2,r2,120
  80d8c0:	10c00017 	ldw	r3,0(r2)
  80d8c4:	e0bffe17 	ldw	r2,-8(fp)
  80d8c8:	1880040e 	bge	r3,r2,80d8dc <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  80d8cc:	00c02074 	movhi	r3,129
  80d8d0:	18c01e04 	addi	r3,r3,120
  80d8d4:	e0bffe17 	ldw	r2,-8(fp)
  80d8d8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  80d8dc:	e0bffe17 	ldw	r2,-8(fp)
  80d8e0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  80d8e4:	00000606 	br	80d900 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80d8e8:	e0bffe17 	ldw	r2,-8(fp)
  80d8ec:	10800044 	addi	r2,r2,1
  80d8f0:	e0bffe15 	stw	r2,-8(fp)
  80d8f4:	e0bffe17 	ldw	r2,-8(fp)
  80d8f8:	10800810 	cmplti	r2,r2,32
  80d8fc:	103fdf1e 	bne	r2,zero,80d87c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80d900:	e0bffd17 	ldw	r2,-12(fp)
}
  80d904:	e037883a 	mov	sp,fp
  80d908:	df000017 	ldw	fp,0(sp)
  80d90c:	dec00104 	addi	sp,sp,4
  80d910:	f800283a 	ret

0080d914 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80d914:	defffb04 	addi	sp,sp,-20
  80d918:	df000415 	stw	fp,16(sp)
  80d91c:	df000404 	addi	fp,sp,16
  80d920:	e13ffe15 	stw	r4,-8(fp)
  80d924:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80d928:	e0bfff17 	ldw	r2,-4(fp)
  80d92c:	10840070 	cmpltui	r2,r2,4097
  80d930:	1000021e 	bne	r2,zero,80d93c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80d934:	00840004 	movi	r2,4096
  80d938:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80d93c:	e0fffe17 	ldw	r3,-8(fp)
  80d940:	e0bfff17 	ldw	r2,-4(fp)
  80d944:	1885883a 	add	r2,r3,r2
  80d948:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80d94c:	e0bffe17 	ldw	r2,-8(fp)
  80d950:	e0bffd15 	stw	r2,-12(fp)
  80d954:	00000506 	br	80d96c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80d958:	e0bffd17 	ldw	r2,-12(fp)
  80d95c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80d960:	e0bffd17 	ldw	r2,-12(fp)
  80d964:	10800804 	addi	r2,r2,32
  80d968:	e0bffd15 	stw	r2,-12(fp)
  80d96c:	e0fffd17 	ldw	r3,-12(fp)
  80d970:	e0bffc17 	ldw	r2,-16(fp)
  80d974:	18bff836 	bltu	r3,r2,80d958 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80d978:	e0bffe17 	ldw	r2,-8(fp)
  80d97c:	108007cc 	andi	r2,r2,31
  80d980:	1005003a 	cmpeq	r2,r2,zero
  80d984:	1000021e 	bne	r2,zero,80d990 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80d988:	e0bffd17 	ldw	r2,-12(fp)
  80d98c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80d990:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80d994:	e037883a 	mov	sp,fp
  80d998:	df000017 	ldw	fp,0(sp)
  80d99c:	dec00104 	addi	sp,sp,4
  80d9a0:	f800283a 	ret

0080d9a4 <atexit>:
  80d9a4:	200b883a 	mov	r5,r4
  80d9a8:	000d883a 	mov	r6,zero
  80d9ac:	0009883a 	mov	r4,zero
  80d9b0:	000f883a 	mov	r7,zero
  80d9b4:	080da641 	jmpi	80da64 <__register_exitproc>

0080d9b8 <exit>:
  80d9b8:	defffe04 	addi	sp,sp,-8
  80d9bc:	000b883a 	mov	r5,zero
  80d9c0:	dc000015 	stw	r16,0(sp)
  80d9c4:	dfc00115 	stw	ra,4(sp)
  80d9c8:	2021883a 	mov	r16,r4
  80d9cc:	080db9c0 	call	80db9c <__call_exitprocs>
  80d9d0:	00802074 	movhi	r2,129
  80d9d4:	10801504 	addi	r2,r2,84
  80d9d8:	11000017 	ldw	r4,0(r2)
  80d9dc:	20800f17 	ldw	r2,60(r4)
  80d9e0:	10000126 	beq	r2,zero,80d9e8 <exit+0x30>
  80d9e4:	103ee83a 	callr	r2
  80d9e8:	8009883a 	mov	r4,r16
  80d9ec:	080dd8c0 	call	80dd8c <_exit>

0080d9f0 <memcmp>:
  80d9f0:	00c000c4 	movi	r3,3
  80d9f4:	1980032e 	bgeu	r3,r6,80da04 <memcmp+0x14>
  80d9f8:	2144b03a 	or	r2,r4,r5
  80d9fc:	10c4703a 	and	r2,r2,r3
  80da00:	10000f26 	beq	r2,zero,80da40 <memcmp+0x50>
  80da04:	31ffffc4 	addi	r7,r6,-1
  80da08:	3000061e 	bne	r6,zero,80da24 <memcmp+0x34>
  80da0c:	00000a06 	br	80da38 <memcmp+0x48>
  80da10:	39ffffc4 	addi	r7,r7,-1
  80da14:	00bfffc4 	movi	r2,-1
  80da18:	21000044 	addi	r4,r4,1
  80da1c:	29400044 	addi	r5,r5,1
  80da20:	38800526 	beq	r7,r2,80da38 <memcmp+0x48>
  80da24:	20c00003 	ldbu	r3,0(r4)
  80da28:	28800003 	ldbu	r2,0(r5)
  80da2c:	18bff826 	beq	r3,r2,80da10 <memcmp+0x20>
  80da30:	1885c83a 	sub	r2,r3,r2
  80da34:	f800283a 	ret
  80da38:	0005883a 	mov	r2,zero
  80da3c:	f800283a 	ret
  80da40:	180f883a 	mov	r7,r3
  80da44:	20c00017 	ldw	r3,0(r4)
  80da48:	28800017 	ldw	r2,0(r5)
  80da4c:	18bfed1e 	bne	r3,r2,80da04 <memcmp+0x14>
  80da50:	31bfff04 	addi	r6,r6,-4
  80da54:	21000104 	addi	r4,r4,4
  80da58:	29400104 	addi	r5,r5,4
  80da5c:	39bff936 	bltu	r7,r6,80da44 <memcmp+0x54>
  80da60:	003fe806 	br	80da04 <memcmp+0x14>

0080da64 <__register_exitproc>:
  80da64:	defffa04 	addi	sp,sp,-24
  80da68:	00802074 	movhi	r2,129
  80da6c:	10801504 	addi	r2,r2,84
  80da70:	dc000015 	stw	r16,0(sp)
  80da74:	14000017 	ldw	r16,0(r2)
  80da78:	dd000415 	stw	r20,16(sp)
  80da7c:	2829883a 	mov	r20,r5
  80da80:	81405217 	ldw	r5,328(r16)
  80da84:	dcc00315 	stw	r19,12(sp)
  80da88:	dc800215 	stw	r18,8(sp)
  80da8c:	dc400115 	stw	r17,4(sp)
  80da90:	dfc00515 	stw	ra,20(sp)
  80da94:	2023883a 	mov	r17,r4
  80da98:	3027883a 	mov	r19,r6
  80da9c:	3825883a 	mov	r18,r7
  80daa0:	28002526 	beq	r5,zero,80db38 <__register_exitproc+0xd4>
  80daa4:	29000117 	ldw	r4,4(r5)
  80daa8:	008007c4 	movi	r2,31
  80daac:	11002716 	blt	r2,r4,80db4c <__register_exitproc+0xe8>
  80dab0:	8800101e 	bne	r17,zero,80daf4 <__register_exitproc+0x90>
  80dab4:	2105883a 	add	r2,r4,r4
  80dab8:	1085883a 	add	r2,r2,r2
  80dabc:	20c00044 	addi	r3,r4,1
  80dac0:	1145883a 	add	r2,r2,r5
  80dac4:	0009883a 	mov	r4,zero
  80dac8:	15000215 	stw	r20,8(r2)
  80dacc:	28c00115 	stw	r3,4(r5)
  80dad0:	2005883a 	mov	r2,r4
  80dad4:	dfc00517 	ldw	ra,20(sp)
  80dad8:	dd000417 	ldw	r20,16(sp)
  80dadc:	dcc00317 	ldw	r19,12(sp)
  80dae0:	dc800217 	ldw	r18,8(sp)
  80dae4:	dc400117 	ldw	r17,4(sp)
  80dae8:	dc000017 	ldw	r16,0(sp)
  80daec:	dec00604 	addi	sp,sp,24
  80daf0:	f800283a 	ret
  80daf4:	29802204 	addi	r6,r5,136
  80daf8:	00800044 	movi	r2,1
  80dafc:	110e983a 	sll	r7,r2,r4
  80db00:	30c04017 	ldw	r3,256(r6)
  80db04:	2105883a 	add	r2,r4,r4
  80db08:	1085883a 	add	r2,r2,r2
  80db0c:	1185883a 	add	r2,r2,r6
  80db10:	19c6b03a 	or	r3,r3,r7
  80db14:	14802015 	stw	r18,128(r2)
  80db18:	14c00015 	stw	r19,0(r2)
  80db1c:	00800084 	movi	r2,2
  80db20:	30c04015 	stw	r3,256(r6)
  80db24:	88bfe31e 	bne	r17,r2,80dab4 <__register_exitproc+0x50>
  80db28:	30804117 	ldw	r2,260(r6)
  80db2c:	11c4b03a 	or	r2,r2,r7
  80db30:	30804115 	stw	r2,260(r6)
  80db34:	003fdf06 	br	80dab4 <__register_exitproc+0x50>
  80db38:	00802074 	movhi	r2,129
  80db3c:	10876704 	addi	r2,r2,7580
  80db40:	100b883a 	mov	r5,r2
  80db44:	80805215 	stw	r2,328(r16)
  80db48:	003fd606 	br	80daa4 <__register_exitproc+0x40>
  80db4c:	00800034 	movhi	r2,0
  80db50:	10800004 	addi	r2,r2,0
  80db54:	1000021e 	bne	r2,zero,80db60 <__register_exitproc+0xfc>
  80db58:	013fffc4 	movi	r4,-1
  80db5c:	003fdc06 	br	80dad0 <__register_exitproc+0x6c>
  80db60:	01006404 	movi	r4,400
  80db64:	103ee83a 	callr	r2
  80db68:	1007883a 	mov	r3,r2
  80db6c:	103ffa26 	beq	r2,zero,80db58 <__register_exitproc+0xf4>
  80db70:	80805217 	ldw	r2,328(r16)
  80db74:	180b883a 	mov	r5,r3
  80db78:	18000115 	stw	zero,4(r3)
  80db7c:	18800015 	stw	r2,0(r3)
  80db80:	80c05215 	stw	r3,328(r16)
  80db84:	18006215 	stw	zero,392(r3)
  80db88:	18006315 	stw	zero,396(r3)
  80db8c:	0009883a 	mov	r4,zero
  80db90:	883fc826 	beq	r17,zero,80dab4 <__register_exitproc+0x50>
  80db94:	003fd706 	br	80daf4 <__register_exitproc+0x90>

0080db98 <register_fini>:
  80db98:	f800283a 	ret

0080db9c <__call_exitprocs>:
  80db9c:	00802074 	movhi	r2,129
  80dba0:	10801504 	addi	r2,r2,84
  80dba4:	10800017 	ldw	r2,0(r2)
  80dba8:	defff304 	addi	sp,sp,-52
  80dbac:	df000b15 	stw	fp,44(sp)
  80dbb0:	d8800115 	stw	r2,4(sp)
  80dbb4:	00800034 	movhi	r2,0
  80dbb8:	10800004 	addi	r2,r2,0
  80dbbc:	1005003a 	cmpeq	r2,r2,zero
  80dbc0:	d8800215 	stw	r2,8(sp)
  80dbc4:	d8800117 	ldw	r2,4(sp)
  80dbc8:	dd400815 	stw	r21,32(sp)
  80dbcc:	dd000715 	stw	r20,28(sp)
  80dbd0:	10805204 	addi	r2,r2,328
  80dbd4:	dfc00c15 	stw	ra,48(sp)
  80dbd8:	ddc00a15 	stw	r23,40(sp)
  80dbdc:	dd800915 	stw	r22,36(sp)
  80dbe0:	dcc00615 	stw	r19,24(sp)
  80dbe4:	dc800515 	stw	r18,20(sp)
  80dbe8:	dc400415 	stw	r17,16(sp)
  80dbec:	dc000315 	stw	r16,12(sp)
  80dbf0:	282b883a 	mov	r21,r5
  80dbf4:	2039883a 	mov	fp,r4
  80dbf8:	d8800015 	stw	r2,0(sp)
  80dbfc:	2829003a 	cmpeq	r20,r5,zero
  80dc00:	d8800117 	ldw	r2,4(sp)
  80dc04:	14405217 	ldw	r17,328(r2)
  80dc08:	88001026 	beq	r17,zero,80dc4c <__call_exitprocs+0xb0>
  80dc0c:	ddc00017 	ldw	r23,0(sp)
  80dc10:	88800117 	ldw	r2,4(r17)
  80dc14:	8c802204 	addi	r18,r17,136
  80dc18:	143fffc4 	addi	r16,r2,-1
  80dc1c:	80000916 	blt	r16,zero,80dc44 <__call_exitprocs+0xa8>
  80dc20:	05bfffc4 	movi	r22,-1
  80dc24:	a000151e 	bne	r20,zero,80dc7c <__call_exitprocs+0xe0>
  80dc28:	8409883a 	add	r4,r16,r16
  80dc2c:	2105883a 	add	r2,r4,r4
  80dc30:	1485883a 	add	r2,r2,r18
  80dc34:	10c02017 	ldw	r3,128(r2)
  80dc38:	a8c01126 	beq	r21,r3,80dc80 <__call_exitprocs+0xe4>
  80dc3c:	843fffc4 	addi	r16,r16,-1
  80dc40:	85bff81e 	bne	r16,r22,80dc24 <__call_exitprocs+0x88>
  80dc44:	d8800217 	ldw	r2,8(sp)
  80dc48:	10003126 	beq	r2,zero,80dd10 <__call_exitprocs+0x174>
  80dc4c:	dfc00c17 	ldw	ra,48(sp)
  80dc50:	df000b17 	ldw	fp,44(sp)
  80dc54:	ddc00a17 	ldw	r23,40(sp)
  80dc58:	dd800917 	ldw	r22,36(sp)
  80dc5c:	dd400817 	ldw	r21,32(sp)
  80dc60:	dd000717 	ldw	r20,28(sp)
  80dc64:	dcc00617 	ldw	r19,24(sp)
  80dc68:	dc800517 	ldw	r18,20(sp)
  80dc6c:	dc400417 	ldw	r17,16(sp)
  80dc70:	dc000317 	ldw	r16,12(sp)
  80dc74:	dec00d04 	addi	sp,sp,52
  80dc78:	f800283a 	ret
  80dc7c:	8409883a 	add	r4,r16,r16
  80dc80:	88c00117 	ldw	r3,4(r17)
  80dc84:	2105883a 	add	r2,r4,r4
  80dc88:	1445883a 	add	r2,r2,r17
  80dc8c:	18ffffc4 	addi	r3,r3,-1
  80dc90:	11800217 	ldw	r6,8(r2)
  80dc94:	1c001526 	beq	r3,r16,80dcec <__call_exitprocs+0x150>
  80dc98:	10000215 	stw	zero,8(r2)
  80dc9c:	303fe726 	beq	r6,zero,80dc3c <__call_exitprocs+0xa0>
  80dca0:	00c00044 	movi	r3,1
  80dca4:	1c06983a 	sll	r3,r3,r16
  80dca8:	90804017 	ldw	r2,256(r18)
  80dcac:	8cc00117 	ldw	r19,4(r17)
  80dcb0:	1884703a 	and	r2,r3,r2
  80dcb4:	10001426 	beq	r2,zero,80dd08 <__call_exitprocs+0x16c>
  80dcb8:	90804117 	ldw	r2,260(r18)
  80dcbc:	1884703a 	and	r2,r3,r2
  80dcc0:	10000c1e 	bne	r2,zero,80dcf4 <__call_exitprocs+0x158>
  80dcc4:	2105883a 	add	r2,r4,r4
  80dcc8:	1485883a 	add	r2,r2,r18
  80dccc:	11400017 	ldw	r5,0(r2)
  80dcd0:	e009883a 	mov	r4,fp
  80dcd4:	303ee83a 	callr	r6
  80dcd8:	88800117 	ldw	r2,4(r17)
  80dcdc:	98bfc81e 	bne	r19,r2,80dc00 <__call_exitprocs+0x64>
  80dce0:	b8800017 	ldw	r2,0(r23)
  80dce4:	147fd526 	beq	r2,r17,80dc3c <__call_exitprocs+0xa0>
  80dce8:	003fc506 	br	80dc00 <__call_exitprocs+0x64>
  80dcec:	8c000115 	stw	r16,4(r17)
  80dcf0:	003fea06 	br	80dc9c <__call_exitprocs+0x100>
  80dcf4:	2105883a 	add	r2,r4,r4
  80dcf8:	1485883a 	add	r2,r2,r18
  80dcfc:	11000017 	ldw	r4,0(r2)
  80dd00:	303ee83a 	callr	r6
  80dd04:	003ff406 	br	80dcd8 <__call_exitprocs+0x13c>
  80dd08:	303ee83a 	callr	r6
  80dd0c:	003ff206 	br	80dcd8 <__call_exitprocs+0x13c>
  80dd10:	88800117 	ldw	r2,4(r17)
  80dd14:	1000081e 	bne	r2,zero,80dd38 <__call_exitprocs+0x19c>
  80dd18:	89000017 	ldw	r4,0(r17)
  80dd1c:	20000726 	beq	r4,zero,80dd3c <__call_exitprocs+0x1a0>
  80dd20:	b9000015 	stw	r4,0(r23)
  80dd24:	8809883a 	mov	r4,r17
  80dd28:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  80dd2c:	bc400017 	ldw	r17,0(r23)
  80dd30:	883fb71e 	bne	r17,zero,80dc10 <__call_exitprocs+0x74>
  80dd34:	003fc506 	br	80dc4c <__call_exitprocs+0xb0>
  80dd38:	89000017 	ldw	r4,0(r17)
  80dd3c:	882f883a 	mov	r23,r17
  80dd40:	2023883a 	mov	r17,r4
  80dd44:	883fb21e 	bne	r17,zero,80dc10 <__call_exitprocs+0x74>
  80dd48:	003fc006 	br	80dc4c <__call_exitprocs+0xb0>

0080dd4c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80dd4c:	defffd04 	addi	sp,sp,-12
  80dd50:	df000215 	stw	fp,8(sp)
  80dd54:	df000204 	addi	fp,sp,8
  80dd58:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80dd5c:	e0bfff17 	ldw	r2,-4(fp)
  80dd60:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80dd64:	e0bffe17 	ldw	r2,-8(fp)
  80dd68:	1005003a 	cmpeq	r2,r2,zero
  80dd6c:	1000021e 	bne	r2,zero,80dd78 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80dd70:	002af070 	cmpltui	zero,zero,43969
  80dd74:	00000106 	br	80dd7c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80dd78:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80dd7c:	e037883a 	mov	sp,fp
  80dd80:	df000017 	ldw	fp,0(sp)
  80dd84:	dec00104 	addi	sp,sp,4
  80dd88:	f800283a 	ret

0080dd8c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80dd8c:	defffd04 	addi	sp,sp,-12
  80dd90:	dfc00215 	stw	ra,8(sp)
  80dd94:	df000115 	stw	fp,4(sp)
  80dd98:	df000104 	addi	fp,sp,4
  80dd9c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80dda0:	e13fff17 	ldw	r4,-4(fp)
  80dda4:	080dd4c0 	call	80dd4c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80dda8:	003fff06 	br	80dda8 <_exit+0x1c>
  80ddac:	00000010 	cmplti	zero,zero,0
  80ddb0:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  80ddb4:	00527a01 	jmpi	527a0 <__alt_mem_sdram_0-0x7ad860>
  80ddb8:	011f7c01 	jmpi	11f7c0 <__alt_mem_sdram_0-0x6e0840>
  80ddbc:	001b0c0b 	ldhu	zero,27696(zero)
  80ddc0:	00000028 	cmpgeui	zero,zero,0
  80ddc4:	00000018 	cmpnei	zero,zero,0
  80ddc8:	00807efc 	xorhi	r2,zero,507
  80ddcc:	000005dc 	xori	zero,zero,23
  80ddd0:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  80ddd4:	92099170 	cmpltui	r8,r18,9797
  80ddd8:	95079308 	cmpgei	r20,r18,7756
  80dddc:	97049605 	stb	fp,4696(r18)
  80dde0:	90019f03 	ldbu	zero,1660(r18)
  80dde4:	9c06940a 	0x9c06940a
  80dde8:	00000002 	0x2
  80ddec:	00000028 	cmpgeui	zero,zero,0
  80ddf0:	00000044 	movi	zero,1
  80ddf4:	008084d8 	cmpnei	r2,zero,531
  80ddf8:	000005b0 	cmpltui	zero,zero,22
  80ddfc:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  80de00:	92099168 	cmpgeui	r8,r18,9797
  80de04:	95079308 	cmpgei	r20,r18,7756
  80de08:	9c039705 	stb	r16,3676(r19)
  80de0c:	90019f02 	0x90019f02
  80de10:	9606940a 	0x9606940a
  80de14:	00000004 	movi	zero,0
  80de18:	0080db98 	cmpnei	r2,zero,878
