
lights.elf:     file format elf32-littlenios2
lights.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001223c memsz 0x0001223c flags r-x
    LOAD off    0x0001325c vaddr 0x0081225c paddr 0x00813e5c align 2**12
         filesz 0x00001c00 memsz 0x00001c00 flags rw-
    LOAD off    0x00015a5c vaddr 0x00815a5c paddr 0x00815a5c align 2**12
         filesz 0x00000000 memsz 0x000002f8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011b6c  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000053c  00811d20  00811d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c00  0081225c  00813e5c  0001325c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f8  00815a5c  00815a5c  00015a5c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00014e5c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000010b8  00000000  00000000  00014e80  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001c4f  00000000  00000000  00015f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002b571  00000000  00000000  00017b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a385  00000000  00000000  000430f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001aa48  00000000  00000000  0004d47d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000022e8  00000000  00000000  00067ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002d2b  00000000  00000000  0006a1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e8cc  00000000  00000000  0006cedb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0007b7a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000d38  00000000  00000000  0007b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00080441  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00080444  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00080449  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0008044a  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0008044e  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00080452  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00080456  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  00080461  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0008046c  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00080477  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  00080482  2**0
                  CONTENTS, READONLY
 28 .jdi          0000ff9d  00000000  00000000  000804a2  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000cf0fc  00000000  00000000  0009043f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00811d20 l    d  .rodata	00000000 .rodata
0081225c l    d  .rwdata	00000000 .rwdata
00815a5c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Fractal.c
00000000 l    df *ABS*	00000000 Project.c
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 ef_pow.c
00813df0 l     O .rwdata	00000008 bp
00813df8 l     O .rwdata	00000008 dp_l
00813e00 l     O .rwdata	00000008 dp_h
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_rint.c
00811dd0 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_isnan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
008021b8 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00802a90 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0081225c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00803ecc l     F .text	00000058 __sprint_r
00811f76 l     O .rodata	00000010 blanks.3452
00811f66 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00805f30 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080792c l     F .text	00000058 std
00807a38 l     F .text	00000008 __fp_lock
00807a40 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00813e18 l     O .rwdata	00000004 charset
00811fa4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
008120ec l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080c514 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
0080c75c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080c7bc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080c8bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080c9dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080cabc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080cc18 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080ce44 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00813e3c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080d0e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00812c18 l     O .rwdata	00001060 jtag_uart_0
00813c78 l     O .rwdata	0000003c mailbox_0
00813cb4 l     O .rwdata	0000003c mailbox_1
00813cf0 l     O .rwdata	0000003c mailbox_2
00813d2c l     O .rwdata	0000003c mailbox_3
00813d68 l     O .rwdata	00000030 altera_ro_zipfs
00813d98 l     O .rwdata	00000054 video_pixel_buffer_dma_0
0080d40c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080d64c l     F .text	00000228 altera_avalon_jtag_uart_irq
0080d874 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
0080e048 l     F .text	0000006c alt_avalon_mutex_reg
0080e0b4 l     F .text	00000060 alt_get_errno
0080e248 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0080e418 l     F .text	0000007c alt_mutex_trylock
0080e4ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_ro_zipfs.c
0080e71c l     F .text	00000074 read_word
0080e790 l     F .text	00000050 read_word_inc
0080e7e0 l     F .text	00000048 read_half_word
0080e828 l     F .text	00000050 read_half_word_inc
0080e878 l     F .text	00000118 check_file_header
0080eabc l     F .text	000000a0 check_directory_table
0080eb5c l     F .text	000000ac find_directory_entry
0080ec08 l     F .text	00000160 find_file_entry_by_name
0080ed68 l     F .text	00000180 find_file_entry
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00810a44 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00810f8c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
008110c8 l     F .text	000000dc alt_file_locked
0081132c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00811a9c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00811c50 l     F .text	00000040 alt_sim_halt
00800200 g     F .text	00000084 genColor
00815a5c g     O .bss	00000008 targetArrayXYMaster
008096e8 g     F .text	00000094 _mprec_log10
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
008097d4 g     F .text	00000088 __any_on
0080aee0 g     F .text	00000070 _isatty_r
008120c4 g     O .rodata	00000028 __mprec_tinytens
0080cc78 g     F .text	0000006c alt_main
0080e298 g     F .text	000000a8 altera_avalon_mailbox_pend
0080fef8 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00803cd0 g     F .text	000000a0 _puts_r
00815ac4 g     O .bss	00000100 alt_irq
0080af50 g     F .text	00000078 _lseek_r
00813e5c g       *ABS*	00000000 __flash_rwdata_start
0080bf90 g     F .text	00000088 __eqdf2
00815d54 g       *ABS*	00000000 __alt_heap_start
0080e340 g     F .text	000000d8 altera_avalon_mailbox_get
00803c58 g     F .text	00000044 printf
0080a9ac g     F .text	00000068 __sseek
00807994 g     F .text	000000a4 __sinit
0080866c g     F .text	00000084 _setlocale_r
00807a94 g     F .text	00000068 __sfmoreglue
0080cd04 g     F .text	00000020 __malloc_unlock
00802650 g     F .text	00000174 __divsf3
00809164 g     F .text	000000e0 memmove
00807a84 g     F .text	00000010 _cleanup
00800d18 g     F .text	00000458 powf
0080e5ac g     F .text	00000040 altera_avalon_mutex_trylock
0080985c g     F .text	000000bc _Balloc
0080f2cc g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
0080c018 g     F .text	00000088 __gtdf2
00803c48 g     F .text	00000010 __errno
0080f28c g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00800000 g     F .entry	0000001c __reset
0080e648 g     F .text	0000007c altera_avalon_mutex_is_mine
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080ae6c g     F .text	00000074 _fstat_r
00815a80 g     O .bss	00000004 errno
00803274 g     F .text	00000038 __make_dp
00803708 g     F .text	0000002c __make_fp
00815a88 g     O .bss	00000004 alt_argv
0081bdec g       *ABS*	00000000 _gp
0080239c g     F .text	00000070 __subsf3
0080f46c g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00006000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
00812a98 g     O .rwdata	00000180 alt_fd_list
00810b6c g     F .text	00000094 alt_find_dev
008090c4 g     F .text	000000a0 memcpy
00807a78 g     F .text	0000000c _cleanup_r
0080c1b0 g     F .text	000000f8 __floatsidf
00810c00 g     F .text	00000090 alt_fs_reg
00811050 g     F .text	00000078 alt_io_redirect
0080c128 g     F .text	00000088 __ltdf2
00811d20 g       *ABS*	00000000 __DTOR_END__
00803d70 g     F .text	00000014 puts
0080eee8 g     F .text	00000098 alt_ro_zipfs_open
00811530 g     F .text	00000020 altera_nios2_irq_init
00809638 g     F .text	000000b0 __ratio
0080e18c g     F .text	000000bc altera_avalon_mailbox_post
0080f51c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0080da8c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00803c9c g     F .text	00000034 _printf_r
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0080c650 g     F .text	00000008 __udivsi3
0080c91c g     F .text	000000c0 isatty
00811fd4 g     O .rodata	000000c8 __mprec_tens
0080e16c g     F .text	00000020 altera_avalon_mailbox_close
0080fba8 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00808648 g     F .text	00000008 __locale_charset
0080292c g     F .text	00000078 __lesf2
00811728 g     F .text	00000090 alt_icache_flush
00815a74 g     O .bss	00000004 __malloc_top_pad
00813e14 g     O .rwdata	00000004 __mb_cur_max
00808650 g     F .text	0000000c _localeconv_r
00809f54 g     F .text	0000003c __i2b
0080802c g     F .text	0000049c __sfvwrite_r
00802018 g     F .text	0000001c finitef
0080a934 g     F .text	00000070 _sbrk_r
0081038c g     F .text	000000d0 helper_plot_pixel
00802008 g     F .text	00000010 fabsf
0080afc8 g     F .text	00000078 _read_r
0081265c g     O .rwdata	0000000c __lc_ctype
00813e34 g     O .rwdata	00000004 alt_max_fd
00803a48 g     F .text	00000138 __unpack_d
0080ad48 g     F .text	00000110 _fclose_r
008078f8 g     F .text	00000034 fflush
00800a1c g     F .text	00000224 drawFullSet
00815a78 g     O .bss	00000004 __malloc_max_sbrked_mem
00802a3c g     F .text	00000054 __extendsfdf2
00802034 g     F .text	00000018 isnanf
00802f20 g     F .text	00000074 __adddf3
00809518 g     F .text	00000120 __b2d
0080f550 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0080b61c g     F .text	000005b0 __umoddi3
0080cb28 g     F .text	000000f0 lseek
0080e6c4 g     F .text	00000058 altera_avalon_mutex_first_lock
00813e08 g     O .rwdata	00000004 __fdlib_version
00813e10 g     O .rwdata	00000004 _global_impure_ptr
0080a2d0 g     F .text	000005f4 _realloc_r
00815d54 g       *ABS*	00000000 __bss_end
00810e94 g     F .text	000000f8 alt_iic_isr_register
0080f6b4 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00811424 g     F .text	0000010c alt_tick
0080b040 g     F .text	000005dc __udivdi3
0081209c g     O .rodata	00000028 __mprec_bigtens
0080a1b0 g     F .text	00000120 __s2b
0080c380 g     F .text	00000194 __floatunsidf
00809438 g     F .text	00000060 __mcmp
00807a60 g     F .text	00000018 __fp_lock_all
00810e4c g     F .text	00000048 alt_ic_irq_enabled
0081138c g     F .text	00000098 alt_alarm_stop
00815a90 g     O .bss	00000004 alt_irq_active
0080038c g     F .text	00000168 mandelbrotNoZoom
0080f07c g     F .text	00000148 alt_ro_zipfs_seek
008000ec g     F .exceptions	000000c8 alt_irq_handler
00812a70 g     O .rwdata	00000028 alt_dev_null
008004f4 g     F .text	000001ac barrier
0080e494 g     F .text	00000058 altera_avalon_mutex_open
00801df8 g     F .text	00000210 rint
00803598 g     F .text	000000c8 __unpack_f
0081094c g     F .text	00000044 alt_dcache_flush_all
00809304 g     F .text	00000070 __hi0bits
008102c8 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0080c2a8 g     F .text	000000d8 __fixdfsi
00813e5c g       *ABS*	00000000 __ram_rwdata_end
00813e2c g     O .rwdata	00000008 alt_dev_list
0080cfc0 g     F .text	00000120 write
0081045c g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
0080283c g     F .text	00000078 __gtsf2
00813e48 g     O .rwdata	00000008 alt_mutex_list
0081225c g       *ABS*	00000000 __ram_rodata_end
0080c7e8 g     F .text	000000d4 fstat
0080a090 g     F .text	00000120 __pow5mult
00815a68 g     O .bss	00000004 __nlocale_changed
0080c658 g     F .text	00000008 __umodsi3
00815d54 g       *ABS*	00000000 end
00803438 g     F .text	00000160 __pack_f
00815a64 g     O .bss	00000004 myPixelBuffer
0080d58c g     F .text	000000c0 altera_avalon_jtag_uart_init
00811d1c g       *ABS*	00000000 __CTOR_LIST__
00b50000 g       *ABS*	00000000 __alt_stack_pointer
008033b8 g     F .text	00000080 __clzsi2
0080dcb0 g     F .text	00000240 altera_avalon_jtag_uart_write
0080def0 g     F .text	00000158 alt_avalon_mailbox_init
00807984 g     F .text	00000004 __sfp_lock_acquire
00808fe0 g     F .text	000000e4 memchr
00803f24 g     F .text	00001eac ___vfprintf_internal_r
00803df8 g     F .text	00000060 _sprintf_r
00807d18 g     F .text	00000314 _free_r
00811aa0 g     F .text	000001b0 __call_exitprocs
00815a6c g     O .bss	00000004 __mlocale_changed
00813e20 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
00815a94 g     O .bss	00000004 _alt_tick_rate
00809c20 g     F .text	0000014c __lshift
00815a98 g     O .bss	00000004 _alt_nticks
0080cd24 g     F .text	00000120 read
0080d174 g     F .text	00000298 alt_sys_init
008029a4 g     F .text	00000098 __floatsisf
00811968 g     F .text	00000134 __register_exitproc
00811878 g     F .text	000000f0 strncmp
0080e5ec g     F .text	0000005c altera_avalon_mutex_unlock
00809d6c g     F .text	000001e8 __multiply
0080d924 g     F .text	00000074 altera_avalon_jtag_uart_close
0081225c g       *ABS*	00000000 __ram_rwdata_start
00811d20 g       *ABS*	00000000 __ram_rodata_start
00815a9c g     O .bss	00000028 __malloc_current_mallinfo
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
008027c4 g     F .text	00000078 __eqsf2
00809918 g     F .text	0000017c __d2b
0080d444 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00811670 g     F .text	000000b8 alt_get_fd
00803b80 g     F .text	000000c8 __fpcmp_parts_d
0080acd8 g     F .text	00000070 _close_r
00800710 g     F .text	0000030c drawFrame
00811804 g     F .text	00000074 memcmp
0080d4f4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00815d54 g       *ABS*	00000000 __alt_stack_base
0080d53c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00805df4 g     F .text	0000013c __swsetup_r
00802f94 g     F .text	00000258 __divdf3
00807afc g     F .text	000000f0 __sfp
0080977c g     F .text	00000058 __copybits
00812668 g     O .rwdata	00000408 __malloc_av_
00807990 g     F .text	00000004 __sinit_lock_release
0080bbcc g     F .text	000003c4 __muldf3
00801170 g     F .text	00000b14 __ieee754_powf
0080aa90 g     F .text	00000060 __sread
00811de0 g     O .rodata	00000010 __thenan_sf
00811550 g     F .text	00000120 alt_find_file
00810990 g     F .text	000000b4 alt_dev_llist_insert
0080cce4 g     F .text	00000020 __malloc_lock
0080cf04 g     F .text	000000bc sbrk
00802054 g     F .text	0000014c scalbnf
008076fc g     F .text	000001fc _fflush_r
0080ac24 g     F .text	000000b4 _calloc_r
00815a5c g       *ABS*	00000000 __bss_start
00809244 g     F .text	00000098 memset
00801c84 g     F .text	0000016c __ieee754_sqrtf
00800c40 g     F .text	000000d8 main
00815a8c g     O .bss	00000004 alt_envp
00815a7c g     O .bss	00000004 __malloc_max_total_mem
0080f4c4 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0080d49c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
008028b4 g     F .text	00000078 __ltsf2
0080a9a4 g     F .text	00000008 __sclose
00801df0 g     F .text	00000008 matherr
00b50000 g       *ABS*	00000000 __alt_heap_limit
0080ae58 g     F .text	00000014 fclose
008032ac g     F .text	00000074 __truncdfsf2
00815bc4 g     O .bss	00000190 _atexit0
0080e56c g     F .text	00000040 altera_avalon_mutex_lock
00806148 g     F .text	000015b4 _dtoa_r
008088a0 g     F .text	00000740 _malloc_r
00813e38 g     O .rwdata	00000004 alt_errno
00808590 g     F .text	000000b8 _fwalk
0080c590 g     F .text	00000060 __divsi3
0080ef80 g     F .text	000000fc alt_ro_zipfs_read
00811df0 g     O .rodata	00000014 __thenan_df
00807bec g     F .text	0000012c _malloc_trim_r
00811d20 g       *ABS*	00000000 __CTOR_END__
00802470 g     F .text	000001e0 __mulsf3
0080f234 g     F .text	00000058 alt_ro_zipfs_check_valid
0080aaf0 g     F .text	000000bc strcmp
00811d20 g       *ABS*	00000000 __flash_rodata_start
00811d20 g       *ABS*	00000000 __DTOR_LIST__
008031ec g     F .text	00000088 __nedf2
0080f1c4 g     F .text	00000070 alt_ro_zipfs_fstat
0080d140 g     F .text	00000034 alt_irq_init
0080cea4 g     F .text	00000060 alt_release_fd
008021a0 g     F .text	00000018 copysignf
00803d84 g     F .text	00000074 sprintf
00811e04 g     O .rodata	00000100 __clz_tab
00815a70 g     O .bss	00000004 _PathLocale
008117b8 g     F .text	00000014 atexit
0080abac g     F .text	00000078 _write_r
008086f0 g     F .text	0000001c setlocale
0080204c g     F .text	00000008 nanf
00813e0c g     O .rwdata	00000004 _impure_ptr
00815a84 g     O .bss	00000004 alt_argc
00810b08 g     F .text	00000064 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00809498 g     F .text	00000080 __ulp
0080a8c4 g     F .text	00000040 __isinfd
00807a48 g     F .text	00000018 __fp_unlock_all
00813e40 g     O .rwdata	00000008 alt_mailbox_list
008006a0 g     F .text	00000070 setup
00813e24 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080865c g     F .text	00000010 localeconv
00810cc0 g     F .text	00000050 alt_ic_isr_register
00813e5c g       *ABS*	00000000 _edata
00815d54 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080d998 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00810dac g     F .text	000000a0 alt_ic_irq_disable
0080aa14 g     F .text	0000007c __swrite
00813e1c g     O .rwdata	00000004 __malloc_trim_threshold
008117cc g     F .text	00000038 exit
008084c8 g     F .text	000000c8 _fwalk_reent
00809a94 g     F .text	0000018c __mdiff
00800284 g     F .text	000000fc mandelbrot
0080c5f0 g     F .text	00000060 __modsi3
00b50000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00807988 g     F .text	00000004 __sfp_lock_release
0080e114 g     F .text	00000058 altera_avalon_mailbox_open
00803660 g     F .text	000000a8 __fpcmp_parts_f
00811c90 g     F .text	00000020 _exit
0080a904 g     F .text	00000030 __isnand
008107f8 g     F .text	00000154 alt_alarm_start
00803320 g     F .text	00000098 __muldi3
0080870c g     F .text	00000194 __smakebuf_r
00803e58 g     F .text	00000074 strlen
008111a4 g     F .text	00000188 open
0080c0a0 g     F .text	00000088 __gedf2
00800380 g     F .text	0000000c clearScreen
00810c90 g     F .text	00000030 alt_icache_flush_all
00813e50 g     O .rwdata	00000004 alt_priority_mask
00810d10 g     F .text	0000009c alt_ic_irq_enable
00805dd0 g     F .text	00000024 __vfprintf_internal
0080e54c g     F .text	00000020 altera_avalon_mutex_close
00802ea0 g     F .text	00000080 __subdf3
00809374 g     F .text	000000c4 __lo0bits
00813dec g     O .rwdata	00000004 targetArrayXY
00813e54 g     O .rwdata	00000008 alt_alarm_list
00810aa4 g     F .text	00000064 _do_ctors
0080c660 g     F .text	000000fc close
0080240c g     F .text	00000064 __addsf3
0080ca3c g     F .text	00000080 alt_load
00803734 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0080798c g     F .text	00000004 __sinit_lock_acquire
00809f90 g     F .text	00000100 __multadd
008092dc g     F .text	00000028 _Bfree
0080e990 g     F .text	0000012c check_directory_header



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18d6b104 	addi	r3,r3,23236
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18d6b104 	addi	r3,r3,23236
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c02d74 	movhi	sp,181
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d6af7b14 	ori	gp,gp,48620
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001d8:	10969714 	ori	r2,r2,23132

    movhi r3, %hi(__bss_end)
  8001dc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001e0:	18d75514 	ori	r3,r3,23892

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	080ca3c0 	call	80ca3c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	080cc780 	call	80cc78 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <genColor>:
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  800200:	00801904 	movi	r2,100
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  800204:	200690fa 	slli	r3,r4,3
  800208:	200b883a 	mov	r5,r4
  80020c:	01c007c4 	movi	r7,31
  800210:	02000fc4 	movi	r8,63
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  800214:	000d883a 	mov	r6,zero
  800218:	20800c26 	beq	r4,r2,80024c <genColor+0x4c>
		color = black;
	}
	else {
		int red = iter;
		int green = iter * 8;
		int blue = iter * 2;
  80021c:	2105883a 	add	r2,r4,r4
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  800220:	1009883a 	mov	r4,r2
  800224:	40c01216 	blt	r8,r3,800270 <genColor+0x70>
  800228:	1804917a 	slli	r2,r3,5
  80022c:	1181f80c 	andi	r6,r2,2016
  800230:	39400a16 	blt	r7,r5,80025c <genColor+0x5c>
  800234:	280492fa 	slli	r2,r5,11
  800238:	10fe000c 	andi	r3,r2,63488
  80023c:	39000516 	blt	r7,r4,800254 <genColor+0x54>
  800240:	20803fcc 	andi	r2,r4,255
  800244:	1884b03a 	or	r2,r3,r2
  800248:	308cb03a 	or	r6,r6,r2
	}
	return color;
}
  80024c:	3005883a 	mov	r2,r6
  800250:	f800283a 	ret
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  800254:	3809883a 	mov	r4,r7
  800258:	003ff906 	br	800240 <genColor+0x40>
  80025c:	380b883a 	mov	r5,r7
  800260:	280492fa 	slli	r2,r5,11
  800264:	10fe000c 	andi	r3,r2,63488
  800268:	393ff50e 	bge	r7,r4,800240 <genColor+0x40>
  80026c:	003ff906 	br	800254 <genColor+0x54>
  800270:	4007883a 	mov	r3,r8
  800274:	1804917a 	slli	r2,r3,5
  800278:	1181f80c 	andi	r6,r2,2016
  80027c:	397fed0e 	bge	r7,r5,800234 <genColor+0x34>
  800280:	003ff606 	br	80025c <genColor+0x5c>

00800284 <mandelbrot>:
	}
	return color;
}

int mandelbrot(float x0, float y0, float *xOut, float *yOut) {
  800284:	defff404 	addi	sp,sp,-48
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  800288:	0005883a 	mov	r2,zero
		y = 2 * x * y + y0;
  80028c:	0007883a 	mov	r3,zero
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
	}
	return color;
}

int mandelbrot(float x0, float y0, float *xOut, float *yOut) {
  800290:	dcc00515 	stw	r19,20(sp)
  800294:	dc400315 	stw	r17,12(sp)
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  800298:	20a7ff72 	custom	253,r19,r4,r2
		y = 2 * x * y + y0;
  80029c:	28e3ff72 	custom	253,r17,r5,r3
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
	}
	return color;
}

int mandelbrot(float x0, float y0, float *xOut, float *yOut) {
  8002a0:	dd000615 	stw	r20,24(sp)
  8002a4:	dc800415 	stw	r18,16(sp)

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  8002a8:	9ce9ff32 	custom	252,r20,r19,r19
  8002ac:	8c65ff32 	custom	252,r18,r17,r17
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
	}
	return color;
}

int mandelbrot(float x0, float y0, float *xOut, float *yOut) {
  8002b0:	ddc00915 	stw	r23,36(sp)
  8002b4:	dd800815 	stw	r22,32(sp)
  8002b8:	202f883a 	mov	r23,r4
  8002bc:	282d883a 	mov	r22,r5

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  8002c0:	a489ff72 	custom	253,r4,r20,r18
  8002c4:	01502034 	movhi	r5,16512
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
	}
	return color;
}

int mandelbrot(float x0, float y0, float *xOut, float *yOut) {
  8002c8:	dfc00b15 	stw	ra,44(sp)
  8002cc:	df000a15 	stw	fp,40(sp)
  8002d0:	dd400715 	stw	r21,28(sp)
  8002d4:	dc000215 	stw	r16,8(sp)
  8002d8:	d9800015 	stw	r6,0(sp)
  8002dc:	d9c00115 	stw	r7,4(sp)

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  8002e0:	080292c0 	call	80292c <__lesf2>
  8002e4:	00802316 	blt	zero,r2,800374 <mandelbrot+0xf0>
  8002e8:	05400044 	movi	r21,1
  8002ec:	07001904 	movi	fp,100
  8002f0:	00000106 	br	8002f8 <mandelbrot+0x74>
  8002f4:	af000d26 	beq	r21,fp,80032c <mandelbrot+0xa8>
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  8002f8:	9cc5ff72 	custom	253,r2,r19,r19
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  8002fc:	a487ffb2 	custom	254,r3,r20,r18
		y = 2 * x * y + y0;
  800300:	8885ff32 	custom	252,r2,r17,r2
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  800304:	1de1ff72 	custom	253,r16,r3,r23
		y = 2 * x * y + y0;
  800308:	15a3ff72 	custom	253,r17,r2,r22

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  80030c:	8429ff32 	custom	252,r20,r16,r16
  800310:	8c65ff32 	custom	252,r18,r17,r17
  800314:	a489ff72 	custom	253,r4,r20,r18
  800318:	01502034 	movhi	r5,16512
  80031c:	8027883a 	mov	r19,r16
		 printf("iter number: %i\n", iter);
		 printf("Cycles on frame: %llu \n\n", (cycles));
		 }//*/

		x = xtemp;
		iter++;
  800320:	ad400044 	addi	r21,r21,1

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  800324:	080292c0 	call	80292c <__lesf2>
  800328:	00bff20e 	bge	zero,r2,8002f4 <mandelbrot+0x70>
  80032c:	8005883a 	mov	r2,r16

		x = xtemp;
		iter++;

	}
	*xOut = x;
  800330:	d8c00017 	ldw	r3,0(sp)
  800334:	18800015 	stw	r2,0(r3)
	*yOut = y;
  800338:	d8800117 	ldw	r2,4(sp)
  80033c:	14400015 	stw	r17,0(r2)

	return iter;
}
  800340:	a805883a 	mov	r2,r21
  800344:	dfc00b17 	ldw	ra,44(sp)
  800348:	df000a17 	ldw	fp,40(sp)
  80034c:	ddc00917 	ldw	r23,36(sp)
  800350:	dd800817 	ldw	r22,32(sp)
  800354:	dd400717 	ldw	r21,28(sp)
  800358:	dd000617 	ldw	r20,24(sp)
  80035c:	dcc00517 	ldw	r19,20(sp)
  800360:	dc800417 	ldw	r18,16(sp)
  800364:	dc400317 	ldw	r17,12(sp)
  800368:	dc000217 	ldw	r16,8(sp)
  80036c:	dec00c04 	addi	sp,sp,48
  800370:	f800283a 	ret

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  800374:	9805883a 	mov	r2,r19
  800378:	05400044 	movi	r21,1
  80037c:	003fec06 	br	800330 <mandelbrot+0xac>

00800380 <clearScreen>:
	}
}

void clearScreen(void) {
	//clears the part of the screen controlled by the pixel buffer
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
  800380:	d1271e17 	ldw	r4,-25480(gp)
  800384:	000b883a 	mov	r5,zero
  800388:	080f5501 	jmpi	80f550 <alt_up_pixel_buffer_dma_clear_screen>

0080038c <mandelbrotNoZoom>:
	*yOut = y;

	return iter;
}

int mandelbrotNoZoom(int cRow, int cCol, int *recalculateTargetFlag) {
  80038c:	defff504 	addi	sp,sp,-44
  800390:	dc400215 	stw	r17,8(sp)
  800394:	2023883a 	mov	r17,r4
	float minX = -2.5;
	float maxX = 1;
	float minY = -1;
	float maxY = 1;

	float x0 = (((float) cCol / (float) colSize) * (maxX - minX)) + minX;
  800398:	2809883a 	mov	r4,r5
	*yOut = y;

	return iter;
}

int mandelbrotNoZoom(int cRow, int cCol, int *recalculateTargetFlag) {
  80039c:	dfc00a15 	stw	ra,40(sp)
  8003a0:	d9800015 	stw	r6,0(sp)
  8003a4:	ddc00815 	stw	r23,32(sp)
  8003a8:	dd800715 	stw	r22,28(sp)
  8003ac:	dd000515 	stw	r20,20(sp)
  8003b0:	dcc00415 	stw	r19,16(sp)
  8003b4:	dc800315 	stw	r18,12(sp)
  8003b8:	dc000115 	stw	r16,4(sp)
  8003bc:	df000915 	stw	fp,36(sp)
  8003c0:	dd400615 	stw	r21,24(sp)
	float minX = -2.5;
	float maxX = 1;
	float minY = -1;
	float maxY = 1;

	float x0 = (((float) cCol / (float) colSize) * (maxX - minX)) + minX;
  8003c4:	08029a40 	call	8029a4 <__floatsisf>
  8003c8:	00cea034 	movhi	r3,14976
  8003cc:	10c5ff32 	custom	252,r2,r2,r3
  8003d0:	01101834 	movhi	r4,16480
  8003d4:	00d00834 	movhi	r3,16416
  8003d8:	1105ff32 	custom	252,r2,r2,r4
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
  8003dc:	8809883a 	mov	r4,r17
	float minX = -2.5;
	float maxX = 1;
	float minY = -1;
	float maxY = 1;

	float x0 = (((float) cCol / (float) colSize) * (maxX - minX)) + minX;
  8003e0:	10efffb2 	custom	254,r23,r2,r3
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
  8003e4:	08029a40 	call	8029a4 <__floatsisf>
  8003e8:	01111034 	movhi	r4,17472
  8003ec:	21300004 	addi	r4,r4,-16384
  8003f0:	2089ffb2 	custom	254,r4,r4,r2
  8003f4:	01511034 	movhi	r5,17472
  8003f8:	08026500 	call	802650 <__divsf3>
  8003fc:	1085ff72 	custom	253,r2,r2,r2
  800400:	00cfe034 	movhi	r3,16256
  800404:	10edffb2 	custom	254,r22,r2,r3
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  800408:	0005883a 	mov	r2,zero
		y = 2 * x * y + y0;
  80040c:	0007883a 	mov	r3,zero
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  800410:	b8a7ff72 	custom	253,r19,r23,r2
		y = 2 * x * y + y0;
  800414:	b0e5ff72 	custom	253,r18,r22,r3
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  800418:	9ce9ff32 	custom	252,r20,r19,r19
  80041c:	94a1ff32 	custom	252,r16,r18,r18
  800420:	a409ff72 	custom	253,r4,r20,r16
  800424:	01502034 	movhi	r5,16512
  800428:	080292c0 	call	80292c <__lesf2>
  80042c:	00802e16 	blt	zero,r2,8004e8 <mandelbrotNoZoom+0x15c>
  800430:	05400044 	movi	r21,1
  800434:	07001904 	movi	fp,100
  800438:	00000106 	br	800440 <mandelbrotNoZoom+0xb4>
  80043c:	af000d26 	beq	r21,fp,800474 <mandelbrotNoZoom+0xe8>
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  800440:	9cc5ff72 	custom	253,r2,r19,r19
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  800444:	a407ffb2 	custom	254,r3,r20,r16
		y = 2 * x * y + y0;
  800448:	9085ff32 	custom	252,r2,r18,r2
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  80044c:	b8e3ff72 	custom	253,r17,r23,r3
		y = 2 * x * y + y0;
  800450:	b0a5ff72 	custom	253,r18,r22,r2
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  800454:	8c69ff32 	custom	252,r20,r17,r17
  800458:	94a1ff32 	custom	252,r16,r18,r18
  80045c:	a409ff72 	custom	253,r4,r20,r16
  800460:	01502034 	movhi	r5,16512
  800464:	8827883a 	mov	r19,r17
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
  800468:	ad400044 	addi	r21,r21,1
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  80046c:	080292c0 	call	80292c <__lesf2>
  800470:	00bff20e 	bge	zero,r2,80043c <mandelbrotNoZoom+0xb0>
  800474:	8809883a 	mov	r4,r17
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
	}
	int cpu = __builtin_rdctl(5);
  800478:	0007317a 	rdctl	r3,cpuid
	if (cpu == 3) {
  80047c:	008000c4 	movi	r2,3
  800480:	18800d26 	beq	r3,r2,8004b8 <mandelbrotNoZoom+0x12c>
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
			}
		}
	}
	return iter;
}//*/
  800484:	a805883a 	mov	r2,r21
  800488:	dfc00a17 	ldw	ra,40(sp)
  80048c:	df000917 	ldw	fp,36(sp)
  800490:	ddc00817 	ldw	r23,32(sp)
  800494:	dd800717 	ldw	r22,28(sp)
  800498:	dd400617 	ldw	r21,24(sp)
  80049c:	dd000517 	ldw	r20,20(sp)
  8004a0:	dcc00417 	ldw	r19,16(sp)
  8004a4:	dc800317 	ldw	r18,12(sp)
  8004a8:	dc400217 	ldw	r17,8(sp)
  8004ac:	dc000117 	ldw	r16,4(sp)
  8004b0:	dec00b04 	addi	sp,sp,44
  8004b4:	f800283a 	ret
		x = xtemp;
		iter++;
	}
	int cpu = __builtin_rdctl(5);
	if (cpu == 3) {
		if (*recalculateTargetFlag) {
  8004b8:	d8800017 	ldw	r2,0(sp)
  8004bc:	10c00017 	ldw	r3,0(r2)
  8004c0:	183ff026 	beq	r3,zero,800484 <mandelbrotNoZoom+0xf8>
			if (iter >= (maxIter - 2)) {
  8004c4:	00801844 	movi	r2,97
  8004c8:	157fee0e 	bge	r2,r21,800484 <mandelbrotNoZoom+0xf8>
				targetArrayXYMaster[0] = x;
				targetArrayXYMaster[1] = y;
  8004cc:	d0a71c04 	addi	r2,gp,-25488
  8004d0:	14800115 	stw	r18,4(r2)
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
  8004d4:	d8800017 	ldw	r2,0(sp)
  8004d8:	18ffffc4 	addi	r3,r3,-1
	}
	int cpu = __builtin_rdctl(5);
	if (cpu == 3) {
		if (*recalculateTargetFlag) {
			if (iter >= (maxIter - 2)) {
				targetArrayXYMaster[0] = x;
  8004dc:	d1271c15 	stw	r4,-25488(gp)
				targetArrayXYMaster[1] = y;
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
  8004e0:	10c00015 	stw	r3,0(r2)
  8004e4:	003fe706 	br	800484 <mandelbrotNoZoom+0xf8>
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  8004e8:	9809883a 	mov	r4,r19
  8004ec:	05400044 	movi	r21,1
  8004f0:	003fe106 	br	800478 <mandelbrotNoZoom+0xec>

008004f4 <barrier>:
		}
	}

}

void barrier(alt_u8 barrierNum) {
  8004f4:	deffe104 	addi	sp,sp,-124
  8004f8:	dfc01e15 	stw	ra,120(sp)
  8004fc:	dd401d15 	stw	r21,116(sp)
  800500:	dd001c15 	stw	r20,112(sp)
  800504:	dcc01b15 	stw	r19,108(sp)
  800508:	dc801a15 	stw	r18,104(sp)
  80050c:	dc401915 	stw	r17,100(sp)
  800510:	dc001815 	stw	r16,96(sp)
	alt_u32 msg;
	alt_mailbox_dev *mb[NUM_CPUS];
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
  800514:	0027317a 	rdctl	r19,cpuid
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  800518:	dc400404 	addi	r17,sp,16
  80051c:	01402074 	movhi	r5,129
  800520:	29474804 	addi	r5,r5,7456
  800524:	000d883a 	mov	r6,zero
  800528:	8809883a 	mov	r4,r17
  80052c:	0803d840 	call	803d84 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  800530:	8809883a 	mov	r4,r17
  800534:	080e1140 	call	80e114 <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  800538:	05400044 	movi	r21,1
  80053c:	01402074 	movhi	r5,129
  800540:	29474804 	addi	r5,r5,7456
  800544:	a80d883a 	mov	r6,r21
  800548:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  80054c:	d8800015 	stw	r2,0(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  800550:	0803d840 	call	803d84 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  800554:	8809883a 	mov	r4,r17
  800558:	080e1140 	call	80e114 <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  80055c:	05000084 	movi	r20,2
  800560:	01402074 	movhi	r5,129
  800564:	29474804 	addi	r5,r5,7456
  800568:	a00d883a 	mov	r6,r20
  80056c:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  800570:	d8800115 	stw	r2,4(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  800574:	0803d840 	call	803d84 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  800578:	8809883a 	mov	r4,r17
  80057c:	080e1140 	call	80e114 <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  800580:	048000c4 	movi	r18,3
  800584:	01402074 	movhi	r5,129
  800588:	29474804 	addi	r5,r5,7456
  80058c:	900d883a 	mov	r6,r18
  800590:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  800594:	d8800215 	stw	r2,8(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  800598:	0803d840 	call	803d84 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  80059c:	8809883a 	mov	r4,r17
  8005a0:	080e1140 	call	80e114 <altera_avalon_mailbox_open>
  8005a4:	1021883a 	mov	r16,r2
  8005a8:	d8800315 	stw	r2,12(sp)
  8005ac:	9c803026 	beq	r19,r18,800670 <barrier+0x17c>
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  8005b0:	98000426 	beq	r19,zero,8005c4 <barrier+0xd0>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  8005b4:	d9000017 	ldw	r4,0(sp)
  8005b8:	000b883a 	mov	r5,zero
  8005bc:	080e18c0 	call	80e18c <altera_avalon_mailbox_post>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  8005c0:	9d400426 	beq	r19,r21,8005d4 <barrier+0xe0>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  8005c4:	d9000117 	ldw	r4,4(sp)
  8005c8:	000b883a 	mov	r5,zero
  8005cc:	080e18c0 	call	80e18c <altera_avalon_mailbox_post>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  8005d0:	9d000326 	beq	r19,r20,8005e0 <barrier+0xec>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  8005d4:	d9000217 	ldw	r4,8(sp)
  8005d8:	000b883a 	mov	r5,zero
  8005dc:	080e18c0 	call	80e18c <altera_avalon_mailbox_post>
  8005e0:	8009883a 	mov	r4,r16
  8005e4:	000b883a 	mov	r5,zero
  8005e8:	080e18c0 	call	80e18c <altera_avalon_mailbox_post>
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  8005ec:	9cc5883a 	add	r2,r19,r19
  8005f0:	1085883a 	add	r2,r2,r2
  8005f4:	16c5883a 	add	r2,r2,sp
  8005f8:	14400017 	ldw	r17,0(r2)
  8005fc:	8809883a 	mov	r4,r17
  800600:	080e2980 	call	80e298 <altera_avalon_mailbox_pend>

		if (msg != 0) {
  800604:	10000126 	beq	r2,zero,80060c <barrier+0x118>
			targetArrayXY = (float *) msg;
  800608:	d0a00015 	stw	r2,-32768(gp)
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  80060c:	8809883a 	mov	r4,r17
  800610:	080e2980 	call	80e298 <altera_avalon_mailbox_pend>

		if (msg != 0) {
  800614:	10000126 	beq	r2,zero,80061c <barrier+0x128>
			targetArrayXY = (float *) msg;
  800618:	d0a00015 	stw	r2,-32768(gp)
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  80061c:	8809883a 	mov	r4,r17
  800620:	080e2980 	call	80e298 <altera_avalon_mailbox_pend>

		if (msg != 0) {
  800624:	10000126 	beq	r2,zero,80062c <barrier+0x138>
			targetArrayXY = (float *) msg;
  800628:	d0a00015 	stw	r2,-32768(gp)
		}
	}
	for (i = 0; i < NUM_CPUS; i++) {
		altera_avalon_mailbox_close(mb[i]);
  80062c:	d9000017 	ldw	r4,0(sp)
  800630:	080e16c0 	call	80e16c <altera_avalon_mailbox_close>
  800634:	d9000117 	ldw	r4,4(sp)
  800638:	080e16c0 	call	80e16c <altera_avalon_mailbox_close>
  80063c:	d9000217 	ldw	r4,8(sp)
  800640:	080e16c0 	call	80e16c <altera_avalon_mailbox_close>
  800644:	8009883a 	mov	r4,r16
  800648:	080e16c0 	call	80e16c <altera_avalon_mailbox_close>
	}
}
  80064c:	dfc01e17 	ldw	ra,120(sp)
  800650:	dd401d17 	ldw	r21,116(sp)
  800654:	dd001c17 	ldw	r20,112(sp)
  800658:	dcc01b17 	ldw	r19,108(sp)
  80065c:	dc801a17 	ldw	r18,104(sp)
  800660:	dc401917 	ldw	r17,100(sp)
  800664:	dc001817 	ldw	r16,96(sp)
  800668:	dec01f04 	addi	sp,sp,124
  80066c:	f800283a 	ret
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
  800670:	0025883a 	mov	r18,zero
  800674:	d823883a 	mov	r17,sp
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
  800678:	89000017 	ldw	r4,0(r17)
  80067c:	d1671c04 	addi	r5,gp,-25488
	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
  800680:	94800044 	addi	r18,r18,1
		if (i != cpu) {

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
  800684:	080e18c0 	call	80e18c <altera_avalon_mailbox_post>
	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
  800688:	00800104 	movi	r2,4
  80068c:	8c400104 	addi	r17,r17,4
  800690:	90bfd626 	beq	r18,r2,8005ec <barrier+0xf8>
		if (i != cpu) {
  800694:	008000c4 	movi	r2,3
  800698:	90bff71e 	bne	r18,r2,800678 <barrier+0x184>
  80069c:	003fd306 	br	8005ec <barrier+0xf8>

008006a0 <setup>:
float targetArrayXYMaster[2] = { 0.0, 0.0 };
volatile float *targetArrayXY = targetArrayXYMaster;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  8006a0:	023ff734 	movhi	r8,65500
  8006a4:	deffff04 	addi	sp,sp,-4
  8006a8:	dfc00015 	stw	ra,0(sp)
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  8006ac:	01002074 	movhi	r4,129
  8006b0:	21074c04 	addi	r4,r4,7472
float targetArrayXYMaster[2] = { 0.0, 0.0 };
volatile float *targetArrayXY = targetArrayXYMaster;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  8006b4:	da37883a 	add	sp,sp,r8
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  8006b8:	080f28c0 	call	80f28c <alt_up_pixel_buffer_dma_open_dev>

#ifdef MASTER
	volatile alt_u8 pixel_buffer_memory[2359296];
	alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
  8006bc:	1009883a 	mov	r4,r2
  8006c0:	d80b883a 	mov	r5,sp
volatile float *targetArrayXY = targetArrayXYMaster;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  8006c4:	d0a71e15 	stw	r2,-25480(gp)

#ifdef MASTER
	volatile alt_u8 pixel_buffer_memory[2359296];
	alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
  8006c8:	080f46c0 	call	80f46c <alt_up_pixel_buffer_dma_change_back_buffer_address>
	alt_up_pixel_buffer_dma_swap_buffers(myPixelBuffer);
  8006cc:	d1271e17 	ldw	r4,-25480(gp)
  8006d0:	080f4c40 	call	80f4c4 <alt_up_pixel_buffer_dma_swap_buffers>
  8006d4:	00000206 	br	8006e0 <setup+0x40>
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(myPixelBuffer)) {
		alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
  8006d8:	d1271e17 	ldw	r4,-25480(gp)
  8006dc:	080f46c0 	call	80f46c <alt_up_pixel_buffer_dma_change_back_buffer_address>

#ifdef MASTER
	volatile alt_u8 pixel_buffer_memory[2359296];
	alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
	alt_up_pixel_buffer_dma_swap_buffers(myPixelBuffer);
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(myPixelBuffer)) {
  8006e0:	d1271e17 	ldw	r4,-25480(gp)
  8006e4:	080f51c0 	call	80f51c <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  8006e8:	1007883a 	mov	r3,r2
		alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
  8006ec:	d80b883a 	mov	r5,sp

#ifdef MASTER
	volatile alt_u8 pixel_buffer_memory[2359296];
	alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
	alt_up_pixel_buffer_dma_swap_buffers(myPixelBuffer);
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(myPixelBuffer)) {
  8006f0:	103ff91e 	bne	r2,zero,8006d8 <setup+0x38>
		alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
	}
#endif

	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
  8006f4:	00800044 	movi	r2,1
  8006f8:	18800035 	stwio	r2,0(r3)
}
  8006fc:	02000934 	movhi	r8,36
  800700:	da37883a 	add	sp,sp,r8
  800704:	dfc00017 	ldw	ra,0(sp)
  800708:	dec00104 	addi	sp,sp,4
  80070c:	f800283a 	ret

00800710 <drawFrame>:
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}
}//*/

void drawFrame(int zoom) {
  800710:	deffec04 	addi	sp,sp,-80
  800714:	dfc01315 	stw	ra,76(sp)
  800718:	df001215 	stw	fp,72(sp)
  80071c:	ddc01115 	stw	r23,68(sp)
  800720:	dd801015 	stw	r22,64(sp)
  800724:	dd400f15 	stw	r21,60(sp)
  800728:	dd000e15 	stw	r20,56(sp)
  80072c:	dcc00d15 	stw	r19,52(sp)
  800730:	dc800c15 	stw	r18,48(sp)
  800734:	dc400b15 	stw	r17,44(sp)
  800738:	dc000a15 	stw	r16,40(sp)
	int i;
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
  80073c:	0005317a 	rdctl	r2,cpuid
  800740:	d8800715 	stw	r2,28(sp)
	int recalculateTargetFlag = 20;
	float x = 0.0;
	float y = 0.0;

	float minX = targetArrayXY[0] - (1 / powf(1.5, zoom));
  800744:	d0a00017 	ldw	r2,-32768(gp)
  800748:	040ff034 	movhi	r16,16320
  80074c:	15400017 	ldw	r21,0(r2)
  800750:	08029a40 	call	8029a4 <__floatsisf>
  800754:	100b883a 	mov	r5,r2
  800758:	8009883a 	mov	r4,r16
  80075c:	1023883a 	mov	r17,r2
  800760:	0800d180 	call	800d18 <powf>
  800764:	102d883a 	mov	r22,r2
	float maxX = targetArrayXY[0] + (1 / powf(1.5, zoom));
  800768:	d0a00017 	ldw	r2,-32768(gp)
  80076c:	8009883a 	mov	r4,r16
  800770:	880b883a 	mov	r5,r17
  800774:	15000017 	ldw	r20,0(r2)
  800778:	0800d180 	call	800d18 <powf>
  80077c:	102f883a 	mov	r23,r2
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
  800780:	d0a00017 	ldw	r2,-32768(gp)
  800784:	8009883a 	mov	r4,r16
  800788:	880b883a 	mov	r5,r17
  80078c:	14c00117 	ldw	r19,4(r2)
  800790:	0800d180 	call	800d18 <powf>
  800794:	1025883a 	mov	r18,r2
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));
  800798:	d0a00017 	ldw	r2,-32768(gp)
  80079c:	8009883a 	mov	r4,r16
  8007a0:	880b883a 	mov	r5,r17
  8007a4:	14000117 	ldw	r16,4(r2)
  8007a8:	0800d180 	call	800d18 <powf>

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  8007ac:	d8c00717 	ldw	r3,28(sp)
	float y = 0.0;

	float minX = targetArrayXY[0] - (1 / powf(1.5, zoom));
	float maxX = targetArrayXY[0] + (1 / powf(1.5, zoom));
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));
  8007b0:	1023883a 	mov	r17,r2

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  8007b4:	0080ffc4 	movi	r2,1023
  8007b8:	10c07a16 	blt	r2,r3,8009a4 <drawFrame+0x294>
	int cpu = __builtin_rdctl(5);
	int recalculateTargetFlag = 20;
	float x = 0.0;
	float y = 0.0;

	float minX = targetArrayXY[0] - (1 / powf(1.5, zoom));
  8007bc:	b00b883a 	mov	r5,r22
  8007c0:	012fe034 	movhi	r4,49024
  8007c4:	08026500 	call	802650 <__divsf3>
  8007c8:	a8abff72 	custom	253,r21,r21,r2
	float maxX = targetArrayXY[0] + (1 / powf(1.5, zoom));
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
  8007cc:	900b883a 	mov	r5,r18
  8007d0:	012fd034 	movhi	r4,48960
	int cpu = __builtin_rdctl(5);
	int recalculateTargetFlag = 20;
	float x = 0.0;
	float y = 0.0;

	float minX = targetArrayXY[0] - (1 / powf(1.5, zoom));
  8007d4:	dd400515 	stw	r21,20(sp)
	float maxX = targetArrayXY[0] + (1 / powf(1.5, zoom));
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
  8007d8:	08026500 	call	802650 <__divsf3>
  8007dc:	98a7ff72 	custom	253,r19,r19,r2
  8007e0:	880b883a 	mov	r5,r17
  8007e4:	010fd034 	movhi	r4,16192
  8007e8:	dcc00415 	stw	r19,16(sp)
  8007ec:	08026500 	call	802650 <__divsf3>
  8007f0:	d8c00417 	ldw	r3,16(sp)
  8007f4:	8085ff72 	custom	253,r2,r16,r2
  8007f8:	b80b883a 	mov	r5,r23
  8007fc:	10c5ffb2 	custom	254,r2,r2,r3
  800800:	010fe034 	movhi	r4,16256
  800804:	d8800315 	stw	r2,12(sp)
  800808:	08026500 	call	802650 <__divsf3>
  80080c:	d8c00517 	ldw	r3,20(sp)
  800810:	a085ff72 	custom	253,r2,r20,r2
  800814:	10c5ffb2 	custom	254,r2,r2,r3
  800818:	d8800215 	stw	r2,8(sp)
  80081c:	d8800717 	ldw	r2,28(sp)
  800820:	00c00504 	movi	r3,20
  800824:	d8c00615 	stw	r3,24(sp)
  800828:	d8800915 	stw	r2,36(sp)
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 767 - (float) i) / (float) 768) * (maxY - minY)) + minY;
  80082c:	d9000917 	ldw	r4,36(sp)
  800830:	08029a40 	call	8029a4 <__floatsisf>
  800834:	01111034 	movhi	r4,17472
  800838:	21300004 	addi	r4,r4,-16384
  80083c:	2089ffb2 	custom	254,r4,r4,r2
  800840:	01511034 	movhi	r5,17472
  800844:	08026500 	call	802650 <__divsf3>
  800848:	d8c00317 	ldw	r3,12(sp)
  80084c:	d8000815 	stw	zero,32(sp)
  800850:	10c5ff32 	custom	252,r2,r2,r3
  800854:	d8c00417 	ldw	r3,16(sp)
  800858:	18b9ff72 	custom	253,fp,r3,r2
  80085c:	0005883a 	mov	r2,zero
  800860:	e085ff72 	custom	253,r2,fp,r2
  800864:	d8800115 	stw	r2,4(sp)
  800868:	1085ff32 	custom	252,r2,r2,r2
  80086c:	d8800015 	stw	r2,0(sp)
		for (j = 0; j < rowSize; j++) {
			float x0 = (((float) j / (float) 1024) * (maxX - minX)) + minX;
  800870:	d9000817 	ldw	r4,32(sp)
  800874:	08029a40 	call	8029a4 <__floatsisf>
  800878:	00cea034 	movhi	r3,14976
  80087c:	10c5ff32 	custom	252,r2,r2,r3
  800880:	d8c00217 	ldw	r3,8(sp)

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  800884:	01502034 	movhi	r5,16512
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 767 - (float) i) / (float) 768) * (maxY - minY)) + minY;
		for (j = 0; j < rowSize; j++) {
			float x0 = (((float) j / (float) 1024) * (maxX - minX)) + minX;
  800888:	1885ff32 	custom	252,r2,r3,r2
  80088c:	d8c00517 	ldw	r3,20(sp)
  800890:	18adff72 	custom	253,r22,r3,r2
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  800894:	0005883a 	mov	r2,zero
  800898:	b0a5ff72 	custom	253,r18,r22,r2

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  80089c:	d8800017 	ldw	r2,0(sp)
  8008a0:	94a9ff32 	custom	252,r20,r18,r18
  8008a4:	1509ff72 	custom	253,r4,r2,r20
  8008a8:	080292c0 	call	80292c <__lesf2>
  8008ac:	00805616 	blt	zero,r2,800a08 <drawFrame+0x2f8>
  8008b0:	d8c00017 	ldw	r3,0(sp)
  8008b4:	d8800117 	ldw	r2,4(sp)
  8008b8:	05400044 	movi	r21,1
  8008bc:	1821883a 	mov	r16,r3
  8008c0:	1027883a 	mov	r19,r2
  8008c4:	05c01904 	movi	r23,100
  8008c8:	00000106 	br	8008d0 <drawFrame+0x1c0>
  8008cc:	adc00d26 	beq	r21,r23,800904 <drawFrame+0x1f4>
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  8008d0:	9485ff72 	custom	253,r2,r18,r18
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  8008d4:	a407ffb2 	custom	254,r3,r20,r16
		y = 2 * x * y + y0;
  8008d8:	9885ff32 	custom	252,r2,r19,r2
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  8008dc:	b0e3ff72 	custom	253,r17,r22,r3
		y = 2 * x * y + y0;
  8008e0:	e0a7ff72 	custom	253,r19,fp,r2

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  8008e4:	8c69ff32 	custom	252,r20,r17,r17
  8008e8:	9ce1ff32 	custom	252,r16,r19,r19
  8008ec:	a409ff72 	custom	253,r4,r20,r16
  8008f0:	01502034 	movhi	r5,16512
  8008f4:	8825883a 	mov	r18,r17
		 printf("iter number: %i\n", iter);
		 printf("Cycles on frame: %llu \n\n", (cycles));
		 }//*/

		x = xtemp;
		iter++;
  8008f8:	ad400044 	addi	r21,r21,1

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  8008fc:	080292c0 	call	80292c <__lesf2>
  800900:	00bff20e 	bge	zero,r2,8008cc <drawFrame+0x1bc>
			float x0 = (((float) j / (float) 1024) * (maxX - minX)) + minX;

			result = mandelbrot(x0, y0, &x, &y);

			//recalculates the x and y
			if (cpu == 3) {
  800904:	d8c00717 	ldw	r3,28(sp)
  800908:	008000c4 	movi	r2,3
  80090c:	18803326 	beq	r3,r2,8009dc <drawFrame+0x2cc>
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  800910:	00801904 	movi	r2,100
  800914:	a8802f26 	beq	r21,r2,8009d4 <drawFrame+0x2c4>
		color = black;
	}
	else {
		int red = iter;
		int green = iter * 8;
		int blue = iter * 2;
  800918:	a80490fa 	slli	r2,r21,3
  80091c:	00c00fc4 	movi	r3,63
  800920:	ad4d883a 	add	r6,r21,r21
  800924:	1880010e 	bge	r3,r2,80092c <drawFrame+0x21c>
  800928:	1805883a 	mov	r2,r3
  80092c:	1004917a 	slli	r2,r2,5
  800930:	010007c4 	movi	r4,31
  800934:	a807883a 	mov	r3,r21
  800938:	1141f80c 	andi	r5,r2,2016
  80093c:	2540010e 	bge	r4,r21,800944 <drawFrame+0x234>
  800940:	2007883a 	mov	r3,r4
  800944:	180492fa 	slli	r2,r3,11
  800948:	3007883a 	mov	r3,r6
  80094c:	11be000c 	andi	r6,r2,63488
  800950:	20c0010e 	bge	r4,r3,800958 <drawFrame+0x248>
  800954:	2007883a 	mov	r3,r4
  800958:	18803fcc 	andi	r2,r3,255
  80095c:	3084b03a 	or	r2,r6,r2
  800960:	288ab03a 	or	r5,r5,r2
					}
				}
			}

			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
  800964:	d1271e17 	ldw	r4,-25480(gp)
  800968:	d9c00817 	ldw	r7,32(sp)
  80096c:	d9800917 	ldw	r6,36(sp)
  800970:	080f2cc0 	call	80f2cc <alt_up_pixel_buffer_dma_draw>
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 767 - (float) i) / (float) 768) * (maxY - minY)) + minY;
		for (j = 0; j < rowSize; j++) {
  800974:	d8800817 	ldw	r2,32(sp)
  800978:	10800044 	addi	r2,r2,1
  80097c:	d8800815 	stw	r2,32(sp)
  800980:	d8c00817 	ldw	r3,32(sp)
  800984:	0080c004 	movi	r2,768
  800988:	18bfb91e 	bne	r3,r2,800870 <drawFrame+0x160>
	float minX = targetArrayXY[0] - (1 / powf(1.5, zoom));
	float maxX = targetArrayXY[0] + (1 / powf(1.5, zoom));
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  80098c:	d8800917 	ldw	r2,36(sp)
  800990:	10800104 	addi	r2,r2,4
  800994:	d8800915 	stw	r2,36(sp)
  800998:	d8c00917 	ldw	r3,36(sp)
  80099c:	0080ffc4 	movi	r2,1023
  8009a0:	10ffa20e 	bge	r2,r3,80082c <drawFrame+0x11c>
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}

}
  8009a4:	dfc01317 	ldw	ra,76(sp)
  8009a8:	df001217 	ldw	fp,72(sp)
  8009ac:	ddc01117 	ldw	r23,68(sp)
  8009b0:	dd801017 	ldw	r22,64(sp)
  8009b4:	dd400f17 	ldw	r21,60(sp)
  8009b8:	dd000e17 	ldw	r20,56(sp)
  8009bc:	dcc00d17 	ldw	r19,52(sp)
  8009c0:	dc800c17 	ldw	r18,48(sp)
  8009c4:	dc400b17 	ldw	r17,44(sp)
  8009c8:	dc000a17 	ldw	r16,40(sp)
  8009cc:	dec01404 	addi	sp,sp,80
  8009d0:	f800283a 	ret
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  8009d4:	000b883a 	mov	r5,zero
  8009d8:	003fe206 	br	800964 <drawFrame+0x254>

			result = mandelbrot(x0, y0, &x, &y);

			//recalculates the x and y
			if (cpu == 3) {
				if (recalculateTargetFlag) {
  8009dc:	d8800617 	ldw	r2,24(sp)
  8009e0:	103fcb26 	beq	r2,zero,800910 <drawFrame+0x200>
					if (result > (maxIter - 2)) {
  8009e4:	00801884 	movi	r2,98
  8009e8:	157fc90e 	bge	r2,r21,800910 <drawFrame+0x200>
						targetArrayXYMaster[0] = x;
						targetArrayXYMaster[1] = y;
						recalculateTargetFlag = recalculateTargetFlag - 1;
  8009ec:	d8c00617 	ldw	r3,24(sp)
			//recalculates the x and y
			if (cpu == 3) {
				if (recalculateTargetFlag) {
					if (result > (maxIter - 2)) {
						targetArrayXYMaster[0] = x;
						targetArrayXYMaster[1] = y;
  8009f0:	d0a71c04 	addi	r2,gp,-25488
  8009f4:	14c00115 	stw	r19,4(r2)
						recalculateTargetFlag = recalculateTargetFlag - 1;
  8009f8:	18ffffc4 	addi	r3,r3,-1

			//recalculates the x and y
			if (cpu == 3) {
				if (recalculateTargetFlag) {
					if (result > (maxIter - 2)) {
						targetArrayXYMaster[0] = x;
  8009fc:	d4671c15 	stw	r17,-25488(gp)
						targetArrayXYMaster[1] = y;
						recalculateTargetFlag = recalculateTargetFlag - 1;
  800a00:	d8c00615 	stw	r3,24(sp)
  800a04:	003fc206 	br	800910 <drawFrame+0x200>

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  800a08:	d8c00117 	ldw	r3,4(sp)
  800a0c:	9023883a 	mov	r17,r18
  800a10:	05400044 	movi	r21,1
  800a14:	1827883a 	mov	r19,r3
  800a18:	003fba06 	br	800904 <drawFrame+0x1f4>

00800a1c <drawFullSet>:
	}
	return iter;
}//*/


void drawFullSet(void) {
  800a1c:	defff204 	addi	sp,sp,-56
  800a20:	dfc00d15 	stw	ra,52(sp)
  800a24:	df000c15 	stw	fp,48(sp)
  800a28:	ddc00b15 	stw	r23,44(sp)
  800a2c:	dd800a15 	stw	r22,40(sp)
  800a30:	dd400915 	stw	r21,36(sp)
  800a34:	dd000815 	stw	r20,32(sp)
  800a38:	dcc00715 	stw	r19,28(sp)
  800a3c:	dc800615 	stw	r18,24(sp)
  800a40:	dc400515 	stw	r17,20(sp)
  800a44:	dc000415 	stw	r16,16(sp)
	int i;
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
  800a48:	0009317a 	rdctl	r4,cpuid

	int recalculateTargetFlag = 10;

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  800a4c:	0080ffc4 	movi	r2,1023
  800a50:	11006f16 	blt	r2,r4,800c10 <drawFullSet+0x1f4>
			result = mandelbrotNoZoom(j, i, &recalculateTargetFlag);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}
}//*/
  800a54:	00800284 	movi	r2,10
  800a58:	d9000315 	stw	r4,12(sp)
  800a5c:	d8800215 	stw	r2,8(sp)
  800a60:	08029a40 	call	8029a4 <__floatsisf>
  800a64:	00cea034 	movhi	r3,14976
  800a68:	10c5ff32 	custom	252,r2,r2,r3
  800a6c:	01101834 	movhi	r4,16480
  800a70:	1105ff32 	custom	252,r2,r2,r4
  800a74:	00d00834 	movhi	r3,16416
  800a78:	10f9ffb2 	custom	254,fp,r2,r3
  800a7c:	0005883a 	mov	r2,zero
  800a80:	e085ff72 	custom	253,r2,fp,r2
  800a84:	1087ff32 	custom	252,r3,r2,r2
  800a88:	d8800015 	stw	r2,0(sp)
  800a8c:	d8c00115 	stw	r3,4(sp)
  800a90:	002f883a 	mov	r23,zero
	float maxX = 1;
	float minY = -1;
	float maxY = 1;

	float x0 = (((float) cCol / (float) colSize) * (maxX - minX)) + minX;
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
  800a94:	b809883a 	mov	r4,r23
  800a98:	08029a40 	call	8029a4 <__floatsisf>
  800a9c:	01111034 	movhi	r4,17472
  800aa0:	21300004 	addi	r4,r4,-16384
  800aa4:	2089ffb2 	custom	254,r4,r4,r2
  800aa8:	01511034 	movhi	r5,17472
  800aac:	08026500 	call	802650 <__divsf3>
  800ab0:	1085ff72 	custom	253,r2,r2,r2
  800ab4:	00cfe034 	movhi	r3,16256
  800ab8:	10ebffb2 	custom	254,r21,r2,r3
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  800abc:	0005883a 	mov	r2,zero
  800ac0:	a8a3ff72 	custom	253,r17,r21,r2
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  800ac4:	d8800117 	ldw	r2,4(sp)
  800ac8:	8c67ff32 	custom	252,r19,r17,r17
  800acc:	01502034 	movhi	r5,16512
  800ad0:	14c9ff72 	custom	253,r4,r2,r19
  800ad4:	080292c0 	call	80292c <__lesf2>
  800ad8:	00804916 	blt	zero,r2,800c00 <drawFullSet+0x1e4>
  800adc:	d8c00117 	ldw	r3,4(sp)
  800ae0:	d8800017 	ldw	r2,0(sp)
  800ae4:	05000044 	movi	r20,1
  800ae8:	1821883a 	mov	r16,r3
  800aec:	05801904 	movi	r22,100
  800af0:	1007883a 	mov	r3,r2
  800af4:	00000106 	br	800afc <drawFullSet+0xe0>
  800af8:	a5800d26 	beq	r20,r22,800b30 <drawFullSet+0x114>
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  800afc:	18c5ff72 	custom	253,r2,r3,r3
  800b00:	8885ff32 	custom	252,r2,r17,r2
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  800b04:	84c7ffb2 	custom	254,r3,r16,r19
  800b08:	1f25ff72 	custom	253,r18,r3,fp
		y = 2 * x * y + y0;
  800b0c:	a8a3ff72 	custom	253,r17,r21,r2
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  800b10:	94a1ff32 	custom	252,r16,r18,r18
  800b14:	8c67ff32 	custom	252,r19,r17,r17
  800b18:	84c9ff72 	custom	253,r4,r16,r19
  800b1c:	01502034 	movhi	r5,16512
  800b20:	080292c0 	call	80292c <__lesf2>
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
  800b24:	a5000044 	addi	r20,r20,1
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  800b28:	9007883a 	mov	r3,r18
  800b2c:	00bff20e 	bge	zero,r2,800af8 <drawFullSet+0xdc>
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
	}
	int cpu = __builtin_rdctl(5);
  800b30:	0007317a 	rdctl	r3,cpuid
	if (cpu == 3) {
  800b34:	008000c4 	movi	r2,3
  800b38:	18802626 	beq	r3,r2,800bd4 <drawFullSet+0x1b8>
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  800b3c:	00801904 	movi	r2,100
  800b40:	a0802226 	beq	r20,r2,800bcc <drawFullSet+0x1b0>
		color = black;
	}
	else {
		int red = iter;
		int green = iter * 8;
		int blue = iter * 2;
  800b44:	a00490fa 	slli	r2,r20,3
  800b48:	00c00fc4 	movi	r3,63
  800b4c:	a50d883a 	add	r6,r20,r20
  800b50:	1880010e 	bge	r3,r2,800b58 <drawFullSet+0x13c>
  800b54:	1805883a 	mov	r2,r3
  800b58:	1004917a 	slli	r2,r2,5
  800b5c:	010007c4 	movi	r4,31
  800b60:	a007883a 	mov	r3,r20
  800b64:	1141f80c 	andi	r5,r2,2016
  800b68:	2500010e 	bge	r4,r20,800b70 <drawFullSet+0x154>
  800b6c:	2007883a 	mov	r3,r4
  800b70:	180492fa 	slli	r2,r3,11
  800b74:	3007883a 	mov	r3,r6
  800b78:	11be000c 	andi	r6,r2,63488
  800b7c:	20c0010e 	bge	r4,r3,800b84 <drawFullSet+0x168>
  800b80:	2007883a 	mov	r3,r4
  800b84:	18803fcc 	andi	r2,r3,255
  800b88:	3084b03a 	or	r2,r6,r2
  800b8c:	288ab03a 	or	r5,r5,r2

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		for (j = 0; j < rowSize; j++) {
			result = mandelbrotNoZoom(j, i, &recalculateTargetFlag);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
  800b90:	d1271e17 	ldw	r4,-25480(gp)
  800b94:	d9800317 	ldw	r6,12(sp)
  800b98:	b80f883a 	mov	r7,r23
	int cpu = __builtin_rdctl(5);

	int recalculateTargetFlag = 10;

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		for (j = 0; j < rowSize; j++) {
  800b9c:	bdc00044 	addi	r23,r23,1
			result = mandelbrotNoZoom(j, i, &recalculateTargetFlag);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
  800ba0:	080f2cc0 	call	80f2cc <alt_up_pixel_buffer_dma_draw>
	int cpu = __builtin_rdctl(5);

	int recalculateTargetFlag = 10;

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		for (j = 0; j < rowSize; j++) {
  800ba4:	0080c004 	movi	r2,768
  800ba8:	b8bfba1e 	bne	r23,r2,800a94 <drawFullSet+0x78>
	int color = 0;
	int cpu = __builtin_rdctl(5);

	int recalculateTargetFlag = 10;

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  800bac:	d8800317 	ldw	r2,12(sp)
  800bb0:	10800104 	addi	r2,r2,4
  800bb4:	d8800315 	stw	r2,12(sp)
  800bb8:	d8c00317 	ldw	r3,12(sp)
  800bbc:	0080ffc4 	movi	r2,1023
  800bc0:	10c01316 	blt	r2,r3,800c10 <drawFullSet+0x1f4>
  800bc4:	d9000317 	ldw	r4,12(sp)
  800bc8:	003fa506 	br	800a60 <drawFullSet+0x44>
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  800bcc:	000b883a 	mov	r5,zero
  800bd0:	003fef06 	br	800b90 <drawFullSet+0x174>
		x = xtemp;
		iter++;
	}
	int cpu = __builtin_rdctl(5);
	if (cpu == 3) {
		if (*recalculateTargetFlag) {
  800bd4:	d8800217 	ldw	r2,8(sp)
  800bd8:	103fd826 	beq	r2,zero,800b3c <drawFullSet+0x120>
			if (iter >= (maxIter - 2)) {
  800bdc:	00801844 	movi	r2,97
  800be0:	153fd60e 	bge	r2,r20,800b3c <drawFullSet+0x120>
				targetArrayXYMaster[0] = x;
				targetArrayXYMaster[1] = y;
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
  800be4:	d8c00217 	ldw	r3,8(sp)
	int cpu = __builtin_rdctl(5);
	if (cpu == 3) {
		if (*recalculateTargetFlag) {
			if (iter >= (maxIter - 2)) {
				targetArrayXYMaster[0] = x;
				targetArrayXYMaster[1] = y;
  800be8:	d0a71c04 	addi	r2,gp,-25488
  800bec:	14400115 	stw	r17,4(r2)
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
  800bf0:	18ffffc4 	addi	r3,r3,-1
	}
	int cpu = __builtin_rdctl(5);
	if (cpu == 3) {
		if (*recalculateTargetFlag) {
			if (iter >= (maxIter - 2)) {
				targetArrayXYMaster[0] = x;
  800bf4:	d4a71c15 	stw	r18,-25488(gp)
				targetArrayXYMaster[1] = y;
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
  800bf8:	d8c00215 	stw	r3,8(sp)
  800bfc:	003fcf06 	br	800b3c <drawFullSet+0x120>
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  800c00:	d8c00017 	ldw	r3,0(sp)
  800c04:	05000044 	movi	r20,1
  800c08:	1825883a 	mov	r18,r3
  800c0c:	003fc806 	br	800b30 <drawFullSet+0x114>
			result = mandelbrotNoZoom(j, i, &recalculateTargetFlag);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}
}//*/
  800c10:	dfc00d17 	ldw	ra,52(sp)
  800c14:	df000c17 	ldw	fp,48(sp)
  800c18:	ddc00b17 	ldw	r23,44(sp)
  800c1c:	dd800a17 	ldw	r22,40(sp)
  800c20:	dd400917 	ldw	r21,36(sp)
  800c24:	dd000817 	ldw	r20,32(sp)
  800c28:	dcc00717 	ldw	r19,28(sp)
  800c2c:	dc800617 	ldw	r18,24(sp)
  800c30:	dc400517 	ldw	r17,20(sp)
  800c34:	dc000417 	ldw	r16,16(sp)
  800c38:	dec00e04 	addi	sp,sp,56
  800c3c:	f800283a 	ret

00800c40 <main>:
#define key1 6
#define key0 7

#define FIXED_POINT

int main() {
  800c40:	defffe04 	addi	sp,sp,-8
  800c44:	dfc00115 	stw	ra,4(sp)
  800c48:	dc000015 	stw	r16,0(sp)
	setup();
  800c4c:	08006a00 	call	8006a0 <setup>
	//	alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
	//	alt_up_pixel_buffer_dma_swap_buffers(myPixelBuffer);
	//	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(myPixelBuffer)) {
	//		alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
	//	}
	clearScreen();
  800c50:	08003800 	call	800380 <clearScreen>
#endif
	//	barrier(0);


	printf("Program running (UART)...\n");
  800c54:	01002074 	movhi	r4,129
  800c58:	21075404 	addi	r4,r4,7504
  800c5c:	0803d700 	call	803d70 <puts>
	//reset address: 0090FFE4
	//default buffer start address: 0x01880000
	printf("ADDRESS: %08X \n", myPixelBuffer->back_buffer_start_address);
  800c60:	d0a71e17 	ldw	r2,-25480(gp)
  800c64:	01002074 	movhi	r4,129
  800c68:	21075b04 	addi	r4,r4,7532
  800c6c:	11400c17 	ldw	r5,48(r2)
  800c70:	0803c580 	call	803c58 <printf>
	int cpu = __builtin_rdctl(5);
  800c74:	000b317a 	rdctl	r5,cpuid
	printf("cpu %d \n", cpu);
  800c78:	01002074 	movhi	r4,129
  800c7c:	21075f04 	addi	r4,r4,7548
  800c80:	0803c580 	call	803c58 <printf>

	//	unsigned long long cycles = 0;
	//the main program loop
	while (1) {

		printf("entering the main loop \n");
  800c84:	01002074 	movhi	r4,129
  800c88:	21076204 	addi	r4,r4,7560
  800c8c:	0803d700 	call	803d70 <puts>
  800c90:	0021883a 	mov	r16,zero
			/*
			 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
			 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
			 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
			 //*/
			clearScreen();
  800c94:	08003800 	call	800380 <clearScreen>
			if (zoom == 0) {
				drawFullSet();
			}

			else {
				drawFrame(zoom);
  800c98:	8009883a 	mov	r4,r16
			 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
			 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
			 //*/
			clearScreen();

			if (zoom == 0) {
  800c9c:	80000f1e 	bne	r16,zero,800cdc <main+0x9c>
				drawFullSet();
  800ca0:	0800a1c0 	call	800a1c <drawFullSet>

			else {
				drawFrame(zoom);
			}

			printf("before barrier %d \n", zoom);
  800ca4:	000b883a 	mov	r5,zero
  800ca8:	01002074 	movhi	r4,129
  800cac:	21076804 	addi	r4,r4,7584
  800cb0:	0803c580 	call	803c58 <printf>
			barrier(0);
  800cb4:	0009883a 	mov	r4,zero
  800cb8:	08004f40 	call	8004f4 <barrier>
			printf("after barrier %d \n", zoom);
  800cbc:	000b883a 	mov	r5,zero
  800cc0:	01002074 	movhi	r4,129
  800cc4:	21076d04 	addi	r4,r4,7604
  800cc8:	0803c580 	call	803c58 <printf>
  800ccc:	04000044 	movi	r16,1
			/*
			 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
			 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
			 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
			 //*/
			clearScreen();
  800cd0:	08003800 	call	800380 <clearScreen>
			if (zoom == 0) {
				drawFullSet();
			}

			else {
				drawFrame(zoom);
  800cd4:	8009883a 	mov	r4,r16
			 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
			 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
			 //*/
			clearScreen();

			if (zoom == 0) {
  800cd8:	803ff126 	beq	r16,zero,800ca0 <main+0x60>
				drawFullSet();
			}

			else {
				drawFrame(zoom);
  800cdc:	08007100 	call	800710 <drawFrame>
			}

			printf("before barrier %d \n", zoom);
  800ce0:	800b883a 	mov	r5,r16
  800ce4:	01002074 	movhi	r4,129
  800ce8:	21076804 	addi	r4,r4,7584
  800cec:	0803c580 	call	803c58 <printf>
			barrier(0);
  800cf0:	0009883a 	mov	r4,zero
  800cf4:	08004f40 	call	8004f4 <barrier>
			printf("after barrier %d \n", zoom);
  800cf8:	800b883a 	mov	r5,r16
  800cfc:	01002074 	movhi	r4,129
  800d00:	21076d04 	addi	r4,r4,7604
  800d04:	0803c580 	call	803c58 <printf>
	while (1) {

		printf("entering the main loop \n");

		int zoom;
		for (zoom = 0; zoom <= 100; zoom++) {
  800d08:	84000044 	addi	r16,r16,1
  800d0c:	00801904 	movi	r2,100
  800d10:	143fe00e 	bge	r2,r16,800c94 <main+0x54>
  800d14:	003fdb06 	br	800c84 <main+0x44>

00800d18 <powf>:
  800d18:	defff104 	addi	sp,sp,-60
  800d1c:	dd000d15 	stw	r20,52(sp)
  800d20:	dcc00c15 	stw	r19,48(sp)
  800d24:	dc800b15 	stw	r18,44(sp)
  800d28:	dc400a15 	stw	r17,40(sp)
  800d2c:	dc000915 	stw	r16,36(sp)
  800d30:	dfc00e15 	stw	ra,56(sp)
  800d34:	05002074 	movhi	r20,129
  800d38:	a50f8204 	addi	r20,r20,15880
  800d3c:	2027883a 	mov	r19,r4
  800d40:	2825883a 	mov	r18,r5
  800d44:	08011700 	call	801170 <__ieee754_powf>
  800d48:	1021883a 	mov	r16,r2
  800d4c:	a0800017 	ldw	r2,0(r20)
  800d50:	047fffc4 	movi	r17,-1
  800d54:	14400326 	beq	r2,r17,800d64 <powf+0x4c>
  800d58:	9009883a 	mov	r4,r18
  800d5c:	08020340 	call	802034 <isnanf>
  800d60:	10000926 	beq	r2,zero,800d88 <powf+0x70>
  800d64:	8005883a 	mov	r2,r16
  800d68:	dfc00e17 	ldw	ra,56(sp)
  800d6c:	dd000d17 	ldw	r20,52(sp)
  800d70:	dcc00c17 	ldw	r19,48(sp)
  800d74:	dc800b17 	ldw	r18,44(sp)
  800d78:	dc400a17 	ldw	r17,40(sp)
  800d7c:	dc000917 	ldw	r16,36(sp)
  800d80:	dec00f04 	addi	sp,sp,60
  800d84:	f800283a 	ret
  800d88:	9809883a 	mov	r4,r19
  800d8c:	08020340 	call	802034 <isnanf>
  800d90:	1000151e 	bne	r2,zero,800de8 <powf+0xd0>
  800d94:	9809883a 	mov	r4,r19
  800d98:	000b883a 	mov	r5,zero
  800d9c:	08027c40 	call	8027c4 <__eqsf2>
  800da0:	10005a1e 	bne	r2,zero,800f0c <powf+0x1f4>
  800da4:	9009883a 	mov	r4,r18
  800da8:	000b883a 	mov	r5,zero
  800dac:	08027c40 	call	8027c4 <__eqsf2>
  800db0:	1000331e 	bne	r2,zero,800e80 <powf+0x168>
  800db4:	a0800017 	ldw	r2,0(r20)
  800db8:	d8000615 	stw	zero,24(sp)
  800dbc:	d8000715 	stw	zero,28(sp)
  800dc0:	10001426 	beq	r2,zero,800e14 <powf+0xfc>
  800dc4:	008ffc34 	movhi	r2,16368
  800dc8:	d8800715 	stw	r2,28(sp)
  800dcc:	d8800617 	ldw	r2,24(sp)
  800dd0:	d8c00717 	ldw	r3,28(sp)
  800dd4:	1009883a 	mov	r4,r2
  800dd8:	180b883a 	mov	r5,r3
  800ddc:	08032ac0 	call	8032ac <__truncdfsf2>
  800de0:	1021883a 	mov	r16,r2
  800de4:	003fdf06 	br	800d64 <powf+0x4c>
  800de8:	9009883a 	mov	r4,r18
  800dec:	000b883a 	mov	r5,zero
  800df0:	08027c40 	call	8027c4 <__eqsf2>
  800df4:	103fdb1e 	bne	r2,zero,800d64 <powf+0x4c>
  800df8:	a0c00017 	ldw	r3,0(r20)
  800dfc:	010ffc34 	movhi	r4,16368
  800e00:	d8000615 	stw	zero,24(sp)
  800e04:	d9000715 	stw	r4,28(sp)
  800e08:	1c401a26 	beq	r3,r17,800e74 <powf+0x15c>
  800e0c:	00800084 	movi	r2,2
  800e10:	18801826 	beq	r3,r2,800e74 <powf+0x15c>
  800e14:	9009883a 	mov	r4,r18
  800e18:	0802a3c0 	call	802a3c <__extendsfdf2>
  800e1c:	9809883a 	mov	r4,r19
  800e20:	d8c00515 	stw	r3,20(sp)
  800e24:	d8800415 	stw	r2,16(sp)
  800e28:	0802a3c0 	call	802a3c <__extendsfdf2>
  800e2c:	100b883a 	mov	r5,r2
  800e30:	d8c00315 	stw	r3,12(sp)
  800e34:	00802074 	movhi	r2,129
  800e38:	10877204 	addi	r2,r2,7624
  800e3c:	00c00044 	movi	r3,1
  800e40:	d809883a 	mov	r4,sp
  800e44:	d8800115 	stw	r2,4(sp)
  800e48:	d8c00015 	stw	r3,0(sp)
  800e4c:	d9400215 	stw	r5,8(sp)
  800e50:	d8000815 	stw	zero,32(sp)
  800e54:	0801df00 	call	801df0 <matherr>
  800e58:	10002826 	beq	r2,zero,800efc <powf+0x1e4>
  800e5c:	d8800817 	ldw	r2,32(sp)
  800e60:	103fda26 	beq	r2,zero,800dcc <powf+0xb4>
  800e64:	0803c480 	call	803c48 <__errno>
  800e68:	d8c00817 	ldw	r3,32(sp)
  800e6c:	10c00015 	stw	r3,0(r2)
  800e70:	003fd606 	br	800dcc <powf+0xb4>
  800e74:	d9000715 	stw	r4,28(sp)
  800e78:	d8000615 	stw	zero,24(sp)
  800e7c:	003fd306 	br	800dcc <powf+0xb4>
  800e80:	9009883a 	mov	r4,r18
  800e84:	08020180 	call	802018 <finitef>
  800e88:	103fb626 	beq	r2,zero,800d64 <powf+0x4c>
  800e8c:	9009883a 	mov	r4,r18
  800e90:	000b883a 	mov	r5,zero
  800e94:	08028b40 	call	8028b4 <__ltsf2>
  800e98:	103fb20e 	bge	r2,zero,800d64 <powf+0x4c>
  800e9c:	9809883a 	mov	r4,r19
  800ea0:	00800044 	movi	r2,1
  800ea4:	00c02074 	movhi	r3,129
  800ea8:	18c77204 	addi	r3,r3,7624
  800eac:	d8800015 	stw	r2,0(sp)
  800eb0:	d8c00115 	stw	r3,4(sp)
  800eb4:	d8000815 	stw	zero,32(sp)
  800eb8:	0802a3c0 	call	802a3c <__extendsfdf2>
  800ebc:	9009883a 	mov	r4,r18
  800ec0:	d8c00315 	stw	r3,12(sp)
  800ec4:	d8800215 	stw	r2,8(sp)
  800ec8:	0802a3c0 	call	802a3c <__extendsfdf2>
  800ecc:	a1800017 	ldw	r6,0(r20)
  800ed0:	d8c00515 	stw	r3,20(sp)
  800ed4:	d8800415 	stw	r2,16(sp)
  800ed8:	30005626 	beq	r6,zero,801034 <powf+0x31c>
  800edc:	00bffc34 	movhi	r2,65520
  800ee0:	d8800715 	stw	r2,28(sp)
  800ee4:	00800084 	movi	r2,2
  800ee8:	d8000615 	stw	zero,24(sp)
  800eec:	30800326 	beq	r6,r2,800efc <powf+0x1e4>
  800ef0:	d809883a 	mov	r4,sp
  800ef4:	0801df00 	call	801df0 <matherr>
  800ef8:	103fd81e 	bne	r2,zero,800e5c <powf+0x144>
  800efc:	0803c480 	call	803c48 <__errno>
  800f00:	00c00844 	movi	r3,33
  800f04:	10c00015 	stw	r3,0(r2)
  800f08:	003fd406 	br	800e5c <powf+0x144>
  800f0c:	8009883a 	mov	r4,r16
  800f10:	08020180 	call	802018 <finitef>
  800f14:	10002426 	beq	r2,zero,800fa8 <powf+0x290>
  800f18:	8009883a 	mov	r4,r16
  800f1c:	000b883a 	mov	r5,zero
  800f20:	08027c40 	call	8027c4 <__eqsf2>
  800f24:	103f8f1e 	bne	r2,zero,800d64 <powf+0x4c>
  800f28:	9809883a 	mov	r4,r19
  800f2c:	08020180 	call	802018 <finitef>
  800f30:	103f8c26 	beq	r2,zero,800d64 <powf+0x4c>
  800f34:	9009883a 	mov	r4,r18
  800f38:	08020180 	call	802018 <finitef>
  800f3c:	103f8926 	beq	r2,zero,800d64 <powf+0x4c>
  800f40:	9809883a 	mov	r4,r19
  800f44:	00800104 	movi	r2,4
  800f48:	00c02074 	movhi	r3,129
  800f4c:	18c77204 	addi	r3,r3,7624
  800f50:	d8800015 	stw	r2,0(sp)
  800f54:	d8c00115 	stw	r3,4(sp)
  800f58:	d8000815 	stw	zero,32(sp)
  800f5c:	0802a3c0 	call	802a3c <__extendsfdf2>
  800f60:	9009883a 	mov	r4,r18
  800f64:	d8c00315 	stw	r3,12(sp)
  800f68:	d8800215 	stw	r2,8(sp)
  800f6c:	0802a3c0 	call	802a3c <__extendsfdf2>
  800f70:	a1800017 	ldw	r6,0(r20)
  800f74:	d8800415 	stw	r2,16(sp)
  800f78:	00800084 	movi	r2,2
  800f7c:	d8c00515 	stw	r3,20(sp)
  800f80:	d8000615 	stw	zero,24(sp)
  800f84:	d8000715 	stw	zero,28(sp)
  800f88:	30800326 	beq	r6,r2,800f98 <powf+0x280>
  800f8c:	d809883a 	mov	r4,sp
  800f90:	0801df00 	call	801df0 <matherr>
  800f94:	103fb11e 	bne	r2,zero,800e5c <powf+0x144>
  800f98:	0803c480 	call	803c48 <__errno>
  800f9c:	00c00884 	movi	r3,34
  800fa0:	10c00015 	stw	r3,0(r2)
  800fa4:	003fad06 	br	800e5c <powf+0x144>
  800fa8:	9809883a 	mov	r4,r19
  800fac:	08020180 	call	802018 <finitef>
  800fb0:	103fd926 	beq	r2,zero,800f18 <powf+0x200>
  800fb4:	9009883a 	mov	r4,r18
  800fb8:	08020180 	call	802018 <finitef>
  800fbc:	103fd626 	beq	r2,zero,800f18 <powf+0x200>
  800fc0:	8009883a 	mov	r4,r16
  800fc4:	08020340 	call	802034 <isnanf>
  800fc8:	10001d26 	beq	r2,zero,801040 <powf+0x328>
  800fcc:	9809883a 	mov	r4,r19
  800fd0:	00800044 	movi	r2,1
  800fd4:	00c02074 	movhi	r3,129
  800fd8:	18c77204 	addi	r3,r3,7624
  800fdc:	d8800015 	stw	r2,0(sp)
  800fe0:	d8c00115 	stw	r3,4(sp)
  800fe4:	d8000815 	stw	zero,32(sp)
  800fe8:	0802a3c0 	call	802a3c <__extendsfdf2>
  800fec:	9009883a 	mov	r4,r18
  800ff0:	d8c00315 	stw	r3,12(sp)
  800ff4:	d8800215 	stw	r2,8(sp)
  800ff8:	0802a3c0 	call	802a3c <__extendsfdf2>
  800ffc:	a4000017 	ldw	r16,0(r20)
  801000:	d8c00515 	stw	r3,20(sp)
  801004:	d8800415 	stw	r2,16(sp)
  801008:	80000a26 	beq	r16,zero,801034 <powf+0x31c>
  80100c:	0009883a 	mov	r4,zero
  801010:	000d883a 	mov	r6,zero
  801014:	000b883a 	mov	r5,zero
  801018:	000f883a 	mov	r7,zero
  80101c:	0802f940 	call	802f94 <__divdf3>
  801020:	d8800615 	stw	r2,24(sp)
  801024:	00800084 	movi	r2,2
  801028:	d8c00715 	stw	r3,28(sp)
  80102c:	80bfb01e 	bne	r16,r2,800ef0 <powf+0x1d8>
  801030:	003fb206 	br	800efc <powf+0x1e4>
  801034:	d8000615 	stw	zero,24(sp)
  801038:	d8000715 	stw	zero,28(sp)
  80103c:	003fac06 	br	800ef0 <powf+0x1d8>
  801040:	9809883a 	mov	r4,r19
  801044:	008000c4 	movi	r2,3
  801048:	00c02074 	movhi	r3,129
  80104c:	18c77204 	addi	r3,r3,7624
  801050:	d8800015 	stw	r2,0(sp)
  801054:	d8c00115 	stw	r3,4(sp)
  801058:	d8000815 	stw	zero,32(sp)
  80105c:	0802a3c0 	call	802a3c <__extendsfdf2>
  801060:	9009883a 	mov	r4,r18
  801064:	d8c00315 	stw	r3,12(sp)
  801068:	d8800215 	stw	r2,8(sp)
  80106c:	0802a3c0 	call	802a3c <__extendsfdf2>
  801070:	a1800017 	ldw	r6,0(r20)
  801074:	d8c00515 	stw	r3,20(sp)
  801078:	d8800415 	stw	r2,16(sp)
  80107c:	3000211e 	bne	r6,zero,801104 <powf+0x3ec>
  801080:	9809883a 	mov	r4,r19
  801084:	0091fc34 	movhi	r2,18416
  801088:	10bfffc4 	addi	r2,r2,-1
  80108c:	04f80034 	movhi	r19,57344
  801090:	000b883a 	mov	r5,zero
  801094:	d8800715 	stw	r2,28(sp)
  801098:	dcc00615 	stw	r19,24(sp)
  80109c:	08028b40 	call	8028b4 <__ltsf2>
  8010a0:	103fba0e 	bge	r2,zero,800f8c <powf+0x274>
  8010a4:	014fc034 	movhi	r5,16128
  8010a8:	9009883a 	mov	r4,r18
  8010ac:	08024700 	call	802470 <__mulsf3>
  8010b0:	1009883a 	mov	r4,r2
  8010b4:	0802a3c0 	call	802a3c <__extendsfdf2>
  8010b8:	1009883a 	mov	r4,r2
  8010bc:	180b883a 	mov	r5,r3
  8010c0:	1021883a 	mov	r16,r2
  8010c4:	1823883a 	mov	r17,r3
  8010c8:	0801df80 	call	801df8 <rint>
  8010cc:	180f883a 	mov	r7,r3
  8010d0:	880b883a 	mov	r5,r17
  8010d4:	8009883a 	mov	r4,r16
  8010d8:	100d883a 	mov	r6,r2
  8010dc:	08031ec0 	call	8031ec <__nedf2>
  8010e0:	10000426 	beq	r2,zero,8010f4 <powf+0x3dc>
  8010e4:	00b1fc34 	movhi	r2,51184
  8010e8:	10bfffc4 	addi	r2,r2,-1
  8010ec:	dcc00615 	stw	r19,24(sp)
  8010f0:	d8800715 	stw	r2,28(sp)
  8010f4:	a0c00017 	ldw	r3,0(r20)
  8010f8:	00800084 	movi	r2,2
  8010fc:	18bfa31e 	bne	r3,r2,800f8c <powf+0x274>
  801100:	003fa506 	br	800f98 <powf+0x280>
  801104:	009ffc34 	movhi	r2,32752
  801108:	9809883a 	mov	r4,r19
  80110c:	000b883a 	mov	r5,zero
  801110:	d8800715 	stw	r2,28(sp)
  801114:	d8000615 	stw	zero,24(sp)
  801118:	08028b40 	call	8028b4 <__ltsf2>
  80111c:	103ff50e 	bge	r2,zero,8010f4 <powf+0x3dc>
  801120:	014fc034 	movhi	r5,16128
  801124:	9009883a 	mov	r4,r18
  801128:	08024700 	call	802470 <__mulsf3>
  80112c:	1009883a 	mov	r4,r2
  801130:	0802a3c0 	call	802a3c <__extendsfdf2>
  801134:	1009883a 	mov	r4,r2
  801138:	180b883a 	mov	r5,r3
  80113c:	1021883a 	mov	r16,r2
  801140:	1823883a 	mov	r17,r3
  801144:	0801df80 	call	801df8 <rint>
  801148:	180f883a 	mov	r7,r3
  80114c:	880b883a 	mov	r5,r17
  801150:	8009883a 	mov	r4,r16
  801154:	100d883a 	mov	r6,r2
  801158:	08031ec0 	call	8031ec <__nedf2>
  80115c:	103fe526 	beq	r2,zero,8010f4 <powf+0x3dc>
  801160:	00bffc34 	movhi	r2,65520
  801164:	d8800715 	stw	r2,28(sp)
  801168:	d8000615 	stw	zero,24(sp)
  80116c:	003fe106 	br	8010f4 <powf+0x3dc>

00801170 <__ieee754_powf>:
  801170:	defff004 	addi	sp,sp,-64
  801174:	00a00034 	movhi	r2,32768
  801178:	10bfffc4 	addi	r2,r2,-1
  80117c:	dc000615 	stw	r16,24(sp)
  801180:	28a0703a 	and	r16,r5,r2
  801184:	df000e15 	stw	fp,56(sp)
  801188:	dcc00915 	stw	r19,36(sp)
  80118c:	dc800815 	stw	r18,32(sp)
  801190:	2027883a 	mov	r19,r4
  801194:	dfc00f15 	stw	ra,60(sp)
  801198:	ddc00d15 	stw	r23,52(sp)
  80119c:	dd800c15 	stw	r22,48(sp)
  8011a0:	dd400b15 	stw	r21,44(sp)
  8011a4:	dd000a15 	stw	r20,40(sp)
  8011a8:	dc400715 	stw	r17,28(sp)
  8011ac:	2839883a 	mov	fp,r5
  8011b0:	2825883a 	mov	r18,r5
  8011b4:	2809883a 	mov	r4,r5
  8011b8:	80003526 	beq	r16,zero,801290 <__ieee754_powf+0x120>
  8011bc:	98a2703a 	and	r17,r19,r2
  8011c0:	009fe034 	movhi	r2,32640
  8011c4:	9829883a 	mov	r20,r19
  8011c8:	1440100e 	bge	r2,r17,80120c <__ieee754_powf+0x9c>
  8011cc:	008fe034 	movhi	r2,16256
  8011d0:	88803d26 	beq	r17,r2,8012c8 <__ieee754_powf+0x158>
  8011d4:	01002074 	movhi	r4,129
  8011d8:	21076104 	addi	r4,r4,7556
  8011dc:	dfc00f17 	ldw	ra,60(sp)
  8011e0:	df000e17 	ldw	fp,56(sp)
  8011e4:	ddc00d17 	ldw	r23,52(sp)
  8011e8:	dd800c17 	ldw	r22,48(sp)
  8011ec:	dd400b17 	ldw	r21,44(sp)
  8011f0:	dd000a17 	ldw	r20,40(sp)
  8011f4:	dcc00917 	ldw	r19,36(sp)
  8011f8:	dc800817 	ldw	r18,32(sp)
  8011fc:	dc400717 	ldw	r17,28(sp)
  801200:	dc000617 	ldw	r16,24(sp)
  801204:	dec01004 	addi	sp,sp,64
  801208:	080204c1 	jmpi	80204c <nanf>
  80120c:	143fef16 	blt	r2,r16,8011cc <__ieee754_powf+0x5c>
  801210:	982a403a 	cmpge	r21,r19,zero
  801214:	a8004526 	beq	r21,zero,80132c <__ieee754_powf+0x1bc>
  801218:	002f883a 	mov	r23,zero
  80121c:	009fe034 	movhi	r2,32640
  801220:	80803926 	beq	r16,r2,801308 <__ieee754_powf+0x198>
  801224:	008fe034 	movhi	r2,16256
  801228:	80803d26 	beq	r16,r2,801320 <__ieee754_powf+0x1b0>
  80122c:	00900034 	movhi	r2,16384
  801230:	20805326 	beq	r4,r2,801380 <__ieee754_powf+0x210>
  801234:	008fc034 	movhi	r2,16128
  801238:	20802526 	beq	r4,r2,8012d0 <__ieee754_powf+0x160>
  80123c:	9809883a 	mov	r4,r19
  801240:	08020080 	call	802008 <fabsf>
  801244:	1009883a 	mov	r4,r2
  801248:	009fe034 	movhi	r2,32640
  80124c:	88803c26 	beq	r17,r2,801340 <__ieee754_powf+0x1d0>
  801250:	88003b26 	beq	r17,zero,801340 <__ieee754_powf+0x1d0>
  801254:	014fe034 	movhi	r5,16256
  801258:	89403926 	beq	r17,r5,801340 <__ieee754_powf+0x1d0>
  80125c:	a004d7fa 	srli	r2,r20,31
  801260:	10bfffc4 	addi	r2,r2,-1
  801264:	15c6b03a 	or	r3,r2,r23
  801268:	d8800215 	stw	r2,8(sp)
  80126c:	1800661e 	bne	r3,zero,801408 <__ieee754_powf+0x298>
  801270:	980b883a 	mov	r5,r19
  801274:	9809883a 	mov	r4,r19
  801278:	080239c0 	call	80239c <__subsf3>
  80127c:	1009883a 	mov	r4,r2
  801280:	100b883a 	mov	r5,r2
  801284:	08026500 	call	802650 <__divsf3>
  801288:	1039883a 	mov	fp,r2
  80128c:	00000106 	br	801294 <__ieee754_powf+0x124>
  801290:	070fe034 	movhi	fp,16256
  801294:	e005883a 	mov	r2,fp
  801298:	dfc00f17 	ldw	ra,60(sp)
  80129c:	df000e17 	ldw	fp,56(sp)
  8012a0:	ddc00d17 	ldw	r23,52(sp)
  8012a4:	dd800c17 	ldw	r22,48(sp)
  8012a8:	dd400b17 	ldw	r21,44(sp)
  8012ac:	dd000a17 	ldw	r20,40(sp)
  8012b0:	dcc00917 	ldw	r19,36(sp)
  8012b4:	dc800817 	ldw	r18,32(sp)
  8012b8:	dc400717 	ldw	r17,28(sp)
  8012bc:	dc000617 	ldw	r16,24(sp)
  8012c0:	dec01004 	addi	sp,sp,64
  8012c4:	f800283a 	ret
  8012c8:	8839883a 	mov	fp,r17
  8012cc:	003ff106 	br	801294 <__ieee754_powf+0x124>
  8012d0:	a03fda16 	blt	r20,zero,80123c <__ieee754_powf+0xcc>
  8012d4:	9809883a 	mov	r4,r19
  8012d8:	dfc00f17 	ldw	ra,60(sp)
  8012dc:	df000e17 	ldw	fp,56(sp)
  8012e0:	ddc00d17 	ldw	r23,52(sp)
  8012e4:	dd800c17 	ldw	r22,48(sp)
  8012e8:	dd400b17 	ldw	r21,44(sp)
  8012ec:	dd000a17 	ldw	r20,40(sp)
  8012f0:	dcc00917 	ldw	r19,36(sp)
  8012f4:	dc800817 	ldw	r18,32(sp)
  8012f8:	dc400717 	ldw	r17,28(sp)
  8012fc:	dc000617 	ldw	r16,24(sp)
  801300:	dec01004 	addi	sp,sp,64
  801304:	0801c841 	jmpi	801c84 <__ieee754_sqrtf>
  801308:	008fe034 	movhi	r2,16256
  80130c:	88bfee26 	beq	r17,r2,8012c8 <__ieee754_powf+0x158>
  801310:	1440200e 	bge	r2,r17,801394 <__ieee754_powf+0x224>
  801314:	903fdf0e 	bge	r18,zero,801294 <__ieee754_powf+0x124>
  801318:	0039883a 	mov	fp,zero
  80131c:	003fdd06 	br	801294 <__ieee754_powf+0x124>
  801320:	90002f16 	blt	r18,zero,8013e0 <__ieee754_powf+0x270>
  801324:	9839883a 	mov	fp,r19
  801328:	003fda06 	br	801294 <__ieee754_powf+0x124>
  80132c:	0092e034 	movhi	r2,19328
  801330:	10bfffc4 	addi	r2,r2,-1
  801334:	14001b0e 	bge	r2,r16,8013a4 <__ieee754_powf+0x234>
  801338:	05c00084 	movi	r23,2
  80133c:	003fb706 	br	80121c <__ieee754_powf+0xac>
  801340:	90000916 	blt	r18,zero,801368 <__ieee754_powf+0x1f8>
  801344:	a8000226 	beq	r21,zero,801350 <__ieee754_powf+0x1e0>
  801348:	2039883a 	mov	fp,r4
  80134c:	003fd106 	br	801294 <__ieee754_powf+0x124>
  801350:	00b02034 	movhi	r2,49280
  801354:	8885883a 	add	r2,r17,r2
  801358:	b884b03a 	or	r2,r23,r2
  80135c:	1000251e 	bne	r2,zero,8013f4 <__ieee754_powf+0x284>
  801360:	200b883a 	mov	r5,r4
  801364:	003fc406 	br	801278 <__ieee754_powf+0x108>
  801368:	200b883a 	mov	r5,r4
  80136c:	010fe034 	movhi	r4,16256
  801370:	08026500 	call	802650 <__divsf3>
  801374:	1009883a 	mov	r4,r2
  801378:	a83ff31e 	bne	r21,zero,801348 <__ieee754_powf+0x1d8>
  80137c:	003ff406 	br	801350 <__ieee754_powf+0x1e0>
  801380:	980b883a 	mov	r5,r19
  801384:	9809883a 	mov	r4,r19
  801388:	08024700 	call	802470 <__mulsf3>
  80138c:	1039883a 	mov	fp,r2
  801390:	003fc006 	br	801294 <__ieee754_powf+0x124>
  801394:	903fe00e 	bge	r18,zero,801318 <__ieee754_powf+0x1a8>
  801398:	e0a0003c 	xorhi	r2,fp,32768
  80139c:	1039883a 	mov	fp,r2
  8013a0:	003fbc06 	br	801294 <__ieee754_powf+0x124>
  8013a4:	008fe034 	movhi	r2,16256
  8013a8:	10bfffc4 	addi	r2,r2,-1
  8013ac:	1400060e 	bge	r2,r16,8013c8 <__ieee754_powf+0x258>
  8013b0:	8007d5fa 	srai	r3,r16,23
  8013b4:	00802584 	movi	r2,150
  8013b8:	10c5c83a 	sub	r2,r2,r3
  8013bc:	8087d83a 	sra	r3,r16,r2
  8013c0:	1884983a 	sll	r2,r3,r2
  8013c4:	80800226 	beq	r16,r2,8013d0 <__ieee754_powf+0x260>
  8013c8:	002f883a 	mov	r23,zero
  8013cc:	003f9506 	br	801224 <__ieee754_powf+0xb4>
  8013d0:	18c0004c 	andi	r3,r3,1
  8013d4:	00800084 	movi	r2,2
  8013d8:	10efc83a 	sub	r23,r2,r3
  8013dc:	003f9106 	br	801224 <__ieee754_powf+0xb4>
  8013e0:	8009883a 	mov	r4,r16
  8013e4:	980b883a 	mov	r5,r19
  8013e8:	08026500 	call	802650 <__divsf3>
  8013ec:	1039883a 	mov	fp,r2
  8013f0:	003fa806 	br	801294 <__ieee754_powf+0x124>
  8013f4:	00800044 	movi	r2,1
  8013f8:	b8bfd31e 	bne	r23,r2,801348 <__ieee754_powf+0x1d8>
  8013fc:	20a0003c 	xorhi	r2,r4,32768
  801400:	1039883a 	mov	fp,r2
  801404:	003fa306 	br	801294 <__ieee754_powf+0x124>
  801408:	00934034 	movhi	r2,19712
  80140c:	14000a0e 	bge	r2,r16,801438 <__ieee754_powf+0x2c8>
  801410:	008fe034 	movhi	r2,16256
  801414:	10bffdc4 	addi	r2,r2,-9
  801418:	1441b016 	blt	r2,r17,801adc <__ieee754_powf+0x96c>
  80141c:	903fbe0e 	bge	r18,zero,801318 <__ieee754_powf+0x1a8>
  801420:	011c52b4 	movhi	r4,29002
  801424:	213cb284 	addi	r4,r4,-3382
  801428:	200b883a 	mov	r5,r4
  80142c:	08024700 	call	802470 <__mulsf3>
  801430:	1039883a 	mov	fp,r2
  801434:	003f9706 	br	801294 <__ieee754_powf+0x124>
  801438:	00802034 	movhi	r2,128
  80143c:	10bfffc4 	addi	r2,r2,-1
  801440:	1441a10e 	bge	r2,r17,801ac8 <__ieee754_powf+0x958>
  801444:	0009883a 	mov	r4,zero
  801448:	8805d5fa 	srai	r2,r17,23
  80144c:	00c02034 	movhi	r3,128
  801450:	18ffffc4 	addi	r3,r3,-1
  801454:	88c6703a 	and	r3,r17,r3
  801458:	2089883a 	add	r4,r4,r2
  80145c:	20bfe044 	addi	r2,r4,-127
  801460:	d8800015 	stw	r2,0(sp)
  801464:	00800774 	movhi	r2,29
  801468:	10b11c44 	addi	r2,r2,-15247
  80146c:	1c0fe034 	orhi	r16,r3,16256
  801470:	10c1790e 	bge	r2,r3,801a58 <__ieee754_powf+0x8e8>
  801474:	008017b4 	movhi	r2,94
  801478:	10acf584 	addi	r2,r2,-19498
  80147c:	10c17216 	blt	r2,r3,801a48 <__ieee754_powf+0x8d8>
  801480:	00800934 	movhi	r2,36
  801484:	05000044 	movi	r20,1
  801488:	d8800115 	stw	r2,4(sp)
  80148c:	a529883a 	add	r20,r20,r20
  801490:	a529883a 	add	r20,r20,r20
  801494:	d0a00104 	addi	r2,gp,-32764
  801498:	a085883a 	add	r2,r20,r2
  80149c:	14800017 	ldw	r18,0(r2)
  8014a0:	8009883a 	mov	r4,r16
  8014a4:	8023d07a 	srai	r17,r16,1
  8014a8:	900b883a 	mov	r5,r18
  8014ac:	080239c0 	call	80239c <__subsf3>
  8014b0:	8009883a 	mov	r4,r16
  8014b4:	900b883a 	mov	r5,r18
  8014b8:	1027883a 	mov	r19,r2
  8014bc:	080240c0 	call	80240c <__addsf3>
  8014c0:	100b883a 	mov	r5,r2
  8014c4:	010fe034 	movhi	r4,16256
  8014c8:	08026500 	call	802650 <__divsf3>
  8014cc:	100b883a 	mov	r5,r2
  8014d0:	9809883a 	mov	r4,r19
  8014d4:	102b883a 	mov	r21,r2
  8014d8:	08024700 	call	802470 <__mulsf3>
  8014dc:	d8800315 	stw	r2,12(sp)
  8014e0:	d8c00317 	ldw	r3,12(sp)
  8014e4:	00bc0004 	movi	r2,-4096
  8014e8:	8c480034 	orhi	r17,r17,8192
  8014ec:	10ec703a 	and	r22,r2,r3
  8014f0:	d8800117 	ldw	r2,4(sp)
  8014f4:	b009883a 	mov	r4,r22
  8014f8:	88a3883a 	add	r17,r17,r2
  8014fc:	880b883a 	mov	r5,r17
  801500:	08024700 	call	802470 <__mulsf3>
  801504:	100b883a 	mov	r5,r2
  801508:	9809883a 	mov	r4,r19
  80150c:	080239c0 	call	80239c <__subsf3>
  801510:	8809883a 	mov	r4,r17
  801514:	900b883a 	mov	r5,r18
  801518:	1027883a 	mov	r19,r2
  80151c:	080239c0 	call	80239c <__subsf3>
  801520:	100b883a 	mov	r5,r2
  801524:	8009883a 	mov	r4,r16
  801528:	080239c0 	call	80239c <__subsf3>
  80152c:	100b883a 	mov	r5,r2
  801530:	b009883a 	mov	r4,r22
  801534:	08024700 	call	802470 <__mulsf3>
  801538:	100b883a 	mov	r5,r2
  80153c:	9809883a 	mov	r4,r19
  801540:	080239c0 	call	80239c <__subsf3>
  801544:	100b883a 	mov	r5,r2
  801548:	a809883a 	mov	r4,r21
  80154c:	08024700 	call	802470 <__mulsf3>
  801550:	d9000317 	ldw	r4,12(sp)
  801554:	d8800415 	stw	r2,16(sp)
  801558:	05501034 	movhi	r21,16448
  80155c:	200b883a 	mov	r5,r4
  801560:	08024700 	call	802470 <__mulsf3>
  801564:	1021883a 	mov	r16,r2
  801568:	1009883a 	mov	r4,r2
  80156c:	100b883a 	mov	r5,r2
  801570:	08024700 	call	802470 <__mulsf3>
  801574:	8009883a 	mov	r4,r16
  801578:	014f9534 	movhi	r5,15956
  80157c:	297c5084 	addi	r5,r5,-3774
  801580:	1023883a 	mov	r17,r2
  801584:	08024700 	call	802470 <__mulsf3>
  801588:	1009883a 	mov	r4,r2
  80158c:	014f9b34 	movhi	r5,15980
  801590:	294c9544 	addi	r5,r5,12885
  801594:	080240c0 	call	80240c <__addsf3>
  801598:	100b883a 	mov	r5,r2
  80159c:	8009883a 	mov	r4,r16
  8015a0:	08024700 	call	802470 <__mulsf3>
  8015a4:	1009883a 	mov	r4,r2
  8015a8:	014fa334 	movhi	r5,16012
  8015ac:	2968c144 	addi	r5,r5,-23803
  8015b0:	080240c0 	call	80240c <__addsf3>
  8015b4:	100b883a 	mov	r5,r2
  8015b8:	8009883a 	mov	r4,r16
  8015bc:	08024700 	call	802470 <__mulsf3>
  8015c0:	1009883a 	mov	r4,r2
  8015c4:	014faaf4 	movhi	r5,16043
  8015c8:	296aaac4 	addi	r5,r5,-21845
  8015cc:	080240c0 	call	80240c <__addsf3>
  8015d0:	100b883a 	mov	r5,r2
  8015d4:	8009883a 	mov	r4,r16
  8015d8:	08024700 	call	802470 <__mulsf3>
  8015dc:	1009883a 	mov	r4,r2
  8015e0:	014fb6f4 	movhi	r5,16091
  8015e4:	295b6dc4 	addi	r5,r5,28087
  8015e8:	080240c0 	call	80240c <__addsf3>
  8015ec:	100b883a 	mov	r5,r2
  8015f0:	8009883a 	mov	r4,r16
  8015f4:	08024700 	call	802470 <__mulsf3>
  8015f8:	1009883a 	mov	r4,r2
  8015fc:	014fc6b4 	movhi	r5,16154
  801600:	29666684 	addi	r5,r5,-26214
  801604:	080240c0 	call	80240c <__addsf3>
  801608:	100b883a 	mov	r5,r2
  80160c:	8809883a 	mov	r4,r17
  801610:	08024700 	call	802470 <__mulsf3>
  801614:	d9000317 	ldw	r4,12(sp)
  801618:	b00b883a 	mov	r5,r22
  80161c:	1021883a 	mov	r16,r2
  801620:	080240c0 	call	80240c <__addsf3>
  801624:	d9000417 	ldw	r4,16(sp)
  801628:	100b883a 	mov	r5,r2
  80162c:	08024700 	call	802470 <__mulsf3>
  801630:	100b883a 	mov	r5,r2
  801634:	8009883a 	mov	r4,r16
  801638:	080240c0 	call	80240c <__addsf3>
  80163c:	b009883a 	mov	r4,r22
  801640:	b00b883a 	mov	r5,r22
  801644:	1025883a 	mov	r18,r2
  801648:	08024700 	call	802470 <__mulsf3>
  80164c:	1009883a 	mov	r4,r2
  801650:	a80b883a 	mov	r5,r21
  801654:	1027883a 	mov	r19,r2
  801658:	080240c0 	call	80240c <__addsf3>
  80165c:	100b883a 	mov	r5,r2
  801660:	9009883a 	mov	r4,r18
  801664:	080240c0 	call	80240c <__addsf3>
  801668:	00fc0004 	movi	r3,-4096
  80166c:	10e2703a 	and	r17,r2,r3
  801670:	880b883a 	mov	r5,r17
  801674:	b009883a 	mov	r4,r22
  801678:	08024700 	call	802470 <__mulsf3>
  80167c:	d9000417 	ldw	r4,16(sp)
  801680:	880b883a 	mov	r5,r17
  801684:	d8800515 	stw	r2,20(sp)
  801688:	08024700 	call	802470 <__mulsf3>
  80168c:	8809883a 	mov	r4,r17
  801690:	a80b883a 	mov	r5,r21
  801694:	1021883a 	mov	r16,r2
  801698:	080239c0 	call	80239c <__subsf3>
  80169c:	1009883a 	mov	r4,r2
  8016a0:	980b883a 	mov	r5,r19
  8016a4:	080239c0 	call	80239c <__subsf3>
  8016a8:	100b883a 	mov	r5,r2
  8016ac:	9009883a 	mov	r4,r18
  8016b0:	080239c0 	call	80239c <__subsf3>
  8016b4:	d9000317 	ldw	r4,12(sp)
  8016b8:	100b883a 	mov	r5,r2
  8016bc:	08024700 	call	802470 <__mulsf3>
  8016c0:	100b883a 	mov	r5,r2
  8016c4:	8009883a 	mov	r4,r16
  8016c8:	080240c0 	call	80240c <__addsf3>
  8016cc:	d9000517 	ldw	r4,20(sp)
  8016d0:	100b883a 	mov	r5,r2
  8016d4:	1027883a 	mov	r19,r2
  8016d8:	080240c0 	call	80240c <__addsf3>
  8016dc:	00fc0004 	movi	r3,-4096
  8016e0:	10e2703a 	and	r17,r2,r3
  8016e4:	8809883a 	mov	r4,r17
  8016e8:	014fddb4 	movhi	r5,16246
  8016ec:	294e0004 	addi	r5,r5,14336
  8016f0:	08024700 	call	802470 <__mulsf3>
  8016f4:	8809883a 	mov	r4,r17
  8016f8:	014da7b4 	movhi	r5,13982
  8016fc:	2970e804 	addi	r5,r5,-15456
  801700:	102b883a 	mov	r21,r2
  801704:	08024700 	call	802470 <__mulsf3>
  801708:	d9400517 	ldw	r5,20(sp)
  80170c:	8809883a 	mov	r4,r17
  801710:	1025883a 	mov	r18,r2
  801714:	080239c0 	call	80239c <__subsf3>
  801718:	100b883a 	mov	r5,r2
  80171c:	9809883a 	mov	r4,r19
  801720:	080239c0 	call	80239c <__subsf3>
  801724:	1009883a 	mov	r4,r2
  801728:	014fddb4 	movhi	r5,16246
  80172c:	294e13c4 	addi	r5,r5,14415
  801730:	08024700 	call	802470 <__mulsf3>
  801734:	100b883a 	mov	r5,r2
  801738:	9009883a 	mov	r4,r18
  80173c:	080240c0 	call	80240c <__addsf3>
  801740:	d0e00304 	addi	r3,gp,-32756
  801744:	a0c7883a 	add	r3,r20,r3
  801748:	19400017 	ldw	r5,0(r3)
  80174c:	1009883a 	mov	r4,r2
  801750:	080240c0 	call	80240c <__addsf3>
  801754:	d9000017 	ldw	r4,0(sp)
  801758:	1023883a 	mov	r17,r2
  80175c:	08029a40 	call	8029a4 <__floatsisf>
  801760:	1021883a 	mov	r16,r2
  801764:	d0a00504 	addi	r2,gp,-32748
  801768:	a0a9883a 	add	r20,r20,r2
  80176c:	a4800017 	ldw	r18,0(r20)
  801770:	a809883a 	mov	r4,r21
  801774:	880b883a 	mov	r5,r17
  801778:	080240c0 	call	80240c <__addsf3>
  80177c:	1009883a 	mov	r4,r2
  801780:	900b883a 	mov	r5,r18
  801784:	080240c0 	call	80240c <__addsf3>
  801788:	100b883a 	mov	r5,r2
  80178c:	8009883a 	mov	r4,r16
  801790:	080240c0 	call	80240c <__addsf3>
  801794:	00fc0004 	movi	r3,-4096
  801798:	10c4703a 	and	r2,r2,r3
  80179c:	800b883a 	mov	r5,r16
  8017a0:	1009883a 	mov	r4,r2
  8017a4:	1027883a 	mov	r19,r2
  8017a8:	080239c0 	call	80239c <__subsf3>
  8017ac:	1009883a 	mov	r4,r2
  8017b0:	900b883a 	mov	r5,r18
  8017b4:	080239c0 	call	80239c <__subsf3>
  8017b8:	1009883a 	mov	r4,r2
  8017bc:	a80b883a 	mov	r5,r21
  8017c0:	080239c0 	call	80239c <__subsf3>
  8017c4:	100b883a 	mov	r5,r2
  8017c8:	8809883a 	mov	r4,r17
  8017cc:	080239c0 	call	80239c <__subsf3>
  8017d0:	1021883a 	mov	r16,r2
  8017d4:	d8c00217 	ldw	r3,8(sp)
  8017d8:	b8bfffc4 	addi	r2,r23,-1
  8017dc:	1884b03a 	or	r2,r3,r2
  8017e0:	1000a11e 	bne	r2,zero,801a68 <__ieee754_powf+0x8f8>
  8017e4:	05efe034 	movhi	r23,49024
  8017e8:	047c0004 	movi	r17,-4096
  8017ec:	8f22703a 	and	r17,r17,fp
  8017f0:	e009883a 	mov	r4,fp
  8017f4:	880b883a 	mov	r5,r17
  8017f8:	080239c0 	call	80239c <__subsf3>
  8017fc:	100b883a 	mov	r5,r2
  801800:	9809883a 	mov	r4,r19
  801804:	08024700 	call	802470 <__mulsf3>
  801808:	8009883a 	mov	r4,r16
  80180c:	e00b883a 	mov	r5,fp
  801810:	1025883a 	mov	r18,r2
  801814:	08024700 	call	802470 <__mulsf3>
  801818:	100b883a 	mov	r5,r2
  80181c:	9009883a 	mov	r4,r18
  801820:	080240c0 	call	80240c <__addsf3>
  801824:	9809883a 	mov	r4,r19
  801828:	880b883a 	mov	r5,r17
  80182c:	1021883a 	mov	r16,r2
  801830:	08024700 	call	802470 <__mulsf3>
  801834:	100b883a 	mov	r5,r2
  801838:	8009883a 	mov	r4,r16
  80183c:	1027883a 	mov	r19,r2
  801840:	080240c0 	call	80240c <__addsf3>
  801844:	1023883a 	mov	r17,r2
  801848:	1029883a 	mov	r20,r2
  80184c:	00a00034 	movhi	r2,32768
  801850:	10bfffc4 	addi	r2,r2,-1
  801854:	88a4703a 	and	r18,r17,r2
  801858:	8039883a 	mov	fp,r16
  80185c:	982b883a 	mov	r21,r19
  801860:	8807883a 	mov	r3,r17
  801864:	0440a30e 	bge	zero,r17,801af4 <__ieee754_powf+0x984>
  801868:	0090c034 	movhi	r2,17152
  80186c:	14808c16 	blt	r2,r18,801aa0 <__ieee754_powf+0x930>
  801870:	90807f26 	beq	r18,r2,801a70 <__ieee754_powf+0x900>
  801874:	008fc034 	movhi	r2,16128
  801878:	1480a816 	blt	r2,r18,801b1c <__ieee754_powf+0x9ac>
  80187c:	002d883a 	mov	r22,zero
  801880:	0029883a 	mov	r20,zero
  801884:	047c0004 	movi	r17,-4096
  801888:	88e2703a 	and	r17,r17,r3
  80188c:	8809883a 	mov	r4,r17
  801890:	014fcc74 	movhi	r5,16177
  801894:	295c8004 	addi	r5,r5,29184
  801898:	08024700 	call	802470 <__mulsf3>
  80189c:	8809883a 	mov	r4,r17
  8018a0:	a80b883a 	mov	r5,r21
  8018a4:	1027883a 	mov	r19,r2
  8018a8:	080239c0 	call	80239c <__subsf3>
  8018ac:	100b883a 	mov	r5,r2
  8018b0:	e009883a 	mov	r4,fp
  8018b4:	080239c0 	call	80239c <__subsf3>
  8018b8:	1009883a 	mov	r4,r2
  8018bc:	014fcc74 	movhi	r5,16177
  8018c0:	295c8604 	addi	r5,r5,29208
  8018c4:	08024700 	call	802470 <__mulsf3>
  8018c8:	8809883a 	mov	r4,r17
  8018cc:	014d7034 	movhi	r5,13760
  8018d0:	296fa304 	addi	r5,r5,-16756
  8018d4:	1025883a 	mov	r18,r2
  8018d8:	08024700 	call	802470 <__mulsf3>
  8018dc:	100b883a 	mov	r5,r2
  8018e0:	9009883a 	mov	r4,r18
  8018e4:	080240c0 	call	80240c <__addsf3>
  8018e8:	100b883a 	mov	r5,r2
  8018ec:	9809883a 	mov	r4,r19
  8018f0:	1021883a 	mov	r16,r2
  8018f4:	080240c0 	call	80240c <__addsf3>
  8018f8:	1009883a 	mov	r4,r2
  8018fc:	980b883a 	mov	r5,r19
  801900:	1025883a 	mov	r18,r2
  801904:	080239c0 	call	80239c <__subsf3>
  801908:	100b883a 	mov	r5,r2
  80190c:	8009883a 	mov	r4,r16
  801910:	080239c0 	call	80239c <__subsf3>
  801914:	9009883a 	mov	r4,r18
  801918:	900b883a 	mov	r5,r18
  80191c:	1027883a 	mov	r19,r2
  801920:	08024700 	call	802470 <__mulsf3>
  801924:	1009883a 	mov	r4,r2
  801928:	014cccb4 	movhi	r5,13106
  80192c:	296ed304 	addi	r5,r5,-17588
  801930:	1021883a 	mov	r16,r2
  801934:	08024700 	call	802470 <__mulsf3>
  801938:	1009883a 	mov	r4,r2
  80193c:	014d77b4 	movhi	r5,13790
  801940:	297a8384 	addi	r5,r5,-5618
  801944:	080239c0 	call	80239c <__subsf3>
  801948:	100b883a 	mov	r5,r2
  80194c:	8009883a 	mov	r4,r16
  801950:	08024700 	call	802470 <__mulsf3>
  801954:	1009883a 	mov	r4,r2
  801958:	014e22f4 	movhi	r5,14475
  80195c:	296cd544 	addi	r5,r5,-19627
  801960:	080240c0 	call	80240c <__addsf3>
  801964:	100b883a 	mov	r5,r2
  801968:	8009883a 	mov	r4,r16
  80196c:	08024700 	call	802470 <__mulsf3>
  801970:	1009883a 	mov	r4,r2
  801974:	014ecdb4 	movhi	r5,15158
  801978:	2942d844 	addi	r5,r5,2913
  80197c:	080239c0 	call	80239c <__subsf3>
  801980:	100b883a 	mov	r5,r2
  801984:	8009883a 	mov	r4,r16
  801988:	08024700 	call	802470 <__mulsf3>
  80198c:	1009883a 	mov	r4,r2
  801990:	014f8af4 	movhi	r5,15915
  801994:	296aaac4 	addi	r5,r5,-21845
  801998:	080240c0 	call	80240c <__addsf3>
  80199c:	100b883a 	mov	r5,r2
  8019a0:	8009883a 	mov	r4,r16
  8019a4:	08024700 	call	802470 <__mulsf3>
  8019a8:	100b883a 	mov	r5,r2
  8019ac:	9009883a 	mov	r4,r18
  8019b0:	080239c0 	call	80239c <__subsf3>
  8019b4:	1021883a 	mov	r16,r2
  8019b8:	9009883a 	mov	r4,r18
  8019bc:	100b883a 	mov	r5,r2
  8019c0:	08024700 	call	802470 <__mulsf3>
  8019c4:	8009883a 	mov	r4,r16
  8019c8:	01500034 	movhi	r5,16384
  8019cc:	1023883a 	mov	r17,r2
  8019d0:	080239c0 	call	80239c <__subsf3>
  8019d4:	100b883a 	mov	r5,r2
  8019d8:	8809883a 	mov	r4,r17
  8019dc:	08026500 	call	802650 <__divsf3>
  8019e0:	9009883a 	mov	r4,r18
  8019e4:	980b883a 	mov	r5,r19
  8019e8:	1021883a 	mov	r16,r2
  8019ec:	08024700 	call	802470 <__mulsf3>
  8019f0:	100b883a 	mov	r5,r2
  8019f4:	9809883a 	mov	r4,r19
  8019f8:	080240c0 	call	80240c <__addsf3>
  8019fc:	100b883a 	mov	r5,r2
  801a00:	8009883a 	mov	r4,r16
  801a04:	080239c0 	call	80239c <__subsf3>
  801a08:	1009883a 	mov	r4,r2
  801a0c:	900b883a 	mov	r5,r18
  801a10:	080239c0 	call	80239c <__subsf3>
  801a14:	100b883a 	mov	r5,r2
  801a18:	010fe034 	movhi	r4,16256
  801a1c:	080239c0 	call	80239c <__subsf3>
  801a20:	a087883a 	add	r3,r20,r2
  801a24:	1009883a 	mov	r4,r2
  801a28:	1805d5fa 	srai	r2,r3,23
  801a2c:	0080920e 	bge	zero,r2,801c78 <__ieee754_powf+0xb08>
  801a30:	1805883a 	mov	r2,r3
  801a34:	1009883a 	mov	r4,r2
  801a38:	b80b883a 	mov	r5,r23
  801a3c:	08024700 	call	802470 <__mulsf3>
  801a40:	1039883a 	mov	fp,r2
  801a44:	003e1306 	br	801294 <__ieee754_powf+0x124>
  801a48:	00bfe034 	movhi	r2,65408
  801a4c:	213fe084 	addi	r4,r4,-126
  801a50:	80a1883a 	add	r16,r16,r2
  801a54:	d9000015 	stw	r4,0(sp)
  801a58:	00c00134 	movhi	r3,4
  801a5c:	0029883a 	mov	r20,zero
  801a60:	d8c00115 	stw	r3,4(sp)
  801a64:	003e8906 	br	80148c <__ieee754_powf+0x31c>
  801a68:	05cfe034 	movhi	r23,16256
  801a6c:	003f5e06 	br	8017e8 <__ieee754_powf+0x678>
  801a70:	8009883a 	mov	r4,r16
  801a74:	014cce74 	movhi	r5,13113
  801a78:	296a8f04 	addi	r5,r5,-21956
  801a7c:	080240c0 	call	80240c <__addsf3>
  801a80:	8809883a 	mov	r4,r17
  801a84:	980b883a 	mov	r5,r19
  801a88:	1021883a 	mov	r16,r2
  801a8c:	080239c0 	call	80239c <__subsf3>
  801a90:	100b883a 	mov	r5,r2
  801a94:	8009883a 	mov	r4,r16
  801a98:	080283c0 	call	80283c <__gtsf2>
  801a9c:	00801f0e 	bge	zero,r2,801b1c <__ieee754_powf+0x9ac>
  801aa0:	041c52b4 	movhi	r16,29002
  801aa4:	843cb284 	addi	r16,r16,-3382
  801aa8:	b809883a 	mov	r4,r23
  801aac:	800b883a 	mov	r5,r16
  801ab0:	08024700 	call	802470 <__mulsf3>
  801ab4:	1009883a 	mov	r4,r2
  801ab8:	800b883a 	mov	r5,r16
  801abc:	08024700 	call	802470 <__mulsf3>
  801ac0:	1039883a 	mov	fp,r2
  801ac4:	003df306 	br	801294 <__ieee754_powf+0x124>
  801ac8:	0152e034 	movhi	r5,19328
  801acc:	08024700 	call	802470 <__mulsf3>
  801ad0:	1023883a 	mov	r17,r2
  801ad4:	013ffa04 	movi	r4,-24
  801ad8:	003e5b06 	br	801448 <__ieee754_powf+0x2d8>
  801adc:	008fe034 	movhi	r2,16256
  801ae0:	108001c4 	addi	r2,r2,7
  801ae4:	14402c0e 	bge	r2,r17,801b98 <__ieee754_powf+0xa28>
  801ae8:	04be4d16 	blt	zero,r18,801420 <__ieee754_powf+0x2b0>
  801aec:	0039883a 	mov	fp,zero
  801af0:	003de806 	br	801294 <__ieee754_powf+0x124>
  801af4:	0090c5b4 	movhi	r2,17174
  801af8:	14802416 	blt	r2,r18,801b8c <__ieee754_powf+0xa1c>
  801afc:	90bf5d1e 	bne	r18,r2,801874 <__ieee754_powf+0x704>
  801b00:	8809883a 	mov	r4,r17
  801b04:	980b883a 	mov	r5,r19
  801b08:	080239c0 	call	80239c <__subsf3>
  801b0c:	100b883a 	mov	r5,r2
  801b10:	8009883a 	mov	r4,r16
  801b14:	080292c0 	call	80292c <__lesf2>
  801b18:	00801c0e 	bge	zero,r2,801b8c <__ieee754_powf+0xa1c>
  801b1c:	9005d5fa 	srai	r2,r18,23
  801b20:	01002034 	movhi	r4,128
  801b24:	01402034 	movhi	r5,128
  801b28:	297fffc4 	addi	r5,r5,-1
  801b2c:	10bfe084 	addi	r2,r2,-126
  801b30:	2089d83a 	sra	r4,r4,r2
  801b34:	008005c4 	movi	r2,23
  801b38:	a109883a 	add	r4,r20,r4
  801b3c:	2006d5fa 	srli	r3,r4,23
  801b40:	214c703a 	and	r6,r4,r5
  801b44:	31802034 	orhi	r6,r6,128
  801b48:	18c03fcc 	andi	r3,r3,255
  801b4c:	18ffe044 	addi	r3,r3,-127
  801b50:	28cbd83a 	sra	r5,r5,r3
  801b54:	10c5c83a 	sub	r2,r2,r3
  801b58:	30add83a 	sra	r22,r6,r2
  801b5c:	014a303a 	nor	r5,zero,r5
  801b60:	214a703a 	and	r5,r4,r5
  801b64:	a0004216 	blt	r20,zero,801c70 <__ieee754_powf+0xb00>
  801b68:	a809883a 	mov	r4,r21
  801b6c:	080239c0 	call	80239c <__subsf3>
  801b70:	100b883a 	mov	r5,r2
  801b74:	e009883a 	mov	r4,fp
  801b78:	b02895fa 	slli	r20,r22,23
  801b7c:	102b883a 	mov	r21,r2
  801b80:	080240c0 	call	80240c <__addsf3>
  801b84:	1007883a 	mov	r3,r2
  801b88:	003f3e06 	br	801884 <__ieee754_powf+0x714>
  801b8c:	040368b4 	movhi	r16,3490
  801b90:	84109804 	addi	r16,r16,16992
  801b94:	003fc406 	br	801aa8 <__ieee754_powf+0x938>
  801b98:	080239c0 	call	80239c <__subsf3>
  801b9c:	1021883a 	mov	r16,r2
  801ba0:	1009883a 	mov	r4,r2
  801ba4:	014fee74 	movhi	r5,16313
  801ba8:	296a8004 	addi	r5,r5,-22016
  801bac:	08024700 	call	802470 <__mulsf3>
  801bb0:	8009883a 	mov	r4,r16
  801bb4:	014dbb74 	movhi	r5,14061
  801bb8:	29695c04 	addi	r5,r5,-23184
  801bbc:	1023883a 	mov	r17,r2
  801bc0:	08024700 	call	802470 <__mulsf3>
  801bc4:	8009883a 	mov	r4,r16
  801bc8:	800b883a 	mov	r5,r16
  801bcc:	1025883a 	mov	r18,r2
  801bd0:	08024700 	call	802470 <__mulsf3>
  801bd4:	8009883a 	mov	r4,r16
  801bd8:	016fa034 	movhi	r5,48768
  801bdc:	1027883a 	mov	r19,r2
  801be0:	08024700 	call	802470 <__mulsf3>
  801be4:	1009883a 	mov	r4,r2
  801be8:	014faaf4 	movhi	r5,16043
  801bec:	296aaac4 	addi	r5,r5,-21845
  801bf0:	080240c0 	call	80240c <__addsf3>
  801bf4:	100b883a 	mov	r5,r2
  801bf8:	8009883a 	mov	r4,r16
  801bfc:	08024700 	call	802470 <__mulsf3>
  801c00:	100b883a 	mov	r5,r2
  801c04:	010fc034 	movhi	r4,16128
  801c08:	080239c0 	call	80239c <__subsf3>
  801c0c:	100b883a 	mov	r5,r2
  801c10:	9809883a 	mov	r4,r19
  801c14:	08024700 	call	802470 <__mulsf3>
  801c18:	1009883a 	mov	r4,r2
  801c1c:	016fee74 	movhi	r5,49081
  801c20:	296a8ec4 	addi	r5,r5,-21957
  801c24:	08024700 	call	802470 <__mulsf3>
  801c28:	100b883a 	mov	r5,r2
  801c2c:	9009883a 	mov	r4,r18
  801c30:	080240c0 	call	80240c <__addsf3>
  801c34:	100b883a 	mov	r5,r2
  801c38:	8809883a 	mov	r4,r17
  801c3c:	1021883a 	mov	r16,r2
  801c40:	080240c0 	call	80240c <__addsf3>
  801c44:	00fc0004 	movi	r3,-4096
  801c48:	10c4703a 	and	r2,r2,r3
  801c4c:	1009883a 	mov	r4,r2
  801c50:	880b883a 	mov	r5,r17
  801c54:	1027883a 	mov	r19,r2
  801c58:	080239c0 	call	80239c <__subsf3>
  801c5c:	100b883a 	mov	r5,r2
  801c60:	8009883a 	mov	r4,r16
  801c64:	080239c0 	call	80239c <__subsf3>
  801c68:	1021883a 	mov	r16,r2
  801c6c:	003ed906 	br	8017d4 <__ieee754_powf+0x664>
  801c70:	05adc83a 	sub	r22,zero,r22
  801c74:	003fbc06 	br	801b68 <__ieee754_powf+0x9f8>
  801c78:	b00b883a 	mov	r5,r22
  801c7c:	08020540 	call	802054 <scalbnf>
  801c80:	003f6c06 	br	801a34 <__ieee754_powf+0x8c4>

00801c84 <__ieee754_sqrtf>:
  801c84:	00a00034 	movhi	r2,32768
  801c88:	10bfffc4 	addi	r2,r2,-1
  801c8c:	defffe04 	addi	sp,sp,-8
  801c90:	208c703a 	and	r6,r4,r2
  801c94:	00dfe034 	movhi	r3,32640
  801c98:	18ffffc4 	addi	r3,r3,-1
  801c9c:	dc000015 	stw	r16,0(sp)
  801ca0:	dfc00115 	stw	ra,4(sp)
  801ca4:	2021883a 	mov	r16,r4
  801ca8:	200b883a 	mov	r5,r4
  801cac:	19800a2e 	bgeu	r3,r6,801cd8 <__ieee754_sqrtf+0x54>
  801cb0:	08024700 	call	802470 <__mulsf3>
  801cb4:	100b883a 	mov	r5,r2
  801cb8:	8009883a 	mov	r4,r16
  801cbc:	080240c0 	call	80240c <__addsf3>
  801cc0:	1021883a 	mov	r16,r2
  801cc4:	8005883a 	mov	r2,r16
  801cc8:	dfc00117 	ldw	ra,4(sp)
  801ccc:	dc000017 	ldw	r16,0(sp)
  801cd0:	dec00204 	addi	sp,sp,8
  801cd4:	f800283a 	ret
  801cd8:	303ffa26 	beq	r6,zero,801cc4 <__ieee754_sqrtf+0x40>
  801cdc:	20003b16 	blt	r4,zero,801dcc <__ieee754_sqrtf+0x148>
  801ce0:	00802034 	movhi	r2,128
  801ce4:	10bfffc4 	addi	r2,r2,-1
  801ce8:	2007d5fa 	srai	r3,r4,23
  801cec:	11800936 	bltu	r2,r6,801d14 <__ieee754_sqrtf+0x90>
  801cf0:	2080202c 	andhi	r2,r4,128
  801cf4:	10003c1e 	bne	r2,zero,801de8 <__ieee754_sqrtf+0x164>
  801cf8:	0009883a 	mov	r4,zero
  801cfc:	294b883a 	add	r5,r5,r5
  801d00:	2880202c 	andhi	r2,r5,128
  801d04:	21000044 	addi	r4,r4,1
  801d08:	103ffc26 	beq	r2,zero,801cfc <__ieee754_sqrtf+0x78>
  801d0c:	1905c83a 	sub	r2,r3,r4
  801d10:	10c00044 	addi	r3,r2,1
  801d14:	1a7fe044 	addi	r9,r3,-127
  801d18:	48c0004c 	andi	r3,r9,1
  801d1c:	00802034 	movhi	r2,128
  801d20:	10bfffc4 	addi	r2,r2,-1
  801d24:	2884703a 	and	r2,r5,r2
  801d28:	1807003a 	cmpeq	r3,r3,zero
  801d2c:	10802034 	orhi	r2,r2,128
  801d30:	18002426 	beq	r3,zero,801dc4 <__ieee754_sqrtf+0x140>
  801d34:	1085883a 	add	r2,r2,r2
  801d38:	01404034 	movhi	r5,256
  801d3c:	000f883a 	mov	r7,zero
  801d40:	0007883a 	mov	r3,zero
  801d44:	000d883a 	mov	r6,zero
  801d48:	02000644 	movi	r8,25
  801d4c:	3949883a 	add	r4,r7,r5
  801d50:	31800044 	addi	r6,r6,1
  801d54:	11000316 	blt	r2,r4,801d64 <__ieee754_sqrtf+0xe0>
  801d58:	1105c83a 	sub	r2,r2,r4
  801d5c:	1947883a 	add	r3,r3,r5
  801d60:	214f883a 	add	r7,r4,r5
  801d64:	1085883a 	add	r2,r2,r2
  801d68:	280ad07a 	srli	r5,r5,1
  801d6c:	323ff71e 	bne	r6,r8,801d4c <__ieee754_sqrtf+0xc8>
  801d70:	10000b1e 	bne	r2,zero,801da0 <__ieee754_sqrtf+0x11c>
  801d74:	4805d07a 	srai	r2,r9,1
  801d78:	1807d07a 	srai	r3,r3,1
  801d7c:	010fc034 	movhi	r4,16128
  801d80:	100495fa 	slli	r2,r2,23
  801d84:	1907883a 	add	r3,r3,r4
  801d88:	18a1883a 	add	r16,r3,r2
  801d8c:	8005883a 	mov	r2,r16
  801d90:	dfc00117 	ldw	ra,4(sp)
  801d94:	dc000017 	ldw	r16,0(sp)
  801d98:	dec00204 	addi	sp,sp,8
  801d9c:	f800283a 	ret
  801da0:	1880004c 	andi	r2,r3,1
  801da4:	1887883a 	add	r3,r3,r2
  801da8:	4805d07a 	srai	r2,r9,1
  801dac:	1807d07a 	srai	r3,r3,1
  801db0:	010fc034 	movhi	r4,16128
  801db4:	100495fa 	slli	r2,r2,23
  801db8:	1907883a 	add	r3,r3,r4
  801dbc:	18a1883a 	add	r16,r3,r2
  801dc0:	003ff206 	br	801d8c <__ieee754_sqrtf+0x108>
  801dc4:	1085883a 	add	r2,r2,r2
  801dc8:	003fda06 	br	801d34 <__ieee754_sqrtf+0xb0>
  801dcc:	200b883a 	mov	r5,r4
  801dd0:	080239c0 	call	80239c <__subsf3>
  801dd4:	1009883a 	mov	r4,r2
  801dd8:	100b883a 	mov	r5,r2
  801ddc:	08026500 	call	802650 <__divsf3>
  801de0:	1021883a 	mov	r16,r2
  801de4:	003fb706 	br	801cc4 <__ieee754_sqrtf+0x40>
  801de8:	0009883a 	mov	r4,zero
  801dec:	003fc706 	br	801d0c <__ieee754_sqrtf+0x88>

00801df0 <matherr>:
  801df0:	0005883a 	mov	r2,zero
  801df4:	f800283a 	ret

00801df8 <rint>:
  801df8:	2015883a 	mov	r10,r4
  801dfc:	2809d53a 	srai	r4,r5,20
  801e00:	defff904 	addi	sp,sp,-28
  801e04:	034004c4 	movi	r13,19
  801e08:	2101ffcc 	andi	r4,r4,2047
  801e0c:	227f0044 	addi	r9,r4,-1023
  801e10:	dc800415 	stw	r18,16(sp)
  801e14:	dfc00615 	stw	ra,24(sp)
  801e18:	dcc00515 	stw	r19,20(sp)
  801e1c:	dc400315 	stw	r17,12(sp)
  801e20:	dc000215 	stw	r16,8(sp)
  801e24:	2817883a 	mov	r11,r5
  801e28:	500d883a 	mov	r6,r10
  801e2c:	2824d7fa 	srli	r18,r5,31
  801e30:	6a403016 	blt	r13,r9,801ef4 <rint+0xfc>
  801e34:	48004916 	blt	r9,zero,801f5c <rint+0x164>
  801e38:	00800434 	movhi	r2,16
  801e3c:	10bfffc4 	addi	r2,r2,-1
  801e40:	1247d83a 	sra	r3,r2,r9
  801e44:	2809883a 	mov	r4,r5
  801e48:	1944703a 	and	r2,r3,r5
  801e4c:	5084b03a 	or	r2,r10,r2
  801e50:	10001f26 	beq	r2,zero,801ed0 <rint+0xd8>
  801e54:	180ad07a 	srli	r5,r3,1
  801e58:	5944703a 	and	r2,r11,r5
  801e5c:	5084b03a 	or	r2,r10,r2
  801e60:	10000626 	beq	r2,zero,801e7c <rint+0x84>
  801e64:	4b406626 	beq	r9,r13,802000 <rint+0x208>
  801e68:	00c000b4 	movhi	r3,2
  801e6c:	1a47d83a 	sra	r3,r3,r9
  801e70:	0144303a 	nor	r2,zero,r5
  801e74:	5884703a 	and	r2,r11,r2
  801e78:	10c8b03a 	or	r4,r2,r3
  801e7c:	900690fa 	slli	r3,r18,3
  801e80:	00802074 	movhi	r2,129
  801e84:	10877404 	addi	r2,r2,7632
  801e88:	200f883a 	mov	r7,r4
  801e8c:	1887883a 	add	r3,r3,r2
  801e90:	1c000017 	ldw	r16,0(r3)
  801e94:	1c400117 	ldw	r17,4(r3)
  801e98:	8009883a 	mov	r4,r16
  801e9c:	880b883a 	mov	r5,r17
  801ea0:	0802f200 	call	802f20 <__adddf3>
  801ea4:	d8800015 	stw	r2,0(sp)
  801ea8:	d8c00115 	stw	r3,4(sp)
  801eac:	d8800017 	ldw	r2,0(sp)
  801eb0:	d8c00117 	ldw	r3,4(sp)
  801eb4:	880f883a 	mov	r7,r17
  801eb8:	800d883a 	mov	r6,r16
  801ebc:	180b883a 	mov	r5,r3
  801ec0:	1009883a 	mov	r4,r2
  801ec4:	0802ea00 	call	802ea0 <__subdf3>
  801ec8:	1015883a 	mov	r10,r2
  801ecc:	1817883a 	mov	r11,r3
  801ed0:	5005883a 	mov	r2,r10
  801ed4:	5807883a 	mov	r3,r11
  801ed8:	dfc00617 	ldw	ra,24(sp)
  801edc:	dcc00517 	ldw	r19,20(sp)
  801ee0:	dc800417 	ldw	r18,16(sp)
  801ee4:	dc400317 	ldw	r17,12(sp)
  801ee8:	dc000217 	ldw	r16,8(sp)
  801eec:	dec00704 	addi	sp,sp,28
  801ef0:	f800283a 	ret
  801ef4:	00800cc4 	movi	r2,51
  801ef8:	12400f16 	blt	r2,r9,801f38 <rint+0x140>
  801efc:	213efb44 	addi	r4,r4,-1043
  801f00:	00bfffc4 	movi	r2,-1
  801f04:	1104d83a 	srl	r2,r2,r4
  801f08:	5086703a 	and	r3,r10,r2
  801f0c:	183ff026 	beq	r3,zero,801ed0 <rint+0xd8>
  801f10:	100ad07a 	srli	r5,r2,1
  801f14:	5144703a 	and	r2,r10,r5
  801f18:	10000526 	beq	r2,zero,801f30 <rint+0x138>
  801f1c:	00d00034 	movhi	r3,16384
  801f20:	1907d83a 	sra	r3,r3,r4
  801f24:	0144303a 	nor	r2,zero,r5
  801f28:	5084703a 	and	r2,r10,r2
  801f2c:	10ccb03a 	or	r6,r2,r3
  801f30:	5809883a 	mov	r4,r11
  801f34:	003fd106 	br	801e7c <rint+0x84>
  801f38:	00810004 	movi	r2,1024
  801f3c:	48bfe41e 	bne	r9,r2,801ed0 <rint+0xd8>
  801f40:	5009883a 	mov	r4,r10
  801f44:	500d883a 	mov	r6,r10
  801f48:	280f883a 	mov	r7,r5
  801f4c:	0802f200 	call	802f20 <__adddf3>
  801f50:	1015883a 	mov	r10,r2
  801f54:	1817883a 	mov	r11,r3
  801f58:	003fdd06 	br	801ed0 <rint+0xd8>
  801f5c:	04e00034 	movhi	r19,32768
  801f60:	9cffffc4 	addi	r19,r19,-1
  801f64:	2cc4703a 	and	r2,r5,r19
  801f68:	5084b03a 	or	r2,r10,r2
  801f6c:	103fd826 	beq	r2,zero,801ed0 <rint+0xd8>
  801f70:	00c00434 	movhi	r3,16
  801f74:	18ffffc4 	addi	r3,r3,-1
  801f78:	28c6703a 	and	r3,r5,r3
  801f7c:	50c6b03a 	or	r3,r10,r3
  801f80:	00cdc83a 	sub	r6,zero,r3
  801f84:	900a90fa 	slli	r5,r18,3
  801f88:	1986b03a 	or	r3,r3,r6
  801f8c:	01002074 	movhi	r4,129
  801f90:	21077404 	addi	r4,r4,7632
  801f94:	1806d33a 	srli	r3,r3,12
  801f98:	290b883a 	add	r5,r5,r4
  801f9c:	2c000017 	ldw	r16,0(r5)
  801fa0:	2c400117 	ldw	r17,4(r5)
  801fa4:	593fffac 	andhi	r4,r11,65534
  801fa8:	18c0022c 	andhi	r3,r3,8
  801fac:	1906b03a 	or	r3,r3,r4
  801fb0:	500d883a 	mov	r6,r10
  801fb4:	180f883a 	mov	r7,r3
  801fb8:	8009883a 	mov	r4,r16
  801fbc:	880b883a 	mov	r5,r17
  801fc0:	0802f200 	call	802f20 <__adddf3>
  801fc4:	d8800015 	stw	r2,0(sp)
  801fc8:	d8c00115 	stw	r3,4(sp)
  801fcc:	d8800017 	ldw	r2,0(sp)
  801fd0:	d8c00117 	ldw	r3,4(sp)
  801fd4:	880f883a 	mov	r7,r17
  801fd8:	800d883a 	mov	r6,r16
  801fdc:	180b883a 	mov	r5,r3
  801fe0:	1009883a 	mov	r4,r2
  801fe4:	0802ea00 	call	802ea0 <__subdf3>
  801fe8:	901297fa 	slli	r9,r18,31
  801fec:	98d0703a 	and	r8,r19,r3
  801ff0:	1015883a 	mov	r10,r2
  801ff4:	4250b03a 	or	r8,r8,r9
  801ff8:	4017883a 	mov	r11,r8
  801ffc:	003fb406 	br	801ed0 <rint+0xd8>
  802000:	01900034 	movhi	r6,16384
  802004:	003f9d06 	br	801e7c <rint+0x84>

00802008 <fabsf>:
  802008:	00a00034 	movhi	r2,32768
  80200c:	10bfffc4 	addi	r2,r2,-1
  802010:	2084703a 	and	r2,r4,r2
  802014:	f800283a 	ret

00802018 <finitef>:
  802018:	00a00034 	movhi	r2,32768
  80201c:	10bfffc4 	addi	r2,r2,-1
  802020:	2088703a 	and	r4,r4,r2
  802024:	009fe034 	movhi	r2,32640
  802028:	10bfffc4 	addi	r2,r2,-1
  80202c:	1104403a 	cmpge	r2,r2,r4
  802030:	f800283a 	ret

00802034 <isnanf>:
  802034:	00a00034 	movhi	r2,32768
  802038:	10bfffc4 	addi	r2,r2,-1
  80203c:	2088703a 	and	r4,r4,r2
  802040:	009fe034 	movhi	r2,32640
  802044:	1104803a 	cmplt	r2,r2,r4
  802048:	f800283a 	ret

0080204c <nanf>:
  80204c:	009ff034 	movhi	r2,32704
  802050:	f800283a 	ret

00802054 <scalbnf>:
  802054:	00a00034 	movhi	r2,32768
  802058:	10bfffc4 	addi	r2,r2,-1
  80205c:	defffe04 	addi	sp,sp,-8
  802060:	2086703a 	and	r3,r4,r2
  802064:	dc000015 	stw	r16,0(sp)
  802068:	dfc00115 	stw	ra,4(sp)
  80206c:	200d883a 	mov	r6,r4
  802070:	200f883a 	mov	r7,r4
  802074:	2821883a 	mov	r16,r5
  802078:	18001a26 	beq	r3,zero,8020e4 <scalbnf+0x90>
  80207c:	009fe034 	movhi	r2,32640
  802080:	10bfffc4 	addi	r2,r2,-1
  802084:	10c01c36 	bltu	r2,r3,8020f8 <scalbnf+0xa4>
  802088:	00802034 	movhi	r2,128
  80208c:	10bfffc4 	addi	r2,r2,-1
  802090:	10c02136 	bltu	r2,r3,802118 <scalbnf+0xc4>
  802094:	01530034 	movhi	r5,19456
  802098:	08024700 	call	802470 <__mulsf3>
  80209c:	1009883a 	mov	r4,r2
  8020a0:	100d883a 	mov	r6,r2
  8020a4:	00bffff4 	movhi	r2,65535
  8020a8:	108f2c04 	addi	r2,r2,15536
  8020ac:	80802616 	blt	r16,r2,802148 <scalbnf+0xf4>
  8020b0:	209fe02c 	andhi	r2,r4,32640
  8020b4:	1005d5fa 	srai	r2,r2,23
  8020b8:	200f883a 	mov	r7,r4
  8020bc:	10bff9c4 	addi	r2,r2,-25
  8020c0:	1407883a 	add	r3,r2,r16
  8020c4:	00803f84 	movi	r2,254
  8020c8:	10c01516 	blt	r2,r3,802120 <scalbnf+0xcc>
  8020cc:	00c0230e 	bge	zero,r3,80215c <scalbnf+0x108>
  8020d0:	180695fa 	slli	r3,r3,23
  8020d4:	00a02034 	movhi	r2,32896
  8020d8:	10bfffc4 	addi	r2,r2,-1
  8020dc:	3884703a 	and	r2,r7,r2
  8020e0:	10ccb03a 	or	r6,r2,r3
  8020e4:	3005883a 	mov	r2,r6
  8020e8:	dfc00117 	ldw	ra,4(sp)
  8020ec:	dc000017 	ldw	r16,0(sp)
  8020f0:	dec00204 	addi	sp,sp,8
  8020f4:	f800283a 	ret
  8020f8:	200b883a 	mov	r5,r4
  8020fc:	080240c0 	call	80240c <__addsf3>
  802100:	100d883a 	mov	r6,r2
  802104:	3005883a 	mov	r2,r6
  802108:	dfc00117 	ldw	ra,4(sp)
  80210c:	dc000017 	ldw	r16,0(sp)
  802110:	dec00204 	addi	sp,sp,8
  802114:	f800283a 	ret
  802118:	1804d5fa 	srli	r2,r3,23
  80211c:	003fe806 	br	8020c0 <scalbnf+0x6c>
  802120:	041c52b4 	movhi	r16,29002
  802124:	843cb284 	addi	r16,r16,-3382
  802128:	300b883a 	mov	r5,r6
  80212c:	8009883a 	mov	r4,r16
  802130:	08021a00 	call	8021a0 <copysignf>
  802134:	1009883a 	mov	r4,r2
  802138:	800b883a 	mov	r5,r16
  80213c:	08024700 	call	802470 <__mulsf3>
  802140:	100d883a 	mov	r6,r2
  802144:	003fe706 	br	8020e4 <scalbnf+0x90>
  802148:	014368b4 	movhi	r5,3490
  80214c:	29509804 	addi	r5,r5,16992
  802150:	08024700 	call	802470 <__mulsf3>
  802154:	100d883a 	mov	r6,r2
  802158:	003fe206 	br	8020e4 <scalbnf+0x90>
  80215c:	00bffa84 	movi	r2,-22
  802160:	1880050e 	bge	r3,r2,802178 <scalbnf+0x124>
  802164:	00b0d414 	movui	r2,50000
  802168:	143fed16 	blt	r2,r16,802120 <scalbnf+0xcc>
  80216c:	040368b4 	movhi	r16,3490
  802170:	84109804 	addi	r16,r16,16992
  802174:	003fec06 	br	802128 <scalbnf+0xd4>
  802178:	18800644 	addi	r2,r3,25
  80217c:	100495fa 	slli	r2,r2,23
  802180:	01202034 	movhi	r4,32896
  802184:	213fffc4 	addi	r4,r4,-1
  802188:	3908703a 	and	r4,r7,r4
  80218c:	2088b03a 	or	r4,r4,r2
  802190:	014cc034 	movhi	r5,13056
  802194:	08024700 	call	802470 <__mulsf3>
  802198:	100d883a 	mov	r6,r2
  80219c:	003fd106 	br	8020e4 <scalbnf+0x90>

008021a0 <copysignf>:
  8021a0:	00a00034 	movhi	r2,32768
  8021a4:	10bfffc4 	addi	r2,r2,-1
  8021a8:	2088703a 	and	r4,r4,r2
  8021ac:	28a0002c 	andhi	r2,r5,32768
  8021b0:	2084b03a 	or	r2,r4,r2
  8021b4:	f800283a 	ret

008021b8 <_fpadd_parts>:
  8021b8:	21c00017 	ldw	r7,0(r4)
  8021bc:	02000044 	movi	r8,1
  8021c0:	41c0332e 	bgeu	r8,r7,802290 <_fpadd_parts+0xd8>
  8021c4:	28800017 	ldw	r2,0(r5)
  8021c8:	4080462e 	bgeu	r8,r2,8022e4 <_fpadd_parts+0x12c>
  8021cc:	00c00104 	movi	r3,4
  8021d0:	38c06b26 	beq	r7,r3,802380 <_fpadd_parts+0x1c8>
  8021d4:	10c04326 	beq	r2,r3,8022e4 <_fpadd_parts+0x12c>
  8021d8:	00c00084 	movi	r3,2
  8021dc:	10c02e26 	beq	r2,r3,802298 <_fpadd_parts+0xe0>
  8021e0:	38c04026 	beq	r7,r3,8022e4 <_fpadd_parts+0x12c>
  8021e4:	22800217 	ldw	r10,8(r4)
  8021e8:	28c00217 	ldw	r3,8(r5)
  8021ec:	23000317 	ldw	r12,12(r4)
  8021f0:	2a400317 	ldw	r9,12(r5)
  8021f4:	50cfc83a 	sub	r7,r10,r3
  8021f8:	3817883a 	mov	r11,r7
  8021fc:	38004f16 	blt	r7,zero,80233c <_fpadd_parts+0x184>
  802200:	008007c4 	movi	r2,31
  802204:	11c03316 	blt	r2,r7,8022d4 <_fpadd_parts+0x11c>
  802208:	02c0540e 	bge	zero,r11,80235c <_fpadd_parts+0x1a4>
  80220c:	41c4983a 	sll	r2,r8,r7
  802210:	49c6d83a 	srl	r3,r9,r7
  802214:	10bfffc4 	addi	r2,r2,-1
  802218:	4884703a 	and	r2,r9,r2
  80221c:	1004c03a 	cmpne	r2,r2,zero
  802220:	1892b03a 	or	r9,r3,r2
  802224:	20c00117 	ldw	r3,4(r4)
  802228:	28800117 	ldw	r2,4(r5)
  80222c:	18803c26 	beq	r3,r2,802320 <_fpadd_parts+0x168>
  802230:	18002f26 	beq	r3,zero,8022f0 <_fpadd_parts+0x138>
  802234:	4b05c83a 	sub	r2,r9,r12
  802238:	10004216 	blt	r2,zero,802344 <_fpadd_parts+0x18c>
  80223c:	32800215 	stw	r10,8(r6)
  802240:	30800315 	stw	r2,12(r6)
  802244:	30000115 	stw	zero,4(r6)
  802248:	31000317 	ldw	r4,12(r6)
  80224c:	01d00034 	movhi	r7,16384
  802250:	39ffff84 	addi	r7,r7,-2
  802254:	20bfffc4 	addi	r2,r4,-1
  802258:	2007883a 	mov	r3,r4
  80225c:	38800836 	bltu	r7,r2,802280 <_fpadd_parts+0xc8>
  802260:	31400217 	ldw	r5,8(r6)
  802264:	18c9883a 	add	r4,r3,r3
  802268:	20bfffc4 	addi	r2,r4,-1
  80226c:	297fffc4 	addi	r5,r5,-1
  802270:	2007883a 	mov	r3,r4
  802274:	38bffb2e 	bgeu	r7,r2,802264 <_fpadd_parts+0xac>
  802278:	31400215 	stw	r5,8(r6)
  80227c:	31000315 	stw	r4,12(r6)
  802280:	008000c4 	movi	r2,3
  802284:	30800015 	stw	r2,0(r6)
  802288:	20001b16 	blt	r4,zero,8022f8 <_fpadd_parts+0x140>
  80228c:	3009883a 	mov	r4,r6
  802290:	2005883a 	mov	r2,r4
  802294:	f800283a 	ret
  802298:	38fffd1e 	bne	r7,r3,802290 <_fpadd_parts+0xd8>
  80229c:	31c00015 	stw	r7,0(r6)
  8022a0:	20800117 	ldw	r2,4(r4)
  8022a4:	30800115 	stw	r2,4(r6)
  8022a8:	20c00217 	ldw	r3,8(r4)
  8022ac:	30c00215 	stw	r3,8(r6)
  8022b0:	20800317 	ldw	r2,12(r4)
  8022b4:	30800315 	stw	r2,12(r6)
  8022b8:	20c00117 	ldw	r3,4(r4)
  8022bc:	28800117 	ldw	r2,4(r5)
  8022c0:	3009883a 	mov	r4,r6
  8022c4:	1886703a 	and	r3,r3,r2
  8022c8:	2005883a 	mov	r2,r4
  8022cc:	30c00115 	stw	r3,4(r6)
  8022d0:	f800283a 	ret
  8022d4:	1a801716 	blt	r3,r10,802334 <_fpadd_parts+0x17c>
  8022d8:	1815883a 	mov	r10,r3
  8022dc:	0019883a 	mov	r12,zero
  8022e0:	003fd006 	br	802224 <_fpadd_parts+0x6c>
  8022e4:	2809883a 	mov	r4,r5
  8022e8:	2005883a 	mov	r2,r4
  8022ec:	f800283a 	ret
  8022f0:	6245c83a 	sub	r2,r12,r9
  8022f4:	003fd006 	br	802238 <_fpadd_parts+0x80>
  8022f8:	30800217 	ldw	r2,8(r6)
  8022fc:	2006d07a 	srli	r3,r4,1
  802300:	2100004c 	andi	r4,r4,1
  802304:	10800044 	addi	r2,r2,1
  802308:	1906b03a 	or	r3,r3,r4
  80230c:	3009883a 	mov	r4,r6
  802310:	30800215 	stw	r2,8(r6)
  802314:	2005883a 	mov	r2,r4
  802318:	30c00315 	stw	r3,12(r6)
  80231c:	f800283a 	ret
  802320:	4b09883a 	add	r4,r9,r12
  802324:	30c00115 	stw	r3,4(r6)
  802328:	32800215 	stw	r10,8(r6)
  80232c:	31000315 	stw	r4,12(r6)
  802330:	003fd306 	br	802280 <_fpadd_parts+0xc8>
  802334:	0013883a 	mov	r9,zero
  802338:	003fba06 	br	802224 <_fpadd_parts+0x6c>
  80233c:	01cfc83a 	sub	r7,zero,r7
  802340:	003faf06 	br	802200 <_fpadd_parts+0x48>
  802344:	0089c83a 	sub	r4,zero,r2
  802348:	00800044 	movi	r2,1
  80234c:	30800115 	stw	r2,4(r6)
  802350:	32800215 	stw	r10,8(r6)
  802354:	31000315 	stw	r4,12(r6)
  802358:	003fbb06 	br	802248 <_fpadd_parts+0x90>
  80235c:	583fb126 	beq	r11,zero,802224 <_fpadd_parts+0x6c>
  802360:	41c4983a 	sll	r2,r8,r7
  802364:	61c6d83a 	srl	r3,r12,r7
  802368:	51d5883a 	add	r10,r10,r7
  80236c:	10bfffc4 	addi	r2,r2,-1
  802370:	6084703a 	and	r2,r12,r2
  802374:	1004c03a 	cmpne	r2,r2,zero
  802378:	1898b03a 	or	r12,r3,r2
  80237c:	003fa906 	br	802224 <_fpadd_parts+0x6c>
  802380:	11ffc31e 	bne	r2,r7,802290 <_fpadd_parts+0xd8>
  802384:	28c00117 	ldw	r3,4(r5)
  802388:	20800117 	ldw	r2,4(r4)
  80238c:	10ffc026 	beq	r2,r3,802290 <_fpadd_parts+0xd8>
  802390:	01002074 	movhi	r4,129
  802394:	21077804 	addi	r4,r4,7648
  802398:	003fbd06 	br	802290 <_fpadd_parts+0xd8>

0080239c <__subsf3>:
  80239c:	deffef04 	addi	sp,sp,-68
  8023a0:	dcc00f15 	stw	r19,60(sp)
  8023a4:	dcc00204 	addi	r19,sp,8
  8023a8:	dc400e15 	stw	r17,56(sp)
  8023ac:	d9000015 	stw	r4,0(sp)
  8023b0:	d9400115 	stw	r5,4(sp)
  8023b4:	d809883a 	mov	r4,sp
  8023b8:	980b883a 	mov	r5,r19
  8023bc:	dc400604 	addi	r17,sp,24
  8023c0:	dfc01015 	stw	ra,64(sp)
  8023c4:	08035980 	call	803598 <__unpack_f>
  8023c8:	d9000104 	addi	r4,sp,4
  8023cc:	880b883a 	mov	r5,r17
  8023d0:	08035980 	call	803598 <__unpack_f>
  8023d4:	d8800717 	ldw	r2,28(sp)
  8023d8:	9809883a 	mov	r4,r19
  8023dc:	880b883a 	mov	r5,r17
  8023e0:	d9800a04 	addi	r6,sp,40
  8023e4:	1080005c 	xori	r2,r2,1
  8023e8:	d8800715 	stw	r2,28(sp)
  8023ec:	08021b80 	call	8021b8 <_fpadd_parts>
  8023f0:	1009883a 	mov	r4,r2
  8023f4:	08034380 	call	803438 <__pack_f>
  8023f8:	dfc01017 	ldw	ra,64(sp)
  8023fc:	dcc00f17 	ldw	r19,60(sp)
  802400:	dc400e17 	ldw	r17,56(sp)
  802404:	dec01104 	addi	sp,sp,68
  802408:	f800283a 	ret

0080240c <__addsf3>:
  80240c:	deffef04 	addi	sp,sp,-68
  802410:	dcc00f15 	stw	r19,60(sp)
  802414:	dcc00204 	addi	r19,sp,8
  802418:	dc400e15 	stw	r17,56(sp)
  80241c:	d9000015 	stw	r4,0(sp)
  802420:	d9400115 	stw	r5,4(sp)
  802424:	d809883a 	mov	r4,sp
  802428:	980b883a 	mov	r5,r19
  80242c:	dc400604 	addi	r17,sp,24
  802430:	dfc01015 	stw	ra,64(sp)
  802434:	08035980 	call	803598 <__unpack_f>
  802438:	d9000104 	addi	r4,sp,4
  80243c:	880b883a 	mov	r5,r17
  802440:	08035980 	call	803598 <__unpack_f>
  802444:	d9800a04 	addi	r6,sp,40
  802448:	9809883a 	mov	r4,r19
  80244c:	880b883a 	mov	r5,r17
  802450:	08021b80 	call	8021b8 <_fpadd_parts>
  802454:	1009883a 	mov	r4,r2
  802458:	08034380 	call	803438 <__pack_f>
  80245c:	dfc01017 	ldw	ra,64(sp)
  802460:	dcc00f17 	ldw	r19,60(sp)
  802464:	dc400e17 	ldw	r17,56(sp)
  802468:	dec01104 	addi	sp,sp,68
  80246c:	f800283a 	ret

00802470 <__mulsf3>:
  802470:	deffef04 	addi	sp,sp,-68
  802474:	dc400f15 	stw	r17,60(sp)
  802478:	dc400204 	addi	r17,sp,8
  80247c:	dc000e15 	stw	r16,56(sp)
  802480:	d9000015 	stw	r4,0(sp)
  802484:	d9400115 	stw	r5,4(sp)
  802488:	d809883a 	mov	r4,sp
  80248c:	880b883a 	mov	r5,r17
  802490:	dc000604 	addi	r16,sp,24
  802494:	dfc01015 	stw	ra,64(sp)
  802498:	08035980 	call	803598 <__unpack_f>
  80249c:	d9000104 	addi	r4,sp,4
  8024a0:	800b883a 	mov	r5,r16
  8024a4:	08035980 	call	803598 <__unpack_f>
  8024a8:	d9000217 	ldw	r4,8(sp)
  8024ac:	00800044 	movi	r2,1
  8024b0:	01400104 	movi	r5,4
  8024b4:	1100142e 	bgeu	r2,r4,802508 <__mulsf3+0x98>
  8024b8:	d8c00617 	ldw	r3,24(sp)
  8024bc:	10c0052e 	bgeu	r2,r3,8024d4 <__mulsf3+0x64>
  8024c0:	21400f26 	beq	r4,r5,802500 <__mulsf3+0x90>
  8024c4:	19405d26 	beq	r3,r5,80263c <__mulsf3+0x1cc>
  8024c8:	00800084 	movi	r2,2
  8024cc:	20800e26 	beq	r4,r2,802508 <__mulsf3+0x98>
  8024d0:	1880181e 	bne	r3,r2,802534 <__mulsf3+0xc4>
  8024d4:	d8c00717 	ldw	r3,28(sp)
  8024d8:	d8800317 	ldw	r2,12(sp)
  8024dc:	8009883a 	mov	r4,r16
  8024e0:	10c4c03a 	cmpne	r2,r2,r3
  8024e4:	d8800715 	stw	r2,28(sp)
  8024e8:	08034380 	call	803438 <__pack_f>
  8024ec:	dfc01017 	ldw	ra,64(sp)
  8024f0:	dc400f17 	ldw	r17,60(sp)
  8024f4:	dc000e17 	ldw	r16,56(sp)
  8024f8:	dec01104 	addi	sp,sp,68
  8024fc:	f800283a 	ret
  802500:	00800084 	movi	r2,2
  802504:	18804f26 	beq	r3,r2,802644 <__mulsf3+0x1d4>
  802508:	d8800317 	ldw	r2,12(sp)
  80250c:	d8c00717 	ldw	r3,28(sp)
  802510:	8809883a 	mov	r4,r17
  802514:	10c4c03a 	cmpne	r2,r2,r3
  802518:	d8800315 	stw	r2,12(sp)
  80251c:	08034380 	call	803438 <__pack_f>
  802520:	dfc01017 	ldw	ra,64(sp)
  802524:	dc400f17 	ldw	r17,60(sp)
  802528:	dc000e17 	ldw	r16,56(sp)
  80252c:	dec01104 	addi	sp,sp,68
  802530:	f800283a 	ret
  802534:	d8800517 	ldw	r2,20(sp)
  802538:	da000917 	ldw	r8,36(sp)
  80253c:	0013883a 	mov	r9,zero
  802540:	0007883a 	mov	r3,zero
  802544:	480f883a 	mov	r7,r9
  802548:	180b883a 	mov	r5,r3
  80254c:	400d883a 	mov	r6,r8
  802550:	1009883a 	mov	r4,r2
  802554:	08033200 	call	803320 <__muldi3>
  802558:	da800417 	ldw	r10,16(sp)
  80255c:	d9800817 	ldw	r6,32(sp)
  802560:	da400317 	ldw	r9,12(sp)
  802564:	52800084 	addi	r10,r10,2
  802568:	3295883a 	add	r10,r6,r10
  80256c:	d9800717 	ldw	r6,28(sp)
  802570:	180b883a 	mov	r5,r3
  802574:	180f883a 	mov	r7,r3
  802578:	4992c03a 	cmpne	r9,r9,r6
  80257c:	da400b15 	stw	r9,44(sp)
  802580:	1007883a 	mov	r3,r2
  802584:	da800c15 	stw	r10,48(sp)
  802588:	2800070e 	bge	r5,zero,8025a8 <__mulsf3+0x138>
  80258c:	2880004c 	andi	r2,r5,1
  802590:	1005003a 	cmpeq	r2,r2,zero
  802594:	500d883a 	mov	r6,r10
  802598:	10001e26 	beq	r2,zero,802614 <__mulsf3+0x1a4>
  80259c:	380ed07a 	srli	r7,r7,1
  8025a0:	31800044 	addi	r6,r6,1
  8025a4:	d9800c15 	stw	r6,48(sp)
  8025a8:	01100034 	movhi	r4,16384
  8025ac:	213fffc4 	addi	r4,r4,-1
  8025b0:	21c00b36 	bltu	r4,r7,8025e0 <__mulsf3+0x170>
  8025b4:	d8800c17 	ldw	r2,48(sp)
  8025b8:	00000206 	br	8025c4 <__mulsf3+0x154>
  8025bc:	18c7883a 	add	r3,r3,r3
  8025c0:	21c00636 	bltu	r4,r7,8025dc <__mulsf3+0x16c>
  8025c4:	10bfffc4 	addi	r2,r2,-1
  8025c8:	39cf883a 	add	r7,r7,r7
  8025cc:	183ffb0e 	bge	r3,zero,8025bc <__mulsf3+0x14c>
  8025d0:	39c00054 	ori	r7,r7,1
  8025d4:	18c7883a 	add	r3,r3,r3
  8025d8:	21fffa2e 	bgeu	r4,r7,8025c4 <__mulsf3+0x154>
  8025dc:	d8800c15 	stw	r2,48(sp)
  8025e0:	39001fcc 	andi	r4,r7,127
  8025e4:	00801004 	movi	r2,64
  8025e8:	20800d26 	beq	r4,r2,802620 <__mulsf3+0x1b0>
  8025ec:	008000c4 	movi	r2,3
  8025f0:	d9000a04 	addi	r4,sp,40
  8025f4:	d9c00d15 	stw	r7,52(sp)
  8025f8:	d8800a15 	stw	r2,40(sp)
  8025fc:	08034380 	call	803438 <__pack_f>
  802600:	dfc01017 	ldw	ra,64(sp)
  802604:	dc400f17 	ldw	r17,60(sp)
  802608:	dc000e17 	ldw	r16,56(sp)
  80260c:	dec01104 	addi	sp,sp,68
  802610:	f800283a 	ret
  802614:	1804d07a 	srli	r2,r3,1
  802618:	10e00034 	orhi	r3,r2,32768
  80261c:	003fdf06 	br	80259c <__mulsf3+0x12c>
  802620:	3880200c 	andi	r2,r7,128
  802624:	103ff11e 	bne	r2,zero,8025ec <__mulsf3+0x17c>
  802628:	183ff026 	beq	r3,zero,8025ec <__mulsf3+0x17c>
  80262c:	3907883a 	add	r3,r7,r4
  802630:	00bfe004 	movi	r2,-128
  802634:	188e703a 	and	r7,r3,r2
  802638:	003fec06 	br	8025ec <__mulsf3+0x17c>
  80263c:	00800084 	movi	r2,2
  802640:	20bfa41e 	bne	r4,r2,8024d4 <__mulsf3+0x64>
  802644:	01002074 	movhi	r4,129
  802648:	21077804 	addi	r4,r4,7648
  80264c:	003fb306 	br	80251c <__mulsf3+0xac>

00802650 <__divsf3>:
  802650:	defff304 	addi	sp,sp,-52
  802654:	dc400b15 	stw	r17,44(sp)
  802658:	dc400204 	addi	r17,sp,8
  80265c:	dc000a15 	stw	r16,40(sp)
  802660:	d9000015 	stw	r4,0(sp)
  802664:	d9400115 	stw	r5,4(sp)
  802668:	d809883a 	mov	r4,sp
  80266c:	880b883a 	mov	r5,r17
  802670:	dc000604 	addi	r16,sp,24
  802674:	dfc00c15 	stw	ra,48(sp)
  802678:	08035980 	call	803598 <__unpack_f>
  80267c:	d9000104 	addi	r4,sp,4
  802680:	800b883a 	mov	r5,r16
  802684:	08035980 	call	803598 <__unpack_f>
  802688:	d9000217 	ldw	r4,8(sp)
  80268c:	00800044 	movi	r2,1
  802690:	01800104 	movi	r6,4
  802694:	11000a2e 	bgeu	r2,r4,8026c0 <__divsf3+0x70>
  802698:	d9400617 	ldw	r5,24(sp)
  80269c:	1140432e 	bgeu	r2,r5,8027ac <__divsf3+0x15c>
  8026a0:	d8800317 	ldw	r2,12(sp)
  8026a4:	d8c00717 	ldw	r3,28(sp)
  8026a8:	10c4f03a 	xor	r2,r2,r3
  8026ac:	d8800315 	stw	r2,12(sp)
  8026b0:	21800226 	beq	r4,r6,8026bc <__divsf3+0x6c>
  8026b4:	00800084 	movi	r2,2
  8026b8:	2080101e 	bne	r4,r2,8026fc <__divsf3+0xac>
  8026bc:	29000726 	beq	r5,r4,8026dc <__divsf3+0x8c>
  8026c0:	8809883a 	mov	r4,r17
  8026c4:	08034380 	call	803438 <__pack_f>
  8026c8:	dfc00c17 	ldw	ra,48(sp)
  8026cc:	dc400b17 	ldw	r17,44(sp)
  8026d0:	dc000a17 	ldw	r16,40(sp)
  8026d4:	dec00d04 	addi	sp,sp,52
  8026d8:	f800283a 	ret
  8026dc:	01002074 	movhi	r4,129
  8026e0:	21077804 	addi	r4,r4,7648
  8026e4:	08034380 	call	803438 <__pack_f>
  8026e8:	dfc00c17 	ldw	ra,48(sp)
  8026ec:	dc400b17 	ldw	r17,44(sp)
  8026f0:	dc000a17 	ldw	r16,40(sp)
  8026f4:	dec00d04 	addi	sp,sp,52
  8026f8:	f800283a 	ret
  8026fc:	29802d26 	beq	r5,r6,8027b4 <__divsf3+0x164>
  802700:	28801a26 	beq	r5,r2,80276c <__divsf3+0x11c>
  802704:	d8c00417 	ldw	r3,16(sp)
  802708:	d8800817 	ldw	r2,32(sp)
  80270c:	d9000517 	ldw	r4,20(sp)
  802710:	d9800917 	ldw	r6,36(sp)
  802714:	1885c83a 	sub	r2,r3,r2
  802718:	d8800415 	stw	r2,16(sp)
  80271c:	2180032e 	bgeu	r4,r6,80272c <__divsf3+0xdc>
  802720:	10bfffc4 	addi	r2,r2,-1
  802724:	d8800415 	stw	r2,16(sp)
  802728:	2109883a 	add	r4,r4,r4
  80272c:	01500034 	movhi	r5,16384
  802730:	0007883a 	mov	r3,zero
  802734:	0005883a 	mov	r2,zero
  802738:	01c007c4 	movi	r7,31
  80273c:	10800044 	addi	r2,r2,1
  802740:	21800236 	bltu	r4,r6,80274c <__divsf3+0xfc>
  802744:	1946b03a 	or	r3,r3,r5
  802748:	2189c83a 	sub	r4,r4,r6
  80274c:	280ad07a 	srli	r5,r5,1
  802750:	2109883a 	add	r4,r4,r4
  802754:	11fff91e 	bne	r2,r7,80273c <__divsf3+0xec>
  802758:	19401fcc 	andi	r5,r3,127
  80275c:	00801004 	movi	r2,64
  802760:	28800a26 	beq	r5,r2,80278c <__divsf3+0x13c>
  802764:	d8c00515 	stw	r3,20(sp)
  802768:	003fd506 	br	8026c0 <__divsf3+0x70>
  80276c:	8809883a 	mov	r4,r17
  802770:	d9800215 	stw	r6,8(sp)
  802774:	08034380 	call	803438 <__pack_f>
  802778:	dfc00c17 	ldw	ra,48(sp)
  80277c:	dc400b17 	ldw	r17,44(sp)
  802780:	dc000a17 	ldw	r16,40(sp)
  802784:	dec00d04 	addi	sp,sp,52
  802788:	f800283a 	ret
  80278c:	1880200c 	andi	r2,r3,128
  802790:	103ff41e 	bne	r2,zero,802764 <__divsf3+0x114>
  802794:	203ff326 	beq	r4,zero,802764 <__divsf3+0x114>
  802798:	1947883a 	add	r3,r3,r5
  80279c:	00bfe004 	movi	r2,-128
  8027a0:	1886703a 	and	r3,r3,r2
  8027a4:	d8c00515 	stw	r3,20(sp)
  8027a8:	003fc506 	br	8026c0 <__divsf3+0x70>
  8027ac:	8009883a 	mov	r4,r16
  8027b0:	003fc406 	br	8026c4 <__divsf3+0x74>
  8027b4:	8809883a 	mov	r4,r17
  8027b8:	d8000515 	stw	zero,20(sp)
  8027bc:	d8000415 	stw	zero,16(sp)
  8027c0:	003fc006 	br	8026c4 <__divsf3+0x74>

008027c4 <__eqsf2>:
  8027c4:	defff304 	addi	sp,sp,-52
  8027c8:	dc400b15 	stw	r17,44(sp)
  8027cc:	dc400204 	addi	r17,sp,8
  8027d0:	dc000a15 	stw	r16,40(sp)
  8027d4:	d9000015 	stw	r4,0(sp)
  8027d8:	d9400115 	stw	r5,4(sp)
  8027dc:	d809883a 	mov	r4,sp
  8027e0:	880b883a 	mov	r5,r17
  8027e4:	dc000604 	addi	r16,sp,24
  8027e8:	dfc00c15 	stw	ra,48(sp)
  8027ec:	08035980 	call	803598 <__unpack_f>
  8027f0:	d9000104 	addi	r4,sp,4
  8027f4:	800b883a 	mov	r5,r16
  8027f8:	08035980 	call	803598 <__unpack_f>
  8027fc:	d8800217 	ldw	r2,8(sp)
  802800:	00c00044 	movi	r3,1
  802804:	180d883a 	mov	r6,r3
  802808:	1880062e 	bgeu	r3,r2,802824 <__eqsf2+0x60>
  80280c:	d8800617 	ldw	r2,24(sp)
  802810:	8809883a 	mov	r4,r17
  802814:	800b883a 	mov	r5,r16
  802818:	1880022e 	bgeu	r3,r2,802824 <__eqsf2+0x60>
  80281c:	08036600 	call	803660 <__fpcmp_parts_f>
  802820:	100d883a 	mov	r6,r2
  802824:	3005883a 	mov	r2,r6
  802828:	dfc00c17 	ldw	ra,48(sp)
  80282c:	dc400b17 	ldw	r17,44(sp)
  802830:	dc000a17 	ldw	r16,40(sp)
  802834:	dec00d04 	addi	sp,sp,52
  802838:	f800283a 	ret

0080283c <__gtsf2>:
  80283c:	defff304 	addi	sp,sp,-52
  802840:	dc400b15 	stw	r17,44(sp)
  802844:	dc400204 	addi	r17,sp,8
  802848:	dc000a15 	stw	r16,40(sp)
  80284c:	d9000015 	stw	r4,0(sp)
  802850:	d9400115 	stw	r5,4(sp)
  802854:	d809883a 	mov	r4,sp
  802858:	880b883a 	mov	r5,r17
  80285c:	dc000604 	addi	r16,sp,24
  802860:	dfc00c15 	stw	ra,48(sp)
  802864:	08035980 	call	803598 <__unpack_f>
  802868:	d9000104 	addi	r4,sp,4
  80286c:	800b883a 	mov	r5,r16
  802870:	08035980 	call	803598 <__unpack_f>
  802874:	d8800217 	ldw	r2,8(sp)
  802878:	00c00044 	movi	r3,1
  80287c:	01bfffc4 	movi	r6,-1
  802880:	1880062e 	bgeu	r3,r2,80289c <__gtsf2+0x60>
  802884:	d8800617 	ldw	r2,24(sp)
  802888:	8809883a 	mov	r4,r17
  80288c:	800b883a 	mov	r5,r16
  802890:	1880022e 	bgeu	r3,r2,80289c <__gtsf2+0x60>
  802894:	08036600 	call	803660 <__fpcmp_parts_f>
  802898:	100d883a 	mov	r6,r2
  80289c:	3005883a 	mov	r2,r6
  8028a0:	dfc00c17 	ldw	ra,48(sp)
  8028a4:	dc400b17 	ldw	r17,44(sp)
  8028a8:	dc000a17 	ldw	r16,40(sp)
  8028ac:	dec00d04 	addi	sp,sp,52
  8028b0:	f800283a 	ret

008028b4 <__ltsf2>:
  8028b4:	defff304 	addi	sp,sp,-52
  8028b8:	dc400b15 	stw	r17,44(sp)
  8028bc:	dc400204 	addi	r17,sp,8
  8028c0:	dc000a15 	stw	r16,40(sp)
  8028c4:	d9000015 	stw	r4,0(sp)
  8028c8:	d9400115 	stw	r5,4(sp)
  8028cc:	d809883a 	mov	r4,sp
  8028d0:	880b883a 	mov	r5,r17
  8028d4:	dc000604 	addi	r16,sp,24
  8028d8:	dfc00c15 	stw	ra,48(sp)
  8028dc:	08035980 	call	803598 <__unpack_f>
  8028e0:	d9000104 	addi	r4,sp,4
  8028e4:	800b883a 	mov	r5,r16
  8028e8:	08035980 	call	803598 <__unpack_f>
  8028ec:	d8800217 	ldw	r2,8(sp)
  8028f0:	00c00044 	movi	r3,1
  8028f4:	180d883a 	mov	r6,r3
  8028f8:	1880062e 	bgeu	r3,r2,802914 <__ltsf2+0x60>
  8028fc:	d8800617 	ldw	r2,24(sp)
  802900:	8809883a 	mov	r4,r17
  802904:	800b883a 	mov	r5,r16
  802908:	1880022e 	bgeu	r3,r2,802914 <__ltsf2+0x60>
  80290c:	08036600 	call	803660 <__fpcmp_parts_f>
  802910:	100d883a 	mov	r6,r2
  802914:	3005883a 	mov	r2,r6
  802918:	dfc00c17 	ldw	ra,48(sp)
  80291c:	dc400b17 	ldw	r17,44(sp)
  802920:	dc000a17 	ldw	r16,40(sp)
  802924:	dec00d04 	addi	sp,sp,52
  802928:	f800283a 	ret

0080292c <__lesf2>:
  80292c:	defff304 	addi	sp,sp,-52
  802930:	dc400b15 	stw	r17,44(sp)
  802934:	dc400204 	addi	r17,sp,8
  802938:	dc000a15 	stw	r16,40(sp)
  80293c:	d9000015 	stw	r4,0(sp)
  802940:	d9400115 	stw	r5,4(sp)
  802944:	d809883a 	mov	r4,sp
  802948:	880b883a 	mov	r5,r17
  80294c:	dc000604 	addi	r16,sp,24
  802950:	dfc00c15 	stw	ra,48(sp)
  802954:	08035980 	call	803598 <__unpack_f>
  802958:	d9000104 	addi	r4,sp,4
  80295c:	800b883a 	mov	r5,r16
  802960:	08035980 	call	803598 <__unpack_f>
  802964:	d8800217 	ldw	r2,8(sp)
  802968:	00c00044 	movi	r3,1
  80296c:	180d883a 	mov	r6,r3
  802970:	1880062e 	bgeu	r3,r2,80298c <__lesf2+0x60>
  802974:	d8800617 	ldw	r2,24(sp)
  802978:	8809883a 	mov	r4,r17
  80297c:	800b883a 	mov	r5,r16
  802980:	1880022e 	bgeu	r3,r2,80298c <__lesf2+0x60>
  802984:	08036600 	call	803660 <__fpcmp_parts_f>
  802988:	100d883a 	mov	r6,r2
  80298c:	3005883a 	mov	r2,r6
  802990:	dfc00c17 	ldw	ra,48(sp)
  802994:	dc400b17 	ldw	r17,44(sp)
  802998:	dc000a17 	ldw	r16,40(sp)
  80299c:	dec00d04 	addi	sp,sp,52
  8029a0:	f800283a 	ret

008029a4 <__floatsisf>:
  8029a4:	2006d7fa 	srli	r3,r4,31
  8029a8:	defffa04 	addi	sp,sp,-24
  8029ac:	008000c4 	movi	r2,3
  8029b0:	dfc00515 	stw	ra,20(sp)
  8029b4:	dc000415 	stw	r16,16(sp)
  8029b8:	d8800015 	stw	r2,0(sp)
  8029bc:	d8c00115 	stw	r3,4(sp)
  8029c0:	2000081e 	bne	r4,zero,8029e4 <__floatsisf+0x40>
  8029c4:	00800084 	movi	r2,2
  8029c8:	d8800015 	stw	r2,0(sp)
  8029cc:	d809883a 	mov	r4,sp
  8029d0:	08034380 	call	803438 <__pack_f>
  8029d4:	dfc00517 	ldw	ra,20(sp)
  8029d8:	dc000417 	ldw	r16,16(sp)
  8029dc:	dec00604 	addi	sp,sp,24
  8029e0:	f800283a 	ret
  8029e4:	00800784 	movi	r2,30
  8029e8:	1807003a 	cmpeq	r3,r3,zero
  8029ec:	d8800215 	stw	r2,8(sp)
  8029f0:	18000e1e 	bne	r3,zero,802a2c <__floatsisf+0x88>
  8029f4:	00a00034 	movhi	r2,32768
  8029f8:	20800e26 	beq	r4,r2,802a34 <__floatsisf+0x90>
  8029fc:	0121c83a 	sub	r16,zero,r4
  802a00:	8009883a 	mov	r4,r16
  802a04:	dc000315 	stw	r16,12(sp)
  802a08:	08033b80 	call	8033b8 <__clzsi2>
  802a0c:	117fffc4 	addi	r5,r2,-1
  802a10:	017fee0e 	bge	zero,r5,8029cc <__floatsisf+0x28>
  802a14:	d8800217 	ldw	r2,8(sp)
  802a18:	8146983a 	sll	r3,r16,r5
  802a1c:	1145c83a 	sub	r2,r2,r5
  802a20:	d8c00315 	stw	r3,12(sp)
  802a24:	d8800215 	stw	r2,8(sp)
  802a28:	003fe806 	br	8029cc <__floatsisf+0x28>
  802a2c:	2021883a 	mov	r16,r4
  802a30:	003ff306 	br	802a00 <__floatsisf+0x5c>
  802a34:	00b3c034 	movhi	r2,52992
  802a38:	003fe606 	br	8029d4 <__floatsisf+0x30>

00802a3c <__extendsfdf2>:
  802a3c:	defff904 	addi	sp,sp,-28
  802a40:	d9000115 	stw	r4,4(sp)
  802a44:	d9400204 	addi	r5,sp,8
  802a48:	d9000104 	addi	r4,sp,4
  802a4c:	dfc00615 	stw	ra,24(sp)
  802a50:	08035980 	call	803598 <__unpack_f>
  802a54:	d9c00517 	ldw	r7,20(sp)
  802a58:	0011883a 	mov	r8,zero
  802a5c:	400697ba 	slli	r3,r8,30
  802a60:	3812d0ba 	srli	r9,r7,2
  802a64:	380497ba 	slli	r2,r7,30
  802a68:	d9000217 	ldw	r4,8(sp)
  802a6c:	d9400317 	ldw	r5,12(sp)
  802a70:	d9800417 	ldw	r6,16(sp)
  802a74:	48c6b03a 	or	r3,r9,r3
  802a78:	100f883a 	mov	r7,r2
  802a7c:	d8c00015 	stw	r3,0(sp)
  802a80:	08032740 	call	803274 <__make_dp>
  802a84:	dfc00617 	ldw	ra,24(sp)
  802a88:	dec00704 	addi	sp,sp,28
  802a8c:	f800283a 	ret

00802a90 <_fpadd_parts>:
  802a90:	defff804 	addi	sp,sp,-32
  802a94:	dcc00315 	stw	r19,12(sp)
  802a98:	2027883a 	mov	r19,r4
  802a9c:	21000017 	ldw	r4,0(r4)
  802aa0:	00c00044 	movi	r3,1
  802aa4:	dd400515 	stw	r21,20(sp)
  802aa8:	dd000415 	stw	r20,16(sp)
  802aac:	ddc00715 	stw	r23,28(sp)
  802ab0:	dd800615 	stw	r22,24(sp)
  802ab4:	dc800215 	stw	r18,8(sp)
  802ab8:	dc400115 	stw	r17,4(sp)
  802abc:	dc000015 	stw	r16,0(sp)
  802ac0:	282b883a 	mov	r21,r5
  802ac4:	3029883a 	mov	r20,r6
  802ac8:	1900632e 	bgeu	r3,r4,802c58 <_fpadd_parts+0x1c8>
  802acc:	28800017 	ldw	r2,0(r5)
  802ad0:	1880812e 	bgeu	r3,r2,802cd8 <_fpadd_parts+0x248>
  802ad4:	00c00104 	movi	r3,4
  802ad8:	20c0dc26 	beq	r4,r3,802e4c <_fpadd_parts+0x3bc>
  802adc:	10c07e26 	beq	r2,r3,802cd8 <_fpadd_parts+0x248>
  802ae0:	00c00084 	movi	r3,2
  802ae4:	10c06726 	beq	r2,r3,802c84 <_fpadd_parts+0x1f4>
  802ae8:	20c07b26 	beq	r4,r3,802cd8 <_fpadd_parts+0x248>
  802aec:	9dc00217 	ldw	r23,8(r19)
  802af0:	28c00217 	ldw	r3,8(r5)
  802af4:	9c400317 	ldw	r17,12(r19)
  802af8:	2bc00317 	ldw	r15,12(r5)
  802afc:	b8cdc83a 	sub	r6,r23,r3
  802b00:	9c800417 	ldw	r18,16(r19)
  802b04:	2c000417 	ldw	r16,16(r5)
  802b08:	3009883a 	mov	r4,r6
  802b0c:	30009716 	blt	r6,zero,802d6c <_fpadd_parts+0x2dc>
  802b10:	00800fc4 	movi	r2,63
  802b14:	11806b16 	blt	r2,r6,802cc4 <_fpadd_parts+0x234>
  802b18:	0100a40e 	bge	zero,r4,802dac <_fpadd_parts+0x31c>
  802b1c:	35bff804 	addi	r22,r6,-32
  802b20:	b000bc16 	blt	r22,zero,802e14 <_fpadd_parts+0x384>
  802b24:	8596d83a 	srl	r11,r16,r22
  802b28:	0019883a 	mov	r12,zero
  802b2c:	0013883a 	mov	r9,zero
  802b30:	01000044 	movi	r4,1
  802b34:	0015883a 	mov	r10,zero
  802b38:	b000be16 	blt	r22,zero,802e34 <_fpadd_parts+0x3a4>
  802b3c:	2590983a 	sll	r8,r4,r22
  802b40:	000f883a 	mov	r7,zero
  802b44:	00bfffc4 	movi	r2,-1
  802b48:	3889883a 	add	r4,r7,r2
  802b4c:	408b883a 	add	r5,r8,r2
  802b50:	21cd803a 	cmpltu	r6,r4,r7
  802b54:	314b883a 	add	r5,r6,r5
  802b58:	7904703a 	and	r2,r15,r4
  802b5c:	8146703a 	and	r3,r16,r5
  802b60:	10c4b03a 	or	r2,r2,r3
  802b64:	10000226 	beq	r2,zero,802b70 <_fpadd_parts+0xe0>
  802b68:	02400044 	movi	r9,1
  802b6c:	0015883a 	mov	r10,zero
  802b70:	5a5eb03a 	or	r15,r11,r9
  802b74:	62a0b03a 	or	r16,r12,r10
  802b78:	99400117 	ldw	r5,4(r19)
  802b7c:	a8800117 	ldw	r2,4(r21)
  802b80:	28806e26 	beq	r5,r2,802d3c <_fpadd_parts+0x2ac>
  802b84:	28006626 	beq	r5,zero,802d20 <_fpadd_parts+0x290>
  802b88:	7c45c83a 	sub	r2,r15,r17
  802b8c:	7889803a 	cmpltu	r4,r15,r2
  802b90:	8487c83a 	sub	r3,r16,r18
  802b94:	1909c83a 	sub	r4,r3,r4
  802b98:	100d883a 	mov	r6,r2
  802b9c:	200f883a 	mov	r7,r4
  802ba0:	38007716 	blt	r7,zero,802d80 <_fpadd_parts+0x2f0>
  802ba4:	a5c00215 	stw	r23,8(r20)
  802ba8:	a1c00415 	stw	r7,16(r20)
  802bac:	a0000115 	stw	zero,4(r20)
  802bb0:	a1800315 	stw	r6,12(r20)
  802bb4:	a2000317 	ldw	r8,12(r20)
  802bb8:	a2400417 	ldw	r9,16(r20)
  802bbc:	00bfffc4 	movi	r2,-1
  802bc0:	408b883a 	add	r5,r8,r2
  802bc4:	2a09803a 	cmpltu	r4,r5,r8
  802bc8:	488d883a 	add	r6,r9,r2
  802bcc:	01c40034 	movhi	r7,4096
  802bd0:	39ffffc4 	addi	r7,r7,-1
  802bd4:	218d883a 	add	r6,r4,r6
  802bd8:	39801736 	bltu	r7,r6,802c38 <_fpadd_parts+0x1a8>
  802bdc:	31c06526 	beq	r6,r7,802d74 <_fpadd_parts+0x2e4>
  802be0:	a3000217 	ldw	r12,8(r20)
  802be4:	4209883a 	add	r4,r8,r8
  802be8:	00bfffc4 	movi	r2,-1
  802bec:	220f803a 	cmpltu	r7,r4,r8
  802bf0:	4a4b883a 	add	r5,r9,r9
  802bf4:	394f883a 	add	r7,r7,r5
  802bf8:	2095883a 	add	r10,r4,r2
  802bfc:	3897883a 	add	r11,r7,r2
  802c00:	510d803a 	cmpltu	r6,r10,r4
  802c04:	6099883a 	add	r12,r12,r2
  802c08:	32d7883a 	add	r11,r6,r11
  802c0c:	00840034 	movhi	r2,4096
  802c10:	10bfffc4 	addi	r2,r2,-1
  802c14:	2011883a 	mov	r8,r4
  802c18:	3813883a 	mov	r9,r7
  802c1c:	a1000315 	stw	r4,12(r20)
  802c20:	a1c00415 	stw	r7,16(r20)
  802c24:	a3000215 	stw	r12,8(r20)
  802c28:	12c00336 	bltu	r2,r11,802c38 <_fpadd_parts+0x1a8>
  802c2c:	58bfed1e 	bne	r11,r2,802be4 <_fpadd_parts+0x154>
  802c30:	00bfff84 	movi	r2,-2
  802c34:	12bfeb2e 	bgeu	r2,r10,802be4 <_fpadd_parts+0x154>
  802c38:	a2800417 	ldw	r10,16(r20)
  802c3c:	008000c4 	movi	r2,3
  802c40:	00c80034 	movhi	r3,8192
  802c44:	18ffffc4 	addi	r3,r3,-1
  802c48:	a2400317 	ldw	r9,12(r20)
  802c4c:	a0800015 	stw	r2,0(r20)
  802c50:	1a802336 	bltu	r3,r10,802ce0 <_fpadd_parts+0x250>
  802c54:	a027883a 	mov	r19,r20
  802c58:	9805883a 	mov	r2,r19
  802c5c:	ddc00717 	ldw	r23,28(sp)
  802c60:	dd800617 	ldw	r22,24(sp)
  802c64:	dd400517 	ldw	r21,20(sp)
  802c68:	dd000417 	ldw	r20,16(sp)
  802c6c:	dcc00317 	ldw	r19,12(sp)
  802c70:	dc800217 	ldw	r18,8(sp)
  802c74:	dc400117 	ldw	r17,4(sp)
  802c78:	dc000017 	ldw	r16,0(sp)
  802c7c:	dec00804 	addi	sp,sp,32
  802c80:	f800283a 	ret
  802c84:	20fff41e 	bne	r4,r3,802c58 <_fpadd_parts+0x1c8>
  802c88:	31000015 	stw	r4,0(r6)
  802c8c:	98800117 	ldw	r2,4(r19)
  802c90:	30800115 	stw	r2,4(r6)
  802c94:	98c00217 	ldw	r3,8(r19)
  802c98:	30c00215 	stw	r3,8(r6)
  802c9c:	98800317 	ldw	r2,12(r19)
  802ca0:	30800315 	stw	r2,12(r6)
  802ca4:	98c00417 	ldw	r3,16(r19)
  802ca8:	30c00415 	stw	r3,16(r6)
  802cac:	98800117 	ldw	r2,4(r19)
  802cb0:	28c00117 	ldw	r3,4(r5)
  802cb4:	3027883a 	mov	r19,r6
  802cb8:	10c4703a 	and	r2,r2,r3
  802cbc:	30800115 	stw	r2,4(r6)
  802cc0:	003fe506 	br	802c58 <_fpadd_parts+0x1c8>
  802cc4:	1dc02616 	blt	r3,r23,802d60 <_fpadd_parts+0x2d0>
  802cc8:	0023883a 	mov	r17,zero
  802ccc:	182f883a 	mov	r23,r3
  802cd0:	0025883a 	mov	r18,zero
  802cd4:	003fa806 	br	802b78 <_fpadd_parts+0xe8>
  802cd8:	a827883a 	mov	r19,r21
  802cdc:	003fde06 	br	802c58 <_fpadd_parts+0x1c8>
  802ce0:	01800044 	movi	r6,1
  802ce4:	500497fa 	slli	r2,r10,31
  802ce8:	4808d07a 	srli	r4,r9,1
  802cec:	518ad83a 	srl	r5,r10,r6
  802cf0:	a2000217 	ldw	r8,8(r20)
  802cf4:	1108b03a 	or	r4,r2,r4
  802cf8:	0007883a 	mov	r3,zero
  802cfc:	4984703a 	and	r2,r9,r6
  802d00:	208cb03a 	or	r6,r4,r2
  802d04:	28ceb03a 	or	r7,r5,r3
  802d08:	42000044 	addi	r8,r8,1
  802d0c:	a027883a 	mov	r19,r20
  802d10:	a1c00415 	stw	r7,16(r20)
  802d14:	a2000215 	stw	r8,8(r20)
  802d18:	a1800315 	stw	r6,12(r20)
  802d1c:	003fce06 	br	802c58 <_fpadd_parts+0x1c8>
  802d20:	8bc5c83a 	sub	r2,r17,r15
  802d24:	8889803a 	cmpltu	r4,r17,r2
  802d28:	9407c83a 	sub	r3,r18,r16
  802d2c:	1909c83a 	sub	r4,r3,r4
  802d30:	100d883a 	mov	r6,r2
  802d34:	200f883a 	mov	r7,r4
  802d38:	003f9906 	br	802ba0 <_fpadd_parts+0x110>
  802d3c:	7c45883a 	add	r2,r15,r17
  802d40:	13c9803a 	cmpltu	r4,r2,r15
  802d44:	8487883a 	add	r3,r16,r18
  802d48:	20c9883a 	add	r4,r4,r3
  802d4c:	a1400115 	stw	r5,4(r20)
  802d50:	a5c00215 	stw	r23,8(r20)
  802d54:	a0800315 	stw	r2,12(r20)
  802d58:	a1000415 	stw	r4,16(r20)
  802d5c:	003fb606 	br	802c38 <_fpadd_parts+0x1a8>
  802d60:	001f883a 	mov	r15,zero
  802d64:	0021883a 	mov	r16,zero
  802d68:	003f8306 	br	802b78 <_fpadd_parts+0xe8>
  802d6c:	018dc83a 	sub	r6,zero,r6
  802d70:	003f6706 	br	802b10 <_fpadd_parts+0x80>
  802d74:	00bfff84 	movi	r2,-2
  802d78:	117faf36 	bltu	r2,r5,802c38 <_fpadd_parts+0x1a8>
  802d7c:	003f9806 	br	802be0 <_fpadd_parts+0x150>
  802d80:	0005883a 	mov	r2,zero
  802d84:	1189c83a 	sub	r4,r2,r6
  802d88:	1105803a 	cmpltu	r2,r2,r4
  802d8c:	01cbc83a 	sub	r5,zero,r7
  802d90:	2885c83a 	sub	r2,r5,r2
  802d94:	01800044 	movi	r6,1
  802d98:	a1800115 	stw	r6,4(r20)
  802d9c:	a5c00215 	stw	r23,8(r20)
  802da0:	a1000315 	stw	r4,12(r20)
  802da4:	a0800415 	stw	r2,16(r20)
  802da8:	003f8206 	br	802bb4 <_fpadd_parts+0x124>
  802dac:	203f7226 	beq	r4,zero,802b78 <_fpadd_parts+0xe8>
  802db0:	35bff804 	addi	r22,r6,-32
  802db4:	b9af883a 	add	r23,r23,r6
  802db8:	b0003116 	blt	r22,zero,802e80 <_fpadd_parts+0x3f0>
  802dbc:	959ad83a 	srl	r13,r18,r22
  802dc0:	001d883a 	mov	r14,zero
  802dc4:	000f883a 	mov	r7,zero
  802dc8:	01000044 	movi	r4,1
  802dcc:	0011883a 	mov	r8,zero
  802dd0:	b0002516 	blt	r22,zero,802e68 <_fpadd_parts+0x3d8>
  802dd4:	2594983a 	sll	r10,r4,r22
  802dd8:	0013883a 	mov	r9,zero
  802ddc:	00bfffc4 	movi	r2,-1
  802de0:	4889883a 	add	r4,r9,r2
  802de4:	508b883a 	add	r5,r10,r2
  802de8:	224d803a 	cmpltu	r6,r4,r9
  802dec:	314b883a 	add	r5,r6,r5
  802df0:	8904703a 	and	r2,r17,r4
  802df4:	9146703a 	and	r3,r18,r5
  802df8:	10c4b03a 	or	r2,r2,r3
  802dfc:	10000226 	beq	r2,zero,802e08 <_fpadd_parts+0x378>
  802e00:	01c00044 	movi	r7,1
  802e04:	0011883a 	mov	r8,zero
  802e08:	69e2b03a 	or	r17,r13,r7
  802e0c:	7224b03a 	or	r18,r14,r8
  802e10:	003f5906 	br	802b78 <_fpadd_parts+0xe8>
  802e14:	8407883a 	add	r3,r16,r16
  802e18:	008007c4 	movi	r2,31
  802e1c:	1185c83a 	sub	r2,r2,r6
  802e20:	1886983a 	sll	r3,r3,r2
  802e24:	7996d83a 	srl	r11,r15,r6
  802e28:	8198d83a 	srl	r12,r16,r6
  802e2c:	1ad6b03a 	or	r11,r3,r11
  802e30:	003f3e06 	br	802b2c <_fpadd_parts+0x9c>
  802e34:	2006d07a 	srli	r3,r4,1
  802e38:	008007c4 	movi	r2,31
  802e3c:	1185c83a 	sub	r2,r2,r6
  802e40:	1890d83a 	srl	r8,r3,r2
  802e44:	218e983a 	sll	r7,r4,r6
  802e48:	003f3e06 	br	802b44 <_fpadd_parts+0xb4>
  802e4c:	113f821e 	bne	r2,r4,802c58 <_fpadd_parts+0x1c8>
  802e50:	28c00117 	ldw	r3,4(r5)
  802e54:	98800117 	ldw	r2,4(r19)
  802e58:	10ff7f26 	beq	r2,r3,802c58 <_fpadd_parts+0x1c8>
  802e5c:	04c02074 	movhi	r19,129
  802e60:	9cc77c04 	addi	r19,r19,7664
  802e64:	003f7c06 	br	802c58 <_fpadd_parts+0x1c8>
  802e68:	2006d07a 	srli	r3,r4,1
  802e6c:	008007c4 	movi	r2,31
  802e70:	1185c83a 	sub	r2,r2,r6
  802e74:	1894d83a 	srl	r10,r3,r2
  802e78:	2192983a 	sll	r9,r4,r6
  802e7c:	003fd706 	br	802ddc <_fpadd_parts+0x34c>
  802e80:	9487883a 	add	r3,r18,r18
  802e84:	008007c4 	movi	r2,31
  802e88:	1185c83a 	sub	r2,r2,r6
  802e8c:	1886983a 	sll	r3,r3,r2
  802e90:	899ad83a 	srl	r13,r17,r6
  802e94:	919cd83a 	srl	r14,r18,r6
  802e98:	1b5ab03a 	or	r13,r3,r13
  802e9c:	003fc906 	br	802dc4 <_fpadd_parts+0x334>

00802ea0 <__subdf3>:
  802ea0:	deffea04 	addi	sp,sp,-88
  802ea4:	dcc01415 	stw	r19,80(sp)
  802ea8:	dcc00404 	addi	r19,sp,16
  802eac:	2011883a 	mov	r8,r4
  802eb0:	2813883a 	mov	r9,r5
  802eb4:	dc401315 	stw	r17,76(sp)
  802eb8:	d809883a 	mov	r4,sp
  802ebc:	980b883a 	mov	r5,r19
  802ec0:	dc400904 	addi	r17,sp,36
  802ec4:	dfc01515 	stw	ra,84(sp)
  802ec8:	da400115 	stw	r9,4(sp)
  802ecc:	d9c00315 	stw	r7,12(sp)
  802ed0:	da000015 	stw	r8,0(sp)
  802ed4:	d9800215 	stw	r6,8(sp)
  802ed8:	0803a480 	call	803a48 <__unpack_d>
  802edc:	d9000204 	addi	r4,sp,8
  802ee0:	880b883a 	mov	r5,r17
  802ee4:	0803a480 	call	803a48 <__unpack_d>
  802ee8:	d8800a17 	ldw	r2,40(sp)
  802eec:	880b883a 	mov	r5,r17
  802ef0:	9809883a 	mov	r4,r19
  802ef4:	d9800e04 	addi	r6,sp,56
  802ef8:	1080005c 	xori	r2,r2,1
  802efc:	d8800a15 	stw	r2,40(sp)
  802f00:	0802a900 	call	802a90 <_fpadd_parts>
  802f04:	1009883a 	mov	r4,r2
  802f08:	08037340 	call	803734 <__pack_d>
  802f0c:	dfc01517 	ldw	ra,84(sp)
  802f10:	dcc01417 	ldw	r19,80(sp)
  802f14:	dc401317 	ldw	r17,76(sp)
  802f18:	dec01604 	addi	sp,sp,88
  802f1c:	f800283a 	ret

00802f20 <__adddf3>:
  802f20:	deffea04 	addi	sp,sp,-88
  802f24:	dcc01415 	stw	r19,80(sp)
  802f28:	dcc00404 	addi	r19,sp,16
  802f2c:	2011883a 	mov	r8,r4
  802f30:	2813883a 	mov	r9,r5
  802f34:	dc401315 	stw	r17,76(sp)
  802f38:	d809883a 	mov	r4,sp
  802f3c:	980b883a 	mov	r5,r19
  802f40:	dc400904 	addi	r17,sp,36
  802f44:	dfc01515 	stw	ra,84(sp)
  802f48:	da400115 	stw	r9,4(sp)
  802f4c:	d9c00315 	stw	r7,12(sp)
  802f50:	da000015 	stw	r8,0(sp)
  802f54:	d9800215 	stw	r6,8(sp)
  802f58:	0803a480 	call	803a48 <__unpack_d>
  802f5c:	d9000204 	addi	r4,sp,8
  802f60:	880b883a 	mov	r5,r17
  802f64:	0803a480 	call	803a48 <__unpack_d>
  802f68:	d9800e04 	addi	r6,sp,56
  802f6c:	9809883a 	mov	r4,r19
  802f70:	880b883a 	mov	r5,r17
  802f74:	0802a900 	call	802a90 <_fpadd_parts>
  802f78:	1009883a 	mov	r4,r2
  802f7c:	08037340 	call	803734 <__pack_d>
  802f80:	dfc01517 	ldw	ra,84(sp)
  802f84:	dcc01417 	ldw	r19,80(sp)
  802f88:	dc401317 	ldw	r17,76(sp)
  802f8c:	dec01604 	addi	sp,sp,88
  802f90:	f800283a 	ret

00802f94 <__divdf3>:
  802f94:	deffed04 	addi	sp,sp,-76
  802f98:	dcc01115 	stw	r19,68(sp)
  802f9c:	dcc00404 	addi	r19,sp,16
  802fa0:	2011883a 	mov	r8,r4
  802fa4:	2813883a 	mov	r9,r5
  802fa8:	dc000e15 	stw	r16,56(sp)
  802fac:	d809883a 	mov	r4,sp
  802fb0:	980b883a 	mov	r5,r19
  802fb4:	dc000904 	addi	r16,sp,36
  802fb8:	dfc01215 	stw	ra,72(sp)
  802fbc:	da400115 	stw	r9,4(sp)
  802fc0:	d9c00315 	stw	r7,12(sp)
  802fc4:	da000015 	stw	r8,0(sp)
  802fc8:	d9800215 	stw	r6,8(sp)
  802fcc:	dc801015 	stw	r18,64(sp)
  802fd0:	dc400f15 	stw	r17,60(sp)
  802fd4:	0803a480 	call	803a48 <__unpack_d>
  802fd8:	d9000204 	addi	r4,sp,8
  802fdc:	800b883a 	mov	r5,r16
  802fe0:	0803a480 	call	803a48 <__unpack_d>
  802fe4:	d9000417 	ldw	r4,16(sp)
  802fe8:	00800044 	movi	r2,1
  802fec:	11000b2e 	bgeu	r2,r4,80301c <__divdf3+0x88>
  802ff0:	d9400917 	ldw	r5,36(sp)
  802ff4:	1140762e 	bgeu	r2,r5,8031d0 <__divdf3+0x23c>
  802ff8:	d8800517 	ldw	r2,20(sp)
  802ffc:	d8c00a17 	ldw	r3,40(sp)
  803000:	01800104 	movi	r6,4
  803004:	10c4f03a 	xor	r2,r2,r3
  803008:	d8800515 	stw	r2,20(sp)
  80300c:	21800226 	beq	r4,r6,803018 <__divdf3+0x84>
  803010:	00800084 	movi	r2,2
  803014:	2080141e 	bne	r4,r2,803068 <__divdf3+0xd4>
  803018:	29000926 	beq	r5,r4,803040 <__divdf3+0xac>
  80301c:	9809883a 	mov	r4,r19
  803020:	08037340 	call	803734 <__pack_d>
  803024:	dfc01217 	ldw	ra,72(sp)
  803028:	dcc01117 	ldw	r19,68(sp)
  80302c:	dc801017 	ldw	r18,64(sp)
  803030:	dc400f17 	ldw	r17,60(sp)
  803034:	dc000e17 	ldw	r16,56(sp)
  803038:	dec01304 	addi	sp,sp,76
  80303c:	f800283a 	ret
  803040:	01002074 	movhi	r4,129
  803044:	21077c04 	addi	r4,r4,7664
  803048:	08037340 	call	803734 <__pack_d>
  80304c:	dfc01217 	ldw	ra,72(sp)
  803050:	dcc01117 	ldw	r19,68(sp)
  803054:	dc801017 	ldw	r18,64(sp)
  803058:	dc400f17 	ldw	r17,60(sp)
  80305c:	dc000e17 	ldw	r16,56(sp)
  803060:	dec01304 	addi	sp,sp,76
  803064:	f800283a 	ret
  803068:	29805b26 	beq	r5,r6,8031d8 <__divdf3+0x244>
  80306c:	28802d26 	beq	r5,r2,803124 <__divdf3+0x190>
  803070:	d8c00617 	ldw	r3,24(sp)
  803074:	d8800b17 	ldw	r2,44(sp)
  803078:	d9c00817 	ldw	r7,32(sp)
  80307c:	dc400d17 	ldw	r17,52(sp)
  803080:	188bc83a 	sub	r5,r3,r2
  803084:	d9800717 	ldw	r6,28(sp)
  803088:	dc000c17 	ldw	r16,48(sp)
  80308c:	d9400615 	stw	r5,24(sp)
  803090:	3c403836 	bltu	r7,r17,803174 <__divdf3+0x1e0>
  803094:	89c03626 	beq	r17,r7,803170 <__divdf3+0x1dc>
  803098:	0015883a 	mov	r10,zero
  80309c:	001d883a 	mov	r14,zero
  8030a0:	02c40034 	movhi	r11,4096
  8030a4:	001f883a 	mov	r15,zero
  8030a8:	003f883a 	mov	ra,zero
  8030ac:	04800f44 	movi	r18,61
  8030b0:	00000f06 	br	8030f0 <__divdf3+0x15c>
  8030b4:	601d883a 	mov	r14,r12
  8030b8:	681f883a 	mov	r15,r13
  8030bc:	400d883a 	mov	r6,r8
  8030c0:	100f883a 	mov	r7,r2
  8030c4:	3191883a 	add	r8,r6,r6
  8030c8:	5808d07a 	srli	r4,r11,1
  8030cc:	4185803a 	cmpltu	r2,r8,r6
  8030d0:	39d3883a 	add	r9,r7,r7
  8030d4:	28c6b03a 	or	r3,r5,r3
  8030d8:	1245883a 	add	r2,r2,r9
  8030dc:	1815883a 	mov	r10,r3
  8030e0:	2017883a 	mov	r11,r4
  8030e4:	400d883a 	mov	r6,r8
  8030e8:	100f883a 	mov	r7,r2
  8030ec:	fc801726 	beq	ra,r18,80314c <__divdf3+0x1b8>
  8030f0:	580a97fa 	slli	r5,r11,31
  8030f4:	5006d07a 	srli	r3,r10,1
  8030f8:	ffc00044 	addi	ra,ra,1
  8030fc:	3c7ff136 	bltu	r7,r17,8030c4 <__divdf3+0x130>
  803100:	3411c83a 	sub	r8,r6,r16
  803104:	3205803a 	cmpltu	r2,r6,r8
  803108:	3c53c83a 	sub	r9,r7,r17
  80310c:	7298b03a 	or	r12,r14,r10
  803110:	7adab03a 	or	r13,r15,r11
  803114:	4885c83a 	sub	r2,r9,r2
  803118:	89ffe61e 	bne	r17,r7,8030b4 <__divdf3+0x120>
  80311c:	343fe936 	bltu	r6,r16,8030c4 <__divdf3+0x130>
  803120:	003fe406 	br	8030b4 <__divdf3+0x120>
  803124:	9809883a 	mov	r4,r19
  803128:	d9800415 	stw	r6,16(sp)
  80312c:	08037340 	call	803734 <__pack_d>
  803130:	dfc01217 	ldw	ra,72(sp)
  803134:	dcc01117 	ldw	r19,68(sp)
  803138:	dc801017 	ldw	r18,64(sp)
  80313c:	dc400f17 	ldw	r17,60(sp)
  803140:	dc000e17 	ldw	r16,56(sp)
  803144:	dec01304 	addi	sp,sp,76
  803148:	f800283a 	ret
  80314c:	00803fc4 	movi	r2,255
  803150:	7090703a 	and	r8,r14,r2
  803154:	00802004 	movi	r2,128
  803158:	0007883a 	mov	r3,zero
  80315c:	0013883a 	mov	r9,zero
  803160:	40800d26 	beq	r8,r2,803198 <__divdf3+0x204>
  803164:	dbc00815 	stw	r15,32(sp)
  803168:	db800715 	stw	r14,28(sp)
  80316c:	003fab06 	br	80301c <__divdf3+0x88>
  803170:	343fc92e 	bgeu	r6,r16,803098 <__divdf3+0x104>
  803174:	3185883a 	add	r2,r6,r6
  803178:	1189803a 	cmpltu	r4,r2,r6
  80317c:	39c7883a 	add	r3,r7,r7
  803180:	20c9883a 	add	r4,r4,r3
  803184:	297fffc4 	addi	r5,r5,-1
  803188:	100d883a 	mov	r6,r2
  80318c:	200f883a 	mov	r7,r4
  803190:	d9400615 	stw	r5,24(sp)
  803194:	003fc006 	br	803098 <__divdf3+0x104>
  803198:	483ff21e 	bne	r9,zero,803164 <__divdf3+0x1d0>
  80319c:	01004004 	movi	r4,256
  8031a0:	7104703a 	and	r2,r14,r4
  8031a4:	10c4b03a 	or	r2,r2,r3
  8031a8:	103fee1e 	bne	r2,zero,803164 <__divdf3+0x1d0>
  8031ac:	31c4b03a 	or	r2,r6,r7
  8031b0:	103fec26 	beq	r2,zero,803164 <__divdf3+0x1d0>
  8031b4:	7205883a 	add	r2,r14,r8
  8031b8:	1391803a 	cmpltu	r8,r2,r14
  8031bc:	43d1883a 	add	r8,r8,r15
  8031c0:	013fc004 	movi	r4,-256
  8031c4:	111c703a 	and	r14,r2,r4
  8031c8:	401f883a 	mov	r15,r8
  8031cc:	003fe506 	br	803164 <__divdf3+0x1d0>
  8031d0:	8009883a 	mov	r4,r16
  8031d4:	003f9206 	br	803020 <__divdf3+0x8c>
  8031d8:	9809883a 	mov	r4,r19
  8031dc:	d8000715 	stw	zero,28(sp)
  8031e0:	d8000815 	stw	zero,32(sp)
  8031e4:	d8000615 	stw	zero,24(sp)
  8031e8:	003f8d06 	br	803020 <__divdf3+0x8c>

008031ec <__nedf2>:
  8031ec:	deffef04 	addi	sp,sp,-68
  8031f0:	dc400f15 	stw	r17,60(sp)
  8031f4:	dc400404 	addi	r17,sp,16
  8031f8:	2005883a 	mov	r2,r4
  8031fc:	2807883a 	mov	r3,r5
  803200:	dc000e15 	stw	r16,56(sp)
  803204:	d809883a 	mov	r4,sp
  803208:	880b883a 	mov	r5,r17
  80320c:	dc000904 	addi	r16,sp,36
  803210:	d8c00115 	stw	r3,4(sp)
  803214:	d8800015 	stw	r2,0(sp)
  803218:	d9800215 	stw	r6,8(sp)
  80321c:	dfc01015 	stw	ra,64(sp)
  803220:	d9c00315 	stw	r7,12(sp)
  803224:	0803a480 	call	803a48 <__unpack_d>
  803228:	d9000204 	addi	r4,sp,8
  80322c:	800b883a 	mov	r5,r16
  803230:	0803a480 	call	803a48 <__unpack_d>
  803234:	d8800417 	ldw	r2,16(sp)
  803238:	00c00044 	movi	r3,1
  80323c:	180d883a 	mov	r6,r3
  803240:	1880062e 	bgeu	r3,r2,80325c <__nedf2+0x70>
  803244:	d8800917 	ldw	r2,36(sp)
  803248:	8809883a 	mov	r4,r17
  80324c:	800b883a 	mov	r5,r16
  803250:	1880022e 	bgeu	r3,r2,80325c <__nedf2+0x70>
  803254:	0803b800 	call	803b80 <__fpcmp_parts_d>
  803258:	100d883a 	mov	r6,r2
  80325c:	3005883a 	mov	r2,r6
  803260:	dfc01017 	ldw	ra,64(sp)
  803264:	dc400f17 	ldw	r17,60(sp)
  803268:	dc000e17 	ldw	r16,56(sp)
  80326c:	dec01104 	addi	sp,sp,68
  803270:	f800283a 	ret

00803274 <__make_dp>:
  803274:	defff904 	addi	sp,sp,-28
  803278:	d8c00717 	ldw	r3,28(sp)
  80327c:	d9000015 	stw	r4,0(sp)
  803280:	d809883a 	mov	r4,sp
  803284:	dfc00515 	stw	ra,20(sp)
  803288:	d9c00615 	stw	r7,24(sp)
  80328c:	d9400115 	stw	r5,4(sp)
  803290:	d9800215 	stw	r6,8(sp)
  803294:	d8c00415 	stw	r3,16(sp)
  803298:	d9c00315 	stw	r7,12(sp)
  80329c:	08037340 	call	803734 <__pack_d>
  8032a0:	dfc00517 	ldw	ra,20(sp)
  8032a4:	dec00704 	addi	sp,sp,28
  8032a8:	f800283a 	ret

008032ac <__truncdfsf2>:
  8032ac:	defff804 	addi	sp,sp,-32
  8032b0:	2005883a 	mov	r2,r4
  8032b4:	2807883a 	mov	r3,r5
  8032b8:	d809883a 	mov	r4,sp
  8032bc:	d9400204 	addi	r5,sp,8
  8032c0:	d8c00115 	stw	r3,4(sp)
  8032c4:	d8800015 	stw	r2,0(sp)
  8032c8:	dfc00715 	stw	ra,28(sp)
  8032cc:	0803a480 	call	803a48 <__unpack_d>
  8032d0:	d9c00517 	ldw	r7,20(sp)
  8032d4:	da000617 	ldw	r8,24(sp)
  8032d8:	02d00034 	movhi	r11,16384
  8032dc:	5affffc4 	addi	r11,r11,-1
  8032e0:	3812d7ba 	srli	r9,r7,30
  8032e4:	401a90ba 	slli	r13,r8,2
  8032e8:	3ac4703a 	and	r2,r7,r11
  8032ec:	0007883a 	mov	r3,zero
  8032f0:	6a52b03a 	or	r9,r13,r9
  8032f4:	10c4b03a 	or	r2,r2,r3
  8032f8:	d9000217 	ldw	r4,8(sp)
  8032fc:	d9400317 	ldw	r5,12(sp)
  803300:	d9800417 	ldw	r6,16(sp)
  803304:	480f883a 	mov	r7,r9
  803308:	10000126 	beq	r2,zero,803310 <__truncdfsf2+0x64>
  80330c:	49c00054 	ori	r7,r9,1
  803310:	08037080 	call	803708 <__make_fp>
  803314:	dfc00717 	ldw	ra,28(sp)
  803318:	dec00804 	addi	sp,sp,32
  80331c:	f800283a 	ret

00803320 <__muldi3>:
  803320:	2011883a 	mov	r8,r4
  803324:	427fffcc 	andi	r9,r8,65535
  803328:	4018d43a 	srli	r12,r8,16
  80332c:	32bfffcc 	andi	r10,r6,65535
  803330:	3016d43a 	srli	r11,r6,16
  803334:	4a85383a 	mul	r2,r9,r10
  803338:	6295383a 	mul	r10,r12,r10
  80333c:	4ad3383a 	mul	r9,r9,r11
  803340:	113fffcc 	andi	r4,r2,65535
  803344:	1004d43a 	srli	r2,r2,16
  803348:	4a93883a 	add	r9,r9,r10
  80334c:	3807883a 	mov	r3,r7
  803350:	1245883a 	add	r2,r2,r9
  803354:	280f883a 	mov	r7,r5
  803358:	180b883a 	mov	r5,r3
  80335c:	1006943a 	slli	r3,r2,16
  803360:	defffd04 	addi	sp,sp,-12
  803364:	dc800215 	stw	r18,8(sp)
  803368:	1907883a 	add	r3,r3,r4
  80336c:	dc400115 	stw	r17,4(sp)
  803370:	dc000015 	stw	r16,0(sp)
  803374:	4165383a 	mul	r18,r8,r5
  803378:	31e3383a 	mul	r17,r6,r7
  80337c:	1012d43a 	srli	r9,r2,16
  803380:	62d9383a 	mul	r12,r12,r11
  803384:	181f883a 	mov	r15,r3
  803388:	1280022e 	bgeu	r2,r10,803394 <__muldi3+0x74>
  80338c:	00800074 	movhi	r2,1
  803390:	6099883a 	add	r12,r12,r2
  803394:	624d883a 	add	r6,r12,r9
  803398:	9187883a 	add	r3,r18,r6
  80339c:	88c7883a 	add	r3,r17,r3
  8033a0:	7805883a 	mov	r2,r15
  8033a4:	dc800217 	ldw	r18,8(sp)
  8033a8:	dc400117 	ldw	r17,4(sp)
  8033ac:	dc000017 	ldw	r16,0(sp)
  8033b0:	dec00304 	addi	sp,sp,12
  8033b4:	f800283a 	ret

008033b8 <__clzsi2>:
  8033b8:	00bfffd4 	movui	r2,65535
  8033bc:	11000e36 	bltu	r2,r4,8033f8 <__clzsi2+0x40>
  8033c0:	00803fc4 	movi	r2,255
  8033c4:	01400204 	movi	r5,8
  8033c8:	0007883a 	mov	r3,zero
  8033cc:	11001036 	bltu	r2,r4,803410 <__clzsi2+0x58>
  8033d0:	000b883a 	mov	r5,zero
  8033d4:	20c6d83a 	srl	r3,r4,r3
  8033d8:	00802074 	movhi	r2,129
  8033dc:	10878104 	addi	r2,r2,7684
  8033e0:	1887883a 	add	r3,r3,r2
  8033e4:	18800003 	ldbu	r2,0(r3)
  8033e8:	00c00804 	movi	r3,32
  8033ec:	2885883a 	add	r2,r5,r2
  8033f0:	1885c83a 	sub	r2,r3,r2
  8033f4:	f800283a 	ret
  8033f8:	01400404 	movi	r5,16
  8033fc:	00804034 	movhi	r2,256
  803400:	10bfffc4 	addi	r2,r2,-1
  803404:	2807883a 	mov	r3,r5
  803408:	113ff22e 	bgeu	r2,r4,8033d4 <__clzsi2+0x1c>
  80340c:	01400604 	movi	r5,24
  803410:	2807883a 	mov	r3,r5
  803414:	20c6d83a 	srl	r3,r4,r3
  803418:	00802074 	movhi	r2,129
  80341c:	10878104 	addi	r2,r2,7684
  803420:	1887883a 	add	r3,r3,r2
  803424:	18800003 	ldbu	r2,0(r3)
  803428:	00c00804 	movi	r3,32
  80342c:	2885883a 	add	r2,r5,r2
  803430:	1885c83a 	sub	r2,r3,r2
  803434:	f800283a 	ret

00803438 <__pack_f>:
  803438:	20c00017 	ldw	r3,0(r4)
  80343c:	01c00044 	movi	r7,1
  803440:	21800317 	ldw	r6,12(r4)
  803444:	21400117 	ldw	r5,4(r4)
  803448:	38c02d2e 	bgeu	r7,r3,803500 <__pack_f+0xc8>
  80344c:	00800104 	movi	r2,4
  803450:	18802826 	beq	r3,r2,8034f4 <__pack_f+0xbc>
  803454:	00800084 	movi	r2,2
  803458:	18800126 	beq	r3,r2,803460 <__pack_f+0x28>
  80345c:	3000101e 	bne	r6,zero,8034a0 <__pack_f+0x68>
  803460:	000d883a 	mov	r6,zero
  803464:	0007883a 	mov	r3,zero
  803468:	19003fcc 	andi	r4,r3,255
  80346c:	200895fa 	slli	r4,r4,23
  803470:	00c02034 	movhi	r3,128
  803474:	18ffffc4 	addi	r3,r3,-1
  803478:	30c6703a 	and	r3,r6,r3
  80347c:	10a0002c 	andhi	r2,r2,32768
  803480:	10c4b03a 	or	r2,r2,r3
  803484:	280a97fa 	slli	r5,r5,31
  803488:	1104b03a 	or	r2,r2,r4
  80348c:	00e00034 	movhi	r3,32768
  803490:	18ffffc4 	addi	r3,r3,-1
  803494:	10c4703a 	and	r2,r2,r3
  803498:	1144b03a 	or	r2,r2,r5
  80349c:	f800283a 	ret
  8034a0:	21000217 	ldw	r4,8(r4)
  8034a4:	00bfe084 	movi	r2,-126
  8034a8:	20801b16 	blt	r4,r2,803518 <__pack_f+0xe0>
  8034ac:	00801fc4 	movi	r2,127
  8034b0:	11001016 	blt	r2,r4,8034f4 <__pack_f+0xbc>
  8034b4:	308e703a 	and	r7,r6,r2
  8034b8:	2087883a 	add	r3,r4,r2
  8034bc:	00801004 	movi	r2,64
  8034c0:	38800526 	beq	r7,r2,8034d8 <__pack_f+0xa0>
  8034c4:	31800fc4 	addi	r6,r6,63
  8034c8:	30000716 	blt	r6,zero,8034e8 <__pack_f+0xb0>
  8034cc:	300490ba 	slli	r2,r6,2
  8034d0:	100cd27a 	srli	r6,r2,9
  8034d4:	003fe406 	br	803468 <__pack_f+0x30>
  8034d8:	3080200c 	andi	r2,r6,128
  8034dc:	103ffa26 	beq	r2,zero,8034c8 <__pack_f+0x90>
  8034e0:	31cd883a 	add	r6,r6,r7
  8034e4:	003ff806 	br	8034c8 <__pack_f+0x90>
  8034e8:	300cd07a 	srli	r6,r6,1
  8034ec:	18c00044 	addi	r3,r3,1
  8034f0:	003ff606 	br	8034cc <__pack_f+0x94>
  8034f4:	000d883a 	mov	r6,zero
  8034f8:	00ffffc4 	movi	r3,-1
  8034fc:	003fda06 	br	803468 <__pack_f+0x30>
  803500:	31800434 	orhi	r6,r6,16
  803504:	00802034 	movhi	r2,128
  803508:	10bfffc4 	addi	r2,r2,-1
  80350c:	308c703a 	and	r6,r6,r2
  803510:	00ffffc4 	movi	r3,-1
  803514:	003fd406 	br	803468 <__pack_f+0x30>
  803518:	1109c83a 	sub	r4,r2,r4
  80351c:	00800644 	movi	r2,25
  803520:	11001216 	blt	r2,r4,80356c <__pack_f+0x134>
  803524:	3904983a 	sll	r2,r7,r4
  803528:	3106d83a 	srl	r3,r6,r4
  80352c:	10bfffc4 	addi	r2,r2,-1
  803530:	3084703a 	and	r2,r6,r2
  803534:	1004c03a 	cmpne	r2,r2,zero
  803538:	1886b03a 	or	r3,r3,r2
  80353c:	19001fcc 	andi	r4,r3,127
  803540:	00801004 	movi	r2,64
  803544:	20800c26 	beq	r4,r2,803578 <__pack_f+0x140>
  803548:	18c00fc4 	addi	r3,r3,63
  80354c:	00900034 	movhi	r2,16384
  803550:	10bfffc4 	addi	r2,r2,-1
  803554:	180cd1fa 	srli	r6,r3,7
  803558:	10c7803a 	cmpltu	r3,r2,r3
  80355c:	00802034 	movhi	r2,128
  803560:	10bfffc4 	addi	r2,r2,-1
  803564:	308c703a 	and	r6,r6,r2
  803568:	003fbf06 	br	803468 <__pack_f+0x30>
  80356c:	0007883a 	mov	r3,zero
  803570:	000d883a 	mov	r6,zero
  803574:	003ff906 	br	80355c <__pack_f+0x124>
  803578:	1880200c 	andi	r2,r3,128
  80357c:	10000126 	beq	r2,zero,803584 <__pack_f+0x14c>
  803580:	1907883a 	add	r3,r3,r4
  803584:	180cd1fa 	srli	r6,r3,7
  803588:	00900034 	movhi	r2,16384
  80358c:	10bfffc4 	addi	r2,r2,-1
  803590:	10c7803a 	cmpltu	r3,r2,r3
  803594:	003ff106 	br	80355c <__pack_f+0x124>

00803598 <__unpack_f>:
  803598:	21800017 	ldw	r6,0(r4)
  80359c:	00c02034 	movhi	r3,128
  8035a0:	18ffffc4 	addi	r3,r3,-1
  8035a4:	3004d5fa 	srli	r2,r6,23
  8035a8:	3008d7fa 	srli	r4,r6,31
  8035ac:	30ce703a 	and	r7,r6,r3
  8035b0:	10c03fcc 	andi	r3,r2,255
  8035b4:	29000115 	stw	r4,4(r5)
  8035b8:	1800131e 	bne	r3,zero,803608 <__unpack_f+0x70>
  8035bc:	38000f26 	beq	r7,zero,8035fc <__unpack_f+0x64>
  8035c0:	380691fa 	slli	r3,r7,7
  8035c4:	01bfe084 	movi	r6,-126
  8035c8:	008000c4 	movi	r2,3
  8035cc:	01100034 	movhi	r4,16384
  8035d0:	213fffc4 	addi	r4,r4,-1
  8035d4:	28800015 	stw	r2,0(r5)
  8035d8:	29800215 	stw	r6,8(r5)
  8035dc:	20c00536 	bltu	r4,r3,8035f4 <__unpack_f+0x5c>
  8035e0:	3005883a 	mov	r2,r6
  8035e4:	18c7883a 	add	r3,r3,r3
  8035e8:	10bfffc4 	addi	r2,r2,-1
  8035ec:	20fffd2e 	bgeu	r4,r3,8035e4 <__unpack_f+0x4c>
  8035f0:	28800215 	stw	r2,8(r5)
  8035f4:	28c00315 	stw	r3,12(r5)
  8035f8:	f800283a 	ret
  8035fc:	00800084 	movi	r2,2
  803600:	28800015 	stw	r2,0(r5)
  803604:	f800283a 	ret
  803608:	00803fc4 	movi	r2,255
  80360c:	18800826 	beq	r3,r2,803630 <__unpack_f+0x98>
  803610:	380491fa 	slli	r2,r7,7
  803614:	18ffe044 	addi	r3,r3,-127
  803618:	28c00215 	stw	r3,8(r5)
  80361c:	10900034 	orhi	r2,r2,16384
  803620:	28800315 	stw	r2,12(r5)
  803624:	008000c4 	movi	r2,3
  803628:	28800015 	stw	r2,0(r5)
  80362c:	f800283a 	ret
  803630:	3800031e 	bne	r7,zero,803640 <__unpack_f+0xa8>
  803634:	00800104 	movi	r2,4
  803638:	28800015 	stw	r2,0(r5)
  80363c:	f800283a 	ret
  803640:	3080042c 	andhi	r2,r6,16
  803644:	10000426 	beq	r2,zero,803658 <__unpack_f+0xc0>
  803648:	00800044 	movi	r2,1
  80364c:	28800015 	stw	r2,0(r5)
  803650:	29c00315 	stw	r7,12(r5)
  803654:	f800283a 	ret
  803658:	28000015 	stw	zero,0(r5)
  80365c:	003ffc06 	br	803650 <__unpack_f+0xb8>

00803660 <__fpcmp_parts_f>:
  803660:	21800017 	ldw	r6,0(r4)
  803664:	00c00044 	movi	r3,1
  803668:	19800a2e 	bgeu	r3,r6,803694 <__fpcmp_parts_f+0x34>
  80366c:	28800017 	ldw	r2,0(r5)
  803670:	1880082e 	bgeu	r3,r2,803694 <__fpcmp_parts_f+0x34>
  803674:	00c00104 	movi	r3,4
  803678:	30c01e26 	beq	r6,r3,8036f4 <__fpcmp_parts_f+0x94>
  80367c:	10c01a26 	beq	r2,r3,8036e8 <__fpcmp_parts_f+0x88>
  803680:	00c00084 	movi	r3,2
  803684:	30c00526 	beq	r6,r3,80369c <__fpcmp_parts_f+0x3c>
  803688:	10c0071e 	bne	r2,r3,8036a8 <__fpcmp_parts_f+0x48>
  80368c:	20800117 	ldw	r2,4(r4)
  803690:	1000091e 	bne	r2,zero,8036b8 <__fpcmp_parts_f+0x58>
  803694:	00800044 	movi	r2,1
  803698:	f800283a 	ret
  80369c:	10c0121e 	bne	r2,r3,8036e8 <__fpcmp_parts_f+0x88>
  8036a0:	0005883a 	mov	r2,zero
  8036a4:	f800283a 	ret
  8036a8:	20c00117 	ldw	r3,4(r4)
  8036ac:	28800117 	ldw	r2,4(r5)
  8036b0:	18800326 	beq	r3,r2,8036c0 <__fpcmp_parts_f+0x60>
  8036b4:	183ff726 	beq	r3,zero,803694 <__fpcmp_parts_f+0x34>
  8036b8:	00bfffc4 	movi	r2,-1
  8036bc:	f800283a 	ret
  8036c0:	21800217 	ldw	r6,8(r4)
  8036c4:	28800217 	ldw	r2,8(r5)
  8036c8:	11bffa16 	blt	r2,r6,8036b4 <__fpcmp_parts_f+0x54>
  8036cc:	30800416 	blt	r6,r2,8036e0 <__fpcmp_parts_f+0x80>
  8036d0:	21000317 	ldw	r4,12(r4)
  8036d4:	29400317 	ldw	r5,12(r5)
  8036d8:	293ff636 	bltu	r5,r4,8036b4 <__fpcmp_parts_f+0x54>
  8036dc:	217ff02e 	bgeu	r4,r5,8036a0 <__fpcmp_parts_f+0x40>
  8036e0:	183fec1e 	bne	r3,zero,803694 <__fpcmp_parts_f+0x34>
  8036e4:	003ff406 	br	8036b8 <__fpcmp_parts_f+0x58>
  8036e8:	28800117 	ldw	r2,4(r5)
  8036ec:	103fe91e 	bne	r2,zero,803694 <__fpcmp_parts_f+0x34>
  8036f0:	003ff106 	br	8036b8 <__fpcmp_parts_f+0x58>
  8036f4:	11bfe51e 	bne	r2,r6,80368c <__fpcmp_parts_f+0x2c>
  8036f8:	28c00117 	ldw	r3,4(r5)
  8036fc:	20800117 	ldw	r2,4(r4)
  803700:	1885c83a 	sub	r2,r3,r2
  803704:	f800283a 	ret

00803708 <__make_fp>:
  803708:	defffb04 	addi	sp,sp,-20
  80370c:	d9000015 	stw	r4,0(sp)
  803710:	d809883a 	mov	r4,sp
  803714:	dfc00415 	stw	ra,16(sp)
  803718:	d9400115 	stw	r5,4(sp)
  80371c:	d9800215 	stw	r6,8(sp)
  803720:	d9c00315 	stw	r7,12(sp)
  803724:	08034380 	call	803438 <__pack_f>
  803728:	dfc00417 	ldw	ra,16(sp)
  80372c:	dec00504 	addi	sp,sp,20
  803730:	f800283a 	ret

00803734 <__pack_d>:
  803734:	20c00017 	ldw	r3,0(r4)
  803738:	defffd04 	addi	sp,sp,-12
  80373c:	dc000015 	stw	r16,0(sp)
  803740:	dc800215 	stw	r18,8(sp)
  803744:	dc400115 	stw	r17,4(sp)
  803748:	00800044 	movi	r2,1
  80374c:	22000317 	ldw	r8,12(r4)
  803750:	001f883a 	mov	r15,zero
  803754:	22400417 	ldw	r9,16(r4)
  803758:	24000117 	ldw	r16,4(r4)
  80375c:	10c0552e 	bgeu	r2,r3,8038b4 <__pack_d+0x180>
  803760:	00800104 	movi	r2,4
  803764:	18804f26 	beq	r3,r2,8038a4 <__pack_d+0x170>
  803768:	00800084 	movi	r2,2
  80376c:	18800226 	beq	r3,r2,803778 <__pack_d+0x44>
  803770:	4244b03a 	or	r2,r8,r9
  803774:	10001a1e 	bne	r2,zero,8037e0 <__pack_d+0xac>
  803778:	000d883a 	mov	r6,zero
  80377c:	000f883a 	mov	r7,zero
  803780:	0011883a 	mov	r8,zero
  803784:	00800434 	movhi	r2,16
  803788:	10bfffc4 	addi	r2,r2,-1
  80378c:	301d883a 	mov	r14,r6
  803790:	3884703a 	and	r2,r7,r2
  803794:	400a953a 	slli	r5,r8,20
  803798:	79bffc2c 	andhi	r6,r15,65520
  80379c:	308cb03a 	or	r6,r6,r2
  8037a0:	00e00434 	movhi	r3,32784
  8037a4:	18ffffc4 	addi	r3,r3,-1
  8037a8:	800497fa 	slli	r2,r16,31
  8037ac:	30c6703a 	and	r3,r6,r3
  8037b0:	1946b03a 	or	r3,r3,r5
  8037b4:	01600034 	movhi	r5,32768
  8037b8:	297fffc4 	addi	r5,r5,-1
  8037bc:	194a703a 	and	r5,r3,r5
  8037c0:	288ab03a 	or	r5,r5,r2
  8037c4:	2807883a 	mov	r3,r5
  8037c8:	7005883a 	mov	r2,r14
  8037cc:	dc800217 	ldw	r18,8(sp)
  8037d0:	dc400117 	ldw	r17,4(sp)
  8037d4:	dc000017 	ldw	r16,0(sp)
  8037d8:	dec00304 	addi	sp,sp,12
  8037dc:	f800283a 	ret
  8037e0:	21000217 	ldw	r4,8(r4)
  8037e4:	00bf0084 	movi	r2,-1022
  8037e8:	20803f16 	blt	r4,r2,8038e8 <__pack_d+0x1b4>
  8037ec:	0080ffc4 	movi	r2,1023
  8037f0:	11002c16 	blt	r2,r4,8038a4 <__pack_d+0x170>
  8037f4:	00803fc4 	movi	r2,255
  8037f8:	408c703a 	and	r6,r8,r2
  8037fc:	00802004 	movi	r2,128
  803800:	0007883a 	mov	r3,zero
  803804:	000f883a 	mov	r7,zero
  803808:	2280ffc4 	addi	r10,r4,1023
  80380c:	30801e26 	beq	r6,r2,803888 <__pack_d+0x154>
  803810:	00801fc4 	movi	r2,127
  803814:	4089883a 	add	r4,r8,r2
  803818:	220d803a 	cmpltu	r6,r4,r8
  80381c:	324d883a 	add	r6,r6,r9
  803820:	2011883a 	mov	r8,r4
  803824:	3013883a 	mov	r9,r6
  803828:	00880034 	movhi	r2,8192
  80382c:	10bfffc4 	addi	r2,r2,-1
  803830:	12400d36 	bltu	r2,r9,803868 <__pack_d+0x134>
  803834:	4804963a 	slli	r2,r9,24
  803838:	400cd23a 	srli	r6,r8,8
  80383c:	480ed23a 	srli	r7,r9,8
  803840:	013fffc4 	movi	r4,-1
  803844:	118cb03a 	or	r6,r2,r6
  803848:	01400434 	movhi	r5,16
  80384c:	297fffc4 	addi	r5,r5,-1
  803850:	3104703a 	and	r2,r6,r4
  803854:	3946703a 	and	r3,r7,r5
  803858:	5201ffcc 	andi	r8,r10,2047
  80385c:	100d883a 	mov	r6,r2
  803860:	180f883a 	mov	r7,r3
  803864:	003fc706 	br	803784 <__pack_d+0x50>
  803868:	480897fa 	slli	r4,r9,31
  80386c:	4004d07a 	srli	r2,r8,1
  803870:	4806d07a 	srli	r3,r9,1
  803874:	52800044 	addi	r10,r10,1
  803878:	2084b03a 	or	r2,r4,r2
  80387c:	1011883a 	mov	r8,r2
  803880:	1813883a 	mov	r9,r3
  803884:	003feb06 	br	803834 <__pack_d+0x100>
  803888:	383fe11e 	bne	r7,zero,803810 <__pack_d+0xdc>
  80388c:	01004004 	movi	r4,256
  803890:	4104703a 	and	r2,r8,r4
  803894:	10c4b03a 	or	r2,r2,r3
  803898:	103fe326 	beq	r2,zero,803828 <__pack_d+0xf4>
  80389c:	3005883a 	mov	r2,r6
  8038a0:	003fdc06 	br	803814 <__pack_d+0xe0>
  8038a4:	000d883a 	mov	r6,zero
  8038a8:	000f883a 	mov	r7,zero
  8038ac:	0201ffc4 	movi	r8,2047
  8038b0:	003fb406 	br	803784 <__pack_d+0x50>
  8038b4:	0005883a 	mov	r2,zero
  8038b8:	00c00234 	movhi	r3,8
  8038bc:	408cb03a 	or	r6,r8,r2
  8038c0:	48ceb03a 	or	r7,r9,r3
  8038c4:	013fffc4 	movi	r4,-1
  8038c8:	01400434 	movhi	r5,16
  8038cc:	297fffc4 	addi	r5,r5,-1
  8038d0:	3104703a 	and	r2,r6,r4
  8038d4:	3946703a 	and	r3,r7,r5
  8038d8:	100d883a 	mov	r6,r2
  8038dc:	180f883a 	mov	r7,r3
  8038e0:	0201ffc4 	movi	r8,2047
  8038e4:	003fa706 	br	803784 <__pack_d+0x50>
  8038e8:	1109c83a 	sub	r4,r2,r4
  8038ec:	00800e04 	movi	r2,56
  8038f0:	11004316 	blt	r2,r4,803a00 <__pack_d+0x2cc>
  8038f4:	21fff804 	addi	r7,r4,-32
  8038f8:	38004516 	blt	r7,zero,803a10 <__pack_d+0x2dc>
  8038fc:	49d8d83a 	srl	r12,r9,r7
  803900:	001b883a 	mov	r13,zero
  803904:	0023883a 	mov	r17,zero
  803908:	01400044 	movi	r5,1
  80390c:	0025883a 	mov	r18,zero
  803910:	38004716 	blt	r7,zero,803a30 <__pack_d+0x2fc>
  803914:	29d6983a 	sll	r11,r5,r7
  803918:	0015883a 	mov	r10,zero
  80391c:	00bfffc4 	movi	r2,-1
  803920:	5089883a 	add	r4,r10,r2
  803924:	588b883a 	add	r5,r11,r2
  803928:	228d803a 	cmpltu	r6,r4,r10
  80392c:	314b883a 	add	r5,r6,r5
  803930:	4104703a 	and	r2,r8,r4
  803934:	4946703a 	and	r3,r9,r5
  803938:	10c4b03a 	or	r2,r2,r3
  80393c:	10000226 	beq	r2,zero,803948 <__pack_d+0x214>
  803940:	04400044 	movi	r17,1
  803944:	0025883a 	mov	r18,zero
  803948:	00803fc4 	movi	r2,255
  80394c:	644eb03a 	or	r7,r12,r17
  803950:	3892703a 	and	r9,r7,r2
  803954:	00802004 	movi	r2,128
  803958:	6c90b03a 	or	r8,r13,r18
  80395c:	0015883a 	mov	r10,zero
  803960:	48801626 	beq	r9,r2,8039bc <__pack_d+0x288>
  803964:	01001fc4 	movi	r4,127
  803968:	3905883a 	add	r2,r7,r4
  80396c:	11cd803a 	cmpltu	r6,r2,r7
  803970:	320d883a 	add	r6,r6,r8
  803974:	100f883a 	mov	r7,r2
  803978:	00840034 	movhi	r2,4096
  80397c:	10bfffc4 	addi	r2,r2,-1
  803980:	3011883a 	mov	r8,r6
  803984:	0007883a 	mov	r3,zero
  803988:	11801b36 	bltu	r2,r6,8039f8 <__pack_d+0x2c4>
  80398c:	4004963a 	slli	r2,r8,24
  803990:	3808d23a 	srli	r4,r7,8
  803994:	400ad23a 	srli	r5,r8,8
  803998:	1813883a 	mov	r9,r3
  80399c:	1108b03a 	or	r4,r2,r4
  8039a0:	00bfffc4 	movi	r2,-1
  8039a4:	00c00434 	movhi	r3,16
  8039a8:	18ffffc4 	addi	r3,r3,-1
  8039ac:	208c703a 	and	r6,r4,r2
  8039b0:	28ce703a 	and	r7,r5,r3
  8039b4:	4a01ffcc 	andi	r8,r9,2047
  8039b8:	003f7206 	br	803784 <__pack_d+0x50>
  8039bc:	503fe91e 	bne	r10,zero,803964 <__pack_d+0x230>
  8039c0:	01004004 	movi	r4,256
  8039c4:	3904703a 	and	r2,r7,r4
  8039c8:	0007883a 	mov	r3,zero
  8039cc:	10c4b03a 	or	r2,r2,r3
  8039d0:	10000626 	beq	r2,zero,8039ec <__pack_d+0x2b8>
  8039d4:	3a45883a 	add	r2,r7,r9
  8039d8:	11cd803a 	cmpltu	r6,r2,r7
  8039dc:	320d883a 	add	r6,r6,r8
  8039e0:	100f883a 	mov	r7,r2
  8039e4:	3011883a 	mov	r8,r6
  8039e8:	0007883a 	mov	r3,zero
  8039ec:	00840034 	movhi	r2,4096
  8039f0:	10bfffc4 	addi	r2,r2,-1
  8039f4:	123fe52e 	bgeu	r2,r8,80398c <__pack_d+0x258>
  8039f8:	00c00044 	movi	r3,1
  8039fc:	003fe306 	br	80398c <__pack_d+0x258>
  803a00:	0009883a 	mov	r4,zero
  803a04:	0013883a 	mov	r9,zero
  803a08:	000b883a 	mov	r5,zero
  803a0c:	003fe406 	br	8039a0 <__pack_d+0x26c>
  803a10:	4a47883a 	add	r3,r9,r9
  803a14:	008007c4 	movi	r2,31
  803a18:	1105c83a 	sub	r2,r2,r4
  803a1c:	1886983a 	sll	r3,r3,r2
  803a20:	4118d83a 	srl	r12,r8,r4
  803a24:	491ad83a 	srl	r13,r9,r4
  803a28:	1b18b03a 	or	r12,r3,r12
  803a2c:	003fb506 	br	803904 <__pack_d+0x1d0>
  803a30:	2806d07a 	srli	r3,r5,1
  803a34:	008007c4 	movi	r2,31
  803a38:	1105c83a 	sub	r2,r2,r4
  803a3c:	1896d83a 	srl	r11,r3,r2
  803a40:	2914983a 	sll	r10,r5,r4
  803a44:	003fb506 	br	80391c <__pack_d+0x1e8>

00803a48 <__unpack_d>:
  803a48:	20c00117 	ldw	r3,4(r4)
  803a4c:	22400017 	ldw	r9,0(r4)
  803a50:	00800434 	movhi	r2,16
  803a54:	10bfffc4 	addi	r2,r2,-1
  803a58:	1808d53a 	srli	r4,r3,20
  803a5c:	180cd7fa 	srli	r6,r3,31
  803a60:	1894703a 	and	r10,r3,r2
  803a64:	2201ffcc 	andi	r8,r4,2047
  803a68:	281b883a 	mov	r13,r5
  803a6c:	4817883a 	mov	r11,r9
  803a70:	29800115 	stw	r6,4(r5)
  803a74:	5019883a 	mov	r12,r10
  803a78:	40001e1e 	bne	r8,zero,803af4 <__unpack_d+0xac>
  803a7c:	4a84b03a 	or	r2,r9,r10
  803a80:	10001926 	beq	r2,zero,803ae8 <__unpack_d+0xa0>
  803a84:	4804d63a 	srli	r2,r9,24
  803a88:	500c923a 	slli	r6,r10,8
  803a8c:	013f0084 	movi	r4,-1022
  803a90:	00c40034 	movhi	r3,4096
  803a94:	18ffffc4 	addi	r3,r3,-1
  803a98:	118cb03a 	or	r6,r2,r6
  803a9c:	008000c4 	movi	r2,3
  803aa0:	480a923a 	slli	r5,r9,8
  803aa4:	68800015 	stw	r2,0(r13)
  803aa8:	69000215 	stw	r4,8(r13)
  803aac:	19800b36 	bltu	r3,r6,803adc <__unpack_d+0x94>
  803ab0:	200f883a 	mov	r7,r4
  803ab4:	1811883a 	mov	r8,r3
  803ab8:	2945883a 	add	r2,r5,r5
  803abc:	1149803a 	cmpltu	r4,r2,r5
  803ac0:	3187883a 	add	r3,r6,r6
  803ac4:	20c9883a 	add	r4,r4,r3
  803ac8:	100b883a 	mov	r5,r2
  803acc:	200d883a 	mov	r6,r4
  803ad0:	39ffffc4 	addi	r7,r7,-1
  803ad4:	413ff82e 	bgeu	r8,r4,803ab8 <__unpack_d+0x70>
  803ad8:	69c00215 	stw	r7,8(r13)
  803adc:	69800415 	stw	r6,16(r13)
  803ae0:	69400315 	stw	r5,12(r13)
  803ae4:	f800283a 	ret
  803ae8:	00800084 	movi	r2,2
  803aec:	28800015 	stw	r2,0(r5)
  803af0:	f800283a 	ret
  803af4:	0081ffc4 	movi	r2,2047
  803af8:	40800f26 	beq	r8,r2,803b38 <__unpack_d+0xf0>
  803afc:	480cd63a 	srli	r6,r9,24
  803b00:	5006923a 	slli	r3,r10,8
  803b04:	4804923a 	slli	r2,r9,8
  803b08:	0009883a 	mov	r4,zero
  803b0c:	30c6b03a 	or	r3,r6,r3
  803b10:	01440034 	movhi	r5,4096
  803b14:	110cb03a 	or	r6,r2,r4
  803b18:	423f0044 	addi	r8,r8,-1023
  803b1c:	194eb03a 	or	r7,r3,r5
  803b20:	008000c4 	movi	r2,3
  803b24:	69c00415 	stw	r7,16(r13)
  803b28:	6a000215 	stw	r8,8(r13)
  803b2c:	68800015 	stw	r2,0(r13)
  803b30:	69800315 	stw	r6,12(r13)
  803b34:	f800283a 	ret
  803b38:	4a84b03a 	or	r2,r9,r10
  803b3c:	1000031e 	bne	r2,zero,803b4c <__unpack_d+0x104>
  803b40:	00800104 	movi	r2,4
  803b44:	28800015 	stw	r2,0(r5)
  803b48:	f800283a 	ret
  803b4c:	0009883a 	mov	r4,zero
  803b50:	01400234 	movhi	r5,8
  803b54:	4904703a 	and	r2,r9,r4
  803b58:	5146703a 	and	r3,r10,r5
  803b5c:	10c4b03a 	or	r2,r2,r3
  803b60:	10000526 	beq	r2,zero,803b78 <__unpack_d+0x130>
  803b64:	00800044 	movi	r2,1
  803b68:	68800015 	stw	r2,0(r13)
  803b6c:	6b000415 	stw	r12,16(r13)
  803b70:	6ac00315 	stw	r11,12(r13)
  803b74:	f800283a 	ret
  803b78:	68000015 	stw	zero,0(r13)
  803b7c:	003ffb06 	br	803b6c <__unpack_d+0x124>

00803b80 <__fpcmp_parts_d>:
  803b80:	21800017 	ldw	r6,0(r4)
  803b84:	00c00044 	movi	r3,1
  803b88:	19800a2e 	bgeu	r3,r6,803bb4 <__fpcmp_parts_d+0x34>
  803b8c:	28800017 	ldw	r2,0(r5)
  803b90:	1880082e 	bgeu	r3,r2,803bb4 <__fpcmp_parts_d+0x34>
  803b94:	00c00104 	movi	r3,4
  803b98:	30c02626 	beq	r6,r3,803c34 <__fpcmp_parts_d+0xb4>
  803b9c:	10c02226 	beq	r2,r3,803c28 <__fpcmp_parts_d+0xa8>
  803ba0:	00c00084 	movi	r3,2
  803ba4:	30c00526 	beq	r6,r3,803bbc <__fpcmp_parts_d+0x3c>
  803ba8:	10c0071e 	bne	r2,r3,803bc8 <__fpcmp_parts_d+0x48>
  803bac:	20800117 	ldw	r2,4(r4)
  803bb0:	1000091e 	bne	r2,zero,803bd8 <__fpcmp_parts_d+0x58>
  803bb4:	00800044 	movi	r2,1
  803bb8:	f800283a 	ret
  803bbc:	10c01a1e 	bne	r2,r3,803c28 <__fpcmp_parts_d+0xa8>
  803bc0:	0005883a 	mov	r2,zero
  803bc4:	f800283a 	ret
  803bc8:	22000117 	ldw	r8,4(r4)
  803bcc:	28800117 	ldw	r2,4(r5)
  803bd0:	40800326 	beq	r8,r2,803be0 <__fpcmp_parts_d+0x60>
  803bd4:	403ff726 	beq	r8,zero,803bb4 <__fpcmp_parts_d+0x34>
  803bd8:	00bfffc4 	movi	r2,-1
  803bdc:	f800283a 	ret
  803be0:	20c00217 	ldw	r3,8(r4)
  803be4:	28800217 	ldw	r2,8(r5)
  803be8:	10fffa16 	blt	r2,r3,803bd4 <__fpcmp_parts_d+0x54>
  803bec:	18800916 	blt	r3,r2,803c14 <__fpcmp_parts_d+0x94>
  803bf0:	21c00417 	ldw	r7,16(r4)
  803bf4:	28c00417 	ldw	r3,16(r5)
  803bf8:	21800317 	ldw	r6,12(r4)
  803bfc:	28800317 	ldw	r2,12(r5)
  803c00:	19fff436 	bltu	r3,r7,803bd4 <__fpcmp_parts_d+0x54>
  803c04:	38c00526 	beq	r7,r3,803c1c <__fpcmp_parts_d+0x9c>
  803c08:	38c00236 	bltu	r7,r3,803c14 <__fpcmp_parts_d+0x94>
  803c0c:	19ffec1e 	bne	r3,r7,803bc0 <__fpcmp_parts_d+0x40>
  803c10:	30bfeb2e 	bgeu	r6,r2,803bc0 <__fpcmp_parts_d+0x40>
  803c14:	403fe71e 	bne	r8,zero,803bb4 <__fpcmp_parts_d+0x34>
  803c18:	003fef06 	br	803bd8 <__fpcmp_parts_d+0x58>
  803c1c:	11bffa2e 	bgeu	r2,r6,803c08 <__fpcmp_parts_d+0x88>
  803c20:	403fe426 	beq	r8,zero,803bb4 <__fpcmp_parts_d+0x34>
  803c24:	003fec06 	br	803bd8 <__fpcmp_parts_d+0x58>
  803c28:	28800117 	ldw	r2,4(r5)
  803c2c:	103fe11e 	bne	r2,zero,803bb4 <__fpcmp_parts_d+0x34>
  803c30:	003fe906 	br	803bd8 <__fpcmp_parts_d+0x58>
  803c34:	11bfdd1e 	bne	r2,r6,803bac <__fpcmp_parts_d+0x2c>
  803c38:	28c00117 	ldw	r3,4(r5)
  803c3c:	20800117 	ldw	r2,4(r4)
  803c40:	1885c83a 	sub	r2,r3,r2
  803c44:	f800283a 	ret

00803c48 <__errno>:
  803c48:	00c02074 	movhi	r3,129
  803c4c:	18cf8304 	addi	r3,r3,15884
  803c50:	18800017 	ldw	r2,0(r3)
  803c54:	f800283a 	ret

00803c58 <printf>:
  803c58:	defffb04 	addi	sp,sp,-20
  803c5c:	dfc00115 	stw	ra,4(sp)
  803c60:	d9400215 	stw	r5,8(sp)
  803c64:	d9800315 	stw	r6,12(sp)
  803c68:	d9c00415 	stw	r7,16(sp)
  803c6c:	00802074 	movhi	r2,129
  803c70:	108f8304 	addi	r2,r2,15884
  803c74:	10c00017 	ldw	r3,0(r2)
  803c78:	200b883a 	mov	r5,r4
  803c7c:	d8800204 	addi	r2,sp,8
  803c80:	19000217 	ldw	r4,8(r3)
  803c84:	100d883a 	mov	r6,r2
  803c88:	d8800015 	stw	r2,0(sp)
  803c8c:	0805dd00 	call	805dd0 <__vfprintf_internal>
  803c90:	dfc00117 	ldw	ra,4(sp)
  803c94:	dec00504 	addi	sp,sp,20
  803c98:	f800283a 	ret

00803c9c <_printf_r>:
  803c9c:	defffc04 	addi	sp,sp,-16
  803ca0:	dfc00115 	stw	ra,4(sp)
  803ca4:	d9800215 	stw	r6,8(sp)
  803ca8:	d9c00315 	stw	r7,12(sp)
  803cac:	280d883a 	mov	r6,r5
  803cb0:	21400217 	ldw	r5,8(r4)
  803cb4:	d8c00204 	addi	r3,sp,8
  803cb8:	180f883a 	mov	r7,r3
  803cbc:	d8c00015 	stw	r3,0(sp)
  803cc0:	0803f240 	call	803f24 <___vfprintf_internal_r>
  803cc4:	dfc00117 	ldw	ra,4(sp)
  803cc8:	dec00404 	addi	sp,sp,16
  803ccc:	f800283a 	ret

00803cd0 <_puts_r>:
  803cd0:	defff604 	addi	sp,sp,-40
  803cd4:	dc400715 	stw	r17,28(sp)
  803cd8:	2023883a 	mov	r17,r4
  803cdc:	2809883a 	mov	r4,r5
  803ce0:	dfc00915 	stw	ra,36(sp)
  803ce4:	dcc00815 	stw	r19,32(sp)
  803ce8:	2827883a 	mov	r19,r5
  803cec:	0803e580 	call	803e58 <strlen>
  803cf0:	89400217 	ldw	r5,8(r17)
  803cf4:	00c02074 	movhi	r3,129
  803cf8:	18c7c204 	addi	r3,r3,7944
  803cfc:	01c00044 	movi	r7,1
  803d00:	12000044 	addi	r8,r2,1
  803d04:	d8c00515 	stw	r3,20(sp)
  803d08:	d9c00615 	stw	r7,24(sp)
  803d0c:	d8c00304 	addi	r3,sp,12
  803d10:	01c00084 	movi	r7,2
  803d14:	8809883a 	mov	r4,r17
  803d18:	d80d883a 	mov	r6,sp
  803d1c:	d8c00015 	stw	r3,0(sp)
  803d20:	dcc00315 	stw	r19,12(sp)
  803d24:	da000215 	stw	r8,8(sp)
  803d28:	d9c00115 	stw	r7,4(sp)
  803d2c:	d8800415 	stw	r2,16(sp)
  803d30:	080802c0 	call	80802c <__sfvwrite_r>
  803d34:	00ffffc4 	movi	r3,-1
  803d38:	10000626 	beq	r2,zero,803d54 <_puts_r+0x84>
  803d3c:	1805883a 	mov	r2,r3
  803d40:	dfc00917 	ldw	ra,36(sp)
  803d44:	dcc00817 	ldw	r19,32(sp)
  803d48:	dc400717 	ldw	r17,28(sp)
  803d4c:	dec00a04 	addi	sp,sp,40
  803d50:	f800283a 	ret
  803d54:	00c00284 	movi	r3,10
  803d58:	1805883a 	mov	r2,r3
  803d5c:	dfc00917 	ldw	ra,36(sp)
  803d60:	dcc00817 	ldw	r19,32(sp)
  803d64:	dc400717 	ldw	r17,28(sp)
  803d68:	dec00a04 	addi	sp,sp,40
  803d6c:	f800283a 	ret

00803d70 <puts>:
  803d70:	00802074 	movhi	r2,129
  803d74:	108f8304 	addi	r2,r2,15884
  803d78:	200b883a 	mov	r5,r4
  803d7c:	11000017 	ldw	r4,0(r2)
  803d80:	0803cd01 	jmpi	803cd0 <_puts_r>

00803d84 <sprintf>:
  803d84:	deffe504 	addi	sp,sp,-108
  803d88:	2013883a 	mov	r9,r4
  803d8c:	dfc01815 	stw	ra,96(sp)
  803d90:	d9801915 	stw	r6,100(sp)
  803d94:	d9c01a15 	stw	r7,104(sp)
  803d98:	d8801904 	addi	r2,sp,100
  803d9c:	d8800015 	stw	r2,0(sp)
  803da0:	00802074 	movhi	r2,129
  803da4:	108f8304 	addi	r2,r2,15884
  803da8:	11000017 	ldw	r4,0(r2)
  803dac:	d9c00017 	ldw	r7,0(sp)
  803db0:	00808204 	movi	r2,520
  803db4:	00e00034 	movhi	r3,32768
  803db8:	18ffffc4 	addi	r3,r3,-1
  803dbc:	280d883a 	mov	r6,r5
  803dc0:	d880040d 	sth	r2,16(sp)
  803dc4:	d9400104 	addi	r5,sp,4
  803dc8:	00bfffc4 	movi	r2,-1
  803dcc:	d8c00615 	stw	r3,24(sp)
  803dd0:	d8c00315 	stw	r3,12(sp)
  803dd4:	da400515 	stw	r9,20(sp)
  803dd8:	d880048d 	sth	r2,18(sp)
  803ddc:	da400115 	stw	r9,4(sp)
  803de0:	0803f240 	call	803f24 <___vfprintf_internal_r>
  803de4:	d8c00117 	ldw	r3,4(sp)
  803de8:	18000005 	stb	zero,0(r3)
  803dec:	dfc01817 	ldw	ra,96(sp)
  803df0:	dec01b04 	addi	sp,sp,108
  803df4:	f800283a 	ret

00803df8 <_sprintf_r>:
  803df8:	deffe604 	addi	sp,sp,-104
  803dfc:	2813883a 	mov	r9,r5
  803e00:	dfc01815 	stw	ra,96(sp)
  803e04:	d9c01915 	stw	r7,100(sp)
  803e08:	d8801904 	addi	r2,sp,100
  803e0c:	d8800015 	stw	r2,0(sp)
  803e10:	100f883a 	mov	r7,r2
  803e14:	00808204 	movi	r2,520
  803e18:	00e00034 	movhi	r3,32768
  803e1c:	18ffffc4 	addi	r3,r3,-1
  803e20:	d880040d 	sth	r2,16(sp)
  803e24:	d9400104 	addi	r5,sp,4
  803e28:	00bfffc4 	movi	r2,-1
  803e2c:	d8c00615 	stw	r3,24(sp)
  803e30:	d8c00315 	stw	r3,12(sp)
  803e34:	da400515 	stw	r9,20(sp)
  803e38:	d880048d 	sth	r2,18(sp)
  803e3c:	da400115 	stw	r9,4(sp)
  803e40:	0803f240 	call	803f24 <___vfprintf_internal_r>
  803e44:	d8c00117 	ldw	r3,4(sp)
  803e48:	18000005 	stb	zero,0(r3)
  803e4c:	dfc01817 	ldw	ra,96(sp)
  803e50:	dec01a04 	addi	sp,sp,104
  803e54:	f800283a 	ret

00803e58 <strlen>:
  803e58:	208000cc 	andi	r2,r4,3
  803e5c:	2011883a 	mov	r8,r4
  803e60:	1000161e 	bne	r2,zero,803ebc <strlen+0x64>
  803e64:	20c00017 	ldw	r3,0(r4)
  803e68:	017fbff4 	movhi	r5,65279
  803e6c:	297fbfc4 	addi	r5,r5,-257
  803e70:	01e02074 	movhi	r7,32897
  803e74:	39e02004 	addi	r7,r7,-32640
  803e78:	1945883a 	add	r2,r3,r5
  803e7c:	11c4703a 	and	r2,r2,r7
  803e80:	00c6303a 	nor	r3,zero,r3
  803e84:	1886703a 	and	r3,r3,r2
  803e88:	18000c1e 	bne	r3,zero,803ebc <strlen+0x64>
  803e8c:	280d883a 	mov	r6,r5
  803e90:	380b883a 	mov	r5,r7
  803e94:	21000104 	addi	r4,r4,4
  803e98:	20800017 	ldw	r2,0(r4)
  803e9c:	1187883a 	add	r3,r2,r6
  803ea0:	1946703a 	and	r3,r3,r5
  803ea4:	0084303a 	nor	r2,zero,r2
  803ea8:	10c4703a 	and	r2,r2,r3
  803eac:	103ff926 	beq	r2,zero,803e94 <strlen+0x3c>
  803eb0:	20800007 	ldb	r2,0(r4)
  803eb4:	10000326 	beq	r2,zero,803ec4 <strlen+0x6c>
  803eb8:	21000044 	addi	r4,r4,1
  803ebc:	20800007 	ldb	r2,0(r4)
  803ec0:	103ffd1e 	bne	r2,zero,803eb8 <strlen+0x60>
  803ec4:	2205c83a 	sub	r2,r4,r8
  803ec8:	f800283a 	ret

00803ecc <__sprint_r>:
  803ecc:	30800217 	ldw	r2,8(r6)
  803ed0:	defffe04 	addi	sp,sp,-8
  803ed4:	dc000015 	stw	r16,0(sp)
  803ed8:	dfc00115 	stw	ra,4(sp)
  803edc:	3021883a 	mov	r16,r6
  803ee0:	0007883a 	mov	r3,zero
  803ee4:	1000061e 	bne	r2,zero,803f00 <__sprint_r+0x34>
  803ee8:	1805883a 	mov	r2,r3
  803eec:	30000115 	stw	zero,4(r6)
  803ef0:	dfc00117 	ldw	ra,4(sp)
  803ef4:	dc000017 	ldw	r16,0(sp)
  803ef8:	dec00204 	addi	sp,sp,8
  803efc:	f800283a 	ret
  803f00:	080802c0 	call	80802c <__sfvwrite_r>
  803f04:	1007883a 	mov	r3,r2
  803f08:	1805883a 	mov	r2,r3
  803f0c:	80000115 	stw	zero,4(r16)
  803f10:	80000215 	stw	zero,8(r16)
  803f14:	dfc00117 	ldw	ra,4(sp)
  803f18:	dc000017 	ldw	r16,0(sp)
  803f1c:	dec00204 	addi	sp,sp,8
  803f20:	f800283a 	ret

00803f24 <___vfprintf_internal_r>:
  803f24:	defea404 	addi	sp,sp,-1392
  803f28:	dd815815 	stw	r22,1376(sp)
  803f2c:	dc015215 	stw	r16,1352(sp)
  803f30:	d9c15115 	stw	r7,1348(sp)
  803f34:	dfc15b15 	stw	ra,1388(sp)
  803f38:	df015a15 	stw	fp,1384(sp)
  803f3c:	ddc15915 	stw	r23,1380(sp)
  803f40:	dd415715 	stw	r21,1372(sp)
  803f44:	dd015615 	stw	r20,1368(sp)
  803f48:	dcc15515 	stw	r19,1364(sp)
  803f4c:	dc815415 	stw	r18,1360(sp)
  803f50:	dc415315 	stw	r17,1356(sp)
  803f54:	282d883a 	mov	r22,r5
  803f58:	3021883a 	mov	r16,r6
  803f5c:	d9014f15 	stw	r4,1340(sp)
  803f60:	08086500 	call	808650 <_localeconv_r>
  803f64:	10800017 	ldw	r2,0(r2)
  803f68:	d9c15117 	ldw	r7,1348(sp)
  803f6c:	d8814915 	stw	r2,1316(sp)
  803f70:	d8814f17 	ldw	r2,1340(sp)
  803f74:	10000226 	beq	r2,zero,803f80 <___vfprintf_internal_r+0x5c>
  803f78:	10800e17 	ldw	r2,56(r2)
  803f7c:	10020d26 	beq	r2,zero,8047b4 <___vfprintf_internal_r+0x890>
  803f80:	b080030b 	ldhu	r2,12(r22)
  803f84:	1080020c 	andi	r2,r2,8
  803f88:	10020e26 	beq	r2,zero,8047c4 <___vfprintf_internal_r+0x8a0>
  803f8c:	b0800417 	ldw	r2,16(r22)
  803f90:	10020c26 	beq	r2,zero,8047c4 <___vfprintf_internal_r+0x8a0>
  803f94:	b200030b 	ldhu	r8,12(r22)
  803f98:	00800284 	movi	r2,10
  803f9c:	40c0068c 	andi	r3,r8,26
  803fa0:	18802f1e 	bne	r3,r2,804060 <___vfprintf_internal_r+0x13c>
  803fa4:	b080038f 	ldh	r2,14(r22)
  803fa8:	10002d16 	blt	r2,zero,804060 <___vfprintf_internal_r+0x13c>
  803fac:	b240038b 	ldhu	r9,14(r22)
  803fb0:	b2800717 	ldw	r10,28(r22)
  803fb4:	b2c00917 	ldw	r11,36(r22)
  803fb8:	d9014f17 	ldw	r4,1340(sp)
  803fbc:	dc402904 	addi	r17,sp,164
  803fc0:	d8804004 	addi	r2,sp,256
  803fc4:	00c10004 	movi	r3,1024
  803fc8:	423fff4c 	andi	r8,r8,65533
  803fcc:	800d883a 	mov	r6,r16
  803fd0:	880b883a 	mov	r5,r17
  803fd4:	da002c0d 	sth	r8,176(sp)
  803fd8:	da402c8d 	sth	r9,178(sp)
  803fdc:	da803015 	stw	r10,192(sp)
  803fe0:	dac03215 	stw	r11,200(sp)
  803fe4:	d8802d15 	stw	r2,180(sp)
  803fe8:	d8c02e15 	stw	r3,184(sp)
  803fec:	d8802915 	stw	r2,164(sp)
  803ff0:	d8c02b15 	stw	r3,172(sp)
  803ff4:	d8002f15 	stw	zero,188(sp)
  803ff8:	0803f240 	call	803f24 <___vfprintf_internal_r>
  803ffc:	d8814b15 	stw	r2,1324(sp)
  804000:	10000416 	blt	r2,zero,804014 <___vfprintf_internal_r+0xf0>
  804004:	d9014f17 	ldw	r4,1340(sp)
  804008:	880b883a 	mov	r5,r17
  80400c:	08076fc0 	call	8076fc <_fflush_r>
  804010:	1002321e 	bne	r2,zero,8048dc <___vfprintf_internal_r+0x9b8>
  804014:	d8802c0b 	ldhu	r2,176(sp)
  804018:	1080100c 	andi	r2,r2,64
  80401c:	10000326 	beq	r2,zero,80402c <___vfprintf_internal_r+0x108>
  804020:	b080030b 	ldhu	r2,12(r22)
  804024:	10801014 	ori	r2,r2,64
  804028:	b080030d 	sth	r2,12(r22)
  80402c:	d8814b17 	ldw	r2,1324(sp)
  804030:	dfc15b17 	ldw	ra,1388(sp)
  804034:	df015a17 	ldw	fp,1384(sp)
  804038:	ddc15917 	ldw	r23,1380(sp)
  80403c:	dd815817 	ldw	r22,1376(sp)
  804040:	dd415717 	ldw	r21,1372(sp)
  804044:	dd015617 	ldw	r20,1368(sp)
  804048:	dcc15517 	ldw	r19,1364(sp)
  80404c:	dc815417 	ldw	r18,1360(sp)
  804050:	dc415317 	ldw	r17,1356(sp)
  804054:	dc015217 	ldw	r16,1352(sp)
  804058:	dec15c04 	addi	sp,sp,1392
  80405c:	f800283a 	ret
  804060:	0005883a 	mov	r2,zero
  804064:	0007883a 	mov	r3,zero
  804068:	dd401904 	addi	r21,sp,100
  80406c:	d8814215 	stw	r2,1288(sp)
  804070:	802f883a 	mov	r23,r16
  804074:	d8c14315 	stw	r3,1292(sp)
  804078:	d8014b15 	stw	zero,1324(sp)
  80407c:	d8014815 	stw	zero,1312(sp)
  804080:	d8014415 	stw	zero,1296(sp)
  804084:	d8014715 	stw	zero,1308(sp)
  804088:	dd400c15 	stw	r21,48(sp)
  80408c:	d8000e15 	stw	zero,56(sp)
  804090:	d8000d15 	stw	zero,52(sp)
  804094:	b8800007 	ldb	r2,0(r23)
  804098:	10001926 	beq	r2,zero,804100 <___vfprintf_internal_r+0x1dc>
  80409c:	00c00944 	movi	r3,37
  8040a0:	10c01726 	beq	r2,r3,804100 <___vfprintf_internal_r+0x1dc>
  8040a4:	b821883a 	mov	r16,r23
  8040a8:	00000106 	br	8040b0 <___vfprintf_internal_r+0x18c>
  8040ac:	10c00326 	beq	r2,r3,8040bc <___vfprintf_internal_r+0x198>
  8040b0:	84000044 	addi	r16,r16,1
  8040b4:	80800007 	ldb	r2,0(r16)
  8040b8:	103ffc1e 	bne	r2,zero,8040ac <___vfprintf_internal_r+0x188>
  8040bc:	85e7c83a 	sub	r19,r16,r23
  8040c0:	98000e26 	beq	r19,zero,8040fc <___vfprintf_internal_r+0x1d8>
  8040c4:	dc800e17 	ldw	r18,56(sp)
  8040c8:	dc400d17 	ldw	r17,52(sp)
  8040cc:	008001c4 	movi	r2,7
  8040d0:	94e5883a 	add	r18,r18,r19
  8040d4:	8c400044 	addi	r17,r17,1
  8040d8:	adc00015 	stw	r23,0(r21)
  8040dc:	dc800e15 	stw	r18,56(sp)
  8040e0:	acc00115 	stw	r19,4(r21)
  8040e4:	dc400d15 	stw	r17,52(sp)
  8040e8:	14428b16 	blt	r2,r17,804b18 <___vfprintf_internal_r+0xbf4>
  8040ec:	ad400204 	addi	r21,r21,8
  8040f0:	d9014b17 	ldw	r4,1324(sp)
  8040f4:	24c9883a 	add	r4,r4,r19
  8040f8:	d9014b15 	stw	r4,1324(sp)
  8040fc:	802f883a 	mov	r23,r16
  804100:	b8800007 	ldb	r2,0(r23)
  804104:	10013c26 	beq	r2,zero,8045f8 <___vfprintf_internal_r+0x6d4>
  804108:	bdc00044 	addi	r23,r23,1
  80410c:	d8000405 	stb	zero,16(sp)
  804110:	b8c00007 	ldb	r3,0(r23)
  804114:	04ffffc4 	movi	r19,-1
  804118:	d8014c15 	stw	zero,1328(sp)
  80411c:	d8014a15 	stw	zero,1320(sp)
  804120:	d8c14d15 	stw	r3,1332(sp)
  804124:	bdc00044 	addi	r23,r23,1
  804128:	d9414d17 	ldw	r5,1332(sp)
  80412c:	00801604 	movi	r2,88
  804130:	28fff804 	addi	r3,r5,-32
  804134:	10c06036 	bltu	r2,r3,8042b8 <___vfprintf_internal_r+0x394>
  804138:	18c5883a 	add	r2,r3,r3
  80413c:	1085883a 	add	r2,r2,r2
  804140:	00c02034 	movhi	r3,128
  804144:	18d05504 	addi	r3,r3,16724
  804148:	10c5883a 	add	r2,r2,r3
  80414c:	11000017 	ldw	r4,0(r2)
  804150:	2000683a 	jmp	r4
  804154:	008050c8 	cmpgei	r2,zero,323
  804158:	008042b8 	rdprs	r2,zero,266
  80415c:	008042b8 	rdprs	r2,zero,266
  804160:	008050b4 	movhi	r2,322
  804164:	008042b8 	rdprs	r2,zero,266
  804168:	008042b8 	rdprs	r2,zero,266
  80416c:	008042b8 	rdprs	r2,zero,266
  804170:	008042b8 	rdprs	r2,zero,266
  804174:	008042b8 	rdprs	r2,zero,266
  804178:	008042b8 	rdprs	r2,zero,266
  80417c:	00804e94 	movui	r2,314
  804180:	008050a4 	muli	r2,zero,322
  804184:	008042b8 	rdprs	r2,zero,266
  804188:	00804eac 	andhi	r2,zero,314
  80418c:	00805140 	call	80514 <__alt_mem_onchip_memory2_3+0x79514>
  804190:	008042b8 	rdprs	r2,zero,266
  804194:	0080512c 	andhi	r2,zero,324
  804198:	008050f4 	movhi	r2,323
  80419c:	008050f4 	movhi	r2,323
  8041a0:	008050f4 	movhi	r2,323
  8041a4:	008050f4 	movhi	r2,323
  8041a8:	008050f4 	movhi	r2,323
  8041ac:	008050f4 	movhi	r2,323
  8041b0:	008050f4 	movhi	r2,323
  8041b4:	008050f4 	movhi	r2,323
  8041b8:	008050f4 	movhi	r2,323
  8041bc:	008042b8 	rdprs	r2,zero,266
  8041c0:	008042b8 	rdprs	r2,zero,266
  8041c4:	008042b8 	rdprs	r2,zero,266
  8041c8:	008042b8 	rdprs	r2,zero,266
  8041cc:	008042b8 	rdprs	r2,zero,266
  8041d0:	008042b8 	rdprs	r2,zero,266
  8041d4:	008042b8 	rdprs	r2,zero,266
  8041d8:	008042b8 	rdprs	r2,zero,266
  8041dc:	008042b8 	rdprs	r2,zero,266
  8041e0:	008042b8 	rdprs	r2,zero,266
  8041e4:	00804910 	cmplti	r2,zero,292
  8041e8:	00804f7c 	xorhi	r2,zero,317
  8041ec:	008042b8 	rdprs	r2,zero,266
  8041f0:	00804f7c 	xorhi	r2,zero,317
  8041f4:	008042b8 	rdprs	r2,zero,266
  8041f8:	008042b8 	rdprs	r2,zero,266
  8041fc:	008042b8 	rdprs	r2,zero,266
  804200:	008042b8 	rdprs	r2,zero,266
  804204:	008050e0 	cmpeqi	r2,zero,323
  804208:	008042b8 	rdprs	r2,zero,266
  80420c:	008042b8 	rdprs	r2,zero,266
  804210:	008049c4 	movi	r2,295
  804214:	008042b8 	rdprs	r2,zero,266
  804218:	008042b8 	rdprs	r2,zero,266
  80421c:	008042b8 	rdprs	r2,zero,266
  804220:	008042b8 	rdprs	r2,zero,266
  804224:	008042b8 	rdprs	r2,zero,266
  804228:	00804a10 	cmplti	r2,zero,296
  80422c:	008042b8 	rdprs	r2,zero,266
  804230:	008042b8 	rdprs	r2,zero,266
  804234:	00805030 	cmpltui	r2,zero,320
  804238:	008042b8 	rdprs	r2,zero,266
  80423c:	008042b8 	rdprs	r2,zero,266
  804240:	008042b8 	rdprs	r2,zero,266
  804244:	008042b8 	rdprs	r2,zero,266
  804248:	008042b8 	rdprs	r2,zero,266
  80424c:	008042b8 	rdprs	r2,zero,266
  804250:	008042b8 	rdprs	r2,zero,266
  804254:	008042b8 	rdprs	r2,zero,266
  804258:	008042b8 	rdprs	r2,zero,266
  80425c:	008042b8 	rdprs	r2,zero,266
  804260:	00805004 	movi	r2,320
  804264:	0080491c 	xori	r2,zero,292
  804268:	00804f7c 	xorhi	r2,zero,317
  80426c:	00804f7c 	xorhi	r2,zero,317
  804270:	00804f7c 	xorhi	r2,zero,317
  804274:	00804f68 	cmpgeui	r2,zero,317
  804278:	0080491c 	xori	r2,zero,292
  80427c:	008042b8 	rdprs	r2,zero,266
  804280:	008042b8 	rdprs	r2,zero,266
  804284:	00804ef0 	cmpltui	r2,zero,315
  804288:	008042b8 	rdprs	r2,zero,266
  80428c:	00804ec0 	call	804ec <__alt_mem_onchip_memory2_3+0x794ec>
  804290:	008049d0 	cmplti	r2,zero,295
  804294:	00804f20 	cmpeqi	r2,zero,316
  804298:	00804f0c 	andi	r2,zero,316
  80429c:	008042b8 	rdprs	r2,zero,266
  8042a0:	0080519c 	xori	r2,zero,326
  8042a4:	008042b8 	rdprs	r2,zero,266
  8042a8:	00804a1c 	xori	r2,zero,296
  8042ac:	008042b8 	rdprs	r2,zero,266
  8042b0:	008042b8 	rdprs	r2,zero,266
  8042b4:	00805094 	movui	r2,322
  8042b8:	d9014d17 	ldw	r4,1332(sp)
  8042bc:	2000ce26 	beq	r4,zero,8045f8 <___vfprintf_internal_r+0x6d4>
  8042c0:	01400044 	movi	r5,1
  8042c4:	d9800f04 	addi	r6,sp,60
  8042c8:	d9c14015 	stw	r7,1280(sp)
  8042cc:	d9414515 	stw	r5,1300(sp)
  8042d0:	d9814115 	stw	r6,1284(sp)
  8042d4:	280f883a 	mov	r7,r5
  8042d8:	d9000f05 	stb	r4,60(sp)
  8042dc:	d8000405 	stb	zero,16(sp)
  8042e0:	d8014615 	stw	zero,1304(sp)
  8042e4:	d8c14c17 	ldw	r3,1328(sp)
  8042e8:	1880008c 	andi	r2,r3,2
  8042ec:	1005003a 	cmpeq	r2,r2,zero
  8042f0:	d8815015 	stw	r2,1344(sp)
  8042f4:	1000031e 	bne	r2,zero,804304 <___vfprintf_internal_r+0x3e0>
  8042f8:	d9014517 	ldw	r4,1300(sp)
  8042fc:	21000084 	addi	r4,r4,2
  804300:	d9014515 	stw	r4,1300(sp)
  804304:	d9414c17 	ldw	r5,1328(sp)
  804308:	2940210c 	andi	r5,r5,132
  80430c:	d9414e15 	stw	r5,1336(sp)
  804310:	28002d1e 	bne	r5,zero,8043c8 <___vfprintf_internal_r+0x4a4>
  804314:	d9814a17 	ldw	r6,1320(sp)
  804318:	d8814517 	ldw	r2,1300(sp)
  80431c:	30a1c83a 	sub	r16,r6,r2
  804320:	0400290e 	bge	zero,r16,8043c8 <___vfprintf_internal_r+0x4a4>
  804324:	00800404 	movi	r2,16
  804328:	1404580e 	bge	r2,r16,80548c <___vfprintf_internal_r+0x1568>
  80432c:	dc800e17 	ldw	r18,56(sp)
  804330:	dc400d17 	ldw	r17,52(sp)
  804334:	1027883a 	mov	r19,r2
  804338:	07002074 	movhi	fp,129
  80433c:	e707dd84 	addi	fp,fp,8054
  804340:	050001c4 	movi	r20,7
  804344:	00000306 	br	804354 <___vfprintf_internal_r+0x430>
  804348:	843ffc04 	addi	r16,r16,-16
  80434c:	ad400204 	addi	r21,r21,8
  804350:	9c00130e 	bge	r19,r16,8043a0 <___vfprintf_internal_r+0x47c>
  804354:	94800404 	addi	r18,r18,16
  804358:	8c400044 	addi	r17,r17,1
  80435c:	af000015 	stw	fp,0(r21)
  804360:	acc00115 	stw	r19,4(r21)
  804364:	dc800e15 	stw	r18,56(sp)
  804368:	dc400d15 	stw	r17,52(sp)
  80436c:	a47ff60e 	bge	r20,r17,804348 <___vfprintf_internal_r+0x424>
  804370:	d9014f17 	ldw	r4,1340(sp)
  804374:	b00b883a 	mov	r5,r22
  804378:	d9800c04 	addi	r6,sp,48
  80437c:	d9c15115 	stw	r7,1348(sp)
  804380:	0803ecc0 	call	803ecc <__sprint_r>
  804384:	d9c15117 	ldw	r7,1348(sp)
  804388:	10009e1e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  80438c:	843ffc04 	addi	r16,r16,-16
  804390:	dc800e17 	ldw	r18,56(sp)
  804394:	dc400d17 	ldw	r17,52(sp)
  804398:	dd401904 	addi	r21,sp,100
  80439c:	9c3fed16 	blt	r19,r16,804354 <___vfprintf_internal_r+0x430>
  8043a0:	9425883a 	add	r18,r18,r16
  8043a4:	8c400044 	addi	r17,r17,1
  8043a8:	008001c4 	movi	r2,7
  8043ac:	af000015 	stw	fp,0(r21)
  8043b0:	ac000115 	stw	r16,4(r21)
  8043b4:	dc800e15 	stw	r18,56(sp)
  8043b8:	dc400d15 	stw	r17,52(sp)
  8043bc:	1441f516 	blt	r2,r17,804b94 <___vfprintf_internal_r+0xc70>
  8043c0:	ad400204 	addi	r21,r21,8
  8043c4:	00000206 	br	8043d0 <___vfprintf_internal_r+0x4ac>
  8043c8:	dc800e17 	ldw	r18,56(sp)
  8043cc:	dc400d17 	ldw	r17,52(sp)
  8043d0:	d8800407 	ldb	r2,16(sp)
  8043d4:	10000b26 	beq	r2,zero,804404 <___vfprintf_internal_r+0x4e0>
  8043d8:	00800044 	movi	r2,1
  8043dc:	94800044 	addi	r18,r18,1
  8043e0:	8c400044 	addi	r17,r17,1
  8043e4:	a8800115 	stw	r2,4(r21)
  8043e8:	d8c00404 	addi	r3,sp,16
  8043ec:	008001c4 	movi	r2,7
  8043f0:	a8c00015 	stw	r3,0(r21)
  8043f4:	dc800e15 	stw	r18,56(sp)
  8043f8:	dc400d15 	stw	r17,52(sp)
  8043fc:	1441da16 	blt	r2,r17,804b68 <___vfprintf_internal_r+0xc44>
  804400:	ad400204 	addi	r21,r21,8
  804404:	d9015017 	ldw	r4,1344(sp)
  804408:	20000b1e 	bne	r4,zero,804438 <___vfprintf_internal_r+0x514>
  80440c:	d8800444 	addi	r2,sp,17
  804410:	94800084 	addi	r18,r18,2
  804414:	8c400044 	addi	r17,r17,1
  804418:	a8800015 	stw	r2,0(r21)
  80441c:	00c00084 	movi	r3,2
  804420:	008001c4 	movi	r2,7
  804424:	a8c00115 	stw	r3,4(r21)
  804428:	dc800e15 	stw	r18,56(sp)
  80442c:	dc400d15 	stw	r17,52(sp)
  804430:	1441c216 	blt	r2,r17,804b3c <___vfprintf_internal_r+0xc18>
  804434:	ad400204 	addi	r21,r21,8
  804438:	d9414e17 	ldw	r5,1336(sp)
  80443c:	00802004 	movi	r2,128
  804440:	2880b126 	beq	r5,r2,804708 <___vfprintf_internal_r+0x7e4>
  804444:	d8c14617 	ldw	r3,1304(sp)
  804448:	19e1c83a 	sub	r16,r3,r7
  80444c:	0400260e 	bge	zero,r16,8044e8 <___vfprintf_internal_r+0x5c4>
  804450:	00800404 	movi	r2,16
  804454:	1403c90e 	bge	r2,r16,80537c <___vfprintf_internal_r+0x1458>
  804458:	1027883a 	mov	r19,r2
  80445c:	07002074 	movhi	fp,129
  804460:	e707d984 	addi	fp,fp,8038
  804464:	050001c4 	movi	r20,7
  804468:	00000306 	br	804478 <___vfprintf_internal_r+0x554>
  80446c:	843ffc04 	addi	r16,r16,-16
  804470:	ad400204 	addi	r21,r21,8
  804474:	9c00130e 	bge	r19,r16,8044c4 <___vfprintf_internal_r+0x5a0>
  804478:	94800404 	addi	r18,r18,16
  80447c:	8c400044 	addi	r17,r17,1
  804480:	af000015 	stw	fp,0(r21)
  804484:	acc00115 	stw	r19,4(r21)
  804488:	dc800e15 	stw	r18,56(sp)
  80448c:	dc400d15 	stw	r17,52(sp)
  804490:	a47ff60e 	bge	r20,r17,80446c <___vfprintf_internal_r+0x548>
  804494:	d9014f17 	ldw	r4,1340(sp)
  804498:	b00b883a 	mov	r5,r22
  80449c:	d9800c04 	addi	r6,sp,48
  8044a0:	d9c15115 	stw	r7,1348(sp)
  8044a4:	0803ecc0 	call	803ecc <__sprint_r>
  8044a8:	d9c15117 	ldw	r7,1348(sp)
  8044ac:	1000551e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  8044b0:	843ffc04 	addi	r16,r16,-16
  8044b4:	dc800e17 	ldw	r18,56(sp)
  8044b8:	dc400d17 	ldw	r17,52(sp)
  8044bc:	dd401904 	addi	r21,sp,100
  8044c0:	9c3fed16 	blt	r19,r16,804478 <___vfprintf_internal_r+0x554>
  8044c4:	9425883a 	add	r18,r18,r16
  8044c8:	8c400044 	addi	r17,r17,1
  8044cc:	008001c4 	movi	r2,7
  8044d0:	af000015 	stw	fp,0(r21)
  8044d4:	ac000115 	stw	r16,4(r21)
  8044d8:	dc800e15 	stw	r18,56(sp)
  8044dc:	dc400d15 	stw	r17,52(sp)
  8044e0:	14418216 	blt	r2,r17,804aec <___vfprintf_internal_r+0xbc8>
  8044e4:	ad400204 	addi	r21,r21,8
  8044e8:	d9014c17 	ldw	r4,1328(sp)
  8044ec:	2080400c 	andi	r2,r4,256
  8044f0:	10004a1e 	bne	r2,zero,80461c <___vfprintf_internal_r+0x6f8>
  8044f4:	d9414117 	ldw	r5,1284(sp)
  8044f8:	91e5883a 	add	r18,r18,r7
  8044fc:	8c400044 	addi	r17,r17,1
  804500:	008001c4 	movi	r2,7
  804504:	a9400015 	stw	r5,0(r21)
  804508:	a9c00115 	stw	r7,4(r21)
  80450c:	dc800e15 	stw	r18,56(sp)
  804510:	dc400d15 	stw	r17,52(sp)
  804514:	14416716 	blt	r2,r17,804ab4 <___vfprintf_internal_r+0xb90>
  804518:	a8c00204 	addi	r3,r21,8
  80451c:	d9814c17 	ldw	r6,1328(sp)
  804520:	3080010c 	andi	r2,r6,4
  804524:	10002826 	beq	r2,zero,8045c8 <___vfprintf_internal_r+0x6a4>
  804528:	d8814a17 	ldw	r2,1320(sp)
  80452c:	d9014517 	ldw	r4,1300(sp)
  804530:	1121c83a 	sub	r16,r2,r4
  804534:	0400240e 	bge	zero,r16,8045c8 <___vfprintf_internal_r+0x6a4>
  804538:	00800404 	movi	r2,16
  80453c:	14044f0e 	bge	r2,r16,80567c <___vfprintf_internal_r+0x1758>
  804540:	dc400d17 	ldw	r17,52(sp)
  804544:	1027883a 	mov	r19,r2
  804548:	07002074 	movhi	fp,129
  80454c:	e707dd84 	addi	fp,fp,8054
  804550:	050001c4 	movi	r20,7
  804554:	00000306 	br	804564 <___vfprintf_internal_r+0x640>
  804558:	843ffc04 	addi	r16,r16,-16
  80455c:	18c00204 	addi	r3,r3,8
  804560:	9c00110e 	bge	r19,r16,8045a8 <___vfprintf_internal_r+0x684>
  804564:	94800404 	addi	r18,r18,16
  804568:	8c400044 	addi	r17,r17,1
  80456c:	1f000015 	stw	fp,0(r3)
  804570:	1cc00115 	stw	r19,4(r3)
  804574:	dc800e15 	stw	r18,56(sp)
  804578:	dc400d15 	stw	r17,52(sp)
  80457c:	a47ff60e 	bge	r20,r17,804558 <___vfprintf_internal_r+0x634>
  804580:	d9014f17 	ldw	r4,1340(sp)
  804584:	b00b883a 	mov	r5,r22
  804588:	d9800c04 	addi	r6,sp,48
  80458c:	0803ecc0 	call	803ecc <__sprint_r>
  804590:	10001c1e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  804594:	843ffc04 	addi	r16,r16,-16
  804598:	dc800e17 	ldw	r18,56(sp)
  80459c:	dc400d17 	ldw	r17,52(sp)
  8045a0:	d8c01904 	addi	r3,sp,100
  8045a4:	9c3fef16 	blt	r19,r16,804564 <___vfprintf_internal_r+0x640>
  8045a8:	9425883a 	add	r18,r18,r16
  8045ac:	8c400044 	addi	r17,r17,1
  8045b0:	008001c4 	movi	r2,7
  8045b4:	1f000015 	stw	fp,0(r3)
  8045b8:	1c000115 	stw	r16,4(r3)
  8045bc:	dc800e15 	stw	r18,56(sp)
  8045c0:	dc400d15 	stw	r17,52(sp)
  8045c4:	1440cb16 	blt	r2,r17,8048f4 <___vfprintf_internal_r+0x9d0>
  8045c8:	d8814a17 	ldw	r2,1320(sp)
  8045cc:	d9414517 	ldw	r5,1300(sp)
  8045d0:	1140010e 	bge	r2,r5,8045d8 <___vfprintf_internal_r+0x6b4>
  8045d4:	2805883a 	mov	r2,r5
  8045d8:	d9814b17 	ldw	r6,1324(sp)
  8045dc:	308d883a 	add	r6,r6,r2
  8045e0:	d9814b15 	stw	r6,1324(sp)
  8045e4:	90013b1e 	bne	r18,zero,804ad4 <___vfprintf_internal_r+0xbb0>
  8045e8:	d9c14017 	ldw	r7,1280(sp)
  8045ec:	dd401904 	addi	r21,sp,100
  8045f0:	d8000d15 	stw	zero,52(sp)
  8045f4:	003ea706 	br	804094 <___vfprintf_internal_r+0x170>
  8045f8:	d8800e17 	ldw	r2,56(sp)
  8045fc:	10053f1e 	bne	r2,zero,805afc <___vfprintf_internal_r+0x1bd8>
  804600:	d8000d15 	stw	zero,52(sp)
  804604:	b080030b 	ldhu	r2,12(r22)
  804608:	1080100c 	andi	r2,r2,64
  80460c:	103e8726 	beq	r2,zero,80402c <___vfprintf_internal_r+0x108>
  804610:	00bfffc4 	movi	r2,-1
  804614:	d8814b15 	stw	r2,1324(sp)
  804618:	003e8406 	br	80402c <___vfprintf_internal_r+0x108>
  80461c:	d9814d17 	ldw	r6,1332(sp)
  804620:	00801944 	movi	r2,101
  804624:	11806e16 	blt	r2,r6,8047e0 <___vfprintf_internal_r+0x8bc>
  804628:	d9414717 	ldw	r5,1308(sp)
  80462c:	00c00044 	movi	r3,1
  804630:	1943430e 	bge	r3,r5,805340 <___vfprintf_internal_r+0x141c>
  804634:	d8814117 	ldw	r2,1284(sp)
  804638:	94800044 	addi	r18,r18,1
  80463c:	8c400044 	addi	r17,r17,1
  804640:	a8800015 	stw	r2,0(r21)
  804644:	008001c4 	movi	r2,7
  804648:	a8c00115 	stw	r3,4(r21)
  80464c:	dc800e15 	stw	r18,56(sp)
  804650:	dc400d15 	stw	r17,52(sp)
  804654:	1441ca16 	blt	r2,r17,804d80 <___vfprintf_internal_r+0xe5c>
  804658:	a8c00204 	addi	r3,r21,8
  80465c:	d9014917 	ldw	r4,1316(sp)
  804660:	00800044 	movi	r2,1
  804664:	94800044 	addi	r18,r18,1
  804668:	8c400044 	addi	r17,r17,1
  80466c:	18800115 	stw	r2,4(r3)
  804670:	008001c4 	movi	r2,7
  804674:	19000015 	stw	r4,0(r3)
  804678:	dc800e15 	stw	r18,56(sp)
  80467c:	dc400d15 	stw	r17,52(sp)
  804680:	1441b616 	blt	r2,r17,804d5c <___vfprintf_internal_r+0xe38>
  804684:	1cc00204 	addi	r19,r3,8
  804688:	d9014217 	ldw	r4,1288(sp)
  80468c:	d9414317 	ldw	r5,1292(sp)
  804690:	000d883a 	mov	r6,zero
  804694:	000f883a 	mov	r7,zero
  804698:	08031ec0 	call	8031ec <__nedf2>
  80469c:	10017426 	beq	r2,zero,804c70 <___vfprintf_internal_r+0xd4c>
  8046a0:	d9414717 	ldw	r5,1308(sp)
  8046a4:	d9814117 	ldw	r6,1284(sp)
  8046a8:	8c400044 	addi	r17,r17,1
  8046ac:	2c85883a 	add	r2,r5,r18
  8046b0:	14bfffc4 	addi	r18,r2,-1
  8046b4:	28bfffc4 	addi	r2,r5,-1
  8046b8:	30c00044 	addi	r3,r6,1
  8046bc:	98800115 	stw	r2,4(r19)
  8046c0:	008001c4 	movi	r2,7
  8046c4:	98c00015 	stw	r3,0(r19)
  8046c8:	dc800e15 	stw	r18,56(sp)
  8046cc:	dc400d15 	stw	r17,52(sp)
  8046d0:	14418e16 	blt	r2,r17,804d0c <___vfprintf_internal_r+0xde8>
  8046d4:	9cc00204 	addi	r19,r19,8
  8046d8:	d9414817 	ldw	r5,1312(sp)
  8046dc:	d8800804 	addi	r2,sp,32
  8046e0:	8c400044 	addi	r17,r17,1
  8046e4:	9165883a 	add	r18,r18,r5
  8046e8:	98800015 	stw	r2,0(r19)
  8046ec:	008001c4 	movi	r2,7
  8046f0:	99400115 	stw	r5,4(r19)
  8046f4:	dc800e15 	stw	r18,56(sp)
  8046f8:	dc400d15 	stw	r17,52(sp)
  8046fc:	1440ed16 	blt	r2,r17,804ab4 <___vfprintf_internal_r+0xb90>
  804700:	98c00204 	addi	r3,r19,8
  804704:	003f8506 	br	80451c <___vfprintf_internal_r+0x5f8>
  804708:	d9814a17 	ldw	r6,1320(sp)
  80470c:	d8814517 	ldw	r2,1300(sp)
  804710:	30a1c83a 	sub	r16,r6,r2
  804714:	043f4b0e 	bge	zero,r16,804444 <___vfprintf_internal_r+0x520>
  804718:	00800404 	movi	r2,16
  80471c:	1404340e 	bge	r2,r16,8057f0 <___vfprintf_internal_r+0x18cc>
  804720:	1027883a 	mov	r19,r2
  804724:	07002074 	movhi	fp,129
  804728:	e707d984 	addi	fp,fp,8038
  80472c:	050001c4 	movi	r20,7
  804730:	00000306 	br	804740 <___vfprintf_internal_r+0x81c>
  804734:	843ffc04 	addi	r16,r16,-16
  804738:	ad400204 	addi	r21,r21,8
  80473c:	9c00130e 	bge	r19,r16,80478c <___vfprintf_internal_r+0x868>
  804740:	94800404 	addi	r18,r18,16
  804744:	8c400044 	addi	r17,r17,1
  804748:	af000015 	stw	fp,0(r21)
  80474c:	acc00115 	stw	r19,4(r21)
  804750:	dc800e15 	stw	r18,56(sp)
  804754:	dc400d15 	stw	r17,52(sp)
  804758:	a47ff60e 	bge	r20,r17,804734 <___vfprintf_internal_r+0x810>
  80475c:	d9014f17 	ldw	r4,1340(sp)
  804760:	b00b883a 	mov	r5,r22
  804764:	d9800c04 	addi	r6,sp,48
  804768:	d9c15115 	stw	r7,1348(sp)
  80476c:	0803ecc0 	call	803ecc <__sprint_r>
  804770:	d9c15117 	ldw	r7,1348(sp)
  804774:	103fa31e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  804778:	843ffc04 	addi	r16,r16,-16
  80477c:	dc800e17 	ldw	r18,56(sp)
  804780:	dc400d17 	ldw	r17,52(sp)
  804784:	dd401904 	addi	r21,sp,100
  804788:	9c3fed16 	blt	r19,r16,804740 <___vfprintf_internal_r+0x81c>
  80478c:	9425883a 	add	r18,r18,r16
  804790:	8c400044 	addi	r17,r17,1
  804794:	008001c4 	movi	r2,7
  804798:	af000015 	stw	fp,0(r21)
  80479c:	ac000115 	stw	r16,4(r21)
  8047a0:	dc800e15 	stw	r18,56(sp)
  8047a4:	dc400d15 	stw	r17,52(sp)
  8047a8:	14416116 	blt	r2,r17,804d30 <___vfprintf_internal_r+0xe0c>
  8047ac:	ad400204 	addi	r21,r21,8
  8047b0:	003f2406 	br	804444 <___vfprintf_internal_r+0x520>
  8047b4:	d9014f17 	ldw	r4,1340(sp)
  8047b8:	08079940 	call	807994 <__sinit>
  8047bc:	d9c15117 	ldw	r7,1348(sp)
  8047c0:	003def06 	br	803f80 <___vfprintf_internal_r+0x5c>
  8047c4:	d9014f17 	ldw	r4,1340(sp)
  8047c8:	b00b883a 	mov	r5,r22
  8047cc:	d9c15115 	stw	r7,1348(sp)
  8047d0:	0805df40 	call	805df4 <__swsetup_r>
  8047d4:	d9c15117 	ldw	r7,1348(sp)
  8047d8:	103dee26 	beq	r2,zero,803f94 <___vfprintf_internal_r+0x70>
  8047dc:	003f8c06 	br	804610 <___vfprintf_internal_r+0x6ec>
  8047e0:	d9014217 	ldw	r4,1288(sp)
  8047e4:	d9414317 	ldw	r5,1292(sp)
  8047e8:	000d883a 	mov	r6,zero
  8047ec:	000f883a 	mov	r7,zero
  8047f0:	080bf900 	call	80bf90 <__eqdf2>
  8047f4:	1000f21e 	bne	r2,zero,804bc0 <___vfprintf_internal_r+0xc9c>
  8047f8:	00802074 	movhi	r2,129
  8047fc:	10875304 	addi	r2,r2,7500
  804800:	94800044 	addi	r18,r18,1
  804804:	8c400044 	addi	r17,r17,1
  804808:	a8800015 	stw	r2,0(r21)
  80480c:	00c00044 	movi	r3,1
  804810:	008001c4 	movi	r2,7
  804814:	a8c00115 	stw	r3,4(r21)
  804818:	dc800e15 	stw	r18,56(sp)
  80481c:	dc400d15 	stw	r17,52(sp)
  804820:	1442fa16 	blt	r2,r17,80540c <___vfprintf_internal_r+0x14e8>
  804824:	a8c00204 	addi	r3,r21,8
  804828:	d8800517 	ldw	r2,20(sp)
  80482c:	d9014717 	ldw	r4,1308(sp)
  804830:	11015c0e 	bge	r2,r4,804da4 <___vfprintf_internal_r+0xe80>
  804834:	dc400d17 	ldw	r17,52(sp)
  804838:	d9814917 	ldw	r6,1316(sp)
  80483c:	00800044 	movi	r2,1
  804840:	94800044 	addi	r18,r18,1
  804844:	8c400044 	addi	r17,r17,1
  804848:	18800115 	stw	r2,4(r3)
  80484c:	008001c4 	movi	r2,7
  804850:	19800015 	stw	r6,0(r3)
  804854:	dc800e15 	stw	r18,56(sp)
  804858:	dc400d15 	stw	r17,52(sp)
  80485c:	14431016 	blt	r2,r17,8054a0 <___vfprintf_internal_r+0x157c>
  804860:	18c00204 	addi	r3,r3,8
  804864:	d8814717 	ldw	r2,1308(sp)
  804868:	143fffc4 	addi	r16,r2,-1
  80486c:	043f2b0e 	bge	zero,r16,80451c <___vfprintf_internal_r+0x5f8>
  804870:	00800404 	movi	r2,16
  804874:	1402a20e 	bge	r2,r16,805300 <___vfprintf_internal_r+0x13dc>
  804878:	dc400d17 	ldw	r17,52(sp)
  80487c:	1027883a 	mov	r19,r2
  804880:	07002074 	movhi	fp,129
  804884:	e707d984 	addi	fp,fp,8038
  804888:	050001c4 	movi	r20,7
  80488c:	00000306 	br	80489c <___vfprintf_internal_r+0x978>
  804890:	18c00204 	addi	r3,r3,8
  804894:	843ffc04 	addi	r16,r16,-16
  804898:	9c029c0e 	bge	r19,r16,80530c <___vfprintf_internal_r+0x13e8>
  80489c:	94800404 	addi	r18,r18,16
  8048a0:	8c400044 	addi	r17,r17,1
  8048a4:	1f000015 	stw	fp,0(r3)
  8048a8:	1cc00115 	stw	r19,4(r3)
  8048ac:	dc800e15 	stw	r18,56(sp)
  8048b0:	dc400d15 	stw	r17,52(sp)
  8048b4:	a47ff60e 	bge	r20,r17,804890 <___vfprintf_internal_r+0x96c>
  8048b8:	d9014f17 	ldw	r4,1340(sp)
  8048bc:	b00b883a 	mov	r5,r22
  8048c0:	d9800c04 	addi	r6,sp,48
  8048c4:	0803ecc0 	call	803ecc <__sprint_r>
  8048c8:	103f4e1e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  8048cc:	dc800e17 	ldw	r18,56(sp)
  8048d0:	dc400d17 	ldw	r17,52(sp)
  8048d4:	d8c01904 	addi	r3,sp,100
  8048d8:	003fee06 	br	804894 <___vfprintf_internal_r+0x970>
  8048dc:	d8802c0b 	ldhu	r2,176(sp)
  8048e0:	00ffffc4 	movi	r3,-1
  8048e4:	d8c14b15 	stw	r3,1324(sp)
  8048e8:	1080100c 	andi	r2,r2,64
  8048ec:	103dcc1e 	bne	r2,zero,804020 <___vfprintf_internal_r+0xfc>
  8048f0:	003dce06 	br	80402c <___vfprintf_internal_r+0x108>
  8048f4:	d9014f17 	ldw	r4,1340(sp)
  8048f8:	b00b883a 	mov	r5,r22
  8048fc:	d9800c04 	addi	r6,sp,48
  804900:	0803ecc0 	call	803ecc <__sprint_r>
  804904:	103f3f1e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  804908:	dc800e17 	ldw	r18,56(sp)
  80490c:	003f2e06 	br	8045c8 <___vfprintf_internal_r+0x6a4>
  804910:	d9414c17 	ldw	r5,1328(sp)
  804914:	29400414 	ori	r5,r5,16
  804918:	d9414c15 	stw	r5,1328(sp)
  80491c:	d9814c17 	ldw	r6,1328(sp)
  804920:	3080080c 	andi	r2,r6,32
  804924:	10014f1e 	bne	r2,zero,804e64 <___vfprintf_internal_r+0xf40>
  804928:	d8c14c17 	ldw	r3,1328(sp)
  80492c:	1880040c 	andi	r2,r3,16
  804930:	1002ea1e 	bne	r2,zero,8054dc <___vfprintf_internal_r+0x15b8>
  804934:	d9014c17 	ldw	r4,1328(sp)
  804938:	2080100c 	andi	r2,r4,64
  80493c:	1002e726 	beq	r2,zero,8054dc <___vfprintf_internal_r+0x15b8>
  804940:	3880000f 	ldh	r2,0(r7)
  804944:	39c00104 	addi	r7,r7,4
  804948:	d9c14015 	stw	r7,1280(sp)
  80494c:	1023d7fa 	srai	r17,r2,31
  804950:	1021883a 	mov	r16,r2
  804954:	88037216 	blt	r17,zero,805720 <___vfprintf_internal_r+0x17fc>
  804958:	01000044 	movi	r4,1
  80495c:	98000416 	blt	r19,zero,804970 <___vfprintf_internal_r+0xa4c>
  804960:	d8c14c17 	ldw	r3,1328(sp)
  804964:	00bfdfc4 	movi	r2,-129
  804968:	1886703a 	and	r3,r3,r2
  80496c:	d8c14c15 	stw	r3,1328(sp)
  804970:	8444b03a 	or	r2,r16,r17
  804974:	1002261e 	bne	r2,zero,805210 <___vfprintf_internal_r+0x12ec>
  804978:	9802251e 	bne	r19,zero,805210 <___vfprintf_internal_r+0x12ec>
  80497c:	20803fcc 	andi	r2,r4,255
  804980:	10029b26 	beq	r2,zero,8053f0 <___vfprintf_internal_r+0x14cc>
  804984:	d8c01904 	addi	r3,sp,100
  804988:	dd000f04 	addi	r20,sp,60
  80498c:	d8c14115 	stw	r3,1284(sp)
  804990:	d8c14117 	ldw	r3,1284(sp)
  804994:	dcc14515 	stw	r19,1300(sp)
  804998:	a0c5c83a 	sub	r2,r20,r3
  80499c:	11c00a04 	addi	r7,r2,40
  8049a0:	99c0010e 	bge	r19,r7,8049a8 <___vfprintf_internal_r+0xa84>
  8049a4:	d9c14515 	stw	r7,1300(sp)
  8049a8:	dcc14615 	stw	r19,1304(sp)
  8049ac:	d8800407 	ldb	r2,16(sp)
  8049b0:	103e4c26 	beq	r2,zero,8042e4 <___vfprintf_internal_r+0x3c0>
  8049b4:	d8814517 	ldw	r2,1300(sp)
  8049b8:	10800044 	addi	r2,r2,1
  8049bc:	d8814515 	stw	r2,1300(sp)
  8049c0:	003e4806 	br	8042e4 <___vfprintf_internal_r+0x3c0>
  8049c4:	d9814c17 	ldw	r6,1328(sp)
  8049c8:	31800414 	ori	r6,r6,16
  8049cc:	d9814c15 	stw	r6,1328(sp)
  8049d0:	d8c14c17 	ldw	r3,1328(sp)
  8049d4:	1880080c 	andi	r2,r3,32
  8049d8:	1001271e 	bne	r2,zero,804e78 <___vfprintf_internal_r+0xf54>
  8049dc:	d9414c17 	ldw	r5,1328(sp)
  8049e0:	2880040c 	andi	r2,r5,16
  8049e4:	1002b61e 	bne	r2,zero,8054c0 <___vfprintf_internal_r+0x159c>
  8049e8:	d9814c17 	ldw	r6,1328(sp)
  8049ec:	3080100c 	andi	r2,r6,64
  8049f0:	1002b326 	beq	r2,zero,8054c0 <___vfprintf_internal_r+0x159c>
  8049f4:	3c00000b 	ldhu	r16,0(r7)
  8049f8:	0009883a 	mov	r4,zero
  8049fc:	39c00104 	addi	r7,r7,4
  804a00:	0023883a 	mov	r17,zero
  804a04:	d9c14015 	stw	r7,1280(sp)
  804a08:	d8000405 	stb	zero,16(sp)
  804a0c:	003fd306 	br	80495c <___vfprintf_internal_r+0xa38>
  804a10:	d9014c17 	ldw	r4,1328(sp)
  804a14:	21000414 	ori	r4,r4,16
  804a18:	d9014c15 	stw	r4,1328(sp)
  804a1c:	d9414c17 	ldw	r5,1328(sp)
  804a20:	2880080c 	andi	r2,r5,32
  804a24:	1001081e 	bne	r2,zero,804e48 <___vfprintf_internal_r+0xf24>
  804a28:	d8c14c17 	ldw	r3,1328(sp)
  804a2c:	1880040c 	andi	r2,r3,16
  804a30:	1002b01e 	bne	r2,zero,8054f4 <___vfprintf_internal_r+0x15d0>
  804a34:	d9014c17 	ldw	r4,1328(sp)
  804a38:	2080100c 	andi	r2,r4,64
  804a3c:	1002ad26 	beq	r2,zero,8054f4 <___vfprintf_internal_r+0x15d0>
  804a40:	3c00000b 	ldhu	r16,0(r7)
  804a44:	01000044 	movi	r4,1
  804a48:	39c00104 	addi	r7,r7,4
  804a4c:	0023883a 	mov	r17,zero
  804a50:	d9c14015 	stw	r7,1280(sp)
  804a54:	d8000405 	stb	zero,16(sp)
  804a58:	003fc006 	br	80495c <___vfprintf_internal_r+0xa38>
  804a5c:	d9014f17 	ldw	r4,1340(sp)
  804a60:	b00b883a 	mov	r5,r22
  804a64:	d9800c04 	addi	r6,sp,48
  804a68:	0803ecc0 	call	803ecc <__sprint_r>
  804a6c:	103ee51e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  804a70:	dc800e17 	ldw	r18,56(sp)
  804a74:	d8c01904 	addi	r3,sp,100
  804a78:	d9814c17 	ldw	r6,1328(sp)
  804a7c:	3080004c 	andi	r2,r6,1
  804a80:	1005003a 	cmpeq	r2,r2,zero
  804a84:	103ea51e 	bne	r2,zero,80451c <___vfprintf_internal_r+0x5f8>
  804a88:	00800044 	movi	r2,1
  804a8c:	dc400d17 	ldw	r17,52(sp)
  804a90:	18800115 	stw	r2,4(r3)
  804a94:	d8814917 	ldw	r2,1316(sp)
  804a98:	94800044 	addi	r18,r18,1
  804a9c:	8c400044 	addi	r17,r17,1
  804aa0:	18800015 	stw	r2,0(r3)
  804aa4:	008001c4 	movi	r2,7
  804aa8:	dc800e15 	stw	r18,56(sp)
  804aac:	dc400d15 	stw	r17,52(sp)
  804ab0:	14421e0e 	bge	r2,r17,80532c <___vfprintf_internal_r+0x1408>
  804ab4:	d9014f17 	ldw	r4,1340(sp)
  804ab8:	b00b883a 	mov	r5,r22
  804abc:	d9800c04 	addi	r6,sp,48
  804ac0:	0803ecc0 	call	803ecc <__sprint_r>
  804ac4:	103ecf1e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  804ac8:	dc800e17 	ldw	r18,56(sp)
  804acc:	d8c01904 	addi	r3,sp,100
  804ad0:	003e9206 	br	80451c <___vfprintf_internal_r+0x5f8>
  804ad4:	d9014f17 	ldw	r4,1340(sp)
  804ad8:	b00b883a 	mov	r5,r22
  804adc:	d9800c04 	addi	r6,sp,48
  804ae0:	0803ecc0 	call	803ecc <__sprint_r>
  804ae4:	103ec026 	beq	r2,zero,8045e8 <___vfprintf_internal_r+0x6c4>
  804ae8:	003ec606 	br	804604 <___vfprintf_internal_r+0x6e0>
  804aec:	d9014f17 	ldw	r4,1340(sp)
  804af0:	b00b883a 	mov	r5,r22
  804af4:	d9800c04 	addi	r6,sp,48
  804af8:	d9c15115 	stw	r7,1348(sp)
  804afc:	0803ecc0 	call	803ecc <__sprint_r>
  804b00:	d9c15117 	ldw	r7,1348(sp)
  804b04:	103ebf1e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  804b08:	dc800e17 	ldw	r18,56(sp)
  804b0c:	dc400d17 	ldw	r17,52(sp)
  804b10:	dd401904 	addi	r21,sp,100
  804b14:	003e7406 	br	8044e8 <___vfprintf_internal_r+0x5c4>
  804b18:	d9014f17 	ldw	r4,1340(sp)
  804b1c:	b00b883a 	mov	r5,r22
  804b20:	d9800c04 	addi	r6,sp,48
  804b24:	d9c15115 	stw	r7,1348(sp)
  804b28:	0803ecc0 	call	803ecc <__sprint_r>
  804b2c:	d9c15117 	ldw	r7,1348(sp)
  804b30:	103eb41e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  804b34:	dd401904 	addi	r21,sp,100
  804b38:	003d6d06 	br	8040f0 <___vfprintf_internal_r+0x1cc>
  804b3c:	d9014f17 	ldw	r4,1340(sp)
  804b40:	b00b883a 	mov	r5,r22
  804b44:	d9800c04 	addi	r6,sp,48
  804b48:	d9c15115 	stw	r7,1348(sp)
  804b4c:	0803ecc0 	call	803ecc <__sprint_r>
  804b50:	d9c15117 	ldw	r7,1348(sp)
  804b54:	103eab1e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  804b58:	dc800e17 	ldw	r18,56(sp)
  804b5c:	dc400d17 	ldw	r17,52(sp)
  804b60:	dd401904 	addi	r21,sp,100
  804b64:	003e3406 	br	804438 <___vfprintf_internal_r+0x514>
  804b68:	d9014f17 	ldw	r4,1340(sp)
  804b6c:	b00b883a 	mov	r5,r22
  804b70:	d9800c04 	addi	r6,sp,48
  804b74:	d9c15115 	stw	r7,1348(sp)
  804b78:	0803ecc0 	call	803ecc <__sprint_r>
  804b7c:	d9c15117 	ldw	r7,1348(sp)
  804b80:	103ea01e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  804b84:	dc800e17 	ldw	r18,56(sp)
  804b88:	dc400d17 	ldw	r17,52(sp)
  804b8c:	dd401904 	addi	r21,sp,100
  804b90:	003e1c06 	br	804404 <___vfprintf_internal_r+0x4e0>
  804b94:	d9014f17 	ldw	r4,1340(sp)
  804b98:	b00b883a 	mov	r5,r22
  804b9c:	d9800c04 	addi	r6,sp,48
  804ba0:	d9c15115 	stw	r7,1348(sp)
  804ba4:	0803ecc0 	call	803ecc <__sprint_r>
  804ba8:	d9c15117 	ldw	r7,1348(sp)
  804bac:	103e951e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  804bb0:	dc800e17 	ldw	r18,56(sp)
  804bb4:	dc400d17 	ldw	r17,52(sp)
  804bb8:	dd401904 	addi	r21,sp,100
  804bbc:	003e0406 	br	8043d0 <___vfprintf_internal_r+0x4ac>
  804bc0:	d9000517 	ldw	r4,20(sp)
  804bc4:	0102520e 	bge	zero,r4,805510 <___vfprintf_internal_r+0x15ec>
  804bc8:	d9814717 	ldw	r6,1308(sp)
  804bcc:	21807a16 	blt	r4,r6,804db8 <___vfprintf_internal_r+0xe94>
  804bd0:	d8814117 	ldw	r2,1284(sp)
  804bd4:	91a5883a 	add	r18,r18,r6
  804bd8:	8c400044 	addi	r17,r17,1
  804bdc:	a8800015 	stw	r2,0(r21)
  804be0:	008001c4 	movi	r2,7
  804be4:	a9800115 	stw	r6,4(r21)
  804be8:	dc800e15 	stw	r18,56(sp)
  804bec:	dc400d15 	stw	r17,52(sp)
  804bf0:	1442f616 	blt	r2,r17,8057cc <___vfprintf_internal_r+0x18a8>
  804bf4:	a8c00204 	addi	r3,r21,8
  804bf8:	d9414717 	ldw	r5,1308(sp)
  804bfc:	2161c83a 	sub	r16,r4,r5
  804c00:	043f9d0e 	bge	zero,r16,804a78 <___vfprintf_internal_r+0xb54>
  804c04:	00800404 	movi	r2,16
  804c08:	1402130e 	bge	r2,r16,805458 <___vfprintf_internal_r+0x1534>
  804c0c:	dc400d17 	ldw	r17,52(sp)
  804c10:	1027883a 	mov	r19,r2
  804c14:	07002074 	movhi	fp,129
  804c18:	e707d984 	addi	fp,fp,8038
  804c1c:	050001c4 	movi	r20,7
  804c20:	00000306 	br	804c30 <___vfprintf_internal_r+0xd0c>
  804c24:	18c00204 	addi	r3,r3,8
  804c28:	843ffc04 	addi	r16,r16,-16
  804c2c:	9c020d0e 	bge	r19,r16,805464 <___vfprintf_internal_r+0x1540>
  804c30:	94800404 	addi	r18,r18,16
  804c34:	8c400044 	addi	r17,r17,1
  804c38:	1f000015 	stw	fp,0(r3)
  804c3c:	1cc00115 	stw	r19,4(r3)
  804c40:	dc800e15 	stw	r18,56(sp)
  804c44:	dc400d15 	stw	r17,52(sp)
  804c48:	a47ff60e 	bge	r20,r17,804c24 <___vfprintf_internal_r+0xd00>
  804c4c:	d9014f17 	ldw	r4,1340(sp)
  804c50:	b00b883a 	mov	r5,r22
  804c54:	d9800c04 	addi	r6,sp,48
  804c58:	0803ecc0 	call	803ecc <__sprint_r>
  804c5c:	103e691e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  804c60:	dc800e17 	ldw	r18,56(sp)
  804c64:	dc400d17 	ldw	r17,52(sp)
  804c68:	d8c01904 	addi	r3,sp,100
  804c6c:	003fee06 	br	804c28 <___vfprintf_internal_r+0xd04>
  804c70:	d8814717 	ldw	r2,1308(sp)
  804c74:	143fffc4 	addi	r16,r2,-1
  804c78:	043e970e 	bge	zero,r16,8046d8 <___vfprintf_internal_r+0x7b4>
  804c7c:	00800404 	movi	r2,16
  804c80:	1400180e 	bge	r2,r16,804ce4 <___vfprintf_internal_r+0xdc0>
  804c84:	1029883a 	mov	r20,r2
  804c88:	07002074 	movhi	fp,129
  804c8c:	e707d984 	addi	fp,fp,8038
  804c90:	054001c4 	movi	r21,7
  804c94:	00000306 	br	804ca4 <___vfprintf_internal_r+0xd80>
  804c98:	9cc00204 	addi	r19,r19,8
  804c9c:	843ffc04 	addi	r16,r16,-16
  804ca0:	a400120e 	bge	r20,r16,804cec <___vfprintf_internal_r+0xdc8>
  804ca4:	94800404 	addi	r18,r18,16
  804ca8:	8c400044 	addi	r17,r17,1
  804cac:	9f000015 	stw	fp,0(r19)
  804cb0:	9d000115 	stw	r20,4(r19)
  804cb4:	dc800e15 	stw	r18,56(sp)
  804cb8:	dc400d15 	stw	r17,52(sp)
  804cbc:	ac7ff60e 	bge	r21,r17,804c98 <___vfprintf_internal_r+0xd74>
  804cc0:	d9014f17 	ldw	r4,1340(sp)
  804cc4:	b00b883a 	mov	r5,r22
  804cc8:	d9800c04 	addi	r6,sp,48
  804ccc:	0803ecc0 	call	803ecc <__sprint_r>
  804cd0:	103e4c1e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  804cd4:	dc800e17 	ldw	r18,56(sp)
  804cd8:	dc400d17 	ldw	r17,52(sp)
  804cdc:	dcc01904 	addi	r19,sp,100
  804ce0:	003fee06 	br	804c9c <___vfprintf_internal_r+0xd78>
  804ce4:	07002074 	movhi	fp,129
  804ce8:	e707d984 	addi	fp,fp,8038
  804cec:	9425883a 	add	r18,r18,r16
  804cf0:	8c400044 	addi	r17,r17,1
  804cf4:	008001c4 	movi	r2,7
  804cf8:	9f000015 	stw	fp,0(r19)
  804cfc:	9c000115 	stw	r16,4(r19)
  804d00:	dc800e15 	stw	r18,56(sp)
  804d04:	dc400d15 	stw	r17,52(sp)
  804d08:	147e720e 	bge	r2,r17,8046d4 <___vfprintf_internal_r+0x7b0>
  804d0c:	d9014f17 	ldw	r4,1340(sp)
  804d10:	b00b883a 	mov	r5,r22
  804d14:	d9800c04 	addi	r6,sp,48
  804d18:	0803ecc0 	call	803ecc <__sprint_r>
  804d1c:	103e391e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  804d20:	dc800e17 	ldw	r18,56(sp)
  804d24:	dc400d17 	ldw	r17,52(sp)
  804d28:	dcc01904 	addi	r19,sp,100
  804d2c:	003e6a06 	br	8046d8 <___vfprintf_internal_r+0x7b4>
  804d30:	d9014f17 	ldw	r4,1340(sp)
  804d34:	b00b883a 	mov	r5,r22
  804d38:	d9800c04 	addi	r6,sp,48
  804d3c:	d9c15115 	stw	r7,1348(sp)
  804d40:	0803ecc0 	call	803ecc <__sprint_r>
  804d44:	d9c15117 	ldw	r7,1348(sp)
  804d48:	103e2e1e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  804d4c:	dc800e17 	ldw	r18,56(sp)
  804d50:	dc400d17 	ldw	r17,52(sp)
  804d54:	dd401904 	addi	r21,sp,100
  804d58:	003dba06 	br	804444 <___vfprintf_internal_r+0x520>
  804d5c:	d9014f17 	ldw	r4,1340(sp)
  804d60:	b00b883a 	mov	r5,r22
  804d64:	d9800c04 	addi	r6,sp,48
  804d68:	0803ecc0 	call	803ecc <__sprint_r>
  804d6c:	103e251e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  804d70:	dc800e17 	ldw	r18,56(sp)
  804d74:	dc400d17 	ldw	r17,52(sp)
  804d78:	dcc01904 	addi	r19,sp,100
  804d7c:	003e4206 	br	804688 <___vfprintf_internal_r+0x764>
  804d80:	d9014f17 	ldw	r4,1340(sp)
  804d84:	b00b883a 	mov	r5,r22
  804d88:	d9800c04 	addi	r6,sp,48
  804d8c:	0803ecc0 	call	803ecc <__sprint_r>
  804d90:	103e1c1e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  804d94:	dc800e17 	ldw	r18,56(sp)
  804d98:	dc400d17 	ldw	r17,52(sp)
  804d9c:	d8c01904 	addi	r3,sp,100
  804da0:	003e2e06 	br	80465c <___vfprintf_internal_r+0x738>
  804da4:	d9414c17 	ldw	r5,1328(sp)
  804da8:	2880004c 	andi	r2,r5,1
  804dac:	1005003a 	cmpeq	r2,r2,zero
  804db0:	103dda1e 	bne	r2,zero,80451c <___vfprintf_internal_r+0x5f8>
  804db4:	003e9f06 	br	804834 <___vfprintf_internal_r+0x910>
  804db8:	d8c14117 	ldw	r3,1284(sp)
  804dbc:	9125883a 	add	r18,r18,r4
  804dc0:	8c400044 	addi	r17,r17,1
  804dc4:	008001c4 	movi	r2,7
  804dc8:	a8c00015 	stw	r3,0(r21)
  804dcc:	a9000115 	stw	r4,4(r21)
  804dd0:	dc800e15 	stw	r18,56(sp)
  804dd4:	dc400d15 	stw	r17,52(sp)
  804dd8:	14426616 	blt	r2,r17,805774 <___vfprintf_internal_r+0x1850>
  804ddc:	a8c00204 	addi	r3,r21,8
  804de0:	d9414917 	ldw	r5,1316(sp)
  804de4:	00800044 	movi	r2,1
  804de8:	94800044 	addi	r18,r18,1
  804dec:	8c400044 	addi	r17,r17,1
  804df0:	18800115 	stw	r2,4(r3)
  804df4:	008001c4 	movi	r2,7
  804df8:	19400015 	stw	r5,0(r3)
  804dfc:	dc800e15 	stw	r18,56(sp)
  804e00:	dc400d15 	stw	r17,52(sp)
  804e04:	2021883a 	mov	r16,r4
  804e08:	14425016 	blt	r2,r17,80574c <___vfprintf_internal_r+0x1828>
  804e0c:	19400204 	addi	r5,r3,8
  804e10:	d9814717 	ldw	r6,1308(sp)
  804e14:	8c400044 	addi	r17,r17,1
  804e18:	dc400d15 	stw	r17,52(sp)
  804e1c:	3107c83a 	sub	r3,r6,r4
  804e20:	d9014117 	ldw	r4,1284(sp)
  804e24:	90e5883a 	add	r18,r18,r3
  804e28:	28c00115 	stw	r3,4(r5)
  804e2c:	8105883a 	add	r2,r16,r4
  804e30:	28800015 	stw	r2,0(r5)
  804e34:	008001c4 	movi	r2,7
  804e38:	dc800e15 	stw	r18,56(sp)
  804e3c:	147f1d16 	blt	r2,r17,804ab4 <___vfprintf_internal_r+0xb90>
  804e40:	28c00204 	addi	r3,r5,8
  804e44:	003db506 	br	80451c <___vfprintf_internal_r+0x5f8>
  804e48:	3c000017 	ldw	r16,0(r7)
  804e4c:	3c400117 	ldw	r17,4(r7)
  804e50:	39800204 	addi	r6,r7,8
  804e54:	01000044 	movi	r4,1
  804e58:	d9814015 	stw	r6,1280(sp)
  804e5c:	d8000405 	stb	zero,16(sp)
  804e60:	003ebe06 	br	80495c <___vfprintf_internal_r+0xa38>
  804e64:	3c000017 	ldw	r16,0(r7)
  804e68:	3c400117 	ldw	r17,4(r7)
  804e6c:	38800204 	addi	r2,r7,8
  804e70:	d8814015 	stw	r2,1280(sp)
  804e74:	003eb706 	br	804954 <___vfprintf_internal_r+0xa30>
  804e78:	3c000017 	ldw	r16,0(r7)
  804e7c:	3c400117 	ldw	r17,4(r7)
  804e80:	39000204 	addi	r4,r7,8
  804e84:	d9014015 	stw	r4,1280(sp)
  804e88:	0009883a 	mov	r4,zero
  804e8c:	d8000405 	stb	zero,16(sp)
  804e90:	003eb206 	br	80495c <___vfprintf_internal_r+0xa38>
  804e94:	38c00017 	ldw	r3,0(r7)
  804e98:	39c00104 	addi	r7,r7,4
  804e9c:	d8c14a15 	stw	r3,1320(sp)
  804ea0:	1800d10e 	bge	r3,zero,8051e8 <___vfprintf_internal_r+0x12c4>
  804ea4:	00c7c83a 	sub	r3,zero,r3
  804ea8:	d8c14a15 	stw	r3,1320(sp)
  804eac:	d9014c17 	ldw	r4,1328(sp)
  804eb0:	b8c00007 	ldb	r3,0(r23)
  804eb4:	21000114 	ori	r4,r4,4
  804eb8:	d9014c15 	stw	r4,1328(sp)
  804ebc:	003c9806 	br	804120 <___vfprintf_internal_r+0x1fc>
  804ec0:	d9814c17 	ldw	r6,1328(sp)
  804ec4:	3080080c 	andi	r2,r6,32
  804ec8:	1001f026 	beq	r2,zero,80568c <___vfprintf_internal_r+0x1768>
  804ecc:	d9014b17 	ldw	r4,1324(sp)
  804ed0:	38800017 	ldw	r2,0(r7)
  804ed4:	39c00104 	addi	r7,r7,4
  804ed8:	d9c14015 	stw	r7,1280(sp)
  804edc:	2007d7fa 	srai	r3,r4,31
  804ee0:	d9c14017 	ldw	r7,1280(sp)
  804ee4:	11000015 	stw	r4,0(r2)
  804ee8:	10c00115 	stw	r3,4(r2)
  804eec:	003c6906 	br	804094 <___vfprintf_internal_r+0x170>
  804ef0:	b8c00007 	ldb	r3,0(r23)
  804ef4:	00801b04 	movi	r2,108
  804ef8:	18824f26 	beq	r3,r2,805838 <___vfprintf_internal_r+0x1914>
  804efc:	d9414c17 	ldw	r5,1328(sp)
  804f00:	29400414 	ori	r5,r5,16
  804f04:	d9414c15 	stw	r5,1328(sp)
  804f08:	003c8506 	br	804120 <___vfprintf_internal_r+0x1fc>
  804f0c:	d9814c17 	ldw	r6,1328(sp)
  804f10:	b8c00007 	ldb	r3,0(r23)
  804f14:	31800814 	ori	r6,r6,32
  804f18:	d9814c15 	stw	r6,1328(sp)
  804f1c:	003c8006 	br	804120 <___vfprintf_internal_r+0x1fc>
  804f20:	d8814c17 	ldw	r2,1328(sp)
  804f24:	3c000017 	ldw	r16,0(r7)
  804f28:	00c01e04 	movi	r3,120
  804f2c:	10800094 	ori	r2,r2,2
  804f30:	d8814c15 	stw	r2,1328(sp)
  804f34:	39c00104 	addi	r7,r7,4
  804f38:	01402074 	movhi	r5,129
  804f3c:	2947c304 	addi	r5,r5,7948
  804f40:	00800c04 	movi	r2,48
  804f44:	0023883a 	mov	r17,zero
  804f48:	01000084 	movi	r4,2
  804f4c:	d9c14015 	stw	r7,1280(sp)
  804f50:	d8c14d15 	stw	r3,1332(sp)
  804f54:	d9414415 	stw	r5,1296(sp)
  804f58:	d8800445 	stb	r2,17(sp)
  804f5c:	d8c00485 	stb	r3,18(sp)
  804f60:	d8000405 	stb	zero,16(sp)
  804f64:	003e7d06 	br	80495c <___vfprintf_internal_r+0xa38>
  804f68:	d8814c17 	ldw	r2,1328(sp)
  804f6c:	b8c00007 	ldb	r3,0(r23)
  804f70:	10801014 	ori	r2,r2,64
  804f74:	d8814c15 	stw	r2,1328(sp)
  804f78:	003c6906 	br	804120 <___vfprintf_internal_r+0x1fc>
  804f7c:	d9414c17 	ldw	r5,1328(sp)
  804f80:	2880020c 	andi	r2,r5,8
  804f84:	1001df26 	beq	r2,zero,805704 <___vfprintf_internal_r+0x17e0>
  804f88:	39800017 	ldw	r6,0(r7)
  804f8c:	38800204 	addi	r2,r7,8
  804f90:	d8814015 	stw	r2,1280(sp)
  804f94:	d9814215 	stw	r6,1288(sp)
  804f98:	39c00117 	ldw	r7,4(r7)
  804f9c:	d9c14315 	stw	r7,1292(sp)
  804fa0:	d9014217 	ldw	r4,1288(sp)
  804fa4:	d9414317 	ldw	r5,1292(sp)
  804fa8:	080a8c40 	call	80a8c4 <__isinfd>
  804fac:	10021726 	beq	r2,zero,80580c <___vfprintf_internal_r+0x18e8>
  804fb0:	d9014217 	ldw	r4,1288(sp)
  804fb4:	d9414317 	ldw	r5,1292(sp)
  804fb8:	000d883a 	mov	r6,zero
  804fbc:	000f883a 	mov	r7,zero
  804fc0:	080c1280 	call	80c128 <__ltdf2>
  804fc4:	1002ca16 	blt	r2,zero,805af0 <___vfprintf_internal_r+0x1bcc>
  804fc8:	d9414d17 	ldw	r5,1332(sp)
  804fcc:	008011c4 	movi	r2,71
  804fd0:	11420a16 	blt	r2,r5,8057fc <___vfprintf_internal_r+0x18d8>
  804fd4:	01802074 	movhi	r6,129
  804fd8:	3187c804 	addi	r6,r6,7968
  804fdc:	d9814115 	stw	r6,1284(sp)
  804fe0:	d9014c17 	ldw	r4,1328(sp)
  804fe4:	00c000c4 	movi	r3,3
  804fe8:	00bfdfc4 	movi	r2,-129
  804fec:	2088703a 	and	r4,r4,r2
  804ff0:	180f883a 	mov	r7,r3
  804ff4:	d8c14515 	stw	r3,1300(sp)
  804ff8:	d9014c15 	stw	r4,1328(sp)
  804ffc:	d8014615 	stw	zero,1304(sp)
  805000:	003e6a06 	br	8049ac <___vfprintf_internal_r+0xa88>
  805004:	38800017 	ldw	r2,0(r7)
  805008:	00c00044 	movi	r3,1
  80500c:	39c00104 	addi	r7,r7,4
  805010:	d9c14015 	stw	r7,1280(sp)
  805014:	d9000f04 	addi	r4,sp,60
  805018:	180f883a 	mov	r7,r3
  80501c:	d8c14515 	stw	r3,1300(sp)
  805020:	d9014115 	stw	r4,1284(sp)
  805024:	d8800f05 	stb	r2,60(sp)
  805028:	d8000405 	stb	zero,16(sp)
  80502c:	003cac06 	br	8042e0 <___vfprintf_internal_r+0x3bc>
  805030:	01402074 	movhi	r5,129
  805034:	2947ce04 	addi	r5,r5,7992
  805038:	d9414415 	stw	r5,1296(sp)
  80503c:	d9814c17 	ldw	r6,1328(sp)
  805040:	3080080c 	andi	r2,r6,32
  805044:	1000f926 	beq	r2,zero,80542c <___vfprintf_internal_r+0x1508>
  805048:	3c000017 	ldw	r16,0(r7)
  80504c:	3c400117 	ldw	r17,4(r7)
  805050:	38800204 	addi	r2,r7,8
  805054:	d8814015 	stw	r2,1280(sp)
  805058:	d9414c17 	ldw	r5,1328(sp)
  80505c:	2880004c 	andi	r2,r5,1
  805060:	1005003a 	cmpeq	r2,r2,zero
  805064:	1000b31e 	bne	r2,zero,805334 <___vfprintf_internal_r+0x1410>
  805068:	8444b03a 	or	r2,r16,r17
  80506c:	1000b126 	beq	r2,zero,805334 <___vfprintf_internal_r+0x1410>
  805070:	d9814d17 	ldw	r6,1332(sp)
  805074:	29400094 	ori	r5,r5,2
  805078:	00800c04 	movi	r2,48
  80507c:	01000084 	movi	r4,2
  805080:	d9414c15 	stw	r5,1328(sp)
  805084:	d8800445 	stb	r2,17(sp)
  805088:	d9800485 	stb	r6,18(sp)
  80508c:	d8000405 	stb	zero,16(sp)
  805090:	003e3206 	br	80495c <___vfprintf_internal_r+0xa38>
  805094:	01802074 	movhi	r6,129
  805098:	3187c304 	addi	r6,r6,7948
  80509c:	d9814415 	stw	r6,1296(sp)
  8050a0:	003fe606 	br	80503c <___vfprintf_internal_r+0x1118>
  8050a4:	00800ac4 	movi	r2,43
  8050a8:	d8800405 	stb	r2,16(sp)
  8050ac:	b8c00007 	ldb	r3,0(r23)
  8050b0:	003c1b06 	br	804120 <___vfprintf_internal_r+0x1fc>
  8050b4:	d8814c17 	ldw	r2,1328(sp)
  8050b8:	b8c00007 	ldb	r3,0(r23)
  8050bc:	10800054 	ori	r2,r2,1
  8050c0:	d8814c15 	stw	r2,1328(sp)
  8050c4:	003c1606 	br	804120 <___vfprintf_internal_r+0x1fc>
  8050c8:	d8800407 	ldb	r2,16(sp)
  8050cc:	1000461e 	bne	r2,zero,8051e8 <___vfprintf_internal_r+0x12c4>
  8050d0:	00800804 	movi	r2,32
  8050d4:	d8800405 	stb	r2,16(sp)
  8050d8:	b8c00007 	ldb	r3,0(r23)
  8050dc:	003c1006 	br	804120 <___vfprintf_internal_r+0x1fc>
  8050e0:	d9814c17 	ldw	r6,1328(sp)
  8050e4:	b8c00007 	ldb	r3,0(r23)
  8050e8:	31800214 	ori	r6,r6,8
  8050ec:	d9814c15 	stw	r6,1328(sp)
  8050f0:	003c0b06 	br	804120 <___vfprintf_internal_r+0x1fc>
  8050f4:	0007883a 	mov	r3,zero
  8050f8:	01000244 	movi	r4,9
  8050fc:	188002a4 	muli	r2,r3,10
  805100:	b8c00007 	ldb	r3,0(r23)
  805104:	d9814d17 	ldw	r6,1332(sp)
  805108:	bdc00044 	addi	r23,r23,1
  80510c:	d8c14d15 	stw	r3,1332(sp)
  805110:	d9414d17 	ldw	r5,1332(sp)
  805114:	3085883a 	add	r2,r6,r2
  805118:	10fff404 	addi	r3,r2,-48
  80511c:	28bff404 	addi	r2,r5,-48
  805120:	20bff62e 	bgeu	r4,r2,8050fc <___vfprintf_internal_r+0x11d8>
  805124:	d8c14a15 	stw	r3,1320(sp)
  805128:	003bff06 	br	804128 <___vfprintf_internal_r+0x204>
  80512c:	d9414c17 	ldw	r5,1328(sp)
  805130:	b8c00007 	ldb	r3,0(r23)
  805134:	29402014 	ori	r5,r5,128
  805138:	d9414c15 	stw	r5,1328(sp)
  80513c:	003bf806 	br	804120 <___vfprintf_internal_r+0x1fc>
  805140:	b8c00007 	ldb	r3,0(r23)
  805144:	00800a84 	movi	r2,42
  805148:	bdc00044 	addi	r23,r23,1
  80514c:	18831526 	beq	r3,r2,805da4 <___vfprintf_internal_r+0x1e80>
  805150:	d8c14d15 	stw	r3,1332(sp)
  805154:	18bff404 	addi	r2,r3,-48
  805158:	00c00244 	movi	r3,9
  80515c:	18827836 	bltu	r3,r2,805b40 <___vfprintf_internal_r+0x1c1c>
  805160:	000d883a 	mov	r6,zero
  805164:	308002a4 	muli	r2,r6,10
  805168:	b9800007 	ldb	r6,0(r23)
  80516c:	d9414d17 	ldw	r5,1332(sp)
  805170:	bdc00044 	addi	r23,r23,1
  805174:	d9814d15 	stw	r6,1332(sp)
  805178:	d9014d17 	ldw	r4,1332(sp)
  80517c:	1145883a 	add	r2,r2,r5
  805180:	11bff404 	addi	r6,r2,-48
  805184:	20bff404 	addi	r2,r4,-48
  805188:	18bff62e 	bgeu	r3,r2,805164 <___vfprintf_internal_r+0x1240>
  80518c:	3027883a 	mov	r19,r6
  805190:	303be50e 	bge	r6,zero,804128 <___vfprintf_internal_r+0x204>
  805194:	04ffffc4 	movi	r19,-1
  805198:	003be306 	br	804128 <___vfprintf_internal_r+0x204>
  80519c:	d8000405 	stb	zero,16(sp)
  8051a0:	39800017 	ldw	r6,0(r7)
  8051a4:	39c00104 	addi	r7,r7,4
  8051a8:	d9c14015 	stw	r7,1280(sp)
  8051ac:	d9814115 	stw	r6,1284(sp)
  8051b0:	3001c926 	beq	r6,zero,8058d8 <___vfprintf_internal_r+0x19b4>
  8051b4:	98000e16 	blt	r19,zero,8051f0 <___vfprintf_internal_r+0x12cc>
  8051b8:	d9014117 	ldw	r4,1284(sp)
  8051bc:	000b883a 	mov	r5,zero
  8051c0:	980d883a 	mov	r6,r19
  8051c4:	0808fe00 	call	808fe0 <memchr>
  8051c8:	10025926 	beq	r2,zero,805b30 <___vfprintf_internal_r+0x1c0c>
  8051cc:	d8c14117 	ldw	r3,1284(sp)
  8051d0:	10cfc83a 	sub	r7,r2,r3
  8051d4:	99c19e16 	blt	r19,r7,805850 <___vfprintf_internal_r+0x192c>
  8051d8:	d9c14515 	stw	r7,1300(sp)
  8051dc:	38000916 	blt	r7,zero,805204 <___vfprintf_internal_r+0x12e0>
  8051e0:	d8014615 	stw	zero,1304(sp)
  8051e4:	003df106 	br	8049ac <___vfprintf_internal_r+0xa88>
  8051e8:	b8c00007 	ldb	r3,0(r23)
  8051ec:	003bcc06 	br	804120 <___vfprintf_internal_r+0x1fc>
  8051f0:	d9014117 	ldw	r4,1284(sp)
  8051f4:	0803e580 	call	803e58 <strlen>
  8051f8:	d8814515 	stw	r2,1300(sp)
  8051fc:	100f883a 	mov	r7,r2
  805200:	103ff70e 	bge	r2,zero,8051e0 <___vfprintf_internal_r+0x12bc>
  805204:	d8014515 	stw	zero,1300(sp)
  805208:	d8014615 	stw	zero,1304(sp)
  80520c:	003de706 	br	8049ac <___vfprintf_internal_r+0xa88>
  805210:	20c03fcc 	andi	r3,r4,255
  805214:	00800044 	movi	r2,1
  805218:	18802d26 	beq	r3,r2,8052d0 <___vfprintf_internal_r+0x13ac>
  80521c:	18800e36 	bltu	r3,r2,805258 <___vfprintf_internal_r+0x1334>
  805220:	00800084 	movi	r2,2
  805224:	1880fa26 	beq	r3,r2,805610 <___vfprintf_internal_r+0x16ec>
  805228:	01002074 	movhi	r4,129
  80522c:	2107d304 	addi	r4,r4,8012
  805230:	0803e580 	call	803e58 <strlen>
  805234:	100f883a 	mov	r7,r2
  805238:	dcc14515 	stw	r19,1300(sp)
  80523c:	9880010e 	bge	r19,r2,805244 <___vfprintf_internal_r+0x1320>
  805240:	d8814515 	stw	r2,1300(sp)
  805244:	00802074 	movhi	r2,129
  805248:	1087d304 	addi	r2,r2,8012
  80524c:	dcc14615 	stw	r19,1304(sp)
  805250:	d8814115 	stw	r2,1284(sp)
  805254:	003dd506 	br	8049ac <___vfprintf_internal_r+0xa88>
  805258:	d9401904 	addi	r5,sp,100
  80525c:	dd000f04 	addi	r20,sp,60
  805260:	d9414115 	stw	r5,1284(sp)
  805264:	880a977a 	slli	r5,r17,29
  805268:	d9814117 	ldw	r6,1284(sp)
  80526c:	8004d0fa 	srli	r2,r16,3
  805270:	8806d0fa 	srli	r3,r17,3
  805274:	810001cc 	andi	r4,r16,7
  805278:	2884b03a 	or	r2,r5,r2
  80527c:	31bfffc4 	addi	r6,r6,-1
  805280:	21000c04 	addi	r4,r4,48
  805284:	d9814115 	stw	r6,1284(sp)
  805288:	10cab03a 	or	r5,r2,r3
  80528c:	31000005 	stb	r4,0(r6)
  805290:	1021883a 	mov	r16,r2
  805294:	1823883a 	mov	r17,r3
  805298:	283ff21e 	bne	r5,zero,805264 <___vfprintf_internal_r+0x1340>
  80529c:	d8c14c17 	ldw	r3,1328(sp)
  8052a0:	1880004c 	andi	r2,r3,1
  8052a4:	1005003a 	cmpeq	r2,r2,zero
  8052a8:	103db91e 	bne	r2,zero,804990 <___vfprintf_internal_r+0xa6c>
  8052ac:	20803fcc 	andi	r2,r4,255
  8052b0:	1080201c 	xori	r2,r2,128
  8052b4:	10bfe004 	addi	r2,r2,-128
  8052b8:	00c00c04 	movi	r3,48
  8052bc:	10fdb426 	beq	r2,r3,804990 <___vfprintf_internal_r+0xa6c>
  8052c0:	31bfffc4 	addi	r6,r6,-1
  8052c4:	d9814115 	stw	r6,1284(sp)
  8052c8:	30c00005 	stb	r3,0(r6)
  8052cc:	003db006 	br	804990 <___vfprintf_internal_r+0xa6c>
  8052d0:	88800068 	cmpgeui	r2,r17,1
  8052d4:	10002c1e 	bne	r2,zero,805388 <___vfprintf_internal_r+0x1464>
  8052d8:	8800021e 	bne	r17,zero,8052e4 <___vfprintf_internal_r+0x13c0>
  8052dc:	00800244 	movi	r2,9
  8052e0:	14002936 	bltu	r2,r16,805388 <___vfprintf_internal_r+0x1464>
  8052e4:	d90018c4 	addi	r4,sp,99
  8052e8:	dd000f04 	addi	r20,sp,60
  8052ec:	d9014115 	stw	r4,1284(sp)
  8052f0:	d9014117 	ldw	r4,1284(sp)
  8052f4:	80800c04 	addi	r2,r16,48
  8052f8:	20800005 	stb	r2,0(r4)
  8052fc:	003da406 	br	804990 <___vfprintf_internal_r+0xa6c>
  805300:	dc400d17 	ldw	r17,52(sp)
  805304:	07002074 	movhi	fp,129
  805308:	e707d984 	addi	fp,fp,8038
  80530c:	9425883a 	add	r18,r18,r16
  805310:	8c400044 	addi	r17,r17,1
  805314:	008001c4 	movi	r2,7
  805318:	1f000015 	stw	fp,0(r3)
  80531c:	1c000115 	stw	r16,4(r3)
  805320:	dc800e15 	stw	r18,56(sp)
  805324:	dc400d15 	stw	r17,52(sp)
  805328:	147de216 	blt	r2,r17,804ab4 <___vfprintf_internal_r+0xb90>
  80532c:	18c00204 	addi	r3,r3,8
  805330:	003c7a06 	br	80451c <___vfprintf_internal_r+0x5f8>
  805334:	01000084 	movi	r4,2
  805338:	d8000405 	stb	zero,16(sp)
  80533c:	003d8706 	br	80495c <___vfprintf_internal_r+0xa38>
  805340:	d9814c17 	ldw	r6,1328(sp)
  805344:	30c4703a 	and	r2,r6,r3
  805348:	1005003a 	cmpeq	r2,r2,zero
  80534c:	103cb926 	beq	r2,zero,804634 <___vfprintf_internal_r+0x710>
  805350:	d9014117 	ldw	r4,1284(sp)
  805354:	94800044 	addi	r18,r18,1
  805358:	8c400044 	addi	r17,r17,1
  80535c:	008001c4 	movi	r2,7
  805360:	a9000015 	stw	r4,0(r21)
  805364:	a8c00115 	stw	r3,4(r21)
  805368:	dc800e15 	stw	r18,56(sp)
  80536c:	dc400d15 	stw	r17,52(sp)
  805370:	147e6616 	blt	r2,r17,804d0c <___vfprintf_internal_r+0xde8>
  805374:	acc00204 	addi	r19,r21,8
  805378:	003cd706 	br	8046d8 <___vfprintf_internal_r+0x7b4>
  80537c:	07002074 	movhi	fp,129
  805380:	e707d984 	addi	fp,fp,8038
  805384:	003c4f06 	br	8044c4 <___vfprintf_internal_r+0x5a0>
  805388:	dd000f04 	addi	r20,sp,60
  80538c:	dc801904 	addi	r18,sp,100
  805390:	8009883a 	mov	r4,r16
  805394:	880b883a 	mov	r5,r17
  805398:	01800284 	movi	r6,10
  80539c:	000f883a 	mov	r7,zero
  8053a0:	080b61c0 	call	80b61c <__umoddi3>
  8053a4:	12000c04 	addi	r8,r2,48
  8053a8:	94bfffc4 	addi	r18,r18,-1
  8053ac:	8009883a 	mov	r4,r16
  8053b0:	880b883a 	mov	r5,r17
  8053b4:	01800284 	movi	r6,10
  8053b8:	000f883a 	mov	r7,zero
  8053bc:	92000005 	stb	r8,0(r18)
  8053c0:	080b0400 	call	80b040 <__udivdi3>
  8053c4:	1009883a 	mov	r4,r2
  8053c8:	1021883a 	mov	r16,r2
  8053cc:	18800068 	cmpgeui	r2,r3,1
  8053d0:	1823883a 	mov	r17,r3
  8053d4:	103fee1e 	bne	r2,zero,805390 <___vfprintf_internal_r+0x146c>
  8053d8:	1800021e 	bne	r3,zero,8053e4 <___vfprintf_internal_r+0x14c0>
  8053dc:	00800244 	movi	r2,9
  8053e0:	113feb36 	bltu	r2,r4,805390 <___vfprintf_internal_r+0x146c>
  8053e4:	94bfffc4 	addi	r18,r18,-1
  8053e8:	dc814115 	stw	r18,1284(sp)
  8053ec:	003fc006 	br	8052f0 <___vfprintf_internal_r+0x13cc>
  8053f0:	d9014c17 	ldw	r4,1328(sp)
  8053f4:	2080004c 	andi	r2,r4,1
  8053f8:	10009a1e 	bne	r2,zero,805664 <___vfprintf_internal_r+0x1740>
  8053fc:	d9401904 	addi	r5,sp,100
  805400:	dd000f04 	addi	r20,sp,60
  805404:	d9414115 	stw	r5,1284(sp)
  805408:	003d6106 	br	804990 <___vfprintf_internal_r+0xa6c>
  80540c:	d9014f17 	ldw	r4,1340(sp)
  805410:	b00b883a 	mov	r5,r22
  805414:	d9800c04 	addi	r6,sp,48
  805418:	0803ecc0 	call	803ecc <__sprint_r>
  80541c:	103c791e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  805420:	dc800e17 	ldw	r18,56(sp)
  805424:	d8c01904 	addi	r3,sp,100
  805428:	003cff06 	br	804828 <___vfprintf_internal_r+0x904>
  80542c:	d8c14c17 	ldw	r3,1328(sp)
  805430:	1880040c 	andi	r2,r3,16
  805434:	1000711e 	bne	r2,zero,8055fc <___vfprintf_internal_r+0x16d8>
  805438:	d9014c17 	ldw	r4,1328(sp)
  80543c:	2080100c 	andi	r2,r4,64
  805440:	10006e26 	beq	r2,zero,8055fc <___vfprintf_internal_r+0x16d8>
  805444:	3c00000b 	ldhu	r16,0(r7)
  805448:	0023883a 	mov	r17,zero
  80544c:	39c00104 	addi	r7,r7,4
  805450:	d9c14015 	stw	r7,1280(sp)
  805454:	003f0006 	br	805058 <___vfprintf_internal_r+0x1134>
  805458:	dc400d17 	ldw	r17,52(sp)
  80545c:	07002074 	movhi	fp,129
  805460:	e707d984 	addi	fp,fp,8038
  805464:	9425883a 	add	r18,r18,r16
  805468:	8c400044 	addi	r17,r17,1
  80546c:	008001c4 	movi	r2,7
  805470:	1f000015 	stw	fp,0(r3)
  805474:	1c000115 	stw	r16,4(r3)
  805478:	dc800e15 	stw	r18,56(sp)
  80547c:	dc400d15 	stw	r17,52(sp)
  805480:	147d7616 	blt	r2,r17,804a5c <___vfprintf_internal_r+0xb38>
  805484:	18c00204 	addi	r3,r3,8
  805488:	003d7b06 	br	804a78 <___vfprintf_internal_r+0xb54>
  80548c:	dc800e17 	ldw	r18,56(sp)
  805490:	dc400d17 	ldw	r17,52(sp)
  805494:	07002074 	movhi	fp,129
  805498:	e707dd84 	addi	fp,fp,8054
  80549c:	003bc006 	br	8043a0 <___vfprintf_internal_r+0x47c>
  8054a0:	d9014f17 	ldw	r4,1340(sp)
  8054a4:	b00b883a 	mov	r5,r22
  8054a8:	d9800c04 	addi	r6,sp,48
  8054ac:	0803ecc0 	call	803ecc <__sprint_r>
  8054b0:	103c541e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  8054b4:	dc800e17 	ldw	r18,56(sp)
  8054b8:	d8c01904 	addi	r3,sp,100
  8054bc:	003ce906 	br	804864 <___vfprintf_internal_r+0x940>
  8054c0:	3c000017 	ldw	r16,0(r7)
  8054c4:	0009883a 	mov	r4,zero
  8054c8:	39c00104 	addi	r7,r7,4
  8054cc:	0023883a 	mov	r17,zero
  8054d0:	d9c14015 	stw	r7,1280(sp)
  8054d4:	d8000405 	stb	zero,16(sp)
  8054d8:	003d2006 	br	80495c <___vfprintf_internal_r+0xa38>
  8054dc:	38800017 	ldw	r2,0(r7)
  8054e0:	39c00104 	addi	r7,r7,4
  8054e4:	d9c14015 	stw	r7,1280(sp)
  8054e8:	1023d7fa 	srai	r17,r2,31
  8054ec:	1021883a 	mov	r16,r2
  8054f0:	003d1806 	br	804954 <___vfprintf_internal_r+0xa30>
  8054f4:	3c000017 	ldw	r16,0(r7)
  8054f8:	01000044 	movi	r4,1
  8054fc:	39c00104 	addi	r7,r7,4
  805500:	0023883a 	mov	r17,zero
  805504:	d9c14015 	stw	r7,1280(sp)
  805508:	d8000405 	stb	zero,16(sp)
  80550c:	003d1306 	br	80495c <___vfprintf_internal_r+0xa38>
  805510:	00802074 	movhi	r2,129
  805514:	10875304 	addi	r2,r2,7500
  805518:	94800044 	addi	r18,r18,1
  80551c:	8c400044 	addi	r17,r17,1
  805520:	a8800015 	stw	r2,0(r21)
  805524:	00c00044 	movi	r3,1
  805528:	008001c4 	movi	r2,7
  80552c:	a8c00115 	stw	r3,4(r21)
  805530:	dc800e15 	stw	r18,56(sp)
  805534:	dc400d15 	stw	r17,52(sp)
  805538:	1440ca16 	blt	r2,r17,805864 <___vfprintf_internal_r+0x1940>
  80553c:	a8c00204 	addi	r3,r21,8
  805540:	2000061e 	bne	r4,zero,80555c <___vfprintf_internal_r+0x1638>
  805544:	d9414717 	ldw	r5,1308(sp)
  805548:	2800041e 	bne	r5,zero,80555c <___vfprintf_internal_r+0x1638>
  80554c:	d9814c17 	ldw	r6,1328(sp)
  805550:	3080004c 	andi	r2,r6,1
  805554:	1005003a 	cmpeq	r2,r2,zero
  805558:	103bf01e 	bne	r2,zero,80451c <___vfprintf_internal_r+0x5f8>
  80555c:	00800044 	movi	r2,1
  805560:	dc400d17 	ldw	r17,52(sp)
  805564:	18800115 	stw	r2,4(r3)
  805568:	d8814917 	ldw	r2,1316(sp)
  80556c:	94800044 	addi	r18,r18,1
  805570:	8c400044 	addi	r17,r17,1
  805574:	18800015 	stw	r2,0(r3)
  805578:	008001c4 	movi	r2,7
  80557c:	dc800e15 	stw	r18,56(sp)
  805580:	dc400d15 	stw	r17,52(sp)
  805584:	1440ca16 	blt	r2,r17,8058b0 <___vfprintf_internal_r+0x198c>
  805588:	18c00204 	addi	r3,r3,8
  80558c:	0121c83a 	sub	r16,zero,r4
  805590:	0400500e 	bge	zero,r16,8056d4 <___vfprintf_internal_r+0x17b0>
  805594:	00800404 	movi	r2,16
  805598:	1400800e 	bge	r2,r16,80579c <___vfprintf_internal_r+0x1878>
  80559c:	1027883a 	mov	r19,r2
  8055a0:	07002074 	movhi	fp,129
  8055a4:	e707d984 	addi	fp,fp,8038
  8055a8:	050001c4 	movi	r20,7
  8055ac:	00000306 	br	8055bc <___vfprintf_internal_r+0x1698>
  8055b0:	18c00204 	addi	r3,r3,8
  8055b4:	843ffc04 	addi	r16,r16,-16
  8055b8:	9c007a0e 	bge	r19,r16,8057a4 <___vfprintf_internal_r+0x1880>
  8055bc:	94800404 	addi	r18,r18,16
  8055c0:	8c400044 	addi	r17,r17,1
  8055c4:	1f000015 	stw	fp,0(r3)
  8055c8:	1cc00115 	stw	r19,4(r3)
  8055cc:	dc800e15 	stw	r18,56(sp)
  8055d0:	dc400d15 	stw	r17,52(sp)
  8055d4:	a47ff60e 	bge	r20,r17,8055b0 <___vfprintf_internal_r+0x168c>
  8055d8:	d9014f17 	ldw	r4,1340(sp)
  8055dc:	b00b883a 	mov	r5,r22
  8055e0:	d9800c04 	addi	r6,sp,48
  8055e4:	0803ecc0 	call	803ecc <__sprint_r>
  8055e8:	103c061e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  8055ec:	dc800e17 	ldw	r18,56(sp)
  8055f0:	dc400d17 	ldw	r17,52(sp)
  8055f4:	d8c01904 	addi	r3,sp,100
  8055f8:	003fee06 	br	8055b4 <___vfprintf_internal_r+0x1690>
  8055fc:	3c000017 	ldw	r16,0(r7)
  805600:	0023883a 	mov	r17,zero
  805604:	39c00104 	addi	r7,r7,4
  805608:	d9c14015 	stw	r7,1280(sp)
  80560c:	003e9206 	br	805058 <___vfprintf_internal_r+0x1134>
  805610:	d9401904 	addi	r5,sp,100
  805614:	dd000f04 	addi	r20,sp,60
  805618:	d9414115 	stw	r5,1284(sp)
  80561c:	d9814417 	ldw	r6,1296(sp)
  805620:	880a973a 	slli	r5,r17,28
  805624:	8004d13a 	srli	r2,r16,4
  805628:	810003cc 	andi	r4,r16,15
  80562c:	3109883a 	add	r4,r6,r4
  805630:	2884b03a 	or	r2,r5,r2
  805634:	21400003 	ldbu	r5,0(r4)
  805638:	d9014117 	ldw	r4,1284(sp)
  80563c:	8806d13a 	srli	r3,r17,4
  805640:	1021883a 	mov	r16,r2
  805644:	213fffc4 	addi	r4,r4,-1
  805648:	d9014115 	stw	r4,1284(sp)
  80564c:	d9814117 	ldw	r6,1284(sp)
  805650:	10c8b03a 	or	r4,r2,r3
  805654:	1823883a 	mov	r17,r3
  805658:	31400005 	stb	r5,0(r6)
  80565c:	203fef1e 	bne	r4,zero,80561c <___vfprintf_internal_r+0x16f8>
  805660:	003ccb06 	br	804990 <___vfprintf_internal_r+0xa6c>
  805664:	00800c04 	movi	r2,48
  805668:	d98018c4 	addi	r6,sp,99
  80566c:	dd000f04 	addi	r20,sp,60
  805670:	d88018c5 	stb	r2,99(sp)
  805674:	d9814115 	stw	r6,1284(sp)
  805678:	003cc506 	br	804990 <___vfprintf_internal_r+0xa6c>
  80567c:	dc400d17 	ldw	r17,52(sp)
  805680:	07002074 	movhi	fp,129
  805684:	e707dd84 	addi	fp,fp,8054
  805688:	003bc706 	br	8045a8 <___vfprintf_internal_r+0x684>
  80568c:	d9414c17 	ldw	r5,1328(sp)
  805690:	2880040c 	andi	r2,r5,16
  805694:	10007c26 	beq	r2,zero,805888 <___vfprintf_internal_r+0x1964>
  805698:	38800017 	ldw	r2,0(r7)
  80569c:	39c00104 	addi	r7,r7,4
  8056a0:	d9c14015 	stw	r7,1280(sp)
  8056a4:	d9814b17 	ldw	r6,1324(sp)
  8056a8:	d9c14017 	ldw	r7,1280(sp)
  8056ac:	11800015 	stw	r6,0(r2)
  8056b0:	003a7806 	br	804094 <___vfprintf_internal_r+0x170>
  8056b4:	d9014f17 	ldw	r4,1340(sp)
  8056b8:	b00b883a 	mov	r5,r22
  8056bc:	d9800c04 	addi	r6,sp,48
  8056c0:	0803ecc0 	call	803ecc <__sprint_r>
  8056c4:	103bcf1e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  8056c8:	dc800e17 	ldw	r18,56(sp)
  8056cc:	dc400d17 	ldw	r17,52(sp)
  8056d0:	d8c01904 	addi	r3,sp,100
  8056d4:	d9014717 	ldw	r4,1308(sp)
  8056d8:	d9414117 	ldw	r5,1284(sp)
  8056dc:	8c400044 	addi	r17,r17,1
  8056e0:	9125883a 	add	r18,r18,r4
  8056e4:	008001c4 	movi	r2,7
  8056e8:	19400015 	stw	r5,0(r3)
  8056ec:	19000115 	stw	r4,4(r3)
  8056f0:	dc800e15 	stw	r18,56(sp)
  8056f4:	dc400d15 	stw	r17,52(sp)
  8056f8:	147cee16 	blt	r2,r17,804ab4 <___vfprintf_internal_r+0xb90>
  8056fc:	18c00204 	addi	r3,r3,8
  805700:	003b8606 	br	80451c <___vfprintf_internal_r+0x5f8>
  805704:	38c00017 	ldw	r3,0(r7)
  805708:	39000204 	addi	r4,r7,8
  80570c:	d9014015 	stw	r4,1280(sp)
  805710:	d8c14215 	stw	r3,1288(sp)
  805714:	39c00117 	ldw	r7,4(r7)
  805718:	d9c14315 	stw	r7,1292(sp)
  80571c:	003e2006 	br	804fa0 <___vfprintf_internal_r+0x107c>
  805720:	0005883a 	mov	r2,zero
  805724:	1409c83a 	sub	r4,r2,r16
  805728:	1105803a 	cmpltu	r2,r2,r4
  80572c:	044bc83a 	sub	r5,zero,r17
  805730:	2885c83a 	sub	r2,r5,r2
  805734:	2021883a 	mov	r16,r4
  805738:	1023883a 	mov	r17,r2
  80573c:	01000044 	movi	r4,1
  805740:	00800b44 	movi	r2,45
  805744:	d8800405 	stb	r2,16(sp)
  805748:	003c8406 	br	80495c <___vfprintf_internal_r+0xa38>
  80574c:	d9014f17 	ldw	r4,1340(sp)
  805750:	b00b883a 	mov	r5,r22
  805754:	d9800c04 	addi	r6,sp,48
  805758:	0803ecc0 	call	803ecc <__sprint_r>
  80575c:	103ba91e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  805760:	dc800e17 	ldw	r18,56(sp)
  805764:	dc400d17 	ldw	r17,52(sp)
  805768:	d9000517 	ldw	r4,20(sp)
  80576c:	d9401904 	addi	r5,sp,100
  805770:	003da706 	br	804e10 <___vfprintf_internal_r+0xeec>
  805774:	d9014f17 	ldw	r4,1340(sp)
  805778:	b00b883a 	mov	r5,r22
  80577c:	d9800c04 	addi	r6,sp,48
  805780:	0803ecc0 	call	803ecc <__sprint_r>
  805784:	103b9f1e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  805788:	dc800e17 	ldw	r18,56(sp)
  80578c:	dc400d17 	ldw	r17,52(sp)
  805790:	d9000517 	ldw	r4,20(sp)
  805794:	d8c01904 	addi	r3,sp,100
  805798:	003d9106 	br	804de0 <___vfprintf_internal_r+0xebc>
  80579c:	07002074 	movhi	fp,129
  8057a0:	e707d984 	addi	fp,fp,8038
  8057a4:	9425883a 	add	r18,r18,r16
  8057a8:	8c400044 	addi	r17,r17,1
  8057ac:	008001c4 	movi	r2,7
  8057b0:	1f000015 	stw	fp,0(r3)
  8057b4:	1c000115 	stw	r16,4(r3)
  8057b8:	dc800e15 	stw	r18,56(sp)
  8057bc:	dc400d15 	stw	r17,52(sp)
  8057c0:	147fbc16 	blt	r2,r17,8056b4 <___vfprintf_internal_r+0x1790>
  8057c4:	18c00204 	addi	r3,r3,8
  8057c8:	003fc206 	br	8056d4 <___vfprintf_internal_r+0x17b0>
  8057cc:	d9014f17 	ldw	r4,1340(sp)
  8057d0:	b00b883a 	mov	r5,r22
  8057d4:	d9800c04 	addi	r6,sp,48
  8057d8:	0803ecc0 	call	803ecc <__sprint_r>
  8057dc:	103b891e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  8057e0:	dc800e17 	ldw	r18,56(sp)
  8057e4:	d9000517 	ldw	r4,20(sp)
  8057e8:	d8c01904 	addi	r3,sp,100
  8057ec:	003d0206 	br	804bf8 <___vfprintf_internal_r+0xcd4>
  8057f0:	07002074 	movhi	fp,129
  8057f4:	e707d984 	addi	fp,fp,8038
  8057f8:	003be406 	br	80478c <___vfprintf_internal_r+0x868>
  8057fc:	00802074 	movhi	r2,129
  805800:	1087c904 	addi	r2,r2,7972
  805804:	d8814115 	stw	r2,1284(sp)
  805808:	003df506 	br	804fe0 <___vfprintf_internal_r+0x10bc>
  80580c:	d9014217 	ldw	r4,1288(sp)
  805810:	d9414317 	ldw	r5,1292(sp)
  805814:	080a9040 	call	80a904 <__isnand>
  805818:	10003926 	beq	r2,zero,805900 <___vfprintf_internal_r+0x19dc>
  80581c:	d9414d17 	ldw	r5,1332(sp)
  805820:	008011c4 	movi	r2,71
  805824:	1140ce16 	blt	r2,r5,805b60 <___vfprintf_internal_r+0x1c3c>
  805828:	01802074 	movhi	r6,129
  80582c:	3187ca04 	addi	r6,r6,7976
  805830:	d9814115 	stw	r6,1284(sp)
  805834:	003dea06 	br	804fe0 <___vfprintf_internal_r+0x10bc>
  805838:	d9014c17 	ldw	r4,1328(sp)
  80583c:	bdc00044 	addi	r23,r23,1
  805840:	b8c00007 	ldb	r3,0(r23)
  805844:	21000814 	ori	r4,r4,32
  805848:	d9014c15 	stw	r4,1328(sp)
  80584c:	003a3406 	br	804120 <___vfprintf_internal_r+0x1fc>
  805850:	dcc14515 	stw	r19,1300(sp)
  805854:	98011016 	blt	r19,zero,805c98 <___vfprintf_internal_r+0x1d74>
  805858:	980f883a 	mov	r7,r19
  80585c:	d8014615 	stw	zero,1304(sp)
  805860:	003c5206 	br	8049ac <___vfprintf_internal_r+0xa88>
  805864:	d9014f17 	ldw	r4,1340(sp)
  805868:	b00b883a 	mov	r5,r22
  80586c:	d9800c04 	addi	r6,sp,48
  805870:	0803ecc0 	call	803ecc <__sprint_r>
  805874:	103b631e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  805878:	dc800e17 	ldw	r18,56(sp)
  80587c:	d9000517 	ldw	r4,20(sp)
  805880:	d8c01904 	addi	r3,sp,100
  805884:	003f2e06 	br	805540 <___vfprintf_internal_r+0x161c>
  805888:	d8c14c17 	ldw	r3,1328(sp)
  80588c:	1880100c 	andi	r2,r3,64
  805890:	1000a026 	beq	r2,zero,805b14 <___vfprintf_internal_r+0x1bf0>
  805894:	38800017 	ldw	r2,0(r7)
  805898:	39c00104 	addi	r7,r7,4
  80589c:	d9c14015 	stw	r7,1280(sp)
  8058a0:	d9014b17 	ldw	r4,1324(sp)
  8058a4:	d9c14017 	ldw	r7,1280(sp)
  8058a8:	1100000d 	sth	r4,0(r2)
  8058ac:	0039f906 	br	804094 <___vfprintf_internal_r+0x170>
  8058b0:	d9014f17 	ldw	r4,1340(sp)
  8058b4:	b00b883a 	mov	r5,r22
  8058b8:	d9800c04 	addi	r6,sp,48
  8058bc:	0803ecc0 	call	803ecc <__sprint_r>
  8058c0:	103b501e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  8058c4:	dc800e17 	ldw	r18,56(sp)
  8058c8:	dc400d17 	ldw	r17,52(sp)
  8058cc:	d9000517 	ldw	r4,20(sp)
  8058d0:	d8c01904 	addi	r3,sp,100
  8058d4:	003f2d06 	br	80558c <___vfprintf_internal_r+0x1668>
  8058d8:	00800184 	movi	r2,6
  8058dc:	14c09a36 	bltu	r2,r19,805b48 <___vfprintf_internal_r+0x1c24>
  8058e0:	dcc14515 	stw	r19,1300(sp)
  8058e4:	9800010e 	bge	r19,zero,8058ec <___vfprintf_internal_r+0x19c8>
  8058e8:	d8014515 	stw	zero,1300(sp)
  8058ec:	00802074 	movhi	r2,129
  8058f0:	1087cc04 	addi	r2,r2,7984
  8058f4:	980f883a 	mov	r7,r19
  8058f8:	d8814115 	stw	r2,1284(sp)
  8058fc:	003a7806 	br	8042e0 <___vfprintf_internal_r+0x3bc>
  805900:	00bfffc4 	movi	r2,-1
  805904:	9880e226 	beq	r19,r2,805c90 <___vfprintf_internal_r+0x1d6c>
  805908:	d9414d17 	ldw	r5,1332(sp)
  80590c:	008019c4 	movi	r2,103
  805910:	2880dc26 	beq	r5,r2,805c84 <___vfprintf_internal_r+0x1d60>
  805914:	008011c4 	movi	r2,71
  805918:	2880da26 	beq	r5,r2,805c84 <___vfprintf_internal_r+0x1d60>
  80591c:	d9414c17 	ldw	r5,1328(sp)
  805920:	d9014317 	ldw	r4,1292(sp)
  805924:	d9814217 	ldw	r6,1288(sp)
  805928:	29404014 	ori	r5,r5,256
  80592c:	d9414c15 	stw	r5,1328(sp)
  805930:	2000cc16 	blt	r4,zero,805c64 <___vfprintf_internal_r+0x1d40>
  805934:	3021883a 	mov	r16,r6
  805938:	2023883a 	mov	r17,r4
  80593c:	0039883a 	mov	fp,zero
  805940:	d9414d17 	ldw	r5,1332(sp)
  805944:	00801984 	movi	r2,102
  805948:	2880b726 	beq	r5,r2,805c28 <___vfprintf_internal_r+0x1d04>
  80594c:	00801184 	movi	r2,70
  805950:	2880b526 	beq	r5,r2,805c28 <___vfprintf_internal_r+0x1d04>
  805954:	00801944 	movi	r2,101
  805958:	2880c826 	beq	r5,r2,805c7c <___vfprintf_internal_r+0x1d58>
  80595c:	00801144 	movi	r2,69
  805960:	2880c626 	beq	r5,r2,805c7c <___vfprintf_internal_r+0x1d58>
  805964:	9829883a 	mov	r20,r19
  805968:	d9014f17 	ldw	r4,1340(sp)
  80596c:	d8800504 	addi	r2,sp,20
  805970:	880d883a 	mov	r6,r17
  805974:	d8800115 	stw	r2,4(sp)
  805978:	d8c00604 	addi	r3,sp,24
  80597c:	d8800704 	addi	r2,sp,28
  805980:	800b883a 	mov	r5,r16
  805984:	01c00084 	movi	r7,2
  805988:	d8c00215 	stw	r3,8(sp)
  80598c:	d8800315 	stw	r2,12(sp)
  805990:	dd000015 	stw	r20,0(sp)
  805994:	08061480 	call	806148 <_dtoa_r>
  805998:	d9814d17 	ldw	r6,1332(sp)
  80599c:	d8814115 	stw	r2,1284(sp)
  8059a0:	008019c4 	movi	r2,103
  8059a4:	30809526 	beq	r6,r2,805bfc <___vfprintf_internal_r+0x1cd8>
  8059a8:	d8c14d17 	ldw	r3,1332(sp)
  8059ac:	008011c4 	movi	r2,71
  8059b0:	18809226 	beq	r3,r2,805bfc <___vfprintf_internal_r+0x1cd8>
  8059b4:	d9414117 	ldw	r5,1284(sp)
  8059b8:	d9814d17 	ldw	r6,1332(sp)
  8059bc:	00801984 	movi	r2,102
  8059c0:	2d25883a 	add	r18,r5,r20
  8059c4:	30808626 	beq	r6,r2,805be0 <___vfprintf_internal_r+0x1cbc>
  8059c8:	00801184 	movi	r2,70
  8059cc:	30808426 	beq	r6,r2,805be0 <___vfprintf_internal_r+0x1cbc>
  8059d0:	000d883a 	mov	r6,zero
  8059d4:	000f883a 	mov	r7,zero
  8059d8:	880b883a 	mov	r5,r17
  8059dc:	8009883a 	mov	r4,r16
  8059e0:	080bf900 	call	80bf90 <__eqdf2>
  8059e4:	1000751e 	bne	r2,zero,805bbc <___vfprintf_internal_r+0x1c98>
  8059e8:	9005883a 	mov	r2,r18
  8059ec:	dc800715 	stw	r18,28(sp)
  8059f0:	d9014117 	ldw	r4,1284(sp)
  8059f4:	d9414d17 	ldw	r5,1332(sp)
  8059f8:	00c019c4 	movi	r3,103
  8059fc:	1125c83a 	sub	r18,r2,r4
  805a00:	28c06826 	beq	r5,r3,805ba4 <___vfprintf_internal_r+0x1c80>
  805a04:	008011c4 	movi	r2,71
  805a08:	28806626 	beq	r5,r2,805ba4 <___vfprintf_internal_r+0x1c80>
  805a0c:	d9000517 	ldw	r4,20(sp)
  805a10:	d8c14d17 	ldw	r3,1332(sp)
  805a14:	00801944 	movi	r2,101
  805a18:	10c05516 	blt	r2,r3,805b70 <___vfprintf_internal_r+0x1c4c>
  805a1c:	213fffc4 	addi	r4,r4,-1
  805a20:	d9000515 	stw	r4,20(sp)
  805a24:	d8c00805 	stb	r3,32(sp)
  805a28:	2021883a 	mov	r16,r4
  805a2c:	2000c116 	blt	r4,zero,805d34 <___vfprintf_internal_r+0x1e10>
  805a30:	00800ac4 	movi	r2,43
  805a34:	d8800845 	stb	r2,33(sp)
  805a38:	00800244 	movi	r2,9
  805a3c:	1400af0e 	bge	r2,r16,805cfc <___vfprintf_internal_r+0x1dd8>
  805a40:	1027883a 	mov	r19,r2
  805a44:	dc400b84 	addi	r17,sp,46
  805a48:	8009883a 	mov	r4,r16
  805a4c:	01400284 	movi	r5,10
  805a50:	080c5f00 	call	80c5f0 <__modsi3>
  805a54:	10800c04 	addi	r2,r2,48
  805a58:	8c7fffc4 	addi	r17,r17,-1
  805a5c:	8009883a 	mov	r4,r16
  805a60:	01400284 	movi	r5,10
  805a64:	88800005 	stb	r2,0(r17)
  805a68:	080c5900 	call	80c590 <__divsi3>
  805a6c:	1021883a 	mov	r16,r2
  805a70:	98bff516 	blt	r19,r2,805a48 <___vfprintf_internal_r+0x1b24>
  805a74:	10c00c04 	addi	r3,r2,48
  805a78:	d88009c4 	addi	r2,sp,39
  805a7c:	108001c4 	addi	r2,r2,7
  805a80:	897fffc4 	addi	r5,r17,-1
  805a84:	88ffffc5 	stb	r3,-1(r17)
  805a88:	2880a72e 	bgeu	r5,r2,805d28 <___vfprintf_internal_r+0x1e04>
  805a8c:	1009883a 	mov	r4,r2
  805a90:	d9800804 	addi	r6,sp,32
  805a94:	d8c00884 	addi	r3,sp,34
  805a98:	28800003 	ldbu	r2,0(r5)
  805a9c:	29400044 	addi	r5,r5,1
  805aa0:	18800005 	stb	r2,0(r3)
  805aa4:	18c00044 	addi	r3,r3,1
  805aa8:	293ffb36 	bltu	r5,r4,805a98 <___vfprintf_internal_r+0x1b74>
  805aac:	1987c83a 	sub	r3,r3,r6
  805ab0:	00800044 	movi	r2,1
  805ab4:	d8c14815 	stw	r3,1312(sp)
  805ab8:	90cf883a 	add	r7,r18,r3
  805abc:	1480960e 	bge	r2,r18,805d18 <___vfprintf_internal_r+0x1df4>
  805ac0:	39c00044 	addi	r7,r7,1
  805ac4:	d9c14515 	stw	r7,1300(sp)
  805ac8:	38003416 	blt	r7,zero,805b9c <___vfprintf_internal_r+0x1c78>
  805acc:	e0803fcc 	andi	r2,fp,255
  805ad0:	1080201c 	xori	r2,r2,128
  805ad4:	10bfe004 	addi	r2,r2,-128
  805ad8:	10004e26 	beq	r2,zero,805c14 <___vfprintf_internal_r+0x1cf0>
  805adc:	00800b44 	movi	r2,45
  805ae0:	dc814715 	stw	r18,1308(sp)
  805ae4:	d8014615 	stw	zero,1304(sp)
  805ae8:	d8800405 	stb	r2,16(sp)
  805aec:	003bb106 	br	8049b4 <___vfprintf_internal_r+0xa90>
  805af0:	00800b44 	movi	r2,45
  805af4:	d8800405 	stb	r2,16(sp)
  805af8:	003d3306 	br	804fc8 <___vfprintf_internal_r+0x10a4>
  805afc:	d9014f17 	ldw	r4,1340(sp)
  805b00:	b00b883a 	mov	r5,r22
  805b04:	d9800c04 	addi	r6,sp,48
  805b08:	0803ecc0 	call	803ecc <__sprint_r>
  805b0c:	103abd1e 	bne	r2,zero,804604 <___vfprintf_internal_r+0x6e0>
  805b10:	003abb06 	br	804600 <___vfprintf_internal_r+0x6dc>
  805b14:	38800017 	ldw	r2,0(r7)
  805b18:	39c00104 	addi	r7,r7,4
  805b1c:	d9c14015 	stw	r7,1280(sp)
  805b20:	d9414b17 	ldw	r5,1324(sp)
  805b24:	d9c14017 	ldw	r7,1280(sp)
  805b28:	11400015 	stw	r5,0(r2)
  805b2c:	00395906 	br	804094 <___vfprintf_internal_r+0x170>
  805b30:	980f883a 	mov	r7,r19
  805b34:	dcc14515 	stw	r19,1300(sp)
  805b38:	d8014615 	stw	zero,1304(sp)
  805b3c:	003b9b06 	br	8049ac <___vfprintf_internal_r+0xa88>
  805b40:	0027883a 	mov	r19,zero
  805b44:	00397806 	br	804128 <___vfprintf_internal_r+0x204>
  805b48:	00c02074 	movhi	r3,129
  805b4c:	18c7cc04 	addi	r3,r3,7984
  805b50:	100f883a 	mov	r7,r2
  805b54:	d8814515 	stw	r2,1300(sp)
  805b58:	d8c14115 	stw	r3,1284(sp)
  805b5c:	0039e006 	br	8042e0 <___vfprintf_internal_r+0x3bc>
  805b60:	00802074 	movhi	r2,129
  805b64:	1087cb04 	addi	r2,r2,7980
  805b68:	d8814115 	stw	r2,1284(sp)
  805b6c:	003d1c06 	br	804fe0 <___vfprintf_internal_r+0x10bc>
  805b70:	d9414d17 	ldw	r5,1332(sp)
  805b74:	00801984 	movi	r2,102
  805b78:	28804926 	beq	r5,r2,805ca0 <___vfprintf_internal_r+0x1d7c>
  805b7c:	200f883a 	mov	r7,r4
  805b80:	24805716 	blt	r4,r18,805ce0 <___vfprintf_internal_r+0x1dbc>
  805b84:	d9414c17 	ldw	r5,1328(sp)
  805b88:	2880004c 	andi	r2,r5,1
  805b8c:	10000126 	beq	r2,zero,805b94 <___vfprintf_internal_r+0x1c70>
  805b90:	21c00044 	addi	r7,r4,1
  805b94:	d9c14515 	stw	r7,1300(sp)
  805b98:	383fcc0e 	bge	r7,zero,805acc <___vfprintf_internal_r+0x1ba8>
  805b9c:	d8014515 	stw	zero,1300(sp)
  805ba0:	003fca06 	br	805acc <___vfprintf_internal_r+0x1ba8>
  805ba4:	d9000517 	ldw	r4,20(sp)
  805ba8:	00bfff04 	movi	r2,-4
  805bac:	1100480e 	bge	r2,r4,805cd0 <___vfprintf_internal_r+0x1dac>
  805bb0:	99004716 	blt	r19,r4,805cd0 <___vfprintf_internal_r+0x1dac>
  805bb4:	d8c14d15 	stw	r3,1332(sp)
  805bb8:	003ff006 	br	805b7c <___vfprintf_internal_r+0x1c58>
  805bbc:	d8800717 	ldw	r2,28(sp)
  805bc0:	14bf8b2e 	bgeu	r2,r18,8059f0 <___vfprintf_internal_r+0x1acc>
  805bc4:	9007883a 	mov	r3,r18
  805bc8:	01000c04 	movi	r4,48
  805bcc:	11000005 	stb	r4,0(r2)
  805bd0:	10800044 	addi	r2,r2,1
  805bd4:	d8800715 	stw	r2,28(sp)
  805bd8:	18bffc1e 	bne	r3,r2,805bcc <___vfprintf_internal_r+0x1ca8>
  805bdc:	003f8406 	br	8059f0 <___vfprintf_internal_r+0x1acc>
  805be0:	d8814117 	ldw	r2,1284(sp)
  805be4:	10c00007 	ldb	r3,0(r2)
  805be8:	00800c04 	movi	r2,48
  805bec:	18805b26 	beq	r3,r2,805d5c <___vfprintf_internal_r+0x1e38>
  805bf0:	d9000517 	ldw	r4,20(sp)
  805bf4:	9125883a 	add	r18,r18,r4
  805bf8:	003f7506 	br	8059d0 <___vfprintf_internal_r+0x1aac>
  805bfc:	d9014c17 	ldw	r4,1328(sp)
  805c00:	2080004c 	andi	r2,r4,1
  805c04:	1005003a 	cmpeq	r2,r2,zero
  805c08:	103f6a26 	beq	r2,zero,8059b4 <___vfprintf_internal_r+0x1a90>
  805c0c:	d8800717 	ldw	r2,28(sp)
  805c10:	003f7706 	br	8059f0 <___vfprintf_internal_r+0x1acc>
  805c14:	d9c14515 	stw	r7,1300(sp)
  805c18:	38004d16 	blt	r7,zero,805d50 <___vfprintf_internal_r+0x1e2c>
  805c1c:	dc814715 	stw	r18,1308(sp)
  805c20:	d8014615 	stw	zero,1304(sp)
  805c24:	003b6106 	br	8049ac <___vfprintf_internal_r+0xa88>
  805c28:	d9014f17 	ldw	r4,1340(sp)
  805c2c:	d8800504 	addi	r2,sp,20
  805c30:	d8800115 	stw	r2,4(sp)
  805c34:	d8c00604 	addi	r3,sp,24
  805c38:	d8800704 	addi	r2,sp,28
  805c3c:	800b883a 	mov	r5,r16
  805c40:	880d883a 	mov	r6,r17
  805c44:	01c000c4 	movi	r7,3
  805c48:	d8c00215 	stw	r3,8(sp)
  805c4c:	d8800315 	stw	r2,12(sp)
  805c50:	dcc00015 	stw	r19,0(sp)
  805c54:	9829883a 	mov	r20,r19
  805c58:	08061480 	call	806148 <_dtoa_r>
  805c5c:	d8814115 	stw	r2,1284(sp)
  805c60:	003f5106 	br	8059a8 <___vfprintf_internal_r+0x1a84>
  805c64:	d8c14217 	ldw	r3,1288(sp)
  805c68:	d9014317 	ldw	r4,1292(sp)
  805c6c:	07000b44 	movi	fp,45
  805c70:	1821883a 	mov	r16,r3
  805c74:	2460003c 	xorhi	r17,r4,32768
  805c78:	003f3106 	br	805940 <___vfprintf_internal_r+0x1a1c>
  805c7c:	9d000044 	addi	r20,r19,1
  805c80:	003f3906 	br	805968 <___vfprintf_internal_r+0x1a44>
  805c84:	983f251e 	bne	r19,zero,80591c <___vfprintf_internal_r+0x19f8>
  805c88:	04c00044 	movi	r19,1
  805c8c:	003f2306 	br	80591c <___vfprintf_internal_r+0x19f8>
  805c90:	04c00184 	movi	r19,6
  805c94:	003f2106 	br	80591c <___vfprintf_internal_r+0x19f8>
  805c98:	d8014515 	stw	zero,1300(sp)
  805c9c:	003eee06 	br	805858 <___vfprintf_internal_r+0x1934>
  805ca0:	200f883a 	mov	r7,r4
  805ca4:	0100370e 	bge	zero,r4,805d84 <___vfprintf_internal_r+0x1e60>
  805ca8:	9800031e 	bne	r19,zero,805cb8 <___vfprintf_internal_r+0x1d94>
  805cac:	d9814c17 	ldw	r6,1328(sp)
  805cb0:	3080004c 	andi	r2,r6,1
  805cb4:	103fb726 	beq	r2,zero,805b94 <___vfprintf_internal_r+0x1c70>
  805cb8:	20800044 	addi	r2,r4,1
  805cbc:	98a7883a 	add	r19,r19,r2
  805cc0:	dcc14515 	stw	r19,1300(sp)
  805cc4:	980f883a 	mov	r7,r19
  805cc8:	983f800e 	bge	r19,zero,805acc <___vfprintf_internal_r+0x1ba8>
  805ccc:	003fb306 	br	805b9c <___vfprintf_internal_r+0x1c78>
  805cd0:	d9814d17 	ldw	r6,1332(sp)
  805cd4:	31bfff84 	addi	r6,r6,-2
  805cd8:	d9814d15 	stw	r6,1332(sp)
  805cdc:	003f4c06 	br	805a10 <___vfprintf_internal_r+0x1aec>
  805ce0:	0100180e 	bge	zero,r4,805d44 <___vfprintf_internal_r+0x1e20>
  805ce4:	00800044 	movi	r2,1
  805ce8:	1485883a 	add	r2,r2,r18
  805cec:	d8814515 	stw	r2,1300(sp)
  805cf0:	100f883a 	mov	r7,r2
  805cf4:	103f750e 	bge	r2,zero,805acc <___vfprintf_internal_r+0x1ba8>
  805cf8:	003fa806 	br	805b9c <___vfprintf_internal_r+0x1c78>
  805cfc:	80c00c04 	addi	r3,r16,48
  805d00:	00800c04 	movi	r2,48
  805d04:	d8c008c5 	stb	r3,35(sp)
  805d08:	d9800804 	addi	r6,sp,32
  805d0c:	d8c00904 	addi	r3,sp,36
  805d10:	d8800885 	stb	r2,34(sp)
  805d14:	003f6506 	br	805aac <___vfprintf_internal_r+0x1b88>
  805d18:	d9014c17 	ldw	r4,1328(sp)
  805d1c:	2084703a 	and	r2,r4,r2
  805d20:	103f9c26 	beq	r2,zero,805b94 <___vfprintf_internal_r+0x1c70>
  805d24:	003f6606 	br	805ac0 <___vfprintf_internal_r+0x1b9c>
  805d28:	d9800804 	addi	r6,sp,32
  805d2c:	d8c00884 	addi	r3,sp,34
  805d30:	003f5e06 	br	805aac <___vfprintf_internal_r+0x1b88>
  805d34:	00800b44 	movi	r2,45
  805d38:	0121c83a 	sub	r16,zero,r4
  805d3c:	d8800845 	stb	r2,33(sp)
  805d40:	003f3d06 	br	805a38 <___vfprintf_internal_r+0x1b14>
  805d44:	00800084 	movi	r2,2
  805d48:	1105c83a 	sub	r2,r2,r4
  805d4c:	003fe606 	br	805ce8 <___vfprintf_internal_r+0x1dc4>
  805d50:	d8014515 	stw	zero,1300(sp)
  805d54:	dc814715 	stw	r18,1308(sp)
  805d58:	003fb106 	br	805c20 <___vfprintf_internal_r+0x1cfc>
  805d5c:	000d883a 	mov	r6,zero
  805d60:	000f883a 	mov	r7,zero
  805d64:	8009883a 	mov	r4,r16
  805d68:	880b883a 	mov	r5,r17
  805d6c:	08031ec0 	call	8031ec <__nedf2>
  805d70:	103f9f26 	beq	r2,zero,805bf0 <___vfprintf_internal_r+0x1ccc>
  805d74:	00800044 	movi	r2,1
  805d78:	1509c83a 	sub	r4,r2,r20
  805d7c:	d9000515 	stw	r4,20(sp)
  805d80:	003f9b06 	br	805bf0 <___vfprintf_internal_r+0x1ccc>
  805d84:	98000d1e 	bne	r19,zero,805dbc <___vfprintf_internal_r+0x1e98>
  805d88:	d8c14c17 	ldw	r3,1328(sp)
  805d8c:	1880004c 	andi	r2,r3,1
  805d90:	10000a1e 	bne	r2,zero,805dbc <___vfprintf_internal_r+0x1e98>
  805d94:	01000044 	movi	r4,1
  805d98:	200f883a 	mov	r7,r4
  805d9c:	d9014515 	stw	r4,1300(sp)
  805da0:	003f4a06 	br	805acc <___vfprintf_internal_r+0x1ba8>
  805da4:	3cc00017 	ldw	r19,0(r7)
  805da8:	39c00104 	addi	r7,r7,4
  805dac:	983d0e0e 	bge	r19,zero,8051e8 <___vfprintf_internal_r+0x12c4>
  805db0:	b8c00007 	ldb	r3,0(r23)
  805db4:	04ffffc4 	movi	r19,-1
  805db8:	0038d906 	br	804120 <___vfprintf_internal_r+0x1fc>
  805dbc:	9cc00084 	addi	r19,r19,2
  805dc0:	dcc14515 	stw	r19,1300(sp)
  805dc4:	980f883a 	mov	r7,r19
  805dc8:	983f400e 	bge	r19,zero,805acc <___vfprintf_internal_r+0x1ba8>
  805dcc:	003f7306 	br	805b9c <___vfprintf_internal_r+0x1c78>

00805dd0 <__vfprintf_internal>:
  805dd0:	00802074 	movhi	r2,129
  805dd4:	108f8304 	addi	r2,r2,15884
  805dd8:	2013883a 	mov	r9,r4
  805ddc:	11000017 	ldw	r4,0(r2)
  805de0:	2805883a 	mov	r2,r5
  805de4:	300f883a 	mov	r7,r6
  805de8:	480b883a 	mov	r5,r9
  805dec:	100d883a 	mov	r6,r2
  805df0:	0803f241 	jmpi	803f24 <___vfprintf_internal_r>

00805df4 <__swsetup_r>:
  805df4:	00802074 	movhi	r2,129
  805df8:	108f8304 	addi	r2,r2,15884
  805dfc:	10c00017 	ldw	r3,0(r2)
  805e00:	defffd04 	addi	sp,sp,-12
  805e04:	dc400115 	stw	r17,4(sp)
  805e08:	dc000015 	stw	r16,0(sp)
  805e0c:	dfc00215 	stw	ra,8(sp)
  805e10:	2023883a 	mov	r17,r4
  805e14:	2821883a 	mov	r16,r5
  805e18:	18000226 	beq	r3,zero,805e24 <__swsetup_r+0x30>
  805e1c:	18800e17 	ldw	r2,56(r3)
  805e20:	10001f26 	beq	r2,zero,805ea0 <__swsetup_r+0xac>
  805e24:	8100030b 	ldhu	r4,12(r16)
  805e28:	2080020c 	andi	r2,r4,8
  805e2c:	10002826 	beq	r2,zero,805ed0 <__swsetup_r+0xdc>
  805e30:	81400417 	ldw	r5,16(r16)
  805e34:	28001d26 	beq	r5,zero,805eac <__swsetup_r+0xb8>
  805e38:	2080004c 	andi	r2,r4,1
  805e3c:	1005003a 	cmpeq	r2,r2,zero
  805e40:	10000b26 	beq	r2,zero,805e70 <__swsetup_r+0x7c>
  805e44:	2080008c 	andi	r2,r4,2
  805e48:	10001226 	beq	r2,zero,805e94 <__swsetup_r+0xa0>
  805e4c:	0005883a 	mov	r2,zero
  805e50:	80800215 	stw	r2,8(r16)
  805e54:	28000b26 	beq	r5,zero,805e84 <__swsetup_r+0x90>
  805e58:	0005883a 	mov	r2,zero
  805e5c:	dfc00217 	ldw	ra,8(sp)
  805e60:	dc400117 	ldw	r17,4(sp)
  805e64:	dc000017 	ldw	r16,0(sp)
  805e68:	dec00304 	addi	sp,sp,12
  805e6c:	f800283a 	ret
  805e70:	80800517 	ldw	r2,20(r16)
  805e74:	80000215 	stw	zero,8(r16)
  805e78:	0085c83a 	sub	r2,zero,r2
  805e7c:	80800615 	stw	r2,24(r16)
  805e80:	283ff51e 	bne	r5,zero,805e58 <__swsetup_r+0x64>
  805e84:	2080200c 	andi	r2,r4,128
  805e88:	103ff326 	beq	r2,zero,805e58 <__swsetup_r+0x64>
  805e8c:	00bfffc4 	movi	r2,-1
  805e90:	003ff206 	br	805e5c <__swsetup_r+0x68>
  805e94:	80800517 	ldw	r2,20(r16)
  805e98:	80800215 	stw	r2,8(r16)
  805e9c:	003fed06 	br	805e54 <__swsetup_r+0x60>
  805ea0:	1809883a 	mov	r4,r3
  805ea4:	08079940 	call	807994 <__sinit>
  805ea8:	003fde06 	br	805e24 <__swsetup_r+0x30>
  805eac:	20c0a00c 	andi	r3,r4,640
  805eb0:	00808004 	movi	r2,512
  805eb4:	18bfe026 	beq	r3,r2,805e38 <__swsetup_r+0x44>
  805eb8:	8809883a 	mov	r4,r17
  805ebc:	800b883a 	mov	r5,r16
  805ec0:	080870c0 	call	80870c <__smakebuf_r>
  805ec4:	8100030b 	ldhu	r4,12(r16)
  805ec8:	81400417 	ldw	r5,16(r16)
  805ecc:	003fda06 	br	805e38 <__swsetup_r+0x44>
  805ed0:	2080040c 	andi	r2,r4,16
  805ed4:	103fed26 	beq	r2,zero,805e8c <__swsetup_r+0x98>
  805ed8:	2080010c 	andi	r2,r4,4
  805edc:	10001226 	beq	r2,zero,805f28 <__swsetup_r+0x134>
  805ee0:	81400c17 	ldw	r5,48(r16)
  805ee4:	28000526 	beq	r5,zero,805efc <__swsetup_r+0x108>
  805ee8:	80801004 	addi	r2,r16,64
  805eec:	28800226 	beq	r5,r2,805ef8 <__swsetup_r+0x104>
  805ef0:	8809883a 	mov	r4,r17
  805ef4:	0807d180 	call	807d18 <_free_r>
  805ef8:	80000c15 	stw	zero,48(r16)
  805efc:	8080030b 	ldhu	r2,12(r16)
  805f00:	81400417 	ldw	r5,16(r16)
  805f04:	80000115 	stw	zero,4(r16)
  805f08:	10bff6cc 	andi	r2,r2,65499
  805f0c:	8080030d 	sth	r2,12(r16)
  805f10:	81400015 	stw	r5,0(r16)
  805f14:	8080030b 	ldhu	r2,12(r16)
  805f18:	10800214 	ori	r2,r2,8
  805f1c:	113fffcc 	andi	r4,r2,65535
  805f20:	8080030d 	sth	r2,12(r16)
  805f24:	003fc306 	br	805e34 <__swsetup_r+0x40>
  805f28:	81400417 	ldw	r5,16(r16)
  805f2c:	003ff906 	br	805f14 <__swsetup_r+0x120>

00805f30 <quorem>:
  805f30:	28c00417 	ldw	r3,16(r5)
  805f34:	20800417 	ldw	r2,16(r4)
  805f38:	defff604 	addi	sp,sp,-40
  805f3c:	ddc00715 	stw	r23,28(sp)
  805f40:	dd400515 	stw	r21,20(sp)
  805f44:	dfc00915 	stw	ra,36(sp)
  805f48:	df000815 	stw	fp,32(sp)
  805f4c:	dd800615 	stw	r22,24(sp)
  805f50:	dd000415 	stw	r20,16(sp)
  805f54:	dcc00315 	stw	r19,12(sp)
  805f58:	dc800215 	stw	r18,8(sp)
  805f5c:	dc400115 	stw	r17,4(sp)
  805f60:	dc000015 	stw	r16,0(sp)
  805f64:	202f883a 	mov	r23,r4
  805f68:	282b883a 	mov	r21,r5
  805f6c:	10c07416 	blt	r2,r3,806140 <quorem+0x210>
  805f70:	1c7fffc4 	addi	r17,r3,-1
  805f74:	8c45883a 	add	r2,r17,r17
  805f78:	1085883a 	add	r2,r2,r2
  805f7c:	2c000504 	addi	r16,r5,20
  805f80:	24c00504 	addi	r19,r4,20
  805f84:	14ed883a 	add	r22,r2,r19
  805f88:	80a5883a 	add	r18,r16,r2
  805f8c:	b7000017 	ldw	fp,0(r22)
  805f90:	91400017 	ldw	r5,0(r18)
  805f94:	e009883a 	mov	r4,fp
  805f98:	29400044 	addi	r5,r5,1
  805f9c:	080c6500 	call	80c650 <__udivsi3>
  805fa0:	1029883a 	mov	r20,r2
  805fa4:	10003c1e 	bne	r2,zero,806098 <quorem+0x168>
  805fa8:	a80b883a 	mov	r5,r21
  805fac:	b809883a 	mov	r4,r23
  805fb0:	08094380 	call	809438 <__mcmp>
  805fb4:	10002b16 	blt	r2,zero,806064 <quorem+0x134>
  805fb8:	a5000044 	addi	r20,r20,1
  805fbc:	980f883a 	mov	r7,r19
  805fc0:	0011883a 	mov	r8,zero
  805fc4:	0009883a 	mov	r4,zero
  805fc8:	81400017 	ldw	r5,0(r16)
  805fcc:	38c00017 	ldw	r3,0(r7)
  805fd0:	84000104 	addi	r16,r16,4
  805fd4:	28bfffcc 	andi	r2,r5,65535
  805fd8:	2085883a 	add	r2,r4,r2
  805fdc:	11bfffcc 	andi	r6,r2,65535
  805fe0:	193fffcc 	andi	r4,r3,65535
  805fe4:	1004d43a 	srli	r2,r2,16
  805fe8:	280ad43a 	srli	r5,r5,16
  805fec:	2189c83a 	sub	r4,r4,r6
  805ff0:	2209883a 	add	r4,r4,r8
  805ff4:	1806d43a 	srli	r3,r3,16
  805ff8:	288b883a 	add	r5,r5,r2
  805ffc:	200dd43a 	srai	r6,r4,16
  806000:	28bfffcc 	andi	r2,r5,65535
  806004:	1887c83a 	sub	r3,r3,r2
  806008:	1987883a 	add	r3,r3,r6
  80600c:	3900000d 	sth	r4,0(r7)
  806010:	38c0008d 	sth	r3,2(r7)
  806014:	2808d43a 	srli	r4,r5,16
  806018:	39c00104 	addi	r7,r7,4
  80601c:	1811d43a 	srai	r8,r3,16
  806020:	943fe92e 	bgeu	r18,r16,805fc8 <quorem+0x98>
  806024:	8c45883a 	add	r2,r17,r17
  806028:	1085883a 	add	r2,r2,r2
  80602c:	9885883a 	add	r2,r19,r2
  806030:	10c00017 	ldw	r3,0(r2)
  806034:	18000b1e 	bne	r3,zero,806064 <quorem+0x134>
  806038:	113fff04 	addi	r4,r2,-4
  80603c:	9900082e 	bgeu	r19,r4,806060 <quorem+0x130>
  806040:	10bfff17 	ldw	r2,-4(r2)
  806044:	10000326 	beq	r2,zero,806054 <quorem+0x124>
  806048:	00000506 	br	806060 <quorem+0x130>
  80604c:	20800017 	ldw	r2,0(r4)
  806050:	1000031e 	bne	r2,zero,806060 <quorem+0x130>
  806054:	213fff04 	addi	r4,r4,-4
  806058:	8c7fffc4 	addi	r17,r17,-1
  80605c:	993ffb36 	bltu	r19,r4,80604c <quorem+0x11c>
  806060:	bc400415 	stw	r17,16(r23)
  806064:	a005883a 	mov	r2,r20
  806068:	dfc00917 	ldw	ra,36(sp)
  80606c:	df000817 	ldw	fp,32(sp)
  806070:	ddc00717 	ldw	r23,28(sp)
  806074:	dd800617 	ldw	r22,24(sp)
  806078:	dd400517 	ldw	r21,20(sp)
  80607c:	dd000417 	ldw	r20,16(sp)
  806080:	dcc00317 	ldw	r19,12(sp)
  806084:	dc800217 	ldw	r18,8(sp)
  806088:	dc400117 	ldw	r17,4(sp)
  80608c:	dc000017 	ldw	r16,0(sp)
  806090:	dec00a04 	addi	sp,sp,40
  806094:	f800283a 	ret
  806098:	980f883a 	mov	r7,r19
  80609c:	8011883a 	mov	r8,r16
  8060a0:	0013883a 	mov	r9,zero
  8060a4:	000d883a 	mov	r6,zero
  8060a8:	40c00017 	ldw	r3,0(r8)
  8060ac:	39000017 	ldw	r4,0(r7)
  8060b0:	42000104 	addi	r8,r8,4
  8060b4:	18bfffcc 	andi	r2,r3,65535
  8060b8:	a085383a 	mul	r2,r20,r2
  8060bc:	1806d43a 	srli	r3,r3,16
  8060c0:	217fffcc 	andi	r5,r4,65535
  8060c4:	3085883a 	add	r2,r6,r2
  8060c8:	11bfffcc 	andi	r6,r2,65535
  8060cc:	a0c7383a 	mul	r3,r20,r3
  8060d0:	1004d43a 	srli	r2,r2,16
  8060d4:	298bc83a 	sub	r5,r5,r6
  8060d8:	2a4b883a 	add	r5,r5,r9
  8060dc:	2008d43a 	srli	r4,r4,16
  8060e0:	1887883a 	add	r3,r3,r2
  8060e4:	280dd43a 	srai	r6,r5,16
  8060e8:	18bfffcc 	andi	r2,r3,65535
  8060ec:	2089c83a 	sub	r4,r4,r2
  8060f0:	2189883a 	add	r4,r4,r6
  8060f4:	3900008d 	sth	r4,2(r7)
  8060f8:	3940000d 	sth	r5,0(r7)
  8060fc:	180cd43a 	srli	r6,r3,16
  806100:	39c00104 	addi	r7,r7,4
  806104:	2013d43a 	srai	r9,r4,16
  806108:	923fe72e 	bgeu	r18,r8,8060a8 <quorem+0x178>
  80610c:	e03fa61e 	bne	fp,zero,805fa8 <quorem+0x78>
  806110:	b0ffff04 	addi	r3,r22,-4
  806114:	98c0082e 	bgeu	r19,r3,806138 <quorem+0x208>
  806118:	b0bfff17 	ldw	r2,-4(r22)
  80611c:	10000326 	beq	r2,zero,80612c <quorem+0x1fc>
  806120:	00000506 	br	806138 <quorem+0x208>
  806124:	18800017 	ldw	r2,0(r3)
  806128:	1000031e 	bne	r2,zero,806138 <quorem+0x208>
  80612c:	18ffff04 	addi	r3,r3,-4
  806130:	8c7fffc4 	addi	r17,r17,-1
  806134:	98fffb36 	bltu	r19,r3,806124 <quorem+0x1f4>
  806138:	bc400415 	stw	r17,16(r23)
  80613c:	003f9a06 	br	805fa8 <quorem+0x78>
  806140:	0005883a 	mov	r2,zero
  806144:	003fc806 	br	806068 <quorem+0x138>

00806148 <_dtoa_r>:
  806148:	22001017 	ldw	r8,64(r4)
  80614c:	deffda04 	addi	sp,sp,-152
  806150:	dd402115 	stw	r21,132(sp)
  806154:	dd002015 	stw	r20,128(sp)
  806158:	dc801e15 	stw	r18,120(sp)
  80615c:	dc401d15 	stw	r17,116(sp)
  806160:	dfc02515 	stw	ra,148(sp)
  806164:	df002415 	stw	fp,144(sp)
  806168:	ddc02315 	stw	r23,140(sp)
  80616c:	dd802215 	stw	r22,136(sp)
  806170:	dcc01f15 	stw	r19,124(sp)
  806174:	dc001c15 	stw	r16,112(sp)
  806178:	d9001615 	stw	r4,88(sp)
  80617c:	3023883a 	mov	r17,r6
  806180:	2829883a 	mov	r20,r5
  806184:	d9c01715 	stw	r7,92(sp)
  806188:	dc802817 	ldw	r18,160(sp)
  80618c:	302b883a 	mov	r21,r6
  806190:	40000a26 	beq	r8,zero,8061bc <_dtoa_r+0x74>
  806194:	20801117 	ldw	r2,68(r4)
  806198:	400b883a 	mov	r5,r8
  80619c:	40800115 	stw	r2,4(r8)
  8061a0:	20c01117 	ldw	r3,68(r4)
  8061a4:	00800044 	movi	r2,1
  8061a8:	10c4983a 	sll	r2,r2,r3
  8061ac:	40800215 	stw	r2,8(r8)
  8061b0:	08092dc0 	call	8092dc <_Bfree>
  8061b4:	d8c01617 	ldw	r3,88(sp)
  8061b8:	18001015 	stw	zero,64(r3)
  8061bc:	8800a316 	blt	r17,zero,80644c <_dtoa_r+0x304>
  8061c0:	90000015 	stw	zero,0(r18)
  8061c4:	a8dffc2c 	andhi	r3,r21,32752
  8061c8:	009ffc34 	movhi	r2,32752
  8061cc:	18809126 	beq	r3,r2,806414 <_dtoa_r+0x2cc>
  8061d0:	000d883a 	mov	r6,zero
  8061d4:	000f883a 	mov	r7,zero
  8061d8:	a009883a 	mov	r4,r20
  8061dc:	a80b883a 	mov	r5,r21
  8061e0:	dd001215 	stw	r20,72(sp)
  8061e4:	dd401315 	stw	r21,76(sp)
  8061e8:	08031ec0 	call	8031ec <__nedf2>
  8061ec:	1000171e 	bne	r2,zero,80624c <_dtoa_r+0x104>
  8061f0:	d9802717 	ldw	r6,156(sp)
  8061f4:	00800044 	movi	r2,1
  8061f8:	30800015 	stw	r2,0(r6)
  8061fc:	d8802917 	ldw	r2,164(sp)
  806200:	10029b26 	beq	r2,zero,806c70 <_dtoa_r+0xb28>
  806204:	d9002917 	ldw	r4,164(sp)
  806208:	00802074 	movhi	r2,129
  80620c:	10875344 	addi	r2,r2,7501
  806210:	10ffffc4 	addi	r3,r2,-1
  806214:	20800015 	stw	r2,0(r4)
  806218:	1805883a 	mov	r2,r3
  80621c:	dfc02517 	ldw	ra,148(sp)
  806220:	df002417 	ldw	fp,144(sp)
  806224:	ddc02317 	ldw	r23,140(sp)
  806228:	dd802217 	ldw	r22,136(sp)
  80622c:	dd402117 	ldw	r21,132(sp)
  806230:	dd002017 	ldw	r20,128(sp)
  806234:	dcc01f17 	ldw	r19,124(sp)
  806238:	dc801e17 	ldw	r18,120(sp)
  80623c:	dc401d17 	ldw	r17,116(sp)
  806240:	dc001c17 	ldw	r16,112(sp)
  806244:	dec02604 	addi	sp,sp,152
  806248:	f800283a 	ret
  80624c:	d9001617 	ldw	r4,88(sp)
  806250:	d9401217 	ldw	r5,72(sp)
  806254:	d8800104 	addi	r2,sp,4
  806258:	a80d883a 	mov	r6,r21
  80625c:	d9c00204 	addi	r7,sp,8
  806260:	d8800015 	stw	r2,0(sp)
  806264:	08099180 	call	809918 <__d2b>
  806268:	d8800715 	stw	r2,28(sp)
  80626c:	a804d53a 	srli	r2,r21,20
  806270:	1101ffcc 	andi	r4,r2,2047
  806274:	20008626 	beq	r4,zero,806490 <_dtoa_r+0x348>
  806278:	d8c01217 	ldw	r3,72(sp)
  80627c:	00800434 	movhi	r2,16
  806280:	10bfffc4 	addi	r2,r2,-1
  806284:	ddc00117 	ldw	r23,4(sp)
  806288:	a884703a 	and	r2,r21,r2
  80628c:	1811883a 	mov	r8,r3
  806290:	124ffc34 	orhi	r9,r2,16368
  806294:	25bf0044 	addi	r22,r4,-1023
  806298:	d8000815 	stw	zero,32(sp)
  80629c:	0005883a 	mov	r2,zero
  8062a0:	00cffe34 	movhi	r3,16376
  8062a4:	480b883a 	mov	r5,r9
  8062a8:	4009883a 	mov	r4,r8
  8062ac:	180f883a 	mov	r7,r3
  8062b0:	100d883a 	mov	r6,r2
  8062b4:	0802ea00 	call	802ea0 <__subdf3>
  8062b8:	0218dbf4 	movhi	r8,25455
  8062bc:	4210d844 	addi	r8,r8,17249
  8062c0:	024ff4f4 	movhi	r9,16339
  8062c4:	4a61e9c4 	addi	r9,r9,-30809
  8062c8:	480f883a 	mov	r7,r9
  8062cc:	400d883a 	mov	r6,r8
  8062d0:	180b883a 	mov	r5,r3
  8062d4:	1009883a 	mov	r4,r2
  8062d8:	080bbcc0 	call	80bbcc <__muldf3>
  8062dc:	0222d874 	movhi	r8,35681
  8062e0:	42322cc4 	addi	r8,r8,-14157
  8062e4:	024ff1f4 	movhi	r9,16327
  8062e8:	4a628a04 	addi	r9,r9,-30168
  8062ec:	480f883a 	mov	r7,r9
  8062f0:	400d883a 	mov	r6,r8
  8062f4:	180b883a 	mov	r5,r3
  8062f8:	1009883a 	mov	r4,r2
  8062fc:	0802f200 	call	802f20 <__adddf3>
  806300:	b009883a 	mov	r4,r22
  806304:	1021883a 	mov	r16,r2
  806308:	1823883a 	mov	r17,r3
  80630c:	080c1b00 	call	80c1b0 <__floatsidf>
  806310:	021427f4 	movhi	r8,20639
  806314:	421e7ec4 	addi	r8,r8,31227
  806318:	024ff4f4 	movhi	r9,16339
  80631c:	4a5104c4 	addi	r9,r9,17427
  806320:	480f883a 	mov	r7,r9
  806324:	400d883a 	mov	r6,r8
  806328:	180b883a 	mov	r5,r3
  80632c:	1009883a 	mov	r4,r2
  806330:	080bbcc0 	call	80bbcc <__muldf3>
  806334:	180f883a 	mov	r7,r3
  806338:	880b883a 	mov	r5,r17
  80633c:	100d883a 	mov	r6,r2
  806340:	8009883a 	mov	r4,r16
  806344:	0802f200 	call	802f20 <__adddf3>
  806348:	1009883a 	mov	r4,r2
  80634c:	180b883a 	mov	r5,r3
  806350:	1021883a 	mov	r16,r2
  806354:	1823883a 	mov	r17,r3
  806358:	080c2a80 	call	80c2a8 <__fixdfsi>
  80635c:	000d883a 	mov	r6,zero
  806360:	000f883a 	mov	r7,zero
  806364:	8009883a 	mov	r4,r16
  806368:	880b883a 	mov	r5,r17
  80636c:	d8800d15 	stw	r2,52(sp)
  806370:	080c1280 	call	80c128 <__ltdf2>
  806374:	10031716 	blt	r2,zero,806fd4 <_dtoa_r+0xe8c>
  806378:	d8c00d17 	ldw	r3,52(sp)
  80637c:	00800584 	movi	r2,22
  806380:	10c1482e 	bgeu	r2,r3,8068a4 <_dtoa_r+0x75c>
  806384:	01000044 	movi	r4,1
  806388:	d9000c15 	stw	r4,48(sp)
  80638c:	bd85c83a 	sub	r2,r23,r22
  806390:	11bfffc4 	addi	r6,r2,-1
  806394:	30030b16 	blt	r6,zero,806fc4 <_dtoa_r+0xe7c>
  806398:	d9800a15 	stw	r6,40(sp)
  80639c:	d8001115 	stw	zero,68(sp)
  8063a0:	d8c00d17 	ldw	r3,52(sp)
  8063a4:	1802ff16 	blt	r3,zero,806fa4 <_dtoa_r+0xe5c>
  8063a8:	d9000a17 	ldw	r4,40(sp)
  8063ac:	d8c00915 	stw	r3,36(sp)
  8063b0:	d8001015 	stw	zero,64(sp)
  8063b4:	20c9883a 	add	r4,r4,r3
  8063b8:	d9000a15 	stw	r4,40(sp)
  8063bc:	d9001717 	ldw	r4,92(sp)
  8063c0:	00800244 	movi	r2,9
  8063c4:	11004636 	bltu	r2,r4,8064e0 <_dtoa_r+0x398>
  8063c8:	00800144 	movi	r2,5
  8063cc:	11020416 	blt	r2,r4,806be0 <_dtoa_r+0xa98>
  8063d0:	04400044 	movi	r17,1
  8063d4:	d8c01717 	ldw	r3,92(sp)
  8063d8:	00800144 	movi	r2,5
  8063dc:	10c1ed36 	bltu	r2,r3,806b94 <_dtoa_r+0xa4c>
  8063e0:	18c5883a 	add	r2,r3,r3
  8063e4:	1085883a 	add	r2,r2,r2
  8063e8:	00c02034 	movhi	r3,128
  8063ec:	18d8ff04 	addi	r3,r3,25596
  8063f0:	10c5883a 	add	r2,r2,r3
  8063f4:	11000017 	ldw	r4,0(r2)
  8063f8:	2000683a 	jmp	r4
  8063fc:	008064e8 	cmpgeui	r2,zero,403
  806400:	008064e8 	cmpgeui	r2,zero,403
  806404:	00806ee8 	cmpgeui	r2,zero,443
  806408:	00806ec0 	call	806ec <__alt_mem_onchip_memory2_3+0x796ec>
  80640c:	00806f04 	movi	r2,444
  806410:	00806f10 	cmplti	r2,zero,444
  806414:	d9002717 	ldw	r4,156(sp)
  806418:	0089c3c4 	movi	r2,9999
  80641c:	20800015 	stw	r2,0(r4)
  806420:	a0001026 	beq	r20,zero,806464 <_dtoa_r+0x31c>
  806424:	00c02074 	movhi	r3,129
  806428:	18c7e504 	addi	r3,r3,8084
  80642c:	d9802917 	ldw	r6,164(sp)
  806430:	303f7926 	beq	r6,zero,806218 <_dtoa_r+0xd0>
  806434:	188000c7 	ldb	r2,3(r3)
  806438:	190000c4 	addi	r4,r3,3
  80643c:	1000101e 	bne	r2,zero,806480 <_dtoa_r+0x338>
  806440:	d8802917 	ldw	r2,164(sp)
  806444:	11000015 	stw	r4,0(r2)
  806448:	003f7306 	br	806218 <_dtoa_r+0xd0>
  80644c:	00a00034 	movhi	r2,32768
  806450:	10bfffc4 	addi	r2,r2,-1
  806454:	00c00044 	movi	r3,1
  806458:	88aa703a 	and	r21,r17,r2
  80645c:	90c00015 	stw	r3,0(r18)
  806460:	003f5806 	br	8061c4 <_dtoa_r+0x7c>
  806464:	00800434 	movhi	r2,16
  806468:	10bfffc4 	addi	r2,r2,-1
  80646c:	a884703a 	and	r2,r21,r2
  806470:	103fec1e 	bne	r2,zero,806424 <_dtoa_r+0x2dc>
  806474:	00c02074 	movhi	r3,129
  806478:	18c7e204 	addi	r3,r3,8072
  80647c:	003feb06 	br	80642c <_dtoa_r+0x2e4>
  806480:	d8802917 	ldw	r2,164(sp)
  806484:	19000204 	addi	r4,r3,8
  806488:	11000015 	stw	r4,0(r2)
  80648c:	003f6206 	br	806218 <_dtoa_r+0xd0>
  806490:	ddc00117 	ldw	r23,4(sp)
  806494:	d8800217 	ldw	r2,8(sp)
  806498:	01000804 	movi	r4,32
  80649c:	b8c10c84 	addi	r3,r23,1074
  8064a0:	18a3883a 	add	r17,r3,r2
  8064a4:	2441b80e 	bge	r4,r17,806b88 <_dtoa_r+0xa40>
  8064a8:	00c01004 	movi	r3,64
  8064ac:	1c47c83a 	sub	r3,r3,r17
  8064b0:	88bff804 	addi	r2,r17,-32
  8064b4:	a8c6983a 	sll	r3,r21,r3
  8064b8:	a084d83a 	srl	r2,r20,r2
  8064bc:	1888b03a 	or	r4,r3,r2
  8064c0:	080c3800 	call	80c380 <__floatunsidf>
  8064c4:	1011883a 	mov	r8,r2
  8064c8:	00bf8434 	movhi	r2,65040
  8064cc:	01000044 	movi	r4,1
  8064d0:	10d3883a 	add	r9,r2,r3
  8064d4:	8dbef344 	addi	r22,r17,-1075
  8064d8:	d9000815 	stw	r4,32(sp)
  8064dc:	003f6f06 	br	80629c <_dtoa_r+0x154>
  8064e0:	d8001715 	stw	zero,92(sp)
  8064e4:	04400044 	movi	r17,1
  8064e8:	00bfffc4 	movi	r2,-1
  8064ec:	00c00044 	movi	r3,1
  8064f0:	d8800e15 	stw	r2,56(sp)
  8064f4:	d8002615 	stw	zero,152(sp)
  8064f8:	d8800f15 	stw	r2,60(sp)
  8064fc:	d8c00b15 	stw	r3,44(sp)
  806500:	1021883a 	mov	r16,r2
  806504:	d8801617 	ldw	r2,88(sp)
  806508:	10001115 	stw	zero,68(r2)
  80650c:	d8801617 	ldw	r2,88(sp)
  806510:	11401117 	ldw	r5,68(r2)
  806514:	1009883a 	mov	r4,r2
  806518:	080985c0 	call	80985c <_Balloc>
  80651c:	d8c01617 	ldw	r3,88(sp)
  806520:	d8800515 	stw	r2,20(sp)
  806524:	18801015 	stw	r2,64(r3)
  806528:	00800384 	movi	r2,14
  80652c:	14006836 	bltu	r2,r16,8066d0 <_dtoa_r+0x588>
  806530:	8805003a 	cmpeq	r2,r17,zero
  806534:	1000661e 	bne	r2,zero,8066d0 <_dtoa_r+0x588>
  806538:	d9000d17 	ldw	r4,52(sp)
  80653c:	0102300e 	bge	zero,r4,806e00 <_dtoa_r+0xcb8>
  806540:	208003cc 	andi	r2,r4,15
  806544:	100490fa 	slli	r2,r2,3
  806548:	2025d13a 	srai	r18,r4,4
  80654c:	00c02074 	movhi	r3,129
  806550:	18c7f504 	addi	r3,r3,8148
  806554:	10c5883a 	add	r2,r2,r3
  806558:	90c0040c 	andi	r3,r18,16
  80655c:	14000017 	ldw	r16,0(r2)
  806560:	14400117 	ldw	r17,4(r2)
  806564:	18036a1e 	bne	r3,zero,807310 <_dtoa_r+0x11c8>
  806568:	05800084 	movi	r22,2
  80656c:	90001026 	beq	r18,zero,8065b0 <_dtoa_r+0x468>
  806570:	04c02074 	movhi	r19,129
  806574:	9cc82704 	addi	r19,r19,8348
  806578:	9080004c 	andi	r2,r18,1
  80657c:	1005003a 	cmpeq	r2,r2,zero
  806580:	1000081e 	bne	r2,zero,8065a4 <_dtoa_r+0x45c>
  806584:	99800017 	ldw	r6,0(r19)
  806588:	99c00117 	ldw	r7,4(r19)
  80658c:	880b883a 	mov	r5,r17
  806590:	8009883a 	mov	r4,r16
  806594:	080bbcc0 	call	80bbcc <__muldf3>
  806598:	1021883a 	mov	r16,r2
  80659c:	b5800044 	addi	r22,r22,1
  8065a0:	1823883a 	mov	r17,r3
  8065a4:	9025d07a 	srai	r18,r18,1
  8065a8:	9cc00204 	addi	r19,r19,8
  8065ac:	903ff21e 	bne	r18,zero,806578 <_dtoa_r+0x430>
  8065b0:	a80b883a 	mov	r5,r21
  8065b4:	a009883a 	mov	r4,r20
  8065b8:	880f883a 	mov	r7,r17
  8065bc:	800d883a 	mov	r6,r16
  8065c0:	0802f940 	call	802f94 <__divdf3>
  8065c4:	1029883a 	mov	r20,r2
  8065c8:	182b883a 	mov	r21,r3
  8065cc:	d8c00c17 	ldw	r3,48(sp)
  8065d0:	1805003a 	cmpeq	r2,r3,zero
  8065d4:	1000081e 	bne	r2,zero,8065f8 <_dtoa_r+0x4b0>
  8065d8:	0005883a 	mov	r2,zero
  8065dc:	00cffc34 	movhi	r3,16368
  8065e0:	180f883a 	mov	r7,r3
  8065e4:	a009883a 	mov	r4,r20
  8065e8:	a80b883a 	mov	r5,r21
  8065ec:	100d883a 	mov	r6,r2
  8065f0:	080c1280 	call	80c128 <__ltdf2>
  8065f4:	1003fe16 	blt	r2,zero,8075f0 <_dtoa_r+0x14a8>
  8065f8:	b009883a 	mov	r4,r22
  8065fc:	080c1b00 	call	80c1b0 <__floatsidf>
  806600:	180b883a 	mov	r5,r3
  806604:	1009883a 	mov	r4,r2
  806608:	a00d883a 	mov	r6,r20
  80660c:	a80f883a 	mov	r7,r21
  806610:	080bbcc0 	call	80bbcc <__muldf3>
  806614:	0011883a 	mov	r8,zero
  806618:	02500734 	movhi	r9,16412
  80661c:	1009883a 	mov	r4,r2
  806620:	180b883a 	mov	r5,r3
  806624:	480f883a 	mov	r7,r9
  806628:	400d883a 	mov	r6,r8
  80662c:	0802f200 	call	802f20 <__adddf3>
  806630:	d9000f17 	ldw	r4,60(sp)
  806634:	102d883a 	mov	r22,r2
  806638:	00bf3034 	movhi	r2,64704
  80663c:	18b9883a 	add	fp,r3,r2
  806640:	e02f883a 	mov	r23,fp
  806644:	20028f1e 	bne	r4,zero,807084 <_dtoa_r+0xf3c>
  806648:	0005883a 	mov	r2,zero
  80664c:	00d00534 	movhi	r3,16404
  806650:	a009883a 	mov	r4,r20
  806654:	a80b883a 	mov	r5,r21
  806658:	180f883a 	mov	r7,r3
  80665c:	100d883a 	mov	r6,r2
  806660:	0802ea00 	call	802ea0 <__subdf3>
  806664:	1009883a 	mov	r4,r2
  806668:	e00f883a 	mov	r7,fp
  80666c:	180b883a 	mov	r5,r3
  806670:	b00d883a 	mov	r6,r22
  806674:	1025883a 	mov	r18,r2
  806678:	1827883a 	mov	r19,r3
  80667c:	080c0180 	call	80c018 <__gtdf2>
  806680:	00834f16 	blt	zero,r2,8073c0 <_dtoa_r+0x1278>
  806684:	e0e0003c 	xorhi	r3,fp,32768
  806688:	9009883a 	mov	r4,r18
  80668c:	980b883a 	mov	r5,r19
  806690:	180f883a 	mov	r7,r3
  806694:	b00d883a 	mov	r6,r22
  806698:	080c1280 	call	80c128 <__ltdf2>
  80669c:	1000080e 	bge	r2,zero,8066c0 <_dtoa_r+0x578>
  8066a0:	0027883a 	mov	r19,zero
  8066a4:	0025883a 	mov	r18,zero
  8066a8:	d8802617 	ldw	r2,152(sp)
  8066ac:	df000517 	ldw	fp,20(sp)
  8066b0:	d8000615 	stw	zero,24(sp)
  8066b4:	0084303a 	nor	r2,zero,r2
  8066b8:	d8800d15 	stw	r2,52(sp)
  8066bc:	00019b06 	br	806d2c <_dtoa_r+0xbe4>
  8066c0:	d9801217 	ldw	r6,72(sp)
  8066c4:	d8801317 	ldw	r2,76(sp)
  8066c8:	3029883a 	mov	r20,r6
  8066cc:	102b883a 	mov	r21,r2
  8066d0:	d8c00217 	ldw	r3,8(sp)
  8066d4:	18008516 	blt	r3,zero,8068ec <_dtoa_r+0x7a4>
  8066d8:	d9000d17 	ldw	r4,52(sp)
  8066dc:	00800384 	movi	r2,14
  8066e0:	11008216 	blt	r2,r4,8068ec <_dtoa_r+0x7a4>
  8066e4:	200490fa 	slli	r2,r4,3
  8066e8:	d9802617 	ldw	r6,152(sp)
  8066ec:	00c02074 	movhi	r3,129
  8066f0:	18c7f504 	addi	r3,r3,8148
  8066f4:	10c5883a 	add	r2,r2,r3
  8066f8:	14800017 	ldw	r18,0(r2)
  8066fc:	14c00117 	ldw	r19,4(r2)
  806700:	30031e16 	blt	r6,zero,80737c <_dtoa_r+0x1234>
  806704:	d9000517 	ldw	r4,20(sp)
  806708:	d8c00f17 	ldw	r3,60(sp)
  80670c:	a823883a 	mov	r17,r21
  806710:	a021883a 	mov	r16,r20
  806714:	192b883a 	add	r21,r3,r4
  806718:	2039883a 	mov	fp,r4
  80671c:	00000f06 	br	80675c <_dtoa_r+0x614>
  806720:	0005883a 	mov	r2,zero
  806724:	00d00934 	movhi	r3,16420
  806728:	5009883a 	mov	r4,r10
  80672c:	580b883a 	mov	r5,r11
  806730:	180f883a 	mov	r7,r3
  806734:	100d883a 	mov	r6,r2
  806738:	080bbcc0 	call	80bbcc <__muldf3>
  80673c:	180b883a 	mov	r5,r3
  806740:	000d883a 	mov	r6,zero
  806744:	000f883a 	mov	r7,zero
  806748:	1009883a 	mov	r4,r2
  80674c:	1021883a 	mov	r16,r2
  806750:	1823883a 	mov	r17,r3
  806754:	08031ec0 	call	8031ec <__nedf2>
  806758:	10004526 	beq	r2,zero,806870 <_dtoa_r+0x728>
  80675c:	900d883a 	mov	r6,r18
  806760:	980f883a 	mov	r7,r19
  806764:	8009883a 	mov	r4,r16
  806768:	880b883a 	mov	r5,r17
  80676c:	0802f940 	call	802f94 <__divdf3>
  806770:	180b883a 	mov	r5,r3
  806774:	1009883a 	mov	r4,r2
  806778:	080c2a80 	call	80c2a8 <__fixdfsi>
  80677c:	1009883a 	mov	r4,r2
  806780:	1029883a 	mov	r20,r2
  806784:	080c1b00 	call	80c1b0 <__floatsidf>
  806788:	180f883a 	mov	r7,r3
  80678c:	9009883a 	mov	r4,r18
  806790:	980b883a 	mov	r5,r19
  806794:	100d883a 	mov	r6,r2
  806798:	080bbcc0 	call	80bbcc <__muldf3>
  80679c:	180f883a 	mov	r7,r3
  8067a0:	880b883a 	mov	r5,r17
  8067a4:	8009883a 	mov	r4,r16
  8067a8:	100d883a 	mov	r6,r2
  8067ac:	0802ea00 	call	802ea0 <__subdf3>
  8067b0:	1015883a 	mov	r10,r2
  8067b4:	a0800c04 	addi	r2,r20,48
  8067b8:	e0800005 	stb	r2,0(fp)
  8067bc:	e7000044 	addi	fp,fp,1
  8067c0:	1817883a 	mov	r11,r3
  8067c4:	e57fd61e 	bne	fp,r21,806720 <_dtoa_r+0x5d8>
  8067c8:	500d883a 	mov	r6,r10
  8067cc:	180f883a 	mov	r7,r3
  8067d0:	5009883a 	mov	r4,r10
  8067d4:	180b883a 	mov	r5,r3
  8067d8:	0802f200 	call	802f20 <__adddf3>
  8067dc:	100d883a 	mov	r6,r2
  8067e0:	9009883a 	mov	r4,r18
  8067e4:	980b883a 	mov	r5,r19
  8067e8:	180f883a 	mov	r7,r3
  8067ec:	1021883a 	mov	r16,r2
  8067f0:	1823883a 	mov	r17,r3
  8067f4:	080c1280 	call	80c128 <__ltdf2>
  8067f8:	10000816 	blt	r2,zero,80681c <_dtoa_r+0x6d4>
  8067fc:	980b883a 	mov	r5,r19
  806800:	800d883a 	mov	r6,r16
  806804:	880f883a 	mov	r7,r17
  806808:	9009883a 	mov	r4,r18
  80680c:	080bf900 	call	80bf90 <__eqdf2>
  806810:	1000171e 	bne	r2,zero,806870 <_dtoa_r+0x728>
  806814:	a080004c 	andi	r2,r20,1
  806818:	10001526 	beq	r2,zero,806870 <_dtoa_r+0x728>
  80681c:	d8800d17 	ldw	r2,52(sp)
  806820:	d8800415 	stw	r2,16(sp)
  806824:	e009883a 	mov	r4,fp
  806828:	213fffc4 	addi	r4,r4,-1
  80682c:	20c00007 	ldb	r3,0(r4)
  806830:	00800e44 	movi	r2,57
  806834:	1880081e 	bne	r3,r2,806858 <_dtoa_r+0x710>
  806838:	d8800517 	ldw	r2,20(sp)
  80683c:	113ffa1e 	bne	r2,r4,806828 <_dtoa_r+0x6e0>
  806840:	d8c00417 	ldw	r3,16(sp)
  806844:	d9800517 	ldw	r6,20(sp)
  806848:	00800c04 	movi	r2,48
  80684c:	18c00044 	addi	r3,r3,1
  806850:	d8c00415 	stw	r3,16(sp)
  806854:	30800005 	stb	r2,0(r6)
  806858:	20800003 	ldbu	r2,0(r4)
  80685c:	d8c00417 	ldw	r3,16(sp)
  806860:	27000044 	addi	fp,r4,1
  806864:	10800044 	addi	r2,r2,1
  806868:	d8c00d15 	stw	r3,52(sp)
  80686c:	20800005 	stb	r2,0(r4)
  806870:	d9001617 	ldw	r4,88(sp)
  806874:	d9400717 	ldw	r5,28(sp)
  806878:	08092dc0 	call	8092dc <_Bfree>
  80687c:	e0000005 	stb	zero,0(fp)
  806880:	d9800d17 	ldw	r6,52(sp)
  806884:	d8c02717 	ldw	r3,156(sp)
  806888:	d9002917 	ldw	r4,164(sp)
  80688c:	30800044 	addi	r2,r6,1
  806890:	18800015 	stw	r2,0(r3)
  806894:	20029c26 	beq	r4,zero,807308 <_dtoa_r+0x11c0>
  806898:	d8c00517 	ldw	r3,20(sp)
  80689c:	27000015 	stw	fp,0(r4)
  8068a0:	003e5d06 	br	806218 <_dtoa_r+0xd0>
  8068a4:	d9800d17 	ldw	r6,52(sp)
  8068a8:	00c02074 	movhi	r3,129
  8068ac:	18c7f504 	addi	r3,r3,8148
  8068b0:	d9001217 	ldw	r4,72(sp)
  8068b4:	300490fa 	slli	r2,r6,3
  8068b8:	d9401317 	ldw	r5,76(sp)
  8068bc:	10c5883a 	add	r2,r2,r3
  8068c0:	12000017 	ldw	r8,0(r2)
  8068c4:	12400117 	ldw	r9,4(r2)
  8068c8:	400d883a 	mov	r6,r8
  8068cc:	480f883a 	mov	r7,r9
  8068d0:	080c1280 	call	80c128 <__ltdf2>
  8068d4:	1000030e 	bge	r2,zero,8068e4 <_dtoa_r+0x79c>
  8068d8:	d8800d17 	ldw	r2,52(sp)
  8068dc:	10bfffc4 	addi	r2,r2,-1
  8068e0:	d8800d15 	stw	r2,52(sp)
  8068e4:	d8000c15 	stw	zero,48(sp)
  8068e8:	003ea806 	br	80638c <_dtoa_r+0x244>
  8068ec:	d9000b17 	ldw	r4,44(sp)
  8068f0:	202cc03a 	cmpne	r22,r4,zero
  8068f4:	b000c71e 	bne	r22,zero,806c14 <_dtoa_r+0xacc>
  8068f8:	dc001117 	ldw	r16,68(sp)
  8068fc:	dc801017 	ldw	r18,64(sp)
  806900:	0027883a 	mov	r19,zero
  806904:	04000b0e 	bge	zero,r16,806934 <_dtoa_r+0x7ec>
  806908:	d8c00a17 	ldw	r3,40(sp)
  80690c:	00c0090e 	bge	zero,r3,806934 <_dtoa_r+0x7ec>
  806910:	8005883a 	mov	r2,r16
  806914:	1c011316 	blt	r3,r16,806d64 <_dtoa_r+0xc1c>
  806918:	d9000a17 	ldw	r4,40(sp)
  80691c:	d9801117 	ldw	r6,68(sp)
  806920:	80a1c83a 	sub	r16,r16,r2
  806924:	2089c83a 	sub	r4,r4,r2
  806928:	308dc83a 	sub	r6,r6,r2
  80692c:	d9000a15 	stw	r4,40(sp)
  806930:	d9801115 	stw	r6,68(sp)
  806934:	d8801017 	ldw	r2,64(sp)
  806938:	0080150e 	bge	zero,r2,806990 <_dtoa_r+0x848>
  80693c:	d8c00b17 	ldw	r3,44(sp)
  806940:	1805003a 	cmpeq	r2,r3,zero
  806944:	1001c91e 	bne	r2,zero,80706c <_dtoa_r+0xf24>
  806948:	04800e0e 	bge	zero,r18,806984 <_dtoa_r+0x83c>
  80694c:	d9001617 	ldw	r4,88(sp)
  806950:	980b883a 	mov	r5,r19
  806954:	900d883a 	mov	r6,r18
  806958:	080a0900 	call	80a090 <__pow5mult>
  80695c:	d9001617 	ldw	r4,88(sp)
  806960:	d9800717 	ldw	r6,28(sp)
  806964:	100b883a 	mov	r5,r2
  806968:	1027883a 	mov	r19,r2
  80696c:	0809d6c0 	call	809d6c <__multiply>
  806970:	d9001617 	ldw	r4,88(sp)
  806974:	d9400717 	ldw	r5,28(sp)
  806978:	1023883a 	mov	r17,r2
  80697c:	08092dc0 	call	8092dc <_Bfree>
  806980:	dc400715 	stw	r17,28(sp)
  806984:	d9001017 	ldw	r4,64(sp)
  806988:	248dc83a 	sub	r6,r4,r18
  80698c:	30010e1e 	bne	r6,zero,806dc8 <_dtoa_r+0xc80>
  806990:	d9001617 	ldw	r4,88(sp)
  806994:	04400044 	movi	r17,1
  806998:	880b883a 	mov	r5,r17
  80699c:	0809f540 	call	809f54 <__i2b>
  8069a0:	d9800917 	ldw	r6,36(sp)
  8069a4:	1025883a 	mov	r18,r2
  8069a8:	0180040e 	bge	zero,r6,8069bc <_dtoa_r+0x874>
  8069ac:	d9001617 	ldw	r4,88(sp)
  8069b0:	100b883a 	mov	r5,r2
  8069b4:	080a0900 	call	80a090 <__pow5mult>
  8069b8:	1025883a 	mov	r18,r2
  8069bc:	d8801717 	ldw	r2,92(sp)
  8069c0:	8880f30e 	bge	r17,r2,806d90 <_dtoa_r+0xc48>
  8069c4:	0023883a 	mov	r17,zero
  8069c8:	d9800917 	ldw	r6,36(sp)
  8069cc:	30019e1e 	bne	r6,zero,807048 <_dtoa_r+0xf00>
  8069d0:	00c00044 	movi	r3,1
  8069d4:	d9000a17 	ldw	r4,40(sp)
  8069d8:	20c5883a 	add	r2,r4,r3
  8069dc:	10c007cc 	andi	r3,r2,31
  8069e0:	1800841e 	bne	r3,zero,806bf4 <_dtoa_r+0xaac>
  8069e4:	00800704 	movi	r2,28
  8069e8:	d9000a17 	ldw	r4,40(sp)
  8069ec:	d9801117 	ldw	r6,68(sp)
  8069f0:	80a1883a 	add	r16,r16,r2
  8069f4:	2089883a 	add	r4,r4,r2
  8069f8:	308d883a 	add	r6,r6,r2
  8069fc:	d9000a15 	stw	r4,40(sp)
  806a00:	d9801115 	stw	r6,68(sp)
  806a04:	d8801117 	ldw	r2,68(sp)
  806a08:	0080050e 	bge	zero,r2,806a20 <_dtoa_r+0x8d8>
  806a0c:	d9400717 	ldw	r5,28(sp)
  806a10:	d9001617 	ldw	r4,88(sp)
  806a14:	100d883a 	mov	r6,r2
  806a18:	0809c200 	call	809c20 <__lshift>
  806a1c:	d8800715 	stw	r2,28(sp)
  806a20:	d8c00a17 	ldw	r3,40(sp)
  806a24:	00c0050e 	bge	zero,r3,806a3c <_dtoa_r+0x8f4>
  806a28:	d9001617 	ldw	r4,88(sp)
  806a2c:	900b883a 	mov	r5,r18
  806a30:	180d883a 	mov	r6,r3
  806a34:	0809c200 	call	809c20 <__lshift>
  806a38:	1025883a 	mov	r18,r2
  806a3c:	d9000c17 	ldw	r4,48(sp)
  806a40:	2005003a 	cmpeq	r2,r4,zero
  806a44:	10016f26 	beq	r2,zero,807004 <_dtoa_r+0xebc>
  806a48:	d9000f17 	ldw	r4,60(sp)
  806a4c:	0102170e 	bge	zero,r4,8072ac <_dtoa_r+0x1164>
  806a50:	d9800b17 	ldw	r6,44(sp)
  806a54:	3005003a 	cmpeq	r2,r6,zero
  806a58:	1000881e 	bne	r2,zero,806c7c <_dtoa_r+0xb34>
  806a5c:	0400050e 	bge	zero,r16,806a74 <_dtoa_r+0x92c>
  806a60:	d9001617 	ldw	r4,88(sp)
  806a64:	980b883a 	mov	r5,r19
  806a68:	800d883a 	mov	r6,r16
  806a6c:	0809c200 	call	809c20 <__lshift>
  806a70:	1027883a 	mov	r19,r2
  806a74:	8804c03a 	cmpne	r2,r17,zero
  806a78:	1002541e 	bne	r2,zero,8073cc <_dtoa_r+0x1284>
  806a7c:	980b883a 	mov	r5,r19
  806a80:	dd800517 	ldw	r22,20(sp)
  806a84:	dcc00615 	stw	r19,24(sp)
  806a88:	a700004c 	andi	fp,r20,1
  806a8c:	2827883a 	mov	r19,r5
  806a90:	d9000717 	ldw	r4,28(sp)
  806a94:	900b883a 	mov	r5,r18
  806a98:	0805f300 	call	805f30 <quorem>
  806a9c:	d9000717 	ldw	r4,28(sp)
  806aa0:	d9400617 	ldw	r5,24(sp)
  806aa4:	1023883a 	mov	r17,r2
  806aa8:	8dc00c04 	addi	r23,r17,48
  806aac:	08094380 	call	809438 <__mcmp>
  806ab0:	d9001617 	ldw	r4,88(sp)
  806ab4:	900b883a 	mov	r5,r18
  806ab8:	980d883a 	mov	r6,r19
  806abc:	1029883a 	mov	r20,r2
  806ac0:	0809a940 	call	809a94 <__mdiff>
  806ac4:	102b883a 	mov	r21,r2
  806ac8:	10800317 	ldw	r2,12(r2)
  806acc:	1001281e 	bne	r2,zero,806f70 <_dtoa_r+0xe28>
  806ad0:	d9000717 	ldw	r4,28(sp)
  806ad4:	a80b883a 	mov	r5,r21
  806ad8:	08094380 	call	809438 <__mcmp>
  806adc:	d9001617 	ldw	r4,88(sp)
  806ae0:	1021883a 	mov	r16,r2
  806ae4:	a80b883a 	mov	r5,r21
  806ae8:	08092dc0 	call	8092dc <_Bfree>
  806aec:	8000041e 	bne	r16,zero,806b00 <_dtoa_r+0x9b8>
  806af0:	d8801717 	ldw	r2,92(sp)
  806af4:	1000021e 	bne	r2,zero,806b00 <_dtoa_r+0x9b8>
  806af8:	e004c03a 	cmpne	r2,fp,zero
  806afc:	10011726 	beq	r2,zero,806f5c <_dtoa_r+0xe14>
  806b00:	a0010616 	blt	r20,zero,806f1c <_dtoa_r+0xdd4>
  806b04:	a000041e 	bne	r20,zero,806b18 <_dtoa_r+0x9d0>
  806b08:	d8c01717 	ldw	r3,92(sp)
  806b0c:	1800021e 	bne	r3,zero,806b18 <_dtoa_r+0x9d0>
  806b10:	e004c03a 	cmpne	r2,fp,zero
  806b14:	10010126 	beq	r2,zero,806f1c <_dtoa_r+0xdd4>
  806b18:	04023d16 	blt	zero,r16,807410 <_dtoa_r+0x12c8>
  806b1c:	b5c00005 	stb	r23,0(r22)
  806b20:	d9800517 	ldw	r6,20(sp)
  806b24:	d9000f17 	ldw	r4,60(sp)
  806b28:	b5800044 	addi	r22,r22,1
  806b2c:	3105883a 	add	r2,r6,r4
  806b30:	b0806526 	beq	r22,r2,806cc8 <_dtoa_r+0xb80>
  806b34:	d9400717 	ldw	r5,28(sp)
  806b38:	d9001617 	ldw	r4,88(sp)
  806b3c:	01800284 	movi	r6,10
  806b40:	000f883a 	mov	r7,zero
  806b44:	0809f900 	call	809f90 <__multadd>
  806b48:	d8800715 	stw	r2,28(sp)
  806b4c:	d8800617 	ldw	r2,24(sp)
  806b50:	14c10c26 	beq	r2,r19,806f84 <_dtoa_r+0xe3c>
  806b54:	d9400617 	ldw	r5,24(sp)
  806b58:	d9001617 	ldw	r4,88(sp)
  806b5c:	01800284 	movi	r6,10
  806b60:	000f883a 	mov	r7,zero
  806b64:	0809f900 	call	809f90 <__multadd>
  806b68:	d9001617 	ldw	r4,88(sp)
  806b6c:	980b883a 	mov	r5,r19
  806b70:	01800284 	movi	r6,10
  806b74:	000f883a 	mov	r7,zero
  806b78:	d8800615 	stw	r2,24(sp)
  806b7c:	0809f900 	call	809f90 <__multadd>
  806b80:	1027883a 	mov	r19,r2
  806b84:	003fc206 	br	806a90 <_dtoa_r+0x948>
  806b88:	2445c83a 	sub	r2,r4,r17
  806b8c:	a088983a 	sll	r4,r20,r2
  806b90:	003e4b06 	br	8064c0 <_dtoa_r+0x378>
  806b94:	01bfffc4 	movi	r6,-1
  806b98:	00800044 	movi	r2,1
  806b9c:	d9800e15 	stw	r6,56(sp)
  806ba0:	d9800f15 	stw	r6,60(sp)
  806ba4:	d8800b15 	stw	r2,44(sp)
  806ba8:	d8c01617 	ldw	r3,88(sp)
  806bac:	008005c4 	movi	r2,23
  806bb0:	18001115 	stw	zero,68(r3)
  806bb4:	1580082e 	bgeu	r2,r22,806bd8 <_dtoa_r+0xa90>
  806bb8:	00c00104 	movi	r3,4
  806bbc:	0009883a 	mov	r4,zero
  806bc0:	18c7883a 	add	r3,r3,r3
  806bc4:	18800504 	addi	r2,r3,20
  806bc8:	21000044 	addi	r4,r4,1
  806bcc:	b0bffc2e 	bgeu	r22,r2,806bc0 <_dtoa_r+0xa78>
  806bd0:	d9801617 	ldw	r6,88(sp)
  806bd4:	31001115 	stw	r4,68(r6)
  806bd8:	dc000f17 	ldw	r16,60(sp)
  806bdc:	003e4b06 	br	80650c <_dtoa_r+0x3c4>
  806be0:	d9801717 	ldw	r6,92(sp)
  806be4:	0023883a 	mov	r17,zero
  806be8:	31bfff04 	addi	r6,r6,-4
  806bec:	d9801715 	stw	r6,92(sp)
  806bf0:	003df806 	br	8063d4 <_dtoa_r+0x28c>
  806bf4:	00800804 	movi	r2,32
  806bf8:	10c9c83a 	sub	r4,r2,r3
  806bfc:	00c00104 	movi	r3,4
  806c00:	19005a16 	blt	r3,r4,806d6c <_dtoa_r+0xc24>
  806c04:	008000c4 	movi	r2,3
  806c08:	113f7e16 	blt	r2,r4,806a04 <_dtoa_r+0x8bc>
  806c0c:	20800704 	addi	r2,r4,28
  806c10:	003f7506 	br	8069e8 <_dtoa_r+0x8a0>
  806c14:	d9801717 	ldw	r6,92(sp)
  806c18:	00800044 	movi	r2,1
  806c1c:	1180a10e 	bge	r2,r6,806ea4 <_dtoa_r+0xd5c>
  806c20:	d9800f17 	ldw	r6,60(sp)
  806c24:	d8c01017 	ldw	r3,64(sp)
  806c28:	30bfffc4 	addi	r2,r6,-1
  806c2c:	1881c616 	blt	r3,r2,807348 <_dtoa_r+0x1200>
  806c30:	18a5c83a 	sub	r18,r3,r2
  806c34:	d8800f17 	ldw	r2,60(sp)
  806c38:	10026216 	blt	r2,zero,8075c4 <_dtoa_r+0x147c>
  806c3c:	dc001117 	ldw	r16,68(sp)
  806c40:	1007883a 	mov	r3,r2
  806c44:	d9800a17 	ldw	r6,40(sp)
  806c48:	d8801117 	ldw	r2,68(sp)
  806c4c:	d9001617 	ldw	r4,88(sp)
  806c50:	30cd883a 	add	r6,r6,r3
  806c54:	10c5883a 	add	r2,r2,r3
  806c58:	01400044 	movi	r5,1
  806c5c:	d9800a15 	stw	r6,40(sp)
  806c60:	d8801115 	stw	r2,68(sp)
  806c64:	0809f540 	call	809f54 <__i2b>
  806c68:	1027883a 	mov	r19,r2
  806c6c:	003f2506 	br	806904 <_dtoa_r+0x7bc>
  806c70:	00c02074 	movhi	r3,129
  806c74:	18c75304 	addi	r3,r3,7500
  806c78:	003d6706 	br	806218 <_dtoa_r+0xd0>
  806c7c:	dd800517 	ldw	r22,20(sp)
  806c80:	04000044 	movi	r16,1
  806c84:	00000706 	br	806ca4 <_dtoa_r+0xb5c>
  806c88:	d9400717 	ldw	r5,28(sp)
  806c8c:	d9001617 	ldw	r4,88(sp)
  806c90:	01800284 	movi	r6,10
  806c94:	000f883a 	mov	r7,zero
  806c98:	0809f900 	call	809f90 <__multadd>
  806c9c:	d8800715 	stw	r2,28(sp)
  806ca0:	84000044 	addi	r16,r16,1
  806ca4:	d9000717 	ldw	r4,28(sp)
  806ca8:	900b883a 	mov	r5,r18
  806cac:	0805f300 	call	805f30 <quorem>
  806cb0:	15c00c04 	addi	r23,r2,48
  806cb4:	b5c00005 	stb	r23,0(r22)
  806cb8:	d8c00f17 	ldw	r3,60(sp)
  806cbc:	b5800044 	addi	r22,r22,1
  806cc0:	80fff116 	blt	r16,r3,806c88 <_dtoa_r+0xb40>
  806cc4:	d8000615 	stw	zero,24(sp)
  806cc8:	d9400717 	ldw	r5,28(sp)
  806ccc:	d9001617 	ldw	r4,88(sp)
  806cd0:	01800044 	movi	r6,1
  806cd4:	0809c200 	call	809c20 <__lshift>
  806cd8:	1009883a 	mov	r4,r2
  806cdc:	900b883a 	mov	r5,r18
  806ce0:	d8800715 	stw	r2,28(sp)
  806ce4:	08094380 	call	809438 <__mcmp>
  806ce8:	00803c0e 	bge	zero,r2,806ddc <_dtoa_r+0xc94>
  806cec:	b009883a 	mov	r4,r22
  806cf0:	213fffc4 	addi	r4,r4,-1
  806cf4:	21400003 	ldbu	r5,0(r4)
  806cf8:	00800e44 	movi	r2,57
  806cfc:	28c03fcc 	andi	r3,r5,255
  806d00:	18c0201c 	xori	r3,r3,128
  806d04:	18ffe004 	addi	r3,r3,-128
  806d08:	1881981e 	bne	r3,r2,80736c <_dtoa_r+0x1224>
  806d0c:	d9800517 	ldw	r6,20(sp)
  806d10:	21bff71e 	bne	r4,r6,806cf0 <_dtoa_r+0xba8>
  806d14:	d8800d17 	ldw	r2,52(sp)
  806d18:	37000044 	addi	fp,r6,1
  806d1c:	10800044 	addi	r2,r2,1
  806d20:	d8800d15 	stw	r2,52(sp)
  806d24:	00800c44 	movi	r2,49
  806d28:	30800005 	stb	r2,0(r6)
  806d2c:	d9001617 	ldw	r4,88(sp)
  806d30:	900b883a 	mov	r5,r18
  806d34:	08092dc0 	call	8092dc <_Bfree>
  806d38:	983ecd26 	beq	r19,zero,806870 <_dtoa_r+0x728>
  806d3c:	d8c00617 	ldw	r3,24(sp)
  806d40:	18000426 	beq	r3,zero,806d54 <_dtoa_r+0xc0c>
  806d44:	1cc00326 	beq	r3,r19,806d54 <_dtoa_r+0xc0c>
  806d48:	d9001617 	ldw	r4,88(sp)
  806d4c:	180b883a 	mov	r5,r3
  806d50:	08092dc0 	call	8092dc <_Bfree>
  806d54:	d9001617 	ldw	r4,88(sp)
  806d58:	980b883a 	mov	r5,r19
  806d5c:	08092dc0 	call	8092dc <_Bfree>
  806d60:	003ec306 	br	806870 <_dtoa_r+0x728>
  806d64:	1805883a 	mov	r2,r3
  806d68:	003eeb06 	br	806918 <_dtoa_r+0x7d0>
  806d6c:	d9800a17 	ldw	r6,40(sp)
  806d70:	d8c01117 	ldw	r3,68(sp)
  806d74:	20bfff04 	addi	r2,r4,-4
  806d78:	308d883a 	add	r6,r6,r2
  806d7c:	1887883a 	add	r3,r3,r2
  806d80:	80a1883a 	add	r16,r16,r2
  806d84:	d9800a15 	stw	r6,40(sp)
  806d88:	d8c01115 	stw	r3,68(sp)
  806d8c:	003f1d06 	br	806a04 <_dtoa_r+0x8bc>
  806d90:	a03f0c1e 	bne	r20,zero,8069c4 <_dtoa_r+0x87c>
  806d94:	00800434 	movhi	r2,16
  806d98:	10bfffc4 	addi	r2,r2,-1
  806d9c:	a884703a 	and	r2,r21,r2
  806da0:	103f081e 	bne	r2,zero,8069c4 <_dtoa_r+0x87c>
  806da4:	a89ffc2c 	andhi	r2,r21,32752
  806da8:	103f0626 	beq	r2,zero,8069c4 <_dtoa_r+0x87c>
  806dac:	d8c01117 	ldw	r3,68(sp)
  806db0:	d9000a17 	ldw	r4,40(sp)
  806db4:	18c00044 	addi	r3,r3,1
  806db8:	21000044 	addi	r4,r4,1
  806dbc:	d8c01115 	stw	r3,68(sp)
  806dc0:	d9000a15 	stw	r4,40(sp)
  806dc4:	003f0006 	br	8069c8 <_dtoa_r+0x880>
  806dc8:	d9400717 	ldw	r5,28(sp)
  806dcc:	d9001617 	ldw	r4,88(sp)
  806dd0:	080a0900 	call	80a090 <__pow5mult>
  806dd4:	d8800715 	stw	r2,28(sp)
  806dd8:	003eed06 	br	806990 <_dtoa_r+0x848>
  806ddc:	1000021e 	bne	r2,zero,806de8 <_dtoa_r+0xca0>
  806de0:	b880004c 	andi	r2,r23,1
  806de4:	103fc11e 	bne	r2,zero,806cec <_dtoa_r+0xba4>
  806de8:	b5bfffc4 	addi	r22,r22,-1
  806dec:	b0c00007 	ldb	r3,0(r22)
  806df0:	00800c04 	movi	r2,48
  806df4:	18bffc26 	beq	r3,r2,806de8 <_dtoa_r+0xca0>
  806df8:	b7000044 	addi	fp,r22,1
  806dfc:	003fcb06 	br	806d2c <_dtoa_r+0xbe4>
  806e00:	d9800d17 	ldw	r6,52(sp)
  806e04:	018fc83a 	sub	r7,zero,r6
  806e08:	3801f726 	beq	r7,zero,8075e8 <_dtoa_r+0x14a0>
  806e0c:	398003cc 	andi	r6,r7,15
  806e10:	300c90fa 	slli	r6,r6,3
  806e14:	01402074 	movhi	r5,129
  806e18:	2947f504 	addi	r5,r5,8148
  806e1c:	d9001217 	ldw	r4,72(sp)
  806e20:	314d883a 	add	r6,r6,r5
  806e24:	30c00117 	ldw	r3,4(r6)
  806e28:	30800017 	ldw	r2,0(r6)
  806e2c:	d9401317 	ldw	r5,76(sp)
  806e30:	3821d13a 	srai	r16,r7,4
  806e34:	100d883a 	mov	r6,r2
  806e38:	180f883a 	mov	r7,r3
  806e3c:	080bbcc0 	call	80bbcc <__muldf3>
  806e40:	1011883a 	mov	r8,r2
  806e44:	1813883a 	mov	r9,r3
  806e48:	1029883a 	mov	r20,r2
  806e4c:	182b883a 	mov	r21,r3
  806e50:	8001e526 	beq	r16,zero,8075e8 <_dtoa_r+0x14a0>
  806e54:	05800084 	movi	r22,2
  806e58:	04402074 	movhi	r17,129
  806e5c:	8c482704 	addi	r17,r17,8348
  806e60:	8080004c 	andi	r2,r16,1
  806e64:	1005003a 	cmpeq	r2,r2,zero
  806e68:	1000081e 	bne	r2,zero,806e8c <_dtoa_r+0xd44>
  806e6c:	89800017 	ldw	r6,0(r17)
  806e70:	89c00117 	ldw	r7,4(r17)
  806e74:	480b883a 	mov	r5,r9
  806e78:	4009883a 	mov	r4,r8
  806e7c:	080bbcc0 	call	80bbcc <__muldf3>
  806e80:	1011883a 	mov	r8,r2
  806e84:	b5800044 	addi	r22,r22,1
  806e88:	1813883a 	mov	r9,r3
  806e8c:	8021d07a 	srai	r16,r16,1
  806e90:	8c400204 	addi	r17,r17,8
  806e94:	803ff21e 	bne	r16,zero,806e60 <_dtoa_r+0xd18>
  806e98:	4029883a 	mov	r20,r8
  806e9c:	482b883a 	mov	r21,r9
  806ea0:	003dca06 	br	8065cc <_dtoa_r+0x484>
  806ea4:	d9000817 	ldw	r4,32(sp)
  806ea8:	2005003a 	cmpeq	r2,r4,zero
  806eac:	1001f61e 	bne	r2,zero,807688 <_dtoa_r+0x1540>
  806eb0:	dc001117 	ldw	r16,68(sp)
  806eb4:	dc801017 	ldw	r18,64(sp)
  806eb8:	18c10cc4 	addi	r3,r3,1075
  806ebc:	003f6106 	br	806c44 <_dtoa_r+0xafc>
  806ec0:	d8000b15 	stw	zero,44(sp)
  806ec4:	d9802617 	ldw	r6,152(sp)
  806ec8:	d8c00d17 	ldw	r3,52(sp)
  806ecc:	30800044 	addi	r2,r6,1
  806ed0:	18ad883a 	add	r22,r3,r2
  806ed4:	b13fffc4 	addi	r4,r22,-1
  806ed8:	d9000e15 	stw	r4,56(sp)
  806edc:	0581f60e 	bge	zero,r22,8076b8 <_dtoa_r+0x1570>
  806ee0:	dd800f15 	stw	r22,60(sp)
  806ee4:	003f3006 	br	806ba8 <_dtoa_r+0xa60>
  806ee8:	d8000b15 	stw	zero,44(sp)
  806eec:	d9002617 	ldw	r4,152(sp)
  806ef0:	0101eb0e 	bge	zero,r4,8076a0 <_dtoa_r+0x1558>
  806ef4:	202d883a 	mov	r22,r4
  806ef8:	d9000e15 	stw	r4,56(sp)
  806efc:	d9000f15 	stw	r4,60(sp)
  806f00:	003f2906 	br	806ba8 <_dtoa_r+0xa60>
  806f04:	01800044 	movi	r6,1
  806f08:	d9800b15 	stw	r6,44(sp)
  806f0c:	003ff706 	br	806eec <_dtoa_r+0xda4>
  806f10:	01000044 	movi	r4,1
  806f14:	d9000b15 	stw	r4,44(sp)
  806f18:	003fea06 	br	806ec4 <_dtoa_r+0xd7c>
  806f1c:	04000c0e 	bge	zero,r16,806f50 <_dtoa_r+0xe08>
  806f20:	d9400717 	ldw	r5,28(sp)
  806f24:	d9001617 	ldw	r4,88(sp)
  806f28:	01800044 	movi	r6,1
  806f2c:	0809c200 	call	809c20 <__lshift>
  806f30:	1009883a 	mov	r4,r2
  806f34:	900b883a 	mov	r5,r18
  806f38:	d8800715 	stw	r2,28(sp)
  806f3c:	08094380 	call	809438 <__mcmp>
  806f40:	0081e00e 	bge	zero,r2,8076c4 <_dtoa_r+0x157c>
  806f44:	bdc00044 	addi	r23,r23,1
  806f48:	00800e84 	movi	r2,58
  806f4c:	b881a226 	beq	r23,r2,8075d8 <_dtoa_r+0x1490>
  806f50:	b7000044 	addi	fp,r22,1
  806f54:	b5c00005 	stb	r23,0(r22)
  806f58:	003f7406 	br	806d2c <_dtoa_r+0xbe4>
  806f5c:	00800e44 	movi	r2,57
  806f60:	b8819d26 	beq	r23,r2,8075d8 <_dtoa_r+0x1490>
  806f64:	053ffa0e 	bge	zero,r20,806f50 <_dtoa_r+0xe08>
  806f68:	8dc00c44 	addi	r23,r17,49
  806f6c:	003ff806 	br	806f50 <_dtoa_r+0xe08>
  806f70:	d9001617 	ldw	r4,88(sp)
  806f74:	a80b883a 	mov	r5,r21
  806f78:	04000044 	movi	r16,1
  806f7c:	08092dc0 	call	8092dc <_Bfree>
  806f80:	003edf06 	br	806b00 <_dtoa_r+0x9b8>
  806f84:	d9001617 	ldw	r4,88(sp)
  806f88:	980b883a 	mov	r5,r19
  806f8c:	01800284 	movi	r6,10
  806f90:	000f883a 	mov	r7,zero
  806f94:	0809f900 	call	809f90 <__multadd>
  806f98:	1027883a 	mov	r19,r2
  806f9c:	d8800615 	stw	r2,24(sp)
  806fa0:	003ebb06 	br	806a90 <_dtoa_r+0x948>
  806fa4:	d9801117 	ldw	r6,68(sp)
  806fa8:	d8800d17 	ldw	r2,52(sp)
  806fac:	d8000915 	stw	zero,36(sp)
  806fb0:	308dc83a 	sub	r6,r6,r2
  806fb4:	0087c83a 	sub	r3,zero,r2
  806fb8:	d9801115 	stw	r6,68(sp)
  806fbc:	d8c01015 	stw	r3,64(sp)
  806fc0:	003cfe06 	br	8063bc <_dtoa_r+0x274>
  806fc4:	018dc83a 	sub	r6,zero,r6
  806fc8:	d9801115 	stw	r6,68(sp)
  806fcc:	d8000a15 	stw	zero,40(sp)
  806fd0:	003cf306 	br	8063a0 <_dtoa_r+0x258>
  806fd4:	d9000d17 	ldw	r4,52(sp)
  806fd8:	080c1b00 	call	80c1b0 <__floatsidf>
  806fdc:	880b883a 	mov	r5,r17
  806fe0:	8009883a 	mov	r4,r16
  806fe4:	180f883a 	mov	r7,r3
  806fe8:	100d883a 	mov	r6,r2
  806fec:	08031ec0 	call	8031ec <__nedf2>
  806ff0:	103ce126 	beq	r2,zero,806378 <_dtoa_r+0x230>
  806ff4:	d9800d17 	ldw	r6,52(sp)
  806ff8:	31bfffc4 	addi	r6,r6,-1
  806ffc:	d9800d15 	stw	r6,52(sp)
  807000:	003cdd06 	br	806378 <_dtoa_r+0x230>
  807004:	d9000717 	ldw	r4,28(sp)
  807008:	900b883a 	mov	r5,r18
  80700c:	08094380 	call	809438 <__mcmp>
  807010:	103e8d0e 	bge	r2,zero,806a48 <_dtoa_r+0x900>
  807014:	d9400717 	ldw	r5,28(sp)
  807018:	d9001617 	ldw	r4,88(sp)
  80701c:	01800284 	movi	r6,10
  807020:	000f883a 	mov	r7,zero
  807024:	0809f900 	call	809f90 <__multadd>
  807028:	d9800d17 	ldw	r6,52(sp)
  80702c:	d8800715 	stw	r2,28(sp)
  807030:	31bfffc4 	addi	r6,r6,-1
  807034:	d9800d15 	stw	r6,52(sp)
  807038:	b001a71e 	bne	r22,zero,8076d8 <_dtoa_r+0x1590>
  80703c:	d8800e17 	ldw	r2,56(sp)
  807040:	d8800f15 	stw	r2,60(sp)
  807044:	003e8006 	br	806a48 <_dtoa_r+0x900>
  807048:	90800417 	ldw	r2,16(r18)
  80704c:	1085883a 	add	r2,r2,r2
  807050:	1085883a 	add	r2,r2,r2
  807054:	1485883a 	add	r2,r2,r18
  807058:	11000417 	ldw	r4,16(r2)
  80705c:	08093040 	call	809304 <__hi0bits>
  807060:	00c00804 	movi	r3,32
  807064:	1887c83a 	sub	r3,r3,r2
  807068:	003e5a06 	br	8069d4 <_dtoa_r+0x88c>
  80706c:	d9400717 	ldw	r5,28(sp)
  807070:	d9801017 	ldw	r6,64(sp)
  807074:	d9001617 	ldw	r4,88(sp)
  807078:	080a0900 	call	80a090 <__pow5mult>
  80707c:	d8800715 	stw	r2,28(sp)
  807080:	003e4306 	br	806990 <_dtoa_r+0x848>
  807084:	d9800f17 	ldw	r6,60(sp)
  807088:	d8800d17 	ldw	r2,52(sp)
  80708c:	d9800315 	stw	r6,12(sp)
  807090:	d8800415 	stw	r2,16(sp)
  807094:	d8c00b17 	ldw	r3,44(sp)
  807098:	1805003a 	cmpeq	r2,r3,zero
  80709c:	1000e21e 	bne	r2,zero,807428 <_dtoa_r+0x12e0>
  8070a0:	d9000317 	ldw	r4,12(sp)
  8070a4:	0005883a 	mov	r2,zero
  8070a8:	00cff834 	movhi	r3,16352
  8070ac:	200c90fa 	slli	r6,r4,3
  8070b0:	01002074 	movhi	r4,129
  8070b4:	2107f504 	addi	r4,r4,8148
  8070b8:	180b883a 	mov	r5,r3
  8070bc:	310d883a 	add	r6,r6,r4
  8070c0:	327fff17 	ldw	r9,-4(r6)
  8070c4:	323ffe17 	ldw	r8,-8(r6)
  8070c8:	1009883a 	mov	r4,r2
  8070cc:	480f883a 	mov	r7,r9
  8070d0:	400d883a 	mov	r6,r8
  8070d4:	0802f940 	call	802f94 <__divdf3>
  8070d8:	180b883a 	mov	r5,r3
  8070dc:	b00d883a 	mov	r6,r22
  8070e0:	b80f883a 	mov	r7,r23
  8070e4:	1009883a 	mov	r4,r2
  8070e8:	0802ea00 	call	802ea0 <__subdf3>
  8070ec:	a80b883a 	mov	r5,r21
  8070f0:	a009883a 	mov	r4,r20
  8070f4:	d8c01915 	stw	r3,100(sp)
  8070f8:	d8801815 	stw	r2,96(sp)
  8070fc:	080c2a80 	call	80c2a8 <__fixdfsi>
  807100:	1009883a 	mov	r4,r2
  807104:	1027883a 	mov	r19,r2
  807108:	080c1b00 	call	80c1b0 <__floatsidf>
  80710c:	a80b883a 	mov	r5,r21
  807110:	a009883a 	mov	r4,r20
  807114:	180f883a 	mov	r7,r3
  807118:	100d883a 	mov	r6,r2
  80711c:	0802ea00 	call	802ea0 <__subdf3>
  807120:	d9801817 	ldw	r6,96(sp)
  807124:	1823883a 	mov	r17,r3
  807128:	d8801415 	stw	r2,80(sp)
  80712c:	302d883a 	mov	r22,r6
  807130:	d9800517 	ldw	r6,20(sp)
  807134:	9cc00c04 	addi	r19,r19,48
  807138:	dc401515 	stw	r17,84(sp)
  80713c:	d8c01917 	ldw	r3,100(sp)
  807140:	34c00005 	stb	r19,0(r6)
  807144:	d8800517 	ldw	r2,20(sp)
  807148:	d9401917 	ldw	r5,100(sp)
  80714c:	d9801417 	ldw	r6,80(sp)
  807150:	b009883a 	mov	r4,r22
  807154:	880f883a 	mov	r7,r17
  807158:	182f883a 	mov	r23,r3
  80715c:	17000044 	addi	fp,r2,1
  807160:	080c0180 	call	80c018 <__gtdf2>
  807164:	00804e16 	blt	zero,r2,8072a0 <_dtoa_r+0x1158>
  807168:	d9801417 	ldw	r6,80(sp)
  80716c:	0005883a 	mov	r2,zero
  807170:	00cffc34 	movhi	r3,16368
  807174:	180b883a 	mov	r5,r3
  807178:	880f883a 	mov	r7,r17
  80717c:	1009883a 	mov	r4,r2
  807180:	0802ea00 	call	802ea0 <__subdf3>
  807184:	d9401917 	ldw	r5,100(sp)
  807188:	180f883a 	mov	r7,r3
  80718c:	b009883a 	mov	r4,r22
  807190:	100d883a 	mov	r6,r2
  807194:	080c0180 	call	80c018 <__gtdf2>
  807198:	00bda216 	blt	zero,r2,806824 <_dtoa_r+0x6dc>
  80719c:	d8c00317 	ldw	r3,12(sp)
  8071a0:	00800044 	movi	r2,1
  8071a4:	10c01216 	blt	r2,r3,8071f0 <_dtoa_r+0x10a8>
  8071a8:	003d4506 	br	8066c0 <_dtoa_r+0x578>
  8071ac:	d9801417 	ldw	r6,80(sp)
  8071b0:	0005883a 	mov	r2,zero
  8071b4:	00cffc34 	movhi	r3,16368
  8071b8:	180b883a 	mov	r5,r3
  8071bc:	880f883a 	mov	r7,r17
  8071c0:	1009883a 	mov	r4,r2
  8071c4:	0802ea00 	call	802ea0 <__subdf3>
  8071c8:	d9c01b17 	ldw	r7,108(sp)
  8071cc:	180b883a 	mov	r5,r3
  8071d0:	1009883a 	mov	r4,r2
  8071d4:	b00d883a 	mov	r6,r22
  8071d8:	080c1280 	call	80c128 <__ltdf2>
  8071dc:	103d9116 	blt	r2,zero,806824 <_dtoa_r+0x6dc>
  8071e0:	d9800517 	ldw	r6,20(sp)
  8071e4:	d9000317 	ldw	r4,12(sp)
  8071e8:	3105883a 	add	r2,r6,r4
  8071ec:	e0bd3426 	beq	fp,r2,8066c0 <_dtoa_r+0x578>
  8071f0:	04500934 	movhi	r17,16420
  8071f4:	0021883a 	mov	r16,zero
  8071f8:	b80b883a 	mov	r5,r23
  8071fc:	b009883a 	mov	r4,r22
  807200:	800d883a 	mov	r6,r16
  807204:	880f883a 	mov	r7,r17
  807208:	080bbcc0 	call	80bbcc <__muldf3>
  80720c:	d9401517 	ldw	r5,84(sp)
  807210:	d9001417 	ldw	r4,80(sp)
  807214:	880f883a 	mov	r7,r17
  807218:	000d883a 	mov	r6,zero
  80721c:	d8801a15 	stw	r2,104(sp)
  807220:	d8c01b15 	stw	r3,108(sp)
  807224:	080bbcc0 	call	80bbcc <__muldf3>
  807228:	180b883a 	mov	r5,r3
  80722c:	1009883a 	mov	r4,r2
  807230:	1823883a 	mov	r17,r3
  807234:	1021883a 	mov	r16,r2
  807238:	080c2a80 	call	80c2a8 <__fixdfsi>
  80723c:	1009883a 	mov	r4,r2
  807240:	102b883a 	mov	r21,r2
  807244:	080c1b00 	call	80c1b0 <__floatsidf>
  807248:	880b883a 	mov	r5,r17
  80724c:	8009883a 	mov	r4,r16
  807250:	180f883a 	mov	r7,r3
  807254:	100d883a 	mov	r6,r2
  807258:	0802ea00 	call	802ea0 <__subdf3>
  80725c:	1021883a 	mov	r16,r2
  807260:	d9001b17 	ldw	r4,108(sp)
  807264:	1823883a 	mov	r17,r3
  807268:	dc001415 	stw	r16,80(sp)
  80726c:	ad400c04 	addi	r21,r21,48
  807270:	dc401515 	stw	r17,84(sp)
  807274:	d8801a17 	ldw	r2,104(sp)
  807278:	e5400005 	stb	r21,0(fp)
  80727c:	202f883a 	mov	r23,r4
  807280:	d9c01b17 	ldw	r7,108(sp)
  807284:	d9001417 	ldw	r4,80(sp)
  807288:	880b883a 	mov	r5,r17
  80728c:	100d883a 	mov	r6,r2
  807290:	102d883a 	mov	r22,r2
  807294:	e7000044 	addi	fp,fp,1
  807298:	080c1280 	call	80c128 <__ltdf2>
  80729c:	103fc30e 	bge	r2,zero,8071ac <_dtoa_r+0x1064>
  8072a0:	d9000417 	ldw	r4,16(sp)
  8072a4:	d9000d15 	stw	r4,52(sp)
  8072a8:	003d7106 	br	806870 <_dtoa_r+0x728>
  8072ac:	d9801717 	ldw	r6,92(sp)
  8072b0:	00800084 	movi	r2,2
  8072b4:	11bde60e 	bge	r2,r6,806a50 <_dtoa_r+0x908>
  8072b8:	203cfb1e 	bne	r4,zero,8066a8 <_dtoa_r+0x560>
  8072bc:	d9001617 	ldw	r4,88(sp)
  8072c0:	900b883a 	mov	r5,r18
  8072c4:	01800144 	movi	r6,5
  8072c8:	000f883a 	mov	r7,zero
  8072cc:	0809f900 	call	809f90 <__multadd>
  8072d0:	d9000717 	ldw	r4,28(sp)
  8072d4:	100b883a 	mov	r5,r2
  8072d8:	1025883a 	mov	r18,r2
  8072dc:	08094380 	call	809438 <__mcmp>
  8072e0:	00bcf10e 	bge	zero,r2,8066a8 <_dtoa_r+0x560>
  8072e4:	d8c00d17 	ldw	r3,52(sp)
  8072e8:	d9000517 	ldw	r4,20(sp)
  8072ec:	d8000615 	stw	zero,24(sp)
  8072f0:	18c00044 	addi	r3,r3,1
  8072f4:	d8c00d15 	stw	r3,52(sp)
  8072f8:	00800c44 	movi	r2,49
  8072fc:	27000044 	addi	fp,r4,1
  807300:	20800005 	stb	r2,0(r4)
  807304:	003e8906 	br	806d2c <_dtoa_r+0xbe4>
  807308:	d8c00517 	ldw	r3,20(sp)
  80730c:	003bc206 	br	806218 <_dtoa_r+0xd0>
  807310:	01802074 	movhi	r6,129
  807314:	31882704 	addi	r6,r6,8348
  807318:	30c00917 	ldw	r3,36(r6)
  80731c:	30800817 	ldw	r2,32(r6)
  807320:	d9001217 	ldw	r4,72(sp)
  807324:	d9401317 	ldw	r5,76(sp)
  807328:	180f883a 	mov	r7,r3
  80732c:	100d883a 	mov	r6,r2
  807330:	0802f940 	call	802f94 <__divdf3>
  807334:	948003cc 	andi	r18,r18,15
  807338:	058000c4 	movi	r22,3
  80733c:	1029883a 	mov	r20,r2
  807340:	182b883a 	mov	r21,r3
  807344:	003c8906 	br	80656c <_dtoa_r+0x424>
  807348:	d9001017 	ldw	r4,64(sp)
  80734c:	d9800917 	ldw	r6,36(sp)
  807350:	0025883a 	mov	r18,zero
  807354:	1105c83a 	sub	r2,r2,r4
  807358:	2089883a 	add	r4,r4,r2
  80735c:	308d883a 	add	r6,r6,r2
  807360:	d9001015 	stw	r4,64(sp)
  807364:	d9800915 	stw	r6,36(sp)
  807368:	003e3206 	br	806c34 <_dtoa_r+0xaec>
  80736c:	28800044 	addi	r2,r5,1
  807370:	27000044 	addi	fp,r4,1
  807374:	20800005 	stb	r2,0(r4)
  807378:	003e6c06 	br	806d2c <_dtoa_r+0xbe4>
  80737c:	d8800f17 	ldw	r2,60(sp)
  807380:	00bce016 	blt	zero,r2,806704 <_dtoa_r+0x5bc>
  807384:	d9800f17 	ldw	r6,60(sp)
  807388:	303cc51e 	bne	r6,zero,8066a0 <_dtoa_r+0x558>
  80738c:	0005883a 	mov	r2,zero
  807390:	00d00534 	movhi	r3,16404
  807394:	980b883a 	mov	r5,r19
  807398:	180f883a 	mov	r7,r3
  80739c:	9009883a 	mov	r4,r18
  8073a0:	100d883a 	mov	r6,r2
  8073a4:	080bbcc0 	call	80bbcc <__muldf3>
  8073a8:	180b883a 	mov	r5,r3
  8073ac:	a80f883a 	mov	r7,r21
  8073b0:	1009883a 	mov	r4,r2
  8073b4:	a00d883a 	mov	r6,r20
  8073b8:	080c0a00 	call	80c0a0 <__gedf2>
  8073bc:	103cb80e 	bge	r2,zero,8066a0 <_dtoa_r+0x558>
  8073c0:	0027883a 	mov	r19,zero
  8073c4:	0025883a 	mov	r18,zero
  8073c8:	003fc606 	br	8072e4 <_dtoa_r+0x119c>
  8073cc:	99400117 	ldw	r5,4(r19)
  8073d0:	d9001617 	ldw	r4,88(sp)
  8073d4:	080985c0 	call	80985c <_Balloc>
  8073d8:	99800417 	ldw	r6,16(r19)
  8073dc:	11000304 	addi	r4,r2,12
  8073e0:	99400304 	addi	r5,r19,12
  8073e4:	318d883a 	add	r6,r6,r6
  8073e8:	318d883a 	add	r6,r6,r6
  8073ec:	31800204 	addi	r6,r6,8
  8073f0:	1023883a 	mov	r17,r2
  8073f4:	08090c40 	call	8090c4 <memcpy>
  8073f8:	d9001617 	ldw	r4,88(sp)
  8073fc:	880b883a 	mov	r5,r17
  807400:	01800044 	movi	r6,1
  807404:	0809c200 	call	809c20 <__lshift>
  807408:	100b883a 	mov	r5,r2
  80740c:	003d9c06 	br	806a80 <_dtoa_r+0x938>
  807410:	00800e44 	movi	r2,57
  807414:	b8807026 	beq	r23,r2,8075d8 <_dtoa_r+0x1490>
  807418:	b8800044 	addi	r2,r23,1
  80741c:	b7000044 	addi	fp,r22,1
  807420:	b0800005 	stb	r2,0(r22)
  807424:	003e4106 	br	806d2c <_dtoa_r+0xbe4>
  807428:	d8800317 	ldw	r2,12(sp)
  80742c:	01802074 	movhi	r6,129
  807430:	3187f504 	addi	r6,r6,8148
  807434:	b009883a 	mov	r4,r22
  807438:	100e90fa 	slli	r7,r2,3
  80743c:	b80b883a 	mov	r5,r23
  807440:	398f883a 	add	r7,r7,r6
  807444:	38bffe17 	ldw	r2,-8(r7)
  807448:	d9800517 	ldw	r6,20(sp)
  80744c:	38ffff17 	ldw	r3,-4(r7)
  807450:	37000044 	addi	fp,r6,1
  807454:	180f883a 	mov	r7,r3
  807458:	100d883a 	mov	r6,r2
  80745c:	080bbcc0 	call	80bbcc <__muldf3>
  807460:	a80b883a 	mov	r5,r21
  807464:	a009883a 	mov	r4,r20
  807468:	182f883a 	mov	r23,r3
  80746c:	102d883a 	mov	r22,r2
  807470:	080c2a80 	call	80c2a8 <__fixdfsi>
  807474:	1009883a 	mov	r4,r2
  807478:	1027883a 	mov	r19,r2
  80747c:	080c1b00 	call	80c1b0 <__floatsidf>
  807480:	a80b883a 	mov	r5,r21
  807484:	a009883a 	mov	r4,r20
  807488:	180f883a 	mov	r7,r3
  80748c:	100d883a 	mov	r6,r2
  807490:	0802ea00 	call	802ea0 <__subdf3>
  807494:	180b883a 	mov	r5,r3
  807498:	d8c00517 	ldw	r3,20(sp)
  80749c:	9cc00c04 	addi	r19,r19,48
  8074a0:	1009883a 	mov	r4,r2
  8074a4:	1cc00005 	stb	r19,0(r3)
  8074a8:	2021883a 	mov	r16,r4
  8074ac:	d9000317 	ldw	r4,12(sp)
  8074b0:	00800044 	movi	r2,1
  8074b4:	2823883a 	mov	r17,r5
  8074b8:	20802226 	beq	r4,r2,807544 <_dtoa_r+0x13fc>
  8074bc:	1029883a 	mov	r20,r2
  8074c0:	0005883a 	mov	r2,zero
  8074c4:	00d00934 	movhi	r3,16420
  8074c8:	180f883a 	mov	r7,r3
  8074cc:	100d883a 	mov	r6,r2
  8074d0:	880b883a 	mov	r5,r17
  8074d4:	8009883a 	mov	r4,r16
  8074d8:	080bbcc0 	call	80bbcc <__muldf3>
  8074dc:	180b883a 	mov	r5,r3
  8074e0:	1009883a 	mov	r4,r2
  8074e4:	1823883a 	mov	r17,r3
  8074e8:	1021883a 	mov	r16,r2
  8074ec:	080c2a80 	call	80c2a8 <__fixdfsi>
  8074f0:	1009883a 	mov	r4,r2
  8074f4:	102b883a 	mov	r21,r2
  8074f8:	080c1b00 	call	80c1b0 <__floatsidf>
  8074fc:	880b883a 	mov	r5,r17
  807500:	8009883a 	mov	r4,r16
  807504:	180f883a 	mov	r7,r3
  807508:	100d883a 	mov	r6,r2
  80750c:	0802ea00 	call	802ea0 <__subdf3>
  807510:	180b883a 	mov	r5,r3
  807514:	d8c00517 	ldw	r3,20(sp)
  807518:	1009883a 	mov	r4,r2
  80751c:	ad400c04 	addi	r21,r21,48
  807520:	1d05883a 	add	r2,r3,r20
  807524:	15400005 	stb	r21,0(r2)
  807528:	2021883a 	mov	r16,r4
  80752c:	d9000317 	ldw	r4,12(sp)
  807530:	a5000044 	addi	r20,r20,1
  807534:	2823883a 	mov	r17,r5
  807538:	a13fe11e 	bne	r20,r4,8074c0 <_dtoa_r+0x1378>
  80753c:	e505883a 	add	r2,fp,r20
  807540:	173fffc4 	addi	fp,r2,-1
  807544:	0025883a 	mov	r18,zero
  807548:	04cff834 	movhi	r19,16352
  80754c:	b009883a 	mov	r4,r22
  807550:	b80b883a 	mov	r5,r23
  807554:	900d883a 	mov	r6,r18
  807558:	980f883a 	mov	r7,r19
  80755c:	0802f200 	call	802f20 <__adddf3>
  807560:	180b883a 	mov	r5,r3
  807564:	1009883a 	mov	r4,r2
  807568:	800d883a 	mov	r6,r16
  80756c:	880f883a 	mov	r7,r17
  807570:	080c1280 	call	80c128 <__ltdf2>
  807574:	103cab16 	blt	r2,zero,806824 <_dtoa_r+0x6dc>
  807578:	0009883a 	mov	r4,zero
  80757c:	980b883a 	mov	r5,r19
  807580:	b80f883a 	mov	r7,r23
  807584:	b00d883a 	mov	r6,r22
  807588:	0802ea00 	call	802ea0 <__subdf3>
  80758c:	180b883a 	mov	r5,r3
  807590:	880f883a 	mov	r7,r17
  807594:	1009883a 	mov	r4,r2
  807598:	800d883a 	mov	r6,r16
  80759c:	080c0180 	call	80c018 <__gtdf2>
  8075a0:	00bc470e 	bge	zero,r2,8066c0 <_dtoa_r+0x578>
  8075a4:	00c00c04 	movi	r3,48
  8075a8:	e73fffc4 	addi	fp,fp,-1
  8075ac:	e0800007 	ldb	r2,0(fp)
  8075b0:	10fffd26 	beq	r2,r3,8075a8 <_dtoa_r+0x1460>
  8075b4:	d9800417 	ldw	r6,16(sp)
  8075b8:	e7000044 	addi	fp,fp,1
  8075bc:	d9800d15 	stw	r6,52(sp)
  8075c0:	003cab06 	br	806870 <_dtoa_r+0x728>
  8075c4:	d8c00f17 	ldw	r3,60(sp)
  8075c8:	d9001117 	ldw	r4,68(sp)
  8075cc:	20e1c83a 	sub	r16,r4,r3
  8075d0:	0007883a 	mov	r3,zero
  8075d4:	003d9b06 	br	806c44 <_dtoa_r+0xafc>
  8075d8:	00800e44 	movi	r2,57
  8075dc:	b0800005 	stb	r2,0(r22)
  8075e0:	b5800044 	addi	r22,r22,1
  8075e4:	003dc106 	br	806cec <_dtoa_r+0xba4>
  8075e8:	05800084 	movi	r22,2
  8075ec:	003bf706 	br	8065cc <_dtoa_r+0x484>
  8075f0:	d9000f17 	ldw	r4,60(sp)
  8075f4:	013c000e 	bge	zero,r4,8065f8 <_dtoa_r+0x4b0>
  8075f8:	d9800e17 	ldw	r6,56(sp)
  8075fc:	01bc300e 	bge	zero,r6,8066c0 <_dtoa_r+0x578>
  807600:	0005883a 	mov	r2,zero
  807604:	00d00934 	movhi	r3,16420
  807608:	a80b883a 	mov	r5,r21
  80760c:	180f883a 	mov	r7,r3
  807610:	a009883a 	mov	r4,r20
  807614:	100d883a 	mov	r6,r2
  807618:	080bbcc0 	call	80bbcc <__muldf3>
  80761c:	b1000044 	addi	r4,r22,1
  807620:	1021883a 	mov	r16,r2
  807624:	1823883a 	mov	r17,r3
  807628:	080c1b00 	call	80c1b0 <__floatsidf>
  80762c:	880b883a 	mov	r5,r17
  807630:	8009883a 	mov	r4,r16
  807634:	180f883a 	mov	r7,r3
  807638:	100d883a 	mov	r6,r2
  80763c:	080bbcc0 	call	80bbcc <__muldf3>
  807640:	0011883a 	mov	r8,zero
  807644:	02500734 	movhi	r9,16412
  807648:	180b883a 	mov	r5,r3
  80764c:	480f883a 	mov	r7,r9
  807650:	1009883a 	mov	r4,r2
  807654:	400d883a 	mov	r6,r8
  807658:	0802f200 	call	802f20 <__adddf3>
  80765c:	102d883a 	mov	r22,r2
  807660:	00bf3034 	movhi	r2,64704
  807664:	10ef883a 	add	r23,r2,r3
  807668:	d8800d17 	ldw	r2,52(sp)
  80766c:	d8c00e17 	ldw	r3,56(sp)
  807670:	8029883a 	mov	r20,r16
  807674:	10bfffc4 	addi	r2,r2,-1
  807678:	882b883a 	mov	r21,r17
  80767c:	d8800415 	stw	r2,16(sp)
  807680:	d8c00315 	stw	r3,12(sp)
  807684:	003e8306 	br	807094 <_dtoa_r+0xf4c>
  807688:	d8800117 	ldw	r2,4(sp)
  80768c:	dc001117 	ldw	r16,68(sp)
  807690:	dc801017 	ldw	r18,64(sp)
  807694:	00c00d84 	movi	r3,54
  807698:	1887c83a 	sub	r3,r3,r2
  80769c:	003d6906 	br	806c44 <_dtoa_r+0xafc>
  8076a0:	01800044 	movi	r6,1
  8076a4:	3021883a 	mov	r16,r6
  8076a8:	d9800f15 	stw	r6,60(sp)
  8076ac:	d9802615 	stw	r6,152(sp)
  8076b0:	d9800e15 	stw	r6,56(sp)
  8076b4:	003b9306 	br	806504 <_dtoa_r+0x3bc>
  8076b8:	b021883a 	mov	r16,r22
  8076bc:	dd800f15 	stw	r22,60(sp)
  8076c0:	003b9006 	br	806504 <_dtoa_r+0x3bc>
  8076c4:	103e221e 	bne	r2,zero,806f50 <_dtoa_r+0xe08>
  8076c8:	b880004c 	andi	r2,r23,1
  8076cc:	1005003a 	cmpeq	r2,r2,zero
  8076d0:	103e1f1e 	bne	r2,zero,806f50 <_dtoa_r+0xe08>
  8076d4:	003e1b06 	br	806f44 <_dtoa_r+0xdfc>
  8076d8:	d9001617 	ldw	r4,88(sp)
  8076dc:	980b883a 	mov	r5,r19
  8076e0:	01800284 	movi	r6,10
  8076e4:	000f883a 	mov	r7,zero
  8076e8:	0809f900 	call	809f90 <__multadd>
  8076ec:	d8c00e17 	ldw	r3,56(sp)
  8076f0:	1027883a 	mov	r19,r2
  8076f4:	d8c00f15 	stw	r3,60(sp)
  8076f8:	003cd306 	br	806a48 <_dtoa_r+0x900>

008076fc <_fflush_r>:
  8076fc:	defffb04 	addi	sp,sp,-20
  807700:	dcc00315 	stw	r19,12(sp)
  807704:	dc800215 	stw	r18,8(sp)
  807708:	dfc00415 	stw	ra,16(sp)
  80770c:	dc400115 	stw	r17,4(sp)
  807710:	dc000015 	stw	r16,0(sp)
  807714:	2027883a 	mov	r19,r4
  807718:	2825883a 	mov	r18,r5
  80771c:	20000226 	beq	r4,zero,807728 <_fflush_r+0x2c>
  807720:	20800e17 	ldw	r2,56(r4)
  807724:	10005626 	beq	r2,zero,807880 <_fflush_r+0x184>
  807728:	9100030b 	ldhu	r4,12(r18)
  80772c:	20ffffcc 	andi	r3,r4,65535
  807730:	18e0001c 	xori	r3,r3,32768
  807734:	18e00004 	addi	r3,r3,-32768
  807738:	1880020c 	andi	r2,r3,8
  80773c:	1000261e 	bne	r2,zero,8077d8 <_fflush_r+0xdc>
  807740:	90c00117 	ldw	r3,4(r18)
  807744:	20820014 	ori	r2,r4,2048
  807748:	9080030d 	sth	r2,12(r18)
  80774c:	1009883a 	mov	r4,r2
  807750:	00c0400e 	bge	zero,r3,807854 <_fflush_r+0x158>
  807754:	92000a17 	ldw	r8,40(r18)
  807758:	40004026 	beq	r8,zero,80785c <_fflush_r+0x160>
  80775c:	2084000c 	andi	r2,r4,4096
  807760:	10005326 	beq	r2,zero,8078b0 <_fflush_r+0x1b4>
  807764:	94001417 	ldw	r16,80(r18)
  807768:	9080030b 	ldhu	r2,12(r18)
  80776c:	1080010c 	andi	r2,r2,4
  807770:	1000481e 	bne	r2,zero,807894 <_fflush_r+0x198>
  807774:	91400717 	ldw	r5,28(r18)
  807778:	9809883a 	mov	r4,r19
  80777c:	800d883a 	mov	r6,r16
  807780:	000f883a 	mov	r7,zero
  807784:	403ee83a 	callr	r8
  807788:	8080261e 	bne	r16,r2,807824 <_fflush_r+0x128>
  80778c:	9080030b 	ldhu	r2,12(r18)
  807790:	91000417 	ldw	r4,16(r18)
  807794:	90000115 	stw	zero,4(r18)
  807798:	10bdffcc 	andi	r2,r2,63487
  80779c:	10ffffcc 	andi	r3,r2,65535
  8077a0:	18c4000c 	andi	r3,r3,4096
  8077a4:	9080030d 	sth	r2,12(r18)
  8077a8:	91000015 	stw	r4,0(r18)
  8077ac:	18002b26 	beq	r3,zero,80785c <_fflush_r+0x160>
  8077b0:	0007883a 	mov	r3,zero
  8077b4:	1805883a 	mov	r2,r3
  8077b8:	94001415 	stw	r16,80(r18)
  8077bc:	dfc00417 	ldw	ra,16(sp)
  8077c0:	dcc00317 	ldw	r19,12(sp)
  8077c4:	dc800217 	ldw	r18,8(sp)
  8077c8:	dc400117 	ldw	r17,4(sp)
  8077cc:	dc000017 	ldw	r16,0(sp)
  8077d0:	dec00504 	addi	sp,sp,20
  8077d4:	f800283a 	ret
  8077d8:	94400417 	ldw	r17,16(r18)
  8077dc:	88001f26 	beq	r17,zero,80785c <_fflush_r+0x160>
  8077e0:	90800017 	ldw	r2,0(r18)
  8077e4:	18c000cc 	andi	r3,r3,3
  8077e8:	94400015 	stw	r17,0(r18)
  8077ec:	1461c83a 	sub	r16,r2,r17
  8077f0:	18002526 	beq	r3,zero,807888 <_fflush_r+0x18c>
  8077f4:	0005883a 	mov	r2,zero
  8077f8:	90800215 	stw	r2,8(r18)
  8077fc:	0400170e 	bge	zero,r16,80785c <_fflush_r+0x160>
  807800:	90c00917 	ldw	r3,36(r18)
  807804:	91400717 	ldw	r5,28(r18)
  807808:	880d883a 	mov	r6,r17
  80780c:	800f883a 	mov	r7,r16
  807810:	9809883a 	mov	r4,r19
  807814:	183ee83a 	callr	r3
  807818:	88a3883a 	add	r17,r17,r2
  80781c:	80a1c83a 	sub	r16,r16,r2
  807820:	00bff616 	blt	zero,r2,8077fc <_fflush_r+0x100>
  807824:	9080030b 	ldhu	r2,12(r18)
  807828:	00ffffc4 	movi	r3,-1
  80782c:	10801014 	ori	r2,r2,64
  807830:	9080030d 	sth	r2,12(r18)
  807834:	1805883a 	mov	r2,r3
  807838:	dfc00417 	ldw	ra,16(sp)
  80783c:	dcc00317 	ldw	r19,12(sp)
  807840:	dc800217 	ldw	r18,8(sp)
  807844:	dc400117 	ldw	r17,4(sp)
  807848:	dc000017 	ldw	r16,0(sp)
  80784c:	dec00504 	addi	sp,sp,20
  807850:	f800283a 	ret
  807854:	90800f17 	ldw	r2,60(r18)
  807858:	00bfbe16 	blt	zero,r2,807754 <_fflush_r+0x58>
  80785c:	0007883a 	mov	r3,zero
  807860:	1805883a 	mov	r2,r3
  807864:	dfc00417 	ldw	ra,16(sp)
  807868:	dcc00317 	ldw	r19,12(sp)
  80786c:	dc800217 	ldw	r18,8(sp)
  807870:	dc400117 	ldw	r17,4(sp)
  807874:	dc000017 	ldw	r16,0(sp)
  807878:	dec00504 	addi	sp,sp,20
  80787c:	f800283a 	ret
  807880:	08079940 	call	807994 <__sinit>
  807884:	003fa806 	br	807728 <_fflush_r+0x2c>
  807888:	90800517 	ldw	r2,20(r18)
  80788c:	90800215 	stw	r2,8(r18)
  807890:	003fda06 	br	8077fc <_fflush_r+0x100>
  807894:	90800117 	ldw	r2,4(r18)
  807898:	90c00c17 	ldw	r3,48(r18)
  80789c:	80a1c83a 	sub	r16,r16,r2
  8078a0:	183fb426 	beq	r3,zero,807774 <_fflush_r+0x78>
  8078a4:	90800f17 	ldw	r2,60(r18)
  8078a8:	80a1c83a 	sub	r16,r16,r2
  8078ac:	003fb106 	br	807774 <_fflush_r+0x78>
  8078b0:	91400717 	ldw	r5,28(r18)
  8078b4:	9809883a 	mov	r4,r19
  8078b8:	000d883a 	mov	r6,zero
  8078bc:	01c00044 	movi	r7,1
  8078c0:	403ee83a 	callr	r8
  8078c4:	1021883a 	mov	r16,r2
  8078c8:	00bfffc4 	movi	r2,-1
  8078cc:	80800226 	beq	r16,r2,8078d8 <_fflush_r+0x1dc>
  8078d0:	92000a17 	ldw	r8,40(r18)
  8078d4:	003fa406 	br	807768 <_fflush_r+0x6c>
  8078d8:	98c00017 	ldw	r3,0(r19)
  8078dc:	00800744 	movi	r2,29
  8078e0:	18bfde26 	beq	r3,r2,80785c <_fflush_r+0x160>
  8078e4:	9080030b 	ldhu	r2,12(r18)
  8078e8:	8007883a 	mov	r3,r16
  8078ec:	10801014 	ori	r2,r2,64
  8078f0:	9080030d 	sth	r2,12(r18)
  8078f4:	003fcf06 	br	807834 <_fflush_r+0x138>

008078f8 <fflush>:
  8078f8:	01402034 	movhi	r5,128
  8078fc:	295dbf04 	addi	r5,r5,30460
  807900:	2007883a 	mov	r3,r4
  807904:	20000526 	beq	r4,zero,80791c <fflush+0x24>
  807908:	00802074 	movhi	r2,129
  80790c:	108f8304 	addi	r2,r2,15884
  807910:	11000017 	ldw	r4,0(r2)
  807914:	180b883a 	mov	r5,r3
  807918:	08076fc1 	jmpi	8076fc <_fflush_r>
  80791c:	00802074 	movhi	r2,129
  807920:	108f8404 	addi	r2,r2,15888
  807924:	11000017 	ldw	r4,0(r2)
  807928:	08084c81 	jmpi	8084c8 <_fwalk_reent>

0080792c <std>:
  80792c:	00802074 	movhi	r2,129
  807930:	10aa6904 	addi	r2,r2,-22108
  807934:	20800b15 	stw	r2,44(r4)
  807938:	00802074 	movhi	r2,129
  80793c:	10aaa404 	addi	r2,r2,-21872
  807940:	20800815 	stw	r2,32(r4)
  807944:	00c02074 	movhi	r3,129
  807948:	18ea8504 	addi	r3,r3,-21996
  80794c:	00802074 	movhi	r2,129
  807950:	10aa6b04 	addi	r2,r2,-22100
  807954:	2140030d 	sth	r5,12(r4)
  807958:	2180038d 	sth	r6,14(r4)
  80795c:	20c00915 	stw	r3,36(r4)
  807960:	20800a15 	stw	r2,40(r4)
  807964:	20000015 	stw	zero,0(r4)
  807968:	20000115 	stw	zero,4(r4)
  80796c:	20000215 	stw	zero,8(r4)
  807970:	20000415 	stw	zero,16(r4)
  807974:	20000515 	stw	zero,20(r4)
  807978:	20000615 	stw	zero,24(r4)
  80797c:	21000715 	stw	r4,28(r4)
  807980:	f800283a 	ret

00807984 <__sfp_lock_acquire>:
  807984:	f800283a 	ret

00807988 <__sfp_lock_release>:
  807988:	f800283a 	ret

0080798c <__sinit_lock_acquire>:
  80798c:	f800283a 	ret

00807990 <__sinit_lock_release>:
  807990:	f800283a 	ret

00807994 <__sinit>:
  807994:	20800e17 	ldw	r2,56(r4)
  807998:	defffd04 	addi	sp,sp,-12
  80799c:	dc400115 	stw	r17,4(sp)
  8079a0:	dc000015 	stw	r16,0(sp)
  8079a4:	dfc00215 	stw	ra,8(sp)
  8079a8:	04400044 	movi	r17,1
  8079ac:	01400104 	movi	r5,4
  8079b0:	000d883a 	mov	r6,zero
  8079b4:	2021883a 	mov	r16,r4
  8079b8:	2200bb04 	addi	r8,r4,748
  8079bc:	200f883a 	mov	r7,r4
  8079c0:	10000526 	beq	r2,zero,8079d8 <__sinit+0x44>
  8079c4:	dfc00217 	ldw	ra,8(sp)
  8079c8:	dc400117 	ldw	r17,4(sp)
  8079cc:	dc000017 	ldw	r16,0(sp)
  8079d0:	dec00304 	addi	sp,sp,12
  8079d4:	f800283a 	ret
  8079d8:	21000117 	ldw	r4,4(r4)
  8079dc:	00802034 	movhi	r2,128
  8079e0:	109e9e04 	addi	r2,r2,31352
  8079e4:	00c000c4 	movi	r3,3
  8079e8:	80800f15 	stw	r2,60(r16)
  8079ec:	80c0b915 	stw	r3,740(r16)
  8079f0:	8200ba15 	stw	r8,744(r16)
  8079f4:	84400e15 	stw	r17,56(r16)
  8079f8:	8000b815 	stw	zero,736(r16)
  8079fc:	080792c0 	call	80792c <std>
  807a00:	81000217 	ldw	r4,8(r16)
  807a04:	880d883a 	mov	r6,r17
  807a08:	800f883a 	mov	r7,r16
  807a0c:	01400284 	movi	r5,10
  807a10:	080792c0 	call	80792c <std>
  807a14:	81000317 	ldw	r4,12(r16)
  807a18:	800f883a 	mov	r7,r16
  807a1c:	01400484 	movi	r5,18
  807a20:	01800084 	movi	r6,2
  807a24:	dfc00217 	ldw	ra,8(sp)
  807a28:	dc400117 	ldw	r17,4(sp)
  807a2c:	dc000017 	ldw	r16,0(sp)
  807a30:	dec00304 	addi	sp,sp,12
  807a34:	080792c1 	jmpi	80792c <std>

00807a38 <__fp_lock>:
  807a38:	0005883a 	mov	r2,zero
  807a3c:	f800283a 	ret

00807a40 <__fp_unlock>:
  807a40:	0005883a 	mov	r2,zero
  807a44:	f800283a 	ret

00807a48 <__fp_unlock_all>:
  807a48:	00802074 	movhi	r2,129
  807a4c:	108f8304 	addi	r2,r2,15884
  807a50:	11000017 	ldw	r4,0(r2)
  807a54:	01402034 	movhi	r5,128
  807a58:	295e9004 	addi	r5,r5,31296
  807a5c:	08085901 	jmpi	808590 <_fwalk>

00807a60 <__fp_lock_all>:
  807a60:	00802074 	movhi	r2,129
  807a64:	108f8304 	addi	r2,r2,15884
  807a68:	11000017 	ldw	r4,0(r2)
  807a6c:	01402034 	movhi	r5,128
  807a70:	295e8e04 	addi	r5,r5,31288
  807a74:	08085901 	jmpi	808590 <_fwalk>

00807a78 <_cleanup_r>:
  807a78:	01402074 	movhi	r5,129
  807a7c:	296b9604 	addi	r5,r5,-20904
  807a80:	08085901 	jmpi	808590 <_fwalk>

00807a84 <_cleanup>:
  807a84:	00802074 	movhi	r2,129
  807a88:	108f8404 	addi	r2,r2,15888
  807a8c:	11000017 	ldw	r4,0(r2)
  807a90:	0807a781 	jmpi	807a78 <_cleanup_r>

00807a94 <__sfmoreglue>:
  807a94:	defffc04 	addi	sp,sp,-16
  807a98:	dc400115 	stw	r17,4(sp)
  807a9c:	2c401724 	muli	r17,r5,92
  807aa0:	dc800215 	stw	r18,8(sp)
  807aa4:	2825883a 	mov	r18,r5
  807aa8:	89400304 	addi	r5,r17,12
  807aac:	dc000015 	stw	r16,0(sp)
  807ab0:	dfc00315 	stw	ra,12(sp)
  807ab4:	08088a00 	call	8088a0 <_malloc_r>
  807ab8:	0021883a 	mov	r16,zero
  807abc:	880d883a 	mov	r6,r17
  807ac0:	000b883a 	mov	r5,zero
  807ac4:	10000626 	beq	r2,zero,807ae0 <__sfmoreglue+0x4c>
  807ac8:	11000304 	addi	r4,r2,12
  807acc:	14800115 	stw	r18,4(r2)
  807ad0:	10000015 	stw	zero,0(r2)
  807ad4:	11000215 	stw	r4,8(r2)
  807ad8:	1021883a 	mov	r16,r2
  807adc:	08092440 	call	809244 <memset>
  807ae0:	8005883a 	mov	r2,r16
  807ae4:	dfc00317 	ldw	ra,12(sp)
  807ae8:	dc800217 	ldw	r18,8(sp)
  807aec:	dc400117 	ldw	r17,4(sp)
  807af0:	dc000017 	ldw	r16,0(sp)
  807af4:	dec00404 	addi	sp,sp,16
  807af8:	f800283a 	ret

00807afc <__sfp>:
  807afc:	defffd04 	addi	sp,sp,-12
  807b00:	00802074 	movhi	r2,129
  807b04:	108f8404 	addi	r2,r2,15888
  807b08:	dc000015 	stw	r16,0(sp)
  807b0c:	14000017 	ldw	r16,0(r2)
  807b10:	dc400115 	stw	r17,4(sp)
  807b14:	dfc00215 	stw	ra,8(sp)
  807b18:	80800e17 	ldw	r2,56(r16)
  807b1c:	2023883a 	mov	r17,r4
  807b20:	10002626 	beq	r2,zero,807bbc <__sfp+0xc0>
  807b24:	8400b804 	addi	r16,r16,736
  807b28:	80800117 	ldw	r2,4(r16)
  807b2c:	81000217 	ldw	r4,8(r16)
  807b30:	10ffffc4 	addi	r3,r2,-1
  807b34:	18000916 	blt	r3,zero,807b5c <__sfp+0x60>
  807b38:	2080030f 	ldh	r2,12(r4)
  807b3c:	10000b26 	beq	r2,zero,807b6c <__sfp+0x70>
  807b40:	017fffc4 	movi	r5,-1
  807b44:	00000206 	br	807b50 <__sfp+0x54>
  807b48:	2080030f 	ldh	r2,12(r4)
  807b4c:	10000726 	beq	r2,zero,807b6c <__sfp+0x70>
  807b50:	18ffffc4 	addi	r3,r3,-1
  807b54:	21001704 	addi	r4,r4,92
  807b58:	197ffb1e 	bne	r3,r5,807b48 <__sfp+0x4c>
  807b5c:	80800017 	ldw	r2,0(r16)
  807b60:	10001926 	beq	r2,zero,807bc8 <__sfp+0xcc>
  807b64:	1021883a 	mov	r16,r2
  807b68:	003fef06 	br	807b28 <__sfp+0x2c>
  807b6c:	00bfffc4 	movi	r2,-1
  807b70:	00c00044 	movi	r3,1
  807b74:	2080038d 	sth	r2,14(r4)
  807b78:	20c0030d 	sth	r3,12(r4)
  807b7c:	20000015 	stw	zero,0(r4)
  807b80:	20000215 	stw	zero,8(r4)
  807b84:	20000115 	stw	zero,4(r4)
  807b88:	20000415 	stw	zero,16(r4)
  807b8c:	20000515 	stw	zero,20(r4)
  807b90:	20000615 	stw	zero,24(r4)
  807b94:	20000c15 	stw	zero,48(r4)
  807b98:	20000d15 	stw	zero,52(r4)
  807b9c:	20001115 	stw	zero,68(r4)
  807ba0:	20001215 	stw	zero,72(r4)
  807ba4:	2005883a 	mov	r2,r4
  807ba8:	dfc00217 	ldw	ra,8(sp)
  807bac:	dc400117 	ldw	r17,4(sp)
  807bb0:	dc000017 	ldw	r16,0(sp)
  807bb4:	dec00304 	addi	sp,sp,12
  807bb8:	f800283a 	ret
  807bbc:	8009883a 	mov	r4,r16
  807bc0:	08079940 	call	807994 <__sinit>
  807bc4:	003fd706 	br	807b24 <__sfp+0x28>
  807bc8:	8809883a 	mov	r4,r17
  807bcc:	01400104 	movi	r5,4
  807bd0:	0807a940 	call	807a94 <__sfmoreglue>
  807bd4:	80800015 	stw	r2,0(r16)
  807bd8:	103fe21e 	bne	r2,zero,807b64 <__sfp+0x68>
  807bdc:	00800304 	movi	r2,12
  807be0:	0009883a 	mov	r4,zero
  807be4:	88800015 	stw	r2,0(r17)
  807be8:	003fee06 	br	807ba4 <__sfp+0xa8>

00807bec <_malloc_trim_r>:
  807bec:	defffb04 	addi	sp,sp,-20
  807bf0:	dcc00315 	stw	r19,12(sp)
  807bf4:	04c02074 	movhi	r19,129
  807bf8:	9cc99a04 	addi	r19,r19,9832
  807bfc:	dc800215 	stw	r18,8(sp)
  807c00:	dc400115 	stw	r17,4(sp)
  807c04:	dc000015 	stw	r16,0(sp)
  807c08:	2823883a 	mov	r17,r5
  807c0c:	2025883a 	mov	r18,r4
  807c10:	dfc00415 	stw	ra,16(sp)
  807c14:	080cce40 	call	80cce4 <__malloc_lock>
  807c18:	98800217 	ldw	r2,8(r19)
  807c1c:	9009883a 	mov	r4,r18
  807c20:	000b883a 	mov	r5,zero
  807c24:	10c00117 	ldw	r3,4(r2)
  807c28:	00bfff04 	movi	r2,-4
  807c2c:	18a0703a 	and	r16,r3,r2
  807c30:	8463c83a 	sub	r17,r16,r17
  807c34:	8c43fbc4 	addi	r17,r17,4079
  807c38:	8822d33a 	srli	r17,r17,12
  807c3c:	0083ffc4 	movi	r2,4095
  807c40:	8c7fffc4 	addi	r17,r17,-1
  807c44:	8822933a 	slli	r17,r17,12
  807c48:	1440060e 	bge	r2,r17,807c64 <_malloc_trim_r+0x78>
  807c4c:	080a9340 	call	80a934 <_sbrk_r>
  807c50:	98c00217 	ldw	r3,8(r19)
  807c54:	9009883a 	mov	r4,r18
  807c58:	044bc83a 	sub	r5,zero,r17
  807c5c:	80c7883a 	add	r3,r16,r3
  807c60:	10c00926 	beq	r2,r3,807c88 <_malloc_trim_r+0x9c>
  807c64:	080cd040 	call	80cd04 <__malloc_unlock>
  807c68:	0005883a 	mov	r2,zero
  807c6c:	dfc00417 	ldw	ra,16(sp)
  807c70:	dcc00317 	ldw	r19,12(sp)
  807c74:	dc800217 	ldw	r18,8(sp)
  807c78:	dc400117 	ldw	r17,4(sp)
  807c7c:	dc000017 	ldw	r16,0(sp)
  807c80:	dec00504 	addi	sp,sp,20
  807c84:	f800283a 	ret
  807c88:	9009883a 	mov	r4,r18
  807c8c:	080a9340 	call	80a934 <_sbrk_r>
  807c90:	844dc83a 	sub	r6,r16,r17
  807c94:	00ffffc4 	movi	r3,-1
  807c98:	9009883a 	mov	r4,r18
  807c9c:	000b883a 	mov	r5,zero
  807ca0:	01c02074 	movhi	r7,129
  807ca4:	39d6a704 	addi	r7,r7,23196
  807ca8:	31800054 	ori	r6,r6,1
  807cac:	10c00926 	beq	r2,r3,807cd4 <_malloc_trim_r+0xe8>
  807cb0:	38800017 	ldw	r2,0(r7)
  807cb4:	98c00217 	ldw	r3,8(r19)
  807cb8:	9009883a 	mov	r4,r18
  807cbc:	1445c83a 	sub	r2,r2,r17
  807cc0:	38800015 	stw	r2,0(r7)
  807cc4:	19800115 	stw	r6,4(r3)
  807cc8:	080cd040 	call	80cd04 <__malloc_unlock>
  807ccc:	00800044 	movi	r2,1
  807cd0:	003fe606 	br	807c6c <_malloc_trim_r+0x80>
  807cd4:	080a9340 	call	80a934 <_sbrk_r>
  807cd8:	99800217 	ldw	r6,8(r19)
  807cdc:	100f883a 	mov	r7,r2
  807ce0:	9009883a 	mov	r4,r18
  807ce4:	1187c83a 	sub	r3,r2,r6
  807ce8:	008003c4 	movi	r2,15
  807cec:	19400054 	ori	r5,r3,1
  807cf0:	10ffdc0e 	bge	r2,r3,807c64 <_malloc_trim_r+0x78>
  807cf4:	00802074 	movhi	r2,129
  807cf8:	108f8804 	addi	r2,r2,15904
  807cfc:	10c00017 	ldw	r3,0(r2)
  807d00:	00802074 	movhi	r2,129
  807d04:	1096a704 	addi	r2,r2,23196
  807d08:	31400115 	stw	r5,4(r6)
  807d0c:	38c7c83a 	sub	r3,r7,r3
  807d10:	10c00015 	stw	r3,0(r2)
  807d14:	003fd306 	br	807c64 <_malloc_trim_r+0x78>

00807d18 <_free_r>:
  807d18:	defffd04 	addi	sp,sp,-12
  807d1c:	dc400115 	stw	r17,4(sp)
  807d20:	dc000015 	stw	r16,0(sp)
  807d24:	dfc00215 	stw	ra,8(sp)
  807d28:	2821883a 	mov	r16,r5
  807d2c:	2023883a 	mov	r17,r4
  807d30:	28005a26 	beq	r5,zero,807e9c <_free_r+0x184>
  807d34:	080cce40 	call	80cce4 <__malloc_lock>
  807d38:	823ffe04 	addi	r8,r16,-8
  807d3c:	41400117 	ldw	r5,4(r8)
  807d40:	00bfff84 	movi	r2,-2
  807d44:	02802074 	movhi	r10,129
  807d48:	52899a04 	addi	r10,r10,9832
  807d4c:	288e703a 	and	r7,r5,r2
  807d50:	41cd883a 	add	r6,r8,r7
  807d54:	30c00117 	ldw	r3,4(r6)
  807d58:	51000217 	ldw	r4,8(r10)
  807d5c:	00bfff04 	movi	r2,-4
  807d60:	1892703a 	and	r9,r3,r2
  807d64:	5017883a 	mov	r11,r10
  807d68:	31006726 	beq	r6,r4,807f08 <_free_r+0x1f0>
  807d6c:	2880004c 	andi	r2,r5,1
  807d70:	1005003a 	cmpeq	r2,r2,zero
  807d74:	32400115 	stw	r9,4(r6)
  807d78:	10001a1e 	bne	r2,zero,807de4 <_free_r+0xcc>
  807d7c:	000b883a 	mov	r5,zero
  807d80:	3247883a 	add	r3,r6,r9
  807d84:	18800117 	ldw	r2,4(r3)
  807d88:	1080004c 	andi	r2,r2,1
  807d8c:	1000231e 	bne	r2,zero,807e1c <_free_r+0x104>
  807d90:	280ac03a 	cmpne	r5,r5,zero
  807d94:	3a4f883a 	add	r7,r7,r9
  807d98:	2800451e 	bne	r5,zero,807eb0 <_free_r+0x198>
  807d9c:	31000217 	ldw	r4,8(r6)
  807da0:	00802074 	movhi	r2,129
  807da4:	10899c04 	addi	r2,r2,9840
  807da8:	20807b26 	beq	r4,r2,807f98 <_free_r+0x280>
  807dac:	30800317 	ldw	r2,12(r6)
  807db0:	3a07883a 	add	r3,r7,r8
  807db4:	19c00015 	stw	r7,0(r3)
  807db8:	11000215 	stw	r4,8(r2)
  807dbc:	20800315 	stw	r2,12(r4)
  807dc0:	38800054 	ori	r2,r7,1
  807dc4:	40800115 	stw	r2,4(r8)
  807dc8:	28001a26 	beq	r5,zero,807e34 <_free_r+0x11c>
  807dcc:	8809883a 	mov	r4,r17
  807dd0:	dfc00217 	ldw	ra,8(sp)
  807dd4:	dc400117 	ldw	r17,4(sp)
  807dd8:	dc000017 	ldw	r16,0(sp)
  807ddc:	dec00304 	addi	sp,sp,12
  807de0:	080cd041 	jmpi	80cd04 <__malloc_unlock>
  807de4:	80bffe17 	ldw	r2,-8(r16)
  807de8:	50c00204 	addi	r3,r10,8
  807dec:	4091c83a 	sub	r8,r8,r2
  807df0:	41000217 	ldw	r4,8(r8)
  807df4:	388f883a 	add	r7,r7,r2
  807df8:	20c06126 	beq	r4,r3,807f80 <_free_r+0x268>
  807dfc:	40800317 	ldw	r2,12(r8)
  807e00:	3247883a 	add	r3,r6,r9
  807e04:	000b883a 	mov	r5,zero
  807e08:	11000215 	stw	r4,8(r2)
  807e0c:	20800315 	stw	r2,12(r4)
  807e10:	18800117 	ldw	r2,4(r3)
  807e14:	1080004c 	andi	r2,r2,1
  807e18:	103fdd26 	beq	r2,zero,807d90 <_free_r+0x78>
  807e1c:	38800054 	ori	r2,r7,1
  807e20:	3a07883a 	add	r3,r7,r8
  807e24:	280ac03a 	cmpne	r5,r5,zero
  807e28:	40800115 	stw	r2,4(r8)
  807e2c:	19c00015 	stw	r7,0(r3)
  807e30:	283fe61e 	bne	r5,zero,807dcc <_free_r+0xb4>
  807e34:	00807fc4 	movi	r2,511
  807e38:	11c01f2e 	bgeu	r2,r7,807eb8 <_free_r+0x1a0>
  807e3c:	3806d27a 	srli	r3,r7,9
  807e40:	1800481e 	bne	r3,zero,807f64 <_free_r+0x24c>
  807e44:	3804d0fa 	srli	r2,r7,3
  807e48:	100690fa 	slli	r3,r2,3
  807e4c:	1acd883a 	add	r6,r3,r11
  807e50:	31400217 	ldw	r5,8(r6)
  807e54:	31405926 	beq	r6,r5,807fbc <_free_r+0x2a4>
  807e58:	28800117 	ldw	r2,4(r5)
  807e5c:	00ffff04 	movi	r3,-4
  807e60:	10c4703a 	and	r2,r2,r3
  807e64:	3880022e 	bgeu	r7,r2,807e70 <_free_r+0x158>
  807e68:	29400217 	ldw	r5,8(r5)
  807e6c:	317ffa1e 	bne	r6,r5,807e58 <_free_r+0x140>
  807e70:	29800317 	ldw	r6,12(r5)
  807e74:	41800315 	stw	r6,12(r8)
  807e78:	41400215 	stw	r5,8(r8)
  807e7c:	8809883a 	mov	r4,r17
  807e80:	2a000315 	stw	r8,12(r5)
  807e84:	32000215 	stw	r8,8(r6)
  807e88:	dfc00217 	ldw	ra,8(sp)
  807e8c:	dc400117 	ldw	r17,4(sp)
  807e90:	dc000017 	ldw	r16,0(sp)
  807e94:	dec00304 	addi	sp,sp,12
  807e98:	080cd041 	jmpi	80cd04 <__malloc_unlock>
  807e9c:	dfc00217 	ldw	ra,8(sp)
  807ea0:	dc400117 	ldw	r17,4(sp)
  807ea4:	dc000017 	ldw	r16,0(sp)
  807ea8:	dec00304 	addi	sp,sp,12
  807eac:	f800283a 	ret
  807eb0:	31000217 	ldw	r4,8(r6)
  807eb4:	003fbd06 	br	807dac <_free_r+0x94>
  807eb8:	3806d0fa 	srli	r3,r7,3
  807ebc:	00800044 	movi	r2,1
  807ec0:	51400117 	ldw	r5,4(r10)
  807ec4:	180890fa 	slli	r4,r3,3
  807ec8:	1807d0ba 	srai	r3,r3,2
  807ecc:	22c9883a 	add	r4,r4,r11
  807ed0:	21800217 	ldw	r6,8(r4)
  807ed4:	10c4983a 	sll	r2,r2,r3
  807ed8:	41000315 	stw	r4,12(r8)
  807edc:	41800215 	stw	r6,8(r8)
  807ee0:	288ab03a 	or	r5,r5,r2
  807ee4:	22000215 	stw	r8,8(r4)
  807ee8:	8809883a 	mov	r4,r17
  807eec:	51400115 	stw	r5,4(r10)
  807ef0:	32000315 	stw	r8,12(r6)
  807ef4:	dfc00217 	ldw	ra,8(sp)
  807ef8:	dc400117 	ldw	r17,4(sp)
  807efc:	dc000017 	ldw	r16,0(sp)
  807f00:	dec00304 	addi	sp,sp,12
  807f04:	080cd041 	jmpi	80cd04 <__malloc_unlock>
  807f08:	2880004c 	andi	r2,r5,1
  807f0c:	3a4d883a 	add	r6,r7,r9
  807f10:	1000071e 	bne	r2,zero,807f30 <_free_r+0x218>
  807f14:	80bffe17 	ldw	r2,-8(r16)
  807f18:	4091c83a 	sub	r8,r8,r2
  807f1c:	41000317 	ldw	r4,12(r8)
  807f20:	40c00217 	ldw	r3,8(r8)
  807f24:	308d883a 	add	r6,r6,r2
  807f28:	20c00215 	stw	r3,8(r4)
  807f2c:	19000315 	stw	r4,12(r3)
  807f30:	00802074 	movhi	r2,129
  807f34:	108f8704 	addi	r2,r2,15900
  807f38:	11000017 	ldw	r4,0(r2)
  807f3c:	30c00054 	ori	r3,r6,1
  807f40:	52000215 	stw	r8,8(r10)
  807f44:	40c00115 	stw	r3,4(r8)
  807f48:	313fa036 	bltu	r6,r4,807dcc <_free_r+0xb4>
  807f4c:	00802074 	movhi	r2,129
  807f50:	10969d04 	addi	r2,r2,23156
  807f54:	11400017 	ldw	r5,0(r2)
  807f58:	8809883a 	mov	r4,r17
  807f5c:	0807bec0 	call	807bec <_malloc_trim_r>
  807f60:	003f9a06 	br	807dcc <_free_r+0xb4>
  807f64:	00800104 	movi	r2,4
  807f68:	10c0072e 	bgeu	r2,r3,807f88 <_free_r+0x270>
  807f6c:	00800504 	movi	r2,20
  807f70:	10c01936 	bltu	r2,r3,807fd8 <_free_r+0x2c0>
  807f74:	188016c4 	addi	r2,r3,91
  807f78:	100690fa 	slli	r3,r2,3
  807f7c:	003fb306 	br	807e4c <_free_r+0x134>
  807f80:	01400044 	movi	r5,1
  807f84:	003f7e06 	br	807d80 <_free_r+0x68>
  807f88:	3804d1ba 	srli	r2,r7,6
  807f8c:	10800e04 	addi	r2,r2,56
  807f90:	100690fa 	slli	r3,r2,3
  807f94:	003fad06 	br	807e4c <_free_r+0x134>
  807f98:	22000315 	stw	r8,12(r4)
  807f9c:	22000215 	stw	r8,8(r4)
  807fa0:	3a05883a 	add	r2,r7,r8
  807fa4:	38c00054 	ori	r3,r7,1
  807fa8:	11c00015 	stw	r7,0(r2)
  807fac:	41000215 	stw	r4,8(r8)
  807fb0:	40c00115 	stw	r3,4(r8)
  807fb4:	41000315 	stw	r4,12(r8)
  807fb8:	003f8406 	br	807dcc <_free_r+0xb4>
  807fbc:	1005d0ba 	srai	r2,r2,2
  807fc0:	00c00044 	movi	r3,1
  807fc4:	51000117 	ldw	r4,4(r10)
  807fc8:	1886983a 	sll	r3,r3,r2
  807fcc:	20c8b03a 	or	r4,r4,r3
  807fd0:	51000115 	stw	r4,4(r10)
  807fd4:	003fa706 	br	807e74 <_free_r+0x15c>
  807fd8:	00801504 	movi	r2,84
  807fdc:	10c00436 	bltu	r2,r3,807ff0 <_free_r+0x2d8>
  807fe0:	3804d33a 	srli	r2,r7,12
  807fe4:	10801b84 	addi	r2,r2,110
  807fe8:	100690fa 	slli	r3,r2,3
  807fec:	003f9706 	br	807e4c <_free_r+0x134>
  807ff0:	00805504 	movi	r2,340
  807ff4:	10c00436 	bltu	r2,r3,808008 <_free_r+0x2f0>
  807ff8:	3804d3fa 	srli	r2,r7,15
  807ffc:	10801dc4 	addi	r2,r2,119
  808000:	100690fa 	slli	r3,r2,3
  808004:	003f9106 	br	807e4c <_free_r+0x134>
  808008:	00815504 	movi	r2,1364
  80800c:	10c0032e 	bgeu	r2,r3,80801c <_free_r+0x304>
  808010:	00801f84 	movi	r2,126
  808014:	00c0fc04 	movi	r3,1008
  808018:	003f8c06 	br	807e4c <_free_r+0x134>
  80801c:	3804d4ba 	srli	r2,r7,18
  808020:	10801f04 	addi	r2,r2,124
  808024:	100690fa 	slli	r3,r2,3
  808028:	003f8806 	br	807e4c <_free_r+0x134>

0080802c <__sfvwrite_r>:
  80802c:	30800217 	ldw	r2,8(r6)
  808030:	defff504 	addi	sp,sp,-44
  808034:	df000915 	stw	fp,36(sp)
  808038:	dd800715 	stw	r22,28(sp)
  80803c:	dc800315 	stw	r18,12(sp)
  808040:	dfc00a15 	stw	ra,40(sp)
  808044:	ddc00815 	stw	r23,32(sp)
  808048:	dd400615 	stw	r21,24(sp)
  80804c:	dd000515 	stw	r20,20(sp)
  808050:	dcc00415 	stw	r19,16(sp)
  808054:	dc400215 	stw	r17,8(sp)
  808058:	dc000115 	stw	r16,4(sp)
  80805c:	302d883a 	mov	r22,r6
  808060:	2039883a 	mov	fp,r4
  808064:	2825883a 	mov	r18,r5
  808068:	10001c26 	beq	r2,zero,8080dc <__sfvwrite_r+0xb0>
  80806c:	29c0030b 	ldhu	r7,12(r5)
  808070:	3880020c 	andi	r2,r7,8
  808074:	10002726 	beq	r2,zero,808114 <__sfvwrite_r+0xe8>
  808078:	28800417 	ldw	r2,16(r5)
  80807c:	10002526 	beq	r2,zero,808114 <__sfvwrite_r+0xe8>
  808080:	3880008c 	andi	r2,r7,2
  808084:	b5400017 	ldw	r21,0(r22)
  808088:	10002826 	beq	r2,zero,80812c <__sfvwrite_r+0x100>
  80808c:	0021883a 	mov	r16,zero
  808090:	0023883a 	mov	r17,zero
  808094:	880d883a 	mov	r6,r17
  808098:	e009883a 	mov	r4,fp
  80809c:	00810004 	movi	r2,1024
  8080a0:	80006e26 	beq	r16,zero,80825c <__sfvwrite_r+0x230>
  8080a4:	800f883a 	mov	r7,r16
  8080a8:	91400717 	ldw	r5,28(r18)
  8080ac:	1400012e 	bgeu	r2,r16,8080b4 <__sfvwrite_r+0x88>
  8080b0:	100f883a 	mov	r7,r2
  8080b4:	90c00917 	ldw	r3,36(r18)
  8080b8:	183ee83a 	callr	r3
  8080bc:	1007883a 	mov	r3,r2
  8080c0:	80a1c83a 	sub	r16,r16,r2
  8080c4:	88a3883a 	add	r17,r17,r2
  8080c8:	00806d0e 	bge	zero,r2,808280 <__sfvwrite_r+0x254>
  8080cc:	b0800217 	ldw	r2,8(r22)
  8080d0:	10c5c83a 	sub	r2,r2,r3
  8080d4:	b0800215 	stw	r2,8(r22)
  8080d8:	103fee1e 	bne	r2,zero,808094 <__sfvwrite_r+0x68>
  8080dc:	0009883a 	mov	r4,zero
  8080e0:	2005883a 	mov	r2,r4
  8080e4:	dfc00a17 	ldw	ra,40(sp)
  8080e8:	df000917 	ldw	fp,36(sp)
  8080ec:	ddc00817 	ldw	r23,32(sp)
  8080f0:	dd800717 	ldw	r22,28(sp)
  8080f4:	dd400617 	ldw	r21,24(sp)
  8080f8:	dd000517 	ldw	r20,20(sp)
  8080fc:	dcc00417 	ldw	r19,16(sp)
  808100:	dc800317 	ldw	r18,12(sp)
  808104:	dc400217 	ldw	r17,8(sp)
  808108:	dc000117 	ldw	r16,4(sp)
  80810c:	dec00b04 	addi	sp,sp,44
  808110:	f800283a 	ret
  808114:	0805df40 	call	805df4 <__swsetup_r>
  808118:	1000e41e 	bne	r2,zero,8084ac <__sfvwrite_r+0x480>
  80811c:	91c0030b 	ldhu	r7,12(r18)
  808120:	b5400017 	ldw	r21,0(r22)
  808124:	3880008c 	andi	r2,r7,2
  808128:	103fd81e 	bne	r2,zero,80808c <__sfvwrite_r+0x60>
  80812c:	3880004c 	andi	r2,r7,1
  808130:	1005003a 	cmpeq	r2,r2,zero
  808134:	10005726 	beq	r2,zero,808294 <__sfvwrite_r+0x268>
  808138:	0029883a 	mov	r20,zero
  80813c:	002f883a 	mov	r23,zero
  808140:	a0004226 	beq	r20,zero,80824c <__sfvwrite_r+0x220>
  808144:	3880800c 	andi	r2,r7,512
  808148:	94000217 	ldw	r16,8(r18)
  80814c:	10008b26 	beq	r2,zero,80837c <__sfvwrite_r+0x350>
  808150:	800d883a 	mov	r6,r16
  808154:	a400a536 	bltu	r20,r16,8083ec <__sfvwrite_r+0x3c0>
  808158:	3881200c 	andi	r2,r7,1152
  80815c:	10002726 	beq	r2,zero,8081fc <__sfvwrite_r+0x1d0>
  808160:	90800517 	ldw	r2,20(r18)
  808164:	92000417 	ldw	r8,16(r18)
  808168:	91400017 	ldw	r5,0(r18)
  80816c:	1087883a 	add	r3,r2,r2
  808170:	1887883a 	add	r3,r3,r2
  808174:	1808d7fa 	srli	r4,r3,31
  808178:	2a21c83a 	sub	r16,r5,r8
  80817c:	80800044 	addi	r2,r16,1
  808180:	20c9883a 	add	r4,r4,r3
  808184:	2027d07a 	srai	r19,r4,1
  808188:	a085883a 	add	r2,r20,r2
  80818c:	980d883a 	mov	r6,r19
  808190:	9880022e 	bgeu	r19,r2,80819c <__sfvwrite_r+0x170>
  808194:	1027883a 	mov	r19,r2
  808198:	100d883a 	mov	r6,r2
  80819c:	3881000c 	andi	r2,r7,1024
  8081a0:	1000b826 	beq	r2,zero,808484 <__sfvwrite_r+0x458>
  8081a4:	300b883a 	mov	r5,r6
  8081a8:	e009883a 	mov	r4,fp
  8081ac:	08088a00 	call	8088a0 <_malloc_r>
  8081b0:	10003126 	beq	r2,zero,808278 <__sfvwrite_r+0x24c>
  8081b4:	91400417 	ldw	r5,16(r18)
  8081b8:	1009883a 	mov	r4,r2
  8081bc:	800d883a 	mov	r6,r16
  8081c0:	1023883a 	mov	r17,r2
  8081c4:	08090c40 	call	8090c4 <memcpy>
  8081c8:	90c0030b 	ldhu	r3,12(r18)
  8081cc:	00beffc4 	movi	r2,-1025
  8081d0:	1886703a 	and	r3,r3,r2
  8081d4:	18c02014 	ori	r3,r3,128
  8081d8:	90c0030d 	sth	r3,12(r18)
  8081dc:	9c07c83a 	sub	r3,r19,r16
  8081e0:	8c05883a 	add	r2,r17,r16
  8081e4:	a00d883a 	mov	r6,r20
  8081e8:	a021883a 	mov	r16,r20
  8081ec:	90800015 	stw	r2,0(r18)
  8081f0:	90c00215 	stw	r3,8(r18)
  8081f4:	94400415 	stw	r17,16(r18)
  8081f8:	94c00515 	stw	r19,20(r18)
  8081fc:	91000017 	ldw	r4,0(r18)
  808200:	b80b883a 	mov	r5,r23
  808204:	a023883a 	mov	r17,r20
  808208:	08091640 	call	809164 <memmove>
  80820c:	90c00217 	ldw	r3,8(r18)
  808210:	90800017 	ldw	r2,0(r18)
  808214:	a027883a 	mov	r19,r20
  808218:	1c07c83a 	sub	r3,r3,r16
  80821c:	1405883a 	add	r2,r2,r16
  808220:	90c00215 	stw	r3,8(r18)
  808224:	a021883a 	mov	r16,r20
  808228:	90800015 	stw	r2,0(r18)
  80822c:	b0800217 	ldw	r2,8(r22)
  808230:	1405c83a 	sub	r2,r2,r16
  808234:	b0800215 	stw	r2,8(r22)
  808238:	103fa826 	beq	r2,zero,8080dc <__sfvwrite_r+0xb0>
  80823c:	a469c83a 	sub	r20,r20,r17
  808240:	91c0030b 	ldhu	r7,12(r18)
  808244:	bcef883a 	add	r23,r23,r19
  808248:	a03fbe1e 	bne	r20,zero,808144 <__sfvwrite_r+0x118>
  80824c:	adc00017 	ldw	r23,0(r21)
  808250:	ad000117 	ldw	r20,4(r21)
  808254:	ad400204 	addi	r21,r21,8
  808258:	003fb906 	br	808140 <__sfvwrite_r+0x114>
  80825c:	ac400017 	ldw	r17,0(r21)
  808260:	ac000117 	ldw	r16,4(r21)
  808264:	ad400204 	addi	r21,r21,8
  808268:	003f8a06 	br	808094 <__sfvwrite_r+0x68>
  80826c:	91400417 	ldw	r5,16(r18)
  808270:	e009883a 	mov	r4,fp
  808274:	0807d180 	call	807d18 <_free_r>
  808278:	00800304 	movi	r2,12
  80827c:	e0800015 	stw	r2,0(fp)
  808280:	9080030b 	ldhu	r2,12(r18)
  808284:	013fffc4 	movi	r4,-1
  808288:	10801014 	ori	r2,r2,64
  80828c:	9080030d 	sth	r2,12(r18)
  808290:	003f9306 	br	8080e0 <__sfvwrite_r+0xb4>
  808294:	0027883a 	mov	r19,zero
  808298:	002f883a 	mov	r23,zero
  80829c:	d8000015 	stw	zero,0(sp)
  8082a0:	0029883a 	mov	r20,zero
  8082a4:	98001e26 	beq	r19,zero,808320 <__sfvwrite_r+0x2f4>
  8082a8:	d8c00017 	ldw	r3,0(sp)
  8082ac:	1804c03a 	cmpne	r2,r3,zero
  8082b0:	10005e26 	beq	r2,zero,80842c <__sfvwrite_r+0x400>
  8082b4:	9821883a 	mov	r16,r19
  8082b8:	a4c0012e 	bgeu	r20,r19,8082c0 <__sfvwrite_r+0x294>
  8082bc:	a021883a 	mov	r16,r20
  8082c0:	91000017 	ldw	r4,0(r18)
  8082c4:	90800417 	ldw	r2,16(r18)
  8082c8:	91800217 	ldw	r6,8(r18)
  8082cc:	91c00517 	ldw	r7,20(r18)
  8082d0:	1100022e 	bgeu	r2,r4,8082dc <__sfvwrite_r+0x2b0>
  8082d4:	31e3883a 	add	r17,r6,r7
  8082d8:	8c001616 	blt	r17,r16,808334 <__sfvwrite_r+0x308>
  8082dc:	81c03816 	blt	r16,r7,8083c0 <__sfvwrite_r+0x394>
  8082e0:	90c00917 	ldw	r3,36(r18)
  8082e4:	91400717 	ldw	r5,28(r18)
  8082e8:	e009883a 	mov	r4,fp
  8082ec:	b80d883a 	mov	r6,r23
  8082f0:	183ee83a 	callr	r3
  8082f4:	1023883a 	mov	r17,r2
  8082f8:	00bfe10e 	bge	zero,r2,808280 <__sfvwrite_r+0x254>
  8082fc:	a469c83a 	sub	r20,r20,r17
  808300:	a0001826 	beq	r20,zero,808364 <__sfvwrite_r+0x338>
  808304:	b0800217 	ldw	r2,8(r22)
  808308:	1445c83a 	sub	r2,r2,r17
  80830c:	b0800215 	stw	r2,8(r22)
  808310:	103f7226 	beq	r2,zero,8080dc <__sfvwrite_r+0xb0>
  808314:	9c67c83a 	sub	r19,r19,r17
  808318:	bc6f883a 	add	r23,r23,r17
  80831c:	983fe21e 	bne	r19,zero,8082a8 <__sfvwrite_r+0x27c>
  808320:	adc00017 	ldw	r23,0(r21)
  808324:	acc00117 	ldw	r19,4(r21)
  808328:	ad400204 	addi	r21,r21,8
  80832c:	d8000015 	stw	zero,0(sp)
  808330:	003fdc06 	br	8082a4 <__sfvwrite_r+0x278>
  808334:	b80b883a 	mov	r5,r23
  808338:	880d883a 	mov	r6,r17
  80833c:	08091640 	call	809164 <memmove>
  808340:	90c00017 	ldw	r3,0(r18)
  808344:	e009883a 	mov	r4,fp
  808348:	900b883a 	mov	r5,r18
  80834c:	1c47883a 	add	r3,r3,r17
  808350:	90c00015 	stw	r3,0(r18)
  808354:	08076fc0 	call	8076fc <_fflush_r>
  808358:	103fc91e 	bne	r2,zero,808280 <__sfvwrite_r+0x254>
  80835c:	a469c83a 	sub	r20,r20,r17
  808360:	a03fe81e 	bne	r20,zero,808304 <__sfvwrite_r+0x2d8>
  808364:	e009883a 	mov	r4,fp
  808368:	900b883a 	mov	r5,r18
  80836c:	08076fc0 	call	8076fc <_fflush_r>
  808370:	103fc31e 	bne	r2,zero,808280 <__sfvwrite_r+0x254>
  808374:	d8000015 	stw	zero,0(sp)
  808378:	003fe206 	br	808304 <__sfvwrite_r+0x2d8>
  80837c:	91000017 	ldw	r4,0(r18)
  808380:	90800417 	ldw	r2,16(r18)
  808384:	1100022e 	bgeu	r2,r4,808390 <__sfvwrite_r+0x364>
  808388:	8023883a 	mov	r17,r16
  80838c:	85003136 	bltu	r16,r20,808454 <__sfvwrite_r+0x428>
  808390:	91c00517 	ldw	r7,20(r18)
  808394:	a1c01836 	bltu	r20,r7,8083f8 <__sfvwrite_r+0x3cc>
  808398:	90c00917 	ldw	r3,36(r18)
  80839c:	91400717 	ldw	r5,28(r18)
  8083a0:	e009883a 	mov	r4,fp
  8083a4:	b80d883a 	mov	r6,r23
  8083a8:	183ee83a 	callr	r3
  8083ac:	1021883a 	mov	r16,r2
  8083b0:	00bfb30e 	bge	zero,r2,808280 <__sfvwrite_r+0x254>
  8083b4:	1023883a 	mov	r17,r2
  8083b8:	1027883a 	mov	r19,r2
  8083bc:	003f9b06 	br	80822c <__sfvwrite_r+0x200>
  8083c0:	b80b883a 	mov	r5,r23
  8083c4:	800d883a 	mov	r6,r16
  8083c8:	08091640 	call	809164 <memmove>
  8083cc:	90c00217 	ldw	r3,8(r18)
  8083d0:	90800017 	ldw	r2,0(r18)
  8083d4:	8023883a 	mov	r17,r16
  8083d8:	1c07c83a 	sub	r3,r3,r16
  8083dc:	1405883a 	add	r2,r2,r16
  8083e0:	90c00215 	stw	r3,8(r18)
  8083e4:	90800015 	stw	r2,0(r18)
  8083e8:	003fc406 	br	8082fc <__sfvwrite_r+0x2d0>
  8083ec:	a00d883a 	mov	r6,r20
  8083f0:	a021883a 	mov	r16,r20
  8083f4:	003f8106 	br	8081fc <__sfvwrite_r+0x1d0>
  8083f8:	b80b883a 	mov	r5,r23
  8083fc:	a00d883a 	mov	r6,r20
  808400:	08091640 	call	809164 <memmove>
  808404:	90c00217 	ldw	r3,8(r18)
  808408:	90800017 	ldw	r2,0(r18)
  80840c:	a021883a 	mov	r16,r20
  808410:	1d07c83a 	sub	r3,r3,r20
  808414:	1505883a 	add	r2,r2,r20
  808418:	a023883a 	mov	r17,r20
  80841c:	a027883a 	mov	r19,r20
  808420:	90c00215 	stw	r3,8(r18)
  808424:	90800015 	stw	r2,0(r18)
  808428:	003f8006 	br	80822c <__sfvwrite_r+0x200>
  80842c:	b809883a 	mov	r4,r23
  808430:	01400284 	movi	r5,10
  808434:	980d883a 	mov	r6,r19
  808438:	0808fe00 	call	808fe0 <memchr>
  80843c:	10001726 	beq	r2,zero,80849c <__sfvwrite_r+0x470>
  808440:	15c5c83a 	sub	r2,r2,r23
  808444:	15000044 	addi	r20,r2,1
  808448:	00800044 	movi	r2,1
  80844c:	d8800015 	stw	r2,0(sp)
  808450:	003f9806 	br	8082b4 <__sfvwrite_r+0x288>
  808454:	b80b883a 	mov	r5,r23
  808458:	800d883a 	mov	r6,r16
  80845c:	08091640 	call	809164 <memmove>
  808460:	90c00017 	ldw	r3,0(r18)
  808464:	e009883a 	mov	r4,fp
  808468:	900b883a 	mov	r5,r18
  80846c:	1c07883a 	add	r3,r3,r16
  808470:	90c00015 	stw	r3,0(r18)
  808474:	8027883a 	mov	r19,r16
  808478:	08076fc0 	call	8076fc <_fflush_r>
  80847c:	103f6b26 	beq	r2,zero,80822c <__sfvwrite_r+0x200>
  808480:	003f7f06 	br	808280 <__sfvwrite_r+0x254>
  808484:	400b883a 	mov	r5,r8
  808488:	e009883a 	mov	r4,fp
  80848c:	080a2d00 	call	80a2d0 <_realloc_r>
  808490:	103f7626 	beq	r2,zero,80826c <__sfvwrite_r+0x240>
  808494:	1023883a 	mov	r17,r2
  808498:	003f5006 	br	8081dc <__sfvwrite_r+0x1b0>
  80849c:	00c00044 	movi	r3,1
  8084a0:	9d000044 	addi	r20,r19,1
  8084a4:	d8c00015 	stw	r3,0(sp)
  8084a8:	003f8206 	br	8082b4 <__sfvwrite_r+0x288>
  8084ac:	9080030b 	ldhu	r2,12(r18)
  8084b0:	00c00244 	movi	r3,9
  8084b4:	013fffc4 	movi	r4,-1
  8084b8:	10801014 	ori	r2,r2,64
  8084bc:	9080030d 	sth	r2,12(r18)
  8084c0:	e0c00015 	stw	r3,0(fp)
  8084c4:	003f0606 	br	8080e0 <__sfvwrite_r+0xb4>

008084c8 <_fwalk_reent>:
  8084c8:	defff704 	addi	sp,sp,-36
  8084cc:	dcc00315 	stw	r19,12(sp)
  8084d0:	24c0b804 	addi	r19,r4,736
  8084d4:	dd800615 	stw	r22,24(sp)
  8084d8:	dd400515 	stw	r21,20(sp)
  8084dc:	dfc00815 	stw	ra,32(sp)
  8084e0:	ddc00715 	stw	r23,28(sp)
  8084e4:	dd000415 	stw	r20,16(sp)
  8084e8:	dc800215 	stw	r18,8(sp)
  8084ec:	dc400115 	stw	r17,4(sp)
  8084f0:	dc000015 	stw	r16,0(sp)
  8084f4:	202b883a 	mov	r21,r4
  8084f8:	282d883a 	mov	r22,r5
  8084fc:	08079840 	call	807984 <__sfp_lock_acquire>
  808500:	98002126 	beq	r19,zero,808588 <_fwalk_reent+0xc0>
  808504:	002f883a 	mov	r23,zero
  808508:	9c800117 	ldw	r18,4(r19)
  80850c:	9c000217 	ldw	r16,8(r19)
  808510:	90bfffc4 	addi	r2,r18,-1
  808514:	10000d16 	blt	r2,zero,80854c <_fwalk_reent+0x84>
  808518:	0023883a 	mov	r17,zero
  80851c:	053fffc4 	movi	r20,-1
  808520:	8080030f 	ldh	r2,12(r16)
  808524:	8c400044 	addi	r17,r17,1
  808528:	10000626 	beq	r2,zero,808544 <_fwalk_reent+0x7c>
  80852c:	8080038f 	ldh	r2,14(r16)
  808530:	800b883a 	mov	r5,r16
  808534:	a809883a 	mov	r4,r21
  808538:	15000226 	beq	r2,r20,808544 <_fwalk_reent+0x7c>
  80853c:	b03ee83a 	callr	r22
  808540:	b8aeb03a 	or	r23,r23,r2
  808544:	84001704 	addi	r16,r16,92
  808548:	947ff51e 	bne	r18,r17,808520 <_fwalk_reent+0x58>
  80854c:	9cc00017 	ldw	r19,0(r19)
  808550:	983fed1e 	bne	r19,zero,808508 <_fwalk_reent+0x40>
  808554:	08079880 	call	807988 <__sfp_lock_release>
  808558:	b805883a 	mov	r2,r23
  80855c:	dfc00817 	ldw	ra,32(sp)
  808560:	ddc00717 	ldw	r23,28(sp)
  808564:	dd800617 	ldw	r22,24(sp)
  808568:	dd400517 	ldw	r21,20(sp)
  80856c:	dd000417 	ldw	r20,16(sp)
  808570:	dcc00317 	ldw	r19,12(sp)
  808574:	dc800217 	ldw	r18,8(sp)
  808578:	dc400117 	ldw	r17,4(sp)
  80857c:	dc000017 	ldw	r16,0(sp)
  808580:	dec00904 	addi	sp,sp,36
  808584:	f800283a 	ret
  808588:	002f883a 	mov	r23,zero
  80858c:	003ff106 	br	808554 <_fwalk_reent+0x8c>

00808590 <_fwalk>:
  808590:	defff804 	addi	sp,sp,-32
  808594:	dcc00315 	stw	r19,12(sp)
  808598:	24c0b804 	addi	r19,r4,736
  80859c:	dd400515 	stw	r21,20(sp)
  8085a0:	dfc00715 	stw	ra,28(sp)
  8085a4:	dd800615 	stw	r22,24(sp)
  8085a8:	dd000415 	stw	r20,16(sp)
  8085ac:	dc800215 	stw	r18,8(sp)
  8085b0:	dc400115 	stw	r17,4(sp)
  8085b4:	dc000015 	stw	r16,0(sp)
  8085b8:	282b883a 	mov	r21,r5
  8085bc:	08079840 	call	807984 <__sfp_lock_acquire>
  8085c0:	98001f26 	beq	r19,zero,808640 <_fwalk+0xb0>
  8085c4:	002d883a 	mov	r22,zero
  8085c8:	9c800117 	ldw	r18,4(r19)
  8085cc:	9c000217 	ldw	r16,8(r19)
  8085d0:	90bfffc4 	addi	r2,r18,-1
  8085d4:	10000c16 	blt	r2,zero,808608 <_fwalk+0x78>
  8085d8:	0023883a 	mov	r17,zero
  8085dc:	053fffc4 	movi	r20,-1
  8085e0:	8080030f 	ldh	r2,12(r16)
  8085e4:	8c400044 	addi	r17,r17,1
  8085e8:	10000526 	beq	r2,zero,808600 <_fwalk+0x70>
  8085ec:	8080038f 	ldh	r2,14(r16)
  8085f0:	8009883a 	mov	r4,r16
  8085f4:	15000226 	beq	r2,r20,808600 <_fwalk+0x70>
  8085f8:	a83ee83a 	callr	r21
  8085fc:	b0acb03a 	or	r22,r22,r2
  808600:	84001704 	addi	r16,r16,92
  808604:	947ff61e 	bne	r18,r17,8085e0 <_fwalk+0x50>
  808608:	9cc00017 	ldw	r19,0(r19)
  80860c:	983fee1e 	bne	r19,zero,8085c8 <_fwalk+0x38>
  808610:	08079880 	call	807988 <__sfp_lock_release>
  808614:	b005883a 	mov	r2,r22
  808618:	dfc00717 	ldw	ra,28(sp)
  80861c:	dd800617 	ldw	r22,24(sp)
  808620:	dd400517 	ldw	r21,20(sp)
  808624:	dd000417 	ldw	r20,16(sp)
  808628:	dcc00317 	ldw	r19,12(sp)
  80862c:	dc800217 	ldw	r18,8(sp)
  808630:	dc400117 	ldw	r17,4(sp)
  808634:	dc000017 	ldw	r16,0(sp)
  808638:	dec00804 	addi	sp,sp,32
  80863c:	f800283a 	ret
  808640:	002d883a 	mov	r22,zero
  808644:	003ff206 	br	808610 <_fwalk+0x80>

00808648 <__locale_charset>:
  808648:	d0a00b17 	ldw	r2,-32724(gp)
  80864c:	f800283a 	ret

00808650 <_localeconv_r>:
  808650:	00802074 	movhi	r2,129
  808654:	1087e904 	addi	r2,r2,8100
  808658:	f800283a 	ret

0080865c <localeconv>:
  80865c:	00802074 	movhi	r2,129
  808660:	108f8304 	addi	r2,r2,15884
  808664:	11000017 	ldw	r4,0(r2)
  808668:	08086501 	jmpi	808650 <_localeconv_r>

0080866c <_setlocale_r>:
  80866c:	defffc04 	addi	sp,sp,-16
  808670:	00c02074 	movhi	r3,129
  808674:	18c7c104 	addi	r3,r3,7940
  808678:	dc800215 	stw	r18,8(sp)
  80867c:	dc400115 	stw	r17,4(sp)
  808680:	dc000015 	stw	r16,0(sp)
  808684:	2023883a 	mov	r17,r4
  808688:	2825883a 	mov	r18,r5
  80868c:	dfc00315 	stw	ra,12(sp)
  808690:	3021883a 	mov	r16,r6
  808694:	3009883a 	mov	r4,r6
  808698:	180b883a 	mov	r5,r3
  80869c:	30000926 	beq	r6,zero,8086c4 <_setlocale_r+0x58>
  8086a0:	080aaf00 	call	80aaf0 <strcmp>
  8086a4:	8009883a 	mov	r4,r16
  8086a8:	01402074 	movhi	r5,129
  8086ac:	29476104 	addi	r5,r5,7556
  8086b0:	10000b1e 	bne	r2,zero,8086e0 <_setlocale_r+0x74>
  8086b4:	8c000d15 	stw	r16,52(r17)
  8086b8:	8c800c15 	stw	r18,48(r17)
  8086bc:	00c02074 	movhi	r3,129
  8086c0:	18c7c104 	addi	r3,r3,7940
  8086c4:	1805883a 	mov	r2,r3
  8086c8:	dfc00317 	ldw	ra,12(sp)
  8086cc:	dc800217 	ldw	r18,8(sp)
  8086d0:	dc400117 	ldw	r17,4(sp)
  8086d4:	dc000017 	ldw	r16,0(sp)
  8086d8:	dec00404 	addi	sp,sp,16
  8086dc:	f800283a 	ret
  8086e0:	080aaf00 	call	80aaf0 <strcmp>
  8086e4:	0007883a 	mov	r3,zero
  8086e8:	103ff226 	beq	r2,zero,8086b4 <_setlocale_r+0x48>
  8086ec:	003ff506 	br	8086c4 <_setlocale_r+0x58>

008086f0 <setlocale>:
  8086f0:	01802074 	movhi	r6,129
  8086f4:	318f8304 	addi	r6,r6,15884
  8086f8:	2007883a 	mov	r3,r4
  8086fc:	31000017 	ldw	r4,0(r6)
  808700:	280d883a 	mov	r6,r5
  808704:	180b883a 	mov	r5,r3
  808708:	080866c1 	jmpi	80866c <_setlocale_r>

0080870c <__smakebuf_r>:
  80870c:	2880030b 	ldhu	r2,12(r5)
  808710:	deffed04 	addi	sp,sp,-76
  808714:	dc401015 	stw	r17,64(sp)
  808718:	1080008c 	andi	r2,r2,2
  80871c:	dc000f15 	stw	r16,60(sp)
  808720:	dfc01215 	stw	ra,72(sp)
  808724:	dc801115 	stw	r18,68(sp)
  808728:	2821883a 	mov	r16,r5
  80872c:	2023883a 	mov	r17,r4
  808730:	10000b26 	beq	r2,zero,808760 <__smakebuf_r+0x54>
  808734:	28c010c4 	addi	r3,r5,67
  808738:	00800044 	movi	r2,1
  80873c:	28800515 	stw	r2,20(r5)
  808740:	28c00415 	stw	r3,16(r5)
  808744:	28c00015 	stw	r3,0(r5)
  808748:	dfc01217 	ldw	ra,72(sp)
  80874c:	dc801117 	ldw	r18,68(sp)
  808750:	dc401017 	ldw	r17,64(sp)
  808754:	dc000f17 	ldw	r16,60(sp)
  808758:	dec01304 	addi	sp,sp,76
  80875c:	f800283a 	ret
  808760:	2940038f 	ldh	r5,14(r5)
  808764:	28002116 	blt	r5,zero,8087ec <__smakebuf_r+0xe0>
  808768:	d80d883a 	mov	r6,sp
  80876c:	080ae6c0 	call	80ae6c <_fstat_r>
  808770:	10001e16 	blt	r2,zero,8087ec <__smakebuf_r+0xe0>
  808774:	d8800117 	ldw	r2,4(sp)
  808778:	00e00014 	movui	r3,32768
  80877c:	113c000c 	andi	r4,r2,61440
  808780:	20c03126 	beq	r4,r3,808848 <__smakebuf_r+0x13c>
  808784:	8080030b 	ldhu	r2,12(r16)
  808788:	00c80004 	movi	r3,8192
  80878c:	10820014 	ori	r2,r2,2048
  808790:	8080030d 	sth	r2,12(r16)
  808794:	20c01e26 	beq	r4,r3,808810 <__smakebuf_r+0x104>
  808798:	04810004 	movi	r18,1024
  80879c:	8809883a 	mov	r4,r17
  8087a0:	900b883a 	mov	r5,r18
  8087a4:	08088a00 	call	8088a0 <_malloc_r>
  8087a8:	1009883a 	mov	r4,r2
  8087ac:	10003126 	beq	r2,zero,808874 <__smakebuf_r+0x168>
  8087b0:	80c0030b 	ldhu	r3,12(r16)
  8087b4:	00802034 	movhi	r2,128
  8087b8:	109e9e04 	addi	r2,r2,31352
  8087bc:	88800f15 	stw	r2,60(r17)
  8087c0:	18c02014 	ori	r3,r3,128
  8087c4:	84800515 	stw	r18,20(r16)
  8087c8:	80c0030d 	sth	r3,12(r16)
  8087cc:	81000415 	stw	r4,16(r16)
  8087d0:	81000015 	stw	r4,0(r16)
  8087d4:	dfc01217 	ldw	ra,72(sp)
  8087d8:	dc801117 	ldw	r18,68(sp)
  8087dc:	dc401017 	ldw	r17,64(sp)
  8087e0:	dc000f17 	ldw	r16,60(sp)
  8087e4:	dec01304 	addi	sp,sp,76
  8087e8:	f800283a 	ret
  8087ec:	80c0030b 	ldhu	r3,12(r16)
  8087f0:	1880200c 	andi	r2,r3,128
  8087f4:	10000426 	beq	r2,zero,808808 <__smakebuf_r+0xfc>
  8087f8:	04801004 	movi	r18,64
  8087fc:	18820014 	ori	r2,r3,2048
  808800:	8080030d 	sth	r2,12(r16)
  808804:	003fe506 	br	80879c <__smakebuf_r+0x90>
  808808:	04810004 	movi	r18,1024
  80880c:	003ffb06 	br	8087fc <__smakebuf_r+0xf0>
  808810:	8140038f 	ldh	r5,14(r16)
  808814:	8809883a 	mov	r4,r17
  808818:	080aee00 	call	80aee0 <_isatty_r>
  80881c:	103fde26 	beq	r2,zero,808798 <__smakebuf_r+0x8c>
  808820:	8080030b 	ldhu	r2,12(r16)
  808824:	80c010c4 	addi	r3,r16,67
  808828:	04810004 	movi	r18,1024
  80882c:	10800054 	ori	r2,r2,1
  808830:	8080030d 	sth	r2,12(r16)
  808834:	00800044 	movi	r2,1
  808838:	80c00415 	stw	r3,16(r16)
  80883c:	80800515 	stw	r2,20(r16)
  808840:	80c00015 	stw	r3,0(r16)
  808844:	003fd506 	br	80879c <__smakebuf_r+0x90>
  808848:	80c00a17 	ldw	r3,40(r16)
  80884c:	00802074 	movhi	r2,129
  808850:	10aa6b04 	addi	r2,r2,-22100
  808854:	18bfcb1e 	bne	r3,r2,808784 <__smakebuf_r+0x78>
  808858:	8080030b 	ldhu	r2,12(r16)
  80885c:	00c10004 	movi	r3,1024
  808860:	1825883a 	mov	r18,r3
  808864:	10c4b03a 	or	r2,r2,r3
  808868:	8080030d 	sth	r2,12(r16)
  80886c:	80c01315 	stw	r3,76(r16)
  808870:	003fca06 	br	80879c <__smakebuf_r+0x90>
  808874:	8100030b 	ldhu	r4,12(r16)
  808878:	2080800c 	andi	r2,r4,512
  80887c:	103fb21e 	bne	r2,zero,808748 <__smakebuf_r+0x3c>
  808880:	80c010c4 	addi	r3,r16,67
  808884:	21000094 	ori	r4,r4,2
  808888:	00800044 	movi	r2,1
  80888c:	80800515 	stw	r2,20(r16)
  808890:	8100030d 	sth	r4,12(r16)
  808894:	80c00415 	stw	r3,16(r16)
  808898:	80c00015 	stw	r3,0(r16)
  80889c:	003faa06 	br	808748 <__smakebuf_r+0x3c>

008088a0 <_malloc_r>:
  8088a0:	defff604 	addi	sp,sp,-40
  8088a4:	28c002c4 	addi	r3,r5,11
  8088a8:	00800584 	movi	r2,22
  8088ac:	dc800215 	stw	r18,8(sp)
  8088b0:	dfc00915 	stw	ra,36(sp)
  8088b4:	df000815 	stw	fp,32(sp)
  8088b8:	ddc00715 	stw	r23,28(sp)
  8088bc:	dd800615 	stw	r22,24(sp)
  8088c0:	dd400515 	stw	r21,20(sp)
  8088c4:	dd000415 	stw	r20,16(sp)
  8088c8:	dcc00315 	stw	r19,12(sp)
  8088cc:	dc400115 	stw	r17,4(sp)
  8088d0:	dc000015 	stw	r16,0(sp)
  8088d4:	2025883a 	mov	r18,r4
  8088d8:	10c01236 	bltu	r2,r3,808924 <_malloc_r+0x84>
  8088dc:	04400404 	movi	r17,16
  8088e0:	8940142e 	bgeu	r17,r5,808934 <_malloc_r+0x94>
  8088e4:	00800304 	movi	r2,12
  8088e8:	0007883a 	mov	r3,zero
  8088ec:	90800015 	stw	r2,0(r18)
  8088f0:	1805883a 	mov	r2,r3
  8088f4:	dfc00917 	ldw	ra,36(sp)
  8088f8:	df000817 	ldw	fp,32(sp)
  8088fc:	ddc00717 	ldw	r23,28(sp)
  808900:	dd800617 	ldw	r22,24(sp)
  808904:	dd400517 	ldw	r21,20(sp)
  808908:	dd000417 	ldw	r20,16(sp)
  80890c:	dcc00317 	ldw	r19,12(sp)
  808910:	dc800217 	ldw	r18,8(sp)
  808914:	dc400117 	ldw	r17,4(sp)
  808918:	dc000017 	ldw	r16,0(sp)
  80891c:	dec00a04 	addi	sp,sp,40
  808920:	f800283a 	ret
  808924:	00bffe04 	movi	r2,-8
  808928:	18a2703a 	and	r17,r3,r2
  80892c:	883fed16 	blt	r17,zero,8088e4 <_malloc_r+0x44>
  808930:	897fec36 	bltu	r17,r5,8088e4 <_malloc_r+0x44>
  808934:	9009883a 	mov	r4,r18
  808938:	080cce40 	call	80cce4 <__malloc_lock>
  80893c:	00807dc4 	movi	r2,503
  808940:	14402b2e 	bgeu	r2,r17,8089f0 <_malloc_r+0x150>
  808944:	8806d27a 	srli	r3,r17,9
  808948:	18003f1e 	bne	r3,zero,808a48 <_malloc_r+0x1a8>
  80894c:	880cd0fa 	srli	r6,r17,3
  808950:	300490fa 	slli	r2,r6,3
  808954:	02c02074 	movhi	r11,129
  808958:	5ac99a04 	addi	r11,r11,9832
  80895c:	12cb883a 	add	r5,r2,r11
  808960:	2c000317 	ldw	r16,12(r5)
  808964:	580f883a 	mov	r7,r11
  808968:	2c00041e 	bne	r5,r16,80897c <_malloc_r+0xdc>
  80896c:	00000a06 	br	808998 <_malloc_r+0xf8>
  808970:	1800860e 	bge	r3,zero,808b8c <_malloc_r+0x2ec>
  808974:	84000317 	ldw	r16,12(r16)
  808978:	2c000726 	beq	r5,r16,808998 <_malloc_r+0xf8>
  80897c:	80800117 	ldw	r2,4(r16)
  808980:	00ffff04 	movi	r3,-4
  808984:	10c8703a 	and	r4,r2,r3
  808988:	2447c83a 	sub	r3,r4,r17
  80898c:	008003c4 	movi	r2,15
  808990:	10fff70e 	bge	r2,r3,808970 <_malloc_r+0xd0>
  808994:	31bfffc4 	addi	r6,r6,-1
  808998:	32400044 	addi	r9,r6,1
  80899c:	02802074 	movhi	r10,129
  8089a0:	52899c04 	addi	r10,r10,9840
  8089a4:	54000217 	ldw	r16,8(r10)
  8089a8:	8280a026 	beq	r16,r10,808c2c <_malloc_r+0x38c>
  8089ac:	80800117 	ldw	r2,4(r16)
  8089b0:	00ffff04 	movi	r3,-4
  8089b4:	10ca703a 	and	r5,r2,r3
  8089b8:	2c4dc83a 	sub	r6,r5,r17
  8089bc:	008003c4 	movi	r2,15
  8089c0:	11808316 	blt	r2,r6,808bd0 <_malloc_r+0x330>
  8089c4:	52800315 	stw	r10,12(r10)
  8089c8:	52800215 	stw	r10,8(r10)
  8089cc:	30002916 	blt	r6,zero,808a74 <_malloc_r+0x1d4>
  8089d0:	8147883a 	add	r3,r16,r5
  8089d4:	18800117 	ldw	r2,4(r3)
  8089d8:	9009883a 	mov	r4,r18
  8089dc:	10800054 	ori	r2,r2,1
  8089e0:	18800115 	stw	r2,4(r3)
  8089e4:	080cd040 	call	80cd04 <__malloc_unlock>
  8089e8:	80c00204 	addi	r3,r16,8
  8089ec:	003fc006 	br	8088f0 <_malloc_r+0x50>
  8089f0:	02c02074 	movhi	r11,129
  8089f4:	5ac99a04 	addi	r11,r11,9832
  8089f8:	8ac5883a 	add	r2,r17,r11
  8089fc:	14000317 	ldw	r16,12(r2)
  808a00:	580f883a 	mov	r7,r11
  808a04:	8806d0fa 	srli	r3,r17,3
  808a08:	14006c26 	beq	r2,r16,808bbc <_malloc_r+0x31c>
  808a0c:	80c00117 	ldw	r3,4(r16)
  808a10:	00bfff04 	movi	r2,-4
  808a14:	81800317 	ldw	r6,12(r16)
  808a18:	1886703a 	and	r3,r3,r2
  808a1c:	80c7883a 	add	r3,r16,r3
  808a20:	18800117 	ldw	r2,4(r3)
  808a24:	81400217 	ldw	r5,8(r16)
  808a28:	9009883a 	mov	r4,r18
  808a2c:	10800054 	ori	r2,r2,1
  808a30:	18800115 	stw	r2,4(r3)
  808a34:	31400215 	stw	r5,8(r6)
  808a38:	29800315 	stw	r6,12(r5)
  808a3c:	080cd040 	call	80cd04 <__malloc_unlock>
  808a40:	80c00204 	addi	r3,r16,8
  808a44:	003faa06 	br	8088f0 <_malloc_r+0x50>
  808a48:	00800104 	movi	r2,4
  808a4c:	10c0052e 	bgeu	r2,r3,808a64 <_malloc_r+0x1c4>
  808a50:	00800504 	movi	r2,20
  808a54:	10c07836 	bltu	r2,r3,808c38 <_malloc_r+0x398>
  808a58:	198016c4 	addi	r6,r3,91
  808a5c:	300490fa 	slli	r2,r6,3
  808a60:	003fbc06 	br	808954 <_malloc_r+0xb4>
  808a64:	8804d1ba 	srli	r2,r17,6
  808a68:	11800e04 	addi	r6,r2,56
  808a6c:	300490fa 	slli	r2,r6,3
  808a70:	003fb806 	br	808954 <_malloc_r+0xb4>
  808a74:	00807fc4 	movi	r2,511
  808a78:	1140bb36 	bltu	r2,r5,808d68 <_malloc_r+0x4c8>
  808a7c:	2806d0fa 	srli	r3,r5,3
  808a80:	573ffe04 	addi	fp,r10,-8
  808a84:	00800044 	movi	r2,1
  808a88:	180890fa 	slli	r4,r3,3
  808a8c:	1807d0ba 	srai	r3,r3,2
  808a90:	e1c00117 	ldw	r7,4(fp)
  808a94:	5909883a 	add	r4,r11,r4
  808a98:	21400217 	ldw	r5,8(r4)
  808a9c:	10c4983a 	sll	r2,r2,r3
  808aa0:	81000315 	stw	r4,12(r16)
  808aa4:	81400215 	stw	r5,8(r16)
  808aa8:	388eb03a 	or	r7,r7,r2
  808aac:	2c000315 	stw	r16,12(r5)
  808ab0:	24000215 	stw	r16,8(r4)
  808ab4:	e1c00115 	stw	r7,4(fp)
  808ab8:	4807883a 	mov	r3,r9
  808abc:	4800cd16 	blt	r9,zero,808df4 <_malloc_r+0x554>
  808ac0:	1807d0ba 	srai	r3,r3,2
  808ac4:	00800044 	movi	r2,1
  808ac8:	10c8983a 	sll	r4,r2,r3
  808acc:	39004436 	bltu	r7,r4,808be0 <_malloc_r+0x340>
  808ad0:	21c4703a 	and	r2,r4,r7
  808ad4:	10000a1e 	bne	r2,zero,808b00 <_malloc_r+0x260>
  808ad8:	2109883a 	add	r4,r4,r4
  808adc:	00bfff04 	movi	r2,-4
  808ae0:	4884703a 	and	r2,r9,r2
  808ae4:	3906703a 	and	r3,r7,r4
  808ae8:	12400104 	addi	r9,r2,4
  808aec:	1800041e 	bne	r3,zero,808b00 <_malloc_r+0x260>
  808af0:	2109883a 	add	r4,r4,r4
  808af4:	3904703a 	and	r2,r7,r4
  808af8:	4a400104 	addi	r9,r9,4
  808afc:	103ffc26 	beq	r2,zero,808af0 <_malloc_r+0x250>
  808b00:	480490fa 	slli	r2,r9,3
  808b04:	4819883a 	mov	r12,r9
  808b08:	023fff04 	movi	r8,-4
  808b0c:	589b883a 	add	r13,r11,r2
  808b10:	6807883a 	mov	r3,r13
  808b14:	014003c4 	movi	r5,15
  808b18:	1c000317 	ldw	r16,12(r3)
  808b1c:	1c00041e 	bne	r3,r16,808b30 <_malloc_r+0x290>
  808b20:	0000a706 	br	808dc0 <_malloc_r+0x520>
  808b24:	3000ab0e 	bge	r6,zero,808dd4 <_malloc_r+0x534>
  808b28:	84000317 	ldw	r16,12(r16)
  808b2c:	1c00a426 	beq	r3,r16,808dc0 <_malloc_r+0x520>
  808b30:	80800117 	ldw	r2,4(r16)
  808b34:	1204703a 	and	r2,r2,r8
  808b38:	144dc83a 	sub	r6,r2,r17
  808b3c:	29bff90e 	bge	r5,r6,808b24 <_malloc_r+0x284>
  808b40:	81000317 	ldw	r4,12(r16)
  808b44:	80c00217 	ldw	r3,8(r16)
  808b48:	89400054 	ori	r5,r17,1
  808b4c:	8445883a 	add	r2,r16,r17
  808b50:	20c00215 	stw	r3,8(r4)
  808b54:	19000315 	stw	r4,12(r3)
  808b58:	81400115 	stw	r5,4(r16)
  808b5c:	1187883a 	add	r3,r2,r6
  808b60:	31000054 	ori	r4,r6,1
  808b64:	50800315 	stw	r2,12(r10)
  808b68:	50800215 	stw	r2,8(r10)
  808b6c:	19800015 	stw	r6,0(r3)
  808b70:	11000115 	stw	r4,4(r2)
  808b74:	12800215 	stw	r10,8(r2)
  808b78:	12800315 	stw	r10,12(r2)
  808b7c:	9009883a 	mov	r4,r18
  808b80:	080cd040 	call	80cd04 <__malloc_unlock>
  808b84:	80c00204 	addi	r3,r16,8
  808b88:	003f5906 	br	8088f0 <_malloc_r+0x50>
  808b8c:	8109883a 	add	r4,r16,r4
  808b90:	20800117 	ldw	r2,4(r4)
  808b94:	80c00217 	ldw	r3,8(r16)
  808b98:	81400317 	ldw	r5,12(r16)
  808b9c:	10800054 	ori	r2,r2,1
  808ba0:	20800115 	stw	r2,4(r4)
  808ba4:	28c00215 	stw	r3,8(r5)
  808ba8:	19400315 	stw	r5,12(r3)
  808bac:	9009883a 	mov	r4,r18
  808bb0:	080cd040 	call	80cd04 <__malloc_unlock>
  808bb4:	80c00204 	addi	r3,r16,8
  808bb8:	003f4d06 	br	8088f0 <_malloc_r+0x50>
  808bbc:	80800204 	addi	r2,r16,8
  808bc0:	14000317 	ldw	r16,12(r2)
  808bc4:	143f911e 	bne	r2,r16,808a0c <_malloc_r+0x16c>
  808bc8:	1a400084 	addi	r9,r3,2
  808bcc:	003f7306 	br	80899c <_malloc_r+0xfc>
  808bd0:	88c00054 	ori	r3,r17,1
  808bd4:	8445883a 	add	r2,r16,r17
  808bd8:	80c00115 	stw	r3,4(r16)
  808bdc:	003fdf06 	br	808b5c <_malloc_r+0x2bc>
  808be0:	e4000217 	ldw	r16,8(fp)
  808be4:	00bfff04 	movi	r2,-4
  808be8:	80c00117 	ldw	r3,4(r16)
  808bec:	802d883a 	mov	r22,r16
  808bf0:	18aa703a 	and	r21,r3,r2
  808bf4:	ac401636 	bltu	r21,r17,808c50 <_malloc_r+0x3b0>
  808bf8:	ac49c83a 	sub	r4,r21,r17
  808bfc:	008003c4 	movi	r2,15
  808c00:	1100130e 	bge	r2,r4,808c50 <_malloc_r+0x3b0>
  808c04:	88800054 	ori	r2,r17,1
  808c08:	8447883a 	add	r3,r16,r17
  808c0c:	80800115 	stw	r2,4(r16)
  808c10:	20800054 	ori	r2,r4,1
  808c14:	18800115 	stw	r2,4(r3)
  808c18:	e0c00215 	stw	r3,8(fp)
  808c1c:	9009883a 	mov	r4,r18
  808c20:	080cd040 	call	80cd04 <__malloc_unlock>
  808c24:	80c00204 	addi	r3,r16,8
  808c28:	003f3106 	br	8088f0 <_malloc_r+0x50>
  808c2c:	39c00117 	ldw	r7,4(r7)
  808c30:	573ffe04 	addi	fp,r10,-8
  808c34:	003fa006 	br	808ab8 <_malloc_r+0x218>
  808c38:	00801504 	movi	r2,84
  808c3c:	10c06736 	bltu	r2,r3,808ddc <_malloc_r+0x53c>
  808c40:	8804d33a 	srli	r2,r17,12
  808c44:	11801b84 	addi	r6,r2,110
  808c48:	300490fa 	slli	r2,r6,3
  808c4c:	003f4106 	br	808954 <_malloc_r+0xb4>
  808c50:	d0a72217 	ldw	r2,-25464(gp)
  808c54:	d0e00d17 	ldw	r3,-32716(gp)
  808c58:	053fffc4 	movi	r20,-1
  808c5c:	10800404 	addi	r2,r2,16
  808c60:	88a7883a 	add	r19,r17,r2
  808c64:	1d000326 	beq	r3,r20,808c74 <_malloc_r+0x3d4>
  808c68:	98c3ffc4 	addi	r3,r19,4095
  808c6c:	00bc0004 	movi	r2,-4096
  808c70:	18a6703a 	and	r19,r3,r2
  808c74:	9009883a 	mov	r4,r18
  808c78:	980b883a 	mov	r5,r19
  808c7c:	080a9340 	call	80a934 <_sbrk_r>
  808c80:	1009883a 	mov	r4,r2
  808c84:	15000426 	beq	r2,r20,808c98 <_malloc_r+0x3f8>
  808c88:	854b883a 	add	r5,r16,r21
  808c8c:	1029883a 	mov	r20,r2
  808c90:	11405a2e 	bgeu	r2,r5,808dfc <_malloc_r+0x55c>
  808c94:	87000c26 	beq	r16,fp,808cc8 <_malloc_r+0x428>
  808c98:	e4000217 	ldw	r16,8(fp)
  808c9c:	80c00117 	ldw	r3,4(r16)
  808ca0:	00bfff04 	movi	r2,-4
  808ca4:	1884703a 	and	r2,r3,r2
  808ca8:	14400336 	bltu	r2,r17,808cb8 <_malloc_r+0x418>
  808cac:	1449c83a 	sub	r4,r2,r17
  808cb0:	008003c4 	movi	r2,15
  808cb4:	113fd316 	blt	r2,r4,808c04 <_malloc_r+0x364>
  808cb8:	9009883a 	mov	r4,r18
  808cbc:	080cd040 	call	80cd04 <__malloc_unlock>
  808cc0:	0007883a 	mov	r3,zero
  808cc4:	003f0a06 	br	8088f0 <_malloc_r+0x50>
  808cc8:	05c02074 	movhi	r23,129
  808ccc:	bdd6a704 	addi	r23,r23,23196
  808cd0:	b8800017 	ldw	r2,0(r23)
  808cd4:	988d883a 	add	r6,r19,r2
  808cd8:	b9800015 	stw	r6,0(r23)
  808cdc:	d0e00d17 	ldw	r3,-32716(gp)
  808ce0:	00bfffc4 	movi	r2,-1
  808ce4:	18808e26 	beq	r3,r2,808f20 <_malloc_r+0x680>
  808ce8:	2145c83a 	sub	r2,r4,r5
  808cec:	3085883a 	add	r2,r6,r2
  808cf0:	b8800015 	stw	r2,0(r23)
  808cf4:	20c001cc 	andi	r3,r4,7
  808cf8:	18005f1e 	bne	r3,zero,808e78 <_malloc_r+0x5d8>
  808cfc:	000b883a 	mov	r5,zero
  808d00:	a4c5883a 	add	r2,r20,r19
  808d04:	1083ffcc 	andi	r2,r2,4095
  808d08:	00c40004 	movi	r3,4096
  808d0c:	1887c83a 	sub	r3,r3,r2
  808d10:	28e7883a 	add	r19,r5,r3
  808d14:	9009883a 	mov	r4,r18
  808d18:	980b883a 	mov	r5,r19
  808d1c:	080a9340 	call	80a934 <_sbrk_r>
  808d20:	1007883a 	mov	r3,r2
  808d24:	00bfffc4 	movi	r2,-1
  808d28:	18807a26 	beq	r3,r2,808f14 <_malloc_r+0x674>
  808d2c:	1d05c83a 	sub	r2,r3,r20
  808d30:	9885883a 	add	r2,r19,r2
  808d34:	10c00054 	ori	r3,r2,1
  808d38:	b8800017 	ldw	r2,0(r23)
  808d3c:	a021883a 	mov	r16,r20
  808d40:	a0c00115 	stw	r3,4(r20)
  808d44:	9885883a 	add	r2,r19,r2
  808d48:	b8800015 	stw	r2,0(r23)
  808d4c:	e5000215 	stw	r20,8(fp)
  808d50:	b7003626 	beq	r22,fp,808e2c <_malloc_r+0x58c>
  808d54:	018003c4 	movi	r6,15
  808d58:	35404b36 	bltu	r6,r21,808e88 <_malloc_r+0x5e8>
  808d5c:	00800044 	movi	r2,1
  808d60:	a0800115 	stw	r2,4(r20)
  808d64:	003fcd06 	br	808c9c <_malloc_r+0x3fc>
  808d68:	2808d27a 	srli	r4,r5,9
  808d6c:	2000371e 	bne	r4,zero,808e4c <_malloc_r+0x5ac>
  808d70:	2808d0fa 	srli	r4,r5,3
  808d74:	200690fa 	slli	r3,r4,3
  808d78:	1ad1883a 	add	r8,r3,r11
  808d7c:	41800217 	ldw	r6,8(r8)
  808d80:	41805b26 	beq	r8,r6,808ef0 <_malloc_r+0x650>
  808d84:	30800117 	ldw	r2,4(r6)
  808d88:	00ffff04 	movi	r3,-4
  808d8c:	10c4703a 	and	r2,r2,r3
  808d90:	2880022e 	bgeu	r5,r2,808d9c <_malloc_r+0x4fc>
  808d94:	31800217 	ldw	r6,8(r6)
  808d98:	41bffa1e 	bne	r8,r6,808d84 <_malloc_r+0x4e4>
  808d9c:	32000317 	ldw	r8,12(r6)
  808da0:	39c00117 	ldw	r7,4(r7)
  808da4:	82000315 	stw	r8,12(r16)
  808da8:	81800215 	stw	r6,8(r16)
  808dac:	07002074 	movhi	fp,129
  808db0:	e7099a04 	addi	fp,fp,9832
  808db4:	34000315 	stw	r16,12(r6)
  808db8:	44000215 	stw	r16,8(r8)
  808dbc:	003f3e06 	br	808ab8 <_malloc_r+0x218>
  808dc0:	63000044 	addi	r12,r12,1
  808dc4:	608000cc 	andi	r2,r12,3
  808dc8:	10005d26 	beq	r2,zero,808f40 <_malloc_r+0x6a0>
  808dcc:	18c00204 	addi	r3,r3,8
  808dd0:	003f5106 	br	808b18 <_malloc_r+0x278>
  808dd4:	8089883a 	add	r4,r16,r2
  808dd8:	003f6d06 	br	808b90 <_malloc_r+0x2f0>
  808ddc:	00805504 	movi	r2,340
  808de0:	10c02036 	bltu	r2,r3,808e64 <_malloc_r+0x5c4>
  808de4:	8804d3fa 	srli	r2,r17,15
  808de8:	11801dc4 	addi	r6,r2,119
  808dec:	300490fa 	slli	r2,r6,3
  808df0:	003ed806 	br	808954 <_malloc_r+0xb4>
  808df4:	48c000c4 	addi	r3,r9,3
  808df8:	003f3106 	br	808ac0 <_malloc_r+0x220>
  808dfc:	05c02074 	movhi	r23,129
  808e00:	bdd6a704 	addi	r23,r23,23196
  808e04:	b8800017 	ldw	r2,0(r23)
  808e08:	988d883a 	add	r6,r19,r2
  808e0c:	b9800015 	stw	r6,0(r23)
  808e10:	293fb21e 	bne	r5,r4,808cdc <_malloc_r+0x43c>
  808e14:	2083ffcc 	andi	r2,r4,4095
  808e18:	103fb01e 	bne	r2,zero,808cdc <_malloc_r+0x43c>
  808e1c:	e4000217 	ldw	r16,8(fp)
  808e20:	9d45883a 	add	r2,r19,r21
  808e24:	10800054 	ori	r2,r2,1
  808e28:	80800115 	stw	r2,4(r16)
  808e2c:	b8c00017 	ldw	r3,0(r23)
  808e30:	d0a72317 	ldw	r2,-25460(gp)
  808e34:	10c0012e 	bgeu	r2,r3,808e3c <_malloc_r+0x59c>
  808e38:	d0e72315 	stw	r3,-25460(gp)
  808e3c:	d0a72417 	ldw	r2,-25456(gp)
  808e40:	10ff962e 	bgeu	r2,r3,808c9c <_malloc_r+0x3fc>
  808e44:	d0e72415 	stw	r3,-25456(gp)
  808e48:	003f9406 	br	808c9c <_malloc_r+0x3fc>
  808e4c:	00800104 	movi	r2,4
  808e50:	11001e36 	bltu	r2,r4,808ecc <_malloc_r+0x62c>
  808e54:	2804d1ba 	srli	r2,r5,6
  808e58:	11000e04 	addi	r4,r2,56
  808e5c:	200690fa 	slli	r3,r4,3
  808e60:	003fc506 	br	808d78 <_malloc_r+0x4d8>
  808e64:	00815504 	movi	r2,1364
  808e68:	10c01d2e 	bgeu	r2,r3,808ee0 <_malloc_r+0x640>
  808e6c:	01801f84 	movi	r6,126
  808e70:	0080fc04 	movi	r2,1008
  808e74:	003eb706 	br	808954 <_malloc_r+0xb4>
  808e78:	00800204 	movi	r2,8
  808e7c:	10cbc83a 	sub	r5,r2,r3
  808e80:	2169883a 	add	r20,r4,r5
  808e84:	003f9e06 	br	808d00 <_malloc_r+0x460>
  808e88:	00bffe04 	movi	r2,-8
  808e8c:	a93ffd04 	addi	r4,r21,-12
  808e90:	2088703a 	and	r4,r4,r2
  808e94:	b10b883a 	add	r5,r22,r4
  808e98:	00c00144 	movi	r3,5
  808e9c:	28c00215 	stw	r3,8(r5)
  808ea0:	28c00115 	stw	r3,4(r5)
  808ea4:	b0800117 	ldw	r2,4(r22)
  808ea8:	1080004c 	andi	r2,r2,1
  808eac:	2084b03a 	or	r2,r4,r2
  808eb0:	b0800115 	stw	r2,4(r22)
  808eb4:	313fdd2e 	bgeu	r6,r4,808e2c <_malloc_r+0x58c>
  808eb8:	b1400204 	addi	r5,r22,8
  808ebc:	9009883a 	mov	r4,r18
  808ec0:	0807d180 	call	807d18 <_free_r>
  808ec4:	e4000217 	ldw	r16,8(fp)
  808ec8:	003fd806 	br	808e2c <_malloc_r+0x58c>
  808ecc:	00800504 	movi	r2,20
  808ed0:	11001536 	bltu	r2,r4,808f28 <_malloc_r+0x688>
  808ed4:	210016c4 	addi	r4,r4,91
  808ed8:	200690fa 	slli	r3,r4,3
  808edc:	003fa606 	br	808d78 <_malloc_r+0x4d8>
  808ee0:	8804d4ba 	srli	r2,r17,18
  808ee4:	11801f04 	addi	r6,r2,124
  808ee8:	300490fa 	slli	r2,r6,3
  808eec:	003e9906 	br	808954 <_malloc_r+0xb4>
  808ef0:	2009d0ba 	srai	r4,r4,2
  808ef4:	01402074 	movhi	r5,129
  808ef8:	29499a04 	addi	r5,r5,9832
  808efc:	00c00044 	movi	r3,1
  808f00:	28800117 	ldw	r2,4(r5)
  808f04:	1906983a 	sll	r3,r3,r4
  808f08:	10c4b03a 	or	r2,r2,r3
  808f0c:	28800115 	stw	r2,4(r5)
  808f10:	003fa306 	br	808da0 <_malloc_r+0x500>
  808f14:	0027883a 	mov	r19,zero
  808f18:	00c00044 	movi	r3,1
  808f1c:	003f8606 	br	808d38 <_malloc_r+0x498>
  808f20:	d1200d15 	stw	r4,-32716(gp)
  808f24:	003f7306 	br	808cf4 <_malloc_r+0x454>
  808f28:	00801504 	movi	r2,84
  808f2c:	11001936 	bltu	r2,r4,808f94 <_malloc_r+0x6f4>
  808f30:	2804d33a 	srli	r2,r5,12
  808f34:	11001b84 	addi	r4,r2,110
  808f38:	200690fa 	slli	r3,r4,3
  808f3c:	003f8e06 	br	808d78 <_malloc_r+0x4d8>
  808f40:	480b883a 	mov	r5,r9
  808f44:	6807883a 	mov	r3,r13
  808f48:	288000cc 	andi	r2,r5,3
  808f4c:	18fffe04 	addi	r3,r3,-8
  808f50:	297fffc4 	addi	r5,r5,-1
  808f54:	10001526 	beq	r2,zero,808fac <_malloc_r+0x70c>
  808f58:	18800217 	ldw	r2,8(r3)
  808f5c:	10fffa26 	beq	r2,r3,808f48 <_malloc_r+0x6a8>
  808f60:	2109883a 	add	r4,r4,r4
  808f64:	393f1e36 	bltu	r7,r4,808be0 <_malloc_r+0x340>
  808f68:	203f1d26 	beq	r4,zero,808be0 <_malloc_r+0x340>
  808f6c:	21c4703a 	and	r2,r4,r7
  808f70:	10000226 	beq	r2,zero,808f7c <_malloc_r+0x6dc>
  808f74:	6013883a 	mov	r9,r12
  808f78:	003ee106 	br	808b00 <_malloc_r+0x260>
  808f7c:	2109883a 	add	r4,r4,r4
  808f80:	3904703a 	and	r2,r7,r4
  808f84:	63000104 	addi	r12,r12,4
  808f88:	103ffc26 	beq	r2,zero,808f7c <_malloc_r+0x6dc>
  808f8c:	6013883a 	mov	r9,r12
  808f90:	003edb06 	br	808b00 <_malloc_r+0x260>
  808f94:	00805504 	movi	r2,340
  808f98:	11000836 	bltu	r2,r4,808fbc <_malloc_r+0x71c>
  808f9c:	2804d3fa 	srli	r2,r5,15
  808fa0:	11001dc4 	addi	r4,r2,119
  808fa4:	200690fa 	slli	r3,r4,3
  808fa8:	003f7306 	br	808d78 <_malloc_r+0x4d8>
  808fac:	0104303a 	nor	r2,zero,r4
  808fb0:	388e703a 	and	r7,r7,r2
  808fb4:	e1c00115 	stw	r7,4(fp)
  808fb8:	003fe906 	br	808f60 <_malloc_r+0x6c0>
  808fbc:	00815504 	movi	r2,1364
  808fc0:	1100032e 	bgeu	r2,r4,808fd0 <_malloc_r+0x730>
  808fc4:	01001f84 	movi	r4,126
  808fc8:	00c0fc04 	movi	r3,1008
  808fcc:	003f6a06 	br	808d78 <_malloc_r+0x4d8>
  808fd0:	2804d4ba 	srli	r2,r5,18
  808fd4:	11001f04 	addi	r4,r2,124
  808fd8:	200690fa 	slli	r3,r4,3
  808fdc:	003f6606 	br	808d78 <_malloc_r+0x4d8>

00808fe0 <memchr>:
  808fe0:	008000c4 	movi	r2,3
  808fe4:	29403fcc 	andi	r5,r5,255
  808fe8:	2007883a 	mov	r3,r4
  808fec:	1180022e 	bgeu	r2,r6,808ff8 <memchr+0x18>
  808ff0:	2084703a 	and	r2,r4,r2
  808ff4:	10000b26 	beq	r2,zero,809024 <memchr+0x44>
  808ff8:	313fffc4 	addi	r4,r6,-1
  808ffc:	3000051e 	bne	r6,zero,809014 <memchr+0x34>
  809000:	00002c06 	br	8090b4 <memchr+0xd4>
  809004:	213fffc4 	addi	r4,r4,-1
  809008:	00bfffc4 	movi	r2,-1
  80900c:	18c00044 	addi	r3,r3,1
  809010:	20802826 	beq	r4,r2,8090b4 <memchr+0xd4>
  809014:	18800003 	ldbu	r2,0(r3)
  809018:	28bffa1e 	bne	r5,r2,809004 <memchr+0x24>
  80901c:	1805883a 	mov	r2,r3
  809020:	f800283a 	ret
  809024:	0011883a 	mov	r8,zero
  809028:	0007883a 	mov	r3,zero
  80902c:	01c00104 	movi	r7,4
  809030:	4004923a 	slli	r2,r8,8
  809034:	18c00044 	addi	r3,r3,1
  809038:	1151883a 	add	r8,r2,r5
  80903c:	19fffc1e 	bne	r3,r7,809030 <memchr+0x50>
  809040:	02bfbff4 	movhi	r10,65279
  809044:	52bfbfc4 	addi	r10,r10,-257
  809048:	02602074 	movhi	r9,32897
  80904c:	4a602004 	addi	r9,r9,-32640
  809050:	02c000c4 	movi	r11,3
  809054:	20800017 	ldw	r2,0(r4)
  809058:	31bfff04 	addi	r6,r6,-4
  80905c:	200f883a 	mov	r7,r4
  809060:	1204f03a 	xor	r2,r2,r8
  809064:	1287883a 	add	r3,r2,r10
  809068:	1a46703a 	and	r3,r3,r9
  80906c:	0084303a 	nor	r2,zero,r2
  809070:	10c4703a 	and	r2,r2,r3
  809074:	10000b26 	beq	r2,zero,8090a4 <memchr+0xc4>
  809078:	20800003 	ldbu	r2,0(r4)
  80907c:	28800f26 	beq	r5,r2,8090bc <memchr+0xdc>
  809080:	20800043 	ldbu	r2,1(r4)
  809084:	21c00044 	addi	r7,r4,1
  809088:	28800c26 	beq	r5,r2,8090bc <memchr+0xdc>
  80908c:	20800083 	ldbu	r2,2(r4)
  809090:	21c00084 	addi	r7,r4,2
  809094:	28800926 	beq	r5,r2,8090bc <memchr+0xdc>
  809098:	208000c3 	ldbu	r2,3(r4)
  80909c:	21c000c4 	addi	r7,r4,3
  8090a0:	28800626 	beq	r5,r2,8090bc <memchr+0xdc>
  8090a4:	21000104 	addi	r4,r4,4
  8090a8:	59bfea36 	bltu	r11,r6,809054 <memchr+0x74>
  8090ac:	2007883a 	mov	r3,r4
  8090b0:	003fd106 	br	808ff8 <memchr+0x18>
  8090b4:	0005883a 	mov	r2,zero
  8090b8:	f800283a 	ret
  8090bc:	3805883a 	mov	r2,r7
  8090c0:	f800283a 	ret

008090c4 <memcpy>:
  8090c4:	01c003c4 	movi	r7,15
  8090c8:	2007883a 	mov	r3,r4
  8090cc:	3980032e 	bgeu	r7,r6,8090dc <memcpy+0x18>
  8090d0:	2904b03a 	or	r2,r5,r4
  8090d4:	108000cc 	andi	r2,r2,3
  8090d8:	10000926 	beq	r2,zero,809100 <memcpy+0x3c>
  8090dc:	30000626 	beq	r6,zero,8090f8 <memcpy+0x34>
  8090e0:	30cd883a 	add	r6,r6,r3
  8090e4:	28800003 	ldbu	r2,0(r5)
  8090e8:	29400044 	addi	r5,r5,1
  8090ec:	18800005 	stb	r2,0(r3)
  8090f0:	18c00044 	addi	r3,r3,1
  8090f4:	30fffb1e 	bne	r6,r3,8090e4 <memcpy+0x20>
  8090f8:	2005883a 	mov	r2,r4
  8090fc:	f800283a 	ret
  809100:	3811883a 	mov	r8,r7
  809104:	200f883a 	mov	r7,r4
  809108:	28c00017 	ldw	r3,0(r5)
  80910c:	31bffc04 	addi	r6,r6,-16
  809110:	38c00015 	stw	r3,0(r7)
  809114:	28800117 	ldw	r2,4(r5)
  809118:	38800115 	stw	r2,4(r7)
  80911c:	28c00217 	ldw	r3,8(r5)
  809120:	38c00215 	stw	r3,8(r7)
  809124:	28800317 	ldw	r2,12(r5)
  809128:	29400404 	addi	r5,r5,16
  80912c:	38800315 	stw	r2,12(r7)
  809130:	39c00404 	addi	r7,r7,16
  809134:	41bff436 	bltu	r8,r6,809108 <memcpy+0x44>
  809138:	008000c4 	movi	r2,3
  80913c:	1180072e 	bgeu	r2,r6,80915c <memcpy+0x98>
  809140:	1007883a 	mov	r3,r2
  809144:	28800017 	ldw	r2,0(r5)
  809148:	31bfff04 	addi	r6,r6,-4
  80914c:	29400104 	addi	r5,r5,4
  809150:	38800015 	stw	r2,0(r7)
  809154:	39c00104 	addi	r7,r7,4
  809158:	19bffa36 	bltu	r3,r6,809144 <memcpy+0x80>
  80915c:	3807883a 	mov	r3,r7
  809160:	003fde06 	br	8090dc <memcpy+0x18>

00809164 <memmove>:
  809164:	2807883a 	mov	r3,r5
  809168:	2011883a 	mov	r8,r4
  80916c:	29000c2e 	bgeu	r5,r4,8091a0 <memmove+0x3c>
  809170:	298f883a 	add	r7,r5,r6
  809174:	21c00a2e 	bgeu	r4,r7,8091a0 <memmove+0x3c>
  809178:	30000726 	beq	r6,zero,809198 <memmove+0x34>
  80917c:	2187883a 	add	r3,r4,r6
  809180:	198dc83a 	sub	r6,r3,r6
  809184:	39ffffc4 	addi	r7,r7,-1
  809188:	38800003 	ldbu	r2,0(r7)
  80918c:	18ffffc4 	addi	r3,r3,-1
  809190:	18800005 	stb	r2,0(r3)
  809194:	19bffb1e 	bne	r3,r6,809184 <memmove+0x20>
  809198:	2005883a 	mov	r2,r4
  80919c:	f800283a 	ret
  8091a0:	01c003c4 	movi	r7,15
  8091a4:	39800a36 	bltu	r7,r6,8091d0 <memmove+0x6c>
  8091a8:	303ffb26 	beq	r6,zero,809198 <memmove+0x34>
  8091ac:	400f883a 	mov	r7,r8
  8091b0:	320d883a 	add	r6,r6,r8
  8091b4:	28800003 	ldbu	r2,0(r5)
  8091b8:	29400044 	addi	r5,r5,1
  8091bc:	38800005 	stb	r2,0(r7)
  8091c0:	39c00044 	addi	r7,r7,1
  8091c4:	39bffb1e 	bne	r7,r6,8091b4 <memmove+0x50>
  8091c8:	2005883a 	mov	r2,r4
  8091cc:	f800283a 	ret
  8091d0:	1904b03a 	or	r2,r3,r4
  8091d4:	108000cc 	andi	r2,r2,3
  8091d8:	103ff31e 	bne	r2,zero,8091a8 <memmove+0x44>
  8091dc:	3811883a 	mov	r8,r7
  8091e0:	180b883a 	mov	r5,r3
  8091e4:	200f883a 	mov	r7,r4
  8091e8:	28c00017 	ldw	r3,0(r5)
  8091ec:	31bffc04 	addi	r6,r6,-16
  8091f0:	38c00015 	stw	r3,0(r7)
  8091f4:	28800117 	ldw	r2,4(r5)
  8091f8:	38800115 	stw	r2,4(r7)
  8091fc:	28c00217 	ldw	r3,8(r5)
  809200:	38c00215 	stw	r3,8(r7)
  809204:	28800317 	ldw	r2,12(r5)
  809208:	29400404 	addi	r5,r5,16
  80920c:	38800315 	stw	r2,12(r7)
  809210:	39c00404 	addi	r7,r7,16
  809214:	41bff436 	bltu	r8,r6,8091e8 <memmove+0x84>
  809218:	008000c4 	movi	r2,3
  80921c:	1180072e 	bgeu	r2,r6,80923c <memmove+0xd8>
  809220:	1007883a 	mov	r3,r2
  809224:	28800017 	ldw	r2,0(r5)
  809228:	31bfff04 	addi	r6,r6,-4
  80922c:	29400104 	addi	r5,r5,4
  809230:	38800015 	stw	r2,0(r7)
  809234:	39c00104 	addi	r7,r7,4
  809238:	19bffa36 	bltu	r3,r6,809224 <memmove+0xc0>
  80923c:	3811883a 	mov	r8,r7
  809240:	003fd906 	br	8091a8 <memmove+0x44>

00809244 <memset>:
  809244:	008000c4 	movi	r2,3
  809248:	29403fcc 	andi	r5,r5,255
  80924c:	2007883a 	mov	r3,r4
  809250:	1180022e 	bgeu	r2,r6,80925c <memset+0x18>
  809254:	2084703a 	and	r2,r4,r2
  809258:	10000826 	beq	r2,zero,80927c <memset+0x38>
  80925c:	30000526 	beq	r6,zero,809274 <memset+0x30>
  809260:	2805883a 	mov	r2,r5
  809264:	30cd883a 	add	r6,r6,r3
  809268:	18800005 	stb	r2,0(r3)
  80926c:	18c00044 	addi	r3,r3,1
  809270:	19bffd1e 	bne	r3,r6,809268 <memset+0x24>
  809274:	2005883a 	mov	r2,r4
  809278:	f800283a 	ret
  80927c:	2804923a 	slli	r2,r5,8
  809280:	020003c4 	movi	r8,15
  809284:	200f883a 	mov	r7,r4
  809288:	2884b03a 	or	r2,r5,r2
  80928c:	1006943a 	slli	r3,r2,16
  809290:	10c6b03a 	or	r3,r2,r3
  809294:	41800a2e 	bgeu	r8,r6,8092c0 <memset+0x7c>
  809298:	4005883a 	mov	r2,r8
  80929c:	31bffc04 	addi	r6,r6,-16
  8092a0:	38c00015 	stw	r3,0(r7)
  8092a4:	38c00115 	stw	r3,4(r7)
  8092a8:	38c00215 	stw	r3,8(r7)
  8092ac:	38c00315 	stw	r3,12(r7)
  8092b0:	39c00404 	addi	r7,r7,16
  8092b4:	11bff936 	bltu	r2,r6,80929c <memset+0x58>
  8092b8:	008000c4 	movi	r2,3
  8092bc:	1180052e 	bgeu	r2,r6,8092d4 <memset+0x90>
  8092c0:	31bfff04 	addi	r6,r6,-4
  8092c4:	008000c4 	movi	r2,3
  8092c8:	38c00015 	stw	r3,0(r7)
  8092cc:	39c00104 	addi	r7,r7,4
  8092d0:	11bffb36 	bltu	r2,r6,8092c0 <memset+0x7c>
  8092d4:	3807883a 	mov	r3,r7
  8092d8:	003fe006 	br	80925c <memset+0x18>

008092dc <_Bfree>:
  8092dc:	28000826 	beq	r5,zero,809300 <_Bfree+0x24>
  8092e0:	28800117 	ldw	r2,4(r5)
  8092e4:	21001317 	ldw	r4,76(r4)
  8092e8:	1085883a 	add	r2,r2,r2
  8092ec:	1085883a 	add	r2,r2,r2
  8092f0:	1105883a 	add	r2,r2,r4
  8092f4:	10c00017 	ldw	r3,0(r2)
  8092f8:	28c00015 	stw	r3,0(r5)
  8092fc:	11400015 	stw	r5,0(r2)
  809300:	f800283a 	ret

00809304 <__hi0bits>:
  809304:	20bfffec 	andhi	r2,r4,65535
  809308:	10001426 	beq	r2,zero,80935c <__hi0bits+0x58>
  80930c:	0007883a 	mov	r3,zero
  809310:	20bfc02c 	andhi	r2,r4,65280
  809314:	1000021e 	bne	r2,zero,809320 <__hi0bits+0x1c>
  809318:	2008923a 	slli	r4,r4,8
  80931c:	18c00204 	addi	r3,r3,8
  809320:	20bc002c 	andhi	r2,r4,61440
  809324:	1000021e 	bne	r2,zero,809330 <__hi0bits+0x2c>
  809328:	2008913a 	slli	r4,r4,4
  80932c:	18c00104 	addi	r3,r3,4
  809330:	20b0002c 	andhi	r2,r4,49152
  809334:	1000031e 	bne	r2,zero,809344 <__hi0bits+0x40>
  809338:	2105883a 	add	r2,r4,r4
  80933c:	18c00084 	addi	r3,r3,2
  809340:	1089883a 	add	r4,r2,r2
  809344:	20000316 	blt	r4,zero,809354 <__hi0bits+0x50>
  809348:	2090002c 	andhi	r2,r4,16384
  80934c:	10000626 	beq	r2,zero,809368 <__hi0bits+0x64>
  809350:	18c00044 	addi	r3,r3,1
  809354:	1805883a 	mov	r2,r3
  809358:	f800283a 	ret
  80935c:	2008943a 	slli	r4,r4,16
  809360:	00c00404 	movi	r3,16
  809364:	003fea06 	br	809310 <__hi0bits+0xc>
  809368:	00c00804 	movi	r3,32
  80936c:	1805883a 	mov	r2,r3
  809370:	f800283a 	ret

00809374 <__lo0bits>:
  809374:	20c00017 	ldw	r3,0(r4)
  809378:	188001cc 	andi	r2,r3,7
  80937c:	10000a26 	beq	r2,zero,8093a8 <__lo0bits+0x34>
  809380:	1880004c 	andi	r2,r3,1
  809384:	1005003a 	cmpeq	r2,r2,zero
  809388:	10002126 	beq	r2,zero,809410 <__lo0bits+0x9c>
  80938c:	1880008c 	andi	r2,r3,2
  809390:	1000251e 	bne	r2,zero,809428 <__lo0bits+0xb4>
  809394:	1804d0ba 	srli	r2,r3,2
  809398:	01400084 	movi	r5,2
  80939c:	20800015 	stw	r2,0(r4)
  8093a0:	2805883a 	mov	r2,r5
  8093a4:	f800283a 	ret
  8093a8:	18bfffcc 	andi	r2,r3,65535
  8093ac:	10001526 	beq	r2,zero,809404 <__lo0bits+0x90>
  8093b0:	000b883a 	mov	r5,zero
  8093b4:	18803fcc 	andi	r2,r3,255
  8093b8:	1000021e 	bne	r2,zero,8093c4 <__lo0bits+0x50>
  8093bc:	1806d23a 	srli	r3,r3,8
  8093c0:	29400204 	addi	r5,r5,8
  8093c4:	188003cc 	andi	r2,r3,15
  8093c8:	1000021e 	bne	r2,zero,8093d4 <__lo0bits+0x60>
  8093cc:	1806d13a 	srli	r3,r3,4
  8093d0:	29400104 	addi	r5,r5,4
  8093d4:	188000cc 	andi	r2,r3,3
  8093d8:	1000021e 	bne	r2,zero,8093e4 <__lo0bits+0x70>
  8093dc:	1806d0ba 	srli	r3,r3,2
  8093e0:	29400084 	addi	r5,r5,2
  8093e4:	1880004c 	andi	r2,r3,1
  8093e8:	1000031e 	bne	r2,zero,8093f8 <__lo0bits+0x84>
  8093ec:	1806d07a 	srli	r3,r3,1
  8093f0:	18000a26 	beq	r3,zero,80941c <__lo0bits+0xa8>
  8093f4:	29400044 	addi	r5,r5,1
  8093f8:	2805883a 	mov	r2,r5
  8093fc:	20c00015 	stw	r3,0(r4)
  809400:	f800283a 	ret
  809404:	1806d43a 	srli	r3,r3,16
  809408:	01400404 	movi	r5,16
  80940c:	003fe906 	br	8093b4 <__lo0bits+0x40>
  809410:	000b883a 	mov	r5,zero
  809414:	2805883a 	mov	r2,r5
  809418:	f800283a 	ret
  80941c:	01400804 	movi	r5,32
  809420:	2805883a 	mov	r2,r5
  809424:	f800283a 	ret
  809428:	1804d07a 	srli	r2,r3,1
  80942c:	01400044 	movi	r5,1
  809430:	20800015 	stw	r2,0(r4)
  809434:	003fda06 	br	8093a0 <__lo0bits+0x2c>

00809438 <__mcmp>:
  809438:	20800417 	ldw	r2,16(r4)
  80943c:	28c00417 	ldw	r3,16(r5)
  809440:	10cfc83a 	sub	r7,r2,r3
  809444:	38000c1e 	bne	r7,zero,809478 <__mcmp+0x40>
  809448:	18c5883a 	add	r2,r3,r3
  80944c:	1085883a 	add	r2,r2,r2
  809450:	10c00504 	addi	r3,r2,20
  809454:	21000504 	addi	r4,r4,20
  809458:	28cb883a 	add	r5,r5,r3
  80945c:	2085883a 	add	r2,r4,r2
  809460:	10bfff04 	addi	r2,r2,-4
  809464:	297fff04 	addi	r5,r5,-4
  809468:	11800017 	ldw	r6,0(r2)
  80946c:	28c00017 	ldw	r3,0(r5)
  809470:	30c0031e 	bne	r6,r3,809480 <__mcmp+0x48>
  809474:	20bffa36 	bltu	r4,r2,809460 <__mcmp+0x28>
  809478:	3805883a 	mov	r2,r7
  80947c:	f800283a 	ret
  809480:	30c00336 	bltu	r6,r3,809490 <__mcmp+0x58>
  809484:	01c00044 	movi	r7,1
  809488:	3805883a 	mov	r2,r7
  80948c:	f800283a 	ret
  809490:	01ffffc4 	movi	r7,-1
  809494:	003ff806 	br	809478 <__mcmp+0x40>

00809498 <__ulp>:
  809498:	295ffc2c 	andhi	r5,r5,32752
  80949c:	013f3034 	movhi	r4,64704
  8094a0:	290b883a 	add	r5,r5,r4
  8094a4:	0145c83a 	sub	r2,zero,r5
  8094a8:	1007d53a 	srai	r3,r2,20
  8094ac:	000d883a 	mov	r6,zero
  8094b0:	0140040e 	bge	zero,r5,8094c4 <__ulp+0x2c>
  8094b4:	280f883a 	mov	r7,r5
  8094b8:	3807883a 	mov	r3,r7
  8094bc:	3005883a 	mov	r2,r6
  8094c0:	f800283a 	ret
  8094c4:	008004c4 	movi	r2,19
  8094c8:	193ffb04 	addi	r4,r3,-20
  8094cc:	10c00c0e 	bge	r2,r3,809500 <__ulp+0x68>
  8094d0:	008007c4 	movi	r2,31
  8094d4:	1107c83a 	sub	r3,r2,r4
  8094d8:	00800784 	movi	r2,30
  8094dc:	01400044 	movi	r5,1
  8094e0:	11000216 	blt	r2,r4,8094ec <__ulp+0x54>
  8094e4:	00800044 	movi	r2,1
  8094e8:	10ca983a 	sll	r5,r2,r3
  8094ec:	000f883a 	mov	r7,zero
  8094f0:	280d883a 	mov	r6,r5
  8094f4:	3807883a 	mov	r3,r7
  8094f8:	3005883a 	mov	r2,r6
  8094fc:	f800283a 	ret
  809500:	00800234 	movhi	r2,8
  809504:	10cfd83a 	sra	r7,r2,r3
  809508:	000d883a 	mov	r6,zero
  80950c:	3005883a 	mov	r2,r6
  809510:	3807883a 	mov	r3,r7
  809514:	f800283a 	ret

00809518 <__b2d>:
  809518:	20800417 	ldw	r2,16(r4)
  80951c:	defff904 	addi	sp,sp,-28
  809520:	dd000415 	stw	r20,16(sp)
  809524:	1085883a 	add	r2,r2,r2
  809528:	25000504 	addi	r20,r4,20
  80952c:	1085883a 	add	r2,r2,r2
  809530:	dc000015 	stw	r16,0(sp)
  809534:	a0a1883a 	add	r16,r20,r2
  809538:	dd400515 	stw	r21,20(sp)
  80953c:	857fff17 	ldw	r21,-4(r16)
  809540:	dc400115 	stw	r17,4(sp)
  809544:	dfc00615 	stw	ra,24(sp)
  809548:	a809883a 	mov	r4,r21
  80954c:	2823883a 	mov	r17,r5
  809550:	dcc00315 	stw	r19,12(sp)
  809554:	dc800215 	stw	r18,8(sp)
  809558:	08093040 	call	809304 <__hi0bits>
  80955c:	100b883a 	mov	r5,r2
  809560:	00800804 	movi	r2,32
  809564:	1145c83a 	sub	r2,r2,r5
  809568:	88800015 	stw	r2,0(r17)
  80956c:	00800284 	movi	r2,10
  809570:	80ffff04 	addi	r3,r16,-4
  809574:	11401416 	blt	r2,r5,8095c8 <__b2d+0xb0>
  809578:	008002c4 	movi	r2,11
  80957c:	1149c83a 	sub	r4,r2,r5
  809580:	a0c02736 	bltu	r20,r3,809620 <__b2d+0x108>
  809584:	000d883a 	mov	r6,zero
  809588:	28800544 	addi	r2,r5,21
  80958c:	a906d83a 	srl	r3,r21,r4
  809590:	a884983a 	sll	r2,r21,r2
  809594:	1ccffc34 	orhi	r19,r3,16368
  809598:	11a4b03a 	or	r18,r2,r6
  80959c:	9005883a 	mov	r2,r18
  8095a0:	9807883a 	mov	r3,r19
  8095a4:	dfc00617 	ldw	ra,24(sp)
  8095a8:	dd400517 	ldw	r21,20(sp)
  8095ac:	dd000417 	ldw	r20,16(sp)
  8095b0:	dcc00317 	ldw	r19,12(sp)
  8095b4:	dc800217 	ldw	r18,8(sp)
  8095b8:	dc400117 	ldw	r17,4(sp)
  8095bc:	dc000017 	ldw	r16,0(sp)
  8095c0:	dec00704 	addi	sp,sp,28
  8095c4:	f800283a 	ret
  8095c8:	a0c00e36 	bltu	r20,r3,809604 <__b2d+0xec>
  8095cc:	293ffd44 	addi	r4,r5,-11
  8095d0:	000d883a 	mov	r6,zero
  8095d4:	20000f26 	beq	r4,zero,809614 <__b2d+0xfc>
  8095d8:	00800804 	movi	r2,32
  8095dc:	110bc83a 	sub	r5,r2,r4
  8095e0:	a0c01236 	bltu	r20,r3,80962c <__b2d+0x114>
  8095e4:	000f883a 	mov	r7,zero
  8095e8:	a904983a 	sll	r2,r21,r4
  8095ec:	3146d83a 	srl	r3,r6,r5
  8095f0:	3108983a 	sll	r4,r6,r4
  8095f4:	108ffc34 	orhi	r2,r2,16368
  8095f8:	18a6b03a 	or	r19,r3,r2
  8095fc:	3924b03a 	or	r18,r7,r4
  809600:	003fe606 	br	80959c <__b2d+0x84>
  809604:	293ffd44 	addi	r4,r5,-11
  809608:	81bffe17 	ldw	r6,-8(r16)
  80960c:	80fffe04 	addi	r3,r16,-8
  809610:	203ff11e 	bne	r4,zero,8095d8 <__b2d+0xc0>
  809614:	accffc34 	orhi	r19,r21,16368
  809618:	3025883a 	mov	r18,r6
  80961c:	003fdf06 	br	80959c <__b2d+0x84>
  809620:	18bfff17 	ldw	r2,-4(r3)
  809624:	110cd83a 	srl	r6,r2,r4
  809628:	003fd706 	br	809588 <__b2d+0x70>
  80962c:	18bfff17 	ldw	r2,-4(r3)
  809630:	114ed83a 	srl	r7,r2,r5
  809634:	003fec06 	br	8095e8 <__b2d+0xd0>

00809638 <__ratio>:
  809638:	defff904 	addi	sp,sp,-28
  80963c:	dc400215 	stw	r17,8(sp)
  809640:	2823883a 	mov	r17,r5
  809644:	d80b883a 	mov	r5,sp
  809648:	dfc00615 	stw	ra,24(sp)
  80964c:	dd000515 	stw	r20,20(sp)
  809650:	dcc00415 	stw	r19,16(sp)
  809654:	dc800315 	stw	r18,12(sp)
  809658:	2025883a 	mov	r18,r4
  80965c:	08095180 	call	809518 <__b2d>
  809660:	8809883a 	mov	r4,r17
  809664:	d9400104 	addi	r5,sp,4
  809668:	1027883a 	mov	r19,r2
  80966c:	1829883a 	mov	r20,r3
  809670:	08095180 	call	809518 <__b2d>
  809674:	89000417 	ldw	r4,16(r17)
  809678:	91c00417 	ldw	r7,16(r18)
  80967c:	d9800117 	ldw	r6,4(sp)
  809680:	180b883a 	mov	r5,r3
  809684:	390fc83a 	sub	r7,r7,r4
  809688:	1009883a 	mov	r4,r2
  80968c:	d8800017 	ldw	r2,0(sp)
  809690:	380e917a 	slli	r7,r7,5
  809694:	2011883a 	mov	r8,r4
  809698:	1185c83a 	sub	r2,r2,r6
  80969c:	11c5883a 	add	r2,r2,r7
  8096a0:	1006953a 	slli	r3,r2,20
  8096a4:	2813883a 	mov	r9,r5
  8096a8:	00800d0e 	bge	zero,r2,8096e0 <__ratio+0xa8>
  8096ac:	1d29883a 	add	r20,r3,r20
  8096b0:	a00b883a 	mov	r5,r20
  8096b4:	480f883a 	mov	r7,r9
  8096b8:	9809883a 	mov	r4,r19
  8096bc:	400d883a 	mov	r6,r8
  8096c0:	0802f940 	call	802f94 <__divdf3>
  8096c4:	dfc00617 	ldw	ra,24(sp)
  8096c8:	dd000517 	ldw	r20,20(sp)
  8096cc:	dcc00417 	ldw	r19,16(sp)
  8096d0:	dc800317 	ldw	r18,12(sp)
  8096d4:	dc400217 	ldw	r17,8(sp)
  8096d8:	dec00704 	addi	sp,sp,28
  8096dc:	f800283a 	ret
  8096e0:	28d3c83a 	sub	r9,r5,r3
  8096e4:	003ff206 	br	8096b0 <__ratio+0x78>

008096e8 <_mprec_log10>:
  8096e8:	defffe04 	addi	sp,sp,-8
  8096ec:	008005c4 	movi	r2,23
  8096f0:	dc000015 	stw	r16,0(sp)
  8096f4:	dfc00115 	stw	ra,4(sp)
  8096f8:	2021883a 	mov	r16,r4
  8096fc:	11000c16 	blt	r2,r4,809730 <_mprec_log10+0x48>
  809700:	200490fa 	slli	r2,r4,3
  809704:	00c02074 	movhi	r3,129
  809708:	18c7f504 	addi	r3,r3,8148
  80970c:	10c5883a 	add	r2,r2,r3
  809710:	12400117 	ldw	r9,4(r2)
  809714:	12000017 	ldw	r8,0(r2)
  809718:	4807883a 	mov	r3,r9
  80971c:	4005883a 	mov	r2,r8
  809720:	dfc00117 	ldw	ra,4(sp)
  809724:	dc000017 	ldw	r16,0(sp)
  809728:	dec00204 	addi	sp,sp,8
  80972c:	f800283a 	ret
  809730:	0011883a 	mov	r8,zero
  809734:	024ffc34 	movhi	r9,16368
  809738:	0005883a 	mov	r2,zero
  80973c:	00d00934 	movhi	r3,16420
  809740:	480b883a 	mov	r5,r9
  809744:	4009883a 	mov	r4,r8
  809748:	180f883a 	mov	r7,r3
  80974c:	100d883a 	mov	r6,r2
  809750:	080bbcc0 	call	80bbcc <__muldf3>
  809754:	843fffc4 	addi	r16,r16,-1
  809758:	1011883a 	mov	r8,r2
  80975c:	1813883a 	mov	r9,r3
  809760:	803ff51e 	bne	r16,zero,809738 <_mprec_log10+0x50>
  809764:	4005883a 	mov	r2,r8
  809768:	4807883a 	mov	r3,r9
  80976c:	dfc00117 	ldw	ra,4(sp)
  809770:	dc000017 	ldw	r16,0(sp)
  809774:	dec00204 	addi	sp,sp,8
  809778:	f800283a 	ret

0080977c <__copybits>:
  80977c:	297fffc4 	addi	r5,r5,-1
  809780:	30800417 	ldw	r2,16(r6)
  809784:	280bd17a 	srai	r5,r5,5
  809788:	31800504 	addi	r6,r6,20
  80978c:	1085883a 	add	r2,r2,r2
  809790:	294b883a 	add	r5,r5,r5
  809794:	294b883a 	add	r5,r5,r5
  809798:	1085883a 	add	r2,r2,r2
  80979c:	290b883a 	add	r5,r5,r4
  8097a0:	3087883a 	add	r3,r6,r2
  8097a4:	29400104 	addi	r5,r5,4
  8097a8:	30c0052e 	bgeu	r6,r3,8097c0 <__copybits+0x44>
  8097ac:	30800017 	ldw	r2,0(r6)
  8097b0:	31800104 	addi	r6,r6,4
  8097b4:	20800015 	stw	r2,0(r4)
  8097b8:	21000104 	addi	r4,r4,4
  8097bc:	30fffb36 	bltu	r6,r3,8097ac <__copybits+0x30>
  8097c0:	2140032e 	bgeu	r4,r5,8097d0 <__copybits+0x54>
  8097c4:	20000015 	stw	zero,0(r4)
  8097c8:	21000104 	addi	r4,r4,4
  8097cc:	217ffd36 	bltu	r4,r5,8097c4 <__copybits+0x48>
  8097d0:	f800283a 	ret

008097d4 <__any_on>:
  8097d4:	20800417 	ldw	r2,16(r4)
  8097d8:	2807d17a 	srai	r3,r5,5
  8097dc:	21000504 	addi	r4,r4,20
  8097e0:	10c00d0e 	bge	r2,r3,809818 <__any_on+0x44>
  8097e4:	1085883a 	add	r2,r2,r2
  8097e8:	1085883a 	add	r2,r2,r2
  8097ec:	208d883a 	add	r6,r4,r2
  8097f0:	2180182e 	bgeu	r4,r6,809854 <__any_on+0x80>
  8097f4:	30bfff17 	ldw	r2,-4(r6)
  8097f8:	30ffff04 	addi	r3,r6,-4
  8097fc:	1000041e 	bne	r2,zero,809810 <__any_on+0x3c>
  809800:	20c0142e 	bgeu	r4,r3,809854 <__any_on+0x80>
  809804:	18ffff04 	addi	r3,r3,-4
  809808:	18800017 	ldw	r2,0(r3)
  80980c:	103ffc26 	beq	r2,zero,809800 <__any_on+0x2c>
  809810:	00800044 	movi	r2,1
  809814:	f800283a 	ret
  809818:	18800a0e 	bge	r3,r2,809844 <__any_on+0x70>
  80981c:	294007cc 	andi	r5,r5,31
  809820:	28000826 	beq	r5,zero,809844 <__any_on+0x70>
  809824:	18c5883a 	add	r2,r3,r3
  809828:	1085883a 	add	r2,r2,r2
  80982c:	208d883a 	add	r6,r4,r2
  809830:	30c00017 	ldw	r3,0(r6)
  809834:	1944d83a 	srl	r2,r3,r5
  809838:	1144983a 	sll	r2,r2,r5
  80983c:	18bff41e 	bne	r3,r2,809810 <__any_on+0x3c>
  809840:	003feb06 	br	8097f0 <__any_on+0x1c>
  809844:	18c5883a 	add	r2,r3,r3
  809848:	1085883a 	add	r2,r2,r2
  80984c:	208d883a 	add	r6,r4,r2
  809850:	003fe706 	br	8097f0 <__any_on+0x1c>
  809854:	0005883a 	mov	r2,zero
  809858:	f800283a 	ret

0080985c <_Balloc>:
  80985c:	20c01317 	ldw	r3,76(r4)
  809860:	defffb04 	addi	sp,sp,-20
  809864:	dcc00315 	stw	r19,12(sp)
  809868:	dc800215 	stw	r18,8(sp)
  80986c:	dfc00415 	stw	ra,16(sp)
  809870:	2825883a 	mov	r18,r5
  809874:	dc400115 	stw	r17,4(sp)
  809878:	dc000015 	stw	r16,0(sp)
  80987c:	2027883a 	mov	r19,r4
  809880:	01800404 	movi	r6,16
  809884:	01400104 	movi	r5,4
  809888:	18001726 	beq	r3,zero,8098e8 <_Balloc+0x8c>
  80988c:	01400044 	movi	r5,1
  809890:	9485883a 	add	r2,r18,r18
  809894:	2ca2983a 	sll	r17,r5,r18
  809898:	1085883a 	add	r2,r2,r2
  80989c:	10c7883a 	add	r3,r2,r3
  8098a0:	1c000017 	ldw	r16,0(r3)
  8098a4:	8c4d883a 	add	r6,r17,r17
  8098a8:	318d883a 	add	r6,r6,r6
  8098ac:	9809883a 	mov	r4,r19
  8098b0:	31800504 	addi	r6,r6,20
  8098b4:	80001226 	beq	r16,zero,809900 <_Balloc+0xa4>
  8098b8:	80800017 	ldw	r2,0(r16)
  8098bc:	18800015 	stw	r2,0(r3)
  8098c0:	80000415 	stw	zero,16(r16)
  8098c4:	80000315 	stw	zero,12(r16)
  8098c8:	8005883a 	mov	r2,r16
  8098cc:	dfc00417 	ldw	ra,16(sp)
  8098d0:	dcc00317 	ldw	r19,12(sp)
  8098d4:	dc800217 	ldw	r18,8(sp)
  8098d8:	dc400117 	ldw	r17,4(sp)
  8098dc:	dc000017 	ldw	r16,0(sp)
  8098e0:	dec00504 	addi	sp,sp,20
  8098e4:	f800283a 	ret
  8098e8:	080ac240 	call	80ac24 <_calloc_r>
  8098ec:	1007883a 	mov	r3,r2
  8098f0:	0021883a 	mov	r16,zero
  8098f4:	98801315 	stw	r2,76(r19)
  8098f8:	103fe41e 	bne	r2,zero,80988c <_Balloc+0x30>
  8098fc:	003ff206 	br	8098c8 <_Balloc+0x6c>
  809900:	080ac240 	call	80ac24 <_calloc_r>
  809904:	103ff026 	beq	r2,zero,8098c8 <_Balloc+0x6c>
  809908:	1021883a 	mov	r16,r2
  80990c:	14800115 	stw	r18,4(r2)
  809910:	14400215 	stw	r17,8(r2)
  809914:	003fea06 	br	8098c0 <_Balloc+0x64>

00809918 <__d2b>:
  809918:	defff504 	addi	sp,sp,-44
  80991c:	dcc00515 	stw	r19,20(sp)
  809920:	04c00044 	movi	r19,1
  809924:	dc000215 	stw	r16,8(sp)
  809928:	2821883a 	mov	r16,r5
  80992c:	980b883a 	mov	r5,r19
  809930:	ddc00915 	stw	r23,36(sp)
  809934:	dd800815 	stw	r22,32(sp)
  809938:	dd400715 	stw	r21,28(sp)
  80993c:	dd000615 	stw	r20,24(sp)
  809940:	dc800415 	stw	r18,16(sp)
  809944:	dc400315 	stw	r17,12(sp)
  809948:	dfc00a15 	stw	ra,40(sp)
  80994c:	3023883a 	mov	r17,r6
  809950:	382d883a 	mov	r22,r7
  809954:	ddc00b17 	ldw	r23,44(sp)
  809958:	080985c0 	call	80985c <_Balloc>
  80995c:	1025883a 	mov	r18,r2
  809960:	00a00034 	movhi	r2,32768
  809964:	10bfffc4 	addi	r2,r2,-1
  809968:	8888703a 	and	r4,r17,r2
  80996c:	202ad53a 	srli	r21,r4,20
  809970:	00800434 	movhi	r2,16
  809974:	10bfffc4 	addi	r2,r2,-1
  809978:	8886703a 	and	r3,r17,r2
  80997c:	a829003a 	cmpeq	r20,r21,zero
  809980:	800b883a 	mov	r5,r16
  809984:	d8c00115 	stw	r3,4(sp)
  809988:	94000504 	addi	r16,r18,20
  80998c:	a000021e 	bne	r20,zero,809998 <__d2b+0x80>
  809990:	18c00434 	orhi	r3,r3,16
  809994:	d8c00115 	stw	r3,4(sp)
  809998:	28002726 	beq	r5,zero,809a38 <__d2b+0x120>
  80999c:	d809883a 	mov	r4,sp
  8099a0:	d9400015 	stw	r5,0(sp)
  8099a4:	08093740 	call	809374 <__lo0bits>
  8099a8:	100d883a 	mov	r6,r2
  8099ac:	10003526 	beq	r2,zero,809a84 <__d2b+0x16c>
  8099b0:	d8c00117 	ldw	r3,4(sp)
  8099b4:	00800804 	movi	r2,32
  8099b8:	1185c83a 	sub	r2,r2,r6
  8099bc:	d9000017 	ldw	r4,0(sp)
  8099c0:	1886983a 	sll	r3,r3,r2
  8099c4:	1906b03a 	or	r3,r3,r4
  8099c8:	90c00515 	stw	r3,20(r18)
  8099cc:	d8c00117 	ldw	r3,4(sp)
  8099d0:	1986d83a 	srl	r3,r3,r6
  8099d4:	d8c00115 	stw	r3,4(sp)
  8099d8:	180b003a 	cmpeq	r5,r3,zero
  8099dc:	00800084 	movi	r2,2
  8099e0:	114bc83a 	sub	r5,r2,r5
  8099e4:	80c00115 	stw	r3,4(r16)
  8099e8:	91400415 	stw	r5,16(r18)
  8099ec:	a0001a1e 	bne	r20,zero,809a58 <__d2b+0x140>
  8099f0:	3545883a 	add	r2,r6,r21
  8099f4:	10bef344 	addi	r2,r2,-1075
  8099f8:	00c00d44 	movi	r3,53
  8099fc:	b0800015 	stw	r2,0(r22)
  809a00:	1987c83a 	sub	r3,r3,r6
  809a04:	b8c00015 	stw	r3,0(r23)
  809a08:	9005883a 	mov	r2,r18
  809a0c:	dfc00a17 	ldw	ra,40(sp)
  809a10:	ddc00917 	ldw	r23,36(sp)
  809a14:	dd800817 	ldw	r22,32(sp)
  809a18:	dd400717 	ldw	r21,28(sp)
  809a1c:	dd000617 	ldw	r20,24(sp)
  809a20:	dcc00517 	ldw	r19,20(sp)
  809a24:	dc800417 	ldw	r18,16(sp)
  809a28:	dc400317 	ldw	r17,12(sp)
  809a2c:	dc000217 	ldw	r16,8(sp)
  809a30:	dec00b04 	addi	sp,sp,44
  809a34:	f800283a 	ret
  809a38:	d9000104 	addi	r4,sp,4
  809a3c:	08093740 	call	809374 <__lo0bits>
  809a40:	11800804 	addi	r6,r2,32
  809a44:	d8800117 	ldw	r2,4(sp)
  809a48:	94c00415 	stw	r19,16(r18)
  809a4c:	980b883a 	mov	r5,r19
  809a50:	90800515 	stw	r2,20(r18)
  809a54:	a03fe626 	beq	r20,zero,8099f0 <__d2b+0xd8>
  809a58:	2945883a 	add	r2,r5,r5
  809a5c:	1085883a 	add	r2,r2,r2
  809a60:	1405883a 	add	r2,r2,r16
  809a64:	113fff17 	ldw	r4,-4(r2)
  809a68:	30fef384 	addi	r3,r6,-1074
  809a6c:	2820917a 	slli	r16,r5,5
  809a70:	b0c00015 	stw	r3,0(r22)
  809a74:	08093040 	call	809304 <__hi0bits>
  809a78:	80a1c83a 	sub	r16,r16,r2
  809a7c:	bc000015 	stw	r16,0(r23)
  809a80:	003fe106 	br	809a08 <__d2b+0xf0>
  809a84:	d8800017 	ldw	r2,0(sp)
  809a88:	90800515 	stw	r2,20(r18)
  809a8c:	d8c00117 	ldw	r3,4(sp)
  809a90:	003fd106 	br	8099d8 <__d2b+0xc0>

00809a94 <__mdiff>:
  809a94:	defffb04 	addi	sp,sp,-20
  809a98:	dc000015 	stw	r16,0(sp)
  809a9c:	2821883a 	mov	r16,r5
  809aa0:	dc800215 	stw	r18,8(sp)
  809aa4:	300b883a 	mov	r5,r6
  809aa8:	2025883a 	mov	r18,r4
  809aac:	8009883a 	mov	r4,r16
  809ab0:	dc400115 	stw	r17,4(sp)
  809ab4:	dfc00415 	stw	ra,16(sp)
  809ab8:	dcc00315 	stw	r19,12(sp)
  809abc:	3023883a 	mov	r17,r6
  809ac0:	08094380 	call	809438 <__mcmp>
  809ac4:	10004226 	beq	r2,zero,809bd0 <__mdiff+0x13c>
  809ac8:	10005016 	blt	r2,zero,809c0c <__mdiff+0x178>
  809acc:	0027883a 	mov	r19,zero
  809ad0:	81400117 	ldw	r5,4(r16)
  809ad4:	9009883a 	mov	r4,r18
  809ad8:	080985c0 	call	80985c <_Balloc>
  809adc:	1019883a 	mov	r12,r2
  809ae0:	82800417 	ldw	r10,16(r16)
  809ae4:	88800417 	ldw	r2,16(r17)
  809ae8:	81800504 	addi	r6,r16,20
  809aec:	5287883a 	add	r3,r10,r10
  809af0:	1085883a 	add	r2,r2,r2
  809af4:	18c7883a 	add	r3,r3,r3
  809af8:	1085883a 	add	r2,r2,r2
  809afc:	8a000504 	addi	r8,r17,20
  809b00:	64c00315 	stw	r19,12(r12)
  809b04:	30db883a 	add	r13,r6,r3
  809b08:	4097883a 	add	r11,r8,r2
  809b0c:	61c00504 	addi	r7,r12,20
  809b10:	0013883a 	mov	r9,zero
  809b14:	31000017 	ldw	r4,0(r6)
  809b18:	41400017 	ldw	r5,0(r8)
  809b1c:	42000104 	addi	r8,r8,4
  809b20:	20bfffcc 	andi	r2,r4,65535
  809b24:	28ffffcc 	andi	r3,r5,65535
  809b28:	10c5c83a 	sub	r2,r2,r3
  809b2c:	1245883a 	add	r2,r2,r9
  809b30:	2008d43a 	srli	r4,r4,16
  809b34:	280ad43a 	srli	r5,r5,16
  809b38:	1007d43a 	srai	r3,r2,16
  809b3c:	3880000d 	sth	r2,0(r7)
  809b40:	2149c83a 	sub	r4,r4,r5
  809b44:	20c9883a 	add	r4,r4,r3
  809b48:	3900008d 	sth	r4,2(r7)
  809b4c:	31800104 	addi	r6,r6,4
  809b50:	39c00104 	addi	r7,r7,4
  809b54:	2013d43a 	srai	r9,r4,16
  809b58:	42ffee36 	bltu	r8,r11,809b14 <__mdiff+0x80>
  809b5c:	33400c2e 	bgeu	r6,r13,809b90 <__mdiff+0xfc>
  809b60:	30800017 	ldw	r2,0(r6)
  809b64:	31800104 	addi	r6,r6,4
  809b68:	10ffffcc 	andi	r3,r2,65535
  809b6c:	1a47883a 	add	r3,r3,r9
  809b70:	1004d43a 	srli	r2,r2,16
  809b74:	1809d43a 	srai	r4,r3,16
  809b78:	38c0000d 	sth	r3,0(r7)
  809b7c:	1105883a 	add	r2,r2,r4
  809b80:	3880008d 	sth	r2,2(r7)
  809b84:	1013d43a 	srai	r9,r2,16
  809b88:	39c00104 	addi	r7,r7,4
  809b8c:	337ff436 	bltu	r6,r13,809b60 <__mdiff+0xcc>
  809b90:	38bfff17 	ldw	r2,-4(r7)
  809b94:	38ffff04 	addi	r3,r7,-4
  809b98:	1000041e 	bne	r2,zero,809bac <__mdiff+0x118>
  809b9c:	18ffff04 	addi	r3,r3,-4
  809ba0:	18800017 	ldw	r2,0(r3)
  809ba4:	52bfffc4 	addi	r10,r10,-1
  809ba8:	103ffc26 	beq	r2,zero,809b9c <__mdiff+0x108>
  809bac:	6005883a 	mov	r2,r12
  809bb0:	62800415 	stw	r10,16(r12)
  809bb4:	dfc00417 	ldw	ra,16(sp)
  809bb8:	dcc00317 	ldw	r19,12(sp)
  809bbc:	dc800217 	ldw	r18,8(sp)
  809bc0:	dc400117 	ldw	r17,4(sp)
  809bc4:	dc000017 	ldw	r16,0(sp)
  809bc8:	dec00504 	addi	sp,sp,20
  809bcc:	f800283a 	ret
  809bd0:	9009883a 	mov	r4,r18
  809bd4:	000b883a 	mov	r5,zero
  809bd8:	080985c0 	call	80985c <_Balloc>
  809bdc:	1019883a 	mov	r12,r2
  809be0:	00800044 	movi	r2,1
  809be4:	60800415 	stw	r2,16(r12)
  809be8:	6005883a 	mov	r2,r12
  809bec:	60000515 	stw	zero,20(r12)
  809bf0:	dfc00417 	ldw	ra,16(sp)
  809bf4:	dcc00317 	ldw	r19,12(sp)
  809bf8:	dc800217 	ldw	r18,8(sp)
  809bfc:	dc400117 	ldw	r17,4(sp)
  809c00:	dc000017 	ldw	r16,0(sp)
  809c04:	dec00504 	addi	sp,sp,20
  809c08:	f800283a 	ret
  809c0c:	880d883a 	mov	r6,r17
  809c10:	04c00044 	movi	r19,1
  809c14:	8023883a 	mov	r17,r16
  809c18:	3021883a 	mov	r16,r6
  809c1c:	003fac06 	br	809ad0 <__mdiff+0x3c>

00809c20 <__lshift>:
  809c20:	defff904 	addi	sp,sp,-28
  809c24:	28800417 	ldw	r2,16(r5)
  809c28:	dc000015 	stw	r16,0(sp)
  809c2c:	3021d17a 	srai	r16,r6,5
  809c30:	28c00217 	ldw	r3,8(r5)
  809c34:	10800044 	addi	r2,r2,1
  809c38:	dc400115 	stw	r17,4(sp)
  809c3c:	80a3883a 	add	r17,r16,r2
  809c40:	dd400515 	stw	r21,20(sp)
  809c44:	dd000415 	stw	r20,16(sp)
  809c48:	dc800215 	stw	r18,8(sp)
  809c4c:	dfc00615 	stw	ra,24(sp)
  809c50:	2825883a 	mov	r18,r5
  809c54:	dcc00315 	stw	r19,12(sp)
  809c58:	3029883a 	mov	r20,r6
  809c5c:	202b883a 	mov	r21,r4
  809c60:	29400117 	ldw	r5,4(r5)
  809c64:	1c40030e 	bge	r3,r17,809c74 <__lshift+0x54>
  809c68:	18c7883a 	add	r3,r3,r3
  809c6c:	29400044 	addi	r5,r5,1
  809c70:	1c7ffd16 	blt	r3,r17,809c68 <__lshift+0x48>
  809c74:	a809883a 	mov	r4,r21
  809c78:	080985c0 	call	80985c <_Balloc>
  809c7c:	1027883a 	mov	r19,r2
  809c80:	11400504 	addi	r5,r2,20
  809c84:	0400090e 	bge	zero,r16,809cac <__lshift+0x8c>
  809c88:	2805883a 	mov	r2,r5
  809c8c:	0007883a 	mov	r3,zero
  809c90:	18c00044 	addi	r3,r3,1
  809c94:	10000015 	stw	zero,0(r2)
  809c98:	10800104 	addi	r2,r2,4
  809c9c:	80fffc1e 	bne	r16,r3,809c90 <__lshift+0x70>
  809ca0:	8405883a 	add	r2,r16,r16
  809ca4:	1085883a 	add	r2,r2,r2
  809ca8:	288b883a 	add	r5,r5,r2
  809cac:	90800417 	ldw	r2,16(r18)
  809cb0:	91000504 	addi	r4,r18,20
  809cb4:	a18007cc 	andi	r6,r20,31
  809cb8:	1085883a 	add	r2,r2,r2
  809cbc:	1085883a 	add	r2,r2,r2
  809cc0:	208f883a 	add	r7,r4,r2
  809cc4:	30001e26 	beq	r6,zero,809d40 <__lshift+0x120>
  809cc8:	00800804 	movi	r2,32
  809ccc:	1191c83a 	sub	r8,r2,r6
  809cd0:	0007883a 	mov	r3,zero
  809cd4:	20800017 	ldw	r2,0(r4)
  809cd8:	1184983a 	sll	r2,r2,r6
  809cdc:	1884b03a 	or	r2,r3,r2
  809ce0:	28800015 	stw	r2,0(r5)
  809ce4:	20c00017 	ldw	r3,0(r4)
  809ce8:	21000104 	addi	r4,r4,4
  809cec:	29400104 	addi	r5,r5,4
  809cf0:	1a06d83a 	srl	r3,r3,r8
  809cf4:	21fff736 	bltu	r4,r7,809cd4 <__lshift+0xb4>
  809cf8:	28c00015 	stw	r3,0(r5)
  809cfc:	18000126 	beq	r3,zero,809d04 <__lshift+0xe4>
  809d00:	8c400044 	addi	r17,r17,1
  809d04:	88bfffc4 	addi	r2,r17,-1
  809d08:	98800415 	stw	r2,16(r19)
  809d0c:	a809883a 	mov	r4,r21
  809d10:	900b883a 	mov	r5,r18
  809d14:	08092dc0 	call	8092dc <_Bfree>
  809d18:	9805883a 	mov	r2,r19
  809d1c:	dfc00617 	ldw	ra,24(sp)
  809d20:	dd400517 	ldw	r21,20(sp)
  809d24:	dd000417 	ldw	r20,16(sp)
  809d28:	dcc00317 	ldw	r19,12(sp)
  809d2c:	dc800217 	ldw	r18,8(sp)
  809d30:	dc400117 	ldw	r17,4(sp)
  809d34:	dc000017 	ldw	r16,0(sp)
  809d38:	dec00704 	addi	sp,sp,28
  809d3c:	f800283a 	ret
  809d40:	20800017 	ldw	r2,0(r4)
  809d44:	21000104 	addi	r4,r4,4
  809d48:	28800015 	stw	r2,0(r5)
  809d4c:	29400104 	addi	r5,r5,4
  809d50:	21ffec2e 	bgeu	r4,r7,809d04 <__lshift+0xe4>
  809d54:	20800017 	ldw	r2,0(r4)
  809d58:	21000104 	addi	r4,r4,4
  809d5c:	28800015 	stw	r2,0(r5)
  809d60:	29400104 	addi	r5,r5,4
  809d64:	21fff636 	bltu	r4,r7,809d40 <__lshift+0x120>
  809d68:	003fe606 	br	809d04 <__lshift+0xe4>

00809d6c <__multiply>:
  809d6c:	defff904 	addi	sp,sp,-28
  809d70:	dcc00315 	stw	r19,12(sp)
  809d74:	dc800215 	stw	r18,8(sp)
  809d78:	2cc00417 	ldw	r19,16(r5)
  809d7c:	34800417 	ldw	r18,16(r6)
  809d80:	dd000415 	stw	r20,16(sp)
  809d84:	dc400115 	stw	r17,4(sp)
  809d88:	dfc00615 	stw	ra,24(sp)
  809d8c:	dd400515 	stw	r21,20(sp)
  809d90:	dc000015 	stw	r16,0(sp)
  809d94:	2823883a 	mov	r17,r5
  809d98:	3029883a 	mov	r20,r6
  809d9c:	9c80040e 	bge	r19,r18,809db0 <__multiply+0x44>
  809da0:	9027883a 	mov	r19,r18
  809da4:	2c800417 	ldw	r18,16(r5)
  809da8:	2829883a 	mov	r20,r5
  809dac:	3023883a 	mov	r17,r6
  809db0:	88800217 	ldw	r2,8(r17)
  809db4:	9ca1883a 	add	r16,r19,r18
  809db8:	89400117 	ldw	r5,4(r17)
  809dbc:	1400010e 	bge	r2,r16,809dc4 <__multiply+0x58>
  809dc0:	29400044 	addi	r5,r5,1
  809dc4:	080985c0 	call	80985c <_Balloc>
  809dc8:	102b883a 	mov	r21,r2
  809dcc:	8405883a 	add	r2,r16,r16
  809dd0:	1085883a 	add	r2,r2,r2
  809dd4:	a9000504 	addi	r4,r21,20
  809dd8:	209d883a 	add	r14,r4,r2
  809ddc:	2380042e 	bgeu	r4,r14,809df0 <__multiply+0x84>
  809de0:	2005883a 	mov	r2,r4
  809de4:	10000015 	stw	zero,0(r2)
  809de8:	10800104 	addi	r2,r2,4
  809dec:	13bffd36 	bltu	r2,r14,809de4 <__multiply+0x78>
  809df0:	9485883a 	add	r2,r18,r18
  809df4:	9cc7883a 	add	r3,r19,r19
  809df8:	a1800504 	addi	r6,r20,20
  809dfc:	1085883a 	add	r2,r2,r2
  809e00:	8b400504 	addi	r13,r17,20
  809e04:	18c7883a 	add	r3,r3,r3
  809e08:	309f883a 	add	r15,r6,r2
  809e0c:	68d7883a 	add	r11,r13,r3
  809e10:	33c03b2e 	bgeu	r6,r15,809f00 <__multiply+0x194>
  809e14:	2019883a 	mov	r12,r4
  809e18:	30800017 	ldw	r2,0(r6)
  809e1c:	127fffcc 	andi	r9,r2,65535
  809e20:	48001826 	beq	r9,zero,809e84 <__multiply+0x118>
  809e24:	6811883a 	mov	r8,r13
  809e28:	600f883a 	mov	r7,r12
  809e2c:	0015883a 	mov	r10,zero
  809e30:	40c00017 	ldw	r3,0(r8)
  809e34:	39400017 	ldw	r5,0(r7)
  809e38:	42000104 	addi	r8,r8,4
  809e3c:	193fffcc 	andi	r4,r3,65535
  809e40:	4909383a 	mul	r4,r9,r4
  809e44:	1806d43a 	srli	r3,r3,16
  809e48:	28bfffcc 	andi	r2,r5,65535
  809e4c:	5085883a 	add	r2,r10,r2
  809e50:	2089883a 	add	r4,r4,r2
  809e54:	48c7383a 	mul	r3,r9,r3
  809e58:	280ad43a 	srli	r5,r5,16
  809e5c:	2004d43a 	srli	r2,r4,16
  809e60:	3900000d 	sth	r4,0(r7)
  809e64:	1947883a 	add	r3,r3,r5
  809e68:	10c5883a 	add	r2,r2,r3
  809e6c:	3880008d 	sth	r2,2(r7)
  809e70:	1014d43a 	srli	r10,r2,16
  809e74:	39c00104 	addi	r7,r7,4
  809e78:	42ffed36 	bltu	r8,r11,809e30 <__multiply+0xc4>
  809e7c:	3a800015 	stw	r10,0(r7)
  809e80:	30800017 	ldw	r2,0(r6)
  809e84:	1012d43a 	srli	r9,r2,16
  809e88:	48001926 	beq	r9,zero,809ef0 <__multiply+0x184>
  809e8c:	60800017 	ldw	r2,0(r12)
  809e90:	6811883a 	mov	r8,r13
  809e94:	600f883a 	mov	r7,r12
  809e98:	0015883a 	mov	r10,zero
  809e9c:	100b883a 	mov	r5,r2
  809ea0:	41000017 	ldw	r4,0(r8)
  809ea4:	2806d43a 	srli	r3,r5,16
  809ea8:	3880000d 	sth	r2,0(r7)
  809eac:	20bfffcc 	andi	r2,r4,65535
  809eb0:	4885383a 	mul	r2,r9,r2
  809eb4:	50c7883a 	add	r3,r10,r3
  809eb8:	2008d43a 	srli	r4,r4,16
  809ebc:	10c5883a 	add	r2,r2,r3
  809ec0:	3880008d 	sth	r2,2(r7)
  809ec4:	39c00104 	addi	r7,r7,4
  809ec8:	39400017 	ldw	r5,0(r7)
  809ecc:	4909383a 	mul	r4,r9,r4
  809ed0:	1004d43a 	srli	r2,r2,16
  809ed4:	28ffffcc 	andi	r3,r5,65535
  809ed8:	20c9883a 	add	r4,r4,r3
  809edc:	1105883a 	add	r2,r2,r4
  809ee0:	42000104 	addi	r8,r8,4
  809ee4:	1014d43a 	srli	r10,r2,16
  809ee8:	42ffed36 	bltu	r8,r11,809ea0 <__multiply+0x134>
  809eec:	38800015 	stw	r2,0(r7)
  809ef0:	31800104 	addi	r6,r6,4
  809ef4:	33c0022e 	bgeu	r6,r15,809f00 <__multiply+0x194>
  809ef8:	63000104 	addi	r12,r12,4
  809efc:	003fc606 	br	809e18 <__multiply+0xac>
  809f00:	0400090e 	bge	zero,r16,809f28 <__multiply+0x1bc>
  809f04:	70bfff17 	ldw	r2,-4(r14)
  809f08:	70ffff04 	addi	r3,r14,-4
  809f0c:	10000326 	beq	r2,zero,809f1c <__multiply+0x1b0>
  809f10:	00000506 	br	809f28 <__multiply+0x1bc>
  809f14:	18800017 	ldw	r2,0(r3)
  809f18:	1000031e 	bne	r2,zero,809f28 <__multiply+0x1bc>
  809f1c:	843fffc4 	addi	r16,r16,-1
  809f20:	18ffff04 	addi	r3,r3,-4
  809f24:	803ffb1e 	bne	r16,zero,809f14 <__multiply+0x1a8>
  809f28:	a805883a 	mov	r2,r21
  809f2c:	ac000415 	stw	r16,16(r21)
  809f30:	dfc00617 	ldw	ra,24(sp)
  809f34:	dd400517 	ldw	r21,20(sp)
  809f38:	dd000417 	ldw	r20,16(sp)
  809f3c:	dcc00317 	ldw	r19,12(sp)
  809f40:	dc800217 	ldw	r18,8(sp)
  809f44:	dc400117 	ldw	r17,4(sp)
  809f48:	dc000017 	ldw	r16,0(sp)
  809f4c:	dec00704 	addi	sp,sp,28
  809f50:	f800283a 	ret

00809f54 <__i2b>:
  809f54:	defffd04 	addi	sp,sp,-12
  809f58:	dc000015 	stw	r16,0(sp)
  809f5c:	04000044 	movi	r16,1
  809f60:	dc800115 	stw	r18,4(sp)
  809f64:	2825883a 	mov	r18,r5
  809f68:	800b883a 	mov	r5,r16
  809f6c:	dfc00215 	stw	ra,8(sp)
  809f70:	080985c0 	call	80985c <_Balloc>
  809f74:	14000415 	stw	r16,16(r2)
  809f78:	14800515 	stw	r18,20(r2)
  809f7c:	dfc00217 	ldw	ra,8(sp)
  809f80:	dc800117 	ldw	r18,4(sp)
  809f84:	dc000017 	ldw	r16,0(sp)
  809f88:	dec00304 	addi	sp,sp,12
  809f8c:	f800283a 	ret

00809f90 <__multadd>:
  809f90:	defffa04 	addi	sp,sp,-24
  809f94:	dc800215 	stw	r18,8(sp)
  809f98:	2c800417 	ldw	r18,16(r5)
  809f9c:	dd000415 	stw	r20,16(sp)
  809fa0:	dcc00315 	stw	r19,12(sp)
  809fa4:	dc000015 	stw	r16,0(sp)
  809fa8:	dfc00515 	stw	ra,20(sp)
  809fac:	3821883a 	mov	r16,r7
  809fb0:	dc400115 	stw	r17,4(sp)
  809fb4:	2827883a 	mov	r19,r5
  809fb8:	2029883a 	mov	r20,r4
  809fbc:	2a000504 	addi	r8,r5,20
  809fc0:	000f883a 	mov	r7,zero
  809fc4:	40800017 	ldw	r2,0(r8)
  809fc8:	39c00044 	addi	r7,r7,1
  809fcc:	10ffffcc 	andi	r3,r2,65535
  809fd0:	1987383a 	mul	r3,r3,r6
  809fd4:	1004d43a 	srli	r2,r2,16
  809fd8:	1c07883a 	add	r3,r3,r16
  809fdc:	180ad43a 	srli	r5,r3,16
  809fe0:	1185383a 	mul	r2,r2,r6
  809fe4:	18ffffcc 	andi	r3,r3,65535
  809fe8:	1145883a 	add	r2,r2,r5
  809fec:	1008943a 	slli	r4,r2,16
  809ff0:	1020d43a 	srli	r16,r2,16
  809ff4:	20c9883a 	add	r4,r4,r3
  809ff8:	41000015 	stw	r4,0(r8)
  809ffc:	42000104 	addi	r8,r8,4
  80a000:	3cbff016 	blt	r7,r18,809fc4 <__multadd+0x34>
  80a004:	80000826 	beq	r16,zero,80a028 <__multadd+0x98>
  80a008:	98800217 	ldw	r2,8(r19)
  80a00c:	90800f0e 	bge	r18,r2,80a04c <__multadd+0xbc>
  80a010:	9485883a 	add	r2,r18,r18
  80a014:	1085883a 	add	r2,r2,r2
  80a018:	14c5883a 	add	r2,r2,r19
  80a01c:	90c00044 	addi	r3,r18,1
  80a020:	14000515 	stw	r16,20(r2)
  80a024:	98c00415 	stw	r3,16(r19)
  80a028:	9805883a 	mov	r2,r19
  80a02c:	dfc00517 	ldw	ra,20(sp)
  80a030:	dd000417 	ldw	r20,16(sp)
  80a034:	dcc00317 	ldw	r19,12(sp)
  80a038:	dc800217 	ldw	r18,8(sp)
  80a03c:	dc400117 	ldw	r17,4(sp)
  80a040:	dc000017 	ldw	r16,0(sp)
  80a044:	dec00604 	addi	sp,sp,24
  80a048:	f800283a 	ret
  80a04c:	99400117 	ldw	r5,4(r19)
  80a050:	a009883a 	mov	r4,r20
  80a054:	29400044 	addi	r5,r5,1
  80a058:	080985c0 	call	80985c <_Balloc>
  80a05c:	99800417 	ldw	r6,16(r19)
  80a060:	99400304 	addi	r5,r19,12
  80a064:	11000304 	addi	r4,r2,12
  80a068:	318d883a 	add	r6,r6,r6
  80a06c:	318d883a 	add	r6,r6,r6
  80a070:	31800204 	addi	r6,r6,8
  80a074:	1023883a 	mov	r17,r2
  80a078:	08090c40 	call	8090c4 <memcpy>
  80a07c:	980b883a 	mov	r5,r19
  80a080:	a009883a 	mov	r4,r20
  80a084:	08092dc0 	call	8092dc <_Bfree>
  80a088:	8827883a 	mov	r19,r17
  80a08c:	003fe006 	br	80a010 <__multadd+0x80>

0080a090 <__pow5mult>:
  80a090:	defffa04 	addi	sp,sp,-24
  80a094:	308000cc 	andi	r2,r6,3
  80a098:	dd000415 	stw	r20,16(sp)
  80a09c:	dcc00315 	stw	r19,12(sp)
  80a0a0:	dc000015 	stw	r16,0(sp)
  80a0a4:	dfc00515 	stw	ra,20(sp)
  80a0a8:	dc800215 	stw	r18,8(sp)
  80a0ac:	dc400115 	stw	r17,4(sp)
  80a0b0:	3021883a 	mov	r16,r6
  80a0b4:	2027883a 	mov	r19,r4
  80a0b8:	2829883a 	mov	r20,r5
  80a0bc:	10002b1e 	bne	r2,zero,80a16c <__pow5mult+0xdc>
  80a0c0:	8025d0ba 	srai	r18,r16,2
  80a0c4:	90001b26 	beq	r18,zero,80a134 <__pow5mult+0xa4>
  80a0c8:	9c001217 	ldw	r16,72(r19)
  80a0cc:	8000081e 	bne	r16,zero,80a0f0 <__pow5mult+0x60>
  80a0d0:	00003006 	br	80a194 <__pow5mult+0x104>
  80a0d4:	800b883a 	mov	r5,r16
  80a0d8:	800d883a 	mov	r6,r16
  80a0dc:	9809883a 	mov	r4,r19
  80a0e0:	90001426 	beq	r18,zero,80a134 <__pow5mult+0xa4>
  80a0e4:	80800017 	ldw	r2,0(r16)
  80a0e8:	10001b26 	beq	r2,zero,80a158 <__pow5mult+0xc8>
  80a0ec:	1021883a 	mov	r16,r2
  80a0f0:	9080004c 	andi	r2,r18,1
  80a0f4:	1005003a 	cmpeq	r2,r2,zero
  80a0f8:	9025d07a 	srai	r18,r18,1
  80a0fc:	800d883a 	mov	r6,r16
  80a100:	9809883a 	mov	r4,r19
  80a104:	a00b883a 	mov	r5,r20
  80a108:	103ff21e 	bne	r2,zero,80a0d4 <__pow5mult+0x44>
  80a10c:	0809d6c0 	call	809d6c <__multiply>
  80a110:	a00b883a 	mov	r5,r20
  80a114:	9809883a 	mov	r4,r19
  80a118:	1023883a 	mov	r17,r2
  80a11c:	08092dc0 	call	8092dc <_Bfree>
  80a120:	8829883a 	mov	r20,r17
  80a124:	800b883a 	mov	r5,r16
  80a128:	800d883a 	mov	r6,r16
  80a12c:	9809883a 	mov	r4,r19
  80a130:	903fec1e 	bne	r18,zero,80a0e4 <__pow5mult+0x54>
  80a134:	a005883a 	mov	r2,r20
  80a138:	dfc00517 	ldw	ra,20(sp)
  80a13c:	dd000417 	ldw	r20,16(sp)
  80a140:	dcc00317 	ldw	r19,12(sp)
  80a144:	dc800217 	ldw	r18,8(sp)
  80a148:	dc400117 	ldw	r17,4(sp)
  80a14c:	dc000017 	ldw	r16,0(sp)
  80a150:	dec00604 	addi	sp,sp,24
  80a154:	f800283a 	ret
  80a158:	0809d6c0 	call	809d6c <__multiply>
  80a15c:	80800015 	stw	r2,0(r16)
  80a160:	1021883a 	mov	r16,r2
  80a164:	10000015 	stw	zero,0(r2)
  80a168:	003fe106 	br	80a0f0 <__pow5mult+0x60>
  80a16c:	1085883a 	add	r2,r2,r2
  80a170:	00c02074 	movhi	r3,129
  80a174:	18c83b04 	addi	r3,r3,8428
  80a178:	1085883a 	add	r2,r2,r2
  80a17c:	10c5883a 	add	r2,r2,r3
  80a180:	11bfff17 	ldw	r6,-4(r2)
  80a184:	000f883a 	mov	r7,zero
  80a188:	0809f900 	call	809f90 <__multadd>
  80a18c:	1029883a 	mov	r20,r2
  80a190:	003fcb06 	br	80a0c0 <__pow5mult+0x30>
  80a194:	9809883a 	mov	r4,r19
  80a198:	01409c44 	movi	r5,625
  80a19c:	0809f540 	call	809f54 <__i2b>
  80a1a0:	98801215 	stw	r2,72(r19)
  80a1a4:	1021883a 	mov	r16,r2
  80a1a8:	10000015 	stw	zero,0(r2)
  80a1ac:	003fd006 	br	80a0f0 <__pow5mult+0x60>

0080a1b0 <__s2b>:
  80a1b0:	defff904 	addi	sp,sp,-28
  80a1b4:	dcc00315 	stw	r19,12(sp)
  80a1b8:	dc800215 	stw	r18,8(sp)
  80a1bc:	2827883a 	mov	r19,r5
  80a1c0:	2025883a 	mov	r18,r4
  80a1c4:	01400244 	movi	r5,9
  80a1c8:	39000204 	addi	r4,r7,8
  80a1cc:	dd000415 	stw	r20,16(sp)
  80a1d0:	dc400115 	stw	r17,4(sp)
  80a1d4:	dfc00615 	stw	ra,24(sp)
  80a1d8:	dd400515 	stw	r21,20(sp)
  80a1dc:	dc000015 	stw	r16,0(sp)
  80a1e0:	3829883a 	mov	r20,r7
  80a1e4:	3023883a 	mov	r17,r6
  80a1e8:	080c5900 	call	80c590 <__divsi3>
  80a1ec:	00c00044 	movi	r3,1
  80a1f0:	1880350e 	bge	r3,r2,80a2c8 <__s2b+0x118>
  80a1f4:	000b883a 	mov	r5,zero
  80a1f8:	18c7883a 	add	r3,r3,r3
  80a1fc:	29400044 	addi	r5,r5,1
  80a200:	18bffd16 	blt	r3,r2,80a1f8 <__s2b+0x48>
  80a204:	9009883a 	mov	r4,r18
  80a208:	080985c0 	call	80985c <_Balloc>
  80a20c:	1011883a 	mov	r8,r2
  80a210:	d8800717 	ldw	r2,28(sp)
  80a214:	00c00044 	movi	r3,1
  80a218:	01800244 	movi	r6,9
  80a21c:	40800515 	stw	r2,20(r8)
  80a220:	40c00415 	stw	r3,16(r8)
  80a224:	3440260e 	bge	r6,r17,80a2c0 <__s2b+0x110>
  80a228:	3021883a 	mov	r16,r6
  80a22c:	99ab883a 	add	r21,r19,r6
  80a230:	9c05883a 	add	r2,r19,r16
  80a234:	11c00007 	ldb	r7,0(r2)
  80a238:	400b883a 	mov	r5,r8
  80a23c:	9009883a 	mov	r4,r18
  80a240:	39fff404 	addi	r7,r7,-48
  80a244:	01800284 	movi	r6,10
  80a248:	0809f900 	call	809f90 <__multadd>
  80a24c:	84000044 	addi	r16,r16,1
  80a250:	1011883a 	mov	r8,r2
  80a254:	8c3ff61e 	bne	r17,r16,80a230 <__s2b+0x80>
  80a258:	ac45883a 	add	r2,r21,r17
  80a25c:	117ffe04 	addi	r5,r2,-8
  80a260:	880d883a 	mov	r6,r17
  80a264:	35000c0e 	bge	r6,r20,80a298 <__s2b+0xe8>
  80a268:	a185c83a 	sub	r2,r20,r6
  80a26c:	2821883a 	mov	r16,r5
  80a270:	28a3883a 	add	r17,r5,r2
  80a274:	81c00007 	ldb	r7,0(r16)
  80a278:	400b883a 	mov	r5,r8
  80a27c:	9009883a 	mov	r4,r18
  80a280:	39fff404 	addi	r7,r7,-48
  80a284:	01800284 	movi	r6,10
  80a288:	0809f900 	call	809f90 <__multadd>
  80a28c:	84000044 	addi	r16,r16,1
  80a290:	1011883a 	mov	r8,r2
  80a294:	847ff71e 	bne	r16,r17,80a274 <__s2b+0xc4>
  80a298:	4005883a 	mov	r2,r8
  80a29c:	dfc00617 	ldw	ra,24(sp)
  80a2a0:	dd400517 	ldw	r21,20(sp)
  80a2a4:	dd000417 	ldw	r20,16(sp)
  80a2a8:	dcc00317 	ldw	r19,12(sp)
  80a2ac:	dc800217 	ldw	r18,8(sp)
  80a2b0:	dc400117 	ldw	r17,4(sp)
  80a2b4:	dc000017 	ldw	r16,0(sp)
  80a2b8:	dec00704 	addi	sp,sp,28
  80a2bc:	f800283a 	ret
  80a2c0:	99400284 	addi	r5,r19,10
  80a2c4:	003fe706 	br	80a264 <__s2b+0xb4>
  80a2c8:	000b883a 	mov	r5,zero
  80a2cc:	003fcd06 	br	80a204 <__s2b+0x54>

0080a2d0 <_realloc_r>:
  80a2d0:	defff404 	addi	sp,sp,-48
  80a2d4:	dd800815 	stw	r22,32(sp)
  80a2d8:	dc800415 	stw	r18,16(sp)
  80a2dc:	dc400315 	stw	r17,12(sp)
  80a2e0:	dfc00b15 	stw	ra,44(sp)
  80a2e4:	df000a15 	stw	fp,40(sp)
  80a2e8:	ddc00915 	stw	r23,36(sp)
  80a2ec:	dd400715 	stw	r21,28(sp)
  80a2f0:	dd000615 	stw	r20,24(sp)
  80a2f4:	dcc00515 	stw	r19,20(sp)
  80a2f8:	dc000215 	stw	r16,8(sp)
  80a2fc:	2825883a 	mov	r18,r5
  80a300:	3023883a 	mov	r17,r6
  80a304:	202d883a 	mov	r22,r4
  80a308:	2800c926 	beq	r5,zero,80a630 <_realloc_r+0x360>
  80a30c:	080cce40 	call	80cce4 <__malloc_lock>
  80a310:	943ffe04 	addi	r16,r18,-8
  80a314:	88c002c4 	addi	r3,r17,11
  80a318:	00800584 	movi	r2,22
  80a31c:	82000117 	ldw	r8,4(r16)
  80a320:	10c01b2e 	bgeu	r2,r3,80a390 <_realloc_r+0xc0>
  80a324:	00bffe04 	movi	r2,-8
  80a328:	188e703a 	and	r7,r3,r2
  80a32c:	3839883a 	mov	fp,r7
  80a330:	38001a16 	blt	r7,zero,80a39c <_realloc_r+0xcc>
  80a334:	e4401936 	bltu	fp,r17,80a39c <_realloc_r+0xcc>
  80a338:	013fff04 	movi	r4,-4
  80a33c:	4126703a 	and	r19,r8,r4
  80a340:	99c02616 	blt	r19,r7,80a3dc <_realloc_r+0x10c>
  80a344:	802b883a 	mov	r21,r16
  80a348:	9829883a 	mov	r20,r19
  80a34c:	84000204 	addi	r16,r16,8
  80a350:	a80f883a 	mov	r7,r21
  80a354:	a70dc83a 	sub	r6,r20,fp
  80a358:	008003c4 	movi	r2,15
  80a35c:	1180c136 	bltu	r2,r6,80a664 <_realloc_r+0x394>
  80a360:	38800117 	ldw	r2,4(r7)
  80a364:	a549883a 	add	r4,r20,r21
  80a368:	1080004c 	andi	r2,r2,1
  80a36c:	a084b03a 	or	r2,r20,r2
  80a370:	38800115 	stw	r2,4(r7)
  80a374:	20c00117 	ldw	r3,4(r4)
  80a378:	18c00054 	ori	r3,r3,1
  80a37c:	20c00115 	stw	r3,4(r4)
  80a380:	b009883a 	mov	r4,r22
  80a384:	080cd040 	call	80cd04 <__malloc_unlock>
  80a388:	8023883a 	mov	r17,r16
  80a38c:	00000606 	br	80a3a8 <_realloc_r+0xd8>
  80a390:	01c00404 	movi	r7,16
  80a394:	3839883a 	mov	fp,r7
  80a398:	e47fe72e 	bgeu	fp,r17,80a338 <_realloc_r+0x68>
  80a39c:	00800304 	movi	r2,12
  80a3a0:	0023883a 	mov	r17,zero
  80a3a4:	b0800015 	stw	r2,0(r22)
  80a3a8:	8805883a 	mov	r2,r17
  80a3ac:	dfc00b17 	ldw	ra,44(sp)
  80a3b0:	df000a17 	ldw	fp,40(sp)
  80a3b4:	ddc00917 	ldw	r23,36(sp)
  80a3b8:	dd800817 	ldw	r22,32(sp)
  80a3bc:	dd400717 	ldw	r21,28(sp)
  80a3c0:	dd000617 	ldw	r20,24(sp)
  80a3c4:	dcc00517 	ldw	r19,20(sp)
  80a3c8:	dc800417 	ldw	r18,16(sp)
  80a3cc:	dc400317 	ldw	r17,12(sp)
  80a3d0:	dc000217 	ldw	r16,8(sp)
  80a3d4:	dec00c04 	addi	sp,sp,48
  80a3d8:	f800283a 	ret
  80a3dc:	00802074 	movhi	r2,129
  80a3e0:	10899a04 	addi	r2,r2,9832
  80a3e4:	12400217 	ldw	r9,8(r2)
  80a3e8:	84cd883a 	add	r6,r16,r19
  80a3ec:	802b883a 	mov	r21,r16
  80a3f0:	3240b926 	beq	r6,r9,80a6d8 <_realloc_r+0x408>
  80a3f4:	31400117 	ldw	r5,4(r6)
  80a3f8:	00bfff84 	movi	r2,-2
  80a3fc:	2884703a 	and	r2,r5,r2
  80a400:	1185883a 	add	r2,r2,r6
  80a404:	10c00117 	ldw	r3,4(r2)
  80a408:	18c0004c 	andi	r3,r3,1
  80a40c:	1807003a 	cmpeq	r3,r3,zero
  80a410:	1800a326 	beq	r3,zero,80a6a0 <_realloc_r+0x3d0>
  80a414:	2908703a 	and	r4,r5,r4
  80a418:	9929883a 	add	r20,r19,r4
  80a41c:	a1c0a30e 	bge	r20,r7,80a6ac <_realloc_r+0x3dc>
  80a420:	4080004c 	andi	r2,r8,1
  80a424:	1000551e 	bne	r2,zero,80a57c <_realloc_r+0x2ac>
  80a428:	80800017 	ldw	r2,0(r16)
  80a42c:	80afc83a 	sub	r23,r16,r2
  80a430:	b8c00117 	ldw	r3,4(r23)
  80a434:	00bfff04 	movi	r2,-4
  80a438:	1884703a 	and	r2,r3,r2
  80a43c:	30002e26 	beq	r6,zero,80a4f8 <_realloc_r+0x228>
  80a440:	3240b926 	beq	r6,r9,80a728 <_realloc_r+0x458>
  80a444:	98a9883a 	add	r20,r19,r2
  80a448:	2509883a 	add	r4,r4,r20
  80a44c:	d9000015 	stw	r4,0(sp)
  80a450:	21c02a16 	blt	r4,r7,80a4fc <_realloc_r+0x22c>
  80a454:	30800317 	ldw	r2,12(r6)
  80a458:	30c00217 	ldw	r3,8(r6)
  80a45c:	01400904 	movi	r5,36
  80a460:	99bfff04 	addi	r6,r19,-4
  80a464:	18800315 	stw	r2,12(r3)
  80a468:	10c00215 	stw	r3,8(r2)
  80a46c:	b9000317 	ldw	r4,12(r23)
  80a470:	b8800217 	ldw	r2,8(r23)
  80a474:	b82b883a 	mov	r21,r23
  80a478:	bc000204 	addi	r16,r23,8
  80a47c:	20800215 	stw	r2,8(r4)
  80a480:	11000315 	stw	r4,12(r2)
  80a484:	2980e436 	bltu	r5,r6,80a818 <_realloc_r+0x548>
  80a488:	008004c4 	movi	r2,19
  80a48c:	9009883a 	mov	r4,r18
  80a490:	8011883a 	mov	r8,r16
  80a494:	11800f2e 	bgeu	r2,r6,80a4d4 <_realloc_r+0x204>
  80a498:	90800017 	ldw	r2,0(r18)
  80a49c:	ba000404 	addi	r8,r23,16
  80a4a0:	91000204 	addi	r4,r18,8
  80a4a4:	b8800215 	stw	r2,8(r23)
  80a4a8:	90c00117 	ldw	r3,4(r18)
  80a4ac:	008006c4 	movi	r2,27
  80a4b0:	b8c00315 	stw	r3,12(r23)
  80a4b4:	1180072e 	bgeu	r2,r6,80a4d4 <_realloc_r+0x204>
  80a4b8:	90c00217 	ldw	r3,8(r18)
  80a4bc:	ba000604 	addi	r8,r23,24
  80a4c0:	91000404 	addi	r4,r18,16
  80a4c4:	b8c00415 	stw	r3,16(r23)
  80a4c8:	90800317 	ldw	r2,12(r18)
  80a4cc:	b8800515 	stw	r2,20(r23)
  80a4d0:	3140e726 	beq	r6,r5,80a870 <_realloc_r+0x5a0>
  80a4d4:	20800017 	ldw	r2,0(r4)
  80a4d8:	dd000017 	ldw	r20,0(sp)
  80a4dc:	b80f883a 	mov	r7,r23
  80a4e0:	40800015 	stw	r2,0(r8)
  80a4e4:	20c00117 	ldw	r3,4(r4)
  80a4e8:	40c00115 	stw	r3,4(r8)
  80a4ec:	20800217 	ldw	r2,8(r4)
  80a4f0:	40800215 	stw	r2,8(r8)
  80a4f4:	003f9706 	br	80a354 <_realloc_r+0x84>
  80a4f8:	98a9883a 	add	r20,r19,r2
  80a4fc:	a1c01f16 	blt	r20,r7,80a57c <_realloc_r+0x2ac>
  80a500:	b8c00317 	ldw	r3,12(r23)
  80a504:	b8800217 	ldw	r2,8(r23)
  80a508:	99bfff04 	addi	r6,r19,-4
  80a50c:	01400904 	movi	r5,36
  80a510:	b82b883a 	mov	r21,r23
  80a514:	18800215 	stw	r2,8(r3)
  80a518:	10c00315 	stw	r3,12(r2)
  80a51c:	bc000204 	addi	r16,r23,8
  80a520:	2980c336 	bltu	r5,r6,80a830 <_realloc_r+0x560>
  80a524:	008004c4 	movi	r2,19
  80a528:	9009883a 	mov	r4,r18
  80a52c:	8011883a 	mov	r8,r16
  80a530:	11800f2e 	bgeu	r2,r6,80a570 <_realloc_r+0x2a0>
  80a534:	90800017 	ldw	r2,0(r18)
  80a538:	ba000404 	addi	r8,r23,16
  80a53c:	91000204 	addi	r4,r18,8
  80a540:	b8800215 	stw	r2,8(r23)
  80a544:	90c00117 	ldw	r3,4(r18)
  80a548:	008006c4 	movi	r2,27
  80a54c:	b8c00315 	stw	r3,12(r23)
  80a550:	1180072e 	bgeu	r2,r6,80a570 <_realloc_r+0x2a0>
  80a554:	90c00217 	ldw	r3,8(r18)
  80a558:	ba000604 	addi	r8,r23,24
  80a55c:	91000404 	addi	r4,r18,16
  80a560:	b8c00415 	stw	r3,16(r23)
  80a564:	90800317 	ldw	r2,12(r18)
  80a568:	b8800515 	stw	r2,20(r23)
  80a56c:	3140c726 	beq	r6,r5,80a88c <_realloc_r+0x5bc>
  80a570:	20800017 	ldw	r2,0(r4)
  80a574:	b80f883a 	mov	r7,r23
  80a578:	003fd906 	br	80a4e0 <_realloc_r+0x210>
  80a57c:	880b883a 	mov	r5,r17
  80a580:	b009883a 	mov	r4,r22
  80a584:	08088a00 	call	8088a0 <_malloc_r>
  80a588:	1023883a 	mov	r17,r2
  80a58c:	10002526 	beq	r2,zero,80a624 <_realloc_r+0x354>
  80a590:	80800117 	ldw	r2,4(r16)
  80a594:	00ffff84 	movi	r3,-2
  80a598:	893ffe04 	addi	r4,r17,-8
  80a59c:	10c4703a 	and	r2,r2,r3
  80a5a0:	8085883a 	add	r2,r16,r2
  80a5a4:	20809526 	beq	r4,r2,80a7fc <_realloc_r+0x52c>
  80a5a8:	99bfff04 	addi	r6,r19,-4
  80a5ac:	01c00904 	movi	r7,36
  80a5b0:	39804536 	bltu	r7,r6,80a6c8 <_realloc_r+0x3f8>
  80a5b4:	008004c4 	movi	r2,19
  80a5b8:	9009883a 	mov	r4,r18
  80a5bc:	880b883a 	mov	r5,r17
  80a5c0:	11800f2e 	bgeu	r2,r6,80a600 <_realloc_r+0x330>
  80a5c4:	90800017 	ldw	r2,0(r18)
  80a5c8:	89400204 	addi	r5,r17,8
  80a5cc:	91000204 	addi	r4,r18,8
  80a5d0:	88800015 	stw	r2,0(r17)
  80a5d4:	90c00117 	ldw	r3,4(r18)
  80a5d8:	008006c4 	movi	r2,27
  80a5dc:	88c00115 	stw	r3,4(r17)
  80a5e0:	1180072e 	bgeu	r2,r6,80a600 <_realloc_r+0x330>
  80a5e4:	90c00217 	ldw	r3,8(r18)
  80a5e8:	89400404 	addi	r5,r17,16
  80a5ec:	91000404 	addi	r4,r18,16
  80a5f0:	88c00215 	stw	r3,8(r17)
  80a5f4:	90800317 	ldw	r2,12(r18)
  80a5f8:	88800315 	stw	r2,12(r17)
  80a5fc:	31c09126 	beq	r6,r7,80a844 <_realloc_r+0x574>
  80a600:	20800017 	ldw	r2,0(r4)
  80a604:	28800015 	stw	r2,0(r5)
  80a608:	20c00117 	ldw	r3,4(r4)
  80a60c:	28c00115 	stw	r3,4(r5)
  80a610:	20800217 	ldw	r2,8(r4)
  80a614:	28800215 	stw	r2,8(r5)
  80a618:	900b883a 	mov	r5,r18
  80a61c:	b009883a 	mov	r4,r22
  80a620:	0807d180 	call	807d18 <_free_r>
  80a624:	b009883a 	mov	r4,r22
  80a628:	080cd040 	call	80cd04 <__malloc_unlock>
  80a62c:	003f5e06 	br	80a3a8 <_realloc_r+0xd8>
  80a630:	300b883a 	mov	r5,r6
  80a634:	dfc00b17 	ldw	ra,44(sp)
  80a638:	df000a17 	ldw	fp,40(sp)
  80a63c:	ddc00917 	ldw	r23,36(sp)
  80a640:	dd800817 	ldw	r22,32(sp)
  80a644:	dd400717 	ldw	r21,28(sp)
  80a648:	dd000617 	ldw	r20,24(sp)
  80a64c:	dcc00517 	ldw	r19,20(sp)
  80a650:	dc800417 	ldw	r18,16(sp)
  80a654:	dc400317 	ldw	r17,12(sp)
  80a658:	dc000217 	ldw	r16,8(sp)
  80a65c:	dec00c04 	addi	sp,sp,48
  80a660:	08088a01 	jmpi	8088a0 <_malloc_r>
  80a664:	38800117 	ldw	r2,4(r7)
  80a668:	e54b883a 	add	r5,fp,r21
  80a66c:	31000054 	ori	r4,r6,1
  80a670:	1080004c 	andi	r2,r2,1
  80a674:	1704b03a 	or	r2,r2,fp
  80a678:	38800115 	stw	r2,4(r7)
  80a67c:	29000115 	stw	r4,4(r5)
  80a680:	2987883a 	add	r3,r5,r6
  80a684:	18800117 	ldw	r2,4(r3)
  80a688:	29400204 	addi	r5,r5,8
  80a68c:	b009883a 	mov	r4,r22
  80a690:	10800054 	ori	r2,r2,1
  80a694:	18800115 	stw	r2,4(r3)
  80a698:	0807d180 	call	807d18 <_free_r>
  80a69c:	003f3806 	br	80a380 <_realloc_r+0xb0>
  80a6a0:	000d883a 	mov	r6,zero
  80a6a4:	0009883a 	mov	r4,zero
  80a6a8:	003f5d06 	br	80a420 <_realloc_r+0x150>
  80a6ac:	30c00217 	ldw	r3,8(r6)
  80a6b0:	30800317 	ldw	r2,12(r6)
  80a6b4:	800f883a 	mov	r7,r16
  80a6b8:	84000204 	addi	r16,r16,8
  80a6bc:	10c00215 	stw	r3,8(r2)
  80a6c0:	18800315 	stw	r2,12(r3)
  80a6c4:	003f2306 	br	80a354 <_realloc_r+0x84>
  80a6c8:	8809883a 	mov	r4,r17
  80a6cc:	900b883a 	mov	r5,r18
  80a6d0:	08091640 	call	809164 <memmove>
  80a6d4:	003fd006 	br	80a618 <_realloc_r+0x348>
  80a6d8:	30800117 	ldw	r2,4(r6)
  80a6dc:	e0c00404 	addi	r3,fp,16
  80a6e0:	1108703a 	and	r4,r2,r4
  80a6e4:	9905883a 	add	r2,r19,r4
  80a6e8:	10ff4d16 	blt	r2,r3,80a420 <_realloc_r+0x150>
  80a6ec:	1705c83a 	sub	r2,r2,fp
  80a6f0:	870b883a 	add	r5,r16,fp
  80a6f4:	10800054 	ori	r2,r2,1
  80a6f8:	28800115 	stw	r2,4(r5)
  80a6fc:	80c00117 	ldw	r3,4(r16)
  80a700:	00802074 	movhi	r2,129
  80a704:	10899a04 	addi	r2,r2,9832
  80a708:	b009883a 	mov	r4,r22
  80a70c:	18c0004c 	andi	r3,r3,1
  80a710:	e0c6b03a 	or	r3,fp,r3
  80a714:	11400215 	stw	r5,8(r2)
  80a718:	80c00115 	stw	r3,4(r16)
  80a71c:	080cd040 	call	80cd04 <__malloc_unlock>
  80a720:	84400204 	addi	r17,r16,8
  80a724:	003f2006 	br	80a3a8 <_realloc_r+0xd8>
  80a728:	98a9883a 	add	r20,r19,r2
  80a72c:	2509883a 	add	r4,r4,r20
  80a730:	e0800404 	addi	r2,fp,16
  80a734:	d9000115 	stw	r4,4(sp)
  80a738:	20bf7016 	blt	r4,r2,80a4fc <_realloc_r+0x22c>
  80a73c:	b8c00317 	ldw	r3,12(r23)
  80a740:	b8800217 	ldw	r2,8(r23)
  80a744:	99bfff04 	addi	r6,r19,-4
  80a748:	01400904 	movi	r5,36
  80a74c:	18800215 	stw	r2,8(r3)
  80a750:	10c00315 	stw	r3,12(r2)
  80a754:	bc400204 	addi	r17,r23,8
  80a758:	29804136 	bltu	r5,r6,80a860 <_realloc_r+0x590>
  80a75c:	008004c4 	movi	r2,19
  80a760:	9009883a 	mov	r4,r18
  80a764:	880f883a 	mov	r7,r17
  80a768:	11800f2e 	bgeu	r2,r6,80a7a8 <_realloc_r+0x4d8>
  80a76c:	90800017 	ldw	r2,0(r18)
  80a770:	b9c00404 	addi	r7,r23,16
  80a774:	91000204 	addi	r4,r18,8
  80a778:	b8800215 	stw	r2,8(r23)
  80a77c:	90c00117 	ldw	r3,4(r18)
  80a780:	008006c4 	movi	r2,27
  80a784:	b8c00315 	stw	r3,12(r23)
  80a788:	1180072e 	bgeu	r2,r6,80a7a8 <_realloc_r+0x4d8>
  80a78c:	90c00217 	ldw	r3,8(r18)
  80a790:	b9c00604 	addi	r7,r23,24
  80a794:	91000404 	addi	r4,r18,16
  80a798:	b8c00415 	stw	r3,16(r23)
  80a79c:	90800317 	ldw	r2,12(r18)
  80a7a0:	b8800515 	stw	r2,20(r23)
  80a7a4:	31404026 	beq	r6,r5,80a8a8 <_realloc_r+0x5d8>
  80a7a8:	20800017 	ldw	r2,0(r4)
  80a7ac:	38800015 	stw	r2,0(r7)
  80a7b0:	20c00117 	ldw	r3,4(r4)
  80a7b4:	38c00115 	stw	r3,4(r7)
  80a7b8:	20800217 	ldw	r2,8(r4)
  80a7bc:	38800215 	stw	r2,8(r7)
  80a7c0:	d8c00117 	ldw	r3,4(sp)
  80a7c4:	bf0b883a 	add	r5,r23,fp
  80a7c8:	b009883a 	mov	r4,r22
  80a7cc:	1f05c83a 	sub	r2,r3,fp
  80a7d0:	10800054 	ori	r2,r2,1
  80a7d4:	28800115 	stw	r2,4(r5)
  80a7d8:	b8c00117 	ldw	r3,4(r23)
  80a7dc:	00802074 	movhi	r2,129
  80a7e0:	10899a04 	addi	r2,r2,9832
  80a7e4:	11400215 	stw	r5,8(r2)
  80a7e8:	18c0004c 	andi	r3,r3,1
  80a7ec:	e0c6b03a 	or	r3,fp,r3
  80a7f0:	b8c00115 	stw	r3,4(r23)
  80a7f4:	080cd040 	call	80cd04 <__malloc_unlock>
  80a7f8:	003eeb06 	br	80a3a8 <_realloc_r+0xd8>
  80a7fc:	20800117 	ldw	r2,4(r4)
  80a800:	00ffff04 	movi	r3,-4
  80a804:	800f883a 	mov	r7,r16
  80a808:	10c4703a 	and	r2,r2,r3
  80a80c:	98a9883a 	add	r20,r19,r2
  80a810:	84000204 	addi	r16,r16,8
  80a814:	003ecf06 	br	80a354 <_realloc_r+0x84>
  80a818:	900b883a 	mov	r5,r18
  80a81c:	8009883a 	mov	r4,r16
  80a820:	08091640 	call	809164 <memmove>
  80a824:	dd000017 	ldw	r20,0(sp)
  80a828:	b80f883a 	mov	r7,r23
  80a82c:	003ec906 	br	80a354 <_realloc_r+0x84>
  80a830:	900b883a 	mov	r5,r18
  80a834:	8009883a 	mov	r4,r16
  80a838:	08091640 	call	809164 <memmove>
  80a83c:	b80f883a 	mov	r7,r23
  80a840:	003ec406 	br	80a354 <_realloc_r+0x84>
  80a844:	90c00417 	ldw	r3,16(r18)
  80a848:	89400604 	addi	r5,r17,24
  80a84c:	91000604 	addi	r4,r18,24
  80a850:	88c00415 	stw	r3,16(r17)
  80a854:	90800517 	ldw	r2,20(r18)
  80a858:	88800515 	stw	r2,20(r17)
  80a85c:	003f6806 	br	80a600 <_realloc_r+0x330>
  80a860:	900b883a 	mov	r5,r18
  80a864:	8809883a 	mov	r4,r17
  80a868:	08091640 	call	809164 <memmove>
  80a86c:	003fd406 	br	80a7c0 <_realloc_r+0x4f0>
  80a870:	90c00417 	ldw	r3,16(r18)
  80a874:	91000604 	addi	r4,r18,24
  80a878:	ba000804 	addi	r8,r23,32
  80a87c:	b8c00615 	stw	r3,24(r23)
  80a880:	90800517 	ldw	r2,20(r18)
  80a884:	b8800715 	stw	r2,28(r23)
  80a888:	003f1206 	br	80a4d4 <_realloc_r+0x204>
  80a88c:	90c00417 	ldw	r3,16(r18)
  80a890:	91000604 	addi	r4,r18,24
  80a894:	ba000804 	addi	r8,r23,32
  80a898:	b8c00615 	stw	r3,24(r23)
  80a89c:	90800517 	ldw	r2,20(r18)
  80a8a0:	b8800715 	stw	r2,28(r23)
  80a8a4:	003f3206 	br	80a570 <_realloc_r+0x2a0>
  80a8a8:	90c00417 	ldw	r3,16(r18)
  80a8ac:	91000604 	addi	r4,r18,24
  80a8b0:	b9c00804 	addi	r7,r23,32
  80a8b4:	b8c00615 	stw	r3,24(r23)
  80a8b8:	90800517 	ldw	r2,20(r18)
  80a8bc:	b8800715 	stw	r2,28(r23)
  80a8c0:	003fb906 	br	80a7a8 <_realloc_r+0x4d8>

0080a8c4 <__isinfd>:
  80a8c4:	200d883a 	mov	r6,r4
  80a8c8:	0109c83a 	sub	r4,zero,r4
  80a8cc:	2188b03a 	or	r4,r4,r6
  80a8d0:	2008d7fa 	srli	r4,r4,31
  80a8d4:	00a00034 	movhi	r2,32768
  80a8d8:	10bfffc4 	addi	r2,r2,-1
  80a8dc:	1144703a 	and	r2,r2,r5
  80a8e0:	2088b03a 	or	r4,r4,r2
  80a8e4:	009ffc34 	movhi	r2,32752
  80a8e8:	1105c83a 	sub	r2,r2,r4
  80a8ec:	0087c83a 	sub	r3,zero,r2
  80a8f0:	10c4b03a 	or	r2,r2,r3
  80a8f4:	1004d7fa 	srli	r2,r2,31
  80a8f8:	00c00044 	movi	r3,1
  80a8fc:	1885c83a 	sub	r2,r3,r2
  80a900:	f800283a 	ret

0080a904 <__isnand>:
  80a904:	200d883a 	mov	r6,r4
  80a908:	0109c83a 	sub	r4,zero,r4
  80a90c:	2188b03a 	or	r4,r4,r6
  80a910:	2008d7fa 	srli	r4,r4,31
  80a914:	00a00034 	movhi	r2,32768
  80a918:	10bfffc4 	addi	r2,r2,-1
  80a91c:	1144703a 	and	r2,r2,r5
  80a920:	2088b03a 	or	r4,r4,r2
  80a924:	009ffc34 	movhi	r2,32752
  80a928:	1105c83a 	sub	r2,r2,r4
  80a92c:	1004d7fa 	srli	r2,r2,31
  80a930:	f800283a 	ret

0080a934 <_sbrk_r>:
  80a934:	defffd04 	addi	sp,sp,-12
  80a938:	dc000015 	stw	r16,0(sp)
  80a93c:	04002074 	movhi	r16,129
  80a940:	8416a004 	addi	r16,r16,23168
  80a944:	dc400115 	stw	r17,4(sp)
  80a948:	80000015 	stw	zero,0(r16)
  80a94c:	2023883a 	mov	r17,r4
  80a950:	2809883a 	mov	r4,r5
  80a954:	dfc00215 	stw	ra,8(sp)
  80a958:	080cf040 	call	80cf04 <sbrk>
  80a95c:	1007883a 	mov	r3,r2
  80a960:	00bfffc4 	movi	r2,-1
  80a964:	18800626 	beq	r3,r2,80a980 <_sbrk_r+0x4c>
  80a968:	1805883a 	mov	r2,r3
  80a96c:	dfc00217 	ldw	ra,8(sp)
  80a970:	dc400117 	ldw	r17,4(sp)
  80a974:	dc000017 	ldw	r16,0(sp)
  80a978:	dec00304 	addi	sp,sp,12
  80a97c:	f800283a 	ret
  80a980:	80800017 	ldw	r2,0(r16)
  80a984:	103ff826 	beq	r2,zero,80a968 <_sbrk_r+0x34>
  80a988:	88800015 	stw	r2,0(r17)
  80a98c:	1805883a 	mov	r2,r3
  80a990:	dfc00217 	ldw	ra,8(sp)
  80a994:	dc400117 	ldw	r17,4(sp)
  80a998:	dc000017 	ldw	r16,0(sp)
  80a99c:	dec00304 	addi	sp,sp,12
  80a9a0:	f800283a 	ret

0080a9a4 <__sclose>:
  80a9a4:	2940038f 	ldh	r5,14(r5)
  80a9a8:	080acd81 	jmpi	80acd8 <_close_r>

0080a9ac <__sseek>:
  80a9ac:	defffe04 	addi	sp,sp,-8
  80a9b0:	dc000015 	stw	r16,0(sp)
  80a9b4:	2821883a 	mov	r16,r5
  80a9b8:	2940038f 	ldh	r5,14(r5)
  80a9bc:	dfc00115 	stw	ra,4(sp)
  80a9c0:	080af500 	call	80af50 <_lseek_r>
  80a9c4:	1007883a 	mov	r3,r2
  80a9c8:	00bfffc4 	movi	r2,-1
  80a9cc:	18800926 	beq	r3,r2,80a9f4 <__sseek+0x48>
  80a9d0:	8080030b 	ldhu	r2,12(r16)
  80a9d4:	80c01415 	stw	r3,80(r16)
  80a9d8:	10840014 	ori	r2,r2,4096
  80a9dc:	8080030d 	sth	r2,12(r16)
  80a9e0:	1805883a 	mov	r2,r3
  80a9e4:	dfc00117 	ldw	ra,4(sp)
  80a9e8:	dc000017 	ldw	r16,0(sp)
  80a9ec:	dec00204 	addi	sp,sp,8
  80a9f0:	f800283a 	ret
  80a9f4:	8080030b 	ldhu	r2,12(r16)
  80a9f8:	10bbffcc 	andi	r2,r2,61439
  80a9fc:	8080030d 	sth	r2,12(r16)
  80aa00:	1805883a 	mov	r2,r3
  80aa04:	dfc00117 	ldw	ra,4(sp)
  80aa08:	dc000017 	ldw	r16,0(sp)
  80aa0c:	dec00204 	addi	sp,sp,8
  80aa10:	f800283a 	ret

0080aa14 <__swrite>:
  80aa14:	2880030b 	ldhu	r2,12(r5)
  80aa18:	defffb04 	addi	sp,sp,-20
  80aa1c:	dcc00315 	stw	r19,12(sp)
  80aa20:	1080400c 	andi	r2,r2,256
  80aa24:	dc800215 	stw	r18,8(sp)
  80aa28:	dc400115 	stw	r17,4(sp)
  80aa2c:	dc000015 	stw	r16,0(sp)
  80aa30:	3027883a 	mov	r19,r6
  80aa34:	3825883a 	mov	r18,r7
  80aa38:	dfc00415 	stw	ra,16(sp)
  80aa3c:	2821883a 	mov	r16,r5
  80aa40:	000d883a 	mov	r6,zero
  80aa44:	01c00084 	movi	r7,2
  80aa48:	2023883a 	mov	r17,r4
  80aa4c:	10000226 	beq	r2,zero,80aa58 <__swrite+0x44>
  80aa50:	2940038f 	ldh	r5,14(r5)
  80aa54:	080af500 	call	80af50 <_lseek_r>
  80aa58:	8080030b 	ldhu	r2,12(r16)
  80aa5c:	8140038f 	ldh	r5,14(r16)
  80aa60:	8809883a 	mov	r4,r17
  80aa64:	10bbffcc 	andi	r2,r2,61439
  80aa68:	980d883a 	mov	r6,r19
  80aa6c:	900f883a 	mov	r7,r18
  80aa70:	8080030d 	sth	r2,12(r16)
  80aa74:	dfc00417 	ldw	ra,16(sp)
  80aa78:	dcc00317 	ldw	r19,12(sp)
  80aa7c:	dc800217 	ldw	r18,8(sp)
  80aa80:	dc400117 	ldw	r17,4(sp)
  80aa84:	dc000017 	ldw	r16,0(sp)
  80aa88:	dec00504 	addi	sp,sp,20
  80aa8c:	080abac1 	jmpi	80abac <_write_r>

0080aa90 <__sread>:
  80aa90:	defffe04 	addi	sp,sp,-8
  80aa94:	dc000015 	stw	r16,0(sp)
  80aa98:	2821883a 	mov	r16,r5
  80aa9c:	2940038f 	ldh	r5,14(r5)
  80aaa0:	dfc00115 	stw	ra,4(sp)
  80aaa4:	080afc80 	call	80afc8 <_read_r>
  80aaa8:	1007883a 	mov	r3,r2
  80aaac:	10000816 	blt	r2,zero,80aad0 <__sread+0x40>
  80aab0:	80801417 	ldw	r2,80(r16)
  80aab4:	10c5883a 	add	r2,r2,r3
  80aab8:	80801415 	stw	r2,80(r16)
  80aabc:	1805883a 	mov	r2,r3
  80aac0:	dfc00117 	ldw	ra,4(sp)
  80aac4:	dc000017 	ldw	r16,0(sp)
  80aac8:	dec00204 	addi	sp,sp,8
  80aacc:	f800283a 	ret
  80aad0:	8080030b 	ldhu	r2,12(r16)
  80aad4:	10bbffcc 	andi	r2,r2,61439
  80aad8:	8080030d 	sth	r2,12(r16)
  80aadc:	1805883a 	mov	r2,r3
  80aae0:	dfc00117 	ldw	ra,4(sp)
  80aae4:	dc000017 	ldw	r16,0(sp)
  80aae8:	dec00204 	addi	sp,sp,8
  80aaec:	f800283a 	ret

0080aaf0 <strcmp>:
  80aaf0:	2144b03a 	or	r2,r4,r5
  80aaf4:	108000cc 	andi	r2,r2,3
  80aaf8:	10001d1e 	bne	r2,zero,80ab70 <strcmp+0x80>
  80aafc:	200f883a 	mov	r7,r4
  80ab00:	28800017 	ldw	r2,0(r5)
  80ab04:	21000017 	ldw	r4,0(r4)
  80ab08:	280d883a 	mov	r6,r5
  80ab0c:	2080161e 	bne	r4,r2,80ab68 <strcmp+0x78>
  80ab10:	023fbff4 	movhi	r8,65279
  80ab14:	423fbfc4 	addi	r8,r8,-257
  80ab18:	2207883a 	add	r3,r4,r8
  80ab1c:	01602074 	movhi	r5,32897
  80ab20:	29602004 	addi	r5,r5,-32640
  80ab24:	1946703a 	and	r3,r3,r5
  80ab28:	0104303a 	nor	r2,zero,r4
  80ab2c:	10c4703a 	and	r2,r2,r3
  80ab30:	10001c1e 	bne	r2,zero,80aba4 <strcmp+0xb4>
  80ab34:	4013883a 	mov	r9,r8
  80ab38:	2811883a 	mov	r8,r5
  80ab3c:	00000106 	br	80ab44 <strcmp+0x54>
  80ab40:	1800181e 	bne	r3,zero,80aba4 <strcmp+0xb4>
  80ab44:	39c00104 	addi	r7,r7,4
  80ab48:	39000017 	ldw	r4,0(r7)
  80ab4c:	31800104 	addi	r6,r6,4
  80ab50:	31400017 	ldw	r5,0(r6)
  80ab54:	2245883a 	add	r2,r4,r9
  80ab58:	1204703a 	and	r2,r2,r8
  80ab5c:	0106303a 	nor	r3,zero,r4
  80ab60:	1886703a 	and	r3,r3,r2
  80ab64:	217ff626 	beq	r4,r5,80ab40 <strcmp+0x50>
  80ab68:	3809883a 	mov	r4,r7
  80ab6c:	300b883a 	mov	r5,r6
  80ab70:	20c00007 	ldb	r3,0(r4)
  80ab74:	1800051e 	bne	r3,zero,80ab8c <strcmp+0x9c>
  80ab78:	00000606 	br	80ab94 <strcmp+0xa4>
  80ab7c:	21000044 	addi	r4,r4,1
  80ab80:	20c00007 	ldb	r3,0(r4)
  80ab84:	29400044 	addi	r5,r5,1
  80ab88:	18000226 	beq	r3,zero,80ab94 <strcmp+0xa4>
  80ab8c:	28800007 	ldb	r2,0(r5)
  80ab90:	18bffa26 	beq	r3,r2,80ab7c <strcmp+0x8c>
  80ab94:	20c00003 	ldbu	r3,0(r4)
  80ab98:	28800003 	ldbu	r2,0(r5)
  80ab9c:	1885c83a 	sub	r2,r3,r2
  80aba0:	f800283a 	ret
  80aba4:	0005883a 	mov	r2,zero
  80aba8:	f800283a 	ret

0080abac <_write_r>:
  80abac:	defffd04 	addi	sp,sp,-12
  80abb0:	dc000015 	stw	r16,0(sp)
  80abb4:	04002074 	movhi	r16,129
  80abb8:	8416a004 	addi	r16,r16,23168
  80abbc:	dc400115 	stw	r17,4(sp)
  80abc0:	80000015 	stw	zero,0(r16)
  80abc4:	2023883a 	mov	r17,r4
  80abc8:	2809883a 	mov	r4,r5
  80abcc:	300b883a 	mov	r5,r6
  80abd0:	380d883a 	mov	r6,r7
  80abd4:	dfc00215 	stw	ra,8(sp)
  80abd8:	080cfc00 	call	80cfc0 <write>
  80abdc:	1007883a 	mov	r3,r2
  80abe0:	00bfffc4 	movi	r2,-1
  80abe4:	18800626 	beq	r3,r2,80ac00 <_write_r+0x54>
  80abe8:	1805883a 	mov	r2,r3
  80abec:	dfc00217 	ldw	ra,8(sp)
  80abf0:	dc400117 	ldw	r17,4(sp)
  80abf4:	dc000017 	ldw	r16,0(sp)
  80abf8:	dec00304 	addi	sp,sp,12
  80abfc:	f800283a 	ret
  80ac00:	80800017 	ldw	r2,0(r16)
  80ac04:	103ff826 	beq	r2,zero,80abe8 <_write_r+0x3c>
  80ac08:	88800015 	stw	r2,0(r17)
  80ac0c:	1805883a 	mov	r2,r3
  80ac10:	dfc00217 	ldw	ra,8(sp)
  80ac14:	dc400117 	ldw	r17,4(sp)
  80ac18:	dc000017 	ldw	r16,0(sp)
  80ac1c:	dec00304 	addi	sp,sp,12
  80ac20:	f800283a 	ret

0080ac24 <_calloc_r>:
  80ac24:	298b383a 	mul	r5,r5,r6
  80ac28:	defffe04 	addi	sp,sp,-8
  80ac2c:	dc000015 	stw	r16,0(sp)
  80ac30:	dfc00115 	stw	ra,4(sp)
  80ac34:	08088a00 	call	8088a0 <_malloc_r>
  80ac38:	1021883a 	mov	r16,r2
  80ac3c:	01c00904 	movi	r7,36
  80ac40:	10000d26 	beq	r2,zero,80ac78 <_calloc_r+0x54>
  80ac44:	10ffff17 	ldw	r3,-4(r2)
  80ac48:	1009883a 	mov	r4,r2
  80ac4c:	00bfff04 	movi	r2,-4
  80ac50:	1886703a 	and	r3,r3,r2
  80ac54:	1887883a 	add	r3,r3,r2
  80ac58:	180d883a 	mov	r6,r3
  80ac5c:	000b883a 	mov	r5,zero
  80ac60:	38c01736 	bltu	r7,r3,80acc0 <_calloc_r+0x9c>
  80ac64:	008004c4 	movi	r2,19
  80ac68:	10c00836 	bltu	r2,r3,80ac8c <_calloc_r+0x68>
  80ac6c:	20000215 	stw	zero,8(r4)
  80ac70:	20000015 	stw	zero,0(r4)
  80ac74:	20000115 	stw	zero,4(r4)
  80ac78:	8005883a 	mov	r2,r16
  80ac7c:	dfc00117 	ldw	ra,4(sp)
  80ac80:	dc000017 	ldw	r16,0(sp)
  80ac84:	dec00204 	addi	sp,sp,8
  80ac88:	f800283a 	ret
  80ac8c:	008006c4 	movi	r2,27
  80ac90:	80000015 	stw	zero,0(r16)
  80ac94:	80000115 	stw	zero,4(r16)
  80ac98:	81000204 	addi	r4,r16,8
  80ac9c:	10fff32e 	bgeu	r2,r3,80ac6c <_calloc_r+0x48>
  80aca0:	80000215 	stw	zero,8(r16)
  80aca4:	80000315 	stw	zero,12(r16)
  80aca8:	81000404 	addi	r4,r16,16
  80acac:	19ffef1e 	bne	r3,r7,80ac6c <_calloc_r+0x48>
  80acb0:	81000604 	addi	r4,r16,24
  80acb4:	80000415 	stw	zero,16(r16)
  80acb8:	80000515 	stw	zero,20(r16)
  80acbc:	003feb06 	br	80ac6c <_calloc_r+0x48>
  80acc0:	08092440 	call	809244 <memset>
  80acc4:	8005883a 	mov	r2,r16
  80acc8:	dfc00117 	ldw	ra,4(sp)
  80accc:	dc000017 	ldw	r16,0(sp)
  80acd0:	dec00204 	addi	sp,sp,8
  80acd4:	f800283a 	ret

0080acd8 <_close_r>:
  80acd8:	defffd04 	addi	sp,sp,-12
  80acdc:	dc000015 	stw	r16,0(sp)
  80ace0:	04002074 	movhi	r16,129
  80ace4:	8416a004 	addi	r16,r16,23168
  80ace8:	dc400115 	stw	r17,4(sp)
  80acec:	80000015 	stw	zero,0(r16)
  80acf0:	2023883a 	mov	r17,r4
  80acf4:	2809883a 	mov	r4,r5
  80acf8:	dfc00215 	stw	ra,8(sp)
  80acfc:	080c6600 	call	80c660 <close>
  80ad00:	1007883a 	mov	r3,r2
  80ad04:	00bfffc4 	movi	r2,-1
  80ad08:	18800626 	beq	r3,r2,80ad24 <_close_r+0x4c>
  80ad0c:	1805883a 	mov	r2,r3
  80ad10:	dfc00217 	ldw	ra,8(sp)
  80ad14:	dc400117 	ldw	r17,4(sp)
  80ad18:	dc000017 	ldw	r16,0(sp)
  80ad1c:	dec00304 	addi	sp,sp,12
  80ad20:	f800283a 	ret
  80ad24:	80800017 	ldw	r2,0(r16)
  80ad28:	103ff826 	beq	r2,zero,80ad0c <_close_r+0x34>
  80ad2c:	88800015 	stw	r2,0(r17)
  80ad30:	1805883a 	mov	r2,r3
  80ad34:	dfc00217 	ldw	ra,8(sp)
  80ad38:	dc400117 	ldw	r17,4(sp)
  80ad3c:	dc000017 	ldw	r16,0(sp)
  80ad40:	dec00304 	addi	sp,sp,12
  80ad44:	f800283a 	ret

0080ad48 <_fclose_r>:
  80ad48:	defffc04 	addi	sp,sp,-16
  80ad4c:	dc400115 	stw	r17,4(sp)
  80ad50:	dc000015 	stw	r16,0(sp)
  80ad54:	dfc00315 	stw	ra,12(sp)
  80ad58:	dc800215 	stw	r18,8(sp)
  80ad5c:	2821883a 	mov	r16,r5
  80ad60:	2023883a 	mov	r17,r4
  80ad64:	28002926 	beq	r5,zero,80ae0c <_fclose_r+0xc4>
  80ad68:	08079840 	call	807984 <__sfp_lock_acquire>
  80ad6c:	88000226 	beq	r17,zero,80ad78 <_fclose_r+0x30>
  80ad70:	88800e17 	ldw	r2,56(r17)
  80ad74:	10002d26 	beq	r2,zero,80ae2c <_fclose_r+0xe4>
  80ad78:	8080030f 	ldh	r2,12(r16)
  80ad7c:	10002226 	beq	r2,zero,80ae08 <_fclose_r+0xc0>
  80ad80:	8809883a 	mov	r4,r17
  80ad84:	800b883a 	mov	r5,r16
  80ad88:	08076fc0 	call	8076fc <_fflush_r>
  80ad8c:	1025883a 	mov	r18,r2
  80ad90:	80800b17 	ldw	r2,44(r16)
  80ad94:	10000426 	beq	r2,zero,80ada8 <_fclose_r+0x60>
  80ad98:	81400717 	ldw	r5,28(r16)
  80ad9c:	8809883a 	mov	r4,r17
  80ada0:	103ee83a 	callr	r2
  80ada4:	10002a16 	blt	r2,zero,80ae50 <_fclose_r+0x108>
  80ada8:	8080030b 	ldhu	r2,12(r16)
  80adac:	1080200c 	andi	r2,r2,128
  80adb0:	1000231e 	bne	r2,zero,80ae40 <_fclose_r+0xf8>
  80adb4:	81400c17 	ldw	r5,48(r16)
  80adb8:	28000526 	beq	r5,zero,80add0 <_fclose_r+0x88>
  80adbc:	80801004 	addi	r2,r16,64
  80adc0:	28800226 	beq	r5,r2,80adcc <_fclose_r+0x84>
  80adc4:	8809883a 	mov	r4,r17
  80adc8:	0807d180 	call	807d18 <_free_r>
  80adcc:	80000c15 	stw	zero,48(r16)
  80add0:	81401117 	ldw	r5,68(r16)
  80add4:	28000326 	beq	r5,zero,80ade4 <_fclose_r+0x9c>
  80add8:	8809883a 	mov	r4,r17
  80addc:	0807d180 	call	807d18 <_free_r>
  80ade0:	80001115 	stw	zero,68(r16)
  80ade4:	8000030d 	sth	zero,12(r16)
  80ade8:	08079880 	call	807988 <__sfp_lock_release>
  80adec:	9005883a 	mov	r2,r18
  80adf0:	dfc00317 	ldw	ra,12(sp)
  80adf4:	dc800217 	ldw	r18,8(sp)
  80adf8:	dc400117 	ldw	r17,4(sp)
  80adfc:	dc000017 	ldw	r16,0(sp)
  80ae00:	dec00404 	addi	sp,sp,16
  80ae04:	f800283a 	ret
  80ae08:	08079880 	call	807988 <__sfp_lock_release>
  80ae0c:	0025883a 	mov	r18,zero
  80ae10:	9005883a 	mov	r2,r18
  80ae14:	dfc00317 	ldw	ra,12(sp)
  80ae18:	dc800217 	ldw	r18,8(sp)
  80ae1c:	dc400117 	ldw	r17,4(sp)
  80ae20:	dc000017 	ldw	r16,0(sp)
  80ae24:	dec00404 	addi	sp,sp,16
  80ae28:	f800283a 	ret
  80ae2c:	8809883a 	mov	r4,r17
  80ae30:	08079940 	call	807994 <__sinit>
  80ae34:	8080030f 	ldh	r2,12(r16)
  80ae38:	103fd11e 	bne	r2,zero,80ad80 <_fclose_r+0x38>
  80ae3c:	003ff206 	br	80ae08 <_fclose_r+0xc0>
  80ae40:	81400417 	ldw	r5,16(r16)
  80ae44:	8809883a 	mov	r4,r17
  80ae48:	0807d180 	call	807d18 <_free_r>
  80ae4c:	003fd906 	br	80adb4 <_fclose_r+0x6c>
  80ae50:	04bfffc4 	movi	r18,-1
  80ae54:	003fd406 	br	80ada8 <_fclose_r+0x60>

0080ae58 <fclose>:
  80ae58:	00802074 	movhi	r2,129
  80ae5c:	108f8304 	addi	r2,r2,15884
  80ae60:	200b883a 	mov	r5,r4
  80ae64:	11000017 	ldw	r4,0(r2)
  80ae68:	080ad481 	jmpi	80ad48 <_fclose_r>

0080ae6c <_fstat_r>:
  80ae6c:	defffd04 	addi	sp,sp,-12
  80ae70:	dc000015 	stw	r16,0(sp)
  80ae74:	04002074 	movhi	r16,129
  80ae78:	8416a004 	addi	r16,r16,23168
  80ae7c:	dc400115 	stw	r17,4(sp)
  80ae80:	80000015 	stw	zero,0(r16)
  80ae84:	2023883a 	mov	r17,r4
  80ae88:	2809883a 	mov	r4,r5
  80ae8c:	300b883a 	mov	r5,r6
  80ae90:	dfc00215 	stw	ra,8(sp)
  80ae94:	080c7e80 	call	80c7e8 <fstat>
  80ae98:	1007883a 	mov	r3,r2
  80ae9c:	00bfffc4 	movi	r2,-1
  80aea0:	18800626 	beq	r3,r2,80aebc <_fstat_r+0x50>
  80aea4:	1805883a 	mov	r2,r3
  80aea8:	dfc00217 	ldw	ra,8(sp)
  80aeac:	dc400117 	ldw	r17,4(sp)
  80aeb0:	dc000017 	ldw	r16,0(sp)
  80aeb4:	dec00304 	addi	sp,sp,12
  80aeb8:	f800283a 	ret
  80aebc:	80800017 	ldw	r2,0(r16)
  80aec0:	103ff826 	beq	r2,zero,80aea4 <_fstat_r+0x38>
  80aec4:	88800015 	stw	r2,0(r17)
  80aec8:	1805883a 	mov	r2,r3
  80aecc:	dfc00217 	ldw	ra,8(sp)
  80aed0:	dc400117 	ldw	r17,4(sp)
  80aed4:	dc000017 	ldw	r16,0(sp)
  80aed8:	dec00304 	addi	sp,sp,12
  80aedc:	f800283a 	ret

0080aee0 <_isatty_r>:
  80aee0:	defffd04 	addi	sp,sp,-12
  80aee4:	dc000015 	stw	r16,0(sp)
  80aee8:	04002074 	movhi	r16,129
  80aeec:	8416a004 	addi	r16,r16,23168
  80aef0:	dc400115 	stw	r17,4(sp)
  80aef4:	80000015 	stw	zero,0(r16)
  80aef8:	2023883a 	mov	r17,r4
  80aefc:	2809883a 	mov	r4,r5
  80af00:	dfc00215 	stw	ra,8(sp)
  80af04:	080c91c0 	call	80c91c <isatty>
  80af08:	1007883a 	mov	r3,r2
  80af0c:	00bfffc4 	movi	r2,-1
  80af10:	18800626 	beq	r3,r2,80af2c <_isatty_r+0x4c>
  80af14:	1805883a 	mov	r2,r3
  80af18:	dfc00217 	ldw	ra,8(sp)
  80af1c:	dc400117 	ldw	r17,4(sp)
  80af20:	dc000017 	ldw	r16,0(sp)
  80af24:	dec00304 	addi	sp,sp,12
  80af28:	f800283a 	ret
  80af2c:	80800017 	ldw	r2,0(r16)
  80af30:	103ff826 	beq	r2,zero,80af14 <_isatty_r+0x34>
  80af34:	88800015 	stw	r2,0(r17)
  80af38:	1805883a 	mov	r2,r3
  80af3c:	dfc00217 	ldw	ra,8(sp)
  80af40:	dc400117 	ldw	r17,4(sp)
  80af44:	dc000017 	ldw	r16,0(sp)
  80af48:	dec00304 	addi	sp,sp,12
  80af4c:	f800283a 	ret

0080af50 <_lseek_r>:
  80af50:	defffd04 	addi	sp,sp,-12
  80af54:	dc000015 	stw	r16,0(sp)
  80af58:	04002074 	movhi	r16,129
  80af5c:	8416a004 	addi	r16,r16,23168
  80af60:	dc400115 	stw	r17,4(sp)
  80af64:	80000015 	stw	zero,0(r16)
  80af68:	2023883a 	mov	r17,r4
  80af6c:	2809883a 	mov	r4,r5
  80af70:	300b883a 	mov	r5,r6
  80af74:	380d883a 	mov	r6,r7
  80af78:	dfc00215 	stw	ra,8(sp)
  80af7c:	080cb280 	call	80cb28 <lseek>
  80af80:	1007883a 	mov	r3,r2
  80af84:	00bfffc4 	movi	r2,-1
  80af88:	18800626 	beq	r3,r2,80afa4 <_lseek_r+0x54>
  80af8c:	1805883a 	mov	r2,r3
  80af90:	dfc00217 	ldw	ra,8(sp)
  80af94:	dc400117 	ldw	r17,4(sp)
  80af98:	dc000017 	ldw	r16,0(sp)
  80af9c:	dec00304 	addi	sp,sp,12
  80afa0:	f800283a 	ret
  80afa4:	80800017 	ldw	r2,0(r16)
  80afa8:	103ff826 	beq	r2,zero,80af8c <_lseek_r+0x3c>
  80afac:	88800015 	stw	r2,0(r17)
  80afb0:	1805883a 	mov	r2,r3
  80afb4:	dfc00217 	ldw	ra,8(sp)
  80afb8:	dc400117 	ldw	r17,4(sp)
  80afbc:	dc000017 	ldw	r16,0(sp)
  80afc0:	dec00304 	addi	sp,sp,12
  80afc4:	f800283a 	ret

0080afc8 <_read_r>:
  80afc8:	defffd04 	addi	sp,sp,-12
  80afcc:	dc000015 	stw	r16,0(sp)
  80afd0:	04002074 	movhi	r16,129
  80afd4:	8416a004 	addi	r16,r16,23168
  80afd8:	dc400115 	stw	r17,4(sp)
  80afdc:	80000015 	stw	zero,0(r16)
  80afe0:	2023883a 	mov	r17,r4
  80afe4:	2809883a 	mov	r4,r5
  80afe8:	300b883a 	mov	r5,r6
  80afec:	380d883a 	mov	r6,r7
  80aff0:	dfc00215 	stw	ra,8(sp)
  80aff4:	080cd240 	call	80cd24 <read>
  80aff8:	1007883a 	mov	r3,r2
  80affc:	00bfffc4 	movi	r2,-1
  80b000:	18800626 	beq	r3,r2,80b01c <_read_r+0x54>
  80b004:	1805883a 	mov	r2,r3
  80b008:	dfc00217 	ldw	ra,8(sp)
  80b00c:	dc400117 	ldw	r17,4(sp)
  80b010:	dc000017 	ldw	r16,0(sp)
  80b014:	dec00304 	addi	sp,sp,12
  80b018:	f800283a 	ret
  80b01c:	80800017 	ldw	r2,0(r16)
  80b020:	103ff826 	beq	r2,zero,80b004 <_read_r+0x3c>
  80b024:	88800015 	stw	r2,0(r17)
  80b028:	1805883a 	mov	r2,r3
  80b02c:	dfc00217 	ldw	ra,8(sp)
  80b030:	dc400117 	ldw	r17,4(sp)
  80b034:	dc000017 	ldw	r16,0(sp)
  80b038:	dec00304 	addi	sp,sp,12
  80b03c:	f800283a 	ret

0080b040 <__udivdi3>:
  80b040:	defff004 	addi	sp,sp,-64
  80b044:	2005883a 	mov	r2,r4
  80b048:	3011883a 	mov	r8,r6
  80b04c:	df000e15 	stw	fp,56(sp)
  80b050:	dd000a15 	stw	r20,40(sp)
  80b054:	dc000615 	stw	r16,24(sp)
  80b058:	dfc00f15 	stw	ra,60(sp)
  80b05c:	ddc00d15 	stw	r23,52(sp)
  80b060:	dd800c15 	stw	r22,48(sp)
  80b064:	dd400b15 	stw	r21,44(sp)
  80b068:	dcc00915 	stw	r19,36(sp)
  80b06c:	dc800815 	stw	r18,32(sp)
  80b070:	dc400715 	stw	r17,28(sp)
  80b074:	4021883a 	mov	r16,r8
  80b078:	1039883a 	mov	fp,r2
  80b07c:	2829883a 	mov	r20,r5
  80b080:	38003b1e 	bne	r7,zero,80b170 <__udivdi3+0x130>
  80b084:	2a005c36 	bltu	r5,r8,80b1f8 <__udivdi3+0x1b8>
  80b088:	4000a626 	beq	r8,zero,80b324 <__udivdi3+0x2e4>
  80b08c:	00bfffd4 	movui	r2,65535
  80b090:	14009e36 	bltu	r2,r16,80b30c <__udivdi3+0x2cc>
  80b094:	00803fc4 	movi	r2,255
  80b098:	14013d36 	bltu	r2,r16,80b590 <__udivdi3+0x550>
  80b09c:	000b883a 	mov	r5,zero
  80b0a0:	0005883a 	mov	r2,zero
  80b0a4:	8084d83a 	srl	r2,r16,r2
  80b0a8:	01002074 	movhi	r4,129
  80b0ac:	21078104 	addi	r4,r4,7684
  80b0b0:	01800804 	movi	r6,32
  80b0b4:	1105883a 	add	r2,r2,r4
  80b0b8:	10c00003 	ldbu	r3,0(r2)
  80b0bc:	28c7883a 	add	r3,r5,r3
  80b0c0:	30edc83a 	sub	r22,r6,r3
  80b0c4:	b000ee1e 	bne	r22,zero,80b480 <__udivdi3+0x440>
  80b0c8:	802ad43a 	srli	r21,r16,16
  80b0cc:	00800044 	movi	r2,1
  80b0d0:	a423c83a 	sub	r17,r20,r16
  80b0d4:	85ffffcc 	andi	r23,r16,65535
  80b0d8:	d8800315 	stw	r2,12(sp)
  80b0dc:	8809883a 	mov	r4,r17
  80b0e0:	a80b883a 	mov	r5,r21
  80b0e4:	080c6500 	call	80c650 <__udivsi3>
  80b0e8:	8809883a 	mov	r4,r17
  80b0ec:	a80b883a 	mov	r5,r21
  80b0f0:	102d883a 	mov	r22,r2
  80b0f4:	080c6580 	call	80c658 <__umodsi3>
  80b0f8:	1004943a 	slli	r2,r2,16
  80b0fc:	e006d43a 	srli	r3,fp,16
  80b100:	bda3383a 	mul	r17,r23,r22
  80b104:	10c4b03a 	or	r2,r2,r3
  80b108:	1440042e 	bgeu	r2,r17,80b11c <__udivdi3+0xdc>
  80b10c:	1405883a 	add	r2,r2,r16
  80b110:	b5bfffc4 	addi	r22,r22,-1
  80b114:	14000136 	bltu	r2,r16,80b11c <__udivdi3+0xdc>
  80b118:	14413d36 	bltu	r2,r17,80b610 <__udivdi3+0x5d0>
  80b11c:	1463c83a 	sub	r17,r2,r17
  80b120:	8809883a 	mov	r4,r17
  80b124:	a80b883a 	mov	r5,r21
  80b128:	080c6500 	call	80c650 <__udivsi3>
  80b12c:	8809883a 	mov	r4,r17
  80b130:	a80b883a 	mov	r5,r21
  80b134:	1029883a 	mov	r20,r2
  80b138:	080c6580 	call	80c658 <__umodsi3>
  80b13c:	1004943a 	slli	r2,r2,16
  80b140:	bd09383a 	mul	r4,r23,r20
  80b144:	e0ffffcc 	andi	r3,fp,65535
  80b148:	10c4b03a 	or	r2,r2,r3
  80b14c:	1100042e 	bgeu	r2,r4,80b160 <__udivdi3+0x120>
  80b150:	8085883a 	add	r2,r16,r2
  80b154:	a53fffc4 	addi	r20,r20,-1
  80b158:	14000136 	bltu	r2,r16,80b160 <__udivdi3+0x120>
  80b15c:	11012036 	bltu	r2,r4,80b5e0 <__udivdi3+0x5a0>
  80b160:	b004943a 	slli	r2,r22,16
  80b164:	d9000317 	ldw	r4,12(sp)
  80b168:	a084b03a 	or	r2,r20,r2
  80b16c:	00001506 	br	80b1c4 <__udivdi3+0x184>
  80b170:	380d883a 	mov	r6,r7
  80b174:	29c06236 	bltu	r5,r7,80b300 <__udivdi3+0x2c0>
  80b178:	00bfffd4 	movui	r2,65535
  80b17c:	11c05a36 	bltu	r2,r7,80b2e8 <__udivdi3+0x2a8>
  80b180:	00803fc4 	movi	r2,255
  80b184:	11c0fc36 	bltu	r2,r7,80b578 <__udivdi3+0x538>
  80b188:	000b883a 	mov	r5,zero
  80b18c:	0005883a 	mov	r2,zero
  80b190:	3084d83a 	srl	r2,r6,r2
  80b194:	01002074 	movhi	r4,129
  80b198:	21078104 	addi	r4,r4,7684
  80b19c:	01c00804 	movi	r7,32
  80b1a0:	1105883a 	add	r2,r2,r4
  80b1a4:	10c00003 	ldbu	r3,0(r2)
  80b1a8:	28c7883a 	add	r3,r5,r3
  80b1ac:	38efc83a 	sub	r23,r7,r3
  80b1b0:	b800691e 	bne	r23,zero,80b358 <__udivdi3+0x318>
  80b1b4:	35000136 	bltu	r6,r20,80b1bc <__udivdi3+0x17c>
  80b1b8:	e4005136 	bltu	fp,r16,80b300 <__udivdi3+0x2c0>
  80b1bc:	00800044 	movi	r2,1
  80b1c0:	0009883a 	mov	r4,zero
  80b1c4:	2007883a 	mov	r3,r4
  80b1c8:	dfc00f17 	ldw	ra,60(sp)
  80b1cc:	df000e17 	ldw	fp,56(sp)
  80b1d0:	ddc00d17 	ldw	r23,52(sp)
  80b1d4:	dd800c17 	ldw	r22,48(sp)
  80b1d8:	dd400b17 	ldw	r21,44(sp)
  80b1dc:	dd000a17 	ldw	r20,40(sp)
  80b1e0:	dcc00917 	ldw	r19,36(sp)
  80b1e4:	dc800817 	ldw	r18,32(sp)
  80b1e8:	dc400717 	ldw	r17,28(sp)
  80b1ec:	dc000617 	ldw	r16,24(sp)
  80b1f0:	dec01004 	addi	sp,sp,64
  80b1f4:	f800283a 	ret
  80b1f8:	00bfffd4 	movui	r2,65535
  80b1fc:	12005036 	bltu	r2,r8,80b340 <__udivdi3+0x300>
  80b200:	00803fc4 	movi	r2,255
  80b204:	1200e836 	bltu	r2,r8,80b5a8 <__udivdi3+0x568>
  80b208:	000b883a 	mov	r5,zero
  80b20c:	0005883a 	mov	r2,zero
  80b210:	8084d83a 	srl	r2,r16,r2
  80b214:	01002074 	movhi	r4,129
  80b218:	21078104 	addi	r4,r4,7684
  80b21c:	01800804 	movi	r6,32
  80b220:	1105883a 	add	r2,r2,r4
  80b224:	10c00003 	ldbu	r3,0(r2)
  80b228:	28c7883a 	add	r3,r5,r3
  80b22c:	30cbc83a 	sub	r5,r6,r3
  80b230:	28000626 	beq	r5,zero,80b24c <__udivdi3+0x20c>
  80b234:	3145c83a 	sub	r2,r6,r5
  80b238:	e084d83a 	srl	r2,fp,r2
  80b23c:	a146983a 	sll	r3,r20,r5
  80b240:	e178983a 	sll	fp,fp,r5
  80b244:	8160983a 	sll	r16,r16,r5
  80b248:	18a8b03a 	or	r20,r3,r2
  80b24c:	802ad43a 	srli	r21,r16,16
  80b250:	a009883a 	mov	r4,r20
  80b254:	85ffffcc 	andi	r23,r16,65535
  80b258:	a80b883a 	mov	r5,r21
  80b25c:	080c6500 	call	80c650 <__udivsi3>
  80b260:	a009883a 	mov	r4,r20
  80b264:	a80b883a 	mov	r5,r21
  80b268:	102d883a 	mov	r22,r2
  80b26c:	080c6580 	call	80c658 <__umodsi3>
  80b270:	1004943a 	slli	r2,r2,16
  80b274:	e006d43a 	srli	r3,fp,16
  80b278:	bda3383a 	mul	r17,r23,r22
  80b27c:	10c4b03a 	or	r2,r2,r3
  80b280:	1440042e 	bgeu	r2,r17,80b294 <__udivdi3+0x254>
  80b284:	1405883a 	add	r2,r2,r16
  80b288:	b5bfffc4 	addi	r22,r22,-1
  80b28c:	14000136 	bltu	r2,r16,80b294 <__udivdi3+0x254>
  80b290:	1440d536 	bltu	r2,r17,80b5e8 <__udivdi3+0x5a8>
  80b294:	1463c83a 	sub	r17,r2,r17
  80b298:	8809883a 	mov	r4,r17
  80b29c:	a80b883a 	mov	r5,r21
  80b2a0:	080c6500 	call	80c650 <__udivsi3>
  80b2a4:	8809883a 	mov	r4,r17
  80b2a8:	a80b883a 	mov	r5,r21
  80b2ac:	1029883a 	mov	r20,r2
  80b2b0:	080c6580 	call	80c658 <__umodsi3>
  80b2b4:	1004943a 	slli	r2,r2,16
  80b2b8:	bd09383a 	mul	r4,r23,r20
  80b2bc:	e0ffffcc 	andi	r3,fp,65535
  80b2c0:	10c4b03a 	or	r2,r2,r3
  80b2c4:	1100042e 	bgeu	r2,r4,80b2d8 <__udivdi3+0x298>
  80b2c8:	8085883a 	add	r2,r16,r2
  80b2cc:	a53fffc4 	addi	r20,r20,-1
  80b2d0:	14000136 	bltu	r2,r16,80b2d8 <__udivdi3+0x298>
  80b2d4:	1100c736 	bltu	r2,r4,80b5f4 <__udivdi3+0x5b4>
  80b2d8:	b004943a 	slli	r2,r22,16
  80b2dc:	0009883a 	mov	r4,zero
  80b2e0:	a084b03a 	or	r2,r20,r2
  80b2e4:	003fb706 	br	80b1c4 <__udivdi3+0x184>
  80b2e8:	00804034 	movhi	r2,256
  80b2ec:	10bfffc4 	addi	r2,r2,-1
  80b2f0:	11c0a436 	bltu	r2,r7,80b584 <__udivdi3+0x544>
  80b2f4:	01400404 	movi	r5,16
  80b2f8:	2805883a 	mov	r2,r5
  80b2fc:	003fa406 	br	80b190 <__udivdi3+0x150>
  80b300:	0005883a 	mov	r2,zero
  80b304:	0009883a 	mov	r4,zero
  80b308:	003fae06 	br	80b1c4 <__udivdi3+0x184>
  80b30c:	00804034 	movhi	r2,256
  80b310:	10bfffc4 	addi	r2,r2,-1
  80b314:	1400a136 	bltu	r2,r16,80b59c <__udivdi3+0x55c>
  80b318:	01400404 	movi	r5,16
  80b31c:	2805883a 	mov	r2,r5
  80b320:	003f6006 	br	80b0a4 <__udivdi3+0x64>
  80b324:	01000044 	movi	r4,1
  80b328:	000b883a 	mov	r5,zero
  80b32c:	080c6500 	call	80c650 <__udivsi3>
  80b330:	1021883a 	mov	r16,r2
  80b334:	00bfffd4 	movui	r2,65535
  80b338:	143ff436 	bltu	r2,r16,80b30c <__udivdi3+0x2cc>
  80b33c:	003f5506 	br	80b094 <__udivdi3+0x54>
  80b340:	00804034 	movhi	r2,256
  80b344:	10bfffc4 	addi	r2,r2,-1
  80b348:	12009a36 	bltu	r2,r8,80b5b4 <__udivdi3+0x574>
  80b34c:	01400404 	movi	r5,16
  80b350:	2805883a 	mov	r2,r5
  80b354:	003fae06 	br	80b210 <__udivdi3+0x1d0>
  80b358:	3dc5c83a 	sub	r2,r7,r23
  80b35c:	35c8983a 	sll	r4,r6,r23
  80b360:	8086d83a 	srl	r3,r16,r2
  80b364:	a0a2d83a 	srl	r17,r20,r2
  80b368:	e084d83a 	srl	r2,fp,r2
  80b36c:	20eab03a 	or	r21,r4,r3
  80b370:	a82cd43a 	srli	r22,r21,16
  80b374:	a5c6983a 	sll	r3,r20,r23
  80b378:	8809883a 	mov	r4,r17
  80b37c:	b00b883a 	mov	r5,r22
  80b380:	1886b03a 	or	r3,r3,r2
  80b384:	d8c00215 	stw	r3,8(sp)
  80b388:	080c6500 	call	80c650 <__udivsi3>
  80b38c:	8809883a 	mov	r4,r17
  80b390:	b00b883a 	mov	r5,r22
  80b394:	1029883a 	mov	r20,r2
  80b398:	080c6580 	call	80c658 <__umodsi3>
  80b39c:	a8ffffcc 	andi	r3,r21,65535
  80b3a0:	d8c00515 	stw	r3,20(sp)
  80b3a4:	d9000217 	ldw	r4,8(sp)
  80b3a8:	d9400517 	ldw	r5,20(sp)
  80b3ac:	1004943a 	slli	r2,r2,16
  80b3b0:	2006d43a 	srli	r3,r4,16
  80b3b4:	85e0983a 	sll	r16,r16,r23
  80b3b8:	2d23383a 	mul	r17,r5,r20
  80b3bc:	10c4b03a 	or	r2,r2,r3
  80b3c0:	dc000015 	stw	r16,0(sp)
  80b3c4:	1440032e 	bgeu	r2,r17,80b3d4 <__udivdi3+0x394>
  80b3c8:	1545883a 	add	r2,r2,r21
  80b3cc:	a53fffc4 	addi	r20,r20,-1
  80b3d0:	15407f2e 	bgeu	r2,r21,80b5d0 <__udivdi3+0x590>
  80b3d4:	1463c83a 	sub	r17,r2,r17
  80b3d8:	8809883a 	mov	r4,r17
  80b3dc:	b00b883a 	mov	r5,r22
  80b3e0:	080c6500 	call	80c650 <__udivsi3>
  80b3e4:	8809883a 	mov	r4,r17
  80b3e8:	b00b883a 	mov	r5,r22
  80b3ec:	1021883a 	mov	r16,r2
  80b3f0:	080c6580 	call	80c658 <__umodsi3>
  80b3f4:	d8c00517 	ldw	r3,20(sp)
  80b3f8:	d9000217 	ldw	r4,8(sp)
  80b3fc:	1004943a 	slli	r2,r2,16
  80b400:	1c0f383a 	mul	r7,r3,r16
  80b404:	20ffffcc 	andi	r3,r4,65535
  80b408:	10e2b03a 	or	r17,r2,r3
  80b40c:	89c0032e 	bgeu	r17,r7,80b41c <__udivdi3+0x3dc>
  80b410:	8d63883a 	add	r17,r17,r21
  80b414:	843fffc4 	addi	r16,r16,-1
  80b418:	8d40692e 	bgeu	r17,r21,80b5c0 <__udivdi3+0x580>
  80b41c:	a008943a 	slli	r4,r20,16
  80b420:	d9400017 	ldw	r5,0(sp)
  80b424:	89e3c83a 	sub	r17,r17,r7
  80b428:	8110b03a 	or	r8,r16,r4
  80b42c:	280cd43a 	srli	r6,r5,16
  80b430:	28ffffcc 	andi	r3,r5,65535
  80b434:	40bfffcc 	andi	r2,r8,65535
  80b438:	400ad43a 	srli	r5,r8,16
  80b43c:	10d3383a 	mul	r9,r2,r3
  80b440:	1185383a 	mul	r2,r2,r6
  80b444:	28c7383a 	mul	r3,r5,r3
  80b448:	4808d43a 	srli	r4,r9,16
  80b44c:	298b383a 	mul	r5,r5,r6
  80b450:	10c5883a 	add	r2,r2,r3
  80b454:	2089883a 	add	r4,r4,r2
  80b458:	20c0022e 	bgeu	r4,r3,80b464 <__udivdi3+0x424>
  80b45c:	00800074 	movhi	r2,1
  80b460:	288b883a 	add	r5,r5,r2
  80b464:	2004d43a 	srli	r2,r4,16
  80b468:	288b883a 	add	r5,r5,r2
  80b46c:	89403f36 	bltu	r17,r5,80b56c <__udivdi3+0x52c>
  80b470:	89403926 	beq	r17,r5,80b558 <__udivdi3+0x518>
  80b474:	4005883a 	mov	r2,r8
  80b478:	0009883a 	mov	r4,zero
  80b47c:	003f5106 	br	80b1c4 <__udivdi3+0x184>
  80b480:	85a0983a 	sll	r16,r16,r22
  80b484:	3585c83a 	sub	r2,r6,r22
  80b488:	a0a2d83a 	srl	r17,r20,r2
  80b48c:	802ad43a 	srli	r21,r16,16
  80b490:	e084d83a 	srl	r2,fp,r2
  80b494:	a586983a 	sll	r3,r20,r22
  80b498:	8809883a 	mov	r4,r17
  80b49c:	a80b883a 	mov	r5,r21
  80b4a0:	1886b03a 	or	r3,r3,r2
  80b4a4:	d8c00115 	stw	r3,4(sp)
  80b4a8:	080c6500 	call	80c650 <__udivsi3>
  80b4ac:	8809883a 	mov	r4,r17
  80b4b0:	a80b883a 	mov	r5,r21
  80b4b4:	d8800415 	stw	r2,16(sp)
  80b4b8:	080c6580 	call	80c658 <__umodsi3>
  80b4bc:	d9000117 	ldw	r4,4(sp)
  80b4c0:	d9400417 	ldw	r5,16(sp)
  80b4c4:	1004943a 	slli	r2,r2,16
  80b4c8:	85ffffcc 	andi	r23,r16,65535
  80b4cc:	2006d43a 	srli	r3,r4,16
  80b4d0:	b963383a 	mul	r17,r23,r5
  80b4d4:	10c4b03a 	or	r2,r2,r3
  80b4d8:	1440042e 	bgeu	r2,r17,80b4ec <__udivdi3+0x4ac>
  80b4dc:	297fffc4 	addi	r5,r5,-1
  80b4e0:	1405883a 	add	r2,r2,r16
  80b4e4:	d9400415 	stw	r5,16(sp)
  80b4e8:	1400442e 	bgeu	r2,r16,80b5fc <__udivdi3+0x5bc>
  80b4ec:	1463c83a 	sub	r17,r2,r17
  80b4f0:	8809883a 	mov	r4,r17
  80b4f4:	a80b883a 	mov	r5,r21
  80b4f8:	080c6500 	call	80c650 <__udivsi3>
  80b4fc:	8809883a 	mov	r4,r17
  80b500:	a80b883a 	mov	r5,r21
  80b504:	1029883a 	mov	r20,r2
  80b508:	080c6580 	call	80c658 <__umodsi3>
  80b50c:	d9400117 	ldw	r5,4(sp)
  80b510:	1004943a 	slli	r2,r2,16
  80b514:	bd09383a 	mul	r4,r23,r20
  80b518:	28ffffcc 	andi	r3,r5,65535
  80b51c:	10c6b03a 	or	r3,r2,r3
  80b520:	1900062e 	bgeu	r3,r4,80b53c <__udivdi3+0x4fc>
  80b524:	1c07883a 	add	r3,r3,r16
  80b528:	a53fffc4 	addi	r20,r20,-1
  80b52c:	1c000336 	bltu	r3,r16,80b53c <__udivdi3+0x4fc>
  80b530:	1900022e 	bgeu	r3,r4,80b53c <__udivdi3+0x4fc>
  80b534:	a53fffc4 	addi	r20,r20,-1
  80b538:	1c07883a 	add	r3,r3,r16
  80b53c:	d9400417 	ldw	r5,16(sp)
  80b540:	e5b8983a 	sll	fp,fp,r22
  80b544:	1923c83a 	sub	r17,r3,r4
  80b548:	2804943a 	slli	r2,r5,16
  80b54c:	a0a8b03a 	or	r20,r20,r2
  80b550:	dd000315 	stw	r20,12(sp)
  80b554:	003ee106 	br	80b0dc <__udivdi3+0x9c>
  80b558:	2004943a 	slli	r2,r4,16
  80b55c:	e5c8983a 	sll	r4,fp,r23
  80b560:	48ffffcc 	andi	r3,r9,65535
  80b564:	10c5883a 	add	r2,r2,r3
  80b568:	20bfc22e 	bgeu	r4,r2,80b474 <__udivdi3+0x434>
  80b56c:	40bfffc4 	addi	r2,r8,-1
  80b570:	0009883a 	mov	r4,zero
  80b574:	003f1306 	br	80b1c4 <__udivdi3+0x184>
  80b578:	01400204 	movi	r5,8
  80b57c:	2805883a 	mov	r2,r5
  80b580:	003f0306 	br	80b190 <__udivdi3+0x150>
  80b584:	01400604 	movi	r5,24
  80b588:	2805883a 	mov	r2,r5
  80b58c:	003f0006 	br	80b190 <__udivdi3+0x150>
  80b590:	01400204 	movi	r5,8
  80b594:	2805883a 	mov	r2,r5
  80b598:	003ec206 	br	80b0a4 <__udivdi3+0x64>
  80b59c:	01400604 	movi	r5,24
  80b5a0:	2805883a 	mov	r2,r5
  80b5a4:	003ebf06 	br	80b0a4 <__udivdi3+0x64>
  80b5a8:	01400204 	movi	r5,8
  80b5ac:	2805883a 	mov	r2,r5
  80b5b0:	003f1706 	br	80b210 <__udivdi3+0x1d0>
  80b5b4:	01400604 	movi	r5,24
  80b5b8:	2805883a 	mov	r2,r5
  80b5bc:	003f1406 	br	80b210 <__udivdi3+0x1d0>
  80b5c0:	89ff962e 	bgeu	r17,r7,80b41c <__udivdi3+0x3dc>
  80b5c4:	8d63883a 	add	r17,r17,r21
  80b5c8:	843fffc4 	addi	r16,r16,-1
  80b5cc:	003f9306 	br	80b41c <__udivdi3+0x3dc>
  80b5d0:	147f802e 	bgeu	r2,r17,80b3d4 <__udivdi3+0x394>
  80b5d4:	a53fffc4 	addi	r20,r20,-1
  80b5d8:	1545883a 	add	r2,r2,r21
  80b5dc:	003f7d06 	br	80b3d4 <__udivdi3+0x394>
  80b5e0:	a53fffc4 	addi	r20,r20,-1
  80b5e4:	003ede06 	br	80b160 <__udivdi3+0x120>
  80b5e8:	b5bfffc4 	addi	r22,r22,-1
  80b5ec:	1405883a 	add	r2,r2,r16
  80b5f0:	003f2806 	br	80b294 <__udivdi3+0x254>
  80b5f4:	a53fffc4 	addi	r20,r20,-1
  80b5f8:	003f3706 	br	80b2d8 <__udivdi3+0x298>
  80b5fc:	147fbb2e 	bgeu	r2,r17,80b4ec <__udivdi3+0x4ac>
  80b600:	297fffc4 	addi	r5,r5,-1
  80b604:	1405883a 	add	r2,r2,r16
  80b608:	d9400415 	stw	r5,16(sp)
  80b60c:	003fb706 	br	80b4ec <__udivdi3+0x4ac>
  80b610:	b5bfffc4 	addi	r22,r22,-1
  80b614:	1405883a 	add	r2,r2,r16
  80b618:	003ec006 	br	80b11c <__udivdi3+0xdc>

0080b61c <__umoddi3>:
  80b61c:	defff104 	addi	sp,sp,-60
  80b620:	dd800b15 	stw	r22,44(sp)
  80b624:	dd000915 	stw	r20,36(sp)
  80b628:	dc000515 	stw	r16,20(sp)
  80b62c:	dfc00e15 	stw	ra,56(sp)
  80b630:	df000d15 	stw	fp,52(sp)
  80b634:	ddc00c15 	stw	r23,48(sp)
  80b638:	dd400a15 	stw	r21,40(sp)
  80b63c:	dcc00815 	stw	r19,32(sp)
  80b640:	dc800715 	stw	r18,28(sp)
  80b644:	dc400615 	stw	r17,24(sp)
  80b648:	3021883a 	mov	r16,r6
  80b64c:	202d883a 	mov	r22,r4
  80b650:	2829883a 	mov	r20,r5
  80b654:	38002b1e 	bne	r7,zero,80b704 <__umoddi3+0xe8>
  80b658:	29805036 	bltu	r5,r6,80b79c <__umoddi3+0x180>
  80b65c:	30008a26 	beq	r6,zero,80b888 <__umoddi3+0x26c>
  80b660:	00bfffd4 	movui	r2,65535
  80b664:	14008236 	bltu	r2,r16,80b870 <__umoddi3+0x254>
  80b668:	00803fc4 	movi	r2,255
  80b66c:	14013636 	bltu	r2,r16,80bb48 <__umoddi3+0x52c>
  80b670:	000b883a 	mov	r5,zero
  80b674:	0005883a 	mov	r2,zero
  80b678:	8084d83a 	srl	r2,r16,r2
  80b67c:	01002074 	movhi	r4,129
  80b680:	21078104 	addi	r4,r4,7684
  80b684:	01800804 	movi	r6,32
  80b688:	1105883a 	add	r2,r2,r4
  80b68c:	10c00003 	ldbu	r3,0(r2)
  80b690:	28c7883a 	add	r3,r5,r3
  80b694:	30efc83a 	sub	r23,r6,r3
  80b698:	b800941e 	bne	r23,zero,80b8ec <__umoddi3+0x2d0>
  80b69c:	802ad43a 	srli	r21,r16,16
  80b6a0:	a423c83a 	sub	r17,r20,r16
  80b6a4:	0039883a 	mov	fp,zero
  80b6a8:	853fffcc 	andi	r20,r16,65535
  80b6ac:	8809883a 	mov	r4,r17
  80b6b0:	a80b883a 	mov	r5,r21
  80b6b4:	080c6500 	call	80c650 <__udivsi3>
  80b6b8:	8809883a 	mov	r4,r17
  80b6bc:	a80b883a 	mov	r5,r21
  80b6c0:	a0a3383a 	mul	r17,r20,r2
  80b6c4:	080c6580 	call	80c658 <__umodsi3>
  80b6c8:	1004943a 	slli	r2,r2,16
  80b6cc:	b006d43a 	srli	r3,r22,16
  80b6d0:	10c4b03a 	or	r2,r2,r3
  80b6d4:	1440032e 	bgeu	r2,r17,80b6e4 <__umoddi3+0xc8>
  80b6d8:	1405883a 	add	r2,r2,r16
  80b6dc:	14000136 	bltu	r2,r16,80b6e4 <__umoddi3+0xc8>
  80b6e0:	14413536 	bltu	r2,r17,80bbb8 <__umoddi3+0x59c>
  80b6e4:	1463c83a 	sub	r17,r2,r17
  80b6e8:	8809883a 	mov	r4,r17
  80b6ec:	a80b883a 	mov	r5,r21
  80b6f0:	080c6500 	call	80c650 <__udivsi3>
  80b6f4:	8809883a 	mov	r4,r17
  80b6f8:	a0a3383a 	mul	r17,r20,r2
  80b6fc:	a80b883a 	mov	r5,r21
  80b700:	00004d06 	br	80b838 <__umoddi3+0x21c>
  80b704:	380d883a 	mov	r6,r7
  80b708:	29c0102e 	bgeu	r5,r7,80b74c <__umoddi3+0x130>
  80b70c:	2011883a 	mov	r8,r4
  80b710:	2813883a 	mov	r9,r5
  80b714:	4005883a 	mov	r2,r8
  80b718:	4807883a 	mov	r3,r9
  80b71c:	dfc00e17 	ldw	ra,56(sp)
  80b720:	df000d17 	ldw	fp,52(sp)
  80b724:	ddc00c17 	ldw	r23,48(sp)
  80b728:	dd800b17 	ldw	r22,44(sp)
  80b72c:	dd400a17 	ldw	r21,40(sp)
  80b730:	dd000917 	ldw	r20,36(sp)
  80b734:	dcc00817 	ldw	r19,32(sp)
  80b738:	dc800717 	ldw	r18,28(sp)
  80b73c:	dc400617 	ldw	r17,24(sp)
  80b740:	dc000517 	ldw	r16,20(sp)
  80b744:	dec00f04 	addi	sp,sp,60
  80b748:	f800283a 	ret
  80b74c:	00bfffd4 	movui	r2,65535
  80b750:	11c05a36 	bltu	r2,r7,80b8bc <__umoddi3+0x2a0>
  80b754:	00803fc4 	movi	r2,255
  80b758:	11c0fe36 	bltu	r2,r7,80bb54 <__umoddi3+0x538>
  80b75c:	000b883a 	mov	r5,zero
  80b760:	0005883a 	mov	r2,zero
  80b764:	3084d83a 	srl	r2,r6,r2
  80b768:	01002074 	movhi	r4,129
  80b76c:	21078104 	addi	r4,r4,7684
  80b770:	01c00804 	movi	r7,32
  80b774:	1105883a 	add	r2,r2,r4
  80b778:	10c00003 	ldbu	r3,0(r2)
  80b77c:	28c7883a 	add	r3,r5,r3
  80b780:	38ebc83a 	sub	r21,r7,r3
  80b784:	a800851e 	bne	r21,zero,80b99c <__umoddi3+0x380>
  80b788:	35005236 	bltu	r6,r20,80b8d4 <__umoddi3+0x2b8>
  80b78c:	b400512e 	bgeu	r22,r16,80b8d4 <__umoddi3+0x2b8>
  80b790:	b011883a 	mov	r8,r22
  80b794:	a013883a 	mov	r9,r20
  80b798:	003fde06 	br	80b714 <__umoddi3+0xf8>
  80b79c:	00bfffd4 	movui	r2,65535
  80b7a0:	11804036 	bltu	r2,r6,80b8a4 <__umoddi3+0x288>
  80b7a4:	00803fc4 	movi	r2,255
  80b7a8:	1180ed36 	bltu	r2,r6,80bb60 <__umoddi3+0x544>
  80b7ac:	000b883a 	mov	r5,zero
  80b7b0:	0005883a 	mov	r2,zero
  80b7b4:	8084d83a 	srl	r2,r16,r2
  80b7b8:	01002074 	movhi	r4,129
  80b7bc:	21078104 	addi	r4,r4,7684
  80b7c0:	01800804 	movi	r6,32
  80b7c4:	1105883a 	add	r2,r2,r4
  80b7c8:	10c00003 	ldbu	r3,0(r2)
  80b7cc:	28c7883a 	add	r3,r5,r3
  80b7d0:	30c7c83a 	sub	r3,r6,r3
  80b7d4:	1800bf1e 	bne	r3,zero,80bad4 <__umoddi3+0x4b8>
  80b7d8:	0039883a 	mov	fp,zero
  80b7dc:	802ad43a 	srli	r21,r16,16
  80b7e0:	a009883a 	mov	r4,r20
  80b7e4:	85ffffcc 	andi	r23,r16,65535
  80b7e8:	a80b883a 	mov	r5,r21
  80b7ec:	080c6500 	call	80c650 <__udivsi3>
  80b7f0:	a009883a 	mov	r4,r20
  80b7f4:	a80b883a 	mov	r5,r21
  80b7f8:	b8a3383a 	mul	r17,r23,r2
  80b7fc:	080c6580 	call	80c658 <__umodsi3>
  80b800:	1004943a 	slli	r2,r2,16
  80b804:	b006d43a 	srli	r3,r22,16
  80b808:	10c4b03a 	or	r2,r2,r3
  80b80c:	1440032e 	bgeu	r2,r17,80b81c <__umoddi3+0x200>
  80b810:	1405883a 	add	r2,r2,r16
  80b814:	14000136 	bltu	r2,r16,80b81c <__umoddi3+0x200>
  80b818:	1440e536 	bltu	r2,r17,80bbb0 <__umoddi3+0x594>
  80b81c:	1463c83a 	sub	r17,r2,r17
  80b820:	8809883a 	mov	r4,r17
  80b824:	a80b883a 	mov	r5,r21
  80b828:	080c6500 	call	80c650 <__udivsi3>
  80b82c:	8809883a 	mov	r4,r17
  80b830:	b8a3383a 	mul	r17,r23,r2
  80b834:	a80b883a 	mov	r5,r21
  80b838:	080c6580 	call	80c658 <__umodsi3>
  80b83c:	1004943a 	slli	r2,r2,16
  80b840:	b0ffffcc 	andi	r3,r22,65535
  80b844:	10c4b03a 	or	r2,r2,r3
  80b848:	1440042e 	bgeu	r2,r17,80b85c <__umoddi3+0x240>
  80b84c:	1405883a 	add	r2,r2,r16
  80b850:	14000236 	bltu	r2,r16,80b85c <__umoddi3+0x240>
  80b854:	1440012e 	bgeu	r2,r17,80b85c <__umoddi3+0x240>
  80b858:	1405883a 	add	r2,r2,r16
  80b85c:	1445c83a 	sub	r2,r2,r17
  80b860:	1724d83a 	srl	r18,r2,fp
  80b864:	0013883a 	mov	r9,zero
  80b868:	9011883a 	mov	r8,r18
  80b86c:	003fa906 	br	80b714 <__umoddi3+0xf8>
  80b870:	00804034 	movhi	r2,256
  80b874:	10bfffc4 	addi	r2,r2,-1
  80b878:	1400b036 	bltu	r2,r16,80bb3c <__umoddi3+0x520>
  80b87c:	01400404 	movi	r5,16
  80b880:	2805883a 	mov	r2,r5
  80b884:	003f7c06 	br	80b678 <__umoddi3+0x5c>
  80b888:	01000044 	movi	r4,1
  80b88c:	000b883a 	mov	r5,zero
  80b890:	080c6500 	call	80c650 <__udivsi3>
  80b894:	1021883a 	mov	r16,r2
  80b898:	00bfffd4 	movui	r2,65535
  80b89c:	143ff436 	bltu	r2,r16,80b870 <__umoddi3+0x254>
  80b8a0:	003f7106 	br	80b668 <__umoddi3+0x4c>
  80b8a4:	00804034 	movhi	r2,256
  80b8a8:	10bfffc4 	addi	r2,r2,-1
  80b8ac:	1180af36 	bltu	r2,r6,80bb6c <__umoddi3+0x550>
  80b8b0:	01400404 	movi	r5,16
  80b8b4:	2805883a 	mov	r2,r5
  80b8b8:	003fbe06 	br	80b7b4 <__umoddi3+0x198>
  80b8bc:	00804034 	movhi	r2,256
  80b8c0:	10bfffc4 	addi	r2,r2,-1
  80b8c4:	11c0ac36 	bltu	r2,r7,80bb78 <__umoddi3+0x55c>
  80b8c8:	01400404 	movi	r5,16
  80b8cc:	2805883a 	mov	r2,r5
  80b8d0:	003fa406 	br	80b764 <__umoddi3+0x148>
  80b8d4:	b409c83a 	sub	r4,r22,r16
  80b8d8:	b105803a 	cmpltu	r2,r22,r4
  80b8dc:	a187c83a 	sub	r3,r20,r6
  80b8e0:	18a9c83a 	sub	r20,r3,r2
  80b8e4:	202d883a 	mov	r22,r4
  80b8e8:	003fa906 	br	80b790 <__umoddi3+0x174>
  80b8ec:	85e0983a 	sll	r16,r16,r23
  80b8f0:	35c5c83a 	sub	r2,r6,r23
  80b8f4:	a0a2d83a 	srl	r17,r20,r2
  80b8f8:	802ad43a 	srli	r21,r16,16
  80b8fc:	b084d83a 	srl	r2,r22,r2
  80b900:	a5c6983a 	sll	r3,r20,r23
  80b904:	8809883a 	mov	r4,r17
  80b908:	a80b883a 	mov	r5,r21
  80b90c:	1886b03a 	or	r3,r3,r2
  80b910:	d8c00115 	stw	r3,4(sp)
  80b914:	853fffcc 	andi	r20,r16,65535
  80b918:	080c6500 	call	80c650 <__udivsi3>
  80b91c:	8809883a 	mov	r4,r17
  80b920:	a80b883a 	mov	r5,r21
  80b924:	a0a3383a 	mul	r17,r20,r2
  80b928:	080c6580 	call	80c658 <__umodsi3>
  80b92c:	d9000117 	ldw	r4,4(sp)
  80b930:	1004943a 	slli	r2,r2,16
  80b934:	b839883a 	mov	fp,r23
  80b938:	2006d43a 	srli	r3,r4,16
  80b93c:	10c4b03a 	or	r2,r2,r3
  80b940:	1440022e 	bgeu	r2,r17,80b94c <__umoddi3+0x330>
  80b944:	1405883a 	add	r2,r2,r16
  80b948:	1400962e 	bgeu	r2,r16,80bba4 <__umoddi3+0x588>
  80b94c:	1463c83a 	sub	r17,r2,r17
  80b950:	8809883a 	mov	r4,r17
  80b954:	a80b883a 	mov	r5,r21
  80b958:	080c6500 	call	80c650 <__udivsi3>
  80b95c:	8809883a 	mov	r4,r17
  80b960:	a80b883a 	mov	r5,r21
  80b964:	a0a3383a 	mul	r17,r20,r2
  80b968:	080c6580 	call	80c658 <__umodsi3>
  80b96c:	d9400117 	ldw	r5,4(sp)
  80b970:	1004943a 	slli	r2,r2,16
  80b974:	28ffffcc 	andi	r3,r5,65535
  80b978:	10c4b03a 	or	r2,r2,r3
  80b97c:	1440042e 	bgeu	r2,r17,80b990 <__umoddi3+0x374>
  80b980:	1405883a 	add	r2,r2,r16
  80b984:	14000236 	bltu	r2,r16,80b990 <__umoddi3+0x374>
  80b988:	1440012e 	bgeu	r2,r17,80b990 <__umoddi3+0x374>
  80b98c:	1405883a 	add	r2,r2,r16
  80b990:	b5ec983a 	sll	r22,r22,r23
  80b994:	1463c83a 	sub	r17,r2,r17
  80b998:	003f4406 	br	80b6ac <__umoddi3+0x90>
  80b99c:	3d4fc83a 	sub	r7,r7,r21
  80b9a0:	3546983a 	sll	r3,r6,r21
  80b9a4:	81c4d83a 	srl	r2,r16,r7
  80b9a8:	a1e2d83a 	srl	r17,r20,r7
  80b9ac:	a54c983a 	sll	r6,r20,r21
  80b9b0:	18aeb03a 	or	r23,r3,r2
  80b9b4:	b828d43a 	srli	r20,r23,16
  80b9b8:	b1c4d83a 	srl	r2,r22,r7
  80b9bc:	8809883a 	mov	r4,r17
  80b9c0:	a00b883a 	mov	r5,r20
  80b9c4:	308cb03a 	or	r6,r6,r2
  80b9c8:	d9c00315 	stw	r7,12(sp)
  80b9cc:	d9800215 	stw	r6,8(sp)
  80b9d0:	080c6500 	call	80c650 <__udivsi3>
  80b9d4:	8809883a 	mov	r4,r17
  80b9d8:	a00b883a 	mov	r5,r20
  80b9dc:	1039883a 	mov	fp,r2
  80b9e0:	080c6580 	call	80c658 <__umodsi3>
  80b9e4:	b8ffffcc 	andi	r3,r23,65535
  80b9e8:	d8c00415 	stw	r3,16(sp)
  80b9ec:	d9000217 	ldw	r4,8(sp)
  80b9f0:	d9400417 	ldw	r5,16(sp)
  80b9f4:	1004943a 	slli	r2,r2,16
  80b9f8:	2006d43a 	srli	r3,r4,16
  80b9fc:	8560983a 	sll	r16,r16,r21
  80ba00:	2f23383a 	mul	r17,r5,fp
  80ba04:	10c4b03a 	or	r2,r2,r3
  80ba08:	dc000015 	stw	r16,0(sp)
  80ba0c:	b56c983a 	sll	r22,r22,r21
  80ba10:	1440032e 	bgeu	r2,r17,80ba20 <__umoddi3+0x404>
  80ba14:	15c5883a 	add	r2,r2,r23
  80ba18:	e73fffc4 	addi	fp,fp,-1
  80ba1c:	15c05d2e 	bgeu	r2,r23,80bb94 <__umoddi3+0x578>
  80ba20:	1463c83a 	sub	r17,r2,r17
  80ba24:	8809883a 	mov	r4,r17
  80ba28:	a00b883a 	mov	r5,r20
  80ba2c:	080c6500 	call	80c650 <__udivsi3>
  80ba30:	8809883a 	mov	r4,r17
  80ba34:	a00b883a 	mov	r5,r20
  80ba38:	1021883a 	mov	r16,r2
  80ba3c:	080c6580 	call	80c658 <__umodsi3>
  80ba40:	d8c00417 	ldw	r3,16(sp)
  80ba44:	d9000217 	ldw	r4,8(sp)
  80ba48:	1004943a 	slli	r2,r2,16
  80ba4c:	1c23383a 	mul	r17,r3,r16
  80ba50:	20ffffcc 	andi	r3,r4,65535
  80ba54:	10ceb03a 	or	r7,r2,r3
  80ba58:	3c40032e 	bgeu	r7,r17,80ba68 <__umoddi3+0x44c>
  80ba5c:	3dcf883a 	add	r7,r7,r23
  80ba60:	843fffc4 	addi	r16,r16,-1
  80ba64:	3dc0472e 	bgeu	r7,r23,80bb84 <__umoddi3+0x568>
  80ba68:	e004943a 	slli	r2,fp,16
  80ba6c:	d9400017 	ldw	r5,0(sp)
  80ba70:	3c4fc83a 	sub	r7,r7,r17
  80ba74:	8084b03a 	or	r2,r16,r2
  80ba78:	28ffffcc 	andi	r3,r5,65535
  80ba7c:	280cd43a 	srli	r6,r5,16
  80ba80:	100ad43a 	srli	r5,r2,16
  80ba84:	10bfffcc 	andi	r2,r2,65535
  80ba88:	10d1383a 	mul	r8,r2,r3
  80ba8c:	28c7383a 	mul	r3,r5,r3
  80ba90:	1185383a 	mul	r2,r2,r6
  80ba94:	4008d43a 	srli	r4,r8,16
  80ba98:	298b383a 	mul	r5,r5,r6
  80ba9c:	10c5883a 	add	r2,r2,r3
  80baa0:	2089883a 	add	r4,r4,r2
  80baa4:	20c0022e 	bgeu	r4,r3,80bab0 <__umoddi3+0x494>
  80baa8:	00800074 	movhi	r2,1
  80baac:	288b883a 	add	r5,r5,r2
  80bab0:	2004d43a 	srli	r2,r4,16
  80bab4:	2008943a 	slli	r4,r4,16
  80bab8:	40ffffcc 	andi	r3,r8,65535
  80babc:	288b883a 	add	r5,r5,r2
  80bac0:	20c9883a 	add	r4,r4,r3
  80bac4:	39400b36 	bltu	r7,r5,80baf4 <__umoddi3+0x4d8>
  80bac8:	39403d26 	beq	r7,r5,80bbc0 <__umoddi3+0x5a4>
  80bacc:	394bc83a 	sub	r5,r7,r5
  80bad0:	00000f06 	br	80bb10 <__umoddi3+0x4f4>
  80bad4:	30c5c83a 	sub	r2,r6,r3
  80bad8:	1839883a 	mov	fp,r3
  80badc:	b084d83a 	srl	r2,r22,r2
  80bae0:	a0c6983a 	sll	r3,r20,r3
  80bae4:	8720983a 	sll	r16,r16,fp
  80bae8:	b72c983a 	sll	r22,r22,fp
  80baec:	18a8b03a 	or	r20,r3,r2
  80baf0:	003f3a06 	br	80b7dc <__umoddi3+0x1c0>
  80baf4:	d8c00017 	ldw	r3,0(sp)
  80baf8:	20c5c83a 	sub	r2,r4,r3
  80bafc:	2089803a 	cmpltu	r4,r4,r2
  80bb00:	2dc7c83a 	sub	r3,r5,r23
  80bb04:	1907c83a 	sub	r3,r3,r4
  80bb08:	38cbc83a 	sub	r5,r7,r3
  80bb0c:	1009883a 	mov	r4,r2
  80bb10:	b105c83a 	sub	r2,r22,r4
  80bb14:	b087803a 	cmpltu	r3,r22,r2
  80bb18:	28c7c83a 	sub	r3,r5,r3
  80bb1c:	d9400317 	ldw	r5,12(sp)
  80bb20:	1544d83a 	srl	r2,r2,r21
  80bb24:	1948983a 	sll	r4,r3,r5
  80bb28:	1d46d83a 	srl	r3,r3,r21
  80bb2c:	20a4b03a 	or	r18,r4,r2
  80bb30:	9011883a 	mov	r8,r18
  80bb34:	1813883a 	mov	r9,r3
  80bb38:	003ef606 	br	80b714 <__umoddi3+0xf8>
  80bb3c:	01400604 	movi	r5,24
  80bb40:	2805883a 	mov	r2,r5
  80bb44:	003ecc06 	br	80b678 <__umoddi3+0x5c>
  80bb48:	01400204 	movi	r5,8
  80bb4c:	2805883a 	mov	r2,r5
  80bb50:	003ec906 	br	80b678 <__umoddi3+0x5c>
  80bb54:	01400204 	movi	r5,8
  80bb58:	2805883a 	mov	r2,r5
  80bb5c:	003f0106 	br	80b764 <__umoddi3+0x148>
  80bb60:	01400204 	movi	r5,8
  80bb64:	2805883a 	mov	r2,r5
  80bb68:	003f1206 	br	80b7b4 <__umoddi3+0x198>
  80bb6c:	01400604 	movi	r5,24
  80bb70:	2805883a 	mov	r2,r5
  80bb74:	003f0f06 	br	80b7b4 <__umoddi3+0x198>
  80bb78:	01400604 	movi	r5,24
  80bb7c:	2805883a 	mov	r2,r5
  80bb80:	003ef806 	br	80b764 <__umoddi3+0x148>
  80bb84:	3c7fb82e 	bgeu	r7,r17,80ba68 <__umoddi3+0x44c>
  80bb88:	843fffc4 	addi	r16,r16,-1
  80bb8c:	3dcf883a 	add	r7,r7,r23
  80bb90:	003fb506 	br	80ba68 <__umoddi3+0x44c>
  80bb94:	147fa22e 	bgeu	r2,r17,80ba20 <__umoddi3+0x404>
  80bb98:	e73fffc4 	addi	fp,fp,-1
  80bb9c:	15c5883a 	add	r2,r2,r23
  80bba0:	003f9f06 	br	80ba20 <__umoddi3+0x404>
  80bba4:	147f692e 	bgeu	r2,r17,80b94c <__umoddi3+0x330>
  80bba8:	1405883a 	add	r2,r2,r16
  80bbac:	003f6706 	br	80b94c <__umoddi3+0x330>
  80bbb0:	1405883a 	add	r2,r2,r16
  80bbb4:	003f1906 	br	80b81c <__umoddi3+0x200>
  80bbb8:	1405883a 	add	r2,r2,r16
  80bbbc:	003ec906 	br	80b6e4 <__umoddi3+0xc8>
  80bbc0:	b13fcc36 	bltu	r22,r4,80baf4 <__umoddi3+0x4d8>
  80bbc4:	000b883a 	mov	r5,zero
  80bbc8:	003fd106 	br	80bb10 <__umoddi3+0x4f4>

0080bbcc <__muldf3>:
  80bbcc:	deffe004 	addi	sp,sp,-128
  80bbd0:	dc401815 	stw	r17,96(sp)
  80bbd4:	dc400404 	addi	r17,sp,16
  80bbd8:	2011883a 	mov	r8,r4
  80bbdc:	2813883a 	mov	r9,r5
  80bbe0:	dc001715 	stw	r16,92(sp)
  80bbe4:	d809883a 	mov	r4,sp
  80bbe8:	880b883a 	mov	r5,r17
  80bbec:	dc000904 	addi	r16,sp,36
  80bbf0:	dfc01f15 	stw	ra,124(sp)
  80bbf4:	da400115 	stw	r9,4(sp)
  80bbf8:	d9c00315 	stw	r7,12(sp)
  80bbfc:	da000015 	stw	r8,0(sp)
  80bc00:	d9800215 	stw	r6,8(sp)
  80bc04:	ddc01e15 	stw	r23,120(sp)
  80bc08:	dd801d15 	stw	r22,116(sp)
  80bc0c:	dd401c15 	stw	r21,112(sp)
  80bc10:	dd001b15 	stw	r20,108(sp)
  80bc14:	dcc01a15 	stw	r19,104(sp)
  80bc18:	dc801915 	stw	r18,100(sp)
  80bc1c:	0803a480 	call	803a48 <__unpack_d>
  80bc20:	d9000204 	addi	r4,sp,8
  80bc24:	800b883a 	mov	r5,r16
  80bc28:	0803a480 	call	803a48 <__unpack_d>
  80bc2c:	d9000417 	ldw	r4,16(sp)
  80bc30:	00800044 	movi	r2,1
  80bc34:	1100102e 	bgeu	r2,r4,80bc78 <__muldf3+0xac>
  80bc38:	d8c00917 	ldw	r3,36(sp)
  80bc3c:	10c0062e 	bgeu	r2,r3,80bc58 <__muldf3+0x8c>
  80bc40:	00800104 	movi	r2,4
  80bc44:	20800a26 	beq	r4,r2,80bc70 <__muldf3+0xa4>
  80bc48:	1880cc26 	beq	r3,r2,80bf7c <__muldf3+0x3b0>
  80bc4c:	00800084 	movi	r2,2
  80bc50:	20800926 	beq	r4,r2,80bc78 <__muldf3+0xac>
  80bc54:	1880191e 	bne	r3,r2,80bcbc <__muldf3+0xf0>
  80bc58:	d8c00a17 	ldw	r3,40(sp)
  80bc5c:	d8800517 	ldw	r2,20(sp)
  80bc60:	8009883a 	mov	r4,r16
  80bc64:	10c4c03a 	cmpne	r2,r2,r3
  80bc68:	d8800a15 	stw	r2,40(sp)
  80bc6c:	00000706 	br	80bc8c <__muldf3+0xc0>
  80bc70:	00800084 	movi	r2,2
  80bc74:	1880c326 	beq	r3,r2,80bf84 <__muldf3+0x3b8>
  80bc78:	d8800517 	ldw	r2,20(sp)
  80bc7c:	d8c00a17 	ldw	r3,40(sp)
  80bc80:	8809883a 	mov	r4,r17
  80bc84:	10c4c03a 	cmpne	r2,r2,r3
  80bc88:	d8800515 	stw	r2,20(sp)
  80bc8c:	08037340 	call	803734 <__pack_d>
  80bc90:	dfc01f17 	ldw	ra,124(sp)
  80bc94:	ddc01e17 	ldw	r23,120(sp)
  80bc98:	dd801d17 	ldw	r22,116(sp)
  80bc9c:	dd401c17 	ldw	r21,112(sp)
  80bca0:	dd001b17 	ldw	r20,108(sp)
  80bca4:	dcc01a17 	ldw	r19,104(sp)
  80bca8:	dc801917 	ldw	r18,100(sp)
  80bcac:	dc401817 	ldw	r17,96(sp)
  80bcb0:	dc001717 	ldw	r16,92(sp)
  80bcb4:	dec02004 	addi	sp,sp,128
  80bcb8:	f800283a 	ret
  80bcbc:	dd800717 	ldw	r22,28(sp)
  80bcc0:	dc800c17 	ldw	r18,48(sp)
  80bcc4:	002b883a 	mov	r21,zero
  80bcc8:	0023883a 	mov	r17,zero
  80bccc:	a80b883a 	mov	r5,r21
  80bcd0:	b00d883a 	mov	r6,r22
  80bcd4:	880f883a 	mov	r7,r17
  80bcd8:	ddc00817 	ldw	r23,32(sp)
  80bcdc:	dcc00d17 	ldw	r19,52(sp)
  80bce0:	9009883a 	mov	r4,r18
  80bce4:	08033200 	call	803320 <__muldi3>
  80bce8:	001b883a 	mov	r13,zero
  80bcec:	680f883a 	mov	r7,r13
  80bcf0:	b009883a 	mov	r4,r22
  80bcf4:	000b883a 	mov	r5,zero
  80bcf8:	980d883a 	mov	r6,r19
  80bcfc:	b82d883a 	mov	r22,r23
  80bd00:	002f883a 	mov	r23,zero
  80bd04:	db401615 	stw	r13,88(sp)
  80bd08:	d8801315 	stw	r2,76(sp)
  80bd0c:	d8c01415 	stw	r3,80(sp)
  80bd10:	dcc01515 	stw	r19,84(sp)
  80bd14:	08033200 	call	803320 <__muldi3>
  80bd18:	b00d883a 	mov	r6,r22
  80bd1c:	000b883a 	mov	r5,zero
  80bd20:	9009883a 	mov	r4,r18
  80bd24:	b80f883a 	mov	r7,r23
  80bd28:	1021883a 	mov	r16,r2
  80bd2c:	1823883a 	mov	r17,r3
  80bd30:	08033200 	call	803320 <__muldi3>
  80bd34:	8085883a 	add	r2,r16,r2
  80bd38:	140d803a 	cmpltu	r6,r2,r16
  80bd3c:	88c7883a 	add	r3,r17,r3
  80bd40:	30cd883a 	add	r6,r6,r3
  80bd44:	1029883a 	mov	r20,r2
  80bd48:	302b883a 	mov	r21,r6
  80bd4c:	da801317 	ldw	r10,76(sp)
  80bd50:	dac01417 	ldw	r11,80(sp)
  80bd54:	db001517 	ldw	r12,84(sp)
  80bd58:	db401617 	ldw	r13,88(sp)
  80bd5c:	3440612e 	bgeu	r6,r17,80bee4 <__muldf3+0x318>
  80bd60:	0009883a 	mov	r4,zero
  80bd64:	5105883a 	add	r2,r10,r4
  80bd68:	128d803a 	cmpltu	r6,r2,r10
  80bd6c:	5d07883a 	add	r3,r11,r20
  80bd70:	30cd883a 	add	r6,r6,r3
  80bd74:	0021883a 	mov	r16,zero
  80bd78:	04400044 	movi	r17,1
  80bd7c:	1025883a 	mov	r18,r2
  80bd80:	3027883a 	mov	r19,r6
  80bd84:	32c06236 	bltu	r6,r11,80bf10 <__muldf3+0x344>
  80bd88:	59807a26 	beq	r11,r6,80bf74 <__muldf3+0x3a8>
  80bd8c:	680b883a 	mov	r5,r13
  80bd90:	b80f883a 	mov	r7,r23
  80bd94:	6009883a 	mov	r4,r12
  80bd98:	b00d883a 	mov	r6,r22
  80bd9c:	08033200 	call	803320 <__muldi3>
  80bda0:	1009883a 	mov	r4,r2
  80bda4:	000f883a 	mov	r7,zero
  80bda8:	1545883a 	add	r2,r2,r21
  80bdac:	1111803a 	cmpltu	r8,r2,r4
  80bdb0:	19c7883a 	add	r3,r3,r7
  80bdb4:	40c7883a 	add	r3,r8,r3
  80bdb8:	88cb883a 	add	r5,r17,r3
  80bdbc:	d8c00617 	ldw	r3,24(sp)
  80bdc0:	8089883a 	add	r4,r16,r2
  80bdc4:	d8800b17 	ldw	r2,44(sp)
  80bdc8:	18c00104 	addi	r3,r3,4
  80bdcc:	240d803a 	cmpltu	r6,r4,r16
  80bdd0:	10c7883a 	add	r3,r2,r3
  80bdd4:	2013883a 	mov	r9,r4
  80bdd8:	d8800a17 	ldw	r2,40(sp)
  80bddc:	d9000517 	ldw	r4,20(sp)
  80bde0:	314d883a 	add	r6,r6,r5
  80bde4:	3015883a 	mov	r10,r6
  80bde8:	2088c03a 	cmpne	r4,r4,r2
  80bdec:	00880034 	movhi	r2,8192
  80bdf0:	10bfffc4 	addi	r2,r2,-1
  80bdf4:	d9000f15 	stw	r4,60(sp)
  80bdf8:	d8c01015 	stw	r3,64(sp)
  80bdfc:	1180162e 	bgeu	r2,r6,80be58 <__muldf3+0x28c>
  80be00:	1811883a 	mov	r8,r3
  80be04:	101f883a 	mov	r15,r2
  80be08:	980497fa 	slli	r2,r19,31
  80be0c:	9016d07a 	srli	r11,r18,1
  80be10:	500697fa 	slli	r3,r10,31
  80be14:	480cd07a 	srli	r6,r9,1
  80be18:	500ed07a 	srli	r7,r10,1
  80be1c:	12d6b03a 	or	r11,r2,r11
  80be20:	00800044 	movi	r2,1
  80be24:	198cb03a 	or	r6,r3,r6
  80be28:	4888703a 	and	r4,r9,r2
  80be2c:	9818d07a 	srli	r12,r19,1
  80be30:	001b883a 	mov	r13,zero
  80be34:	03a00034 	movhi	r14,32768
  80be38:	3013883a 	mov	r9,r6
  80be3c:	3815883a 	mov	r10,r7
  80be40:	4091883a 	add	r8,r8,r2
  80be44:	20000226 	beq	r4,zero,80be50 <__muldf3+0x284>
  80be48:	5b64b03a 	or	r18,r11,r13
  80be4c:	63a6b03a 	or	r19,r12,r14
  80be50:	7abfed36 	bltu	r15,r10,80be08 <__muldf3+0x23c>
  80be54:	da001015 	stw	r8,64(sp)
  80be58:	00840034 	movhi	r2,4096
  80be5c:	10bfffc4 	addi	r2,r2,-1
  80be60:	12801436 	bltu	r2,r10,80beb4 <__muldf3+0x2e8>
  80be64:	da001017 	ldw	r8,64(sp)
  80be68:	101f883a 	mov	r15,r2
  80be6c:	4a45883a 	add	r2,r9,r9
  80be70:	124d803a 	cmpltu	r6,r2,r9
  80be74:	5287883a 	add	r3,r10,r10
  80be78:	9497883a 	add	r11,r18,r18
  80be7c:	5c8f803a 	cmpltu	r7,r11,r18
  80be80:	9cd9883a 	add	r12,r19,r19
  80be84:	01000044 	movi	r4,1
  80be88:	30cd883a 	add	r6,r6,r3
  80be8c:	3b0f883a 	add	r7,r7,r12
  80be90:	423fffc4 	addi	r8,r8,-1
  80be94:	1013883a 	mov	r9,r2
  80be98:	3015883a 	mov	r10,r6
  80be9c:	111ab03a 	or	r13,r2,r4
  80bea0:	98003016 	blt	r19,zero,80bf64 <__muldf3+0x398>
  80bea4:	5825883a 	mov	r18,r11
  80bea8:	3827883a 	mov	r19,r7
  80beac:	7abfef2e 	bgeu	r15,r10,80be6c <__muldf3+0x2a0>
  80beb0:	da001015 	stw	r8,64(sp)
  80beb4:	00803fc4 	movi	r2,255
  80beb8:	488e703a 	and	r7,r9,r2
  80bebc:	00802004 	movi	r2,128
  80bec0:	0007883a 	mov	r3,zero
  80bec4:	0011883a 	mov	r8,zero
  80bec8:	38801826 	beq	r7,r2,80bf2c <__muldf3+0x360>
  80becc:	008000c4 	movi	r2,3
  80bed0:	d9000e04 	addi	r4,sp,56
  80bed4:	da801215 	stw	r10,72(sp)
  80bed8:	d8800e15 	stw	r2,56(sp)
  80bedc:	da401115 	stw	r9,68(sp)
  80bee0:	003f6a06 	br	80bc8c <__muldf3+0xc0>
  80bee4:	89802126 	beq	r17,r6,80bf6c <__muldf3+0x3a0>
  80bee8:	0009883a 	mov	r4,zero
  80beec:	5105883a 	add	r2,r10,r4
  80bef0:	128d803a 	cmpltu	r6,r2,r10
  80bef4:	5d07883a 	add	r3,r11,r20
  80bef8:	30cd883a 	add	r6,r6,r3
  80befc:	0021883a 	mov	r16,zero
  80bf00:	0023883a 	mov	r17,zero
  80bf04:	1025883a 	mov	r18,r2
  80bf08:	3027883a 	mov	r19,r6
  80bf0c:	32ff9e2e 	bgeu	r6,r11,80bd88 <__muldf3+0x1bc>
  80bf10:	00800044 	movi	r2,1
  80bf14:	8089883a 	add	r4,r16,r2
  80bf18:	240d803a 	cmpltu	r6,r4,r16
  80bf1c:	344d883a 	add	r6,r6,r17
  80bf20:	2021883a 	mov	r16,r4
  80bf24:	3023883a 	mov	r17,r6
  80bf28:	003f9806 	br	80bd8c <__muldf3+0x1c0>
  80bf2c:	403fe71e 	bne	r8,zero,80becc <__muldf3+0x300>
  80bf30:	01004004 	movi	r4,256
  80bf34:	4904703a 	and	r2,r9,r4
  80bf38:	10c4b03a 	or	r2,r2,r3
  80bf3c:	103fe31e 	bne	r2,zero,80becc <__muldf3+0x300>
  80bf40:	94c4b03a 	or	r2,r18,r19
  80bf44:	103fe126 	beq	r2,zero,80becc <__muldf3+0x300>
  80bf48:	49c5883a 	add	r2,r9,r7
  80bf4c:	1251803a 	cmpltu	r8,r2,r9
  80bf50:	4291883a 	add	r8,r8,r10
  80bf54:	013fc004 	movi	r4,-256
  80bf58:	1112703a 	and	r9,r2,r4
  80bf5c:	4015883a 	mov	r10,r8
  80bf60:	003fda06 	br	80becc <__muldf3+0x300>
  80bf64:	6813883a 	mov	r9,r13
  80bf68:	003fce06 	br	80bea4 <__muldf3+0x2d8>
  80bf6c:	143f7c36 	bltu	r2,r16,80bd60 <__muldf3+0x194>
  80bf70:	003fdd06 	br	80bee8 <__muldf3+0x31c>
  80bf74:	12bf852e 	bgeu	r2,r10,80bd8c <__muldf3+0x1c0>
  80bf78:	003fe506 	br	80bf10 <__muldf3+0x344>
  80bf7c:	00800084 	movi	r2,2
  80bf80:	20bf351e 	bne	r4,r2,80bc58 <__muldf3+0x8c>
  80bf84:	01002074 	movhi	r4,129
  80bf88:	21077c04 	addi	r4,r4,7664
  80bf8c:	003f3f06 	br	80bc8c <__muldf3+0xc0>

0080bf90 <__eqdf2>:
  80bf90:	deffef04 	addi	sp,sp,-68
  80bf94:	dc400f15 	stw	r17,60(sp)
  80bf98:	dc400404 	addi	r17,sp,16
  80bf9c:	2005883a 	mov	r2,r4
  80bfa0:	2807883a 	mov	r3,r5
  80bfa4:	dc000e15 	stw	r16,56(sp)
  80bfa8:	d809883a 	mov	r4,sp
  80bfac:	880b883a 	mov	r5,r17
  80bfb0:	dc000904 	addi	r16,sp,36
  80bfb4:	d8c00115 	stw	r3,4(sp)
  80bfb8:	d8800015 	stw	r2,0(sp)
  80bfbc:	d9800215 	stw	r6,8(sp)
  80bfc0:	dfc01015 	stw	ra,64(sp)
  80bfc4:	d9c00315 	stw	r7,12(sp)
  80bfc8:	0803a480 	call	803a48 <__unpack_d>
  80bfcc:	d9000204 	addi	r4,sp,8
  80bfd0:	800b883a 	mov	r5,r16
  80bfd4:	0803a480 	call	803a48 <__unpack_d>
  80bfd8:	d8800417 	ldw	r2,16(sp)
  80bfdc:	00c00044 	movi	r3,1
  80bfe0:	180d883a 	mov	r6,r3
  80bfe4:	1880062e 	bgeu	r3,r2,80c000 <__eqdf2+0x70>
  80bfe8:	d8800917 	ldw	r2,36(sp)
  80bfec:	8809883a 	mov	r4,r17
  80bff0:	800b883a 	mov	r5,r16
  80bff4:	1880022e 	bgeu	r3,r2,80c000 <__eqdf2+0x70>
  80bff8:	0803b800 	call	803b80 <__fpcmp_parts_d>
  80bffc:	100d883a 	mov	r6,r2
  80c000:	3005883a 	mov	r2,r6
  80c004:	dfc01017 	ldw	ra,64(sp)
  80c008:	dc400f17 	ldw	r17,60(sp)
  80c00c:	dc000e17 	ldw	r16,56(sp)
  80c010:	dec01104 	addi	sp,sp,68
  80c014:	f800283a 	ret

0080c018 <__gtdf2>:
  80c018:	deffef04 	addi	sp,sp,-68
  80c01c:	dc400f15 	stw	r17,60(sp)
  80c020:	dc400404 	addi	r17,sp,16
  80c024:	2005883a 	mov	r2,r4
  80c028:	2807883a 	mov	r3,r5
  80c02c:	dc000e15 	stw	r16,56(sp)
  80c030:	d809883a 	mov	r4,sp
  80c034:	880b883a 	mov	r5,r17
  80c038:	dc000904 	addi	r16,sp,36
  80c03c:	d8c00115 	stw	r3,4(sp)
  80c040:	d8800015 	stw	r2,0(sp)
  80c044:	d9800215 	stw	r6,8(sp)
  80c048:	dfc01015 	stw	ra,64(sp)
  80c04c:	d9c00315 	stw	r7,12(sp)
  80c050:	0803a480 	call	803a48 <__unpack_d>
  80c054:	d9000204 	addi	r4,sp,8
  80c058:	800b883a 	mov	r5,r16
  80c05c:	0803a480 	call	803a48 <__unpack_d>
  80c060:	d8800417 	ldw	r2,16(sp)
  80c064:	00c00044 	movi	r3,1
  80c068:	01bfffc4 	movi	r6,-1
  80c06c:	1880062e 	bgeu	r3,r2,80c088 <__gtdf2+0x70>
  80c070:	d8800917 	ldw	r2,36(sp)
  80c074:	8809883a 	mov	r4,r17
  80c078:	800b883a 	mov	r5,r16
  80c07c:	1880022e 	bgeu	r3,r2,80c088 <__gtdf2+0x70>
  80c080:	0803b800 	call	803b80 <__fpcmp_parts_d>
  80c084:	100d883a 	mov	r6,r2
  80c088:	3005883a 	mov	r2,r6
  80c08c:	dfc01017 	ldw	ra,64(sp)
  80c090:	dc400f17 	ldw	r17,60(sp)
  80c094:	dc000e17 	ldw	r16,56(sp)
  80c098:	dec01104 	addi	sp,sp,68
  80c09c:	f800283a 	ret

0080c0a0 <__gedf2>:
  80c0a0:	deffef04 	addi	sp,sp,-68
  80c0a4:	dc400f15 	stw	r17,60(sp)
  80c0a8:	dc400404 	addi	r17,sp,16
  80c0ac:	2005883a 	mov	r2,r4
  80c0b0:	2807883a 	mov	r3,r5
  80c0b4:	dc000e15 	stw	r16,56(sp)
  80c0b8:	d809883a 	mov	r4,sp
  80c0bc:	880b883a 	mov	r5,r17
  80c0c0:	dc000904 	addi	r16,sp,36
  80c0c4:	d8c00115 	stw	r3,4(sp)
  80c0c8:	d8800015 	stw	r2,0(sp)
  80c0cc:	d9800215 	stw	r6,8(sp)
  80c0d0:	dfc01015 	stw	ra,64(sp)
  80c0d4:	d9c00315 	stw	r7,12(sp)
  80c0d8:	0803a480 	call	803a48 <__unpack_d>
  80c0dc:	d9000204 	addi	r4,sp,8
  80c0e0:	800b883a 	mov	r5,r16
  80c0e4:	0803a480 	call	803a48 <__unpack_d>
  80c0e8:	d8800417 	ldw	r2,16(sp)
  80c0ec:	00c00044 	movi	r3,1
  80c0f0:	01bfffc4 	movi	r6,-1
  80c0f4:	1880062e 	bgeu	r3,r2,80c110 <__gedf2+0x70>
  80c0f8:	d8800917 	ldw	r2,36(sp)
  80c0fc:	8809883a 	mov	r4,r17
  80c100:	800b883a 	mov	r5,r16
  80c104:	1880022e 	bgeu	r3,r2,80c110 <__gedf2+0x70>
  80c108:	0803b800 	call	803b80 <__fpcmp_parts_d>
  80c10c:	100d883a 	mov	r6,r2
  80c110:	3005883a 	mov	r2,r6
  80c114:	dfc01017 	ldw	ra,64(sp)
  80c118:	dc400f17 	ldw	r17,60(sp)
  80c11c:	dc000e17 	ldw	r16,56(sp)
  80c120:	dec01104 	addi	sp,sp,68
  80c124:	f800283a 	ret

0080c128 <__ltdf2>:
  80c128:	deffef04 	addi	sp,sp,-68
  80c12c:	dc400f15 	stw	r17,60(sp)
  80c130:	dc400404 	addi	r17,sp,16
  80c134:	2005883a 	mov	r2,r4
  80c138:	2807883a 	mov	r3,r5
  80c13c:	dc000e15 	stw	r16,56(sp)
  80c140:	d809883a 	mov	r4,sp
  80c144:	880b883a 	mov	r5,r17
  80c148:	dc000904 	addi	r16,sp,36
  80c14c:	d8c00115 	stw	r3,4(sp)
  80c150:	d8800015 	stw	r2,0(sp)
  80c154:	d9800215 	stw	r6,8(sp)
  80c158:	dfc01015 	stw	ra,64(sp)
  80c15c:	d9c00315 	stw	r7,12(sp)
  80c160:	0803a480 	call	803a48 <__unpack_d>
  80c164:	d9000204 	addi	r4,sp,8
  80c168:	800b883a 	mov	r5,r16
  80c16c:	0803a480 	call	803a48 <__unpack_d>
  80c170:	d8800417 	ldw	r2,16(sp)
  80c174:	00c00044 	movi	r3,1
  80c178:	180d883a 	mov	r6,r3
  80c17c:	1880062e 	bgeu	r3,r2,80c198 <__ltdf2+0x70>
  80c180:	d8800917 	ldw	r2,36(sp)
  80c184:	8809883a 	mov	r4,r17
  80c188:	800b883a 	mov	r5,r16
  80c18c:	1880022e 	bgeu	r3,r2,80c198 <__ltdf2+0x70>
  80c190:	0803b800 	call	803b80 <__fpcmp_parts_d>
  80c194:	100d883a 	mov	r6,r2
  80c198:	3005883a 	mov	r2,r6
  80c19c:	dfc01017 	ldw	ra,64(sp)
  80c1a0:	dc400f17 	ldw	r17,60(sp)
  80c1a4:	dc000e17 	ldw	r16,56(sp)
  80c1a8:	dec01104 	addi	sp,sp,68
  80c1ac:	f800283a 	ret

0080c1b0 <__floatsidf>:
  80c1b0:	2006d7fa 	srli	r3,r4,31
  80c1b4:	defff604 	addi	sp,sp,-40
  80c1b8:	008000c4 	movi	r2,3
  80c1bc:	dfc00915 	stw	ra,36(sp)
  80c1c0:	dcc00815 	stw	r19,32(sp)
  80c1c4:	dc800715 	stw	r18,28(sp)
  80c1c8:	dc400615 	stw	r17,24(sp)
  80c1cc:	dc000515 	stw	r16,20(sp)
  80c1d0:	d8800015 	stw	r2,0(sp)
  80c1d4:	d8c00115 	stw	r3,4(sp)
  80c1d8:	20000f1e 	bne	r4,zero,80c218 <__floatsidf+0x68>
  80c1dc:	00800084 	movi	r2,2
  80c1e0:	d8800015 	stw	r2,0(sp)
  80c1e4:	d809883a 	mov	r4,sp
  80c1e8:	08037340 	call	803734 <__pack_d>
  80c1ec:	1009883a 	mov	r4,r2
  80c1f0:	180b883a 	mov	r5,r3
  80c1f4:	2005883a 	mov	r2,r4
  80c1f8:	2807883a 	mov	r3,r5
  80c1fc:	dfc00917 	ldw	ra,36(sp)
  80c200:	dcc00817 	ldw	r19,32(sp)
  80c204:	dc800717 	ldw	r18,28(sp)
  80c208:	dc400617 	ldw	r17,24(sp)
  80c20c:	dc000517 	ldw	r16,20(sp)
  80c210:	dec00a04 	addi	sp,sp,40
  80c214:	f800283a 	ret
  80c218:	00800f04 	movi	r2,60
  80c21c:	1807003a 	cmpeq	r3,r3,zero
  80c220:	d8800215 	stw	r2,8(sp)
  80c224:	18001126 	beq	r3,zero,80c26c <__floatsidf+0xbc>
  80c228:	0027883a 	mov	r19,zero
  80c22c:	2025883a 	mov	r18,r4
  80c230:	d9000315 	stw	r4,12(sp)
  80c234:	dcc00415 	stw	r19,16(sp)
  80c238:	08033b80 	call	8033b8 <__clzsi2>
  80c23c:	11000744 	addi	r4,r2,29
  80c240:	013fe80e 	bge	zero,r4,80c1e4 <__floatsidf+0x34>
  80c244:	10bfff44 	addi	r2,r2,-3
  80c248:	10000c16 	blt	r2,zero,80c27c <__floatsidf+0xcc>
  80c24c:	90a2983a 	sll	r17,r18,r2
  80c250:	0021883a 	mov	r16,zero
  80c254:	d8800217 	ldw	r2,8(sp)
  80c258:	dc400415 	stw	r17,16(sp)
  80c25c:	dc000315 	stw	r16,12(sp)
  80c260:	1105c83a 	sub	r2,r2,r4
  80c264:	d8800215 	stw	r2,8(sp)
  80c268:	003fde06 	br	80c1e4 <__floatsidf+0x34>
  80c26c:	00a00034 	movhi	r2,32768
  80c270:	20800a26 	beq	r4,r2,80c29c <__floatsidf+0xec>
  80c274:	0109c83a 	sub	r4,zero,r4
  80c278:	003feb06 	br	80c228 <__floatsidf+0x78>
  80c27c:	9006d07a 	srli	r3,r18,1
  80c280:	008007c4 	movi	r2,31
  80c284:	1105c83a 	sub	r2,r2,r4
  80c288:	1886d83a 	srl	r3,r3,r2
  80c28c:	9922983a 	sll	r17,r19,r4
  80c290:	9120983a 	sll	r16,r18,r4
  80c294:	1c62b03a 	or	r17,r3,r17
  80c298:	003fee06 	br	80c254 <__floatsidf+0xa4>
  80c29c:	0009883a 	mov	r4,zero
  80c2a0:	01707834 	movhi	r5,49632
  80c2a4:	003fd306 	br	80c1f4 <__floatsidf+0x44>

0080c2a8 <__fixdfsi>:
  80c2a8:	defff804 	addi	sp,sp,-32
  80c2ac:	2005883a 	mov	r2,r4
  80c2b0:	2807883a 	mov	r3,r5
  80c2b4:	d809883a 	mov	r4,sp
  80c2b8:	d9400204 	addi	r5,sp,8
  80c2bc:	d8c00115 	stw	r3,4(sp)
  80c2c0:	d8800015 	stw	r2,0(sp)
  80c2c4:	dfc00715 	stw	ra,28(sp)
  80c2c8:	0803a480 	call	803a48 <__unpack_d>
  80c2cc:	d8c00217 	ldw	r3,8(sp)
  80c2d0:	00800084 	movi	r2,2
  80c2d4:	1880051e 	bne	r3,r2,80c2ec <__fixdfsi+0x44>
  80c2d8:	0007883a 	mov	r3,zero
  80c2dc:	1805883a 	mov	r2,r3
  80c2e0:	dfc00717 	ldw	ra,28(sp)
  80c2e4:	dec00804 	addi	sp,sp,32
  80c2e8:	f800283a 	ret
  80c2ec:	00800044 	movi	r2,1
  80c2f0:	10fff92e 	bgeu	r2,r3,80c2d8 <__fixdfsi+0x30>
  80c2f4:	00800104 	movi	r2,4
  80c2f8:	18800426 	beq	r3,r2,80c30c <__fixdfsi+0x64>
  80c2fc:	d8c00417 	ldw	r3,16(sp)
  80c300:	183ff516 	blt	r3,zero,80c2d8 <__fixdfsi+0x30>
  80c304:	00800784 	movi	r2,30
  80c308:	10c0080e 	bge	r2,r3,80c32c <__fixdfsi+0x84>
  80c30c:	d8800317 	ldw	r2,12(sp)
  80c310:	1000121e 	bne	r2,zero,80c35c <__fixdfsi+0xb4>
  80c314:	00e00034 	movhi	r3,32768
  80c318:	18ffffc4 	addi	r3,r3,-1
  80c31c:	1805883a 	mov	r2,r3
  80c320:	dfc00717 	ldw	ra,28(sp)
  80c324:	dec00804 	addi	sp,sp,32
  80c328:	f800283a 	ret
  80c32c:	00800f04 	movi	r2,60
  80c330:	10d1c83a 	sub	r8,r2,r3
  80c334:	40bff804 	addi	r2,r8,-32
  80c338:	d9800517 	ldw	r6,20(sp)
  80c33c:	d9c00617 	ldw	r7,24(sp)
  80c340:	10000816 	blt	r2,zero,80c364 <__fixdfsi+0xbc>
  80c344:	3888d83a 	srl	r4,r7,r2
  80c348:	d8800317 	ldw	r2,12(sp)
  80c34c:	2007883a 	mov	r3,r4
  80c350:	103fe226 	beq	r2,zero,80c2dc <__fixdfsi+0x34>
  80c354:	0107c83a 	sub	r3,zero,r4
  80c358:	003fe006 	br	80c2dc <__fixdfsi+0x34>
  80c35c:	00e00034 	movhi	r3,32768
  80c360:	003fde06 	br	80c2dc <__fixdfsi+0x34>
  80c364:	39c7883a 	add	r3,r7,r7
  80c368:	008007c4 	movi	r2,31
  80c36c:	1205c83a 	sub	r2,r2,r8
  80c370:	1886983a 	sll	r3,r3,r2
  80c374:	3208d83a 	srl	r4,r6,r8
  80c378:	1908b03a 	or	r4,r3,r4
  80c37c:	003ff206 	br	80c348 <__fixdfsi+0xa0>

0080c380 <__floatunsidf>:
  80c380:	defff204 	addi	sp,sp,-56
  80c384:	dfc00d15 	stw	ra,52(sp)
  80c388:	ddc00c15 	stw	r23,48(sp)
  80c38c:	dd800b15 	stw	r22,44(sp)
  80c390:	dd400a15 	stw	r21,40(sp)
  80c394:	dd000915 	stw	r20,36(sp)
  80c398:	dcc00815 	stw	r19,32(sp)
  80c39c:	dc800715 	stw	r18,28(sp)
  80c3a0:	dc400615 	stw	r17,24(sp)
  80c3a4:	dc000515 	stw	r16,20(sp)
  80c3a8:	d8000115 	stw	zero,4(sp)
  80c3ac:	20000f1e 	bne	r4,zero,80c3ec <__floatunsidf+0x6c>
  80c3b0:	00800084 	movi	r2,2
  80c3b4:	d8800015 	stw	r2,0(sp)
  80c3b8:	d809883a 	mov	r4,sp
  80c3bc:	08037340 	call	803734 <__pack_d>
  80c3c0:	dfc00d17 	ldw	ra,52(sp)
  80c3c4:	ddc00c17 	ldw	r23,48(sp)
  80c3c8:	dd800b17 	ldw	r22,44(sp)
  80c3cc:	dd400a17 	ldw	r21,40(sp)
  80c3d0:	dd000917 	ldw	r20,36(sp)
  80c3d4:	dcc00817 	ldw	r19,32(sp)
  80c3d8:	dc800717 	ldw	r18,28(sp)
  80c3dc:	dc400617 	ldw	r17,24(sp)
  80c3e0:	dc000517 	ldw	r16,20(sp)
  80c3e4:	dec00e04 	addi	sp,sp,56
  80c3e8:	f800283a 	ret
  80c3ec:	008000c4 	movi	r2,3
  80c3f0:	00c00f04 	movi	r3,60
  80c3f4:	002f883a 	mov	r23,zero
  80c3f8:	202d883a 	mov	r22,r4
  80c3fc:	d8800015 	stw	r2,0(sp)
  80c400:	d8c00215 	stw	r3,8(sp)
  80c404:	d9000315 	stw	r4,12(sp)
  80c408:	ddc00415 	stw	r23,16(sp)
  80c40c:	08033b80 	call	8033b8 <__clzsi2>
  80c410:	12400744 	addi	r9,r2,29
  80c414:	48000b16 	blt	r9,zero,80c444 <__floatunsidf+0xc4>
  80c418:	483fe726 	beq	r9,zero,80c3b8 <__floatunsidf+0x38>
  80c41c:	10bfff44 	addi	r2,r2,-3
  80c420:	10002e16 	blt	r2,zero,80c4dc <__floatunsidf+0x15c>
  80c424:	b0a2983a 	sll	r17,r22,r2
  80c428:	0021883a 	mov	r16,zero
  80c42c:	d8800217 	ldw	r2,8(sp)
  80c430:	dc400415 	stw	r17,16(sp)
  80c434:	dc000315 	stw	r16,12(sp)
  80c438:	1245c83a 	sub	r2,r2,r9
  80c43c:	d8800215 	stw	r2,8(sp)
  80c440:	003fdd06 	br	80c3b8 <__floatunsidf+0x38>
  80c444:	0255c83a 	sub	r10,zero,r9
  80c448:	51bff804 	addi	r6,r10,-32
  80c44c:	30001b16 	blt	r6,zero,80c4bc <__floatunsidf+0x13c>
  80c450:	b9a8d83a 	srl	r20,r23,r6
  80c454:	002b883a 	mov	r21,zero
  80c458:	000f883a 	mov	r7,zero
  80c45c:	01000044 	movi	r4,1
  80c460:	0011883a 	mov	r8,zero
  80c464:	30002516 	blt	r6,zero,80c4fc <__floatunsidf+0x17c>
  80c468:	21a6983a 	sll	r19,r4,r6
  80c46c:	0025883a 	mov	r18,zero
  80c470:	00bfffc4 	movi	r2,-1
  80c474:	9089883a 	add	r4,r18,r2
  80c478:	988b883a 	add	r5,r19,r2
  80c47c:	248d803a 	cmpltu	r6,r4,r18
  80c480:	314b883a 	add	r5,r6,r5
  80c484:	b104703a 	and	r2,r22,r4
  80c488:	b946703a 	and	r3,r23,r5
  80c48c:	10c4b03a 	or	r2,r2,r3
  80c490:	10000226 	beq	r2,zero,80c49c <__floatunsidf+0x11c>
  80c494:	01c00044 	movi	r7,1
  80c498:	0011883a 	mov	r8,zero
  80c49c:	d9000217 	ldw	r4,8(sp)
  80c4a0:	a1c4b03a 	or	r2,r20,r7
  80c4a4:	aa06b03a 	or	r3,r21,r8
  80c4a8:	2249c83a 	sub	r4,r4,r9
  80c4ac:	d8c00415 	stw	r3,16(sp)
  80c4b0:	d9000215 	stw	r4,8(sp)
  80c4b4:	d8800315 	stw	r2,12(sp)
  80c4b8:	003fbf06 	br	80c3b8 <__floatunsidf+0x38>
  80c4bc:	bdc7883a 	add	r3,r23,r23
  80c4c0:	008007c4 	movi	r2,31
  80c4c4:	1285c83a 	sub	r2,r2,r10
  80c4c8:	1886983a 	sll	r3,r3,r2
  80c4cc:	b2a8d83a 	srl	r20,r22,r10
  80c4d0:	baaad83a 	srl	r21,r23,r10
  80c4d4:	1d28b03a 	or	r20,r3,r20
  80c4d8:	003fdf06 	br	80c458 <__floatunsidf+0xd8>
  80c4dc:	b006d07a 	srli	r3,r22,1
  80c4e0:	008007c4 	movi	r2,31
  80c4e4:	1245c83a 	sub	r2,r2,r9
  80c4e8:	1886d83a 	srl	r3,r3,r2
  80c4ec:	ba62983a 	sll	r17,r23,r9
  80c4f0:	b260983a 	sll	r16,r22,r9
  80c4f4:	1c62b03a 	or	r17,r3,r17
  80c4f8:	003fcc06 	br	80c42c <__floatunsidf+0xac>
  80c4fc:	2006d07a 	srli	r3,r4,1
  80c500:	008007c4 	movi	r2,31
  80c504:	1285c83a 	sub	r2,r2,r10
  80c508:	18a6d83a 	srl	r19,r3,r2
  80c50c:	22a4983a 	sll	r18,r4,r10
  80c510:	003fd706 	br	80c470 <__floatunsidf+0xf0>

0080c514 <udivmodsi4>:
  80c514:	29001b2e 	bgeu	r5,r4,80c584 <udivmodsi4+0x70>
  80c518:	28001a16 	blt	r5,zero,80c584 <udivmodsi4+0x70>
  80c51c:	00800044 	movi	r2,1
  80c520:	0007883a 	mov	r3,zero
  80c524:	01c007c4 	movi	r7,31
  80c528:	00000306 	br	80c538 <udivmodsi4+0x24>
  80c52c:	19c01326 	beq	r3,r7,80c57c <udivmodsi4+0x68>
  80c530:	18c00044 	addi	r3,r3,1
  80c534:	28000416 	blt	r5,zero,80c548 <udivmodsi4+0x34>
  80c538:	294b883a 	add	r5,r5,r5
  80c53c:	1085883a 	add	r2,r2,r2
  80c540:	293ffa36 	bltu	r5,r4,80c52c <udivmodsi4+0x18>
  80c544:	10000d26 	beq	r2,zero,80c57c <udivmodsi4+0x68>
  80c548:	0007883a 	mov	r3,zero
  80c54c:	21400236 	bltu	r4,r5,80c558 <udivmodsi4+0x44>
  80c550:	2149c83a 	sub	r4,r4,r5
  80c554:	1886b03a 	or	r3,r3,r2
  80c558:	1004d07a 	srli	r2,r2,1
  80c55c:	280ad07a 	srli	r5,r5,1
  80c560:	103ffa1e 	bne	r2,zero,80c54c <udivmodsi4+0x38>
  80c564:	30000226 	beq	r6,zero,80c570 <udivmodsi4+0x5c>
  80c568:	2005883a 	mov	r2,r4
  80c56c:	f800283a 	ret
  80c570:	1809883a 	mov	r4,r3
  80c574:	2005883a 	mov	r2,r4
  80c578:	f800283a 	ret
  80c57c:	0007883a 	mov	r3,zero
  80c580:	003ff806 	br	80c564 <udivmodsi4+0x50>
  80c584:	00800044 	movi	r2,1
  80c588:	0007883a 	mov	r3,zero
  80c58c:	003fef06 	br	80c54c <udivmodsi4+0x38>

0080c590 <__divsi3>:
  80c590:	defffe04 	addi	sp,sp,-8
  80c594:	dc000015 	stw	r16,0(sp)
  80c598:	dfc00115 	stw	ra,4(sp)
  80c59c:	0021883a 	mov	r16,zero
  80c5a0:	20000c16 	blt	r4,zero,80c5d4 <__divsi3+0x44>
  80c5a4:	000d883a 	mov	r6,zero
  80c5a8:	28000e16 	blt	r5,zero,80c5e4 <__divsi3+0x54>
  80c5ac:	080c5140 	call	80c514 <udivmodsi4>
  80c5b0:	1007883a 	mov	r3,r2
  80c5b4:	8005003a 	cmpeq	r2,r16,zero
  80c5b8:	1000011e 	bne	r2,zero,80c5c0 <__divsi3+0x30>
  80c5bc:	00c7c83a 	sub	r3,zero,r3
  80c5c0:	1805883a 	mov	r2,r3
  80c5c4:	dfc00117 	ldw	ra,4(sp)
  80c5c8:	dc000017 	ldw	r16,0(sp)
  80c5cc:	dec00204 	addi	sp,sp,8
  80c5d0:	f800283a 	ret
  80c5d4:	0109c83a 	sub	r4,zero,r4
  80c5d8:	04000044 	movi	r16,1
  80c5dc:	000d883a 	mov	r6,zero
  80c5e0:	283ff20e 	bge	r5,zero,80c5ac <__divsi3+0x1c>
  80c5e4:	014bc83a 	sub	r5,zero,r5
  80c5e8:	8021003a 	cmpeq	r16,r16,zero
  80c5ec:	003fef06 	br	80c5ac <__divsi3+0x1c>

0080c5f0 <__modsi3>:
  80c5f0:	deffff04 	addi	sp,sp,-4
  80c5f4:	dfc00015 	stw	ra,0(sp)
  80c5f8:	01800044 	movi	r6,1
  80c5fc:	2807883a 	mov	r3,r5
  80c600:	20000416 	blt	r4,zero,80c614 <__modsi3+0x24>
  80c604:	28000c16 	blt	r5,zero,80c638 <__modsi3+0x48>
  80c608:	dfc00017 	ldw	ra,0(sp)
  80c60c:	dec00104 	addi	sp,sp,4
  80c610:	080c5141 	jmpi	80c514 <udivmodsi4>
  80c614:	0109c83a 	sub	r4,zero,r4
  80c618:	28000b16 	blt	r5,zero,80c648 <__modsi3+0x58>
  80c61c:	180b883a 	mov	r5,r3
  80c620:	01800044 	movi	r6,1
  80c624:	080c5140 	call	80c514 <udivmodsi4>
  80c628:	0085c83a 	sub	r2,zero,r2
  80c62c:	dfc00017 	ldw	ra,0(sp)
  80c630:	dec00104 	addi	sp,sp,4
  80c634:	f800283a 	ret
  80c638:	014bc83a 	sub	r5,zero,r5
  80c63c:	dfc00017 	ldw	ra,0(sp)
  80c640:	dec00104 	addi	sp,sp,4
  80c644:	080c5141 	jmpi	80c514 <udivmodsi4>
  80c648:	0147c83a 	sub	r3,zero,r5
  80c64c:	003ff306 	br	80c61c <__modsi3+0x2c>

0080c650 <__udivsi3>:
  80c650:	000d883a 	mov	r6,zero
  80c654:	080c5141 	jmpi	80c514 <udivmodsi4>

0080c658 <__umodsi3>:
  80c658:	01800044 	movi	r6,1
  80c65c:	080c5141 	jmpi	80c514 <udivmodsi4>

0080c660 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80c660:	defff804 	addi	sp,sp,-32
  80c664:	dfc00715 	stw	ra,28(sp)
  80c668:	df000615 	stw	fp,24(sp)
  80c66c:	df000604 	addi	fp,sp,24
  80c670:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80c674:	e0bffc17 	ldw	r2,-16(fp)
  80c678:	1004803a 	cmplt	r2,r2,zero
  80c67c:	1000081e 	bne	r2,zero,80c6a0 <close+0x40>
  80c680:	e0bffc17 	ldw	r2,-16(fp)
  80c684:	10800324 	muli	r2,r2,12
  80c688:	1007883a 	mov	r3,r2
  80c68c:	00802074 	movhi	r2,129
  80c690:	108aa604 	addi	r2,r2,10904
  80c694:	1887883a 	add	r3,r3,r2
  80c698:	e0ffff15 	stw	r3,-4(fp)
  80c69c:	00000106 	br	80c6a4 <close+0x44>
  80c6a0:	e03fff15 	stw	zero,-4(fp)
  80c6a4:	e0bfff17 	ldw	r2,-4(fp)
  80c6a8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80c6ac:	e0bffb17 	ldw	r2,-20(fp)
  80c6b0:	1005003a 	cmpeq	r2,r2,zero
  80c6b4:	10001d1e 	bne	r2,zero,80c72c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80c6b8:	e0bffb17 	ldw	r2,-20(fp)
  80c6bc:	10800017 	ldw	r2,0(r2)
  80c6c0:	10800417 	ldw	r2,16(r2)
  80c6c4:	1005003a 	cmpeq	r2,r2,zero
  80c6c8:	1000071e 	bne	r2,zero,80c6e8 <close+0x88>
  80c6cc:	e0bffb17 	ldw	r2,-20(fp)
  80c6d0:	10800017 	ldw	r2,0(r2)
  80c6d4:	10800417 	ldw	r2,16(r2)
  80c6d8:	e13ffb17 	ldw	r4,-20(fp)
  80c6dc:	103ee83a 	callr	r2
  80c6e0:	e0bffe15 	stw	r2,-8(fp)
  80c6e4:	00000106 	br	80c6ec <close+0x8c>
  80c6e8:	e03ffe15 	stw	zero,-8(fp)
  80c6ec:	e0bffe17 	ldw	r2,-8(fp)
  80c6f0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c6f4:	e13ffc17 	ldw	r4,-16(fp)
  80c6f8:	080cea40 	call	80cea4 <alt_release_fd>
    if (rval < 0)
  80c6fc:	e0bffa17 	ldw	r2,-24(fp)
  80c700:	1004403a 	cmpge	r2,r2,zero
  80c704:	1000071e 	bne	r2,zero,80c724 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80c708:	080c75c0 	call	80c75c <alt_get_errno>
  80c70c:	e0fffa17 	ldw	r3,-24(fp)
  80c710:	00c7c83a 	sub	r3,zero,r3
  80c714:	10c00015 	stw	r3,0(r2)
      return -1;
  80c718:	00bfffc4 	movi	r2,-1
  80c71c:	e0bffd15 	stw	r2,-12(fp)
  80c720:	00000806 	br	80c744 <close+0xe4>
    }
    return 0;
  80c724:	e03ffd15 	stw	zero,-12(fp)
  80c728:	00000606 	br	80c744 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c72c:	080c75c0 	call	80c75c <alt_get_errno>
  80c730:	1007883a 	mov	r3,r2
  80c734:	00801444 	movi	r2,81
  80c738:	18800015 	stw	r2,0(r3)
    return -1;
  80c73c:	00bfffc4 	movi	r2,-1
  80c740:	e0bffd15 	stw	r2,-12(fp)
  80c744:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80c748:	e037883a 	mov	sp,fp
  80c74c:	dfc00117 	ldw	ra,4(sp)
  80c750:	df000017 	ldw	fp,0(sp)
  80c754:	dec00204 	addi	sp,sp,8
  80c758:	f800283a 	ret

0080c75c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c75c:	defffd04 	addi	sp,sp,-12
  80c760:	dfc00215 	stw	ra,8(sp)
  80c764:	df000115 	stw	fp,4(sp)
  80c768:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c76c:	00802074 	movhi	r2,129
  80c770:	108f8e04 	addi	r2,r2,15928
  80c774:	10800017 	ldw	r2,0(r2)
  80c778:	1005003a 	cmpeq	r2,r2,zero
  80c77c:	1000061e 	bne	r2,zero,80c798 <alt_get_errno+0x3c>
  80c780:	00802074 	movhi	r2,129
  80c784:	108f8e04 	addi	r2,r2,15928
  80c788:	10800017 	ldw	r2,0(r2)
  80c78c:	103ee83a 	callr	r2
  80c790:	e0bfff15 	stw	r2,-4(fp)
  80c794:	00000306 	br	80c7a4 <alt_get_errno+0x48>
  80c798:	00802074 	movhi	r2,129
  80c79c:	1096a004 	addi	r2,r2,23168
  80c7a0:	e0bfff15 	stw	r2,-4(fp)
  80c7a4:	e0bfff17 	ldw	r2,-4(fp)
}
  80c7a8:	e037883a 	mov	sp,fp
  80c7ac:	dfc00117 	ldw	ra,4(sp)
  80c7b0:	df000017 	ldw	fp,0(sp)
  80c7b4:	dec00204 	addi	sp,sp,8
  80c7b8:	f800283a 	ret

0080c7bc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80c7bc:	defffc04 	addi	sp,sp,-16
  80c7c0:	df000315 	stw	fp,12(sp)
  80c7c4:	df000304 	addi	fp,sp,12
  80c7c8:	e13ffd15 	stw	r4,-12(fp)
  80c7cc:	e17ffe15 	stw	r5,-8(fp)
  80c7d0:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80c7d4:	e0bfff17 	ldw	r2,-4(fp)
}
  80c7d8:	e037883a 	mov	sp,fp
  80c7dc:	df000017 	ldw	fp,0(sp)
  80c7e0:	dec00104 	addi	sp,sp,4
  80c7e4:	f800283a 	ret

0080c7e8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80c7e8:	defff904 	addi	sp,sp,-28
  80c7ec:	dfc00615 	stw	ra,24(sp)
  80c7f0:	df000515 	stw	fp,20(sp)
  80c7f4:	df000504 	addi	fp,sp,20
  80c7f8:	e13ffc15 	stw	r4,-16(fp)
  80c7fc:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c800:	e0bffc17 	ldw	r2,-16(fp)
  80c804:	1004803a 	cmplt	r2,r2,zero
  80c808:	1000081e 	bne	r2,zero,80c82c <fstat+0x44>
  80c80c:	e0bffc17 	ldw	r2,-16(fp)
  80c810:	10800324 	muli	r2,r2,12
  80c814:	1007883a 	mov	r3,r2
  80c818:	00802074 	movhi	r2,129
  80c81c:	108aa604 	addi	r2,r2,10904
  80c820:	1887883a 	add	r3,r3,r2
  80c824:	e0ffff15 	stw	r3,-4(fp)
  80c828:	00000106 	br	80c830 <fstat+0x48>
  80c82c:	e03fff15 	stw	zero,-4(fp)
  80c830:	e0bfff17 	ldw	r2,-4(fp)
  80c834:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80c838:	e0bffb17 	ldw	r2,-20(fp)
  80c83c:	1005003a 	cmpeq	r2,r2,zero
  80c840:	1000121e 	bne	r2,zero,80c88c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80c844:	e0bffb17 	ldw	r2,-20(fp)
  80c848:	10800017 	ldw	r2,0(r2)
  80c84c:	10800817 	ldw	r2,32(r2)
  80c850:	1005003a 	cmpeq	r2,r2,zero
  80c854:	1000081e 	bne	r2,zero,80c878 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80c858:	e0bffb17 	ldw	r2,-20(fp)
  80c85c:	10800017 	ldw	r2,0(r2)
  80c860:	10800817 	ldw	r2,32(r2)
  80c864:	e13ffb17 	ldw	r4,-20(fp)
  80c868:	e17ffd17 	ldw	r5,-12(fp)
  80c86c:	103ee83a 	callr	r2
  80c870:	e0bffe15 	stw	r2,-8(fp)
  80c874:	00000b06 	br	80c8a4 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80c878:	e0fffd17 	ldw	r3,-12(fp)
  80c87c:	00880004 	movi	r2,8192
  80c880:	18800115 	stw	r2,4(r3)
      return 0;
  80c884:	e03ffe15 	stw	zero,-8(fp)
  80c888:	00000606 	br	80c8a4 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c88c:	080c8bc0 	call	80c8bc <alt_get_errno>
  80c890:	1007883a 	mov	r3,r2
  80c894:	00801444 	movi	r2,81
  80c898:	18800015 	stw	r2,0(r3)
    return -1;
  80c89c:	00bfffc4 	movi	r2,-1
  80c8a0:	e0bffe15 	stw	r2,-8(fp)
  80c8a4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80c8a8:	e037883a 	mov	sp,fp
  80c8ac:	dfc00117 	ldw	ra,4(sp)
  80c8b0:	df000017 	ldw	fp,0(sp)
  80c8b4:	dec00204 	addi	sp,sp,8
  80c8b8:	f800283a 	ret

0080c8bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c8bc:	defffd04 	addi	sp,sp,-12
  80c8c0:	dfc00215 	stw	ra,8(sp)
  80c8c4:	df000115 	stw	fp,4(sp)
  80c8c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c8cc:	00802074 	movhi	r2,129
  80c8d0:	108f8e04 	addi	r2,r2,15928
  80c8d4:	10800017 	ldw	r2,0(r2)
  80c8d8:	1005003a 	cmpeq	r2,r2,zero
  80c8dc:	1000061e 	bne	r2,zero,80c8f8 <alt_get_errno+0x3c>
  80c8e0:	00802074 	movhi	r2,129
  80c8e4:	108f8e04 	addi	r2,r2,15928
  80c8e8:	10800017 	ldw	r2,0(r2)
  80c8ec:	103ee83a 	callr	r2
  80c8f0:	e0bfff15 	stw	r2,-4(fp)
  80c8f4:	00000306 	br	80c904 <alt_get_errno+0x48>
  80c8f8:	00802074 	movhi	r2,129
  80c8fc:	1096a004 	addi	r2,r2,23168
  80c900:	e0bfff15 	stw	r2,-4(fp)
  80c904:	e0bfff17 	ldw	r2,-4(fp)
}
  80c908:	e037883a 	mov	sp,fp
  80c90c:	dfc00117 	ldw	ra,4(sp)
  80c910:	df000017 	ldw	fp,0(sp)
  80c914:	dec00204 	addi	sp,sp,8
  80c918:	f800283a 	ret

0080c91c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80c91c:	deffeb04 	addi	sp,sp,-84
  80c920:	dfc01415 	stw	ra,80(sp)
  80c924:	df001315 	stw	fp,76(sp)
  80c928:	df001304 	addi	fp,sp,76
  80c92c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c930:	e0bffd17 	ldw	r2,-12(fp)
  80c934:	1004803a 	cmplt	r2,r2,zero
  80c938:	1000081e 	bne	r2,zero,80c95c <isatty+0x40>
  80c93c:	e0bffd17 	ldw	r2,-12(fp)
  80c940:	10800324 	muli	r2,r2,12
  80c944:	1007883a 	mov	r3,r2
  80c948:	00802074 	movhi	r2,129
  80c94c:	108aa604 	addi	r2,r2,10904
  80c950:	1887883a 	add	r3,r3,r2
  80c954:	e0ffff15 	stw	r3,-4(fp)
  80c958:	00000106 	br	80c960 <isatty+0x44>
  80c95c:	e03fff15 	stw	zero,-4(fp)
  80c960:	e0bfff17 	ldw	r2,-4(fp)
  80c964:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80c968:	e0bfed17 	ldw	r2,-76(fp)
  80c96c:	1005003a 	cmpeq	r2,r2,zero
  80c970:	10000f1e 	bne	r2,zero,80c9b0 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80c974:	e0bfed17 	ldw	r2,-76(fp)
  80c978:	10800017 	ldw	r2,0(r2)
  80c97c:	10800817 	ldw	r2,32(r2)
  80c980:	1004c03a 	cmpne	r2,r2,zero
  80c984:	1000031e 	bne	r2,zero,80c994 <isatty+0x78>
    {
      return 1;
  80c988:	00800044 	movi	r2,1
  80c98c:	e0bffe15 	stw	r2,-8(fp)
  80c990:	00000c06 	br	80c9c4 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80c994:	e17fee04 	addi	r5,fp,-72
  80c998:	e13ffd17 	ldw	r4,-12(fp)
  80c99c:	080c7e80 	call	80c7e8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80c9a0:	e0bfef17 	ldw	r2,-68(fp)
  80c9a4:	10880020 	cmpeqi	r2,r2,8192
  80c9a8:	e0bffe15 	stw	r2,-8(fp)
  80c9ac:	00000506 	br	80c9c4 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c9b0:	080c9dc0 	call	80c9dc <alt_get_errno>
  80c9b4:	1007883a 	mov	r3,r2
  80c9b8:	00801444 	movi	r2,81
  80c9bc:	18800015 	stw	r2,0(r3)
    return 0;
  80c9c0:	e03ffe15 	stw	zero,-8(fp)
  80c9c4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80c9c8:	e037883a 	mov	sp,fp
  80c9cc:	dfc00117 	ldw	ra,4(sp)
  80c9d0:	df000017 	ldw	fp,0(sp)
  80c9d4:	dec00204 	addi	sp,sp,8
  80c9d8:	f800283a 	ret

0080c9dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c9dc:	defffd04 	addi	sp,sp,-12
  80c9e0:	dfc00215 	stw	ra,8(sp)
  80c9e4:	df000115 	stw	fp,4(sp)
  80c9e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c9ec:	00802074 	movhi	r2,129
  80c9f0:	108f8e04 	addi	r2,r2,15928
  80c9f4:	10800017 	ldw	r2,0(r2)
  80c9f8:	1005003a 	cmpeq	r2,r2,zero
  80c9fc:	1000061e 	bne	r2,zero,80ca18 <alt_get_errno+0x3c>
  80ca00:	00802074 	movhi	r2,129
  80ca04:	108f8e04 	addi	r2,r2,15928
  80ca08:	10800017 	ldw	r2,0(r2)
  80ca0c:	103ee83a 	callr	r2
  80ca10:	e0bfff15 	stw	r2,-4(fp)
  80ca14:	00000306 	br	80ca24 <alt_get_errno+0x48>
  80ca18:	00802074 	movhi	r2,129
  80ca1c:	1096a004 	addi	r2,r2,23168
  80ca20:	e0bfff15 	stw	r2,-4(fp)
  80ca24:	e0bfff17 	ldw	r2,-4(fp)
}
  80ca28:	e037883a 	mov	sp,fp
  80ca2c:	dfc00117 	ldw	ra,4(sp)
  80ca30:	df000017 	ldw	fp,0(sp)
  80ca34:	dec00204 	addi	sp,sp,8
  80ca38:	f800283a 	ret

0080ca3c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80ca3c:	defffe04 	addi	sp,sp,-8
  80ca40:	dfc00115 	stw	ra,4(sp)
  80ca44:	df000015 	stw	fp,0(sp)
  80ca48:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80ca4c:	01002074 	movhi	r4,129
  80ca50:	210f9704 	addi	r4,r4,15964
  80ca54:	01402074 	movhi	r5,129
  80ca58:	29489704 	addi	r5,r5,8796
  80ca5c:	01802074 	movhi	r6,129
  80ca60:	318f9704 	addi	r6,r6,15964
  80ca64:	080cabc0 	call	80cabc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80ca68:	01002034 	movhi	r4,128
  80ca6c:	21000804 	addi	r4,r4,32
  80ca70:	01402034 	movhi	r5,128
  80ca74:	29400804 	addi	r5,r5,32
  80ca78:	01802034 	movhi	r6,128
  80ca7c:	31806d04 	addi	r6,r6,436
  80ca80:	080cabc0 	call	80cabc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80ca84:	01002074 	movhi	r4,129
  80ca88:	21074804 	addi	r4,r4,7456
  80ca8c:	01402074 	movhi	r5,129
  80ca90:	29474804 	addi	r5,r5,7456
  80ca94:	01802074 	movhi	r6,129
  80ca98:	31889704 	addi	r6,r6,8796
  80ca9c:	080cabc0 	call	80cabc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80caa0:	081094c0 	call	81094c <alt_dcache_flush_all>
  alt_icache_flush_all();
  80caa4:	0810c900 	call	810c90 <alt_icache_flush_all>
}
  80caa8:	e037883a 	mov	sp,fp
  80caac:	dfc00117 	ldw	ra,4(sp)
  80cab0:	df000017 	ldw	fp,0(sp)
  80cab4:	dec00204 	addi	sp,sp,8
  80cab8:	f800283a 	ret

0080cabc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80cabc:	defffc04 	addi	sp,sp,-16
  80cac0:	df000315 	stw	fp,12(sp)
  80cac4:	df000304 	addi	fp,sp,12
  80cac8:	e13ffd15 	stw	r4,-12(fp)
  80cacc:	e17ffe15 	stw	r5,-8(fp)
  80cad0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80cad4:	e0fffe17 	ldw	r3,-8(fp)
  80cad8:	e0bffd17 	ldw	r2,-12(fp)
  80cadc:	18800e26 	beq	r3,r2,80cb18 <alt_load_section+0x5c>
  {
    while( to != end )
  80cae0:	00000a06 	br	80cb0c <alt_load_section+0x50>
    {
      *to++ = *from++;
  80cae4:	e0bffd17 	ldw	r2,-12(fp)
  80cae8:	10c00017 	ldw	r3,0(r2)
  80caec:	e0bffe17 	ldw	r2,-8(fp)
  80caf0:	10c00015 	stw	r3,0(r2)
  80caf4:	e0bffe17 	ldw	r2,-8(fp)
  80caf8:	10800104 	addi	r2,r2,4
  80cafc:	e0bffe15 	stw	r2,-8(fp)
  80cb00:	e0bffd17 	ldw	r2,-12(fp)
  80cb04:	10800104 	addi	r2,r2,4
  80cb08:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80cb0c:	e0fffe17 	ldw	r3,-8(fp)
  80cb10:	e0bfff17 	ldw	r2,-4(fp)
  80cb14:	18bff31e 	bne	r3,r2,80cae4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80cb18:	e037883a 	mov	sp,fp
  80cb1c:	df000017 	ldw	fp,0(sp)
  80cb20:	dec00104 	addi	sp,sp,4
  80cb24:	f800283a 	ret

0080cb28 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80cb28:	defff804 	addi	sp,sp,-32
  80cb2c:	dfc00715 	stw	ra,28(sp)
  80cb30:	df000615 	stw	fp,24(sp)
  80cb34:	df000604 	addi	fp,sp,24
  80cb38:	e13ffc15 	stw	r4,-16(fp)
  80cb3c:	e17ffd15 	stw	r5,-12(fp)
  80cb40:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80cb44:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80cb48:	e0bffc17 	ldw	r2,-16(fp)
  80cb4c:	1004803a 	cmplt	r2,r2,zero
  80cb50:	1000081e 	bne	r2,zero,80cb74 <lseek+0x4c>
  80cb54:	e0bffc17 	ldw	r2,-16(fp)
  80cb58:	10800324 	muli	r2,r2,12
  80cb5c:	1007883a 	mov	r3,r2
  80cb60:	00802074 	movhi	r2,129
  80cb64:	108aa604 	addi	r2,r2,10904
  80cb68:	1887883a 	add	r3,r3,r2
  80cb6c:	e0ffff15 	stw	r3,-4(fp)
  80cb70:	00000106 	br	80cb78 <lseek+0x50>
  80cb74:	e03fff15 	stw	zero,-4(fp)
  80cb78:	e0bfff17 	ldw	r2,-4(fp)
  80cb7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80cb80:	e0bffb17 	ldw	r2,-20(fp)
  80cb84:	1005003a 	cmpeq	r2,r2,zero
  80cb88:	1000111e 	bne	r2,zero,80cbd0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80cb8c:	e0bffb17 	ldw	r2,-20(fp)
  80cb90:	10800017 	ldw	r2,0(r2)
  80cb94:	10800717 	ldw	r2,28(r2)
  80cb98:	1005003a 	cmpeq	r2,r2,zero
  80cb9c:	1000091e 	bne	r2,zero,80cbc4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80cba0:	e0bffb17 	ldw	r2,-20(fp)
  80cba4:	10800017 	ldw	r2,0(r2)
  80cba8:	10800717 	ldw	r2,28(r2)
  80cbac:	e13ffb17 	ldw	r4,-20(fp)
  80cbb0:	e17ffd17 	ldw	r5,-12(fp)
  80cbb4:	e1bffe17 	ldw	r6,-8(fp)
  80cbb8:	103ee83a 	callr	r2
  80cbbc:	e0bffa15 	stw	r2,-24(fp)
  80cbc0:	00000506 	br	80cbd8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80cbc4:	00bfde84 	movi	r2,-134
  80cbc8:	e0bffa15 	stw	r2,-24(fp)
  80cbcc:	00000206 	br	80cbd8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80cbd0:	00bfebc4 	movi	r2,-81
  80cbd4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80cbd8:	e0bffa17 	ldw	r2,-24(fp)
  80cbdc:	1004403a 	cmpge	r2,r2,zero
  80cbe0:	1000071e 	bne	r2,zero,80cc00 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80cbe4:	080cc180 	call	80cc18 <alt_get_errno>
  80cbe8:	1007883a 	mov	r3,r2
  80cbec:	e0bffa17 	ldw	r2,-24(fp)
  80cbf0:	0085c83a 	sub	r2,zero,r2
  80cbf4:	18800015 	stw	r2,0(r3)
    rc = -1;
  80cbf8:	00bfffc4 	movi	r2,-1
  80cbfc:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80cc00:	e0bffa17 	ldw	r2,-24(fp)
}
  80cc04:	e037883a 	mov	sp,fp
  80cc08:	dfc00117 	ldw	ra,4(sp)
  80cc0c:	df000017 	ldw	fp,0(sp)
  80cc10:	dec00204 	addi	sp,sp,8
  80cc14:	f800283a 	ret

0080cc18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cc18:	defffd04 	addi	sp,sp,-12
  80cc1c:	dfc00215 	stw	ra,8(sp)
  80cc20:	df000115 	stw	fp,4(sp)
  80cc24:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80cc28:	00802074 	movhi	r2,129
  80cc2c:	108f8e04 	addi	r2,r2,15928
  80cc30:	10800017 	ldw	r2,0(r2)
  80cc34:	1005003a 	cmpeq	r2,r2,zero
  80cc38:	1000061e 	bne	r2,zero,80cc54 <alt_get_errno+0x3c>
  80cc3c:	00802074 	movhi	r2,129
  80cc40:	108f8e04 	addi	r2,r2,15928
  80cc44:	10800017 	ldw	r2,0(r2)
  80cc48:	103ee83a 	callr	r2
  80cc4c:	e0bfff15 	stw	r2,-4(fp)
  80cc50:	00000306 	br	80cc60 <alt_get_errno+0x48>
  80cc54:	00802074 	movhi	r2,129
  80cc58:	1096a004 	addi	r2,r2,23168
  80cc5c:	e0bfff15 	stw	r2,-4(fp)
  80cc60:	e0bfff17 	ldw	r2,-4(fp)
}
  80cc64:	e037883a 	mov	sp,fp
  80cc68:	dfc00117 	ldw	ra,4(sp)
  80cc6c:	df000017 	ldw	fp,0(sp)
  80cc70:	dec00204 	addi	sp,sp,8
  80cc74:	f800283a 	ret

0080cc78 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80cc78:	defffd04 	addi	sp,sp,-12
  80cc7c:	dfc00215 	stw	ra,8(sp)
  80cc80:	df000115 	stw	fp,4(sp)
  80cc84:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80cc88:	0009883a 	mov	r4,zero
  80cc8c:	080d1400 	call	80d140 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80cc90:	080d1740 	call	80d174 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80cc94:	01002074 	movhi	r4,129
  80cc98:	21084104 	addi	r4,r4,8452
  80cc9c:	01402074 	movhi	r5,129
  80cca0:	29484104 	addi	r5,r5,8452
  80cca4:	01802074 	movhi	r6,129
  80cca8:	31884104 	addi	r6,r6,8452
  80ccac:	08110500 	call	811050 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80ccb0:	0810aa40 	call	810aa4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80ccb4:	01002074 	movhi	r4,129
  80ccb8:	2102c204 	addi	r4,r4,2824
  80ccbc:	08117b80 	call	8117b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80ccc0:	d1272617 	ldw	r4,-25448(gp)
  80ccc4:	d1672717 	ldw	r5,-25444(gp)
  80ccc8:	d1a72817 	ldw	r6,-25440(gp)
  80cccc:	0800c400 	call	800c40 <main>
  80ccd0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80ccd4:	01000044 	movi	r4,1
  80ccd8:	080c6600 	call	80c660 <close>
  exit (result);
  80ccdc:	e13fff17 	ldw	r4,-4(fp)
  80cce0:	08117cc0 	call	8117cc <exit>

0080cce4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80cce4:	defffe04 	addi	sp,sp,-8
  80cce8:	df000115 	stw	fp,4(sp)
  80ccec:	df000104 	addi	fp,sp,4
  80ccf0:	e13fff15 	stw	r4,-4(fp)
}
  80ccf4:	e037883a 	mov	sp,fp
  80ccf8:	df000017 	ldw	fp,0(sp)
  80ccfc:	dec00104 	addi	sp,sp,4
  80cd00:	f800283a 	ret

0080cd04 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80cd04:	defffe04 	addi	sp,sp,-8
  80cd08:	df000115 	stw	fp,4(sp)
  80cd0c:	df000104 	addi	fp,sp,4
  80cd10:	e13fff15 	stw	r4,-4(fp)
}
  80cd14:	e037883a 	mov	sp,fp
  80cd18:	df000017 	ldw	fp,0(sp)
  80cd1c:	dec00104 	addi	sp,sp,4
  80cd20:	f800283a 	ret

0080cd24 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80cd24:	defff704 	addi	sp,sp,-36
  80cd28:	dfc00815 	stw	ra,32(sp)
  80cd2c:	df000715 	stw	fp,28(sp)
  80cd30:	df000704 	addi	fp,sp,28
  80cd34:	e13ffb15 	stw	r4,-20(fp)
  80cd38:	e17ffc15 	stw	r5,-16(fp)
  80cd3c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80cd40:	e0bffb17 	ldw	r2,-20(fp)
  80cd44:	1004803a 	cmplt	r2,r2,zero
  80cd48:	1000081e 	bne	r2,zero,80cd6c <read+0x48>
  80cd4c:	e0bffb17 	ldw	r2,-20(fp)
  80cd50:	10800324 	muli	r2,r2,12
  80cd54:	1007883a 	mov	r3,r2
  80cd58:	00802074 	movhi	r2,129
  80cd5c:	108aa604 	addi	r2,r2,10904
  80cd60:	1887883a 	add	r3,r3,r2
  80cd64:	e0ffff15 	stw	r3,-4(fp)
  80cd68:	00000106 	br	80cd70 <read+0x4c>
  80cd6c:	e03fff15 	stw	zero,-4(fp)
  80cd70:	e0bfff17 	ldw	r2,-4(fp)
  80cd74:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80cd78:	e0bffa17 	ldw	r2,-24(fp)
  80cd7c:	1005003a 	cmpeq	r2,r2,zero
  80cd80:	1000241e 	bne	r2,zero,80ce14 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80cd84:	e0bffa17 	ldw	r2,-24(fp)
  80cd88:	10800217 	ldw	r2,8(r2)
  80cd8c:	108000cc 	andi	r2,r2,3
  80cd90:	10800060 	cmpeqi	r2,r2,1
  80cd94:	10001a1e 	bne	r2,zero,80ce00 <read+0xdc>
  80cd98:	e0bffa17 	ldw	r2,-24(fp)
  80cd9c:	10800017 	ldw	r2,0(r2)
  80cda0:	10800517 	ldw	r2,20(r2)
  80cda4:	1005003a 	cmpeq	r2,r2,zero
  80cda8:	1000151e 	bne	r2,zero,80ce00 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80cdac:	e0bffa17 	ldw	r2,-24(fp)
  80cdb0:	10800017 	ldw	r2,0(r2)
  80cdb4:	10800517 	ldw	r2,20(r2)
  80cdb8:	e17ffc17 	ldw	r5,-16(fp)
  80cdbc:	e1bffd17 	ldw	r6,-12(fp)
  80cdc0:	e13ffa17 	ldw	r4,-24(fp)
  80cdc4:	103ee83a 	callr	r2
  80cdc8:	e0bff915 	stw	r2,-28(fp)
  80cdcc:	e0bff917 	ldw	r2,-28(fp)
  80cdd0:	1004403a 	cmpge	r2,r2,zero
  80cdd4:	1000071e 	bne	r2,zero,80cdf4 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80cdd8:	080ce440 	call	80ce44 <alt_get_errno>
  80cddc:	e0fff917 	ldw	r3,-28(fp)
  80cde0:	00c7c83a 	sub	r3,zero,r3
  80cde4:	10c00015 	stw	r3,0(r2)
          return -1;
  80cde8:	00bfffc4 	movi	r2,-1
  80cdec:	e0bffe15 	stw	r2,-8(fp)
  80cdf0:	00000e06 	br	80ce2c <read+0x108>
        }
        return rval;
  80cdf4:	e0bff917 	ldw	r2,-28(fp)
  80cdf8:	e0bffe15 	stw	r2,-8(fp)
  80cdfc:	00000b06 	br	80ce2c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80ce00:	080ce440 	call	80ce44 <alt_get_errno>
  80ce04:	1007883a 	mov	r3,r2
  80ce08:	00800344 	movi	r2,13
  80ce0c:	18800015 	stw	r2,0(r3)
  80ce10:	00000406 	br	80ce24 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80ce14:	080ce440 	call	80ce44 <alt_get_errno>
  80ce18:	1007883a 	mov	r3,r2
  80ce1c:	00801444 	movi	r2,81
  80ce20:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80ce24:	00bfffc4 	movi	r2,-1
  80ce28:	e0bffe15 	stw	r2,-8(fp)
  80ce2c:	e0bffe17 	ldw	r2,-8(fp)
}
  80ce30:	e037883a 	mov	sp,fp
  80ce34:	dfc00117 	ldw	ra,4(sp)
  80ce38:	df000017 	ldw	fp,0(sp)
  80ce3c:	dec00204 	addi	sp,sp,8
  80ce40:	f800283a 	ret

0080ce44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ce44:	defffd04 	addi	sp,sp,-12
  80ce48:	dfc00215 	stw	ra,8(sp)
  80ce4c:	df000115 	stw	fp,4(sp)
  80ce50:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ce54:	00802074 	movhi	r2,129
  80ce58:	108f8e04 	addi	r2,r2,15928
  80ce5c:	10800017 	ldw	r2,0(r2)
  80ce60:	1005003a 	cmpeq	r2,r2,zero
  80ce64:	1000061e 	bne	r2,zero,80ce80 <alt_get_errno+0x3c>
  80ce68:	00802074 	movhi	r2,129
  80ce6c:	108f8e04 	addi	r2,r2,15928
  80ce70:	10800017 	ldw	r2,0(r2)
  80ce74:	103ee83a 	callr	r2
  80ce78:	e0bfff15 	stw	r2,-4(fp)
  80ce7c:	00000306 	br	80ce8c <alt_get_errno+0x48>
  80ce80:	00802074 	movhi	r2,129
  80ce84:	1096a004 	addi	r2,r2,23168
  80ce88:	e0bfff15 	stw	r2,-4(fp)
  80ce8c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ce90:	e037883a 	mov	sp,fp
  80ce94:	dfc00117 	ldw	ra,4(sp)
  80ce98:	df000017 	ldw	fp,0(sp)
  80ce9c:	dec00204 	addi	sp,sp,8
  80cea0:	f800283a 	ret

0080cea4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80cea4:	defffe04 	addi	sp,sp,-8
  80cea8:	df000115 	stw	fp,4(sp)
  80ceac:	df000104 	addi	fp,sp,4
  80ceb0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80ceb4:	e0bfff17 	ldw	r2,-4(fp)
  80ceb8:	108000d0 	cmplti	r2,r2,3
  80cebc:	10000d1e 	bne	r2,zero,80cef4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80cec0:	e0bfff17 	ldw	r2,-4(fp)
  80cec4:	00c02074 	movhi	r3,129
  80cec8:	18caa604 	addi	r3,r3,10904
  80cecc:	10800324 	muli	r2,r2,12
  80ced0:	10c5883a 	add	r2,r2,r3
  80ced4:	10800204 	addi	r2,r2,8
  80ced8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80cedc:	e0bfff17 	ldw	r2,-4(fp)
  80cee0:	00c02074 	movhi	r3,129
  80cee4:	18caa604 	addi	r3,r3,10904
  80cee8:	10800324 	muli	r2,r2,12
  80ceec:	10c5883a 	add	r2,r2,r3
  80cef0:	10000015 	stw	zero,0(r2)
  }
}
  80cef4:	e037883a 	mov	sp,fp
  80cef8:	df000017 	ldw	fp,0(sp)
  80cefc:	dec00104 	addi	sp,sp,4
  80cf00:	f800283a 	ret

0080cf04 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80cf04:	defff804 	addi	sp,sp,-32
  80cf08:	df000715 	stw	fp,28(sp)
  80cf0c:	df000704 	addi	fp,sp,28
  80cf10:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cf14:	0005303a 	rdctl	r2,status
  80cf18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cf1c:	e0fffb17 	ldw	r3,-20(fp)
  80cf20:	00bfff84 	movi	r2,-2
  80cf24:	1884703a 	and	r2,r3,r2
  80cf28:	1001703a 	wrctl	status,r2
  
  return context;
  80cf2c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80cf30:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80cf34:	d0a01417 	ldw	r2,-32688(gp)
  80cf38:	10c000c4 	addi	r3,r2,3
  80cf3c:	00bfff04 	movi	r2,-4
  80cf40:	1884703a 	and	r2,r3,r2
  80cf44:	d0a01415 	stw	r2,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80cf48:	d0e01417 	ldw	r3,-32688(gp)
  80cf4c:	e0bffe17 	ldw	r2,-8(fp)
  80cf50:	1887883a 	add	r3,r3,r2
  80cf54:	00802d74 	movhi	r2,181
  80cf58:	10800004 	addi	r2,r2,0
  80cf5c:	10c0072e 	bgeu	r2,r3,80cf7c <sbrk+0x78>
  80cf60:	e0bffd17 	ldw	r2,-12(fp)
  80cf64:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cf68:	e0bffa17 	ldw	r2,-24(fp)
  80cf6c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80cf70:	00bfffc4 	movi	r2,-1
  80cf74:	e0bfff15 	stw	r2,-4(fp)
  80cf78:	00000c06 	br	80cfac <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80cf7c:	d0a01417 	ldw	r2,-32688(gp)
  80cf80:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80cf84:	d0e01417 	ldw	r3,-32688(gp)
  80cf88:	e0bffe17 	ldw	r2,-8(fp)
  80cf8c:	1885883a 	add	r2,r3,r2
  80cf90:	d0a01415 	stw	r2,-32688(gp)
  80cf94:	e0bffd17 	ldw	r2,-12(fp)
  80cf98:	e0bff915 	stw	r2,-28(fp)
  80cf9c:	e0bff917 	ldw	r2,-28(fp)
  80cfa0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80cfa4:	e0bffc17 	ldw	r2,-16(fp)
  80cfa8:	e0bfff15 	stw	r2,-4(fp)
  80cfac:	e0bfff17 	ldw	r2,-4(fp)
} 
  80cfb0:	e037883a 	mov	sp,fp
  80cfb4:	df000017 	ldw	fp,0(sp)
  80cfb8:	dec00104 	addi	sp,sp,4
  80cfbc:	f800283a 	ret

0080cfc0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80cfc0:	defff704 	addi	sp,sp,-36
  80cfc4:	dfc00815 	stw	ra,32(sp)
  80cfc8:	df000715 	stw	fp,28(sp)
  80cfcc:	df000704 	addi	fp,sp,28
  80cfd0:	e13ffb15 	stw	r4,-20(fp)
  80cfd4:	e17ffc15 	stw	r5,-16(fp)
  80cfd8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80cfdc:	e0bffb17 	ldw	r2,-20(fp)
  80cfe0:	1004803a 	cmplt	r2,r2,zero
  80cfe4:	1000081e 	bne	r2,zero,80d008 <write+0x48>
  80cfe8:	e0bffb17 	ldw	r2,-20(fp)
  80cfec:	10800324 	muli	r2,r2,12
  80cff0:	1007883a 	mov	r3,r2
  80cff4:	00802074 	movhi	r2,129
  80cff8:	108aa604 	addi	r2,r2,10904
  80cffc:	1887883a 	add	r3,r3,r2
  80d000:	e0ffff15 	stw	r3,-4(fp)
  80d004:	00000106 	br	80d00c <write+0x4c>
  80d008:	e03fff15 	stw	zero,-4(fp)
  80d00c:	e0bfff17 	ldw	r2,-4(fp)
  80d010:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80d014:	e0bffa17 	ldw	r2,-24(fp)
  80d018:	1005003a 	cmpeq	r2,r2,zero
  80d01c:	1000241e 	bne	r2,zero,80d0b0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80d020:	e0bffa17 	ldw	r2,-24(fp)
  80d024:	10800217 	ldw	r2,8(r2)
  80d028:	108000cc 	andi	r2,r2,3
  80d02c:	1005003a 	cmpeq	r2,r2,zero
  80d030:	10001a1e 	bne	r2,zero,80d09c <write+0xdc>
  80d034:	e0bffa17 	ldw	r2,-24(fp)
  80d038:	10800017 	ldw	r2,0(r2)
  80d03c:	10800617 	ldw	r2,24(r2)
  80d040:	1005003a 	cmpeq	r2,r2,zero
  80d044:	1000151e 	bne	r2,zero,80d09c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80d048:	e0bffa17 	ldw	r2,-24(fp)
  80d04c:	10800017 	ldw	r2,0(r2)
  80d050:	10800617 	ldw	r2,24(r2)
  80d054:	e17ffc17 	ldw	r5,-16(fp)
  80d058:	e1bffd17 	ldw	r6,-12(fp)
  80d05c:	e13ffa17 	ldw	r4,-24(fp)
  80d060:	103ee83a 	callr	r2
  80d064:	e0bff915 	stw	r2,-28(fp)
  80d068:	e0bff917 	ldw	r2,-28(fp)
  80d06c:	1004403a 	cmpge	r2,r2,zero
  80d070:	1000071e 	bne	r2,zero,80d090 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80d074:	080d0e00 	call	80d0e0 <alt_get_errno>
  80d078:	e0fff917 	ldw	r3,-28(fp)
  80d07c:	00c7c83a 	sub	r3,zero,r3
  80d080:	10c00015 	stw	r3,0(r2)
        return -1;
  80d084:	00bfffc4 	movi	r2,-1
  80d088:	e0bffe15 	stw	r2,-8(fp)
  80d08c:	00000e06 	br	80d0c8 <write+0x108>
      }
      return rval;
  80d090:	e0bff917 	ldw	r2,-28(fp)
  80d094:	e0bffe15 	stw	r2,-8(fp)
  80d098:	00000b06 	br	80d0c8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80d09c:	080d0e00 	call	80d0e0 <alt_get_errno>
  80d0a0:	1007883a 	mov	r3,r2
  80d0a4:	00800344 	movi	r2,13
  80d0a8:	18800015 	stw	r2,0(r3)
  80d0ac:	00000406 	br	80d0c0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80d0b0:	080d0e00 	call	80d0e0 <alt_get_errno>
  80d0b4:	1007883a 	mov	r3,r2
  80d0b8:	00801444 	movi	r2,81
  80d0bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80d0c0:	00bfffc4 	movi	r2,-1
  80d0c4:	e0bffe15 	stw	r2,-8(fp)
  80d0c8:	e0bffe17 	ldw	r2,-8(fp)
}
  80d0cc:	e037883a 	mov	sp,fp
  80d0d0:	dfc00117 	ldw	ra,4(sp)
  80d0d4:	df000017 	ldw	fp,0(sp)
  80d0d8:	dec00204 	addi	sp,sp,8
  80d0dc:	f800283a 	ret

0080d0e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d0e0:	defffd04 	addi	sp,sp,-12
  80d0e4:	dfc00215 	stw	ra,8(sp)
  80d0e8:	df000115 	stw	fp,4(sp)
  80d0ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d0f0:	00802074 	movhi	r2,129
  80d0f4:	108f8e04 	addi	r2,r2,15928
  80d0f8:	10800017 	ldw	r2,0(r2)
  80d0fc:	1005003a 	cmpeq	r2,r2,zero
  80d100:	1000061e 	bne	r2,zero,80d11c <alt_get_errno+0x3c>
  80d104:	00802074 	movhi	r2,129
  80d108:	108f8e04 	addi	r2,r2,15928
  80d10c:	10800017 	ldw	r2,0(r2)
  80d110:	103ee83a 	callr	r2
  80d114:	e0bfff15 	stw	r2,-4(fp)
  80d118:	00000306 	br	80d128 <alt_get_errno+0x48>
  80d11c:	00802074 	movhi	r2,129
  80d120:	1096a004 	addi	r2,r2,23168
  80d124:	e0bfff15 	stw	r2,-4(fp)
  80d128:	e0bfff17 	ldw	r2,-4(fp)
}
  80d12c:	e037883a 	mov	sp,fp
  80d130:	dfc00117 	ldw	ra,4(sp)
  80d134:	df000017 	ldw	fp,0(sp)
  80d138:	dec00204 	addi	sp,sp,8
  80d13c:	f800283a 	ret

0080d140 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80d140:	defffd04 	addi	sp,sp,-12
  80d144:	dfc00215 	stw	ra,8(sp)
  80d148:	df000115 	stw	fp,4(sp)
  80d14c:	df000104 	addi	fp,sp,4
  80d150:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
  80d154:	08115300 	call	811530 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80d158:	00800044 	movi	r2,1
  80d15c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80d160:	e037883a 	mov	sp,fp
  80d164:	dfc00117 	ldw	ra,4(sp)
  80d168:	df000017 	ldw	fp,0(sp)
  80d16c:	dec00204 	addi	sp,sp,8
  80d170:	f800283a 	ret

0080d174 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80d174:	defffd04 	addi	sp,sp,-12
  80d178:	dfc00215 	stw	ra,8(sp)
  80d17c:	df000115 	stw	fp,4(sp)
  80d180:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80d184:	01002074 	movhi	r4,129
  80d188:	210b1004 	addi	r4,r4,11328
  80d18c:	000b883a 	mov	r5,zero
  80d190:	01800044 	movi	r6,1
  80d194:	080d58c0 	call	80d58c <altera_avalon_jtag_uart_init>
  80d198:	01002074 	movhi	r4,129
  80d19c:	210b0604 	addi	r4,r4,11288
  80d1a0:	080d40c0 	call	80d40c <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
  80d1a4:	01002074 	movhi	r4,129
  80d1a8:	210f1e04 	addi	r4,r4,15480
  80d1ac:	080def00 	call	80def0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
  80d1b0:	01002074 	movhi	r4,129
  80d1b4:	210f2d04 	addi	r4,r4,15540
  80d1b8:	080def00 	call	80def0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
  80d1bc:	01002074 	movhi	r4,129
  80d1c0:	210f3c04 	addi	r4,r4,15600
  80d1c4:	080def00 	call	80def0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
  80d1c8:	01002074 	movhi	r4,129
  80d1cc:	210f4b04 	addi	r4,r4,15660
  80d1d0:	080def00 	call	80def0 <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
  80d1d4:	0007883a 	mov	r3,zero
  80d1d8:	00800044 	movi	r2,1
  80d1dc:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_RO_ZIPFS_INIT ( ALTERA_RO_ZIPFS, altera_ro_zipfs);
  80d1e0:	01002074 	movhi	r4,129
  80d1e4:	210f5a04 	addi	r4,r4,15720
  80d1e8:	080f2340 	call	80f234 <alt_ro_zipfs_check_valid>
  80d1ec:	1005003a 	cmpeq	r2,r2,zero
  80d1f0:	1000031e 	bne	r2,zero,80d200 <alt_sys_init+0x8c>
  80d1f4:	01002074 	movhi	r4,129
  80d1f8:	210f5a04 	addi	r4,r4,15720
  80d1fc:	0810c000 	call	810c00 <alt_fs_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  80d200:	00802074 	movhi	r2,129
  80d204:	108f6604 	addi	r2,r2,15768
  80d208:	10800a17 	ldw	r2,40(r2)
  80d20c:	10800017 	ldw	r2,0(r2)
  80d210:	1007883a 	mov	r3,r2
  80d214:	00802074 	movhi	r2,129
  80d218:	108f6604 	addi	r2,r2,15768
  80d21c:	10c00b15 	stw	r3,44(r2)
  80d220:	00802074 	movhi	r2,129
  80d224:	108f6604 	addi	r2,r2,15768
  80d228:	10800a17 	ldw	r2,40(r2)
  80d22c:	10800104 	addi	r2,r2,4
  80d230:	10800017 	ldw	r2,0(r2)
  80d234:	1007883a 	mov	r3,r2
  80d238:	00802074 	movhi	r2,129
  80d23c:	108f6604 	addi	r2,r2,15768
  80d240:	10c00c15 	stw	r3,48(r2)
  80d244:	00802074 	movhi	r2,129
  80d248:	108f6604 	addi	r2,r2,15768
  80d24c:	10800a17 	ldw	r2,40(r2)
  80d250:	10800204 	addi	r2,r2,8
  80d254:	10800017 	ldw	r2,0(r2)
  80d258:	10ffffcc 	andi	r3,r2,65535
  80d25c:	00802074 	movhi	r2,129
  80d260:	108f6604 	addi	r2,r2,15768
  80d264:	10c00f15 	stw	r3,60(r2)
  80d268:	00802074 	movhi	r2,129
  80d26c:	108f6604 	addi	r2,r2,15768
  80d270:	10800a17 	ldw	r2,40(r2)
  80d274:	10800204 	addi	r2,r2,8
  80d278:	10800017 	ldw	r2,0(r2)
  80d27c:	1005d43a 	srai	r2,r2,16
  80d280:	10ffffcc 	andi	r3,r2,65535
  80d284:	00802074 	movhi	r2,129
  80d288:	108f6604 	addi	r2,r2,15768
  80d28c:	10c01015 	stw	r3,64(r2)
  80d290:	00802074 	movhi	r2,129
  80d294:	108f6604 	addi	r2,r2,15768
  80d298:	10800a17 	ldw	r2,40(r2)
  80d29c:	10800304 	addi	r2,r2,12
  80d2a0:	10800017 	ldw	r2,0(r2)
  80d2a4:	1005d07a 	srai	r2,r2,1
  80d2a8:	10c0004c 	andi	r3,r2,1
  80d2ac:	00802074 	movhi	r2,129
  80d2b0:	108f6604 	addi	r2,r2,15768
  80d2b4:	10c00d15 	stw	r3,52(r2)
  80d2b8:	00802074 	movhi	r2,129
  80d2bc:	108f6604 	addi	r2,r2,15768
  80d2c0:	10800a17 	ldw	r2,40(r2)
  80d2c4:	10800304 	addi	r2,r2,12
  80d2c8:	10800017 	ldw	r2,0(r2)
  80d2cc:	1005d13a 	srai	r2,r2,4
  80d2d0:	10c003cc 	andi	r3,r2,15
  80d2d4:	00802074 	movhi	r2,129
  80d2d8:	108f6604 	addi	r2,r2,15768
  80d2dc:	10c00e15 	stw	r3,56(r2)
  80d2e0:	00802074 	movhi	r2,129
  80d2e4:	108f6604 	addi	r2,r2,15768
  80d2e8:	10800a17 	ldw	r2,40(r2)
  80d2ec:	10800304 	addi	r2,r2,12
  80d2f0:	10800017 	ldw	r2,0(r2)
  80d2f4:	1005d43a 	srai	r2,r2,16
  80d2f8:	1007883a 	mov	r3,r2
  80d2fc:	00bfffc4 	movi	r2,-1
  80d300:	1884703a 	and	r2,r3,r2
  80d304:	e0bfff45 	stb	r2,-3(fp)
  80d308:	00802074 	movhi	r2,129
  80d30c:	108f6604 	addi	r2,r2,15768
  80d310:	10800a17 	ldw	r2,40(r2)
  80d314:	10800304 	addi	r2,r2,12
  80d318:	10800017 	ldw	r2,0(r2)
  80d31c:	1005d63a 	srai	r2,r2,24
  80d320:	1007883a 	mov	r3,r2
  80d324:	00bfffc4 	movi	r2,-1
  80d328:	1884703a 	and	r2,r3,r2
  80d32c:	e0bfff05 	stb	r2,-4(fp)
  80d330:	00802074 	movhi	r2,129
  80d334:	108f6604 	addi	r2,r2,15768
  80d338:	10800e17 	ldw	r2,56(r2)
  80d33c:	10800058 	cmpnei	r2,r2,1
  80d340:	1000041e 	bne	r2,zero,80d354 <alt_sys_init+0x1e0>
  80d344:	00802074 	movhi	r2,129
  80d348:	108f6604 	addi	r2,r2,15768
  80d34c:	10001115 	stw	zero,68(r2)
  80d350:	00000e06 	br	80d38c <alt_sys_init+0x218>
  80d354:	00802074 	movhi	r2,129
  80d358:	108f6604 	addi	r2,r2,15768
  80d35c:	10800e17 	ldw	r2,56(r2)
  80d360:	10800098 	cmpnei	r2,r2,2
  80d364:	1000051e 	bne	r2,zero,80d37c <alt_sys_init+0x208>
  80d368:	00c02074 	movhi	r3,129
  80d36c:	18cf6604 	addi	r3,r3,15768
  80d370:	00800044 	movi	r2,1
  80d374:	18801115 	stw	r2,68(r3)
  80d378:	00000406 	br	80d38c <alt_sys_init+0x218>
  80d37c:	00c02074 	movhi	r3,129
  80d380:	18cf6604 	addi	r3,r3,15768
  80d384:	00800084 	movi	r2,2
  80d388:	18801115 	stw	r2,68(r3)
  80d38c:	e0ffff43 	ldbu	r3,-3(fp)
  80d390:	00800804 	movi	r2,32
  80d394:	10c7c83a 	sub	r3,r2,r3
  80d398:	00bfffc4 	movi	r2,-1
  80d39c:	10c6d83a 	srl	r3,r2,r3
  80d3a0:	00802074 	movhi	r2,129
  80d3a4:	108f6604 	addi	r2,r2,15768
  80d3a8:	10c01215 	stw	r3,72(r2)
  80d3ac:	e0ffff43 	ldbu	r3,-3(fp)
  80d3b0:	00802074 	movhi	r2,129
  80d3b4:	108f6604 	addi	r2,r2,15768
  80d3b8:	10801117 	ldw	r2,68(r2)
  80d3bc:	1887883a 	add	r3,r3,r2
  80d3c0:	00802074 	movhi	r2,129
  80d3c4:	108f6604 	addi	r2,r2,15768
  80d3c8:	10c01315 	stw	r3,76(r2)
  80d3cc:	e0ffff03 	ldbu	r3,-4(fp)
  80d3d0:	00800804 	movi	r2,32
  80d3d4:	10c7c83a 	sub	r3,r2,r3
  80d3d8:	00bfffc4 	movi	r2,-1
  80d3dc:	10c6d83a 	srl	r3,r2,r3
  80d3e0:	00802074 	movhi	r2,129
  80d3e4:	108f6604 	addi	r2,r2,15768
  80d3e8:	10c01415 	stw	r3,80(r2)
  80d3ec:	01002074 	movhi	r4,129
  80d3f0:	210f6604 	addi	r4,r4,15768
  80d3f4:	080d40c0 	call	80d40c <alt_dev_reg>
}
  80d3f8:	e037883a 	mov	sp,fp
  80d3fc:	dfc00117 	ldw	ra,4(sp)
  80d400:	df000017 	ldw	fp,0(sp)
  80d404:	dec00204 	addi	sp,sp,8
  80d408:	f800283a 	ret

0080d40c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80d40c:	defffd04 	addi	sp,sp,-12
  80d410:	dfc00215 	stw	ra,8(sp)
  80d414:	df000115 	stw	fp,4(sp)
  80d418:	df000104 	addi	fp,sp,4
  80d41c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80d420:	e13fff17 	ldw	r4,-4(fp)
  80d424:	01402074 	movhi	r5,129
  80d428:	294f8b04 	addi	r5,r5,15916
  80d42c:	08109900 	call	810990 <alt_dev_llist_insert>
}
  80d430:	e037883a 	mov	sp,fp
  80d434:	dfc00117 	ldw	ra,4(sp)
  80d438:	df000017 	ldw	fp,0(sp)
  80d43c:	dec00204 	addi	sp,sp,8
  80d440:	f800283a 	ret

0080d444 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80d444:	defffa04 	addi	sp,sp,-24
  80d448:	dfc00515 	stw	ra,20(sp)
  80d44c:	df000415 	stw	fp,16(sp)
  80d450:	df000404 	addi	fp,sp,16
  80d454:	e13ffd15 	stw	r4,-12(fp)
  80d458:	e17ffe15 	stw	r5,-8(fp)
  80d45c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80d460:	e0bffd17 	ldw	r2,-12(fp)
  80d464:	10800017 	ldw	r2,0(r2)
  80d468:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80d46c:	e0bffc17 	ldw	r2,-16(fp)
  80d470:	11000a04 	addi	r4,r2,40
  80d474:	e0bffd17 	ldw	r2,-12(fp)
  80d478:	11c00217 	ldw	r7,8(r2)
  80d47c:	e17ffe17 	ldw	r5,-8(fp)
  80d480:	e1bfff17 	ldw	r6,-4(fp)
  80d484:	080da8c0 	call	80da8c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80d488:	e037883a 	mov	sp,fp
  80d48c:	dfc00117 	ldw	ra,4(sp)
  80d490:	df000017 	ldw	fp,0(sp)
  80d494:	dec00204 	addi	sp,sp,8
  80d498:	f800283a 	ret

0080d49c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80d49c:	defffa04 	addi	sp,sp,-24
  80d4a0:	dfc00515 	stw	ra,20(sp)
  80d4a4:	df000415 	stw	fp,16(sp)
  80d4a8:	df000404 	addi	fp,sp,16
  80d4ac:	e13ffd15 	stw	r4,-12(fp)
  80d4b0:	e17ffe15 	stw	r5,-8(fp)
  80d4b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80d4b8:	e0bffd17 	ldw	r2,-12(fp)
  80d4bc:	10800017 	ldw	r2,0(r2)
  80d4c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80d4c4:	e0bffc17 	ldw	r2,-16(fp)
  80d4c8:	11000a04 	addi	r4,r2,40
  80d4cc:	e0bffd17 	ldw	r2,-12(fp)
  80d4d0:	11c00217 	ldw	r7,8(r2)
  80d4d4:	e17ffe17 	ldw	r5,-8(fp)
  80d4d8:	e1bfff17 	ldw	r6,-4(fp)
  80d4dc:	080dcb00 	call	80dcb0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80d4e0:	e037883a 	mov	sp,fp
  80d4e4:	dfc00117 	ldw	ra,4(sp)
  80d4e8:	df000017 	ldw	fp,0(sp)
  80d4ec:	dec00204 	addi	sp,sp,8
  80d4f0:	f800283a 	ret

0080d4f4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80d4f4:	defffc04 	addi	sp,sp,-16
  80d4f8:	dfc00315 	stw	ra,12(sp)
  80d4fc:	df000215 	stw	fp,8(sp)
  80d500:	df000204 	addi	fp,sp,8
  80d504:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80d508:	e0bfff17 	ldw	r2,-4(fp)
  80d50c:	10800017 	ldw	r2,0(r2)
  80d510:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80d514:	e0bffe17 	ldw	r2,-8(fp)
  80d518:	11000a04 	addi	r4,r2,40
  80d51c:	e0bfff17 	ldw	r2,-4(fp)
  80d520:	11400217 	ldw	r5,8(r2)
  80d524:	080d9240 	call	80d924 <altera_avalon_jtag_uart_close>
}
  80d528:	e037883a 	mov	sp,fp
  80d52c:	dfc00117 	ldw	ra,4(sp)
  80d530:	df000017 	ldw	fp,0(sp)
  80d534:	dec00204 	addi	sp,sp,8
  80d538:	f800283a 	ret

0080d53c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80d53c:	defffa04 	addi	sp,sp,-24
  80d540:	dfc00515 	stw	ra,20(sp)
  80d544:	df000415 	stw	fp,16(sp)
  80d548:	df000404 	addi	fp,sp,16
  80d54c:	e13ffd15 	stw	r4,-12(fp)
  80d550:	e17ffe15 	stw	r5,-8(fp)
  80d554:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80d558:	e0bffd17 	ldw	r2,-12(fp)
  80d55c:	10800017 	ldw	r2,0(r2)
  80d560:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80d564:	e0bffc17 	ldw	r2,-16(fp)
  80d568:	11000a04 	addi	r4,r2,40
  80d56c:	e17ffe17 	ldw	r5,-8(fp)
  80d570:	e1bfff17 	ldw	r6,-4(fp)
  80d574:	080d9980 	call	80d998 <altera_avalon_jtag_uart_ioctl>
}
  80d578:	e037883a 	mov	sp,fp
  80d57c:	dfc00117 	ldw	ra,4(sp)
  80d580:	df000017 	ldw	fp,0(sp)
  80d584:	dec00204 	addi	sp,sp,8
  80d588:	f800283a 	ret

0080d58c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80d58c:	defffa04 	addi	sp,sp,-24
  80d590:	dfc00515 	stw	ra,20(sp)
  80d594:	df000415 	stw	fp,16(sp)
  80d598:	df000404 	addi	fp,sp,16
  80d59c:	e13ffd15 	stw	r4,-12(fp)
  80d5a0:	e17ffe15 	stw	r5,-8(fp)
  80d5a4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d5a8:	e0fffd17 	ldw	r3,-12(fp)
  80d5ac:	00800044 	movi	r2,1
  80d5b0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80d5b4:	e0bffd17 	ldw	r2,-12(fp)
  80d5b8:	10800017 	ldw	r2,0(r2)
  80d5bc:	11000104 	addi	r4,r2,4
  80d5c0:	e0bffd17 	ldw	r2,-12(fp)
  80d5c4:	10800817 	ldw	r2,32(r2)
  80d5c8:	1007883a 	mov	r3,r2
  80d5cc:	2005883a 	mov	r2,r4
  80d5d0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80d5d4:	e13ffe17 	ldw	r4,-8(fp)
  80d5d8:	e17fff17 	ldw	r5,-4(fp)
  80d5dc:	d8000015 	stw	zero,0(sp)
  80d5e0:	01802074 	movhi	r6,129
  80d5e4:	31b59304 	addi	r6,r6,-10676
  80d5e8:	e1fffd17 	ldw	r7,-12(fp)
  80d5ec:	0810cc00 	call	810cc0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80d5f0:	e0bffd17 	ldw	r2,-12(fp)
  80d5f4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80d5f8:	e0bffd17 	ldw	r2,-12(fp)
  80d5fc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80d600:	00802074 	movhi	r2,129
  80d604:	1096a504 	addi	r2,r2,23188
  80d608:	10800017 	ldw	r2,0(r2)
  80d60c:	100b883a 	mov	r5,r2
  80d610:	01802074 	movhi	r6,129
  80d614:	31b61d04 	addi	r6,r6,-10124
  80d618:	e1fffd17 	ldw	r7,-12(fp)
  80d61c:	08107f80 	call	8107f8 <alt_alarm_start>
  80d620:	1004403a 	cmpge	r2,r2,zero
  80d624:	1000041e 	bne	r2,zero,80d638 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80d628:	e0fffd17 	ldw	r3,-12(fp)
  80d62c:	00a00034 	movhi	r2,32768
  80d630:	10bfffc4 	addi	r2,r2,-1
  80d634:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80d638:	e037883a 	mov	sp,fp
  80d63c:	dfc00117 	ldw	ra,4(sp)
  80d640:	df000017 	ldw	fp,0(sp)
  80d644:	dec00204 	addi	sp,sp,8
  80d648:	f800283a 	ret

0080d64c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80d64c:	defff804 	addi	sp,sp,-32
  80d650:	df000715 	stw	fp,28(sp)
  80d654:	df000704 	addi	fp,sp,28
  80d658:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80d65c:	e0bfff17 	ldw	r2,-4(fp)
  80d660:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80d664:	e0bffe17 	ldw	r2,-8(fp)
  80d668:	10800017 	ldw	r2,0(r2)
  80d66c:	e0bffd15 	stw	r2,-12(fp)
  80d670:	00000006 	br	80d674 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d674:	e0bffd17 	ldw	r2,-12(fp)
  80d678:	10800104 	addi	r2,r2,4
  80d67c:	10800037 	ldwio	r2,0(r2)
  80d680:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80d684:	e0bffc17 	ldw	r2,-16(fp)
  80d688:	1080c00c 	andi	r2,r2,768
  80d68c:	1005003a 	cmpeq	r2,r2,zero
  80d690:	1000741e 	bne	r2,zero,80d864 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80d694:	e0bffc17 	ldw	r2,-16(fp)
  80d698:	1080400c 	andi	r2,r2,256
  80d69c:	1005003a 	cmpeq	r2,r2,zero
  80d6a0:	1000351e 	bne	r2,zero,80d778 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80d6a4:	00800074 	movhi	r2,1
  80d6a8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d6ac:	e0bffe17 	ldw	r2,-8(fp)
  80d6b0:	10800a17 	ldw	r2,40(r2)
  80d6b4:	10800044 	addi	r2,r2,1
  80d6b8:	1081ffcc 	andi	r2,r2,2047
  80d6bc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80d6c0:	e0bffe17 	ldw	r2,-8(fp)
  80d6c4:	10c00b17 	ldw	r3,44(r2)
  80d6c8:	e0bffa17 	ldw	r2,-24(fp)
  80d6cc:	18801626 	beq	r3,r2,80d728 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80d6d0:	e0bffd17 	ldw	r2,-12(fp)
  80d6d4:	10800037 	ldwio	r2,0(r2)
  80d6d8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80d6dc:	e0bffb17 	ldw	r2,-20(fp)
  80d6e0:	10a0000c 	andi	r2,r2,32768
  80d6e4:	1005003a 	cmpeq	r2,r2,zero
  80d6e8:	10000f1e 	bne	r2,zero,80d728 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80d6ec:	e0bffe17 	ldw	r2,-8(fp)
  80d6f0:	10c00a17 	ldw	r3,40(r2)
  80d6f4:	e0bffb17 	ldw	r2,-20(fp)
  80d6f8:	1009883a 	mov	r4,r2
  80d6fc:	e0bffe17 	ldw	r2,-8(fp)
  80d700:	1885883a 	add	r2,r3,r2
  80d704:	10800e04 	addi	r2,r2,56
  80d708:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d70c:	e0bffe17 	ldw	r2,-8(fp)
  80d710:	10800a17 	ldw	r2,40(r2)
  80d714:	10800044 	addi	r2,r2,1
  80d718:	10c1ffcc 	andi	r3,r2,2047
  80d71c:	e0bffe17 	ldw	r2,-8(fp)
  80d720:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80d724:	003fe106 	br	80d6ac <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80d728:	e0bffb17 	ldw	r2,-20(fp)
  80d72c:	10bfffec 	andhi	r2,r2,65535
  80d730:	1005003a 	cmpeq	r2,r2,zero
  80d734:	1000101e 	bne	r2,zero,80d778 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d738:	e0bffe17 	ldw	r2,-8(fp)
  80d73c:	10c00817 	ldw	r3,32(r2)
  80d740:	00bfff84 	movi	r2,-2
  80d744:	1886703a 	and	r3,r3,r2
  80d748:	e0bffe17 	ldw	r2,-8(fp)
  80d74c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80d750:	e0bffd17 	ldw	r2,-12(fp)
  80d754:	11000104 	addi	r4,r2,4
  80d758:	e0bffe17 	ldw	r2,-8(fp)
  80d75c:	10800817 	ldw	r2,32(r2)
  80d760:	1007883a 	mov	r3,r2
  80d764:	2005883a 	mov	r2,r4
  80d768:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d76c:	e0bffd17 	ldw	r2,-12(fp)
  80d770:	10800104 	addi	r2,r2,4
  80d774:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80d778:	e0bffc17 	ldw	r2,-16(fp)
  80d77c:	1080800c 	andi	r2,r2,512
  80d780:	1005003a 	cmpeq	r2,r2,zero
  80d784:	103fbb1e 	bne	r2,zero,80d674 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80d788:	e0bffc17 	ldw	r2,-16(fp)
  80d78c:	10bfffec 	andhi	r2,r2,65535
  80d790:	1004d43a 	srli	r2,r2,16
  80d794:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80d798:	00001506 	br	80d7f0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80d79c:	e13ffd17 	ldw	r4,-12(fp)
  80d7a0:	e0bffe17 	ldw	r2,-8(fp)
  80d7a4:	10c00d17 	ldw	r3,52(r2)
  80d7a8:	e0bffe17 	ldw	r2,-8(fp)
  80d7ac:	1885883a 	add	r2,r3,r2
  80d7b0:	10820e04 	addi	r2,r2,2104
  80d7b4:	10800003 	ldbu	r2,0(r2)
  80d7b8:	10c03fcc 	andi	r3,r2,255
  80d7bc:	18c0201c 	xori	r3,r3,128
  80d7c0:	18ffe004 	addi	r3,r3,-128
  80d7c4:	2005883a 	mov	r2,r4
  80d7c8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d7cc:	e0bffe17 	ldw	r2,-8(fp)
  80d7d0:	10800d17 	ldw	r2,52(r2)
  80d7d4:	10800044 	addi	r2,r2,1
  80d7d8:	10c1ffcc 	andi	r3,r2,2047
  80d7dc:	e0bffe17 	ldw	r2,-8(fp)
  80d7e0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80d7e4:	e0bff917 	ldw	r2,-28(fp)
  80d7e8:	10bfffc4 	addi	r2,r2,-1
  80d7ec:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80d7f0:	e0bff917 	ldw	r2,-28(fp)
  80d7f4:	1005003a 	cmpeq	r2,r2,zero
  80d7f8:	1000051e 	bne	r2,zero,80d810 <altera_avalon_jtag_uart_irq+0x1c4>
  80d7fc:	e0bffe17 	ldw	r2,-8(fp)
  80d800:	10c00d17 	ldw	r3,52(r2)
  80d804:	e0bffe17 	ldw	r2,-8(fp)
  80d808:	10800c17 	ldw	r2,48(r2)
  80d80c:	18bfe31e 	bne	r3,r2,80d79c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80d810:	e0bff917 	ldw	r2,-28(fp)
  80d814:	1005003a 	cmpeq	r2,r2,zero
  80d818:	103f961e 	bne	r2,zero,80d674 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d81c:	e0bffe17 	ldw	r2,-8(fp)
  80d820:	10c00817 	ldw	r3,32(r2)
  80d824:	00bfff44 	movi	r2,-3
  80d828:	1886703a 	and	r3,r3,r2
  80d82c:	e0bffe17 	ldw	r2,-8(fp)
  80d830:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d834:	e0bffe17 	ldw	r2,-8(fp)
  80d838:	10800017 	ldw	r2,0(r2)
  80d83c:	11000104 	addi	r4,r2,4
  80d840:	e0bffe17 	ldw	r2,-8(fp)
  80d844:	10800817 	ldw	r2,32(r2)
  80d848:	1007883a 	mov	r3,r2
  80d84c:	2005883a 	mov	r2,r4
  80d850:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d854:	e0bffd17 	ldw	r2,-12(fp)
  80d858:	10800104 	addi	r2,r2,4
  80d85c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80d860:	003f8406 	br	80d674 <altera_avalon_jtag_uart_irq+0x28>
}
  80d864:	e037883a 	mov	sp,fp
  80d868:	df000017 	ldw	fp,0(sp)
  80d86c:	dec00104 	addi	sp,sp,4
  80d870:	f800283a 	ret

0080d874 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80d874:	defffc04 	addi	sp,sp,-16
  80d878:	df000315 	stw	fp,12(sp)
  80d87c:	df000304 	addi	fp,sp,12
  80d880:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80d884:	e0bfff17 	ldw	r2,-4(fp)
  80d888:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80d88c:	e0bffe17 	ldw	r2,-8(fp)
  80d890:	10800017 	ldw	r2,0(r2)
  80d894:	10800104 	addi	r2,r2,4
  80d898:	10800037 	ldwio	r2,0(r2)
  80d89c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80d8a0:	e0bffd17 	ldw	r2,-12(fp)
  80d8a4:	1081000c 	andi	r2,r2,1024
  80d8a8:	1005003a 	cmpeq	r2,r2,zero
  80d8ac:	10000c1e 	bne	r2,zero,80d8e0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80d8b0:	e0bffe17 	ldw	r2,-8(fp)
  80d8b4:	10800017 	ldw	r2,0(r2)
  80d8b8:	11000104 	addi	r4,r2,4
  80d8bc:	e0bffe17 	ldw	r2,-8(fp)
  80d8c0:	10800817 	ldw	r2,32(r2)
  80d8c4:	10810014 	ori	r2,r2,1024
  80d8c8:	1007883a 	mov	r3,r2
  80d8cc:	2005883a 	mov	r2,r4
  80d8d0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80d8d4:	e0bffe17 	ldw	r2,-8(fp)
  80d8d8:	10000915 	stw	zero,36(r2)
  80d8dc:	00000a06 	br	80d908 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80d8e0:	e0bffe17 	ldw	r2,-8(fp)
  80d8e4:	10c00917 	ldw	r3,36(r2)
  80d8e8:	00a00034 	movhi	r2,32768
  80d8ec:	10bfff04 	addi	r2,r2,-4
  80d8f0:	10c00536 	bltu	r2,r3,80d908 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80d8f4:	e0bffe17 	ldw	r2,-8(fp)
  80d8f8:	10800917 	ldw	r2,36(r2)
  80d8fc:	10c00044 	addi	r3,r2,1
  80d900:	e0bffe17 	ldw	r2,-8(fp)
  80d904:	10c00915 	stw	r3,36(r2)
  80d908:	00802074 	movhi	r2,129
  80d90c:	1096a504 	addi	r2,r2,23188
  80d910:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80d914:	e037883a 	mov	sp,fp
  80d918:	df000017 	ldw	fp,0(sp)
  80d91c:	dec00104 	addi	sp,sp,4
  80d920:	f800283a 	ret

0080d924 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80d924:	defffc04 	addi	sp,sp,-16
  80d928:	df000315 	stw	fp,12(sp)
  80d92c:	df000304 	addi	fp,sp,12
  80d930:	e13ffd15 	stw	r4,-12(fp)
  80d934:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80d938:	00000706 	br	80d958 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80d93c:	e0bffe17 	ldw	r2,-8(fp)
  80d940:	1090000c 	andi	r2,r2,16384
  80d944:	1005003a 	cmpeq	r2,r2,zero
  80d948:	1000031e 	bne	r2,zero,80d958 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80d94c:	00bffd44 	movi	r2,-11
  80d950:	e0bfff15 	stw	r2,-4(fp)
  80d954:	00000b06 	br	80d984 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80d958:	e0bffd17 	ldw	r2,-12(fp)
  80d95c:	10c00d17 	ldw	r3,52(r2)
  80d960:	e0bffd17 	ldw	r2,-12(fp)
  80d964:	10800c17 	ldw	r2,48(r2)
  80d968:	18800526 	beq	r3,r2,80d980 <altera_avalon_jtag_uart_close+0x5c>
  80d96c:	e0bffd17 	ldw	r2,-12(fp)
  80d970:	10c00917 	ldw	r3,36(r2)
  80d974:	e0bffd17 	ldw	r2,-12(fp)
  80d978:	10800117 	ldw	r2,4(r2)
  80d97c:	18bfef36 	bltu	r3,r2,80d93c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80d980:	e03fff15 	stw	zero,-4(fp)
  80d984:	e0bfff17 	ldw	r2,-4(fp)
}
  80d988:	e037883a 	mov	sp,fp
  80d98c:	df000017 	ldw	fp,0(sp)
  80d990:	dec00104 	addi	sp,sp,4
  80d994:	f800283a 	ret

0080d998 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80d998:	defff804 	addi	sp,sp,-32
  80d99c:	df000715 	stw	fp,28(sp)
  80d9a0:	df000704 	addi	fp,sp,28
  80d9a4:	e13ffb15 	stw	r4,-20(fp)
  80d9a8:	e17ffc15 	stw	r5,-16(fp)
  80d9ac:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80d9b0:	00bff9c4 	movi	r2,-25
  80d9b4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80d9b8:	e0bffc17 	ldw	r2,-16(fp)
  80d9bc:	e0bfff15 	stw	r2,-4(fp)
  80d9c0:	e0ffff17 	ldw	r3,-4(fp)
  80d9c4:	189a8060 	cmpeqi	r2,r3,27137
  80d9c8:	1000041e 	bne	r2,zero,80d9dc <altera_avalon_jtag_uart_ioctl+0x44>
  80d9cc:	e0ffff17 	ldw	r3,-4(fp)
  80d9d0:	189a80a0 	cmpeqi	r2,r3,27138
  80d9d4:	10001b1e 	bne	r2,zero,80da44 <altera_avalon_jtag_uart_ioctl+0xac>
  80d9d8:	00002706 	br	80da78 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80d9dc:	e0bffb17 	ldw	r2,-20(fp)
  80d9e0:	10c00117 	ldw	r3,4(r2)
  80d9e4:	00a00034 	movhi	r2,32768
  80d9e8:	10bfffc4 	addi	r2,r2,-1
  80d9ec:	18802226 	beq	r3,r2,80da78 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80d9f0:	e0bffd17 	ldw	r2,-12(fp)
  80d9f4:	10800017 	ldw	r2,0(r2)
  80d9f8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80d9fc:	e0bff917 	ldw	r2,-28(fp)
  80da00:	10800090 	cmplti	r2,r2,2
  80da04:	1000071e 	bne	r2,zero,80da24 <altera_avalon_jtag_uart_ioctl+0x8c>
  80da08:	e0fff917 	ldw	r3,-28(fp)
  80da0c:	00a00034 	movhi	r2,32768
  80da10:	10bfffc4 	addi	r2,r2,-1
  80da14:	18800326 	beq	r3,r2,80da24 <altera_avalon_jtag_uart_ioctl+0x8c>
  80da18:	e0bff917 	ldw	r2,-28(fp)
  80da1c:	e0bffe15 	stw	r2,-8(fp)
  80da20:	00000306 	br	80da30 <altera_avalon_jtag_uart_ioctl+0x98>
  80da24:	00e00034 	movhi	r3,32768
  80da28:	18ffff84 	addi	r3,r3,-2
  80da2c:	e0fffe15 	stw	r3,-8(fp)
  80da30:	e0bffb17 	ldw	r2,-20(fp)
  80da34:	e0fffe17 	ldw	r3,-8(fp)
  80da38:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80da3c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80da40:	00000d06 	br	80da78 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80da44:	e0bffb17 	ldw	r2,-20(fp)
  80da48:	10c00117 	ldw	r3,4(r2)
  80da4c:	00a00034 	movhi	r2,32768
  80da50:	10bfffc4 	addi	r2,r2,-1
  80da54:	18800826 	beq	r3,r2,80da78 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80da58:	e13ffd17 	ldw	r4,-12(fp)
  80da5c:	e0bffb17 	ldw	r2,-20(fp)
  80da60:	10c00917 	ldw	r3,36(r2)
  80da64:	e0bffb17 	ldw	r2,-20(fp)
  80da68:	10800117 	ldw	r2,4(r2)
  80da6c:	1885803a 	cmpltu	r2,r3,r2
  80da70:	20800015 	stw	r2,0(r4)
      rc = 0;
  80da74:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80da78:	e0bffa17 	ldw	r2,-24(fp)
}
  80da7c:	e037883a 	mov	sp,fp
  80da80:	df000017 	ldw	fp,0(sp)
  80da84:	dec00104 	addi	sp,sp,4
  80da88:	f800283a 	ret

0080da8c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80da8c:	defff204 	addi	sp,sp,-56
  80da90:	dfc00d15 	stw	ra,52(sp)
  80da94:	df000c15 	stw	fp,48(sp)
  80da98:	df000c04 	addi	fp,sp,48
  80da9c:	e13ffb15 	stw	r4,-20(fp)
  80daa0:	e17ffc15 	stw	r5,-16(fp)
  80daa4:	e1bffd15 	stw	r6,-12(fp)
  80daa8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80daac:	e0bffc17 	ldw	r2,-16(fp)
  80dab0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80dab4:	00004806 	br	80dbd8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80dab8:	e0bffb17 	ldw	r2,-20(fp)
  80dabc:	10800a17 	ldw	r2,40(r2)
  80dac0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80dac4:	e0bffb17 	ldw	r2,-20(fp)
  80dac8:	10800b17 	ldw	r2,44(r2)
  80dacc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80dad0:	e0fff717 	ldw	r3,-36(fp)
  80dad4:	e0bff617 	ldw	r2,-40(fp)
  80dad8:	18800536 	bltu	r3,r2,80daf0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80dadc:	e0bff717 	ldw	r2,-36(fp)
  80dae0:	e0fff617 	ldw	r3,-40(fp)
  80dae4:	10c5c83a 	sub	r2,r2,r3
  80dae8:	e0bff815 	stw	r2,-32(fp)
  80daec:	00000406 	br	80db00 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80daf0:	00820004 	movi	r2,2048
  80daf4:	e0fff617 	ldw	r3,-40(fp)
  80daf8:	10c5c83a 	sub	r2,r2,r3
  80dafc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80db00:	e0bff817 	ldw	r2,-32(fp)
  80db04:	1005003a 	cmpeq	r2,r2,zero
  80db08:	10001f1e 	bne	r2,zero,80db88 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80db0c:	e0fffd17 	ldw	r3,-12(fp)
  80db10:	e0bff817 	ldw	r2,-32(fp)
  80db14:	1880022e 	bgeu	r3,r2,80db20 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80db18:	e0bffd17 	ldw	r2,-12(fp)
  80db1c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80db20:	e0bffb17 	ldw	r2,-20(fp)
  80db24:	10c00e04 	addi	r3,r2,56
  80db28:	e0bff617 	ldw	r2,-40(fp)
  80db2c:	1887883a 	add	r3,r3,r2
  80db30:	e0bffa17 	ldw	r2,-24(fp)
  80db34:	1009883a 	mov	r4,r2
  80db38:	180b883a 	mov	r5,r3
  80db3c:	e1bff817 	ldw	r6,-32(fp)
  80db40:	08090c40 	call	8090c4 <memcpy>
      ptr   += n;
  80db44:	e0fff817 	ldw	r3,-32(fp)
  80db48:	e0bffa17 	ldw	r2,-24(fp)
  80db4c:	10c5883a 	add	r2,r2,r3
  80db50:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80db54:	e0fffd17 	ldw	r3,-12(fp)
  80db58:	e0bff817 	ldw	r2,-32(fp)
  80db5c:	1885c83a 	sub	r2,r3,r2
  80db60:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80db64:	e0fff617 	ldw	r3,-40(fp)
  80db68:	e0bff817 	ldw	r2,-32(fp)
  80db6c:	1885883a 	add	r2,r3,r2
  80db70:	10c1ffcc 	andi	r3,r2,2047
  80db74:	e0bffb17 	ldw	r2,-20(fp)
  80db78:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80db7c:	e0bffd17 	ldw	r2,-12(fp)
  80db80:	10800048 	cmpgei	r2,r2,1
  80db84:	103fcc1e 	bne	r2,zero,80dab8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80db88:	e0fffa17 	ldw	r3,-24(fp)
  80db8c:	e0bffc17 	ldw	r2,-16(fp)
  80db90:	1880141e 	bne	r3,r2,80dbe4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80db94:	e0bffe17 	ldw	r2,-8(fp)
  80db98:	1090000c 	andi	r2,r2,16384
  80db9c:	1004c03a 	cmpne	r2,r2,zero
  80dba0:	1000101e 	bne	r2,zero,80dbe4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80dba4:	e0bffb17 	ldw	r2,-20(fp)
  80dba8:	10c00a17 	ldw	r3,40(r2)
  80dbac:	e0bff717 	ldw	r2,-36(fp)
  80dbb0:	1880051e 	bne	r3,r2,80dbc8 <altera_avalon_jtag_uart_read+0x13c>
  80dbb4:	e0bffb17 	ldw	r2,-20(fp)
  80dbb8:	10c00917 	ldw	r3,36(r2)
  80dbbc:	e0bffb17 	ldw	r2,-20(fp)
  80dbc0:	10800117 	ldw	r2,4(r2)
  80dbc4:	18bff736 	bltu	r3,r2,80dba4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80dbc8:	e0bffb17 	ldw	r2,-20(fp)
  80dbcc:	10c00a17 	ldw	r3,40(r2)
  80dbd0:	e0bff717 	ldw	r2,-36(fp)
  80dbd4:	18800326 	beq	r3,r2,80dbe4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80dbd8:	e0bffd17 	ldw	r2,-12(fp)
  80dbdc:	10800048 	cmpgei	r2,r2,1
  80dbe0:	103fb51e 	bne	r2,zero,80dab8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80dbe4:	e0fffa17 	ldw	r3,-24(fp)
  80dbe8:	e0bffc17 	ldw	r2,-16(fp)
  80dbec:	18801926 	beq	r3,r2,80dc54 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dbf0:	0005303a 	rdctl	r2,status
  80dbf4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dbf8:	e0fff517 	ldw	r3,-44(fp)
  80dbfc:	00bfff84 	movi	r2,-2
  80dc00:	1884703a 	and	r2,r3,r2
  80dc04:	1001703a 	wrctl	status,r2
  
  return context;
  80dc08:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80dc0c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80dc10:	e0bffb17 	ldw	r2,-20(fp)
  80dc14:	10800817 	ldw	r2,32(r2)
  80dc18:	10c00054 	ori	r3,r2,1
  80dc1c:	e0bffb17 	ldw	r2,-20(fp)
  80dc20:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80dc24:	e0bffb17 	ldw	r2,-20(fp)
  80dc28:	10800017 	ldw	r2,0(r2)
  80dc2c:	11000104 	addi	r4,r2,4
  80dc30:	e0bffb17 	ldw	r2,-20(fp)
  80dc34:	10800817 	ldw	r2,32(r2)
  80dc38:	1007883a 	mov	r3,r2
  80dc3c:	2005883a 	mov	r2,r4
  80dc40:	10c00035 	stwio	r3,0(r2)
  80dc44:	e0bff917 	ldw	r2,-28(fp)
  80dc48:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dc4c:	e0bff417 	ldw	r2,-48(fp)
  80dc50:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80dc54:	e0fffa17 	ldw	r3,-24(fp)
  80dc58:	e0bffc17 	ldw	r2,-16(fp)
  80dc5c:	18800526 	beq	r3,r2,80dc74 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80dc60:	e0fffa17 	ldw	r3,-24(fp)
  80dc64:	e0bffc17 	ldw	r2,-16(fp)
  80dc68:	1887c83a 	sub	r3,r3,r2
  80dc6c:	e0ffff15 	stw	r3,-4(fp)
  80dc70:	00000906 	br	80dc98 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80dc74:	e0bffe17 	ldw	r2,-8(fp)
  80dc78:	1090000c 	andi	r2,r2,16384
  80dc7c:	1005003a 	cmpeq	r2,r2,zero
  80dc80:	1000031e 	bne	r2,zero,80dc90 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80dc84:	00bffd44 	movi	r2,-11
  80dc88:	e0bfff15 	stw	r2,-4(fp)
  80dc8c:	00000206 	br	80dc98 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80dc90:	00bffec4 	movi	r2,-5
  80dc94:	e0bfff15 	stw	r2,-4(fp)
  80dc98:	e0bfff17 	ldw	r2,-4(fp)
}
  80dc9c:	e037883a 	mov	sp,fp
  80dca0:	dfc00117 	ldw	ra,4(sp)
  80dca4:	df000017 	ldw	fp,0(sp)
  80dca8:	dec00204 	addi	sp,sp,8
  80dcac:	f800283a 	ret

0080dcb0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80dcb0:	defff204 	addi	sp,sp,-56
  80dcb4:	dfc00d15 	stw	ra,52(sp)
  80dcb8:	df000c15 	stw	fp,48(sp)
  80dcbc:	df000c04 	addi	fp,sp,48
  80dcc0:	e13ffb15 	stw	r4,-20(fp)
  80dcc4:	e17ffc15 	stw	r5,-16(fp)
  80dcc8:	e1bffd15 	stw	r6,-12(fp)
  80dccc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80dcd0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80dcd4:	e0bffc17 	ldw	r2,-16(fp)
  80dcd8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80dcdc:	00003a06 	br	80ddc8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80dce0:	e0bffb17 	ldw	r2,-20(fp)
  80dce4:	10800c17 	ldw	r2,48(r2)
  80dce8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80dcec:	e0bffb17 	ldw	r2,-20(fp)
  80dcf0:	10800d17 	ldw	r2,52(r2)
  80dcf4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80dcf8:	e0fffa17 	ldw	r3,-24(fp)
  80dcfc:	e0bff917 	ldw	r2,-28(fp)
  80dd00:	1880062e 	bgeu	r3,r2,80dd1c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80dd04:	e0fff917 	ldw	r3,-28(fp)
  80dd08:	e0bffa17 	ldw	r2,-24(fp)
  80dd0c:	1885c83a 	sub	r2,r3,r2
  80dd10:	10bfffc4 	addi	r2,r2,-1
  80dd14:	e0bff815 	stw	r2,-32(fp)
  80dd18:	00000c06 	br	80dd4c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80dd1c:	e0bff917 	ldw	r2,-28(fp)
  80dd20:	1005003a 	cmpeq	r2,r2,zero
  80dd24:	1000051e 	bne	r2,zero,80dd3c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80dd28:	00820004 	movi	r2,2048
  80dd2c:	e0fffa17 	ldw	r3,-24(fp)
  80dd30:	10c5c83a 	sub	r2,r2,r3
  80dd34:	e0bff815 	stw	r2,-32(fp)
  80dd38:	00000406 	br	80dd4c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80dd3c:	0081ffc4 	movi	r2,2047
  80dd40:	e0fffa17 	ldw	r3,-24(fp)
  80dd44:	10c5c83a 	sub	r2,r2,r3
  80dd48:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80dd4c:	e0bff817 	ldw	r2,-32(fp)
  80dd50:	1005003a 	cmpeq	r2,r2,zero
  80dd54:	10001f1e 	bne	r2,zero,80ddd4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80dd58:	e0fffd17 	ldw	r3,-12(fp)
  80dd5c:	e0bff817 	ldw	r2,-32(fp)
  80dd60:	1880022e 	bgeu	r3,r2,80dd6c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80dd64:	e0bffd17 	ldw	r2,-12(fp)
  80dd68:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80dd6c:	e0bffb17 	ldw	r2,-20(fp)
  80dd70:	10c20e04 	addi	r3,r2,2104
  80dd74:	e0bffa17 	ldw	r2,-24(fp)
  80dd78:	1885883a 	add	r2,r3,r2
  80dd7c:	e0fffc17 	ldw	r3,-16(fp)
  80dd80:	1009883a 	mov	r4,r2
  80dd84:	180b883a 	mov	r5,r3
  80dd88:	e1bff817 	ldw	r6,-32(fp)
  80dd8c:	08090c40 	call	8090c4 <memcpy>
      ptr   += n;
  80dd90:	e0fff817 	ldw	r3,-32(fp)
  80dd94:	e0bffc17 	ldw	r2,-16(fp)
  80dd98:	10c5883a 	add	r2,r2,r3
  80dd9c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80dda0:	e0fffd17 	ldw	r3,-12(fp)
  80dda4:	e0bff817 	ldw	r2,-32(fp)
  80dda8:	1885c83a 	sub	r2,r3,r2
  80ddac:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ddb0:	e0fffa17 	ldw	r3,-24(fp)
  80ddb4:	e0bff817 	ldw	r2,-32(fp)
  80ddb8:	1885883a 	add	r2,r3,r2
  80ddbc:	10c1ffcc 	andi	r3,r2,2047
  80ddc0:	e0bffb17 	ldw	r2,-20(fp)
  80ddc4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80ddc8:	e0bffd17 	ldw	r2,-12(fp)
  80ddcc:	10800048 	cmpgei	r2,r2,1
  80ddd0:	103fc31e 	bne	r2,zero,80dce0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ddd4:	0005303a 	rdctl	r2,status
  80ddd8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dddc:	e0fff517 	ldw	r3,-44(fp)
  80dde0:	00bfff84 	movi	r2,-2
  80dde4:	1884703a 	and	r2,r3,r2
  80dde8:	1001703a 	wrctl	status,r2
  
  return context;
  80ddec:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80ddf0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80ddf4:	e0bffb17 	ldw	r2,-20(fp)
  80ddf8:	10800817 	ldw	r2,32(r2)
  80ddfc:	10c00094 	ori	r3,r2,2
  80de00:	e0bffb17 	ldw	r2,-20(fp)
  80de04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80de08:	e0bffb17 	ldw	r2,-20(fp)
  80de0c:	10800017 	ldw	r2,0(r2)
  80de10:	11000104 	addi	r4,r2,4
  80de14:	e0bffb17 	ldw	r2,-20(fp)
  80de18:	10800817 	ldw	r2,32(r2)
  80de1c:	1007883a 	mov	r3,r2
  80de20:	2005883a 	mov	r2,r4
  80de24:	10c00035 	stwio	r3,0(r2)
  80de28:	e0bff717 	ldw	r2,-36(fp)
  80de2c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80de30:	e0bff417 	ldw	r2,-48(fp)
  80de34:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80de38:	e0bffd17 	ldw	r2,-12(fp)
  80de3c:	10800050 	cmplti	r2,r2,1
  80de40:	1000111e 	bne	r2,zero,80de88 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80de44:	e0bffe17 	ldw	r2,-8(fp)
  80de48:	1090000c 	andi	r2,r2,16384
  80de4c:	1004c03a 	cmpne	r2,r2,zero
  80de50:	1000101e 	bne	r2,zero,80de94 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80de54:	e0bffb17 	ldw	r2,-20(fp)
  80de58:	10c00d17 	ldw	r3,52(r2)
  80de5c:	e0bff917 	ldw	r2,-28(fp)
  80de60:	1880051e 	bne	r3,r2,80de78 <altera_avalon_jtag_uart_write+0x1c8>
  80de64:	e0bffb17 	ldw	r2,-20(fp)
  80de68:	10c00917 	ldw	r3,36(r2)
  80de6c:	e0bffb17 	ldw	r2,-20(fp)
  80de70:	10800117 	ldw	r2,4(r2)
  80de74:	18bff736 	bltu	r3,r2,80de54 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80de78:	e0bffb17 	ldw	r2,-20(fp)
  80de7c:	10c00d17 	ldw	r3,52(r2)
  80de80:	e0bff917 	ldw	r2,-28(fp)
  80de84:	18800326 	beq	r3,r2,80de94 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  80de88:	e0bffd17 	ldw	r2,-12(fp)
  80de8c:	10800048 	cmpgei	r2,r2,1
  80de90:	103fcd1e 	bne	r2,zero,80ddc8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80de94:	e0fffc17 	ldw	r3,-16(fp)
  80de98:	e0bff617 	ldw	r2,-40(fp)
  80de9c:	18800526 	beq	r3,r2,80deb4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80dea0:	e0fffc17 	ldw	r3,-16(fp)
  80dea4:	e0bff617 	ldw	r2,-40(fp)
  80dea8:	1887c83a 	sub	r3,r3,r2
  80deac:	e0ffff15 	stw	r3,-4(fp)
  80deb0:	00000906 	br	80ded8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80deb4:	e0bffe17 	ldw	r2,-8(fp)
  80deb8:	1090000c 	andi	r2,r2,16384
  80debc:	1005003a 	cmpeq	r2,r2,zero
  80dec0:	1000031e 	bne	r2,zero,80ded0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80dec4:	00bffd44 	movi	r2,-11
  80dec8:	e0bfff15 	stw	r2,-4(fp)
  80decc:	00000206 	br	80ded8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  80ded0:	00bffec4 	movi	r2,-5
  80ded4:	e0bfff15 	stw	r2,-4(fp)
  80ded8:	e0bfff17 	ldw	r2,-4(fp)
}
  80dedc:	e037883a 	mov	sp,fp
  80dee0:	dfc00117 	ldw	ra,4(sp)
  80dee4:	df000017 	ldw	fp,0(sp)
  80dee8:	dec00204 	addi	sp,sp,8
  80deec:	f800283a 	ret

0080def0 <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
  80def0:	defffa04 	addi	sp,sp,-24
  80def4:	dfc00515 	stw	ra,20(sp)
  80def8:	df000415 	stw	fp,16(sp)
  80defc:	df000404 	addi	fp,sp,16
  80df00:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
  80df04:	e0bfff17 	ldw	r2,-4(fp)
  80df08:	11000704 	addi	r4,r2,28
  80df0c:	080e0480 	call	80e048 <alt_avalon_mutex_reg>
  80df10:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
  80df14:	e0bffe17 	ldw	r2,-8(fp)
  80df18:	1004c03a 	cmpne	r2,r2,zero
  80df1c:	1000041e 	bne	r2,zero,80df30 <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
  80df20:	e0bfff17 	ldw	r2,-4(fp)
  80df24:	11000b04 	addi	r4,r2,44
  80df28:	080e0480 	call	80e048 <alt_avalon_mutex_reg>
  80df2c:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  80df30:	e0bffe17 	ldw	r2,-8(fp)
  80df34:	1004c03a 	cmpne	r2,r2,zero
  80df38:	1000041e 	bne	r2,zero,80df4c <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
  80df3c:	e13fff17 	ldw	r4,-4(fp)
  80df40:	d1601504 	addi	r5,gp,-32684
  80df44:	08109900 	call	810990 <alt_dev_llist_insert>
  80df48:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  80df4c:	e0bffe17 	ldw	r2,-8(fp)
  80df50:	1004c03a 	cmpne	r2,r2,zero
  80df54:	1000361e 	bne	r2,zero,80e030 <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
  80df58:	e0bfff17 	ldw	r2,-4(fp)
  80df5c:	11000917 	ldw	r4,36(r2)
  80df60:	080e4940 	call	80e494 <altera_avalon_mutex_open>
  80df64:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
  80df68:	e0bffd17 	ldw	r2,-12(fp)
  80df6c:	1005003a 	cmpeq	r2,r2,zero
  80df70:	10002f1e 	bne	r2,zero,80e030 <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
  80df74:	e0bfff17 	ldw	r2,-4(fp)
  80df78:	11000d17 	ldw	r4,52(r2)
  80df7c:	080e4940 	call	80e494 <altera_avalon_mutex_open>
  80df80:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
  80df84:	e0bffc17 	ldw	r2,-16(fp)
  80df88:	1005003a 	cmpeq	r2,r2,zero
  80df8c:	1000281e 	bne	r2,zero,80e030 <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  80df90:	00000f06 	br	80dfd0 <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
  80df94:	e13ffd17 	ldw	r4,-12(fp)
  80df98:	01400044 	movi	r5,1
  80df9c:	080e5ac0 	call	80e5ac <altera_avalon_mutex_trylock>
  80dfa0:	1004c03a 	cmpne	r2,r2,zero
  80dfa4:	10000a1e 	bne	r2,zero,80dfd0 <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
  80dfa8:	e0bfff17 	ldw	r2,-4(fp)
  80dfac:	10800317 	ldw	r2,12(r2)
  80dfb0:	1009883a 	mov	r4,r2
  80dfb4:	e0bfff17 	ldw	r2,-4(fp)
  80dfb8:	10800517 	ldw	r2,20(r2)
  80dfbc:	1007883a 	mov	r3,r2
  80dfc0:	2005883a 	mov	r2,r4
  80dfc4:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
  80dfc8:	e13ffd17 	ldw	r4,-12(fp)
  80dfcc:	080e5ec0 	call	80e5ec <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  80dfd0:	e13ffd17 	ldw	r4,-12(fp)
  80dfd4:	080e6c40 	call	80e6c4 <altera_avalon_mutex_first_lock>
  80dfd8:	1004c03a 	cmpne	r2,r2,zero
  80dfdc:	103fed1e 	bne	r2,zero,80df94 <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  80dfe0:	00000f06 	br	80e020 <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
  80dfe4:	e13ffc17 	ldw	r4,-16(fp)
  80dfe8:	01400044 	movi	r5,1
  80dfec:	080e5ac0 	call	80e5ac <altera_avalon_mutex_trylock>
  80dff0:	1004c03a 	cmpne	r2,r2,zero
  80dff4:	10000a1e 	bne	r2,zero,80e020 <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
  80dff8:	e0bfff17 	ldw	r2,-4(fp)
  80dffc:	10800417 	ldw	r2,16(r2)
  80e000:	1009883a 	mov	r4,r2
  80e004:	e0bfff17 	ldw	r2,-4(fp)
  80e008:	10800517 	ldw	r2,20(r2)
  80e00c:	1007883a 	mov	r3,r2
  80e010:	2005883a 	mov	r2,r4
  80e014:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
  80e018:	e13ffc17 	ldw	r4,-16(fp)
  80e01c:	080e5ec0 	call	80e5ec <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  80e020:	e13ffc17 	ldw	r4,-16(fp)
  80e024:	080e6c40 	call	80e6c4 <altera_avalon_mutex_first_lock>
  80e028:	1004c03a 	cmpne	r2,r2,zero
  80e02c:	103fed1e 	bne	r2,zero,80dfe4 <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
  80e030:	e0bffe17 	ldw	r2,-8(fp)
}
  80e034:	e037883a 	mov	sp,fp
  80e038:	dfc00117 	ldw	ra,4(sp)
  80e03c:	df000017 	ldw	fp,0(sp)
  80e040:	dec00204 	addi	sp,sp,8
  80e044:	f800283a 	ret

0080e048 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
  80e048:	defffc04 	addi	sp,sp,-16
  80e04c:	dfc00315 	stw	ra,12(sp)
  80e050:	df000215 	stw	fp,8(sp)
  80e054:	df000204 	addi	fp,sp,8
  80e058:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80e05c:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  80e060:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
  80e064:	e0bffe17 	ldw	r2,-8(fp)
  80e068:	1004c03a 	cmpne	r2,r2,zero
  80e06c:	1000061e 	bne	r2,zero,80e088 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
  80e070:	e13fff17 	ldw	r4,-4(fp)
  80e074:	01402074 	movhi	r5,129
  80e078:	294f9204 	addi	r5,r5,15944
  80e07c:	08109900 	call	810990 <alt_dev_llist_insert>
  80e080:	e0bffe15 	stw	r2,-8(fp)
  80e084:	00000506 	br	80e09c <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
  80e088:	080e0b40 	call	80e0b4 <alt_get_errno>
  80e08c:	00c00304 	movi	r3,12
  80e090:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
  80e094:	00bffd04 	movi	r2,-12
  80e098:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
  80e09c:	e0bffe17 	ldw	r2,-8(fp)
}
  80e0a0:	e037883a 	mov	sp,fp
  80e0a4:	dfc00117 	ldw	ra,4(sp)
  80e0a8:	df000017 	ldw	fp,0(sp)
  80e0ac:	dec00204 	addi	sp,sp,8
  80e0b0:	f800283a 	ret

0080e0b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e0b4:	defffd04 	addi	sp,sp,-12
  80e0b8:	dfc00215 	stw	ra,8(sp)
  80e0bc:	df000115 	stw	fp,4(sp)
  80e0c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e0c4:	00802074 	movhi	r2,129
  80e0c8:	108f8e04 	addi	r2,r2,15928
  80e0cc:	10800017 	ldw	r2,0(r2)
  80e0d0:	1005003a 	cmpeq	r2,r2,zero
  80e0d4:	1000061e 	bne	r2,zero,80e0f0 <alt_get_errno+0x3c>
  80e0d8:	00802074 	movhi	r2,129
  80e0dc:	108f8e04 	addi	r2,r2,15928
  80e0e0:	10800017 	ldw	r2,0(r2)
  80e0e4:	103ee83a 	callr	r2
  80e0e8:	e0bfff15 	stw	r2,-4(fp)
  80e0ec:	00000306 	br	80e0fc <alt_get_errno+0x48>
  80e0f0:	00802074 	movhi	r2,129
  80e0f4:	1096a004 	addi	r2,r2,23168
  80e0f8:	e0bfff15 	stw	r2,-4(fp)
  80e0fc:	e0bfff17 	ldw	r2,-4(fp)
}
  80e100:	e037883a 	mov	sp,fp
  80e104:	dfc00117 	ldw	ra,4(sp)
  80e108:	df000017 	ldw	fp,0(sp)
  80e10c:	dec00204 	addi	sp,sp,8
  80e110:	f800283a 	ret

0080e114 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
  80e114:	defffc04 	addi	sp,sp,-16
  80e118:	dfc00315 	stw	ra,12(sp)
  80e11c:	df000215 	stw	fp,8(sp)
  80e120:	df000204 	addi	fp,sp,8
  80e124:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
  80e128:	e13fff17 	ldw	r4,-4(fp)
  80e12c:	d1601504 	addi	r5,gp,-32684
  80e130:	0810b6c0 	call	810b6c <alt_find_dev>
  80e134:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  80e138:	e0bffe17 	ldw	r2,-8(fp)
  80e13c:	1004c03a 	cmpne	r2,r2,zero
  80e140:	1000041e 	bne	r2,zero,80e154 <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  80e144:	080e0b40 	call	80e0b4 <alt_get_errno>
  80e148:	1007883a 	mov	r3,r2
  80e14c:	008004c4 	movi	r2,19
  80e150:	18800015 	stw	r2,0(r3)
  }

  return dev;
  80e154:	e0bffe17 	ldw	r2,-8(fp)

}
  80e158:	e037883a 	mov	sp,fp
  80e15c:	dfc00117 	ldw	ra,4(sp)
  80e160:	df000017 	ldw	fp,0(sp)
  80e164:	dec00204 	addi	sp,sp,8
  80e168:	f800283a 	ret

0080e16c <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
  80e16c:	defffe04 	addi	sp,sp,-8
  80e170:	df000115 	stw	fp,4(sp)
  80e174:	df000104 	addi	fp,sp,4
  80e178:	e13fff15 	stw	r4,-4(fp)
  return;
}
  80e17c:	e037883a 	mov	sp,fp
  80e180:	df000017 	ldw	fp,0(sp)
  80e184:	dec00104 	addi	sp,sp,4
  80e188:	f800283a 	ret

0080e18c <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
  80e18c:	defff904 	addi	sp,sp,-28
  80e190:	dfc00615 	stw	ra,24(sp)
  80e194:	df000515 	stw	fp,20(sp)
  80e198:	df000504 	addi	fp,sp,20
  80e19c:	e13ffe15 	stw	r4,-8(fp)
  80e1a0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  80e1a4:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
  80e1a8:	e0bffe17 	ldw	r2,-8(fp)
  80e1ac:	11000704 	addi	r4,r2,28
  80e1b0:	01400044 	movi	r5,1
  80e1b4:	080e56c0 	call	80e56c <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
  80e1b8:	e0bffe17 	ldw	r2,-8(fp)
  80e1bc:	10800317 	ldw	r2,12(r2)
  80e1c0:	10800037 	ldwio	r2,0(r2)
  80e1c4:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
  80e1c8:	e13ffe17 	ldw	r4,-8(fp)
  80e1cc:	e17ffc17 	ldw	r5,-16(fp)
  80e1d0:	080e2480 	call	80e248 <alt_mailbox_increment_ptr>
  80e1d4:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
  80e1d8:	e0bffe17 	ldw	r2,-8(fp)
  80e1dc:	10800417 	ldw	r2,16(r2)
  80e1e0:	10800037 	ldwio	r2,0(r2)
  80e1e4:	1007883a 	mov	r3,r2
  80e1e8:	e0bffb17 	ldw	r2,-20(fp)
  80e1ec:	1880061e 	bne	r3,r2,80e208 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
  80e1f0:	080e0b40 	call	80e0b4 <alt_get_errno>
  80e1f4:	00c002c4 	movi	r3,11
  80e1f8:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
  80e1fc:	00bffd44 	movi	r2,-11
  80e200:	e0bffd15 	stw	r2,-12(fp)
  80e204:	00000706 	br	80e224 <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
  80e208:	e0bffc17 	ldw	r2,-16(fp)
  80e20c:	e0ffff17 	ldw	r3,-4(fp)
  80e210:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
  80e214:	e0bffe17 	ldw	r2,-8(fp)
  80e218:	10800317 	ldw	r2,12(r2)
  80e21c:	e0fffb17 	ldw	r3,-20(fp)
  80e220:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
  80e224:	e0bffe17 	ldw	r2,-8(fp)
  80e228:	11000704 	addi	r4,r2,28
  80e22c:	080e5ec0 	call	80e5ec <altera_avalon_mutex_unlock>

  return ret_code;
  80e230:	e0bffd17 	ldw	r2,-12(fp)

}
  80e234:	e037883a 	mov	sp,fp
  80e238:	dfc00117 	ldw	ra,4(sp)
  80e23c:	df000017 	ldw	fp,0(sp)
  80e240:	dec00204 	addi	sp,sp,8
  80e244:	f800283a 	ret

0080e248 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
  80e248:	defffd04 	addi	sp,sp,-12
  80e24c:	df000215 	stw	fp,8(sp)
  80e250:	df000204 	addi	fp,sp,8
  80e254:	e13ffe15 	stw	r4,-8(fp)
  80e258:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
  80e25c:	e0bfff17 	ldw	r2,-4(fp)
  80e260:	10800104 	addi	r2,r2,4
  80e264:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
  80e268:	e0bffe17 	ldw	r2,-8(fp)
  80e26c:	10c00617 	ldw	r3,24(r2)
  80e270:	e0bfff17 	ldw	r2,-4(fp)
  80e274:	1880032e 	bgeu	r3,r2,80e284 <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
  80e278:	e0bffe17 	ldw	r2,-8(fp)
  80e27c:	10800517 	ldw	r2,20(r2)
  80e280:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
  80e284:	e0bfff17 	ldw	r2,-4(fp)
}
  80e288:	e037883a 	mov	sp,fp
  80e28c:	df000017 	ldw	fp,0(sp)
  80e290:	dec00104 	addi	sp,sp,4
  80e294:	f800283a 	ret

0080e298 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
  80e298:	defffa04 	addi	sp,sp,-24
  80e29c:	dfc00515 	stw	ra,20(sp)
  80e2a0:	df000415 	stw	fp,16(sp)
  80e2a4:	dc000315 	stw	r16,12(sp)
  80e2a8:	df000304 	addi	fp,sp,12
  80e2ac:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  80e2b0:	e0bfff17 	ldw	r2,-4(fp)
  80e2b4:	11000b04 	addi	r4,r2,44
  80e2b8:	01400044 	movi	r5,1
  80e2bc:	080e56c0 	call	80e56c <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  80e2c0:	e0bfff17 	ldw	r2,-4(fp)
  80e2c4:	10800417 	ldw	r2,16(r2)
  80e2c8:	10800037 	ldwio	r2,0(r2)
  80e2cc:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
  80e2d0:	e0bfff17 	ldw	r2,-4(fp)
  80e2d4:	10800317 	ldw	r2,12(r2)
  80e2d8:	10800037 	ldwio	r2,0(r2)
  80e2dc:	1007883a 	mov	r3,r2
  80e2e0:	e0bffd17 	ldw	r2,-12(fp)
  80e2e4:	18bffa26 	beq	r3,r2,80e2d0 <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
  80e2e8:	e0bffd17 	ldw	r2,-12(fp)
  80e2ec:	10800037 	ldwio	r2,0(r2)
  80e2f0:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
  80e2f4:	e0bfff17 	ldw	r2,-4(fp)
  80e2f8:	10800417 	ldw	r2,16(r2)
  80e2fc:	1021883a 	mov	r16,r2
  80e300:	e13fff17 	ldw	r4,-4(fp)
  80e304:	e17ffd17 	ldw	r5,-12(fp)
  80e308:	080e2480 	call	80e248 <alt_mailbox_increment_ptr>
  80e30c:	1007883a 	mov	r3,r2
  80e310:	8005883a 	mov	r2,r16
  80e314:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
  80e318:	e0bfff17 	ldw	r2,-4(fp)
  80e31c:	11000b04 	addi	r4,r2,44
  80e320:	080e5ec0 	call	80e5ec <altera_avalon_mutex_unlock>

  return msg;
  80e324:	e0bffe17 	ldw	r2,-8(fp)

}
  80e328:	e037883a 	mov	sp,fp
  80e32c:	dfc00217 	ldw	ra,8(sp)
  80e330:	df000117 	ldw	fp,4(sp)
  80e334:	dc000017 	ldw	r16,0(sp)
  80e338:	dec00304 	addi	sp,sp,12
  80e33c:	f800283a 	ret

0080e340 <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
  80e340:	defff904 	addi	sp,sp,-28
  80e344:	dfc00615 	stw	ra,24(sp)
  80e348:	df000515 	stw	fp,20(sp)
  80e34c:	dc000415 	stw	r16,16(sp)
  80e350:	df000404 	addi	fp,sp,16
  80e354:	e13ffe15 	stw	r4,-8(fp)
  80e358:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
  80e35c:	e0bfff17 	ldw	r2,-4(fp)
  80e360:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  80e364:	e0bffe17 	ldw	r2,-8(fp)
  80e368:	11000b04 	addi	r4,r2,44
  80e36c:	01400044 	movi	r5,1
  80e370:	080e56c0 	call	80e56c <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  80e374:	e0bffe17 	ldw	r2,-8(fp)
  80e378:	10800417 	ldw	r2,16(r2)
  80e37c:	10800037 	ldwio	r2,0(r2)
  80e380:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
  80e384:	e0bffe17 	ldw	r2,-8(fp)
  80e388:	10800317 	ldw	r2,12(r2)
  80e38c:	10800037 	ldwio	r2,0(r2)
  80e390:	1007883a 	mov	r3,r2
  80e394:	e0bffc17 	ldw	r2,-16(fp)
  80e398:	1880091e 	bne	r3,r2,80e3c0 <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
  80e39c:	e0ffff17 	ldw	r3,-4(fp)
  80e3a0:	00bffd44 	movi	r2,-11
  80e3a4:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
  80e3a8:	080e0b40 	call	80e0b4 <alt_get_errno>
  80e3ac:	1007883a 	mov	r3,r2
  80e3b0:	008002c4 	movi	r2,11
  80e3b4:	18800015 	stw	r2,0(r3)
    msg = 0;
  80e3b8:	e03ffd15 	stw	zero,-12(fp)
  80e3bc:	00000c06 	br	80e3f0 <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
  80e3c0:	e0bffc17 	ldw	r2,-16(fp)
  80e3c4:	10800037 	ldwio	r2,0(r2)
  80e3c8:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
  80e3cc:	e0bffe17 	ldw	r2,-8(fp)
  80e3d0:	10800417 	ldw	r2,16(r2)
  80e3d4:	1021883a 	mov	r16,r2
  80e3d8:	e13ffe17 	ldw	r4,-8(fp)
  80e3dc:	e17ffc17 	ldw	r5,-16(fp)
  80e3e0:	080e2480 	call	80e248 <alt_mailbox_increment_ptr>
  80e3e4:	1007883a 	mov	r3,r2
  80e3e8:	8005883a 	mov	r2,r16
  80e3ec:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
  80e3f0:	e0bffe17 	ldw	r2,-8(fp)
  80e3f4:	11000b04 	addi	r4,r2,44
  80e3f8:	080e5ec0 	call	80e5ec <altera_avalon_mutex_unlock>

  return msg;
  80e3fc:	e0bffd17 	ldw	r2,-12(fp)

}
  80e400:	e037883a 	mov	sp,fp
  80e404:	dfc00217 	ldw	ra,8(sp)
  80e408:	df000117 	ldw	fp,4(sp)
  80e40c:	dc000017 	ldw	r16,0(sp)
  80e410:	dec00304 	addi	sp,sp,12
  80e414:	f800283a 	ret

0080e418 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  80e418:	defff904 	addi	sp,sp,-28
  80e41c:	df000615 	stw	fp,24(sp)
  80e420:	df000604 	addi	fp,sp,24
  80e424:	e13ffe15 	stw	r4,-8(fp)
  80e428:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
  80e42c:	00bfffc4 	movi	r2,-1
  80e430:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
  80e434:	0005317a 	rdctl	r2,cpuid
  80e438:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
  80e43c:	e0bffd17 	ldw	r2,-12(fp)
  80e440:	1006943a 	slli	r3,r2,16
  80e444:	e0bfff17 	ldw	r2,-4(fp)
  80e448:	1884b03a 	or	r2,r3,r2
  80e44c:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
  80e450:	e0bffe17 	ldw	r2,-8(fp)
  80e454:	10800317 	ldw	r2,12(r2)
  80e458:	e0fffc17 	ldw	r3,-16(fp)
  80e45c:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  80e460:	e0bffe17 	ldw	r2,-8(fp)
  80e464:	10800317 	ldw	r2,12(r2)
  80e468:	10800037 	ldwio	r2,0(r2)
  80e46c:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
  80e470:	e0fffb17 	ldw	r3,-20(fp)
  80e474:	e0bffc17 	ldw	r2,-16(fp)
  80e478:	1880011e 	bne	r3,r2,80e480 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
  80e47c:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
  80e480:	e0bffa17 	ldw	r2,-24(fp)
}
  80e484:	e037883a 	mov	sp,fp
  80e488:	df000017 	ldw	fp,0(sp)
  80e48c:	dec00104 	addi	sp,sp,4
  80e490:	f800283a 	ret

0080e494 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
  80e494:	defffc04 	addi	sp,sp,-16
  80e498:	dfc00315 	stw	ra,12(sp)
  80e49c:	df000215 	stw	fp,8(sp)
  80e4a0:	df000204 	addi	fp,sp,8
  80e4a4:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
  80e4a8:	e13fff17 	ldw	r4,-4(fp)
  80e4ac:	d1601704 	addi	r5,gp,-32676
  80e4b0:	0810b6c0 	call	810b6c <alt_find_dev>
  80e4b4:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  80e4b8:	e0bffe17 	ldw	r2,-8(fp)
  80e4bc:	1004c03a 	cmpne	r2,r2,zero
  80e4c0:	1000041e 	bne	r2,zero,80e4d4 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  80e4c4:	080e4ec0 	call	80e4ec <alt_get_errno>
  80e4c8:	1007883a 	mov	r3,r2
  80e4cc:	008004c4 	movi	r2,19
  80e4d0:	18800015 	stw	r2,0(r3)
  }

  return dev;
  80e4d4:	e0bffe17 	ldw	r2,-8(fp)
}
  80e4d8:	e037883a 	mov	sp,fp
  80e4dc:	dfc00117 	ldw	ra,4(sp)
  80e4e0:	df000017 	ldw	fp,0(sp)
  80e4e4:	dec00204 	addi	sp,sp,8
  80e4e8:	f800283a 	ret

0080e4ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e4ec:	defffd04 	addi	sp,sp,-12
  80e4f0:	dfc00215 	stw	ra,8(sp)
  80e4f4:	df000115 	stw	fp,4(sp)
  80e4f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e4fc:	00802074 	movhi	r2,129
  80e500:	108f8e04 	addi	r2,r2,15928
  80e504:	10800017 	ldw	r2,0(r2)
  80e508:	1005003a 	cmpeq	r2,r2,zero
  80e50c:	1000061e 	bne	r2,zero,80e528 <alt_get_errno+0x3c>
  80e510:	00802074 	movhi	r2,129
  80e514:	108f8e04 	addi	r2,r2,15928
  80e518:	10800017 	ldw	r2,0(r2)
  80e51c:	103ee83a 	callr	r2
  80e520:	e0bfff15 	stw	r2,-4(fp)
  80e524:	00000306 	br	80e534 <alt_get_errno+0x48>
  80e528:	00802074 	movhi	r2,129
  80e52c:	1096a004 	addi	r2,r2,23168
  80e530:	e0bfff15 	stw	r2,-4(fp)
  80e534:	e0bfff17 	ldw	r2,-4(fp)
}
  80e538:	e037883a 	mov	sp,fp
  80e53c:	dfc00117 	ldw	ra,4(sp)
  80e540:	df000017 	ldw	fp,0(sp)
  80e544:	dec00204 	addi	sp,sp,8
  80e548:	f800283a 	ret

0080e54c <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
  80e54c:	defffe04 	addi	sp,sp,-8
  80e550:	df000115 	stw	fp,4(sp)
  80e554:	df000104 	addi	fp,sp,4
  80e558:	e13fff15 	stw	r4,-4(fp)
  return;
}
  80e55c:	e037883a 	mov	sp,fp
  80e560:	df000017 	ldw	fp,0(sp)
  80e564:	dec00104 	addi	sp,sp,4
  80e568:	f800283a 	ret

0080e56c <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
  80e56c:	defffc04 	addi	sp,sp,-16
  80e570:	dfc00315 	stw	ra,12(sp)
  80e574:	df000215 	stw	fp,8(sp)
  80e578:	df000204 	addi	fp,sp,8
  80e57c:	e13ffe15 	stw	r4,-8(fp)
  80e580:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
  80e584:	e13ffe17 	ldw	r4,-8(fp)
  80e588:	e17fff17 	ldw	r5,-4(fp)
  80e58c:	080e4180 	call	80e418 <alt_mutex_trylock>
  80e590:	1004c03a 	cmpne	r2,r2,zero
  80e594:	103ffb1e 	bne	r2,zero,80e584 <altera_avalon_mutex_lock+0x18>
}
  80e598:	e037883a 	mov	sp,fp
  80e59c:	dfc00117 	ldw	ra,4(sp)
  80e5a0:	df000017 	ldw	fp,0(sp)
  80e5a4:	dec00204 	addi	sp,sp,8
  80e5a8:	f800283a 	ret

0080e5ac <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  80e5ac:	defffb04 	addi	sp,sp,-20
  80e5b0:	dfc00415 	stw	ra,16(sp)
  80e5b4:	df000315 	stw	fp,12(sp)
  80e5b8:	df000304 	addi	fp,sp,12
  80e5bc:	e13ffe15 	stw	r4,-8(fp)
  80e5c0:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
  80e5c4:	e13ffe17 	ldw	r4,-8(fp)
  80e5c8:	e17fff17 	ldw	r5,-4(fp)
  80e5cc:	080e4180 	call	80e418 <alt_mutex_trylock>
  80e5d0:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
  80e5d4:	e0bffd17 	ldw	r2,-12(fp)
}
  80e5d8:	e037883a 	mov	sp,fp
  80e5dc:	dfc00117 	ldw	ra,4(sp)
  80e5e0:	df000017 	ldw	fp,0(sp)
  80e5e4:	dec00204 	addi	sp,sp,8
  80e5e8:	f800283a 	ret

0080e5ec <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  80e5ec:	defffd04 	addi	sp,sp,-12
  80e5f0:	df000215 	stw	fp,8(sp)
  80e5f4:	df000204 	addi	fp,sp,8
  80e5f8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
  80e5fc:	0005317a 	rdctl	r2,cpuid
  80e600:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
  80e604:	e0bfff17 	ldw	r2,-4(fp)
  80e608:	10800317 	ldw	r2,12(r2)
  80e60c:	10800104 	addi	r2,r2,4
  80e610:	1007883a 	mov	r3,r2
  80e614:	00800044 	movi	r2,1
  80e618:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
  80e61c:	e0bfff17 	ldw	r2,-4(fp)
  80e620:	11000317 	ldw	r4,12(r2)
  80e624:	e0bffe17 	ldw	r2,-8(fp)
  80e628:	1004943a 	slli	r2,r2,16
  80e62c:	1007883a 	mov	r3,r2
  80e630:	2005883a 	mov	r2,r4
  80e634:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
  80e638:	e037883a 	mov	sp,fp
  80e63c:	df000017 	ldw	fp,0(sp)
  80e640:	dec00104 	addi	sp,sp,4
  80e644:	f800283a 	ret

0080e648 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  80e648:	defff904 	addi	sp,sp,-28
  80e64c:	df000615 	stw	fp,24(sp)
  80e650:	df000604 	addi	fp,sp,24
  80e654:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
  80e658:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
  80e65c:	0005317a 	rdctl	r2,cpuid
  80e660:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  80e664:	e0bfff17 	ldw	r2,-4(fp)
  80e668:	10800317 	ldw	r2,12(r2)
  80e66c:	10800037 	ldwio	r2,0(r2)
  80e670:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
  80e674:	e0bffd17 	ldw	r2,-12(fp)
  80e678:	10bfffec 	andhi	r2,r2,65535
  80e67c:	1004d43a 	srli	r2,r2,16
  80e680:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
  80e684:	e0fffc17 	ldw	r3,-16(fp)
  80e688:	e0bffe17 	ldw	r2,-8(fp)
  80e68c:	1880081e 	bne	r3,r2,80e6b0 <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
  80e690:	e0bffd17 	ldw	r2,-12(fp)
  80e694:	10bfffcc 	andi	r2,r2,65535
  80e698:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
  80e69c:	e0bffb17 	ldw	r2,-20(fp)
  80e6a0:	1005003a 	cmpeq	r2,r2,zero
  80e6a4:	1000021e 	bne	r2,zero,80e6b0 <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
  80e6a8:	00800044 	movi	r2,1
  80e6ac:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
  80e6b0:	e0bffa17 	ldw	r2,-24(fp)
}
  80e6b4:	e037883a 	mov	sp,fp
  80e6b8:	df000017 	ldw	fp,0(sp)
  80e6bc:	dec00104 	addi	sp,sp,4
  80e6c0:	f800283a 	ret

0080e6c4 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  80e6c4:	defffc04 	addi	sp,sp,-16
  80e6c8:	df000315 	stw	fp,12(sp)
  80e6cc:	df000304 	addi	fp,sp,12
  80e6d0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
  80e6d4:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
  80e6d8:	e0bfff17 	ldw	r2,-4(fp)
  80e6dc:	10800317 	ldw	r2,12(r2)
  80e6e0:	10800104 	addi	r2,r2,4
  80e6e4:	10800037 	ldwio	r2,0(r2)
  80e6e8:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
  80e6ec:	e0bffe17 	ldw	r2,-8(fp)
  80e6f0:	1080004c 	andi	r2,r2,1
  80e6f4:	10803fcc 	andi	r2,r2,255
  80e6f8:	1005003a 	cmpeq	r2,r2,zero
  80e6fc:	1000021e 	bne	r2,zero,80e708 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
  80e700:	00800044 	movi	r2,1
  80e704:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
  80e708:	e0bffd17 	ldw	r2,-12(fp)
}
  80e70c:	e037883a 	mov	sp,fp
  80e710:	df000017 	ldw	fp,0(sp)
  80e714:	dec00104 	addi	sp,sp,4
  80e718:	f800283a 	ret

0080e71c <read_word>:
* reads a word from an address in flash
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word(alt_u8* current_ptr)
{
  80e71c:	defffe04 	addi	sp,sp,-8
  80e720:	df000115 	stw	fp,4(sp)
  80e724:	df000104 	addi	fp,sp,4
  80e728:	e13fff15 	stw	r4,-4(fp)
  return (alt_u32)(*current_ptr | 
  80e72c:	e0bfff17 	ldw	r2,-4(fp)
  80e730:	10800003 	ldbu	r2,0(r2)
  80e734:	10c03fcc 	andi	r3,r2,255
  80e738:	e0bfff17 	ldw	r2,-4(fp)
  80e73c:	10800044 	addi	r2,r2,1
  80e740:	10800003 	ldbu	r2,0(r2)
  80e744:	10803fcc 	andi	r2,r2,255
  80e748:	1004923a 	slli	r2,r2,8
  80e74c:	1886b03a 	or	r3,r3,r2
  80e750:	e0bfff17 	ldw	r2,-4(fp)
  80e754:	10800084 	addi	r2,r2,2
  80e758:	10800003 	ldbu	r2,0(r2)
  80e75c:	10803fcc 	andi	r2,r2,255
  80e760:	1004943a 	slli	r2,r2,16
  80e764:	1886b03a 	or	r3,r3,r2
  80e768:	e0bfff17 	ldw	r2,-4(fp)
  80e76c:	108000c4 	addi	r2,r2,3
  80e770:	10800003 	ldbu	r2,0(r2)
  80e774:	10803fcc 	andi	r2,r2,255
  80e778:	1004963a 	slli	r2,r2,24
  80e77c:	1884b03a 	or	r2,r3,r2
         (*(current_ptr+1) << 8) | 
         (*(current_ptr+2) << 16) |
         (*(current_ptr+3) << 24 ));
}
  80e780:	e037883a 	mov	sp,fp
  80e784:	df000017 	ldw	fp,0(sp)
  80e788:	dec00104 	addi	sp,sp,4
  80e78c:	f800283a 	ret

0080e790 <read_word_inc>:
* reads a word from an address in flash, and increments the ptr
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word_inc(alt_u8** current_ptr)
{
  80e790:	defffc04 	addi	sp,sp,-16
  80e794:	dfc00315 	stw	ra,12(sp)
  80e798:	df000215 	stw	fp,8(sp)
  80e79c:	df000204 	addi	fp,sp,8
  80e7a0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 value = read_word(*current_ptr);
  80e7a4:	e0bfff17 	ldw	r2,-4(fp)
  80e7a8:	11000017 	ldw	r4,0(r2)
  80e7ac:	080e71c0 	call	80e71c <read_word>
  80e7b0:	e0bffe15 	stw	r2,-8(fp)
  *current_ptr += 4;
  80e7b4:	e0bfff17 	ldw	r2,-4(fp)
  80e7b8:	10800017 	ldw	r2,0(r2)
  80e7bc:	10c00104 	addi	r3,r2,4
  80e7c0:	e0bfff17 	ldw	r2,-4(fp)
  80e7c4:	10c00015 	stw	r3,0(r2)
  return value;
  80e7c8:	e0bffe17 	ldw	r2,-8(fp)
}
  80e7cc:	e037883a 	mov	sp,fp
  80e7d0:	dfc00117 	ldw	ra,4(sp)
  80e7d4:	df000017 	ldw	fp,0(sp)
  80e7d8:	dec00204 	addi	sp,sp,8
  80e7dc:	f800283a 	ret

0080e7e0 <read_half_word>:
* reads a half word from an address in flash
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u16 read_half_word(alt_u8* current_ptr)
{
  80e7e0:	defffe04 	addi	sp,sp,-8
  80e7e4:	df000115 	stw	fp,4(sp)
  80e7e8:	df000104 	addi	fp,sp,4
  80e7ec:	e13fff15 	stw	r4,-4(fp)
  return (alt_u16)(*current_ptr | 
  80e7f0:	e0bfff17 	ldw	r2,-4(fp)
  80e7f4:	10800003 	ldbu	r2,0(r2)
  80e7f8:	10c03fcc 	andi	r3,r2,255
  80e7fc:	e0bfff17 	ldw	r2,-4(fp)
  80e800:	10800044 	addi	r2,r2,1
  80e804:	10800003 	ldbu	r2,0(r2)
  80e808:	10803fcc 	andi	r2,r2,255
  80e80c:	1004923a 	slli	r2,r2,8
  80e810:	1884b03a 	or	r2,r3,r2
  80e814:	10bfffcc 	andi	r2,r2,65535
         (*(current_ptr+1) << 8));
}
  80e818:	e037883a 	mov	sp,fp
  80e81c:	df000017 	ldw	fp,0(sp)
  80e820:	dec00104 	addi	sp,sp,4
  80e824:	f800283a 	ret

0080e828 <read_half_word_inc>:
* reads a half word from an address in flash, and increment the ptr
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u16 read_half_word_inc(alt_u8** current_ptr)
{
  80e828:	defffc04 	addi	sp,sp,-16
  80e82c:	dfc00315 	stw	ra,12(sp)
  80e830:	df000215 	stw	fp,8(sp)
  80e834:	df000204 	addi	fp,sp,8
  80e838:	e13fff15 	stw	r4,-4(fp)
  alt_u16 value = read_word(*current_ptr);
  80e83c:	e0bfff17 	ldw	r2,-4(fp)
  80e840:	11000017 	ldw	r4,0(r2)
  80e844:	080e71c0 	call	80e71c <read_word>
  80e848:	e0bffe0d 	sth	r2,-8(fp)
  *current_ptr += 2;
  80e84c:	e0bfff17 	ldw	r2,-4(fp)
  80e850:	10800017 	ldw	r2,0(r2)
  80e854:	10c00084 	addi	r3,r2,2
  80e858:	e0bfff17 	ldw	r2,-4(fp)
  80e85c:	10c00015 	stw	r3,0(r2)
  return value;
  80e860:	e0bffe0b 	ldhu	r2,-8(fp)
}
  80e864:	e037883a 	mov	sp,fp
  80e868:	dfc00117 	ldw	ra,4(sp)
  80e86c:	df000017 	ldw	fp,0(sp)
  80e870:	dec00204 	addi	sp,sp,8
  80e874:	f800283a 	ret

0080e878 <check_file_header>:
*
* Check that this is a file header we can cope with and inrement the current ptr 
* accordingly
*/
static int check_file_header(alt_u8** current_ptr)
{
  80e878:	defff704 	addi	sp,sp,-36
  80e87c:	dfc00815 	stw	ra,32(sp)
  80e880:	df000715 	stw	fp,28(sp)
  80e884:	df000704 	addi	fp,sp,28
  80e888:	e13fff15 	stw	r4,-4(fp)
  int ret_code = -ENOENT;
  80e88c:	00bfff84 	movi	r2,-2
  80e890:	e0bffe15 	stw	r2,-8(fp)
  alt_u16 name_len, extra_len, version, flags, compression;
  alt_u32 uncompressed_len, compressed_len;

  version = read_half_word_inc(current_ptr);
  80e894:	e13fff17 	ldw	r4,-4(fp)
  80e898:	080e8280 	call	80e828 <read_half_word_inc>
  80e89c:	e0bffc0d 	sth	r2,-16(fp)

  /* We can parse files designed for version 10 */
  if (version > 10)
  80e8a0:	e0bffc0b 	ldhu	r2,-16(fp)
  80e8a4:	108002e8 	cmpgeui	r2,r2,11
  80e8a8:	1000331e 	bne	r2,zero,80e978 <check_file_header+0x100>
  {
    goto exit;
  }

  /* Read the flags, right now any flags are an error */
  flags = read_half_word_inc(current_ptr);
  80e8ac:	e13fff17 	ldw	r4,-4(fp)
  80e8b0:	080e8280 	call	80e828 <read_half_word_inc>
  80e8b4:	e0bffb8d 	sth	r2,-18(fp)

  if (flags )
  80e8b8:	e0bffb8b 	ldhu	r2,-18(fp)
  80e8bc:	1004c03a 	cmpne	r2,r2,zero
  80e8c0:	10002d1e 	bne	r2,zero,80e978 <check_file_header+0x100>
  {
    goto exit;
  }

  compression = read_half_word_inc(current_ptr);
  80e8c4:	e13fff17 	ldw	r4,-4(fp)
  80e8c8:	080e8280 	call	80e828 <read_half_word_inc>
  80e8cc:	e0bffb0d 	sth	r2,-20(fp)

  /* Skip the mod times and the CRC */
  *current_ptr += 8;
  80e8d0:	e0bfff17 	ldw	r2,-4(fp)
  80e8d4:	10800017 	ldw	r2,0(r2)
  80e8d8:	10c00204 	addi	r3,r2,8
  80e8dc:	e0bfff17 	ldw	r2,-4(fp)
  80e8e0:	10c00015 	stw	r3,0(r2)

  /* Read the compressed and uncompressed lengths, these should be the same */
  compressed_len = read_word_inc(current_ptr);
  80e8e4:	e13fff17 	ldw	r4,-4(fp)
  80e8e8:	080e7900 	call	80e790 <read_word_inc>
  80e8ec:	e0bff915 	stw	r2,-28(fp)
  uncompressed_len = read_word_inc(current_ptr);
  80e8f0:	e13fff17 	ldw	r4,-4(fp)
  80e8f4:	080e7900 	call	80e790 <read_word_inc>
  80e8f8:	e0bffa15 	stw	r2,-24(fp)

  if ((compression) || (compressed_len != uncompressed_len))
  80e8fc:	e0bffb0b 	ldhu	r2,-20(fp)
  80e900:	1004c03a 	cmpne	r2,r2,zero
  80e904:	10001c1e 	bne	r2,zero,80e978 <check_file_header+0x100>
  80e908:	e0fff917 	ldw	r3,-28(fp)
  80e90c:	e0bffa17 	ldw	r2,-24(fp)
  80e910:	1880191e 	bne	r3,r2,80e978 <check_file_header+0x100>
  {
    goto exit;
  }

  /* Read the length of the name and extra fields */
  name_len = read_half_word_inc(current_ptr);
  80e914:	e13fff17 	ldw	r4,-4(fp)
  80e918:	080e8280 	call	80e828 <read_half_word_inc>
  80e91c:	e0bffd0d 	sth	r2,-12(fp)
  extra_len = read_half_word_inc(current_ptr);
  80e920:	e13fff17 	ldw	r4,-4(fp)
  80e924:	080e8280 	call	80e828 <read_half_word_inc>
  80e928:	e0bffc8d 	sth	r2,-14(fp)

  /* Skip the name and extra fields */
  *current_ptr += name_len;
  80e92c:	e0bfff17 	ldw	r2,-4(fp)
  80e930:	10c00017 	ldw	r3,0(r2)
  80e934:	e0bffd0b 	ldhu	r2,-12(fp)
  80e938:	1887883a 	add	r3,r3,r2
  80e93c:	e0bfff17 	ldw	r2,-4(fp)
  80e940:	10c00015 	stw	r3,0(r2)
  *current_ptr += extra_len;
  80e944:	e0bfff17 	ldw	r2,-4(fp)
  80e948:	10c00017 	ldw	r3,0(r2)
  80e94c:	e0bffc8b 	ldhu	r2,-14(fp)
  80e950:	1887883a 	add	r3,r3,r2
  80e954:	e0bfff17 	ldw	r2,-4(fp)
  80e958:	10c00015 	stw	r3,0(r2)

  *current_ptr += compressed_len;
  80e95c:	e0bfff17 	ldw	r2,-4(fp)
  80e960:	10c00017 	ldw	r3,0(r2)
  80e964:	e0bff917 	ldw	r2,-28(fp)
  80e968:	1887883a 	add	r3,r3,r2
  80e96c:	e0bfff17 	ldw	r2,-4(fp)
  80e970:	10c00015 	stw	r3,0(r2)

  ret_code = 0;
  80e974:	e03ffe15 	stw	zero,-8(fp)

exit:
  return ret_code;
  80e978:	e0bffe17 	ldw	r2,-8(fp)
}
  80e97c:	e037883a 	mov	sp,fp
  80e980:	dfc00117 	ldw	ra,4(sp)
  80e984:	df000017 	ldw	fp,0(sp)
  80e988:	dec00204 	addi	sp,sp,8
  80e98c:	f800283a 	ret

0080e990 <check_directory_header>:
* Sanity check an entry in the directory structure
* 
* returns 0 for success -ENOENT if not
*/
int check_directory_header(alt_u8** current_ptr)
{
  80e990:	defff704 	addi	sp,sp,-36
  80e994:	dfc00815 	stw	ra,32(sp)
  80e998:	df000715 	stw	fp,28(sp)
  80e99c:	df000704 	addi	fp,sp,28
  80e9a0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = -ENOENT;
  80e9a4:	00bfff84 	movi	r2,-2
  80e9a8:	e0bffe15 	stw	r2,-8(fp)
  alt_u16 version, flags, compression, name_len, extra_len, comment_len;
  alt_u32 compressed_len, uncompressed_len;

  /* We don't care what version made this file */
  *current_ptr += 2;
  80e9ac:	e0bfff17 	ldw	r2,-4(fp)
  80e9b0:	10800017 	ldw	r2,0(r2)
  80e9b4:	10c00084 	addi	r3,r2,2
  80e9b8:	e0bfff17 	ldw	r2,-4(fp)
  80e9bc:	10c00015 	stw	r3,0(r2)

  /* We can parse files designed for version 10 */
  version = read_half_word_inc(current_ptr);
  80e9c0:	e13fff17 	ldw	r4,-4(fp)
  80e9c4:	080e8280 	call	80e828 <read_half_word_inc>
  80e9c8:	e0bffd8d 	sth	r2,-10(fp)
  if (version > 10)
  80e9cc:	e0bffd8b 	ldhu	r2,-10(fp)
  80e9d0:	108002e8 	cmpgeui	r2,r2,11
  80e9d4:	1000331e 	bne	r2,zero,80eaa4 <check_directory_header+0x114>
  {
    goto exit;
  }

  /* Read the flags, any set are an error */
  flags = read_half_word_inc(current_ptr);
  80e9d8:	e13fff17 	ldw	r4,-4(fp)
  80e9dc:	080e8280 	call	80e828 <read_half_word_inc>
  80e9e0:	e0bffd0d 	sth	r2,-12(fp)

  if (flags )
  80e9e4:	e0bffd0b 	ldhu	r2,-12(fp)
  80e9e8:	1004c03a 	cmpne	r2,r2,zero
  80e9ec:	10002d1e 	bne	r2,zero,80eaa4 <check_directory_header+0x114>
  {
    goto exit;
  }

  compression = read_half_word_inc(current_ptr);
  80e9f0:	e13fff17 	ldw	r4,-4(fp)
  80e9f4:	080e8280 	call	80e828 <read_half_word_inc>
  80e9f8:	e0bffc8d 	sth	r2,-14(fp)


  /* Skip the mod times and the CRC */
  *current_ptr += 8;
  80e9fc:	e0bfff17 	ldw	r2,-4(fp)
  80ea00:	10800017 	ldw	r2,0(r2)
  80ea04:	10c00204 	addi	r3,r2,8
  80ea08:	e0bfff17 	ldw	r2,-4(fp)
  80ea0c:	10c00015 	stw	r3,0(r2)

  /* Read the compressed and uncompressed lengths,these should be the same */
  compressed_len = read_word_inc(current_ptr);
  80ea10:	e13fff17 	ldw	r4,-4(fp)
  80ea14:	080e7900 	call	80e790 <read_word_inc>
  80ea18:	e0bffa15 	stw	r2,-24(fp)
  uncompressed_len = read_word_inc(current_ptr);
  80ea1c:	e13fff17 	ldw	r4,-4(fp)
  80ea20:	080e7900 	call	80e790 <read_word_inc>
  80ea24:	e0bff915 	stw	r2,-28(fp)

  if ((compression) || (compressed_len != uncompressed_len))
  80ea28:	e0bffc8b 	ldhu	r2,-14(fp)
  80ea2c:	1004c03a 	cmpne	r2,r2,zero
  80ea30:	10001c1e 	bne	r2,zero,80eaa4 <check_directory_header+0x114>
  80ea34:	e0fffa17 	ldw	r3,-24(fp)
  80ea38:	e0bff917 	ldw	r2,-28(fp)
  80ea3c:	1880191e 	bne	r3,r2,80eaa4 <check_directory_header+0x114>
  {
    goto exit;
  }

  /* Read the length of the name, extra fields and comment fields*/
  name_len = read_half_word_inc(current_ptr);
  80ea40:	e13fff17 	ldw	r4,-4(fp)
  80ea44:	080e8280 	call	80e828 <read_half_word_inc>
  80ea48:	e0bffc0d 	sth	r2,-16(fp)
  extra_len = read_half_word_inc(current_ptr);
  80ea4c:	e13fff17 	ldw	r4,-4(fp)
  80ea50:	080e8280 	call	80e828 <read_half_word_inc>
  80ea54:	e0bffb8d 	sth	r2,-18(fp)
  comment_len = read_half_word_inc(current_ptr);
  80ea58:	e13fff17 	ldw	r4,-4(fp)
  80ea5c:	080e8280 	call	80e828 <read_half_word_inc>
  80ea60:	e0bffb0d 	sth	r2,-20(fp)

  /* We don't care about the disk number, the file attributes or the offset */
  *current_ptr += 12;
  80ea64:	e0bfff17 	ldw	r2,-4(fp)
  80ea68:	10800017 	ldw	r2,0(r2)
  80ea6c:	10c00304 	addi	r3,r2,12
  80ea70:	e0bfff17 	ldw	r2,-4(fp)
  80ea74:	10c00015 	stw	r3,0(r2)

  *current_ptr += (name_len + extra_len + comment_len);
  80ea78:	e0bfff17 	ldw	r2,-4(fp)
  80ea7c:	11000017 	ldw	r4,0(r2)
  80ea80:	e0fffc0b 	ldhu	r3,-16(fp)
  80ea84:	e0bffb8b 	ldhu	r2,-18(fp)
  80ea88:	1887883a 	add	r3,r3,r2
  80ea8c:	e0bffb0b 	ldhu	r2,-20(fp)
  80ea90:	1885883a 	add	r2,r3,r2
  80ea94:	2087883a 	add	r3,r4,r2
  80ea98:	e0bfff17 	ldw	r2,-4(fp)
  80ea9c:	10c00015 	stw	r3,0(r2)

  ret_code = 0;
  80eaa0:	e03ffe15 	stw	zero,-8(fp)
exit:
  return ret_code;
  80eaa4:	e0bffe17 	ldw	r2,-8(fp)
}
  80eaa8:	e037883a 	mov	sp,fp
  80eaac:	dfc00117 	ldw	ra,4(sp)
  80eab0:	df000017 	ldw	fp,0(sp)
  80eab4:	dec00204 	addi	sp,sp,8
  80eab8:	f800283a 	ret

0080eabc <check_directory_table>:
* tokens are in the right place, none of the files are compressed etc.
* 
* returns 0 for success -ENOENT if not
*/
static int check_directory_table(alt_ro_zipfs_dev* dev)
{
  80eabc:	defff904 	addi	sp,sp,-28
  80eac0:	dfc00615 	stw	ra,24(sp)
  80eac4:	df000515 	stw	fp,20(sp)
  80eac8:	df000504 	addi	fp,sp,20
  80eacc:	e13ffe15 	stw	r4,-8(fp)
  int ret_code = 0;
  80ead0:	e03ffc15 	stw	zero,-16(fp)
  alt_u8* current_ptr = (alt_u8*)dev->directory;
  80ead4:	e0bffe17 	ldw	r2,-8(fp)
  80ead8:	10800b17 	ldw	r2,44(r2)
  80eadc:	e0bffd15 	stw	r2,-12(fp)
  alt_u32 token;

  while(1)
  {
    token = read_word_inc(&current_ptr);
  80eae0:	e13ffd04 	addi	r4,fp,-12
  80eae4:	080e7900 	call	80e790 <read_word_inc>
  80eae8:	e0bffb15 	stw	r2,-20(fp)

    switch(token)
  80eaec:	e0bffb17 	ldw	r2,-20(fp)
  80eaf0:	e0bfff15 	stw	r2,-4(fp)
  80eaf4:	00808074 	movhi	r2,513
  80eaf8:	1092d404 	addi	r2,r2,19280
  80eafc:	e0ffff17 	ldw	r3,-4(fp)
  80eb00:	18800526 	beq	r3,r2,80eb18 <check_directory_table+0x5c>
  80eb04:	00818174 	movhi	r2,1541
  80eb08:	1092d404 	addi	r2,r2,19280
  80eb0c:	e0ffff17 	ldw	r3,-4(fp)
  80eb10:	18800826 	beq	r3,r2,80eb34 <check_directory_table+0x78>
  80eb14:	00000906 	br	80eb3c <check_directory_table+0x80>
    {
    case ZIP_DIRECTORY_RECORD:
      {
        ret_code = check_directory_header(&current_ptr);
  80eb18:	e13ffd04 	addi	r4,fp,-12
  80eb1c:	080e9900 	call	80e990 <check_directory_header>
  80eb20:	e0bffc15 	stw	r2,-16(fp)
        if (ret_code)
  80eb24:	e0bffc17 	ldw	r2,-16(fp)
  80eb28:	1004c03a 	cmpne	r2,r2,zero
  80eb2c:	1000051e 	bne	r2,zero,80eb44 <check_directory_table+0x88>
      {
        ret_code = -ENOENT;
        goto exit;
      }
    }
  }
  80eb30:	003feb06 	br	80eae0 <check_directory_table+0x24>
        }
        break;
      }
    case ZIP_END_OF_DIRECTORY_RECORD:
      {
        ret_code = 0;
  80eb34:	e03ffc15 	stw	zero,-16(fp)
        goto exit;
  80eb38:	00000206 	br	80eb44 <check_directory_table+0x88>
      }
    default:
      {
        ret_code = -ENOENT;
  80eb3c:	00bfff84 	movi	r2,-2
  80eb40:	e0bffc15 	stw	r2,-16(fp)
      }
    }
  }

exit:
  return ret_code;
  80eb44:	e0bffc17 	ldw	r2,-16(fp)
}
  80eb48:	e037883a 	mov	sp,fp
  80eb4c:	dfc00117 	ldw	ra,4(sp)
  80eb50:	df000017 	ldw	fp,0(sp)
  80eb54:	dec00204 	addi	sp,sp,8
  80eb58:	f800283a 	ret

0080eb5c <find_directory_entry>:
* tokens are in the right place, none of the files are comrpessed etc.
* 
* returns 0 for success -ENOENT if not
*/
static int find_directory_entry(alt_ro_zipfs_dev* dev)
{
  80eb5c:	defff904 	addi	sp,sp,-28
  80eb60:	dfc00615 	stw	ra,24(sp)
  80eb64:	df000515 	stw	fp,20(sp)
  80eb68:	df000504 	addi	fp,sp,20
  80eb6c:	e13ffe15 	stw	r4,-8(fp)
  int ret_code = 0;
  80eb70:	e03ffc15 	stw	zero,-16(fp)
  alt_u32 token;
  alt_u8* current_ptr = dev->base;
  80eb74:	e0bffe17 	ldw	r2,-8(fp)
  80eb78:	10800a17 	ldw	r2,40(r2)
  80eb7c:	e0bffd15 	stw	r2,-12(fp)

  while(1)
  {
    token = read_word_inc(&current_ptr);
  80eb80:	e13ffd04 	addi	r4,fp,-12
  80eb84:	080e7900 	call	80e790 <read_word_inc>
  80eb88:	e0bffb15 	stw	r2,-20(fp)

    switch(token)
  80eb8c:	e0bffb17 	ldw	r2,-20(fp)
  80eb90:	e0bfff15 	stw	r2,-4(fp)
  80eb94:	00808074 	movhi	r2,513
  80eb98:	1092d404 	addi	r2,r2,19280
  80eb9c:	e0ffff17 	ldw	r3,-4(fp)
  80eba0:	18800c26 	beq	r3,r2,80ebd4 <find_directory_entry+0x78>
  80eba4:	008100f4 	movhi	r2,1027
  80eba8:	1092d404 	addi	r2,r2,19280
  80ebac:	e0ffff17 	ldw	r3,-4(fp)
  80ebb0:	18800126 	beq	r3,r2,80ebb8 <find_directory_entry+0x5c>
  80ebb4:	00000c06 	br	80ebe8 <find_directory_entry+0x8c>
    {
    case ZIP_FILE_RECORD:
      {
        ret_code = check_file_header(&current_ptr);
  80ebb8:	e13ffd04 	addi	r4,fp,-12
  80ebbc:	080e8780 	call	80e878 <check_file_header>
  80ebc0:	e0bffc15 	stw	r2,-16(fp)
        if(ret_code)
  80ebc4:	e0bffc17 	ldw	r2,-16(fp)
  80ebc8:	1004c03a 	cmpne	r2,r2,zero
  80ebcc:	1000081e 	bne	r2,zero,80ebf0 <find_directory_entry+0x94>
      {
        ret_code = -ENOENT;
        goto exit;
      }
    }
  }
  80ebd0:	003feb06 	br	80eb80 <find_directory_entry+0x24>
        }
        break;
      }
    case ZIP_DIRECTORY_RECORD:
      {
        dev->directory = current_ptr - 4;
  80ebd4:	e0bffd17 	ldw	r2,-12(fp)
  80ebd8:	10ffff04 	addi	r3,r2,-4
  80ebdc:	e0bffe17 	ldw	r2,-8(fp)
  80ebe0:	10c00b15 	stw	r3,44(r2)
        goto exit;
  80ebe4:	00000206 	br	80ebf0 <find_directory_entry+0x94>
      }
    default:
      {
        ret_code = -ENOENT;
  80ebe8:	00bfff84 	movi	r2,-2
  80ebec:	e0bffc15 	stw	r2,-16(fp)
        goto exit;
      }
    }
  }
exit:
  return ret_code;
  80ebf0:	e0bffc17 	ldw	r2,-16(fp)
}
  80ebf4:	e037883a 	mov	sp,fp
  80ebf8:	dfc00117 	ldw	ra,4(sp)
  80ebfc:	df000017 	ldw	fp,0(sp)
  80ec00:	dec00204 	addi	sp,sp,8
  80ec04:	f800283a 	ret

0080ec08 <find_file_entry_by_name>:
*
* returns -ENOENT if fails
*/
static int find_file_entry_by_name( alt_ro_zipfs_dev* dev, alt_fd* fd, 
                                    const alt_u8* name)
{
  80ec08:	defff504 	addi	sp,sp,-44
  80ec0c:	dfc00a15 	stw	ra,40(sp)
  80ec10:	df000915 	stw	fp,36(sp)
  80ec14:	df000904 	addi	fp,sp,36
  80ec18:	e13ffd15 	stw	r4,-12(fp)
  80ec1c:	e17ffe15 	stw	r5,-8(fp)
  80ec20:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = -ENOENT;
  80ec24:	00bfff84 	movi	r2,-2
  80ec28:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 token;
  alt_u8* current_ptr = dev->directory;
  80ec2c:	e0bffd17 	ldw	r2,-12(fp)
  80ec30:	10800b17 	ldw	r2,44(r2)
  80ec34:	e0bffa15 	stw	r2,-24(fp)
  alt_u16 name_len, extra_len, comment_len, extra_file_len;
  alt_u32 offset;

  current_ptr = dev->directory;
  80ec38:	e0bffd17 	ldw	r2,-12(fp)
  80ec3c:	10800b17 	ldw	r2,44(r2)
  80ec40:	e0bffa15 	stw	r2,-24(fp)

  while(1)
  {
    token = read_word(current_ptr);
  80ec44:	e13ffa17 	ldw	r4,-24(fp)
  80ec48:	080e71c0 	call	80e71c <read_word>
  80ec4c:	e0bffb15 	stw	r2,-20(fp)

    if(token != ZIP_DIRECTORY_RECORD)
  80ec50:	e0fffb17 	ldw	r3,-20(fp)
  80ec54:	00808074 	movhi	r2,513
  80ec58:	1092d404 	addi	r2,r2,19280
  80ec5c:	18803c1e 	bne	r3,r2,80ed50 <find_file_entry_by_name+0x148>
    {
      break;
    }

    offset = read_word(current_ptr + ZIP_DIR_OFFSET);
  80ec60:	e0bffa17 	ldw	r2,-24(fp)
  80ec64:	11000a84 	addi	r4,r2,42
  80ec68:	080e71c0 	call	80e71c <read_word>
  80ec6c:	e0bff715 	stw	r2,-36(fp)
    name_len = read_half_word(current_ptr + ZIP_DIR_NAME_LEN);
  80ec70:	e0bffa17 	ldw	r2,-24(fp)
  80ec74:	11000704 	addi	r4,r2,28
  80ec78:	080e7e00 	call	80e7e0 <read_half_word>
  80ec7c:	e0bff98d 	sth	r2,-26(fp)
    extra_len = read_half_word(current_ptr + ZIP_DIR_EXTRA_LEN);
  80ec80:	e0bffa17 	ldw	r2,-24(fp)
  80ec84:	11000784 	addi	r4,r2,30
  80ec88:	080e7e00 	call	80e7e0 <read_half_word>
  80ec8c:	e0bff90d 	sth	r2,-28(fp)
    comment_len = read_half_word(current_ptr + ZIP_DIR_COMMENT_LEN);
  80ec90:	e0bffa17 	ldw	r2,-24(fp)
  80ec94:	11000804 	addi	r4,r2,32
  80ec98:	080e7e00 	call	80e7e0 <read_half_word>
  80ec9c:	e0bff88d 	sth	r2,-30(fp)

    if ((strlen((const char *)name) == name_len) && 
  80eca0:	e13fff17 	ldw	r4,-4(fp)
  80eca4:	0803e580 	call	803e58 <strlen>
  80eca8:	1007883a 	mov	r3,r2
  80ecac:	e0bff98b 	ldhu	r2,-26(fp)
  80ecb0:	18801c1e 	bne	r3,r2,80ed24 <find_file_entry_by_name+0x11c>
  80ecb4:	e0bffa17 	ldw	r2,-24(fp)
  80ecb8:	10800b84 	addi	r2,r2,46
  80ecbc:	1009883a 	mov	r4,r2
  80ecc0:	e17fff17 	ldw	r5,-4(fp)
  80ecc4:	e1bff98b 	ldhu	r6,-26(fp)
  80ecc8:	08118780 	call	811878 <strncmp>
  80eccc:	1004c03a 	cmpne	r2,r2,zero
  80ecd0:	1000141e 	bne	r2,zero,80ed24 <find_file_entry_by_name+0x11c>
    (!strncmp((const char *)(current_ptr+ZIP_DIR_HEADER_SIZE), (const char *)name, name_len)))
    {
      extra_file_len = read_half_word(dev->base + offset + ZIP_FILE_EXTRA_LEN); 
  80ecd4:	e0bffd17 	ldw	r2,-12(fp)
  80ecd8:	10c00a17 	ldw	r3,40(r2)
  80ecdc:	e0bff717 	ldw	r2,-36(fp)
  80ece0:	1885883a 	add	r2,r3,r2
  80ece4:	11000704 	addi	r4,r2,28
  80ece8:	080e7e00 	call	80e7e0 <read_half_word>
  80ecec:	e0bff80d 	sth	r2,-32(fp)
      fd->priv = dev->base + ZIP_FILE_HEADER_SIZE 
  80ecf0:	e0bffd17 	ldw	r2,-12(fp)
  80ecf4:	10c00a17 	ldw	r3,40(r2)
  80ecf8:	e0bff717 	ldw	r2,-36(fp)
  80ecfc:	1887883a 	add	r3,r3,r2
  80ed00:	e0bff80b 	ldhu	r2,-32(fp)
  80ed04:	1887883a 	add	r3,r3,r2
  80ed08:	e0bff98b 	ldhu	r2,-26(fp)
  80ed0c:	1885883a 	add	r2,r3,r2
  80ed10:	10c00784 	addi	r3,r2,30
  80ed14:	e0bffe17 	ldw	r2,-8(fp)
  80ed18:	10c00115 	stw	r3,4(r2)
                  + offset + extra_file_len + name_len;
      ret_code = 0;
  80ed1c:	e03ffc15 	stw	zero,-16(fp)
      break;
  80ed20:	00000b06 	br	80ed50 <find_file_entry_by_name+0x148>
    }
    current_ptr += ZIP_DIR_HEADER_SIZE + name_len + extra_len + comment_len;
  80ed24:	e0fff98b 	ldhu	r3,-26(fp)
  80ed28:	e0bff90b 	ldhu	r2,-28(fp)
  80ed2c:	1887883a 	add	r3,r3,r2
  80ed30:	e0bff88b 	ldhu	r2,-30(fp)
  80ed34:	1885883a 	add	r2,r3,r2
  80ed38:	1007883a 	mov	r3,r2
  80ed3c:	e0bffa17 	ldw	r2,-24(fp)
  80ed40:	1885883a 	add	r2,r3,r2
  80ed44:	10800b84 	addi	r2,r2,46
  80ed48:	e0bffa15 	stw	r2,-24(fp)
  }
  80ed4c:	003fbd06 	br	80ec44 <find_file_entry_by_name+0x3c>

  return ret_code;
  80ed50:	e0bffc17 	ldw	r2,-16(fp)
}
  80ed54:	e037883a 	mov	sp,fp
  80ed58:	dfc00117 	ldw	ra,4(sp)
  80ed5c:	df000017 	ldw	fp,0(sp)
  80ed60:	dec00204 	addi	sp,sp,8
  80ed64:	f800283a 	ret

0080ed68 <find_file_entry>:
*
* returns -EBADF if fails
*/
static int find_file_entry( alt_ro_zipfs_dev* dev, alt_fd* fd, 
                            alt_u8** start, alt_u32* len)
{
  80ed68:	defff304 	addi	sp,sp,-52
  80ed6c:	dfc00c15 	stw	ra,48(sp)
  80ed70:	df000b15 	stw	fp,44(sp)
  80ed74:	df000b04 	addi	fp,sp,44
  80ed78:	e13ffc15 	stw	r4,-16(fp)
  80ed7c:	e17ffd15 	stw	r5,-12(fp)
  80ed80:	e1bffe15 	stw	r6,-8(fp)
  80ed84:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = -EBADF;
  80ed88:	00bffdc4 	movi	r2,-9
  80ed8c:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 token;
  alt_u8* current_ptr = (alt_u8*)dev->directory;
  80ed90:	e0bffc17 	ldw	r2,-16(fp)
  80ed94:	10800b17 	ldw	r2,44(r2)
  80ed98:	e0bff915 	stw	r2,-28(fp)
  alt_u8* end;
  alt_u16 name_len, extra_len, comment_len, extra_file_len;
  alt_u32 offset;

  current_ptr = dev->directory;
  80ed9c:	e0bffc17 	ldw	r2,-16(fp)
  80eda0:	10800b17 	ldw	r2,44(r2)
  80eda4:	e0bff915 	stw	r2,-28(fp)
  80eda8:	00000006 	br	80edac <find_file_entry+0x44>

  while(1)
  {
    token = read_word(current_ptr);
  80edac:	e13ff917 	ldw	r4,-28(fp)
  80edb0:	080e71c0 	call	80e71c <read_word>
  80edb4:	e0bffa15 	stw	r2,-24(fp)

    if(token != ZIP_DIRECTORY_RECORD)
  80edb8:	e0fffa17 	ldw	r3,-24(fp)
  80edbc:	00808074 	movhi	r2,513
  80edc0:	1092d404 	addi	r2,r2,19280
  80edc4:	1880421e 	bne	r3,r2,80eed0 <find_file_entry+0x168>
    {
      break;
    }
    
    *len = read_word(current_ptr + ZIP_DIR_UNCOMPRESSED_LEN);
  80edc8:	e0bff917 	ldw	r2,-28(fp)
  80edcc:	11000604 	addi	r4,r2,24
  80edd0:	080e71c0 	call	80e71c <read_word>
  80edd4:	1007883a 	mov	r3,r2
  80edd8:	e0bfff17 	ldw	r2,-4(fp)
  80eddc:	10c00015 	stw	r3,0(r2)
    offset = read_word(current_ptr + ZIP_DIR_OFFSET);
  80ede0:	e0bff917 	ldw	r2,-28(fp)
  80ede4:	11000a84 	addi	r4,r2,42
  80ede8:	080e71c0 	call	80e71c <read_word>
  80edec:	e0bff515 	stw	r2,-44(fp)
    name_len = read_half_word(current_ptr + ZIP_DIR_NAME_LEN);
  80edf0:	e0bff917 	ldw	r2,-28(fp)
  80edf4:	11000704 	addi	r4,r2,28
  80edf8:	080e7e00 	call	80e7e0 <read_half_word>
  80edfc:	e0bff78d 	sth	r2,-34(fp)
    extra_len = read_half_word(current_ptr + ZIP_DIR_EXTRA_LEN);
  80ee00:	e0bff917 	ldw	r2,-28(fp)
  80ee04:	11000784 	addi	r4,r2,30
  80ee08:	080e7e00 	call	80e7e0 <read_half_word>
  80ee0c:	e0bff70d 	sth	r2,-36(fp)
    comment_len = read_half_word(current_ptr + ZIP_DIR_COMMENT_LEN);
  80ee10:	e0bff917 	ldw	r2,-28(fp)
  80ee14:	11000804 	addi	r4,r2,32
  80ee18:	080e7e00 	call	80e7e0 <read_half_word>
  80ee1c:	e0bff68d 	sth	r2,-38(fp)
    current_ptr += ZIP_DIR_HEADER_SIZE + name_len + extra_len + comment_len;
  80ee20:	e0fff78b 	ldhu	r3,-34(fp)
  80ee24:	e0bff70b 	ldhu	r2,-36(fp)
  80ee28:	1887883a 	add	r3,r3,r2
  80ee2c:	e0bff68b 	ldhu	r2,-38(fp)
  80ee30:	1885883a 	add	r2,r3,r2
  80ee34:	1007883a 	mov	r3,r2
  80ee38:	e0bff917 	ldw	r2,-28(fp)
  80ee3c:	1885883a 	add	r2,r3,r2
  80ee40:	10800b84 	addi	r2,r2,46
  80ee44:	e0bff915 	stw	r2,-28(fp)

    extra_file_len = read_half_word(dev->base + offset + ZIP_FILE_EXTRA_LEN); 
  80ee48:	e0bffc17 	ldw	r2,-16(fp)
  80ee4c:	10c00a17 	ldw	r3,40(r2)
  80ee50:	e0bff517 	ldw	r2,-44(fp)
  80ee54:	1885883a 	add	r2,r3,r2
  80ee58:	11000704 	addi	r4,r2,28
  80ee5c:	080e7e00 	call	80e7e0 <read_half_word>
  80ee60:	e0bff60d 	sth	r2,-40(fp)

    *start = dev->base + ZIP_FILE_HEADER_SIZE + offset + extra_file_len + name_len;
  80ee64:	e0bffc17 	ldw	r2,-16(fp)
  80ee68:	10c00a17 	ldw	r3,40(r2)
  80ee6c:	e0bff517 	ldw	r2,-44(fp)
  80ee70:	1887883a 	add	r3,r3,r2
  80ee74:	e0bff60b 	ldhu	r2,-40(fp)
  80ee78:	1887883a 	add	r3,r3,r2
  80ee7c:	e0bff78b 	ldhu	r2,-34(fp)
  80ee80:	1885883a 	add	r2,r3,r2
  80ee84:	10c00784 	addi	r3,r2,30
  80ee88:	e0bffe17 	ldw	r2,-8(fp)
  80ee8c:	10c00015 	stw	r3,0(r2)

    /* The plus 1 is for the End of file condition */
    end = *start + *len;
  80ee90:	e0bffe17 	ldw	r2,-8(fp)
  80ee94:	10c00017 	ldw	r3,0(r2)
  80ee98:	e0bfff17 	ldw	r2,-4(fp)
  80ee9c:	10800017 	ldw	r2,0(r2)
  80eea0:	1885883a 	add	r2,r3,r2
  80eea4:	e0bff815 	stw	r2,-32(fp)
    if ((fd->priv >= *start ) &&
  80eea8:	e0bffd17 	ldw	r2,-12(fp)
  80eeac:	10c00117 	ldw	r3,4(r2)
  80eeb0:	e0bffe17 	ldw	r2,-8(fp)
  80eeb4:	10800017 	ldw	r2,0(r2)
  80eeb8:	18bfbc36 	bltu	r3,r2,80edac <find_file_entry+0x44>
  80eebc:	e0bffd17 	ldw	r2,-12(fp)
  80eec0:	10c00117 	ldw	r3,4(r2)
  80eec4:	e0bff817 	ldw	r2,-32(fp)
  80eec8:	10ffb836 	bltu	r2,r3,80edac <find_file_entry+0x44>
        (fd->priv <= end))
    {
      ret_code = 0;
  80eecc:	e03ffb15 	stw	zero,-20(fp)
      break;
    }
  }

  return ret_code;
  80eed0:	e0bffb17 	ldw	r2,-20(fp)
}
  80eed4:	e037883a 	mov	sp,fp
  80eed8:	dfc00117 	ldw	ra,4(sp)
  80eedc:	df000017 	ldw	fp,0(sp)
  80eee0:	dec00204 	addi	sp,sp,8
  80eee4:	f800283a 	ret

0080eee8 <alt_ro_zipfs_open>:
* Find the Central dircetory and then find the pointer to this file
* from that.
*
*/
int alt_ro_zipfs_open(alt_fd* fd, const char* name, int flags, int mode)
{
  80eee8:	defff804 	addi	sp,sp,-32
  80eeec:	dfc00715 	stw	ra,28(sp)
  80eef0:	df000615 	stw	fp,24(sp)
  80eef4:	df000604 	addi	fp,sp,24
  80eef8:	e13ffc15 	stw	r4,-16(fp)
  80eefc:	e17ffd15 	stw	r5,-12(fp)
  80ef00:	e1bffe15 	stw	r6,-8(fp)
  80ef04:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = -EROFS;
  80ef08:	00bff884 	movi	r2,-30
  80ef0c:	e0bffb15 	stw	r2,-20(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  80ef10:	e0bffc17 	ldw	r2,-16(fp)
  80ef14:	10800017 	ldw	r2,0(r2)
  80ef18:	e0bffa15 	stw	r2,-24(fp)

#ifdef ALT_USE_DIRECT_DRIVERS
  ALT_LINK_ERROR("Error: Read-only ZIP filesystem not supported when direct drivers are used.");
#endif

  if (flags == O_RDONLY )
  80ef1c:	e0bffe17 	ldw	r2,-8(fp)
  80ef20:	1004c03a 	cmpne	r2,r2,zero
  80ef24:	1000101e 	bne	r2,zero,80ef68 <alt_ro_zipfs_open+0x80>
  {
    if (dev->directory != NULL)
  80ef28:	e0bffa17 	ldw	r2,-24(fp)
  80ef2c:	10800b17 	ldw	r2,44(r2)
  80ef30:	1005003a 	cmpeq	r2,r2,zero
  80ef34:	10000c1e 	bne	r2,zero,80ef68 <alt_ro_zipfs_open+0x80>
    {
      ret_code = find_file_entry_by_name( dev, fd, 
  80ef38:	e0bffa17 	ldw	r2,-24(fp)
  80ef3c:	11000217 	ldw	r4,8(r2)
  80ef40:	0803e580 	call	803e58 <strlen>
  80ef44:	1007883a 	mov	r3,r2
  80ef48:	e0bffd17 	ldw	r2,-12(fp)
  80ef4c:	1885883a 	add	r2,r3,r2
  80ef50:	10800044 	addi	r2,r2,1
  80ef54:	100d883a 	mov	r6,r2
  80ef58:	e13ffa17 	ldw	r4,-24(fp)
  80ef5c:	e17ffc17 	ldw	r5,-16(fp)
  80ef60:	080ec080 	call	80ec08 <find_file_entry_by_name>
  80ef64:	e0bffb15 	stw	r2,-20(fp)
                                          (const alt_u8*)(name+strlen(dev->fs_dev.name)+1));
    }
  }

  return ret_code;
  80ef68:	e0bffb17 	ldw	r2,-20(fp)
}
  80ef6c:	e037883a 	mov	sp,fp
  80ef70:	dfc00117 	ldw	ra,4(sp)
  80ef74:	df000017 	ldw	fp,0(sp)
  80ef78:	dec00204 	addi	sp,sp,8
  80ef7c:	f800283a 	ret

0080ef80 <alt_ro_zipfs_read>:
* alt_ro_zipfs_read
*
* Read the file
*/
int alt_ro_zipfs_read(alt_fd* fd, char* ptr, int len)
{
  80ef80:	defff104 	addi	sp,sp,-60
  80ef84:	dfc00e15 	stw	ra,56(sp)
  80ef88:	df000d15 	stw	fp,52(sp)
  80ef8c:	df000d04 	addi	fp,sp,52
  80ef90:	e13ffb15 	stw	r4,-20(fp)
  80ef94:	e17ffc15 	stw	r5,-16(fp)
  80ef98:	e1bffd15 	stw	r6,-12(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  80ef9c:	e0bffb17 	ldw	r2,-20(fp)
  80efa0:	10800017 	ldw	r2,0(r2)
  80efa4:	e0bff815 	stw	r2,-32(fp)
  alt_u8 *start, *current;
  alt_u32 file_len;
  int amount_to_copy;
  alt_irq_context context;

  find_file_entry(dev, fd, &start, &file_len);
  80efa8:	e1bff904 	addi	r6,fp,-28
  80efac:	e1fffa04 	addi	r7,fp,-24
  80efb0:	e13ff817 	ldw	r4,-32(fp)
  80efb4:	e17ffb17 	ldw	r5,-20(fp)
  80efb8:	080ed680 	call	80ed68 <find_file_entry>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80efbc:	0005303a 	rdctl	r2,status
  80efc0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80efc4:	e0fff417 	ldw	r3,-48(fp)
  80efc8:	00bfff84 	movi	r2,-2
  80efcc:	1884703a 	and	r2,r3,r2
  80efd0:	1001703a 	wrctl	status,r2
  
  return context;
  80efd4:	e0bff417 	ldw	r2,-48(fp)
  *
  * We could use a Mutex or a binary semaphore, but those would have 
  * a much bigger code footprint and disable interrupts for as many 
  * instructions anyway
  */
  context = alt_irq_disable_all();
  80efd8:	e0bff515 	stw	r2,-44(fp)
  current = fd->priv;
  80efdc:	e0bffb17 	ldw	r2,-20(fp)
  80efe0:	10800117 	ldw	r2,4(r2)
  80efe4:	e0bff715 	stw	r2,-36(fp)
  amount_to_copy = MIN(len, file_len - (current - start));
  80efe8:	e13ffa17 	ldw	r4,-24(fp)
  80efec:	e0fff717 	ldw	r3,-36(fp)
  80eff0:	e0bff917 	ldw	r2,-28(fp)
  80eff4:	1885c83a 	sub	r2,r3,r2
  80eff8:	2085c83a 	sub	r2,r4,r2
  80effc:	e0fffd17 	ldw	r3,-12(fp)
  80f000:	e0ffff15 	stw	r3,-4(fp)
  80f004:	e0bffe15 	stw	r2,-8(fp)
  80f008:	e0bfff17 	ldw	r2,-4(fp)
  80f00c:	e0fffe17 	ldw	r3,-8(fp)
  80f010:	10c0022e 	bgeu	r2,r3,80f01c <alt_ro_zipfs_read+0x9c>
  80f014:	e0bfff17 	ldw	r2,-4(fp)
  80f018:	e0bffe15 	stw	r2,-8(fp)
  80f01c:	e0fffe17 	ldw	r3,-8(fp)
  80f020:	e0fff615 	stw	r3,-40(fp)
  fd->priv += amount_to_copy;
  80f024:	e0bffb17 	ldw	r2,-20(fp)
  80f028:	10c00117 	ldw	r3,4(r2)
  80f02c:	e0bff617 	ldw	r2,-40(fp)
  80f030:	1887883a 	add	r3,r3,r2
  80f034:	e0bffb17 	ldw	r2,-20(fp)
  80f038:	10c00115 	stw	r3,4(r2)
  80f03c:	e0bff517 	ldw	r2,-44(fp)
  80f040:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f044:	e0bff317 	ldw	r2,-52(fp)
  80f048:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(context);

  memcpy(ptr, current, amount_to_copy);
  80f04c:	e1bff617 	ldw	r6,-40(fp)
  80f050:	e0bffc17 	ldw	r2,-16(fp)
  80f054:	e0fff717 	ldw	r3,-36(fp)
  80f058:	1009883a 	mov	r4,r2
  80f05c:	180b883a 	mov	r5,r3
  80f060:	08090c40 	call	8090c4 <memcpy>
  
  return amount_to_copy;
  80f064:	e0bff617 	ldw	r2,-40(fp)
}
  80f068:	e037883a 	mov	sp,fp
  80f06c:	dfc00117 	ldw	ra,4(sp)
  80f070:	df000017 	ldw	fp,0(sp)
  80f074:	dec00204 	addi	sp,sp,8
  80f078:	f800283a 	ret

0080f07c <alt_ro_zipfs_seek>:
* Move around within a file
*
* returns -EROFS for a seek beyond the end of the file
*/
int alt_ro_zipfs_seek(alt_fd* fd, int ptr, int dir)
{
  80f07c:	defff604 	addi	sp,sp,-40
  80f080:	dfc00915 	stw	ra,36(sp)
  80f084:	df000815 	stw	fp,32(sp)
  80f088:	df000804 	addi	fp,sp,32
  80f08c:	e13ffc15 	stw	r4,-16(fp)
  80f090:	e17ffd15 	stw	r5,-12(fp)
  80f094:	e1bffe15 	stw	r6,-8(fp)
  int ret_code;
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  80f098:	e0bffc17 	ldw	r2,-16(fp)
  80f09c:	10800017 	ldw	r2,0(r2)
  80f0a0:	e0bff815 	stw	r2,-32(fp)
  alt_u8* start;
  alt_u32 len;

  find_file_entry(dev, fd, &start, &len);
  80f0a4:	e1bffa04 	addi	r6,fp,-24
  80f0a8:	e1fffb04 	addi	r7,fp,-20
  80f0ac:	e13ff817 	ldw	r4,-32(fp)
  80f0b0:	e17ffc17 	ldw	r5,-16(fp)
  80f0b4:	080ed680 	call	80ed68 <find_file_entry>

  switch(dir)
  80f0b8:	e0bffe17 	ldw	r2,-8(fp)
  80f0bc:	e0bfff15 	stw	r2,-4(fp)
  80f0c0:	e0ffff17 	ldw	r3,-4(fp)
  80f0c4:	18800060 	cmpeqi	r2,r3,1
  80f0c8:	1000071e 	bne	r2,zero,80f0e8 <alt_ro_zipfs_seek+0x6c>
  80f0cc:	e0ffff17 	ldw	r3,-4(fp)
  80f0d0:	188000a0 	cmpeqi	r2,r3,2
  80f0d4:	1000221e 	bne	r2,zero,80f160 <alt_ro_zipfs_seek+0xe4>
  80f0d8:	e0ffff17 	ldw	r3,-4(fp)
  80f0dc:	1805003a 	cmpeq	r2,r3,zero
  80f0e0:	1000131e 	bne	r2,zero,80f130 <alt_ro_zipfs_seek+0xb4>
  80f0e4:	00002b06 	br	80f194 <alt_ro_zipfs_seek+0x118>
  {

  case SEEK_CUR:
    {
      /* Seek from current position */
      if ((fd->priv + ptr) > (start +len))
  80f0e8:	e0bffc17 	ldw	r2,-16(fp)
  80f0ec:	10c00117 	ldw	r3,4(r2)
  80f0f0:	e0bffd17 	ldw	r2,-12(fp)
  80f0f4:	1889883a 	add	r4,r3,r2
  80f0f8:	e0fffa17 	ldw	r3,-24(fp)
  80f0fc:	e0bffb17 	ldw	r2,-20(fp)
  80f100:	1885883a 	add	r2,r3,r2
  80f104:	1100032e 	bgeu	r2,r4,80f114 <alt_ro_zipfs_seek+0x98>
      {
        ret_code = -EINVAL;
  80f108:	00bffa84 	movi	r2,-22
  80f10c:	e0bff915 	stw	r2,-28(fp)
        goto exit;
  80f110:	00002606 	br	80f1ac <alt_ro_zipfs_seek+0x130>
      }

      fd->priv += ptr;
  80f114:	e0bffc17 	ldw	r2,-16(fp)
  80f118:	10c00117 	ldw	r3,4(r2)
  80f11c:	e0bffd17 	ldw	r2,-12(fp)
  80f120:	1887883a 	add	r3,r3,r2
  80f124:	e0bffc17 	ldw	r2,-16(fp)
  80f128:	10c00115 	stw	r3,4(r2)
      break;
  80f12c:	00001906 	br	80f194 <alt_ro_zipfs_seek+0x118>
    }
  case SEEK_SET:
    {
      /* Seek from the beginning */
      if (ptr > len)
  80f130:	e0fffd17 	ldw	r3,-12(fp)
  80f134:	e0bffb17 	ldw	r2,-20(fp)
  80f138:	10c0032e 	bgeu	r2,r3,80f148 <alt_ro_zipfs_seek+0xcc>
      {
        ret_code = -EINVAL;
  80f13c:	00bffa84 	movi	r2,-22
  80f140:	e0bff915 	stw	r2,-28(fp)
        goto exit;
  80f144:	00001906 	br	80f1ac <alt_ro_zipfs_seek+0x130>
      }

      fd->priv = start + ptr;
  80f148:	e0fffa17 	ldw	r3,-24(fp)
  80f14c:	e0bffd17 	ldw	r2,-12(fp)
  80f150:	1887883a 	add	r3,r3,r2
  80f154:	e0bffc17 	ldw	r2,-16(fp)
  80f158:	10c00115 	stw	r3,4(r2)
      break;
  80f15c:	00000d06 	br	80f194 <alt_ro_zipfs_seek+0x118>
    }
  case SEEK_END:
    {
      if(ptr > 0)
  80f160:	e0bffd17 	ldw	r2,-12(fp)
  80f164:	10800050 	cmplti	r2,r2,1
  80f168:	1000031e 	bne	r2,zero,80f178 <alt_ro_zipfs_seek+0xfc>
      {
        ret_code = -EINVAL;
  80f16c:	00bffa84 	movi	r2,-22
  80f170:	e0bff915 	stw	r2,-28(fp)
        goto exit;
  80f174:	00000d06 	br	80f1ac <alt_ro_zipfs_seek+0x130>
      }

      fd->priv = start + ptr + len;
  80f178:	e0fffa17 	ldw	r3,-24(fp)
  80f17c:	e0bffd17 	ldw	r2,-12(fp)
  80f180:	1887883a 	add	r3,r3,r2
  80f184:	e0bffb17 	ldw	r2,-20(fp)
  80f188:	1887883a 	add	r3,r3,r2
  80f18c:	e0bffc17 	ldw	r2,-16(fp)
  80f190:	10c00115 	stw	r3,4(r2)
      break;
    }
  }
  ret_code = (int)(fd->priv - start);
  80f194:	e0bffc17 	ldw	r2,-16(fp)
  80f198:	10800117 	ldw	r2,4(r2)
  80f19c:	1007883a 	mov	r3,r2
  80f1a0:	e0bffa17 	ldw	r2,-24(fp)
  80f1a4:	1885c83a 	sub	r2,r3,r2
  80f1a8:	e0bff915 	stw	r2,-28(fp)

exit:
  return ret_code;
  80f1ac:	e0bff917 	ldw	r2,-28(fp)
}
  80f1b0:	e037883a 	mov	sp,fp
  80f1b4:	dfc00117 	ldw	ra,4(sp)
  80f1b8:	df000017 	ldw	fp,0(sp)
  80f1bc:	dec00204 	addi	sp,sp,8
  80f1c0:	f800283a 	ret

0080f1c4 <alt_ro_zipfs_fstat>:
* 
* Return the file status information, the only fields we fill in are
* the size and that this really is a file, not a device
*/
int alt_ro_zipfs_fstat(alt_fd* fd, struct stat* buf)
{
  80f1c4:	defff804 	addi	sp,sp,-32
  80f1c8:	dfc00715 	stw	ra,28(sp)
  80f1cc:	df000615 	stw	fp,24(sp)
  80f1d0:	df000604 	addi	fp,sp,24
  80f1d4:	e13ffe15 	stw	r4,-8(fp)
  80f1d8:	e17fff15 	stw	r5,-4(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  80f1dc:	e0bffe17 	ldw	r2,-8(fp)
  80f1e0:	10800017 	ldw	r2,0(r2)
  80f1e4:	e0bffb15 	stw	r2,-20(fp)
  alt_u8* start;
  alt_u32 len;
  int ret_code = 0;
  80f1e8:	e03ffa15 	stw	zero,-24(fp)

  find_file_entry(dev, fd, &start, &len);
  80f1ec:	e1bffc04 	addi	r6,fp,-16
  80f1f0:	e1fffd04 	addi	r7,fp,-12
  80f1f4:	e13ffb17 	ldw	r4,-20(fp)
  80f1f8:	e17ffe17 	ldw	r5,-8(fp)
  80f1fc:	080ed680 	call	80ed68 <find_file_entry>
  buf->st_mode = S_IFREG;
  80f200:	e0ffff17 	ldw	r3,-4(fp)
  80f204:	00a00014 	movui	r2,32768
  80f208:	18800115 	stw	r2,4(r3)
  buf->st_size = (off_t)len;
  80f20c:	e0bffd17 	ldw	r2,-12(fp)
  80f210:	1007883a 	mov	r3,r2
  80f214:	e0bfff17 	ldw	r2,-4(fp)
  80f218:	10c00415 	stw	r3,16(r2)

  return ret_code;
  80f21c:	e0bffa17 	ldw	r2,-24(fp)
}
  80f220:	e037883a 	mov	sp,fp
  80f224:	dfc00117 	ldw	ra,4(sp)
  80f228:	df000017 	ldw	fp,0(sp)
  80f22c:	dec00204 	addi	sp,sp,8
  80f230:	f800283a 	ret

0080f234 <alt_ro_zipfs_check_valid>:
* check that the file system is a valid zip file
* if so return 1
*
*/
int alt_ro_zipfs_check_valid(alt_ro_zipfs_dev* dev)
{
  80f234:	defffc04 	addi	sp,sp,-16
  80f238:	dfc00315 	stw	ra,12(sp)
  80f23c:	df000215 	stw	fp,8(sp)
  80f240:	df000204 	addi	fp,sp,8
  80f244:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  80f248:	e03ffe15 	stw	zero,-8(fp)
  if (find_directory_entry(dev) != -ENOENT)
  80f24c:	e13fff17 	ldw	r4,-4(fp)
  80f250:	080eb5c0 	call	80eb5c <find_directory_entry>
  80f254:	10bfffa0 	cmpeqi	r2,r2,-2
  80f258:	1000061e 	bne	r2,zero,80f274 <alt_ro_zipfs_check_valid+0x40>
  {
    if (check_directory_table(dev) != -ENOENT)
  80f25c:	e13fff17 	ldw	r4,-4(fp)
  80f260:	080eabc0 	call	80eabc <check_directory_table>
  80f264:	10bfffa0 	cmpeqi	r2,r2,-2
  80f268:	1000021e 	bne	r2,zero,80f274 <alt_ro_zipfs_check_valid+0x40>
    {
      ret_code = 1;
  80f26c:	00800044 	movi	r2,1
  80f270:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  return ret_code;
  80f274:	e0bffe17 	ldw	r2,-8(fp)
}
  80f278:	e037883a 	mov	sp,fp
  80f27c:	dfc00117 	ldw	ra,4(sp)
  80f280:	df000017 	ldw	fp,0(sp)
  80f284:	dec00204 	addi	sp,sp,8
  80f288:	f800283a 	ret

0080f28c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  80f28c:	defffc04 	addi	sp,sp,-16
  80f290:	dfc00315 	stw	ra,12(sp)
  80f294:	df000215 	stw	fp,8(sp)
  80f298:	df000204 	addi	fp,sp,8
  80f29c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  80f2a0:	e13fff17 	ldw	r4,-4(fp)
  80f2a4:	01402074 	movhi	r5,129
  80f2a8:	294f8b04 	addi	r5,r5,15916
  80f2ac:	0810b6c0 	call	810b6c <alt_find_dev>
  80f2b0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  80f2b4:	e0bffe17 	ldw	r2,-8(fp)
}
  80f2b8:	e037883a 	mov	sp,fp
  80f2bc:	dfc00117 	ldw	ra,4(sp)
  80f2c0:	df000017 	ldw	fp,0(sp)
  80f2c4:	dec00204 	addi	sp,sp,8
  80f2c8:	f800283a 	ret

0080f2cc <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  80f2cc:	defff904 	addi	sp,sp,-28
  80f2d0:	df000615 	stw	fp,24(sp)
  80f2d4:	df000604 	addi	fp,sp,24
  80f2d8:	e13ffb15 	stw	r4,-20(fp)
  80f2dc:	e17ffc15 	stw	r5,-16(fp)
  80f2e0:	e1bffd15 	stw	r6,-12(fp)
  80f2e4:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  80f2e8:	e0bffb17 	ldw	r2,-20(fp)
  80f2ec:	10c00f17 	ldw	r3,60(r2)
  80f2f0:	e0bffd17 	ldw	r2,-12(fp)
  80f2f4:	10c0042e 	bgeu	r2,r3,80f308 <alt_up_pixel_buffer_dma_draw+0x3c>
  80f2f8:	e0bffb17 	ldw	r2,-20(fp)
  80f2fc:	10c01017 	ldw	r3,64(r2)
  80f300:	e0bffe17 	ldw	r2,-8(fp)
  80f304:	10c00336 	bltu	r2,r3,80f314 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  80f308:	00bfffc4 	movi	r2,-1
  80f30c:	e0bfff15 	stw	r2,-4(fp)
  80f310:	00005106 	br	80f458 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  80f314:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80f318:	e0bffb17 	ldw	r2,-20(fp)
  80f31c:	10800d17 	ldw	r2,52(r2)
  80f320:	1004c03a 	cmpne	r2,r2,zero
  80f324:	1000151e 	bne	r2,zero,80f37c <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  80f328:	e0bffb17 	ldw	r2,-20(fp)
  80f32c:	10c01217 	ldw	r3,72(r2)
  80f330:	e0bffd17 	ldw	r2,-12(fp)
  80f334:	1886703a 	and	r3,r3,r2
  80f338:	e0bffb17 	ldw	r2,-20(fp)
  80f33c:	10801117 	ldw	r2,68(r2)
  80f340:	1886983a 	sll	r3,r3,r2
  80f344:	e0bffa17 	ldw	r2,-24(fp)
  80f348:	10c4b03a 	or	r2,r2,r3
  80f34c:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  80f350:	e0bffb17 	ldw	r2,-20(fp)
  80f354:	10c01417 	ldw	r3,80(r2)
  80f358:	e0bffe17 	ldw	r2,-8(fp)
  80f35c:	1886703a 	and	r3,r3,r2
  80f360:	e0bffb17 	ldw	r2,-20(fp)
  80f364:	10801317 	ldw	r2,76(r2)
  80f368:	1886983a 	sll	r3,r3,r2
  80f36c:	e0bffa17 	ldw	r2,-24(fp)
  80f370:	10c4b03a 	or	r2,r2,r3
  80f374:	e0bffa15 	stw	r2,-24(fp)
  80f378:	00001706 	br	80f3d8 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  80f37c:	e0bffb17 	ldw	r2,-20(fp)
  80f380:	10c01217 	ldw	r3,72(r2)
  80f384:	e0bffd17 	ldw	r2,-12(fp)
  80f388:	1886703a 	and	r3,r3,r2
  80f38c:	e0bffb17 	ldw	r2,-20(fp)
  80f390:	10801117 	ldw	r2,68(r2)
  80f394:	1886983a 	sll	r3,r3,r2
  80f398:	e0bffa17 	ldw	r2,-24(fp)
  80f39c:	10c5883a 	add	r2,r2,r3
  80f3a0:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  80f3a4:	e0bffb17 	ldw	r2,-20(fp)
  80f3a8:	10c01417 	ldw	r3,80(r2)
  80f3ac:	e0bffe17 	ldw	r2,-8(fp)
  80f3b0:	1886703a 	and	r3,r3,r2
  80f3b4:	e0bffb17 	ldw	r2,-20(fp)
  80f3b8:	10800f17 	ldw	r2,60(r2)
  80f3bc:	1887383a 	mul	r3,r3,r2
  80f3c0:	e0bffb17 	ldw	r2,-20(fp)
  80f3c4:	10801117 	ldw	r2,68(r2)
  80f3c8:	1886983a 	sll	r3,r3,r2
  80f3cc:	e0bffa17 	ldw	r2,-24(fp)
  80f3d0:	10c5883a 	add	r2,r2,r3
  80f3d4:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80f3d8:	e0bffb17 	ldw	r2,-20(fp)
  80f3dc:	10800e17 	ldw	r2,56(r2)
  80f3e0:	10800058 	cmpnei	r2,r2,1
  80f3e4:	1000081e 	bne	r2,zero,80f408 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80f3e8:	e0bffb17 	ldw	r2,-20(fp)
  80f3ec:	10800c17 	ldw	r2,48(r2)
  80f3f0:	1007883a 	mov	r3,r2
  80f3f4:	e0bffa17 	ldw	r2,-24(fp)
  80f3f8:	1885883a 	add	r2,r3,r2
  80f3fc:	e0fffc17 	ldw	r3,-16(fp)
  80f400:	10c00025 	stbio	r3,0(r2)
  80f404:	00001306 	br	80f454 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80f408:	e0bffb17 	ldw	r2,-20(fp)
  80f40c:	10800e17 	ldw	r2,56(r2)
  80f410:	10800098 	cmpnei	r2,r2,2
  80f414:	1000081e 	bne	r2,zero,80f438 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80f418:	e0bffb17 	ldw	r2,-20(fp)
  80f41c:	10800c17 	ldw	r2,48(r2)
  80f420:	1007883a 	mov	r3,r2
  80f424:	e0bffa17 	ldw	r2,-24(fp)
  80f428:	1885883a 	add	r2,r3,r2
  80f42c:	e0fffc17 	ldw	r3,-16(fp)
  80f430:	10c0002d 	sthio	r3,0(r2)
  80f434:	00000706 	br	80f454 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80f438:	e0bffb17 	ldw	r2,-20(fp)
  80f43c:	10800c17 	ldw	r2,48(r2)
  80f440:	1007883a 	mov	r3,r2
  80f444:	e0bffa17 	ldw	r2,-24(fp)
  80f448:	1885883a 	add	r2,r3,r2
  80f44c:	e0fffc17 	ldw	r3,-16(fp)
  80f450:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  80f454:	e03fff15 	stw	zero,-4(fp)
  80f458:	e0bfff17 	ldw	r2,-4(fp)
}
  80f45c:	e037883a 	mov	sp,fp
  80f460:	df000017 	ldw	fp,0(sp)
  80f464:	dec00104 	addi	sp,sp,4
  80f468:	f800283a 	ret

0080f46c <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  80f46c:	defffd04 	addi	sp,sp,-12
  80f470:	df000215 	stw	fp,8(sp)
  80f474:	df000204 	addi	fp,sp,8
  80f478:	e13ffe15 	stw	r4,-8(fp)
  80f47c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  80f480:	e0bffe17 	ldw	r2,-8(fp)
  80f484:	10800a17 	ldw	r2,40(r2)
  80f488:	10800104 	addi	r2,r2,4
  80f48c:	e0ffff17 	ldw	r3,-4(fp)
  80f490:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  80f494:	e0bffe17 	ldw	r2,-8(fp)
  80f498:	10800a17 	ldw	r2,40(r2)
  80f49c:	10800104 	addi	r2,r2,4
  80f4a0:	10800037 	ldwio	r2,0(r2)
  80f4a4:	1007883a 	mov	r3,r2
  80f4a8:	e0bffe17 	ldw	r2,-8(fp)
  80f4ac:	10c00c15 	stw	r3,48(r2)
	return 0;
  80f4b0:	0005883a 	mov	r2,zero
}
  80f4b4:	e037883a 	mov	sp,fp
  80f4b8:	df000017 	ldw	fp,0(sp)
  80f4bc:	dec00104 	addi	sp,sp,4
  80f4c0:	f800283a 	ret

0080f4c4 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  80f4c4:	defffe04 	addi	sp,sp,-8
  80f4c8:	df000115 	stw	fp,4(sp)
  80f4cc:	df000104 	addi	fp,sp,4
  80f4d0:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  80f4d4:	e0bfff17 	ldw	r2,-4(fp)
  80f4d8:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  80f4dc:	e0bfff17 	ldw	r2,-4(fp)
  80f4e0:	10800a17 	ldw	r2,40(r2)
  80f4e4:	1007883a 	mov	r3,r2
  80f4e8:	00800044 	movi	r2,1
  80f4ec:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  80f4f0:	e0bfff17 	ldw	r2,-4(fp)
  80f4f4:	10c00b17 	ldw	r3,44(r2)
  80f4f8:	e0bfff17 	ldw	r2,-4(fp)
  80f4fc:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  80f500:	e0bfff17 	ldw	r2,-4(fp)
  80f504:	11000b15 	stw	r4,44(r2)
	return 0;
  80f508:	0005883a 	mov	r2,zero
}
  80f50c:	e037883a 	mov	sp,fp
  80f510:	df000017 	ldw	fp,0(sp)
  80f514:	dec00104 	addi	sp,sp,4
  80f518:	f800283a 	ret

0080f51c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  80f51c:	defffe04 	addi	sp,sp,-8
  80f520:	df000115 	stw	fp,4(sp)
  80f524:	df000104 	addi	fp,sp,4
  80f528:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  80f52c:	e0bfff17 	ldw	r2,-4(fp)
  80f530:	10800a17 	ldw	r2,40(r2)
  80f534:	10800304 	addi	r2,r2,12
  80f538:	10800037 	ldwio	r2,0(r2)
  80f53c:	1080004c 	andi	r2,r2,1
}
  80f540:	e037883a 	mov	sp,fp
  80f544:	df000017 	ldw	fp,0(sp)
  80f548:	dec00104 	addi	sp,sp,4
  80f54c:	f800283a 	ret

0080f550 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  80f550:	defff604 	addi	sp,sp,-40
  80f554:	df000915 	stw	fp,36(sp)
  80f558:	df000904 	addi	fp,sp,36
  80f55c:	e13ff715 	stw	r4,-36(fp)
  80f560:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80f564:	e0bff817 	ldw	r2,-32(fp)
  80f568:	10800058 	cmpnei	r2,r2,1
  80f56c:	1000041e 	bne	r2,zero,80f580 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  80f570:	e0bff717 	ldw	r2,-36(fp)
  80f574:	10800c17 	ldw	r2,48(r2)
  80f578:	e0bfff15 	stw	r2,-4(fp)
  80f57c:	00000306 	br	80f58c <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  80f580:	e0bff717 	ldw	r2,-36(fp)
  80f584:	10800b17 	ldw	r2,44(r2)
  80f588:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  80f58c:	e0bff717 	ldw	r2,-36(fp)
  80f590:	10800f17 	ldw	r2,60(r2)
  80f594:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80f598:	e0bff717 	ldw	r2,-36(fp)
  80f59c:	10800e17 	ldw	r2,56(r2)
  80f5a0:	10800098 	cmpnei	r2,r2,2
  80f5a4:	1000051e 	bne	r2,zero,80f5bc <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  80f5a8:	e0fffe17 	ldw	r3,-8(fp)
  80f5ac:	e0fffe17 	ldw	r3,-8(fp)
  80f5b0:	18c5883a 	add	r2,r3,r3
  80f5b4:	e0bffe15 	stw	r2,-8(fp)
  80f5b8:	00000506 	br	80f5d0 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  80f5bc:	e13ffe17 	ldw	r4,-8(fp)
  80f5c0:	e13ffe17 	ldw	r4,-8(fp)
  80f5c4:	2105883a 	add	r2,r4,r4
  80f5c8:	1085883a 	add	r2,r2,r2
  80f5cc:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  80f5d0:	e0bff717 	ldw	r2,-36(fp)
  80f5d4:	10801017 	ldw	r2,64(r2)
  80f5d8:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80f5dc:	e0bff717 	ldw	r2,-36(fp)
  80f5e0:	10800d17 	ldw	r2,52(r2)
  80f5e4:	1004c03a 	cmpne	r2,r2,zero
  80f5e8:	10001e1e 	bne	r2,zero,80f664 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80f5ec:	e0bff717 	ldw	r2,-36(fp)
  80f5f0:	10801317 	ldw	r2,76(r2)
  80f5f4:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  80f5f8:	e03ffb15 	stw	zero,-20(fp)
  80f5fc:	00001506 	br	80f654 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  80f600:	e03ffc15 	stw	zero,-16(fp)
  80f604:	00000706 	br	80f624 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  80f608:	e0ffff17 	ldw	r3,-4(fp)
  80f60c:	e0bffc17 	ldw	r2,-16(fp)
  80f610:	1885883a 	add	r2,r3,r2
  80f614:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  80f618:	e0bffc17 	ldw	r2,-16(fp)
  80f61c:	10800104 	addi	r2,r2,4
  80f620:	e0bffc15 	stw	r2,-16(fp)
  80f624:	e0fffc17 	ldw	r3,-16(fp)
  80f628:	e13ffe17 	ldw	r4,-8(fp)
  80f62c:	193ff636 	bltu	r3,r4,80f608 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  80f630:	e0fffa17 	ldw	r3,-24(fp)
  80f634:	00800044 	movi	r2,1
  80f638:	10c4983a 	sll	r2,r2,r3
  80f63c:	e0ffff17 	ldw	r3,-4(fp)
  80f640:	1887883a 	add	r3,r3,r2
  80f644:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  80f648:	e13ffb17 	ldw	r4,-20(fp)
  80f64c:	21000044 	addi	r4,r4,1
  80f650:	e13ffb15 	stw	r4,-20(fp)
  80f654:	e0bffb17 	ldw	r2,-20(fp)
  80f658:	e0fffd17 	ldw	r3,-12(fp)
  80f65c:	10ffe836 	bltu	r2,r3,80f600 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  80f660:	00001006 	br	80f6a4 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  80f664:	e13ffd17 	ldw	r4,-12(fp)
  80f668:	e0bffe17 	ldw	r2,-8(fp)
  80f66c:	2089383a 	mul	r4,r4,r2
  80f670:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  80f674:	e03ff915 	stw	zero,-28(fp)
  80f678:	00000706 	br	80f698 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  80f67c:	e0ffff17 	ldw	r3,-4(fp)
  80f680:	e0bff917 	ldw	r2,-28(fp)
  80f684:	1885883a 	add	r2,r3,r2
  80f688:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  80f68c:	e0fff917 	ldw	r3,-28(fp)
  80f690:	18c00104 	addi	r3,r3,4
  80f694:	e0fff915 	stw	r3,-28(fp)
  80f698:	e0bff917 	ldw	r2,-28(fp)
  80f69c:	e13ffd17 	ldw	r4,-12(fp)
  80f6a0:	113ff636 	bltu	r2,r4,80f67c <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  80f6a4:	e037883a 	mov	sp,fp
  80f6a8:	df000017 	ldw	fp,0(sp)
  80f6ac:	dec00104 	addi	sp,sp,4
  80f6b0:	f800283a 	ret

0080f6b4 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  80f6b4:	deffed04 	addi	sp,sp,-76
  80f6b8:	df001215 	stw	fp,72(sp)
  80f6bc:	df001204 	addi	fp,sp,72
  80f6c0:	e13fee15 	stw	r4,-72(fp)
  80f6c4:	e17fef15 	stw	r5,-68(fp)
  80f6c8:	e1bff015 	stw	r6,-64(fp)
  80f6cc:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80f6d0:	e0bfee17 	ldw	r2,-72(fp)
  80f6d4:	10800f17 	ldw	r2,60(r2)
  80f6d8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80f6dc:	e0bfee17 	ldw	r2,-72(fp)
  80f6e0:	10801017 	ldw	r2,64(r2)
  80f6e4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  80f6e8:	e0bfef17 	ldw	r2,-68(fp)
  80f6ec:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  80f6f0:	e0fff117 	ldw	r3,-60(fp)
  80f6f4:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  80f6f8:	e13ff017 	ldw	r4,-64(fp)
  80f6fc:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  80f700:	e0800117 	ldw	r2,4(fp)
  80f704:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  80f708:	e0c00217 	ldw	r3,8(fp)
  80f70c:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  80f710:	e13ffa17 	ldw	r4,-24(fp)
  80f714:	e0bffb17 	ldw	r2,-20(fp)
  80f718:	2080062e 	bgeu	r4,r2,80f734 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  80f71c:	e0fffb17 	ldw	r3,-20(fp)
  80f720:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  80f724:	e13ffa17 	ldw	r4,-24(fp)
  80f728:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  80f72c:	e0bffc17 	ldw	r2,-16(fp)
  80f730:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  80f734:	e0fff817 	ldw	r3,-32(fp)
  80f738:	e13ff917 	ldw	r4,-28(fp)
  80f73c:	1900062e 	bgeu	r3,r4,80f758 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  80f740:	e0bff917 	ldw	r2,-28(fp)
  80f744:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  80f748:	e0fff817 	ldw	r3,-32(fp)
  80f74c:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  80f750:	e13ffc17 	ldw	r4,-16(fp)
  80f754:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  80f758:	e0bffb17 	ldw	r2,-20(fp)
  80f75c:	e0fffe17 	ldw	r3,-8(fp)
  80f760:	10c10d2e 	bgeu	r2,r3,80fb98 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  80f764:	e13ff917 	ldw	r4,-28(fp)
  80f768:	e0bffd17 	ldw	r2,-12(fp)
  80f76c:	20800136 	bltu	r4,r2,80f774 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  80f770:	00010906 	br	80fb98 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80f774:	e0fffa17 	ldw	r3,-24(fp)
  80f778:	e13ffe17 	ldw	r4,-8(fp)
  80f77c:	19000336 	bltu	r3,r4,80f78c <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  80f780:	e0bffe17 	ldw	r2,-8(fp)
  80f784:	10bfffc4 	addi	r2,r2,-1
  80f788:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  80f78c:	e0fff817 	ldw	r3,-32(fp)
  80f790:	e13ffd17 	ldw	r4,-12(fp)
  80f794:	19000336 	bltu	r3,r4,80f7a4 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  80f798:	e0bffd17 	ldw	r2,-12(fp)
  80f79c:	10bfffc4 	addi	r2,r2,-1
  80f7a0:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80f7a4:	e0800317 	ldw	r2,12(fp)
  80f7a8:	10800058 	cmpnei	r2,r2,1
  80f7ac:	1000041e 	bne	r2,zero,80f7c0 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  80f7b0:	e0bfee17 	ldw	r2,-72(fp)
  80f7b4:	10800c17 	ldw	r2,48(r2)
  80f7b8:	e0bfff15 	stw	r2,-4(fp)
  80f7bc:	00000306 	br	80f7cc <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  80f7c0:	e0bfee17 	ldw	r2,-72(fp)
  80f7c4:	10800b17 	ldw	r2,44(r2)
  80f7c8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80f7cc:	e0bfee17 	ldw	r2,-72(fp)
  80f7d0:	10800d17 	ldw	r2,52(r2)
  80f7d4:	1004c03a 	cmpne	r2,r2,zero
  80f7d8:	1000721e 	bne	r2,zero,80f9a4 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80f7dc:	e0bfee17 	ldw	r2,-72(fp)
  80f7e0:	10801317 	ldw	r2,76(r2)
  80f7e4:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  80f7e8:	e0bff417 	ldw	r2,-48(fp)
  80f7ec:	e0fff917 	ldw	r3,-28(fp)
  80f7f0:	1884983a 	sll	r2,r3,r2
  80f7f4:	e13fff17 	ldw	r4,-4(fp)
  80f7f8:	2089883a 	add	r4,r4,r2
  80f7fc:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80f800:	e0bfee17 	ldw	r2,-72(fp)
  80f804:	10800e17 	ldw	r2,56(r2)
  80f808:	10800058 	cmpnei	r2,r2,1
  80f80c:	10001e1e 	bne	r2,zero,80f888 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  80f810:	e0bff917 	ldw	r2,-28(fp)
  80f814:	e0bff515 	stw	r2,-44(fp)
  80f818:	00001706 	br	80f878 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  80f81c:	e0fffb17 	ldw	r3,-20(fp)
  80f820:	e0fff615 	stw	r3,-40(fp)
  80f824:	00000806 	br	80f848 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  80f828:	e0ffff17 	ldw	r3,-4(fp)
  80f82c:	e0bff617 	ldw	r2,-40(fp)
  80f830:	1885883a 	add	r2,r3,r2
  80f834:	e0fff717 	ldw	r3,-36(fp)
  80f838:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80f83c:	e13ff617 	ldw	r4,-40(fp)
  80f840:	21000044 	addi	r4,r4,1
  80f844:	e13ff615 	stw	r4,-40(fp)
  80f848:	e0bffa17 	ldw	r2,-24(fp)
  80f84c:	e0fff617 	ldw	r3,-40(fp)
  80f850:	10fff52e 	bgeu	r2,r3,80f828 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  80f854:	e0fff417 	ldw	r3,-48(fp)
  80f858:	00800044 	movi	r2,1
  80f85c:	10c4983a 	sll	r2,r2,r3
  80f860:	e13fff17 	ldw	r4,-4(fp)
  80f864:	2089883a 	add	r4,r4,r2
  80f868:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80f86c:	e0bff517 	ldw	r2,-44(fp)
  80f870:	10800044 	addi	r2,r2,1
  80f874:	e0bff515 	stw	r2,-44(fp)
  80f878:	e0fff817 	ldw	r3,-32(fp)
  80f87c:	e13ff517 	ldw	r4,-44(fp)
  80f880:	193fe62e 	bgeu	r3,r4,80f81c <alt_up_pixel_buffer_dma_draw_box+0x168>
  80f884:	0000c406 	br	80fb98 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80f888:	e0bfee17 	ldw	r2,-72(fp)
  80f88c:	10800e17 	ldw	r2,56(r2)
  80f890:	10800098 	cmpnei	r2,r2,2
  80f894:	1000211e 	bne	r2,zero,80f91c <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  80f898:	e0bff917 	ldw	r2,-28(fp)
  80f89c:	e0bff515 	stw	r2,-44(fp)
  80f8a0:	00001a06 	br	80f90c <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  80f8a4:	e0fffb17 	ldw	r3,-20(fp)
  80f8a8:	e0fff615 	stw	r3,-40(fp)
  80f8ac:	00000b06 	br	80f8dc <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80f8b0:	e13ff617 	ldw	r4,-40(fp)
  80f8b4:	e13ff617 	ldw	r4,-40(fp)
  80f8b8:	2105883a 	add	r2,r4,r4
  80f8bc:	1007883a 	mov	r3,r2
  80f8c0:	e0bfff17 	ldw	r2,-4(fp)
  80f8c4:	1885883a 	add	r2,r3,r2
  80f8c8:	e0fff717 	ldw	r3,-36(fp)
  80f8cc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80f8d0:	e0bff617 	ldw	r2,-40(fp)
  80f8d4:	10800044 	addi	r2,r2,1
  80f8d8:	e0bff615 	stw	r2,-40(fp)
  80f8dc:	e0fffa17 	ldw	r3,-24(fp)
  80f8e0:	e13ff617 	ldw	r4,-40(fp)
  80f8e4:	193ff22e 	bgeu	r3,r4,80f8b0 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  80f8e8:	e0fff417 	ldw	r3,-48(fp)
  80f8ec:	00800044 	movi	r2,1
  80f8f0:	10c4983a 	sll	r2,r2,r3
  80f8f4:	e0ffff17 	ldw	r3,-4(fp)
  80f8f8:	1887883a 	add	r3,r3,r2
  80f8fc:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80f900:	e13ff517 	ldw	r4,-44(fp)
  80f904:	21000044 	addi	r4,r4,1
  80f908:	e13ff515 	stw	r4,-44(fp)
  80f90c:	e0bff817 	ldw	r2,-32(fp)
  80f910:	e0fff517 	ldw	r3,-44(fp)
  80f914:	10ffe32e 	bgeu	r2,r3,80f8a4 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  80f918:	00009f06 	br	80fb98 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80f91c:	e13ff917 	ldw	r4,-28(fp)
  80f920:	e13ff515 	stw	r4,-44(fp)
  80f924:	00001b06 	br	80f994 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  80f928:	e0bffb17 	ldw	r2,-20(fp)
  80f92c:	e0bff615 	stw	r2,-40(fp)
  80f930:	00000c06 	br	80f964 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80f934:	e0fff617 	ldw	r3,-40(fp)
  80f938:	e0fff617 	ldw	r3,-40(fp)
  80f93c:	18c5883a 	add	r2,r3,r3
  80f940:	1085883a 	add	r2,r2,r2
  80f944:	1007883a 	mov	r3,r2
  80f948:	e0bfff17 	ldw	r2,-4(fp)
  80f94c:	1885883a 	add	r2,r3,r2
  80f950:	e0fff717 	ldw	r3,-36(fp)
  80f954:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80f958:	e13ff617 	ldw	r4,-40(fp)
  80f95c:	21000044 	addi	r4,r4,1
  80f960:	e13ff615 	stw	r4,-40(fp)
  80f964:	e0bffa17 	ldw	r2,-24(fp)
  80f968:	e0fff617 	ldw	r3,-40(fp)
  80f96c:	10fff12e 	bgeu	r2,r3,80f934 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  80f970:	e0fff417 	ldw	r3,-48(fp)
  80f974:	00800044 	movi	r2,1
  80f978:	10c4983a 	sll	r2,r2,r3
  80f97c:	e13fff17 	ldw	r4,-4(fp)
  80f980:	2089883a 	add	r4,r4,r2
  80f984:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80f988:	e0bff517 	ldw	r2,-44(fp)
  80f98c:	10800044 	addi	r2,r2,1
  80f990:	e0bff515 	stw	r2,-44(fp)
  80f994:	e0fff817 	ldw	r3,-32(fp)
  80f998:	e13ff517 	ldw	r4,-44(fp)
  80f99c:	193fe22e 	bgeu	r3,r4,80f928 <alt_up_pixel_buffer_dma_draw_box+0x274>
  80f9a0:	00007d06 	br	80fb98 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80f9a4:	e0bfee17 	ldw	r2,-72(fp)
  80f9a8:	10800e17 	ldw	r2,56(r2)
  80f9ac:	10800058 	cmpnei	r2,r2,1
  80f9b0:	1000221e 	bne	r2,zero,80fa3c <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  80f9b4:	e0fff917 	ldw	r3,-28(fp)
  80f9b8:	e13ffe17 	ldw	r4,-8(fp)
  80f9bc:	1905383a 	mul	r2,r3,r4
  80f9c0:	e0ffff17 	ldw	r3,-4(fp)
  80f9c4:	1887883a 	add	r3,r3,r2
  80f9c8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80f9cc:	e13ff917 	ldw	r4,-28(fp)
  80f9d0:	e13ff215 	stw	r4,-56(fp)
  80f9d4:	00001506 	br	80fa2c <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  80f9d8:	e0bffb17 	ldw	r2,-20(fp)
  80f9dc:	e0bff315 	stw	r2,-52(fp)
  80f9e0:	00000806 	br	80fa04 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  80f9e4:	e0ffff17 	ldw	r3,-4(fp)
  80f9e8:	e0bff317 	ldw	r2,-52(fp)
  80f9ec:	1885883a 	add	r2,r3,r2
  80f9f0:	e0fff717 	ldw	r3,-36(fp)
  80f9f4:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80f9f8:	e0fff317 	ldw	r3,-52(fp)
  80f9fc:	18c00044 	addi	r3,r3,1
  80fa00:	e0fff315 	stw	r3,-52(fp)
  80fa04:	e13ffa17 	ldw	r4,-24(fp)
  80fa08:	e0bff317 	ldw	r2,-52(fp)
  80fa0c:	20bff52e 	bgeu	r4,r2,80f9e4 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  80fa10:	e0ffff17 	ldw	r3,-4(fp)
  80fa14:	e13ffe17 	ldw	r4,-8(fp)
  80fa18:	1907883a 	add	r3,r3,r4
  80fa1c:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80fa20:	e0bff217 	ldw	r2,-56(fp)
  80fa24:	10800044 	addi	r2,r2,1
  80fa28:	e0bff215 	stw	r2,-56(fp)
  80fa2c:	e0fff817 	ldw	r3,-32(fp)
  80fa30:	e13ff217 	ldw	r4,-56(fp)
  80fa34:	193fe82e 	bgeu	r3,r4,80f9d8 <alt_up_pixel_buffer_dma_draw_box+0x324>
  80fa38:	00005706 	br	80fb98 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80fa3c:	e0bfee17 	ldw	r2,-72(fp)
  80fa40:	10800e17 	ldw	r2,56(r2)
  80fa44:	10800098 	cmpnei	r2,r2,2
  80fa48:	1000291e 	bne	r2,zero,80faf0 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  80fa4c:	e0fffe17 	ldw	r3,-8(fp)
  80fa50:	e0fffe17 	ldw	r3,-8(fp)
  80fa54:	18c5883a 	add	r2,r3,r3
  80fa58:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80fa5c:	e13ff917 	ldw	r4,-28(fp)
  80fa60:	e0fffe17 	ldw	r3,-8(fp)
  80fa64:	20c5383a 	mul	r2,r4,r3
  80fa68:	e13fff17 	ldw	r4,-4(fp)
  80fa6c:	2089883a 	add	r4,r4,r2
  80fa70:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80fa74:	e0bff917 	ldw	r2,-28(fp)
  80fa78:	e0bff215 	stw	r2,-56(fp)
  80fa7c:	00001806 	br	80fae0 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  80fa80:	e0fffb17 	ldw	r3,-20(fp)
  80fa84:	e0fff315 	stw	r3,-52(fp)
  80fa88:	00000b06 	br	80fab8 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80fa8c:	e13ff317 	ldw	r4,-52(fp)
  80fa90:	e13ff317 	ldw	r4,-52(fp)
  80fa94:	2105883a 	add	r2,r4,r4
  80fa98:	1007883a 	mov	r3,r2
  80fa9c:	e0bfff17 	ldw	r2,-4(fp)
  80faa0:	1885883a 	add	r2,r3,r2
  80faa4:	e0fff717 	ldw	r3,-36(fp)
  80faa8:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80faac:	e0bff317 	ldw	r2,-52(fp)
  80fab0:	10800044 	addi	r2,r2,1
  80fab4:	e0bff315 	stw	r2,-52(fp)
  80fab8:	e0fffa17 	ldw	r3,-24(fp)
  80fabc:	e13ff317 	ldw	r4,-52(fp)
  80fac0:	193ff22e 	bgeu	r3,r4,80fa8c <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  80fac4:	e0bfff17 	ldw	r2,-4(fp)
  80fac8:	e0fffe17 	ldw	r3,-8(fp)
  80facc:	10c5883a 	add	r2,r2,r3
  80fad0:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80fad4:	e13ff217 	ldw	r4,-56(fp)
  80fad8:	21000044 	addi	r4,r4,1
  80fadc:	e13ff215 	stw	r4,-56(fp)
  80fae0:	e0bff817 	ldw	r2,-32(fp)
  80fae4:	e0fff217 	ldw	r3,-56(fp)
  80fae8:	10ffe52e 	bgeu	r2,r3,80fa80 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  80faec:	00002a06 	br	80fb98 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80faf0:	e13ffe17 	ldw	r4,-8(fp)
  80faf4:	e13ffe17 	ldw	r4,-8(fp)
  80faf8:	2105883a 	add	r2,r4,r4
  80fafc:	1085883a 	add	r2,r2,r2
  80fb00:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80fb04:	e0fff917 	ldw	r3,-28(fp)
  80fb08:	e13ffe17 	ldw	r4,-8(fp)
  80fb0c:	1905383a 	mul	r2,r3,r4
  80fb10:	e0ffff17 	ldw	r3,-4(fp)
  80fb14:	1887883a 	add	r3,r3,r2
  80fb18:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80fb1c:	e13ff917 	ldw	r4,-28(fp)
  80fb20:	e13ff215 	stw	r4,-56(fp)
  80fb24:	00001906 	br	80fb8c <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  80fb28:	e0bffb17 	ldw	r2,-20(fp)
  80fb2c:	e0bff315 	stw	r2,-52(fp)
  80fb30:	00000c06 	br	80fb64 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80fb34:	e0fff317 	ldw	r3,-52(fp)
  80fb38:	e0fff317 	ldw	r3,-52(fp)
  80fb3c:	18c5883a 	add	r2,r3,r3
  80fb40:	1085883a 	add	r2,r2,r2
  80fb44:	1007883a 	mov	r3,r2
  80fb48:	e0bfff17 	ldw	r2,-4(fp)
  80fb4c:	1885883a 	add	r2,r3,r2
  80fb50:	e0fff717 	ldw	r3,-36(fp)
  80fb54:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80fb58:	e13ff317 	ldw	r4,-52(fp)
  80fb5c:	21000044 	addi	r4,r4,1
  80fb60:	e13ff315 	stw	r4,-52(fp)
  80fb64:	e0bffa17 	ldw	r2,-24(fp)
  80fb68:	e0fff317 	ldw	r3,-52(fp)
  80fb6c:	10fff12e 	bgeu	r2,r3,80fb34 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  80fb70:	e13fff17 	ldw	r4,-4(fp)
  80fb74:	e0bffe17 	ldw	r2,-8(fp)
  80fb78:	2089883a 	add	r4,r4,r2
  80fb7c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80fb80:	e0fff217 	ldw	r3,-56(fp)
  80fb84:	18c00044 	addi	r3,r3,1
  80fb88:	e0fff215 	stw	r3,-56(fp)
  80fb8c:	e13ff817 	ldw	r4,-32(fp)
  80fb90:	e0bff217 	ldw	r2,-56(fp)
  80fb94:	20bfe42e 	bgeu	r4,r2,80fb28 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  80fb98:	e037883a 	mov	sp,fp
  80fb9c:	df000017 	ldw	fp,0(sp)
  80fba0:	dec00104 	addi	sp,sp,4
  80fba4:	f800283a 	ret

0080fba8 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  80fba8:	defff204 	addi	sp,sp,-56
  80fbac:	df000d15 	stw	fp,52(sp)
  80fbb0:	df000d04 	addi	fp,sp,52
  80fbb4:	e13ff315 	stw	r4,-52(fp)
  80fbb8:	e17ff415 	stw	r5,-48(fp)
  80fbbc:	e1bff515 	stw	r6,-44(fp)
  80fbc0:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80fbc4:	e0bff317 	ldw	r2,-52(fp)
  80fbc8:	10800f17 	ldw	r2,60(r2)
  80fbcc:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80fbd0:	e0bff317 	ldw	r2,-52(fp)
  80fbd4:	10801017 	ldw	r2,64(r2)
  80fbd8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  80fbdc:	e0bff417 	ldw	r2,-48(fp)
  80fbe0:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  80fbe4:	e0fff517 	ldw	r3,-44(fp)
  80fbe8:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  80fbec:	e13ff617 	ldw	r4,-40(fp)
  80fbf0:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  80fbf4:	e0800117 	ldw	r2,4(fp)
  80fbf8:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  80fbfc:	e0fffb17 	ldw	r3,-20(fp)
  80fc00:	e13ffc17 	ldw	r4,-16(fp)
  80fc04:	1900042e 	bgeu	r3,r4,80fc18 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  80fc08:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  80fc0c:	e0fffb17 	ldw	r3,-20(fp)
  80fc10:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  80fc14:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  80fc18:	e13ffc17 	ldw	r4,-16(fp)
  80fc1c:	e0bffe17 	ldw	r2,-8(fp)
  80fc20:	2080b12e 	bgeu	r4,r2,80fee8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
  80fc24:	e0fffa17 	ldw	r3,-24(fp)
  80fc28:	e13ffd17 	ldw	r4,-12(fp)
  80fc2c:	19000136 	bltu	r3,r4,80fc34 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  80fc30:	0000ad06 	br	80fee8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80fc34:	e0bffb17 	ldw	r2,-20(fp)
  80fc38:	e0fffe17 	ldw	r3,-8(fp)
  80fc3c:	10c00336 	bltu	r2,r3,80fc4c <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  80fc40:	e13ffe17 	ldw	r4,-8(fp)
  80fc44:	213fffc4 	addi	r4,r4,-1
  80fc48:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80fc4c:	e0800217 	ldw	r2,8(fp)
  80fc50:	10800058 	cmpnei	r2,r2,1
  80fc54:	1000041e 	bne	r2,zero,80fc68 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  80fc58:	e0bff317 	ldw	r2,-52(fp)
  80fc5c:	10800c17 	ldw	r2,48(r2)
  80fc60:	e0bfff15 	stw	r2,-4(fp)
  80fc64:	00000306 	br	80fc74 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  80fc68:	e0bff317 	ldw	r2,-52(fp)
  80fc6c:	10800b17 	ldw	r2,44(r2)
  80fc70:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80fc74:	e0bff317 	ldw	r2,-52(fp)
  80fc78:	10800d17 	ldw	r2,52(r2)
  80fc7c:	1004c03a 	cmpne	r2,r2,zero
  80fc80:	1000431e 	bne	r2,zero,80fd90 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80fc84:	e0bff317 	ldw	r2,-52(fp)
  80fc88:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  80fc8c:	e0fffa17 	ldw	r3,-24(fp)
  80fc90:	1884983a 	sll	r2,r3,r2
  80fc94:	e13fff17 	ldw	r4,-4(fp)
  80fc98:	2089883a 	add	r4,r4,r2
  80fc9c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80fca0:	e0bff317 	ldw	r2,-52(fp)
  80fca4:	10800e17 	ldw	r2,56(r2)
  80fca8:	10800058 	cmpnei	r2,r2,1
  80fcac:	10000f1e 	bne	r2,zero,80fcec <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  80fcb0:	e0bffc17 	ldw	r2,-16(fp)
  80fcb4:	e0bff815 	stw	r2,-32(fp)
  80fcb8:	00000806 	br	80fcdc <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  80fcbc:	e0ffff17 	ldw	r3,-4(fp)
  80fcc0:	e0bff817 	ldw	r2,-32(fp)
  80fcc4:	1885883a 	add	r2,r3,r2
  80fcc8:	e0fff917 	ldw	r3,-28(fp)
  80fccc:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80fcd0:	e0fff817 	ldw	r3,-32(fp)
  80fcd4:	18c00044 	addi	r3,r3,1
  80fcd8:	e0fff815 	stw	r3,-32(fp)
  80fcdc:	e13ffb17 	ldw	r4,-20(fp)
  80fce0:	e0bff817 	ldw	r2,-32(fp)
  80fce4:	20bff52e 	bgeu	r4,r2,80fcbc <alt_up_pixel_buffer_dma_draw_hline+0x114>
  80fce8:	00007f06 	br	80fee8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80fcec:	e0bff317 	ldw	r2,-52(fp)
  80fcf0:	10800e17 	ldw	r2,56(r2)
  80fcf4:	10800098 	cmpnei	r2,r2,2
  80fcf8:	1000121e 	bne	r2,zero,80fd44 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  80fcfc:	e0fffc17 	ldw	r3,-16(fp)
  80fd00:	e0fff815 	stw	r3,-32(fp)
  80fd04:	00000b06 	br	80fd34 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80fd08:	e13ff817 	ldw	r4,-32(fp)
  80fd0c:	e13ff817 	ldw	r4,-32(fp)
  80fd10:	2105883a 	add	r2,r4,r4
  80fd14:	1007883a 	mov	r3,r2
  80fd18:	e0bfff17 	ldw	r2,-4(fp)
  80fd1c:	1885883a 	add	r2,r3,r2
  80fd20:	e0fff917 	ldw	r3,-28(fp)
  80fd24:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80fd28:	e0bff817 	ldw	r2,-32(fp)
  80fd2c:	10800044 	addi	r2,r2,1
  80fd30:	e0bff815 	stw	r2,-32(fp)
  80fd34:	e0fffb17 	ldw	r3,-20(fp)
  80fd38:	e13ff817 	ldw	r4,-32(fp)
  80fd3c:	193ff22e 	bgeu	r3,r4,80fd08 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  80fd40:	00006906 	br	80fee8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80fd44:	e0bffc17 	ldw	r2,-16(fp)
  80fd48:	e0bff815 	stw	r2,-32(fp)
  80fd4c:	00000c06 	br	80fd80 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80fd50:	e0fff817 	ldw	r3,-32(fp)
  80fd54:	e0fff817 	ldw	r3,-32(fp)
  80fd58:	18c5883a 	add	r2,r3,r3
  80fd5c:	1085883a 	add	r2,r2,r2
  80fd60:	1007883a 	mov	r3,r2
  80fd64:	e0bfff17 	ldw	r2,-4(fp)
  80fd68:	1885883a 	add	r2,r3,r2
  80fd6c:	e0fff917 	ldw	r3,-28(fp)
  80fd70:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80fd74:	e13ff817 	ldw	r4,-32(fp)
  80fd78:	21000044 	addi	r4,r4,1
  80fd7c:	e13ff815 	stw	r4,-32(fp)
  80fd80:	e0bffb17 	ldw	r2,-20(fp)
  80fd84:	e0fff817 	ldw	r3,-32(fp)
  80fd88:	10fff12e 	bgeu	r2,r3,80fd50 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  80fd8c:	00005606 	br	80fee8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80fd90:	e0bff317 	ldw	r2,-52(fp)
  80fd94:	10800e17 	ldw	r2,56(r2)
  80fd98:	10800058 	cmpnei	r2,r2,1
  80fd9c:	1000151e 	bne	r2,zero,80fdf4 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  80fda0:	e13ffa17 	ldw	r4,-24(fp)
  80fda4:	e0fffe17 	ldw	r3,-8(fp)
  80fda8:	20c5383a 	mul	r2,r4,r3
  80fdac:	e13fff17 	ldw	r4,-4(fp)
  80fdb0:	2089883a 	add	r4,r4,r2
  80fdb4:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80fdb8:	e0bffc17 	ldw	r2,-16(fp)
  80fdbc:	e0bff715 	stw	r2,-36(fp)
  80fdc0:	00000806 	br	80fde4 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  80fdc4:	e0ffff17 	ldw	r3,-4(fp)
  80fdc8:	e0bff717 	ldw	r2,-36(fp)
  80fdcc:	1885883a 	add	r2,r3,r2
  80fdd0:	e0fff917 	ldw	r3,-28(fp)
  80fdd4:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80fdd8:	e0fff717 	ldw	r3,-36(fp)
  80fddc:	18c00044 	addi	r3,r3,1
  80fde0:	e0fff715 	stw	r3,-36(fp)
  80fde4:	e13ffb17 	ldw	r4,-20(fp)
  80fde8:	e0bff717 	ldw	r2,-36(fp)
  80fdec:	20bff52e 	bgeu	r4,r2,80fdc4 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  80fdf0:	00003d06 	br	80fee8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80fdf4:	e0bff317 	ldw	r2,-52(fp)
  80fdf8:	10800e17 	ldw	r2,56(r2)
  80fdfc:	10800098 	cmpnei	r2,r2,2
  80fe00:	10001c1e 	bne	r2,zero,80fe74 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  80fe04:	e0fffe17 	ldw	r3,-8(fp)
  80fe08:	e0fffe17 	ldw	r3,-8(fp)
  80fe0c:	18c5883a 	add	r2,r3,r3
  80fe10:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  80fe14:	e13ffa17 	ldw	r4,-24(fp)
  80fe18:	e0fffe17 	ldw	r3,-8(fp)
  80fe1c:	20c5383a 	mul	r2,r4,r3
  80fe20:	e13fff17 	ldw	r4,-4(fp)
  80fe24:	2089883a 	add	r4,r4,r2
  80fe28:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80fe2c:	e0bffc17 	ldw	r2,-16(fp)
  80fe30:	e0bff715 	stw	r2,-36(fp)
  80fe34:	00000b06 	br	80fe64 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80fe38:	e0fff717 	ldw	r3,-36(fp)
  80fe3c:	e0fff717 	ldw	r3,-36(fp)
  80fe40:	18c5883a 	add	r2,r3,r3
  80fe44:	1007883a 	mov	r3,r2
  80fe48:	e0bfff17 	ldw	r2,-4(fp)
  80fe4c:	1885883a 	add	r2,r3,r2
  80fe50:	e0fff917 	ldw	r3,-28(fp)
  80fe54:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80fe58:	e13ff717 	ldw	r4,-36(fp)
  80fe5c:	21000044 	addi	r4,r4,1
  80fe60:	e13ff715 	stw	r4,-36(fp)
  80fe64:	e0bffb17 	ldw	r2,-20(fp)
  80fe68:	e0fff717 	ldw	r3,-36(fp)
  80fe6c:	10fff22e 	bgeu	r2,r3,80fe38 <alt_up_pixel_buffer_dma_draw_hline+0x290>
  80fe70:	00001d06 	br	80fee8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80fe74:	e13ffe17 	ldw	r4,-8(fp)
  80fe78:	e13ffe17 	ldw	r4,-8(fp)
  80fe7c:	2105883a 	add	r2,r4,r4
  80fe80:	1085883a 	add	r2,r2,r2
  80fe84:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  80fe88:	e0fffa17 	ldw	r3,-24(fp)
  80fe8c:	e13ffe17 	ldw	r4,-8(fp)
  80fe90:	1905383a 	mul	r2,r3,r4
  80fe94:	e0ffff17 	ldw	r3,-4(fp)
  80fe98:	1887883a 	add	r3,r3,r2
  80fe9c:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80fea0:	e13ffc17 	ldw	r4,-16(fp)
  80fea4:	e13ff715 	stw	r4,-36(fp)
  80fea8:	00000c06 	br	80fedc <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80feac:	e0fff717 	ldw	r3,-36(fp)
  80feb0:	e0fff717 	ldw	r3,-36(fp)
  80feb4:	18c5883a 	add	r2,r3,r3
  80feb8:	1085883a 	add	r2,r2,r2
  80febc:	1007883a 	mov	r3,r2
  80fec0:	e0bfff17 	ldw	r2,-4(fp)
  80fec4:	1885883a 	add	r2,r3,r2
  80fec8:	e0fff917 	ldw	r3,-28(fp)
  80fecc:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80fed0:	e13ff717 	ldw	r4,-36(fp)
  80fed4:	21000044 	addi	r4,r4,1
  80fed8:	e13ff715 	stw	r4,-36(fp)
  80fedc:	e0bffb17 	ldw	r2,-20(fp)
  80fee0:	e0fff717 	ldw	r3,-36(fp)
  80fee4:	10fff12e 	bgeu	r2,r3,80feac <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  80fee8:	e037883a 	mov	sp,fp
  80feec:	df000017 	ldw	fp,0(sp)
  80fef0:	dec00104 	addi	sp,sp,4
  80fef4:	f800283a 	ret

0080fef8 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  80fef8:	defff104 	addi	sp,sp,-60
  80fefc:	df000e15 	stw	fp,56(sp)
  80ff00:	df000e04 	addi	fp,sp,56
  80ff04:	e13ff215 	stw	r4,-56(fp)
  80ff08:	e17ff315 	stw	r5,-52(fp)
  80ff0c:	e1bff415 	stw	r6,-48(fp)
  80ff10:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80ff14:	e0bff217 	ldw	r2,-56(fp)
  80ff18:	10800f17 	ldw	r2,60(r2)
  80ff1c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80ff20:	e0bff217 	ldw	r2,-56(fp)
  80ff24:	10801017 	ldw	r2,64(r2)
  80ff28:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  80ff2c:	e0bff317 	ldw	r2,-52(fp)
  80ff30:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  80ff34:	e0fff417 	ldw	r3,-48(fp)
  80ff38:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  80ff3c:	e13ff517 	ldw	r4,-44(fp)
  80ff40:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  80ff44:	e0800117 	ldw	r2,4(fp)
  80ff48:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  80ff4c:	e0fffa17 	ldw	r3,-24(fp)
  80ff50:	e13ffb17 	ldw	r4,-20(fp)
  80ff54:	1900042e 	bgeu	r3,r4,80ff68 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  80ff58:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  80ff5c:	e0fffa17 	ldw	r3,-24(fp)
  80ff60:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  80ff64:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  80ff68:	e13ffc17 	ldw	r4,-16(fp)
  80ff6c:	e0bffe17 	ldw	r2,-8(fp)
  80ff70:	2080d12e 	bgeu	r4,r2,8102b8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  80ff74:	e0fffb17 	ldw	r3,-20(fp)
  80ff78:	e13ffd17 	ldw	r4,-12(fp)
  80ff7c:	19000136 	bltu	r3,r4,80ff84 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  80ff80:	0000cd06 	br	8102b8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  80ff84:	e0bffa17 	ldw	r2,-24(fp)
  80ff88:	e0fffd17 	ldw	r3,-12(fp)
  80ff8c:	10c00336 	bltu	r2,r3,80ff9c <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  80ff90:	e13ffd17 	ldw	r4,-12(fp)
  80ff94:	213fffc4 	addi	r4,r4,-1
  80ff98:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80ff9c:	e0800217 	ldw	r2,8(fp)
  80ffa0:	10800058 	cmpnei	r2,r2,1
  80ffa4:	1000041e 	bne	r2,zero,80ffb8 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  80ffa8:	e0bff217 	ldw	r2,-56(fp)
  80ffac:	10800c17 	ldw	r2,48(r2)
  80ffb0:	e0bfff15 	stw	r2,-4(fp)
  80ffb4:	00000306 	br	80ffc4 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  80ffb8:	e0bff217 	ldw	r2,-56(fp)
  80ffbc:	10800b17 	ldw	r2,44(r2)
  80ffc0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80ffc4:	e0bff217 	ldw	r2,-56(fp)
  80ffc8:	10800d17 	ldw	r2,52(r2)
  80ffcc:	1004c03a 	cmpne	r2,r2,zero
  80ffd0:	1000571e 	bne	r2,zero,810130 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80ffd4:	e0bff217 	ldw	r2,-56(fp)
  80ffd8:	10801317 	ldw	r2,76(r2)
  80ffdc:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  80ffe0:	e0bff717 	ldw	r2,-36(fp)
  80ffe4:	e0fffb17 	ldw	r3,-20(fp)
  80ffe8:	1884983a 	sll	r2,r3,r2
  80ffec:	e13fff17 	ldw	r4,-4(fp)
  80fff0:	2089883a 	add	r4,r4,r2
  80fff4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80fff8:	e0bff217 	ldw	r2,-56(fp)
  80fffc:	10800e17 	ldw	r2,56(r2)
  810000:	10800058 	cmpnei	r2,r2,1
  810004:	1000151e 	bne	r2,zero,81005c <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  810008:	e0bffb17 	ldw	r2,-20(fp)
  81000c:	e0bff815 	stw	r2,-32(fp)
  810010:	00000e06 	br	81004c <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  810014:	e0ffff17 	ldw	r3,-4(fp)
  810018:	e0bffc17 	ldw	r2,-16(fp)
  81001c:	1885883a 	add	r2,r3,r2
  810020:	e0fff917 	ldw	r3,-28(fp)
  810024:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  810028:	e0fff717 	ldw	r3,-36(fp)
  81002c:	00800044 	movi	r2,1
  810030:	10c4983a 	sll	r2,r2,r3
  810034:	e0ffff17 	ldw	r3,-4(fp)
  810038:	1887883a 	add	r3,r3,r2
  81003c:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  810040:	e13ff817 	ldw	r4,-32(fp)
  810044:	21000044 	addi	r4,r4,1
  810048:	e13ff815 	stw	r4,-32(fp)
  81004c:	e0bffa17 	ldw	r2,-24(fp)
  810050:	e0fff817 	ldw	r3,-32(fp)
  810054:	10ffef2e 	bgeu	r2,r3,810014 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  810058:	00009706 	br	8102b8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  81005c:	e0bff217 	ldw	r2,-56(fp)
  810060:	10800e17 	ldw	r2,56(r2)
  810064:	10800098 	cmpnei	r2,r2,2
  810068:	1000181e 	bne	r2,zero,8100cc <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  81006c:	e13ffb17 	ldw	r4,-20(fp)
  810070:	e13ff815 	stw	r4,-32(fp)
  810074:	00001106 	br	8100bc <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  810078:	e0fffc17 	ldw	r3,-16(fp)
  81007c:	e0fffc17 	ldw	r3,-16(fp)
  810080:	18c5883a 	add	r2,r3,r3
  810084:	1007883a 	mov	r3,r2
  810088:	e0bfff17 	ldw	r2,-4(fp)
  81008c:	1885883a 	add	r2,r3,r2
  810090:	e0fff917 	ldw	r3,-28(fp)
  810094:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  810098:	e0fff717 	ldw	r3,-36(fp)
  81009c:	00800044 	movi	r2,1
  8100a0:	10c4983a 	sll	r2,r2,r3
  8100a4:	e13fff17 	ldw	r4,-4(fp)
  8100a8:	2089883a 	add	r4,r4,r2
  8100ac:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  8100b0:	e0bff817 	ldw	r2,-32(fp)
  8100b4:	10800044 	addi	r2,r2,1
  8100b8:	e0bff815 	stw	r2,-32(fp)
  8100bc:	e0fffa17 	ldw	r3,-24(fp)
  8100c0:	e13ff817 	ldw	r4,-32(fp)
  8100c4:	193fec2e 	bgeu	r3,r4,810078 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  8100c8:	00007b06 	br	8102b8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  8100cc:	e0bffb17 	ldw	r2,-20(fp)
  8100d0:	e0bff815 	stw	r2,-32(fp)
  8100d4:	00001206 	br	810120 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  8100d8:	e0fffc17 	ldw	r3,-16(fp)
  8100dc:	e0fffc17 	ldw	r3,-16(fp)
  8100e0:	18c5883a 	add	r2,r3,r3
  8100e4:	1085883a 	add	r2,r2,r2
  8100e8:	1007883a 	mov	r3,r2
  8100ec:	e0bfff17 	ldw	r2,-4(fp)
  8100f0:	1885883a 	add	r2,r3,r2
  8100f4:	e0fff917 	ldw	r3,-28(fp)
  8100f8:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  8100fc:	e0fff717 	ldw	r3,-36(fp)
  810100:	00800044 	movi	r2,1
  810104:	10c4983a 	sll	r2,r2,r3
  810108:	e13fff17 	ldw	r4,-4(fp)
  81010c:	2089883a 	add	r4,r4,r2
  810110:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  810114:	e0bff817 	ldw	r2,-32(fp)
  810118:	10800044 	addi	r2,r2,1
  81011c:	e0bff815 	stw	r2,-32(fp)
  810120:	e0fffa17 	ldw	r3,-24(fp)
  810124:	e13ff817 	ldw	r4,-32(fp)
  810128:	193feb2e 	bgeu	r3,r4,8100d8 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  81012c:	00006206 	br	8102b8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  810130:	e0bff217 	ldw	r2,-56(fp)
  810134:	10800e17 	ldw	r2,56(r2)
  810138:	10800058 	cmpnei	r2,r2,1
  81013c:	1000191e 	bne	r2,zero,8101a4 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  810140:	e0fffb17 	ldw	r3,-20(fp)
  810144:	e13ffe17 	ldw	r4,-8(fp)
  810148:	1905383a 	mul	r2,r3,r4
  81014c:	e0ffff17 	ldw	r3,-4(fp)
  810150:	1887883a 	add	r3,r3,r2
  810154:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  810158:	e13ffb17 	ldw	r4,-20(fp)
  81015c:	e13ff615 	stw	r4,-40(fp)
  810160:	00000c06 	br	810194 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  810164:	e0ffff17 	ldw	r3,-4(fp)
  810168:	e0bffc17 	ldw	r2,-16(fp)
  81016c:	1885883a 	add	r2,r3,r2
  810170:	e0fff917 	ldw	r3,-28(fp)
  810174:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  810178:	e0bfff17 	ldw	r2,-4(fp)
  81017c:	e0fffe17 	ldw	r3,-8(fp)
  810180:	10c5883a 	add	r2,r2,r3
  810184:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  810188:	e13ff617 	ldw	r4,-40(fp)
  81018c:	21000044 	addi	r4,r4,1
  810190:	e13ff615 	stw	r4,-40(fp)
  810194:	e0bffa17 	ldw	r2,-24(fp)
  810198:	e0fff617 	ldw	r3,-40(fp)
  81019c:	10fff12e 	bgeu	r2,r3,810164 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  8101a0:	00004506 	br	8102b8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8101a4:	e0bff217 	ldw	r2,-56(fp)
  8101a8:	10800e17 	ldw	r2,56(r2)
  8101ac:	10800098 	cmpnei	r2,r2,2
  8101b0:	1000201e 	bne	r2,zero,810234 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  8101b4:	e13ffe17 	ldw	r4,-8(fp)
  8101b8:	e13ffe17 	ldw	r4,-8(fp)
  8101bc:	2105883a 	add	r2,r4,r4
  8101c0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  8101c4:	e0fffb17 	ldw	r3,-20(fp)
  8101c8:	e13ffe17 	ldw	r4,-8(fp)
  8101cc:	1905383a 	mul	r2,r3,r4
  8101d0:	e0ffff17 	ldw	r3,-4(fp)
  8101d4:	1887883a 	add	r3,r3,r2
  8101d8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  8101dc:	e13ffb17 	ldw	r4,-20(fp)
  8101e0:	e13ff615 	stw	r4,-40(fp)
  8101e4:	00000f06 	br	810224 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  8101e8:	e0fffc17 	ldw	r3,-16(fp)
  8101ec:	e0fffc17 	ldw	r3,-16(fp)
  8101f0:	18c5883a 	add	r2,r3,r3
  8101f4:	1007883a 	mov	r3,r2
  8101f8:	e0bfff17 	ldw	r2,-4(fp)
  8101fc:	1885883a 	add	r2,r3,r2
  810200:	e0fff917 	ldw	r3,-28(fp)
  810204:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  810208:	e13fff17 	ldw	r4,-4(fp)
  81020c:	e0bffe17 	ldw	r2,-8(fp)
  810210:	2089883a 	add	r4,r4,r2
  810214:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  810218:	e0fff617 	ldw	r3,-40(fp)
  81021c:	18c00044 	addi	r3,r3,1
  810220:	e0fff615 	stw	r3,-40(fp)
  810224:	e13ffa17 	ldw	r4,-24(fp)
  810228:	e0bff617 	ldw	r2,-40(fp)
  81022c:	20bfee2e 	bgeu	r4,r2,8101e8 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  810230:	00002106 	br	8102b8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  810234:	e0fffe17 	ldw	r3,-8(fp)
  810238:	e0fffe17 	ldw	r3,-8(fp)
  81023c:	18c5883a 	add	r2,r3,r3
  810240:	1085883a 	add	r2,r2,r2
  810244:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  810248:	e13ffb17 	ldw	r4,-20(fp)
  81024c:	e0fffe17 	ldw	r3,-8(fp)
  810250:	20c5383a 	mul	r2,r4,r3
  810254:	e13fff17 	ldw	r4,-4(fp)
  810258:	2089883a 	add	r4,r4,r2
  81025c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  810260:	e0bffb17 	ldw	r2,-20(fp)
  810264:	e0bff615 	stw	r2,-40(fp)
  810268:	00001006 	br	8102ac <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  81026c:	e0fffc17 	ldw	r3,-16(fp)
  810270:	e0fffc17 	ldw	r3,-16(fp)
  810274:	18c5883a 	add	r2,r3,r3
  810278:	1085883a 	add	r2,r2,r2
  81027c:	1007883a 	mov	r3,r2
  810280:	e0bfff17 	ldw	r2,-4(fp)
  810284:	1885883a 	add	r2,r3,r2
  810288:	e0fff917 	ldw	r3,-28(fp)
  81028c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  810290:	e13fff17 	ldw	r4,-4(fp)
  810294:	e0bffe17 	ldw	r2,-8(fp)
  810298:	2089883a 	add	r4,r4,r2
  81029c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  8102a0:	e0fff617 	ldw	r3,-40(fp)
  8102a4:	18c00044 	addi	r3,r3,1
  8102a8:	e0fff615 	stw	r3,-40(fp)
  8102ac:	e13ffa17 	ldw	r4,-24(fp)
  8102b0:	e0bff617 	ldw	r2,-40(fp)
  8102b4:	20bfed2e 	bgeu	r4,r2,81026c <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  8102b8:	e037883a 	mov	sp,fp
  8102bc:	df000017 	ldw	fp,0(sp)
  8102c0:	dec00104 	addi	sp,sp,4
  8102c4:	f800283a 	ret

008102c8 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  8102c8:	defff804 	addi	sp,sp,-32
  8102cc:	dfc00715 	stw	ra,28(sp)
  8102d0:	df000615 	stw	fp,24(sp)
  8102d4:	df000604 	addi	fp,sp,24
  8102d8:	e13ffc15 	stw	r4,-16(fp)
  8102dc:	e17ffd15 	stw	r5,-12(fp)
  8102e0:	e1bffe15 	stw	r6,-8(fp)
  8102e4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  8102e8:	e0800317 	ldw	r2,12(fp)
  8102ec:	d8800015 	stw	r2,0(sp)
  8102f0:	e0800417 	ldw	r2,16(fp)
  8102f4:	d8800115 	stw	r2,4(sp)
  8102f8:	e13ffc17 	ldw	r4,-16(fp)
  8102fc:	e17ffd17 	ldw	r5,-12(fp)
  810300:	e1bfff17 	ldw	r6,-4(fp)
  810304:	e1fffe17 	ldw	r7,-8(fp)
  810308:	080fba80 	call	80fba8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  81030c:	e0800317 	ldw	r2,12(fp)
  810310:	d8800015 	stw	r2,0(sp)
  810314:	e0800417 	ldw	r2,16(fp)
  810318:	d8800115 	stw	r2,4(sp)
  81031c:	e13ffc17 	ldw	r4,-16(fp)
  810320:	e17ffd17 	ldw	r5,-12(fp)
  810324:	e1bfff17 	ldw	r6,-4(fp)
  810328:	e1c00217 	ldw	r7,8(fp)
  81032c:	080fba80 	call	80fba8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  810330:	e0800317 	ldw	r2,12(fp)
  810334:	d8800015 	stw	r2,0(sp)
  810338:	e0800417 	ldw	r2,16(fp)
  81033c:	d8800115 	stw	r2,4(sp)
  810340:	e13ffc17 	ldw	r4,-16(fp)
  810344:	e17ffd17 	ldw	r5,-12(fp)
  810348:	e1bffe17 	ldw	r6,-8(fp)
  81034c:	e1c00217 	ldw	r7,8(fp)
  810350:	080fef80 	call	80fef8 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  810354:	e0800317 	ldw	r2,12(fp)
  810358:	d8800015 	stw	r2,0(sp)
  81035c:	e0800417 	ldw	r2,16(fp)
  810360:	d8800115 	stw	r2,4(sp)
  810364:	e13ffc17 	ldw	r4,-16(fp)
  810368:	e17fff17 	ldw	r5,-4(fp)
  81036c:	e1bffe17 	ldw	r6,-8(fp)
  810370:	e1c00217 	ldw	r7,8(fp)
  810374:	080fef80 	call	80fef8 <alt_up_pixel_buffer_dma_draw_vline>
}
  810378:	e037883a 	mov	sp,fp
  81037c:	dfc00117 	ldw	ra,4(sp)
  810380:	df000017 	ldw	fp,0(sp)
  810384:	dec00204 	addi	sp,sp,8
  810388:	f800283a 	ret

0081038c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  81038c:	defffb04 	addi	sp,sp,-20
  810390:	df000415 	stw	fp,16(sp)
  810394:	df000404 	addi	fp,sp,16
  810398:	e13ffc15 	stw	r4,-16(fp)
  81039c:	e17ffd15 	stw	r5,-12(fp)
  8103a0:	e1bffe15 	stw	r6,-8(fp)
  8103a4:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  8103a8:	e0c00217 	ldw	r3,8(fp)
  8103ac:	1804c03a 	cmpne	r2,r3,zero
  8103b0:	10000b1e 	bne	r2,zero,8103e0 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  8103b4:	e13ffd17 	ldw	r4,-12(fp)
  8103b8:	e0ffff17 	ldw	r3,-4(fp)
  8103bc:	20c5383a 	mul	r2,r4,r3
  8103c0:	e13ffe17 	ldw	r4,-8(fp)
  8103c4:	1105883a 	add	r2,r2,r4
  8103c8:	1007883a 	mov	r3,r2
  8103cc:	e0bffc17 	ldw	r2,-16(fp)
  8103d0:	1885883a 	add	r2,r3,r2
  8103d4:	e0c00117 	ldw	r3,4(fp)
  8103d8:	10c00025 	stbio	r3,0(r2)
  8103dc:	00001b06 	br	81044c <helper_plot_pixel+0xc0>
	else if (mode == 1)
  8103e0:	e1000217 	ldw	r4,8(fp)
  8103e4:	20800058 	cmpnei	r2,r4,1
  8103e8:	10000c1e 	bne	r2,zero,81041c <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  8103ec:	e0fffd17 	ldw	r3,-12(fp)
  8103f0:	e13fff17 	ldw	r4,-4(fp)
  8103f4:	1905383a 	mul	r2,r3,r4
  8103f8:	e0fffe17 	ldw	r3,-8(fp)
  8103fc:	10c5883a 	add	r2,r2,r3
  810400:	1085883a 	add	r2,r2,r2
  810404:	1007883a 	mov	r3,r2
  810408:	e0bffc17 	ldw	r2,-16(fp)
  81040c:	1885883a 	add	r2,r3,r2
  810410:	e1000117 	ldw	r4,4(fp)
  810414:	1100002d 	sthio	r4,0(r2)
  810418:	00000c06 	br	81044c <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  81041c:	e0fffd17 	ldw	r3,-12(fp)
  810420:	e13fff17 	ldw	r4,-4(fp)
  810424:	1905383a 	mul	r2,r3,r4
  810428:	e0fffe17 	ldw	r3,-8(fp)
  81042c:	10c5883a 	add	r2,r2,r3
  810430:	1085883a 	add	r2,r2,r2
  810434:	1085883a 	add	r2,r2,r2
  810438:	1007883a 	mov	r3,r2
  81043c:	e0bffc17 	ldw	r2,-16(fp)
  810440:	1885883a 	add	r2,r3,r2
  810444:	e1000117 	ldw	r4,4(fp)
  810448:	11000035 	stwio	r4,0(r2)
}
  81044c:	e037883a 	mov	sp,fp
  810450:	df000017 	ldw	fp,0(sp)
  810454:	dec00104 	addi	sp,sp,4
  810458:	f800283a 	ret

0081045c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  81045c:	deffe404 	addi	sp,sp,-112
  810460:	dfc01b15 	stw	ra,108(sp)
  810464:	df001a15 	stw	fp,104(sp)
  810468:	df001a04 	addi	fp,sp,104
  81046c:	e13fe815 	stw	r4,-96(fp)
  810470:	e17fe915 	stw	r5,-92(fp)
  810474:	e1bfea15 	stw	r6,-88(fp)
  810478:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  81047c:	e0bfe917 	ldw	r2,-92(fp)
  810480:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  810484:	e0ffea17 	ldw	r3,-88(fp)
  810488:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  81048c:	e13feb17 	ldw	r4,-84(fp)
  810490:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  810494:	e0800217 	ldw	r2,8(fp)
  810498:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  81049c:	e0fff717 	ldw	r3,-36(fp)
  8104a0:	e13ff917 	ldw	r4,-28(fp)
  8104a4:	1905c83a 	sub	r2,r3,r4
  8104a8:	e0bfff15 	stw	r2,-4(fp)
  8104ac:	e0ffff17 	ldw	r3,-4(fp)
  8104b0:	1804403a 	cmpge	r2,r3,zero
  8104b4:	1000031e 	bne	r2,zero,8104c4 <alt_up_pixel_buffer_dma_draw_line+0x68>
  8104b8:	e13fff17 	ldw	r4,-4(fp)
  8104bc:	0109c83a 	sub	r4,zero,r4
  8104c0:	e13fff15 	stw	r4,-4(fp)
  8104c4:	e0fff817 	ldw	r3,-32(fp)
  8104c8:	e13ffa17 	ldw	r4,-24(fp)
  8104cc:	1905c83a 	sub	r2,r3,r4
  8104d0:	e0bffe15 	stw	r2,-8(fp)
  8104d4:	e0fffe17 	ldw	r3,-8(fp)
  8104d8:	1804403a 	cmpge	r2,r3,zero
  8104dc:	1000031e 	bne	r2,zero,8104ec <alt_up_pixel_buffer_dma_draw_line+0x90>
  8104e0:	e13ffe17 	ldw	r4,-8(fp)
  8104e4:	0109c83a 	sub	r4,zero,r4
  8104e8:	e13ffe15 	stw	r4,-8(fp)
  8104ec:	e0fffe17 	ldw	r3,-8(fp)
  8104f0:	e13fff17 	ldw	r4,-4(fp)
  8104f4:	1904803a 	cmplt	r2,r3,r4
  8104f8:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  8104fc:	e0bfe817 	ldw	r2,-96(fp)
  810500:	10800e17 	ldw	r2,56(r2)
  810504:	10800060 	cmpeqi	r2,r2,1
  810508:	10000c1e 	bne	r2,zero,81053c <alt_up_pixel_buffer_dma_draw_line+0xe0>
  81050c:	e0bfe817 	ldw	r2,-96(fp)
  810510:	10800e17 	ldw	r2,56(r2)
  810514:	10800098 	cmpnei	r2,r2,2
  810518:	1000031e 	bne	r2,zero,810528 <alt_up_pixel_buffer_dma_draw_line+0xcc>
  81051c:	00800044 	movi	r2,1
  810520:	e0bffc15 	stw	r2,-16(fp)
  810524:	00000206 	br	810530 <alt_up_pixel_buffer_dma_draw_line+0xd4>
  810528:	00c00084 	movi	r3,2
  81052c:	e0fffc15 	stw	r3,-16(fp)
  810530:	e13ffc17 	ldw	r4,-16(fp)
  810534:	e13ffd15 	stw	r4,-12(fp)
  810538:	00000106 	br	810540 <alt_up_pixel_buffer_dma_draw_line+0xe4>
  81053c:	e03ffd15 	stw	zero,-12(fp)
  810540:	e0bffd17 	ldw	r2,-12(fp)
  810544:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  810548:	e0c00317 	ldw	r3,12(fp)
  81054c:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  810550:	e0bfe817 	ldw	r2,-96(fp)
  810554:	10800d17 	ldw	r2,52(r2)
  810558:	1004c03a 	cmpne	r2,r2,zero
  81055c:	1000091e 	bne	r2,zero,810584 <alt_up_pixel_buffer_dma_draw_line+0x128>
  810560:	e0bfe817 	ldw	r2,-96(fp)
  810564:	10c01317 	ldw	r3,76(r2)
  810568:	e0bfef17 	ldw	r2,-68(fp)
  81056c:	1885c83a 	sub	r2,r3,r2
  810570:	1007883a 	mov	r3,r2
  810574:	00800044 	movi	r2,1
  810578:	10c4983a 	sll	r2,r2,r3
  81057c:	e0bffb15 	stw	r2,-20(fp)
  810580:	00000306 	br	810590 <alt_up_pixel_buffer_dma_draw_line+0x134>
  810584:	e0bfe817 	ldw	r2,-96(fp)
  810588:	10800f17 	ldw	r2,60(r2)
  81058c:	e0bffb15 	stw	r2,-20(fp)
  810590:	e13ffb17 	ldw	r4,-20(fp)
  810594:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  810598:	e0800417 	ldw	r2,16(fp)
  81059c:	10800058 	cmpnei	r2,r2,1
  8105a0:	1000041e 	bne	r2,zero,8105b4 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  8105a4:	e0bfe817 	ldw	r2,-96(fp)
  8105a8:	10800c17 	ldw	r2,48(r2)
  8105ac:	e0bfed15 	stw	r2,-76(fp)
  8105b0:	00000306 	br	8105c0 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  8105b4:	e0bfe817 	ldw	r2,-96(fp)
  8105b8:	10800b17 	ldw	r2,44(r2)
  8105bc:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  8105c0:	e0fff603 	ldbu	r3,-40(fp)
  8105c4:	18803fcc 	andi	r2,r3,255
  8105c8:	1080201c 	xori	r2,r2,128
  8105cc:	10bfe004 	addi	r2,r2,-128
  8105d0:	10800050 	cmplti	r2,r2,1
  8105d4:	10000c1e 	bne	r2,zero,810608 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  8105d8:	e13ffa17 	ldw	r4,-24(fp)
  8105dc:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  8105e0:	e0bff917 	ldw	r2,-28(fp)
  8105e4:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  8105e8:	e0fff317 	ldw	r3,-52(fp)
  8105ec:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  8105f0:	e13ff817 	ldw	r4,-32(fp)
  8105f4:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  8105f8:	e0bff717 	ldw	r2,-36(fp)
  8105fc:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  810600:	e0fff317 	ldw	r3,-52(fp)
  810604:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  810608:	e13ff817 	ldw	r4,-32(fp)
  81060c:	e0bffa17 	ldw	r2,-24(fp)
  810610:	20800c0e 	bge	r4,r2,810644 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  810614:	e0fffa17 	ldw	r3,-24(fp)
  810618:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  81061c:	e13ff817 	ldw	r4,-32(fp)
  810620:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  810624:	e0bff317 	ldw	r2,-52(fp)
  810628:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  81062c:	e0fff917 	ldw	r3,-28(fp)
  810630:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  810634:	e13ff717 	ldw	r4,-36(fp)
  810638:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  81063c:	e0bff317 	ldw	r2,-52(fp)
  810640:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  810644:	e0fff817 	ldw	r3,-32(fp)
  810648:	e13ffa17 	ldw	r4,-24(fp)
  81064c:	1907c83a 	sub	r3,r3,r4
  810650:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  810654:	e0fff717 	ldw	r3,-36(fp)
  810658:	e13ff917 	ldw	r4,-28(fp)
  81065c:	1905c83a 	sub	r2,r3,r4
  810660:	e0bff415 	stw	r2,-48(fp)
  810664:	e0fff417 	ldw	r3,-48(fp)
  810668:	1804403a 	cmpge	r2,r3,zero
  81066c:	1000031e 	bne	r2,zero,81067c <alt_up_pixel_buffer_dma_draw_line+0x220>
  810670:	e13ff417 	ldw	r4,-48(fp)
  810674:	0109c83a 	sub	r4,zero,r4
  810678:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  81067c:	e0fff517 	ldw	r3,-44(fp)
  810680:	1804d7fa 	srli	r2,r3,31
  810684:	e13ff517 	ldw	r4,-44(fp)
  810688:	1105883a 	add	r2,r2,r4
  81068c:	1005d07a 	srai	r2,r2,1
  810690:	0085c83a 	sub	r2,zero,r2
  810694:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  810698:	e0bff917 	ldw	r2,-28(fp)
  81069c:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  8106a0:	e0fff917 	ldw	r3,-28(fp)
  8106a4:	e13ff717 	ldw	r4,-36(fp)
  8106a8:	1900030e 	bge	r3,r4,8106b8 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  8106ac:	00800044 	movi	r2,1
  8106b0:	e0bff215 	stw	r2,-56(fp)
  8106b4:	00000206 	br	8106c0 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  8106b8:	00ffffc4 	movi	r3,-1
  8106bc:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  8106c0:	e13ff603 	ldbu	r4,-40(fp)
  8106c4:	20803fcc 	andi	r2,r4,255
  8106c8:	1080201c 	xori	r2,r2,128
  8106cc:	10bfe004 	addi	r2,r2,-128
  8106d0:	10800058 	cmpnei	r2,r2,1
  8106d4:	1000221e 	bne	r2,zero,810760 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  8106d8:	e0bffa17 	ldw	r2,-24(fp)
  8106dc:	e0bff115 	stw	r2,-60(fp)
  8106e0:	00001b06 	br	810750 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  8106e4:	e0ffee17 	ldw	r3,-72(fp)
  8106e8:	d8c00015 	stw	r3,0(sp)
  8106ec:	e13fef17 	ldw	r4,-68(fp)
  8106f0:	d9000115 	stw	r4,4(sp)
  8106f4:	e13fed17 	ldw	r4,-76(fp)
  8106f8:	e17fec17 	ldw	r5,-80(fp)
  8106fc:	e1bff017 	ldw	r6,-64(fp)
  810700:	e1fff117 	ldw	r7,-60(fp)
  810704:	081038c0 	call	81038c <helper_plot_pixel>
			error = error + deltay;
  810708:	e0bff317 	ldw	r2,-52(fp)
  81070c:	e0fff417 	ldw	r3,-48(fp)
  810710:	10c5883a 	add	r2,r2,r3
  810714:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  810718:	e13ff317 	ldw	r4,-52(fp)
  81071c:	20800050 	cmplti	r2,r4,1
  810720:	1000081e 	bne	r2,zero,810744 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  810724:	e0bff017 	ldw	r2,-64(fp)
  810728:	e0fff217 	ldw	r3,-56(fp)
  81072c:	10c5883a 	add	r2,r2,r3
  810730:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  810734:	e13ff317 	ldw	r4,-52(fp)
  810738:	e0bff517 	ldw	r2,-44(fp)
  81073c:	2089c83a 	sub	r4,r4,r2
  810740:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  810744:	e0fff117 	ldw	r3,-60(fp)
  810748:	18c00044 	addi	r3,r3,1
  81074c:	e0fff115 	stw	r3,-60(fp)
  810750:	e13ff817 	ldw	r4,-32(fp)
  810754:	e0bff117 	ldw	r2,-60(fp)
  810758:	20bfe20e 	bge	r4,r2,8106e4 <alt_up_pixel_buffer_dma_draw_line+0x288>
  81075c:	00002106 	br	8107e4 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  810760:	e0fffa17 	ldw	r3,-24(fp)
  810764:	e0fff115 	stw	r3,-60(fp)
  810768:	00001b06 	br	8107d8 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  81076c:	e13fee17 	ldw	r4,-72(fp)
  810770:	d9000015 	stw	r4,0(sp)
  810774:	e0bfef17 	ldw	r2,-68(fp)
  810778:	d8800115 	stw	r2,4(sp)
  81077c:	e13fed17 	ldw	r4,-76(fp)
  810780:	e17fec17 	ldw	r5,-80(fp)
  810784:	e1bff117 	ldw	r6,-60(fp)
  810788:	e1fff017 	ldw	r7,-64(fp)
  81078c:	081038c0 	call	81038c <helper_plot_pixel>
			error = error + deltay;
  810790:	e0fff317 	ldw	r3,-52(fp)
  810794:	e13ff417 	ldw	r4,-48(fp)
  810798:	1907883a 	add	r3,r3,r4
  81079c:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  8107a0:	e0fff317 	ldw	r3,-52(fp)
  8107a4:	18800050 	cmplti	r2,r3,1
  8107a8:	1000081e 	bne	r2,zero,8107cc <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  8107ac:	e13ff017 	ldw	r4,-64(fp)
  8107b0:	e0bff217 	ldw	r2,-56(fp)
  8107b4:	2089883a 	add	r4,r4,r2
  8107b8:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  8107bc:	e0fff317 	ldw	r3,-52(fp)
  8107c0:	e13ff517 	ldw	r4,-44(fp)
  8107c4:	1907c83a 	sub	r3,r3,r4
  8107c8:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  8107cc:	e0bff117 	ldw	r2,-60(fp)
  8107d0:	10800044 	addi	r2,r2,1
  8107d4:	e0bff115 	stw	r2,-60(fp)
  8107d8:	e0fff817 	ldw	r3,-32(fp)
  8107dc:	e13ff117 	ldw	r4,-60(fp)
  8107e0:	193fe20e 	bge	r3,r4,81076c <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  8107e4:	e037883a 	mov	sp,fp
  8107e8:	dfc00117 	ldw	ra,4(sp)
  8107ec:	df000017 	ldw	fp,0(sp)
  8107f0:	dec00204 	addi	sp,sp,8
  8107f4:	f800283a 	ret

008107f8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8107f8:	defff404 	addi	sp,sp,-48
  8107fc:	df000b15 	stw	fp,44(sp)
  810800:	df000b04 	addi	fp,sp,44
  810804:	e13ffb15 	stw	r4,-20(fp)
  810808:	e17ffc15 	stw	r5,-16(fp)
  81080c:	e1bffd15 	stw	r6,-12(fp)
  810810:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  810814:	e03ff915 	stw	zero,-28(fp)
  810818:	00802074 	movhi	r2,129
  81081c:	1096a504 	addi	r2,r2,23188
  810820:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  810824:	1005003a 	cmpeq	r2,r2,zero
  810828:	1000411e 	bne	r2,zero,810930 <alt_alarm_start+0x138>
  {
    if (alarm)
  81082c:	e0bffb17 	ldw	r2,-20(fp)
  810830:	1005003a 	cmpeq	r2,r2,zero
  810834:	10003b1e 	bne	r2,zero,810924 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  810838:	e0fffb17 	ldw	r3,-20(fp)
  81083c:	e0bffd17 	ldw	r2,-12(fp)
  810840:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  810844:	e0fffb17 	ldw	r3,-20(fp)
  810848:	e0bffe17 	ldw	r2,-8(fp)
  81084c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810850:	0005303a 	rdctl	r2,status
  810854:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810858:	e0fff817 	ldw	r3,-32(fp)
  81085c:	00bfff84 	movi	r2,-2
  810860:	1884703a 	and	r2,r3,r2
  810864:	1001703a 	wrctl	status,r2
  
  return context;
  810868:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  81086c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  810870:	00802074 	movhi	r2,129
  810874:	1096a604 	addi	r2,r2,23192
  810878:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  81087c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  810880:	e0fffc17 	ldw	r3,-16(fp)
  810884:	e0bff917 	ldw	r2,-28(fp)
  810888:	1885883a 	add	r2,r3,r2
  81088c:	10c00044 	addi	r3,r2,1
  810890:	e0bffb17 	ldw	r2,-20(fp)
  810894:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  810898:	e0bffb17 	ldw	r2,-20(fp)
  81089c:	10c00217 	ldw	r3,8(r2)
  8108a0:	e0bff917 	ldw	r2,-28(fp)
  8108a4:	1880042e 	bgeu	r3,r2,8108b8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  8108a8:	e0fffb17 	ldw	r3,-20(fp)
  8108ac:	00800044 	movi	r2,1
  8108b0:	18800405 	stb	r2,16(r3)
  8108b4:	00000206 	br	8108c0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  8108b8:	e0bffb17 	ldw	r2,-20(fp)
  8108bc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8108c0:	e0fffb17 	ldw	r3,-20(fp)
  8108c4:	00802074 	movhi	r2,129
  8108c8:	108f9504 	addi	r2,r2,15956
  8108cc:	e0bff615 	stw	r2,-40(fp)
  8108d0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8108d4:	e0fff717 	ldw	r3,-36(fp)
  8108d8:	e0bff617 	ldw	r2,-40(fp)
  8108dc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8108e0:	e0bff617 	ldw	r2,-40(fp)
  8108e4:	10c00017 	ldw	r3,0(r2)
  8108e8:	e0bff717 	ldw	r2,-36(fp)
  8108ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8108f0:	e0bff617 	ldw	r2,-40(fp)
  8108f4:	10c00017 	ldw	r3,0(r2)
  8108f8:	e0bff717 	ldw	r2,-36(fp)
  8108fc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  810900:	e0fff617 	ldw	r3,-40(fp)
  810904:	e0bff717 	ldw	r2,-36(fp)
  810908:	18800015 	stw	r2,0(r3)
  81090c:	e0bffa17 	ldw	r2,-24(fp)
  810910:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810914:	e0bff517 	ldw	r2,-44(fp)
  810918:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81091c:	e03fff15 	stw	zero,-4(fp)
  810920:	00000506 	br	810938 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  810924:	00bffa84 	movi	r2,-22
  810928:	e0bfff15 	stw	r2,-4(fp)
  81092c:	00000206 	br	810938 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  810930:	00bfde84 	movi	r2,-134
  810934:	e0bfff15 	stw	r2,-4(fp)
  810938:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  81093c:	e037883a 	mov	sp,fp
  810940:	df000017 	ldw	fp,0(sp)
  810944:	dec00104 	addi	sp,sp,4
  810948:	f800283a 	ret

0081094c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  81094c:	defffe04 	addi	sp,sp,-8
  810950:	df000115 	stw	fp,4(sp)
  810954:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  810958:	e03fff15 	stw	zero,-4(fp)
  81095c:	00000506 	br	810974 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  810960:	e0bfff17 	ldw	r2,-4(fp)
  810964:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  810968:	e0bfff17 	ldw	r2,-4(fp)
  81096c:	10800804 	addi	r2,r2,32
  810970:	e0bfff15 	stw	r2,-4(fp)
  810974:	e0bfff17 	ldw	r2,-4(fp)
  810978:	10810030 	cmpltui	r2,r2,1024
  81097c:	103ff81e 	bne	r2,zero,810960 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  810980:	e037883a 	mov	sp,fp
  810984:	df000017 	ldw	fp,0(sp)
  810988:	dec00104 	addi	sp,sp,4
  81098c:	f800283a 	ret

00810990 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  810990:	defff904 	addi	sp,sp,-28
  810994:	dfc00615 	stw	ra,24(sp)
  810998:	df000515 	stw	fp,20(sp)
  81099c:	df000504 	addi	fp,sp,20
  8109a0:	e13ffd15 	stw	r4,-12(fp)
  8109a4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8109a8:	e0bffd17 	ldw	r2,-12(fp)
  8109ac:	1005003a 	cmpeq	r2,r2,zero
  8109b0:	1000041e 	bne	r2,zero,8109c4 <alt_dev_llist_insert+0x34>
  8109b4:	e0bffd17 	ldw	r2,-12(fp)
  8109b8:	10800217 	ldw	r2,8(r2)
  8109bc:	1004c03a 	cmpne	r2,r2,zero
  8109c0:	1000071e 	bne	r2,zero,8109e0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  8109c4:	0810a440 	call	810a44 <alt_get_errno>
  8109c8:	1007883a 	mov	r3,r2
  8109cc:	00800584 	movi	r2,22
  8109d0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8109d4:	00bffa84 	movi	r2,-22
  8109d8:	e0bfff15 	stw	r2,-4(fp)
  8109dc:	00001306 	br	810a2c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8109e0:	e0fffd17 	ldw	r3,-12(fp)
  8109e4:	e0bffe17 	ldw	r2,-8(fp)
  8109e8:	e0bffb15 	stw	r2,-20(fp)
  8109ec:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8109f0:	e0fffc17 	ldw	r3,-16(fp)
  8109f4:	e0bffb17 	ldw	r2,-20(fp)
  8109f8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8109fc:	e0bffb17 	ldw	r2,-20(fp)
  810a00:	10c00017 	ldw	r3,0(r2)
  810a04:	e0bffc17 	ldw	r2,-16(fp)
  810a08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810a0c:	e0bffb17 	ldw	r2,-20(fp)
  810a10:	10c00017 	ldw	r3,0(r2)
  810a14:	e0bffc17 	ldw	r2,-16(fp)
  810a18:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  810a1c:	e0fffb17 	ldw	r3,-20(fp)
  810a20:	e0bffc17 	ldw	r2,-16(fp)
  810a24:	18800015 	stw	r2,0(r3)

  return 0;  
  810a28:	e03fff15 	stw	zero,-4(fp)
  810a2c:	e0bfff17 	ldw	r2,-4(fp)
}
  810a30:	e037883a 	mov	sp,fp
  810a34:	dfc00117 	ldw	ra,4(sp)
  810a38:	df000017 	ldw	fp,0(sp)
  810a3c:	dec00204 	addi	sp,sp,8
  810a40:	f800283a 	ret

00810a44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810a44:	defffd04 	addi	sp,sp,-12
  810a48:	dfc00215 	stw	ra,8(sp)
  810a4c:	df000115 	stw	fp,4(sp)
  810a50:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810a54:	00802074 	movhi	r2,129
  810a58:	108f8e04 	addi	r2,r2,15928
  810a5c:	10800017 	ldw	r2,0(r2)
  810a60:	1005003a 	cmpeq	r2,r2,zero
  810a64:	1000061e 	bne	r2,zero,810a80 <alt_get_errno+0x3c>
  810a68:	00802074 	movhi	r2,129
  810a6c:	108f8e04 	addi	r2,r2,15928
  810a70:	10800017 	ldw	r2,0(r2)
  810a74:	103ee83a 	callr	r2
  810a78:	e0bfff15 	stw	r2,-4(fp)
  810a7c:	00000306 	br	810a8c <alt_get_errno+0x48>
  810a80:	00802074 	movhi	r2,129
  810a84:	1096a004 	addi	r2,r2,23168
  810a88:	e0bfff15 	stw	r2,-4(fp)
  810a8c:	e0bfff17 	ldw	r2,-4(fp)
}
  810a90:	e037883a 	mov	sp,fp
  810a94:	dfc00117 	ldw	ra,4(sp)
  810a98:	df000017 	ldw	fp,0(sp)
  810a9c:	dec00204 	addi	sp,sp,8
  810aa0:	f800283a 	ret

00810aa4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  810aa4:	defffd04 	addi	sp,sp,-12
  810aa8:	dfc00215 	stw	ra,8(sp)
  810aac:	df000115 	stw	fp,4(sp)
  810ab0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  810ab4:	00bfff04 	movi	r2,-4
  810ab8:	00c02074 	movhi	r3,129
  810abc:	18c74804 	addi	r3,r3,7456
  810ac0:	1885883a 	add	r2,r3,r2
  810ac4:	e0bfff15 	stw	r2,-4(fp)
  810ac8:	00000606 	br	810ae4 <_do_ctors+0x40>
        (*ctor) (); 
  810acc:	e0bfff17 	ldw	r2,-4(fp)
  810ad0:	10800017 	ldw	r2,0(r2)
  810ad4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  810ad8:	e0bfff17 	ldw	r2,-4(fp)
  810adc:	10bfff04 	addi	r2,r2,-4
  810ae0:	e0bfff15 	stw	r2,-4(fp)
  810ae4:	e0ffff17 	ldw	r3,-4(fp)
  810ae8:	00802074 	movhi	r2,129
  810aec:	10874704 	addi	r2,r2,7452
  810af0:	18bff62e 	bgeu	r3,r2,810acc <_do_ctors+0x28>
        (*ctor) (); 
}
  810af4:	e037883a 	mov	sp,fp
  810af8:	dfc00117 	ldw	ra,4(sp)
  810afc:	df000017 	ldw	fp,0(sp)
  810b00:	dec00204 	addi	sp,sp,8
  810b04:	f800283a 	ret

00810b08 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  810b08:	defffd04 	addi	sp,sp,-12
  810b0c:	dfc00215 	stw	ra,8(sp)
  810b10:	df000115 	stw	fp,4(sp)
  810b14:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  810b18:	00bfff04 	movi	r2,-4
  810b1c:	00c02074 	movhi	r3,129
  810b20:	18c74804 	addi	r3,r3,7456
  810b24:	1885883a 	add	r2,r3,r2
  810b28:	e0bfff15 	stw	r2,-4(fp)
  810b2c:	00000606 	br	810b48 <_do_dtors+0x40>
        (*dtor) (); 
  810b30:	e0bfff17 	ldw	r2,-4(fp)
  810b34:	10800017 	ldw	r2,0(r2)
  810b38:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  810b3c:	e0bfff17 	ldw	r2,-4(fp)
  810b40:	10bfff04 	addi	r2,r2,-4
  810b44:	e0bfff15 	stw	r2,-4(fp)
  810b48:	e0ffff17 	ldw	r3,-4(fp)
  810b4c:	00802074 	movhi	r2,129
  810b50:	10874804 	addi	r2,r2,7456
  810b54:	18bff62e 	bgeu	r3,r2,810b30 <_do_dtors+0x28>
        (*dtor) (); 
}
  810b58:	e037883a 	mov	sp,fp
  810b5c:	dfc00117 	ldw	ra,4(sp)
  810b60:	df000017 	ldw	fp,0(sp)
  810b64:	dec00204 	addi	sp,sp,8
  810b68:	f800283a 	ret

00810b6c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  810b6c:	defff904 	addi	sp,sp,-28
  810b70:	dfc00615 	stw	ra,24(sp)
  810b74:	df000515 	stw	fp,20(sp)
  810b78:	df000504 	addi	fp,sp,20
  810b7c:	e13ffd15 	stw	r4,-12(fp)
  810b80:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  810b84:	e0bffe17 	ldw	r2,-8(fp)
  810b88:	10800017 	ldw	r2,0(r2)
  810b8c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  810b90:	e13ffd17 	ldw	r4,-12(fp)
  810b94:	0803e580 	call	803e58 <strlen>
  810b98:	10800044 	addi	r2,r2,1
  810b9c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  810ba0:	00000d06 	br	810bd8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  810ba4:	e0bffc17 	ldw	r2,-16(fp)
  810ba8:	11000217 	ldw	r4,8(r2)
  810bac:	e1bffb17 	ldw	r6,-20(fp)
  810bb0:	e17ffd17 	ldw	r5,-12(fp)
  810bb4:	08118040 	call	811804 <memcmp>
  810bb8:	1004c03a 	cmpne	r2,r2,zero
  810bbc:	1000031e 	bne	r2,zero,810bcc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  810bc0:	e0bffc17 	ldw	r2,-16(fp)
  810bc4:	e0bfff15 	stw	r2,-4(fp)
  810bc8:	00000706 	br	810be8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  810bcc:	e0bffc17 	ldw	r2,-16(fp)
  810bd0:	10800017 	ldw	r2,0(r2)
  810bd4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  810bd8:	e0fffe17 	ldw	r3,-8(fp)
  810bdc:	e0bffc17 	ldw	r2,-16(fp)
  810be0:	10fff01e 	bne	r2,r3,810ba4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  810be4:	e03fff15 	stw	zero,-4(fp)
  810be8:	e0bfff17 	ldw	r2,-4(fp)
}
  810bec:	e037883a 	mov	sp,fp
  810bf0:	dfc00117 	ldw	ra,4(sp)
  810bf4:	df000017 	ldw	fp,0(sp)
  810bf8:	dec00204 	addi	sp,sp,8
  810bfc:	f800283a 	ret

00810c00 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
  810c00:	defffb04 	addi	sp,sp,-20
  810c04:	df000415 	stw	fp,16(sp)
  810c08:	df000404 	addi	fp,sp,16
  810c0c:	e13ffe15 	stw	r4,-8(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
  810c10:	e0bffe17 	ldw	r2,-8(fp)
  810c14:	10800217 	ldw	r2,8(r2)
  810c18:	1004c03a 	cmpne	r2,r2,zero
  810c1c:	1000031e 	bne	r2,zero,810c2c <alt_fs_reg+0x2c>
  {
    return -ENODEV;
  810c20:	00bffb44 	movi	r2,-19
  810c24:	e0bfff15 	stw	r2,-4(fp)
  810c28:	00001406 	br	810c7c <alt_fs_reg+0x7c>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
  810c2c:	e0fffe17 	ldw	r3,-8(fp)
  810c30:	00802074 	movhi	r2,129
  810c34:	108f8904 	addi	r2,r2,15908
  810c38:	e0bffc15 	stw	r2,-16(fp)
  810c3c:	e0fffd15 	stw	r3,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810c40:	e0fffd17 	ldw	r3,-12(fp)
  810c44:	e0bffc17 	ldw	r2,-16(fp)
  810c48:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  810c4c:	e0bffc17 	ldw	r2,-16(fp)
  810c50:	10c00017 	ldw	r3,0(r2)
  810c54:	e0bffd17 	ldw	r2,-12(fp)
  810c58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810c5c:	e0bffc17 	ldw	r2,-16(fp)
  810c60:	10c00017 	ldw	r3,0(r2)
  810c64:	e0bffd17 	ldw	r2,-12(fp)
  810c68:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  810c6c:	e0fffc17 	ldw	r3,-16(fp)
  810c70:	e0bffd17 	ldw	r2,-12(fp)
  810c74:	18800015 	stw	r2,0(r3)

  return 0;
  810c78:	e03fff15 	stw	zero,-4(fp)
  810c7c:	e0bfff17 	ldw	r2,-4(fp)
} 
  810c80:	e037883a 	mov	sp,fp
  810c84:	df000017 	ldw	fp,0(sp)
  810c88:	dec00104 	addi	sp,sp,4
  810c8c:	f800283a 	ret

00810c90 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  810c90:	defffe04 	addi	sp,sp,-8
  810c94:	dfc00115 	stw	ra,4(sp)
  810c98:	df000015 	stw	fp,0(sp)
  810c9c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  810ca0:	0009883a 	mov	r4,zero
  810ca4:	01440004 	movi	r5,4096
  810ca8:	08117280 	call	811728 <alt_icache_flush>
#endif
}
  810cac:	e037883a 	mov	sp,fp
  810cb0:	dfc00117 	ldw	ra,4(sp)
  810cb4:	df000017 	ldw	fp,0(sp)
  810cb8:	dec00204 	addi	sp,sp,8
  810cbc:	f800283a 	ret

00810cc0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  810cc0:	defff904 	addi	sp,sp,-28
  810cc4:	dfc00615 	stw	ra,24(sp)
  810cc8:	df000515 	stw	fp,20(sp)
  810ccc:	df000504 	addi	fp,sp,20
  810cd0:	e13ffc15 	stw	r4,-16(fp)
  810cd4:	e17ffd15 	stw	r5,-12(fp)
  810cd8:	e1bffe15 	stw	r6,-8(fp)
  810cdc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  810ce0:	e0800217 	ldw	r2,8(fp)
  810ce4:	d8800015 	stw	r2,0(sp)
  810ce8:	e13ffc17 	ldw	r4,-16(fp)
  810cec:	e17ffd17 	ldw	r5,-12(fp)
  810cf0:	e1bffe17 	ldw	r6,-8(fp)
  810cf4:	e1ffff17 	ldw	r7,-4(fp)
  810cf8:	0810e940 	call	810e94 <alt_iic_isr_register>
}  
  810cfc:	e037883a 	mov	sp,fp
  810d00:	dfc00117 	ldw	ra,4(sp)
  810d04:	df000017 	ldw	fp,0(sp)
  810d08:	dec00204 	addi	sp,sp,8
  810d0c:	f800283a 	ret

00810d10 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  810d10:	defff904 	addi	sp,sp,-28
  810d14:	df000615 	stw	fp,24(sp)
  810d18:	df000604 	addi	fp,sp,24
  810d1c:	e13ffe15 	stw	r4,-8(fp)
  810d20:	e17fff15 	stw	r5,-4(fp)
  810d24:	e0bfff17 	ldw	r2,-4(fp)
  810d28:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810d2c:	0005303a 	rdctl	r2,status
  810d30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810d34:	e0fffb17 	ldw	r3,-20(fp)
  810d38:	00bfff84 	movi	r2,-2
  810d3c:	1884703a 	and	r2,r3,r2
  810d40:	1001703a 	wrctl	status,r2
  
  return context;
  810d44:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810d48:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  810d4c:	e0fffc17 	ldw	r3,-16(fp)
  810d50:	00800044 	movi	r2,1
  810d54:	10c4983a 	sll	r2,r2,r3
  810d58:	1007883a 	mov	r3,r2
  810d5c:	00802074 	movhi	r2,129
  810d60:	1096a404 	addi	r2,r2,23184
  810d64:	10800017 	ldw	r2,0(r2)
  810d68:	1886b03a 	or	r3,r3,r2
  810d6c:	00802074 	movhi	r2,129
  810d70:	1096a404 	addi	r2,r2,23184
  810d74:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810d78:	00802074 	movhi	r2,129
  810d7c:	1096a404 	addi	r2,r2,23184
  810d80:	10800017 	ldw	r2,0(r2)
  810d84:	100170fa 	wrctl	ienable,r2
  810d88:	e0bffd17 	ldw	r2,-12(fp)
  810d8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810d90:	e0bffa17 	ldw	r2,-24(fp)
  810d94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810d98:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  810d9c:	e037883a 	mov	sp,fp
  810da0:	df000017 	ldw	fp,0(sp)
  810da4:	dec00104 	addi	sp,sp,4
  810da8:	f800283a 	ret

00810dac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  810dac:	defff904 	addi	sp,sp,-28
  810db0:	df000615 	stw	fp,24(sp)
  810db4:	df000604 	addi	fp,sp,24
  810db8:	e13ffe15 	stw	r4,-8(fp)
  810dbc:	e17fff15 	stw	r5,-4(fp)
  810dc0:	e0bfff17 	ldw	r2,-4(fp)
  810dc4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810dc8:	0005303a 	rdctl	r2,status
  810dcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810dd0:	e0fffb17 	ldw	r3,-20(fp)
  810dd4:	00bfff84 	movi	r2,-2
  810dd8:	1884703a 	and	r2,r3,r2
  810ddc:	1001703a 	wrctl	status,r2
  
  return context;
  810de0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810de4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  810de8:	e0fffc17 	ldw	r3,-16(fp)
  810dec:	00800044 	movi	r2,1
  810df0:	10c4983a 	sll	r2,r2,r3
  810df4:	0084303a 	nor	r2,zero,r2
  810df8:	1007883a 	mov	r3,r2
  810dfc:	00802074 	movhi	r2,129
  810e00:	1096a404 	addi	r2,r2,23184
  810e04:	10800017 	ldw	r2,0(r2)
  810e08:	1886703a 	and	r3,r3,r2
  810e0c:	00802074 	movhi	r2,129
  810e10:	1096a404 	addi	r2,r2,23184
  810e14:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810e18:	00802074 	movhi	r2,129
  810e1c:	1096a404 	addi	r2,r2,23184
  810e20:	10800017 	ldw	r2,0(r2)
  810e24:	100170fa 	wrctl	ienable,r2
  810e28:	e0bffd17 	ldw	r2,-12(fp)
  810e2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810e30:	e0bffa17 	ldw	r2,-24(fp)
  810e34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810e38:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  810e3c:	e037883a 	mov	sp,fp
  810e40:	df000017 	ldw	fp,0(sp)
  810e44:	dec00104 	addi	sp,sp,4
  810e48:	f800283a 	ret

00810e4c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  810e4c:	defffc04 	addi	sp,sp,-16
  810e50:	df000315 	stw	fp,12(sp)
  810e54:	df000304 	addi	fp,sp,12
  810e58:	e13ffe15 	stw	r4,-8(fp)
  810e5c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  810e60:	000530fa 	rdctl	r2,ienable
  810e64:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  810e68:	e0ffff17 	ldw	r3,-4(fp)
  810e6c:	00800044 	movi	r2,1
  810e70:	10c4983a 	sll	r2,r2,r3
  810e74:	1007883a 	mov	r3,r2
  810e78:	e0bffd17 	ldw	r2,-12(fp)
  810e7c:	1884703a 	and	r2,r3,r2
  810e80:	1004c03a 	cmpne	r2,r2,zero
}
  810e84:	e037883a 	mov	sp,fp
  810e88:	df000017 	ldw	fp,0(sp)
  810e8c:	dec00104 	addi	sp,sp,4
  810e90:	f800283a 	ret

00810e94 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  810e94:	defff404 	addi	sp,sp,-48
  810e98:	dfc00b15 	stw	ra,44(sp)
  810e9c:	df000a15 	stw	fp,40(sp)
  810ea0:	df000a04 	addi	fp,sp,40
  810ea4:	e13ffb15 	stw	r4,-20(fp)
  810ea8:	e17ffc15 	stw	r5,-16(fp)
  810eac:	e1bffd15 	stw	r6,-12(fp)
  810eb0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  810eb4:	00bffa84 	movi	r2,-22
  810eb8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  810ebc:	e0bffc17 	ldw	r2,-16(fp)
  810ec0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  810ec4:	e0bff917 	ldw	r2,-28(fp)
  810ec8:	10800808 	cmpgei	r2,r2,32
  810ecc:	1000291e 	bne	r2,zero,810f74 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810ed0:	0005303a 	rdctl	r2,status
  810ed4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810ed8:	e0fff717 	ldw	r3,-36(fp)
  810edc:	00bfff84 	movi	r2,-2
  810ee0:	1884703a 	and	r2,r3,r2
  810ee4:	1001703a 	wrctl	status,r2
  
  return context;
  810ee8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  810eec:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  810ef0:	e0bff917 	ldw	r2,-28(fp)
  810ef4:	00c02074 	movhi	r3,129
  810ef8:	18d6b104 	addi	r3,r3,23236
  810efc:	100490fa 	slli	r2,r2,3
  810f00:	10c7883a 	add	r3,r2,r3
  810f04:	e0bffd17 	ldw	r2,-12(fp)
  810f08:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  810f0c:	e0bff917 	ldw	r2,-28(fp)
  810f10:	00c02074 	movhi	r3,129
  810f14:	18d6b104 	addi	r3,r3,23236
  810f18:	100490fa 	slli	r2,r2,3
  810f1c:	10c5883a 	add	r2,r2,r3
  810f20:	10c00104 	addi	r3,r2,4
  810f24:	e0bffe17 	ldw	r2,-8(fp)
  810f28:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  810f2c:	e0bffd17 	ldw	r2,-12(fp)
  810f30:	1005003a 	cmpeq	r2,r2,zero
  810f34:	1000051e 	bne	r2,zero,810f4c <alt_iic_isr_register+0xb8>
  810f38:	e17ff917 	ldw	r5,-28(fp)
  810f3c:	e13ffb17 	ldw	r4,-20(fp)
  810f40:	0810d100 	call	810d10 <alt_ic_irq_enable>
  810f44:	e0bfff15 	stw	r2,-4(fp)
  810f48:	00000406 	br	810f5c <alt_iic_isr_register+0xc8>
  810f4c:	e17ff917 	ldw	r5,-28(fp)
  810f50:	e13ffb17 	ldw	r4,-20(fp)
  810f54:	0810dac0 	call	810dac <alt_ic_irq_disable>
  810f58:	e0bfff15 	stw	r2,-4(fp)
  810f5c:	e0bfff17 	ldw	r2,-4(fp)
  810f60:	e0bffa15 	stw	r2,-24(fp)
  810f64:	e0bff817 	ldw	r2,-32(fp)
  810f68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810f6c:	e0bff617 	ldw	r2,-40(fp)
  810f70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  810f74:	e0bffa17 	ldw	r2,-24(fp)
}
  810f78:	e037883a 	mov	sp,fp
  810f7c:	dfc00117 	ldw	ra,4(sp)
  810f80:	df000017 	ldw	fp,0(sp)
  810f84:	dec00204 	addi	sp,sp,8
  810f88:	f800283a 	ret

00810f8c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  810f8c:	defff904 	addi	sp,sp,-28
  810f90:	dfc00615 	stw	ra,24(sp)
  810f94:	df000515 	stw	fp,20(sp)
  810f98:	df000504 	addi	fp,sp,20
  810f9c:	e13ffc15 	stw	r4,-16(fp)
  810fa0:	e17ffd15 	stw	r5,-12(fp)
  810fa4:	e1bffe15 	stw	r6,-8(fp)
  810fa8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  810fac:	e13ffd17 	ldw	r4,-12(fp)
  810fb0:	e17ffe17 	ldw	r5,-8(fp)
  810fb4:	e1bfff17 	ldw	r6,-4(fp)
  810fb8:	08111a40 	call	8111a4 <open>
  810fbc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  810fc0:	e0bffb17 	ldw	r2,-20(fp)
  810fc4:	1004803a 	cmplt	r2,r2,zero
  810fc8:	10001c1e 	bne	r2,zero,81103c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  810fcc:	e0bffb17 	ldw	r2,-20(fp)
  810fd0:	00c02074 	movhi	r3,129
  810fd4:	18caa604 	addi	r3,r3,10904
  810fd8:	10800324 	muli	r2,r2,12
  810fdc:	10c5883a 	add	r2,r2,r3
  810fe0:	10c00017 	ldw	r3,0(r2)
  810fe4:	e0bffc17 	ldw	r2,-16(fp)
  810fe8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  810fec:	e0bffb17 	ldw	r2,-20(fp)
  810ff0:	00c02074 	movhi	r3,129
  810ff4:	18caa604 	addi	r3,r3,10904
  810ff8:	10800324 	muli	r2,r2,12
  810ffc:	10c5883a 	add	r2,r2,r3
  811000:	10800104 	addi	r2,r2,4
  811004:	10c00017 	ldw	r3,0(r2)
  811008:	e0bffc17 	ldw	r2,-16(fp)
  81100c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  811010:	e0bffb17 	ldw	r2,-20(fp)
  811014:	00c02074 	movhi	r3,129
  811018:	18caa604 	addi	r3,r3,10904
  81101c:	10800324 	muli	r2,r2,12
  811020:	10c5883a 	add	r2,r2,r3
  811024:	10800204 	addi	r2,r2,8
  811028:	10c00017 	ldw	r3,0(r2)
  81102c:	e0bffc17 	ldw	r2,-16(fp)
  811030:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  811034:	e13ffb17 	ldw	r4,-20(fp)
  811038:	080cea40 	call	80cea4 <alt_release_fd>
  }
} 
  81103c:	e037883a 	mov	sp,fp
  811040:	dfc00117 	ldw	ra,4(sp)
  811044:	df000017 	ldw	fp,0(sp)
  811048:	dec00204 	addi	sp,sp,8
  81104c:	f800283a 	ret

00811050 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  811050:	defffb04 	addi	sp,sp,-20
  811054:	dfc00415 	stw	ra,16(sp)
  811058:	df000315 	stw	fp,12(sp)
  81105c:	df000304 	addi	fp,sp,12
  811060:	e13ffd15 	stw	r4,-12(fp)
  811064:	e17ffe15 	stw	r5,-8(fp)
  811068:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81106c:	01002074 	movhi	r4,129
  811070:	210aa904 	addi	r4,r4,10916
  811074:	e17ffd17 	ldw	r5,-12(fp)
  811078:	01800044 	movi	r6,1
  81107c:	01c07fc4 	movi	r7,511
  811080:	0810f8c0 	call	810f8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  811084:	01002074 	movhi	r4,129
  811088:	210aa604 	addi	r4,r4,10904
  81108c:	e17ffe17 	ldw	r5,-8(fp)
  811090:	000d883a 	mov	r6,zero
  811094:	01c07fc4 	movi	r7,511
  811098:	0810f8c0 	call	810f8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81109c:	01002074 	movhi	r4,129
  8110a0:	210aac04 	addi	r4,r4,10928
  8110a4:	e17fff17 	ldw	r5,-4(fp)
  8110a8:	01800044 	movi	r6,1
  8110ac:	01c07fc4 	movi	r7,511
  8110b0:	0810f8c0 	call	810f8c <alt_open_fd>
}  
  8110b4:	e037883a 	mov	sp,fp
  8110b8:	dfc00117 	ldw	ra,4(sp)
  8110bc:	df000017 	ldw	fp,0(sp)
  8110c0:	dec00204 	addi	sp,sp,8
  8110c4:	f800283a 	ret

008110c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8110c8:	defffc04 	addi	sp,sp,-16
  8110cc:	df000315 	stw	fp,12(sp)
  8110d0:	df000304 	addi	fp,sp,12
  8110d4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8110d8:	e0bffe17 	ldw	r2,-8(fp)
  8110dc:	10800217 	ldw	r2,8(r2)
  8110e0:	10d00034 	orhi	r3,r2,16384
  8110e4:	e0bffe17 	ldw	r2,-8(fp)
  8110e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8110ec:	e03ffd15 	stw	zero,-12(fp)
  8110f0:	00002006 	br	811174 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8110f4:	e0bffd17 	ldw	r2,-12(fp)
  8110f8:	00c02074 	movhi	r3,129
  8110fc:	18caa604 	addi	r3,r3,10904
  811100:	10800324 	muli	r2,r2,12
  811104:	10c5883a 	add	r2,r2,r3
  811108:	10c00017 	ldw	r3,0(r2)
  81110c:	e0bffe17 	ldw	r2,-8(fp)
  811110:	10800017 	ldw	r2,0(r2)
  811114:	1880141e 	bne	r3,r2,811168 <alt_file_locked+0xa0>
  811118:	e0bffd17 	ldw	r2,-12(fp)
  81111c:	00c02074 	movhi	r3,129
  811120:	18caa604 	addi	r3,r3,10904
  811124:	10800324 	muli	r2,r2,12
  811128:	10c5883a 	add	r2,r2,r3
  81112c:	10800204 	addi	r2,r2,8
  811130:	10800017 	ldw	r2,0(r2)
  811134:	1004403a 	cmpge	r2,r2,zero
  811138:	10000b1e 	bne	r2,zero,811168 <alt_file_locked+0xa0>
  81113c:	e0bffd17 	ldw	r2,-12(fp)
  811140:	10800324 	muli	r2,r2,12
  811144:	1007883a 	mov	r3,r2
  811148:	00802074 	movhi	r2,129
  81114c:	108aa604 	addi	r2,r2,10904
  811150:	1887883a 	add	r3,r3,r2
  811154:	e0bffe17 	ldw	r2,-8(fp)
  811158:	18800326 	beq	r3,r2,811168 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81115c:	00bffcc4 	movi	r2,-13
  811160:	e0bfff15 	stw	r2,-4(fp)
  811164:	00000a06 	br	811190 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  811168:	e0bffd17 	ldw	r2,-12(fp)
  81116c:	10800044 	addi	r2,r2,1
  811170:	e0bffd15 	stw	r2,-12(fp)
  811174:	00802074 	movhi	r2,129
  811178:	108f8d04 	addi	r2,r2,15924
  81117c:	10800017 	ldw	r2,0(r2)
  811180:	1007883a 	mov	r3,r2
  811184:	e0bffd17 	ldw	r2,-12(fp)
  811188:	18bfda2e 	bgeu	r3,r2,8110f4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  81118c:	e03fff15 	stw	zero,-4(fp)
  811190:	e0bfff17 	ldw	r2,-4(fp)
}
  811194:	e037883a 	mov	sp,fp
  811198:	df000017 	ldw	fp,0(sp)
  81119c:	dec00104 	addi	sp,sp,4
  8111a0:	f800283a 	ret

008111a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8111a4:	defff404 	addi	sp,sp,-48
  8111a8:	dfc00b15 	stw	ra,44(sp)
  8111ac:	df000a15 	stw	fp,40(sp)
  8111b0:	df000a04 	addi	fp,sp,40
  8111b4:	e13ffb15 	stw	r4,-20(fp)
  8111b8:	e17ffc15 	stw	r5,-16(fp)
  8111bc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8111c0:	00bfffc4 	movi	r2,-1
  8111c4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  8111c8:	00bffb44 	movi	r2,-19
  8111cc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  8111d0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8111d4:	e13ffb17 	ldw	r4,-20(fp)
  8111d8:	01402074 	movhi	r5,129
  8111dc:	294f8b04 	addi	r5,r5,15916
  8111e0:	0810b6c0 	call	810b6c <alt_find_dev>
  8111e4:	e0bffa15 	stw	r2,-24(fp)
  8111e8:	e0bffa17 	ldw	r2,-24(fp)
  8111ec:	1004c03a 	cmpne	r2,r2,zero
  8111f0:	1000051e 	bne	r2,zero,811208 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8111f4:	e13ffb17 	ldw	r4,-20(fp)
  8111f8:	08115500 	call	811550 <alt_find_file>
  8111fc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  811200:	00800044 	movi	r2,1
  811204:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  811208:	e0bffa17 	ldw	r2,-24(fp)
  81120c:	1005003a 	cmpeq	r2,r2,zero
  811210:	1000301e 	bne	r2,zero,8112d4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  811214:	e13ffa17 	ldw	r4,-24(fp)
  811218:	08116700 	call	811670 <alt_get_fd>
  81121c:	e0bff815 	stw	r2,-32(fp)
  811220:	e0bff817 	ldw	r2,-32(fp)
  811224:	1004403a 	cmpge	r2,r2,zero
  811228:	1000031e 	bne	r2,zero,811238 <open+0x94>
    {
      status = index;
  81122c:	e0bff817 	ldw	r2,-32(fp)
  811230:	e0bff715 	stw	r2,-36(fp)
  811234:	00002906 	br	8112dc <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  811238:	e0bff817 	ldw	r2,-32(fp)
  81123c:	10800324 	muli	r2,r2,12
  811240:	1007883a 	mov	r3,r2
  811244:	00802074 	movhi	r2,129
  811248:	108aa604 	addi	r2,r2,10904
  81124c:	1885883a 	add	r2,r3,r2
  811250:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  811254:	e0fffc17 	ldw	r3,-16(fp)
  811258:	00900034 	movhi	r2,16384
  81125c:	10bfffc4 	addi	r2,r2,-1
  811260:	1886703a 	and	r3,r3,r2
  811264:	e0bff917 	ldw	r2,-28(fp)
  811268:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81126c:	e0bff617 	ldw	r2,-40(fp)
  811270:	1004c03a 	cmpne	r2,r2,zero
  811274:	1000061e 	bne	r2,zero,811290 <open+0xec>
  811278:	e13ff917 	ldw	r4,-28(fp)
  81127c:	08110c80 	call	8110c8 <alt_file_locked>
  811280:	e0bff715 	stw	r2,-36(fp)
  811284:	e0bff717 	ldw	r2,-36(fp)
  811288:	1004803a 	cmplt	r2,r2,zero
  81128c:	1000131e 	bne	r2,zero,8112dc <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  811290:	e0bffa17 	ldw	r2,-24(fp)
  811294:	10800317 	ldw	r2,12(r2)
  811298:	1005003a 	cmpeq	r2,r2,zero
  81129c:	1000091e 	bne	r2,zero,8112c4 <open+0x120>
  8112a0:	e0bffa17 	ldw	r2,-24(fp)
  8112a4:	10800317 	ldw	r2,12(r2)
  8112a8:	e13ff917 	ldw	r4,-28(fp)
  8112ac:	e17ffb17 	ldw	r5,-20(fp)
  8112b0:	e1bffc17 	ldw	r6,-16(fp)
  8112b4:	e1fffd17 	ldw	r7,-12(fp)
  8112b8:	103ee83a 	callr	r2
  8112bc:	e0bfff15 	stw	r2,-4(fp)
  8112c0:	00000106 	br	8112c8 <open+0x124>
  8112c4:	e03fff15 	stw	zero,-4(fp)
  8112c8:	e0bfff17 	ldw	r2,-4(fp)
  8112cc:	e0bff715 	stw	r2,-36(fp)
  8112d0:	00000206 	br	8112dc <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8112d4:	00bffb44 	movi	r2,-19
  8112d8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8112dc:	e0bff717 	ldw	r2,-36(fp)
  8112e0:	1004403a 	cmpge	r2,r2,zero
  8112e4:	1000091e 	bne	r2,zero,81130c <open+0x168>
  {
    alt_release_fd (index);  
  8112e8:	e13ff817 	ldw	r4,-32(fp)
  8112ec:	080cea40 	call	80cea4 <alt_release_fd>
    ALT_ERRNO = -status;
  8112f0:	081132c0 	call	81132c <alt_get_errno>
  8112f4:	e0fff717 	ldw	r3,-36(fp)
  8112f8:	00c7c83a 	sub	r3,zero,r3
  8112fc:	10c00015 	stw	r3,0(r2)
    return -1;
  811300:	00bfffc4 	movi	r2,-1
  811304:	e0bffe15 	stw	r2,-8(fp)
  811308:	00000206 	br	811314 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  81130c:	e0bff817 	ldw	r2,-32(fp)
  811310:	e0bffe15 	stw	r2,-8(fp)
  811314:	e0bffe17 	ldw	r2,-8(fp)
}
  811318:	e037883a 	mov	sp,fp
  81131c:	dfc00117 	ldw	ra,4(sp)
  811320:	df000017 	ldw	fp,0(sp)
  811324:	dec00204 	addi	sp,sp,8
  811328:	f800283a 	ret

0081132c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81132c:	defffd04 	addi	sp,sp,-12
  811330:	dfc00215 	stw	ra,8(sp)
  811334:	df000115 	stw	fp,4(sp)
  811338:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81133c:	00802074 	movhi	r2,129
  811340:	108f8e04 	addi	r2,r2,15928
  811344:	10800017 	ldw	r2,0(r2)
  811348:	1005003a 	cmpeq	r2,r2,zero
  81134c:	1000061e 	bne	r2,zero,811368 <alt_get_errno+0x3c>
  811350:	00802074 	movhi	r2,129
  811354:	108f8e04 	addi	r2,r2,15928
  811358:	10800017 	ldw	r2,0(r2)
  81135c:	103ee83a 	callr	r2
  811360:	e0bfff15 	stw	r2,-4(fp)
  811364:	00000306 	br	811374 <alt_get_errno+0x48>
  811368:	00802074 	movhi	r2,129
  81136c:	1096a004 	addi	r2,r2,23168
  811370:	e0bfff15 	stw	r2,-4(fp)
  811374:	e0bfff17 	ldw	r2,-4(fp)
}
  811378:	e037883a 	mov	sp,fp
  81137c:	dfc00117 	ldw	ra,4(sp)
  811380:	df000017 	ldw	fp,0(sp)
  811384:	dec00204 	addi	sp,sp,8
  811388:	f800283a 	ret

0081138c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  81138c:	defffa04 	addi	sp,sp,-24
  811390:	df000515 	stw	fp,20(sp)
  811394:	df000504 	addi	fp,sp,20
  811398:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81139c:	0005303a 	rdctl	r2,status
  8113a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8113a4:	e0fffd17 	ldw	r3,-12(fp)
  8113a8:	00bfff84 	movi	r2,-2
  8113ac:	1884703a 	and	r2,r3,r2
  8113b0:	1001703a 	wrctl	status,r2
  
  return context;
  8113b4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8113b8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8113bc:	e0bfff17 	ldw	r2,-4(fp)
  8113c0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8113c4:	e0bffc17 	ldw	r2,-16(fp)
  8113c8:	10c00017 	ldw	r3,0(r2)
  8113cc:	e0bffc17 	ldw	r2,-16(fp)
  8113d0:	10800117 	ldw	r2,4(r2)
  8113d4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8113d8:	e0bffc17 	ldw	r2,-16(fp)
  8113dc:	10c00117 	ldw	r3,4(r2)
  8113e0:	e0bffc17 	ldw	r2,-16(fp)
  8113e4:	10800017 	ldw	r2,0(r2)
  8113e8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8113ec:	e0fffc17 	ldw	r3,-16(fp)
  8113f0:	e0bffc17 	ldw	r2,-16(fp)
  8113f4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8113f8:	e0fffc17 	ldw	r3,-16(fp)
  8113fc:	e0bffc17 	ldw	r2,-16(fp)
  811400:	18800015 	stw	r2,0(r3)
  811404:	e0bffe17 	ldw	r2,-8(fp)
  811408:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81140c:	e0bffb17 	ldw	r2,-20(fp)
  811410:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  811414:	e037883a 	mov	sp,fp
  811418:	df000017 	ldw	fp,0(sp)
  81141c:	dec00104 	addi	sp,sp,4
  811420:	f800283a 	ret

00811424 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  811424:	defffb04 	addi	sp,sp,-20
  811428:	dfc00415 	stw	ra,16(sp)
  81142c:	df000315 	stw	fp,12(sp)
  811430:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  811434:	d0a01a17 	ldw	r2,-32664(gp)
  811438:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81143c:	d0a72b17 	ldw	r2,-25428(gp)
  811440:	10800044 	addi	r2,r2,1
  811444:	d0a72b15 	stw	r2,-25428(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811448:	00003106 	br	811510 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  81144c:	e0bffe17 	ldw	r2,-8(fp)
  811450:	10800017 	ldw	r2,0(r2)
  811454:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  811458:	e0bffe17 	ldw	r2,-8(fp)
  81145c:	10800403 	ldbu	r2,16(r2)
  811460:	10803fcc 	andi	r2,r2,255
  811464:	1005003a 	cmpeq	r2,r2,zero
  811468:	1000051e 	bne	r2,zero,811480 <alt_tick+0x5c>
  81146c:	d0a72b17 	ldw	r2,-25428(gp)
  811470:	1004c03a 	cmpne	r2,r2,zero
  811474:	1000021e 	bne	r2,zero,811480 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  811478:	e0bffe17 	ldw	r2,-8(fp)
  81147c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  811480:	e0bffe17 	ldw	r2,-8(fp)
  811484:	10c00217 	ldw	r3,8(r2)
  811488:	d0a72b17 	ldw	r2,-25428(gp)
  81148c:	10c01e36 	bltu	r2,r3,811508 <alt_tick+0xe4>
  811490:	e0bffe17 	ldw	r2,-8(fp)
  811494:	10800403 	ldbu	r2,16(r2)
  811498:	10803fcc 	andi	r2,r2,255
  81149c:	1004c03a 	cmpne	r2,r2,zero
  8114a0:	1000191e 	bne	r2,zero,811508 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  8114a4:	e0bffe17 	ldw	r2,-8(fp)
  8114a8:	10c00317 	ldw	r3,12(r2)
  8114ac:	e0bffe17 	ldw	r2,-8(fp)
  8114b0:	11000517 	ldw	r4,20(r2)
  8114b4:	183ee83a 	callr	r3
  8114b8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8114bc:	e0bffd17 	ldw	r2,-12(fp)
  8114c0:	1004c03a 	cmpne	r2,r2,zero
  8114c4:	1000031e 	bne	r2,zero,8114d4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8114c8:	e13ffe17 	ldw	r4,-8(fp)
  8114cc:	081138c0 	call	81138c <alt_alarm_stop>
  8114d0:	00000d06 	br	811508 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8114d4:	e0bffe17 	ldw	r2,-8(fp)
  8114d8:	10c00217 	ldw	r3,8(r2)
  8114dc:	e0bffd17 	ldw	r2,-12(fp)
  8114e0:	1887883a 	add	r3,r3,r2
  8114e4:	e0bffe17 	ldw	r2,-8(fp)
  8114e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8114ec:	e0bffe17 	ldw	r2,-8(fp)
  8114f0:	10c00217 	ldw	r3,8(r2)
  8114f4:	d0a72b17 	ldw	r2,-25428(gp)
  8114f8:	1880032e 	bgeu	r3,r2,811508 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8114fc:	e0fffe17 	ldw	r3,-8(fp)
  811500:	00800044 	movi	r2,1
  811504:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  811508:	e0bfff17 	ldw	r2,-4(fp)
  81150c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811510:	d0e01a04 	addi	r3,gp,-32664
  811514:	e0bffe17 	ldw	r2,-8(fp)
  811518:	10ffcc1e 	bne	r2,r3,81144c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  81151c:	e037883a 	mov	sp,fp
  811520:	dfc00117 	ldw	ra,4(sp)
  811524:	df000017 	ldw	fp,0(sp)
  811528:	dec00204 	addi	sp,sp,8
  81152c:	f800283a 	ret

00811530 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  811530:	deffff04 	addi	sp,sp,-4
  811534:	df000015 	stw	fp,0(sp)
  811538:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81153c:	000170fa 	wrctl	ienable,zero
}
  811540:	e037883a 	mov	sp,fp
  811544:	df000017 	ldw	fp,0(sp)
  811548:	dec00104 	addi	sp,sp,4
  81154c:	f800283a 	ret

00811550 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  811550:	defffa04 	addi	sp,sp,-24
  811554:	dfc00515 	stw	ra,20(sp)
  811558:	df000415 	stw	fp,16(sp)
  81155c:	df000404 	addi	fp,sp,16
  811560:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  811564:	00802074 	movhi	r2,129
  811568:	108f8904 	addi	r2,r2,15908
  81156c:	10800017 	ldw	r2,0(r2)
  811570:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811574:	00003306 	br	811644 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  811578:	e0bffd17 	ldw	r2,-12(fp)
  81157c:	11000217 	ldw	r4,8(r2)
  811580:	0803e580 	call	803e58 <strlen>
  811584:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  811588:	e0bffd17 	ldw	r2,-12(fp)
  81158c:	10c00217 	ldw	r3,8(r2)
  811590:	e0bffc17 	ldw	r2,-16(fp)
  811594:	1885883a 	add	r2,r3,r2
  811598:	10bfffc4 	addi	r2,r2,-1
  81159c:	10800003 	ldbu	r2,0(r2)
  8115a0:	10803fcc 	andi	r2,r2,255
  8115a4:	1080201c 	xori	r2,r2,128
  8115a8:	10bfe004 	addi	r2,r2,-128
  8115ac:	10800bd8 	cmpnei	r2,r2,47
  8115b0:	1000031e 	bne	r2,zero,8115c0 <alt_find_file+0x70>
    {
      len -= 1;
  8115b4:	e0bffc17 	ldw	r2,-16(fp)
  8115b8:	10bfffc4 	addi	r2,r2,-1
  8115bc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8115c0:	e0bffc17 	ldw	r2,-16(fp)
  8115c4:	1007883a 	mov	r3,r2
  8115c8:	e0bffe17 	ldw	r2,-8(fp)
  8115cc:	1885883a 	add	r2,r3,r2
  8115d0:	10800003 	ldbu	r2,0(r2)
  8115d4:	10803fcc 	andi	r2,r2,255
  8115d8:	1080201c 	xori	r2,r2,128
  8115dc:	10bfe004 	addi	r2,r2,-128
  8115e0:	10800be0 	cmpeqi	r2,r2,47
  8115e4:	10000a1e 	bne	r2,zero,811610 <alt_find_file+0xc0>
  8115e8:	e0bffc17 	ldw	r2,-16(fp)
  8115ec:	1007883a 	mov	r3,r2
  8115f0:	e0bffe17 	ldw	r2,-8(fp)
  8115f4:	1885883a 	add	r2,r3,r2
  8115f8:	10800003 	ldbu	r2,0(r2)
  8115fc:	10803fcc 	andi	r2,r2,255
  811600:	1080201c 	xori	r2,r2,128
  811604:	10bfe004 	addi	r2,r2,-128
  811608:	1004c03a 	cmpne	r2,r2,zero
  81160c:	10000a1e 	bne	r2,zero,811638 <alt_find_file+0xe8>
  811610:	e0bffd17 	ldw	r2,-12(fp)
  811614:	11000217 	ldw	r4,8(r2)
  811618:	e1bffc17 	ldw	r6,-16(fp)
  81161c:	e17ffe17 	ldw	r5,-8(fp)
  811620:	08118040 	call	811804 <memcmp>
  811624:	1004c03a 	cmpne	r2,r2,zero
  811628:	1000031e 	bne	r2,zero,811638 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81162c:	e0bffd17 	ldw	r2,-12(fp)
  811630:	e0bfff15 	stw	r2,-4(fp)
  811634:	00000806 	br	811658 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  811638:	e0bffd17 	ldw	r2,-12(fp)
  81163c:	10800017 	ldw	r2,0(r2)
  811640:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811644:	00c02074 	movhi	r3,129
  811648:	18cf8904 	addi	r3,r3,15908
  81164c:	e0bffd17 	ldw	r2,-12(fp)
  811650:	10ffc91e 	bne	r2,r3,811578 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  811654:	e03fff15 	stw	zero,-4(fp)
  811658:	e0bfff17 	ldw	r2,-4(fp)
}
  81165c:	e037883a 	mov	sp,fp
  811660:	dfc00117 	ldw	ra,4(sp)
  811664:	df000017 	ldw	fp,0(sp)
  811668:	dec00204 	addi	sp,sp,8
  81166c:	f800283a 	ret

00811670 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  811670:	defffc04 	addi	sp,sp,-16
  811674:	df000315 	stw	fp,12(sp)
  811678:	df000304 	addi	fp,sp,12
  81167c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  811680:	00bffa04 	movi	r2,-24
  811684:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811688:	e03ffe15 	stw	zero,-8(fp)
  81168c:	00001e06 	br	811708 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  811690:	e0bffe17 	ldw	r2,-8(fp)
  811694:	00c02074 	movhi	r3,129
  811698:	18caa604 	addi	r3,r3,10904
  81169c:	10800324 	muli	r2,r2,12
  8116a0:	10c5883a 	add	r2,r2,r3
  8116a4:	10800017 	ldw	r2,0(r2)
  8116a8:	1004c03a 	cmpne	r2,r2,zero
  8116ac:	1000131e 	bne	r2,zero,8116fc <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  8116b0:	e0bffe17 	ldw	r2,-8(fp)
  8116b4:	00c02074 	movhi	r3,129
  8116b8:	18caa604 	addi	r3,r3,10904
  8116bc:	10800324 	muli	r2,r2,12
  8116c0:	10c7883a 	add	r3,r2,r3
  8116c4:	e0bfff17 	ldw	r2,-4(fp)
  8116c8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8116cc:	00802074 	movhi	r2,129
  8116d0:	108f8d04 	addi	r2,r2,15924
  8116d4:	10c00017 	ldw	r3,0(r2)
  8116d8:	e0bffe17 	ldw	r2,-8(fp)
  8116dc:	1880040e 	bge	r3,r2,8116f0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  8116e0:	00c02074 	movhi	r3,129
  8116e4:	18cf8d04 	addi	r3,r3,15924
  8116e8:	e0bffe17 	ldw	r2,-8(fp)
  8116ec:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  8116f0:	e0bffe17 	ldw	r2,-8(fp)
  8116f4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  8116f8:	00000606 	br	811714 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8116fc:	e0bffe17 	ldw	r2,-8(fp)
  811700:	10800044 	addi	r2,r2,1
  811704:	e0bffe15 	stw	r2,-8(fp)
  811708:	e0bffe17 	ldw	r2,-8(fp)
  81170c:	10800810 	cmplti	r2,r2,32
  811710:	103fdf1e 	bne	r2,zero,811690 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  811714:	e0bffd17 	ldw	r2,-12(fp)
}
  811718:	e037883a 	mov	sp,fp
  81171c:	df000017 	ldw	fp,0(sp)
  811720:	dec00104 	addi	sp,sp,4
  811724:	f800283a 	ret

00811728 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  811728:	defffb04 	addi	sp,sp,-20
  81172c:	df000415 	stw	fp,16(sp)
  811730:	df000404 	addi	fp,sp,16
  811734:	e13ffe15 	stw	r4,-8(fp)
  811738:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  81173c:	e0bfff17 	ldw	r2,-4(fp)
  811740:	10840070 	cmpltui	r2,r2,4097
  811744:	1000021e 	bne	r2,zero,811750 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  811748:	00840004 	movi	r2,4096
  81174c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  811750:	e0fffe17 	ldw	r3,-8(fp)
  811754:	e0bfff17 	ldw	r2,-4(fp)
  811758:	1885883a 	add	r2,r3,r2
  81175c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811760:	e0bffe17 	ldw	r2,-8(fp)
  811764:	e0bffd15 	stw	r2,-12(fp)
  811768:	00000506 	br	811780 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  81176c:	e0bffd17 	ldw	r2,-12(fp)
  811770:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811774:	e0bffd17 	ldw	r2,-12(fp)
  811778:	10800804 	addi	r2,r2,32
  81177c:	e0bffd15 	stw	r2,-12(fp)
  811780:	e0fffd17 	ldw	r3,-12(fp)
  811784:	e0bffc17 	ldw	r2,-16(fp)
  811788:	18bff836 	bltu	r3,r2,81176c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  81178c:	e0bffe17 	ldw	r2,-8(fp)
  811790:	108007cc 	andi	r2,r2,31
  811794:	1005003a 	cmpeq	r2,r2,zero
  811798:	1000021e 	bne	r2,zero,8117a4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  81179c:	e0bffd17 	ldw	r2,-12(fp)
  8117a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8117a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8117a8:	e037883a 	mov	sp,fp
  8117ac:	df000017 	ldw	fp,0(sp)
  8117b0:	dec00104 	addi	sp,sp,4
  8117b4:	f800283a 	ret

008117b8 <atexit>:
  8117b8:	200b883a 	mov	r5,r4
  8117bc:	000d883a 	mov	r6,zero
  8117c0:	0009883a 	mov	r4,zero
  8117c4:	000f883a 	mov	r7,zero
  8117c8:	08119681 	jmpi	811968 <__register_exitproc>

008117cc <exit>:
  8117cc:	defffe04 	addi	sp,sp,-8
  8117d0:	000b883a 	mov	r5,zero
  8117d4:	dc000015 	stw	r16,0(sp)
  8117d8:	dfc00115 	stw	ra,4(sp)
  8117dc:	2021883a 	mov	r16,r4
  8117e0:	0811aa00 	call	811aa0 <__call_exitprocs>
  8117e4:	00802074 	movhi	r2,129
  8117e8:	108f8404 	addi	r2,r2,15888
  8117ec:	11000017 	ldw	r4,0(r2)
  8117f0:	20800f17 	ldw	r2,60(r4)
  8117f4:	10000126 	beq	r2,zero,8117fc <exit+0x30>
  8117f8:	103ee83a 	callr	r2
  8117fc:	8009883a 	mov	r4,r16
  811800:	0811c900 	call	811c90 <_exit>

00811804 <memcmp>:
  811804:	00c000c4 	movi	r3,3
  811808:	1980032e 	bgeu	r3,r6,811818 <memcmp+0x14>
  81180c:	2144b03a 	or	r2,r4,r5
  811810:	10c4703a 	and	r2,r2,r3
  811814:	10000f26 	beq	r2,zero,811854 <memcmp+0x50>
  811818:	31ffffc4 	addi	r7,r6,-1
  81181c:	3000061e 	bne	r6,zero,811838 <memcmp+0x34>
  811820:	00000a06 	br	81184c <memcmp+0x48>
  811824:	39ffffc4 	addi	r7,r7,-1
  811828:	00bfffc4 	movi	r2,-1
  81182c:	21000044 	addi	r4,r4,1
  811830:	29400044 	addi	r5,r5,1
  811834:	38800526 	beq	r7,r2,81184c <memcmp+0x48>
  811838:	20c00003 	ldbu	r3,0(r4)
  81183c:	28800003 	ldbu	r2,0(r5)
  811840:	18bff826 	beq	r3,r2,811824 <memcmp+0x20>
  811844:	1885c83a 	sub	r2,r3,r2
  811848:	f800283a 	ret
  81184c:	0005883a 	mov	r2,zero
  811850:	f800283a 	ret
  811854:	180f883a 	mov	r7,r3
  811858:	20c00017 	ldw	r3,0(r4)
  81185c:	28800017 	ldw	r2,0(r5)
  811860:	18bfed1e 	bne	r3,r2,811818 <memcmp+0x14>
  811864:	31bfff04 	addi	r6,r6,-4
  811868:	21000104 	addi	r4,r4,4
  81186c:	29400104 	addi	r5,r5,4
  811870:	39bff936 	bltu	r7,r6,811858 <memcmp+0x54>
  811874:	003fe806 	br	811818 <memcmp+0x14>

00811878 <strncmp>:
  811878:	30003926 	beq	r6,zero,811960 <strncmp+0xe8>
  81187c:	2144b03a 	or	r2,r4,r5
  811880:	108000cc 	andi	r2,r2,3
  811884:	028000c4 	movi	r10,3
  811888:	1000241e 	bne	r2,zero,81191c <strncmp+0xa4>
  81188c:	2011883a 	mov	r8,r4
  811890:	280f883a 	mov	r7,r5
  811894:	51801f2e 	bgeu	r10,r6,811914 <strncmp+0x9c>
  811898:	21000017 	ldw	r4,0(r4)
  81189c:	28800017 	ldw	r2,0(r5)
  8118a0:	20801c1e 	bne	r4,r2,811914 <strncmp+0x9c>
  8118a4:	31bfff04 	addi	r6,r6,-4
  8118a8:	30002d26 	beq	r6,zero,811960 <strncmp+0xe8>
  8118ac:	027fbff4 	movhi	r9,65279
  8118b0:	4a7fbfc4 	addi	r9,r9,-257
  8118b4:	2247883a 	add	r3,r4,r9
  8118b8:	01602074 	movhi	r5,32897
  8118bc:	29602004 	addi	r5,r5,-32640
  8118c0:	1946703a 	and	r3,r3,r5
  8118c4:	0104303a 	nor	r2,zero,r4
  8118c8:	10c4703a 	and	r2,r2,r3
  8118cc:	1000241e 	bne	r2,zero,811960 <strncmp+0xe8>
  8118d0:	5017883a 	mov	r11,r10
  8118d4:	4815883a 	mov	r10,r9
  8118d8:	2813883a 	mov	r9,r5
  8118dc:	00000a06 	br	811908 <strncmp+0x90>
  8118e0:	41000017 	ldw	r4,0(r8)
  8118e4:	39400017 	ldw	r5,0(r7)
  8118e8:	2285883a 	add	r2,r4,r10
  8118ec:	1244703a 	and	r2,r2,r9
  8118f0:	0106303a 	nor	r3,zero,r4
  8118f4:	1886703a 	and	r3,r3,r2
  8118f8:	2140061e 	bne	r4,r5,811914 <strncmp+0x9c>
  8118fc:	31bfff04 	addi	r6,r6,-4
  811900:	30001726 	beq	r6,zero,811960 <strncmp+0xe8>
  811904:	1800161e 	bne	r3,zero,811960 <strncmp+0xe8>
  811908:	42000104 	addi	r8,r8,4
  81190c:	39c00104 	addi	r7,r7,4
  811910:	59bff336 	bltu	r11,r6,8118e0 <strncmp+0x68>
  811914:	4009883a 	mov	r4,r8
  811918:	380b883a 	mov	r5,r7
  81191c:	31bfffc4 	addi	r6,r6,-1
  811920:	01ffffc4 	movi	r7,-1
  811924:	31c00a1e 	bne	r6,r7,811950 <strncmp+0xd8>
  811928:	20c00003 	ldbu	r3,0(r4)
  81192c:	28800003 	ldbu	r2,0(r5)
  811930:	1885c83a 	sub	r2,r3,r2
  811934:	f800283a 	ret
  811938:	30000926 	beq	r6,zero,811960 <strncmp+0xe8>
  81193c:	18000826 	beq	r3,zero,811960 <strncmp+0xe8>
  811940:	31bfffc4 	addi	r6,r6,-1
  811944:	21000044 	addi	r4,r4,1
  811948:	29400044 	addi	r5,r5,1
  81194c:	31fff626 	beq	r6,r7,811928 <strncmp+0xb0>
  811950:	20c00007 	ldb	r3,0(r4)
  811954:	28800007 	ldb	r2,0(r5)
  811958:	18bff726 	beq	r3,r2,811938 <strncmp+0xc0>
  81195c:	003ff206 	br	811928 <strncmp+0xb0>
  811960:	0005883a 	mov	r2,zero
  811964:	f800283a 	ret

00811968 <__register_exitproc>:
  811968:	defffa04 	addi	sp,sp,-24
  81196c:	00802074 	movhi	r2,129
  811970:	108f8404 	addi	r2,r2,15888
  811974:	dc000015 	stw	r16,0(sp)
  811978:	14000017 	ldw	r16,0(r2)
  81197c:	dd000415 	stw	r20,16(sp)
  811980:	2829883a 	mov	r20,r5
  811984:	81405217 	ldw	r5,328(r16)
  811988:	dcc00315 	stw	r19,12(sp)
  81198c:	dc800215 	stw	r18,8(sp)
  811990:	dc400115 	stw	r17,4(sp)
  811994:	dfc00515 	stw	ra,20(sp)
  811998:	2023883a 	mov	r17,r4
  81199c:	3027883a 	mov	r19,r6
  8119a0:	3825883a 	mov	r18,r7
  8119a4:	28002526 	beq	r5,zero,811a3c <__register_exitproc+0xd4>
  8119a8:	29000117 	ldw	r4,4(r5)
  8119ac:	008007c4 	movi	r2,31
  8119b0:	11002716 	blt	r2,r4,811a50 <__register_exitproc+0xe8>
  8119b4:	8800101e 	bne	r17,zero,8119f8 <__register_exitproc+0x90>
  8119b8:	2105883a 	add	r2,r4,r4
  8119bc:	1085883a 	add	r2,r2,r2
  8119c0:	20c00044 	addi	r3,r4,1
  8119c4:	1145883a 	add	r2,r2,r5
  8119c8:	0009883a 	mov	r4,zero
  8119cc:	15000215 	stw	r20,8(r2)
  8119d0:	28c00115 	stw	r3,4(r5)
  8119d4:	2005883a 	mov	r2,r4
  8119d8:	dfc00517 	ldw	ra,20(sp)
  8119dc:	dd000417 	ldw	r20,16(sp)
  8119e0:	dcc00317 	ldw	r19,12(sp)
  8119e4:	dc800217 	ldw	r18,8(sp)
  8119e8:	dc400117 	ldw	r17,4(sp)
  8119ec:	dc000017 	ldw	r16,0(sp)
  8119f0:	dec00604 	addi	sp,sp,24
  8119f4:	f800283a 	ret
  8119f8:	29802204 	addi	r6,r5,136
  8119fc:	00800044 	movi	r2,1
  811a00:	110e983a 	sll	r7,r2,r4
  811a04:	30c04017 	ldw	r3,256(r6)
  811a08:	2105883a 	add	r2,r4,r4
  811a0c:	1085883a 	add	r2,r2,r2
  811a10:	1185883a 	add	r2,r2,r6
  811a14:	19c6b03a 	or	r3,r3,r7
  811a18:	14802015 	stw	r18,128(r2)
  811a1c:	14c00015 	stw	r19,0(r2)
  811a20:	00800084 	movi	r2,2
  811a24:	30c04015 	stw	r3,256(r6)
  811a28:	88bfe31e 	bne	r17,r2,8119b8 <__register_exitproc+0x50>
  811a2c:	30804117 	ldw	r2,260(r6)
  811a30:	11c4b03a 	or	r2,r2,r7
  811a34:	30804115 	stw	r2,260(r6)
  811a38:	003fdf06 	br	8119b8 <__register_exitproc+0x50>
  811a3c:	00802074 	movhi	r2,129
  811a40:	1096f104 	addi	r2,r2,23492
  811a44:	100b883a 	mov	r5,r2
  811a48:	80805215 	stw	r2,328(r16)
  811a4c:	003fd606 	br	8119a8 <__register_exitproc+0x40>
  811a50:	00800034 	movhi	r2,0
  811a54:	10800004 	addi	r2,r2,0
  811a58:	1000021e 	bne	r2,zero,811a64 <__register_exitproc+0xfc>
  811a5c:	013fffc4 	movi	r4,-1
  811a60:	003fdc06 	br	8119d4 <__register_exitproc+0x6c>
  811a64:	01006404 	movi	r4,400
  811a68:	103ee83a 	callr	r2
  811a6c:	1007883a 	mov	r3,r2
  811a70:	103ffa26 	beq	r2,zero,811a5c <__register_exitproc+0xf4>
  811a74:	80805217 	ldw	r2,328(r16)
  811a78:	180b883a 	mov	r5,r3
  811a7c:	18000115 	stw	zero,4(r3)
  811a80:	18800015 	stw	r2,0(r3)
  811a84:	80c05215 	stw	r3,328(r16)
  811a88:	18006215 	stw	zero,392(r3)
  811a8c:	18006315 	stw	zero,396(r3)
  811a90:	0009883a 	mov	r4,zero
  811a94:	883fc826 	beq	r17,zero,8119b8 <__register_exitproc+0x50>
  811a98:	003fd706 	br	8119f8 <__register_exitproc+0x90>

00811a9c <register_fini>:
  811a9c:	f800283a 	ret

00811aa0 <__call_exitprocs>:
  811aa0:	00802074 	movhi	r2,129
  811aa4:	108f8404 	addi	r2,r2,15888
  811aa8:	10800017 	ldw	r2,0(r2)
  811aac:	defff304 	addi	sp,sp,-52
  811ab0:	df000b15 	stw	fp,44(sp)
  811ab4:	d8800115 	stw	r2,4(sp)
  811ab8:	00800034 	movhi	r2,0
  811abc:	10800004 	addi	r2,r2,0
  811ac0:	1005003a 	cmpeq	r2,r2,zero
  811ac4:	d8800215 	stw	r2,8(sp)
  811ac8:	d8800117 	ldw	r2,4(sp)
  811acc:	dd400815 	stw	r21,32(sp)
  811ad0:	dd000715 	stw	r20,28(sp)
  811ad4:	10805204 	addi	r2,r2,328
  811ad8:	dfc00c15 	stw	ra,48(sp)
  811adc:	ddc00a15 	stw	r23,40(sp)
  811ae0:	dd800915 	stw	r22,36(sp)
  811ae4:	dcc00615 	stw	r19,24(sp)
  811ae8:	dc800515 	stw	r18,20(sp)
  811aec:	dc400415 	stw	r17,16(sp)
  811af0:	dc000315 	stw	r16,12(sp)
  811af4:	282b883a 	mov	r21,r5
  811af8:	2039883a 	mov	fp,r4
  811afc:	d8800015 	stw	r2,0(sp)
  811b00:	2829003a 	cmpeq	r20,r5,zero
  811b04:	d8800117 	ldw	r2,4(sp)
  811b08:	14405217 	ldw	r17,328(r2)
  811b0c:	88001026 	beq	r17,zero,811b50 <__call_exitprocs+0xb0>
  811b10:	ddc00017 	ldw	r23,0(sp)
  811b14:	88800117 	ldw	r2,4(r17)
  811b18:	8c802204 	addi	r18,r17,136
  811b1c:	143fffc4 	addi	r16,r2,-1
  811b20:	80000916 	blt	r16,zero,811b48 <__call_exitprocs+0xa8>
  811b24:	05bfffc4 	movi	r22,-1
  811b28:	a000151e 	bne	r20,zero,811b80 <__call_exitprocs+0xe0>
  811b2c:	8409883a 	add	r4,r16,r16
  811b30:	2105883a 	add	r2,r4,r4
  811b34:	1485883a 	add	r2,r2,r18
  811b38:	10c02017 	ldw	r3,128(r2)
  811b3c:	a8c01126 	beq	r21,r3,811b84 <__call_exitprocs+0xe4>
  811b40:	843fffc4 	addi	r16,r16,-1
  811b44:	85bff81e 	bne	r16,r22,811b28 <__call_exitprocs+0x88>
  811b48:	d8800217 	ldw	r2,8(sp)
  811b4c:	10003126 	beq	r2,zero,811c14 <__call_exitprocs+0x174>
  811b50:	dfc00c17 	ldw	ra,48(sp)
  811b54:	df000b17 	ldw	fp,44(sp)
  811b58:	ddc00a17 	ldw	r23,40(sp)
  811b5c:	dd800917 	ldw	r22,36(sp)
  811b60:	dd400817 	ldw	r21,32(sp)
  811b64:	dd000717 	ldw	r20,28(sp)
  811b68:	dcc00617 	ldw	r19,24(sp)
  811b6c:	dc800517 	ldw	r18,20(sp)
  811b70:	dc400417 	ldw	r17,16(sp)
  811b74:	dc000317 	ldw	r16,12(sp)
  811b78:	dec00d04 	addi	sp,sp,52
  811b7c:	f800283a 	ret
  811b80:	8409883a 	add	r4,r16,r16
  811b84:	88c00117 	ldw	r3,4(r17)
  811b88:	2105883a 	add	r2,r4,r4
  811b8c:	1445883a 	add	r2,r2,r17
  811b90:	18ffffc4 	addi	r3,r3,-1
  811b94:	11800217 	ldw	r6,8(r2)
  811b98:	1c001526 	beq	r3,r16,811bf0 <__call_exitprocs+0x150>
  811b9c:	10000215 	stw	zero,8(r2)
  811ba0:	303fe726 	beq	r6,zero,811b40 <__call_exitprocs+0xa0>
  811ba4:	00c00044 	movi	r3,1
  811ba8:	1c06983a 	sll	r3,r3,r16
  811bac:	90804017 	ldw	r2,256(r18)
  811bb0:	8cc00117 	ldw	r19,4(r17)
  811bb4:	1884703a 	and	r2,r3,r2
  811bb8:	10001426 	beq	r2,zero,811c0c <__call_exitprocs+0x16c>
  811bbc:	90804117 	ldw	r2,260(r18)
  811bc0:	1884703a 	and	r2,r3,r2
  811bc4:	10000c1e 	bne	r2,zero,811bf8 <__call_exitprocs+0x158>
  811bc8:	2105883a 	add	r2,r4,r4
  811bcc:	1485883a 	add	r2,r2,r18
  811bd0:	11400017 	ldw	r5,0(r2)
  811bd4:	e009883a 	mov	r4,fp
  811bd8:	303ee83a 	callr	r6
  811bdc:	88800117 	ldw	r2,4(r17)
  811be0:	98bfc81e 	bne	r19,r2,811b04 <__call_exitprocs+0x64>
  811be4:	b8800017 	ldw	r2,0(r23)
  811be8:	147fd526 	beq	r2,r17,811b40 <__call_exitprocs+0xa0>
  811bec:	003fc506 	br	811b04 <__call_exitprocs+0x64>
  811bf0:	8c000115 	stw	r16,4(r17)
  811bf4:	003fea06 	br	811ba0 <__call_exitprocs+0x100>
  811bf8:	2105883a 	add	r2,r4,r4
  811bfc:	1485883a 	add	r2,r2,r18
  811c00:	11000017 	ldw	r4,0(r2)
  811c04:	303ee83a 	callr	r6
  811c08:	003ff406 	br	811bdc <__call_exitprocs+0x13c>
  811c0c:	303ee83a 	callr	r6
  811c10:	003ff206 	br	811bdc <__call_exitprocs+0x13c>
  811c14:	88800117 	ldw	r2,4(r17)
  811c18:	1000081e 	bne	r2,zero,811c3c <__call_exitprocs+0x19c>
  811c1c:	89000017 	ldw	r4,0(r17)
  811c20:	20000726 	beq	r4,zero,811c40 <__call_exitprocs+0x1a0>
  811c24:	b9000015 	stw	r4,0(r23)
  811c28:	8809883a 	mov	r4,r17
  811c2c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  811c30:	bc400017 	ldw	r17,0(r23)
  811c34:	883fb71e 	bne	r17,zero,811b14 <__call_exitprocs+0x74>
  811c38:	003fc506 	br	811b50 <__call_exitprocs+0xb0>
  811c3c:	89000017 	ldw	r4,0(r17)
  811c40:	882f883a 	mov	r23,r17
  811c44:	2023883a 	mov	r17,r4
  811c48:	883fb21e 	bne	r17,zero,811b14 <__call_exitprocs+0x74>
  811c4c:	003fc006 	br	811b50 <__call_exitprocs+0xb0>

00811c50 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  811c50:	defffd04 	addi	sp,sp,-12
  811c54:	df000215 	stw	fp,8(sp)
  811c58:	df000204 	addi	fp,sp,8
  811c5c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  811c60:	e0bfff17 	ldw	r2,-4(fp)
  811c64:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  811c68:	e0bffe17 	ldw	r2,-8(fp)
  811c6c:	1005003a 	cmpeq	r2,r2,zero
  811c70:	1000021e 	bne	r2,zero,811c7c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  811c74:	002af070 	cmpltui	zero,zero,43969
  811c78:	00000106 	br	811c80 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  811c7c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  811c80:	e037883a 	mov	sp,fp
  811c84:	df000017 	ldw	fp,0(sp)
  811c88:	dec00104 	addi	sp,sp,4
  811c8c:	f800283a 	ret

00811c90 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  811c90:	defffd04 	addi	sp,sp,-12
  811c94:	dfc00215 	stw	ra,8(sp)
  811c98:	df000115 	stw	fp,4(sp)
  811c9c:	df000104 	addi	fp,sp,4
  811ca0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  811ca4:	e13fff17 	ldw	r4,-4(fp)
  811ca8:	0811c500 	call	811c50 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  811cac:	003fff06 	br	811cac <_exit+0x1c>
  811cb0:	00000010 	cmplti	zero,zero,0
  811cb4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  811cb8:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_3+0x4b7a0>
  811cbc:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_3+0x1187c0>
  811cc0:	001b0c0b 	ldhu	zero,27696(zero)
  811cc4:	00000028 	cmpgeui	zero,zero,0
  811cc8:	00000018 	cmpnei	zero,zero,0
  811ccc:	0080b040 	call	80b04 <__alt_mem_onchip_memory2_3+0x79b04>
  811cd0:	000005dc 	xori	zero,zero,23
  811cd4:	400e4400 	call	400e440 <__alt_data_end+0x34be440>
  811cd8:	92099170 	cmpltui	r8,r18,9797
  811cdc:	95079308 	cmpgei	r20,r18,7756
  811ce0:	97049605 	stb	fp,4696(r18)
  811ce4:	90019f03 	ldbu	zero,1660(r18)
  811ce8:	9c06940a 	0x9c06940a
  811cec:	00000002 	0x2
  811cf0:	00000028 	cmpgeui	zero,zero,0
  811cf4:	00000044 	movi	zero,1
  811cf8:	0080b61c 	xori	r2,zero,728
  811cfc:	000005b0 	cmpltui	zero,zero,22
  811d00:	3c0e4400 	call	3c0e440 <__alt_data_end+0x30be440>
  811d04:	92099168 	cmpgeui	r8,r18,9797
  811d08:	95079308 	cmpgei	r20,r18,7756
  811d0c:	9c039705 	stb	r16,3676(r19)
  811d10:	90019f02 	0x90019f02
  811d14:	9606940a 	0x9606940a
  811d18:	00000004 	movi	zero,0
  811d1c:	00811a9c 	xori	r2,zero,1130
