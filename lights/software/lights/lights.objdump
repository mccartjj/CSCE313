
lights.elf:     file format elf32-littlenios2
lights.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00011d68 memsz 0x00011d68 flags r-x
    LOAD off    0x00012d88 vaddr 0x00811d88 paddr 0x0081398c align 2**12
         filesz 0x00001c04 memsz 0x00001c04 flags rw-
    LOAD off    0x00015590 vaddr 0x00815590 paddr 0x00815590 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000116bc  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000518  00811870  00811870  00012870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c04  00811d88  0081398c  00012d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  00815590  00815590  00015590  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0001498c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000010d8  00000000  00000000  000149b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001cae  00000000  00000000  00015a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002b4f7  00000000  00000000  00017736  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a409  00000000  00000000  00042c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001a7a5  00000000  00000000  0004d036  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000232c  00000000  00000000  000677dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002ced  00000000  00000000  00069b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e712  00000000  00000000  0006c7f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0007af08  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c90  00000000  00000000  0007af38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007fbbf  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007fbc2  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0007fbc7  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0007fbc8  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0007fbcc  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0007fbd0  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0007fbd4  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0007fbdf  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0007fbea  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0007fbf5  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0007fc00  2**0
                  CONTENTS, READONLY
 28 .jdi          0000ff9d  00000000  00000000  0007fc20  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000d9e6e  00000000  00000000  0008fbbd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00811870 l    d  .rodata	00000000 .rodata
00811d88 l    d  .rwdata	00000000 .rwdata
00815590 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Fractal.c
00000000 l    df *ABS*	00000000 Project.c
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 ef_pow.c
00813920 l     O .rwdata	00000008 bp
00813928 l     O .rwdata	00000008 dp_l
00813930 l     O .rwdata	00000008 dp_h
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_rint.c
008118fc l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_isnan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00801b80 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00802458 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00811d88 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00803894 l     F .text	00000058 __sprint_r
00811aa2 l     O .rodata	00000010 blanks.3452
00811a92 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
008058f8 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008072f4 l     F .text	00000058 std
00807400 l     F .text	00000008 __fp_lock
00807408 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00813948 l     O .rwdata	00000004 charset
00811ad0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00811c18 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080bedc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
0080c124 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080c184 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080c284 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080c3a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080c484 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080c5e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080c80c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081396c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080caa8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00812744 l     O .rwdata	00001060 jtag_uart_0
008137a4 l     O .rwdata	0000003c mailbox_0
008137e0 l     O .rwdata	0000003c mailbox_1
0081381c l     O .rwdata	0000003c mailbox_2
00813858 l     O .rwdata	0000003c mailbox_3
00813894 l     O .rwdata	00000030 altera_ro_zipfs
008138c4 l     O .rwdata	00000054 video_pixel_buffer_dma_0
0080cdd4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080d014 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080d23c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
0080da10 l     F .text	0000006c alt_avalon_mutex_reg
0080da7c l     F .text	00000060 alt_get_errno
0080dc10 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0080dde0 l     F .text	0000007c alt_mutex_trylock
0080deb4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_ro_zipfs.c
0080e26c l     F .text	00000074 read_word
0080e2e0 l     F .text	00000050 read_word_inc
0080e330 l     F .text	00000048 read_half_word
0080e378 l     F .text	00000050 read_half_word_inc
0080e3c8 l     F .text	00000118 check_file_header
0080e60c l     F .text	000000a0 check_directory_table
0080e6ac l     F .text	000000ac find_directory_entry
0080e758 l     F .text	00000160 find_file_entry_by_name
0080e8b8 l     F .text	00000180 find_file_entry
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00810594 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00810adc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00810c18 l     F .text	000000dc alt_file_locked
00810e7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
008115ec l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
008117a0 l     F .text	00000040 alt_sim_halt
00800200 g     F .text	0000006c genColor
008090b0 g     F .text	00000094 _mprec_log10
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
0080919c g     F .text	00000088 __any_on
0080a8a8 g     F .text	00000070 _isatty_r
00811bf0 g     O .rodata	00000028 __mprec_tinytens
0080c640 g     F .text	0000006c alt_main
0080dc60 g     F .text	000000a8 altera_avalon_mailbox_pend
0080fa48 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00803698 g     F .text	000000a0 _puts_r
008155f0 g     O .bss	00000100 alt_irq
0080a918 g     F .text	00000078 _lseek_r
0081398c g       *ABS*	00000000 __flash_rwdata_start
0080b958 g     F .text	00000088 __eqdf2
00815880 g       *ABS*	00000000 __alt_heap_start
0080dd08 g     F .text	000000d8 altera_avalon_mailbox_get
00803620 g     F .text	00000044 printf
0080a374 g     F .text	00000068 __sseek
0080735c g     F .text	000000a4 __sinit
0080e248 g     F .text	00000024 alt_get_cpu_freq
00808034 g     F .text	00000084 _setlocale_r
0080745c g     F .text	00000068 __sfmoreglue
0080c6cc g     F .text	00000020 __malloc_unlock
00802018 g     F .text	00000174 __divsf3
00808b2c g     F .text	000000e0 memmove
0080744c g     F .text	00000010 _cleanup
008006e0 g     F .text	00000458 powf
0080df74 g     F .text	00000040 altera_avalon_mutex_trylock
00809224 g     F .text	000000bc _Balloc
0080ee1c g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
0080b9e0 g     F .text	00000088 __gtdf2
00803610 g     F .text	00000010 __errno
0080eddc g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00800000 g     F .entry	0000001c __reset
0080e010 g     F .text	0000007c altera_avalon_mutex_is_mine
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080a834 g     F .text	00000074 _fstat_r
008155ac g     O .bss	00000004 errno
00802c3c g     F .text	00000038 __make_dp
008030d0 g     F .text	0000002c __make_fp
008155b4 g     O .bss	00000004 alt_argv
0081b918 g       *ABS*	00000000 _gp
00801d64 g     F .text	00000070 __subsf3
0080efbc g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00006000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
008125c4 g     O .rwdata	00000180 alt_fd_list
008106bc g     F .text	00000094 alt_find_dev
00808a8c g     F .text	000000a0 memcpy
00807440 g     F .text	0000000c _cleanup_r
0080bb78 g     F .text	000000f8 __floatsidf
00810750 g     F .text	00000090 alt_fs_reg
00810ba0 g     F .text	00000078 alt_io_redirect
0080baf0 g     F .text	00000088 __ltdf2
00811870 g       *ABS*	00000000 __DTOR_END__
00803738 g     F .text	00000014 puts
0080ea38 g     F .text	00000098 alt_ro_zipfs_open
00811080 g     F .text	00000020 altera_nios2_irq_init
00809000 g     F .text	000000b0 __ratio
0080db54 g     F .text	000000bc altera_avalon_mailbox_post
0080f06c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0080d454 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00803664 g     F .text	00000034 _printf_r
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0080c018 g     F .text	00000008 __udivsi3
0080c2e4 g     F .text	000000c0 isatty
00811b00 g     O .rodata	000000c8 __mprec_tens
0080db34 g     F .text	00000020 altera_avalon_mailbox_close
0080f6f8 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00808010 g     F .text	00000008 __locale_charset
008022f4 g     F .text	00000078 __lesf2
00811278 g     F .text	00000090 alt_icache_flush
008155a0 g     O .bss	00000004 __malloc_top_pad
0080e1e8 g     F .text	00000040 perf_get_num_starts
00813944 g     O .rwdata	00000004 __mb_cur_max
00808018 g     F .text	0000000c _localeconv_r
0080991c g     F .text	0000003c __i2b
008079f4 g     F .text	0000049c __sfvwrite_r
008019e0 g     F .text	0000001c finitef
0080a2fc g     F .text	00000070 _sbrk_r
0080fedc g     F .text	000000d0 helper_plot_pixel
008019d0 g     F .text	00000010 fabsf
0080a990 g     F .text	00000078 _read_r
00812188 g     O .rwdata	0000000c __lc_ctype
00813964 g     O .rwdata	00000004 alt_max_fd
00803410 g     F .text	00000138 __unpack_d
0080a710 g     F .text	00000110 _fclose_r
008072c0 g     F .text	00000034 fflush
008155a4 g     O .bss	00000004 __malloc_max_sbrked_mem
00802404 g     F .text	00000054 __extendsfdf2
008019fc g     F .text	00000018 isnanf
008028e8 g     F .text	00000074 __adddf3
00808ee0 g     F .text	00000120 __b2d
0080f0a0 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0080afe4 g     F .text	000005b0 __umoddi3
0080c4f0 g     F .text	000000f0 lseek
0080e08c g     F .text	00000058 altera_avalon_mutex_first_lock
0081391c g     O .rwdata	00000004 targetY
00813938 g     O .rwdata	00000004 __fdlib_version
00813940 g     O .rwdata	00000004 _global_impure_ptr
00809c98 g     F .text	000005f4 _realloc_r
00815880 g       *ABS*	00000000 __bss_end
008109e4 g     F .text	000000f8 alt_iic_isr_register
0080f204 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00810f74 g     F .text	0000010c alt_tick
0080aa08 g     F .text	000005dc __udivdi3
00811bc8 g     O .rodata	00000028 __mprec_bigtens
00809b78 g     F .text	00000120 __s2b
0080bd48 g     F .text	00000194 __floatunsidf
00808e00 g     F .text	00000060 __mcmp
00807428 g     F .text	00000018 __fp_lock_all
0081099c g     F .text	00000048 alt_ic_irq_enabled
00810edc g     F .text	00000098 alt_alarm_stop
008155bc g     O .bss	00000004 alt_irq_active
0080ebcc g     F .text	00000148 alt_ro_zipfs_seek
008000ec g     F .exceptions	000000c8 alt_irq_handler
0081259c g     O .rwdata	00000028 alt_dev_null
00800278 g     F .text	000000e8 barrier
0080de5c g     F .text	00000058 altera_avalon_mutex_open
008017c0 g     F .text	00000210 rint
00802f60 g     F .text	000000c8 __unpack_f
0081049c g     F .text	00000044 alt_dcache_flush_all
00808ccc g     F .text	00000070 __hi0bits
0080fe18 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0080bc70 g     F .text	000000d8 __fixdfsi
0081398c g       *ABS*	00000000 __ram_rwdata_end
0081395c g     O .rwdata	00000008 alt_dev_list
0080c988 g     F .text	00000120 write
0080ffac g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00802204 g     F .text	00000078 __gtsf2
00813978 g     O .rwdata	00000008 alt_mutex_list
00811d88 g       *ABS*	00000000 __ram_rodata_end
0080c1b0 g     F .text	000000d4 fstat
00809a58 g     F .text	00000120 __pow5mult
00815594 g     O .bss	00000004 __nlocale_changed
0080c020 g     F .text	00000008 __umodsi3
00815880 g       *ABS*	00000000 end
00802e00 g     F .text	00000160 __pack_f
00815590 g     O .bss	00000004 myPixelBuffer
0080cf54 g     F .text	000000c0 altera_avalon_jtag_uart_init
0081186c g       *ABS*	00000000 __CTOR_LIST__
00a00000 g       *ABS*	00000000 __alt_stack_pointer
00802d80 g     F .text	00000080 __clzsi2
0080d678 g     F .text	00000240 altera_avalon_jtag_uart_write
0080d8b8 g     F .text	00000158 alt_avalon_mailbox_init
0080734c g     F .text	00000004 __sfp_lock_acquire
008089a8 g     F .text	000000e4 memchr
008038ec g     F .text	00001eac ___vfprintf_internal_r
008037c0 g     F .text	00000060 _sprintf_r
008076e0 g     F .text	00000314 _free_r
008115f0 g     F .text	000001b0 __call_exitprocs
00813918 g     O .rwdata	00000004 targetX
00815598 g     O .bss	00000004 __mlocale_changed
00813950 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
008155c0 g     O .bss	00000004 _alt_tick_rate
008095e8 g     F .text	0000014c __lshift
008155c4 g     O .bss	00000004 _alt_nticks
0080c6ec g     F .text	00000120 read
0080cb3c g     F .text	00000298 alt_sys_init
0080236c g     F .text	00000098 __floatsisf
008114b8 g     F .text	00000134 __register_exitproc
008113c8 g     F .text	000000f0 strncmp
0080dfb4 g     F .text	0000005c altera_avalon_mutex_unlock
00809734 g     F .text	000001e8 __multiply
0080d2ec g     F .text	00000074 altera_avalon_jtag_uart_close
00811d88 g       *ABS*	00000000 __ram_rwdata_start
00811870 g       *ABS*	00000000 __ram_rodata_start
008155c8 g     O .bss	00000028 __malloc_current_mallinfo
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
0080218c g     F .text	00000078 __eqsf2
008092e0 g     F .text	0000017c __d2b
0080ce0c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
008111c0 g     F .text	000000b8 alt_get_fd
00803548 g     F .text	000000c8 __fpcmp_parts_d
0080a6a0 g     F .text	00000070 _close_r
00800490 g     F .text	000001d8 drawFrame
0080e0e4 g     F .text	000000b0 perf_get_section_time
00811354 g     F .text	00000074 memcmp
0080cebc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00815880 g       *ABS*	00000000 __alt_stack_base
0080cf04 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
008057bc g     F .text	0000013c __swsetup_r
0080295c g     F .text	00000258 __divdf3
008074c4 g     F .text	000000f0 __sfp
00809144 g     F .text	00000058 __copybits
0080e194 g     F .text	00000054 perf_get_total_time
00812194 g     O .rwdata	00000408 __malloc_av_
00807358 g     F .text	00000004 __sinit_lock_release
0080b594 g     F .text	000003c4 __muldf3
00800b38 g     F .text	00000b14 __ieee754_powf
0080a458 g     F .text	00000060 __sread
0081190c g     O .rodata	00000010 __thenan_sf
008110a0 g     F .text	00000120 alt_find_file
008104e0 g     F .text	000000b4 alt_dev_llist_insert
0080c6ac g     F .text	00000020 __malloc_lock
0080c8cc g     F .text	000000bc sbrk
00801a1c g     F .text	0000014c scalbnf
008070c4 g     F .text	000001fc _fflush_r
0080a5ec g     F .text	000000b4 _calloc_r
00815590 g       *ABS*	00000000 __bss_start
00808c0c g     F .text	00000098 memset
0080164c g     F .text	0000016c __ieee754_sqrtf
00800668 g     F .text	00000078 main
008155b8 g     O .bss	00000004 alt_envp
008155a8 g     O .bss	00000004 __malloc_max_total_mem
0080f014 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0080ce64 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080227c g     F .text	00000078 __ltsf2
0080a36c g     F .text	00000008 __sclose
008017b8 g     F .text	00000008 matherr
00a00000 g       *ABS*	00000000 __alt_heap_limit
0080a820 g     F .text	00000014 fclose
00802c74 g     F .text	00000074 __truncdfsf2
008156f0 g     O .bss	00000190 _atexit0
0080df34 g     F .text	00000040 altera_avalon_mutex_lock
00805b10 g     F .text	000015b4 _dtoa_r
00808268 g     F .text	00000740 _malloc_r
00813968 g     O .rwdata	00000004 alt_errno
00807f58 g     F .text	000000b8 _fwalk
0080bf58 g     F .text	00000060 __divsi3
0080ead0 g     F .text	000000fc alt_ro_zipfs_read
0081191c g     O .rodata	00000014 __thenan_df
008075b4 g     F .text	0000012c _malloc_trim_r
00811870 g       *ABS*	00000000 __CTOR_END__
00801e38 g     F .text	000001e0 __mulsf3
0080ed84 g     F .text	00000058 alt_ro_zipfs_check_valid
0080a4b8 g     F .text	000000bc strcmp
00811870 g       *ABS*	00000000 __flash_rodata_start
00811870 g       *ABS*	00000000 __DTOR_LIST__
00802bb4 g     F .text	00000088 __nedf2
0080ed14 g     F .text	00000070 alt_ro_zipfs_fstat
01880000 g       *ABS*	00000000 __alt_mem_sram_0
0080cb08 g     F .text	00000034 alt_irq_init
0080c86c g     F .text	00000060 alt_release_fd
00801b68 g     F .text	00000018 copysignf
0080374c g     F .text	00000074 sprintf
00811930 g     O .rodata	00000100 __clz_tab
0081559c g     O .bss	00000004 _PathLocale
00811308 g     F .text	00000014 atexit
0080a574 g     F .text	00000078 _write_r
008080b8 g     F .text	0000001c setlocale
00801a14 g     F .text	00000008 nanf
0081393c g     O .rwdata	00000004 _impure_ptr
008155b0 g     O .bss	00000004 alt_argc
00810658 g     F .text	00000064 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00808e60 g     F .text	00000080 __ulp
0080a28c g     F .text	00000040 __isinfd
00807410 g     F .text	00000018 __fp_unlock_all
00813970 g     O .rwdata	00000008 alt_mailbox_list
00800460 g     F .text	00000030 setup
00813954 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00808024 g     F .text	00000010 localeconv
00810810 g     F .text	00000050 alt_ic_isr_register
0081398c g       *ABS*	00000000 _edata
00815880 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080d360 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
008108fc g     F .text	000000a0 alt_ic_irq_disable
0080a3dc g     F .text	0000007c __swrite
0081394c g     O .rwdata	00000004 __malloc_trim_threshold
0080e228 g     F .text	00000020 alt_get_performance_counter_base
0081131c g     F .text	00000038 exit
00807e90 g     F .text	000000c8 _fwalk_reent
0080945c g     F .text	0000018c __mdiff
00800360 g     F .text	00000100 mandelbrot
0080bfb8 g     F .text	00000060 __modsi3
00a00000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00807350 g     F .text	00000004 __sfp_lock_release
0080dadc g     F .text	00000058 altera_avalon_mailbox_open
00803028 g     F .text	000000a8 __fpcmp_parts_f
008117e0 g     F .text	00000020 _exit
0080a2cc g     F .text	00000030 __isnand
00810348 g     F .text	00000154 alt_alarm_start
00802ce8 g     F .text	00000098 __muldi3
008080d4 g     F .text	00000194 __smakebuf_r
00803820 g     F .text	00000074 strlen
00810cf4 g     F .text	00000188 open
0080ba68 g     F .text	00000088 __gedf2
0080026c g     F .text	0000000c clearScreen
008107e0 g     F .text	00000030 alt_icache_flush_all
00813980 g     O .rwdata	00000004 alt_priority_mask
00810860 g     F .text	0000009c alt_ic_irq_enable
00805798 g     F .text	00000024 __vfprintf_internal
0080df14 g     F .text	00000020 altera_avalon_mutex_close
00802868 g     F .text	00000080 __subdf3
00808d3c g     F .text	000000c4 __lo0bits
00813984 g     O .rwdata	00000008 alt_alarm_list
008105f4 g     F .text	00000064 _do_ctors
0080c028 g     F .text	000000fc close
00801dd4 g     F .text	00000064 __addsf3
0080c404 g     F .text	00000080 alt_load
008030fc g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00807354 g     F .text	00000004 __sinit_lock_acquire
00809958 g     F .text	00000100 __multadd
00808ca4 g     F .text	00000028 _Bfree
0080e4e0 g     F .text	0000012c check_directory_header



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18d57c04 	addi	r3,r3,22000
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18d57c04 	addi	r3,r3,22000
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c02834 	movhi	sp,160
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d6ae4614 	ori	gp,gp,47384
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001d8:	10956414 	ori	r2,r2,21904

    movhi r3, %hi(__bss_end)
  8001dc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001e0:	18d62014 	ori	r3,r3,22656

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	080c4040 	call	80c404 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	080c6400 	call	80c640 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <genColor>:
	int color = 0;
	if (iter == maxIter) {
		color = black;
	}
	else {
		int red = iter * 2;
  800200:	2107883a 	add	r3,r4,r4
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  800204:	00801904 	movi	r2,100
			red = 255;
		if (green > 255)
			green = 255;
		if (blue > 255)
			blue = 255;
		color = (red << 16) + (green << 8) + (blue);
  800208:	200a90fa 	slli	r5,r4,3
  80020c:	01c03fc4 	movi	r7,255
  800210:	180d883a 	mov	r6,r3
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  800214:	0011883a 	mov	r8,zero
  800218:	20800926 	beq	r4,r2,800240 <genColor+0x40>
		color = black;
	}
	else {
		int red = iter * 2;
		int green = iter * 8;
		int blue = iter * 3;
  80021c:	1905883a 	add	r2,r3,r4
			red = 255;
		if (green > 255)
			green = 255;
		if (blue > 255)
			blue = 255;
		color = (red << 16) + (green << 8) + (blue);
  800220:	1009883a 	mov	r4,r2
  800224:	39400d16 	blt	r7,r5,80025c <genColor+0x5c>
  800228:	2806923a 	slli	r3,r5,8
  80022c:	39000816 	blt	r7,r4,800250 <genColor+0x50>
  800230:	39800516 	blt	r7,r6,800248 <genColor+0x48>
  800234:	3004943a 	slli	r2,r6,16
  800238:	2085883a 	add	r2,r4,r2
  80023c:	1891883a 	add	r8,r3,r2
	}
	return color;
}
  800240:	4005883a 	mov	r2,r8
  800244:	f800283a 	ret
			red = 255;
		if (green > 255)
			green = 255;
		if (blue > 255)
			blue = 255;
		color = (red << 16) + (green << 8) + (blue);
  800248:	380d883a 	mov	r6,r7
  80024c:	003ff906 	br	800234 <genColor+0x34>
  800250:	3809883a 	mov	r4,r7
  800254:	39bff70e 	bge	r7,r6,800234 <genColor+0x34>
  800258:	003ffb06 	br	800248 <genColor+0x48>
  80025c:	380b883a 	mov	r5,r7
  800260:	2806923a 	slli	r3,r5,8
  800264:	393ff20e 	bge	r7,r4,800230 <genColor+0x30>
  800268:	003ff906 	br	800250 <genColor+0x50>

0080026c <clearScreen>:
	}
}

void clearScreen(void) {
	//clears the part of the screen controlled by the pixel buffer
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
  80026c:	d1271e17 	ldw	r4,-25480(gp)
  800270:	000b883a 	mov	r5,zero
  800274:	080f0a01 	jmpi	80f0a0 <alt_up_pixel_buffer_dma_clear_screen>

00800278 <barrier>:
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}
}

void barrier(alt_u8 barrierNum) {
  800278:	deffe404 	addi	sp,sp,-112
  80027c:	dc001615 	stw	r16,88(sp)
  800280:	2021883a 	mov	r16,r4
  800284:	dfc01b15 	stw	ra,108(sp)
  800288:	dd001a15 	stw	r20,104(sp)
  80028c:	dcc01915 	stw	r19,100(sp)
  800290:	dc801815 	stw	r18,96(sp)
  800294:	dc401715 	stw	r17,92(sp)
	alt_u32 msg;
	alt_mailbox_dev *mb[NUM_CPUS];
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
  800298:	0027317a 	rdctl	r19,cpuid
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  80029c:	dc400204 	addi	r17,sp,8
  8002a0:	01402074 	movhi	r5,129
  8002a4:	29461c04 	addi	r5,r5,6256
  8002a8:	000d883a 	mov	r6,zero
  8002ac:	8809883a 	mov	r4,r17
  8002b0:	080374c0 	call	80374c <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  8002b4:	8809883a 	mov	r4,r17
  8002b8:	080dadc0 	call	80dadc <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  8002bc:	05000044 	movi	r20,1
  8002c0:	01402074 	movhi	r5,129
  8002c4:	29461c04 	addi	r5,r5,6256
  8002c8:	a00d883a 	mov	r6,r20
  8002cc:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  8002d0:	d8800015 	stw	r2,0(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  8002d4:	080374c0 	call	80374c <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  8002d8:	8809883a 	mov	r4,r17
  8002dc:	080dadc0 	call	80dadc <altera_avalon_mailbox_open>
  8002e0:	1025883a 	mov	r18,r2
  8002e4:	d8800115 	stw	r2,4(sp)
	}

	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  8002e8:	98001826 	beq	r19,zero,80034c <barrier+0xd4>
			altera_avalon_mailbox_post(mb[i], barrierNum);
  8002ec:	d9000017 	ldw	r4,0(sp)
  8002f0:	84003fcc 	andi	r16,r16,255
  8002f4:	800b883a 	mov	r5,r16
  8002f8:	080db540 	call	80db54 <altera_avalon_mailbox_post>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}

	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  8002fc:	9d00141e 	bne	r19,r20,800350 <barrier+0xd8>
		}
	}

	for (i = 0; i < NUM_CPUS - 1; i++) {
		do {
			msg = altera_avalon_mailbox_pend(mb[cpu]);
  800300:	9cc5883a 	add	r2,r19,r19
  800304:	1085883a 	add	r2,r2,r2
  800308:	16c5883a 	add	r2,r2,sp
  80030c:	14400017 	ldw	r17,0(r2)
  800310:	8809883a 	mov	r4,r17
  800314:	080dc600 	call	80dc60 <altera_avalon_mailbox_pend>
		}
		while (msg != barrierNum);
  800318:	143ffd1e 	bne	r2,r16,800310 <barrier+0x98>
		//		printf("cpu %0d recv msg \n", cpu);
	}

	for (i = 0; i < NUM_CPUS; i++) {
		altera_avalon_mailbox_close(mb[i]);
  80031c:	d9000017 	ldw	r4,0(sp)
  800320:	080db340 	call	80db34 <altera_avalon_mailbox_close>
  800324:	9009883a 	mov	r4,r18
  800328:	080db340 	call	80db34 <altera_avalon_mailbox_close>
	}
}
  80032c:	dfc01b17 	ldw	ra,108(sp)
  800330:	dd001a17 	ldw	r20,104(sp)
  800334:	dcc01917 	ldw	r19,100(sp)
  800338:	dc801817 	ldw	r18,96(sp)
  80033c:	dc401717 	ldw	r17,92(sp)
  800340:	dc001617 	ldw	r16,88(sp)
  800344:	dec01c04 	addi	sp,sp,112
  800348:	f800283a 	ret
  80034c:	84003fcc 	andi	r16,r16,255
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}

	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
			altera_avalon_mailbox_post(mb[i], barrierNum);
  800350:	9009883a 	mov	r4,r18
  800354:	800b883a 	mov	r5,r16
  800358:	080db540 	call	80db54 <altera_avalon_mailbox_post>
  80035c:	003fe806 	br	800300 <barrier+0x88>

00800360 <mandelbrot>:
		color = (red << 16) + (green << 8) + (blue);
	}
	return color;
}

int mandelbrot(int cRow, int cCol, float x0, float y0) {
  800360:	defff804 	addi	sp,sp,-32
  800364:	dd800615 	stw	r22,24(sp)
  800368:	dd400515 	stw	r21,20(sp)
  80036c:	dd000415 	stw	r20,16(sp)
  800370:	dcc00315 	stw	r19,12(sp)
  800374:	dc800215 	stw	r18,8(sp)
  800378:	dc400115 	stw	r17,4(sp)
  80037c:	dc000015 	stw	r16,0(sp)
  800380:	302d883a 	mov	r22,r6
  800384:	382b883a 	mov	r21,r7
  800388:	0029883a 	mov	r20,zero
  80038c:	0025883a 	mov	r18,zero
  800390:	0027883a 	mov	r19,zero
  800394:	0023883a 	mov	r17,zero
  800398:	0021883a 	mov	r16,zero
  80039c:	dfc00715 	stw	ra,28(sp)
  8003a0:	00000206 	br	8003ac <mandelbrot+0x4c>
	float y = 0.0;
	float xtemp = 0.0;

	unsigned long long cycles = 0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  8003a4:	00801904 	movi	r2,100
  8003a8:	a0802226 	beq	r20,r2,800434 <mandelbrot+0xd4>

		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
  8003ac:	00800104 	movi	r2,4
  8003b0:	10000035 	stwio	zero,0(r2)
		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
  8003b4:	00c00504 	movi	r3,20
  8003b8:	18000035 	stwio	zero,0(r3)

		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  8003bc:	9485ff72 	custom	253,r2,r18,r18
  8003c0:	14c5ff32 	custom	252,r2,r2,r19
	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {

		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

		xtemp = x * x - y * y + x0;
  8003c4:	8c25ffb2 	custom	254,r18,r17,r16
		y = 2 * x * y + y0;
  8003c8:	1567ff72 	custom	253,r19,r2,r21
	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {

		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

		xtemp = x * x - y * y + x0;
  8003cc:	95a5ff72 	custom	253,r18,r18,r22
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
  8003d0:	a5000044 	addi	r20,r20,1

		PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
  8003d4:	00800404 	movi	r2,16
  8003d8:	10000035 	stwio	zero,0(r2)
		PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
  8003dc:	0007883a 	mov	r3,zero
  8003e0:	18000035 	stwio	zero,0(r3)
		cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);
  8003e4:	0009883a 	mov	r4,zero
  8003e8:	01400044 	movi	r5,1
  8003ec:	080e0e40 	call	80e0e4 <perf_get_section_time>
		printf("iter number: %i\n", iter);
  8003f0:	01002074 	movhi	r4,129
  8003f4:	21062004 	addi	r4,r4,6272
  8003f8:	a00b883a 	mov	r5,r20
		x = xtemp;
		iter++;

		PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
		PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);
  8003fc:	1823883a 	mov	r17,r3
  800400:	1021883a 	mov	r16,r2
		printf("iter number: %i\n", iter);
  800404:	08036200 	call	803620 <printf>
		printf("Cycles on frame: %llu \n\n", cycles);
  800408:	880d883a 	mov	r6,r17
  80040c:	800b883a 	mov	r5,r16
  800410:	01002074 	movhi	r4,129
  800414:	21062504 	addi	r4,r4,6292
	float y = 0.0;
	float xtemp = 0.0;

	unsigned long long cycles = 0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  800418:	94a3ff32 	custom	252,r17,r18,r18
  80041c:	9ce1ff32 	custom	252,r16,r19,r19

		PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
		PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);
		printf("iter number: %i\n", iter);
		printf("Cycles on frame: %llu \n\n", cycles);
  800420:	08036200 	call	803620 <printf>
	float y = 0.0;
	float xtemp = 0.0;

	unsigned long long cycles = 0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  800424:	8c09ff72 	custom	253,r4,r17,r16
  800428:	01502034 	movhi	r5,16512
  80042c:	08022f40 	call	8022f4 <__lesf2>
  800430:	00bfdc0e 	bge	zero,r2,8003a4 <mandelbrot+0x44>
		cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);
		printf("iter number: %i\n", iter);
		printf("Cycles on frame: %llu \n\n", cycles);
	}
	return iter;
}
  800434:	a005883a 	mov	r2,r20
  800438:	dfc00717 	ldw	ra,28(sp)
  80043c:	dd800617 	ldw	r22,24(sp)
  800440:	dd400517 	ldw	r21,20(sp)
  800444:	dd000417 	ldw	r20,16(sp)
  800448:	dcc00317 	ldw	r19,12(sp)
  80044c:	dc800217 	ldw	r18,8(sp)
  800450:	dc400117 	ldw	r17,4(sp)
  800454:	dc000017 	ldw	r16,0(sp)
  800458:	dec00804 	addi	sp,sp,32
  80045c:	f800283a 	ret

00800460 <setup>:
float targetX = -0.227;
float targetY = 0.700;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  800460:	deffff04 	addi	sp,sp,-4
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  800464:	01002074 	movhi	r4,129
  800468:	21062c04 	addi	r4,r4,6320
float targetX = -0.227;
float targetY = 0.700;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  80046c:	dfc00015 	stw	ra,0(sp)
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  800470:	080eddc0 	call	80eddc <alt_up_pixel_buffer_dma_open_dev>
  800474:	d0a71e15 	stw	r2,-25480(gp)
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
  800478:	00c00044 	movi	r3,1
  80047c:	0005883a 	mov	r2,zero
  800480:	10c00035 	stwio	r3,0(r2)
}
  800484:	dfc00017 	ldw	ra,0(sp)
  800488:	dec00104 	addi	sp,sp,4
  80048c:	f800283a 	ret

00800490 <drawFrame>:
//			color = genColor(result);
//			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
//		}
//	}
//}
void drawFrame(int zoom) {
  800490:	defff504 	addi	sp,sp,-44
  800494:	dfc00a15 	stw	ra,40(sp)
  800498:	df000915 	stw	fp,36(sp)
  80049c:	ddc00815 	stw	r23,32(sp)
  8004a0:	dd800715 	stw	r22,28(sp)
  8004a4:	dd400615 	stw	r21,24(sp)
  8004a8:	dd000515 	stw	r20,20(sp)
  8004ac:	dcc00415 	stw	r19,16(sp)
  8004b0:	dc800315 	stw	r18,12(sp)
  8004b4:	dc400215 	stw	r17,8(sp)
  8004b8:	dc000115 	stw	r16,4(sp)
	int i;
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
  8004bc:	0039317a 	rdctl	fp,cpuid

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  8004c0:	040ff034 	movhi	r16,16320
  8004c4:	080236c0 	call	80236c <__floatsisf>
  8004c8:	1023883a 	mov	r17,r2
  8004cc:	8009883a 	mov	r4,r16
  8004d0:	100b883a 	mov	r5,r2
  8004d4:	08006e00 	call	8006e0 <powf>
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
  8004d8:	8009883a 	mov	r4,r16
  8004dc:	880b883a 	mov	r5,r17
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  8004e0:	1025883a 	mov	r18,r2
  8004e4:	d5200017 	ldw	r20,-32768(gp)
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
  8004e8:	08006e00 	call	8006e0 <powf>
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  8004ec:	8009883a 	mov	r4,r16
  8004f0:	880b883a 	mov	r5,r17
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
  8004f4:	d8800015 	stw	r2,0(sp)
  8004f8:	d5e00017 	ldw	r23,-32768(gp)
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  8004fc:	08006e00 	call	8006e0 <powf>
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));
  800500:	8009883a 	mov	r4,r16
  800504:	880b883a 	mov	r5,r17
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  800508:	1027883a 	mov	r19,r2
  80050c:	d4600117 	ldw	r17,-32764(gp)
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));
  800510:	08006e00 	call	8006e0 <powf>
  800514:	102b883a 	mov	r21,r2

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  800518:	00804fc4 	movi	r2,319
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));
  80051c:	d4200117 	ldw	r16,-32764(gp)

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  800520:	17004516 	blt	r2,fp,800638 <drawFrame+0x1a8>
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  800524:	900b883a 	mov	r5,r18
  800528:	012fe034 	movhi	r4,49024
  80052c:	08020180 	call	802018 <__divsf3>
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  800530:	980b883a 	mov	r5,r19
  800534:	012fd034 	movhi	r4,48960
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  800538:	1529ff72 	custom	253,r20,r2,r20
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  80053c:	08020180 	call	802018 <__divsf3>
  800540:	a80b883a 	mov	r5,r21
  800544:	010fd034 	movhi	r4,16192
  800548:	146dff72 	custom	253,r22,r2,r17
  80054c:	08020180 	call	802018 <__divsf3>
  800550:	d9400017 	ldw	r5,0(sp)
  800554:	1405ff72 	custom	253,r2,r2,r16
  800558:	010fe034 	movhi	r4,16256
  80055c:	15abffb2 	custom	254,r21,r2,r22
  800560:	08020180 	call	802018 <__divsf3>
  800564:	15c5ff72 	custom	253,r2,r2,r23
  800568:	1527ffb2 	custom	254,r19,r2,r20
  80056c:	e023883a 	mov	r17,fp
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 239 - (float) i) / (float) 240) * (maxY - minY)) + minY;
  800570:	8809883a 	mov	r4,r17
  800574:	080236c0 	call	80236c <__floatsisf>
  800578:	0110dbf4 	movhi	r4,17263
  80057c:	2089ffb2 	custom	254,r4,r4,r2
  800580:	0150dc34 	movhi	r5,17264
  800584:	08020180 	call	802018 <__divsf3>
  800588:	a885ff32 	custom	252,r2,r21,r2
  80058c:	b0a5ff72 	custom	253,r18,r22,r2
  800590:	0021883a 	mov	r16,zero
		for (j = 0; j < rowSize; j++) {
			float x0 = (((float) j / (float) 320) * (maxX - minX)) + minX;

			result = mandelbrot(j, i, x0, y0);
  800594:	8009883a 	mov	r4,r16
  800598:	080236c0 	call	80236c <__floatsisf>
  80059c:	1009883a 	mov	r4,r2
  8005a0:	0150e834 	movhi	r5,17312
  8005a4:	08020180 	call	802018 <__divsf3>
  8005a8:	14c5ff32 	custom	252,r2,r2,r19
  8005ac:	a08dff72 	custom	253,r6,r20,r2
  8005b0:	8009883a 	mov	r4,r16
  8005b4:	880b883a 	mov	r5,r17
  8005b8:	900f883a 	mov	r7,r18
  8005bc:	08003600 	call	800360 <mandelbrot>
	int color = 0;
	if (iter == maxIter) {
		color = black;
	}
	else {
		int red = iter * 2;
  8005c0:	1089883a 	add	r4,r2,r2
	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 239 - (float) i) / (float) 240) * (maxY - minY)) + minY;
		for (j = 0; j < rowSize; j++) {
			float x0 = (((float) j / (float) 320) * (maxX - minX)) + minX;

			result = mandelbrot(j, i, x0, y0);
  8005c4:	1007883a 	mov	r3,r2
		color = black;
	}
	else {
		int red = iter * 2;
		int green = iter * 8;
		int blue = iter * 3;
  8005c8:	100c90fa 	slli	r6,r2,3
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  8005cc:	00801904 	movi	r2,100
		color = black;
	}
	else {
		int red = iter * 2;
		int green = iter * 8;
		int blue = iter * 3;
  8005d0:	02003fc4 	movi	r8,255
  8005d4:	200f883a 	mov	r7,r4
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  8005d8:	000b883a 	mov	r5,zero
  8005dc:	18800c26 	beq	r3,r2,800610 <drawFrame+0x180>
		color = black;
	}
	else {
		int red = iter * 2;
		int green = iter * 8;
		int blue = iter * 3;
  8005e0:	20c5883a 	add	r2,r4,r3
  8005e4:	1007883a 	mov	r3,r2
  8005e8:	4180010e 	bge	r8,r6,8005f0 <drawFrame+0x160>
  8005ec:	400d883a 	mov	r6,r8
  8005f0:	300a923a 	slli	r5,r6,8
  8005f4:	40c0010e 	bge	r8,r3,8005fc <drawFrame+0x16c>
  8005f8:	4007883a 	mov	r3,r8
  8005fc:	41c0010e 	bge	r8,r7,800604 <drawFrame+0x174>
  800600:	400f883a 	mov	r7,r8
  800604:	3804943a 	slli	r2,r7,16
  800608:	1885883a 	add	r2,r3,r2
  80060c:	288b883a 	add	r5,r5,r2
		for (j = 0; j < rowSize; j++) {
			float x0 = (((float) j / (float) 320) * (maxX - minX)) + minX;

			result = mandelbrot(j, i, x0, y0);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
  800610:	d1271e17 	ldw	r4,-25480(gp)
  800614:	800f883a 	mov	r7,r16
  800618:	880d883a 	mov	r6,r17
  80061c:	080ee1c0 	call	80ee1c <alt_up_pixel_buffer_dma_draw>
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 239 - (float) i) / (float) 240) * (maxY - minY)) + minY;
		for (j = 0; j < rowSize; j++) {
  800620:	84000044 	addi	r16,r16,1
  800624:	00c03c04 	movi	r3,240
  800628:	80ffda1e 	bne	r16,r3,800594 <drawFrame+0x104>
	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  80062c:	8c400084 	addi	r17,r17,2
  800630:	00804fc4 	movi	r2,319
  800634:	147fce0e 	bge	r2,r17,800570 <drawFrame+0xe0>
			result = mandelbrot(j, i, x0, y0);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}
}
  800638:	dfc00a17 	ldw	ra,40(sp)
  80063c:	df000917 	ldw	fp,36(sp)
  800640:	ddc00817 	ldw	r23,32(sp)
  800644:	dd800717 	ldw	r22,28(sp)
  800648:	dd400617 	ldw	r21,24(sp)
  80064c:	dd000517 	ldw	r20,20(sp)
  800650:	dcc00417 	ldw	r19,16(sp)
  800654:	dc800317 	ldw	r18,12(sp)
  800658:	dc400217 	ldw	r17,8(sp)
  80065c:	dc000117 	ldw	r16,4(sp)
  800660:	dec00b04 	addi	sp,sp,44
  800664:	f800283a 	ret

00800668 <main>:
#define key1 6
#define key0 7

#define FIXED_POINT

int main() {
  800668:	defffd04 	addi	sp,sp,-12
  80066c:	dfc00215 	stw	ra,8(sp)
  800670:	dc400115 	stw	r17,4(sp)
  800674:	dc000015 	stw	r16,0(sp)

	setup();
  800678:	08004600 	call	800460 <setup>
	printf("Program running (UART)...\n");
  80067c:	01002074 	movhi	r4,129
  800680:	21063404 	addi	r4,r4,6352
  800684:	08037380 	call	803738 <puts>
	int cpu = __builtin_rdctl(5);
  800688:	000b317a 	rdctl	r5,cpuid
	printf("cpu %d\n", cpu);
  80068c:	01002074 	movhi	r4,129
  800690:	21063b04 	addi	r4,r4,6380
  800694:	08036200 	call	803620 <printf>
	//	unsigned long long cycles = 0;
	clearScreen();
  800698:	080026c0 	call	80026c <clearScreen>
	while (1) {
		int zoom;
		for (zoom = 1; zoom <= 100; zoom++) {
			//				PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
			//				PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
			clearScreen();
  80069c:	080026c0 	call	80026c <clearScreen>
			drawFrame(zoom);
  8006a0:	01000044 	movi	r4,1
  8006a4:	08004900 	call	800490 <drawFrame>
			barrier(0);
  8006a8:	0009883a 	mov	r4,zero
  8006ac:	08002780 	call	800278 <barrier>
  8006b0:	04401904 	movi	r17,100
  8006b4:	00800084 	movi	r2,2
  8006b8:	1021883a 	mov	r16,r2
	while (1) {
		int zoom;
		for (zoom = 1; zoom <= 100; zoom++) {
			//				PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
			//				PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
			clearScreen();
  8006bc:	080026c0 	call	80026c <clearScreen>
			drawFrame(zoom);
  8006c0:	8009883a 	mov	r4,r16
  8006c4:	08004900 	call	800490 <drawFrame>
			barrier(0);
  8006c8:	0009883a 	mov	r4,zero
  8006cc:	08002780 	call	800278 <barrier>
	clearScreen();
	//	drawFullSet();
	//the main program loop
	while (1) {
		int zoom;
		for (zoom = 1; zoom <= 100; zoom++) {
  8006d0:	80800044 	addi	r2,r16,1
  8006d4:	04000044 	movi	r16,1
  8006d8:	88bff816 	blt	r17,r2,8006bc <main+0x54>
  8006dc:	003ff606 	br	8006b8 <main+0x50>

008006e0 <powf>:
  8006e0:	defff104 	addi	sp,sp,-60
  8006e4:	dd000d15 	stw	r20,52(sp)
  8006e8:	dcc00c15 	stw	r19,48(sp)
  8006ec:	dc800b15 	stw	r18,44(sp)
  8006f0:	dc400a15 	stw	r17,40(sp)
  8006f4:	dc000915 	stw	r16,36(sp)
  8006f8:	dfc00e15 	stw	ra,56(sp)
  8006fc:	05002074 	movhi	r20,129
  800700:	a50e4e04 	addi	r20,r20,14648
  800704:	2027883a 	mov	r19,r4
  800708:	2825883a 	mov	r18,r5
  80070c:	0800b380 	call	800b38 <__ieee754_powf>
  800710:	1021883a 	mov	r16,r2
  800714:	a0800017 	ldw	r2,0(r20)
  800718:	047fffc4 	movi	r17,-1
  80071c:	14400326 	beq	r2,r17,80072c <powf+0x4c>
  800720:	9009883a 	mov	r4,r18
  800724:	08019fc0 	call	8019fc <isnanf>
  800728:	10000926 	beq	r2,zero,800750 <powf+0x70>
  80072c:	8005883a 	mov	r2,r16
  800730:	dfc00e17 	ldw	ra,56(sp)
  800734:	dd000d17 	ldw	r20,52(sp)
  800738:	dcc00c17 	ldw	r19,48(sp)
  80073c:	dc800b17 	ldw	r18,44(sp)
  800740:	dc400a17 	ldw	r17,40(sp)
  800744:	dc000917 	ldw	r16,36(sp)
  800748:	dec00f04 	addi	sp,sp,60
  80074c:	f800283a 	ret
  800750:	9809883a 	mov	r4,r19
  800754:	08019fc0 	call	8019fc <isnanf>
  800758:	1000151e 	bne	r2,zero,8007b0 <powf+0xd0>
  80075c:	9809883a 	mov	r4,r19
  800760:	000b883a 	mov	r5,zero
  800764:	080218c0 	call	80218c <__eqsf2>
  800768:	10005a1e 	bne	r2,zero,8008d4 <powf+0x1f4>
  80076c:	9009883a 	mov	r4,r18
  800770:	000b883a 	mov	r5,zero
  800774:	080218c0 	call	80218c <__eqsf2>
  800778:	1000331e 	bne	r2,zero,800848 <powf+0x168>
  80077c:	a0800017 	ldw	r2,0(r20)
  800780:	d8000615 	stw	zero,24(sp)
  800784:	d8000715 	stw	zero,28(sp)
  800788:	10001426 	beq	r2,zero,8007dc <powf+0xfc>
  80078c:	008ffc34 	movhi	r2,16368
  800790:	d8800715 	stw	r2,28(sp)
  800794:	d8800617 	ldw	r2,24(sp)
  800798:	d8c00717 	ldw	r3,28(sp)
  80079c:	1009883a 	mov	r4,r2
  8007a0:	180b883a 	mov	r5,r3
  8007a4:	0802c740 	call	802c74 <__truncdfsf2>
  8007a8:	1021883a 	mov	r16,r2
  8007ac:	003fdf06 	br	80072c <powf+0x4c>
  8007b0:	9009883a 	mov	r4,r18
  8007b4:	000b883a 	mov	r5,zero
  8007b8:	080218c0 	call	80218c <__eqsf2>
  8007bc:	103fdb1e 	bne	r2,zero,80072c <powf+0x4c>
  8007c0:	a0c00017 	ldw	r3,0(r20)
  8007c4:	010ffc34 	movhi	r4,16368
  8007c8:	d8000615 	stw	zero,24(sp)
  8007cc:	d9000715 	stw	r4,28(sp)
  8007d0:	1c401a26 	beq	r3,r17,80083c <powf+0x15c>
  8007d4:	00800084 	movi	r2,2
  8007d8:	18801826 	beq	r3,r2,80083c <powf+0x15c>
  8007dc:	9009883a 	mov	r4,r18
  8007e0:	08024040 	call	802404 <__extendsfdf2>
  8007e4:	9809883a 	mov	r4,r19
  8007e8:	d8c00515 	stw	r3,20(sp)
  8007ec:	d8800415 	stw	r2,16(sp)
  8007f0:	08024040 	call	802404 <__extendsfdf2>
  8007f4:	100b883a 	mov	r5,r2
  8007f8:	d8c00315 	stw	r3,12(sp)
  8007fc:	00802074 	movhi	r2,129
  800800:	10863d04 	addi	r2,r2,6388
  800804:	00c00044 	movi	r3,1
  800808:	d809883a 	mov	r4,sp
  80080c:	d8800115 	stw	r2,4(sp)
  800810:	d8c00015 	stw	r3,0(sp)
  800814:	d9400215 	stw	r5,8(sp)
  800818:	d8000815 	stw	zero,32(sp)
  80081c:	08017b80 	call	8017b8 <matherr>
  800820:	10002826 	beq	r2,zero,8008c4 <powf+0x1e4>
  800824:	d8800817 	ldw	r2,32(sp)
  800828:	103fda26 	beq	r2,zero,800794 <powf+0xb4>
  80082c:	08036100 	call	803610 <__errno>
  800830:	d8c00817 	ldw	r3,32(sp)
  800834:	10c00015 	stw	r3,0(r2)
  800838:	003fd606 	br	800794 <powf+0xb4>
  80083c:	d9000715 	stw	r4,28(sp)
  800840:	d8000615 	stw	zero,24(sp)
  800844:	003fd306 	br	800794 <powf+0xb4>
  800848:	9009883a 	mov	r4,r18
  80084c:	08019e00 	call	8019e0 <finitef>
  800850:	103fb626 	beq	r2,zero,80072c <powf+0x4c>
  800854:	9009883a 	mov	r4,r18
  800858:	000b883a 	mov	r5,zero
  80085c:	080227c0 	call	80227c <__ltsf2>
  800860:	103fb20e 	bge	r2,zero,80072c <powf+0x4c>
  800864:	9809883a 	mov	r4,r19
  800868:	00800044 	movi	r2,1
  80086c:	00c02074 	movhi	r3,129
  800870:	18c63d04 	addi	r3,r3,6388
  800874:	d8800015 	stw	r2,0(sp)
  800878:	d8c00115 	stw	r3,4(sp)
  80087c:	d8000815 	stw	zero,32(sp)
  800880:	08024040 	call	802404 <__extendsfdf2>
  800884:	9009883a 	mov	r4,r18
  800888:	d8c00315 	stw	r3,12(sp)
  80088c:	d8800215 	stw	r2,8(sp)
  800890:	08024040 	call	802404 <__extendsfdf2>
  800894:	a1800017 	ldw	r6,0(r20)
  800898:	d8c00515 	stw	r3,20(sp)
  80089c:	d8800415 	stw	r2,16(sp)
  8008a0:	30005626 	beq	r6,zero,8009fc <powf+0x31c>
  8008a4:	00bffc34 	movhi	r2,65520
  8008a8:	d8800715 	stw	r2,28(sp)
  8008ac:	00800084 	movi	r2,2
  8008b0:	d8000615 	stw	zero,24(sp)
  8008b4:	30800326 	beq	r6,r2,8008c4 <powf+0x1e4>
  8008b8:	d809883a 	mov	r4,sp
  8008bc:	08017b80 	call	8017b8 <matherr>
  8008c0:	103fd81e 	bne	r2,zero,800824 <powf+0x144>
  8008c4:	08036100 	call	803610 <__errno>
  8008c8:	00c00844 	movi	r3,33
  8008cc:	10c00015 	stw	r3,0(r2)
  8008d0:	003fd406 	br	800824 <powf+0x144>
  8008d4:	8009883a 	mov	r4,r16
  8008d8:	08019e00 	call	8019e0 <finitef>
  8008dc:	10002426 	beq	r2,zero,800970 <powf+0x290>
  8008e0:	8009883a 	mov	r4,r16
  8008e4:	000b883a 	mov	r5,zero
  8008e8:	080218c0 	call	80218c <__eqsf2>
  8008ec:	103f8f1e 	bne	r2,zero,80072c <powf+0x4c>
  8008f0:	9809883a 	mov	r4,r19
  8008f4:	08019e00 	call	8019e0 <finitef>
  8008f8:	103f8c26 	beq	r2,zero,80072c <powf+0x4c>
  8008fc:	9009883a 	mov	r4,r18
  800900:	08019e00 	call	8019e0 <finitef>
  800904:	103f8926 	beq	r2,zero,80072c <powf+0x4c>
  800908:	9809883a 	mov	r4,r19
  80090c:	00800104 	movi	r2,4
  800910:	00c02074 	movhi	r3,129
  800914:	18c63d04 	addi	r3,r3,6388
  800918:	d8800015 	stw	r2,0(sp)
  80091c:	d8c00115 	stw	r3,4(sp)
  800920:	d8000815 	stw	zero,32(sp)
  800924:	08024040 	call	802404 <__extendsfdf2>
  800928:	9009883a 	mov	r4,r18
  80092c:	d8c00315 	stw	r3,12(sp)
  800930:	d8800215 	stw	r2,8(sp)
  800934:	08024040 	call	802404 <__extendsfdf2>
  800938:	a1800017 	ldw	r6,0(r20)
  80093c:	d8800415 	stw	r2,16(sp)
  800940:	00800084 	movi	r2,2
  800944:	d8c00515 	stw	r3,20(sp)
  800948:	d8000615 	stw	zero,24(sp)
  80094c:	d8000715 	stw	zero,28(sp)
  800950:	30800326 	beq	r6,r2,800960 <powf+0x280>
  800954:	d809883a 	mov	r4,sp
  800958:	08017b80 	call	8017b8 <matherr>
  80095c:	103fb11e 	bne	r2,zero,800824 <powf+0x144>
  800960:	08036100 	call	803610 <__errno>
  800964:	00c00884 	movi	r3,34
  800968:	10c00015 	stw	r3,0(r2)
  80096c:	003fad06 	br	800824 <powf+0x144>
  800970:	9809883a 	mov	r4,r19
  800974:	08019e00 	call	8019e0 <finitef>
  800978:	103fd926 	beq	r2,zero,8008e0 <powf+0x200>
  80097c:	9009883a 	mov	r4,r18
  800980:	08019e00 	call	8019e0 <finitef>
  800984:	103fd626 	beq	r2,zero,8008e0 <powf+0x200>
  800988:	8009883a 	mov	r4,r16
  80098c:	08019fc0 	call	8019fc <isnanf>
  800990:	10001d26 	beq	r2,zero,800a08 <powf+0x328>
  800994:	9809883a 	mov	r4,r19
  800998:	00800044 	movi	r2,1
  80099c:	00c02074 	movhi	r3,129
  8009a0:	18c63d04 	addi	r3,r3,6388
  8009a4:	d8800015 	stw	r2,0(sp)
  8009a8:	d8c00115 	stw	r3,4(sp)
  8009ac:	d8000815 	stw	zero,32(sp)
  8009b0:	08024040 	call	802404 <__extendsfdf2>
  8009b4:	9009883a 	mov	r4,r18
  8009b8:	d8c00315 	stw	r3,12(sp)
  8009bc:	d8800215 	stw	r2,8(sp)
  8009c0:	08024040 	call	802404 <__extendsfdf2>
  8009c4:	a4000017 	ldw	r16,0(r20)
  8009c8:	d8c00515 	stw	r3,20(sp)
  8009cc:	d8800415 	stw	r2,16(sp)
  8009d0:	80000a26 	beq	r16,zero,8009fc <powf+0x31c>
  8009d4:	0009883a 	mov	r4,zero
  8009d8:	000d883a 	mov	r6,zero
  8009dc:	000b883a 	mov	r5,zero
  8009e0:	000f883a 	mov	r7,zero
  8009e4:	080295c0 	call	80295c <__divdf3>
  8009e8:	d8800615 	stw	r2,24(sp)
  8009ec:	00800084 	movi	r2,2
  8009f0:	d8c00715 	stw	r3,28(sp)
  8009f4:	80bfb01e 	bne	r16,r2,8008b8 <powf+0x1d8>
  8009f8:	003fb206 	br	8008c4 <powf+0x1e4>
  8009fc:	d8000615 	stw	zero,24(sp)
  800a00:	d8000715 	stw	zero,28(sp)
  800a04:	003fac06 	br	8008b8 <powf+0x1d8>
  800a08:	9809883a 	mov	r4,r19
  800a0c:	008000c4 	movi	r2,3
  800a10:	00c02074 	movhi	r3,129
  800a14:	18c63d04 	addi	r3,r3,6388
  800a18:	d8800015 	stw	r2,0(sp)
  800a1c:	d8c00115 	stw	r3,4(sp)
  800a20:	d8000815 	stw	zero,32(sp)
  800a24:	08024040 	call	802404 <__extendsfdf2>
  800a28:	9009883a 	mov	r4,r18
  800a2c:	d8c00315 	stw	r3,12(sp)
  800a30:	d8800215 	stw	r2,8(sp)
  800a34:	08024040 	call	802404 <__extendsfdf2>
  800a38:	a1800017 	ldw	r6,0(r20)
  800a3c:	d8c00515 	stw	r3,20(sp)
  800a40:	d8800415 	stw	r2,16(sp)
  800a44:	3000211e 	bne	r6,zero,800acc <powf+0x3ec>
  800a48:	9809883a 	mov	r4,r19
  800a4c:	0091fc34 	movhi	r2,18416
  800a50:	10bfffc4 	addi	r2,r2,-1
  800a54:	04f80034 	movhi	r19,57344
  800a58:	000b883a 	mov	r5,zero
  800a5c:	d8800715 	stw	r2,28(sp)
  800a60:	dcc00615 	stw	r19,24(sp)
  800a64:	080227c0 	call	80227c <__ltsf2>
  800a68:	103fba0e 	bge	r2,zero,800954 <powf+0x274>
  800a6c:	014fc034 	movhi	r5,16128
  800a70:	9009883a 	mov	r4,r18
  800a74:	0801e380 	call	801e38 <__mulsf3>
  800a78:	1009883a 	mov	r4,r2
  800a7c:	08024040 	call	802404 <__extendsfdf2>
  800a80:	1009883a 	mov	r4,r2
  800a84:	180b883a 	mov	r5,r3
  800a88:	1021883a 	mov	r16,r2
  800a8c:	1823883a 	mov	r17,r3
  800a90:	08017c00 	call	8017c0 <rint>
  800a94:	180f883a 	mov	r7,r3
  800a98:	880b883a 	mov	r5,r17
  800a9c:	8009883a 	mov	r4,r16
  800aa0:	100d883a 	mov	r6,r2
  800aa4:	0802bb40 	call	802bb4 <__nedf2>
  800aa8:	10000426 	beq	r2,zero,800abc <powf+0x3dc>
  800aac:	00b1fc34 	movhi	r2,51184
  800ab0:	10bfffc4 	addi	r2,r2,-1
  800ab4:	dcc00615 	stw	r19,24(sp)
  800ab8:	d8800715 	stw	r2,28(sp)
  800abc:	a0c00017 	ldw	r3,0(r20)
  800ac0:	00800084 	movi	r2,2
  800ac4:	18bfa31e 	bne	r3,r2,800954 <powf+0x274>
  800ac8:	003fa506 	br	800960 <powf+0x280>
  800acc:	009ffc34 	movhi	r2,32752
  800ad0:	9809883a 	mov	r4,r19
  800ad4:	000b883a 	mov	r5,zero
  800ad8:	d8800715 	stw	r2,28(sp)
  800adc:	d8000615 	stw	zero,24(sp)
  800ae0:	080227c0 	call	80227c <__ltsf2>
  800ae4:	103ff50e 	bge	r2,zero,800abc <powf+0x3dc>
  800ae8:	014fc034 	movhi	r5,16128
  800aec:	9009883a 	mov	r4,r18
  800af0:	0801e380 	call	801e38 <__mulsf3>
  800af4:	1009883a 	mov	r4,r2
  800af8:	08024040 	call	802404 <__extendsfdf2>
  800afc:	1009883a 	mov	r4,r2
  800b00:	180b883a 	mov	r5,r3
  800b04:	1021883a 	mov	r16,r2
  800b08:	1823883a 	mov	r17,r3
  800b0c:	08017c00 	call	8017c0 <rint>
  800b10:	180f883a 	mov	r7,r3
  800b14:	880b883a 	mov	r5,r17
  800b18:	8009883a 	mov	r4,r16
  800b1c:	100d883a 	mov	r6,r2
  800b20:	0802bb40 	call	802bb4 <__nedf2>
  800b24:	103fe526 	beq	r2,zero,800abc <powf+0x3dc>
  800b28:	00bffc34 	movhi	r2,65520
  800b2c:	d8800715 	stw	r2,28(sp)
  800b30:	d8000615 	stw	zero,24(sp)
  800b34:	003fe106 	br	800abc <powf+0x3dc>

00800b38 <__ieee754_powf>:
  800b38:	defff004 	addi	sp,sp,-64
  800b3c:	00a00034 	movhi	r2,32768
  800b40:	10bfffc4 	addi	r2,r2,-1
  800b44:	dc000615 	stw	r16,24(sp)
  800b48:	28a0703a 	and	r16,r5,r2
  800b4c:	df000e15 	stw	fp,56(sp)
  800b50:	dcc00915 	stw	r19,36(sp)
  800b54:	dc800815 	stw	r18,32(sp)
  800b58:	2027883a 	mov	r19,r4
  800b5c:	dfc00f15 	stw	ra,60(sp)
  800b60:	ddc00d15 	stw	r23,52(sp)
  800b64:	dd800c15 	stw	r22,48(sp)
  800b68:	dd400b15 	stw	r21,44(sp)
  800b6c:	dd000a15 	stw	r20,40(sp)
  800b70:	dc400715 	stw	r17,28(sp)
  800b74:	2839883a 	mov	fp,r5
  800b78:	2825883a 	mov	r18,r5
  800b7c:	2809883a 	mov	r4,r5
  800b80:	80003526 	beq	r16,zero,800c58 <__ieee754_powf+0x120>
  800b84:	98a2703a 	and	r17,r19,r2
  800b88:	009fe034 	movhi	r2,32640
  800b8c:	9829883a 	mov	r20,r19
  800b90:	1440100e 	bge	r2,r17,800bd4 <__ieee754_powf+0x9c>
  800b94:	008fe034 	movhi	r2,16256
  800b98:	88803d26 	beq	r17,r2,800c90 <__ieee754_powf+0x158>
  800b9c:	01002074 	movhi	r4,129
  800ba0:	21062b04 	addi	r4,r4,6316
  800ba4:	dfc00f17 	ldw	ra,60(sp)
  800ba8:	df000e17 	ldw	fp,56(sp)
  800bac:	ddc00d17 	ldw	r23,52(sp)
  800bb0:	dd800c17 	ldw	r22,48(sp)
  800bb4:	dd400b17 	ldw	r21,44(sp)
  800bb8:	dd000a17 	ldw	r20,40(sp)
  800bbc:	dcc00917 	ldw	r19,36(sp)
  800bc0:	dc800817 	ldw	r18,32(sp)
  800bc4:	dc400717 	ldw	r17,28(sp)
  800bc8:	dc000617 	ldw	r16,24(sp)
  800bcc:	dec01004 	addi	sp,sp,64
  800bd0:	0801a141 	jmpi	801a14 <nanf>
  800bd4:	143fef16 	blt	r2,r16,800b94 <__ieee754_powf+0x5c>
  800bd8:	982a403a 	cmpge	r21,r19,zero
  800bdc:	a8004526 	beq	r21,zero,800cf4 <__ieee754_powf+0x1bc>
  800be0:	002f883a 	mov	r23,zero
  800be4:	009fe034 	movhi	r2,32640
  800be8:	80803926 	beq	r16,r2,800cd0 <__ieee754_powf+0x198>
  800bec:	008fe034 	movhi	r2,16256
  800bf0:	80803d26 	beq	r16,r2,800ce8 <__ieee754_powf+0x1b0>
  800bf4:	00900034 	movhi	r2,16384
  800bf8:	20805326 	beq	r4,r2,800d48 <__ieee754_powf+0x210>
  800bfc:	008fc034 	movhi	r2,16128
  800c00:	20802526 	beq	r4,r2,800c98 <__ieee754_powf+0x160>
  800c04:	9809883a 	mov	r4,r19
  800c08:	08019d00 	call	8019d0 <fabsf>
  800c0c:	1009883a 	mov	r4,r2
  800c10:	009fe034 	movhi	r2,32640
  800c14:	88803c26 	beq	r17,r2,800d08 <__ieee754_powf+0x1d0>
  800c18:	88003b26 	beq	r17,zero,800d08 <__ieee754_powf+0x1d0>
  800c1c:	014fe034 	movhi	r5,16256
  800c20:	89403926 	beq	r17,r5,800d08 <__ieee754_powf+0x1d0>
  800c24:	a004d7fa 	srli	r2,r20,31
  800c28:	10bfffc4 	addi	r2,r2,-1
  800c2c:	15c6b03a 	or	r3,r2,r23
  800c30:	d8800215 	stw	r2,8(sp)
  800c34:	1800661e 	bne	r3,zero,800dd0 <__ieee754_powf+0x298>
  800c38:	980b883a 	mov	r5,r19
  800c3c:	9809883a 	mov	r4,r19
  800c40:	0801d640 	call	801d64 <__subsf3>
  800c44:	1009883a 	mov	r4,r2
  800c48:	100b883a 	mov	r5,r2
  800c4c:	08020180 	call	802018 <__divsf3>
  800c50:	1039883a 	mov	fp,r2
  800c54:	00000106 	br	800c5c <__ieee754_powf+0x124>
  800c58:	070fe034 	movhi	fp,16256
  800c5c:	e005883a 	mov	r2,fp
  800c60:	dfc00f17 	ldw	ra,60(sp)
  800c64:	df000e17 	ldw	fp,56(sp)
  800c68:	ddc00d17 	ldw	r23,52(sp)
  800c6c:	dd800c17 	ldw	r22,48(sp)
  800c70:	dd400b17 	ldw	r21,44(sp)
  800c74:	dd000a17 	ldw	r20,40(sp)
  800c78:	dcc00917 	ldw	r19,36(sp)
  800c7c:	dc800817 	ldw	r18,32(sp)
  800c80:	dc400717 	ldw	r17,28(sp)
  800c84:	dc000617 	ldw	r16,24(sp)
  800c88:	dec01004 	addi	sp,sp,64
  800c8c:	f800283a 	ret
  800c90:	8839883a 	mov	fp,r17
  800c94:	003ff106 	br	800c5c <__ieee754_powf+0x124>
  800c98:	a03fda16 	blt	r20,zero,800c04 <__ieee754_powf+0xcc>
  800c9c:	9809883a 	mov	r4,r19
  800ca0:	dfc00f17 	ldw	ra,60(sp)
  800ca4:	df000e17 	ldw	fp,56(sp)
  800ca8:	ddc00d17 	ldw	r23,52(sp)
  800cac:	dd800c17 	ldw	r22,48(sp)
  800cb0:	dd400b17 	ldw	r21,44(sp)
  800cb4:	dd000a17 	ldw	r20,40(sp)
  800cb8:	dcc00917 	ldw	r19,36(sp)
  800cbc:	dc800817 	ldw	r18,32(sp)
  800cc0:	dc400717 	ldw	r17,28(sp)
  800cc4:	dc000617 	ldw	r16,24(sp)
  800cc8:	dec01004 	addi	sp,sp,64
  800ccc:	080164c1 	jmpi	80164c <__ieee754_sqrtf>
  800cd0:	008fe034 	movhi	r2,16256
  800cd4:	88bfee26 	beq	r17,r2,800c90 <__ieee754_powf+0x158>
  800cd8:	1440200e 	bge	r2,r17,800d5c <__ieee754_powf+0x224>
  800cdc:	903fdf0e 	bge	r18,zero,800c5c <__ieee754_powf+0x124>
  800ce0:	0039883a 	mov	fp,zero
  800ce4:	003fdd06 	br	800c5c <__ieee754_powf+0x124>
  800ce8:	90002f16 	blt	r18,zero,800da8 <__ieee754_powf+0x270>
  800cec:	9839883a 	mov	fp,r19
  800cf0:	003fda06 	br	800c5c <__ieee754_powf+0x124>
  800cf4:	0092e034 	movhi	r2,19328
  800cf8:	10bfffc4 	addi	r2,r2,-1
  800cfc:	14001b0e 	bge	r2,r16,800d6c <__ieee754_powf+0x234>
  800d00:	05c00084 	movi	r23,2
  800d04:	003fb706 	br	800be4 <__ieee754_powf+0xac>
  800d08:	90000916 	blt	r18,zero,800d30 <__ieee754_powf+0x1f8>
  800d0c:	a8000226 	beq	r21,zero,800d18 <__ieee754_powf+0x1e0>
  800d10:	2039883a 	mov	fp,r4
  800d14:	003fd106 	br	800c5c <__ieee754_powf+0x124>
  800d18:	00b02034 	movhi	r2,49280
  800d1c:	8885883a 	add	r2,r17,r2
  800d20:	b884b03a 	or	r2,r23,r2
  800d24:	1000251e 	bne	r2,zero,800dbc <__ieee754_powf+0x284>
  800d28:	200b883a 	mov	r5,r4
  800d2c:	003fc406 	br	800c40 <__ieee754_powf+0x108>
  800d30:	200b883a 	mov	r5,r4
  800d34:	010fe034 	movhi	r4,16256
  800d38:	08020180 	call	802018 <__divsf3>
  800d3c:	1009883a 	mov	r4,r2
  800d40:	a83ff31e 	bne	r21,zero,800d10 <__ieee754_powf+0x1d8>
  800d44:	003ff406 	br	800d18 <__ieee754_powf+0x1e0>
  800d48:	980b883a 	mov	r5,r19
  800d4c:	9809883a 	mov	r4,r19
  800d50:	0801e380 	call	801e38 <__mulsf3>
  800d54:	1039883a 	mov	fp,r2
  800d58:	003fc006 	br	800c5c <__ieee754_powf+0x124>
  800d5c:	903fe00e 	bge	r18,zero,800ce0 <__ieee754_powf+0x1a8>
  800d60:	e0a0003c 	xorhi	r2,fp,32768
  800d64:	1039883a 	mov	fp,r2
  800d68:	003fbc06 	br	800c5c <__ieee754_powf+0x124>
  800d6c:	008fe034 	movhi	r2,16256
  800d70:	10bfffc4 	addi	r2,r2,-1
  800d74:	1400060e 	bge	r2,r16,800d90 <__ieee754_powf+0x258>
  800d78:	8007d5fa 	srai	r3,r16,23
  800d7c:	00802584 	movi	r2,150
  800d80:	10c5c83a 	sub	r2,r2,r3
  800d84:	8087d83a 	sra	r3,r16,r2
  800d88:	1884983a 	sll	r2,r3,r2
  800d8c:	80800226 	beq	r16,r2,800d98 <__ieee754_powf+0x260>
  800d90:	002f883a 	mov	r23,zero
  800d94:	003f9506 	br	800bec <__ieee754_powf+0xb4>
  800d98:	18c0004c 	andi	r3,r3,1
  800d9c:	00800084 	movi	r2,2
  800da0:	10efc83a 	sub	r23,r2,r3
  800da4:	003f9106 	br	800bec <__ieee754_powf+0xb4>
  800da8:	8009883a 	mov	r4,r16
  800dac:	980b883a 	mov	r5,r19
  800db0:	08020180 	call	802018 <__divsf3>
  800db4:	1039883a 	mov	fp,r2
  800db8:	003fa806 	br	800c5c <__ieee754_powf+0x124>
  800dbc:	00800044 	movi	r2,1
  800dc0:	b8bfd31e 	bne	r23,r2,800d10 <__ieee754_powf+0x1d8>
  800dc4:	20a0003c 	xorhi	r2,r4,32768
  800dc8:	1039883a 	mov	fp,r2
  800dcc:	003fa306 	br	800c5c <__ieee754_powf+0x124>
  800dd0:	00934034 	movhi	r2,19712
  800dd4:	14000a0e 	bge	r2,r16,800e00 <__ieee754_powf+0x2c8>
  800dd8:	008fe034 	movhi	r2,16256
  800ddc:	10bffdc4 	addi	r2,r2,-9
  800de0:	1441b016 	blt	r2,r17,8014a4 <__ieee754_powf+0x96c>
  800de4:	903fbe0e 	bge	r18,zero,800ce0 <__ieee754_powf+0x1a8>
  800de8:	011c52b4 	movhi	r4,29002
  800dec:	213cb284 	addi	r4,r4,-3382
  800df0:	200b883a 	mov	r5,r4
  800df4:	0801e380 	call	801e38 <__mulsf3>
  800df8:	1039883a 	mov	fp,r2
  800dfc:	003f9706 	br	800c5c <__ieee754_powf+0x124>
  800e00:	00802034 	movhi	r2,128
  800e04:	10bfffc4 	addi	r2,r2,-1
  800e08:	1441a10e 	bge	r2,r17,801490 <__ieee754_powf+0x958>
  800e0c:	0009883a 	mov	r4,zero
  800e10:	8805d5fa 	srai	r2,r17,23
  800e14:	00c02034 	movhi	r3,128
  800e18:	18ffffc4 	addi	r3,r3,-1
  800e1c:	88c6703a 	and	r3,r17,r3
  800e20:	2089883a 	add	r4,r4,r2
  800e24:	20bfe044 	addi	r2,r4,-127
  800e28:	d8800015 	stw	r2,0(sp)
  800e2c:	00800774 	movhi	r2,29
  800e30:	10b11c44 	addi	r2,r2,-15247
  800e34:	1c0fe034 	orhi	r16,r3,16256
  800e38:	10c1790e 	bge	r2,r3,801420 <__ieee754_powf+0x8e8>
  800e3c:	008017b4 	movhi	r2,94
  800e40:	10acf584 	addi	r2,r2,-19498
  800e44:	10c17216 	blt	r2,r3,801410 <__ieee754_powf+0x8d8>
  800e48:	00800934 	movhi	r2,36
  800e4c:	05000044 	movi	r20,1
  800e50:	d8800115 	stw	r2,4(sp)
  800e54:	a529883a 	add	r20,r20,r20
  800e58:	a529883a 	add	r20,r20,r20
  800e5c:	d0a00204 	addi	r2,gp,-32760
  800e60:	a085883a 	add	r2,r20,r2
  800e64:	14800017 	ldw	r18,0(r2)
  800e68:	8009883a 	mov	r4,r16
  800e6c:	8023d07a 	srai	r17,r16,1
  800e70:	900b883a 	mov	r5,r18
  800e74:	0801d640 	call	801d64 <__subsf3>
  800e78:	8009883a 	mov	r4,r16
  800e7c:	900b883a 	mov	r5,r18
  800e80:	1027883a 	mov	r19,r2
  800e84:	0801dd40 	call	801dd4 <__addsf3>
  800e88:	100b883a 	mov	r5,r2
  800e8c:	010fe034 	movhi	r4,16256
  800e90:	08020180 	call	802018 <__divsf3>
  800e94:	100b883a 	mov	r5,r2
  800e98:	9809883a 	mov	r4,r19
  800e9c:	102b883a 	mov	r21,r2
  800ea0:	0801e380 	call	801e38 <__mulsf3>
  800ea4:	d8800315 	stw	r2,12(sp)
  800ea8:	d8c00317 	ldw	r3,12(sp)
  800eac:	00bc0004 	movi	r2,-4096
  800eb0:	8c480034 	orhi	r17,r17,8192
  800eb4:	10ec703a 	and	r22,r2,r3
  800eb8:	d8800117 	ldw	r2,4(sp)
  800ebc:	b009883a 	mov	r4,r22
  800ec0:	88a3883a 	add	r17,r17,r2
  800ec4:	880b883a 	mov	r5,r17
  800ec8:	0801e380 	call	801e38 <__mulsf3>
  800ecc:	100b883a 	mov	r5,r2
  800ed0:	9809883a 	mov	r4,r19
  800ed4:	0801d640 	call	801d64 <__subsf3>
  800ed8:	8809883a 	mov	r4,r17
  800edc:	900b883a 	mov	r5,r18
  800ee0:	1027883a 	mov	r19,r2
  800ee4:	0801d640 	call	801d64 <__subsf3>
  800ee8:	100b883a 	mov	r5,r2
  800eec:	8009883a 	mov	r4,r16
  800ef0:	0801d640 	call	801d64 <__subsf3>
  800ef4:	100b883a 	mov	r5,r2
  800ef8:	b009883a 	mov	r4,r22
  800efc:	0801e380 	call	801e38 <__mulsf3>
  800f00:	100b883a 	mov	r5,r2
  800f04:	9809883a 	mov	r4,r19
  800f08:	0801d640 	call	801d64 <__subsf3>
  800f0c:	100b883a 	mov	r5,r2
  800f10:	a809883a 	mov	r4,r21
  800f14:	0801e380 	call	801e38 <__mulsf3>
  800f18:	d9000317 	ldw	r4,12(sp)
  800f1c:	d8800415 	stw	r2,16(sp)
  800f20:	05501034 	movhi	r21,16448
  800f24:	200b883a 	mov	r5,r4
  800f28:	0801e380 	call	801e38 <__mulsf3>
  800f2c:	1021883a 	mov	r16,r2
  800f30:	1009883a 	mov	r4,r2
  800f34:	100b883a 	mov	r5,r2
  800f38:	0801e380 	call	801e38 <__mulsf3>
  800f3c:	8009883a 	mov	r4,r16
  800f40:	014f9534 	movhi	r5,15956
  800f44:	297c5084 	addi	r5,r5,-3774
  800f48:	1023883a 	mov	r17,r2
  800f4c:	0801e380 	call	801e38 <__mulsf3>
  800f50:	1009883a 	mov	r4,r2
  800f54:	014f9b34 	movhi	r5,15980
  800f58:	294c9544 	addi	r5,r5,12885
  800f5c:	0801dd40 	call	801dd4 <__addsf3>
  800f60:	100b883a 	mov	r5,r2
  800f64:	8009883a 	mov	r4,r16
  800f68:	0801e380 	call	801e38 <__mulsf3>
  800f6c:	1009883a 	mov	r4,r2
  800f70:	014fa334 	movhi	r5,16012
  800f74:	2968c144 	addi	r5,r5,-23803
  800f78:	0801dd40 	call	801dd4 <__addsf3>
  800f7c:	100b883a 	mov	r5,r2
  800f80:	8009883a 	mov	r4,r16
  800f84:	0801e380 	call	801e38 <__mulsf3>
  800f88:	1009883a 	mov	r4,r2
  800f8c:	014faaf4 	movhi	r5,16043
  800f90:	296aaac4 	addi	r5,r5,-21845
  800f94:	0801dd40 	call	801dd4 <__addsf3>
  800f98:	100b883a 	mov	r5,r2
  800f9c:	8009883a 	mov	r4,r16
  800fa0:	0801e380 	call	801e38 <__mulsf3>
  800fa4:	1009883a 	mov	r4,r2
  800fa8:	014fb6f4 	movhi	r5,16091
  800fac:	295b6dc4 	addi	r5,r5,28087
  800fb0:	0801dd40 	call	801dd4 <__addsf3>
  800fb4:	100b883a 	mov	r5,r2
  800fb8:	8009883a 	mov	r4,r16
  800fbc:	0801e380 	call	801e38 <__mulsf3>
  800fc0:	1009883a 	mov	r4,r2
  800fc4:	014fc6b4 	movhi	r5,16154
  800fc8:	29666684 	addi	r5,r5,-26214
  800fcc:	0801dd40 	call	801dd4 <__addsf3>
  800fd0:	100b883a 	mov	r5,r2
  800fd4:	8809883a 	mov	r4,r17
  800fd8:	0801e380 	call	801e38 <__mulsf3>
  800fdc:	d9000317 	ldw	r4,12(sp)
  800fe0:	b00b883a 	mov	r5,r22
  800fe4:	1021883a 	mov	r16,r2
  800fe8:	0801dd40 	call	801dd4 <__addsf3>
  800fec:	d9000417 	ldw	r4,16(sp)
  800ff0:	100b883a 	mov	r5,r2
  800ff4:	0801e380 	call	801e38 <__mulsf3>
  800ff8:	100b883a 	mov	r5,r2
  800ffc:	8009883a 	mov	r4,r16
  801000:	0801dd40 	call	801dd4 <__addsf3>
  801004:	b009883a 	mov	r4,r22
  801008:	b00b883a 	mov	r5,r22
  80100c:	1025883a 	mov	r18,r2
  801010:	0801e380 	call	801e38 <__mulsf3>
  801014:	1009883a 	mov	r4,r2
  801018:	a80b883a 	mov	r5,r21
  80101c:	1027883a 	mov	r19,r2
  801020:	0801dd40 	call	801dd4 <__addsf3>
  801024:	100b883a 	mov	r5,r2
  801028:	9009883a 	mov	r4,r18
  80102c:	0801dd40 	call	801dd4 <__addsf3>
  801030:	00fc0004 	movi	r3,-4096
  801034:	10e2703a 	and	r17,r2,r3
  801038:	880b883a 	mov	r5,r17
  80103c:	b009883a 	mov	r4,r22
  801040:	0801e380 	call	801e38 <__mulsf3>
  801044:	d9000417 	ldw	r4,16(sp)
  801048:	880b883a 	mov	r5,r17
  80104c:	d8800515 	stw	r2,20(sp)
  801050:	0801e380 	call	801e38 <__mulsf3>
  801054:	8809883a 	mov	r4,r17
  801058:	a80b883a 	mov	r5,r21
  80105c:	1021883a 	mov	r16,r2
  801060:	0801d640 	call	801d64 <__subsf3>
  801064:	1009883a 	mov	r4,r2
  801068:	980b883a 	mov	r5,r19
  80106c:	0801d640 	call	801d64 <__subsf3>
  801070:	100b883a 	mov	r5,r2
  801074:	9009883a 	mov	r4,r18
  801078:	0801d640 	call	801d64 <__subsf3>
  80107c:	d9000317 	ldw	r4,12(sp)
  801080:	100b883a 	mov	r5,r2
  801084:	0801e380 	call	801e38 <__mulsf3>
  801088:	100b883a 	mov	r5,r2
  80108c:	8009883a 	mov	r4,r16
  801090:	0801dd40 	call	801dd4 <__addsf3>
  801094:	d9000517 	ldw	r4,20(sp)
  801098:	100b883a 	mov	r5,r2
  80109c:	1027883a 	mov	r19,r2
  8010a0:	0801dd40 	call	801dd4 <__addsf3>
  8010a4:	00fc0004 	movi	r3,-4096
  8010a8:	10e2703a 	and	r17,r2,r3
  8010ac:	8809883a 	mov	r4,r17
  8010b0:	014fddb4 	movhi	r5,16246
  8010b4:	294e0004 	addi	r5,r5,14336
  8010b8:	0801e380 	call	801e38 <__mulsf3>
  8010bc:	8809883a 	mov	r4,r17
  8010c0:	014da7b4 	movhi	r5,13982
  8010c4:	2970e804 	addi	r5,r5,-15456
  8010c8:	102b883a 	mov	r21,r2
  8010cc:	0801e380 	call	801e38 <__mulsf3>
  8010d0:	d9400517 	ldw	r5,20(sp)
  8010d4:	8809883a 	mov	r4,r17
  8010d8:	1025883a 	mov	r18,r2
  8010dc:	0801d640 	call	801d64 <__subsf3>
  8010e0:	100b883a 	mov	r5,r2
  8010e4:	9809883a 	mov	r4,r19
  8010e8:	0801d640 	call	801d64 <__subsf3>
  8010ec:	1009883a 	mov	r4,r2
  8010f0:	014fddb4 	movhi	r5,16246
  8010f4:	294e13c4 	addi	r5,r5,14415
  8010f8:	0801e380 	call	801e38 <__mulsf3>
  8010fc:	100b883a 	mov	r5,r2
  801100:	9009883a 	mov	r4,r18
  801104:	0801dd40 	call	801dd4 <__addsf3>
  801108:	d0e00404 	addi	r3,gp,-32752
  80110c:	a0c7883a 	add	r3,r20,r3
  801110:	19400017 	ldw	r5,0(r3)
  801114:	1009883a 	mov	r4,r2
  801118:	0801dd40 	call	801dd4 <__addsf3>
  80111c:	d9000017 	ldw	r4,0(sp)
  801120:	1023883a 	mov	r17,r2
  801124:	080236c0 	call	80236c <__floatsisf>
  801128:	1021883a 	mov	r16,r2
  80112c:	d0a00604 	addi	r2,gp,-32744
  801130:	a0a9883a 	add	r20,r20,r2
  801134:	a4800017 	ldw	r18,0(r20)
  801138:	a809883a 	mov	r4,r21
  80113c:	880b883a 	mov	r5,r17
  801140:	0801dd40 	call	801dd4 <__addsf3>
  801144:	1009883a 	mov	r4,r2
  801148:	900b883a 	mov	r5,r18
  80114c:	0801dd40 	call	801dd4 <__addsf3>
  801150:	100b883a 	mov	r5,r2
  801154:	8009883a 	mov	r4,r16
  801158:	0801dd40 	call	801dd4 <__addsf3>
  80115c:	00fc0004 	movi	r3,-4096
  801160:	10c4703a 	and	r2,r2,r3
  801164:	800b883a 	mov	r5,r16
  801168:	1009883a 	mov	r4,r2
  80116c:	1027883a 	mov	r19,r2
  801170:	0801d640 	call	801d64 <__subsf3>
  801174:	1009883a 	mov	r4,r2
  801178:	900b883a 	mov	r5,r18
  80117c:	0801d640 	call	801d64 <__subsf3>
  801180:	1009883a 	mov	r4,r2
  801184:	a80b883a 	mov	r5,r21
  801188:	0801d640 	call	801d64 <__subsf3>
  80118c:	100b883a 	mov	r5,r2
  801190:	8809883a 	mov	r4,r17
  801194:	0801d640 	call	801d64 <__subsf3>
  801198:	1021883a 	mov	r16,r2
  80119c:	d8c00217 	ldw	r3,8(sp)
  8011a0:	b8bfffc4 	addi	r2,r23,-1
  8011a4:	1884b03a 	or	r2,r3,r2
  8011a8:	1000a11e 	bne	r2,zero,801430 <__ieee754_powf+0x8f8>
  8011ac:	05efe034 	movhi	r23,49024
  8011b0:	047c0004 	movi	r17,-4096
  8011b4:	8f22703a 	and	r17,r17,fp
  8011b8:	e009883a 	mov	r4,fp
  8011bc:	880b883a 	mov	r5,r17
  8011c0:	0801d640 	call	801d64 <__subsf3>
  8011c4:	100b883a 	mov	r5,r2
  8011c8:	9809883a 	mov	r4,r19
  8011cc:	0801e380 	call	801e38 <__mulsf3>
  8011d0:	8009883a 	mov	r4,r16
  8011d4:	e00b883a 	mov	r5,fp
  8011d8:	1025883a 	mov	r18,r2
  8011dc:	0801e380 	call	801e38 <__mulsf3>
  8011e0:	100b883a 	mov	r5,r2
  8011e4:	9009883a 	mov	r4,r18
  8011e8:	0801dd40 	call	801dd4 <__addsf3>
  8011ec:	9809883a 	mov	r4,r19
  8011f0:	880b883a 	mov	r5,r17
  8011f4:	1021883a 	mov	r16,r2
  8011f8:	0801e380 	call	801e38 <__mulsf3>
  8011fc:	100b883a 	mov	r5,r2
  801200:	8009883a 	mov	r4,r16
  801204:	1027883a 	mov	r19,r2
  801208:	0801dd40 	call	801dd4 <__addsf3>
  80120c:	1023883a 	mov	r17,r2
  801210:	1029883a 	mov	r20,r2
  801214:	00a00034 	movhi	r2,32768
  801218:	10bfffc4 	addi	r2,r2,-1
  80121c:	88a4703a 	and	r18,r17,r2
  801220:	8039883a 	mov	fp,r16
  801224:	982b883a 	mov	r21,r19
  801228:	8807883a 	mov	r3,r17
  80122c:	0440a30e 	bge	zero,r17,8014bc <__ieee754_powf+0x984>
  801230:	0090c034 	movhi	r2,17152
  801234:	14808c16 	blt	r2,r18,801468 <__ieee754_powf+0x930>
  801238:	90807f26 	beq	r18,r2,801438 <__ieee754_powf+0x900>
  80123c:	008fc034 	movhi	r2,16128
  801240:	1480a816 	blt	r2,r18,8014e4 <__ieee754_powf+0x9ac>
  801244:	002d883a 	mov	r22,zero
  801248:	0029883a 	mov	r20,zero
  80124c:	047c0004 	movi	r17,-4096
  801250:	88e2703a 	and	r17,r17,r3
  801254:	8809883a 	mov	r4,r17
  801258:	014fcc74 	movhi	r5,16177
  80125c:	295c8004 	addi	r5,r5,29184
  801260:	0801e380 	call	801e38 <__mulsf3>
  801264:	8809883a 	mov	r4,r17
  801268:	a80b883a 	mov	r5,r21
  80126c:	1027883a 	mov	r19,r2
  801270:	0801d640 	call	801d64 <__subsf3>
  801274:	100b883a 	mov	r5,r2
  801278:	e009883a 	mov	r4,fp
  80127c:	0801d640 	call	801d64 <__subsf3>
  801280:	1009883a 	mov	r4,r2
  801284:	014fcc74 	movhi	r5,16177
  801288:	295c8604 	addi	r5,r5,29208
  80128c:	0801e380 	call	801e38 <__mulsf3>
  801290:	8809883a 	mov	r4,r17
  801294:	014d7034 	movhi	r5,13760
  801298:	296fa304 	addi	r5,r5,-16756
  80129c:	1025883a 	mov	r18,r2
  8012a0:	0801e380 	call	801e38 <__mulsf3>
  8012a4:	100b883a 	mov	r5,r2
  8012a8:	9009883a 	mov	r4,r18
  8012ac:	0801dd40 	call	801dd4 <__addsf3>
  8012b0:	100b883a 	mov	r5,r2
  8012b4:	9809883a 	mov	r4,r19
  8012b8:	1021883a 	mov	r16,r2
  8012bc:	0801dd40 	call	801dd4 <__addsf3>
  8012c0:	1009883a 	mov	r4,r2
  8012c4:	980b883a 	mov	r5,r19
  8012c8:	1025883a 	mov	r18,r2
  8012cc:	0801d640 	call	801d64 <__subsf3>
  8012d0:	100b883a 	mov	r5,r2
  8012d4:	8009883a 	mov	r4,r16
  8012d8:	0801d640 	call	801d64 <__subsf3>
  8012dc:	9009883a 	mov	r4,r18
  8012e0:	900b883a 	mov	r5,r18
  8012e4:	1027883a 	mov	r19,r2
  8012e8:	0801e380 	call	801e38 <__mulsf3>
  8012ec:	1009883a 	mov	r4,r2
  8012f0:	014cccb4 	movhi	r5,13106
  8012f4:	296ed304 	addi	r5,r5,-17588
  8012f8:	1021883a 	mov	r16,r2
  8012fc:	0801e380 	call	801e38 <__mulsf3>
  801300:	1009883a 	mov	r4,r2
  801304:	014d77b4 	movhi	r5,13790
  801308:	297a8384 	addi	r5,r5,-5618
  80130c:	0801d640 	call	801d64 <__subsf3>
  801310:	100b883a 	mov	r5,r2
  801314:	8009883a 	mov	r4,r16
  801318:	0801e380 	call	801e38 <__mulsf3>
  80131c:	1009883a 	mov	r4,r2
  801320:	014e22f4 	movhi	r5,14475
  801324:	296cd544 	addi	r5,r5,-19627
  801328:	0801dd40 	call	801dd4 <__addsf3>
  80132c:	100b883a 	mov	r5,r2
  801330:	8009883a 	mov	r4,r16
  801334:	0801e380 	call	801e38 <__mulsf3>
  801338:	1009883a 	mov	r4,r2
  80133c:	014ecdb4 	movhi	r5,15158
  801340:	2942d844 	addi	r5,r5,2913
  801344:	0801d640 	call	801d64 <__subsf3>
  801348:	100b883a 	mov	r5,r2
  80134c:	8009883a 	mov	r4,r16
  801350:	0801e380 	call	801e38 <__mulsf3>
  801354:	1009883a 	mov	r4,r2
  801358:	014f8af4 	movhi	r5,15915
  80135c:	296aaac4 	addi	r5,r5,-21845
  801360:	0801dd40 	call	801dd4 <__addsf3>
  801364:	100b883a 	mov	r5,r2
  801368:	8009883a 	mov	r4,r16
  80136c:	0801e380 	call	801e38 <__mulsf3>
  801370:	100b883a 	mov	r5,r2
  801374:	9009883a 	mov	r4,r18
  801378:	0801d640 	call	801d64 <__subsf3>
  80137c:	1021883a 	mov	r16,r2
  801380:	9009883a 	mov	r4,r18
  801384:	100b883a 	mov	r5,r2
  801388:	0801e380 	call	801e38 <__mulsf3>
  80138c:	8009883a 	mov	r4,r16
  801390:	01500034 	movhi	r5,16384
  801394:	1023883a 	mov	r17,r2
  801398:	0801d640 	call	801d64 <__subsf3>
  80139c:	100b883a 	mov	r5,r2
  8013a0:	8809883a 	mov	r4,r17
  8013a4:	08020180 	call	802018 <__divsf3>
  8013a8:	9009883a 	mov	r4,r18
  8013ac:	980b883a 	mov	r5,r19
  8013b0:	1021883a 	mov	r16,r2
  8013b4:	0801e380 	call	801e38 <__mulsf3>
  8013b8:	100b883a 	mov	r5,r2
  8013bc:	9809883a 	mov	r4,r19
  8013c0:	0801dd40 	call	801dd4 <__addsf3>
  8013c4:	100b883a 	mov	r5,r2
  8013c8:	8009883a 	mov	r4,r16
  8013cc:	0801d640 	call	801d64 <__subsf3>
  8013d0:	1009883a 	mov	r4,r2
  8013d4:	900b883a 	mov	r5,r18
  8013d8:	0801d640 	call	801d64 <__subsf3>
  8013dc:	100b883a 	mov	r5,r2
  8013e0:	010fe034 	movhi	r4,16256
  8013e4:	0801d640 	call	801d64 <__subsf3>
  8013e8:	a087883a 	add	r3,r20,r2
  8013ec:	1009883a 	mov	r4,r2
  8013f0:	1805d5fa 	srai	r2,r3,23
  8013f4:	0080920e 	bge	zero,r2,801640 <__ieee754_powf+0xb08>
  8013f8:	1805883a 	mov	r2,r3
  8013fc:	1009883a 	mov	r4,r2
  801400:	b80b883a 	mov	r5,r23
  801404:	0801e380 	call	801e38 <__mulsf3>
  801408:	1039883a 	mov	fp,r2
  80140c:	003e1306 	br	800c5c <__ieee754_powf+0x124>
  801410:	00bfe034 	movhi	r2,65408
  801414:	213fe084 	addi	r4,r4,-126
  801418:	80a1883a 	add	r16,r16,r2
  80141c:	d9000015 	stw	r4,0(sp)
  801420:	00c00134 	movhi	r3,4
  801424:	0029883a 	mov	r20,zero
  801428:	d8c00115 	stw	r3,4(sp)
  80142c:	003e8906 	br	800e54 <__ieee754_powf+0x31c>
  801430:	05cfe034 	movhi	r23,16256
  801434:	003f5e06 	br	8011b0 <__ieee754_powf+0x678>
  801438:	8009883a 	mov	r4,r16
  80143c:	014cce74 	movhi	r5,13113
  801440:	296a8f04 	addi	r5,r5,-21956
  801444:	0801dd40 	call	801dd4 <__addsf3>
  801448:	8809883a 	mov	r4,r17
  80144c:	980b883a 	mov	r5,r19
  801450:	1021883a 	mov	r16,r2
  801454:	0801d640 	call	801d64 <__subsf3>
  801458:	100b883a 	mov	r5,r2
  80145c:	8009883a 	mov	r4,r16
  801460:	08022040 	call	802204 <__gtsf2>
  801464:	00801f0e 	bge	zero,r2,8014e4 <__ieee754_powf+0x9ac>
  801468:	041c52b4 	movhi	r16,29002
  80146c:	843cb284 	addi	r16,r16,-3382
  801470:	b809883a 	mov	r4,r23
  801474:	800b883a 	mov	r5,r16
  801478:	0801e380 	call	801e38 <__mulsf3>
  80147c:	1009883a 	mov	r4,r2
  801480:	800b883a 	mov	r5,r16
  801484:	0801e380 	call	801e38 <__mulsf3>
  801488:	1039883a 	mov	fp,r2
  80148c:	003df306 	br	800c5c <__ieee754_powf+0x124>
  801490:	0152e034 	movhi	r5,19328
  801494:	0801e380 	call	801e38 <__mulsf3>
  801498:	1023883a 	mov	r17,r2
  80149c:	013ffa04 	movi	r4,-24
  8014a0:	003e5b06 	br	800e10 <__ieee754_powf+0x2d8>
  8014a4:	008fe034 	movhi	r2,16256
  8014a8:	108001c4 	addi	r2,r2,7
  8014ac:	14402c0e 	bge	r2,r17,801560 <__ieee754_powf+0xa28>
  8014b0:	04be4d16 	blt	zero,r18,800de8 <__ieee754_powf+0x2b0>
  8014b4:	0039883a 	mov	fp,zero
  8014b8:	003de806 	br	800c5c <__ieee754_powf+0x124>
  8014bc:	0090c5b4 	movhi	r2,17174
  8014c0:	14802416 	blt	r2,r18,801554 <__ieee754_powf+0xa1c>
  8014c4:	90bf5d1e 	bne	r18,r2,80123c <__ieee754_powf+0x704>
  8014c8:	8809883a 	mov	r4,r17
  8014cc:	980b883a 	mov	r5,r19
  8014d0:	0801d640 	call	801d64 <__subsf3>
  8014d4:	100b883a 	mov	r5,r2
  8014d8:	8009883a 	mov	r4,r16
  8014dc:	08022f40 	call	8022f4 <__lesf2>
  8014e0:	00801c0e 	bge	zero,r2,801554 <__ieee754_powf+0xa1c>
  8014e4:	9005d5fa 	srai	r2,r18,23
  8014e8:	01002034 	movhi	r4,128
  8014ec:	01402034 	movhi	r5,128
  8014f0:	297fffc4 	addi	r5,r5,-1
  8014f4:	10bfe084 	addi	r2,r2,-126
  8014f8:	2089d83a 	sra	r4,r4,r2
  8014fc:	008005c4 	movi	r2,23
  801500:	a109883a 	add	r4,r20,r4
  801504:	2006d5fa 	srli	r3,r4,23
  801508:	214c703a 	and	r6,r4,r5
  80150c:	31802034 	orhi	r6,r6,128
  801510:	18c03fcc 	andi	r3,r3,255
  801514:	18ffe044 	addi	r3,r3,-127
  801518:	28cbd83a 	sra	r5,r5,r3
  80151c:	10c5c83a 	sub	r2,r2,r3
  801520:	30add83a 	sra	r22,r6,r2
  801524:	014a303a 	nor	r5,zero,r5
  801528:	214a703a 	and	r5,r4,r5
  80152c:	a0004216 	blt	r20,zero,801638 <__ieee754_powf+0xb00>
  801530:	a809883a 	mov	r4,r21
  801534:	0801d640 	call	801d64 <__subsf3>
  801538:	100b883a 	mov	r5,r2
  80153c:	e009883a 	mov	r4,fp
  801540:	b02895fa 	slli	r20,r22,23
  801544:	102b883a 	mov	r21,r2
  801548:	0801dd40 	call	801dd4 <__addsf3>
  80154c:	1007883a 	mov	r3,r2
  801550:	003f3e06 	br	80124c <__ieee754_powf+0x714>
  801554:	040368b4 	movhi	r16,3490
  801558:	84109804 	addi	r16,r16,16992
  80155c:	003fc406 	br	801470 <__ieee754_powf+0x938>
  801560:	0801d640 	call	801d64 <__subsf3>
  801564:	1021883a 	mov	r16,r2
  801568:	1009883a 	mov	r4,r2
  80156c:	014fee74 	movhi	r5,16313
  801570:	296a8004 	addi	r5,r5,-22016
  801574:	0801e380 	call	801e38 <__mulsf3>
  801578:	8009883a 	mov	r4,r16
  80157c:	014dbb74 	movhi	r5,14061
  801580:	29695c04 	addi	r5,r5,-23184
  801584:	1023883a 	mov	r17,r2
  801588:	0801e380 	call	801e38 <__mulsf3>
  80158c:	8009883a 	mov	r4,r16
  801590:	800b883a 	mov	r5,r16
  801594:	1025883a 	mov	r18,r2
  801598:	0801e380 	call	801e38 <__mulsf3>
  80159c:	8009883a 	mov	r4,r16
  8015a0:	016fa034 	movhi	r5,48768
  8015a4:	1027883a 	mov	r19,r2
  8015a8:	0801e380 	call	801e38 <__mulsf3>
  8015ac:	1009883a 	mov	r4,r2
  8015b0:	014faaf4 	movhi	r5,16043
  8015b4:	296aaac4 	addi	r5,r5,-21845
  8015b8:	0801dd40 	call	801dd4 <__addsf3>
  8015bc:	100b883a 	mov	r5,r2
  8015c0:	8009883a 	mov	r4,r16
  8015c4:	0801e380 	call	801e38 <__mulsf3>
  8015c8:	100b883a 	mov	r5,r2
  8015cc:	010fc034 	movhi	r4,16128
  8015d0:	0801d640 	call	801d64 <__subsf3>
  8015d4:	100b883a 	mov	r5,r2
  8015d8:	9809883a 	mov	r4,r19
  8015dc:	0801e380 	call	801e38 <__mulsf3>
  8015e0:	1009883a 	mov	r4,r2
  8015e4:	016fee74 	movhi	r5,49081
  8015e8:	296a8ec4 	addi	r5,r5,-21957
  8015ec:	0801e380 	call	801e38 <__mulsf3>
  8015f0:	100b883a 	mov	r5,r2
  8015f4:	9009883a 	mov	r4,r18
  8015f8:	0801dd40 	call	801dd4 <__addsf3>
  8015fc:	100b883a 	mov	r5,r2
  801600:	8809883a 	mov	r4,r17
  801604:	1021883a 	mov	r16,r2
  801608:	0801dd40 	call	801dd4 <__addsf3>
  80160c:	00fc0004 	movi	r3,-4096
  801610:	10c4703a 	and	r2,r2,r3
  801614:	1009883a 	mov	r4,r2
  801618:	880b883a 	mov	r5,r17
  80161c:	1027883a 	mov	r19,r2
  801620:	0801d640 	call	801d64 <__subsf3>
  801624:	100b883a 	mov	r5,r2
  801628:	8009883a 	mov	r4,r16
  80162c:	0801d640 	call	801d64 <__subsf3>
  801630:	1021883a 	mov	r16,r2
  801634:	003ed906 	br	80119c <__ieee754_powf+0x664>
  801638:	05adc83a 	sub	r22,zero,r22
  80163c:	003fbc06 	br	801530 <__ieee754_powf+0x9f8>
  801640:	b00b883a 	mov	r5,r22
  801644:	0801a1c0 	call	801a1c <scalbnf>
  801648:	003f6c06 	br	8013fc <__ieee754_powf+0x8c4>

0080164c <__ieee754_sqrtf>:
  80164c:	00a00034 	movhi	r2,32768
  801650:	10bfffc4 	addi	r2,r2,-1
  801654:	defffe04 	addi	sp,sp,-8
  801658:	208c703a 	and	r6,r4,r2
  80165c:	00dfe034 	movhi	r3,32640
  801660:	18ffffc4 	addi	r3,r3,-1
  801664:	dc000015 	stw	r16,0(sp)
  801668:	dfc00115 	stw	ra,4(sp)
  80166c:	2021883a 	mov	r16,r4
  801670:	200b883a 	mov	r5,r4
  801674:	19800a2e 	bgeu	r3,r6,8016a0 <__ieee754_sqrtf+0x54>
  801678:	0801e380 	call	801e38 <__mulsf3>
  80167c:	100b883a 	mov	r5,r2
  801680:	8009883a 	mov	r4,r16
  801684:	0801dd40 	call	801dd4 <__addsf3>
  801688:	1021883a 	mov	r16,r2
  80168c:	8005883a 	mov	r2,r16
  801690:	dfc00117 	ldw	ra,4(sp)
  801694:	dc000017 	ldw	r16,0(sp)
  801698:	dec00204 	addi	sp,sp,8
  80169c:	f800283a 	ret
  8016a0:	303ffa26 	beq	r6,zero,80168c <__ieee754_sqrtf+0x40>
  8016a4:	20003b16 	blt	r4,zero,801794 <__ieee754_sqrtf+0x148>
  8016a8:	00802034 	movhi	r2,128
  8016ac:	10bfffc4 	addi	r2,r2,-1
  8016b0:	2007d5fa 	srai	r3,r4,23
  8016b4:	11800936 	bltu	r2,r6,8016dc <__ieee754_sqrtf+0x90>
  8016b8:	2080202c 	andhi	r2,r4,128
  8016bc:	10003c1e 	bne	r2,zero,8017b0 <__ieee754_sqrtf+0x164>
  8016c0:	0009883a 	mov	r4,zero
  8016c4:	294b883a 	add	r5,r5,r5
  8016c8:	2880202c 	andhi	r2,r5,128
  8016cc:	21000044 	addi	r4,r4,1
  8016d0:	103ffc26 	beq	r2,zero,8016c4 <__ieee754_sqrtf+0x78>
  8016d4:	1905c83a 	sub	r2,r3,r4
  8016d8:	10c00044 	addi	r3,r2,1
  8016dc:	1a7fe044 	addi	r9,r3,-127
  8016e0:	48c0004c 	andi	r3,r9,1
  8016e4:	00802034 	movhi	r2,128
  8016e8:	10bfffc4 	addi	r2,r2,-1
  8016ec:	2884703a 	and	r2,r5,r2
  8016f0:	1807003a 	cmpeq	r3,r3,zero
  8016f4:	10802034 	orhi	r2,r2,128
  8016f8:	18002426 	beq	r3,zero,80178c <__ieee754_sqrtf+0x140>
  8016fc:	1085883a 	add	r2,r2,r2
  801700:	01404034 	movhi	r5,256
  801704:	000f883a 	mov	r7,zero
  801708:	0007883a 	mov	r3,zero
  80170c:	000d883a 	mov	r6,zero
  801710:	02000644 	movi	r8,25
  801714:	3949883a 	add	r4,r7,r5
  801718:	31800044 	addi	r6,r6,1
  80171c:	11000316 	blt	r2,r4,80172c <__ieee754_sqrtf+0xe0>
  801720:	1105c83a 	sub	r2,r2,r4
  801724:	1947883a 	add	r3,r3,r5
  801728:	214f883a 	add	r7,r4,r5
  80172c:	1085883a 	add	r2,r2,r2
  801730:	280ad07a 	srli	r5,r5,1
  801734:	323ff71e 	bne	r6,r8,801714 <__ieee754_sqrtf+0xc8>
  801738:	10000b1e 	bne	r2,zero,801768 <__ieee754_sqrtf+0x11c>
  80173c:	4805d07a 	srai	r2,r9,1
  801740:	1807d07a 	srai	r3,r3,1
  801744:	010fc034 	movhi	r4,16128
  801748:	100495fa 	slli	r2,r2,23
  80174c:	1907883a 	add	r3,r3,r4
  801750:	18a1883a 	add	r16,r3,r2
  801754:	8005883a 	mov	r2,r16
  801758:	dfc00117 	ldw	ra,4(sp)
  80175c:	dc000017 	ldw	r16,0(sp)
  801760:	dec00204 	addi	sp,sp,8
  801764:	f800283a 	ret
  801768:	1880004c 	andi	r2,r3,1
  80176c:	1887883a 	add	r3,r3,r2
  801770:	4805d07a 	srai	r2,r9,1
  801774:	1807d07a 	srai	r3,r3,1
  801778:	010fc034 	movhi	r4,16128
  80177c:	100495fa 	slli	r2,r2,23
  801780:	1907883a 	add	r3,r3,r4
  801784:	18a1883a 	add	r16,r3,r2
  801788:	003ff206 	br	801754 <__ieee754_sqrtf+0x108>
  80178c:	1085883a 	add	r2,r2,r2
  801790:	003fda06 	br	8016fc <__ieee754_sqrtf+0xb0>
  801794:	200b883a 	mov	r5,r4
  801798:	0801d640 	call	801d64 <__subsf3>
  80179c:	1009883a 	mov	r4,r2
  8017a0:	100b883a 	mov	r5,r2
  8017a4:	08020180 	call	802018 <__divsf3>
  8017a8:	1021883a 	mov	r16,r2
  8017ac:	003fb706 	br	80168c <__ieee754_sqrtf+0x40>
  8017b0:	0009883a 	mov	r4,zero
  8017b4:	003fc706 	br	8016d4 <__ieee754_sqrtf+0x88>

008017b8 <matherr>:
  8017b8:	0005883a 	mov	r2,zero
  8017bc:	f800283a 	ret

008017c0 <rint>:
  8017c0:	2015883a 	mov	r10,r4
  8017c4:	2809d53a 	srai	r4,r5,20
  8017c8:	defff904 	addi	sp,sp,-28
  8017cc:	034004c4 	movi	r13,19
  8017d0:	2101ffcc 	andi	r4,r4,2047
  8017d4:	227f0044 	addi	r9,r4,-1023
  8017d8:	dc800415 	stw	r18,16(sp)
  8017dc:	dfc00615 	stw	ra,24(sp)
  8017e0:	dcc00515 	stw	r19,20(sp)
  8017e4:	dc400315 	stw	r17,12(sp)
  8017e8:	dc000215 	stw	r16,8(sp)
  8017ec:	2817883a 	mov	r11,r5
  8017f0:	500d883a 	mov	r6,r10
  8017f4:	2824d7fa 	srli	r18,r5,31
  8017f8:	6a403016 	blt	r13,r9,8018bc <rint+0xfc>
  8017fc:	48004916 	blt	r9,zero,801924 <rint+0x164>
  801800:	00800434 	movhi	r2,16
  801804:	10bfffc4 	addi	r2,r2,-1
  801808:	1247d83a 	sra	r3,r2,r9
  80180c:	2809883a 	mov	r4,r5
  801810:	1944703a 	and	r2,r3,r5
  801814:	5084b03a 	or	r2,r10,r2
  801818:	10001f26 	beq	r2,zero,801898 <rint+0xd8>
  80181c:	180ad07a 	srli	r5,r3,1
  801820:	5944703a 	and	r2,r11,r5
  801824:	5084b03a 	or	r2,r10,r2
  801828:	10000626 	beq	r2,zero,801844 <rint+0x84>
  80182c:	4b406626 	beq	r9,r13,8019c8 <rint+0x208>
  801830:	00c000b4 	movhi	r3,2
  801834:	1a47d83a 	sra	r3,r3,r9
  801838:	0144303a 	nor	r2,zero,r5
  80183c:	5884703a 	and	r2,r11,r2
  801840:	10c8b03a 	or	r4,r2,r3
  801844:	900690fa 	slli	r3,r18,3
  801848:	00802074 	movhi	r2,129
  80184c:	10863f04 	addi	r2,r2,6396
  801850:	200f883a 	mov	r7,r4
  801854:	1887883a 	add	r3,r3,r2
  801858:	1c000017 	ldw	r16,0(r3)
  80185c:	1c400117 	ldw	r17,4(r3)
  801860:	8009883a 	mov	r4,r16
  801864:	880b883a 	mov	r5,r17
  801868:	08028e80 	call	8028e8 <__adddf3>
  80186c:	d8800015 	stw	r2,0(sp)
  801870:	d8c00115 	stw	r3,4(sp)
  801874:	d8800017 	ldw	r2,0(sp)
  801878:	d8c00117 	ldw	r3,4(sp)
  80187c:	880f883a 	mov	r7,r17
  801880:	800d883a 	mov	r6,r16
  801884:	180b883a 	mov	r5,r3
  801888:	1009883a 	mov	r4,r2
  80188c:	08028680 	call	802868 <__subdf3>
  801890:	1015883a 	mov	r10,r2
  801894:	1817883a 	mov	r11,r3
  801898:	5005883a 	mov	r2,r10
  80189c:	5807883a 	mov	r3,r11
  8018a0:	dfc00617 	ldw	ra,24(sp)
  8018a4:	dcc00517 	ldw	r19,20(sp)
  8018a8:	dc800417 	ldw	r18,16(sp)
  8018ac:	dc400317 	ldw	r17,12(sp)
  8018b0:	dc000217 	ldw	r16,8(sp)
  8018b4:	dec00704 	addi	sp,sp,28
  8018b8:	f800283a 	ret
  8018bc:	00800cc4 	movi	r2,51
  8018c0:	12400f16 	blt	r2,r9,801900 <rint+0x140>
  8018c4:	213efb44 	addi	r4,r4,-1043
  8018c8:	00bfffc4 	movi	r2,-1
  8018cc:	1104d83a 	srl	r2,r2,r4
  8018d0:	5086703a 	and	r3,r10,r2
  8018d4:	183ff026 	beq	r3,zero,801898 <rint+0xd8>
  8018d8:	100ad07a 	srli	r5,r2,1
  8018dc:	5144703a 	and	r2,r10,r5
  8018e0:	10000526 	beq	r2,zero,8018f8 <rint+0x138>
  8018e4:	00d00034 	movhi	r3,16384
  8018e8:	1907d83a 	sra	r3,r3,r4
  8018ec:	0144303a 	nor	r2,zero,r5
  8018f0:	5084703a 	and	r2,r10,r2
  8018f4:	10ccb03a 	or	r6,r2,r3
  8018f8:	5809883a 	mov	r4,r11
  8018fc:	003fd106 	br	801844 <rint+0x84>
  801900:	00810004 	movi	r2,1024
  801904:	48bfe41e 	bne	r9,r2,801898 <rint+0xd8>
  801908:	5009883a 	mov	r4,r10
  80190c:	500d883a 	mov	r6,r10
  801910:	280f883a 	mov	r7,r5
  801914:	08028e80 	call	8028e8 <__adddf3>
  801918:	1015883a 	mov	r10,r2
  80191c:	1817883a 	mov	r11,r3
  801920:	003fdd06 	br	801898 <rint+0xd8>
  801924:	04e00034 	movhi	r19,32768
  801928:	9cffffc4 	addi	r19,r19,-1
  80192c:	2cc4703a 	and	r2,r5,r19
  801930:	5084b03a 	or	r2,r10,r2
  801934:	103fd826 	beq	r2,zero,801898 <rint+0xd8>
  801938:	00c00434 	movhi	r3,16
  80193c:	18ffffc4 	addi	r3,r3,-1
  801940:	28c6703a 	and	r3,r5,r3
  801944:	50c6b03a 	or	r3,r10,r3
  801948:	00cdc83a 	sub	r6,zero,r3
  80194c:	900a90fa 	slli	r5,r18,3
  801950:	1986b03a 	or	r3,r3,r6
  801954:	01002074 	movhi	r4,129
  801958:	21063f04 	addi	r4,r4,6396
  80195c:	1806d33a 	srli	r3,r3,12
  801960:	290b883a 	add	r5,r5,r4
  801964:	2c000017 	ldw	r16,0(r5)
  801968:	2c400117 	ldw	r17,4(r5)
  80196c:	593fffac 	andhi	r4,r11,65534
  801970:	18c0022c 	andhi	r3,r3,8
  801974:	1906b03a 	or	r3,r3,r4
  801978:	500d883a 	mov	r6,r10
  80197c:	180f883a 	mov	r7,r3
  801980:	8009883a 	mov	r4,r16
  801984:	880b883a 	mov	r5,r17
  801988:	08028e80 	call	8028e8 <__adddf3>
  80198c:	d8800015 	stw	r2,0(sp)
  801990:	d8c00115 	stw	r3,4(sp)
  801994:	d8800017 	ldw	r2,0(sp)
  801998:	d8c00117 	ldw	r3,4(sp)
  80199c:	880f883a 	mov	r7,r17
  8019a0:	800d883a 	mov	r6,r16
  8019a4:	180b883a 	mov	r5,r3
  8019a8:	1009883a 	mov	r4,r2
  8019ac:	08028680 	call	802868 <__subdf3>
  8019b0:	901297fa 	slli	r9,r18,31
  8019b4:	98d0703a 	and	r8,r19,r3
  8019b8:	1015883a 	mov	r10,r2
  8019bc:	4250b03a 	or	r8,r8,r9
  8019c0:	4017883a 	mov	r11,r8
  8019c4:	003fb406 	br	801898 <rint+0xd8>
  8019c8:	01900034 	movhi	r6,16384
  8019cc:	003f9d06 	br	801844 <rint+0x84>

008019d0 <fabsf>:
  8019d0:	00a00034 	movhi	r2,32768
  8019d4:	10bfffc4 	addi	r2,r2,-1
  8019d8:	2084703a 	and	r2,r4,r2
  8019dc:	f800283a 	ret

008019e0 <finitef>:
  8019e0:	00a00034 	movhi	r2,32768
  8019e4:	10bfffc4 	addi	r2,r2,-1
  8019e8:	2088703a 	and	r4,r4,r2
  8019ec:	009fe034 	movhi	r2,32640
  8019f0:	10bfffc4 	addi	r2,r2,-1
  8019f4:	1104403a 	cmpge	r2,r2,r4
  8019f8:	f800283a 	ret

008019fc <isnanf>:
  8019fc:	00a00034 	movhi	r2,32768
  801a00:	10bfffc4 	addi	r2,r2,-1
  801a04:	2088703a 	and	r4,r4,r2
  801a08:	009fe034 	movhi	r2,32640
  801a0c:	1104803a 	cmplt	r2,r2,r4
  801a10:	f800283a 	ret

00801a14 <nanf>:
  801a14:	009ff034 	movhi	r2,32704
  801a18:	f800283a 	ret

00801a1c <scalbnf>:
  801a1c:	00a00034 	movhi	r2,32768
  801a20:	10bfffc4 	addi	r2,r2,-1
  801a24:	defffe04 	addi	sp,sp,-8
  801a28:	2086703a 	and	r3,r4,r2
  801a2c:	dc000015 	stw	r16,0(sp)
  801a30:	dfc00115 	stw	ra,4(sp)
  801a34:	200d883a 	mov	r6,r4
  801a38:	200f883a 	mov	r7,r4
  801a3c:	2821883a 	mov	r16,r5
  801a40:	18001a26 	beq	r3,zero,801aac <scalbnf+0x90>
  801a44:	009fe034 	movhi	r2,32640
  801a48:	10bfffc4 	addi	r2,r2,-1
  801a4c:	10c01c36 	bltu	r2,r3,801ac0 <scalbnf+0xa4>
  801a50:	00802034 	movhi	r2,128
  801a54:	10bfffc4 	addi	r2,r2,-1
  801a58:	10c02136 	bltu	r2,r3,801ae0 <scalbnf+0xc4>
  801a5c:	01530034 	movhi	r5,19456
  801a60:	0801e380 	call	801e38 <__mulsf3>
  801a64:	1009883a 	mov	r4,r2
  801a68:	100d883a 	mov	r6,r2
  801a6c:	00bffff4 	movhi	r2,65535
  801a70:	108f2c04 	addi	r2,r2,15536
  801a74:	80802616 	blt	r16,r2,801b10 <scalbnf+0xf4>
  801a78:	209fe02c 	andhi	r2,r4,32640
  801a7c:	1005d5fa 	srai	r2,r2,23
  801a80:	200f883a 	mov	r7,r4
  801a84:	10bff9c4 	addi	r2,r2,-25
  801a88:	1407883a 	add	r3,r2,r16
  801a8c:	00803f84 	movi	r2,254
  801a90:	10c01516 	blt	r2,r3,801ae8 <scalbnf+0xcc>
  801a94:	00c0230e 	bge	zero,r3,801b24 <scalbnf+0x108>
  801a98:	180695fa 	slli	r3,r3,23
  801a9c:	00a02034 	movhi	r2,32896
  801aa0:	10bfffc4 	addi	r2,r2,-1
  801aa4:	3884703a 	and	r2,r7,r2
  801aa8:	10ccb03a 	or	r6,r2,r3
  801aac:	3005883a 	mov	r2,r6
  801ab0:	dfc00117 	ldw	ra,4(sp)
  801ab4:	dc000017 	ldw	r16,0(sp)
  801ab8:	dec00204 	addi	sp,sp,8
  801abc:	f800283a 	ret
  801ac0:	200b883a 	mov	r5,r4
  801ac4:	0801dd40 	call	801dd4 <__addsf3>
  801ac8:	100d883a 	mov	r6,r2
  801acc:	3005883a 	mov	r2,r6
  801ad0:	dfc00117 	ldw	ra,4(sp)
  801ad4:	dc000017 	ldw	r16,0(sp)
  801ad8:	dec00204 	addi	sp,sp,8
  801adc:	f800283a 	ret
  801ae0:	1804d5fa 	srli	r2,r3,23
  801ae4:	003fe806 	br	801a88 <scalbnf+0x6c>
  801ae8:	041c52b4 	movhi	r16,29002
  801aec:	843cb284 	addi	r16,r16,-3382
  801af0:	300b883a 	mov	r5,r6
  801af4:	8009883a 	mov	r4,r16
  801af8:	0801b680 	call	801b68 <copysignf>
  801afc:	1009883a 	mov	r4,r2
  801b00:	800b883a 	mov	r5,r16
  801b04:	0801e380 	call	801e38 <__mulsf3>
  801b08:	100d883a 	mov	r6,r2
  801b0c:	003fe706 	br	801aac <scalbnf+0x90>
  801b10:	014368b4 	movhi	r5,3490
  801b14:	29509804 	addi	r5,r5,16992
  801b18:	0801e380 	call	801e38 <__mulsf3>
  801b1c:	100d883a 	mov	r6,r2
  801b20:	003fe206 	br	801aac <scalbnf+0x90>
  801b24:	00bffa84 	movi	r2,-22
  801b28:	1880050e 	bge	r3,r2,801b40 <scalbnf+0x124>
  801b2c:	00b0d414 	movui	r2,50000
  801b30:	143fed16 	blt	r2,r16,801ae8 <scalbnf+0xcc>
  801b34:	040368b4 	movhi	r16,3490
  801b38:	84109804 	addi	r16,r16,16992
  801b3c:	003fec06 	br	801af0 <scalbnf+0xd4>
  801b40:	18800644 	addi	r2,r3,25
  801b44:	100495fa 	slli	r2,r2,23
  801b48:	01202034 	movhi	r4,32896
  801b4c:	213fffc4 	addi	r4,r4,-1
  801b50:	3908703a 	and	r4,r7,r4
  801b54:	2088b03a 	or	r4,r4,r2
  801b58:	014cc034 	movhi	r5,13056
  801b5c:	0801e380 	call	801e38 <__mulsf3>
  801b60:	100d883a 	mov	r6,r2
  801b64:	003fd106 	br	801aac <scalbnf+0x90>

00801b68 <copysignf>:
  801b68:	00a00034 	movhi	r2,32768
  801b6c:	10bfffc4 	addi	r2,r2,-1
  801b70:	2088703a 	and	r4,r4,r2
  801b74:	28a0002c 	andhi	r2,r5,32768
  801b78:	2084b03a 	or	r2,r4,r2
  801b7c:	f800283a 	ret

00801b80 <_fpadd_parts>:
  801b80:	21c00017 	ldw	r7,0(r4)
  801b84:	02000044 	movi	r8,1
  801b88:	41c0332e 	bgeu	r8,r7,801c58 <_fpadd_parts+0xd8>
  801b8c:	28800017 	ldw	r2,0(r5)
  801b90:	4080462e 	bgeu	r8,r2,801cac <_fpadd_parts+0x12c>
  801b94:	00c00104 	movi	r3,4
  801b98:	38c06b26 	beq	r7,r3,801d48 <_fpadd_parts+0x1c8>
  801b9c:	10c04326 	beq	r2,r3,801cac <_fpadd_parts+0x12c>
  801ba0:	00c00084 	movi	r3,2
  801ba4:	10c02e26 	beq	r2,r3,801c60 <_fpadd_parts+0xe0>
  801ba8:	38c04026 	beq	r7,r3,801cac <_fpadd_parts+0x12c>
  801bac:	22800217 	ldw	r10,8(r4)
  801bb0:	28c00217 	ldw	r3,8(r5)
  801bb4:	23000317 	ldw	r12,12(r4)
  801bb8:	2a400317 	ldw	r9,12(r5)
  801bbc:	50cfc83a 	sub	r7,r10,r3
  801bc0:	3817883a 	mov	r11,r7
  801bc4:	38004f16 	blt	r7,zero,801d04 <_fpadd_parts+0x184>
  801bc8:	008007c4 	movi	r2,31
  801bcc:	11c03316 	blt	r2,r7,801c9c <_fpadd_parts+0x11c>
  801bd0:	02c0540e 	bge	zero,r11,801d24 <_fpadd_parts+0x1a4>
  801bd4:	41c4983a 	sll	r2,r8,r7
  801bd8:	49c6d83a 	srl	r3,r9,r7
  801bdc:	10bfffc4 	addi	r2,r2,-1
  801be0:	4884703a 	and	r2,r9,r2
  801be4:	1004c03a 	cmpne	r2,r2,zero
  801be8:	1892b03a 	or	r9,r3,r2
  801bec:	20c00117 	ldw	r3,4(r4)
  801bf0:	28800117 	ldw	r2,4(r5)
  801bf4:	18803c26 	beq	r3,r2,801ce8 <_fpadd_parts+0x168>
  801bf8:	18002f26 	beq	r3,zero,801cb8 <_fpadd_parts+0x138>
  801bfc:	4b05c83a 	sub	r2,r9,r12
  801c00:	10004216 	blt	r2,zero,801d0c <_fpadd_parts+0x18c>
  801c04:	32800215 	stw	r10,8(r6)
  801c08:	30800315 	stw	r2,12(r6)
  801c0c:	30000115 	stw	zero,4(r6)
  801c10:	31000317 	ldw	r4,12(r6)
  801c14:	01d00034 	movhi	r7,16384
  801c18:	39ffff84 	addi	r7,r7,-2
  801c1c:	20bfffc4 	addi	r2,r4,-1
  801c20:	2007883a 	mov	r3,r4
  801c24:	38800836 	bltu	r7,r2,801c48 <_fpadd_parts+0xc8>
  801c28:	31400217 	ldw	r5,8(r6)
  801c2c:	18c9883a 	add	r4,r3,r3
  801c30:	20bfffc4 	addi	r2,r4,-1
  801c34:	297fffc4 	addi	r5,r5,-1
  801c38:	2007883a 	mov	r3,r4
  801c3c:	38bffb2e 	bgeu	r7,r2,801c2c <_fpadd_parts+0xac>
  801c40:	31400215 	stw	r5,8(r6)
  801c44:	31000315 	stw	r4,12(r6)
  801c48:	008000c4 	movi	r2,3
  801c4c:	30800015 	stw	r2,0(r6)
  801c50:	20001b16 	blt	r4,zero,801cc0 <_fpadd_parts+0x140>
  801c54:	3009883a 	mov	r4,r6
  801c58:	2005883a 	mov	r2,r4
  801c5c:	f800283a 	ret
  801c60:	38fffd1e 	bne	r7,r3,801c58 <_fpadd_parts+0xd8>
  801c64:	31c00015 	stw	r7,0(r6)
  801c68:	20800117 	ldw	r2,4(r4)
  801c6c:	30800115 	stw	r2,4(r6)
  801c70:	20c00217 	ldw	r3,8(r4)
  801c74:	30c00215 	stw	r3,8(r6)
  801c78:	20800317 	ldw	r2,12(r4)
  801c7c:	30800315 	stw	r2,12(r6)
  801c80:	20c00117 	ldw	r3,4(r4)
  801c84:	28800117 	ldw	r2,4(r5)
  801c88:	3009883a 	mov	r4,r6
  801c8c:	1886703a 	and	r3,r3,r2
  801c90:	2005883a 	mov	r2,r4
  801c94:	30c00115 	stw	r3,4(r6)
  801c98:	f800283a 	ret
  801c9c:	1a801716 	blt	r3,r10,801cfc <_fpadd_parts+0x17c>
  801ca0:	1815883a 	mov	r10,r3
  801ca4:	0019883a 	mov	r12,zero
  801ca8:	003fd006 	br	801bec <_fpadd_parts+0x6c>
  801cac:	2809883a 	mov	r4,r5
  801cb0:	2005883a 	mov	r2,r4
  801cb4:	f800283a 	ret
  801cb8:	6245c83a 	sub	r2,r12,r9
  801cbc:	003fd006 	br	801c00 <_fpadd_parts+0x80>
  801cc0:	30800217 	ldw	r2,8(r6)
  801cc4:	2006d07a 	srli	r3,r4,1
  801cc8:	2100004c 	andi	r4,r4,1
  801ccc:	10800044 	addi	r2,r2,1
  801cd0:	1906b03a 	or	r3,r3,r4
  801cd4:	3009883a 	mov	r4,r6
  801cd8:	30800215 	stw	r2,8(r6)
  801cdc:	2005883a 	mov	r2,r4
  801ce0:	30c00315 	stw	r3,12(r6)
  801ce4:	f800283a 	ret
  801ce8:	4b09883a 	add	r4,r9,r12
  801cec:	30c00115 	stw	r3,4(r6)
  801cf0:	32800215 	stw	r10,8(r6)
  801cf4:	31000315 	stw	r4,12(r6)
  801cf8:	003fd306 	br	801c48 <_fpadd_parts+0xc8>
  801cfc:	0013883a 	mov	r9,zero
  801d00:	003fba06 	br	801bec <_fpadd_parts+0x6c>
  801d04:	01cfc83a 	sub	r7,zero,r7
  801d08:	003faf06 	br	801bc8 <_fpadd_parts+0x48>
  801d0c:	0089c83a 	sub	r4,zero,r2
  801d10:	00800044 	movi	r2,1
  801d14:	30800115 	stw	r2,4(r6)
  801d18:	32800215 	stw	r10,8(r6)
  801d1c:	31000315 	stw	r4,12(r6)
  801d20:	003fbb06 	br	801c10 <_fpadd_parts+0x90>
  801d24:	583fb126 	beq	r11,zero,801bec <_fpadd_parts+0x6c>
  801d28:	41c4983a 	sll	r2,r8,r7
  801d2c:	61c6d83a 	srl	r3,r12,r7
  801d30:	51d5883a 	add	r10,r10,r7
  801d34:	10bfffc4 	addi	r2,r2,-1
  801d38:	6084703a 	and	r2,r12,r2
  801d3c:	1004c03a 	cmpne	r2,r2,zero
  801d40:	1898b03a 	or	r12,r3,r2
  801d44:	003fa906 	br	801bec <_fpadd_parts+0x6c>
  801d48:	11ffc31e 	bne	r2,r7,801c58 <_fpadd_parts+0xd8>
  801d4c:	28c00117 	ldw	r3,4(r5)
  801d50:	20800117 	ldw	r2,4(r4)
  801d54:	10ffc026 	beq	r2,r3,801c58 <_fpadd_parts+0xd8>
  801d58:	01002074 	movhi	r4,129
  801d5c:	21064304 	addi	r4,r4,6412
  801d60:	003fbd06 	br	801c58 <_fpadd_parts+0xd8>

00801d64 <__subsf3>:
  801d64:	deffef04 	addi	sp,sp,-68
  801d68:	dcc00f15 	stw	r19,60(sp)
  801d6c:	dcc00204 	addi	r19,sp,8
  801d70:	dc400e15 	stw	r17,56(sp)
  801d74:	d9000015 	stw	r4,0(sp)
  801d78:	d9400115 	stw	r5,4(sp)
  801d7c:	d809883a 	mov	r4,sp
  801d80:	980b883a 	mov	r5,r19
  801d84:	dc400604 	addi	r17,sp,24
  801d88:	dfc01015 	stw	ra,64(sp)
  801d8c:	0802f600 	call	802f60 <__unpack_f>
  801d90:	d9000104 	addi	r4,sp,4
  801d94:	880b883a 	mov	r5,r17
  801d98:	0802f600 	call	802f60 <__unpack_f>
  801d9c:	d8800717 	ldw	r2,28(sp)
  801da0:	9809883a 	mov	r4,r19
  801da4:	880b883a 	mov	r5,r17
  801da8:	d9800a04 	addi	r6,sp,40
  801dac:	1080005c 	xori	r2,r2,1
  801db0:	d8800715 	stw	r2,28(sp)
  801db4:	0801b800 	call	801b80 <_fpadd_parts>
  801db8:	1009883a 	mov	r4,r2
  801dbc:	0802e000 	call	802e00 <__pack_f>
  801dc0:	dfc01017 	ldw	ra,64(sp)
  801dc4:	dcc00f17 	ldw	r19,60(sp)
  801dc8:	dc400e17 	ldw	r17,56(sp)
  801dcc:	dec01104 	addi	sp,sp,68
  801dd0:	f800283a 	ret

00801dd4 <__addsf3>:
  801dd4:	deffef04 	addi	sp,sp,-68
  801dd8:	dcc00f15 	stw	r19,60(sp)
  801ddc:	dcc00204 	addi	r19,sp,8
  801de0:	dc400e15 	stw	r17,56(sp)
  801de4:	d9000015 	stw	r4,0(sp)
  801de8:	d9400115 	stw	r5,4(sp)
  801dec:	d809883a 	mov	r4,sp
  801df0:	980b883a 	mov	r5,r19
  801df4:	dc400604 	addi	r17,sp,24
  801df8:	dfc01015 	stw	ra,64(sp)
  801dfc:	0802f600 	call	802f60 <__unpack_f>
  801e00:	d9000104 	addi	r4,sp,4
  801e04:	880b883a 	mov	r5,r17
  801e08:	0802f600 	call	802f60 <__unpack_f>
  801e0c:	d9800a04 	addi	r6,sp,40
  801e10:	9809883a 	mov	r4,r19
  801e14:	880b883a 	mov	r5,r17
  801e18:	0801b800 	call	801b80 <_fpadd_parts>
  801e1c:	1009883a 	mov	r4,r2
  801e20:	0802e000 	call	802e00 <__pack_f>
  801e24:	dfc01017 	ldw	ra,64(sp)
  801e28:	dcc00f17 	ldw	r19,60(sp)
  801e2c:	dc400e17 	ldw	r17,56(sp)
  801e30:	dec01104 	addi	sp,sp,68
  801e34:	f800283a 	ret

00801e38 <__mulsf3>:
  801e38:	deffef04 	addi	sp,sp,-68
  801e3c:	dc400f15 	stw	r17,60(sp)
  801e40:	dc400204 	addi	r17,sp,8
  801e44:	dc000e15 	stw	r16,56(sp)
  801e48:	d9000015 	stw	r4,0(sp)
  801e4c:	d9400115 	stw	r5,4(sp)
  801e50:	d809883a 	mov	r4,sp
  801e54:	880b883a 	mov	r5,r17
  801e58:	dc000604 	addi	r16,sp,24
  801e5c:	dfc01015 	stw	ra,64(sp)
  801e60:	0802f600 	call	802f60 <__unpack_f>
  801e64:	d9000104 	addi	r4,sp,4
  801e68:	800b883a 	mov	r5,r16
  801e6c:	0802f600 	call	802f60 <__unpack_f>
  801e70:	d9000217 	ldw	r4,8(sp)
  801e74:	00800044 	movi	r2,1
  801e78:	01400104 	movi	r5,4
  801e7c:	1100142e 	bgeu	r2,r4,801ed0 <__mulsf3+0x98>
  801e80:	d8c00617 	ldw	r3,24(sp)
  801e84:	10c0052e 	bgeu	r2,r3,801e9c <__mulsf3+0x64>
  801e88:	21400f26 	beq	r4,r5,801ec8 <__mulsf3+0x90>
  801e8c:	19405d26 	beq	r3,r5,802004 <__mulsf3+0x1cc>
  801e90:	00800084 	movi	r2,2
  801e94:	20800e26 	beq	r4,r2,801ed0 <__mulsf3+0x98>
  801e98:	1880181e 	bne	r3,r2,801efc <__mulsf3+0xc4>
  801e9c:	d8c00717 	ldw	r3,28(sp)
  801ea0:	d8800317 	ldw	r2,12(sp)
  801ea4:	8009883a 	mov	r4,r16
  801ea8:	10c4c03a 	cmpne	r2,r2,r3
  801eac:	d8800715 	stw	r2,28(sp)
  801eb0:	0802e000 	call	802e00 <__pack_f>
  801eb4:	dfc01017 	ldw	ra,64(sp)
  801eb8:	dc400f17 	ldw	r17,60(sp)
  801ebc:	dc000e17 	ldw	r16,56(sp)
  801ec0:	dec01104 	addi	sp,sp,68
  801ec4:	f800283a 	ret
  801ec8:	00800084 	movi	r2,2
  801ecc:	18804f26 	beq	r3,r2,80200c <__mulsf3+0x1d4>
  801ed0:	d8800317 	ldw	r2,12(sp)
  801ed4:	d8c00717 	ldw	r3,28(sp)
  801ed8:	8809883a 	mov	r4,r17
  801edc:	10c4c03a 	cmpne	r2,r2,r3
  801ee0:	d8800315 	stw	r2,12(sp)
  801ee4:	0802e000 	call	802e00 <__pack_f>
  801ee8:	dfc01017 	ldw	ra,64(sp)
  801eec:	dc400f17 	ldw	r17,60(sp)
  801ef0:	dc000e17 	ldw	r16,56(sp)
  801ef4:	dec01104 	addi	sp,sp,68
  801ef8:	f800283a 	ret
  801efc:	d8800517 	ldw	r2,20(sp)
  801f00:	da000917 	ldw	r8,36(sp)
  801f04:	0013883a 	mov	r9,zero
  801f08:	0007883a 	mov	r3,zero
  801f0c:	480f883a 	mov	r7,r9
  801f10:	180b883a 	mov	r5,r3
  801f14:	400d883a 	mov	r6,r8
  801f18:	1009883a 	mov	r4,r2
  801f1c:	0802ce80 	call	802ce8 <__muldi3>
  801f20:	da800417 	ldw	r10,16(sp)
  801f24:	d9800817 	ldw	r6,32(sp)
  801f28:	da400317 	ldw	r9,12(sp)
  801f2c:	52800084 	addi	r10,r10,2
  801f30:	3295883a 	add	r10,r6,r10
  801f34:	d9800717 	ldw	r6,28(sp)
  801f38:	180b883a 	mov	r5,r3
  801f3c:	180f883a 	mov	r7,r3
  801f40:	4992c03a 	cmpne	r9,r9,r6
  801f44:	da400b15 	stw	r9,44(sp)
  801f48:	1007883a 	mov	r3,r2
  801f4c:	da800c15 	stw	r10,48(sp)
  801f50:	2800070e 	bge	r5,zero,801f70 <__mulsf3+0x138>
  801f54:	2880004c 	andi	r2,r5,1
  801f58:	1005003a 	cmpeq	r2,r2,zero
  801f5c:	500d883a 	mov	r6,r10
  801f60:	10001e26 	beq	r2,zero,801fdc <__mulsf3+0x1a4>
  801f64:	380ed07a 	srli	r7,r7,1
  801f68:	31800044 	addi	r6,r6,1
  801f6c:	d9800c15 	stw	r6,48(sp)
  801f70:	01100034 	movhi	r4,16384
  801f74:	213fffc4 	addi	r4,r4,-1
  801f78:	21c00b36 	bltu	r4,r7,801fa8 <__mulsf3+0x170>
  801f7c:	d8800c17 	ldw	r2,48(sp)
  801f80:	00000206 	br	801f8c <__mulsf3+0x154>
  801f84:	18c7883a 	add	r3,r3,r3
  801f88:	21c00636 	bltu	r4,r7,801fa4 <__mulsf3+0x16c>
  801f8c:	10bfffc4 	addi	r2,r2,-1
  801f90:	39cf883a 	add	r7,r7,r7
  801f94:	183ffb0e 	bge	r3,zero,801f84 <__mulsf3+0x14c>
  801f98:	39c00054 	ori	r7,r7,1
  801f9c:	18c7883a 	add	r3,r3,r3
  801fa0:	21fffa2e 	bgeu	r4,r7,801f8c <__mulsf3+0x154>
  801fa4:	d8800c15 	stw	r2,48(sp)
  801fa8:	39001fcc 	andi	r4,r7,127
  801fac:	00801004 	movi	r2,64
  801fb0:	20800d26 	beq	r4,r2,801fe8 <__mulsf3+0x1b0>
  801fb4:	008000c4 	movi	r2,3
  801fb8:	d9000a04 	addi	r4,sp,40
  801fbc:	d9c00d15 	stw	r7,52(sp)
  801fc0:	d8800a15 	stw	r2,40(sp)
  801fc4:	0802e000 	call	802e00 <__pack_f>
  801fc8:	dfc01017 	ldw	ra,64(sp)
  801fcc:	dc400f17 	ldw	r17,60(sp)
  801fd0:	dc000e17 	ldw	r16,56(sp)
  801fd4:	dec01104 	addi	sp,sp,68
  801fd8:	f800283a 	ret
  801fdc:	1804d07a 	srli	r2,r3,1
  801fe0:	10e00034 	orhi	r3,r2,32768
  801fe4:	003fdf06 	br	801f64 <__mulsf3+0x12c>
  801fe8:	3880200c 	andi	r2,r7,128
  801fec:	103ff11e 	bne	r2,zero,801fb4 <__mulsf3+0x17c>
  801ff0:	183ff026 	beq	r3,zero,801fb4 <__mulsf3+0x17c>
  801ff4:	3907883a 	add	r3,r7,r4
  801ff8:	00bfe004 	movi	r2,-128
  801ffc:	188e703a 	and	r7,r3,r2
  802000:	003fec06 	br	801fb4 <__mulsf3+0x17c>
  802004:	00800084 	movi	r2,2
  802008:	20bfa41e 	bne	r4,r2,801e9c <__mulsf3+0x64>
  80200c:	01002074 	movhi	r4,129
  802010:	21064304 	addi	r4,r4,6412
  802014:	003fb306 	br	801ee4 <__mulsf3+0xac>

00802018 <__divsf3>:
  802018:	defff304 	addi	sp,sp,-52
  80201c:	dc400b15 	stw	r17,44(sp)
  802020:	dc400204 	addi	r17,sp,8
  802024:	dc000a15 	stw	r16,40(sp)
  802028:	d9000015 	stw	r4,0(sp)
  80202c:	d9400115 	stw	r5,4(sp)
  802030:	d809883a 	mov	r4,sp
  802034:	880b883a 	mov	r5,r17
  802038:	dc000604 	addi	r16,sp,24
  80203c:	dfc00c15 	stw	ra,48(sp)
  802040:	0802f600 	call	802f60 <__unpack_f>
  802044:	d9000104 	addi	r4,sp,4
  802048:	800b883a 	mov	r5,r16
  80204c:	0802f600 	call	802f60 <__unpack_f>
  802050:	d9000217 	ldw	r4,8(sp)
  802054:	00800044 	movi	r2,1
  802058:	01800104 	movi	r6,4
  80205c:	11000a2e 	bgeu	r2,r4,802088 <__divsf3+0x70>
  802060:	d9400617 	ldw	r5,24(sp)
  802064:	1140432e 	bgeu	r2,r5,802174 <__divsf3+0x15c>
  802068:	d8800317 	ldw	r2,12(sp)
  80206c:	d8c00717 	ldw	r3,28(sp)
  802070:	10c4f03a 	xor	r2,r2,r3
  802074:	d8800315 	stw	r2,12(sp)
  802078:	21800226 	beq	r4,r6,802084 <__divsf3+0x6c>
  80207c:	00800084 	movi	r2,2
  802080:	2080101e 	bne	r4,r2,8020c4 <__divsf3+0xac>
  802084:	29000726 	beq	r5,r4,8020a4 <__divsf3+0x8c>
  802088:	8809883a 	mov	r4,r17
  80208c:	0802e000 	call	802e00 <__pack_f>
  802090:	dfc00c17 	ldw	ra,48(sp)
  802094:	dc400b17 	ldw	r17,44(sp)
  802098:	dc000a17 	ldw	r16,40(sp)
  80209c:	dec00d04 	addi	sp,sp,52
  8020a0:	f800283a 	ret
  8020a4:	01002074 	movhi	r4,129
  8020a8:	21064304 	addi	r4,r4,6412
  8020ac:	0802e000 	call	802e00 <__pack_f>
  8020b0:	dfc00c17 	ldw	ra,48(sp)
  8020b4:	dc400b17 	ldw	r17,44(sp)
  8020b8:	dc000a17 	ldw	r16,40(sp)
  8020bc:	dec00d04 	addi	sp,sp,52
  8020c0:	f800283a 	ret
  8020c4:	29802d26 	beq	r5,r6,80217c <__divsf3+0x164>
  8020c8:	28801a26 	beq	r5,r2,802134 <__divsf3+0x11c>
  8020cc:	d8c00417 	ldw	r3,16(sp)
  8020d0:	d8800817 	ldw	r2,32(sp)
  8020d4:	d9000517 	ldw	r4,20(sp)
  8020d8:	d9800917 	ldw	r6,36(sp)
  8020dc:	1885c83a 	sub	r2,r3,r2
  8020e0:	d8800415 	stw	r2,16(sp)
  8020e4:	2180032e 	bgeu	r4,r6,8020f4 <__divsf3+0xdc>
  8020e8:	10bfffc4 	addi	r2,r2,-1
  8020ec:	d8800415 	stw	r2,16(sp)
  8020f0:	2109883a 	add	r4,r4,r4
  8020f4:	01500034 	movhi	r5,16384
  8020f8:	0007883a 	mov	r3,zero
  8020fc:	0005883a 	mov	r2,zero
  802100:	01c007c4 	movi	r7,31
  802104:	10800044 	addi	r2,r2,1
  802108:	21800236 	bltu	r4,r6,802114 <__divsf3+0xfc>
  80210c:	1946b03a 	or	r3,r3,r5
  802110:	2189c83a 	sub	r4,r4,r6
  802114:	280ad07a 	srli	r5,r5,1
  802118:	2109883a 	add	r4,r4,r4
  80211c:	11fff91e 	bne	r2,r7,802104 <__divsf3+0xec>
  802120:	19401fcc 	andi	r5,r3,127
  802124:	00801004 	movi	r2,64
  802128:	28800a26 	beq	r5,r2,802154 <__divsf3+0x13c>
  80212c:	d8c00515 	stw	r3,20(sp)
  802130:	003fd506 	br	802088 <__divsf3+0x70>
  802134:	8809883a 	mov	r4,r17
  802138:	d9800215 	stw	r6,8(sp)
  80213c:	0802e000 	call	802e00 <__pack_f>
  802140:	dfc00c17 	ldw	ra,48(sp)
  802144:	dc400b17 	ldw	r17,44(sp)
  802148:	dc000a17 	ldw	r16,40(sp)
  80214c:	dec00d04 	addi	sp,sp,52
  802150:	f800283a 	ret
  802154:	1880200c 	andi	r2,r3,128
  802158:	103ff41e 	bne	r2,zero,80212c <__divsf3+0x114>
  80215c:	203ff326 	beq	r4,zero,80212c <__divsf3+0x114>
  802160:	1947883a 	add	r3,r3,r5
  802164:	00bfe004 	movi	r2,-128
  802168:	1886703a 	and	r3,r3,r2
  80216c:	d8c00515 	stw	r3,20(sp)
  802170:	003fc506 	br	802088 <__divsf3+0x70>
  802174:	8009883a 	mov	r4,r16
  802178:	003fc406 	br	80208c <__divsf3+0x74>
  80217c:	8809883a 	mov	r4,r17
  802180:	d8000515 	stw	zero,20(sp)
  802184:	d8000415 	stw	zero,16(sp)
  802188:	003fc006 	br	80208c <__divsf3+0x74>

0080218c <__eqsf2>:
  80218c:	defff304 	addi	sp,sp,-52
  802190:	dc400b15 	stw	r17,44(sp)
  802194:	dc400204 	addi	r17,sp,8
  802198:	dc000a15 	stw	r16,40(sp)
  80219c:	d9000015 	stw	r4,0(sp)
  8021a0:	d9400115 	stw	r5,4(sp)
  8021a4:	d809883a 	mov	r4,sp
  8021a8:	880b883a 	mov	r5,r17
  8021ac:	dc000604 	addi	r16,sp,24
  8021b0:	dfc00c15 	stw	ra,48(sp)
  8021b4:	0802f600 	call	802f60 <__unpack_f>
  8021b8:	d9000104 	addi	r4,sp,4
  8021bc:	800b883a 	mov	r5,r16
  8021c0:	0802f600 	call	802f60 <__unpack_f>
  8021c4:	d8800217 	ldw	r2,8(sp)
  8021c8:	00c00044 	movi	r3,1
  8021cc:	180d883a 	mov	r6,r3
  8021d0:	1880062e 	bgeu	r3,r2,8021ec <__eqsf2+0x60>
  8021d4:	d8800617 	ldw	r2,24(sp)
  8021d8:	8809883a 	mov	r4,r17
  8021dc:	800b883a 	mov	r5,r16
  8021e0:	1880022e 	bgeu	r3,r2,8021ec <__eqsf2+0x60>
  8021e4:	08030280 	call	803028 <__fpcmp_parts_f>
  8021e8:	100d883a 	mov	r6,r2
  8021ec:	3005883a 	mov	r2,r6
  8021f0:	dfc00c17 	ldw	ra,48(sp)
  8021f4:	dc400b17 	ldw	r17,44(sp)
  8021f8:	dc000a17 	ldw	r16,40(sp)
  8021fc:	dec00d04 	addi	sp,sp,52
  802200:	f800283a 	ret

00802204 <__gtsf2>:
  802204:	defff304 	addi	sp,sp,-52
  802208:	dc400b15 	stw	r17,44(sp)
  80220c:	dc400204 	addi	r17,sp,8
  802210:	dc000a15 	stw	r16,40(sp)
  802214:	d9000015 	stw	r4,0(sp)
  802218:	d9400115 	stw	r5,4(sp)
  80221c:	d809883a 	mov	r4,sp
  802220:	880b883a 	mov	r5,r17
  802224:	dc000604 	addi	r16,sp,24
  802228:	dfc00c15 	stw	ra,48(sp)
  80222c:	0802f600 	call	802f60 <__unpack_f>
  802230:	d9000104 	addi	r4,sp,4
  802234:	800b883a 	mov	r5,r16
  802238:	0802f600 	call	802f60 <__unpack_f>
  80223c:	d8800217 	ldw	r2,8(sp)
  802240:	00c00044 	movi	r3,1
  802244:	01bfffc4 	movi	r6,-1
  802248:	1880062e 	bgeu	r3,r2,802264 <__gtsf2+0x60>
  80224c:	d8800617 	ldw	r2,24(sp)
  802250:	8809883a 	mov	r4,r17
  802254:	800b883a 	mov	r5,r16
  802258:	1880022e 	bgeu	r3,r2,802264 <__gtsf2+0x60>
  80225c:	08030280 	call	803028 <__fpcmp_parts_f>
  802260:	100d883a 	mov	r6,r2
  802264:	3005883a 	mov	r2,r6
  802268:	dfc00c17 	ldw	ra,48(sp)
  80226c:	dc400b17 	ldw	r17,44(sp)
  802270:	dc000a17 	ldw	r16,40(sp)
  802274:	dec00d04 	addi	sp,sp,52
  802278:	f800283a 	ret

0080227c <__ltsf2>:
  80227c:	defff304 	addi	sp,sp,-52
  802280:	dc400b15 	stw	r17,44(sp)
  802284:	dc400204 	addi	r17,sp,8
  802288:	dc000a15 	stw	r16,40(sp)
  80228c:	d9000015 	stw	r4,0(sp)
  802290:	d9400115 	stw	r5,4(sp)
  802294:	d809883a 	mov	r4,sp
  802298:	880b883a 	mov	r5,r17
  80229c:	dc000604 	addi	r16,sp,24
  8022a0:	dfc00c15 	stw	ra,48(sp)
  8022a4:	0802f600 	call	802f60 <__unpack_f>
  8022a8:	d9000104 	addi	r4,sp,4
  8022ac:	800b883a 	mov	r5,r16
  8022b0:	0802f600 	call	802f60 <__unpack_f>
  8022b4:	d8800217 	ldw	r2,8(sp)
  8022b8:	00c00044 	movi	r3,1
  8022bc:	180d883a 	mov	r6,r3
  8022c0:	1880062e 	bgeu	r3,r2,8022dc <__ltsf2+0x60>
  8022c4:	d8800617 	ldw	r2,24(sp)
  8022c8:	8809883a 	mov	r4,r17
  8022cc:	800b883a 	mov	r5,r16
  8022d0:	1880022e 	bgeu	r3,r2,8022dc <__ltsf2+0x60>
  8022d4:	08030280 	call	803028 <__fpcmp_parts_f>
  8022d8:	100d883a 	mov	r6,r2
  8022dc:	3005883a 	mov	r2,r6
  8022e0:	dfc00c17 	ldw	ra,48(sp)
  8022e4:	dc400b17 	ldw	r17,44(sp)
  8022e8:	dc000a17 	ldw	r16,40(sp)
  8022ec:	dec00d04 	addi	sp,sp,52
  8022f0:	f800283a 	ret

008022f4 <__lesf2>:
  8022f4:	defff304 	addi	sp,sp,-52
  8022f8:	dc400b15 	stw	r17,44(sp)
  8022fc:	dc400204 	addi	r17,sp,8
  802300:	dc000a15 	stw	r16,40(sp)
  802304:	d9000015 	stw	r4,0(sp)
  802308:	d9400115 	stw	r5,4(sp)
  80230c:	d809883a 	mov	r4,sp
  802310:	880b883a 	mov	r5,r17
  802314:	dc000604 	addi	r16,sp,24
  802318:	dfc00c15 	stw	ra,48(sp)
  80231c:	0802f600 	call	802f60 <__unpack_f>
  802320:	d9000104 	addi	r4,sp,4
  802324:	800b883a 	mov	r5,r16
  802328:	0802f600 	call	802f60 <__unpack_f>
  80232c:	d8800217 	ldw	r2,8(sp)
  802330:	00c00044 	movi	r3,1
  802334:	180d883a 	mov	r6,r3
  802338:	1880062e 	bgeu	r3,r2,802354 <__lesf2+0x60>
  80233c:	d8800617 	ldw	r2,24(sp)
  802340:	8809883a 	mov	r4,r17
  802344:	800b883a 	mov	r5,r16
  802348:	1880022e 	bgeu	r3,r2,802354 <__lesf2+0x60>
  80234c:	08030280 	call	803028 <__fpcmp_parts_f>
  802350:	100d883a 	mov	r6,r2
  802354:	3005883a 	mov	r2,r6
  802358:	dfc00c17 	ldw	ra,48(sp)
  80235c:	dc400b17 	ldw	r17,44(sp)
  802360:	dc000a17 	ldw	r16,40(sp)
  802364:	dec00d04 	addi	sp,sp,52
  802368:	f800283a 	ret

0080236c <__floatsisf>:
  80236c:	2006d7fa 	srli	r3,r4,31
  802370:	defffa04 	addi	sp,sp,-24
  802374:	008000c4 	movi	r2,3
  802378:	dfc00515 	stw	ra,20(sp)
  80237c:	dc000415 	stw	r16,16(sp)
  802380:	d8800015 	stw	r2,0(sp)
  802384:	d8c00115 	stw	r3,4(sp)
  802388:	2000081e 	bne	r4,zero,8023ac <__floatsisf+0x40>
  80238c:	00800084 	movi	r2,2
  802390:	d8800015 	stw	r2,0(sp)
  802394:	d809883a 	mov	r4,sp
  802398:	0802e000 	call	802e00 <__pack_f>
  80239c:	dfc00517 	ldw	ra,20(sp)
  8023a0:	dc000417 	ldw	r16,16(sp)
  8023a4:	dec00604 	addi	sp,sp,24
  8023a8:	f800283a 	ret
  8023ac:	00800784 	movi	r2,30
  8023b0:	1807003a 	cmpeq	r3,r3,zero
  8023b4:	d8800215 	stw	r2,8(sp)
  8023b8:	18000e1e 	bne	r3,zero,8023f4 <__floatsisf+0x88>
  8023bc:	00a00034 	movhi	r2,32768
  8023c0:	20800e26 	beq	r4,r2,8023fc <__floatsisf+0x90>
  8023c4:	0121c83a 	sub	r16,zero,r4
  8023c8:	8009883a 	mov	r4,r16
  8023cc:	dc000315 	stw	r16,12(sp)
  8023d0:	0802d800 	call	802d80 <__clzsi2>
  8023d4:	117fffc4 	addi	r5,r2,-1
  8023d8:	017fee0e 	bge	zero,r5,802394 <__floatsisf+0x28>
  8023dc:	d8800217 	ldw	r2,8(sp)
  8023e0:	8146983a 	sll	r3,r16,r5
  8023e4:	1145c83a 	sub	r2,r2,r5
  8023e8:	d8c00315 	stw	r3,12(sp)
  8023ec:	d8800215 	stw	r2,8(sp)
  8023f0:	003fe806 	br	802394 <__floatsisf+0x28>
  8023f4:	2021883a 	mov	r16,r4
  8023f8:	003ff306 	br	8023c8 <__floatsisf+0x5c>
  8023fc:	00b3c034 	movhi	r2,52992
  802400:	003fe606 	br	80239c <__floatsisf+0x30>

00802404 <__extendsfdf2>:
  802404:	defff904 	addi	sp,sp,-28
  802408:	d9000115 	stw	r4,4(sp)
  80240c:	d9400204 	addi	r5,sp,8
  802410:	d9000104 	addi	r4,sp,4
  802414:	dfc00615 	stw	ra,24(sp)
  802418:	0802f600 	call	802f60 <__unpack_f>
  80241c:	d9c00517 	ldw	r7,20(sp)
  802420:	0011883a 	mov	r8,zero
  802424:	400697ba 	slli	r3,r8,30
  802428:	3812d0ba 	srli	r9,r7,2
  80242c:	380497ba 	slli	r2,r7,30
  802430:	d9000217 	ldw	r4,8(sp)
  802434:	d9400317 	ldw	r5,12(sp)
  802438:	d9800417 	ldw	r6,16(sp)
  80243c:	48c6b03a 	or	r3,r9,r3
  802440:	100f883a 	mov	r7,r2
  802444:	d8c00015 	stw	r3,0(sp)
  802448:	0802c3c0 	call	802c3c <__make_dp>
  80244c:	dfc00617 	ldw	ra,24(sp)
  802450:	dec00704 	addi	sp,sp,28
  802454:	f800283a 	ret

00802458 <_fpadd_parts>:
  802458:	defff804 	addi	sp,sp,-32
  80245c:	dcc00315 	stw	r19,12(sp)
  802460:	2027883a 	mov	r19,r4
  802464:	21000017 	ldw	r4,0(r4)
  802468:	00c00044 	movi	r3,1
  80246c:	dd400515 	stw	r21,20(sp)
  802470:	dd000415 	stw	r20,16(sp)
  802474:	ddc00715 	stw	r23,28(sp)
  802478:	dd800615 	stw	r22,24(sp)
  80247c:	dc800215 	stw	r18,8(sp)
  802480:	dc400115 	stw	r17,4(sp)
  802484:	dc000015 	stw	r16,0(sp)
  802488:	282b883a 	mov	r21,r5
  80248c:	3029883a 	mov	r20,r6
  802490:	1900632e 	bgeu	r3,r4,802620 <_fpadd_parts+0x1c8>
  802494:	28800017 	ldw	r2,0(r5)
  802498:	1880812e 	bgeu	r3,r2,8026a0 <_fpadd_parts+0x248>
  80249c:	00c00104 	movi	r3,4
  8024a0:	20c0dc26 	beq	r4,r3,802814 <_fpadd_parts+0x3bc>
  8024a4:	10c07e26 	beq	r2,r3,8026a0 <_fpadd_parts+0x248>
  8024a8:	00c00084 	movi	r3,2
  8024ac:	10c06726 	beq	r2,r3,80264c <_fpadd_parts+0x1f4>
  8024b0:	20c07b26 	beq	r4,r3,8026a0 <_fpadd_parts+0x248>
  8024b4:	9dc00217 	ldw	r23,8(r19)
  8024b8:	28c00217 	ldw	r3,8(r5)
  8024bc:	9c400317 	ldw	r17,12(r19)
  8024c0:	2bc00317 	ldw	r15,12(r5)
  8024c4:	b8cdc83a 	sub	r6,r23,r3
  8024c8:	9c800417 	ldw	r18,16(r19)
  8024cc:	2c000417 	ldw	r16,16(r5)
  8024d0:	3009883a 	mov	r4,r6
  8024d4:	30009716 	blt	r6,zero,802734 <_fpadd_parts+0x2dc>
  8024d8:	00800fc4 	movi	r2,63
  8024dc:	11806b16 	blt	r2,r6,80268c <_fpadd_parts+0x234>
  8024e0:	0100a40e 	bge	zero,r4,802774 <_fpadd_parts+0x31c>
  8024e4:	35bff804 	addi	r22,r6,-32
  8024e8:	b000bc16 	blt	r22,zero,8027dc <_fpadd_parts+0x384>
  8024ec:	8596d83a 	srl	r11,r16,r22
  8024f0:	0019883a 	mov	r12,zero
  8024f4:	0013883a 	mov	r9,zero
  8024f8:	01000044 	movi	r4,1
  8024fc:	0015883a 	mov	r10,zero
  802500:	b000be16 	blt	r22,zero,8027fc <_fpadd_parts+0x3a4>
  802504:	2590983a 	sll	r8,r4,r22
  802508:	000f883a 	mov	r7,zero
  80250c:	00bfffc4 	movi	r2,-1
  802510:	3889883a 	add	r4,r7,r2
  802514:	408b883a 	add	r5,r8,r2
  802518:	21cd803a 	cmpltu	r6,r4,r7
  80251c:	314b883a 	add	r5,r6,r5
  802520:	7904703a 	and	r2,r15,r4
  802524:	8146703a 	and	r3,r16,r5
  802528:	10c4b03a 	or	r2,r2,r3
  80252c:	10000226 	beq	r2,zero,802538 <_fpadd_parts+0xe0>
  802530:	02400044 	movi	r9,1
  802534:	0015883a 	mov	r10,zero
  802538:	5a5eb03a 	or	r15,r11,r9
  80253c:	62a0b03a 	or	r16,r12,r10
  802540:	99400117 	ldw	r5,4(r19)
  802544:	a8800117 	ldw	r2,4(r21)
  802548:	28806e26 	beq	r5,r2,802704 <_fpadd_parts+0x2ac>
  80254c:	28006626 	beq	r5,zero,8026e8 <_fpadd_parts+0x290>
  802550:	7c45c83a 	sub	r2,r15,r17
  802554:	7889803a 	cmpltu	r4,r15,r2
  802558:	8487c83a 	sub	r3,r16,r18
  80255c:	1909c83a 	sub	r4,r3,r4
  802560:	100d883a 	mov	r6,r2
  802564:	200f883a 	mov	r7,r4
  802568:	38007716 	blt	r7,zero,802748 <_fpadd_parts+0x2f0>
  80256c:	a5c00215 	stw	r23,8(r20)
  802570:	a1c00415 	stw	r7,16(r20)
  802574:	a0000115 	stw	zero,4(r20)
  802578:	a1800315 	stw	r6,12(r20)
  80257c:	a2000317 	ldw	r8,12(r20)
  802580:	a2400417 	ldw	r9,16(r20)
  802584:	00bfffc4 	movi	r2,-1
  802588:	408b883a 	add	r5,r8,r2
  80258c:	2a09803a 	cmpltu	r4,r5,r8
  802590:	488d883a 	add	r6,r9,r2
  802594:	01c40034 	movhi	r7,4096
  802598:	39ffffc4 	addi	r7,r7,-1
  80259c:	218d883a 	add	r6,r4,r6
  8025a0:	39801736 	bltu	r7,r6,802600 <_fpadd_parts+0x1a8>
  8025a4:	31c06526 	beq	r6,r7,80273c <_fpadd_parts+0x2e4>
  8025a8:	a3000217 	ldw	r12,8(r20)
  8025ac:	4209883a 	add	r4,r8,r8
  8025b0:	00bfffc4 	movi	r2,-1
  8025b4:	220f803a 	cmpltu	r7,r4,r8
  8025b8:	4a4b883a 	add	r5,r9,r9
  8025bc:	394f883a 	add	r7,r7,r5
  8025c0:	2095883a 	add	r10,r4,r2
  8025c4:	3897883a 	add	r11,r7,r2
  8025c8:	510d803a 	cmpltu	r6,r10,r4
  8025cc:	6099883a 	add	r12,r12,r2
  8025d0:	32d7883a 	add	r11,r6,r11
  8025d4:	00840034 	movhi	r2,4096
  8025d8:	10bfffc4 	addi	r2,r2,-1
  8025dc:	2011883a 	mov	r8,r4
  8025e0:	3813883a 	mov	r9,r7
  8025e4:	a1000315 	stw	r4,12(r20)
  8025e8:	a1c00415 	stw	r7,16(r20)
  8025ec:	a3000215 	stw	r12,8(r20)
  8025f0:	12c00336 	bltu	r2,r11,802600 <_fpadd_parts+0x1a8>
  8025f4:	58bfed1e 	bne	r11,r2,8025ac <_fpadd_parts+0x154>
  8025f8:	00bfff84 	movi	r2,-2
  8025fc:	12bfeb2e 	bgeu	r2,r10,8025ac <_fpadd_parts+0x154>
  802600:	a2800417 	ldw	r10,16(r20)
  802604:	008000c4 	movi	r2,3
  802608:	00c80034 	movhi	r3,8192
  80260c:	18ffffc4 	addi	r3,r3,-1
  802610:	a2400317 	ldw	r9,12(r20)
  802614:	a0800015 	stw	r2,0(r20)
  802618:	1a802336 	bltu	r3,r10,8026a8 <_fpadd_parts+0x250>
  80261c:	a027883a 	mov	r19,r20
  802620:	9805883a 	mov	r2,r19
  802624:	ddc00717 	ldw	r23,28(sp)
  802628:	dd800617 	ldw	r22,24(sp)
  80262c:	dd400517 	ldw	r21,20(sp)
  802630:	dd000417 	ldw	r20,16(sp)
  802634:	dcc00317 	ldw	r19,12(sp)
  802638:	dc800217 	ldw	r18,8(sp)
  80263c:	dc400117 	ldw	r17,4(sp)
  802640:	dc000017 	ldw	r16,0(sp)
  802644:	dec00804 	addi	sp,sp,32
  802648:	f800283a 	ret
  80264c:	20fff41e 	bne	r4,r3,802620 <_fpadd_parts+0x1c8>
  802650:	31000015 	stw	r4,0(r6)
  802654:	98800117 	ldw	r2,4(r19)
  802658:	30800115 	stw	r2,4(r6)
  80265c:	98c00217 	ldw	r3,8(r19)
  802660:	30c00215 	stw	r3,8(r6)
  802664:	98800317 	ldw	r2,12(r19)
  802668:	30800315 	stw	r2,12(r6)
  80266c:	98c00417 	ldw	r3,16(r19)
  802670:	30c00415 	stw	r3,16(r6)
  802674:	98800117 	ldw	r2,4(r19)
  802678:	28c00117 	ldw	r3,4(r5)
  80267c:	3027883a 	mov	r19,r6
  802680:	10c4703a 	and	r2,r2,r3
  802684:	30800115 	stw	r2,4(r6)
  802688:	003fe506 	br	802620 <_fpadd_parts+0x1c8>
  80268c:	1dc02616 	blt	r3,r23,802728 <_fpadd_parts+0x2d0>
  802690:	0023883a 	mov	r17,zero
  802694:	182f883a 	mov	r23,r3
  802698:	0025883a 	mov	r18,zero
  80269c:	003fa806 	br	802540 <_fpadd_parts+0xe8>
  8026a0:	a827883a 	mov	r19,r21
  8026a4:	003fde06 	br	802620 <_fpadd_parts+0x1c8>
  8026a8:	01800044 	movi	r6,1
  8026ac:	500497fa 	slli	r2,r10,31
  8026b0:	4808d07a 	srli	r4,r9,1
  8026b4:	518ad83a 	srl	r5,r10,r6
  8026b8:	a2000217 	ldw	r8,8(r20)
  8026bc:	1108b03a 	or	r4,r2,r4
  8026c0:	0007883a 	mov	r3,zero
  8026c4:	4984703a 	and	r2,r9,r6
  8026c8:	208cb03a 	or	r6,r4,r2
  8026cc:	28ceb03a 	or	r7,r5,r3
  8026d0:	42000044 	addi	r8,r8,1
  8026d4:	a027883a 	mov	r19,r20
  8026d8:	a1c00415 	stw	r7,16(r20)
  8026dc:	a2000215 	stw	r8,8(r20)
  8026e0:	a1800315 	stw	r6,12(r20)
  8026e4:	003fce06 	br	802620 <_fpadd_parts+0x1c8>
  8026e8:	8bc5c83a 	sub	r2,r17,r15
  8026ec:	8889803a 	cmpltu	r4,r17,r2
  8026f0:	9407c83a 	sub	r3,r18,r16
  8026f4:	1909c83a 	sub	r4,r3,r4
  8026f8:	100d883a 	mov	r6,r2
  8026fc:	200f883a 	mov	r7,r4
  802700:	003f9906 	br	802568 <_fpadd_parts+0x110>
  802704:	7c45883a 	add	r2,r15,r17
  802708:	13c9803a 	cmpltu	r4,r2,r15
  80270c:	8487883a 	add	r3,r16,r18
  802710:	20c9883a 	add	r4,r4,r3
  802714:	a1400115 	stw	r5,4(r20)
  802718:	a5c00215 	stw	r23,8(r20)
  80271c:	a0800315 	stw	r2,12(r20)
  802720:	a1000415 	stw	r4,16(r20)
  802724:	003fb606 	br	802600 <_fpadd_parts+0x1a8>
  802728:	001f883a 	mov	r15,zero
  80272c:	0021883a 	mov	r16,zero
  802730:	003f8306 	br	802540 <_fpadd_parts+0xe8>
  802734:	018dc83a 	sub	r6,zero,r6
  802738:	003f6706 	br	8024d8 <_fpadd_parts+0x80>
  80273c:	00bfff84 	movi	r2,-2
  802740:	117faf36 	bltu	r2,r5,802600 <_fpadd_parts+0x1a8>
  802744:	003f9806 	br	8025a8 <_fpadd_parts+0x150>
  802748:	0005883a 	mov	r2,zero
  80274c:	1189c83a 	sub	r4,r2,r6
  802750:	1105803a 	cmpltu	r2,r2,r4
  802754:	01cbc83a 	sub	r5,zero,r7
  802758:	2885c83a 	sub	r2,r5,r2
  80275c:	01800044 	movi	r6,1
  802760:	a1800115 	stw	r6,4(r20)
  802764:	a5c00215 	stw	r23,8(r20)
  802768:	a1000315 	stw	r4,12(r20)
  80276c:	a0800415 	stw	r2,16(r20)
  802770:	003f8206 	br	80257c <_fpadd_parts+0x124>
  802774:	203f7226 	beq	r4,zero,802540 <_fpadd_parts+0xe8>
  802778:	35bff804 	addi	r22,r6,-32
  80277c:	b9af883a 	add	r23,r23,r6
  802780:	b0003116 	blt	r22,zero,802848 <_fpadd_parts+0x3f0>
  802784:	959ad83a 	srl	r13,r18,r22
  802788:	001d883a 	mov	r14,zero
  80278c:	000f883a 	mov	r7,zero
  802790:	01000044 	movi	r4,1
  802794:	0011883a 	mov	r8,zero
  802798:	b0002516 	blt	r22,zero,802830 <_fpadd_parts+0x3d8>
  80279c:	2594983a 	sll	r10,r4,r22
  8027a0:	0013883a 	mov	r9,zero
  8027a4:	00bfffc4 	movi	r2,-1
  8027a8:	4889883a 	add	r4,r9,r2
  8027ac:	508b883a 	add	r5,r10,r2
  8027b0:	224d803a 	cmpltu	r6,r4,r9
  8027b4:	314b883a 	add	r5,r6,r5
  8027b8:	8904703a 	and	r2,r17,r4
  8027bc:	9146703a 	and	r3,r18,r5
  8027c0:	10c4b03a 	or	r2,r2,r3
  8027c4:	10000226 	beq	r2,zero,8027d0 <_fpadd_parts+0x378>
  8027c8:	01c00044 	movi	r7,1
  8027cc:	0011883a 	mov	r8,zero
  8027d0:	69e2b03a 	or	r17,r13,r7
  8027d4:	7224b03a 	or	r18,r14,r8
  8027d8:	003f5906 	br	802540 <_fpadd_parts+0xe8>
  8027dc:	8407883a 	add	r3,r16,r16
  8027e0:	008007c4 	movi	r2,31
  8027e4:	1185c83a 	sub	r2,r2,r6
  8027e8:	1886983a 	sll	r3,r3,r2
  8027ec:	7996d83a 	srl	r11,r15,r6
  8027f0:	8198d83a 	srl	r12,r16,r6
  8027f4:	1ad6b03a 	or	r11,r3,r11
  8027f8:	003f3e06 	br	8024f4 <_fpadd_parts+0x9c>
  8027fc:	2006d07a 	srli	r3,r4,1
  802800:	008007c4 	movi	r2,31
  802804:	1185c83a 	sub	r2,r2,r6
  802808:	1890d83a 	srl	r8,r3,r2
  80280c:	218e983a 	sll	r7,r4,r6
  802810:	003f3e06 	br	80250c <_fpadd_parts+0xb4>
  802814:	113f821e 	bne	r2,r4,802620 <_fpadd_parts+0x1c8>
  802818:	28c00117 	ldw	r3,4(r5)
  80281c:	98800117 	ldw	r2,4(r19)
  802820:	10ff7f26 	beq	r2,r3,802620 <_fpadd_parts+0x1c8>
  802824:	04c02074 	movhi	r19,129
  802828:	9cc64704 	addi	r19,r19,6428
  80282c:	003f7c06 	br	802620 <_fpadd_parts+0x1c8>
  802830:	2006d07a 	srli	r3,r4,1
  802834:	008007c4 	movi	r2,31
  802838:	1185c83a 	sub	r2,r2,r6
  80283c:	1894d83a 	srl	r10,r3,r2
  802840:	2192983a 	sll	r9,r4,r6
  802844:	003fd706 	br	8027a4 <_fpadd_parts+0x34c>
  802848:	9487883a 	add	r3,r18,r18
  80284c:	008007c4 	movi	r2,31
  802850:	1185c83a 	sub	r2,r2,r6
  802854:	1886983a 	sll	r3,r3,r2
  802858:	899ad83a 	srl	r13,r17,r6
  80285c:	919cd83a 	srl	r14,r18,r6
  802860:	1b5ab03a 	or	r13,r3,r13
  802864:	003fc906 	br	80278c <_fpadd_parts+0x334>

00802868 <__subdf3>:
  802868:	deffea04 	addi	sp,sp,-88
  80286c:	dcc01415 	stw	r19,80(sp)
  802870:	dcc00404 	addi	r19,sp,16
  802874:	2011883a 	mov	r8,r4
  802878:	2813883a 	mov	r9,r5
  80287c:	dc401315 	stw	r17,76(sp)
  802880:	d809883a 	mov	r4,sp
  802884:	980b883a 	mov	r5,r19
  802888:	dc400904 	addi	r17,sp,36
  80288c:	dfc01515 	stw	ra,84(sp)
  802890:	da400115 	stw	r9,4(sp)
  802894:	d9c00315 	stw	r7,12(sp)
  802898:	da000015 	stw	r8,0(sp)
  80289c:	d9800215 	stw	r6,8(sp)
  8028a0:	08034100 	call	803410 <__unpack_d>
  8028a4:	d9000204 	addi	r4,sp,8
  8028a8:	880b883a 	mov	r5,r17
  8028ac:	08034100 	call	803410 <__unpack_d>
  8028b0:	d8800a17 	ldw	r2,40(sp)
  8028b4:	880b883a 	mov	r5,r17
  8028b8:	9809883a 	mov	r4,r19
  8028bc:	d9800e04 	addi	r6,sp,56
  8028c0:	1080005c 	xori	r2,r2,1
  8028c4:	d8800a15 	stw	r2,40(sp)
  8028c8:	08024580 	call	802458 <_fpadd_parts>
  8028cc:	1009883a 	mov	r4,r2
  8028d0:	08030fc0 	call	8030fc <__pack_d>
  8028d4:	dfc01517 	ldw	ra,84(sp)
  8028d8:	dcc01417 	ldw	r19,80(sp)
  8028dc:	dc401317 	ldw	r17,76(sp)
  8028e0:	dec01604 	addi	sp,sp,88
  8028e4:	f800283a 	ret

008028e8 <__adddf3>:
  8028e8:	deffea04 	addi	sp,sp,-88
  8028ec:	dcc01415 	stw	r19,80(sp)
  8028f0:	dcc00404 	addi	r19,sp,16
  8028f4:	2011883a 	mov	r8,r4
  8028f8:	2813883a 	mov	r9,r5
  8028fc:	dc401315 	stw	r17,76(sp)
  802900:	d809883a 	mov	r4,sp
  802904:	980b883a 	mov	r5,r19
  802908:	dc400904 	addi	r17,sp,36
  80290c:	dfc01515 	stw	ra,84(sp)
  802910:	da400115 	stw	r9,4(sp)
  802914:	d9c00315 	stw	r7,12(sp)
  802918:	da000015 	stw	r8,0(sp)
  80291c:	d9800215 	stw	r6,8(sp)
  802920:	08034100 	call	803410 <__unpack_d>
  802924:	d9000204 	addi	r4,sp,8
  802928:	880b883a 	mov	r5,r17
  80292c:	08034100 	call	803410 <__unpack_d>
  802930:	d9800e04 	addi	r6,sp,56
  802934:	9809883a 	mov	r4,r19
  802938:	880b883a 	mov	r5,r17
  80293c:	08024580 	call	802458 <_fpadd_parts>
  802940:	1009883a 	mov	r4,r2
  802944:	08030fc0 	call	8030fc <__pack_d>
  802948:	dfc01517 	ldw	ra,84(sp)
  80294c:	dcc01417 	ldw	r19,80(sp)
  802950:	dc401317 	ldw	r17,76(sp)
  802954:	dec01604 	addi	sp,sp,88
  802958:	f800283a 	ret

0080295c <__divdf3>:
  80295c:	deffed04 	addi	sp,sp,-76
  802960:	dcc01115 	stw	r19,68(sp)
  802964:	dcc00404 	addi	r19,sp,16
  802968:	2011883a 	mov	r8,r4
  80296c:	2813883a 	mov	r9,r5
  802970:	dc000e15 	stw	r16,56(sp)
  802974:	d809883a 	mov	r4,sp
  802978:	980b883a 	mov	r5,r19
  80297c:	dc000904 	addi	r16,sp,36
  802980:	dfc01215 	stw	ra,72(sp)
  802984:	da400115 	stw	r9,4(sp)
  802988:	d9c00315 	stw	r7,12(sp)
  80298c:	da000015 	stw	r8,0(sp)
  802990:	d9800215 	stw	r6,8(sp)
  802994:	dc801015 	stw	r18,64(sp)
  802998:	dc400f15 	stw	r17,60(sp)
  80299c:	08034100 	call	803410 <__unpack_d>
  8029a0:	d9000204 	addi	r4,sp,8
  8029a4:	800b883a 	mov	r5,r16
  8029a8:	08034100 	call	803410 <__unpack_d>
  8029ac:	d9000417 	ldw	r4,16(sp)
  8029b0:	00800044 	movi	r2,1
  8029b4:	11000b2e 	bgeu	r2,r4,8029e4 <__divdf3+0x88>
  8029b8:	d9400917 	ldw	r5,36(sp)
  8029bc:	1140762e 	bgeu	r2,r5,802b98 <__divdf3+0x23c>
  8029c0:	d8800517 	ldw	r2,20(sp)
  8029c4:	d8c00a17 	ldw	r3,40(sp)
  8029c8:	01800104 	movi	r6,4
  8029cc:	10c4f03a 	xor	r2,r2,r3
  8029d0:	d8800515 	stw	r2,20(sp)
  8029d4:	21800226 	beq	r4,r6,8029e0 <__divdf3+0x84>
  8029d8:	00800084 	movi	r2,2
  8029dc:	2080141e 	bne	r4,r2,802a30 <__divdf3+0xd4>
  8029e0:	29000926 	beq	r5,r4,802a08 <__divdf3+0xac>
  8029e4:	9809883a 	mov	r4,r19
  8029e8:	08030fc0 	call	8030fc <__pack_d>
  8029ec:	dfc01217 	ldw	ra,72(sp)
  8029f0:	dcc01117 	ldw	r19,68(sp)
  8029f4:	dc801017 	ldw	r18,64(sp)
  8029f8:	dc400f17 	ldw	r17,60(sp)
  8029fc:	dc000e17 	ldw	r16,56(sp)
  802a00:	dec01304 	addi	sp,sp,76
  802a04:	f800283a 	ret
  802a08:	01002074 	movhi	r4,129
  802a0c:	21064704 	addi	r4,r4,6428
  802a10:	08030fc0 	call	8030fc <__pack_d>
  802a14:	dfc01217 	ldw	ra,72(sp)
  802a18:	dcc01117 	ldw	r19,68(sp)
  802a1c:	dc801017 	ldw	r18,64(sp)
  802a20:	dc400f17 	ldw	r17,60(sp)
  802a24:	dc000e17 	ldw	r16,56(sp)
  802a28:	dec01304 	addi	sp,sp,76
  802a2c:	f800283a 	ret
  802a30:	29805b26 	beq	r5,r6,802ba0 <__divdf3+0x244>
  802a34:	28802d26 	beq	r5,r2,802aec <__divdf3+0x190>
  802a38:	d8c00617 	ldw	r3,24(sp)
  802a3c:	d8800b17 	ldw	r2,44(sp)
  802a40:	d9c00817 	ldw	r7,32(sp)
  802a44:	dc400d17 	ldw	r17,52(sp)
  802a48:	188bc83a 	sub	r5,r3,r2
  802a4c:	d9800717 	ldw	r6,28(sp)
  802a50:	dc000c17 	ldw	r16,48(sp)
  802a54:	d9400615 	stw	r5,24(sp)
  802a58:	3c403836 	bltu	r7,r17,802b3c <__divdf3+0x1e0>
  802a5c:	89c03626 	beq	r17,r7,802b38 <__divdf3+0x1dc>
  802a60:	0015883a 	mov	r10,zero
  802a64:	001d883a 	mov	r14,zero
  802a68:	02c40034 	movhi	r11,4096
  802a6c:	001f883a 	mov	r15,zero
  802a70:	003f883a 	mov	ra,zero
  802a74:	04800f44 	movi	r18,61
  802a78:	00000f06 	br	802ab8 <__divdf3+0x15c>
  802a7c:	601d883a 	mov	r14,r12
  802a80:	681f883a 	mov	r15,r13
  802a84:	400d883a 	mov	r6,r8
  802a88:	100f883a 	mov	r7,r2
  802a8c:	3191883a 	add	r8,r6,r6
  802a90:	5808d07a 	srli	r4,r11,1
  802a94:	4185803a 	cmpltu	r2,r8,r6
  802a98:	39d3883a 	add	r9,r7,r7
  802a9c:	28c6b03a 	or	r3,r5,r3
  802aa0:	1245883a 	add	r2,r2,r9
  802aa4:	1815883a 	mov	r10,r3
  802aa8:	2017883a 	mov	r11,r4
  802aac:	400d883a 	mov	r6,r8
  802ab0:	100f883a 	mov	r7,r2
  802ab4:	fc801726 	beq	ra,r18,802b14 <__divdf3+0x1b8>
  802ab8:	580a97fa 	slli	r5,r11,31
  802abc:	5006d07a 	srli	r3,r10,1
  802ac0:	ffc00044 	addi	ra,ra,1
  802ac4:	3c7ff136 	bltu	r7,r17,802a8c <__divdf3+0x130>
  802ac8:	3411c83a 	sub	r8,r6,r16
  802acc:	3205803a 	cmpltu	r2,r6,r8
  802ad0:	3c53c83a 	sub	r9,r7,r17
  802ad4:	7298b03a 	or	r12,r14,r10
  802ad8:	7adab03a 	or	r13,r15,r11
  802adc:	4885c83a 	sub	r2,r9,r2
  802ae0:	89ffe61e 	bne	r17,r7,802a7c <__divdf3+0x120>
  802ae4:	343fe936 	bltu	r6,r16,802a8c <__divdf3+0x130>
  802ae8:	003fe406 	br	802a7c <__divdf3+0x120>
  802aec:	9809883a 	mov	r4,r19
  802af0:	d9800415 	stw	r6,16(sp)
  802af4:	08030fc0 	call	8030fc <__pack_d>
  802af8:	dfc01217 	ldw	ra,72(sp)
  802afc:	dcc01117 	ldw	r19,68(sp)
  802b00:	dc801017 	ldw	r18,64(sp)
  802b04:	dc400f17 	ldw	r17,60(sp)
  802b08:	dc000e17 	ldw	r16,56(sp)
  802b0c:	dec01304 	addi	sp,sp,76
  802b10:	f800283a 	ret
  802b14:	00803fc4 	movi	r2,255
  802b18:	7090703a 	and	r8,r14,r2
  802b1c:	00802004 	movi	r2,128
  802b20:	0007883a 	mov	r3,zero
  802b24:	0013883a 	mov	r9,zero
  802b28:	40800d26 	beq	r8,r2,802b60 <__divdf3+0x204>
  802b2c:	dbc00815 	stw	r15,32(sp)
  802b30:	db800715 	stw	r14,28(sp)
  802b34:	003fab06 	br	8029e4 <__divdf3+0x88>
  802b38:	343fc92e 	bgeu	r6,r16,802a60 <__divdf3+0x104>
  802b3c:	3185883a 	add	r2,r6,r6
  802b40:	1189803a 	cmpltu	r4,r2,r6
  802b44:	39c7883a 	add	r3,r7,r7
  802b48:	20c9883a 	add	r4,r4,r3
  802b4c:	297fffc4 	addi	r5,r5,-1
  802b50:	100d883a 	mov	r6,r2
  802b54:	200f883a 	mov	r7,r4
  802b58:	d9400615 	stw	r5,24(sp)
  802b5c:	003fc006 	br	802a60 <__divdf3+0x104>
  802b60:	483ff21e 	bne	r9,zero,802b2c <__divdf3+0x1d0>
  802b64:	01004004 	movi	r4,256
  802b68:	7104703a 	and	r2,r14,r4
  802b6c:	10c4b03a 	or	r2,r2,r3
  802b70:	103fee1e 	bne	r2,zero,802b2c <__divdf3+0x1d0>
  802b74:	31c4b03a 	or	r2,r6,r7
  802b78:	103fec26 	beq	r2,zero,802b2c <__divdf3+0x1d0>
  802b7c:	7205883a 	add	r2,r14,r8
  802b80:	1391803a 	cmpltu	r8,r2,r14
  802b84:	43d1883a 	add	r8,r8,r15
  802b88:	013fc004 	movi	r4,-256
  802b8c:	111c703a 	and	r14,r2,r4
  802b90:	401f883a 	mov	r15,r8
  802b94:	003fe506 	br	802b2c <__divdf3+0x1d0>
  802b98:	8009883a 	mov	r4,r16
  802b9c:	003f9206 	br	8029e8 <__divdf3+0x8c>
  802ba0:	9809883a 	mov	r4,r19
  802ba4:	d8000715 	stw	zero,28(sp)
  802ba8:	d8000815 	stw	zero,32(sp)
  802bac:	d8000615 	stw	zero,24(sp)
  802bb0:	003f8d06 	br	8029e8 <__divdf3+0x8c>

00802bb4 <__nedf2>:
  802bb4:	deffef04 	addi	sp,sp,-68
  802bb8:	dc400f15 	stw	r17,60(sp)
  802bbc:	dc400404 	addi	r17,sp,16
  802bc0:	2005883a 	mov	r2,r4
  802bc4:	2807883a 	mov	r3,r5
  802bc8:	dc000e15 	stw	r16,56(sp)
  802bcc:	d809883a 	mov	r4,sp
  802bd0:	880b883a 	mov	r5,r17
  802bd4:	dc000904 	addi	r16,sp,36
  802bd8:	d8c00115 	stw	r3,4(sp)
  802bdc:	d8800015 	stw	r2,0(sp)
  802be0:	d9800215 	stw	r6,8(sp)
  802be4:	dfc01015 	stw	ra,64(sp)
  802be8:	d9c00315 	stw	r7,12(sp)
  802bec:	08034100 	call	803410 <__unpack_d>
  802bf0:	d9000204 	addi	r4,sp,8
  802bf4:	800b883a 	mov	r5,r16
  802bf8:	08034100 	call	803410 <__unpack_d>
  802bfc:	d8800417 	ldw	r2,16(sp)
  802c00:	00c00044 	movi	r3,1
  802c04:	180d883a 	mov	r6,r3
  802c08:	1880062e 	bgeu	r3,r2,802c24 <__nedf2+0x70>
  802c0c:	d8800917 	ldw	r2,36(sp)
  802c10:	8809883a 	mov	r4,r17
  802c14:	800b883a 	mov	r5,r16
  802c18:	1880022e 	bgeu	r3,r2,802c24 <__nedf2+0x70>
  802c1c:	08035480 	call	803548 <__fpcmp_parts_d>
  802c20:	100d883a 	mov	r6,r2
  802c24:	3005883a 	mov	r2,r6
  802c28:	dfc01017 	ldw	ra,64(sp)
  802c2c:	dc400f17 	ldw	r17,60(sp)
  802c30:	dc000e17 	ldw	r16,56(sp)
  802c34:	dec01104 	addi	sp,sp,68
  802c38:	f800283a 	ret

00802c3c <__make_dp>:
  802c3c:	defff904 	addi	sp,sp,-28
  802c40:	d8c00717 	ldw	r3,28(sp)
  802c44:	d9000015 	stw	r4,0(sp)
  802c48:	d809883a 	mov	r4,sp
  802c4c:	dfc00515 	stw	ra,20(sp)
  802c50:	d9c00615 	stw	r7,24(sp)
  802c54:	d9400115 	stw	r5,4(sp)
  802c58:	d9800215 	stw	r6,8(sp)
  802c5c:	d8c00415 	stw	r3,16(sp)
  802c60:	d9c00315 	stw	r7,12(sp)
  802c64:	08030fc0 	call	8030fc <__pack_d>
  802c68:	dfc00517 	ldw	ra,20(sp)
  802c6c:	dec00704 	addi	sp,sp,28
  802c70:	f800283a 	ret

00802c74 <__truncdfsf2>:
  802c74:	defff804 	addi	sp,sp,-32
  802c78:	2005883a 	mov	r2,r4
  802c7c:	2807883a 	mov	r3,r5
  802c80:	d809883a 	mov	r4,sp
  802c84:	d9400204 	addi	r5,sp,8
  802c88:	d8c00115 	stw	r3,4(sp)
  802c8c:	d8800015 	stw	r2,0(sp)
  802c90:	dfc00715 	stw	ra,28(sp)
  802c94:	08034100 	call	803410 <__unpack_d>
  802c98:	d9c00517 	ldw	r7,20(sp)
  802c9c:	da000617 	ldw	r8,24(sp)
  802ca0:	02d00034 	movhi	r11,16384
  802ca4:	5affffc4 	addi	r11,r11,-1
  802ca8:	3812d7ba 	srli	r9,r7,30
  802cac:	401a90ba 	slli	r13,r8,2
  802cb0:	3ac4703a 	and	r2,r7,r11
  802cb4:	0007883a 	mov	r3,zero
  802cb8:	6a52b03a 	or	r9,r13,r9
  802cbc:	10c4b03a 	or	r2,r2,r3
  802cc0:	d9000217 	ldw	r4,8(sp)
  802cc4:	d9400317 	ldw	r5,12(sp)
  802cc8:	d9800417 	ldw	r6,16(sp)
  802ccc:	480f883a 	mov	r7,r9
  802cd0:	10000126 	beq	r2,zero,802cd8 <__truncdfsf2+0x64>
  802cd4:	49c00054 	ori	r7,r9,1
  802cd8:	08030d00 	call	8030d0 <__make_fp>
  802cdc:	dfc00717 	ldw	ra,28(sp)
  802ce0:	dec00804 	addi	sp,sp,32
  802ce4:	f800283a 	ret

00802ce8 <__muldi3>:
  802ce8:	2011883a 	mov	r8,r4
  802cec:	427fffcc 	andi	r9,r8,65535
  802cf0:	4018d43a 	srli	r12,r8,16
  802cf4:	32bfffcc 	andi	r10,r6,65535
  802cf8:	3016d43a 	srli	r11,r6,16
  802cfc:	4a85383a 	mul	r2,r9,r10
  802d00:	6295383a 	mul	r10,r12,r10
  802d04:	4ad3383a 	mul	r9,r9,r11
  802d08:	113fffcc 	andi	r4,r2,65535
  802d0c:	1004d43a 	srli	r2,r2,16
  802d10:	4a93883a 	add	r9,r9,r10
  802d14:	3807883a 	mov	r3,r7
  802d18:	1245883a 	add	r2,r2,r9
  802d1c:	280f883a 	mov	r7,r5
  802d20:	180b883a 	mov	r5,r3
  802d24:	1006943a 	slli	r3,r2,16
  802d28:	defffd04 	addi	sp,sp,-12
  802d2c:	dc800215 	stw	r18,8(sp)
  802d30:	1907883a 	add	r3,r3,r4
  802d34:	dc400115 	stw	r17,4(sp)
  802d38:	dc000015 	stw	r16,0(sp)
  802d3c:	4165383a 	mul	r18,r8,r5
  802d40:	31e3383a 	mul	r17,r6,r7
  802d44:	1012d43a 	srli	r9,r2,16
  802d48:	62d9383a 	mul	r12,r12,r11
  802d4c:	181f883a 	mov	r15,r3
  802d50:	1280022e 	bgeu	r2,r10,802d5c <__muldi3+0x74>
  802d54:	00800074 	movhi	r2,1
  802d58:	6099883a 	add	r12,r12,r2
  802d5c:	624d883a 	add	r6,r12,r9
  802d60:	9187883a 	add	r3,r18,r6
  802d64:	88c7883a 	add	r3,r17,r3
  802d68:	7805883a 	mov	r2,r15
  802d6c:	dc800217 	ldw	r18,8(sp)
  802d70:	dc400117 	ldw	r17,4(sp)
  802d74:	dc000017 	ldw	r16,0(sp)
  802d78:	dec00304 	addi	sp,sp,12
  802d7c:	f800283a 	ret

00802d80 <__clzsi2>:
  802d80:	00bfffd4 	movui	r2,65535
  802d84:	11000e36 	bltu	r2,r4,802dc0 <__clzsi2+0x40>
  802d88:	00803fc4 	movi	r2,255
  802d8c:	01400204 	movi	r5,8
  802d90:	0007883a 	mov	r3,zero
  802d94:	11001036 	bltu	r2,r4,802dd8 <__clzsi2+0x58>
  802d98:	000b883a 	mov	r5,zero
  802d9c:	20c6d83a 	srl	r3,r4,r3
  802da0:	00802074 	movhi	r2,129
  802da4:	10864c04 	addi	r2,r2,6448
  802da8:	1887883a 	add	r3,r3,r2
  802dac:	18800003 	ldbu	r2,0(r3)
  802db0:	00c00804 	movi	r3,32
  802db4:	2885883a 	add	r2,r5,r2
  802db8:	1885c83a 	sub	r2,r3,r2
  802dbc:	f800283a 	ret
  802dc0:	01400404 	movi	r5,16
  802dc4:	00804034 	movhi	r2,256
  802dc8:	10bfffc4 	addi	r2,r2,-1
  802dcc:	2807883a 	mov	r3,r5
  802dd0:	113ff22e 	bgeu	r2,r4,802d9c <__clzsi2+0x1c>
  802dd4:	01400604 	movi	r5,24
  802dd8:	2807883a 	mov	r3,r5
  802ddc:	20c6d83a 	srl	r3,r4,r3
  802de0:	00802074 	movhi	r2,129
  802de4:	10864c04 	addi	r2,r2,6448
  802de8:	1887883a 	add	r3,r3,r2
  802dec:	18800003 	ldbu	r2,0(r3)
  802df0:	00c00804 	movi	r3,32
  802df4:	2885883a 	add	r2,r5,r2
  802df8:	1885c83a 	sub	r2,r3,r2
  802dfc:	f800283a 	ret

00802e00 <__pack_f>:
  802e00:	20c00017 	ldw	r3,0(r4)
  802e04:	01c00044 	movi	r7,1
  802e08:	21800317 	ldw	r6,12(r4)
  802e0c:	21400117 	ldw	r5,4(r4)
  802e10:	38c02d2e 	bgeu	r7,r3,802ec8 <__pack_f+0xc8>
  802e14:	00800104 	movi	r2,4
  802e18:	18802826 	beq	r3,r2,802ebc <__pack_f+0xbc>
  802e1c:	00800084 	movi	r2,2
  802e20:	18800126 	beq	r3,r2,802e28 <__pack_f+0x28>
  802e24:	3000101e 	bne	r6,zero,802e68 <__pack_f+0x68>
  802e28:	000d883a 	mov	r6,zero
  802e2c:	0007883a 	mov	r3,zero
  802e30:	19003fcc 	andi	r4,r3,255
  802e34:	200895fa 	slli	r4,r4,23
  802e38:	00c02034 	movhi	r3,128
  802e3c:	18ffffc4 	addi	r3,r3,-1
  802e40:	30c6703a 	and	r3,r6,r3
  802e44:	10a0002c 	andhi	r2,r2,32768
  802e48:	10c4b03a 	or	r2,r2,r3
  802e4c:	280a97fa 	slli	r5,r5,31
  802e50:	1104b03a 	or	r2,r2,r4
  802e54:	00e00034 	movhi	r3,32768
  802e58:	18ffffc4 	addi	r3,r3,-1
  802e5c:	10c4703a 	and	r2,r2,r3
  802e60:	1144b03a 	or	r2,r2,r5
  802e64:	f800283a 	ret
  802e68:	21000217 	ldw	r4,8(r4)
  802e6c:	00bfe084 	movi	r2,-126
  802e70:	20801b16 	blt	r4,r2,802ee0 <__pack_f+0xe0>
  802e74:	00801fc4 	movi	r2,127
  802e78:	11001016 	blt	r2,r4,802ebc <__pack_f+0xbc>
  802e7c:	308e703a 	and	r7,r6,r2
  802e80:	2087883a 	add	r3,r4,r2
  802e84:	00801004 	movi	r2,64
  802e88:	38800526 	beq	r7,r2,802ea0 <__pack_f+0xa0>
  802e8c:	31800fc4 	addi	r6,r6,63
  802e90:	30000716 	blt	r6,zero,802eb0 <__pack_f+0xb0>
  802e94:	300490ba 	slli	r2,r6,2
  802e98:	100cd27a 	srli	r6,r2,9
  802e9c:	003fe406 	br	802e30 <__pack_f+0x30>
  802ea0:	3080200c 	andi	r2,r6,128
  802ea4:	103ffa26 	beq	r2,zero,802e90 <__pack_f+0x90>
  802ea8:	31cd883a 	add	r6,r6,r7
  802eac:	003ff806 	br	802e90 <__pack_f+0x90>
  802eb0:	300cd07a 	srli	r6,r6,1
  802eb4:	18c00044 	addi	r3,r3,1
  802eb8:	003ff606 	br	802e94 <__pack_f+0x94>
  802ebc:	000d883a 	mov	r6,zero
  802ec0:	00ffffc4 	movi	r3,-1
  802ec4:	003fda06 	br	802e30 <__pack_f+0x30>
  802ec8:	31800434 	orhi	r6,r6,16
  802ecc:	00802034 	movhi	r2,128
  802ed0:	10bfffc4 	addi	r2,r2,-1
  802ed4:	308c703a 	and	r6,r6,r2
  802ed8:	00ffffc4 	movi	r3,-1
  802edc:	003fd406 	br	802e30 <__pack_f+0x30>
  802ee0:	1109c83a 	sub	r4,r2,r4
  802ee4:	00800644 	movi	r2,25
  802ee8:	11001216 	blt	r2,r4,802f34 <__pack_f+0x134>
  802eec:	3904983a 	sll	r2,r7,r4
  802ef0:	3106d83a 	srl	r3,r6,r4
  802ef4:	10bfffc4 	addi	r2,r2,-1
  802ef8:	3084703a 	and	r2,r6,r2
  802efc:	1004c03a 	cmpne	r2,r2,zero
  802f00:	1886b03a 	or	r3,r3,r2
  802f04:	19001fcc 	andi	r4,r3,127
  802f08:	00801004 	movi	r2,64
  802f0c:	20800c26 	beq	r4,r2,802f40 <__pack_f+0x140>
  802f10:	18c00fc4 	addi	r3,r3,63
  802f14:	00900034 	movhi	r2,16384
  802f18:	10bfffc4 	addi	r2,r2,-1
  802f1c:	180cd1fa 	srli	r6,r3,7
  802f20:	10c7803a 	cmpltu	r3,r2,r3
  802f24:	00802034 	movhi	r2,128
  802f28:	10bfffc4 	addi	r2,r2,-1
  802f2c:	308c703a 	and	r6,r6,r2
  802f30:	003fbf06 	br	802e30 <__pack_f+0x30>
  802f34:	0007883a 	mov	r3,zero
  802f38:	000d883a 	mov	r6,zero
  802f3c:	003ff906 	br	802f24 <__pack_f+0x124>
  802f40:	1880200c 	andi	r2,r3,128
  802f44:	10000126 	beq	r2,zero,802f4c <__pack_f+0x14c>
  802f48:	1907883a 	add	r3,r3,r4
  802f4c:	180cd1fa 	srli	r6,r3,7
  802f50:	00900034 	movhi	r2,16384
  802f54:	10bfffc4 	addi	r2,r2,-1
  802f58:	10c7803a 	cmpltu	r3,r2,r3
  802f5c:	003ff106 	br	802f24 <__pack_f+0x124>

00802f60 <__unpack_f>:
  802f60:	21800017 	ldw	r6,0(r4)
  802f64:	00c02034 	movhi	r3,128
  802f68:	18ffffc4 	addi	r3,r3,-1
  802f6c:	3004d5fa 	srli	r2,r6,23
  802f70:	3008d7fa 	srli	r4,r6,31
  802f74:	30ce703a 	and	r7,r6,r3
  802f78:	10c03fcc 	andi	r3,r2,255
  802f7c:	29000115 	stw	r4,4(r5)
  802f80:	1800131e 	bne	r3,zero,802fd0 <__unpack_f+0x70>
  802f84:	38000f26 	beq	r7,zero,802fc4 <__unpack_f+0x64>
  802f88:	380691fa 	slli	r3,r7,7
  802f8c:	01bfe084 	movi	r6,-126
  802f90:	008000c4 	movi	r2,3
  802f94:	01100034 	movhi	r4,16384
  802f98:	213fffc4 	addi	r4,r4,-1
  802f9c:	28800015 	stw	r2,0(r5)
  802fa0:	29800215 	stw	r6,8(r5)
  802fa4:	20c00536 	bltu	r4,r3,802fbc <__unpack_f+0x5c>
  802fa8:	3005883a 	mov	r2,r6
  802fac:	18c7883a 	add	r3,r3,r3
  802fb0:	10bfffc4 	addi	r2,r2,-1
  802fb4:	20fffd2e 	bgeu	r4,r3,802fac <__unpack_f+0x4c>
  802fb8:	28800215 	stw	r2,8(r5)
  802fbc:	28c00315 	stw	r3,12(r5)
  802fc0:	f800283a 	ret
  802fc4:	00800084 	movi	r2,2
  802fc8:	28800015 	stw	r2,0(r5)
  802fcc:	f800283a 	ret
  802fd0:	00803fc4 	movi	r2,255
  802fd4:	18800826 	beq	r3,r2,802ff8 <__unpack_f+0x98>
  802fd8:	380491fa 	slli	r2,r7,7
  802fdc:	18ffe044 	addi	r3,r3,-127
  802fe0:	28c00215 	stw	r3,8(r5)
  802fe4:	10900034 	orhi	r2,r2,16384
  802fe8:	28800315 	stw	r2,12(r5)
  802fec:	008000c4 	movi	r2,3
  802ff0:	28800015 	stw	r2,0(r5)
  802ff4:	f800283a 	ret
  802ff8:	3800031e 	bne	r7,zero,803008 <__unpack_f+0xa8>
  802ffc:	00800104 	movi	r2,4
  803000:	28800015 	stw	r2,0(r5)
  803004:	f800283a 	ret
  803008:	3080042c 	andhi	r2,r6,16
  80300c:	10000426 	beq	r2,zero,803020 <__unpack_f+0xc0>
  803010:	00800044 	movi	r2,1
  803014:	28800015 	stw	r2,0(r5)
  803018:	29c00315 	stw	r7,12(r5)
  80301c:	f800283a 	ret
  803020:	28000015 	stw	zero,0(r5)
  803024:	003ffc06 	br	803018 <__unpack_f+0xb8>

00803028 <__fpcmp_parts_f>:
  803028:	21800017 	ldw	r6,0(r4)
  80302c:	00c00044 	movi	r3,1
  803030:	19800a2e 	bgeu	r3,r6,80305c <__fpcmp_parts_f+0x34>
  803034:	28800017 	ldw	r2,0(r5)
  803038:	1880082e 	bgeu	r3,r2,80305c <__fpcmp_parts_f+0x34>
  80303c:	00c00104 	movi	r3,4
  803040:	30c01e26 	beq	r6,r3,8030bc <__fpcmp_parts_f+0x94>
  803044:	10c01a26 	beq	r2,r3,8030b0 <__fpcmp_parts_f+0x88>
  803048:	00c00084 	movi	r3,2
  80304c:	30c00526 	beq	r6,r3,803064 <__fpcmp_parts_f+0x3c>
  803050:	10c0071e 	bne	r2,r3,803070 <__fpcmp_parts_f+0x48>
  803054:	20800117 	ldw	r2,4(r4)
  803058:	1000091e 	bne	r2,zero,803080 <__fpcmp_parts_f+0x58>
  80305c:	00800044 	movi	r2,1
  803060:	f800283a 	ret
  803064:	10c0121e 	bne	r2,r3,8030b0 <__fpcmp_parts_f+0x88>
  803068:	0005883a 	mov	r2,zero
  80306c:	f800283a 	ret
  803070:	20c00117 	ldw	r3,4(r4)
  803074:	28800117 	ldw	r2,4(r5)
  803078:	18800326 	beq	r3,r2,803088 <__fpcmp_parts_f+0x60>
  80307c:	183ff726 	beq	r3,zero,80305c <__fpcmp_parts_f+0x34>
  803080:	00bfffc4 	movi	r2,-1
  803084:	f800283a 	ret
  803088:	21800217 	ldw	r6,8(r4)
  80308c:	28800217 	ldw	r2,8(r5)
  803090:	11bffa16 	blt	r2,r6,80307c <__fpcmp_parts_f+0x54>
  803094:	30800416 	blt	r6,r2,8030a8 <__fpcmp_parts_f+0x80>
  803098:	21000317 	ldw	r4,12(r4)
  80309c:	29400317 	ldw	r5,12(r5)
  8030a0:	293ff636 	bltu	r5,r4,80307c <__fpcmp_parts_f+0x54>
  8030a4:	217ff02e 	bgeu	r4,r5,803068 <__fpcmp_parts_f+0x40>
  8030a8:	183fec1e 	bne	r3,zero,80305c <__fpcmp_parts_f+0x34>
  8030ac:	003ff406 	br	803080 <__fpcmp_parts_f+0x58>
  8030b0:	28800117 	ldw	r2,4(r5)
  8030b4:	103fe91e 	bne	r2,zero,80305c <__fpcmp_parts_f+0x34>
  8030b8:	003ff106 	br	803080 <__fpcmp_parts_f+0x58>
  8030bc:	11bfe51e 	bne	r2,r6,803054 <__fpcmp_parts_f+0x2c>
  8030c0:	28c00117 	ldw	r3,4(r5)
  8030c4:	20800117 	ldw	r2,4(r4)
  8030c8:	1885c83a 	sub	r2,r3,r2
  8030cc:	f800283a 	ret

008030d0 <__make_fp>:
  8030d0:	defffb04 	addi	sp,sp,-20
  8030d4:	d9000015 	stw	r4,0(sp)
  8030d8:	d809883a 	mov	r4,sp
  8030dc:	dfc00415 	stw	ra,16(sp)
  8030e0:	d9400115 	stw	r5,4(sp)
  8030e4:	d9800215 	stw	r6,8(sp)
  8030e8:	d9c00315 	stw	r7,12(sp)
  8030ec:	0802e000 	call	802e00 <__pack_f>
  8030f0:	dfc00417 	ldw	ra,16(sp)
  8030f4:	dec00504 	addi	sp,sp,20
  8030f8:	f800283a 	ret

008030fc <__pack_d>:
  8030fc:	20c00017 	ldw	r3,0(r4)
  803100:	defffd04 	addi	sp,sp,-12
  803104:	dc000015 	stw	r16,0(sp)
  803108:	dc800215 	stw	r18,8(sp)
  80310c:	dc400115 	stw	r17,4(sp)
  803110:	00800044 	movi	r2,1
  803114:	22000317 	ldw	r8,12(r4)
  803118:	001f883a 	mov	r15,zero
  80311c:	22400417 	ldw	r9,16(r4)
  803120:	24000117 	ldw	r16,4(r4)
  803124:	10c0552e 	bgeu	r2,r3,80327c <__pack_d+0x180>
  803128:	00800104 	movi	r2,4
  80312c:	18804f26 	beq	r3,r2,80326c <__pack_d+0x170>
  803130:	00800084 	movi	r2,2
  803134:	18800226 	beq	r3,r2,803140 <__pack_d+0x44>
  803138:	4244b03a 	or	r2,r8,r9
  80313c:	10001a1e 	bne	r2,zero,8031a8 <__pack_d+0xac>
  803140:	000d883a 	mov	r6,zero
  803144:	000f883a 	mov	r7,zero
  803148:	0011883a 	mov	r8,zero
  80314c:	00800434 	movhi	r2,16
  803150:	10bfffc4 	addi	r2,r2,-1
  803154:	301d883a 	mov	r14,r6
  803158:	3884703a 	and	r2,r7,r2
  80315c:	400a953a 	slli	r5,r8,20
  803160:	79bffc2c 	andhi	r6,r15,65520
  803164:	308cb03a 	or	r6,r6,r2
  803168:	00e00434 	movhi	r3,32784
  80316c:	18ffffc4 	addi	r3,r3,-1
  803170:	800497fa 	slli	r2,r16,31
  803174:	30c6703a 	and	r3,r6,r3
  803178:	1946b03a 	or	r3,r3,r5
  80317c:	01600034 	movhi	r5,32768
  803180:	297fffc4 	addi	r5,r5,-1
  803184:	194a703a 	and	r5,r3,r5
  803188:	288ab03a 	or	r5,r5,r2
  80318c:	2807883a 	mov	r3,r5
  803190:	7005883a 	mov	r2,r14
  803194:	dc800217 	ldw	r18,8(sp)
  803198:	dc400117 	ldw	r17,4(sp)
  80319c:	dc000017 	ldw	r16,0(sp)
  8031a0:	dec00304 	addi	sp,sp,12
  8031a4:	f800283a 	ret
  8031a8:	21000217 	ldw	r4,8(r4)
  8031ac:	00bf0084 	movi	r2,-1022
  8031b0:	20803f16 	blt	r4,r2,8032b0 <__pack_d+0x1b4>
  8031b4:	0080ffc4 	movi	r2,1023
  8031b8:	11002c16 	blt	r2,r4,80326c <__pack_d+0x170>
  8031bc:	00803fc4 	movi	r2,255
  8031c0:	408c703a 	and	r6,r8,r2
  8031c4:	00802004 	movi	r2,128
  8031c8:	0007883a 	mov	r3,zero
  8031cc:	000f883a 	mov	r7,zero
  8031d0:	2280ffc4 	addi	r10,r4,1023
  8031d4:	30801e26 	beq	r6,r2,803250 <__pack_d+0x154>
  8031d8:	00801fc4 	movi	r2,127
  8031dc:	4089883a 	add	r4,r8,r2
  8031e0:	220d803a 	cmpltu	r6,r4,r8
  8031e4:	324d883a 	add	r6,r6,r9
  8031e8:	2011883a 	mov	r8,r4
  8031ec:	3013883a 	mov	r9,r6
  8031f0:	00880034 	movhi	r2,8192
  8031f4:	10bfffc4 	addi	r2,r2,-1
  8031f8:	12400d36 	bltu	r2,r9,803230 <__pack_d+0x134>
  8031fc:	4804963a 	slli	r2,r9,24
  803200:	400cd23a 	srli	r6,r8,8
  803204:	480ed23a 	srli	r7,r9,8
  803208:	013fffc4 	movi	r4,-1
  80320c:	118cb03a 	or	r6,r2,r6
  803210:	01400434 	movhi	r5,16
  803214:	297fffc4 	addi	r5,r5,-1
  803218:	3104703a 	and	r2,r6,r4
  80321c:	3946703a 	and	r3,r7,r5
  803220:	5201ffcc 	andi	r8,r10,2047
  803224:	100d883a 	mov	r6,r2
  803228:	180f883a 	mov	r7,r3
  80322c:	003fc706 	br	80314c <__pack_d+0x50>
  803230:	480897fa 	slli	r4,r9,31
  803234:	4004d07a 	srli	r2,r8,1
  803238:	4806d07a 	srli	r3,r9,1
  80323c:	52800044 	addi	r10,r10,1
  803240:	2084b03a 	or	r2,r4,r2
  803244:	1011883a 	mov	r8,r2
  803248:	1813883a 	mov	r9,r3
  80324c:	003feb06 	br	8031fc <__pack_d+0x100>
  803250:	383fe11e 	bne	r7,zero,8031d8 <__pack_d+0xdc>
  803254:	01004004 	movi	r4,256
  803258:	4104703a 	and	r2,r8,r4
  80325c:	10c4b03a 	or	r2,r2,r3
  803260:	103fe326 	beq	r2,zero,8031f0 <__pack_d+0xf4>
  803264:	3005883a 	mov	r2,r6
  803268:	003fdc06 	br	8031dc <__pack_d+0xe0>
  80326c:	000d883a 	mov	r6,zero
  803270:	000f883a 	mov	r7,zero
  803274:	0201ffc4 	movi	r8,2047
  803278:	003fb406 	br	80314c <__pack_d+0x50>
  80327c:	0005883a 	mov	r2,zero
  803280:	00c00234 	movhi	r3,8
  803284:	408cb03a 	or	r6,r8,r2
  803288:	48ceb03a 	or	r7,r9,r3
  80328c:	013fffc4 	movi	r4,-1
  803290:	01400434 	movhi	r5,16
  803294:	297fffc4 	addi	r5,r5,-1
  803298:	3104703a 	and	r2,r6,r4
  80329c:	3946703a 	and	r3,r7,r5
  8032a0:	100d883a 	mov	r6,r2
  8032a4:	180f883a 	mov	r7,r3
  8032a8:	0201ffc4 	movi	r8,2047
  8032ac:	003fa706 	br	80314c <__pack_d+0x50>
  8032b0:	1109c83a 	sub	r4,r2,r4
  8032b4:	00800e04 	movi	r2,56
  8032b8:	11004316 	blt	r2,r4,8033c8 <__pack_d+0x2cc>
  8032bc:	21fff804 	addi	r7,r4,-32
  8032c0:	38004516 	blt	r7,zero,8033d8 <__pack_d+0x2dc>
  8032c4:	49d8d83a 	srl	r12,r9,r7
  8032c8:	001b883a 	mov	r13,zero
  8032cc:	0023883a 	mov	r17,zero
  8032d0:	01400044 	movi	r5,1
  8032d4:	0025883a 	mov	r18,zero
  8032d8:	38004716 	blt	r7,zero,8033f8 <__pack_d+0x2fc>
  8032dc:	29d6983a 	sll	r11,r5,r7
  8032e0:	0015883a 	mov	r10,zero
  8032e4:	00bfffc4 	movi	r2,-1
  8032e8:	5089883a 	add	r4,r10,r2
  8032ec:	588b883a 	add	r5,r11,r2
  8032f0:	228d803a 	cmpltu	r6,r4,r10
  8032f4:	314b883a 	add	r5,r6,r5
  8032f8:	4104703a 	and	r2,r8,r4
  8032fc:	4946703a 	and	r3,r9,r5
  803300:	10c4b03a 	or	r2,r2,r3
  803304:	10000226 	beq	r2,zero,803310 <__pack_d+0x214>
  803308:	04400044 	movi	r17,1
  80330c:	0025883a 	mov	r18,zero
  803310:	00803fc4 	movi	r2,255
  803314:	644eb03a 	or	r7,r12,r17
  803318:	3892703a 	and	r9,r7,r2
  80331c:	00802004 	movi	r2,128
  803320:	6c90b03a 	or	r8,r13,r18
  803324:	0015883a 	mov	r10,zero
  803328:	48801626 	beq	r9,r2,803384 <__pack_d+0x288>
  80332c:	01001fc4 	movi	r4,127
  803330:	3905883a 	add	r2,r7,r4
  803334:	11cd803a 	cmpltu	r6,r2,r7
  803338:	320d883a 	add	r6,r6,r8
  80333c:	100f883a 	mov	r7,r2
  803340:	00840034 	movhi	r2,4096
  803344:	10bfffc4 	addi	r2,r2,-1
  803348:	3011883a 	mov	r8,r6
  80334c:	0007883a 	mov	r3,zero
  803350:	11801b36 	bltu	r2,r6,8033c0 <__pack_d+0x2c4>
  803354:	4004963a 	slli	r2,r8,24
  803358:	3808d23a 	srli	r4,r7,8
  80335c:	400ad23a 	srli	r5,r8,8
  803360:	1813883a 	mov	r9,r3
  803364:	1108b03a 	or	r4,r2,r4
  803368:	00bfffc4 	movi	r2,-1
  80336c:	00c00434 	movhi	r3,16
  803370:	18ffffc4 	addi	r3,r3,-1
  803374:	208c703a 	and	r6,r4,r2
  803378:	28ce703a 	and	r7,r5,r3
  80337c:	4a01ffcc 	andi	r8,r9,2047
  803380:	003f7206 	br	80314c <__pack_d+0x50>
  803384:	503fe91e 	bne	r10,zero,80332c <__pack_d+0x230>
  803388:	01004004 	movi	r4,256
  80338c:	3904703a 	and	r2,r7,r4
  803390:	0007883a 	mov	r3,zero
  803394:	10c4b03a 	or	r2,r2,r3
  803398:	10000626 	beq	r2,zero,8033b4 <__pack_d+0x2b8>
  80339c:	3a45883a 	add	r2,r7,r9
  8033a0:	11cd803a 	cmpltu	r6,r2,r7
  8033a4:	320d883a 	add	r6,r6,r8
  8033a8:	100f883a 	mov	r7,r2
  8033ac:	3011883a 	mov	r8,r6
  8033b0:	0007883a 	mov	r3,zero
  8033b4:	00840034 	movhi	r2,4096
  8033b8:	10bfffc4 	addi	r2,r2,-1
  8033bc:	123fe52e 	bgeu	r2,r8,803354 <__pack_d+0x258>
  8033c0:	00c00044 	movi	r3,1
  8033c4:	003fe306 	br	803354 <__pack_d+0x258>
  8033c8:	0009883a 	mov	r4,zero
  8033cc:	0013883a 	mov	r9,zero
  8033d0:	000b883a 	mov	r5,zero
  8033d4:	003fe406 	br	803368 <__pack_d+0x26c>
  8033d8:	4a47883a 	add	r3,r9,r9
  8033dc:	008007c4 	movi	r2,31
  8033e0:	1105c83a 	sub	r2,r2,r4
  8033e4:	1886983a 	sll	r3,r3,r2
  8033e8:	4118d83a 	srl	r12,r8,r4
  8033ec:	491ad83a 	srl	r13,r9,r4
  8033f0:	1b18b03a 	or	r12,r3,r12
  8033f4:	003fb506 	br	8032cc <__pack_d+0x1d0>
  8033f8:	2806d07a 	srli	r3,r5,1
  8033fc:	008007c4 	movi	r2,31
  803400:	1105c83a 	sub	r2,r2,r4
  803404:	1896d83a 	srl	r11,r3,r2
  803408:	2914983a 	sll	r10,r5,r4
  80340c:	003fb506 	br	8032e4 <__pack_d+0x1e8>

00803410 <__unpack_d>:
  803410:	20c00117 	ldw	r3,4(r4)
  803414:	22400017 	ldw	r9,0(r4)
  803418:	00800434 	movhi	r2,16
  80341c:	10bfffc4 	addi	r2,r2,-1
  803420:	1808d53a 	srli	r4,r3,20
  803424:	180cd7fa 	srli	r6,r3,31
  803428:	1894703a 	and	r10,r3,r2
  80342c:	2201ffcc 	andi	r8,r4,2047
  803430:	281b883a 	mov	r13,r5
  803434:	4817883a 	mov	r11,r9
  803438:	29800115 	stw	r6,4(r5)
  80343c:	5019883a 	mov	r12,r10
  803440:	40001e1e 	bne	r8,zero,8034bc <__unpack_d+0xac>
  803444:	4a84b03a 	or	r2,r9,r10
  803448:	10001926 	beq	r2,zero,8034b0 <__unpack_d+0xa0>
  80344c:	4804d63a 	srli	r2,r9,24
  803450:	500c923a 	slli	r6,r10,8
  803454:	013f0084 	movi	r4,-1022
  803458:	00c40034 	movhi	r3,4096
  80345c:	18ffffc4 	addi	r3,r3,-1
  803460:	118cb03a 	or	r6,r2,r6
  803464:	008000c4 	movi	r2,3
  803468:	480a923a 	slli	r5,r9,8
  80346c:	68800015 	stw	r2,0(r13)
  803470:	69000215 	stw	r4,8(r13)
  803474:	19800b36 	bltu	r3,r6,8034a4 <__unpack_d+0x94>
  803478:	200f883a 	mov	r7,r4
  80347c:	1811883a 	mov	r8,r3
  803480:	2945883a 	add	r2,r5,r5
  803484:	1149803a 	cmpltu	r4,r2,r5
  803488:	3187883a 	add	r3,r6,r6
  80348c:	20c9883a 	add	r4,r4,r3
  803490:	100b883a 	mov	r5,r2
  803494:	200d883a 	mov	r6,r4
  803498:	39ffffc4 	addi	r7,r7,-1
  80349c:	413ff82e 	bgeu	r8,r4,803480 <__unpack_d+0x70>
  8034a0:	69c00215 	stw	r7,8(r13)
  8034a4:	69800415 	stw	r6,16(r13)
  8034a8:	69400315 	stw	r5,12(r13)
  8034ac:	f800283a 	ret
  8034b0:	00800084 	movi	r2,2
  8034b4:	28800015 	stw	r2,0(r5)
  8034b8:	f800283a 	ret
  8034bc:	0081ffc4 	movi	r2,2047
  8034c0:	40800f26 	beq	r8,r2,803500 <__unpack_d+0xf0>
  8034c4:	480cd63a 	srli	r6,r9,24
  8034c8:	5006923a 	slli	r3,r10,8
  8034cc:	4804923a 	slli	r2,r9,8
  8034d0:	0009883a 	mov	r4,zero
  8034d4:	30c6b03a 	or	r3,r6,r3
  8034d8:	01440034 	movhi	r5,4096
  8034dc:	110cb03a 	or	r6,r2,r4
  8034e0:	423f0044 	addi	r8,r8,-1023
  8034e4:	194eb03a 	or	r7,r3,r5
  8034e8:	008000c4 	movi	r2,3
  8034ec:	69c00415 	stw	r7,16(r13)
  8034f0:	6a000215 	stw	r8,8(r13)
  8034f4:	68800015 	stw	r2,0(r13)
  8034f8:	69800315 	stw	r6,12(r13)
  8034fc:	f800283a 	ret
  803500:	4a84b03a 	or	r2,r9,r10
  803504:	1000031e 	bne	r2,zero,803514 <__unpack_d+0x104>
  803508:	00800104 	movi	r2,4
  80350c:	28800015 	stw	r2,0(r5)
  803510:	f800283a 	ret
  803514:	0009883a 	mov	r4,zero
  803518:	01400234 	movhi	r5,8
  80351c:	4904703a 	and	r2,r9,r4
  803520:	5146703a 	and	r3,r10,r5
  803524:	10c4b03a 	or	r2,r2,r3
  803528:	10000526 	beq	r2,zero,803540 <__unpack_d+0x130>
  80352c:	00800044 	movi	r2,1
  803530:	68800015 	stw	r2,0(r13)
  803534:	6b000415 	stw	r12,16(r13)
  803538:	6ac00315 	stw	r11,12(r13)
  80353c:	f800283a 	ret
  803540:	68000015 	stw	zero,0(r13)
  803544:	003ffb06 	br	803534 <__unpack_d+0x124>

00803548 <__fpcmp_parts_d>:
  803548:	21800017 	ldw	r6,0(r4)
  80354c:	00c00044 	movi	r3,1
  803550:	19800a2e 	bgeu	r3,r6,80357c <__fpcmp_parts_d+0x34>
  803554:	28800017 	ldw	r2,0(r5)
  803558:	1880082e 	bgeu	r3,r2,80357c <__fpcmp_parts_d+0x34>
  80355c:	00c00104 	movi	r3,4
  803560:	30c02626 	beq	r6,r3,8035fc <__fpcmp_parts_d+0xb4>
  803564:	10c02226 	beq	r2,r3,8035f0 <__fpcmp_parts_d+0xa8>
  803568:	00c00084 	movi	r3,2
  80356c:	30c00526 	beq	r6,r3,803584 <__fpcmp_parts_d+0x3c>
  803570:	10c0071e 	bne	r2,r3,803590 <__fpcmp_parts_d+0x48>
  803574:	20800117 	ldw	r2,4(r4)
  803578:	1000091e 	bne	r2,zero,8035a0 <__fpcmp_parts_d+0x58>
  80357c:	00800044 	movi	r2,1
  803580:	f800283a 	ret
  803584:	10c01a1e 	bne	r2,r3,8035f0 <__fpcmp_parts_d+0xa8>
  803588:	0005883a 	mov	r2,zero
  80358c:	f800283a 	ret
  803590:	22000117 	ldw	r8,4(r4)
  803594:	28800117 	ldw	r2,4(r5)
  803598:	40800326 	beq	r8,r2,8035a8 <__fpcmp_parts_d+0x60>
  80359c:	403ff726 	beq	r8,zero,80357c <__fpcmp_parts_d+0x34>
  8035a0:	00bfffc4 	movi	r2,-1
  8035a4:	f800283a 	ret
  8035a8:	20c00217 	ldw	r3,8(r4)
  8035ac:	28800217 	ldw	r2,8(r5)
  8035b0:	10fffa16 	blt	r2,r3,80359c <__fpcmp_parts_d+0x54>
  8035b4:	18800916 	blt	r3,r2,8035dc <__fpcmp_parts_d+0x94>
  8035b8:	21c00417 	ldw	r7,16(r4)
  8035bc:	28c00417 	ldw	r3,16(r5)
  8035c0:	21800317 	ldw	r6,12(r4)
  8035c4:	28800317 	ldw	r2,12(r5)
  8035c8:	19fff436 	bltu	r3,r7,80359c <__fpcmp_parts_d+0x54>
  8035cc:	38c00526 	beq	r7,r3,8035e4 <__fpcmp_parts_d+0x9c>
  8035d0:	38c00236 	bltu	r7,r3,8035dc <__fpcmp_parts_d+0x94>
  8035d4:	19ffec1e 	bne	r3,r7,803588 <__fpcmp_parts_d+0x40>
  8035d8:	30bfeb2e 	bgeu	r6,r2,803588 <__fpcmp_parts_d+0x40>
  8035dc:	403fe71e 	bne	r8,zero,80357c <__fpcmp_parts_d+0x34>
  8035e0:	003fef06 	br	8035a0 <__fpcmp_parts_d+0x58>
  8035e4:	11bffa2e 	bgeu	r2,r6,8035d0 <__fpcmp_parts_d+0x88>
  8035e8:	403fe426 	beq	r8,zero,80357c <__fpcmp_parts_d+0x34>
  8035ec:	003fec06 	br	8035a0 <__fpcmp_parts_d+0x58>
  8035f0:	28800117 	ldw	r2,4(r5)
  8035f4:	103fe11e 	bne	r2,zero,80357c <__fpcmp_parts_d+0x34>
  8035f8:	003fe906 	br	8035a0 <__fpcmp_parts_d+0x58>
  8035fc:	11bfdd1e 	bne	r2,r6,803574 <__fpcmp_parts_d+0x2c>
  803600:	28c00117 	ldw	r3,4(r5)
  803604:	20800117 	ldw	r2,4(r4)
  803608:	1885c83a 	sub	r2,r3,r2
  80360c:	f800283a 	ret

00803610 <__errno>:
  803610:	00c02074 	movhi	r3,129
  803614:	18ce4f04 	addi	r3,r3,14652
  803618:	18800017 	ldw	r2,0(r3)
  80361c:	f800283a 	ret

00803620 <printf>:
  803620:	defffb04 	addi	sp,sp,-20
  803624:	dfc00115 	stw	ra,4(sp)
  803628:	d9400215 	stw	r5,8(sp)
  80362c:	d9800315 	stw	r6,12(sp)
  803630:	d9c00415 	stw	r7,16(sp)
  803634:	00802074 	movhi	r2,129
  803638:	108e4f04 	addi	r2,r2,14652
  80363c:	10c00017 	ldw	r3,0(r2)
  803640:	200b883a 	mov	r5,r4
  803644:	d8800204 	addi	r2,sp,8
  803648:	19000217 	ldw	r4,8(r3)
  80364c:	100d883a 	mov	r6,r2
  803650:	d8800015 	stw	r2,0(sp)
  803654:	08057980 	call	805798 <__vfprintf_internal>
  803658:	dfc00117 	ldw	ra,4(sp)
  80365c:	dec00504 	addi	sp,sp,20
  803660:	f800283a 	ret

00803664 <_printf_r>:
  803664:	defffc04 	addi	sp,sp,-16
  803668:	dfc00115 	stw	ra,4(sp)
  80366c:	d9800215 	stw	r6,8(sp)
  803670:	d9c00315 	stw	r7,12(sp)
  803674:	280d883a 	mov	r6,r5
  803678:	21400217 	ldw	r5,8(r4)
  80367c:	d8c00204 	addi	r3,sp,8
  803680:	180f883a 	mov	r7,r3
  803684:	d8c00015 	stw	r3,0(sp)
  803688:	08038ec0 	call	8038ec <___vfprintf_internal_r>
  80368c:	dfc00117 	ldw	ra,4(sp)
  803690:	dec00404 	addi	sp,sp,16
  803694:	f800283a 	ret

00803698 <_puts_r>:
  803698:	defff604 	addi	sp,sp,-40
  80369c:	dc400715 	stw	r17,28(sp)
  8036a0:	2023883a 	mov	r17,r4
  8036a4:	2809883a 	mov	r4,r5
  8036a8:	dfc00915 	stw	ra,36(sp)
  8036ac:	dcc00815 	stw	r19,32(sp)
  8036b0:	2827883a 	mov	r19,r5
  8036b4:	08038200 	call	803820 <strlen>
  8036b8:	89400217 	ldw	r5,8(r17)
  8036bc:	00c02074 	movhi	r3,129
  8036c0:	18c68d04 	addi	r3,r3,6708
  8036c4:	01c00044 	movi	r7,1
  8036c8:	12000044 	addi	r8,r2,1
  8036cc:	d8c00515 	stw	r3,20(sp)
  8036d0:	d9c00615 	stw	r7,24(sp)
  8036d4:	d8c00304 	addi	r3,sp,12
  8036d8:	01c00084 	movi	r7,2
  8036dc:	8809883a 	mov	r4,r17
  8036e0:	d80d883a 	mov	r6,sp
  8036e4:	d8c00015 	stw	r3,0(sp)
  8036e8:	dcc00315 	stw	r19,12(sp)
  8036ec:	da000215 	stw	r8,8(sp)
  8036f0:	d9c00115 	stw	r7,4(sp)
  8036f4:	d8800415 	stw	r2,16(sp)
  8036f8:	08079f40 	call	8079f4 <__sfvwrite_r>
  8036fc:	00ffffc4 	movi	r3,-1
  803700:	10000626 	beq	r2,zero,80371c <_puts_r+0x84>
  803704:	1805883a 	mov	r2,r3
  803708:	dfc00917 	ldw	ra,36(sp)
  80370c:	dcc00817 	ldw	r19,32(sp)
  803710:	dc400717 	ldw	r17,28(sp)
  803714:	dec00a04 	addi	sp,sp,40
  803718:	f800283a 	ret
  80371c:	00c00284 	movi	r3,10
  803720:	1805883a 	mov	r2,r3
  803724:	dfc00917 	ldw	ra,36(sp)
  803728:	dcc00817 	ldw	r19,32(sp)
  80372c:	dc400717 	ldw	r17,28(sp)
  803730:	dec00a04 	addi	sp,sp,40
  803734:	f800283a 	ret

00803738 <puts>:
  803738:	00802074 	movhi	r2,129
  80373c:	108e4f04 	addi	r2,r2,14652
  803740:	200b883a 	mov	r5,r4
  803744:	11000017 	ldw	r4,0(r2)
  803748:	08036981 	jmpi	803698 <_puts_r>

0080374c <sprintf>:
  80374c:	deffe504 	addi	sp,sp,-108
  803750:	2013883a 	mov	r9,r4
  803754:	dfc01815 	stw	ra,96(sp)
  803758:	d9801915 	stw	r6,100(sp)
  80375c:	d9c01a15 	stw	r7,104(sp)
  803760:	d8801904 	addi	r2,sp,100
  803764:	d8800015 	stw	r2,0(sp)
  803768:	00802074 	movhi	r2,129
  80376c:	108e4f04 	addi	r2,r2,14652
  803770:	11000017 	ldw	r4,0(r2)
  803774:	d9c00017 	ldw	r7,0(sp)
  803778:	00808204 	movi	r2,520
  80377c:	00e00034 	movhi	r3,32768
  803780:	18ffffc4 	addi	r3,r3,-1
  803784:	280d883a 	mov	r6,r5
  803788:	d880040d 	sth	r2,16(sp)
  80378c:	d9400104 	addi	r5,sp,4
  803790:	00bfffc4 	movi	r2,-1
  803794:	d8c00615 	stw	r3,24(sp)
  803798:	d8c00315 	stw	r3,12(sp)
  80379c:	da400515 	stw	r9,20(sp)
  8037a0:	d880048d 	sth	r2,18(sp)
  8037a4:	da400115 	stw	r9,4(sp)
  8037a8:	08038ec0 	call	8038ec <___vfprintf_internal_r>
  8037ac:	d8c00117 	ldw	r3,4(sp)
  8037b0:	18000005 	stb	zero,0(r3)
  8037b4:	dfc01817 	ldw	ra,96(sp)
  8037b8:	dec01b04 	addi	sp,sp,108
  8037bc:	f800283a 	ret

008037c0 <_sprintf_r>:
  8037c0:	deffe604 	addi	sp,sp,-104
  8037c4:	2813883a 	mov	r9,r5
  8037c8:	dfc01815 	stw	ra,96(sp)
  8037cc:	d9c01915 	stw	r7,100(sp)
  8037d0:	d8801904 	addi	r2,sp,100
  8037d4:	d8800015 	stw	r2,0(sp)
  8037d8:	100f883a 	mov	r7,r2
  8037dc:	00808204 	movi	r2,520
  8037e0:	00e00034 	movhi	r3,32768
  8037e4:	18ffffc4 	addi	r3,r3,-1
  8037e8:	d880040d 	sth	r2,16(sp)
  8037ec:	d9400104 	addi	r5,sp,4
  8037f0:	00bfffc4 	movi	r2,-1
  8037f4:	d8c00615 	stw	r3,24(sp)
  8037f8:	d8c00315 	stw	r3,12(sp)
  8037fc:	da400515 	stw	r9,20(sp)
  803800:	d880048d 	sth	r2,18(sp)
  803804:	da400115 	stw	r9,4(sp)
  803808:	08038ec0 	call	8038ec <___vfprintf_internal_r>
  80380c:	d8c00117 	ldw	r3,4(sp)
  803810:	18000005 	stb	zero,0(r3)
  803814:	dfc01817 	ldw	ra,96(sp)
  803818:	dec01a04 	addi	sp,sp,104
  80381c:	f800283a 	ret

00803820 <strlen>:
  803820:	208000cc 	andi	r2,r4,3
  803824:	2011883a 	mov	r8,r4
  803828:	1000161e 	bne	r2,zero,803884 <strlen+0x64>
  80382c:	20c00017 	ldw	r3,0(r4)
  803830:	017fbff4 	movhi	r5,65279
  803834:	297fbfc4 	addi	r5,r5,-257
  803838:	01e02074 	movhi	r7,32897
  80383c:	39e02004 	addi	r7,r7,-32640
  803840:	1945883a 	add	r2,r3,r5
  803844:	11c4703a 	and	r2,r2,r7
  803848:	00c6303a 	nor	r3,zero,r3
  80384c:	1886703a 	and	r3,r3,r2
  803850:	18000c1e 	bne	r3,zero,803884 <strlen+0x64>
  803854:	280d883a 	mov	r6,r5
  803858:	380b883a 	mov	r5,r7
  80385c:	21000104 	addi	r4,r4,4
  803860:	20800017 	ldw	r2,0(r4)
  803864:	1187883a 	add	r3,r2,r6
  803868:	1946703a 	and	r3,r3,r5
  80386c:	0084303a 	nor	r2,zero,r2
  803870:	10c4703a 	and	r2,r2,r3
  803874:	103ff926 	beq	r2,zero,80385c <strlen+0x3c>
  803878:	20800007 	ldb	r2,0(r4)
  80387c:	10000326 	beq	r2,zero,80388c <strlen+0x6c>
  803880:	21000044 	addi	r4,r4,1
  803884:	20800007 	ldb	r2,0(r4)
  803888:	103ffd1e 	bne	r2,zero,803880 <strlen+0x60>
  80388c:	2205c83a 	sub	r2,r4,r8
  803890:	f800283a 	ret

00803894 <__sprint_r>:
  803894:	30800217 	ldw	r2,8(r6)
  803898:	defffe04 	addi	sp,sp,-8
  80389c:	dc000015 	stw	r16,0(sp)
  8038a0:	dfc00115 	stw	ra,4(sp)
  8038a4:	3021883a 	mov	r16,r6
  8038a8:	0007883a 	mov	r3,zero
  8038ac:	1000061e 	bne	r2,zero,8038c8 <__sprint_r+0x34>
  8038b0:	1805883a 	mov	r2,r3
  8038b4:	30000115 	stw	zero,4(r6)
  8038b8:	dfc00117 	ldw	ra,4(sp)
  8038bc:	dc000017 	ldw	r16,0(sp)
  8038c0:	dec00204 	addi	sp,sp,8
  8038c4:	f800283a 	ret
  8038c8:	08079f40 	call	8079f4 <__sfvwrite_r>
  8038cc:	1007883a 	mov	r3,r2
  8038d0:	1805883a 	mov	r2,r3
  8038d4:	80000115 	stw	zero,4(r16)
  8038d8:	80000215 	stw	zero,8(r16)
  8038dc:	dfc00117 	ldw	ra,4(sp)
  8038e0:	dc000017 	ldw	r16,0(sp)
  8038e4:	dec00204 	addi	sp,sp,8
  8038e8:	f800283a 	ret

008038ec <___vfprintf_internal_r>:
  8038ec:	defea404 	addi	sp,sp,-1392
  8038f0:	dd815815 	stw	r22,1376(sp)
  8038f4:	dc015215 	stw	r16,1352(sp)
  8038f8:	d9c15115 	stw	r7,1348(sp)
  8038fc:	dfc15b15 	stw	ra,1388(sp)
  803900:	df015a15 	stw	fp,1384(sp)
  803904:	ddc15915 	stw	r23,1380(sp)
  803908:	dd415715 	stw	r21,1372(sp)
  80390c:	dd015615 	stw	r20,1368(sp)
  803910:	dcc15515 	stw	r19,1364(sp)
  803914:	dc815415 	stw	r18,1360(sp)
  803918:	dc415315 	stw	r17,1356(sp)
  80391c:	282d883a 	mov	r22,r5
  803920:	3021883a 	mov	r16,r6
  803924:	d9014f15 	stw	r4,1340(sp)
  803928:	08080180 	call	808018 <_localeconv_r>
  80392c:	10800017 	ldw	r2,0(r2)
  803930:	d9c15117 	ldw	r7,1348(sp)
  803934:	d8814915 	stw	r2,1316(sp)
  803938:	d8814f17 	ldw	r2,1340(sp)
  80393c:	10000226 	beq	r2,zero,803948 <___vfprintf_internal_r+0x5c>
  803940:	10800e17 	ldw	r2,56(r2)
  803944:	10020d26 	beq	r2,zero,80417c <___vfprintf_internal_r+0x890>
  803948:	b080030b 	ldhu	r2,12(r22)
  80394c:	1080020c 	andi	r2,r2,8
  803950:	10020e26 	beq	r2,zero,80418c <___vfprintf_internal_r+0x8a0>
  803954:	b0800417 	ldw	r2,16(r22)
  803958:	10020c26 	beq	r2,zero,80418c <___vfprintf_internal_r+0x8a0>
  80395c:	b200030b 	ldhu	r8,12(r22)
  803960:	00800284 	movi	r2,10
  803964:	40c0068c 	andi	r3,r8,26
  803968:	18802f1e 	bne	r3,r2,803a28 <___vfprintf_internal_r+0x13c>
  80396c:	b080038f 	ldh	r2,14(r22)
  803970:	10002d16 	blt	r2,zero,803a28 <___vfprintf_internal_r+0x13c>
  803974:	b240038b 	ldhu	r9,14(r22)
  803978:	b2800717 	ldw	r10,28(r22)
  80397c:	b2c00917 	ldw	r11,36(r22)
  803980:	d9014f17 	ldw	r4,1340(sp)
  803984:	dc402904 	addi	r17,sp,164
  803988:	d8804004 	addi	r2,sp,256
  80398c:	00c10004 	movi	r3,1024
  803990:	423fff4c 	andi	r8,r8,65533
  803994:	800d883a 	mov	r6,r16
  803998:	880b883a 	mov	r5,r17
  80399c:	da002c0d 	sth	r8,176(sp)
  8039a0:	da402c8d 	sth	r9,178(sp)
  8039a4:	da803015 	stw	r10,192(sp)
  8039a8:	dac03215 	stw	r11,200(sp)
  8039ac:	d8802d15 	stw	r2,180(sp)
  8039b0:	d8c02e15 	stw	r3,184(sp)
  8039b4:	d8802915 	stw	r2,164(sp)
  8039b8:	d8c02b15 	stw	r3,172(sp)
  8039bc:	d8002f15 	stw	zero,188(sp)
  8039c0:	08038ec0 	call	8038ec <___vfprintf_internal_r>
  8039c4:	d8814b15 	stw	r2,1324(sp)
  8039c8:	10000416 	blt	r2,zero,8039dc <___vfprintf_internal_r+0xf0>
  8039cc:	d9014f17 	ldw	r4,1340(sp)
  8039d0:	880b883a 	mov	r5,r17
  8039d4:	08070c40 	call	8070c4 <_fflush_r>
  8039d8:	1002321e 	bne	r2,zero,8042a4 <___vfprintf_internal_r+0x9b8>
  8039dc:	d8802c0b 	ldhu	r2,176(sp)
  8039e0:	1080100c 	andi	r2,r2,64
  8039e4:	10000326 	beq	r2,zero,8039f4 <___vfprintf_internal_r+0x108>
  8039e8:	b080030b 	ldhu	r2,12(r22)
  8039ec:	10801014 	ori	r2,r2,64
  8039f0:	b080030d 	sth	r2,12(r22)
  8039f4:	d8814b17 	ldw	r2,1324(sp)
  8039f8:	dfc15b17 	ldw	ra,1388(sp)
  8039fc:	df015a17 	ldw	fp,1384(sp)
  803a00:	ddc15917 	ldw	r23,1380(sp)
  803a04:	dd815817 	ldw	r22,1376(sp)
  803a08:	dd415717 	ldw	r21,1372(sp)
  803a0c:	dd015617 	ldw	r20,1368(sp)
  803a10:	dcc15517 	ldw	r19,1364(sp)
  803a14:	dc815417 	ldw	r18,1360(sp)
  803a18:	dc415317 	ldw	r17,1356(sp)
  803a1c:	dc015217 	ldw	r16,1352(sp)
  803a20:	dec15c04 	addi	sp,sp,1392
  803a24:	f800283a 	ret
  803a28:	0005883a 	mov	r2,zero
  803a2c:	0007883a 	mov	r3,zero
  803a30:	dd401904 	addi	r21,sp,100
  803a34:	d8814215 	stw	r2,1288(sp)
  803a38:	802f883a 	mov	r23,r16
  803a3c:	d8c14315 	stw	r3,1292(sp)
  803a40:	d8014b15 	stw	zero,1324(sp)
  803a44:	d8014815 	stw	zero,1312(sp)
  803a48:	d8014415 	stw	zero,1296(sp)
  803a4c:	d8014715 	stw	zero,1308(sp)
  803a50:	dd400c15 	stw	r21,48(sp)
  803a54:	d8000e15 	stw	zero,56(sp)
  803a58:	d8000d15 	stw	zero,52(sp)
  803a5c:	b8800007 	ldb	r2,0(r23)
  803a60:	10001926 	beq	r2,zero,803ac8 <___vfprintf_internal_r+0x1dc>
  803a64:	00c00944 	movi	r3,37
  803a68:	10c01726 	beq	r2,r3,803ac8 <___vfprintf_internal_r+0x1dc>
  803a6c:	b821883a 	mov	r16,r23
  803a70:	00000106 	br	803a78 <___vfprintf_internal_r+0x18c>
  803a74:	10c00326 	beq	r2,r3,803a84 <___vfprintf_internal_r+0x198>
  803a78:	84000044 	addi	r16,r16,1
  803a7c:	80800007 	ldb	r2,0(r16)
  803a80:	103ffc1e 	bne	r2,zero,803a74 <___vfprintf_internal_r+0x188>
  803a84:	85e7c83a 	sub	r19,r16,r23
  803a88:	98000e26 	beq	r19,zero,803ac4 <___vfprintf_internal_r+0x1d8>
  803a8c:	dc800e17 	ldw	r18,56(sp)
  803a90:	dc400d17 	ldw	r17,52(sp)
  803a94:	008001c4 	movi	r2,7
  803a98:	94e5883a 	add	r18,r18,r19
  803a9c:	8c400044 	addi	r17,r17,1
  803aa0:	adc00015 	stw	r23,0(r21)
  803aa4:	dc800e15 	stw	r18,56(sp)
  803aa8:	acc00115 	stw	r19,4(r21)
  803aac:	dc400d15 	stw	r17,52(sp)
  803ab0:	14428b16 	blt	r2,r17,8044e0 <___vfprintf_internal_r+0xbf4>
  803ab4:	ad400204 	addi	r21,r21,8
  803ab8:	d9014b17 	ldw	r4,1324(sp)
  803abc:	24c9883a 	add	r4,r4,r19
  803ac0:	d9014b15 	stw	r4,1324(sp)
  803ac4:	802f883a 	mov	r23,r16
  803ac8:	b8800007 	ldb	r2,0(r23)
  803acc:	10013c26 	beq	r2,zero,803fc0 <___vfprintf_internal_r+0x6d4>
  803ad0:	bdc00044 	addi	r23,r23,1
  803ad4:	d8000405 	stb	zero,16(sp)
  803ad8:	b8c00007 	ldb	r3,0(r23)
  803adc:	04ffffc4 	movi	r19,-1
  803ae0:	d8014c15 	stw	zero,1328(sp)
  803ae4:	d8014a15 	stw	zero,1320(sp)
  803ae8:	d8c14d15 	stw	r3,1332(sp)
  803aec:	bdc00044 	addi	r23,r23,1
  803af0:	d9414d17 	ldw	r5,1332(sp)
  803af4:	00801604 	movi	r2,88
  803af8:	28fff804 	addi	r3,r5,-32
  803afc:	10c06036 	bltu	r2,r3,803c80 <___vfprintf_internal_r+0x394>
  803b00:	18c5883a 	add	r2,r3,r3
  803b04:	1085883a 	add	r2,r2,r2
  803b08:	00c02034 	movhi	r3,128
  803b0c:	18cec704 	addi	r3,r3,15132
  803b10:	10c5883a 	add	r2,r2,r3
  803b14:	11000017 	ldw	r4,0(r2)
  803b18:	2000683a 	jmp	r4
  803b1c:	00804a90 	cmplti	r2,zero,298
  803b20:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803b24:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803b28:	00804a7c 	xorhi	r2,zero,297
  803b2c:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803b30:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803b34:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803b38:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803b3c:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803b40:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803b44:	0080485c 	xori	r2,zero,289
  803b48:	00804a6c 	andhi	r2,zero,297
  803b4c:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803b50:	00804874 	movhi	r2,289
  803b54:	00804b08 	cmpgei	r2,zero,300
  803b58:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803b5c:	00804af4 	movhi	r2,299
  803b60:	00804abc 	xorhi	r2,zero,298
  803b64:	00804abc 	xorhi	r2,zero,298
  803b68:	00804abc 	xorhi	r2,zero,298
  803b6c:	00804abc 	xorhi	r2,zero,298
  803b70:	00804abc 	xorhi	r2,zero,298
  803b74:	00804abc 	xorhi	r2,zero,298
  803b78:	00804abc 	xorhi	r2,zero,298
  803b7c:	00804abc 	xorhi	r2,zero,298
  803b80:	00804abc 	xorhi	r2,zero,298
  803b84:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803b88:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803b8c:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803b90:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803b94:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803b98:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803b9c:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803ba0:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803ba4:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803ba8:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803bac:	008042d8 	cmpnei	r2,zero,267
  803bb0:	00804944 	movi	r2,293
  803bb4:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803bb8:	00804944 	movi	r2,293
  803bbc:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803bc0:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803bc4:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803bc8:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803bcc:	00804aa8 	cmpgeui	r2,zero,298
  803bd0:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803bd4:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803bd8:	0080438c 	andi	r2,zero,270
  803bdc:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803be0:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803be4:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803be8:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803bec:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803bf0:	008043d8 	cmpnei	r2,zero,271
  803bf4:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803bf8:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803bfc:	008049f8 	rdprs	r2,zero,295
  803c00:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803c04:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803c08:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803c0c:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803c10:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803c14:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803c18:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803c1c:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803c20:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803c24:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803c28:	008049cc 	andi	r2,zero,295
  803c2c:	008042e4 	muli	r2,zero,267
  803c30:	00804944 	movi	r2,293
  803c34:	00804944 	movi	r2,293
  803c38:	00804944 	movi	r2,293
  803c3c:	00804930 	cmpltui	r2,zero,292
  803c40:	008042e4 	muli	r2,zero,267
  803c44:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803c48:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803c4c:	008048b8 	rdprs	r2,zero,290
  803c50:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803c54:	00804888 	cmpgei	r2,zero,290
  803c58:	00804398 	cmpnei	r2,zero,270
  803c5c:	008048e8 	cmpgeui	r2,zero,291
  803c60:	008048d4 	movui	r2,291
  803c64:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803c68:	00804b64 	muli	r2,zero,301
  803c6c:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803c70:	008043e4 	muli	r2,zero,271
  803c74:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803c78:	00803c80 	call	803c8 <__alt_mem_onchip_memory2_3+0x793c8>
  803c7c:	00804a5c 	xori	r2,zero,297
  803c80:	d9014d17 	ldw	r4,1332(sp)
  803c84:	2000ce26 	beq	r4,zero,803fc0 <___vfprintf_internal_r+0x6d4>
  803c88:	01400044 	movi	r5,1
  803c8c:	d9800f04 	addi	r6,sp,60
  803c90:	d9c14015 	stw	r7,1280(sp)
  803c94:	d9414515 	stw	r5,1300(sp)
  803c98:	d9814115 	stw	r6,1284(sp)
  803c9c:	280f883a 	mov	r7,r5
  803ca0:	d9000f05 	stb	r4,60(sp)
  803ca4:	d8000405 	stb	zero,16(sp)
  803ca8:	d8014615 	stw	zero,1304(sp)
  803cac:	d8c14c17 	ldw	r3,1328(sp)
  803cb0:	1880008c 	andi	r2,r3,2
  803cb4:	1005003a 	cmpeq	r2,r2,zero
  803cb8:	d8815015 	stw	r2,1344(sp)
  803cbc:	1000031e 	bne	r2,zero,803ccc <___vfprintf_internal_r+0x3e0>
  803cc0:	d9014517 	ldw	r4,1300(sp)
  803cc4:	21000084 	addi	r4,r4,2
  803cc8:	d9014515 	stw	r4,1300(sp)
  803ccc:	d9414c17 	ldw	r5,1328(sp)
  803cd0:	2940210c 	andi	r5,r5,132
  803cd4:	d9414e15 	stw	r5,1336(sp)
  803cd8:	28002d1e 	bne	r5,zero,803d90 <___vfprintf_internal_r+0x4a4>
  803cdc:	d9814a17 	ldw	r6,1320(sp)
  803ce0:	d8814517 	ldw	r2,1300(sp)
  803ce4:	30a1c83a 	sub	r16,r6,r2
  803ce8:	0400290e 	bge	zero,r16,803d90 <___vfprintf_internal_r+0x4a4>
  803cec:	00800404 	movi	r2,16
  803cf0:	1404580e 	bge	r2,r16,804e54 <___vfprintf_internal_r+0x1568>
  803cf4:	dc800e17 	ldw	r18,56(sp)
  803cf8:	dc400d17 	ldw	r17,52(sp)
  803cfc:	1027883a 	mov	r19,r2
  803d00:	07002074 	movhi	fp,129
  803d04:	e706a884 	addi	fp,fp,6818
  803d08:	050001c4 	movi	r20,7
  803d0c:	00000306 	br	803d1c <___vfprintf_internal_r+0x430>
  803d10:	843ffc04 	addi	r16,r16,-16
  803d14:	ad400204 	addi	r21,r21,8
  803d18:	9c00130e 	bge	r19,r16,803d68 <___vfprintf_internal_r+0x47c>
  803d1c:	94800404 	addi	r18,r18,16
  803d20:	8c400044 	addi	r17,r17,1
  803d24:	af000015 	stw	fp,0(r21)
  803d28:	acc00115 	stw	r19,4(r21)
  803d2c:	dc800e15 	stw	r18,56(sp)
  803d30:	dc400d15 	stw	r17,52(sp)
  803d34:	a47ff60e 	bge	r20,r17,803d10 <___vfprintf_internal_r+0x424>
  803d38:	d9014f17 	ldw	r4,1340(sp)
  803d3c:	b00b883a 	mov	r5,r22
  803d40:	d9800c04 	addi	r6,sp,48
  803d44:	d9c15115 	stw	r7,1348(sp)
  803d48:	08038940 	call	803894 <__sprint_r>
  803d4c:	d9c15117 	ldw	r7,1348(sp)
  803d50:	10009e1e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  803d54:	843ffc04 	addi	r16,r16,-16
  803d58:	dc800e17 	ldw	r18,56(sp)
  803d5c:	dc400d17 	ldw	r17,52(sp)
  803d60:	dd401904 	addi	r21,sp,100
  803d64:	9c3fed16 	blt	r19,r16,803d1c <___vfprintf_internal_r+0x430>
  803d68:	9425883a 	add	r18,r18,r16
  803d6c:	8c400044 	addi	r17,r17,1
  803d70:	008001c4 	movi	r2,7
  803d74:	af000015 	stw	fp,0(r21)
  803d78:	ac000115 	stw	r16,4(r21)
  803d7c:	dc800e15 	stw	r18,56(sp)
  803d80:	dc400d15 	stw	r17,52(sp)
  803d84:	1441f516 	blt	r2,r17,80455c <___vfprintf_internal_r+0xc70>
  803d88:	ad400204 	addi	r21,r21,8
  803d8c:	00000206 	br	803d98 <___vfprintf_internal_r+0x4ac>
  803d90:	dc800e17 	ldw	r18,56(sp)
  803d94:	dc400d17 	ldw	r17,52(sp)
  803d98:	d8800407 	ldb	r2,16(sp)
  803d9c:	10000b26 	beq	r2,zero,803dcc <___vfprintf_internal_r+0x4e0>
  803da0:	00800044 	movi	r2,1
  803da4:	94800044 	addi	r18,r18,1
  803da8:	8c400044 	addi	r17,r17,1
  803dac:	a8800115 	stw	r2,4(r21)
  803db0:	d8c00404 	addi	r3,sp,16
  803db4:	008001c4 	movi	r2,7
  803db8:	a8c00015 	stw	r3,0(r21)
  803dbc:	dc800e15 	stw	r18,56(sp)
  803dc0:	dc400d15 	stw	r17,52(sp)
  803dc4:	1441da16 	blt	r2,r17,804530 <___vfprintf_internal_r+0xc44>
  803dc8:	ad400204 	addi	r21,r21,8
  803dcc:	d9015017 	ldw	r4,1344(sp)
  803dd0:	20000b1e 	bne	r4,zero,803e00 <___vfprintf_internal_r+0x514>
  803dd4:	d8800444 	addi	r2,sp,17
  803dd8:	94800084 	addi	r18,r18,2
  803ddc:	8c400044 	addi	r17,r17,1
  803de0:	a8800015 	stw	r2,0(r21)
  803de4:	00c00084 	movi	r3,2
  803de8:	008001c4 	movi	r2,7
  803dec:	a8c00115 	stw	r3,4(r21)
  803df0:	dc800e15 	stw	r18,56(sp)
  803df4:	dc400d15 	stw	r17,52(sp)
  803df8:	1441c216 	blt	r2,r17,804504 <___vfprintf_internal_r+0xc18>
  803dfc:	ad400204 	addi	r21,r21,8
  803e00:	d9414e17 	ldw	r5,1336(sp)
  803e04:	00802004 	movi	r2,128
  803e08:	2880b126 	beq	r5,r2,8040d0 <___vfprintf_internal_r+0x7e4>
  803e0c:	d8c14617 	ldw	r3,1304(sp)
  803e10:	19e1c83a 	sub	r16,r3,r7
  803e14:	0400260e 	bge	zero,r16,803eb0 <___vfprintf_internal_r+0x5c4>
  803e18:	00800404 	movi	r2,16
  803e1c:	1403c90e 	bge	r2,r16,804d44 <___vfprintf_internal_r+0x1458>
  803e20:	1027883a 	mov	r19,r2
  803e24:	07002074 	movhi	fp,129
  803e28:	e706a484 	addi	fp,fp,6802
  803e2c:	050001c4 	movi	r20,7
  803e30:	00000306 	br	803e40 <___vfprintf_internal_r+0x554>
  803e34:	843ffc04 	addi	r16,r16,-16
  803e38:	ad400204 	addi	r21,r21,8
  803e3c:	9c00130e 	bge	r19,r16,803e8c <___vfprintf_internal_r+0x5a0>
  803e40:	94800404 	addi	r18,r18,16
  803e44:	8c400044 	addi	r17,r17,1
  803e48:	af000015 	stw	fp,0(r21)
  803e4c:	acc00115 	stw	r19,4(r21)
  803e50:	dc800e15 	stw	r18,56(sp)
  803e54:	dc400d15 	stw	r17,52(sp)
  803e58:	a47ff60e 	bge	r20,r17,803e34 <___vfprintf_internal_r+0x548>
  803e5c:	d9014f17 	ldw	r4,1340(sp)
  803e60:	b00b883a 	mov	r5,r22
  803e64:	d9800c04 	addi	r6,sp,48
  803e68:	d9c15115 	stw	r7,1348(sp)
  803e6c:	08038940 	call	803894 <__sprint_r>
  803e70:	d9c15117 	ldw	r7,1348(sp)
  803e74:	1000551e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  803e78:	843ffc04 	addi	r16,r16,-16
  803e7c:	dc800e17 	ldw	r18,56(sp)
  803e80:	dc400d17 	ldw	r17,52(sp)
  803e84:	dd401904 	addi	r21,sp,100
  803e88:	9c3fed16 	blt	r19,r16,803e40 <___vfprintf_internal_r+0x554>
  803e8c:	9425883a 	add	r18,r18,r16
  803e90:	8c400044 	addi	r17,r17,1
  803e94:	008001c4 	movi	r2,7
  803e98:	af000015 	stw	fp,0(r21)
  803e9c:	ac000115 	stw	r16,4(r21)
  803ea0:	dc800e15 	stw	r18,56(sp)
  803ea4:	dc400d15 	stw	r17,52(sp)
  803ea8:	14418216 	blt	r2,r17,8044b4 <___vfprintf_internal_r+0xbc8>
  803eac:	ad400204 	addi	r21,r21,8
  803eb0:	d9014c17 	ldw	r4,1328(sp)
  803eb4:	2080400c 	andi	r2,r4,256
  803eb8:	10004a1e 	bne	r2,zero,803fe4 <___vfprintf_internal_r+0x6f8>
  803ebc:	d9414117 	ldw	r5,1284(sp)
  803ec0:	91e5883a 	add	r18,r18,r7
  803ec4:	8c400044 	addi	r17,r17,1
  803ec8:	008001c4 	movi	r2,7
  803ecc:	a9400015 	stw	r5,0(r21)
  803ed0:	a9c00115 	stw	r7,4(r21)
  803ed4:	dc800e15 	stw	r18,56(sp)
  803ed8:	dc400d15 	stw	r17,52(sp)
  803edc:	14416716 	blt	r2,r17,80447c <___vfprintf_internal_r+0xb90>
  803ee0:	a8c00204 	addi	r3,r21,8
  803ee4:	d9814c17 	ldw	r6,1328(sp)
  803ee8:	3080010c 	andi	r2,r6,4
  803eec:	10002826 	beq	r2,zero,803f90 <___vfprintf_internal_r+0x6a4>
  803ef0:	d8814a17 	ldw	r2,1320(sp)
  803ef4:	d9014517 	ldw	r4,1300(sp)
  803ef8:	1121c83a 	sub	r16,r2,r4
  803efc:	0400240e 	bge	zero,r16,803f90 <___vfprintf_internal_r+0x6a4>
  803f00:	00800404 	movi	r2,16
  803f04:	14044f0e 	bge	r2,r16,805044 <___vfprintf_internal_r+0x1758>
  803f08:	dc400d17 	ldw	r17,52(sp)
  803f0c:	1027883a 	mov	r19,r2
  803f10:	07002074 	movhi	fp,129
  803f14:	e706a884 	addi	fp,fp,6818
  803f18:	050001c4 	movi	r20,7
  803f1c:	00000306 	br	803f2c <___vfprintf_internal_r+0x640>
  803f20:	843ffc04 	addi	r16,r16,-16
  803f24:	18c00204 	addi	r3,r3,8
  803f28:	9c00110e 	bge	r19,r16,803f70 <___vfprintf_internal_r+0x684>
  803f2c:	94800404 	addi	r18,r18,16
  803f30:	8c400044 	addi	r17,r17,1
  803f34:	1f000015 	stw	fp,0(r3)
  803f38:	1cc00115 	stw	r19,4(r3)
  803f3c:	dc800e15 	stw	r18,56(sp)
  803f40:	dc400d15 	stw	r17,52(sp)
  803f44:	a47ff60e 	bge	r20,r17,803f20 <___vfprintf_internal_r+0x634>
  803f48:	d9014f17 	ldw	r4,1340(sp)
  803f4c:	b00b883a 	mov	r5,r22
  803f50:	d9800c04 	addi	r6,sp,48
  803f54:	08038940 	call	803894 <__sprint_r>
  803f58:	10001c1e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  803f5c:	843ffc04 	addi	r16,r16,-16
  803f60:	dc800e17 	ldw	r18,56(sp)
  803f64:	dc400d17 	ldw	r17,52(sp)
  803f68:	d8c01904 	addi	r3,sp,100
  803f6c:	9c3fef16 	blt	r19,r16,803f2c <___vfprintf_internal_r+0x640>
  803f70:	9425883a 	add	r18,r18,r16
  803f74:	8c400044 	addi	r17,r17,1
  803f78:	008001c4 	movi	r2,7
  803f7c:	1f000015 	stw	fp,0(r3)
  803f80:	1c000115 	stw	r16,4(r3)
  803f84:	dc800e15 	stw	r18,56(sp)
  803f88:	dc400d15 	stw	r17,52(sp)
  803f8c:	1440cb16 	blt	r2,r17,8042bc <___vfprintf_internal_r+0x9d0>
  803f90:	d8814a17 	ldw	r2,1320(sp)
  803f94:	d9414517 	ldw	r5,1300(sp)
  803f98:	1140010e 	bge	r2,r5,803fa0 <___vfprintf_internal_r+0x6b4>
  803f9c:	2805883a 	mov	r2,r5
  803fa0:	d9814b17 	ldw	r6,1324(sp)
  803fa4:	308d883a 	add	r6,r6,r2
  803fa8:	d9814b15 	stw	r6,1324(sp)
  803fac:	90013b1e 	bne	r18,zero,80449c <___vfprintf_internal_r+0xbb0>
  803fb0:	d9c14017 	ldw	r7,1280(sp)
  803fb4:	dd401904 	addi	r21,sp,100
  803fb8:	d8000d15 	stw	zero,52(sp)
  803fbc:	003ea706 	br	803a5c <___vfprintf_internal_r+0x170>
  803fc0:	d8800e17 	ldw	r2,56(sp)
  803fc4:	10053f1e 	bne	r2,zero,8054c4 <___vfprintf_internal_r+0x1bd8>
  803fc8:	d8000d15 	stw	zero,52(sp)
  803fcc:	b080030b 	ldhu	r2,12(r22)
  803fd0:	1080100c 	andi	r2,r2,64
  803fd4:	103e8726 	beq	r2,zero,8039f4 <___vfprintf_internal_r+0x108>
  803fd8:	00bfffc4 	movi	r2,-1
  803fdc:	d8814b15 	stw	r2,1324(sp)
  803fe0:	003e8406 	br	8039f4 <___vfprintf_internal_r+0x108>
  803fe4:	d9814d17 	ldw	r6,1332(sp)
  803fe8:	00801944 	movi	r2,101
  803fec:	11806e16 	blt	r2,r6,8041a8 <___vfprintf_internal_r+0x8bc>
  803ff0:	d9414717 	ldw	r5,1308(sp)
  803ff4:	00c00044 	movi	r3,1
  803ff8:	1943430e 	bge	r3,r5,804d08 <___vfprintf_internal_r+0x141c>
  803ffc:	d8814117 	ldw	r2,1284(sp)
  804000:	94800044 	addi	r18,r18,1
  804004:	8c400044 	addi	r17,r17,1
  804008:	a8800015 	stw	r2,0(r21)
  80400c:	008001c4 	movi	r2,7
  804010:	a8c00115 	stw	r3,4(r21)
  804014:	dc800e15 	stw	r18,56(sp)
  804018:	dc400d15 	stw	r17,52(sp)
  80401c:	1441ca16 	blt	r2,r17,804748 <___vfprintf_internal_r+0xe5c>
  804020:	a8c00204 	addi	r3,r21,8
  804024:	d9014917 	ldw	r4,1316(sp)
  804028:	00800044 	movi	r2,1
  80402c:	94800044 	addi	r18,r18,1
  804030:	8c400044 	addi	r17,r17,1
  804034:	18800115 	stw	r2,4(r3)
  804038:	008001c4 	movi	r2,7
  80403c:	19000015 	stw	r4,0(r3)
  804040:	dc800e15 	stw	r18,56(sp)
  804044:	dc400d15 	stw	r17,52(sp)
  804048:	1441b616 	blt	r2,r17,804724 <___vfprintf_internal_r+0xe38>
  80404c:	1cc00204 	addi	r19,r3,8
  804050:	d9014217 	ldw	r4,1288(sp)
  804054:	d9414317 	ldw	r5,1292(sp)
  804058:	000d883a 	mov	r6,zero
  80405c:	000f883a 	mov	r7,zero
  804060:	0802bb40 	call	802bb4 <__nedf2>
  804064:	10017426 	beq	r2,zero,804638 <___vfprintf_internal_r+0xd4c>
  804068:	d9414717 	ldw	r5,1308(sp)
  80406c:	d9814117 	ldw	r6,1284(sp)
  804070:	8c400044 	addi	r17,r17,1
  804074:	2c85883a 	add	r2,r5,r18
  804078:	14bfffc4 	addi	r18,r2,-1
  80407c:	28bfffc4 	addi	r2,r5,-1
  804080:	30c00044 	addi	r3,r6,1
  804084:	98800115 	stw	r2,4(r19)
  804088:	008001c4 	movi	r2,7
  80408c:	98c00015 	stw	r3,0(r19)
  804090:	dc800e15 	stw	r18,56(sp)
  804094:	dc400d15 	stw	r17,52(sp)
  804098:	14418e16 	blt	r2,r17,8046d4 <___vfprintf_internal_r+0xde8>
  80409c:	9cc00204 	addi	r19,r19,8
  8040a0:	d9414817 	ldw	r5,1312(sp)
  8040a4:	d8800804 	addi	r2,sp,32
  8040a8:	8c400044 	addi	r17,r17,1
  8040ac:	9165883a 	add	r18,r18,r5
  8040b0:	98800015 	stw	r2,0(r19)
  8040b4:	008001c4 	movi	r2,7
  8040b8:	99400115 	stw	r5,4(r19)
  8040bc:	dc800e15 	stw	r18,56(sp)
  8040c0:	dc400d15 	stw	r17,52(sp)
  8040c4:	1440ed16 	blt	r2,r17,80447c <___vfprintf_internal_r+0xb90>
  8040c8:	98c00204 	addi	r3,r19,8
  8040cc:	003f8506 	br	803ee4 <___vfprintf_internal_r+0x5f8>
  8040d0:	d9814a17 	ldw	r6,1320(sp)
  8040d4:	d8814517 	ldw	r2,1300(sp)
  8040d8:	30a1c83a 	sub	r16,r6,r2
  8040dc:	043f4b0e 	bge	zero,r16,803e0c <___vfprintf_internal_r+0x520>
  8040e0:	00800404 	movi	r2,16
  8040e4:	1404340e 	bge	r2,r16,8051b8 <___vfprintf_internal_r+0x18cc>
  8040e8:	1027883a 	mov	r19,r2
  8040ec:	07002074 	movhi	fp,129
  8040f0:	e706a484 	addi	fp,fp,6802
  8040f4:	050001c4 	movi	r20,7
  8040f8:	00000306 	br	804108 <___vfprintf_internal_r+0x81c>
  8040fc:	843ffc04 	addi	r16,r16,-16
  804100:	ad400204 	addi	r21,r21,8
  804104:	9c00130e 	bge	r19,r16,804154 <___vfprintf_internal_r+0x868>
  804108:	94800404 	addi	r18,r18,16
  80410c:	8c400044 	addi	r17,r17,1
  804110:	af000015 	stw	fp,0(r21)
  804114:	acc00115 	stw	r19,4(r21)
  804118:	dc800e15 	stw	r18,56(sp)
  80411c:	dc400d15 	stw	r17,52(sp)
  804120:	a47ff60e 	bge	r20,r17,8040fc <___vfprintf_internal_r+0x810>
  804124:	d9014f17 	ldw	r4,1340(sp)
  804128:	b00b883a 	mov	r5,r22
  80412c:	d9800c04 	addi	r6,sp,48
  804130:	d9c15115 	stw	r7,1348(sp)
  804134:	08038940 	call	803894 <__sprint_r>
  804138:	d9c15117 	ldw	r7,1348(sp)
  80413c:	103fa31e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  804140:	843ffc04 	addi	r16,r16,-16
  804144:	dc800e17 	ldw	r18,56(sp)
  804148:	dc400d17 	ldw	r17,52(sp)
  80414c:	dd401904 	addi	r21,sp,100
  804150:	9c3fed16 	blt	r19,r16,804108 <___vfprintf_internal_r+0x81c>
  804154:	9425883a 	add	r18,r18,r16
  804158:	8c400044 	addi	r17,r17,1
  80415c:	008001c4 	movi	r2,7
  804160:	af000015 	stw	fp,0(r21)
  804164:	ac000115 	stw	r16,4(r21)
  804168:	dc800e15 	stw	r18,56(sp)
  80416c:	dc400d15 	stw	r17,52(sp)
  804170:	14416116 	blt	r2,r17,8046f8 <___vfprintf_internal_r+0xe0c>
  804174:	ad400204 	addi	r21,r21,8
  804178:	003f2406 	br	803e0c <___vfprintf_internal_r+0x520>
  80417c:	d9014f17 	ldw	r4,1340(sp)
  804180:	080735c0 	call	80735c <__sinit>
  804184:	d9c15117 	ldw	r7,1348(sp)
  804188:	003def06 	br	803948 <___vfprintf_internal_r+0x5c>
  80418c:	d9014f17 	ldw	r4,1340(sp)
  804190:	b00b883a 	mov	r5,r22
  804194:	d9c15115 	stw	r7,1348(sp)
  804198:	08057bc0 	call	8057bc <__swsetup_r>
  80419c:	d9c15117 	ldw	r7,1348(sp)
  8041a0:	103dee26 	beq	r2,zero,80395c <___vfprintf_internal_r+0x70>
  8041a4:	003f8c06 	br	803fd8 <___vfprintf_internal_r+0x6ec>
  8041a8:	d9014217 	ldw	r4,1288(sp)
  8041ac:	d9414317 	ldw	r5,1292(sp)
  8041b0:	000d883a 	mov	r6,zero
  8041b4:	000f883a 	mov	r7,zero
  8041b8:	080b9580 	call	80b958 <__eqdf2>
  8041bc:	1000f21e 	bne	r2,zero,804588 <___vfprintf_internal_r+0xc9c>
  8041c0:	00802074 	movhi	r2,129
  8041c4:	10863304 	addi	r2,r2,6348
  8041c8:	94800044 	addi	r18,r18,1
  8041cc:	8c400044 	addi	r17,r17,1
  8041d0:	a8800015 	stw	r2,0(r21)
  8041d4:	00c00044 	movi	r3,1
  8041d8:	008001c4 	movi	r2,7
  8041dc:	a8c00115 	stw	r3,4(r21)
  8041e0:	dc800e15 	stw	r18,56(sp)
  8041e4:	dc400d15 	stw	r17,52(sp)
  8041e8:	1442fa16 	blt	r2,r17,804dd4 <___vfprintf_internal_r+0x14e8>
  8041ec:	a8c00204 	addi	r3,r21,8
  8041f0:	d8800517 	ldw	r2,20(sp)
  8041f4:	d9014717 	ldw	r4,1308(sp)
  8041f8:	11015c0e 	bge	r2,r4,80476c <___vfprintf_internal_r+0xe80>
  8041fc:	dc400d17 	ldw	r17,52(sp)
  804200:	d9814917 	ldw	r6,1316(sp)
  804204:	00800044 	movi	r2,1
  804208:	94800044 	addi	r18,r18,1
  80420c:	8c400044 	addi	r17,r17,1
  804210:	18800115 	stw	r2,4(r3)
  804214:	008001c4 	movi	r2,7
  804218:	19800015 	stw	r6,0(r3)
  80421c:	dc800e15 	stw	r18,56(sp)
  804220:	dc400d15 	stw	r17,52(sp)
  804224:	14431016 	blt	r2,r17,804e68 <___vfprintf_internal_r+0x157c>
  804228:	18c00204 	addi	r3,r3,8
  80422c:	d8814717 	ldw	r2,1308(sp)
  804230:	143fffc4 	addi	r16,r2,-1
  804234:	043f2b0e 	bge	zero,r16,803ee4 <___vfprintf_internal_r+0x5f8>
  804238:	00800404 	movi	r2,16
  80423c:	1402a20e 	bge	r2,r16,804cc8 <___vfprintf_internal_r+0x13dc>
  804240:	dc400d17 	ldw	r17,52(sp)
  804244:	1027883a 	mov	r19,r2
  804248:	07002074 	movhi	fp,129
  80424c:	e706a484 	addi	fp,fp,6802
  804250:	050001c4 	movi	r20,7
  804254:	00000306 	br	804264 <___vfprintf_internal_r+0x978>
  804258:	18c00204 	addi	r3,r3,8
  80425c:	843ffc04 	addi	r16,r16,-16
  804260:	9c029c0e 	bge	r19,r16,804cd4 <___vfprintf_internal_r+0x13e8>
  804264:	94800404 	addi	r18,r18,16
  804268:	8c400044 	addi	r17,r17,1
  80426c:	1f000015 	stw	fp,0(r3)
  804270:	1cc00115 	stw	r19,4(r3)
  804274:	dc800e15 	stw	r18,56(sp)
  804278:	dc400d15 	stw	r17,52(sp)
  80427c:	a47ff60e 	bge	r20,r17,804258 <___vfprintf_internal_r+0x96c>
  804280:	d9014f17 	ldw	r4,1340(sp)
  804284:	b00b883a 	mov	r5,r22
  804288:	d9800c04 	addi	r6,sp,48
  80428c:	08038940 	call	803894 <__sprint_r>
  804290:	103f4e1e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  804294:	dc800e17 	ldw	r18,56(sp)
  804298:	dc400d17 	ldw	r17,52(sp)
  80429c:	d8c01904 	addi	r3,sp,100
  8042a0:	003fee06 	br	80425c <___vfprintf_internal_r+0x970>
  8042a4:	d8802c0b 	ldhu	r2,176(sp)
  8042a8:	00ffffc4 	movi	r3,-1
  8042ac:	d8c14b15 	stw	r3,1324(sp)
  8042b0:	1080100c 	andi	r2,r2,64
  8042b4:	103dcc1e 	bne	r2,zero,8039e8 <___vfprintf_internal_r+0xfc>
  8042b8:	003dce06 	br	8039f4 <___vfprintf_internal_r+0x108>
  8042bc:	d9014f17 	ldw	r4,1340(sp)
  8042c0:	b00b883a 	mov	r5,r22
  8042c4:	d9800c04 	addi	r6,sp,48
  8042c8:	08038940 	call	803894 <__sprint_r>
  8042cc:	103f3f1e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  8042d0:	dc800e17 	ldw	r18,56(sp)
  8042d4:	003f2e06 	br	803f90 <___vfprintf_internal_r+0x6a4>
  8042d8:	d9414c17 	ldw	r5,1328(sp)
  8042dc:	29400414 	ori	r5,r5,16
  8042e0:	d9414c15 	stw	r5,1328(sp)
  8042e4:	d9814c17 	ldw	r6,1328(sp)
  8042e8:	3080080c 	andi	r2,r6,32
  8042ec:	10014f1e 	bne	r2,zero,80482c <___vfprintf_internal_r+0xf40>
  8042f0:	d8c14c17 	ldw	r3,1328(sp)
  8042f4:	1880040c 	andi	r2,r3,16
  8042f8:	1002ea1e 	bne	r2,zero,804ea4 <___vfprintf_internal_r+0x15b8>
  8042fc:	d9014c17 	ldw	r4,1328(sp)
  804300:	2080100c 	andi	r2,r4,64
  804304:	1002e726 	beq	r2,zero,804ea4 <___vfprintf_internal_r+0x15b8>
  804308:	3880000f 	ldh	r2,0(r7)
  80430c:	39c00104 	addi	r7,r7,4
  804310:	d9c14015 	stw	r7,1280(sp)
  804314:	1023d7fa 	srai	r17,r2,31
  804318:	1021883a 	mov	r16,r2
  80431c:	88037216 	blt	r17,zero,8050e8 <___vfprintf_internal_r+0x17fc>
  804320:	01000044 	movi	r4,1
  804324:	98000416 	blt	r19,zero,804338 <___vfprintf_internal_r+0xa4c>
  804328:	d8c14c17 	ldw	r3,1328(sp)
  80432c:	00bfdfc4 	movi	r2,-129
  804330:	1886703a 	and	r3,r3,r2
  804334:	d8c14c15 	stw	r3,1328(sp)
  804338:	8444b03a 	or	r2,r16,r17
  80433c:	1002261e 	bne	r2,zero,804bd8 <___vfprintf_internal_r+0x12ec>
  804340:	9802251e 	bne	r19,zero,804bd8 <___vfprintf_internal_r+0x12ec>
  804344:	20803fcc 	andi	r2,r4,255
  804348:	10029b26 	beq	r2,zero,804db8 <___vfprintf_internal_r+0x14cc>
  80434c:	d8c01904 	addi	r3,sp,100
  804350:	dd000f04 	addi	r20,sp,60
  804354:	d8c14115 	stw	r3,1284(sp)
  804358:	d8c14117 	ldw	r3,1284(sp)
  80435c:	dcc14515 	stw	r19,1300(sp)
  804360:	a0c5c83a 	sub	r2,r20,r3
  804364:	11c00a04 	addi	r7,r2,40
  804368:	99c0010e 	bge	r19,r7,804370 <___vfprintf_internal_r+0xa84>
  80436c:	d9c14515 	stw	r7,1300(sp)
  804370:	dcc14615 	stw	r19,1304(sp)
  804374:	d8800407 	ldb	r2,16(sp)
  804378:	103e4c26 	beq	r2,zero,803cac <___vfprintf_internal_r+0x3c0>
  80437c:	d8814517 	ldw	r2,1300(sp)
  804380:	10800044 	addi	r2,r2,1
  804384:	d8814515 	stw	r2,1300(sp)
  804388:	003e4806 	br	803cac <___vfprintf_internal_r+0x3c0>
  80438c:	d9814c17 	ldw	r6,1328(sp)
  804390:	31800414 	ori	r6,r6,16
  804394:	d9814c15 	stw	r6,1328(sp)
  804398:	d8c14c17 	ldw	r3,1328(sp)
  80439c:	1880080c 	andi	r2,r3,32
  8043a0:	1001271e 	bne	r2,zero,804840 <___vfprintf_internal_r+0xf54>
  8043a4:	d9414c17 	ldw	r5,1328(sp)
  8043a8:	2880040c 	andi	r2,r5,16
  8043ac:	1002b61e 	bne	r2,zero,804e88 <___vfprintf_internal_r+0x159c>
  8043b0:	d9814c17 	ldw	r6,1328(sp)
  8043b4:	3080100c 	andi	r2,r6,64
  8043b8:	1002b326 	beq	r2,zero,804e88 <___vfprintf_internal_r+0x159c>
  8043bc:	3c00000b 	ldhu	r16,0(r7)
  8043c0:	0009883a 	mov	r4,zero
  8043c4:	39c00104 	addi	r7,r7,4
  8043c8:	0023883a 	mov	r17,zero
  8043cc:	d9c14015 	stw	r7,1280(sp)
  8043d0:	d8000405 	stb	zero,16(sp)
  8043d4:	003fd306 	br	804324 <___vfprintf_internal_r+0xa38>
  8043d8:	d9014c17 	ldw	r4,1328(sp)
  8043dc:	21000414 	ori	r4,r4,16
  8043e0:	d9014c15 	stw	r4,1328(sp)
  8043e4:	d9414c17 	ldw	r5,1328(sp)
  8043e8:	2880080c 	andi	r2,r5,32
  8043ec:	1001081e 	bne	r2,zero,804810 <___vfprintf_internal_r+0xf24>
  8043f0:	d8c14c17 	ldw	r3,1328(sp)
  8043f4:	1880040c 	andi	r2,r3,16
  8043f8:	1002b01e 	bne	r2,zero,804ebc <___vfprintf_internal_r+0x15d0>
  8043fc:	d9014c17 	ldw	r4,1328(sp)
  804400:	2080100c 	andi	r2,r4,64
  804404:	1002ad26 	beq	r2,zero,804ebc <___vfprintf_internal_r+0x15d0>
  804408:	3c00000b 	ldhu	r16,0(r7)
  80440c:	01000044 	movi	r4,1
  804410:	39c00104 	addi	r7,r7,4
  804414:	0023883a 	mov	r17,zero
  804418:	d9c14015 	stw	r7,1280(sp)
  80441c:	d8000405 	stb	zero,16(sp)
  804420:	003fc006 	br	804324 <___vfprintf_internal_r+0xa38>
  804424:	d9014f17 	ldw	r4,1340(sp)
  804428:	b00b883a 	mov	r5,r22
  80442c:	d9800c04 	addi	r6,sp,48
  804430:	08038940 	call	803894 <__sprint_r>
  804434:	103ee51e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  804438:	dc800e17 	ldw	r18,56(sp)
  80443c:	d8c01904 	addi	r3,sp,100
  804440:	d9814c17 	ldw	r6,1328(sp)
  804444:	3080004c 	andi	r2,r6,1
  804448:	1005003a 	cmpeq	r2,r2,zero
  80444c:	103ea51e 	bne	r2,zero,803ee4 <___vfprintf_internal_r+0x5f8>
  804450:	00800044 	movi	r2,1
  804454:	dc400d17 	ldw	r17,52(sp)
  804458:	18800115 	stw	r2,4(r3)
  80445c:	d8814917 	ldw	r2,1316(sp)
  804460:	94800044 	addi	r18,r18,1
  804464:	8c400044 	addi	r17,r17,1
  804468:	18800015 	stw	r2,0(r3)
  80446c:	008001c4 	movi	r2,7
  804470:	dc800e15 	stw	r18,56(sp)
  804474:	dc400d15 	stw	r17,52(sp)
  804478:	14421e0e 	bge	r2,r17,804cf4 <___vfprintf_internal_r+0x1408>
  80447c:	d9014f17 	ldw	r4,1340(sp)
  804480:	b00b883a 	mov	r5,r22
  804484:	d9800c04 	addi	r6,sp,48
  804488:	08038940 	call	803894 <__sprint_r>
  80448c:	103ecf1e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  804490:	dc800e17 	ldw	r18,56(sp)
  804494:	d8c01904 	addi	r3,sp,100
  804498:	003e9206 	br	803ee4 <___vfprintf_internal_r+0x5f8>
  80449c:	d9014f17 	ldw	r4,1340(sp)
  8044a0:	b00b883a 	mov	r5,r22
  8044a4:	d9800c04 	addi	r6,sp,48
  8044a8:	08038940 	call	803894 <__sprint_r>
  8044ac:	103ec026 	beq	r2,zero,803fb0 <___vfprintf_internal_r+0x6c4>
  8044b0:	003ec606 	br	803fcc <___vfprintf_internal_r+0x6e0>
  8044b4:	d9014f17 	ldw	r4,1340(sp)
  8044b8:	b00b883a 	mov	r5,r22
  8044bc:	d9800c04 	addi	r6,sp,48
  8044c0:	d9c15115 	stw	r7,1348(sp)
  8044c4:	08038940 	call	803894 <__sprint_r>
  8044c8:	d9c15117 	ldw	r7,1348(sp)
  8044cc:	103ebf1e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  8044d0:	dc800e17 	ldw	r18,56(sp)
  8044d4:	dc400d17 	ldw	r17,52(sp)
  8044d8:	dd401904 	addi	r21,sp,100
  8044dc:	003e7406 	br	803eb0 <___vfprintf_internal_r+0x5c4>
  8044e0:	d9014f17 	ldw	r4,1340(sp)
  8044e4:	b00b883a 	mov	r5,r22
  8044e8:	d9800c04 	addi	r6,sp,48
  8044ec:	d9c15115 	stw	r7,1348(sp)
  8044f0:	08038940 	call	803894 <__sprint_r>
  8044f4:	d9c15117 	ldw	r7,1348(sp)
  8044f8:	103eb41e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  8044fc:	dd401904 	addi	r21,sp,100
  804500:	003d6d06 	br	803ab8 <___vfprintf_internal_r+0x1cc>
  804504:	d9014f17 	ldw	r4,1340(sp)
  804508:	b00b883a 	mov	r5,r22
  80450c:	d9800c04 	addi	r6,sp,48
  804510:	d9c15115 	stw	r7,1348(sp)
  804514:	08038940 	call	803894 <__sprint_r>
  804518:	d9c15117 	ldw	r7,1348(sp)
  80451c:	103eab1e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  804520:	dc800e17 	ldw	r18,56(sp)
  804524:	dc400d17 	ldw	r17,52(sp)
  804528:	dd401904 	addi	r21,sp,100
  80452c:	003e3406 	br	803e00 <___vfprintf_internal_r+0x514>
  804530:	d9014f17 	ldw	r4,1340(sp)
  804534:	b00b883a 	mov	r5,r22
  804538:	d9800c04 	addi	r6,sp,48
  80453c:	d9c15115 	stw	r7,1348(sp)
  804540:	08038940 	call	803894 <__sprint_r>
  804544:	d9c15117 	ldw	r7,1348(sp)
  804548:	103ea01e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  80454c:	dc800e17 	ldw	r18,56(sp)
  804550:	dc400d17 	ldw	r17,52(sp)
  804554:	dd401904 	addi	r21,sp,100
  804558:	003e1c06 	br	803dcc <___vfprintf_internal_r+0x4e0>
  80455c:	d9014f17 	ldw	r4,1340(sp)
  804560:	b00b883a 	mov	r5,r22
  804564:	d9800c04 	addi	r6,sp,48
  804568:	d9c15115 	stw	r7,1348(sp)
  80456c:	08038940 	call	803894 <__sprint_r>
  804570:	d9c15117 	ldw	r7,1348(sp)
  804574:	103e951e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  804578:	dc800e17 	ldw	r18,56(sp)
  80457c:	dc400d17 	ldw	r17,52(sp)
  804580:	dd401904 	addi	r21,sp,100
  804584:	003e0406 	br	803d98 <___vfprintf_internal_r+0x4ac>
  804588:	d9000517 	ldw	r4,20(sp)
  80458c:	0102520e 	bge	zero,r4,804ed8 <___vfprintf_internal_r+0x15ec>
  804590:	d9814717 	ldw	r6,1308(sp)
  804594:	21807a16 	blt	r4,r6,804780 <___vfprintf_internal_r+0xe94>
  804598:	d8814117 	ldw	r2,1284(sp)
  80459c:	91a5883a 	add	r18,r18,r6
  8045a0:	8c400044 	addi	r17,r17,1
  8045a4:	a8800015 	stw	r2,0(r21)
  8045a8:	008001c4 	movi	r2,7
  8045ac:	a9800115 	stw	r6,4(r21)
  8045b0:	dc800e15 	stw	r18,56(sp)
  8045b4:	dc400d15 	stw	r17,52(sp)
  8045b8:	1442f616 	blt	r2,r17,805194 <___vfprintf_internal_r+0x18a8>
  8045bc:	a8c00204 	addi	r3,r21,8
  8045c0:	d9414717 	ldw	r5,1308(sp)
  8045c4:	2161c83a 	sub	r16,r4,r5
  8045c8:	043f9d0e 	bge	zero,r16,804440 <___vfprintf_internal_r+0xb54>
  8045cc:	00800404 	movi	r2,16
  8045d0:	1402130e 	bge	r2,r16,804e20 <___vfprintf_internal_r+0x1534>
  8045d4:	dc400d17 	ldw	r17,52(sp)
  8045d8:	1027883a 	mov	r19,r2
  8045dc:	07002074 	movhi	fp,129
  8045e0:	e706a484 	addi	fp,fp,6802
  8045e4:	050001c4 	movi	r20,7
  8045e8:	00000306 	br	8045f8 <___vfprintf_internal_r+0xd0c>
  8045ec:	18c00204 	addi	r3,r3,8
  8045f0:	843ffc04 	addi	r16,r16,-16
  8045f4:	9c020d0e 	bge	r19,r16,804e2c <___vfprintf_internal_r+0x1540>
  8045f8:	94800404 	addi	r18,r18,16
  8045fc:	8c400044 	addi	r17,r17,1
  804600:	1f000015 	stw	fp,0(r3)
  804604:	1cc00115 	stw	r19,4(r3)
  804608:	dc800e15 	stw	r18,56(sp)
  80460c:	dc400d15 	stw	r17,52(sp)
  804610:	a47ff60e 	bge	r20,r17,8045ec <___vfprintf_internal_r+0xd00>
  804614:	d9014f17 	ldw	r4,1340(sp)
  804618:	b00b883a 	mov	r5,r22
  80461c:	d9800c04 	addi	r6,sp,48
  804620:	08038940 	call	803894 <__sprint_r>
  804624:	103e691e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  804628:	dc800e17 	ldw	r18,56(sp)
  80462c:	dc400d17 	ldw	r17,52(sp)
  804630:	d8c01904 	addi	r3,sp,100
  804634:	003fee06 	br	8045f0 <___vfprintf_internal_r+0xd04>
  804638:	d8814717 	ldw	r2,1308(sp)
  80463c:	143fffc4 	addi	r16,r2,-1
  804640:	043e970e 	bge	zero,r16,8040a0 <___vfprintf_internal_r+0x7b4>
  804644:	00800404 	movi	r2,16
  804648:	1400180e 	bge	r2,r16,8046ac <___vfprintf_internal_r+0xdc0>
  80464c:	1029883a 	mov	r20,r2
  804650:	07002074 	movhi	fp,129
  804654:	e706a484 	addi	fp,fp,6802
  804658:	054001c4 	movi	r21,7
  80465c:	00000306 	br	80466c <___vfprintf_internal_r+0xd80>
  804660:	9cc00204 	addi	r19,r19,8
  804664:	843ffc04 	addi	r16,r16,-16
  804668:	a400120e 	bge	r20,r16,8046b4 <___vfprintf_internal_r+0xdc8>
  80466c:	94800404 	addi	r18,r18,16
  804670:	8c400044 	addi	r17,r17,1
  804674:	9f000015 	stw	fp,0(r19)
  804678:	9d000115 	stw	r20,4(r19)
  80467c:	dc800e15 	stw	r18,56(sp)
  804680:	dc400d15 	stw	r17,52(sp)
  804684:	ac7ff60e 	bge	r21,r17,804660 <___vfprintf_internal_r+0xd74>
  804688:	d9014f17 	ldw	r4,1340(sp)
  80468c:	b00b883a 	mov	r5,r22
  804690:	d9800c04 	addi	r6,sp,48
  804694:	08038940 	call	803894 <__sprint_r>
  804698:	103e4c1e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  80469c:	dc800e17 	ldw	r18,56(sp)
  8046a0:	dc400d17 	ldw	r17,52(sp)
  8046a4:	dcc01904 	addi	r19,sp,100
  8046a8:	003fee06 	br	804664 <___vfprintf_internal_r+0xd78>
  8046ac:	07002074 	movhi	fp,129
  8046b0:	e706a484 	addi	fp,fp,6802
  8046b4:	9425883a 	add	r18,r18,r16
  8046b8:	8c400044 	addi	r17,r17,1
  8046bc:	008001c4 	movi	r2,7
  8046c0:	9f000015 	stw	fp,0(r19)
  8046c4:	9c000115 	stw	r16,4(r19)
  8046c8:	dc800e15 	stw	r18,56(sp)
  8046cc:	dc400d15 	stw	r17,52(sp)
  8046d0:	147e720e 	bge	r2,r17,80409c <___vfprintf_internal_r+0x7b0>
  8046d4:	d9014f17 	ldw	r4,1340(sp)
  8046d8:	b00b883a 	mov	r5,r22
  8046dc:	d9800c04 	addi	r6,sp,48
  8046e0:	08038940 	call	803894 <__sprint_r>
  8046e4:	103e391e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  8046e8:	dc800e17 	ldw	r18,56(sp)
  8046ec:	dc400d17 	ldw	r17,52(sp)
  8046f0:	dcc01904 	addi	r19,sp,100
  8046f4:	003e6a06 	br	8040a0 <___vfprintf_internal_r+0x7b4>
  8046f8:	d9014f17 	ldw	r4,1340(sp)
  8046fc:	b00b883a 	mov	r5,r22
  804700:	d9800c04 	addi	r6,sp,48
  804704:	d9c15115 	stw	r7,1348(sp)
  804708:	08038940 	call	803894 <__sprint_r>
  80470c:	d9c15117 	ldw	r7,1348(sp)
  804710:	103e2e1e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  804714:	dc800e17 	ldw	r18,56(sp)
  804718:	dc400d17 	ldw	r17,52(sp)
  80471c:	dd401904 	addi	r21,sp,100
  804720:	003dba06 	br	803e0c <___vfprintf_internal_r+0x520>
  804724:	d9014f17 	ldw	r4,1340(sp)
  804728:	b00b883a 	mov	r5,r22
  80472c:	d9800c04 	addi	r6,sp,48
  804730:	08038940 	call	803894 <__sprint_r>
  804734:	103e251e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  804738:	dc800e17 	ldw	r18,56(sp)
  80473c:	dc400d17 	ldw	r17,52(sp)
  804740:	dcc01904 	addi	r19,sp,100
  804744:	003e4206 	br	804050 <___vfprintf_internal_r+0x764>
  804748:	d9014f17 	ldw	r4,1340(sp)
  80474c:	b00b883a 	mov	r5,r22
  804750:	d9800c04 	addi	r6,sp,48
  804754:	08038940 	call	803894 <__sprint_r>
  804758:	103e1c1e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  80475c:	dc800e17 	ldw	r18,56(sp)
  804760:	dc400d17 	ldw	r17,52(sp)
  804764:	d8c01904 	addi	r3,sp,100
  804768:	003e2e06 	br	804024 <___vfprintf_internal_r+0x738>
  80476c:	d9414c17 	ldw	r5,1328(sp)
  804770:	2880004c 	andi	r2,r5,1
  804774:	1005003a 	cmpeq	r2,r2,zero
  804778:	103dda1e 	bne	r2,zero,803ee4 <___vfprintf_internal_r+0x5f8>
  80477c:	003e9f06 	br	8041fc <___vfprintf_internal_r+0x910>
  804780:	d8c14117 	ldw	r3,1284(sp)
  804784:	9125883a 	add	r18,r18,r4
  804788:	8c400044 	addi	r17,r17,1
  80478c:	008001c4 	movi	r2,7
  804790:	a8c00015 	stw	r3,0(r21)
  804794:	a9000115 	stw	r4,4(r21)
  804798:	dc800e15 	stw	r18,56(sp)
  80479c:	dc400d15 	stw	r17,52(sp)
  8047a0:	14426616 	blt	r2,r17,80513c <___vfprintf_internal_r+0x1850>
  8047a4:	a8c00204 	addi	r3,r21,8
  8047a8:	d9414917 	ldw	r5,1316(sp)
  8047ac:	00800044 	movi	r2,1
  8047b0:	94800044 	addi	r18,r18,1
  8047b4:	8c400044 	addi	r17,r17,1
  8047b8:	18800115 	stw	r2,4(r3)
  8047bc:	008001c4 	movi	r2,7
  8047c0:	19400015 	stw	r5,0(r3)
  8047c4:	dc800e15 	stw	r18,56(sp)
  8047c8:	dc400d15 	stw	r17,52(sp)
  8047cc:	2021883a 	mov	r16,r4
  8047d0:	14425016 	blt	r2,r17,805114 <___vfprintf_internal_r+0x1828>
  8047d4:	19400204 	addi	r5,r3,8
  8047d8:	d9814717 	ldw	r6,1308(sp)
  8047dc:	8c400044 	addi	r17,r17,1
  8047e0:	dc400d15 	stw	r17,52(sp)
  8047e4:	3107c83a 	sub	r3,r6,r4
  8047e8:	d9014117 	ldw	r4,1284(sp)
  8047ec:	90e5883a 	add	r18,r18,r3
  8047f0:	28c00115 	stw	r3,4(r5)
  8047f4:	8105883a 	add	r2,r16,r4
  8047f8:	28800015 	stw	r2,0(r5)
  8047fc:	008001c4 	movi	r2,7
  804800:	dc800e15 	stw	r18,56(sp)
  804804:	147f1d16 	blt	r2,r17,80447c <___vfprintf_internal_r+0xb90>
  804808:	28c00204 	addi	r3,r5,8
  80480c:	003db506 	br	803ee4 <___vfprintf_internal_r+0x5f8>
  804810:	3c000017 	ldw	r16,0(r7)
  804814:	3c400117 	ldw	r17,4(r7)
  804818:	39800204 	addi	r6,r7,8
  80481c:	01000044 	movi	r4,1
  804820:	d9814015 	stw	r6,1280(sp)
  804824:	d8000405 	stb	zero,16(sp)
  804828:	003ebe06 	br	804324 <___vfprintf_internal_r+0xa38>
  80482c:	3c000017 	ldw	r16,0(r7)
  804830:	3c400117 	ldw	r17,4(r7)
  804834:	38800204 	addi	r2,r7,8
  804838:	d8814015 	stw	r2,1280(sp)
  80483c:	003eb706 	br	80431c <___vfprintf_internal_r+0xa30>
  804840:	3c000017 	ldw	r16,0(r7)
  804844:	3c400117 	ldw	r17,4(r7)
  804848:	39000204 	addi	r4,r7,8
  80484c:	d9014015 	stw	r4,1280(sp)
  804850:	0009883a 	mov	r4,zero
  804854:	d8000405 	stb	zero,16(sp)
  804858:	003eb206 	br	804324 <___vfprintf_internal_r+0xa38>
  80485c:	38c00017 	ldw	r3,0(r7)
  804860:	39c00104 	addi	r7,r7,4
  804864:	d8c14a15 	stw	r3,1320(sp)
  804868:	1800d10e 	bge	r3,zero,804bb0 <___vfprintf_internal_r+0x12c4>
  80486c:	00c7c83a 	sub	r3,zero,r3
  804870:	d8c14a15 	stw	r3,1320(sp)
  804874:	d9014c17 	ldw	r4,1328(sp)
  804878:	b8c00007 	ldb	r3,0(r23)
  80487c:	21000114 	ori	r4,r4,4
  804880:	d9014c15 	stw	r4,1328(sp)
  804884:	003c9806 	br	803ae8 <___vfprintf_internal_r+0x1fc>
  804888:	d9814c17 	ldw	r6,1328(sp)
  80488c:	3080080c 	andi	r2,r6,32
  804890:	1001f026 	beq	r2,zero,805054 <___vfprintf_internal_r+0x1768>
  804894:	d9014b17 	ldw	r4,1324(sp)
  804898:	38800017 	ldw	r2,0(r7)
  80489c:	39c00104 	addi	r7,r7,4
  8048a0:	d9c14015 	stw	r7,1280(sp)
  8048a4:	2007d7fa 	srai	r3,r4,31
  8048a8:	d9c14017 	ldw	r7,1280(sp)
  8048ac:	11000015 	stw	r4,0(r2)
  8048b0:	10c00115 	stw	r3,4(r2)
  8048b4:	003c6906 	br	803a5c <___vfprintf_internal_r+0x170>
  8048b8:	b8c00007 	ldb	r3,0(r23)
  8048bc:	00801b04 	movi	r2,108
  8048c0:	18824f26 	beq	r3,r2,805200 <___vfprintf_internal_r+0x1914>
  8048c4:	d9414c17 	ldw	r5,1328(sp)
  8048c8:	29400414 	ori	r5,r5,16
  8048cc:	d9414c15 	stw	r5,1328(sp)
  8048d0:	003c8506 	br	803ae8 <___vfprintf_internal_r+0x1fc>
  8048d4:	d9814c17 	ldw	r6,1328(sp)
  8048d8:	b8c00007 	ldb	r3,0(r23)
  8048dc:	31800814 	ori	r6,r6,32
  8048e0:	d9814c15 	stw	r6,1328(sp)
  8048e4:	003c8006 	br	803ae8 <___vfprintf_internal_r+0x1fc>
  8048e8:	d8814c17 	ldw	r2,1328(sp)
  8048ec:	3c000017 	ldw	r16,0(r7)
  8048f0:	00c01e04 	movi	r3,120
  8048f4:	10800094 	ori	r2,r2,2
  8048f8:	d8814c15 	stw	r2,1328(sp)
  8048fc:	39c00104 	addi	r7,r7,4
  804900:	01402074 	movhi	r5,129
  804904:	29468e04 	addi	r5,r5,6712
  804908:	00800c04 	movi	r2,48
  80490c:	0023883a 	mov	r17,zero
  804910:	01000084 	movi	r4,2
  804914:	d9c14015 	stw	r7,1280(sp)
  804918:	d8c14d15 	stw	r3,1332(sp)
  80491c:	d9414415 	stw	r5,1296(sp)
  804920:	d8800445 	stb	r2,17(sp)
  804924:	d8c00485 	stb	r3,18(sp)
  804928:	d8000405 	stb	zero,16(sp)
  80492c:	003e7d06 	br	804324 <___vfprintf_internal_r+0xa38>
  804930:	d8814c17 	ldw	r2,1328(sp)
  804934:	b8c00007 	ldb	r3,0(r23)
  804938:	10801014 	ori	r2,r2,64
  80493c:	d8814c15 	stw	r2,1328(sp)
  804940:	003c6906 	br	803ae8 <___vfprintf_internal_r+0x1fc>
  804944:	d9414c17 	ldw	r5,1328(sp)
  804948:	2880020c 	andi	r2,r5,8
  80494c:	1001df26 	beq	r2,zero,8050cc <___vfprintf_internal_r+0x17e0>
  804950:	39800017 	ldw	r6,0(r7)
  804954:	38800204 	addi	r2,r7,8
  804958:	d8814015 	stw	r2,1280(sp)
  80495c:	d9814215 	stw	r6,1288(sp)
  804960:	39c00117 	ldw	r7,4(r7)
  804964:	d9c14315 	stw	r7,1292(sp)
  804968:	d9014217 	ldw	r4,1288(sp)
  80496c:	d9414317 	ldw	r5,1292(sp)
  804970:	080a28c0 	call	80a28c <__isinfd>
  804974:	10021726 	beq	r2,zero,8051d4 <___vfprintf_internal_r+0x18e8>
  804978:	d9014217 	ldw	r4,1288(sp)
  80497c:	d9414317 	ldw	r5,1292(sp)
  804980:	000d883a 	mov	r6,zero
  804984:	000f883a 	mov	r7,zero
  804988:	080baf00 	call	80baf0 <__ltdf2>
  80498c:	1002ca16 	blt	r2,zero,8054b8 <___vfprintf_internal_r+0x1bcc>
  804990:	d9414d17 	ldw	r5,1332(sp)
  804994:	008011c4 	movi	r2,71
  804998:	11420a16 	blt	r2,r5,8051c4 <___vfprintf_internal_r+0x18d8>
  80499c:	01802074 	movhi	r6,129
  8049a0:	31869304 	addi	r6,r6,6732
  8049a4:	d9814115 	stw	r6,1284(sp)
  8049a8:	d9014c17 	ldw	r4,1328(sp)
  8049ac:	00c000c4 	movi	r3,3
  8049b0:	00bfdfc4 	movi	r2,-129
  8049b4:	2088703a 	and	r4,r4,r2
  8049b8:	180f883a 	mov	r7,r3
  8049bc:	d8c14515 	stw	r3,1300(sp)
  8049c0:	d9014c15 	stw	r4,1328(sp)
  8049c4:	d8014615 	stw	zero,1304(sp)
  8049c8:	003e6a06 	br	804374 <___vfprintf_internal_r+0xa88>
  8049cc:	38800017 	ldw	r2,0(r7)
  8049d0:	00c00044 	movi	r3,1
  8049d4:	39c00104 	addi	r7,r7,4
  8049d8:	d9c14015 	stw	r7,1280(sp)
  8049dc:	d9000f04 	addi	r4,sp,60
  8049e0:	180f883a 	mov	r7,r3
  8049e4:	d8c14515 	stw	r3,1300(sp)
  8049e8:	d9014115 	stw	r4,1284(sp)
  8049ec:	d8800f05 	stb	r2,60(sp)
  8049f0:	d8000405 	stb	zero,16(sp)
  8049f4:	003cac06 	br	803ca8 <___vfprintf_internal_r+0x3bc>
  8049f8:	01402074 	movhi	r5,129
  8049fc:	29469904 	addi	r5,r5,6756
  804a00:	d9414415 	stw	r5,1296(sp)
  804a04:	d9814c17 	ldw	r6,1328(sp)
  804a08:	3080080c 	andi	r2,r6,32
  804a0c:	1000f926 	beq	r2,zero,804df4 <___vfprintf_internal_r+0x1508>
  804a10:	3c000017 	ldw	r16,0(r7)
  804a14:	3c400117 	ldw	r17,4(r7)
  804a18:	38800204 	addi	r2,r7,8
  804a1c:	d8814015 	stw	r2,1280(sp)
  804a20:	d9414c17 	ldw	r5,1328(sp)
  804a24:	2880004c 	andi	r2,r5,1
  804a28:	1005003a 	cmpeq	r2,r2,zero
  804a2c:	1000b31e 	bne	r2,zero,804cfc <___vfprintf_internal_r+0x1410>
  804a30:	8444b03a 	or	r2,r16,r17
  804a34:	1000b126 	beq	r2,zero,804cfc <___vfprintf_internal_r+0x1410>
  804a38:	d9814d17 	ldw	r6,1332(sp)
  804a3c:	29400094 	ori	r5,r5,2
  804a40:	00800c04 	movi	r2,48
  804a44:	01000084 	movi	r4,2
  804a48:	d9414c15 	stw	r5,1328(sp)
  804a4c:	d8800445 	stb	r2,17(sp)
  804a50:	d9800485 	stb	r6,18(sp)
  804a54:	d8000405 	stb	zero,16(sp)
  804a58:	003e3206 	br	804324 <___vfprintf_internal_r+0xa38>
  804a5c:	01802074 	movhi	r6,129
  804a60:	31868e04 	addi	r6,r6,6712
  804a64:	d9814415 	stw	r6,1296(sp)
  804a68:	003fe606 	br	804a04 <___vfprintf_internal_r+0x1118>
  804a6c:	00800ac4 	movi	r2,43
  804a70:	d8800405 	stb	r2,16(sp)
  804a74:	b8c00007 	ldb	r3,0(r23)
  804a78:	003c1b06 	br	803ae8 <___vfprintf_internal_r+0x1fc>
  804a7c:	d8814c17 	ldw	r2,1328(sp)
  804a80:	b8c00007 	ldb	r3,0(r23)
  804a84:	10800054 	ori	r2,r2,1
  804a88:	d8814c15 	stw	r2,1328(sp)
  804a8c:	003c1606 	br	803ae8 <___vfprintf_internal_r+0x1fc>
  804a90:	d8800407 	ldb	r2,16(sp)
  804a94:	1000461e 	bne	r2,zero,804bb0 <___vfprintf_internal_r+0x12c4>
  804a98:	00800804 	movi	r2,32
  804a9c:	d8800405 	stb	r2,16(sp)
  804aa0:	b8c00007 	ldb	r3,0(r23)
  804aa4:	003c1006 	br	803ae8 <___vfprintf_internal_r+0x1fc>
  804aa8:	d9814c17 	ldw	r6,1328(sp)
  804aac:	b8c00007 	ldb	r3,0(r23)
  804ab0:	31800214 	ori	r6,r6,8
  804ab4:	d9814c15 	stw	r6,1328(sp)
  804ab8:	003c0b06 	br	803ae8 <___vfprintf_internal_r+0x1fc>
  804abc:	0007883a 	mov	r3,zero
  804ac0:	01000244 	movi	r4,9
  804ac4:	188002a4 	muli	r2,r3,10
  804ac8:	b8c00007 	ldb	r3,0(r23)
  804acc:	d9814d17 	ldw	r6,1332(sp)
  804ad0:	bdc00044 	addi	r23,r23,1
  804ad4:	d8c14d15 	stw	r3,1332(sp)
  804ad8:	d9414d17 	ldw	r5,1332(sp)
  804adc:	3085883a 	add	r2,r6,r2
  804ae0:	10fff404 	addi	r3,r2,-48
  804ae4:	28bff404 	addi	r2,r5,-48
  804ae8:	20bff62e 	bgeu	r4,r2,804ac4 <___vfprintf_internal_r+0x11d8>
  804aec:	d8c14a15 	stw	r3,1320(sp)
  804af0:	003bff06 	br	803af0 <___vfprintf_internal_r+0x204>
  804af4:	d9414c17 	ldw	r5,1328(sp)
  804af8:	b8c00007 	ldb	r3,0(r23)
  804afc:	29402014 	ori	r5,r5,128
  804b00:	d9414c15 	stw	r5,1328(sp)
  804b04:	003bf806 	br	803ae8 <___vfprintf_internal_r+0x1fc>
  804b08:	b8c00007 	ldb	r3,0(r23)
  804b0c:	00800a84 	movi	r2,42
  804b10:	bdc00044 	addi	r23,r23,1
  804b14:	18831526 	beq	r3,r2,80576c <___vfprintf_internal_r+0x1e80>
  804b18:	d8c14d15 	stw	r3,1332(sp)
  804b1c:	18bff404 	addi	r2,r3,-48
  804b20:	00c00244 	movi	r3,9
  804b24:	18827836 	bltu	r3,r2,805508 <___vfprintf_internal_r+0x1c1c>
  804b28:	000d883a 	mov	r6,zero
  804b2c:	308002a4 	muli	r2,r6,10
  804b30:	b9800007 	ldb	r6,0(r23)
  804b34:	d9414d17 	ldw	r5,1332(sp)
  804b38:	bdc00044 	addi	r23,r23,1
  804b3c:	d9814d15 	stw	r6,1332(sp)
  804b40:	d9014d17 	ldw	r4,1332(sp)
  804b44:	1145883a 	add	r2,r2,r5
  804b48:	11bff404 	addi	r6,r2,-48
  804b4c:	20bff404 	addi	r2,r4,-48
  804b50:	18bff62e 	bgeu	r3,r2,804b2c <___vfprintf_internal_r+0x1240>
  804b54:	3027883a 	mov	r19,r6
  804b58:	303be50e 	bge	r6,zero,803af0 <___vfprintf_internal_r+0x204>
  804b5c:	04ffffc4 	movi	r19,-1
  804b60:	003be306 	br	803af0 <___vfprintf_internal_r+0x204>
  804b64:	d8000405 	stb	zero,16(sp)
  804b68:	39800017 	ldw	r6,0(r7)
  804b6c:	39c00104 	addi	r7,r7,4
  804b70:	d9c14015 	stw	r7,1280(sp)
  804b74:	d9814115 	stw	r6,1284(sp)
  804b78:	3001c926 	beq	r6,zero,8052a0 <___vfprintf_internal_r+0x19b4>
  804b7c:	98000e16 	blt	r19,zero,804bb8 <___vfprintf_internal_r+0x12cc>
  804b80:	d9014117 	ldw	r4,1284(sp)
  804b84:	000b883a 	mov	r5,zero
  804b88:	980d883a 	mov	r6,r19
  804b8c:	08089a80 	call	8089a8 <memchr>
  804b90:	10025926 	beq	r2,zero,8054f8 <___vfprintf_internal_r+0x1c0c>
  804b94:	d8c14117 	ldw	r3,1284(sp)
  804b98:	10cfc83a 	sub	r7,r2,r3
  804b9c:	99c19e16 	blt	r19,r7,805218 <___vfprintf_internal_r+0x192c>
  804ba0:	d9c14515 	stw	r7,1300(sp)
  804ba4:	38000916 	blt	r7,zero,804bcc <___vfprintf_internal_r+0x12e0>
  804ba8:	d8014615 	stw	zero,1304(sp)
  804bac:	003df106 	br	804374 <___vfprintf_internal_r+0xa88>
  804bb0:	b8c00007 	ldb	r3,0(r23)
  804bb4:	003bcc06 	br	803ae8 <___vfprintf_internal_r+0x1fc>
  804bb8:	d9014117 	ldw	r4,1284(sp)
  804bbc:	08038200 	call	803820 <strlen>
  804bc0:	d8814515 	stw	r2,1300(sp)
  804bc4:	100f883a 	mov	r7,r2
  804bc8:	103ff70e 	bge	r2,zero,804ba8 <___vfprintf_internal_r+0x12bc>
  804bcc:	d8014515 	stw	zero,1300(sp)
  804bd0:	d8014615 	stw	zero,1304(sp)
  804bd4:	003de706 	br	804374 <___vfprintf_internal_r+0xa88>
  804bd8:	20c03fcc 	andi	r3,r4,255
  804bdc:	00800044 	movi	r2,1
  804be0:	18802d26 	beq	r3,r2,804c98 <___vfprintf_internal_r+0x13ac>
  804be4:	18800e36 	bltu	r3,r2,804c20 <___vfprintf_internal_r+0x1334>
  804be8:	00800084 	movi	r2,2
  804bec:	1880fa26 	beq	r3,r2,804fd8 <___vfprintf_internal_r+0x16ec>
  804bf0:	01002074 	movhi	r4,129
  804bf4:	21069e04 	addi	r4,r4,6776
  804bf8:	08038200 	call	803820 <strlen>
  804bfc:	100f883a 	mov	r7,r2
  804c00:	dcc14515 	stw	r19,1300(sp)
  804c04:	9880010e 	bge	r19,r2,804c0c <___vfprintf_internal_r+0x1320>
  804c08:	d8814515 	stw	r2,1300(sp)
  804c0c:	00802074 	movhi	r2,129
  804c10:	10869e04 	addi	r2,r2,6776
  804c14:	dcc14615 	stw	r19,1304(sp)
  804c18:	d8814115 	stw	r2,1284(sp)
  804c1c:	003dd506 	br	804374 <___vfprintf_internal_r+0xa88>
  804c20:	d9401904 	addi	r5,sp,100
  804c24:	dd000f04 	addi	r20,sp,60
  804c28:	d9414115 	stw	r5,1284(sp)
  804c2c:	880a977a 	slli	r5,r17,29
  804c30:	d9814117 	ldw	r6,1284(sp)
  804c34:	8004d0fa 	srli	r2,r16,3
  804c38:	8806d0fa 	srli	r3,r17,3
  804c3c:	810001cc 	andi	r4,r16,7
  804c40:	2884b03a 	or	r2,r5,r2
  804c44:	31bfffc4 	addi	r6,r6,-1
  804c48:	21000c04 	addi	r4,r4,48
  804c4c:	d9814115 	stw	r6,1284(sp)
  804c50:	10cab03a 	or	r5,r2,r3
  804c54:	31000005 	stb	r4,0(r6)
  804c58:	1021883a 	mov	r16,r2
  804c5c:	1823883a 	mov	r17,r3
  804c60:	283ff21e 	bne	r5,zero,804c2c <___vfprintf_internal_r+0x1340>
  804c64:	d8c14c17 	ldw	r3,1328(sp)
  804c68:	1880004c 	andi	r2,r3,1
  804c6c:	1005003a 	cmpeq	r2,r2,zero
  804c70:	103db91e 	bne	r2,zero,804358 <___vfprintf_internal_r+0xa6c>
  804c74:	20803fcc 	andi	r2,r4,255
  804c78:	1080201c 	xori	r2,r2,128
  804c7c:	10bfe004 	addi	r2,r2,-128
  804c80:	00c00c04 	movi	r3,48
  804c84:	10fdb426 	beq	r2,r3,804358 <___vfprintf_internal_r+0xa6c>
  804c88:	31bfffc4 	addi	r6,r6,-1
  804c8c:	d9814115 	stw	r6,1284(sp)
  804c90:	30c00005 	stb	r3,0(r6)
  804c94:	003db006 	br	804358 <___vfprintf_internal_r+0xa6c>
  804c98:	88800068 	cmpgeui	r2,r17,1
  804c9c:	10002c1e 	bne	r2,zero,804d50 <___vfprintf_internal_r+0x1464>
  804ca0:	8800021e 	bne	r17,zero,804cac <___vfprintf_internal_r+0x13c0>
  804ca4:	00800244 	movi	r2,9
  804ca8:	14002936 	bltu	r2,r16,804d50 <___vfprintf_internal_r+0x1464>
  804cac:	d90018c4 	addi	r4,sp,99
  804cb0:	dd000f04 	addi	r20,sp,60
  804cb4:	d9014115 	stw	r4,1284(sp)
  804cb8:	d9014117 	ldw	r4,1284(sp)
  804cbc:	80800c04 	addi	r2,r16,48
  804cc0:	20800005 	stb	r2,0(r4)
  804cc4:	003da406 	br	804358 <___vfprintf_internal_r+0xa6c>
  804cc8:	dc400d17 	ldw	r17,52(sp)
  804ccc:	07002074 	movhi	fp,129
  804cd0:	e706a484 	addi	fp,fp,6802
  804cd4:	9425883a 	add	r18,r18,r16
  804cd8:	8c400044 	addi	r17,r17,1
  804cdc:	008001c4 	movi	r2,7
  804ce0:	1f000015 	stw	fp,0(r3)
  804ce4:	1c000115 	stw	r16,4(r3)
  804ce8:	dc800e15 	stw	r18,56(sp)
  804cec:	dc400d15 	stw	r17,52(sp)
  804cf0:	147de216 	blt	r2,r17,80447c <___vfprintf_internal_r+0xb90>
  804cf4:	18c00204 	addi	r3,r3,8
  804cf8:	003c7a06 	br	803ee4 <___vfprintf_internal_r+0x5f8>
  804cfc:	01000084 	movi	r4,2
  804d00:	d8000405 	stb	zero,16(sp)
  804d04:	003d8706 	br	804324 <___vfprintf_internal_r+0xa38>
  804d08:	d9814c17 	ldw	r6,1328(sp)
  804d0c:	30c4703a 	and	r2,r6,r3
  804d10:	1005003a 	cmpeq	r2,r2,zero
  804d14:	103cb926 	beq	r2,zero,803ffc <___vfprintf_internal_r+0x710>
  804d18:	d9014117 	ldw	r4,1284(sp)
  804d1c:	94800044 	addi	r18,r18,1
  804d20:	8c400044 	addi	r17,r17,1
  804d24:	008001c4 	movi	r2,7
  804d28:	a9000015 	stw	r4,0(r21)
  804d2c:	a8c00115 	stw	r3,4(r21)
  804d30:	dc800e15 	stw	r18,56(sp)
  804d34:	dc400d15 	stw	r17,52(sp)
  804d38:	147e6616 	blt	r2,r17,8046d4 <___vfprintf_internal_r+0xde8>
  804d3c:	acc00204 	addi	r19,r21,8
  804d40:	003cd706 	br	8040a0 <___vfprintf_internal_r+0x7b4>
  804d44:	07002074 	movhi	fp,129
  804d48:	e706a484 	addi	fp,fp,6802
  804d4c:	003c4f06 	br	803e8c <___vfprintf_internal_r+0x5a0>
  804d50:	dd000f04 	addi	r20,sp,60
  804d54:	dc801904 	addi	r18,sp,100
  804d58:	8009883a 	mov	r4,r16
  804d5c:	880b883a 	mov	r5,r17
  804d60:	01800284 	movi	r6,10
  804d64:	000f883a 	mov	r7,zero
  804d68:	080afe40 	call	80afe4 <__umoddi3>
  804d6c:	12000c04 	addi	r8,r2,48
  804d70:	94bfffc4 	addi	r18,r18,-1
  804d74:	8009883a 	mov	r4,r16
  804d78:	880b883a 	mov	r5,r17
  804d7c:	01800284 	movi	r6,10
  804d80:	000f883a 	mov	r7,zero
  804d84:	92000005 	stb	r8,0(r18)
  804d88:	080aa080 	call	80aa08 <__udivdi3>
  804d8c:	1009883a 	mov	r4,r2
  804d90:	1021883a 	mov	r16,r2
  804d94:	18800068 	cmpgeui	r2,r3,1
  804d98:	1823883a 	mov	r17,r3
  804d9c:	103fee1e 	bne	r2,zero,804d58 <___vfprintf_internal_r+0x146c>
  804da0:	1800021e 	bne	r3,zero,804dac <___vfprintf_internal_r+0x14c0>
  804da4:	00800244 	movi	r2,9
  804da8:	113feb36 	bltu	r2,r4,804d58 <___vfprintf_internal_r+0x146c>
  804dac:	94bfffc4 	addi	r18,r18,-1
  804db0:	dc814115 	stw	r18,1284(sp)
  804db4:	003fc006 	br	804cb8 <___vfprintf_internal_r+0x13cc>
  804db8:	d9014c17 	ldw	r4,1328(sp)
  804dbc:	2080004c 	andi	r2,r4,1
  804dc0:	10009a1e 	bne	r2,zero,80502c <___vfprintf_internal_r+0x1740>
  804dc4:	d9401904 	addi	r5,sp,100
  804dc8:	dd000f04 	addi	r20,sp,60
  804dcc:	d9414115 	stw	r5,1284(sp)
  804dd0:	003d6106 	br	804358 <___vfprintf_internal_r+0xa6c>
  804dd4:	d9014f17 	ldw	r4,1340(sp)
  804dd8:	b00b883a 	mov	r5,r22
  804ddc:	d9800c04 	addi	r6,sp,48
  804de0:	08038940 	call	803894 <__sprint_r>
  804de4:	103c791e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  804de8:	dc800e17 	ldw	r18,56(sp)
  804dec:	d8c01904 	addi	r3,sp,100
  804df0:	003cff06 	br	8041f0 <___vfprintf_internal_r+0x904>
  804df4:	d8c14c17 	ldw	r3,1328(sp)
  804df8:	1880040c 	andi	r2,r3,16
  804dfc:	1000711e 	bne	r2,zero,804fc4 <___vfprintf_internal_r+0x16d8>
  804e00:	d9014c17 	ldw	r4,1328(sp)
  804e04:	2080100c 	andi	r2,r4,64
  804e08:	10006e26 	beq	r2,zero,804fc4 <___vfprintf_internal_r+0x16d8>
  804e0c:	3c00000b 	ldhu	r16,0(r7)
  804e10:	0023883a 	mov	r17,zero
  804e14:	39c00104 	addi	r7,r7,4
  804e18:	d9c14015 	stw	r7,1280(sp)
  804e1c:	003f0006 	br	804a20 <___vfprintf_internal_r+0x1134>
  804e20:	dc400d17 	ldw	r17,52(sp)
  804e24:	07002074 	movhi	fp,129
  804e28:	e706a484 	addi	fp,fp,6802
  804e2c:	9425883a 	add	r18,r18,r16
  804e30:	8c400044 	addi	r17,r17,1
  804e34:	008001c4 	movi	r2,7
  804e38:	1f000015 	stw	fp,0(r3)
  804e3c:	1c000115 	stw	r16,4(r3)
  804e40:	dc800e15 	stw	r18,56(sp)
  804e44:	dc400d15 	stw	r17,52(sp)
  804e48:	147d7616 	blt	r2,r17,804424 <___vfprintf_internal_r+0xb38>
  804e4c:	18c00204 	addi	r3,r3,8
  804e50:	003d7b06 	br	804440 <___vfprintf_internal_r+0xb54>
  804e54:	dc800e17 	ldw	r18,56(sp)
  804e58:	dc400d17 	ldw	r17,52(sp)
  804e5c:	07002074 	movhi	fp,129
  804e60:	e706a884 	addi	fp,fp,6818
  804e64:	003bc006 	br	803d68 <___vfprintf_internal_r+0x47c>
  804e68:	d9014f17 	ldw	r4,1340(sp)
  804e6c:	b00b883a 	mov	r5,r22
  804e70:	d9800c04 	addi	r6,sp,48
  804e74:	08038940 	call	803894 <__sprint_r>
  804e78:	103c541e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  804e7c:	dc800e17 	ldw	r18,56(sp)
  804e80:	d8c01904 	addi	r3,sp,100
  804e84:	003ce906 	br	80422c <___vfprintf_internal_r+0x940>
  804e88:	3c000017 	ldw	r16,0(r7)
  804e8c:	0009883a 	mov	r4,zero
  804e90:	39c00104 	addi	r7,r7,4
  804e94:	0023883a 	mov	r17,zero
  804e98:	d9c14015 	stw	r7,1280(sp)
  804e9c:	d8000405 	stb	zero,16(sp)
  804ea0:	003d2006 	br	804324 <___vfprintf_internal_r+0xa38>
  804ea4:	38800017 	ldw	r2,0(r7)
  804ea8:	39c00104 	addi	r7,r7,4
  804eac:	d9c14015 	stw	r7,1280(sp)
  804eb0:	1023d7fa 	srai	r17,r2,31
  804eb4:	1021883a 	mov	r16,r2
  804eb8:	003d1806 	br	80431c <___vfprintf_internal_r+0xa30>
  804ebc:	3c000017 	ldw	r16,0(r7)
  804ec0:	01000044 	movi	r4,1
  804ec4:	39c00104 	addi	r7,r7,4
  804ec8:	0023883a 	mov	r17,zero
  804ecc:	d9c14015 	stw	r7,1280(sp)
  804ed0:	d8000405 	stb	zero,16(sp)
  804ed4:	003d1306 	br	804324 <___vfprintf_internal_r+0xa38>
  804ed8:	00802074 	movhi	r2,129
  804edc:	10863304 	addi	r2,r2,6348
  804ee0:	94800044 	addi	r18,r18,1
  804ee4:	8c400044 	addi	r17,r17,1
  804ee8:	a8800015 	stw	r2,0(r21)
  804eec:	00c00044 	movi	r3,1
  804ef0:	008001c4 	movi	r2,7
  804ef4:	a8c00115 	stw	r3,4(r21)
  804ef8:	dc800e15 	stw	r18,56(sp)
  804efc:	dc400d15 	stw	r17,52(sp)
  804f00:	1440ca16 	blt	r2,r17,80522c <___vfprintf_internal_r+0x1940>
  804f04:	a8c00204 	addi	r3,r21,8
  804f08:	2000061e 	bne	r4,zero,804f24 <___vfprintf_internal_r+0x1638>
  804f0c:	d9414717 	ldw	r5,1308(sp)
  804f10:	2800041e 	bne	r5,zero,804f24 <___vfprintf_internal_r+0x1638>
  804f14:	d9814c17 	ldw	r6,1328(sp)
  804f18:	3080004c 	andi	r2,r6,1
  804f1c:	1005003a 	cmpeq	r2,r2,zero
  804f20:	103bf01e 	bne	r2,zero,803ee4 <___vfprintf_internal_r+0x5f8>
  804f24:	00800044 	movi	r2,1
  804f28:	dc400d17 	ldw	r17,52(sp)
  804f2c:	18800115 	stw	r2,4(r3)
  804f30:	d8814917 	ldw	r2,1316(sp)
  804f34:	94800044 	addi	r18,r18,1
  804f38:	8c400044 	addi	r17,r17,1
  804f3c:	18800015 	stw	r2,0(r3)
  804f40:	008001c4 	movi	r2,7
  804f44:	dc800e15 	stw	r18,56(sp)
  804f48:	dc400d15 	stw	r17,52(sp)
  804f4c:	1440ca16 	blt	r2,r17,805278 <___vfprintf_internal_r+0x198c>
  804f50:	18c00204 	addi	r3,r3,8
  804f54:	0121c83a 	sub	r16,zero,r4
  804f58:	0400500e 	bge	zero,r16,80509c <___vfprintf_internal_r+0x17b0>
  804f5c:	00800404 	movi	r2,16
  804f60:	1400800e 	bge	r2,r16,805164 <___vfprintf_internal_r+0x1878>
  804f64:	1027883a 	mov	r19,r2
  804f68:	07002074 	movhi	fp,129
  804f6c:	e706a484 	addi	fp,fp,6802
  804f70:	050001c4 	movi	r20,7
  804f74:	00000306 	br	804f84 <___vfprintf_internal_r+0x1698>
  804f78:	18c00204 	addi	r3,r3,8
  804f7c:	843ffc04 	addi	r16,r16,-16
  804f80:	9c007a0e 	bge	r19,r16,80516c <___vfprintf_internal_r+0x1880>
  804f84:	94800404 	addi	r18,r18,16
  804f88:	8c400044 	addi	r17,r17,1
  804f8c:	1f000015 	stw	fp,0(r3)
  804f90:	1cc00115 	stw	r19,4(r3)
  804f94:	dc800e15 	stw	r18,56(sp)
  804f98:	dc400d15 	stw	r17,52(sp)
  804f9c:	a47ff60e 	bge	r20,r17,804f78 <___vfprintf_internal_r+0x168c>
  804fa0:	d9014f17 	ldw	r4,1340(sp)
  804fa4:	b00b883a 	mov	r5,r22
  804fa8:	d9800c04 	addi	r6,sp,48
  804fac:	08038940 	call	803894 <__sprint_r>
  804fb0:	103c061e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  804fb4:	dc800e17 	ldw	r18,56(sp)
  804fb8:	dc400d17 	ldw	r17,52(sp)
  804fbc:	d8c01904 	addi	r3,sp,100
  804fc0:	003fee06 	br	804f7c <___vfprintf_internal_r+0x1690>
  804fc4:	3c000017 	ldw	r16,0(r7)
  804fc8:	0023883a 	mov	r17,zero
  804fcc:	39c00104 	addi	r7,r7,4
  804fd0:	d9c14015 	stw	r7,1280(sp)
  804fd4:	003e9206 	br	804a20 <___vfprintf_internal_r+0x1134>
  804fd8:	d9401904 	addi	r5,sp,100
  804fdc:	dd000f04 	addi	r20,sp,60
  804fe0:	d9414115 	stw	r5,1284(sp)
  804fe4:	d9814417 	ldw	r6,1296(sp)
  804fe8:	880a973a 	slli	r5,r17,28
  804fec:	8004d13a 	srli	r2,r16,4
  804ff0:	810003cc 	andi	r4,r16,15
  804ff4:	3109883a 	add	r4,r6,r4
  804ff8:	2884b03a 	or	r2,r5,r2
  804ffc:	21400003 	ldbu	r5,0(r4)
  805000:	d9014117 	ldw	r4,1284(sp)
  805004:	8806d13a 	srli	r3,r17,4
  805008:	1021883a 	mov	r16,r2
  80500c:	213fffc4 	addi	r4,r4,-1
  805010:	d9014115 	stw	r4,1284(sp)
  805014:	d9814117 	ldw	r6,1284(sp)
  805018:	10c8b03a 	or	r4,r2,r3
  80501c:	1823883a 	mov	r17,r3
  805020:	31400005 	stb	r5,0(r6)
  805024:	203fef1e 	bne	r4,zero,804fe4 <___vfprintf_internal_r+0x16f8>
  805028:	003ccb06 	br	804358 <___vfprintf_internal_r+0xa6c>
  80502c:	00800c04 	movi	r2,48
  805030:	d98018c4 	addi	r6,sp,99
  805034:	dd000f04 	addi	r20,sp,60
  805038:	d88018c5 	stb	r2,99(sp)
  80503c:	d9814115 	stw	r6,1284(sp)
  805040:	003cc506 	br	804358 <___vfprintf_internal_r+0xa6c>
  805044:	dc400d17 	ldw	r17,52(sp)
  805048:	07002074 	movhi	fp,129
  80504c:	e706a884 	addi	fp,fp,6818
  805050:	003bc706 	br	803f70 <___vfprintf_internal_r+0x684>
  805054:	d9414c17 	ldw	r5,1328(sp)
  805058:	2880040c 	andi	r2,r5,16
  80505c:	10007c26 	beq	r2,zero,805250 <___vfprintf_internal_r+0x1964>
  805060:	38800017 	ldw	r2,0(r7)
  805064:	39c00104 	addi	r7,r7,4
  805068:	d9c14015 	stw	r7,1280(sp)
  80506c:	d9814b17 	ldw	r6,1324(sp)
  805070:	d9c14017 	ldw	r7,1280(sp)
  805074:	11800015 	stw	r6,0(r2)
  805078:	003a7806 	br	803a5c <___vfprintf_internal_r+0x170>
  80507c:	d9014f17 	ldw	r4,1340(sp)
  805080:	b00b883a 	mov	r5,r22
  805084:	d9800c04 	addi	r6,sp,48
  805088:	08038940 	call	803894 <__sprint_r>
  80508c:	103bcf1e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  805090:	dc800e17 	ldw	r18,56(sp)
  805094:	dc400d17 	ldw	r17,52(sp)
  805098:	d8c01904 	addi	r3,sp,100
  80509c:	d9014717 	ldw	r4,1308(sp)
  8050a0:	d9414117 	ldw	r5,1284(sp)
  8050a4:	8c400044 	addi	r17,r17,1
  8050a8:	9125883a 	add	r18,r18,r4
  8050ac:	008001c4 	movi	r2,7
  8050b0:	19400015 	stw	r5,0(r3)
  8050b4:	19000115 	stw	r4,4(r3)
  8050b8:	dc800e15 	stw	r18,56(sp)
  8050bc:	dc400d15 	stw	r17,52(sp)
  8050c0:	147cee16 	blt	r2,r17,80447c <___vfprintf_internal_r+0xb90>
  8050c4:	18c00204 	addi	r3,r3,8
  8050c8:	003b8606 	br	803ee4 <___vfprintf_internal_r+0x5f8>
  8050cc:	38c00017 	ldw	r3,0(r7)
  8050d0:	39000204 	addi	r4,r7,8
  8050d4:	d9014015 	stw	r4,1280(sp)
  8050d8:	d8c14215 	stw	r3,1288(sp)
  8050dc:	39c00117 	ldw	r7,4(r7)
  8050e0:	d9c14315 	stw	r7,1292(sp)
  8050e4:	003e2006 	br	804968 <___vfprintf_internal_r+0x107c>
  8050e8:	0005883a 	mov	r2,zero
  8050ec:	1409c83a 	sub	r4,r2,r16
  8050f0:	1105803a 	cmpltu	r2,r2,r4
  8050f4:	044bc83a 	sub	r5,zero,r17
  8050f8:	2885c83a 	sub	r2,r5,r2
  8050fc:	2021883a 	mov	r16,r4
  805100:	1023883a 	mov	r17,r2
  805104:	01000044 	movi	r4,1
  805108:	00800b44 	movi	r2,45
  80510c:	d8800405 	stb	r2,16(sp)
  805110:	003c8406 	br	804324 <___vfprintf_internal_r+0xa38>
  805114:	d9014f17 	ldw	r4,1340(sp)
  805118:	b00b883a 	mov	r5,r22
  80511c:	d9800c04 	addi	r6,sp,48
  805120:	08038940 	call	803894 <__sprint_r>
  805124:	103ba91e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  805128:	dc800e17 	ldw	r18,56(sp)
  80512c:	dc400d17 	ldw	r17,52(sp)
  805130:	d9000517 	ldw	r4,20(sp)
  805134:	d9401904 	addi	r5,sp,100
  805138:	003da706 	br	8047d8 <___vfprintf_internal_r+0xeec>
  80513c:	d9014f17 	ldw	r4,1340(sp)
  805140:	b00b883a 	mov	r5,r22
  805144:	d9800c04 	addi	r6,sp,48
  805148:	08038940 	call	803894 <__sprint_r>
  80514c:	103b9f1e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  805150:	dc800e17 	ldw	r18,56(sp)
  805154:	dc400d17 	ldw	r17,52(sp)
  805158:	d9000517 	ldw	r4,20(sp)
  80515c:	d8c01904 	addi	r3,sp,100
  805160:	003d9106 	br	8047a8 <___vfprintf_internal_r+0xebc>
  805164:	07002074 	movhi	fp,129
  805168:	e706a484 	addi	fp,fp,6802
  80516c:	9425883a 	add	r18,r18,r16
  805170:	8c400044 	addi	r17,r17,1
  805174:	008001c4 	movi	r2,7
  805178:	1f000015 	stw	fp,0(r3)
  80517c:	1c000115 	stw	r16,4(r3)
  805180:	dc800e15 	stw	r18,56(sp)
  805184:	dc400d15 	stw	r17,52(sp)
  805188:	147fbc16 	blt	r2,r17,80507c <___vfprintf_internal_r+0x1790>
  80518c:	18c00204 	addi	r3,r3,8
  805190:	003fc206 	br	80509c <___vfprintf_internal_r+0x17b0>
  805194:	d9014f17 	ldw	r4,1340(sp)
  805198:	b00b883a 	mov	r5,r22
  80519c:	d9800c04 	addi	r6,sp,48
  8051a0:	08038940 	call	803894 <__sprint_r>
  8051a4:	103b891e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  8051a8:	dc800e17 	ldw	r18,56(sp)
  8051ac:	d9000517 	ldw	r4,20(sp)
  8051b0:	d8c01904 	addi	r3,sp,100
  8051b4:	003d0206 	br	8045c0 <___vfprintf_internal_r+0xcd4>
  8051b8:	07002074 	movhi	fp,129
  8051bc:	e706a484 	addi	fp,fp,6802
  8051c0:	003be406 	br	804154 <___vfprintf_internal_r+0x868>
  8051c4:	00802074 	movhi	r2,129
  8051c8:	10869404 	addi	r2,r2,6736
  8051cc:	d8814115 	stw	r2,1284(sp)
  8051d0:	003df506 	br	8049a8 <___vfprintf_internal_r+0x10bc>
  8051d4:	d9014217 	ldw	r4,1288(sp)
  8051d8:	d9414317 	ldw	r5,1292(sp)
  8051dc:	080a2cc0 	call	80a2cc <__isnand>
  8051e0:	10003926 	beq	r2,zero,8052c8 <___vfprintf_internal_r+0x19dc>
  8051e4:	d9414d17 	ldw	r5,1332(sp)
  8051e8:	008011c4 	movi	r2,71
  8051ec:	1140ce16 	blt	r2,r5,805528 <___vfprintf_internal_r+0x1c3c>
  8051f0:	01802074 	movhi	r6,129
  8051f4:	31869504 	addi	r6,r6,6740
  8051f8:	d9814115 	stw	r6,1284(sp)
  8051fc:	003dea06 	br	8049a8 <___vfprintf_internal_r+0x10bc>
  805200:	d9014c17 	ldw	r4,1328(sp)
  805204:	bdc00044 	addi	r23,r23,1
  805208:	b8c00007 	ldb	r3,0(r23)
  80520c:	21000814 	ori	r4,r4,32
  805210:	d9014c15 	stw	r4,1328(sp)
  805214:	003a3406 	br	803ae8 <___vfprintf_internal_r+0x1fc>
  805218:	dcc14515 	stw	r19,1300(sp)
  80521c:	98011016 	blt	r19,zero,805660 <___vfprintf_internal_r+0x1d74>
  805220:	980f883a 	mov	r7,r19
  805224:	d8014615 	stw	zero,1304(sp)
  805228:	003c5206 	br	804374 <___vfprintf_internal_r+0xa88>
  80522c:	d9014f17 	ldw	r4,1340(sp)
  805230:	b00b883a 	mov	r5,r22
  805234:	d9800c04 	addi	r6,sp,48
  805238:	08038940 	call	803894 <__sprint_r>
  80523c:	103b631e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  805240:	dc800e17 	ldw	r18,56(sp)
  805244:	d9000517 	ldw	r4,20(sp)
  805248:	d8c01904 	addi	r3,sp,100
  80524c:	003f2e06 	br	804f08 <___vfprintf_internal_r+0x161c>
  805250:	d8c14c17 	ldw	r3,1328(sp)
  805254:	1880100c 	andi	r2,r3,64
  805258:	1000a026 	beq	r2,zero,8054dc <___vfprintf_internal_r+0x1bf0>
  80525c:	38800017 	ldw	r2,0(r7)
  805260:	39c00104 	addi	r7,r7,4
  805264:	d9c14015 	stw	r7,1280(sp)
  805268:	d9014b17 	ldw	r4,1324(sp)
  80526c:	d9c14017 	ldw	r7,1280(sp)
  805270:	1100000d 	sth	r4,0(r2)
  805274:	0039f906 	br	803a5c <___vfprintf_internal_r+0x170>
  805278:	d9014f17 	ldw	r4,1340(sp)
  80527c:	b00b883a 	mov	r5,r22
  805280:	d9800c04 	addi	r6,sp,48
  805284:	08038940 	call	803894 <__sprint_r>
  805288:	103b501e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  80528c:	dc800e17 	ldw	r18,56(sp)
  805290:	dc400d17 	ldw	r17,52(sp)
  805294:	d9000517 	ldw	r4,20(sp)
  805298:	d8c01904 	addi	r3,sp,100
  80529c:	003f2d06 	br	804f54 <___vfprintf_internal_r+0x1668>
  8052a0:	00800184 	movi	r2,6
  8052a4:	14c09a36 	bltu	r2,r19,805510 <___vfprintf_internal_r+0x1c24>
  8052a8:	dcc14515 	stw	r19,1300(sp)
  8052ac:	9800010e 	bge	r19,zero,8052b4 <___vfprintf_internal_r+0x19c8>
  8052b0:	d8014515 	stw	zero,1300(sp)
  8052b4:	00802074 	movhi	r2,129
  8052b8:	10869704 	addi	r2,r2,6748
  8052bc:	980f883a 	mov	r7,r19
  8052c0:	d8814115 	stw	r2,1284(sp)
  8052c4:	003a7806 	br	803ca8 <___vfprintf_internal_r+0x3bc>
  8052c8:	00bfffc4 	movi	r2,-1
  8052cc:	9880e226 	beq	r19,r2,805658 <___vfprintf_internal_r+0x1d6c>
  8052d0:	d9414d17 	ldw	r5,1332(sp)
  8052d4:	008019c4 	movi	r2,103
  8052d8:	2880dc26 	beq	r5,r2,80564c <___vfprintf_internal_r+0x1d60>
  8052dc:	008011c4 	movi	r2,71
  8052e0:	2880da26 	beq	r5,r2,80564c <___vfprintf_internal_r+0x1d60>
  8052e4:	d9414c17 	ldw	r5,1328(sp)
  8052e8:	d9014317 	ldw	r4,1292(sp)
  8052ec:	d9814217 	ldw	r6,1288(sp)
  8052f0:	29404014 	ori	r5,r5,256
  8052f4:	d9414c15 	stw	r5,1328(sp)
  8052f8:	2000cc16 	blt	r4,zero,80562c <___vfprintf_internal_r+0x1d40>
  8052fc:	3021883a 	mov	r16,r6
  805300:	2023883a 	mov	r17,r4
  805304:	0039883a 	mov	fp,zero
  805308:	d9414d17 	ldw	r5,1332(sp)
  80530c:	00801984 	movi	r2,102
  805310:	2880b726 	beq	r5,r2,8055f0 <___vfprintf_internal_r+0x1d04>
  805314:	00801184 	movi	r2,70
  805318:	2880b526 	beq	r5,r2,8055f0 <___vfprintf_internal_r+0x1d04>
  80531c:	00801944 	movi	r2,101
  805320:	2880c826 	beq	r5,r2,805644 <___vfprintf_internal_r+0x1d58>
  805324:	00801144 	movi	r2,69
  805328:	2880c626 	beq	r5,r2,805644 <___vfprintf_internal_r+0x1d58>
  80532c:	9829883a 	mov	r20,r19
  805330:	d9014f17 	ldw	r4,1340(sp)
  805334:	d8800504 	addi	r2,sp,20
  805338:	880d883a 	mov	r6,r17
  80533c:	d8800115 	stw	r2,4(sp)
  805340:	d8c00604 	addi	r3,sp,24
  805344:	d8800704 	addi	r2,sp,28
  805348:	800b883a 	mov	r5,r16
  80534c:	01c00084 	movi	r7,2
  805350:	d8c00215 	stw	r3,8(sp)
  805354:	d8800315 	stw	r2,12(sp)
  805358:	dd000015 	stw	r20,0(sp)
  80535c:	0805b100 	call	805b10 <_dtoa_r>
  805360:	d9814d17 	ldw	r6,1332(sp)
  805364:	d8814115 	stw	r2,1284(sp)
  805368:	008019c4 	movi	r2,103
  80536c:	30809526 	beq	r6,r2,8055c4 <___vfprintf_internal_r+0x1cd8>
  805370:	d8c14d17 	ldw	r3,1332(sp)
  805374:	008011c4 	movi	r2,71
  805378:	18809226 	beq	r3,r2,8055c4 <___vfprintf_internal_r+0x1cd8>
  80537c:	d9414117 	ldw	r5,1284(sp)
  805380:	d9814d17 	ldw	r6,1332(sp)
  805384:	00801984 	movi	r2,102
  805388:	2d25883a 	add	r18,r5,r20
  80538c:	30808626 	beq	r6,r2,8055a8 <___vfprintf_internal_r+0x1cbc>
  805390:	00801184 	movi	r2,70
  805394:	30808426 	beq	r6,r2,8055a8 <___vfprintf_internal_r+0x1cbc>
  805398:	000d883a 	mov	r6,zero
  80539c:	000f883a 	mov	r7,zero
  8053a0:	880b883a 	mov	r5,r17
  8053a4:	8009883a 	mov	r4,r16
  8053a8:	080b9580 	call	80b958 <__eqdf2>
  8053ac:	1000751e 	bne	r2,zero,805584 <___vfprintf_internal_r+0x1c98>
  8053b0:	9005883a 	mov	r2,r18
  8053b4:	dc800715 	stw	r18,28(sp)
  8053b8:	d9014117 	ldw	r4,1284(sp)
  8053bc:	d9414d17 	ldw	r5,1332(sp)
  8053c0:	00c019c4 	movi	r3,103
  8053c4:	1125c83a 	sub	r18,r2,r4
  8053c8:	28c06826 	beq	r5,r3,80556c <___vfprintf_internal_r+0x1c80>
  8053cc:	008011c4 	movi	r2,71
  8053d0:	28806626 	beq	r5,r2,80556c <___vfprintf_internal_r+0x1c80>
  8053d4:	d9000517 	ldw	r4,20(sp)
  8053d8:	d8c14d17 	ldw	r3,1332(sp)
  8053dc:	00801944 	movi	r2,101
  8053e0:	10c05516 	blt	r2,r3,805538 <___vfprintf_internal_r+0x1c4c>
  8053e4:	213fffc4 	addi	r4,r4,-1
  8053e8:	d9000515 	stw	r4,20(sp)
  8053ec:	d8c00805 	stb	r3,32(sp)
  8053f0:	2021883a 	mov	r16,r4
  8053f4:	2000c116 	blt	r4,zero,8056fc <___vfprintf_internal_r+0x1e10>
  8053f8:	00800ac4 	movi	r2,43
  8053fc:	d8800845 	stb	r2,33(sp)
  805400:	00800244 	movi	r2,9
  805404:	1400af0e 	bge	r2,r16,8056c4 <___vfprintf_internal_r+0x1dd8>
  805408:	1027883a 	mov	r19,r2
  80540c:	dc400b84 	addi	r17,sp,46
  805410:	8009883a 	mov	r4,r16
  805414:	01400284 	movi	r5,10
  805418:	080bfb80 	call	80bfb8 <__modsi3>
  80541c:	10800c04 	addi	r2,r2,48
  805420:	8c7fffc4 	addi	r17,r17,-1
  805424:	8009883a 	mov	r4,r16
  805428:	01400284 	movi	r5,10
  80542c:	88800005 	stb	r2,0(r17)
  805430:	080bf580 	call	80bf58 <__divsi3>
  805434:	1021883a 	mov	r16,r2
  805438:	98bff516 	blt	r19,r2,805410 <___vfprintf_internal_r+0x1b24>
  80543c:	10c00c04 	addi	r3,r2,48
  805440:	d88009c4 	addi	r2,sp,39
  805444:	108001c4 	addi	r2,r2,7
  805448:	897fffc4 	addi	r5,r17,-1
  80544c:	88ffffc5 	stb	r3,-1(r17)
  805450:	2880a72e 	bgeu	r5,r2,8056f0 <___vfprintf_internal_r+0x1e04>
  805454:	1009883a 	mov	r4,r2
  805458:	d9800804 	addi	r6,sp,32
  80545c:	d8c00884 	addi	r3,sp,34
  805460:	28800003 	ldbu	r2,0(r5)
  805464:	29400044 	addi	r5,r5,1
  805468:	18800005 	stb	r2,0(r3)
  80546c:	18c00044 	addi	r3,r3,1
  805470:	293ffb36 	bltu	r5,r4,805460 <___vfprintf_internal_r+0x1b74>
  805474:	1987c83a 	sub	r3,r3,r6
  805478:	00800044 	movi	r2,1
  80547c:	d8c14815 	stw	r3,1312(sp)
  805480:	90cf883a 	add	r7,r18,r3
  805484:	1480960e 	bge	r2,r18,8056e0 <___vfprintf_internal_r+0x1df4>
  805488:	39c00044 	addi	r7,r7,1
  80548c:	d9c14515 	stw	r7,1300(sp)
  805490:	38003416 	blt	r7,zero,805564 <___vfprintf_internal_r+0x1c78>
  805494:	e0803fcc 	andi	r2,fp,255
  805498:	1080201c 	xori	r2,r2,128
  80549c:	10bfe004 	addi	r2,r2,-128
  8054a0:	10004e26 	beq	r2,zero,8055dc <___vfprintf_internal_r+0x1cf0>
  8054a4:	00800b44 	movi	r2,45
  8054a8:	dc814715 	stw	r18,1308(sp)
  8054ac:	d8014615 	stw	zero,1304(sp)
  8054b0:	d8800405 	stb	r2,16(sp)
  8054b4:	003bb106 	br	80437c <___vfprintf_internal_r+0xa90>
  8054b8:	00800b44 	movi	r2,45
  8054bc:	d8800405 	stb	r2,16(sp)
  8054c0:	003d3306 	br	804990 <___vfprintf_internal_r+0x10a4>
  8054c4:	d9014f17 	ldw	r4,1340(sp)
  8054c8:	b00b883a 	mov	r5,r22
  8054cc:	d9800c04 	addi	r6,sp,48
  8054d0:	08038940 	call	803894 <__sprint_r>
  8054d4:	103abd1e 	bne	r2,zero,803fcc <___vfprintf_internal_r+0x6e0>
  8054d8:	003abb06 	br	803fc8 <___vfprintf_internal_r+0x6dc>
  8054dc:	38800017 	ldw	r2,0(r7)
  8054e0:	39c00104 	addi	r7,r7,4
  8054e4:	d9c14015 	stw	r7,1280(sp)
  8054e8:	d9414b17 	ldw	r5,1324(sp)
  8054ec:	d9c14017 	ldw	r7,1280(sp)
  8054f0:	11400015 	stw	r5,0(r2)
  8054f4:	00395906 	br	803a5c <___vfprintf_internal_r+0x170>
  8054f8:	980f883a 	mov	r7,r19
  8054fc:	dcc14515 	stw	r19,1300(sp)
  805500:	d8014615 	stw	zero,1304(sp)
  805504:	003b9b06 	br	804374 <___vfprintf_internal_r+0xa88>
  805508:	0027883a 	mov	r19,zero
  80550c:	00397806 	br	803af0 <___vfprintf_internal_r+0x204>
  805510:	00c02074 	movhi	r3,129
  805514:	18c69704 	addi	r3,r3,6748
  805518:	100f883a 	mov	r7,r2
  80551c:	d8814515 	stw	r2,1300(sp)
  805520:	d8c14115 	stw	r3,1284(sp)
  805524:	0039e006 	br	803ca8 <___vfprintf_internal_r+0x3bc>
  805528:	00802074 	movhi	r2,129
  80552c:	10869604 	addi	r2,r2,6744
  805530:	d8814115 	stw	r2,1284(sp)
  805534:	003d1c06 	br	8049a8 <___vfprintf_internal_r+0x10bc>
  805538:	d9414d17 	ldw	r5,1332(sp)
  80553c:	00801984 	movi	r2,102
  805540:	28804926 	beq	r5,r2,805668 <___vfprintf_internal_r+0x1d7c>
  805544:	200f883a 	mov	r7,r4
  805548:	24805716 	blt	r4,r18,8056a8 <___vfprintf_internal_r+0x1dbc>
  80554c:	d9414c17 	ldw	r5,1328(sp)
  805550:	2880004c 	andi	r2,r5,1
  805554:	10000126 	beq	r2,zero,80555c <___vfprintf_internal_r+0x1c70>
  805558:	21c00044 	addi	r7,r4,1
  80555c:	d9c14515 	stw	r7,1300(sp)
  805560:	383fcc0e 	bge	r7,zero,805494 <___vfprintf_internal_r+0x1ba8>
  805564:	d8014515 	stw	zero,1300(sp)
  805568:	003fca06 	br	805494 <___vfprintf_internal_r+0x1ba8>
  80556c:	d9000517 	ldw	r4,20(sp)
  805570:	00bfff04 	movi	r2,-4
  805574:	1100480e 	bge	r2,r4,805698 <___vfprintf_internal_r+0x1dac>
  805578:	99004716 	blt	r19,r4,805698 <___vfprintf_internal_r+0x1dac>
  80557c:	d8c14d15 	stw	r3,1332(sp)
  805580:	003ff006 	br	805544 <___vfprintf_internal_r+0x1c58>
  805584:	d8800717 	ldw	r2,28(sp)
  805588:	14bf8b2e 	bgeu	r2,r18,8053b8 <___vfprintf_internal_r+0x1acc>
  80558c:	9007883a 	mov	r3,r18
  805590:	01000c04 	movi	r4,48
  805594:	11000005 	stb	r4,0(r2)
  805598:	10800044 	addi	r2,r2,1
  80559c:	d8800715 	stw	r2,28(sp)
  8055a0:	18bffc1e 	bne	r3,r2,805594 <___vfprintf_internal_r+0x1ca8>
  8055a4:	003f8406 	br	8053b8 <___vfprintf_internal_r+0x1acc>
  8055a8:	d8814117 	ldw	r2,1284(sp)
  8055ac:	10c00007 	ldb	r3,0(r2)
  8055b0:	00800c04 	movi	r2,48
  8055b4:	18805b26 	beq	r3,r2,805724 <___vfprintf_internal_r+0x1e38>
  8055b8:	d9000517 	ldw	r4,20(sp)
  8055bc:	9125883a 	add	r18,r18,r4
  8055c0:	003f7506 	br	805398 <___vfprintf_internal_r+0x1aac>
  8055c4:	d9014c17 	ldw	r4,1328(sp)
  8055c8:	2080004c 	andi	r2,r4,1
  8055cc:	1005003a 	cmpeq	r2,r2,zero
  8055d0:	103f6a26 	beq	r2,zero,80537c <___vfprintf_internal_r+0x1a90>
  8055d4:	d8800717 	ldw	r2,28(sp)
  8055d8:	003f7706 	br	8053b8 <___vfprintf_internal_r+0x1acc>
  8055dc:	d9c14515 	stw	r7,1300(sp)
  8055e0:	38004d16 	blt	r7,zero,805718 <___vfprintf_internal_r+0x1e2c>
  8055e4:	dc814715 	stw	r18,1308(sp)
  8055e8:	d8014615 	stw	zero,1304(sp)
  8055ec:	003b6106 	br	804374 <___vfprintf_internal_r+0xa88>
  8055f0:	d9014f17 	ldw	r4,1340(sp)
  8055f4:	d8800504 	addi	r2,sp,20
  8055f8:	d8800115 	stw	r2,4(sp)
  8055fc:	d8c00604 	addi	r3,sp,24
  805600:	d8800704 	addi	r2,sp,28
  805604:	800b883a 	mov	r5,r16
  805608:	880d883a 	mov	r6,r17
  80560c:	01c000c4 	movi	r7,3
  805610:	d8c00215 	stw	r3,8(sp)
  805614:	d8800315 	stw	r2,12(sp)
  805618:	dcc00015 	stw	r19,0(sp)
  80561c:	9829883a 	mov	r20,r19
  805620:	0805b100 	call	805b10 <_dtoa_r>
  805624:	d8814115 	stw	r2,1284(sp)
  805628:	003f5106 	br	805370 <___vfprintf_internal_r+0x1a84>
  80562c:	d8c14217 	ldw	r3,1288(sp)
  805630:	d9014317 	ldw	r4,1292(sp)
  805634:	07000b44 	movi	fp,45
  805638:	1821883a 	mov	r16,r3
  80563c:	2460003c 	xorhi	r17,r4,32768
  805640:	003f3106 	br	805308 <___vfprintf_internal_r+0x1a1c>
  805644:	9d000044 	addi	r20,r19,1
  805648:	003f3906 	br	805330 <___vfprintf_internal_r+0x1a44>
  80564c:	983f251e 	bne	r19,zero,8052e4 <___vfprintf_internal_r+0x19f8>
  805650:	04c00044 	movi	r19,1
  805654:	003f2306 	br	8052e4 <___vfprintf_internal_r+0x19f8>
  805658:	04c00184 	movi	r19,6
  80565c:	003f2106 	br	8052e4 <___vfprintf_internal_r+0x19f8>
  805660:	d8014515 	stw	zero,1300(sp)
  805664:	003eee06 	br	805220 <___vfprintf_internal_r+0x1934>
  805668:	200f883a 	mov	r7,r4
  80566c:	0100370e 	bge	zero,r4,80574c <___vfprintf_internal_r+0x1e60>
  805670:	9800031e 	bne	r19,zero,805680 <___vfprintf_internal_r+0x1d94>
  805674:	d9814c17 	ldw	r6,1328(sp)
  805678:	3080004c 	andi	r2,r6,1
  80567c:	103fb726 	beq	r2,zero,80555c <___vfprintf_internal_r+0x1c70>
  805680:	20800044 	addi	r2,r4,1
  805684:	98a7883a 	add	r19,r19,r2
  805688:	dcc14515 	stw	r19,1300(sp)
  80568c:	980f883a 	mov	r7,r19
  805690:	983f800e 	bge	r19,zero,805494 <___vfprintf_internal_r+0x1ba8>
  805694:	003fb306 	br	805564 <___vfprintf_internal_r+0x1c78>
  805698:	d9814d17 	ldw	r6,1332(sp)
  80569c:	31bfff84 	addi	r6,r6,-2
  8056a0:	d9814d15 	stw	r6,1332(sp)
  8056a4:	003f4c06 	br	8053d8 <___vfprintf_internal_r+0x1aec>
  8056a8:	0100180e 	bge	zero,r4,80570c <___vfprintf_internal_r+0x1e20>
  8056ac:	00800044 	movi	r2,1
  8056b0:	1485883a 	add	r2,r2,r18
  8056b4:	d8814515 	stw	r2,1300(sp)
  8056b8:	100f883a 	mov	r7,r2
  8056bc:	103f750e 	bge	r2,zero,805494 <___vfprintf_internal_r+0x1ba8>
  8056c0:	003fa806 	br	805564 <___vfprintf_internal_r+0x1c78>
  8056c4:	80c00c04 	addi	r3,r16,48
  8056c8:	00800c04 	movi	r2,48
  8056cc:	d8c008c5 	stb	r3,35(sp)
  8056d0:	d9800804 	addi	r6,sp,32
  8056d4:	d8c00904 	addi	r3,sp,36
  8056d8:	d8800885 	stb	r2,34(sp)
  8056dc:	003f6506 	br	805474 <___vfprintf_internal_r+0x1b88>
  8056e0:	d9014c17 	ldw	r4,1328(sp)
  8056e4:	2084703a 	and	r2,r4,r2
  8056e8:	103f9c26 	beq	r2,zero,80555c <___vfprintf_internal_r+0x1c70>
  8056ec:	003f6606 	br	805488 <___vfprintf_internal_r+0x1b9c>
  8056f0:	d9800804 	addi	r6,sp,32
  8056f4:	d8c00884 	addi	r3,sp,34
  8056f8:	003f5e06 	br	805474 <___vfprintf_internal_r+0x1b88>
  8056fc:	00800b44 	movi	r2,45
  805700:	0121c83a 	sub	r16,zero,r4
  805704:	d8800845 	stb	r2,33(sp)
  805708:	003f3d06 	br	805400 <___vfprintf_internal_r+0x1b14>
  80570c:	00800084 	movi	r2,2
  805710:	1105c83a 	sub	r2,r2,r4
  805714:	003fe606 	br	8056b0 <___vfprintf_internal_r+0x1dc4>
  805718:	d8014515 	stw	zero,1300(sp)
  80571c:	dc814715 	stw	r18,1308(sp)
  805720:	003fb106 	br	8055e8 <___vfprintf_internal_r+0x1cfc>
  805724:	000d883a 	mov	r6,zero
  805728:	000f883a 	mov	r7,zero
  80572c:	8009883a 	mov	r4,r16
  805730:	880b883a 	mov	r5,r17
  805734:	0802bb40 	call	802bb4 <__nedf2>
  805738:	103f9f26 	beq	r2,zero,8055b8 <___vfprintf_internal_r+0x1ccc>
  80573c:	00800044 	movi	r2,1
  805740:	1509c83a 	sub	r4,r2,r20
  805744:	d9000515 	stw	r4,20(sp)
  805748:	003f9b06 	br	8055b8 <___vfprintf_internal_r+0x1ccc>
  80574c:	98000d1e 	bne	r19,zero,805784 <___vfprintf_internal_r+0x1e98>
  805750:	d8c14c17 	ldw	r3,1328(sp)
  805754:	1880004c 	andi	r2,r3,1
  805758:	10000a1e 	bne	r2,zero,805784 <___vfprintf_internal_r+0x1e98>
  80575c:	01000044 	movi	r4,1
  805760:	200f883a 	mov	r7,r4
  805764:	d9014515 	stw	r4,1300(sp)
  805768:	003f4a06 	br	805494 <___vfprintf_internal_r+0x1ba8>
  80576c:	3cc00017 	ldw	r19,0(r7)
  805770:	39c00104 	addi	r7,r7,4
  805774:	983d0e0e 	bge	r19,zero,804bb0 <___vfprintf_internal_r+0x12c4>
  805778:	b8c00007 	ldb	r3,0(r23)
  80577c:	04ffffc4 	movi	r19,-1
  805780:	0038d906 	br	803ae8 <___vfprintf_internal_r+0x1fc>
  805784:	9cc00084 	addi	r19,r19,2
  805788:	dcc14515 	stw	r19,1300(sp)
  80578c:	980f883a 	mov	r7,r19
  805790:	983f400e 	bge	r19,zero,805494 <___vfprintf_internal_r+0x1ba8>
  805794:	003f7306 	br	805564 <___vfprintf_internal_r+0x1c78>

00805798 <__vfprintf_internal>:
  805798:	00802074 	movhi	r2,129
  80579c:	108e4f04 	addi	r2,r2,14652
  8057a0:	2013883a 	mov	r9,r4
  8057a4:	11000017 	ldw	r4,0(r2)
  8057a8:	2805883a 	mov	r2,r5
  8057ac:	300f883a 	mov	r7,r6
  8057b0:	480b883a 	mov	r5,r9
  8057b4:	100d883a 	mov	r6,r2
  8057b8:	08038ec1 	jmpi	8038ec <___vfprintf_internal_r>

008057bc <__swsetup_r>:
  8057bc:	00802074 	movhi	r2,129
  8057c0:	108e4f04 	addi	r2,r2,14652
  8057c4:	10c00017 	ldw	r3,0(r2)
  8057c8:	defffd04 	addi	sp,sp,-12
  8057cc:	dc400115 	stw	r17,4(sp)
  8057d0:	dc000015 	stw	r16,0(sp)
  8057d4:	dfc00215 	stw	ra,8(sp)
  8057d8:	2023883a 	mov	r17,r4
  8057dc:	2821883a 	mov	r16,r5
  8057e0:	18000226 	beq	r3,zero,8057ec <__swsetup_r+0x30>
  8057e4:	18800e17 	ldw	r2,56(r3)
  8057e8:	10001f26 	beq	r2,zero,805868 <__swsetup_r+0xac>
  8057ec:	8100030b 	ldhu	r4,12(r16)
  8057f0:	2080020c 	andi	r2,r4,8
  8057f4:	10002826 	beq	r2,zero,805898 <__swsetup_r+0xdc>
  8057f8:	81400417 	ldw	r5,16(r16)
  8057fc:	28001d26 	beq	r5,zero,805874 <__swsetup_r+0xb8>
  805800:	2080004c 	andi	r2,r4,1
  805804:	1005003a 	cmpeq	r2,r2,zero
  805808:	10000b26 	beq	r2,zero,805838 <__swsetup_r+0x7c>
  80580c:	2080008c 	andi	r2,r4,2
  805810:	10001226 	beq	r2,zero,80585c <__swsetup_r+0xa0>
  805814:	0005883a 	mov	r2,zero
  805818:	80800215 	stw	r2,8(r16)
  80581c:	28000b26 	beq	r5,zero,80584c <__swsetup_r+0x90>
  805820:	0005883a 	mov	r2,zero
  805824:	dfc00217 	ldw	ra,8(sp)
  805828:	dc400117 	ldw	r17,4(sp)
  80582c:	dc000017 	ldw	r16,0(sp)
  805830:	dec00304 	addi	sp,sp,12
  805834:	f800283a 	ret
  805838:	80800517 	ldw	r2,20(r16)
  80583c:	80000215 	stw	zero,8(r16)
  805840:	0085c83a 	sub	r2,zero,r2
  805844:	80800615 	stw	r2,24(r16)
  805848:	283ff51e 	bne	r5,zero,805820 <__swsetup_r+0x64>
  80584c:	2080200c 	andi	r2,r4,128
  805850:	103ff326 	beq	r2,zero,805820 <__swsetup_r+0x64>
  805854:	00bfffc4 	movi	r2,-1
  805858:	003ff206 	br	805824 <__swsetup_r+0x68>
  80585c:	80800517 	ldw	r2,20(r16)
  805860:	80800215 	stw	r2,8(r16)
  805864:	003fed06 	br	80581c <__swsetup_r+0x60>
  805868:	1809883a 	mov	r4,r3
  80586c:	080735c0 	call	80735c <__sinit>
  805870:	003fde06 	br	8057ec <__swsetup_r+0x30>
  805874:	20c0a00c 	andi	r3,r4,640
  805878:	00808004 	movi	r2,512
  80587c:	18bfe026 	beq	r3,r2,805800 <__swsetup_r+0x44>
  805880:	8809883a 	mov	r4,r17
  805884:	800b883a 	mov	r5,r16
  805888:	08080d40 	call	8080d4 <__smakebuf_r>
  80588c:	8100030b 	ldhu	r4,12(r16)
  805890:	81400417 	ldw	r5,16(r16)
  805894:	003fda06 	br	805800 <__swsetup_r+0x44>
  805898:	2080040c 	andi	r2,r4,16
  80589c:	103fed26 	beq	r2,zero,805854 <__swsetup_r+0x98>
  8058a0:	2080010c 	andi	r2,r4,4
  8058a4:	10001226 	beq	r2,zero,8058f0 <__swsetup_r+0x134>
  8058a8:	81400c17 	ldw	r5,48(r16)
  8058ac:	28000526 	beq	r5,zero,8058c4 <__swsetup_r+0x108>
  8058b0:	80801004 	addi	r2,r16,64
  8058b4:	28800226 	beq	r5,r2,8058c0 <__swsetup_r+0x104>
  8058b8:	8809883a 	mov	r4,r17
  8058bc:	08076e00 	call	8076e0 <_free_r>
  8058c0:	80000c15 	stw	zero,48(r16)
  8058c4:	8080030b 	ldhu	r2,12(r16)
  8058c8:	81400417 	ldw	r5,16(r16)
  8058cc:	80000115 	stw	zero,4(r16)
  8058d0:	10bff6cc 	andi	r2,r2,65499
  8058d4:	8080030d 	sth	r2,12(r16)
  8058d8:	81400015 	stw	r5,0(r16)
  8058dc:	8080030b 	ldhu	r2,12(r16)
  8058e0:	10800214 	ori	r2,r2,8
  8058e4:	113fffcc 	andi	r4,r2,65535
  8058e8:	8080030d 	sth	r2,12(r16)
  8058ec:	003fc306 	br	8057fc <__swsetup_r+0x40>
  8058f0:	81400417 	ldw	r5,16(r16)
  8058f4:	003ff906 	br	8058dc <__swsetup_r+0x120>

008058f8 <quorem>:
  8058f8:	28c00417 	ldw	r3,16(r5)
  8058fc:	20800417 	ldw	r2,16(r4)
  805900:	defff604 	addi	sp,sp,-40
  805904:	ddc00715 	stw	r23,28(sp)
  805908:	dd400515 	stw	r21,20(sp)
  80590c:	dfc00915 	stw	ra,36(sp)
  805910:	df000815 	stw	fp,32(sp)
  805914:	dd800615 	stw	r22,24(sp)
  805918:	dd000415 	stw	r20,16(sp)
  80591c:	dcc00315 	stw	r19,12(sp)
  805920:	dc800215 	stw	r18,8(sp)
  805924:	dc400115 	stw	r17,4(sp)
  805928:	dc000015 	stw	r16,0(sp)
  80592c:	202f883a 	mov	r23,r4
  805930:	282b883a 	mov	r21,r5
  805934:	10c07416 	blt	r2,r3,805b08 <quorem+0x210>
  805938:	1c7fffc4 	addi	r17,r3,-1
  80593c:	8c45883a 	add	r2,r17,r17
  805940:	1085883a 	add	r2,r2,r2
  805944:	2c000504 	addi	r16,r5,20
  805948:	24c00504 	addi	r19,r4,20
  80594c:	14ed883a 	add	r22,r2,r19
  805950:	80a5883a 	add	r18,r16,r2
  805954:	b7000017 	ldw	fp,0(r22)
  805958:	91400017 	ldw	r5,0(r18)
  80595c:	e009883a 	mov	r4,fp
  805960:	29400044 	addi	r5,r5,1
  805964:	080c0180 	call	80c018 <__udivsi3>
  805968:	1029883a 	mov	r20,r2
  80596c:	10003c1e 	bne	r2,zero,805a60 <quorem+0x168>
  805970:	a80b883a 	mov	r5,r21
  805974:	b809883a 	mov	r4,r23
  805978:	0808e000 	call	808e00 <__mcmp>
  80597c:	10002b16 	blt	r2,zero,805a2c <quorem+0x134>
  805980:	a5000044 	addi	r20,r20,1
  805984:	980f883a 	mov	r7,r19
  805988:	0011883a 	mov	r8,zero
  80598c:	0009883a 	mov	r4,zero
  805990:	81400017 	ldw	r5,0(r16)
  805994:	38c00017 	ldw	r3,0(r7)
  805998:	84000104 	addi	r16,r16,4
  80599c:	28bfffcc 	andi	r2,r5,65535
  8059a0:	2085883a 	add	r2,r4,r2
  8059a4:	11bfffcc 	andi	r6,r2,65535
  8059a8:	193fffcc 	andi	r4,r3,65535
  8059ac:	1004d43a 	srli	r2,r2,16
  8059b0:	280ad43a 	srli	r5,r5,16
  8059b4:	2189c83a 	sub	r4,r4,r6
  8059b8:	2209883a 	add	r4,r4,r8
  8059bc:	1806d43a 	srli	r3,r3,16
  8059c0:	288b883a 	add	r5,r5,r2
  8059c4:	200dd43a 	srai	r6,r4,16
  8059c8:	28bfffcc 	andi	r2,r5,65535
  8059cc:	1887c83a 	sub	r3,r3,r2
  8059d0:	1987883a 	add	r3,r3,r6
  8059d4:	3900000d 	sth	r4,0(r7)
  8059d8:	38c0008d 	sth	r3,2(r7)
  8059dc:	2808d43a 	srli	r4,r5,16
  8059e0:	39c00104 	addi	r7,r7,4
  8059e4:	1811d43a 	srai	r8,r3,16
  8059e8:	943fe92e 	bgeu	r18,r16,805990 <quorem+0x98>
  8059ec:	8c45883a 	add	r2,r17,r17
  8059f0:	1085883a 	add	r2,r2,r2
  8059f4:	9885883a 	add	r2,r19,r2
  8059f8:	10c00017 	ldw	r3,0(r2)
  8059fc:	18000b1e 	bne	r3,zero,805a2c <quorem+0x134>
  805a00:	113fff04 	addi	r4,r2,-4
  805a04:	9900082e 	bgeu	r19,r4,805a28 <quorem+0x130>
  805a08:	10bfff17 	ldw	r2,-4(r2)
  805a0c:	10000326 	beq	r2,zero,805a1c <quorem+0x124>
  805a10:	00000506 	br	805a28 <quorem+0x130>
  805a14:	20800017 	ldw	r2,0(r4)
  805a18:	1000031e 	bne	r2,zero,805a28 <quorem+0x130>
  805a1c:	213fff04 	addi	r4,r4,-4
  805a20:	8c7fffc4 	addi	r17,r17,-1
  805a24:	993ffb36 	bltu	r19,r4,805a14 <quorem+0x11c>
  805a28:	bc400415 	stw	r17,16(r23)
  805a2c:	a005883a 	mov	r2,r20
  805a30:	dfc00917 	ldw	ra,36(sp)
  805a34:	df000817 	ldw	fp,32(sp)
  805a38:	ddc00717 	ldw	r23,28(sp)
  805a3c:	dd800617 	ldw	r22,24(sp)
  805a40:	dd400517 	ldw	r21,20(sp)
  805a44:	dd000417 	ldw	r20,16(sp)
  805a48:	dcc00317 	ldw	r19,12(sp)
  805a4c:	dc800217 	ldw	r18,8(sp)
  805a50:	dc400117 	ldw	r17,4(sp)
  805a54:	dc000017 	ldw	r16,0(sp)
  805a58:	dec00a04 	addi	sp,sp,40
  805a5c:	f800283a 	ret
  805a60:	980f883a 	mov	r7,r19
  805a64:	8011883a 	mov	r8,r16
  805a68:	0013883a 	mov	r9,zero
  805a6c:	000d883a 	mov	r6,zero
  805a70:	40c00017 	ldw	r3,0(r8)
  805a74:	39000017 	ldw	r4,0(r7)
  805a78:	42000104 	addi	r8,r8,4
  805a7c:	18bfffcc 	andi	r2,r3,65535
  805a80:	a085383a 	mul	r2,r20,r2
  805a84:	1806d43a 	srli	r3,r3,16
  805a88:	217fffcc 	andi	r5,r4,65535
  805a8c:	3085883a 	add	r2,r6,r2
  805a90:	11bfffcc 	andi	r6,r2,65535
  805a94:	a0c7383a 	mul	r3,r20,r3
  805a98:	1004d43a 	srli	r2,r2,16
  805a9c:	298bc83a 	sub	r5,r5,r6
  805aa0:	2a4b883a 	add	r5,r5,r9
  805aa4:	2008d43a 	srli	r4,r4,16
  805aa8:	1887883a 	add	r3,r3,r2
  805aac:	280dd43a 	srai	r6,r5,16
  805ab0:	18bfffcc 	andi	r2,r3,65535
  805ab4:	2089c83a 	sub	r4,r4,r2
  805ab8:	2189883a 	add	r4,r4,r6
  805abc:	3900008d 	sth	r4,2(r7)
  805ac0:	3940000d 	sth	r5,0(r7)
  805ac4:	180cd43a 	srli	r6,r3,16
  805ac8:	39c00104 	addi	r7,r7,4
  805acc:	2013d43a 	srai	r9,r4,16
  805ad0:	923fe72e 	bgeu	r18,r8,805a70 <quorem+0x178>
  805ad4:	e03fa61e 	bne	fp,zero,805970 <quorem+0x78>
  805ad8:	b0ffff04 	addi	r3,r22,-4
  805adc:	98c0082e 	bgeu	r19,r3,805b00 <quorem+0x208>
  805ae0:	b0bfff17 	ldw	r2,-4(r22)
  805ae4:	10000326 	beq	r2,zero,805af4 <quorem+0x1fc>
  805ae8:	00000506 	br	805b00 <quorem+0x208>
  805aec:	18800017 	ldw	r2,0(r3)
  805af0:	1000031e 	bne	r2,zero,805b00 <quorem+0x208>
  805af4:	18ffff04 	addi	r3,r3,-4
  805af8:	8c7fffc4 	addi	r17,r17,-1
  805afc:	98fffb36 	bltu	r19,r3,805aec <quorem+0x1f4>
  805b00:	bc400415 	stw	r17,16(r23)
  805b04:	003f9a06 	br	805970 <quorem+0x78>
  805b08:	0005883a 	mov	r2,zero
  805b0c:	003fc806 	br	805a30 <quorem+0x138>

00805b10 <_dtoa_r>:
  805b10:	22001017 	ldw	r8,64(r4)
  805b14:	deffda04 	addi	sp,sp,-152
  805b18:	dd402115 	stw	r21,132(sp)
  805b1c:	dd002015 	stw	r20,128(sp)
  805b20:	dc801e15 	stw	r18,120(sp)
  805b24:	dc401d15 	stw	r17,116(sp)
  805b28:	dfc02515 	stw	ra,148(sp)
  805b2c:	df002415 	stw	fp,144(sp)
  805b30:	ddc02315 	stw	r23,140(sp)
  805b34:	dd802215 	stw	r22,136(sp)
  805b38:	dcc01f15 	stw	r19,124(sp)
  805b3c:	dc001c15 	stw	r16,112(sp)
  805b40:	d9001615 	stw	r4,88(sp)
  805b44:	3023883a 	mov	r17,r6
  805b48:	2829883a 	mov	r20,r5
  805b4c:	d9c01715 	stw	r7,92(sp)
  805b50:	dc802817 	ldw	r18,160(sp)
  805b54:	302b883a 	mov	r21,r6
  805b58:	40000a26 	beq	r8,zero,805b84 <_dtoa_r+0x74>
  805b5c:	20801117 	ldw	r2,68(r4)
  805b60:	400b883a 	mov	r5,r8
  805b64:	40800115 	stw	r2,4(r8)
  805b68:	20c01117 	ldw	r3,68(r4)
  805b6c:	00800044 	movi	r2,1
  805b70:	10c4983a 	sll	r2,r2,r3
  805b74:	40800215 	stw	r2,8(r8)
  805b78:	0808ca40 	call	808ca4 <_Bfree>
  805b7c:	d8c01617 	ldw	r3,88(sp)
  805b80:	18001015 	stw	zero,64(r3)
  805b84:	8800a316 	blt	r17,zero,805e14 <_dtoa_r+0x304>
  805b88:	90000015 	stw	zero,0(r18)
  805b8c:	a8dffc2c 	andhi	r3,r21,32752
  805b90:	009ffc34 	movhi	r2,32752
  805b94:	18809126 	beq	r3,r2,805ddc <_dtoa_r+0x2cc>
  805b98:	000d883a 	mov	r6,zero
  805b9c:	000f883a 	mov	r7,zero
  805ba0:	a009883a 	mov	r4,r20
  805ba4:	a80b883a 	mov	r5,r21
  805ba8:	dd001215 	stw	r20,72(sp)
  805bac:	dd401315 	stw	r21,76(sp)
  805bb0:	0802bb40 	call	802bb4 <__nedf2>
  805bb4:	1000171e 	bne	r2,zero,805c14 <_dtoa_r+0x104>
  805bb8:	d9802717 	ldw	r6,156(sp)
  805bbc:	00800044 	movi	r2,1
  805bc0:	30800015 	stw	r2,0(r6)
  805bc4:	d8802917 	ldw	r2,164(sp)
  805bc8:	10029b26 	beq	r2,zero,806638 <_dtoa_r+0xb28>
  805bcc:	d9002917 	ldw	r4,164(sp)
  805bd0:	00802074 	movhi	r2,129
  805bd4:	10863344 	addi	r2,r2,6349
  805bd8:	10ffffc4 	addi	r3,r2,-1
  805bdc:	20800015 	stw	r2,0(r4)
  805be0:	1805883a 	mov	r2,r3
  805be4:	dfc02517 	ldw	ra,148(sp)
  805be8:	df002417 	ldw	fp,144(sp)
  805bec:	ddc02317 	ldw	r23,140(sp)
  805bf0:	dd802217 	ldw	r22,136(sp)
  805bf4:	dd402117 	ldw	r21,132(sp)
  805bf8:	dd002017 	ldw	r20,128(sp)
  805bfc:	dcc01f17 	ldw	r19,124(sp)
  805c00:	dc801e17 	ldw	r18,120(sp)
  805c04:	dc401d17 	ldw	r17,116(sp)
  805c08:	dc001c17 	ldw	r16,112(sp)
  805c0c:	dec02604 	addi	sp,sp,152
  805c10:	f800283a 	ret
  805c14:	d9001617 	ldw	r4,88(sp)
  805c18:	d9401217 	ldw	r5,72(sp)
  805c1c:	d8800104 	addi	r2,sp,4
  805c20:	a80d883a 	mov	r6,r21
  805c24:	d9c00204 	addi	r7,sp,8
  805c28:	d8800015 	stw	r2,0(sp)
  805c2c:	08092e00 	call	8092e0 <__d2b>
  805c30:	d8800715 	stw	r2,28(sp)
  805c34:	a804d53a 	srli	r2,r21,20
  805c38:	1101ffcc 	andi	r4,r2,2047
  805c3c:	20008626 	beq	r4,zero,805e58 <_dtoa_r+0x348>
  805c40:	d8c01217 	ldw	r3,72(sp)
  805c44:	00800434 	movhi	r2,16
  805c48:	10bfffc4 	addi	r2,r2,-1
  805c4c:	ddc00117 	ldw	r23,4(sp)
  805c50:	a884703a 	and	r2,r21,r2
  805c54:	1811883a 	mov	r8,r3
  805c58:	124ffc34 	orhi	r9,r2,16368
  805c5c:	25bf0044 	addi	r22,r4,-1023
  805c60:	d8000815 	stw	zero,32(sp)
  805c64:	0005883a 	mov	r2,zero
  805c68:	00cffe34 	movhi	r3,16376
  805c6c:	480b883a 	mov	r5,r9
  805c70:	4009883a 	mov	r4,r8
  805c74:	180f883a 	mov	r7,r3
  805c78:	100d883a 	mov	r6,r2
  805c7c:	08028680 	call	802868 <__subdf3>
  805c80:	0218dbf4 	movhi	r8,25455
  805c84:	4210d844 	addi	r8,r8,17249
  805c88:	024ff4f4 	movhi	r9,16339
  805c8c:	4a61e9c4 	addi	r9,r9,-30809
  805c90:	480f883a 	mov	r7,r9
  805c94:	400d883a 	mov	r6,r8
  805c98:	180b883a 	mov	r5,r3
  805c9c:	1009883a 	mov	r4,r2
  805ca0:	080b5940 	call	80b594 <__muldf3>
  805ca4:	0222d874 	movhi	r8,35681
  805ca8:	42322cc4 	addi	r8,r8,-14157
  805cac:	024ff1f4 	movhi	r9,16327
  805cb0:	4a628a04 	addi	r9,r9,-30168
  805cb4:	480f883a 	mov	r7,r9
  805cb8:	400d883a 	mov	r6,r8
  805cbc:	180b883a 	mov	r5,r3
  805cc0:	1009883a 	mov	r4,r2
  805cc4:	08028e80 	call	8028e8 <__adddf3>
  805cc8:	b009883a 	mov	r4,r22
  805ccc:	1021883a 	mov	r16,r2
  805cd0:	1823883a 	mov	r17,r3
  805cd4:	080bb780 	call	80bb78 <__floatsidf>
  805cd8:	021427f4 	movhi	r8,20639
  805cdc:	421e7ec4 	addi	r8,r8,31227
  805ce0:	024ff4f4 	movhi	r9,16339
  805ce4:	4a5104c4 	addi	r9,r9,17427
  805ce8:	480f883a 	mov	r7,r9
  805cec:	400d883a 	mov	r6,r8
  805cf0:	180b883a 	mov	r5,r3
  805cf4:	1009883a 	mov	r4,r2
  805cf8:	080b5940 	call	80b594 <__muldf3>
  805cfc:	180f883a 	mov	r7,r3
  805d00:	880b883a 	mov	r5,r17
  805d04:	100d883a 	mov	r6,r2
  805d08:	8009883a 	mov	r4,r16
  805d0c:	08028e80 	call	8028e8 <__adddf3>
  805d10:	1009883a 	mov	r4,r2
  805d14:	180b883a 	mov	r5,r3
  805d18:	1021883a 	mov	r16,r2
  805d1c:	1823883a 	mov	r17,r3
  805d20:	080bc700 	call	80bc70 <__fixdfsi>
  805d24:	000d883a 	mov	r6,zero
  805d28:	000f883a 	mov	r7,zero
  805d2c:	8009883a 	mov	r4,r16
  805d30:	880b883a 	mov	r5,r17
  805d34:	d8800d15 	stw	r2,52(sp)
  805d38:	080baf00 	call	80baf0 <__ltdf2>
  805d3c:	10031716 	blt	r2,zero,80699c <_dtoa_r+0xe8c>
  805d40:	d8c00d17 	ldw	r3,52(sp)
  805d44:	00800584 	movi	r2,22
  805d48:	10c1482e 	bgeu	r2,r3,80626c <_dtoa_r+0x75c>
  805d4c:	01000044 	movi	r4,1
  805d50:	d9000c15 	stw	r4,48(sp)
  805d54:	bd85c83a 	sub	r2,r23,r22
  805d58:	11bfffc4 	addi	r6,r2,-1
  805d5c:	30030b16 	blt	r6,zero,80698c <_dtoa_r+0xe7c>
  805d60:	d9800a15 	stw	r6,40(sp)
  805d64:	d8001115 	stw	zero,68(sp)
  805d68:	d8c00d17 	ldw	r3,52(sp)
  805d6c:	1802ff16 	blt	r3,zero,80696c <_dtoa_r+0xe5c>
  805d70:	d9000a17 	ldw	r4,40(sp)
  805d74:	d8c00915 	stw	r3,36(sp)
  805d78:	d8001015 	stw	zero,64(sp)
  805d7c:	20c9883a 	add	r4,r4,r3
  805d80:	d9000a15 	stw	r4,40(sp)
  805d84:	d9001717 	ldw	r4,92(sp)
  805d88:	00800244 	movi	r2,9
  805d8c:	11004636 	bltu	r2,r4,805ea8 <_dtoa_r+0x398>
  805d90:	00800144 	movi	r2,5
  805d94:	11020416 	blt	r2,r4,8065a8 <_dtoa_r+0xa98>
  805d98:	04400044 	movi	r17,1
  805d9c:	d8c01717 	ldw	r3,92(sp)
  805da0:	00800144 	movi	r2,5
  805da4:	10c1ed36 	bltu	r2,r3,80655c <_dtoa_r+0xa4c>
  805da8:	18c5883a 	add	r2,r3,r3
  805dac:	1085883a 	add	r2,r2,r2
  805db0:	00c02034 	movhi	r3,128
  805db4:	18d77104 	addi	r3,r3,24004
  805db8:	10c5883a 	add	r2,r2,r3
  805dbc:	11000017 	ldw	r4,0(r2)
  805dc0:	2000683a 	jmp	r4
  805dc4:	00805eb0 	cmpltui	r2,zero,378
  805dc8:	00805eb0 	cmpltui	r2,zero,378
  805dcc:	008068b0 	cmpltui	r2,zero,418
  805dd0:	00806888 	cmpgei	r2,zero,418
  805dd4:	008068cc 	andi	r2,zero,419
  805dd8:	008068d8 	cmpnei	r2,zero,419
  805ddc:	d9002717 	ldw	r4,156(sp)
  805de0:	0089c3c4 	movi	r2,9999
  805de4:	20800015 	stw	r2,0(r4)
  805de8:	a0001026 	beq	r20,zero,805e2c <_dtoa_r+0x31c>
  805dec:	00c02074 	movhi	r3,129
  805df0:	18c6b004 	addi	r3,r3,6848
  805df4:	d9802917 	ldw	r6,164(sp)
  805df8:	303f7926 	beq	r6,zero,805be0 <_dtoa_r+0xd0>
  805dfc:	188000c7 	ldb	r2,3(r3)
  805e00:	190000c4 	addi	r4,r3,3
  805e04:	1000101e 	bne	r2,zero,805e48 <_dtoa_r+0x338>
  805e08:	d8802917 	ldw	r2,164(sp)
  805e0c:	11000015 	stw	r4,0(r2)
  805e10:	003f7306 	br	805be0 <_dtoa_r+0xd0>
  805e14:	00a00034 	movhi	r2,32768
  805e18:	10bfffc4 	addi	r2,r2,-1
  805e1c:	00c00044 	movi	r3,1
  805e20:	88aa703a 	and	r21,r17,r2
  805e24:	90c00015 	stw	r3,0(r18)
  805e28:	003f5806 	br	805b8c <_dtoa_r+0x7c>
  805e2c:	00800434 	movhi	r2,16
  805e30:	10bfffc4 	addi	r2,r2,-1
  805e34:	a884703a 	and	r2,r21,r2
  805e38:	103fec1e 	bne	r2,zero,805dec <_dtoa_r+0x2dc>
  805e3c:	00c02074 	movhi	r3,129
  805e40:	18c6ad04 	addi	r3,r3,6836
  805e44:	003feb06 	br	805df4 <_dtoa_r+0x2e4>
  805e48:	d8802917 	ldw	r2,164(sp)
  805e4c:	19000204 	addi	r4,r3,8
  805e50:	11000015 	stw	r4,0(r2)
  805e54:	003f6206 	br	805be0 <_dtoa_r+0xd0>
  805e58:	ddc00117 	ldw	r23,4(sp)
  805e5c:	d8800217 	ldw	r2,8(sp)
  805e60:	01000804 	movi	r4,32
  805e64:	b8c10c84 	addi	r3,r23,1074
  805e68:	18a3883a 	add	r17,r3,r2
  805e6c:	2441b80e 	bge	r4,r17,806550 <_dtoa_r+0xa40>
  805e70:	00c01004 	movi	r3,64
  805e74:	1c47c83a 	sub	r3,r3,r17
  805e78:	88bff804 	addi	r2,r17,-32
  805e7c:	a8c6983a 	sll	r3,r21,r3
  805e80:	a084d83a 	srl	r2,r20,r2
  805e84:	1888b03a 	or	r4,r3,r2
  805e88:	080bd480 	call	80bd48 <__floatunsidf>
  805e8c:	1011883a 	mov	r8,r2
  805e90:	00bf8434 	movhi	r2,65040
  805e94:	01000044 	movi	r4,1
  805e98:	10d3883a 	add	r9,r2,r3
  805e9c:	8dbef344 	addi	r22,r17,-1075
  805ea0:	d9000815 	stw	r4,32(sp)
  805ea4:	003f6f06 	br	805c64 <_dtoa_r+0x154>
  805ea8:	d8001715 	stw	zero,92(sp)
  805eac:	04400044 	movi	r17,1
  805eb0:	00bfffc4 	movi	r2,-1
  805eb4:	00c00044 	movi	r3,1
  805eb8:	d8800e15 	stw	r2,56(sp)
  805ebc:	d8002615 	stw	zero,152(sp)
  805ec0:	d8800f15 	stw	r2,60(sp)
  805ec4:	d8c00b15 	stw	r3,44(sp)
  805ec8:	1021883a 	mov	r16,r2
  805ecc:	d8801617 	ldw	r2,88(sp)
  805ed0:	10001115 	stw	zero,68(r2)
  805ed4:	d8801617 	ldw	r2,88(sp)
  805ed8:	11401117 	ldw	r5,68(r2)
  805edc:	1009883a 	mov	r4,r2
  805ee0:	08092240 	call	809224 <_Balloc>
  805ee4:	d8c01617 	ldw	r3,88(sp)
  805ee8:	d8800515 	stw	r2,20(sp)
  805eec:	18801015 	stw	r2,64(r3)
  805ef0:	00800384 	movi	r2,14
  805ef4:	14006836 	bltu	r2,r16,806098 <_dtoa_r+0x588>
  805ef8:	8805003a 	cmpeq	r2,r17,zero
  805efc:	1000661e 	bne	r2,zero,806098 <_dtoa_r+0x588>
  805f00:	d9000d17 	ldw	r4,52(sp)
  805f04:	0102300e 	bge	zero,r4,8067c8 <_dtoa_r+0xcb8>
  805f08:	208003cc 	andi	r2,r4,15
  805f0c:	100490fa 	slli	r2,r2,3
  805f10:	2025d13a 	srai	r18,r4,4
  805f14:	00c02074 	movhi	r3,129
  805f18:	18c6c004 	addi	r3,r3,6912
  805f1c:	10c5883a 	add	r2,r2,r3
  805f20:	90c0040c 	andi	r3,r18,16
  805f24:	14000017 	ldw	r16,0(r2)
  805f28:	14400117 	ldw	r17,4(r2)
  805f2c:	18036a1e 	bne	r3,zero,806cd8 <_dtoa_r+0x11c8>
  805f30:	05800084 	movi	r22,2
  805f34:	90001026 	beq	r18,zero,805f78 <_dtoa_r+0x468>
  805f38:	04c02074 	movhi	r19,129
  805f3c:	9cc6f204 	addi	r19,r19,7112
  805f40:	9080004c 	andi	r2,r18,1
  805f44:	1005003a 	cmpeq	r2,r2,zero
  805f48:	1000081e 	bne	r2,zero,805f6c <_dtoa_r+0x45c>
  805f4c:	99800017 	ldw	r6,0(r19)
  805f50:	99c00117 	ldw	r7,4(r19)
  805f54:	880b883a 	mov	r5,r17
  805f58:	8009883a 	mov	r4,r16
  805f5c:	080b5940 	call	80b594 <__muldf3>
  805f60:	1021883a 	mov	r16,r2
  805f64:	b5800044 	addi	r22,r22,1
  805f68:	1823883a 	mov	r17,r3
  805f6c:	9025d07a 	srai	r18,r18,1
  805f70:	9cc00204 	addi	r19,r19,8
  805f74:	903ff21e 	bne	r18,zero,805f40 <_dtoa_r+0x430>
  805f78:	a80b883a 	mov	r5,r21
  805f7c:	a009883a 	mov	r4,r20
  805f80:	880f883a 	mov	r7,r17
  805f84:	800d883a 	mov	r6,r16
  805f88:	080295c0 	call	80295c <__divdf3>
  805f8c:	1029883a 	mov	r20,r2
  805f90:	182b883a 	mov	r21,r3
  805f94:	d8c00c17 	ldw	r3,48(sp)
  805f98:	1805003a 	cmpeq	r2,r3,zero
  805f9c:	1000081e 	bne	r2,zero,805fc0 <_dtoa_r+0x4b0>
  805fa0:	0005883a 	mov	r2,zero
  805fa4:	00cffc34 	movhi	r3,16368
  805fa8:	180f883a 	mov	r7,r3
  805fac:	a009883a 	mov	r4,r20
  805fb0:	a80b883a 	mov	r5,r21
  805fb4:	100d883a 	mov	r6,r2
  805fb8:	080baf00 	call	80baf0 <__ltdf2>
  805fbc:	1003fe16 	blt	r2,zero,806fb8 <_dtoa_r+0x14a8>
  805fc0:	b009883a 	mov	r4,r22
  805fc4:	080bb780 	call	80bb78 <__floatsidf>
  805fc8:	180b883a 	mov	r5,r3
  805fcc:	1009883a 	mov	r4,r2
  805fd0:	a00d883a 	mov	r6,r20
  805fd4:	a80f883a 	mov	r7,r21
  805fd8:	080b5940 	call	80b594 <__muldf3>
  805fdc:	0011883a 	mov	r8,zero
  805fe0:	02500734 	movhi	r9,16412
  805fe4:	1009883a 	mov	r4,r2
  805fe8:	180b883a 	mov	r5,r3
  805fec:	480f883a 	mov	r7,r9
  805ff0:	400d883a 	mov	r6,r8
  805ff4:	08028e80 	call	8028e8 <__adddf3>
  805ff8:	d9000f17 	ldw	r4,60(sp)
  805ffc:	102d883a 	mov	r22,r2
  806000:	00bf3034 	movhi	r2,64704
  806004:	18b9883a 	add	fp,r3,r2
  806008:	e02f883a 	mov	r23,fp
  80600c:	20028f1e 	bne	r4,zero,806a4c <_dtoa_r+0xf3c>
  806010:	0005883a 	mov	r2,zero
  806014:	00d00534 	movhi	r3,16404
  806018:	a009883a 	mov	r4,r20
  80601c:	a80b883a 	mov	r5,r21
  806020:	180f883a 	mov	r7,r3
  806024:	100d883a 	mov	r6,r2
  806028:	08028680 	call	802868 <__subdf3>
  80602c:	1009883a 	mov	r4,r2
  806030:	e00f883a 	mov	r7,fp
  806034:	180b883a 	mov	r5,r3
  806038:	b00d883a 	mov	r6,r22
  80603c:	1025883a 	mov	r18,r2
  806040:	1827883a 	mov	r19,r3
  806044:	080b9e00 	call	80b9e0 <__gtdf2>
  806048:	00834f16 	blt	zero,r2,806d88 <_dtoa_r+0x1278>
  80604c:	e0e0003c 	xorhi	r3,fp,32768
  806050:	9009883a 	mov	r4,r18
  806054:	980b883a 	mov	r5,r19
  806058:	180f883a 	mov	r7,r3
  80605c:	b00d883a 	mov	r6,r22
  806060:	080baf00 	call	80baf0 <__ltdf2>
  806064:	1000080e 	bge	r2,zero,806088 <_dtoa_r+0x578>
  806068:	0027883a 	mov	r19,zero
  80606c:	0025883a 	mov	r18,zero
  806070:	d8802617 	ldw	r2,152(sp)
  806074:	df000517 	ldw	fp,20(sp)
  806078:	d8000615 	stw	zero,24(sp)
  80607c:	0084303a 	nor	r2,zero,r2
  806080:	d8800d15 	stw	r2,52(sp)
  806084:	00019b06 	br	8066f4 <_dtoa_r+0xbe4>
  806088:	d9801217 	ldw	r6,72(sp)
  80608c:	d8801317 	ldw	r2,76(sp)
  806090:	3029883a 	mov	r20,r6
  806094:	102b883a 	mov	r21,r2
  806098:	d8c00217 	ldw	r3,8(sp)
  80609c:	18008516 	blt	r3,zero,8062b4 <_dtoa_r+0x7a4>
  8060a0:	d9000d17 	ldw	r4,52(sp)
  8060a4:	00800384 	movi	r2,14
  8060a8:	11008216 	blt	r2,r4,8062b4 <_dtoa_r+0x7a4>
  8060ac:	200490fa 	slli	r2,r4,3
  8060b0:	d9802617 	ldw	r6,152(sp)
  8060b4:	00c02074 	movhi	r3,129
  8060b8:	18c6c004 	addi	r3,r3,6912
  8060bc:	10c5883a 	add	r2,r2,r3
  8060c0:	14800017 	ldw	r18,0(r2)
  8060c4:	14c00117 	ldw	r19,4(r2)
  8060c8:	30031e16 	blt	r6,zero,806d44 <_dtoa_r+0x1234>
  8060cc:	d9000517 	ldw	r4,20(sp)
  8060d0:	d8c00f17 	ldw	r3,60(sp)
  8060d4:	a823883a 	mov	r17,r21
  8060d8:	a021883a 	mov	r16,r20
  8060dc:	192b883a 	add	r21,r3,r4
  8060e0:	2039883a 	mov	fp,r4
  8060e4:	00000f06 	br	806124 <_dtoa_r+0x614>
  8060e8:	0005883a 	mov	r2,zero
  8060ec:	00d00934 	movhi	r3,16420
  8060f0:	5009883a 	mov	r4,r10
  8060f4:	580b883a 	mov	r5,r11
  8060f8:	180f883a 	mov	r7,r3
  8060fc:	100d883a 	mov	r6,r2
  806100:	080b5940 	call	80b594 <__muldf3>
  806104:	180b883a 	mov	r5,r3
  806108:	000d883a 	mov	r6,zero
  80610c:	000f883a 	mov	r7,zero
  806110:	1009883a 	mov	r4,r2
  806114:	1021883a 	mov	r16,r2
  806118:	1823883a 	mov	r17,r3
  80611c:	0802bb40 	call	802bb4 <__nedf2>
  806120:	10004526 	beq	r2,zero,806238 <_dtoa_r+0x728>
  806124:	900d883a 	mov	r6,r18
  806128:	980f883a 	mov	r7,r19
  80612c:	8009883a 	mov	r4,r16
  806130:	880b883a 	mov	r5,r17
  806134:	080295c0 	call	80295c <__divdf3>
  806138:	180b883a 	mov	r5,r3
  80613c:	1009883a 	mov	r4,r2
  806140:	080bc700 	call	80bc70 <__fixdfsi>
  806144:	1009883a 	mov	r4,r2
  806148:	1029883a 	mov	r20,r2
  80614c:	080bb780 	call	80bb78 <__floatsidf>
  806150:	180f883a 	mov	r7,r3
  806154:	9009883a 	mov	r4,r18
  806158:	980b883a 	mov	r5,r19
  80615c:	100d883a 	mov	r6,r2
  806160:	080b5940 	call	80b594 <__muldf3>
  806164:	180f883a 	mov	r7,r3
  806168:	880b883a 	mov	r5,r17
  80616c:	8009883a 	mov	r4,r16
  806170:	100d883a 	mov	r6,r2
  806174:	08028680 	call	802868 <__subdf3>
  806178:	1015883a 	mov	r10,r2
  80617c:	a0800c04 	addi	r2,r20,48
  806180:	e0800005 	stb	r2,0(fp)
  806184:	e7000044 	addi	fp,fp,1
  806188:	1817883a 	mov	r11,r3
  80618c:	e57fd61e 	bne	fp,r21,8060e8 <_dtoa_r+0x5d8>
  806190:	500d883a 	mov	r6,r10
  806194:	180f883a 	mov	r7,r3
  806198:	5009883a 	mov	r4,r10
  80619c:	180b883a 	mov	r5,r3
  8061a0:	08028e80 	call	8028e8 <__adddf3>
  8061a4:	100d883a 	mov	r6,r2
  8061a8:	9009883a 	mov	r4,r18
  8061ac:	980b883a 	mov	r5,r19
  8061b0:	180f883a 	mov	r7,r3
  8061b4:	1021883a 	mov	r16,r2
  8061b8:	1823883a 	mov	r17,r3
  8061bc:	080baf00 	call	80baf0 <__ltdf2>
  8061c0:	10000816 	blt	r2,zero,8061e4 <_dtoa_r+0x6d4>
  8061c4:	980b883a 	mov	r5,r19
  8061c8:	800d883a 	mov	r6,r16
  8061cc:	880f883a 	mov	r7,r17
  8061d0:	9009883a 	mov	r4,r18
  8061d4:	080b9580 	call	80b958 <__eqdf2>
  8061d8:	1000171e 	bne	r2,zero,806238 <_dtoa_r+0x728>
  8061dc:	a080004c 	andi	r2,r20,1
  8061e0:	10001526 	beq	r2,zero,806238 <_dtoa_r+0x728>
  8061e4:	d8800d17 	ldw	r2,52(sp)
  8061e8:	d8800415 	stw	r2,16(sp)
  8061ec:	e009883a 	mov	r4,fp
  8061f0:	213fffc4 	addi	r4,r4,-1
  8061f4:	20c00007 	ldb	r3,0(r4)
  8061f8:	00800e44 	movi	r2,57
  8061fc:	1880081e 	bne	r3,r2,806220 <_dtoa_r+0x710>
  806200:	d8800517 	ldw	r2,20(sp)
  806204:	113ffa1e 	bne	r2,r4,8061f0 <_dtoa_r+0x6e0>
  806208:	d8c00417 	ldw	r3,16(sp)
  80620c:	d9800517 	ldw	r6,20(sp)
  806210:	00800c04 	movi	r2,48
  806214:	18c00044 	addi	r3,r3,1
  806218:	d8c00415 	stw	r3,16(sp)
  80621c:	30800005 	stb	r2,0(r6)
  806220:	20800003 	ldbu	r2,0(r4)
  806224:	d8c00417 	ldw	r3,16(sp)
  806228:	27000044 	addi	fp,r4,1
  80622c:	10800044 	addi	r2,r2,1
  806230:	d8c00d15 	stw	r3,52(sp)
  806234:	20800005 	stb	r2,0(r4)
  806238:	d9001617 	ldw	r4,88(sp)
  80623c:	d9400717 	ldw	r5,28(sp)
  806240:	0808ca40 	call	808ca4 <_Bfree>
  806244:	e0000005 	stb	zero,0(fp)
  806248:	d9800d17 	ldw	r6,52(sp)
  80624c:	d8c02717 	ldw	r3,156(sp)
  806250:	d9002917 	ldw	r4,164(sp)
  806254:	30800044 	addi	r2,r6,1
  806258:	18800015 	stw	r2,0(r3)
  80625c:	20029c26 	beq	r4,zero,806cd0 <_dtoa_r+0x11c0>
  806260:	d8c00517 	ldw	r3,20(sp)
  806264:	27000015 	stw	fp,0(r4)
  806268:	003e5d06 	br	805be0 <_dtoa_r+0xd0>
  80626c:	d9800d17 	ldw	r6,52(sp)
  806270:	00c02074 	movhi	r3,129
  806274:	18c6c004 	addi	r3,r3,6912
  806278:	d9001217 	ldw	r4,72(sp)
  80627c:	300490fa 	slli	r2,r6,3
  806280:	d9401317 	ldw	r5,76(sp)
  806284:	10c5883a 	add	r2,r2,r3
  806288:	12000017 	ldw	r8,0(r2)
  80628c:	12400117 	ldw	r9,4(r2)
  806290:	400d883a 	mov	r6,r8
  806294:	480f883a 	mov	r7,r9
  806298:	080baf00 	call	80baf0 <__ltdf2>
  80629c:	1000030e 	bge	r2,zero,8062ac <_dtoa_r+0x79c>
  8062a0:	d8800d17 	ldw	r2,52(sp)
  8062a4:	10bfffc4 	addi	r2,r2,-1
  8062a8:	d8800d15 	stw	r2,52(sp)
  8062ac:	d8000c15 	stw	zero,48(sp)
  8062b0:	003ea806 	br	805d54 <_dtoa_r+0x244>
  8062b4:	d9000b17 	ldw	r4,44(sp)
  8062b8:	202cc03a 	cmpne	r22,r4,zero
  8062bc:	b000c71e 	bne	r22,zero,8065dc <_dtoa_r+0xacc>
  8062c0:	dc001117 	ldw	r16,68(sp)
  8062c4:	dc801017 	ldw	r18,64(sp)
  8062c8:	0027883a 	mov	r19,zero
  8062cc:	04000b0e 	bge	zero,r16,8062fc <_dtoa_r+0x7ec>
  8062d0:	d8c00a17 	ldw	r3,40(sp)
  8062d4:	00c0090e 	bge	zero,r3,8062fc <_dtoa_r+0x7ec>
  8062d8:	8005883a 	mov	r2,r16
  8062dc:	1c011316 	blt	r3,r16,80672c <_dtoa_r+0xc1c>
  8062e0:	d9000a17 	ldw	r4,40(sp)
  8062e4:	d9801117 	ldw	r6,68(sp)
  8062e8:	80a1c83a 	sub	r16,r16,r2
  8062ec:	2089c83a 	sub	r4,r4,r2
  8062f0:	308dc83a 	sub	r6,r6,r2
  8062f4:	d9000a15 	stw	r4,40(sp)
  8062f8:	d9801115 	stw	r6,68(sp)
  8062fc:	d8801017 	ldw	r2,64(sp)
  806300:	0080150e 	bge	zero,r2,806358 <_dtoa_r+0x848>
  806304:	d8c00b17 	ldw	r3,44(sp)
  806308:	1805003a 	cmpeq	r2,r3,zero
  80630c:	1001c91e 	bne	r2,zero,806a34 <_dtoa_r+0xf24>
  806310:	04800e0e 	bge	zero,r18,80634c <_dtoa_r+0x83c>
  806314:	d9001617 	ldw	r4,88(sp)
  806318:	980b883a 	mov	r5,r19
  80631c:	900d883a 	mov	r6,r18
  806320:	0809a580 	call	809a58 <__pow5mult>
  806324:	d9001617 	ldw	r4,88(sp)
  806328:	d9800717 	ldw	r6,28(sp)
  80632c:	100b883a 	mov	r5,r2
  806330:	1027883a 	mov	r19,r2
  806334:	08097340 	call	809734 <__multiply>
  806338:	d9001617 	ldw	r4,88(sp)
  80633c:	d9400717 	ldw	r5,28(sp)
  806340:	1023883a 	mov	r17,r2
  806344:	0808ca40 	call	808ca4 <_Bfree>
  806348:	dc400715 	stw	r17,28(sp)
  80634c:	d9001017 	ldw	r4,64(sp)
  806350:	248dc83a 	sub	r6,r4,r18
  806354:	30010e1e 	bne	r6,zero,806790 <_dtoa_r+0xc80>
  806358:	d9001617 	ldw	r4,88(sp)
  80635c:	04400044 	movi	r17,1
  806360:	880b883a 	mov	r5,r17
  806364:	080991c0 	call	80991c <__i2b>
  806368:	d9800917 	ldw	r6,36(sp)
  80636c:	1025883a 	mov	r18,r2
  806370:	0180040e 	bge	zero,r6,806384 <_dtoa_r+0x874>
  806374:	d9001617 	ldw	r4,88(sp)
  806378:	100b883a 	mov	r5,r2
  80637c:	0809a580 	call	809a58 <__pow5mult>
  806380:	1025883a 	mov	r18,r2
  806384:	d8801717 	ldw	r2,92(sp)
  806388:	8880f30e 	bge	r17,r2,806758 <_dtoa_r+0xc48>
  80638c:	0023883a 	mov	r17,zero
  806390:	d9800917 	ldw	r6,36(sp)
  806394:	30019e1e 	bne	r6,zero,806a10 <_dtoa_r+0xf00>
  806398:	00c00044 	movi	r3,1
  80639c:	d9000a17 	ldw	r4,40(sp)
  8063a0:	20c5883a 	add	r2,r4,r3
  8063a4:	10c007cc 	andi	r3,r2,31
  8063a8:	1800841e 	bne	r3,zero,8065bc <_dtoa_r+0xaac>
  8063ac:	00800704 	movi	r2,28
  8063b0:	d9000a17 	ldw	r4,40(sp)
  8063b4:	d9801117 	ldw	r6,68(sp)
  8063b8:	80a1883a 	add	r16,r16,r2
  8063bc:	2089883a 	add	r4,r4,r2
  8063c0:	308d883a 	add	r6,r6,r2
  8063c4:	d9000a15 	stw	r4,40(sp)
  8063c8:	d9801115 	stw	r6,68(sp)
  8063cc:	d8801117 	ldw	r2,68(sp)
  8063d0:	0080050e 	bge	zero,r2,8063e8 <_dtoa_r+0x8d8>
  8063d4:	d9400717 	ldw	r5,28(sp)
  8063d8:	d9001617 	ldw	r4,88(sp)
  8063dc:	100d883a 	mov	r6,r2
  8063e0:	08095e80 	call	8095e8 <__lshift>
  8063e4:	d8800715 	stw	r2,28(sp)
  8063e8:	d8c00a17 	ldw	r3,40(sp)
  8063ec:	00c0050e 	bge	zero,r3,806404 <_dtoa_r+0x8f4>
  8063f0:	d9001617 	ldw	r4,88(sp)
  8063f4:	900b883a 	mov	r5,r18
  8063f8:	180d883a 	mov	r6,r3
  8063fc:	08095e80 	call	8095e8 <__lshift>
  806400:	1025883a 	mov	r18,r2
  806404:	d9000c17 	ldw	r4,48(sp)
  806408:	2005003a 	cmpeq	r2,r4,zero
  80640c:	10016f26 	beq	r2,zero,8069cc <_dtoa_r+0xebc>
  806410:	d9000f17 	ldw	r4,60(sp)
  806414:	0102170e 	bge	zero,r4,806c74 <_dtoa_r+0x1164>
  806418:	d9800b17 	ldw	r6,44(sp)
  80641c:	3005003a 	cmpeq	r2,r6,zero
  806420:	1000881e 	bne	r2,zero,806644 <_dtoa_r+0xb34>
  806424:	0400050e 	bge	zero,r16,80643c <_dtoa_r+0x92c>
  806428:	d9001617 	ldw	r4,88(sp)
  80642c:	980b883a 	mov	r5,r19
  806430:	800d883a 	mov	r6,r16
  806434:	08095e80 	call	8095e8 <__lshift>
  806438:	1027883a 	mov	r19,r2
  80643c:	8804c03a 	cmpne	r2,r17,zero
  806440:	1002541e 	bne	r2,zero,806d94 <_dtoa_r+0x1284>
  806444:	980b883a 	mov	r5,r19
  806448:	dd800517 	ldw	r22,20(sp)
  80644c:	dcc00615 	stw	r19,24(sp)
  806450:	a700004c 	andi	fp,r20,1
  806454:	2827883a 	mov	r19,r5
  806458:	d9000717 	ldw	r4,28(sp)
  80645c:	900b883a 	mov	r5,r18
  806460:	08058f80 	call	8058f8 <quorem>
  806464:	d9000717 	ldw	r4,28(sp)
  806468:	d9400617 	ldw	r5,24(sp)
  80646c:	1023883a 	mov	r17,r2
  806470:	8dc00c04 	addi	r23,r17,48
  806474:	0808e000 	call	808e00 <__mcmp>
  806478:	d9001617 	ldw	r4,88(sp)
  80647c:	900b883a 	mov	r5,r18
  806480:	980d883a 	mov	r6,r19
  806484:	1029883a 	mov	r20,r2
  806488:	080945c0 	call	80945c <__mdiff>
  80648c:	102b883a 	mov	r21,r2
  806490:	10800317 	ldw	r2,12(r2)
  806494:	1001281e 	bne	r2,zero,806938 <_dtoa_r+0xe28>
  806498:	d9000717 	ldw	r4,28(sp)
  80649c:	a80b883a 	mov	r5,r21
  8064a0:	0808e000 	call	808e00 <__mcmp>
  8064a4:	d9001617 	ldw	r4,88(sp)
  8064a8:	1021883a 	mov	r16,r2
  8064ac:	a80b883a 	mov	r5,r21
  8064b0:	0808ca40 	call	808ca4 <_Bfree>
  8064b4:	8000041e 	bne	r16,zero,8064c8 <_dtoa_r+0x9b8>
  8064b8:	d8801717 	ldw	r2,92(sp)
  8064bc:	1000021e 	bne	r2,zero,8064c8 <_dtoa_r+0x9b8>
  8064c0:	e004c03a 	cmpne	r2,fp,zero
  8064c4:	10011726 	beq	r2,zero,806924 <_dtoa_r+0xe14>
  8064c8:	a0010616 	blt	r20,zero,8068e4 <_dtoa_r+0xdd4>
  8064cc:	a000041e 	bne	r20,zero,8064e0 <_dtoa_r+0x9d0>
  8064d0:	d8c01717 	ldw	r3,92(sp)
  8064d4:	1800021e 	bne	r3,zero,8064e0 <_dtoa_r+0x9d0>
  8064d8:	e004c03a 	cmpne	r2,fp,zero
  8064dc:	10010126 	beq	r2,zero,8068e4 <_dtoa_r+0xdd4>
  8064e0:	04023d16 	blt	zero,r16,806dd8 <_dtoa_r+0x12c8>
  8064e4:	b5c00005 	stb	r23,0(r22)
  8064e8:	d9800517 	ldw	r6,20(sp)
  8064ec:	d9000f17 	ldw	r4,60(sp)
  8064f0:	b5800044 	addi	r22,r22,1
  8064f4:	3105883a 	add	r2,r6,r4
  8064f8:	b0806526 	beq	r22,r2,806690 <_dtoa_r+0xb80>
  8064fc:	d9400717 	ldw	r5,28(sp)
  806500:	d9001617 	ldw	r4,88(sp)
  806504:	01800284 	movi	r6,10
  806508:	000f883a 	mov	r7,zero
  80650c:	08099580 	call	809958 <__multadd>
  806510:	d8800715 	stw	r2,28(sp)
  806514:	d8800617 	ldw	r2,24(sp)
  806518:	14c10c26 	beq	r2,r19,80694c <_dtoa_r+0xe3c>
  80651c:	d9400617 	ldw	r5,24(sp)
  806520:	d9001617 	ldw	r4,88(sp)
  806524:	01800284 	movi	r6,10
  806528:	000f883a 	mov	r7,zero
  80652c:	08099580 	call	809958 <__multadd>
  806530:	d9001617 	ldw	r4,88(sp)
  806534:	980b883a 	mov	r5,r19
  806538:	01800284 	movi	r6,10
  80653c:	000f883a 	mov	r7,zero
  806540:	d8800615 	stw	r2,24(sp)
  806544:	08099580 	call	809958 <__multadd>
  806548:	1027883a 	mov	r19,r2
  80654c:	003fc206 	br	806458 <_dtoa_r+0x948>
  806550:	2445c83a 	sub	r2,r4,r17
  806554:	a088983a 	sll	r4,r20,r2
  806558:	003e4b06 	br	805e88 <_dtoa_r+0x378>
  80655c:	01bfffc4 	movi	r6,-1
  806560:	00800044 	movi	r2,1
  806564:	d9800e15 	stw	r6,56(sp)
  806568:	d9800f15 	stw	r6,60(sp)
  80656c:	d8800b15 	stw	r2,44(sp)
  806570:	d8c01617 	ldw	r3,88(sp)
  806574:	008005c4 	movi	r2,23
  806578:	18001115 	stw	zero,68(r3)
  80657c:	1580082e 	bgeu	r2,r22,8065a0 <_dtoa_r+0xa90>
  806580:	00c00104 	movi	r3,4
  806584:	0009883a 	mov	r4,zero
  806588:	18c7883a 	add	r3,r3,r3
  80658c:	18800504 	addi	r2,r3,20
  806590:	21000044 	addi	r4,r4,1
  806594:	b0bffc2e 	bgeu	r22,r2,806588 <_dtoa_r+0xa78>
  806598:	d9801617 	ldw	r6,88(sp)
  80659c:	31001115 	stw	r4,68(r6)
  8065a0:	dc000f17 	ldw	r16,60(sp)
  8065a4:	003e4b06 	br	805ed4 <_dtoa_r+0x3c4>
  8065a8:	d9801717 	ldw	r6,92(sp)
  8065ac:	0023883a 	mov	r17,zero
  8065b0:	31bfff04 	addi	r6,r6,-4
  8065b4:	d9801715 	stw	r6,92(sp)
  8065b8:	003df806 	br	805d9c <_dtoa_r+0x28c>
  8065bc:	00800804 	movi	r2,32
  8065c0:	10c9c83a 	sub	r4,r2,r3
  8065c4:	00c00104 	movi	r3,4
  8065c8:	19005a16 	blt	r3,r4,806734 <_dtoa_r+0xc24>
  8065cc:	008000c4 	movi	r2,3
  8065d0:	113f7e16 	blt	r2,r4,8063cc <_dtoa_r+0x8bc>
  8065d4:	20800704 	addi	r2,r4,28
  8065d8:	003f7506 	br	8063b0 <_dtoa_r+0x8a0>
  8065dc:	d9801717 	ldw	r6,92(sp)
  8065e0:	00800044 	movi	r2,1
  8065e4:	1180a10e 	bge	r2,r6,80686c <_dtoa_r+0xd5c>
  8065e8:	d9800f17 	ldw	r6,60(sp)
  8065ec:	d8c01017 	ldw	r3,64(sp)
  8065f0:	30bfffc4 	addi	r2,r6,-1
  8065f4:	1881c616 	blt	r3,r2,806d10 <_dtoa_r+0x1200>
  8065f8:	18a5c83a 	sub	r18,r3,r2
  8065fc:	d8800f17 	ldw	r2,60(sp)
  806600:	10026216 	blt	r2,zero,806f8c <_dtoa_r+0x147c>
  806604:	dc001117 	ldw	r16,68(sp)
  806608:	1007883a 	mov	r3,r2
  80660c:	d9800a17 	ldw	r6,40(sp)
  806610:	d8801117 	ldw	r2,68(sp)
  806614:	d9001617 	ldw	r4,88(sp)
  806618:	30cd883a 	add	r6,r6,r3
  80661c:	10c5883a 	add	r2,r2,r3
  806620:	01400044 	movi	r5,1
  806624:	d9800a15 	stw	r6,40(sp)
  806628:	d8801115 	stw	r2,68(sp)
  80662c:	080991c0 	call	80991c <__i2b>
  806630:	1027883a 	mov	r19,r2
  806634:	003f2506 	br	8062cc <_dtoa_r+0x7bc>
  806638:	00c02074 	movhi	r3,129
  80663c:	18c63304 	addi	r3,r3,6348
  806640:	003d6706 	br	805be0 <_dtoa_r+0xd0>
  806644:	dd800517 	ldw	r22,20(sp)
  806648:	04000044 	movi	r16,1
  80664c:	00000706 	br	80666c <_dtoa_r+0xb5c>
  806650:	d9400717 	ldw	r5,28(sp)
  806654:	d9001617 	ldw	r4,88(sp)
  806658:	01800284 	movi	r6,10
  80665c:	000f883a 	mov	r7,zero
  806660:	08099580 	call	809958 <__multadd>
  806664:	d8800715 	stw	r2,28(sp)
  806668:	84000044 	addi	r16,r16,1
  80666c:	d9000717 	ldw	r4,28(sp)
  806670:	900b883a 	mov	r5,r18
  806674:	08058f80 	call	8058f8 <quorem>
  806678:	15c00c04 	addi	r23,r2,48
  80667c:	b5c00005 	stb	r23,0(r22)
  806680:	d8c00f17 	ldw	r3,60(sp)
  806684:	b5800044 	addi	r22,r22,1
  806688:	80fff116 	blt	r16,r3,806650 <_dtoa_r+0xb40>
  80668c:	d8000615 	stw	zero,24(sp)
  806690:	d9400717 	ldw	r5,28(sp)
  806694:	d9001617 	ldw	r4,88(sp)
  806698:	01800044 	movi	r6,1
  80669c:	08095e80 	call	8095e8 <__lshift>
  8066a0:	1009883a 	mov	r4,r2
  8066a4:	900b883a 	mov	r5,r18
  8066a8:	d8800715 	stw	r2,28(sp)
  8066ac:	0808e000 	call	808e00 <__mcmp>
  8066b0:	00803c0e 	bge	zero,r2,8067a4 <_dtoa_r+0xc94>
  8066b4:	b009883a 	mov	r4,r22
  8066b8:	213fffc4 	addi	r4,r4,-1
  8066bc:	21400003 	ldbu	r5,0(r4)
  8066c0:	00800e44 	movi	r2,57
  8066c4:	28c03fcc 	andi	r3,r5,255
  8066c8:	18c0201c 	xori	r3,r3,128
  8066cc:	18ffe004 	addi	r3,r3,-128
  8066d0:	1881981e 	bne	r3,r2,806d34 <_dtoa_r+0x1224>
  8066d4:	d9800517 	ldw	r6,20(sp)
  8066d8:	21bff71e 	bne	r4,r6,8066b8 <_dtoa_r+0xba8>
  8066dc:	d8800d17 	ldw	r2,52(sp)
  8066e0:	37000044 	addi	fp,r6,1
  8066e4:	10800044 	addi	r2,r2,1
  8066e8:	d8800d15 	stw	r2,52(sp)
  8066ec:	00800c44 	movi	r2,49
  8066f0:	30800005 	stb	r2,0(r6)
  8066f4:	d9001617 	ldw	r4,88(sp)
  8066f8:	900b883a 	mov	r5,r18
  8066fc:	0808ca40 	call	808ca4 <_Bfree>
  806700:	983ecd26 	beq	r19,zero,806238 <_dtoa_r+0x728>
  806704:	d8c00617 	ldw	r3,24(sp)
  806708:	18000426 	beq	r3,zero,80671c <_dtoa_r+0xc0c>
  80670c:	1cc00326 	beq	r3,r19,80671c <_dtoa_r+0xc0c>
  806710:	d9001617 	ldw	r4,88(sp)
  806714:	180b883a 	mov	r5,r3
  806718:	0808ca40 	call	808ca4 <_Bfree>
  80671c:	d9001617 	ldw	r4,88(sp)
  806720:	980b883a 	mov	r5,r19
  806724:	0808ca40 	call	808ca4 <_Bfree>
  806728:	003ec306 	br	806238 <_dtoa_r+0x728>
  80672c:	1805883a 	mov	r2,r3
  806730:	003eeb06 	br	8062e0 <_dtoa_r+0x7d0>
  806734:	d9800a17 	ldw	r6,40(sp)
  806738:	d8c01117 	ldw	r3,68(sp)
  80673c:	20bfff04 	addi	r2,r4,-4
  806740:	308d883a 	add	r6,r6,r2
  806744:	1887883a 	add	r3,r3,r2
  806748:	80a1883a 	add	r16,r16,r2
  80674c:	d9800a15 	stw	r6,40(sp)
  806750:	d8c01115 	stw	r3,68(sp)
  806754:	003f1d06 	br	8063cc <_dtoa_r+0x8bc>
  806758:	a03f0c1e 	bne	r20,zero,80638c <_dtoa_r+0x87c>
  80675c:	00800434 	movhi	r2,16
  806760:	10bfffc4 	addi	r2,r2,-1
  806764:	a884703a 	and	r2,r21,r2
  806768:	103f081e 	bne	r2,zero,80638c <_dtoa_r+0x87c>
  80676c:	a89ffc2c 	andhi	r2,r21,32752
  806770:	103f0626 	beq	r2,zero,80638c <_dtoa_r+0x87c>
  806774:	d8c01117 	ldw	r3,68(sp)
  806778:	d9000a17 	ldw	r4,40(sp)
  80677c:	18c00044 	addi	r3,r3,1
  806780:	21000044 	addi	r4,r4,1
  806784:	d8c01115 	stw	r3,68(sp)
  806788:	d9000a15 	stw	r4,40(sp)
  80678c:	003f0006 	br	806390 <_dtoa_r+0x880>
  806790:	d9400717 	ldw	r5,28(sp)
  806794:	d9001617 	ldw	r4,88(sp)
  806798:	0809a580 	call	809a58 <__pow5mult>
  80679c:	d8800715 	stw	r2,28(sp)
  8067a0:	003eed06 	br	806358 <_dtoa_r+0x848>
  8067a4:	1000021e 	bne	r2,zero,8067b0 <_dtoa_r+0xca0>
  8067a8:	b880004c 	andi	r2,r23,1
  8067ac:	103fc11e 	bne	r2,zero,8066b4 <_dtoa_r+0xba4>
  8067b0:	b5bfffc4 	addi	r22,r22,-1
  8067b4:	b0c00007 	ldb	r3,0(r22)
  8067b8:	00800c04 	movi	r2,48
  8067bc:	18bffc26 	beq	r3,r2,8067b0 <_dtoa_r+0xca0>
  8067c0:	b7000044 	addi	fp,r22,1
  8067c4:	003fcb06 	br	8066f4 <_dtoa_r+0xbe4>
  8067c8:	d9800d17 	ldw	r6,52(sp)
  8067cc:	018fc83a 	sub	r7,zero,r6
  8067d0:	3801f726 	beq	r7,zero,806fb0 <_dtoa_r+0x14a0>
  8067d4:	398003cc 	andi	r6,r7,15
  8067d8:	300c90fa 	slli	r6,r6,3
  8067dc:	01402074 	movhi	r5,129
  8067e0:	2946c004 	addi	r5,r5,6912
  8067e4:	d9001217 	ldw	r4,72(sp)
  8067e8:	314d883a 	add	r6,r6,r5
  8067ec:	30c00117 	ldw	r3,4(r6)
  8067f0:	30800017 	ldw	r2,0(r6)
  8067f4:	d9401317 	ldw	r5,76(sp)
  8067f8:	3821d13a 	srai	r16,r7,4
  8067fc:	100d883a 	mov	r6,r2
  806800:	180f883a 	mov	r7,r3
  806804:	080b5940 	call	80b594 <__muldf3>
  806808:	1011883a 	mov	r8,r2
  80680c:	1813883a 	mov	r9,r3
  806810:	1029883a 	mov	r20,r2
  806814:	182b883a 	mov	r21,r3
  806818:	8001e526 	beq	r16,zero,806fb0 <_dtoa_r+0x14a0>
  80681c:	05800084 	movi	r22,2
  806820:	04402074 	movhi	r17,129
  806824:	8c46f204 	addi	r17,r17,7112
  806828:	8080004c 	andi	r2,r16,1
  80682c:	1005003a 	cmpeq	r2,r2,zero
  806830:	1000081e 	bne	r2,zero,806854 <_dtoa_r+0xd44>
  806834:	89800017 	ldw	r6,0(r17)
  806838:	89c00117 	ldw	r7,4(r17)
  80683c:	480b883a 	mov	r5,r9
  806840:	4009883a 	mov	r4,r8
  806844:	080b5940 	call	80b594 <__muldf3>
  806848:	1011883a 	mov	r8,r2
  80684c:	b5800044 	addi	r22,r22,1
  806850:	1813883a 	mov	r9,r3
  806854:	8021d07a 	srai	r16,r16,1
  806858:	8c400204 	addi	r17,r17,8
  80685c:	803ff21e 	bne	r16,zero,806828 <_dtoa_r+0xd18>
  806860:	4029883a 	mov	r20,r8
  806864:	482b883a 	mov	r21,r9
  806868:	003dca06 	br	805f94 <_dtoa_r+0x484>
  80686c:	d9000817 	ldw	r4,32(sp)
  806870:	2005003a 	cmpeq	r2,r4,zero
  806874:	1001f61e 	bne	r2,zero,807050 <_dtoa_r+0x1540>
  806878:	dc001117 	ldw	r16,68(sp)
  80687c:	dc801017 	ldw	r18,64(sp)
  806880:	18c10cc4 	addi	r3,r3,1075
  806884:	003f6106 	br	80660c <_dtoa_r+0xafc>
  806888:	d8000b15 	stw	zero,44(sp)
  80688c:	d9802617 	ldw	r6,152(sp)
  806890:	d8c00d17 	ldw	r3,52(sp)
  806894:	30800044 	addi	r2,r6,1
  806898:	18ad883a 	add	r22,r3,r2
  80689c:	b13fffc4 	addi	r4,r22,-1
  8068a0:	d9000e15 	stw	r4,56(sp)
  8068a4:	0581f60e 	bge	zero,r22,807080 <_dtoa_r+0x1570>
  8068a8:	dd800f15 	stw	r22,60(sp)
  8068ac:	003f3006 	br	806570 <_dtoa_r+0xa60>
  8068b0:	d8000b15 	stw	zero,44(sp)
  8068b4:	d9002617 	ldw	r4,152(sp)
  8068b8:	0101eb0e 	bge	zero,r4,807068 <_dtoa_r+0x1558>
  8068bc:	202d883a 	mov	r22,r4
  8068c0:	d9000e15 	stw	r4,56(sp)
  8068c4:	d9000f15 	stw	r4,60(sp)
  8068c8:	003f2906 	br	806570 <_dtoa_r+0xa60>
  8068cc:	01800044 	movi	r6,1
  8068d0:	d9800b15 	stw	r6,44(sp)
  8068d4:	003ff706 	br	8068b4 <_dtoa_r+0xda4>
  8068d8:	01000044 	movi	r4,1
  8068dc:	d9000b15 	stw	r4,44(sp)
  8068e0:	003fea06 	br	80688c <_dtoa_r+0xd7c>
  8068e4:	04000c0e 	bge	zero,r16,806918 <_dtoa_r+0xe08>
  8068e8:	d9400717 	ldw	r5,28(sp)
  8068ec:	d9001617 	ldw	r4,88(sp)
  8068f0:	01800044 	movi	r6,1
  8068f4:	08095e80 	call	8095e8 <__lshift>
  8068f8:	1009883a 	mov	r4,r2
  8068fc:	900b883a 	mov	r5,r18
  806900:	d8800715 	stw	r2,28(sp)
  806904:	0808e000 	call	808e00 <__mcmp>
  806908:	0081e00e 	bge	zero,r2,80708c <_dtoa_r+0x157c>
  80690c:	bdc00044 	addi	r23,r23,1
  806910:	00800e84 	movi	r2,58
  806914:	b881a226 	beq	r23,r2,806fa0 <_dtoa_r+0x1490>
  806918:	b7000044 	addi	fp,r22,1
  80691c:	b5c00005 	stb	r23,0(r22)
  806920:	003f7406 	br	8066f4 <_dtoa_r+0xbe4>
  806924:	00800e44 	movi	r2,57
  806928:	b8819d26 	beq	r23,r2,806fa0 <_dtoa_r+0x1490>
  80692c:	053ffa0e 	bge	zero,r20,806918 <_dtoa_r+0xe08>
  806930:	8dc00c44 	addi	r23,r17,49
  806934:	003ff806 	br	806918 <_dtoa_r+0xe08>
  806938:	d9001617 	ldw	r4,88(sp)
  80693c:	a80b883a 	mov	r5,r21
  806940:	04000044 	movi	r16,1
  806944:	0808ca40 	call	808ca4 <_Bfree>
  806948:	003edf06 	br	8064c8 <_dtoa_r+0x9b8>
  80694c:	d9001617 	ldw	r4,88(sp)
  806950:	980b883a 	mov	r5,r19
  806954:	01800284 	movi	r6,10
  806958:	000f883a 	mov	r7,zero
  80695c:	08099580 	call	809958 <__multadd>
  806960:	1027883a 	mov	r19,r2
  806964:	d8800615 	stw	r2,24(sp)
  806968:	003ebb06 	br	806458 <_dtoa_r+0x948>
  80696c:	d9801117 	ldw	r6,68(sp)
  806970:	d8800d17 	ldw	r2,52(sp)
  806974:	d8000915 	stw	zero,36(sp)
  806978:	308dc83a 	sub	r6,r6,r2
  80697c:	0087c83a 	sub	r3,zero,r2
  806980:	d9801115 	stw	r6,68(sp)
  806984:	d8c01015 	stw	r3,64(sp)
  806988:	003cfe06 	br	805d84 <_dtoa_r+0x274>
  80698c:	018dc83a 	sub	r6,zero,r6
  806990:	d9801115 	stw	r6,68(sp)
  806994:	d8000a15 	stw	zero,40(sp)
  806998:	003cf306 	br	805d68 <_dtoa_r+0x258>
  80699c:	d9000d17 	ldw	r4,52(sp)
  8069a0:	080bb780 	call	80bb78 <__floatsidf>
  8069a4:	880b883a 	mov	r5,r17
  8069a8:	8009883a 	mov	r4,r16
  8069ac:	180f883a 	mov	r7,r3
  8069b0:	100d883a 	mov	r6,r2
  8069b4:	0802bb40 	call	802bb4 <__nedf2>
  8069b8:	103ce126 	beq	r2,zero,805d40 <_dtoa_r+0x230>
  8069bc:	d9800d17 	ldw	r6,52(sp)
  8069c0:	31bfffc4 	addi	r6,r6,-1
  8069c4:	d9800d15 	stw	r6,52(sp)
  8069c8:	003cdd06 	br	805d40 <_dtoa_r+0x230>
  8069cc:	d9000717 	ldw	r4,28(sp)
  8069d0:	900b883a 	mov	r5,r18
  8069d4:	0808e000 	call	808e00 <__mcmp>
  8069d8:	103e8d0e 	bge	r2,zero,806410 <_dtoa_r+0x900>
  8069dc:	d9400717 	ldw	r5,28(sp)
  8069e0:	d9001617 	ldw	r4,88(sp)
  8069e4:	01800284 	movi	r6,10
  8069e8:	000f883a 	mov	r7,zero
  8069ec:	08099580 	call	809958 <__multadd>
  8069f0:	d9800d17 	ldw	r6,52(sp)
  8069f4:	d8800715 	stw	r2,28(sp)
  8069f8:	31bfffc4 	addi	r6,r6,-1
  8069fc:	d9800d15 	stw	r6,52(sp)
  806a00:	b001a71e 	bne	r22,zero,8070a0 <_dtoa_r+0x1590>
  806a04:	d8800e17 	ldw	r2,56(sp)
  806a08:	d8800f15 	stw	r2,60(sp)
  806a0c:	003e8006 	br	806410 <_dtoa_r+0x900>
  806a10:	90800417 	ldw	r2,16(r18)
  806a14:	1085883a 	add	r2,r2,r2
  806a18:	1085883a 	add	r2,r2,r2
  806a1c:	1485883a 	add	r2,r2,r18
  806a20:	11000417 	ldw	r4,16(r2)
  806a24:	0808ccc0 	call	808ccc <__hi0bits>
  806a28:	00c00804 	movi	r3,32
  806a2c:	1887c83a 	sub	r3,r3,r2
  806a30:	003e5a06 	br	80639c <_dtoa_r+0x88c>
  806a34:	d9400717 	ldw	r5,28(sp)
  806a38:	d9801017 	ldw	r6,64(sp)
  806a3c:	d9001617 	ldw	r4,88(sp)
  806a40:	0809a580 	call	809a58 <__pow5mult>
  806a44:	d8800715 	stw	r2,28(sp)
  806a48:	003e4306 	br	806358 <_dtoa_r+0x848>
  806a4c:	d9800f17 	ldw	r6,60(sp)
  806a50:	d8800d17 	ldw	r2,52(sp)
  806a54:	d9800315 	stw	r6,12(sp)
  806a58:	d8800415 	stw	r2,16(sp)
  806a5c:	d8c00b17 	ldw	r3,44(sp)
  806a60:	1805003a 	cmpeq	r2,r3,zero
  806a64:	1000e21e 	bne	r2,zero,806df0 <_dtoa_r+0x12e0>
  806a68:	d9000317 	ldw	r4,12(sp)
  806a6c:	0005883a 	mov	r2,zero
  806a70:	00cff834 	movhi	r3,16352
  806a74:	200c90fa 	slli	r6,r4,3
  806a78:	01002074 	movhi	r4,129
  806a7c:	2106c004 	addi	r4,r4,6912
  806a80:	180b883a 	mov	r5,r3
  806a84:	310d883a 	add	r6,r6,r4
  806a88:	327fff17 	ldw	r9,-4(r6)
  806a8c:	323ffe17 	ldw	r8,-8(r6)
  806a90:	1009883a 	mov	r4,r2
  806a94:	480f883a 	mov	r7,r9
  806a98:	400d883a 	mov	r6,r8
  806a9c:	080295c0 	call	80295c <__divdf3>
  806aa0:	180b883a 	mov	r5,r3
  806aa4:	b00d883a 	mov	r6,r22
  806aa8:	b80f883a 	mov	r7,r23
  806aac:	1009883a 	mov	r4,r2
  806ab0:	08028680 	call	802868 <__subdf3>
  806ab4:	a80b883a 	mov	r5,r21
  806ab8:	a009883a 	mov	r4,r20
  806abc:	d8c01915 	stw	r3,100(sp)
  806ac0:	d8801815 	stw	r2,96(sp)
  806ac4:	080bc700 	call	80bc70 <__fixdfsi>
  806ac8:	1009883a 	mov	r4,r2
  806acc:	1027883a 	mov	r19,r2
  806ad0:	080bb780 	call	80bb78 <__floatsidf>
  806ad4:	a80b883a 	mov	r5,r21
  806ad8:	a009883a 	mov	r4,r20
  806adc:	180f883a 	mov	r7,r3
  806ae0:	100d883a 	mov	r6,r2
  806ae4:	08028680 	call	802868 <__subdf3>
  806ae8:	d9801817 	ldw	r6,96(sp)
  806aec:	1823883a 	mov	r17,r3
  806af0:	d8801415 	stw	r2,80(sp)
  806af4:	302d883a 	mov	r22,r6
  806af8:	d9800517 	ldw	r6,20(sp)
  806afc:	9cc00c04 	addi	r19,r19,48
  806b00:	dc401515 	stw	r17,84(sp)
  806b04:	d8c01917 	ldw	r3,100(sp)
  806b08:	34c00005 	stb	r19,0(r6)
  806b0c:	d8800517 	ldw	r2,20(sp)
  806b10:	d9401917 	ldw	r5,100(sp)
  806b14:	d9801417 	ldw	r6,80(sp)
  806b18:	b009883a 	mov	r4,r22
  806b1c:	880f883a 	mov	r7,r17
  806b20:	182f883a 	mov	r23,r3
  806b24:	17000044 	addi	fp,r2,1
  806b28:	080b9e00 	call	80b9e0 <__gtdf2>
  806b2c:	00804e16 	blt	zero,r2,806c68 <_dtoa_r+0x1158>
  806b30:	d9801417 	ldw	r6,80(sp)
  806b34:	0005883a 	mov	r2,zero
  806b38:	00cffc34 	movhi	r3,16368
  806b3c:	180b883a 	mov	r5,r3
  806b40:	880f883a 	mov	r7,r17
  806b44:	1009883a 	mov	r4,r2
  806b48:	08028680 	call	802868 <__subdf3>
  806b4c:	d9401917 	ldw	r5,100(sp)
  806b50:	180f883a 	mov	r7,r3
  806b54:	b009883a 	mov	r4,r22
  806b58:	100d883a 	mov	r6,r2
  806b5c:	080b9e00 	call	80b9e0 <__gtdf2>
  806b60:	00bda216 	blt	zero,r2,8061ec <_dtoa_r+0x6dc>
  806b64:	d8c00317 	ldw	r3,12(sp)
  806b68:	00800044 	movi	r2,1
  806b6c:	10c01216 	blt	r2,r3,806bb8 <_dtoa_r+0x10a8>
  806b70:	003d4506 	br	806088 <_dtoa_r+0x578>
  806b74:	d9801417 	ldw	r6,80(sp)
  806b78:	0005883a 	mov	r2,zero
  806b7c:	00cffc34 	movhi	r3,16368
  806b80:	180b883a 	mov	r5,r3
  806b84:	880f883a 	mov	r7,r17
  806b88:	1009883a 	mov	r4,r2
  806b8c:	08028680 	call	802868 <__subdf3>
  806b90:	d9c01b17 	ldw	r7,108(sp)
  806b94:	180b883a 	mov	r5,r3
  806b98:	1009883a 	mov	r4,r2
  806b9c:	b00d883a 	mov	r6,r22
  806ba0:	080baf00 	call	80baf0 <__ltdf2>
  806ba4:	103d9116 	blt	r2,zero,8061ec <_dtoa_r+0x6dc>
  806ba8:	d9800517 	ldw	r6,20(sp)
  806bac:	d9000317 	ldw	r4,12(sp)
  806bb0:	3105883a 	add	r2,r6,r4
  806bb4:	e0bd3426 	beq	fp,r2,806088 <_dtoa_r+0x578>
  806bb8:	04500934 	movhi	r17,16420
  806bbc:	0021883a 	mov	r16,zero
  806bc0:	b80b883a 	mov	r5,r23
  806bc4:	b009883a 	mov	r4,r22
  806bc8:	800d883a 	mov	r6,r16
  806bcc:	880f883a 	mov	r7,r17
  806bd0:	080b5940 	call	80b594 <__muldf3>
  806bd4:	d9401517 	ldw	r5,84(sp)
  806bd8:	d9001417 	ldw	r4,80(sp)
  806bdc:	880f883a 	mov	r7,r17
  806be0:	000d883a 	mov	r6,zero
  806be4:	d8801a15 	stw	r2,104(sp)
  806be8:	d8c01b15 	stw	r3,108(sp)
  806bec:	080b5940 	call	80b594 <__muldf3>
  806bf0:	180b883a 	mov	r5,r3
  806bf4:	1009883a 	mov	r4,r2
  806bf8:	1823883a 	mov	r17,r3
  806bfc:	1021883a 	mov	r16,r2
  806c00:	080bc700 	call	80bc70 <__fixdfsi>
  806c04:	1009883a 	mov	r4,r2
  806c08:	102b883a 	mov	r21,r2
  806c0c:	080bb780 	call	80bb78 <__floatsidf>
  806c10:	880b883a 	mov	r5,r17
  806c14:	8009883a 	mov	r4,r16
  806c18:	180f883a 	mov	r7,r3
  806c1c:	100d883a 	mov	r6,r2
  806c20:	08028680 	call	802868 <__subdf3>
  806c24:	1021883a 	mov	r16,r2
  806c28:	d9001b17 	ldw	r4,108(sp)
  806c2c:	1823883a 	mov	r17,r3
  806c30:	dc001415 	stw	r16,80(sp)
  806c34:	ad400c04 	addi	r21,r21,48
  806c38:	dc401515 	stw	r17,84(sp)
  806c3c:	d8801a17 	ldw	r2,104(sp)
  806c40:	e5400005 	stb	r21,0(fp)
  806c44:	202f883a 	mov	r23,r4
  806c48:	d9c01b17 	ldw	r7,108(sp)
  806c4c:	d9001417 	ldw	r4,80(sp)
  806c50:	880b883a 	mov	r5,r17
  806c54:	100d883a 	mov	r6,r2
  806c58:	102d883a 	mov	r22,r2
  806c5c:	e7000044 	addi	fp,fp,1
  806c60:	080baf00 	call	80baf0 <__ltdf2>
  806c64:	103fc30e 	bge	r2,zero,806b74 <_dtoa_r+0x1064>
  806c68:	d9000417 	ldw	r4,16(sp)
  806c6c:	d9000d15 	stw	r4,52(sp)
  806c70:	003d7106 	br	806238 <_dtoa_r+0x728>
  806c74:	d9801717 	ldw	r6,92(sp)
  806c78:	00800084 	movi	r2,2
  806c7c:	11bde60e 	bge	r2,r6,806418 <_dtoa_r+0x908>
  806c80:	203cfb1e 	bne	r4,zero,806070 <_dtoa_r+0x560>
  806c84:	d9001617 	ldw	r4,88(sp)
  806c88:	900b883a 	mov	r5,r18
  806c8c:	01800144 	movi	r6,5
  806c90:	000f883a 	mov	r7,zero
  806c94:	08099580 	call	809958 <__multadd>
  806c98:	d9000717 	ldw	r4,28(sp)
  806c9c:	100b883a 	mov	r5,r2
  806ca0:	1025883a 	mov	r18,r2
  806ca4:	0808e000 	call	808e00 <__mcmp>
  806ca8:	00bcf10e 	bge	zero,r2,806070 <_dtoa_r+0x560>
  806cac:	d8c00d17 	ldw	r3,52(sp)
  806cb0:	d9000517 	ldw	r4,20(sp)
  806cb4:	d8000615 	stw	zero,24(sp)
  806cb8:	18c00044 	addi	r3,r3,1
  806cbc:	d8c00d15 	stw	r3,52(sp)
  806cc0:	00800c44 	movi	r2,49
  806cc4:	27000044 	addi	fp,r4,1
  806cc8:	20800005 	stb	r2,0(r4)
  806ccc:	003e8906 	br	8066f4 <_dtoa_r+0xbe4>
  806cd0:	d8c00517 	ldw	r3,20(sp)
  806cd4:	003bc206 	br	805be0 <_dtoa_r+0xd0>
  806cd8:	01802074 	movhi	r6,129
  806cdc:	3186f204 	addi	r6,r6,7112
  806ce0:	30c00917 	ldw	r3,36(r6)
  806ce4:	30800817 	ldw	r2,32(r6)
  806ce8:	d9001217 	ldw	r4,72(sp)
  806cec:	d9401317 	ldw	r5,76(sp)
  806cf0:	180f883a 	mov	r7,r3
  806cf4:	100d883a 	mov	r6,r2
  806cf8:	080295c0 	call	80295c <__divdf3>
  806cfc:	948003cc 	andi	r18,r18,15
  806d00:	058000c4 	movi	r22,3
  806d04:	1029883a 	mov	r20,r2
  806d08:	182b883a 	mov	r21,r3
  806d0c:	003c8906 	br	805f34 <_dtoa_r+0x424>
  806d10:	d9001017 	ldw	r4,64(sp)
  806d14:	d9800917 	ldw	r6,36(sp)
  806d18:	0025883a 	mov	r18,zero
  806d1c:	1105c83a 	sub	r2,r2,r4
  806d20:	2089883a 	add	r4,r4,r2
  806d24:	308d883a 	add	r6,r6,r2
  806d28:	d9001015 	stw	r4,64(sp)
  806d2c:	d9800915 	stw	r6,36(sp)
  806d30:	003e3206 	br	8065fc <_dtoa_r+0xaec>
  806d34:	28800044 	addi	r2,r5,1
  806d38:	27000044 	addi	fp,r4,1
  806d3c:	20800005 	stb	r2,0(r4)
  806d40:	003e6c06 	br	8066f4 <_dtoa_r+0xbe4>
  806d44:	d8800f17 	ldw	r2,60(sp)
  806d48:	00bce016 	blt	zero,r2,8060cc <_dtoa_r+0x5bc>
  806d4c:	d9800f17 	ldw	r6,60(sp)
  806d50:	303cc51e 	bne	r6,zero,806068 <_dtoa_r+0x558>
  806d54:	0005883a 	mov	r2,zero
  806d58:	00d00534 	movhi	r3,16404
  806d5c:	980b883a 	mov	r5,r19
  806d60:	180f883a 	mov	r7,r3
  806d64:	9009883a 	mov	r4,r18
  806d68:	100d883a 	mov	r6,r2
  806d6c:	080b5940 	call	80b594 <__muldf3>
  806d70:	180b883a 	mov	r5,r3
  806d74:	a80f883a 	mov	r7,r21
  806d78:	1009883a 	mov	r4,r2
  806d7c:	a00d883a 	mov	r6,r20
  806d80:	080ba680 	call	80ba68 <__gedf2>
  806d84:	103cb80e 	bge	r2,zero,806068 <_dtoa_r+0x558>
  806d88:	0027883a 	mov	r19,zero
  806d8c:	0025883a 	mov	r18,zero
  806d90:	003fc606 	br	806cac <_dtoa_r+0x119c>
  806d94:	99400117 	ldw	r5,4(r19)
  806d98:	d9001617 	ldw	r4,88(sp)
  806d9c:	08092240 	call	809224 <_Balloc>
  806da0:	99800417 	ldw	r6,16(r19)
  806da4:	11000304 	addi	r4,r2,12
  806da8:	99400304 	addi	r5,r19,12
  806dac:	318d883a 	add	r6,r6,r6
  806db0:	318d883a 	add	r6,r6,r6
  806db4:	31800204 	addi	r6,r6,8
  806db8:	1023883a 	mov	r17,r2
  806dbc:	0808a8c0 	call	808a8c <memcpy>
  806dc0:	d9001617 	ldw	r4,88(sp)
  806dc4:	880b883a 	mov	r5,r17
  806dc8:	01800044 	movi	r6,1
  806dcc:	08095e80 	call	8095e8 <__lshift>
  806dd0:	100b883a 	mov	r5,r2
  806dd4:	003d9c06 	br	806448 <_dtoa_r+0x938>
  806dd8:	00800e44 	movi	r2,57
  806ddc:	b8807026 	beq	r23,r2,806fa0 <_dtoa_r+0x1490>
  806de0:	b8800044 	addi	r2,r23,1
  806de4:	b7000044 	addi	fp,r22,1
  806de8:	b0800005 	stb	r2,0(r22)
  806dec:	003e4106 	br	8066f4 <_dtoa_r+0xbe4>
  806df0:	d8800317 	ldw	r2,12(sp)
  806df4:	01802074 	movhi	r6,129
  806df8:	3186c004 	addi	r6,r6,6912
  806dfc:	b009883a 	mov	r4,r22
  806e00:	100e90fa 	slli	r7,r2,3
  806e04:	b80b883a 	mov	r5,r23
  806e08:	398f883a 	add	r7,r7,r6
  806e0c:	38bffe17 	ldw	r2,-8(r7)
  806e10:	d9800517 	ldw	r6,20(sp)
  806e14:	38ffff17 	ldw	r3,-4(r7)
  806e18:	37000044 	addi	fp,r6,1
  806e1c:	180f883a 	mov	r7,r3
  806e20:	100d883a 	mov	r6,r2
  806e24:	080b5940 	call	80b594 <__muldf3>
  806e28:	a80b883a 	mov	r5,r21
  806e2c:	a009883a 	mov	r4,r20
  806e30:	182f883a 	mov	r23,r3
  806e34:	102d883a 	mov	r22,r2
  806e38:	080bc700 	call	80bc70 <__fixdfsi>
  806e3c:	1009883a 	mov	r4,r2
  806e40:	1027883a 	mov	r19,r2
  806e44:	080bb780 	call	80bb78 <__floatsidf>
  806e48:	a80b883a 	mov	r5,r21
  806e4c:	a009883a 	mov	r4,r20
  806e50:	180f883a 	mov	r7,r3
  806e54:	100d883a 	mov	r6,r2
  806e58:	08028680 	call	802868 <__subdf3>
  806e5c:	180b883a 	mov	r5,r3
  806e60:	d8c00517 	ldw	r3,20(sp)
  806e64:	9cc00c04 	addi	r19,r19,48
  806e68:	1009883a 	mov	r4,r2
  806e6c:	1cc00005 	stb	r19,0(r3)
  806e70:	2021883a 	mov	r16,r4
  806e74:	d9000317 	ldw	r4,12(sp)
  806e78:	00800044 	movi	r2,1
  806e7c:	2823883a 	mov	r17,r5
  806e80:	20802226 	beq	r4,r2,806f0c <_dtoa_r+0x13fc>
  806e84:	1029883a 	mov	r20,r2
  806e88:	0005883a 	mov	r2,zero
  806e8c:	00d00934 	movhi	r3,16420
  806e90:	180f883a 	mov	r7,r3
  806e94:	100d883a 	mov	r6,r2
  806e98:	880b883a 	mov	r5,r17
  806e9c:	8009883a 	mov	r4,r16
  806ea0:	080b5940 	call	80b594 <__muldf3>
  806ea4:	180b883a 	mov	r5,r3
  806ea8:	1009883a 	mov	r4,r2
  806eac:	1823883a 	mov	r17,r3
  806eb0:	1021883a 	mov	r16,r2
  806eb4:	080bc700 	call	80bc70 <__fixdfsi>
  806eb8:	1009883a 	mov	r4,r2
  806ebc:	102b883a 	mov	r21,r2
  806ec0:	080bb780 	call	80bb78 <__floatsidf>
  806ec4:	880b883a 	mov	r5,r17
  806ec8:	8009883a 	mov	r4,r16
  806ecc:	180f883a 	mov	r7,r3
  806ed0:	100d883a 	mov	r6,r2
  806ed4:	08028680 	call	802868 <__subdf3>
  806ed8:	180b883a 	mov	r5,r3
  806edc:	d8c00517 	ldw	r3,20(sp)
  806ee0:	1009883a 	mov	r4,r2
  806ee4:	ad400c04 	addi	r21,r21,48
  806ee8:	1d05883a 	add	r2,r3,r20
  806eec:	15400005 	stb	r21,0(r2)
  806ef0:	2021883a 	mov	r16,r4
  806ef4:	d9000317 	ldw	r4,12(sp)
  806ef8:	a5000044 	addi	r20,r20,1
  806efc:	2823883a 	mov	r17,r5
  806f00:	a13fe11e 	bne	r20,r4,806e88 <_dtoa_r+0x1378>
  806f04:	e505883a 	add	r2,fp,r20
  806f08:	173fffc4 	addi	fp,r2,-1
  806f0c:	0025883a 	mov	r18,zero
  806f10:	04cff834 	movhi	r19,16352
  806f14:	b009883a 	mov	r4,r22
  806f18:	b80b883a 	mov	r5,r23
  806f1c:	900d883a 	mov	r6,r18
  806f20:	980f883a 	mov	r7,r19
  806f24:	08028e80 	call	8028e8 <__adddf3>
  806f28:	180b883a 	mov	r5,r3
  806f2c:	1009883a 	mov	r4,r2
  806f30:	800d883a 	mov	r6,r16
  806f34:	880f883a 	mov	r7,r17
  806f38:	080baf00 	call	80baf0 <__ltdf2>
  806f3c:	103cab16 	blt	r2,zero,8061ec <_dtoa_r+0x6dc>
  806f40:	0009883a 	mov	r4,zero
  806f44:	980b883a 	mov	r5,r19
  806f48:	b80f883a 	mov	r7,r23
  806f4c:	b00d883a 	mov	r6,r22
  806f50:	08028680 	call	802868 <__subdf3>
  806f54:	180b883a 	mov	r5,r3
  806f58:	880f883a 	mov	r7,r17
  806f5c:	1009883a 	mov	r4,r2
  806f60:	800d883a 	mov	r6,r16
  806f64:	080b9e00 	call	80b9e0 <__gtdf2>
  806f68:	00bc470e 	bge	zero,r2,806088 <_dtoa_r+0x578>
  806f6c:	00c00c04 	movi	r3,48
  806f70:	e73fffc4 	addi	fp,fp,-1
  806f74:	e0800007 	ldb	r2,0(fp)
  806f78:	10fffd26 	beq	r2,r3,806f70 <_dtoa_r+0x1460>
  806f7c:	d9800417 	ldw	r6,16(sp)
  806f80:	e7000044 	addi	fp,fp,1
  806f84:	d9800d15 	stw	r6,52(sp)
  806f88:	003cab06 	br	806238 <_dtoa_r+0x728>
  806f8c:	d8c00f17 	ldw	r3,60(sp)
  806f90:	d9001117 	ldw	r4,68(sp)
  806f94:	20e1c83a 	sub	r16,r4,r3
  806f98:	0007883a 	mov	r3,zero
  806f9c:	003d9b06 	br	80660c <_dtoa_r+0xafc>
  806fa0:	00800e44 	movi	r2,57
  806fa4:	b0800005 	stb	r2,0(r22)
  806fa8:	b5800044 	addi	r22,r22,1
  806fac:	003dc106 	br	8066b4 <_dtoa_r+0xba4>
  806fb0:	05800084 	movi	r22,2
  806fb4:	003bf706 	br	805f94 <_dtoa_r+0x484>
  806fb8:	d9000f17 	ldw	r4,60(sp)
  806fbc:	013c000e 	bge	zero,r4,805fc0 <_dtoa_r+0x4b0>
  806fc0:	d9800e17 	ldw	r6,56(sp)
  806fc4:	01bc300e 	bge	zero,r6,806088 <_dtoa_r+0x578>
  806fc8:	0005883a 	mov	r2,zero
  806fcc:	00d00934 	movhi	r3,16420
  806fd0:	a80b883a 	mov	r5,r21
  806fd4:	180f883a 	mov	r7,r3
  806fd8:	a009883a 	mov	r4,r20
  806fdc:	100d883a 	mov	r6,r2
  806fe0:	080b5940 	call	80b594 <__muldf3>
  806fe4:	b1000044 	addi	r4,r22,1
  806fe8:	1021883a 	mov	r16,r2
  806fec:	1823883a 	mov	r17,r3
  806ff0:	080bb780 	call	80bb78 <__floatsidf>
  806ff4:	880b883a 	mov	r5,r17
  806ff8:	8009883a 	mov	r4,r16
  806ffc:	180f883a 	mov	r7,r3
  807000:	100d883a 	mov	r6,r2
  807004:	080b5940 	call	80b594 <__muldf3>
  807008:	0011883a 	mov	r8,zero
  80700c:	02500734 	movhi	r9,16412
  807010:	180b883a 	mov	r5,r3
  807014:	480f883a 	mov	r7,r9
  807018:	1009883a 	mov	r4,r2
  80701c:	400d883a 	mov	r6,r8
  807020:	08028e80 	call	8028e8 <__adddf3>
  807024:	102d883a 	mov	r22,r2
  807028:	00bf3034 	movhi	r2,64704
  80702c:	10ef883a 	add	r23,r2,r3
  807030:	d8800d17 	ldw	r2,52(sp)
  807034:	d8c00e17 	ldw	r3,56(sp)
  807038:	8029883a 	mov	r20,r16
  80703c:	10bfffc4 	addi	r2,r2,-1
  807040:	882b883a 	mov	r21,r17
  807044:	d8800415 	stw	r2,16(sp)
  807048:	d8c00315 	stw	r3,12(sp)
  80704c:	003e8306 	br	806a5c <_dtoa_r+0xf4c>
  807050:	d8800117 	ldw	r2,4(sp)
  807054:	dc001117 	ldw	r16,68(sp)
  807058:	dc801017 	ldw	r18,64(sp)
  80705c:	00c00d84 	movi	r3,54
  807060:	1887c83a 	sub	r3,r3,r2
  807064:	003d6906 	br	80660c <_dtoa_r+0xafc>
  807068:	01800044 	movi	r6,1
  80706c:	3021883a 	mov	r16,r6
  807070:	d9800f15 	stw	r6,60(sp)
  807074:	d9802615 	stw	r6,152(sp)
  807078:	d9800e15 	stw	r6,56(sp)
  80707c:	003b9306 	br	805ecc <_dtoa_r+0x3bc>
  807080:	b021883a 	mov	r16,r22
  807084:	dd800f15 	stw	r22,60(sp)
  807088:	003b9006 	br	805ecc <_dtoa_r+0x3bc>
  80708c:	103e221e 	bne	r2,zero,806918 <_dtoa_r+0xe08>
  807090:	b880004c 	andi	r2,r23,1
  807094:	1005003a 	cmpeq	r2,r2,zero
  807098:	103e1f1e 	bne	r2,zero,806918 <_dtoa_r+0xe08>
  80709c:	003e1b06 	br	80690c <_dtoa_r+0xdfc>
  8070a0:	d9001617 	ldw	r4,88(sp)
  8070a4:	980b883a 	mov	r5,r19
  8070a8:	01800284 	movi	r6,10
  8070ac:	000f883a 	mov	r7,zero
  8070b0:	08099580 	call	809958 <__multadd>
  8070b4:	d8c00e17 	ldw	r3,56(sp)
  8070b8:	1027883a 	mov	r19,r2
  8070bc:	d8c00f15 	stw	r3,60(sp)
  8070c0:	003cd306 	br	806410 <_dtoa_r+0x900>

008070c4 <_fflush_r>:
  8070c4:	defffb04 	addi	sp,sp,-20
  8070c8:	dcc00315 	stw	r19,12(sp)
  8070cc:	dc800215 	stw	r18,8(sp)
  8070d0:	dfc00415 	stw	ra,16(sp)
  8070d4:	dc400115 	stw	r17,4(sp)
  8070d8:	dc000015 	stw	r16,0(sp)
  8070dc:	2027883a 	mov	r19,r4
  8070e0:	2825883a 	mov	r18,r5
  8070e4:	20000226 	beq	r4,zero,8070f0 <_fflush_r+0x2c>
  8070e8:	20800e17 	ldw	r2,56(r4)
  8070ec:	10005626 	beq	r2,zero,807248 <_fflush_r+0x184>
  8070f0:	9100030b 	ldhu	r4,12(r18)
  8070f4:	20ffffcc 	andi	r3,r4,65535
  8070f8:	18e0001c 	xori	r3,r3,32768
  8070fc:	18e00004 	addi	r3,r3,-32768
  807100:	1880020c 	andi	r2,r3,8
  807104:	1000261e 	bne	r2,zero,8071a0 <_fflush_r+0xdc>
  807108:	90c00117 	ldw	r3,4(r18)
  80710c:	20820014 	ori	r2,r4,2048
  807110:	9080030d 	sth	r2,12(r18)
  807114:	1009883a 	mov	r4,r2
  807118:	00c0400e 	bge	zero,r3,80721c <_fflush_r+0x158>
  80711c:	92000a17 	ldw	r8,40(r18)
  807120:	40004026 	beq	r8,zero,807224 <_fflush_r+0x160>
  807124:	2084000c 	andi	r2,r4,4096
  807128:	10005326 	beq	r2,zero,807278 <_fflush_r+0x1b4>
  80712c:	94001417 	ldw	r16,80(r18)
  807130:	9080030b 	ldhu	r2,12(r18)
  807134:	1080010c 	andi	r2,r2,4
  807138:	1000481e 	bne	r2,zero,80725c <_fflush_r+0x198>
  80713c:	91400717 	ldw	r5,28(r18)
  807140:	9809883a 	mov	r4,r19
  807144:	800d883a 	mov	r6,r16
  807148:	000f883a 	mov	r7,zero
  80714c:	403ee83a 	callr	r8
  807150:	8080261e 	bne	r16,r2,8071ec <_fflush_r+0x128>
  807154:	9080030b 	ldhu	r2,12(r18)
  807158:	91000417 	ldw	r4,16(r18)
  80715c:	90000115 	stw	zero,4(r18)
  807160:	10bdffcc 	andi	r2,r2,63487
  807164:	10ffffcc 	andi	r3,r2,65535
  807168:	18c4000c 	andi	r3,r3,4096
  80716c:	9080030d 	sth	r2,12(r18)
  807170:	91000015 	stw	r4,0(r18)
  807174:	18002b26 	beq	r3,zero,807224 <_fflush_r+0x160>
  807178:	0007883a 	mov	r3,zero
  80717c:	1805883a 	mov	r2,r3
  807180:	94001415 	stw	r16,80(r18)
  807184:	dfc00417 	ldw	ra,16(sp)
  807188:	dcc00317 	ldw	r19,12(sp)
  80718c:	dc800217 	ldw	r18,8(sp)
  807190:	dc400117 	ldw	r17,4(sp)
  807194:	dc000017 	ldw	r16,0(sp)
  807198:	dec00504 	addi	sp,sp,20
  80719c:	f800283a 	ret
  8071a0:	94400417 	ldw	r17,16(r18)
  8071a4:	88001f26 	beq	r17,zero,807224 <_fflush_r+0x160>
  8071a8:	90800017 	ldw	r2,0(r18)
  8071ac:	18c000cc 	andi	r3,r3,3
  8071b0:	94400015 	stw	r17,0(r18)
  8071b4:	1461c83a 	sub	r16,r2,r17
  8071b8:	18002526 	beq	r3,zero,807250 <_fflush_r+0x18c>
  8071bc:	0005883a 	mov	r2,zero
  8071c0:	90800215 	stw	r2,8(r18)
  8071c4:	0400170e 	bge	zero,r16,807224 <_fflush_r+0x160>
  8071c8:	90c00917 	ldw	r3,36(r18)
  8071cc:	91400717 	ldw	r5,28(r18)
  8071d0:	880d883a 	mov	r6,r17
  8071d4:	800f883a 	mov	r7,r16
  8071d8:	9809883a 	mov	r4,r19
  8071dc:	183ee83a 	callr	r3
  8071e0:	88a3883a 	add	r17,r17,r2
  8071e4:	80a1c83a 	sub	r16,r16,r2
  8071e8:	00bff616 	blt	zero,r2,8071c4 <_fflush_r+0x100>
  8071ec:	9080030b 	ldhu	r2,12(r18)
  8071f0:	00ffffc4 	movi	r3,-1
  8071f4:	10801014 	ori	r2,r2,64
  8071f8:	9080030d 	sth	r2,12(r18)
  8071fc:	1805883a 	mov	r2,r3
  807200:	dfc00417 	ldw	ra,16(sp)
  807204:	dcc00317 	ldw	r19,12(sp)
  807208:	dc800217 	ldw	r18,8(sp)
  80720c:	dc400117 	ldw	r17,4(sp)
  807210:	dc000017 	ldw	r16,0(sp)
  807214:	dec00504 	addi	sp,sp,20
  807218:	f800283a 	ret
  80721c:	90800f17 	ldw	r2,60(r18)
  807220:	00bfbe16 	blt	zero,r2,80711c <_fflush_r+0x58>
  807224:	0007883a 	mov	r3,zero
  807228:	1805883a 	mov	r2,r3
  80722c:	dfc00417 	ldw	ra,16(sp)
  807230:	dcc00317 	ldw	r19,12(sp)
  807234:	dc800217 	ldw	r18,8(sp)
  807238:	dc400117 	ldw	r17,4(sp)
  80723c:	dc000017 	ldw	r16,0(sp)
  807240:	dec00504 	addi	sp,sp,20
  807244:	f800283a 	ret
  807248:	080735c0 	call	80735c <__sinit>
  80724c:	003fa806 	br	8070f0 <_fflush_r+0x2c>
  807250:	90800517 	ldw	r2,20(r18)
  807254:	90800215 	stw	r2,8(r18)
  807258:	003fda06 	br	8071c4 <_fflush_r+0x100>
  80725c:	90800117 	ldw	r2,4(r18)
  807260:	90c00c17 	ldw	r3,48(r18)
  807264:	80a1c83a 	sub	r16,r16,r2
  807268:	183fb426 	beq	r3,zero,80713c <_fflush_r+0x78>
  80726c:	90800f17 	ldw	r2,60(r18)
  807270:	80a1c83a 	sub	r16,r16,r2
  807274:	003fb106 	br	80713c <_fflush_r+0x78>
  807278:	91400717 	ldw	r5,28(r18)
  80727c:	9809883a 	mov	r4,r19
  807280:	000d883a 	mov	r6,zero
  807284:	01c00044 	movi	r7,1
  807288:	403ee83a 	callr	r8
  80728c:	1021883a 	mov	r16,r2
  807290:	00bfffc4 	movi	r2,-1
  807294:	80800226 	beq	r16,r2,8072a0 <_fflush_r+0x1dc>
  807298:	92000a17 	ldw	r8,40(r18)
  80729c:	003fa406 	br	807130 <_fflush_r+0x6c>
  8072a0:	98c00017 	ldw	r3,0(r19)
  8072a4:	00800744 	movi	r2,29
  8072a8:	18bfde26 	beq	r3,r2,807224 <_fflush_r+0x160>
  8072ac:	9080030b 	ldhu	r2,12(r18)
  8072b0:	8007883a 	mov	r3,r16
  8072b4:	10801014 	ori	r2,r2,64
  8072b8:	9080030d 	sth	r2,12(r18)
  8072bc:	003fcf06 	br	8071fc <_fflush_r+0x138>

008072c0 <fflush>:
  8072c0:	01402034 	movhi	r5,128
  8072c4:	295c3104 	addi	r5,r5,28868
  8072c8:	2007883a 	mov	r3,r4
  8072cc:	20000526 	beq	r4,zero,8072e4 <fflush+0x24>
  8072d0:	00802074 	movhi	r2,129
  8072d4:	108e4f04 	addi	r2,r2,14652
  8072d8:	11000017 	ldw	r4,0(r2)
  8072dc:	180b883a 	mov	r5,r3
  8072e0:	08070c41 	jmpi	8070c4 <_fflush_r>
  8072e4:	00802074 	movhi	r2,129
  8072e8:	108e5004 	addi	r2,r2,14656
  8072ec:	11000017 	ldw	r4,0(r2)
  8072f0:	0807e901 	jmpi	807e90 <_fwalk_reent>

008072f4 <std>:
  8072f4:	00802074 	movhi	r2,129
  8072f8:	10a8db04 	addi	r2,r2,-23700
  8072fc:	20800b15 	stw	r2,44(r4)
  807300:	00802074 	movhi	r2,129
  807304:	10a91604 	addi	r2,r2,-23464
  807308:	20800815 	stw	r2,32(r4)
  80730c:	00c02074 	movhi	r3,129
  807310:	18e8f704 	addi	r3,r3,-23588
  807314:	00802074 	movhi	r2,129
  807318:	10a8dd04 	addi	r2,r2,-23692
  80731c:	2140030d 	sth	r5,12(r4)
  807320:	2180038d 	sth	r6,14(r4)
  807324:	20c00915 	stw	r3,36(r4)
  807328:	20800a15 	stw	r2,40(r4)
  80732c:	20000015 	stw	zero,0(r4)
  807330:	20000115 	stw	zero,4(r4)
  807334:	20000215 	stw	zero,8(r4)
  807338:	20000415 	stw	zero,16(r4)
  80733c:	20000515 	stw	zero,20(r4)
  807340:	20000615 	stw	zero,24(r4)
  807344:	21000715 	stw	r4,28(r4)
  807348:	f800283a 	ret

0080734c <__sfp_lock_acquire>:
  80734c:	f800283a 	ret

00807350 <__sfp_lock_release>:
  807350:	f800283a 	ret

00807354 <__sinit_lock_acquire>:
  807354:	f800283a 	ret

00807358 <__sinit_lock_release>:
  807358:	f800283a 	ret

0080735c <__sinit>:
  80735c:	20800e17 	ldw	r2,56(r4)
  807360:	defffd04 	addi	sp,sp,-12
  807364:	dc400115 	stw	r17,4(sp)
  807368:	dc000015 	stw	r16,0(sp)
  80736c:	dfc00215 	stw	ra,8(sp)
  807370:	04400044 	movi	r17,1
  807374:	01400104 	movi	r5,4
  807378:	000d883a 	mov	r6,zero
  80737c:	2021883a 	mov	r16,r4
  807380:	2200bb04 	addi	r8,r4,748
  807384:	200f883a 	mov	r7,r4
  807388:	10000526 	beq	r2,zero,8073a0 <__sinit+0x44>
  80738c:	dfc00217 	ldw	ra,8(sp)
  807390:	dc400117 	ldw	r17,4(sp)
  807394:	dc000017 	ldw	r16,0(sp)
  807398:	dec00304 	addi	sp,sp,12
  80739c:	f800283a 	ret
  8073a0:	21000117 	ldw	r4,4(r4)
  8073a4:	00802034 	movhi	r2,128
  8073a8:	109d1004 	addi	r2,r2,29760
  8073ac:	00c000c4 	movi	r3,3
  8073b0:	80800f15 	stw	r2,60(r16)
  8073b4:	80c0b915 	stw	r3,740(r16)
  8073b8:	8200ba15 	stw	r8,744(r16)
  8073bc:	84400e15 	stw	r17,56(r16)
  8073c0:	8000b815 	stw	zero,736(r16)
  8073c4:	08072f40 	call	8072f4 <std>
  8073c8:	81000217 	ldw	r4,8(r16)
  8073cc:	880d883a 	mov	r6,r17
  8073d0:	800f883a 	mov	r7,r16
  8073d4:	01400284 	movi	r5,10
  8073d8:	08072f40 	call	8072f4 <std>
  8073dc:	81000317 	ldw	r4,12(r16)
  8073e0:	800f883a 	mov	r7,r16
  8073e4:	01400484 	movi	r5,18
  8073e8:	01800084 	movi	r6,2
  8073ec:	dfc00217 	ldw	ra,8(sp)
  8073f0:	dc400117 	ldw	r17,4(sp)
  8073f4:	dc000017 	ldw	r16,0(sp)
  8073f8:	dec00304 	addi	sp,sp,12
  8073fc:	08072f41 	jmpi	8072f4 <std>

00807400 <__fp_lock>:
  807400:	0005883a 	mov	r2,zero
  807404:	f800283a 	ret

00807408 <__fp_unlock>:
  807408:	0005883a 	mov	r2,zero
  80740c:	f800283a 	ret

00807410 <__fp_unlock_all>:
  807410:	00802074 	movhi	r2,129
  807414:	108e4f04 	addi	r2,r2,14652
  807418:	11000017 	ldw	r4,0(r2)
  80741c:	01402034 	movhi	r5,128
  807420:	295d0204 	addi	r5,r5,29704
  807424:	0807f581 	jmpi	807f58 <_fwalk>

00807428 <__fp_lock_all>:
  807428:	00802074 	movhi	r2,129
  80742c:	108e4f04 	addi	r2,r2,14652
  807430:	11000017 	ldw	r4,0(r2)
  807434:	01402034 	movhi	r5,128
  807438:	295d0004 	addi	r5,r5,29696
  80743c:	0807f581 	jmpi	807f58 <_fwalk>

00807440 <_cleanup_r>:
  807440:	01402074 	movhi	r5,129
  807444:	296a0804 	addi	r5,r5,-22496
  807448:	0807f581 	jmpi	807f58 <_fwalk>

0080744c <_cleanup>:
  80744c:	00802074 	movhi	r2,129
  807450:	108e5004 	addi	r2,r2,14656
  807454:	11000017 	ldw	r4,0(r2)
  807458:	08074401 	jmpi	807440 <_cleanup_r>

0080745c <__sfmoreglue>:
  80745c:	defffc04 	addi	sp,sp,-16
  807460:	dc400115 	stw	r17,4(sp)
  807464:	2c401724 	muli	r17,r5,92
  807468:	dc800215 	stw	r18,8(sp)
  80746c:	2825883a 	mov	r18,r5
  807470:	89400304 	addi	r5,r17,12
  807474:	dc000015 	stw	r16,0(sp)
  807478:	dfc00315 	stw	ra,12(sp)
  80747c:	08082680 	call	808268 <_malloc_r>
  807480:	0021883a 	mov	r16,zero
  807484:	880d883a 	mov	r6,r17
  807488:	000b883a 	mov	r5,zero
  80748c:	10000626 	beq	r2,zero,8074a8 <__sfmoreglue+0x4c>
  807490:	11000304 	addi	r4,r2,12
  807494:	14800115 	stw	r18,4(r2)
  807498:	10000015 	stw	zero,0(r2)
  80749c:	11000215 	stw	r4,8(r2)
  8074a0:	1021883a 	mov	r16,r2
  8074a4:	0808c0c0 	call	808c0c <memset>
  8074a8:	8005883a 	mov	r2,r16
  8074ac:	dfc00317 	ldw	ra,12(sp)
  8074b0:	dc800217 	ldw	r18,8(sp)
  8074b4:	dc400117 	ldw	r17,4(sp)
  8074b8:	dc000017 	ldw	r16,0(sp)
  8074bc:	dec00404 	addi	sp,sp,16
  8074c0:	f800283a 	ret

008074c4 <__sfp>:
  8074c4:	defffd04 	addi	sp,sp,-12
  8074c8:	00802074 	movhi	r2,129
  8074cc:	108e5004 	addi	r2,r2,14656
  8074d0:	dc000015 	stw	r16,0(sp)
  8074d4:	14000017 	ldw	r16,0(r2)
  8074d8:	dc400115 	stw	r17,4(sp)
  8074dc:	dfc00215 	stw	ra,8(sp)
  8074e0:	80800e17 	ldw	r2,56(r16)
  8074e4:	2023883a 	mov	r17,r4
  8074e8:	10002626 	beq	r2,zero,807584 <__sfp+0xc0>
  8074ec:	8400b804 	addi	r16,r16,736
  8074f0:	80800117 	ldw	r2,4(r16)
  8074f4:	81000217 	ldw	r4,8(r16)
  8074f8:	10ffffc4 	addi	r3,r2,-1
  8074fc:	18000916 	blt	r3,zero,807524 <__sfp+0x60>
  807500:	2080030f 	ldh	r2,12(r4)
  807504:	10000b26 	beq	r2,zero,807534 <__sfp+0x70>
  807508:	017fffc4 	movi	r5,-1
  80750c:	00000206 	br	807518 <__sfp+0x54>
  807510:	2080030f 	ldh	r2,12(r4)
  807514:	10000726 	beq	r2,zero,807534 <__sfp+0x70>
  807518:	18ffffc4 	addi	r3,r3,-1
  80751c:	21001704 	addi	r4,r4,92
  807520:	197ffb1e 	bne	r3,r5,807510 <__sfp+0x4c>
  807524:	80800017 	ldw	r2,0(r16)
  807528:	10001926 	beq	r2,zero,807590 <__sfp+0xcc>
  80752c:	1021883a 	mov	r16,r2
  807530:	003fef06 	br	8074f0 <__sfp+0x2c>
  807534:	00bfffc4 	movi	r2,-1
  807538:	00c00044 	movi	r3,1
  80753c:	2080038d 	sth	r2,14(r4)
  807540:	20c0030d 	sth	r3,12(r4)
  807544:	20000015 	stw	zero,0(r4)
  807548:	20000215 	stw	zero,8(r4)
  80754c:	20000115 	stw	zero,4(r4)
  807550:	20000415 	stw	zero,16(r4)
  807554:	20000515 	stw	zero,20(r4)
  807558:	20000615 	stw	zero,24(r4)
  80755c:	20000c15 	stw	zero,48(r4)
  807560:	20000d15 	stw	zero,52(r4)
  807564:	20001115 	stw	zero,68(r4)
  807568:	20001215 	stw	zero,72(r4)
  80756c:	2005883a 	mov	r2,r4
  807570:	dfc00217 	ldw	ra,8(sp)
  807574:	dc400117 	ldw	r17,4(sp)
  807578:	dc000017 	ldw	r16,0(sp)
  80757c:	dec00304 	addi	sp,sp,12
  807580:	f800283a 	ret
  807584:	8009883a 	mov	r4,r16
  807588:	080735c0 	call	80735c <__sinit>
  80758c:	003fd706 	br	8074ec <__sfp+0x28>
  807590:	8809883a 	mov	r4,r17
  807594:	01400104 	movi	r5,4
  807598:	080745c0 	call	80745c <__sfmoreglue>
  80759c:	80800015 	stw	r2,0(r16)
  8075a0:	103fe21e 	bne	r2,zero,80752c <__sfp+0x68>
  8075a4:	00800304 	movi	r2,12
  8075a8:	0009883a 	mov	r4,zero
  8075ac:	88800015 	stw	r2,0(r17)
  8075b0:	003fee06 	br	80756c <__sfp+0xa8>

008075b4 <_malloc_trim_r>:
  8075b4:	defffb04 	addi	sp,sp,-20
  8075b8:	dcc00315 	stw	r19,12(sp)
  8075bc:	04c02074 	movhi	r19,129
  8075c0:	9cc86504 	addi	r19,r19,8596
  8075c4:	dc800215 	stw	r18,8(sp)
  8075c8:	dc400115 	stw	r17,4(sp)
  8075cc:	dc000015 	stw	r16,0(sp)
  8075d0:	2823883a 	mov	r17,r5
  8075d4:	2025883a 	mov	r18,r4
  8075d8:	dfc00415 	stw	ra,16(sp)
  8075dc:	080c6ac0 	call	80c6ac <__malloc_lock>
  8075e0:	98800217 	ldw	r2,8(r19)
  8075e4:	9009883a 	mov	r4,r18
  8075e8:	000b883a 	mov	r5,zero
  8075ec:	10c00117 	ldw	r3,4(r2)
  8075f0:	00bfff04 	movi	r2,-4
  8075f4:	18a0703a 	and	r16,r3,r2
  8075f8:	8463c83a 	sub	r17,r16,r17
  8075fc:	8c43fbc4 	addi	r17,r17,4079
  807600:	8822d33a 	srli	r17,r17,12
  807604:	0083ffc4 	movi	r2,4095
  807608:	8c7fffc4 	addi	r17,r17,-1
  80760c:	8822933a 	slli	r17,r17,12
  807610:	1440060e 	bge	r2,r17,80762c <_malloc_trim_r+0x78>
  807614:	080a2fc0 	call	80a2fc <_sbrk_r>
  807618:	98c00217 	ldw	r3,8(r19)
  80761c:	9009883a 	mov	r4,r18
  807620:	044bc83a 	sub	r5,zero,r17
  807624:	80c7883a 	add	r3,r16,r3
  807628:	10c00926 	beq	r2,r3,807650 <_malloc_trim_r+0x9c>
  80762c:	080c6cc0 	call	80c6cc <__malloc_unlock>
  807630:	0005883a 	mov	r2,zero
  807634:	dfc00417 	ldw	ra,16(sp)
  807638:	dcc00317 	ldw	r19,12(sp)
  80763c:	dc800217 	ldw	r18,8(sp)
  807640:	dc400117 	ldw	r17,4(sp)
  807644:	dc000017 	ldw	r16,0(sp)
  807648:	dec00504 	addi	sp,sp,20
  80764c:	f800283a 	ret
  807650:	9009883a 	mov	r4,r18
  807654:	080a2fc0 	call	80a2fc <_sbrk_r>
  807658:	844dc83a 	sub	r6,r16,r17
  80765c:	00ffffc4 	movi	r3,-1
  807660:	9009883a 	mov	r4,r18
  807664:	000b883a 	mov	r5,zero
  807668:	01c02074 	movhi	r7,129
  80766c:	39d57204 	addi	r7,r7,21960
  807670:	31800054 	ori	r6,r6,1
  807674:	10c00926 	beq	r2,r3,80769c <_malloc_trim_r+0xe8>
  807678:	38800017 	ldw	r2,0(r7)
  80767c:	98c00217 	ldw	r3,8(r19)
  807680:	9009883a 	mov	r4,r18
  807684:	1445c83a 	sub	r2,r2,r17
  807688:	38800015 	stw	r2,0(r7)
  80768c:	19800115 	stw	r6,4(r3)
  807690:	080c6cc0 	call	80c6cc <__malloc_unlock>
  807694:	00800044 	movi	r2,1
  807698:	003fe606 	br	807634 <_malloc_trim_r+0x80>
  80769c:	080a2fc0 	call	80a2fc <_sbrk_r>
  8076a0:	99800217 	ldw	r6,8(r19)
  8076a4:	100f883a 	mov	r7,r2
  8076a8:	9009883a 	mov	r4,r18
  8076ac:	1187c83a 	sub	r3,r2,r6
  8076b0:	008003c4 	movi	r2,15
  8076b4:	19400054 	ori	r5,r3,1
  8076b8:	10ffdc0e 	bge	r2,r3,80762c <_malloc_trim_r+0x78>
  8076bc:	00802074 	movhi	r2,129
  8076c0:	108e5404 	addi	r2,r2,14672
  8076c4:	10c00017 	ldw	r3,0(r2)
  8076c8:	00802074 	movhi	r2,129
  8076cc:	10957204 	addi	r2,r2,21960
  8076d0:	31400115 	stw	r5,4(r6)
  8076d4:	38c7c83a 	sub	r3,r7,r3
  8076d8:	10c00015 	stw	r3,0(r2)
  8076dc:	003fd306 	br	80762c <_malloc_trim_r+0x78>

008076e0 <_free_r>:
  8076e0:	defffd04 	addi	sp,sp,-12
  8076e4:	dc400115 	stw	r17,4(sp)
  8076e8:	dc000015 	stw	r16,0(sp)
  8076ec:	dfc00215 	stw	ra,8(sp)
  8076f0:	2821883a 	mov	r16,r5
  8076f4:	2023883a 	mov	r17,r4
  8076f8:	28005a26 	beq	r5,zero,807864 <_free_r+0x184>
  8076fc:	080c6ac0 	call	80c6ac <__malloc_lock>
  807700:	823ffe04 	addi	r8,r16,-8
  807704:	41400117 	ldw	r5,4(r8)
  807708:	00bfff84 	movi	r2,-2
  80770c:	02802074 	movhi	r10,129
  807710:	52886504 	addi	r10,r10,8596
  807714:	288e703a 	and	r7,r5,r2
  807718:	41cd883a 	add	r6,r8,r7
  80771c:	30c00117 	ldw	r3,4(r6)
  807720:	51000217 	ldw	r4,8(r10)
  807724:	00bfff04 	movi	r2,-4
  807728:	1892703a 	and	r9,r3,r2
  80772c:	5017883a 	mov	r11,r10
  807730:	31006726 	beq	r6,r4,8078d0 <_free_r+0x1f0>
  807734:	2880004c 	andi	r2,r5,1
  807738:	1005003a 	cmpeq	r2,r2,zero
  80773c:	32400115 	stw	r9,4(r6)
  807740:	10001a1e 	bne	r2,zero,8077ac <_free_r+0xcc>
  807744:	000b883a 	mov	r5,zero
  807748:	3247883a 	add	r3,r6,r9
  80774c:	18800117 	ldw	r2,4(r3)
  807750:	1080004c 	andi	r2,r2,1
  807754:	1000231e 	bne	r2,zero,8077e4 <_free_r+0x104>
  807758:	280ac03a 	cmpne	r5,r5,zero
  80775c:	3a4f883a 	add	r7,r7,r9
  807760:	2800451e 	bne	r5,zero,807878 <_free_r+0x198>
  807764:	31000217 	ldw	r4,8(r6)
  807768:	00802074 	movhi	r2,129
  80776c:	10886704 	addi	r2,r2,8604
  807770:	20807b26 	beq	r4,r2,807960 <_free_r+0x280>
  807774:	30800317 	ldw	r2,12(r6)
  807778:	3a07883a 	add	r3,r7,r8
  80777c:	19c00015 	stw	r7,0(r3)
  807780:	11000215 	stw	r4,8(r2)
  807784:	20800315 	stw	r2,12(r4)
  807788:	38800054 	ori	r2,r7,1
  80778c:	40800115 	stw	r2,4(r8)
  807790:	28001a26 	beq	r5,zero,8077fc <_free_r+0x11c>
  807794:	8809883a 	mov	r4,r17
  807798:	dfc00217 	ldw	ra,8(sp)
  80779c:	dc400117 	ldw	r17,4(sp)
  8077a0:	dc000017 	ldw	r16,0(sp)
  8077a4:	dec00304 	addi	sp,sp,12
  8077a8:	080c6cc1 	jmpi	80c6cc <__malloc_unlock>
  8077ac:	80bffe17 	ldw	r2,-8(r16)
  8077b0:	50c00204 	addi	r3,r10,8
  8077b4:	4091c83a 	sub	r8,r8,r2
  8077b8:	41000217 	ldw	r4,8(r8)
  8077bc:	388f883a 	add	r7,r7,r2
  8077c0:	20c06126 	beq	r4,r3,807948 <_free_r+0x268>
  8077c4:	40800317 	ldw	r2,12(r8)
  8077c8:	3247883a 	add	r3,r6,r9
  8077cc:	000b883a 	mov	r5,zero
  8077d0:	11000215 	stw	r4,8(r2)
  8077d4:	20800315 	stw	r2,12(r4)
  8077d8:	18800117 	ldw	r2,4(r3)
  8077dc:	1080004c 	andi	r2,r2,1
  8077e0:	103fdd26 	beq	r2,zero,807758 <_free_r+0x78>
  8077e4:	38800054 	ori	r2,r7,1
  8077e8:	3a07883a 	add	r3,r7,r8
  8077ec:	280ac03a 	cmpne	r5,r5,zero
  8077f0:	40800115 	stw	r2,4(r8)
  8077f4:	19c00015 	stw	r7,0(r3)
  8077f8:	283fe61e 	bne	r5,zero,807794 <_free_r+0xb4>
  8077fc:	00807fc4 	movi	r2,511
  807800:	11c01f2e 	bgeu	r2,r7,807880 <_free_r+0x1a0>
  807804:	3806d27a 	srli	r3,r7,9
  807808:	1800481e 	bne	r3,zero,80792c <_free_r+0x24c>
  80780c:	3804d0fa 	srli	r2,r7,3
  807810:	100690fa 	slli	r3,r2,3
  807814:	1acd883a 	add	r6,r3,r11
  807818:	31400217 	ldw	r5,8(r6)
  80781c:	31405926 	beq	r6,r5,807984 <_free_r+0x2a4>
  807820:	28800117 	ldw	r2,4(r5)
  807824:	00ffff04 	movi	r3,-4
  807828:	10c4703a 	and	r2,r2,r3
  80782c:	3880022e 	bgeu	r7,r2,807838 <_free_r+0x158>
  807830:	29400217 	ldw	r5,8(r5)
  807834:	317ffa1e 	bne	r6,r5,807820 <_free_r+0x140>
  807838:	29800317 	ldw	r6,12(r5)
  80783c:	41800315 	stw	r6,12(r8)
  807840:	41400215 	stw	r5,8(r8)
  807844:	8809883a 	mov	r4,r17
  807848:	2a000315 	stw	r8,12(r5)
  80784c:	32000215 	stw	r8,8(r6)
  807850:	dfc00217 	ldw	ra,8(sp)
  807854:	dc400117 	ldw	r17,4(sp)
  807858:	dc000017 	ldw	r16,0(sp)
  80785c:	dec00304 	addi	sp,sp,12
  807860:	080c6cc1 	jmpi	80c6cc <__malloc_unlock>
  807864:	dfc00217 	ldw	ra,8(sp)
  807868:	dc400117 	ldw	r17,4(sp)
  80786c:	dc000017 	ldw	r16,0(sp)
  807870:	dec00304 	addi	sp,sp,12
  807874:	f800283a 	ret
  807878:	31000217 	ldw	r4,8(r6)
  80787c:	003fbd06 	br	807774 <_free_r+0x94>
  807880:	3806d0fa 	srli	r3,r7,3
  807884:	00800044 	movi	r2,1
  807888:	51400117 	ldw	r5,4(r10)
  80788c:	180890fa 	slli	r4,r3,3
  807890:	1807d0ba 	srai	r3,r3,2
  807894:	22c9883a 	add	r4,r4,r11
  807898:	21800217 	ldw	r6,8(r4)
  80789c:	10c4983a 	sll	r2,r2,r3
  8078a0:	41000315 	stw	r4,12(r8)
  8078a4:	41800215 	stw	r6,8(r8)
  8078a8:	288ab03a 	or	r5,r5,r2
  8078ac:	22000215 	stw	r8,8(r4)
  8078b0:	8809883a 	mov	r4,r17
  8078b4:	51400115 	stw	r5,4(r10)
  8078b8:	32000315 	stw	r8,12(r6)
  8078bc:	dfc00217 	ldw	ra,8(sp)
  8078c0:	dc400117 	ldw	r17,4(sp)
  8078c4:	dc000017 	ldw	r16,0(sp)
  8078c8:	dec00304 	addi	sp,sp,12
  8078cc:	080c6cc1 	jmpi	80c6cc <__malloc_unlock>
  8078d0:	2880004c 	andi	r2,r5,1
  8078d4:	3a4d883a 	add	r6,r7,r9
  8078d8:	1000071e 	bne	r2,zero,8078f8 <_free_r+0x218>
  8078dc:	80bffe17 	ldw	r2,-8(r16)
  8078e0:	4091c83a 	sub	r8,r8,r2
  8078e4:	41000317 	ldw	r4,12(r8)
  8078e8:	40c00217 	ldw	r3,8(r8)
  8078ec:	308d883a 	add	r6,r6,r2
  8078f0:	20c00215 	stw	r3,8(r4)
  8078f4:	19000315 	stw	r4,12(r3)
  8078f8:	00802074 	movhi	r2,129
  8078fc:	108e5304 	addi	r2,r2,14668
  807900:	11000017 	ldw	r4,0(r2)
  807904:	30c00054 	ori	r3,r6,1
  807908:	52000215 	stw	r8,8(r10)
  80790c:	40c00115 	stw	r3,4(r8)
  807910:	313fa036 	bltu	r6,r4,807794 <_free_r+0xb4>
  807914:	00802074 	movhi	r2,129
  807918:	10956804 	addi	r2,r2,21920
  80791c:	11400017 	ldw	r5,0(r2)
  807920:	8809883a 	mov	r4,r17
  807924:	08075b40 	call	8075b4 <_malloc_trim_r>
  807928:	003f9a06 	br	807794 <_free_r+0xb4>
  80792c:	00800104 	movi	r2,4
  807930:	10c0072e 	bgeu	r2,r3,807950 <_free_r+0x270>
  807934:	00800504 	movi	r2,20
  807938:	10c01936 	bltu	r2,r3,8079a0 <_free_r+0x2c0>
  80793c:	188016c4 	addi	r2,r3,91
  807940:	100690fa 	slli	r3,r2,3
  807944:	003fb306 	br	807814 <_free_r+0x134>
  807948:	01400044 	movi	r5,1
  80794c:	003f7e06 	br	807748 <_free_r+0x68>
  807950:	3804d1ba 	srli	r2,r7,6
  807954:	10800e04 	addi	r2,r2,56
  807958:	100690fa 	slli	r3,r2,3
  80795c:	003fad06 	br	807814 <_free_r+0x134>
  807960:	22000315 	stw	r8,12(r4)
  807964:	22000215 	stw	r8,8(r4)
  807968:	3a05883a 	add	r2,r7,r8
  80796c:	38c00054 	ori	r3,r7,1
  807970:	11c00015 	stw	r7,0(r2)
  807974:	41000215 	stw	r4,8(r8)
  807978:	40c00115 	stw	r3,4(r8)
  80797c:	41000315 	stw	r4,12(r8)
  807980:	003f8406 	br	807794 <_free_r+0xb4>
  807984:	1005d0ba 	srai	r2,r2,2
  807988:	00c00044 	movi	r3,1
  80798c:	51000117 	ldw	r4,4(r10)
  807990:	1886983a 	sll	r3,r3,r2
  807994:	20c8b03a 	or	r4,r4,r3
  807998:	51000115 	stw	r4,4(r10)
  80799c:	003fa706 	br	80783c <_free_r+0x15c>
  8079a0:	00801504 	movi	r2,84
  8079a4:	10c00436 	bltu	r2,r3,8079b8 <_free_r+0x2d8>
  8079a8:	3804d33a 	srli	r2,r7,12
  8079ac:	10801b84 	addi	r2,r2,110
  8079b0:	100690fa 	slli	r3,r2,3
  8079b4:	003f9706 	br	807814 <_free_r+0x134>
  8079b8:	00805504 	movi	r2,340
  8079bc:	10c00436 	bltu	r2,r3,8079d0 <_free_r+0x2f0>
  8079c0:	3804d3fa 	srli	r2,r7,15
  8079c4:	10801dc4 	addi	r2,r2,119
  8079c8:	100690fa 	slli	r3,r2,3
  8079cc:	003f9106 	br	807814 <_free_r+0x134>
  8079d0:	00815504 	movi	r2,1364
  8079d4:	10c0032e 	bgeu	r2,r3,8079e4 <_free_r+0x304>
  8079d8:	00801f84 	movi	r2,126
  8079dc:	00c0fc04 	movi	r3,1008
  8079e0:	003f8c06 	br	807814 <_free_r+0x134>
  8079e4:	3804d4ba 	srli	r2,r7,18
  8079e8:	10801f04 	addi	r2,r2,124
  8079ec:	100690fa 	slli	r3,r2,3
  8079f0:	003f8806 	br	807814 <_free_r+0x134>

008079f4 <__sfvwrite_r>:
  8079f4:	30800217 	ldw	r2,8(r6)
  8079f8:	defff504 	addi	sp,sp,-44
  8079fc:	df000915 	stw	fp,36(sp)
  807a00:	dd800715 	stw	r22,28(sp)
  807a04:	dc800315 	stw	r18,12(sp)
  807a08:	dfc00a15 	stw	ra,40(sp)
  807a0c:	ddc00815 	stw	r23,32(sp)
  807a10:	dd400615 	stw	r21,24(sp)
  807a14:	dd000515 	stw	r20,20(sp)
  807a18:	dcc00415 	stw	r19,16(sp)
  807a1c:	dc400215 	stw	r17,8(sp)
  807a20:	dc000115 	stw	r16,4(sp)
  807a24:	302d883a 	mov	r22,r6
  807a28:	2039883a 	mov	fp,r4
  807a2c:	2825883a 	mov	r18,r5
  807a30:	10001c26 	beq	r2,zero,807aa4 <__sfvwrite_r+0xb0>
  807a34:	29c0030b 	ldhu	r7,12(r5)
  807a38:	3880020c 	andi	r2,r7,8
  807a3c:	10002726 	beq	r2,zero,807adc <__sfvwrite_r+0xe8>
  807a40:	28800417 	ldw	r2,16(r5)
  807a44:	10002526 	beq	r2,zero,807adc <__sfvwrite_r+0xe8>
  807a48:	3880008c 	andi	r2,r7,2
  807a4c:	b5400017 	ldw	r21,0(r22)
  807a50:	10002826 	beq	r2,zero,807af4 <__sfvwrite_r+0x100>
  807a54:	0021883a 	mov	r16,zero
  807a58:	0023883a 	mov	r17,zero
  807a5c:	880d883a 	mov	r6,r17
  807a60:	e009883a 	mov	r4,fp
  807a64:	00810004 	movi	r2,1024
  807a68:	80006e26 	beq	r16,zero,807c24 <__sfvwrite_r+0x230>
  807a6c:	800f883a 	mov	r7,r16
  807a70:	91400717 	ldw	r5,28(r18)
  807a74:	1400012e 	bgeu	r2,r16,807a7c <__sfvwrite_r+0x88>
  807a78:	100f883a 	mov	r7,r2
  807a7c:	90c00917 	ldw	r3,36(r18)
  807a80:	183ee83a 	callr	r3
  807a84:	1007883a 	mov	r3,r2
  807a88:	80a1c83a 	sub	r16,r16,r2
  807a8c:	88a3883a 	add	r17,r17,r2
  807a90:	00806d0e 	bge	zero,r2,807c48 <__sfvwrite_r+0x254>
  807a94:	b0800217 	ldw	r2,8(r22)
  807a98:	10c5c83a 	sub	r2,r2,r3
  807a9c:	b0800215 	stw	r2,8(r22)
  807aa0:	103fee1e 	bne	r2,zero,807a5c <__sfvwrite_r+0x68>
  807aa4:	0009883a 	mov	r4,zero
  807aa8:	2005883a 	mov	r2,r4
  807aac:	dfc00a17 	ldw	ra,40(sp)
  807ab0:	df000917 	ldw	fp,36(sp)
  807ab4:	ddc00817 	ldw	r23,32(sp)
  807ab8:	dd800717 	ldw	r22,28(sp)
  807abc:	dd400617 	ldw	r21,24(sp)
  807ac0:	dd000517 	ldw	r20,20(sp)
  807ac4:	dcc00417 	ldw	r19,16(sp)
  807ac8:	dc800317 	ldw	r18,12(sp)
  807acc:	dc400217 	ldw	r17,8(sp)
  807ad0:	dc000117 	ldw	r16,4(sp)
  807ad4:	dec00b04 	addi	sp,sp,44
  807ad8:	f800283a 	ret
  807adc:	08057bc0 	call	8057bc <__swsetup_r>
  807ae0:	1000e41e 	bne	r2,zero,807e74 <__sfvwrite_r+0x480>
  807ae4:	91c0030b 	ldhu	r7,12(r18)
  807ae8:	b5400017 	ldw	r21,0(r22)
  807aec:	3880008c 	andi	r2,r7,2
  807af0:	103fd81e 	bne	r2,zero,807a54 <__sfvwrite_r+0x60>
  807af4:	3880004c 	andi	r2,r7,1
  807af8:	1005003a 	cmpeq	r2,r2,zero
  807afc:	10005726 	beq	r2,zero,807c5c <__sfvwrite_r+0x268>
  807b00:	0029883a 	mov	r20,zero
  807b04:	002f883a 	mov	r23,zero
  807b08:	a0004226 	beq	r20,zero,807c14 <__sfvwrite_r+0x220>
  807b0c:	3880800c 	andi	r2,r7,512
  807b10:	94000217 	ldw	r16,8(r18)
  807b14:	10008b26 	beq	r2,zero,807d44 <__sfvwrite_r+0x350>
  807b18:	800d883a 	mov	r6,r16
  807b1c:	a400a536 	bltu	r20,r16,807db4 <__sfvwrite_r+0x3c0>
  807b20:	3881200c 	andi	r2,r7,1152
  807b24:	10002726 	beq	r2,zero,807bc4 <__sfvwrite_r+0x1d0>
  807b28:	90800517 	ldw	r2,20(r18)
  807b2c:	92000417 	ldw	r8,16(r18)
  807b30:	91400017 	ldw	r5,0(r18)
  807b34:	1087883a 	add	r3,r2,r2
  807b38:	1887883a 	add	r3,r3,r2
  807b3c:	1808d7fa 	srli	r4,r3,31
  807b40:	2a21c83a 	sub	r16,r5,r8
  807b44:	80800044 	addi	r2,r16,1
  807b48:	20c9883a 	add	r4,r4,r3
  807b4c:	2027d07a 	srai	r19,r4,1
  807b50:	a085883a 	add	r2,r20,r2
  807b54:	980d883a 	mov	r6,r19
  807b58:	9880022e 	bgeu	r19,r2,807b64 <__sfvwrite_r+0x170>
  807b5c:	1027883a 	mov	r19,r2
  807b60:	100d883a 	mov	r6,r2
  807b64:	3881000c 	andi	r2,r7,1024
  807b68:	1000b826 	beq	r2,zero,807e4c <__sfvwrite_r+0x458>
  807b6c:	300b883a 	mov	r5,r6
  807b70:	e009883a 	mov	r4,fp
  807b74:	08082680 	call	808268 <_malloc_r>
  807b78:	10003126 	beq	r2,zero,807c40 <__sfvwrite_r+0x24c>
  807b7c:	91400417 	ldw	r5,16(r18)
  807b80:	1009883a 	mov	r4,r2
  807b84:	800d883a 	mov	r6,r16
  807b88:	1023883a 	mov	r17,r2
  807b8c:	0808a8c0 	call	808a8c <memcpy>
  807b90:	90c0030b 	ldhu	r3,12(r18)
  807b94:	00beffc4 	movi	r2,-1025
  807b98:	1886703a 	and	r3,r3,r2
  807b9c:	18c02014 	ori	r3,r3,128
  807ba0:	90c0030d 	sth	r3,12(r18)
  807ba4:	9c07c83a 	sub	r3,r19,r16
  807ba8:	8c05883a 	add	r2,r17,r16
  807bac:	a00d883a 	mov	r6,r20
  807bb0:	a021883a 	mov	r16,r20
  807bb4:	90800015 	stw	r2,0(r18)
  807bb8:	90c00215 	stw	r3,8(r18)
  807bbc:	94400415 	stw	r17,16(r18)
  807bc0:	94c00515 	stw	r19,20(r18)
  807bc4:	91000017 	ldw	r4,0(r18)
  807bc8:	b80b883a 	mov	r5,r23
  807bcc:	a023883a 	mov	r17,r20
  807bd0:	0808b2c0 	call	808b2c <memmove>
  807bd4:	90c00217 	ldw	r3,8(r18)
  807bd8:	90800017 	ldw	r2,0(r18)
  807bdc:	a027883a 	mov	r19,r20
  807be0:	1c07c83a 	sub	r3,r3,r16
  807be4:	1405883a 	add	r2,r2,r16
  807be8:	90c00215 	stw	r3,8(r18)
  807bec:	a021883a 	mov	r16,r20
  807bf0:	90800015 	stw	r2,0(r18)
  807bf4:	b0800217 	ldw	r2,8(r22)
  807bf8:	1405c83a 	sub	r2,r2,r16
  807bfc:	b0800215 	stw	r2,8(r22)
  807c00:	103fa826 	beq	r2,zero,807aa4 <__sfvwrite_r+0xb0>
  807c04:	a469c83a 	sub	r20,r20,r17
  807c08:	91c0030b 	ldhu	r7,12(r18)
  807c0c:	bcef883a 	add	r23,r23,r19
  807c10:	a03fbe1e 	bne	r20,zero,807b0c <__sfvwrite_r+0x118>
  807c14:	adc00017 	ldw	r23,0(r21)
  807c18:	ad000117 	ldw	r20,4(r21)
  807c1c:	ad400204 	addi	r21,r21,8
  807c20:	003fb906 	br	807b08 <__sfvwrite_r+0x114>
  807c24:	ac400017 	ldw	r17,0(r21)
  807c28:	ac000117 	ldw	r16,4(r21)
  807c2c:	ad400204 	addi	r21,r21,8
  807c30:	003f8a06 	br	807a5c <__sfvwrite_r+0x68>
  807c34:	91400417 	ldw	r5,16(r18)
  807c38:	e009883a 	mov	r4,fp
  807c3c:	08076e00 	call	8076e0 <_free_r>
  807c40:	00800304 	movi	r2,12
  807c44:	e0800015 	stw	r2,0(fp)
  807c48:	9080030b 	ldhu	r2,12(r18)
  807c4c:	013fffc4 	movi	r4,-1
  807c50:	10801014 	ori	r2,r2,64
  807c54:	9080030d 	sth	r2,12(r18)
  807c58:	003f9306 	br	807aa8 <__sfvwrite_r+0xb4>
  807c5c:	0027883a 	mov	r19,zero
  807c60:	002f883a 	mov	r23,zero
  807c64:	d8000015 	stw	zero,0(sp)
  807c68:	0029883a 	mov	r20,zero
  807c6c:	98001e26 	beq	r19,zero,807ce8 <__sfvwrite_r+0x2f4>
  807c70:	d8c00017 	ldw	r3,0(sp)
  807c74:	1804c03a 	cmpne	r2,r3,zero
  807c78:	10005e26 	beq	r2,zero,807df4 <__sfvwrite_r+0x400>
  807c7c:	9821883a 	mov	r16,r19
  807c80:	a4c0012e 	bgeu	r20,r19,807c88 <__sfvwrite_r+0x294>
  807c84:	a021883a 	mov	r16,r20
  807c88:	91000017 	ldw	r4,0(r18)
  807c8c:	90800417 	ldw	r2,16(r18)
  807c90:	91800217 	ldw	r6,8(r18)
  807c94:	91c00517 	ldw	r7,20(r18)
  807c98:	1100022e 	bgeu	r2,r4,807ca4 <__sfvwrite_r+0x2b0>
  807c9c:	31e3883a 	add	r17,r6,r7
  807ca0:	8c001616 	blt	r17,r16,807cfc <__sfvwrite_r+0x308>
  807ca4:	81c03816 	blt	r16,r7,807d88 <__sfvwrite_r+0x394>
  807ca8:	90c00917 	ldw	r3,36(r18)
  807cac:	91400717 	ldw	r5,28(r18)
  807cb0:	e009883a 	mov	r4,fp
  807cb4:	b80d883a 	mov	r6,r23
  807cb8:	183ee83a 	callr	r3
  807cbc:	1023883a 	mov	r17,r2
  807cc0:	00bfe10e 	bge	zero,r2,807c48 <__sfvwrite_r+0x254>
  807cc4:	a469c83a 	sub	r20,r20,r17
  807cc8:	a0001826 	beq	r20,zero,807d2c <__sfvwrite_r+0x338>
  807ccc:	b0800217 	ldw	r2,8(r22)
  807cd0:	1445c83a 	sub	r2,r2,r17
  807cd4:	b0800215 	stw	r2,8(r22)
  807cd8:	103f7226 	beq	r2,zero,807aa4 <__sfvwrite_r+0xb0>
  807cdc:	9c67c83a 	sub	r19,r19,r17
  807ce0:	bc6f883a 	add	r23,r23,r17
  807ce4:	983fe21e 	bne	r19,zero,807c70 <__sfvwrite_r+0x27c>
  807ce8:	adc00017 	ldw	r23,0(r21)
  807cec:	acc00117 	ldw	r19,4(r21)
  807cf0:	ad400204 	addi	r21,r21,8
  807cf4:	d8000015 	stw	zero,0(sp)
  807cf8:	003fdc06 	br	807c6c <__sfvwrite_r+0x278>
  807cfc:	b80b883a 	mov	r5,r23
  807d00:	880d883a 	mov	r6,r17
  807d04:	0808b2c0 	call	808b2c <memmove>
  807d08:	90c00017 	ldw	r3,0(r18)
  807d0c:	e009883a 	mov	r4,fp
  807d10:	900b883a 	mov	r5,r18
  807d14:	1c47883a 	add	r3,r3,r17
  807d18:	90c00015 	stw	r3,0(r18)
  807d1c:	08070c40 	call	8070c4 <_fflush_r>
  807d20:	103fc91e 	bne	r2,zero,807c48 <__sfvwrite_r+0x254>
  807d24:	a469c83a 	sub	r20,r20,r17
  807d28:	a03fe81e 	bne	r20,zero,807ccc <__sfvwrite_r+0x2d8>
  807d2c:	e009883a 	mov	r4,fp
  807d30:	900b883a 	mov	r5,r18
  807d34:	08070c40 	call	8070c4 <_fflush_r>
  807d38:	103fc31e 	bne	r2,zero,807c48 <__sfvwrite_r+0x254>
  807d3c:	d8000015 	stw	zero,0(sp)
  807d40:	003fe206 	br	807ccc <__sfvwrite_r+0x2d8>
  807d44:	91000017 	ldw	r4,0(r18)
  807d48:	90800417 	ldw	r2,16(r18)
  807d4c:	1100022e 	bgeu	r2,r4,807d58 <__sfvwrite_r+0x364>
  807d50:	8023883a 	mov	r17,r16
  807d54:	85003136 	bltu	r16,r20,807e1c <__sfvwrite_r+0x428>
  807d58:	91c00517 	ldw	r7,20(r18)
  807d5c:	a1c01836 	bltu	r20,r7,807dc0 <__sfvwrite_r+0x3cc>
  807d60:	90c00917 	ldw	r3,36(r18)
  807d64:	91400717 	ldw	r5,28(r18)
  807d68:	e009883a 	mov	r4,fp
  807d6c:	b80d883a 	mov	r6,r23
  807d70:	183ee83a 	callr	r3
  807d74:	1021883a 	mov	r16,r2
  807d78:	00bfb30e 	bge	zero,r2,807c48 <__sfvwrite_r+0x254>
  807d7c:	1023883a 	mov	r17,r2
  807d80:	1027883a 	mov	r19,r2
  807d84:	003f9b06 	br	807bf4 <__sfvwrite_r+0x200>
  807d88:	b80b883a 	mov	r5,r23
  807d8c:	800d883a 	mov	r6,r16
  807d90:	0808b2c0 	call	808b2c <memmove>
  807d94:	90c00217 	ldw	r3,8(r18)
  807d98:	90800017 	ldw	r2,0(r18)
  807d9c:	8023883a 	mov	r17,r16
  807da0:	1c07c83a 	sub	r3,r3,r16
  807da4:	1405883a 	add	r2,r2,r16
  807da8:	90c00215 	stw	r3,8(r18)
  807dac:	90800015 	stw	r2,0(r18)
  807db0:	003fc406 	br	807cc4 <__sfvwrite_r+0x2d0>
  807db4:	a00d883a 	mov	r6,r20
  807db8:	a021883a 	mov	r16,r20
  807dbc:	003f8106 	br	807bc4 <__sfvwrite_r+0x1d0>
  807dc0:	b80b883a 	mov	r5,r23
  807dc4:	a00d883a 	mov	r6,r20
  807dc8:	0808b2c0 	call	808b2c <memmove>
  807dcc:	90c00217 	ldw	r3,8(r18)
  807dd0:	90800017 	ldw	r2,0(r18)
  807dd4:	a021883a 	mov	r16,r20
  807dd8:	1d07c83a 	sub	r3,r3,r20
  807ddc:	1505883a 	add	r2,r2,r20
  807de0:	a023883a 	mov	r17,r20
  807de4:	a027883a 	mov	r19,r20
  807de8:	90c00215 	stw	r3,8(r18)
  807dec:	90800015 	stw	r2,0(r18)
  807df0:	003f8006 	br	807bf4 <__sfvwrite_r+0x200>
  807df4:	b809883a 	mov	r4,r23
  807df8:	01400284 	movi	r5,10
  807dfc:	980d883a 	mov	r6,r19
  807e00:	08089a80 	call	8089a8 <memchr>
  807e04:	10001726 	beq	r2,zero,807e64 <__sfvwrite_r+0x470>
  807e08:	15c5c83a 	sub	r2,r2,r23
  807e0c:	15000044 	addi	r20,r2,1
  807e10:	00800044 	movi	r2,1
  807e14:	d8800015 	stw	r2,0(sp)
  807e18:	003f9806 	br	807c7c <__sfvwrite_r+0x288>
  807e1c:	b80b883a 	mov	r5,r23
  807e20:	800d883a 	mov	r6,r16
  807e24:	0808b2c0 	call	808b2c <memmove>
  807e28:	90c00017 	ldw	r3,0(r18)
  807e2c:	e009883a 	mov	r4,fp
  807e30:	900b883a 	mov	r5,r18
  807e34:	1c07883a 	add	r3,r3,r16
  807e38:	90c00015 	stw	r3,0(r18)
  807e3c:	8027883a 	mov	r19,r16
  807e40:	08070c40 	call	8070c4 <_fflush_r>
  807e44:	103f6b26 	beq	r2,zero,807bf4 <__sfvwrite_r+0x200>
  807e48:	003f7f06 	br	807c48 <__sfvwrite_r+0x254>
  807e4c:	400b883a 	mov	r5,r8
  807e50:	e009883a 	mov	r4,fp
  807e54:	0809c980 	call	809c98 <_realloc_r>
  807e58:	103f7626 	beq	r2,zero,807c34 <__sfvwrite_r+0x240>
  807e5c:	1023883a 	mov	r17,r2
  807e60:	003f5006 	br	807ba4 <__sfvwrite_r+0x1b0>
  807e64:	00c00044 	movi	r3,1
  807e68:	9d000044 	addi	r20,r19,1
  807e6c:	d8c00015 	stw	r3,0(sp)
  807e70:	003f8206 	br	807c7c <__sfvwrite_r+0x288>
  807e74:	9080030b 	ldhu	r2,12(r18)
  807e78:	00c00244 	movi	r3,9
  807e7c:	013fffc4 	movi	r4,-1
  807e80:	10801014 	ori	r2,r2,64
  807e84:	9080030d 	sth	r2,12(r18)
  807e88:	e0c00015 	stw	r3,0(fp)
  807e8c:	003f0606 	br	807aa8 <__sfvwrite_r+0xb4>

00807e90 <_fwalk_reent>:
  807e90:	defff704 	addi	sp,sp,-36
  807e94:	dcc00315 	stw	r19,12(sp)
  807e98:	24c0b804 	addi	r19,r4,736
  807e9c:	dd800615 	stw	r22,24(sp)
  807ea0:	dd400515 	stw	r21,20(sp)
  807ea4:	dfc00815 	stw	ra,32(sp)
  807ea8:	ddc00715 	stw	r23,28(sp)
  807eac:	dd000415 	stw	r20,16(sp)
  807eb0:	dc800215 	stw	r18,8(sp)
  807eb4:	dc400115 	stw	r17,4(sp)
  807eb8:	dc000015 	stw	r16,0(sp)
  807ebc:	202b883a 	mov	r21,r4
  807ec0:	282d883a 	mov	r22,r5
  807ec4:	080734c0 	call	80734c <__sfp_lock_acquire>
  807ec8:	98002126 	beq	r19,zero,807f50 <_fwalk_reent+0xc0>
  807ecc:	002f883a 	mov	r23,zero
  807ed0:	9c800117 	ldw	r18,4(r19)
  807ed4:	9c000217 	ldw	r16,8(r19)
  807ed8:	90bfffc4 	addi	r2,r18,-1
  807edc:	10000d16 	blt	r2,zero,807f14 <_fwalk_reent+0x84>
  807ee0:	0023883a 	mov	r17,zero
  807ee4:	053fffc4 	movi	r20,-1
  807ee8:	8080030f 	ldh	r2,12(r16)
  807eec:	8c400044 	addi	r17,r17,1
  807ef0:	10000626 	beq	r2,zero,807f0c <_fwalk_reent+0x7c>
  807ef4:	8080038f 	ldh	r2,14(r16)
  807ef8:	800b883a 	mov	r5,r16
  807efc:	a809883a 	mov	r4,r21
  807f00:	15000226 	beq	r2,r20,807f0c <_fwalk_reent+0x7c>
  807f04:	b03ee83a 	callr	r22
  807f08:	b8aeb03a 	or	r23,r23,r2
  807f0c:	84001704 	addi	r16,r16,92
  807f10:	947ff51e 	bne	r18,r17,807ee8 <_fwalk_reent+0x58>
  807f14:	9cc00017 	ldw	r19,0(r19)
  807f18:	983fed1e 	bne	r19,zero,807ed0 <_fwalk_reent+0x40>
  807f1c:	08073500 	call	807350 <__sfp_lock_release>
  807f20:	b805883a 	mov	r2,r23
  807f24:	dfc00817 	ldw	ra,32(sp)
  807f28:	ddc00717 	ldw	r23,28(sp)
  807f2c:	dd800617 	ldw	r22,24(sp)
  807f30:	dd400517 	ldw	r21,20(sp)
  807f34:	dd000417 	ldw	r20,16(sp)
  807f38:	dcc00317 	ldw	r19,12(sp)
  807f3c:	dc800217 	ldw	r18,8(sp)
  807f40:	dc400117 	ldw	r17,4(sp)
  807f44:	dc000017 	ldw	r16,0(sp)
  807f48:	dec00904 	addi	sp,sp,36
  807f4c:	f800283a 	ret
  807f50:	002f883a 	mov	r23,zero
  807f54:	003ff106 	br	807f1c <_fwalk_reent+0x8c>

00807f58 <_fwalk>:
  807f58:	defff804 	addi	sp,sp,-32
  807f5c:	dcc00315 	stw	r19,12(sp)
  807f60:	24c0b804 	addi	r19,r4,736
  807f64:	dd400515 	stw	r21,20(sp)
  807f68:	dfc00715 	stw	ra,28(sp)
  807f6c:	dd800615 	stw	r22,24(sp)
  807f70:	dd000415 	stw	r20,16(sp)
  807f74:	dc800215 	stw	r18,8(sp)
  807f78:	dc400115 	stw	r17,4(sp)
  807f7c:	dc000015 	stw	r16,0(sp)
  807f80:	282b883a 	mov	r21,r5
  807f84:	080734c0 	call	80734c <__sfp_lock_acquire>
  807f88:	98001f26 	beq	r19,zero,808008 <_fwalk+0xb0>
  807f8c:	002d883a 	mov	r22,zero
  807f90:	9c800117 	ldw	r18,4(r19)
  807f94:	9c000217 	ldw	r16,8(r19)
  807f98:	90bfffc4 	addi	r2,r18,-1
  807f9c:	10000c16 	blt	r2,zero,807fd0 <_fwalk+0x78>
  807fa0:	0023883a 	mov	r17,zero
  807fa4:	053fffc4 	movi	r20,-1
  807fa8:	8080030f 	ldh	r2,12(r16)
  807fac:	8c400044 	addi	r17,r17,1
  807fb0:	10000526 	beq	r2,zero,807fc8 <_fwalk+0x70>
  807fb4:	8080038f 	ldh	r2,14(r16)
  807fb8:	8009883a 	mov	r4,r16
  807fbc:	15000226 	beq	r2,r20,807fc8 <_fwalk+0x70>
  807fc0:	a83ee83a 	callr	r21
  807fc4:	b0acb03a 	or	r22,r22,r2
  807fc8:	84001704 	addi	r16,r16,92
  807fcc:	947ff61e 	bne	r18,r17,807fa8 <_fwalk+0x50>
  807fd0:	9cc00017 	ldw	r19,0(r19)
  807fd4:	983fee1e 	bne	r19,zero,807f90 <_fwalk+0x38>
  807fd8:	08073500 	call	807350 <__sfp_lock_release>
  807fdc:	b005883a 	mov	r2,r22
  807fe0:	dfc00717 	ldw	ra,28(sp)
  807fe4:	dd800617 	ldw	r22,24(sp)
  807fe8:	dd400517 	ldw	r21,20(sp)
  807fec:	dd000417 	ldw	r20,16(sp)
  807ff0:	dcc00317 	ldw	r19,12(sp)
  807ff4:	dc800217 	ldw	r18,8(sp)
  807ff8:	dc400117 	ldw	r17,4(sp)
  807ffc:	dc000017 	ldw	r16,0(sp)
  808000:	dec00804 	addi	sp,sp,32
  808004:	f800283a 	ret
  808008:	002d883a 	mov	r22,zero
  80800c:	003ff206 	br	807fd8 <_fwalk+0x80>

00808010 <__locale_charset>:
  808010:	d0a00c17 	ldw	r2,-32720(gp)
  808014:	f800283a 	ret

00808018 <_localeconv_r>:
  808018:	00802074 	movhi	r2,129
  80801c:	1086b404 	addi	r2,r2,6864
  808020:	f800283a 	ret

00808024 <localeconv>:
  808024:	00802074 	movhi	r2,129
  808028:	108e4f04 	addi	r2,r2,14652
  80802c:	11000017 	ldw	r4,0(r2)
  808030:	08080181 	jmpi	808018 <_localeconv_r>

00808034 <_setlocale_r>:
  808034:	defffc04 	addi	sp,sp,-16
  808038:	00c02074 	movhi	r3,129
  80803c:	18c68c04 	addi	r3,r3,6704
  808040:	dc800215 	stw	r18,8(sp)
  808044:	dc400115 	stw	r17,4(sp)
  808048:	dc000015 	stw	r16,0(sp)
  80804c:	2023883a 	mov	r17,r4
  808050:	2825883a 	mov	r18,r5
  808054:	dfc00315 	stw	ra,12(sp)
  808058:	3021883a 	mov	r16,r6
  80805c:	3009883a 	mov	r4,r6
  808060:	180b883a 	mov	r5,r3
  808064:	30000926 	beq	r6,zero,80808c <_setlocale_r+0x58>
  808068:	080a4b80 	call	80a4b8 <strcmp>
  80806c:	8009883a 	mov	r4,r16
  808070:	01402074 	movhi	r5,129
  808074:	29462b04 	addi	r5,r5,6316
  808078:	10000b1e 	bne	r2,zero,8080a8 <_setlocale_r+0x74>
  80807c:	8c000d15 	stw	r16,52(r17)
  808080:	8c800c15 	stw	r18,48(r17)
  808084:	00c02074 	movhi	r3,129
  808088:	18c68c04 	addi	r3,r3,6704
  80808c:	1805883a 	mov	r2,r3
  808090:	dfc00317 	ldw	ra,12(sp)
  808094:	dc800217 	ldw	r18,8(sp)
  808098:	dc400117 	ldw	r17,4(sp)
  80809c:	dc000017 	ldw	r16,0(sp)
  8080a0:	dec00404 	addi	sp,sp,16
  8080a4:	f800283a 	ret
  8080a8:	080a4b80 	call	80a4b8 <strcmp>
  8080ac:	0007883a 	mov	r3,zero
  8080b0:	103ff226 	beq	r2,zero,80807c <_setlocale_r+0x48>
  8080b4:	003ff506 	br	80808c <_setlocale_r+0x58>

008080b8 <setlocale>:
  8080b8:	01802074 	movhi	r6,129
  8080bc:	318e4f04 	addi	r6,r6,14652
  8080c0:	2007883a 	mov	r3,r4
  8080c4:	31000017 	ldw	r4,0(r6)
  8080c8:	280d883a 	mov	r6,r5
  8080cc:	180b883a 	mov	r5,r3
  8080d0:	08080341 	jmpi	808034 <_setlocale_r>

008080d4 <__smakebuf_r>:
  8080d4:	2880030b 	ldhu	r2,12(r5)
  8080d8:	deffed04 	addi	sp,sp,-76
  8080dc:	dc401015 	stw	r17,64(sp)
  8080e0:	1080008c 	andi	r2,r2,2
  8080e4:	dc000f15 	stw	r16,60(sp)
  8080e8:	dfc01215 	stw	ra,72(sp)
  8080ec:	dc801115 	stw	r18,68(sp)
  8080f0:	2821883a 	mov	r16,r5
  8080f4:	2023883a 	mov	r17,r4
  8080f8:	10000b26 	beq	r2,zero,808128 <__smakebuf_r+0x54>
  8080fc:	28c010c4 	addi	r3,r5,67
  808100:	00800044 	movi	r2,1
  808104:	28800515 	stw	r2,20(r5)
  808108:	28c00415 	stw	r3,16(r5)
  80810c:	28c00015 	stw	r3,0(r5)
  808110:	dfc01217 	ldw	ra,72(sp)
  808114:	dc801117 	ldw	r18,68(sp)
  808118:	dc401017 	ldw	r17,64(sp)
  80811c:	dc000f17 	ldw	r16,60(sp)
  808120:	dec01304 	addi	sp,sp,76
  808124:	f800283a 	ret
  808128:	2940038f 	ldh	r5,14(r5)
  80812c:	28002116 	blt	r5,zero,8081b4 <__smakebuf_r+0xe0>
  808130:	d80d883a 	mov	r6,sp
  808134:	080a8340 	call	80a834 <_fstat_r>
  808138:	10001e16 	blt	r2,zero,8081b4 <__smakebuf_r+0xe0>
  80813c:	d8800117 	ldw	r2,4(sp)
  808140:	00e00014 	movui	r3,32768
  808144:	113c000c 	andi	r4,r2,61440
  808148:	20c03126 	beq	r4,r3,808210 <__smakebuf_r+0x13c>
  80814c:	8080030b 	ldhu	r2,12(r16)
  808150:	00c80004 	movi	r3,8192
  808154:	10820014 	ori	r2,r2,2048
  808158:	8080030d 	sth	r2,12(r16)
  80815c:	20c01e26 	beq	r4,r3,8081d8 <__smakebuf_r+0x104>
  808160:	04810004 	movi	r18,1024
  808164:	8809883a 	mov	r4,r17
  808168:	900b883a 	mov	r5,r18
  80816c:	08082680 	call	808268 <_malloc_r>
  808170:	1009883a 	mov	r4,r2
  808174:	10003126 	beq	r2,zero,80823c <__smakebuf_r+0x168>
  808178:	80c0030b 	ldhu	r3,12(r16)
  80817c:	00802034 	movhi	r2,128
  808180:	109d1004 	addi	r2,r2,29760
  808184:	88800f15 	stw	r2,60(r17)
  808188:	18c02014 	ori	r3,r3,128
  80818c:	84800515 	stw	r18,20(r16)
  808190:	80c0030d 	sth	r3,12(r16)
  808194:	81000415 	stw	r4,16(r16)
  808198:	81000015 	stw	r4,0(r16)
  80819c:	dfc01217 	ldw	ra,72(sp)
  8081a0:	dc801117 	ldw	r18,68(sp)
  8081a4:	dc401017 	ldw	r17,64(sp)
  8081a8:	dc000f17 	ldw	r16,60(sp)
  8081ac:	dec01304 	addi	sp,sp,76
  8081b0:	f800283a 	ret
  8081b4:	80c0030b 	ldhu	r3,12(r16)
  8081b8:	1880200c 	andi	r2,r3,128
  8081bc:	10000426 	beq	r2,zero,8081d0 <__smakebuf_r+0xfc>
  8081c0:	04801004 	movi	r18,64
  8081c4:	18820014 	ori	r2,r3,2048
  8081c8:	8080030d 	sth	r2,12(r16)
  8081cc:	003fe506 	br	808164 <__smakebuf_r+0x90>
  8081d0:	04810004 	movi	r18,1024
  8081d4:	003ffb06 	br	8081c4 <__smakebuf_r+0xf0>
  8081d8:	8140038f 	ldh	r5,14(r16)
  8081dc:	8809883a 	mov	r4,r17
  8081e0:	080a8a80 	call	80a8a8 <_isatty_r>
  8081e4:	103fde26 	beq	r2,zero,808160 <__smakebuf_r+0x8c>
  8081e8:	8080030b 	ldhu	r2,12(r16)
  8081ec:	80c010c4 	addi	r3,r16,67
  8081f0:	04810004 	movi	r18,1024
  8081f4:	10800054 	ori	r2,r2,1
  8081f8:	8080030d 	sth	r2,12(r16)
  8081fc:	00800044 	movi	r2,1
  808200:	80c00415 	stw	r3,16(r16)
  808204:	80800515 	stw	r2,20(r16)
  808208:	80c00015 	stw	r3,0(r16)
  80820c:	003fd506 	br	808164 <__smakebuf_r+0x90>
  808210:	80c00a17 	ldw	r3,40(r16)
  808214:	00802074 	movhi	r2,129
  808218:	10a8dd04 	addi	r2,r2,-23692
  80821c:	18bfcb1e 	bne	r3,r2,80814c <__smakebuf_r+0x78>
  808220:	8080030b 	ldhu	r2,12(r16)
  808224:	00c10004 	movi	r3,1024
  808228:	1825883a 	mov	r18,r3
  80822c:	10c4b03a 	or	r2,r2,r3
  808230:	8080030d 	sth	r2,12(r16)
  808234:	80c01315 	stw	r3,76(r16)
  808238:	003fca06 	br	808164 <__smakebuf_r+0x90>
  80823c:	8100030b 	ldhu	r4,12(r16)
  808240:	2080800c 	andi	r2,r4,512
  808244:	103fb21e 	bne	r2,zero,808110 <__smakebuf_r+0x3c>
  808248:	80c010c4 	addi	r3,r16,67
  80824c:	21000094 	ori	r4,r4,2
  808250:	00800044 	movi	r2,1
  808254:	80800515 	stw	r2,20(r16)
  808258:	8100030d 	sth	r4,12(r16)
  80825c:	80c00415 	stw	r3,16(r16)
  808260:	80c00015 	stw	r3,0(r16)
  808264:	003faa06 	br	808110 <__smakebuf_r+0x3c>

00808268 <_malloc_r>:
  808268:	defff604 	addi	sp,sp,-40
  80826c:	28c002c4 	addi	r3,r5,11
  808270:	00800584 	movi	r2,22
  808274:	dc800215 	stw	r18,8(sp)
  808278:	dfc00915 	stw	ra,36(sp)
  80827c:	df000815 	stw	fp,32(sp)
  808280:	ddc00715 	stw	r23,28(sp)
  808284:	dd800615 	stw	r22,24(sp)
  808288:	dd400515 	stw	r21,20(sp)
  80828c:	dd000415 	stw	r20,16(sp)
  808290:	dcc00315 	stw	r19,12(sp)
  808294:	dc400115 	stw	r17,4(sp)
  808298:	dc000015 	stw	r16,0(sp)
  80829c:	2025883a 	mov	r18,r4
  8082a0:	10c01236 	bltu	r2,r3,8082ec <_malloc_r+0x84>
  8082a4:	04400404 	movi	r17,16
  8082a8:	8940142e 	bgeu	r17,r5,8082fc <_malloc_r+0x94>
  8082ac:	00800304 	movi	r2,12
  8082b0:	0007883a 	mov	r3,zero
  8082b4:	90800015 	stw	r2,0(r18)
  8082b8:	1805883a 	mov	r2,r3
  8082bc:	dfc00917 	ldw	ra,36(sp)
  8082c0:	df000817 	ldw	fp,32(sp)
  8082c4:	ddc00717 	ldw	r23,28(sp)
  8082c8:	dd800617 	ldw	r22,24(sp)
  8082cc:	dd400517 	ldw	r21,20(sp)
  8082d0:	dd000417 	ldw	r20,16(sp)
  8082d4:	dcc00317 	ldw	r19,12(sp)
  8082d8:	dc800217 	ldw	r18,8(sp)
  8082dc:	dc400117 	ldw	r17,4(sp)
  8082e0:	dc000017 	ldw	r16,0(sp)
  8082e4:	dec00a04 	addi	sp,sp,40
  8082e8:	f800283a 	ret
  8082ec:	00bffe04 	movi	r2,-8
  8082f0:	18a2703a 	and	r17,r3,r2
  8082f4:	883fed16 	blt	r17,zero,8082ac <_malloc_r+0x44>
  8082f8:	897fec36 	bltu	r17,r5,8082ac <_malloc_r+0x44>
  8082fc:	9009883a 	mov	r4,r18
  808300:	080c6ac0 	call	80c6ac <__malloc_lock>
  808304:	00807dc4 	movi	r2,503
  808308:	14402b2e 	bgeu	r2,r17,8083b8 <_malloc_r+0x150>
  80830c:	8806d27a 	srli	r3,r17,9
  808310:	18003f1e 	bne	r3,zero,808410 <_malloc_r+0x1a8>
  808314:	880cd0fa 	srli	r6,r17,3
  808318:	300490fa 	slli	r2,r6,3
  80831c:	02c02074 	movhi	r11,129
  808320:	5ac86504 	addi	r11,r11,8596
  808324:	12cb883a 	add	r5,r2,r11
  808328:	2c000317 	ldw	r16,12(r5)
  80832c:	580f883a 	mov	r7,r11
  808330:	2c00041e 	bne	r5,r16,808344 <_malloc_r+0xdc>
  808334:	00000a06 	br	808360 <_malloc_r+0xf8>
  808338:	1800860e 	bge	r3,zero,808554 <_malloc_r+0x2ec>
  80833c:	84000317 	ldw	r16,12(r16)
  808340:	2c000726 	beq	r5,r16,808360 <_malloc_r+0xf8>
  808344:	80800117 	ldw	r2,4(r16)
  808348:	00ffff04 	movi	r3,-4
  80834c:	10c8703a 	and	r4,r2,r3
  808350:	2447c83a 	sub	r3,r4,r17
  808354:	008003c4 	movi	r2,15
  808358:	10fff70e 	bge	r2,r3,808338 <_malloc_r+0xd0>
  80835c:	31bfffc4 	addi	r6,r6,-1
  808360:	32400044 	addi	r9,r6,1
  808364:	02802074 	movhi	r10,129
  808368:	52886704 	addi	r10,r10,8604
  80836c:	54000217 	ldw	r16,8(r10)
  808370:	8280a026 	beq	r16,r10,8085f4 <_malloc_r+0x38c>
  808374:	80800117 	ldw	r2,4(r16)
  808378:	00ffff04 	movi	r3,-4
  80837c:	10ca703a 	and	r5,r2,r3
  808380:	2c4dc83a 	sub	r6,r5,r17
  808384:	008003c4 	movi	r2,15
  808388:	11808316 	blt	r2,r6,808598 <_malloc_r+0x330>
  80838c:	52800315 	stw	r10,12(r10)
  808390:	52800215 	stw	r10,8(r10)
  808394:	30002916 	blt	r6,zero,80843c <_malloc_r+0x1d4>
  808398:	8147883a 	add	r3,r16,r5
  80839c:	18800117 	ldw	r2,4(r3)
  8083a0:	9009883a 	mov	r4,r18
  8083a4:	10800054 	ori	r2,r2,1
  8083a8:	18800115 	stw	r2,4(r3)
  8083ac:	080c6cc0 	call	80c6cc <__malloc_unlock>
  8083b0:	80c00204 	addi	r3,r16,8
  8083b4:	003fc006 	br	8082b8 <_malloc_r+0x50>
  8083b8:	02c02074 	movhi	r11,129
  8083bc:	5ac86504 	addi	r11,r11,8596
  8083c0:	8ac5883a 	add	r2,r17,r11
  8083c4:	14000317 	ldw	r16,12(r2)
  8083c8:	580f883a 	mov	r7,r11
  8083cc:	8806d0fa 	srli	r3,r17,3
  8083d0:	14006c26 	beq	r2,r16,808584 <_malloc_r+0x31c>
  8083d4:	80c00117 	ldw	r3,4(r16)
  8083d8:	00bfff04 	movi	r2,-4
  8083dc:	81800317 	ldw	r6,12(r16)
  8083e0:	1886703a 	and	r3,r3,r2
  8083e4:	80c7883a 	add	r3,r16,r3
  8083e8:	18800117 	ldw	r2,4(r3)
  8083ec:	81400217 	ldw	r5,8(r16)
  8083f0:	9009883a 	mov	r4,r18
  8083f4:	10800054 	ori	r2,r2,1
  8083f8:	18800115 	stw	r2,4(r3)
  8083fc:	31400215 	stw	r5,8(r6)
  808400:	29800315 	stw	r6,12(r5)
  808404:	080c6cc0 	call	80c6cc <__malloc_unlock>
  808408:	80c00204 	addi	r3,r16,8
  80840c:	003faa06 	br	8082b8 <_malloc_r+0x50>
  808410:	00800104 	movi	r2,4
  808414:	10c0052e 	bgeu	r2,r3,80842c <_malloc_r+0x1c4>
  808418:	00800504 	movi	r2,20
  80841c:	10c07836 	bltu	r2,r3,808600 <_malloc_r+0x398>
  808420:	198016c4 	addi	r6,r3,91
  808424:	300490fa 	slli	r2,r6,3
  808428:	003fbc06 	br	80831c <_malloc_r+0xb4>
  80842c:	8804d1ba 	srli	r2,r17,6
  808430:	11800e04 	addi	r6,r2,56
  808434:	300490fa 	slli	r2,r6,3
  808438:	003fb806 	br	80831c <_malloc_r+0xb4>
  80843c:	00807fc4 	movi	r2,511
  808440:	1140bb36 	bltu	r2,r5,808730 <_malloc_r+0x4c8>
  808444:	2806d0fa 	srli	r3,r5,3
  808448:	573ffe04 	addi	fp,r10,-8
  80844c:	00800044 	movi	r2,1
  808450:	180890fa 	slli	r4,r3,3
  808454:	1807d0ba 	srai	r3,r3,2
  808458:	e1c00117 	ldw	r7,4(fp)
  80845c:	5909883a 	add	r4,r11,r4
  808460:	21400217 	ldw	r5,8(r4)
  808464:	10c4983a 	sll	r2,r2,r3
  808468:	81000315 	stw	r4,12(r16)
  80846c:	81400215 	stw	r5,8(r16)
  808470:	388eb03a 	or	r7,r7,r2
  808474:	2c000315 	stw	r16,12(r5)
  808478:	24000215 	stw	r16,8(r4)
  80847c:	e1c00115 	stw	r7,4(fp)
  808480:	4807883a 	mov	r3,r9
  808484:	4800cd16 	blt	r9,zero,8087bc <_malloc_r+0x554>
  808488:	1807d0ba 	srai	r3,r3,2
  80848c:	00800044 	movi	r2,1
  808490:	10c8983a 	sll	r4,r2,r3
  808494:	39004436 	bltu	r7,r4,8085a8 <_malloc_r+0x340>
  808498:	21c4703a 	and	r2,r4,r7
  80849c:	10000a1e 	bne	r2,zero,8084c8 <_malloc_r+0x260>
  8084a0:	2109883a 	add	r4,r4,r4
  8084a4:	00bfff04 	movi	r2,-4
  8084a8:	4884703a 	and	r2,r9,r2
  8084ac:	3906703a 	and	r3,r7,r4
  8084b0:	12400104 	addi	r9,r2,4
  8084b4:	1800041e 	bne	r3,zero,8084c8 <_malloc_r+0x260>
  8084b8:	2109883a 	add	r4,r4,r4
  8084bc:	3904703a 	and	r2,r7,r4
  8084c0:	4a400104 	addi	r9,r9,4
  8084c4:	103ffc26 	beq	r2,zero,8084b8 <_malloc_r+0x250>
  8084c8:	480490fa 	slli	r2,r9,3
  8084cc:	4819883a 	mov	r12,r9
  8084d0:	023fff04 	movi	r8,-4
  8084d4:	589b883a 	add	r13,r11,r2
  8084d8:	6807883a 	mov	r3,r13
  8084dc:	014003c4 	movi	r5,15
  8084e0:	1c000317 	ldw	r16,12(r3)
  8084e4:	1c00041e 	bne	r3,r16,8084f8 <_malloc_r+0x290>
  8084e8:	0000a706 	br	808788 <_malloc_r+0x520>
  8084ec:	3000ab0e 	bge	r6,zero,80879c <_malloc_r+0x534>
  8084f0:	84000317 	ldw	r16,12(r16)
  8084f4:	1c00a426 	beq	r3,r16,808788 <_malloc_r+0x520>
  8084f8:	80800117 	ldw	r2,4(r16)
  8084fc:	1204703a 	and	r2,r2,r8
  808500:	144dc83a 	sub	r6,r2,r17
  808504:	29bff90e 	bge	r5,r6,8084ec <_malloc_r+0x284>
  808508:	81000317 	ldw	r4,12(r16)
  80850c:	80c00217 	ldw	r3,8(r16)
  808510:	89400054 	ori	r5,r17,1
  808514:	8445883a 	add	r2,r16,r17
  808518:	20c00215 	stw	r3,8(r4)
  80851c:	19000315 	stw	r4,12(r3)
  808520:	81400115 	stw	r5,4(r16)
  808524:	1187883a 	add	r3,r2,r6
  808528:	31000054 	ori	r4,r6,1
  80852c:	50800315 	stw	r2,12(r10)
  808530:	50800215 	stw	r2,8(r10)
  808534:	19800015 	stw	r6,0(r3)
  808538:	11000115 	stw	r4,4(r2)
  80853c:	12800215 	stw	r10,8(r2)
  808540:	12800315 	stw	r10,12(r2)
  808544:	9009883a 	mov	r4,r18
  808548:	080c6cc0 	call	80c6cc <__malloc_unlock>
  80854c:	80c00204 	addi	r3,r16,8
  808550:	003f5906 	br	8082b8 <_malloc_r+0x50>
  808554:	8109883a 	add	r4,r16,r4
  808558:	20800117 	ldw	r2,4(r4)
  80855c:	80c00217 	ldw	r3,8(r16)
  808560:	81400317 	ldw	r5,12(r16)
  808564:	10800054 	ori	r2,r2,1
  808568:	20800115 	stw	r2,4(r4)
  80856c:	28c00215 	stw	r3,8(r5)
  808570:	19400315 	stw	r5,12(r3)
  808574:	9009883a 	mov	r4,r18
  808578:	080c6cc0 	call	80c6cc <__malloc_unlock>
  80857c:	80c00204 	addi	r3,r16,8
  808580:	003f4d06 	br	8082b8 <_malloc_r+0x50>
  808584:	80800204 	addi	r2,r16,8
  808588:	14000317 	ldw	r16,12(r2)
  80858c:	143f911e 	bne	r2,r16,8083d4 <_malloc_r+0x16c>
  808590:	1a400084 	addi	r9,r3,2
  808594:	003f7306 	br	808364 <_malloc_r+0xfc>
  808598:	88c00054 	ori	r3,r17,1
  80859c:	8445883a 	add	r2,r16,r17
  8085a0:	80c00115 	stw	r3,4(r16)
  8085a4:	003fdf06 	br	808524 <_malloc_r+0x2bc>
  8085a8:	e4000217 	ldw	r16,8(fp)
  8085ac:	00bfff04 	movi	r2,-4
  8085b0:	80c00117 	ldw	r3,4(r16)
  8085b4:	802d883a 	mov	r22,r16
  8085b8:	18aa703a 	and	r21,r3,r2
  8085bc:	ac401636 	bltu	r21,r17,808618 <_malloc_r+0x3b0>
  8085c0:	ac49c83a 	sub	r4,r21,r17
  8085c4:	008003c4 	movi	r2,15
  8085c8:	1100130e 	bge	r2,r4,808618 <_malloc_r+0x3b0>
  8085cc:	88800054 	ori	r2,r17,1
  8085d0:	8447883a 	add	r3,r16,r17
  8085d4:	80800115 	stw	r2,4(r16)
  8085d8:	20800054 	ori	r2,r4,1
  8085dc:	18800115 	stw	r2,4(r3)
  8085e0:	e0c00215 	stw	r3,8(fp)
  8085e4:	9009883a 	mov	r4,r18
  8085e8:	080c6cc0 	call	80c6cc <__malloc_unlock>
  8085ec:	80c00204 	addi	r3,r16,8
  8085f0:	003f3106 	br	8082b8 <_malloc_r+0x50>
  8085f4:	39c00117 	ldw	r7,4(r7)
  8085f8:	573ffe04 	addi	fp,r10,-8
  8085fc:	003fa006 	br	808480 <_malloc_r+0x218>
  808600:	00801504 	movi	r2,84
  808604:	10c06736 	bltu	r2,r3,8087a4 <_malloc_r+0x53c>
  808608:	8804d33a 	srli	r2,r17,12
  80860c:	11801b84 	addi	r6,r2,110
  808610:	300490fa 	slli	r2,r6,3
  808614:	003f4106 	br	80831c <_malloc_r+0xb4>
  808618:	d0a72217 	ldw	r2,-25464(gp)
  80861c:	d0e00e17 	ldw	r3,-32712(gp)
  808620:	053fffc4 	movi	r20,-1
  808624:	10800404 	addi	r2,r2,16
  808628:	88a7883a 	add	r19,r17,r2
  80862c:	1d000326 	beq	r3,r20,80863c <_malloc_r+0x3d4>
  808630:	98c3ffc4 	addi	r3,r19,4095
  808634:	00bc0004 	movi	r2,-4096
  808638:	18a6703a 	and	r19,r3,r2
  80863c:	9009883a 	mov	r4,r18
  808640:	980b883a 	mov	r5,r19
  808644:	080a2fc0 	call	80a2fc <_sbrk_r>
  808648:	1009883a 	mov	r4,r2
  80864c:	15000426 	beq	r2,r20,808660 <_malloc_r+0x3f8>
  808650:	854b883a 	add	r5,r16,r21
  808654:	1029883a 	mov	r20,r2
  808658:	11405a2e 	bgeu	r2,r5,8087c4 <_malloc_r+0x55c>
  80865c:	87000c26 	beq	r16,fp,808690 <_malloc_r+0x428>
  808660:	e4000217 	ldw	r16,8(fp)
  808664:	80c00117 	ldw	r3,4(r16)
  808668:	00bfff04 	movi	r2,-4
  80866c:	1884703a 	and	r2,r3,r2
  808670:	14400336 	bltu	r2,r17,808680 <_malloc_r+0x418>
  808674:	1449c83a 	sub	r4,r2,r17
  808678:	008003c4 	movi	r2,15
  80867c:	113fd316 	blt	r2,r4,8085cc <_malloc_r+0x364>
  808680:	9009883a 	mov	r4,r18
  808684:	080c6cc0 	call	80c6cc <__malloc_unlock>
  808688:	0007883a 	mov	r3,zero
  80868c:	003f0a06 	br	8082b8 <_malloc_r+0x50>
  808690:	05c02074 	movhi	r23,129
  808694:	bdd57204 	addi	r23,r23,21960
  808698:	b8800017 	ldw	r2,0(r23)
  80869c:	988d883a 	add	r6,r19,r2
  8086a0:	b9800015 	stw	r6,0(r23)
  8086a4:	d0e00e17 	ldw	r3,-32712(gp)
  8086a8:	00bfffc4 	movi	r2,-1
  8086ac:	18808e26 	beq	r3,r2,8088e8 <_malloc_r+0x680>
  8086b0:	2145c83a 	sub	r2,r4,r5
  8086b4:	3085883a 	add	r2,r6,r2
  8086b8:	b8800015 	stw	r2,0(r23)
  8086bc:	20c001cc 	andi	r3,r4,7
  8086c0:	18005f1e 	bne	r3,zero,808840 <_malloc_r+0x5d8>
  8086c4:	000b883a 	mov	r5,zero
  8086c8:	a4c5883a 	add	r2,r20,r19
  8086cc:	1083ffcc 	andi	r2,r2,4095
  8086d0:	00c40004 	movi	r3,4096
  8086d4:	1887c83a 	sub	r3,r3,r2
  8086d8:	28e7883a 	add	r19,r5,r3
  8086dc:	9009883a 	mov	r4,r18
  8086e0:	980b883a 	mov	r5,r19
  8086e4:	080a2fc0 	call	80a2fc <_sbrk_r>
  8086e8:	1007883a 	mov	r3,r2
  8086ec:	00bfffc4 	movi	r2,-1
  8086f0:	18807a26 	beq	r3,r2,8088dc <_malloc_r+0x674>
  8086f4:	1d05c83a 	sub	r2,r3,r20
  8086f8:	9885883a 	add	r2,r19,r2
  8086fc:	10c00054 	ori	r3,r2,1
  808700:	b8800017 	ldw	r2,0(r23)
  808704:	a021883a 	mov	r16,r20
  808708:	a0c00115 	stw	r3,4(r20)
  80870c:	9885883a 	add	r2,r19,r2
  808710:	b8800015 	stw	r2,0(r23)
  808714:	e5000215 	stw	r20,8(fp)
  808718:	b7003626 	beq	r22,fp,8087f4 <_malloc_r+0x58c>
  80871c:	018003c4 	movi	r6,15
  808720:	35404b36 	bltu	r6,r21,808850 <_malloc_r+0x5e8>
  808724:	00800044 	movi	r2,1
  808728:	a0800115 	stw	r2,4(r20)
  80872c:	003fcd06 	br	808664 <_malloc_r+0x3fc>
  808730:	2808d27a 	srli	r4,r5,9
  808734:	2000371e 	bne	r4,zero,808814 <_malloc_r+0x5ac>
  808738:	2808d0fa 	srli	r4,r5,3
  80873c:	200690fa 	slli	r3,r4,3
  808740:	1ad1883a 	add	r8,r3,r11
  808744:	41800217 	ldw	r6,8(r8)
  808748:	41805b26 	beq	r8,r6,8088b8 <_malloc_r+0x650>
  80874c:	30800117 	ldw	r2,4(r6)
  808750:	00ffff04 	movi	r3,-4
  808754:	10c4703a 	and	r2,r2,r3
  808758:	2880022e 	bgeu	r5,r2,808764 <_malloc_r+0x4fc>
  80875c:	31800217 	ldw	r6,8(r6)
  808760:	41bffa1e 	bne	r8,r6,80874c <_malloc_r+0x4e4>
  808764:	32000317 	ldw	r8,12(r6)
  808768:	39c00117 	ldw	r7,4(r7)
  80876c:	82000315 	stw	r8,12(r16)
  808770:	81800215 	stw	r6,8(r16)
  808774:	07002074 	movhi	fp,129
  808778:	e7086504 	addi	fp,fp,8596
  80877c:	34000315 	stw	r16,12(r6)
  808780:	44000215 	stw	r16,8(r8)
  808784:	003f3e06 	br	808480 <_malloc_r+0x218>
  808788:	63000044 	addi	r12,r12,1
  80878c:	608000cc 	andi	r2,r12,3
  808790:	10005d26 	beq	r2,zero,808908 <_malloc_r+0x6a0>
  808794:	18c00204 	addi	r3,r3,8
  808798:	003f5106 	br	8084e0 <_malloc_r+0x278>
  80879c:	8089883a 	add	r4,r16,r2
  8087a0:	003f6d06 	br	808558 <_malloc_r+0x2f0>
  8087a4:	00805504 	movi	r2,340
  8087a8:	10c02036 	bltu	r2,r3,80882c <_malloc_r+0x5c4>
  8087ac:	8804d3fa 	srli	r2,r17,15
  8087b0:	11801dc4 	addi	r6,r2,119
  8087b4:	300490fa 	slli	r2,r6,3
  8087b8:	003ed806 	br	80831c <_malloc_r+0xb4>
  8087bc:	48c000c4 	addi	r3,r9,3
  8087c0:	003f3106 	br	808488 <_malloc_r+0x220>
  8087c4:	05c02074 	movhi	r23,129
  8087c8:	bdd57204 	addi	r23,r23,21960
  8087cc:	b8800017 	ldw	r2,0(r23)
  8087d0:	988d883a 	add	r6,r19,r2
  8087d4:	b9800015 	stw	r6,0(r23)
  8087d8:	293fb21e 	bne	r5,r4,8086a4 <_malloc_r+0x43c>
  8087dc:	2083ffcc 	andi	r2,r4,4095
  8087e0:	103fb01e 	bne	r2,zero,8086a4 <_malloc_r+0x43c>
  8087e4:	e4000217 	ldw	r16,8(fp)
  8087e8:	9d45883a 	add	r2,r19,r21
  8087ec:	10800054 	ori	r2,r2,1
  8087f0:	80800115 	stw	r2,4(r16)
  8087f4:	b8c00017 	ldw	r3,0(r23)
  8087f8:	d0a72317 	ldw	r2,-25460(gp)
  8087fc:	10c0012e 	bgeu	r2,r3,808804 <_malloc_r+0x59c>
  808800:	d0e72315 	stw	r3,-25460(gp)
  808804:	d0a72417 	ldw	r2,-25456(gp)
  808808:	10ff962e 	bgeu	r2,r3,808664 <_malloc_r+0x3fc>
  80880c:	d0e72415 	stw	r3,-25456(gp)
  808810:	003f9406 	br	808664 <_malloc_r+0x3fc>
  808814:	00800104 	movi	r2,4
  808818:	11001e36 	bltu	r2,r4,808894 <_malloc_r+0x62c>
  80881c:	2804d1ba 	srli	r2,r5,6
  808820:	11000e04 	addi	r4,r2,56
  808824:	200690fa 	slli	r3,r4,3
  808828:	003fc506 	br	808740 <_malloc_r+0x4d8>
  80882c:	00815504 	movi	r2,1364
  808830:	10c01d2e 	bgeu	r2,r3,8088a8 <_malloc_r+0x640>
  808834:	01801f84 	movi	r6,126
  808838:	0080fc04 	movi	r2,1008
  80883c:	003eb706 	br	80831c <_malloc_r+0xb4>
  808840:	00800204 	movi	r2,8
  808844:	10cbc83a 	sub	r5,r2,r3
  808848:	2169883a 	add	r20,r4,r5
  80884c:	003f9e06 	br	8086c8 <_malloc_r+0x460>
  808850:	00bffe04 	movi	r2,-8
  808854:	a93ffd04 	addi	r4,r21,-12
  808858:	2088703a 	and	r4,r4,r2
  80885c:	b10b883a 	add	r5,r22,r4
  808860:	00c00144 	movi	r3,5
  808864:	28c00215 	stw	r3,8(r5)
  808868:	28c00115 	stw	r3,4(r5)
  80886c:	b0800117 	ldw	r2,4(r22)
  808870:	1080004c 	andi	r2,r2,1
  808874:	2084b03a 	or	r2,r4,r2
  808878:	b0800115 	stw	r2,4(r22)
  80887c:	313fdd2e 	bgeu	r6,r4,8087f4 <_malloc_r+0x58c>
  808880:	b1400204 	addi	r5,r22,8
  808884:	9009883a 	mov	r4,r18
  808888:	08076e00 	call	8076e0 <_free_r>
  80888c:	e4000217 	ldw	r16,8(fp)
  808890:	003fd806 	br	8087f4 <_malloc_r+0x58c>
  808894:	00800504 	movi	r2,20
  808898:	11001536 	bltu	r2,r4,8088f0 <_malloc_r+0x688>
  80889c:	210016c4 	addi	r4,r4,91
  8088a0:	200690fa 	slli	r3,r4,3
  8088a4:	003fa606 	br	808740 <_malloc_r+0x4d8>
  8088a8:	8804d4ba 	srli	r2,r17,18
  8088ac:	11801f04 	addi	r6,r2,124
  8088b0:	300490fa 	slli	r2,r6,3
  8088b4:	003e9906 	br	80831c <_malloc_r+0xb4>
  8088b8:	2009d0ba 	srai	r4,r4,2
  8088bc:	01402074 	movhi	r5,129
  8088c0:	29486504 	addi	r5,r5,8596
  8088c4:	00c00044 	movi	r3,1
  8088c8:	28800117 	ldw	r2,4(r5)
  8088cc:	1906983a 	sll	r3,r3,r4
  8088d0:	10c4b03a 	or	r2,r2,r3
  8088d4:	28800115 	stw	r2,4(r5)
  8088d8:	003fa306 	br	808768 <_malloc_r+0x500>
  8088dc:	0027883a 	mov	r19,zero
  8088e0:	00c00044 	movi	r3,1
  8088e4:	003f8606 	br	808700 <_malloc_r+0x498>
  8088e8:	d1200e15 	stw	r4,-32712(gp)
  8088ec:	003f7306 	br	8086bc <_malloc_r+0x454>
  8088f0:	00801504 	movi	r2,84
  8088f4:	11001936 	bltu	r2,r4,80895c <_malloc_r+0x6f4>
  8088f8:	2804d33a 	srli	r2,r5,12
  8088fc:	11001b84 	addi	r4,r2,110
  808900:	200690fa 	slli	r3,r4,3
  808904:	003f8e06 	br	808740 <_malloc_r+0x4d8>
  808908:	480b883a 	mov	r5,r9
  80890c:	6807883a 	mov	r3,r13
  808910:	288000cc 	andi	r2,r5,3
  808914:	18fffe04 	addi	r3,r3,-8
  808918:	297fffc4 	addi	r5,r5,-1
  80891c:	10001526 	beq	r2,zero,808974 <_malloc_r+0x70c>
  808920:	18800217 	ldw	r2,8(r3)
  808924:	10fffa26 	beq	r2,r3,808910 <_malloc_r+0x6a8>
  808928:	2109883a 	add	r4,r4,r4
  80892c:	393f1e36 	bltu	r7,r4,8085a8 <_malloc_r+0x340>
  808930:	203f1d26 	beq	r4,zero,8085a8 <_malloc_r+0x340>
  808934:	21c4703a 	and	r2,r4,r7
  808938:	10000226 	beq	r2,zero,808944 <_malloc_r+0x6dc>
  80893c:	6013883a 	mov	r9,r12
  808940:	003ee106 	br	8084c8 <_malloc_r+0x260>
  808944:	2109883a 	add	r4,r4,r4
  808948:	3904703a 	and	r2,r7,r4
  80894c:	63000104 	addi	r12,r12,4
  808950:	103ffc26 	beq	r2,zero,808944 <_malloc_r+0x6dc>
  808954:	6013883a 	mov	r9,r12
  808958:	003edb06 	br	8084c8 <_malloc_r+0x260>
  80895c:	00805504 	movi	r2,340
  808960:	11000836 	bltu	r2,r4,808984 <_malloc_r+0x71c>
  808964:	2804d3fa 	srli	r2,r5,15
  808968:	11001dc4 	addi	r4,r2,119
  80896c:	200690fa 	slli	r3,r4,3
  808970:	003f7306 	br	808740 <_malloc_r+0x4d8>
  808974:	0104303a 	nor	r2,zero,r4
  808978:	388e703a 	and	r7,r7,r2
  80897c:	e1c00115 	stw	r7,4(fp)
  808980:	003fe906 	br	808928 <_malloc_r+0x6c0>
  808984:	00815504 	movi	r2,1364
  808988:	1100032e 	bgeu	r2,r4,808998 <_malloc_r+0x730>
  80898c:	01001f84 	movi	r4,126
  808990:	00c0fc04 	movi	r3,1008
  808994:	003f6a06 	br	808740 <_malloc_r+0x4d8>
  808998:	2804d4ba 	srli	r2,r5,18
  80899c:	11001f04 	addi	r4,r2,124
  8089a0:	200690fa 	slli	r3,r4,3
  8089a4:	003f6606 	br	808740 <_malloc_r+0x4d8>

008089a8 <memchr>:
  8089a8:	008000c4 	movi	r2,3
  8089ac:	29403fcc 	andi	r5,r5,255
  8089b0:	2007883a 	mov	r3,r4
  8089b4:	1180022e 	bgeu	r2,r6,8089c0 <memchr+0x18>
  8089b8:	2084703a 	and	r2,r4,r2
  8089bc:	10000b26 	beq	r2,zero,8089ec <memchr+0x44>
  8089c0:	313fffc4 	addi	r4,r6,-1
  8089c4:	3000051e 	bne	r6,zero,8089dc <memchr+0x34>
  8089c8:	00002c06 	br	808a7c <memchr+0xd4>
  8089cc:	213fffc4 	addi	r4,r4,-1
  8089d0:	00bfffc4 	movi	r2,-1
  8089d4:	18c00044 	addi	r3,r3,1
  8089d8:	20802826 	beq	r4,r2,808a7c <memchr+0xd4>
  8089dc:	18800003 	ldbu	r2,0(r3)
  8089e0:	28bffa1e 	bne	r5,r2,8089cc <memchr+0x24>
  8089e4:	1805883a 	mov	r2,r3
  8089e8:	f800283a 	ret
  8089ec:	0011883a 	mov	r8,zero
  8089f0:	0007883a 	mov	r3,zero
  8089f4:	01c00104 	movi	r7,4
  8089f8:	4004923a 	slli	r2,r8,8
  8089fc:	18c00044 	addi	r3,r3,1
  808a00:	1151883a 	add	r8,r2,r5
  808a04:	19fffc1e 	bne	r3,r7,8089f8 <memchr+0x50>
  808a08:	02bfbff4 	movhi	r10,65279
  808a0c:	52bfbfc4 	addi	r10,r10,-257
  808a10:	02602074 	movhi	r9,32897
  808a14:	4a602004 	addi	r9,r9,-32640
  808a18:	02c000c4 	movi	r11,3
  808a1c:	20800017 	ldw	r2,0(r4)
  808a20:	31bfff04 	addi	r6,r6,-4
  808a24:	200f883a 	mov	r7,r4
  808a28:	1204f03a 	xor	r2,r2,r8
  808a2c:	1287883a 	add	r3,r2,r10
  808a30:	1a46703a 	and	r3,r3,r9
  808a34:	0084303a 	nor	r2,zero,r2
  808a38:	10c4703a 	and	r2,r2,r3
  808a3c:	10000b26 	beq	r2,zero,808a6c <memchr+0xc4>
  808a40:	20800003 	ldbu	r2,0(r4)
  808a44:	28800f26 	beq	r5,r2,808a84 <memchr+0xdc>
  808a48:	20800043 	ldbu	r2,1(r4)
  808a4c:	21c00044 	addi	r7,r4,1
  808a50:	28800c26 	beq	r5,r2,808a84 <memchr+0xdc>
  808a54:	20800083 	ldbu	r2,2(r4)
  808a58:	21c00084 	addi	r7,r4,2
  808a5c:	28800926 	beq	r5,r2,808a84 <memchr+0xdc>
  808a60:	208000c3 	ldbu	r2,3(r4)
  808a64:	21c000c4 	addi	r7,r4,3
  808a68:	28800626 	beq	r5,r2,808a84 <memchr+0xdc>
  808a6c:	21000104 	addi	r4,r4,4
  808a70:	59bfea36 	bltu	r11,r6,808a1c <memchr+0x74>
  808a74:	2007883a 	mov	r3,r4
  808a78:	003fd106 	br	8089c0 <memchr+0x18>
  808a7c:	0005883a 	mov	r2,zero
  808a80:	f800283a 	ret
  808a84:	3805883a 	mov	r2,r7
  808a88:	f800283a 	ret

00808a8c <memcpy>:
  808a8c:	01c003c4 	movi	r7,15
  808a90:	2007883a 	mov	r3,r4
  808a94:	3980032e 	bgeu	r7,r6,808aa4 <memcpy+0x18>
  808a98:	2904b03a 	or	r2,r5,r4
  808a9c:	108000cc 	andi	r2,r2,3
  808aa0:	10000926 	beq	r2,zero,808ac8 <memcpy+0x3c>
  808aa4:	30000626 	beq	r6,zero,808ac0 <memcpy+0x34>
  808aa8:	30cd883a 	add	r6,r6,r3
  808aac:	28800003 	ldbu	r2,0(r5)
  808ab0:	29400044 	addi	r5,r5,1
  808ab4:	18800005 	stb	r2,0(r3)
  808ab8:	18c00044 	addi	r3,r3,1
  808abc:	30fffb1e 	bne	r6,r3,808aac <memcpy+0x20>
  808ac0:	2005883a 	mov	r2,r4
  808ac4:	f800283a 	ret
  808ac8:	3811883a 	mov	r8,r7
  808acc:	200f883a 	mov	r7,r4
  808ad0:	28c00017 	ldw	r3,0(r5)
  808ad4:	31bffc04 	addi	r6,r6,-16
  808ad8:	38c00015 	stw	r3,0(r7)
  808adc:	28800117 	ldw	r2,4(r5)
  808ae0:	38800115 	stw	r2,4(r7)
  808ae4:	28c00217 	ldw	r3,8(r5)
  808ae8:	38c00215 	stw	r3,8(r7)
  808aec:	28800317 	ldw	r2,12(r5)
  808af0:	29400404 	addi	r5,r5,16
  808af4:	38800315 	stw	r2,12(r7)
  808af8:	39c00404 	addi	r7,r7,16
  808afc:	41bff436 	bltu	r8,r6,808ad0 <memcpy+0x44>
  808b00:	008000c4 	movi	r2,3
  808b04:	1180072e 	bgeu	r2,r6,808b24 <memcpy+0x98>
  808b08:	1007883a 	mov	r3,r2
  808b0c:	28800017 	ldw	r2,0(r5)
  808b10:	31bfff04 	addi	r6,r6,-4
  808b14:	29400104 	addi	r5,r5,4
  808b18:	38800015 	stw	r2,0(r7)
  808b1c:	39c00104 	addi	r7,r7,4
  808b20:	19bffa36 	bltu	r3,r6,808b0c <memcpy+0x80>
  808b24:	3807883a 	mov	r3,r7
  808b28:	003fde06 	br	808aa4 <memcpy+0x18>

00808b2c <memmove>:
  808b2c:	2807883a 	mov	r3,r5
  808b30:	2011883a 	mov	r8,r4
  808b34:	29000c2e 	bgeu	r5,r4,808b68 <memmove+0x3c>
  808b38:	298f883a 	add	r7,r5,r6
  808b3c:	21c00a2e 	bgeu	r4,r7,808b68 <memmove+0x3c>
  808b40:	30000726 	beq	r6,zero,808b60 <memmove+0x34>
  808b44:	2187883a 	add	r3,r4,r6
  808b48:	198dc83a 	sub	r6,r3,r6
  808b4c:	39ffffc4 	addi	r7,r7,-1
  808b50:	38800003 	ldbu	r2,0(r7)
  808b54:	18ffffc4 	addi	r3,r3,-1
  808b58:	18800005 	stb	r2,0(r3)
  808b5c:	19bffb1e 	bne	r3,r6,808b4c <memmove+0x20>
  808b60:	2005883a 	mov	r2,r4
  808b64:	f800283a 	ret
  808b68:	01c003c4 	movi	r7,15
  808b6c:	39800a36 	bltu	r7,r6,808b98 <memmove+0x6c>
  808b70:	303ffb26 	beq	r6,zero,808b60 <memmove+0x34>
  808b74:	400f883a 	mov	r7,r8
  808b78:	320d883a 	add	r6,r6,r8
  808b7c:	28800003 	ldbu	r2,0(r5)
  808b80:	29400044 	addi	r5,r5,1
  808b84:	38800005 	stb	r2,0(r7)
  808b88:	39c00044 	addi	r7,r7,1
  808b8c:	39bffb1e 	bne	r7,r6,808b7c <memmove+0x50>
  808b90:	2005883a 	mov	r2,r4
  808b94:	f800283a 	ret
  808b98:	1904b03a 	or	r2,r3,r4
  808b9c:	108000cc 	andi	r2,r2,3
  808ba0:	103ff31e 	bne	r2,zero,808b70 <memmove+0x44>
  808ba4:	3811883a 	mov	r8,r7
  808ba8:	180b883a 	mov	r5,r3
  808bac:	200f883a 	mov	r7,r4
  808bb0:	28c00017 	ldw	r3,0(r5)
  808bb4:	31bffc04 	addi	r6,r6,-16
  808bb8:	38c00015 	stw	r3,0(r7)
  808bbc:	28800117 	ldw	r2,4(r5)
  808bc0:	38800115 	stw	r2,4(r7)
  808bc4:	28c00217 	ldw	r3,8(r5)
  808bc8:	38c00215 	stw	r3,8(r7)
  808bcc:	28800317 	ldw	r2,12(r5)
  808bd0:	29400404 	addi	r5,r5,16
  808bd4:	38800315 	stw	r2,12(r7)
  808bd8:	39c00404 	addi	r7,r7,16
  808bdc:	41bff436 	bltu	r8,r6,808bb0 <memmove+0x84>
  808be0:	008000c4 	movi	r2,3
  808be4:	1180072e 	bgeu	r2,r6,808c04 <memmove+0xd8>
  808be8:	1007883a 	mov	r3,r2
  808bec:	28800017 	ldw	r2,0(r5)
  808bf0:	31bfff04 	addi	r6,r6,-4
  808bf4:	29400104 	addi	r5,r5,4
  808bf8:	38800015 	stw	r2,0(r7)
  808bfc:	39c00104 	addi	r7,r7,4
  808c00:	19bffa36 	bltu	r3,r6,808bec <memmove+0xc0>
  808c04:	3811883a 	mov	r8,r7
  808c08:	003fd906 	br	808b70 <memmove+0x44>

00808c0c <memset>:
  808c0c:	008000c4 	movi	r2,3
  808c10:	29403fcc 	andi	r5,r5,255
  808c14:	2007883a 	mov	r3,r4
  808c18:	1180022e 	bgeu	r2,r6,808c24 <memset+0x18>
  808c1c:	2084703a 	and	r2,r4,r2
  808c20:	10000826 	beq	r2,zero,808c44 <memset+0x38>
  808c24:	30000526 	beq	r6,zero,808c3c <memset+0x30>
  808c28:	2805883a 	mov	r2,r5
  808c2c:	30cd883a 	add	r6,r6,r3
  808c30:	18800005 	stb	r2,0(r3)
  808c34:	18c00044 	addi	r3,r3,1
  808c38:	19bffd1e 	bne	r3,r6,808c30 <memset+0x24>
  808c3c:	2005883a 	mov	r2,r4
  808c40:	f800283a 	ret
  808c44:	2804923a 	slli	r2,r5,8
  808c48:	020003c4 	movi	r8,15
  808c4c:	200f883a 	mov	r7,r4
  808c50:	2884b03a 	or	r2,r5,r2
  808c54:	1006943a 	slli	r3,r2,16
  808c58:	10c6b03a 	or	r3,r2,r3
  808c5c:	41800a2e 	bgeu	r8,r6,808c88 <memset+0x7c>
  808c60:	4005883a 	mov	r2,r8
  808c64:	31bffc04 	addi	r6,r6,-16
  808c68:	38c00015 	stw	r3,0(r7)
  808c6c:	38c00115 	stw	r3,4(r7)
  808c70:	38c00215 	stw	r3,8(r7)
  808c74:	38c00315 	stw	r3,12(r7)
  808c78:	39c00404 	addi	r7,r7,16
  808c7c:	11bff936 	bltu	r2,r6,808c64 <memset+0x58>
  808c80:	008000c4 	movi	r2,3
  808c84:	1180052e 	bgeu	r2,r6,808c9c <memset+0x90>
  808c88:	31bfff04 	addi	r6,r6,-4
  808c8c:	008000c4 	movi	r2,3
  808c90:	38c00015 	stw	r3,0(r7)
  808c94:	39c00104 	addi	r7,r7,4
  808c98:	11bffb36 	bltu	r2,r6,808c88 <memset+0x7c>
  808c9c:	3807883a 	mov	r3,r7
  808ca0:	003fe006 	br	808c24 <memset+0x18>

00808ca4 <_Bfree>:
  808ca4:	28000826 	beq	r5,zero,808cc8 <_Bfree+0x24>
  808ca8:	28800117 	ldw	r2,4(r5)
  808cac:	21001317 	ldw	r4,76(r4)
  808cb0:	1085883a 	add	r2,r2,r2
  808cb4:	1085883a 	add	r2,r2,r2
  808cb8:	1105883a 	add	r2,r2,r4
  808cbc:	10c00017 	ldw	r3,0(r2)
  808cc0:	28c00015 	stw	r3,0(r5)
  808cc4:	11400015 	stw	r5,0(r2)
  808cc8:	f800283a 	ret

00808ccc <__hi0bits>:
  808ccc:	20bfffec 	andhi	r2,r4,65535
  808cd0:	10001426 	beq	r2,zero,808d24 <__hi0bits+0x58>
  808cd4:	0007883a 	mov	r3,zero
  808cd8:	20bfc02c 	andhi	r2,r4,65280
  808cdc:	1000021e 	bne	r2,zero,808ce8 <__hi0bits+0x1c>
  808ce0:	2008923a 	slli	r4,r4,8
  808ce4:	18c00204 	addi	r3,r3,8
  808ce8:	20bc002c 	andhi	r2,r4,61440
  808cec:	1000021e 	bne	r2,zero,808cf8 <__hi0bits+0x2c>
  808cf0:	2008913a 	slli	r4,r4,4
  808cf4:	18c00104 	addi	r3,r3,4
  808cf8:	20b0002c 	andhi	r2,r4,49152
  808cfc:	1000031e 	bne	r2,zero,808d0c <__hi0bits+0x40>
  808d00:	2105883a 	add	r2,r4,r4
  808d04:	18c00084 	addi	r3,r3,2
  808d08:	1089883a 	add	r4,r2,r2
  808d0c:	20000316 	blt	r4,zero,808d1c <__hi0bits+0x50>
  808d10:	2090002c 	andhi	r2,r4,16384
  808d14:	10000626 	beq	r2,zero,808d30 <__hi0bits+0x64>
  808d18:	18c00044 	addi	r3,r3,1
  808d1c:	1805883a 	mov	r2,r3
  808d20:	f800283a 	ret
  808d24:	2008943a 	slli	r4,r4,16
  808d28:	00c00404 	movi	r3,16
  808d2c:	003fea06 	br	808cd8 <__hi0bits+0xc>
  808d30:	00c00804 	movi	r3,32
  808d34:	1805883a 	mov	r2,r3
  808d38:	f800283a 	ret

00808d3c <__lo0bits>:
  808d3c:	20c00017 	ldw	r3,0(r4)
  808d40:	188001cc 	andi	r2,r3,7
  808d44:	10000a26 	beq	r2,zero,808d70 <__lo0bits+0x34>
  808d48:	1880004c 	andi	r2,r3,1
  808d4c:	1005003a 	cmpeq	r2,r2,zero
  808d50:	10002126 	beq	r2,zero,808dd8 <__lo0bits+0x9c>
  808d54:	1880008c 	andi	r2,r3,2
  808d58:	1000251e 	bne	r2,zero,808df0 <__lo0bits+0xb4>
  808d5c:	1804d0ba 	srli	r2,r3,2
  808d60:	01400084 	movi	r5,2
  808d64:	20800015 	stw	r2,0(r4)
  808d68:	2805883a 	mov	r2,r5
  808d6c:	f800283a 	ret
  808d70:	18bfffcc 	andi	r2,r3,65535
  808d74:	10001526 	beq	r2,zero,808dcc <__lo0bits+0x90>
  808d78:	000b883a 	mov	r5,zero
  808d7c:	18803fcc 	andi	r2,r3,255
  808d80:	1000021e 	bne	r2,zero,808d8c <__lo0bits+0x50>
  808d84:	1806d23a 	srli	r3,r3,8
  808d88:	29400204 	addi	r5,r5,8
  808d8c:	188003cc 	andi	r2,r3,15
  808d90:	1000021e 	bne	r2,zero,808d9c <__lo0bits+0x60>
  808d94:	1806d13a 	srli	r3,r3,4
  808d98:	29400104 	addi	r5,r5,4
  808d9c:	188000cc 	andi	r2,r3,3
  808da0:	1000021e 	bne	r2,zero,808dac <__lo0bits+0x70>
  808da4:	1806d0ba 	srli	r3,r3,2
  808da8:	29400084 	addi	r5,r5,2
  808dac:	1880004c 	andi	r2,r3,1
  808db0:	1000031e 	bne	r2,zero,808dc0 <__lo0bits+0x84>
  808db4:	1806d07a 	srli	r3,r3,1
  808db8:	18000a26 	beq	r3,zero,808de4 <__lo0bits+0xa8>
  808dbc:	29400044 	addi	r5,r5,1
  808dc0:	2805883a 	mov	r2,r5
  808dc4:	20c00015 	stw	r3,0(r4)
  808dc8:	f800283a 	ret
  808dcc:	1806d43a 	srli	r3,r3,16
  808dd0:	01400404 	movi	r5,16
  808dd4:	003fe906 	br	808d7c <__lo0bits+0x40>
  808dd8:	000b883a 	mov	r5,zero
  808ddc:	2805883a 	mov	r2,r5
  808de0:	f800283a 	ret
  808de4:	01400804 	movi	r5,32
  808de8:	2805883a 	mov	r2,r5
  808dec:	f800283a 	ret
  808df0:	1804d07a 	srli	r2,r3,1
  808df4:	01400044 	movi	r5,1
  808df8:	20800015 	stw	r2,0(r4)
  808dfc:	003fda06 	br	808d68 <__lo0bits+0x2c>

00808e00 <__mcmp>:
  808e00:	20800417 	ldw	r2,16(r4)
  808e04:	28c00417 	ldw	r3,16(r5)
  808e08:	10cfc83a 	sub	r7,r2,r3
  808e0c:	38000c1e 	bne	r7,zero,808e40 <__mcmp+0x40>
  808e10:	18c5883a 	add	r2,r3,r3
  808e14:	1085883a 	add	r2,r2,r2
  808e18:	10c00504 	addi	r3,r2,20
  808e1c:	21000504 	addi	r4,r4,20
  808e20:	28cb883a 	add	r5,r5,r3
  808e24:	2085883a 	add	r2,r4,r2
  808e28:	10bfff04 	addi	r2,r2,-4
  808e2c:	297fff04 	addi	r5,r5,-4
  808e30:	11800017 	ldw	r6,0(r2)
  808e34:	28c00017 	ldw	r3,0(r5)
  808e38:	30c0031e 	bne	r6,r3,808e48 <__mcmp+0x48>
  808e3c:	20bffa36 	bltu	r4,r2,808e28 <__mcmp+0x28>
  808e40:	3805883a 	mov	r2,r7
  808e44:	f800283a 	ret
  808e48:	30c00336 	bltu	r6,r3,808e58 <__mcmp+0x58>
  808e4c:	01c00044 	movi	r7,1
  808e50:	3805883a 	mov	r2,r7
  808e54:	f800283a 	ret
  808e58:	01ffffc4 	movi	r7,-1
  808e5c:	003ff806 	br	808e40 <__mcmp+0x40>

00808e60 <__ulp>:
  808e60:	295ffc2c 	andhi	r5,r5,32752
  808e64:	013f3034 	movhi	r4,64704
  808e68:	290b883a 	add	r5,r5,r4
  808e6c:	0145c83a 	sub	r2,zero,r5
  808e70:	1007d53a 	srai	r3,r2,20
  808e74:	000d883a 	mov	r6,zero
  808e78:	0140040e 	bge	zero,r5,808e8c <__ulp+0x2c>
  808e7c:	280f883a 	mov	r7,r5
  808e80:	3807883a 	mov	r3,r7
  808e84:	3005883a 	mov	r2,r6
  808e88:	f800283a 	ret
  808e8c:	008004c4 	movi	r2,19
  808e90:	193ffb04 	addi	r4,r3,-20
  808e94:	10c00c0e 	bge	r2,r3,808ec8 <__ulp+0x68>
  808e98:	008007c4 	movi	r2,31
  808e9c:	1107c83a 	sub	r3,r2,r4
  808ea0:	00800784 	movi	r2,30
  808ea4:	01400044 	movi	r5,1
  808ea8:	11000216 	blt	r2,r4,808eb4 <__ulp+0x54>
  808eac:	00800044 	movi	r2,1
  808eb0:	10ca983a 	sll	r5,r2,r3
  808eb4:	000f883a 	mov	r7,zero
  808eb8:	280d883a 	mov	r6,r5
  808ebc:	3807883a 	mov	r3,r7
  808ec0:	3005883a 	mov	r2,r6
  808ec4:	f800283a 	ret
  808ec8:	00800234 	movhi	r2,8
  808ecc:	10cfd83a 	sra	r7,r2,r3
  808ed0:	000d883a 	mov	r6,zero
  808ed4:	3005883a 	mov	r2,r6
  808ed8:	3807883a 	mov	r3,r7
  808edc:	f800283a 	ret

00808ee0 <__b2d>:
  808ee0:	20800417 	ldw	r2,16(r4)
  808ee4:	defff904 	addi	sp,sp,-28
  808ee8:	dd000415 	stw	r20,16(sp)
  808eec:	1085883a 	add	r2,r2,r2
  808ef0:	25000504 	addi	r20,r4,20
  808ef4:	1085883a 	add	r2,r2,r2
  808ef8:	dc000015 	stw	r16,0(sp)
  808efc:	a0a1883a 	add	r16,r20,r2
  808f00:	dd400515 	stw	r21,20(sp)
  808f04:	857fff17 	ldw	r21,-4(r16)
  808f08:	dc400115 	stw	r17,4(sp)
  808f0c:	dfc00615 	stw	ra,24(sp)
  808f10:	a809883a 	mov	r4,r21
  808f14:	2823883a 	mov	r17,r5
  808f18:	dcc00315 	stw	r19,12(sp)
  808f1c:	dc800215 	stw	r18,8(sp)
  808f20:	0808ccc0 	call	808ccc <__hi0bits>
  808f24:	100b883a 	mov	r5,r2
  808f28:	00800804 	movi	r2,32
  808f2c:	1145c83a 	sub	r2,r2,r5
  808f30:	88800015 	stw	r2,0(r17)
  808f34:	00800284 	movi	r2,10
  808f38:	80ffff04 	addi	r3,r16,-4
  808f3c:	11401416 	blt	r2,r5,808f90 <__b2d+0xb0>
  808f40:	008002c4 	movi	r2,11
  808f44:	1149c83a 	sub	r4,r2,r5
  808f48:	a0c02736 	bltu	r20,r3,808fe8 <__b2d+0x108>
  808f4c:	000d883a 	mov	r6,zero
  808f50:	28800544 	addi	r2,r5,21
  808f54:	a906d83a 	srl	r3,r21,r4
  808f58:	a884983a 	sll	r2,r21,r2
  808f5c:	1ccffc34 	orhi	r19,r3,16368
  808f60:	11a4b03a 	or	r18,r2,r6
  808f64:	9005883a 	mov	r2,r18
  808f68:	9807883a 	mov	r3,r19
  808f6c:	dfc00617 	ldw	ra,24(sp)
  808f70:	dd400517 	ldw	r21,20(sp)
  808f74:	dd000417 	ldw	r20,16(sp)
  808f78:	dcc00317 	ldw	r19,12(sp)
  808f7c:	dc800217 	ldw	r18,8(sp)
  808f80:	dc400117 	ldw	r17,4(sp)
  808f84:	dc000017 	ldw	r16,0(sp)
  808f88:	dec00704 	addi	sp,sp,28
  808f8c:	f800283a 	ret
  808f90:	a0c00e36 	bltu	r20,r3,808fcc <__b2d+0xec>
  808f94:	293ffd44 	addi	r4,r5,-11
  808f98:	000d883a 	mov	r6,zero
  808f9c:	20000f26 	beq	r4,zero,808fdc <__b2d+0xfc>
  808fa0:	00800804 	movi	r2,32
  808fa4:	110bc83a 	sub	r5,r2,r4
  808fa8:	a0c01236 	bltu	r20,r3,808ff4 <__b2d+0x114>
  808fac:	000f883a 	mov	r7,zero
  808fb0:	a904983a 	sll	r2,r21,r4
  808fb4:	3146d83a 	srl	r3,r6,r5
  808fb8:	3108983a 	sll	r4,r6,r4
  808fbc:	108ffc34 	orhi	r2,r2,16368
  808fc0:	18a6b03a 	or	r19,r3,r2
  808fc4:	3924b03a 	or	r18,r7,r4
  808fc8:	003fe606 	br	808f64 <__b2d+0x84>
  808fcc:	293ffd44 	addi	r4,r5,-11
  808fd0:	81bffe17 	ldw	r6,-8(r16)
  808fd4:	80fffe04 	addi	r3,r16,-8
  808fd8:	203ff11e 	bne	r4,zero,808fa0 <__b2d+0xc0>
  808fdc:	accffc34 	orhi	r19,r21,16368
  808fe0:	3025883a 	mov	r18,r6
  808fe4:	003fdf06 	br	808f64 <__b2d+0x84>
  808fe8:	18bfff17 	ldw	r2,-4(r3)
  808fec:	110cd83a 	srl	r6,r2,r4
  808ff0:	003fd706 	br	808f50 <__b2d+0x70>
  808ff4:	18bfff17 	ldw	r2,-4(r3)
  808ff8:	114ed83a 	srl	r7,r2,r5
  808ffc:	003fec06 	br	808fb0 <__b2d+0xd0>

00809000 <__ratio>:
  809000:	defff904 	addi	sp,sp,-28
  809004:	dc400215 	stw	r17,8(sp)
  809008:	2823883a 	mov	r17,r5
  80900c:	d80b883a 	mov	r5,sp
  809010:	dfc00615 	stw	ra,24(sp)
  809014:	dd000515 	stw	r20,20(sp)
  809018:	dcc00415 	stw	r19,16(sp)
  80901c:	dc800315 	stw	r18,12(sp)
  809020:	2025883a 	mov	r18,r4
  809024:	0808ee00 	call	808ee0 <__b2d>
  809028:	8809883a 	mov	r4,r17
  80902c:	d9400104 	addi	r5,sp,4
  809030:	1027883a 	mov	r19,r2
  809034:	1829883a 	mov	r20,r3
  809038:	0808ee00 	call	808ee0 <__b2d>
  80903c:	89000417 	ldw	r4,16(r17)
  809040:	91c00417 	ldw	r7,16(r18)
  809044:	d9800117 	ldw	r6,4(sp)
  809048:	180b883a 	mov	r5,r3
  80904c:	390fc83a 	sub	r7,r7,r4
  809050:	1009883a 	mov	r4,r2
  809054:	d8800017 	ldw	r2,0(sp)
  809058:	380e917a 	slli	r7,r7,5
  80905c:	2011883a 	mov	r8,r4
  809060:	1185c83a 	sub	r2,r2,r6
  809064:	11c5883a 	add	r2,r2,r7
  809068:	1006953a 	slli	r3,r2,20
  80906c:	2813883a 	mov	r9,r5
  809070:	00800d0e 	bge	zero,r2,8090a8 <__ratio+0xa8>
  809074:	1d29883a 	add	r20,r3,r20
  809078:	a00b883a 	mov	r5,r20
  80907c:	480f883a 	mov	r7,r9
  809080:	9809883a 	mov	r4,r19
  809084:	400d883a 	mov	r6,r8
  809088:	080295c0 	call	80295c <__divdf3>
  80908c:	dfc00617 	ldw	ra,24(sp)
  809090:	dd000517 	ldw	r20,20(sp)
  809094:	dcc00417 	ldw	r19,16(sp)
  809098:	dc800317 	ldw	r18,12(sp)
  80909c:	dc400217 	ldw	r17,8(sp)
  8090a0:	dec00704 	addi	sp,sp,28
  8090a4:	f800283a 	ret
  8090a8:	28d3c83a 	sub	r9,r5,r3
  8090ac:	003ff206 	br	809078 <__ratio+0x78>

008090b0 <_mprec_log10>:
  8090b0:	defffe04 	addi	sp,sp,-8
  8090b4:	008005c4 	movi	r2,23
  8090b8:	dc000015 	stw	r16,0(sp)
  8090bc:	dfc00115 	stw	ra,4(sp)
  8090c0:	2021883a 	mov	r16,r4
  8090c4:	11000c16 	blt	r2,r4,8090f8 <_mprec_log10+0x48>
  8090c8:	200490fa 	slli	r2,r4,3
  8090cc:	00c02074 	movhi	r3,129
  8090d0:	18c6c004 	addi	r3,r3,6912
  8090d4:	10c5883a 	add	r2,r2,r3
  8090d8:	12400117 	ldw	r9,4(r2)
  8090dc:	12000017 	ldw	r8,0(r2)
  8090e0:	4807883a 	mov	r3,r9
  8090e4:	4005883a 	mov	r2,r8
  8090e8:	dfc00117 	ldw	ra,4(sp)
  8090ec:	dc000017 	ldw	r16,0(sp)
  8090f0:	dec00204 	addi	sp,sp,8
  8090f4:	f800283a 	ret
  8090f8:	0011883a 	mov	r8,zero
  8090fc:	024ffc34 	movhi	r9,16368
  809100:	0005883a 	mov	r2,zero
  809104:	00d00934 	movhi	r3,16420
  809108:	480b883a 	mov	r5,r9
  80910c:	4009883a 	mov	r4,r8
  809110:	180f883a 	mov	r7,r3
  809114:	100d883a 	mov	r6,r2
  809118:	080b5940 	call	80b594 <__muldf3>
  80911c:	843fffc4 	addi	r16,r16,-1
  809120:	1011883a 	mov	r8,r2
  809124:	1813883a 	mov	r9,r3
  809128:	803ff51e 	bne	r16,zero,809100 <_mprec_log10+0x50>
  80912c:	4005883a 	mov	r2,r8
  809130:	4807883a 	mov	r3,r9
  809134:	dfc00117 	ldw	ra,4(sp)
  809138:	dc000017 	ldw	r16,0(sp)
  80913c:	dec00204 	addi	sp,sp,8
  809140:	f800283a 	ret

00809144 <__copybits>:
  809144:	297fffc4 	addi	r5,r5,-1
  809148:	30800417 	ldw	r2,16(r6)
  80914c:	280bd17a 	srai	r5,r5,5
  809150:	31800504 	addi	r6,r6,20
  809154:	1085883a 	add	r2,r2,r2
  809158:	294b883a 	add	r5,r5,r5
  80915c:	294b883a 	add	r5,r5,r5
  809160:	1085883a 	add	r2,r2,r2
  809164:	290b883a 	add	r5,r5,r4
  809168:	3087883a 	add	r3,r6,r2
  80916c:	29400104 	addi	r5,r5,4
  809170:	30c0052e 	bgeu	r6,r3,809188 <__copybits+0x44>
  809174:	30800017 	ldw	r2,0(r6)
  809178:	31800104 	addi	r6,r6,4
  80917c:	20800015 	stw	r2,0(r4)
  809180:	21000104 	addi	r4,r4,4
  809184:	30fffb36 	bltu	r6,r3,809174 <__copybits+0x30>
  809188:	2140032e 	bgeu	r4,r5,809198 <__copybits+0x54>
  80918c:	20000015 	stw	zero,0(r4)
  809190:	21000104 	addi	r4,r4,4
  809194:	217ffd36 	bltu	r4,r5,80918c <__copybits+0x48>
  809198:	f800283a 	ret

0080919c <__any_on>:
  80919c:	20800417 	ldw	r2,16(r4)
  8091a0:	2807d17a 	srai	r3,r5,5
  8091a4:	21000504 	addi	r4,r4,20
  8091a8:	10c00d0e 	bge	r2,r3,8091e0 <__any_on+0x44>
  8091ac:	1085883a 	add	r2,r2,r2
  8091b0:	1085883a 	add	r2,r2,r2
  8091b4:	208d883a 	add	r6,r4,r2
  8091b8:	2180182e 	bgeu	r4,r6,80921c <__any_on+0x80>
  8091bc:	30bfff17 	ldw	r2,-4(r6)
  8091c0:	30ffff04 	addi	r3,r6,-4
  8091c4:	1000041e 	bne	r2,zero,8091d8 <__any_on+0x3c>
  8091c8:	20c0142e 	bgeu	r4,r3,80921c <__any_on+0x80>
  8091cc:	18ffff04 	addi	r3,r3,-4
  8091d0:	18800017 	ldw	r2,0(r3)
  8091d4:	103ffc26 	beq	r2,zero,8091c8 <__any_on+0x2c>
  8091d8:	00800044 	movi	r2,1
  8091dc:	f800283a 	ret
  8091e0:	18800a0e 	bge	r3,r2,80920c <__any_on+0x70>
  8091e4:	294007cc 	andi	r5,r5,31
  8091e8:	28000826 	beq	r5,zero,80920c <__any_on+0x70>
  8091ec:	18c5883a 	add	r2,r3,r3
  8091f0:	1085883a 	add	r2,r2,r2
  8091f4:	208d883a 	add	r6,r4,r2
  8091f8:	30c00017 	ldw	r3,0(r6)
  8091fc:	1944d83a 	srl	r2,r3,r5
  809200:	1144983a 	sll	r2,r2,r5
  809204:	18bff41e 	bne	r3,r2,8091d8 <__any_on+0x3c>
  809208:	003feb06 	br	8091b8 <__any_on+0x1c>
  80920c:	18c5883a 	add	r2,r3,r3
  809210:	1085883a 	add	r2,r2,r2
  809214:	208d883a 	add	r6,r4,r2
  809218:	003fe706 	br	8091b8 <__any_on+0x1c>
  80921c:	0005883a 	mov	r2,zero
  809220:	f800283a 	ret

00809224 <_Balloc>:
  809224:	20c01317 	ldw	r3,76(r4)
  809228:	defffb04 	addi	sp,sp,-20
  80922c:	dcc00315 	stw	r19,12(sp)
  809230:	dc800215 	stw	r18,8(sp)
  809234:	dfc00415 	stw	ra,16(sp)
  809238:	2825883a 	mov	r18,r5
  80923c:	dc400115 	stw	r17,4(sp)
  809240:	dc000015 	stw	r16,0(sp)
  809244:	2027883a 	mov	r19,r4
  809248:	01800404 	movi	r6,16
  80924c:	01400104 	movi	r5,4
  809250:	18001726 	beq	r3,zero,8092b0 <_Balloc+0x8c>
  809254:	01400044 	movi	r5,1
  809258:	9485883a 	add	r2,r18,r18
  80925c:	2ca2983a 	sll	r17,r5,r18
  809260:	1085883a 	add	r2,r2,r2
  809264:	10c7883a 	add	r3,r2,r3
  809268:	1c000017 	ldw	r16,0(r3)
  80926c:	8c4d883a 	add	r6,r17,r17
  809270:	318d883a 	add	r6,r6,r6
  809274:	9809883a 	mov	r4,r19
  809278:	31800504 	addi	r6,r6,20
  80927c:	80001226 	beq	r16,zero,8092c8 <_Balloc+0xa4>
  809280:	80800017 	ldw	r2,0(r16)
  809284:	18800015 	stw	r2,0(r3)
  809288:	80000415 	stw	zero,16(r16)
  80928c:	80000315 	stw	zero,12(r16)
  809290:	8005883a 	mov	r2,r16
  809294:	dfc00417 	ldw	ra,16(sp)
  809298:	dcc00317 	ldw	r19,12(sp)
  80929c:	dc800217 	ldw	r18,8(sp)
  8092a0:	dc400117 	ldw	r17,4(sp)
  8092a4:	dc000017 	ldw	r16,0(sp)
  8092a8:	dec00504 	addi	sp,sp,20
  8092ac:	f800283a 	ret
  8092b0:	080a5ec0 	call	80a5ec <_calloc_r>
  8092b4:	1007883a 	mov	r3,r2
  8092b8:	0021883a 	mov	r16,zero
  8092bc:	98801315 	stw	r2,76(r19)
  8092c0:	103fe41e 	bne	r2,zero,809254 <_Balloc+0x30>
  8092c4:	003ff206 	br	809290 <_Balloc+0x6c>
  8092c8:	080a5ec0 	call	80a5ec <_calloc_r>
  8092cc:	103ff026 	beq	r2,zero,809290 <_Balloc+0x6c>
  8092d0:	1021883a 	mov	r16,r2
  8092d4:	14800115 	stw	r18,4(r2)
  8092d8:	14400215 	stw	r17,8(r2)
  8092dc:	003fea06 	br	809288 <_Balloc+0x64>

008092e0 <__d2b>:
  8092e0:	defff504 	addi	sp,sp,-44
  8092e4:	dcc00515 	stw	r19,20(sp)
  8092e8:	04c00044 	movi	r19,1
  8092ec:	dc000215 	stw	r16,8(sp)
  8092f0:	2821883a 	mov	r16,r5
  8092f4:	980b883a 	mov	r5,r19
  8092f8:	ddc00915 	stw	r23,36(sp)
  8092fc:	dd800815 	stw	r22,32(sp)
  809300:	dd400715 	stw	r21,28(sp)
  809304:	dd000615 	stw	r20,24(sp)
  809308:	dc800415 	stw	r18,16(sp)
  80930c:	dc400315 	stw	r17,12(sp)
  809310:	dfc00a15 	stw	ra,40(sp)
  809314:	3023883a 	mov	r17,r6
  809318:	382d883a 	mov	r22,r7
  80931c:	ddc00b17 	ldw	r23,44(sp)
  809320:	08092240 	call	809224 <_Balloc>
  809324:	1025883a 	mov	r18,r2
  809328:	00a00034 	movhi	r2,32768
  80932c:	10bfffc4 	addi	r2,r2,-1
  809330:	8888703a 	and	r4,r17,r2
  809334:	202ad53a 	srli	r21,r4,20
  809338:	00800434 	movhi	r2,16
  80933c:	10bfffc4 	addi	r2,r2,-1
  809340:	8886703a 	and	r3,r17,r2
  809344:	a829003a 	cmpeq	r20,r21,zero
  809348:	800b883a 	mov	r5,r16
  80934c:	d8c00115 	stw	r3,4(sp)
  809350:	94000504 	addi	r16,r18,20
  809354:	a000021e 	bne	r20,zero,809360 <__d2b+0x80>
  809358:	18c00434 	orhi	r3,r3,16
  80935c:	d8c00115 	stw	r3,4(sp)
  809360:	28002726 	beq	r5,zero,809400 <__d2b+0x120>
  809364:	d809883a 	mov	r4,sp
  809368:	d9400015 	stw	r5,0(sp)
  80936c:	0808d3c0 	call	808d3c <__lo0bits>
  809370:	100d883a 	mov	r6,r2
  809374:	10003526 	beq	r2,zero,80944c <__d2b+0x16c>
  809378:	d8c00117 	ldw	r3,4(sp)
  80937c:	00800804 	movi	r2,32
  809380:	1185c83a 	sub	r2,r2,r6
  809384:	d9000017 	ldw	r4,0(sp)
  809388:	1886983a 	sll	r3,r3,r2
  80938c:	1906b03a 	or	r3,r3,r4
  809390:	90c00515 	stw	r3,20(r18)
  809394:	d8c00117 	ldw	r3,4(sp)
  809398:	1986d83a 	srl	r3,r3,r6
  80939c:	d8c00115 	stw	r3,4(sp)
  8093a0:	180b003a 	cmpeq	r5,r3,zero
  8093a4:	00800084 	movi	r2,2
  8093a8:	114bc83a 	sub	r5,r2,r5
  8093ac:	80c00115 	stw	r3,4(r16)
  8093b0:	91400415 	stw	r5,16(r18)
  8093b4:	a0001a1e 	bne	r20,zero,809420 <__d2b+0x140>
  8093b8:	3545883a 	add	r2,r6,r21
  8093bc:	10bef344 	addi	r2,r2,-1075
  8093c0:	00c00d44 	movi	r3,53
  8093c4:	b0800015 	stw	r2,0(r22)
  8093c8:	1987c83a 	sub	r3,r3,r6
  8093cc:	b8c00015 	stw	r3,0(r23)
  8093d0:	9005883a 	mov	r2,r18
  8093d4:	dfc00a17 	ldw	ra,40(sp)
  8093d8:	ddc00917 	ldw	r23,36(sp)
  8093dc:	dd800817 	ldw	r22,32(sp)
  8093e0:	dd400717 	ldw	r21,28(sp)
  8093e4:	dd000617 	ldw	r20,24(sp)
  8093e8:	dcc00517 	ldw	r19,20(sp)
  8093ec:	dc800417 	ldw	r18,16(sp)
  8093f0:	dc400317 	ldw	r17,12(sp)
  8093f4:	dc000217 	ldw	r16,8(sp)
  8093f8:	dec00b04 	addi	sp,sp,44
  8093fc:	f800283a 	ret
  809400:	d9000104 	addi	r4,sp,4
  809404:	0808d3c0 	call	808d3c <__lo0bits>
  809408:	11800804 	addi	r6,r2,32
  80940c:	d8800117 	ldw	r2,4(sp)
  809410:	94c00415 	stw	r19,16(r18)
  809414:	980b883a 	mov	r5,r19
  809418:	90800515 	stw	r2,20(r18)
  80941c:	a03fe626 	beq	r20,zero,8093b8 <__d2b+0xd8>
  809420:	2945883a 	add	r2,r5,r5
  809424:	1085883a 	add	r2,r2,r2
  809428:	1405883a 	add	r2,r2,r16
  80942c:	113fff17 	ldw	r4,-4(r2)
  809430:	30fef384 	addi	r3,r6,-1074
  809434:	2820917a 	slli	r16,r5,5
  809438:	b0c00015 	stw	r3,0(r22)
  80943c:	0808ccc0 	call	808ccc <__hi0bits>
  809440:	80a1c83a 	sub	r16,r16,r2
  809444:	bc000015 	stw	r16,0(r23)
  809448:	003fe106 	br	8093d0 <__d2b+0xf0>
  80944c:	d8800017 	ldw	r2,0(sp)
  809450:	90800515 	stw	r2,20(r18)
  809454:	d8c00117 	ldw	r3,4(sp)
  809458:	003fd106 	br	8093a0 <__d2b+0xc0>

0080945c <__mdiff>:
  80945c:	defffb04 	addi	sp,sp,-20
  809460:	dc000015 	stw	r16,0(sp)
  809464:	2821883a 	mov	r16,r5
  809468:	dc800215 	stw	r18,8(sp)
  80946c:	300b883a 	mov	r5,r6
  809470:	2025883a 	mov	r18,r4
  809474:	8009883a 	mov	r4,r16
  809478:	dc400115 	stw	r17,4(sp)
  80947c:	dfc00415 	stw	ra,16(sp)
  809480:	dcc00315 	stw	r19,12(sp)
  809484:	3023883a 	mov	r17,r6
  809488:	0808e000 	call	808e00 <__mcmp>
  80948c:	10004226 	beq	r2,zero,809598 <__mdiff+0x13c>
  809490:	10005016 	blt	r2,zero,8095d4 <__mdiff+0x178>
  809494:	0027883a 	mov	r19,zero
  809498:	81400117 	ldw	r5,4(r16)
  80949c:	9009883a 	mov	r4,r18
  8094a0:	08092240 	call	809224 <_Balloc>
  8094a4:	1019883a 	mov	r12,r2
  8094a8:	82800417 	ldw	r10,16(r16)
  8094ac:	88800417 	ldw	r2,16(r17)
  8094b0:	81800504 	addi	r6,r16,20
  8094b4:	5287883a 	add	r3,r10,r10
  8094b8:	1085883a 	add	r2,r2,r2
  8094bc:	18c7883a 	add	r3,r3,r3
  8094c0:	1085883a 	add	r2,r2,r2
  8094c4:	8a000504 	addi	r8,r17,20
  8094c8:	64c00315 	stw	r19,12(r12)
  8094cc:	30db883a 	add	r13,r6,r3
  8094d0:	4097883a 	add	r11,r8,r2
  8094d4:	61c00504 	addi	r7,r12,20
  8094d8:	0013883a 	mov	r9,zero
  8094dc:	31000017 	ldw	r4,0(r6)
  8094e0:	41400017 	ldw	r5,0(r8)
  8094e4:	42000104 	addi	r8,r8,4
  8094e8:	20bfffcc 	andi	r2,r4,65535
  8094ec:	28ffffcc 	andi	r3,r5,65535
  8094f0:	10c5c83a 	sub	r2,r2,r3
  8094f4:	1245883a 	add	r2,r2,r9
  8094f8:	2008d43a 	srli	r4,r4,16
  8094fc:	280ad43a 	srli	r5,r5,16
  809500:	1007d43a 	srai	r3,r2,16
  809504:	3880000d 	sth	r2,0(r7)
  809508:	2149c83a 	sub	r4,r4,r5
  80950c:	20c9883a 	add	r4,r4,r3
  809510:	3900008d 	sth	r4,2(r7)
  809514:	31800104 	addi	r6,r6,4
  809518:	39c00104 	addi	r7,r7,4
  80951c:	2013d43a 	srai	r9,r4,16
  809520:	42ffee36 	bltu	r8,r11,8094dc <__mdiff+0x80>
  809524:	33400c2e 	bgeu	r6,r13,809558 <__mdiff+0xfc>
  809528:	30800017 	ldw	r2,0(r6)
  80952c:	31800104 	addi	r6,r6,4
  809530:	10ffffcc 	andi	r3,r2,65535
  809534:	1a47883a 	add	r3,r3,r9
  809538:	1004d43a 	srli	r2,r2,16
  80953c:	1809d43a 	srai	r4,r3,16
  809540:	38c0000d 	sth	r3,0(r7)
  809544:	1105883a 	add	r2,r2,r4
  809548:	3880008d 	sth	r2,2(r7)
  80954c:	1013d43a 	srai	r9,r2,16
  809550:	39c00104 	addi	r7,r7,4
  809554:	337ff436 	bltu	r6,r13,809528 <__mdiff+0xcc>
  809558:	38bfff17 	ldw	r2,-4(r7)
  80955c:	38ffff04 	addi	r3,r7,-4
  809560:	1000041e 	bne	r2,zero,809574 <__mdiff+0x118>
  809564:	18ffff04 	addi	r3,r3,-4
  809568:	18800017 	ldw	r2,0(r3)
  80956c:	52bfffc4 	addi	r10,r10,-1
  809570:	103ffc26 	beq	r2,zero,809564 <__mdiff+0x108>
  809574:	6005883a 	mov	r2,r12
  809578:	62800415 	stw	r10,16(r12)
  80957c:	dfc00417 	ldw	ra,16(sp)
  809580:	dcc00317 	ldw	r19,12(sp)
  809584:	dc800217 	ldw	r18,8(sp)
  809588:	dc400117 	ldw	r17,4(sp)
  80958c:	dc000017 	ldw	r16,0(sp)
  809590:	dec00504 	addi	sp,sp,20
  809594:	f800283a 	ret
  809598:	9009883a 	mov	r4,r18
  80959c:	000b883a 	mov	r5,zero
  8095a0:	08092240 	call	809224 <_Balloc>
  8095a4:	1019883a 	mov	r12,r2
  8095a8:	00800044 	movi	r2,1
  8095ac:	60800415 	stw	r2,16(r12)
  8095b0:	6005883a 	mov	r2,r12
  8095b4:	60000515 	stw	zero,20(r12)
  8095b8:	dfc00417 	ldw	ra,16(sp)
  8095bc:	dcc00317 	ldw	r19,12(sp)
  8095c0:	dc800217 	ldw	r18,8(sp)
  8095c4:	dc400117 	ldw	r17,4(sp)
  8095c8:	dc000017 	ldw	r16,0(sp)
  8095cc:	dec00504 	addi	sp,sp,20
  8095d0:	f800283a 	ret
  8095d4:	880d883a 	mov	r6,r17
  8095d8:	04c00044 	movi	r19,1
  8095dc:	8023883a 	mov	r17,r16
  8095e0:	3021883a 	mov	r16,r6
  8095e4:	003fac06 	br	809498 <__mdiff+0x3c>

008095e8 <__lshift>:
  8095e8:	defff904 	addi	sp,sp,-28
  8095ec:	28800417 	ldw	r2,16(r5)
  8095f0:	dc000015 	stw	r16,0(sp)
  8095f4:	3021d17a 	srai	r16,r6,5
  8095f8:	28c00217 	ldw	r3,8(r5)
  8095fc:	10800044 	addi	r2,r2,1
  809600:	dc400115 	stw	r17,4(sp)
  809604:	80a3883a 	add	r17,r16,r2
  809608:	dd400515 	stw	r21,20(sp)
  80960c:	dd000415 	stw	r20,16(sp)
  809610:	dc800215 	stw	r18,8(sp)
  809614:	dfc00615 	stw	ra,24(sp)
  809618:	2825883a 	mov	r18,r5
  80961c:	dcc00315 	stw	r19,12(sp)
  809620:	3029883a 	mov	r20,r6
  809624:	202b883a 	mov	r21,r4
  809628:	29400117 	ldw	r5,4(r5)
  80962c:	1c40030e 	bge	r3,r17,80963c <__lshift+0x54>
  809630:	18c7883a 	add	r3,r3,r3
  809634:	29400044 	addi	r5,r5,1
  809638:	1c7ffd16 	blt	r3,r17,809630 <__lshift+0x48>
  80963c:	a809883a 	mov	r4,r21
  809640:	08092240 	call	809224 <_Balloc>
  809644:	1027883a 	mov	r19,r2
  809648:	11400504 	addi	r5,r2,20
  80964c:	0400090e 	bge	zero,r16,809674 <__lshift+0x8c>
  809650:	2805883a 	mov	r2,r5
  809654:	0007883a 	mov	r3,zero
  809658:	18c00044 	addi	r3,r3,1
  80965c:	10000015 	stw	zero,0(r2)
  809660:	10800104 	addi	r2,r2,4
  809664:	80fffc1e 	bne	r16,r3,809658 <__lshift+0x70>
  809668:	8405883a 	add	r2,r16,r16
  80966c:	1085883a 	add	r2,r2,r2
  809670:	288b883a 	add	r5,r5,r2
  809674:	90800417 	ldw	r2,16(r18)
  809678:	91000504 	addi	r4,r18,20
  80967c:	a18007cc 	andi	r6,r20,31
  809680:	1085883a 	add	r2,r2,r2
  809684:	1085883a 	add	r2,r2,r2
  809688:	208f883a 	add	r7,r4,r2
  80968c:	30001e26 	beq	r6,zero,809708 <__lshift+0x120>
  809690:	00800804 	movi	r2,32
  809694:	1191c83a 	sub	r8,r2,r6
  809698:	0007883a 	mov	r3,zero
  80969c:	20800017 	ldw	r2,0(r4)
  8096a0:	1184983a 	sll	r2,r2,r6
  8096a4:	1884b03a 	or	r2,r3,r2
  8096a8:	28800015 	stw	r2,0(r5)
  8096ac:	20c00017 	ldw	r3,0(r4)
  8096b0:	21000104 	addi	r4,r4,4
  8096b4:	29400104 	addi	r5,r5,4
  8096b8:	1a06d83a 	srl	r3,r3,r8
  8096bc:	21fff736 	bltu	r4,r7,80969c <__lshift+0xb4>
  8096c0:	28c00015 	stw	r3,0(r5)
  8096c4:	18000126 	beq	r3,zero,8096cc <__lshift+0xe4>
  8096c8:	8c400044 	addi	r17,r17,1
  8096cc:	88bfffc4 	addi	r2,r17,-1
  8096d0:	98800415 	stw	r2,16(r19)
  8096d4:	a809883a 	mov	r4,r21
  8096d8:	900b883a 	mov	r5,r18
  8096dc:	0808ca40 	call	808ca4 <_Bfree>
  8096e0:	9805883a 	mov	r2,r19
  8096e4:	dfc00617 	ldw	ra,24(sp)
  8096e8:	dd400517 	ldw	r21,20(sp)
  8096ec:	dd000417 	ldw	r20,16(sp)
  8096f0:	dcc00317 	ldw	r19,12(sp)
  8096f4:	dc800217 	ldw	r18,8(sp)
  8096f8:	dc400117 	ldw	r17,4(sp)
  8096fc:	dc000017 	ldw	r16,0(sp)
  809700:	dec00704 	addi	sp,sp,28
  809704:	f800283a 	ret
  809708:	20800017 	ldw	r2,0(r4)
  80970c:	21000104 	addi	r4,r4,4
  809710:	28800015 	stw	r2,0(r5)
  809714:	29400104 	addi	r5,r5,4
  809718:	21ffec2e 	bgeu	r4,r7,8096cc <__lshift+0xe4>
  80971c:	20800017 	ldw	r2,0(r4)
  809720:	21000104 	addi	r4,r4,4
  809724:	28800015 	stw	r2,0(r5)
  809728:	29400104 	addi	r5,r5,4
  80972c:	21fff636 	bltu	r4,r7,809708 <__lshift+0x120>
  809730:	003fe606 	br	8096cc <__lshift+0xe4>

00809734 <__multiply>:
  809734:	defff904 	addi	sp,sp,-28
  809738:	dcc00315 	stw	r19,12(sp)
  80973c:	dc800215 	stw	r18,8(sp)
  809740:	2cc00417 	ldw	r19,16(r5)
  809744:	34800417 	ldw	r18,16(r6)
  809748:	dd000415 	stw	r20,16(sp)
  80974c:	dc400115 	stw	r17,4(sp)
  809750:	dfc00615 	stw	ra,24(sp)
  809754:	dd400515 	stw	r21,20(sp)
  809758:	dc000015 	stw	r16,0(sp)
  80975c:	2823883a 	mov	r17,r5
  809760:	3029883a 	mov	r20,r6
  809764:	9c80040e 	bge	r19,r18,809778 <__multiply+0x44>
  809768:	9027883a 	mov	r19,r18
  80976c:	2c800417 	ldw	r18,16(r5)
  809770:	2829883a 	mov	r20,r5
  809774:	3023883a 	mov	r17,r6
  809778:	88800217 	ldw	r2,8(r17)
  80977c:	9ca1883a 	add	r16,r19,r18
  809780:	89400117 	ldw	r5,4(r17)
  809784:	1400010e 	bge	r2,r16,80978c <__multiply+0x58>
  809788:	29400044 	addi	r5,r5,1
  80978c:	08092240 	call	809224 <_Balloc>
  809790:	102b883a 	mov	r21,r2
  809794:	8405883a 	add	r2,r16,r16
  809798:	1085883a 	add	r2,r2,r2
  80979c:	a9000504 	addi	r4,r21,20
  8097a0:	209d883a 	add	r14,r4,r2
  8097a4:	2380042e 	bgeu	r4,r14,8097b8 <__multiply+0x84>
  8097a8:	2005883a 	mov	r2,r4
  8097ac:	10000015 	stw	zero,0(r2)
  8097b0:	10800104 	addi	r2,r2,4
  8097b4:	13bffd36 	bltu	r2,r14,8097ac <__multiply+0x78>
  8097b8:	9485883a 	add	r2,r18,r18
  8097bc:	9cc7883a 	add	r3,r19,r19
  8097c0:	a1800504 	addi	r6,r20,20
  8097c4:	1085883a 	add	r2,r2,r2
  8097c8:	8b400504 	addi	r13,r17,20
  8097cc:	18c7883a 	add	r3,r3,r3
  8097d0:	309f883a 	add	r15,r6,r2
  8097d4:	68d7883a 	add	r11,r13,r3
  8097d8:	33c03b2e 	bgeu	r6,r15,8098c8 <__multiply+0x194>
  8097dc:	2019883a 	mov	r12,r4
  8097e0:	30800017 	ldw	r2,0(r6)
  8097e4:	127fffcc 	andi	r9,r2,65535
  8097e8:	48001826 	beq	r9,zero,80984c <__multiply+0x118>
  8097ec:	6811883a 	mov	r8,r13
  8097f0:	600f883a 	mov	r7,r12
  8097f4:	0015883a 	mov	r10,zero
  8097f8:	40c00017 	ldw	r3,0(r8)
  8097fc:	39400017 	ldw	r5,0(r7)
  809800:	42000104 	addi	r8,r8,4
  809804:	193fffcc 	andi	r4,r3,65535
  809808:	4909383a 	mul	r4,r9,r4
  80980c:	1806d43a 	srli	r3,r3,16
  809810:	28bfffcc 	andi	r2,r5,65535
  809814:	5085883a 	add	r2,r10,r2
  809818:	2089883a 	add	r4,r4,r2
  80981c:	48c7383a 	mul	r3,r9,r3
  809820:	280ad43a 	srli	r5,r5,16
  809824:	2004d43a 	srli	r2,r4,16
  809828:	3900000d 	sth	r4,0(r7)
  80982c:	1947883a 	add	r3,r3,r5
  809830:	10c5883a 	add	r2,r2,r3
  809834:	3880008d 	sth	r2,2(r7)
  809838:	1014d43a 	srli	r10,r2,16
  80983c:	39c00104 	addi	r7,r7,4
  809840:	42ffed36 	bltu	r8,r11,8097f8 <__multiply+0xc4>
  809844:	3a800015 	stw	r10,0(r7)
  809848:	30800017 	ldw	r2,0(r6)
  80984c:	1012d43a 	srli	r9,r2,16
  809850:	48001926 	beq	r9,zero,8098b8 <__multiply+0x184>
  809854:	60800017 	ldw	r2,0(r12)
  809858:	6811883a 	mov	r8,r13
  80985c:	600f883a 	mov	r7,r12
  809860:	0015883a 	mov	r10,zero
  809864:	100b883a 	mov	r5,r2
  809868:	41000017 	ldw	r4,0(r8)
  80986c:	2806d43a 	srli	r3,r5,16
  809870:	3880000d 	sth	r2,0(r7)
  809874:	20bfffcc 	andi	r2,r4,65535
  809878:	4885383a 	mul	r2,r9,r2
  80987c:	50c7883a 	add	r3,r10,r3
  809880:	2008d43a 	srli	r4,r4,16
  809884:	10c5883a 	add	r2,r2,r3
  809888:	3880008d 	sth	r2,2(r7)
  80988c:	39c00104 	addi	r7,r7,4
  809890:	39400017 	ldw	r5,0(r7)
  809894:	4909383a 	mul	r4,r9,r4
  809898:	1004d43a 	srli	r2,r2,16
  80989c:	28ffffcc 	andi	r3,r5,65535
  8098a0:	20c9883a 	add	r4,r4,r3
  8098a4:	1105883a 	add	r2,r2,r4
  8098a8:	42000104 	addi	r8,r8,4
  8098ac:	1014d43a 	srli	r10,r2,16
  8098b0:	42ffed36 	bltu	r8,r11,809868 <__multiply+0x134>
  8098b4:	38800015 	stw	r2,0(r7)
  8098b8:	31800104 	addi	r6,r6,4
  8098bc:	33c0022e 	bgeu	r6,r15,8098c8 <__multiply+0x194>
  8098c0:	63000104 	addi	r12,r12,4
  8098c4:	003fc606 	br	8097e0 <__multiply+0xac>
  8098c8:	0400090e 	bge	zero,r16,8098f0 <__multiply+0x1bc>
  8098cc:	70bfff17 	ldw	r2,-4(r14)
  8098d0:	70ffff04 	addi	r3,r14,-4
  8098d4:	10000326 	beq	r2,zero,8098e4 <__multiply+0x1b0>
  8098d8:	00000506 	br	8098f0 <__multiply+0x1bc>
  8098dc:	18800017 	ldw	r2,0(r3)
  8098e0:	1000031e 	bne	r2,zero,8098f0 <__multiply+0x1bc>
  8098e4:	843fffc4 	addi	r16,r16,-1
  8098e8:	18ffff04 	addi	r3,r3,-4
  8098ec:	803ffb1e 	bne	r16,zero,8098dc <__multiply+0x1a8>
  8098f0:	a805883a 	mov	r2,r21
  8098f4:	ac000415 	stw	r16,16(r21)
  8098f8:	dfc00617 	ldw	ra,24(sp)
  8098fc:	dd400517 	ldw	r21,20(sp)
  809900:	dd000417 	ldw	r20,16(sp)
  809904:	dcc00317 	ldw	r19,12(sp)
  809908:	dc800217 	ldw	r18,8(sp)
  80990c:	dc400117 	ldw	r17,4(sp)
  809910:	dc000017 	ldw	r16,0(sp)
  809914:	dec00704 	addi	sp,sp,28
  809918:	f800283a 	ret

0080991c <__i2b>:
  80991c:	defffd04 	addi	sp,sp,-12
  809920:	dc000015 	stw	r16,0(sp)
  809924:	04000044 	movi	r16,1
  809928:	dc800115 	stw	r18,4(sp)
  80992c:	2825883a 	mov	r18,r5
  809930:	800b883a 	mov	r5,r16
  809934:	dfc00215 	stw	ra,8(sp)
  809938:	08092240 	call	809224 <_Balloc>
  80993c:	14000415 	stw	r16,16(r2)
  809940:	14800515 	stw	r18,20(r2)
  809944:	dfc00217 	ldw	ra,8(sp)
  809948:	dc800117 	ldw	r18,4(sp)
  80994c:	dc000017 	ldw	r16,0(sp)
  809950:	dec00304 	addi	sp,sp,12
  809954:	f800283a 	ret

00809958 <__multadd>:
  809958:	defffa04 	addi	sp,sp,-24
  80995c:	dc800215 	stw	r18,8(sp)
  809960:	2c800417 	ldw	r18,16(r5)
  809964:	dd000415 	stw	r20,16(sp)
  809968:	dcc00315 	stw	r19,12(sp)
  80996c:	dc000015 	stw	r16,0(sp)
  809970:	dfc00515 	stw	ra,20(sp)
  809974:	3821883a 	mov	r16,r7
  809978:	dc400115 	stw	r17,4(sp)
  80997c:	2827883a 	mov	r19,r5
  809980:	2029883a 	mov	r20,r4
  809984:	2a000504 	addi	r8,r5,20
  809988:	000f883a 	mov	r7,zero
  80998c:	40800017 	ldw	r2,0(r8)
  809990:	39c00044 	addi	r7,r7,1
  809994:	10ffffcc 	andi	r3,r2,65535
  809998:	1987383a 	mul	r3,r3,r6
  80999c:	1004d43a 	srli	r2,r2,16
  8099a0:	1c07883a 	add	r3,r3,r16
  8099a4:	180ad43a 	srli	r5,r3,16
  8099a8:	1185383a 	mul	r2,r2,r6
  8099ac:	18ffffcc 	andi	r3,r3,65535
  8099b0:	1145883a 	add	r2,r2,r5
  8099b4:	1008943a 	slli	r4,r2,16
  8099b8:	1020d43a 	srli	r16,r2,16
  8099bc:	20c9883a 	add	r4,r4,r3
  8099c0:	41000015 	stw	r4,0(r8)
  8099c4:	42000104 	addi	r8,r8,4
  8099c8:	3cbff016 	blt	r7,r18,80998c <__multadd+0x34>
  8099cc:	80000826 	beq	r16,zero,8099f0 <__multadd+0x98>
  8099d0:	98800217 	ldw	r2,8(r19)
  8099d4:	90800f0e 	bge	r18,r2,809a14 <__multadd+0xbc>
  8099d8:	9485883a 	add	r2,r18,r18
  8099dc:	1085883a 	add	r2,r2,r2
  8099e0:	14c5883a 	add	r2,r2,r19
  8099e4:	90c00044 	addi	r3,r18,1
  8099e8:	14000515 	stw	r16,20(r2)
  8099ec:	98c00415 	stw	r3,16(r19)
  8099f0:	9805883a 	mov	r2,r19
  8099f4:	dfc00517 	ldw	ra,20(sp)
  8099f8:	dd000417 	ldw	r20,16(sp)
  8099fc:	dcc00317 	ldw	r19,12(sp)
  809a00:	dc800217 	ldw	r18,8(sp)
  809a04:	dc400117 	ldw	r17,4(sp)
  809a08:	dc000017 	ldw	r16,0(sp)
  809a0c:	dec00604 	addi	sp,sp,24
  809a10:	f800283a 	ret
  809a14:	99400117 	ldw	r5,4(r19)
  809a18:	a009883a 	mov	r4,r20
  809a1c:	29400044 	addi	r5,r5,1
  809a20:	08092240 	call	809224 <_Balloc>
  809a24:	99800417 	ldw	r6,16(r19)
  809a28:	99400304 	addi	r5,r19,12
  809a2c:	11000304 	addi	r4,r2,12
  809a30:	318d883a 	add	r6,r6,r6
  809a34:	318d883a 	add	r6,r6,r6
  809a38:	31800204 	addi	r6,r6,8
  809a3c:	1023883a 	mov	r17,r2
  809a40:	0808a8c0 	call	808a8c <memcpy>
  809a44:	980b883a 	mov	r5,r19
  809a48:	a009883a 	mov	r4,r20
  809a4c:	0808ca40 	call	808ca4 <_Bfree>
  809a50:	8827883a 	mov	r19,r17
  809a54:	003fe006 	br	8099d8 <__multadd+0x80>

00809a58 <__pow5mult>:
  809a58:	defffa04 	addi	sp,sp,-24
  809a5c:	308000cc 	andi	r2,r6,3
  809a60:	dd000415 	stw	r20,16(sp)
  809a64:	dcc00315 	stw	r19,12(sp)
  809a68:	dc000015 	stw	r16,0(sp)
  809a6c:	dfc00515 	stw	ra,20(sp)
  809a70:	dc800215 	stw	r18,8(sp)
  809a74:	dc400115 	stw	r17,4(sp)
  809a78:	3021883a 	mov	r16,r6
  809a7c:	2027883a 	mov	r19,r4
  809a80:	2829883a 	mov	r20,r5
  809a84:	10002b1e 	bne	r2,zero,809b34 <__pow5mult+0xdc>
  809a88:	8025d0ba 	srai	r18,r16,2
  809a8c:	90001b26 	beq	r18,zero,809afc <__pow5mult+0xa4>
  809a90:	9c001217 	ldw	r16,72(r19)
  809a94:	8000081e 	bne	r16,zero,809ab8 <__pow5mult+0x60>
  809a98:	00003006 	br	809b5c <__pow5mult+0x104>
  809a9c:	800b883a 	mov	r5,r16
  809aa0:	800d883a 	mov	r6,r16
  809aa4:	9809883a 	mov	r4,r19
  809aa8:	90001426 	beq	r18,zero,809afc <__pow5mult+0xa4>
  809aac:	80800017 	ldw	r2,0(r16)
  809ab0:	10001b26 	beq	r2,zero,809b20 <__pow5mult+0xc8>
  809ab4:	1021883a 	mov	r16,r2
  809ab8:	9080004c 	andi	r2,r18,1
  809abc:	1005003a 	cmpeq	r2,r2,zero
  809ac0:	9025d07a 	srai	r18,r18,1
  809ac4:	800d883a 	mov	r6,r16
  809ac8:	9809883a 	mov	r4,r19
  809acc:	a00b883a 	mov	r5,r20
  809ad0:	103ff21e 	bne	r2,zero,809a9c <__pow5mult+0x44>
  809ad4:	08097340 	call	809734 <__multiply>
  809ad8:	a00b883a 	mov	r5,r20
  809adc:	9809883a 	mov	r4,r19
  809ae0:	1023883a 	mov	r17,r2
  809ae4:	0808ca40 	call	808ca4 <_Bfree>
  809ae8:	8829883a 	mov	r20,r17
  809aec:	800b883a 	mov	r5,r16
  809af0:	800d883a 	mov	r6,r16
  809af4:	9809883a 	mov	r4,r19
  809af8:	903fec1e 	bne	r18,zero,809aac <__pow5mult+0x54>
  809afc:	a005883a 	mov	r2,r20
  809b00:	dfc00517 	ldw	ra,20(sp)
  809b04:	dd000417 	ldw	r20,16(sp)
  809b08:	dcc00317 	ldw	r19,12(sp)
  809b0c:	dc800217 	ldw	r18,8(sp)
  809b10:	dc400117 	ldw	r17,4(sp)
  809b14:	dc000017 	ldw	r16,0(sp)
  809b18:	dec00604 	addi	sp,sp,24
  809b1c:	f800283a 	ret
  809b20:	08097340 	call	809734 <__multiply>
  809b24:	80800015 	stw	r2,0(r16)
  809b28:	1021883a 	mov	r16,r2
  809b2c:	10000015 	stw	zero,0(r2)
  809b30:	003fe106 	br	809ab8 <__pow5mult+0x60>
  809b34:	1085883a 	add	r2,r2,r2
  809b38:	00c02074 	movhi	r3,129
  809b3c:	18c70604 	addi	r3,r3,7192
  809b40:	1085883a 	add	r2,r2,r2
  809b44:	10c5883a 	add	r2,r2,r3
  809b48:	11bfff17 	ldw	r6,-4(r2)
  809b4c:	000f883a 	mov	r7,zero
  809b50:	08099580 	call	809958 <__multadd>
  809b54:	1029883a 	mov	r20,r2
  809b58:	003fcb06 	br	809a88 <__pow5mult+0x30>
  809b5c:	9809883a 	mov	r4,r19
  809b60:	01409c44 	movi	r5,625
  809b64:	080991c0 	call	80991c <__i2b>
  809b68:	98801215 	stw	r2,72(r19)
  809b6c:	1021883a 	mov	r16,r2
  809b70:	10000015 	stw	zero,0(r2)
  809b74:	003fd006 	br	809ab8 <__pow5mult+0x60>

00809b78 <__s2b>:
  809b78:	defff904 	addi	sp,sp,-28
  809b7c:	dcc00315 	stw	r19,12(sp)
  809b80:	dc800215 	stw	r18,8(sp)
  809b84:	2827883a 	mov	r19,r5
  809b88:	2025883a 	mov	r18,r4
  809b8c:	01400244 	movi	r5,9
  809b90:	39000204 	addi	r4,r7,8
  809b94:	dd000415 	stw	r20,16(sp)
  809b98:	dc400115 	stw	r17,4(sp)
  809b9c:	dfc00615 	stw	ra,24(sp)
  809ba0:	dd400515 	stw	r21,20(sp)
  809ba4:	dc000015 	stw	r16,0(sp)
  809ba8:	3829883a 	mov	r20,r7
  809bac:	3023883a 	mov	r17,r6
  809bb0:	080bf580 	call	80bf58 <__divsi3>
  809bb4:	00c00044 	movi	r3,1
  809bb8:	1880350e 	bge	r3,r2,809c90 <__s2b+0x118>
  809bbc:	000b883a 	mov	r5,zero
  809bc0:	18c7883a 	add	r3,r3,r3
  809bc4:	29400044 	addi	r5,r5,1
  809bc8:	18bffd16 	blt	r3,r2,809bc0 <__s2b+0x48>
  809bcc:	9009883a 	mov	r4,r18
  809bd0:	08092240 	call	809224 <_Balloc>
  809bd4:	1011883a 	mov	r8,r2
  809bd8:	d8800717 	ldw	r2,28(sp)
  809bdc:	00c00044 	movi	r3,1
  809be0:	01800244 	movi	r6,9
  809be4:	40800515 	stw	r2,20(r8)
  809be8:	40c00415 	stw	r3,16(r8)
  809bec:	3440260e 	bge	r6,r17,809c88 <__s2b+0x110>
  809bf0:	3021883a 	mov	r16,r6
  809bf4:	99ab883a 	add	r21,r19,r6
  809bf8:	9c05883a 	add	r2,r19,r16
  809bfc:	11c00007 	ldb	r7,0(r2)
  809c00:	400b883a 	mov	r5,r8
  809c04:	9009883a 	mov	r4,r18
  809c08:	39fff404 	addi	r7,r7,-48
  809c0c:	01800284 	movi	r6,10
  809c10:	08099580 	call	809958 <__multadd>
  809c14:	84000044 	addi	r16,r16,1
  809c18:	1011883a 	mov	r8,r2
  809c1c:	8c3ff61e 	bne	r17,r16,809bf8 <__s2b+0x80>
  809c20:	ac45883a 	add	r2,r21,r17
  809c24:	117ffe04 	addi	r5,r2,-8
  809c28:	880d883a 	mov	r6,r17
  809c2c:	35000c0e 	bge	r6,r20,809c60 <__s2b+0xe8>
  809c30:	a185c83a 	sub	r2,r20,r6
  809c34:	2821883a 	mov	r16,r5
  809c38:	28a3883a 	add	r17,r5,r2
  809c3c:	81c00007 	ldb	r7,0(r16)
  809c40:	400b883a 	mov	r5,r8
  809c44:	9009883a 	mov	r4,r18
  809c48:	39fff404 	addi	r7,r7,-48
  809c4c:	01800284 	movi	r6,10
  809c50:	08099580 	call	809958 <__multadd>
  809c54:	84000044 	addi	r16,r16,1
  809c58:	1011883a 	mov	r8,r2
  809c5c:	847ff71e 	bne	r16,r17,809c3c <__s2b+0xc4>
  809c60:	4005883a 	mov	r2,r8
  809c64:	dfc00617 	ldw	ra,24(sp)
  809c68:	dd400517 	ldw	r21,20(sp)
  809c6c:	dd000417 	ldw	r20,16(sp)
  809c70:	dcc00317 	ldw	r19,12(sp)
  809c74:	dc800217 	ldw	r18,8(sp)
  809c78:	dc400117 	ldw	r17,4(sp)
  809c7c:	dc000017 	ldw	r16,0(sp)
  809c80:	dec00704 	addi	sp,sp,28
  809c84:	f800283a 	ret
  809c88:	99400284 	addi	r5,r19,10
  809c8c:	003fe706 	br	809c2c <__s2b+0xb4>
  809c90:	000b883a 	mov	r5,zero
  809c94:	003fcd06 	br	809bcc <__s2b+0x54>

00809c98 <_realloc_r>:
  809c98:	defff404 	addi	sp,sp,-48
  809c9c:	dd800815 	stw	r22,32(sp)
  809ca0:	dc800415 	stw	r18,16(sp)
  809ca4:	dc400315 	stw	r17,12(sp)
  809ca8:	dfc00b15 	stw	ra,44(sp)
  809cac:	df000a15 	stw	fp,40(sp)
  809cb0:	ddc00915 	stw	r23,36(sp)
  809cb4:	dd400715 	stw	r21,28(sp)
  809cb8:	dd000615 	stw	r20,24(sp)
  809cbc:	dcc00515 	stw	r19,20(sp)
  809cc0:	dc000215 	stw	r16,8(sp)
  809cc4:	2825883a 	mov	r18,r5
  809cc8:	3023883a 	mov	r17,r6
  809ccc:	202d883a 	mov	r22,r4
  809cd0:	2800c926 	beq	r5,zero,809ff8 <_realloc_r+0x360>
  809cd4:	080c6ac0 	call	80c6ac <__malloc_lock>
  809cd8:	943ffe04 	addi	r16,r18,-8
  809cdc:	88c002c4 	addi	r3,r17,11
  809ce0:	00800584 	movi	r2,22
  809ce4:	82000117 	ldw	r8,4(r16)
  809ce8:	10c01b2e 	bgeu	r2,r3,809d58 <_realloc_r+0xc0>
  809cec:	00bffe04 	movi	r2,-8
  809cf0:	188e703a 	and	r7,r3,r2
  809cf4:	3839883a 	mov	fp,r7
  809cf8:	38001a16 	blt	r7,zero,809d64 <_realloc_r+0xcc>
  809cfc:	e4401936 	bltu	fp,r17,809d64 <_realloc_r+0xcc>
  809d00:	013fff04 	movi	r4,-4
  809d04:	4126703a 	and	r19,r8,r4
  809d08:	99c02616 	blt	r19,r7,809da4 <_realloc_r+0x10c>
  809d0c:	802b883a 	mov	r21,r16
  809d10:	9829883a 	mov	r20,r19
  809d14:	84000204 	addi	r16,r16,8
  809d18:	a80f883a 	mov	r7,r21
  809d1c:	a70dc83a 	sub	r6,r20,fp
  809d20:	008003c4 	movi	r2,15
  809d24:	1180c136 	bltu	r2,r6,80a02c <_realloc_r+0x394>
  809d28:	38800117 	ldw	r2,4(r7)
  809d2c:	a549883a 	add	r4,r20,r21
  809d30:	1080004c 	andi	r2,r2,1
  809d34:	a084b03a 	or	r2,r20,r2
  809d38:	38800115 	stw	r2,4(r7)
  809d3c:	20c00117 	ldw	r3,4(r4)
  809d40:	18c00054 	ori	r3,r3,1
  809d44:	20c00115 	stw	r3,4(r4)
  809d48:	b009883a 	mov	r4,r22
  809d4c:	080c6cc0 	call	80c6cc <__malloc_unlock>
  809d50:	8023883a 	mov	r17,r16
  809d54:	00000606 	br	809d70 <_realloc_r+0xd8>
  809d58:	01c00404 	movi	r7,16
  809d5c:	3839883a 	mov	fp,r7
  809d60:	e47fe72e 	bgeu	fp,r17,809d00 <_realloc_r+0x68>
  809d64:	00800304 	movi	r2,12
  809d68:	0023883a 	mov	r17,zero
  809d6c:	b0800015 	stw	r2,0(r22)
  809d70:	8805883a 	mov	r2,r17
  809d74:	dfc00b17 	ldw	ra,44(sp)
  809d78:	df000a17 	ldw	fp,40(sp)
  809d7c:	ddc00917 	ldw	r23,36(sp)
  809d80:	dd800817 	ldw	r22,32(sp)
  809d84:	dd400717 	ldw	r21,28(sp)
  809d88:	dd000617 	ldw	r20,24(sp)
  809d8c:	dcc00517 	ldw	r19,20(sp)
  809d90:	dc800417 	ldw	r18,16(sp)
  809d94:	dc400317 	ldw	r17,12(sp)
  809d98:	dc000217 	ldw	r16,8(sp)
  809d9c:	dec00c04 	addi	sp,sp,48
  809da0:	f800283a 	ret
  809da4:	00802074 	movhi	r2,129
  809da8:	10886504 	addi	r2,r2,8596
  809dac:	12400217 	ldw	r9,8(r2)
  809db0:	84cd883a 	add	r6,r16,r19
  809db4:	802b883a 	mov	r21,r16
  809db8:	3240b926 	beq	r6,r9,80a0a0 <_realloc_r+0x408>
  809dbc:	31400117 	ldw	r5,4(r6)
  809dc0:	00bfff84 	movi	r2,-2
  809dc4:	2884703a 	and	r2,r5,r2
  809dc8:	1185883a 	add	r2,r2,r6
  809dcc:	10c00117 	ldw	r3,4(r2)
  809dd0:	18c0004c 	andi	r3,r3,1
  809dd4:	1807003a 	cmpeq	r3,r3,zero
  809dd8:	1800a326 	beq	r3,zero,80a068 <_realloc_r+0x3d0>
  809ddc:	2908703a 	and	r4,r5,r4
  809de0:	9929883a 	add	r20,r19,r4
  809de4:	a1c0a30e 	bge	r20,r7,80a074 <_realloc_r+0x3dc>
  809de8:	4080004c 	andi	r2,r8,1
  809dec:	1000551e 	bne	r2,zero,809f44 <_realloc_r+0x2ac>
  809df0:	80800017 	ldw	r2,0(r16)
  809df4:	80afc83a 	sub	r23,r16,r2
  809df8:	b8c00117 	ldw	r3,4(r23)
  809dfc:	00bfff04 	movi	r2,-4
  809e00:	1884703a 	and	r2,r3,r2
  809e04:	30002e26 	beq	r6,zero,809ec0 <_realloc_r+0x228>
  809e08:	3240b926 	beq	r6,r9,80a0f0 <_realloc_r+0x458>
  809e0c:	98a9883a 	add	r20,r19,r2
  809e10:	2509883a 	add	r4,r4,r20
  809e14:	d9000015 	stw	r4,0(sp)
  809e18:	21c02a16 	blt	r4,r7,809ec4 <_realloc_r+0x22c>
  809e1c:	30800317 	ldw	r2,12(r6)
  809e20:	30c00217 	ldw	r3,8(r6)
  809e24:	01400904 	movi	r5,36
  809e28:	99bfff04 	addi	r6,r19,-4
  809e2c:	18800315 	stw	r2,12(r3)
  809e30:	10c00215 	stw	r3,8(r2)
  809e34:	b9000317 	ldw	r4,12(r23)
  809e38:	b8800217 	ldw	r2,8(r23)
  809e3c:	b82b883a 	mov	r21,r23
  809e40:	bc000204 	addi	r16,r23,8
  809e44:	20800215 	stw	r2,8(r4)
  809e48:	11000315 	stw	r4,12(r2)
  809e4c:	2980e436 	bltu	r5,r6,80a1e0 <_realloc_r+0x548>
  809e50:	008004c4 	movi	r2,19
  809e54:	9009883a 	mov	r4,r18
  809e58:	8011883a 	mov	r8,r16
  809e5c:	11800f2e 	bgeu	r2,r6,809e9c <_realloc_r+0x204>
  809e60:	90800017 	ldw	r2,0(r18)
  809e64:	ba000404 	addi	r8,r23,16
  809e68:	91000204 	addi	r4,r18,8
  809e6c:	b8800215 	stw	r2,8(r23)
  809e70:	90c00117 	ldw	r3,4(r18)
  809e74:	008006c4 	movi	r2,27
  809e78:	b8c00315 	stw	r3,12(r23)
  809e7c:	1180072e 	bgeu	r2,r6,809e9c <_realloc_r+0x204>
  809e80:	90c00217 	ldw	r3,8(r18)
  809e84:	ba000604 	addi	r8,r23,24
  809e88:	91000404 	addi	r4,r18,16
  809e8c:	b8c00415 	stw	r3,16(r23)
  809e90:	90800317 	ldw	r2,12(r18)
  809e94:	b8800515 	stw	r2,20(r23)
  809e98:	3140e726 	beq	r6,r5,80a238 <_realloc_r+0x5a0>
  809e9c:	20800017 	ldw	r2,0(r4)
  809ea0:	dd000017 	ldw	r20,0(sp)
  809ea4:	b80f883a 	mov	r7,r23
  809ea8:	40800015 	stw	r2,0(r8)
  809eac:	20c00117 	ldw	r3,4(r4)
  809eb0:	40c00115 	stw	r3,4(r8)
  809eb4:	20800217 	ldw	r2,8(r4)
  809eb8:	40800215 	stw	r2,8(r8)
  809ebc:	003f9706 	br	809d1c <_realloc_r+0x84>
  809ec0:	98a9883a 	add	r20,r19,r2
  809ec4:	a1c01f16 	blt	r20,r7,809f44 <_realloc_r+0x2ac>
  809ec8:	b8c00317 	ldw	r3,12(r23)
  809ecc:	b8800217 	ldw	r2,8(r23)
  809ed0:	99bfff04 	addi	r6,r19,-4
  809ed4:	01400904 	movi	r5,36
  809ed8:	b82b883a 	mov	r21,r23
  809edc:	18800215 	stw	r2,8(r3)
  809ee0:	10c00315 	stw	r3,12(r2)
  809ee4:	bc000204 	addi	r16,r23,8
  809ee8:	2980c336 	bltu	r5,r6,80a1f8 <_realloc_r+0x560>
  809eec:	008004c4 	movi	r2,19
  809ef0:	9009883a 	mov	r4,r18
  809ef4:	8011883a 	mov	r8,r16
  809ef8:	11800f2e 	bgeu	r2,r6,809f38 <_realloc_r+0x2a0>
  809efc:	90800017 	ldw	r2,0(r18)
  809f00:	ba000404 	addi	r8,r23,16
  809f04:	91000204 	addi	r4,r18,8
  809f08:	b8800215 	stw	r2,8(r23)
  809f0c:	90c00117 	ldw	r3,4(r18)
  809f10:	008006c4 	movi	r2,27
  809f14:	b8c00315 	stw	r3,12(r23)
  809f18:	1180072e 	bgeu	r2,r6,809f38 <_realloc_r+0x2a0>
  809f1c:	90c00217 	ldw	r3,8(r18)
  809f20:	ba000604 	addi	r8,r23,24
  809f24:	91000404 	addi	r4,r18,16
  809f28:	b8c00415 	stw	r3,16(r23)
  809f2c:	90800317 	ldw	r2,12(r18)
  809f30:	b8800515 	stw	r2,20(r23)
  809f34:	3140c726 	beq	r6,r5,80a254 <_realloc_r+0x5bc>
  809f38:	20800017 	ldw	r2,0(r4)
  809f3c:	b80f883a 	mov	r7,r23
  809f40:	003fd906 	br	809ea8 <_realloc_r+0x210>
  809f44:	880b883a 	mov	r5,r17
  809f48:	b009883a 	mov	r4,r22
  809f4c:	08082680 	call	808268 <_malloc_r>
  809f50:	1023883a 	mov	r17,r2
  809f54:	10002526 	beq	r2,zero,809fec <_realloc_r+0x354>
  809f58:	80800117 	ldw	r2,4(r16)
  809f5c:	00ffff84 	movi	r3,-2
  809f60:	893ffe04 	addi	r4,r17,-8
  809f64:	10c4703a 	and	r2,r2,r3
  809f68:	8085883a 	add	r2,r16,r2
  809f6c:	20809526 	beq	r4,r2,80a1c4 <_realloc_r+0x52c>
  809f70:	99bfff04 	addi	r6,r19,-4
  809f74:	01c00904 	movi	r7,36
  809f78:	39804536 	bltu	r7,r6,80a090 <_realloc_r+0x3f8>
  809f7c:	008004c4 	movi	r2,19
  809f80:	9009883a 	mov	r4,r18
  809f84:	880b883a 	mov	r5,r17
  809f88:	11800f2e 	bgeu	r2,r6,809fc8 <_realloc_r+0x330>
  809f8c:	90800017 	ldw	r2,0(r18)
  809f90:	89400204 	addi	r5,r17,8
  809f94:	91000204 	addi	r4,r18,8
  809f98:	88800015 	stw	r2,0(r17)
  809f9c:	90c00117 	ldw	r3,4(r18)
  809fa0:	008006c4 	movi	r2,27
  809fa4:	88c00115 	stw	r3,4(r17)
  809fa8:	1180072e 	bgeu	r2,r6,809fc8 <_realloc_r+0x330>
  809fac:	90c00217 	ldw	r3,8(r18)
  809fb0:	89400404 	addi	r5,r17,16
  809fb4:	91000404 	addi	r4,r18,16
  809fb8:	88c00215 	stw	r3,8(r17)
  809fbc:	90800317 	ldw	r2,12(r18)
  809fc0:	88800315 	stw	r2,12(r17)
  809fc4:	31c09126 	beq	r6,r7,80a20c <_realloc_r+0x574>
  809fc8:	20800017 	ldw	r2,0(r4)
  809fcc:	28800015 	stw	r2,0(r5)
  809fd0:	20c00117 	ldw	r3,4(r4)
  809fd4:	28c00115 	stw	r3,4(r5)
  809fd8:	20800217 	ldw	r2,8(r4)
  809fdc:	28800215 	stw	r2,8(r5)
  809fe0:	900b883a 	mov	r5,r18
  809fe4:	b009883a 	mov	r4,r22
  809fe8:	08076e00 	call	8076e0 <_free_r>
  809fec:	b009883a 	mov	r4,r22
  809ff0:	080c6cc0 	call	80c6cc <__malloc_unlock>
  809ff4:	003f5e06 	br	809d70 <_realloc_r+0xd8>
  809ff8:	300b883a 	mov	r5,r6
  809ffc:	dfc00b17 	ldw	ra,44(sp)
  80a000:	df000a17 	ldw	fp,40(sp)
  80a004:	ddc00917 	ldw	r23,36(sp)
  80a008:	dd800817 	ldw	r22,32(sp)
  80a00c:	dd400717 	ldw	r21,28(sp)
  80a010:	dd000617 	ldw	r20,24(sp)
  80a014:	dcc00517 	ldw	r19,20(sp)
  80a018:	dc800417 	ldw	r18,16(sp)
  80a01c:	dc400317 	ldw	r17,12(sp)
  80a020:	dc000217 	ldw	r16,8(sp)
  80a024:	dec00c04 	addi	sp,sp,48
  80a028:	08082681 	jmpi	808268 <_malloc_r>
  80a02c:	38800117 	ldw	r2,4(r7)
  80a030:	e54b883a 	add	r5,fp,r21
  80a034:	31000054 	ori	r4,r6,1
  80a038:	1080004c 	andi	r2,r2,1
  80a03c:	1704b03a 	or	r2,r2,fp
  80a040:	38800115 	stw	r2,4(r7)
  80a044:	29000115 	stw	r4,4(r5)
  80a048:	2987883a 	add	r3,r5,r6
  80a04c:	18800117 	ldw	r2,4(r3)
  80a050:	29400204 	addi	r5,r5,8
  80a054:	b009883a 	mov	r4,r22
  80a058:	10800054 	ori	r2,r2,1
  80a05c:	18800115 	stw	r2,4(r3)
  80a060:	08076e00 	call	8076e0 <_free_r>
  80a064:	003f3806 	br	809d48 <_realloc_r+0xb0>
  80a068:	000d883a 	mov	r6,zero
  80a06c:	0009883a 	mov	r4,zero
  80a070:	003f5d06 	br	809de8 <_realloc_r+0x150>
  80a074:	30c00217 	ldw	r3,8(r6)
  80a078:	30800317 	ldw	r2,12(r6)
  80a07c:	800f883a 	mov	r7,r16
  80a080:	84000204 	addi	r16,r16,8
  80a084:	10c00215 	stw	r3,8(r2)
  80a088:	18800315 	stw	r2,12(r3)
  80a08c:	003f2306 	br	809d1c <_realloc_r+0x84>
  80a090:	8809883a 	mov	r4,r17
  80a094:	900b883a 	mov	r5,r18
  80a098:	0808b2c0 	call	808b2c <memmove>
  80a09c:	003fd006 	br	809fe0 <_realloc_r+0x348>
  80a0a0:	30800117 	ldw	r2,4(r6)
  80a0a4:	e0c00404 	addi	r3,fp,16
  80a0a8:	1108703a 	and	r4,r2,r4
  80a0ac:	9905883a 	add	r2,r19,r4
  80a0b0:	10ff4d16 	blt	r2,r3,809de8 <_realloc_r+0x150>
  80a0b4:	1705c83a 	sub	r2,r2,fp
  80a0b8:	870b883a 	add	r5,r16,fp
  80a0bc:	10800054 	ori	r2,r2,1
  80a0c0:	28800115 	stw	r2,4(r5)
  80a0c4:	80c00117 	ldw	r3,4(r16)
  80a0c8:	00802074 	movhi	r2,129
  80a0cc:	10886504 	addi	r2,r2,8596
  80a0d0:	b009883a 	mov	r4,r22
  80a0d4:	18c0004c 	andi	r3,r3,1
  80a0d8:	e0c6b03a 	or	r3,fp,r3
  80a0dc:	11400215 	stw	r5,8(r2)
  80a0e0:	80c00115 	stw	r3,4(r16)
  80a0e4:	080c6cc0 	call	80c6cc <__malloc_unlock>
  80a0e8:	84400204 	addi	r17,r16,8
  80a0ec:	003f2006 	br	809d70 <_realloc_r+0xd8>
  80a0f0:	98a9883a 	add	r20,r19,r2
  80a0f4:	2509883a 	add	r4,r4,r20
  80a0f8:	e0800404 	addi	r2,fp,16
  80a0fc:	d9000115 	stw	r4,4(sp)
  80a100:	20bf7016 	blt	r4,r2,809ec4 <_realloc_r+0x22c>
  80a104:	b8c00317 	ldw	r3,12(r23)
  80a108:	b8800217 	ldw	r2,8(r23)
  80a10c:	99bfff04 	addi	r6,r19,-4
  80a110:	01400904 	movi	r5,36
  80a114:	18800215 	stw	r2,8(r3)
  80a118:	10c00315 	stw	r3,12(r2)
  80a11c:	bc400204 	addi	r17,r23,8
  80a120:	29804136 	bltu	r5,r6,80a228 <_realloc_r+0x590>
  80a124:	008004c4 	movi	r2,19
  80a128:	9009883a 	mov	r4,r18
  80a12c:	880f883a 	mov	r7,r17
  80a130:	11800f2e 	bgeu	r2,r6,80a170 <_realloc_r+0x4d8>
  80a134:	90800017 	ldw	r2,0(r18)
  80a138:	b9c00404 	addi	r7,r23,16
  80a13c:	91000204 	addi	r4,r18,8
  80a140:	b8800215 	stw	r2,8(r23)
  80a144:	90c00117 	ldw	r3,4(r18)
  80a148:	008006c4 	movi	r2,27
  80a14c:	b8c00315 	stw	r3,12(r23)
  80a150:	1180072e 	bgeu	r2,r6,80a170 <_realloc_r+0x4d8>
  80a154:	90c00217 	ldw	r3,8(r18)
  80a158:	b9c00604 	addi	r7,r23,24
  80a15c:	91000404 	addi	r4,r18,16
  80a160:	b8c00415 	stw	r3,16(r23)
  80a164:	90800317 	ldw	r2,12(r18)
  80a168:	b8800515 	stw	r2,20(r23)
  80a16c:	31404026 	beq	r6,r5,80a270 <_realloc_r+0x5d8>
  80a170:	20800017 	ldw	r2,0(r4)
  80a174:	38800015 	stw	r2,0(r7)
  80a178:	20c00117 	ldw	r3,4(r4)
  80a17c:	38c00115 	stw	r3,4(r7)
  80a180:	20800217 	ldw	r2,8(r4)
  80a184:	38800215 	stw	r2,8(r7)
  80a188:	d8c00117 	ldw	r3,4(sp)
  80a18c:	bf0b883a 	add	r5,r23,fp
  80a190:	b009883a 	mov	r4,r22
  80a194:	1f05c83a 	sub	r2,r3,fp
  80a198:	10800054 	ori	r2,r2,1
  80a19c:	28800115 	stw	r2,4(r5)
  80a1a0:	b8c00117 	ldw	r3,4(r23)
  80a1a4:	00802074 	movhi	r2,129
  80a1a8:	10886504 	addi	r2,r2,8596
  80a1ac:	11400215 	stw	r5,8(r2)
  80a1b0:	18c0004c 	andi	r3,r3,1
  80a1b4:	e0c6b03a 	or	r3,fp,r3
  80a1b8:	b8c00115 	stw	r3,4(r23)
  80a1bc:	080c6cc0 	call	80c6cc <__malloc_unlock>
  80a1c0:	003eeb06 	br	809d70 <_realloc_r+0xd8>
  80a1c4:	20800117 	ldw	r2,4(r4)
  80a1c8:	00ffff04 	movi	r3,-4
  80a1cc:	800f883a 	mov	r7,r16
  80a1d0:	10c4703a 	and	r2,r2,r3
  80a1d4:	98a9883a 	add	r20,r19,r2
  80a1d8:	84000204 	addi	r16,r16,8
  80a1dc:	003ecf06 	br	809d1c <_realloc_r+0x84>
  80a1e0:	900b883a 	mov	r5,r18
  80a1e4:	8009883a 	mov	r4,r16
  80a1e8:	0808b2c0 	call	808b2c <memmove>
  80a1ec:	dd000017 	ldw	r20,0(sp)
  80a1f0:	b80f883a 	mov	r7,r23
  80a1f4:	003ec906 	br	809d1c <_realloc_r+0x84>
  80a1f8:	900b883a 	mov	r5,r18
  80a1fc:	8009883a 	mov	r4,r16
  80a200:	0808b2c0 	call	808b2c <memmove>
  80a204:	b80f883a 	mov	r7,r23
  80a208:	003ec406 	br	809d1c <_realloc_r+0x84>
  80a20c:	90c00417 	ldw	r3,16(r18)
  80a210:	89400604 	addi	r5,r17,24
  80a214:	91000604 	addi	r4,r18,24
  80a218:	88c00415 	stw	r3,16(r17)
  80a21c:	90800517 	ldw	r2,20(r18)
  80a220:	88800515 	stw	r2,20(r17)
  80a224:	003f6806 	br	809fc8 <_realloc_r+0x330>
  80a228:	900b883a 	mov	r5,r18
  80a22c:	8809883a 	mov	r4,r17
  80a230:	0808b2c0 	call	808b2c <memmove>
  80a234:	003fd406 	br	80a188 <_realloc_r+0x4f0>
  80a238:	90c00417 	ldw	r3,16(r18)
  80a23c:	91000604 	addi	r4,r18,24
  80a240:	ba000804 	addi	r8,r23,32
  80a244:	b8c00615 	stw	r3,24(r23)
  80a248:	90800517 	ldw	r2,20(r18)
  80a24c:	b8800715 	stw	r2,28(r23)
  80a250:	003f1206 	br	809e9c <_realloc_r+0x204>
  80a254:	90c00417 	ldw	r3,16(r18)
  80a258:	91000604 	addi	r4,r18,24
  80a25c:	ba000804 	addi	r8,r23,32
  80a260:	b8c00615 	stw	r3,24(r23)
  80a264:	90800517 	ldw	r2,20(r18)
  80a268:	b8800715 	stw	r2,28(r23)
  80a26c:	003f3206 	br	809f38 <_realloc_r+0x2a0>
  80a270:	90c00417 	ldw	r3,16(r18)
  80a274:	91000604 	addi	r4,r18,24
  80a278:	b9c00804 	addi	r7,r23,32
  80a27c:	b8c00615 	stw	r3,24(r23)
  80a280:	90800517 	ldw	r2,20(r18)
  80a284:	b8800715 	stw	r2,28(r23)
  80a288:	003fb906 	br	80a170 <_realloc_r+0x4d8>

0080a28c <__isinfd>:
  80a28c:	200d883a 	mov	r6,r4
  80a290:	0109c83a 	sub	r4,zero,r4
  80a294:	2188b03a 	or	r4,r4,r6
  80a298:	2008d7fa 	srli	r4,r4,31
  80a29c:	00a00034 	movhi	r2,32768
  80a2a0:	10bfffc4 	addi	r2,r2,-1
  80a2a4:	1144703a 	and	r2,r2,r5
  80a2a8:	2088b03a 	or	r4,r4,r2
  80a2ac:	009ffc34 	movhi	r2,32752
  80a2b0:	1105c83a 	sub	r2,r2,r4
  80a2b4:	0087c83a 	sub	r3,zero,r2
  80a2b8:	10c4b03a 	or	r2,r2,r3
  80a2bc:	1004d7fa 	srli	r2,r2,31
  80a2c0:	00c00044 	movi	r3,1
  80a2c4:	1885c83a 	sub	r2,r3,r2
  80a2c8:	f800283a 	ret

0080a2cc <__isnand>:
  80a2cc:	200d883a 	mov	r6,r4
  80a2d0:	0109c83a 	sub	r4,zero,r4
  80a2d4:	2188b03a 	or	r4,r4,r6
  80a2d8:	2008d7fa 	srli	r4,r4,31
  80a2dc:	00a00034 	movhi	r2,32768
  80a2e0:	10bfffc4 	addi	r2,r2,-1
  80a2e4:	1144703a 	and	r2,r2,r5
  80a2e8:	2088b03a 	or	r4,r4,r2
  80a2ec:	009ffc34 	movhi	r2,32752
  80a2f0:	1105c83a 	sub	r2,r2,r4
  80a2f4:	1004d7fa 	srli	r2,r2,31
  80a2f8:	f800283a 	ret

0080a2fc <_sbrk_r>:
  80a2fc:	defffd04 	addi	sp,sp,-12
  80a300:	dc000015 	stw	r16,0(sp)
  80a304:	04002074 	movhi	r16,129
  80a308:	84156b04 	addi	r16,r16,21932
  80a30c:	dc400115 	stw	r17,4(sp)
  80a310:	80000015 	stw	zero,0(r16)
  80a314:	2023883a 	mov	r17,r4
  80a318:	2809883a 	mov	r4,r5
  80a31c:	dfc00215 	stw	ra,8(sp)
  80a320:	080c8cc0 	call	80c8cc <sbrk>
  80a324:	1007883a 	mov	r3,r2
  80a328:	00bfffc4 	movi	r2,-1
  80a32c:	18800626 	beq	r3,r2,80a348 <_sbrk_r+0x4c>
  80a330:	1805883a 	mov	r2,r3
  80a334:	dfc00217 	ldw	ra,8(sp)
  80a338:	dc400117 	ldw	r17,4(sp)
  80a33c:	dc000017 	ldw	r16,0(sp)
  80a340:	dec00304 	addi	sp,sp,12
  80a344:	f800283a 	ret
  80a348:	80800017 	ldw	r2,0(r16)
  80a34c:	103ff826 	beq	r2,zero,80a330 <_sbrk_r+0x34>
  80a350:	88800015 	stw	r2,0(r17)
  80a354:	1805883a 	mov	r2,r3
  80a358:	dfc00217 	ldw	ra,8(sp)
  80a35c:	dc400117 	ldw	r17,4(sp)
  80a360:	dc000017 	ldw	r16,0(sp)
  80a364:	dec00304 	addi	sp,sp,12
  80a368:	f800283a 	ret

0080a36c <__sclose>:
  80a36c:	2940038f 	ldh	r5,14(r5)
  80a370:	080a6a01 	jmpi	80a6a0 <_close_r>

0080a374 <__sseek>:
  80a374:	defffe04 	addi	sp,sp,-8
  80a378:	dc000015 	stw	r16,0(sp)
  80a37c:	2821883a 	mov	r16,r5
  80a380:	2940038f 	ldh	r5,14(r5)
  80a384:	dfc00115 	stw	ra,4(sp)
  80a388:	080a9180 	call	80a918 <_lseek_r>
  80a38c:	1007883a 	mov	r3,r2
  80a390:	00bfffc4 	movi	r2,-1
  80a394:	18800926 	beq	r3,r2,80a3bc <__sseek+0x48>
  80a398:	8080030b 	ldhu	r2,12(r16)
  80a39c:	80c01415 	stw	r3,80(r16)
  80a3a0:	10840014 	ori	r2,r2,4096
  80a3a4:	8080030d 	sth	r2,12(r16)
  80a3a8:	1805883a 	mov	r2,r3
  80a3ac:	dfc00117 	ldw	ra,4(sp)
  80a3b0:	dc000017 	ldw	r16,0(sp)
  80a3b4:	dec00204 	addi	sp,sp,8
  80a3b8:	f800283a 	ret
  80a3bc:	8080030b 	ldhu	r2,12(r16)
  80a3c0:	10bbffcc 	andi	r2,r2,61439
  80a3c4:	8080030d 	sth	r2,12(r16)
  80a3c8:	1805883a 	mov	r2,r3
  80a3cc:	dfc00117 	ldw	ra,4(sp)
  80a3d0:	dc000017 	ldw	r16,0(sp)
  80a3d4:	dec00204 	addi	sp,sp,8
  80a3d8:	f800283a 	ret

0080a3dc <__swrite>:
  80a3dc:	2880030b 	ldhu	r2,12(r5)
  80a3e0:	defffb04 	addi	sp,sp,-20
  80a3e4:	dcc00315 	stw	r19,12(sp)
  80a3e8:	1080400c 	andi	r2,r2,256
  80a3ec:	dc800215 	stw	r18,8(sp)
  80a3f0:	dc400115 	stw	r17,4(sp)
  80a3f4:	dc000015 	stw	r16,0(sp)
  80a3f8:	3027883a 	mov	r19,r6
  80a3fc:	3825883a 	mov	r18,r7
  80a400:	dfc00415 	stw	ra,16(sp)
  80a404:	2821883a 	mov	r16,r5
  80a408:	000d883a 	mov	r6,zero
  80a40c:	01c00084 	movi	r7,2
  80a410:	2023883a 	mov	r17,r4
  80a414:	10000226 	beq	r2,zero,80a420 <__swrite+0x44>
  80a418:	2940038f 	ldh	r5,14(r5)
  80a41c:	080a9180 	call	80a918 <_lseek_r>
  80a420:	8080030b 	ldhu	r2,12(r16)
  80a424:	8140038f 	ldh	r5,14(r16)
  80a428:	8809883a 	mov	r4,r17
  80a42c:	10bbffcc 	andi	r2,r2,61439
  80a430:	980d883a 	mov	r6,r19
  80a434:	900f883a 	mov	r7,r18
  80a438:	8080030d 	sth	r2,12(r16)
  80a43c:	dfc00417 	ldw	ra,16(sp)
  80a440:	dcc00317 	ldw	r19,12(sp)
  80a444:	dc800217 	ldw	r18,8(sp)
  80a448:	dc400117 	ldw	r17,4(sp)
  80a44c:	dc000017 	ldw	r16,0(sp)
  80a450:	dec00504 	addi	sp,sp,20
  80a454:	080a5741 	jmpi	80a574 <_write_r>

0080a458 <__sread>:
  80a458:	defffe04 	addi	sp,sp,-8
  80a45c:	dc000015 	stw	r16,0(sp)
  80a460:	2821883a 	mov	r16,r5
  80a464:	2940038f 	ldh	r5,14(r5)
  80a468:	dfc00115 	stw	ra,4(sp)
  80a46c:	080a9900 	call	80a990 <_read_r>
  80a470:	1007883a 	mov	r3,r2
  80a474:	10000816 	blt	r2,zero,80a498 <__sread+0x40>
  80a478:	80801417 	ldw	r2,80(r16)
  80a47c:	10c5883a 	add	r2,r2,r3
  80a480:	80801415 	stw	r2,80(r16)
  80a484:	1805883a 	mov	r2,r3
  80a488:	dfc00117 	ldw	ra,4(sp)
  80a48c:	dc000017 	ldw	r16,0(sp)
  80a490:	dec00204 	addi	sp,sp,8
  80a494:	f800283a 	ret
  80a498:	8080030b 	ldhu	r2,12(r16)
  80a49c:	10bbffcc 	andi	r2,r2,61439
  80a4a0:	8080030d 	sth	r2,12(r16)
  80a4a4:	1805883a 	mov	r2,r3
  80a4a8:	dfc00117 	ldw	ra,4(sp)
  80a4ac:	dc000017 	ldw	r16,0(sp)
  80a4b0:	dec00204 	addi	sp,sp,8
  80a4b4:	f800283a 	ret

0080a4b8 <strcmp>:
  80a4b8:	2144b03a 	or	r2,r4,r5
  80a4bc:	108000cc 	andi	r2,r2,3
  80a4c0:	10001d1e 	bne	r2,zero,80a538 <strcmp+0x80>
  80a4c4:	200f883a 	mov	r7,r4
  80a4c8:	28800017 	ldw	r2,0(r5)
  80a4cc:	21000017 	ldw	r4,0(r4)
  80a4d0:	280d883a 	mov	r6,r5
  80a4d4:	2080161e 	bne	r4,r2,80a530 <strcmp+0x78>
  80a4d8:	023fbff4 	movhi	r8,65279
  80a4dc:	423fbfc4 	addi	r8,r8,-257
  80a4e0:	2207883a 	add	r3,r4,r8
  80a4e4:	01602074 	movhi	r5,32897
  80a4e8:	29602004 	addi	r5,r5,-32640
  80a4ec:	1946703a 	and	r3,r3,r5
  80a4f0:	0104303a 	nor	r2,zero,r4
  80a4f4:	10c4703a 	and	r2,r2,r3
  80a4f8:	10001c1e 	bne	r2,zero,80a56c <strcmp+0xb4>
  80a4fc:	4013883a 	mov	r9,r8
  80a500:	2811883a 	mov	r8,r5
  80a504:	00000106 	br	80a50c <strcmp+0x54>
  80a508:	1800181e 	bne	r3,zero,80a56c <strcmp+0xb4>
  80a50c:	39c00104 	addi	r7,r7,4
  80a510:	39000017 	ldw	r4,0(r7)
  80a514:	31800104 	addi	r6,r6,4
  80a518:	31400017 	ldw	r5,0(r6)
  80a51c:	2245883a 	add	r2,r4,r9
  80a520:	1204703a 	and	r2,r2,r8
  80a524:	0106303a 	nor	r3,zero,r4
  80a528:	1886703a 	and	r3,r3,r2
  80a52c:	217ff626 	beq	r4,r5,80a508 <strcmp+0x50>
  80a530:	3809883a 	mov	r4,r7
  80a534:	300b883a 	mov	r5,r6
  80a538:	20c00007 	ldb	r3,0(r4)
  80a53c:	1800051e 	bne	r3,zero,80a554 <strcmp+0x9c>
  80a540:	00000606 	br	80a55c <strcmp+0xa4>
  80a544:	21000044 	addi	r4,r4,1
  80a548:	20c00007 	ldb	r3,0(r4)
  80a54c:	29400044 	addi	r5,r5,1
  80a550:	18000226 	beq	r3,zero,80a55c <strcmp+0xa4>
  80a554:	28800007 	ldb	r2,0(r5)
  80a558:	18bffa26 	beq	r3,r2,80a544 <strcmp+0x8c>
  80a55c:	20c00003 	ldbu	r3,0(r4)
  80a560:	28800003 	ldbu	r2,0(r5)
  80a564:	1885c83a 	sub	r2,r3,r2
  80a568:	f800283a 	ret
  80a56c:	0005883a 	mov	r2,zero
  80a570:	f800283a 	ret

0080a574 <_write_r>:
  80a574:	defffd04 	addi	sp,sp,-12
  80a578:	dc000015 	stw	r16,0(sp)
  80a57c:	04002074 	movhi	r16,129
  80a580:	84156b04 	addi	r16,r16,21932
  80a584:	dc400115 	stw	r17,4(sp)
  80a588:	80000015 	stw	zero,0(r16)
  80a58c:	2023883a 	mov	r17,r4
  80a590:	2809883a 	mov	r4,r5
  80a594:	300b883a 	mov	r5,r6
  80a598:	380d883a 	mov	r6,r7
  80a59c:	dfc00215 	stw	ra,8(sp)
  80a5a0:	080c9880 	call	80c988 <write>
  80a5a4:	1007883a 	mov	r3,r2
  80a5a8:	00bfffc4 	movi	r2,-1
  80a5ac:	18800626 	beq	r3,r2,80a5c8 <_write_r+0x54>
  80a5b0:	1805883a 	mov	r2,r3
  80a5b4:	dfc00217 	ldw	ra,8(sp)
  80a5b8:	dc400117 	ldw	r17,4(sp)
  80a5bc:	dc000017 	ldw	r16,0(sp)
  80a5c0:	dec00304 	addi	sp,sp,12
  80a5c4:	f800283a 	ret
  80a5c8:	80800017 	ldw	r2,0(r16)
  80a5cc:	103ff826 	beq	r2,zero,80a5b0 <_write_r+0x3c>
  80a5d0:	88800015 	stw	r2,0(r17)
  80a5d4:	1805883a 	mov	r2,r3
  80a5d8:	dfc00217 	ldw	ra,8(sp)
  80a5dc:	dc400117 	ldw	r17,4(sp)
  80a5e0:	dc000017 	ldw	r16,0(sp)
  80a5e4:	dec00304 	addi	sp,sp,12
  80a5e8:	f800283a 	ret

0080a5ec <_calloc_r>:
  80a5ec:	298b383a 	mul	r5,r5,r6
  80a5f0:	defffe04 	addi	sp,sp,-8
  80a5f4:	dc000015 	stw	r16,0(sp)
  80a5f8:	dfc00115 	stw	ra,4(sp)
  80a5fc:	08082680 	call	808268 <_malloc_r>
  80a600:	1021883a 	mov	r16,r2
  80a604:	01c00904 	movi	r7,36
  80a608:	10000d26 	beq	r2,zero,80a640 <_calloc_r+0x54>
  80a60c:	10ffff17 	ldw	r3,-4(r2)
  80a610:	1009883a 	mov	r4,r2
  80a614:	00bfff04 	movi	r2,-4
  80a618:	1886703a 	and	r3,r3,r2
  80a61c:	1887883a 	add	r3,r3,r2
  80a620:	180d883a 	mov	r6,r3
  80a624:	000b883a 	mov	r5,zero
  80a628:	38c01736 	bltu	r7,r3,80a688 <_calloc_r+0x9c>
  80a62c:	008004c4 	movi	r2,19
  80a630:	10c00836 	bltu	r2,r3,80a654 <_calloc_r+0x68>
  80a634:	20000215 	stw	zero,8(r4)
  80a638:	20000015 	stw	zero,0(r4)
  80a63c:	20000115 	stw	zero,4(r4)
  80a640:	8005883a 	mov	r2,r16
  80a644:	dfc00117 	ldw	ra,4(sp)
  80a648:	dc000017 	ldw	r16,0(sp)
  80a64c:	dec00204 	addi	sp,sp,8
  80a650:	f800283a 	ret
  80a654:	008006c4 	movi	r2,27
  80a658:	80000015 	stw	zero,0(r16)
  80a65c:	80000115 	stw	zero,4(r16)
  80a660:	81000204 	addi	r4,r16,8
  80a664:	10fff32e 	bgeu	r2,r3,80a634 <_calloc_r+0x48>
  80a668:	80000215 	stw	zero,8(r16)
  80a66c:	80000315 	stw	zero,12(r16)
  80a670:	81000404 	addi	r4,r16,16
  80a674:	19ffef1e 	bne	r3,r7,80a634 <_calloc_r+0x48>
  80a678:	81000604 	addi	r4,r16,24
  80a67c:	80000415 	stw	zero,16(r16)
  80a680:	80000515 	stw	zero,20(r16)
  80a684:	003feb06 	br	80a634 <_calloc_r+0x48>
  80a688:	0808c0c0 	call	808c0c <memset>
  80a68c:	8005883a 	mov	r2,r16
  80a690:	dfc00117 	ldw	ra,4(sp)
  80a694:	dc000017 	ldw	r16,0(sp)
  80a698:	dec00204 	addi	sp,sp,8
  80a69c:	f800283a 	ret

0080a6a0 <_close_r>:
  80a6a0:	defffd04 	addi	sp,sp,-12
  80a6a4:	dc000015 	stw	r16,0(sp)
  80a6a8:	04002074 	movhi	r16,129
  80a6ac:	84156b04 	addi	r16,r16,21932
  80a6b0:	dc400115 	stw	r17,4(sp)
  80a6b4:	80000015 	stw	zero,0(r16)
  80a6b8:	2023883a 	mov	r17,r4
  80a6bc:	2809883a 	mov	r4,r5
  80a6c0:	dfc00215 	stw	ra,8(sp)
  80a6c4:	080c0280 	call	80c028 <close>
  80a6c8:	1007883a 	mov	r3,r2
  80a6cc:	00bfffc4 	movi	r2,-1
  80a6d0:	18800626 	beq	r3,r2,80a6ec <_close_r+0x4c>
  80a6d4:	1805883a 	mov	r2,r3
  80a6d8:	dfc00217 	ldw	ra,8(sp)
  80a6dc:	dc400117 	ldw	r17,4(sp)
  80a6e0:	dc000017 	ldw	r16,0(sp)
  80a6e4:	dec00304 	addi	sp,sp,12
  80a6e8:	f800283a 	ret
  80a6ec:	80800017 	ldw	r2,0(r16)
  80a6f0:	103ff826 	beq	r2,zero,80a6d4 <_close_r+0x34>
  80a6f4:	88800015 	stw	r2,0(r17)
  80a6f8:	1805883a 	mov	r2,r3
  80a6fc:	dfc00217 	ldw	ra,8(sp)
  80a700:	dc400117 	ldw	r17,4(sp)
  80a704:	dc000017 	ldw	r16,0(sp)
  80a708:	dec00304 	addi	sp,sp,12
  80a70c:	f800283a 	ret

0080a710 <_fclose_r>:
  80a710:	defffc04 	addi	sp,sp,-16
  80a714:	dc400115 	stw	r17,4(sp)
  80a718:	dc000015 	stw	r16,0(sp)
  80a71c:	dfc00315 	stw	ra,12(sp)
  80a720:	dc800215 	stw	r18,8(sp)
  80a724:	2821883a 	mov	r16,r5
  80a728:	2023883a 	mov	r17,r4
  80a72c:	28002926 	beq	r5,zero,80a7d4 <_fclose_r+0xc4>
  80a730:	080734c0 	call	80734c <__sfp_lock_acquire>
  80a734:	88000226 	beq	r17,zero,80a740 <_fclose_r+0x30>
  80a738:	88800e17 	ldw	r2,56(r17)
  80a73c:	10002d26 	beq	r2,zero,80a7f4 <_fclose_r+0xe4>
  80a740:	8080030f 	ldh	r2,12(r16)
  80a744:	10002226 	beq	r2,zero,80a7d0 <_fclose_r+0xc0>
  80a748:	8809883a 	mov	r4,r17
  80a74c:	800b883a 	mov	r5,r16
  80a750:	08070c40 	call	8070c4 <_fflush_r>
  80a754:	1025883a 	mov	r18,r2
  80a758:	80800b17 	ldw	r2,44(r16)
  80a75c:	10000426 	beq	r2,zero,80a770 <_fclose_r+0x60>
  80a760:	81400717 	ldw	r5,28(r16)
  80a764:	8809883a 	mov	r4,r17
  80a768:	103ee83a 	callr	r2
  80a76c:	10002a16 	blt	r2,zero,80a818 <_fclose_r+0x108>
  80a770:	8080030b 	ldhu	r2,12(r16)
  80a774:	1080200c 	andi	r2,r2,128
  80a778:	1000231e 	bne	r2,zero,80a808 <_fclose_r+0xf8>
  80a77c:	81400c17 	ldw	r5,48(r16)
  80a780:	28000526 	beq	r5,zero,80a798 <_fclose_r+0x88>
  80a784:	80801004 	addi	r2,r16,64
  80a788:	28800226 	beq	r5,r2,80a794 <_fclose_r+0x84>
  80a78c:	8809883a 	mov	r4,r17
  80a790:	08076e00 	call	8076e0 <_free_r>
  80a794:	80000c15 	stw	zero,48(r16)
  80a798:	81401117 	ldw	r5,68(r16)
  80a79c:	28000326 	beq	r5,zero,80a7ac <_fclose_r+0x9c>
  80a7a0:	8809883a 	mov	r4,r17
  80a7a4:	08076e00 	call	8076e0 <_free_r>
  80a7a8:	80001115 	stw	zero,68(r16)
  80a7ac:	8000030d 	sth	zero,12(r16)
  80a7b0:	08073500 	call	807350 <__sfp_lock_release>
  80a7b4:	9005883a 	mov	r2,r18
  80a7b8:	dfc00317 	ldw	ra,12(sp)
  80a7bc:	dc800217 	ldw	r18,8(sp)
  80a7c0:	dc400117 	ldw	r17,4(sp)
  80a7c4:	dc000017 	ldw	r16,0(sp)
  80a7c8:	dec00404 	addi	sp,sp,16
  80a7cc:	f800283a 	ret
  80a7d0:	08073500 	call	807350 <__sfp_lock_release>
  80a7d4:	0025883a 	mov	r18,zero
  80a7d8:	9005883a 	mov	r2,r18
  80a7dc:	dfc00317 	ldw	ra,12(sp)
  80a7e0:	dc800217 	ldw	r18,8(sp)
  80a7e4:	dc400117 	ldw	r17,4(sp)
  80a7e8:	dc000017 	ldw	r16,0(sp)
  80a7ec:	dec00404 	addi	sp,sp,16
  80a7f0:	f800283a 	ret
  80a7f4:	8809883a 	mov	r4,r17
  80a7f8:	080735c0 	call	80735c <__sinit>
  80a7fc:	8080030f 	ldh	r2,12(r16)
  80a800:	103fd11e 	bne	r2,zero,80a748 <_fclose_r+0x38>
  80a804:	003ff206 	br	80a7d0 <_fclose_r+0xc0>
  80a808:	81400417 	ldw	r5,16(r16)
  80a80c:	8809883a 	mov	r4,r17
  80a810:	08076e00 	call	8076e0 <_free_r>
  80a814:	003fd906 	br	80a77c <_fclose_r+0x6c>
  80a818:	04bfffc4 	movi	r18,-1
  80a81c:	003fd406 	br	80a770 <_fclose_r+0x60>

0080a820 <fclose>:
  80a820:	00802074 	movhi	r2,129
  80a824:	108e4f04 	addi	r2,r2,14652
  80a828:	200b883a 	mov	r5,r4
  80a82c:	11000017 	ldw	r4,0(r2)
  80a830:	080a7101 	jmpi	80a710 <_fclose_r>

0080a834 <_fstat_r>:
  80a834:	defffd04 	addi	sp,sp,-12
  80a838:	dc000015 	stw	r16,0(sp)
  80a83c:	04002074 	movhi	r16,129
  80a840:	84156b04 	addi	r16,r16,21932
  80a844:	dc400115 	stw	r17,4(sp)
  80a848:	80000015 	stw	zero,0(r16)
  80a84c:	2023883a 	mov	r17,r4
  80a850:	2809883a 	mov	r4,r5
  80a854:	300b883a 	mov	r5,r6
  80a858:	dfc00215 	stw	ra,8(sp)
  80a85c:	080c1b00 	call	80c1b0 <fstat>
  80a860:	1007883a 	mov	r3,r2
  80a864:	00bfffc4 	movi	r2,-1
  80a868:	18800626 	beq	r3,r2,80a884 <_fstat_r+0x50>
  80a86c:	1805883a 	mov	r2,r3
  80a870:	dfc00217 	ldw	ra,8(sp)
  80a874:	dc400117 	ldw	r17,4(sp)
  80a878:	dc000017 	ldw	r16,0(sp)
  80a87c:	dec00304 	addi	sp,sp,12
  80a880:	f800283a 	ret
  80a884:	80800017 	ldw	r2,0(r16)
  80a888:	103ff826 	beq	r2,zero,80a86c <_fstat_r+0x38>
  80a88c:	88800015 	stw	r2,0(r17)
  80a890:	1805883a 	mov	r2,r3
  80a894:	dfc00217 	ldw	ra,8(sp)
  80a898:	dc400117 	ldw	r17,4(sp)
  80a89c:	dc000017 	ldw	r16,0(sp)
  80a8a0:	dec00304 	addi	sp,sp,12
  80a8a4:	f800283a 	ret

0080a8a8 <_isatty_r>:
  80a8a8:	defffd04 	addi	sp,sp,-12
  80a8ac:	dc000015 	stw	r16,0(sp)
  80a8b0:	04002074 	movhi	r16,129
  80a8b4:	84156b04 	addi	r16,r16,21932
  80a8b8:	dc400115 	stw	r17,4(sp)
  80a8bc:	80000015 	stw	zero,0(r16)
  80a8c0:	2023883a 	mov	r17,r4
  80a8c4:	2809883a 	mov	r4,r5
  80a8c8:	dfc00215 	stw	ra,8(sp)
  80a8cc:	080c2e40 	call	80c2e4 <isatty>
  80a8d0:	1007883a 	mov	r3,r2
  80a8d4:	00bfffc4 	movi	r2,-1
  80a8d8:	18800626 	beq	r3,r2,80a8f4 <_isatty_r+0x4c>
  80a8dc:	1805883a 	mov	r2,r3
  80a8e0:	dfc00217 	ldw	ra,8(sp)
  80a8e4:	dc400117 	ldw	r17,4(sp)
  80a8e8:	dc000017 	ldw	r16,0(sp)
  80a8ec:	dec00304 	addi	sp,sp,12
  80a8f0:	f800283a 	ret
  80a8f4:	80800017 	ldw	r2,0(r16)
  80a8f8:	103ff826 	beq	r2,zero,80a8dc <_isatty_r+0x34>
  80a8fc:	88800015 	stw	r2,0(r17)
  80a900:	1805883a 	mov	r2,r3
  80a904:	dfc00217 	ldw	ra,8(sp)
  80a908:	dc400117 	ldw	r17,4(sp)
  80a90c:	dc000017 	ldw	r16,0(sp)
  80a910:	dec00304 	addi	sp,sp,12
  80a914:	f800283a 	ret

0080a918 <_lseek_r>:
  80a918:	defffd04 	addi	sp,sp,-12
  80a91c:	dc000015 	stw	r16,0(sp)
  80a920:	04002074 	movhi	r16,129
  80a924:	84156b04 	addi	r16,r16,21932
  80a928:	dc400115 	stw	r17,4(sp)
  80a92c:	80000015 	stw	zero,0(r16)
  80a930:	2023883a 	mov	r17,r4
  80a934:	2809883a 	mov	r4,r5
  80a938:	300b883a 	mov	r5,r6
  80a93c:	380d883a 	mov	r6,r7
  80a940:	dfc00215 	stw	ra,8(sp)
  80a944:	080c4f00 	call	80c4f0 <lseek>
  80a948:	1007883a 	mov	r3,r2
  80a94c:	00bfffc4 	movi	r2,-1
  80a950:	18800626 	beq	r3,r2,80a96c <_lseek_r+0x54>
  80a954:	1805883a 	mov	r2,r3
  80a958:	dfc00217 	ldw	ra,8(sp)
  80a95c:	dc400117 	ldw	r17,4(sp)
  80a960:	dc000017 	ldw	r16,0(sp)
  80a964:	dec00304 	addi	sp,sp,12
  80a968:	f800283a 	ret
  80a96c:	80800017 	ldw	r2,0(r16)
  80a970:	103ff826 	beq	r2,zero,80a954 <_lseek_r+0x3c>
  80a974:	88800015 	stw	r2,0(r17)
  80a978:	1805883a 	mov	r2,r3
  80a97c:	dfc00217 	ldw	ra,8(sp)
  80a980:	dc400117 	ldw	r17,4(sp)
  80a984:	dc000017 	ldw	r16,0(sp)
  80a988:	dec00304 	addi	sp,sp,12
  80a98c:	f800283a 	ret

0080a990 <_read_r>:
  80a990:	defffd04 	addi	sp,sp,-12
  80a994:	dc000015 	stw	r16,0(sp)
  80a998:	04002074 	movhi	r16,129
  80a99c:	84156b04 	addi	r16,r16,21932
  80a9a0:	dc400115 	stw	r17,4(sp)
  80a9a4:	80000015 	stw	zero,0(r16)
  80a9a8:	2023883a 	mov	r17,r4
  80a9ac:	2809883a 	mov	r4,r5
  80a9b0:	300b883a 	mov	r5,r6
  80a9b4:	380d883a 	mov	r6,r7
  80a9b8:	dfc00215 	stw	ra,8(sp)
  80a9bc:	080c6ec0 	call	80c6ec <read>
  80a9c0:	1007883a 	mov	r3,r2
  80a9c4:	00bfffc4 	movi	r2,-1
  80a9c8:	18800626 	beq	r3,r2,80a9e4 <_read_r+0x54>
  80a9cc:	1805883a 	mov	r2,r3
  80a9d0:	dfc00217 	ldw	ra,8(sp)
  80a9d4:	dc400117 	ldw	r17,4(sp)
  80a9d8:	dc000017 	ldw	r16,0(sp)
  80a9dc:	dec00304 	addi	sp,sp,12
  80a9e0:	f800283a 	ret
  80a9e4:	80800017 	ldw	r2,0(r16)
  80a9e8:	103ff826 	beq	r2,zero,80a9cc <_read_r+0x3c>
  80a9ec:	88800015 	stw	r2,0(r17)
  80a9f0:	1805883a 	mov	r2,r3
  80a9f4:	dfc00217 	ldw	ra,8(sp)
  80a9f8:	dc400117 	ldw	r17,4(sp)
  80a9fc:	dc000017 	ldw	r16,0(sp)
  80aa00:	dec00304 	addi	sp,sp,12
  80aa04:	f800283a 	ret

0080aa08 <__udivdi3>:
  80aa08:	defff004 	addi	sp,sp,-64
  80aa0c:	2005883a 	mov	r2,r4
  80aa10:	3011883a 	mov	r8,r6
  80aa14:	df000e15 	stw	fp,56(sp)
  80aa18:	dd000a15 	stw	r20,40(sp)
  80aa1c:	dc000615 	stw	r16,24(sp)
  80aa20:	dfc00f15 	stw	ra,60(sp)
  80aa24:	ddc00d15 	stw	r23,52(sp)
  80aa28:	dd800c15 	stw	r22,48(sp)
  80aa2c:	dd400b15 	stw	r21,44(sp)
  80aa30:	dcc00915 	stw	r19,36(sp)
  80aa34:	dc800815 	stw	r18,32(sp)
  80aa38:	dc400715 	stw	r17,28(sp)
  80aa3c:	4021883a 	mov	r16,r8
  80aa40:	1039883a 	mov	fp,r2
  80aa44:	2829883a 	mov	r20,r5
  80aa48:	38003b1e 	bne	r7,zero,80ab38 <__udivdi3+0x130>
  80aa4c:	2a005c36 	bltu	r5,r8,80abc0 <__udivdi3+0x1b8>
  80aa50:	4000a626 	beq	r8,zero,80acec <__udivdi3+0x2e4>
  80aa54:	00bfffd4 	movui	r2,65535
  80aa58:	14009e36 	bltu	r2,r16,80acd4 <__udivdi3+0x2cc>
  80aa5c:	00803fc4 	movi	r2,255
  80aa60:	14013d36 	bltu	r2,r16,80af58 <__udivdi3+0x550>
  80aa64:	000b883a 	mov	r5,zero
  80aa68:	0005883a 	mov	r2,zero
  80aa6c:	8084d83a 	srl	r2,r16,r2
  80aa70:	01002074 	movhi	r4,129
  80aa74:	21064c04 	addi	r4,r4,6448
  80aa78:	01800804 	movi	r6,32
  80aa7c:	1105883a 	add	r2,r2,r4
  80aa80:	10c00003 	ldbu	r3,0(r2)
  80aa84:	28c7883a 	add	r3,r5,r3
  80aa88:	30edc83a 	sub	r22,r6,r3
  80aa8c:	b000ee1e 	bne	r22,zero,80ae48 <__udivdi3+0x440>
  80aa90:	802ad43a 	srli	r21,r16,16
  80aa94:	00800044 	movi	r2,1
  80aa98:	a423c83a 	sub	r17,r20,r16
  80aa9c:	85ffffcc 	andi	r23,r16,65535
  80aaa0:	d8800315 	stw	r2,12(sp)
  80aaa4:	8809883a 	mov	r4,r17
  80aaa8:	a80b883a 	mov	r5,r21
  80aaac:	080c0180 	call	80c018 <__udivsi3>
  80aab0:	8809883a 	mov	r4,r17
  80aab4:	a80b883a 	mov	r5,r21
  80aab8:	102d883a 	mov	r22,r2
  80aabc:	080c0200 	call	80c020 <__umodsi3>
  80aac0:	1004943a 	slli	r2,r2,16
  80aac4:	e006d43a 	srli	r3,fp,16
  80aac8:	bda3383a 	mul	r17,r23,r22
  80aacc:	10c4b03a 	or	r2,r2,r3
  80aad0:	1440042e 	bgeu	r2,r17,80aae4 <__udivdi3+0xdc>
  80aad4:	1405883a 	add	r2,r2,r16
  80aad8:	b5bfffc4 	addi	r22,r22,-1
  80aadc:	14000136 	bltu	r2,r16,80aae4 <__udivdi3+0xdc>
  80aae0:	14413d36 	bltu	r2,r17,80afd8 <__udivdi3+0x5d0>
  80aae4:	1463c83a 	sub	r17,r2,r17
  80aae8:	8809883a 	mov	r4,r17
  80aaec:	a80b883a 	mov	r5,r21
  80aaf0:	080c0180 	call	80c018 <__udivsi3>
  80aaf4:	8809883a 	mov	r4,r17
  80aaf8:	a80b883a 	mov	r5,r21
  80aafc:	1029883a 	mov	r20,r2
  80ab00:	080c0200 	call	80c020 <__umodsi3>
  80ab04:	1004943a 	slli	r2,r2,16
  80ab08:	bd09383a 	mul	r4,r23,r20
  80ab0c:	e0ffffcc 	andi	r3,fp,65535
  80ab10:	10c4b03a 	or	r2,r2,r3
  80ab14:	1100042e 	bgeu	r2,r4,80ab28 <__udivdi3+0x120>
  80ab18:	8085883a 	add	r2,r16,r2
  80ab1c:	a53fffc4 	addi	r20,r20,-1
  80ab20:	14000136 	bltu	r2,r16,80ab28 <__udivdi3+0x120>
  80ab24:	11012036 	bltu	r2,r4,80afa8 <__udivdi3+0x5a0>
  80ab28:	b004943a 	slli	r2,r22,16
  80ab2c:	d9000317 	ldw	r4,12(sp)
  80ab30:	a084b03a 	or	r2,r20,r2
  80ab34:	00001506 	br	80ab8c <__udivdi3+0x184>
  80ab38:	380d883a 	mov	r6,r7
  80ab3c:	29c06236 	bltu	r5,r7,80acc8 <__udivdi3+0x2c0>
  80ab40:	00bfffd4 	movui	r2,65535
  80ab44:	11c05a36 	bltu	r2,r7,80acb0 <__udivdi3+0x2a8>
  80ab48:	00803fc4 	movi	r2,255
  80ab4c:	11c0fc36 	bltu	r2,r7,80af40 <__udivdi3+0x538>
  80ab50:	000b883a 	mov	r5,zero
  80ab54:	0005883a 	mov	r2,zero
  80ab58:	3084d83a 	srl	r2,r6,r2
  80ab5c:	01002074 	movhi	r4,129
  80ab60:	21064c04 	addi	r4,r4,6448
  80ab64:	01c00804 	movi	r7,32
  80ab68:	1105883a 	add	r2,r2,r4
  80ab6c:	10c00003 	ldbu	r3,0(r2)
  80ab70:	28c7883a 	add	r3,r5,r3
  80ab74:	38efc83a 	sub	r23,r7,r3
  80ab78:	b800691e 	bne	r23,zero,80ad20 <__udivdi3+0x318>
  80ab7c:	35000136 	bltu	r6,r20,80ab84 <__udivdi3+0x17c>
  80ab80:	e4005136 	bltu	fp,r16,80acc8 <__udivdi3+0x2c0>
  80ab84:	00800044 	movi	r2,1
  80ab88:	0009883a 	mov	r4,zero
  80ab8c:	2007883a 	mov	r3,r4
  80ab90:	dfc00f17 	ldw	ra,60(sp)
  80ab94:	df000e17 	ldw	fp,56(sp)
  80ab98:	ddc00d17 	ldw	r23,52(sp)
  80ab9c:	dd800c17 	ldw	r22,48(sp)
  80aba0:	dd400b17 	ldw	r21,44(sp)
  80aba4:	dd000a17 	ldw	r20,40(sp)
  80aba8:	dcc00917 	ldw	r19,36(sp)
  80abac:	dc800817 	ldw	r18,32(sp)
  80abb0:	dc400717 	ldw	r17,28(sp)
  80abb4:	dc000617 	ldw	r16,24(sp)
  80abb8:	dec01004 	addi	sp,sp,64
  80abbc:	f800283a 	ret
  80abc0:	00bfffd4 	movui	r2,65535
  80abc4:	12005036 	bltu	r2,r8,80ad08 <__udivdi3+0x300>
  80abc8:	00803fc4 	movi	r2,255
  80abcc:	1200e836 	bltu	r2,r8,80af70 <__udivdi3+0x568>
  80abd0:	000b883a 	mov	r5,zero
  80abd4:	0005883a 	mov	r2,zero
  80abd8:	8084d83a 	srl	r2,r16,r2
  80abdc:	01002074 	movhi	r4,129
  80abe0:	21064c04 	addi	r4,r4,6448
  80abe4:	01800804 	movi	r6,32
  80abe8:	1105883a 	add	r2,r2,r4
  80abec:	10c00003 	ldbu	r3,0(r2)
  80abf0:	28c7883a 	add	r3,r5,r3
  80abf4:	30cbc83a 	sub	r5,r6,r3
  80abf8:	28000626 	beq	r5,zero,80ac14 <__udivdi3+0x20c>
  80abfc:	3145c83a 	sub	r2,r6,r5
  80ac00:	e084d83a 	srl	r2,fp,r2
  80ac04:	a146983a 	sll	r3,r20,r5
  80ac08:	e178983a 	sll	fp,fp,r5
  80ac0c:	8160983a 	sll	r16,r16,r5
  80ac10:	18a8b03a 	or	r20,r3,r2
  80ac14:	802ad43a 	srli	r21,r16,16
  80ac18:	a009883a 	mov	r4,r20
  80ac1c:	85ffffcc 	andi	r23,r16,65535
  80ac20:	a80b883a 	mov	r5,r21
  80ac24:	080c0180 	call	80c018 <__udivsi3>
  80ac28:	a009883a 	mov	r4,r20
  80ac2c:	a80b883a 	mov	r5,r21
  80ac30:	102d883a 	mov	r22,r2
  80ac34:	080c0200 	call	80c020 <__umodsi3>
  80ac38:	1004943a 	slli	r2,r2,16
  80ac3c:	e006d43a 	srli	r3,fp,16
  80ac40:	bda3383a 	mul	r17,r23,r22
  80ac44:	10c4b03a 	or	r2,r2,r3
  80ac48:	1440042e 	bgeu	r2,r17,80ac5c <__udivdi3+0x254>
  80ac4c:	1405883a 	add	r2,r2,r16
  80ac50:	b5bfffc4 	addi	r22,r22,-1
  80ac54:	14000136 	bltu	r2,r16,80ac5c <__udivdi3+0x254>
  80ac58:	1440d536 	bltu	r2,r17,80afb0 <__udivdi3+0x5a8>
  80ac5c:	1463c83a 	sub	r17,r2,r17
  80ac60:	8809883a 	mov	r4,r17
  80ac64:	a80b883a 	mov	r5,r21
  80ac68:	080c0180 	call	80c018 <__udivsi3>
  80ac6c:	8809883a 	mov	r4,r17
  80ac70:	a80b883a 	mov	r5,r21
  80ac74:	1029883a 	mov	r20,r2
  80ac78:	080c0200 	call	80c020 <__umodsi3>
  80ac7c:	1004943a 	slli	r2,r2,16
  80ac80:	bd09383a 	mul	r4,r23,r20
  80ac84:	e0ffffcc 	andi	r3,fp,65535
  80ac88:	10c4b03a 	or	r2,r2,r3
  80ac8c:	1100042e 	bgeu	r2,r4,80aca0 <__udivdi3+0x298>
  80ac90:	8085883a 	add	r2,r16,r2
  80ac94:	a53fffc4 	addi	r20,r20,-1
  80ac98:	14000136 	bltu	r2,r16,80aca0 <__udivdi3+0x298>
  80ac9c:	1100c736 	bltu	r2,r4,80afbc <__udivdi3+0x5b4>
  80aca0:	b004943a 	slli	r2,r22,16
  80aca4:	0009883a 	mov	r4,zero
  80aca8:	a084b03a 	or	r2,r20,r2
  80acac:	003fb706 	br	80ab8c <__udivdi3+0x184>
  80acb0:	00804034 	movhi	r2,256
  80acb4:	10bfffc4 	addi	r2,r2,-1
  80acb8:	11c0a436 	bltu	r2,r7,80af4c <__udivdi3+0x544>
  80acbc:	01400404 	movi	r5,16
  80acc0:	2805883a 	mov	r2,r5
  80acc4:	003fa406 	br	80ab58 <__udivdi3+0x150>
  80acc8:	0005883a 	mov	r2,zero
  80accc:	0009883a 	mov	r4,zero
  80acd0:	003fae06 	br	80ab8c <__udivdi3+0x184>
  80acd4:	00804034 	movhi	r2,256
  80acd8:	10bfffc4 	addi	r2,r2,-1
  80acdc:	1400a136 	bltu	r2,r16,80af64 <__udivdi3+0x55c>
  80ace0:	01400404 	movi	r5,16
  80ace4:	2805883a 	mov	r2,r5
  80ace8:	003f6006 	br	80aa6c <__udivdi3+0x64>
  80acec:	01000044 	movi	r4,1
  80acf0:	000b883a 	mov	r5,zero
  80acf4:	080c0180 	call	80c018 <__udivsi3>
  80acf8:	1021883a 	mov	r16,r2
  80acfc:	00bfffd4 	movui	r2,65535
  80ad00:	143ff436 	bltu	r2,r16,80acd4 <__udivdi3+0x2cc>
  80ad04:	003f5506 	br	80aa5c <__udivdi3+0x54>
  80ad08:	00804034 	movhi	r2,256
  80ad0c:	10bfffc4 	addi	r2,r2,-1
  80ad10:	12009a36 	bltu	r2,r8,80af7c <__udivdi3+0x574>
  80ad14:	01400404 	movi	r5,16
  80ad18:	2805883a 	mov	r2,r5
  80ad1c:	003fae06 	br	80abd8 <__udivdi3+0x1d0>
  80ad20:	3dc5c83a 	sub	r2,r7,r23
  80ad24:	35c8983a 	sll	r4,r6,r23
  80ad28:	8086d83a 	srl	r3,r16,r2
  80ad2c:	a0a2d83a 	srl	r17,r20,r2
  80ad30:	e084d83a 	srl	r2,fp,r2
  80ad34:	20eab03a 	or	r21,r4,r3
  80ad38:	a82cd43a 	srli	r22,r21,16
  80ad3c:	a5c6983a 	sll	r3,r20,r23
  80ad40:	8809883a 	mov	r4,r17
  80ad44:	b00b883a 	mov	r5,r22
  80ad48:	1886b03a 	or	r3,r3,r2
  80ad4c:	d8c00215 	stw	r3,8(sp)
  80ad50:	080c0180 	call	80c018 <__udivsi3>
  80ad54:	8809883a 	mov	r4,r17
  80ad58:	b00b883a 	mov	r5,r22
  80ad5c:	1029883a 	mov	r20,r2
  80ad60:	080c0200 	call	80c020 <__umodsi3>
  80ad64:	a8ffffcc 	andi	r3,r21,65535
  80ad68:	d8c00515 	stw	r3,20(sp)
  80ad6c:	d9000217 	ldw	r4,8(sp)
  80ad70:	d9400517 	ldw	r5,20(sp)
  80ad74:	1004943a 	slli	r2,r2,16
  80ad78:	2006d43a 	srli	r3,r4,16
  80ad7c:	85e0983a 	sll	r16,r16,r23
  80ad80:	2d23383a 	mul	r17,r5,r20
  80ad84:	10c4b03a 	or	r2,r2,r3
  80ad88:	dc000015 	stw	r16,0(sp)
  80ad8c:	1440032e 	bgeu	r2,r17,80ad9c <__udivdi3+0x394>
  80ad90:	1545883a 	add	r2,r2,r21
  80ad94:	a53fffc4 	addi	r20,r20,-1
  80ad98:	15407f2e 	bgeu	r2,r21,80af98 <__udivdi3+0x590>
  80ad9c:	1463c83a 	sub	r17,r2,r17
  80ada0:	8809883a 	mov	r4,r17
  80ada4:	b00b883a 	mov	r5,r22
  80ada8:	080c0180 	call	80c018 <__udivsi3>
  80adac:	8809883a 	mov	r4,r17
  80adb0:	b00b883a 	mov	r5,r22
  80adb4:	1021883a 	mov	r16,r2
  80adb8:	080c0200 	call	80c020 <__umodsi3>
  80adbc:	d8c00517 	ldw	r3,20(sp)
  80adc0:	d9000217 	ldw	r4,8(sp)
  80adc4:	1004943a 	slli	r2,r2,16
  80adc8:	1c0f383a 	mul	r7,r3,r16
  80adcc:	20ffffcc 	andi	r3,r4,65535
  80add0:	10e2b03a 	or	r17,r2,r3
  80add4:	89c0032e 	bgeu	r17,r7,80ade4 <__udivdi3+0x3dc>
  80add8:	8d63883a 	add	r17,r17,r21
  80addc:	843fffc4 	addi	r16,r16,-1
  80ade0:	8d40692e 	bgeu	r17,r21,80af88 <__udivdi3+0x580>
  80ade4:	a008943a 	slli	r4,r20,16
  80ade8:	d9400017 	ldw	r5,0(sp)
  80adec:	89e3c83a 	sub	r17,r17,r7
  80adf0:	8110b03a 	or	r8,r16,r4
  80adf4:	280cd43a 	srli	r6,r5,16
  80adf8:	28ffffcc 	andi	r3,r5,65535
  80adfc:	40bfffcc 	andi	r2,r8,65535
  80ae00:	400ad43a 	srli	r5,r8,16
  80ae04:	10d3383a 	mul	r9,r2,r3
  80ae08:	1185383a 	mul	r2,r2,r6
  80ae0c:	28c7383a 	mul	r3,r5,r3
  80ae10:	4808d43a 	srli	r4,r9,16
  80ae14:	298b383a 	mul	r5,r5,r6
  80ae18:	10c5883a 	add	r2,r2,r3
  80ae1c:	2089883a 	add	r4,r4,r2
  80ae20:	20c0022e 	bgeu	r4,r3,80ae2c <__udivdi3+0x424>
  80ae24:	00800074 	movhi	r2,1
  80ae28:	288b883a 	add	r5,r5,r2
  80ae2c:	2004d43a 	srli	r2,r4,16
  80ae30:	288b883a 	add	r5,r5,r2
  80ae34:	89403f36 	bltu	r17,r5,80af34 <__udivdi3+0x52c>
  80ae38:	89403926 	beq	r17,r5,80af20 <__udivdi3+0x518>
  80ae3c:	4005883a 	mov	r2,r8
  80ae40:	0009883a 	mov	r4,zero
  80ae44:	003f5106 	br	80ab8c <__udivdi3+0x184>
  80ae48:	85a0983a 	sll	r16,r16,r22
  80ae4c:	3585c83a 	sub	r2,r6,r22
  80ae50:	a0a2d83a 	srl	r17,r20,r2
  80ae54:	802ad43a 	srli	r21,r16,16
  80ae58:	e084d83a 	srl	r2,fp,r2
  80ae5c:	a586983a 	sll	r3,r20,r22
  80ae60:	8809883a 	mov	r4,r17
  80ae64:	a80b883a 	mov	r5,r21
  80ae68:	1886b03a 	or	r3,r3,r2
  80ae6c:	d8c00115 	stw	r3,4(sp)
  80ae70:	080c0180 	call	80c018 <__udivsi3>
  80ae74:	8809883a 	mov	r4,r17
  80ae78:	a80b883a 	mov	r5,r21
  80ae7c:	d8800415 	stw	r2,16(sp)
  80ae80:	080c0200 	call	80c020 <__umodsi3>
  80ae84:	d9000117 	ldw	r4,4(sp)
  80ae88:	d9400417 	ldw	r5,16(sp)
  80ae8c:	1004943a 	slli	r2,r2,16
  80ae90:	85ffffcc 	andi	r23,r16,65535
  80ae94:	2006d43a 	srli	r3,r4,16
  80ae98:	b963383a 	mul	r17,r23,r5
  80ae9c:	10c4b03a 	or	r2,r2,r3
  80aea0:	1440042e 	bgeu	r2,r17,80aeb4 <__udivdi3+0x4ac>
  80aea4:	297fffc4 	addi	r5,r5,-1
  80aea8:	1405883a 	add	r2,r2,r16
  80aeac:	d9400415 	stw	r5,16(sp)
  80aeb0:	1400442e 	bgeu	r2,r16,80afc4 <__udivdi3+0x5bc>
  80aeb4:	1463c83a 	sub	r17,r2,r17
  80aeb8:	8809883a 	mov	r4,r17
  80aebc:	a80b883a 	mov	r5,r21
  80aec0:	080c0180 	call	80c018 <__udivsi3>
  80aec4:	8809883a 	mov	r4,r17
  80aec8:	a80b883a 	mov	r5,r21
  80aecc:	1029883a 	mov	r20,r2
  80aed0:	080c0200 	call	80c020 <__umodsi3>
  80aed4:	d9400117 	ldw	r5,4(sp)
  80aed8:	1004943a 	slli	r2,r2,16
  80aedc:	bd09383a 	mul	r4,r23,r20
  80aee0:	28ffffcc 	andi	r3,r5,65535
  80aee4:	10c6b03a 	or	r3,r2,r3
  80aee8:	1900062e 	bgeu	r3,r4,80af04 <__udivdi3+0x4fc>
  80aeec:	1c07883a 	add	r3,r3,r16
  80aef0:	a53fffc4 	addi	r20,r20,-1
  80aef4:	1c000336 	bltu	r3,r16,80af04 <__udivdi3+0x4fc>
  80aef8:	1900022e 	bgeu	r3,r4,80af04 <__udivdi3+0x4fc>
  80aefc:	a53fffc4 	addi	r20,r20,-1
  80af00:	1c07883a 	add	r3,r3,r16
  80af04:	d9400417 	ldw	r5,16(sp)
  80af08:	e5b8983a 	sll	fp,fp,r22
  80af0c:	1923c83a 	sub	r17,r3,r4
  80af10:	2804943a 	slli	r2,r5,16
  80af14:	a0a8b03a 	or	r20,r20,r2
  80af18:	dd000315 	stw	r20,12(sp)
  80af1c:	003ee106 	br	80aaa4 <__udivdi3+0x9c>
  80af20:	2004943a 	slli	r2,r4,16
  80af24:	e5c8983a 	sll	r4,fp,r23
  80af28:	48ffffcc 	andi	r3,r9,65535
  80af2c:	10c5883a 	add	r2,r2,r3
  80af30:	20bfc22e 	bgeu	r4,r2,80ae3c <__udivdi3+0x434>
  80af34:	40bfffc4 	addi	r2,r8,-1
  80af38:	0009883a 	mov	r4,zero
  80af3c:	003f1306 	br	80ab8c <__udivdi3+0x184>
  80af40:	01400204 	movi	r5,8
  80af44:	2805883a 	mov	r2,r5
  80af48:	003f0306 	br	80ab58 <__udivdi3+0x150>
  80af4c:	01400604 	movi	r5,24
  80af50:	2805883a 	mov	r2,r5
  80af54:	003f0006 	br	80ab58 <__udivdi3+0x150>
  80af58:	01400204 	movi	r5,8
  80af5c:	2805883a 	mov	r2,r5
  80af60:	003ec206 	br	80aa6c <__udivdi3+0x64>
  80af64:	01400604 	movi	r5,24
  80af68:	2805883a 	mov	r2,r5
  80af6c:	003ebf06 	br	80aa6c <__udivdi3+0x64>
  80af70:	01400204 	movi	r5,8
  80af74:	2805883a 	mov	r2,r5
  80af78:	003f1706 	br	80abd8 <__udivdi3+0x1d0>
  80af7c:	01400604 	movi	r5,24
  80af80:	2805883a 	mov	r2,r5
  80af84:	003f1406 	br	80abd8 <__udivdi3+0x1d0>
  80af88:	89ff962e 	bgeu	r17,r7,80ade4 <__udivdi3+0x3dc>
  80af8c:	8d63883a 	add	r17,r17,r21
  80af90:	843fffc4 	addi	r16,r16,-1
  80af94:	003f9306 	br	80ade4 <__udivdi3+0x3dc>
  80af98:	147f802e 	bgeu	r2,r17,80ad9c <__udivdi3+0x394>
  80af9c:	a53fffc4 	addi	r20,r20,-1
  80afa0:	1545883a 	add	r2,r2,r21
  80afa4:	003f7d06 	br	80ad9c <__udivdi3+0x394>
  80afa8:	a53fffc4 	addi	r20,r20,-1
  80afac:	003ede06 	br	80ab28 <__udivdi3+0x120>
  80afb0:	b5bfffc4 	addi	r22,r22,-1
  80afb4:	1405883a 	add	r2,r2,r16
  80afb8:	003f2806 	br	80ac5c <__udivdi3+0x254>
  80afbc:	a53fffc4 	addi	r20,r20,-1
  80afc0:	003f3706 	br	80aca0 <__udivdi3+0x298>
  80afc4:	147fbb2e 	bgeu	r2,r17,80aeb4 <__udivdi3+0x4ac>
  80afc8:	297fffc4 	addi	r5,r5,-1
  80afcc:	1405883a 	add	r2,r2,r16
  80afd0:	d9400415 	stw	r5,16(sp)
  80afd4:	003fb706 	br	80aeb4 <__udivdi3+0x4ac>
  80afd8:	b5bfffc4 	addi	r22,r22,-1
  80afdc:	1405883a 	add	r2,r2,r16
  80afe0:	003ec006 	br	80aae4 <__udivdi3+0xdc>

0080afe4 <__umoddi3>:
  80afe4:	defff104 	addi	sp,sp,-60
  80afe8:	dd800b15 	stw	r22,44(sp)
  80afec:	dd000915 	stw	r20,36(sp)
  80aff0:	dc000515 	stw	r16,20(sp)
  80aff4:	dfc00e15 	stw	ra,56(sp)
  80aff8:	df000d15 	stw	fp,52(sp)
  80affc:	ddc00c15 	stw	r23,48(sp)
  80b000:	dd400a15 	stw	r21,40(sp)
  80b004:	dcc00815 	stw	r19,32(sp)
  80b008:	dc800715 	stw	r18,28(sp)
  80b00c:	dc400615 	stw	r17,24(sp)
  80b010:	3021883a 	mov	r16,r6
  80b014:	202d883a 	mov	r22,r4
  80b018:	2829883a 	mov	r20,r5
  80b01c:	38002b1e 	bne	r7,zero,80b0cc <__umoddi3+0xe8>
  80b020:	29805036 	bltu	r5,r6,80b164 <__umoddi3+0x180>
  80b024:	30008a26 	beq	r6,zero,80b250 <__umoddi3+0x26c>
  80b028:	00bfffd4 	movui	r2,65535
  80b02c:	14008236 	bltu	r2,r16,80b238 <__umoddi3+0x254>
  80b030:	00803fc4 	movi	r2,255
  80b034:	14013636 	bltu	r2,r16,80b510 <__umoddi3+0x52c>
  80b038:	000b883a 	mov	r5,zero
  80b03c:	0005883a 	mov	r2,zero
  80b040:	8084d83a 	srl	r2,r16,r2
  80b044:	01002074 	movhi	r4,129
  80b048:	21064c04 	addi	r4,r4,6448
  80b04c:	01800804 	movi	r6,32
  80b050:	1105883a 	add	r2,r2,r4
  80b054:	10c00003 	ldbu	r3,0(r2)
  80b058:	28c7883a 	add	r3,r5,r3
  80b05c:	30efc83a 	sub	r23,r6,r3
  80b060:	b800941e 	bne	r23,zero,80b2b4 <__umoddi3+0x2d0>
  80b064:	802ad43a 	srli	r21,r16,16
  80b068:	a423c83a 	sub	r17,r20,r16
  80b06c:	0039883a 	mov	fp,zero
  80b070:	853fffcc 	andi	r20,r16,65535
  80b074:	8809883a 	mov	r4,r17
  80b078:	a80b883a 	mov	r5,r21
  80b07c:	080c0180 	call	80c018 <__udivsi3>
  80b080:	8809883a 	mov	r4,r17
  80b084:	a80b883a 	mov	r5,r21
  80b088:	a0a3383a 	mul	r17,r20,r2
  80b08c:	080c0200 	call	80c020 <__umodsi3>
  80b090:	1004943a 	slli	r2,r2,16
  80b094:	b006d43a 	srli	r3,r22,16
  80b098:	10c4b03a 	or	r2,r2,r3
  80b09c:	1440032e 	bgeu	r2,r17,80b0ac <__umoddi3+0xc8>
  80b0a0:	1405883a 	add	r2,r2,r16
  80b0a4:	14000136 	bltu	r2,r16,80b0ac <__umoddi3+0xc8>
  80b0a8:	14413536 	bltu	r2,r17,80b580 <__umoddi3+0x59c>
  80b0ac:	1463c83a 	sub	r17,r2,r17
  80b0b0:	8809883a 	mov	r4,r17
  80b0b4:	a80b883a 	mov	r5,r21
  80b0b8:	080c0180 	call	80c018 <__udivsi3>
  80b0bc:	8809883a 	mov	r4,r17
  80b0c0:	a0a3383a 	mul	r17,r20,r2
  80b0c4:	a80b883a 	mov	r5,r21
  80b0c8:	00004d06 	br	80b200 <__umoddi3+0x21c>
  80b0cc:	380d883a 	mov	r6,r7
  80b0d0:	29c0102e 	bgeu	r5,r7,80b114 <__umoddi3+0x130>
  80b0d4:	2011883a 	mov	r8,r4
  80b0d8:	2813883a 	mov	r9,r5
  80b0dc:	4005883a 	mov	r2,r8
  80b0e0:	4807883a 	mov	r3,r9
  80b0e4:	dfc00e17 	ldw	ra,56(sp)
  80b0e8:	df000d17 	ldw	fp,52(sp)
  80b0ec:	ddc00c17 	ldw	r23,48(sp)
  80b0f0:	dd800b17 	ldw	r22,44(sp)
  80b0f4:	dd400a17 	ldw	r21,40(sp)
  80b0f8:	dd000917 	ldw	r20,36(sp)
  80b0fc:	dcc00817 	ldw	r19,32(sp)
  80b100:	dc800717 	ldw	r18,28(sp)
  80b104:	dc400617 	ldw	r17,24(sp)
  80b108:	dc000517 	ldw	r16,20(sp)
  80b10c:	dec00f04 	addi	sp,sp,60
  80b110:	f800283a 	ret
  80b114:	00bfffd4 	movui	r2,65535
  80b118:	11c05a36 	bltu	r2,r7,80b284 <__umoddi3+0x2a0>
  80b11c:	00803fc4 	movi	r2,255
  80b120:	11c0fe36 	bltu	r2,r7,80b51c <__umoddi3+0x538>
  80b124:	000b883a 	mov	r5,zero
  80b128:	0005883a 	mov	r2,zero
  80b12c:	3084d83a 	srl	r2,r6,r2
  80b130:	01002074 	movhi	r4,129
  80b134:	21064c04 	addi	r4,r4,6448
  80b138:	01c00804 	movi	r7,32
  80b13c:	1105883a 	add	r2,r2,r4
  80b140:	10c00003 	ldbu	r3,0(r2)
  80b144:	28c7883a 	add	r3,r5,r3
  80b148:	38ebc83a 	sub	r21,r7,r3
  80b14c:	a800851e 	bne	r21,zero,80b364 <__umoddi3+0x380>
  80b150:	35005236 	bltu	r6,r20,80b29c <__umoddi3+0x2b8>
  80b154:	b400512e 	bgeu	r22,r16,80b29c <__umoddi3+0x2b8>
  80b158:	b011883a 	mov	r8,r22
  80b15c:	a013883a 	mov	r9,r20
  80b160:	003fde06 	br	80b0dc <__umoddi3+0xf8>
  80b164:	00bfffd4 	movui	r2,65535
  80b168:	11804036 	bltu	r2,r6,80b26c <__umoddi3+0x288>
  80b16c:	00803fc4 	movi	r2,255
  80b170:	1180ed36 	bltu	r2,r6,80b528 <__umoddi3+0x544>
  80b174:	000b883a 	mov	r5,zero
  80b178:	0005883a 	mov	r2,zero
  80b17c:	8084d83a 	srl	r2,r16,r2
  80b180:	01002074 	movhi	r4,129
  80b184:	21064c04 	addi	r4,r4,6448
  80b188:	01800804 	movi	r6,32
  80b18c:	1105883a 	add	r2,r2,r4
  80b190:	10c00003 	ldbu	r3,0(r2)
  80b194:	28c7883a 	add	r3,r5,r3
  80b198:	30c7c83a 	sub	r3,r6,r3
  80b19c:	1800bf1e 	bne	r3,zero,80b49c <__umoddi3+0x4b8>
  80b1a0:	0039883a 	mov	fp,zero
  80b1a4:	802ad43a 	srli	r21,r16,16
  80b1a8:	a009883a 	mov	r4,r20
  80b1ac:	85ffffcc 	andi	r23,r16,65535
  80b1b0:	a80b883a 	mov	r5,r21
  80b1b4:	080c0180 	call	80c018 <__udivsi3>
  80b1b8:	a009883a 	mov	r4,r20
  80b1bc:	a80b883a 	mov	r5,r21
  80b1c0:	b8a3383a 	mul	r17,r23,r2
  80b1c4:	080c0200 	call	80c020 <__umodsi3>
  80b1c8:	1004943a 	slli	r2,r2,16
  80b1cc:	b006d43a 	srli	r3,r22,16
  80b1d0:	10c4b03a 	or	r2,r2,r3
  80b1d4:	1440032e 	bgeu	r2,r17,80b1e4 <__umoddi3+0x200>
  80b1d8:	1405883a 	add	r2,r2,r16
  80b1dc:	14000136 	bltu	r2,r16,80b1e4 <__umoddi3+0x200>
  80b1e0:	1440e536 	bltu	r2,r17,80b578 <__umoddi3+0x594>
  80b1e4:	1463c83a 	sub	r17,r2,r17
  80b1e8:	8809883a 	mov	r4,r17
  80b1ec:	a80b883a 	mov	r5,r21
  80b1f0:	080c0180 	call	80c018 <__udivsi3>
  80b1f4:	8809883a 	mov	r4,r17
  80b1f8:	b8a3383a 	mul	r17,r23,r2
  80b1fc:	a80b883a 	mov	r5,r21
  80b200:	080c0200 	call	80c020 <__umodsi3>
  80b204:	1004943a 	slli	r2,r2,16
  80b208:	b0ffffcc 	andi	r3,r22,65535
  80b20c:	10c4b03a 	or	r2,r2,r3
  80b210:	1440042e 	bgeu	r2,r17,80b224 <__umoddi3+0x240>
  80b214:	1405883a 	add	r2,r2,r16
  80b218:	14000236 	bltu	r2,r16,80b224 <__umoddi3+0x240>
  80b21c:	1440012e 	bgeu	r2,r17,80b224 <__umoddi3+0x240>
  80b220:	1405883a 	add	r2,r2,r16
  80b224:	1445c83a 	sub	r2,r2,r17
  80b228:	1724d83a 	srl	r18,r2,fp
  80b22c:	0013883a 	mov	r9,zero
  80b230:	9011883a 	mov	r8,r18
  80b234:	003fa906 	br	80b0dc <__umoddi3+0xf8>
  80b238:	00804034 	movhi	r2,256
  80b23c:	10bfffc4 	addi	r2,r2,-1
  80b240:	1400b036 	bltu	r2,r16,80b504 <__umoddi3+0x520>
  80b244:	01400404 	movi	r5,16
  80b248:	2805883a 	mov	r2,r5
  80b24c:	003f7c06 	br	80b040 <__umoddi3+0x5c>
  80b250:	01000044 	movi	r4,1
  80b254:	000b883a 	mov	r5,zero
  80b258:	080c0180 	call	80c018 <__udivsi3>
  80b25c:	1021883a 	mov	r16,r2
  80b260:	00bfffd4 	movui	r2,65535
  80b264:	143ff436 	bltu	r2,r16,80b238 <__umoddi3+0x254>
  80b268:	003f7106 	br	80b030 <__umoddi3+0x4c>
  80b26c:	00804034 	movhi	r2,256
  80b270:	10bfffc4 	addi	r2,r2,-1
  80b274:	1180af36 	bltu	r2,r6,80b534 <__umoddi3+0x550>
  80b278:	01400404 	movi	r5,16
  80b27c:	2805883a 	mov	r2,r5
  80b280:	003fbe06 	br	80b17c <__umoddi3+0x198>
  80b284:	00804034 	movhi	r2,256
  80b288:	10bfffc4 	addi	r2,r2,-1
  80b28c:	11c0ac36 	bltu	r2,r7,80b540 <__umoddi3+0x55c>
  80b290:	01400404 	movi	r5,16
  80b294:	2805883a 	mov	r2,r5
  80b298:	003fa406 	br	80b12c <__umoddi3+0x148>
  80b29c:	b409c83a 	sub	r4,r22,r16
  80b2a0:	b105803a 	cmpltu	r2,r22,r4
  80b2a4:	a187c83a 	sub	r3,r20,r6
  80b2a8:	18a9c83a 	sub	r20,r3,r2
  80b2ac:	202d883a 	mov	r22,r4
  80b2b0:	003fa906 	br	80b158 <__umoddi3+0x174>
  80b2b4:	85e0983a 	sll	r16,r16,r23
  80b2b8:	35c5c83a 	sub	r2,r6,r23
  80b2bc:	a0a2d83a 	srl	r17,r20,r2
  80b2c0:	802ad43a 	srli	r21,r16,16
  80b2c4:	b084d83a 	srl	r2,r22,r2
  80b2c8:	a5c6983a 	sll	r3,r20,r23
  80b2cc:	8809883a 	mov	r4,r17
  80b2d0:	a80b883a 	mov	r5,r21
  80b2d4:	1886b03a 	or	r3,r3,r2
  80b2d8:	d8c00115 	stw	r3,4(sp)
  80b2dc:	853fffcc 	andi	r20,r16,65535
  80b2e0:	080c0180 	call	80c018 <__udivsi3>
  80b2e4:	8809883a 	mov	r4,r17
  80b2e8:	a80b883a 	mov	r5,r21
  80b2ec:	a0a3383a 	mul	r17,r20,r2
  80b2f0:	080c0200 	call	80c020 <__umodsi3>
  80b2f4:	d9000117 	ldw	r4,4(sp)
  80b2f8:	1004943a 	slli	r2,r2,16
  80b2fc:	b839883a 	mov	fp,r23
  80b300:	2006d43a 	srli	r3,r4,16
  80b304:	10c4b03a 	or	r2,r2,r3
  80b308:	1440022e 	bgeu	r2,r17,80b314 <__umoddi3+0x330>
  80b30c:	1405883a 	add	r2,r2,r16
  80b310:	1400962e 	bgeu	r2,r16,80b56c <__umoddi3+0x588>
  80b314:	1463c83a 	sub	r17,r2,r17
  80b318:	8809883a 	mov	r4,r17
  80b31c:	a80b883a 	mov	r5,r21
  80b320:	080c0180 	call	80c018 <__udivsi3>
  80b324:	8809883a 	mov	r4,r17
  80b328:	a80b883a 	mov	r5,r21
  80b32c:	a0a3383a 	mul	r17,r20,r2
  80b330:	080c0200 	call	80c020 <__umodsi3>
  80b334:	d9400117 	ldw	r5,4(sp)
  80b338:	1004943a 	slli	r2,r2,16
  80b33c:	28ffffcc 	andi	r3,r5,65535
  80b340:	10c4b03a 	or	r2,r2,r3
  80b344:	1440042e 	bgeu	r2,r17,80b358 <__umoddi3+0x374>
  80b348:	1405883a 	add	r2,r2,r16
  80b34c:	14000236 	bltu	r2,r16,80b358 <__umoddi3+0x374>
  80b350:	1440012e 	bgeu	r2,r17,80b358 <__umoddi3+0x374>
  80b354:	1405883a 	add	r2,r2,r16
  80b358:	b5ec983a 	sll	r22,r22,r23
  80b35c:	1463c83a 	sub	r17,r2,r17
  80b360:	003f4406 	br	80b074 <__umoddi3+0x90>
  80b364:	3d4fc83a 	sub	r7,r7,r21
  80b368:	3546983a 	sll	r3,r6,r21
  80b36c:	81c4d83a 	srl	r2,r16,r7
  80b370:	a1e2d83a 	srl	r17,r20,r7
  80b374:	a54c983a 	sll	r6,r20,r21
  80b378:	18aeb03a 	or	r23,r3,r2
  80b37c:	b828d43a 	srli	r20,r23,16
  80b380:	b1c4d83a 	srl	r2,r22,r7
  80b384:	8809883a 	mov	r4,r17
  80b388:	a00b883a 	mov	r5,r20
  80b38c:	308cb03a 	or	r6,r6,r2
  80b390:	d9c00315 	stw	r7,12(sp)
  80b394:	d9800215 	stw	r6,8(sp)
  80b398:	080c0180 	call	80c018 <__udivsi3>
  80b39c:	8809883a 	mov	r4,r17
  80b3a0:	a00b883a 	mov	r5,r20
  80b3a4:	1039883a 	mov	fp,r2
  80b3a8:	080c0200 	call	80c020 <__umodsi3>
  80b3ac:	b8ffffcc 	andi	r3,r23,65535
  80b3b0:	d8c00415 	stw	r3,16(sp)
  80b3b4:	d9000217 	ldw	r4,8(sp)
  80b3b8:	d9400417 	ldw	r5,16(sp)
  80b3bc:	1004943a 	slli	r2,r2,16
  80b3c0:	2006d43a 	srli	r3,r4,16
  80b3c4:	8560983a 	sll	r16,r16,r21
  80b3c8:	2f23383a 	mul	r17,r5,fp
  80b3cc:	10c4b03a 	or	r2,r2,r3
  80b3d0:	dc000015 	stw	r16,0(sp)
  80b3d4:	b56c983a 	sll	r22,r22,r21
  80b3d8:	1440032e 	bgeu	r2,r17,80b3e8 <__umoddi3+0x404>
  80b3dc:	15c5883a 	add	r2,r2,r23
  80b3e0:	e73fffc4 	addi	fp,fp,-1
  80b3e4:	15c05d2e 	bgeu	r2,r23,80b55c <__umoddi3+0x578>
  80b3e8:	1463c83a 	sub	r17,r2,r17
  80b3ec:	8809883a 	mov	r4,r17
  80b3f0:	a00b883a 	mov	r5,r20
  80b3f4:	080c0180 	call	80c018 <__udivsi3>
  80b3f8:	8809883a 	mov	r4,r17
  80b3fc:	a00b883a 	mov	r5,r20
  80b400:	1021883a 	mov	r16,r2
  80b404:	080c0200 	call	80c020 <__umodsi3>
  80b408:	d8c00417 	ldw	r3,16(sp)
  80b40c:	d9000217 	ldw	r4,8(sp)
  80b410:	1004943a 	slli	r2,r2,16
  80b414:	1c23383a 	mul	r17,r3,r16
  80b418:	20ffffcc 	andi	r3,r4,65535
  80b41c:	10ceb03a 	or	r7,r2,r3
  80b420:	3c40032e 	bgeu	r7,r17,80b430 <__umoddi3+0x44c>
  80b424:	3dcf883a 	add	r7,r7,r23
  80b428:	843fffc4 	addi	r16,r16,-1
  80b42c:	3dc0472e 	bgeu	r7,r23,80b54c <__umoddi3+0x568>
  80b430:	e004943a 	slli	r2,fp,16
  80b434:	d9400017 	ldw	r5,0(sp)
  80b438:	3c4fc83a 	sub	r7,r7,r17
  80b43c:	8084b03a 	or	r2,r16,r2
  80b440:	28ffffcc 	andi	r3,r5,65535
  80b444:	280cd43a 	srli	r6,r5,16
  80b448:	100ad43a 	srli	r5,r2,16
  80b44c:	10bfffcc 	andi	r2,r2,65535
  80b450:	10d1383a 	mul	r8,r2,r3
  80b454:	28c7383a 	mul	r3,r5,r3
  80b458:	1185383a 	mul	r2,r2,r6
  80b45c:	4008d43a 	srli	r4,r8,16
  80b460:	298b383a 	mul	r5,r5,r6
  80b464:	10c5883a 	add	r2,r2,r3
  80b468:	2089883a 	add	r4,r4,r2
  80b46c:	20c0022e 	bgeu	r4,r3,80b478 <__umoddi3+0x494>
  80b470:	00800074 	movhi	r2,1
  80b474:	288b883a 	add	r5,r5,r2
  80b478:	2004d43a 	srli	r2,r4,16
  80b47c:	2008943a 	slli	r4,r4,16
  80b480:	40ffffcc 	andi	r3,r8,65535
  80b484:	288b883a 	add	r5,r5,r2
  80b488:	20c9883a 	add	r4,r4,r3
  80b48c:	39400b36 	bltu	r7,r5,80b4bc <__umoddi3+0x4d8>
  80b490:	39403d26 	beq	r7,r5,80b588 <__umoddi3+0x5a4>
  80b494:	394bc83a 	sub	r5,r7,r5
  80b498:	00000f06 	br	80b4d8 <__umoddi3+0x4f4>
  80b49c:	30c5c83a 	sub	r2,r6,r3
  80b4a0:	1839883a 	mov	fp,r3
  80b4a4:	b084d83a 	srl	r2,r22,r2
  80b4a8:	a0c6983a 	sll	r3,r20,r3
  80b4ac:	8720983a 	sll	r16,r16,fp
  80b4b0:	b72c983a 	sll	r22,r22,fp
  80b4b4:	18a8b03a 	or	r20,r3,r2
  80b4b8:	003f3a06 	br	80b1a4 <__umoddi3+0x1c0>
  80b4bc:	d8c00017 	ldw	r3,0(sp)
  80b4c0:	20c5c83a 	sub	r2,r4,r3
  80b4c4:	2089803a 	cmpltu	r4,r4,r2
  80b4c8:	2dc7c83a 	sub	r3,r5,r23
  80b4cc:	1907c83a 	sub	r3,r3,r4
  80b4d0:	38cbc83a 	sub	r5,r7,r3
  80b4d4:	1009883a 	mov	r4,r2
  80b4d8:	b105c83a 	sub	r2,r22,r4
  80b4dc:	b087803a 	cmpltu	r3,r22,r2
  80b4e0:	28c7c83a 	sub	r3,r5,r3
  80b4e4:	d9400317 	ldw	r5,12(sp)
  80b4e8:	1544d83a 	srl	r2,r2,r21
  80b4ec:	1948983a 	sll	r4,r3,r5
  80b4f0:	1d46d83a 	srl	r3,r3,r21
  80b4f4:	20a4b03a 	or	r18,r4,r2
  80b4f8:	9011883a 	mov	r8,r18
  80b4fc:	1813883a 	mov	r9,r3
  80b500:	003ef606 	br	80b0dc <__umoddi3+0xf8>
  80b504:	01400604 	movi	r5,24
  80b508:	2805883a 	mov	r2,r5
  80b50c:	003ecc06 	br	80b040 <__umoddi3+0x5c>
  80b510:	01400204 	movi	r5,8
  80b514:	2805883a 	mov	r2,r5
  80b518:	003ec906 	br	80b040 <__umoddi3+0x5c>
  80b51c:	01400204 	movi	r5,8
  80b520:	2805883a 	mov	r2,r5
  80b524:	003f0106 	br	80b12c <__umoddi3+0x148>
  80b528:	01400204 	movi	r5,8
  80b52c:	2805883a 	mov	r2,r5
  80b530:	003f1206 	br	80b17c <__umoddi3+0x198>
  80b534:	01400604 	movi	r5,24
  80b538:	2805883a 	mov	r2,r5
  80b53c:	003f0f06 	br	80b17c <__umoddi3+0x198>
  80b540:	01400604 	movi	r5,24
  80b544:	2805883a 	mov	r2,r5
  80b548:	003ef806 	br	80b12c <__umoddi3+0x148>
  80b54c:	3c7fb82e 	bgeu	r7,r17,80b430 <__umoddi3+0x44c>
  80b550:	843fffc4 	addi	r16,r16,-1
  80b554:	3dcf883a 	add	r7,r7,r23
  80b558:	003fb506 	br	80b430 <__umoddi3+0x44c>
  80b55c:	147fa22e 	bgeu	r2,r17,80b3e8 <__umoddi3+0x404>
  80b560:	e73fffc4 	addi	fp,fp,-1
  80b564:	15c5883a 	add	r2,r2,r23
  80b568:	003f9f06 	br	80b3e8 <__umoddi3+0x404>
  80b56c:	147f692e 	bgeu	r2,r17,80b314 <__umoddi3+0x330>
  80b570:	1405883a 	add	r2,r2,r16
  80b574:	003f6706 	br	80b314 <__umoddi3+0x330>
  80b578:	1405883a 	add	r2,r2,r16
  80b57c:	003f1906 	br	80b1e4 <__umoddi3+0x200>
  80b580:	1405883a 	add	r2,r2,r16
  80b584:	003ec906 	br	80b0ac <__umoddi3+0xc8>
  80b588:	b13fcc36 	bltu	r22,r4,80b4bc <__umoddi3+0x4d8>
  80b58c:	000b883a 	mov	r5,zero
  80b590:	003fd106 	br	80b4d8 <__umoddi3+0x4f4>

0080b594 <__muldf3>:
  80b594:	deffe004 	addi	sp,sp,-128
  80b598:	dc401815 	stw	r17,96(sp)
  80b59c:	dc400404 	addi	r17,sp,16
  80b5a0:	2011883a 	mov	r8,r4
  80b5a4:	2813883a 	mov	r9,r5
  80b5a8:	dc001715 	stw	r16,92(sp)
  80b5ac:	d809883a 	mov	r4,sp
  80b5b0:	880b883a 	mov	r5,r17
  80b5b4:	dc000904 	addi	r16,sp,36
  80b5b8:	dfc01f15 	stw	ra,124(sp)
  80b5bc:	da400115 	stw	r9,4(sp)
  80b5c0:	d9c00315 	stw	r7,12(sp)
  80b5c4:	da000015 	stw	r8,0(sp)
  80b5c8:	d9800215 	stw	r6,8(sp)
  80b5cc:	ddc01e15 	stw	r23,120(sp)
  80b5d0:	dd801d15 	stw	r22,116(sp)
  80b5d4:	dd401c15 	stw	r21,112(sp)
  80b5d8:	dd001b15 	stw	r20,108(sp)
  80b5dc:	dcc01a15 	stw	r19,104(sp)
  80b5e0:	dc801915 	stw	r18,100(sp)
  80b5e4:	08034100 	call	803410 <__unpack_d>
  80b5e8:	d9000204 	addi	r4,sp,8
  80b5ec:	800b883a 	mov	r5,r16
  80b5f0:	08034100 	call	803410 <__unpack_d>
  80b5f4:	d9000417 	ldw	r4,16(sp)
  80b5f8:	00800044 	movi	r2,1
  80b5fc:	1100102e 	bgeu	r2,r4,80b640 <__muldf3+0xac>
  80b600:	d8c00917 	ldw	r3,36(sp)
  80b604:	10c0062e 	bgeu	r2,r3,80b620 <__muldf3+0x8c>
  80b608:	00800104 	movi	r2,4
  80b60c:	20800a26 	beq	r4,r2,80b638 <__muldf3+0xa4>
  80b610:	1880cc26 	beq	r3,r2,80b944 <__muldf3+0x3b0>
  80b614:	00800084 	movi	r2,2
  80b618:	20800926 	beq	r4,r2,80b640 <__muldf3+0xac>
  80b61c:	1880191e 	bne	r3,r2,80b684 <__muldf3+0xf0>
  80b620:	d8c00a17 	ldw	r3,40(sp)
  80b624:	d8800517 	ldw	r2,20(sp)
  80b628:	8009883a 	mov	r4,r16
  80b62c:	10c4c03a 	cmpne	r2,r2,r3
  80b630:	d8800a15 	stw	r2,40(sp)
  80b634:	00000706 	br	80b654 <__muldf3+0xc0>
  80b638:	00800084 	movi	r2,2
  80b63c:	1880c326 	beq	r3,r2,80b94c <__muldf3+0x3b8>
  80b640:	d8800517 	ldw	r2,20(sp)
  80b644:	d8c00a17 	ldw	r3,40(sp)
  80b648:	8809883a 	mov	r4,r17
  80b64c:	10c4c03a 	cmpne	r2,r2,r3
  80b650:	d8800515 	stw	r2,20(sp)
  80b654:	08030fc0 	call	8030fc <__pack_d>
  80b658:	dfc01f17 	ldw	ra,124(sp)
  80b65c:	ddc01e17 	ldw	r23,120(sp)
  80b660:	dd801d17 	ldw	r22,116(sp)
  80b664:	dd401c17 	ldw	r21,112(sp)
  80b668:	dd001b17 	ldw	r20,108(sp)
  80b66c:	dcc01a17 	ldw	r19,104(sp)
  80b670:	dc801917 	ldw	r18,100(sp)
  80b674:	dc401817 	ldw	r17,96(sp)
  80b678:	dc001717 	ldw	r16,92(sp)
  80b67c:	dec02004 	addi	sp,sp,128
  80b680:	f800283a 	ret
  80b684:	dd800717 	ldw	r22,28(sp)
  80b688:	dc800c17 	ldw	r18,48(sp)
  80b68c:	002b883a 	mov	r21,zero
  80b690:	0023883a 	mov	r17,zero
  80b694:	a80b883a 	mov	r5,r21
  80b698:	b00d883a 	mov	r6,r22
  80b69c:	880f883a 	mov	r7,r17
  80b6a0:	ddc00817 	ldw	r23,32(sp)
  80b6a4:	dcc00d17 	ldw	r19,52(sp)
  80b6a8:	9009883a 	mov	r4,r18
  80b6ac:	0802ce80 	call	802ce8 <__muldi3>
  80b6b0:	001b883a 	mov	r13,zero
  80b6b4:	680f883a 	mov	r7,r13
  80b6b8:	b009883a 	mov	r4,r22
  80b6bc:	000b883a 	mov	r5,zero
  80b6c0:	980d883a 	mov	r6,r19
  80b6c4:	b82d883a 	mov	r22,r23
  80b6c8:	002f883a 	mov	r23,zero
  80b6cc:	db401615 	stw	r13,88(sp)
  80b6d0:	d8801315 	stw	r2,76(sp)
  80b6d4:	d8c01415 	stw	r3,80(sp)
  80b6d8:	dcc01515 	stw	r19,84(sp)
  80b6dc:	0802ce80 	call	802ce8 <__muldi3>
  80b6e0:	b00d883a 	mov	r6,r22
  80b6e4:	000b883a 	mov	r5,zero
  80b6e8:	9009883a 	mov	r4,r18
  80b6ec:	b80f883a 	mov	r7,r23
  80b6f0:	1021883a 	mov	r16,r2
  80b6f4:	1823883a 	mov	r17,r3
  80b6f8:	0802ce80 	call	802ce8 <__muldi3>
  80b6fc:	8085883a 	add	r2,r16,r2
  80b700:	140d803a 	cmpltu	r6,r2,r16
  80b704:	88c7883a 	add	r3,r17,r3
  80b708:	30cd883a 	add	r6,r6,r3
  80b70c:	1029883a 	mov	r20,r2
  80b710:	302b883a 	mov	r21,r6
  80b714:	da801317 	ldw	r10,76(sp)
  80b718:	dac01417 	ldw	r11,80(sp)
  80b71c:	db001517 	ldw	r12,84(sp)
  80b720:	db401617 	ldw	r13,88(sp)
  80b724:	3440612e 	bgeu	r6,r17,80b8ac <__muldf3+0x318>
  80b728:	0009883a 	mov	r4,zero
  80b72c:	5105883a 	add	r2,r10,r4
  80b730:	128d803a 	cmpltu	r6,r2,r10
  80b734:	5d07883a 	add	r3,r11,r20
  80b738:	30cd883a 	add	r6,r6,r3
  80b73c:	0021883a 	mov	r16,zero
  80b740:	04400044 	movi	r17,1
  80b744:	1025883a 	mov	r18,r2
  80b748:	3027883a 	mov	r19,r6
  80b74c:	32c06236 	bltu	r6,r11,80b8d8 <__muldf3+0x344>
  80b750:	59807a26 	beq	r11,r6,80b93c <__muldf3+0x3a8>
  80b754:	680b883a 	mov	r5,r13
  80b758:	b80f883a 	mov	r7,r23
  80b75c:	6009883a 	mov	r4,r12
  80b760:	b00d883a 	mov	r6,r22
  80b764:	0802ce80 	call	802ce8 <__muldi3>
  80b768:	1009883a 	mov	r4,r2
  80b76c:	000f883a 	mov	r7,zero
  80b770:	1545883a 	add	r2,r2,r21
  80b774:	1111803a 	cmpltu	r8,r2,r4
  80b778:	19c7883a 	add	r3,r3,r7
  80b77c:	40c7883a 	add	r3,r8,r3
  80b780:	88cb883a 	add	r5,r17,r3
  80b784:	d8c00617 	ldw	r3,24(sp)
  80b788:	8089883a 	add	r4,r16,r2
  80b78c:	d8800b17 	ldw	r2,44(sp)
  80b790:	18c00104 	addi	r3,r3,4
  80b794:	240d803a 	cmpltu	r6,r4,r16
  80b798:	10c7883a 	add	r3,r2,r3
  80b79c:	2013883a 	mov	r9,r4
  80b7a0:	d8800a17 	ldw	r2,40(sp)
  80b7a4:	d9000517 	ldw	r4,20(sp)
  80b7a8:	314d883a 	add	r6,r6,r5
  80b7ac:	3015883a 	mov	r10,r6
  80b7b0:	2088c03a 	cmpne	r4,r4,r2
  80b7b4:	00880034 	movhi	r2,8192
  80b7b8:	10bfffc4 	addi	r2,r2,-1
  80b7bc:	d9000f15 	stw	r4,60(sp)
  80b7c0:	d8c01015 	stw	r3,64(sp)
  80b7c4:	1180162e 	bgeu	r2,r6,80b820 <__muldf3+0x28c>
  80b7c8:	1811883a 	mov	r8,r3
  80b7cc:	101f883a 	mov	r15,r2
  80b7d0:	980497fa 	slli	r2,r19,31
  80b7d4:	9016d07a 	srli	r11,r18,1
  80b7d8:	500697fa 	slli	r3,r10,31
  80b7dc:	480cd07a 	srli	r6,r9,1
  80b7e0:	500ed07a 	srli	r7,r10,1
  80b7e4:	12d6b03a 	or	r11,r2,r11
  80b7e8:	00800044 	movi	r2,1
  80b7ec:	198cb03a 	or	r6,r3,r6
  80b7f0:	4888703a 	and	r4,r9,r2
  80b7f4:	9818d07a 	srli	r12,r19,1
  80b7f8:	001b883a 	mov	r13,zero
  80b7fc:	03a00034 	movhi	r14,32768
  80b800:	3013883a 	mov	r9,r6
  80b804:	3815883a 	mov	r10,r7
  80b808:	4091883a 	add	r8,r8,r2
  80b80c:	20000226 	beq	r4,zero,80b818 <__muldf3+0x284>
  80b810:	5b64b03a 	or	r18,r11,r13
  80b814:	63a6b03a 	or	r19,r12,r14
  80b818:	7abfed36 	bltu	r15,r10,80b7d0 <__muldf3+0x23c>
  80b81c:	da001015 	stw	r8,64(sp)
  80b820:	00840034 	movhi	r2,4096
  80b824:	10bfffc4 	addi	r2,r2,-1
  80b828:	12801436 	bltu	r2,r10,80b87c <__muldf3+0x2e8>
  80b82c:	da001017 	ldw	r8,64(sp)
  80b830:	101f883a 	mov	r15,r2
  80b834:	4a45883a 	add	r2,r9,r9
  80b838:	124d803a 	cmpltu	r6,r2,r9
  80b83c:	5287883a 	add	r3,r10,r10
  80b840:	9497883a 	add	r11,r18,r18
  80b844:	5c8f803a 	cmpltu	r7,r11,r18
  80b848:	9cd9883a 	add	r12,r19,r19
  80b84c:	01000044 	movi	r4,1
  80b850:	30cd883a 	add	r6,r6,r3
  80b854:	3b0f883a 	add	r7,r7,r12
  80b858:	423fffc4 	addi	r8,r8,-1
  80b85c:	1013883a 	mov	r9,r2
  80b860:	3015883a 	mov	r10,r6
  80b864:	111ab03a 	or	r13,r2,r4
  80b868:	98003016 	blt	r19,zero,80b92c <__muldf3+0x398>
  80b86c:	5825883a 	mov	r18,r11
  80b870:	3827883a 	mov	r19,r7
  80b874:	7abfef2e 	bgeu	r15,r10,80b834 <__muldf3+0x2a0>
  80b878:	da001015 	stw	r8,64(sp)
  80b87c:	00803fc4 	movi	r2,255
  80b880:	488e703a 	and	r7,r9,r2
  80b884:	00802004 	movi	r2,128
  80b888:	0007883a 	mov	r3,zero
  80b88c:	0011883a 	mov	r8,zero
  80b890:	38801826 	beq	r7,r2,80b8f4 <__muldf3+0x360>
  80b894:	008000c4 	movi	r2,3
  80b898:	d9000e04 	addi	r4,sp,56
  80b89c:	da801215 	stw	r10,72(sp)
  80b8a0:	d8800e15 	stw	r2,56(sp)
  80b8a4:	da401115 	stw	r9,68(sp)
  80b8a8:	003f6a06 	br	80b654 <__muldf3+0xc0>
  80b8ac:	89802126 	beq	r17,r6,80b934 <__muldf3+0x3a0>
  80b8b0:	0009883a 	mov	r4,zero
  80b8b4:	5105883a 	add	r2,r10,r4
  80b8b8:	128d803a 	cmpltu	r6,r2,r10
  80b8bc:	5d07883a 	add	r3,r11,r20
  80b8c0:	30cd883a 	add	r6,r6,r3
  80b8c4:	0021883a 	mov	r16,zero
  80b8c8:	0023883a 	mov	r17,zero
  80b8cc:	1025883a 	mov	r18,r2
  80b8d0:	3027883a 	mov	r19,r6
  80b8d4:	32ff9e2e 	bgeu	r6,r11,80b750 <__muldf3+0x1bc>
  80b8d8:	00800044 	movi	r2,1
  80b8dc:	8089883a 	add	r4,r16,r2
  80b8e0:	240d803a 	cmpltu	r6,r4,r16
  80b8e4:	344d883a 	add	r6,r6,r17
  80b8e8:	2021883a 	mov	r16,r4
  80b8ec:	3023883a 	mov	r17,r6
  80b8f0:	003f9806 	br	80b754 <__muldf3+0x1c0>
  80b8f4:	403fe71e 	bne	r8,zero,80b894 <__muldf3+0x300>
  80b8f8:	01004004 	movi	r4,256
  80b8fc:	4904703a 	and	r2,r9,r4
  80b900:	10c4b03a 	or	r2,r2,r3
  80b904:	103fe31e 	bne	r2,zero,80b894 <__muldf3+0x300>
  80b908:	94c4b03a 	or	r2,r18,r19
  80b90c:	103fe126 	beq	r2,zero,80b894 <__muldf3+0x300>
  80b910:	49c5883a 	add	r2,r9,r7
  80b914:	1251803a 	cmpltu	r8,r2,r9
  80b918:	4291883a 	add	r8,r8,r10
  80b91c:	013fc004 	movi	r4,-256
  80b920:	1112703a 	and	r9,r2,r4
  80b924:	4015883a 	mov	r10,r8
  80b928:	003fda06 	br	80b894 <__muldf3+0x300>
  80b92c:	6813883a 	mov	r9,r13
  80b930:	003fce06 	br	80b86c <__muldf3+0x2d8>
  80b934:	143f7c36 	bltu	r2,r16,80b728 <__muldf3+0x194>
  80b938:	003fdd06 	br	80b8b0 <__muldf3+0x31c>
  80b93c:	12bf852e 	bgeu	r2,r10,80b754 <__muldf3+0x1c0>
  80b940:	003fe506 	br	80b8d8 <__muldf3+0x344>
  80b944:	00800084 	movi	r2,2
  80b948:	20bf351e 	bne	r4,r2,80b620 <__muldf3+0x8c>
  80b94c:	01002074 	movhi	r4,129
  80b950:	21064704 	addi	r4,r4,6428
  80b954:	003f3f06 	br	80b654 <__muldf3+0xc0>

0080b958 <__eqdf2>:
  80b958:	deffef04 	addi	sp,sp,-68
  80b95c:	dc400f15 	stw	r17,60(sp)
  80b960:	dc400404 	addi	r17,sp,16
  80b964:	2005883a 	mov	r2,r4
  80b968:	2807883a 	mov	r3,r5
  80b96c:	dc000e15 	stw	r16,56(sp)
  80b970:	d809883a 	mov	r4,sp
  80b974:	880b883a 	mov	r5,r17
  80b978:	dc000904 	addi	r16,sp,36
  80b97c:	d8c00115 	stw	r3,4(sp)
  80b980:	d8800015 	stw	r2,0(sp)
  80b984:	d9800215 	stw	r6,8(sp)
  80b988:	dfc01015 	stw	ra,64(sp)
  80b98c:	d9c00315 	stw	r7,12(sp)
  80b990:	08034100 	call	803410 <__unpack_d>
  80b994:	d9000204 	addi	r4,sp,8
  80b998:	800b883a 	mov	r5,r16
  80b99c:	08034100 	call	803410 <__unpack_d>
  80b9a0:	d8800417 	ldw	r2,16(sp)
  80b9a4:	00c00044 	movi	r3,1
  80b9a8:	180d883a 	mov	r6,r3
  80b9ac:	1880062e 	bgeu	r3,r2,80b9c8 <__eqdf2+0x70>
  80b9b0:	d8800917 	ldw	r2,36(sp)
  80b9b4:	8809883a 	mov	r4,r17
  80b9b8:	800b883a 	mov	r5,r16
  80b9bc:	1880022e 	bgeu	r3,r2,80b9c8 <__eqdf2+0x70>
  80b9c0:	08035480 	call	803548 <__fpcmp_parts_d>
  80b9c4:	100d883a 	mov	r6,r2
  80b9c8:	3005883a 	mov	r2,r6
  80b9cc:	dfc01017 	ldw	ra,64(sp)
  80b9d0:	dc400f17 	ldw	r17,60(sp)
  80b9d4:	dc000e17 	ldw	r16,56(sp)
  80b9d8:	dec01104 	addi	sp,sp,68
  80b9dc:	f800283a 	ret

0080b9e0 <__gtdf2>:
  80b9e0:	deffef04 	addi	sp,sp,-68
  80b9e4:	dc400f15 	stw	r17,60(sp)
  80b9e8:	dc400404 	addi	r17,sp,16
  80b9ec:	2005883a 	mov	r2,r4
  80b9f0:	2807883a 	mov	r3,r5
  80b9f4:	dc000e15 	stw	r16,56(sp)
  80b9f8:	d809883a 	mov	r4,sp
  80b9fc:	880b883a 	mov	r5,r17
  80ba00:	dc000904 	addi	r16,sp,36
  80ba04:	d8c00115 	stw	r3,4(sp)
  80ba08:	d8800015 	stw	r2,0(sp)
  80ba0c:	d9800215 	stw	r6,8(sp)
  80ba10:	dfc01015 	stw	ra,64(sp)
  80ba14:	d9c00315 	stw	r7,12(sp)
  80ba18:	08034100 	call	803410 <__unpack_d>
  80ba1c:	d9000204 	addi	r4,sp,8
  80ba20:	800b883a 	mov	r5,r16
  80ba24:	08034100 	call	803410 <__unpack_d>
  80ba28:	d8800417 	ldw	r2,16(sp)
  80ba2c:	00c00044 	movi	r3,1
  80ba30:	01bfffc4 	movi	r6,-1
  80ba34:	1880062e 	bgeu	r3,r2,80ba50 <__gtdf2+0x70>
  80ba38:	d8800917 	ldw	r2,36(sp)
  80ba3c:	8809883a 	mov	r4,r17
  80ba40:	800b883a 	mov	r5,r16
  80ba44:	1880022e 	bgeu	r3,r2,80ba50 <__gtdf2+0x70>
  80ba48:	08035480 	call	803548 <__fpcmp_parts_d>
  80ba4c:	100d883a 	mov	r6,r2
  80ba50:	3005883a 	mov	r2,r6
  80ba54:	dfc01017 	ldw	ra,64(sp)
  80ba58:	dc400f17 	ldw	r17,60(sp)
  80ba5c:	dc000e17 	ldw	r16,56(sp)
  80ba60:	dec01104 	addi	sp,sp,68
  80ba64:	f800283a 	ret

0080ba68 <__gedf2>:
  80ba68:	deffef04 	addi	sp,sp,-68
  80ba6c:	dc400f15 	stw	r17,60(sp)
  80ba70:	dc400404 	addi	r17,sp,16
  80ba74:	2005883a 	mov	r2,r4
  80ba78:	2807883a 	mov	r3,r5
  80ba7c:	dc000e15 	stw	r16,56(sp)
  80ba80:	d809883a 	mov	r4,sp
  80ba84:	880b883a 	mov	r5,r17
  80ba88:	dc000904 	addi	r16,sp,36
  80ba8c:	d8c00115 	stw	r3,4(sp)
  80ba90:	d8800015 	stw	r2,0(sp)
  80ba94:	d9800215 	stw	r6,8(sp)
  80ba98:	dfc01015 	stw	ra,64(sp)
  80ba9c:	d9c00315 	stw	r7,12(sp)
  80baa0:	08034100 	call	803410 <__unpack_d>
  80baa4:	d9000204 	addi	r4,sp,8
  80baa8:	800b883a 	mov	r5,r16
  80baac:	08034100 	call	803410 <__unpack_d>
  80bab0:	d8800417 	ldw	r2,16(sp)
  80bab4:	00c00044 	movi	r3,1
  80bab8:	01bfffc4 	movi	r6,-1
  80babc:	1880062e 	bgeu	r3,r2,80bad8 <__gedf2+0x70>
  80bac0:	d8800917 	ldw	r2,36(sp)
  80bac4:	8809883a 	mov	r4,r17
  80bac8:	800b883a 	mov	r5,r16
  80bacc:	1880022e 	bgeu	r3,r2,80bad8 <__gedf2+0x70>
  80bad0:	08035480 	call	803548 <__fpcmp_parts_d>
  80bad4:	100d883a 	mov	r6,r2
  80bad8:	3005883a 	mov	r2,r6
  80badc:	dfc01017 	ldw	ra,64(sp)
  80bae0:	dc400f17 	ldw	r17,60(sp)
  80bae4:	dc000e17 	ldw	r16,56(sp)
  80bae8:	dec01104 	addi	sp,sp,68
  80baec:	f800283a 	ret

0080baf0 <__ltdf2>:
  80baf0:	deffef04 	addi	sp,sp,-68
  80baf4:	dc400f15 	stw	r17,60(sp)
  80baf8:	dc400404 	addi	r17,sp,16
  80bafc:	2005883a 	mov	r2,r4
  80bb00:	2807883a 	mov	r3,r5
  80bb04:	dc000e15 	stw	r16,56(sp)
  80bb08:	d809883a 	mov	r4,sp
  80bb0c:	880b883a 	mov	r5,r17
  80bb10:	dc000904 	addi	r16,sp,36
  80bb14:	d8c00115 	stw	r3,4(sp)
  80bb18:	d8800015 	stw	r2,0(sp)
  80bb1c:	d9800215 	stw	r6,8(sp)
  80bb20:	dfc01015 	stw	ra,64(sp)
  80bb24:	d9c00315 	stw	r7,12(sp)
  80bb28:	08034100 	call	803410 <__unpack_d>
  80bb2c:	d9000204 	addi	r4,sp,8
  80bb30:	800b883a 	mov	r5,r16
  80bb34:	08034100 	call	803410 <__unpack_d>
  80bb38:	d8800417 	ldw	r2,16(sp)
  80bb3c:	00c00044 	movi	r3,1
  80bb40:	180d883a 	mov	r6,r3
  80bb44:	1880062e 	bgeu	r3,r2,80bb60 <__ltdf2+0x70>
  80bb48:	d8800917 	ldw	r2,36(sp)
  80bb4c:	8809883a 	mov	r4,r17
  80bb50:	800b883a 	mov	r5,r16
  80bb54:	1880022e 	bgeu	r3,r2,80bb60 <__ltdf2+0x70>
  80bb58:	08035480 	call	803548 <__fpcmp_parts_d>
  80bb5c:	100d883a 	mov	r6,r2
  80bb60:	3005883a 	mov	r2,r6
  80bb64:	dfc01017 	ldw	ra,64(sp)
  80bb68:	dc400f17 	ldw	r17,60(sp)
  80bb6c:	dc000e17 	ldw	r16,56(sp)
  80bb70:	dec01104 	addi	sp,sp,68
  80bb74:	f800283a 	ret

0080bb78 <__floatsidf>:
  80bb78:	2006d7fa 	srli	r3,r4,31
  80bb7c:	defff604 	addi	sp,sp,-40
  80bb80:	008000c4 	movi	r2,3
  80bb84:	dfc00915 	stw	ra,36(sp)
  80bb88:	dcc00815 	stw	r19,32(sp)
  80bb8c:	dc800715 	stw	r18,28(sp)
  80bb90:	dc400615 	stw	r17,24(sp)
  80bb94:	dc000515 	stw	r16,20(sp)
  80bb98:	d8800015 	stw	r2,0(sp)
  80bb9c:	d8c00115 	stw	r3,4(sp)
  80bba0:	20000f1e 	bne	r4,zero,80bbe0 <__floatsidf+0x68>
  80bba4:	00800084 	movi	r2,2
  80bba8:	d8800015 	stw	r2,0(sp)
  80bbac:	d809883a 	mov	r4,sp
  80bbb0:	08030fc0 	call	8030fc <__pack_d>
  80bbb4:	1009883a 	mov	r4,r2
  80bbb8:	180b883a 	mov	r5,r3
  80bbbc:	2005883a 	mov	r2,r4
  80bbc0:	2807883a 	mov	r3,r5
  80bbc4:	dfc00917 	ldw	ra,36(sp)
  80bbc8:	dcc00817 	ldw	r19,32(sp)
  80bbcc:	dc800717 	ldw	r18,28(sp)
  80bbd0:	dc400617 	ldw	r17,24(sp)
  80bbd4:	dc000517 	ldw	r16,20(sp)
  80bbd8:	dec00a04 	addi	sp,sp,40
  80bbdc:	f800283a 	ret
  80bbe0:	00800f04 	movi	r2,60
  80bbe4:	1807003a 	cmpeq	r3,r3,zero
  80bbe8:	d8800215 	stw	r2,8(sp)
  80bbec:	18001126 	beq	r3,zero,80bc34 <__floatsidf+0xbc>
  80bbf0:	0027883a 	mov	r19,zero
  80bbf4:	2025883a 	mov	r18,r4
  80bbf8:	d9000315 	stw	r4,12(sp)
  80bbfc:	dcc00415 	stw	r19,16(sp)
  80bc00:	0802d800 	call	802d80 <__clzsi2>
  80bc04:	11000744 	addi	r4,r2,29
  80bc08:	013fe80e 	bge	zero,r4,80bbac <__floatsidf+0x34>
  80bc0c:	10bfff44 	addi	r2,r2,-3
  80bc10:	10000c16 	blt	r2,zero,80bc44 <__floatsidf+0xcc>
  80bc14:	90a2983a 	sll	r17,r18,r2
  80bc18:	0021883a 	mov	r16,zero
  80bc1c:	d8800217 	ldw	r2,8(sp)
  80bc20:	dc400415 	stw	r17,16(sp)
  80bc24:	dc000315 	stw	r16,12(sp)
  80bc28:	1105c83a 	sub	r2,r2,r4
  80bc2c:	d8800215 	stw	r2,8(sp)
  80bc30:	003fde06 	br	80bbac <__floatsidf+0x34>
  80bc34:	00a00034 	movhi	r2,32768
  80bc38:	20800a26 	beq	r4,r2,80bc64 <__floatsidf+0xec>
  80bc3c:	0109c83a 	sub	r4,zero,r4
  80bc40:	003feb06 	br	80bbf0 <__floatsidf+0x78>
  80bc44:	9006d07a 	srli	r3,r18,1
  80bc48:	008007c4 	movi	r2,31
  80bc4c:	1105c83a 	sub	r2,r2,r4
  80bc50:	1886d83a 	srl	r3,r3,r2
  80bc54:	9922983a 	sll	r17,r19,r4
  80bc58:	9120983a 	sll	r16,r18,r4
  80bc5c:	1c62b03a 	or	r17,r3,r17
  80bc60:	003fee06 	br	80bc1c <__floatsidf+0xa4>
  80bc64:	0009883a 	mov	r4,zero
  80bc68:	01707834 	movhi	r5,49632
  80bc6c:	003fd306 	br	80bbbc <__floatsidf+0x44>

0080bc70 <__fixdfsi>:
  80bc70:	defff804 	addi	sp,sp,-32
  80bc74:	2005883a 	mov	r2,r4
  80bc78:	2807883a 	mov	r3,r5
  80bc7c:	d809883a 	mov	r4,sp
  80bc80:	d9400204 	addi	r5,sp,8
  80bc84:	d8c00115 	stw	r3,4(sp)
  80bc88:	d8800015 	stw	r2,0(sp)
  80bc8c:	dfc00715 	stw	ra,28(sp)
  80bc90:	08034100 	call	803410 <__unpack_d>
  80bc94:	d8c00217 	ldw	r3,8(sp)
  80bc98:	00800084 	movi	r2,2
  80bc9c:	1880051e 	bne	r3,r2,80bcb4 <__fixdfsi+0x44>
  80bca0:	0007883a 	mov	r3,zero
  80bca4:	1805883a 	mov	r2,r3
  80bca8:	dfc00717 	ldw	ra,28(sp)
  80bcac:	dec00804 	addi	sp,sp,32
  80bcb0:	f800283a 	ret
  80bcb4:	00800044 	movi	r2,1
  80bcb8:	10fff92e 	bgeu	r2,r3,80bca0 <__fixdfsi+0x30>
  80bcbc:	00800104 	movi	r2,4
  80bcc0:	18800426 	beq	r3,r2,80bcd4 <__fixdfsi+0x64>
  80bcc4:	d8c00417 	ldw	r3,16(sp)
  80bcc8:	183ff516 	blt	r3,zero,80bca0 <__fixdfsi+0x30>
  80bccc:	00800784 	movi	r2,30
  80bcd0:	10c0080e 	bge	r2,r3,80bcf4 <__fixdfsi+0x84>
  80bcd4:	d8800317 	ldw	r2,12(sp)
  80bcd8:	1000121e 	bne	r2,zero,80bd24 <__fixdfsi+0xb4>
  80bcdc:	00e00034 	movhi	r3,32768
  80bce0:	18ffffc4 	addi	r3,r3,-1
  80bce4:	1805883a 	mov	r2,r3
  80bce8:	dfc00717 	ldw	ra,28(sp)
  80bcec:	dec00804 	addi	sp,sp,32
  80bcf0:	f800283a 	ret
  80bcf4:	00800f04 	movi	r2,60
  80bcf8:	10d1c83a 	sub	r8,r2,r3
  80bcfc:	40bff804 	addi	r2,r8,-32
  80bd00:	d9800517 	ldw	r6,20(sp)
  80bd04:	d9c00617 	ldw	r7,24(sp)
  80bd08:	10000816 	blt	r2,zero,80bd2c <__fixdfsi+0xbc>
  80bd0c:	3888d83a 	srl	r4,r7,r2
  80bd10:	d8800317 	ldw	r2,12(sp)
  80bd14:	2007883a 	mov	r3,r4
  80bd18:	103fe226 	beq	r2,zero,80bca4 <__fixdfsi+0x34>
  80bd1c:	0107c83a 	sub	r3,zero,r4
  80bd20:	003fe006 	br	80bca4 <__fixdfsi+0x34>
  80bd24:	00e00034 	movhi	r3,32768
  80bd28:	003fde06 	br	80bca4 <__fixdfsi+0x34>
  80bd2c:	39c7883a 	add	r3,r7,r7
  80bd30:	008007c4 	movi	r2,31
  80bd34:	1205c83a 	sub	r2,r2,r8
  80bd38:	1886983a 	sll	r3,r3,r2
  80bd3c:	3208d83a 	srl	r4,r6,r8
  80bd40:	1908b03a 	or	r4,r3,r4
  80bd44:	003ff206 	br	80bd10 <__fixdfsi+0xa0>

0080bd48 <__floatunsidf>:
  80bd48:	defff204 	addi	sp,sp,-56
  80bd4c:	dfc00d15 	stw	ra,52(sp)
  80bd50:	ddc00c15 	stw	r23,48(sp)
  80bd54:	dd800b15 	stw	r22,44(sp)
  80bd58:	dd400a15 	stw	r21,40(sp)
  80bd5c:	dd000915 	stw	r20,36(sp)
  80bd60:	dcc00815 	stw	r19,32(sp)
  80bd64:	dc800715 	stw	r18,28(sp)
  80bd68:	dc400615 	stw	r17,24(sp)
  80bd6c:	dc000515 	stw	r16,20(sp)
  80bd70:	d8000115 	stw	zero,4(sp)
  80bd74:	20000f1e 	bne	r4,zero,80bdb4 <__floatunsidf+0x6c>
  80bd78:	00800084 	movi	r2,2
  80bd7c:	d8800015 	stw	r2,0(sp)
  80bd80:	d809883a 	mov	r4,sp
  80bd84:	08030fc0 	call	8030fc <__pack_d>
  80bd88:	dfc00d17 	ldw	ra,52(sp)
  80bd8c:	ddc00c17 	ldw	r23,48(sp)
  80bd90:	dd800b17 	ldw	r22,44(sp)
  80bd94:	dd400a17 	ldw	r21,40(sp)
  80bd98:	dd000917 	ldw	r20,36(sp)
  80bd9c:	dcc00817 	ldw	r19,32(sp)
  80bda0:	dc800717 	ldw	r18,28(sp)
  80bda4:	dc400617 	ldw	r17,24(sp)
  80bda8:	dc000517 	ldw	r16,20(sp)
  80bdac:	dec00e04 	addi	sp,sp,56
  80bdb0:	f800283a 	ret
  80bdb4:	008000c4 	movi	r2,3
  80bdb8:	00c00f04 	movi	r3,60
  80bdbc:	002f883a 	mov	r23,zero
  80bdc0:	202d883a 	mov	r22,r4
  80bdc4:	d8800015 	stw	r2,0(sp)
  80bdc8:	d8c00215 	stw	r3,8(sp)
  80bdcc:	d9000315 	stw	r4,12(sp)
  80bdd0:	ddc00415 	stw	r23,16(sp)
  80bdd4:	0802d800 	call	802d80 <__clzsi2>
  80bdd8:	12400744 	addi	r9,r2,29
  80bddc:	48000b16 	blt	r9,zero,80be0c <__floatunsidf+0xc4>
  80bde0:	483fe726 	beq	r9,zero,80bd80 <__floatunsidf+0x38>
  80bde4:	10bfff44 	addi	r2,r2,-3
  80bde8:	10002e16 	blt	r2,zero,80bea4 <__floatunsidf+0x15c>
  80bdec:	b0a2983a 	sll	r17,r22,r2
  80bdf0:	0021883a 	mov	r16,zero
  80bdf4:	d8800217 	ldw	r2,8(sp)
  80bdf8:	dc400415 	stw	r17,16(sp)
  80bdfc:	dc000315 	stw	r16,12(sp)
  80be00:	1245c83a 	sub	r2,r2,r9
  80be04:	d8800215 	stw	r2,8(sp)
  80be08:	003fdd06 	br	80bd80 <__floatunsidf+0x38>
  80be0c:	0255c83a 	sub	r10,zero,r9
  80be10:	51bff804 	addi	r6,r10,-32
  80be14:	30001b16 	blt	r6,zero,80be84 <__floatunsidf+0x13c>
  80be18:	b9a8d83a 	srl	r20,r23,r6
  80be1c:	002b883a 	mov	r21,zero
  80be20:	000f883a 	mov	r7,zero
  80be24:	01000044 	movi	r4,1
  80be28:	0011883a 	mov	r8,zero
  80be2c:	30002516 	blt	r6,zero,80bec4 <__floatunsidf+0x17c>
  80be30:	21a6983a 	sll	r19,r4,r6
  80be34:	0025883a 	mov	r18,zero
  80be38:	00bfffc4 	movi	r2,-1
  80be3c:	9089883a 	add	r4,r18,r2
  80be40:	988b883a 	add	r5,r19,r2
  80be44:	248d803a 	cmpltu	r6,r4,r18
  80be48:	314b883a 	add	r5,r6,r5
  80be4c:	b104703a 	and	r2,r22,r4
  80be50:	b946703a 	and	r3,r23,r5
  80be54:	10c4b03a 	or	r2,r2,r3
  80be58:	10000226 	beq	r2,zero,80be64 <__floatunsidf+0x11c>
  80be5c:	01c00044 	movi	r7,1
  80be60:	0011883a 	mov	r8,zero
  80be64:	d9000217 	ldw	r4,8(sp)
  80be68:	a1c4b03a 	or	r2,r20,r7
  80be6c:	aa06b03a 	or	r3,r21,r8
  80be70:	2249c83a 	sub	r4,r4,r9
  80be74:	d8c00415 	stw	r3,16(sp)
  80be78:	d9000215 	stw	r4,8(sp)
  80be7c:	d8800315 	stw	r2,12(sp)
  80be80:	003fbf06 	br	80bd80 <__floatunsidf+0x38>
  80be84:	bdc7883a 	add	r3,r23,r23
  80be88:	008007c4 	movi	r2,31
  80be8c:	1285c83a 	sub	r2,r2,r10
  80be90:	1886983a 	sll	r3,r3,r2
  80be94:	b2a8d83a 	srl	r20,r22,r10
  80be98:	baaad83a 	srl	r21,r23,r10
  80be9c:	1d28b03a 	or	r20,r3,r20
  80bea0:	003fdf06 	br	80be20 <__floatunsidf+0xd8>
  80bea4:	b006d07a 	srli	r3,r22,1
  80bea8:	008007c4 	movi	r2,31
  80beac:	1245c83a 	sub	r2,r2,r9
  80beb0:	1886d83a 	srl	r3,r3,r2
  80beb4:	ba62983a 	sll	r17,r23,r9
  80beb8:	b260983a 	sll	r16,r22,r9
  80bebc:	1c62b03a 	or	r17,r3,r17
  80bec0:	003fcc06 	br	80bdf4 <__floatunsidf+0xac>
  80bec4:	2006d07a 	srli	r3,r4,1
  80bec8:	008007c4 	movi	r2,31
  80becc:	1285c83a 	sub	r2,r2,r10
  80bed0:	18a6d83a 	srl	r19,r3,r2
  80bed4:	22a4983a 	sll	r18,r4,r10
  80bed8:	003fd706 	br	80be38 <__floatunsidf+0xf0>

0080bedc <udivmodsi4>:
  80bedc:	29001b2e 	bgeu	r5,r4,80bf4c <udivmodsi4+0x70>
  80bee0:	28001a16 	blt	r5,zero,80bf4c <udivmodsi4+0x70>
  80bee4:	00800044 	movi	r2,1
  80bee8:	0007883a 	mov	r3,zero
  80beec:	01c007c4 	movi	r7,31
  80bef0:	00000306 	br	80bf00 <udivmodsi4+0x24>
  80bef4:	19c01326 	beq	r3,r7,80bf44 <udivmodsi4+0x68>
  80bef8:	18c00044 	addi	r3,r3,1
  80befc:	28000416 	blt	r5,zero,80bf10 <udivmodsi4+0x34>
  80bf00:	294b883a 	add	r5,r5,r5
  80bf04:	1085883a 	add	r2,r2,r2
  80bf08:	293ffa36 	bltu	r5,r4,80bef4 <udivmodsi4+0x18>
  80bf0c:	10000d26 	beq	r2,zero,80bf44 <udivmodsi4+0x68>
  80bf10:	0007883a 	mov	r3,zero
  80bf14:	21400236 	bltu	r4,r5,80bf20 <udivmodsi4+0x44>
  80bf18:	2149c83a 	sub	r4,r4,r5
  80bf1c:	1886b03a 	or	r3,r3,r2
  80bf20:	1004d07a 	srli	r2,r2,1
  80bf24:	280ad07a 	srli	r5,r5,1
  80bf28:	103ffa1e 	bne	r2,zero,80bf14 <udivmodsi4+0x38>
  80bf2c:	30000226 	beq	r6,zero,80bf38 <udivmodsi4+0x5c>
  80bf30:	2005883a 	mov	r2,r4
  80bf34:	f800283a 	ret
  80bf38:	1809883a 	mov	r4,r3
  80bf3c:	2005883a 	mov	r2,r4
  80bf40:	f800283a 	ret
  80bf44:	0007883a 	mov	r3,zero
  80bf48:	003ff806 	br	80bf2c <udivmodsi4+0x50>
  80bf4c:	00800044 	movi	r2,1
  80bf50:	0007883a 	mov	r3,zero
  80bf54:	003fef06 	br	80bf14 <udivmodsi4+0x38>

0080bf58 <__divsi3>:
  80bf58:	defffe04 	addi	sp,sp,-8
  80bf5c:	dc000015 	stw	r16,0(sp)
  80bf60:	dfc00115 	stw	ra,4(sp)
  80bf64:	0021883a 	mov	r16,zero
  80bf68:	20000c16 	blt	r4,zero,80bf9c <__divsi3+0x44>
  80bf6c:	000d883a 	mov	r6,zero
  80bf70:	28000e16 	blt	r5,zero,80bfac <__divsi3+0x54>
  80bf74:	080bedc0 	call	80bedc <udivmodsi4>
  80bf78:	1007883a 	mov	r3,r2
  80bf7c:	8005003a 	cmpeq	r2,r16,zero
  80bf80:	1000011e 	bne	r2,zero,80bf88 <__divsi3+0x30>
  80bf84:	00c7c83a 	sub	r3,zero,r3
  80bf88:	1805883a 	mov	r2,r3
  80bf8c:	dfc00117 	ldw	ra,4(sp)
  80bf90:	dc000017 	ldw	r16,0(sp)
  80bf94:	dec00204 	addi	sp,sp,8
  80bf98:	f800283a 	ret
  80bf9c:	0109c83a 	sub	r4,zero,r4
  80bfa0:	04000044 	movi	r16,1
  80bfa4:	000d883a 	mov	r6,zero
  80bfa8:	283ff20e 	bge	r5,zero,80bf74 <__divsi3+0x1c>
  80bfac:	014bc83a 	sub	r5,zero,r5
  80bfb0:	8021003a 	cmpeq	r16,r16,zero
  80bfb4:	003fef06 	br	80bf74 <__divsi3+0x1c>

0080bfb8 <__modsi3>:
  80bfb8:	deffff04 	addi	sp,sp,-4
  80bfbc:	dfc00015 	stw	ra,0(sp)
  80bfc0:	01800044 	movi	r6,1
  80bfc4:	2807883a 	mov	r3,r5
  80bfc8:	20000416 	blt	r4,zero,80bfdc <__modsi3+0x24>
  80bfcc:	28000c16 	blt	r5,zero,80c000 <__modsi3+0x48>
  80bfd0:	dfc00017 	ldw	ra,0(sp)
  80bfd4:	dec00104 	addi	sp,sp,4
  80bfd8:	080bedc1 	jmpi	80bedc <udivmodsi4>
  80bfdc:	0109c83a 	sub	r4,zero,r4
  80bfe0:	28000b16 	blt	r5,zero,80c010 <__modsi3+0x58>
  80bfe4:	180b883a 	mov	r5,r3
  80bfe8:	01800044 	movi	r6,1
  80bfec:	080bedc0 	call	80bedc <udivmodsi4>
  80bff0:	0085c83a 	sub	r2,zero,r2
  80bff4:	dfc00017 	ldw	ra,0(sp)
  80bff8:	dec00104 	addi	sp,sp,4
  80bffc:	f800283a 	ret
  80c000:	014bc83a 	sub	r5,zero,r5
  80c004:	dfc00017 	ldw	ra,0(sp)
  80c008:	dec00104 	addi	sp,sp,4
  80c00c:	080bedc1 	jmpi	80bedc <udivmodsi4>
  80c010:	0147c83a 	sub	r3,zero,r5
  80c014:	003ff306 	br	80bfe4 <__modsi3+0x2c>

0080c018 <__udivsi3>:
  80c018:	000d883a 	mov	r6,zero
  80c01c:	080bedc1 	jmpi	80bedc <udivmodsi4>

0080c020 <__umodsi3>:
  80c020:	01800044 	movi	r6,1
  80c024:	080bedc1 	jmpi	80bedc <udivmodsi4>

0080c028 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80c028:	defff804 	addi	sp,sp,-32
  80c02c:	dfc00715 	stw	ra,28(sp)
  80c030:	df000615 	stw	fp,24(sp)
  80c034:	df000604 	addi	fp,sp,24
  80c038:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80c03c:	e0bffc17 	ldw	r2,-16(fp)
  80c040:	1004803a 	cmplt	r2,r2,zero
  80c044:	1000081e 	bne	r2,zero,80c068 <close+0x40>
  80c048:	e0bffc17 	ldw	r2,-16(fp)
  80c04c:	10800324 	muli	r2,r2,12
  80c050:	1007883a 	mov	r3,r2
  80c054:	00802074 	movhi	r2,129
  80c058:	10897104 	addi	r2,r2,9668
  80c05c:	1887883a 	add	r3,r3,r2
  80c060:	e0ffff15 	stw	r3,-4(fp)
  80c064:	00000106 	br	80c06c <close+0x44>
  80c068:	e03fff15 	stw	zero,-4(fp)
  80c06c:	e0bfff17 	ldw	r2,-4(fp)
  80c070:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80c074:	e0bffb17 	ldw	r2,-20(fp)
  80c078:	1005003a 	cmpeq	r2,r2,zero
  80c07c:	10001d1e 	bne	r2,zero,80c0f4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80c080:	e0bffb17 	ldw	r2,-20(fp)
  80c084:	10800017 	ldw	r2,0(r2)
  80c088:	10800417 	ldw	r2,16(r2)
  80c08c:	1005003a 	cmpeq	r2,r2,zero
  80c090:	1000071e 	bne	r2,zero,80c0b0 <close+0x88>
  80c094:	e0bffb17 	ldw	r2,-20(fp)
  80c098:	10800017 	ldw	r2,0(r2)
  80c09c:	10800417 	ldw	r2,16(r2)
  80c0a0:	e13ffb17 	ldw	r4,-20(fp)
  80c0a4:	103ee83a 	callr	r2
  80c0a8:	e0bffe15 	stw	r2,-8(fp)
  80c0ac:	00000106 	br	80c0b4 <close+0x8c>
  80c0b0:	e03ffe15 	stw	zero,-8(fp)
  80c0b4:	e0bffe17 	ldw	r2,-8(fp)
  80c0b8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c0bc:	e13ffc17 	ldw	r4,-16(fp)
  80c0c0:	080c86c0 	call	80c86c <alt_release_fd>
    if (rval < 0)
  80c0c4:	e0bffa17 	ldw	r2,-24(fp)
  80c0c8:	1004403a 	cmpge	r2,r2,zero
  80c0cc:	1000071e 	bne	r2,zero,80c0ec <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80c0d0:	080c1240 	call	80c124 <alt_get_errno>
  80c0d4:	e0fffa17 	ldw	r3,-24(fp)
  80c0d8:	00c7c83a 	sub	r3,zero,r3
  80c0dc:	10c00015 	stw	r3,0(r2)
      return -1;
  80c0e0:	00bfffc4 	movi	r2,-1
  80c0e4:	e0bffd15 	stw	r2,-12(fp)
  80c0e8:	00000806 	br	80c10c <close+0xe4>
    }
    return 0;
  80c0ec:	e03ffd15 	stw	zero,-12(fp)
  80c0f0:	00000606 	br	80c10c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c0f4:	080c1240 	call	80c124 <alt_get_errno>
  80c0f8:	1007883a 	mov	r3,r2
  80c0fc:	00801444 	movi	r2,81
  80c100:	18800015 	stw	r2,0(r3)
    return -1;
  80c104:	00bfffc4 	movi	r2,-1
  80c108:	e0bffd15 	stw	r2,-12(fp)
  80c10c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80c110:	e037883a 	mov	sp,fp
  80c114:	dfc00117 	ldw	ra,4(sp)
  80c118:	df000017 	ldw	fp,0(sp)
  80c11c:	dec00204 	addi	sp,sp,8
  80c120:	f800283a 	ret

0080c124 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c124:	defffd04 	addi	sp,sp,-12
  80c128:	dfc00215 	stw	ra,8(sp)
  80c12c:	df000115 	stw	fp,4(sp)
  80c130:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c134:	00802074 	movhi	r2,129
  80c138:	108e5a04 	addi	r2,r2,14696
  80c13c:	10800017 	ldw	r2,0(r2)
  80c140:	1005003a 	cmpeq	r2,r2,zero
  80c144:	1000061e 	bne	r2,zero,80c160 <alt_get_errno+0x3c>
  80c148:	00802074 	movhi	r2,129
  80c14c:	108e5a04 	addi	r2,r2,14696
  80c150:	10800017 	ldw	r2,0(r2)
  80c154:	103ee83a 	callr	r2
  80c158:	e0bfff15 	stw	r2,-4(fp)
  80c15c:	00000306 	br	80c16c <alt_get_errno+0x48>
  80c160:	00802074 	movhi	r2,129
  80c164:	10956b04 	addi	r2,r2,21932
  80c168:	e0bfff15 	stw	r2,-4(fp)
  80c16c:	e0bfff17 	ldw	r2,-4(fp)
}
  80c170:	e037883a 	mov	sp,fp
  80c174:	dfc00117 	ldw	ra,4(sp)
  80c178:	df000017 	ldw	fp,0(sp)
  80c17c:	dec00204 	addi	sp,sp,8
  80c180:	f800283a 	ret

0080c184 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80c184:	defffc04 	addi	sp,sp,-16
  80c188:	df000315 	stw	fp,12(sp)
  80c18c:	df000304 	addi	fp,sp,12
  80c190:	e13ffd15 	stw	r4,-12(fp)
  80c194:	e17ffe15 	stw	r5,-8(fp)
  80c198:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80c19c:	e0bfff17 	ldw	r2,-4(fp)
}
  80c1a0:	e037883a 	mov	sp,fp
  80c1a4:	df000017 	ldw	fp,0(sp)
  80c1a8:	dec00104 	addi	sp,sp,4
  80c1ac:	f800283a 	ret

0080c1b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80c1b0:	defff904 	addi	sp,sp,-28
  80c1b4:	dfc00615 	stw	ra,24(sp)
  80c1b8:	df000515 	stw	fp,20(sp)
  80c1bc:	df000504 	addi	fp,sp,20
  80c1c0:	e13ffc15 	stw	r4,-16(fp)
  80c1c4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c1c8:	e0bffc17 	ldw	r2,-16(fp)
  80c1cc:	1004803a 	cmplt	r2,r2,zero
  80c1d0:	1000081e 	bne	r2,zero,80c1f4 <fstat+0x44>
  80c1d4:	e0bffc17 	ldw	r2,-16(fp)
  80c1d8:	10800324 	muli	r2,r2,12
  80c1dc:	1007883a 	mov	r3,r2
  80c1e0:	00802074 	movhi	r2,129
  80c1e4:	10897104 	addi	r2,r2,9668
  80c1e8:	1887883a 	add	r3,r3,r2
  80c1ec:	e0ffff15 	stw	r3,-4(fp)
  80c1f0:	00000106 	br	80c1f8 <fstat+0x48>
  80c1f4:	e03fff15 	stw	zero,-4(fp)
  80c1f8:	e0bfff17 	ldw	r2,-4(fp)
  80c1fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80c200:	e0bffb17 	ldw	r2,-20(fp)
  80c204:	1005003a 	cmpeq	r2,r2,zero
  80c208:	1000121e 	bne	r2,zero,80c254 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80c20c:	e0bffb17 	ldw	r2,-20(fp)
  80c210:	10800017 	ldw	r2,0(r2)
  80c214:	10800817 	ldw	r2,32(r2)
  80c218:	1005003a 	cmpeq	r2,r2,zero
  80c21c:	1000081e 	bne	r2,zero,80c240 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80c220:	e0bffb17 	ldw	r2,-20(fp)
  80c224:	10800017 	ldw	r2,0(r2)
  80c228:	10800817 	ldw	r2,32(r2)
  80c22c:	e13ffb17 	ldw	r4,-20(fp)
  80c230:	e17ffd17 	ldw	r5,-12(fp)
  80c234:	103ee83a 	callr	r2
  80c238:	e0bffe15 	stw	r2,-8(fp)
  80c23c:	00000b06 	br	80c26c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80c240:	e0fffd17 	ldw	r3,-12(fp)
  80c244:	00880004 	movi	r2,8192
  80c248:	18800115 	stw	r2,4(r3)
      return 0;
  80c24c:	e03ffe15 	stw	zero,-8(fp)
  80c250:	00000606 	br	80c26c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c254:	080c2840 	call	80c284 <alt_get_errno>
  80c258:	1007883a 	mov	r3,r2
  80c25c:	00801444 	movi	r2,81
  80c260:	18800015 	stw	r2,0(r3)
    return -1;
  80c264:	00bfffc4 	movi	r2,-1
  80c268:	e0bffe15 	stw	r2,-8(fp)
  80c26c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80c270:	e037883a 	mov	sp,fp
  80c274:	dfc00117 	ldw	ra,4(sp)
  80c278:	df000017 	ldw	fp,0(sp)
  80c27c:	dec00204 	addi	sp,sp,8
  80c280:	f800283a 	ret

0080c284 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c284:	defffd04 	addi	sp,sp,-12
  80c288:	dfc00215 	stw	ra,8(sp)
  80c28c:	df000115 	stw	fp,4(sp)
  80c290:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c294:	00802074 	movhi	r2,129
  80c298:	108e5a04 	addi	r2,r2,14696
  80c29c:	10800017 	ldw	r2,0(r2)
  80c2a0:	1005003a 	cmpeq	r2,r2,zero
  80c2a4:	1000061e 	bne	r2,zero,80c2c0 <alt_get_errno+0x3c>
  80c2a8:	00802074 	movhi	r2,129
  80c2ac:	108e5a04 	addi	r2,r2,14696
  80c2b0:	10800017 	ldw	r2,0(r2)
  80c2b4:	103ee83a 	callr	r2
  80c2b8:	e0bfff15 	stw	r2,-4(fp)
  80c2bc:	00000306 	br	80c2cc <alt_get_errno+0x48>
  80c2c0:	00802074 	movhi	r2,129
  80c2c4:	10956b04 	addi	r2,r2,21932
  80c2c8:	e0bfff15 	stw	r2,-4(fp)
  80c2cc:	e0bfff17 	ldw	r2,-4(fp)
}
  80c2d0:	e037883a 	mov	sp,fp
  80c2d4:	dfc00117 	ldw	ra,4(sp)
  80c2d8:	df000017 	ldw	fp,0(sp)
  80c2dc:	dec00204 	addi	sp,sp,8
  80c2e0:	f800283a 	ret

0080c2e4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80c2e4:	deffeb04 	addi	sp,sp,-84
  80c2e8:	dfc01415 	stw	ra,80(sp)
  80c2ec:	df001315 	stw	fp,76(sp)
  80c2f0:	df001304 	addi	fp,sp,76
  80c2f4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c2f8:	e0bffd17 	ldw	r2,-12(fp)
  80c2fc:	1004803a 	cmplt	r2,r2,zero
  80c300:	1000081e 	bne	r2,zero,80c324 <isatty+0x40>
  80c304:	e0bffd17 	ldw	r2,-12(fp)
  80c308:	10800324 	muli	r2,r2,12
  80c30c:	1007883a 	mov	r3,r2
  80c310:	00802074 	movhi	r2,129
  80c314:	10897104 	addi	r2,r2,9668
  80c318:	1887883a 	add	r3,r3,r2
  80c31c:	e0ffff15 	stw	r3,-4(fp)
  80c320:	00000106 	br	80c328 <isatty+0x44>
  80c324:	e03fff15 	stw	zero,-4(fp)
  80c328:	e0bfff17 	ldw	r2,-4(fp)
  80c32c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80c330:	e0bfed17 	ldw	r2,-76(fp)
  80c334:	1005003a 	cmpeq	r2,r2,zero
  80c338:	10000f1e 	bne	r2,zero,80c378 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80c33c:	e0bfed17 	ldw	r2,-76(fp)
  80c340:	10800017 	ldw	r2,0(r2)
  80c344:	10800817 	ldw	r2,32(r2)
  80c348:	1004c03a 	cmpne	r2,r2,zero
  80c34c:	1000031e 	bne	r2,zero,80c35c <isatty+0x78>
    {
      return 1;
  80c350:	00800044 	movi	r2,1
  80c354:	e0bffe15 	stw	r2,-8(fp)
  80c358:	00000c06 	br	80c38c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80c35c:	e17fee04 	addi	r5,fp,-72
  80c360:	e13ffd17 	ldw	r4,-12(fp)
  80c364:	080c1b00 	call	80c1b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80c368:	e0bfef17 	ldw	r2,-68(fp)
  80c36c:	10880020 	cmpeqi	r2,r2,8192
  80c370:	e0bffe15 	stw	r2,-8(fp)
  80c374:	00000506 	br	80c38c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c378:	080c3a40 	call	80c3a4 <alt_get_errno>
  80c37c:	1007883a 	mov	r3,r2
  80c380:	00801444 	movi	r2,81
  80c384:	18800015 	stw	r2,0(r3)
    return 0;
  80c388:	e03ffe15 	stw	zero,-8(fp)
  80c38c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80c390:	e037883a 	mov	sp,fp
  80c394:	dfc00117 	ldw	ra,4(sp)
  80c398:	df000017 	ldw	fp,0(sp)
  80c39c:	dec00204 	addi	sp,sp,8
  80c3a0:	f800283a 	ret

0080c3a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c3a4:	defffd04 	addi	sp,sp,-12
  80c3a8:	dfc00215 	stw	ra,8(sp)
  80c3ac:	df000115 	stw	fp,4(sp)
  80c3b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c3b4:	00802074 	movhi	r2,129
  80c3b8:	108e5a04 	addi	r2,r2,14696
  80c3bc:	10800017 	ldw	r2,0(r2)
  80c3c0:	1005003a 	cmpeq	r2,r2,zero
  80c3c4:	1000061e 	bne	r2,zero,80c3e0 <alt_get_errno+0x3c>
  80c3c8:	00802074 	movhi	r2,129
  80c3cc:	108e5a04 	addi	r2,r2,14696
  80c3d0:	10800017 	ldw	r2,0(r2)
  80c3d4:	103ee83a 	callr	r2
  80c3d8:	e0bfff15 	stw	r2,-4(fp)
  80c3dc:	00000306 	br	80c3ec <alt_get_errno+0x48>
  80c3e0:	00802074 	movhi	r2,129
  80c3e4:	10956b04 	addi	r2,r2,21932
  80c3e8:	e0bfff15 	stw	r2,-4(fp)
  80c3ec:	e0bfff17 	ldw	r2,-4(fp)
}
  80c3f0:	e037883a 	mov	sp,fp
  80c3f4:	dfc00117 	ldw	ra,4(sp)
  80c3f8:	df000017 	ldw	fp,0(sp)
  80c3fc:	dec00204 	addi	sp,sp,8
  80c400:	f800283a 	ret

0080c404 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80c404:	defffe04 	addi	sp,sp,-8
  80c408:	dfc00115 	stw	ra,4(sp)
  80c40c:	df000015 	stw	fp,0(sp)
  80c410:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80c414:	01002074 	movhi	r4,129
  80c418:	210e6304 	addi	r4,r4,14732
  80c41c:	01402074 	movhi	r5,129
  80c420:	29476204 	addi	r5,r5,7560
  80c424:	01802074 	movhi	r6,129
  80c428:	318e6304 	addi	r6,r6,14732
  80c42c:	080c4840 	call	80c484 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80c430:	01002034 	movhi	r4,128
  80c434:	21000804 	addi	r4,r4,32
  80c438:	01402034 	movhi	r5,128
  80c43c:	29400804 	addi	r5,r5,32
  80c440:	01802034 	movhi	r6,128
  80c444:	31806d04 	addi	r6,r6,436
  80c448:	080c4840 	call	80c484 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80c44c:	01002074 	movhi	r4,129
  80c450:	21061c04 	addi	r4,r4,6256
  80c454:	01402074 	movhi	r5,129
  80c458:	29461c04 	addi	r5,r5,6256
  80c45c:	01802074 	movhi	r6,129
  80c460:	31876204 	addi	r6,r6,7560
  80c464:	080c4840 	call	80c484 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80c468:	081049c0 	call	81049c <alt_dcache_flush_all>
  alt_icache_flush_all();
  80c46c:	08107e00 	call	8107e0 <alt_icache_flush_all>
}
  80c470:	e037883a 	mov	sp,fp
  80c474:	dfc00117 	ldw	ra,4(sp)
  80c478:	df000017 	ldw	fp,0(sp)
  80c47c:	dec00204 	addi	sp,sp,8
  80c480:	f800283a 	ret

0080c484 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80c484:	defffc04 	addi	sp,sp,-16
  80c488:	df000315 	stw	fp,12(sp)
  80c48c:	df000304 	addi	fp,sp,12
  80c490:	e13ffd15 	stw	r4,-12(fp)
  80c494:	e17ffe15 	stw	r5,-8(fp)
  80c498:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80c49c:	e0fffe17 	ldw	r3,-8(fp)
  80c4a0:	e0bffd17 	ldw	r2,-12(fp)
  80c4a4:	18800e26 	beq	r3,r2,80c4e0 <alt_load_section+0x5c>
  {
    while( to != end )
  80c4a8:	00000a06 	br	80c4d4 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80c4ac:	e0bffd17 	ldw	r2,-12(fp)
  80c4b0:	10c00017 	ldw	r3,0(r2)
  80c4b4:	e0bffe17 	ldw	r2,-8(fp)
  80c4b8:	10c00015 	stw	r3,0(r2)
  80c4bc:	e0bffe17 	ldw	r2,-8(fp)
  80c4c0:	10800104 	addi	r2,r2,4
  80c4c4:	e0bffe15 	stw	r2,-8(fp)
  80c4c8:	e0bffd17 	ldw	r2,-12(fp)
  80c4cc:	10800104 	addi	r2,r2,4
  80c4d0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80c4d4:	e0fffe17 	ldw	r3,-8(fp)
  80c4d8:	e0bfff17 	ldw	r2,-4(fp)
  80c4dc:	18bff31e 	bne	r3,r2,80c4ac <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80c4e0:	e037883a 	mov	sp,fp
  80c4e4:	df000017 	ldw	fp,0(sp)
  80c4e8:	dec00104 	addi	sp,sp,4
  80c4ec:	f800283a 	ret

0080c4f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80c4f0:	defff804 	addi	sp,sp,-32
  80c4f4:	dfc00715 	stw	ra,28(sp)
  80c4f8:	df000615 	stw	fp,24(sp)
  80c4fc:	df000604 	addi	fp,sp,24
  80c500:	e13ffc15 	stw	r4,-16(fp)
  80c504:	e17ffd15 	stw	r5,-12(fp)
  80c508:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80c50c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c510:	e0bffc17 	ldw	r2,-16(fp)
  80c514:	1004803a 	cmplt	r2,r2,zero
  80c518:	1000081e 	bne	r2,zero,80c53c <lseek+0x4c>
  80c51c:	e0bffc17 	ldw	r2,-16(fp)
  80c520:	10800324 	muli	r2,r2,12
  80c524:	1007883a 	mov	r3,r2
  80c528:	00802074 	movhi	r2,129
  80c52c:	10897104 	addi	r2,r2,9668
  80c530:	1887883a 	add	r3,r3,r2
  80c534:	e0ffff15 	stw	r3,-4(fp)
  80c538:	00000106 	br	80c540 <lseek+0x50>
  80c53c:	e03fff15 	stw	zero,-4(fp)
  80c540:	e0bfff17 	ldw	r2,-4(fp)
  80c544:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80c548:	e0bffb17 	ldw	r2,-20(fp)
  80c54c:	1005003a 	cmpeq	r2,r2,zero
  80c550:	1000111e 	bne	r2,zero,80c598 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80c554:	e0bffb17 	ldw	r2,-20(fp)
  80c558:	10800017 	ldw	r2,0(r2)
  80c55c:	10800717 	ldw	r2,28(r2)
  80c560:	1005003a 	cmpeq	r2,r2,zero
  80c564:	1000091e 	bne	r2,zero,80c58c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80c568:	e0bffb17 	ldw	r2,-20(fp)
  80c56c:	10800017 	ldw	r2,0(r2)
  80c570:	10800717 	ldw	r2,28(r2)
  80c574:	e13ffb17 	ldw	r4,-20(fp)
  80c578:	e17ffd17 	ldw	r5,-12(fp)
  80c57c:	e1bffe17 	ldw	r6,-8(fp)
  80c580:	103ee83a 	callr	r2
  80c584:	e0bffa15 	stw	r2,-24(fp)
  80c588:	00000506 	br	80c5a0 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80c58c:	00bfde84 	movi	r2,-134
  80c590:	e0bffa15 	stw	r2,-24(fp)
  80c594:	00000206 	br	80c5a0 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80c598:	00bfebc4 	movi	r2,-81
  80c59c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80c5a0:	e0bffa17 	ldw	r2,-24(fp)
  80c5a4:	1004403a 	cmpge	r2,r2,zero
  80c5a8:	1000071e 	bne	r2,zero,80c5c8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80c5ac:	080c5e00 	call	80c5e0 <alt_get_errno>
  80c5b0:	1007883a 	mov	r3,r2
  80c5b4:	e0bffa17 	ldw	r2,-24(fp)
  80c5b8:	0085c83a 	sub	r2,zero,r2
  80c5bc:	18800015 	stw	r2,0(r3)
    rc = -1;
  80c5c0:	00bfffc4 	movi	r2,-1
  80c5c4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80c5c8:	e0bffa17 	ldw	r2,-24(fp)
}
  80c5cc:	e037883a 	mov	sp,fp
  80c5d0:	dfc00117 	ldw	ra,4(sp)
  80c5d4:	df000017 	ldw	fp,0(sp)
  80c5d8:	dec00204 	addi	sp,sp,8
  80c5dc:	f800283a 	ret

0080c5e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c5e0:	defffd04 	addi	sp,sp,-12
  80c5e4:	dfc00215 	stw	ra,8(sp)
  80c5e8:	df000115 	stw	fp,4(sp)
  80c5ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c5f0:	00802074 	movhi	r2,129
  80c5f4:	108e5a04 	addi	r2,r2,14696
  80c5f8:	10800017 	ldw	r2,0(r2)
  80c5fc:	1005003a 	cmpeq	r2,r2,zero
  80c600:	1000061e 	bne	r2,zero,80c61c <alt_get_errno+0x3c>
  80c604:	00802074 	movhi	r2,129
  80c608:	108e5a04 	addi	r2,r2,14696
  80c60c:	10800017 	ldw	r2,0(r2)
  80c610:	103ee83a 	callr	r2
  80c614:	e0bfff15 	stw	r2,-4(fp)
  80c618:	00000306 	br	80c628 <alt_get_errno+0x48>
  80c61c:	00802074 	movhi	r2,129
  80c620:	10956b04 	addi	r2,r2,21932
  80c624:	e0bfff15 	stw	r2,-4(fp)
  80c628:	e0bfff17 	ldw	r2,-4(fp)
}
  80c62c:	e037883a 	mov	sp,fp
  80c630:	dfc00117 	ldw	ra,4(sp)
  80c634:	df000017 	ldw	fp,0(sp)
  80c638:	dec00204 	addi	sp,sp,8
  80c63c:	f800283a 	ret

0080c640 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80c640:	defffd04 	addi	sp,sp,-12
  80c644:	dfc00215 	stw	ra,8(sp)
  80c648:	df000115 	stw	fp,4(sp)
  80c64c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80c650:	0009883a 	mov	r4,zero
  80c654:	080cb080 	call	80cb08 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80c658:	080cb3c0 	call	80cb3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80c65c:	01002074 	movhi	r4,129
  80c660:	21070c04 	addi	r4,r4,7216
  80c664:	01402074 	movhi	r5,129
  80c668:	29470c04 	addi	r5,r5,7216
  80c66c:	01802074 	movhi	r6,129
  80c670:	31870c04 	addi	r6,r6,7216
  80c674:	0810ba00 	call	810ba0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80c678:	08105f40 	call	8105f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80c67c:	01002074 	movhi	r4,129
  80c680:	21019604 	addi	r4,r4,1624
  80c684:	08113080 	call	811308 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80c688:	d1272617 	ldw	r4,-25448(gp)
  80c68c:	d1672717 	ldw	r5,-25444(gp)
  80c690:	d1a72817 	ldw	r6,-25440(gp)
  80c694:	08006680 	call	800668 <main>
  80c698:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80c69c:	01000044 	movi	r4,1
  80c6a0:	080c0280 	call	80c028 <close>
  exit (result);
  80c6a4:	e13fff17 	ldw	r4,-4(fp)
  80c6a8:	081131c0 	call	81131c <exit>

0080c6ac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80c6ac:	defffe04 	addi	sp,sp,-8
  80c6b0:	df000115 	stw	fp,4(sp)
  80c6b4:	df000104 	addi	fp,sp,4
  80c6b8:	e13fff15 	stw	r4,-4(fp)
}
  80c6bc:	e037883a 	mov	sp,fp
  80c6c0:	df000017 	ldw	fp,0(sp)
  80c6c4:	dec00104 	addi	sp,sp,4
  80c6c8:	f800283a 	ret

0080c6cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80c6cc:	defffe04 	addi	sp,sp,-8
  80c6d0:	df000115 	stw	fp,4(sp)
  80c6d4:	df000104 	addi	fp,sp,4
  80c6d8:	e13fff15 	stw	r4,-4(fp)
}
  80c6dc:	e037883a 	mov	sp,fp
  80c6e0:	df000017 	ldw	fp,0(sp)
  80c6e4:	dec00104 	addi	sp,sp,4
  80c6e8:	f800283a 	ret

0080c6ec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80c6ec:	defff704 	addi	sp,sp,-36
  80c6f0:	dfc00815 	stw	ra,32(sp)
  80c6f4:	df000715 	stw	fp,28(sp)
  80c6f8:	df000704 	addi	fp,sp,28
  80c6fc:	e13ffb15 	stw	r4,-20(fp)
  80c700:	e17ffc15 	stw	r5,-16(fp)
  80c704:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c708:	e0bffb17 	ldw	r2,-20(fp)
  80c70c:	1004803a 	cmplt	r2,r2,zero
  80c710:	1000081e 	bne	r2,zero,80c734 <read+0x48>
  80c714:	e0bffb17 	ldw	r2,-20(fp)
  80c718:	10800324 	muli	r2,r2,12
  80c71c:	1007883a 	mov	r3,r2
  80c720:	00802074 	movhi	r2,129
  80c724:	10897104 	addi	r2,r2,9668
  80c728:	1887883a 	add	r3,r3,r2
  80c72c:	e0ffff15 	stw	r3,-4(fp)
  80c730:	00000106 	br	80c738 <read+0x4c>
  80c734:	e03fff15 	stw	zero,-4(fp)
  80c738:	e0bfff17 	ldw	r2,-4(fp)
  80c73c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80c740:	e0bffa17 	ldw	r2,-24(fp)
  80c744:	1005003a 	cmpeq	r2,r2,zero
  80c748:	1000241e 	bne	r2,zero,80c7dc <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80c74c:	e0bffa17 	ldw	r2,-24(fp)
  80c750:	10800217 	ldw	r2,8(r2)
  80c754:	108000cc 	andi	r2,r2,3
  80c758:	10800060 	cmpeqi	r2,r2,1
  80c75c:	10001a1e 	bne	r2,zero,80c7c8 <read+0xdc>
  80c760:	e0bffa17 	ldw	r2,-24(fp)
  80c764:	10800017 	ldw	r2,0(r2)
  80c768:	10800517 	ldw	r2,20(r2)
  80c76c:	1005003a 	cmpeq	r2,r2,zero
  80c770:	1000151e 	bne	r2,zero,80c7c8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80c774:	e0bffa17 	ldw	r2,-24(fp)
  80c778:	10800017 	ldw	r2,0(r2)
  80c77c:	10800517 	ldw	r2,20(r2)
  80c780:	e17ffc17 	ldw	r5,-16(fp)
  80c784:	e1bffd17 	ldw	r6,-12(fp)
  80c788:	e13ffa17 	ldw	r4,-24(fp)
  80c78c:	103ee83a 	callr	r2
  80c790:	e0bff915 	stw	r2,-28(fp)
  80c794:	e0bff917 	ldw	r2,-28(fp)
  80c798:	1004403a 	cmpge	r2,r2,zero
  80c79c:	1000071e 	bne	r2,zero,80c7bc <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80c7a0:	080c80c0 	call	80c80c <alt_get_errno>
  80c7a4:	e0fff917 	ldw	r3,-28(fp)
  80c7a8:	00c7c83a 	sub	r3,zero,r3
  80c7ac:	10c00015 	stw	r3,0(r2)
          return -1;
  80c7b0:	00bfffc4 	movi	r2,-1
  80c7b4:	e0bffe15 	stw	r2,-8(fp)
  80c7b8:	00000e06 	br	80c7f4 <read+0x108>
        }
        return rval;
  80c7bc:	e0bff917 	ldw	r2,-28(fp)
  80c7c0:	e0bffe15 	stw	r2,-8(fp)
  80c7c4:	00000b06 	br	80c7f4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80c7c8:	080c80c0 	call	80c80c <alt_get_errno>
  80c7cc:	1007883a 	mov	r3,r2
  80c7d0:	00800344 	movi	r2,13
  80c7d4:	18800015 	stw	r2,0(r3)
  80c7d8:	00000406 	br	80c7ec <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80c7dc:	080c80c0 	call	80c80c <alt_get_errno>
  80c7e0:	1007883a 	mov	r3,r2
  80c7e4:	00801444 	movi	r2,81
  80c7e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80c7ec:	00bfffc4 	movi	r2,-1
  80c7f0:	e0bffe15 	stw	r2,-8(fp)
  80c7f4:	e0bffe17 	ldw	r2,-8(fp)
}
  80c7f8:	e037883a 	mov	sp,fp
  80c7fc:	dfc00117 	ldw	ra,4(sp)
  80c800:	df000017 	ldw	fp,0(sp)
  80c804:	dec00204 	addi	sp,sp,8
  80c808:	f800283a 	ret

0080c80c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c80c:	defffd04 	addi	sp,sp,-12
  80c810:	dfc00215 	stw	ra,8(sp)
  80c814:	df000115 	stw	fp,4(sp)
  80c818:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c81c:	00802074 	movhi	r2,129
  80c820:	108e5a04 	addi	r2,r2,14696
  80c824:	10800017 	ldw	r2,0(r2)
  80c828:	1005003a 	cmpeq	r2,r2,zero
  80c82c:	1000061e 	bne	r2,zero,80c848 <alt_get_errno+0x3c>
  80c830:	00802074 	movhi	r2,129
  80c834:	108e5a04 	addi	r2,r2,14696
  80c838:	10800017 	ldw	r2,0(r2)
  80c83c:	103ee83a 	callr	r2
  80c840:	e0bfff15 	stw	r2,-4(fp)
  80c844:	00000306 	br	80c854 <alt_get_errno+0x48>
  80c848:	00802074 	movhi	r2,129
  80c84c:	10956b04 	addi	r2,r2,21932
  80c850:	e0bfff15 	stw	r2,-4(fp)
  80c854:	e0bfff17 	ldw	r2,-4(fp)
}
  80c858:	e037883a 	mov	sp,fp
  80c85c:	dfc00117 	ldw	ra,4(sp)
  80c860:	df000017 	ldw	fp,0(sp)
  80c864:	dec00204 	addi	sp,sp,8
  80c868:	f800283a 	ret

0080c86c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80c86c:	defffe04 	addi	sp,sp,-8
  80c870:	df000115 	stw	fp,4(sp)
  80c874:	df000104 	addi	fp,sp,4
  80c878:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80c87c:	e0bfff17 	ldw	r2,-4(fp)
  80c880:	108000d0 	cmplti	r2,r2,3
  80c884:	10000d1e 	bne	r2,zero,80c8bc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80c888:	e0bfff17 	ldw	r2,-4(fp)
  80c88c:	00c02074 	movhi	r3,129
  80c890:	18c97104 	addi	r3,r3,9668
  80c894:	10800324 	muli	r2,r2,12
  80c898:	10c5883a 	add	r2,r2,r3
  80c89c:	10800204 	addi	r2,r2,8
  80c8a0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80c8a4:	e0bfff17 	ldw	r2,-4(fp)
  80c8a8:	00c02074 	movhi	r3,129
  80c8ac:	18c97104 	addi	r3,r3,9668
  80c8b0:	10800324 	muli	r2,r2,12
  80c8b4:	10c5883a 	add	r2,r2,r3
  80c8b8:	10000015 	stw	zero,0(r2)
  }
}
  80c8bc:	e037883a 	mov	sp,fp
  80c8c0:	df000017 	ldw	fp,0(sp)
  80c8c4:	dec00104 	addi	sp,sp,4
  80c8c8:	f800283a 	ret

0080c8cc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80c8cc:	defff804 	addi	sp,sp,-32
  80c8d0:	df000715 	stw	fp,28(sp)
  80c8d4:	df000704 	addi	fp,sp,28
  80c8d8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c8dc:	0005303a 	rdctl	r2,status
  80c8e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c8e4:	e0fffb17 	ldw	r3,-20(fp)
  80c8e8:	00bfff84 	movi	r2,-2
  80c8ec:	1884703a 	and	r2,r3,r2
  80c8f0:	1001703a 	wrctl	status,r2
  
  return context;
  80c8f4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80c8f8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80c8fc:	d0a01517 	ldw	r2,-32684(gp)
  80c900:	10c000c4 	addi	r3,r2,3
  80c904:	00bfff04 	movi	r2,-4
  80c908:	1884703a 	and	r2,r3,r2
  80c90c:	d0a01515 	stw	r2,-32684(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80c910:	d0e01517 	ldw	r3,-32684(gp)
  80c914:	e0bffe17 	ldw	r2,-8(fp)
  80c918:	1887883a 	add	r3,r3,r2
  80c91c:	00802834 	movhi	r2,160
  80c920:	10800004 	addi	r2,r2,0
  80c924:	10c0072e 	bgeu	r2,r3,80c944 <sbrk+0x78>
  80c928:	e0bffd17 	ldw	r2,-12(fp)
  80c92c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c930:	e0bffa17 	ldw	r2,-24(fp)
  80c934:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80c938:	00bfffc4 	movi	r2,-1
  80c93c:	e0bfff15 	stw	r2,-4(fp)
  80c940:	00000c06 	br	80c974 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80c944:	d0a01517 	ldw	r2,-32684(gp)
  80c948:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80c94c:	d0e01517 	ldw	r3,-32684(gp)
  80c950:	e0bffe17 	ldw	r2,-8(fp)
  80c954:	1885883a 	add	r2,r3,r2
  80c958:	d0a01515 	stw	r2,-32684(gp)
  80c95c:	e0bffd17 	ldw	r2,-12(fp)
  80c960:	e0bff915 	stw	r2,-28(fp)
  80c964:	e0bff917 	ldw	r2,-28(fp)
  80c968:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80c96c:	e0bffc17 	ldw	r2,-16(fp)
  80c970:	e0bfff15 	stw	r2,-4(fp)
  80c974:	e0bfff17 	ldw	r2,-4(fp)
} 
  80c978:	e037883a 	mov	sp,fp
  80c97c:	df000017 	ldw	fp,0(sp)
  80c980:	dec00104 	addi	sp,sp,4
  80c984:	f800283a 	ret

0080c988 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80c988:	defff704 	addi	sp,sp,-36
  80c98c:	dfc00815 	stw	ra,32(sp)
  80c990:	df000715 	stw	fp,28(sp)
  80c994:	df000704 	addi	fp,sp,28
  80c998:	e13ffb15 	stw	r4,-20(fp)
  80c99c:	e17ffc15 	stw	r5,-16(fp)
  80c9a0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c9a4:	e0bffb17 	ldw	r2,-20(fp)
  80c9a8:	1004803a 	cmplt	r2,r2,zero
  80c9ac:	1000081e 	bne	r2,zero,80c9d0 <write+0x48>
  80c9b0:	e0bffb17 	ldw	r2,-20(fp)
  80c9b4:	10800324 	muli	r2,r2,12
  80c9b8:	1007883a 	mov	r3,r2
  80c9bc:	00802074 	movhi	r2,129
  80c9c0:	10897104 	addi	r2,r2,9668
  80c9c4:	1887883a 	add	r3,r3,r2
  80c9c8:	e0ffff15 	stw	r3,-4(fp)
  80c9cc:	00000106 	br	80c9d4 <write+0x4c>
  80c9d0:	e03fff15 	stw	zero,-4(fp)
  80c9d4:	e0bfff17 	ldw	r2,-4(fp)
  80c9d8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80c9dc:	e0bffa17 	ldw	r2,-24(fp)
  80c9e0:	1005003a 	cmpeq	r2,r2,zero
  80c9e4:	1000241e 	bne	r2,zero,80ca78 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80c9e8:	e0bffa17 	ldw	r2,-24(fp)
  80c9ec:	10800217 	ldw	r2,8(r2)
  80c9f0:	108000cc 	andi	r2,r2,3
  80c9f4:	1005003a 	cmpeq	r2,r2,zero
  80c9f8:	10001a1e 	bne	r2,zero,80ca64 <write+0xdc>
  80c9fc:	e0bffa17 	ldw	r2,-24(fp)
  80ca00:	10800017 	ldw	r2,0(r2)
  80ca04:	10800617 	ldw	r2,24(r2)
  80ca08:	1005003a 	cmpeq	r2,r2,zero
  80ca0c:	1000151e 	bne	r2,zero,80ca64 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80ca10:	e0bffa17 	ldw	r2,-24(fp)
  80ca14:	10800017 	ldw	r2,0(r2)
  80ca18:	10800617 	ldw	r2,24(r2)
  80ca1c:	e17ffc17 	ldw	r5,-16(fp)
  80ca20:	e1bffd17 	ldw	r6,-12(fp)
  80ca24:	e13ffa17 	ldw	r4,-24(fp)
  80ca28:	103ee83a 	callr	r2
  80ca2c:	e0bff915 	stw	r2,-28(fp)
  80ca30:	e0bff917 	ldw	r2,-28(fp)
  80ca34:	1004403a 	cmpge	r2,r2,zero
  80ca38:	1000071e 	bne	r2,zero,80ca58 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80ca3c:	080caa80 	call	80caa8 <alt_get_errno>
  80ca40:	e0fff917 	ldw	r3,-28(fp)
  80ca44:	00c7c83a 	sub	r3,zero,r3
  80ca48:	10c00015 	stw	r3,0(r2)
        return -1;
  80ca4c:	00bfffc4 	movi	r2,-1
  80ca50:	e0bffe15 	stw	r2,-8(fp)
  80ca54:	00000e06 	br	80ca90 <write+0x108>
      }
      return rval;
  80ca58:	e0bff917 	ldw	r2,-28(fp)
  80ca5c:	e0bffe15 	stw	r2,-8(fp)
  80ca60:	00000b06 	br	80ca90 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80ca64:	080caa80 	call	80caa8 <alt_get_errno>
  80ca68:	1007883a 	mov	r3,r2
  80ca6c:	00800344 	movi	r2,13
  80ca70:	18800015 	stw	r2,0(r3)
  80ca74:	00000406 	br	80ca88 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80ca78:	080caa80 	call	80caa8 <alt_get_errno>
  80ca7c:	1007883a 	mov	r3,r2
  80ca80:	00801444 	movi	r2,81
  80ca84:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80ca88:	00bfffc4 	movi	r2,-1
  80ca8c:	e0bffe15 	stw	r2,-8(fp)
  80ca90:	e0bffe17 	ldw	r2,-8(fp)
}
  80ca94:	e037883a 	mov	sp,fp
  80ca98:	dfc00117 	ldw	ra,4(sp)
  80ca9c:	df000017 	ldw	fp,0(sp)
  80caa0:	dec00204 	addi	sp,sp,8
  80caa4:	f800283a 	ret

0080caa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80caa8:	defffd04 	addi	sp,sp,-12
  80caac:	dfc00215 	stw	ra,8(sp)
  80cab0:	df000115 	stw	fp,4(sp)
  80cab4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80cab8:	00802074 	movhi	r2,129
  80cabc:	108e5a04 	addi	r2,r2,14696
  80cac0:	10800017 	ldw	r2,0(r2)
  80cac4:	1005003a 	cmpeq	r2,r2,zero
  80cac8:	1000061e 	bne	r2,zero,80cae4 <alt_get_errno+0x3c>
  80cacc:	00802074 	movhi	r2,129
  80cad0:	108e5a04 	addi	r2,r2,14696
  80cad4:	10800017 	ldw	r2,0(r2)
  80cad8:	103ee83a 	callr	r2
  80cadc:	e0bfff15 	stw	r2,-4(fp)
  80cae0:	00000306 	br	80caf0 <alt_get_errno+0x48>
  80cae4:	00802074 	movhi	r2,129
  80cae8:	10956b04 	addi	r2,r2,21932
  80caec:	e0bfff15 	stw	r2,-4(fp)
  80caf0:	e0bfff17 	ldw	r2,-4(fp)
}
  80caf4:	e037883a 	mov	sp,fp
  80caf8:	dfc00117 	ldw	ra,4(sp)
  80cafc:	df000017 	ldw	fp,0(sp)
  80cb00:	dec00204 	addi	sp,sp,8
  80cb04:	f800283a 	ret

0080cb08 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80cb08:	defffd04 	addi	sp,sp,-12
  80cb0c:	dfc00215 	stw	ra,8(sp)
  80cb10:	df000115 	stw	fp,4(sp)
  80cb14:	df000104 	addi	fp,sp,4
  80cb18:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
  80cb1c:	08110800 	call	811080 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80cb20:	00800044 	movi	r2,1
  80cb24:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80cb28:	e037883a 	mov	sp,fp
  80cb2c:	dfc00117 	ldw	ra,4(sp)
  80cb30:	df000017 	ldw	fp,0(sp)
  80cb34:	dec00204 	addi	sp,sp,8
  80cb38:	f800283a 	ret

0080cb3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80cb3c:	defffd04 	addi	sp,sp,-12
  80cb40:	dfc00215 	stw	ra,8(sp)
  80cb44:	df000115 	stw	fp,4(sp)
  80cb48:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80cb4c:	01002074 	movhi	r4,129
  80cb50:	2109db04 	addi	r4,r4,10092
  80cb54:	000b883a 	mov	r5,zero
  80cb58:	01800044 	movi	r6,1
  80cb5c:	080cf540 	call	80cf54 <altera_avalon_jtag_uart_init>
  80cb60:	01002074 	movhi	r4,129
  80cb64:	2109d104 	addi	r4,r4,10052
  80cb68:	080cdd40 	call	80cdd4 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
  80cb6c:	01002074 	movhi	r4,129
  80cb70:	210de904 	addi	r4,r4,14244
  80cb74:	080d8b80 	call	80d8b8 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
  80cb78:	01002074 	movhi	r4,129
  80cb7c:	210df804 	addi	r4,r4,14304
  80cb80:	080d8b80 	call	80d8b8 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
  80cb84:	01002074 	movhi	r4,129
  80cb88:	210e0704 	addi	r4,r4,14364
  80cb8c:	080d8b80 	call	80d8b8 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
  80cb90:	01002074 	movhi	r4,129
  80cb94:	210e1604 	addi	r4,r4,14424
  80cb98:	080d8b80 	call	80d8b8 <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
  80cb9c:	0007883a 	mov	r3,zero
  80cba0:	00800044 	movi	r2,1
  80cba4:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_RO_ZIPFS_INIT ( ALTERA_RO_ZIPFS, altera_ro_zipfs);
  80cba8:	01002074 	movhi	r4,129
  80cbac:	210e2504 	addi	r4,r4,14484
  80cbb0:	080ed840 	call	80ed84 <alt_ro_zipfs_check_valid>
  80cbb4:	1005003a 	cmpeq	r2,r2,zero
  80cbb8:	1000031e 	bne	r2,zero,80cbc8 <alt_sys_init+0x8c>
  80cbbc:	01002074 	movhi	r4,129
  80cbc0:	210e2504 	addi	r4,r4,14484
  80cbc4:	08107500 	call	810750 <alt_fs_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  80cbc8:	00802074 	movhi	r2,129
  80cbcc:	108e3104 	addi	r2,r2,14532
  80cbd0:	10800a17 	ldw	r2,40(r2)
  80cbd4:	10800017 	ldw	r2,0(r2)
  80cbd8:	1007883a 	mov	r3,r2
  80cbdc:	00802074 	movhi	r2,129
  80cbe0:	108e3104 	addi	r2,r2,14532
  80cbe4:	10c00b15 	stw	r3,44(r2)
  80cbe8:	00802074 	movhi	r2,129
  80cbec:	108e3104 	addi	r2,r2,14532
  80cbf0:	10800a17 	ldw	r2,40(r2)
  80cbf4:	10800104 	addi	r2,r2,4
  80cbf8:	10800017 	ldw	r2,0(r2)
  80cbfc:	1007883a 	mov	r3,r2
  80cc00:	00802074 	movhi	r2,129
  80cc04:	108e3104 	addi	r2,r2,14532
  80cc08:	10c00c15 	stw	r3,48(r2)
  80cc0c:	00802074 	movhi	r2,129
  80cc10:	108e3104 	addi	r2,r2,14532
  80cc14:	10800a17 	ldw	r2,40(r2)
  80cc18:	10800204 	addi	r2,r2,8
  80cc1c:	10800017 	ldw	r2,0(r2)
  80cc20:	10ffffcc 	andi	r3,r2,65535
  80cc24:	00802074 	movhi	r2,129
  80cc28:	108e3104 	addi	r2,r2,14532
  80cc2c:	10c00f15 	stw	r3,60(r2)
  80cc30:	00802074 	movhi	r2,129
  80cc34:	108e3104 	addi	r2,r2,14532
  80cc38:	10800a17 	ldw	r2,40(r2)
  80cc3c:	10800204 	addi	r2,r2,8
  80cc40:	10800017 	ldw	r2,0(r2)
  80cc44:	1005d43a 	srai	r2,r2,16
  80cc48:	10ffffcc 	andi	r3,r2,65535
  80cc4c:	00802074 	movhi	r2,129
  80cc50:	108e3104 	addi	r2,r2,14532
  80cc54:	10c01015 	stw	r3,64(r2)
  80cc58:	00802074 	movhi	r2,129
  80cc5c:	108e3104 	addi	r2,r2,14532
  80cc60:	10800a17 	ldw	r2,40(r2)
  80cc64:	10800304 	addi	r2,r2,12
  80cc68:	10800017 	ldw	r2,0(r2)
  80cc6c:	1005d07a 	srai	r2,r2,1
  80cc70:	10c0004c 	andi	r3,r2,1
  80cc74:	00802074 	movhi	r2,129
  80cc78:	108e3104 	addi	r2,r2,14532
  80cc7c:	10c00d15 	stw	r3,52(r2)
  80cc80:	00802074 	movhi	r2,129
  80cc84:	108e3104 	addi	r2,r2,14532
  80cc88:	10800a17 	ldw	r2,40(r2)
  80cc8c:	10800304 	addi	r2,r2,12
  80cc90:	10800017 	ldw	r2,0(r2)
  80cc94:	1005d13a 	srai	r2,r2,4
  80cc98:	10c003cc 	andi	r3,r2,15
  80cc9c:	00802074 	movhi	r2,129
  80cca0:	108e3104 	addi	r2,r2,14532
  80cca4:	10c00e15 	stw	r3,56(r2)
  80cca8:	00802074 	movhi	r2,129
  80ccac:	108e3104 	addi	r2,r2,14532
  80ccb0:	10800a17 	ldw	r2,40(r2)
  80ccb4:	10800304 	addi	r2,r2,12
  80ccb8:	10800017 	ldw	r2,0(r2)
  80ccbc:	1005d43a 	srai	r2,r2,16
  80ccc0:	1007883a 	mov	r3,r2
  80ccc4:	00bfffc4 	movi	r2,-1
  80ccc8:	1884703a 	and	r2,r3,r2
  80cccc:	e0bfff45 	stb	r2,-3(fp)
  80ccd0:	00802074 	movhi	r2,129
  80ccd4:	108e3104 	addi	r2,r2,14532
  80ccd8:	10800a17 	ldw	r2,40(r2)
  80ccdc:	10800304 	addi	r2,r2,12
  80cce0:	10800017 	ldw	r2,0(r2)
  80cce4:	1005d63a 	srai	r2,r2,24
  80cce8:	1007883a 	mov	r3,r2
  80ccec:	00bfffc4 	movi	r2,-1
  80ccf0:	1884703a 	and	r2,r3,r2
  80ccf4:	e0bfff05 	stb	r2,-4(fp)
  80ccf8:	00802074 	movhi	r2,129
  80ccfc:	108e3104 	addi	r2,r2,14532
  80cd00:	10800e17 	ldw	r2,56(r2)
  80cd04:	10800058 	cmpnei	r2,r2,1
  80cd08:	1000041e 	bne	r2,zero,80cd1c <alt_sys_init+0x1e0>
  80cd0c:	00802074 	movhi	r2,129
  80cd10:	108e3104 	addi	r2,r2,14532
  80cd14:	10001115 	stw	zero,68(r2)
  80cd18:	00000e06 	br	80cd54 <alt_sys_init+0x218>
  80cd1c:	00802074 	movhi	r2,129
  80cd20:	108e3104 	addi	r2,r2,14532
  80cd24:	10800e17 	ldw	r2,56(r2)
  80cd28:	10800098 	cmpnei	r2,r2,2
  80cd2c:	1000051e 	bne	r2,zero,80cd44 <alt_sys_init+0x208>
  80cd30:	00c02074 	movhi	r3,129
  80cd34:	18ce3104 	addi	r3,r3,14532
  80cd38:	00800044 	movi	r2,1
  80cd3c:	18801115 	stw	r2,68(r3)
  80cd40:	00000406 	br	80cd54 <alt_sys_init+0x218>
  80cd44:	00c02074 	movhi	r3,129
  80cd48:	18ce3104 	addi	r3,r3,14532
  80cd4c:	00800084 	movi	r2,2
  80cd50:	18801115 	stw	r2,68(r3)
  80cd54:	e0ffff43 	ldbu	r3,-3(fp)
  80cd58:	00800804 	movi	r2,32
  80cd5c:	10c7c83a 	sub	r3,r2,r3
  80cd60:	00bfffc4 	movi	r2,-1
  80cd64:	10c6d83a 	srl	r3,r2,r3
  80cd68:	00802074 	movhi	r2,129
  80cd6c:	108e3104 	addi	r2,r2,14532
  80cd70:	10c01215 	stw	r3,72(r2)
  80cd74:	e0ffff43 	ldbu	r3,-3(fp)
  80cd78:	00802074 	movhi	r2,129
  80cd7c:	108e3104 	addi	r2,r2,14532
  80cd80:	10801117 	ldw	r2,68(r2)
  80cd84:	1887883a 	add	r3,r3,r2
  80cd88:	00802074 	movhi	r2,129
  80cd8c:	108e3104 	addi	r2,r2,14532
  80cd90:	10c01315 	stw	r3,76(r2)
  80cd94:	e0ffff03 	ldbu	r3,-4(fp)
  80cd98:	00800804 	movi	r2,32
  80cd9c:	10c7c83a 	sub	r3,r2,r3
  80cda0:	00bfffc4 	movi	r2,-1
  80cda4:	10c6d83a 	srl	r3,r2,r3
  80cda8:	00802074 	movhi	r2,129
  80cdac:	108e3104 	addi	r2,r2,14532
  80cdb0:	10c01415 	stw	r3,80(r2)
  80cdb4:	01002074 	movhi	r4,129
  80cdb8:	210e3104 	addi	r4,r4,14532
  80cdbc:	080cdd40 	call	80cdd4 <alt_dev_reg>
}
  80cdc0:	e037883a 	mov	sp,fp
  80cdc4:	dfc00117 	ldw	ra,4(sp)
  80cdc8:	df000017 	ldw	fp,0(sp)
  80cdcc:	dec00204 	addi	sp,sp,8
  80cdd0:	f800283a 	ret

0080cdd4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80cdd4:	defffd04 	addi	sp,sp,-12
  80cdd8:	dfc00215 	stw	ra,8(sp)
  80cddc:	df000115 	stw	fp,4(sp)
  80cde0:	df000104 	addi	fp,sp,4
  80cde4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80cde8:	e13fff17 	ldw	r4,-4(fp)
  80cdec:	01402074 	movhi	r5,129
  80cdf0:	294e5704 	addi	r5,r5,14684
  80cdf4:	08104e00 	call	8104e0 <alt_dev_llist_insert>
}
  80cdf8:	e037883a 	mov	sp,fp
  80cdfc:	dfc00117 	ldw	ra,4(sp)
  80ce00:	df000017 	ldw	fp,0(sp)
  80ce04:	dec00204 	addi	sp,sp,8
  80ce08:	f800283a 	ret

0080ce0c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80ce0c:	defffa04 	addi	sp,sp,-24
  80ce10:	dfc00515 	stw	ra,20(sp)
  80ce14:	df000415 	stw	fp,16(sp)
  80ce18:	df000404 	addi	fp,sp,16
  80ce1c:	e13ffd15 	stw	r4,-12(fp)
  80ce20:	e17ffe15 	stw	r5,-8(fp)
  80ce24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ce28:	e0bffd17 	ldw	r2,-12(fp)
  80ce2c:	10800017 	ldw	r2,0(r2)
  80ce30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80ce34:	e0bffc17 	ldw	r2,-16(fp)
  80ce38:	11000a04 	addi	r4,r2,40
  80ce3c:	e0bffd17 	ldw	r2,-12(fp)
  80ce40:	11c00217 	ldw	r7,8(r2)
  80ce44:	e17ffe17 	ldw	r5,-8(fp)
  80ce48:	e1bfff17 	ldw	r6,-4(fp)
  80ce4c:	080d4540 	call	80d454 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80ce50:	e037883a 	mov	sp,fp
  80ce54:	dfc00117 	ldw	ra,4(sp)
  80ce58:	df000017 	ldw	fp,0(sp)
  80ce5c:	dec00204 	addi	sp,sp,8
  80ce60:	f800283a 	ret

0080ce64 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80ce64:	defffa04 	addi	sp,sp,-24
  80ce68:	dfc00515 	stw	ra,20(sp)
  80ce6c:	df000415 	stw	fp,16(sp)
  80ce70:	df000404 	addi	fp,sp,16
  80ce74:	e13ffd15 	stw	r4,-12(fp)
  80ce78:	e17ffe15 	stw	r5,-8(fp)
  80ce7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ce80:	e0bffd17 	ldw	r2,-12(fp)
  80ce84:	10800017 	ldw	r2,0(r2)
  80ce88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80ce8c:	e0bffc17 	ldw	r2,-16(fp)
  80ce90:	11000a04 	addi	r4,r2,40
  80ce94:	e0bffd17 	ldw	r2,-12(fp)
  80ce98:	11c00217 	ldw	r7,8(r2)
  80ce9c:	e17ffe17 	ldw	r5,-8(fp)
  80cea0:	e1bfff17 	ldw	r6,-4(fp)
  80cea4:	080d6780 	call	80d678 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80cea8:	e037883a 	mov	sp,fp
  80ceac:	dfc00117 	ldw	ra,4(sp)
  80ceb0:	df000017 	ldw	fp,0(sp)
  80ceb4:	dec00204 	addi	sp,sp,8
  80ceb8:	f800283a 	ret

0080cebc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80cebc:	defffc04 	addi	sp,sp,-16
  80cec0:	dfc00315 	stw	ra,12(sp)
  80cec4:	df000215 	stw	fp,8(sp)
  80cec8:	df000204 	addi	fp,sp,8
  80cecc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ced0:	e0bfff17 	ldw	r2,-4(fp)
  80ced4:	10800017 	ldw	r2,0(r2)
  80ced8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80cedc:	e0bffe17 	ldw	r2,-8(fp)
  80cee0:	11000a04 	addi	r4,r2,40
  80cee4:	e0bfff17 	ldw	r2,-4(fp)
  80cee8:	11400217 	ldw	r5,8(r2)
  80ceec:	080d2ec0 	call	80d2ec <altera_avalon_jtag_uart_close>
}
  80cef0:	e037883a 	mov	sp,fp
  80cef4:	dfc00117 	ldw	ra,4(sp)
  80cef8:	df000017 	ldw	fp,0(sp)
  80cefc:	dec00204 	addi	sp,sp,8
  80cf00:	f800283a 	ret

0080cf04 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80cf04:	defffa04 	addi	sp,sp,-24
  80cf08:	dfc00515 	stw	ra,20(sp)
  80cf0c:	df000415 	stw	fp,16(sp)
  80cf10:	df000404 	addi	fp,sp,16
  80cf14:	e13ffd15 	stw	r4,-12(fp)
  80cf18:	e17ffe15 	stw	r5,-8(fp)
  80cf1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80cf20:	e0bffd17 	ldw	r2,-12(fp)
  80cf24:	10800017 	ldw	r2,0(r2)
  80cf28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80cf2c:	e0bffc17 	ldw	r2,-16(fp)
  80cf30:	11000a04 	addi	r4,r2,40
  80cf34:	e17ffe17 	ldw	r5,-8(fp)
  80cf38:	e1bfff17 	ldw	r6,-4(fp)
  80cf3c:	080d3600 	call	80d360 <altera_avalon_jtag_uart_ioctl>
}
  80cf40:	e037883a 	mov	sp,fp
  80cf44:	dfc00117 	ldw	ra,4(sp)
  80cf48:	df000017 	ldw	fp,0(sp)
  80cf4c:	dec00204 	addi	sp,sp,8
  80cf50:	f800283a 	ret

0080cf54 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80cf54:	defffa04 	addi	sp,sp,-24
  80cf58:	dfc00515 	stw	ra,20(sp)
  80cf5c:	df000415 	stw	fp,16(sp)
  80cf60:	df000404 	addi	fp,sp,16
  80cf64:	e13ffd15 	stw	r4,-12(fp)
  80cf68:	e17ffe15 	stw	r5,-8(fp)
  80cf6c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80cf70:	e0fffd17 	ldw	r3,-12(fp)
  80cf74:	00800044 	movi	r2,1
  80cf78:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80cf7c:	e0bffd17 	ldw	r2,-12(fp)
  80cf80:	10800017 	ldw	r2,0(r2)
  80cf84:	11000104 	addi	r4,r2,4
  80cf88:	e0bffd17 	ldw	r2,-12(fp)
  80cf8c:	10800817 	ldw	r2,32(r2)
  80cf90:	1007883a 	mov	r3,r2
  80cf94:	2005883a 	mov	r2,r4
  80cf98:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80cf9c:	e13ffe17 	ldw	r4,-8(fp)
  80cfa0:	e17fff17 	ldw	r5,-4(fp)
  80cfa4:	d8000015 	stw	zero,0(sp)
  80cfa8:	01802074 	movhi	r6,129
  80cfac:	31b40504 	addi	r6,r6,-12268
  80cfb0:	e1fffd17 	ldw	r7,-12(fp)
  80cfb4:	08108100 	call	810810 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80cfb8:	e0bffd17 	ldw	r2,-12(fp)
  80cfbc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80cfc0:	e0bffd17 	ldw	r2,-12(fp)
  80cfc4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80cfc8:	00802074 	movhi	r2,129
  80cfcc:	10957004 	addi	r2,r2,21952
  80cfd0:	10800017 	ldw	r2,0(r2)
  80cfd4:	100b883a 	mov	r5,r2
  80cfd8:	01802074 	movhi	r6,129
  80cfdc:	31b48f04 	addi	r6,r6,-11716
  80cfe0:	e1fffd17 	ldw	r7,-12(fp)
  80cfe4:	08103480 	call	810348 <alt_alarm_start>
  80cfe8:	1004403a 	cmpge	r2,r2,zero
  80cfec:	1000041e 	bne	r2,zero,80d000 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80cff0:	e0fffd17 	ldw	r3,-12(fp)
  80cff4:	00a00034 	movhi	r2,32768
  80cff8:	10bfffc4 	addi	r2,r2,-1
  80cffc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80d000:	e037883a 	mov	sp,fp
  80d004:	dfc00117 	ldw	ra,4(sp)
  80d008:	df000017 	ldw	fp,0(sp)
  80d00c:	dec00204 	addi	sp,sp,8
  80d010:	f800283a 	ret

0080d014 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80d014:	defff804 	addi	sp,sp,-32
  80d018:	df000715 	stw	fp,28(sp)
  80d01c:	df000704 	addi	fp,sp,28
  80d020:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80d024:	e0bfff17 	ldw	r2,-4(fp)
  80d028:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80d02c:	e0bffe17 	ldw	r2,-8(fp)
  80d030:	10800017 	ldw	r2,0(r2)
  80d034:	e0bffd15 	stw	r2,-12(fp)
  80d038:	00000006 	br	80d03c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d03c:	e0bffd17 	ldw	r2,-12(fp)
  80d040:	10800104 	addi	r2,r2,4
  80d044:	10800037 	ldwio	r2,0(r2)
  80d048:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80d04c:	e0bffc17 	ldw	r2,-16(fp)
  80d050:	1080c00c 	andi	r2,r2,768
  80d054:	1005003a 	cmpeq	r2,r2,zero
  80d058:	1000741e 	bne	r2,zero,80d22c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80d05c:	e0bffc17 	ldw	r2,-16(fp)
  80d060:	1080400c 	andi	r2,r2,256
  80d064:	1005003a 	cmpeq	r2,r2,zero
  80d068:	1000351e 	bne	r2,zero,80d140 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80d06c:	00800074 	movhi	r2,1
  80d070:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d074:	e0bffe17 	ldw	r2,-8(fp)
  80d078:	10800a17 	ldw	r2,40(r2)
  80d07c:	10800044 	addi	r2,r2,1
  80d080:	1081ffcc 	andi	r2,r2,2047
  80d084:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80d088:	e0bffe17 	ldw	r2,-8(fp)
  80d08c:	10c00b17 	ldw	r3,44(r2)
  80d090:	e0bffa17 	ldw	r2,-24(fp)
  80d094:	18801626 	beq	r3,r2,80d0f0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80d098:	e0bffd17 	ldw	r2,-12(fp)
  80d09c:	10800037 	ldwio	r2,0(r2)
  80d0a0:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80d0a4:	e0bffb17 	ldw	r2,-20(fp)
  80d0a8:	10a0000c 	andi	r2,r2,32768
  80d0ac:	1005003a 	cmpeq	r2,r2,zero
  80d0b0:	10000f1e 	bne	r2,zero,80d0f0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80d0b4:	e0bffe17 	ldw	r2,-8(fp)
  80d0b8:	10c00a17 	ldw	r3,40(r2)
  80d0bc:	e0bffb17 	ldw	r2,-20(fp)
  80d0c0:	1009883a 	mov	r4,r2
  80d0c4:	e0bffe17 	ldw	r2,-8(fp)
  80d0c8:	1885883a 	add	r2,r3,r2
  80d0cc:	10800e04 	addi	r2,r2,56
  80d0d0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d0d4:	e0bffe17 	ldw	r2,-8(fp)
  80d0d8:	10800a17 	ldw	r2,40(r2)
  80d0dc:	10800044 	addi	r2,r2,1
  80d0e0:	10c1ffcc 	andi	r3,r2,2047
  80d0e4:	e0bffe17 	ldw	r2,-8(fp)
  80d0e8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80d0ec:	003fe106 	br	80d074 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80d0f0:	e0bffb17 	ldw	r2,-20(fp)
  80d0f4:	10bfffec 	andhi	r2,r2,65535
  80d0f8:	1005003a 	cmpeq	r2,r2,zero
  80d0fc:	1000101e 	bne	r2,zero,80d140 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d100:	e0bffe17 	ldw	r2,-8(fp)
  80d104:	10c00817 	ldw	r3,32(r2)
  80d108:	00bfff84 	movi	r2,-2
  80d10c:	1886703a 	and	r3,r3,r2
  80d110:	e0bffe17 	ldw	r2,-8(fp)
  80d114:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80d118:	e0bffd17 	ldw	r2,-12(fp)
  80d11c:	11000104 	addi	r4,r2,4
  80d120:	e0bffe17 	ldw	r2,-8(fp)
  80d124:	10800817 	ldw	r2,32(r2)
  80d128:	1007883a 	mov	r3,r2
  80d12c:	2005883a 	mov	r2,r4
  80d130:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d134:	e0bffd17 	ldw	r2,-12(fp)
  80d138:	10800104 	addi	r2,r2,4
  80d13c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80d140:	e0bffc17 	ldw	r2,-16(fp)
  80d144:	1080800c 	andi	r2,r2,512
  80d148:	1005003a 	cmpeq	r2,r2,zero
  80d14c:	103fbb1e 	bne	r2,zero,80d03c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80d150:	e0bffc17 	ldw	r2,-16(fp)
  80d154:	10bfffec 	andhi	r2,r2,65535
  80d158:	1004d43a 	srli	r2,r2,16
  80d15c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80d160:	00001506 	br	80d1b8 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80d164:	e13ffd17 	ldw	r4,-12(fp)
  80d168:	e0bffe17 	ldw	r2,-8(fp)
  80d16c:	10c00d17 	ldw	r3,52(r2)
  80d170:	e0bffe17 	ldw	r2,-8(fp)
  80d174:	1885883a 	add	r2,r3,r2
  80d178:	10820e04 	addi	r2,r2,2104
  80d17c:	10800003 	ldbu	r2,0(r2)
  80d180:	10c03fcc 	andi	r3,r2,255
  80d184:	18c0201c 	xori	r3,r3,128
  80d188:	18ffe004 	addi	r3,r3,-128
  80d18c:	2005883a 	mov	r2,r4
  80d190:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d194:	e0bffe17 	ldw	r2,-8(fp)
  80d198:	10800d17 	ldw	r2,52(r2)
  80d19c:	10800044 	addi	r2,r2,1
  80d1a0:	10c1ffcc 	andi	r3,r2,2047
  80d1a4:	e0bffe17 	ldw	r2,-8(fp)
  80d1a8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80d1ac:	e0bff917 	ldw	r2,-28(fp)
  80d1b0:	10bfffc4 	addi	r2,r2,-1
  80d1b4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80d1b8:	e0bff917 	ldw	r2,-28(fp)
  80d1bc:	1005003a 	cmpeq	r2,r2,zero
  80d1c0:	1000051e 	bne	r2,zero,80d1d8 <altera_avalon_jtag_uart_irq+0x1c4>
  80d1c4:	e0bffe17 	ldw	r2,-8(fp)
  80d1c8:	10c00d17 	ldw	r3,52(r2)
  80d1cc:	e0bffe17 	ldw	r2,-8(fp)
  80d1d0:	10800c17 	ldw	r2,48(r2)
  80d1d4:	18bfe31e 	bne	r3,r2,80d164 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80d1d8:	e0bff917 	ldw	r2,-28(fp)
  80d1dc:	1005003a 	cmpeq	r2,r2,zero
  80d1e0:	103f961e 	bne	r2,zero,80d03c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d1e4:	e0bffe17 	ldw	r2,-8(fp)
  80d1e8:	10c00817 	ldw	r3,32(r2)
  80d1ec:	00bfff44 	movi	r2,-3
  80d1f0:	1886703a 	and	r3,r3,r2
  80d1f4:	e0bffe17 	ldw	r2,-8(fp)
  80d1f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d1fc:	e0bffe17 	ldw	r2,-8(fp)
  80d200:	10800017 	ldw	r2,0(r2)
  80d204:	11000104 	addi	r4,r2,4
  80d208:	e0bffe17 	ldw	r2,-8(fp)
  80d20c:	10800817 	ldw	r2,32(r2)
  80d210:	1007883a 	mov	r3,r2
  80d214:	2005883a 	mov	r2,r4
  80d218:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d21c:	e0bffd17 	ldw	r2,-12(fp)
  80d220:	10800104 	addi	r2,r2,4
  80d224:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80d228:	003f8406 	br	80d03c <altera_avalon_jtag_uart_irq+0x28>
}
  80d22c:	e037883a 	mov	sp,fp
  80d230:	df000017 	ldw	fp,0(sp)
  80d234:	dec00104 	addi	sp,sp,4
  80d238:	f800283a 	ret

0080d23c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80d23c:	defffc04 	addi	sp,sp,-16
  80d240:	df000315 	stw	fp,12(sp)
  80d244:	df000304 	addi	fp,sp,12
  80d248:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80d24c:	e0bfff17 	ldw	r2,-4(fp)
  80d250:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80d254:	e0bffe17 	ldw	r2,-8(fp)
  80d258:	10800017 	ldw	r2,0(r2)
  80d25c:	10800104 	addi	r2,r2,4
  80d260:	10800037 	ldwio	r2,0(r2)
  80d264:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80d268:	e0bffd17 	ldw	r2,-12(fp)
  80d26c:	1081000c 	andi	r2,r2,1024
  80d270:	1005003a 	cmpeq	r2,r2,zero
  80d274:	10000c1e 	bne	r2,zero,80d2a8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80d278:	e0bffe17 	ldw	r2,-8(fp)
  80d27c:	10800017 	ldw	r2,0(r2)
  80d280:	11000104 	addi	r4,r2,4
  80d284:	e0bffe17 	ldw	r2,-8(fp)
  80d288:	10800817 	ldw	r2,32(r2)
  80d28c:	10810014 	ori	r2,r2,1024
  80d290:	1007883a 	mov	r3,r2
  80d294:	2005883a 	mov	r2,r4
  80d298:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80d29c:	e0bffe17 	ldw	r2,-8(fp)
  80d2a0:	10000915 	stw	zero,36(r2)
  80d2a4:	00000a06 	br	80d2d0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80d2a8:	e0bffe17 	ldw	r2,-8(fp)
  80d2ac:	10c00917 	ldw	r3,36(r2)
  80d2b0:	00a00034 	movhi	r2,32768
  80d2b4:	10bfff04 	addi	r2,r2,-4
  80d2b8:	10c00536 	bltu	r2,r3,80d2d0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80d2bc:	e0bffe17 	ldw	r2,-8(fp)
  80d2c0:	10800917 	ldw	r2,36(r2)
  80d2c4:	10c00044 	addi	r3,r2,1
  80d2c8:	e0bffe17 	ldw	r2,-8(fp)
  80d2cc:	10c00915 	stw	r3,36(r2)
  80d2d0:	00802074 	movhi	r2,129
  80d2d4:	10957004 	addi	r2,r2,21952
  80d2d8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80d2dc:	e037883a 	mov	sp,fp
  80d2e0:	df000017 	ldw	fp,0(sp)
  80d2e4:	dec00104 	addi	sp,sp,4
  80d2e8:	f800283a 	ret

0080d2ec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80d2ec:	defffc04 	addi	sp,sp,-16
  80d2f0:	df000315 	stw	fp,12(sp)
  80d2f4:	df000304 	addi	fp,sp,12
  80d2f8:	e13ffd15 	stw	r4,-12(fp)
  80d2fc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80d300:	00000706 	br	80d320 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80d304:	e0bffe17 	ldw	r2,-8(fp)
  80d308:	1090000c 	andi	r2,r2,16384
  80d30c:	1005003a 	cmpeq	r2,r2,zero
  80d310:	1000031e 	bne	r2,zero,80d320 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80d314:	00bffd44 	movi	r2,-11
  80d318:	e0bfff15 	stw	r2,-4(fp)
  80d31c:	00000b06 	br	80d34c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80d320:	e0bffd17 	ldw	r2,-12(fp)
  80d324:	10c00d17 	ldw	r3,52(r2)
  80d328:	e0bffd17 	ldw	r2,-12(fp)
  80d32c:	10800c17 	ldw	r2,48(r2)
  80d330:	18800526 	beq	r3,r2,80d348 <altera_avalon_jtag_uart_close+0x5c>
  80d334:	e0bffd17 	ldw	r2,-12(fp)
  80d338:	10c00917 	ldw	r3,36(r2)
  80d33c:	e0bffd17 	ldw	r2,-12(fp)
  80d340:	10800117 	ldw	r2,4(r2)
  80d344:	18bfef36 	bltu	r3,r2,80d304 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80d348:	e03fff15 	stw	zero,-4(fp)
  80d34c:	e0bfff17 	ldw	r2,-4(fp)
}
  80d350:	e037883a 	mov	sp,fp
  80d354:	df000017 	ldw	fp,0(sp)
  80d358:	dec00104 	addi	sp,sp,4
  80d35c:	f800283a 	ret

0080d360 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80d360:	defff804 	addi	sp,sp,-32
  80d364:	df000715 	stw	fp,28(sp)
  80d368:	df000704 	addi	fp,sp,28
  80d36c:	e13ffb15 	stw	r4,-20(fp)
  80d370:	e17ffc15 	stw	r5,-16(fp)
  80d374:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80d378:	00bff9c4 	movi	r2,-25
  80d37c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80d380:	e0bffc17 	ldw	r2,-16(fp)
  80d384:	e0bfff15 	stw	r2,-4(fp)
  80d388:	e0ffff17 	ldw	r3,-4(fp)
  80d38c:	189a8060 	cmpeqi	r2,r3,27137
  80d390:	1000041e 	bne	r2,zero,80d3a4 <altera_avalon_jtag_uart_ioctl+0x44>
  80d394:	e0ffff17 	ldw	r3,-4(fp)
  80d398:	189a80a0 	cmpeqi	r2,r3,27138
  80d39c:	10001b1e 	bne	r2,zero,80d40c <altera_avalon_jtag_uart_ioctl+0xac>
  80d3a0:	00002706 	br	80d440 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80d3a4:	e0bffb17 	ldw	r2,-20(fp)
  80d3a8:	10c00117 	ldw	r3,4(r2)
  80d3ac:	00a00034 	movhi	r2,32768
  80d3b0:	10bfffc4 	addi	r2,r2,-1
  80d3b4:	18802226 	beq	r3,r2,80d440 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80d3b8:	e0bffd17 	ldw	r2,-12(fp)
  80d3bc:	10800017 	ldw	r2,0(r2)
  80d3c0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80d3c4:	e0bff917 	ldw	r2,-28(fp)
  80d3c8:	10800090 	cmplti	r2,r2,2
  80d3cc:	1000071e 	bne	r2,zero,80d3ec <altera_avalon_jtag_uart_ioctl+0x8c>
  80d3d0:	e0fff917 	ldw	r3,-28(fp)
  80d3d4:	00a00034 	movhi	r2,32768
  80d3d8:	10bfffc4 	addi	r2,r2,-1
  80d3dc:	18800326 	beq	r3,r2,80d3ec <altera_avalon_jtag_uart_ioctl+0x8c>
  80d3e0:	e0bff917 	ldw	r2,-28(fp)
  80d3e4:	e0bffe15 	stw	r2,-8(fp)
  80d3e8:	00000306 	br	80d3f8 <altera_avalon_jtag_uart_ioctl+0x98>
  80d3ec:	00e00034 	movhi	r3,32768
  80d3f0:	18ffff84 	addi	r3,r3,-2
  80d3f4:	e0fffe15 	stw	r3,-8(fp)
  80d3f8:	e0bffb17 	ldw	r2,-20(fp)
  80d3fc:	e0fffe17 	ldw	r3,-8(fp)
  80d400:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80d404:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80d408:	00000d06 	br	80d440 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80d40c:	e0bffb17 	ldw	r2,-20(fp)
  80d410:	10c00117 	ldw	r3,4(r2)
  80d414:	00a00034 	movhi	r2,32768
  80d418:	10bfffc4 	addi	r2,r2,-1
  80d41c:	18800826 	beq	r3,r2,80d440 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80d420:	e13ffd17 	ldw	r4,-12(fp)
  80d424:	e0bffb17 	ldw	r2,-20(fp)
  80d428:	10c00917 	ldw	r3,36(r2)
  80d42c:	e0bffb17 	ldw	r2,-20(fp)
  80d430:	10800117 	ldw	r2,4(r2)
  80d434:	1885803a 	cmpltu	r2,r3,r2
  80d438:	20800015 	stw	r2,0(r4)
      rc = 0;
  80d43c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80d440:	e0bffa17 	ldw	r2,-24(fp)
}
  80d444:	e037883a 	mov	sp,fp
  80d448:	df000017 	ldw	fp,0(sp)
  80d44c:	dec00104 	addi	sp,sp,4
  80d450:	f800283a 	ret

0080d454 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80d454:	defff204 	addi	sp,sp,-56
  80d458:	dfc00d15 	stw	ra,52(sp)
  80d45c:	df000c15 	stw	fp,48(sp)
  80d460:	df000c04 	addi	fp,sp,48
  80d464:	e13ffb15 	stw	r4,-20(fp)
  80d468:	e17ffc15 	stw	r5,-16(fp)
  80d46c:	e1bffd15 	stw	r6,-12(fp)
  80d470:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80d474:	e0bffc17 	ldw	r2,-16(fp)
  80d478:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80d47c:	00004806 	br	80d5a0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80d480:	e0bffb17 	ldw	r2,-20(fp)
  80d484:	10800a17 	ldw	r2,40(r2)
  80d488:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80d48c:	e0bffb17 	ldw	r2,-20(fp)
  80d490:	10800b17 	ldw	r2,44(r2)
  80d494:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80d498:	e0fff717 	ldw	r3,-36(fp)
  80d49c:	e0bff617 	ldw	r2,-40(fp)
  80d4a0:	18800536 	bltu	r3,r2,80d4b8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80d4a4:	e0bff717 	ldw	r2,-36(fp)
  80d4a8:	e0fff617 	ldw	r3,-40(fp)
  80d4ac:	10c5c83a 	sub	r2,r2,r3
  80d4b0:	e0bff815 	stw	r2,-32(fp)
  80d4b4:	00000406 	br	80d4c8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80d4b8:	00820004 	movi	r2,2048
  80d4bc:	e0fff617 	ldw	r3,-40(fp)
  80d4c0:	10c5c83a 	sub	r2,r2,r3
  80d4c4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80d4c8:	e0bff817 	ldw	r2,-32(fp)
  80d4cc:	1005003a 	cmpeq	r2,r2,zero
  80d4d0:	10001f1e 	bne	r2,zero,80d550 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80d4d4:	e0fffd17 	ldw	r3,-12(fp)
  80d4d8:	e0bff817 	ldw	r2,-32(fp)
  80d4dc:	1880022e 	bgeu	r3,r2,80d4e8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80d4e0:	e0bffd17 	ldw	r2,-12(fp)
  80d4e4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80d4e8:	e0bffb17 	ldw	r2,-20(fp)
  80d4ec:	10c00e04 	addi	r3,r2,56
  80d4f0:	e0bff617 	ldw	r2,-40(fp)
  80d4f4:	1887883a 	add	r3,r3,r2
  80d4f8:	e0bffa17 	ldw	r2,-24(fp)
  80d4fc:	1009883a 	mov	r4,r2
  80d500:	180b883a 	mov	r5,r3
  80d504:	e1bff817 	ldw	r6,-32(fp)
  80d508:	0808a8c0 	call	808a8c <memcpy>
      ptr   += n;
  80d50c:	e0fff817 	ldw	r3,-32(fp)
  80d510:	e0bffa17 	ldw	r2,-24(fp)
  80d514:	10c5883a 	add	r2,r2,r3
  80d518:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80d51c:	e0fffd17 	ldw	r3,-12(fp)
  80d520:	e0bff817 	ldw	r2,-32(fp)
  80d524:	1885c83a 	sub	r2,r3,r2
  80d528:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d52c:	e0fff617 	ldw	r3,-40(fp)
  80d530:	e0bff817 	ldw	r2,-32(fp)
  80d534:	1885883a 	add	r2,r3,r2
  80d538:	10c1ffcc 	andi	r3,r2,2047
  80d53c:	e0bffb17 	ldw	r2,-20(fp)
  80d540:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80d544:	e0bffd17 	ldw	r2,-12(fp)
  80d548:	10800048 	cmpgei	r2,r2,1
  80d54c:	103fcc1e 	bne	r2,zero,80d480 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80d550:	e0fffa17 	ldw	r3,-24(fp)
  80d554:	e0bffc17 	ldw	r2,-16(fp)
  80d558:	1880141e 	bne	r3,r2,80d5ac <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80d55c:	e0bffe17 	ldw	r2,-8(fp)
  80d560:	1090000c 	andi	r2,r2,16384
  80d564:	1004c03a 	cmpne	r2,r2,zero
  80d568:	1000101e 	bne	r2,zero,80d5ac <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80d56c:	e0bffb17 	ldw	r2,-20(fp)
  80d570:	10c00a17 	ldw	r3,40(r2)
  80d574:	e0bff717 	ldw	r2,-36(fp)
  80d578:	1880051e 	bne	r3,r2,80d590 <altera_avalon_jtag_uart_read+0x13c>
  80d57c:	e0bffb17 	ldw	r2,-20(fp)
  80d580:	10c00917 	ldw	r3,36(r2)
  80d584:	e0bffb17 	ldw	r2,-20(fp)
  80d588:	10800117 	ldw	r2,4(r2)
  80d58c:	18bff736 	bltu	r3,r2,80d56c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80d590:	e0bffb17 	ldw	r2,-20(fp)
  80d594:	10c00a17 	ldw	r3,40(r2)
  80d598:	e0bff717 	ldw	r2,-36(fp)
  80d59c:	18800326 	beq	r3,r2,80d5ac <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80d5a0:	e0bffd17 	ldw	r2,-12(fp)
  80d5a4:	10800048 	cmpgei	r2,r2,1
  80d5a8:	103fb51e 	bne	r2,zero,80d480 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80d5ac:	e0fffa17 	ldw	r3,-24(fp)
  80d5b0:	e0bffc17 	ldw	r2,-16(fp)
  80d5b4:	18801926 	beq	r3,r2,80d61c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d5b8:	0005303a 	rdctl	r2,status
  80d5bc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d5c0:	e0fff517 	ldw	r3,-44(fp)
  80d5c4:	00bfff84 	movi	r2,-2
  80d5c8:	1884703a 	and	r2,r3,r2
  80d5cc:	1001703a 	wrctl	status,r2
  
  return context;
  80d5d0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80d5d4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d5d8:	e0bffb17 	ldw	r2,-20(fp)
  80d5dc:	10800817 	ldw	r2,32(r2)
  80d5e0:	10c00054 	ori	r3,r2,1
  80d5e4:	e0bffb17 	ldw	r2,-20(fp)
  80d5e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d5ec:	e0bffb17 	ldw	r2,-20(fp)
  80d5f0:	10800017 	ldw	r2,0(r2)
  80d5f4:	11000104 	addi	r4,r2,4
  80d5f8:	e0bffb17 	ldw	r2,-20(fp)
  80d5fc:	10800817 	ldw	r2,32(r2)
  80d600:	1007883a 	mov	r3,r2
  80d604:	2005883a 	mov	r2,r4
  80d608:	10c00035 	stwio	r3,0(r2)
  80d60c:	e0bff917 	ldw	r2,-28(fp)
  80d610:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d614:	e0bff417 	ldw	r2,-48(fp)
  80d618:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80d61c:	e0fffa17 	ldw	r3,-24(fp)
  80d620:	e0bffc17 	ldw	r2,-16(fp)
  80d624:	18800526 	beq	r3,r2,80d63c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80d628:	e0fffa17 	ldw	r3,-24(fp)
  80d62c:	e0bffc17 	ldw	r2,-16(fp)
  80d630:	1887c83a 	sub	r3,r3,r2
  80d634:	e0ffff15 	stw	r3,-4(fp)
  80d638:	00000906 	br	80d660 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80d63c:	e0bffe17 	ldw	r2,-8(fp)
  80d640:	1090000c 	andi	r2,r2,16384
  80d644:	1005003a 	cmpeq	r2,r2,zero
  80d648:	1000031e 	bne	r2,zero,80d658 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80d64c:	00bffd44 	movi	r2,-11
  80d650:	e0bfff15 	stw	r2,-4(fp)
  80d654:	00000206 	br	80d660 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80d658:	00bffec4 	movi	r2,-5
  80d65c:	e0bfff15 	stw	r2,-4(fp)
  80d660:	e0bfff17 	ldw	r2,-4(fp)
}
  80d664:	e037883a 	mov	sp,fp
  80d668:	dfc00117 	ldw	ra,4(sp)
  80d66c:	df000017 	ldw	fp,0(sp)
  80d670:	dec00204 	addi	sp,sp,8
  80d674:	f800283a 	ret

0080d678 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80d678:	defff204 	addi	sp,sp,-56
  80d67c:	dfc00d15 	stw	ra,52(sp)
  80d680:	df000c15 	stw	fp,48(sp)
  80d684:	df000c04 	addi	fp,sp,48
  80d688:	e13ffb15 	stw	r4,-20(fp)
  80d68c:	e17ffc15 	stw	r5,-16(fp)
  80d690:	e1bffd15 	stw	r6,-12(fp)
  80d694:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80d698:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80d69c:	e0bffc17 	ldw	r2,-16(fp)
  80d6a0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d6a4:	00003a06 	br	80d790 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80d6a8:	e0bffb17 	ldw	r2,-20(fp)
  80d6ac:	10800c17 	ldw	r2,48(r2)
  80d6b0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80d6b4:	e0bffb17 	ldw	r2,-20(fp)
  80d6b8:	10800d17 	ldw	r2,52(r2)
  80d6bc:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80d6c0:	e0fffa17 	ldw	r3,-24(fp)
  80d6c4:	e0bff917 	ldw	r2,-28(fp)
  80d6c8:	1880062e 	bgeu	r3,r2,80d6e4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80d6cc:	e0fff917 	ldw	r3,-28(fp)
  80d6d0:	e0bffa17 	ldw	r2,-24(fp)
  80d6d4:	1885c83a 	sub	r2,r3,r2
  80d6d8:	10bfffc4 	addi	r2,r2,-1
  80d6dc:	e0bff815 	stw	r2,-32(fp)
  80d6e0:	00000c06 	br	80d714 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80d6e4:	e0bff917 	ldw	r2,-28(fp)
  80d6e8:	1005003a 	cmpeq	r2,r2,zero
  80d6ec:	1000051e 	bne	r2,zero,80d704 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80d6f0:	00820004 	movi	r2,2048
  80d6f4:	e0fffa17 	ldw	r3,-24(fp)
  80d6f8:	10c5c83a 	sub	r2,r2,r3
  80d6fc:	e0bff815 	stw	r2,-32(fp)
  80d700:	00000406 	br	80d714 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80d704:	0081ffc4 	movi	r2,2047
  80d708:	e0fffa17 	ldw	r3,-24(fp)
  80d70c:	10c5c83a 	sub	r2,r2,r3
  80d710:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80d714:	e0bff817 	ldw	r2,-32(fp)
  80d718:	1005003a 	cmpeq	r2,r2,zero
  80d71c:	10001f1e 	bne	r2,zero,80d79c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80d720:	e0fffd17 	ldw	r3,-12(fp)
  80d724:	e0bff817 	ldw	r2,-32(fp)
  80d728:	1880022e 	bgeu	r3,r2,80d734 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80d72c:	e0bffd17 	ldw	r2,-12(fp)
  80d730:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80d734:	e0bffb17 	ldw	r2,-20(fp)
  80d738:	10c20e04 	addi	r3,r2,2104
  80d73c:	e0bffa17 	ldw	r2,-24(fp)
  80d740:	1885883a 	add	r2,r3,r2
  80d744:	e0fffc17 	ldw	r3,-16(fp)
  80d748:	1009883a 	mov	r4,r2
  80d74c:	180b883a 	mov	r5,r3
  80d750:	e1bff817 	ldw	r6,-32(fp)
  80d754:	0808a8c0 	call	808a8c <memcpy>
      ptr   += n;
  80d758:	e0fff817 	ldw	r3,-32(fp)
  80d75c:	e0bffc17 	ldw	r2,-16(fp)
  80d760:	10c5883a 	add	r2,r2,r3
  80d764:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80d768:	e0fffd17 	ldw	r3,-12(fp)
  80d76c:	e0bff817 	ldw	r2,-32(fp)
  80d770:	1885c83a 	sub	r2,r3,r2
  80d774:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d778:	e0fffa17 	ldw	r3,-24(fp)
  80d77c:	e0bff817 	ldw	r2,-32(fp)
  80d780:	1885883a 	add	r2,r3,r2
  80d784:	10c1ffcc 	andi	r3,r2,2047
  80d788:	e0bffb17 	ldw	r2,-20(fp)
  80d78c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d790:	e0bffd17 	ldw	r2,-12(fp)
  80d794:	10800048 	cmpgei	r2,r2,1
  80d798:	103fc31e 	bne	r2,zero,80d6a8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d79c:	0005303a 	rdctl	r2,status
  80d7a0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d7a4:	e0fff517 	ldw	r3,-44(fp)
  80d7a8:	00bfff84 	movi	r2,-2
  80d7ac:	1884703a 	and	r2,r3,r2
  80d7b0:	1001703a 	wrctl	status,r2
  
  return context;
  80d7b4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80d7b8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d7bc:	e0bffb17 	ldw	r2,-20(fp)
  80d7c0:	10800817 	ldw	r2,32(r2)
  80d7c4:	10c00094 	ori	r3,r2,2
  80d7c8:	e0bffb17 	ldw	r2,-20(fp)
  80d7cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d7d0:	e0bffb17 	ldw	r2,-20(fp)
  80d7d4:	10800017 	ldw	r2,0(r2)
  80d7d8:	11000104 	addi	r4,r2,4
  80d7dc:	e0bffb17 	ldw	r2,-20(fp)
  80d7e0:	10800817 	ldw	r2,32(r2)
  80d7e4:	1007883a 	mov	r3,r2
  80d7e8:	2005883a 	mov	r2,r4
  80d7ec:	10c00035 	stwio	r3,0(r2)
  80d7f0:	e0bff717 	ldw	r2,-36(fp)
  80d7f4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d7f8:	e0bff417 	ldw	r2,-48(fp)
  80d7fc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80d800:	e0bffd17 	ldw	r2,-12(fp)
  80d804:	10800050 	cmplti	r2,r2,1
  80d808:	1000111e 	bne	r2,zero,80d850 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80d80c:	e0bffe17 	ldw	r2,-8(fp)
  80d810:	1090000c 	andi	r2,r2,16384
  80d814:	1004c03a 	cmpne	r2,r2,zero
  80d818:	1000101e 	bne	r2,zero,80d85c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80d81c:	e0bffb17 	ldw	r2,-20(fp)
  80d820:	10c00d17 	ldw	r3,52(r2)
  80d824:	e0bff917 	ldw	r2,-28(fp)
  80d828:	1880051e 	bne	r3,r2,80d840 <altera_avalon_jtag_uart_write+0x1c8>
  80d82c:	e0bffb17 	ldw	r2,-20(fp)
  80d830:	10c00917 	ldw	r3,36(r2)
  80d834:	e0bffb17 	ldw	r2,-20(fp)
  80d838:	10800117 	ldw	r2,4(r2)
  80d83c:	18bff736 	bltu	r3,r2,80d81c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80d840:	e0bffb17 	ldw	r2,-20(fp)
  80d844:	10c00d17 	ldw	r3,52(r2)
  80d848:	e0bff917 	ldw	r2,-28(fp)
  80d84c:	18800326 	beq	r3,r2,80d85c <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  80d850:	e0bffd17 	ldw	r2,-12(fp)
  80d854:	10800048 	cmpgei	r2,r2,1
  80d858:	103fcd1e 	bne	r2,zero,80d790 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80d85c:	e0fffc17 	ldw	r3,-16(fp)
  80d860:	e0bff617 	ldw	r2,-40(fp)
  80d864:	18800526 	beq	r3,r2,80d87c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80d868:	e0fffc17 	ldw	r3,-16(fp)
  80d86c:	e0bff617 	ldw	r2,-40(fp)
  80d870:	1887c83a 	sub	r3,r3,r2
  80d874:	e0ffff15 	stw	r3,-4(fp)
  80d878:	00000906 	br	80d8a0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80d87c:	e0bffe17 	ldw	r2,-8(fp)
  80d880:	1090000c 	andi	r2,r2,16384
  80d884:	1005003a 	cmpeq	r2,r2,zero
  80d888:	1000031e 	bne	r2,zero,80d898 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80d88c:	00bffd44 	movi	r2,-11
  80d890:	e0bfff15 	stw	r2,-4(fp)
  80d894:	00000206 	br	80d8a0 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  80d898:	00bffec4 	movi	r2,-5
  80d89c:	e0bfff15 	stw	r2,-4(fp)
  80d8a0:	e0bfff17 	ldw	r2,-4(fp)
}
  80d8a4:	e037883a 	mov	sp,fp
  80d8a8:	dfc00117 	ldw	ra,4(sp)
  80d8ac:	df000017 	ldw	fp,0(sp)
  80d8b0:	dec00204 	addi	sp,sp,8
  80d8b4:	f800283a 	ret

0080d8b8 <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
  80d8b8:	defffa04 	addi	sp,sp,-24
  80d8bc:	dfc00515 	stw	ra,20(sp)
  80d8c0:	df000415 	stw	fp,16(sp)
  80d8c4:	df000404 	addi	fp,sp,16
  80d8c8:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
  80d8cc:	e0bfff17 	ldw	r2,-4(fp)
  80d8d0:	11000704 	addi	r4,r2,28
  80d8d4:	080da100 	call	80da10 <alt_avalon_mutex_reg>
  80d8d8:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
  80d8dc:	e0bffe17 	ldw	r2,-8(fp)
  80d8e0:	1004c03a 	cmpne	r2,r2,zero
  80d8e4:	1000041e 	bne	r2,zero,80d8f8 <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
  80d8e8:	e0bfff17 	ldw	r2,-4(fp)
  80d8ec:	11000b04 	addi	r4,r2,44
  80d8f0:	080da100 	call	80da10 <alt_avalon_mutex_reg>
  80d8f4:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  80d8f8:	e0bffe17 	ldw	r2,-8(fp)
  80d8fc:	1004c03a 	cmpne	r2,r2,zero
  80d900:	1000041e 	bne	r2,zero,80d914 <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
  80d904:	e13fff17 	ldw	r4,-4(fp)
  80d908:	d1601604 	addi	r5,gp,-32680
  80d90c:	08104e00 	call	8104e0 <alt_dev_llist_insert>
  80d910:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  80d914:	e0bffe17 	ldw	r2,-8(fp)
  80d918:	1004c03a 	cmpne	r2,r2,zero
  80d91c:	1000361e 	bne	r2,zero,80d9f8 <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
  80d920:	e0bfff17 	ldw	r2,-4(fp)
  80d924:	11000917 	ldw	r4,36(r2)
  80d928:	080de5c0 	call	80de5c <altera_avalon_mutex_open>
  80d92c:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
  80d930:	e0bffd17 	ldw	r2,-12(fp)
  80d934:	1005003a 	cmpeq	r2,r2,zero
  80d938:	10002f1e 	bne	r2,zero,80d9f8 <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
  80d93c:	e0bfff17 	ldw	r2,-4(fp)
  80d940:	11000d17 	ldw	r4,52(r2)
  80d944:	080de5c0 	call	80de5c <altera_avalon_mutex_open>
  80d948:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
  80d94c:	e0bffc17 	ldw	r2,-16(fp)
  80d950:	1005003a 	cmpeq	r2,r2,zero
  80d954:	1000281e 	bne	r2,zero,80d9f8 <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  80d958:	00000f06 	br	80d998 <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
  80d95c:	e13ffd17 	ldw	r4,-12(fp)
  80d960:	01400044 	movi	r5,1
  80d964:	080df740 	call	80df74 <altera_avalon_mutex_trylock>
  80d968:	1004c03a 	cmpne	r2,r2,zero
  80d96c:	10000a1e 	bne	r2,zero,80d998 <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
  80d970:	e0bfff17 	ldw	r2,-4(fp)
  80d974:	10800317 	ldw	r2,12(r2)
  80d978:	1009883a 	mov	r4,r2
  80d97c:	e0bfff17 	ldw	r2,-4(fp)
  80d980:	10800517 	ldw	r2,20(r2)
  80d984:	1007883a 	mov	r3,r2
  80d988:	2005883a 	mov	r2,r4
  80d98c:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
  80d990:	e13ffd17 	ldw	r4,-12(fp)
  80d994:	080dfb40 	call	80dfb4 <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  80d998:	e13ffd17 	ldw	r4,-12(fp)
  80d99c:	080e08c0 	call	80e08c <altera_avalon_mutex_first_lock>
  80d9a0:	1004c03a 	cmpne	r2,r2,zero
  80d9a4:	103fed1e 	bne	r2,zero,80d95c <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  80d9a8:	00000f06 	br	80d9e8 <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
  80d9ac:	e13ffc17 	ldw	r4,-16(fp)
  80d9b0:	01400044 	movi	r5,1
  80d9b4:	080df740 	call	80df74 <altera_avalon_mutex_trylock>
  80d9b8:	1004c03a 	cmpne	r2,r2,zero
  80d9bc:	10000a1e 	bne	r2,zero,80d9e8 <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
  80d9c0:	e0bfff17 	ldw	r2,-4(fp)
  80d9c4:	10800417 	ldw	r2,16(r2)
  80d9c8:	1009883a 	mov	r4,r2
  80d9cc:	e0bfff17 	ldw	r2,-4(fp)
  80d9d0:	10800517 	ldw	r2,20(r2)
  80d9d4:	1007883a 	mov	r3,r2
  80d9d8:	2005883a 	mov	r2,r4
  80d9dc:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
  80d9e0:	e13ffc17 	ldw	r4,-16(fp)
  80d9e4:	080dfb40 	call	80dfb4 <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  80d9e8:	e13ffc17 	ldw	r4,-16(fp)
  80d9ec:	080e08c0 	call	80e08c <altera_avalon_mutex_first_lock>
  80d9f0:	1004c03a 	cmpne	r2,r2,zero
  80d9f4:	103fed1e 	bne	r2,zero,80d9ac <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
  80d9f8:	e0bffe17 	ldw	r2,-8(fp)
}
  80d9fc:	e037883a 	mov	sp,fp
  80da00:	dfc00117 	ldw	ra,4(sp)
  80da04:	df000017 	ldw	fp,0(sp)
  80da08:	dec00204 	addi	sp,sp,8
  80da0c:	f800283a 	ret

0080da10 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
  80da10:	defffc04 	addi	sp,sp,-16
  80da14:	dfc00315 	stw	ra,12(sp)
  80da18:	df000215 	stw	fp,8(sp)
  80da1c:	df000204 	addi	fp,sp,8
  80da20:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80da24:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  80da28:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
  80da2c:	e0bffe17 	ldw	r2,-8(fp)
  80da30:	1004c03a 	cmpne	r2,r2,zero
  80da34:	1000061e 	bne	r2,zero,80da50 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
  80da38:	e13fff17 	ldw	r4,-4(fp)
  80da3c:	01402074 	movhi	r5,129
  80da40:	294e5e04 	addi	r5,r5,14712
  80da44:	08104e00 	call	8104e0 <alt_dev_llist_insert>
  80da48:	e0bffe15 	stw	r2,-8(fp)
  80da4c:	00000506 	br	80da64 <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
  80da50:	080da7c0 	call	80da7c <alt_get_errno>
  80da54:	00c00304 	movi	r3,12
  80da58:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
  80da5c:	00bffd04 	movi	r2,-12
  80da60:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
  80da64:	e0bffe17 	ldw	r2,-8(fp)
}
  80da68:	e037883a 	mov	sp,fp
  80da6c:	dfc00117 	ldw	ra,4(sp)
  80da70:	df000017 	ldw	fp,0(sp)
  80da74:	dec00204 	addi	sp,sp,8
  80da78:	f800283a 	ret

0080da7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80da7c:	defffd04 	addi	sp,sp,-12
  80da80:	dfc00215 	stw	ra,8(sp)
  80da84:	df000115 	stw	fp,4(sp)
  80da88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80da8c:	00802074 	movhi	r2,129
  80da90:	108e5a04 	addi	r2,r2,14696
  80da94:	10800017 	ldw	r2,0(r2)
  80da98:	1005003a 	cmpeq	r2,r2,zero
  80da9c:	1000061e 	bne	r2,zero,80dab8 <alt_get_errno+0x3c>
  80daa0:	00802074 	movhi	r2,129
  80daa4:	108e5a04 	addi	r2,r2,14696
  80daa8:	10800017 	ldw	r2,0(r2)
  80daac:	103ee83a 	callr	r2
  80dab0:	e0bfff15 	stw	r2,-4(fp)
  80dab4:	00000306 	br	80dac4 <alt_get_errno+0x48>
  80dab8:	00802074 	movhi	r2,129
  80dabc:	10956b04 	addi	r2,r2,21932
  80dac0:	e0bfff15 	stw	r2,-4(fp)
  80dac4:	e0bfff17 	ldw	r2,-4(fp)
}
  80dac8:	e037883a 	mov	sp,fp
  80dacc:	dfc00117 	ldw	ra,4(sp)
  80dad0:	df000017 	ldw	fp,0(sp)
  80dad4:	dec00204 	addi	sp,sp,8
  80dad8:	f800283a 	ret

0080dadc <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
  80dadc:	defffc04 	addi	sp,sp,-16
  80dae0:	dfc00315 	stw	ra,12(sp)
  80dae4:	df000215 	stw	fp,8(sp)
  80dae8:	df000204 	addi	fp,sp,8
  80daec:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
  80daf0:	e13fff17 	ldw	r4,-4(fp)
  80daf4:	d1601604 	addi	r5,gp,-32680
  80daf8:	08106bc0 	call	8106bc <alt_find_dev>
  80dafc:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  80db00:	e0bffe17 	ldw	r2,-8(fp)
  80db04:	1004c03a 	cmpne	r2,r2,zero
  80db08:	1000041e 	bne	r2,zero,80db1c <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  80db0c:	080da7c0 	call	80da7c <alt_get_errno>
  80db10:	1007883a 	mov	r3,r2
  80db14:	008004c4 	movi	r2,19
  80db18:	18800015 	stw	r2,0(r3)
  }

  return dev;
  80db1c:	e0bffe17 	ldw	r2,-8(fp)

}
  80db20:	e037883a 	mov	sp,fp
  80db24:	dfc00117 	ldw	ra,4(sp)
  80db28:	df000017 	ldw	fp,0(sp)
  80db2c:	dec00204 	addi	sp,sp,8
  80db30:	f800283a 	ret

0080db34 <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
  80db34:	defffe04 	addi	sp,sp,-8
  80db38:	df000115 	stw	fp,4(sp)
  80db3c:	df000104 	addi	fp,sp,4
  80db40:	e13fff15 	stw	r4,-4(fp)
  return;
}
  80db44:	e037883a 	mov	sp,fp
  80db48:	df000017 	ldw	fp,0(sp)
  80db4c:	dec00104 	addi	sp,sp,4
  80db50:	f800283a 	ret

0080db54 <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
  80db54:	defff904 	addi	sp,sp,-28
  80db58:	dfc00615 	stw	ra,24(sp)
  80db5c:	df000515 	stw	fp,20(sp)
  80db60:	df000504 	addi	fp,sp,20
  80db64:	e13ffe15 	stw	r4,-8(fp)
  80db68:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  80db6c:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
  80db70:	e0bffe17 	ldw	r2,-8(fp)
  80db74:	11000704 	addi	r4,r2,28
  80db78:	01400044 	movi	r5,1
  80db7c:	080df340 	call	80df34 <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
  80db80:	e0bffe17 	ldw	r2,-8(fp)
  80db84:	10800317 	ldw	r2,12(r2)
  80db88:	10800037 	ldwio	r2,0(r2)
  80db8c:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
  80db90:	e13ffe17 	ldw	r4,-8(fp)
  80db94:	e17ffc17 	ldw	r5,-16(fp)
  80db98:	080dc100 	call	80dc10 <alt_mailbox_increment_ptr>
  80db9c:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
  80dba0:	e0bffe17 	ldw	r2,-8(fp)
  80dba4:	10800417 	ldw	r2,16(r2)
  80dba8:	10800037 	ldwio	r2,0(r2)
  80dbac:	1007883a 	mov	r3,r2
  80dbb0:	e0bffb17 	ldw	r2,-20(fp)
  80dbb4:	1880061e 	bne	r3,r2,80dbd0 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
  80dbb8:	080da7c0 	call	80da7c <alt_get_errno>
  80dbbc:	00c002c4 	movi	r3,11
  80dbc0:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
  80dbc4:	00bffd44 	movi	r2,-11
  80dbc8:	e0bffd15 	stw	r2,-12(fp)
  80dbcc:	00000706 	br	80dbec <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
  80dbd0:	e0bffc17 	ldw	r2,-16(fp)
  80dbd4:	e0ffff17 	ldw	r3,-4(fp)
  80dbd8:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
  80dbdc:	e0bffe17 	ldw	r2,-8(fp)
  80dbe0:	10800317 	ldw	r2,12(r2)
  80dbe4:	e0fffb17 	ldw	r3,-20(fp)
  80dbe8:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
  80dbec:	e0bffe17 	ldw	r2,-8(fp)
  80dbf0:	11000704 	addi	r4,r2,28
  80dbf4:	080dfb40 	call	80dfb4 <altera_avalon_mutex_unlock>

  return ret_code;
  80dbf8:	e0bffd17 	ldw	r2,-12(fp)

}
  80dbfc:	e037883a 	mov	sp,fp
  80dc00:	dfc00117 	ldw	ra,4(sp)
  80dc04:	df000017 	ldw	fp,0(sp)
  80dc08:	dec00204 	addi	sp,sp,8
  80dc0c:	f800283a 	ret

0080dc10 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
  80dc10:	defffd04 	addi	sp,sp,-12
  80dc14:	df000215 	stw	fp,8(sp)
  80dc18:	df000204 	addi	fp,sp,8
  80dc1c:	e13ffe15 	stw	r4,-8(fp)
  80dc20:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
  80dc24:	e0bfff17 	ldw	r2,-4(fp)
  80dc28:	10800104 	addi	r2,r2,4
  80dc2c:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
  80dc30:	e0bffe17 	ldw	r2,-8(fp)
  80dc34:	10c00617 	ldw	r3,24(r2)
  80dc38:	e0bfff17 	ldw	r2,-4(fp)
  80dc3c:	1880032e 	bgeu	r3,r2,80dc4c <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
  80dc40:	e0bffe17 	ldw	r2,-8(fp)
  80dc44:	10800517 	ldw	r2,20(r2)
  80dc48:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
  80dc4c:	e0bfff17 	ldw	r2,-4(fp)
}
  80dc50:	e037883a 	mov	sp,fp
  80dc54:	df000017 	ldw	fp,0(sp)
  80dc58:	dec00104 	addi	sp,sp,4
  80dc5c:	f800283a 	ret

0080dc60 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
  80dc60:	defffa04 	addi	sp,sp,-24
  80dc64:	dfc00515 	stw	ra,20(sp)
  80dc68:	df000415 	stw	fp,16(sp)
  80dc6c:	dc000315 	stw	r16,12(sp)
  80dc70:	df000304 	addi	fp,sp,12
  80dc74:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  80dc78:	e0bfff17 	ldw	r2,-4(fp)
  80dc7c:	11000b04 	addi	r4,r2,44
  80dc80:	01400044 	movi	r5,1
  80dc84:	080df340 	call	80df34 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  80dc88:	e0bfff17 	ldw	r2,-4(fp)
  80dc8c:	10800417 	ldw	r2,16(r2)
  80dc90:	10800037 	ldwio	r2,0(r2)
  80dc94:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
  80dc98:	e0bfff17 	ldw	r2,-4(fp)
  80dc9c:	10800317 	ldw	r2,12(r2)
  80dca0:	10800037 	ldwio	r2,0(r2)
  80dca4:	1007883a 	mov	r3,r2
  80dca8:	e0bffd17 	ldw	r2,-12(fp)
  80dcac:	18bffa26 	beq	r3,r2,80dc98 <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
  80dcb0:	e0bffd17 	ldw	r2,-12(fp)
  80dcb4:	10800037 	ldwio	r2,0(r2)
  80dcb8:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
  80dcbc:	e0bfff17 	ldw	r2,-4(fp)
  80dcc0:	10800417 	ldw	r2,16(r2)
  80dcc4:	1021883a 	mov	r16,r2
  80dcc8:	e13fff17 	ldw	r4,-4(fp)
  80dccc:	e17ffd17 	ldw	r5,-12(fp)
  80dcd0:	080dc100 	call	80dc10 <alt_mailbox_increment_ptr>
  80dcd4:	1007883a 	mov	r3,r2
  80dcd8:	8005883a 	mov	r2,r16
  80dcdc:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
  80dce0:	e0bfff17 	ldw	r2,-4(fp)
  80dce4:	11000b04 	addi	r4,r2,44
  80dce8:	080dfb40 	call	80dfb4 <altera_avalon_mutex_unlock>

  return msg;
  80dcec:	e0bffe17 	ldw	r2,-8(fp)

}
  80dcf0:	e037883a 	mov	sp,fp
  80dcf4:	dfc00217 	ldw	ra,8(sp)
  80dcf8:	df000117 	ldw	fp,4(sp)
  80dcfc:	dc000017 	ldw	r16,0(sp)
  80dd00:	dec00304 	addi	sp,sp,12
  80dd04:	f800283a 	ret

0080dd08 <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
  80dd08:	defff904 	addi	sp,sp,-28
  80dd0c:	dfc00615 	stw	ra,24(sp)
  80dd10:	df000515 	stw	fp,20(sp)
  80dd14:	dc000415 	stw	r16,16(sp)
  80dd18:	df000404 	addi	fp,sp,16
  80dd1c:	e13ffe15 	stw	r4,-8(fp)
  80dd20:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
  80dd24:	e0bfff17 	ldw	r2,-4(fp)
  80dd28:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  80dd2c:	e0bffe17 	ldw	r2,-8(fp)
  80dd30:	11000b04 	addi	r4,r2,44
  80dd34:	01400044 	movi	r5,1
  80dd38:	080df340 	call	80df34 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  80dd3c:	e0bffe17 	ldw	r2,-8(fp)
  80dd40:	10800417 	ldw	r2,16(r2)
  80dd44:	10800037 	ldwio	r2,0(r2)
  80dd48:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
  80dd4c:	e0bffe17 	ldw	r2,-8(fp)
  80dd50:	10800317 	ldw	r2,12(r2)
  80dd54:	10800037 	ldwio	r2,0(r2)
  80dd58:	1007883a 	mov	r3,r2
  80dd5c:	e0bffc17 	ldw	r2,-16(fp)
  80dd60:	1880091e 	bne	r3,r2,80dd88 <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
  80dd64:	e0ffff17 	ldw	r3,-4(fp)
  80dd68:	00bffd44 	movi	r2,-11
  80dd6c:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
  80dd70:	080da7c0 	call	80da7c <alt_get_errno>
  80dd74:	1007883a 	mov	r3,r2
  80dd78:	008002c4 	movi	r2,11
  80dd7c:	18800015 	stw	r2,0(r3)
    msg = 0;
  80dd80:	e03ffd15 	stw	zero,-12(fp)
  80dd84:	00000c06 	br	80ddb8 <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
  80dd88:	e0bffc17 	ldw	r2,-16(fp)
  80dd8c:	10800037 	ldwio	r2,0(r2)
  80dd90:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
  80dd94:	e0bffe17 	ldw	r2,-8(fp)
  80dd98:	10800417 	ldw	r2,16(r2)
  80dd9c:	1021883a 	mov	r16,r2
  80dda0:	e13ffe17 	ldw	r4,-8(fp)
  80dda4:	e17ffc17 	ldw	r5,-16(fp)
  80dda8:	080dc100 	call	80dc10 <alt_mailbox_increment_ptr>
  80ddac:	1007883a 	mov	r3,r2
  80ddb0:	8005883a 	mov	r2,r16
  80ddb4:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
  80ddb8:	e0bffe17 	ldw	r2,-8(fp)
  80ddbc:	11000b04 	addi	r4,r2,44
  80ddc0:	080dfb40 	call	80dfb4 <altera_avalon_mutex_unlock>

  return msg;
  80ddc4:	e0bffd17 	ldw	r2,-12(fp)

}
  80ddc8:	e037883a 	mov	sp,fp
  80ddcc:	dfc00217 	ldw	ra,8(sp)
  80ddd0:	df000117 	ldw	fp,4(sp)
  80ddd4:	dc000017 	ldw	r16,0(sp)
  80ddd8:	dec00304 	addi	sp,sp,12
  80dddc:	f800283a 	ret

0080dde0 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  80dde0:	defff904 	addi	sp,sp,-28
  80dde4:	df000615 	stw	fp,24(sp)
  80dde8:	df000604 	addi	fp,sp,24
  80ddec:	e13ffe15 	stw	r4,-8(fp)
  80ddf0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
  80ddf4:	00bfffc4 	movi	r2,-1
  80ddf8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
  80ddfc:	0005317a 	rdctl	r2,cpuid
  80de00:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
  80de04:	e0bffd17 	ldw	r2,-12(fp)
  80de08:	1006943a 	slli	r3,r2,16
  80de0c:	e0bfff17 	ldw	r2,-4(fp)
  80de10:	1884b03a 	or	r2,r3,r2
  80de14:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
  80de18:	e0bffe17 	ldw	r2,-8(fp)
  80de1c:	10800317 	ldw	r2,12(r2)
  80de20:	e0fffc17 	ldw	r3,-16(fp)
  80de24:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  80de28:	e0bffe17 	ldw	r2,-8(fp)
  80de2c:	10800317 	ldw	r2,12(r2)
  80de30:	10800037 	ldwio	r2,0(r2)
  80de34:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
  80de38:	e0fffb17 	ldw	r3,-20(fp)
  80de3c:	e0bffc17 	ldw	r2,-16(fp)
  80de40:	1880011e 	bne	r3,r2,80de48 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
  80de44:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
  80de48:	e0bffa17 	ldw	r2,-24(fp)
}
  80de4c:	e037883a 	mov	sp,fp
  80de50:	df000017 	ldw	fp,0(sp)
  80de54:	dec00104 	addi	sp,sp,4
  80de58:	f800283a 	ret

0080de5c <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
  80de5c:	defffc04 	addi	sp,sp,-16
  80de60:	dfc00315 	stw	ra,12(sp)
  80de64:	df000215 	stw	fp,8(sp)
  80de68:	df000204 	addi	fp,sp,8
  80de6c:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
  80de70:	e13fff17 	ldw	r4,-4(fp)
  80de74:	d1601804 	addi	r5,gp,-32672
  80de78:	08106bc0 	call	8106bc <alt_find_dev>
  80de7c:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  80de80:	e0bffe17 	ldw	r2,-8(fp)
  80de84:	1004c03a 	cmpne	r2,r2,zero
  80de88:	1000041e 	bne	r2,zero,80de9c <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  80de8c:	080deb40 	call	80deb4 <alt_get_errno>
  80de90:	1007883a 	mov	r3,r2
  80de94:	008004c4 	movi	r2,19
  80de98:	18800015 	stw	r2,0(r3)
  }

  return dev;
  80de9c:	e0bffe17 	ldw	r2,-8(fp)
}
  80dea0:	e037883a 	mov	sp,fp
  80dea4:	dfc00117 	ldw	ra,4(sp)
  80dea8:	df000017 	ldw	fp,0(sp)
  80deac:	dec00204 	addi	sp,sp,8
  80deb0:	f800283a 	ret

0080deb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80deb4:	defffd04 	addi	sp,sp,-12
  80deb8:	dfc00215 	stw	ra,8(sp)
  80debc:	df000115 	stw	fp,4(sp)
  80dec0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80dec4:	00802074 	movhi	r2,129
  80dec8:	108e5a04 	addi	r2,r2,14696
  80decc:	10800017 	ldw	r2,0(r2)
  80ded0:	1005003a 	cmpeq	r2,r2,zero
  80ded4:	1000061e 	bne	r2,zero,80def0 <alt_get_errno+0x3c>
  80ded8:	00802074 	movhi	r2,129
  80dedc:	108e5a04 	addi	r2,r2,14696
  80dee0:	10800017 	ldw	r2,0(r2)
  80dee4:	103ee83a 	callr	r2
  80dee8:	e0bfff15 	stw	r2,-4(fp)
  80deec:	00000306 	br	80defc <alt_get_errno+0x48>
  80def0:	00802074 	movhi	r2,129
  80def4:	10956b04 	addi	r2,r2,21932
  80def8:	e0bfff15 	stw	r2,-4(fp)
  80defc:	e0bfff17 	ldw	r2,-4(fp)
}
  80df00:	e037883a 	mov	sp,fp
  80df04:	dfc00117 	ldw	ra,4(sp)
  80df08:	df000017 	ldw	fp,0(sp)
  80df0c:	dec00204 	addi	sp,sp,8
  80df10:	f800283a 	ret

0080df14 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
  80df14:	defffe04 	addi	sp,sp,-8
  80df18:	df000115 	stw	fp,4(sp)
  80df1c:	df000104 	addi	fp,sp,4
  80df20:	e13fff15 	stw	r4,-4(fp)
  return;
}
  80df24:	e037883a 	mov	sp,fp
  80df28:	df000017 	ldw	fp,0(sp)
  80df2c:	dec00104 	addi	sp,sp,4
  80df30:	f800283a 	ret

0080df34 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
  80df34:	defffc04 	addi	sp,sp,-16
  80df38:	dfc00315 	stw	ra,12(sp)
  80df3c:	df000215 	stw	fp,8(sp)
  80df40:	df000204 	addi	fp,sp,8
  80df44:	e13ffe15 	stw	r4,-8(fp)
  80df48:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
  80df4c:	e13ffe17 	ldw	r4,-8(fp)
  80df50:	e17fff17 	ldw	r5,-4(fp)
  80df54:	080dde00 	call	80dde0 <alt_mutex_trylock>
  80df58:	1004c03a 	cmpne	r2,r2,zero
  80df5c:	103ffb1e 	bne	r2,zero,80df4c <altera_avalon_mutex_lock+0x18>
}
  80df60:	e037883a 	mov	sp,fp
  80df64:	dfc00117 	ldw	ra,4(sp)
  80df68:	df000017 	ldw	fp,0(sp)
  80df6c:	dec00204 	addi	sp,sp,8
  80df70:	f800283a 	ret

0080df74 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  80df74:	defffb04 	addi	sp,sp,-20
  80df78:	dfc00415 	stw	ra,16(sp)
  80df7c:	df000315 	stw	fp,12(sp)
  80df80:	df000304 	addi	fp,sp,12
  80df84:	e13ffe15 	stw	r4,-8(fp)
  80df88:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
  80df8c:	e13ffe17 	ldw	r4,-8(fp)
  80df90:	e17fff17 	ldw	r5,-4(fp)
  80df94:	080dde00 	call	80dde0 <alt_mutex_trylock>
  80df98:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
  80df9c:	e0bffd17 	ldw	r2,-12(fp)
}
  80dfa0:	e037883a 	mov	sp,fp
  80dfa4:	dfc00117 	ldw	ra,4(sp)
  80dfa8:	df000017 	ldw	fp,0(sp)
  80dfac:	dec00204 	addi	sp,sp,8
  80dfb0:	f800283a 	ret

0080dfb4 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  80dfb4:	defffd04 	addi	sp,sp,-12
  80dfb8:	df000215 	stw	fp,8(sp)
  80dfbc:	df000204 	addi	fp,sp,8
  80dfc0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
  80dfc4:	0005317a 	rdctl	r2,cpuid
  80dfc8:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
  80dfcc:	e0bfff17 	ldw	r2,-4(fp)
  80dfd0:	10800317 	ldw	r2,12(r2)
  80dfd4:	10800104 	addi	r2,r2,4
  80dfd8:	1007883a 	mov	r3,r2
  80dfdc:	00800044 	movi	r2,1
  80dfe0:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
  80dfe4:	e0bfff17 	ldw	r2,-4(fp)
  80dfe8:	11000317 	ldw	r4,12(r2)
  80dfec:	e0bffe17 	ldw	r2,-8(fp)
  80dff0:	1004943a 	slli	r2,r2,16
  80dff4:	1007883a 	mov	r3,r2
  80dff8:	2005883a 	mov	r2,r4
  80dffc:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
  80e000:	e037883a 	mov	sp,fp
  80e004:	df000017 	ldw	fp,0(sp)
  80e008:	dec00104 	addi	sp,sp,4
  80e00c:	f800283a 	ret

0080e010 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  80e010:	defff904 	addi	sp,sp,-28
  80e014:	df000615 	stw	fp,24(sp)
  80e018:	df000604 	addi	fp,sp,24
  80e01c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
  80e020:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
  80e024:	0005317a 	rdctl	r2,cpuid
  80e028:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  80e02c:	e0bfff17 	ldw	r2,-4(fp)
  80e030:	10800317 	ldw	r2,12(r2)
  80e034:	10800037 	ldwio	r2,0(r2)
  80e038:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
  80e03c:	e0bffd17 	ldw	r2,-12(fp)
  80e040:	10bfffec 	andhi	r2,r2,65535
  80e044:	1004d43a 	srli	r2,r2,16
  80e048:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
  80e04c:	e0fffc17 	ldw	r3,-16(fp)
  80e050:	e0bffe17 	ldw	r2,-8(fp)
  80e054:	1880081e 	bne	r3,r2,80e078 <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
  80e058:	e0bffd17 	ldw	r2,-12(fp)
  80e05c:	10bfffcc 	andi	r2,r2,65535
  80e060:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
  80e064:	e0bffb17 	ldw	r2,-20(fp)
  80e068:	1005003a 	cmpeq	r2,r2,zero
  80e06c:	1000021e 	bne	r2,zero,80e078 <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
  80e070:	00800044 	movi	r2,1
  80e074:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
  80e078:	e0bffa17 	ldw	r2,-24(fp)
}
  80e07c:	e037883a 	mov	sp,fp
  80e080:	df000017 	ldw	fp,0(sp)
  80e084:	dec00104 	addi	sp,sp,4
  80e088:	f800283a 	ret

0080e08c <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  80e08c:	defffc04 	addi	sp,sp,-16
  80e090:	df000315 	stw	fp,12(sp)
  80e094:	df000304 	addi	fp,sp,12
  80e098:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
  80e09c:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
  80e0a0:	e0bfff17 	ldw	r2,-4(fp)
  80e0a4:	10800317 	ldw	r2,12(r2)
  80e0a8:	10800104 	addi	r2,r2,4
  80e0ac:	10800037 	ldwio	r2,0(r2)
  80e0b0:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
  80e0b4:	e0bffe17 	ldw	r2,-8(fp)
  80e0b8:	1080004c 	andi	r2,r2,1
  80e0bc:	10803fcc 	andi	r2,r2,255
  80e0c0:	1005003a 	cmpeq	r2,r2,zero
  80e0c4:	1000021e 	bne	r2,zero,80e0d0 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
  80e0c8:	00800044 	movi	r2,1
  80e0cc:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
  80e0d0:	e0bffd17 	ldw	r2,-12(fp)
}
  80e0d4:	e037883a 	mov	sp,fp
  80e0d8:	df000017 	ldw	fp,0(sp)
  80e0dc:	dec00104 	addi	sp,sp,4
  80e0e0:	f800283a 	ret

0080e0e4 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
  80e0e4:	defff904 	addi	sp,sp,-28
  80e0e8:	df000615 	stw	fp,24(sp)
  80e0ec:	df000604 	addi	fp,sp,24
  80e0f0:	e13ffe15 	stw	r4,-8(fp)
  80e0f4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
  80e0f8:	e03ffa15 	stw	zero,-24(fp)
  80e0fc:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
  80e100:	e0bffe17 	ldw	r2,-8(fp)
  80e104:	10000035 	stwio	zero,0(r2)
  lo = IORD(hw_base_address, ( which_section*4   ));
  80e108:	e0bfff17 	ldw	r2,-4(fp)
  80e10c:	1004913a 	slli	r2,r2,4
  80e110:	1007883a 	mov	r3,r2
  80e114:	e0bffe17 	ldw	r2,-8(fp)
  80e118:	1885883a 	add	r2,r3,r2
  80e11c:	10800037 	ldwio	r2,0(r2)
  80e120:	e0bffd15 	stw	r2,-12(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
  80e124:	e0bfff17 	ldw	r2,-4(fp)
  80e128:	1004913a 	slli	r2,r2,4
  80e12c:	1007883a 	mov	r3,r2
  80e130:	e0bffe17 	ldw	r2,-8(fp)
  80e134:	1885883a 	add	r2,r3,r2
  80e138:	10800104 	addi	r2,r2,4
  80e13c:	10800037 	ldwio	r2,0(r2)
  80e140:	e0bffc15 	stw	r2,-16(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
  80e144:	e0bffc17 	ldw	r2,-16(fp)
  80e148:	0007883a 	mov	r3,zero
  80e14c:	100a983a 	sll	r5,r2,zero
  80e150:	0009883a 	mov	r4,zero
  80e154:	e0bffd17 	ldw	r2,-12(fp)
  80e158:	0007883a 	mov	r3,zero
  80e15c:	208cb03a 	or	r6,r4,r2
  80e160:	e1bffa15 	stw	r6,-24(fp)
  80e164:	28c4b03a 	or	r2,r5,r3
  80e168:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
  80e16c:	e17ffa17 	ldw	r5,-24(fp)
  80e170:	e1bffb17 	ldw	r6,-20(fp)
  80e174:	2807883a 	mov	r3,r5
  80e178:	3009883a 	mov	r4,r6
}
  80e17c:	1805883a 	mov	r2,r3
  80e180:	2007883a 	mov	r3,r4
  80e184:	e037883a 	mov	sp,fp
  80e188:	df000017 	ldw	fp,0(sp)
  80e18c:	dec00104 	addi	sp,sp,4
  80e190:	f800283a 	ret

0080e194 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
  80e194:	defffd04 	addi	sp,sp,-12
  80e198:	dfc00215 	stw	ra,8(sp)
  80e19c:	df000115 	stw	fp,4(sp)
  80e1a0:	df000104 	addi	fp,sp,4
  80e1a4:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
  80e1a8:	e13fff17 	ldw	r4,-4(fp)
  80e1ac:	000b883a 	mov	r5,zero
  80e1b0:	080e0e40 	call	80e0e4 <perf_get_section_time>
  80e1b4:	1009883a 	mov	r4,r2
  80e1b8:	180b883a 	mov	r5,r3
  80e1bc:	200d883a 	mov	r6,r4
  80e1c0:	280f883a 	mov	r7,r5
  80e1c4:	3007883a 	mov	r3,r6
  80e1c8:	3809883a 	mov	r4,r7
}
  80e1cc:	1805883a 	mov	r2,r3
  80e1d0:	2007883a 	mov	r3,r4
  80e1d4:	e037883a 	mov	sp,fp
  80e1d8:	dfc00117 	ldw	ra,4(sp)
  80e1dc:	df000017 	ldw	fp,0(sp)
  80e1e0:	dec00204 	addi	sp,sp,8
  80e1e4:	f800283a 	ret

0080e1e8 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
  80e1e8:	defffd04 	addi	sp,sp,-12
  80e1ec:	df000215 	stw	fp,8(sp)
  80e1f0:	df000204 	addi	fp,sp,8
  80e1f4:	e13ffe15 	stw	r4,-8(fp)
  80e1f8:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
  80e1fc:	e0bfff17 	ldw	r2,-4(fp)
  80e200:	1004913a 	slli	r2,r2,4
  80e204:	1007883a 	mov	r3,r2
  80e208:	e0bffe17 	ldw	r2,-8(fp)
  80e20c:	1885883a 	add	r2,r3,r2
  80e210:	10800204 	addi	r2,r2,8
  80e214:	10800037 	ldwio	r2,0(r2)
}
  80e218:	e037883a 	mov	sp,fp
  80e21c:	df000017 	ldw	fp,0(sp)
  80e220:	dec00104 	addi	sp,sp,4
  80e224:	f800283a 	ret

0080e228 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
  80e228:	deffff04 	addi	sp,sp,-4
  80e22c:	df000015 	stw	fp,0(sp)
  80e230:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
  80e234:	0005883a 	mov	r2,zero
#else
    return (void*)0;
#endif
}
  80e238:	e037883a 	mov	sp,fp
  80e23c:	df000017 	ldw	fp,0(sp)
  80e240:	dec00104 	addi	sp,sp,4
  80e244:	f800283a 	ret

0080e248 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
  80e248:	deffff04 	addi	sp,sp,-4
  80e24c:	df000015 	stw	fp,0(sp)
  80e250:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
  80e254:	0080bef4 	movhi	r2,763
  80e258:	10bc2004 	addi	r2,r2,-3968
}
  80e25c:	e037883a 	mov	sp,fp
  80e260:	df000017 	ldw	fp,0(sp)
  80e264:	dec00104 	addi	sp,sp,4
  80e268:	f800283a 	ret

0080e26c <read_word>:
* reads a word from an address in flash
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word(alt_u8* current_ptr)
{
  80e26c:	defffe04 	addi	sp,sp,-8
  80e270:	df000115 	stw	fp,4(sp)
  80e274:	df000104 	addi	fp,sp,4
  80e278:	e13fff15 	stw	r4,-4(fp)
  return (alt_u32)(*current_ptr | 
  80e27c:	e0bfff17 	ldw	r2,-4(fp)
  80e280:	10800003 	ldbu	r2,0(r2)
  80e284:	10c03fcc 	andi	r3,r2,255
  80e288:	e0bfff17 	ldw	r2,-4(fp)
  80e28c:	10800044 	addi	r2,r2,1
  80e290:	10800003 	ldbu	r2,0(r2)
  80e294:	10803fcc 	andi	r2,r2,255
  80e298:	1004923a 	slli	r2,r2,8
  80e29c:	1886b03a 	or	r3,r3,r2
  80e2a0:	e0bfff17 	ldw	r2,-4(fp)
  80e2a4:	10800084 	addi	r2,r2,2
  80e2a8:	10800003 	ldbu	r2,0(r2)
  80e2ac:	10803fcc 	andi	r2,r2,255
  80e2b0:	1004943a 	slli	r2,r2,16
  80e2b4:	1886b03a 	or	r3,r3,r2
  80e2b8:	e0bfff17 	ldw	r2,-4(fp)
  80e2bc:	108000c4 	addi	r2,r2,3
  80e2c0:	10800003 	ldbu	r2,0(r2)
  80e2c4:	10803fcc 	andi	r2,r2,255
  80e2c8:	1004963a 	slli	r2,r2,24
  80e2cc:	1884b03a 	or	r2,r3,r2
         (*(current_ptr+1) << 8) | 
         (*(current_ptr+2) << 16) |
         (*(current_ptr+3) << 24 ));
}
  80e2d0:	e037883a 	mov	sp,fp
  80e2d4:	df000017 	ldw	fp,0(sp)
  80e2d8:	dec00104 	addi	sp,sp,4
  80e2dc:	f800283a 	ret

0080e2e0 <read_word_inc>:
* reads a word from an address in flash, and increments the ptr
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word_inc(alt_u8** current_ptr)
{
  80e2e0:	defffc04 	addi	sp,sp,-16
  80e2e4:	dfc00315 	stw	ra,12(sp)
  80e2e8:	df000215 	stw	fp,8(sp)
  80e2ec:	df000204 	addi	fp,sp,8
  80e2f0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 value = read_word(*current_ptr);
  80e2f4:	e0bfff17 	ldw	r2,-4(fp)
  80e2f8:	11000017 	ldw	r4,0(r2)
  80e2fc:	080e26c0 	call	80e26c <read_word>
  80e300:	e0bffe15 	stw	r2,-8(fp)
  *current_ptr += 4;
  80e304:	e0bfff17 	ldw	r2,-4(fp)
  80e308:	10800017 	ldw	r2,0(r2)
  80e30c:	10c00104 	addi	r3,r2,4
  80e310:	e0bfff17 	ldw	r2,-4(fp)
  80e314:	10c00015 	stw	r3,0(r2)
  return value;
  80e318:	e0bffe17 	ldw	r2,-8(fp)
}
  80e31c:	e037883a 	mov	sp,fp
  80e320:	dfc00117 	ldw	ra,4(sp)
  80e324:	df000017 	ldw	fp,0(sp)
  80e328:	dec00204 	addi	sp,sp,8
  80e32c:	f800283a 	ret

0080e330 <read_half_word>:
* reads a half word from an address in flash
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u16 read_half_word(alt_u8* current_ptr)
{
  80e330:	defffe04 	addi	sp,sp,-8
  80e334:	df000115 	stw	fp,4(sp)
  80e338:	df000104 	addi	fp,sp,4
  80e33c:	e13fff15 	stw	r4,-4(fp)
  return (alt_u16)(*current_ptr | 
  80e340:	e0bfff17 	ldw	r2,-4(fp)
  80e344:	10800003 	ldbu	r2,0(r2)
  80e348:	10c03fcc 	andi	r3,r2,255
  80e34c:	e0bfff17 	ldw	r2,-4(fp)
  80e350:	10800044 	addi	r2,r2,1
  80e354:	10800003 	ldbu	r2,0(r2)
  80e358:	10803fcc 	andi	r2,r2,255
  80e35c:	1004923a 	slli	r2,r2,8
  80e360:	1884b03a 	or	r2,r3,r2
  80e364:	10bfffcc 	andi	r2,r2,65535
         (*(current_ptr+1) << 8));
}
  80e368:	e037883a 	mov	sp,fp
  80e36c:	df000017 	ldw	fp,0(sp)
  80e370:	dec00104 	addi	sp,sp,4
  80e374:	f800283a 	ret

0080e378 <read_half_word_inc>:
* reads a half word from an address in flash, and increment the ptr
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u16 read_half_word_inc(alt_u8** current_ptr)
{
  80e378:	defffc04 	addi	sp,sp,-16
  80e37c:	dfc00315 	stw	ra,12(sp)
  80e380:	df000215 	stw	fp,8(sp)
  80e384:	df000204 	addi	fp,sp,8
  80e388:	e13fff15 	stw	r4,-4(fp)
  alt_u16 value = read_word(*current_ptr);
  80e38c:	e0bfff17 	ldw	r2,-4(fp)
  80e390:	11000017 	ldw	r4,0(r2)
  80e394:	080e26c0 	call	80e26c <read_word>
  80e398:	e0bffe0d 	sth	r2,-8(fp)
  *current_ptr += 2;
  80e39c:	e0bfff17 	ldw	r2,-4(fp)
  80e3a0:	10800017 	ldw	r2,0(r2)
  80e3a4:	10c00084 	addi	r3,r2,2
  80e3a8:	e0bfff17 	ldw	r2,-4(fp)
  80e3ac:	10c00015 	stw	r3,0(r2)
  return value;
  80e3b0:	e0bffe0b 	ldhu	r2,-8(fp)
}
  80e3b4:	e037883a 	mov	sp,fp
  80e3b8:	dfc00117 	ldw	ra,4(sp)
  80e3bc:	df000017 	ldw	fp,0(sp)
  80e3c0:	dec00204 	addi	sp,sp,8
  80e3c4:	f800283a 	ret

0080e3c8 <check_file_header>:
*
* Check that this is a file header we can cope with and inrement the current ptr 
* accordingly
*/
static int check_file_header(alt_u8** current_ptr)
{
  80e3c8:	defff704 	addi	sp,sp,-36
  80e3cc:	dfc00815 	stw	ra,32(sp)
  80e3d0:	df000715 	stw	fp,28(sp)
  80e3d4:	df000704 	addi	fp,sp,28
  80e3d8:	e13fff15 	stw	r4,-4(fp)
  int ret_code = -ENOENT;
  80e3dc:	00bfff84 	movi	r2,-2
  80e3e0:	e0bffe15 	stw	r2,-8(fp)
  alt_u16 name_len, extra_len, version, flags, compression;
  alt_u32 uncompressed_len, compressed_len;

  version = read_half_word_inc(current_ptr);
  80e3e4:	e13fff17 	ldw	r4,-4(fp)
  80e3e8:	080e3780 	call	80e378 <read_half_word_inc>
  80e3ec:	e0bffc0d 	sth	r2,-16(fp)

  /* We can parse files designed for version 10 */
  if (version > 10)
  80e3f0:	e0bffc0b 	ldhu	r2,-16(fp)
  80e3f4:	108002e8 	cmpgeui	r2,r2,11
  80e3f8:	1000331e 	bne	r2,zero,80e4c8 <check_file_header+0x100>
  {
    goto exit;
  }

  /* Read the flags, right now any flags are an error */
  flags = read_half_word_inc(current_ptr);
  80e3fc:	e13fff17 	ldw	r4,-4(fp)
  80e400:	080e3780 	call	80e378 <read_half_word_inc>
  80e404:	e0bffb8d 	sth	r2,-18(fp)

  if (flags )
  80e408:	e0bffb8b 	ldhu	r2,-18(fp)
  80e40c:	1004c03a 	cmpne	r2,r2,zero
  80e410:	10002d1e 	bne	r2,zero,80e4c8 <check_file_header+0x100>
  {
    goto exit;
  }

  compression = read_half_word_inc(current_ptr);
  80e414:	e13fff17 	ldw	r4,-4(fp)
  80e418:	080e3780 	call	80e378 <read_half_word_inc>
  80e41c:	e0bffb0d 	sth	r2,-20(fp)

  /* Skip the mod times and the CRC */
  *current_ptr += 8;
  80e420:	e0bfff17 	ldw	r2,-4(fp)
  80e424:	10800017 	ldw	r2,0(r2)
  80e428:	10c00204 	addi	r3,r2,8
  80e42c:	e0bfff17 	ldw	r2,-4(fp)
  80e430:	10c00015 	stw	r3,0(r2)

  /* Read the compressed and uncompressed lengths, these should be the same */
  compressed_len = read_word_inc(current_ptr);
  80e434:	e13fff17 	ldw	r4,-4(fp)
  80e438:	080e2e00 	call	80e2e0 <read_word_inc>
  80e43c:	e0bff915 	stw	r2,-28(fp)
  uncompressed_len = read_word_inc(current_ptr);
  80e440:	e13fff17 	ldw	r4,-4(fp)
  80e444:	080e2e00 	call	80e2e0 <read_word_inc>
  80e448:	e0bffa15 	stw	r2,-24(fp)

  if ((compression) || (compressed_len != uncompressed_len))
  80e44c:	e0bffb0b 	ldhu	r2,-20(fp)
  80e450:	1004c03a 	cmpne	r2,r2,zero
  80e454:	10001c1e 	bne	r2,zero,80e4c8 <check_file_header+0x100>
  80e458:	e0fff917 	ldw	r3,-28(fp)
  80e45c:	e0bffa17 	ldw	r2,-24(fp)
  80e460:	1880191e 	bne	r3,r2,80e4c8 <check_file_header+0x100>
  {
    goto exit;
  }

  /* Read the length of the name and extra fields */
  name_len = read_half_word_inc(current_ptr);
  80e464:	e13fff17 	ldw	r4,-4(fp)
  80e468:	080e3780 	call	80e378 <read_half_word_inc>
  80e46c:	e0bffd0d 	sth	r2,-12(fp)
  extra_len = read_half_word_inc(current_ptr);
  80e470:	e13fff17 	ldw	r4,-4(fp)
  80e474:	080e3780 	call	80e378 <read_half_word_inc>
  80e478:	e0bffc8d 	sth	r2,-14(fp)

  /* Skip the name and extra fields */
  *current_ptr += name_len;
  80e47c:	e0bfff17 	ldw	r2,-4(fp)
  80e480:	10c00017 	ldw	r3,0(r2)
  80e484:	e0bffd0b 	ldhu	r2,-12(fp)
  80e488:	1887883a 	add	r3,r3,r2
  80e48c:	e0bfff17 	ldw	r2,-4(fp)
  80e490:	10c00015 	stw	r3,0(r2)
  *current_ptr += extra_len;
  80e494:	e0bfff17 	ldw	r2,-4(fp)
  80e498:	10c00017 	ldw	r3,0(r2)
  80e49c:	e0bffc8b 	ldhu	r2,-14(fp)
  80e4a0:	1887883a 	add	r3,r3,r2
  80e4a4:	e0bfff17 	ldw	r2,-4(fp)
  80e4a8:	10c00015 	stw	r3,0(r2)

  *current_ptr += compressed_len;
  80e4ac:	e0bfff17 	ldw	r2,-4(fp)
  80e4b0:	10c00017 	ldw	r3,0(r2)
  80e4b4:	e0bff917 	ldw	r2,-28(fp)
  80e4b8:	1887883a 	add	r3,r3,r2
  80e4bc:	e0bfff17 	ldw	r2,-4(fp)
  80e4c0:	10c00015 	stw	r3,0(r2)

  ret_code = 0;
  80e4c4:	e03ffe15 	stw	zero,-8(fp)

exit:
  return ret_code;
  80e4c8:	e0bffe17 	ldw	r2,-8(fp)
}
  80e4cc:	e037883a 	mov	sp,fp
  80e4d0:	dfc00117 	ldw	ra,4(sp)
  80e4d4:	df000017 	ldw	fp,0(sp)
  80e4d8:	dec00204 	addi	sp,sp,8
  80e4dc:	f800283a 	ret

0080e4e0 <check_directory_header>:
* Sanity check an entry in the directory structure
* 
* returns 0 for success -ENOENT if not
*/
int check_directory_header(alt_u8** current_ptr)
{
  80e4e0:	defff704 	addi	sp,sp,-36
  80e4e4:	dfc00815 	stw	ra,32(sp)
  80e4e8:	df000715 	stw	fp,28(sp)
  80e4ec:	df000704 	addi	fp,sp,28
  80e4f0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = -ENOENT;
  80e4f4:	00bfff84 	movi	r2,-2
  80e4f8:	e0bffe15 	stw	r2,-8(fp)
  alt_u16 version, flags, compression, name_len, extra_len, comment_len;
  alt_u32 compressed_len, uncompressed_len;

  /* We don't care what version made this file */
  *current_ptr += 2;
  80e4fc:	e0bfff17 	ldw	r2,-4(fp)
  80e500:	10800017 	ldw	r2,0(r2)
  80e504:	10c00084 	addi	r3,r2,2
  80e508:	e0bfff17 	ldw	r2,-4(fp)
  80e50c:	10c00015 	stw	r3,0(r2)

  /* We can parse files designed for version 10 */
  version = read_half_word_inc(current_ptr);
  80e510:	e13fff17 	ldw	r4,-4(fp)
  80e514:	080e3780 	call	80e378 <read_half_word_inc>
  80e518:	e0bffd8d 	sth	r2,-10(fp)
  if (version > 10)
  80e51c:	e0bffd8b 	ldhu	r2,-10(fp)
  80e520:	108002e8 	cmpgeui	r2,r2,11
  80e524:	1000331e 	bne	r2,zero,80e5f4 <check_directory_header+0x114>
  {
    goto exit;
  }

  /* Read the flags, any set are an error */
  flags = read_half_word_inc(current_ptr);
  80e528:	e13fff17 	ldw	r4,-4(fp)
  80e52c:	080e3780 	call	80e378 <read_half_word_inc>
  80e530:	e0bffd0d 	sth	r2,-12(fp)

  if (flags )
  80e534:	e0bffd0b 	ldhu	r2,-12(fp)
  80e538:	1004c03a 	cmpne	r2,r2,zero
  80e53c:	10002d1e 	bne	r2,zero,80e5f4 <check_directory_header+0x114>
  {
    goto exit;
  }

  compression = read_half_word_inc(current_ptr);
  80e540:	e13fff17 	ldw	r4,-4(fp)
  80e544:	080e3780 	call	80e378 <read_half_word_inc>
  80e548:	e0bffc8d 	sth	r2,-14(fp)


  /* Skip the mod times and the CRC */
  *current_ptr += 8;
  80e54c:	e0bfff17 	ldw	r2,-4(fp)
  80e550:	10800017 	ldw	r2,0(r2)
  80e554:	10c00204 	addi	r3,r2,8
  80e558:	e0bfff17 	ldw	r2,-4(fp)
  80e55c:	10c00015 	stw	r3,0(r2)

  /* Read the compressed and uncompressed lengths,these should be the same */
  compressed_len = read_word_inc(current_ptr);
  80e560:	e13fff17 	ldw	r4,-4(fp)
  80e564:	080e2e00 	call	80e2e0 <read_word_inc>
  80e568:	e0bffa15 	stw	r2,-24(fp)
  uncompressed_len = read_word_inc(current_ptr);
  80e56c:	e13fff17 	ldw	r4,-4(fp)
  80e570:	080e2e00 	call	80e2e0 <read_word_inc>
  80e574:	e0bff915 	stw	r2,-28(fp)

  if ((compression) || (compressed_len != uncompressed_len))
  80e578:	e0bffc8b 	ldhu	r2,-14(fp)
  80e57c:	1004c03a 	cmpne	r2,r2,zero
  80e580:	10001c1e 	bne	r2,zero,80e5f4 <check_directory_header+0x114>
  80e584:	e0fffa17 	ldw	r3,-24(fp)
  80e588:	e0bff917 	ldw	r2,-28(fp)
  80e58c:	1880191e 	bne	r3,r2,80e5f4 <check_directory_header+0x114>
  {
    goto exit;
  }

  /* Read the length of the name, extra fields and comment fields*/
  name_len = read_half_word_inc(current_ptr);
  80e590:	e13fff17 	ldw	r4,-4(fp)
  80e594:	080e3780 	call	80e378 <read_half_word_inc>
  80e598:	e0bffc0d 	sth	r2,-16(fp)
  extra_len = read_half_word_inc(current_ptr);
  80e59c:	e13fff17 	ldw	r4,-4(fp)
  80e5a0:	080e3780 	call	80e378 <read_half_word_inc>
  80e5a4:	e0bffb8d 	sth	r2,-18(fp)
  comment_len = read_half_word_inc(current_ptr);
  80e5a8:	e13fff17 	ldw	r4,-4(fp)
  80e5ac:	080e3780 	call	80e378 <read_half_word_inc>
  80e5b0:	e0bffb0d 	sth	r2,-20(fp)

  /* We don't care about the disk number, the file attributes or the offset */
  *current_ptr += 12;
  80e5b4:	e0bfff17 	ldw	r2,-4(fp)
  80e5b8:	10800017 	ldw	r2,0(r2)
  80e5bc:	10c00304 	addi	r3,r2,12
  80e5c0:	e0bfff17 	ldw	r2,-4(fp)
  80e5c4:	10c00015 	stw	r3,0(r2)

  *current_ptr += (name_len + extra_len + comment_len);
  80e5c8:	e0bfff17 	ldw	r2,-4(fp)
  80e5cc:	11000017 	ldw	r4,0(r2)
  80e5d0:	e0fffc0b 	ldhu	r3,-16(fp)
  80e5d4:	e0bffb8b 	ldhu	r2,-18(fp)
  80e5d8:	1887883a 	add	r3,r3,r2
  80e5dc:	e0bffb0b 	ldhu	r2,-20(fp)
  80e5e0:	1885883a 	add	r2,r3,r2
  80e5e4:	2087883a 	add	r3,r4,r2
  80e5e8:	e0bfff17 	ldw	r2,-4(fp)
  80e5ec:	10c00015 	stw	r3,0(r2)

  ret_code = 0;
  80e5f0:	e03ffe15 	stw	zero,-8(fp)
exit:
  return ret_code;
  80e5f4:	e0bffe17 	ldw	r2,-8(fp)
}
  80e5f8:	e037883a 	mov	sp,fp
  80e5fc:	dfc00117 	ldw	ra,4(sp)
  80e600:	df000017 	ldw	fp,0(sp)
  80e604:	dec00204 	addi	sp,sp,8
  80e608:	f800283a 	ret

0080e60c <check_directory_table>:
* tokens are in the right place, none of the files are compressed etc.
* 
* returns 0 for success -ENOENT if not
*/
static int check_directory_table(alt_ro_zipfs_dev* dev)
{
  80e60c:	defff904 	addi	sp,sp,-28
  80e610:	dfc00615 	stw	ra,24(sp)
  80e614:	df000515 	stw	fp,20(sp)
  80e618:	df000504 	addi	fp,sp,20
  80e61c:	e13ffe15 	stw	r4,-8(fp)
  int ret_code = 0;
  80e620:	e03ffc15 	stw	zero,-16(fp)
  alt_u8* current_ptr = (alt_u8*)dev->directory;
  80e624:	e0bffe17 	ldw	r2,-8(fp)
  80e628:	10800b17 	ldw	r2,44(r2)
  80e62c:	e0bffd15 	stw	r2,-12(fp)
  alt_u32 token;

  while(1)
  {
    token = read_word_inc(&current_ptr);
  80e630:	e13ffd04 	addi	r4,fp,-12
  80e634:	080e2e00 	call	80e2e0 <read_word_inc>
  80e638:	e0bffb15 	stw	r2,-20(fp)

    switch(token)
  80e63c:	e0bffb17 	ldw	r2,-20(fp)
  80e640:	e0bfff15 	stw	r2,-4(fp)
  80e644:	00808074 	movhi	r2,513
  80e648:	1092d404 	addi	r2,r2,19280
  80e64c:	e0ffff17 	ldw	r3,-4(fp)
  80e650:	18800526 	beq	r3,r2,80e668 <check_directory_table+0x5c>
  80e654:	00818174 	movhi	r2,1541
  80e658:	1092d404 	addi	r2,r2,19280
  80e65c:	e0ffff17 	ldw	r3,-4(fp)
  80e660:	18800826 	beq	r3,r2,80e684 <check_directory_table+0x78>
  80e664:	00000906 	br	80e68c <check_directory_table+0x80>
    {
    case ZIP_DIRECTORY_RECORD:
      {
        ret_code = check_directory_header(&current_ptr);
  80e668:	e13ffd04 	addi	r4,fp,-12
  80e66c:	080e4e00 	call	80e4e0 <check_directory_header>
  80e670:	e0bffc15 	stw	r2,-16(fp)
        if (ret_code)
  80e674:	e0bffc17 	ldw	r2,-16(fp)
  80e678:	1004c03a 	cmpne	r2,r2,zero
  80e67c:	1000051e 	bne	r2,zero,80e694 <check_directory_table+0x88>
      {
        ret_code = -ENOENT;
        goto exit;
      }
    }
  }
  80e680:	003feb06 	br	80e630 <check_directory_table+0x24>
        }
        break;
      }
    case ZIP_END_OF_DIRECTORY_RECORD:
      {
        ret_code = 0;
  80e684:	e03ffc15 	stw	zero,-16(fp)
        goto exit;
  80e688:	00000206 	br	80e694 <check_directory_table+0x88>
      }
    default:
      {
        ret_code = -ENOENT;
  80e68c:	00bfff84 	movi	r2,-2
  80e690:	e0bffc15 	stw	r2,-16(fp)
      }
    }
  }

exit:
  return ret_code;
  80e694:	e0bffc17 	ldw	r2,-16(fp)
}
  80e698:	e037883a 	mov	sp,fp
  80e69c:	dfc00117 	ldw	ra,4(sp)
  80e6a0:	df000017 	ldw	fp,0(sp)
  80e6a4:	dec00204 	addi	sp,sp,8
  80e6a8:	f800283a 	ret

0080e6ac <find_directory_entry>:
* tokens are in the right place, none of the files are comrpessed etc.
* 
* returns 0 for success -ENOENT if not
*/
static int find_directory_entry(alt_ro_zipfs_dev* dev)
{
  80e6ac:	defff904 	addi	sp,sp,-28
  80e6b0:	dfc00615 	stw	ra,24(sp)
  80e6b4:	df000515 	stw	fp,20(sp)
  80e6b8:	df000504 	addi	fp,sp,20
  80e6bc:	e13ffe15 	stw	r4,-8(fp)
  int ret_code = 0;
  80e6c0:	e03ffc15 	stw	zero,-16(fp)
  alt_u32 token;
  alt_u8* current_ptr = dev->base;
  80e6c4:	e0bffe17 	ldw	r2,-8(fp)
  80e6c8:	10800a17 	ldw	r2,40(r2)
  80e6cc:	e0bffd15 	stw	r2,-12(fp)

  while(1)
  {
    token = read_word_inc(&current_ptr);
  80e6d0:	e13ffd04 	addi	r4,fp,-12
  80e6d4:	080e2e00 	call	80e2e0 <read_word_inc>
  80e6d8:	e0bffb15 	stw	r2,-20(fp)

    switch(token)
  80e6dc:	e0bffb17 	ldw	r2,-20(fp)
  80e6e0:	e0bfff15 	stw	r2,-4(fp)
  80e6e4:	00808074 	movhi	r2,513
  80e6e8:	1092d404 	addi	r2,r2,19280
  80e6ec:	e0ffff17 	ldw	r3,-4(fp)
  80e6f0:	18800c26 	beq	r3,r2,80e724 <find_directory_entry+0x78>
  80e6f4:	008100f4 	movhi	r2,1027
  80e6f8:	1092d404 	addi	r2,r2,19280
  80e6fc:	e0ffff17 	ldw	r3,-4(fp)
  80e700:	18800126 	beq	r3,r2,80e708 <find_directory_entry+0x5c>
  80e704:	00000c06 	br	80e738 <find_directory_entry+0x8c>
    {
    case ZIP_FILE_RECORD:
      {
        ret_code = check_file_header(&current_ptr);
  80e708:	e13ffd04 	addi	r4,fp,-12
  80e70c:	080e3c80 	call	80e3c8 <check_file_header>
  80e710:	e0bffc15 	stw	r2,-16(fp)
        if(ret_code)
  80e714:	e0bffc17 	ldw	r2,-16(fp)
  80e718:	1004c03a 	cmpne	r2,r2,zero
  80e71c:	1000081e 	bne	r2,zero,80e740 <find_directory_entry+0x94>
      {
        ret_code = -ENOENT;
        goto exit;
      }
    }
  }
  80e720:	003feb06 	br	80e6d0 <find_directory_entry+0x24>
        }
        break;
      }
    case ZIP_DIRECTORY_RECORD:
      {
        dev->directory = current_ptr - 4;
  80e724:	e0bffd17 	ldw	r2,-12(fp)
  80e728:	10ffff04 	addi	r3,r2,-4
  80e72c:	e0bffe17 	ldw	r2,-8(fp)
  80e730:	10c00b15 	stw	r3,44(r2)
        goto exit;
  80e734:	00000206 	br	80e740 <find_directory_entry+0x94>
      }
    default:
      {
        ret_code = -ENOENT;
  80e738:	00bfff84 	movi	r2,-2
  80e73c:	e0bffc15 	stw	r2,-16(fp)
        goto exit;
      }
    }
  }
exit:
  return ret_code;
  80e740:	e0bffc17 	ldw	r2,-16(fp)
}
  80e744:	e037883a 	mov	sp,fp
  80e748:	dfc00117 	ldw	ra,4(sp)
  80e74c:	df000017 	ldw	fp,0(sp)
  80e750:	dec00204 	addi	sp,sp,8
  80e754:	f800283a 	ret

0080e758 <find_file_entry_by_name>:
*
* returns -ENOENT if fails
*/
static int find_file_entry_by_name( alt_ro_zipfs_dev* dev, alt_fd* fd, 
                                    const alt_u8* name)
{
  80e758:	defff504 	addi	sp,sp,-44
  80e75c:	dfc00a15 	stw	ra,40(sp)
  80e760:	df000915 	stw	fp,36(sp)
  80e764:	df000904 	addi	fp,sp,36
  80e768:	e13ffd15 	stw	r4,-12(fp)
  80e76c:	e17ffe15 	stw	r5,-8(fp)
  80e770:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = -ENOENT;
  80e774:	00bfff84 	movi	r2,-2
  80e778:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 token;
  alt_u8* current_ptr = dev->directory;
  80e77c:	e0bffd17 	ldw	r2,-12(fp)
  80e780:	10800b17 	ldw	r2,44(r2)
  80e784:	e0bffa15 	stw	r2,-24(fp)
  alt_u16 name_len, extra_len, comment_len, extra_file_len;
  alt_u32 offset;

  current_ptr = dev->directory;
  80e788:	e0bffd17 	ldw	r2,-12(fp)
  80e78c:	10800b17 	ldw	r2,44(r2)
  80e790:	e0bffa15 	stw	r2,-24(fp)

  while(1)
  {
    token = read_word(current_ptr);
  80e794:	e13ffa17 	ldw	r4,-24(fp)
  80e798:	080e26c0 	call	80e26c <read_word>
  80e79c:	e0bffb15 	stw	r2,-20(fp)

    if(token != ZIP_DIRECTORY_RECORD)
  80e7a0:	e0fffb17 	ldw	r3,-20(fp)
  80e7a4:	00808074 	movhi	r2,513
  80e7a8:	1092d404 	addi	r2,r2,19280
  80e7ac:	18803c1e 	bne	r3,r2,80e8a0 <find_file_entry_by_name+0x148>
    {
      break;
    }

    offset = read_word(current_ptr + ZIP_DIR_OFFSET);
  80e7b0:	e0bffa17 	ldw	r2,-24(fp)
  80e7b4:	11000a84 	addi	r4,r2,42
  80e7b8:	080e26c0 	call	80e26c <read_word>
  80e7bc:	e0bff715 	stw	r2,-36(fp)
    name_len = read_half_word(current_ptr + ZIP_DIR_NAME_LEN);
  80e7c0:	e0bffa17 	ldw	r2,-24(fp)
  80e7c4:	11000704 	addi	r4,r2,28
  80e7c8:	080e3300 	call	80e330 <read_half_word>
  80e7cc:	e0bff98d 	sth	r2,-26(fp)
    extra_len = read_half_word(current_ptr + ZIP_DIR_EXTRA_LEN);
  80e7d0:	e0bffa17 	ldw	r2,-24(fp)
  80e7d4:	11000784 	addi	r4,r2,30
  80e7d8:	080e3300 	call	80e330 <read_half_word>
  80e7dc:	e0bff90d 	sth	r2,-28(fp)
    comment_len = read_half_word(current_ptr + ZIP_DIR_COMMENT_LEN);
  80e7e0:	e0bffa17 	ldw	r2,-24(fp)
  80e7e4:	11000804 	addi	r4,r2,32
  80e7e8:	080e3300 	call	80e330 <read_half_word>
  80e7ec:	e0bff88d 	sth	r2,-30(fp)

    if ((strlen((const char *)name) == name_len) && 
  80e7f0:	e13fff17 	ldw	r4,-4(fp)
  80e7f4:	08038200 	call	803820 <strlen>
  80e7f8:	1007883a 	mov	r3,r2
  80e7fc:	e0bff98b 	ldhu	r2,-26(fp)
  80e800:	18801c1e 	bne	r3,r2,80e874 <find_file_entry_by_name+0x11c>
  80e804:	e0bffa17 	ldw	r2,-24(fp)
  80e808:	10800b84 	addi	r2,r2,46
  80e80c:	1009883a 	mov	r4,r2
  80e810:	e17fff17 	ldw	r5,-4(fp)
  80e814:	e1bff98b 	ldhu	r6,-26(fp)
  80e818:	08113c80 	call	8113c8 <strncmp>
  80e81c:	1004c03a 	cmpne	r2,r2,zero
  80e820:	1000141e 	bne	r2,zero,80e874 <find_file_entry_by_name+0x11c>
    (!strncmp((const char *)(current_ptr+ZIP_DIR_HEADER_SIZE), (const char *)name, name_len)))
    {
      extra_file_len = read_half_word(dev->base + offset + ZIP_FILE_EXTRA_LEN); 
  80e824:	e0bffd17 	ldw	r2,-12(fp)
  80e828:	10c00a17 	ldw	r3,40(r2)
  80e82c:	e0bff717 	ldw	r2,-36(fp)
  80e830:	1885883a 	add	r2,r3,r2
  80e834:	11000704 	addi	r4,r2,28
  80e838:	080e3300 	call	80e330 <read_half_word>
  80e83c:	e0bff80d 	sth	r2,-32(fp)
      fd->priv = dev->base + ZIP_FILE_HEADER_SIZE 
  80e840:	e0bffd17 	ldw	r2,-12(fp)
  80e844:	10c00a17 	ldw	r3,40(r2)
  80e848:	e0bff717 	ldw	r2,-36(fp)
  80e84c:	1887883a 	add	r3,r3,r2
  80e850:	e0bff80b 	ldhu	r2,-32(fp)
  80e854:	1887883a 	add	r3,r3,r2
  80e858:	e0bff98b 	ldhu	r2,-26(fp)
  80e85c:	1885883a 	add	r2,r3,r2
  80e860:	10c00784 	addi	r3,r2,30
  80e864:	e0bffe17 	ldw	r2,-8(fp)
  80e868:	10c00115 	stw	r3,4(r2)
                  + offset + extra_file_len + name_len;
      ret_code = 0;
  80e86c:	e03ffc15 	stw	zero,-16(fp)
      break;
  80e870:	00000b06 	br	80e8a0 <find_file_entry_by_name+0x148>
    }
    current_ptr += ZIP_DIR_HEADER_SIZE + name_len + extra_len + comment_len;
  80e874:	e0fff98b 	ldhu	r3,-26(fp)
  80e878:	e0bff90b 	ldhu	r2,-28(fp)
  80e87c:	1887883a 	add	r3,r3,r2
  80e880:	e0bff88b 	ldhu	r2,-30(fp)
  80e884:	1885883a 	add	r2,r3,r2
  80e888:	1007883a 	mov	r3,r2
  80e88c:	e0bffa17 	ldw	r2,-24(fp)
  80e890:	1885883a 	add	r2,r3,r2
  80e894:	10800b84 	addi	r2,r2,46
  80e898:	e0bffa15 	stw	r2,-24(fp)
  }
  80e89c:	003fbd06 	br	80e794 <find_file_entry_by_name+0x3c>

  return ret_code;
  80e8a0:	e0bffc17 	ldw	r2,-16(fp)
}
  80e8a4:	e037883a 	mov	sp,fp
  80e8a8:	dfc00117 	ldw	ra,4(sp)
  80e8ac:	df000017 	ldw	fp,0(sp)
  80e8b0:	dec00204 	addi	sp,sp,8
  80e8b4:	f800283a 	ret

0080e8b8 <find_file_entry>:
*
* returns -EBADF if fails
*/
static int find_file_entry( alt_ro_zipfs_dev* dev, alt_fd* fd, 
                            alt_u8** start, alt_u32* len)
{
  80e8b8:	defff304 	addi	sp,sp,-52
  80e8bc:	dfc00c15 	stw	ra,48(sp)
  80e8c0:	df000b15 	stw	fp,44(sp)
  80e8c4:	df000b04 	addi	fp,sp,44
  80e8c8:	e13ffc15 	stw	r4,-16(fp)
  80e8cc:	e17ffd15 	stw	r5,-12(fp)
  80e8d0:	e1bffe15 	stw	r6,-8(fp)
  80e8d4:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = -EBADF;
  80e8d8:	00bffdc4 	movi	r2,-9
  80e8dc:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 token;
  alt_u8* current_ptr = (alt_u8*)dev->directory;
  80e8e0:	e0bffc17 	ldw	r2,-16(fp)
  80e8e4:	10800b17 	ldw	r2,44(r2)
  80e8e8:	e0bff915 	stw	r2,-28(fp)
  alt_u8* end;
  alt_u16 name_len, extra_len, comment_len, extra_file_len;
  alt_u32 offset;

  current_ptr = dev->directory;
  80e8ec:	e0bffc17 	ldw	r2,-16(fp)
  80e8f0:	10800b17 	ldw	r2,44(r2)
  80e8f4:	e0bff915 	stw	r2,-28(fp)
  80e8f8:	00000006 	br	80e8fc <find_file_entry+0x44>

  while(1)
  {
    token = read_word(current_ptr);
  80e8fc:	e13ff917 	ldw	r4,-28(fp)
  80e900:	080e26c0 	call	80e26c <read_word>
  80e904:	e0bffa15 	stw	r2,-24(fp)

    if(token != ZIP_DIRECTORY_RECORD)
  80e908:	e0fffa17 	ldw	r3,-24(fp)
  80e90c:	00808074 	movhi	r2,513
  80e910:	1092d404 	addi	r2,r2,19280
  80e914:	1880421e 	bne	r3,r2,80ea20 <find_file_entry+0x168>
    {
      break;
    }
    
    *len = read_word(current_ptr + ZIP_DIR_UNCOMPRESSED_LEN);
  80e918:	e0bff917 	ldw	r2,-28(fp)
  80e91c:	11000604 	addi	r4,r2,24
  80e920:	080e26c0 	call	80e26c <read_word>
  80e924:	1007883a 	mov	r3,r2
  80e928:	e0bfff17 	ldw	r2,-4(fp)
  80e92c:	10c00015 	stw	r3,0(r2)
    offset = read_word(current_ptr + ZIP_DIR_OFFSET);
  80e930:	e0bff917 	ldw	r2,-28(fp)
  80e934:	11000a84 	addi	r4,r2,42
  80e938:	080e26c0 	call	80e26c <read_word>
  80e93c:	e0bff515 	stw	r2,-44(fp)
    name_len = read_half_word(current_ptr + ZIP_DIR_NAME_LEN);
  80e940:	e0bff917 	ldw	r2,-28(fp)
  80e944:	11000704 	addi	r4,r2,28
  80e948:	080e3300 	call	80e330 <read_half_word>
  80e94c:	e0bff78d 	sth	r2,-34(fp)
    extra_len = read_half_word(current_ptr + ZIP_DIR_EXTRA_LEN);
  80e950:	e0bff917 	ldw	r2,-28(fp)
  80e954:	11000784 	addi	r4,r2,30
  80e958:	080e3300 	call	80e330 <read_half_word>
  80e95c:	e0bff70d 	sth	r2,-36(fp)
    comment_len = read_half_word(current_ptr + ZIP_DIR_COMMENT_LEN);
  80e960:	e0bff917 	ldw	r2,-28(fp)
  80e964:	11000804 	addi	r4,r2,32
  80e968:	080e3300 	call	80e330 <read_half_word>
  80e96c:	e0bff68d 	sth	r2,-38(fp)
    current_ptr += ZIP_DIR_HEADER_SIZE + name_len + extra_len + comment_len;
  80e970:	e0fff78b 	ldhu	r3,-34(fp)
  80e974:	e0bff70b 	ldhu	r2,-36(fp)
  80e978:	1887883a 	add	r3,r3,r2
  80e97c:	e0bff68b 	ldhu	r2,-38(fp)
  80e980:	1885883a 	add	r2,r3,r2
  80e984:	1007883a 	mov	r3,r2
  80e988:	e0bff917 	ldw	r2,-28(fp)
  80e98c:	1885883a 	add	r2,r3,r2
  80e990:	10800b84 	addi	r2,r2,46
  80e994:	e0bff915 	stw	r2,-28(fp)

    extra_file_len = read_half_word(dev->base + offset + ZIP_FILE_EXTRA_LEN); 
  80e998:	e0bffc17 	ldw	r2,-16(fp)
  80e99c:	10c00a17 	ldw	r3,40(r2)
  80e9a0:	e0bff517 	ldw	r2,-44(fp)
  80e9a4:	1885883a 	add	r2,r3,r2
  80e9a8:	11000704 	addi	r4,r2,28
  80e9ac:	080e3300 	call	80e330 <read_half_word>
  80e9b0:	e0bff60d 	sth	r2,-40(fp)

    *start = dev->base + ZIP_FILE_HEADER_SIZE + offset + extra_file_len + name_len;
  80e9b4:	e0bffc17 	ldw	r2,-16(fp)
  80e9b8:	10c00a17 	ldw	r3,40(r2)
  80e9bc:	e0bff517 	ldw	r2,-44(fp)
  80e9c0:	1887883a 	add	r3,r3,r2
  80e9c4:	e0bff60b 	ldhu	r2,-40(fp)
  80e9c8:	1887883a 	add	r3,r3,r2
  80e9cc:	e0bff78b 	ldhu	r2,-34(fp)
  80e9d0:	1885883a 	add	r2,r3,r2
  80e9d4:	10c00784 	addi	r3,r2,30
  80e9d8:	e0bffe17 	ldw	r2,-8(fp)
  80e9dc:	10c00015 	stw	r3,0(r2)

    /* The plus 1 is for the End of file condition */
    end = *start + *len;
  80e9e0:	e0bffe17 	ldw	r2,-8(fp)
  80e9e4:	10c00017 	ldw	r3,0(r2)
  80e9e8:	e0bfff17 	ldw	r2,-4(fp)
  80e9ec:	10800017 	ldw	r2,0(r2)
  80e9f0:	1885883a 	add	r2,r3,r2
  80e9f4:	e0bff815 	stw	r2,-32(fp)
    if ((fd->priv >= *start ) &&
  80e9f8:	e0bffd17 	ldw	r2,-12(fp)
  80e9fc:	10c00117 	ldw	r3,4(r2)
  80ea00:	e0bffe17 	ldw	r2,-8(fp)
  80ea04:	10800017 	ldw	r2,0(r2)
  80ea08:	18bfbc36 	bltu	r3,r2,80e8fc <find_file_entry+0x44>
  80ea0c:	e0bffd17 	ldw	r2,-12(fp)
  80ea10:	10c00117 	ldw	r3,4(r2)
  80ea14:	e0bff817 	ldw	r2,-32(fp)
  80ea18:	10ffb836 	bltu	r2,r3,80e8fc <find_file_entry+0x44>
        (fd->priv <= end))
    {
      ret_code = 0;
  80ea1c:	e03ffb15 	stw	zero,-20(fp)
      break;
    }
  }

  return ret_code;
  80ea20:	e0bffb17 	ldw	r2,-20(fp)
}
  80ea24:	e037883a 	mov	sp,fp
  80ea28:	dfc00117 	ldw	ra,4(sp)
  80ea2c:	df000017 	ldw	fp,0(sp)
  80ea30:	dec00204 	addi	sp,sp,8
  80ea34:	f800283a 	ret

0080ea38 <alt_ro_zipfs_open>:
* Find the Central dircetory and then find the pointer to this file
* from that.
*
*/
int alt_ro_zipfs_open(alt_fd* fd, const char* name, int flags, int mode)
{
  80ea38:	defff804 	addi	sp,sp,-32
  80ea3c:	dfc00715 	stw	ra,28(sp)
  80ea40:	df000615 	stw	fp,24(sp)
  80ea44:	df000604 	addi	fp,sp,24
  80ea48:	e13ffc15 	stw	r4,-16(fp)
  80ea4c:	e17ffd15 	stw	r5,-12(fp)
  80ea50:	e1bffe15 	stw	r6,-8(fp)
  80ea54:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = -EROFS;
  80ea58:	00bff884 	movi	r2,-30
  80ea5c:	e0bffb15 	stw	r2,-20(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  80ea60:	e0bffc17 	ldw	r2,-16(fp)
  80ea64:	10800017 	ldw	r2,0(r2)
  80ea68:	e0bffa15 	stw	r2,-24(fp)

#ifdef ALT_USE_DIRECT_DRIVERS
  ALT_LINK_ERROR("Error: Read-only ZIP filesystem not supported when direct drivers are used.");
#endif

  if (flags == O_RDONLY )
  80ea6c:	e0bffe17 	ldw	r2,-8(fp)
  80ea70:	1004c03a 	cmpne	r2,r2,zero
  80ea74:	1000101e 	bne	r2,zero,80eab8 <alt_ro_zipfs_open+0x80>
  {
    if (dev->directory != NULL)
  80ea78:	e0bffa17 	ldw	r2,-24(fp)
  80ea7c:	10800b17 	ldw	r2,44(r2)
  80ea80:	1005003a 	cmpeq	r2,r2,zero
  80ea84:	10000c1e 	bne	r2,zero,80eab8 <alt_ro_zipfs_open+0x80>
    {
      ret_code = find_file_entry_by_name( dev, fd, 
  80ea88:	e0bffa17 	ldw	r2,-24(fp)
  80ea8c:	11000217 	ldw	r4,8(r2)
  80ea90:	08038200 	call	803820 <strlen>
  80ea94:	1007883a 	mov	r3,r2
  80ea98:	e0bffd17 	ldw	r2,-12(fp)
  80ea9c:	1885883a 	add	r2,r3,r2
  80eaa0:	10800044 	addi	r2,r2,1
  80eaa4:	100d883a 	mov	r6,r2
  80eaa8:	e13ffa17 	ldw	r4,-24(fp)
  80eaac:	e17ffc17 	ldw	r5,-16(fp)
  80eab0:	080e7580 	call	80e758 <find_file_entry_by_name>
  80eab4:	e0bffb15 	stw	r2,-20(fp)
                                          (const alt_u8*)(name+strlen(dev->fs_dev.name)+1));
    }
  }

  return ret_code;
  80eab8:	e0bffb17 	ldw	r2,-20(fp)
}
  80eabc:	e037883a 	mov	sp,fp
  80eac0:	dfc00117 	ldw	ra,4(sp)
  80eac4:	df000017 	ldw	fp,0(sp)
  80eac8:	dec00204 	addi	sp,sp,8
  80eacc:	f800283a 	ret

0080ead0 <alt_ro_zipfs_read>:
* alt_ro_zipfs_read
*
* Read the file
*/
int alt_ro_zipfs_read(alt_fd* fd, char* ptr, int len)
{
  80ead0:	defff104 	addi	sp,sp,-60
  80ead4:	dfc00e15 	stw	ra,56(sp)
  80ead8:	df000d15 	stw	fp,52(sp)
  80eadc:	df000d04 	addi	fp,sp,52
  80eae0:	e13ffb15 	stw	r4,-20(fp)
  80eae4:	e17ffc15 	stw	r5,-16(fp)
  80eae8:	e1bffd15 	stw	r6,-12(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  80eaec:	e0bffb17 	ldw	r2,-20(fp)
  80eaf0:	10800017 	ldw	r2,0(r2)
  80eaf4:	e0bff815 	stw	r2,-32(fp)
  alt_u8 *start, *current;
  alt_u32 file_len;
  int amount_to_copy;
  alt_irq_context context;

  find_file_entry(dev, fd, &start, &file_len);
  80eaf8:	e1bff904 	addi	r6,fp,-28
  80eafc:	e1fffa04 	addi	r7,fp,-24
  80eb00:	e13ff817 	ldw	r4,-32(fp)
  80eb04:	e17ffb17 	ldw	r5,-20(fp)
  80eb08:	080e8b80 	call	80e8b8 <find_file_entry>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eb0c:	0005303a 	rdctl	r2,status
  80eb10:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eb14:	e0fff417 	ldw	r3,-48(fp)
  80eb18:	00bfff84 	movi	r2,-2
  80eb1c:	1884703a 	and	r2,r3,r2
  80eb20:	1001703a 	wrctl	status,r2
  
  return context;
  80eb24:	e0bff417 	ldw	r2,-48(fp)
  *
  * We could use a Mutex or a binary semaphore, but those would have 
  * a much bigger code footprint and disable interrupts for as many 
  * instructions anyway
  */
  context = alt_irq_disable_all();
  80eb28:	e0bff515 	stw	r2,-44(fp)
  current = fd->priv;
  80eb2c:	e0bffb17 	ldw	r2,-20(fp)
  80eb30:	10800117 	ldw	r2,4(r2)
  80eb34:	e0bff715 	stw	r2,-36(fp)
  amount_to_copy = MIN(len, file_len - (current - start));
  80eb38:	e13ffa17 	ldw	r4,-24(fp)
  80eb3c:	e0fff717 	ldw	r3,-36(fp)
  80eb40:	e0bff917 	ldw	r2,-28(fp)
  80eb44:	1885c83a 	sub	r2,r3,r2
  80eb48:	2085c83a 	sub	r2,r4,r2
  80eb4c:	e0fffd17 	ldw	r3,-12(fp)
  80eb50:	e0ffff15 	stw	r3,-4(fp)
  80eb54:	e0bffe15 	stw	r2,-8(fp)
  80eb58:	e0bfff17 	ldw	r2,-4(fp)
  80eb5c:	e0fffe17 	ldw	r3,-8(fp)
  80eb60:	10c0022e 	bgeu	r2,r3,80eb6c <alt_ro_zipfs_read+0x9c>
  80eb64:	e0bfff17 	ldw	r2,-4(fp)
  80eb68:	e0bffe15 	stw	r2,-8(fp)
  80eb6c:	e0fffe17 	ldw	r3,-8(fp)
  80eb70:	e0fff615 	stw	r3,-40(fp)
  fd->priv += amount_to_copy;
  80eb74:	e0bffb17 	ldw	r2,-20(fp)
  80eb78:	10c00117 	ldw	r3,4(r2)
  80eb7c:	e0bff617 	ldw	r2,-40(fp)
  80eb80:	1887883a 	add	r3,r3,r2
  80eb84:	e0bffb17 	ldw	r2,-20(fp)
  80eb88:	10c00115 	stw	r3,4(r2)
  80eb8c:	e0bff517 	ldw	r2,-44(fp)
  80eb90:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eb94:	e0bff317 	ldw	r2,-52(fp)
  80eb98:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(context);

  memcpy(ptr, current, amount_to_copy);
  80eb9c:	e1bff617 	ldw	r6,-40(fp)
  80eba0:	e0bffc17 	ldw	r2,-16(fp)
  80eba4:	e0fff717 	ldw	r3,-36(fp)
  80eba8:	1009883a 	mov	r4,r2
  80ebac:	180b883a 	mov	r5,r3
  80ebb0:	0808a8c0 	call	808a8c <memcpy>
  
  return amount_to_copy;
  80ebb4:	e0bff617 	ldw	r2,-40(fp)
}
  80ebb8:	e037883a 	mov	sp,fp
  80ebbc:	dfc00117 	ldw	ra,4(sp)
  80ebc0:	df000017 	ldw	fp,0(sp)
  80ebc4:	dec00204 	addi	sp,sp,8
  80ebc8:	f800283a 	ret

0080ebcc <alt_ro_zipfs_seek>:
* Move around within a file
*
* returns -EROFS for a seek beyond the end of the file
*/
int alt_ro_zipfs_seek(alt_fd* fd, int ptr, int dir)
{
  80ebcc:	defff604 	addi	sp,sp,-40
  80ebd0:	dfc00915 	stw	ra,36(sp)
  80ebd4:	df000815 	stw	fp,32(sp)
  80ebd8:	df000804 	addi	fp,sp,32
  80ebdc:	e13ffc15 	stw	r4,-16(fp)
  80ebe0:	e17ffd15 	stw	r5,-12(fp)
  80ebe4:	e1bffe15 	stw	r6,-8(fp)
  int ret_code;
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  80ebe8:	e0bffc17 	ldw	r2,-16(fp)
  80ebec:	10800017 	ldw	r2,0(r2)
  80ebf0:	e0bff815 	stw	r2,-32(fp)
  alt_u8* start;
  alt_u32 len;

  find_file_entry(dev, fd, &start, &len);
  80ebf4:	e1bffa04 	addi	r6,fp,-24
  80ebf8:	e1fffb04 	addi	r7,fp,-20
  80ebfc:	e13ff817 	ldw	r4,-32(fp)
  80ec00:	e17ffc17 	ldw	r5,-16(fp)
  80ec04:	080e8b80 	call	80e8b8 <find_file_entry>

  switch(dir)
  80ec08:	e0bffe17 	ldw	r2,-8(fp)
  80ec0c:	e0bfff15 	stw	r2,-4(fp)
  80ec10:	e0ffff17 	ldw	r3,-4(fp)
  80ec14:	18800060 	cmpeqi	r2,r3,1
  80ec18:	1000071e 	bne	r2,zero,80ec38 <alt_ro_zipfs_seek+0x6c>
  80ec1c:	e0ffff17 	ldw	r3,-4(fp)
  80ec20:	188000a0 	cmpeqi	r2,r3,2
  80ec24:	1000221e 	bne	r2,zero,80ecb0 <alt_ro_zipfs_seek+0xe4>
  80ec28:	e0ffff17 	ldw	r3,-4(fp)
  80ec2c:	1805003a 	cmpeq	r2,r3,zero
  80ec30:	1000131e 	bne	r2,zero,80ec80 <alt_ro_zipfs_seek+0xb4>
  80ec34:	00002b06 	br	80ece4 <alt_ro_zipfs_seek+0x118>
  {

  case SEEK_CUR:
    {
      /* Seek from current position */
      if ((fd->priv + ptr) > (start +len))
  80ec38:	e0bffc17 	ldw	r2,-16(fp)
  80ec3c:	10c00117 	ldw	r3,4(r2)
  80ec40:	e0bffd17 	ldw	r2,-12(fp)
  80ec44:	1889883a 	add	r4,r3,r2
  80ec48:	e0fffa17 	ldw	r3,-24(fp)
  80ec4c:	e0bffb17 	ldw	r2,-20(fp)
  80ec50:	1885883a 	add	r2,r3,r2
  80ec54:	1100032e 	bgeu	r2,r4,80ec64 <alt_ro_zipfs_seek+0x98>
      {
        ret_code = -EINVAL;
  80ec58:	00bffa84 	movi	r2,-22
  80ec5c:	e0bff915 	stw	r2,-28(fp)
        goto exit;
  80ec60:	00002606 	br	80ecfc <alt_ro_zipfs_seek+0x130>
      }

      fd->priv += ptr;
  80ec64:	e0bffc17 	ldw	r2,-16(fp)
  80ec68:	10c00117 	ldw	r3,4(r2)
  80ec6c:	e0bffd17 	ldw	r2,-12(fp)
  80ec70:	1887883a 	add	r3,r3,r2
  80ec74:	e0bffc17 	ldw	r2,-16(fp)
  80ec78:	10c00115 	stw	r3,4(r2)
      break;
  80ec7c:	00001906 	br	80ece4 <alt_ro_zipfs_seek+0x118>
    }
  case SEEK_SET:
    {
      /* Seek from the beginning */
      if (ptr > len)
  80ec80:	e0fffd17 	ldw	r3,-12(fp)
  80ec84:	e0bffb17 	ldw	r2,-20(fp)
  80ec88:	10c0032e 	bgeu	r2,r3,80ec98 <alt_ro_zipfs_seek+0xcc>
      {
        ret_code = -EINVAL;
  80ec8c:	00bffa84 	movi	r2,-22
  80ec90:	e0bff915 	stw	r2,-28(fp)
        goto exit;
  80ec94:	00001906 	br	80ecfc <alt_ro_zipfs_seek+0x130>
      }

      fd->priv = start + ptr;
  80ec98:	e0fffa17 	ldw	r3,-24(fp)
  80ec9c:	e0bffd17 	ldw	r2,-12(fp)
  80eca0:	1887883a 	add	r3,r3,r2
  80eca4:	e0bffc17 	ldw	r2,-16(fp)
  80eca8:	10c00115 	stw	r3,4(r2)
      break;
  80ecac:	00000d06 	br	80ece4 <alt_ro_zipfs_seek+0x118>
    }
  case SEEK_END:
    {
      if(ptr > 0)
  80ecb0:	e0bffd17 	ldw	r2,-12(fp)
  80ecb4:	10800050 	cmplti	r2,r2,1
  80ecb8:	1000031e 	bne	r2,zero,80ecc8 <alt_ro_zipfs_seek+0xfc>
      {
        ret_code = -EINVAL;
  80ecbc:	00bffa84 	movi	r2,-22
  80ecc0:	e0bff915 	stw	r2,-28(fp)
        goto exit;
  80ecc4:	00000d06 	br	80ecfc <alt_ro_zipfs_seek+0x130>
      }

      fd->priv = start + ptr + len;
  80ecc8:	e0fffa17 	ldw	r3,-24(fp)
  80eccc:	e0bffd17 	ldw	r2,-12(fp)
  80ecd0:	1887883a 	add	r3,r3,r2
  80ecd4:	e0bffb17 	ldw	r2,-20(fp)
  80ecd8:	1887883a 	add	r3,r3,r2
  80ecdc:	e0bffc17 	ldw	r2,-16(fp)
  80ece0:	10c00115 	stw	r3,4(r2)
      break;
    }
  }
  ret_code = (int)(fd->priv - start);
  80ece4:	e0bffc17 	ldw	r2,-16(fp)
  80ece8:	10800117 	ldw	r2,4(r2)
  80ecec:	1007883a 	mov	r3,r2
  80ecf0:	e0bffa17 	ldw	r2,-24(fp)
  80ecf4:	1885c83a 	sub	r2,r3,r2
  80ecf8:	e0bff915 	stw	r2,-28(fp)

exit:
  return ret_code;
  80ecfc:	e0bff917 	ldw	r2,-28(fp)
}
  80ed00:	e037883a 	mov	sp,fp
  80ed04:	dfc00117 	ldw	ra,4(sp)
  80ed08:	df000017 	ldw	fp,0(sp)
  80ed0c:	dec00204 	addi	sp,sp,8
  80ed10:	f800283a 	ret

0080ed14 <alt_ro_zipfs_fstat>:
* 
* Return the file status information, the only fields we fill in are
* the size and that this really is a file, not a device
*/
int alt_ro_zipfs_fstat(alt_fd* fd, struct stat* buf)
{
  80ed14:	defff804 	addi	sp,sp,-32
  80ed18:	dfc00715 	stw	ra,28(sp)
  80ed1c:	df000615 	stw	fp,24(sp)
  80ed20:	df000604 	addi	fp,sp,24
  80ed24:	e13ffe15 	stw	r4,-8(fp)
  80ed28:	e17fff15 	stw	r5,-4(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  80ed2c:	e0bffe17 	ldw	r2,-8(fp)
  80ed30:	10800017 	ldw	r2,0(r2)
  80ed34:	e0bffb15 	stw	r2,-20(fp)
  alt_u8* start;
  alt_u32 len;
  int ret_code = 0;
  80ed38:	e03ffa15 	stw	zero,-24(fp)

  find_file_entry(dev, fd, &start, &len);
  80ed3c:	e1bffc04 	addi	r6,fp,-16
  80ed40:	e1fffd04 	addi	r7,fp,-12
  80ed44:	e13ffb17 	ldw	r4,-20(fp)
  80ed48:	e17ffe17 	ldw	r5,-8(fp)
  80ed4c:	080e8b80 	call	80e8b8 <find_file_entry>
  buf->st_mode = S_IFREG;
  80ed50:	e0ffff17 	ldw	r3,-4(fp)
  80ed54:	00a00014 	movui	r2,32768
  80ed58:	18800115 	stw	r2,4(r3)
  buf->st_size = (off_t)len;
  80ed5c:	e0bffd17 	ldw	r2,-12(fp)
  80ed60:	1007883a 	mov	r3,r2
  80ed64:	e0bfff17 	ldw	r2,-4(fp)
  80ed68:	10c00415 	stw	r3,16(r2)

  return ret_code;
  80ed6c:	e0bffa17 	ldw	r2,-24(fp)
}
  80ed70:	e037883a 	mov	sp,fp
  80ed74:	dfc00117 	ldw	ra,4(sp)
  80ed78:	df000017 	ldw	fp,0(sp)
  80ed7c:	dec00204 	addi	sp,sp,8
  80ed80:	f800283a 	ret

0080ed84 <alt_ro_zipfs_check_valid>:
* check that the file system is a valid zip file
* if so return 1
*
*/
int alt_ro_zipfs_check_valid(alt_ro_zipfs_dev* dev)
{
  80ed84:	defffc04 	addi	sp,sp,-16
  80ed88:	dfc00315 	stw	ra,12(sp)
  80ed8c:	df000215 	stw	fp,8(sp)
  80ed90:	df000204 	addi	fp,sp,8
  80ed94:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  80ed98:	e03ffe15 	stw	zero,-8(fp)
  if (find_directory_entry(dev) != -ENOENT)
  80ed9c:	e13fff17 	ldw	r4,-4(fp)
  80eda0:	080e6ac0 	call	80e6ac <find_directory_entry>
  80eda4:	10bfffa0 	cmpeqi	r2,r2,-2
  80eda8:	1000061e 	bne	r2,zero,80edc4 <alt_ro_zipfs_check_valid+0x40>
  {
    if (check_directory_table(dev) != -ENOENT)
  80edac:	e13fff17 	ldw	r4,-4(fp)
  80edb0:	080e60c0 	call	80e60c <check_directory_table>
  80edb4:	10bfffa0 	cmpeqi	r2,r2,-2
  80edb8:	1000021e 	bne	r2,zero,80edc4 <alt_ro_zipfs_check_valid+0x40>
    {
      ret_code = 1;
  80edbc:	00800044 	movi	r2,1
  80edc0:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  return ret_code;
  80edc4:	e0bffe17 	ldw	r2,-8(fp)
}
  80edc8:	e037883a 	mov	sp,fp
  80edcc:	dfc00117 	ldw	ra,4(sp)
  80edd0:	df000017 	ldw	fp,0(sp)
  80edd4:	dec00204 	addi	sp,sp,8
  80edd8:	f800283a 	ret

0080eddc <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  80eddc:	defffc04 	addi	sp,sp,-16
  80ede0:	dfc00315 	stw	ra,12(sp)
  80ede4:	df000215 	stw	fp,8(sp)
  80ede8:	df000204 	addi	fp,sp,8
  80edec:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  80edf0:	e13fff17 	ldw	r4,-4(fp)
  80edf4:	01402074 	movhi	r5,129
  80edf8:	294e5704 	addi	r5,r5,14684
  80edfc:	08106bc0 	call	8106bc <alt_find_dev>
  80ee00:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  80ee04:	e0bffe17 	ldw	r2,-8(fp)
}
  80ee08:	e037883a 	mov	sp,fp
  80ee0c:	dfc00117 	ldw	ra,4(sp)
  80ee10:	df000017 	ldw	fp,0(sp)
  80ee14:	dec00204 	addi	sp,sp,8
  80ee18:	f800283a 	ret

0080ee1c <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  80ee1c:	defff904 	addi	sp,sp,-28
  80ee20:	df000615 	stw	fp,24(sp)
  80ee24:	df000604 	addi	fp,sp,24
  80ee28:	e13ffb15 	stw	r4,-20(fp)
  80ee2c:	e17ffc15 	stw	r5,-16(fp)
  80ee30:	e1bffd15 	stw	r6,-12(fp)
  80ee34:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  80ee38:	e0bffb17 	ldw	r2,-20(fp)
  80ee3c:	10c00f17 	ldw	r3,60(r2)
  80ee40:	e0bffd17 	ldw	r2,-12(fp)
  80ee44:	10c0042e 	bgeu	r2,r3,80ee58 <alt_up_pixel_buffer_dma_draw+0x3c>
  80ee48:	e0bffb17 	ldw	r2,-20(fp)
  80ee4c:	10c01017 	ldw	r3,64(r2)
  80ee50:	e0bffe17 	ldw	r2,-8(fp)
  80ee54:	10c00336 	bltu	r2,r3,80ee64 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  80ee58:	00bfffc4 	movi	r2,-1
  80ee5c:	e0bfff15 	stw	r2,-4(fp)
  80ee60:	00005106 	br	80efa8 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  80ee64:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80ee68:	e0bffb17 	ldw	r2,-20(fp)
  80ee6c:	10800d17 	ldw	r2,52(r2)
  80ee70:	1004c03a 	cmpne	r2,r2,zero
  80ee74:	1000151e 	bne	r2,zero,80eecc <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  80ee78:	e0bffb17 	ldw	r2,-20(fp)
  80ee7c:	10c01217 	ldw	r3,72(r2)
  80ee80:	e0bffd17 	ldw	r2,-12(fp)
  80ee84:	1886703a 	and	r3,r3,r2
  80ee88:	e0bffb17 	ldw	r2,-20(fp)
  80ee8c:	10801117 	ldw	r2,68(r2)
  80ee90:	1886983a 	sll	r3,r3,r2
  80ee94:	e0bffa17 	ldw	r2,-24(fp)
  80ee98:	10c4b03a 	or	r2,r2,r3
  80ee9c:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  80eea0:	e0bffb17 	ldw	r2,-20(fp)
  80eea4:	10c01417 	ldw	r3,80(r2)
  80eea8:	e0bffe17 	ldw	r2,-8(fp)
  80eeac:	1886703a 	and	r3,r3,r2
  80eeb0:	e0bffb17 	ldw	r2,-20(fp)
  80eeb4:	10801317 	ldw	r2,76(r2)
  80eeb8:	1886983a 	sll	r3,r3,r2
  80eebc:	e0bffa17 	ldw	r2,-24(fp)
  80eec0:	10c4b03a 	or	r2,r2,r3
  80eec4:	e0bffa15 	stw	r2,-24(fp)
  80eec8:	00001706 	br	80ef28 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  80eecc:	e0bffb17 	ldw	r2,-20(fp)
  80eed0:	10c01217 	ldw	r3,72(r2)
  80eed4:	e0bffd17 	ldw	r2,-12(fp)
  80eed8:	1886703a 	and	r3,r3,r2
  80eedc:	e0bffb17 	ldw	r2,-20(fp)
  80eee0:	10801117 	ldw	r2,68(r2)
  80eee4:	1886983a 	sll	r3,r3,r2
  80eee8:	e0bffa17 	ldw	r2,-24(fp)
  80eeec:	10c5883a 	add	r2,r2,r3
  80eef0:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  80eef4:	e0bffb17 	ldw	r2,-20(fp)
  80eef8:	10c01417 	ldw	r3,80(r2)
  80eefc:	e0bffe17 	ldw	r2,-8(fp)
  80ef00:	1886703a 	and	r3,r3,r2
  80ef04:	e0bffb17 	ldw	r2,-20(fp)
  80ef08:	10800f17 	ldw	r2,60(r2)
  80ef0c:	1887383a 	mul	r3,r3,r2
  80ef10:	e0bffb17 	ldw	r2,-20(fp)
  80ef14:	10801117 	ldw	r2,68(r2)
  80ef18:	1886983a 	sll	r3,r3,r2
  80ef1c:	e0bffa17 	ldw	r2,-24(fp)
  80ef20:	10c5883a 	add	r2,r2,r3
  80ef24:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80ef28:	e0bffb17 	ldw	r2,-20(fp)
  80ef2c:	10800e17 	ldw	r2,56(r2)
  80ef30:	10800058 	cmpnei	r2,r2,1
  80ef34:	1000081e 	bne	r2,zero,80ef58 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80ef38:	e0bffb17 	ldw	r2,-20(fp)
  80ef3c:	10800c17 	ldw	r2,48(r2)
  80ef40:	1007883a 	mov	r3,r2
  80ef44:	e0bffa17 	ldw	r2,-24(fp)
  80ef48:	1885883a 	add	r2,r3,r2
  80ef4c:	e0fffc17 	ldw	r3,-16(fp)
  80ef50:	10c00025 	stbio	r3,0(r2)
  80ef54:	00001306 	br	80efa4 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80ef58:	e0bffb17 	ldw	r2,-20(fp)
  80ef5c:	10800e17 	ldw	r2,56(r2)
  80ef60:	10800098 	cmpnei	r2,r2,2
  80ef64:	1000081e 	bne	r2,zero,80ef88 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80ef68:	e0bffb17 	ldw	r2,-20(fp)
  80ef6c:	10800c17 	ldw	r2,48(r2)
  80ef70:	1007883a 	mov	r3,r2
  80ef74:	e0bffa17 	ldw	r2,-24(fp)
  80ef78:	1885883a 	add	r2,r3,r2
  80ef7c:	e0fffc17 	ldw	r3,-16(fp)
  80ef80:	10c0002d 	sthio	r3,0(r2)
  80ef84:	00000706 	br	80efa4 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80ef88:	e0bffb17 	ldw	r2,-20(fp)
  80ef8c:	10800c17 	ldw	r2,48(r2)
  80ef90:	1007883a 	mov	r3,r2
  80ef94:	e0bffa17 	ldw	r2,-24(fp)
  80ef98:	1885883a 	add	r2,r3,r2
  80ef9c:	e0fffc17 	ldw	r3,-16(fp)
  80efa0:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  80efa4:	e03fff15 	stw	zero,-4(fp)
  80efa8:	e0bfff17 	ldw	r2,-4(fp)
}
  80efac:	e037883a 	mov	sp,fp
  80efb0:	df000017 	ldw	fp,0(sp)
  80efb4:	dec00104 	addi	sp,sp,4
  80efb8:	f800283a 	ret

0080efbc <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  80efbc:	defffd04 	addi	sp,sp,-12
  80efc0:	df000215 	stw	fp,8(sp)
  80efc4:	df000204 	addi	fp,sp,8
  80efc8:	e13ffe15 	stw	r4,-8(fp)
  80efcc:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  80efd0:	e0bffe17 	ldw	r2,-8(fp)
  80efd4:	10800a17 	ldw	r2,40(r2)
  80efd8:	10800104 	addi	r2,r2,4
  80efdc:	e0ffff17 	ldw	r3,-4(fp)
  80efe0:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  80efe4:	e0bffe17 	ldw	r2,-8(fp)
  80efe8:	10800a17 	ldw	r2,40(r2)
  80efec:	10800104 	addi	r2,r2,4
  80eff0:	10800037 	ldwio	r2,0(r2)
  80eff4:	1007883a 	mov	r3,r2
  80eff8:	e0bffe17 	ldw	r2,-8(fp)
  80effc:	10c00c15 	stw	r3,48(r2)
	return 0;
  80f000:	0005883a 	mov	r2,zero
}
  80f004:	e037883a 	mov	sp,fp
  80f008:	df000017 	ldw	fp,0(sp)
  80f00c:	dec00104 	addi	sp,sp,4
  80f010:	f800283a 	ret

0080f014 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  80f014:	defffe04 	addi	sp,sp,-8
  80f018:	df000115 	stw	fp,4(sp)
  80f01c:	df000104 	addi	fp,sp,4
  80f020:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  80f024:	e0bfff17 	ldw	r2,-4(fp)
  80f028:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  80f02c:	e0bfff17 	ldw	r2,-4(fp)
  80f030:	10800a17 	ldw	r2,40(r2)
  80f034:	1007883a 	mov	r3,r2
  80f038:	00800044 	movi	r2,1
  80f03c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  80f040:	e0bfff17 	ldw	r2,-4(fp)
  80f044:	10c00b17 	ldw	r3,44(r2)
  80f048:	e0bfff17 	ldw	r2,-4(fp)
  80f04c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  80f050:	e0bfff17 	ldw	r2,-4(fp)
  80f054:	11000b15 	stw	r4,44(r2)
	return 0;
  80f058:	0005883a 	mov	r2,zero
}
  80f05c:	e037883a 	mov	sp,fp
  80f060:	df000017 	ldw	fp,0(sp)
  80f064:	dec00104 	addi	sp,sp,4
  80f068:	f800283a 	ret

0080f06c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  80f06c:	defffe04 	addi	sp,sp,-8
  80f070:	df000115 	stw	fp,4(sp)
  80f074:	df000104 	addi	fp,sp,4
  80f078:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  80f07c:	e0bfff17 	ldw	r2,-4(fp)
  80f080:	10800a17 	ldw	r2,40(r2)
  80f084:	10800304 	addi	r2,r2,12
  80f088:	10800037 	ldwio	r2,0(r2)
  80f08c:	1080004c 	andi	r2,r2,1
}
  80f090:	e037883a 	mov	sp,fp
  80f094:	df000017 	ldw	fp,0(sp)
  80f098:	dec00104 	addi	sp,sp,4
  80f09c:	f800283a 	ret

0080f0a0 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  80f0a0:	defff604 	addi	sp,sp,-40
  80f0a4:	df000915 	stw	fp,36(sp)
  80f0a8:	df000904 	addi	fp,sp,36
  80f0ac:	e13ff715 	stw	r4,-36(fp)
  80f0b0:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80f0b4:	e0bff817 	ldw	r2,-32(fp)
  80f0b8:	10800058 	cmpnei	r2,r2,1
  80f0bc:	1000041e 	bne	r2,zero,80f0d0 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  80f0c0:	e0bff717 	ldw	r2,-36(fp)
  80f0c4:	10800c17 	ldw	r2,48(r2)
  80f0c8:	e0bfff15 	stw	r2,-4(fp)
  80f0cc:	00000306 	br	80f0dc <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  80f0d0:	e0bff717 	ldw	r2,-36(fp)
  80f0d4:	10800b17 	ldw	r2,44(r2)
  80f0d8:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  80f0dc:	e0bff717 	ldw	r2,-36(fp)
  80f0e0:	10800f17 	ldw	r2,60(r2)
  80f0e4:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80f0e8:	e0bff717 	ldw	r2,-36(fp)
  80f0ec:	10800e17 	ldw	r2,56(r2)
  80f0f0:	10800098 	cmpnei	r2,r2,2
  80f0f4:	1000051e 	bne	r2,zero,80f10c <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  80f0f8:	e0fffe17 	ldw	r3,-8(fp)
  80f0fc:	e0fffe17 	ldw	r3,-8(fp)
  80f100:	18c5883a 	add	r2,r3,r3
  80f104:	e0bffe15 	stw	r2,-8(fp)
  80f108:	00000506 	br	80f120 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  80f10c:	e13ffe17 	ldw	r4,-8(fp)
  80f110:	e13ffe17 	ldw	r4,-8(fp)
  80f114:	2105883a 	add	r2,r4,r4
  80f118:	1085883a 	add	r2,r2,r2
  80f11c:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  80f120:	e0bff717 	ldw	r2,-36(fp)
  80f124:	10801017 	ldw	r2,64(r2)
  80f128:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80f12c:	e0bff717 	ldw	r2,-36(fp)
  80f130:	10800d17 	ldw	r2,52(r2)
  80f134:	1004c03a 	cmpne	r2,r2,zero
  80f138:	10001e1e 	bne	r2,zero,80f1b4 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80f13c:	e0bff717 	ldw	r2,-36(fp)
  80f140:	10801317 	ldw	r2,76(r2)
  80f144:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  80f148:	e03ffb15 	stw	zero,-20(fp)
  80f14c:	00001506 	br	80f1a4 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  80f150:	e03ffc15 	stw	zero,-16(fp)
  80f154:	00000706 	br	80f174 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  80f158:	e0ffff17 	ldw	r3,-4(fp)
  80f15c:	e0bffc17 	ldw	r2,-16(fp)
  80f160:	1885883a 	add	r2,r3,r2
  80f164:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  80f168:	e0bffc17 	ldw	r2,-16(fp)
  80f16c:	10800104 	addi	r2,r2,4
  80f170:	e0bffc15 	stw	r2,-16(fp)
  80f174:	e0fffc17 	ldw	r3,-16(fp)
  80f178:	e13ffe17 	ldw	r4,-8(fp)
  80f17c:	193ff636 	bltu	r3,r4,80f158 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  80f180:	e0fffa17 	ldw	r3,-24(fp)
  80f184:	00800044 	movi	r2,1
  80f188:	10c4983a 	sll	r2,r2,r3
  80f18c:	e0ffff17 	ldw	r3,-4(fp)
  80f190:	1887883a 	add	r3,r3,r2
  80f194:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  80f198:	e13ffb17 	ldw	r4,-20(fp)
  80f19c:	21000044 	addi	r4,r4,1
  80f1a0:	e13ffb15 	stw	r4,-20(fp)
  80f1a4:	e0bffb17 	ldw	r2,-20(fp)
  80f1a8:	e0fffd17 	ldw	r3,-12(fp)
  80f1ac:	10ffe836 	bltu	r2,r3,80f150 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  80f1b0:	00001006 	br	80f1f4 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  80f1b4:	e13ffd17 	ldw	r4,-12(fp)
  80f1b8:	e0bffe17 	ldw	r2,-8(fp)
  80f1bc:	2089383a 	mul	r4,r4,r2
  80f1c0:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  80f1c4:	e03ff915 	stw	zero,-28(fp)
  80f1c8:	00000706 	br	80f1e8 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  80f1cc:	e0ffff17 	ldw	r3,-4(fp)
  80f1d0:	e0bff917 	ldw	r2,-28(fp)
  80f1d4:	1885883a 	add	r2,r3,r2
  80f1d8:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  80f1dc:	e0fff917 	ldw	r3,-28(fp)
  80f1e0:	18c00104 	addi	r3,r3,4
  80f1e4:	e0fff915 	stw	r3,-28(fp)
  80f1e8:	e0bff917 	ldw	r2,-28(fp)
  80f1ec:	e13ffd17 	ldw	r4,-12(fp)
  80f1f0:	113ff636 	bltu	r2,r4,80f1cc <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  80f1f4:	e037883a 	mov	sp,fp
  80f1f8:	df000017 	ldw	fp,0(sp)
  80f1fc:	dec00104 	addi	sp,sp,4
  80f200:	f800283a 	ret

0080f204 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  80f204:	deffed04 	addi	sp,sp,-76
  80f208:	df001215 	stw	fp,72(sp)
  80f20c:	df001204 	addi	fp,sp,72
  80f210:	e13fee15 	stw	r4,-72(fp)
  80f214:	e17fef15 	stw	r5,-68(fp)
  80f218:	e1bff015 	stw	r6,-64(fp)
  80f21c:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80f220:	e0bfee17 	ldw	r2,-72(fp)
  80f224:	10800f17 	ldw	r2,60(r2)
  80f228:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80f22c:	e0bfee17 	ldw	r2,-72(fp)
  80f230:	10801017 	ldw	r2,64(r2)
  80f234:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  80f238:	e0bfef17 	ldw	r2,-68(fp)
  80f23c:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  80f240:	e0fff117 	ldw	r3,-60(fp)
  80f244:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  80f248:	e13ff017 	ldw	r4,-64(fp)
  80f24c:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  80f250:	e0800117 	ldw	r2,4(fp)
  80f254:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  80f258:	e0c00217 	ldw	r3,8(fp)
  80f25c:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  80f260:	e13ffa17 	ldw	r4,-24(fp)
  80f264:	e0bffb17 	ldw	r2,-20(fp)
  80f268:	2080062e 	bgeu	r4,r2,80f284 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  80f26c:	e0fffb17 	ldw	r3,-20(fp)
  80f270:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  80f274:	e13ffa17 	ldw	r4,-24(fp)
  80f278:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  80f27c:	e0bffc17 	ldw	r2,-16(fp)
  80f280:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  80f284:	e0fff817 	ldw	r3,-32(fp)
  80f288:	e13ff917 	ldw	r4,-28(fp)
  80f28c:	1900062e 	bgeu	r3,r4,80f2a8 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  80f290:	e0bff917 	ldw	r2,-28(fp)
  80f294:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  80f298:	e0fff817 	ldw	r3,-32(fp)
  80f29c:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  80f2a0:	e13ffc17 	ldw	r4,-16(fp)
  80f2a4:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  80f2a8:	e0bffb17 	ldw	r2,-20(fp)
  80f2ac:	e0fffe17 	ldw	r3,-8(fp)
  80f2b0:	10c10d2e 	bgeu	r2,r3,80f6e8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  80f2b4:	e13ff917 	ldw	r4,-28(fp)
  80f2b8:	e0bffd17 	ldw	r2,-12(fp)
  80f2bc:	20800136 	bltu	r4,r2,80f2c4 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  80f2c0:	00010906 	br	80f6e8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80f2c4:	e0fffa17 	ldw	r3,-24(fp)
  80f2c8:	e13ffe17 	ldw	r4,-8(fp)
  80f2cc:	19000336 	bltu	r3,r4,80f2dc <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  80f2d0:	e0bffe17 	ldw	r2,-8(fp)
  80f2d4:	10bfffc4 	addi	r2,r2,-1
  80f2d8:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  80f2dc:	e0fff817 	ldw	r3,-32(fp)
  80f2e0:	e13ffd17 	ldw	r4,-12(fp)
  80f2e4:	19000336 	bltu	r3,r4,80f2f4 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  80f2e8:	e0bffd17 	ldw	r2,-12(fp)
  80f2ec:	10bfffc4 	addi	r2,r2,-1
  80f2f0:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80f2f4:	e0800317 	ldw	r2,12(fp)
  80f2f8:	10800058 	cmpnei	r2,r2,1
  80f2fc:	1000041e 	bne	r2,zero,80f310 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  80f300:	e0bfee17 	ldw	r2,-72(fp)
  80f304:	10800c17 	ldw	r2,48(r2)
  80f308:	e0bfff15 	stw	r2,-4(fp)
  80f30c:	00000306 	br	80f31c <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  80f310:	e0bfee17 	ldw	r2,-72(fp)
  80f314:	10800b17 	ldw	r2,44(r2)
  80f318:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80f31c:	e0bfee17 	ldw	r2,-72(fp)
  80f320:	10800d17 	ldw	r2,52(r2)
  80f324:	1004c03a 	cmpne	r2,r2,zero
  80f328:	1000721e 	bne	r2,zero,80f4f4 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80f32c:	e0bfee17 	ldw	r2,-72(fp)
  80f330:	10801317 	ldw	r2,76(r2)
  80f334:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  80f338:	e0bff417 	ldw	r2,-48(fp)
  80f33c:	e0fff917 	ldw	r3,-28(fp)
  80f340:	1884983a 	sll	r2,r3,r2
  80f344:	e13fff17 	ldw	r4,-4(fp)
  80f348:	2089883a 	add	r4,r4,r2
  80f34c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80f350:	e0bfee17 	ldw	r2,-72(fp)
  80f354:	10800e17 	ldw	r2,56(r2)
  80f358:	10800058 	cmpnei	r2,r2,1
  80f35c:	10001e1e 	bne	r2,zero,80f3d8 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  80f360:	e0bff917 	ldw	r2,-28(fp)
  80f364:	e0bff515 	stw	r2,-44(fp)
  80f368:	00001706 	br	80f3c8 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  80f36c:	e0fffb17 	ldw	r3,-20(fp)
  80f370:	e0fff615 	stw	r3,-40(fp)
  80f374:	00000806 	br	80f398 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  80f378:	e0ffff17 	ldw	r3,-4(fp)
  80f37c:	e0bff617 	ldw	r2,-40(fp)
  80f380:	1885883a 	add	r2,r3,r2
  80f384:	e0fff717 	ldw	r3,-36(fp)
  80f388:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80f38c:	e13ff617 	ldw	r4,-40(fp)
  80f390:	21000044 	addi	r4,r4,1
  80f394:	e13ff615 	stw	r4,-40(fp)
  80f398:	e0bffa17 	ldw	r2,-24(fp)
  80f39c:	e0fff617 	ldw	r3,-40(fp)
  80f3a0:	10fff52e 	bgeu	r2,r3,80f378 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  80f3a4:	e0fff417 	ldw	r3,-48(fp)
  80f3a8:	00800044 	movi	r2,1
  80f3ac:	10c4983a 	sll	r2,r2,r3
  80f3b0:	e13fff17 	ldw	r4,-4(fp)
  80f3b4:	2089883a 	add	r4,r4,r2
  80f3b8:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80f3bc:	e0bff517 	ldw	r2,-44(fp)
  80f3c0:	10800044 	addi	r2,r2,1
  80f3c4:	e0bff515 	stw	r2,-44(fp)
  80f3c8:	e0fff817 	ldw	r3,-32(fp)
  80f3cc:	e13ff517 	ldw	r4,-44(fp)
  80f3d0:	193fe62e 	bgeu	r3,r4,80f36c <alt_up_pixel_buffer_dma_draw_box+0x168>
  80f3d4:	0000c406 	br	80f6e8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80f3d8:	e0bfee17 	ldw	r2,-72(fp)
  80f3dc:	10800e17 	ldw	r2,56(r2)
  80f3e0:	10800098 	cmpnei	r2,r2,2
  80f3e4:	1000211e 	bne	r2,zero,80f46c <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  80f3e8:	e0bff917 	ldw	r2,-28(fp)
  80f3ec:	e0bff515 	stw	r2,-44(fp)
  80f3f0:	00001a06 	br	80f45c <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  80f3f4:	e0fffb17 	ldw	r3,-20(fp)
  80f3f8:	e0fff615 	stw	r3,-40(fp)
  80f3fc:	00000b06 	br	80f42c <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80f400:	e13ff617 	ldw	r4,-40(fp)
  80f404:	e13ff617 	ldw	r4,-40(fp)
  80f408:	2105883a 	add	r2,r4,r4
  80f40c:	1007883a 	mov	r3,r2
  80f410:	e0bfff17 	ldw	r2,-4(fp)
  80f414:	1885883a 	add	r2,r3,r2
  80f418:	e0fff717 	ldw	r3,-36(fp)
  80f41c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80f420:	e0bff617 	ldw	r2,-40(fp)
  80f424:	10800044 	addi	r2,r2,1
  80f428:	e0bff615 	stw	r2,-40(fp)
  80f42c:	e0fffa17 	ldw	r3,-24(fp)
  80f430:	e13ff617 	ldw	r4,-40(fp)
  80f434:	193ff22e 	bgeu	r3,r4,80f400 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  80f438:	e0fff417 	ldw	r3,-48(fp)
  80f43c:	00800044 	movi	r2,1
  80f440:	10c4983a 	sll	r2,r2,r3
  80f444:	e0ffff17 	ldw	r3,-4(fp)
  80f448:	1887883a 	add	r3,r3,r2
  80f44c:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80f450:	e13ff517 	ldw	r4,-44(fp)
  80f454:	21000044 	addi	r4,r4,1
  80f458:	e13ff515 	stw	r4,-44(fp)
  80f45c:	e0bff817 	ldw	r2,-32(fp)
  80f460:	e0fff517 	ldw	r3,-44(fp)
  80f464:	10ffe32e 	bgeu	r2,r3,80f3f4 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  80f468:	00009f06 	br	80f6e8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80f46c:	e13ff917 	ldw	r4,-28(fp)
  80f470:	e13ff515 	stw	r4,-44(fp)
  80f474:	00001b06 	br	80f4e4 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  80f478:	e0bffb17 	ldw	r2,-20(fp)
  80f47c:	e0bff615 	stw	r2,-40(fp)
  80f480:	00000c06 	br	80f4b4 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80f484:	e0fff617 	ldw	r3,-40(fp)
  80f488:	e0fff617 	ldw	r3,-40(fp)
  80f48c:	18c5883a 	add	r2,r3,r3
  80f490:	1085883a 	add	r2,r2,r2
  80f494:	1007883a 	mov	r3,r2
  80f498:	e0bfff17 	ldw	r2,-4(fp)
  80f49c:	1885883a 	add	r2,r3,r2
  80f4a0:	e0fff717 	ldw	r3,-36(fp)
  80f4a4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80f4a8:	e13ff617 	ldw	r4,-40(fp)
  80f4ac:	21000044 	addi	r4,r4,1
  80f4b0:	e13ff615 	stw	r4,-40(fp)
  80f4b4:	e0bffa17 	ldw	r2,-24(fp)
  80f4b8:	e0fff617 	ldw	r3,-40(fp)
  80f4bc:	10fff12e 	bgeu	r2,r3,80f484 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  80f4c0:	e0fff417 	ldw	r3,-48(fp)
  80f4c4:	00800044 	movi	r2,1
  80f4c8:	10c4983a 	sll	r2,r2,r3
  80f4cc:	e13fff17 	ldw	r4,-4(fp)
  80f4d0:	2089883a 	add	r4,r4,r2
  80f4d4:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80f4d8:	e0bff517 	ldw	r2,-44(fp)
  80f4dc:	10800044 	addi	r2,r2,1
  80f4e0:	e0bff515 	stw	r2,-44(fp)
  80f4e4:	e0fff817 	ldw	r3,-32(fp)
  80f4e8:	e13ff517 	ldw	r4,-44(fp)
  80f4ec:	193fe22e 	bgeu	r3,r4,80f478 <alt_up_pixel_buffer_dma_draw_box+0x274>
  80f4f0:	00007d06 	br	80f6e8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80f4f4:	e0bfee17 	ldw	r2,-72(fp)
  80f4f8:	10800e17 	ldw	r2,56(r2)
  80f4fc:	10800058 	cmpnei	r2,r2,1
  80f500:	1000221e 	bne	r2,zero,80f58c <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  80f504:	e0fff917 	ldw	r3,-28(fp)
  80f508:	e13ffe17 	ldw	r4,-8(fp)
  80f50c:	1905383a 	mul	r2,r3,r4
  80f510:	e0ffff17 	ldw	r3,-4(fp)
  80f514:	1887883a 	add	r3,r3,r2
  80f518:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80f51c:	e13ff917 	ldw	r4,-28(fp)
  80f520:	e13ff215 	stw	r4,-56(fp)
  80f524:	00001506 	br	80f57c <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  80f528:	e0bffb17 	ldw	r2,-20(fp)
  80f52c:	e0bff315 	stw	r2,-52(fp)
  80f530:	00000806 	br	80f554 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  80f534:	e0ffff17 	ldw	r3,-4(fp)
  80f538:	e0bff317 	ldw	r2,-52(fp)
  80f53c:	1885883a 	add	r2,r3,r2
  80f540:	e0fff717 	ldw	r3,-36(fp)
  80f544:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80f548:	e0fff317 	ldw	r3,-52(fp)
  80f54c:	18c00044 	addi	r3,r3,1
  80f550:	e0fff315 	stw	r3,-52(fp)
  80f554:	e13ffa17 	ldw	r4,-24(fp)
  80f558:	e0bff317 	ldw	r2,-52(fp)
  80f55c:	20bff52e 	bgeu	r4,r2,80f534 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  80f560:	e0ffff17 	ldw	r3,-4(fp)
  80f564:	e13ffe17 	ldw	r4,-8(fp)
  80f568:	1907883a 	add	r3,r3,r4
  80f56c:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80f570:	e0bff217 	ldw	r2,-56(fp)
  80f574:	10800044 	addi	r2,r2,1
  80f578:	e0bff215 	stw	r2,-56(fp)
  80f57c:	e0fff817 	ldw	r3,-32(fp)
  80f580:	e13ff217 	ldw	r4,-56(fp)
  80f584:	193fe82e 	bgeu	r3,r4,80f528 <alt_up_pixel_buffer_dma_draw_box+0x324>
  80f588:	00005706 	br	80f6e8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80f58c:	e0bfee17 	ldw	r2,-72(fp)
  80f590:	10800e17 	ldw	r2,56(r2)
  80f594:	10800098 	cmpnei	r2,r2,2
  80f598:	1000291e 	bne	r2,zero,80f640 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  80f59c:	e0fffe17 	ldw	r3,-8(fp)
  80f5a0:	e0fffe17 	ldw	r3,-8(fp)
  80f5a4:	18c5883a 	add	r2,r3,r3
  80f5a8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80f5ac:	e13ff917 	ldw	r4,-28(fp)
  80f5b0:	e0fffe17 	ldw	r3,-8(fp)
  80f5b4:	20c5383a 	mul	r2,r4,r3
  80f5b8:	e13fff17 	ldw	r4,-4(fp)
  80f5bc:	2089883a 	add	r4,r4,r2
  80f5c0:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80f5c4:	e0bff917 	ldw	r2,-28(fp)
  80f5c8:	e0bff215 	stw	r2,-56(fp)
  80f5cc:	00001806 	br	80f630 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  80f5d0:	e0fffb17 	ldw	r3,-20(fp)
  80f5d4:	e0fff315 	stw	r3,-52(fp)
  80f5d8:	00000b06 	br	80f608 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80f5dc:	e13ff317 	ldw	r4,-52(fp)
  80f5e0:	e13ff317 	ldw	r4,-52(fp)
  80f5e4:	2105883a 	add	r2,r4,r4
  80f5e8:	1007883a 	mov	r3,r2
  80f5ec:	e0bfff17 	ldw	r2,-4(fp)
  80f5f0:	1885883a 	add	r2,r3,r2
  80f5f4:	e0fff717 	ldw	r3,-36(fp)
  80f5f8:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80f5fc:	e0bff317 	ldw	r2,-52(fp)
  80f600:	10800044 	addi	r2,r2,1
  80f604:	e0bff315 	stw	r2,-52(fp)
  80f608:	e0fffa17 	ldw	r3,-24(fp)
  80f60c:	e13ff317 	ldw	r4,-52(fp)
  80f610:	193ff22e 	bgeu	r3,r4,80f5dc <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  80f614:	e0bfff17 	ldw	r2,-4(fp)
  80f618:	e0fffe17 	ldw	r3,-8(fp)
  80f61c:	10c5883a 	add	r2,r2,r3
  80f620:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80f624:	e13ff217 	ldw	r4,-56(fp)
  80f628:	21000044 	addi	r4,r4,1
  80f62c:	e13ff215 	stw	r4,-56(fp)
  80f630:	e0bff817 	ldw	r2,-32(fp)
  80f634:	e0fff217 	ldw	r3,-56(fp)
  80f638:	10ffe52e 	bgeu	r2,r3,80f5d0 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  80f63c:	00002a06 	br	80f6e8 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80f640:	e13ffe17 	ldw	r4,-8(fp)
  80f644:	e13ffe17 	ldw	r4,-8(fp)
  80f648:	2105883a 	add	r2,r4,r4
  80f64c:	1085883a 	add	r2,r2,r2
  80f650:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80f654:	e0fff917 	ldw	r3,-28(fp)
  80f658:	e13ffe17 	ldw	r4,-8(fp)
  80f65c:	1905383a 	mul	r2,r3,r4
  80f660:	e0ffff17 	ldw	r3,-4(fp)
  80f664:	1887883a 	add	r3,r3,r2
  80f668:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80f66c:	e13ff917 	ldw	r4,-28(fp)
  80f670:	e13ff215 	stw	r4,-56(fp)
  80f674:	00001906 	br	80f6dc <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  80f678:	e0bffb17 	ldw	r2,-20(fp)
  80f67c:	e0bff315 	stw	r2,-52(fp)
  80f680:	00000c06 	br	80f6b4 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80f684:	e0fff317 	ldw	r3,-52(fp)
  80f688:	e0fff317 	ldw	r3,-52(fp)
  80f68c:	18c5883a 	add	r2,r3,r3
  80f690:	1085883a 	add	r2,r2,r2
  80f694:	1007883a 	mov	r3,r2
  80f698:	e0bfff17 	ldw	r2,-4(fp)
  80f69c:	1885883a 	add	r2,r3,r2
  80f6a0:	e0fff717 	ldw	r3,-36(fp)
  80f6a4:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80f6a8:	e13ff317 	ldw	r4,-52(fp)
  80f6ac:	21000044 	addi	r4,r4,1
  80f6b0:	e13ff315 	stw	r4,-52(fp)
  80f6b4:	e0bffa17 	ldw	r2,-24(fp)
  80f6b8:	e0fff317 	ldw	r3,-52(fp)
  80f6bc:	10fff12e 	bgeu	r2,r3,80f684 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  80f6c0:	e13fff17 	ldw	r4,-4(fp)
  80f6c4:	e0bffe17 	ldw	r2,-8(fp)
  80f6c8:	2089883a 	add	r4,r4,r2
  80f6cc:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80f6d0:	e0fff217 	ldw	r3,-56(fp)
  80f6d4:	18c00044 	addi	r3,r3,1
  80f6d8:	e0fff215 	stw	r3,-56(fp)
  80f6dc:	e13ff817 	ldw	r4,-32(fp)
  80f6e0:	e0bff217 	ldw	r2,-56(fp)
  80f6e4:	20bfe42e 	bgeu	r4,r2,80f678 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  80f6e8:	e037883a 	mov	sp,fp
  80f6ec:	df000017 	ldw	fp,0(sp)
  80f6f0:	dec00104 	addi	sp,sp,4
  80f6f4:	f800283a 	ret

0080f6f8 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  80f6f8:	defff204 	addi	sp,sp,-56
  80f6fc:	df000d15 	stw	fp,52(sp)
  80f700:	df000d04 	addi	fp,sp,52
  80f704:	e13ff315 	stw	r4,-52(fp)
  80f708:	e17ff415 	stw	r5,-48(fp)
  80f70c:	e1bff515 	stw	r6,-44(fp)
  80f710:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80f714:	e0bff317 	ldw	r2,-52(fp)
  80f718:	10800f17 	ldw	r2,60(r2)
  80f71c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80f720:	e0bff317 	ldw	r2,-52(fp)
  80f724:	10801017 	ldw	r2,64(r2)
  80f728:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  80f72c:	e0bff417 	ldw	r2,-48(fp)
  80f730:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  80f734:	e0fff517 	ldw	r3,-44(fp)
  80f738:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  80f73c:	e13ff617 	ldw	r4,-40(fp)
  80f740:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  80f744:	e0800117 	ldw	r2,4(fp)
  80f748:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  80f74c:	e0fffb17 	ldw	r3,-20(fp)
  80f750:	e13ffc17 	ldw	r4,-16(fp)
  80f754:	1900042e 	bgeu	r3,r4,80f768 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  80f758:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  80f75c:	e0fffb17 	ldw	r3,-20(fp)
  80f760:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  80f764:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  80f768:	e13ffc17 	ldw	r4,-16(fp)
  80f76c:	e0bffe17 	ldw	r2,-8(fp)
  80f770:	2080b12e 	bgeu	r4,r2,80fa38 <alt_up_pixel_buffer_dma_draw_hline+0x340>
  80f774:	e0fffa17 	ldw	r3,-24(fp)
  80f778:	e13ffd17 	ldw	r4,-12(fp)
  80f77c:	19000136 	bltu	r3,r4,80f784 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  80f780:	0000ad06 	br	80fa38 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80f784:	e0bffb17 	ldw	r2,-20(fp)
  80f788:	e0fffe17 	ldw	r3,-8(fp)
  80f78c:	10c00336 	bltu	r2,r3,80f79c <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  80f790:	e13ffe17 	ldw	r4,-8(fp)
  80f794:	213fffc4 	addi	r4,r4,-1
  80f798:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80f79c:	e0800217 	ldw	r2,8(fp)
  80f7a0:	10800058 	cmpnei	r2,r2,1
  80f7a4:	1000041e 	bne	r2,zero,80f7b8 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  80f7a8:	e0bff317 	ldw	r2,-52(fp)
  80f7ac:	10800c17 	ldw	r2,48(r2)
  80f7b0:	e0bfff15 	stw	r2,-4(fp)
  80f7b4:	00000306 	br	80f7c4 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  80f7b8:	e0bff317 	ldw	r2,-52(fp)
  80f7bc:	10800b17 	ldw	r2,44(r2)
  80f7c0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80f7c4:	e0bff317 	ldw	r2,-52(fp)
  80f7c8:	10800d17 	ldw	r2,52(r2)
  80f7cc:	1004c03a 	cmpne	r2,r2,zero
  80f7d0:	1000431e 	bne	r2,zero,80f8e0 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80f7d4:	e0bff317 	ldw	r2,-52(fp)
  80f7d8:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  80f7dc:	e0fffa17 	ldw	r3,-24(fp)
  80f7e0:	1884983a 	sll	r2,r3,r2
  80f7e4:	e13fff17 	ldw	r4,-4(fp)
  80f7e8:	2089883a 	add	r4,r4,r2
  80f7ec:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80f7f0:	e0bff317 	ldw	r2,-52(fp)
  80f7f4:	10800e17 	ldw	r2,56(r2)
  80f7f8:	10800058 	cmpnei	r2,r2,1
  80f7fc:	10000f1e 	bne	r2,zero,80f83c <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  80f800:	e0bffc17 	ldw	r2,-16(fp)
  80f804:	e0bff815 	stw	r2,-32(fp)
  80f808:	00000806 	br	80f82c <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  80f80c:	e0ffff17 	ldw	r3,-4(fp)
  80f810:	e0bff817 	ldw	r2,-32(fp)
  80f814:	1885883a 	add	r2,r3,r2
  80f818:	e0fff917 	ldw	r3,-28(fp)
  80f81c:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80f820:	e0fff817 	ldw	r3,-32(fp)
  80f824:	18c00044 	addi	r3,r3,1
  80f828:	e0fff815 	stw	r3,-32(fp)
  80f82c:	e13ffb17 	ldw	r4,-20(fp)
  80f830:	e0bff817 	ldw	r2,-32(fp)
  80f834:	20bff52e 	bgeu	r4,r2,80f80c <alt_up_pixel_buffer_dma_draw_hline+0x114>
  80f838:	00007f06 	br	80fa38 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80f83c:	e0bff317 	ldw	r2,-52(fp)
  80f840:	10800e17 	ldw	r2,56(r2)
  80f844:	10800098 	cmpnei	r2,r2,2
  80f848:	1000121e 	bne	r2,zero,80f894 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  80f84c:	e0fffc17 	ldw	r3,-16(fp)
  80f850:	e0fff815 	stw	r3,-32(fp)
  80f854:	00000b06 	br	80f884 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80f858:	e13ff817 	ldw	r4,-32(fp)
  80f85c:	e13ff817 	ldw	r4,-32(fp)
  80f860:	2105883a 	add	r2,r4,r4
  80f864:	1007883a 	mov	r3,r2
  80f868:	e0bfff17 	ldw	r2,-4(fp)
  80f86c:	1885883a 	add	r2,r3,r2
  80f870:	e0fff917 	ldw	r3,-28(fp)
  80f874:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80f878:	e0bff817 	ldw	r2,-32(fp)
  80f87c:	10800044 	addi	r2,r2,1
  80f880:	e0bff815 	stw	r2,-32(fp)
  80f884:	e0fffb17 	ldw	r3,-20(fp)
  80f888:	e13ff817 	ldw	r4,-32(fp)
  80f88c:	193ff22e 	bgeu	r3,r4,80f858 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  80f890:	00006906 	br	80fa38 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80f894:	e0bffc17 	ldw	r2,-16(fp)
  80f898:	e0bff815 	stw	r2,-32(fp)
  80f89c:	00000c06 	br	80f8d0 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80f8a0:	e0fff817 	ldw	r3,-32(fp)
  80f8a4:	e0fff817 	ldw	r3,-32(fp)
  80f8a8:	18c5883a 	add	r2,r3,r3
  80f8ac:	1085883a 	add	r2,r2,r2
  80f8b0:	1007883a 	mov	r3,r2
  80f8b4:	e0bfff17 	ldw	r2,-4(fp)
  80f8b8:	1885883a 	add	r2,r3,r2
  80f8bc:	e0fff917 	ldw	r3,-28(fp)
  80f8c0:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80f8c4:	e13ff817 	ldw	r4,-32(fp)
  80f8c8:	21000044 	addi	r4,r4,1
  80f8cc:	e13ff815 	stw	r4,-32(fp)
  80f8d0:	e0bffb17 	ldw	r2,-20(fp)
  80f8d4:	e0fff817 	ldw	r3,-32(fp)
  80f8d8:	10fff12e 	bgeu	r2,r3,80f8a0 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  80f8dc:	00005606 	br	80fa38 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80f8e0:	e0bff317 	ldw	r2,-52(fp)
  80f8e4:	10800e17 	ldw	r2,56(r2)
  80f8e8:	10800058 	cmpnei	r2,r2,1
  80f8ec:	1000151e 	bne	r2,zero,80f944 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  80f8f0:	e13ffa17 	ldw	r4,-24(fp)
  80f8f4:	e0fffe17 	ldw	r3,-8(fp)
  80f8f8:	20c5383a 	mul	r2,r4,r3
  80f8fc:	e13fff17 	ldw	r4,-4(fp)
  80f900:	2089883a 	add	r4,r4,r2
  80f904:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80f908:	e0bffc17 	ldw	r2,-16(fp)
  80f90c:	e0bff715 	stw	r2,-36(fp)
  80f910:	00000806 	br	80f934 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  80f914:	e0ffff17 	ldw	r3,-4(fp)
  80f918:	e0bff717 	ldw	r2,-36(fp)
  80f91c:	1885883a 	add	r2,r3,r2
  80f920:	e0fff917 	ldw	r3,-28(fp)
  80f924:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80f928:	e0fff717 	ldw	r3,-36(fp)
  80f92c:	18c00044 	addi	r3,r3,1
  80f930:	e0fff715 	stw	r3,-36(fp)
  80f934:	e13ffb17 	ldw	r4,-20(fp)
  80f938:	e0bff717 	ldw	r2,-36(fp)
  80f93c:	20bff52e 	bgeu	r4,r2,80f914 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  80f940:	00003d06 	br	80fa38 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80f944:	e0bff317 	ldw	r2,-52(fp)
  80f948:	10800e17 	ldw	r2,56(r2)
  80f94c:	10800098 	cmpnei	r2,r2,2
  80f950:	10001c1e 	bne	r2,zero,80f9c4 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  80f954:	e0fffe17 	ldw	r3,-8(fp)
  80f958:	e0fffe17 	ldw	r3,-8(fp)
  80f95c:	18c5883a 	add	r2,r3,r3
  80f960:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  80f964:	e13ffa17 	ldw	r4,-24(fp)
  80f968:	e0fffe17 	ldw	r3,-8(fp)
  80f96c:	20c5383a 	mul	r2,r4,r3
  80f970:	e13fff17 	ldw	r4,-4(fp)
  80f974:	2089883a 	add	r4,r4,r2
  80f978:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80f97c:	e0bffc17 	ldw	r2,-16(fp)
  80f980:	e0bff715 	stw	r2,-36(fp)
  80f984:	00000b06 	br	80f9b4 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80f988:	e0fff717 	ldw	r3,-36(fp)
  80f98c:	e0fff717 	ldw	r3,-36(fp)
  80f990:	18c5883a 	add	r2,r3,r3
  80f994:	1007883a 	mov	r3,r2
  80f998:	e0bfff17 	ldw	r2,-4(fp)
  80f99c:	1885883a 	add	r2,r3,r2
  80f9a0:	e0fff917 	ldw	r3,-28(fp)
  80f9a4:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80f9a8:	e13ff717 	ldw	r4,-36(fp)
  80f9ac:	21000044 	addi	r4,r4,1
  80f9b0:	e13ff715 	stw	r4,-36(fp)
  80f9b4:	e0bffb17 	ldw	r2,-20(fp)
  80f9b8:	e0fff717 	ldw	r3,-36(fp)
  80f9bc:	10fff22e 	bgeu	r2,r3,80f988 <alt_up_pixel_buffer_dma_draw_hline+0x290>
  80f9c0:	00001d06 	br	80fa38 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80f9c4:	e13ffe17 	ldw	r4,-8(fp)
  80f9c8:	e13ffe17 	ldw	r4,-8(fp)
  80f9cc:	2105883a 	add	r2,r4,r4
  80f9d0:	1085883a 	add	r2,r2,r2
  80f9d4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  80f9d8:	e0fffa17 	ldw	r3,-24(fp)
  80f9dc:	e13ffe17 	ldw	r4,-8(fp)
  80f9e0:	1905383a 	mul	r2,r3,r4
  80f9e4:	e0ffff17 	ldw	r3,-4(fp)
  80f9e8:	1887883a 	add	r3,r3,r2
  80f9ec:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80f9f0:	e13ffc17 	ldw	r4,-16(fp)
  80f9f4:	e13ff715 	stw	r4,-36(fp)
  80f9f8:	00000c06 	br	80fa2c <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80f9fc:	e0fff717 	ldw	r3,-36(fp)
  80fa00:	e0fff717 	ldw	r3,-36(fp)
  80fa04:	18c5883a 	add	r2,r3,r3
  80fa08:	1085883a 	add	r2,r2,r2
  80fa0c:	1007883a 	mov	r3,r2
  80fa10:	e0bfff17 	ldw	r2,-4(fp)
  80fa14:	1885883a 	add	r2,r3,r2
  80fa18:	e0fff917 	ldw	r3,-28(fp)
  80fa1c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80fa20:	e13ff717 	ldw	r4,-36(fp)
  80fa24:	21000044 	addi	r4,r4,1
  80fa28:	e13ff715 	stw	r4,-36(fp)
  80fa2c:	e0bffb17 	ldw	r2,-20(fp)
  80fa30:	e0fff717 	ldw	r3,-36(fp)
  80fa34:	10fff12e 	bgeu	r2,r3,80f9fc <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  80fa38:	e037883a 	mov	sp,fp
  80fa3c:	df000017 	ldw	fp,0(sp)
  80fa40:	dec00104 	addi	sp,sp,4
  80fa44:	f800283a 	ret

0080fa48 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  80fa48:	defff104 	addi	sp,sp,-60
  80fa4c:	df000e15 	stw	fp,56(sp)
  80fa50:	df000e04 	addi	fp,sp,56
  80fa54:	e13ff215 	stw	r4,-56(fp)
  80fa58:	e17ff315 	stw	r5,-52(fp)
  80fa5c:	e1bff415 	stw	r6,-48(fp)
  80fa60:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80fa64:	e0bff217 	ldw	r2,-56(fp)
  80fa68:	10800f17 	ldw	r2,60(r2)
  80fa6c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80fa70:	e0bff217 	ldw	r2,-56(fp)
  80fa74:	10801017 	ldw	r2,64(r2)
  80fa78:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  80fa7c:	e0bff317 	ldw	r2,-52(fp)
  80fa80:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  80fa84:	e0fff417 	ldw	r3,-48(fp)
  80fa88:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  80fa8c:	e13ff517 	ldw	r4,-44(fp)
  80fa90:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  80fa94:	e0800117 	ldw	r2,4(fp)
  80fa98:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  80fa9c:	e0fffa17 	ldw	r3,-24(fp)
  80faa0:	e13ffb17 	ldw	r4,-20(fp)
  80faa4:	1900042e 	bgeu	r3,r4,80fab8 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  80faa8:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  80faac:	e0fffa17 	ldw	r3,-24(fp)
  80fab0:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  80fab4:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  80fab8:	e13ffc17 	ldw	r4,-16(fp)
  80fabc:	e0bffe17 	ldw	r2,-8(fp)
  80fac0:	2080d12e 	bgeu	r4,r2,80fe08 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  80fac4:	e0fffb17 	ldw	r3,-20(fp)
  80fac8:	e13ffd17 	ldw	r4,-12(fp)
  80facc:	19000136 	bltu	r3,r4,80fad4 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  80fad0:	0000cd06 	br	80fe08 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  80fad4:	e0bffa17 	ldw	r2,-24(fp)
  80fad8:	e0fffd17 	ldw	r3,-12(fp)
  80fadc:	10c00336 	bltu	r2,r3,80faec <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  80fae0:	e13ffd17 	ldw	r4,-12(fp)
  80fae4:	213fffc4 	addi	r4,r4,-1
  80fae8:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80faec:	e0800217 	ldw	r2,8(fp)
  80faf0:	10800058 	cmpnei	r2,r2,1
  80faf4:	1000041e 	bne	r2,zero,80fb08 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  80faf8:	e0bff217 	ldw	r2,-56(fp)
  80fafc:	10800c17 	ldw	r2,48(r2)
  80fb00:	e0bfff15 	stw	r2,-4(fp)
  80fb04:	00000306 	br	80fb14 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  80fb08:	e0bff217 	ldw	r2,-56(fp)
  80fb0c:	10800b17 	ldw	r2,44(r2)
  80fb10:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80fb14:	e0bff217 	ldw	r2,-56(fp)
  80fb18:	10800d17 	ldw	r2,52(r2)
  80fb1c:	1004c03a 	cmpne	r2,r2,zero
  80fb20:	1000571e 	bne	r2,zero,80fc80 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80fb24:	e0bff217 	ldw	r2,-56(fp)
  80fb28:	10801317 	ldw	r2,76(r2)
  80fb2c:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  80fb30:	e0bff717 	ldw	r2,-36(fp)
  80fb34:	e0fffb17 	ldw	r3,-20(fp)
  80fb38:	1884983a 	sll	r2,r3,r2
  80fb3c:	e13fff17 	ldw	r4,-4(fp)
  80fb40:	2089883a 	add	r4,r4,r2
  80fb44:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80fb48:	e0bff217 	ldw	r2,-56(fp)
  80fb4c:	10800e17 	ldw	r2,56(r2)
  80fb50:	10800058 	cmpnei	r2,r2,1
  80fb54:	1000151e 	bne	r2,zero,80fbac <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  80fb58:	e0bffb17 	ldw	r2,-20(fp)
  80fb5c:	e0bff815 	stw	r2,-32(fp)
  80fb60:	00000e06 	br	80fb9c <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  80fb64:	e0ffff17 	ldw	r3,-4(fp)
  80fb68:	e0bffc17 	ldw	r2,-16(fp)
  80fb6c:	1885883a 	add	r2,r3,r2
  80fb70:	e0fff917 	ldw	r3,-28(fp)
  80fb74:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  80fb78:	e0fff717 	ldw	r3,-36(fp)
  80fb7c:	00800044 	movi	r2,1
  80fb80:	10c4983a 	sll	r2,r2,r3
  80fb84:	e0ffff17 	ldw	r3,-4(fp)
  80fb88:	1887883a 	add	r3,r3,r2
  80fb8c:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80fb90:	e13ff817 	ldw	r4,-32(fp)
  80fb94:	21000044 	addi	r4,r4,1
  80fb98:	e13ff815 	stw	r4,-32(fp)
  80fb9c:	e0bffa17 	ldw	r2,-24(fp)
  80fba0:	e0fff817 	ldw	r3,-32(fp)
  80fba4:	10ffef2e 	bgeu	r2,r3,80fb64 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  80fba8:	00009706 	br	80fe08 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80fbac:	e0bff217 	ldw	r2,-56(fp)
  80fbb0:	10800e17 	ldw	r2,56(r2)
  80fbb4:	10800098 	cmpnei	r2,r2,2
  80fbb8:	1000181e 	bne	r2,zero,80fc1c <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  80fbbc:	e13ffb17 	ldw	r4,-20(fp)
  80fbc0:	e13ff815 	stw	r4,-32(fp)
  80fbc4:	00001106 	br	80fc0c <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  80fbc8:	e0fffc17 	ldw	r3,-16(fp)
  80fbcc:	e0fffc17 	ldw	r3,-16(fp)
  80fbd0:	18c5883a 	add	r2,r3,r3
  80fbd4:	1007883a 	mov	r3,r2
  80fbd8:	e0bfff17 	ldw	r2,-4(fp)
  80fbdc:	1885883a 	add	r2,r3,r2
  80fbe0:	e0fff917 	ldw	r3,-28(fp)
  80fbe4:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  80fbe8:	e0fff717 	ldw	r3,-36(fp)
  80fbec:	00800044 	movi	r2,1
  80fbf0:	10c4983a 	sll	r2,r2,r3
  80fbf4:	e13fff17 	ldw	r4,-4(fp)
  80fbf8:	2089883a 	add	r4,r4,r2
  80fbfc:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80fc00:	e0bff817 	ldw	r2,-32(fp)
  80fc04:	10800044 	addi	r2,r2,1
  80fc08:	e0bff815 	stw	r2,-32(fp)
  80fc0c:	e0fffa17 	ldw	r3,-24(fp)
  80fc10:	e13ff817 	ldw	r4,-32(fp)
  80fc14:	193fec2e 	bgeu	r3,r4,80fbc8 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  80fc18:	00007b06 	br	80fe08 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80fc1c:	e0bffb17 	ldw	r2,-20(fp)
  80fc20:	e0bff815 	stw	r2,-32(fp)
  80fc24:	00001206 	br	80fc70 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  80fc28:	e0fffc17 	ldw	r3,-16(fp)
  80fc2c:	e0fffc17 	ldw	r3,-16(fp)
  80fc30:	18c5883a 	add	r2,r3,r3
  80fc34:	1085883a 	add	r2,r2,r2
  80fc38:	1007883a 	mov	r3,r2
  80fc3c:	e0bfff17 	ldw	r2,-4(fp)
  80fc40:	1885883a 	add	r2,r3,r2
  80fc44:	e0fff917 	ldw	r3,-28(fp)
  80fc48:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  80fc4c:	e0fff717 	ldw	r3,-36(fp)
  80fc50:	00800044 	movi	r2,1
  80fc54:	10c4983a 	sll	r2,r2,r3
  80fc58:	e13fff17 	ldw	r4,-4(fp)
  80fc5c:	2089883a 	add	r4,r4,r2
  80fc60:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80fc64:	e0bff817 	ldw	r2,-32(fp)
  80fc68:	10800044 	addi	r2,r2,1
  80fc6c:	e0bff815 	stw	r2,-32(fp)
  80fc70:	e0fffa17 	ldw	r3,-24(fp)
  80fc74:	e13ff817 	ldw	r4,-32(fp)
  80fc78:	193feb2e 	bgeu	r3,r4,80fc28 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  80fc7c:	00006206 	br	80fe08 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80fc80:	e0bff217 	ldw	r2,-56(fp)
  80fc84:	10800e17 	ldw	r2,56(r2)
  80fc88:	10800058 	cmpnei	r2,r2,1
  80fc8c:	1000191e 	bne	r2,zero,80fcf4 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  80fc90:	e0fffb17 	ldw	r3,-20(fp)
  80fc94:	e13ffe17 	ldw	r4,-8(fp)
  80fc98:	1905383a 	mul	r2,r3,r4
  80fc9c:	e0ffff17 	ldw	r3,-4(fp)
  80fca0:	1887883a 	add	r3,r3,r2
  80fca4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80fca8:	e13ffb17 	ldw	r4,-20(fp)
  80fcac:	e13ff615 	stw	r4,-40(fp)
  80fcb0:	00000c06 	br	80fce4 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  80fcb4:	e0ffff17 	ldw	r3,-4(fp)
  80fcb8:	e0bffc17 	ldw	r2,-16(fp)
  80fcbc:	1885883a 	add	r2,r3,r2
  80fcc0:	e0fff917 	ldw	r3,-28(fp)
  80fcc4:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  80fcc8:	e0bfff17 	ldw	r2,-4(fp)
  80fccc:	e0fffe17 	ldw	r3,-8(fp)
  80fcd0:	10c5883a 	add	r2,r2,r3
  80fcd4:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80fcd8:	e13ff617 	ldw	r4,-40(fp)
  80fcdc:	21000044 	addi	r4,r4,1
  80fce0:	e13ff615 	stw	r4,-40(fp)
  80fce4:	e0bffa17 	ldw	r2,-24(fp)
  80fce8:	e0fff617 	ldw	r3,-40(fp)
  80fcec:	10fff12e 	bgeu	r2,r3,80fcb4 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  80fcf0:	00004506 	br	80fe08 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80fcf4:	e0bff217 	ldw	r2,-56(fp)
  80fcf8:	10800e17 	ldw	r2,56(r2)
  80fcfc:	10800098 	cmpnei	r2,r2,2
  80fd00:	1000201e 	bne	r2,zero,80fd84 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  80fd04:	e13ffe17 	ldw	r4,-8(fp)
  80fd08:	e13ffe17 	ldw	r4,-8(fp)
  80fd0c:	2105883a 	add	r2,r4,r4
  80fd10:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80fd14:	e0fffb17 	ldw	r3,-20(fp)
  80fd18:	e13ffe17 	ldw	r4,-8(fp)
  80fd1c:	1905383a 	mul	r2,r3,r4
  80fd20:	e0ffff17 	ldw	r3,-4(fp)
  80fd24:	1887883a 	add	r3,r3,r2
  80fd28:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80fd2c:	e13ffb17 	ldw	r4,-20(fp)
  80fd30:	e13ff615 	stw	r4,-40(fp)
  80fd34:	00000f06 	br	80fd74 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  80fd38:	e0fffc17 	ldw	r3,-16(fp)
  80fd3c:	e0fffc17 	ldw	r3,-16(fp)
  80fd40:	18c5883a 	add	r2,r3,r3
  80fd44:	1007883a 	mov	r3,r2
  80fd48:	e0bfff17 	ldw	r2,-4(fp)
  80fd4c:	1885883a 	add	r2,r3,r2
  80fd50:	e0fff917 	ldw	r3,-28(fp)
  80fd54:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  80fd58:	e13fff17 	ldw	r4,-4(fp)
  80fd5c:	e0bffe17 	ldw	r2,-8(fp)
  80fd60:	2089883a 	add	r4,r4,r2
  80fd64:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80fd68:	e0fff617 	ldw	r3,-40(fp)
  80fd6c:	18c00044 	addi	r3,r3,1
  80fd70:	e0fff615 	stw	r3,-40(fp)
  80fd74:	e13ffa17 	ldw	r4,-24(fp)
  80fd78:	e0bff617 	ldw	r2,-40(fp)
  80fd7c:	20bfee2e 	bgeu	r4,r2,80fd38 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  80fd80:	00002106 	br	80fe08 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80fd84:	e0fffe17 	ldw	r3,-8(fp)
  80fd88:	e0fffe17 	ldw	r3,-8(fp)
  80fd8c:	18c5883a 	add	r2,r3,r3
  80fd90:	1085883a 	add	r2,r2,r2
  80fd94:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80fd98:	e13ffb17 	ldw	r4,-20(fp)
  80fd9c:	e0fffe17 	ldw	r3,-8(fp)
  80fda0:	20c5383a 	mul	r2,r4,r3
  80fda4:	e13fff17 	ldw	r4,-4(fp)
  80fda8:	2089883a 	add	r4,r4,r2
  80fdac:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80fdb0:	e0bffb17 	ldw	r2,-20(fp)
  80fdb4:	e0bff615 	stw	r2,-40(fp)
  80fdb8:	00001006 	br	80fdfc <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  80fdbc:	e0fffc17 	ldw	r3,-16(fp)
  80fdc0:	e0fffc17 	ldw	r3,-16(fp)
  80fdc4:	18c5883a 	add	r2,r3,r3
  80fdc8:	1085883a 	add	r2,r2,r2
  80fdcc:	1007883a 	mov	r3,r2
  80fdd0:	e0bfff17 	ldw	r2,-4(fp)
  80fdd4:	1885883a 	add	r2,r3,r2
  80fdd8:	e0fff917 	ldw	r3,-28(fp)
  80fddc:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  80fde0:	e13fff17 	ldw	r4,-4(fp)
  80fde4:	e0bffe17 	ldw	r2,-8(fp)
  80fde8:	2089883a 	add	r4,r4,r2
  80fdec:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80fdf0:	e0fff617 	ldw	r3,-40(fp)
  80fdf4:	18c00044 	addi	r3,r3,1
  80fdf8:	e0fff615 	stw	r3,-40(fp)
  80fdfc:	e13ffa17 	ldw	r4,-24(fp)
  80fe00:	e0bff617 	ldw	r2,-40(fp)
  80fe04:	20bfed2e 	bgeu	r4,r2,80fdbc <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  80fe08:	e037883a 	mov	sp,fp
  80fe0c:	df000017 	ldw	fp,0(sp)
  80fe10:	dec00104 	addi	sp,sp,4
  80fe14:	f800283a 	ret

0080fe18 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  80fe18:	defff804 	addi	sp,sp,-32
  80fe1c:	dfc00715 	stw	ra,28(sp)
  80fe20:	df000615 	stw	fp,24(sp)
  80fe24:	df000604 	addi	fp,sp,24
  80fe28:	e13ffc15 	stw	r4,-16(fp)
  80fe2c:	e17ffd15 	stw	r5,-12(fp)
  80fe30:	e1bffe15 	stw	r6,-8(fp)
  80fe34:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  80fe38:	e0800317 	ldw	r2,12(fp)
  80fe3c:	d8800015 	stw	r2,0(sp)
  80fe40:	e0800417 	ldw	r2,16(fp)
  80fe44:	d8800115 	stw	r2,4(sp)
  80fe48:	e13ffc17 	ldw	r4,-16(fp)
  80fe4c:	e17ffd17 	ldw	r5,-12(fp)
  80fe50:	e1bfff17 	ldw	r6,-4(fp)
  80fe54:	e1fffe17 	ldw	r7,-8(fp)
  80fe58:	080f6f80 	call	80f6f8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  80fe5c:	e0800317 	ldw	r2,12(fp)
  80fe60:	d8800015 	stw	r2,0(sp)
  80fe64:	e0800417 	ldw	r2,16(fp)
  80fe68:	d8800115 	stw	r2,4(sp)
  80fe6c:	e13ffc17 	ldw	r4,-16(fp)
  80fe70:	e17ffd17 	ldw	r5,-12(fp)
  80fe74:	e1bfff17 	ldw	r6,-4(fp)
  80fe78:	e1c00217 	ldw	r7,8(fp)
  80fe7c:	080f6f80 	call	80f6f8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  80fe80:	e0800317 	ldw	r2,12(fp)
  80fe84:	d8800015 	stw	r2,0(sp)
  80fe88:	e0800417 	ldw	r2,16(fp)
  80fe8c:	d8800115 	stw	r2,4(sp)
  80fe90:	e13ffc17 	ldw	r4,-16(fp)
  80fe94:	e17ffd17 	ldw	r5,-12(fp)
  80fe98:	e1bffe17 	ldw	r6,-8(fp)
  80fe9c:	e1c00217 	ldw	r7,8(fp)
  80fea0:	080fa480 	call	80fa48 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  80fea4:	e0800317 	ldw	r2,12(fp)
  80fea8:	d8800015 	stw	r2,0(sp)
  80feac:	e0800417 	ldw	r2,16(fp)
  80feb0:	d8800115 	stw	r2,4(sp)
  80feb4:	e13ffc17 	ldw	r4,-16(fp)
  80feb8:	e17fff17 	ldw	r5,-4(fp)
  80febc:	e1bffe17 	ldw	r6,-8(fp)
  80fec0:	e1c00217 	ldw	r7,8(fp)
  80fec4:	080fa480 	call	80fa48 <alt_up_pixel_buffer_dma_draw_vline>
}
  80fec8:	e037883a 	mov	sp,fp
  80fecc:	dfc00117 	ldw	ra,4(sp)
  80fed0:	df000017 	ldw	fp,0(sp)
  80fed4:	dec00204 	addi	sp,sp,8
  80fed8:	f800283a 	ret

0080fedc <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  80fedc:	defffb04 	addi	sp,sp,-20
  80fee0:	df000415 	stw	fp,16(sp)
  80fee4:	df000404 	addi	fp,sp,16
  80fee8:	e13ffc15 	stw	r4,-16(fp)
  80feec:	e17ffd15 	stw	r5,-12(fp)
  80fef0:	e1bffe15 	stw	r6,-8(fp)
  80fef4:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  80fef8:	e0c00217 	ldw	r3,8(fp)
  80fefc:	1804c03a 	cmpne	r2,r3,zero
  80ff00:	10000b1e 	bne	r2,zero,80ff30 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  80ff04:	e13ffd17 	ldw	r4,-12(fp)
  80ff08:	e0ffff17 	ldw	r3,-4(fp)
  80ff0c:	20c5383a 	mul	r2,r4,r3
  80ff10:	e13ffe17 	ldw	r4,-8(fp)
  80ff14:	1105883a 	add	r2,r2,r4
  80ff18:	1007883a 	mov	r3,r2
  80ff1c:	e0bffc17 	ldw	r2,-16(fp)
  80ff20:	1885883a 	add	r2,r3,r2
  80ff24:	e0c00117 	ldw	r3,4(fp)
  80ff28:	10c00025 	stbio	r3,0(r2)
  80ff2c:	00001b06 	br	80ff9c <helper_plot_pixel+0xc0>
	else if (mode == 1)
  80ff30:	e1000217 	ldw	r4,8(fp)
  80ff34:	20800058 	cmpnei	r2,r4,1
  80ff38:	10000c1e 	bne	r2,zero,80ff6c <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  80ff3c:	e0fffd17 	ldw	r3,-12(fp)
  80ff40:	e13fff17 	ldw	r4,-4(fp)
  80ff44:	1905383a 	mul	r2,r3,r4
  80ff48:	e0fffe17 	ldw	r3,-8(fp)
  80ff4c:	10c5883a 	add	r2,r2,r3
  80ff50:	1085883a 	add	r2,r2,r2
  80ff54:	1007883a 	mov	r3,r2
  80ff58:	e0bffc17 	ldw	r2,-16(fp)
  80ff5c:	1885883a 	add	r2,r3,r2
  80ff60:	e1000117 	ldw	r4,4(fp)
  80ff64:	1100002d 	sthio	r4,0(r2)
  80ff68:	00000c06 	br	80ff9c <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  80ff6c:	e0fffd17 	ldw	r3,-12(fp)
  80ff70:	e13fff17 	ldw	r4,-4(fp)
  80ff74:	1905383a 	mul	r2,r3,r4
  80ff78:	e0fffe17 	ldw	r3,-8(fp)
  80ff7c:	10c5883a 	add	r2,r2,r3
  80ff80:	1085883a 	add	r2,r2,r2
  80ff84:	1085883a 	add	r2,r2,r2
  80ff88:	1007883a 	mov	r3,r2
  80ff8c:	e0bffc17 	ldw	r2,-16(fp)
  80ff90:	1885883a 	add	r2,r3,r2
  80ff94:	e1000117 	ldw	r4,4(fp)
  80ff98:	11000035 	stwio	r4,0(r2)
}
  80ff9c:	e037883a 	mov	sp,fp
  80ffa0:	df000017 	ldw	fp,0(sp)
  80ffa4:	dec00104 	addi	sp,sp,4
  80ffa8:	f800283a 	ret

0080ffac <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  80ffac:	deffe404 	addi	sp,sp,-112
  80ffb0:	dfc01b15 	stw	ra,108(sp)
  80ffb4:	df001a15 	stw	fp,104(sp)
  80ffb8:	df001a04 	addi	fp,sp,104
  80ffbc:	e13fe815 	stw	r4,-96(fp)
  80ffc0:	e17fe915 	stw	r5,-92(fp)
  80ffc4:	e1bfea15 	stw	r6,-88(fp)
  80ffc8:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  80ffcc:	e0bfe917 	ldw	r2,-92(fp)
  80ffd0:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  80ffd4:	e0ffea17 	ldw	r3,-88(fp)
  80ffd8:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  80ffdc:	e13feb17 	ldw	r4,-84(fp)
  80ffe0:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  80ffe4:	e0800217 	ldw	r2,8(fp)
  80ffe8:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80ffec:	e0fff717 	ldw	r3,-36(fp)
  80fff0:	e13ff917 	ldw	r4,-28(fp)
  80fff4:	1905c83a 	sub	r2,r3,r4
  80fff8:	e0bfff15 	stw	r2,-4(fp)
  80fffc:	e0ffff17 	ldw	r3,-4(fp)
  810000:	1804403a 	cmpge	r2,r3,zero
  810004:	1000031e 	bne	r2,zero,810014 <alt_up_pixel_buffer_dma_draw_line+0x68>
  810008:	e13fff17 	ldw	r4,-4(fp)
  81000c:	0109c83a 	sub	r4,zero,r4
  810010:	e13fff15 	stw	r4,-4(fp)
  810014:	e0fff817 	ldw	r3,-32(fp)
  810018:	e13ffa17 	ldw	r4,-24(fp)
  81001c:	1905c83a 	sub	r2,r3,r4
  810020:	e0bffe15 	stw	r2,-8(fp)
  810024:	e0fffe17 	ldw	r3,-8(fp)
  810028:	1804403a 	cmpge	r2,r3,zero
  81002c:	1000031e 	bne	r2,zero,81003c <alt_up_pixel_buffer_dma_draw_line+0x90>
  810030:	e13ffe17 	ldw	r4,-8(fp)
  810034:	0109c83a 	sub	r4,zero,r4
  810038:	e13ffe15 	stw	r4,-8(fp)
  81003c:	e0fffe17 	ldw	r3,-8(fp)
  810040:	e13fff17 	ldw	r4,-4(fp)
  810044:	1904803a 	cmplt	r2,r3,r4
  810048:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  81004c:	e0bfe817 	ldw	r2,-96(fp)
  810050:	10800e17 	ldw	r2,56(r2)
  810054:	10800060 	cmpeqi	r2,r2,1
  810058:	10000c1e 	bne	r2,zero,81008c <alt_up_pixel_buffer_dma_draw_line+0xe0>
  81005c:	e0bfe817 	ldw	r2,-96(fp)
  810060:	10800e17 	ldw	r2,56(r2)
  810064:	10800098 	cmpnei	r2,r2,2
  810068:	1000031e 	bne	r2,zero,810078 <alt_up_pixel_buffer_dma_draw_line+0xcc>
  81006c:	00800044 	movi	r2,1
  810070:	e0bffc15 	stw	r2,-16(fp)
  810074:	00000206 	br	810080 <alt_up_pixel_buffer_dma_draw_line+0xd4>
  810078:	00c00084 	movi	r3,2
  81007c:	e0fffc15 	stw	r3,-16(fp)
  810080:	e13ffc17 	ldw	r4,-16(fp)
  810084:	e13ffd15 	stw	r4,-12(fp)
  810088:	00000106 	br	810090 <alt_up_pixel_buffer_dma_draw_line+0xe4>
  81008c:	e03ffd15 	stw	zero,-12(fp)
  810090:	e0bffd17 	ldw	r2,-12(fp)
  810094:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  810098:	e0c00317 	ldw	r3,12(fp)
  81009c:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  8100a0:	e0bfe817 	ldw	r2,-96(fp)
  8100a4:	10800d17 	ldw	r2,52(r2)
  8100a8:	1004c03a 	cmpne	r2,r2,zero
  8100ac:	1000091e 	bne	r2,zero,8100d4 <alt_up_pixel_buffer_dma_draw_line+0x128>
  8100b0:	e0bfe817 	ldw	r2,-96(fp)
  8100b4:	10c01317 	ldw	r3,76(r2)
  8100b8:	e0bfef17 	ldw	r2,-68(fp)
  8100bc:	1885c83a 	sub	r2,r3,r2
  8100c0:	1007883a 	mov	r3,r2
  8100c4:	00800044 	movi	r2,1
  8100c8:	10c4983a 	sll	r2,r2,r3
  8100cc:	e0bffb15 	stw	r2,-20(fp)
  8100d0:	00000306 	br	8100e0 <alt_up_pixel_buffer_dma_draw_line+0x134>
  8100d4:	e0bfe817 	ldw	r2,-96(fp)
  8100d8:	10800f17 	ldw	r2,60(r2)
  8100dc:	e0bffb15 	stw	r2,-20(fp)
  8100e0:	e13ffb17 	ldw	r4,-20(fp)
  8100e4:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  8100e8:	e0800417 	ldw	r2,16(fp)
  8100ec:	10800058 	cmpnei	r2,r2,1
  8100f0:	1000041e 	bne	r2,zero,810104 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  8100f4:	e0bfe817 	ldw	r2,-96(fp)
  8100f8:	10800c17 	ldw	r2,48(r2)
  8100fc:	e0bfed15 	stw	r2,-76(fp)
  810100:	00000306 	br	810110 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  810104:	e0bfe817 	ldw	r2,-96(fp)
  810108:	10800b17 	ldw	r2,44(r2)
  81010c:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  810110:	e0fff603 	ldbu	r3,-40(fp)
  810114:	18803fcc 	andi	r2,r3,255
  810118:	1080201c 	xori	r2,r2,128
  81011c:	10bfe004 	addi	r2,r2,-128
  810120:	10800050 	cmplti	r2,r2,1
  810124:	10000c1e 	bne	r2,zero,810158 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  810128:	e13ffa17 	ldw	r4,-24(fp)
  81012c:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  810130:	e0bff917 	ldw	r2,-28(fp)
  810134:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  810138:	e0fff317 	ldw	r3,-52(fp)
  81013c:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  810140:	e13ff817 	ldw	r4,-32(fp)
  810144:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  810148:	e0bff717 	ldw	r2,-36(fp)
  81014c:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  810150:	e0fff317 	ldw	r3,-52(fp)
  810154:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  810158:	e13ff817 	ldw	r4,-32(fp)
  81015c:	e0bffa17 	ldw	r2,-24(fp)
  810160:	20800c0e 	bge	r4,r2,810194 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  810164:	e0fffa17 	ldw	r3,-24(fp)
  810168:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  81016c:	e13ff817 	ldw	r4,-32(fp)
  810170:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  810174:	e0bff317 	ldw	r2,-52(fp)
  810178:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  81017c:	e0fff917 	ldw	r3,-28(fp)
  810180:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  810184:	e13ff717 	ldw	r4,-36(fp)
  810188:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  81018c:	e0bff317 	ldw	r2,-52(fp)
  810190:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  810194:	e0fff817 	ldw	r3,-32(fp)
  810198:	e13ffa17 	ldw	r4,-24(fp)
  81019c:	1907c83a 	sub	r3,r3,r4
  8101a0:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  8101a4:	e0fff717 	ldw	r3,-36(fp)
  8101a8:	e13ff917 	ldw	r4,-28(fp)
  8101ac:	1905c83a 	sub	r2,r3,r4
  8101b0:	e0bff415 	stw	r2,-48(fp)
  8101b4:	e0fff417 	ldw	r3,-48(fp)
  8101b8:	1804403a 	cmpge	r2,r3,zero
  8101bc:	1000031e 	bne	r2,zero,8101cc <alt_up_pixel_buffer_dma_draw_line+0x220>
  8101c0:	e13ff417 	ldw	r4,-48(fp)
  8101c4:	0109c83a 	sub	r4,zero,r4
  8101c8:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  8101cc:	e0fff517 	ldw	r3,-44(fp)
  8101d0:	1804d7fa 	srli	r2,r3,31
  8101d4:	e13ff517 	ldw	r4,-44(fp)
  8101d8:	1105883a 	add	r2,r2,r4
  8101dc:	1005d07a 	srai	r2,r2,1
  8101e0:	0085c83a 	sub	r2,zero,r2
  8101e4:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  8101e8:	e0bff917 	ldw	r2,-28(fp)
  8101ec:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  8101f0:	e0fff917 	ldw	r3,-28(fp)
  8101f4:	e13ff717 	ldw	r4,-36(fp)
  8101f8:	1900030e 	bge	r3,r4,810208 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  8101fc:	00800044 	movi	r2,1
  810200:	e0bff215 	stw	r2,-56(fp)
  810204:	00000206 	br	810210 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  810208:	00ffffc4 	movi	r3,-1
  81020c:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  810210:	e13ff603 	ldbu	r4,-40(fp)
  810214:	20803fcc 	andi	r2,r4,255
  810218:	1080201c 	xori	r2,r2,128
  81021c:	10bfe004 	addi	r2,r2,-128
  810220:	10800058 	cmpnei	r2,r2,1
  810224:	1000221e 	bne	r2,zero,8102b0 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  810228:	e0bffa17 	ldw	r2,-24(fp)
  81022c:	e0bff115 	stw	r2,-60(fp)
  810230:	00001b06 	br	8102a0 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  810234:	e0ffee17 	ldw	r3,-72(fp)
  810238:	d8c00015 	stw	r3,0(sp)
  81023c:	e13fef17 	ldw	r4,-68(fp)
  810240:	d9000115 	stw	r4,4(sp)
  810244:	e13fed17 	ldw	r4,-76(fp)
  810248:	e17fec17 	ldw	r5,-80(fp)
  81024c:	e1bff017 	ldw	r6,-64(fp)
  810250:	e1fff117 	ldw	r7,-60(fp)
  810254:	080fedc0 	call	80fedc <helper_plot_pixel>
			error = error + deltay;
  810258:	e0bff317 	ldw	r2,-52(fp)
  81025c:	e0fff417 	ldw	r3,-48(fp)
  810260:	10c5883a 	add	r2,r2,r3
  810264:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  810268:	e13ff317 	ldw	r4,-52(fp)
  81026c:	20800050 	cmplti	r2,r4,1
  810270:	1000081e 	bne	r2,zero,810294 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  810274:	e0bff017 	ldw	r2,-64(fp)
  810278:	e0fff217 	ldw	r3,-56(fp)
  81027c:	10c5883a 	add	r2,r2,r3
  810280:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  810284:	e13ff317 	ldw	r4,-52(fp)
  810288:	e0bff517 	ldw	r2,-44(fp)
  81028c:	2089c83a 	sub	r4,r4,r2
  810290:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  810294:	e0fff117 	ldw	r3,-60(fp)
  810298:	18c00044 	addi	r3,r3,1
  81029c:	e0fff115 	stw	r3,-60(fp)
  8102a0:	e13ff817 	ldw	r4,-32(fp)
  8102a4:	e0bff117 	ldw	r2,-60(fp)
  8102a8:	20bfe20e 	bge	r4,r2,810234 <alt_up_pixel_buffer_dma_draw_line+0x288>
  8102ac:	00002106 	br	810334 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  8102b0:	e0fffa17 	ldw	r3,-24(fp)
  8102b4:	e0fff115 	stw	r3,-60(fp)
  8102b8:	00001b06 	br	810328 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  8102bc:	e13fee17 	ldw	r4,-72(fp)
  8102c0:	d9000015 	stw	r4,0(sp)
  8102c4:	e0bfef17 	ldw	r2,-68(fp)
  8102c8:	d8800115 	stw	r2,4(sp)
  8102cc:	e13fed17 	ldw	r4,-76(fp)
  8102d0:	e17fec17 	ldw	r5,-80(fp)
  8102d4:	e1bff117 	ldw	r6,-60(fp)
  8102d8:	e1fff017 	ldw	r7,-64(fp)
  8102dc:	080fedc0 	call	80fedc <helper_plot_pixel>
			error = error + deltay;
  8102e0:	e0fff317 	ldw	r3,-52(fp)
  8102e4:	e13ff417 	ldw	r4,-48(fp)
  8102e8:	1907883a 	add	r3,r3,r4
  8102ec:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  8102f0:	e0fff317 	ldw	r3,-52(fp)
  8102f4:	18800050 	cmplti	r2,r3,1
  8102f8:	1000081e 	bne	r2,zero,81031c <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  8102fc:	e13ff017 	ldw	r4,-64(fp)
  810300:	e0bff217 	ldw	r2,-56(fp)
  810304:	2089883a 	add	r4,r4,r2
  810308:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  81030c:	e0fff317 	ldw	r3,-52(fp)
  810310:	e13ff517 	ldw	r4,-44(fp)
  810314:	1907c83a 	sub	r3,r3,r4
  810318:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  81031c:	e0bff117 	ldw	r2,-60(fp)
  810320:	10800044 	addi	r2,r2,1
  810324:	e0bff115 	stw	r2,-60(fp)
  810328:	e0fff817 	ldw	r3,-32(fp)
  81032c:	e13ff117 	ldw	r4,-60(fp)
  810330:	193fe20e 	bge	r3,r4,8102bc <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  810334:	e037883a 	mov	sp,fp
  810338:	dfc00117 	ldw	ra,4(sp)
  81033c:	df000017 	ldw	fp,0(sp)
  810340:	dec00204 	addi	sp,sp,8
  810344:	f800283a 	ret

00810348 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  810348:	defff404 	addi	sp,sp,-48
  81034c:	df000b15 	stw	fp,44(sp)
  810350:	df000b04 	addi	fp,sp,44
  810354:	e13ffb15 	stw	r4,-20(fp)
  810358:	e17ffc15 	stw	r5,-16(fp)
  81035c:	e1bffd15 	stw	r6,-12(fp)
  810360:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  810364:	e03ff915 	stw	zero,-28(fp)
  810368:	00802074 	movhi	r2,129
  81036c:	10957004 	addi	r2,r2,21952
  810370:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  810374:	1005003a 	cmpeq	r2,r2,zero
  810378:	1000411e 	bne	r2,zero,810480 <alt_alarm_start+0x138>
  {
    if (alarm)
  81037c:	e0bffb17 	ldw	r2,-20(fp)
  810380:	1005003a 	cmpeq	r2,r2,zero
  810384:	10003b1e 	bne	r2,zero,810474 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  810388:	e0fffb17 	ldw	r3,-20(fp)
  81038c:	e0bffd17 	ldw	r2,-12(fp)
  810390:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  810394:	e0fffb17 	ldw	r3,-20(fp)
  810398:	e0bffe17 	ldw	r2,-8(fp)
  81039c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8103a0:	0005303a 	rdctl	r2,status
  8103a4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8103a8:	e0fff817 	ldw	r3,-32(fp)
  8103ac:	00bfff84 	movi	r2,-2
  8103b0:	1884703a 	and	r2,r3,r2
  8103b4:	1001703a 	wrctl	status,r2
  
  return context;
  8103b8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8103bc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8103c0:	00802074 	movhi	r2,129
  8103c4:	10957104 	addi	r2,r2,21956
  8103c8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  8103cc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8103d0:	e0fffc17 	ldw	r3,-16(fp)
  8103d4:	e0bff917 	ldw	r2,-28(fp)
  8103d8:	1885883a 	add	r2,r3,r2
  8103dc:	10c00044 	addi	r3,r2,1
  8103e0:	e0bffb17 	ldw	r2,-20(fp)
  8103e4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8103e8:	e0bffb17 	ldw	r2,-20(fp)
  8103ec:	10c00217 	ldw	r3,8(r2)
  8103f0:	e0bff917 	ldw	r2,-28(fp)
  8103f4:	1880042e 	bgeu	r3,r2,810408 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  8103f8:	e0fffb17 	ldw	r3,-20(fp)
  8103fc:	00800044 	movi	r2,1
  810400:	18800405 	stb	r2,16(r3)
  810404:	00000206 	br	810410 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  810408:	e0bffb17 	ldw	r2,-20(fp)
  81040c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  810410:	e0fffb17 	ldw	r3,-20(fp)
  810414:	00802074 	movhi	r2,129
  810418:	108e6104 	addi	r2,r2,14724
  81041c:	e0bff615 	stw	r2,-40(fp)
  810420:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810424:	e0fff717 	ldw	r3,-36(fp)
  810428:	e0bff617 	ldw	r2,-40(fp)
  81042c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  810430:	e0bff617 	ldw	r2,-40(fp)
  810434:	10c00017 	ldw	r3,0(r2)
  810438:	e0bff717 	ldw	r2,-36(fp)
  81043c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810440:	e0bff617 	ldw	r2,-40(fp)
  810444:	10c00017 	ldw	r3,0(r2)
  810448:	e0bff717 	ldw	r2,-36(fp)
  81044c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  810450:	e0fff617 	ldw	r3,-40(fp)
  810454:	e0bff717 	ldw	r2,-36(fp)
  810458:	18800015 	stw	r2,0(r3)
  81045c:	e0bffa17 	ldw	r2,-24(fp)
  810460:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810464:	e0bff517 	ldw	r2,-44(fp)
  810468:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81046c:	e03fff15 	stw	zero,-4(fp)
  810470:	00000506 	br	810488 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  810474:	00bffa84 	movi	r2,-22
  810478:	e0bfff15 	stw	r2,-4(fp)
  81047c:	00000206 	br	810488 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  810480:	00bfde84 	movi	r2,-134
  810484:	e0bfff15 	stw	r2,-4(fp)
  810488:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  81048c:	e037883a 	mov	sp,fp
  810490:	df000017 	ldw	fp,0(sp)
  810494:	dec00104 	addi	sp,sp,4
  810498:	f800283a 	ret

0081049c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  81049c:	defffe04 	addi	sp,sp,-8
  8104a0:	df000115 	stw	fp,4(sp)
  8104a4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8104a8:	e03fff15 	stw	zero,-4(fp)
  8104ac:	00000506 	br	8104c4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  8104b0:	e0bfff17 	ldw	r2,-4(fp)
  8104b4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8104b8:	e0bfff17 	ldw	r2,-4(fp)
  8104bc:	10800804 	addi	r2,r2,32
  8104c0:	e0bfff15 	stw	r2,-4(fp)
  8104c4:	e0bfff17 	ldw	r2,-4(fp)
  8104c8:	10810030 	cmpltui	r2,r2,1024
  8104cc:	103ff81e 	bne	r2,zero,8104b0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8104d0:	e037883a 	mov	sp,fp
  8104d4:	df000017 	ldw	fp,0(sp)
  8104d8:	dec00104 	addi	sp,sp,4
  8104dc:	f800283a 	ret

008104e0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8104e0:	defff904 	addi	sp,sp,-28
  8104e4:	dfc00615 	stw	ra,24(sp)
  8104e8:	df000515 	stw	fp,20(sp)
  8104ec:	df000504 	addi	fp,sp,20
  8104f0:	e13ffd15 	stw	r4,-12(fp)
  8104f4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8104f8:	e0bffd17 	ldw	r2,-12(fp)
  8104fc:	1005003a 	cmpeq	r2,r2,zero
  810500:	1000041e 	bne	r2,zero,810514 <alt_dev_llist_insert+0x34>
  810504:	e0bffd17 	ldw	r2,-12(fp)
  810508:	10800217 	ldw	r2,8(r2)
  81050c:	1004c03a 	cmpne	r2,r2,zero
  810510:	1000071e 	bne	r2,zero,810530 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  810514:	08105940 	call	810594 <alt_get_errno>
  810518:	1007883a 	mov	r3,r2
  81051c:	00800584 	movi	r2,22
  810520:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  810524:	00bffa84 	movi	r2,-22
  810528:	e0bfff15 	stw	r2,-4(fp)
  81052c:	00001306 	br	81057c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  810530:	e0fffd17 	ldw	r3,-12(fp)
  810534:	e0bffe17 	ldw	r2,-8(fp)
  810538:	e0bffb15 	stw	r2,-20(fp)
  81053c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810540:	e0fffc17 	ldw	r3,-16(fp)
  810544:	e0bffb17 	ldw	r2,-20(fp)
  810548:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81054c:	e0bffb17 	ldw	r2,-20(fp)
  810550:	10c00017 	ldw	r3,0(r2)
  810554:	e0bffc17 	ldw	r2,-16(fp)
  810558:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81055c:	e0bffb17 	ldw	r2,-20(fp)
  810560:	10c00017 	ldw	r3,0(r2)
  810564:	e0bffc17 	ldw	r2,-16(fp)
  810568:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81056c:	e0fffb17 	ldw	r3,-20(fp)
  810570:	e0bffc17 	ldw	r2,-16(fp)
  810574:	18800015 	stw	r2,0(r3)

  return 0;  
  810578:	e03fff15 	stw	zero,-4(fp)
  81057c:	e0bfff17 	ldw	r2,-4(fp)
}
  810580:	e037883a 	mov	sp,fp
  810584:	dfc00117 	ldw	ra,4(sp)
  810588:	df000017 	ldw	fp,0(sp)
  81058c:	dec00204 	addi	sp,sp,8
  810590:	f800283a 	ret

00810594 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810594:	defffd04 	addi	sp,sp,-12
  810598:	dfc00215 	stw	ra,8(sp)
  81059c:	df000115 	stw	fp,4(sp)
  8105a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8105a4:	00802074 	movhi	r2,129
  8105a8:	108e5a04 	addi	r2,r2,14696
  8105ac:	10800017 	ldw	r2,0(r2)
  8105b0:	1005003a 	cmpeq	r2,r2,zero
  8105b4:	1000061e 	bne	r2,zero,8105d0 <alt_get_errno+0x3c>
  8105b8:	00802074 	movhi	r2,129
  8105bc:	108e5a04 	addi	r2,r2,14696
  8105c0:	10800017 	ldw	r2,0(r2)
  8105c4:	103ee83a 	callr	r2
  8105c8:	e0bfff15 	stw	r2,-4(fp)
  8105cc:	00000306 	br	8105dc <alt_get_errno+0x48>
  8105d0:	00802074 	movhi	r2,129
  8105d4:	10956b04 	addi	r2,r2,21932
  8105d8:	e0bfff15 	stw	r2,-4(fp)
  8105dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8105e0:	e037883a 	mov	sp,fp
  8105e4:	dfc00117 	ldw	ra,4(sp)
  8105e8:	df000017 	ldw	fp,0(sp)
  8105ec:	dec00204 	addi	sp,sp,8
  8105f0:	f800283a 	ret

008105f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8105f4:	defffd04 	addi	sp,sp,-12
  8105f8:	dfc00215 	stw	ra,8(sp)
  8105fc:	df000115 	stw	fp,4(sp)
  810600:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  810604:	00bfff04 	movi	r2,-4
  810608:	00c02074 	movhi	r3,129
  81060c:	18c61c04 	addi	r3,r3,6256
  810610:	1885883a 	add	r2,r3,r2
  810614:	e0bfff15 	stw	r2,-4(fp)
  810618:	00000606 	br	810634 <_do_ctors+0x40>
        (*ctor) (); 
  81061c:	e0bfff17 	ldw	r2,-4(fp)
  810620:	10800017 	ldw	r2,0(r2)
  810624:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  810628:	e0bfff17 	ldw	r2,-4(fp)
  81062c:	10bfff04 	addi	r2,r2,-4
  810630:	e0bfff15 	stw	r2,-4(fp)
  810634:	e0ffff17 	ldw	r3,-4(fp)
  810638:	00802074 	movhi	r2,129
  81063c:	10861b04 	addi	r2,r2,6252
  810640:	18bff62e 	bgeu	r3,r2,81061c <_do_ctors+0x28>
        (*ctor) (); 
}
  810644:	e037883a 	mov	sp,fp
  810648:	dfc00117 	ldw	ra,4(sp)
  81064c:	df000017 	ldw	fp,0(sp)
  810650:	dec00204 	addi	sp,sp,8
  810654:	f800283a 	ret

00810658 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  810658:	defffd04 	addi	sp,sp,-12
  81065c:	dfc00215 	stw	ra,8(sp)
  810660:	df000115 	stw	fp,4(sp)
  810664:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  810668:	00bfff04 	movi	r2,-4
  81066c:	00c02074 	movhi	r3,129
  810670:	18c61c04 	addi	r3,r3,6256
  810674:	1885883a 	add	r2,r3,r2
  810678:	e0bfff15 	stw	r2,-4(fp)
  81067c:	00000606 	br	810698 <_do_dtors+0x40>
        (*dtor) (); 
  810680:	e0bfff17 	ldw	r2,-4(fp)
  810684:	10800017 	ldw	r2,0(r2)
  810688:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81068c:	e0bfff17 	ldw	r2,-4(fp)
  810690:	10bfff04 	addi	r2,r2,-4
  810694:	e0bfff15 	stw	r2,-4(fp)
  810698:	e0ffff17 	ldw	r3,-4(fp)
  81069c:	00802074 	movhi	r2,129
  8106a0:	10861c04 	addi	r2,r2,6256
  8106a4:	18bff62e 	bgeu	r3,r2,810680 <_do_dtors+0x28>
        (*dtor) (); 
}
  8106a8:	e037883a 	mov	sp,fp
  8106ac:	dfc00117 	ldw	ra,4(sp)
  8106b0:	df000017 	ldw	fp,0(sp)
  8106b4:	dec00204 	addi	sp,sp,8
  8106b8:	f800283a 	ret

008106bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8106bc:	defff904 	addi	sp,sp,-28
  8106c0:	dfc00615 	stw	ra,24(sp)
  8106c4:	df000515 	stw	fp,20(sp)
  8106c8:	df000504 	addi	fp,sp,20
  8106cc:	e13ffd15 	stw	r4,-12(fp)
  8106d0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8106d4:	e0bffe17 	ldw	r2,-8(fp)
  8106d8:	10800017 	ldw	r2,0(r2)
  8106dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8106e0:	e13ffd17 	ldw	r4,-12(fp)
  8106e4:	08038200 	call	803820 <strlen>
  8106e8:	10800044 	addi	r2,r2,1
  8106ec:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8106f0:	00000d06 	br	810728 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8106f4:	e0bffc17 	ldw	r2,-16(fp)
  8106f8:	11000217 	ldw	r4,8(r2)
  8106fc:	e1bffb17 	ldw	r6,-20(fp)
  810700:	e17ffd17 	ldw	r5,-12(fp)
  810704:	08113540 	call	811354 <memcmp>
  810708:	1004c03a 	cmpne	r2,r2,zero
  81070c:	1000031e 	bne	r2,zero,81071c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  810710:	e0bffc17 	ldw	r2,-16(fp)
  810714:	e0bfff15 	stw	r2,-4(fp)
  810718:	00000706 	br	810738 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81071c:	e0bffc17 	ldw	r2,-16(fp)
  810720:	10800017 	ldw	r2,0(r2)
  810724:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  810728:	e0fffe17 	ldw	r3,-8(fp)
  81072c:	e0bffc17 	ldw	r2,-16(fp)
  810730:	10fff01e 	bne	r2,r3,8106f4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  810734:	e03fff15 	stw	zero,-4(fp)
  810738:	e0bfff17 	ldw	r2,-4(fp)
}
  81073c:	e037883a 	mov	sp,fp
  810740:	dfc00117 	ldw	ra,4(sp)
  810744:	df000017 	ldw	fp,0(sp)
  810748:	dec00204 	addi	sp,sp,8
  81074c:	f800283a 	ret

00810750 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
  810750:	defffb04 	addi	sp,sp,-20
  810754:	df000415 	stw	fp,16(sp)
  810758:	df000404 	addi	fp,sp,16
  81075c:	e13ffe15 	stw	r4,-8(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
  810760:	e0bffe17 	ldw	r2,-8(fp)
  810764:	10800217 	ldw	r2,8(r2)
  810768:	1004c03a 	cmpne	r2,r2,zero
  81076c:	1000031e 	bne	r2,zero,81077c <alt_fs_reg+0x2c>
  {
    return -ENODEV;
  810770:	00bffb44 	movi	r2,-19
  810774:	e0bfff15 	stw	r2,-4(fp)
  810778:	00001406 	br	8107cc <alt_fs_reg+0x7c>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
  81077c:	e0fffe17 	ldw	r3,-8(fp)
  810780:	00802074 	movhi	r2,129
  810784:	108e5504 	addi	r2,r2,14676
  810788:	e0bffc15 	stw	r2,-16(fp)
  81078c:	e0fffd15 	stw	r3,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810790:	e0fffd17 	ldw	r3,-12(fp)
  810794:	e0bffc17 	ldw	r2,-16(fp)
  810798:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81079c:	e0bffc17 	ldw	r2,-16(fp)
  8107a0:	10c00017 	ldw	r3,0(r2)
  8107a4:	e0bffd17 	ldw	r2,-12(fp)
  8107a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8107ac:	e0bffc17 	ldw	r2,-16(fp)
  8107b0:	10c00017 	ldw	r3,0(r2)
  8107b4:	e0bffd17 	ldw	r2,-12(fp)
  8107b8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8107bc:	e0fffc17 	ldw	r3,-16(fp)
  8107c0:	e0bffd17 	ldw	r2,-12(fp)
  8107c4:	18800015 	stw	r2,0(r3)

  return 0;
  8107c8:	e03fff15 	stw	zero,-4(fp)
  8107cc:	e0bfff17 	ldw	r2,-4(fp)
} 
  8107d0:	e037883a 	mov	sp,fp
  8107d4:	df000017 	ldw	fp,0(sp)
  8107d8:	dec00104 	addi	sp,sp,4
  8107dc:	f800283a 	ret

008107e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8107e0:	defffe04 	addi	sp,sp,-8
  8107e4:	dfc00115 	stw	ra,4(sp)
  8107e8:	df000015 	stw	fp,0(sp)
  8107ec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8107f0:	0009883a 	mov	r4,zero
  8107f4:	01440004 	movi	r5,4096
  8107f8:	08112780 	call	811278 <alt_icache_flush>
#endif
}
  8107fc:	e037883a 	mov	sp,fp
  810800:	dfc00117 	ldw	ra,4(sp)
  810804:	df000017 	ldw	fp,0(sp)
  810808:	dec00204 	addi	sp,sp,8
  81080c:	f800283a 	ret

00810810 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  810810:	defff904 	addi	sp,sp,-28
  810814:	dfc00615 	stw	ra,24(sp)
  810818:	df000515 	stw	fp,20(sp)
  81081c:	df000504 	addi	fp,sp,20
  810820:	e13ffc15 	stw	r4,-16(fp)
  810824:	e17ffd15 	stw	r5,-12(fp)
  810828:	e1bffe15 	stw	r6,-8(fp)
  81082c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  810830:	e0800217 	ldw	r2,8(fp)
  810834:	d8800015 	stw	r2,0(sp)
  810838:	e13ffc17 	ldw	r4,-16(fp)
  81083c:	e17ffd17 	ldw	r5,-12(fp)
  810840:	e1bffe17 	ldw	r6,-8(fp)
  810844:	e1ffff17 	ldw	r7,-4(fp)
  810848:	08109e40 	call	8109e4 <alt_iic_isr_register>
}  
  81084c:	e037883a 	mov	sp,fp
  810850:	dfc00117 	ldw	ra,4(sp)
  810854:	df000017 	ldw	fp,0(sp)
  810858:	dec00204 	addi	sp,sp,8
  81085c:	f800283a 	ret

00810860 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  810860:	defff904 	addi	sp,sp,-28
  810864:	df000615 	stw	fp,24(sp)
  810868:	df000604 	addi	fp,sp,24
  81086c:	e13ffe15 	stw	r4,-8(fp)
  810870:	e17fff15 	stw	r5,-4(fp)
  810874:	e0bfff17 	ldw	r2,-4(fp)
  810878:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81087c:	0005303a 	rdctl	r2,status
  810880:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810884:	e0fffb17 	ldw	r3,-20(fp)
  810888:	00bfff84 	movi	r2,-2
  81088c:	1884703a 	and	r2,r3,r2
  810890:	1001703a 	wrctl	status,r2
  
  return context;
  810894:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810898:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  81089c:	e0fffc17 	ldw	r3,-16(fp)
  8108a0:	00800044 	movi	r2,1
  8108a4:	10c4983a 	sll	r2,r2,r3
  8108a8:	1007883a 	mov	r3,r2
  8108ac:	00802074 	movhi	r2,129
  8108b0:	10956f04 	addi	r2,r2,21948
  8108b4:	10800017 	ldw	r2,0(r2)
  8108b8:	1886b03a 	or	r3,r3,r2
  8108bc:	00802074 	movhi	r2,129
  8108c0:	10956f04 	addi	r2,r2,21948
  8108c4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8108c8:	00802074 	movhi	r2,129
  8108cc:	10956f04 	addi	r2,r2,21948
  8108d0:	10800017 	ldw	r2,0(r2)
  8108d4:	100170fa 	wrctl	ienable,r2
  8108d8:	e0bffd17 	ldw	r2,-12(fp)
  8108dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8108e0:	e0bffa17 	ldw	r2,-24(fp)
  8108e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8108e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  8108ec:	e037883a 	mov	sp,fp
  8108f0:	df000017 	ldw	fp,0(sp)
  8108f4:	dec00104 	addi	sp,sp,4
  8108f8:	f800283a 	ret

008108fc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8108fc:	defff904 	addi	sp,sp,-28
  810900:	df000615 	stw	fp,24(sp)
  810904:	df000604 	addi	fp,sp,24
  810908:	e13ffe15 	stw	r4,-8(fp)
  81090c:	e17fff15 	stw	r5,-4(fp)
  810910:	e0bfff17 	ldw	r2,-4(fp)
  810914:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810918:	0005303a 	rdctl	r2,status
  81091c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810920:	e0fffb17 	ldw	r3,-20(fp)
  810924:	00bfff84 	movi	r2,-2
  810928:	1884703a 	and	r2,r3,r2
  81092c:	1001703a 	wrctl	status,r2
  
  return context;
  810930:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810934:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  810938:	e0fffc17 	ldw	r3,-16(fp)
  81093c:	00800044 	movi	r2,1
  810940:	10c4983a 	sll	r2,r2,r3
  810944:	0084303a 	nor	r2,zero,r2
  810948:	1007883a 	mov	r3,r2
  81094c:	00802074 	movhi	r2,129
  810950:	10956f04 	addi	r2,r2,21948
  810954:	10800017 	ldw	r2,0(r2)
  810958:	1886703a 	and	r3,r3,r2
  81095c:	00802074 	movhi	r2,129
  810960:	10956f04 	addi	r2,r2,21948
  810964:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810968:	00802074 	movhi	r2,129
  81096c:	10956f04 	addi	r2,r2,21948
  810970:	10800017 	ldw	r2,0(r2)
  810974:	100170fa 	wrctl	ienable,r2
  810978:	e0bffd17 	ldw	r2,-12(fp)
  81097c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810980:	e0bffa17 	ldw	r2,-24(fp)
  810984:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810988:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  81098c:	e037883a 	mov	sp,fp
  810990:	df000017 	ldw	fp,0(sp)
  810994:	dec00104 	addi	sp,sp,4
  810998:	f800283a 	ret

0081099c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  81099c:	defffc04 	addi	sp,sp,-16
  8109a0:	df000315 	stw	fp,12(sp)
  8109a4:	df000304 	addi	fp,sp,12
  8109a8:	e13ffe15 	stw	r4,-8(fp)
  8109ac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8109b0:	000530fa 	rdctl	r2,ienable
  8109b4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8109b8:	e0ffff17 	ldw	r3,-4(fp)
  8109bc:	00800044 	movi	r2,1
  8109c0:	10c4983a 	sll	r2,r2,r3
  8109c4:	1007883a 	mov	r3,r2
  8109c8:	e0bffd17 	ldw	r2,-12(fp)
  8109cc:	1884703a 	and	r2,r3,r2
  8109d0:	1004c03a 	cmpne	r2,r2,zero
}
  8109d4:	e037883a 	mov	sp,fp
  8109d8:	df000017 	ldw	fp,0(sp)
  8109dc:	dec00104 	addi	sp,sp,4
  8109e0:	f800283a 	ret

008109e4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8109e4:	defff404 	addi	sp,sp,-48
  8109e8:	dfc00b15 	stw	ra,44(sp)
  8109ec:	df000a15 	stw	fp,40(sp)
  8109f0:	df000a04 	addi	fp,sp,40
  8109f4:	e13ffb15 	stw	r4,-20(fp)
  8109f8:	e17ffc15 	stw	r5,-16(fp)
  8109fc:	e1bffd15 	stw	r6,-12(fp)
  810a00:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  810a04:	00bffa84 	movi	r2,-22
  810a08:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  810a0c:	e0bffc17 	ldw	r2,-16(fp)
  810a10:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  810a14:	e0bff917 	ldw	r2,-28(fp)
  810a18:	10800808 	cmpgei	r2,r2,32
  810a1c:	1000291e 	bne	r2,zero,810ac4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810a20:	0005303a 	rdctl	r2,status
  810a24:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810a28:	e0fff717 	ldw	r3,-36(fp)
  810a2c:	00bfff84 	movi	r2,-2
  810a30:	1884703a 	and	r2,r3,r2
  810a34:	1001703a 	wrctl	status,r2
  
  return context;
  810a38:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  810a3c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  810a40:	e0bff917 	ldw	r2,-28(fp)
  810a44:	00c02074 	movhi	r3,129
  810a48:	18d57c04 	addi	r3,r3,22000
  810a4c:	100490fa 	slli	r2,r2,3
  810a50:	10c7883a 	add	r3,r2,r3
  810a54:	e0bffd17 	ldw	r2,-12(fp)
  810a58:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  810a5c:	e0bff917 	ldw	r2,-28(fp)
  810a60:	00c02074 	movhi	r3,129
  810a64:	18d57c04 	addi	r3,r3,22000
  810a68:	100490fa 	slli	r2,r2,3
  810a6c:	10c5883a 	add	r2,r2,r3
  810a70:	10c00104 	addi	r3,r2,4
  810a74:	e0bffe17 	ldw	r2,-8(fp)
  810a78:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  810a7c:	e0bffd17 	ldw	r2,-12(fp)
  810a80:	1005003a 	cmpeq	r2,r2,zero
  810a84:	1000051e 	bne	r2,zero,810a9c <alt_iic_isr_register+0xb8>
  810a88:	e17ff917 	ldw	r5,-28(fp)
  810a8c:	e13ffb17 	ldw	r4,-20(fp)
  810a90:	08108600 	call	810860 <alt_ic_irq_enable>
  810a94:	e0bfff15 	stw	r2,-4(fp)
  810a98:	00000406 	br	810aac <alt_iic_isr_register+0xc8>
  810a9c:	e17ff917 	ldw	r5,-28(fp)
  810aa0:	e13ffb17 	ldw	r4,-20(fp)
  810aa4:	08108fc0 	call	8108fc <alt_ic_irq_disable>
  810aa8:	e0bfff15 	stw	r2,-4(fp)
  810aac:	e0bfff17 	ldw	r2,-4(fp)
  810ab0:	e0bffa15 	stw	r2,-24(fp)
  810ab4:	e0bff817 	ldw	r2,-32(fp)
  810ab8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810abc:	e0bff617 	ldw	r2,-40(fp)
  810ac0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  810ac4:	e0bffa17 	ldw	r2,-24(fp)
}
  810ac8:	e037883a 	mov	sp,fp
  810acc:	dfc00117 	ldw	ra,4(sp)
  810ad0:	df000017 	ldw	fp,0(sp)
  810ad4:	dec00204 	addi	sp,sp,8
  810ad8:	f800283a 	ret

00810adc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  810adc:	defff904 	addi	sp,sp,-28
  810ae0:	dfc00615 	stw	ra,24(sp)
  810ae4:	df000515 	stw	fp,20(sp)
  810ae8:	df000504 	addi	fp,sp,20
  810aec:	e13ffc15 	stw	r4,-16(fp)
  810af0:	e17ffd15 	stw	r5,-12(fp)
  810af4:	e1bffe15 	stw	r6,-8(fp)
  810af8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  810afc:	e13ffd17 	ldw	r4,-12(fp)
  810b00:	e17ffe17 	ldw	r5,-8(fp)
  810b04:	e1bfff17 	ldw	r6,-4(fp)
  810b08:	0810cf40 	call	810cf4 <open>
  810b0c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  810b10:	e0bffb17 	ldw	r2,-20(fp)
  810b14:	1004803a 	cmplt	r2,r2,zero
  810b18:	10001c1e 	bne	r2,zero,810b8c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  810b1c:	e0bffb17 	ldw	r2,-20(fp)
  810b20:	00c02074 	movhi	r3,129
  810b24:	18c97104 	addi	r3,r3,9668
  810b28:	10800324 	muli	r2,r2,12
  810b2c:	10c5883a 	add	r2,r2,r3
  810b30:	10c00017 	ldw	r3,0(r2)
  810b34:	e0bffc17 	ldw	r2,-16(fp)
  810b38:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  810b3c:	e0bffb17 	ldw	r2,-20(fp)
  810b40:	00c02074 	movhi	r3,129
  810b44:	18c97104 	addi	r3,r3,9668
  810b48:	10800324 	muli	r2,r2,12
  810b4c:	10c5883a 	add	r2,r2,r3
  810b50:	10800104 	addi	r2,r2,4
  810b54:	10c00017 	ldw	r3,0(r2)
  810b58:	e0bffc17 	ldw	r2,-16(fp)
  810b5c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  810b60:	e0bffb17 	ldw	r2,-20(fp)
  810b64:	00c02074 	movhi	r3,129
  810b68:	18c97104 	addi	r3,r3,9668
  810b6c:	10800324 	muli	r2,r2,12
  810b70:	10c5883a 	add	r2,r2,r3
  810b74:	10800204 	addi	r2,r2,8
  810b78:	10c00017 	ldw	r3,0(r2)
  810b7c:	e0bffc17 	ldw	r2,-16(fp)
  810b80:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  810b84:	e13ffb17 	ldw	r4,-20(fp)
  810b88:	080c86c0 	call	80c86c <alt_release_fd>
  }
} 
  810b8c:	e037883a 	mov	sp,fp
  810b90:	dfc00117 	ldw	ra,4(sp)
  810b94:	df000017 	ldw	fp,0(sp)
  810b98:	dec00204 	addi	sp,sp,8
  810b9c:	f800283a 	ret

00810ba0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  810ba0:	defffb04 	addi	sp,sp,-20
  810ba4:	dfc00415 	stw	ra,16(sp)
  810ba8:	df000315 	stw	fp,12(sp)
  810bac:	df000304 	addi	fp,sp,12
  810bb0:	e13ffd15 	stw	r4,-12(fp)
  810bb4:	e17ffe15 	stw	r5,-8(fp)
  810bb8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  810bbc:	01002074 	movhi	r4,129
  810bc0:	21097404 	addi	r4,r4,9680
  810bc4:	e17ffd17 	ldw	r5,-12(fp)
  810bc8:	01800044 	movi	r6,1
  810bcc:	01c07fc4 	movi	r7,511
  810bd0:	0810adc0 	call	810adc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  810bd4:	01002074 	movhi	r4,129
  810bd8:	21097104 	addi	r4,r4,9668
  810bdc:	e17ffe17 	ldw	r5,-8(fp)
  810be0:	000d883a 	mov	r6,zero
  810be4:	01c07fc4 	movi	r7,511
  810be8:	0810adc0 	call	810adc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  810bec:	01002074 	movhi	r4,129
  810bf0:	21097704 	addi	r4,r4,9692
  810bf4:	e17fff17 	ldw	r5,-4(fp)
  810bf8:	01800044 	movi	r6,1
  810bfc:	01c07fc4 	movi	r7,511
  810c00:	0810adc0 	call	810adc <alt_open_fd>
}  
  810c04:	e037883a 	mov	sp,fp
  810c08:	dfc00117 	ldw	ra,4(sp)
  810c0c:	df000017 	ldw	fp,0(sp)
  810c10:	dec00204 	addi	sp,sp,8
  810c14:	f800283a 	ret

00810c18 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  810c18:	defffc04 	addi	sp,sp,-16
  810c1c:	df000315 	stw	fp,12(sp)
  810c20:	df000304 	addi	fp,sp,12
  810c24:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  810c28:	e0bffe17 	ldw	r2,-8(fp)
  810c2c:	10800217 	ldw	r2,8(r2)
  810c30:	10d00034 	orhi	r3,r2,16384
  810c34:	e0bffe17 	ldw	r2,-8(fp)
  810c38:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810c3c:	e03ffd15 	stw	zero,-12(fp)
  810c40:	00002006 	br	810cc4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  810c44:	e0bffd17 	ldw	r2,-12(fp)
  810c48:	00c02074 	movhi	r3,129
  810c4c:	18c97104 	addi	r3,r3,9668
  810c50:	10800324 	muli	r2,r2,12
  810c54:	10c5883a 	add	r2,r2,r3
  810c58:	10c00017 	ldw	r3,0(r2)
  810c5c:	e0bffe17 	ldw	r2,-8(fp)
  810c60:	10800017 	ldw	r2,0(r2)
  810c64:	1880141e 	bne	r3,r2,810cb8 <alt_file_locked+0xa0>
  810c68:	e0bffd17 	ldw	r2,-12(fp)
  810c6c:	00c02074 	movhi	r3,129
  810c70:	18c97104 	addi	r3,r3,9668
  810c74:	10800324 	muli	r2,r2,12
  810c78:	10c5883a 	add	r2,r2,r3
  810c7c:	10800204 	addi	r2,r2,8
  810c80:	10800017 	ldw	r2,0(r2)
  810c84:	1004403a 	cmpge	r2,r2,zero
  810c88:	10000b1e 	bne	r2,zero,810cb8 <alt_file_locked+0xa0>
  810c8c:	e0bffd17 	ldw	r2,-12(fp)
  810c90:	10800324 	muli	r2,r2,12
  810c94:	1007883a 	mov	r3,r2
  810c98:	00802074 	movhi	r2,129
  810c9c:	10897104 	addi	r2,r2,9668
  810ca0:	1887883a 	add	r3,r3,r2
  810ca4:	e0bffe17 	ldw	r2,-8(fp)
  810ca8:	18800326 	beq	r3,r2,810cb8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  810cac:	00bffcc4 	movi	r2,-13
  810cb0:	e0bfff15 	stw	r2,-4(fp)
  810cb4:	00000a06 	br	810ce0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810cb8:	e0bffd17 	ldw	r2,-12(fp)
  810cbc:	10800044 	addi	r2,r2,1
  810cc0:	e0bffd15 	stw	r2,-12(fp)
  810cc4:	00802074 	movhi	r2,129
  810cc8:	108e5904 	addi	r2,r2,14692
  810ccc:	10800017 	ldw	r2,0(r2)
  810cd0:	1007883a 	mov	r3,r2
  810cd4:	e0bffd17 	ldw	r2,-12(fp)
  810cd8:	18bfda2e 	bgeu	r3,r2,810c44 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  810cdc:	e03fff15 	stw	zero,-4(fp)
  810ce0:	e0bfff17 	ldw	r2,-4(fp)
}
  810ce4:	e037883a 	mov	sp,fp
  810ce8:	df000017 	ldw	fp,0(sp)
  810cec:	dec00104 	addi	sp,sp,4
  810cf0:	f800283a 	ret

00810cf4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  810cf4:	defff404 	addi	sp,sp,-48
  810cf8:	dfc00b15 	stw	ra,44(sp)
  810cfc:	df000a15 	stw	fp,40(sp)
  810d00:	df000a04 	addi	fp,sp,40
  810d04:	e13ffb15 	stw	r4,-20(fp)
  810d08:	e17ffc15 	stw	r5,-16(fp)
  810d0c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  810d10:	00bfffc4 	movi	r2,-1
  810d14:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  810d18:	00bffb44 	movi	r2,-19
  810d1c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  810d20:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  810d24:	e13ffb17 	ldw	r4,-20(fp)
  810d28:	01402074 	movhi	r5,129
  810d2c:	294e5704 	addi	r5,r5,14684
  810d30:	08106bc0 	call	8106bc <alt_find_dev>
  810d34:	e0bffa15 	stw	r2,-24(fp)
  810d38:	e0bffa17 	ldw	r2,-24(fp)
  810d3c:	1004c03a 	cmpne	r2,r2,zero
  810d40:	1000051e 	bne	r2,zero,810d58 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  810d44:	e13ffb17 	ldw	r4,-20(fp)
  810d48:	08110a00 	call	8110a0 <alt_find_file>
  810d4c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  810d50:	00800044 	movi	r2,1
  810d54:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  810d58:	e0bffa17 	ldw	r2,-24(fp)
  810d5c:	1005003a 	cmpeq	r2,r2,zero
  810d60:	1000301e 	bne	r2,zero,810e24 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  810d64:	e13ffa17 	ldw	r4,-24(fp)
  810d68:	08111c00 	call	8111c0 <alt_get_fd>
  810d6c:	e0bff815 	stw	r2,-32(fp)
  810d70:	e0bff817 	ldw	r2,-32(fp)
  810d74:	1004403a 	cmpge	r2,r2,zero
  810d78:	1000031e 	bne	r2,zero,810d88 <open+0x94>
    {
      status = index;
  810d7c:	e0bff817 	ldw	r2,-32(fp)
  810d80:	e0bff715 	stw	r2,-36(fp)
  810d84:	00002906 	br	810e2c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  810d88:	e0bff817 	ldw	r2,-32(fp)
  810d8c:	10800324 	muli	r2,r2,12
  810d90:	1007883a 	mov	r3,r2
  810d94:	00802074 	movhi	r2,129
  810d98:	10897104 	addi	r2,r2,9668
  810d9c:	1885883a 	add	r2,r3,r2
  810da0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  810da4:	e0fffc17 	ldw	r3,-16(fp)
  810da8:	00900034 	movhi	r2,16384
  810dac:	10bfffc4 	addi	r2,r2,-1
  810db0:	1886703a 	and	r3,r3,r2
  810db4:	e0bff917 	ldw	r2,-28(fp)
  810db8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  810dbc:	e0bff617 	ldw	r2,-40(fp)
  810dc0:	1004c03a 	cmpne	r2,r2,zero
  810dc4:	1000061e 	bne	r2,zero,810de0 <open+0xec>
  810dc8:	e13ff917 	ldw	r4,-28(fp)
  810dcc:	0810c180 	call	810c18 <alt_file_locked>
  810dd0:	e0bff715 	stw	r2,-36(fp)
  810dd4:	e0bff717 	ldw	r2,-36(fp)
  810dd8:	1004803a 	cmplt	r2,r2,zero
  810ddc:	1000131e 	bne	r2,zero,810e2c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  810de0:	e0bffa17 	ldw	r2,-24(fp)
  810de4:	10800317 	ldw	r2,12(r2)
  810de8:	1005003a 	cmpeq	r2,r2,zero
  810dec:	1000091e 	bne	r2,zero,810e14 <open+0x120>
  810df0:	e0bffa17 	ldw	r2,-24(fp)
  810df4:	10800317 	ldw	r2,12(r2)
  810df8:	e13ff917 	ldw	r4,-28(fp)
  810dfc:	e17ffb17 	ldw	r5,-20(fp)
  810e00:	e1bffc17 	ldw	r6,-16(fp)
  810e04:	e1fffd17 	ldw	r7,-12(fp)
  810e08:	103ee83a 	callr	r2
  810e0c:	e0bfff15 	stw	r2,-4(fp)
  810e10:	00000106 	br	810e18 <open+0x124>
  810e14:	e03fff15 	stw	zero,-4(fp)
  810e18:	e0bfff17 	ldw	r2,-4(fp)
  810e1c:	e0bff715 	stw	r2,-36(fp)
  810e20:	00000206 	br	810e2c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  810e24:	00bffb44 	movi	r2,-19
  810e28:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  810e2c:	e0bff717 	ldw	r2,-36(fp)
  810e30:	1004403a 	cmpge	r2,r2,zero
  810e34:	1000091e 	bne	r2,zero,810e5c <open+0x168>
  {
    alt_release_fd (index);  
  810e38:	e13ff817 	ldw	r4,-32(fp)
  810e3c:	080c86c0 	call	80c86c <alt_release_fd>
    ALT_ERRNO = -status;
  810e40:	0810e7c0 	call	810e7c <alt_get_errno>
  810e44:	e0fff717 	ldw	r3,-36(fp)
  810e48:	00c7c83a 	sub	r3,zero,r3
  810e4c:	10c00015 	stw	r3,0(r2)
    return -1;
  810e50:	00bfffc4 	movi	r2,-1
  810e54:	e0bffe15 	stw	r2,-8(fp)
  810e58:	00000206 	br	810e64 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  810e5c:	e0bff817 	ldw	r2,-32(fp)
  810e60:	e0bffe15 	stw	r2,-8(fp)
  810e64:	e0bffe17 	ldw	r2,-8(fp)
}
  810e68:	e037883a 	mov	sp,fp
  810e6c:	dfc00117 	ldw	ra,4(sp)
  810e70:	df000017 	ldw	fp,0(sp)
  810e74:	dec00204 	addi	sp,sp,8
  810e78:	f800283a 	ret

00810e7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810e7c:	defffd04 	addi	sp,sp,-12
  810e80:	dfc00215 	stw	ra,8(sp)
  810e84:	df000115 	stw	fp,4(sp)
  810e88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810e8c:	00802074 	movhi	r2,129
  810e90:	108e5a04 	addi	r2,r2,14696
  810e94:	10800017 	ldw	r2,0(r2)
  810e98:	1005003a 	cmpeq	r2,r2,zero
  810e9c:	1000061e 	bne	r2,zero,810eb8 <alt_get_errno+0x3c>
  810ea0:	00802074 	movhi	r2,129
  810ea4:	108e5a04 	addi	r2,r2,14696
  810ea8:	10800017 	ldw	r2,0(r2)
  810eac:	103ee83a 	callr	r2
  810eb0:	e0bfff15 	stw	r2,-4(fp)
  810eb4:	00000306 	br	810ec4 <alt_get_errno+0x48>
  810eb8:	00802074 	movhi	r2,129
  810ebc:	10956b04 	addi	r2,r2,21932
  810ec0:	e0bfff15 	stw	r2,-4(fp)
  810ec4:	e0bfff17 	ldw	r2,-4(fp)
}
  810ec8:	e037883a 	mov	sp,fp
  810ecc:	dfc00117 	ldw	ra,4(sp)
  810ed0:	df000017 	ldw	fp,0(sp)
  810ed4:	dec00204 	addi	sp,sp,8
  810ed8:	f800283a 	ret

00810edc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  810edc:	defffa04 	addi	sp,sp,-24
  810ee0:	df000515 	stw	fp,20(sp)
  810ee4:	df000504 	addi	fp,sp,20
  810ee8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810eec:	0005303a 	rdctl	r2,status
  810ef0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810ef4:	e0fffd17 	ldw	r3,-12(fp)
  810ef8:	00bfff84 	movi	r2,-2
  810efc:	1884703a 	and	r2,r3,r2
  810f00:	1001703a 	wrctl	status,r2
  
  return context;
  810f04:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  810f08:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  810f0c:	e0bfff17 	ldw	r2,-4(fp)
  810f10:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  810f14:	e0bffc17 	ldw	r2,-16(fp)
  810f18:	10c00017 	ldw	r3,0(r2)
  810f1c:	e0bffc17 	ldw	r2,-16(fp)
  810f20:	10800117 	ldw	r2,4(r2)
  810f24:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  810f28:	e0bffc17 	ldw	r2,-16(fp)
  810f2c:	10c00117 	ldw	r3,4(r2)
  810f30:	e0bffc17 	ldw	r2,-16(fp)
  810f34:	10800017 	ldw	r2,0(r2)
  810f38:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  810f3c:	e0fffc17 	ldw	r3,-16(fp)
  810f40:	e0bffc17 	ldw	r2,-16(fp)
  810f44:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  810f48:	e0fffc17 	ldw	r3,-16(fp)
  810f4c:	e0bffc17 	ldw	r2,-16(fp)
  810f50:	18800015 	stw	r2,0(r3)
  810f54:	e0bffe17 	ldw	r2,-8(fp)
  810f58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810f5c:	e0bffb17 	ldw	r2,-20(fp)
  810f60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  810f64:	e037883a 	mov	sp,fp
  810f68:	df000017 	ldw	fp,0(sp)
  810f6c:	dec00104 	addi	sp,sp,4
  810f70:	f800283a 	ret

00810f74 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  810f74:	defffb04 	addi	sp,sp,-20
  810f78:	dfc00415 	stw	ra,16(sp)
  810f7c:	df000315 	stw	fp,12(sp)
  810f80:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  810f84:	d0a01b17 	ldw	r2,-32660(gp)
  810f88:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  810f8c:	d0a72b17 	ldw	r2,-25428(gp)
  810f90:	10800044 	addi	r2,r2,1
  810f94:	d0a72b15 	stw	r2,-25428(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810f98:	00003106 	br	811060 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  810f9c:	e0bffe17 	ldw	r2,-8(fp)
  810fa0:	10800017 	ldw	r2,0(r2)
  810fa4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  810fa8:	e0bffe17 	ldw	r2,-8(fp)
  810fac:	10800403 	ldbu	r2,16(r2)
  810fb0:	10803fcc 	andi	r2,r2,255
  810fb4:	1005003a 	cmpeq	r2,r2,zero
  810fb8:	1000051e 	bne	r2,zero,810fd0 <alt_tick+0x5c>
  810fbc:	d0a72b17 	ldw	r2,-25428(gp)
  810fc0:	1004c03a 	cmpne	r2,r2,zero
  810fc4:	1000021e 	bne	r2,zero,810fd0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  810fc8:	e0bffe17 	ldw	r2,-8(fp)
  810fcc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  810fd0:	e0bffe17 	ldw	r2,-8(fp)
  810fd4:	10c00217 	ldw	r3,8(r2)
  810fd8:	d0a72b17 	ldw	r2,-25428(gp)
  810fdc:	10c01e36 	bltu	r2,r3,811058 <alt_tick+0xe4>
  810fe0:	e0bffe17 	ldw	r2,-8(fp)
  810fe4:	10800403 	ldbu	r2,16(r2)
  810fe8:	10803fcc 	andi	r2,r2,255
  810fec:	1004c03a 	cmpne	r2,r2,zero
  810ff0:	1000191e 	bne	r2,zero,811058 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  810ff4:	e0bffe17 	ldw	r2,-8(fp)
  810ff8:	10c00317 	ldw	r3,12(r2)
  810ffc:	e0bffe17 	ldw	r2,-8(fp)
  811000:	11000517 	ldw	r4,20(r2)
  811004:	183ee83a 	callr	r3
  811008:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  81100c:	e0bffd17 	ldw	r2,-12(fp)
  811010:	1004c03a 	cmpne	r2,r2,zero
  811014:	1000031e 	bne	r2,zero,811024 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  811018:	e13ffe17 	ldw	r4,-8(fp)
  81101c:	0810edc0 	call	810edc <alt_alarm_stop>
  811020:	00000d06 	br	811058 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  811024:	e0bffe17 	ldw	r2,-8(fp)
  811028:	10c00217 	ldw	r3,8(r2)
  81102c:	e0bffd17 	ldw	r2,-12(fp)
  811030:	1887883a 	add	r3,r3,r2
  811034:	e0bffe17 	ldw	r2,-8(fp)
  811038:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81103c:	e0bffe17 	ldw	r2,-8(fp)
  811040:	10c00217 	ldw	r3,8(r2)
  811044:	d0a72b17 	ldw	r2,-25428(gp)
  811048:	1880032e 	bgeu	r3,r2,811058 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  81104c:	e0fffe17 	ldw	r3,-8(fp)
  811050:	00800044 	movi	r2,1
  811054:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  811058:	e0bfff17 	ldw	r2,-4(fp)
  81105c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811060:	d0e01b04 	addi	r3,gp,-32660
  811064:	e0bffe17 	ldw	r2,-8(fp)
  811068:	10ffcc1e 	bne	r2,r3,810f9c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  81106c:	e037883a 	mov	sp,fp
  811070:	dfc00117 	ldw	ra,4(sp)
  811074:	df000017 	ldw	fp,0(sp)
  811078:	dec00204 	addi	sp,sp,8
  81107c:	f800283a 	ret

00811080 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  811080:	deffff04 	addi	sp,sp,-4
  811084:	df000015 	stw	fp,0(sp)
  811088:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81108c:	000170fa 	wrctl	ienable,zero
}
  811090:	e037883a 	mov	sp,fp
  811094:	df000017 	ldw	fp,0(sp)
  811098:	dec00104 	addi	sp,sp,4
  81109c:	f800283a 	ret

008110a0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8110a0:	defffa04 	addi	sp,sp,-24
  8110a4:	dfc00515 	stw	ra,20(sp)
  8110a8:	df000415 	stw	fp,16(sp)
  8110ac:	df000404 	addi	fp,sp,16
  8110b0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8110b4:	00802074 	movhi	r2,129
  8110b8:	108e5504 	addi	r2,r2,14676
  8110bc:	10800017 	ldw	r2,0(r2)
  8110c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8110c4:	00003306 	br	811194 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  8110c8:	e0bffd17 	ldw	r2,-12(fp)
  8110cc:	11000217 	ldw	r4,8(r2)
  8110d0:	08038200 	call	803820 <strlen>
  8110d4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  8110d8:	e0bffd17 	ldw	r2,-12(fp)
  8110dc:	10c00217 	ldw	r3,8(r2)
  8110e0:	e0bffc17 	ldw	r2,-16(fp)
  8110e4:	1885883a 	add	r2,r3,r2
  8110e8:	10bfffc4 	addi	r2,r2,-1
  8110ec:	10800003 	ldbu	r2,0(r2)
  8110f0:	10803fcc 	andi	r2,r2,255
  8110f4:	1080201c 	xori	r2,r2,128
  8110f8:	10bfe004 	addi	r2,r2,-128
  8110fc:	10800bd8 	cmpnei	r2,r2,47
  811100:	1000031e 	bne	r2,zero,811110 <alt_find_file+0x70>
    {
      len -= 1;
  811104:	e0bffc17 	ldw	r2,-16(fp)
  811108:	10bfffc4 	addi	r2,r2,-1
  81110c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  811110:	e0bffc17 	ldw	r2,-16(fp)
  811114:	1007883a 	mov	r3,r2
  811118:	e0bffe17 	ldw	r2,-8(fp)
  81111c:	1885883a 	add	r2,r3,r2
  811120:	10800003 	ldbu	r2,0(r2)
  811124:	10803fcc 	andi	r2,r2,255
  811128:	1080201c 	xori	r2,r2,128
  81112c:	10bfe004 	addi	r2,r2,-128
  811130:	10800be0 	cmpeqi	r2,r2,47
  811134:	10000a1e 	bne	r2,zero,811160 <alt_find_file+0xc0>
  811138:	e0bffc17 	ldw	r2,-16(fp)
  81113c:	1007883a 	mov	r3,r2
  811140:	e0bffe17 	ldw	r2,-8(fp)
  811144:	1885883a 	add	r2,r3,r2
  811148:	10800003 	ldbu	r2,0(r2)
  81114c:	10803fcc 	andi	r2,r2,255
  811150:	1080201c 	xori	r2,r2,128
  811154:	10bfe004 	addi	r2,r2,-128
  811158:	1004c03a 	cmpne	r2,r2,zero
  81115c:	10000a1e 	bne	r2,zero,811188 <alt_find_file+0xe8>
  811160:	e0bffd17 	ldw	r2,-12(fp)
  811164:	11000217 	ldw	r4,8(r2)
  811168:	e1bffc17 	ldw	r6,-16(fp)
  81116c:	e17ffe17 	ldw	r5,-8(fp)
  811170:	08113540 	call	811354 <memcmp>
  811174:	1004c03a 	cmpne	r2,r2,zero
  811178:	1000031e 	bne	r2,zero,811188 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81117c:	e0bffd17 	ldw	r2,-12(fp)
  811180:	e0bfff15 	stw	r2,-4(fp)
  811184:	00000806 	br	8111a8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  811188:	e0bffd17 	ldw	r2,-12(fp)
  81118c:	10800017 	ldw	r2,0(r2)
  811190:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811194:	00c02074 	movhi	r3,129
  811198:	18ce5504 	addi	r3,r3,14676
  81119c:	e0bffd17 	ldw	r2,-12(fp)
  8111a0:	10ffc91e 	bne	r2,r3,8110c8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8111a4:	e03fff15 	stw	zero,-4(fp)
  8111a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8111ac:	e037883a 	mov	sp,fp
  8111b0:	dfc00117 	ldw	ra,4(sp)
  8111b4:	df000017 	ldw	fp,0(sp)
  8111b8:	dec00204 	addi	sp,sp,8
  8111bc:	f800283a 	ret

008111c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8111c0:	defffc04 	addi	sp,sp,-16
  8111c4:	df000315 	stw	fp,12(sp)
  8111c8:	df000304 	addi	fp,sp,12
  8111cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8111d0:	00bffa04 	movi	r2,-24
  8111d4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8111d8:	e03ffe15 	stw	zero,-8(fp)
  8111dc:	00001e06 	br	811258 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  8111e0:	e0bffe17 	ldw	r2,-8(fp)
  8111e4:	00c02074 	movhi	r3,129
  8111e8:	18c97104 	addi	r3,r3,9668
  8111ec:	10800324 	muli	r2,r2,12
  8111f0:	10c5883a 	add	r2,r2,r3
  8111f4:	10800017 	ldw	r2,0(r2)
  8111f8:	1004c03a 	cmpne	r2,r2,zero
  8111fc:	1000131e 	bne	r2,zero,81124c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  811200:	e0bffe17 	ldw	r2,-8(fp)
  811204:	00c02074 	movhi	r3,129
  811208:	18c97104 	addi	r3,r3,9668
  81120c:	10800324 	muli	r2,r2,12
  811210:	10c7883a 	add	r3,r2,r3
  811214:	e0bfff17 	ldw	r2,-4(fp)
  811218:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  81121c:	00802074 	movhi	r2,129
  811220:	108e5904 	addi	r2,r2,14692
  811224:	10c00017 	ldw	r3,0(r2)
  811228:	e0bffe17 	ldw	r2,-8(fp)
  81122c:	1880040e 	bge	r3,r2,811240 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  811230:	00c02074 	movhi	r3,129
  811234:	18ce5904 	addi	r3,r3,14692
  811238:	e0bffe17 	ldw	r2,-8(fp)
  81123c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  811240:	e0bffe17 	ldw	r2,-8(fp)
  811244:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  811248:	00000606 	br	811264 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81124c:	e0bffe17 	ldw	r2,-8(fp)
  811250:	10800044 	addi	r2,r2,1
  811254:	e0bffe15 	stw	r2,-8(fp)
  811258:	e0bffe17 	ldw	r2,-8(fp)
  81125c:	10800810 	cmplti	r2,r2,32
  811260:	103fdf1e 	bne	r2,zero,8111e0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  811264:	e0bffd17 	ldw	r2,-12(fp)
}
  811268:	e037883a 	mov	sp,fp
  81126c:	df000017 	ldw	fp,0(sp)
  811270:	dec00104 	addi	sp,sp,4
  811274:	f800283a 	ret

00811278 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  811278:	defffb04 	addi	sp,sp,-20
  81127c:	df000415 	stw	fp,16(sp)
  811280:	df000404 	addi	fp,sp,16
  811284:	e13ffe15 	stw	r4,-8(fp)
  811288:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  81128c:	e0bfff17 	ldw	r2,-4(fp)
  811290:	10840070 	cmpltui	r2,r2,4097
  811294:	1000021e 	bne	r2,zero,8112a0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  811298:	00840004 	movi	r2,4096
  81129c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8112a0:	e0fffe17 	ldw	r3,-8(fp)
  8112a4:	e0bfff17 	ldw	r2,-4(fp)
  8112a8:	1885883a 	add	r2,r3,r2
  8112ac:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8112b0:	e0bffe17 	ldw	r2,-8(fp)
  8112b4:	e0bffd15 	stw	r2,-12(fp)
  8112b8:	00000506 	br	8112d0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8112bc:	e0bffd17 	ldw	r2,-12(fp)
  8112c0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8112c4:	e0bffd17 	ldw	r2,-12(fp)
  8112c8:	10800804 	addi	r2,r2,32
  8112cc:	e0bffd15 	stw	r2,-12(fp)
  8112d0:	e0fffd17 	ldw	r3,-12(fp)
  8112d4:	e0bffc17 	ldw	r2,-16(fp)
  8112d8:	18bff836 	bltu	r3,r2,8112bc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8112dc:	e0bffe17 	ldw	r2,-8(fp)
  8112e0:	108007cc 	andi	r2,r2,31
  8112e4:	1005003a 	cmpeq	r2,r2,zero
  8112e8:	1000021e 	bne	r2,zero,8112f4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8112ec:	e0bffd17 	ldw	r2,-12(fp)
  8112f0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8112f4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8112f8:	e037883a 	mov	sp,fp
  8112fc:	df000017 	ldw	fp,0(sp)
  811300:	dec00104 	addi	sp,sp,4
  811304:	f800283a 	ret

00811308 <atexit>:
  811308:	200b883a 	mov	r5,r4
  81130c:	000d883a 	mov	r6,zero
  811310:	0009883a 	mov	r4,zero
  811314:	000f883a 	mov	r7,zero
  811318:	08114b81 	jmpi	8114b8 <__register_exitproc>

0081131c <exit>:
  81131c:	defffe04 	addi	sp,sp,-8
  811320:	000b883a 	mov	r5,zero
  811324:	dc000015 	stw	r16,0(sp)
  811328:	dfc00115 	stw	ra,4(sp)
  81132c:	2021883a 	mov	r16,r4
  811330:	08115f00 	call	8115f0 <__call_exitprocs>
  811334:	00802074 	movhi	r2,129
  811338:	108e5004 	addi	r2,r2,14656
  81133c:	11000017 	ldw	r4,0(r2)
  811340:	20800f17 	ldw	r2,60(r4)
  811344:	10000126 	beq	r2,zero,81134c <exit+0x30>
  811348:	103ee83a 	callr	r2
  81134c:	8009883a 	mov	r4,r16
  811350:	08117e00 	call	8117e0 <_exit>

00811354 <memcmp>:
  811354:	00c000c4 	movi	r3,3
  811358:	1980032e 	bgeu	r3,r6,811368 <memcmp+0x14>
  81135c:	2144b03a 	or	r2,r4,r5
  811360:	10c4703a 	and	r2,r2,r3
  811364:	10000f26 	beq	r2,zero,8113a4 <memcmp+0x50>
  811368:	31ffffc4 	addi	r7,r6,-1
  81136c:	3000061e 	bne	r6,zero,811388 <memcmp+0x34>
  811370:	00000a06 	br	81139c <memcmp+0x48>
  811374:	39ffffc4 	addi	r7,r7,-1
  811378:	00bfffc4 	movi	r2,-1
  81137c:	21000044 	addi	r4,r4,1
  811380:	29400044 	addi	r5,r5,1
  811384:	38800526 	beq	r7,r2,81139c <memcmp+0x48>
  811388:	20c00003 	ldbu	r3,0(r4)
  81138c:	28800003 	ldbu	r2,0(r5)
  811390:	18bff826 	beq	r3,r2,811374 <memcmp+0x20>
  811394:	1885c83a 	sub	r2,r3,r2
  811398:	f800283a 	ret
  81139c:	0005883a 	mov	r2,zero
  8113a0:	f800283a 	ret
  8113a4:	180f883a 	mov	r7,r3
  8113a8:	20c00017 	ldw	r3,0(r4)
  8113ac:	28800017 	ldw	r2,0(r5)
  8113b0:	18bfed1e 	bne	r3,r2,811368 <memcmp+0x14>
  8113b4:	31bfff04 	addi	r6,r6,-4
  8113b8:	21000104 	addi	r4,r4,4
  8113bc:	29400104 	addi	r5,r5,4
  8113c0:	39bff936 	bltu	r7,r6,8113a8 <memcmp+0x54>
  8113c4:	003fe806 	br	811368 <memcmp+0x14>

008113c8 <strncmp>:
  8113c8:	30003926 	beq	r6,zero,8114b0 <strncmp+0xe8>
  8113cc:	2144b03a 	or	r2,r4,r5
  8113d0:	108000cc 	andi	r2,r2,3
  8113d4:	028000c4 	movi	r10,3
  8113d8:	1000241e 	bne	r2,zero,81146c <strncmp+0xa4>
  8113dc:	2011883a 	mov	r8,r4
  8113e0:	280f883a 	mov	r7,r5
  8113e4:	51801f2e 	bgeu	r10,r6,811464 <strncmp+0x9c>
  8113e8:	21000017 	ldw	r4,0(r4)
  8113ec:	28800017 	ldw	r2,0(r5)
  8113f0:	20801c1e 	bne	r4,r2,811464 <strncmp+0x9c>
  8113f4:	31bfff04 	addi	r6,r6,-4
  8113f8:	30002d26 	beq	r6,zero,8114b0 <strncmp+0xe8>
  8113fc:	027fbff4 	movhi	r9,65279
  811400:	4a7fbfc4 	addi	r9,r9,-257
  811404:	2247883a 	add	r3,r4,r9
  811408:	01602074 	movhi	r5,32897
  81140c:	29602004 	addi	r5,r5,-32640
  811410:	1946703a 	and	r3,r3,r5
  811414:	0104303a 	nor	r2,zero,r4
  811418:	10c4703a 	and	r2,r2,r3
  81141c:	1000241e 	bne	r2,zero,8114b0 <strncmp+0xe8>
  811420:	5017883a 	mov	r11,r10
  811424:	4815883a 	mov	r10,r9
  811428:	2813883a 	mov	r9,r5
  81142c:	00000a06 	br	811458 <strncmp+0x90>
  811430:	41000017 	ldw	r4,0(r8)
  811434:	39400017 	ldw	r5,0(r7)
  811438:	2285883a 	add	r2,r4,r10
  81143c:	1244703a 	and	r2,r2,r9
  811440:	0106303a 	nor	r3,zero,r4
  811444:	1886703a 	and	r3,r3,r2
  811448:	2140061e 	bne	r4,r5,811464 <strncmp+0x9c>
  81144c:	31bfff04 	addi	r6,r6,-4
  811450:	30001726 	beq	r6,zero,8114b0 <strncmp+0xe8>
  811454:	1800161e 	bne	r3,zero,8114b0 <strncmp+0xe8>
  811458:	42000104 	addi	r8,r8,4
  81145c:	39c00104 	addi	r7,r7,4
  811460:	59bff336 	bltu	r11,r6,811430 <strncmp+0x68>
  811464:	4009883a 	mov	r4,r8
  811468:	380b883a 	mov	r5,r7
  81146c:	31bfffc4 	addi	r6,r6,-1
  811470:	01ffffc4 	movi	r7,-1
  811474:	31c00a1e 	bne	r6,r7,8114a0 <strncmp+0xd8>
  811478:	20c00003 	ldbu	r3,0(r4)
  81147c:	28800003 	ldbu	r2,0(r5)
  811480:	1885c83a 	sub	r2,r3,r2
  811484:	f800283a 	ret
  811488:	30000926 	beq	r6,zero,8114b0 <strncmp+0xe8>
  81148c:	18000826 	beq	r3,zero,8114b0 <strncmp+0xe8>
  811490:	31bfffc4 	addi	r6,r6,-1
  811494:	21000044 	addi	r4,r4,1
  811498:	29400044 	addi	r5,r5,1
  81149c:	31fff626 	beq	r6,r7,811478 <strncmp+0xb0>
  8114a0:	20c00007 	ldb	r3,0(r4)
  8114a4:	28800007 	ldb	r2,0(r5)
  8114a8:	18bff726 	beq	r3,r2,811488 <strncmp+0xc0>
  8114ac:	003ff206 	br	811478 <strncmp+0xb0>
  8114b0:	0005883a 	mov	r2,zero
  8114b4:	f800283a 	ret

008114b8 <__register_exitproc>:
  8114b8:	defffa04 	addi	sp,sp,-24
  8114bc:	00802074 	movhi	r2,129
  8114c0:	108e5004 	addi	r2,r2,14656
  8114c4:	dc000015 	stw	r16,0(sp)
  8114c8:	14000017 	ldw	r16,0(r2)
  8114cc:	dd000415 	stw	r20,16(sp)
  8114d0:	2829883a 	mov	r20,r5
  8114d4:	81405217 	ldw	r5,328(r16)
  8114d8:	dcc00315 	stw	r19,12(sp)
  8114dc:	dc800215 	stw	r18,8(sp)
  8114e0:	dc400115 	stw	r17,4(sp)
  8114e4:	dfc00515 	stw	ra,20(sp)
  8114e8:	2023883a 	mov	r17,r4
  8114ec:	3027883a 	mov	r19,r6
  8114f0:	3825883a 	mov	r18,r7
  8114f4:	28002526 	beq	r5,zero,81158c <__register_exitproc+0xd4>
  8114f8:	29000117 	ldw	r4,4(r5)
  8114fc:	008007c4 	movi	r2,31
  811500:	11002716 	blt	r2,r4,8115a0 <__register_exitproc+0xe8>
  811504:	8800101e 	bne	r17,zero,811548 <__register_exitproc+0x90>
  811508:	2105883a 	add	r2,r4,r4
  81150c:	1085883a 	add	r2,r2,r2
  811510:	20c00044 	addi	r3,r4,1
  811514:	1145883a 	add	r2,r2,r5
  811518:	0009883a 	mov	r4,zero
  81151c:	15000215 	stw	r20,8(r2)
  811520:	28c00115 	stw	r3,4(r5)
  811524:	2005883a 	mov	r2,r4
  811528:	dfc00517 	ldw	ra,20(sp)
  81152c:	dd000417 	ldw	r20,16(sp)
  811530:	dcc00317 	ldw	r19,12(sp)
  811534:	dc800217 	ldw	r18,8(sp)
  811538:	dc400117 	ldw	r17,4(sp)
  81153c:	dc000017 	ldw	r16,0(sp)
  811540:	dec00604 	addi	sp,sp,24
  811544:	f800283a 	ret
  811548:	29802204 	addi	r6,r5,136
  81154c:	00800044 	movi	r2,1
  811550:	110e983a 	sll	r7,r2,r4
  811554:	30c04017 	ldw	r3,256(r6)
  811558:	2105883a 	add	r2,r4,r4
  81155c:	1085883a 	add	r2,r2,r2
  811560:	1185883a 	add	r2,r2,r6
  811564:	19c6b03a 	or	r3,r3,r7
  811568:	14802015 	stw	r18,128(r2)
  81156c:	14c00015 	stw	r19,0(r2)
  811570:	00800084 	movi	r2,2
  811574:	30c04015 	stw	r3,256(r6)
  811578:	88bfe31e 	bne	r17,r2,811508 <__register_exitproc+0x50>
  81157c:	30804117 	ldw	r2,260(r6)
  811580:	11c4b03a 	or	r2,r2,r7
  811584:	30804115 	stw	r2,260(r6)
  811588:	003fdf06 	br	811508 <__register_exitproc+0x50>
  81158c:	00802074 	movhi	r2,129
  811590:	1095bc04 	addi	r2,r2,22256
  811594:	100b883a 	mov	r5,r2
  811598:	80805215 	stw	r2,328(r16)
  81159c:	003fd606 	br	8114f8 <__register_exitproc+0x40>
  8115a0:	00800034 	movhi	r2,0
  8115a4:	10800004 	addi	r2,r2,0
  8115a8:	1000021e 	bne	r2,zero,8115b4 <__register_exitproc+0xfc>
  8115ac:	013fffc4 	movi	r4,-1
  8115b0:	003fdc06 	br	811524 <__register_exitproc+0x6c>
  8115b4:	01006404 	movi	r4,400
  8115b8:	103ee83a 	callr	r2
  8115bc:	1007883a 	mov	r3,r2
  8115c0:	103ffa26 	beq	r2,zero,8115ac <__register_exitproc+0xf4>
  8115c4:	80805217 	ldw	r2,328(r16)
  8115c8:	180b883a 	mov	r5,r3
  8115cc:	18000115 	stw	zero,4(r3)
  8115d0:	18800015 	stw	r2,0(r3)
  8115d4:	80c05215 	stw	r3,328(r16)
  8115d8:	18006215 	stw	zero,392(r3)
  8115dc:	18006315 	stw	zero,396(r3)
  8115e0:	0009883a 	mov	r4,zero
  8115e4:	883fc826 	beq	r17,zero,811508 <__register_exitproc+0x50>
  8115e8:	003fd706 	br	811548 <__register_exitproc+0x90>

008115ec <register_fini>:
  8115ec:	f800283a 	ret

008115f0 <__call_exitprocs>:
  8115f0:	00802074 	movhi	r2,129
  8115f4:	108e5004 	addi	r2,r2,14656
  8115f8:	10800017 	ldw	r2,0(r2)
  8115fc:	defff304 	addi	sp,sp,-52
  811600:	df000b15 	stw	fp,44(sp)
  811604:	d8800115 	stw	r2,4(sp)
  811608:	00800034 	movhi	r2,0
  81160c:	10800004 	addi	r2,r2,0
  811610:	1005003a 	cmpeq	r2,r2,zero
  811614:	d8800215 	stw	r2,8(sp)
  811618:	d8800117 	ldw	r2,4(sp)
  81161c:	dd400815 	stw	r21,32(sp)
  811620:	dd000715 	stw	r20,28(sp)
  811624:	10805204 	addi	r2,r2,328
  811628:	dfc00c15 	stw	ra,48(sp)
  81162c:	ddc00a15 	stw	r23,40(sp)
  811630:	dd800915 	stw	r22,36(sp)
  811634:	dcc00615 	stw	r19,24(sp)
  811638:	dc800515 	stw	r18,20(sp)
  81163c:	dc400415 	stw	r17,16(sp)
  811640:	dc000315 	stw	r16,12(sp)
  811644:	282b883a 	mov	r21,r5
  811648:	2039883a 	mov	fp,r4
  81164c:	d8800015 	stw	r2,0(sp)
  811650:	2829003a 	cmpeq	r20,r5,zero
  811654:	d8800117 	ldw	r2,4(sp)
  811658:	14405217 	ldw	r17,328(r2)
  81165c:	88001026 	beq	r17,zero,8116a0 <__call_exitprocs+0xb0>
  811660:	ddc00017 	ldw	r23,0(sp)
  811664:	88800117 	ldw	r2,4(r17)
  811668:	8c802204 	addi	r18,r17,136
  81166c:	143fffc4 	addi	r16,r2,-1
  811670:	80000916 	blt	r16,zero,811698 <__call_exitprocs+0xa8>
  811674:	05bfffc4 	movi	r22,-1
  811678:	a000151e 	bne	r20,zero,8116d0 <__call_exitprocs+0xe0>
  81167c:	8409883a 	add	r4,r16,r16
  811680:	2105883a 	add	r2,r4,r4
  811684:	1485883a 	add	r2,r2,r18
  811688:	10c02017 	ldw	r3,128(r2)
  81168c:	a8c01126 	beq	r21,r3,8116d4 <__call_exitprocs+0xe4>
  811690:	843fffc4 	addi	r16,r16,-1
  811694:	85bff81e 	bne	r16,r22,811678 <__call_exitprocs+0x88>
  811698:	d8800217 	ldw	r2,8(sp)
  81169c:	10003126 	beq	r2,zero,811764 <__call_exitprocs+0x174>
  8116a0:	dfc00c17 	ldw	ra,48(sp)
  8116a4:	df000b17 	ldw	fp,44(sp)
  8116a8:	ddc00a17 	ldw	r23,40(sp)
  8116ac:	dd800917 	ldw	r22,36(sp)
  8116b0:	dd400817 	ldw	r21,32(sp)
  8116b4:	dd000717 	ldw	r20,28(sp)
  8116b8:	dcc00617 	ldw	r19,24(sp)
  8116bc:	dc800517 	ldw	r18,20(sp)
  8116c0:	dc400417 	ldw	r17,16(sp)
  8116c4:	dc000317 	ldw	r16,12(sp)
  8116c8:	dec00d04 	addi	sp,sp,52
  8116cc:	f800283a 	ret
  8116d0:	8409883a 	add	r4,r16,r16
  8116d4:	88c00117 	ldw	r3,4(r17)
  8116d8:	2105883a 	add	r2,r4,r4
  8116dc:	1445883a 	add	r2,r2,r17
  8116e0:	18ffffc4 	addi	r3,r3,-1
  8116e4:	11800217 	ldw	r6,8(r2)
  8116e8:	1c001526 	beq	r3,r16,811740 <__call_exitprocs+0x150>
  8116ec:	10000215 	stw	zero,8(r2)
  8116f0:	303fe726 	beq	r6,zero,811690 <__call_exitprocs+0xa0>
  8116f4:	00c00044 	movi	r3,1
  8116f8:	1c06983a 	sll	r3,r3,r16
  8116fc:	90804017 	ldw	r2,256(r18)
  811700:	8cc00117 	ldw	r19,4(r17)
  811704:	1884703a 	and	r2,r3,r2
  811708:	10001426 	beq	r2,zero,81175c <__call_exitprocs+0x16c>
  81170c:	90804117 	ldw	r2,260(r18)
  811710:	1884703a 	and	r2,r3,r2
  811714:	10000c1e 	bne	r2,zero,811748 <__call_exitprocs+0x158>
  811718:	2105883a 	add	r2,r4,r4
  81171c:	1485883a 	add	r2,r2,r18
  811720:	11400017 	ldw	r5,0(r2)
  811724:	e009883a 	mov	r4,fp
  811728:	303ee83a 	callr	r6
  81172c:	88800117 	ldw	r2,4(r17)
  811730:	98bfc81e 	bne	r19,r2,811654 <__call_exitprocs+0x64>
  811734:	b8800017 	ldw	r2,0(r23)
  811738:	147fd526 	beq	r2,r17,811690 <__call_exitprocs+0xa0>
  81173c:	003fc506 	br	811654 <__call_exitprocs+0x64>
  811740:	8c000115 	stw	r16,4(r17)
  811744:	003fea06 	br	8116f0 <__call_exitprocs+0x100>
  811748:	2105883a 	add	r2,r4,r4
  81174c:	1485883a 	add	r2,r2,r18
  811750:	11000017 	ldw	r4,0(r2)
  811754:	303ee83a 	callr	r6
  811758:	003ff406 	br	81172c <__call_exitprocs+0x13c>
  81175c:	303ee83a 	callr	r6
  811760:	003ff206 	br	81172c <__call_exitprocs+0x13c>
  811764:	88800117 	ldw	r2,4(r17)
  811768:	1000081e 	bne	r2,zero,81178c <__call_exitprocs+0x19c>
  81176c:	89000017 	ldw	r4,0(r17)
  811770:	20000726 	beq	r4,zero,811790 <__call_exitprocs+0x1a0>
  811774:	b9000015 	stw	r4,0(r23)
  811778:	8809883a 	mov	r4,r17
  81177c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  811780:	bc400017 	ldw	r17,0(r23)
  811784:	883fb71e 	bne	r17,zero,811664 <__call_exitprocs+0x74>
  811788:	003fc506 	br	8116a0 <__call_exitprocs+0xb0>
  81178c:	89000017 	ldw	r4,0(r17)
  811790:	882f883a 	mov	r23,r17
  811794:	2023883a 	mov	r17,r4
  811798:	883fb21e 	bne	r17,zero,811664 <__call_exitprocs+0x74>
  81179c:	003fc006 	br	8116a0 <__call_exitprocs+0xb0>

008117a0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  8117a0:	defffd04 	addi	sp,sp,-12
  8117a4:	df000215 	stw	fp,8(sp)
  8117a8:	df000204 	addi	fp,sp,8
  8117ac:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  8117b0:	e0bfff17 	ldw	r2,-4(fp)
  8117b4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8117b8:	e0bffe17 	ldw	r2,-8(fp)
  8117bc:	1005003a 	cmpeq	r2,r2,zero
  8117c0:	1000021e 	bne	r2,zero,8117cc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  8117c4:	002af070 	cmpltui	zero,zero,43969
  8117c8:	00000106 	br	8117d0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  8117cc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  8117d0:	e037883a 	mov	sp,fp
  8117d4:	df000017 	ldw	fp,0(sp)
  8117d8:	dec00104 	addi	sp,sp,4
  8117dc:	f800283a 	ret

008117e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8117e0:	defffd04 	addi	sp,sp,-12
  8117e4:	dfc00215 	stw	ra,8(sp)
  8117e8:	df000115 	stw	fp,4(sp)
  8117ec:	df000104 	addi	fp,sp,4
  8117f0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  8117f4:	e13fff17 	ldw	r4,-4(fp)
  8117f8:	08117a00 	call	8117a0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8117fc:	003fff06 	br	8117fc <_exit+0x1c>
  811800:	00000010 	cmplti	zero,zero,0
  811804:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  811808:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_3+0x4b7a0>
  81180c:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_3+0x1187c0>
  811810:	001b0c0b 	ldhu	zero,27696(zero)
  811814:	00000028 	cmpgeui	zero,zero,0
  811818:	00000018 	cmpnei	zero,zero,0
  81181c:	0080aa08 	cmpgei	r2,zero,680
  811820:	000005dc 	xori	zero,zero,23
  811824:	400e4400 	call	400e440 <__alt_mem_sram_0+0x278e440>
  811828:	92099170 	cmpltui	r8,r18,9797
  81182c:	95079308 	cmpgei	r20,r18,7756
  811830:	97049605 	stb	fp,4696(r18)
  811834:	90019f03 	ldbu	zero,1660(r18)
  811838:	9c06940a 	0x9c06940a
  81183c:	00000002 	0x2
  811840:	00000028 	cmpgeui	zero,zero,0
  811844:	00000044 	movi	zero,1
  811848:	0080afe4 	muli	r2,zero,703
  81184c:	000005b0 	cmpltui	zero,zero,22
  811850:	3c0e4400 	call	3c0e440 <__alt_mem_sram_0+0x238e440>
  811854:	92099168 	cmpgeui	r8,r18,9797
  811858:	95079308 	cmpgei	r20,r18,7756
  81185c:	9c039705 	stb	r16,3676(r19)
  811860:	90019f02 	0x90019f02
  811864:	9606940a 	0x9606940a
  811868:	00000004 	movi	zero,0
  81186c:	008115ec 	andhi	r2,zero,1111
