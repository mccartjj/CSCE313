
Fractal_cpu1.elf:     file format elf32-littlenios2
Fractal_cpu1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00a001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00a00000 paddr 0x00a00000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00a00020 paddr 0x00a00020 align 2**12
         filesz 0x00010fa0 memsz 0x00010fa0 flags r-x
    LOAD off    0x00011fc0 vaddr 0x00a10fc0 paddr 0x00a12b94 align 2**12
         filesz 0x00001bd4 memsz 0x00001bd4 flags rw-
    LOAD off    0x00014768 vaddr 0x00a14768 paddr 0x00a14768 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00a00000  00a00000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00a00020  00a00020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010934  00a001b4  00a001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004d8  00a10ae8  00a10ae8  00011ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd4  00a10fc0  00a12b94  00011fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  00a14768  00a14768  00014768  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00013b94  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001058  00000000  00000000  00013bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b36  00000000  00000000  00014c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00029f2c  00000000  00000000  00016746  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a018  00000000  00000000  00040672  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00019982  00000000  00000000  0004a68a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002090  00000000  00000000  0006400c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002bea  00000000  00000000  0006609c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e2d1  00000000  00000000  00068c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00076f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000cc0  00000000  00000000  00076f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007b897  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007b89a  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0007b89f  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0007b8a0  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0007b8a4  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0007b8a8  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0007b8ac  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0007b8b7  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0007b8c2  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0007b8cd  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0007b8d8  2**0
                  CONTENTS, READONLY
 28 .jdi          0000ff9d  00000000  00000000  0007b8f8  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000d9e6e  00000000  00000000  0008b895  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00a00000 l    d  .entry	00000000 .entry
00a00020 l    d  .exceptions	00000000 .exceptions
00a001b4 l    d  .text	00000000 .text
00a10ae8 l    d  .rodata	00000000 .rodata
00a10fc0 l    d  .rwdata	00000000 .rwdata
00a14768 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00a001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Fractal.c
00000000 l    df *ABS*	00000000 Project.c
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 ef_pow.c
00a12b28 l     O .rwdata	00000008 bp
00a12b30 l     O .rwdata	00000008 dp_l
00a12b38 l     O .rwdata	00000008 dp_h
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_rint.c
00a10b44 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_isnan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00a01c90 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00a02568 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00a10fc0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00a039a4 l     F .text	00000058 __sprint_r
00a10cea l     O .rodata	00000010 blanks.3452
00a10cda l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00a05a08 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00a07404 l     F .text	00000058 std
00a07510 l     F .text	00000008 __fp_lock
00a07518 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00a12b50 l     O .rwdata	00000004 charset
00a10d18 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00a10e60 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00a0bfec l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00a0c234 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00a0c294 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00a0c394 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00a0c4b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00a0c594 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00a0c6f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00a0c91c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00a12b74 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00a0cbb8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00a1197c l     O .rwdata	00001060 jtag_uart_1
00a129dc l     O .rwdata	0000003c mailbox_0
00a12a18 l     O .rwdata	0000003c mailbox_1
00a12a54 l     O .rwdata	0000003c mailbox_2
00a12a90 l     O .rwdata	0000003c mailbox_3
00a12acc l     O .rwdata	00000054 video_pixel_buffer_dma_0
00a0cec4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00a0d104 l     F .text	00000228 altera_avalon_jtag_uart_irq
00a0d32c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
00a0db00 l     F .text	0000006c alt_avalon_mutex_reg
00a0db6c l     F .text	00000060 alt_get_errno
00a0dd00 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00a0ded0 l     F .text	0000007c alt_mutex_trylock
00a0dfa4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00a0f98c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00a0fe44 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00a0ff80 l     F .text	000000dc alt_file_locked
00a101e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00a10864 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00a10a18 l     F .text	00000040 alt_sim_halt
00a00200 g     F .text	0000006c genColor
00a091c0 g     F .text	00000094 _mprec_log10
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
00a092ac g     F .text	00000088 __any_on
00a0a9b8 g     F .text	00000070 _isatty_r
00a10e38 g     O .rodata	00000028 __mprec_tinytens
00a0c750 g     F .text	0000006c alt_main
00a0dd50 g     F .text	000000a8 altera_avalon_mailbox_pend
00a0ee40 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00a037a8 g     F .text	000000a0 _puts_r
00a147c8 g     O .bss	00000100 alt_irq
00a0aa28 g     F .text	00000078 _lseek_r
00a12b94 g       *ABS*	00000000 __flash_rwdata_start
00a0ba68 g     F .text	00000088 __eqdf2
00a14a58 g       *ABS*	00000000 __alt_heap_start
00a0ddf8 g     F .text	000000d8 altera_avalon_mailbox_get
00a03730 g     F .text	00000044 printf
00a0a484 g     F .text	00000068 __sseek
00a0746c g     F .text	000000a4 __sinit
00a08144 g     F .text	00000084 _setlocale_r
00a0756c g     F .text	00000068 __sfmoreglue
00a0c7dc g     F .text	00000020 __malloc_unlock
00a02128 g     F .text	00000174 __divsf3
00a08c3c g     F .text	000000e0 memmove
00a0755c g     F .text	00000010 _cleanup
00a007f0 g     F .text	00000458 powf
00a0e064 g     F .text	00000040 altera_avalon_mutex_trylock
00a09334 g     F .text	000000bc _Balloc
00a0e214 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00a0baf0 g     F .text	00000088 __gtdf2
00a03720 g     F .text	00000010 __errno
00a0e1d4 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00a00000 g     F .entry	0000001c __reset
00a0e100 g     F .text	0000007c altera_avalon_mutex_is_mine
00a00020 g       *ABS*	00000000 __flash_exceptions_start
00a0a944 g     F .text	00000074 _fstat_r
00a14784 g     O .bss	00000004 errno
00a02d4c g     F .text	00000038 __make_dp
00a031e0 g     F .text	0000002c __make_fp
00a1478c g     O .bss	00000004 alt_argv
00a1ab20 g       *ABS*	00000000 _gp
00a01e74 g     F .text	00000070 __subsf3
00a0e3b4 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00006000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
00a117fc g     O .rwdata	00000180 alt_fd_list
00a0fab4 g     F .text	00000094 alt_find_dev
00a08b9c g     F .text	000000a0 memcpy
00a07550 g     F .text	0000000c _cleanup_r
00a0bc88 g     F .text	000000f8 __floatsidf
00a0ff08 g     F .text	00000078 alt_io_redirect
00a0bc00 g     F .text	00000088 __ltdf2
00a10ae8 g       *ABS*	00000000 __DTOR_END__
00a03848 g     F .text	00000014 puts
00a103e8 g     F .text	00000020 altera_nios2_irq_init
00a09110 g     F .text	000000b0 __ratio
00a0dc44 g     F .text	000000bc altera_avalon_mailbox_post
00a0e464 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00a0d544 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00a03774 g     F .text	00000034 _printf_r
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00a0c128 g     F .text	00000008 __udivsi3
00a0c3f4 g     F .text	000000c0 isatty
00a10d48 g     O .rodata	000000c8 __mprec_tens
00a0dc24 g     F .text	00000020 altera_avalon_mailbox_close
00a0eaf0 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00a08120 g     F .text	00000008 __locale_charset
00a02404 g     F .text	00000078 __lesf2
00a105e0 g     F .text	00000090 alt_icache_flush
00a14778 g     O .bss	00000004 __malloc_top_pad
00a12b4c g     O .rwdata	00000004 __mb_cur_max
00a08128 g     F .text	0000000c _localeconv_r
00a09a2c g     F .text	0000003c __i2b
00a07b04 g     F .text	0000049c __sfvwrite_r
00a01af0 g     F .text	0000001c finitef
00a0a40c g     F .text	00000070 _sbrk_r
00a0f2d4 g     F .text	000000d0 helper_plot_pixel
00a01ae0 g     F .text	00000010 fabsf
00a0aaa0 g     F .text	00000078 _read_r
00a113c0 g     O .rwdata	0000000c __lc_ctype
00a12b6c g     O .rwdata	00000004 alt_max_fd
00a03520 g     F .text	00000138 __unpack_d
00a0a820 g     F .text	00000110 _fclose_r
00a073d0 g     F .text	00000034 fflush
00a1477c g     O .bss	00000004 __malloc_max_sbrked_mem
00a02514 g     F .text	00000054 __extendsfdf2
00a01b0c g     F .text	00000018 isnanf
00a029f8 g     F .text	00000074 __adddf3
00a08ff0 g     F .text	00000120 __b2d
00a0e498 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
00a0b0f4 g     F .text	000005b0 __umoddi3
00a0c600 g     F .text	000000f0 lseek
00a0e17c g     F .text	00000058 altera_avalon_mutex_first_lock
00a12b24 g     O .rwdata	00000004 targetY
00a12b40 g     O .rwdata	00000004 __fdlib_version
00a12b48 g     O .rwdata	00000004 _global_impure_ptr
00a09da8 g     F .text	000005f4 _realloc_r
00a14a58 g       *ABS*	00000000 __bss_end
00a0fd4c g     F .text	000000f8 alt_iic_isr_register
00a0e5fc g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00a102dc g     F .text	0000010c alt_tick
00a0ab18 g     F .text	000005dc __udivdi3
00a10e10 g     O .rodata	00000028 __mprec_bigtens
00a09c88 g     F .text	00000120 __s2b
00a0be58 g     F .text	00000194 __floatunsidf
00a08f10 g     F .text	00000060 __mcmp
00a07538 g     F .text	00000018 __fp_lock_all
00a0fd04 g     F .text	00000048 alt_ic_irq_enabled
00a10244 g     F .text	00000098 alt_alarm_stop
00a14794 g     O .bss	00000004 alt_irq_active
00a000ec g     F .exceptions	000000c8 alt_irq_handler
00a117d4 g     O .rwdata	00000028 alt_dev_null
00a0034c g     F .text	00000178 barrier
00a0df4c g     F .text	00000058 altera_avalon_mutex_open
00a018d0 g     F .text	00000210 rint
00a03070 g     F .text	000000c8 __unpack_f
00a0f894 g     F .text	00000044 alt_dcache_flush_all
00a08ddc g     F .text	00000070 __hi0bits
00a0f210 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
00a0bd80 g     F .text	000000d8 __fixdfsi
00a12b94 g       *ABS*	00000000 __ram_rwdata_end
00a12b64 g     O .rwdata	00000008 alt_dev_list
00a0ca98 g     F .text	00000120 write
00a0f3a4 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00a02314 g     F .text	00000078 __gtsf2
00a12b80 g     O .rwdata	00000008 alt_mutex_list
00a10fc0 g       *ABS*	00000000 __ram_rodata_end
00a0c2c0 g     F .text	000000d4 fstat
00a09b68 g     F .text	00000120 __pow5mult
00a1476c g     O .bss	00000004 __nlocale_changed
00a0c130 g     F .text	00000008 __umodsi3
00a14a58 g       *ABS*	00000000 end
00a02f10 g     F .text	00000160 __pack_f
00a14768 g     O .bss	00000004 myPixelBuffer
00a0d044 g     F .text	000000c0 altera_avalon_jtag_uart_init
00a10ae4 g       *ABS*	00000000 __CTOR_LIST__
00c00000 g       *ABS*	00000000 __alt_stack_pointer
00a02e90 g     F .text	00000080 __clzsi2
00a0d768 g     F .text	00000240 altera_avalon_jtag_uart_write
00a0d9a8 g     F .text	00000158 alt_avalon_mailbox_init
00a0745c g     F .text	00000004 __sfp_lock_acquire
00a08ab8 g     F .text	000000e4 memchr
00a039fc g     F .text	00001eac ___vfprintf_internal_r
00a038d0 g     F .text	00000060 _sprintf_r
00a077f0 g     F .text	00000314 _free_r
00a10868 g     F .text	000001b0 __call_exitprocs
00a12b20 g     O .rwdata	00000004 targetX
00a14770 g     O .bss	00000004 __mlocale_changed
00a12b58 g     O .rwdata	00000004 __malloc_sbrk_base
00a001b4 g     F .text	0000004c _start
00a14798 g     O .bss	00000004 _alt_tick_rate
00a096f8 g     F .text	0000014c __lshift
00a1479c g     O .bss	00000004 _alt_nticks
00a0c7fc g     F .text	00000120 read
00a0cc4c g     F .text	00000278 alt_sys_init
00a0247c g     F .text	00000098 __floatsisf
00a10730 g     F .text	00000134 __register_exitproc
00a0e0a4 g     F .text	0000005c altera_avalon_mutex_unlock
00a09844 g     F .text	000001e8 __multiply
00a0d3dc g     F .text	00000074 altera_avalon_jtag_uart_close
00a10fc0 g       *ABS*	00000000 __ram_rwdata_start
00a10ae8 g       *ABS*	00000000 __ram_rodata_start
00a147a0 g     O .bss	00000028 __malloc_current_mallinfo
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00a0229c g     F .text	00000078 __eqsf2
00a093f0 g     F .text	0000017c __d2b
00a0cefc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00a10528 g     F .text	000000b8 alt_get_fd
00a03658 g     F .text	000000c8 __fpcmp_parts_d
00a0a7b0 g     F .text	00000070 _close_r
00a004f4 g     F .text	00000284 drawFrame
00a106bc g     F .text	00000074 memcmp
00a0cfac g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00a14a58 g       *ABS*	00000000 __alt_stack_base
00a0cff4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00a058cc g     F .text	0000013c __swsetup_r
00a02a6c g     F .text	00000258 __divdf3
00a075d4 g     F .text	000000f0 __sfp
00a09254 g     F .text	00000058 __copybits
00a113cc g     O .rwdata	00000408 __malloc_av_
00a07468 g     F .text	00000004 __sinit_lock_release
00a0b6a4 g     F .text	000003c4 __muldf3
00a00c48 g     F .text	00000b14 __ieee754_powf
00a0a568 g     F .text	00000060 __sread
00a10b54 g     O .rodata	00000010 __thenan_sf
00a10408 g     F .text	00000120 alt_find_file
00a0f8d8 g     F .text	000000b4 alt_dev_llist_insert
00a0c7bc g     F .text	00000020 __malloc_lock
00a0c9dc g     F .text	000000bc sbrk
00a01b2c g     F .text	0000014c scalbnf
00a071d4 g     F .text	000001fc _fflush_r
00a0a6fc g     F .text	000000b4 _calloc_r
00a14768 g       *ABS*	00000000 __bss_start
00a08d1c g     F .text	00000098 memset
00a0175c g     F .text	0000016c __ieee754_sqrtf
00a00778 g     F .text	00000078 main
00a14790 g     O .bss	00000004 alt_envp
00a14780 g     O .bss	00000004 __malloc_max_total_mem
00a0e40c g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
00a0cf54 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00a0238c g     F .text	00000078 __ltsf2
00a0a47c g     F .text	00000008 __sclose
00a018c8 g     F .text	00000008 matherr
00c00000 g       *ABS*	00000000 __alt_heap_limit
00a0a930 g     F .text	00000014 fclose
00a02d84 g     F .text	00000074 __truncdfsf2
00a148c8 g     O .bss	00000190 _atexit0
00a0e024 g     F .text	00000040 altera_avalon_mutex_lock
00a05c20 g     F .text	000015b4 _dtoa_r
00a08378 g     F .text	00000740 _malloc_r
00a12b70 g     O .rwdata	00000004 alt_errno
00a08068 g     F .text	000000b8 _fwalk
00a0c068 g     F .text	00000060 __divsi3
00a10b64 g     O .rodata	00000014 __thenan_df
00a076c4 g     F .text	0000012c _malloc_trim_r
00a10ae8 g       *ABS*	00000000 __CTOR_END__
00a01f48 g     F .text	000001e0 __mulsf3
00a0a5c8 g     F .text	000000bc strcmp
00a10ae8 g       *ABS*	00000000 __flash_rodata_start
00a10ae8 g       *ABS*	00000000 __DTOR_LIST__
00a02cc4 g     F .text	00000088 __nedf2
01880000 g       *ABS*	00000000 __alt_mem_sram_0
00a0cc18 g     F .text	00000034 alt_irq_init
00a0c97c g     F .text	00000060 alt_release_fd
00a01c78 g     F .text	00000018 copysignf
00a0385c g     F .text	00000074 sprintf
00a10b78 g     O .rodata	00000100 __clz_tab
00a14774 g     O .bss	00000004 _PathLocale
00a10670 g     F .text	00000014 atexit
00a0a684 g     F .text	00000078 _write_r
00a081c8 g     F .text	0000001c setlocale
00a01b24 g     F .text	00000008 nanf
00a12b44 g     O .rwdata	00000004 _impure_ptr
00a14788 g     O .bss	00000004 alt_argc
00a0fa50 g     F .text	00000064 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00a00020 g       .exceptions	00000000 alt_irq_entry
00a08f70 g     F .text	00000080 __ulp
00a0a39c g     F .text	00000040 __isinfd
00a07520 g     F .text	00000018 __fp_unlock_all
00a12b78 g     O .rwdata	00000008 alt_mailbox_list
00a004c4 g     F .text	00000030 setup
00a12b5c g     O .rwdata	00000008 alt_fs_list
00a00020 g       *ABS*	00000000 __ram_exceptions_start
00a08134 g     F .text	00000010 localeconv
00a0fb78 g     F .text	00000050 alt_ic_isr_register
00a12b94 g       *ABS*	00000000 _edata
00a14a58 g       *ABS*	00000000 _end
00a001b4 g       *ABS*	00000000 __ram_exceptions_end
00a0d450 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00a0fc64 g     F .text	000000a0 alt_ic_irq_disable
00a0a4ec g     F .text	0000007c __swrite
00a12b54 g     O .rwdata	00000004 __malloc_trim_threshold
00a10684 g     F .text	00000038 exit
00a07fa0 g     F .text	000000c8 _fwalk_reent
00a0956c g     F .text	0000018c __mdiff
00a0026c g     F .text	000000d4 mandelbrot
00a0c0c8 g     F .text	00000060 __modsi3
00c00000 g       *ABS*	00000000 __alt_data_end
00a00020 g     F .exceptions	00000000 alt_exception
00a07460 g     F .text	00000004 __sfp_lock_release
00a0dbcc g     F .text	00000058 altera_avalon_mailbox_open
00a03138 g     F .text	000000a8 __fpcmp_parts_f
00a10a58 g     F .text	00000020 _exit
00a0a3dc g     F .text	00000030 __isnand
00a0f740 g     F .text	00000154 alt_alarm_start
00a02df8 g     F .text	00000098 __muldi3
00a081e4 g     F .text	00000194 __smakebuf_r
00a03930 g     F .text	00000074 strlen
00a1005c g     F .text	00000188 open
00a0bb78 g     F .text	00000088 __gedf2
00a00340 g     F .text	0000000c clearScreen
00a0fb48 g     F .text	00000030 alt_icache_flush_all
00a12b88 g     O .rwdata	00000004 alt_priority_mask
00a0fbc8 g     F .text	0000009c alt_ic_irq_enable
00a058a8 g     F .text	00000024 __vfprintf_internal
00a0e004 g     F .text	00000020 altera_avalon_mutex_close
00a02978 g     F .text	00000080 __subdf3
00a08e4c g     F .text	000000c4 __lo0bits
00a12b8c g     O .rwdata	00000008 alt_alarm_list
00a0f9ec g     F .text	00000064 _do_ctors
00a0c138 g     F .text	000000fc close
00a01ee4 g     F .text	00000064 __addsf3
00a0c514 g     F .text	00000080 alt_load
00a0320c g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00a07464 g     F .text	00000004 __sinit_lock_acquire
00a09a68 g     F .text	00000100 __multadd
00a08db4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00a00000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  a00000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  a00004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  a00008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  a0000c:	00bffd16 	blt	zero,r2,a00004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  a00010:	00402834 	movhi	at,160
    ori r1, r1, %lo(_start)
  a00014:	08406d14 	ori	at,at,436
    jmp r1
  a00018:	0800683a 	jmp	at
  a0001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

00a00020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  a00020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  a00024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  a00028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  a0002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  a00030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  a00034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  a00038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  a0003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  a00040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  a00044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  a00048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  a0004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  a00050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  a00054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  a00058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  a0005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  a00060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  a00064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  a00068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  a0006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a00070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  a00074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  a00078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  a0007c:	10000326 	beq	r2,zero,a0008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  a00080:	20000226 	beq	r4,zero,a0008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  a00084:	0a000ec0 	call	a000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  a00088:	00000306 	br	a00098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  a0008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  a00090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  a00094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a00098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  a0009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  a000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  a000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  a000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  a000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  a000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  a000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  a000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  a000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  a000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  a000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  a000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  a000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  a000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  a000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  a000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  a000e8:	ef80083a 	eret

00a000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  a000ec:	defff904 	addi	sp,sp,-28
  a000f0:	dfc00615 	stw	ra,24(sp)
  a000f4:	df000515 	stw	fp,20(sp)
  a000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  a000fc:	0005313a 	rdctl	r2,ipending
  a00100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  a00104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  a00108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  a0010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  a00110:	00800044 	movi	r2,1
  a00114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  a00118:	e0ffff17 	ldw	r3,-4(fp)
  a0011c:	e0bffe17 	ldw	r2,-8(fp)
  a00120:	1884703a 	and	r2,r3,r2
  a00124:	1005003a 	cmpeq	r2,r2,zero
  a00128:	1000161e 	bne	r2,zero,a00184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  a0012c:	e0bffd17 	ldw	r2,-12(fp)
  a00130:	00c02874 	movhi	r3,161
  a00134:	18d1f204 	addi	r3,r3,18376
  a00138:	100490fa 	slli	r2,r2,3
  a0013c:	10c5883a 	add	r2,r2,r3
  a00140:	11400017 	ldw	r5,0(r2)
  a00144:	e0bffd17 	ldw	r2,-12(fp)
  a00148:	00c02874 	movhi	r3,161
  a0014c:	18d1f204 	addi	r3,r3,18376
  a00150:	100490fa 	slli	r2,r2,3
  a00154:	10c5883a 	add	r2,r2,r3
  a00158:	10800104 	addi	r2,r2,4
  a0015c:	11000017 	ldw	r4,0(r2)
  a00160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  a00164:	0005313a 	rdctl	r2,ipending
  a00168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  a0016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  a00170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  a00174:	e0bfff17 	ldw	r2,-4(fp)
  a00178:	1004c03a 	cmpne	r2,r2,zero
  a0017c:	103fe31e 	bne	r2,zero,a0010c <alt_irq_handler+0x20>
  a00180:	00000706 	br	a001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  a00184:	e0bffe17 	ldw	r2,-8(fp)
  a00188:	1085883a 	add	r2,r2,r2
  a0018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  a00190:	e0bffd17 	ldw	r2,-12(fp)
  a00194:	10800044 	addi	r2,r2,1
  a00198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  a0019c:	003fde06 	br	a00118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  a001a0:	e037883a 	mov	sp,fp
  a001a4:	dfc00117 	ldw	ra,4(sp)
  a001a8:	df000017 	ldw	fp,0(sp)
  a001ac:	dec00204 	addi	sp,sp,8
  a001b0:	f800283a 	ret

Disassembly of section .text:

00a001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  a001b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
  a001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  a001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  a001c0:	00bffd16 	blt	zero,r2,a001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  a001c4:	06c03034 	movhi	sp,192
    ori sp, sp, %lo(__alt_stack_pointer)
  a001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  a001cc:	06802874 	movhi	gp,161
    ori gp, gp, %lo(_gp)
  a001d0:	d6aac814 	ori	gp,gp,43808
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  a001d4:	00802874 	movhi	r2,161
    ori r2, r2, %lo(__bss_start)
  a001d8:	1091da14 	ori	r2,r2,18280

    movhi r3, %hi(__bss_end)
  a001dc:	00c02874 	movhi	r3,161
    ori r3, r3, %lo(__bss_end)
  a001e0:	18d29614 	ori	r3,r3,19032

    beq r2, r3, 1f
  a001e4:	10c00326 	beq	r2,r3,a001f4 <_start+0x40>

0:
    stw zero, (r2)
  a001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  a001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  a001f0:	10fffd36 	bltu	r2,r3,a001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  a001f4:	0a0c5140 	call	a0c514 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  a001f8:	0a0c7500 	call	a0c750 <alt_main>

00a001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  a001fc:	003fff06 	br	a001fc <alt_after_alt_main>

00a00200 <genColor>:
	int color = 0;
	if (iter == maxIter) {
		color = black;
	}
	else {
		int red = iter * 2;
  a00200:	2107883a 	add	r3,r4,r4
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  a00204:	00801904 	movi	r2,100
			red = 255;
		if (green > 255)
			green = 255;
		if (blue > 255)
			blue = 255;
		color = (red << 16) + (green << 8) + (blue);
  a00208:	200a90fa 	slli	r5,r4,3
  a0020c:	01c03fc4 	movi	r7,255
  a00210:	180d883a 	mov	r6,r3
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  a00214:	0011883a 	mov	r8,zero
  a00218:	20800926 	beq	r4,r2,a00240 <genColor+0x40>
		color = black;
	}
	else {
		int red = iter * 2;
		int green = iter * 8;
		int blue = iter * 3;
  a0021c:	1905883a 	add	r2,r3,r4
			red = 255;
		if (green > 255)
			green = 255;
		if (blue > 255)
			blue = 255;
		color = (red << 16) + (green << 8) + (blue);
  a00220:	1009883a 	mov	r4,r2
  a00224:	39400d16 	blt	r7,r5,a0025c <genColor+0x5c>
  a00228:	2806923a 	slli	r3,r5,8
  a0022c:	39000816 	blt	r7,r4,a00250 <genColor+0x50>
  a00230:	39800516 	blt	r7,r6,a00248 <genColor+0x48>
  a00234:	3004943a 	slli	r2,r6,16
  a00238:	2085883a 	add	r2,r4,r2
  a0023c:	1891883a 	add	r8,r3,r2
	}
	return color;
}
  a00240:	4005883a 	mov	r2,r8
  a00244:	f800283a 	ret
			red = 255;
		if (green > 255)
			green = 255;
		if (blue > 255)
			blue = 255;
		color = (red << 16) + (green << 8) + (blue);
  a00248:	380d883a 	mov	r6,r7
  a0024c:	003ff906 	br	a00234 <genColor+0x34>
  a00250:	3809883a 	mov	r4,r7
  a00254:	39bff70e 	bge	r7,r6,a00234 <genColor+0x34>
  a00258:	003ffb06 	br	a00248 <genColor+0x48>
  a0025c:	380b883a 	mov	r5,r7
  a00260:	2806923a 	slli	r3,r5,8
  a00264:	393ff20e 	bge	r7,r4,a00230 <genColor+0x30>
  a00268:	003ff906 	br	a00250 <genColor+0x50>

00a0026c <mandelbrot>:
	}
	return color;
}

int mandelbrot(int cRow, int cCol, float x0, float y0) {
  a0026c:	defff704 	addi	sp,sp,-36
	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {

		//		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		//		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

		xtemp = x * x - y * y + x0;
  a00270:	0005883a 	mov	r2,zero
		y = 2 * x * y + y0;
  a00274:	0007883a 	mov	r3,zero
		color = (red << 16) + (green << 8) + (blue);
	}
	return color;
}

int mandelbrot(int cRow, int cCol, float x0, float y0) {
  a00278:	dc800215 	stw	r18,8(sp)
  a0027c:	dc000015 	stw	r16,0(sp)
	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {

		//		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		//		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

		xtemp = x * x - y * y + x0;
  a00280:	30a5ff72 	custom	253,r18,r6,r2
		y = 2 * x * y + y0;
  a00284:	38e1ff72 	custom	253,r16,r7,r3
		color = (red << 16) + (green << 8) + (blue);
	}
	return color;
}

int mandelbrot(int cRow, int cCol, float x0, float y0) {
  a00288:	dcc00315 	stw	r19,12(sp)
  a0028c:	dc400115 	stw	r17,4(sp)
	float y = 0.0;
	float xtemp = 0.0;

	unsigned long long cycles = 0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  a00290:	94a7ff32 	custom	252,r19,r18,r18
  a00294:	8423ff32 	custom	252,r17,r16,r16
  a00298:	9c49ff72 	custom	253,r4,r19,r17
  a0029c:	01502034 	movhi	r5,16512
		color = (red << 16) + (green << 8) + (blue);
	}
	return color;
}

int mandelbrot(int cRow, int cCol, float x0, float y0) {
  a002a0:	dd800615 	stw	r22,24(sp)
  a002a4:	dd400515 	stw	r21,20(sp)
  a002a8:	dfc00815 	stw	ra,32(sp)
  a002ac:	ddc00715 	stw	r23,28(sp)
  a002b0:	dd000415 	stw	r20,16(sp)
  a002b4:	302d883a 	mov	r22,r6
  a002b8:	382b883a 	mov	r21,r7
	float y = 0.0;
	float xtemp = 0.0;

	unsigned long long cycles = 0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  a002bc:	0a024040 	call	a02404 <__lesf2>
  a002c0:	00801d16 	blt	zero,r2,a00338 <mandelbrot+0xcc>
  a002c4:	05000044 	movi	r20,1
  a002c8:	05c01904 	movi	r23,100
  a002cc:	00000106 	br	a002d4 <mandelbrot+0x68>
  a002d0:	a5c00d26 	beq	r20,r23,a00308 <mandelbrot+0x9c>

		//		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		//		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  a002d4:	9485ff72 	custom	253,r2,r18,r18
	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {

		//		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		//		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

		xtemp = x * x - y * y + x0;
  a002d8:	9c47ffb2 	custom	254,r3,r19,r17
		y = 2 * x * y + y0;
  a002dc:	8085ff32 	custom	252,r2,r16,r2
	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {

		//		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		//		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

		xtemp = x * x - y * y + x0;
  a002e0:	1d87ff72 	custom	253,r3,r3,r22
		y = 2 * x * y + y0;
  a002e4:	1561ff72 	custom	253,r16,r2,r21
	float y = 0.0;
	float xtemp = 0.0;

	unsigned long long cycles = 0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  a002e8:	18e7ff32 	custom	252,r19,r3,r3
  a002ec:	8423ff32 	custom	252,r17,r16,r16
  a002f0:	9c49ff72 	custom	253,r4,r19,r17
  a002f4:	01502034 	movhi	r5,16512
  a002f8:	1825883a 	mov	r18,r3
		//		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
  a002fc:	a5000044 	addi	r20,r20,1
	float y = 0.0;
	float xtemp = 0.0;

	unsigned long long cycles = 0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  a00300:	0a024040 	call	a02404 <__lesf2>
  a00304:	00bff20e 	bge	zero,r2,a002d0 <mandelbrot+0x64>
		//		cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);
		//		printf("iter number: %i\n", iter);
		//		printf("Cycles on frame: %llu \n\n", cycles);
	}
	return iter;
}
  a00308:	a005883a 	mov	r2,r20
  a0030c:	dfc00817 	ldw	ra,32(sp)
  a00310:	ddc00717 	ldw	r23,28(sp)
  a00314:	dd800617 	ldw	r22,24(sp)
  a00318:	dd400517 	ldw	r21,20(sp)
  a0031c:	dd000417 	ldw	r20,16(sp)
  a00320:	dcc00317 	ldw	r19,12(sp)
  a00324:	dc800217 	ldw	r18,8(sp)
  a00328:	dc400117 	ldw	r17,4(sp)
  a0032c:	dc000017 	ldw	r16,0(sp)
  a00330:	dec00904 	addi	sp,sp,36
  a00334:	f800283a 	ret
	float y = 0.0;
	float xtemp = 0.0;

	unsigned long long cycles = 0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  a00338:	05000044 	movi	r20,1
  a0033c:	003ff206 	br	a00308 <mandelbrot+0x9c>

00a00340 <clearScreen>:
	}
}

void clearScreen(void) {
	//clears the part of the screen controlled by the pixel buffer
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
  a00340:	d1271217 	ldw	r4,-25528(gp)
  a00344:	000b883a 	mov	r5,zero
  a00348:	0a0e4981 	jmpi	a0e498 <alt_up_pixel_buffer_dma_clear_screen>

00a0034c <barrier>:
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}
}

void barrier(alt_u8 barrierNum) {
  a0034c:	deffe104 	addi	sp,sp,-124
  a00350:	dc801a15 	stw	r18,104(sp)
  a00354:	2025883a 	mov	r18,r4
  a00358:	dfc01e15 	stw	ra,120(sp)
  a0035c:	dd401d15 	stw	r21,116(sp)
  a00360:	dd001c15 	stw	r20,112(sp)
  a00364:	dcc01b15 	stw	r19,108(sp)
  a00368:	dc401915 	stw	r17,100(sp)
  a0036c:	dc001815 	stw	r16,96(sp)
	alt_u32 msg;
	alt_mailbox_dev *mb[NUM_CPUS];
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
  a00370:	0021317a 	rdctl	r16,cpuid
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  a00374:	dc400404 	addi	r17,sp,16
  a00378:	01402874 	movhi	r5,161
  a0037c:	2942ba04 	addi	r5,r5,2792
  a00380:	000d883a 	mov	r6,zero
  a00384:	8809883a 	mov	r4,r17
  a00388:	0a0385c0 	call	a0385c <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  a0038c:	8809883a 	mov	r4,r17
  a00390:	0a0dbcc0 	call	a0dbcc <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  a00394:	05400044 	movi	r21,1
  a00398:	01402874 	movhi	r5,161
  a0039c:	2942ba04 	addi	r5,r5,2792
  a003a0:	a80d883a 	mov	r6,r21
  a003a4:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  a003a8:	d8800015 	stw	r2,0(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  a003ac:	0a0385c0 	call	a0385c <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  a003b0:	8809883a 	mov	r4,r17
  a003b4:	0a0dbcc0 	call	a0dbcc <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  a003b8:	04c00084 	movi	r19,2
  a003bc:	01402874 	movhi	r5,161
  a003c0:	2942ba04 	addi	r5,r5,2792
  a003c4:	980d883a 	mov	r6,r19
  a003c8:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  a003cc:	d8800115 	stw	r2,4(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  a003d0:	0a0385c0 	call	a0385c <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  a003d4:	8809883a 	mov	r4,r17
  a003d8:	0a0dbcc0 	call	a0dbcc <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  a003dc:	01402874 	movhi	r5,161
  a003e0:	2942ba04 	addi	r5,r5,2792
  a003e4:	018000c4 	movi	r6,3
  a003e8:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  a003ec:	d8800215 	stw	r2,8(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  a003f0:	0a0385c0 	call	a0385c <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  a003f4:	8809883a 	mov	r4,r17
  a003f8:	0a0dbcc0 	call	a0dbcc <altera_avalon_mailbox_open>
  a003fc:	1029883a 	mov	r20,r2
  a00400:	d8800315 	stw	r2,12(sp)
	}

	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  a00404:	80002626 	beq	r16,zero,a004a0 <barrier+0x154>
			altera_avalon_mailbox_post(mb[i], barrierNum);
  a00408:	d9000017 	ldw	r4,0(sp)
  a0040c:	94803fcc 	andi	r18,r18,255
  a00410:	900b883a 	mov	r5,r18
  a00414:	0a0dc440 	call	a0dc44 <altera_avalon_mailbox_post>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}

	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  a00418:	8540221e 	bne	r16,r21,a004a4 <barrier+0x158>
			altera_avalon_mailbox_post(mb[i], barrierNum);
  a0041c:	d9000217 	ldw	r4,8(sp)
  a00420:	900b883a 	mov	r5,r18
  a00424:	0a0dc440 	call	a0dc44 <altera_avalon_mailbox_post>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}

	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  a00428:	00c000c4 	movi	r3,3
  a0042c:	80c0211e 	bne	r16,r3,a004b4 <barrier+0x168>
		}
	}

	for (i = 0; i < NUM_CPUS - 1; i++) {
		do {
			msg = altera_avalon_mailbox_pend(mb[cpu]);
  a00430:	8405883a 	add	r2,r16,r16
  a00434:	1085883a 	add	r2,r2,r2
  a00438:	16c5883a 	add	r2,r2,sp
  a0043c:	14400017 	ldw	r17,0(r2)
  a00440:	0021883a 	mov	r16,zero
  a00444:	04c00084 	movi	r19,2
  a00448:	8809883a 	mov	r4,r17
  a0044c:	0a0dd500 	call	a0dd50 <altera_avalon_mailbox_pend>
		}
		while (msg != barrierNum);
  a00450:	14bffd1e 	bne	r2,r18,a00448 <barrier+0xfc>
		if (i != cpu) {
			altera_avalon_mailbox_post(mb[i], barrierNum);
		}
	}

	for (i = 0; i < NUM_CPUS - 1; i++) {
  a00454:	84000044 	addi	r16,r16,1
  a00458:	9c3ffb0e 	bge	r19,r16,a00448 <barrier+0xfc>
		}
		while (msg != barrierNum);
	}

	for (i = 0; i < NUM_CPUS; i++) {
		altera_avalon_mailbox_close(mb[i]);
  a0045c:	d9000017 	ldw	r4,0(sp)
  a00460:	0a0dc240 	call	a0dc24 <altera_avalon_mailbox_close>
  a00464:	d9000117 	ldw	r4,4(sp)
  a00468:	0a0dc240 	call	a0dc24 <altera_avalon_mailbox_close>
  a0046c:	d9000217 	ldw	r4,8(sp)
  a00470:	0a0dc240 	call	a0dc24 <altera_avalon_mailbox_close>
  a00474:	a009883a 	mov	r4,r20
  a00478:	0a0dc240 	call	a0dc24 <altera_avalon_mailbox_close>
	}
}
  a0047c:	dfc01e17 	ldw	ra,120(sp)
  a00480:	dd401d17 	ldw	r21,116(sp)
  a00484:	dd001c17 	ldw	r20,112(sp)
  a00488:	dcc01b17 	ldw	r19,108(sp)
  a0048c:	dc801a17 	ldw	r18,104(sp)
  a00490:	dc401917 	ldw	r17,100(sp)
  a00494:	dc001817 	ldw	r16,96(sp)
  a00498:	dec01f04 	addi	sp,sp,124
  a0049c:	f800283a 	ret
  a004a0:	94803fcc 	andi	r18,r18,255
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}

	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
			altera_avalon_mailbox_post(mb[i], barrierNum);
  a004a4:	d9000117 	ldw	r4,4(sp)
  a004a8:	900b883a 	mov	r5,r18
  a004ac:	0a0dc440 	call	a0dc44 <altera_avalon_mailbox_post>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}

	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  a004b0:	84ffda1e 	bne	r16,r19,a0041c <barrier+0xd0>
			altera_avalon_mailbox_post(mb[i], barrierNum);
  a004b4:	a009883a 	mov	r4,r20
  a004b8:	900b883a 	mov	r5,r18
  a004bc:	0a0dc440 	call	a0dc44 <altera_avalon_mailbox_post>
  a004c0:	003fdb06 	br	a00430 <barrier+0xe4>

00a004c4 <setup>:
float targetX = -0.227;
float targetY = 0.700;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  a004c4:	deffff04 	addi	sp,sp,-4
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  a004c8:	01002874 	movhi	r4,161
  a004cc:	2102be04 	addi	r4,r4,2808
float targetX = -0.227;
float targetY = 0.700;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  a004d0:	dfc00015 	stw	ra,0(sp)
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  a004d4:	0a0e1d40 	call	a0e1d4 <alt_up_pixel_buffer_dma_open_dev>
  a004d8:	d0a71215 	stw	r2,-25528(gp)
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
  a004dc:	00c00044 	movi	r3,1
  a004e0:	0005883a 	mov	r2,zero
  a004e4:	10c00035 	stwio	r3,0(r2)
}
  a004e8:	dfc00017 	ldw	ra,0(sp)
  a004ec:	dec00104 	addi	sp,sp,4
  a004f0:	f800283a 	ret

00a004f4 <drawFrame>:
//			color = genColor(result);
//			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
//		}
//	}
//}
void drawFrame(int zoom) {
  a004f4:	deffef04 	addi	sp,sp,-68
  a004f8:	dfc01015 	stw	ra,64(sp)
  a004fc:	df000f15 	stw	fp,60(sp)
  a00500:	ddc00e15 	stw	r23,56(sp)
  a00504:	dd800d15 	stw	r22,52(sp)
  a00508:	dd400c15 	stw	r21,48(sp)
  a0050c:	dd000b15 	stw	r20,44(sp)
  a00510:	dcc00a15 	stw	r19,40(sp)
  a00514:	dc800915 	stw	r18,36(sp)
  a00518:	dc400815 	stw	r17,32(sp)
  a0051c:	dc000715 	stw	r16,28(sp)
	int i;
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
  a00520:	002d317a 	rdctl	r22,cpuid

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  a00524:	040ff034 	movhi	r16,16320
  a00528:	0a0247c0 	call	a0247c <__floatsisf>
  a0052c:	1023883a 	mov	r17,r2
  a00530:	8009883a 	mov	r4,r16
  a00534:	100b883a 	mov	r5,r2
  a00538:	0a007f00 	call	a007f0 <powf>
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
  a0053c:	8009883a 	mov	r4,r16
  a00540:	880b883a 	mov	r5,r17
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  a00544:	1025883a 	mov	r18,r2
  a00548:	d5e00017 	ldw	r23,-32768(gp)
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
  a0054c:	0a007f00 	call	a007f0 <powf>
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  a00550:	8009883a 	mov	r4,r16
  a00554:	880b883a 	mov	r5,r17
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
  a00558:	1039883a 	mov	fp,r2
  a0055c:	d5600017 	ldw	r21,-32768(gp)
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  a00560:	0a007f00 	call	a007f0 <powf>
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));
  a00564:	8009883a 	mov	r4,r16
  a00568:	880b883a 	mov	r5,r17
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  a0056c:	1027883a 	mov	r19,r2
  a00570:	d4600117 	ldw	r17,-32764(gp)
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));
  a00574:	0a007f00 	call	a007f0 <powf>
  a00578:	1029883a 	mov	r20,r2

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  a0057c:	00804fc4 	movi	r2,319
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));
  a00580:	d4200117 	ldw	r16,-32764(gp)

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  a00584:	15806b16 	blt	r2,r22,a00734 <drawFrame+0x240>
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  a00588:	900b883a 	mov	r5,r18
  a0058c:	012fe034 	movhi	r4,49024
  a00590:	0a021280 	call	a02128 <__divsf3>
  a00594:	15c5ff72 	custom	253,r2,r2,r23
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  a00598:	980b883a 	mov	r5,r19
  a0059c:	012fd034 	movhi	r4,48960
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  a005a0:	d8800515 	stw	r2,20(sp)
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  a005a4:	0a021280 	call	a02128 <__divsf3>
  a005a8:	1445ff72 	custom	253,r2,r2,r17
  a005ac:	a00b883a 	mov	r5,r20
  a005b0:	010fd034 	movhi	r4,16192
  a005b4:	d8800415 	stw	r2,16(sp)
  a005b8:	0a021280 	call	a02128 <__divsf3>
  a005bc:	d8c00417 	ldw	r3,16(sp)
  a005c0:	1405ff72 	custom	253,r2,r2,r16
  a005c4:	e00b883a 	mov	r5,fp
  a005c8:	10c5ffb2 	custom	254,r2,r2,r3
  a005cc:	010fe034 	movhi	r4,16256
  a005d0:	d8800215 	stw	r2,8(sp)
  a005d4:	0a021280 	call	a02128 <__divsf3>
  a005d8:	d8c00517 	ldw	r3,20(sp)
  a005dc:	1545ff72 	custom	253,r2,r2,r21
  a005e0:	dd800615 	stw	r22,24(sp)
  a005e4:	10c5ffb2 	custom	254,r2,r2,r3
  a005e8:	d8800115 	stw	r2,4(sp)
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 239 - (float) i) / (float) 240) * (maxY - minY)) + minY;
  a005ec:	d9000617 	ldw	r4,24(sp)
  a005f0:	0039883a 	mov	fp,zero
  a005f4:	0a0247c0 	call	a0247c <__floatsisf>
  a005f8:	0110dbf4 	movhi	r4,17263
  a005fc:	2089ffb2 	custom	254,r4,r4,r2
  a00600:	0150dc34 	movhi	r5,17264
  a00604:	0a021280 	call	a02128 <__divsf3>
  a00608:	d8c00217 	ldw	r3,8(sp)
  a0060c:	10c5ff32 	custom	252,r2,r2,r3
  a00610:	d8c00417 	ldw	r3,16(sp)
  a00614:	18afff72 	custom	253,r23,r3,r2
  a00618:	0005883a 	mov	r2,zero
  a0061c:	b885ff72 	custom	253,r2,r23,r2
  a00620:	d8800315 	stw	r2,12(sp)
  a00624:	1085ff32 	custom	252,r2,r2,r2
  a00628:	d8800015 	stw	r2,0(sp)
		for (j = 0; j < rowSize; j++) {
			float x0 = (((float) j / (float) 320) * (maxX - minX)) + minX;
  a0062c:	e009883a 	mov	r4,fp
  a00630:	0a0247c0 	call	a0247c <__floatsisf>
  a00634:	1009883a 	mov	r4,r2
  a00638:	0150e834 	movhi	r5,17312
  a0063c:	0a021280 	call	a02128 <__divsf3>
  a00640:	d8c00117 	ldw	r3,4(sp)
	float y = 0.0;
	float xtemp = 0.0;

	unsigned long long cycles = 0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  a00644:	01502034 	movhi	r5,16512
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 239 - (float) i) / (float) 240) * (maxY - minY)) + minY;
		for (j = 0; j < rowSize; j++) {
			float x0 = (((float) j / (float) 320) * (maxX - minX)) + minX;
  a00648:	10c5ff32 	custom	252,r2,r2,r3
  a0064c:	d8c00517 	ldw	r3,20(sp)
  a00650:	18abff72 	custom	253,r21,r3,r2
	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {

		//		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		//		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

		xtemp = x * x - y * y + x0;
  a00654:	0005883a 	mov	r2,zero
  a00658:	a8a5ff72 	custom	253,r18,r21,r2
	float y = 0.0;
	float xtemp = 0.0;

	unsigned long long cycles = 0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  a0065c:	d8800017 	ldw	r2,0(sp)
  a00660:	94a7ff32 	custom	252,r19,r18,r18
  a00664:	9889ff72 	custom	253,r4,r19,r2
  a00668:	0a024040 	call	a02404 <__lesf2>
  a0066c:	00803f16 	blt	zero,r2,a0076c <drawFrame+0x278>
  a00670:	d8c00017 	ldw	r3,0(sp)
  a00674:	d8800317 	ldw	r2,12(sp)
  a00678:	05000044 	movi	r20,1
  a0067c:	1823883a 	mov	r17,r3
  a00680:	1021883a 	mov	r16,r2
  a00684:	05801904 	movi	r22,100
  a00688:	00000106 	br	a00690 <drawFrame+0x19c>
  a0068c:	a5803526 	beq	r20,r22,a00764 <drawFrame+0x270>

		//		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		//		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  a00690:	9485ff72 	custom	253,r2,r18,r18
	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {

		//		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		//		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

		xtemp = x * x - y * y + x0;
  a00694:	9c47ffb2 	custom	254,r3,r19,r17
		y = 2 * x * y + y0;
  a00698:	8085ff32 	custom	252,r2,r16,r2
	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {

		//		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		//		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

		xtemp = x * x - y * y + x0;
  a0069c:	a8c7ff72 	custom	253,r3,r21,r3
		y = 2 * x * y + y0;
  a006a0:	b8a1ff72 	custom	253,r16,r23,r2
	float y = 0.0;
	float xtemp = 0.0;

	unsigned long long cycles = 0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  a006a4:	18e7ff32 	custom	252,r19,r3,r3
  a006a8:	8423ff32 	custom	252,r17,r16,r16
  a006ac:	9c49ff72 	custom	253,r4,r19,r17
  a006b0:	01502034 	movhi	r5,16512
  a006b4:	1825883a 	mov	r18,r3
		//		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
  a006b8:	a5000044 	addi	r20,r20,1
	float y = 0.0;
	float xtemp = 0.0;

	unsigned long long cycles = 0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  a006bc:	0a024040 	call	a02404 <__lesf2>
  a006c0:	00bff20e 	bge	zero,r2,a0068c <drawFrame+0x198>
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  a006c4:	a5802726 	beq	r20,r22,a00764 <drawFrame+0x270>
	float y = 0.0;
	float xtemp = 0.0;

	unsigned long long cycles = 0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  a006c8:	a00490fa 	slli	r2,r20,3
  a006cc:	01403fc4 	movi	r5,255
  a006d0:	2880010e 	bge	r5,r2,a006d8 <drawFrame+0x1e4>
  a006d4:	2805883a 	mov	r2,r5
  a006d8:	a507883a 	add	r3,r20,r20
  a006dc:	100c923a 	slli	r6,r2,8
  a006e0:	1809883a 	mov	r4,r3
  a006e4:	28c0010e 	bge	r5,r3,a006ec <drawFrame+0x1f8>
  a006e8:	2809883a 	mov	r4,r5
  a006ec:	1d05883a 	add	r2,r3,r20
  a006f0:	2006943a 	slli	r3,r4,16
  a006f4:	2880010e 	bge	r5,r2,a006fc <drawFrame+0x208>
  a006f8:	2805883a 	mov	r2,r5
  a006fc:	1885883a 	add	r2,r3,r2
  a00700:	308b883a 	add	r5,r6,r2
		for (j = 0; j < rowSize; j++) {
			float x0 = (((float) j / (float) 320) * (maxX - minX)) + minX;

			result = mandelbrot(j, i, x0, y0);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
  a00704:	d1271217 	ldw	r4,-25528(gp)
  a00708:	d9800617 	ldw	r6,24(sp)
  a0070c:	e00f883a 	mov	r7,fp
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 239 - (float) i) / (float) 240) * (maxY - minY)) + minY;
		for (j = 0; j < rowSize; j++) {
  a00710:	e7000044 	addi	fp,fp,1
			float x0 = (((float) j / (float) 320) * (maxX - minX)) + minX;

			result = mandelbrot(j, i, x0, y0);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
  a00714:	0a0e2140 	call	a0e214 <alt_up_pixel_buffer_dma_draw>
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 239 - (float) i) / (float) 240) * (maxY - minY)) + minY;
		for (j = 0; j < rowSize; j++) {
  a00718:	00803c04 	movi	r2,240
  a0071c:	e0bfc31e 	bne	fp,r2,a0062c <drawFrame+0x138>
	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  a00720:	d8c00617 	ldw	r3,24(sp)
  a00724:	00804fc4 	movi	r2,319
  a00728:	18c00104 	addi	r3,r3,4
  a0072c:	d8c00615 	stw	r3,24(sp)
  a00730:	10ffae0e 	bge	r2,r3,a005ec <drawFrame+0xf8>
			result = mandelbrot(j, i, x0, y0);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}
}
  a00734:	dfc01017 	ldw	ra,64(sp)
  a00738:	df000f17 	ldw	fp,60(sp)
  a0073c:	ddc00e17 	ldw	r23,56(sp)
  a00740:	dd800d17 	ldw	r22,52(sp)
  a00744:	dd400c17 	ldw	r21,48(sp)
  a00748:	dd000b17 	ldw	r20,44(sp)
  a0074c:	dcc00a17 	ldw	r19,40(sp)
  a00750:	dc800917 	ldw	r18,36(sp)
  a00754:	dc400817 	ldw	r17,32(sp)
  a00758:	dc000717 	ldw	r16,28(sp)
  a0075c:	dec01104 	addi	sp,sp,68
  a00760:	f800283a 	ret
	float y = 0.0;
	float xtemp = 0.0;

	unsigned long long cycles = 0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  a00764:	000b883a 	mov	r5,zero
  a00768:	003fe606 	br	a00704 <drawFrame+0x210>
  a0076c:	014000b4 	movhi	r5,2
  a00770:	294200c4 	addi	r5,r5,2051
  a00774:	003fe306 	br	a00704 <drawFrame+0x210>

00a00778 <main>:
#define key1 6
#define key0 7

#define FIXED_POINT

int main() {
  a00778:	defffd04 	addi	sp,sp,-12
  a0077c:	dfc00215 	stw	ra,8(sp)
  a00780:	dc400115 	stw	r17,4(sp)
  a00784:	dc000015 	stw	r16,0(sp)

	setup();
  a00788:	0a004c40 	call	a004c4 <setup>
	printf("Program running (UART)...\n");
  a0078c:	01002874 	movhi	r4,161
  a00790:	2102c604 	addi	r4,r4,2840
  a00794:	0a038480 	call	a03848 <puts>
	int cpu = __builtin_rdctl(5);
  a00798:	000b317a 	rdctl	r5,cpuid
	printf("cpu %d\n", cpu);
  a0079c:	01002874 	movhi	r4,161
  a007a0:	2102cd04 	addi	r4,r4,2868
  a007a4:	0a037300 	call	a03730 <printf>
	//	unsigned long long cycles = 0;
	clearScreen();
  a007a8:	0a003400 	call	a00340 <clearScreen>
	while (1) {
		int zoom;
		for (zoom = 1; zoom <= 100; zoom++) {
			//				PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
			//				PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
			clearScreen();
  a007ac:	0a003400 	call	a00340 <clearScreen>
			drawFrame(zoom);
  a007b0:	01000044 	movi	r4,1
  a007b4:	0a004f40 	call	a004f4 <drawFrame>
			barrier(0);
  a007b8:	0009883a 	mov	r4,zero
  a007bc:	0a0034c0 	call	a0034c <barrier>
  a007c0:	04401904 	movi	r17,100
  a007c4:	00800084 	movi	r2,2
  a007c8:	1021883a 	mov	r16,r2
	while (1) {
		int zoom;
		for (zoom = 1; zoom <= 100; zoom++) {
			//				PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
			//				PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
			clearScreen();
  a007cc:	0a003400 	call	a00340 <clearScreen>
			drawFrame(zoom);
  a007d0:	8009883a 	mov	r4,r16
  a007d4:	0a004f40 	call	a004f4 <drawFrame>
			barrier(0);
  a007d8:	0009883a 	mov	r4,zero
  a007dc:	0a0034c0 	call	a0034c <barrier>
	clearScreen();
	//	drawFullSet();
	//the main program loop
	while (1) {
		int zoom;
		for (zoom = 1; zoom <= 100; zoom++) {
  a007e0:	80800044 	addi	r2,r16,1
  a007e4:	04000044 	movi	r16,1
  a007e8:	88bff816 	blt	r17,r2,a007cc <main+0x54>
  a007ec:	003ff606 	br	a007c8 <main+0x50>

00a007f0 <powf>:
  a007f0:	defff104 	addi	sp,sp,-60
  a007f4:	dd000d15 	stw	r20,52(sp)
  a007f8:	dcc00c15 	stw	r19,48(sp)
  a007fc:	dc800b15 	stw	r18,44(sp)
  a00800:	dc400a15 	stw	r17,40(sp)
  a00804:	dc000915 	stw	r16,36(sp)
  a00808:	dfc00e15 	stw	ra,56(sp)
  a0080c:	05002874 	movhi	r20,161
  a00810:	a50ad004 	addi	r20,r20,11072
  a00814:	2027883a 	mov	r19,r4
  a00818:	2825883a 	mov	r18,r5
  a0081c:	0a00c480 	call	a00c48 <__ieee754_powf>
  a00820:	1021883a 	mov	r16,r2
  a00824:	a0800017 	ldw	r2,0(r20)
  a00828:	047fffc4 	movi	r17,-1
  a0082c:	14400326 	beq	r2,r17,a0083c <powf+0x4c>
  a00830:	9009883a 	mov	r4,r18
  a00834:	0a01b0c0 	call	a01b0c <isnanf>
  a00838:	10000926 	beq	r2,zero,a00860 <powf+0x70>
  a0083c:	8005883a 	mov	r2,r16
  a00840:	dfc00e17 	ldw	ra,56(sp)
  a00844:	dd000d17 	ldw	r20,52(sp)
  a00848:	dcc00c17 	ldw	r19,48(sp)
  a0084c:	dc800b17 	ldw	r18,44(sp)
  a00850:	dc400a17 	ldw	r17,40(sp)
  a00854:	dc000917 	ldw	r16,36(sp)
  a00858:	dec00f04 	addi	sp,sp,60
  a0085c:	f800283a 	ret
  a00860:	9809883a 	mov	r4,r19
  a00864:	0a01b0c0 	call	a01b0c <isnanf>
  a00868:	1000151e 	bne	r2,zero,a008c0 <powf+0xd0>
  a0086c:	9809883a 	mov	r4,r19
  a00870:	000b883a 	mov	r5,zero
  a00874:	0a0229c0 	call	a0229c <__eqsf2>
  a00878:	10005a1e 	bne	r2,zero,a009e4 <powf+0x1f4>
  a0087c:	9009883a 	mov	r4,r18
  a00880:	000b883a 	mov	r5,zero
  a00884:	0a0229c0 	call	a0229c <__eqsf2>
  a00888:	1000331e 	bne	r2,zero,a00958 <powf+0x168>
  a0088c:	a0800017 	ldw	r2,0(r20)
  a00890:	d8000615 	stw	zero,24(sp)
  a00894:	d8000715 	stw	zero,28(sp)
  a00898:	10001426 	beq	r2,zero,a008ec <powf+0xfc>
  a0089c:	008ffc34 	movhi	r2,16368
  a008a0:	d8800715 	stw	r2,28(sp)
  a008a4:	d8800617 	ldw	r2,24(sp)
  a008a8:	d8c00717 	ldw	r3,28(sp)
  a008ac:	1009883a 	mov	r4,r2
  a008b0:	180b883a 	mov	r5,r3
  a008b4:	0a02d840 	call	a02d84 <__truncdfsf2>
  a008b8:	1021883a 	mov	r16,r2
  a008bc:	003fdf06 	br	a0083c <powf+0x4c>
  a008c0:	9009883a 	mov	r4,r18
  a008c4:	000b883a 	mov	r5,zero
  a008c8:	0a0229c0 	call	a0229c <__eqsf2>
  a008cc:	103fdb1e 	bne	r2,zero,a0083c <powf+0x4c>
  a008d0:	a0c00017 	ldw	r3,0(r20)
  a008d4:	010ffc34 	movhi	r4,16368
  a008d8:	d8000615 	stw	zero,24(sp)
  a008dc:	d9000715 	stw	r4,28(sp)
  a008e0:	1c401a26 	beq	r3,r17,a0094c <powf+0x15c>
  a008e4:	00800084 	movi	r2,2
  a008e8:	18801826 	beq	r3,r2,a0094c <powf+0x15c>
  a008ec:	9009883a 	mov	r4,r18
  a008f0:	0a025140 	call	a02514 <__extendsfdf2>
  a008f4:	9809883a 	mov	r4,r19
  a008f8:	d8c00515 	stw	r3,20(sp)
  a008fc:	d8800415 	stw	r2,16(sp)
  a00900:	0a025140 	call	a02514 <__extendsfdf2>
  a00904:	100b883a 	mov	r5,r2
  a00908:	d8c00315 	stw	r3,12(sp)
  a0090c:	00802874 	movhi	r2,161
  a00910:	1082cf04 	addi	r2,r2,2876
  a00914:	00c00044 	movi	r3,1
  a00918:	d809883a 	mov	r4,sp
  a0091c:	d8800115 	stw	r2,4(sp)
  a00920:	d8c00015 	stw	r3,0(sp)
  a00924:	d9400215 	stw	r5,8(sp)
  a00928:	d8000815 	stw	zero,32(sp)
  a0092c:	0a018c80 	call	a018c8 <matherr>
  a00930:	10002826 	beq	r2,zero,a009d4 <powf+0x1e4>
  a00934:	d8800817 	ldw	r2,32(sp)
  a00938:	103fda26 	beq	r2,zero,a008a4 <powf+0xb4>
  a0093c:	0a037200 	call	a03720 <__errno>
  a00940:	d8c00817 	ldw	r3,32(sp)
  a00944:	10c00015 	stw	r3,0(r2)
  a00948:	003fd606 	br	a008a4 <powf+0xb4>
  a0094c:	d9000715 	stw	r4,28(sp)
  a00950:	d8000615 	stw	zero,24(sp)
  a00954:	003fd306 	br	a008a4 <powf+0xb4>
  a00958:	9009883a 	mov	r4,r18
  a0095c:	0a01af00 	call	a01af0 <finitef>
  a00960:	103fb626 	beq	r2,zero,a0083c <powf+0x4c>
  a00964:	9009883a 	mov	r4,r18
  a00968:	000b883a 	mov	r5,zero
  a0096c:	0a0238c0 	call	a0238c <__ltsf2>
  a00970:	103fb20e 	bge	r2,zero,a0083c <powf+0x4c>
  a00974:	9809883a 	mov	r4,r19
  a00978:	00800044 	movi	r2,1
  a0097c:	00c02874 	movhi	r3,161
  a00980:	18c2cf04 	addi	r3,r3,2876
  a00984:	d8800015 	stw	r2,0(sp)
  a00988:	d8c00115 	stw	r3,4(sp)
  a0098c:	d8000815 	stw	zero,32(sp)
  a00990:	0a025140 	call	a02514 <__extendsfdf2>
  a00994:	9009883a 	mov	r4,r18
  a00998:	d8c00315 	stw	r3,12(sp)
  a0099c:	d8800215 	stw	r2,8(sp)
  a009a0:	0a025140 	call	a02514 <__extendsfdf2>
  a009a4:	a1800017 	ldw	r6,0(r20)
  a009a8:	d8c00515 	stw	r3,20(sp)
  a009ac:	d8800415 	stw	r2,16(sp)
  a009b0:	30005626 	beq	r6,zero,a00b0c <powf+0x31c>
  a009b4:	00bffc34 	movhi	r2,65520
  a009b8:	d8800715 	stw	r2,28(sp)
  a009bc:	00800084 	movi	r2,2
  a009c0:	d8000615 	stw	zero,24(sp)
  a009c4:	30800326 	beq	r6,r2,a009d4 <powf+0x1e4>
  a009c8:	d809883a 	mov	r4,sp
  a009cc:	0a018c80 	call	a018c8 <matherr>
  a009d0:	103fd81e 	bne	r2,zero,a00934 <powf+0x144>
  a009d4:	0a037200 	call	a03720 <__errno>
  a009d8:	00c00844 	movi	r3,33
  a009dc:	10c00015 	stw	r3,0(r2)
  a009e0:	003fd406 	br	a00934 <powf+0x144>
  a009e4:	8009883a 	mov	r4,r16
  a009e8:	0a01af00 	call	a01af0 <finitef>
  a009ec:	10002426 	beq	r2,zero,a00a80 <powf+0x290>
  a009f0:	8009883a 	mov	r4,r16
  a009f4:	000b883a 	mov	r5,zero
  a009f8:	0a0229c0 	call	a0229c <__eqsf2>
  a009fc:	103f8f1e 	bne	r2,zero,a0083c <powf+0x4c>
  a00a00:	9809883a 	mov	r4,r19
  a00a04:	0a01af00 	call	a01af0 <finitef>
  a00a08:	103f8c26 	beq	r2,zero,a0083c <powf+0x4c>
  a00a0c:	9009883a 	mov	r4,r18
  a00a10:	0a01af00 	call	a01af0 <finitef>
  a00a14:	103f8926 	beq	r2,zero,a0083c <powf+0x4c>
  a00a18:	9809883a 	mov	r4,r19
  a00a1c:	00800104 	movi	r2,4
  a00a20:	00c02874 	movhi	r3,161
  a00a24:	18c2cf04 	addi	r3,r3,2876
  a00a28:	d8800015 	stw	r2,0(sp)
  a00a2c:	d8c00115 	stw	r3,4(sp)
  a00a30:	d8000815 	stw	zero,32(sp)
  a00a34:	0a025140 	call	a02514 <__extendsfdf2>
  a00a38:	9009883a 	mov	r4,r18
  a00a3c:	d8c00315 	stw	r3,12(sp)
  a00a40:	d8800215 	stw	r2,8(sp)
  a00a44:	0a025140 	call	a02514 <__extendsfdf2>
  a00a48:	a1800017 	ldw	r6,0(r20)
  a00a4c:	d8800415 	stw	r2,16(sp)
  a00a50:	00800084 	movi	r2,2
  a00a54:	d8c00515 	stw	r3,20(sp)
  a00a58:	d8000615 	stw	zero,24(sp)
  a00a5c:	d8000715 	stw	zero,28(sp)
  a00a60:	30800326 	beq	r6,r2,a00a70 <powf+0x280>
  a00a64:	d809883a 	mov	r4,sp
  a00a68:	0a018c80 	call	a018c8 <matherr>
  a00a6c:	103fb11e 	bne	r2,zero,a00934 <powf+0x144>
  a00a70:	0a037200 	call	a03720 <__errno>
  a00a74:	00c00884 	movi	r3,34
  a00a78:	10c00015 	stw	r3,0(r2)
  a00a7c:	003fad06 	br	a00934 <powf+0x144>
  a00a80:	9809883a 	mov	r4,r19
  a00a84:	0a01af00 	call	a01af0 <finitef>
  a00a88:	103fd926 	beq	r2,zero,a009f0 <powf+0x200>
  a00a8c:	9009883a 	mov	r4,r18
  a00a90:	0a01af00 	call	a01af0 <finitef>
  a00a94:	103fd626 	beq	r2,zero,a009f0 <powf+0x200>
  a00a98:	8009883a 	mov	r4,r16
  a00a9c:	0a01b0c0 	call	a01b0c <isnanf>
  a00aa0:	10001d26 	beq	r2,zero,a00b18 <powf+0x328>
  a00aa4:	9809883a 	mov	r4,r19
  a00aa8:	00800044 	movi	r2,1
  a00aac:	00c02874 	movhi	r3,161
  a00ab0:	18c2cf04 	addi	r3,r3,2876
  a00ab4:	d8800015 	stw	r2,0(sp)
  a00ab8:	d8c00115 	stw	r3,4(sp)
  a00abc:	d8000815 	stw	zero,32(sp)
  a00ac0:	0a025140 	call	a02514 <__extendsfdf2>
  a00ac4:	9009883a 	mov	r4,r18
  a00ac8:	d8c00315 	stw	r3,12(sp)
  a00acc:	d8800215 	stw	r2,8(sp)
  a00ad0:	0a025140 	call	a02514 <__extendsfdf2>
  a00ad4:	a4000017 	ldw	r16,0(r20)
  a00ad8:	d8c00515 	stw	r3,20(sp)
  a00adc:	d8800415 	stw	r2,16(sp)
  a00ae0:	80000a26 	beq	r16,zero,a00b0c <powf+0x31c>
  a00ae4:	0009883a 	mov	r4,zero
  a00ae8:	000d883a 	mov	r6,zero
  a00aec:	000b883a 	mov	r5,zero
  a00af0:	000f883a 	mov	r7,zero
  a00af4:	0a02a6c0 	call	a02a6c <__divdf3>
  a00af8:	d8800615 	stw	r2,24(sp)
  a00afc:	00800084 	movi	r2,2
  a00b00:	d8c00715 	stw	r3,28(sp)
  a00b04:	80bfb01e 	bne	r16,r2,a009c8 <powf+0x1d8>
  a00b08:	003fb206 	br	a009d4 <powf+0x1e4>
  a00b0c:	d8000615 	stw	zero,24(sp)
  a00b10:	d8000715 	stw	zero,28(sp)
  a00b14:	003fac06 	br	a009c8 <powf+0x1d8>
  a00b18:	9809883a 	mov	r4,r19
  a00b1c:	008000c4 	movi	r2,3
  a00b20:	00c02874 	movhi	r3,161
  a00b24:	18c2cf04 	addi	r3,r3,2876
  a00b28:	d8800015 	stw	r2,0(sp)
  a00b2c:	d8c00115 	stw	r3,4(sp)
  a00b30:	d8000815 	stw	zero,32(sp)
  a00b34:	0a025140 	call	a02514 <__extendsfdf2>
  a00b38:	9009883a 	mov	r4,r18
  a00b3c:	d8c00315 	stw	r3,12(sp)
  a00b40:	d8800215 	stw	r2,8(sp)
  a00b44:	0a025140 	call	a02514 <__extendsfdf2>
  a00b48:	a1800017 	ldw	r6,0(r20)
  a00b4c:	d8c00515 	stw	r3,20(sp)
  a00b50:	d8800415 	stw	r2,16(sp)
  a00b54:	3000211e 	bne	r6,zero,a00bdc <powf+0x3ec>
  a00b58:	9809883a 	mov	r4,r19
  a00b5c:	0091fc34 	movhi	r2,18416
  a00b60:	10bfffc4 	addi	r2,r2,-1
  a00b64:	04f80034 	movhi	r19,57344
  a00b68:	000b883a 	mov	r5,zero
  a00b6c:	d8800715 	stw	r2,28(sp)
  a00b70:	dcc00615 	stw	r19,24(sp)
  a00b74:	0a0238c0 	call	a0238c <__ltsf2>
  a00b78:	103fba0e 	bge	r2,zero,a00a64 <powf+0x274>
  a00b7c:	014fc034 	movhi	r5,16128
  a00b80:	9009883a 	mov	r4,r18
  a00b84:	0a01f480 	call	a01f48 <__mulsf3>
  a00b88:	1009883a 	mov	r4,r2
  a00b8c:	0a025140 	call	a02514 <__extendsfdf2>
  a00b90:	1009883a 	mov	r4,r2
  a00b94:	180b883a 	mov	r5,r3
  a00b98:	1021883a 	mov	r16,r2
  a00b9c:	1823883a 	mov	r17,r3
  a00ba0:	0a018d00 	call	a018d0 <rint>
  a00ba4:	180f883a 	mov	r7,r3
  a00ba8:	880b883a 	mov	r5,r17
  a00bac:	8009883a 	mov	r4,r16
  a00bb0:	100d883a 	mov	r6,r2
  a00bb4:	0a02cc40 	call	a02cc4 <__nedf2>
  a00bb8:	10000426 	beq	r2,zero,a00bcc <powf+0x3dc>
  a00bbc:	00b1fc34 	movhi	r2,51184
  a00bc0:	10bfffc4 	addi	r2,r2,-1
  a00bc4:	dcc00615 	stw	r19,24(sp)
  a00bc8:	d8800715 	stw	r2,28(sp)
  a00bcc:	a0c00017 	ldw	r3,0(r20)
  a00bd0:	00800084 	movi	r2,2
  a00bd4:	18bfa31e 	bne	r3,r2,a00a64 <powf+0x274>
  a00bd8:	003fa506 	br	a00a70 <powf+0x280>
  a00bdc:	009ffc34 	movhi	r2,32752
  a00be0:	9809883a 	mov	r4,r19
  a00be4:	000b883a 	mov	r5,zero
  a00be8:	d8800715 	stw	r2,28(sp)
  a00bec:	d8000615 	stw	zero,24(sp)
  a00bf0:	0a0238c0 	call	a0238c <__ltsf2>
  a00bf4:	103ff50e 	bge	r2,zero,a00bcc <powf+0x3dc>
  a00bf8:	014fc034 	movhi	r5,16128
  a00bfc:	9009883a 	mov	r4,r18
  a00c00:	0a01f480 	call	a01f48 <__mulsf3>
  a00c04:	1009883a 	mov	r4,r2
  a00c08:	0a025140 	call	a02514 <__extendsfdf2>
  a00c0c:	1009883a 	mov	r4,r2
  a00c10:	180b883a 	mov	r5,r3
  a00c14:	1021883a 	mov	r16,r2
  a00c18:	1823883a 	mov	r17,r3
  a00c1c:	0a018d00 	call	a018d0 <rint>
  a00c20:	180f883a 	mov	r7,r3
  a00c24:	880b883a 	mov	r5,r17
  a00c28:	8009883a 	mov	r4,r16
  a00c2c:	100d883a 	mov	r6,r2
  a00c30:	0a02cc40 	call	a02cc4 <__nedf2>
  a00c34:	103fe526 	beq	r2,zero,a00bcc <powf+0x3dc>
  a00c38:	00bffc34 	movhi	r2,65520
  a00c3c:	d8800715 	stw	r2,28(sp)
  a00c40:	d8000615 	stw	zero,24(sp)
  a00c44:	003fe106 	br	a00bcc <powf+0x3dc>

00a00c48 <__ieee754_powf>:
  a00c48:	defff004 	addi	sp,sp,-64
  a00c4c:	00a00034 	movhi	r2,32768
  a00c50:	10bfffc4 	addi	r2,r2,-1
  a00c54:	dc000615 	stw	r16,24(sp)
  a00c58:	28a0703a 	and	r16,r5,r2
  a00c5c:	df000e15 	stw	fp,56(sp)
  a00c60:	dcc00915 	stw	r19,36(sp)
  a00c64:	dc800815 	stw	r18,32(sp)
  a00c68:	2027883a 	mov	r19,r4
  a00c6c:	dfc00f15 	stw	ra,60(sp)
  a00c70:	ddc00d15 	stw	r23,52(sp)
  a00c74:	dd800c15 	stw	r22,48(sp)
  a00c78:	dd400b15 	stw	r21,44(sp)
  a00c7c:	dd000a15 	stw	r20,40(sp)
  a00c80:	dc400715 	stw	r17,28(sp)
  a00c84:	2839883a 	mov	fp,r5
  a00c88:	2825883a 	mov	r18,r5
  a00c8c:	2809883a 	mov	r4,r5
  a00c90:	80003526 	beq	r16,zero,a00d68 <__ieee754_powf+0x120>
  a00c94:	98a2703a 	and	r17,r19,r2
  a00c98:	009fe034 	movhi	r2,32640
  a00c9c:	9829883a 	mov	r20,r19
  a00ca0:	1440100e 	bge	r2,r17,a00ce4 <__ieee754_powf+0x9c>
  a00ca4:	008fe034 	movhi	r2,16256
  a00ca8:	88803d26 	beq	r17,r2,a00da0 <__ieee754_powf+0x158>
  a00cac:	01002874 	movhi	r4,161
  a00cb0:	21032f04 	addi	r4,r4,3260
  a00cb4:	dfc00f17 	ldw	ra,60(sp)
  a00cb8:	df000e17 	ldw	fp,56(sp)
  a00cbc:	ddc00d17 	ldw	r23,52(sp)
  a00cc0:	dd800c17 	ldw	r22,48(sp)
  a00cc4:	dd400b17 	ldw	r21,44(sp)
  a00cc8:	dd000a17 	ldw	r20,40(sp)
  a00ccc:	dcc00917 	ldw	r19,36(sp)
  a00cd0:	dc800817 	ldw	r18,32(sp)
  a00cd4:	dc400717 	ldw	r17,28(sp)
  a00cd8:	dc000617 	ldw	r16,24(sp)
  a00cdc:	dec01004 	addi	sp,sp,64
  a00ce0:	0a01b241 	jmpi	a01b24 <nanf>
  a00ce4:	143fef16 	blt	r2,r16,a00ca4 <__ieee754_powf+0x5c>
  a00ce8:	982a403a 	cmpge	r21,r19,zero
  a00cec:	a8004526 	beq	r21,zero,a00e04 <__ieee754_powf+0x1bc>
  a00cf0:	002f883a 	mov	r23,zero
  a00cf4:	009fe034 	movhi	r2,32640
  a00cf8:	80803926 	beq	r16,r2,a00de0 <__ieee754_powf+0x198>
  a00cfc:	008fe034 	movhi	r2,16256
  a00d00:	80803d26 	beq	r16,r2,a00df8 <__ieee754_powf+0x1b0>
  a00d04:	00900034 	movhi	r2,16384
  a00d08:	20805326 	beq	r4,r2,a00e58 <__ieee754_powf+0x210>
  a00d0c:	008fc034 	movhi	r2,16128
  a00d10:	20802526 	beq	r4,r2,a00da8 <__ieee754_powf+0x160>
  a00d14:	9809883a 	mov	r4,r19
  a00d18:	0a01ae00 	call	a01ae0 <fabsf>
  a00d1c:	1009883a 	mov	r4,r2
  a00d20:	009fe034 	movhi	r2,32640
  a00d24:	88803c26 	beq	r17,r2,a00e18 <__ieee754_powf+0x1d0>
  a00d28:	88003b26 	beq	r17,zero,a00e18 <__ieee754_powf+0x1d0>
  a00d2c:	014fe034 	movhi	r5,16256
  a00d30:	89403926 	beq	r17,r5,a00e18 <__ieee754_powf+0x1d0>
  a00d34:	a004d7fa 	srli	r2,r20,31
  a00d38:	10bfffc4 	addi	r2,r2,-1
  a00d3c:	15c6b03a 	or	r3,r2,r23
  a00d40:	d8800215 	stw	r2,8(sp)
  a00d44:	1800661e 	bne	r3,zero,a00ee0 <__ieee754_powf+0x298>
  a00d48:	980b883a 	mov	r5,r19
  a00d4c:	9809883a 	mov	r4,r19
  a00d50:	0a01e740 	call	a01e74 <__subsf3>
  a00d54:	1009883a 	mov	r4,r2
  a00d58:	100b883a 	mov	r5,r2
  a00d5c:	0a021280 	call	a02128 <__divsf3>
  a00d60:	1039883a 	mov	fp,r2
  a00d64:	00000106 	br	a00d6c <__ieee754_powf+0x124>
  a00d68:	070fe034 	movhi	fp,16256
  a00d6c:	e005883a 	mov	r2,fp
  a00d70:	dfc00f17 	ldw	ra,60(sp)
  a00d74:	df000e17 	ldw	fp,56(sp)
  a00d78:	ddc00d17 	ldw	r23,52(sp)
  a00d7c:	dd800c17 	ldw	r22,48(sp)
  a00d80:	dd400b17 	ldw	r21,44(sp)
  a00d84:	dd000a17 	ldw	r20,40(sp)
  a00d88:	dcc00917 	ldw	r19,36(sp)
  a00d8c:	dc800817 	ldw	r18,32(sp)
  a00d90:	dc400717 	ldw	r17,28(sp)
  a00d94:	dc000617 	ldw	r16,24(sp)
  a00d98:	dec01004 	addi	sp,sp,64
  a00d9c:	f800283a 	ret
  a00da0:	8839883a 	mov	fp,r17
  a00da4:	003ff106 	br	a00d6c <__ieee754_powf+0x124>
  a00da8:	a03fda16 	blt	r20,zero,a00d14 <__ieee754_powf+0xcc>
  a00dac:	9809883a 	mov	r4,r19
  a00db0:	dfc00f17 	ldw	ra,60(sp)
  a00db4:	df000e17 	ldw	fp,56(sp)
  a00db8:	ddc00d17 	ldw	r23,52(sp)
  a00dbc:	dd800c17 	ldw	r22,48(sp)
  a00dc0:	dd400b17 	ldw	r21,44(sp)
  a00dc4:	dd000a17 	ldw	r20,40(sp)
  a00dc8:	dcc00917 	ldw	r19,36(sp)
  a00dcc:	dc800817 	ldw	r18,32(sp)
  a00dd0:	dc400717 	ldw	r17,28(sp)
  a00dd4:	dc000617 	ldw	r16,24(sp)
  a00dd8:	dec01004 	addi	sp,sp,64
  a00ddc:	0a0175c1 	jmpi	a0175c <__ieee754_sqrtf>
  a00de0:	008fe034 	movhi	r2,16256
  a00de4:	88bfee26 	beq	r17,r2,a00da0 <__ieee754_powf+0x158>
  a00de8:	1440200e 	bge	r2,r17,a00e6c <__ieee754_powf+0x224>
  a00dec:	903fdf0e 	bge	r18,zero,a00d6c <__ieee754_powf+0x124>
  a00df0:	0039883a 	mov	fp,zero
  a00df4:	003fdd06 	br	a00d6c <__ieee754_powf+0x124>
  a00df8:	90002f16 	blt	r18,zero,a00eb8 <__ieee754_powf+0x270>
  a00dfc:	9839883a 	mov	fp,r19
  a00e00:	003fda06 	br	a00d6c <__ieee754_powf+0x124>
  a00e04:	0092e034 	movhi	r2,19328
  a00e08:	10bfffc4 	addi	r2,r2,-1
  a00e0c:	14001b0e 	bge	r2,r16,a00e7c <__ieee754_powf+0x234>
  a00e10:	05c00084 	movi	r23,2
  a00e14:	003fb706 	br	a00cf4 <__ieee754_powf+0xac>
  a00e18:	90000916 	blt	r18,zero,a00e40 <__ieee754_powf+0x1f8>
  a00e1c:	a8000226 	beq	r21,zero,a00e28 <__ieee754_powf+0x1e0>
  a00e20:	2039883a 	mov	fp,r4
  a00e24:	003fd106 	br	a00d6c <__ieee754_powf+0x124>
  a00e28:	00b02034 	movhi	r2,49280
  a00e2c:	8885883a 	add	r2,r17,r2
  a00e30:	b884b03a 	or	r2,r23,r2
  a00e34:	1000251e 	bne	r2,zero,a00ecc <__ieee754_powf+0x284>
  a00e38:	200b883a 	mov	r5,r4
  a00e3c:	003fc406 	br	a00d50 <__ieee754_powf+0x108>
  a00e40:	200b883a 	mov	r5,r4
  a00e44:	010fe034 	movhi	r4,16256
  a00e48:	0a021280 	call	a02128 <__divsf3>
  a00e4c:	1009883a 	mov	r4,r2
  a00e50:	a83ff31e 	bne	r21,zero,a00e20 <__ieee754_powf+0x1d8>
  a00e54:	003ff406 	br	a00e28 <__ieee754_powf+0x1e0>
  a00e58:	980b883a 	mov	r5,r19
  a00e5c:	9809883a 	mov	r4,r19
  a00e60:	0a01f480 	call	a01f48 <__mulsf3>
  a00e64:	1039883a 	mov	fp,r2
  a00e68:	003fc006 	br	a00d6c <__ieee754_powf+0x124>
  a00e6c:	903fe00e 	bge	r18,zero,a00df0 <__ieee754_powf+0x1a8>
  a00e70:	e0a0003c 	xorhi	r2,fp,32768
  a00e74:	1039883a 	mov	fp,r2
  a00e78:	003fbc06 	br	a00d6c <__ieee754_powf+0x124>
  a00e7c:	008fe034 	movhi	r2,16256
  a00e80:	10bfffc4 	addi	r2,r2,-1
  a00e84:	1400060e 	bge	r2,r16,a00ea0 <__ieee754_powf+0x258>
  a00e88:	8007d5fa 	srai	r3,r16,23
  a00e8c:	00802584 	movi	r2,150
  a00e90:	10c5c83a 	sub	r2,r2,r3
  a00e94:	8087d83a 	sra	r3,r16,r2
  a00e98:	1884983a 	sll	r2,r3,r2
  a00e9c:	80800226 	beq	r16,r2,a00ea8 <__ieee754_powf+0x260>
  a00ea0:	002f883a 	mov	r23,zero
  a00ea4:	003f9506 	br	a00cfc <__ieee754_powf+0xb4>
  a00ea8:	18c0004c 	andi	r3,r3,1
  a00eac:	00800084 	movi	r2,2
  a00eb0:	10efc83a 	sub	r23,r2,r3
  a00eb4:	003f9106 	br	a00cfc <__ieee754_powf+0xb4>
  a00eb8:	8009883a 	mov	r4,r16
  a00ebc:	980b883a 	mov	r5,r19
  a00ec0:	0a021280 	call	a02128 <__divsf3>
  a00ec4:	1039883a 	mov	fp,r2
  a00ec8:	003fa806 	br	a00d6c <__ieee754_powf+0x124>
  a00ecc:	00800044 	movi	r2,1
  a00ed0:	b8bfd31e 	bne	r23,r2,a00e20 <__ieee754_powf+0x1d8>
  a00ed4:	20a0003c 	xorhi	r2,r4,32768
  a00ed8:	1039883a 	mov	fp,r2
  a00edc:	003fa306 	br	a00d6c <__ieee754_powf+0x124>
  a00ee0:	00934034 	movhi	r2,19712
  a00ee4:	14000a0e 	bge	r2,r16,a00f10 <__ieee754_powf+0x2c8>
  a00ee8:	008fe034 	movhi	r2,16256
  a00eec:	10bffdc4 	addi	r2,r2,-9
  a00ef0:	1441b016 	blt	r2,r17,a015b4 <__ieee754_powf+0x96c>
  a00ef4:	903fbe0e 	bge	r18,zero,a00df0 <__ieee754_powf+0x1a8>
  a00ef8:	011c52b4 	movhi	r4,29002
  a00efc:	213cb284 	addi	r4,r4,-3382
  a00f00:	200b883a 	mov	r5,r4
  a00f04:	0a01f480 	call	a01f48 <__mulsf3>
  a00f08:	1039883a 	mov	fp,r2
  a00f0c:	003f9706 	br	a00d6c <__ieee754_powf+0x124>
  a00f10:	00802034 	movhi	r2,128
  a00f14:	10bfffc4 	addi	r2,r2,-1
  a00f18:	1441a10e 	bge	r2,r17,a015a0 <__ieee754_powf+0x958>
  a00f1c:	0009883a 	mov	r4,zero
  a00f20:	8805d5fa 	srai	r2,r17,23
  a00f24:	00c02034 	movhi	r3,128
  a00f28:	18ffffc4 	addi	r3,r3,-1
  a00f2c:	88c6703a 	and	r3,r17,r3
  a00f30:	2089883a 	add	r4,r4,r2
  a00f34:	20bfe044 	addi	r2,r4,-127
  a00f38:	d8800015 	stw	r2,0(sp)
  a00f3c:	00800774 	movhi	r2,29
  a00f40:	10b11c44 	addi	r2,r2,-15247
  a00f44:	1c0fe034 	orhi	r16,r3,16256
  a00f48:	10c1790e 	bge	r2,r3,a01530 <__ieee754_powf+0x8e8>
  a00f4c:	008017b4 	movhi	r2,94
  a00f50:	10acf584 	addi	r2,r2,-19498
  a00f54:	10c17216 	blt	r2,r3,a01520 <__ieee754_powf+0x8d8>
  a00f58:	00800934 	movhi	r2,36
  a00f5c:	05000044 	movi	r20,1
  a00f60:	d8800115 	stw	r2,4(sp)
  a00f64:	a529883a 	add	r20,r20,r20
  a00f68:	a529883a 	add	r20,r20,r20
  a00f6c:	d0a00204 	addi	r2,gp,-32760
  a00f70:	a085883a 	add	r2,r20,r2
  a00f74:	14800017 	ldw	r18,0(r2)
  a00f78:	8009883a 	mov	r4,r16
  a00f7c:	8023d07a 	srai	r17,r16,1
  a00f80:	900b883a 	mov	r5,r18
  a00f84:	0a01e740 	call	a01e74 <__subsf3>
  a00f88:	8009883a 	mov	r4,r16
  a00f8c:	900b883a 	mov	r5,r18
  a00f90:	1027883a 	mov	r19,r2
  a00f94:	0a01ee40 	call	a01ee4 <__addsf3>
  a00f98:	100b883a 	mov	r5,r2
  a00f9c:	010fe034 	movhi	r4,16256
  a00fa0:	0a021280 	call	a02128 <__divsf3>
  a00fa4:	100b883a 	mov	r5,r2
  a00fa8:	9809883a 	mov	r4,r19
  a00fac:	102b883a 	mov	r21,r2
  a00fb0:	0a01f480 	call	a01f48 <__mulsf3>
  a00fb4:	d8800315 	stw	r2,12(sp)
  a00fb8:	d8c00317 	ldw	r3,12(sp)
  a00fbc:	00bc0004 	movi	r2,-4096
  a00fc0:	8c480034 	orhi	r17,r17,8192
  a00fc4:	10ec703a 	and	r22,r2,r3
  a00fc8:	d8800117 	ldw	r2,4(sp)
  a00fcc:	b009883a 	mov	r4,r22
  a00fd0:	88a3883a 	add	r17,r17,r2
  a00fd4:	880b883a 	mov	r5,r17
  a00fd8:	0a01f480 	call	a01f48 <__mulsf3>
  a00fdc:	100b883a 	mov	r5,r2
  a00fe0:	9809883a 	mov	r4,r19
  a00fe4:	0a01e740 	call	a01e74 <__subsf3>
  a00fe8:	8809883a 	mov	r4,r17
  a00fec:	900b883a 	mov	r5,r18
  a00ff0:	1027883a 	mov	r19,r2
  a00ff4:	0a01e740 	call	a01e74 <__subsf3>
  a00ff8:	100b883a 	mov	r5,r2
  a00ffc:	8009883a 	mov	r4,r16
  a01000:	0a01e740 	call	a01e74 <__subsf3>
  a01004:	100b883a 	mov	r5,r2
  a01008:	b009883a 	mov	r4,r22
  a0100c:	0a01f480 	call	a01f48 <__mulsf3>
  a01010:	100b883a 	mov	r5,r2
  a01014:	9809883a 	mov	r4,r19
  a01018:	0a01e740 	call	a01e74 <__subsf3>
  a0101c:	100b883a 	mov	r5,r2
  a01020:	a809883a 	mov	r4,r21
  a01024:	0a01f480 	call	a01f48 <__mulsf3>
  a01028:	d9000317 	ldw	r4,12(sp)
  a0102c:	d8800415 	stw	r2,16(sp)
  a01030:	05501034 	movhi	r21,16448
  a01034:	200b883a 	mov	r5,r4
  a01038:	0a01f480 	call	a01f48 <__mulsf3>
  a0103c:	1021883a 	mov	r16,r2
  a01040:	1009883a 	mov	r4,r2
  a01044:	100b883a 	mov	r5,r2
  a01048:	0a01f480 	call	a01f48 <__mulsf3>
  a0104c:	8009883a 	mov	r4,r16
  a01050:	014f9534 	movhi	r5,15956
  a01054:	297c5084 	addi	r5,r5,-3774
  a01058:	1023883a 	mov	r17,r2
  a0105c:	0a01f480 	call	a01f48 <__mulsf3>
  a01060:	1009883a 	mov	r4,r2
  a01064:	014f9b34 	movhi	r5,15980
  a01068:	294c9544 	addi	r5,r5,12885
  a0106c:	0a01ee40 	call	a01ee4 <__addsf3>
  a01070:	100b883a 	mov	r5,r2
  a01074:	8009883a 	mov	r4,r16
  a01078:	0a01f480 	call	a01f48 <__mulsf3>
  a0107c:	1009883a 	mov	r4,r2
  a01080:	014fa334 	movhi	r5,16012
  a01084:	2968c144 	addi	r5,r5,-23803
  a01088:	0a01ee40 	call	a01ee4 <__addsf3>
  a0108c:	100b883a 	mov	r5,r2
  a01090:	8009883a 	mov	r4,r16
  a01094:	0a01f480 	call	a01f48 <__mulsf3>
  a01098:	1009883a 	mov	r4,r2
  a0109c:	014faaf4 	movhi	r5,16043
  a010a0:	296aaac4 	addi	r5,r5,-21845
  a010a4:	0a01ee40 	call	a01ee4 <__addsf3>
  a010a8:	100b883a 	mov	r5,r2
  a010ac:	8009883a 	mov	r4,r16
  a010b0:	0a01f480 	call	a01f48 <__mulsf3>
  a010b4:	1009883a 	mov	r4,r2
  a010b8:	014fb6f4 	movhi	r5,16091
  a010bc:	295b6dc4 	addi	r5,r5,28087
  a010c0:	0a01ee40 	call	a01ee4 <__addsf3>
  a010c4:	100b883a 	mov	r5,r2
  a010c8:	8009883a 	mov	r4,r16
  a010cc:	0a01f480 	call	a01f48 <__mulsf3>
  a010d0:	1009883a 	mov	r4,r2
  a010d4:	014fc6b4 	movhi	r5,16154
  a010d8:	29666684 	addi	r5,r5,-26214
  a010dc:	0a01ee40 	call	a01ee4 <__addsf3>
  a010e0:	100b883a 	mov	r5,r2
  a010e4:	8809883a 	mov	r4,r17
  a010e8:	0a01f480 	call	a01f48 <__mulsf3>
  a010ec:	d9000317 	ldw	r4,12(sp)
  a010f0:	b00b883a 	mov	r5,r22
  a010f4:	1021883a 	mov	r16,r2
  a010f8:	0a01ee40 	call	a01ee4 <__addsf3>
  a010fc:	d9000417 	ldw	r4,16(sp)
  a01100:	100b883a 	mov	r5,r2
  a01104:	0a01f480 	call	a01f48 <__mulsf3>
  a01108:	100b883a 	mov	r5,r2
  a0110c:	8009883a 	mov	r4,r16
  a01110:	0a01ee40 	call	a01ee4 <__addsf3>
  a01114:	b009883a 	mov	r4,r22
  a01118:	b00b883a 	mov	r5,r22
  a0111c:	1025883a 	mov	r18,r2
  a01120:	0a01f480 	call	a01f48 <__mulsf3>
  a01124:	1009883a 	mov	r4,r2
  a01128:	a80b883a 	mov	r5,r21
  a0112c:	1027883a 	mov	r19,r2
  a01130:	0a01ee40 	call	a01ee4 <__addsf3>
  a01134:	100b883a 	mov	r5,r2
  a01138:	9009883a 	mov	r4,r18
  a0113c:	0a01ee40 	call	a01ee4 <__addsf3>
  a01140:	00fc0004 	movi	r3,-4096
  a01144:	10e2703a 	and	r17,r2,r3
  a01148:	880b883a 	mov	r5,r17
  a0114c:	b009883a 	mov	r4,r22
  a01150:	0a01f480 	call	a01f48 <__mulsf3>
  a01154:	d9000417 	ldw	r4,16(sp)
  a01158:	880b883a 	mov	r5,r17
  a0115c:	d8800515 	stw	r2,20(sp)
  a01160:	0a01f480 	call	a01f48 <__mulsf3>
  a01164:	8809883a 	mov	r4,r17
  a01168:	a80b883a 	mov	r5,r21
  a0116c:	1021883a 	mov	r16,r2
  a01170:	0a01e740 	call	a01e74 <__subsf3>
  a01174:	1009883a 	mov	r4,r2
  a01178:	980b883a 	mov	r5,r19
  a0117c:	0a01e740 	call	a01e74 <__subsf3>
  a01180:	100b883a 	mov	r5,r2
  a01184:	9009883a 	mov	r4,r18
  a01188:	0a01e740 	call	a01e74 <__subsf3>
  a0118c:	d9000317 	ldw	r4,12(sp)
  a01190:	100b883a 	mov	r5,r2
  a01194:	0a01f480 	call	a01f48 <__mulsf3>
  a01198:	100b883a 	mov	r5,r2
  a0119c:	8009883a 	mov	r4,r16
  a011a0:	0a01ee40 	call	a01ee4 <__addsf3>
  a011a4:	d9000517 	ldw	r4,20(sp)
  a011a8:	100b883a 	mov	r5,r2
  a011ac:	1027883a 	mov	r19,r2
  a011b0:	0a01ee40 	call	a01ee4 <__addsf3>
  a011b4:	00fc0004 	movi	r3,-4096
  a011b8:	10e2703a 	and	r17,r2,r3
  a011bc:	8809883a 	mov	r4,r17
  a011c0:	014fddb4 	movhi	r5,16246
  a011c4:	294e0004 	addi	r5,r5,14336
  a011c8:	0a01f480 	call	a01f48 <__mulsf3>
  a011cc:	8809883a 	mov	r4,r17
  a011d0:	014da7b4 	movhi	r5,13982
  a011d4:	2970e804 	addi	r5,r5,-15456
  a011d8:	102b883a 	mov	r21,r2
  a011dc:	0a01f480 	call	a01f48 <__mulsf3>
  a011e0:	d9400517 	ldw	r5,20(sp)
  a011e4:	8809883a 	mov	r4,r17
  a011e8:	1025883a 	mov	r18,r2
  a011ec:	0a01e740 	call	a01e74 <__subsf3>
  a011f0:	100b883a 	mov	r5,r2
  a011f4:	9809883a 	mov	r4,r19
  a011f8:	0a01e740 	call	a01e74 <__subsf3>
  a011fc:	1009883a 	mov	r4,r2
  a01200:	014fddb4 	movhi	r5,16246
  a01204:	294e13c4 	addi	r5,r5,14415
  a01208:	0a01f480 	call	a01f48 <__mulsf3>
  a0120c:	100b883a 	mov	r5,r2
  a01210:	9009883a 	mov	r4,r18
  a01214:	0a01ee40 	call	a01ee4 <__addsf3>
  a01218:	d0e00404 	addi	r3,gp,-32752
  a0121c:	a0c7883a 	add	r3,r20,r3
  a01220:	19400017 	ldw	r5,0(r3)
  a01224:	1009883a 	mov	r4,r2
  a01228:	0a01ee40 	call	a01ee4 <__addsf3>
  a0122c:	d9000017 	ldw	r4,0(sp)
  a01230:	1023883a 	mov	r17,r2
  a01234:	0a0247c0 	call	a0247c <__floatsisf>
  a01238:	1021883a 	mov	r16,r2
  a0123c:	d0a00604 	addi	r2,gp,-32744
  a01240:	a0a9883a 	add	r20,r20,r2
  a01244:	a4800017 	ldw	r18,0(r20)
  a01248:	a809883a 	mov	r4,r21
  a0124c:	880b883a 	mov	r5,r17
  a01250:	0a01ee40 	call	a01ee4 <__addsf3>
  a01254:	1009883a 	mov	r4,r2
  a01258:	900b883a 	mov	r5,r18
  a0125c:	0a01ee40 	call	a01ee4 <__addsf3>
  a01260:	100b883a 	mov	r5,r2
  a01264:	8009883a 	mov	r4,r16
  a01268:	0a01ee40 	call	a01ee4 <__addsf3>
  a0126c:	00fc0004 	movi	r3,-4096
  a01270:	10c4703a 	and	r2,r2,r3
  a01274:	800b883a 	mov	r5,r16
  a01278:	1009883a 	mov	r4,r2
  a0127c:	1027883a 	mov	r19,r2
  a01280:	0a01e740 	call	a01e74 <__subsf3>
  a01284:	1009883a 	mov	r4,r2
  a01288:	900b883a 	mov	r5,r18
  a0128c:	0a01e740 	call	a01e74 <__subsf3>
  a01290:	1009883a 	mov	r4,r2
  a01294:	a80b883a 	mov	r5,r21
  a01298:	0a01e740 	call	a01e74 <__subsf3>
  a0129c:	100b883a 	mov	r5,r2
  a012a0:	8809883a 	mov	r4,r17
  a012a4:	0a01e740 	call	a01e74 <__subsf3>
  a012a8:	1021883a 	mov	r16,r2
  a012ac:	d8c00217 	ldw	r3,8(sp)
  a012b0:	b8bfffc4 	addi	r2,r23,-1
  a012b4:	1884b03a 	or	r2,r3,r2
  a012b8:	1000a11e 	bne	r2,zero,a01540 <__ieee754_powf+0x8f8>
  a012bc:	05efe034 	movhi	r23,49024
  a012c0:	047c0004 	movi	r17,-4096
  a012c4:	8f22703a 	and	r17,r17,fp
  a012c8:	e009883a 	mov	r4,fp
  a012cc:	880b883a 	mov	r5,r17
  a012d0:	0a01e740 	call	a01e74 <__subsf3>
  a012d4:	100b883a 	mov	r5,r2
  a012d8:	9809883a 	mov	r4,r19
  a012dc:	0a01f480 	call	a01f48 <__mulsf3>
  a012e0:	8009883a 	mov	r4,r16
  a012e4:	e00b883a 	mov	r5,fp
  a012e8:	1025883a 	mov	r18,r2
  a012ec:	0a01f480 	call	a01f48 <__mulsf3>
  a012f0:	100b883a 	mov	r5,r2
  a012f4:	9009883a 	mov	r4,r18
  a012f8:	0a01ee40 	call	a01ee4 <__addsf3>
  a012fc:	9809883a 	mov	r4,r19
  a01300:	880b883a 	mov	r5,r17
  a01304:	1021883a 	mov	r16,r2
  a01308:	0a01f480 	call	a01f48 <__mulsf3>
  a0130c:	100b883a 	mov	r5,r2
  a01310:	8009883a 	mov	r4,r16
  a01314:	1027883a 	mov	r19,r2
  a01318:	0a01ee40 	call	a01ee4 <__addsf3>
  a0131c:	1023883a 	mov	r17,r2
  a01320:	1029883a 	mov	r20,r2
  a01324:	00a00034 	movhi	r2,32768
  a01328:	10bfffc4 	addi	r2,r2,-1
  a0132c:	88a4703a 	and	r18,r17,r2
  a01330:	8039883a 	mov	fp,r16
  a01334:	982b883a 	mov	r21,r19
  a01338:	8807883a 	mov	r3,r17
  a0133c:	0440a30e 	bge	zero,r17,a015cc <__ieee754_powf+0x984>
  a01340:	0090c034 	movhi	r2,17152
  a01344:	14808c16 	blt	r2,r18,a01578 <__ieee754_powf+0x930>
  a01348:	90807f26 	beq	r18,r2,a01548 <__ieee754_powf+0x900>
  a0134c:	008fc034 	movhi	r2,16128
  a01350:	1480a816 	blt	r2,r18,a015f4 <__ieee754_powf+0x9ac>
  a01354:	002d883a 	mov	r22,zero
  a01358:	0029883a 	mov	r20,zero
  a0135c:	047c0004 	movi	r17,-4096
  a01360:	88e2703a 	and	r17,r17,r3
  a01364:	8809883a 	mov	r4,r17
  a01368:	014fcc74 	movhi	r5,16177
  a0136c:	295c8004 	addi	r5,r5,29184
  a01370:	0a01f480 	call	a01f48 <__mulsf3>
  a01374:	8809883a 	mov	r4,r17
  a01378:	a80b883a 	mov	r5,r21
  a0137c:	1027883a 	mov	r19,r2
  a01380:	0a01e740 	call	a01e74 <__subsf3>
  a01384:	100b883a 	mov	r5,r2
  a01388:	e009883a 	mov	r4,fp
  a0138c:	0a01e740 	call	a01e74 <__subsf3>
  a01390:	1009883a 	mov	r4,r2
  a01394:	014fcc74 	movhi	r5,16177
  a01398:	295c8604 	addi	r5,r5,29208
  a0139c:	0a01f480 	call	a01f48 <__mulsf3>
  a013a0:	8809883a 	mov	r4,r17
  a013a4:	014d7034 	movhi	r5,13760
  a013a8:	296fa304 	addi	r5,r5,-16756
  a013ac:	1025883a 	mov	r18,r2
  a013b0:	0a01f480 	call	a01f48 <__mulsf3>
  a013b4:	100b883a 	mov	r5,r2
  a013b8:	9009883a 	mov	r4,r18
  a013bc:	0a01ee40 	call	a01ee4 <__addsf3>
  a013c0:	100b883a 	mov	r5,r2
  a013c4:	9809883a 	mov	r4,r19
  a013c8:	1021883a 	mov	r16,r2
  a013cc:	0a01ee40 	call	a01ee4 <__addsf3>
  a013d0:	1009883a 	mov	r4,r2
  a013d4:	980b883a 	mov	r5,r19
  a013d8:	1025883a 	mov	r18,r2
  a013dc:	0a01e740 	call	a01e74 <__subsf3>
  a013e0:	100b883a 	mov	r5,r2
  a013e4:	8009883a 	mov	r4,r16
  a013e8:	0a01e740 	call	a01e74 <__subsf3>
  a013ec:	9009883a 	mov	r4,r18
  a013f0:	900b883a 	mov	r5,r18
  a013f4:	1027883a 	mov	r19,r2
  a013f8:	0a01f480 	call	a01f48 <__mulsf3>
  a013fc:	1009883a 	mov	r4,r2
  a01400:	014cccb4 	movhi	r5,13106
  a01404:	296ed304 	addi	r5,r5,-17588
  a01408:	1021883a 	mov	r16,r2
  a0140c:	0a01f480 	call	a01f48 <__mulsf3>
  a01410:	1009883a 	mov	r4,r2
  a01414:	014d77b4 	movhi	r5,13790
  a01418:	297a8384 	addi	r5,r5,-5618
  a0141c:	0a01e740 	call	a01e74 <__subsf3>
  a01420:	100b883a 	mov	r5,r2
  a01424:	8009883a 	mov	r4,r16
  a01428:	0a01f480 	call	a01f48 <__mulsf3>
  a0142c:	1009883a 	mov	r4,r2
  a01430:	014e22f4 	movhi	r5,14475
  a01434:	296cd544 	addi	r5,r5,-19627
  a01438:	0a01ee40 	call	a01ee4 <__addsf3>
  a0143c:	100b883a 	mov	r5,r2
  a01440:	8009883a 	mov	r4,r16
  a01444:	0a01f480 	call	a01f48 <__mulsf3>
  a01448:	1009883a 	mov	r4,r2
  a0144c:	014ecdb4 	movhi	r5,15158
  a01450:	2942d844 	addi	r5,r5,2913
  a01454:	0a01e740 	call	a01e74 <__subsf3>
  a01458:	100b883a 	mov	r5,r2
  a0145c:	8009883a 	mov	r4,r16
  a01460:	0a01f480 	call	a01f48 <__mulsf3>
  a01464:	1009883a 	mov	r4,r2
  a01468:	014f8af4 	movhi	r5,15915
  a0146c:	296aaac4 	addi	r5,r5,-21845
  a01470:	0a01ee40 	call	a01ee4 <__addsf3>
  a01474:	100b883a 	mov	r5,r2
  a01478:	8009883a 	mov	r4,r16
  a0147c:	0a01f480 	call	a01f48 <__mulsf3>
  a01480:	100b883a 	mov	r5,r2
  a01484:	9009883a 	mov	r4,r18
  a01488:	0a01e740 	call	a01e74 <__subsf3>
  a0148c:	1021883a 	mov	r16,r2
  a01490:	9009883a 	mov	r4,r18
  a01494:	100b883a 	mov	r5,r2
  a01498:	0a01f480 	call	a01f48 <__mulsf3>
  a0149c:	8009883a 	mov	r4,r16
  a014a0:	01500034 	movhi	r5,16384
  a014a4:	1023883a 	mov	r17,r2
  a014a8:	0a01e740 	call	a01e74 <__subsf3>
  a014ac:	100b883a 	mov	r5,r2
  a014b0:	8809883a 	mov	r4,r17
  a014b4:	0a021280 	call	a02128 <__divsf3>
  a014b8:	9009883a 	mov	r4,r18
  a014bc:	980b883a 	mov	r5,r19
  a014c0:	1021883a 	mov	r16,r2
  a014c4:	0a01f480 	call	a01f48 <__mulsf3>
  a014c8:	100b883a 	mov	r5,r2
  a014cc:	9809883a 	mov	r4,r19
  a014d0:	0a01ee40 	call	a01ee4 <__addsf3>
  a014d4:	100b883a 	mov	r5,r2
  a014d8:	8009883a 	mov	r4,r16
  a014dc:	0a01e740 	call	a01e74 <__subsf3>
  a014e0:	1009883a 	mov	r4,r2
  a014e4:	900b883a 	mov	r5,r18
  a014e8:	0a01e740 	call	a01e74 <__subsf3>
  a014ec:	100b883a 	mov	r5,r2
  a014f0:	010fe034 	movhi	r4,16256
  a014f4:	0a01e740 	call	a01e74 <__subsf3>
  a014f8:	a087883a 	add	r3,r20,r2
  a014fc:	1009883a 	mov	r4,r2
  a01500:	1805d5fa 	srai	r2,r3,23
  a01504:	0080920e 	bge	zero,r2,a01750 <__ieee754_powf+0xb08>
  a01508:	1805883a 	mov	r2,r3
  a0150c:	1009883a 	mov	r4,r2
  a01510:	b80b883a 	mov	r5,r23
  a01514:	0a01f480 	call	a01f48 <__mulsf3>
  a01518:	1039883a 	mov	fp,r2
  a0151c:	003e1306 	br	a00d6c <__ieee754_powf+0x124>
  a01520:	00bfe034 	movhi	r2,65408
  a01524:	213fe084 	addi	r4,r4,-126
  a01528:	80a1883a 	add	r16,r16,r2
  a0152c:	d9000015 	stw	r4,0(sp)
  a01530:	00c00134 	movhi	r3,4
  a01534:	0029883a 	mov	r20,zero
  a01538:	d8c00115 	stw	r3,4(sp)
  a0153c:	003e8906 	br	a00f64 <__ieee754_powf+0x31c>
  a01540:	05cfe034 	movhi	r23,16256
  a01544:	003f5e06 	br	a012c0 <__ieee754_powf+0x678>
  a01548:	8009883a 	mov	r4,r16
  a0154c:	014cce74 	movhi	r5,13113
  a01550:	296a8f04 	addi	r5,r5,-21956
  a01554:	0a01ee40 	call	a01ee4 <__addsf3>
  a01558:	8809883a 	mov	r4,r17
  a0155c:	980b883a 	mov	r5,r19
  a01560:	1021883a 	mov	r16,r2
  a01564:	0a01e740 	call	a01e74 <__subsf3>
  a01568:	100b883a 	mov	r5,r2
  a0156c:	8009883a 	mov	r4,r16
  a01570:	0a023140 	call	a02314 <__gtsf2>
  a01574:	00801f0e 	bge	zero,r2,a015f4 <__ieee754_powf+0x9ac>
  a01578:	041c52b4 	movhi	r16,29002
  a0157c:	843cb284 	addi	r16,r16,-3382
  a01580:	b809883a 	mov	r4,r23
  a01584:	800b883a 	mov	r5,r16
  a01588:	0a01f480 	call	a01f48 <__mulsf3>
  a0158c:	1009883a 	mov	r4,r2
  a01590:	800b883a 	mov	r5,r16
  a01594:	0a01f480 	call	a01f48 <__mulsf3>
  a01598:	1039883a 	mov	fp,r2
  a0159c:	003df306 	br	a00d6c <__ieee754_powf+0x124>
  a015a0:	0152e034 	movhi	r5,19328
  a015a4:	0a01f480 	call	a01f48 <__mulsf3>
  a015a8:	1023883a 	mov	r17,r2
  a015ac:	013ffa04 	movi	r4,-24
  a015b0:	003e5b06 	br	a00f20 <__ieee754_powf+0x2d8>
  a015b4:	008fe034 	movhi	r2,16256
  a015b8:	108001c4 	addi	r2,r2,7
  a015bc:	14402c0e 	bge	r2,r17,a01670 <__ieee754_powf+0xa28>
  a015c0:	04be4d16 	blt	zero,r18,a00ef8 <__ieee754_powf+0x2b0>
  a015c4:	0039883a 	mov	fp,zero
  a015c8:	003de806 	br	a00d6c <__ieee754_powf+0x124>
  a015cc:	0090c5b4 	movhi	r2,17174
  a015d0:	14802416 	blt	r2,r18,a01664 <__ieee754_powf+0xa1c>
  a015d4:	90bf5d1e 	bne	r18,r2,a0134c <__ieee754_powf+0x704>
  a015d8:	8809883a 	mov	r4,r17
  a015dc:	980b883a 	mov	r5,r19
  a015e0:	0a01e740 	call	a01e74 <__subsf3>
  a015e4:	100b883a 	mov	r5,r2
  a015e8:	8009883a 	mov	r4,r16
  a015ec:	0a024040 	call	a02404 <__lesf2>
  a015f0:	00801c0e 	bge	zero,r2,a01664 <__ieee754_powf+0xa1c>
  a015f4:	9005d5fa 	srai	r2,r18,23
  a015f8:	01002034 	movhi	r4,128
  a015fc:	01402034 	movhi	r5,128
  a01600:	297fffc4 	addi	r5,r5,-1
  a01604:	10bfe084 	addi	r2,r2,-126
  a01608:	2089d83a 	sra	r4,r4,r2
  a0160c:	008005c4 	movi	r2,23
  a01610:	a109883a 	add	r4,r20,r4
  a01614:	2006d5fa 	srli	r3,r4,23
  a01618:	214c703a 	and	r6,r4,r5
  a0161c:	31802034 	orhi	r6,r6,128
  a01620:	18c03fcc 	andi	r3,r3,255
  a01624:	18ffe044 	addi	r3,r3,-127
  a01628:	28cbd83a 	sra	r5,r5,r3
  a0162c:	10c5c83a 	sub	r2,r2,r3
  a01630:	30add83a 	sra	r22,r6,r2
  a01634:	014a303a 	nor	r5,zero,r5
  a01638:	214a703a 	and	r5,r4,r5
  a0163c:	a0004216 	blt	r20,zero,a01748 <__ieee754_powf+0xb00>
  a01640:	a809883a 	mov	r4,r21
  a01644:	0a01e740 	call	a01e74 <__subsf3>
  a01648:	100b883a 	mov	r5,r2
  a0164c:	e009883a 	mov	r4,fp
  a01650:	b02895fa 	slli	r20,r22,23
  a01654:	102b883a 	mov	r21,r2
  a01658:	0a01ee40 	call	a01ee4 <__addsf3>
  a0165c:	1007883a 	mov	r3,r2
  a01660:	003f3e06 	br	a0135c <__ieee754_powf+0x714>
  a01664:	040368b4 	movhi	r16,3490
  a01668:	84109804 	addi	r16,r16,16992
  a0166c:	003fc406 	br	a01580 <__ieee754_powf+0x938>
  a01670:	0a01e740 	call	a01e74 <__subsf3>
  a01674:	1021883a 	mov	r16,r2
  a01678:	1009883a 	mov	r4,r2
  a0167c:	014fee74 	movhi	r5,16313
  a01680:	296a8004 	addi	r5,r5,-22016
  a01684:	0a01f480 	call	a01f48 <__mulsf3>
  a01688:	8009883a 	mov	r4,r16
  a0168c:	014dbb74 	movhi	r5,14061
  a01690:	29695c04 	addi	r5,r5,-23184
  a01694:	1023883a 	mov	r17,r2
  a01698:	0a01f480 	call	a01f48 <__mulsf3>
  a0169c:	8009883a 	mov	r4,r16
  a016a0:	800b883a 	mov	r5,r16
  a016a4:	1025883a 	mov	r18,r2
  a016a8:	0a01f480 	call	a01f48 <__mulsf3>
  a016ac:	8009883a 	mov	r4,r16
  a016b0:	016fa034 	movhi	r5,48768
  a016b4:	1027883a 	mov	r19,r2
  a016b8:	0a01f480 	call	a01f48 <__mulsf3>
  a016bc:	1009883a 	mov	r4,r2
  a016c0:	014faaf4 	movhi	r5,16043
  a016c4:	296aaac4 	addi	r5,r5,-21845
  a016c8:	0a01ee40 	call	a01ee4 <__addsf3>
  a016cc:	100b883a 	mov	r5,r2
  a016d0:	8009883a 	mov	r4,r16
  a016d4:	0a01f480 	call	a01f48 <__mulsf3>
  a016d8:	100b883a 	mov	r5,r2
  a016dc:	010fc034 	movhi	r4,16128
  a016e0:	0a01e740 	call	a01e74 <__subsf3>
  a016e4:	100b883a 	mov	r5,r2
  a016e8:	9809883a 	mov	r4,r19
  a016ec:	0a01f480 	call	a01f48 <__mulsf3>
  a016f0:	1009883a 	mov	r4,r2
  a016f4:	016fee74 	movhi	r5,49081
  a016f8:	296a8ec4 	addi	r5,r5,-21957
  a016fc:	0a01f480 	call	a01f48 <__mulsf3>
  a01700:	100b883a 	mov	r5,r2
  a01704:	9009883a 	mov	r4,r18
  a01708:	0a01ee40 	call	a01ee4 <__addsf3>
  a0170c:	100b883a 	mov	r5,r2
  a01710:	8809883a 	mov	r4,r17
  a01714:	1021883a 	mov	r16,r2
  a01718:	0a01ee40 	call	a01ee4 <__addsf3>
  a0171c:	00fc0004 	movi	r3,-4096
  a01720:	10c4703a 	and	r2,r2,r3
  a01724:	1009883a 	mov	r4,r2
  a01728:	880b883a 	mov	r5,r17
  a0172c:	1027883a 	mov	r19,r2
  a01730:	0a01e740 	call	a01e74 <__subsf3>
  a01734:	100b883a 	mov	r5,r2
  a01738:	8009883a 	mov	r4,r16
  a0173c:	0a01e740 	call	a01e74 <__subsf3>
  a01740:	1021883a 	mov	r16,r2
  a01744:	003ed906 	br	a012ac <__ieee754_powf+0x664>
  a01748:	05adc83a 	sub	r22,zero,r22
  a0174c:	003fbc06 	br	a01640 <__ieee754_powf+0x9f8>
  a01750:	b00b883a 	mov	r5,r22
  a01754:	0a01b2c0 	call	a01b2c <scalbnf>
  a01758:	003f6c06 	br	a0150c <__ieee754_powf+0x8c4>

00a0175c <__ieee754_sqrtf>:
  a0175c:	00a00034 	movhi	r2,32768
  a01760:	10bfffc4 	addi	r2,r2,-1
  a01764:	defffe04 	addi	sp,sp,-8
  a01768:	208c703a 	and	r6,r4,r2
  a0176c:	00dfe034 	movhi	r3,32640
  a01770:	18ffffc4 	addi	r3,r3,-1
  a01774:	dc000015 	stw	r16,0(sp)
  a01778:	dfc00115 	stw	ra,4(sp)
  a0177c:	2021883a 	mov	r16,r4
  a01780:	200b883a 	mov	r5,r4
  a01784:	19800a2e 	bgeu	r3,r6,a017b0 <__ieee754_sqrtf+0x54>
  a01788:	0a01f480 	call	a01f48 <__mulsf3>
  a0178c:	100b883a 	mov	r5,r2
  a01790:	8009883a 	mov	r4,r16
  a01794:	0a01ee40 	call	a01ee4 <__addsf3>
  a01798:	1021883a 	mov	r16,r2
  a0179c:	8005883a 	mov	r2,r16
  a017a0:	dfc00117 	ldw	ra,4(sp)
  a017a4:	dc000017 	ldw	r16,0(sp)
  a017a8:	dec00204 	addi	sp,sp,8
  a017ac:	f800283a 	ret
  a017b0:	303ffa26 	beq	r6,zero,a0179c <__ieee754_sqrtf+0x40>
  a017b4:	20003b16 	blt	r4,zero,a018a4 <__ieee754_sqrtf+0x148>
  a017b8:	00802034 	movhi	r2,128
  a017bc:	10bfffc4 	addi	r2,r2,-1
  a017c0:	2007d5fa 	srai	r3,r4,23
  a017c4:	11800936 	bltu	r2,r6,a017ec <__ieee754_sqrtf+0x90>
  a017c8:	2080202c 	andhi	r2,r4,128
  a017cc:	10003c1e 	bne	r2,zero,a018c0 <__ieee754_sqrtf+0x164>
  a017d0:	0009883a 	mov	r4,zero
  a017d4:	294b883a 	add	r5,r5,r5
  a017d8:	2880202c 	andhi	r2,r5,128
  a017dc:	21000044 	addi	r4,r4,1
  a017e0:	103ffc26 	beq	r2,zero,a017d4 <__ieee754_sqrtf+0x78>
  a017e4:	1905c83a 	sub	r2,r3,r4
  a017e8:	10c00044 	addi	r3,r2,1
  a017ec:	1a7fe044 	addi	r9,r3,-127
  a017f0:	48c0004c 	andi	r3,r9,1
  a017f4:	00802034 	movhi	r2,128
  a017f8:	10bfffc4 	addi	r2,r2,-1
  a017fc:	2884703a 	and	r2,r5,r2
  a01800:	1807003a 	cmpeq	r3,r3,zero
  a01804:	10802034 	orhi	r2,r2,128
  a01808:	18002426 	beq	r3,zero,a0189c <__ieee754_sqrtf+0x140>
  a0180c:	1085883a 	add	r2,r2,r2
  a01810:	01404034 	movhi	r5,256
  a01814:	000f883a 	mov	r7,zero
  a01818:	0007883a 	mov	r3,zero
  a0181c:	000d883a 	mov	r6,zero
  a01820:	02000644 	movi	r8,25
  a01824:	3949883a 	add	r4,r7,r5
  a01828:	31800044 	addi	r6,r6,1
  a0182c:	11000316 	blt	r2,r4,a0183c <__ieee754_sqrtf+0xe0>
  a01830:	1105c83a 	sub	r2,r2,r4
  a01834:	1947883a 	add	r3,r3,r5
  a01838:	214f883a 	add	r7,r4,r5
  a0183c:	1085883a 	add	r2,r2,r2
  a01840:	280ad07a 	srli	r5,r5,1
  a01844:	323ff71e 	bne	r6,r8,a01824 <__ieee754_sqrtf+0xc8>
  a01848:	10000b1e 	bne	r2,zero,a01878 <__ieee754_sqrtf+0x11c>
  a0184c:	4805d07a 	srai	r2,r9,1
  a01850:	1807d07a 	srai	r3,r3,1
  a01854:	010fc034 	movhi	r4,16128
  a01858:	100495fa 	slli	r2,r2,23
  a0185c:	1907883a 	add	r3,r3,r4
  a01860:	18a1883a 	add	r16,r3,r2
  a01864:	8005883a 	mov	r2,r16
  a01868:	dfc00117 	ldw	ra,4(sp)
  a0186c:	dc000017 	ldw	r16,0(sp)
  a01870:	dec00204 	addi	sp,sp,8
  a01874:	f800283a 	ret
  a01878:	1880004c 	andi	r2,r3,1
  a0187c:	1887883a 	add	r3,r3,r2
  a01880:	4805d07a 	srai	r2,r9,1
  a01884:	1807d07a 	srai	r3,r3,1
  a01888:	010fc034 	movhi	r4,16128
  a0188c:	100495fa 	slli	r2,r2,23
  a01890:	1907883a 	add	r3,r3,r4
  a01894:	18a1883a 	add	r16,r3,r2
  a01898:	003ff206 	br	a01864 <__ieee754_sqrtf+0x108>
  a0189c:	1085883a 	add	r2,r2,r2
  a018a0:	003fda06 	br	a0180c <__ieee754_sqrtf+0xb0>
  a018a4:	200b883a 	mov	r5,r4
  a018a8:	0a01e740 	call	a01e74 <__subsf3>
  a018ac:	1009883a 	mov	r4,r2
  a018b0:	100b883a 	mov	r5,r2
  a018b4:	0a021280 	call	a02128 <__divsf3>
  a018b8:	1021883a 	mov	r16,r2
  a018bc:	003fb706 	br	a0179c <__ieee754_sqrtf+0x40>
  a018c0:	0009883a 	mov	r4,zero
  a018c4:	003fc706 	br	a017e4 <__ieee754_sqrtf+0x88>

00a018c8 <matherr>:
  a018c8:	0005883a 	mov	r2,zero
  a018cc:	f800283a 	ret

00a018d0 <rint>:
  a018d0:	2015883a 	mov	r10,r4
  a018d4:	2809d53a 	srai	r4,r5,20
  a018d8:	defff904 	addi	sp,sp,-28
  a018dc:	034004c4 	movi	r13,19
  a018e0:	2101ffcc 	andi	r4,r4,2047
  a018e4:	227f0044 	addi	r9,r4,-1023
  a018e8:	dc800415 	stw	r18,16(sp)
  a018ec:	dfc00615 	stw	ra,24(sp)
  a018f0:	dcc00515 	stw	r19,20(sp)
  a018f4:	dc400315 	stw	r17,12(sp)
  a018f8:	dc000215 	stw	r16,8(sp)
  a018fc:	2817883a 	mov	r11,r5
  a01900:	500d883a 	mov	r6,r10
  a01904:	2824d7fa 	srli	r18,r5,31
  a01908:	6a403016 	blt	r13,r9,a019cc <rint+0xfc>
  a0190c:	48004916 	blt	r9,zero,a01a34 <rint+0x164>
  a01910:	00800434 	movhi	r2,16
  a01914:	10bfffc4 	addi	r2,r2,-1
  a01918:	1247d83a 	sra	r3,r2,r9
  a0191c:	2809883a 	mov	r4,r5
  a01920:	1944703a 	and	r2,r3,r5
  a01924:	5084b03a 	or	r2,r10,r2
  a01928:	10001f26 	beq	r2,zero,a019a8 <rint+0xd8>
  a0192c:	180ad07a 	srli	r5,r3,1
  a01930:	5944703a 	and	r2,r11,r5
  a01934:	5084b03a 	or	r2,r10,r2
  a01938:	10000626 	beq	r2,zero,a01954 <rint+0x84>
  a0193c:	4b406626 	beq	r9,r13,a01ad8 <rint+0x208>
  a01940:	00c000b4 	movhi	r3,2
  a01944:	1a47d83a 	sra	r3,r3,r9
  a01948:	0144303a 	nor	r2,zero,r5
  a0194c:	5884703a 	and	r2,r11,r2
  a01950:	10c8b03a 	or	r4,r2,r3
  a01954:	900690fa 	slli	r3,r18,3
  a01958:	00802874 	movhi	r2,161
  a0195c:	1082d104 	addi	r2,r2,2884
  a01960:	200f883a 	mov	r7,r4
  a01964:	1887883a 	add	r3,r3,r2
  a01968:	1c000017 	ldw	r16,0(r3)
  a0196c:	1c400117 	ldw	r17,4(r3)
  a01970:	8009883a 	mov	r4,r16
  a01974:	880b883a 	mov	r5,r17
  a01978:	0a029f80 	call	a029f8 <__adddf3>
  a0197c:	d8800015 	stw	r2,0(sp)
  a01980:	d8c00115 	stw	r3,4(sp)
  a01984:	d8800017 	ldw	r2,0(sp)
  a01988:	d8c00117 	ldw	r3,4(sp)
  a0198c:	880f883a 	mov	r7,r17
  a01990:	800d883a 	mov	r6,r16
  a01994:	180b883a 	mov	r5,r3
  a01998:	1009883a 	mov	r4,r2
  a0199c:	0a029780 	call	a02978 <__subdf3>
  a019a0:	1015883a 	mov	r10,r2
  a019a4:	1817883a 	mov	r11,r3
  a019a8:	5005883a 	mov	r2,r10
  a019ac:	5807883a 	mov	r3,r11
  a019b0:	dfc00617 	ldw	ra,24(sp)
  a019b4:	dcc00517 	ldw	r19,20(sp)
  a019b8:	dc800417 	ldw	r18,16(sp)
  a019bc:	dc400317 	ldw	r17,12(sp)
  a019c0:	dc000217 	ldw	r16,8(sp)
  a019c4:	dec00704 	addi	sp,sp,28
  a019c8:	f800283a 	ret
  a019cc:	00800cc4 	movi	r2,51
  a019d0:	12400f16 	blt	r2,r9,a01a10 <rint+0x140>
  a019d4:	213efb44 	addi	r4,r4,-1043
  a019d8:	00bfffc4 	movi	r2,-1
  a019dc:	1104d83a 	srl	r2,r2,r4
  a019e0:	5086703a 	and	r3,r10,r2
  a019e4:	183ff026 	beq	r3,zero,a019a8 <rint+0xd8>
  a019e8:	100ad07a 	srli	r5,r2,1
  a019ec:	5144703a 	and	r2,r10,r5
  a019f0:	10000526 	beq	r2,zero,a01a08 <rint+0x138>
  a019f4:	00d00034 	movhi	r3,16384
  a019f8:	1907d83a 	sra	r3,r3,r4
  a019fc:	0144303a 	nor	r2,zero,r5
  a01a00:	5084703a 	and	r2,r10,r2
  a01a04:	10ccb03a 	or	r6,r2,r3
  a01a08:	5809883a 	mov	r4,r11
  a01a0c:	003fd106 	br	a01954 <rint+0x84>
  a01a10:	00810004 	movi	r2,1024
  a01a14:	48bfe41e 	bne	r9,r2,a019a8 <rint+0xd8>
  a01a18:	5009883a 	mov	r4,r10
  a01a1c:	500d883a 	mov	r6,r10
  a01a20:	280f883a 	mov	r7,r5
  a01a24:	0a029f80 	call	a029f8 <__adddf3>
  a01a28:	1015883a 	mov	r10,r2
  a01a2c:	1817883a 	mov	r11,r3
  a01a30:	003fdd06 	br	a019a8 <rint+0xd8>
  a01a34:	04e00034 	movhi	r19,32768
  a01a38:	9cffffc4 	addi	r19,r19,-1
  a01a3c:	2cc4703a 	and	r2,r5,r19
  a01a40:	5084b03a 	or	r2,r10,r2
  a01a44:	103fd826 	beq	r2,zero,a019a8 <rint+0xd8>
  a01a48:	00c00434 	movhi	r3,16
  a01a4c:	18ffffc4 	addi	r3,r3,-1
  a01a50:	28c6703a 	and	r3,r5,r3
  a01a54:	50c6b03a 	or	r3,r10,r3
  a01a58:	00cdc83a 	sub	r6,zero,r3
  a01a5c:	900a90fa 	slli	r5,r18,3
  a01a60:	1986b03a 	or	r3,r3,r6
  a01a64:	01002874 	movhi	r4,161
  a01a68:	2102d104 	addi	r4,r4,2884
  a01a6c:	1806d33a 	srli	r3,r3,12
  a01a70:	290b883a 	add	r5,r5,r4
  a01a74:	2c000017 	ldw	r16,0(r5)
  a01a78:	2c400117 	ldw	r17,4(r5)
  a01a7c:	593fffac 	andhi	r4,r11,65534
  a01a80:	18c0022c 	andhi	r3,r3,8
  a01a84:	1906b03a 	or	r3,r3,r4
  a01a88:	500d883a 	mov	r6,r10
  a01a8c:	180f883a 	mov	r7,r3
  a01a90:	8009883a 	mov	r4,r16
  a01a94:	880b883a 	mov	r5,r17
  a01a98:	0a029f80 	call	a029f8 <__adddf3>
  a01a9c:	d8800015 	stw	r2,0(sp)
  a01aa0:	d8c00115 	stw	r3,4(sp)
  a01aa4:	d8800017 	ldw	r2,0(sp)
  a01aa8:	d8c00117 	ldw	r3,4(sp)
  a01aac:	880f883a 	mov	r7,r17
  a01ab0:	800d883a 	mov	r6,r16
  a01ab4:	180b883a 	mov	r5,r3
  a01ab8:	1009883a 	mov	r4,r2
  a01abc:	0a029780 	call	a02978 <__subdf3>
  a01ac0:	901297fa 	slli	r9,r18,31
  a01ac4:	98d0703a 	and	r8,r19,r3
  a01ac8:	1015883a 	mov	r10,r2
  a01acc:	4250b03a 	or	r8,r8,r9
  a01ad0:	4017883a 	mov	r11,r8
  a01ad4:	003fb406 	br	a019a8 <rint+0xd8>
  a01ad8:	01900034 	movhi	r6,16384
  a01adc:	003f9d06 	br	a01954 <rint+0x84>

00a01ae0 <fabsf>:
  a01ae0:	00a00034 	movhi	r2,32768
  a01ae4:	10bfffc4 	addi	r2,r2,-1
  a01ae8:	2084703a 	and	r2,r4,r2
  a01aec:	f800283a 	ret

00a01af0 <finitef>:
  a01af0:	00a00034 	movhi	r2,32768
  a01af4:	10bfffc4 	addi	r2,r2,-1
  a01af8:	2088703a 	and	r4,r4,r2
  a01afc:	009fe034 	movhi	r2,32640
  a01b00:	10bfffc4 	addi	r2,r2,-1
  a01b04:	1104403a 	cmpge	r2,r2,r4
  a01b08:	f800283a 	ret

00a01b0c <isnanf>:
  a01b0c:	00a00034 	movhi	r2,32768
  a01b10:	10bfffc4 	addi	r2,r2,-1
  a01b14:	2088703a 	and	r4,r4,r2
  a01b18:	009fe034 	movhi	r2,32640
  a01b1c:	1104803a 	cmplt	r2,r2,r4
  a01b20:	f800283a 	ret

00a01b24 <nanf>:
  a01b24:	009ff034 	movhi	r2,32704
  a01b28:	f800283a 	ret

00a01b2c <scalbnf>:
  a01b2c:	00a00034 	movhi	r2,32768
  a01b30:	10bfffc4 	addi	r2,r2,-1
  a01b34:	defffe04 	addi	sp,sp,-8
  a01b38:	2086703a 	and	r3,r4,r2
  a01b3c:	dc000015 	stw	r16,0(sp)
  a01b40:	dfc00115 	stw	ra,4(sp)
  a01b44:	200d883a 	mov	r6,r4
  a01b48:	200f883a 	mov	r7,r4
  a01b4c:	2821883a 	mov	r16,r5
  a01b50:	18001a26 	beq	r3,zero,a01bbc <scalbnf+0x90>
  a01b54:	009fe034 	movhi	r2,32640
  a01b58:	10bfffc4 	addi	r2,r2,-1
  a01b5c:	10c01c36 	bltu	r2,r3,a01bd0 <scalbnf+0xa4>
  a01b60:	00802034 	movhi	r2,128
  a01b64:	10bfffc4 	addi	r2,r2,-1
  a01b68:	10c02136 	bltu	r2,r3,a01bf0 <scalbnf+0xc4>
  a01b6c:	01530034 	movhi	r5,19456
  a01b70:	0a01f480 	call	a01f48 <__mulsf3>
  a01b74:	1009883a 	mov	r4,r2
  a01b78:	100d883a 	mov	r6,r2
  a01b7c:	00bffff4 	movhi	r2,65535
  a01b80:	108f2c04 	addi	r2,r2,15536
  a01b84:	80802616 	blt	r16,r2,a01c20 <scalbnf+0xf4>
  a01b88:	209fe02c 	andhi	r2,r4,32640
  a01b8c:	1005d5fa 	srai	r2,r2,23
  a01b90:	200f883a 	mov	r7,r4
  a01b94:	10bff9c4 	addi	r2,r2,-25
  a01b98:	1407883a 	add	r3,r2,r16
  a01b9c:	00803f84 	movi	r2,254
  a01ba0:	10c01516 	blt	r2,r3,a01bf8 <scalbnf+0xcc>
  a01ba4:	00c0230e 	bge	zero,r3,a01c34 <scalbnf+0x108>
  a01ba8:	180695fa 	slli	r3,r3,23
  a01bac:	00a02034 	movhi	r2,32896
  a01bb0:	10bfffc4 	addi	r2,r2,-1
  a01bb4:	3884703a 	and	r2,r7,r2
  a01bb8:	10ccb03a 	or	r6,r2,r3
  a01bbc:	3005883a 	mov	r2,r6
  a01bc0:	dfc00117 	ldw	ra,4(sp)
  a01bc4:	dc000017 	ldw	r16,0(sp)
  a01bc8:	dec00204 	addi	sp,sp,8
  a01bcc:	f800283a 	ret
  a01bd0:	200b883a 	mov	r5,r4
  a01bd4:	0a01ee40 	call	a01ee4 <__addsf3>
  a01bd8:	100d883a 	mov	r6,r2
  a01bdc:	3005883a 	mov	r2,r6
  a01be0:	dfc00117 	ldw	ra,4(sp)
  a01be4:	dc000017 	ldw	r16,0(sp)
  a01be8:	dec00204 	addi	sp,sp,8
  a01bec:	f800283a 	ret
  a01bf0:	1804d5fa 	srli	r2,r3,23
  a01bf4:	003fe806 	br	a01b98 <scalbnf+0x6c>
  a01bf8:	041c52b4 	movhi	r16,29002
  a01bfc:	843cb284 	addi	r16,r16,-3382
  a01c00:	300b883a 	mov	r5,r6
  a01c04:	8009883a 	mov	r4,r16
  a01c08:	0a01c780 	call	a01c78 <copysignf>
  a01c0c:	1009883a 	mov	r4,r2
  a01c10:	800b883a 	mov	r5,r16
  a01c14:	0a01f480 	call	a01f48 <__mulsf3>
  a01c18:	100d883a 	mov	r6,r2
  a01c1c:	003fe706 	br	a01bbc <scalbnf+0x90>
  a01c20:	014368b4 	movhi	r5,3490
  a01c24:	29509804 	addi	r5,r5,16992
  a01c28:	0a01f480 	call	a01f48 <__mulsf3>
  a01c2c:	100d883a 	mov	r6,r2
  a01c30:	003fe206 	br	a01bbc <scalbnf+0x90>
  a01c34:	00bffa84 	movi	r2,-22
  a01c38:	1880050e 	bge	r3,r2,a01c50 <scalbnf+0x124>
  a01c3c:	00b0d414 	movui	r2,50000
  a01c40:	143fed16 	blt	r2,r16,a01bf8 <scalbnf+0xcc>
  a01c44:	040368b4 	movhi	r16,3490
  a01c48:	84109804 	addi	r16,r16,16992
  a01c4c:	003fec06 	br	a01c00 <scalbnf+0xd4>
  a01c50:	18800644 	addi	r2,r3,25
  a01c54:	100495fa 	slli	r2,r2,23
  a01c58:	01202034 	movhi	r4,32896
  a01c5c:	213fffc4 	addi	r4,r4,-1
  a01c60:	3908703a 	and	r4,r7,r4
  a01c64:	2088b03a 	or	r4,r4,r2
  a01c68:	014cc034 	movhi	r5,13056
  a01c6c:	0a01f480 	call	a01f48 <__mulsf3>
  a01c70:	100d883a 	mov	r6,r2
  a01c74:	003fd106 	br	a01bbc <scalbnf+0x90>

00a01c78 <copysignf>:
  a01c78:	00a00034 	movhi	r2,32768
  a01c7c:	10bfffc4 	addi	r2,r2,-1
  a01c80:	2088703a 	and	r4,r4,r2
  a01c84:	28a0002c 	andhi	r2,r5,32768
  a01c88:	2084b03a 	or	r2,r4,r2
  a01c8c:	f800283a 	ret

00a01c90 <_fpadd_parts>:
  a01c90:	21c00017 	ldw	r7,0(r4)
  a01c94:	02000044 	movi	r8,1
  a01c98:	41c0332e 	bgeu	r8,r7,a01d68 <_fpadd_parts+0xd8>
  a01c9c:	28800017 	ldw	r2,0(r5)
  a01ca0:	4080462e 	bgeu	r8,r2,a01dbc <_fpadd_parts+0x12c>
  a01ca4:	00c00104 	movi	r3,4
  a01ca8:	38c06b26 	beq	r7,r3,a01e58 <_fpadd_parts+0x1c8>
  a01cac:	10c04326 	beq	r2,r3,a01dbc <_fpadd_parts+0x12c>
  a01cb0:	00c00084 	movi	r3,2
  a01cb4:	10c02e26 	beq	r2,r3,a01d70 <_fpadd_parts+0xe0>
  a01cb8:	38c04026 	beq	r7,r3,a01dbc <_fpadd_parts+0x12c>
  a01cbc:	22800217 	ldw	r10,8(r4)
  a01cc0:	28c00217 	ldw	r3,8(r5)
  a01cc4:	23000317 	ldw	r12,12(r4)
  a01cc8:	2a400317 	ldw	r9,12(r5)
  a01ccc:	50cfc83a 	sub	r7,r10,r3
  a01cd0:	3817883a 	mov	r11,r7
  a01cd4:	38004f16 	blt	r7,zero,a01e14 <_fpadd_parts+0x184>
  a01cd8:	008007c4 	movi	r2,31
  a01cdc:	11c03316 	blt	r2,r7,a01dac <_fpadd_parts+0x11c>
  a01ce0:	02c0540e 	bge	zero,r11,a01e34 <_fpadd_parts+0x1a4>
  a01ce4:	41c4983a 	sll	r2,r8,r7
  a01ce8:	49c6d83a 	srl	r3,r9,r7
  a01cec:	10bfffc4 	addi	r2,r2,-1
  a01cf0:	4884703a 	and	r2,r9,r2
  a01cf4:	1004c03a 	cmpne	r2,r2,zero
  a01cf8:	1892b03a 	or	r9,r3,r2
  a01cfc:	20c00117 	ldw	r3,4(r4)
  a01d00:	28800117 	ldw	r2,4(r5)
  a01d04:	18803c26 	beq	r3,r2,a01df8 <_fpadd_parts+0x168>
  a01d08:	18002f26 	beq	r3,zero,a01dc8 <_fpadd_parts+0x138>
  a01d0c:	4b05c83a 	sub	r2,r9,r12
  a01d10:	10004216 	blt	r2,zero,a01e1c <_fpadd_parts+0x18c>
  a01d14:	32800215 	stw	r10,8(r6)
  a01d18:	30800315 	stw	r2,12(r6)
  a01d1c:	30000115 	stw	zero,4(r6)
  a01d20:	31000317 	ldw	r4,12(r6)
  a01d24:	01d00034 	movhi	r7,16384
  a01d28:	39ffff84 	addi	r7,r7,-2
  a01d2c:	20bfffc4 	addi	r2,r4,-1
  a01d30:	2007883a 	mov	r3,r4
  a01d34:	38800836 	bltu	r7,r2,a01d58 <_fpadd_parts+0xc8>
  a01d38:	31400217 	ldw	r5,8(r6)
  a01d3c:	18c9883a 	add	r4,r3,r3
  a01d40:	20bfffc4 	addi	r2,r4,-1
  a01d44:	297fffc4 	addi	r5,r5,-1
  a01d48:	2007883a 	mov	r3,r4
  a01d4c:	38bffb2e 	bgeu	r7,r2,a01d3c <_fpadd_parts+0xac>
  a01d50:	31400215 	stw	r5,8(r6)
  a01d54:	31000315 	stw	r4,12(r6)
  a01d58:	008000c4 	movi	r2,3
  a01d5c:	30800015 	stw	r2,0(r6)
  a01d60:	20001b16 	blt	r4,zero,a01dd0 <_fpadd_parts+0x140>
  a01d64:	3009883a 	mov	r4,r6
  a01d68:	2005883a 	mov	r2,r4
  a01d6c:	f800283a 	ret
  a01d70:	38fffd1e 	bne	r7,r3,a01d68 <_fpadd_parts+0xd8>
  a01d74:	31c00015 	stw	r7,0(r6)
  a01d78:	20800117 	ldw	r2,4(r4)
  a01d7c:	30800115 	stw	r2,4(r6)
  a01d80:	20c00217 	ldw	r3,8(r4)
  a01d84:	30c00215 	stw	r3,8(r6)
  a01d88:	20800317 	ldw	r2,12(r4)
  a01d8c:	30800315 	stw	r2,12(r6)
  a01d90:	20c00117 	ldw	r3,4(r4)
  a01d94:	28800117 	ldw	r2,4(r5)
  a01d98:	3009883a 	mov	r4,r6
  a01d9c:	1886703a 	and	r3,r3,r2
  a01da0:	2005883a 	mov	r2,r4
  a01da4:	30c00115 	stw	r3,4(r6)
  a01da8:	f800283a 	ret
  a01dac:	1a801716 	blt	r3,r10,a01e0c <_fpadd_parts+0x17c>
  a01db0:	1815883a 	mov	r10,r3
  a01db4:	0019883a 	mov	r12,zero
  a01db8:	003fd006 	br	a01cfc <_fpadd_parts+0x6c>
  a01dbc:	2809883a 	mov	r4,r5
  a01dc0:	2005883a 	mov	r2,r4
  a01dc4:	f800283a 	ret
  a01dc8:	6245c83a 	sub	r2,r12,r9
  a01dcc:	003fd006 	br	a01d10 <_fpadd_parts+0x80>
  a01dd0:	30800217 	ldw	r2,8(r6)
  a01dd4:	2006d07a 	srli	r3,r4,1
  a01dd8:	2100004c 	andi	r4,r4,1
  a01ddc:	10800044 	addi	r2,r2,1
  a01de0:	1906b03a 	or	r3,r3,r4
  a01de4:	3009883a 	mov	r4,r6
  a01de8:	30800215 	stw	r2,8(r6)
  a01dec:	2005883a 	mov	r2,r4
  a01df0:	30c00315 	stw	r3,12(r6)
  a01df4:	f800283a 	ret
  a01df8:	4b09883a 	add	r4,r9,r12
  a01dfc:	30c00115 	stw	r3,4(r6)
  a01e00:	32800215 	stw	r10,8(r6)
  a01e04:	31000315 	stw	r4,12(r6)
  a01e08:	003fd306 	br	a01d58 <_fpadd_parts+0xc8>
  a01e0c:	0013883a 	mov	r9,zero
  a01e10:	003fba06 	br	a01cfc <_fpadd_parts+0x6c>
  a01e14:	01cfc83a 	sub	r7,zero,r7
  a01e18:	003faf06 	br	a01cd8 <_fpadd_parts+0x48>
  a01e1c:	0089c83a 	sub	r4,zero,r2
  a01e20:	00800044 	movi	r2,1
  a01e24:	30800115 	stw	r2,4(r6)
  a01e28:	32800215 	stw	r10,8(r6)
  a01e2c:	31000315 	stw	r4,12(r6)
  a01e30:	003fbb06 	br	a01d20 <_fpadd_parts+0x90>
  a01e34:	583fb126 	beq	r11,zero,a01cfc <_fpadd_parts+0x6c>
  a01e38:	41c4983a 	sll	r2,r8,r7
  a01e3c:	61c6d83a 	srl	r3,r12,r7
  a01e40:	51d5883a 	add	r10,r10,r7
  a01e44:	10bfffc4 	addi	r2,r2,-1
  a01e48:	6084703a 	and	r2,r12,r2
  a01e4c:	1004c03a 	cmpne	r2,r2,zero
  a01e50:	1898b03a 	or	r12,r3,r2
  a01e54:	003fa906 	br	a01cfc <_fpadd_parts+0x6c>
  a01e58:	11ffc31e 	bne	r2,r7,a01d68 <_fpadd_parts+0xd8>
  a01e5c:	28c00117 	ldw	r3,4(r5)
  a01e60:	20800117 	ldw	r2,4(r4)
  a01e64:	10ffc026 	beq	r2,r3,a01d68 <_fpadd_parts+0xd8>
  a01e68:	01002874 	movhi	r4,161
  a01e6c:	2102d504 	addi	r4,r4,2900
  a01e70:	003fbd06 	br	a01d68 <_fpadd_parts+0xd8>

00a01e74 <__subsf3>:
  a01e74:	deffef04 	addi	sp,sp,-68
  a01e78:	dcc00f15 	stw	r19,60(sp)
  a01e7c:	dcc00204 	addi	r19,sp,8
  a01e80:	dc400e15 	stw	r17,56(sp)
  a01e84:	d9000015 	stw	r4,0(sp)
  a01e88:	d9400115 	stw	r5,4(sp)
  a01e8c:	d809883a 	mov	r4,sp
  a01e90:	980b883a 	mov	r5,r19
  a01e94:	dc400604 	addi	r17,sp,24
  a01e98:	dfc01015 	stw	ra,64(sp)
  a01e9c:	0a030700 	call	a03070 <__unpack_f>
  a01ea0:	d9000104 	addi	r4,sp,4
  a01ea4:	880b883a 	mov	r5,r17
  a01ea8:	0a030700 	call	a03070 <__unpack_f>
  a01eac:	d8800717 	ldw	r2,28(sp)
  a01eb0:	9809883a 	mov	r4,r19
  a01eb4:	880b883a 	mov	r5,r17
  a01eb8:	d9800a04 	addi	r6,sp,40
  a01ebc:	1080005c 	xori	r2,r2,1
  a01ec0:	d8800715 	stw	r2,28(sp)
  a01ec4:	0a01c900 	call	a01c90 <_fpadd_parts>
  a01ec8:	1009883a 	mov	r4,r2
  a01ecc:	0a02f100 	call	a02f10 <__pack_f>
  a01ed0:	dfc01017 	ldw	ra,64(sp)
  a01ed4:	dcc00f17 	ldw	r19,60(sp)
  a01ed8:	dc400e17 	ldw	r17,56(sp)
  a01edc:	dec01104 	addi	sp,sp,68
  a01ee0:	f800283a 	ret

00a01ee4 <__addsf3>:
  a01ee4:	deffef04 	addi	sp,sp,-68
  a01ee8:	dcc00f15 	stw	r19,60(sp)
  a01eec:	dcc00204 	addi	r19,sp,8
  a01ef0:	dc400e15 	stw	r17,56(sp)
  a01ef4:	d9000015 	stw	r4,0(sp)
  a01ef8:	d9400115 	stw	r5,4(sp)
  a01efc:	d809883a 	mov	r4,sp
  a01f00:	980b883a 	mov	r5,r19
  a01f04:	dc400604 	addi	r17,sp,24
  a01f08:	dfc01015 	stw	ra,64(sp)
  a01f0c:	0a030700 	call	a03070 <__unpack_f>
  a01f10:	d9000104 	addi	r4,sp,4
  a01f14:	880b883a 	mov	r5,r17
  a01f18:	0a030700 	call	a03070 <__unpack_f>
  a01f1c:	d9800a04 	addi	r6,sp,40
  a01f20:	9809883a 	mov	r4,r19
  a01f24:	880b883a 	mov	r5,r17
  a01f28:	0a01c900 	call	a01c90 <_fpadd_parts>
  a01f2c:	1009883a 	mov	r4,r2
  a01f30:	0a02f100 	call	a02f10 <__pack_f>
  a01f34:	dfc01017 	ldw	ra,64(sp)
  a01f38:	dcc00f17 	ldw	r19,60(sp)
  a01f3c:	dc400e17 	ldw	r17,56(sp)
  a01f40:	dec01104 	addi	sp,sp,68
  a01f44:	f800283a 	ret

00a01f48 <__mulsf3>:
  a01f48:	deffef04 	addi	sp,sp,-68
  a01f4c:	dc400f15 	stw	r17,60(sp)
  a01f50:	dc400204 	addi	r17,sp,8
  a01f54:	dc000e15 	stw	r16,56(sp)
  a01f58:	d9000015 	stw	r4,0(sp)
  a01f5c:	d9400115 	stw	r5,4(sp)
  a01f60:	d809883a 	mov	r4,sp
  a01f64:	880b883a 	mov	r5,r17
  a01f68:	dc000604 	addi	r16,sp,24
  a01f6c:	dfc01015 	stw	ra,64(sp)
  a01f70:	0a030700 	call	a03070 <__unpack_f>
  a01f74:	d9000104 	addi	r4,sp,4
  a01f78:	800b883a 	mov	r5,r16
  a01f7c:	0a030700 	call	a03070 <__unpack_f>
  a01f80:	d9000217 	ldw	r4,8(sp)
  a01f84:	00800044 	movi	r2,1
  a01f88:	01400104 	movi	r5,4
  a01f8c:	1100142e 	bgeu	r2,r4,a01fe0 <__mulsf3+0x98>
  a01f90:	d8c00617 	ldw	r3,24(sp)
  a01f94:	10c0052e 	bgeu	r2,r3,a01fac <__mulsf3+0x64>
  a01f98:	21400f26 	beq	r4,r5,a01fd8 <__mulsf3+0x90>
  a01f9c:	19405d26 	beq	r3,r5,a02114 <__mulsf3+0x1cc>
  a01fa0:	00800084 	movi	r2,2
  a01fa4:	20800e26 	beq	r4,r2,a01fe0 <__mulsf3+0x98>
  a01fa8:	1880181e 	bne	r3,r2,a0200c <__mulsf3+0xc4>
  a01fac:	d8c00717 	ldw	r3,28(sp)
  a01fb0:	d8800317 	ldw	r2,12(sp)
  a01fb4:	8009883a 	mov	r4,r16
  a01fb8:	10c4c03a 	cmpne	r2,r2,r3
  a01fbc:	d8800715 	stw	r2,28(sp)
  a01fc0:	0a02f100 	call	a02f10 <__pack_f>
  a01fc4:	dfc01017 	ldw	ra,64(sp)
  a01fc8:	dc400f17 	ldw	r17,60(sp)
  a01fcc:	dc000e17 	ldw	r16,56(sp)
  a01fd0:	dec01104 	addi	sp,sp,68
  a01fd4:	f800283a 	ret
  a01fd8:	00800084 	movi	r2,2
  a01fdc:	18804f26 	beq	r3,r2,a0211c <__mulsf3+0x1d4>
  a01fe0:	d8800317 	ldw	r2,12(sp)
  a01fe4:	d8c00717 	ldw	r3,28(sp)
  a01fe8:	8809883a 	mov	r4,r17
  a01fec:	10c4c03a 	cmpne	r2,r2,r3
  a01ff0:	d8800315 	stw	r2,12(sp)
  a01ff4:	0a02f100 	call	a02f10 <__pack_f>
  a01ff8:	dfc01017 	ldw	ra,64(sp)
  a01ffc:	dc400f17 	ldw	r17,60(sp)
  a02000:	dc000e17 	ldw	r16,56(sp)
  a02004:	dec01104 	addi	sp,sp,68
  a02008:	f800283a 	ret
  a0200c:	d8800517 	ldw	r2,20(sp)
  a02010:	da000917 	ldw	r8,36(sp)
  a02014:	0013883a 	mov	r9,zero
  a02018:	0007883a 	mov	r3,zero
  a0201c:	480f883a 	mov	r7,r9
  a02020:	180b883a 	mov	r5,r3
  a02024:	400d883a 	mov	r6,r8
  a02028:	1009883a 	mov	r4,r2
  a0202c:	0a02df80 	call	a02df8 <__muldi3>
  a02030:	da800417 	ldw	r10,16(sp)
  a02034:	d9800817 	ldw	r6,32(sp)
  a02038:	da400317 	ldw	r9,12(sp)
  a0203c:	52800084 	addi	r10,r10,2
  a02040:	3295883a 	add	r10,r6,r10
  a02044:	d9800717 	ldw	r6,28(sp)
  a02048:	180b883a 	mov	r5,r3
  a0204c:	180f883a 	mov	r7,r3
  a02050:	4992c03a 	cmpne	r9,r9,r6
  a02054:	da400b15 	stw	r9,44(sp)
  a02058:	1007883a 	mov	r3,r2
  a0205c:	da800c15 	stw	r10,48(sp)
  a02060:	2800070e 	bge	r5,zero,a02080 <__mulsf3+0x138>
  a02064:	2880004c 	andi	r2,r5,1
  a02068:	1005003a 	cmpeq	r2,r2,zero
  a0206c:	500d883a 	mov	r6,r10
  a02070:	10001e26 	beq	r2,zero,a020ec <__mulsf3+0x1a4>
  a02074:	380ed07a 	srli	r7,r7,1
  a02078:	31800044 	addi	r6,r6,1
  a0207c:	d9800c15 	stw	r6,48(sp)
  a02080:	01100034 	movhi	r4,16384
  a02084:	213fffc4 	addi	r4,r4,-1
  a02088:	21c00b36 	bltu	r4,r7,a020b8 <__mulsf3+0x170>
  a0208c:	d8800c17 	ldw	r2,48(sp)
  a02090:	00000206 	br	a0209c <__mulsf3+0x154>
  a02094:	18c7883a 	add	r3,r3,r3
  a02098:	21c00636 	bltu	r4,r7,a020b4 <__mulsf3+0x16c>
  a0209c:	10bfffc4 	addi	r2,r2,-1
  a020a0:	39cf883a 	add	r7,r7,r7
  a020a4:	183ffb0e 	bge	r3,zero,a02094 <__mulsf3+0x14c>
  a020a8:	39c00054 	ori	r7,r7,1
  a020ac:	18c7883a 	add	r3,r3,r3
  a020b0:	21fffa2e 	bgeu	r4,r7,a0209c <__mulsf3+0x154>
  a020b4:	d8800c15 	stw	r2,48(sp)
  a020b8:	39001fcc 	andi	r4,r7,127
  a020bc:	00801004 	movi	r2,64
  a020c0:	20800d26 	beq	r4,r2,a020f8 <__mulsf3+0x1b0>
  a020c4:	008000c4 	movi	r2,3
  a020c8:	d9000a04 	addi	r4,sp,40
  a020cc:	d9c00d15 	stw	r7,52(sp)
  a020d0:	d8800a15 	stw	r2,40(sp)
  a020d4:	0a02f100 	call	a02f10 <__pack_f>
  a020d8:	dfc01017 	ldw	ra,64(sp)
  a020dc:	dc400f17 	ldw	r17,60(sp)
  a020e0:	dc000e17 	ldw	r16,56(sp)
  a020e4:	dec01104 	addi	sp,sp,68
  a020e8:	f800283a 	ret
  a020ec:	1804d07a 	srli	r2,r3,1
  a020f0:	10e00034 	orhi	r3,r2,32768
  a020f4:	003fdf06 	br	a02074 <__mulsf3+0x12c>
  a020f8:	3880200c 	andi	r2,r7,128
  a020fc:	103ff11e 	bne	r2,zero,a020c4 <__mulsf3+0x17c>
  a02100:	183ff026 	beq	r3,zero,a020c4 <__mulsf3+0x17c>
  a02104:	3907883a 	add	r3,r7,r4
  a02108:	00bfe004 	movi	r2,-128
  a0210c:	188e703a 	and	r7,r3,r2
  a02110:	003fec06 	br	a020c4 <__mulsf3+0x17c>
  a02114:	00800084 	movi	r2,2
  a02118:	20bfa41e 	bne	r4,r2,a01fac <__mulsf3+0x64>
  a0211c:	01002874 	movhi	r4,161
  a02120:	2102d504 	addi	r4,r4,2900
  a02124:	003fb306 	br	a01ff4 <__mulsf3+0xac>

00a02128 <__divsf3>:
  a02128:	defff304 	addi	sp,sp,-52
  a0212c:	dc400b15 	stw	r17,44(sp)
  a02130:	dc400204 	addi	r17,sp,8
  a02134:	dc000a15 	stw	r16,40(sp)
  a02138:	d9000015 	stw	r4,0(sp)
  a0213c:	d9400115 	stw	r5,4(sp)
  a02140:	d809883a 	mov	r4,sp
  a02144:	880b883a 	mov	r5,r17
  a02148:	dc000604 	addi	r16,sp,24
  a0214c:	dfc00c15 	stw	ra,48(sp)
  a02150:	0a030700 	call	a03070 <__unpack_f>
  a02154:	d9000104 	addi	r4,sp,4
  a02158:	800b883a 	mov	r5,r16
  a0215c:	0a030700 	call	a03070 <__unpack_f>
  a02160:	d9000217 	ldw	r4,8(sp)
  a02164:	00800044 	movi	r2,1
  a02168:	01800104 	movi	r6,4
  a0216c:	11000a2e 	bgeu	r2,r4,a02198 <__divsf3+0x70>
  a02170:	d9400617 	ldw	r5,24(sp)
  a02174:	1140432e 	bgeu	r2,r5,a02284 <__divsf3+0x15c>
  a02178:	d8800317 	ldw	r2,12(sp)
  a0217c:	d8c00717 	ldw	r3,28(sp)
  a02180:	10c4f03a 	xor	r2,r2,r3
  a02184:	d8800315 	stw	r2,12(sp)
  a02188:	21800226 	beq	r4,r6,a02194 <__divsf3+0x6c>
  a0218c:	00800084 	movi	r2,2
  a02190:	2080101e 	bne	r4,r2,a021d4 <__divsf3+0xac>
  a02194:	29000726 	beq	r5,r4,a021b4 <__divsf3+0x8c>
  a02198:	8809883a 	mov	r4,r17
  a0219c:	0a02f100 	call	a02f10 <__pack_f>
  a021a0:	dfc00c17 	ldw	ra,48(sp)
  a021a4:	dc400b17 	ldw	r17,44(sp)
  a021a8:	dc000a17 	ldw	r16,40(sp)
  a021ac:	dec00d04 	addi	sp,sp,52
  a021b0:	f800283a 	ret
  a021b4:	01002874 	movhi	r4,161
  a021b8:	2102d504 	addi	r4,r4,2900
  a021bc:	0a02f100 	call	a02f10 <__pack_f>
  a021c0:	dfc00c17 	ldw	ra,48(sp)
  a021c4:	dc400b17 	ldw	r17,44(sp)
  a021c8:	dc000a17 	ldw	r16,40(sp)
  a021cc:	dec00d04 	addi	sp,sp,52
  a021d0:	f800283a 	ret
  a021d4:	29802d26 	beq	r5,r6,a0228c <__divsf3+0x164>
  a021d8:	28801a26 	beq	r5,r2,a02244 <__divsf3+0x11c>
  a021dc:	d8c00417 	ldw	r3,16(sp)
  a021e0:	d8800817 	ldw	r2,32(sp)
  a021e4:	d9000517 	ldw	r4,20(sp)
  a021e8:	d9800917 	ldw	r6,36(sp)
  a021ec:	1885c83a 	sub	r2,r3,r2
  a021f0:	d8800415 	stw	r2,16(sp)
  a021f4:	2180032e 	bgeu	r4,r6,a02204 <__divsf3+0xdc>
  a021f8:	10bfffc4 	addi	r2,r2,-1
  a021fc:	d8800415 	stw	r2,16(sp)
  a02200:	2109883a 	add	r4,r4,r4
  a02204:	01500034 	movhi	r5,16384
  a02208:	0007883a 	mov	r3,zero
  a0220c:	0005883a 	mov	r2,zero
  a02210:	01c007c4 	movi	r7,31
  a02214:	10800044 	addi	r2,r2,1
  a02218:	21800236 	bltu	r4,r6,a02224 <__divsf3+0xfc>
  a0221c:	1946b03a 	or	r3,r3,r5
  a02220:	2189c83a 	sub	r4,r4,r6
  a02224:	280ad07a 	srli	r5,r5,1
  a02228:	2109883a 	add	r4,r4,r4
  a0222c:	11fff91e 	bne	r2,r7,a02214 <__divsf3+0xec>
  a02230:	19401fcc 	andi	r5,r3,127
  a02234:	00801004 	movi	r2,64
  a02238:	28800a26 	beq	r5,r2,a02264 <__divsf3+0x13c>
  a0223c:	d8c00515 	stw	r3,20(sp)
  a02240:	003fd506 	br	a02198 <__divsf3+0x70>
  a02244:	8809883a 	mov	r4,r17
  a02248:	d9800215 	stw	r6,8(sp)
  a0224c:	0a02f100 	call	a02f10 <__pack_f>
  a02250:	dfc00c17 	ldw	ra,48(sp)
  a02254:	dc400b17 	ldw	r17,44(sp)
  a02258:	dc000a17 	ldw	r16,40(sp)
  a0225c:	dec00d04 	addi	sp,sp,52
  a02260:	f800283a 	ret
  a02264:	1880200c 	andi	r2,r3,128
  a02268:	103ff41e 	bne	r2,zero,a0223c <__divsf3+0x114>
  a0226c:	203ff326 	beq	r4,zero,a0223c <__divsf3+0x114>
  a02270:	1947883a 	add	r3,r3,r5
  a02274:	00bfe004 	movi	r2,-128
  a02278:	1886703a 	and	r3,r3,r2
  a0227c:	d8c00515 	stw	r3,20(sp)
  a02280:	003fc506 	br	a02198 <__divsf3+0x70>
  a02284:	8009883a 	mov	r4,r16
  a02288:	003fc406 	br	a0219c <__divsf3+0x74>
  a0228c:	8809883a 	mov	r4,r17
  a02290:	d8000515 	stw	zero,20(sp)
  a02294:	d8000415 	stw	zero,16(sp)
  a02298:	003fc006 	br	a0219c <__divsf3+0x74>

00a0229c <__eqsf2>:
  a0229c:	defff304 	addi	sp,sp,-52
  a022a0:	dc400b15 	stw	r17,44(sp)
  a022a4:	dc400204 	addi	r17,sp,8
  a022a8:	dc000a15 	stw	r16,40(sp)
  a022ac:	d9000015 	stw	r4,0(sp)
  a022b0:	d9400115 	stw	r5,4(sp)
  a022b4:	d809883a 	mov	r4,sp
  a022b8:	880b883a 	mov	r5,r17
  a022bc:	dc000604 	addi	r16,sp,24
  a022c0:	dfc00c15 	stw	ra,48(sp)
  a022c4:	0a030700 	call	a03070 <__unpack_f>
  a022c8:	d9000104 	addi	r4,sp,4
  a022cc:	800b883a 	mov	r5,r16
  a022d0:	0a030700 	call	a03070 <__unpack_f>
  a022d4:	d8800217 	ldw	r2,8(sp)
  a022d8:	00c00044 	movi	r3,1
  a022dc:	180d883a 	mov	r6,r3
  a022e0:	1880062e 	bgeu	r3,r2,a022fc <__eqsf2+0x60>
  a022e4:	d8800617 	ldw	r2,24(sp)
  a022e8:	8809883a 	mov	r4,r17
  a022ec:	800b883a 	mov	r5,r16
  a022f0:	1880022e 	bgeu	r3,r2,a022fc <__eqsf2+0x60>
  a022f4:	0a031380 	call	a03138 <__fpcmp_parts_f>
  a022f8:	100d883a 	mov	r6,r2
  a022fc:	3005883a 	mov	r2,r6
  a02300:	dfc00c17 	ldw	ra,48(sp)
  a02304:	dc400b17 	ldw	r17,44(sp)
  a02308:	dc000a17 	ldw	r16,40(sp)
  a0230c:	dec00d04 	addi	sp,sp,52
  a02310:	f800283a 	ret

00a02314 <__gtsf2>:
  a02314:	defff304 	addi	sp,sp,-52
  a02318:	dc400b15 	stw	r17,44(sp)
  a0231c:	dc400204 	addi	r17,sp,8
  a02320:	dc000a15 	stw	r16,40(sp)
  a02324:	d9000015 	stw	r4,0(sp)
  a02328:	d9400115 	stw	r5,4(sp)
  a0232c:	d809883a 	mov	r4,sp
  a02330:	880b883a 	mov	r5,r17
  a02334:	dc000604 	addi	r16,sp,24
  a02338:	dfc00c15 	stw	ra,48(sp)
  a0233c:	0a030700 	call	a03070 <__unpack_f>
  a02340:	d9000104 	addi	r4,sp,4
  a02344:	800b883a 	mov	r5,r16
  a02348:	0a030700 	call	a03070 <__unpack_f>
  a0234c:	d8800217 	ldw	r2,8(sp)
  a02350:	00c00044 	movi	r3,1
  a02354:	01bfffc4 	movi	r6,-1
  a02358:	1880062e 	bgeu	r3,r2,a02374 <__gtsf2+0x60>
  a0235c:	d8800617 	ldw	r2,24(sp)
  a02360:	8809883a 	mov	r4,r17
  a02364:	800b883a 	mov	r5,r16
  a02368:	1880022e 	bgeu	r3,r2,a02374 <__gtsf2+0x60>
  a0236c:	0a031380 	call	a03138 <__fpcmp_parts_f>
  a02370:	100d883a 	mov	r6,r2
  a02374:	3005883a 	mov	r2,r6
  a02378:	dfc00c17 	ldw	ra,48(sp)
  a0237c:	dc400b17 	ldw	r17,44(sp)
  a02380:	dc000a17 	ldw	r16,40(sp)
  a02384:	dec00d04 	addi	sp,sp,52
  a02388:	f800283a 	ret

00a0238c <__ltsf2>:
  a0238c:	defff304 	addi	sp,sp,-52
  a02390:	dc400b15 	stw	r17,44(sp)
  a02394:	dc400204 	addi	r17,sp,8
  a02398:	dc000a15 	stw	r16,40(sp)
  a0239c:	d9000015 	stw	r4,0(sp)
  a023a0:	d9400115 	stw	r5,4(sp)
  a023a4:	d809883a 	mov	r4,sp
  a023a8:	880b883a 	mov	r5,r17
  a023ac:	dc000604 	addi	r16,sp,24
  a023b0:	dfc00c15 	stw	ra,48(sp)
  a023b4:	0a030700 	call	a03070 <__unpack_f>
  a023b8:	d9000104 	addi	r4,sp,4
  a023bc:	800b883a 	mov	r5,r16
  a023c0:	0a030700 	call	a03070 <__unpack_f>
  a023c4:	d8800217 	ldw	r2,8(sp)
  a023c8:	00c00044 	movi	r3,1
  a023cc:	180d883a 	mov	r6,r3
  a023d0:	1880062e 	bgeu	r3,r2,a023ec <__ltsf2+0x60>
  a023d4:	d8800617 	ldw	r2,24(sp)
  a023d8:	8809883a 	mov	r4,r17
  a023dc:	800b883a 	mov	r5,r16
  a023e0:	1880022e 	bgeu	r3,r2,a023ec <__ltsf2+0x60>
  a023e4:	0a031380 	call	a03138 <__fpcmp_parts_f>
  a023e8:	100d883a 	mov	r6,r2
  a023ec:	3005883a 	mov	r2,r6
  a023f0:	dfc00c17 	ldw	ra,48(sp)
  a023f4:	dc400b17 	ldw	r17,44(sp)
  a023f8:	dc000a17 	ldw	r16,40(sp)
  a023fc:	dec00d04 	addi	sp,sp,52
  a02400:	f800283a 	ret

00a02404 <__lesf2>:
  a02404:	defff304 	addi	sp,sp,-52
  a02408:	dc400b15 	stw	r17,44(sp)
  a0240c:	dc400204 	addi	r17,sp,8
  a02410:	dc000a15 	stw	r16,40(sp)
  a02414:	d9000015 	stw	r4,0(sp)
  a02418:	d9400115 	stw	r5,4(sp)
  a0241c:	d809883a 	mov	r4,sp
  a02420:	880b883a 	mov	r5,r17
  a02424:	dc000604 	addi	r16,sp,24
  a02428:	dfc00c15 	stw	ra,48(sp)
  a0242c:	0a030700 	call	a03070 <__unpack_f>
  a02430:	d9000104 	addi	r4,sp,4
  a02434:	800b883a 	mov	r5,r16
  a02438:	0a030700 	call	a03070 <__unpack_f>
  a0243c:	d8800217 	ldw	r2,8(sp)
  a02440:	00c00044 	movi	r3,1
  a02444:	180d883a 	mov	r6,r3
  a02448:	1880062e 	bgeu	r3,r2,a02464 <__lesf2+0x60>
  a0244c:	d8800617 	ldw	r2,24(sp)
  a02450:	8809883a 	mov	r4,r17
  a02454:	800b883a 	mov	r5,r16
  a02458:	1880022e 	bgeu	r3,r2,a02464 <__lesf2+0x60>
  a0245c:	0a031380 	call	a03138 <__fpcmp_parts_f>
  a02460:	100d883a 	mov	r6,r2
  a02464:	3005883a 	mov	r2,r6
  a02468:	dfc00c17 	ldw	ra,48(sp)
  a0246c:	dc400b17 	ldw	r17,44(sp)
  a02470:	dc000a17 	ldw	r16,40(sp)
  a02474:	dec00d04 	addi	sp,sp,52
  a02478:	f800283a 	ret

00a0247c <__floatsisf>:
  a0247c:	2006d7fa 	srli	r3,r4,31
  a02480:	defffa04 	addi	sp,sp,-24
  a02484:	008000c4 	movi	r2,3
  a02488:	dfc00515 	stw	ra,20(sp)
  a0248c:	dc000415 	stw	r16,16(sp)
  a02490:	d8800015 	stw	r2,0(sp)
  a02494:	d8c00115 	stw	r3,4(sp)
  a02498:	2000081e 	bne	r4,zero,a024bc <__floatsisf+0x40>
  a0249c:	00800084 	movi	r2,2
  a024a0:	d8800015 	stw	r2,0(sp)
  a024a4:	d809883a 	mov	r4,sp
  a024a8:	0a02f100 	call	a02f10 <__pack_f>
  a024ac:	dfc00517 	ldw	ra,20(sp)
  a024b0:	dc000417 	ldw	r16,16(sp)
  a024b4:	dec00604 	addi	sp,sp,24
  a024b8:	f800283a 	ret
  a024bc:	00800784 	movi	r2,30
  a024c0:	1807003a 	cmpeq	r3,r3,zero
  a024c4:	d8800215 	stw	r2,8(sp)
  a024c8:	18000e1e 	bne	r3,zero,a02504 <__floatsisf+0x88>
  a024cc:	00a00034 	movhi	r2,32768
  a024d0:	20800e26 	beq	r4,r2,a0250c <__floatsisf+0x90>
  a024d4:	0121c83a 	sub	r16,zero,r4
  a024d8:	8009883a 	mov	r4,r16
  a024dc:	dc000315 	stw	r16,12(sp)
  a024e0:	0a02e900 	call	a02e90 <__clzsi2>
  a024e4:	117fffc4 	addi	r5,r2,-1
  a024e8:	017fee0e 	bge	zero,r5,a024a4 <__floatsisf+0x28>
  a024ec:	d8800217 	ldw	r2,8(sp)
  a024f0:	8146983a 	sll	r3,r16,r5
  a024f4:	1145c83a 	sub	r2,r2,r5
  a024f8:	d8c00315 	stw	r3,12(sp)
  a024fc:	d8800215 	stw	r2,8(sp)
  a02500:	003fe806 	br	a024a4 <__floatsisf+0x28>
  a02504:	2021883a 	mov	r16,r4
  a02508:	003ff306 	br	a024d8 <__floatsisf+0x5c>
  a0250c:	00b3c034 	movhi	r2,52992
  a02510:	003fe606 	br	a024ac <__floatsisf+0x30>

00a02514 <__extendsfdf2>:
  a02514:	defff904 	addi	sp,sp,-28
  a02518:	d9000115 	stw	r4,4(sp)
  a0251c:	d9400204 	addi	r5,sp,8
  a02520:	d9000104 	addi	r4,sp,4
  a02524:	dfc00615 	stw	ra,24(sp)
  a02528:	0a030700 	call	a03070 <__unpack_f>
  a0252c:	d9c00517 	ldw	r7,20(sp)
  a02530:	0011883a 	mov	r8,zero
  a02534:	400697ba 	slli	r3,r8,30
  a02538:	3812d0ba 	srli	r9,r7,2
  a0253c:	380497ba 	slli	r2,r7,30
  a02540:	d9000217 	ldw	r4,8(sp)
  a02544:	d9400317 	ldw	r5,12(sp)
  a02548:	d9800417 	ldw	r6,16(sp)
  a0254c:	48c6b03a 	or	r3,r9,r3
  a02550:	100f883a 	mov	r7,r2
  a02554:	d8c00015 	stw	r3,0(sp)
  a02558:	0a02d4c0 	call	a02d4c <__make_dp>
  a0255c:	dfc00617 	ldw	ra,24(sp)
  a02560:	dec00704 	addi	sp,sp,28
  a02564:	f800283a 	ret

00a02568 <_fpadd_parts>:
  a02568:	defff804 	addi	sp,sp,-32
  a0256c:	dcc00315 	stw	r19,12(sp)
  a02570:	2027883a 	mov	r19,r4
  a02574:	21000017 	ldw	r4,0(r4)
  a02578:	00c00044 	movi	r3,1
  a0257c:	dd400515 	stw	r21,20(sp)
  a02580:	dd000415 	stw	r20,16(sp)
  a02584:	ddc00715 	stw	r23,28(sp)
  a02588:	dd800615 	stw	r22,24(sp)
  a0258c:	dc800215 	stw	r18,8(sp)
  a02590:	dc400115 	stw	r17,4(sp)
  a02594:	dc000015 	stw	r16,0(sp)
  a02598:	282b883a 	mov	r21,r5
  a0259c:	3029883a 	mov	r20,r6
  a025a0:	1900632e 	bgeu	r3,r4,a02730 <_fpadd_parts+0x1c8>
  a025a4:	28800017 	ldw	r2,0(r5)
  a025a8:	1880812e 	bgeu	r3,r2,a027b0 <_fpadd_parts+0x248>
  a025ac:	00c00104 	movi	r3,4
  a025b0:	20c0dc26 	beq	r4,r3,a02924 <_fpadd_parts+0x3bc>
  a025b4:	10c07e26 	beq	r2,r3,a027b0 <_fpadd_parts+0x248>
  a025b8:	00c00084 	movi	r3,2
  a025bc:	10c06726 	beq	r2,r3,a0275c <_fpadd_parts+0x1f4>
  a025c0:	20c07b26 	beq	r4,r3,a027b0 <_fpadd_parts+0x248>
  a025c4:	9dc00217 	ldw	r23,8(r19)
  a025c8:	28c00217 	ldw	r3,8(r5)
  a025cc:	9c400317 	ldw	r17,12(r19)
  a025d0:	2bc00317 	ldw	r15,12(r5)
  a025d4:	b8cdc83a 	sub	r6,r23,r3
  a025d8:	9c800417 	ldw	r18,16(r19)
  a025dc:	2c000417 	ldw	r16,16(r5)
  a025e0:	3009883a 	mov	r4,r6
  a025e4:	30009716 	blt	r6,zero,a02844 <_fpadd_parts+0x2dc>
  a025e8:	00800fc4 	movi	r2,63
  a025ec:	11806b16 	blt	r2,r6,a0279c <_fpadd_parts+0x234>
  a025f0:	0100a40e 	bge	zero,r4,a02884 <_fpadd_parts+0x31c>
  a025f4:	35bff804 	addi	r22,r6,-32
  a025f8:	b000bc16 	blt	r22,zero,a028ec <_fpadd_parts+0x384>
  a025fc:	8596d83a 	srl	r11,r16,r22
  a02600:	0019883a 	mov	r12,zero
  a02604:	0013883a 	mov	r9,zero
  a02608:	01000044 	movi	r4,1
  a0260c:	0015883a 	mov	r10,zero
  a02610:	b000be16 	blt	r22,zero,a0290c <_fpadd_parts+0x3a4>
  a02614:	2590983a 	sll	r8,r4,r22
  a02618:	000f883a 	mov	r7,zero
  a0261c:	00bfffc4 	movi	r2,-1
  a02620:	3889883a 	add	r4,r7,r2
  a02624:	408b883a 	add	r5,r8,r2
  a02628:	21cd803a 	cmpltu	r6,r4,r7
  a0262c:	314b883a 	add	r5,r6,r5
  a02630:	7904703a 	and	r2,r15,r4
  a02634:	8146703a 	and	r3,r16,r5
  a02638:	10c4b03a 	or	r2,r2,r3
  a0263c:	10000226 	beq	r2,zero,a02648 <_fpadd_parts+0xe0>
  a02640:	02400044 	movi	r9,1
  a02644:	0015883a 	mov	r10,zero
  a02648:	5a5eb03a 	or	r15,r11,r9
  a0264c:	62a0b03a 	or	r16,r12,r10
  a02650:	99400117 	ldw	r5,4(r19)
  a02654:	a8800117 	ldw	r2,4(r21)
  a02658:	28806e26 	beq	r5,r2,a02814 <_fpadd_parts+0x2ac>
  a0265c:	28006626 	beq	r5,zero,a027f8 <_fpadd_parts+0x290>
  a02660:	7c45c83a 	sub	r2,r15,r17
  a02664:	7889803a 	cmpltu	r4,r15,r2
  a02668:	8487c83a 	sub	r3,r16,r18
  a0266c:	1909c83a 	sub	r4,r3,r4
  a02670:	100d883a 	mov	r6,r2
  a02674:	200f883a 	mov	r7,r4
  a02678:	38007716 	blt	r7,zero,a02858 <_fpadd_parts+0x2f0>
  a0267c:	a5c00215 	stw	r23,8(r20)
  a02680:	a1c00415 	stw	r7,16(r20)
  a02684:	a0000115 	stw	zero,4(r20)
  a02688:	a1800315 	stw	r6,12(r20)
  a0268c:	a2000317 	ldw	r8,12(r20)
  a02690:	a2400417 	ldw	r9,16(r20)
  a02694:	00bfffc4 	movi	r2,-1
  a02698:	408b883a 	add	r5,r8,r2
  a0269c:	2a09803a 	cmpltu	r4,r5,r8
  a026a0:	488d883a 	add	r6,r9,r2
  a026a4:	01c40034 	movhi	r7,4096
  a026a8:	39ffffc4 	addi	r7,r7,-1
  a026ac:	218d883a 	add	r6,r4,r6
  a026b0:	39801736 	bltu	r7,r6,a02710 <_fpadd_parts+0x1a8>
  a026b4:	31c06526 	beq	r6,r7,a0284c <_fpadd_parts+0x2e4>
  a026b8:	a3000217 	ldw	r12,8(r20)
  a026bc:	4209883a 	add	r4,r8,r8
  a026c0:	00bfffc4 	movi	r2,-1
  a026c4:	220f803a 	cmpltu	r7,r4,r8
  a026c8:	4a4b883a 	add	r5,r9,r9
  a026cc:	394f883a 	add	r7,r7,r5
  a026d0:	2095883a 	add	r10,r4,r2
  a026d4:	3897883a 	add	r11,r7,r2
  a026d8:	510d803a 	cmpltu	r6,r10,r4
  a026dc:	6099883a 	add	r12,r12,r2
  a026e0:	32d7883a 	add	r11,r6,r11
  a026e4:	00840034 	movhi	r2,4096
  a026e8:	10bfffc4 	addi	r2,r2,-1
  a026ec:	2011883a 	mov	r8,r4
  a026f0:	3813883a 	mov	r9,r7
  a026f4:	a1000315 	stw	r4,12(r20)
  a026f8:	a1c00415 	stw	r7,16(r20)
  a026fc:	a3000215 	stw	r12,8(r20)
  a02700:	12c00336 	bltu	r2,r11,a02710 <_fpadd_parts+0x1a8>
  a02704:	58bfed1e 	bne	r11,r2,a026bc <_fpadd_parts+0x154>
  a02708:	00bfff84 	movi	r2,-2
  a0270c:	12bfeb2e 	bgeu	r2,r10,a026bc <_fpadd_parts+0x154>
  a02710:	a2800417 	ldw	r10,16(r20)
  a02714:	008000c4 	movi	r2,3
  a02718:	00c80034 	movhi	r3,8192
  a0271c:	18ffffc4 	addi	r3,r3,-1
  a02720:	a2400317 	ldw	r9,12(r20)
  a02724:	a0800015 	stw	r2,0(r20)
  a02728:	1a802336 	bltu	r3,r10,a027b8 <_fpadd_parts+0x250>
  a0272c:	a027883a 	mov	r19,r20
  a02730:	9805883a 	mov	r2,r19
  a02734:	ddc00717 	ldw	r23,28(sp)
  a02738:	dd800617 	ldw	r22,24(sp)
  a0273c:	dd400517 	ldw	r21,20(sp)
  a02740:	dd000417 	ldw	r20,16(sp)
  a02744:	dcc00317 	ldw	r19,12(sp)
  a02748:	dc800217 	ldw	r18,8(sp)
  a0274c:	dc400117 	ldw	r17,4(sp)
  a02750:	dc000017 	ldw	r16,0(sp)
  a02754:	dec00804 	addi	sp,sp,32
  a02758:	f800283a 	ret
  a0275c:	20fff41e 	bne	r4,r3,a02730 <_fpadd_parts+0x1c8>
  a02760:	31000015 	stw	r4,0(r6)
  a02764:	98800117 	ldw	r2,4(r19)
  a02768:	30800115 	stw	r2,4(r6)
  a0276c:	98c00217 	ldw	r3,8(r19)
  a02770:	30c00215 	stw	r3,8(r6)
  a02774:	98800317 	ldw	r2,12(r19)
  a02778:	30800315 	stw	r2,12(r6)
  a0277c:	98c00417 	ldw	r3,16(r19)
  a02780:	30c00415 	stw	r3,16(r6)
  a02784:	98800117 	ldw	r2,4(r19)
  a02788:	28c00117 	ldw	r3,4(r5)
  a0278c:	3027883a 	mov	r19,r6
  a02790:	10c4703a 	and	r2,r2,r3
  a02794:	30800115 	stw	r2,4(r6)
  a02798:	003fe506 	br	a02730 <_fpadd_parts+0x1c8>
  a0279c:	1dc02616 	blt	r3,r23,a02838 <_fpadd_parts+0x2d0>
  a027a0:	0023883a 	mov	r17,zero
  a027a4:	182f883a 	mov	r23,r3
  a027a8:	0025883a 	mov	r18,zero
  a027ac:	003fa806 	br	a02650 <_fpadd_parts+0xe8>
  a027b0:	a827883a 	mov	r19,r21
  a027b4:	003fde06 	br	a02730 <_fpadd_parts+0x1c8>
  a027b8:	01800044 	movi	r6,1
  a027bc:	500497fa 	slli	r2,r10,31
  a027c0:	4808d07a 	srli	r4,r9,1
  a027c4:	518ad83a 	srl	r5,r10,r6
  a027c8:	a2000217 	ldw	r8,8(r20)
  a027cc:	1108b03a 	or	r4,r2,r4
  a027d0:	0007883a 	mov	r3,zero
  a027d4:	4984703a 	and	r2,r9,r6
  a027d8:	208cb03a 	or	r6,r4,r2
  a027dc:	28ceb03a 	or	r7,r5,r3
  a027e0:	42000044 	addi	r8,r8,1
  a027e4:	a027883a 	mov	r19,r20
  a027e8:	a1c00415 	stw	r7,16(r20)
  a027ec:	a2000215 	stw	r8,8(r20)
  a027f0:	a1800315 	stw	r6,12(r20)
  a027f4:	003fce06 	br	a02730 <_fpadd_parts+0x1c8>
  a027f8:	8bc5c83a 	sub	r2,r17,r15
  a027fc:	8889803a 	cmpltu	r4,r17,r2
  a02800:	9407c83a 	sub	r3,r18,r16
  a02804:	1909c83a 	sub	r4,r3,r4
  a02808:	100d883a 	mov	r6,r2
  a0280c:	200f883a 	mov	r7,r4
  a02810:	003f9906 	br	a02678 <_fpadd_parts+0x110>
  a02814:	7c45883a 	add	r2,r15,r17
  a02818:	13c9803a 	cmpltu	r4,r2,r15
  a0281c:	8487883a 	add	r3,r16,r18
  a02820:	20c9883a 	add	r4,r4,r3
  a02824:	a1400115 	stw	r5,4(r20)
  a02828:	a5c00215 	stw	r23,8(r20)
  a0282c:	a0800315 	stw	r2,12(r20)
  a02830:	a1000415 	stw	r4,16(r20)
  a02834:	003fb606 	br	a02710 <_fpadd_parts+0x1a8>
  a02838:	001f883a 	mov	r15,zero
  a0283c:	0021883a 	mov	r16,zero
  a02840:	003f8306 	br	a02650 <_fpadd_parts+0xe8>
  a02844:	018dc83a 	sub	r6,zero,r6
  a02848:	003f6706 	br	a025e8 <_fpadd_parts+0x80>
  a0284c:	00bfff84 	movi	r2,-2
  a02850:	117faf36 	bltu	r2,r5,a02710 <_fpadd_parts+0x1a8>
  a02854:	003f9806 	br	a026b8 <_fpadd_parts+0x150>
  a02858:	0005883a 	mov	r2,zero
  a0285c:	1189c83a 	sub	r4,r2,r6
  a02860:	1105803a 	cmpltu	r2,r2,r4
  a02864:	01cbc83a 	sub	r5,zero,r7
  a02868:	2885c83a 	sub	r2,r5,r2
  a0286c:	01800044 	movi	r6,1
  a02870:	a1800115 	stw	r6,4(r20)
  a02874:	a5c00215 	stw	r23,8(r20)
  a02878:	a1000315 	stw	r4,12(r20)
  a0287c:	a0800415 	stw	r2,16(r20)
  a02880:	003f8206 	br	a0268c <_fpadd_parts+0x124>
  a02884:	203f7226 	beq	r4,zero,a02650 <_fpadd_parts+0xe8>
  a02888:	35bff804 	addi	r22,r6,-32
  a0288c:	b9af883a 	add	r23,r23,r6
  a02890:	b0003116 	blt	r22,zero,a02958 <_fpadd_parts+0x3f0>
  a02894:	959ad83a 	srl	r13,r18,r22
  a02898:	001d883a 	mov	r14,zero
  a0289c:	000f883a 	mov	r7,zero
  a028a0:	01000044 	movi	r4,1
  a028a4:	0011883a 	mov	r8,zero
  a028a8:	b0002516 	blt	r22,zero,a02940 <_fpadd_parts+0x3d8>
  a028ac:	2594983a 	sll	r10,r4,r22
  a028b0:	0013883a 	mov	r9,zero
  a028b4:	00bfffc4 	movi	r2,-1
  a028b8:	4889883a 	add	r4,r9,r2
  a028bc:	508b883a 	add	r5,r10,r2
  a028c0:	224d803a 	cmpltu	r6,r4,r9
  a028c4:	314b883a 	add	r5,r6,r5
  a028c8:	8904703a 	and	r2,r17,r4
  a028cc:	9146703a 	and	r3,r18,r5
  a028d0:	10c4b03a 	or	r2,r2,r3
  a028d4:	10000226 	beq	r2,zero,a028e0 <_fpadd_parts+0x378>
  a028d8:	01c00044 	movi	r7,1
  a028dc:	0011883a 	mov	r8,zero
  a028e0:	69e2b03a 	or	r17,r13,r7
  a028e4:	7224b03a 	or	r18,r14,r8
  a028e8:	003f5906 	br	a02650 <_fpadd_parts+0xe8>
  a028ec:	8407883a 	add	r3,r16,r16
  a028f0:	008007c4 	movi	r2,31
  a028f4:	1185c83a 	sub	r2,r2,r6
  a028f8:	1886983a 	sll	r3,r3,r2
  a028fc:	7996d83a 	srl	r11,r15,r6
  a02900:	8198d83a 	srl	r12,r16,r6
  a02904:	1ad6b03a 	or	r11,r3,r11
  a02908:	003f3e06 	br	a02604 <_fpadd_parts+0x9c>
  a0290c:	2006d07a 	srli	r3,r4,1
  a02910:	008007c4 	movi	r2,31
  a02914:	1185c83a 	sub	r2,r2,r6
  a02918:	1890d83a 	srl	r8,r3,r2
  a0291c:	218e983a 	sll	r7,r4,r6
  a02920:	003f3e06 	br	a0261c <_fpadd_parts+0xb4>
  a02924:	113f821e 	bne	r2,r4,a02730 <_fpadd_parts+0x1c8>
  a02928:	28c00117 	ldw	r3,4(r5)
  a0292c:	98800117 	ldw	r2,4(r19)
  a02930:	10ff7f26 	beq	r2,r3,a02730 <_fpadd_parts+0x1c8>
  a02934:	04c02874 	movhi	r19,161
  a02938:	9cc2d904 	addi	r19,r19,2916
  a0293c:	003f7c06 	br	a02730 <_fpadd_parts+0x1c8>
  a02940:	2006d07a 	srli	r3,r4,1
  a02944:	008007c4 	movi	r2,31
  a02948:	1185c83a 	sub	r2,r2,r6
  a0294c:	1894d83a 	srl	r10,r3,r2
  a02950:	2192983a 	sll	r9,r4,r6
  a02954:	003fd706 	br	a028b4 <_fpadd_parts+0x34c>
  a02958:	9487883a 	add	r3,r18,r18
  a0295c:	008007c4 	movi	r2,31
  a02960:	1185c83a 	sub	r2,r2,r6
  a02964:	1886983a 	sll	r3,r3,r2
  a02968:	899ad83a 	srl	r13,r17,r6
  a0296c:	919cd83a 	srl	r14,r18,r6
  a02970:	1b5ab03a 	or	r13,r3,r13
  a02974:	003fc906 	br	a0289c <_fpadd_parts+0x334>

00a02978 <__subdf3>:
  a02978:	deffea04 	addi	sp,sp,-88
  a0297c:	dcc01415 	stw	r19,80(sp)
  a02980:	dcc00404 	addi	r19,sp,16
  a02984:	2011883a 	mov	r8,r4
  a02988:	2813883a 	mov	r9,r5
  a0298c:	dc401315 	stw	r17,76(sp)
  a02990:	d809883a 	mov	r4,sp
  a02994:	980b883a 	mov	r5,r19
  a02998:	dc400904 	addi	r17,sp,36
  a0299c:	dfc01515 	stw	ra,84(sp)
  a029a0:	da400115 	stw	r9,4(sp)
  a029a4:	d9c00315 	stw	r7,12(sp)
  a029a8:	da000015 	stw	r8,0(sp)
  a029ac:	d9800215 	stw	r6,8(sp)
  a029b0:	0a035200 	call	a03520 <__unpack_d>
  a029b4:	d9000204 	addi	r4,sp,8
  a029b8:	880b883a 	mov	r5,r17
  a029bc:	0a035200 	call	a03520 <__unpack_d>
  a029c0:	d8800a17 	ldw	r2,40(sp)
  a029c4:	880b883a 	mov	r5,r17
  a029c8:	9809883a 	mov	r4,r19
  a029cc:	d9800e04 	addi	r6,sp,56
  a029d0:	1080005c 	xori	r2,r2,1
  a029d4:	d8800a15 	stw	r2,40(sp)
  a029d8:	0a025680 	call	a02568 <_fpadd_parts>
  a029dc:	1009883a 	mov	r4,r2
  a029e0:	0a0320c0 	call	a0320c <__pack_d>
  a029e4:	dfc01517 	ldw	ra,84(sp)
  a029e8:	dcc01417 	ldw	r19,80(sp)
  a029ec:	dc401317 	ldw	r17,76(sp)
  a029f0:	dec01604 	addi	sp,sp,88
  a029f4:	f800283a 	ret

00a029f8 <__adddf3>:
  a029f8:	deffea04 	addi	sp,sp,-88
  a029fc:	dcc01415 	stw	r19,80(sp)
  a02a00:	dcc00404 	addi	r19,sp,16
  a02a04:	2011883a 	mov	r8,r4
  a02a08:	2813883a 	mov	r9,r5
  a02a0c:	dc401315 	stw	r17,76(sp)
  a02a10:	d809883a 	mov	r4,sp
  a02a14:	980b883a 	mov	r5,r19
  a02a18:	dc400904 	addi	r17,sp,36
  a02a1c:	dfc01515 	stw	ra,84(sp)
  a02a20:	da400115 	stw	r9,4(sp)
  a02a24:	d9c00315 	stw	r7,12(sp)
  a02a28:	da000015 	stw	r8,0(sp)
  a02a2c:	d9800215 	stw	r6,8(sp)
  a02a30:	0a035200 	call	a03520 <__unpack_d>
  a02a34:	d9000204 	addi	r4,sp,8
  a02a38:	880b883a 	mov	r5,r17
  a02a3c:	0a035200 	call	a03520 <__unpack_d>
  a02a40:	d9800e04 	addi	r6,sp,56
  a02a44:	9809883a 	mov	r4,r19
  a02a48:	880b883a 	mov	r5,r17
  a02a4c:	0a025680 	call	a02568 <_fpadd_parts>
  a02a50:	1009883a 	mov	r4,r2
  a02a54:	0a0320c0 	call	a0320c <__pack_d>
  a02a58:	dfc01517 	ldw	ra,84(sp)
  a02a5c:	dcc01417 	ldw	r19,80(sp)
  a02a60:	dc401317 	ldw	r17,76(sp)
  a02a64:	dec01604 	addi	sp,sp,88
  a02a68:	f800283a 	ret

00a02a6c <__divdf3>:
  a02a6c:	deffed04 	addi	sp,sp,-76
  a02a70:	dcc01115 	stw	r19,68(sp)
  a02a74:	dcc00404 	addi	r19,sp,16
  a02a78:	2011883a 	mov	r8,r4
  a02a7c:	2813883a 	mov	r9,r5
  a02a80:	dc000e15 	stw	r16,56(sp)
  a02a84:	d809883a 	mov	r4,sp
  a02a88:	980b883a 	mov	r5,r19
  a02a8c:	dc000904 	addi	r16,sp,36
  a02a90:	dfc01215 	stw	ra,72(sp)
  a02a94:	da400115 	stw	r9,4(sp)
  a02a98:	d9c00315 	stw	r7,12(sp)
  a02a9c:	da000015 	stw	r8,0(sp)
  a02aa0:	d9800215 	stw	r6,8(sp)
  a02aa4:	dc801015 	stw	r18,64(sp)
  a02aa8:	dc400f15 	stw	r17,60(sp)
  a02aac:	0a035200 	call	a03520 <__unpack_d>
  a02ab0:	d9000204 	addi	r4,sp,8
  a02ab4:	800b883a 	mov	r5,r16
  a02ab8:	0a035200 	call	a03520 <__unpack_d>
  a02abc:	d9000417 	ldw	r4,16(sp)
  a02ac0:	00800044 	movi	r2,1
  a02ac4:	11000b2e 	bgeu	r2,r4,a02af4 <__divdf3+0x88>
  a02ac8:	d9400917 	ldw	r5,36(sp)
  a02acc:	1140762e 	bgeu	r2,r5,a02ca8 <__divdf3+0x23c>
  a02ad0:	d8800517 	ldw	r2,20(sp)
  a02ad4:	d8c00a17 	ldw	r3,40(sp)
  a02ad8:	01800104 	movi	r6,4
  a02adc:	10c4f03a 	xor	r2,r2,r3
  a02ae0:	d8800515 	stw	r2,20(sp)
  a02ae4:	21800226 	beq	r4,r6,a02af0 <__divdf3+0x84>
  a02ae8:	00800084 	movi	r2,2
  a02aec:	2080141e 	bne	r4,r2,a02b40 <__divdf3+0xd4>
  a02af0:	29000926 	beq	r5,r4,a02b18 <__divdf3+0xac>
  a02af4:	9809883a 	mov	r4,r19
  a02af8:	0a0320c0 	call	a0320c <__pack_d>
  a02afc:	dfc01217 	ldw	ra,72(sp)
  a02b00:	dcc01117 	ldw	r19,68(sp)
  a02b04:	dc801017 	ldw	r18,64(sp)
  a02b08:	dc400f17 	ldw	r17,60(sp)
  a02b0c:	dc000e17 	ldw	r16,56(sp)
  a02b10:	dec01304 	addi	sp,sp,76
  a02b14:	f800283a 	ret
  a02b18:	01002874 	movhi	r4,161
  a02b1c:	2102d904 	addi	r4,r4,2916
  a02b20:	0a0320c0 	call	a0320c <__pack_d>
  a02b24:	dfc01217 	ldw	ra,72(sp)
  a02b28:	dcc01117 	ldw	r19,68(sp)
  a02b2c:	dc801017 	ldw	r18,64(sp)
  a02b30:	dc400f17 	ldw	r17,60(sp)
  a02b34:	dc000e17 	ldw	r16,56(sp)
  a02b38:	dec01304 	addi	sp,sp,76
  a02b3c:	f800283a 	ret
  a02b40:	29805b26 	beq	r5,r6,a02cb0 <__divdf3+0x244>
  a02b44:	28802d26 	beq	r5,r2,a02bfc <__divdf3+0x190>
  a02b48:	d8c00617 	ldw	r3,24(sp)
  a02b4c:	d8800b17 	ldw	r2,44(sp)
  a02b50:	d9c00817 	ldw	r7,32(sp)
  a02b54:	dc400d17 	ldw	r17,52(sp)
  a02b58:	188bc83a 	sub	r5,r3,r2
  a02b5c:	d9800717 	ldw	r6,28(sp)
  a02b60:	dc000c17 	ldw	r16,48(sp)
  a02b64:	d9400615 	stw	r5,24(sp)
  a02b68:	3c403836 	bltu	r7,r17,a02c4c <__divdf3+0x1e0>
  a02b6c:	89c03626 	beq	r17,r7,a02c48 <__divdf3+0x1dc>
  a02b70:	0015883a 	mov	r10,zero
  a02b74:	001d883a 	mov	r14,zero
  a02b78:	02c40034 	movhi	r11,4096
  a02b7c:	001f883a 	mov	r15,zero
  a02b80:	003f883a 	mov	ra,zero
  a02b84:	04800f44 	movi	r18,61
  a02b88:	00000f06 	br	a02bc8 <__divdf3+0x15c>
  a02b8c:	601d883a 	mov	r14,r12
  a02b90:	681f883a 	mov	r15,r13
  a02b94:	400d883a 	mov	r6,r8
  a02b98:	100f883a 	mov	r7,r2
  a02b9c:	3191883a 	add	r8,r6,r6
  a02ba0:	5808d07a 	srli	r4,r11,1
  a02ba4:	4185803a 	cmpltu	r2,r8,r6
  a02ba8:	39d3883a 	add	r9,r7,r7
  a02bac:	28c6b03a 	or	r3,r5,r3
  a02bb0:	1245883a 	add	r2,r2,r9
  a02bb4:	1815883a 	mov	r10,r3
  a02bb8:	2017883a 	mov	r11,r4
  a02bbc:	400d883a 	mov	r6,r8
  a02bc0:	100f883a 	mov	r7,r2
  a02bc4:	fc801726 	beq	ra,r18,a02c24 <__divdf3+0x1b8>
  a02bc8:	580a97fa 	slli	r5,r11,31
  a02bcc:	5006d07a 	srli	r3,r10,1
  a02bd0:	ffc00044 	addi	ra,ra,1
  a02bd4:	3c7ff136 	bltu	r7,r17,a02b9c <__divdf3+0x130>
  a02bd8:	3411c83a 	sub	r8,r6,r16
  a02bdc:	3205803a 	cmpltu	r2,r6,r8
  a02be0:	3c53c83a 	sub	r9,r7,r17
  a02be4:	7298b03a 	or	r12,r14,r10
  a02be8:	7adab03a 	or	r13,r15,r11
  a02bec:	4885c83a 	sub	r2,r9,r2
  a02bf0:	89ffe61e 	bne	r17,r7,a02b8c <__divdf3+0x120>
  a02bf4:	343fe936 	bltu	r6,r16,a02b9c <__divdf3+0x130>
  a02bf8:	003fe406 	br	a02b8c <__divdf3+0x120>
  a02bfc:	9809883a 	mov	r4,r19
  a02c00:	d9800415 	stw	r6,16(sp)
  a02c04:	0a0320c0 	call	a0320c <__pack_d>
  a02c08:	dfc01217 	ldw	ra,72(sp)
  a02c0c:	dcc01117 	ldw	r19,68(sp)
  a02c10:	dc801017 	ldw	r18,64(sp)
  a02c14:	dc400f17 	ldw	r17,60(sp)
  a02c18:	dc000e17 	ldw	r16,56(sp)
  a02c1c:	dec01304 	addi	sp,sp,76
  a02c20:	f800283a 	ret
  a02c24:	00803fc4 	movi	r2,255
  a02c28:	7090703a 	and	r8,r14,r2
  a02c2c:	00802004 	movi	r2,128
  a02c30:	0007883a 	mov	r3,zero
  a02c34:	0013883a 	mov	r9,zero
  a02c38:	40800d26 	beq	r8,r2,a02c70 <__divdf3+0x204>
  a02c3c:	dbc00815 	stw	r15,32(sp)
  a02c40:	db800715 	stw	r14,28(sp)
  a02c44:	003fab06 	br	a02af4 <__divdf3+0x88>
  a02c48:	343fc92e 	bgeu	r6,r16,a02b70 <__divdf3+0x104>
  a02c4c:	3185883a 	add	r2,r6,r6
  a02c50:	1189803a 	cmpltu	r4,r2,r6
  a02c54:	39c7883a 	add	r3,r7,r7
  a02c58:	20c9883a 	add	r4,r4,r3
  a02c5c:	297fffc4 	addi	r5,r5,-1
  a02c60:	100d883a 	mov	r6,r2
  a02c64:	200f883a 	mov	r7,r4
  a02c68:	d9400615 	stw	r5,24(sp)
  a02c6c:	003fc006 	br	a02b70 <__divdf3+0x104>
  a02c70:	483ff21e 	bne	r9,zero,a02c3c <__divdf3+0x1d0>
  a02c74:	01004004 	movi	r4,256
  a02c78:	7104703a 	and	r2,r14,r4
  a02c7c:	10c4b03a 	or	r2,r2,r3
  a02c80:	103fee1e 	bne	r2,zero,a02c3c <__divdf3+0x1d0>
  a02c84:	31c4b03a 	or	r2,r6,r7
  a02c88:	103fec26 	beq	r2,zero,a02c3c <__divdf3+0x1d0>
  a02c8c:	7205883a 	add	r2,r14,r8
  a02c90:	1391803a 	cmpltu	r8,r2,r14
  a02c94:	43d1883a 	add	r8,r8,r15
  a02c98:	013fc004 	movi	r4,-256
  a02c9c:	111c703a 	and	r14,r2,r4
  a02ca0:	401f883a 	mov	r15,r8
  a02ca4:	003fe506 	br	a02c3c <__divdf3+0x1d0>
  a02ca8:	8009883a 	mov	r4,r16
  a02cac:	003f9206 	br	a02af8 <__divdf3+0x8c>
  a02cb0:	9809883a 	mov	r4,r19
  a02cb4:	d8000715 	stw	zero,28(sp)
  a02cb8:	d8000815 	stw	zero,32(sp)
  a02cbc:	d8000615 	stw	zero,24(sp)
  a02cc0:	003f8d06 	br	a02af8 <__divdf3+0x8c>

00a02cc4 <__nedf2>:
  a02cc4:	deffef04 	addi	sp,sp,-68
  a02cc8:	dc400f15 	stw	r17,60(sp)
  a02ccc:	dc400404 	addi	r17,sp,16
  a02cd0:	2005883a 	mov	r2,r4
  a02cd4:	2807883a 	mov	r3,r5
  a02cd8:	dc000e15 	stw	r16,56(sp)
  a02cdc:	d809883a 	mov	r4,sp
  a02ce0:	880b883a 	mov	r5,r17
  a02ce4:	dc000904 	addi	r16,sp,36
  a02ce8:	d8c00115 	stw	r3,4(sp)
  a02cec:	d8800015 	stw	r2,0(sp)
  a02cf0:	d9800215 	stw	r6,8(sp)
  a02cf4:	dfc01015 	stw	ra,64(sp)
  a02cf8:	d9c00315 	stw	r7,12(sp)
  a02cfc:	0a035200 	call	a03520 <__unpack_d>
  a02d00:	d9000204 	addi	r4,sp,8
  a02d04:	800b883a 	mov	r5,r16
  a02d08:	0a035200 	call	a03520 <__unpack_d>
  a02d0c:	d8800417 	ldw	r2,16(sp)
  a02d10:	00c00044 	movi	r3,1
  a02d14:	180d883a 	mov	r6,r3
  a02d18:	1880062e 	bgeu	r3,r2,a02d34 <__nedf2+0x70>
  a02d1c:	d8800917 	ldw	r2,36(sp)
  a02d20:	8809883a 	mov	r4,r17
  a02d24:	800b883a 	mov	r5,r16
  a02d28:	1880022e 	bgeu	r3,r2,a02d34 <__nedf2+0x70>
  a02d2c:	0a036580 	call	a03658 <__fpcmp_parts_d>
  a02d30:	100d883a 	mov	r6,r2
  a02d34:	3005883a 	mov	r2,r6
  a02d38:	dfc01017 	ldw	ra,64(sp)
  a02d3c:	dc400f17 	ldw	r17,60(sp)
  a02d40:	dc000e17 	ldw	r16,56(sp)
  a02d44:	dec01104 	addi	sp,sp,68
  a02d48:	f800283a 	ret

00a02d4c <__make_dp>:
  a02d4c:	defff904 	addi	sp,sp,-28
  a02d50:	d8c00717 	ldw	r3,28(sp)
  a02d54:	d9000015 	stw	r4,0(sp)
  a02d58:	d809883a 	mov	r4,sp
  a02d5c:	dfc00515 	stw	ra,20(sp)
  a02d60:	d9c00615 	stw	r7,24(sp)
  a02d64:	d9400115 	stw	r5,4(sp)
  a02d68:	d9800215 	stw	r6,8(sp)
  a02d6c:	d8c00415 	stw	r3,16(sp)
  a02d70:	d9c00315 	stw	r7,12(sp)
  a02d74:	0a0320c0 	call	a0320c <__pack_d>
  a02d78:	dfc00517 	ldw	ra,20(sp)
  a02d7c:	dec00704 	addi	sp,sp,28
  a02d80:	f800283a 	ret

00a02d84 <__truncdfsf2>:
  a02d84:	defff804 	addi	sp,sp,-32
  a02d88:	2005883a 	mov	r2,r4
  a02d8c:	2807883a 	mov	r3,r5
  a02d90:	d809883a 	mov	r4,sp
  a02d94:	d9400204 	addi	r5,sp,8
  a02d98:	d8c00115 	stw	r3,4(sp)
  a02d9c:	d8800015 	stw	r2,0(sp)
  a02da0:	dfc00715 	stw	ra,28(sp)
  a02da4:	0a035200 	call	a03520 <__unpack_d>
  a02da8:	d9c00517 	ldw	r7,20(sp)
  a02dac:	da000617 	ldw	r8,24(sp)
  a02db0:	02d00034 	movhi	r11,16384
  a02db4:	5affffc4 	addi	r11,r11,-1
  a02db8:	3812d7ba 	srli	r9,r7,30
  a02dbc:	401a90ba 	slli	r13,r8,2
  a02dc0:	3ac4703a 	and	r2,r7,r11
  a02dc4:	0007883a 	mov	r3,zero
  a02dc8:	6a52b03a 	or	r9,r13,r9
  a02dcc:	10c4b03a 	or	r2,r2,r3
  a02dd0:	d9000217 	ldw	r4,8(sp)
  a02dd4:	d9400317 	ldw	r5,12(sp)
  a02dd8:	d9800417 	ldw	r6,16(sp)
  a02ddc:	480f883a 	mov	r7,r9
  a02de0:	10000126 	beq	r2,zero,a02de8 <__truncdfsf2+0x64>
  a02de4:	49c00054 	ori	r7,r9,1
  a02de8:	0a031e00 	call	a031e0 <__make_fp>
  a02dec:	dfc00717 	ldw	ra,28(sp)
  a02df0:	dec00804 	addi	sp,sp,32
  a02df4:	f800283a 	ret

00a02df8 <__muldi3>:
  a02df8:	2011883a 	mov	r8,r4
  a02dfc:	427fffcc 	andi	r9,r8,65535
  a02e00:	4018d43a 	srli	r12,r8,16
  a02e04:	32bfffcc 	andi	r10,r6,65535
  a02e08:	3016d43a 	srli	r11,r6,16
  a02e0c:	4a85383a 	mul	r2,r9,r10
  a02e10:	6295383a 	mul	r10,r12,r10
  a02e14:	4ad3383a 	mul	r9,r9,r11
  a02e18:	113fffcc 	andi	r4,r2,65535
  a02e1c:	1004d43a 	srli	r2,r2,16
  a02e20:	4a93883a 	add	r9,r9,r10
  a02e24:	3807883a 	mov	r3,r7
  a02e28:	1245883a 	add	r2,r2,r9
  a02e2c:	280f883a 	mov	r7,r5
  a02e30:	180b883a 	mov	r5,r3
  a02e34:	1006943a 	slli	r3,r2,16
  a02e38:	defffd04 	addi	sp,sp,-12
  a02e3c:	dc800215 	stw	r18,8(sp)
  a02e40:	1907883a 	add	r3,r3,r4
  a02e44:	dc400115 	stw	r17,4(sp)
  a02e48:	dc000015 	stw	r16,0(sp)
  a02e4c:	4165383a 	mul	r18,r8,r5
  a02e50:	31e3383a 	mul	r17,r6,r7
  a02e54:	1012d43a 	srli	r9,r2,16
  a02e58:	62d9383a 	mul	r12,r12,r11
  a02e5c:	181f883a 	mov	r15,r3
  a02e60:	1280022e 	bgeu	r2,r10,a02e6c <__muldi3+0x74>
  a02e64:	00800074 	movhi	r2,1
  a02e68:	6099883a 	add	r12,r12,r2
  a02e6c:	624d883a 	add	r6,r12,r9
  a02e70:	9187883a 	add	r3,r18,r6
  a02e74:	88c7883a 	add	r3,r17,r3
  a02e78:	7805883a 	mov	r2,r15
  a02e7c:	dc800217 	ldw	r18,8(sp)
  a02e80:	dc400117 	ldw	r17,4(sp)
  a02e84:	dc000017 	ldw	r16,0(sp)
  a02e88:	dec00304 	addi	sp,sp,12
  a02e8c:	f800283a 	ret

00a02e90 <__clzsi2>:
  a02e90:	00bfffd4 	movui	r2,65535
  a02e94:	11000e36 	bltu	r2,r4,a02ed0 <__clzsi2+0x40>
  a02e98:	00803fc4 	movi	r2,255
  a02e9c:	01400204 	movi	r5,8
  a02ea0:	0007883a 	mov	r3,zero
  a02ea4:	11001036 	bltu	r2,r4,a02ee8 <__clzsi2+0x58>
  a02ea8:	000b883a 	mov	r5,zero
  a02eac:	20c6d83a 	srl	r3,r4,r3
  a02eb0:	00802874 	movhi	r2,161
  a02eb4:	1082de04 	addi	r2,r2,2936
  a02eb8:	1887883a 	add	r3,r3,r2
  a02ebc:	18800003 	ldbu	r2,0(r3)
  a02ec0:	00c00804 	movi	r3,32
  a02ec4:	2885883a 	add	r2,r5,r2
  a02ec8:	1885c83a 	sub	r2,r3,r2
  a02ecc:	f800283a 	ret
  a02ed0:	01400404 	movi	r5,16
  a02ed4:	00804034 	movhi	r2,256
  a02ed8:	10bfffc4 	addi	r2,r2,-1
  a02edc:	2807883a 	mov	r3,r5
  a02ee0:	113ff22e 	bgeu	r2,r4,a02eac <__clzsi2+0x1c>
  a02ee4:	01400604 	movi	r5,24
  a02ee8:	2807883a 	mov	r3,r5
  a02eec:	20c6d83a 	srl	r3,r4,r3
  a02ef0:	00802874 	movhi	r2,161
  a02ef4:	1082de04 	addi	r2,r2,2936
  a02ef8:	1887883a 	add	r3,r3,r2
  a02efc:	18800003 	ldbu	r2,0(r3)
  a02f00:	00c00804 	movi	r3,32
  a02f04:	2885883a 	add	r2,r5,r2
  a02f08:	1885c83a 	sub	r2,r3,r2
  a02f0c:	f800283a 	ret

00a02f10 <__pack_f>:
  a02f10:	20c00017 	ldw	r3,0(r4)
  a02f14:	01c00044 	movi	r7,1
  a02f18:	21800317 	ldw	r6,12(r4)
  a02f1c:	21400117 	ldw	r5,4(r4)
  a02f20:	38c02d2e 	bgeu	r7,r3,a02fd8 <__pack_f+0xc8>
  a02f24:	00800104 	movi	r2,4
  a02f28:	18802826 	beq	r3,r2,a02fcc <__pack_f+0xbc>
  a02f2c:	00800084 	movi	r2,2
  a02f30:	18800126 	beq	r3,r2,a02f38 <__pack_f+0x28>
  a02f34:	3000101e 	bne	r6,zero,a02f78 <__pack_f+0x68>
  a02f38:	000d883a 	mov	r6,zero
  a02f3c:	0007883a 	mov	r3,zero
  a02f40:	19003fcc 	andi	r4,r3,255
  a02f44:	200895fa 	slli	r4,r4,23
  a02f48:	00c02034 	movhi	r3,128
  a02f4c:	18ffffc4 	addi	r3,r3,-1
  a02f50:	30c6703a 	and	r3,r6,r3
  a02f54:	10a0002c 	andhi	r2,r2,32768
  a02f58:	10c4b03a 	or	r2,r2,r3
  a02f5c:	280a97fa 	slli	r5,r5,31
  a02f60:	1104b03a 	or	r2,r2,r4
  a02f64:	00e00034 	movhi	r3,32768
  a02f68:	18ffffc4 	addi	r3,r3,-1
  a02f6c:	10c4703a 	and	r2,r2,r3
  a02f70:	1144b03a 	or	r2,r2,r5
  a02f74:	f800283a 	ret
  a02f78:	21000217 	ldw	r4,8(r4)
  a02f7c:	00bfe084 	movi	r2,-126
  a02f80:	20801b16 	blt	r4,r2,a02ff0 <__pack_f+0xe0>
  a02f84:	00801fc4 	movi	r2,127
  a02f88:	11001016 	blt	r2,r4,a02fcc <__pack_f+0xbc>
  a02f8c:	308e703a 	and	r7,r6,r2
  a02f90:	2087883a 	add	r3,r4,r2
  a02f94:	00801004 	movi	r2,64
  a02f98:	38800526 	beq	r7,r2,a02fb0 <__pack_f+0xa0>
  a02f9c:	31800fc4 	addi	r6,r6,63
  a02fa0:	30000716 	blt	r6,zero,a02fc0 <__pack_f+0xb0>
  a02fa4:	300490ba 	slli	r2,r6,2
  a02fa8:	100cd27a 	srli	r6,r2,9
  a02fac:	003fe406 	br	a02f40 <__pack_f+0x30>
  a02fb0:	3080200c 	andi	r2,r6,128
  a02fb4:	103ffa26 	beq	r2,zero,a02fa0 <__pack_f+0x90>
  a02fb8:	31cd883a 	add	r6,r6,r7
  a02fbc:	003ff806 	br	a02fa0 <__pack_f+0x90>
  a02fc0:	300cd07a 	srli	r6,r6,1
  a02fc4:	18c00044 	addi	r3,r3,1
  a02fc8:	003ff606 	br	a02fa4 <__pack_f+0x94>
  a02fcc:	000d883a 	mov	r6,zero
  a02fd0:	00ffffc4 	movi	r3,-1
  a02fd4:	003fda06 	br	a02f40 <__pack_f+0x30>
  a02fd8:	31800434 	orhi	r6,r6,16
  a02fdc:	00802034 	movhi	r2,128
  a02fe0:	10bfffc4 	addi	r2,r2,-1
  a02fe4:	308c703a 	and	r6,r6,r2
  a02fe8:	00ffffc4 	movi	r3,-1
  a02fec:	003fd406 	br	a02f40 <__pack_f+0x30>
  a02ff0:	1109c83a 	sub	r4,r2,r4
  a02ff4:	00800644 	movi	r2,25
  a02ff8:	11001216 	blt	r2,r4,a03044 <__pack_f+0x134>
  a02ffc:	3904983a 	sll	r2,r7,r4
  a03000:	3106d83a 	srl	r3,r6,r4
  a03004:	10bfffc4 	addi	r2,r2,-1
  a03008:	3084703a 	and	r2,r6,r2
  a0300c:	1004c03a 	cmpne	r2,r2,zero
  a03010:	1886b03a 	or	r3,r3,r2
  a03014:	19001fcc 	andi	r4,r3,127
  a03018:	00801004 	movi	r2,64
  a0301c:	20800c26 	beq	r4,r2,a03050 <__pack_f+0x140>
  a03020:	18c00fc4 	addi	r3,r3,63
  a03024:	00900034 	movhi	r2,16384
  a03028:	10bfffc4 	addi	r2,r2,-1
  a0302c:	180cd1fa 	srli	r6,r3,7
  a03030:	10c7803a 	cmpltu	r3,r2,r3
  a03034:	00802034 	movhi	r2,128
  a03038:	10bfffc4 	addi	r2,r2,-1
  a0303c:	308c703a 	and	r6,r6,r2
  a03040:	003fbf06 	br	a02f40 <__pack_f+0x30>
  a03044:	0007883a 	mov	r3,zero
  a03048:	000d883a 	mov	r6,zero
  a0304c:	003ff906 	br	a03034 <__pack_f+0x124>
  a03050:	1880200c 	andi	r2,r3,128
  a03054:	10000126 	beq	r2,zero,a0305c <__pack_f+0x14c>
  a03058:	1907883a 	add	r3,r3,r4
  a0305c:	180cd1fa 	srli	r6,r3,7
  a03060:	00900034 	movhi	r2,16384
  a03064:	10bfffc4 	addi	r2,r2,-1
  a03068:	10c7803a 	cmpltu	r3,r2,r3
  a0306c:	003ff106 	br	a03034 <__pack_f+0x124>

00a03070 <__unpack_f>:
  a03070:	21800017 	ldw	r6,0(r4)
  a03074:	00c02034 	movhi	r3,128
  a03078:	18ffffc4 	addi	r3,r3,-1
  a0307c:	3004d5fa 	srli	r2,r6,23
  a03080:	3008d7fa 	srli	r4,r6,31
  a03084:	30ce703a 	and	r7,r6,r3
  a03088:	10c03fcc 	andi	r3,r2,255
  a0308c:	29000115 	stw	r4,4(r5)
  a03090:	1800131e 	bne	r3,zero,a030e0 <__unpack_f+0x70>
  a03094:	38000f26 	beq	r7,zero,a030d4 <__unpack_f+0x64>
  a03098:	380691fa 	slli	r3,r7,7
  a0309c:	01bfe084 	movi	r6,-126
  a030a0:	008000c4 	movi	r2,3
  a030a4:	01100034 	movhi	r4,16384
  a030a8:	213fffc4 	addi	r4,r4,-1
  a030ac:	28800015 	stw	r2,0(r5)
  a030b0:	29800215 	stw	r6,8(r5)
  a030b4:	20c00536 	bltu	r4,r3,a030cc <__unpack_f+0x5c>
  a030b8:	3005883a 	mov	r2,r6
  a030bc:	18c7883a 	add	r3,r3,r3
  a030c0:	10bfffc4 	addi	r2,r2,-1
  a030c4:	20fffd2e 	bgeu	r4,r3,a030bc <__unpack_f+0x4c>
  a030c8:	28800215 	stw	r2,8(r5)
  a030cc:	28c00315 	stw	r3,12(r5)
  a030d0:	f800283a 	ret
  a030d4:	00800084 	movi	r2,2
  a030d8:	28800015 	stw	r2,0(r5)
  a030dc:	f800283a 	ret
  a030e0:	00803fc4 	movi	r2,255
  a030e4:	18800826 	beq	r3,r2,a03108 <__unpack_f+0x98>
  a030e8:	380491fa 	slli	r2,r7,7
  a030ec:	18ffe044 	addi	r3,r3,-127
  a030f0:	28c00215 	stw	r3,8(r5)
  a030f4:	10900034 	orhi	r2,r2,16384
  a030f8:	28800315 	stw	r2,12(r5)
  a030fc:	008000c4 	movi	r2,3
  a03100:	28800015 	stw	r2,0(r5)
  a03104:	f800283a 	ret
  a03108:	3800031e 	bne	r7,zero,a03118 <__unpack_f+0xa8>
  a0310c:	00800104 	movi	r2,4
  a03110:	28800015 	stw	r2,0(r5)
  a03114:	f800283a 	ret
  a03118:	3080042c 	andhi	r2,r6,16
  a0311c:	10000426 	beq	r2,zero,a03130 <__unpack_f+0xc0>
  a03120:	00800044 	movi	r2,1
  a03124:	28800015 	stw	r2,0(r5)
  a03128:	29c00315 	stw	r7,12(r5)
  a0312c:	f800283a 	ret
  a03130:	28000015 	stw	zero,0(r5)
  a03134:	003ffc06 	br	a03128 <__unpack_f+0xb8>

00a03138 <__fpcmp_parts_f>:
  a03138:	21800017 	ldw	r6,0(r4)
  a0313c:	00c00044 	movi	r3,1
  a03140:	19800a2e 	bgeu	r3,r6,a0316c <__fpcmp_parts_f+0x34>
  a03144:	28800017 	ldw	r2,0(r5)
  a03148:	1880082e 	bgeu	r3,r2,a0316c <__fpcmp_parts_f+0x34>
  a0314c:	00c00104 	movi	r3,4
  a03150:	30c01e26 	beq	r6,r3,a031cc <__fpcmp_parts_f+0x94>
  a03154:	10c01a26 	beq	r2,r3,a031c0 <__fpcmp_parts_f+0x88>
  a03158:	00c00084 	movi	r3,2
  a0315c:	30c00526 	beq	r6,r3,a03174 <__fpcmp_parts_f+0x3c>
  a03160:	10c0071e 	bne	r2,r3,a03180 <__fpcmp_parts_f+0x48>
  a03164:	20800117 	ldw	r2,4(r4)
  a03168:	1000091e 	bne	r2,zero,a03190 <__fpcmp_parts_f+0x58>
  a0316c:	00800044 	movi	r2,1
  a03170:	f800283a 	ret
  a03174:	10c0121e 	bne	r2,r3,a031c0 <__fpcmp_parts_f+0x88>
  a03178:	0005883a 	mov	r2,zero
  a0317c:	f800283a 	ret
  a03180:	20c00117 	ldw	r3,4(r4)
  a03184:	28800117 	ldw	r2,4(r5)
  a03188:	18800326 	beq	r3,r2,a03198 <__fpcmp_parts_f+0x60>
  a0318c:	183ff726 	beq	r3,zero,a0316c <__fpcmp_parts_f+0x34>
  a03190:	00bfffc4 	movi	r2,-1
  a03194:	f800283a 	ret
  a03198:	21800217 	ldw	r6,8(r4)
  a0319c:	28800217 	ldw	r2,8(r5)
  a031a0:	11bffa16 	blt	r2,r6,a0318c <__fpcmp_parts_f+0x54>
  a031a4:	30800416 	blt	r6,r2,a031b8 <__fpcmp_parts_f+0x80>
  a031a8:	21000317 	ldw	r4,12(r4)
  a031ac:	29400317 	ldw	r5,12(r5)
  a031b0:	293ff636 	bltu	r5,r4,a0318c <__fpcmp_parts_f+0x54>
  a031b4:	217ff02e 	bgeu	r4,r5,a03178 <__fpcmp_parts_f+0x40>
  a031b8:	183fec1e 	bne	r3,zero,a0316c <__fpcmp_parts_f+0x34>
  a031bc:	003ff406 	br	a03190 <__fpcmp_parts_f+0x58>
  a031c0:	28800117 	ldw	r2,4(r5)
  a031c4:	103fe91e 	bne	r2,zero,a0316c <__fpcmp_parts_f+0x34>
  a031c8:	003ff106 	br	a03190 <__fpcmp_parts_f+0x58>
  a031cc:	11bfe51e 	bne	r2,r6,a03164 <__fpcmp_parts_f+0x2c>
  a031d0:	28c00117 	ldw	r3,4(r5)
  a031d4:	20800117 	ldw	r2,4(r4)
  a031d8:	1885c83a 	sub	r2,r3,r2
  a031dc:	f800283a 	ret

00a031e0 <__make_fp>:
  a031e0:	defffb04 	addi	sp,sp,-20
  a031e4:	d9000015 	stw	r4,0(sp)
  a031e8:	d809883a 	mov	r4,sp
  a031ec:	dfc00415 	stw	ra,16(sp)
  a031f0:	d9400115 	stw	r5,4(sp)
  a031f4:	d9800215 	stw	r6,8(sp)
  a031f8:	d9c00315 	stw	r7,12(sp)
  a031fc:	0a02f100 	call	a02f10 <__pack_f>
  a03200:	dfc00417 	ldw	ra,16(sp)
  a03204:	dec00504 	addi	sp,sp,20
  a03208:	f800283a 	ret

00a0320c <__pack_d>:
  a0320c:	20c00017 	ldw	r3,0(r4)
  a03210:	defffd04 	addi	sp,sp,-12
  a03214:	dc000015 	stw	r16,0(sp)
  a03218:	dc800215 	stw	r18,8(sp)
  a0321c:	dc400115 	stw	r17,4(sp)
  a03220:	00800044 	movi	r2,1
  a03224:	22000317 	ldw	r8,12(r4)
  a03228:	001f883a 	mov	r15,zero
  a0322c:	22400417 	ldw	r9,16(r4)
  a03230:	24000117 	ldw	r16,4(r4)
  a03234:	10c0552e 	bgeu	r2,r3,a0338c <__pack_d+0x180>
  a03238:	00800104 	movi	r2,4
  a0323c:	18804f26 	beq	r3,r2,a0337c <__pack_d+0x170>
  a03240:	00800084 	movi	r2,2
  a03244:	18800226 	beq	r3,r2,a03250 <__pack_d+0x44>
  a03248:	4244b03a 	or	r2,r8,r9
  a0324c:	10001a1e 	bne	r2,zero,a032b8 <__pack_d+0xac>
  a03250:	000d883a 	mov	r6,zero
  a03254:	000f883a 	mov	r7,zero
  a03258:	0011883a 	mov	r8,zero
  a0325c:	00800434 	movhi	r2,16
  a03260:	10bfffc4 	addi	r2,r2,-1
  a03264:	301d883a 	mov	r14,r6
  a03268:	3884703a 	and	r2,r7,r2
  a0326c:	400a953a 	slli	r5,r8,20
  a03270:	79bffc2c 	andhi	r6,r15,65520
  a03274:	308cb03a 	or	r6,r6,r2
  a03278:	00e00434 	movhi	r3,32784
  a0327c:	18ffffc4 	addi	r3,r3,-1
  a03280:	800497fa 	slli	r2,r16,31
  a03284:	30c6703a 	and	r3,r6,r3
  a03288:	1946b03a 	or	r3,r3,r5
  a0328c:	01600034 	movhi	r5,32768
  a03290:	297fffc4 	addi	r5,r5,-1
  a03294:	194a703a 	and	r5,r3,r5
  a03298:	288ab03a 	or	r5,r5,r2
  a0329c:	2807883a 	mov	r3,r5
  a032a0:	7005883a 	mov	r2,r14
  a032a4:	dc800217 	ldw	r18,8(sp)
  a032a8:	dc400117 	ldw	r17,4(sp)
  a032ac:	dc000017 	ldw	r16,0(sp)
  a032b0:	dec00304 	addi	sp,sp,12
  a032b4:	f800283a 	ret
  a032b8:	21000217 	ldw	r4,8(r4)
  a032bc:	00bf0084 	movi	r2,-1022
  a032c0:	20803f16 	blt	r4,r2,a033c0 <__pack_d+0x1b4>
  a032c4:	0080ffc4 	movi	r2,1023
  a032c8:	11002c16 	blt	r2,r4,a0337c <__pack_d+0x170>
  a032cc:	00803fc4 	movi	r2,255
  a032d0:	408c703a 	and	r6,r8,r2
  a032d4:	00802004 	movi	r2,128
  a032d8:	0007883a 	mov	r3,zero
  a032dc:	000f883a 	mov	r7,zero
  a032e0:	2280ffc4 	addi	r10,r4,1023
  a032e4:	30801e26 	beq	r6,r2,a03360 <__pack_d+0x154>
  a032e8:	00801fc4 	movi	r2,127
  a032ec:	4089883a 	add	r4,r8,r2
  a032f0:	220d803a 	cmpltu	r6,r4,r8
  a032f4:	324d883a 	add	r6,r6,r9
  a032f8:	2011883a 	mov	r8,r4
  a032fc:	3013883a 	mov	r9,r6
  a03300:	00880034 	movhi	r2,8192
  a03304:	10bfffc4 	addi	r2,r2,-1
  a03308:	12400d36 	bltu	r2,r9,a03340 <__pack_d+0x134>
  a0330c:	4804963a 	slli	r2,r9,24
  a03310:	400cd23a 	srli	r6,r8,8
  a03314:	480ed23a 	srli	r7,r9,8
  a03318:	013fffc4 	movi	r4,-1
  a0331c:	118cb03a 	or	r6,r2,r6
  a03320:	01400434 	movhi	r5,16
  a03324:	297fffc4 	addi	r5,r5,-1
  a03328:	3104703a 	and	r2,r6,r4
  a0332c:	3946703a 	and	r3,r7,r5
  a03330:	5201ffcc 	andi	r8,r10,2047
  a03334:	100d883a 	mov	r6,r2
  a03338:	180f883a 	mov	r7,r3
  a0333c:	003fc706 	br	a0325c <__pack_d+0x50>
  a03340:	480897fa 	slli	r4,r9,31
  a03344:	4004d07a 	srli	r2,r8,1
  a03348:	4806d07a 	srli	r3,r9,1
  a0334c:	52800044 	addi	r10,r10,1
  a03350:	2084b03a 	or	r2,r4,r2
  a03354:	1011883a 	mov	r8,r2
  a03358:	1813883a 	mov	r9,r3
  a0335c:	003feb06 	br	a0330c <__pack_d+0x100>
  a03360:	383fe11e 	bne	r7,zero,a032e8 <__pack_d+0xdc>
  a03364:	01004004 	movi	r4,256
  a03368:	4104703a 	and	r2,r8,r4
  a0336c:	10c4b03a 	or	r2,r2,r3
  a03370:	103fe326 	beq	r2,zero,a03300 <__pack_d+0xf4>
  a03374:	3005883a 	mov	r2,r6
  a03378:	003fdc06 	br	a032ec <__pack_d+0xe0>
  a0337c:	000d883a 	mov	r6,zero
  a03380:	000f883a 	mov	r7,zero
  a03384:	0201ffc4 	movi	r8,2047
  a03388:	003fb406 	br	a0325c <__pack_d+0x50>
  a0338c:	0005883a 	mov	r2,zero
  a03390:	00c00234 	movhi	r3,8
  a03394:	408cb03a 	or	r6,r8,r2
  a03398:	48ceb03a 	or	r7,r9,r3
  a0339c:	013fffc4 	movi	r4,-1
  a033a0:	01400434 	movhi	r5,16
  a033a4:	297fffc4 	addi	r5,r5,-1
  a033a8:	3104703a 	and	r2,r6,r4
  a033ac:	3946703a 	and	r3,r7,r5
  a033b0:	100d883a 	mov	r6,r2
  a033b4:	180f883a 	mov	r7,r3
  a033b8:	0201ffc4 	movi	r8,2047
  a033bc:	003fa706 	br	a0325c <__pack_d+0x50>
  a033c0:	1109c83a 	sub	r4,r2,r4
  a033c4:	00800e04 	movi	r2,56
  a033c8:	11004316 	blt	r2,r4,a034d8 <__pack_d+0x2cc>
  a033cc:	21fff804 	addi	r7,r4,-32
  a033d0:	38004516 	blt	r7,zero,a034e8 <__pack_d+0x2dc>
  a033d4:	49d8d83a 	srl	r12,r9,r7
  a033d8:	001b883a 	mov	r13,zero
  a033dc:	0023883a 	mov	r17,zero
  a033e0:	01400044 	movi	r5,1
  a033e4:	0025883a 	mov	r18,zero
  a033e8:	38004716 	blt	r7,zero,a03508 <__pack_d+0x2fc>
  a033ec:	29d6983a 	sll	r11,r5,r7
  a033f0:	0015883a 	mov	r10,zero
  a033f4:	00bfffc4 	movi	r2,-1
  a033f8:	5089883a 	add	r4,r10,r2
  a033fc:	588b883a 	add	r5,r11,r2
  a03400:	228d803a 	cmpltu	r6,r4,r10
  a03404:	314b883a 	add	r5,r6,r5
  a03408:	4104703a 	and	r2,r8,r4
  a0340c:	4946703a 	and	r3,r9,r5
  a03410:	10c4b03a 	or	r2,r2,r3
  a03414:	10000226 	beq	r2,zero,a03420 <__pack_d+0x214>
  a03418:	04400044 	movi	r17,1
  a0341c:	0025883a 	mov	r18,zero
  a03420:	00803fc4 	movi	r2,255
  a03424:	644eb03a 	or	r7,r12,r17
  a03428:	3892703a 	and	r9,r7,r2
  a0342c:	00802004 	movi	r2,128
  a03430:	6c90b03a 	or	r8,r13,r18
  a03434:	0015883a 	mov	r10,zero
  a03438:	48801626 	beq	r9,r2,a03494 <__pack_d+0x288>
  a0343c:	01001fc4 	movi	r4,127
  a03440:	3905883a 	add	r2,r7,r4
  a03444:	11cd803a 	cmpltu	r6,r2,r7
  a03448:	320d883a 	add	r6,r6,r8
  a0344c:	100f883a 	mov	r7,r2
  a03450:	00840034 	movhi	r2,4096
  a03454:	10bfffc4 	addi	r2,r2,-1
  a03458:	3011883a 	mov	r8,r6
  a0345c:	0007883a 	mov	r3,zero
  a03460:	11801b36 	bltu	r2,r6,a034d0 <__pack_d+0x2c4>
  a03464:	4004963a 	slli	r2,r8,24
  a03468:	3808d23a 	srli	r4,r7,8
  a0346c:	400ad23a 	srli	r5,r8,8
  a03470:	1813883a 	mov	r9,r3
  a03474:	1108b03a 	or	r4,r2,r4
  a03478:	00bfffc4 	movi	r2,-1
  a0347c:	00c00434 	movhi	r3,16
  a03480:	18ffffc4 	addi	r3,r3,-1
  a03484:	208c703a 	and	r6,r4,r2
  a03488:	28ce703a 	and	r7,r5,r3
  a0348c:	4a01ffcc 	andi	r8,r9,2047
  a03490:	003f7206 	br	a0325c <__pack_d+0x50>
  a03494:	503fe91e 	bne	r10,zero,a0343c <__pack_d+0x230>
  a03498:	01004004 	movi	r4,256
  a0349c:	3904703a 	and	r2,r7,r4
  a034a0:	0007883a 	mov	r3,zero
  a034a4:	10c4b03a 	or	r2,r2,r3
  a034a8:	10000626 	beq	r2,zero,a034c4 <__pack_d+0x2b8>
  a034ac:	3a45883a 	add	r2,r7,r9
  a034b0:	11cd803a 	cmpltu	r6,r2,r7
  a034b4:	320d883a 	add	r6,r6,r8
  a034b8:	100f883a 	mov	r7,r2
  a034bc:	3011883a 	mov	r8,r6
  a034c0:	0007883a 	mov	r3,zero
  a034c4:	00840034 	movhi	r2,4096
  a034c8:	10bfffc4 	addi	r2,r2,-1
  a034cc:	123fe52e 	bgeu	r2,r8,a03464 <__pack_d+0x258>
  a034d0:	00c00044 	movi	r3,1
  a034d4:	003fe306 	br	a03464 <__pack_d+0x258>
  a034d8:	0009883a 	mov	r4,zero
  a034dc:	0013883a 	mov	r9,zero
  a034e0:	000b883a 	mov	r5,zero
  a034e4:	003fe406 	br	a03478 <__pack_d+0x26c>
  a034e8:	4a47883a 	add	r3,r9,r9
  a034ec:	008007c4 	movi	r2,31
  a034f0:	1105c83a 	sub	r2,r2,r4
  a034f4:	1886983a 	sll	r3,r3,r2
  a034f8:	4118d83a 	srl	r12,r8,r4
  a034fc:	491ad83a 	srl	r13,r9,r4
  a03500:	1b18b03a 	or	r12,r3,r12
  a03504:	003fb506 	br	a033dc <__pack_d+0x1d0>
  a03508:	2806d07a 	srli	r3,r5,1
  a0350c:	008007c4 	movi	r2,31
  a03510:	1105c83a 	sub	r2,r2,r4
  a03514:	1896d83a 	srl	r11,r3,r2
  a03518:	2914983a 	sll	r10,r5,r4
  a0351c:	003fb506 	br	a033f4 <__pack_d+0x1e8>

00a03520 <__unpack_d>:
  a03520:	20c00117 	ldw	r3,4(r4)
  a03524:	22400017 	ldw	r9,0(r4)
  a03528:	00800434 	movhi	r2,16
  a0352c:	10bfffc4 	addi	r2,r2,-1
  a03530:	1808d53a 	srli	r4,r3,20
  a03534:	180cd7fa 	srli	r6,r3,31
  a03538:	1894703a 	and	r10,r3,r2
  a0353c:	2201ffcc 	andi	r8,r4,2047
  a03540:	281b883a 	mov	r13,r5
  a03544:	4817883a 	mov	r11,r9
  a03548:	29800115 	stw	r6,4(r5)
  a0354c:	5019883a 	mov	r12,r10
  a03550:	40001e1e 	bne	r8,zero,a035cc <__unpack_d+0xac>
  a03554:	4a84b03a 	or	r2,r9,r10
  a03558:	10001926 	beq	r2,zero,a035c0 <__unpack_d+0xa0>
  a0355c:	4804d63a 	srli	r2,r9,24
  a03560:	500c923a 	slli	r6,r10,8
  a03564:	013f0084 	movi	r4,-1022
  a03568:	00c40034 	movhi	r3,4096
  a0356c:	18ffffc4 	addi	r3,r3,-1
  a03570:	118cb03a 	or	r6,r2,r6
  a03574:	008000c4 	movi	r2,3
  a03578:	480a923a 	slli	r5,r9,8
  a0357c:	68800015 	stw	r2,0(r13)
  a03580:	69000215 	stw	r4,8(r13)
  a03584:	19800b36 	bltu	r3,r6,a035b4 <__unpack_d+0x94>
  a03588:	200f883a 	mov	r7,r4
  a0358c:	1811883a 	mov	r8,r3
  a03590:	2945883a 	add	r2,r5,r5
  a03594:	1149803a 	cmpltu	r4,r2,r5
  a03598:	3187883a 	add	r3,r6,r6
  a0359c:	20c9883a 	add	r4,r4,r3
  a035a0:	100b883a 	mov	r5,r2
  a035a4:	200d883a 	mov	r6,r4
  a035a8:	39ffffc4 	addi	r7,r7,-1
  a035ac:	413ff82e 	bgeu	r8,r4,a03590 <__unpack_d+0x70>
  a035b0:	69c00215 	stw	r7,8(r13)
  a035b4:	69800415 	stw	r6,16(r13)
  a035b8:	69400315 	stw	r5,12(r13)
  a035bc:	f800283a 	ret
  a035c0:	00800084 	movi	r2,2
  a035c4:	28800015 	stw	r2,0(r5)
  a035c8:	f800283a 	ret
  a035cc:	0081ffc4 	movi	r2,2047
  a035d0:	40800f26 	beq	r8,r2,a03610 <__unpack_d+0xf0>
  a035d4:	480cd63a 	srli	r6,r9,24
  a035d8:	5006923a 	slli	r3,r10,8
  a035dc:	4804923a 	slli	r2,r9,8
  a035e0:	0009883a 	mov	r4,zero
  a035e4:	30c6b03a 	or	r3,r6,r3
  a035e8:	01440034 	movhi	r5,4096
  a035ec:	110cb03a 	or	r6,r2,r4
  a035f0:	423f0044 	addi	r8,r8,-1023
  a035f4:	194eb03a 	or	r7,r3,r5
  a035f8:	008000c4 	movi	r2,3
  a035fc:	69c00415 	stw	r7,16(r13)
  a03600:	6a000215 	stw	r8,8(r13)
  a03604:	68800015 	stw	r2,0(r13)
  a03608:	69800315 	stw	r6,12(r13)
  a0360c:	f800283a 	ret
  a03610:	4a84b03a 	or	r2,r9,r10
  a03614:	1000031e 	bne	r2,zero,a03624 <__unpack_d+0x104>
  a03618:	00800104 	movi	r2,4
  a0361c:	28800015 	stw	r2,0(r5)
  a03620:	f800283a 	ret
  a03624:	0009883a 	mov	r4,zero
  a03628:	01400234 	movhi	r5,8
  a0362c:	4904703a 	and	r2,r9,r4
  a03630:	5146703a 	and	r3,r10,r5
  a03634:	10c4b03a 	or	r2,r2,r3
  a03638:	10000526 	beq	r2,zero,a03650 <__unpack_d+0x130>
  a0363c:	00800044 	movi	r2,1
  a03640:	68800015 	stw	r2,0(r13)
  a03644:	6b000415 	stw	r12,16(r13)
  a03648:	6ac00315 	stw	r11,12(r13)
  a0364c:	f800283a 	ret
  a03650:	68000015 	stw	zero,0(r13)
  a03654:	003ffb06 	br	a03644 <__unpack_d+0x124>

00a03658 <__fpcmp_parts_d>:
  a03658:	21800017 	ldw	r6,0(r4)
  a0365c:	00c00044 	movi	r3,1
  a03660:	19800a2e 	bgeu	r3,r6,a0368c <__fpcmp_parts_d+0x34>
  a03664:	28800017 	ldw	r2,0(r5)
  a03668:	1880082e 	bgeu	r3,r2,a0368c <__fpcmp_parts_d+0x34>
  a0366c:	00c00104 	movi	r3,4
  a03670:	30c02626 	beq	r6,r3,a0370c <__fpcmp_parts_d+0xb4>
  a03674:	10c02226 	beq	r2,r3,a03700 <__fpcmp_parts_d+0xa8>
  a03678:	00c00084 	movi	r3,2
  a0367c:	30c00526 	beq	r6,r3,a03694 <__fpcmp_parts_d+0x3c>
  a03680:	10c0071e 	bne	r2,r3,a036a0 <__fpcmp_parts_d+0x48>
  a03684:	20800117 	ldw	r2,4(r4)
  a03688:	1000091e 	bne	r2,zero,a036b0 <__fpcmp_parts_d+0x58>
  a0368c:	00800044 	movi	r2,1
  a03690:	f800283a 	ret
  a03694:	10c01a1e 	bne	r2,r3,a03700 <__fpcmp_parts_d+0xa8>
  a03698:	0005883a 	mov	r2,zero
  a0369c:	f800283a 	ret
  a036a0:	22000117 	ldw	r8,4(r4)
  a036a4:	28800117 	ldw	r2,4(r5)
  a036a8:	40800326 	beq	r8,r2,a036b8 <__fpcmp_parts_d+0x60>
  a036ac:	403ff726 	beq	r8,zero,a0368c <__fpcmp_parts_d+0x34>
  a036b0:	00bfffc4 	movi	r2,-1
  a036b4:	f800283a 	ret
  a036b8:	20c00217 	ldw	r3,8(r4)
  a036bc:	28800217 	ldw	r2,8(r5)
  a036c0:	10fffa16 	blt	r2,r3,a036ac <__fpcmp_parts_d+0x54>
  a036c4:	18800916 	blt	r3,r2,a036ec <__fpcmp_parts_d+0x94>
  a036c8:	21c00417 	ldw	r7,16(r4)
  a036cc:	28c00417 	ldw	r3,16(r5)
  a036d0:	21800317 	ldw	r6,12(r4)
  a036d4:	28800317 	ldw	r2,12(r5)
  a036d8:	19fff436 	bltu	r3,r7,a036ac <__fpcmp_parts_d+0x54>
  a036dc:	38c00526 	beq	r7,r3,a036f4 <__fpcmp_parts_d+0x9c>
  a036e0:	38c00236 	bltu	r7,r3,a036ec <__fpcmp_parts_d+0x94>
  a036e4:	19ffec1e 	bne	r3,r7,a03698 <__fpcmp_parts_d+0x40>
  a036e8:	30bfeb2e 	bgeu	r6,r2,a03698 <__fpcmp_parts_d+0x40>
  a036ec:	403fe71e 	bne	r8,zero,a0368c <__fpcmp_parts_d+0x34>
  a036f0:	003fef06 	br	a036b0 <__fpcmp_parts_d+0x58>
  a036f4:	11bffa2e 	bgeu	r2,r6,a036e0 <__fpcmp_parts_d+0x88>
  a036f8:	403fe426 	beq	r8,zero,a0368c <__fpcmp_parts_d+0x34>
  a036fc:	003fec06 	br	a036b0 <__fpcmp_parts_d+0x58>
  a03700:	28800117 	ldw	r2,4(r5)
  a03704:	103fe11e 	bne	r2,zero,a0368c <__fpcmp_parts_d+0x34>
  a03708:	003fe906 	br	a036b0 <__fpcmp_parts_d+0x58>
  a0370c:	11bfdd1e 	bne	r2,r6,a03684 <__fpcmp_parts_d+0x2c>
  a03710:	28c00117 	ldw	r3,4(r5)
  a03714:	20800117 	ldw	r2,4(r4)
  a03718:	1885c83a 	sub	r2,r3,r2
  a0371c:	f800283a 	ret

00a03720 <__errno>:
  a03720:	00c02874 	movhi	r3,161
  a03724:	18cad104 	addi	r3,r3,11076
  a03728:	18800017 	ldw	r2,0(r3)
  a0372c:	f800283a 	ret

00a03730 <printf>:
  a03730:	defffb04 	addi	sp,sp,-20
  a03734:	dfc00115 	stw	ra,4(sp)
  a03738:	d9400215 	stw	r5,8(sp)
  a0373c:	d9800315 	stw	r6,12(sp)
  a03740:	d9c00415 	stw	r7,16(sp)
  a03744:	00802874 	movhi	r2,161
  a03748:	108ad104 	addi	r2,r2,11076
  a0374c:	10c00017 	ldw	r3,0(r2)
  a03750:	200b883a 	mov	r5,r4
  a03754:	d8800204 	addi	r2,sp,8
  a03758:	19000217 	ldw	r4,8(r3)
  a0375c:	100d883a 	mov	r6,r2
  a03760:	d8800015 	stw	r2,0(sp)
  a03764:	0a058a80 	call	a058a8 <__vfprintf_internal>
  a03768:	dfc00117 	ldw	ra,4(sp)
  a0376c:	dec00504 	addi	sp,sp,20
  a03770:	f800283a 	ret

00a03774 <_printf_r>:
  a03774:	defffc04 	addi	sp,sp,-16
  a03778:	dfc00115 	stw	ra,4(sp)
  a0377c:	d9800215 	stw	r6,8(sp)
  a03780:	d9c00315 	stw	r7,12(sp)
  a03784:	280d883a 	mov	r6,r5
  a03788:	21400217 	ldw	r5,8(r4)
  a0378c:	d8c00204 	addi	r3,sp,8
  a03790:	180f883a 	mov	r7,r3
  a03794:	d8c00015 	stw	r3,0(sp)
  a03798:	0a039fc0 	call	a039fc <___vfprintf_internal_r>
  a0379c:	dfc00117 	ldw	ra,4(sp)
  a037a0:	dec00404 	addi	sp,sp,16
  a037a4:	f800283a 	ret

00a037a8 <_puts_r>:
  a037a8:	defff604 	addi	sp,sp,-40
  a037ac:	dc400715 	stw	r17,28(sp)
  a037b0:	2023883a 	mov	r17,r4
  a037b4:	2809883a 	mov	r4,r5
  a037b8:	dfc00915 	stw	ra,36(sp)
  a037bc:	dcc00815 	stw	r19,32(sp)
  a037c0:	2827883a 	mov	r19,r5
  a037c4:	0a039300 	call	a03930 <strlen>
  a037c8:	89400217 	ldw	r5,8(r17)
  a037cc:	00c02874 	movhi	r3,161
  a037d0:	18c31f04 	addi	r3,r3,3196
  a037d4:	01c00044 	movi	r7,1
  a037d8:	12000044 	addi	r8,r2,1
  a037dc:	d8c00515 	stw	r3,20(sp)
  a037e0:	d9c00615 	stw	r7,24(sp)
  a037e4:	d8c00304 	addi	r3,sp,12
  a037e8:	01c00084 	movi	r7,2
  a037ec:	8809883a 	mov	r4,r17
  a037f0:	d80d883a 	mov	r6,sp
  a037f4:	d8c00015 	stw	r3,0(sp)
  a037f8:	dcc00315 	stw	r19,12(sp)
  a037fc:	da000215 	stw	r8,8(sp)
  a03800:	d9c00115 	stw	r7,4(sp)
  a03804:	d8800415 	stw	r2,16(sp)
  a03808:	0a07b040 	call	a07b04 <__sfvwrite_r>
  a0380c:	00ffffc4 	movi	r3,-1
  a03810:	10000626 	beq	r2,zero,a0382c <_puts_r+0x84>
  a03814:	1805883a 	mov	r2,r3
  a03818:	dfc00917 	ldw	ra,36(sp)
  a0381c:	dcc00817 	ldw	r19,32(sp)
  a03820:	dc400717 	ldw	r17,28(sp)
  a03824:	dec00a04 	addi	sp,sp,40
  a03828:	f800283a 	ret
  a0382c:	00c00284 	movi	r3,10
  a03830:	1805883a 	mov	r2,r3
  a03834:	dfc00917 	ldw	ra,36(sp)
  a03838:	dcc00817 	ldw	r19,32(sp)
  a0383c:	dc400717 	ldw	r17,28(sp)
  a03840:	dec00a04 	addi	sp,sp,40
  a03844:	f800283a 	ret

00a03848 <puts>:
  a03848:	00802874 	movhi	r2,161
  a0384c:	108ad104 	addi	r2,r2,11076
  a03850:	200b883a 	mov	r5,r4
  a03854:	11000017 	ldw	r4,0(r2)
  a03858:	0a037a81 	jmpi	a037a8 <_puts_r>

00a0385c <sprintf>:
  a0385c:	deffe504 	addi	sp,sp,-108
  a03860:	2013883a 	mov	r9,r4
  a03864:	dfc01815 	stw	ra,96(sp)
  a03868:	d9801915 	stw	r6,100(sp)
  a0386c:	d9c01a15 	stw	r7,104(sp)
  a03870:	d8801904 	addi	r2,sp,100
  a03874:	d8800015 	stw	r2,0(sp)
  a03878:	00802874 	movhi	r2,161
  a0387c:	108ad104 	addi	r2,r2,11076
  a03880:	11000017 	ldw	r4,0(r2)
  a03884:	d9c00017 	ldw	r7,0(sp)
  a03888:	00808204 	movi	r2,520
  a0388c:	00e00034 	movhi	r3,32768
  a03890:	18ffffc4 	addi	r3,r3,-1
  a03894:	280d883a 	mov	r6,r5
  a03898:	d880040d 	sth	r2,16(sp)
  a0389c:	d9400104 	addi	r5,sp,4
  a038a0:	00bfffc4 	movi	r2,-1
  a038a4:	d8c00615 	stw	r3,24(sp)
  a038a8:	d8c00315 	stw	r3,12(sp)
  a038ac:	da400515 	stw	r9,20(sp)
  a038b0:	d880048d 	sth	r2,18(sp)
  a038b4:	da400115 	stw	r9,4(sp)
  a038b8:	0a039fc0 	call	a039fc <___vfprintf_internal_r>
  a038bc:	d8c00117 	ldw	r3,4(sp)
  a038c0:	18000005 	stb	zero,0(r3)
  a038c4:	dfc01817 	ldw	ra,96(sp)
  a038c8:	dec01b04 	addi	sp,sp,108
  a038cc:	f800283a 	ret

00a038d0 <_sprintf_r>:
  a038d0:	deffe604 	addi	sp,sp,-104
  a038d4:	2813883a 	mov	r9,r5
  a038d8:	dfc01815 	stw	ra,96(sp)
  a038dc:	d9c01915 	stw	r7,100(sp)
  a038e0:	d8801904 	addi	r2,sp,100
  a038e4:	d8800015 	stw	r2,0(sp)
  a038e8:	100f883a 	mov	r7,r2
  a038ec:	00808204 	movi	r2,520
  a038f0:	00e00034 	movhi	r3,32768
  a038f4:	18ffffc4 	addi	r3,r3,-1
  a038f8:	d880040d 	sth	r2,16(sp)
  a038fc:	d9400104 	addi	r5,sp,4
  a03900:	00bfffc4 	movi	r2,-1
  a03904:	d8c00615 	stw	r3,24(sp)
  a03908:	d8c00315 	stw	r3,12(sp)
  a0390c:	da400515 	stw	r9,20(sp)
  a03910:	d880048d 	sth	r2,18(sp)
  a03914:	da400115 	stw	r9,4(sp)
  a03918:	0a039fc0 	call	a039fc <___vfprintf_internal_r>
  a0391c:	d8c00117 	ldw	r3,4(sp)
  a03920:	18000005 	stb	zero,0(r3)
  a03924:	dfc01817 	ldw	ra,96(sp)
  a03928:	dec01a04 	addi	sp,sp,104
  a0392c:	f800283a 	ret

00a03930 <strlen>:
  a03930:	208000cc 	andi	r2,r4,3
  a03934:	2011883a 	mov	r8,r4
  a03938:	1000161e 	bne	r2,zero,a03994 <strlen+0x64>
  a0393c:	20c00017 	ldw	r3,0(r4)
  a03940:	017fbff4 	movhi	r5,65279
  a03944:	297fbfc4 	addi	r5,r5,-257
  a03948:	01e02074 	movhi	r7,32897
  a0394c:	39e02004 	addi	r7,r7,-32640
  a03950:	1945883a 	add	r2,r3,r5
  a03954:	11c4703a 	and	r2,r2,r7
  a03958:	00c6303a 	nor	r3,zero,r3
  a0395c:	1886703a 	and	r3,r3,r2
  a03960:	18000c1e 	bne	r3,zero,a03994 <strlen+0x64>
  a03964:	280d883a 	mov	r6,r5
  a03968:	380b883a 	mov	r5,r7
  a0396c:	21000104 	addi	r4,r4,4
  a03970:	20800017 	ldw	r2,0(r4)
  a03974:	1187883a 	add	r3,r2,r6
  a03978:	1946703a 	and	r3,r3,r5
  a0397c:	0084303a 	nor	r2,zero,r2
  a03980:	10c4703a 	and	r2,r2,r3
  a03984:	103ff926 	beq	r2,zero,a0396c <strlen+0x3c>
  a03988:	20800007 	ldb	r2,0(r4)
  a0398c:	10000326 	beq	r2,zero,a0399c <strlen+0x6c>
  a03990:	21000044 	addi	r4,r4,1
  a03994:	20800007 	ldb	r2,0(r4)
  a03998:	103ffd1e 	bne	r2,zero,a03990 <strlen+0x60>
  a0399c:	2205c83a 	sub	r2,r4,r8
  a039a0:	f800283a 	ret

00a039a4 <__sprint_r>:
  a039a4:	30800217 	ldw	r2,8(r6)
  a039a8:	defffe04 	addi	sp,sp,-8
  a039ac:	dc000015 	stw	r16,0(sp)
  a039b0:	dfc00115 	stw	ra,4(sp)
  a039b4:	3021883a 	mov	r16,r6
  a039b8:	0007883a 	mov	r3,zero
  a039bc:	1000061e 	bne	r2,zero,a039d8 <__sprint_r+0x34>
  a039c0:	1805883a 	mov	r2,r3
  a039c4:	30000115 	stw	zero,4(r6)
  a039c8:	dfc00117 	ldw	ra,4(sp)
  a039cc:	dc000017 	ldw	r16,0(sp)
  a039d0:	dec00204 	addi	sp,sp,8
  a039d4:	f800283a 	ret
  a039d8:	0a07b040 	call	a07b04 <__sfvwrite_r>
  a039dc:	1007883a 	mov	r3,r2
  a039e0:	1805883a 	mov	r2,r3
  a039e4:	80000115 	stw	zero,4(r16)
  a039e8:	80000215 	stw	zero,8(r16)
  a039ec:	dfc00117 	ldw	ra,4(sp)
  a039f0:	dc000017 	ldw	r16,0(sp)
  a039f4:	dec00204 	addi	sp,sp,8
  a039f8:	f800283a 	ret

00a039fc <___vfprintf_internal_r>:
  a039fc:	defea404 	addi	sp,sp,-1392
  a03a00:	dd815815 	stw	r22,1376(sp)
  a03a04:	dc015215 	stw	r16,1352(sp)
  a03a08:	d9c15115 	stw	r7,1348(sp)
  a03a0c:	dfc15b15 	stw	ra,1388(sp)
  a03a10:	df015a15 	stw	fp,1384(sp)
  a03a14:	ddc15915 	stw	r23,1380(sp)
  a03a18:	dd415715 	stw	r21,1372(sp)
  a03a1c:	dd015615 	stw	r20,1368(sp)
  a03a20:	dcc15515 	stw	r19,1364(sp)
  a03a24:	dc815415 	stw	r18,1360(sp)
  a03a28:	dc415315 	stw	r17,1356(sp)
  a03a2c:	282d883a 	mov	r22,r5
  a03a30:	3021883a 	mov	r16,r6
  a03a34:	d9014f15 	stw	r4,1340(sp)
  a03a38:	0a081280 	call	a08128 <_localeconv_r>
  a03a3c:	10800017 	ldw	r2,0(r2)
  a03a40:	d9c15117 	ldw	r7,1348(sp)
  a03a44:	d8814915 	stw	r2,1316(sp)
  a03a48:	d8814f17 	ldw	r2,1340(sp)
  a03a4c:	10000226 	beq	r2,zero,a03a58 <___vfprintf_internal_r+0x5c>
  a03a50:	10800e17 	ldw	r2,56(r2)
  a03a54:	10020d26 	beq	r2,zero,a0428c <___vfprintf_internal_r+0x890>
  a03a58:	b080030b 	ldhu	r2,12(r22)
  a03a5c:	1080020c 	andi	r2,r2,8
  a03a60:	10020e26 	beq	r2,zero,a0429c <___vfprintf_internal_r+0x8a0>
  a03a64:	b0800417 	ldw	r2,16(r22)
  a03a68:	10020c26 	beq	r2,zero,a0429c <___vfprintf_internal_r+0x8a0>
  a03a6c:	b200030b 	ldhu	r8,12(r22)
  a03a70:	00800284 	movi	r2,10
  a03a74:	40c0068c 	andi	r3,r8,26
  a03a78:	18802f1e 	bne	r3,r2,a03b38 <___vfprintf_internal_r+0x13c>
  a03a7c:	b080038f 	ldh	r2,14(r22)
  a03a80:	10002d16 	blt	r2,zero,a03b38 <___vfprintf_internal_r+0x13c>
  a03a84:	b240038b 	ldhu	r9,14(r22)
  a03a88:	b2800717 	ldw	r10,28(r22)
  a03a8c:	b2c00917 	ldw	r11,36(r22)
  a03a90:	d9014f17 	ldw	r4,1340(sp)
  a03a94:	dc402904 	addi	r17,sp,164
  a03a98:	d8804004 	addi	r2,sp,256
  a03a9c:	00c10004 	movi	r3,1024
  a03aa0:	423fff4c 	andi	r8,r8,65533
  a03aa4:	800d883a 	mov	r6,r16
  a03aa8:	880b883a 	mov	r5,r17
  a03aac:	da002c0d 	sth	r8,176(sp)
  a03ab0:	da402c8d 	sth	r9,178(sp)
  a03ab4:	da803015 	stw	r10,192(sp)
  a03ab8:	dac03215 	stw	r11,200(sp)
  a03abc:	d8802d15 	stw	r2,180(sp)
  a03ac0:	d8c02e15 	stw	r3,184(sp)
  a03ac4:	d8802915 	stw	r2,164(sp)
  a03ac8:	d8c02b15 	stw	r3,172(sp)
  a03acc:	d8002f15 	stw	zero,188(sp)
  a03ad0:	0a039fc0 	call	a039fc <___vfprintf_internal_r>
  a03ad4:	d8814b15 	stw	r2,1324(sp)
  a03ad8:	10000416 	blt	r2,zero,a03aec <___vfprintf_internal_r+0xf0>
  a03adc:	d9014f17 	ldw	r4,1340(sp)
  a03ae0:	880b883a 	mov	r5,r17
  a03ae4:	0a071d40 	call	a071d4 <_fflush_r>
  a03ae8:	1002321e 	bne	r2,zero,a043b4 <___vfprintf_internal_r+0x9b8>
  a03aec:	d8802c0b 	ldhu	r2,176(sp)
  a03af0:	1080100c 	andi	r2,r2,64
  a03af4:	10000326 	beq	r2,zero,a03b04 <___vfprintf_internal_r+0x108>
  a03af8:	b080030b 	ldhu	r2,12(r22)
  a03afc:	10801014 	ori	r2,r2,64
  a03b00:	b080030d 	sth	r2,12(r22)
  a03b04:	d8814b17 	ldw	r2,1324(sp)
  a03b08:	dfc15b17 	ldw	ra,1388(sp)
  a03b0c:	df015a17 	ldw	fp,1384(sp)
  a03b10:	ddc15917 	ldw	r23,1380(sp)
  a03b14:	dd815817 	ldw	r22,1376(sp)
  a03b18:	dd415717 	ldw	r21,1372(sp)
  a03b1c:	dd015617 	ldw	r20,1368(sp)
  a03b20:	dcc15517 	ldw	r19,1364(sp)
  a03b24:	dc815417 	ldw	r18,1360(sp)
  a03b28:	dc415317 	ldw	r17,1356(sp)
  a03b2c:	dc015217 	ldw	r16,1352(sp)
  a03b30:	dec15c04 	addi	sp,sp,1392
  a03b34:	f800283a 	ret
  a03b38:	0005883a 	mov	r2,zero
  a03b3c:	0007883a 	mov	r3,zero
  a03b40:	dd401904 	addi	r21,sp,100
  a03b44:	d8814215 	stw	r2,1288(sp)
  a03b48:	802f883a 	mov	r23,r16
  a03b4c:	d8c14315 	stw	r3,1292(sp)
  a03b50:	d8014b15 	stw	zero,1324(sp)
  a03b54:	d8014815 	stw	zero,1312(sp)
  a03b58:	d8014415 	stw	zero,1296(sp)
  a03b5c:	d8014715 	stw	zero,1308(sp)
  a03b60:	dd400c15 	stw	r21,48(sp)
  a03b64:	d8000e15 	stw	zero,56(sp)
  a03b68:	d8000d15 	stw	zero,52(sp)
  a03b6c:	b8800007 	ldb	r2,0(r23)
  a03b70:	10001926 	beq	r2,zero,a03bd8 <___vfprintf_internal_r+0x1dc>
  a03b74:	00c00944 	movi	r3,37
  a03b78:	10c01726 	beq	r2,r3,a03bd8 <___vfprintf_internal_r+0x1dc>
  a03b7c:	b821883a 	mov	r16,r23
  a03b80:	00000106 	br	a03b88 <___vfprintf_internal_r+0x18c>
  a03b84:	10c00326 	beq	r2,r3,a03b94 <___vfprintf_internal_r+0x198>
  a03b88:	84000044 	addi	r16,r16,1
  a03b8c:	80800007 	ldb	r2,0(r16)
  a03b90:	103ffc1e 	bne	r2,zero,a03b84 <___vfprintf_internal_r+0x188>
  a03b94:	85e7c83a 	sub	r19,r16,r23
  a03b98:	98000e26 	beq	r19,zero,a03bd4 <___vfprintf_internal_r+0x1d8>
  a03b9c:	dc800e17 	ldw	r18,56(sp)
  a03ba0:	dc400d17 	ldw	r17,52(sp)
  a03ba4:	008001c4 	movi	r2,7
  a03ba8:	94e5883a 	add	r18,r18,r19
  a03bac:	8c400044 	addi	r17,r17,1
  a03bb0:	adc00015 	stw	r23,0(r21)
  a03bb4:	dc800e15 	stw	r18,56(sp)
  a03bb8:	acc00115 	stw	r19,4(r21)
  a03bbc:	dc400d15 	stw	r17,52(sp)
  a03bc0:	14428b16 	blt	r2,r17,a045f0 <___vfprintf_internal_r+0xbf4>
  a03bc4:	ad400204 	addi	r21,r21,8
  a03bc8:	d9014b17 	ldw	r4,1324(sp)
  a03bcc:	24c9883a 	add	r4,r4,r19
  a03bd0:	d9014b15 	stw	r4,1324(sp)
  a03bd4:	802f883a 	mov	r23,r16
  a03bd8:	b8800007 	ldb	r2,0(r23)
  a03bdc:	10013c26 	beq	r2,zero,a040d0 <___vfprintf_internal_r+0x6d4>
  a03be0:	bdc00044 	addi	r23,r23,1
  a03be4:	d8000405 	stb	zero,16(sp)
  a03be8:	b8c00007 	ldb	r3,0(r23)
  a03bec:	04ffffc4 	movi	r19,-1
  a03bf0:	d8014c15 	stw	zero,1328(sp)
  a03bf4:	d8014a15 	stw	zero,1320(sp)
  a03bf8:	d8c14d15 	stw	r3,1332(sp)
  a03bfc:	bdc00044 	addi	r23,r23,1
  a03c00:	d9414d17 	ldw	r5,1332(sp)
  a03c04:	00801604 	movi	r2,88
  a03c08:	28fff804 	addi	r3,r5,-32
  a03c0c:	10c06036 	bltu	r2,r3,a03d90 <___vfprintf_internal_r+0x394>
  a03c10:	18c5883a 	add	r2,r3,r3
  a03c14:	1085883a 	add	r2,r2,r2
  a03c18:	00c02834 	movhi	r3,160
  a03c1c:	18cf0b04 	addi	r3,r3,15404
  a03c20:	10c5883a 	add	r2,r2,r3
  a03c24:	11000017 	ldw	r4,0(r2)
  a03c28:	2000683a 	jmp	r4
  a03c2c:	00a04ba0 	cmpeqi	r2,zero,-32466
  a03c30:	00a03d90 	cmplti	r2,zero,-32522
  a03c34:	00a03d90 	cmplti	r2,zero,-32522
  a03c38:	00a04b8c 	andi	r2,zero,33070
  a03c3c:	00a03d90 	cmplti	r2,zero,-32522
  a03c40:	00a03d90 	cmplti	r2,zero,-32522
  a03c44:	00a03d90 	cmplti	r2,zero,-32522
  a03c48:	00a03d90 	cmplti	r2,zero,-32522
  a03c4c:	00a03d90 	cmplti	r2,zero,-32522
  a03c50:	00a03d90 	cmplti	r2,zero,-32522
  a03c54:	00a0496c 	andhi	r2,zero,33061
  a03c58:	00a04b7c 	xorhi	r2,zero,33069
  a03c5c:	00a03d90 	cmplti	r2,zero,-32522
  a03c60:	00a04984 	movi	r2,-32474
  a03c64:	00a04c18 	cmpnei	r2,zero,-32464
  a03c68:	00a03d90 	cmplti	r2,zero,-32522
  a03c6c:	00a04c04 	movi	r2,-32464
  a03c70:	00a04bcc 	andi	r2,zero,33071
  a03c74:	00a04bcc 	andi	r2,zero,33071
  a03c78:	00a04bcc 	andi	r2,zero,33071
  a03c7c:	00a04bcc 	andi	r2,zero,33071
  a03c80:	00a04bcc 	andi	r2,zero,33071
  a03c84:	00a04bcc 	andi	r2,zero,33071
  a03c88:	00a04bcc 	andi	r2,zero,33071
  a03c8c:	00a04bcc 	andi	r2,zero,33071
  a03c90:	00a04bcc 	andi	r2,zero,33071
  a03c94:	00a03d90 	cmplti	r2,zero,-32522
  a03c98:	00a03d90 	cmplti	r2,zero,-32522
  a03c9c:	00a03d90 	cmplti	r2,zero,-32522
  a03ca0:	00a03d90 	cmplti	r2,zero,-32522
  a03ca4:	00a03d90 	cmplti	r2,zero,-32522
  a03ca8:	00a03d90 	cmplti	r2,zero,-32522
  a03cac:	00a03d90 	cmplti	r2,zero,-32522
  a03cb0:	00a03d90 	cmplti	r2,zero,-32522
  a03cb4:	00a03d90 	cmplti	r2,zero,-32522
  a03cb8:	00a03d90 	cmplti	r2,zero,-32522
  a03cbc:	00a043e8 	cmpgeui	r2,zero,33039
  a03cc0:	00a04a54 	movui	r2,33065
  a03cc4:	00a03d90 	cmplti	r2,zero,-32522
  a03cc8:	00a04a54 	movui	r2,33065
  a03ccc:	00a03d90 	cmplti	r2,zero,-32522
  a03cd0:	00a03d90 	cmplti	r2,zero,-32522
  a03cd4:	00a03d90 	cmplti	r2,zero,-32522
  a03cd8:	00a03d90 	cmplti	r2,zero,-32522
  a03cdc:	00a04bb8 	rdprs	r2,zero,-32466
  a03ce0:	00a03d90 	cmplti	r2,zero,-32522
  a03ce4:	00a03d90 	cmplti	r2,zero,-32522
  a03ce8:	00a0449c 	xori	r2,zero,33042
  a03cec:	00a03d90 	cmplti	r2,zero,-32522
  a03cf0:	00a03d90 	cmplti	r2,zero,-32522
  a03cf4:	00a03d90 	cmplti	r2,zero,-32522
  a03cf8:	00a03d90 	cmplti	r2,zero,-32522
  a03cfc:	00a03d90 	cmplti	r2,zero,-32522
  a03d00:	00a044e8 	cmpgeui	r2,zero,33043
  a03d04:	00a03d90 	cmplti	r2,zero,-32522
  a03d08:	00a03d90 	cmplti	r2,zero,-32522
  a03d0c:	00a04b08 	cmpgei	r2,zero,-32468
  a03d10:	00a03d90 	cmplti	r2,zero,-32522
  a03d14:	00a03d90 	cmplti	r2,zero,-32522
  a03d18:	00a03d90 	cmplti	r2,zero,-32522
  a03d1c:	00a03d90 	cmplti	r2,zero,-32522
  a03d20:	00a03d90 	cmplti	r2,zero,-32522
  a03d24:	00a03d90 	cmplti	r2,zero,-32522
  a03d28:	00a03d90 	cmplti	r2,zero,-32522
  a03d2c:	00a03d90 	cmplti	r2,zero,-32522
  a03d30:	00a03d90 	cmplti	r2,zero,-32522
  a03d34:	00a03d90 	cmplti	r2,zero,-32522
  a03d38:	00a04adc 	xori	r2,zero,33067
  a03d3c:	00a043f4 	movhi	r2,33039
  a03d40:	00a04a54 	movui	r2,33065
  a03d44:	00a04a54 	movui	r2,33065
  a03d48:	00a04a54 	movui	r2,33065
  a03d4c:	00a04a40 	call	a04a4 <__alt_mem_onchip_memory2_3+0x994a4>
  a03d50:	00a043f4 	movhi	r2,33039
  a03d54:	00a03d90 	cmplti	r2,zero,-32522
  a03d58:	00a03d90 	cmplti	r2,zero,-32522
  a03d5c:	00a049c8 	cmpgei	r2,zero,-32473
  a03d60:	00a03d90 	cmplti	r2,zero,-32522
  a03d64:	00a04998 	cmpnei	r2,zero,-32474
  a03d68:	00a044a8 	cmpgeui	r2,zero,33042
  a03d6c:	00a049f8 	rdprs	r2,zero,-32473
  a03d70:	00a049e4 	muli	r2,zero,-32473
  a03d74:	00a03d90 	cmplti	r2,zero,-32522
  a03d78:	00a04c74 	movhi	r2,33073
  a03d7c:	00a03d90 	cmplti	r2,zero,-32522
  a03d80:	00a044f4 	movhi	r2,33043
  a03d84:	00a03d90 	cmplti	r2,zero,-32522
  a03d88:	00a03d90 	cmplti	r2,zero,-32522
  a03d8c:	00a04b6c 	andhi	r2,zero,33069
  a03d90:	d9014d17 	ldw	r4,1332(sp)
  a03d94:	2000ce26 	beq	r4,zero,a040d0 <___vfprintf_internal_r+0x6d4>
  a03d98:	01400044 	movi	r5,1
  a03d9c:	d9800f04 	addi	r6,sp,60
  a03da0:	d9c14015 	stw	r7,1280(sp)
  a03da4:	d9414515 	stw	r5,1300(sp)
  a03da8:	d9814115 	stw	r6,1284(sp)
  a03dac:	280f883a 	mov	r7,r5
  a03db0:	d9000f05 	stb	r4,60(sp)
  a03db4:	d8000405 	stb	zero,16(sp)
  a03db8:	d8014615 	stw	zero,1304(sp)
  a03dbc:	d8c14c17 	ldw	r3,1328(sp)
  a03dc0:	1880008c 	andi	r2,r3,2
  a03dc4:	1005003a 	cmpeq	r2,r2,zero
  a03dc8:	d8815015 	stw	r2,1344(sp)
  a03dcc:	1000031e 	bne	r2,zero,a03ddc <___vfprintf_internal_r+0x3e0>
  a03dd0:	d9014517 	ldw	r4,1300(sp)
  a03dd4:	21000084 	addi	r4,r4,2
  a03dd8:	d9014515 	stw	r4,1300(sp)
  a03ddc:	d9414c17 	ldw	r5,1328(sp)
  a03de0:	2940210c 	andi	r5,r5,132
  a03de4:	d9414e15 	stw	r5,1336(sp)
  a03de8:	28002d1e 	bne	r5,zero,a03ea0 <___vfprintf_internal_r+0x4a4>
  a03dec:	d9814a17 	ldw	r6,1320(sp)
  a03df0:	d8814517 	ldw	r2,1300(sp)
  a03df4:	30a1c83a 	sub	r16,r6,r2
  a03df8:	0400290e 	bge	zero,r16,a03ea0 <___vfprintf_internal_r+0x4a4>
  a03dfc:	00800404 	movi	r2,16
  a03e00:	1404580e 	bge	r2,r16,a04f64 <___vfprintf_internal_r+0x1568>
  a03e04:	dc800e17 	ldw	r18,56(sp)
  a03e08:	dc400d17 	ldw	r17,52(sp)
  a03e0c:	1027883a 	mov	r19,r2
  a03e10:	07002874 	movhi	fp,161
  a03e14:	e7033a84 	addi	fp,fp,3306
  a03e18:	050001c4 	movi	r20,7
  a03e1c:	00000306 	br	a03e2c <___vfprintf_internal_r+0x430>
  a03e20:	843ffc04 	addi	r16,r16,-16
  a03e24:	ad400204 	addi	r21,r21,8
  a03e28:	9c00130e 	bge	r19,r16,a03e78 <___vfprintf_internal_r+0x47c>
  a03e2c:	94800404 	addi	r18,r18,16
  a03e30:	8c400044 	addi	r17,r17,1
  a03e34:	af000015 	stw	fp,0(r21)
  a03e38:	acc00115 	stw	r19,4(r21)
  a03e3c:	dc800e15 	stw	r18,56(sp)
  a03e40:	dc400d15 	stw	r17,52(sp)
  a03e44:	a47ff60e 	bge	r20,r17,a03e20 <___vfprintf_internal_r+0x424>
  a03e48:	d9014f17 	ldw	r4,1340(sp)
  a03e4c:	b00b883a 	mov	r5,r22
  a03e50:	d9800c04 	addi	r6,sp,48
  a03e54:	d9c15115 	stw	r7,1348(sp)
  a03e58:	0a039a40 	call	a039a4 <__sprint_r>
  a03e5c:	d9c15117 	ldw	r7,1348(sp)
  a03e60:	10009e1e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a03e64:	843ffc04 	addi	r16,r16,-16
  a03e68:	dc800e17 	ldw	r18,56(sp)
  a03e6c:	dc400d17 	ldw	r17,52(sp)
  a03e70:	dd401904 	addi	r21,sp,100
  a03e74:	9c3fed16 	blt	r19,r16,a03e2c <___vfprintf_internal_r+0x430>
  a03e78:	9425883a 	add	r18,r18,r16
  a03e7c:	8c400044 	addi	r17,r17,1
  a03e80:	008001c4 	movi	r2,7
  a03e84:	af000015 	stw	fp,0(r21)
  a03e88:	ac000115 	stw	r16,4(r21)
  a03e8c:	dc800e15 	stw	r18,56(sp)
  a03e90:	dc400d15 	stw	r17,52(sp)
  a03e94:	1441f516 	blt	r2,r17,a0466c <___vfprintf_internal_r+0xc70>
  a03e98:	ad400204 	addi	r21,r21,8
  a03e9c:	00000206 	br	a03ea8 <___vfprintf_internal_r+0x4ac>
  a03ea0:	dc800e17 	ldw	r18,56(sp)
  a03ea4:	dc400d17 	ldw	r17,52(sp)
  a03ea8:	d8800407 	ldb	r2,16(sp)
  a03eac:	10000b26 	beq	r2,zero,a03edc <___vfprintf_internal_r+0x4e0>
  a03eb0:	00800044 	movi	r2,1
  a03eb4:	94800044 	addi	r18,r18,1
  a03eb8:	8c400044 	addi	r17,r17,1
  a03ebc:	a8800115 	stw	r2,4(r21)
  a03ec0:	d8c00404 	addi	r3,sp,16
  a03ec4:	008001c4 	movi	r2,7
  a03ec8:	a8c00015 	stw	r3,0(r21)
  a03ecc:	dc800e15 	stw	r18,56(sp)
  a03ed0:	dc400d15 	stw	r17,52(sp)
  a03ed4:	1441da16 	blt	r2,r17,a04640 <___vfprintf_internal_r+0xc44>
  a03ed8:	ad400204 	addi	r21,r21,8
  a03edc:	d9015017 	ldw	r4,1344(sp)
  a03ee0:	20000b1e 	bne	r4,zero,a03f10 <___vfprintf_internal_r+0x514>
  a03ee4:	d8800444 	addi	r2,sp,17
  a03ee8:	94800084 	addi	r18,r18,2
  a03eec:	8c400044 	addi	r17,r17,1
  a03ef0:	a8800015 	stw	r2,0(r21)
  a03ef4:	00c00084 	movi	r3,2
  a03ef8:	008001c4 	movi	r2,7
  a03efc:	a8c00115 	stw	r3,4(r21)
  a03f00:	dc800e15 	stw	r18,56(sp)
  a03f04:	dc400d15 	stw	r17,52(sp)
  a03f08:	1441c216 	blt	r2,r17,a04614 <___vfprintf_internal_r+0xc18>
  a03f0c:	ad400204 	addi	r21,r21,8
  a03f10:	d9414e17 	ldw	r5,1336(sp)
  a03f14:	00802004 	movi	r2,128
  a03f18:	2880b126 	beq	r5,r2,a041e0 <___vfprintf_internal_r+0x7e4>
  a03f1c:	d8c14617 	ldw	r3,1304(sp)
  a03f20:	19e1c83a 	sub	r16,r3,r7
  a03f24:	0400260e 	bge	zero,r16,a03fc0 <___vfprintf_internal_r+0x5c4>
  a03f28:	00800404 	movi	r2,16
  a03f2c:	1403c90e 	bge	r2,r16,a04e54 <___vfprintf_internal_r+0x1458>
  a03f30:	1027883a 	mov	r19,r2
  a03f34:	07002874 	movhi	fp,161
  a03f38:	e7033684 	addi	fp,fp,3290
  a03f3c:	050001c4 	movi	r20,7
  a03f40:	00000306 	br	a03f50 <___vfprintf_internal_r+0x554>
  a03f44:	843ffc04 	addi	r16,r16,-16
  a03f48:	ad400204 	addi	r21,r21,8
  a03f4c:	9c00130e 	bge	r19,r16,a03f9c <___vfprintf_internal_r+0x5a0>
  a03f50:	94800404 	addi	r18,r18,16
  a03f54:	8c400044 	addi	r17,r17,1
  a03f58:	af000015 	stw	fp,0(r21)
  a03f5c:	acc00115 	stw	r19,4(r21)
  a03f60:	dc800e15 	stw	r18,56(sp)
  a03f64:	dc400d15 	stw	r17,52(sp)
  a03f68:	a47ff60e 	bge	r20,r17,a03f44 <___vfprintf_internal_r+0x548>
  a03f6c:	d9014f17 	ldw	r4,1340(sp)
  a03f70:	b00b883a 	mov	r5,r22
  a03f74:	d9800c04 	addi	r6,sp,48
  a03f78:	d9c15115 	stw	r7,1348(sp)
  a03f7c:	0a039a40 	call	a039a4 <__sprint_r>
  a03f80:	d9c15117 	ldw	r7,1348(sp)
  a03f84:	1000551e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a03f88:	843ffc04 	addi	r16,r16,-16
  a03f8c:	dc800e17 	ldw	r18,56(sp)
  a03f90:	dc400d17 	ldw	r17,52(sp)
  a03f94:	dd401904 	addi	r21,sp,100
  a03f98:	9c3fed16 	blt	r19,r16,a03f50 <___vfprintf_internal_r+0x554>
  a03f9c:	9425883a 	add	r18,r18,r16
  a03fa0:	8c400044 	addi	r17,r17,1
  a03fa4:	008001c4 	movi	r2,7
  a03fa8:	af000015 	stw	fp,0(r21)
  a03fac:	ac000115 	stw	r16,4(r21)
  a03fb0:	dc800e15 	stw	r18,56(sp)
  a03fb4:	dc400d15 	stw	r17,52(sp)
  a03fb8:	14418216 	blt	r2,r17,a045c4 <___vfprintf_internal_r+0xbc8>
  a03fbc:	ad400204 	addi	r21,r21,8
  a03fc0:	d9014c17 	ldw	r4,1328(sp)
  a03fc4:	2080400c 	andi	r2,r4,256
  a03fc8:	10004a1e 	bne	r2,zero,a040f4 <___vfprintf_internal_r+0x6f8>
  a03fcc:	d9414117 	ldw	r5,1284(sp)
  a03fd0:	91e5883a 	add	r18,r18,r7
  a03fd4:	8c400044 	addi	r17,r17,1
  a03fd8:	008001c4 	movi	r2,7
  a03fdc:	a9400015 	stw	r5,0(r21)
  a03fe0:	a9c00115 	stw	r7,4(r21)
  a03fe4:	dc800e15 	stw	r18,56(sp)
  a03fe8:	dc400d15 	stw	r17,52(sp)
  a03fec:	14416716 	blt	r2,r17,a0458c <___vfprintf_internal_r+0xb90>
  a03ff0:	a8c00204 	addi	r3,r21,8
  a03ff4:	d9814c17 	ldw	r6,1328(sp)
  a03ff8:	3080010c 	andi	r2,r6,4
  a03ffc:	10002826 	beq	r2,zero,a040a0 <___vfprintf_internal_r+0x6a4>
  a04000:	d8814a17 	ldw	r2,1320(sp)
  a04004:	d9014517 	ldw	r4,1300(sp)
  a04008:	1121c83a 	sub	r16,r2,r4
  a0400c:	0400240e 	bge	zero,r16,a040a0 <___vfprintf_internal_r+0x6a4>
  a04010:	00800404 	movi	r2,16
  a04014:	14044f0e 	bge	r2,r16,a05154 <___vfprintf_internal_r+0x1758>
  a04018:	dc400d17 	ldw	r17,52(sp)
  a0401c:	1027883a 	mov	r19,r2
  a04020:	07002874 	movhi	fp,161
  a04024:	e7033a84 	addi	fp,fp,3306
  a04028:	050001c4 	movi	r20,7
  a0402c:	00000306 	br	a0403c <___vfprintf_internal_r+0x640>
  a04030:	843ffc04 	addi	r16,r16,-16
  a04034:	18c00204 	addi	r3,r3,8
  a04038:	9c00110e 	bge	r19,r16,a04080 <___vfprintf_internal_r+0x684>
  a0403c:	94800404 	addi	r18,r18,16
  a04040:	8c400044 	addi	r17,r17,1
  a04044:	1f000015 	stw	fp,0(r3)
  a04048:	1cc00115 	stw	r19,4(r3)
  a0404c:	dc800e15 	stw	r18,56(sp)
  a04050:	dc400d15 	stw	r17,52(sp)
  a04054:	a47ff60e 	bge	r20,r17,a04030 <___vfprintf_internal_r+0x634>
  a04058:	d9014f17 	ldw	r4,1340(sp)
  a0405c:	b00b883a 	mov	r5,r22
  a04060:	d9800c04 	addi	r6,sp,48
  a04064:	0a039a40 	call	a039a4 <__sprint_r>
  a04068:	10001c1e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a0406c:	843ffc04 	addi	r16,r16,-16
  a04070:	dc800e17 	ldw	r18,56(sp)
  a04074:	dc400d17 	ldw	r17,52(sp)
  a04078:	d8c01904 	addi	r3,sp,100
  a0407c:	9c3fef16 	blt	r19,r16,a0403c <___vfprintf_internal_r+0x640>
  a04080:	9425883a 	add	r18,r18,r16
  a04084:	8c400044 	addi	r17,r17,1
  a04088:	008001c4 	movi	r2,7
  a0408c:	1f000015 	stw	fp,0(r3)
  a04090:	1c000115 	stw	r16,4(r3)
  a04094:	dc800e15 	stw	r18,56(sp)
  a04098:	dc400d15 	stw	r17,52(sp)
  a0409c:	1440cb16 	blt	r2,r17,a043cc <___vfprintf_internal_r+0x9d0>
  a040a0:	d8814a17 	ldw	r2,1320(sp)
  a040a4:	d9414517 	ldw	r5,1300(sp)
  a040a8:	1140010e 	bge	r2,r5,a040b0 <___vfprintf_internal_r+0x6b4>
  a040ac:	2805883a 	mov	r2,r5
  a040b0:	d9814b17 	ldw	r6,1324(sp)
  a040b4:	308d883a 	add	r6,r6,r2
  a040b8:	d9814b15 	stw	r6,1324(sp)
  a040bc:	90013b1e 	bne	r18,zero,a045ac <___vfprintf_internal_r+0xbb0>
  a040c0:	d9c14017 	ldw	r7,1280(sp)
  a040c4:	dd401904 	addi	r21,sp,100
  a040c8:	d8000d15 	stw	zero,52(sp)
  a040cc:	003ea706 	br	a03b6c <___vfprintf_internal_r+0x170>
  a040d0:	d8800e17 	ldw	r2,56(sp)
  a040d4:	10053f1e 	bne	r2,zero,a055d4 <___vfprintf_internal_r+0x1bd8>
  a040d8:	d8000d15 	stw	zero,52(sp)
  a040dc:	b080030b 	ldhu	r2,12(r22)
  a040e0:	1080100c 	andi	r2,r2,64
  a040e4:	103e8726 	beq	r2,zero,a03b04 <___vfprintf_internal_r+0x108>
  a040e8:	00bfffc4 	movi	r2,-1
  a040ec:	d8814b15 	stw	r2,1324(sp)
  a040f0:	003e8406 	br	a03b04 <___vfprintf_internal_r+0x108>
  a040f4:	d9814d17 	ldw	r6,1332(sp)
  a040f8:	00801944 	movi	r2,101
  a040fc:	11806e16 	blt	r2,r6,a042b8 <___vfprintf_internal_r+0x8bc>
  a04100:	d9414717 	ldw	r5,1308(sp)
  a04104:	00c00044 	movi	r3,1
  a04108:	1943430e 	bge	r3,r5,a04e18 <___vfprintf_internal_r+0x141c>
  a0410c:	d8814117 	ldw	r2,1284(sp)
  a04110:	94800044 	addi	r18,r18,1
  a04114:	8c400044 	addi	r17,r17,1
  a04118:	a8800015 	stw	r2,0(r21)
  a0411c:	008001c4 	movi	r2,7
  a04120:	a8c00115 	stw	r3,4(r21)
  a04124:	dc800e15 	stw	r18,56(sp)
  a04128:	dc400d15 	stw	r17,52(sp)
  a0412c:	1441ca16 	blt	r2,r17,a04858 <___vfprintf_internal_r+0xe5c>
  a04130:	a8c00204 	addi	r3,r21,8
  a04134:	d9014917 	ldw	r4,1316(sp)
  a04138:	00800044 	movi	r2,1
  a0413c:	94800044 	addi	r18,r18,1
  a04140:	8c400044 	addi	r17,r17,1
  a04144:	18800115 	stw	r2,4(r3)
  a04148:	008001c4 	movi	r2,7
  a0414c:	19000015 	stw	r4,0(r3)
  a04150:	dc800e15 	stw	r18,56(sp)
  a04154:	dc400d15 	stw	r17,52(sp)
  a04158:	1441b616 	blt	r2,r17,a04834 <___vfprintf_internal_r+0xe38>
  a0415c:	1cc00204 	addi	r19,r3,8
  a04160:	d9014217 	ldw	r4,1288(sp)
  a04164:	d9414317 	ldw	r5,1292(sp)
  a04168:	000d883a 	mov	r6,zero
  a0416c:	000f883a 	mov	r7,zero
  a04170:	0a02cc40 	call	a02cc4 <__nedf2>
  a04174:	10017426 	beq	r2,zero,a04748 <___vfprintf_internal_r+0xd4c>
  a04178:	d9414717 	ldw	r5,1308(sp)
  a0417c:	d9814117 	ldw	r6,1284(sp)
  a04180:	8c400044 	addi	r17,r17,1
  a04184:	2c85883a 	add	r2,r5,r18
  a04188:	14bfffc4 	addi	r18,r2,-1
  a0418c:	28bfffc4 	addi	r2,r5,-1
  a04190:	30c00044 	addi	r3,r6,1
  a04194:	98800115 	stw	r2,4(r19)
  a04198:	008001c4 	movi	r2,7
  a0419c:	98c00015 	stw	r3,0(r19)
  a041a0:	dc800e15 	stw	r18,56(sp)
  a041a4:	dc400d15 	stw	r17,52(sp)
  a041a8:	14418e16 	blt	r2,r17,a047e4 <___vfprintf_internal_r+0xde8>
  a041ac:	9cc00204 	addi	r19,r19,8
  a041b0:	d9414817 	ldw	r5,1312(sp)
  a041b4:	d8800804 	addi	r2,sp,32
  a041b8:	8c400044 	addi	r17,r17,1
  a041bc:	9165883a 	add	r18,r18,r5
  a041c0:	98800015 	stw	r2,0(r19)
  a041c4:	008001c4 	movi	r2,7
  a041c8:	99400115 	stw	r5,4(r19)
  a041cc:	dc800e15 	stw	r18,56(sp)
  a041d0:	dc400d15 	stw	r17,52(sp)
  a041d4:	1440ed16 	blt	r2,r17,a0458c <___vfprintf_internal_r+0xb90>
  a041d8:	98c00204 	addi	r3,r19,8
  a041dc:	003f8506 	br	a03ff4 <___vfprintf_internal_r+0x5f8>
  a041e0:	d9814a17 	ldw	r6,1320(sp)
  a041e4:	d8814517 	ldw	r2,1300(sp)
  a041e8:	30a1c83a 	sub	r16,r6,r2
  a041ec:	043f4b0e 	bge	zero,r16,a03f1c <___vfprintf_internal_r+0x520>
  a041f0:	00800404 	movi	r2,16
  a041f4:	1404340e 	bge	r2,r16,a052c8 <___vfprintf_internal_r+0x18cc>
  a041f8:	1027883a 	mov	r19,r2
  a041fc:	07002874 	movhi	fp,161
  a04200:	e7033684 	addi	fp,fp,3290
  a04204:	050001c4 	movi	r20,7
  a04208:	00000306 	br	a04218 <___vfprintf_internal_r+0x81c>
  a0420c:	843ffc04 	addi	r16,r16,-16
  a04210:	ad400204 	addi	r21,r21,8
  a04214:	9c00130e 	bge	r19,r16,a04264 <___vfprintf_internal_r+0x868>
  a04218:	94800404 	addi	r18,r18,16
  a0421c:	8c400044 	addi	r17,r17,1
  a04220:	af000015 	stw	fp,0(r21)
  a04224:	acc00115 	stw	r19,4(r21)
  a04228:	dc800e15 	stw	r18,56(sp)
  a0422c:	dc400d15 	stw	r17,52(sp)
  a04230:	a47ff60e 	bge	r20,r17,a0420c <___vfprintf_internal_r+0x810>
  a04234:	d9014f17 	ldw	r4,1340(sp)
  a04238:	b00b883a 	mov	r5,r22
  a0423c:	d9800c04 	addi	r6,sp,48
  a04240:	d9c15115 	stw	r7,1348(sp)
  a04244:	0a039a40 	call	a039a4 <__sprint_r>
  a04248:	d9c15117 	ldw	r7,1348(sp)
  a0424c:	103fa31e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a04250:	843ffc04 	addi	r16,r16,-16
  a04254:	dc800e17 	ldw	r18,56(sp)
  a04258:	dc400d17 	ldw	r17,52(sp)
  a0425c:	dd401904 	addi	r21,sp,100
  a04260:	9c3fed16 	blt	r19,r16,a04218 <___vfprintf_internal_r+0x81c>
  a04264:	9425883a 	add	r18,r18,r16
  a04268:	8c400044 	addi	r17,r17,1
  a0426c:	008001c4 	movi	r2,7
  a04270:	af000015 	stw	fp,0(r21)
  a04274:	ac000115 	stw	r16,4(r21)
  a04278:	dc800e15 	stw	r18,56(sp)
  a0427c:	dc400d15 	stw	r17,52(sp)
  a04280:	14416116 	blt	r2,r17,a04808 <___vfprintf_internal_r+0xe0c>
  a04284:	ad400204 	addi	r21,r21,8
  a04288:	003f2406 	br	a03f1c <___vfprintf_internal_r+0x520>
  a0428c:	d9014f17 	ldw	r4,1340(sp)
  a04290:	0a0746c0 	call	a0746c <__sinit>
  a04294:	d9c15117 	ldw	r7,1348(sp)
  a04298:	003def06 	br	a03a58 <___vfprintf_internal_r+0x5c>
  a0429c:	d9014f17 	ldw	r4,1340(sp)
  a042a0:	b00b883a 	mov	r5,r22
  a042a4:	d9c15115 	stw	r7,1348(sp)
  a042a8:	0a058cc0 	call	a058cc <__swsetup_r>
  a042ac:	d9c15117 	ldw	r7,1348(sp)
  a042b0:	103dee26 	beq	r2,zero,a03a6c <___vfprintf_internal_r+0x70>
  a042b4:	003f8c06 	br	a040e8 <___vfprintf_internal_r+0x6ec>
  a042b8:	d9014217 	ldw	r4,1288(sp)
  a042bc:	d9414317 	ldw	r5,1292(sp)
  a042c0:	000d883a 	mov	r6,zero
  a042c4:	000f883a 	mov	r7,zero
  a042c8:	0a0ba680 	call	a0ba68 <__eqdf2>
  a042cc:	1000f21e 	bne	r2,zero,a04698 <___vfprintf_internal_r+0xc9c>
  a042d0:	00802874 	movhi	r2,161
  a042d4:	1082c504 	addi	r2,r2,2836
  a042d8:	94800044 	addi	r18,r18,1
  a042dc:	8c400044 	addi	r17,r17,1
  a042e0:	a8800015 	stw	r2,0(r21)
  a042e4:	00c00044 	movi	r3,1
  a042e8:	008001c4 	movi	r2,7
  a042ec:	a8c00115 	stw	r3,4(r21)
  a042f0:	dc800e15 	stw	r18,56(sp)
  a042f4:	dc400d15 	stw	r17,52(sp)
  a042f8:	1442fa16 	blt	r2,r17,a04ee4 <___vfprintf_internal_r+0x14e8>
  a042fc:	a8c00204 	addi	r3,r21,8
  a04300:	d8800517 	ldw	r2,20(sp)
  a04304:	d9014717 	ldw	r4,1308(sp)
  a04308:	11015c0e 	bge	r2,r4,a0487c <___vfprintf_internal_r+0xe80>
  a0430c:	dc400d17 	ldw	r17,52(sp)
  a04310:	d9814917 	ldw	r6,1316(sp)
  a04314:	00800044 	movi	r2,1
  a04318:	94800044 	addi	r18,r18,1
  a0431c:	8c400044 	addi	r17,r17,1
  a04320:	18800115 	stw	r2,4(r3)
  a04324:	008001c4 	movi	r2,7
  a04328:	19800015 	stw	r6,0(r3)
  a0432c:	dc800e15 	stw	r18,56(sp)
  a04330:	dc400d15 	stw	r17,52(sp)
  a04334:	14431016 	blt	r2,r17,a04f78 <___vfprintf_internal_r+0x157c>
  a04338:	18c00204 	addi	r3,r3,8
  a0433c:	d8814717 	ldw	r2,1308(sp)
  a04340:	143fffc4 	addi	r16,r2,-1
  a04344:	043f2b0e 	bge	zero,r16,a03ff4 <___vfprintf_internal_r+0x5f8>
  a04348:	00800404 	movi	r2,16
  a0434c:	1402a20e 	bge	r2,r16,a04dd8 <___vfprintf_internal_r+0x13dc>
  a04350:	dc400d17 	ldw	r17,52(sp)
  a04354:	1027883a 	mov	r19,r2
  a04358:	07002874 	movhi	fp,161
  a0435c:	e7033684 	addi	fp,fp,3290
  a04360:	050001c4 	movi	r20,7
  a04364:	00000306 	br	a04374 <___vfprintf_internal_r+0x978>
  a04368:	18c00204 	addi	r3,r3,8
  a0436c:	843ffc04 	addi	r16,r16,-16
  a04370:	9c029c0e 	bge	r19,r16,a04de4 <___vfprintf_internal_r+0x13e8>
  a04374:	94800404 	addi	r18,r18,16
  a04378:	8c400044 	addi	r17,r17,1
  a0437c:	1f000015 	stw	fp,0(r3)
  a04380:	1cc00115 	stw	r19,4(r3)
  a04384:	dc800e15 	stw	r18,56(sp)
  a04388:	dc400d15 	stw	r17,52(sp)
  a0438c:	a47ff60e 	bge	r20,r17,a04368 <___vfprintf_internal_r+0x96c>
  a04390:	d9014f17 	ldw	r4,1340(sp)
  a04394:	b00b883a 	mov	r5,r22
  a04398:	d9800c04 	addi	r6,sp,48
  a0439c:	0a039a40 	call	a039a4 <__sprint_r>
  a043a0:	103f4e1e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a043a4:	dc800e17 	ldw	r18,56(sp)
  a043a8:	dc400d17 	ldw	r17,52(sp)
  a043ac:	d8c01904 	addi	r3,sp,100
  a043b0:	003fee06 	br	a0436c <___vfprintf_internal_r+0x970>
  a043b4:	d8802c0b 	ldhu	r2,176(sp)
  a043b8:	00ffffc4 	movi	r3,-1
  a043bc:	d8c14b15 	stw	r3,1324(sp)
  a043c0:	1080100c 	andi	r2,r2,64
  a043c4:	103dcc1e 	bne	r2,zero,a03af8 <___vfprintf_internal_r+0xfc>
  a043c8:	003dce06 	br	a03b04 <___vfprintf_internal_r+0x108>
  a043cc:	d9014f17 	ldw	r4,1340(sp)
  a043d0:	b00b883a 	mov	r5,r22
  a043d4:	d9800c04 	addi	r6,sp,48
  a043d8:	0a039a40 	call	a039a4 <__sprint_r>
  a043dc:	103f3f1e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a043e0:	dc800e17 	ldw	r18,56(sp)
  a043e4:	003f2e06 	br	a040a0 <___vfprintf_internal_r+0x6a4>
  a043e8:	d9414c17 	ldw	r5,1328(sp)
  a043ec:	29400414 	ori	r5,r5,16
  a043f0:	d9414c15 	stw	r5,1328(sp)
  a043f4:	d9814c17 	ldw	r6,1328(sp)
  a043f8:	3080080c 	andi	r2,r6,32
  a043fc:	10014f1e 	bne	r2,zero,a0493c <___vfprintf_internal_r+0xf40>
  a04400:	d8c14c17 	ldw	r3,1328(sp)
  a04404:	1880040c 	andi	r2,r3,16
  a04408:	1002ea1e 	bne	r2,zero,a04fb4 <___vfprintf_internal_r+0x15b8>
  a0440c:	d9014c17 	ldw	r4,1328(sp)
  a04410:	2080100c 	andi	r2,r4,64
  a04414:	1002e726 	beq	r2,zero,a04fb4 <___vfprintf_internal_r+0x15b8>
  a04418:	3880000f 	ldh	r2,0(r7)
  a0441c:	39c00104 	addi	r7,r7,4
  a04420:	d9c14015 	stw	r7,1280(sp)
  a04424:	1023d7fa 	srai	r17,r2,31
  a04428:	1021883a 	mov	r16,r2
  a0442c:	88037216 	blt	r17,zero,a051f8 <___vfprintf_internal_r+0x17fc>
  a04430:	01000044 	movi	r4,1
  a04434:	98000416 	blt	r19,zero,a04448 <___vfprintf_internal_r+0xa4c>
  a04438:	d8c14c17 	ldw	r3,1328(sp)
  a0443c:	00bfdfc4 	movi	r2,-129
  a04440:	1886703a 	and	r3,r3,r2
  a04444:	d8c14c15 	stw	r3,1328(sp)
  a04448:	8444b03a 	or	r2,r16,r17
  a0444c:	1002261e 	bne	r2,zero,a04ce8 <___vfprintf_internal_r+0x12ec>
  a04450:	9802251e 	bne	r19,zero,a04ce8 <___vfprintf_internal_r+0x12ec>
  a04454:	20803fcc 	andi	r2,r4,255
  a04458:	10029b26 	beq	r2,zero,a04ec8 <___vfprintf_internal_r+0x14cc>
  a0445c:	d8c01904 	addi	r3,sp,100
  a04460:	dd000f04 	addi	r20,sp,60
  a04464:	d8c14115 	stw	r3,1284(sp)
  a04468:	d8c14117 	ldw	r3,1284(sp)
  a0446c:	dcc14515 	stw	r19,1300(sp)
  a04470:	a0c5c83a 	sub	r2,r20,r3
  a04474:	11c00a04 	addi	r7,r2,40
  a04478:	99c0010e 	bge	r19,r7,a04480 <___vfprintf_internal_r+0xa84>
  a0447c:	d9c14515 	stw	r7,1300(sp)
  a04480:	dcc14615 	stw	r19,1304(sp)
  a04484:	d8800407 	ldb	r2,16(sp)
  a04488:	103e4c26 	beq	r2,zero,a03dbc <___vfprintf_internal_r+0x3c0>
  a0448c:	d8814517 	ldw	r2,1300(sp)
  a04490:	10800044 	addi	r2,r2,1
  a04494:	d8814515 	stw	r2,1300(sp)
  a04498:	003e4806 	br	a03dbc <___vfprintf_internal_r+0x3c0>
  a0449c:	d9814c17 	ldw	r6,1328(sp)
  a044a0:	31800414 	ori	r6,r6,16
  a044a4:	d9814c15 	stw	r6,1328(sp)
  a044a8:	d8c14c17 	ldw	r3,1328(sp)
  a044ac:	1880080c 	andi	r2,r3,32
  a044b0:	1001271e 	bne	r2,zero,a04950 <___vfprintf_internal_r+0xf54>
  a044b4:	d9414c17 	ldw	r5,1328(sp)
  a044b8:	2880040c 	andi	r2,r5,16
  a044bc:	1002b61e 	bne	r2,zero,a04f98 <___vfprintf_internal_r+0x159c>
  a044c0:	d9814c17 	ldw	r6,1328(sp)
  a044c4:	3080100c 	andi	r2,r6,64
  a044c8:	1002b326 	beq	r2,zero,a04f98 <___vfprintf_internal_r+0x159c>
  a044cc:	3c00000b 	ldhu	r16,0(r7)
  a044d0:	0009883a 	mov	r4,zero
  a044d4:	39c00104 	addi	r7,r7,4
  a044d8:	0023883a 	mov	r17,zero
  a044dc:	d9c14015 	stw	r7,1280(sp)
  a044e0:	d8000405 	stb	zero,16(sp)
  a044e4:	003fd306 	br	a04434 <___vfprintf_internal_r+0xa38>
  a044e8:	d9014c17 	ldw	r4,1328(sp)
  a044ec:	21000414 	ori	r4,r4,16
  a044f0:	d9014c15 	stw	r4,1328(sp)
  a044f4:	d9414c17 	ldw	r5,1328(sp)
  a044f8:	2880080c 	andi	r2,r5,32
  a044fc:	1001081e 	bne	r2,zero,a04920 <___vfprintf_internal_r+0xf24>
  a04500:	d8c14c17 	ldw	r3,1328(sp)
  a04504:	1880040c 	andi	r2,r3,16
  a04508:	1002b01e 	bne	r2,zero,a04fcc <___vfprintf_internal_r+0x15d0>
  a0450c:	d9014c17 	ldw	r4,1328(sp)
  a04510:	2080100c 	andi	r2,r4,64
  a04514:	1002ad26 	beq	r2,zero,a04fcc <___vfprintf_internal_r+0x15d0>
  a04518:	3c00000b 	ldhu	r16,0(r7)
  a0451c:	01000044 	movi	r4,1
  a04520:	39c00104 	addi	r7,r7,4
  a04524:	0023883a 	mov	r17,zero
  a04528:	d9c14015 	stw	r7,1280(sp)
  a0452c:	d8000405 	stb	zero,16(sp)
  a04530:	003fc006 	br	a04434 <___vfprintf_internal_r+0xa38>
  a04534:	d9014f17 	ldw	r4,1340(sp)
  a04538:	b00b883a 	mov	r5,r22
  a0453c:	d9800c04 	addi	r6,sp,48
  a04540:	0a039a40 	call	a039a4 <__sprint_r>
  a04544:	103ee51e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a04548:	dc800e17 	ldw	r18,56(sp)
  a0454c:	d8c01904 	addi	r3,sp,100
  a04550:	d9814c17 	ldw	r6,1328(sp)
  a04554:	3080004c 	andi	r2,r6,1
  a04558:	1005003a 	cmpeq	r2,r2,zero
  a0455c:	103ea51e 	bne	r2,zero,a03ff4 <___vfprintf_internal_r+0x5f8>
  a04560:	00800044 	movi	r2,1
  a04564:	dc400d17 	ldw	r17,52(sp)
  a04568:	18800115 	stw	r2,4(r3)
  a0456c:	d8814917 	ldw	r2,1316(sp)
  a04570:	94800044 	addi	r18,r18,1
  a04574:	8c400044 	addi	r17,r17,1
  a04578:	18800015 	stw	r2,0(r3)
  a0457c:	008001c4 	movi	r2,7
  a04580:	dc800e15 	stw	r18,56(sp)
  a04584:	dc400d15 	stw	r17,52(sp)
  a04588:	14421e0e 	bge	r2,r17,a04e04 <___vfprintf_internal_r+0x1408>
  a0458c:	d9014f17 	ldw	r4,1340(sp)
  a04590:	b00b883a 	mov	r5,r22
  a04594:	d9800c04 	addi	r6,sp,48
  a04598:	0a039a40 	call	a039a4 <__sprint_r>
  a0459c:	103ecf1e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a045a0:	dc800e17 	ldw	r18,56(sp)
  a045a4:	d8c01904 	addi	r3,sp,100
  a045a8:	003e9206 	br	a03ff4 <___vfprintf_internal_r+0x5f8>
  a045ac:	d9014f17 	ldw	r4,1340(sp)
  a045b0:	b00b883a 	mov	r5,r22
  a045b4:	d9800c04 	addi	r6,sp,48
  a045b8:	0a039a40 	call	a039a4 <__sprint_r>
  a045bc:	103ec026 	beq	r2,zero,a040c0 <___vfprintf_internal_r+0x6c4>
  a045c0:	003ec606 	br	a040dc <___vfprintf_internal_r+0x6e0>
  a045c4:	d9014f17 	ldw	r4,1340(sp)
  a045c8:	b00b883a 	mov	r5,r22
  a045cc:	d9800c04 	addi	r6,sp,48
  a045d0:	d9c15115 	stw	r7,1348(sp)
  a045d4:	0a039a40 	call	a039a4 <__sprint_r>
  a045d8:	d9c15117 	ldw	r7,1348(sp)
  a045dc:	103ebf1e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a045e0:	dc800e17 	ldw	r18,56(sp)
  a045e4:	dc400d17 	ldw	r17,52(sp)
  a045e8:	dd401904 	addi	r21,sp,100
  a045ec:	003e7406 	br	a03fc0 <___vfprintf_internal_r+0x5c4>
  a045f0:	d9014f17 	ldw	r4,1340(sp)
  a045f4:	b00b883a 	mov	r5,r22
  a045f8:	d9800c04 	addi	r6,sp,48
  a045fc:	d9c15115 	stw	r7,1348(sp)
  a04600:	0a039a40 	call	a039a4 <__sprint_r>
  a04604:	d9c15117 	ldw	r7,1348(sp)
  a04608:	103eb41e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a0460c:	dd401904 	addi	r21,sp,100
  a04610:	003d6d06 	br	a03bc8 <___vfprintf_internal_r+0x1cc>
  a04614:	d9014f17 	ldw	r4,1340(sp)
  a04618:	b00b883a 	mov	r5,r22
  a0461c:	d9800c04 	addi	r6,sp,48
  a04620:	d9c15115 	stw	r7,1348(sp)
  a04624:	0a039a40 	call	a039a4 <__sprint_r>
  a04628:	d9c15117 	ldw	r7,1348(sp)
  a0462c:	103eab1e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a04630:	dc800e17 	ldw	r18,56(sp)
  a04634:	dc400d17 	ldw	r17,52(sp)
  a04638:	dd401904 	addi	r21,sp,100
  a0463c:	003e3406 	br	a03f10 <___vfprintf_internal_r+0x514>
  a04640:	d9014f17 	ldw	r4,1340(sp)
  a04644:	b00b883a 	mov	r5,r22
  a04648:	d9800c04 	addi	r6,sp,48
  a0464c:	d9c15115 	stw	r7,1348(sp)
  a04650:	0a039a40 	call	a039a4 <__sprint_r>
  a04654:	d9c15117 	ldw	r7,1348(sp)
  a04658:	103ea01e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a0465c:	dc800e17 	ldw	r18,56(sp)
  a04660:	dc400d17 	ldw	r17,52(sp)
  a04664:	dd401904 	addi	r21,sp,100
  a04668:	003e1c06 	br	a03edc <___vfprintf_internal_r+0x4e0>
  a0466c:	d9014f17 	ldw	r4,1340(sp)
  a04670:	b00b883a 	mov	r5,r22
  a04674:	d9800c04 	addi	r6,sp,48
  a04678:	d9c15115 	stw	r7,1348(sp)
  a0467c:	0a039a40 	call	a039a4 <__sprint_r>
  a04680:	d9c15117 	ldw	r7,1348(sp)
  a04684:	103e951e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a04688:	dc800e17 	ldw	r18,56(sp)
  a0468c:	dc400d17 	ldw	r17,52(sp)
  a04690:	dd401904 	addi	r21,sp,100
  a04694:	003e0406 	br	a03ea8 <___vfprintf_internal_r+0x4ac>
  a04698:	d9000517 	ldw	r4,20(sp)
  a0469c:	0102520e 	bge	zero,r4,a04fe8 <___vfprintf_internal_r+0x15ec>
  a046a0:	d9814717 	ldw	r6,1308(sp)
  a046a4:	21807a16 	blt	r4,r6,a04890 <___vfprintf_internal_r+0xe94>
  a046a8:	d8814117 	ldw	r2,1284(sp)
  a046ac:	91a5883a 	add	r18,r18,r6
  a046b0:	8c400044 	addi	r17,r17,1
  a046b4:	a8800015 	stw	r2,0(r21)
  a046b8:	008001c4 	movi	r2,7
  a046bc:	a9800115 	stw	r6,4(r21)
  a046c0:	dc800e15 	stw	r18,56(sp)
  a046c4:	dc400d15 	stw	r17,52(sp)
  a046c8:	1442f616 	blt	r2,r17,a052a4 <___vfprintf_internal_r+0x18a8>
  a046cc:	a8c00204 	addi	r3,r21,8
  a046d0:	d9414717 	ldw	r5,1308(sp)
  a046d4:	2161c83a 	sub	r16,r4,r5
  a046d8:	043f9d0e 	bge	zero,r16,a04550 <___vfprintf_internal_r+0xb54>
  a046dc:	00800404 	movi	r2,16
  a046e0:	1402130e 	bge	r2,r16,a04f30 <___vfprintf_internal_r+0x1534>
  a046e4:	dc400d17 	ldw	r17,52(sp)
  a046e8:	1027883a 	mov	r19,r2
  a046ec:	07002874 	movhi	fp,161
  a046f0:	e7033684 	addi	fp,fp,3290
  a046f4:	050001c4 	movi	r20,7
  a046f8:	00000306 	br	a04708 <___vfprintf_internal_r+0xd0c>
  a046fc:	18c00204 	addi	r3,r3,8
  a04700:	843ffc04 	addi	r16,r16,-16
  a04704:	9c020d0e 	bge	r19,r16,a04f3c <___vfprintf_internal_r+0x1540>
  a04708:	94800404 	addi	r18,r18,16
  a0470c:	8c400044 	addi	r17,r17,1
  a04710:	1f000015 	stw	fp,0(r3)
  a04714:	1cc00115 	stw	r19,4(r3)
  a04718:	dc800e15 	stw	r18,56(sp)
  a0471c:	dc400d15 	stw	r17,52(sp)
  a04720:	a47ff60e 	bge	r20,r17,a046fc <___vfprintf_internal_r+0xd00>
  a04724:	d9014f17 	ldw	r4,1340(sp)
  a04728:	b00b883a 	mov	r5,r22
  a0472c:	d9800c04 	addi	r6,sp,48
  a04730:	0a039a40 	call	a039a4 <__sprint_r>
  a04734:	103e691e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a04738:	dc800e17 	ldw	r18,56(sp)
  a0473c:	dc400d17 	ldw	r17,52(sp)
  a04740:	d8c01904 	addi	r3,sp,100
  a04744:	003fee06 	br	a04700 <___vfprintf_internal_r+0xd04>
  a04748:	d8814717 	ldw	r2,1308(sp)
  a0474c:	143fffc4 	addi	r16,r2,-1
  a04750:	043e970e 	bge	zero,r16,a041b0 <___vfprintf_internal_r+0x7b4>
  a04754:	00800404 	movi	r2,16
  a04758:	1400180e 	bge	r2,r16,a047bc <___vfprintf_internal_r+0xdc0>
  a0475c:	1029883a 	mov	r20,r2
  a04760:	07002874 	movhi	fp,161
  a04764:	e7033684 	addi	fp,fp,3290
  a04768:	054001c4 	movi	r21,7
  a0476c:	00000306 	br	a0477c <___vfprintf_internal_r+0xd80>
  a04770:	9cc00204 	addi	r19,r19,8
  a04774:	843ffc04 	addi	r16,r16,-16
  a04778:	a400120e 	bge	r20,r16,a047c4 <___vfprintf_internal_r+0xdc8>
  a0477c:	94800404 	addi	r18,r18,16
  a04780:	8c400044 	addi	r17,r17,1
  a04784:	9f000015 	stw	fp,0(r19)
  a04788:	9d000115 	stw	r20,4(r19)
  a0478c:	dc800e15 	stw	r18,56(sp)
  a04790:	dc400d15 	stw	r17,52(sp)
  a04794:	ac7ff60e 	bge	r21,r17,a04770 <___vfprintf_internal_r+0xd74>
  a04798:	d9014f17 	ldw	r4,1340(sp)
  a0479c:	b00b883a 	mov	r5,r22
  a047a0:	d9800c04 	addi	r6,sp,48
  a047a4:	0a039a40 	call	a039a4 <__sprint_r>
  a047a8:	103e4c1e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a047ac:	dc800e17 	ldw	r18,56(sp)
  a047b0:	dc400d17 	ldw	r17,52(sp)
  a047b4:	dcc01904 	addi	r19,sp,100
  a047b8:	003fee06 	br	a04774 <___vfprintf_internal_r+0xd78>
  a047bc:	07002874 	movhi	fp,161
  a047c0:	e7033684 	addi	fp,fp,3290
  a047c4:	9425883a 	add	r18,r18,r16
  a047c8:	8c400044 	addi	r17,r17,1
  a047cc:	008001c4 	movi	r2,7
  a047d0:	9f000015 	stw	fp,0(r19)
  a047d4:	9c000115 	stw	r16,4(r19)
  a047d8:	dc800e15 	stw	r18,56(sp)
  a047dc:	dc400d15 	stw	r17,52(sp)
  a047e0:	147e720e 	bge	r2,r17,a041ac <___vfprintf_internal_r+0x7b0>
  a047e4:	d9014f17 	ldw	r4,1340(sp)
  a047e8:	b00b883a 	mov	r5,r22
  a047ec:	d9800c04 	addi	r6,sp,48
  a047f0:	0a039a40 	call	a039a4 <__sprint_r>
  a047f4:	103e391e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a047f8:	dc800e17 	ldw	r18,56(sp)
  a047fc:	dc400d17 	ldw	r17,52(sp)
  a04800:	dcc01904 	addi	r19,sp,100
  a04804:	003e6a06 	br	a041b0 <___vfprintf_internal_r+0x7b4>
  a04808:	d9014f17 	ldw	r4,1340(sp)
  a0480c:	b00b883a 	mov	r5,r22
  a04810:	d9800c04 	addi	r6,sp,48
  a04814:	d9c15115 	stw	r7,1348(sp)
  a04818:	0a039a40 	call	a039a4 <__sprint_r>
  a0481c:	d9c15117 	ldw	r7,1348(sp)
  a04820:	103e2e1e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a04824:	dc800e17 	ldw	r18,56(sp)
  a04828:	dc400d17 	ldw	r17,52(sp)
  a0482c:	dd401904 	addi	r21,sp,100
  a04830:	003dba06 	br	a03f1c <___vfprintf_internal_r+0x520>
  a04834:	d9014f17 	ldw	r4,1340(sp)
  a04838:	b00b883a 	mov	r5,r22
  a0483c:	d9800c04 	addi	r6,sp,48
  a04840:	0a039a40 	call	a039a4 <__sprint_r>
  a04844:	103e251e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a04848:	dc800e17 	ldw	r18,56(sp)
  a0484c:	dc400d17 	ldw	r17,52(sp)
  a04850:	dcc01904 	addi	r19,sp,100
  a04854:	003e4206 	br	a04160 <___vfprintf_internal_r+0x764>
  a04858:	d9014f17 	ldw	r4,1340(sp)
  a0485c:	b00b883a 	mov	r5,r22
  a04860:	d9800c04 	addi	r6,sp,48
  a04864:	0a039a40 	call	a039a4 <__sprint_r>
  a04868:	103e1c1e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a0486c:	dc800e17 	ldw	r18,56(sp)
  a04870:	dc400d17 	ldw	r17,52(sp)
  a04874:	d8c01904 	addi	r3,sp,100
  a04878:	003e2e06 	br	a04134 <___vfprintf_internal_r+0x738>
  a0487c:	d9414c17 	ldw	r5,1328(sp)
  a04880:	2880004c 	andi	r2,r5,1
  a04884:	1005003a 	cmpeq	r2,r2,zero
  a04888:	103dda1e 	bne	r2,zero,a03ff4 <___vfprintf_internal_r+0x5f8>
  a0488c:	003e9f06 	br	a0430c <___vfprintf_internal_r+0x910>
  a04890:	d8c14117 	ldw	r3,1284(sp)
  a04894:	9125883a 	add	r18,r18,r4
  a04898:	8c400044 	addi	r17,r17,1
  a0489c:	008001c4 	movi	r2,7
  a048a0:	a8c00015 	stw	r3,0(r21)
  a048a4:	a9000115 	stw	r4,4(r21)
  a048a8:	dc800e15 	stw	r18,56(sp)
  a048ac:	dc400d15 	stw	r17,52(sp)
  a048b0:	14426616 	blt	r2,r17,a0524c <___vfprintf_internal_r+0x1850>
  a048b4:	a8c00204 	addi	r3,r21,8
  a048b8:	d9414917 	ldw	r5,1316(sp)
  a048bc:	00800044 	movi	r2,1
  a048c0:	94800044 	addi	r18,r18,1
  a048c4:	8c400044 	addi	r17,r17,1
  a048c8:	18800115 	stw	r2,4(r3)
  a048cc:	008001c4 	movi	r2,7
  a048d0:	19400015 	stw	r5,0(r3)
  a048d4:	dc800e15 	stw	r18,56(sp)
  a048d8:	dc400d15 	stw	r17,52(sp)
  a048dc:	2021883a 	mov	r16,r4
  a048e0:	14425016 	blt	r2,r17,a05224 <___vfprintf_internal_r+0x1828>
  a048e4:	19400204 	addi	r5,r3,8
  a048e8:	d9814717 	ldw	r6,1308(sp)
  a048ec:	8c400044 	addi	r17,r17,1
  a048f0:	dc400d15 	stw	r17,52(sp)
  a048f4:	3107c83a 	sub	r3,r6,r4
  a048f8:	d9014117 	ldw	r4,1284(sp)
  a048fc:	90e5883a 	add	r18,r18,r3
  a04900:	28c00115 	stw	r3,4(r5)
  a04904:	8105883a 	add	r2,r16,r4
  a04908:	28800015 	stw	r2,0(r5)
  a0490c:	008001c4 	movi	r2,7
  a04910:	dc800e15 	stw	r18,56(sp)
  a04914:	147f1d16 	blt	r2,r17,a0458c <___vfprintf_internal_r+0xb90>
  a04918:	28c00204 	addi	r3,r5,8
  a0491c:	003db506 	br	a03ff4 <___vfprintf_internal_r+0x5f8>
  a04920:	3c000017 	ldw	r16,0(r7)
  a04924:	3c400117 	ldw	r17,4(r7)
  a04928:	39800204 	addi	r6,r7,8
  a0492c:	01000044 	movi	r4,1
  a04930:	d9814015 	stw	r6,1280(sp)
  a04934:	d8000405 	stb	zero,16(sp)
  a04938:	003ebe06 	br	a04434 <___vfprintf_internal_r+0xa38>
  a0493c:	3c000017 	ldw	r16,0(r7)
  a04940:	3c400117 	ldw	r17,4(r7)
  a04944:	38800204 	addi	r2,r7,8
  a04948:	d8814015 	stw	r2,1280(sp)
  a0494c:	003eb706 	br	a0442c <___vfprintf_internal_r+0xa30>
  a04950:	3c000017 	ldw	r16,0(r7)
  a04954:	3c400117 	ldw	r17,4(r7)
  a04958:	39000204 	addi	r4,r7,8
  a0495c:	d9014015 	stw	r4,1280(sp)
  a04960:	0009883a 	mov	r4,zero
  a04964:	d8000405 	stb	zero,16(sp)
  a04968:	003eb206 	br	a04434 <___vfprintf_internal_r+0xa38>
  a0496c:	38c00017 	ldw	r3,0(r7)
  a04970:	39c00104 	addi	r7,r7,4
  a04974:	d8c14a15 	stw	r3,1320(sp)
  a04978:	1800d10e 	bge	r3,zero,a04cc0 <___vfprintf_internal_r+0x12c4>
  a0497c:	00c7c83a 	sub	r3,zero,r3
  a04980:	d8c14a15 	stw	r3,1320(sp)
  a04984:	d9014c17 	ldw	r4,1328(sp)
  a04988:	b8c00007 	ldb	r3,0(r23)
  a0498c:	21000114 	ori	r4,r4,4
  a04990:	d9014c15 	stw	r4,1328(sp)
  a04994:	003c9806 	br	a03bf8 <___vfprintf_internal_r+0x1fc>
  a04998:	d9814c17 	ldw	r6,1328(sp)
  a0499c:	3080080c 	andi	r2,r6,32
  a049a0:	1001f026 	beq	r2,zero,a05164 <___vfprintf_internal_r+0x1768>
  a049a4:	d9014b17 	ldw	r4,1324(sp)
  a049a8:	38800017 	ldw	r2,0(r7)
  a049ac:	39c00104 	addi	r7,r7,4
  a049b0:	d9c14015 	stw	r7,1280(sp)
  a049b4:	2007d7fa 	srai	r3,r4,31
  a049b8:	d9c14017 	ldw	r7,1280(sp)
  a049bc:	11000015 	stw	r4,0(r2)
  a049c0:	10c00115 	stw	r3,4(r2)
  a049c4:	003c6906 	br	a03b6c <___vfprintf_internal_r+0x170>
  a049c8:	b8c00007 	ldb	r3,0(r23)
  a049cc:	00801b04 	movi	r2,108
  a049d0:	18824f26 	beq	r3,r2,a05310 <___vfprintf_internal_r+0x1914>
  a049d4:	d9414c17 	ldw	r5,1328(sp)
  a049d8:	29400414 	ori	r5,r5,16
  a049dc:	d9414c15 	stw	r5,1328(sp)
  a049e0:	003c8506 	br	a03bf8 <___vfprintf_internal_r+0x1fc>
  a049e4:	d9814c17 	ldw	r6,1328(sp)
  a049e8:	b8c00007 	ldb	r3,0(r23)
  a049ec:	31800814 	ori	r6,r6,32
  a049f0:	d9814c15 	stw	r6,1328(sp)
  a049f4:	003c8006 	br	a03bf8 <___vfprintf_internal_r+0x1fc>
  a049f8:	d8814c17 	ldw	r2,1328(sp)
  a049fc:	3c000017 	ldw	r16,0(r7)
  a04a00:	00c01e04 	movi	r3,120
  a04a04:	10800094 	ori	r2,r2,2
  a04a08:	d8814c15 	stw	r2,1328(sp)
  a04a0c:	39c00104 	addi	r7,r7,4
  a04a10:	01402874 	movhi	r5,161
  a04a14:	29432004 	addi	r5,r5,3200
  a04a18:	00800c04 	movi	r2,48
  a04a1c:	0023883a 	mov	r17,zero
  a04a20:	01000084 	movi	r4,2
  a04a24:	d9c14015 	stw	r7,1280(sp)
  a04a28:	d8c14d15 	stw	r3,1332(sp)
  a04a2c:	d9414415 	stw	r5,1296(sp)
  a04a30:	d8800445 	stb	r2,17(sp)
  a04a34:	d8c00485 	stb	r3,18(sp)
  a04a38:	d8000405 	stb	zero,16(sp)
  a04a3c:	003e7d06 	br	a04434 <___vfprintf_internal_r+0xa38>
  a04a40:	d8814c17 	ldw	r2,1328(sp)
  a04a44:	b8c00007 	ldb	r3,0(r23)
  a04a48:	10801014 	ori	r2,r2,64
  a04a4c:	d8814c15 	stw	r2,1328(sp)
  a04a50:	003c6906 	br	a03bf8 <___vfprintf_internal_r+0x1fc>
  a04a54:	d9414c17 	ldw	r5,1328(sp)
  a04a58:	2880020c 	andi	r2,r5,8
  a04a5c:	1001df26 	beq	r2,zero,a051dc <___vfprintf_internal_r+0x17e0>
  a04a60:	39800017 	ldw	r6,0(r7)
  a04a64:	38800204 	addi	r2,r7,8
  a04a68:	d8814015 	stw	r2,1280(sp)
  a04a6c:	d9814215 	stw	r6,1288(sp)
  a04a70:	39c00117 	ldw	r7,4(r7)
  a04a74:	d9c14315 	stw	r7,1292(sp)
  a04a78:	d9014217 	ldw	r4,1288(sp)
  a04a7c:	d9414317 	ldw	r5,1292(sp)
  a04a80:	0a0a39c0 	call	a0a39c <__isinfd>
  a04a84:	10021726 	beq	r2,zero,a052e4 <___vfprintf_internal_r+0x18e8>
  a04a88:	d9014217 	ldw	r4,1288(sp)
  a04a8c:	d9414317 	ldw	r5,1292(sp)
  a04a90:	000d883a 	mov	r6,zero
  a04a94:	000f883a 	mov	r7,zero
  a04a98:	0a0bc000 	call	a0bc00 <__ltdf2>
  a04a9c:	1002ca16 	blt	r2,zero,a055c8 <___vfprintf_internal_r+0x1bcc>
  a04aa0:	d9414d17 	ldw	r5,1332(sp)
  a04aa4:	008011c4 	movi	r2,71
  a04aa8:	11420a16 	blt	r2,r5,a052d4 <___vfprintf_internal_r+0x18d8>
  a04aac:	01802874 	movhi	r6,161
  a04ab0:	31832504 	addi	r6,r6,3220
  a04ab4:	d9814115 	stw	r6,1284(sp)
  a04ab8:	d9014c17 	ldw	r4,1328(sp)
  a04abc:	00c000c4 	movi	r3,3
  a04ac0:	00bfdfc4 	movi	r2,-129
  a04ac4:	2088703a 	and	r4,r4,r2
  a04ac8:	180f883a 	mov	r7,r3
  a04acc:	d8c14515 	stw	r3,1300(sp)
  a04ad0:	d9014c15 	stw	r4,1328(sp)
  a04ad4:	d8014615 	stw	zero,1304(sp)
  a04ad8:	003e6a06 	br	a04484 <___vfprintf_internal_r+0xa88>
  a04adc:	38800017 	ldw	r2,0(r7)
  a04ae0:	00c00044 	movi	r3,1
  a04ae4:	39c00104 	addi	r7,r7,4
  a04ae8:	d9c14015 	stw	r7,1280(sp)
  a04aec:	d9000f04 	addi	r4,sp,60
  a04af0:	180f883a 	mov	r7,r3
  a04af4:	d8c14515 	stw	r3,1300(sp)
  a04af8:	d9014115 	stw	r4,1284(sp)
  a04afc:	d8800f05 	stb	r2,60(sp)
  a04b00:	d8000405 	stb	zero,16(sp)
  a04b04:	003cac06 	br	a03db8 <___vfprintf_internal_r+0x3bc>
  a04b08:	01402874 	movhi	r5,161
  a04b0c:	29432b04 	addi	r5,r5,3244
  a04b10:	d9414415 	stw	r5,1296(sp)
  a04b14:	d9814c17 	ldw	r6,1328(sp)
  a04b18:	3080080c 	andi	r2,r6,32
  a04b1c:	1000f926 	beq	r2,zero,a04f04 <___vfprintf_internal_r+0x1508>
  a04b20:	3c000017 	ldw	r16,0(r7)
  a04b24:	3c400117 	ldw	r17,4(r7)
  a04b28:	38800204 	addi	r2,r7,8
  a04b2c:	d8814015 	stw	r2,1280(sp)
  a04b30:	d9414c17 	ldw	r5,1328(sp)
  a04b34:	2880004c 	andi	r2,r5,1
  a04b38:	1005003a 	cmpeq	r2,r2,zero
  a04b3c:	1000b31e 	bne	r2,zero,a04e0c <___vfprintf_internal_r+0x1410>
  a04b40:	8444b03a 	or	r2,r16,r17
  a04b44:	1000b126 	beq	r2,zero,a04e0c <___vfprintf_internal_r+0x1410>
  a04b48:	d9814d17 	ldw	r6,1332(sp)
  a04b4c:	29400094 	ori	r5,r5,2
  a04b50:	00800c04 	movi	r2,48
  a04b54:	01000084 	movi	r4,2
  a04b58:	d9414c15 	stw	r5,1328(sp)
  a04b5c:	d8800445 	stb	r2,17(sp)
  a04b60:	d9800485 	stb	r6,18(sp)
  a04b64:	d8000405 	stb	zero,16(sp)
  a04b68:	003e3206 	br	a04434 <___vfprintf_internal_r+0xa38>
  a04b6c:	01802874 	movhi	r6,161
  a04b70:	31832004 	addi	r6,r6,3200
  a04b74:	d9814415 	stw	r6,1296(sp)
  a04b78:	003fe606 	br	a04b14 <___vfprintf_internal_r+0x1118>
  a04b7c:	00800ac4 	movi	r2,43
  a04b80:	d8800405 	stb	r2,16(sp)
  a04b84:	b8c00007 	ldb	r3,0(r23)
  a04b88:	003c1b06 	br	a03bf8 <___vfprintf_internal_r+0x1fc>
  a04b8c:	d8814c17 	ldw	r2,1328(sp)
  a04b90:	b8c00007 	ldb	r3,0(r23)
  a04b94:	10800054 	ori	r2,r2,1
  a04b98:	d8814c15 	stw	r2,1328(sp)
  a04b9c:	003c1606 	br	a03bf8 <___vfprintf_internal_r+0x1fc>
  a04ba0:	d8800407 	ldb	r2,16(sp)
  a04ba4:	1000461e 	bne	r2,zero,a04cc0 <___vfprintf_internal_r+0x12c4>
  a04ba8:	00800804 	movi	r2,32
  a04bac:	d8800405 	stb	r2,16(sp)
  a04bb0:	b8c00007 	ldb	r3,0(r23)
  a04bb4:	003c1006 	br	a03bf8 <___vfprintf_internal_r+0x1fc>
  a04bb8:	d9814c17 	ldw	r6,1328(sp)
  a04bbc:	b8c00007 	ldb	r3,0(r23)
  a04bc0:	31800214 	ori	r6,r6,8
  a04bc4:	d9814c15 	stw	r6,1328(sp)
  a04bc8:	003c0b06 	br	a03bf8 <___vfprintf_internal_r+0x1fc>
  a04bcc:	0007883a 	mov	r3,zero
  a04bd0:	01000244 	movi	r4,9
  a04bd4:	188002a4 	muli	r2,r3,10
  a04bd8:	b8c00007 	ldb	r3,0(r23)
  a04bdc:	d9814d17 	ldw	r6,1332(sp)
  a04be0:	bdc00044 	addi	r23,r23,1
  a04be4:	d8c14d15 	stw	r3,1332(sp)
  a04be8:	d9414d17 	ldw	r5,1332(sp)
  a04bec:	3085883a 	add	r2,r6,r2
  a04bf0:	10fff404 	addi	r3,r2,-48
  a04bf4:	28bff404 	addi	r2,r5,-48
  a04bf8:	20bff62e 	bgeu	r4,r2,a04bd4 <___vfprintf_internal_r+0x11d8>
  a04bfc:	d8c14a15 	stw	r3,1320(sp)
  a04c00:	003bff06 	br	a03c00 <___vfprintf_internal_r+0x204>
  a04c04:	d9414c17 	ldw	r5,1328(sp)
  a04c08:	b8c00007 	ldb	r3,0(r23)
  a04c0c:	29402014 	ori	r5,r5,128
  a04c10:	d9414c15 	stw	r5,1328(sp)
  a04c14:	003bf806 	br	a03bf8 <___vfprintf_internal_r+0x1fc>
  a04c18:	b8c00007 	ldb	r3,0(r23)
  a04c1c:	00800a84 	movi	r2,42
  a04c20:	bdc00044 	addi	r23,r23,1
  a04c24:	18831526 	beq	r3,r2,a0587c <___vfprintf_internal_r+0x1e80>
  a04c28:	d8c14d15 	stw	r3,1332(sp)
  a04c2c:	18bff404 	addi	r2,r3,-48
  a04c30:	00c00244 	movi	r3,9
  a04c34:	18827836 	bltu	r3,r2,a05618 <___vfprintf_internal_r+0x1c1c>
  a04c38:	000d883a 	mov	r6,zero
  a04c3c:	308002a4 	muli	r2,r6,10
  a04c40:	b9800007 	ldb	r6,0(r23)
  a04c44:	d9414d17 	ldw	r5,1332(sp)
  a04c48:	bdc00044 	addi	r23,r23,1
  a04c4c:	d9814d15 	stw	r6,1332(sp)
  a04c50:	d9014d17 	ldw	r4,1332(sp)
  a04c54:	1145883a 	add	r2,r2,r5
  a04c58:	11bff404 	addi	r6,r2,-48
  a04c5c:	20bff404 	addi	r2,r4,-48
  a04c60:	18bff62e 	bgeu	r3,r2,a04c3c <___vfprintf_internal_r+0x1240>
  a04c64:	3027883a 	mov	r19,r6
  a04c68:	303be50e 	bge	r6,zero,a03c00 <___vfprintf_internal_r+0x204>
  a04c6c:	04ffffc4 	movi	r19,-1
  a04c70:	003be306 	br	a03c00 <___vfprintf_internal_r+0x204>
  a04c74:	d8000405 	stb	zero,16(sp)
  a04c78:	39800017 	ldw	r6,0(r7)
  a04c7c:	39c00104 	addi	r7,r7,4
  a04c80:	d9c14015 	stw	r7,1280(sp)
  a04c84:	d9814115 	stw	r6,1284(sp)
  a04c88:	3001c926 	beq	r6,zero,a053b0 <___vfprintf_internal_r+0x19b4>
  a04c8c:	98000e16 	blt	r19,zero,a04cc8 <___vfprintf_internal_r+0x12cc>
  a04c90:	d9014117 	ldw	r4,1284(sp)
  a04c94:	000b883a 	mov	r5,zero
  a04c98:	980d883a 	mov	r6,r19
  a04c9c:	0a08ab80 	call	a08ab8 <memchr>
  a04ca0:	10025926 	beq	r2,zero,a05608 <___vfprintf_internal_r+0x1c0c>
  a04ca4:	d8c14117 	ldw	r3,1284(sp)
  a04ca8:	10cfc83a 	sub	r7,r2,r3
  a04cac:	99c19e16 	blt	r19,r7,a05328 <___vfprintf_internal_r+0x192c>
  a04cb0:	d9c14515 	stw	r7,1300(sp)
  a04cb4:	38000916 	blt	r7,zero,a04cdc <___vfprintf_internal_r+0x12e0>
  a04cb8:	d8014615 	stw	zero,1304(sp)
  a04cbc:	003df106 	br	a04484 <___vfprintf_internal_r+0xa88>
  a04cc0:	b8c00007 	ldb	r3,0(r23)
  a04cc4:	003bcc06 	br	a03bf8 <___vfprintf_internal_r+0x1fc>
  a04cc8:	d9014117 	ldw	r4,1284(sp)
  a04ccc:	0a039300 	call	a03930 <strlen>
  a04cd0:	d8814515 	stw	r2,1300(sp)
  a04cd4:	100f883a 	mov	r7,r2
  a04cd8:	103ff70e 	bge	r2,zero,a04cb8 <___vfprintf_internal_r+0x12bc>
  a04cdc:	d8014515 	stw	zero,1300(sp)
  a04ce0:	d8014615 	stw	zero,1304(sp)
  a04ce4:	003de706 	br	a04484 <___vfprintf_internal_r+0xa88>
  a04ce8:	20c03fcc 	andi	r3,r4,255
  a04cec:	00800044 	movi	r2,1
  a04cf0:	18802d26 	beq	r3,r2,a04da8 <___vfprintf_internal_r+0x13ac>
  a04cf4:	18800e36 	bltu	r3,r2,a04d30 <___vfprintf_internal_r+0x1334>
  a04cf8:	00800084 	movi	r2,2
  a04cfc:	1880fa26 	beq	r3,r2,a050e8 <___vfprintf_internal_r+0x16ec>
  a04d00:	01002874 	movhi	r4,161
  a04d04:	21033004 	addi	r4,r4,3264
  a04d08:	0a039300 	call	a03930 <strlen>
  a04d0c:	100f883a 	mov	r7,r2
  a04d10:	dcc14515 	stw	r19,1300(sp)
  a04d14:	9880010e 	bge	r19,r2,a04d1c <___vfprintf_internal_r+0x1320>
  a04d18:	d8814515 	stw	r2,1300(sp)
  a04d1c:	00802874 	movhi	r2,161
  a04d20:	10833004 	addi	r2,r2,3264
  a04d24:	dcc14615 	stw	r19,1304(sp)
  a04d28:	d8814115 	stw	r2,1284(sp)
  a04d2c:	003dd506 	br	a04484 <___vfprintf_internal_r+0xa88>
  a04d30:	d9401904 	addi	r5,sp,100
  a04d34:	dd000f04 	addi	r20,sp,60
  a04d38:	d9414115 	stw	r5,1284(sp)
  a04d3c:	880a977a 	slli	r5,r17,29
  a04d40:	d9814117 	ldw	r6,1284(sp)
  a04d44:	8004d0fa 	srli	r2,r16,3
  a04d48:	8806d0fa 	srli	r3,r17,3
  a04d4c:	810001cc 	andi	r4,r16,7
  a04d50:	2884b03a 	or	r2,r5,r2
  a04d54:	31bfffc4 	addi	r6,r6,-1
  a04d58:	21000c04 	addi	r4,r4,48
  a04d5c:	d9814115 	stw	r6,1284(sp)
  a04d60:	10cab03a 	or	r5,r2,r3
  a04d64:	31000005 	stb	r4,0(r6)
  a04d68:	1021883a 	mov	r16,r2
  a04d6c:	1823883a 	mov	r17,r3
  a04d70:	283ff21e 	bne	r5,zero,a04d3c <___vfprintf_internal_r+0x1340>
  a04d74:	d8c14c17 	ldw	r3,1328(sp)
  a04d78:	1880004c 	andi	r2,r3,1
  a04d7c:	1005003a 	cmpeq	r2,r2,zero
  a04d80:	103db91e 	bne	r2,zero,a04468 <___vfprintf_internal_r+0xa6c>
  a04d84:	20803fcc 	andi	r2,r4,255
  a04d88:	1080201c 	xori	r2,r2,128
  a04d8c:	10bfe004 	addi	r2,r2,-128
  a04d90:	00c00c04 	movi	r3,48
  a04d94:	10fdb426 	beq	r2,r3,a04468 <___vfprintf_internal_r+0xa6c>
  a04d98:	31bfffc4 	addi	r6,r6,-1
  a04d9c:	d9814115 	stw	r6,1284(sp)
  a04da0:	30c00005 	stb	r3,0(r6)
  a04da4:	003db006 	br	a04468 <___vfprintf_internal_r+0xa6c>
  a04da8:	88800068 	cmpgeui	r2,r17,1
  a04dac:	10002c1e 	bne	r2,zero,a04e60 <___vfprintf_internal_r+0x1464>
  a04db0:	8800021e 	bne	r17,zero,a04dbc <___vfprintf_internal_r+0x13c0>
  a04db4:	00800244 	movi	r2,9
  a04db8:	14002936 	bltu	r2,r16,a04e60 <___vfprintf_internal_r+0x1464>
  a04dbc:	d90018c4 	addi	r4,sp,99
  a04dc0:	dd000f04 	addi	r20,sp,60
  a04dc4:	d9014115 	stw	r4,1284(sp)
  a04dc8:	d9014117 	ldw	r4,1284(sp)
  a04dcc:	80800c04 	addi	r2,r16,48
  a04dd0:	20800005 	stb	r2,0(r4)
  a04dd4:	003da406 	br	a04468 <___vfprintf_internal_r+0xa6c>
  a04dd8:	dc400d17 	ldw	r17,52(sp)
  a04ddc:	07002874 	movhi	fp,161
  a04de0:	e7033684 	addi	fp,fp,3290
  a04de4:	9425883a 	add	r18,r18,r16
  a04de8:	8c400044 	addi	r17,r17,1
  a04dec:	008001c4 	movi	r2,7
  a04df0:	1f000015 	stw	fp,0(r3)
  a04df4:	1c000115 	stw	r16,4(r3)
  a04df8:	dc800e15 	stw	r18,56(sp)
  a04dfc:	dc400d15 	stw	r17,52(sp)
  a04e00:	147de216 	blt	r2,r17,a0458c <___vfprintf_internal_r+0xb90>
  a04e04:	18c00204 	addi	r3,r3,8
  a04e08:	003c7a06 	br	a03ff4 <___vfprintf_internal_r+0x5f8>
  a04e0c:	01000084 	movi	r4,2
  a04e10:	d8000405 	stb	zero,16(sp)
  a04e14:	003d8706 	br	a04434 <___vfprintf_internal_r+0xa38>
  a04e18:	d9814c17 	ldw	r6,1328(sp)
  a04e1c:	30c4703a 	and	r2,r6,r3
  a04e20:	1005003a 	cmpeq	r2,r2,zero
  a04e24:	103cb926 	beq	r2,zero,a0410c <___vfprintf_internal_r+0x710>
  a04e28:	d9014117 	ldw	r4,1284(sp)
  a04e2c:	94800044 	addi	r18,r18,1
  a04e30:	8c400044 	addi	r17,r17,1
  a04e34:	008001c4 	movi	r2,7
  a04e38:	a9000015 	stw	r4,0(r21)
  a04e3c:	a8c00115 	stw	r3,4(r21)
  a04e40:	dc800e15 	stw	r18,56(sp)
  a04e44:	dc400d15 	stw	r17,52(sp)
  a04e48:	147e6616 	blt	r2,r17,a047e4 <___vfprintf_internal_r+0xde8>
  a04e4c:	acc00204 	addi	r19,r21,8
  a04e50:	003cd706 	br	a041b0 <___vfprintf_internal_r+0x7b4>
  a04e54:	07002874 	movhi	fp,161
  a04e58:	e7033684 	addi	fp,fp,3290
  a04e5c:	003c4f06 	br	a03f9c <___vfprintf_internal_r+0x5a0>
  a04e60:	dd000f04 	addi	r20,sp,60
  a04e64:	dc801904 	addi	r18,sp,100
  a04e68:	8009883a 	mov	r4,r16
  a04e6c:	880b883a 	mov	r5,r17
  a04e70:	01800284 	movi	r6,10
  a04e74:	000f883a 	mov	r7,zero
  a04e78:	0a0b0f40 	call	a0b0f4 <__umoddi3>
  a04e7c:	12000c04 	addi	r8,r2,48
  a04e80:	94bfffc4 	addi	r18,r18,-1
  a04e84:	8009883a 	mov	r4,r16
  a04e88:	880b883a 	mov	r5,r17
  a04e8c:	01800284 	movi	r6,10
  a04e90:	000f883a 	mov	r7,zero
  a04e94:	92000005 	stb	r8,0(r18)
  a04e98:	0a0ab180 	call	a0ab18 <__udivdi3>
  a04e9c:	1009883a 	mov	r4,r2
  a04ea0:	1021883a 	mov	r16,r2
  a04ea4:	18800068 	cmpgeui	r2,r3,1
  a04ea8:	1823883a 	mov	r17,r3
  a04eac:	103fee1e 	bne	r2,zero,a04e68 <___vfprintf_internal_r+0x146c>
  a04eb0:	1800021e 	bne	r3,zero,a04ebc <___vfprintf_internal_r+0x14c0>
  a04eb4:	00800244 	movi	r2,9
  a04eb8:	113feb36 	bltu	r2,r4,a04e68 <___vfprintf_internal_r+0x146c>
  a04ebc:	94bfffc4 	addi	r18,r18,-1
  a04ec0:	dc814115 	stw	r18,1284(sp)
  a04ec4:	003fc006 	br	a04dc8 <___vfprintf_internal_r+0x13cc>
  a04ec8:	d9014c17 	ldw	r4,1328(sp)
  a04ecc:	2080004c 	andi	r2,r4,1
  a04ed0:	10009a1e 	bne	r2,zero,a0513c <___vfprintf_internal_r+0x1740>
  a04ed4:	d9401904 	addi	r5,sp,100
  a04ed8:	dd000f04 	addi	r20,sp,60
  a04edc:	d9414115 	stw	r5,1284(sp)
  a04ee0:	003d6106 	br	a04468 <___vfprintf_internal_r+0xa6c>
  a04ee4:	d9014f17 	ldw	r4,1340(sp)
  a04ee8:	b00b883a 	mov	r5,r22
  a04eec:	d9800c04 	addi	r6,sp,48
  a04ef0:	0a039a40 	call	a039a4 <__sprint_r>
  a04ef4:	103c791e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a04ef8:	dc800e17 	ldw	r18,56(sp)
  a04efc:	d8c01904 	addi	r3,sp,100
  a04f00:	003cff06 	br	a04300 <___vfprintf_internal_r+0x904>
  a04f04:	d8c14c17 	ldw	r3,1328(sp)
  a04f08:	1880040c 	andi	r2,r3,16
  a04f0c:	1000711e 	bne	r2,zero,a050d4 <___vfprintf_internal_r+0x16d8>
  a04f10:	d9014c17 	ldw	r4,1328(sp)
  a04f14:	2080100c 	andi	r2,r4,64
  a04f18:	10006e26 	beq	r2,zero,a050d4 <___vfprintf_internal_r+0x16d8>
  a04f1c:	3c00000b 	ldhu	r16,0(r7)
  a04f20:	0023883a 	mov	r17,zero
  a04f24:	39c00104 	addi	r7,r7,4
  a04f28:	d9c14015 	stw	r7,1280(sp)
  a04f2c:	003f0006 	br	a04b30 <___vfprintf_internal_r+0x1134>
  a04f30:	dc400d17 	ldw	r17,52(sp)
  a04f34:	07002874 	movhi	fp,161
  a04f38:	e7033684 	addi	fp,fp,3290
  a04f3c:	9425883a 	add	r18,r18,r16
  a04f40:	8c400044 	addi	r17,r17,1
  a04f44:	008001c4 	movi	r2,7
  a04f48:	1f000015 	stw	fp,0(r3)
  a04f4c:	1c000115 	stw	r16,4(r3)
  a04f50:	dc800e15 	stw	r18,56(sp)
  a04f54:	dc400d15 	stw	r17,52(sp)
  a04f58:	147d7616 	blt	r2,r17,a04534 <___vfprintf_internal_r+0xb38>
  a04f5c:	18c00204 	addi	r3,r3,8
  a04f60:	003d7b06 	br	a04550 <___vfprintf_internal_r+0xb54>
  a04f64:	dc800e17 	ldw	r18,56(sp)
  a04f68:	dc400d17 	ldw	r17,52(sp)
  a04f6c:	07002874 	movhi	fp,161
  a04f70:	e7033a84 	addi	fp,fp,3306
  a04f74:	003bc006 	br	a03e78 <___vfprintf_internal_r+0x47c>
  a04f78:	d9014f17 	ldw	r4,1340(sp)
  a04f7c:	b00b883a 	mov	r5,r22
  a04f80:	d9800c04 	addi	r6,sp,48
  a04f84:	0a039a40 	call	a039a4 <__sprint_r>
  a04f88:	103c541e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a04f8c:	dc800e17 	ldw	r18,56(sp)
  a04f90:	d8c01904 	addi	r3,sp,100
  a04f94:	003ce906 	br	a0433c <___vfprintf_internal_r+0x940>
  a04f98:	3c000017 	ldw	r16,0(r7)
  a04f9c:	0009883a 	mov	r4,zero
  a04fa0:	39c00104 	addi	r7,r7,4
  a04fa4:	0023883a 	mov	r17,zero
  a04fa8:	d9c14015 	stw	r7,1280(sp)
  a04fac:	d8000405 	stb	zero,16(sp)
  a04fb0:	003d2006 	br	a04434 <___vfprintf_internal_r+0xa38>
  a04fb4:	38800017 	ldw	r2,0(r7)
  a04fb8:	39c00104 	addi	r7,r7,4
  a04fbc:	d9c14015 	stw	r7,1280(sp)
  a04fc0:	1023d7fa 	srai	r17,r2,31
  a04fc4:	1021883a 	mov	r16,r2
  a04fc8:	003d1806 	br	a0442c <___vfprintf_internal_r+0xa30>
  a04fcc:	3c000017 	ldw	r16,0(r7)
  a04fd0:	01000044 	movi	r4,1
  a04fd4:	39c00104 	addi	r7,r7,4
  a04fd8:	0023883a 	mov	r17,zero
  a04fdc:	d9c14015 	stw	r7,1280(sp)
  a04fe0:	d8000405 	stb	zero,16(sp)
  a04fe4:	003d1306 	br	a04434 <___vfprintf_internal_r+0xa38>
  a04fe8:	00802874 	movhi	r2,161
  a04fec:	1082c504 	addi	r2,r2,2836
  a04ff0:	94800044 	addi	r18,r18,1
  a04ff4:	8c400044 	addi	r17,r17,1
  a04ff8:	a8800015 	stw	r2,0(r21)
  a04ffc:	00c00044 	movi	r3,1
  a05000:	008001c4 	movi	r2,7
  a05004:	a8c00115 	stw	r3,4(r21)
  a05008:	dc800e15 	stw	r18,56(sp)
  a0500c:	dc400d15 	stw	r17,52(sp)
  a05010:	1440ca16 	blt	r2,r17,a0533c <___vfprintf_internal_r+0x1940>
  a05014:	a8c00204 	addi	r3,r21,8
  a05018:	2000061e 	bne	r4,zero,a05034 <___vfprintf_internal_r+0x1638>
  a0501c:	d9414717 	ldw	r5,1308(sp)
  a05020:	2800041e 	bne	r5,zero,a05034 <___vfprintf_internal_r+0x1638>
  a05024:	d9814c17 	ldw	r6,1328(sp)
  a05028:	3080004c 	andi	r2,r6,1
  a0502c:	1005003a 	cmpeq	r2,r2,zero
  a05030:	103bf01e 	bne	r2,zero,a03ff4 <___vfprintf_internal_r+0x5f8>
  a05034:	00800044 	movi	r2,1
  a05038:	dc400d17 	ldw	r17,52(sp)
  a0503c:	18800115 	stw	r2,4(r3)
  a05040:	d8814917 	ldw	r2,1316(sp)
  a05044:	94800044 	addi	r18,r18,1
  a05048:	8c400044 	addi	r17,r17,1
  a0504c:	18800015 	stw	r2,0(r3)
  a05050:	008001c4 	movi	r2,7
  a05054:	dc800e15 	stw	r18,56(sp)
  a05058:	dc400d15 	stw	r17,52(sp)
  a0505c:	1440ca16 	blt	r2,r17,a05388 <___vfprintf_internal_r+0x198c>
  a05060:	18c00204 	addi	r3,r3,8
  a05064:	0121c83a 	sub	r16,zero,r4
  a05068:	0400500e 	bge	zero,r16,a051ac <___vfprintf_internal_r+0x17b0>
  a0506c:	00800404 	movi	r2,16
  a05070:	1400800e 	bge	r2,r16,a05274 <___vfprintf_internal_r+0x1878>
  a05074:	1027883a 	mov	r19,r2
  a05078:	07002874 	movhi	fp,161
  a0507c:	e7033684 	addi	fp,fp,3290
  a05080:	050001c4 	movi	r20,7
  a05084:	00000306 	br	a05094 <___vfprintf_internal_r+0x1698>
  a05088:	18c00204 	addi	r3,r3,8
  a0508c:	843ffc04 	addi	r16,r16,-16
  a05090:	9c007a0e 	bge	r19,r16,a0527c <___vfprintf_internal_r+0x1880>
  a05094:	94800404 	addi	r18,r18,16
  a05098:	8c400044 	addi	r17,r17,1
  a0509c:	1f000015 	stw	fp,0(r3)
  a050a0:	1cc00115 	stw	r19,4(r3)
  a050a4:	dc800e15 	stw	r18,56(sp)
  a050a8:	dc400d15 	stw	r17,52(sp)
  a050ac:	a47ff60e 	bge	r20,r17,a05088 <___vfprintf_internal_r+0x168c>
  a050b0:	d9014f17 	ldw	r4,1340(sp)
  a050b4:	b00b883a 	mov	r5,r22
  a050b8:	d9800c04 	addi	r6,sp,48
  a050bc:	0a039a40 	call	a039a4 <__sprint_r>
  a050c0:	103c061e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a050c4:	dc800e17 	ldw	r18,56(sp)
  a050c8:	dc400d17 	ldw	r17,52(sp)
  a050cc:	d8c01904 	addi	r3,sp,100
  a050d0:	003fee06 	br	a0508c <___vfprintf_internal_r+0x1690>
  a050d4:	3c000017 	ldw	r16,0(r7)
  a050d8:	0023883a 	mov	r17,zero
  a050dc:	39c00104 	addi	r7,r7,4
  a050e0:	d9c14015 	stw	r7,1280(sp)
  a050e4:	003e9206 	br	a04b30 <___vfprintf_internal_r+0x1134>
  a050e8:	d9401904 	addi	r5,sp,100
  a050ec:	dd000f04 	addi	r20,sp,60
  a050f0:	d9414115 	stw	r5,1284(sp)
  a050f4:	d9814417 	ldw	r6,1296(sp)
  a050f8:	880a973a 	slli	r5,r17,28
  a050fc:	8004d13a 	srli	r2,r16,4
  a05100:	810003cc 	andi	r4,r16,15
  a05104:	3109883a 	add	r4,r6,r4
  a05108:	2884b03a 	or	r2,r5,r2
  a0510c:	21400003 	ldbu	r5,0(r4)
  a05110:	d9014117 	ldw	r4,1284(sp)
  a05114:	8806d13a 	srli	r3,r17,4
  a05118:	1021883a 	mov	r16,r2
  a0511c:	213fffc4 	addi	r4,r4,-1
  a05120:	d9014115 	stw	r4,1284(sp)
  a05124:	d9814117 	ldw	r6,1284(sp)
  a05128:	10c8b03a 	or	r4,r2,r3
  a0512c:	1823883a 	mov	r17,r3
  a05130:	31400005 	stb	r5,0(r6)
  a05134:	203fef1e 	bne	r4,zero,a050f4 <___vfprintf_internal_r+0x16f8>
  a05138:	003ccb06 	br	a04468 <___vfprintf_internal_r+0xa6c>
  a0513c:	00800c04 	movi	r2,48
  a05140:	d98018c4 	addi	r6,sp,99
  a05144:	dd000f04 	addi	r20,sp,60
  a05148:	d88018c5 	stb	r2,99(sp)
  a0514c:	d9814115 	stw	r6,1284(sp)
  a05150:	003cc506 	br	a04468 <___vfprintf_internal_r+0xa6c>
  a05154:	dc400d17 	ldw	r17,52(sp)
  a05158:	07002874 	movhi	fp,161
  a0515c:	e7033a84 	addi	fp,fp,3306
  a05160:	003bc706 	br	a04080 <___vfprintf_internal_r+0x684>
  a05164:	d9414c17 	ldw	r5,1328(sp)
  a05168:	2880040c 	andi	r2,r5,16
  a0516c:	10007c26 	beq	r2,zero,a05360 <___vfprintf_internal_r+0x1964>
  a05170:	38800017 	ldw	r2,0(r7)
  a05174:	39c00104 	addi	r7,r7,4
  a05178:	d9c14015 	stw	r7,1280(sp)
  a0517c:	d9814b17 	ldw	r6,1324(sp)
  a05180:	d9c14017 	ldw	r7,1280(sp)
  a05184:	11800015 	stw	r6,0(r2)
  a05188:	003a7806 	br	a03b6c <___vfprintf_internal_r+0x170>
  a0518c:	d9014f17 	ldw	r4,1340(sp)
  a05190:	b00b883a 	mov	r5,r22
  a05194:	d9800c04 	addi	r6,sp,48
  a05198:	0a039a40 	call	a039a4 <__sprint_r>
  a0519c:	103bcf1e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a051a0:	dc800e17 	ldw	r18,56(sp)
  a051a4:	dc400d17 	ldw	r17,52(sp)
  a051a8:	d8c01904 	addi	r3,sp,100
  a051ac:	d9014717 	ldw	r4,1308(sp)
  a051b0:	d9414117 	ldw	r5,1284(sp)
  a051b4:	8c400044 	addi	r17,r17,1
  a051b8:	9125883a 	add	r18,r18,r4
  a051bc:	008001c4 	movi	r2,7
  a051c0:	19400015 	stw	r5,0(r3)
  a051c4:	19000115 	stw	r4,4(r3)
  a051c8:	dc800e15 	stw	r18,56(sp)
  a051cc:	dc400d15 	stw	r17,52(sp)
  a051d0:	147cee16 	blt	r2,r17,a0458c <___vfprintf_internal_r+0xb90>
  a051d4:	18c00204 	addi	r3,r3,8
  a051d8:	003b8606 	br	a03ff4 <___vfprintf_internal_r+0x5f8>
  a051dc:	38c00017 	ldw	r3,0(r7)
  a051e0:	39000204 	addi	r4,r7,8
  a051e4:	d9014015 	stw	r4,1280(sp)
  a051e8:	d8c14215 	stw	r3,1288(sp)
  a051ec:	39c00117 	ldw	r7,4(r7)
  a051f0:	d9c14315 	stw	r7,1292(sp)
  a051f4:	003e2006 	br	a04a78 <___vfprintf_internal_r+0x107c>
  a051f8:	0005883a 	mov	r2,zero
  a051fc:	1409c83a 	sub	r4,r2,r16
  a05200:	1105803a 	cmpltu	r2,r2,r4
  a05204:	044bc83a 	sub	r5,zero,r17
  a05208:	2885c83a 	sub	r2,r5,r2
  a0520c:	2021883a 	mov	r16,r4
  a05210:	1023883a 	mov	r17,r2
  a05214:	01000044 	movi	r4,1
  a05218:	00800b44 	movi	r2,45
  a0521c:	d8800405 	stb	r2,16(sp)
  a05220:	003c8406 	br	a04434 <___vfprintf_internal_r+0xa38>
  a05224:	d9014f17 	ldw	r4,1340(sp)
  a05228:	b00b883a 	mov	r5,r22
  a0522c:	d9800c04 	addi	r6,sp,48
  a05230:	0a039a40 	call	a039a4 <__sprint_r>
  a05234:	103ba91e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a05238:	dc800e17 	ldw	r18,56(sp)
  a0523c:	dc400d17 	ldw	r17,52(sp)
  a05240:	d9000517 	ldw	r4,20(sp)
  a05244:	d9401904 	addi	r5,sp,100
  a05248:	003da706 	br	a048e8 <___vfprintf_internal_r+0xeec>
  a0524c:	d9014f17 	ldw	r4,1340(sp)
  a05250:	b00b883a 	mov	r5,r22
  a05254:	d9800c04 	addi	r6,sp,48
  a05258:	0a039a40 	call	a039a4 <__sprint_r>
  a0525c:	103b9f1e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a05260:	dc800e17 	ldw	r18,56(sp)
  a05264:	dc400d17 	ldw	r17,52(sp)
  a05268:	d9000517 	ldw	r4,20(sp)
  a0526c:	d8c01904 	addi	r3,sp,100
  a05270:	003d9106 	br	a048b8 <___vfprintf_internal_r+0xebc>
  a05274:	07002874 	movhi	fp,161
  a05278:	e7033684 	addi	fp,fp,3290
  a0527c:	9425883a 	add	r18,r18,r16
  a05280:	8c400044 	addi	r17,r17,1
  a05284:	008001c4 	movi	r2,7
  a05288:	1f000015 	stw	fp,0(r3)
  a0528c:	1c000115 	stw	r16,4(r3)
  a05290:	dc800e15 	stw	r18,56(sp)
  a05294:	dc400d15 	stw	r17,52(sp)
  a05298:	147fbc16 	blt	r2,r17,a0518c <___vfprintf_internal_r+0x1790>
  a0529c:	18c00204 	addi	r3,r3,8
  a052a0:	003fc206 	br	a051ac <___vfprintf_internal_r+0x17b0>
  a052a4:	d9014f17 	ldw	r4,1340(sp)
  a052a8:	b00b883a 	mov	r5,r22
  a052ac:	d9800c04 	addi	r6,sp,48
  a052b0:	0a039a40 	call	a039a4 <__sprint_r>
  a052b4:	103b891e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a052b8:	dc800e17 	ldw	r18,56(sp)
  a052bc:	d9000517 	ldw	r4,20(sp)
  a052c0:	d8c01904 	addi	r3,sp,100
  a052c4:	003d0206 	br	a046d0 <___vfprintf_internal_r+0xcd4>
  a052c8:	07002874 	movhi	fp,161
  a052cc:	e7033684 	addi	fp,fp,3290
  a052d0:	003be406 	br	a04264 <___vfprintf_internal_r+0x868>
  a052d4:	00802874 	movhi	r2,161
  a052d8:	10832604 	addi	r2,r2,3224
  a052dc:	d8814115 	stw	r2,1284(sp)
  a052e0:	003df506 	br	a04ab8 <___vfprintf_internal_r+0x10bc>
  a052e4:	d9014217 	ldw	r4,1288(sp)
  a052e8:	d9414317 	ldw	r5,1292(sp)
  a052ec:	0a0a3dc0 	call	a0a3dc <__isnand>
  a052f0:	10003926 	beq	r2,zero,a053d8 <___vfprintf_internal_r+0x19dc>
  a052f4:	d9414d17 	ldw	r5,1332(sp)
  a052f8:	008011c4 	movi	r2,71
  a052fc:	1140ce16 	blt	r2,r5,a05638 <___vfprintf_internal_r+0x1c3c>
  a05300:	01802874 	movhi	r6,161
  a05304:	31832704 	addi	r6,r6,3228
  a05308:	d9814115 	stw	r6,1284(sp)
  a0530c:	003dea06 	br	a04ab8 <___vfprintf_internal_r+0x10bc>
  a05310:	d9014c17 	ldw	r4,1328(sp)
  a05314:	bdc00044 	addi	r23,r23,1
  a05318:	b8c00007 	ldb	r3,0(r23)
  a0531c:	21000814 	ori	r4,r4,32
  a05320:	d9014c15 	stw	r4,1328(sp)
  a05324:	003a3406 	br	a03bf8 <___vfprintf_internal_r+0x1fc>
  a05328:	dcc14515 	stw	r19,1300(sp)
  a0532c:	98011016 	blt	r19,zero,a05770 <___vfprintf_internal_r+0x1d74>
  a05330:	980f883a 	mov	r7,r19
  a05334:	d8014615 	stw	zero,1304(sp)
  a05338:	003c5206 	br	a04484 <___vfprintf_internal_r+0xa88>
  a0533c:	d9014f17 	ldw	r4,1340(sp)
  a05340:	b00b883a 	mov	r5,r22
  a05344:	d9800c04 	addi	r6,sp,48
  a05348:	0a039a40 	call	a039a4 <__sprint_r>
  a0534c:	103b631e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a05350:	dc800e17 	ldw	r18,56(sp)
  a05354:	d9000517 	ldw	r4,20(sp)
  a05358:	d8c01904 	addi	r3,sp,100
  a0535c:	003f2e06 	br	a05018 <___vfprintf_internal_r+0x161c>
  a05360:	d8c14c17 	ldw	r3,1328(sp)
  a05364:	1880100c 	andi	r2,r3,64
  a05368:	1000a026 	beq	r2,zero,a055ec <___vfprintf_internal_r+0x1bf0>
  a0536c:	38800017 	ldw	r2,0(r7)
  a05370:	39c00104 	addi	r7,r7,4
  a05374:	d9c14015 	stw	r7,1280(sp)
  a05378:	d9014b17 	ldw	r4,1324(sp)
  a0537c:	d9c14017 	ldw	r7,1280(sp)
  a05380:	1100000d 	sth	r4,0(r2)
  a05384:	0039f906 	br	a03b6c <___vfprintf_internal_r+0x170>
  a05388:	d9014f17 	ldw	r4,1340(sp)
  a0538c:	b00b883a 	mov	r5,r22
  a05390:	d9800c04 	addi	r6,sp,48
  a05394:	0a039a40 	call	a039a4 <__sprint_r>
  a05398:	103b501e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a0539c:	dc800e17 	ldw	r18,56(sp)
  a053a0:	dc400d17 	ldw	r17,52(sp)
  a053a4:	d9000517 	ldw	r4,20(sp)
  a053a8:	d8c01904 	addi	r3,sp,100
  a053ac:	003f2d06 	br	a05064 <___vfprintf_internal_r+0x1668>
  a053b0:	00800184 	movi	r2,6
  a053b4:	14c09a36 	bltu	r2,r19,a05620 <___vfprintf_internal_r+0x1c24>
  a053b8:	dcc14515 	stw	r19,1300(sp)
  a053bc:	9800010e 	bge	r19,zero,a053c4 <___vfprintf_internal_r+0x19c8>
  a053c0:	d8014515 	stw	zero,1300(sp)
  a053c4:	00802874 	movhi	r2,161
  a053c8:	10832904 	addi	r2,r2,3236
  a053cc:	980f883a 	mov	r7,r19
  a053d0:	d8814115 	stw	r2,1284(sp)
  a053d4:	003a7806 	br	a03db8 <___vfprintf_internal_r+0x3bc>
  a053d8:	00bfffc4 	movi	r2,-1
  a053dc:	9880e226 	beq	r19,r2,a05768 <___vfprintf_internal_r+0x1d6c>
  a053e0:	d9414d17 	ldw	r5,1332(sp)
  a053e4:	008019c4 	movi	r2,103
  a053e8:	2880dc26 	beq	r5,r2,a0575c <___vfprintf_internal_r+0x1d60>
  a053ec:	008011c4 	movi	r2,71
  a053f0:	2880da26 	beq	r5,r2,a0575c <___vfprintf_internal_r+0x1d60>
  a053f4:	d9414c17 	ldw	r5,1328(sp)
  a053f8:	d9014317 	ldw	r4,1292(sp)
  a053fc:	d9814217 	ldw	r6,1288(sp)
  a05400:	29404014 	ori	r5,r5,256
  a05404:	d9414c15 	stw	r5,1328(sp)
  a05408:	2000cc16 	blt	r4,zero,a0573c <___vfprintf_internal_r+0x1d40>
  a0540c:	3021883a 	mov	r16,r6
  a05410:	2023883a 	mov	r17,r4
  a05414:	0039883a 	mov	fp,zero
  a05418:	d9414d17 	ldw	r5,1332(sp)
  a0541c:	00801984 	movi	r2,102
  a05420:	2880b726 	beq	r5,r2,a05700 <___vfprintf_internal_r+0x1d04>
  a05424:	00801184 	movi	r2,70
  a05428:	2880b526 	beq	r5,r2,a05700 <___vfprintf_internal_r+0x1d04>
  a0542c:	00801944 	movi	r2,101
  a05430:	2880c826 	beq	r5,r2,a05754 <___vfprintf_internal_r+0x1d58>
  a05434:	00801144 	movi	r2,69
  a05438:	2880c626 	beq	r5,r2,a05754 <___vfprintf_internal_r+0x1d58>
  a0543c:	9829883a 	mov	r20,r19
  a05440:	d9014f17 	ldw	r4,1340(sp)
  a05444:	d8800504 	addi	r2,sp,20
  a05448:	880d883a 	mov	r6,r17
  a0544c:	d8800115 	stw	r2,4(sp)
  a05450:	d8c00604 	addi	r3,sp,24
  a05454:	d8800704 	addi	r2,sp,28
  a05458:	800b883a 	mov	r5,r16
  a0545c:	01c00084 	movi	r7,2
  a05460:	d8c00215 	stw	r3,8(sp)
  a05464:	d8800315 	stw	r2,12(sp)
  a05468:	dd000015 	stw	r20,0(sp)
  a0546c:	0a05c200 	call	a05c20 <_dtoa_r>
  a05470:	d9814d17 	ldw	r6,1332(sp)
  a05474:	d8814115 	stw	r2,1284(sp)
  a05478:	008019c4 	movi	r2,103
  a0547c:	30809526 	beq	r6,r2,a056d4 <___vfprintf_internal_r+0x1cd8>
  a05480:	d8c14d17 	ldw	r3,1332(sp)
  a05484:	008011c4 	movi	r2,71
  a05488:	18809226 	beq	r3,r2,a056d4 <___vfprintf_internal_r+0x1cd8>
  a0548c:	d9414117 	ldw	r5,1284(sp)
  a05490:	d9814d17 	ldw	r6,1332(sp)
  a05494:	00801984 	movi	r2,102
  a05498:	2d25883a 	add	r18,r5,r20
  a0549c:	30808626 	beq	r6,r2,a056b8 <___vfprintf_internal_r+0x1cbc>
  a054a0:	00801184 	movi	r2,70
  a054a4:	30808426 	beq	r6,r2,a056b8 <___vfprintf_internal_r+0x1cbc>
  a054a8:	000d883a 	mov	r6,zero
  a054ac:	000f883a 	mov	r7,zero
  a054b0:	880b883a 	mov	r5,r17
  a054b4:	8009883a 	mov	r4,r16
  a054b8:	0a0ba680 	call	a0ba68 <__eqdf2>
  a054bc:	1000751e 	bne	r2,zero,a05694 <___vfprintf_internal_r+0x1c98>
  a054c0:	9005883a 	mov	r2,r18
  a054c4:	dc800715 	stw	r18,28(sp)
  a054c8:	d9014117 	ldw	r4,1284(sp)
  a054cc:	d9414d17 	ldw	r5,1332(sp)
  a054d0:	00c019c4 	movi	r3,103
  a054d4:	1125c83a 	sub	r18,r2,r4
  a054d8:	28c06826 	beq	r5,r3,a0567c <___vfprintf_internal_r+0x1c80>
  a054dc:	008011c4 	movi	r2,71
  a054e0:	28806626 	beq	r5,r2,a0567c <___vfprintf_internal_r+0x1c80>
  a054e4:	d9000517 	ldw	r4,20(sp)
  a054e8:	d8c14d17 	ldw	r3,1332(sp)
  a054ec:	00801944 	movi	r2,101
  a054f0:	10c05516 	blt	r2,r3,a05648 <___vfprintf_internal_r+0x1c4c>
  a054f4:	213fffc4 	addi	r4,r4,-1
  a054f8:	d9000515 	stw	r4,20(sp)
  a054fc:	d8c00805 	stb	r3,32(sp)
  a05500:	2021883a 	mov	r16,r4
  a05504:	2000c116 	blt	r4,zero,a0580c <___vfprintf_internal_r+0x1e10>
  a05508:	00800ac4 	movi	r2,43
  a0550c:	d8800845 	stb	r2,33(sp)
  a05510:	00800244 	movi	r2,9
  a05514:	1400af0e 	bge	r2,r16,a057d4 <___vfprintf_internal_r+0x1dd8>
  a05518:	1027883a 	mov	r19,r2
  a0551c:	dc400b84 	addi	r17,sp,46
  a05520:	8009883a 	mov	r4,r16
  a05524:	01400284 	movi	r5,10
  a05528:	0a0c0c80 	call	a0c0c8 <__modsi3>
  a0552c:	10800c04 	addi	r2,r2,48
  a05530:	8c7fffc4 	addi	r17,r17,-1
  a05534:	8009883a 	mov	r4,r16
  a05538:	01400284 	movi	r5,10
  a0553c:	88800005 	stb	r2,0(r17)
  a05540:	0a0c0680 	call	a0c068 <__divsi3>
  a05544:	1021883a 	mov	r16,r2
  a05548:	98bff516 	blt	r19,r2,a05520 <___vfprintf_internal_r+0x1b24>
  a0554c:	10c00c04 	addi	r3,r2,48
  a05550:	d88009c4 	addi	r2,sp,39
  a05554:	108001c4 	addi	r2,r2,7
  a05558:	897fffc4 	addi	r5,r17,-1
  a0555c:	88ffffc5 	stb	r3,-1(r17)
  a05560:	2880a72e 	bgeu	r5,r2,a05800 <___vfprintf_internal_r+0x1e04>
  a05564:	1009883a 	mov	r4,r2
  a05568:	d9800804 	addi	r6,sp,32
  a0556c:	d8c00884 	addi	r3,sp,34
  a05570:	28800003 	ldbu	r2,0(r5)
  a05574:	29400044 	addi	r5,r5,1
  a05578:	18800005 	stb	r2,0(r3)
  a0557c:	18c00044 	addi	r3,r3,1
  a05580:	293ffb36 	bltu	r5,r4,a05570 <___vfprintf_internal_r+0x1b74>
  a05584:	1987c83a 	sub	r3,r3,r6
  a05588:	00800044 	movi	r2,1
  a0558c:	d8c14815 	stw	r3,1312(sp)
  a05590:	90cf883a 	add	r7,r18,r3
  a05594:	1480960e 	bge	r2,r18,a057f0 <___vfprintf_internal_r+0x1df4>
  a05598:	39c00044 	addi	r7,r7,1
  a0559c:	d9c14515 	stw	r7,1300(sp)
  a055a0:	38003416 	blt	r7,zero,a05674 <___vfprintf_internal_r+0x1c78>
  a055a4:	e0803fcc 	andi	r2,fp,255
  a055a8:	1080201c 	xori	r2,r2,128
  a055ac:	10bfe004 	addi	r2,r2,-128
  a055b0:	10004e26 	beq	r2,zero,a056ec <___vfprintf_internal_r+0x1cf0>
  a055b4:	00800b44 	movi	r2,45
  a055b8:	dc814715 	stw	r18,1308(sp)
  a055bc:	d8014615 	stw	zero,1304(sp)
  a055c0:	d8800405 	stb	r2,16(sp)
  a055c4:	003bb106 	br	a0448c <___vfprintf_internal_r+0xa90>
  a055c8:	00800b44 	movi	r2,45
  a055cc:	d8800405 	stb	r2,16(sp)
  a055d0:	003d3306 	br	a04aa0 <___vfprintf_internal_r+0x10a4>
  a055d4:	d9014f17 	ldw	r4,1340(sp)
  a055d8:	b00b883a 	mov	r5,r22
  a055dc:	d9800c04 	addi	r6,sp,48
  a055e0:	0a039a40 	call	a039a4 <__sprint_r>
  a055e4:	103abd1e 	bne	r2,zero,a040dc <___vfprintf_internal_r+0x6e0>
  a055e8:	003abb06 	br	a040d8 <___vfprintf_internal_r+0x6dc>
  a055ec:	38800017 	ldw	r2,0(r7)
  a055f0:	39c00104 	addi	r7,r7,4
  a055f4:	d9c14015 	stw	r7,1280(sp)
  a055f8:	d9414b17 	ldw	r5,1324(sp)
  a055fc:	d9c14017 	ldw	r7,1280(sp)
  a05600:	11400015 	stw	r5,0(r2)
  a05604:	00395906 	br	a03b6c <___vfprintf_internal_r+0x170>
  a05608:	980f883a 	mov	r7,r19
  a0560c:	dcc14515 	stw	r19,1300(sp)
  a05610:	d8014615 	stw	zero,1304(sp)
  a05614:	003b9b06 	br	a04484 <___vfprintf_internal_r+0xa88>
  a05618:	0027883a 	mov	r19,zero
  a0561c:	00397806 	br	a03c00 <___vfprintf_internal_r+0x204>
  a05620:	00c02874 	movhi	r3,161
  a05624:	18c32904 	addi	r3,r3,3236
  a05628:	100f883a 	mov	r7,r2
  a0562c:	d8814515 	stw	r2,1300(sp)
  a05630:	d8c14115 	stw	r3,1284(sp)
  a05634:	0039e006 	br	a03db8 <___vfprintf_internal_r+0x3bc>
  a05638:	00802874 	movhi	r2,161
  a0563c:	10832804 	addi	r2,r2,3232
  a05640:	d8814115 	stw	r2,1284(sp)
  a05644:	003d1c06 	br	a04ab8 <___vfprintf_internal_r+0x10bc>
  a05648:	d9414d17 	ldw	r5,1332(sp)
  a0564c:	00801984 	movi	r2,102
  a05650:	28804926 	beq	r5,r2,a05778 <___vfprintf_internal_r+0x1d7c>
  a05654:	200f883a 	mov	r7,r4
  a05658:	24805716 	blt	r4,r18,a057b8 <___vfprintf_internal_r+0x1dbc>
  a0565c:	d9414c17 	ldw	r5,1328(sp)
  a05660:	2880004c 	andi	r2,r5,1
  a05664:	10000126 	beq	r2,zero,a0566c <___vfprintf_internal_r+0x1c70>
  a05668:	21c00044 	addi	r7,r4,1
  a0566c:	d9c14515 	stw	r7,1300(sp)
  a05670:	383fcc0e 	bge	r7,zero,a055a4 <___vfprintf_internal_r+0x1ba8>
  a05674:	d8014515 	stw	zero,1300(sp)
  a05678:	003fca06 	br	a055a4 <___vfprintf_internal_r+0x1ba8>
  a0567c:	d9000517 	ldw	r4,20(sp)
  a05680:	00bfff04 	movi	r2,-4
  a05684:	1100480e 	bge	r2,r4,a057a8 <___vfprintf_internal_r+0x1dac>
  a05688:	99004716 	blt	r19,r4,a057a8 <___vfprintf_internal_r+0x1dac>
  a0568c:	d8c14d15 	stw	r3,1332(sp)
  a05690:	003ff006 	br	a05654 <___vfprintf_internal_r+0x1c58>
  a05694:	d8800717 	ldw	r2,28(sp)
  a05698:	14bf8b2e 	bgeu	r2,r18,a054c8 <___vfprintf_internal_r+0x1acc>
  a0569c:	9007883a 	mov	r3,r18
  a056a0:	01000c04 	movi	r4,48
  a056a4:	11000005 	stb	r4,0(r2)
  a056a8:	10800044 	addi	r2,r2,1
  a056ac:	d8800715 	stw	r2,28(sp)
  a056b0:	18bffc1e 	bne	r3,r2,a056a4 <___vfprintf_internal_r+0x1ca8>
  a056b4:	003f8406 	br	a054c8 <___vfprintf_internal_r+0x1acc>
  a056b8:	d8814117 	ldw	r2,1284(sp)
  a056bc:	10c00007 	ldb	r3,0(r2)
  a056c0:	00800c04 	movi	r2,48
  a056c4:	18805b26 	beq	r3,r2,a05834 <___vfprintf_internal_r+0x1e38>
  a056c8:	d9000517 	ldw	r4,20(sp)
  a056cc:	9125883a 	add	r18,r18,r4
  a056d0:	003f7506 	br	a054a8 <___vfprintf_internal_r+0x1aac>
  a056d4:	d9014c17 	ldw	r4,1328(sp)
  a056d8:	2080004c 	andi	r2,r4,1
  a056dc:	1005003a 	cmpeq	r2,r2,zero
  a056e0:	103f6a26 	beq	r2,zero,a0548c <___vfprintf_internal_r+0x1a90>
  a056e4:	d8800717 	ldw	r2,28(sp)
  a056e8:	003f7706 	br	a054c8 <___vfprintf_internal_r+0x1acc>
  a056ec:	d9c14515 	stw	r7,1300(sp)
  a056f0:	38004d16 	blt	r7,zero,a05828 <___vfprintf_internal_r+0x1e2c>
  a056f4:	dc814715 	stw	r18,1308(sp)
  a056f8:	d8014615 	stw	zero,1304(sp)
  a056fc:	003b6106 	br	a04484 <___vfprintf_internal_r+0xa88>
  a05700:	d9014f17 	ldw	r4,1340(sp)
  a05704:	d8800504 	addi	r2,sp,20
  a05708:	d8800115 	stw	r2,4(sp)
  a0570c:	d8c00604 	addi	r3,sp,24
  a05710:	d8800704 	addi	r2,sp,28
  a05714:	800b883a 	mov	r5,r16
  a05718:	880d883a 	mov	r6,r17
  a0571c:	01c000c4 	movi	r7,3
  a05720:	d8c00215 	stw	r3,8(sp)
  a05724:	d8800315 	stw	r2,12(sp)
  a05728:	dcc00015 	stw	r19,0(sp)
  a0572c:	9829883a 	mov	r20,r19
  a05730:	0a05c200 	call	a05c20 <_dtoa_r>
  a05734:	d8814115 	stw	r2,1284(sp)
  a05738:	003f5106 	br	a05480 <___vfprintf_internal_r+0x1a84>
  a0573c:	d8c14217 	ldw	r3,1288(sp)
  a05740:	d9014317 	ldw	r4,1292(sp)
  a05744:	07000b44 	movi	fp,45
  a05748:	1821883a 	mov	r16,r3
  a0574c:	2460003c 	xorhi	r17,r4,32768
  a05750:	003f3106 	br	a05418 <___vfprintf_internal_r+0x1a1c>
  a05754:	9d000044 	addi	r20,r19,1
  a05758:	003f3906 	br	a05440 <___vfprintf_internal_r+0x1a44>
  a0575c:	983f251e 	bne	r19,zero,a053f4 <___vfprintf_internal_r+0x19f8>
  a05760:	04c00044 	movi	r19,1
  a05764:	003f2306 	br	a053f4 <___vfprintf_internal_r+0x19f8>
  a05768:	04c00184 	movi	r19,6
  a0576c:	003f2106 	br	a053f4 <___vfprintf_internal_r+0x19f8>
  a05770:	d8014515 	stw	zero,1300(sp)
  a05774:	003eee06 	br	a05330 <___vfprintf_internal_r+0x1934>
  a05778:	200f883a 	mov	r7,r4
  a0577c:	0100370e 	bge	zero,r4,a0585c <___vfprintf_internal_r+0x1e60>
  a05780:	9800031e 	bne	r19,zero,a05790 <___vfprintf_internal_r+0x1d94>
  a05784:	d9814c17 	ldw	r6,1328(sp)
  a05788:	3080004c 	andi	r2,r6,1
  a0578c:	103fb726 	beq	r2,zero,a0566c <___vfprintf_internal_r+0x1c70>
  a05790:	20800044 	addi	r2,r4,1
  a05794:	98a7883a 	add	r19,r19,r2
  a05798:	dcc14515 	stw	r19,1300(sp)
  a0579c:	980f883a 	mov	r7,r19
  a057a0:	983f800e 	bge	r19,zero,a055a4 <___vfprintf_internal_r+0x1ba8>
  a057a4:	003fb306 	br	a05674 <___vfprintf_internal_r+0x1c78>
  a057a8:	d9814d17 	ldw	r6,1332(sp)
  a057ac:	31bfff84 	addi	r6,r6,-2
  a057b0:	d9814d15 	stw	r6,1332(sp)
  a057b4:	003f4c06 	br	a054e8 <___vfprintf_internal_r+0x1aec>
  a057b8:	0100180e 	bge	zero,r4,a0581c <___vfprintf_internal_r+0x1e20>
  a057bc:	00800044 	movi	r2,1
  a057c0:	1485883a 	add	r2,r2,r18
  a057c4:	d8814515 	stw	r2,1300(sp)
  a057c8:	100f883a 	mov	r7,r2
  a057cc:	103f750e 	bge	r2,zero,a055a4 <___vfprintf_internal_r+0x1ba8>
  a057d0:	003fa806 	br	a05674 <___vfprintf_internal_r+0x1c78>
  a057d4:	80c00c04 	addi	r3,r16,48
  a057d8:	00800c04 	movi	r2,48
  a057dc:	d8c008c5 	stb	r3,35(sp)
  a057e0:	d9800804 	addi	r6,sp,32
  a057e4:	d8c00904 	addi	r3,sp,36
  a057e8:	d8800885 	stb	r2,34(sp)
  a057ec:	003f6506 	br	a05584 <___vfprintf_internal_r+0x1b88>
  a057f0:	d9014c17 	ldw	r4,1328(sp)
  a057f4:	2084703a 	and	r2,r4,r2
  a057f8:	103f9c26 	beq	r2,zero,a0566c <___vfprintf_internal_r+0x1c70>
  a057fc:	003f6606 	br	a05598 <___vfprintf_internal_r+0x1b9c>
  a05800:	d9800804 	addi	r6,sp,32
  a05804:	d8c00884 	addi	r3,sp,34
  a05808:	003f5e06 	br	a05584 <___vfprintf_internal_r+0x1b88>
  a0580c:	00800b44 	movi	r2,45
  a05810:	0121c83a 	sub	r16,zero,r4
  a05814:	d8800845 	stb	r2,33(sp)
  a05818:	003f3d06 	br	a05510 <___vfprintf_internal_r+0x1b14>
  a0581c:	00800084 	movi	r2,2
  a05820:	1105c83a 	sub	r2,r2,r4
  a05824:	003fe606 	br	a057c0 <___vfprintf_internal_r+0x1dc4>
  a05828:	d8014515 	stw	zero,1300(sp)
  a0582c:	dc814715 	stw	r18,1308(sp)
  a05830:	003fb106 	br	a056f8 <___vfprintf_internal_r+0x1cfc>
  a05834:	000d883a 	mov	r6,zero
  a05838:	000f883a 	mov	r7,zero
  a0583c:	8009883a 	mov	r4,r16
  a05840:	880b883a 	mov	r5,r17
  a05844:	0a02cc40 	call	a02cc4 <__nedf2>
  a05848:	103f9f26 	beq	r2,zero,a056c8 <___vfprintf_internal_r+0x1ccc>
  a0584c:	00800044 	movi	r2,1
  a05850:	1509c83a 	sub	r4,r2,r20
  a05854:	d9000515 	stw	r4,20(sp)
  a05858:	003f9b06 	br	a056c8 <___vfprintf_internal_r+0x1ccc>
  a0585c:	98000d1e 	bne	r19,zero,a05894 <___vfprintf_internal_r+0x1e98>
  a05860:	d8c14c17 	ldw	r3,1328(sp)
  a05864:	1880004c 	andi	r2,r3,1
  a05868:	10000a1e 	bne	r2,zero,a05894 <___vfprintf_internal_r+0x1e98>
  a0586c:	01000044 	movi	r4,1
  a05870:	200f883a 	mov	r7,r4
  a05874:	d9014515 	stw	r4,1300(sp)
  a05878:	003f4a06 	br	a055a4 <___vfprintf_internal_r+0x1ba8>
  a0587c:	3cc00017 	ldw	r19,0(r7)
  a05880:	39c00104 	addi	r7,r7,4
  a05884:	983d0e0e 	bge	r19,zero,a04cc0 <___vfprintf_internal_r+0x12c4>
  a05888:	b8c00007 	ldb	r3,0(r23)
  a0588c:	04ffffc4 	movi	r19,-1
  a05890:	0038d906 	br	a03bf8 <___vfprintf_internal_r+0x1fc>
  a05894:	9cc00084 	addi	r19,r19,2
  a05898:	dcc14515 	stw	r19,1300(sp)
  a0589c:	980f883a 	mov	r7,r19
  a058a0:	983f400e 	bge	r19,zero,a055a4 <___vfprintf_internal_r+0x1ba8>
  a058a4:	003f7306 	br	a05674 <___vfprintf_internal_r+0x1c78>

00a058a8 <__vfprintf_internal>:
  a058a8:	00802874 	movhi	r2,161
  a058ac:	108ad104 	addi	r2,r2,11076
  a058b0:	2013883a 	mov	r9,r4
  a058b4:	11000017 	ldw	r4,0(r2)
  a058b8:	2805883a 	mov	r2,r5
  a058bc:	300f883a 	mov	r7,r6
  a058c0:	480b883a 	mov	r5,r9
  a058c4:	100d883a 	mov	r6,r2
  a058c8:	0a039fc1 	jmpi	a039fc <___vfprintf_internal_r>

00a058cc <__swsetup_r>:
  a058cc:	00802874 	movhi	r2,161
  a058d0:	108ad104 	addi	r2,r2,11076
  a058d4:	10c00017 	ldw	r3,0(r2)
  a058d8:	defffd04 	addi	sp,sp,-12
  a058dc:	dc400115 	stw	r17,4(sp)
  a058e0:	dc000015 	stw	r16,0(sp)
  a058e4:	dfc00215 	stw	ra,8(sp)
  a058e8:	2023883a 	mov	r17,r4
  a058ec:	2821883a 	mov	r16,r5
  a058f0:	18000226 	beq	r3,zero,a058fc <__swsetup_r+0x30>
  a058f4:	18800e17 	ldw	r2,56(r3)
  a058f8:	10001f26 	beq	r2,zero,a05978 <__swsetup_r+0xac>
  a058fc:	8100030b 	ldhu	r4,12(r16)
  a05900:	2080020c 	andi	r2,r4,8
  a05904:	10002826 	beq	r2,zero,a059a8 <__swsetup_r+0xdc>
  a05908:	81400417 	ldw	r5,16(r16)
  a0590c:	28001d26 	beq	r5,zero,a05984 <__swsetup_r+0xb8>
  a05910:	2080004c 	andi	r2,r4,1
  a05914:	1005003a 	cmpeq	r2,r2,zero
  a05918:	10000b26 	beq	r2,zero,a05948 <__swsetup_r+0x7c>
  a0591c:	2080008c 	andi	r2,r4,2
  a05920:	10001226 	beq	r2,zero,a0596c <__swsetup_r+0xa0>
  a05924:	0005883a 	mov	r2,zero
  a05928:	80800215 	stw	r2,8(r16)
  a0592c:	28000b26 	beq	r5,zero,a0595c <__swsetup_r+0x90>
  a05930:	0005883a 	mov	r2,zero
  a05934:	dfc00217 	ldw	ra,8(sp)
  a05938:	dc400117 	ldw	r17,4(sp)
  a0593c:	dc000017 	ldw	r16,0(sp)
  a05940:	dec00304 	addi	sp,sp,12
  a05944:	f800283a 	ret
  a05948:	80800517 	ldw	r2,20(r16)
  a0594c:	80000215 	stw	zero,8(r16)
  a05950:	0085c83a 	sub	r2,zero,r2
  a05954:	80800615 	stw	r2,24(r16)
  a05958:	283ff51e 	bne	r5,zero,a05930 <__swsetup_r+0x64>
  a0595c:	2080200c 	andi	r2,r4,128
  a05960:	103ff326 	beq	r2,zero,a05930 <__swsetup_r+0x64>
  a05964:	00bfffc4 	movi	r2,-1
  a05968:	003ff206 	br	a05934 <__swsetup_r+0x68>
  a0596c:	80800517 	ldw	r2,20(r16)
  a05970:	80800215 	stw	r2,8(r16)
  a05974:	003fed06 	br	a0592c <__swsetup_r+0x60>
  a05978:	1809883a 	mov	r4,r3
  a0597c:	0a0746c0 	call	a0746c <__sinit>
  a05980:	003fde06 	br	a058fc <__swsetup_r+0x30>
  a05984:	20c0a00c 	andi	r3,r4,640
  a05988:	00808004 	movi	r2,512
  a0598c:	18bfe026 	beq	r3,r2,a05910 <__swsetup_r+0x44>
  a05990:	8809883a 	mov	r4,r17
  a05994:	800b883a 	mov	r5,r16
  a05998:	0a081e40 	call	a081e4 <__smakebuf_r>
  a0599c:	8100030b 	ldhu	r4,12(r16)
  a059a0:	81400417 	ldw	r5,16(r16)
  a059a4:	003fda06 	br	a05910 <__swsetup_r+0x44>
  a059a8:	2080040c 	andi	r2,r4,16
  a059ac:	103fed26 	beq	r2,zero,a05964 <__swsetup_r+0x98>
  a059b0:	2080010c 	andi	r2,r4,4
  a059b4:	10001226 	beq	r2,zero,a05a00 <__swsetup_r+0x134>
  a059b8:	81400c17 	ldw	r5,48(r16)
  a059bc:	28000526 	beq	r5,zero,a059d4 <__swsetup_r+0x108>
  a059c0:	80801004 	addi	r2,r16,64
  a059c4:	28800226 	beq	r5,r2,a059d0 <__swsetup_r+0x104>
  a059c8:	8809883a 	mov	r4,r17
  a059cc:	0a077f00 	call	a077f0 <_free_r>
  a059d0:	80000c15 	stw	zero,48(r16)
  a059d4:	8080030b 	ldhu	r2,12(r16)
  a059d8:	81400417 	ldw	r5,16(r16)
  a059dc:	80000115 	stw	zero,4(r16)
  a059e0:	10bff6cc 	andi	r2,r2,65499
  a059e4:	8080030d 	sth	r2,12(r16)
  a059e8:	81400015 	stw	r5,0(r16)
  a059ec:	8080030b 	ldhu	r2,12(r16)
  a059f0:	10800214 	ori	r2,r2,8
  a059f4:	113fffcc 	andi	r4,r2,65535
  a059f8:	8080030d 	sth	r2,12(r16)
  a059fc:	003fc306 	br	a0590c <__swsetup_r+0x40>
  a05a00:	81400417 	ldw	r5,16(r16)
  a05a04:	003ff906 	br	a059ec <__swsetup_r+0x120>

00a05a08 <quorem>:
  a05a08:	28c00417 	ldw	r3,16(r5)
  a05a0c:	20800417 	ldw	r2,16(r4)
  a05a10:	defff604 	addi	sp,sp,-40
  a05a14:	ddc00715 	stw	r23,28(sp)
  a05a18:	dd400515 	stw	r21,20(sp)
  a05a1c:	dfc00915 	stw	ra,36(sp)
  a05a20:	df000815 	stw	fp,32(sp)
  a05a24:	dd800615 	stw	r22,24(sp)
  a05a28:	dd000415 	stw	r20,16(sp)
  a05a2c:	dcc00315 	stw	r19,12(sp)
  a05a30:	dc800215 	stw	r18,8(sp)
  a05a34:	dc400115 	stw	r17,4(sp)
  a05a38:	dc000015 	stw	r16,0(sp)
  a05a3c:	202f883a 	mov	r23,r4
  a05a40:	282b883a 	mov	r21,r5
  a05a44:	10c07416 	blt	r2,r3,a05c18 <quorem+0x210>
  a05a48:	1c7fffc4 	addi	r17,r3,-1
  a05a4c:	8c45883a 	add	r2,r17,r17
  a05a50:	1085883a 	add	r2,r2,r2
  a05a54:	2c000504 	addi	r16,r5,20
  a05a58:	24c00504 	addi	r19,r4,20
  a05a5c:	14ed883a 	add	r22,r2,r19
  a05a60:	80a5883a 	add	r18,r16,r2
  a05a64:	b7000017 	ldw	fp,0(r22)
  a05a68:	91400017 	ldw	r5,0(r18)
  a05a6c:	e009883a 	mov	r4,fp
  a05a70:	29400044 	addi	r5,r5,1
  a05a74:	0a0c1280 	call	a0c128 <__udivsi3>
  a05a78:	1029883a 	mov	r20,r2
  a05a7c:	10003c1e 	bne	r2,zero,a05b70 <quorem+0x168>
  a05a80:	a80b883a 	mov	r5,r21
  a05a84:	b809883a 	mov	r4,r23
  a05a88:	0a08f100 	call	a08f10 <__mcmp>
  a05a8c:	10002b16 	blt	r2,zero,a05b3c <quorem+0x134>
  a05a90:	a5000044 	addi	r20,r20,1
  a05a94:	980f883a 	mov	r7,r19
  a05a98:	0011883a 	mov	r8,zero
  a05a9c:	0009883a 	mov	r4,zero
  a05aa0:	81400017 	ldw	r5,0(r16)
  a05aa4:	38c00017 	ldw	r3,0(r7)
  a05aa8:	84000104 	addi	r16,r16,4
  a05aac:	28bfffcc 	andi	r2,r5,65535
  a05ab0:	2085883a 	add	r2,r4,r2
  a05ab4:	11bfffcc 	andi	r6,r2,65535
  a05ab8:	193fffcc 	andi	r4,r3,65535
  a05abc:	1004d43a 	srli	r2,r2,16
  a05ac0:	280ad43a 	srli	r5,r5,16
  a05ac4:	2189c83a 	sub	r4,r4,r6
  a05ac8:	2209883a 	add	r4,r4,r8
  a05acc:	1806d43a 	srli	r3,r3,16
  a05ad0:	288b883a 	add	r5,r5,r2
  a05ad4:	200dd43a 	srai	r6,r4,16
  a05ad8:	28bfffcc 	andi	r2,r5,65535
  a05adc:	1887c83a 	sub	r3,r3,r2
  a05ae0:	1987883a 	add	r3,r3,r6
  a05ae4:	3900000d 	sth	r4,0(r7)
  a05ae8:	38c0008d 	sth	r3,2(r7)
  a05aec:	2808d43a 	srli	r4,r5,16
  a05af0:	39c00104 	addi	r7,r7,4
  a05af4:	1811d43a 	srai	r8,r3,16
  a05af8:	943fe92e 	bgeu	r18,r16,a05aa0 <quorem+0x98>
  a05afc:	8c45883a 	add	r2,r17,r17
  a05b00:	1085883a 	add	r2,r2,r2
  a05b04:	9885883a 	add	r2,r19,r2
  a05b08:	10c00017 	ldw	r3,0(r2)
  a05b0c:	18000b1e 	bne	r3,zero,a05b3c <quorem+0x134>
  a05b10:	113fff04 	addi	r4,r2,-4
  a05b14:	9900082e 	bgeu	r19,r4,a05b38 <quorem+0x130>
  a05b18:	10bfff17 	ldw	r2,-4(r2)
  a05b1c:	10000326 	beq	r2,zero,a05b2c <quorem+0x124>
  a05b20:	00000506 	br	a05b38 <quorem+0x130>
  a05b24:	20800017 	ldw	r2,0(r4)
  a05b28:	1000031e 	bne	r2,zero,a05b38 <quorem+0x130>
  a05b2c:	213fff04 	addi	r4,r4,-4
  a05b30:	8c7fffc4 	addi	r17,r17,-1
  a05b34:	993ffb36 	bltu	r19,r4,a05b24 <quorem+0x11c>
  a05b38:	bc400415 	stw	r17,16(r23)
  a05b3c:	a005883a 	mov	r2,r20
  a05b40:	dfc00917 	ldw	ra,36(sp)
  a05b44:	df000817 	ldw	fp,32(sp)
  a05b48:	ddc00717 	ldw	r23,28(sp)
  a05b4c:	dd800617 	ldw	r22,24(sp)
  a05b50:	dd400517 	ldw	r21,20(sp)
  a05b54:	dd000417 	ldw	r20,16(sp)
  a05b58:	dcc00317 	ldw	r19,12(sp)
  a05b5c:	dc800217 	ldw	r18,8(sp)
  a05b60:	dc400117 	ldw	r17,4(sp)
  a05b64:	dc000017 	ldw	r16,0(sp)
  a05b68:	dec00a04 	addi	sp,sp,40
  a05b6c:	f800283a 	ret
  a05b70:	980f883a 	mov	r7,r19
  a05b74:	8011883a 	mov	r8,r16
  a05b78:	0013883a 	mov	r9,zero
  a05b7c:	000d883a 	mov	r6,zero
  a05b80:	40c00017 	ldw	r3,0(r8)
  a05b84:	39000017 	ldw	r4,0(r7)
  a05b88:	42000104 	addi	r8,r8,4
  a05b8c:	18bfffcc 	andi	r2,r3,65535
  a05b90:	a085383a 	mul	r2,r20,r2
  a05b94:	1806d43a 	srli	r3,r3,16
  a05b98:	217fffcc 	andi	r5,r4,65535
  a05b9c:	3085883a 	add	r2,r6,r2
  a05ba0:	11bfffcc 	andi	r6,r2,65535
  a05ba4:	a0c7383a 	mul	r3,r20,r3
  a05ba8:	1004d43a 	srli	r2,r2,16
  a05bac:	298bc83a 	sub	r5,r5,r6
  a05bb0:	2a4b883a 	add	r5,r5,r9
  a05bb4:	2008d43a 	srli	r4,r4,16
  a05bb8:	1887883a 	add	r3,r3,r2
  a05bbc:	280dd43a 	srai	r6,r5,16
  a05bc0:	18bfffcc 	andi	r2,r3,65535
  a05bc4:	2089c83a 	sub	r4,r4,r2
  a05bc8:	2189883a 	add	r4,r4,r6
  a05bcc:	3900008d 	sth	r4,2(r7)
  a05bd0:	3940000d 	sth	r5,0(r7)
  a05bd4:	180cd43a 	srli	r6,r3,16
  a05bd8:	39c00104 	addi	r7,r7,4
  a05bdc:	2013d43a 	srai	r9,r4,16
  a05be0:	923fe72e 	bgeu	r18,r8,a05b80 <quorem+0x178>
  a05be4:	e03fa61e 	bne	fp,zero,a05a80 <quorem+0x78>
  a05be8:	b0ffff04 	addi	r3,r22,-4
  a05bec:	98c0082e 	bgeu	r19,r3,a05c10 <quorem+0x208>
  a05bf0:	b0bfff17 	ldw	r2,-4(r22)
  a05bf4:	10000326 	beq	r2,zero,a05c04 <quorem+0x1fc>
  a05bf8:	00000506 	br	a05c10 <quorem+0x208>
  a05bfc:	18800017 	ldw	r2,0(r3)
  a05c00:	1000031e 	bne	r2,zero,a05c10 <quorem+0x208>
  a05c04:	18ffff04 	addi	r3,r3,-4
  a05c08:	8c7fffc4 	addi	r17,r17,-1
  a05c0c:	98fffb36 	bltu	r19,r3,a05bfc <quorem+0x1f4>
  a05c10:	bc400415 	stw	r17,16(r23)
  a05c14:	003f9a06 	br	a05a80 <quorem+0x78>
  a05c18:	0005883a 	mov	r2,zero
  a05c1c:	003fc806 	br	a05b40 <quorem+0x138>

00a05c20 <_dtoa_r>:
  a05c20:	22001017 	ldw	r8,64(r4)
  a05c24:	deffda04 	addi	sp,sp,-152
  a05c28:	dd402115 	stw	r21,132(sp)
  a05c2c:	dd002015 	stw	r20,128(sp)
  a05c30:	dc801e15 	stw	r18,120(sp)
  a05c34:	dc401d15 	stw	r17,116(sp)
  a05c38:	dfc02515 	stw	ra,148(sp)
  a05c3c:	df002415 	stw	fp,144(sp)
  a05c40:	ddc02315 	stw	r23,140(sp)
  a05c44:	dd802215 	stw	r22,136(sp)
  a05c48:	dcc01f15 	stw	r19,124(sp)
  a05c4c:	dc001c15 	stw	r16,112(sp)
  a05c50:	d9001615 	stw	r4,88(sp)
  a05c54:	3023883a 	mov	r17,r6
  a05c58:	2829883a 	mov	r20,r5
  a05c5c:	d9c01715 	stw	r7,92(sp)
  a05c60:	dc802817 	ldw	r18,160(sp)
  a05c64:	302b883a 	mov	r21,r6
  a05c68:	40000a26 	beq	r8,zero,a05c94 <_dtoa_r+0x74>
  a05c6c:	20801117 	ldw	r2,68(r4)
  a05c70:	400b883a 	mov	r5,r8
  a05c74:	40800115 	stw	r2,4(r8)
  a05c78:	20c01117 	ldw	r3,68(r4)
  a05c7c:	00800044 	movi	r2,1
  a05c80:	10c4983a 	sll	r2,r2,r3
  a05c84:	40800215 	stw	r2,8(r8)
  a05c88:	0a08db40 	call	a08db4 <_Bfree>
  a05c8c:	d8c01617 	ldw	r3,88(sp)
  a05c90:	18001015 	stw	zero,64(r3)
  a05c94:	8800a316 	blt	r17,zero,a05f24 <_dtoa_r+0x304>
  a05c98:	90000015 	stw	zero,0(r18)
  a05c9c:	a8dffc2c 	andhi	r3,r21,32752
  a05ca0:	009ffc34 	movhi	r2,32752
  a05ca4:	18809126 	beq	r3,r2,a05eec <_dtoa_r+0x2cc>
  a05ca8:	000d883a 	mov	r6,zero
  a05cac:	000f883a 	mov	r7,zero
  a05cb0:	a009883a 	mov	r4,r20
  a05cb4:	a80b883a 	mov	r5,r21
  a05cb8:	dd001215 	stw	r20,72(sp)
  a05cbc:	dd401315 	stw	r21,76(sp)
  a05cc0:	0a02cc40 	call	a02cc4 <__nedf2>
  a05cc4:	1000171e 	bne	r2,zero,a05d24 <_dtoa_r+0x104>
  a05cc8:	d9802717 	ldw	r6,156(sp)
  a05ccc:	00800044 	movi	r2,1
  a05cd0:	30800015 	stw	r2,0(r6)
  a05cd4:	d8802917 	ldw	r2,164(sp)
  a05cd8:	10029b26 	beq	r2,zero,a06748 <_dtoa_r+0xb28>
  a05cdc:	d9002917 	ldw	r4,164(sp)
  a05ce0:	00802874 	movhi	r2,161
  a05ce4:	1082c544 	addi	r2,r2,2837
  a05ce8:	10ffffc4 	addi	r3,r2,-1
  a05cec:	20800015 	stw	r2,0(r4)
  a05cf0:	1805883a 	mov	r2,r3
  a05cf4:	dfc02517 	ldw	ra,148(sp)
  a05cf8:	df002417 	ldw	fp,144(sp)
  a05cfc:	ddc02317 	ldw	r23,140(sp)
  a05d00:	dd802217 	ldw	r22,136(sp)
  a05d04:	dd402117 	ldw	r21,132(sp)
  a05d08:	dd002017 	ldw	r20,128(sp)
  a05d0c:	dcc01f17 	ldw	r19,124(sp)
  a05d10:	dc801e17 	ldw	r18,120(sp)
  a05d14:	dc401d17 	ldw	r17,116(sp)
  a05d18:	dc001c17 	ldw	r16,112(sp)
  a05d1c:	dec02604 	addi	sp,sp,152
  a05d20:	f800283a 	ret
  a05d24:	d9001617 	ldw	r4,88(sp)
  a05d28:	d9401217 	ldw	r5,72(sp)
  a05d2c:	d8800104 	addi	r2,sp,4
  a05d30:	a80d883a 	mov	r6,r21
  a05d34:	d9c00204 	addi	r7,sp,8
  a05d38:	d8800015 	stw	r2,0(sp)
  a05d3c:	0a093f00 	call	a093f0 <__d2b>
  a05d40:	d8800715 	stw	r2,28(sp)
  a05d44:	a804d53a 	srli	r2,r21,20
  a05d48:	1101ffcc 	andi	r4,r2,2047
  a05d4c:	20008626 	beq	r4,zero,a05f68 <_dtoa_r+0x348>
  a05d50:	d8c01217 	ldw	r3,72(sp)
  a05d54:	00800434 	movhi	r2,16
  a05d58:	10bfffc4 	addi	r2,r2,-1
  a05d5c:	ddc00117 	ldw	r23,4(sp)
  a05d60:	a884703a 	and	r2,r21,r2
  a05d64:	1811883a 	mov	r8,r3
  a05d68:	124ffc34 	orhi	r9,r2,16368
  a05d6c:	25bf0044 	addi	r22,r4,-1023
  a05d70:	d8000815 	stw	zero,32(sp)
  a05d74:	0005883a 	mov	r2,zero
  a05d78:	00cffe34 	movhi	r3,16376
  a05d7c:	480b883a 	mov	r5,r9
  a05d80:	4009883a 	mov	r4,r8
  a05d84:	180f883a 	mov	r7,r3
  a05d88:	100d883a 	mov	r6,r2
  a05d8c:	0a029780 	call	a02978 <__subdf3>
  a05d90:	0218dbf4 	movhi	r8,25455
  a05d94:	4210d844 	addi	r8,r8,17249
  a05d98:	024ff4f4 	movhi	r9,16339
  a05d9c:	4a61e9c4 	addi	r9,r9,-30809
  a05da0:	480f883a 	mov	r7,r9
  a05da4:	400d883a 	mov	r6,r8
  a05da8:	180b883a 	mov	r5,r3
  a05dac:	1009883a 	mov	r4,r2
  a05db0:	0a0b6a40 	call	a0b6a4 <__muldf3>
  a05db4:	0222d874 	movhi	r8,35681
  a05db8:	42322cc4 	addi	r8,r8,-14157
  a05dbc:	024ff1f4 	movhi	r9,16327
  a05dc0:	4a628a04 	addi	r9,r9,-30168
  a05dc4:	480f883a 	mov	r7,r9
  a05dc8:	400d883a 	mov	r6,r8
  a05dcc:	180b883a 	mov	r5,r3
  a05dd0:	1009883a 	mov	r4,r2
  a05dd4:	0a029f80 	call	a029f8 <__adddf3>
  a05dd8:	b009883a 	mov	r4,r22
  a05ddc:	1021883a 	mov	r16,r2
  a05de0:	1823883a 	mov	r17,r3
  a05de4:	0a0bc880 	call	a0bc88 <__floatsidf>
  a05de8:	021427f4 	movhi	r8,20639
  a05dec:	421e7ec4 	addi	r8,r8,31227
  a05df0:	024ff4f4 	movhi	r9,16339
  a05df4:	4a5104c4 	addi	r9,r9,17427
  a05df8:	480f883a 	mov	r7,r9
  a05dfc:	400d883a 	mov	r6,r8
  a05e00:	180b883a 	mov	r5,r3
  a05e04:	1009883a 	mov	r4,r2
  a05e08:	0a0b6a40 	call	a0b6a4 <__muldf3>
  a05e0c:	180f883a 	mov	r7,r3
  a05e10:	880b883a 	mov	r5,r17
  a05e14:	100d883a 	mov	r6,r2
  a05e18:	8009883a 	mov	r4,r16
  a05e1c:	0a029f80 	call	a029f8 <__adddf3>
  a05e20:	1009883a 	mov	r4,r2
  a05e24:	180b883a 	mov	r5,r3
  a05e28:	1021883a 	mov	r16,r2
  a05e2c:	1823883a 	mov	r17,r3
  a05e30:	0a0bd800 	call	a0bd80 <__fixdfsi>
  a05e34:	000d883a 	mov	r6,zero
  a05e38:	000f883a 	mov	r7,zero
  a05e3c:	8009883a 	mov	r4,r16
  a05e40:	880b883a 	mov	r5,r17
  a05e44:	d8800d15 	stw	r2,52(sp)
  a05e48:	0a0bc000 	call	a0bc00 <__ltdf2>
  a05e4c:	10031716 	blt	r2,zero,a06aac <_dtoa_r+0xe8c>
  a05e50:	d8c00d17 	ldw	r3,52(sp)
  a05e54:	00800584 	movi	r2,22
  a05e58:	10c1482e 	bgeu	r2,r3,a0637c <_dtoa_r+0x75c>
  a05e5c:	01000044 	movi	r4,1
  a05e60:	d9000c15 	stw	r4,48(sp)
  a05e64:	bd85c83a 	sub	r2,r23,r22
  a05e68:	11bfffc4 	addi	r6,r2,-1
  a05e6c:	30030b16 	blt	r6,zero,a06a9c <_dtoa_r+0xe7c>
  a05e70:	d9800a15 	stw	r6,40(sp)
  a05e74:	d8001115 	stw	zero,68(sp)
  a05e78:	d8c00d17 	ldw	r3,52(sp)
  a05e7c:	1802ff16 	blt	r3,zero,a06a7c <_dtoa_r+0xe5c>
  a05e80:	d9000a17 	ldw	r4,40(sp)
  a05e84:	d8c00915 	stw	r3,36(sp)
  a05e88:	d8001015 	stw	zero,64(sp)
  a05e8c:	20c9883a 	add	r4,r4,r3
  a05e90:	d9000a15 	stw	r4,40(sp)
  a05e94:	d9001717 	ldw	r4,92(sp)
  a05e98:	00800244 	movi	r2,9
  a05e9c:	11004636 	bltu	r2,r4,a05fb8 <_dtoa_r+0x398>
  a05ea0:	00800144 	movi	r2,5
  a05ea4:	11020416 	blt	r2,r4,a066b8 <_dtoa_r+0xa98>
  a05ea8:	04400044 	movi	r17,1
  a05eac:	d8c01717 	ldw	r3,92(sp)
  a05eb0:	00800144 	movi	r2,5
  a05eb4:	10c1ed36 	bltu	r2,r3,a0666c <_dtoa_r+0xa4c>
  a05eb8:	18c5883a 	add	r2,r3,r3
  a05ebc:	1085883a 	add	r2,r2,r2
  a05ec0:	00c02834 	movhi	r3,160
  a05ec4:	18d7b504 	addi	r3,r3,24276
  a05ec8:	10c5883a 	add	r2,r2,r3
  a05ecc:	11000017 	ldw	r4,0(r2)
  a05ed0:	2000683a 	jmp	r4
  a05ed4:	00a05fc0 	call	a05fc <__alt_mem_onchip_memory2_3+0x995fc>
  a05ed8:	00a05fc0 	call	a05fc <__alt_mem_onchip_memory2_3+0x995fc>
  a05edc:	00a069c0 	call	a069c <__alt_mem_onchip_memory2_3+0x9969c>
  a05ee0:	00a06998 	cmpnei	r2,zero,-32346
  a05ee4:	00a069dc 	xori	r2,zero,33191
  a05ee8:	00a069e8 	cmpgeui	r2,zero,33191
  a05eec:	d9002717 	ldw	r4,156(sp)
  a05ef0:	0089c3c4 	movi	r2,9999
  a05ef4:	20800015 	stw	r2,0(r4)
  a05ef8:	a0001026 	beq	r20,zero,a05f3c <_dtoa_r+0x31c>
  a05efc:	00c02874 	movhi	r3,161
  a05f00:	18c34204 	addi	r3,r3,3336
  a05f04:	d9802917 	ldw	r6,164(sp)
  a05f08:	303f7926 	beq	r6,zero,a05cf0 <_dtoa_r+0xd0>
  a05f0c:	188000c7 	ldb	r2,3(r3)
  a05f10:	190000c4 	addi	r4,r3,3
  a05f14:	1000101e 	bne	r2,zero,a05f58 <_dtoa_r+0x338>
  a05f18:	d8802917 	ldw	r2,164(sp)
  a05f1c:	11000015 	stw	r4,0(r2)
  a05f20:	003f7306 	br	a05cf0 <_dtoa_r+0xd0>
  a05f24:	00a00034 	movhi	r2,32768
  a05f28:	10bfffc4 	addi	r2,r2,-1
  a05f2c:	00c00044 	movi	r3,1
  a05f30:	88aa703a 	and	r21,r17,r2
  a05f34:	90c00015 	stw	r3,0(r18)
  a05f38:	003f5806 	br	a05c9c <_dtoa_r+0x7c>
  a05f3c:	00800434 	movhi	r2,16
  a05f40:	10bfffc4 	addi	r2,r2,-1
  a05f44:	a884703a 	and	r2,r21,r2
  a05f48:	103fec1e 	bne	r2,zero,a05efc <_dtoa_r+0x2dc>
  a05f4c:	00c02874 	movhi	r3,161
  a05f50:	18c33f04 	addi	r3,r3,3324
  a05f54:	003feb06 	br	a05f04 <_dtoa_r+0x2e4>
  a05f58:	d8802917 	ldw	r2,164(sp)
  a05f5c:	19000204 	addi	r4,r3,8
  a05f60:	11000015 	stw	r4,0(r2)
  a05f64:	003f6206 	br	a05cf0 <_dtoa_r+0xd0>
  a05f68:	ddc00117 	ldw	r23,4(sp)
  a05f6c:	d8800217 	ldw	r2,8(sp)
  a05f70:	01000804 	movi	r4,32
  a05f74:	b8c10c84 	addi	r3,r23,1074
  a05f78:	18a3883a 	add	r17,r3,r2
  a05f7c:	2441b80e 	bge	r4,r17,a06660 <_dtoa_r+0xa40>
  a05f80:	00c01004 	movi	r3,64
  a05f84:	1c47c83a 	sub	r3,r3,r17
  a05f88:	88bff804 	addi	r2,r17,-32
  a05f8c:	a8c6983a 	sll	r3,r21,r3
  a05f90:	a084d83a 	srl	r2,r20,r2
  a05f94:	1888b03a 	or	r4,r3,r2
  a05f98:	0a0be580 	call	a0be58 <__floatunsidf>
  a05f9c:	1011883a 	mov	r8,r2
  a05fa0:	00bf8434 	movhi	r2,65040
  a05fa4:	01000044 	movi	r4,1
  a05fa8:	10d3883a 	add	r9,r2,r3
  a05fac:	8dbef344 	addi	r22,r17,-1075
  a05fb0:	d9000815 	stw	r4,32(sp)
  a05fb4:	003f6f06 	br	a05d74 <_dtoa_r+0x154>
  a05fb8:	d8001715 	stw	zero,92(sp)
  a05fbc:	04400044 	movi	r17,1
  a05fc0:	00bfffc4 	movi	r2,-1
  a05fc4:	00c00044 	movi	r3,1
  a05fc8:	d8800e15 	stw	r2,56(sp)
  a05fcc:	d8002615 	stw	zero,152(sp)
  a05fd0:	d8800f15 	stw	r2,60(sp)
  a05fd4:	d8c00b15 	stw	r3,44(sp)
  a05fd8:	1021883a 	mov	r16,r2
  a05fdc:	d8801617 	ldw	r2,88(sp)
  a05fe0:	10001115 	stw	zero,68(r2)
  a05fe4:	d8801617 	ldw	r2,88(sp)
  a05fe8:	11401117 	ldw	r5,68(r2)
  a05fec:	1009883a 	mov	r4,r2
  a05ff0:	0a093340 	call	a09334 <_Balloc>
  a05ff4:	d8c01617 	ldw	r3,88(sp)
  a05ff8:	d8800515 	stw	r2,20(sp)
  a05ffc:	18801015 	stw	r2,64(r3)
  a06000:	00800384 	movi	r2,14
  a06004:	14006836 	bltu	r2,r16,a061a8 <_dtoa_r+0x588>
  a06008:	8805003a 	cmpeq	r2,r17,zero
  a0600c:	1000661e 	bne	r2,zero,a061a8 <_dtoa_r+0x588>
  a06010:	d9000d17 	ldw	r4,52(sp)
  a06014:	0102300e 	bge	zero,r4,a068d8 <_dtoa_r+0xcb8>
  a06018:	208003cc 	andi	r2,r4,15
  a0601c:	100490fa 	slli	r2,r2,3
  a06020:	2025d13a 	srai	r18,r4,4
  a06024:	00c02874 	movhi	r3,161
  a06028:	18c35204 	addi	r3,r3,3400
  a0602c:	10c5883a 	add	r2,r2,r3
  a06030:	90c0040c 	andi	r3,r18,16
  a06034:	14000017 	ldw	r16,0(r2)
  a06038:	14400117 	ldw	r17,4(r2)
  a0603c:	18036a1e 	bne	r3,zero,a06de8 <_dtoa_r+0x11c8>
  a06040:	05800084 	movi	r22,2
  a06044:	90001026 	beq	r18,zero,a06088 <_dtoa_r+0x468>
  a06048:	04c02874 	movhi	r19,161
  a0604c:	9cc38404 	addi	r19,r19,3600
  a06050:	9080004c 	andi	r2,r18,1
  a06054:	1005003a 	cmpeq	r2,r2,zero
  a06058:	1000081e 	bne	r2,zero,a0607c <_dtoa_r+0x45c>
  a0605c:	99800017 	ldw	r6,0(r19)
  a06060:	99c00117 	ldw	r7,4(r19)
  a06064:	880b883a 	mov	r5,r17
  a06068:	8009883a 	mov	r4,r16
  a0606c:	0a0b6a40 	call	a0b6a4 <__muldf3>
  a06070:	1021883a 	mov	r16,r2
  a06074:	b5800044 	addi	r22,r22,1
  a06078:	1823883a 	mov	r17,r3
  a0607c:	9025d07a 	srai	r18,r18,1
  a06080:	9cc00204 	addi	r19,r19,8
  a06084:	903ff21e 	bne	r18,zero,a06050 <_dtoa_r+0x430>
  a06088:	a80b883a 	mov	r5,r21
  a0608c:	a009883a 	mov	r4,r20
  a06090:	880f883a 	mov	r7,r17
  a06094:	800d883a 	mov	r6,r16
  a06098:	0a02a6c0 	call	a02a6c <__divdf3>
  a0609c:	1029883a 	mov	r20,r2
  a060a0:	182b883a 	mov	r21,r3
  a060a4:	d8c00c17 	ldw	r3,48(sp)
  a060a8:	1805003a 	cmpeq	r2,r3,zero
  a060ac:	1000081e 	bne	r2,zero,a060d0 <_dtoa_r+0x4b0>
  a060b0:	0005883a 	mov	r2,zero
  a060b4:	00cffc34 	movhi	r3,16368
  a060b8:	180f883a 	mov	r7,r3
  a060bc:	a009883a 	mov	r4,r20
  a060c0:	a80b883a 	mov	r5,r21
  a060c4:	100d883a 	mov	r6,r2
  a060c8:	0a0bc000 	call	a0bc00 <__ltdf2>
  a060cc:	1003fe16 	blt	r2,zero,a070c8 <_dtoa_r+0x14a8>
  a060d0:	b009883a 	mov	r4,r22
  a060d4:	0a0bc880 	call	a0bc88 <__floatsidf>
  a060d8:	180b883a 	mov	r5,r3
  a060dc:	1009883a 	mov	r4,r2
  a060e0:	a00d883a 	mov	r6,r20
  a060e4:	a80f883a 	mov	r7,r21
  a060e8:	0a0b6a40 	call	a0b6a4 <__muldf3>
  a060ec:	0011883a 	mov	r8,zero
  a060f0:	02500734 	movhi	r9,16412
  a060f4:	1009883a 	mov	r4,r2
  a060f8:	180b883a 	mov	r5,r3
  a060fc:	480f883a 	mov	r7,r9
  a06100:	400d883a 	mov	r6,r8
  a06104:	0a029f80 	call	a029f8 <__adddf3>
  a06108:	d9000f17 	ldw	r4,60(sp)
  a0610c:	102d883a 	mov	r22,r2
  a06110:	00bf3034 	movhi	r2,64704
  a06114:	18b9883a 	add	fp,r3,r2
  a06118:	e02f883a 	mov	r23,fp
  a0611c:	20028f1e 	bne	r4,zero,a06b5c <_dtoa_r+0xf3c>
  a06120:	0005883a 	mov	r2,zero
  a06124:	00d00534 	movhi	r3,16404
  a06128:	a009883a 	mov	r4,r20
  a0612c:	a80b883a 	mov	r5,r21
  a06130:	180f883a 	mov	r7,r3
  a06134:	100d883a 	mov	r6,r2
  a06138:	0a029780 	call	a02978 <__subdf3>
  a0613c:	1009883a 	mov	r4,r2
  a06140:	e00f883a 	mov	r7,fp
  a06144:	180b883a 	mov	r5,r3
  a06148:	b00d883a 	mov	r6,r22
  a0614c:	1025883a 	mov	r18,r2
  a06150:	1827883a 	mov	r19,r3
  a06154:	0a0baf00 	call	a0baf0 <__gtdf2>
  a06158:	00834f16 	blt	zero,r2,a06e98 <_dtoa_r+0x1278>
  a0615c:	e0e0003c 	xorhi	r3,fp,32768
  a06160:	9009883a 	mov	r4,r18
  a06164:	980b883a 	mov	r5,r19
  a06168:	180f883a 	mov	r7,r3
  a0616c:	b00d883a 	mov	r6,r22
  a06170:	0a0bc000 	call	a0bc00 <__ltdf2>
  a06174:	1000080e 	bge	r2,zero,a06198 <_dtoa_r+0x578>
  a06178:	0027883a 	mov	r19,zero
  a0617c:	0025883a 	mov	r18,zero
  a06180:	d8802617 	ldw	r2,152(sp)
  a06184:	df000517 	ldw	fp,20(sp)
  a06188:	d8000615 	stw	zero,24(sp)
  a0618c:	0084303a 	nor	r2,zero,r2
  a06190:	d8800d15 	stw	r2,52(sp)
  a06194:	00019b06 	br	a06804 <_dtoa_r+0xbe4>
  a06198:	d9801217 	ldw	r6,72(sp)
  a0619c:	d8801317 	ldw	r2,76(sp)
  a061a0:	3029883a 	mov	r20,r6
  a061a4:	102b883a 	mov	r21,r2
  a061a8:	d8c00217 	ldw	r3,8(sp)
  a061ac:	18008516 	blt	r3,zero,a063c4 <_dtoa_r+0x7a4>
  a061b0:	d9000d17 	ldw	r4,52(sp)
  a061b4:	00800384 	movi	r2,14
  a061b8:	11008216 	blt	r2,r4,a063c4 <_dtoa_r+0x7a4>
  a061bc:	200490fa 	slli	r2,r4,3
  a061c0:	d9802617 	ldw	r6,152(sp)
  a061c4:	00c02874 	movhi	r3,161
  a061c8:	18c35204 	addi	r3,r3,3400
  a061cc:	10c5883a 	add	r2,r2,r3
  a061d0:	14800017 	ldw	r18,0(r2)
  a061d4:	14c00117 	ldw	r19,4(r2)
  a061d8:	30031e16 	blt	r6,zero,a06e54 <_dtoa_r+0x1234>
  a061dc:	d9000517 	ldw	r4,20(sp)
  a061e0:	d8c00f17 	ldw	r3,60(sp)
  a061e4:	a823883a 	mov	r17,r21
  a061e8:	a021883a 	mov	r16,r20
  a061ec:	192b883a 	add	r21,r3,r4
  a061f0:	2039883a 	mov	fp,r4
  a061f4:	00000f06 	br	a06234 <_dtoa_r+0x614>
  a061f8:	0005883a 	mov	r2,zero
  a061fc:	00d00934 	movhi	r3,16420
  a06200:	5009883a 	mov	r4,r10
  a06204:	580b883a 	mov	r5,r11
  a06208:	180f883a 	mov	r7,r3
  a0620c:	100d883a 	mov	r6,r2
  a06210:	0a0b6a40 	call	a0b6a4 <__muldf3>
  a06214:	180b883a 	mov	r5,r3
  a06218:	000d883a 	mov	r6,zero
  a0621c:	000f883a 	mov	r7,zero
  a06220:	1009883a 	mov	r4,r2
  a06224:	1021883a 	mov	r16,r2
  a06228:	1823883a 	mov	r17,r3
  a0622c:	0a02cc40 	call	a02cc4 <__nedf2>
  a06230:	10004526 	beq	r2,zero,a06348 <_dtoa_r+0x728>
  a06234:	900d883a 	mov	r6,r18
  a06238:	980f883a 	mov	r7,r19
  a0623c:	8009883a 	mov	r4,r16
  a06240:	880b883a 	mov	r5,r17
  a06244:	0a02a6c0 	call	a02a6c <__divdf3>
  a06248:	180b883a 	mov	r5,r3
  a0624c:	1009883a 	mov	r4,r2
  a06250:	0a0bd800 	call	a0bd80 <__fixdfsi>
  a06254:	1009883a 	mov	r4,r2
  a06258:	1029883a 	mov	r20,r2
  a0625c:	0a0bc880 	call	a0bc88 <__floatsidf>
  a06260:	180f883a 	mov	r7,r3
  a06264:	9009883a 	mov	r4,r18
  a06268:	980b883a 	mov	r5,r19
  a0626c:	100d883a 	mov	r6,r2
  a06270:	0a0b6a40 	call	a0b6a4 <__muldf3>
  a06274:	180f883a 	mov	r7,r3
  a06278:	880b883a 	mov	r5,r17
  a0627c:	8009883a 	mov	r4,r16
  a06280:	100d883a 	mov	r6,r2
  a06284:	0a029780 	call	a02978 <__subdf3>
  a06288:	1015883a 	mov	r10,r2
  a0628c:	a0800c04 	addi	r2,r20,48
  a06290:	e0800005 	stb	r2,0(fp)
  a06294:	e7000044 	addi	fp,fp,1
  a06298:	1817883a 	mov	r11,r3
  a0629c:	e57fd61e 	bne	fp,r21,a061f8 <_dtoa_r+0x5d8>
  a062a0:	500d883a 	mov	r6,r10
  a062a4:	180f883a 	mov	r7,r3
  a062a8:	5009883a 	mov	r4,r10
  a062ac:	180b883a 	mov	r5,r3
  a062b0:	0a029f80 	call	a029f8 <__adddf3>
  a062b4:	100d883a 	mov	r6,r2
  a062b8:	9009883a 	mov	r4,r18
  a062bc:	980b883a 	mov	r5,r19
  a062c0:	180f883a 	mov	r7,r3
  a062c4:	1021883a 	mov	r16,r2
  a062c8:	1823883a 	mov	r17,r3
  a062cc:	0a0bc000 	call	a0bc00 <__ltdf2>
  a062d0:	10000816 	blt	r2,zero,a062f4 <_dtoa_r+0x6d4>
  a062d4:	980b883a 	mov	r5,r19
  a062d8:	800d883a 	mov	r6,r16
  a062dc:	880f883a 	mov	r7,r17
  a062e0:	9009883a 	mov	r4,r18
  a062e4:	0a0ba680 	call	a0ba68 <__eqdf2>
  a062e8:	1000171e 	bne	r2,zero,a06348 <_dtoa_r+0x728>
  a062ec:	a080004c 	andi	r2,r20,1
  a062f0:	10001526 	beq	r2,zero,a06348 <_dtoa_r+0x728>
  a062f4:	d8800d17 	ldw	r2,52(sp)
  a062f8:	d8800415 	stw	r2,16(sp)
  a062fc:	e009883a 	mov	r4,fp
  a06300:	213fffc4 	addi	r4,r4,-1
  a06304:	20c00007 	ldb	r3,0(r4)
  a06308:	00800e44 	movi	r2,57
  a0630c:	1880081e 	bne	r3,r2,a06330 <_dtoa_r+0x710>
  a06310:	d8800517 	ldw	r2,20(sp)
  a06314:	113ffa1e 	bne	r2,r4,a06300 <_dtoa_r+0x6e0>
  a06318:	d8c00417 	ldw	r3,16(sp)
  a0631c:	d9800517 	ldw	r6,20(sp)
  a06320:	00800c04 	movi	r2,48
  a06324:	18c00044 	addi	r3,r3,1
  a06328:	d8c00415 	stw	r3,16(sp)
  a0632c:	30800005 	stb	r2,0(r6)
  a06330:	20800003 	ldbu	r2,0(r4)
  a06334:	d8c00417 	ldw	r3,16(sp)
  a06338:	27000044 	addi	fp,r4,1
  a0633c:	10800044 	addi	r2,r2,1
  a06340:	d8c00d15 	stw	r3,52(sp)
  a06344:	20800005 	stb	r2,0(r4)
  a06348:	d9001617 	ldw	r4,88(sp)
  a0634c:	d9400717 	ldw	r5,28(sp)
  a06350:	0a08db40 	call	a08db4 <_Bfree>
  a06354:	e0000005 	stb	zero,0(fp)
  a06358:	d9800d17 	ldw	r6,52(sp)
  a0635c:	d8c02717 	ldw	r3,156(sp)
  a06360:	d9002917 	ldw	r4,164(sp)
  a06364:	30800044 	addi	r2,r6,1
  a06368:	18800015 	stw	r2,0(r3)
  a0636c:	20029c26 	beq	r4,zero,a06de0 <_dtoa_r+0x11c0>
  a06370:	d8c00517 	ldw	r3,20(sp)
  a06374:	27000015 	stw	fp,0(r4)
  a06378:	003e5d06 	br	a05cf0 <_dtoa_r+0xd0>
  a0637c:	d9800d17 	ldw	r6,52(sp)
  a06380:	00c02874 	movhi	r3,161
  a06384:	18c35204 	addi	r3,r3,3400
  a06388:	d9001217 	ldw	r4,72(sp)
  a0638c:	300490fa 	slli	r2,r6,3
  a06390:	d9401317 	ldw	r5,76(sp)
  a06394:	10c5883a 	add	r2,r2,r3
  a06398:	12000017 	ldw	r8,0(r2)
  a0639c:	12400117 	ldw	r9,4(r2)
  a063a0:	400d883a 	mov	r6,r8
  a063a4:	480f883a 	mov	r7,r9
  a063a8:	0a0bc000 	call	a0bc00 <__ltdf2>
  a063ac:	1000030e 	bge	r2,zero,a063bc <_dtoa_r+0x79c>
  a063b0:	d8800d17 	ldw	r2,52(sp)
  a063b4:	10bfffc4 	addi	r2,r2,-1
  a063b8:	d8800d15 	stw	r2,52(sp)
  a063bc:	d8000c15 	stw	zero,48(sp)
  a063c0:	003ea806 	br	a05e64 <_dtoa_r+0x244>
  a063c4:	d9000b17 	ldw	r4,44(sp)
  a063c8:	202cc03a 	cmpne	r22,r4,zero
  a063cc:	b000c71e 	bne	r22,zero,a066ec <_dtoa_r+0xacc>
  a063d0:	dc001117 	ldw	r16,68(sp)
  a063d4:	dc801017 	ldw	r18,64(sp)
  a063d8:	0027883a 	mov	r19,zero
  a063dc:	04000b0e 	bge	zero,r16,a0640c <_dtoa_r+0x7ec>
  a063e0:	d8c00a17 	ldw	r3,40(sp)
  a063e4:	00c0090e 	bge	zero,r3,a0640c <_dtoa_r+0x7ec>
  a063e8:	8005883a 	mov	r2,r16
  a063ec:	1c011316 	blt	r3,r16,a0683c <_dtoa_r+0xc1c>
  a063f0:	d9000a17 	ldw	r4,40(sp)
  a063f4:	d9801117 	ldw	r6,68(sp)
  a063f8:	80a1c83a 	sub	r16,r16,r2
  a063fc:	2089c83a 	sub	r4,r4,r2
  a06400:	308dc83a 	sub	r6,r6,r2
  a06404:	d9000a15 	stw	r4,40(sp)
  a06408:	d9801115 	stw	r6,68(sp)
  a0640c:	d8801017 	ldw	r2,64(sp)
  a06410:	0080150e 	bge	zero,r2,a06468 <_dtoa_r+0x848>
  a06414:	d8c00b17 	ldw	r3,44(sp)
  a06418:	1805003a 	cmpeq	r2,r3,zero
  a0641c:	1001c91e 	bne	r2,zero,a06b44 <_dtoa_r+0xf24>
  a06420:	04800e0e 	bge	zero,r18,a0645c <_dtoa_r+0x83c>
  a06424:	d9001617 	ldw	r4,88(sp)
  a06428:	980b883a 	mov	r5,r19
  a0642c:	900d883a 	mov	r6,r18
  a06430:	0a09b680 	call	a09b68 <__pow5mult>
  a06434:	d9001617 	ldw	r4,88(sp)
  a06438:	d9800717 	ldw	r6,28(sp)
  a0643c:	100b883a 	mov	r5,r2
  a06440:	1027883a 	mov	r19,r2
  a06444:	0a098440 	call	a09844 <__multiply>
  a06448:	d9001617 	ldw	r4,88(sp)
  a0644c:	d9400717 	ldw	r5,28(sp)
  a06450:	1023883a 	mov	r17,r2
  a06454:	0a08db40 	call	a08db4 <_Bfree>
  a06458:	dc400715 	stw	r17,28(sp)
  a0645c:	d9001017 	ldw	r4,64(sp)
  a06460:	248dc83a 	sub	r6,r4,r18
  a06464:	30010e1e 	bne	r6,zero,a068a0 <_dtoa_r+0xc80>
  a06468:	d9001617 	ldw	r4,88(sp)
  a0646c:	04400044 	movi	r17,1
  a06470:	880b883a 	mov	r5,r17
  a06474:	0a09a2c0 	call	a09a2c <__i2b>
  a06478:	d9800917 	ldw	r6,36(sp)
  a0647c:	1025883a 	mov	r18,r2
  a06480:	0180040e 	bge	zero,r6,a06494 <_dtoa_r+0x874>
  a06484:	d9001617 	ldw	r4,88(sp)
  a06488:	100b883a 	mov	r5,r2
  a0648c:	0a09b680 	call	a09b68 <__pow5mult>
  a06490:	1025883a 	mov	r18,r2
  a06494:	d8801717 	ldw	r2,92(sp)
  a06498:	8880f30e 	bge	r17,r2,a06868 <_dtoa_r+0xc48>
  a0649c:	0023883a 	mov	r17,zero
  a064a0:	d9800917 	ldw	r6,36(sp)
  a064a4:	30019e1e 	bne	r6,zero,a06b20 <_dtoa_r+0xf00>
  a064a8:	00c00044 	movi	r3,1
  a064ac:	d9000a17 	ldw	r4,40(sp)
  a064b0:	20c5883a 	add	r2,r4,r3
  a064b4:	10c007cc 	andi	r3,r2,31
  a064b8:	1800841e 	bne	r3,zero,a066cc <_dtoa_r+0xaac>
  a064bc:	00800704 	movi	r2,28
  a064c0:	d9000a17 	ldw	r4,40(sp)
  a064c4:	d9801117 	ldw	r6,68(sp)
  a064c8:	80a1883a 	add	r16,r16,r2
  a064cc:	2089883a 	add	r4,r4,r2
  a064d0:	308d883a 	add	r6,r6,r2
  a064d4:	d9000a15 	stw	r4,40(sp)
  a064d8:	d9801115 	stw	r6,68(sp)
  a064dc:	d8801117 	ldw	r2,68(sp)
  a064e0:	0080050e 	bge	zero,r2,a064f8 <_dtoa_r+0x8d8>
  a064e4:	d9400717 	ldw	r5,28(sp)
  a064e8:	d9001617 	ldw	r4,88(sp)
  a064ec:	100d883a 	mov	r6,r2
  a064f0:	0a096f80 	call	a096f8 <__lshift>
  a064f4:	d8800715 	stw	r2,28(sp)
  a064f8:	d8c00a17 	ldw	r3,40(sp)
  a064fc:	00c0050e 	bge	zero,r3,a06514 <_dtoa_r+0x8f4>
  a06500:	d9001617 	ldw	r4,88(sp)
  a06504:	900b883a 	mov	r5,r18
  a06508:	180d883a 	mov	r6,r3
  a0650c:	0a096f80 	call	a096f8 <__lshift>
  a06510:	1025883a 	mov	r18,r2
  a06514:	d9000c17 	ldw	r4,48(sp)
  a06518:	2005003a 	cmpeq	r2,r4,zero
  a0651c:	10016f26 	beq	r2,zero,a06adc <_dtoa_r+0xebc>
  a06520:	d9000f17 	ldw	r4,60(sp)
  a06524:	0102170e 	bge	zero,r4,a06d84 <_dtoa_r+0x1164>
  a06528:	d9800b17 	ldw	r6,44(sp)
  a0652c:	3005003a 	cmpeq	r2,r6,zero
  a06530:	1000881e 	bne	r2,zero,a06754 <_dtoa_r+0xb34>
  a06534:	0400050e 	bge	zero,r16,a0654c <_dtoa_r+0x92c>
  a06538:	d9001617 	ldw	r4,88(sp)
  a0653c:	980b883a 	mov	r5,r19
  a06540:	800d883a 	mov	r6,r16
  a06544:	0a096f80 	call	a096f8 <__lshift>
  a06548:	1027883a 	mov	r19,r2
  a0654c:	8804c03a 	cmpne	r2,r17,zero
  a06550:	1002541e 	bne	r2,zero,a06ea4 <_dtoa_r+0x1284>
  a06554:	980b883a 	mov	r5,r19
  a06558:	dd800517 	ldw	r22,20(sp)
  a0655c:	dcc00615 	stw	r19,24(sp)
  a06560:	a700004c 	andi	fp,r20,1
  a06564:	2827883a 	mov	r19,r5
  a06568:	d9000717 	ldw	r4,28(sp)
  a0656c:	900b883a 	mov	r5,r18
  a06570:	0a05a080 	call	a05a08 <quorem>
  a06574:	d9000717 	ldw	r4,28(sp)
  a06578:	d9400617 	ldw	r5,24(sp)
  a0657c:	1023883a 	mov	r17,r2
  a06580:	8dc00c04 	addi	r23,r17,48
  a06584:	0a08f100 	call	a08f10 <__mcmp>
  a06588:	d9001617 	ldw	r4,88(sp)
  a0658c:	900b883a 	mov	r5,r18
  a06590:	980d883a 	mov	r6,r19
  a06594:	1029883a 	mov	r20,r2
  a06598:	0a0956c0 	call	a0956c <__mdiff>
  a0659c:	102b883a 	mov	r21,r2
  a065a0:	10800317 	ldw	r2,12(r2)
  a065a4:	1001281e 	bne	r2,zero,a06a48 <_dtoa_r+0xe28>
  a065a8:	d9000717 	ldw	r4,28(sp)
  a065ac:	a80b883a 	mov	r5,r21
  a065b0:	0a08f100 	call	a08f10 <__mcmp>
  a065b4:	d9001617 	ldw	r4,88(sp)
  a065b8:	1021883a 	mov	r16,r2
  a065bc:	a80b883a 	mov	r5,r21
  a065c0:	0a08db40 	call	a08db4 <_Bfree>
  a065c4:	8000041e 	bne	r16,zero,a065d8 <_dtoa_r+0x9b8>
  a065c8:	d8801717 	ldw	r2,92(sp)
  a065cc:	1000021e 	bne	r2,zero,a065d8 <_dtoa_r+0x9b8>
  a065d0:	e004c03a 	cmpne	r2,fp,zero
  a065d4:	10011726 	beq	r2,zero,a06a34 <_dtoa_r+0xe14>
  a065d8:	a0010616 	blt	r20,zero,a069f4 <_dtoa_r+0xdd4>
  a065dc:	a000041e 	bne	r20,zero,a065f0 <_dtoa_r+0x9d0>
  a065e0:	d8c01717 	ldw	r3,92(sp)
  a065e4:	1800021e 	bne	r3,zero,a065f0 <_dtoa_r+0x9d0>
  a065e8:	e004c03a 	cmpne	r2,fp,zero
  a065ec:	10010126 	beq	r2,zero,a069f4 <_dtoa_r+0xdd4>
  a065f0:	04023d16 	blt	zero,r16,a06ee8 <_dtoa_r+0x12c8>
  a065f4:	b5c00005 	stb	r23,0(r22)
  a065f8:	d9800517 	ldw	r6,20(sp)
  a065fc:	d9000f17 	ldw	r4,60(sp)
  a06600:	b5800044 	addi	r22,r22,1
  a06604:	3105883a 	add	r2,r6,r4
  a06608:	b0806526 	beq	r22,r2,a067a0 <_dtoa_r+0xb80>
  a0660c:	d9400717 	ldw	r5,28(sp)
  a06610:	d9001617 	ldw	r4,88(sp)
  a06614:	01800284 	movi	r6,10
  a06618:	000f883a 	mov	r7,zero
  a0661c:	0a09a680 	call	a09a68 <__multadd>
  a06620:	d8800715 	stw	r2,28(sp)
  a06624:	d8800617 	ldw	r2,24(sp)
  a06628:	14c10c26 	beq	r2,r19,a06a5c <_dtoa_r+0xe3c>
  a0662c:	d9400617 	ldw	r5,24(sp)
  a06630:	d9001617 	ldw	r4,88(sp)
  a06634:	01800284 	movi	r6,10
  a06638:	000f883a 	mov	r7,zero
  a0663c:	0a09a680 	call	a09a68 <__multadd>
  a06640:	d9001617 	ldw	r4,88(sp)
  a06644:	980b883a 	mov	r5,r19
  a06648:	01800284 	movi	r6,10
  a0664c:	000f883a 	mov	r7,zero
  a06650:	d8800615 	stw	r2,24(sp)
  a06654:	0a09a680 	call	a09a68 <__multadd>
  a06658:	1027883a 	mov	r19,r2
  a0665c:	003fc206 	br	a06568 <_dtoa_r+0x948>
  a06660:	2445c83a 	sub	r2,r4,r17
  a06664:	a088983a 	sll	r4,r20,r2
  a06668:	003e4b06 	br	a05f98 <_dtoa_r+0x378>
  a0666c:	01bfffc4 	movi	r6,-1
  a06670:	00800044 	movi	r2,1
  a06674:	d9800e15 	stw	r6,56(sp)
  a06678:	d9800f15 	stw	r6,60(sp)
  a0667c:	d8800b15 	stw	r2,44(sp)
  a06680:	d8c01617 	ldw	r3,88(sp)
  a06684:	008005c4 	movi	r2,23
  a06688:	18001115 	stw	zero,68(r3)
  a0668c:	1580082e 	bgeu	r2,r22,a066b0 <_dtoa_r+0xa90>
  a06690:	00c00104 	movi	r3,4
  a06694:	0009883a 	mov	r4,zero
  a06698:	18c7883a 	add	r3,r3,r3
  a0669c:	18800504 	addi	r2,r3,20
  a066a0:	21000044 	addi	r4,r4,1
  a066a4:	b0bffc2e 	bgeu	r22,r2,a06698 <_dtoa_r+0xa78>
  a066a8:	d9801617 	ldw	r6,88(sp)
  a066ac:	31001115 	stw	r4,68(r6)
  a066b0:	dc000f17 	ldw	r16,60(sp)
  a066b4:	003e4b06 	br	a05fe4 <_dtoa_r+0x3c4>
  a066b8:	d9801717 	ldw	r6,92(sp)
  a066bc:	0023883a 	mov	r17,zero
  a066c0:	31bfff04 	addi	r6,r6,-4
  a066c4:	d9801715 	stw	r6,92(sp)
  a066c8:	003df806 	br	a05eac <_dtoa_r+0x28c>
  a066cc:	00800804 	movi	r2,32
  a066d0:	10c9c83a 	sub	r4,r2,r3
  a066d4:	00c00104 	movi	r3,4
  a066d8:	19005a16 	blt	r3,r4,a06844 <_dtoa_r+0xc24>
  a066dc:	008000c4 	movi	r2,3
  a066e0:	113f7e16 	blt	r2,r4,a064dc <_dtoa_r+0x8bc>
  a066e4:	20800704 	addi	r2,r4,28
  a066e8:	003f7506 	br	a064c0 <_dtoa_r+0x8a0>
  a066ec:	d9801717 	ldw	r6,92(sp)
  a066f0:	00800044 	movi	r2,1
  a066f4:	1180a10e 	bge	r2,r6,a0697c <_dtoa_r+0xd5c>
  a066f8:	d9800f17 	ldw	r6,60(sp)
  a066fc:	d8c01017 	ldw	r3,64(sp)
  a06700:	30bfffc4 	addi	r2,r6,-1
  a06704:	1881c616 	blt	r3,r2,a06e20 <_dtoa_r+0x1200>
  a06708:	18a5c83a 	sub	r18,r3,r2
  a0670c:	d8800f17 	ldw	r2,60(sp)
  a06710:	10026216 	blt	r2,zero,a0709c <_dtoa_r+0x147c>
  a06714:	dc001117 	ldw	r16,68(sp)
  a06718:	1007883a 	mov	r3,r2
  a0671c:	d9800a17 	ldw	r6,40(sp)
  a06720:	d8801117 	ldw	r2,68(sp)
  a06724:	d9001617 	ldw	r4,88(sp)
  a06728:	30cd883a 	add	r6,r6,r3
  a0672c:	10c5883a 	add	r2,r2,r3
  a06730:	01400044 	movi	r5,1
  a06734:	d9800a15 	stw	r6,40(sp)
  a06738:	d8801115 	stw	r2,68(sp)
  a0673c:	0a09a2c0 	call	a09a2c <__i2b>
  a06740:	1027883a 	mov	r19,r2
  a06744:	003f2506 	br	a063dc <_dtoa_r+0x7bc>
  a06748:	00c02874 	movhi	r3,161
  a0674c:	18c2c504 	addi	r3,r3,2836
  a06750:	003d6706 	br	a05cf0 <_dtoa_r+0xd0>
  a06754:	dd800517 	ldw	r22,20(sp)
  a06758:	04000044 	movi	r16,1
  a0675c:	00000706 	br	a0677c <_dtoa_r+0xb5c>
  a06760:	d9400717 	ldw	r5,28(sp)
  a06764:	d9001617 	ldw	r4,88(sp)
  a06768:	01800284 	movi	r6,10
  a0676c:	000f883a 	mov	r7,zero
  a06770:	0a09a680 	call	a09a68 <__multadd>
  a06774:	d8800715 	stw	r2,28(sp)
  a06778:	84000044 	addi	r16,r16,1
  a0677c:	d9000717 	ldw	r4,28(sp)
  a06780:	900b883a 	mov	r5,r18
  a06784:	0a05a080 	call	a05a08 <quorem>
  a06788:	15c00c04 	addi	r23,r2,48
  a0678c:	b5c00005 	stb	r23,0(r22)
  a06790:	d8c00f17 	ldw	r3,60(sp)
  a06794:	b5800044 	addi	r22,r22,1
  a06798:	80fff116 	blt	r16,r3,a06760 <_dtoa_r+0xb40>
  a0679c:	d8000615 	stw	zero,24(sp)
  a067a0:	d9400717 	ldw	r5,28(sp)
  a067a4:	d9001617 	ldw	r4,88(sp)
  a067a8:	01800044 	movi	r6,1
  a067ac:	0a096f80 	call	a096f8 <__lshift>
  a067b0:	1009883a 	mov	r4,r2
  a067b4:	900b883a 	mov	r5,r18
  a067b8:	d8800715 	stw	r2,28(sp)
  a067bc:	0a08f100 	call	a08f10 <__mcmp>
  a067c0:	00803c0e 	bge	zero,r2,a068b4 <_dtoa_r+0xc94>
  a067c4:	b009883a 	mov	r4,r22
  a067c8:	213fffc4 	addi	r4,r4,-1
  a067cc:	21400003 	ldbu	r5,0(r4)
  a067d0:	00800e44 	movi	r2,57
  a067d4:	28c03fcc 	andi	r3,r5,255
  a067d8:	18c0201c 	xori	r3,r3,128
  a067dc:	18ffe004 	addi	r3,r3,-128
  a067e0:	1881981e 	bne	r3,r2,a06e44 <_dtoa_r+0x1224>
  a067e4:	d9800517 	ldw	r6,20(sp)
  a067e8:	21bff71e 	bne	r4,r6,a067c8 <_dtoa_r+0xba8>
  a067ec:	d8800d17 	ldw	r2,52(sp)
  a067f0:	37000044 	addi	fp,r6,1
  a067f4:	10800044 	addi	r2,r2,1
  a067f8:	d8800d15 	stw	r2,52(sp)
  a067fc:	00800c44 	movi	r2,49
  a06800:	30800005 	stb	r2,0(r6)
  a06804:	d9001617 	ldw	r4,88(sp)
  a06808:	900b883a 	mov	r5,r18
  a0680c:	0a08db40 	call	a08db4 <_Bfree>
  a06810:	983ecd26 	beq	r19,zero,a06348 <_dtoa_r+0x728>
  a06814:	d8c00617 	ldw	r3,24(sp)
  a06818:	18000426 	beq	r3,zero,a0682c <_dtoa_r+0xc0c>
  a0681c:	1cc00326 	beq	r3,r19,a0682c <_dtoa_r+0xc0c>
  a06820:	d9001617 	ldw	r4,88(sp)
  a06824:	180b883a 	mov	r5,r3
  a06828:	0a08db40 	call	a08db4 <_Bfree>
  a0682c:	d9001617 	ldw	r4,88(sp)
  a06830:	980b883a 	mov	r5,r19
  a06834:	0a08db40 	call	a08db4 <_Bfree>
  a06838:	003ec306 	br	a06348 <_dtoa_r+0x728>
  a0683c:	1805883a 	mov	r2,r3
  a06840:	003eeb06 	br	a063f0 <_dtoa_r+0x7d0>
  a06844:	d9800a17 	ldw	r6,40(sp)
  a06848:	d8c01117 	ldw	r3,68(sp)
  a0684c:	20bfff04 	addi	r2,r4,-4
  a06850:	308d883a 	add	r6,r6,r2
  a06854:	1887883a 	add	r3,r3,r2
  a06858:	80a1883a 	add	r16,r16,r2
  a0685c:	d9800a15 	stw	r6,40(sp)
  a06860:	d8c01115 	stw	r3,68(sp)
  a06864:	003f1d06 	br	a064dc <_dtoa_r+0x8bc>
  a06868:	a03f0c1e 	bne	r20,zero,a0649c <_dtoa_r+0x87c>
  a0686c:	00800434 	movhi	r2,16
  a06870:	10bfffc4 	addi	r2,r2,-1
  a06874:	a884703a 	and	r2,r21,r2
  a06878:	103f081e 	bne	r2,zero,a0649c <_dtoa_r+0x87c>
  a0687c:	a89ffc2c 	andhi	r2,r21,32752
  a06880:	103f0626 	beq	r2,zero,a0649c <_dtoa_r+0x87c>
  a06884:	d8c01117 	ldw	r3,68(sp)
  a06888:	d9000a17 	ldw	r4,40(sp)
  a0688c:	18c00044 	addi	r3,r3,1
  a06890:	21000044 	addi	r4,r4,1
  a06894:	d8c01115 	stw	r3,68(sp)
  a06898:	d9000a15 	stw	r4,40(sp)
  a0689c:	003f0006 	br	a064a0 <_dtoa_r+0x880>
  a068a0:	d9400717 	ldw	r5,28(sp)
  a068a4:	d9001617 	ldw	r4,88(sp)
  a068a8:	0a09b680 	call	a09b68 <__pow5mult>
  a068ac:	d8800715 	stw	r2,28(sp)
  a068b0:	003eed06 	br	a06468 <_dtoa_r+0x848>
  a068b4:	1000021e 	bne	r2,zero,a068c0 <_dtoa_r+0xca0>
  a068b8:	b880004c 	andi	r2,r23,1
  a068bc:	103fc11e 	bne	r2,zero,a067c4 <_dtoa_r+0xba4>
  a068c0:	b5bfffc4 	addi	r22,r22,-1
  a068c4:	b0c00007 	ldb	r3,0(r22)
  a068c8:	00800c04 	movi	r2,48
  a068cc:	18bffc26 	beq	r3,r2,a068c0 <_dtoa_r+0xca0>
  a068d0:	b7000044 	addi	fp,r22,1
  a068d4:	003fcb06 	br	a06804 <_dtoa_r+0xbe4>
  a068d8:	d9800d17 	ldw	r6,52(sp)
  a068dc:	018fc83a 	sub	r7,zero,r6
  a068e0:	3801f726 	beq	r7,zero,a070c0 <_dtoa_r+0x14a0>
  a068e4:	398003cc 	andi	r6,r7,15
  a068e8:	300c90fa 	slli	r6,r6,3
  a068ec:	01402874 	movhi	r5,161
  a068f0:	29435204 	addi	r5,r5,3400
  a068f4:	d9001217 	ldw	r4,72(sp)
  a068f8:	314d883a 	add	r6,r6,r5
  a068fc:	30c00117 	ldw	r3,4(r6)
  a06900:	30800017 	ldw	r2,0(r6)
  a06904:	d9401317 	ldw	r5,76(sp)
  a06908:	3821d13a 	srai	r16,r7,4
  a0690c:	100d883a 	mov	r6,r2
  a06910:	180f883a 	mov	r7,r3
  a06914:	0a0b6a40 	call	a0b6a4 <__muldf3>
  a06918:	1011883a 	mov	r8,r2
  a0691c:	1813883a 	mov	r9,r3
  a06920:	1029883a 	mov	r20,r2
  a06924:	182b883a 	mov	r21,r3
  a06928:	8001e526 	beq	r16,zero,a070c0 <_dtoa_r+0x14a0>
  a0692c:	05800084 	movi	r22,2
  a06930:	04402874 	movhi	r17,161
  a06934:	8c438404 	addi	r17,r17,3600
  a06938:	8080004c 	andi	r2,r16,1
  a0693c:	1005003a 	cmpeq	r2,r2,zero
  a06940:	1000081e 	bne	r2,zero,a06964 <_dtoa_r+0xd44>
  a06944:	89800017 	ldw	r6,0(r17)
  a06948:	89c00117 	ldw	r7,4(r17)
  a0694c:	480b883a 	mov	r5,r9
  a06950:	4009883a 	mov	r4,r8
  a06954:	0a0b6a40 	call	a0b6a4 <__muldf3>
  a06958:	1011883a 	mov	r8,r2
  a0695c:	b5800044 	addi	r22,r22,1
  a06960:	1813883a 	mov	r9,r3
  a06964:	8021d07a 	srai	r16,r16,1
  a06968:	8c400204 	addi	r17,r17,8
  a0696c:	803ff21e 	bne	r16,zero,a06938 <_dtoa_r+0xd18>
  a06970:	4029883a 	mov	r20,r8
  a06974:	482b883a 	mov	r21,r9
  a06978:	003dca06 	br	a060a4 <_dtoa_r+0x484>
  a0697c:	d9000817 	ldw	r4,32(sp)
  a06980:	2005003a 	cmpeq	r2,r4,zero
  a06984:	1001f61e 	bne	r2,zero,a07160 <_dtoa_r+0x1540>
  a06988:	dc001117 	ldw	r16,68(sp)
  a0698c:	dc801017 	ldw	r18,64(sp)
  a06990:	18c10cc4 	addi	r3,r3,1075
  a06994:	003f6106 	br	a0671c <_dtoa_r+0xafc>
  a06998:	d8000b15 	stw	zero,44(sp)
  a0699c:	d9802617 	ldw	r6,152(sp)
  a069a0:	d8c00d17 	ldw	r3,52(sp)
  a069a4:	30800044 	addi	r2,r6,1
  a069a8:	18ad883a 	add	r22,r3,r2
  a069ac:	b13fffc4 	addi	r4,r22,-1
  a069b0:	d9000e15 	stw	r4,56(sp)
  a069b4:	0581f60e 	bge	zero,r22,a07190 <_dtoa_r+0x1570>
  a069b8:	dd800f15 	stw	r22,60(sp)
  a069bc:	003f3006 	br	a06680 <_dtoa_r+0xa60>
  a069c0:	d8000b15 	stw	zero,44(sp)
  a069c4:	d9002617 	ldw	r4,152(sp)
  a069c8:	0101eb0e 	bge	zero,r4,a07178 <_dtoa_r+0x1558>
  a069cc:	202d883a 	mov	r22,r4
  a069d0:	d9000e15 	stw	r4,56(sp)
  a069d4:	d9000f15 	stw	r4,60(sp)
  a069d8:	003f2906 	br	a06680 <_dtoa_r+0xa60>
  a069dc:	01800044 	movi	r6,1
  a069e0:	d9800b15 	stw	r6,44(sp)
  a069e4:	003ff706 	br	a069c4 <_dtoa_r+0xda4>
  a069e8:	01000044 	movi	r4,1
  a069ec:	d9000b15 	stw	r4,44(sp)
  a069f0:	003fea06 	br	a0699c <_dtoa_r+0xd7c>
  a069f4:	04000c0e 	bge	zero,r16,a06a28 <_dtoa_r+0xe08>
  a069f8:	d9400717 	ldw	r5,28(sp)
  a069fc:	d9001617 	ldw	r4,88(sp)
  a06a00:	01800044 	movi	r6,1
  a06a04:	0a096f80 	call	a096f8 <__lshift>
  a06a08:	1009883a 	mov	r4,r2
  a06a0c:	900b883a 	mov	r5,r18
  a06a10:	d8800715 	stw	r2,28(sp)
  a06a14:	0a08f100 	call	a08f10 <__mcmp>
  a06a18:	0081e00e 	bge	zero,r2,a0719c <_dtoa_r+0x157c>
  a06a1c:	bdc00044 	addi	r23,r23,1
  a06a20:	00800e84 	movi	r2,58
  a06a24:	b881a226 	beq	r23,r2,a070b0 <_dtoa_r+0x1490>
  a06a28:	b7000044 	addi	fp,r22,1
  a06a2c:	b5c00005 	stb	r23,0(r22)
  a06a30:	003f7406 	br	a06804 <_dtoa_r+0xbe4>
  a06a34:	00800e44 	movi	r2,57
  a06a38:	b8819d26 	beq	r23,r2,a070b0 <_dtoa_r+0x1490>
  a06a3c:	053ffa0e 	bge	zero,r20,a06a28 <_dtoa_r+0xe08>
  a06a40:	8dc00c44 	addi	r23,r17,49
  a06a44:	003ff806 	br	a06a28 <_dtoa_r+0xe08>
  a06a48:	d9001617 	ldw	r4,88(sp)
  a06a4c:	a80b883a 	mov	r5,r21
  a06a50:	04000044 	movi	r16,1
  a06a54:	0a08db40 	call	a08db4 <_Bfree>
  a06a58:	003edf06 	br	a065d8 <_dtoa_r+0x9b8>
  a06a5c:	d9001617 	ldw	r4,88(sp)
  a06a60:	980b883a 	mov	r5,r19
  a06a64:	01800284 	movi	r6,10
  a06a68:	000f883a 	mov	r7,zero
  a06a6c:	0a09a680 	call	a09a68 <__multadd>
  a06a70:	1027883a 	mov	r19,r2
  a06a74:	d8800615 	stw	r2,24(sp)
  a06a78:	003ebb06 	br	a06568 <_dtoa_r+0x948>
  a06a7c:	d9801117 	ldw	r6,68(sp)
  a06a80:	d8800d17 	ldw	r2,52(sp)
  a06a84:	d8000915 	stw	zero,36(sp)
  a06a88:	308dc83a 	sub	r6,r6,r2
  a06a8c:	0087c83a 	sub	r3,zero,r2
  a06a90:	d9801115 	stw	r6,68(sp)
  a06a94:	d8c01015 	stw	r3,64(sp)
  a06a98:	003cfe06 	br	a05e94 <_dtoa_r+0x274>
  a06a9c:	018dc83a 	sub	r6,zero,r6
  a06aa0:	d9801115 	stw	r6,68(sp)
  a06aa4:	d8000a15 	stw	zero,40(sp)
  a06aa8:	003cf306 	br	a05e78 <_dtoa_r+0x258>
  a06aac:	d9000d17 	ldw	r4,52(sp)
  a06ab0:	0a0bc880 	call	a0bc88 <__floatsidf>
  a06ab4:	880b883a 	mov	r5,r17
  a06ab8:	8009883a 	mov	r4,r16
  a06abc:	180f883a 	mov	r7,r3
  a06ac0:	100d883a 	mov	r6,r2
  a06ac4:	0a02cc40 	call	a02cc4 <__nedf2>
  a06ac8:	103ce126 	beq	r2,zero,a05e50 <_dtoa_r+0x230>
  a06acc:	d9800d17 	ldw	r6,52(sp)
  a06ad0:	31bfffc4 	addi	r6,r6,-1
  a06ad4:	d9800d15 	stw	r6,52(sp)
  a06ad8:	003cdd06 	br	a05e50 <_dtoa_r+0x230>
  a06adc:	d9000717 	ldw	r4,28(sp)
  a06ae0:	900b883a 	mov	r5,r18
  a06ae4:	0a08f100 	call	a08f10 <__mcmp>
  a06ae8:	103e8d0e 	bge	r2,zero,a06520 <_dtoa_r+0x900>
  a06aec:	d9400717 	ldw	r5,28(sp)
  a06af0:	d9001617 	ldw	r4,88(sp)
  a06af4:	01800284 	movi	r6,10
  a06af8:	000f883a 	mov	r7,zero
  a06afc:	0a09a680 	call	a09a68 <__multadd>
  a06b00:	d9800d17 	ldw	r6,52(sp)
  a06b04:	d8800715 	stw	r2,28(sp)
  a06b08:	31bfffc4 	addi	r6,r6,-1
  a06b0c:	d9800d15 	stw	r6,52(sp)
  a06b10:	b001a71e 	bne	r22,zero,a071b0 <_dtoa_r+0x1590>
  a06b14:	d8800e17 	ldw	r2,56(sp)
  a06b18:	d8800f15 	stw	r2,60(sp)
  a06b1c:	003e8006 	br	a06520 <_dtoa_r+0x900>
  a06b20:	90800417 	ldw	r2,16(r18)
  a06b24:	1085883a 	add	r2,r2,r2
  a06b28:	1085883a 	add	r2,r2,r2
  a06b2c:	1485883a 	add	r2,r2,r18
  a06b30:	11000417 	ldw	r4,16(r2)
  a06b34:	0a08ddc0 	call	a08ddc <__hi0bits>
  a06b38:	00c00804 	movi	r3,32
  a06b3c:	1887c83a 	sub	r3,r3,r2
  a06b40:	003e5a06 	br	a064ac <_dtoa_r+0x88c>
  a06b44:	d9400717 	ldw	r5,28(sp)
  a06b48:	d9801017 	ldw	r6,64(sp)
  a06b4c:	d9001617 	ldw	r4,88(sp)
  a06b50:	0a09b680 	call	a09b68 <__pow5mult>
  a06b54:	d8800715 	stw	r2,28(sp)
  a06b58:	003e4306 	br	a06468 <_dtoa_r+0x848>
  a06b5c:	d9800f17 	ldw	r6,60(sp)
  a06b60:	d8800d17 	ldw	r2,52(sp)
  a06b64:	d9800315 	stw	r6,12(sp)
  a06b68:	d8800415 	stw	r2,16(sp)
  a06b6c:	d8c00b17 	ldw	r3,44(sp)
  a06b70:	1805003a 	cmpeq	r2,r3,zero
  a06b74:	1000e21e 	bne	r2,zero,a06f00 <_dtoa_r+0x12e0>
  a06b78:	d9000317 	ldw	r4,12(sp)
  a06b7c:	0005883a 	mov	r2,zero
  a06b80:	00cff834 	movhi	r3,16352
  a06b84:	200c90fa 	slli	r6,r4,3
  a06b88:	01002874 	movhi	r4,161
  a06b8c:	21035204 	addi	r4,r4,3400
  a06b90:	180b883a 	mov	r5,r3
  a06b94:	310d883a 	add	r6,r6,r4
  a06b98:	327fff17 	ldw	r9,-4(r6)
  a06b9c:	323ffe17 	ldw	r8,-8(r6)
  a06ba0:	1009883a 	mov	r4,r2
  a06ba4:	480f883a 	mov	r7,r9
  a06ba8:	400d883a 	mov	r6,r8
  a06bac:	0a02a6c0 	call	a02a6c <__divdf3>
  a06bb0:	180b883a 	mov	r5,r3
  a06bb4:	b00d883a 	mov	r6,r22
  a06bb8:	b80f883a 	mov	r7,r23
  a06bbc:	1009883a 	mov	r4,r2
  a06bc0:	0a029780 	call	a02978 <__subdf3>
  a06bc4:	a80b883a 	mov	r5,r21
  a06bc8:	a009883a 	mov	r4,r20
  a06bcc:	d8c01915 	stw	r3,100(sp)
  a06bd0:	d8801815 	stw	r2,96(sp)
  a06bd4:	0a0bd800 	call	a0bd80 <__fixdfsi>
  a06bd8:	1009883a 	mov	r4,r2
  a06bdc:	1027883a 	mov	r19,r2
  a06be0:	0a0bc880 	call	a0bc88 <__floatsidf>
  a06be4:	a80b883a 	mov	r5,r21
  a06be8:	a009883a 	mov	r4,r20
  a06bec:	180f883a 	mov	r7,r3
  a06bf0:	100d883a 	mov	r6,r2
  a06bf4:	0a029780 	call	a02978 <__subdf3>
  a06bf8:	d9801817 	ldw	r6,96(sp)
  a06bfc:	1823883a 	mov	r17,r3
  a06c00:	d8801415 	stw	r2,80(sp)
  a06c04:	302d883a 	mov	r22,r6
  a06c08:	d9800517 	ldw	r6,20(sp)
  a06c0c:	9cc00c04 	addi	r19,r19,48
  a06c10:	dc401515 	stw	r17,84(sp)
  a06c14:	d8c01917 	ldw	r3,100(sp)
  a06c18:	34c00005 	stb	r19,0(r6)
  a06c1c:	d8800517 	ldw	r2,20(sp)
  a06c20:	d9401917 	ldw	r5,100(sp)
  a06c24:	d9801417 	ldw	r6,80(sp)
  a06c28:	b009883a 	mov	r4,r22
  a06c2c:	880f883a 	mov	r7,r17
  a06c30:	182f883a 	mov	r23,r3
  a06c34:	17000044 	addi	fp,r2,1
  a06c38:	0a0baf00 	call	a0baf0 <__gtdf2>
  a06c3c:	00804e16 	blt	zero,r2,a06d78 <_dtoa_r+0x1158>
  a06c40:	d9801417 	ldw	r6,80(sp)
  a06c44:	0005883a 	mov	r2,zero
  a06c48:	00cffc34 	movhi	r3,16368
  a06c4c:	180b883a 	mov	r5,r3
  a06c50:	880f883a 	mov	r7,r17
  a06c54:	1009883a 	mov	r4,r2
  a06c58:	0a029780 	call	a02978 <__subdf3>
  a06c5c:	d9401917 	ldw	r5,100(sp)
  a06c60:	180f883a 	mov	r7,r3
  a06c64:	b009883a 	mov	r4,r22
  a06c68:	100d883a 	mov	r6,r2
  a06c6c:	0a0baf00 	call	a0baf0 <__gtdf2>
  a06c70:	00bda216 	blt	zero,r2,a062fc <_dtoa_r+0x6dc>
  a06c74:	d8c00317 	ldw	r3,12(sp)
  a06c78:	00800044 	movi	r2,1
  a06c7c:	10c01216 	blt	r2,r3,a06cc8 <_dtoa_r+0x10a8>
  a06c80:	003d4506 	br	a06198 <_dtoa_r+0x578>
  a06c84:	d9801417 	ldw	r6,80(sp)
  a06c88:	0005883a 	mov	r2,zero
  a06c8c:	00cffc34 	movhi	r3,16368
  a06c90:	180b883a 	mov	r5,r3
  a06c94:	880f883a 	mov	r7,r17
  a06c98:	1009883a 	mov	r4,r2
  a06c9c:	0a029780 	call	a02978 <__subdf3>
  a06ca0:	d9c01b17 	ldw	r7,108(sp)
  a06ca4:	180b883a 	mov	r5,r3
  a06ca8:	1009883a 	mov	r4,r2
  a06cac:	b00d883a 	mov	r6,r22
  a06cb0:	0a0bc000 	call	a0bc00 <__ltdf2>
  a06cb4:	103d9116 	blt	r2,zero,a062fc <_dtoa_r+0x6dc>
  a06cb8:	d9800517 	ldw	r6,20(sp)
  a06cbc:	d9000317 	ldw	r4,12(sp)
  a06cc0:	3105883a 	add	r2,r6,r4
  a06cc4:	e0bd3426 	beq	fp,r2,a06198 <_dtoa_r+0x578>
  a06cc8:	04500934 	movhi	r17,16420
  a06ccc:	0021883a 	mov	r16,zero
  a06cd0:	b80b883a 	mov	r5,r23
  a06cd4:	b009883a 	mov	r4,r22
  a06cd8:	800d883a 	mov	r6,r16
  a06cdc:	880f883a 	mov	r7,r17
  a06ce0:	0a0b6a40 	call	a0b6a4 <__muldf3>
  a06ce4:	d9401517 	ldw	r5,84(sp)
  a06ce8:	d9001417 	ldw	r4,80(sp)
  a06cec:	880f883a 	mov	r7,r17
  a06cf0:	000d883a 	mov	r6,zero
  a06cf4:	d8801a15 	stw	r2,104(sp)
  a06cf8:	d8c01b15 	stw	r3,108(sp)
  a06cfc:	0a0b6a40 	call	a0b6a4 <__muldf3>
  a06d00:	180b883a 	mov	r5,r3
  a06d04:	1009883a 	mov	r4,r2
  a06d08:	1823883a 	mov	r17,r3
  a06d0c:	1021883a 	mov	r16,r2
  a06d10:	0a0bd800 	call	a0bd80 <__fixdfsi>
  a06d14:	1009883a 	mov	r4,r2
  a06d18:	102b883a 	mov	r21,r2
  a06d1c:	0a0bc880 	call	a0bc88 <__floatsidf>
  a06d20:	880b883a 	mov	r5,r17
  a06d24:	8009883a 	mov	r4,r16
  a06d28:	180f883a 	mov	r7,r3
  a06d2c:	100d883a 	mov	r6,r2
  a06d30:	0a029780 	call	a02978 <__subdf3>
  a06d34:	1021883a 	mov	r16,r2
  a06d38:	d9001b17 	ldw	r4,108(sp)
  a06d3c:	1823883a 	mov	r17,r3
  a06d40:	dc001415 	stw	r16,80(sp)
  a06d44:	ad400c04 	addi	r21,r21,48
  a06d48:	dc401515 	stw	r17,84(sp)
  a06d4c:	d8801a17 	ldw	r2,104(sp)
  a06d50:	e5400005 	stb	r21,0(fp)
  a06d54:	202f883a 	mov	r23,r4
  a06d58:	d9c01b17 	ldw	r7,108(sp)
  a06d5c:	d9001417 	ldw	r4,80(sp)
  a06d60:	880b883a 	mov	r5,r17
  a06d64:	100d883a 	mov	r6,r2
  a06d68:	102d883a 	mov	r22,r2
  a06d6c:	e7000044 	addi	fp,fp,1
  a06d70:	0a0bc000 	call	a0bc00 <__ltdf2>
  a06d74:	103fc30e 	bge	r2,zero,a06c84 <_dtoa_r+0x1064>
  a06d78:	d9000417 	ldw	r4,16(sp)
  a06d7c:	d9000d15 	stw	r4,52(sp)
  a06d80:	003d7106 	br	a06348 <_dtoa_r+0x728>
  a06d84:	d9801717 	ldw	r6,92(sp)
  a06d88:	00800084 	movi	r2,2
  a06d8c:	11bde60e 	bge	r2,r6,a06528 <_dtoa_r+0x908>
  a06d90:	203cfb1e 	bne	r4,zero,a06180 <_dtoa_r+0x560>
  a06d94:	d9001617 	ldw	r4,88(sp)
  a06d98:	900b883a 	mov	r5,r18
  a06d9c:	01800144 	movi	r6,5
  a06da0:	000f883a 	mov	r7,zero
  a06da4:	0a09a680 	call	a09a68 <__multadd>
  a06da8:	d9000717 	ldw	r4,28(sp)
  a06dac:	100b883a 	mov	r5,r2
  a06db0:	1025883a 	mov	r18,r2
  a06db4:	0a08f100 	call	a08f10 <__mcmp>
  a06db8:	00bcf10e 	bge	zero,r2,a06180 <_dtoa_r+0x560>
  a06dbc:	d8c00d17 	ldw	r3,52(sp)
  a06dc0:	d9000517 	ldw	r4,20(sp)
  a06dc4:	d8000615 	stw	zero,24(sp)
  a06dc8:	18c00044 	addi	r3,r3,1
  a06dcc:	d8c00d15 	stw	r3,52(sp)
  a06dd0:	00800c44 	movi	r2,49
  a06dd4:	27000044 	addi	fp,r4,1
  a06dd8:	20800005 	stb	r2,0(r4)
  a06ddc:	003e8906 	br	a06804 <_dtoa_r+0xbe4>
  a06de0:	d8c00517 	ldw	r3,20(sp)
  a06de4:	003bc206 	br	a05cf0 <_dtoa_r+0xd0>
  a06de8:	01802874 	movhi	r6,161
  a06dec:	31838404 	addi	r6,r6,3600
  a06df0:	30c00917 	ldw	r3,36(r6)
  a06df4:	30800817 	ldw	r2,32(r6)
  a06df8:	d9001217 	ldw	r4,72(sp)
  a06dfc:	d9401317 	ldw	r5,76(sp)
  a06e00:	180f883a 	mov	r7,r3
  a06e04:	100d883a 	mov	r6,r2
  a06e08:	0a02a6c0 	call	a02a6c <__divdf3>
  a06e0c:	948003cc 	andi	r18,r18,15
  a06e10:	058000c4 	movi	r22,3
  a06e14:	1029883a 	mov	r20,r2
  a06e18:	182b883a 	mov	r21,r3
  a06e1c:	003c8906 	br	a06044 <_dtoa_r+0x424>
  a06e20:	d9001017 	ldw	r4,64(sp)
  a06e24:	d9800917 	ldw	r6,36(sp)
  a06e28:	0025883a 	mov	r18,zero
  a06e2c:	1105c83a 	sub	r2,r2,r4
  a06e30:	2089883a 	add	r4,r4,r2
  a06e34:	308d883a 	add	r6,r6,r2
  a06e38:	d9001015 	stw	r4,64(sp)
  a06e3c:	d9800915 	stw	r6,36(sp)
  a06e40:	003e3206 	br	a0670c <_dtoa_r+0xaec>
  a06e44:	28800044 	addi	r2,r5,1
  a06e48:	27000044 	addi	fp,r4,1
  a06e4c:	20800005 	stb	r2,0(r4)
  a06e50:	003e6c06 	br	a06804 <_dtoa_r+0xbe4>
  a06e54:	d8800f17 	ldw	r2,60(sp)
  a06e58:	00bce016 	blt	zero,r2,a061dc <_dtoa_r+0x5bc>
  a06e5c:	d9800f17 	ldw	r6,60(sp)
  a06e60:	303cc51e 	bne	r6,zero,a06178 <_dtoa_r+0x558>
  a06e64:	0005883a 	mov	r2,zero
  a06e68:	00d00534 	movhi	r3,16404
  a06e6c:	980b883a 	mov	r5,r19
  a06e70:	180f883a 	mov	r7,r3
  a06e74:	9009883a 	mov	r4,r18
  a06e78:	100d883a 	mov	r6,r2
  a06e7c:	0a0b6a40 	call	a0b6a4 <__muldf3>
  a06e80:	180b883a 	mov	r5,r3
  a06e84:	a80f883a 	mov	r7,r21
  a06e88:	1009883a 	mov	r4,r2
  a06e8c:	a00d883a 	mov	r6,r20
  a06e90:	0a0bb780 	call	a0bb78 <__gedf2>
  a06e94:	103cb80e 	bge	r2,zero,a06178 <_dtoa_r+0x558>
  a06e98:	0027883a 	mov	r19,zero
  a06e9c:	0025883a 	mov	r18,zero
  a06ea0:	003fc606 	br	a06dbc <_dtoa_r+0x119c>
  a06ea4:	99400117 	ldw	r5,4(r19)
  a06ea8:	d9001617 	ldw	r4,88(sp)
  a06eac:	0a093340 	call	a09334 <_Balloc>
  a06eb0:	99800417 	ldw	r6,16(r19)
  a06eb4:	11000304 	addi	r4,r2,12
  a06eb8:	99400304 	addi	r5,r19,12
  a06ebc:	318d883a 	add	r6,r6,r6
  a06ec0:	318d883a 	add	r6,r6,r6
  a06ec4:	31800204 	addi	r6,r6,8
  a06ec8:	1023883a 	mov	r17,r2
  a06ecc:	0a08b9c0 	call	a08b9c <memcpy>
  a06ed0:	d9001617 	ldw	r4,88(sp)
  a06ed4:	880b883a 	mov	r5,r17
  a06ed8:	01800044 	movi	r6,1
  a06edc:	0a096f80 	call	a096f8 <__lshift>
  a06ee0:	100b883a 	mov	r5,r2
  a06ee4:	003d9c06 	br	a06558 <_dtoa_r+0x938>
  a06ee8:	00800e44 	movi	r2,57
  a06eec:	b8807026 	beq	r23,r2,a070b0 <_dtoa_r+0x1490>
  a06ef0:	b8800044 	addi	r2,r23,1
  a06ef4:	b7000044 	addi	fp,r22,1
  a06ef8:	b0800005 	stb	r2,0(r22)
  a06efc:	003e4106 	br	a06804 <_dtoa_r+0xbe4>
  a06f00:	d8800317 	ldw	r2,12(sp)
  a06f04:	01802874 	movhi	r6,161
  a06f08:	31835204 	addi	r6,r6,3400
  a06f0c:	b009883a 	mov	r4,r22
  a06f10:	100e90fa 	slli	r7,r2,3
  a06f14:	b80b883a 	mov	r5,r23
  a06f18:	398f883a 	add	r7,r7,r6
  a06f1c:	38bffe17 	ldw	r2,-8(r7)
  a06f20:	d9800517 	ldw	r6,20(sp)
  a06f24:	38ffff17 	ldw	r3,-4(r7)
  a06f28:	37000044 	addi	fp,r6,1
  a06f2c:	180f883a 	mov	r7,r3
  a06f30:	100d883a 	mov	r6,r2
  a06f34:	0a0b6a40 	call	a0b6a4 <__muldf3>
  a06f38:	a80b883a 	mov	r5,r21
  a06f3c:	a009883a 	mov	r4,r20
  a06f40:	182f883a 	mov	r23,r3
  a06f44:	102d883a 	mov	r22,r2
  a06f48:	0a0bd800 	call	a0bd80 <__fixdfsi>
  a06f4c:	1009883a 	mov	r4,r2
  a06f50:	1027883a 	mov	r19,r2
  a06f54:	0a0bc880 	call	a0bc88 <__floatsidf>
  a06f58:	a80b883a 	mov	r5,r21
  a06f5c:	a009883a 	mov	r4,r20
  a06f60:	180f883a 	mov	r7,r3
  a06f64:	100d883a 	mov	r6,r2
  a06f68:	0a029780 	call	a02978 <__subdf3>
  a06f6c:	180b883a 	mov	r5,r3
  a06f70:	d8c00517 	ldw	r3,20(sp)
  a06f74:	9cc00c04 	addi	r19,r19,48
  a06f78:	1009883a 	mov	r4,r2
  a06f7c:	1cc00005 	stb	r19,0(r3)
  a06f80:	2021883a 	mov	r16,r4
  a06f84:	d9000317 	ldw	r4,12(sp)
  a06f88:	00800044 	movi	r2,1
  a06f8c:	2823883a 	mov	r17,r5
  a06f90:	20802226 	beq	r4,r2,a0701c <_dtoa_r+0x13fc>
  a06f94:	1029883a 	mov	r20,r2
  a06f98:	0005883a 	mov	r2,zero
  a06f9c:	00d00934 	movhi	r3,16420
  a06fa0:	180f883a 	mov	r7,r3
  a06fa4:	100d883a 	mov	r6,r2
  a06fa8:	880b883a 	mov	r5,r17
  a06fac:	8009883a 	mov	r4,r16
  a06fb0:	0a0b6a40 	call	a0b6a4 <__muldf3>
  a06fb4:	180b883a 	mov	r5,r3
  a06fb8:	1009883a 	mov	r4,r2
  a06fbc:	1823883a 	mov	r17,r3
  a06fc0:	1021883a 	mov	r16,r2
  a06fc4:	0a0bd800 	call	a0bd80 <__fixdfsi>
  a06fc8:	1009883a 	mov	r4,r2
  a06fcc:	102b883a 	mov	r21,r2
  a06fd0:	0a0bc880 	call	a0bc88 <__floatsidf>
  a06fd4:	880b883a 	mov	r5,r17
  a06fd8:	8009883a 	mov	r4,r16
  a06fdc:	180f883a 	mov	r7,r3
  a06fe0:	100d883a 	mov	r6,r2
  a06fe4:	0a029780 	call	a02978 <__subdf3>
  a06fe8:	180b883a 	mov	r5,r3
  a06fec:	d8c00517 	ldw	r3,20(sp)
  a06ff0:	1009883a 	mov	r4,r2
  a06ff4:	ad400c04 	addi	r21,r21,48
  a06ff8:	1d05883a 	add	r2,r3,r20
  a06ffc:	15400005 	stb	r21,0(r2)
  a07000:	2021883a 	mov	r16,r4
  a07004:	d9000317 	ldw	r4,12(sp)
  a07008:	a5000044 	addi	r20,r20,1
  a0700c:	2823883a 	mov	r17,r5
  a07010:	a13fe11e 	bne	r20,r4,a06f98 <_dtoa_r+0x1378>
  a07014:	e505883a 	add	r2,fp,r20
  a07018:	173fffc4 	addi	fp,r2,-1
  a0701c:	0025883a 	mov	r18,zero
  a07020:	04cff834 	movhi	r19,16352
  a07024:	b009883a 	mov	r4,r22
  a07028:	b80b883a 	mov	r5,r23
  a0702c:	900d883a 	mov	r6,r18
  a07030:	980f883a 	mov	r7,r19
  a07034:	0a029f80 	call	a029f8 <__adddf3>
  a07038:	180b883a 	mov	r5,r3
  a0703c:	1009883a 	mov	r4,r2
  a07040:	800d883a 	mov	r6,r16
  a07044:	880f883a 	mov	r7,r17
  a07048:	0a0bc000 	call	a0bc00 <__ltdf2>
  a0704c:	103cab16 	blt	r2,zero,a062fc <_dtoa_r+0x6dc>
  a07050:	0009883a 	mov	r4,zero
  a07054:	980b883a 	mov	r5,r19
  a07058:	b80f883a 	mov	r7,r23
  a0705c:	b00d883a 	mov	r6,r22
  a07060:	0a029780 	call	a02978 <__subdf3>
  a07064:	180b883a 	mov	r5,r3
  a07068:	880f883a 	mov	r7,r17
  a0706c:	1009883a 	mov	r4,r2
  a07070:	800d883a 	mov	r6,r16
  a07074:	0a0baf00 	call	a0baf0 <__gtdf2>
  a07078:	00bc470e 	bge	zero,r2,a06198 <_dtoa_r+0x578>
  a0707c:	00c00c04 	movi	r3,48
  a07080:	e73fffc4 	addi	fp,fp,-1
  a07084:	e0800007 	ldb	r2,0(fp)
  a07088:	10fffd26 	beq	r2,r3,a07080 <_dtoa_r+0x1460>
  a0708c:	d9800417 	ldw	r6,16(sp)
  a07090:	e7000044 	addi	fp,fp,1
  a07094:	d9800d15 	stw	r6,52(sp)
  a07098:	003cab06 	br	a06348 <_dtoa_r+0x728>
  a0709c:	d8c00f17 	ldw	r3,60(sp)
  a070a0:	d9001117 	ldw	r4,68(sp)
  a070a4:	20e1c83a 	sub	r16,r4,r3
  a070a8:	0007883a 	mov	r3,zero
  a070ac:	003d9b06 	br	a0671c <_dtoa_r+0xafc>
  a070b0:	00800e44 	movi	r2,57
  a070b4:	b0800005 	stb	r2,0(r22)
  a070b8:	b5800044 	addi	r22,r22,1
  a070bc:	003dc106 	br	a067c4 <_dtoa_r+0xba4>
  a070c0:	05800084 	movi	r22,2
  a070c4:	003bf706 	br	a060a4 <_dtoa_r+0x484>
  a070c8:	d9000f17 	ldw	r4,60(sp)
  a070cc:	013c000e 	bge	zero,r4,a060d0 <_dtoa_r+0x4b0>
  a070d0:	d9800e17 	ldw	r6,56(sp)
  a070d4:	01bc300e 	bge	zero,r6,a06198 <_dtoa_r+0x578>
  a070d8:	0005883a 	mov	r2,zero
  a070dc:	00d00934 	movhi	r3,16420
  a070e0:	a80b883a 	mov	r5,r21
  a070e4:	180f883a 	mov	r7,r3
  a070e8:	a009883a 	mov	r4,r20
  a070ec:	100d883a 	mov	r6,r2
  a070f0:	0a0b6a40 	call	a0b6a4 <__muldf3>
  a070f4:	b1000044 	addi	r4,r22,1
  a070f8:	1021883a 	mov	r16,r2
  a070fc:	1823883a 	mov	r17,r3
  a07100:	0a0bc880 	call	a0bc88 <__floatsidf>
  a07104:	880b883a 	mov	r5,r17
  a07108:	8009883a 	mov	r4,r16
  a0710c:	180f883a 	mov	r7,r3
  a07110:	100d883a 	mov	r6,r2
  a07114:	0a0b6a40 	call	a0b6a4 <__muldf3>
  a07118:	0011883a 	mov	r8,zero
  a0711c:	02500734 	movhi	r9,16412
  a07120:	180b883a 	mov	r5,r3
  a07124:	480f883a 	mov	r7,r9
  a07128:	1009883a 	mov	r4,r2
  a0712c:	400d883a 	mov	r6,r8
  a07130:	0a029f80 	call	a029f8 <__adddf3>
  a07134:	102d883a 	mov	r22,r2
  a07138:	00bf3034 	movhi	r2,64704
  a0713c:	10ef883a 	add	r23,r2,r3
  a07140:	d8800d17 	ldw	r2,52(sp)
  a07144:	d8c00e17 	ldw	r3,56(sp)
  a07148:	8029883a 	mov	r20,r16
  a0714c:	10bfffc4 	addi	r2,r2,-1
  a07150:	882b883a 	mov	r21,r17
  a07154:	d8800415 	stw	r2,16(sp)
  a07158:	d8c00315 	stw	r3,12(sp)
  a0715c:	003e8306 	br	a06b6c <_dtoa_r+0xf4c>
  a07160:	d8800117 	ldw	r2,4(sp)
  a07164:	dc001117 	ldw	r16,68(sp)
  a07168:	dc801017 	ldw	r18,64(sp)
  a0716c:	00c00d84 	movi	r3,54
  a07170:	1887c83a 	sub	r3,r3,r2
  a07174:	003d6906 	br	a0671c <_dtoa_r+0xafc>
  a07178:	01800044 	movi	r6,1
  a0717c:	3021883a 	mov	r16,r6
  a07180:	d9800f15 	stw	r6,60(sp)
  a07184:	d9802615 	stw	r6,152(sp)
  a07188:	d9800e15 	stw	r6,56(sp)
  a0718c:	003b9306 	br	a05fdc <_dtoa_r+0x3bc>
  a07190:	b021883a 	mov	r16,r22
  a07194:	dd800f15 	stw	r22,60(sp)
  a07198:	003b9006 	br	a05fdc <_dtoa_r+0x3bc>
  a0719c:	103e221e 	bne	r2,zero,a06a28 <_dtoa_r+0xe08>
  a071a0:	b880004c 	andi	r2,r23,1
  a071a4:	1005003a 	cmpeq	r2,r2,zero
  a071a8:	103e1f1e 	bne	r2,zero,a06a28 <_dtoa_r+0xe08>
  a071ac:	003e1b06 	br	a06a1c <_dtoa_r+0xdfc>
  a071b0:	d9001617 	ldw	r4,88(sp)
  a071b4:	980b883a 	mov	r5,r19
  a071b8:	01800284 	movi	r6,10
  a071bc:	000f883a 	mov	r7,zero
  a071c0:	0a09a680 	call	a09a68 <__multadd>
  a071c4:	d8c00e17 	ldw	r3,56(sp)
  a071c8:	1027883a 	mov	r19,r2
  a071cc:	d8c00f15 	stw	r3,60(sp)
  a071d0:	003cd306 	br	a06520 <_dtoa_r+0x900>

00a071d4 <_fflush_r>:
  a071d4:	defffb04 	addi	sp,sp,-20
  a071d8:	dcc00315 	stw	r19,12(sp)
  a071dc:	dc800215 	stw	r18,8(sp)
  a071e0:	dfc00415 	stw	ra,16(sp)
  a071e4:	dc400115 	stw	r17,4(sp)
  a071e8:	dc000015 	stw	r16,0(sp)
  a071ec:	2027883a 	mov	r19,r4
  a071f0:	2825883a 	mov	r18,r5
  a071f4:	20000226 	beq	r4,zero,a07200 <_fflush_r+0x2c>
  a071f8:	20800e17 	ldw	r2,56(r4)
  a071fc:	10005626 	beq	r2,zero,a07358 <_fflush_r+0x184>
  a07200:	9100030b 	ldhu	r4,12(r18)
  a07204:	20ffffcc 	andi	r3,r4,65535
  a07208:	18e0001c 	xori	r3,r3,32768
  a0720c:	18e00004 	addi	r3,r3,-32768
  a07210:	1880020c 	andi	r2,r3,8
  a07214:	1000261e 	bne	r2,zero,a072b0 <_fflush_r+0xdc>
  a07218:	90c00117 	ldw	r3,4(r18)
  a0721c:	20820014 	ori	r2,r4,2048
  a07220:	9080030d 	sth	r2,12(r18)
  a07224:	1009883a 	mov	r4,r2
  a07228:	00c0400e 	bge	zero,r3,a0732c <_fflush_r+0x158>
  a0722c:	92000a17 	ldw	r8,40(r18)
  a07230:	40004026 	beq	r8,zero,a07334 <_fflush_r+0x160>
  a07234:	2084000c 	andi	r2,r4,4096
  a07238:	10005326 	beq	r2,zero,a07388 <_fflush_r+0x1b4>
  a0723c:	94001417 	ldw	r16,80(r18)
  a07240:	9080030b 	ldhu	r2,12(r18)
  a07244:	1080010c 	andi	r2,r2,4
  a07248:	1000481e 	bne	r2,zero,a0736c <_fflush_r+0x198>
  a0724c:	91400717 	ldw	r5,28(r18)
  a07250:	9809883a 	mov	r4,r19
  a07254:	800d883a 	mov	r6,r16
  a07258:	000f883a 	mov	r7,zero
  a0725c:	403ee83a 	callr	r8
  a07260:	8080261e 	bne	r16,r2,a072fc <_fflush_r+0x128>
  a07264:	9080030b 	ldhu	r2,12(r18)
  a07268:	91000417 	ldw	r4,16(r18)
  a0726c:	90000115 	stw	zero,4(r18)
  a07270:	10bdffcc 	andi	r2,r2,63487
  a07274:	10ffffcc 	andi	r3,r2,65535
  a07278:	18c4000c 	andi	r3,r3,4096
  a0727c:	9080030d 	sth	r2,12(r18)
  a07280:	91000015 	stw	r4,0(r18)
  a07284:	18002b26 	beq	r3,zero,a07334 <_fflush_r+0x160>
  a07288:	0007883a 	mov	r3,zero
  a0728c:	1805883a 	mov	r2,r3
  a07290:	94001415 	stw	r16,80(r18)
  a07294:	dfc00417 	ldw	ra,16(sp)
  a07298:	dcc00317 	ldw	r19,12(sp)
  a0729c:	dc800217 	ldw	r18,8(sp)
  a072a0:	dc400117 	ldw	r17,4(sp)
  a072a4:	dc000017 	ldw	r16,0(sp)
  a072a8:	dec00504 	addi	sp,sp,20
  a072ac:	f800283a 	ret
  a072b0:	94400417 	ldw	r17,16(r18)
  a072b4:	88001f26 	beq	r17,zero,a07334 <_fflush_r+0x160>
  a072b8:	90800017 	ldw	r2,0(r18)
  a072bc:	18c000cc 	andi	r3,r3,3
  a072c0:	94400015 	stw	r17,0(r18)
  a072c4:	1461c83a 	sub	r16,r2,r17
  a072c8:	18002526 	beq	r3,zero,a07360 <_fflush_r+0x18c>
  a072cc:	0005883a 	mov	r2,zero
  a072d0:	90800215 	stw	r2,8(r18)
  a072d4:	0400170e 	bge	zero,r16,a07334 <_fflush_r+0x160>
  a072d8:	90c00917 	ldw	r3,36(r18)
  a072dc:	91400717 	ldw	r5,28(r18)
  a072e0:	880d883a 	mov	r6,r17
  a072e4:	800f883a 	mov	r7,r16
  a072e8:	9809883a 	mov	r4,r19
  a072ec:	183ee83a 	callr	r3
  a072f0:	88a3883a 	add	r17,r17,r2
  a072f4:	80a1c83a 	sub	r16,r16,r2
  a072f8:	00bff616 	blt	zero,r2,a072d4 <_fflush_r+0x100>
  a072fc:	9080030b 	ldhu	r2,12(r18)
  a07300:	00ffffc4 	movi	r3,-1
  a07304:	10801014 	ori	r2,r2,64
  a07308:	9080030d 	sth	r2,12(r18)
  a0730c:	1805883a 	mov	r2,r3
  a07310:	dfc00417 	ldw	ra,16(sp)
  a07314:	dcc00317 	ldw	r19,12(sp)
  a07318:	dc800217 	ldw	r18,8(sp)
  a0731c:	dc400117 	ldw	r17,4(sp)
  a07320:	dc000017 	ldw	r16,0(sp)
  a07324:	dec00504 	addi	sp,sp,20
  a07328:	f800283a 	ret
  a0732c:	90800f17 	ldw	r2,60(r18)
  a07330:	00bfbe16 	blt	zero,r2,a0722c <_fflush_r+0x58>
  a07334:	0007883a 	mov	r3,zero
  a07338:	1805883a 	mov	r2,r3
  a0733c:	dfc00417 	ldw	ra,16(sp)
  a07340:	dcc00317 	ldw	r19,12(sp)
  a07344:	dc800217 	ldw	r18,8(sp)
  a07348:	dc400117 	ldw	r17,4(sp)
  a0734c:	dc000017 	ldw	r16,0(sp)
  a07350:	dec00504 	addi	sp,sp,20
  a07354:	f800283a 	ret
  a07358:	0a0746c0 	call	a0746c <__sinit>
  a0735c:	003fa806 	br	a07200 <_fflush_r+0x2c>
  a07360:	90800517 	ldw	r2,20(r18)
  a07364:	90800215 	stw	r2,8(r18)
  a07368:	003fda06 	br	a072d4 <_fflush_r+0x100>
  a0736c:	90800117 	ldw	r2,4(r18)
  a07370:	90c00c17 	ldw	r3,48(r18)
  a07374:	80a1c83a 	sub	r16,r16,r2
  a07378:	183fb426 	beq	r3,zero,a0724c <_fflush_r+0x78>
  a0737c:	90800f17 	ldw	r2,60(r18)
  a07380:	80a1c83a 	sub	r16,r16,r2
  a07384:	003fb106 	br	a0724c <_fflush_r+0x78>
  a07388:	91400717 	ldw	r5,28(r18)
  a0738c:	9809883a 	mov	r4,r19
  a07390:	000d883a 	mov	r6,zero
  a07394:	01c00044 	movi	r7,1
  a07398:	403ee83a 	callr	r8
  a0739c:	1021883a 	mov	r16,r2
  a073a0:	00bfffc4 	movi	r2,-1
  a073a4:	80800226 	beq	r16,r2,a073b0 <_fflush_r+0x1dc>
  a073a8:	92000a17 	ldw	r8,40(r18)
  a073ac:	003fa406 	br	a07240 <_fflush_r+0x6c>
  a073b0:	98c00017 	ldw	r3,0(r19)
  a073b4:	00800744 	movi	r2,29
  a073b8:	18bfde26 	beq	r3,r2,a07334 <_fflush_r+0x160>
  a073bc:	9080030b 	ldhu	r2,12(r18)
  a073c0:	8007883a 	mov	r3,r16
  a073c4:	10801014 	ori	r2,r2,64
  a073c8:	9080030d 	sth	r2,12(r18)
  a073cc:	003fcf06 	br	a0730c <_fflush_r+0x138>

00a073d0 <fflush>:
  a073d0:	01402834 	movhi	r5,160
  a073d4:	295c7504 	addi	r5,r5,29140
  a073d8:	2007883a 	mov	r3,r4
  a073dc:	20000526 	beq	r4,zero,a073f4 <fflush+0x24>
  a073e0:	00802874 	movhi	r2,161
  a073e4:	108ad104 	addi	r2,r2,11076
  a073e8:	11000017 	ldw	r4,0(r2)
  a073ec:	180b883a 	mov	r5,r3
  a073f0:	0a071d41 	jmpi	a071d4 <_fflush_r>
  a073f4:	00802874 	movhi	r2,161
  a073f8:	108ad204 	addi	r2,r2,11080
  a073fc:	11000017 	ldw	r4,0(r2)
  a07400:	0a07fa01 	jmpi	a07fa0 <_fwalk_reent>

00a07404 <std>:
  a07404:	00802874 	movhi	r2,161
  a07408:	10a91f04 	addi	r2,r2,-23428
  a0740c:	20800b15 	stw	r2,44(r4)
  a07410:	00802874 	movhi	r2,161
  a07414:	10a95a04 	addi	r2,r2,-23192
  a07418:	20800815 	stw	r2,32(r4)
  a0741c:	00c02874 	movhi	r3,161
  a07420:	18e93b04 	addi	r3,r3,-23316
  a07424:	00802874 	movhi	r2,161
  a07428:	10a92104 	addi	r2,r2,-23420
  a0742c:	2140030d 	sth	r5,12(r4)
  a07430:	2180038d 	sth	r6,14(r4)
  a07434:	20c00915 	stw	r3,36(r4)
  a07438:	20800a15 	stw	r2,40(r4)
  a0743c:	20000015 	stw	zero,0(r4)
  a07440:	20000115 	stw	zero,4(r4)
  a07444:	20000215 	stw	zero,8(r4)
  a07448:	20000415 	stw	zero,16(r4)
  a0744c:	20000515 	stw	zero,20(r4)
  a07450:	20000615 	stw	zero,24(r4)
  a07454:	21000715 	stw	r4,28(r4)
  a07458:	f800283a 	ret

00a0745c <__sfp_lock_acquire>:
  a0745c:	f800283a 	ret

00a07460 <__sfp_lock_release>:
  a07460:	f800283a 	ret

00a07464 <__sinit_lock_acquire>:
  a07464:	f800283a 	ret

00a07468 <__sinit_lock_release>:
  a07468:	f800283a 	ret

00a0746c <__sinit>:
  a0746c:	20800e17 	ldw	r2,56(r4)
  a07470:	defffd04 	addi	sp,sp,-12
  a07474:	dc400115 	stw	r17,4(sp)
  a07478:	dc000015 	stw	r16,0(sp)
  a0747c:	dfc00215 	stw	ra,8(sp)
  a07480:	04400044 	movi	r17,1
  a07484:	01400104 	movi	r5,4
  a07488:	000d883a 	mov	r6,zero
  a0748c:	2021883a 	mov	r16,r4
  a07490:	2200bb04 	addi	r8,r4,748
  a07494:	200f883a 	mov	r7,r4
  a07498:	10000526 	beq	r2,zero,a074b0 <__sinit+0x44>
  a0749c:	dfc00217 	ldw	ra,8(sp)
  a074a0:	dc400117 	ldw	r17,4(sp)
  a074a4:	dc000017 	ldw	r16,0(sp)
  a074a8:	dec00304 	addi	sp,sp,12
  a074ac:	f800283a 	ret
  a074b0:	21000117 	ldw	r4,4(r4)
  a074b4:	00802834 	movhi	r2,160
  a074b8:	109d5404 	addi	r2,r2,30032
  a074bc:	00c000c4 	movi	r3,3
  a074c0:	80800f15 	stw	r2,60(r16)
  a074c4:	80c0b915 	stw	r3,740(r16)
  a074c8:	8200ba15 	stw	r8,744(r16)
  a074cc:	84400e15 	stw	r17,56(r16)
  a074d0:	8000b815 	stw	zero,736(r16)
  a074d4:	0a074040 	call	a07404 <std>
  a074d8:	81000217 	ldw	r4,8(r16)
  a074dc:	880d883a 	mov	r6,r17
  a074e0:	800f883a 	mov	r7,r16
  a074e4:	01400284 	movi	r5,10
  a074e8:	0a074040 	call	a07404 <std>
  a074ec:	81000317 	ldw	r4,12(r16)
  a074f0:	800f883a 	mov	r7,r16
  a074f4:	01400484 	movi	r5,18
  a074f8:	01800084 	movi	r6,2
  a074fc:	dfc00217 	ldw	ra,8(sp)
  a07500:	dc400117 	ldw	r17,4(sp)
  a07504:	dc000017 	ldw	r16,0(sp)
  a07508:	dec00304 	addi	sp,sp,12
  a0750c:	0a074041 	jmpi	a07404 <std>

00a07510 <__fp_lock>:
  a07510:	0005883a 	mov	r2,zero
  a07514:	f800283a 	ret

00a07518 <__fp_unlock>:
  a07518:	0005883a 	mov	r2,zero
  a0751c:	f800283a 	ret

00a07520 <__fp_unlock_all>:
  a07520:	00802874 	movhi	r2,161
  a07524:	108ad104 	addi	r2,r2,11076
  a07528:	11000017 	ldw	r4,0(r2)
  a0752c:	01402834 	movhi	r5,160
  a07530:	295d4604 	addi	r5,r5,29976
  a07534:	0a080681 	jmpi	a08068 <_fwalk>

00a07538 <__fp_lock_all>:
  a07538:	00802874 	movhi	r2,161
  a0753c:	108ad104 	addi	r2,r2,11076
  a07540:	11000017 	ldw	r4,0(r2)
  a07544:	01402834 	movhi	r5,160
  a07548:	295d4404 	addi	r5,r5,29968
  a0754c:	0a080681 	jmpi	a08068 <_fwalk>

00a07550 <_cleanup_r>:
  a07550:	01402874 	movhi	r5,161
  a07554:	296a4c04 	addi	r5,r5,-22224
  a07558:	0a080681 	jmpi	a08068 <_fwalk>

00a0755c <_cleanup>:
  a0755c:	00802874 	movhi	r2,161
  a07560:	108ad204 	addi	r2,r2,11080
  a07564:	11000017 	ldw	r4,0(r2)
  a07568:	0a075501 	jmpi	a07550 <_cleanup_r>

00a0756c <__sfmoreglue>:
  a0756c:	defffc04 	addi	sp,sp,-16
  a07570:	dc400115 	stw	r17,4(sp)
  a07574:	2c401724 	muli	r17,r5,92
  a07578:	dc800215 	stw	r18,8(sp)
  a0757c:	2825883a 	mov	r18,r5
  a07580:	89400304 	addi	r5,r17,12
  a07584:	dc000015 	stw	r16,0(sp)
  a07588:	dfc00315 	stw	ra,12(sp)
  a0758c:	0a083780 	call	a08378 <_malloc_r>
  a07590:	0021883a 	mov	r16,zero
  a07594:	880d883a 	mov	r6,r17
  a07598:	000b883a 	mov	r5,zero
  a0759c:	10000626 	beq	r2,zero,a075b8 <__sfmoreglue+0x4c>
  a075a0:	11000304 	addi	r4,r2,12
  a075a4:	14800115 	stw	r18,4(r2)
  a075a8:	10000015 	stw	zero,0(r2)
  a075ac:	11000215 	stw	r4,8(r2)
  a075b0:	1021883a 	mov	r16,r2
  a075b4:	0a08d1c0 	call	a08d1c <memset>
  a075b8:	8005883a 	mov	r2,r16
  a075bc:	dfc00317 	ldw	ra,12(sp)
  a075c0:	dc800217 	ldw	r18,8(sp)
  a075c4:	dc400117 	ldw	r17,4(sp)
  a075c8:	dc000017 	ldw	r16,0(sp)
  a075cc:	dec00404 	addi	sp,sp,16
  a075d0:	f800283a 	ret

00a075d4 <__sfp>:
  a075d4:	defffd04 	addi	sp,sp,-12
  a075d8:	00802874 	movhi	r2,161
  a075dc:	108ad204 	addi	r2,r2,11080
  a075e0:	dc000015 	stw	r16,0(sp)
  a075e4:	14000017 	ldw	r16,0(r2)
  a075e8:	dc400115 	stw	r17,4(sp)
  a075ec:	dfc00215 	stw	ra,8(sp)
  a075f0:	80800e17 	ldw	r2,56(r16)
  a075f4:	2023883a 	mov	r17,r4
  a075f8:	10002626 	beq	r2,zero,a07694 <__sfp+0xc0>
  a075fc:	8400b804 	addi	r16,r16,736
  a07600:	80800117 	ldw	r2,4(r16)
  a07604:	81000217 	ldw	r4,8(r16)
  a07608:	10ffffc4 	addi	r3,r2,-1
  a0760c:	18000916 	blt	r3,zero,a07634 <__sfp+0x60>
  a07610:	2080030f 	ldh	r2,12(r4)
  a07614:	10000b26 	beq	r2,zero,a07644 <__sfp+0x70>
  a07618:	017fffc4 	movi	r5,-1
  a0761c:	00000206 	br	a07628 <__sfp+0x54>
  a07620:	2080030f 	ldh	r2,12(r4)
  a07624:	10000726 	beq	r2,zero,a07644 <__sfp+0x70>
  a07628:	18ffffc4 	addi	r3,r3,-1
  a0762c:	21001704 	addi	r4,r4,92
  a07630:	197ffb1e 	bne	r3,r5,a07620 <__sfp+0x4c>
  a07634:	80800017 	ldw	r2,0(r16)
  a07638:	10001926 	beq	r2,zero,a076a0 <__sfp+0xcc>
  a0763c:	1021883a 	mov	r16,r2
  a07640:	003fef06 	br	a07600 <__sfp+0x2c>
  a07644:	00bfffc4 	movi	r2,-1
  a07648:	00c00044 	movi	r3,1
  a0764c:	2080038d 	sth	r2,14(r4)
  a07650:	20c0030d 	sth	r3,12(r4)
  a07654:	20000015 	stw	zero,0(r4)
  a07658:	20000215 	stw	zero,8(r4)
  a0765c:	20000115 	stw	zero,4(r4)
  a07660:	20000415 	stw	zero,16(r4)
  a07664:	20000515 	stw	zero,20(r4)
  a07668:	20000615 	stw	zero,24(r4)
  a0766c:	20000c15 	stw	zero,48(r4)
  a07670:	20000d15 	stw	zero,52(r4)
  a07674:	20001115 	stw	zero,68(r4)
  a07678:	20001215 	stw	zero,72(r4)
  a0767c:	2005883a 	mov	r2,r4
  a07680:	dfc00217 	ldw	ra,8(sp)
  a07684:	dc400117 	ldw	r17,4(sp)
  a07688:	dc000017 	ldw	r16,0(sp)
  a0768c:	dec00304 	addi	sp,sp,12
  a07690:	f800283a 	ret
  a07694:	8009883a 	mov	r4,r16
  a07698:	0a0746c0 	call	a0746c <__sinit>
  a0769c:	003fd706 	br	a075fc <__sfp+0x28>
  a076a0:	8809883a 	mov	r4,r17
  a076a4:	01400104 	movi	r5,4
  a076a8:	0a0756c0 	call	a0756c <__sfmoreglue>
  a076ac:	80800015 	stw	r2,0(r16)
  a076b0:	103fe21e 	bne	r2,zero,a0763c <__sfp+0x68>
  a076b4:	00800304 	movi	r2,12
  a076b8:	0009883a 	mov	r4,zero
  a076bc:	88800015 	stw	r2,0(r17)
  a076c0:	003fee06 	br	a0767c <__sfp+0xa8>

00a076c4 <_malloc_trim_r>:
  a076c4:	defffb04 	addi	sp,sp,-20
  a076c8:	dcc00315 	stw	r19,12(sp)
  a076cc:	04c02874 	movhi	r19,161
  a076d0:	9cc4f304 	addi	r19,r19,5068
  a076d4:	dc800215 	stw	r18,8(sp)
  a076d8:	dc400115 	stw	r17,4(sp)
  a076dc:	dc000015 	stw	r16,0(sp)
  a076e0:	2823883a 	mov	r17,r5
  a076e4:	2025883a 	mov	r18,r4
  a076e8:	dfc00415 	stw	ra,16(sp)
  a076ec:	0a0c7bc0 	call	a0c7bc <__malloc_lock>
  a076f0:	98800217 	ldw	r2,8(r19)
  a076f4:	9009883a 	mov	r4,r18
  a076f8:	000b883a 	mov	r5,zero
  a076fc:	10c00117 	ldw	r3,4(r2)
  a07700:	00bfff04 	movi	r2,-4
  a07704:	18a0703a 	and	r16,r3,r2
  a07708:	8463c83a 	sub	r17,r16,r17
  a0770c:	8c43fbc4 	addi	r17,r17,4079
  a07710:	8822d33a 	srli	r17,r17,12
  a07714:	0083ffc4 	movi	r2,4095
  a07718:	8c7fffc4 	addi	r17,r17,-1
  a0771c:	8822933a 	slli	r17,r17,12
  a07720:	1440060e 	bge	r2,r17,a0773c <_malloc_trim_r+0x78>
  a07724:	0a0a40c0 	call	a0a40c <_sbrk_r>
  a07728:	98c00217 	ldw	r3,8(r19)
  a0772c:	9009883a 	mov	r4,r18
  a07730:	044bc83a 	sub	r5,zero,r17
  a07734:	80c7883a 	add	r3,r16,r3
  a07738:	10c00926 	beq	r2,r3,a07760 <_malloc_trim_r+0x9c>
  a0773c:	0a0c7dc0 	call	a0c7dc <__malloc_unlock>
  a07740:	0005883a 	mov	r2,zero
  a07744:	dfc00417 	ldw	ra,16(sp)
  a07748:	dcc00317 	ldw	r19,12(sp)
  a0774c:	dc800217 	ldw	r18,8(sp)
  a07750:	dc400117 	ldw	r17,4(sp)
  a07754:	dc000017 	ldw	r16,0(sp)
  a07758:	dec00504 	addi	sp,sp,20
  a0775c:	f800283a 	ret
  a07760:	9009883a 	mov	r4,r18
  a07764:	0a0a40c0 	call	a0a40c <_sbrk_r>
  a07768:	844dc83a 	sub	r6,r16,r17
  a0776c:	00ffffc4 	movi	r3,-1
  a07770:	9009883a 	mov	r4,r18
  a07774:	000b883a 	mov	r5,zero
  a07778:	01c02874 	movhi	r7,161
  a0777c:	39d1e804 	addi	r7,r7,18336
  a07780:	31800054 	ori	r6,r6,1
  a07784:	10c00926 	beq	r2,r3,a077ac <_malloc_trim_r+0xe8>
  a07788:	38800017 	ldw	r2,0(r7)
  a0778c:	98c00217 	ldw	r3,8(r19)
  a07790:	9009883a 	mov	r4,r18
  a07794:	1445c83a 	sub	r2,r2,r17
  a07798:	38800015 	stw	r2,0(r7)
  a0779c:	19800115 	stw	r6,4(r3)
  a077a0:	0a0c7dc0 	call	a0c7dc <__malloc_unlock>
  a077a4:	00800044 	movi	r2,1
  a077a8:	003fe606 	br	a07744 <_malloc_trim_r+0x80>
  a077ac:	0a0a40c0 	call	a0a40c <_sbrk_r>
  a077b0:	99800217 	ldw	r6,8(r19)
  a077b4:	100f883a 	mov	r7,r2
  a077b8:	9009883a 	mov	r4,r18
  a077bc:	1187c83a 	sub	r3,r2,r6
  a077c0:	008003c4 	movi	r2,15
  a077c4:	19400054 	ori	r5,r3,1
  a077c8:	10ffdc0e 	bge	r2,r3,a0773c <_malloc_trim_r+0x78>
  a077cc:	00802874 	movhi	r2,161
  a077d0:	108ad604 	addi	r2,r2,11096
  a077d4:	10c00017 	ldw	r3,0(r2)
  a077d8:	00802874 	movhi	r2,161
  a077dc:	1091e804 	addi	r2,r2,18336
  a077e0:	31400115 	stw	r5,4(r6)
  a077e4:	38c7c83a 	sub	r3,r7,r3
  a077e8:	10c00015 	stw	r3,0(r2)
  a077ec:	003fd306 	br	a0773c <_malloc_trim_r+0x78>

00a077f0 <_free_r>:
  a077f0:	defffd04 	addi	sp,sp,-12
  a077f4:	dc400115 	stw	r17,4(sp)
  a077f8:	dc000015 	stw	r16,0(sp)
  a077fc:	dfc00215 	stw	ra,8(sp)
  a07800:	2821883a 	mov	r16,r5
  a07804:	2023883a 	mov	r17,r4
  a07808:	28005a26 	beq	r5,zero,a07974 <_free_r+0x184>
  a0780c:	0a0c7bc0 	call	a0c7bc <__malloc_lock>
  a07810:	823ffe04 	addi	r8,r16,-8
  a07814:	41400117 	ldw	r5,4(r8)
  a07818:	00bfff84 	movi	r2,-2
  a0781c:	02802874 	movhi	r10,161
  a07820:	5284f304 	addi	r10,r10,5068
  a07824:	288e703a 	and	r7,r5,r2
  a07828:	41cd883a 	add	r6,r8,r7
  a0782c:	30c00117 	ldw	r3,4(r6)
  a07830:	51000217 	ldw	r4,8(r10)
  a07834:	00bfff04 	movi	r2,-4
  a07838:	1892703a 	and	r9,r3,r2
  a0783c:	5017883a 	mov	r11,r10
  a07840:	31006726 	beq	r6,r4,a079e0 <_free_r+0x1f0>
  a07844:	2880004c 	andi	r2,r5,1
  a07848:	1005003a 	cmpeq	r2,r2,zero
  a0784c:	32400115 	stw	r9,4(r6)
  a07850:	10001a1e 	bne	r2,zero,a078bc <_free_r+0xcc>
  a07854:	000b883a 	mov	r5,zero
  a07858:	3247883a 	add	r3,r6,r9
  a0785c:	18800117 	ldw	r2,4(r3)
  a07860:	1080004c 	andi	r2,r2,1
  a07864:	1000231e 	bne	r2,zero,a078f4 <_free_r+0x104>
  a07868:	280ac03a 	cmpne	r5,r5,zero
  a0786c:	3a4f883a 	add	r7,r7,r9
  a07870:	2800451e 	bne	r5,zero,a07988 <_free_r+0x198>
  a07874:	31000217 	ldw	r4,8(r6)
  a07878:	00802874 	movhi	r2,161
  a0787c:	1084f504 	addi	r2,r2,5076
  a07880:	20807b26 	beq	r4,r2,a07a70 <_free_r+0x280>
  a07884:	30800317 	ldw	r2,12(r6)
  a07888:	3a07883a 	add	r3,r7,r8
  a0788c:	19c00015 	stw	r7,0(r3)
  a07890:	11000215 	stw	r4,8(r2)
  a07894:	20800315 	stw	r2,12(r4)
  a07898:	38800054 	ori	r2,r7,1
  a0789c:	40800115 	stw	r2,4(r8)
  a078a0:	28001a26 	beq	r5,zero,a0790c <_free_r+0x11c>
  a078a4:	8809883a 	mov	r4,r17
  a078a8:	dfc00217 	ldw	ra,8(sp)
  a078ac:	dc400117 	ldw	r17,4(sp)
  a078b0:	dc000017 	ldw	r16,0(sp)
  a078b4:	dec00304 	addi	sp,sp,12
  a078b8:	0a0c7dc1 	jmpi	a0c7dc <__malloc_unlock>
  a078bc:	80bffe17 	ldw	r2,-8(r16)
  a078c0:	50c00204 	addi	r3,r10,8
  a078c4:	4091c83a 	sub	r8,r8,r2
  a078c8:	41000217 	ldw	r4,8(r8)
  a078cc:	388f883a 	add	r7,r7,r2
  a078d0:	20c06126 	beq	r4,r3,a07a58 <_free_r+0x268>
  a078d4:	40800317 	ldw	r2,12(r8)
  a078d8:	3247883a 	add	r3,r6,r9
  a078dc:	000b883a 	mov	r5,zero
  a078e0:	11000215 	stw	r4,8(r2)
  a078e4:	20800315 	stw	r2,12(r4)
  a078e8:	18800117 	ldw	r2,4(r3)
  a078ec:	1080004c 	andi	r2,r2,1
  a078f0:	103fdd26 	beq	r2,zero,a07868 <_free_r+0x78>
  a078f4:	38800054 	ori	r2,r7,1
  a078f8:	3a07883a 	add	r3,r7,r8
  a078fc:	280ac03a 	cmpne	r5,r5,zero
  a07900:	40800115 	stw	r2,4(r8)
  a07904:	19c00015 	stw	r7,0(r3)
  a07908:	283fe61e 	bne	r5,zero,a078a4 <_free_r+0xb4>
  a0790c:	00807fc4 	movi	r2,511
  a07910:	11c01f2e 	bgeu	r2,r7,a07990 <_free_r+0x1a0>
  a07914:	3806d27a 	srli	r3,r7,9
  a07918:	1800481e 	bne	r3,zero,a07a3c <_free_r+0x24c>
  a0791c:	3804d0fa 	srli	r2,r7,3
  a07920:	100690fa 	slli	r3,r2,3
  a07924:	1acd883a 	add	r6,r3,r11
  a07928:	31400217 	ldw	r5,8(r6)
  a0792c:	31405926 	beq	r6,r5,a07a94 <_free_r+0x2a4>
  a07930:	28800117 	ldw	r2,4(r5)
  a07934:	00ffff04 	movi	r3,-4
  a07938:	10c4703a 	and	r2,r2,r3
  a0793c:	3880022e 	bgeu	r7,r2,a07948 <_free_r+0x158>
  a07940:	29400217 	ldw	r5,8(r5)
  a07944:	317ffa1e 	bne	r6,r5,a07930 <_free_r+0x140>
  a07948:	29800317 	ldw	r6,12(r5)
  a0794c:	41800315 	stw	r6,12(r8)
  a07950:	41400215 	stw	r5,8(r8)
  a07954:	8809883a 	mov	r4,r17
  a07958:	2a000315 	stw	r8,12(r5)
  a0795c:	32000215 	stw	r8,8(r6)
  a07960:	dfc00217 	ldw	ra,8(sp)
  a07964:	dc400117 	ldw	r17,4(sp)
  a07968:	dc000017 	ldw	r16,0(sp)
  a0796c:	dec00304 	addi	sp,sp,12
  a07970:	0a0c7dc1 	jmpi	a0c7dc <__malloc_unlock>
  a07974:	dfc00217 	ldw	ra,8(sp)
  a07978:	dc400117 	ldw	r17,4(sp)
  a0797c:	dc000017 	ldw	r16,0(sp)
  a07980:	dec00304 	addi	sp,sp,12
  a07984:	f800283a 	ret
  a07988:	31000217 	ldw	r4,8(r6)
  a0798c:	003fbd06 	br	a07884 <_free_r+0x94>
  a07990:	3806d0fa 	srli	r3,r7,3
  a07994:	00800044 	movi	r2,1
  a07998:	51400117 	ldw	r5,4(r10)
  a0799c:	180890fa 	slli	r4,r3,3
  a079a0:	1807d0ba 	srai	r3,r3,2
  a079a4:	22c9883a 	add	r4,r4,r11
  a079a8:	21800217 	ldw	r6,8(r4)
  a079ac:	10c4983a 	sll	r2,r2,r3
  a079b0:	41000315 	stw	r4,12(r8)
  a079b4:	41800215 	stw	r6,8(r8)
  a079b8:	288ab03a 	or	r5,r5,r2
  a079bc:	22000215 	stw	r8,8(r4)
  a079c0:	8809883a 	mov	r4,r17
  a079c4:	51400115 	stw	r5,4(r10)
  a079c8:	32000315 	stw	r8,12(r6)
  a079cc:	dfc00217 	ldw	ra,8(sp)
  a079d0:	dc400117 	ldw	r17,4(sp)
  a079d4:	dc000017 	ldw	r16,0(sp)
  a079d8:	dec00304 	addi	sp,sp,12
  a079dc:	0a0c7dc1 	jmpi	a0c7dc <__malloc_unlock>
  a079e0:	2880004c 	andi	r2,r5,1
  a079e4:	3a4d883a 	add	r6,r7,r9
  a079e8:	1000071e 	bne	r2,zero,a07a08 <_free_r+0x218>
  a079ec:	80bffe17 	ldw	r2,-8(r16)
  a079f0:	4091c83a 	sub	r8,r8,r2
  a079f4:	41000317 	ldw	r4,12(r8)
  a079f8:	40c00217 	ldw	r3,8(r8)
  a079fc:	308d883a 	add	r6,r6,r2
  a07a00:	20c00215 	stw	r3,8(r4)
  a07a04:	19000315 	stw	r4,12(r3)
  a07a08:	00802874 	movhi	r2,161
  a07a0c:	108ad504 	addi	r2,r2,11092
  a07a10:	11000017 	ldw	r4,0(r2)
  a07a14:	30c00054 	ori	r3,r6,1
  a07a18:	52000215 	stw	r8,8(r10)
  a07a1c:	40c00115 	stw	r3,4(r8)
  a07a20:	313fa036 	bltu	r6,r4,a078a4 <_free_r+0xb4>
  a07a24:	00802874 	movhi	r2,161
  a07a28:	1091de04 	addi	r2,r2,18296
  a07a2c:	11400017 	ldw	r5,0(r2)
  a07a30:	8809883a 	mov	r4,r17
  a07a34:	0a076c40 	call	a076c4 <_malloc_trim_r>
  a07a38:	003f9a06 	br	a078a4 <_free_r+0xb4>
  a07a3c:	00800104 	movi	r2,4
  a07a40:	10c0072e 	bgeu	r2,r3,a07a60 <_free_r+0x270>
  a07a44:	00800504 	movi	r2,20
  a07a48:	10c01936 	bltu	r2,r3,a07ab0 <_free_r+0x2c0>
  a07a4c:	188016c4 	addi	r2,r3,91
  a07a50:	100690fa 	slli	r3,r2,3
  a07a54:	003fb306 	br	a07924 <_free_r+0x134>
  a07a58:	01400044 	movi	r5,1
  a07a5c:	003f7e06 	br	a07858 <_free_r+0x68>
  a07a60:	3804d1ba 	srli	r2,r7,6
  a07a64:	10800e04 	addi	r2,r2,56
  a07a68:	100690fa 	slli	r3,r2,3
  a07a6c:	003fad06 	br	a07924 <_free_r+0x134>
  a07a70:	22000315 	stw	r8,12(r4)
  a07a74:	22000215 	stw	r8,8(r4)
  a07a78:	3a05883a 	add	r2,r7,r8
  a07a7c:	38c00054 	ori	r3,r7,1
  a07a80:	11c00015 	stw	r7,0(r2)
  a07a84:	41000215 	stw	r4,8(r8)
  a07a88:	40c00115 	stw	r3,4(r8)
  a07a8c:	41000315 	stw	r4,12(r8)
  a07a90:	003f8406 	br	a078a4 <_free_r+0xb4>
  a07a94:	1005d0ba 	srai	r2,r2,2
  a07a98:	00c00044 	movi	r3,1
  a07a9c:	51000117 	ldw	r4,4(r10)
  a07aa0:	1886983a 	sll	r3,r3,r2
  a07aa4:	20c8b03a 	or	r4,r4,r3
  a07aa8:	51000115 	stw	r4,4(r10)
  a07aac:	003fa706 	br	a0794c <_free_r+0x15c>
  a07ab0:	00801504 	movi	r2,84
  a07ab4:	10c00436 	bltu	r2,r3,a07ac8 <_free_r+0x2d8>
  a07ab8:	3804d33a 	srli	r2,r7,12
  a07abc:	10801b84 	addi	r2,r2,110
  a07ac0:	100690fa 	slli	r3,r2,3
  a07ac4:	003f9706 	br	a07924 <_free_r+0x134>
  a07ac8:	00805504 	movi	r2,340
  a07acc:	10c00436 	bltu	r2,r3,a07ae0 <_free_r+0x2f0>
  a07ad0:	3804d3fa 	srli	r2,r7,15
  a07ad4:	10801dc4 	addi	r2,r2,119
  a07ad8:	100690fa 	slli	r3,r2,3
  a07adc:	003f9106 	br	a07924 <_free_r+0x134>
  a07ae0:	00815504 	movi	r2,1364
  a07ae4:	10c0032e 	bgeu	r2,r3,a07af4 <_free_r+0x304>
  a07ae8:	00801f84 	movi	r2,126
  a07aec:	00c0fc04 	movi	r3,1008
  a07af0:	003f8c06 	br	a07924 <_free_r+0x134>
  a07af4:	3804d4ba 	srli	r2,r7,18
  a07af8:	10801f04 	addi	r2,r2,124
  a07afc:	100690fa 	slli	r3,r2,3
  a07b00:	003f8806 	br	a07924 <_free_r+0x134>

00a07b04 <__sfvwrite_r>:
  a07b04:	30800217 	ldw	r2,8(r6)
  a07b08:	defff504 	addi	sp,sp,-44
  a07b0c:	df000915 	stw	fp,36(sp)
  a07b10:	dd800715 	stw	r22,28(sp)
  a07b14:	dc800315 	stw	r18,12(sp)
  a07b18:	dfc00a15 	stw	ra,40(sp)
  a07b1c:	ddc00815 	stw	r23,32(sp)
  a07b20:	dd400615 	stw	r21,24(sp)
  a07b24:	dd000515 	stw	r20,20(sp)
  a07b28:	dcc00415 	stw	r19,16(sp)
  a07b2c:	dc400215 	stw	r17,8(sp)
  a07b30:	dc000115 	stw	r16,4(sp)
  a07b34:	302d883a 	mov	r22,r6
  a07b38:	2039883a 	mov	fp,r4
  a07b3c:	2825883a 	mov	r18,r5
  a07b40:	10001c26 	beq	r2,zero,a07bb4 <__sfvwrite_r+0xb0>
  a07b44:	29c0030b 	ldhu	r7,12(r5)
  a07b48:	3880020c 	andi	r2,r7,8
  a07b4c:	10002726 	beq	r2,zero,a07bec <__sfvwrite_r+0xe8>
  a07b50:	28800417 	ldw	r2,16(r5)
  a07b54:	10002526 	beq	r2,zero,a07bec <__sfvwrite_r+0xe8>
  a07b58:	3880008c 	andi	r2,r7,2
  a07b5c:	b5400017 	ldw	r21,0(r22)
  a07b60:	10002826 	beq	r2,zero,a07c04 <__sfvwrite_r+0x100>
  a07b64:	0021883a 	mov	r16,zero
  a07b68:	0023883a 	mov	r17,zero
  a07b6c:	880d883a 	mov	r6,r17
  a07b70:	e009883a 	mov	r4,fp
  a07b74:	00810004 	movi	r2,1024
  a07b78:	80006e26 	beq	r16,zero,a07d34 <__sfvwrite_r+0x230>
  a07b7c:	800f883a 	mov	r7,r16
  a07b80:	91400717 	ldw	r5,28(r18)
  a07b84:	1400012e 	bgeu	r2,r16,a07b8c <__sfvwrite_r+0x88>
  a07b88:	100f883a 	mov	r7,r2
  a07b8c:	90c00917 	ldw	r3,36(r18)
  a07b90:	183ee83a 	callr	r3
  a07b94:	1007883a 	mov	r3,r2
  a07b98:	80a1c83a 	sub	r16,r16,r2
  a07b9c:	88a3883a 	add	r17,r17,r2
  a07ba0:	00806d0e 	bge	zero,r2,a07d58 <__sfvwrite_r+0x254>
  a07ba4:	b0800217 	ldw	r2,8(r22)
  a07ba8:	10c5c83a 	sub	r2,r2,r3
  a07bac:	b0800215 	stw	r2,8(r22)
  a07bb0:	103fee1e 	bne	r2,zero,a07b6c <__sfvwrite_r+0x68>
  a07bb4:	0009883a 	mov	r4,zero
  a07bb8:	2005883a 	mov	r2,r4
  a07bbc:	dfc00a17 	ldw	ra,40(sp)
  a07bc0:	df000917 	ldw	fp,36(sp)
  a07bc4:	ddc00817 	ldw	r23,32(sp)
  a07bc8:	dd800717 	ldw	r22,28(sp)
  a07bcc:	dd400617 	ldw	r21,24(sp)
  a07bd0:	dd000517 	ldw	r20,20(sp)
  a07bd4:	dcc00417 	ldw	r19,16(sp)
  a07bd8:	dc800317 	ldw	r18,12(sp)
  a07bdc:	dc400217 	ldw	r17,8(sp)
  a07be0:	dc000117 	ldw	r16,4(sp)
  a07be4:	dec00b04 	addi	sp,sp,44
  a07be8:	f800283a 	ret
  a07bec:	0a058cc0 	call	a058cc <__swsetup_r>
  a07bf0:	1000e41e 	bne	r2,zero,a07f84 <__sfvwrite_r+0x480>
  a07bf4:	91c0030b 	ldhu	r7,12(r18)
  a07bf8:	b5400017 	ldw	r21,0(r22)
  a07bfc:	3880008c 	andi	r2,r7,2
  a07c00:	103fd81e 	bne	r2,zero,a07b64 <__sfvwrite_r+0x60>
  a07c04:	3880004c 	andi	r2,r7,1
  a07c08:	1005003a 	cmpeq	r2,r2,zero
  a07c0c:	10005726 	beq	r2,zero,a07d6c <__sfvwrite_r+0x268>
  a07c10:	0029883a 	mov	r20,zero
  a07c14:	002f883a 	mov	r23,zero
  a07c18:	a0004226 	beq	r20,zero,a07d24 <__sfvwrite_r+0x220>
  a07c1c:	3880800c 	andi	r2,r7,512
  a07c20:	94000217 	ldw	r16,8(r18)
  a07c24:	10008b26 	beq	r2,zero,a07e54 <__sfvwrite_r+0x350>
  a07c28:	800d883a 	mov	r6,r16
  a07c2c:	a400a536 	bltu	r20,r16,a07ec4 <__sfvwrite_r+0x3c0>
  a07c30:	3881200c 	andi	r2,r7,1152
  a07c34:	10002726 	beq	r2,zero,a07cd4 <__sfvwrite_r+0x1d0>
  a07c38:	90800517 	ldw	r2,20(r18)
  a07c3c:	92000417 	ldw	r8,16(r18)
  a07c40:	91400017 	ldw	r5,0(r18)
  a07c44:	1087883a 	add	r3,r2,r2
  a07c48:	1887883a 	add	r3,r3,r2
  a07c4c:	1808d7fa 	srli	r4,r3,31
  a07c50:	2a21c83a 	sub	r16,r5,r8
  a07c54:	80800044 	addi	r2,r16,1
  a07c58:	20c9883a 	add	r4,r4,r3
  a07c5c:	2027d07a 	srai	r19,r4,1
  a07c60:	a085883a 	add	r2,r20,r2
  a07c64:	980d883a 	mov	r6,r19
  a07c68:	9880022e 	bgeu	r19,r2,a07c74 <__sfvwrite_r+0x170>
  a07c6c:	1027883a 	mov	r19,r2
  a07c70:	100d883a 	mov	r6,r2
  a07c74:	3881000c 	andi	r2,r7,1024
  a07c78:	1000b826 	beq	r2,zero,a07f5c <__sfvwrite_r+0x458>
  a07c7c:	300b883a 	mov	r5,r6
  a07c80:	e009883a 	mov	r4,fp
  a07c84:	0a083780 	call	a08378 <_malloc_r>
  a07c88:	10003126 	beq	r2,zero,a07d50 <__sfvwrite_r+0x24c>
  a07c8c:	91400417 	ldw	r5,16(r18)
  a07c90:	1009883a 	mov	r4,r2
  a07c94:	800d883a 	mov	r6,r16
  a07c98:	1023883a 	mov	r17,r2
  a07c9c:	0a08b9c0 	call	a08b9c <memcpy>
  a07ca0:	90c0030b 	ldhu	r3,12(r18)
  a07ca4:	00beffc4 	movi	r2,-1025
  a07ca8:	1886703a 	and	r3,r3,r2
  a07cac:	18c02014 	ori	r3,r3,128
  a07cb0:	90c0030d 	sth	r3,12(r18)
  a07cb4:	9c07c83a 	sub	r3,r19,r16
  a07cb8:	8c05883a 	add	r2,r17,r16
  a07cbc:	a00d883a 	mov	r6,r20
  a07cc0:	a021883a 	mov	r16,r20
  a07cc4:	90800015 	stw	r2,0(r18)
  a07cc8:	90c00215 	stw	r3,8(r18)
  a07ccc:	94400415 	stw	r17,16(r18)
  a07cd0:	94c00515 	stw	r19,20(r18)
  a07cd4:	91000017 	ldw	r4,0(r18)
  a07cd8:	b80b883a 	mov	r5,r23
  a07cdc:	a023883a 	mov	r17,r20
  a07ce0:	0a08c3c0 	call	a08c3c <memmove>
  a07ce4:	90c00217 	ldw	r3,8(r18)
  a07ce8:	90800017 	ldw	r2,0(r18)
  a07cec:	a027883a 	mov	r19,r20
  a07cf0:	1c07c83a 	sub	r3,r3,r16
  a07cf4:	1405883a 	add	r2,r2,r16
  a07cf8:	90c00215 	stw	r3,8(r18)
  a07cfc:	a021883a 	mov	r16,r20
  a07d00:	90800015 	stw	r2,0(r18)
  a07d04:	b0800217 	ldw	r2,8(r22)
  a07d08:	1405c83a 	sub	r2,r2,r16
  a07d0c:	b0800215 	stw	r2,8(r22)
  a07d10:	103fa826 	beq	r2,zero,a07bb4 <__sfvwrite_r+0xb0>
  a07d14:	a469c83a 	sub	r20,r20,r17
  a07d18:	91c0030b 	ldhu	r7,12(r18)
  a07d1c:	bcef883a 	add	r23,r23,r19
  a07d20:	a03fbe1e 	bne	r20,zero,a07c1c <__sfvwrite_r+0x118>
  a07d24:	adc00017 	ldw	r23,0(r21)
  a07d28:	ad000117 	ldw	r20,4(r21)
  a07d2c:	ad400204 	addi	r21,r21,8
  a07d30:	003fb906 	br	a07c18 <__sfvwrite_r+0x114>
  a07d34:	ac400017 	ldw	r17,0(r21)
  a07d38:	ac000117 	ldw	r16,4(r21)
  a07d3c:	ad400204 	addi	r21,r21,8
  a07d40:	003f8a06 	br	a07b6c <__sfvwrite_r+0x68>
  a07d44:	91400417 	ldw	r5,16(r18)
  a07d48:	e009883a 	mov	r4,fp
  a07d4c:	0a077f00 	call	a077f0 <_free_r>
  a07d50:	00800304 	movi	r2,12
  a07d54:	e0800015 	stw	r2,0(fp)
  a07d58:	9080030b 	ldhu	r2,12(r18)
  a07d5c:	013fffc4 	movi	r4,-1
  a07d60:	10801014 	ori	r2,r2,64
  a07d64:	9080030d 	sth	r2,12(r18)
  a07d68:	003f9306 	br	a07bb8 <__sfvwrite_r+0xb4>
  a07d6c:	0027883a 	mov	r19,zero
  a07d70:	002f883a 	mov	r23,zero
  a07d74:	d8000015 	stw	zero,0(sp)
  a07d78:	0029883a 	mov	r20,zero
  a07d7c:	98001e26 	beq	r19,zero,a07df8 <__sfvwrite_r+0x2f4>
  a07d80:	d8c00017 	ldw	r3,0(sp)
  a07d84:	1804c03a 	cmpne	r2,r3,zero
  a07d88:	10005e26 	beq	r2,zero,a07f04 <__sfvwrite_r+0x400>
  a07d8c:	9821883a 	mov	r16,r19
  a07d90:	a4c0012e 	bgeu	r20,r19,a07d98 <__sfvwrite_r+0x294>
  a07d94:	a021883a 	mov	r16,r20
  a07d98:	91000017 	ldw	r4,0(r18)
  a07d9c:	90800417 	ldw	r2,16(r18)
  a07da0:	91800217 	ldw	r6,8(r18)
  a07da4:	91c00517 	ldw	r7,20(r18)
  a07da8:	1100022e 	bgeu	r2,r4,a07db4 <__sfvwrite_r+0x2b0>
  a07dac:	31e3883a 	add	r17,r6,r7
  a07db0:	8c001616 	blt	r17,r16,a07e0c <__sfvwrite_r+0x308>
  a07db4:	81c03816 	blt	r16,r7,a07e98 <__sfvwrite_r+0x394>
  a07db8:	90c00917 	ldw	r3,36(r18)
  a07dbc:	91400717 	ldw	r5,28(r18)
  a07dc0:	e009883a 	mov	r4,fp
  a07dc4:	b80d883a 	mov	r6,r23
  a07dc8:	183ee83a 	callr	r3
  a07dcc:	1023883a 	mov	r17,r2
  a07dd0:	00bfe10e 	bge	zero,r2,a07d58 <__sfvwrite_r+0x254>
  a07dd4:	a469c83a 	sub	r20,r20,r17
  a07dd8:	a0001826 	beq	r20,zero,a07e3c <__sfvwrite_r+0x338>
  a07ddc:	b0800217 	ldw	r2,8(r22)
  a07de0:	1445c83a 	sub	r2,r2,r17
  a07de4:	b0800215 	stw	r2,8(r22)
  a07de8:	103f7226 	beq	r2,zero,a07bb4 <__sfvwrite_r+0xb0>
  a07dec:	9c67c83a 	sub	r19,r19,r17
  a07df0:	bc6f883a 	add	r23,r23,r17
  a07df4:	983fe21e 	bne	r19,zero,a07d80 <__sfvwrite_r+0x27c>
  a07df8:	adc00017 	ldw	r23,0(r21)
  a07dfc:	acc00117 	ldw	r19,4(r21)
  a07e00:	ad400204 	addi	r21,r21,8
  a07e04:	d8000015 	stw	zero,0(sp)
  a07e08:	003fdc06 	br	a07d7c <__sfvwrite_r+0x278>
  a07e0c:	b80b883a 	mov	r5,r23
  a07e10:	880d883a 	mov	r6,r17
  a07e14:	0a08c3c0 	call	a08c3c <memmove>
  a07e18:	90c00017 	ldw	r3,0(r18)
  a07e1c:	e009883a 	mov	r4,fp
  a07e20:	900b883a 	mov	r5,r18
  a07e24:	1c47883a 	add	r3,r3,r17
  a07e28:	90c00015 	stw	r3,0(r18)
  a07e2c:	0a071d40 	call	a071d4 <_fflush_r>
  a07e30:	103fc91e 	bne	r2,zero,a07d58 <__sfvwrite_r+0x254>
  a07e34:	a469c83a 	sub	r20,r20,r17
  a07e38:	a03fe81e 	bne	r20,zero,a07ddc <__sfvwrite_r+0x2d8>
  a07e3c:	e009883a 	mov	r4,fp
  a07e40:	900b883a 	mov	r5,r18
  a07e44:	0a071d40 	call	a071d4 <_fflush_r>
  a07e48:	103fc31e 	bne	r2,zero,a07d58 <__sfvwrite_r+0x254>
  a07e4c:	d8000015 	stw	zero,0(sp)
  a07e50:	003fe206 	br	a07ddc <__sfvwrite_r+0x2d8>
  a07e54:	91000017 	ldw	r4,0(r18)
  a07e58:	90800417 	ldw	r2,16(r18)
  a07e5c:	1100022e 	bgeu	r2,r4,a07e68 <__sfvwrite_r+0x364>
  a07e60:	8023883a 	mov	r17,r16
  a07e64:	85003136 	bltu	r16,r20,a07f2c <__sfvwrite_r+0x428>
  a07e68:	91c00517 	ldw	r7,20(r18)
  a07e6c:	a1c01836 	bltu	r20,r7,a07ed0 <__sfvwrite_r+0x3cc>
  a07e70:	90c00917 	ldw	r3,36(r18)
  a07e74:	91400717 	ldw	r5,28(r18)
  a07e78:	e009883a 	mov	r4,fp
  a07e7c:	b80d883a 	mov	r6,r23
  a07e80:	183ee83a 	callr	r3
  a07e84:	1021883a 	mov	r16,r2
  a07e88:	00bfb30e 	bge	zero,r2,a07d58 <__sfvwrite_r+0x254>
  a07e8c:	1023883a 	mov	r17,r2
  a07e90:	1027883a 	mov	r19,r2
  a07e94:	003f9b06 	br	a07d04 <__sfvwrite_r+0x200>
  a07e98:	b80b883a 	mov	r5,r23
  a07e9c:	800d883a 	mov	r6,r16
  a07ea0:	0a08c3c0 	call	a08c3c <memmove>
  a07ea4:	90c00217 	ldw	r3,8(r18)
  a07ea8:	90800017 	ldw	r2,0(r18)
  a07eac:	8023883a 	mov	r17,r16
  a07eb0:	1c07c83a 	sub	r3,r3,r16
  a07eb4:	1405883a 	add	r2,r2,r16
  a07eb8:	90c00215 	stw	r3,8(r18)
  a07ebc:	90800015 	stw	r2,0(r18)
  a07ec0:	003fc406 	br	a07dd4 <__sfvwrite_r+0x2d0>
  a07ec4:	a00d883a 	mov	r6,r20
  a07ec8:	a021883a 	mov	r16,r20
  a07ecc:	003f8106 	br	a07cd4 <__sfvwrite_r+0x1d0>
  a07ed0:	b80b883a 	mov	r5,r23
  a07ed4:	a00d883a 	mov	r6,r20
  a07ed8:	0a08c3c0 	call	a08c3c <memmove>
  a07edc:	90c00217 	ldw	r3,8(r18)
  a07ee0:	90800017 	ldw	r2,0(r18)
  a07ee4:	a021883a 	mov	r16,r20
  a07ee8:	1d07c83a 	sub	r3,r3,r20
  a07eec:	1505883a 	add	r2,r2,r20
  a07ef0:	a023883a 	mov	r17,r20
  a07ef4:	a027883a 	mov	r19,r20
  a07ef8:	90c00215 	stw	r3,8(r18)
  a07efc:	90800015 	stw	r2,0(r18)
  a07f00:	003f8006 	br	a07d04 <__sfvwrite_r+0x200>
  a07f04:	b809883a 	mov	r4,r23
  a07f08:	01400284 	movi	r5,10
  a07f0c:	980d883a 	mov	r6,r19
  a07f10:	0a08ab80 	call	a08ab8 <memchr>
  a07f14:	10001726 	beq	r2,zero,a07f74 <__sfvwrite_r+0x470>
  a07f18:	15c5c83a 	sub	r2,r2,r23
  a07f1c:	15000044 	addi	r20,r2,1
  a07f20:	00800044 	movi	r2,1
  a07f24:	d8800015 	stw	r2,0(sp)
  a07f28:	003f9806 	br	a07d8c <__sfvwrite_r+0x288>
  a07f2c:	b80b883a 	mov	r5,r23
  a07f30:	800d883a 	mov	r6,r16
  a07f34:	0a08c3c0 	call	a08c3c <memmove>
  a07f38:	90c00017 	ldw	r3,0(r18)
  a07f3c:	e009883a 	mov	r4,fp
  a07f40:	900b883a 	mov	r5,r18
  a07f44:	1c07883a 	add	r3,r3,r16
  a07f48:	90c00015 	stw	r3,0(r18)
  a07f4c:	8027883a 	mov	r19,r16
  a07f50:	0a071d40 	call	a071d4 <_fflush_r>
  a07f54:	103f6b26 	beq	r2,zero,a07d04 <__sfvwrite_r+0x200>
  a07f58:	003f7f06 	br	a07d58 <__sfvwrite_r+0x254>
  a07f5c:	400b883a 	mov	r5,r8
  a07f60:	e009883a 	mov	r4,fp
  a07f64:	0a09da80 	call	a09da8 <_realloc_r>
  a07f68:	103f7626 	beq	r2,zero,a07d44 <__sfvwrite_r+0x240>
  a07f6c:	1023883a 	mov	r17,r2
  a07f70:	003f5006 	br	a07cb4 <__sfvwrite_r+0x1b0>
  a07f74:	00c00044 	movi	r3,1
  a07f78:	9d000044 	addi	r20,r19,1
  a07f7c:	d8c00015 	stw	r3,0(sp)
  a07f80:	003f8206 	br	a07d8c <__sfvwrite_r+0x288>
  a07f84:	9080030b 	ldhu	r2,12(r18)
  a07f88:	00c00244 	movi	r3,9
  a07f8c:	013fffc4 	movi	r4,-1
  a07f90:	10801014 	ori	r2,r2,64
  a07f94:	9080030d 	sth	r2,12(r18)
  a07f98:	e0c00015 	stw	r3,0(fp)
  a07f9c:	003f0606 	br	a07bb8 <__sfvwrite_r+0xb4>

00a07fa0 <_fwalk_reent>:
  a07fa0:	defff704 	addi	sp,sp,-36
  a07fa4:	dcc00315 	stw	r19,12(sp)
  a07fa8:	24c0b804 	addi	r19,r4,736
  a07fac:	dd800615 	stw	r22,24(sp)
  a07fb0:	dd400515 	stw	r21,20(sp)
  a07fb4:	dfc00815 	stw	ra,32(sp)
  a07fb8:	ddc00715 	stw	r23,28(sp)
  a07fbc:	dd000415 	stw	r20,16(sp)
  a07fc0:	dc800215 	stw	r18,8(sp)
  a07fc4:	dc400115 	stw	r17,4(sp)
  a07fc8:	dc000015 	stw	r16,0(sp)
  a07fcc:	202b883a 	mov	r21,r4
  a07fd0:	282d883a 	mov	r22,r5
  a07fd4:	0a0745c0 	call	a0745c <__sfp_lock_acquire>
  a07fd8:	98002126 	beq	r19,zero,a08060 <_fwalk_reent+0xc0>
  a07fdc:	002f883a 	mov	r23,zero
  a07fe0:	9c800117 	ldw	r18,4(r19)
  a07fe4:	9c000217 	ldw	r16,8(r19)
  a07fe8:	90bfffc4 	addi	r2,r18,-1
  a07fec:	10000d16 	blt	r2,zero,a08024 <_fwalk_reent+0x84>
  a07ff0:	0023883a 	mov	r17,zero
  a07ff4:	053fffc4 	movi	r20,-1
  a07ff8:	8080030f 	ldh	r2,12(r16)
  a07ffc:	8c400044 	addi	r17,r17,1
  a08000:	10000626 	beq	r2,zero,a0801c <_fwalk_reent+0x7c>
  a08004:	8080038f 	ldh	r2,14(r16)
  a08008:	800b883a 	mov	r5,r16
  a0800c:	a809883a 	mov	r4,r21
  a08010:	15000226 	beq	r2,r20,a0801c <_fwalk_reent+0x7c>
  a08014:	b03ee83a 	callr	r22
  a08018:	b8aeb03a 	or	r23,r23,r2
  a0801c:	84001704 	addi	r16,r16,92
  a08020:	947ff51e 	bne	r18,r17,a07ff8 <_fwalk_reent+0x58>
  a08024:	9cc00017 	ldw	r19,0(r19)
  a08028:	983fed1e 	bne	r19,zero,a07fe0 <_fwalk_reent+0x40>
  a0802c:	0a074600 	call	a07460 <__sfp_lock_release>
  a08030:	b805883a 	mov	r2,r23
  a08034:	dfc00817 	ldw	ra,32(sp)
  a08038:	ddc00717 	ldw	r23,28(sp)
  a0803c:	dd800617 	ldw	r22,24(sp)
  a08040:	dd400517 	ldw	r21,20(sp)
  a08044:	dd000417 	ldw	r20,16(sp)
  a08048:	dcc00317 	ldw	r19,12(sp)
  a0804c:	dc800217 	ldw	r18,8(sp)
  a08050:	dc400117 	ldw	r17,4(sp)
  a08054:	dc000017 	ldw	r16,0(sp)
  a08058:	dec00904 	addi	sp,sp,36
  a0805c:	f800283a 	ret
  a08060:	002f883a 	mov	r23,zero
  a08064:	003ff106 	br	a0802c <_fwalk_reent+0x8c>

00a08068 <_fwalk>:
  a08068:	defff804 	addi	sp,sp,-32
  a0806c:	dcc00315 	stw	r19,12(sp)
  a08070:	24c0b804 	addi	r19,r4,736
  a08074:	dd400515 	stw	r21,20(sp)
  a08078:	dfc00715 	stw	ra,28(sp)
  a0807c:	dd800615 	stw	r22,24(sp)
  a08080:	dd000415 	stw	r20,16(sp)
  a08084:	dc800215 	stw	r18,8(sp)
  a08088:	dc400115 	stw	r17,4(sp)
  a0808c:	dc000015 	stw	r16,0(sp)
  a08090:	282b883a 	mov	r21,r5
  a08094:	0a0745c0 	call	a0745c <__sfp_lock_acquire>
  a08098:	98001f26 	beq	r19,zero,a08118 <_fwalk+0xb0>
  a0809c:	002d883a 	mov	r22,zero
  a080a0:	9c800117 	ldw	r18,4(r19)
  a080a4:	9c000217 	ldw	r16,8(r19)
  a080a8:	90bfffc4 	addi	r2,r18,-1
  a080ac:	10000c16 	blt	r2,zero,a080e0 <_fwalk+0x78>
  a080b0:	0023883a 	mov	r17,zero
  a080b4:	053fffc4 	movi	r20,-1
  a080b8:	8080030f 	ldh	r2,12(r16)
  a080bc:	8c400044 	addi	r17,r17,1
  a080c0:	10000526 	beq	r2,zero,a080d8 <_fwalk+0x70>
  a080c4:	8080038f 	ldh	r2,14(r16)
  a080c8:	8009883a 	mov	r4,r16
  a080cc:	15000226 	beq	r2,r20,a080d8 <_fwalk+0x70>
  a080d0:	a83ee83a 	callr	r21
  a080d4:	b0acb03a 	or	r22,r22,r2
  a080d8:	84001704 	addi	r16,r16,92
  a080dc:	947ff61e 	bne	r18,r17,a080b8 <_fwalk+0x50>
  a080e0:	9cc00017 	ldw	r19,0(r19)
  a080e4:	983fee1e 	bne	r19,zero,a080a0 <_fwalk+0x38>
  a080e8:	0a074600 	call	a07460 <__sfp_lock_release>
  a080ec:	b005883a 	mov	r2,r22
  a080f0:	dfc00717 	ldw	ra,28(sp)
  a080f4:	dd800617 	ldw	r22,24(sp)
  a080f8:	dd400517 	ldw	r21,20(sp)
  a080fc:	dd000417 	ldw	r20,16(sp)
  a08100:	dcc00317 	ldw	r19,12(sp)
  a08104:	dc800217 	ldw	r18,8(sp)
  a08108:	dc400117 	ldw	r17,4(sp)
  a0810c:	dc000017 	ldw	r16,0(sp)
  a08110:	dec00804 	addi	sp,sp,32
  a08114:	f800283a 	ret
  a08118:	002d883a 	mov	r22,zero
  a0811c:	003ff206 	br	a080e8 <_fwalk+0x80>

00a08120 <__locale_charset>:
  a08120:	d0a00c17 	ldw	r2,-32720(gp)
  a08124:	f800283a 	ret

00a08128 <_localeconv_r>:
  a08128:	00802874 	movhi	r2,161
  a0812c:	10834604 	addi	r2,r2,3352
  a08130:	f800283a 	ret

00a08134 <localeconv>:
  a08134:	00802874 	movhi	r2,161
  a08138:	108ad104 	addi	r2,r2,11076
  a0813c:	11000017 	ldw	r4,0(r2)
  a08140:	0a081281 	jmpi	a08128 <_localeconv_r>

00a08144 <_setlocale_r>:
  a08144:	defffc04 	addi	sp,sp,-16
  a08148:	00c02874 	movhi	r3,161
  a0814c:	18c31e04 	addi	r3,r3,3192
  a08150:	dc800215 	stw	r18,8(sp)
  a08154:	dc400115 	stw	r17,4(sp)
  a08158:	dc000015 	stw	r16,0(sp)
  a0815c:	2023883a 	mov	r17,r4
  a08160:	2825883a 	mov	r18,r5
  a08164:	dfc00315 	stw	ra,12(sp)
  a08168:	3021883a 	mov	r16,r6
  a0816c:	3009883a 	mov	r4,r6
  a08170:	180b883a 	mov	r5,r3
  a08174:	30000926 	beq	r6,zero,a0819c <_setlocale_r+0x58>
  a08178:	0a0a5c80 	call	a0a5c8 <strcmp>
  a0817c:	8009883a 	mov	r4,r16
  a08180:	01402874 	movhi	r5,161
  a08184:	29432f04 	addi	r5,r5,3260
  a08188:	10000b1e 	bne	r2,zero,a081b8 <_setlocale_r+0x74>
  a0818c:	8c000d15 	stw	r16,52(r17)
  a08190:	8c800c15 	stw	r18,48(r17)
  a08194:	00c02874 	movhi	r3,161
  a08198:	18c31e04 	addi	r3,r3,3192
  a0819c:	1805883a 	mov	r2,r3
  a081a0:	dfc00317 	ldw	ra,12(sp)
  a081a4:	dc800217 	ldw	r18,8(sp)
  a081a8:	dc400117 	ldw	r17,4(sp)
  a081ac:	dc000017 	ldw	r16,0(sp)
  a081b0:	dec00404 	addi	sp,sp,16
  a081b4:	f800283a 	ret
  a081b8:	0a0a5c80 	call	a0a5c8 <strcmp>
  a081bc:	0007883a 	mov	r3,zero
  a081c0:	103ff226 	beq	r2,zero,a0818c <_setlocale_r+0x48>
  a081c4:	003ff506 	br	a0819c <_setlocale_r+0x58>

00a081c8 <setlocale>:
  a081c8:	01802874 	movhi	r6,161
  a081cc:	318ad104 	addi	r6,r6,11076
  a081d0:	2007883a 	mov	r3,r4
  a081d4:	31000017 	ldw	r4,0(r6)
  a081d8:	280d883a 	mov	r6,r5
  a081dc:	180b883a 	mov	r5,r3
  a081e0:	0a081441 	jmpi	a08144 <_setlocale_r>

00a081e4 <__smakebuf_r>:
  a081e4:	2880030b 	ldhu	r2,12(r5)
  a081e8:	deffed04 	addi	sp,sp,-76
  a081ec:	dc401015 	stw	r17,64(sp)
  a081f0:	1080008c 	andi	r2,r2,2
  a081f4:	dc000f15 	stw	r16,60(sp)
  a081f8:	dfc01215 	stw	ra,72(sp)
  a081fc:	dc801115 	stw	r18,68(sp)
  a08200:	2821883a 	mov	r16,r5
  a08204:	2023883a 	mov	r17,r4
  a08208:	10000b26 	beq	r2,zero,a08238 <__smakebuf_r+0x54>
  a0820c:	28c010c4 	addi	r3,r5,67
  a08210:	00800044 	movi	r2,1
  a08214:	28800515 	stw	r2,20(r5)
  a08218:	28c00415 	stw	r3,16(r5)
  a0821c:	28c00015 	stw	r3,0(r5)
  a08220:	dfc01217 	ldw	ra,72(sp)
  a08224:	dc801117 	ldw	r18,68(sp)
  a08228:	dc401017 	ldw	r17,64(sp)
  a0822c:	dc000f17 	ldw	r16,60(sp)
  a08230:	dec01304 	addi	sp,sp,76
  a08234:	f800283a 	ret
  a08238:	2940038f 	ldh	r5,14(r5)
  a0823c:	28002116 	blt	r5,zero,a082c4 <__smakebuf_r+0xe0>
  a08240:	d80d883a 	mov	r6,sp
  a08244:	0a0a9440 	call	a0a944 <_fstat_r>
  a08248:	10001e16 	blt	r2,zero,a082c4 <__smakebuf_r+0xe0>
  a0824c:	d8800117 	ldw	r2,4(sp)
  a08250:	00e00014 	movui	r3,32768
  a08254:	113c000c 	andi	r4,r2,61440
  a08258:	20c03126 	beq	r4,r3,a08320 <__smakebuf_r+0x13c>
  a0825c:	8080030b 	ldhu	r2,12(r16)
  a08260:	00c80004 	movi	r3,8192
  a08264:	10820014 	ori	r2,r2,2048
  a08268:	8080030d 	sth	r2,12(r16)
  a0826c:	20c01e26 	beq	r4,r3,a082e8 <__smakebuf_r+0x104>
  a08270:	04810004 	movi	r18,1024
  a08274:	8809883a 	mov	r4,r17
  a08278:	900b883a 	mov	r5,r18
  a0827c:	0a083780 	call	a08378 <_malloc_r>
  a08280:	1009883a 	mov	r4,r2
  a08284:	10003126 	beq	r2,zero,a0834c <__smakebuf_r+0x168>
  a08288:	80c0030b 	ldhu	r3,12(r16)
  a0828c:	00802834 	movhi	r2,160
  a08290:	109d5404 	addi	r2,r2,30032
  a08294:	88800f15 	stw	r2,60(r17)
  a08298:	18c02014 	ori	r3,r3,128
  a0829c:	84800515 	stw	r18,20(r16)
  a082a0:	80c0030d 	sth	r3,12(r16)
  a082a4:	81000415 	stw	r4,16(r16)
  a082a8:	81000015 	stw	r4,0(r16)
  a082ac:	dfc01217 	ldw	ra,72(sp)
  a082b0:	dc801117 	ldw	r18,68(sp)
  a082b4:	dc401017 	ldw	r17,64(sp)
  a082b8:	dc000f17 	ldw	r16,60(sp)
  a082bc:	dec01304 	addi	sp,sp,76
  a082c0:	f800283a 	ret
  a082c4:	80c0030b 	ldhu	r3,12(r16)
  a082c8:	1880200c 	andi	r2,r3,128
  a082cc:	10000426 	beq	r2,zero,a082e0 <__smakebuf_r+0xfc>
  a082d0:	04801004 	movi	r18,64
  a082d4:	18820014 	ori	r2,r3,2048
  a082d8:	8080030d 	sth	r2,12(r16)
  a082dc:	003fe506 	br	a08274 <__smakebuf_r+0x90>
  a082e0:	04810004 	movi	r18,1024
  a082e4:	003ffb06 	br	a082d4 <__smakebuf_r+0xf0>
  a082e8:	8140038f 	ldh	r5,14(r16)
  a082ec:	8809883a 	mov	r4,r17
  a082f0:	0a0a9b80 	call	a0a9b8 <_isatty_r>
  a082f4:	103fde26 	beq	r2,zero,a08270 <__smakebuf_r+0x8c>
  a082f8:	8080030b 	ldhu	r2,12(r16)
  a082fc:	80c010c4 	addi	r3,r16,67
  a08300:	04810004 	movi	r18,1024
  a08304:	10800054 	ori	r2,r2,1
  a08308:	8080030d 	sth	r2,12(r16)
  a0830c:	00800044 	movi	r2,1
  a08310:	80c00415 	stw	r3,16(r16)
  a08314:	80800515 	stw	r2,20(r16)
  a08318:	80c00015 	stw	r3,0(r16)
  a0831c:	003fd506 	br	a08274 <__smakebuf_r+0x90>
  a08320:	80c00a17 	ldw	r3,40(r16)
  a08324:	00802874 	movhi	r2,161
  a08328:	10a92104 	addi	r2,r2,-23420
  a0832c:	18bfcb1e 	bne	r3,r2,a0825c <__smakebuf_r+0x78>
  a08330:	8080030b 	ldhu	r2,12(r16)
  a08334:	00c10004 	movi	r3,1024
  a08338:	1825883a 	mov	r18,r3
  a0833c:	10c4b03a 	or	r2,r2,r3
  a08340:	8080030d 	sth	r2,12(r16)
  a08344:	80c01315 	stw	r3,76(r16)
  a08348:	003fca06 	br	a08274 <__smakebuf_r+0x90>
  a0834c:	8100030b 	ldhu	r4,12(r16)
  a08350:	2080800c 	andi	r2,r4,512
  a08354:	103fb21e 	bne	r2,zero,a08220 <__smakebuf_r+0x3c>
  a08358:	80c010c4 	addi	r3,r16,67
  a0835c:	21000094 	ori	r4,r4,2
  a08360:	00800044 	movi	r2,1
  a08364:	80800515 	stw	r2,20(r16)
  a08368:	8100030d 	sth	r4,12(r16)
  a0836c:	80c00415 	stw	r3,16(r16)
  a08370:	80c00015 	stw	r3,0(r16)
  a08374:	003faa06 	br	a08220 <__smakebuf_r+0x3c>

00a08378 <_malloc_r>:
  a08378:	defff604 	addi	sp,sp,-40
  a0837c:	28c002c4 	addi	r3,r5,11
  a08380:	00800584 	movi	r2,22
  a08384:	dc800215 	stw	r18,8(sp)
  a08388:	dfc00915 	stw	ra,36(sp)
  a0838c:	df000815 	stw	fp,32(sp)
  a08390:	ddc00715 	stw	r23,28(sp)
  a08394:	dd800615 	stw	r22,24(sp)
  a08398:	dd400515 	stw	r21,20(sp)
  a0839c:	dd000415 	stw	r20,16(sp)
  a083a0:	dcc00315 	stw	r19,12(sp)
  a083a4:	dc400115 	stw	r17,4(sp)
  a083a8:	dc000015 	stw	r16,0(sp)
  a083ac:	2025883a 	mov	r18,r4
  a083b0:	10c01236 	bltu	r2,r3,a083fc <_malloc_r+0x84>
  a083b4:	04400404 	movi	r17,16
  a083b8:	8940142e 	bgeu	r17,r5,a0840c <_malloc_r+0x94>
  a083bc:	00800304 	movi	r2,12
  a083c0:	0007883a 	mov	r3,zero
  a083c4:	90800015 	stw	r2,0(r18)
  a083c8:	1805883a 	mov	r2,r3
  a083cc:	dfc00917 	ldw	ra,36(sp)
  a083d0:	df000817 	ldw	fp,32(sp)
  a083d4:	ddc00717 	ldw	r23,28(sp)
  a083d8:	dd800617 	ldw	r22,24(sp)
  a083dc:	dd400517 	ldw	r21,20(sp)
  a083e0:	dd000417 	ldw	r20,16(sp)
  a083e4:	dcc00317 	ldw	r19,12(sp)
  a083e8:	dc800217 	ldw	r18,8(sp)
  a083ec:	dc400117 	ldw	r17,4(sp)
  a083f0:	dc000017 	ldw	r16,0(sp)
  a083f4:	dec00a04 	addi	sp,sp,40
  a083f8:	f800283a 	ret
  a083fc:	00bffe04 	movi	r2,-8
  a08400:	18a2703a 	and	r17,r3,r2
  a08404:	883fed16 	blt	r17,zero,a083bc <_malloc_r+0x44>
  a08408:	897fec36 	bltu	r17,r5,a083bc <_malloc_r+0x44>
  a0840c:	9009883a 	mov	r4,r18
  a08410:	0a0c7bc0 	call	a0c7bc <__malloc_lock>
  a08414:	00807dc4 	movi	r2,503
  a08418:	14402b2e 	bgeu	r2,r17,a084c8 <_malloc_r+0x150>
  a0841c:	8806d27a 	srli	r3,r17,9
  a08420:	18003f1e 	bne	r3,zero,a08520 <_malloc_r+0x1a8>
  a08424:	880cd0fa 	srli	r6,r17,3
  a08428:	300490fa 	slli	r2,r6,3
  a0842c:	02c02874 	movhi	r11,161
  a08430:	5ac4f304 	addi	r11,r11,5068
  a08434:	12cb883a 	add	r5,r2,r11
  a08438:	2c000317 	ldw	r16,12(r5)
  a0843c:	580f883a 	mov	r7,r11
  a08440:	2c00041e 	bne	r5,r16,a08454 <_malloc_r+0xdc>
  a08444:	00000a06 	br	a08470 <_malloc_r+0xf8>
  a08448:	1800860e 	bge	r3,zero,a08664 <_malloc_r+0x2ec>
  a0844c:	84000317 	ldw	r16,12(r16)
  a08450:	2c000726 	beq	r5,r16,a08470 <_malloc_r+0xf8>
  a08454:	80800117 	ldw	r2,4(r16)
  a08458:	00ffff04 	movi	r3,-4
  a0845c:	10c8703a 	and	r4,r2,r3
  a08460:	2447c83a 	sub	r3,r4,r17
  a08464:	008003c4 	movi	r2,15
  a08468:	10fff70e 	bge	r2,r3,a08448 <_malloc_r+0xd0>
  a0846c:	31bfffc4 	addi	r6,r6,-1
  a08470:	32400044 	addi	r9,r6,1
  a08474:	02802874 	movhi	r10,161
  a08478:	5284f504 	addi	r10,r10,5076
  a0847c:	54000217 	ldw	r16,8(r10)
  a08480:	8280a026 	beq	r16,r10,a08704 <_malloc_r+0x38c>
  a08484:	80800117 	ldw	r2,4(r16)
  a08488:	00ffff04 	movi	r3,-4
  a0848c:	10ca703a 	and	r5,r2,r3
  a08490:	2c4dc83a 	sub	r6,r5,r17
  a08494:	008003c4 	movi	r2,15
  a08498:	11808316 	blt	r2,r6,a086a8 <_malloc_r+0x330>
  a0849c:	52800315 	stw	r10,12(r10)
  a084a0:	52800215 	stw	r10,8(r10)
  a084a4:	30002916 	blt	r6,zero,a0854c <_malloc_r+0x1d4>
  a084a8:	8147883a 	add	r3,r16,r5
  a084ac:	18800117 	ldw	r2,4(r3)
  a084b0:	9009883a 	mov	r4,r18
  a084b4:	10800054 	ori	r2,r2,1
  a084b8:	18800115 	stw	r2,4(r3)
  a084bc:	0a0c7dc0 	call	a0c7dc <__malloc_unlock>
  a084c0:	80c00204 	addi	r3,r16,8
  a084c4:	003fc006 	br	a083c8 <_malloc_r+0x50>
  a084c8:	02c02874 	movhi	r11,161
  a084cc:	5ac4f304 	addi	r11,r11,5068
  a084d0:	8ac5883a 	add	r2,r17,r11
  a084d4:	14000317 	ldw	r16,12(r2)
  a084d8:	580f883a 	mov	r7,r11
  a084dc:	8806d0fa 	srli	r3,r17,3
  a084e0:	14006c26 	beq	r2,r16,a08694 <_malloc_r+0x31c>
  a084e4:	80c00117 	ldw	r3,4(r16)
  a084e8:	00bfff04 	movi	r2,-4
  a084ec:	81800317 	ldw	r6,12(r16)
  a084f0:	1886703a 	and	r3,r3,r2
  a084f4:	80c7883a 	add	r3,r16,r3
  a084f8:	18800117 	ldw	r2,4(r3)
  a084fc:	81400217 	ldw	r5,8(r16)
  a08500:	9009883a 	mov	r4,r18
  a08504:	10800054 	ori	r2,r2,1
  a08508:	18800115 	stw	r2,4(r3)
  a0850c:	31400215 	stw	r5,8(r6)
  a08510:	29800315 	stw	r6,12(r5)
  a08514:	0a0c7dc0 	call	a0c7dc <__malloc_unlock>
  a08518:	80c00204 	addi	r3,r16,8
  a0851c:	003faa06 	br	a083c8 <_malloc_r+0x50>
  a08520:	00800104 	movi	r2,4
  a08524:	10c0052e 	bgeu	r2,r3,a0853c <_malloc_r+0x1c4>
  a08528:	00800504 	movi	r2,20
  a0852c:	10c07836 	bltu	r2,r3,a08710 <_malloc_r+0x398>
  a08530:	198016c4 	addi	r6,r3,91
  a08534:	300490fa 	slli	r2,r6,3
  a08538:	003fbc06 	br	a0842c <_malloc_r+0xb4>
  a0853c:	8804d1ba 	srli	r2,r17,6
  a08540:	11800e04 	addi	r6,r2,56
  a08544:	300490fa 	slli	r2,r6,3
  a08548:	003fb806 	br	a0842c <_malloc_r+0xb4>
  a0854c:	00807fc4 	movi	r2,511
  a08550:	1140bb36 	bltu	r2,r5,a08840 <_malloc_r+0x4c8>
  a08554:	2806d0fa 	srli	r3,r5,3
  a08558:	573ffe04 	addi	fp,r10,-8
  a0855c:	00800044 	movi	r2,1
  a08560:	180890fa 	slli	r4,r3,3
  a08564:	1807d0ba 	srai	r3,r3,2
  a08568:	e1c00117 	ldw	r7,4(fp)
  a0856c:	5909883a 	add	r4,r11,r4
  a08570:	21400217 	ldw	r5,8(r4)
  a08574:	10c4983a 	sll	r2,r2,r3
  a08578:	81000315 	stw	r4,12(r16)
  a0857c:	81400215 	stw	r5,8(r16)
  a08580:	388eb03a 	or	r7,r7,r2
  a08584:	2c000315 	stw	r16,12(r5)
  a08588:	24000215 	stw	r16,8(r4)
  a0858c:	e1c00115 	stw	r7,4(fp)
  a08590:	4807883a 	mov	r3,r9
  a08594:	4800cd16 	blt	r9,zero,a088cc <_malloc_r+0x554>
  a08598:	1807d0ba 	srai	r3,r3,2
  a0859c:	00800044 	movi	r2,1
  a085a0:	10c8983a 	sll	r4,r2,r3
  a085a4:	39004436 	bltu	r7,r4,a086b8 <_malloc_r+0x340>
  a085a8:	21c4703a 	and	r2,r4,r7
  a085ac:	10000a1e 	bne	r2,zero,a085d8 <_malloc_r+0x260>
  a085b0:	2109883a 	add	r4,r4,r4
  a085b4:	00bfff04 	movi	r2,-4
  a085b8:	4884703a 	and	r2,r9,r2
  a085bc:	3906703a 	and	r3,r7,r4
  a085c0:	12400104 	addi	r9,r2,4
  a085c4:	1800041e 	bne	r3,zero,a085d8 <_malloc_r+0x260>
  a085c8:	2109883a 	add	r4,r4,r4
  a085cc:	3904703a 	and	r2,r7,r4
  a085d0:	4a400104 	addi	r9,r9,4
  a085d4:	103ffc26 	beq	r2,zero,a085c8 <_malloc_r+0x250>
  a085d8:	480490fa 	slli	r2,r9,3
  a085dc:	4819883a 	mov	r12,r9
  a085e0:	023fff04 	movi	r8,-4
  a085e4:	589b883a 	add	r13,r11,r2
  a085e8:	6807883a 	mov	r3,r13
  a085ec:	014003c4 	movi	r5,15
  a085f0:	1c000317 	ldw	r16,12(r3)
  a085f4:	1c00041e 	bne	r3,r16,a08608 <_malloc_r+0x290>
  a085f8:	0000a706 	br	a08898 <_malloc_r+0x520>
  a085fc:	3000ab0e 	bge	r6,zero,a088ac <_malloc_r+0x534>
  a08600:	84000317 	ldw	r16,12(r16)
  a08604:	1c00a426 	beq	r3,r16,a08898 <_malloc_r+0x520>
  a08608:	80800117 	ldw	r2,4(r16)
  a0860c:	1204703a 	and	r2,r2,r8
  a08610:	144dc83a 	sub	r6,r2,r17
  a08614:	29bff90e 	bge	r5,r6,a085fc <_malloc_r+0x284>
  a08618:	81000317 	ldw	r4,12(r16)
  a0861c:	80c00217 	ldw	r3,8(r16)
  a08620:	89400054 	ori	r5,r17,1
  a08624:	8445883a 	add	r2,r16,r17
  a08628:	20c00215 	stw	r3,8(r4)
  a0862c:	19000315 	stw	r4,12(r3)
  a08630:	81400115 	stw	r5,4(r16)
  a08634:	1187883a 	add	r3,r2,r6
  a08638:	31000054 	ori	r4,r6,1
  a0863c:	50800315 	stw	r2,12(r10)
  a08640:	50800215 	stw	r2,8(r10)
  a08644:	19800015 	stw	r6,0(r3)
  a08648:	11000115 	stw	r4,4(r2)
  a0864c:	12800215 	stw	r10,8(r2)
  a08650:	12800315 	stw	r10,12(r2)
  a08654:	9009883a 	mov	r4,r18
  a08658:	0a0c7dc0 	call	a0c7dc <__malloc_unlock>
  a0865c:	80c00204 	addi	r3,r16,8
  a08660:	003f5906 	br	a083c8 <_malloc_r+0x50>
  a08664:	8109883a 	add	r4,r16,r4
  a08668:	20800117 	ldw	r2,4(r4)
  a0866c:	80c00217 	ldw	r3,8(r16)
  a08670:	81400317 	ldw	r5,12(r16)
  a08674:	10800054 	ori	r2,r2,1
  a08678:	20800115 	stw	r2,4(r4)
  a0867c:	28c00215 	stw	r3,8(r5)
  a08680:	19400315 	stw	r5,12(r3)
  a08684:	9009883a 	mov	r4,r18
  a08688:	0a0c7dc0 	call	a0c7dc <__malloc_unlock>
  a0868c:	80c00204 	addi	r3,r16,8
  a08690:	003f4d06 	br	a083c8 <_malloc_r+0x50>
  a08694:	80800204 	addi	r2,r16,8
  a08698:	14000317 	ldw	r16,12(r2)
  a0869c:	143f911e 	bne	r2,r16,a084e4 <_malloc_r+0x16c>
  a086a0:	1a400084 	addi	r9,r3,2
  a086a4:	003f7306 	br	a08474 <_malloc_r+0xfc>
  a086a8:	88c00054 	ori	r3,r17,1
  a086ac:	8445883a 	add	r2,r16,r17
  a086b0:	80c00115 	stw	r3,4(r16)
  a086b4:	003fdf06 	br	a08634 <_malloc_r+0x2bc>
  a086b8:	e4000217 	ldw	r16,8(fp)
  a086bc:	00bfff04 	movi	r2,-4
  a086c0:	80c00117 	ldw	r3,4(r16)
  a086c4:	802d883a 	mov	r22,r16
  a086c8:	18aa703a 	and	r21,r3,r2
  a086cc:	ac401636 	bltu	r21,r17,a08728 <_malloc_r+0x3b0>
  a086d0:	ac49c83a 	sub	r4,r21,r17
  a086d4:	008003c4 	movi	r2,15
  a086d8:	1100130e 	bge	r2,r4,a08728 <_malloc_r+0x3b0>
  a086dc:	88800054 	ori	r2,r17,1
  a086e0:	8447883a 	add	r3,r16,r17
  a086e4:	80800115 	stw	r2,4(r16)
  a086e8:	20800054 	ori	r2,r4,1
  a086ec:	18800115 	stw	r2,4(r3)
  a086f0:	e0c00215 	stw	r3,8(fp)
  a086f4:	9009883a 	mov	r4,r18
  a086f8:	0a0c7dc0 	call	a0c7dc <__malloc_unlock>
  a086fc:	80c00204 	addi	r3,r16,8
  a08700:	003f3106 	br	a083c8 <_malloc_r+0x50>
  a08704:	39c00117 	ldw	r7,4(r7)
  a08708:	573ffe04 	addi	fp,r10,-8
  a0870c:	003fa006 	br	a08590 <_malloc_r+0x218>
  a08710:	00801504 	movi	r2,84
  a08714:	10c06736 	bltu	r2,r3,a088b4 <_malloc_r+0x53c>
  a08718:	8804d33a 	srli	r2,r17,12
  a0871c:	11801b84 	addi	r6,r2,110
  a08720:	300490fa 	slli	r2,r6,3
  a08724:	003f4106 	br	a0842c <_malloc_r+0xb4>
  a08728:	d0a71617 	ldw	r2,-25512(gp)
  a0872c:	d0e00e17 	ldw	r3,-32712(gp)
  a08730:	053fffc4 	movi	r20,-1
  a08734:	10800404 	addi	r2,r2,16
  a08738:	88a7883a 	add	r19,r17,r2
  a0873c:	1d000326 	beq	r3,r20,a0874c <_malloc_r+0x3d4>
  a08740:	98c3ffc4 	addi	r3,r19,4095
  a08744:	00bc0004 	movi	r2,-4096
  a08748:	18a6703a 	and	r19,r3,r2
  a0874c:	9009883a 	mov	r4,r18
  a08750:	980b883a 	mov	r5,r19
  a08754:	0a0a40c0 	call	a0a40c <_sbrk_r>
  a08758:	1009883a 	mov	r4,r2
  a0875c:	15000426 	beq	r2,r20,a08770 <_malloc_r+0x3f8>
  a08760:	854b883a 	add	r5,r16,r21
  a08764:	1029883a 	mov	r20,r2
  a08768:	11405a2e 	bgeu	r2,r5,a088d4 <_malloc_r+0x55c>
  a0876c:	87000c26 	beq	r16,fp,a087a0 <_malloc_r+0x428>
  a08770:	e4000217 	ldw	r16,8(fp)
  a08774:	80c00117 	ldw	r3,4(r16)
  a08778:	00bfff04 	movi	r2,-4
  a0877c:	1884703a 	and	r2,r3,r2
  a08780:	14400336 	bltu	r2,r17,a08790 <_malloc_r+0x418>
  a08784:	1449c83a 	sub	r4,r2,r17
  a08788:	008003c4 	movi	r2,15
  a0878c:	113fd316 	blt	r2,r4,a086dc <_malloc_r+0x364>
  a08790:	9009883a 	mov	r4,r18
  a08794:	0a0c7dc0 	call	a0c7dc <__malloc_unlock>
  a08798:	0007883a 	mov	r3,zero
  a0879c:	003f0a06 	br	a083c8 <_malloc_r+0x50>
  a087a0:	05c02874 	movhi	r23,161
  a087a4:	bdd1e804 	addi	r23,r23,18336
  a087a8:	b8800017 	ldw	r2,0(r23)
  a087ac:	988d883a 	add	r6,r19,r2
  a087b0:	b9800015 	stw	r6,0(r23)
  a087b4:	d0e00e17 	ldw	r3,-32712(gp)
  a087b8:	00bfffc4 	movi	r2,-1
  a087bc:	18808e26 	beq	r3,r2,a089f8 <_malloc_r+0x680>
  a087c0:	2145c83a 	sub	r2,r4,r5
  a087c4:	3085883a 	add	r2,r6,r2
  a087c8:	b8800015 	stw	r2,0(r23)
  a087cc:	20c001cc 	andi	r3,r4,7
  a087d0:	18005f1e 	bne	r3,zero,a08950 <_malloc_r+0x5d8>
  a087d4:	000b883a 	mov	r5,zero
  a087d8:	a4c5883a 	add	r2,r20,r19
  a087dc:	1083ffcc 	andi	r2,r2,4095
  a087e0:	00c40004 	movi	r3,4096
  a087e4:	1887c83a 	sub	r3,r3,r2
  a087e8:	28e7883a 	add	r19,r5,r3
  a087ec:	9009883a 	mov	r4,r18
  a087f0:	980b883a 	mov	r5,r19
  a087f4:	0a0a40c0 	call	a0a40c <_sbrk_r>
  a087f8:	1007883a 	mov	r3,r2
  a087fc:	00bfffc4 	movi	r2,-1
  a08800:	18807a26 	beq	r3,r2,a089ec <_malloc_r+0x674>
  a08804:	1d05c83a 	sub	r2,r3,r20
  a08808:	9885883a 	add	r2,r19,r2
  a0880c:	10c00054 	ori	r3,r2,1
  a08810:	b8800017 	ldw	r2,0(r23)
  a08814:	a021883a 	mov	r16,r20
  a08818:	a0c00115 	stw	r3,4(r20)
  a0881c:	9885883a 	add	r2,r19,r2
  a08820:	b8800015 	stw	r2,0(r23)
  a08824:	e5000215 	stw	r20,8(fp)
  a08828:	b7003626 	beq	r22,fp,a08904 <_malloc_r+0x58c>
  a0882c:	018003c4 	movi	r6,15
  a08830:	35404b36 	bltu	r6,r21,a08960 <_malloc_r+0x5e8>
  a08834:	00800044 	movi	r2,1
  a08838:	a0800115 	stw	r2,4(r20)
  a0883c:	003fcd06 	br	a08774 <_malloc_r+0x3fc>
  a08840:	2808d27a 	srli	r4,r5,9
  a08844:	2000371e 	bne	r4,zero,a08924 <_malloc_r+0x5ac>
  a08848:	2808d0fa 	srli	r4,r5,3
  a0884c:	200690fa 	slli	r3,r4,3
  a08850:	1ad1883a 	add	r8,r3,r11
  a08854:	41800217 	ldw	r6,8(r8)
  a08858:	41805b26 	beq	r8,r6,a089c8 <_malloc_r+0x650>
  a0885c:	30800117 	ldw	r2,4(r6)
  a08860:	00ffff04 	movi	r3,-4
  a08864:	10c4703a 	and	r2,r2,r3
  a08868:	2880022e 	bgeu	r5,r2,a08874 <_malloc_r+0x4fc>
  a0886c:	31800217 	ldw	r6,8(r6)
  a08870:	41bffa1e 	bne	r8,r6,a0885c <_malloc_r+0x4e4>
  a08874:	32000317 	ldw	r8,12(r6)
  a08878:	39c00117 	ldw	r7,4(r7)
  a0887c:	82000315 	stw	r8,12(r16)
  a08880:	81800215 	stw	r6,8(r16)
  a08884:	07002874 	movhi	fp,161
  a08888:	e704f304 	addi	fp,fp,5068
  a0888c:	34000315 	stw	r16,12(r6)
  a08890:	44000215 	stw	r16,8(r8)
  a08894:	003f3e06 	br	a08590 <_malloc_r+0x218>
  a08898:	63000044 	addi	r12,r12,1
  a0889c:	608000cc 	andi	r2,r12,3
  a088a0:	10005d26 	beq	r2,zero,a08a18 <_malloc_r+0x6a0>
  a088a4:	18c00204 	addi	r3,r3,8
  a088a8:	003f5106 	br	a085f0 <_malloc_r+0x278>
  a088ac:	8089883a 	add	r4,r16,r2
  a088b0:	003f6d06 	br	a08668 <_malloc_r+0x2f0>
  a088b4:	00805504 	movi	r2,340
  a088b8:	10c02036 	bltu	r2,r3,a0893c <_malloc_r+0x5c4>
  a088bc:	8804d3fa 	srli	r2,r17,15
  a088c0:	11801dc4 	addi	r6,r2,119
  a088c4:	300490fa 	slli	r2,r6,3
  a088c8:	003ed806 	br	a0842c <_malloc_r+0xb4>
  a088cc:	48c000c4 	addi	r3,r9,3
  a088d0:	003f3106 	br	a08598 <_malloc_r+0x220>
  a088d4:	05c02874 	movhi	r23,161
  a088d8:	bdd1e804 	addi	r23,r23,18336
  a088dc:	b8800017 	ldw	r2,0(r23)
  a088e0:	988d883a 	add	r6,r19,r2
  a088e4:	b9800015 	stw	r6,0(r23)
  a088e8:	293fb21e 	bne	r5,r4,a087b4 <_malloc_r+0x43c>
  a088ec:	2083ffcc 	andi	r2,r4,4095
  a088f0:	103fb01e 	bne	r2,zero,a087b4 <_malloc_r+0x43c>
  a088f4:	e4000217 	ldw	r16,8(fp)
  a088f8:	9d45883a 	add	r2,r19,r21
  a088fc:	10800054 	ori	r2,r2,1
  a08900:	80800115 	stw	r2,4(r16)
  a08904:	b8c00017 	ldw	r3,0(r23)
  a08908:	d0a71717 	ldw	r2,-25508(gp)
  a0890c:	10c0012e 	bgeu	r2,r3,a08914 <_malloc_r+0x59c>
  a08910:	d0e71715 	stw	r3,-25508(gp)
  a08914:	d0a71817 	ldw	r2,-25504(gp)
  a08918:	10ff962e 	bgeu	r2,r3,a08774 <_malloc_r+0x3fc>
  a0891c:	d0e71815 	stw	r3,-25504(gp)
  a08920:	003f9406 	br	a08774 <_malloc_r+0x3fc>
  a08924:	00800104 	movi	r2,4
  a08928:	11001e36 	bltu	r2,r4,a089a4 <_malloc_r+0x62c>
  a0892c:	2804d1ba 	srli	r2,r5,6
  a08930:	11000e04 	addi	r4,r2,56
  a08934:	200690fa 	slli	r3,r4,3
  a08938:	003fc506 	br	a08850 <_malloc_r+0x4d8>
  a0893c:	00815504 	movi	r2,1364
  a08940:	10c01d2e 	bgeu	r2,r3,a089b8 <_malloc_r+0x640>
  a08944:	01801f84 	movi	r6,126
  a08948:	0080fc04 	movi	r2,1008
  a0894c:	003eb706 	br	a0842c <_malloc_r+0xb4>
  a08950:	00800204 	movi	r2,8
  a08954:	10cbc83a 	sub	r5,r2,r3
  a08958:	2169883a 	add	r20,r4,r5
  a0895c:	003f9e06 	br	a087d8 <_malloc_r+0x460>
  a08960:	00bffe04 	movi	r2,-8
  a08964:	a93ffd04 	addi	r4,r21,-12
  a08968:	2088703a 	and	r4,r4,r2
  a0896c:	b10b883a 	add	r5,r22,r4
  a08970:	00c00144 	movi	r3,5
  a08974:	28c00215 	stw	r3,8(r5)
  a08978:	28c00115 	stw	r3,4(r5)
  a0897c:	b0800117 	ldw	r2,4(r22)
  a08980:	1080004c 	andi	r2,r2,1
  a08984:	2084b03a 	or	r2,r4,r2
  a08988:	b0800115 	stw	r2,4(r22)
  a0898c:	313fdd2e 	bgeu	r6,r4,a08904 <_malloc_r+0x58c>
  a08990:	b1400204 	addi	r5,r22,8
  a08994:	9009883a 	mov	r4,r18
  a08998:	0a077f00 	call	a077f0 <_free_r>
  a0899c:	e4000217 	ldw	r16,8(fp)
  a089a0:	003fd806 	br	a08904 <_malloc_r+0x58c>
  a089a4:	00800504 	movi	r2,20
  a089a8:	11001536 	bltu	r2,r4,a08a00 <_malloc_r+0x688>
  a089ac:	210016c4 	addi	r4,r4,91
  a089b0:	200690fa 	slli	r3,r4,3
  a089b4:	003fa606 	br	a08850 <_malloc_r+0x4d8>
  a089b8:	8804d4ba 	srli	r2,r17,18
  a089bc:	11801f04 	addi	r6,r2,124
  a089c0:	300490fa 	slli	r2,r6,3
  a089c4:	003e9906 	br	a0842c <_malloc_r+0xb4>
  a089c8:	2009d0ba 	srai	r4,r4,2
  a089cc:	01402874 	movhi	r5,161
  a089d0:	2944f304 	addi	r5,r5,5068
  a089d4:	00c00044 	movi	r3,1
  a089d8:	28800117 	ldw	r2,4(r5)
  a089dc:	1906983a 	sll	r3,r3,r4
  a089e0:	10c4b03a 	or	r2,r2,r3
  a089e4:	28800115 	stw	r2,4(r5)
  a089e8:	003fa306 	br	a08878 <_malloc_r+0x500>
  a089ec:	0027883a 	mov	r19,zero
  a089f0:	00c00044 	movi	r3,1
  a089f4:	003f8606 	br	a08810 <_malloc_r+0x498>
  a089f8:	d1200e15 	stw	r4,-32712(gp)
  a089fc:	003f7306 	br	a087cc <_malloc_r+0x454>
  a08a00:	00801504 	movi	r2,84
  a08a04:	11001936 	bltu	r2,r4,a08a6c <_malloc_r+0x6f4>
  a08a08:	2804d33a 	srli	r2,r5,12
  a08a0c:	11001b84 	addi	r4,r2,110
  a08a10:	200690fa 	slli	r3,r4,3
  a08a14:	003f8e06 	br	a08850 <_malloc_r+0x4d8>
  a08a18:	480b883a 	mov	r5,r9
  a08a1c:	6807883a 	mov	r3,r13
  a08a20:	288000cc 	andi	r2,r5,3
  a08a24:	18fffe04 	addi	r3,r3,-8
  a08a28:	297fffc4 	addi	r5,r5,-1
  a08a2c:	10001526 	beq	r2,zero,a08a84 <_malloc_r+0x70c>
  a08a30:	18800217 	ldw	r2,8(r3)
  a08a34:	10fffa26 	beq	r2,r3,a08a20 <_malloc_r+0x6a8>
  a08a38:	2109883a 	add	r4,r4,r4
  a08a3c:	393f1e36 	bltu	r7,r4,a086b8 <_malloc_r+0x340>
  a08a40:	203f1d26 	beq	r4,zero,a086b8 <_malloc_r+0x340>
  a08a44:	21c4703a 	and	r2,r4,r7
  a08a48:	10000226 	beq	r2,zero,a08a54 <_malloc_r+0x6dc>
  a08a4c:	6013883a 	mov	r9,r12
  a08a50:	003ee106 	br	a085d8 <_malloc_r+0x260>
  a08a54:	2109883a 	add	r4,r4,r4
  a08a58:	3904703a 	and	r2,r7,r4
  a08a5c:	63000104 	addi	r12,r12,4
  a08a60:	103ffc26 	beq	r2,zero,a08a54 <_malloc_r+0x6dc>
  a08a64:	6013883a 	mov	r9,r12
  a08a68:	003edb06 	br	a085d8 <_malloc_r+0x260>
  a08a6c:	00805504 	movi	r2,340
  a08a70:	11000836 	bltu	r2,r4,a08a94 <_malloc_r+0x71c>
  a08a74:	2804d3fa 	srli	r2,r5,15
  a08a78:	11001dc4 	addi	r4,r2,119
  a08a7c:	200690fa 	slli	r3,r4,3
  a08a80:	003f7306 	br	a08850 <_malloc_r+0x4d8>
  a08a84:	0104303a 	nor	r2,zero,r4
  a08a88:	388e703a 	and	r7,r7,r2
  a08a8c:	e1c00115 	stw	r7,4(fp)
  a08a90:	003fe906 	br	a08a38 <_malloc_r+0x6c0>
  a08a94:	00815504 	movi	r2,1364
  a08a98:	1100032e 	bgeu	r2,r4,a08aa8 <_malloc_r+0x730>
  a08a9c:	01001f84 	movi	r4,126
  a08aa0:	00c0fc04 	movi	r3,1008
  a08aa4:	003f6a06 	br	a08850 <_malloc_r+0x4d8>
  a08aa8:	2804d4ba 	srli	r2,r5,18
  a08aac:	11001f04 	addi	r4,r2,124
  a08ab0:	200690fa 	slli	r3,r4,3
  a08ab4:	003f6606 	br	a08850 <_malloc_r+0x4d8>

00a08ab8 <memchr>:
  a08ab8:	008000c4 	movi	r2,3
  a08abc:	29403fcc 	andi	r5,r5,255
  a08ac0:	2007883a 	mov	r3,r4
  a08ac4:	1180022e 	bgeu	r2,r6,a08ad0 <memchr+0x18>
  a08ac8:	2084703a 	and	r2,r4,r2
  a08acc:	10000b26 	beq	r2,zero,a08afc <memchr+0x44>
  a08ad0:	313fffc4 	addi	r4,r6,-1
  a08ad4:	3000051e 	bne	r6,zero,a08aec <memchr+0x34>
  a08ad8:	00002c06 	br	a08b8c <memchr+0xd4>
  a08adc:	213fffc4 	addi	r4,r4,-1
  a08ae0:	00bfffc4 	movi	r2,-1
  a08ae4:	18c00044 	addi	r3,r3,1
  a08ae8:	20802826 	beq	r4,r2,a08b8c <memchr+0xd4>
  a08aec:	18800003 	ldbu	r2,0(r3)
  a08af0:	28bffa1e 	bne	r5,r2,a08adc <memchr+0x24>
  a08af4:	1805883a 	mov	r2,r3
  a08af8:	f800283a 	ret
  a08afc:	0011883a 	mov	r8,zero
  a08b00:	0007883a 	mov	r3,zero
  a08b04:	01c00104 	movi	r7,4
  a08b08:	4004923a 	slli	r2,r8,8
  a08b0c:	18c00044 	addi	r3,r3,1
  a08b10:	1151883a 	add	r8,r2,r5
  a08b14:	19fffc1e 	bne	r3,r7,a08b08 <memchr+0x50>
  a08b18:	02bfbff4 	movhi	r10,65279
  a08b1c:	52bfbfc4 	addi	r10,r10,-257
  a08b20:	02602074 	movhi	r9,32897
  a08b24:	4a602004 	addi	r9,r9,-32640
  a08b28:	02c000c4 	movi	r11,3
  a08b2c:	20800017 	ldw	r2,0(r4)
  a08b30:	31bfff04 	addi	r6,r6,-4
  a08b34:	200f883a 	mov	r7,r4
  a08b38:	1204f03a 	xor	r2,r2,r8
  a08b3c:	1287883a 	add	r3,r2,r10
  a08b40:	1a46703a 	and	r3,r3,r9
  a08b44:	0084303a 	nor	r2,zero,r2
  a08b48:	10c4703a 	and	r2,r2,r3
  a08b4c:	10000b26 	beq	r2,zero,a08b7c <memchr+0xc4>
  a08b50:	20800003 	ldbu	r2,0(r4)
  a08b54:	28800f26 	beq	r5,r2,a08b94 <memchr+0xdc>
  a08b58:	20800043 	ldbu	r2,1(r4)
  a08b5c:	21c00044 	addi	r7,r4,1
  a08b60:	28800c26 	beq	r5,r2,a08b94 <memchr+0xdc>
  a08b64:	20800083 	ldbu	r2,2(r4)
  a08b68:	21c00084 	addi	r7,r4,2
  a08b6c:	28800926 	beq	r5,r2,a08b94 <memchr+0xdc>
  a08b70:	208000c3 	ldbu	r2,3(r4)
  a08b74:	21c000c4 	addi	r7,r4,3
  a08b78:	28800626 	beq	r5,r2,a08b94 <memchr+0xdc>
  a08b7c:	21000104 	addi	r4,r4,4
  a08b80:	59bfea36 	bltu	r11,r6,a08b2c <memchr+0x74>
  a08b84:	2007883a 	mov	r3,r4
  a08b88:	003fd106 	br	a08ad0 <memchr+0x18>
  a08b8c:	0005883a 	mov	r2,zero
  a08b90:	f800283a 	ret
  a08b94:	3805883a 	mov	r2,r7
  a08b98:	f800283a 	ret

00a08b9c <memcpy>:
  a08b9c:	01c003c4 	movi	r7,15
  a08ba0:	2007883a 	mov	r3,r4
  a08ba4:	3980032e 	bgeu	r7,r6,a08bb4 <memcpy+0x18>
  a08ba8:	2904b03a 	or	r2,r5,r4
  a08bac:	108000cc 	andi	r2,r2,3
  a08bb0:	10000926 	beq	r2,zero,a08bd8 <memcpy+0x3c>
  a08bb4:	30000626 	beq	r6,zero,a08bd0 <memcpy+0x34>
  a08bb8:	30cd883a 	add	r6,r6,r3
  a08bbc:	28800003 	ldbu	r2,0(r5)
  a08bc0:	29400044 	addi	r5,r5,1
  a08bc4:	18800005 	stb	r2,0(r3)
  a08bc8:	18c00044 	addi	r3,r3,1
  a08bcc:	30fffb1e 	bne	r6,r3,a08bbc <memcpy+0x20>
  a08bd0:	2005883a 	mov	r2,r4
  a08bd4:	f800283a 	ret
  a08bd8:	3811883a 	mov	r8,r7
  a08bdc:	200f883a 	mov	r7,r4
  a08be0:	28c00017 	ldw	r3,0(r5)
  a08be4:	31bffc04 	addi	r6,r6,-16
  a08be8:	38c00015 	stw	r3,0(r7)
  a08bec:	28800117 	ldw	r2,4(r5)
  a08bf0:	38800115 	stw	r2,4(r7)
  a08bf4:	28c00217 	ldw	r3,8(r5)
  a08bf8:	38c00215 	stw	r3,8(r7)
  a08bfc:	28800317 	ldw	r2,12(r5)
  a08c00:	29400404 	addi	r5,r5,16
  a08c04:	38800315 	stw	r2,12(r7)
  a08c08:	39c00404 	addi	r7,r7,16
  a08c0c:	41bff436 	bltu	r8,r6,a08be0 <memcpy+0x44>
  a08c10:	008000c4 	movi	r2,3
  a08c14:	1180072e 	bgeu	r2,r6,a08c34 <memcpy+0x98>
  a08c18:	1007883a 	mov	r3,r2
  a08c1c:	28800017 	ldw	r2,0(r5)
  a08c20:	31bfff04 	addi	r6,r6,-4
  a08c24:	29400104 	addi	r5,r5,4
  a08c28:	38800015 	stw	r2,0(r7)
  a08c2c:	39c00104 	addi	r7,r7,4
  a08c30:	19bffa36 	bltu	r3,r6,a08c1c <memcpy+0x80>
  a08c34:	3807883a 	mov	r3,r7
  a08c38:	003fde06 	br	a08bb4 <memcpy+0x18>

00a08c3c <memmove>:
  a08c3c:	2807883a 	mov	r3,r5
  a08c40:	2011883a 	mov	r8,r4
  a08c44:	29000c2e 	bgeu	r5,r4,a08c78 <memmove+0x3c>
  a08c48:	298f883a 	add	r7,r5,r6
  a08c4c:	21c00a2e 	bgeu	r4,r7,a08c78 <memmove+0x3c>
  a08c50:	30000726 	beq	r6,zero,a08c70 <memmove+0x34>
  a08c54:	2187883a 	add	r3,r4,r6
  a08c58:	198dc83a 	sub	r6,r3,r6
  a08c5c:	39ffffc4 	addi	r7,r7,-1
  a08c60:	38800003 	ldbu	r2,0(r7)
  a08c64:	18ffffc4 	addi	r3,r3,-1
  a08c68:	18800005 	stb	r2,0(r3)
  a08c6c:	19bffb1e 	bne	r3,r6,a08c5c <memmove+0x20>
  a08c70:	2005883a 	mov	r2,r4
  a08c74:	f800283a 	ret
  a08c78:	01c003c4 	movi	r7,15
  a08c7c:	39800a36 	bltu	r7,r6,a08ca8 <memmove+0x6c>
  a08c80:	303ffb26 	beq	r6,zero,a08c70 <memmove+0x34>
  a08c84:	400f883a 	mov	r7,r8
  a08c88:	320d883a 	add	r6,r6,r8
  a08c8c:	28800003 	ldbu	r2,0(r5)
  a08c90:	29400044 	addi	r5,r5,1
  a08c94:	38800005 	stb	r2,0(r7)
  a08c98:	39c00044 	addi	r7,r7,1
  a08c9c:	39bffb1e 	bne	r7,r6,a08c8c <memmove+0x50>
  a08ca0:	2005883a 	mov	r2,r4
  a08ca4:	f800283a 	ret
  a08ca8:	1904b03a 	or	r2,r3,r4
  a08cac:	108000cc 	andi	r2,r2,3
  a08cb0:	103ff31e 	bne	r2,zero,a08c80 <memmove+0x44>
  a08cb4:	3811883a 	mov	r8,r7
  a08cb8:	180b883a 	mov	r5,r3
  a08cbc:	200f883a 	mov	r7,r4
  a08cc0:	28c00017 	ldw	r3,0(r5)
  a08cc4:	31bffc04 	addi	r6,r6,-16
  a08cc8:	38c00015 	stw	r3,0(r7)
  a08ccc:	28800117 	ldw	r2,4(r5)
  a08cd0:	38800115 	stw	r2,4(r7)
  a08cd4:	28c00217 	ldw	r3,8(r5)
  a08cd8:	38c00215 	stw	r3,8(r7)
  a08cdc:	28800317 	ldw	r2,12(r5)
  a08ce0:	29400404 	addi	r5,r5,16
  a08ce4:	38800315 	stw	r2,12(r7)
  a08ce8:	39c00404 	addi	r7,r7,16
  a08cec:	41bff436 	bltu	r8,r6,a08cc0 <memmove+0x84>
  a08cf0:	008000c4 	movi	r2,3
  a08cf4:	1180072e 	bgeu	r2,r6,a08d14 <memmove+0xd8>
  a08cf8:	1007883a 	mov	r3,r2
  a08cfc:	28800017 	ldw	r2,0(r5)
  a08d00:	31bfff04 	addi	r6,r6,-4
  a08d04:	29400104 	addi	r5,r5,4
  a08d08:	38800015 	stw	r2,0(r7)
  a08d0c:	39c00104 	addi	r7,r7,4
  a08d10:	19bffa36 	bltu	r3,r6,a08cfc <memmove+0xc0>
  a08d14:	3811883a 	mov	r8,r7
  a08d18:	003fd906 	br	a08c80 <memmove+0x44>

00a08d1c <memset>:
  a08d1c:	008000c4 	movi	r2,3
  a08d20:	29403fcc 	andi	r5,r5,255
  a08d24:	2007883a 	mov	r3,r4
  a08d28:	1180022e 	bgeu	r2,r6,a08d34 <memset+0x18>
  a08d2c:	2084703a 	and	r2,r4,r2
  a08d30:	10000826 	beq	r2,zero,a08d54 <memset+0x38>
  a08d34:	30000526 	beq	r6,zero,a08d4c <memset+0x30>
  a08d38:	2805883a 	mov	r2,r5
  a08d3c:	30cd883a 	add	r6,r6,r3
  a08d40:	18800005 	stb	r2,0(r3)
  a08d44:	18c00044 	addi	r3,r3,1
  a08d48:	19bffd1e 	bne	r3,r6,a08d40 <memset+0x24>
  a08d4c:	2005883a 	mov	r2,r4
  a08d50:	f800283a 	ret
  a08d54:	2804923a 	slli	r2,r5,8
  a08d58:	020003c4 	movi	r8,15
  a08d5c:	200f883a 	mov	r7,r4
  a08d60:	2884b03a 	or	r2,r5,r2
  a08d64:	1006943a 	slli	r3,r2,16
  a08d68:	10c6b03a 	or	r3,r2,r3
  a08d6c:	41800a2e 	bgeu	r8,r6,a08d98 <memset+0x7c>
  a08d70:	4005883a 	mov	r2,r8
  a08d74:	31bffc04 	addi	r6,r6,-16
  a08d78:	38c00015 	stw	r3,0(r7)
  a08d7c:	38c00115 	stw	r3,4(r7)
  a08d80:	38c00215 	stw	r3,8(r7)
  a08d84:	38c00315 	stw	r3,12(r7)
  a08d88:	39c00404 	addi	r7,r7,16
  a08d8c:	11bff936 	bltu	r2,r6,a08d74 <memset+0x58>
  a08d90:	008000c4 	movi	r2,3
  a08d94:	1180052e 	bgeu	r2,r6,a08dac <memset+0x90>
  a08d98:	31bfff04 	addi	r6,r6,-4
  a08d9c:	008000c4 	movi	r2,3
  a08da0:	38c00015 	stw	r3,0(r7)
  a08da4:	39c00104 	addi	r7,r7,4
  a08da8:	11bffb36 	bltu	r2,r6,a08d98 <memset+0x7c>
  a08dac:	3807883a 	mov	r3,r7
  a08db0:	003fe006 	br	a08d34 <memset+0x18>

00a08db4 <_Bfree>:
  a08db4:	28000826 	beq	r5,zero,a08dd8 <_Bfree+0x24>
  a08db8:	28800117 	ldw	r2,4(r5)
  a08dbc:	21001317 	ldw	r4,76(r4)
  a08dc0:	1085883a 	add	r2,r2,r2
  a08dc4:	1085883a 	add	r2,r2,r2
  a08dc8:	1105883a 	add	r2,r2,r4
  a08dcc:	10c00017 	ldw	r3,0(r2)
  a08dd0:	28c00015 	stw	r3,0(r5)
  a08dd4:	11400015 	stw	r5,0(r2)
  a08dd8:	f800283a 	ret

00a08ddc <__hi0bits>:
  a08ddc:	20bfffec 	andhi	r2,r4,65535
  a08de0:	10001426 	beq	r2,zero,a08e34 <__hi0bits+0x58>
  a08de4:	0007883a 	mov	r3,zero
  a08de8:	20bfc02c 	andhi	r2,r4,65280
  a08dec:	1000021e 	bne	r2,zero,a08df8 <__hi0bits+0x1c>
  a08df0:	2008923a 	slli	r4,r4,8
  a08df4:	18c00204 	addi	r3,r3,8
  a08df8:	20bc002c 	andhi	r2,r4,61440
  a08dfc:	1000021e 	bne	r2,zero,a08e08 <__hi0bits+0x2c>
  a08e00:	2008913a 	slli	r4,r4,4
  a08e04:	18c00104 	addi	r3,r3,4
  a08e08:	20b0002c 	andhi	r2,r4,49152
  a08e0c:	1000031e 	bne	r2,zero,a08e1c <__hi0bits+0x40>
  a08e10:	2105883a 	add	r2,r4,r4
  a08e14:	18c00084 	addi	r3,r3,2
  a08e18:	1089883a 	add	r4,r2,r2
  a08e1c:	20000316 	blt	r4,zero,a08e2c <__hi0bits+0x50>
  a08e20:	2090002c 	andhi	r2,r4,16384
  a08e24:	10000626 	beq	r2,zero,a08e40 <__hi0bits+0x64>
  a08e28:	18c00044 	addi	r3,r3,1
  a08e2c:	1805883a 	mov	r2,r3
  a08e30:	f800283a 	ret
  a08e34:	2008943a 	slli	r4,r4,16
  a08e38:	00c00404 	movi	r3,16
  a08e3c:	003fea06 	br	a08de8 <__hi0bits+0xc>
  a08e40:	00c00804 	movi	r3,32
  a08e44:	1805883a 	mov	r2,r3
  a08e48:	f800283a 	ret

00a08e4c <__lo0bits>:
  a08e4c:	20c00017 	ldw	r3,0(r4)
  a08e50:	188001cc 	andi	r2,r3,7
  a08e54:	10000a26 	beq	r2,zero,a08e80 <__lo0bits+0x34>
  a08e58:	1880004c 	andi	r2,r3,1
  a08e5c:	1005003a 	cmpeq	r2,r2,zero
  a08e60:	10002126 	beq	r2,zero,a08ee8 <__lo0bits+0x9c>
  a08e64:	1880008c 	andi	r2,r3,2
  a08e68:	1000251e 	bne	r2,zero,a08f00 <__lo0bits+0xb4>
  a08e6c:	1804d0ba 	srli	r2,r3,2
  a08e70:	01400084 	movi	r5,2
  a08e74:	20800015 	stw	r2,0(r4)
  a08e78:	2805883a 	mov	r2,r5
  a08e7c:	f800283a 	ret
  a08e80:	18bfffcc 	andi	r2,r3,65535
  a08e84:	10001526 	beq	r2,zero,a08edc <__lo0bits+0x90>
  a08e88:	000b883a 	mov	r5,zero
  a08e8c:	18803fcc 	andi	r2,r3,255
  a08e90:	1000021e 	bne	r2,zero,a08e9c <__lo0bits+0x50>
  a08e94:	1806d23a 	srli	r3,r3,8
  a08e98:	29400204 	addi	r5,r5,8
  a08e9c:	188003cc 	andi	r2,r3,15
  a08ea0:	1000021e 	bne	r2,zero,a08eac <__lo0bits+0x60>
  a08ea4:	1806d13a 	srli	r3,r3,4
  a08ea8:	29400104 	addi	r5,r5,4
  a08eac:	188000cc 	andi	r2,r3,3
  a08eb0:	1000021e 	bne	r2,zero,a08ebc <__lo0bits+0x70>
  a08eb4:	1806d0ba 	srli	r3,r3,2
  a08eb8:	29400084 	addi	r5,r5,2
  a08ebc:	1880004c 	andi	r2,r3,1
  a08ec0:	1000031e 	bne	r2,zero,a08ed0 <__lo0bits+0x84>
  a08ec4:	1806d07a 	srli	r3,r3,1
  a08ec8:	18000a26 	beq	r3,zero,a08ef4 <__lo0bits+0xa8>
  a08ecc:	29400044 	addi	r5,r5,1
  a08ed0:	2805883a 	mov	r2,r5
  a08ed4:	20c00015 	stw	r3,0(r4)
  a08ed8:	f800283a 	ret
  a08edc:	1806d43a 	srli	r3,r3,16
  a08ee0:	01400404 	movi	r5,16
  a08ee4:	003fe906 	br	a08e8c <__lo0bits+0x40>
  a08ee8:	000b883a 	mov	r5,zero
  a08eec:	2805883a 	mov	r2,r5
  a08ef0:	f800283a 	ret
  a08ef4:	01400804 	movi	r5,32
  a08ef8:	2805883a 	mov	r2,r5
  a08efc:	f800283a 	ret
  a08f00:	1804d07a 	srli	r2,r3,1
  a08f04:	01400044 	movi	r5,1
  a08f08:	20800015 	stw	r2,0(r4)
  a08f0c:	003fda06 	br	a08e78 <__lo0bits+0x2c>

00a08f10 <__mcmp>:
  a08f10:	20800417 	ldw	r2,16(r4)
  a08f14:	28c00417 	ldw	r3,16(r5)
  a08f18:	10cfc83a 	sub	r7,r2,r3
  a08f1c:	38000c1e 	bne	r7,zero,a08f50 <__mcmp+0x40>
  a08f20:	18c5883a 	add	r2,r3,r3
  a08f24:	1085883a 	add	r2,r2,r2
  a08f28:	10c00504 	addi	r3,r2,20
  a08f2c:	21000504 	addi	r4,r4,20
  a08f30:	28cb883a 	add	r5,r5,r3
  a08f34:	2085883a 	add	r2,r4,r2
  a08f38:	10bfff04 	addi	r2,r2,-4
  a08f3c:	297fff04 	addi	r5,r5,-4
  a08f40:	11800017 	ldw	r6,0(r2)
  a08f44:	28c00017 	ldw	r3,0(r5)
  a08f48:	30c0031e 	bne	r6,r3,a08f58 <__mcmp+0x48>
  a08f4c:	20bffa36 	bltu	r4,r2,a08f38 <__mcmp+0x28>
  a08f50:	3805883a 	mov	r2,r7
  a08f54:	f800283a 	ret
  a08f58:	30c00336 	bltu	r6,r3,a08f68 <__mcmp+0x58>
  a08f5c:	01c00044 	movi	r7,1
  a08f60:	3805883a 	mov	r2,r7
  a08f64:	f800283a 	ret
  a08f68:	01ffffc4 	movi	r7,-1
  a08f6c:	003ff806 	br	a08f50 <__mcmp+0x40>

00a08f70 <__ulp>:
  a08f70:	295ffc2c 	andhi	r5,r5,32752
  a08f74:	013f3034 	movhi	r4,64704
  a08f78:	290b883a 	add	r5,r5,r4
  a08f7c:	0145c83a 	sub	r2,zero,r5
  a08f80:	1007d53a 	srai	r3,r2,20
  a08f84:	000d883a 	mov	r6,zero
  a08f88:	0140040e 	bge	zero,r5,a08f9c <__ulp+0x2c>
  a08f8c:	280f883a 	mov	r7,r5
  a08f90:	3807883a 	mov	r3,r7
  a08f94:	3005883a 	mov	r2,r6
  a08f98:	f800283a 	ret
  a08f9c:	008004c4 	movi	r2,19
  a08fa0:	193ffb04 	addi	r4,r3,-20
  a08fa4:	10c00c0e 	bge	r2,r3,a08fd8 <__ulp+0x68>
  a08fa8:	008007c4 	movi	r2,31
  a08fac:	1107c83a 	sub	r3,r2,r4
  a08fb0:	00800784 	movi	r2,30
  a08fb4:	01400044 	movi	r5,1
  a08fb8:	11000216 	blt	r2,r4,a08fc4 <__ulp+0x54>
  a08fbc:	00800044 	movi	r2,1
  a08fc0:	10ca983a 	sll	r5,r2,r3
  a08fc4:	000f883a 	mov	r7,zero
  a08fc8:	280d883a 	mov	r6,r5
  a08fcc:	3807883a 	mov	r3,r7
  a08fd0:	3005883a 	mov	r2,r6
  a08fd4:	f800283a 	ret
  a08fd8:	00800234 	movhi	r2,8
  a08fdc:	10cfd83a 	sra	r7,r2,r3
  a08fe0:	000d883a 	mov	r6,zero
  a08fe4:	3005883a 	mov	r2,r6
  a08fe8:	3807883a 	mov	r3,r7
  a08fec:	f800283a 	ret

00a08ff0 <__b2d>:
  a08ff0:	20800417 	ldw	r2,16(r4)
  a08ff4:	defff904 	addi	sp,sp,-28
  a08ff8:	dd000415 	stw	r20,16(sp)
  a08ffc:	1085883a 	add	r2,r2,r2
  a09000:	25000504 	addi	r20,r4,20
  a09004:	1085883a 	add	r2,r2,r2
  a09008:	dc000015 	stw	r16,0(sp)
  a0900c:	a0a1883a 	add	r16,r20,r2
  a09010:	dd400515 	stw	r21,20(sp)
  a09014:	857fff17 	ldw	r21,-4(r16)
  a09018:	dc400115 	stw	r17,4(sp)
  a0901c:	dfc00615 	stw	ra,24(sp)
  a09020:	a809883a 	mov	r4,r21
  a09024:	2823883a 	mov	r17,r5
  a09028:	dcc00315 	stw	r19,12(sp)
  a0902c:	dc800215 	stw	r18,8(sp)
  a09030:	0a08ddc0 	call	a08ddc <__hi0bits>
  a09034:	100b883a 	mov	r5,r2
  a09038:	00800804 	movi	r2,32
  a0903c:	1145c83a 	sub	r2,r2,r5
  a09040:	88800015 	stw	r2,0(r17)
  a09044:	00800284 	movi	r2,10
  a09048:	80ffff04 	addi	r3,r16,-4
  a0904c:	11401416 	blt	r2,r5,a090a0 <__b2d+0xb0>
  a09050:	008002c4 	movi	r2,11
  a09054:	1149c83a 	sub	r4,r2,r5
  a09058:	a0c02736 	bltu	r20,r3,a090f8 <__b2d+0x108>
  a0905c:	000d883a 	mov	r6,zero
  a09060:	28800544 	addi	r2,r5,21
  a09064:	a906d83a 	srl	r3,r21,r4
  a09068:	a884983a 	sll	r2,r21,r2
  a0906c:	1ccffc34 	orhi	r19,r3,16368
  a09070:	11a4b03a 	or	r18,r2,r6
  a09074:	9005883a 	mov	r2,r18
  a09078:	9807883a 	mov	r3,r19
  a0907c:	dfc00617 	ldw	ra,24(sp)
  a09080:	dd400517 	ldw	r21,20(sp)
  a09084:	dd000417 	ldw	r20,16(sp)
  a09088:	dcc00317 	ldw	r19,12(sp)
  a0908c:	dc800217 	ldw	r18,8(sp)
  a09090:	dc400117 	ldw	r17,4(sp)
  a09094:	dc000017 	ldw	r16,0(sp)
  a09098:	dec00704 	addi	sp,sp,28
  a0909c:	f800283a 	ret
  a090a0:	a0c00e36 	bltu	r20,r3,a090dc <__b2d+0xec>
  a090a4:	293ffd44 	addi	r4,r5,-11
  a090a8:	000d883a 	mov	r6,zero
  a090ac:	20000f26 	beq	r4,zero,a090ec <__b2d+0xfc>
  a090b0:	00800804 	movi	r2,32
  a090b4:	110bc83a 	sub	r5,r2,r4
  a090b8:	a0c01236 	bltu	r20,r3,a09104 <__b2d+0x114>
  a090bc:	000f883a 	mov	r7,zero
  a090c0:	a904983a 	sll	r2,r21,r4
  a090c4:	3146d83a 	srl	r3,r6,r5
  a090c8:	3108983a 	sll	r4,r6,r4
  a090cc:	108ffc34 	orhi	r2,r2,16368
  a090d0:	18a6b03a 	or	r19,r3,r2
  a090d4:	3924b03a 	or	r18,r7,r4
  a090d8:	003fe606 	br	a09074 <__b2d+0x84>
  a090dc:	293ffd44 	addi	r4,r5,-11
  a090e0:	81bffe17 	ldw	r6,-8(r16)
  a090e4:	80fffe04 	addi	r3,r16,-8
  a090e8:	203ff11e 	bne	r4,zero,a090b0 <__b2d+0xc0>
  a090ec:	accffc34 	orhi	r19,r21,16368
  a090f0:	3025883a 	mov	r18,r6
  a090f4:	003fdf06 	br	a09074 <__b2d+0x84>
  a090f8:	18bfff17 	ldw	r2,-4(r3)
  a090fc:	110cd83a 	srl	r6,r2,r4
  a09100:	003fd706 	br	a09060 <__b2d+0x70>
  a09104:	18bfff17 	ldw	r2,-4(r3)
  a09108:	114ed83a 	srl	r7,r2,r5
  a0910c:	003fec06 	br	a090c0 <__b2d+0xd0>

00a09110 <__ratio>:
  a09110:	defff904 	addi	sp,sp,-28
  a09114:	dc400215 	stw	r17,8(sp)
  a09118:	2823883a 	mov	r17,r5
  a0911c:	d80b883a 	mov	r5,sp
  a09120:	dfc00615 	stw	ra,24(sp)
  a09124:	dd000515 	stw	r20,20(sp)
  a09128:	dcc00415 	stw	r19,16(sp)
  a0912c:	dc800315 	stw	r18,12(sp)
  a09130:	2025883a 	mov	r18,r4
  a09134:	0a08ff00 	call	a08ff0 <__b2d>
  a09138:	8809883a 	mov	r4,r17
  a0913c:	d9400104 	addi	r5,sp,4
  a09140:	1027883a 	mov	r19,r2
  a09144:	1829883a 	mov	r20,r3
  a09148:	0a08ff00 	call	a08ff0 <__b2d>
  a0914c:	89000417 	ldw	r4,16(r17)
  a09150:	91c00417 	ldw	r7,16(r18)
  a09154:	d9800117 	ldw	r6,4(sp)
  a09158:	180b883a 	mov	r5,r3
  a0915c:	390fc83a 	sub	r7,r7,r4
  a09160:	1009883a 	mov	r4,r2
  a09164:	d8800017 	ldw	r2,0(sp)
  a09168:	380e917a 	slli	r7,r7,5
  a0916c:	2011883a 	mov	r8,r4
  a09170:	1185c83a 	sub	r2,r2,r6
  a09174:	11c5883a 	add	r2,r2,r7
  a09178:	1006953a 	slli	r3,r2,20
  a0917c:	2813883a 	mov	r9,r5
  a09180:	00800d0e 	bge	zero,r2,a091b8 <__ratio+0xa8>
  a09184:	1d29883a 	add	r20,r3,r20
  a09188:	a00b883a 	mov	r5,r20
  a0918c:	480f883a 	mov	r7,r9
  a09190:	9809883a 	mov	r4,r19
  a09194:	400d883a 	mov	r6,r8
  a09198:	0a02a6c0 	call	a02a6c <__divdf3>
  a0919c:	dfc00617 	ldw	ra,24(sp)
  a091a0:	dd000517 	ldw	r20,20(sp)
  a091a4:	dcc00417 	ldw	r19,16(sp)
  a091a8:	dc800317 	ldw	r18,12(sp)
  a091ac:	dc400217 	ldw	r17,8(sp)
  a091b0:	dec00704 	addi	sp,sp,28
  a091b4:	f800283a 	ret
  a091b8:	28d3c83a 	sub	r9,r5,r3
  a091bc:	003ff206 	br	a09188 <__ratio+0x78>

00a091c0 <_mprec_log10>:
  a091c0:	defffe04 	addi	sp,sp,-8
  a091c4:	008005c4 	movi	r2,23
  a091c8:	dc000015 	stw	r16,0(sp)
  a091cc:	dfc00115 	stw	ra,4(sp)
  a091d0:	2021883a 	mov	r16,r4
  a091d4:	11000c16 	blt	r2,r4,a09208 <_mprec_log10+0x48>
  a091d8:	200490fa 	slli	r2,r4,3
  a091dc:	00c02874 	movhi	r3,161
  a091e0:	18c35204 	addi	r3,r3,3400
  a091e4:	10c5883a 	add	r2,r2,r3
  a091e8:	12400117 	ldw	r9,4(r2)
  a091ec:	12000017 	ldw	r8,0(r2)
  a091f0:	4807883a 	mov	r3,r9
  a091f4:	4005883a 	mov	r2,r8
  a091f8:	dfc00117 	ldw	ra,4(sp)
  a091fc:	dc000017 	ldw	r16,0(sp)
  a09200:	dec00204 	addi	sp,sp,8
  a09204:	f800283a 	ret
  a09208:	0011883a 	mov	r8,zero
  a0920c:	024ffc34 	movhi	r9,16368
  a09210:	0005883a 	mov	r2,zero
  a09214:	00d00934 	movhi	r3,16420
  a09218:	480b883a 	mov	r5,r9
  a0921c:	4009883a 	mov	r4,r8
  a09220:	180f883a 	mov	r7,r3
  a09224:	100d883a 	mov	r6,r2
  a09228:	0a0b6a40 	call	a0b6a4 <__muldf3>
  a0922c:	843fffc4 	addi	r16,r16,-1
  a09230:	1011883a 	mov	r8,r2
  a09234:	1813883a 	mov	r9,r3
  a09238:	803ff51e 	bne	r16,zero,a09210 <_mprec_log10+0x50>
  a0923c:	4005883a 	mov	r2,r8
  a09240:	4807883a 	mov	r3,r9
  a09244:	dfc00117 	ldw	ra,4(sp)
  a09248:	dc000017 	ldw	r16,0(sp)
  a0924c:	dec00204 	addi	sp,sp,8
  a09250:	f800283a 	ret

00a09254 <__copybits>:
  a09254:	297fffc4 	addi	r5,r5,-1
  a09258:	30800417 	ldw	r2,16(r6)
  a0925c:	280bd17a 	srai	r5,r5,5
  a09260:	31800504 	addi	r6,r6,20
  a09264:	1085883a 	add	r2,r2,r2
  a09268:	294b883a 	add	r5,r5,r5
  a0926c:	294b883a 	add	r5,r5,r5
  a09270:	1085883a 	add	r2,r2,r2
  a09274:	290b883a 	add	r5,r5,r4
  a09278:	3087883a 	add	r3,r6,r2
  a0927c:	29400104 	addi	r5,r5,4
  a09280:	30c0052e 	bgeu	r6,r3,a09298 <__copybits+0x44>
  a09284:	30800017 	ldw	r2,0(r6)
  a09288:	31800104 	addi	r6,r6,4
  a0928c:	20800015 	stw	r2,0(r4)
  a09290:	21000104 	addi	r4,r4,4
  a09294:	30fffb36 	bltu	r6,r3,a09284 <__copybits+0x30>
  a09298:	2140032e 	bgeu	r4,r5,a092a8 <__copybits+0x54>
  a0929c:	20000015 	stw	zero,0(r4)
  a092a0:	21000104 	addi	r4,r4,4
  a092a4:	217ffd36 	bltu	r4,r5,a0929c <__copybits+0x48>
  a092a8:	f800283a 	ret

00a092ac <__any_on>:
  a092ac:	20800417 	ldw	r2,16(r4)
  a092b0:	2807d17a 	srai	r3,r5,5
  a092b4:	21000504 	addi	r4,r4,20
  a092b8:	10c00d0e 	bge	r2,r3,a092f0 <__any_on+0x44>
  a092bc:	1085883a 	add	r2,r2,r2
  a092c0:	1085883a 	add	r2,r2,r2
  a092c4:	208d883a 	add	r6,r4,r2
  a092c8:	2180182e 	bgeu	r4,r6,a0932c <__any_on+0x80>
  a092cc:	30bfff17 	ldw	r2,-4(r6)
  a092d0:	30ffff04 	addi	r3,r6,-4
  a092d4:	1000041e 	bne	r2,zero,a092e8 <__any_on+0x3c>
  a092d8:	20c0142e 	bgeu	r4,r3,a0932c <__any_on+0x80>
  a092dc:	18ffff04 	addi	r3,r3,-4
  a092e0:	18800017 	ldw	r2,0(r3)
  a092e4:	103ffc26 	beq	r2,zero,a092d8 <__any_on+0x2c>
  a092e8:	00800044 	movi	r2,1
  a092ec:	f800283a 	ret
  a092f0:	18800a0e 	bge	r3,r2,a0931c <__any_on+0x70>
  a092f4:	294007cc 	andi	r5,r5,31
  a092f8:	28000826 	beq	r5,zero,a0931c <__any_on+0x70>
  a092fc:	18c5883a 	add	r2,r3,r3
  a09300:	1085883a 	add	r2,r2,r2
  a09304:	208d883a 	add	r6,r4,r2
  a09308:	30c00017 	ldw	r3,0(r6)
  a0930c:	1944d83a 	srl	r2,r3,r5
  a09310:	1144983a 	sll	r2,r2,r5
  a09314:	18bff41e 	bne	r3,r2,a092e8 <__any_on+0x3c>
  a09318:	003feb06 	br	a092c8 <__any_on+0x1c>
  a0931c:	18c5883a 	add	r2,r3,r3
  a09320:	1085883a 	add	r2,r2,r2
  a09324:	208d883a 	add	r6,r4,r2
  a09328:	003fe706 	br	a092c8 <__any_on+0x1c>
  a0932c:	0005883a 	mov	r2,zero
  a09330:	f800283a 	ret

00a09334 <_Balloc>:
  a09334:	20c01317 	ldw	r3,76(r4)
  a09338:	defffb04 	addi	sp,sp,-20
  a0933c:	dcc00315 	stw	r19,12(sp)
  a09340:	dc800215 	stw	r18,8(sp)
  a09344:	dfc00415 	stw	ra,16(sp)
  a09348:	2825883a 	mov	r18,r5
  a0934c:	dc400115 	stw	r17,4(sp)
  a09350:	dc000015 	stw	r16,0(sp)
  a09354:	2027883a 	mov	r19,r4
  a09358:	01800404 	movi	r6,16
  a0935c:	01400104 	movi	r5,4
  a09360:	18001726 	beq	r3,zero,a093c0 <_Balloc+0x8c>
  a09364:	01400044 	movi	r5,1
  a09368:	9485883a 	add	r2,r18,r18
  a0936c:	2ca2983a 	sll	r17,r5,r18
  a09370:	1085883a 	add	r2,r2,r2
  a09374:	10c7883a 	add	r3,r2,r3
  a09378:	1c000017 	ldw	r16,0(r3)
  a0937c:	8c4d883a 	add	r6,r17,r17
  a09380:	318d883a 	add	r6,r6,r6
  a09384:	9809883a 	mov	r4,r19
  a09388:	31800504 	addi	r6,r6,20
  a0938c:	80001226 	beq	r16,zero,a093d8 <_Balloc+0xa4>
  a09390:	80800017 	ldw	r2,0(r16)
  a09394:	18800015 	stw	r2,0(r3)
  a09398:	80000415 	stw	zero,16(r16)
  a0939c:	80000315 	stw	zero,12(r16)
  a093a0:	8005883a 	mov	r2,r16
  a093a4:	dfc00417 	ldw	ra,16(sp)
  a093a8:	dcc00317 	ldw	r19,12(sp)
  a093ac:	dc800217 	ldw	r18,8(sp)
  a093b0:	dc400117 	ldw	r17,4(sp)
  a093b4:	dc000017 	ldw	r16,0(sp)
  a093b8:	dec00504 	addi	sp,sp,20
  a093bc:	f800283a 	ret
  a093c0:	0a0a6fc0 	call	a0a6fc <_calloc_r>
  a093c4:	1007883a 	mov	r3,r2
  a093c8:	0021883a 	mov	r16,zero
  a093cc:	98801315 	stw	r2,76(r19)
  a093d0:	103fe41e 	bne	r2,zero,a09364 <_Balloc+0x30>
  a093d4:	003ff206 	br	a093a0 <_Balloc+0x6c>
  a093d8:	0a0a6fc0 	call	a0a6fc <_calloc_r>
  a093dc:	103ff026 	beq	r2,zero,a093a0 <_Balloc+0x6c>
  a093e0:	1021883a 	mov	r16,r2
  a093e4:	14800115 	stw	r18,4(r2)
  a093e8:	14400215 	stw	r17,8(r2)
  a093ec:	003fea06 	br	a09398 <_Balloc+0x64>

00a093f0 <__d2b>:
  a093f0:	defff504 	addi	sp,sp,-44
  a093f4:	dcc00515 	stw	r19,20(sp)
  a093f8:	04c00044 	movi	r19,1
  a093fc:	dc000215 	stw	r16,8(sp)
  a09400:	2821883a 	mov	r16,r5
  a09404:	980b883a 	mov	r5,r19
  a09408:	ddc00915 	stw	r23,36(sp)
  a0940c:	dd800815 	stw	r22,32(sp)
  a09410:	dd400715 	stw	r21,28(sp)
  a09414:	dd000615 	stw	r20,24(sp)
  a09418:	dc800415 	stw	r18,16(sp)
  a0941c:	dc400315 	stw	r17,12(sp)
  a09420:	dfc00a15 	stw	ra,40(sp)
  a09424:	3023883a 	mov	r17,r6
  a09428:	382d883a 	mov	r22,r7
  a0942c:	ddc00b17 	ldw	r23,44(sp)
  a09430:	0a093340 	call	a09334 <_Balloc>
  a09434:	1025883a 	mov	r18,r2
  a09438:	00a00034 	movhi	r2,32768
  a0943c:	10bfffc4 	addi	r2,r2,-1
  a09440:	8888703a 	and	r4,r17,r2
  a09444:	202ad53a 	srli	r21,r4,20
  a09448:	00800434 	movhi	r2,16
  a0944c:	10bfffc4 	addi	r2,r2,-1
  a09450:	8886703a 	and	r3,r17,r2
  a09454:	a829003a 	cmpeq	r20,r21,zero
  a09458:	800b883a 	mov	r5,r16
  a0945c:	d8c00115 	stw	r3,4(sp)
  a09460:	94000504 	addi	r16,r18,20
  a09464:	a000021e 	bne	r20,zero,a09470 <__d2b+0x80>
  a09468:	18c00434 	orhi	r3,r3,16
  a0946c:	d8c00115 	stw	r3,4(sp)
  a09470:	28002726 	beq	r5,zero,a09510 <__d2b+0x120>
  a09474:	d809883a 	mov	r4,sp
  a09478:	d9400015 	stw	r5,0(sp)
  a0947c:	0a08e4c0 	call	a08e4c <__lo0bits>
  a09480:	100d883a 	mov	r6,r2
  a09484:	10003526 	beq	r2,zero,a0955c <__d2b+0x16c>
  a09488:	d8c00117 	ldw	r3,4(sp)
  a0948c:	00800804 	movi	r2,32
  a09490:	1185c83a 	sub	r2,r2,r6
  a09494:	d9000017 	ldw	r4,0(sp)
  a09498:	1886983a 	sll	r3,r3,r2
  a0949c:	1906b03a 	or	r3,r3,r4
  a094a0:	90c00515 	stw	r3,20(r18)
  a094a4:	d8c00117 	ldw	r3,4(sp)
  a094a8:	1986d83a 	srl	r3,r3,r6
  a094ac:	d8c00115 	stw	r3,4(sp)
  a094b0:	180b003a 	cmpeq	r5,r3,zero
  a094b4:	00800084 	movi	r2,2
  a094b8:	114bc83a 	sub	r5,r2,r5
  a094bc:	80c00115 	stw	r3,4(r16)
  a094c0:	91400415 	stw	r5,16(r18)
  a094c4:	a0001a1e 	bne	r20,zero,a09530 <__d2b+0x140>
  a094c8:	3545883a 	add	r2,r6,r21
  a094cc:	10bef344 	addi	r2,r2,-1075
  a094d0:	00c00d44 	movi	r3,53
  a094d4:	b0800015 	stw	r2,0(r22)
  a094d8:	1987c83a 	sub	r3,r3,r6
  a094dc:	b8c00015 	stw	r3,0(r23)
  a094e0:	9005883a 	mov	r2,r18
  a094e4:	dfc00a17 	ldw	ra,40(sp)
  a094e8:	ddc00917 	ldw	r23,36(sp)
  a094ec:	dd800817 	ldw	r22,32(sp)
  a094f0:	dd400717 	ldw	r21,28(sp)
  a094f4:	dd000617 	ldw	r20,24(sp)
  a094f8:	dcc00517 	ldw	r19,20(sp)
  a094fc:	dc800417 	ldw	r18,16(sp)
  a09500:	dc400317 	ldw	r17,12(sp)
  a09504:	dc000217 	ldw	r16,8(sp)
  a09508:	dec00b04 	addi	sp,sp,44
  a0950c:	f800283a 	ret
  a09510:	d9000104 	addi	r4,sp,4
  a09514:	0a08e4c0 	call	a08e4c <__lo0bits>
  a09518:	11800804 	addi	r6,r2,32
  a0951c:	d8800117 	ldw	r2,4(sp)
  a09520:	94c00415 	stw	r19,16(r18)
  a09524:	980b883a 	mov	r5,r19
  a09528:	90800515 	stw	r2,20(r18)
  a0952c:	a03fe626 	beq	r20,zero,a094c8 <__d2b+0xd8>
  a09530:	2945883a 	add	r2,r5,r5
  a09534:	1085883a 	add	r2,r2,r2
  a09538:	1405883a 	add	r2,r2,r16
  a0953c:	113fff17 	ldw	r4,-4(r2)
  a09540:	30fef384 	addi	r3,r6,-1074
  a09544:	2820917a 	slli	r16,r5,5
  a09548:	b0c00015 	stw	r3,0(r22)
  a0954c:	0a08ddc0 	call	a08ddc <__hi0bits>
  a09550:	80a1c83a 	sub	r16,r16,r2
  a09554:	bc000015 	stw	r16,0(r23)
  a09558:	003fe106 	br	a094e0 <__d2b+0xf0>
  a0955c:	d8800017 	ldw	r2,0(sp)
  a09560:	90800515 	stw	r2,20(r18)
  a09564:	d8c00117 	ldw	r3,4(sp)
  a09568:	003fd106 	br	a094b0 <__d2b+0xc0>

00a0956c <__mdiff>:
  a0956c:	defffb04 	addi	sp,sp,-20
  a09570:	dc000015 	stw	r16,0(sp)
  a09574:	2821883a 	mov	r16,r5
  a09578:	dc800215 	stw	r18,8(sp)
  a0957c:	300b883a 	mov	r5,r6
  a09580:	2025883a 	mov	r18,r4
  a09584:	8009883a 	mov	r4,r16
  a09588:	dc400115 	stw	r17,4(sp)
  a0958c:	dfc00415 	stw	ra,16(sp)
  a09590:	dcc00315 	stw	r19,12(sp)
  a09594:	3023883a 	mov	r17,r6
  a09598:	0a08f100 	call	a08f10 <__mcmp>
  a0959c:	10004226 	beq	r2,zero,a096a8 <__mdiff+0x13c>
  a095a0:	10005016 	blt	r2,zero,a096e4 <__mdiff+0x178>
  a095a4:	0027883a 	mov	r19,zero
  a095a8:	81400117 	ldw	r5,4(r16)
  a095ac:	9009883a 	mov	r4,r18
  a095b0:	0a093340 	call	a09334 <_Balloc>
  a095b4:	1019883a 	mov	r12,r2
  a095b8:	82800417 	ldw	r10,16(r16)
  a095bc:	88800417 	ldw	r2,16(r17)
  a095c0:	81800504 	addi	r6,r16,20
  a095c4:	5287883a 	add	r3,r10,r10
  a095c8:	1085883a 	add	r2,r2,r2
  a095cc:	18c7883a 	add	r3,r3,r3
  a095d0:	1085883a 	add	r2,r2,r2
  a095d4:	8a000504 	addi	r8,r17,20
  a095d8:	64c00315 	stw	r19,12(r12)
  a095dc:	30db883a 	add	r13,r6,r3
  a095e0:	4097883a 	add	r11,r8,r2
  a095e4:	61c00504 	addi	r7,r12,20
  a095e8:	0013883a 	mov	r9,zero
  a095ec:	31000017 	ldw	r4,0(r6)
  a095f0:	41400017 	ldw	r5,0(r8)
  a095f4:	42000104 	addi	r8,r8,4
  a095f8:	20bfffcc 	andi	r2,r4,65535
  a095fc:	28ffffcc 	andi	r3,r5,65535
  a09600:	10c5c83a 	sub	r2,r2,r3
  a09604:	1245883a 	add	r2,r2,r9
  a09608:	2008d43a 	srli	r4,r4,16
  a0960c:	280ad43a 	srli	r5,r5,16
  a09610:	1007d43a 	srai	r3,r2,16
  a09614:	3880000d 	sth	r2,0(r7)
  a09618:	2149c83a 	sub	r4,r4,r5
  a0961c:	20c9883a 	add	r4,r4,r3
  a09620:	3900008d 	sth	r4,2(r7)
  a09624:	31800104 	addi	r6,r6,4
  a09628:	39c00104 	addi	r7,r7,4
  a0962c:	2013d43a 	srai	r9,r4,16
  a09630:	42ffee36 	bltu	r8,r11,a095ec <__mdiff+0x80>
  a09634:	33400c2e 	bgeu	r6,r13,a09668 <__mdiff+0xfc>
  a09638:	30800017 	ldw	r2,0(r6)
  a0963c:	31800104 	addi	r6,r6,4
  a09640:	10ffffcc 	andi	r3,r2,65535
  a09644:	1a47883a 	add	r3,r3,r9
  a09648:	1004d43a 	srli	r2,r2,16
  a0964c:	1809d43a 	srai	r4,r3,16
  a09650:	38c0000d 	sth	r3,0(r7)
  a09654:	1105883a 	add	r2,r2,r4
  a09658:	3880008d 	sth	r2,2(r7)
  a0965c:	1013d43a 	srai	r9,r2,16
  a09660:	39c00104 	addi	r7,r7,4
  a09664:	337ff436 	bltu	r6,r13,a09638 <__mdiff+0xcc>
  a09668:	38bfff17 	ldw	r2,-4(r7)
  a0966c:	38ffff04 	addi	r3,r7,-4
  a09670:	1000041e 	bne	r2,zero,a09684 <__mdiff+0x118>
  a09674:	18ffff04 	addi	r3,r3,-4
  a09678:	18800017 	ldw	r2,0(r3)
  a0967c:	52bfffc4 	addi	r10,r10,-1
  a09680:	103ffc26 	beq	r2,zero,a09674 <__mdiff+0x108>
  a09684:	6005883a 	mov	r2,r12
  a09688:	62800415 	stw	r10,16(r12)
  a0968c:	dfc00417 	ldw	ra,16(sp)
  a09690:	dcc00317 	ldw	r19,12(sp)
  a09694:	dc800217 	ldw	r18,8(sp)
  a09698:	dc400117 	ldw	r17,4(sp)
  a0969c:	dc000017 	ldw	r16,0(sp)
  a096a0:	dec00504 	addi	sp,sp,20
  a096a4:	f800283a 	ret
  a096a8:	9009883a 	mov	r4,r18
  a096ac:	000b883a 	mov	r5,zero
  a096b0:	0a093340 	call	a09334 <_Balloc>
  a096b4:	1019883a 	mov	r12,r2
  a096b8:	00800044 	movi	r2,1
  a096bc:	60800415 	stw	r2,16(r12)
  a096c0:	6005883a 	mov	r2,r12
  a096c4:	60000515 	stw	zero,20(r12)
  a096c8:	dfc00417 	ldw	ra,16(sp)
  a096cc:	dcc00317 	ldw	r19,12(sp)
  a096d0:	dc800217 	ldw	r18,8(sp)
  a096d4:	dc400117 	ldw	r17,4(sp)
  a096d8:	dc000017 	ldw	r16,0(sp)
  a096dc:	dec00504 	addi	sp,sp,20
  a096e0:	f800283a 	ret
  a096e4:	880d883a 	mov	r6,r17
  a096e8:	04c00044 	movi	r19,1
  a096ec:	8023883a 	mov	r17,r16
  a096f0:	3021883a 	mov	r16,r6
  a096f4:	003fac06 	br	a095a8 <__mdiff+0x3c>

00a096f8 <__lshift>:
  a096f8:	defff904 	addi	sp,sp,-28
  a096fc:	28800417 	ldw	r2,16(r5)
  a09700:	dc000015 	stw	r16,0(sp)
  a09704:	3021d17a 	srai	r16,r6,5
  a09708:	28c00217 	ldw	r3,8(r5)
  a0970c:	10800044 	addi	r2,r2,1
  a09710:	dc400115 	stw	r17,4(sp)
  a09714:	80a3883a 	add	r17,r16,r2
  a09718:	dd400515 	stw	r21,20(sp)
  a0971c:	dd000415 	stw	r20,16(sp)
  a09720:	dc800215 	stw	r18,8(sp)
  a09724:	dfc00615 	stw	ra,24(sp)
  a09728:	2825883a 	mov	r18,r5
  a0972c:	dcc00315 	stw	r19,12(sp)
  a09730:	3029883a 	mov	r20,r6
  a09734:	202b883a 	mov	r21,r4
  a09738:	29400117 	ldw	r5,4(r5)
  a0973c:	1c40030e 	bge	r3,r17,a0974c <__lshift+0x54>
  a09740:	18c7883a 	add	r3,r3,r3
  a09744:	29400044 	addi	r5,r5,1
  a09748:	1c7ffd16 	blt	r3,r17,a09740 <__lshift+0x48>
  a0974c:	a809883a 	mov	r4,r21
  a09750:	0a093340 	call	a09334 <_Balloc>
  a09754:	1027883a 	mov	r19,r2
  a09758:	11400504 	addi	r5,r2,20
  a0975c:	0400090e 	bge	zero,r16,a09784 <__lshift+0x8c>
  a09760:	2805883a 	mov	r2,r5
  a09764:	0007883a 	mov	r3,zero
  a09768:	18c00044 	addi	r3,r3,1
  a0976c:	10000015 	stw	zero,0(r2)
  a09770:	10800104 	addi	r2,r2,4
  a09774:	80fffc1e 	bne	r16,r3,a09768 <__lshift+0x70>
  a09778:	8405883a 	add	r2,r16,r16
  a0977c:	1085883a 	add	r2,r2,r2
  a09780:	288b883a 	add	r5,r5,r2
  a09784:	90800417 	ldw	r2,16(r18)
  a09788:	91000504 	addi	r4,r18,20
  a0978c:	a18007cc 	andi	r6,r20,31
  a09790:	1085883a 	add	r2,r2,r2
  a09794:	1085883a 	add	r2,r2,r2
  a09798:	208f883a 	add	r7,r4,r2
  a0979c:	30001e26 	beq	r6,zero,a09818 <__lshift+0x120>
  a097a0:	00800804 	movi	r2,32
  a097a4:	1191c83a 	sub	r8,r2,r6
  a097a8:	0007883a 	mov	r3,zero
  a097ac:	20800017 	ldw	r2,0(r4)
  a097b0:	1184983a 	sll	r2,r2,r6
  a097b4:	1884b03a 	or	r2,r3,r2
  a097b8:	28800015 	stw	r2,0(r5)
  a097bc:	20c00017 	ldw	r3,0(r4)
  a097c0:	21000104 	addi	r4,r4,4
  a097c4:	29400104 	addi	r5,r5,4
  a097c8:	1a06d83a 	srl	r3,r3,r8
  a097cc:	21fff736 	bltu	r4,r7,a097ac <__lshift+0xb4>
  a097d0:	28c00015 	stw	r3,0(r5)
  a097d4:	18000126 	beq	r3,zero,a097dc <__lshift+0xe4>
  a097d8:	8c400044 	addi	r17,r17,1
  a097dc:	88bfffc4 	addi	r2,r17,-1
  a097e0:	98800415 	stw	r2,16(r19)
  a097e4:	a809883a 	mov	r4,r21
  a097e8:	900b883a 	mov	r5,r18
  a097ec:	0a08db40 	call	a08db4 <_Bfree>
  a097f0:	9805883a 	mov	r2,r19
  a097f4:	dfc00617 	ldw	ra,24(sp)
  a097f8:	dd400517 	ldw	r21,20(sp)
  a097fc:	dd000417 	ldw	r20,16(sp)
  a09800:	dcc00317 	ldw	r19,12(sp)
  a09804:	dc800217 	ldw	r18,8(sp)
  a09808:	dc400117 	ldw	r17,4(sp)
  a0980c:	dc000017 	ldw	r16,0(sp)
  a09810:	dec00704 	addi	sp,sp,28
  a09814:	f800283a 	ret
  a09818:	20800017 	ldw	r2,0(r4)
  a0981c:	21000104 	addi	r4,r4,4
  a09820:	28800015 	stw	r2,0(r5)
  a09824:	29400104 	addi	r5,r5,4
  a09828:	21ffec2e 	bgeu	r4,r7,a097dc <__lshift+0xe4>
  a0982c:	20800017 	ldw	r2,0(r4)
  a09830:	21000104 	addi	r4,r4,4
  a09834:	28800015 	stw	r2,0(r5)
  a09838:	29400104 	addi	r5,r5,4
  a0983c:	21fff636 	bltu	r4,r7,a09818 <__lshift+0x120>
  a09840:	003fe606 	br	a097dc <__lshift+0xe4>

00a09844 <__multiply>:
  a09844:	defff904 	addi	sp,sp,-28
  a09848:	dcc00315 	stw	r19,12(sp)
  a0984c:	dc800215 	stw	r18,8(sp)
  a09850:	2cc00417 	ldw	r19,16(r5)
  a09854:	34800417 	ldw	r18,16(r6)
  a09858:	dd000415 	stw	r20,16(sp)
  a0985c:	dc400115 	stw	r17,4(sp)
  a09860:	dfc00615 	stw	ra,24(sp)
  a09864:	dd400515 	stw	r21,20(sp)
  a09868:	dc000015 	stw	r16,0(sp)
  a0986c:	2823883a 	mov	r17,r5
  a09870:	3029883a 	mov	r20,r6
  a09874:	9c80040e 	bge	r19,r18,a09888 <__multiply+0x44>
  a09878:	9027883a 	mov	r19,r18
  a0987c:	2c800417 	ldw	r18,16(r5)
  a09880:	2829883a 	mov	r20,r5
  a09884:	3023883a 	mov	r17,r6
  a09888:	88800217 	ldw	r2,8(r17)
  a0988c:	9ca1883a 	add	r16,r19,r18
  a09890:	89400117 	ldw	r5,4(r17)
  a09894:	1400010e 	bge	r2,r16,a0989c <__multiply+0x58>
  a09898:	29400044 	addi	r5,r5,1
  a0989c:	0a093340 	call	a09334 <_Balloc>
  a098a0:	102b883a 	mov	r21,r2
  a098a4:	8405883a 	add	r2,r16,r16
  a098a8:	1085883a 	add	r2,r2,r2
  a098ac:	a9000504 	addi	r4,r21,20
  a098b0:	209d883a 	add	r14,r4,r2
  a098b4:	2380042e 	bgeu	r4,r14,a098c8 <__multiply+0x84>
  a098b8:	2005883a 	mov	r2,r4
  a098bc:	10000015 	stw	zero,0(r2)
  a098c0:	10800104 	addi	r2,r2,4
  a098c4:	13bffd36 	bltu	r2,r14,a098bc <__multiply+0x78>
  a098c8:	9485883a 	add	r2,r18,r18
  a098cc:	9cc7883a 	add	r3,r19,r19
  a098d0:	a1800504 	addi	r6,r20,20
  a098d4:	1085883a 	add	r2,r2,r2
  a098d8:	8b400504 	addi	r13,r17,20
  a098dc:	18c7883a 	add	r3,r3,r3
  a098e0:	309f883a 	add	r15,r6,r2
  a098e4:	68d7883a 	add	r11,r13,r3
  a098e8:	33c03b2e 	bgeu	r6,r15,a099d8 <__multiply+0x194>
  a098ec:	2019883a 	mov	r12,r4
  a098f0:	30800017 	ldw	r2,0(r6)
  a098f4:	127fffcc 	andi	r9,r2,65535
  a098f8:	48001826 	beq	r9,zero,a0995c <__multiply+0x118>
  a098fc:	6811883a 	mov	r8,r13
  a09900:	600f883a 	mov	r7,r12
  a09904:	0015883a 	mov	r10,zero
  a09908:	40c00017 	ldw	r3,0(r8)
  a0990c:	39400017 	ldw	r5,0(r7)
  a09910:	42000104 	addi	r8,r8,4
  a09914:	193fffcc 	andi	r4,r3,65535
  a09918:	4909383a 	mul	r4,r9,r4
  a0991c:	1806d43a 	srli	r3,r3,16
  a09920:	28bfffcc 	andi	r2,r5,65535
  a09924:	5085883a 	add	r2,r10,r2
  a09928:	2089883a 	add	r4,r4,r2
  a0992c:	48c7383a 	mul	r3,r9,r3
  a09930:	280ad43a 	srli	r5,r5,16
  a09934:	2004d43a 	srli	r2,r4,16
  a09938:	3900000d 	sth	r4,0(r7)
  a0993c:	1947883a 	add	r3,r3,r5
  a09940:	10c5883a 	add	r2,r2,r3
  a09944:	3880008d 	sth	r2,2(r7)
  a09948:	1014d43a 	srli	r10,r2,16
  a0994c:	39c00104 	addi	r7,r7,4
  a09950:	42ffed36 	bltu	r8,r11,a09908 <__multiply+0xc4>
  a09954:	3a800015 	stw	r10,0(r7)
  a09958:	30800017 	ldw	r2,0(r6)
  a0995c:	1012d43a 	srli	r9,r2,16
  a09960:	48001926 	beq	r9,zero,a099c8 <__multiply+0x184>
  a09964:	60800017 	ldw	r2,0(r12)
  a09968:	6811883a 	mov	r8,r13
  a0996c:	600f883a 	mov	r7,r12
  a09970:	0015883a 	mov	r10,zero
  a09974:	100b883a 	mov	r5,r2
  a09978:	41000017 	ldw	r4,0(r8)
  a0997c:	2806d43a 	srli	r3,r5,16
  a09980:	3880000d 	sth	r2,0(r7)
  a09984:	20bfffcc 	andi	r2,r4,65535
  a09988:	4885383a 	mul	r2,r9,r2
  a0998c:	50c7883a 	add	r3,r10,r3
  a09990:	2008d43a 	srli	r4,r4,16
  a09994:	10c5883a 	add	r2,r2,r3
  a09998:	3880008d 	sth	r2,2(r7)
  a0999c:	39c00104 	addi	r7,r7,4
  a099a0:	39400017 	ldw	r5,0(r7)
  a099a4:	4909383a 	mul	r4,r9,r4
  a099a8:	1004d43a 	srli	r2,r2,16
  a099ac:	28ffffcc 	andi	r3,r5,65535
  a099b0:	20c9883a 	add	r4,r4,r3
  a099b4:	1105883a 	add	r2,r2,r4
  a099b8:	42000104 	addi	r8,r8,4
  a099bc:	1014d43a 	srli	r10,r2,16
  a099c0:	42ffed36 	bltu	r8,r11,a09978 <__multiply+0x134>
  a099c4:	38800015 	stw	r2,0(r7)
  a099c8:	31800104 	addi	r6,r6,4
  a099cc:	33c0022e 	bgeu	r6,r15,a099d8 <__multiply+0x194>
  a099d0:	63000104 	addi	r12,r12,4
  a099d4:	003fc606 	br	a098f0 <__multiply+0xac>
  a099d8:	0400090e 	bge	zero,r16,a09a00 <__multiply+0x1bc>
  a099dc:	70bfff17 	ldw	r2,-4(r14)
  a099e0:	70ffff04 	addi	r3,r14,-4
  a099e4:	10000326 	beq	r2,zero,a099f4 <__multiply+0x1b0>
  a099e8:	00000506 	br	a09a00 <__multiply+0x1bc>
  a099ec:	18800017 	ldw	r2,0(r3)
  a099f0:	1000031e 	bne	r2,zero,a09a00 <__multiply+0x1bc>
  a099f4:	843fffc4 	addi	r16,r16,-1
  a099f8:	18ffff04 	addi	r3,r3,-4
  a099fc:	803ffb1e 	bne	r16,zero,a099ec <__multiply+0x1a8>
  a09a00:	a805883a 	mov	r2,r21
  a09a04:	ac000415 	stw	r16,16(r21)
  a09a08:	dfc00617 	ldw	ra,24(sp)
  a09a0c:	dd400517 	ldw	r21,20(sp)
  a09a10:	dd000417 	ldw	r20,16(sp)
  a09a14:	dcc00317 	ldw	r19,12(sp)
  a09a18:	dc800217 	ldw	r18,8(sp)
  a09a1c:	dc400117 	ldw	r17,4(sp)
  a09a20:	dc000017 	ldw	r16,0(sp)
  a09a24:	dec00704 	addi	sp,sp,28
  a09a28:	f800283a 	ret

00a09a2c <__i2b>:
  a09a2c:	defffd04 	addi	sp,sp,-12
  a09a30:	dc000015 	stw	r16,0(sp)
  a09a34:	04000044 	movi	r16,1
  a09a38:	dc800115 	stw	r18,4(sp)
  a09a3c:	2825883a 	mov	r18,r5
  a09a40:	800b883a 	mov	r5,r16
  a09a44:	dfc00215 	stw	ra,8(sp)
  a09a48:	0a093340 	call	a09334 <_Balloc>
  a09a4c:	14000415 	stw	r16,16(r2)
  a09a50:	14800515 	stw	r18,20(r2)
  a09a54:	dfc00217 	ldw	ra,8(sp)
  a09a58:	dc800117 	ldw	r18,4(sp)
  a09a5c:	dc000017 	ldw	r16,0(sp)
  a09a60:	dec00304 	addi	sp,sp,12
  a09a64:	f800283a 	ret

00a09a68 <__multadd>:
  a09a68:	defffa04 	addi	sp,sp,-24
  a09a6c:	dc800215 	stw	r18,8(sp)
  a09a70:	2c800417 	ldw	r18,16(r5)
  a09a74:	dd000415 	stw	r20,16(sp)
  a09a78:	dcc00315 	stw	r19,12(sp)
  a09a7c:	dc000015 	stw	r16,0(sp)
  a09a80:	dfc00515 	stw	ra,20(sp)
  a09a84:	3821883a 	mov	r16,r7
  a09a88:	dc400115 	stw	r17,4(sp)
  a09a8c:	2827883a 	mov	r19,r5
  a09a90:	2029883a 	mov	r20,r4
  a09a94:	2a000504 	addi	r8,r5,20
  a09a98:	000f883a 	mov	r7,zero
  a09a9c:	40800017 	ldw	r2,0(r8)
  a09aa0:	39c00044 	addi	r7,r7,1
  a09aa4:	10ffffcc 	andi	r3,r2,65535
  a09aa8:	1987383a 	mul	r3,r3,r6
  a09aac:	1004d43a 	srli	r2,r2,16
  a09ab0:	1c07883a 	add	r3,r3,r16
  a09ab4:	180ad43a 	srli	r5,r3,16
  a09ab8:	1185383a 	mul	r2,r2,r6
  a09abc:	18ffffcc 	andi	r3,r3,65535
  a09ac0:	1145883a 	add	r2,r2,r5
  a09ac4:	1008943a 	slli	r4,r2,16
  a09ac8:	1020d43a 	srli	r16,r2,16
  a09acc:	20c9883a 	add	r4,r4,r3
  a09ad0:	41000015 	stw	r4,0(r8)
  a09ad4:	42000104 	addi	r8,r8,4
  a09ad8:	3cbff016 	blt	r7,r18,a09a9c <__multadd+0x34>
  a09adc:	80000826 	beq	r16,zero,a09b00 <__multadd+0x98>
  a09ae0:	98800217 	ldw	r2,8(r19)
  a09ae4:	90800f0e 	bge	r18,r2,a09b24 <__multadd+0xbc>
  a09ae8:	9485883a 	add	r2,r18,r18
  a09aec:	1085883a 	add	r2,r2,r2
  a09af0:	14c5883a 	add	r2,r2,r19
  a09af4:	90c00044 	addi	r3,r18,1
  a09af8:	14000515 	stw	r16,20(r2)
  a09afc:	98c00415 	stw	r3,16(r19)
  a09b00:	9805883a 	mov	r2,r19
  a09b04:	dfc00517 	ldw	ra,20(sp)
  a09b08:	dd000417 	ldw	r20,16(sp)
  a09b0c:	dcc00317 	ldw	r19,12(sp)
  a09b10:	dc800217 	ldw	r18,8(sp)
  a09b14:	dc400117 	ldw	r17,4(sp)
  a09b18:	dc000017 	ldw	r16,0(sp)
  a09b1c:	dec00604 	addi	sp,sp,24
  a09b20:	f800283a 	ret
  a09b24:	99400117 	ldw	r5,4(r19)
  a09b28:	a009883a 	mov	r4,r20
  a09b2c:	29400044 	addi	r5,r5,1
  a09b30:	0a093340 	call	a09334 <_Balloc>
  a09b34:	99800417 	ldw	r6,16(r19)
  a09b38:	99400304 	addi	r5,r19,12
  a09b3c:	11000304 	addi	r4,r2,12
  a09b40:	318d883a 	add	r6,r6,r6
  a09b44:	318d883a 	add	r6,r6,r6
  a09b48:	31800204 	addi	r6,r6,8
  a09b4c:	1023883a 	mov	r17,r2
  a09b50:	0a08b9c0 	call	a08b9c <memcpy>
  a09b54:	980b883a 	mov	r5,r19
  a09b58:	a009883a 	mov	r4,r20
  a09b5c:	0a08db40 	call	a08db4 <_Bfree>
  a09b60:	8827883a 	mov	r19,r17
  a09b64:	003fe006 	br	a09ae8 <__multadd+0x80>

00a09b68 <__pow5mult>:
  a09b68:	defffa04 	addi	sp,sp,-24
  a09b6c:	308000cc 	andi	r2,r6,3
  a09b70:	dd000415 	stw	r20,16(sp)
  a09b74:	dcc00315 	stw	r19,12(sp)
  a09b78:	dc000015 	stw	r16,0(sp)
  a09b7c:	dfc00515 	stw	ra,20(sp)
  a09b80:	dc800215 	stw	r18,8(sp)
  a09b84:	dc400115 	stw	r17,4(sp)
  a09b88:	3021883a 	mov	r16,r6
  a09b8c:	2027883a 	mov	r19,r4
  a09b90:	2829883a 	mov	r20,r5
  a09b94:	10002b1e 	bne	r2,zero,a09c44 <__pow5mult+0xdc>
  a09b98:	8025d0ba 	srai	r18,r16,2
  a09b9c:	90001b26 	beq	r18,zero,a09c0c <__pow5mult+0xa4>
  a09ba0:	9c001217 	ldw	r16,72(r19)
  a09ba4:	8000081e 	bne	r16,zero,a09bc8 <__pow5mult+0x60>
  a09ba8:	00003006 	br	a09c6c <__pow5mult+0x104>
  a09bac:	800b883a 	mov	r5,r16
  a09bb0:	800d883a 	mov	r6,r16
  a09bb4:	9809883a 	mov	r4,r19
  a09bb8:	90001426 	beq	r18,zero,a09c0c <__pow5mult+0xa4>
  a09bbc:	80800017 	ldw	r2,0(r16)
  a09bc0:	10001b26 	beq	r2,zero,a09c30 <__pow5mult+0xc8>
  a09bc4:	1021883a 	mov	r16,r2
  a09bc8:	9080004c 	andi	r2,r18,1
  a09bcc:	1005003a 	cmpeq	r2,r2,zero
  a09bd0:	9025d07a 	srai	r18,r18,1
  a09bd4:	800d883a 	mov	r6,r16
  a09bd8:	9809883a 	mov	r4,r19
  a09bdc:	a00b883a 	mov	r5,r20
  a09be0:	103ff21e 	bne	r2,zero,a09bac <__pow5mult+0x44>
  a09be4:	0a098440 	call	a09844 <__multiply>
  a09be8:	a00b883a 	mov	r5,r20
  a09bec:	9809883a 	mov	r4,r19
  a09bf0:	1023883a 	mov	r17,r2
  a09bf4:	0a08db40 	call	a08db4 <_Bfree>
  a09bf8:	8829883a 	mov	r20,r17
  a09bfc:	800b883a 	mov	r5,r16
  a09c00:	800d883a 	mov	r6,r16
  a09c04:	9809883a 	mov	r4,r19
  a09c08:	903fec1e 	bne	r18,zero,a09bbc <__pow5mult+0x54>
  a09c0c:	a005883a 	mov	r2,r20
  a09c10:	dfc00517 	ldw	ra,20(sp)
  a09c14:	dd000417 	ldw	r20,16(sp)
  a09c18:	dcc00317 	ldw	r19,12(sp)
  a09c1c:	dc800217 	ldw	r18,8(sp)
  a09c20:	dc400117 	ldw	r17,4(sp)
  a09c24:	dc000017 	ldw	r16,0(sp)
  a09c28:	dec00604 	addi	sp,sp,24
  a09c2c:	f800283a 	ret
  a09c30:	0a098440 	call	a09844 <__multiply>
  a09c34:	80800015 	stw	r2,0(r16)
  a09c38:	1021883a 	mov	r16,r2
  a09c3c:	10000015 	stw	zero,0(r2)
  a09c40:	003fe106 	br	a09bc8 <__pow5mult+0x60>
  a09c44:	1085883a 	add	r2,r2,r2
  a09c48:	00c02874 	movhi	r3,161
  a09c4c:	18c39804 	addi	r3,r3,3680
  a09c50:	1085883a 	add	r2,r2,r2
  a09c54:	10c5883a 	add	r2,r2,r3
  a09c58:	11bfff17 	ldw	r6,-4(r2)
  a09c5c:	000f883a 	mov	r7,zero
  a09c60:	0a09a680 	call	a09a68 <__multadd>
  a09c64:	1029883a 	mov	r20,r2
  a09c68:	003fcb06 	br	a09b98 <__pow5mult+0x30>
  a09c6c:	9809883a 	mov	r4,r19
  a09c70:	01409c44 	movi	r5,625
  a09c74:	0a09a2c0 	call	a09a2c <__i2b>
  a09c78:	98801215 	stw	r2,72(r19)
  a09c7c:	1021883a 	mov	r16,r2
  a09c80:	10000015 	stw	zero,0(r2)
  a09c84:	003fd006 	br	a09bc8 <__pow5mult+0x60>

00a09c88 <__s2b>:
  a09c88:	defff904 	addi	sp,sp,-28
  a09c8c:	dcc00315 	stw	r19,12(sp)
  a09c90:	dc800215 	stw	r18,8(sp)
  a09c94:	2827883a 	mov	r19,r5
  a09c98:	2025883a 	mov	r18,r4
  a09c9c:	01400244 	movi	r5,9
  a09ca0:	39000204 	addi	r4,r7,8
  a09ca4:	dd000415 	stw	r20,16(sp)
  a09ca8:	dc400115 	stw	r17,4(sp)
  a09cac:	dfc00615 	stw	ra,24(sp)
  a09cb0:	dd400515 	stw	r21,20(sp)
  a09cb4:	dc000015 	stw	r16,0(sp)
  a09cb8:	3829883a 	mov	r20,r7
  a09cbc:	3023883a 	mov	r17,r6
  a09cc0:	0a0c0680 	call	a0c068 <__divsi3>
  a09cc4:	00c00044 	movi	r3,1
  a09cc8:	1880350e 	bge	r3,r2,a09da0 <__s2b+0x118>
  a09ccc:	000b883a 	mov	r5,zero
  a09cd0:	18c7883a 	add	r3,r3,r3
  a09cd4:	29400044 	addi	r5,r5,1
  a09cd8:	18bffd16 	blt	r3,r2,a09cd0 <__s2b+0x48>
  a09cdc:	9009883a 	mov	r4,r18
  a09ce0:	0a093340 	call	a09334 <_Balloc>
  a09ce4:	1011883a 	mov	r8,r2
  a09ce8:	d8800717 	ldw	r2,28(sp)
  a09cec:	00c00044 	movi	r3,1
  a09cf0:	01800244 	movi	r6,9
  a09cf4:	40800515 	stw	r2,20(r8)
  a09cf8:	40c00415 	stw	r3,16(r8)
  a09cfc:	3440260e 	bge	r6,r17,a09d98 <__s2b+0x110>
  a09d00:	3021883a 	mov	r16,r6
  a09d04:	99ab883a 	add	r21,r19,r6
  a09d08:	9c05883a 	add	r2,r19,r16
  a09d0c:	11c00007 	ldb	r7,0(r2)
  a09d10:	400b883a 	mov	r5,r8
  a09d14:	9009883a 	mov	r4,r18
  a09d18:	39fff404 	addi	r7,r7,-48
  a09d1c:	01800284 	movi	r6,10
  a09d20:	0a09a680 	call	a09a68 <__multadd>
  a09d24:	84000044 	addi	r16,r16,1
  a09d28:	1011883a 	mov	r8,r2
  a09d2c:	8c3ff61e 	bne	r17,r16,a09d08 <__s2b+0x80>
  a09d30:	ac45883a 	add	r2,r21,r17
  a09d34:	117ffe04 	addi	r5,r2,-8
  a09d38:	880d883a 	mov	r6,r17
  a09d3c:	35000c0e 	bge	r6,r20,a09d70 <__s2b+0xe8>
  a09d40:	a185c83a 	sub	r2,r20,r6
  a09d44:	2821883a 	mov	r16,r5
  a09d48:	28a3883a 	add	r17,r5,r2
  a09d4c:	81c00007 	ldb	r7,0(r16)
  a09d50:	400b883a 	mov	r5,r8
  a09d54:	9009883a 	mov	r4,r18
  a09d58:	39fff404 	addi	r7,r7,-48
  a09d5c:	01800284 	movi	r6,10
  a09d60:	0a09a680 	call	a09a68 <__multadd>
  a09d64:	84000044 	addi	r16,r16,1
  a09d68:	1011883a 	mov	r8,r2
  a09d6c:	847ff71e 	bne	r16,r17,a09d4c <__s2b+0xc4>
  a09d70:	4005883a 	mov	r2,r8
  a09d74:	dfc00617 	ldw	ra,24(sp)
  a09d78:	dd400517 	ldw	r21,20(sp)
  a09d7c:	dd000417 	ldw	r20,16(sp)
  a09d80:	dcc00317 	ldw	r19,12(sp)
  a09d84:	dc800217 	ldw	r18,8(sp)
  a09d88:	dc400117 	ldw	r17,4(sp)
  a09d8c:	dc000017 	ldw	r16,0(sp)
  a09d90:	dec00704 	addi	sp,sp,28
  a09d94:	f800283a 	ret
  a09d98:	99400284 	addi	r5,r19,10
  a09d9c:	003fe706 	br	a09d3c <__s2b+0xb4>
  a09da0:	000b883a 	mov	r5,zero
  a09da4:	003fcd06 	br	a09cdc <__s2b+0x54>

00a09da8 <_realloc_r>:
  a09da8:	defff404 	addi	sp,sp,-48
  a09dac:	dd800815 	stw	r22,32(sp)
  a09db0:	dc800415 	stw	r18,16(sp)
  a09db4:	dc400315 	stw	r17,12(sp)
  a09db8:	dfc00b15 	stw	ra,44(sp)
  a09dbc:	df000a15 	stw	fp,40(sp)
  a09dc0:	ddc00915 	stw	r23,36(sp)
  a09dc4:	dd400715 	stw	r21,28(sp)
  a09dc8:	dd000615 	stw	r20,24(sp)
  a09dcc:	dcc00515 	stw	r19,20(sp)
  a09dd0:	dc000215 	stw	r16,8(sp)
  a09dd4:	2825883a 	mov	r18,r5
  a09dd8:	3023883a 	mov	r17,r6
  a09ddc:	202d883a 	mov	r22,r4
  a09de0:	2800c926 	beq	r5,zero,a0a108 <_realloc_r+0x360>
  a09de4:	0a0c7bc0 	call	a0c7bc <__malloc_lock>
  a09de8:	943ffe04 	addi	r16,r18,-8
  a09dec:	88c002c4 	addi	r3,r17,11
  a09df0:	00800584 	movi	r2,22
  a09df4:	82000117 	ldw	r8,4(r16)
  a09df8:	10c01b2e 	bgeu	r2,r3,a09e68 <_realloc_r+0xc0>
  a09dfc:	00bffe04 	movi	r2,-8
  a09e00:	188e703a 	and	r7,r3,r2
  a09e04:	3839883a 	mov	fp,r7
  a09e08:	38001a16 	blt	r7,zero,a09e74 <_realloc_r+0xcc>
  a09e0c:	e4401936 	bltu	fp,r17,a09e74 <_realloc_r+0xcc>
  a09e10:	013fff04 	movi	r4,-4
  a09e14:	4126703a 	and	r19,r8,r4
  a09e18:	99c02616 	blt	r19,r7,a09eb4 <_realloc_r+0x10c>
  a09e1c:	802b883a 	mov	r21,r16
  a09e20:	9829883a 	mov	r20,r19
  a09e24:	84000204 	addi	r16,r16,8
  a09e28:	a80f883a 	mov	r7,r21
  a09e2c:	a70dc83a 	sub	r6,r20,fp
  a09e30:	008003c4 	movi	r2,15
  a09e34:	1180c136 	bltu	r2,r6,a0a13c <_realloc_r+0x394>
  a09e38:	38800117 	ldw	r2,4(r7)
  a09e3c:	a549883a 	add	r4,r20,r21
  a09e40:	1080004c 	andi	r2,r2,1
  a09e44:	a084b03a 	or	r2,r20,r2
  a09e48:	38800115 	stw	r2,4(r7)
  a09e4c:	20c00117 	ldw	r3,4(r4)
  a09e50:	18c00054 	ori	r3,r3,1
  a09e54:	20c00115 	stw	r3,4(r4)
  a09e58:	b009883a 	mov	r4,r22
  a09e5c:	0a0c7dc0 	call	a0c7dc <__malloc_unlock>
  a09e60:	8023883a 	mov	r17,r16
  a09e64:	00000606 	br	a09e80 <_realloc_r+0xd8>
  a09e68:	01c00404 	movi	r7,16
  a09e6c:	3839883a 	mov	fp,r7
  a09e70:	e47fe72e 	bgeu	fp,r17,a09e10 <_realloc_r+0x68>
  a09e74:	00800304 	movi	r2,12
  a09e78:	0023883a 	mov	r17,zero
  a09e7c:	b0800015 	stw	r2,0(r22)
  a09e80:	8805883a 	mov	r2,r17
  a09e84:	dfc00b17 	ldw	ra,44(sp)
  a09e88:	df000a17 	ldw	fp,40(sp)
  a09e8c:	ddc00917 	ldw	r23,36(sp)
  a09e90:	dd800817 	ldw	r22,32(sp)
  a09e94:	dd400717 	ldw	r21,28(sp)
  a09e98:	dd000617 	ldw	r20,24(sp)
  a09e9c:	dcc00517 	ldw	r19,20(sp)
  a09ea0:	dc800417 	ldw	r18,16(sp)
  a09ea4:	dc400317 	ldw	r17,12(sp)
  a09ea8:	dc000217 	ldw	r16,8(sp)
  a09eac:	dec00c04 	addi	sp,sp,48
  a09eb0:	f800283a 	ret
  a09eb4:	00802874 	movhi	r2,161
  a09eb8:	1084f304 	addi	r2,r2,5068
  a09ebc:	12400217 	ldw	r9,8(r2)
  a09ec0:	84cd883a 	add	r6,r16,r19
  a09ec4:	802b883a 	mov	r21,r16
  a09ec8:	3240b926 	beq	r6,r9,a0a1b0 <_realloc_r+0x408>
  a09ecc:	31400117 	ldw	r5,4(r6)
  a09ed0:	00bfff84 	movi	r2,-2
  a09ed4:	2884703a 	and	r2,r5,r2
  a09ed8:	1185883a 	add	r2,r2,r6
  a09edc:	10c00117 	ldw	r3,4(r2)
  a09ee0:	18c0004c 	andi	r3,r3,1
  a09ee4:	1807003a 	cmpeq	r3,r3,zero
  a09ee8:	1800a326 	beq	r3,zero,a0a178 <_realloc_r+0x3d0>
  a09eec:	2908703a 	and	r4,r5,r4
  a09ef0:	9929883a 	add	r20,r19,r4
  a09ef4:	a1c0a30e 	bge	r20,r7,a0a184 <_realloc_r+0x3dc>
  a09ef8:	4080004c 	andi	r2,r8,1
  a09efc:	1000551e 	bne	r2,zero,a0a054 <_realloc_r+0x2ac>
  a09f00:	80800017 	ldw	r2,0(r16)
  a09f04:	80afc83a 	sub	r23,r16,r2
  a09f08:	b8c00117 	ldw	r3,4(r23)
  a09f0c:	00bfff04 	movi	r2,-4
  a09f10:	1884703a 	and	r2,r3,r2
  a09f14:	30002e26 	beq	r6,zero,a09fd0 <_realloc_r+0x228>
  a09f18:	3240b926 	beq	r6,r9,a0a200 <_realloc_r+0x458>
  a09f1c:	98a9883a 	add	r20,r19,r2
  a09f20:	2509883a 	add	r4,r4,r20
  a09f24:	d9000015 	stw	r4,0(sp)
  a09f28:	21c02a16 	blt	r4,r7,a09fd4 <_realloc_r+0x22c>
  a09f2c:	30800317 	ldw	r2,12(r6)
  a09f30:	30c00217 	ldw	r3,8(r6)
  a09f34:	01400904 	movi	r5,36
  a09f38:	99bfff04 	addi	r6,r19,-4
  a09f3c:	18800315 	stw	r2,12(r3)
  a09f40:	10c00215 	stw	r3,8(r2)
  a09f44:	b9000317 	ldw	r4,12(r23)
  a09f48:	b8800217 	ldw	r2,8(r23)
  a09f4c:	b82b883a 	mov	r21,r23
  a09f50:	bc000204 	addi	r16,r23,8
  a09f54:	20800215 	stw	r2,8(r4)
  a09f58:	11000315 	stw	r4,12(r2)
  a09f5c:	2980e436 	bltu	r5,r6,a0a2f0 <_realloc_r+0x548>
  a09f60:	008004c4 	movi	r2,19
  a09f64:	9009883a 	mov	r4,r18
  a09f68:	8011883a 	mov	r8,r16
  a09f6c:	11800f2e 	bgeu	r2,r6,a09fac <_realloc_r+0x204>
  a09f70:	90800017 	ldw	r2,0(r18)
  a09f74:	ba000404 	addi	r8,r23,16
  a09f78:	91000204 	addi	r4,r18,8
  a09f7c:	b8800215 	stw	r2,8(r23)
  a09f80:	90c00117 	ldw	r3,4(r18)
  a09f84:	008006c4 	movi	r2,27
  a09f88:	b8c00315 	stw	r3,12(r23)
  a09f8c:	1180072e 	bgeu	r2,r6,a09fac <_realloc_r+0x204>
  a09f90:	90c00217 	ldw	r3,8(r18)
  a09f94:	ba000604 	addi	r8,r23,24
  a09f98:	91000404 	addi	r4,r18,16
  a09f9c:	b8c00415 	stw	r3,16(r23)
  a09fa0:	90800317 	ldw	r2,12(r18)
  a09fa4:	b8800515 	stw	r2,20(r23)
  a09fa8:	3140e726 	beq	r6,r5,a0a348 <_realloc_r+0x5a0>
  a09fac:	20800017 	ldw	r2,0(r4)
  a09fb0:	dd000017 	ldw	r20,0(sp)
  a09fb4:	b80f883a 	mov	r7,r23
  a09fb8:	40800015 	stw	r2,0(r8)
  a09fbc:	20c00117 	ldw	r3,4(r4)
  a09fc0:	40c00115 	stw	r3,4(r8)
  a09fc4:	20800217 	ldw	r2,8(r4)
  a09fc8:	40800215 	stw	r2,8(r8)
  a09fcc:	003f9706 	br	a09e2c <_realloc_r+0x84>
  a09fd0:	98a9883a 	add	r20,r19,r2
  a09fd4:	a1c01f16 	blt	r20,r7,a0a054 <_realloc_r+0x2ac>
  a09fd8:	b8c00317 	ldw	r3,12(r23)
  a09fdc:	b8800217 	ldw	r2,8(r23)
  a09fe0:	99bfff04 	addi	r6,r19,-4
  a09fe4:	01400904 	movi	r5,36
  a09fe8:	b82b883a 	mov	r21,r23
  a09fec:	18800215 	stw	r2,8(r3)
  a09ff0:	10c00315 	stw	r3,12(r2)
  a09ff4:	bc000204 	addi	r16,r23,8
  a09ff8:	2980c336 	bltu	r5,r6,a0a308 <_realloc_r+0x560>
  a09ffc:	008004c4 	movi	r2,19
  a0a000:	9009883a 	mov	r4,r18
  a0a004:	8011883a 	mov	r8,r16
  a0a008:	11800f2e 	bgeu	r2,r6,a0a048 <_realloc_r+0x2a0>
  a0a00c:	90800017 	ldw	r2,0(r18)
  a0a010:	ba000404 	addi	r8,r23,16
  a0a014:	91000204 	addi	r4,r18,8
  a0a018:	b8800215 	stw	r2,8(r23)
  a0a01c:	90c00117 	ldw	r3,4(r18)
  a0a020:	008006c4 	movi	r2,27
  a0a024:	b8c00315 	stw	r3,12(r23)
  a0a028:	1180072e 	bgeu	r2,r6,a0a048 <_realloc_r+0x2a0>
  a0a02c:	90c00217 	ldw	r3,8(r18)
  a0a030:	ba000604 	addi	r8,r23,24
  a0a034:	91000404 	addi	r4,r18,16
  a0a038:	b8c00415 	stw	r3,16(r23)
  a0a03c:	90800317 	ldw	r2,12(r18)
  a0a040:	b8800515 	stw	r2,20(r23)
  a0a044:	3140c726 	beq	r6,r5,a0a364 <_realloc_r+0x5bc>
  a0a048:	20800017 	ldw	r2,0(r4)
  a0a04c:	b80f883a 	mov	r7,r23
  a0a050:	003fd906 	br	a09fb8 <_realloc_r+0x210>
  a0a054:	880b883a 	mov	r5,r17
  a0a058:	b009883a 	mov	r4,r22
  a0a05c:	0a083780 	call	a08378 <_malloc_r>
  a0a060:	1023883a 	mov	r17,r2
  a0a064:	10002526 	beq	r2,zero,a0a0fc <_realloc_r+0x354>
  a0a068:	80800117 	ldw	r2,4(r16)
  a0a06c:	00ffff84 	movi	r3,-2
  a0a070:	893ffe04 	addi	r4,r17,-8
  a0a074:	10c4703a 	and	r2,r2,r3
  a0a078:	8085883a 	add	r2,r16,r2
  a0a07c:	20809526 	beq	r4,r2,a0a2d4 <_realloc_r+0x52c>
  a0a080:	99bfff04 	addi	r6,r19,-4
  a0a084:	01c00904 	movi	r7,36
  a0a088:	39804536 	bltu	r7,r6,a0a1a0 <_realloc_r+0x3f8>
  a0a08c:	008004c4 	movi	r2,19
  a0a090:	9009883a 	mov	r4,r18
  a0a094:	880b883a 	mov	r5,r17
  a0a098:	11800f2e 	bgeu	r2,r6,a0a0d8 <_realloc_r+0x330>
  a0a09c:	90800017 	ldw	r2,0(r18)
  a0a0a0:	89400204 	addi	r5,r17,8
  a0a0a4:	91000204 	addi	r4,r18,8
  a0a0a8:	88800015 	stw	r2,0(r17)
  a0a0ac:	90c00117 	ldw	r3,4(r18)
  a0a0b0:	008006c4 	movi	r2,27
  a0a0b4:	88c00115 	stw	r3,4(r17)
  a0a0b8:	1180072e 	bgeu	r2,r6,a0a0d8 <_realloc_r+0x330>
  a0a0bc:	90c00217 	ldw	r3,8(r18)
  a0a0c0:	89400404 	addi	r5,r17,16
  a0a0c4:	91000404 	addi	r4,r18,16
  a0a0c8:	88c00215 	stw	r3,8(r17)
  a0a0cc:	90800317 	ldw	r2,12(r18)
  a0a0d0:	88800315 	stw	r2,12(r17)
  a0a0d4:	31c09126 	beq	r6,r7,a0a31c <_realloc_r+0x574>
  a0a0d8:	20800017 	ldw	r2,0(r4)
  a0a0dc:	28800015 	stw	r2,0(r5)
  a0a0e0:	20c00117 	ldw	r3,4(r4)
  a0a0e4:	28c00115 	stw	r3,4(r5)
  a0a0e8:	20800217 	ldw	r2,8(r4)
  a0a0ec:	28800215 	stw	r2,8(r5)
  a0a0f0:	900b883a 	mov	r5,r18
  a0a0f4:	b009883a 	mov	r4,r22
  a0a0f8:	0a077f00 	call	a077f0 <_free_r>
  a0a0fc:	b009883a 	mov	r4,r22
  a0a100:	0a0c7dc0 	call	a0c7dc <__malloc_unlock>
  a0a104:	003f5e06 	br	a09e80 <_realloc_r+0xd8>
  a0a108:	300b883a 	mov	r5,r6
  a0a10c:	dfc00b17 	ldw	ra,44(sp)
  a0a110:	df000a17 	ldw	fp,40(sp)
  a0a114:	ddc00917 	ldw	r23,36(sp)
  a0a118:	dd800817 	ldw	r22,32(sp)
  a0a11c:	dd400717 	ldw	r21,28(sp)
  a0a120:	dd000617 	ldw	r20,24(sp)
  a0a124:	dcc00517 	ldw	r19,20(sp)
  a0a128:	dc800417 	ldw	r18,16(sp)
  a0a12c:	dc400317 	ldw	r17,12(sp)
  a0a130:	dc000217 	ldw	r16,8(sp)
  a0a134:	dec00c04 	addi	sp,sp,48
  a0a138:	0a083781 	jmpi	a08378 <_malloc_r>
  a0a13c:	38800117 	ldw	r2,4(r7)
  a0a140:	e54b883a 	add	r5,fp,r21
  a0a144:	31000054 	ori	r4,r6,1
  a0a148:	1080004c 	andi	r2,r2,1
  a0a14c:	1704b03a 	or	r2,r2,fp
  a0a150:	38800115 	stw	r2,4(r7)
  a0a154:	29000115 	stw	r4,4(r5)
  a0a158:	2987883a 	add	r3,r5,r6
  a0a15c:	18800117 	ldw	r2,4(r3)
  a0a160:	29400204 	addi	r5,r5,8
  a0a164:	b009883a 	mov	r4,r22
  a0a168:	10800054 	ori	r2,r2,1
  a0a16c:	18800115 	stw	r2,4(r3)
  a0a170:	0a077f00 	call	a077f0 <_free_r>
  a0a174:	003f3806 	br	a09e58 <_realloc_r+0xb0>
  a0a178:	000d883a 	mov	r6,zero
  a0a17c:	0009883a 	mov	r4,zero
  a0a180:	003f5d06 	br	a09ef8 <_realloc_r+0x150>
  a0a184:	30c00217 	ldw	r3,8(r6)
  a0a188:	30800317 	ldw	r2,12(r6)
  a0a18c:	800f883a 	mov	r7,r16
  a0a190:	84000204 	addi	r16,r16,8
  a0a194:	10c00215 	stw	r3,8(r2)
  a0a198:	18800315 	stw	r2,12(r3)
  a0a19c:	003f2306 	br	a09e2c <_realloc_r+0x84>
  a0a1a0:	8809883a 	mov	r4,r17
  a0a1a4:	900b883a 	mov	r5,r18
  a0a1a8:	0a08c3c0 	call	a08c3c <memmove>
  a0a1ac:	003fd006 	br	a0a0f0 <_realloc_r+0x348>
  a0a1b0:	30800117 	ldw	r2,4(r6)
  a0a1b4:	e0c00404 	addi	r3,fp,16
  a0a1b8:	1108703a 	and	r4,r2,r4
  a0a1bc:	9905883a 	add	r2,r19,r4
  a0a1c0:	10ff4d16 	blt	r2,r3,a09ef8 <_realloc_r+0x150>
  a0a1c4:	1705c83a 	sub	r2,r2,fp
  a0a1c8:	870b883a 	add	r5,r16,fp
  a0a1cc:	10800054 	ori	r2,r2,1
  a0a1d0:	28800115 	stw	r2,4(r5)
  a0a1d4:	80c00117 	ldw	r3,4(r16)
  a0a1d8:	00802874 	movhi	r2,161
  a0a1dc:	1084f304 	addi	r2,r2,5068
  a0a1e0:	b009883a 	mov	r4,r22
  a0a1e4:	18c0004c 	andi	r3,r3,1
  a0a1e8:	e0c6b03a 	or	r3,fp,r3
  a0a1ec:	11400215 	stw	r5,8(r2)
  a0a1f0:	80c00115 	stw	r3,4(r16)
  a0a1f4:	0a0c7dc0 	call	a0c7dc <__malloc_unlock>
  a0a1f8:	84400204 	addi	r17,r16,8
  a0a1fc:	003f2006 	br	a09e80 <_realloc_r+0xd8>
  a0a200:	98a9883a 	add	r20,r19,r2
  a0a204:	2509883a 	add	r4,r4,r20
  a0a208:	e0800404 	addi	r2,fp,16
  a0a20c:	d9000115 	stw	r4,4(sp)
  a0a210:	20bf7016 	blt	r4,r2,a09fd4 <_realloc_r+0x22c>
  a0a214:	b8c00317 	ldw	r3,12(r23)
  a0a218:	b8800217 	ldw	r2,8(r23)
  a0a21c:	99bfff04 	addi	r6,r19,-4
  a0a220:	01400904 	movi	r5,36
  a0a224:	18800215 	stw	r2,8(r3)
  a0a228:	10c00315 	stw	r3,12(r2)
  a0a22c:	bc400204 	addi	r17,r23,8
  a0a230:	29804136 	bltu	r5,r6,a0a338 <_realloc_r+0x590>
  a0a234:	008004c4 	movi	r2,19
  a0a238:	9009883a 	mov	r4,r18
  a0a23c:	880f883a 	mov	r7,r17
  a0a240:	11800f2e 	bgeu	r2,r6,a0a280 <_realloc_r+0x4d8>
  a0a244:	90800017 	ldw	r2,0(r18)
  a0a248:	b9c00404 	addi	r7,r23,16
  a0a24c:	91000204 	addi	r4,r18,8
  a0a250:	b8800215 	stw	r2,8(r23)
  a0a254:	90c00117 	ldw	r3,4(r18)
  a0a258:	008006c4 	movi	r2,27
  a0a25c:	b8c00315 	stw	r3,12(r23)
  a0a260:	1180072e 	bgeu	r2,r6,a0a280 <_realloc_r+0x4d8>
  a0a264:	90c00217 	ldw	r3,8(r18)
  a0a268:	b9c00604 	addi	r7,r23,24
  a0a26c:	91000404 	addi	r4,r18,16
  a0a270:	b8c00415 	stw	r3,16(r23)
  a0a274:	90800317 	ldw	r2,12(r18)
  a0a278:	b8800515 	stw	r2,20(r23)
  a0a27c:	31404026 	beq	r6,r5,a0a380 <_realloc_r+0x5d8>
  a0a280:	20800017 	ldw	r2,0(r4)
  a0a284:	38800015 	stw	r2,0(r7)
  a0a288:	20c00117 	ldw	r3,4(r4)
  a0a28c:	38c00115 	stw	r3,4(r7)
  a0a290:	20800217 	ldw	r2,8(r4)
  a0a294:	38800215 	stw	r2,8(r7)
  a0a298:	d8c00117 	ldw	r3,4(sp)
  a0a29c:	bf0b883a 	add	r5,r23,fp
  a0a2a0:	b009883a 	mov	r4,r22
  a0a2a4:	1f05c83a 	sub	r2,r3,fp
  a0a2a8:	10800054 	ori	r2,r2,1
  a0a2ac:	28800115 	stw	r2,4(r5)
  a0a2b0:	b8c00117 	ldw	r3,4(r23)
  a0a2b4:	00802874 	movhi	r2,161
  a0a2b8:	1084f304 	addi	r2,r2,5068
  a0a2bc:	11400215 	stw	r5,8(r2)
  a0a2c0:	18c0004c 	andi	r3,r3,1
  a0a2c4:	e0c6b03a 	or	r3,fp,r3
  a0a2c8:	b8c00115 	stw	r3,4(r23)
  a0a2cc:	0a0c7dc0 	call	a0c7dc <__malloc_unlock>
  a0a2d0:	003eeb06 	br	a09e80 <_realloc_r+0xd8>
  a0a2d4:	20800117 	ldw	r2,4(r4)
  a0a2d8:	00ffff04 	movi	r3,-4
  a0a2dc:	800f883a 	mov	r7,r16
  a0a2e0:	10c4703a 	and	r2,r2,r3
  a0a2e4:	98a9883a 	add	r20,r19,r2
  a0a2e8:	84000204 	addi	r16,r16,8
  a0a2ec:	003ecf06 	br	a09e2c <_realloc_r+0x84>
  a0a2f0:	900b883a 	mov	r5,r18
  a0a2f4:	8009883a 	mov	r4,r16
  a0a2f8:	0a08c3c0 	call	a08c3c <memmove>
  a0a2fc:	dd000017 	ldw	r20,0(sp)
  a0a300:	b80f883a 	mov	r7,r23
  a0a304:	003ec906 	br	a09e2c <_realloc_r+0x84>
  a0a308:	900b883a 	mov	r5,r18
  a0a30c:	8009883a 	mov	r4,r16
  a0a310:	0a08c3c0 	call	a08c3c <memmove>
  a0a314:	b80f883a 	mov	r7,r23
  a0a318:	003ec406 	br	a09e2c <_realloc_r+0x84>
  a0a31c:	90c00417 	ldw	r3,16(r18)
  a0a320:	89400604 	addi	r5,r17,24
  a0a324:	91000604 	addi	r4,r18,24
  a0a328:	88c00415 	stw	r3,16(r17)
  a0a32c:	90800517 	ldw	r2,20(r18)
  a0a330:	88800515 	stw	r2,20(r17)
  a0a334:	003f6806 	br	a0a0d8 <_realloc_r+0x330>
  a0a338:	900b883a 	mov	r5,r18
  a0a33c:	8809883a 	mov	r4,r17
  a0a340:	0a08c3c0 	call	a08c3c <memmove>
  a0a344:	003fd406 	br	a0a298 <_realloc_r+0x4f0>
  a0a348:	90c00417 	ldw	r3,16(r18)
  a0a34c:	91000604 	addi	r4,r18,24
  a0a350:	ba000804 	addi	r8,r23,32
  a0a354:	b8c00615 	stw	r3,24(r23)
  a0a358:	90800517 	ldw	r2,20(r18)
  a0a35c:	b8800715 	stw	r2,28(r23)
  a0a360:	003f1206 	br	a09fac <_realloc_r+0x204>
  a0a364:	90c00417 	ldw	r3,16(r18)
  a0a368:	91000604 	addi	r4,r18,24
  a0a36c:	ba000804 	addi	r8,r23,32
  a0a370:	b8c00615 	stw	r3,24(r23)
  a0a374:	90800517 	ldw	r2,20(r18)
  a0a378:	b8800715 	stw	r2,28(r23)
  a0a37c:	003f3206 	br	a0a048 <_realloc_r+0x2a0>
  a0a380:	90c00417 	ldw	r3,16(r18)
  a0a384:	91000604 	addi	r4,r18,24
  a0a388:	b9c00804 	addi	r7,r23,32
  a0a38c:	b8c00615 	stw	r3,24(r23)
  a0a390:	90800517 	ldw	r2,20(r18)
  a0a394:	b8800715 	stw	r2,28(r23)
  a0a398:	003fb906 	br	a0a280 <_realloc_r+0x4d8>

00a0a39c <__isinfd>:
  a0a39c:	200d883a 	mov	r6,r4
  a0a3a0:	0109c83a 	sub	r4,zero,r4
  a0a3a4:	2188b03a 	or	r4,r4,r6
  a0a3a8:	2008d7fa 	srli	r4,r4,31
  a0a3ac:	00a00034 	movhi	r2,32768
  a0a3b0:	10bfffc4 	addi	r2,r2,-1
  a0a3b4:	1144703a 	and	r2,r2,r5
  a0a3b8:	2088b03a 	or	r4,r4,r2
  a0a3bc:	009ffc34 	movhi	r2,32752
  a0a3c0:	1105c83a 	sub	r2,r2,r4
  a0a3c4:	0087c83a 	sub	r3,zero,r2
  a0a3c8:	10c4b03a 	or	r2,r2,r3
  a0a3cc:	1004d7fa 	srli	r2,r2,31
  a0a3d0:	00c00044 	movi	r3,1
  a0a3d4:	1885c83a 	sub	r2,r3,r2
  a0a3d8:	f800283a 	ret

00a0a3dc <__isnand>:
  a0a3dc:	200d883a 	mov	r6,r4
  a0a3e0:	0109c83a 	sub	r4,zero,r4
  a0a3e4:	2188b03a 	or	r4,r4,r6
  a0a3e8:	2008d7fa 	srli	r4,r4,31
  a0a3ec:	00a00034 	movhi	r2,32768
  a0a3f0:	10bfffc4 	addi	r2,r2,-1
  a0a3f4:	1144703a 	and	r2,r2,r5
  a0a3f8:	2088b03a 	or	r4,r4,r2
  a0a3fc:	009ffc34 	movhi	r2,32752
  a0a400:	1105c83a 	sub	r2,r2,r4
  a0a404:	1004d7fa 	srli	r2,r2,31
  a0a408:	f800283a 	ret

00a0a40c <_sbrk_r>:
  a0a40c:	defffd04 	addi	sp,sp,-12
  a0a410:	dc000015 	stw	r16,0(sp)
  a0a414:	04002874 	movhi	r16,161
  a0a418:	8411e104 	addi	r16,r16,18308
  a0a41c:	dc400115 	stw	r17,4(sp)
  a0a420:	80000015 	stw	zero,0(r16)
  a0a424:	2023883a 	mov	r17,r4
  a0a428:	2809883a 	mov	r4,r5
  a0a42c:	dfc00215 	stw	ra,8(sp)
  a0a430:	0a0c9dc0 	call	a0c9dc <sbrk>
  a0a434:	1007883a 	mov	r3,r2
  a0a438:	00bfffc4 	movi	r2,-1
  a0a43c:	18800626 	beq	r3,r2,a0a458 <_sbrk_r+0x4c>
  a0a440:	1805883a 	mov	r2,r3
  a0a444:	dfc00217 	ldw	ra,8(sp)
  a0a448:	dc400117 	ldw	r17,4(sp)
  a0a44c:	dc000017 	ldw	r16,0(sp)
  a0a450:	dec00304 	addi	sp,sp,12
  a0a454:	f800283a 	ret
  a0a458:	80800017 	ldw	r2,0(r16)
  a0a45c:	103ff826 	beq	r2,zero,a0a440 <_sbrk_r+0x34>
  a0a460:	88800015 	stw	r2,0(r17)
  a0a464:	1805883a 	mov	r2,r3
  a0a468:	dfc00217 	ldw	ra,8(sp)
  a0a46c:	dc400117 	ldw	r17,4(sp)
  a0a470:	dc000017 	ldw	r16,0(sp)
  a0a474:	dec00304 	addi	sp,sp,12
  a0a478:	f800283a 	ret

00a0a47c <__sclose>:
  a0a47c:	2940038f 	ldh	r5,14(r5)
  a0a480:	0a0a7b01 	jmpi	a0a7b0 <_close_r>

00a0a484 <__sseek>:
  a0a484:	defffe04 	addi	sp,sp,-8
  a0a488:	dc000015 	stw	r16,0(sp)
  a0a48c:	2821883a 	mov	r16,r5
  a0a490:	2940038f 	ldh	r5,14(r5)
  a0a494:	dfc00115 	stw	ra,4(sp)
  a0a498:	0a0aa280 	call	a0aa28 <_lseek_r>
  a0a49c:	1007883a 	mov	r3,r2
  a0a4a0:	00bfffc4 	movi	r2,-1
  a0a4a4:	18800926 	beq	r3,r2,a0a4cc <__sseek+0x48>
  a0a4a8:	8080030b 	ldhu	r2,12(r16)
  a0a4ac:	80c01415 	stw	r3,80(r16)
  a0a4b0:	10840014 	ori	r2,r2,4096
  a0a4b4:	8080030d 	sth	r2,12(r16)
  a0a4b8:	1805883a 	mov	r2,r3
  a0a4bc:	dfc00117 	ldw	ra,4(sp)
  a0a4c0:	dc000017 	ldw	r16,0(sp)
  a0a4c4:	dec00204 	addi	sp,sp,8
  a0a4c8:	f800283a 	ret
  a0a4cc:	8080030b 	ldhu	r2,12(r16)
  a0a4d0:	10bbffcc 	andi	r2,r2,61439
  a0a4d4:	8080030d 	sth	r2,12(r16)
  a0a4d8:	1805883a 	mov	r2,r3
  a0a4dc:	dfc00117 	ldw	ra,4(sp)
  a0a4e0:	dc000017 	ldw	r16,0(sp)
  a0a4e4:	dec00204 	addi	sp,sp,8
  a0a4e8:	f800283a 	ret

00a0a4ec <__swrite>:
  a0a4ec:	2880030b 	ldhu	r2,12(r5)
  a0a4f0:	defffb04 	addi	sp,sp,-20
  a0a4f4:	dcc00315 	stw	r19,12(sp)
  a0a4f8:	1080400c 	andi	r2,r2,256
  a0a4fc:	dc800215 	stw	r18,8(sp)
  a0a500:	dc400115 	stw	r17,4(sp)
  a0a504:	dc000015 	stw	r16,0(sp)
  a0a508:	3027883a 	mov	r19,r6
  a0a50c:	3825883a 	mov	r18,r7
  a0a510:	dfc00415 	stw	ra,16(sp)
  a0a514:	2821883a 	mov	r16,r5
  a0a518:	000d883a 	mov	r6,zero
  a0a51c:	01c00084 	movi	r7,2
  a0a520:	2023883a 	mov	r17,r4
  a0a524:	10000226 	beq	r2,zero,a0a530 <__swrite+0x44>
  a0a528:	2940038f 	ldh	r5,14(r5)
  a0a52c:	0a0aa280 	call	a0aa28 <_lseek_r>
  a0a530:	8080030b 	ldhu	r2,12(r16)
  a0a534:	8140038f 	ldh	r5,14(r16)
  a0a538:	8809883a 	mov	r4,r17
  a0a53c:	10bbffcc 	andi	r2,r2,61439
  a0a540:	980d883a 	mov	r6,r19
  a0a544:	900f883a 	mov	r7,r18
  a0a548:	8080030d 	sth	r2,12(r16)
  a0a54c:	dfc00417 	ldw	ra,16(sp)
  a0a550:	dcc00317 	ldw	r19,12(sp)
  a0a554:	dc800217 	ldw	r18,8(sp)
  a0a558:	dc400117 	ldw	r17,4(sp)
  a0a55c:	dc000017 	ldw	r16,0(sp)
  a0a560:	dec00504 	addi	sp,sp,20
  a0a564:	0a0a6841 	jmpi	a0a684 <_write_r>

00a0a568 <__sread>:
  a0a568:	defffe04 	addi	sp,sp,-8
  a0a56c:	dc000015 	stw	r16,0(sp)
  a0a570:	2821883a 	mov	r16,r5
  a0a574:	2940038f 	ldh	r5,14(r5)
  a0a578:	dfc00115 	stw	ra,4(sp)
  a0a57c:	0a0aaa00 	call	a0aaa0 <_read_r>
  a0a580:	1007883a 	mov	r3,r2
  a0a584:	10000816 	blt	r2,zero,a0a5a8 <__sread+0x40>
  a0a588:	80801417 	ldw	r2,80(r16)
  a0a58c:	10c5883a 	add	r2,r2,r3
  a0a590:	80801415 	stw	r2,80(r16)
  a0a594:	1805883a 	mov	r2,r3
  a0a598:	dfc00117 	ldw	ra,4(sp)
  a0a59c:	dc000017 	ldw	r16,0(sp)
  a0a5a0:	dec00204 	addi	sp,sp,8
  a0a5a4:	f800283a 	ret
  a0a5a8:	8080030b 	ldhu	r2,12(r16)
  a0a5ac:	10bbffcc 	andi	r2,r2,61439
  a0a5b0:	8080030d 	sth	r2,12(r16)
  a0a5b4:	1805883a 	mov	r2,r3
  a0a5b8:	dfc00117 	ldw	ra,4(sp)
  a0a5bc:	dc000017 	ldw	r16,0(sp)
  a0a5c0:	dec00204 	addi	sp,sp,8
  a0a5c4:	f800283a 	ret

00a0a5c8 <strcmp>:
  a0a5c8:	2144b03a 	or	r2,r4,r5
  a0a5cc:	108000cc 	andi	r2,r2,3
  a0a5d0:	10001d1e 	bne	r2,zero,a0a648 <strcmp+0x80>
  a0a5d4:	200f883a 	mov	r7,r4
  a0a5d8:	28800017 	ldw	r2,0(r5)
  a0a5dc:	21000017 	ldw	r4,0(r4)
  a0a5e0:	280d883a 	mov	r6,r5
  a0a5e4:	2080161e 	bne	r4,r2,a0a640 <strcmp+0x78>
  a0a5e8:	023fbff4 	movhi	r8,65279
  a0a5ec:	423fbfc4 	addi	r8,r8,-257
  a0a5f0:	2207883a 	add	r3,r4,r8
  a0a5f4:	01602074 	movhi	r5,32897
  a0a5f8:	29602004 	addi	r5,r5,-32640
  a0a5fc:	1946703a 	and	r3,r3,r5
  a0a600:	0104303a 	nor	r2,zero,r4
  a0a604:	10c4703a 	and	r2,r2,r3
  a0a608:	10001c1e 	bne	r2,zero,a0a67c <strcmp+0xb4>
  a0a60c:	4013883a 	mov	r9,r8
  a0a610:	2811883a 	mov	r8,r5
  a0a614:	00000106 	br	a0a61c <strcmp+0x54>
  a0a618:	1800181e 	bne	r3,zero,a0a67c <strcmp+0xb4>
  a0a61c:	39c00104 	addi	r7,r7,4
  a0a620:	39000017 	ldw	r4,0(r7)
  a0a624:	31800104 	addi	r6,r6,4
  a0a628:	31400017 	ldw	r5,0(r6)
  a0a62c:	2245883a 	add	r2,r4,r9
  a0a630:	1204703a 	and	r2,r2,r8
  a0a634:	0106303a 	nor	r3,zero,r4
  a0a638:	1886703a 	and	r3,r3,r2
  a0a63c:	217ff626 	beq	r4,r5,a0a618 <strcmp+0x50>
  a0a640:	3809883a 	mov	r4,r7
  a0a644:	300b883a 	mov	r5,r6
  a0a648:	20c00007 	ldb	r3,0(r4)
  a0a64c:	1800051e 	bne	r3,zero,a0a664 <strcmp+0x9c>
  a0a650:	00000606 	br	a0a66c <strcmp+0xa4>
  a0a654:	21000044 	addi	r4,r4,1
  a0a658:	20c00007 	ldb	r3,0(r4)
  a0a65c:	29400044 	addi	r5,r5,1
  a0a660:	18000226 	beq	r3,zero,a0a66c <strcmp+0xa4>
  a0a664:	28800007 	ldb	r2,0(r5)
  a0a668:	18bffa26 	beq	r3,r2,a0a654 <strcmp+0x8c>
  a0a66c:	20c00003 	ldbu	r3,0(r4)
  a0a670:	28800003 	ldbu	r2,0(r5)
  a0a674:	1885c83a 	sub	r2,r3,r2
  a0a678:	f800283a 	ret
  a0a67c:	0005883a 	mov	r2,zero
  a0a680:	f800283a 	ret

00a0a684 <_write_r>:
  a0a684:	defffd04 	addi	sp,sp,-12
  a0a688:	dc000015 	stw	r16,0(sp)
  a0a68c:	04002874 	movhi	r16,161
  a0a690:	8411e104 	addi	r16,r16,18308
  a0a694:	dc400115 	stw	r17,4(sp)
  a0a698:	80000015 	stw	zero,0(r16)
  a0a69c:	2023883a 	mov	r17,r4
  a0a6a0:	2809883a 	mov	r4,r5
  a0a6a4:	300b883a 	mov	r5,r6
  a0a6a8:	380d883a 	mov	r6,r7
  a0a6ac:	dfc00215 	stw	ra,8(sp)
  a0a6b0:	0a0ca980 	call	a0ca98 <write>
  a0a6b4:	1007883a 	mov	r3,r2
  a0a6b8:	00bfffc4 	movi	r2,-1
  a0a6bc:	18800626 	beq	r3,r2,a0a6d8 <_write_r+0x54>
  a0a6c0:	1805883a 	mov	r2,r3
  a0a6c4:	dfc00217 	ldw	ra,8(sp)
  a0a6c8:	dc400117 	ldw	r17,4(sp)
  a0a6cc:	dc000017 	ldw	r16,0(sp)
  a0a6d0:	dec00304 	addi	sp,sp,12
  a0a6d4:	f800283a 	ret
  a0a6d8:	80800017 	ldw	r2,0(r16)
  a0a6dc:	103ff826 	beq	r2,zero,a0a6c0 <_write_r+0x3c>
  a0a6e0:	88800015 	stw	r2,0(r17)
  a0a6e4:	1805883a 	mov	r2,r3
  a0a6e8:	dfc00217 	ldw	ra,8(sp)
  a0a6ec:	dc400117 	ldw	r17,4(sp)
  a0a6f0:	dc000017 	ldw	r16,0(sp)
  a0a6f4:	dec00304 	addi	sp,sp,12
  a0a6f8:	f800283a 	ret

00a0a6fc <_calloc_r>:
  a0a6fc:	298b383a 	mul	r5,r5,r6
  a0a700:	defffe04 	addi	sp,sp,-8
  a0a704:	dc000015 	stw	r16,0(sp)
  a0a708:	dfc00115 	stw	ra,4(sp)
  a0a70c:	0a083780 	call	a08378 <_malloc_r>
  a0a710:	1021883a 	mov	r16,r2
  a0a714:	01c00904 	movi	r7,36
  a0a718:	10000d26 	beq	r2,zero,a0a750 <_calloc_r+0x54>
  a0a71c:	10ffff17 	ldw	r3,-4(r2)
  a0a720:	1009883a 	mov	r4,r2
  a0a724:	00bfff04 	movi	r2,-4
  a0a728:	1886703a 	and	r3,r3,r2
  a0a72c:	1887883a 	add	r3,r3,r2
  a0a730:	180d883a 	mov	r6,r3
  a0a734:	000b883a 	mov	r5,zero
  a0a738:	38c01736 	bltu	r7,r3,a0a798 <_calloc_r+0x9c>
  a0a73c:	008004c4 	movi	r2,19
  a0a740:	10c00836 	bltu	r2,r3,a0a764 <_calloc_r+0x68>
  a0a744:	20000215 	stw	zero,8(r4)
  a0a748:	20000015 	stw	zero,0(r4)
  a0a74c:	20000115 	stw	zero,4(r4)
  a0a750:	8005883a 	mov	r2,r16
  a0a754:	dfc00117 	ldw	ra,4(sp)
  a0a758:	dc000017 	ldw	r16,0(sp)
  a0a75c:	dec00204 	addi	sp,sp,8
  a0a760:	f800283a 	ret
  a0a764:	008006c4 	movi	r2,27
  a0a768:	80000015 	stw	zero,0(r16)
  a0a76c:	80000115 	stw	zero,4(r16)
  a0a770:	81000204 	addi	r4,r16,8
  a0a774:	10fff32e 	bgeu	r2,r3,a0a744 <_calloc_r+0x48>
  a0a778:	80000215 	stw	zero,8(r16)
  a0a77c:	80000315 	stw	zero,12(r16)
  a0a780:	81000404 	addi	r4,r16,16
  a0a784:	19ffef1e 	bne	r3,r7,a0a744 <_calloc_r+0x48>
  a0a788:	81000604 	addi	r4,r16,24
  a0a78c:	80000415 	stw	zero,16(r16)
  a0a790:	80000515 	stw	zero,20(r16)
  a0a794:	003feb06 	br	a0a744 <_calloc_r+0x48>
  a0a798:	0a08d1c0 	call	a08d1c <memset>
  a0a79c:	8005883a 	mov	r2,r16
  a0a7a0:	dfc00117 	ldw	ra,4(sp)
  a0a7a4:	dc000017 	ldw	r16,0(sp)
  a0a7a8:	dec00204 	addi	sp,sp,8
  a0a7ac:	f800283a 	ret

00a0a7b0 <_close_r>:
  a0a7b0:	defffd04 	addi	sp,sp,-12
  a0a7b4:	dc000015 	stw	r16,0(sp)
  a0a7b8:	04002874 	movhi	r16,161
  a0a7bc:	8411e104 	addi	r16,r16,18308
  a0a7c0:	dc400115 	stw	r17,4(sp)
  a0a7c4:	80000015 	stw	zero,0(r16)
  a0a7c8:	2023883a 	mov	r17,r4
  a0a7cc:	2809883a 	mov	r4,r5
  a0a7d0:	dfc00215 	stw	ra,8(sp)
  a0a7d4:	0a0c1380 	call	a0c138 <close>
  a0a7d8:	1007883a 	mov	r3,r2
  a0a7dc:	00bfffc4 	movi	r2,-1
  a0a7e0:	18800626 	beq	r3,r2,a0a7fc <_close_r+0x4c>
  a0a7e4:	1805883a 	mov	r2,r3
  a0a7e8:	dfc00217 	ldw	ra,8(sp)
  a0a7ec:	dc400117 	ldw	r17,4(sp)
  a0a7f0:	dc000017 	ldw	r16,0(sp)
  a0a7f4:	dec00304 	addi	sp,sp,12
  a0a7f8:	f800283a 	ret
  a0a7fc:	80800017 	ldw	r2,0(r16)
  a0a800:	103ff826 	beq	r2,zero,a0a7e4 <_close_r+0x34>
  a0a804:	88800015 	stw	r2,0(r17)
  a0a808:	1805883a 	mov	r2,r3
  a0a80c:	dfc00217 	ldw	ra,8(sp)
  a0a810:	dc400117 	ldw	r17,4(sp)
  a0a814:	dc000017 	ldw	r16,0(sp)
  a0a818:	dec00304 	addi	sp,sp,12
  a0a81c:	f800283a 	ret

00a0a820 <_fclose_r>:
  a0a820:	defffc04 	addi	sp,sp,-16
  a0a824:	dc400115 	stw	r17,4(sp)
  a0a828:	dc000015 	stw	r16,0(sp)
  a0a82c:	dfc00315 	stw	ra,12(sp)
  a0a830:	dc800215 	stw	r18,8(sp)
  a0a834:	2821883a 	mov	r16,r5
  a0a838:	2023883a 	mov	r17,r4
  a0a83c:	28002926 	beq	r5,zero,a0a8e4 <_fclose_r+0xc4>
  a0a840:	0a0745c0 	call	a0745c <__sfp_lock_acquire>
  a0a844:	88000226 	beq	r17,zero,a0a850 <_fclose_r+0x30>
  a0a848:	88800e17 	ldw	r2,56(r17)
  a0a84c:	10002d26 	beq	r2,zero,a0a904 <_fclose_r+0xe4>
  a0a850:	8080030f 	ldh	r2,12(r16)
  a0a854:	10002226 	beq	r2,zero,a0a8e0 <_fclose_r+0xc0>
  a0a858:	8809883a 	mov	r4,r17
  a0a85c:	800b883a 	mov	r5,r16
  a0a860:	0a071d40 	call	a071d4 <_fflush_r>
  a0a864:	1025883a 	mov	r18,r2
  a0a868:	80800b17 	ldw	r2,44(r16)
  a0a86c:	10000426 	beq	r2,zero,a0a880 <_fclose_r+0x60>
  a0a870:	81400717 	ldw	r5,28(r16)
  a0a874:	8809883a 	mov	r4,r17
  a0a878:	103ee83a 	callr	r2
  a0a87c:	10002a16 	blt	r2,zero,a0a928 <_fclose_r+0x108>
  a0a880:	8080030b 	ldhu	r2,12(r16)
  a0a884:	1080200c 	andi	r2,r2,128
  a0a888:	1000231e 	bne	r2,zero,a0a918 <_fclose_r+0xf8>
  a0a88c:	81400c17 	ldw	r5,48(r16)
  a0a890:	28000526 	beq	r5,zero,a0a8a8 <_fclose_r+0x88>
  a0a894:	80801004 	addi	r2,r16,64
  a0a898:	28800226 	beq	r5,r2,a0a8a4 <_fclose_r+0x84>
  a0a89c:	8809883a 	mov	r4,r17
  a0a8a0:	0a077f00 	call	a077f0 <_free_r>
  a0a8a4:	80000c15 	stw	zero,48(r16)
  a0a8a8:	81401117 	ldw	r5,68(r16)
  a0a8ac:	28000326 	beq	r5,zero,a0a8bc <_fclose_r+0x9c>
  a0a8b0:	8809883a 	mov	r4,r17
  a0a8b4:	0a077f00 	call	a077f0 <_free_r>
  a0a8b8:	80001115 	stw	zero,68(r16)
  a0a8bc:	8000030d 	sth	zero,12(r16)
  a0a8c0:	0a074600 	call	a07460 <__sfp_lock_release>
  a0a8c4:	9005883a 	mov	r2,r18
  a0a8c8:	dfc00317 	ldw	ra,12(sp)
  a0a8cc:	dc800217 	ldw	r18,8(sp)
  a0a8d0:	dc400117 	ldw	r17,4(sp)
  a0a8d4:	dc000017 	ldw	r16,0(sp)
  a0a8d8:	dec00404 	addi	sp,sp,16
  a0a8dc:	f800283a 	ret
  a0a8e0:	0a074600 	call	a07460 <__sfp_lock_release>
  a0a8e4:	0025883a 	mov	r18,zero
  a0a8e8:	9005883a 	mov	r2,r18
  a0a8ec:	dfc00317 	ldw	ra,12(sp)
  a0a8f0:	dc800217 	ldw	r18,8(sp)
  a0a8f4:	dc400117 	ldw	r17,4(sp)
  a0a8f8:	dc000017 	ldw	r16,0(sp)
  a0a8fc:	dec00404 	addi	sp,sp,16
  a0a900:	f800283a 	ret
  a0a904:	8809883a 	mov	r4,r17
  a0a908:	0a0746c0 	call	a0746c <__sinit>
  a0a90c:	8080030f 	ldh	r2,12(r16)
  a0a910:	103fd11e 	bne	r2,zero,a0a858 <_fclose_r+0x38>
  a0a914:	003ff206 	br	a0a8e0 <_fclose_r+0xc0>
  a0a918:	81400417 	ldw	r5,16(r16)
  a0a91c:	8809883a 	mov	r4,r17
  a0a920:	0a077f00 	call	a077f0 <_free_r>
  a0a924:	003fd906 	br	a0a88c <_fclose_r+0x6c>
  a0a928:	04bfffc4 	movi	r18,-1
  a0a92c:	003fd406 	br	a0a880 <_fclose_r+0x60>

00a0a930 <fclose>:
  a0a930:	00802874 	movhi	r2,161
  a0a934:	108ad104 	addi	r2,r2,11076
  a0a938:	200b883a 	mov	r5,r4
  a0a93c:	11000017 	ldw	r4,0(r2)
  a0a940:	0a0a8201 	jmpi	a0a820 <_fclose_r>

00a0a944 <_fstat_r>:
  a0a944:	defffd04 	addi	sp,sp,-12
  a0a948:	dc000015 	stw	r16,0(sp)
  a0a94c:	04002874 	movhi	r16,161
  a0a950:	8411e104 	addi	r16,r16,18308
  a0a954:	dc400115 	stw	r17,4(sp)
  a0a958:	80000015 	stw	zero,0(r16)
  a0a95c:	2023883a 	mov	r17,r4
  a0a960:	2809883a 	mov	r4,r5
  a0a964:	300b883a 	mov	r5,r6
  a0a968:	dfc00215 	stw	ra,8(sp)
  a0a96c:	0a0c2c00 	call	a0c2c0 <fstat>
  a0a970:	1007883a 	mov	r3,r2
  a0a974:	00bfffc4 	movi	r2,-1
  a0a978:	18800626 	beq	r3,r2,a0a994 <_fstat_r+0x50>
  a0a97c:	1805883a 	mov	r2,r3
  a0a980:	dfc00217 	ldw	ra,8(sp)
  a0a984:	dc400117 	ldw	r17,4(sp)
  a0a988:	dc000017 	ldw	r16,0(sp)
  a0a98c:	dec00304 	addi	sp,sp,12
  a0a990:	f800283a 	ret
  a0a994:	80800017 	ldw	r2,0(r16)
  a0a998:	103ff826 	beq	r2,zero,a0a97c <_fstat_r+0x38>
  a0a99c:	88800015 	stw	r2,0(r17)
  a0a9a0:	1805883a 	mov	r2,r3
  a0a9a4:	dfc00217 	ldw	ra,8(sp)
  a0a9a8:	dc400117 	ldw	r17,4(sp)
  a0a9ac:	dc000017 	ldw	r16,0(sp)
  a0a9b0:	dec00304 	addi	sp,sp,12
  a0a9b4:	f800283a 	ret

00a0a9b8 <_isatty_r>:
  a0a9b8:	defffd04 	addi	sp,sp,-12
  a0a9bc:	dc000015 	stw	r16,0(sp)
  a0a9c0:	04002874 	movhi	r16,161
  a0a9c4:	8411e104 	addi	r16,r16,18308
  a0a9c8:	dc400115 	stw	r17,4(sp)
  a0a9cc:	80000015 	stw	zero,0(r16)
  a0a9d0:	2023883a 	mov	r17,r4
  a0a9d4:	2809883a 	mov	r4,r5
  a0a9d8:	dfc00215 	stw	ra,8(sp)
  a0a9dc:	0a0c3f40 	call	a0c3f4 <isatty>
  a0a9e0:	1007883a 	mov	r3,r2
  a0a9e4:	00bfffc4 	movi	r2,-1
  a0a9e8:	18800626 	beq	r3,r2,a0aa04 <_isatty_r+0x4c>
  a0a9ec:	1805883a 	mov	r2,r3
  a0a9f0:	dfc00217 	ldw	ra,8(sp)
  a0a9f4:	dc400117 	ldw	r17,4(sp)
  a0a9f8:	dc000017 	ldw	r16,0(sp)
  a0a9fc:	dec00304 	addi	sp,sp,12
  a0aa00:	f800283a 	ret
  a0aa04:	80800017 	ldw	r2,0(r16)
  a0aa08:	103ff826 	beq	r2,zero,a0a9ec <_isatty_r+0x34>
  a0aa0c:	88800015 	stw	r2,0(r17)
  a0aa10:	1805883a 	mov	r2,r3
  a0aa14:	dfc00217 	ldw	ra,8(sp)
  a0aa18:	dc400117 	ldw	r17,4(sp)
  a0aa1c:	dc000017 	ldw	r16,0(sp)
  a0aa20:	dec00304 	addi	sp,sp,12
  a0aa24:	f800283a 	ret

00a0aa28 <_lseek_r>:
  a0aa28:	defffd04 	addi	sp,sp,-12
  a0aa2c:	dc000015 	stw	r16,0(sp)
  a0aa30:	04002874 	movhi	r16,161
  a0aa34:	8411e104 	addi	r16,r16,18308
  a0aa38:	dc400115 	stw	r17,4(sp)
  a0aa3c:	80000015 	stw	zero,0(r16)
  a0aa40:	2023883a 	mov	r17,r4
  a0aa44:	2809883a 	mov	r4,r5
  a0aa48:	300b883a 	mov	r5,r6
  a0aa4c:	380d883a 	mov	r6,r7
  a0aa50:	dfc00215 	stw	ra,8(sp)
  a0aa54:	0a0c6000 	call	a0c600 <lseek>
  a0aa58:	1007883a 	mov	r3,r2
  a0aa5c:	00bfffc4 	movi	r2,-1
  a0aa60:	18800626 	beq	r3,r2,a0aa7c <_lseek_r+0x54>
  a0aa64:	1805883a 	mov	r2,r3
  a0aa68:	dfc00217 	ldw	ra,8(sp)
  a0aa6c:	dc400117 	ldw	r17,4(sp)
  a0aa70:	dc000017 	ldw	r16,0(sp)
  a0aa74:	dec00304 	addi	sp,sp,12
  a0aa78:	f800283a 	ret
  a0aa7c:	80800017 	ldw	r2,0(r16)
  a0aa80:	103ff826 	beq	r2,zero,a0aa64 <_lseek_r+0x3c>
  a0aa84:	88800015 	stw	r2,0(r17)
  a0aa88:	1805883a 	mov	r2,r3
  a0aa8c:	dfc00217 	ldw	ra,8(sp)
  a0aa90:	dc400117 	ldw	r17,4(sp)
  a0aa94:	dc000017 	ldw	r16,0(sp)
  a0aa98:	dec00304 	addi	sp,sp,12
  a0aa9c:	f800283a 	ret

00a0aaa0 <_read_r>:
  a0aaa0:	defffd04 	addi	sp,sp,-12
  a0aaa4:	dc000015 	stw	r16,0(sp)
  a0aaa8:	04002874 	movhi	r16,161
  a0aaac:	8411e104 	addi	r16,r16,18308
  a0aab0:	dc400115 	stw	r17,4(sp)
  a0aab4:	80000015 	stw	zero,0(r16)
  a0aab8:	2023883a 	mov	r17,r4
  a0aabc:	2809883a 	mov	r4,r5
  a0aac0:	300b883a 	mov	r5,r6
  a0aac4:	380d883a 	mov	r6,r7
  a0aac8:	dfc00215 	stw	ra,8(sp)
  a0aacc:	0a0c7fc0 	call	a0c7fc <read>
  a0aad0:	1007883a 	mov	r3,r2
  a0aad4:	00bfffc4 	movi	r2,-1
  a0aad8:	18800626 	beq	r3,r2,a0aaf4 <_read_r+0x54>
  a0aadc:	1805883a 	mov	r2,r3
  a0aae0:	dfc00217 	ldw	ra,8(sp)
  a0aae4:	dc400117 	ldw	r17,4(sp)
  a0aae8:	dc000017 	ldw	r16,0(sp)
  a0aaec:	dec00304 	addi	sp,sp,12
  a0aaf0:	f800283a 	ret
  a0aaf4:	80800017 	ldw	r2,0(r16)
  a0aaf8:	103ff826 	beq	r2,zero,a0aadc <_read_r+0x3c>
  a0aafc:	88800015 	stw	r2,0(r17)
  a0ab00:	1805883a 	mov	r2,r3
  a0ab04:	dfc00217 	ldw	ra,8(sp)
  a0ab08:	dc400117 	ldw	r17,4(sp)
  a0ab0c:	dc000017 	ldw	r16,0(sp)
  a0ab10:	dec00304 	addi	sp,sp,12
  a0ab14:	f800283a 	ret

00a0ab18 <__udivdi3>:
  a0ab18:	defff004 	addi	sp,sp,-64
  a0ab1c:	2005883a 	mov	r2,r4
  a0ab20:	3011883a 	mov	r8,r6
  a0ab24:	df000e15 	stw	fp,56(sp)
  a0ab28:	dd000a15 	stw	r20,40(sp)
  a0ab2c:	dc000615 	stw	r16,24(sp)
  a0ab30:	dfc00f15 	stw	ra,60(sp)
  a0ab34:	ddc00d15 	stw	r23,52(sp)
  a0ab38:	dd800c15 	stw	r22,48(sp)
  a0ab3c:	dd400b15 	stw	r21,44(sp)
  a0ab40:	dcc00915 	stw	r19,36(sp)
  a0ab44:	dc800815 	stw	r18,32(sp)
  a0ab48:	dc400715 	stw	r17,28(sp)
  a0ab4c:	4021883a 	mov	r16,r8
  a0ab50:	1039883a 	mov	fp,r2
  a0ab54:	2829883a 	mov	r20,r5
  a0ab58:	38003b1e 	bne	r7,zero,a0ac48 <__udivdi3+0x130>
  a0ab5c:	2a005c36 	bltu	r5,r8,a0acd0 <__udivdi3+0x1b8>
  a0ab60:	4000a626 	beq	r8,zero,a0adfc <__udivdi3+0x2e4>
  a0ab64:	00bfffd4 	movui	r2,65535
  a0ab68:	14009e36 	bltu	r2,r16,a0ade4 <__udivdi3+0x2cc>
  a0ab6c:	00803fc4 	movi	r2,255
  a0ab70:	14013d36 	bltu	r2,r16,a0b068 <__udivdi3+0x550>
  a0ab74:	000b883a 	mov	r5,zero
  a0ab78:	0005883a 	mov	r2,zero
  a0ab7c:	8084d83a 	srl	r2,r16,r2
  a0ab80:	01002874 	movhi	r4,161
  a0ab84:	2102de04 	addi	r4,r4,2936
  a0ab88:	01800804 	movi	r6,32
  a0ab8c:	1105883a 	add	r2,r2,r4
  a0ab90:	10c00003 	ldbu	r3,0(r2)
  a0ab94:	28c7883a 	add	r3,r5,r3
  a0ab98:	30edc83a 	sub	r22,r6,r3
  a0ab9c:	b000ee1e 	bne	r22,zero,a0af58 <__udivdi3+0x440>
  a0aba0:	802ad43a 	srli	r21,r16,16
  a0aba4:	00800044 	movi	r2,1
  a0aba8:	a423c83a 	sub	r17,r20,r16
  a0abac:	85ffffcc 	andi	r23,r16,65535
  a0abb0:	d8800315 	stw	r2,12(sp)
  a0abb4:	8809883a 	mov	r4,r17
  a0abb8:	a80b883a 	mov	r5,r21
  a0abbc:	0a0c1280 	call	a0c128 <__udivsi3>
  a0abc0:	8809883a 	mov	r4,r17
  a0abc4:	a80b883a 	mov	r5,r21
  a0abc8:	102d883a 	mov	r22,r2
  a0abcc:	0a0c1300 	call	a0c130 <__umodsi3>
  a0abd0:	1004943a 	slli	r2,r2,16
  a0abd4:	e006d43a 	srli	r3,fp,16
  a0abd8:	bda3383a 	mul	r17,r23,r22
  a0abdc:	10c4b03a 	or	r2,r2,r3
  a0abe0:	1440042e 	bgeu	r2,r17,a0abf4 <__udivdi3+0xdc>
  a0abe4:	1405883a 	add	r2,r2,r16
  a0abe8:	b5bfffc4 	addi	r22,r22,-1
  a0abec:	14000136 	bltu	r2,r16,a0abf4 <__udivdi3+0xdc>
  a0abf0:	14413d36 	bltu	r2,r17,a0b0e8 <__udivdi3+0x5d0>
  a0abf4:	1463c83a 	sub	r17,r2,r17
  a0abf8:	8809883a 	mov	r4,r17
  a0abfc:	a80b883a 	mov	r5,r21
  a0ac00:	0a0c1280 	call	a0c128 <__udivsi3>
  a0ac04:	8809883a 	mov	r4,r17
  a0ac08:	a80b883a 	mov	r5,r21
  a0ac0c:	1029883a 	mov	r20,r2
  a0ac10:	0a0c1300 	call	a0c130 <__umodsi3>
  a0ac14:	1004943a 	slli	r2,r2,16
  a0ac18:	bd09383a 	mul	r4,r23,r20
  a0ac1c:	e0ffffcc 	andi	r3,fp,65535
  a0ac20:	10c4b03a 	or	r2,r2,r3
  a0ac24:	1100042e 	bgeu	r2,r4,a0ac38 <__udivdi3+0x120>
  a0ac28:	8085883a 	add	r2,r16,r2
  a0ac2c:	a53fffc4 	addi	r20,r20,-1
  a0ac30:	14000136 	bltu	r2,r16,a0ac38 <__udivdi3+0x120>
  a0ac34:	11012036 	bltu	r2,r4,a0b0b8 <__udivdi3+0x5a0>
  a0ac38:	b004943a 	slli	r2,r22,16
  a0ac3c:	d9000317 	ldw	r4,12(sp)
  a0ac40:	a084b03a 	or	r2,r20,r2
  a0ac44:	00001506 	br	a0ac9c <__udivdi3+0x184>
  a0ac48:	380d883a 	mov	r6,r7
  a0ac4c:	29c06236 	bltu	r5,r7,a0add8 <__udivdi3+0x2c0>
  a0ac50:	00bfffd4 	movui	r2,65535
  a0ac54:	11c05a36 	bltu	r2,r7,a0adc0 <__udivdi3+0x2a8>
  a0ac58:	00803fc4 	movi	r2,255
  a0ac5c:	11c0fc36 	bltu	r2,r7,a0b050 <__udivdi3+0x538>
  a0ac60:	000b883a 	mov	r5,zero
  a0ac64:	0005883a 	mov	r2,zero
  a0ac68:	3084d83a 	srl	r2,r6,r2
  a0ac6c:	01002874 	movhi	r4,161
  a0ac70:	2102de04 	addi	r4,r4,2936
  a0ac74:	01c00804 	movi	r7,32
  a0ac78:	1105883a 	add	r2,r2,r4
  a0ac7c:	10c00003 	ldbu	r3,0(r2)
  a0ac80:	28c7883a 	add	r3,r5,r3
  a0ac84:	38efc83a 	sub	r23,r7,r3
  a0ac88:	b800691e 	bne	r23,zero,a0ae30 <__udivdi3+0x318>
  a0ac8c:	35000136 	bltu	r6,r20,a0ac94 <__udivdi3+0x17c>
  a0ac90:	e4005136 	bltu	fp,r16,a0add8 <__udivdi3+0x2c0>
  a0ac94:	00800044 	movi	r2,1
  a0ac98:	0009883a 	mov	r4,zero
  a0ac9c:	2007883a 	mov	r3,r4
  a0aca0:	dfc00f17 	ldw	ra,60(sp)
  a0aca4:	df000e17 	ldw	fp,56(sp)
  a0aca8:	ddc00d17 	ldw	r23,52(sp)
  a0acac:	dd800c17 	ldw	r22,48(sp)
  a0acb0:	dd400b17 	ldw	r21,44(sp)
  a0acb4:	dd000a17 	ldw	r20,40(sp)
  a0acb8:	dcc00917 	ldw	r19,36(sp)
  a0acbc:	dc800817 	ldw	r18,32(sp)
  a0acc0:	dc400717 	ldw	r17,28(sp)
  a0acc4:	dc000617 	ldw	r16,24(sp)
  a0acc8:	dec01004 	addi	sp,sp,64
  a0accc:	f800283a 	ret
  a0acd0:	00bfffd4 	movui	r2,65535
  a0acd4:	12005036 	bltu	r2,r8,a0ae18 <__udivdi3+0x300>
  a0acd8:	00803fc4 	movi	r2,255
  a0acdc:	1200e836 	bltu	r2,r8,a0b080 <__udivdi3+0x568>
  a0ace0:	000b883a 	mov	r5,zero
  a0ace4:	0005883a 	mov	r2,zero
  a0ace8:	8084d83a 	srl	r2,r16,r2
  a0acec:	01002874 	movhi	r4,161
  a0acf0:	2102de04 	addi	r4,r4,2936
  a0acf4:	01800804 	movi	r6,32
  a0acf8:	1105883a 	add	r2,r2,r4
  a0acfc:	10c00003 	ldbu	r3,0(r2)
  a0ad00:	28c7883a 	add	r3,r5,r3
  a0ad04:	30cbc83a 	sub	r5,r6,r3
  a0ad08:	28000626 	beq	r5,zero,a0ad24 <__udivdi3+0x20c>
  a0ad0c:	3145c83a 	sub	r2,r6,r5
  a0ad10:	e084d83a 	srl	r2,fp,r2
  a0ad14:	a146983a 	sll	r3,r20,r5
  a0ad18:	e178983a 	sll	fp,fp,r5
  a0ad1c:	8160983a 	sll	r16,r16,r5
  a0ad20:	18a8b03a 	or	r20,r3,r2
  a0ad24:	802ad43a 	srli	r21,r16,16
  a0ad28:	a009883a 	mov	r4,r20
  a0ad2c:	85ffffcc 	andi	r23,r16,65535
  a0ad30:	a80b883a 	mov	r5,r21
  a0ad34:	0a0c1280 	call	a0c128 <__udivsi3>
  a0ad38:	a009883a 	mov	r4,r20
  a0ad3c:	a80b883a 	mov	r5,r21
  a0ad40:	102d883a 	mov	r22,r2
  a0ad44:	0a0c1300 	call	a0c130 <__umodsi3>
  a0ad48:	1004943a 	slli	r2,r2,16
  a0ad4c:	e006d43a 	srli	r3,fp,16
  a0ad50:	bda3383a 	mul	r17,r23,r22
  a0ad54:	10c4b03a 	or	r2,r2,r3
  a0ad58:	1440042e 	bgeu	r2,r17,a0ad6c <__udivdi3+0x254>
  a0ad5c:	1405883a 	add	r2,r2,r16
  a0ad60:	b5bfffc4 	addi	r22,r22,-1
  a0ad64:	14000136 	bltu	r2,r16,a0ad6c <__udivdi3+0x254>
  a0ad68:	1440d536 	bltu	r2,r17,a0b0c0 <__udivdi3+0x5a8>
  a0ad6c:	1463c83a 	sub	r17,r2,r17
  a0ad70:	8809883a 	mov	r4,r17
  a0ad74:	a80b883a 	mov	r5,r21
  a0ad78:	0a0c1280 	call	a0c128 <__udivsi3>
  a0ad7c:	8809883a 	mov	r4,r17
  a0ad80:	a80b883a 	mov	r5,r21
  a0ad84:	1029883a 	mov	r20,r2
  a0ad88:	0a0c1300 	call	a0c130 <__umodsi3>
  a0ad8c:	1004943a 	slli	r2,r2,16
  a0ad90:	bd09383a 	mul	r4,r23,r20
  a0ad94:	e0ffffcc 	andi	r3,fp,65535
  a0ad98:	10c4b03a 	or	r2,r2,r3
  a0ad9c:	1100042e 	bgeu	r2,r4,a0adb0 <__udivdi3+0x298>
  a0ada0:	8085883a 	add	r2,r16,r2
  a0ada4:	a53fffc4 	addi	r20,r20,-1
  a0ada8:	14000136 	bltu	r2,r16,a0adb0 <__udivdi3+0x298>
  a0adac:	1100c736 	bltu	r2,r4,a0b0cc <__udivdi3+0x5b4>
  a0adb0:	b004943a 	slli	r2,r22,16
  a0adb4:	0009883a 	mov	r4,zero
  a0adb8:	a084b03a 	or	r2,r20,r2
  a0adbc:	003fb706 	br	a0ac9c <__udivdi3+0x184>
  a0adc0:	00804034 	movhi	r2,256
  a0adc4:	10bfffc4 	addi	r2,r2,-1
  a0adc8:	11c0a436 	bltu	r2,r7,a0b05c <__udivdi3+0x544>
  a0adcc:	01400404 	movi	r5,16
  a0add0:	2805883a 	mov	r2,r5
  a0add4:	003fa406 	br	a0ac68 <__udivdi3+0x150>
  a0add8:	0005883a 	mov	r2,zero
  a0addc:	0009883a 	mov	r4,zero
  a0ade0:	003fae06 	br	a0ac9c <__udivdi3+0x184>
  a0ade4:	00804034 	movhi	r2,256
  a0ade8:	10bfffc4 	addi	r2,r2,-1
  a0adec:	1400a136 	bltu	r2,r16,a0b074 <__udivdi3+0x55c>
  a0adf0:	01400404 	movi	r5,16
  a0adf4:	2805883a 	mov	r2,r5
  a0adf8:	003f6006 	br	a0ab7c <__udivdi3+0x64>
  a0adfc:	01000044 	movi	r4,1
  a0ae00:	000b883a 	mov	r5,zero
  a0ae04:	0a0c1280 	call	a0c128 <__udivsi3>
  a0ae08:	1021883a 	mov	r16,r2
  a0ae0c:	00bfffd4 	movui	r2,65535
  a0ae10:	143ff436 	bltu	r2,r16,a0ade4 <__udivdi3+0x2cc>
  a0ae14:	003f5506 	br	a0ab6c <__udivdi3+0x54>
  a0ae18:	00804034 	movhi	r2,256
  a0ae1c:	10bfffc4 	addi	r2,r2,-1
  a0ae20:	12009a36 	bltu	r2,r8,a0b08c <__udivdi3+0x574>
  a0ae24:	01400404 	movi	r5,16
  a0ae28:	2805883a 	mov	r2,r5
  a0ae2c:	003fae06 	br	a0ace8 <__udivdi3+0x1d0>
  a0ae30:	3dc5c83a 	sub	r2,r7,r23
  a0ae34:	35c8983a 	sll	r4,r6,r23
  a0ae38:	8086d83a 	srl	r3,r16,r2
  a0ae3c:	a0a2d83a 	srl	r17,r20,r2
  a0ae40:	e084d83a 	srl	r2,fp,r2
  a0ae44:	20eab03a 	or	r21,r4,r3
  a0ae48:	a82cd43a 	srli	r22,r21,16
  a0ae4c:	a5c6983a 	sll	r3,r20,r23
  a0ae50:	8809883a 	mov	r4,r17
  a0ae54:	b00b883a 	mov	r5,r22
  a0ae58:	1886b03a 	or	r3,r3,r2
  a0ae5c:	d8c00215 	stw	r3,8(sp)
  a0ae60:	0a0c1280 	call	a0c128 <__udivsi3>
  a0ae64:	8809883a 	mov	r4,r17
  a0ae68:	b00b883a 	mov	r5,r22
  a0ae6c:	1029883a 	mov	r20,r2
  a0ae70:	0a0c1300 	call	a0c130 <__umodsi3>
  a0ae74:	a8ffffcc 	andi	r3,r21,65535
  a0ae78:	d8c00515 	stw	r3,20(sp)
  a0ae7c:	d9000217 	ldw	r4,8(sp)
  a0ae80:	d9400517 	ldw	r5,20(sp)
  a0ae84:	1004943a 	slli	r2,r2,16
  a0ae88:	2006d43a 	srli	r3,r4,16
  a0ae8c:	85e0983a 	sll	r16,r16,r23
  a0ae90:	2d23383a 	mul	r17,r5,r20
  a0ae94:	10c4b03a 	or	r2,r2,r3
  a0ae98:	dc000015 	stw	r16,0(sp)
  a0ae9c:	1440032e 	bgeu	r2,r17,a0aeac <__udivdi3+0x394>
  a0aea0:	1545883a 	add	r2,r2,r21
  a0aea4:	a53fffc4 	addi	r20,r20,-1
  a0aea8:	15407f2e 	bgeu	r2,r21,a0b0a8 <__udivdi3+0x590>
  a0aeac:	1463c83a 	sub	r17,r2,r17
  a0aeb0:	8809883a 	mov	r4,r17
  a0aeb4:	b00b883a 	mov	r5,r22
  a0aeb8:	0a0c1280 	call	a0c128 <__udivsi3>
  a0aebc:	8809883a 	mov	r4,r17
  a0aec0:	b00b883a 	mov	r5,r22
  a0aec4:	1021883a 	mov	r16,r2
  a0aec8:	0a0c1300 	call	a0c130 <__umodsi3>
  a0aecc:	d8c00517 	ldw	r3,20(sp)
  a0aed0:	d9000217 	ldw	r4,8(sp)
  a0aed4:	1004943a 	slli	r2,r2,16
  a0aed8:	1c0f383a 	mul	r7,r3,r16
  a0aedc:	20ffffcc 	andi	r3,r4,65535
  a0aee0:	10e2b03a 	or	r17,r2,r3
  a0aee4:	89c0032e 	bgeu	r17,r7,a0aef4 <__udivdi3+0x3dc>
  a0aee8:	8d63883a 	add	r17,r17,r21
  a0aeec:	843fffc4 	addi	r16,r16,-1
  a0aef0:	8d40692e 	bgeu	r17,r21,a0b098 <__udivdi3+0x580>
  a0aef4:	a008943a 	slli	r4,r20,16
  a0aef8:	d9400017 	ldw	r5,0(sp)
  a0aefc:	89e3c83a 	sub	r17,r17,r7
  a0af00:	8110b03a 	or	r8,r16,r4
  a0af04:	280cd43a 	srli	r6,r5,16
  a0af08:	28ffffcc 	andi	r3,r5,65535
  a0af0c:	40bfffcc 	andi	r2,r8,65535
  a0af10:	400ad43a 	srli	r5,r8,16
  a0af14:	10d3383a 	mul	r9,r2,r3
  a0af18:	1185383a 	mul	r2,r2,r6
  a0af1c:	28c7383a 	mul	r3,r5,r3
  a0af20:	4808d43a 	srli	r4,r9,16
  a0af24:	298b383a 	mul	r5,r5,r6
  a0af28:	10c5883a 	add	r2,r2,r3
  a0af2c:	2089883a 	add	r4,r4,r2
  a0af30:	20c0022e 	bgeu	r4,r3,a0af3c <__udivdi3+0x424>
  a0af34:	00800074 	movhi	r2,1
  a0af38:	288b883a 	add	r5,r5,r2
  a0af3c:	2004d43a 	srli	r2,r4,16
  a0af40:	288b883a 	add	r5,r5,r2
  a0af44:	89403f36 	bltu	r17,r5,a0b044 <__udivdi3+0x52c>
  a0af48:	89403926 	beq	r17,r5,a0b030 <__udivdi3+0x518>
  a0af4c:	4005883a 	mov	r2,r8
  a0af50:	0009883a 	mov	r4,zero
  a0af54:	003f5106 	br	a0ac9c <__udivdi3+0x184>
  a0af58:	85a0983a 	sll	r16,r16,r22
  a0af5c:	3585c83a 	sub	r2,r6,r22
  a0af60:	a0a2d83a 	srl	r17,r20,r2
  a0af64:	802ad43a 	srli	r21,r16,16
  a0af68:	e084d83a 	srl	r2,fp,r2
  a0af6c:	a586983a 	sll	r3,r20,r22
  a0af70:	8809883a 	mov	r4,r17
  a0af74:	a80b883a 	mov	r5,r21
  a0af78:	1886b03a 	or	r3,r3,r2
  a0af7c:	d8c00115 	stw	r3,4(sp)
  a0af80:	0a0c1280 	call	a0c128 <__udivsi3>
  a0af84:	8809883a 	mov	r4,r17
  a0af88:	a80b883a 	mov	r5,r21
  a0af8c:	d8800415 	stw	r2,16(sp)
  a0af90:	0a0c1300 	call	a0c130 <__umodsi3>
  a0af94:	d9000117 	ldw	r4,4(sp)
  a0af98:	d9400417 	ldw	r5,16(sp)
  a0af9c:	1004943a 	slli	r2,r2,16
  a0afa0:	85ffffcc 	andi	r23,r16,65535
  a0afa4:	2006d43a 	srli	r3,r4,16
  a0afa8:	b963383a 	mul	r17,r23,r5
  a0afac:	10c4b03a 	or	r2,r2,r3
  a0afb0:	1440042e 	bgeu	r2,r17,a0afc4 <__udivdi3+0x4ac>
  a0afb4:	297fffc4 	addi	r5,r5,-1
  a0afb8:	1405883a 	add	r2,r2,r16
  a0afbc:	d9400415 	stw	r5,16(sp)
  a0afc0:	1400442e 	bgeu	r2,r16,a0b0d4 <__udivdi3+0x5bc>
  a0afc4:	1463c83a 	sub	r17,r2,r17
  a0afc8:	8809883a 	mov	r4,r17
  a0afcc:	a80b883a 	mov	r5,r21
  a0afd0:	0a0c1280 	call	a0c128 <__udivsi3>
  a0afd4:	8809883a 	mov	r4,r17
  a0afd8:	a80b883a 	mov	r5,r21
  a0afdc:	1029883a 	mov	r20,r2
  a0afe0:	0a0c1300 	call	a0c130 <__umodsi3>
  a0afe4:	d9400117 	ldw	r5,4(sp)
  a0afe8:	1004943a 	slli	r2,r2,16
  a0afec:	bd09383a 	mul	r4,r23,r20
  a0aff0:	28ffffcc 	andi	r3,r5,65535
  a0aff4:	10c6b03a 	or	r3,r2,r3
  a0aff8:	1900062e 	bgeu	r3,r4,a0b014 <__udivdi3+0x4fc>
  a0affc:	1c07883a 	add	r3,r3,r16
  a0b000:	a53fffc4 	addi	r20,r20,-1
  a0b004:	1c000336 	bltu	r3,r16,a0b014 <__udivdi3+0x4fc>
  a0b008:	1900022e 	bgeu	r3,r4,a0b014 <__udivdi3+0x4fc>
  a0b00c:	a53fffc4 	addi	r20,r20,-1
  a0b010:	1c07883a 	add	r3,r3,r16
  a0b014:	d9400417 	ldw	r5,16(sp)
  a0b018:	e5b8983a 	sll	fp,fp,r22
  a0b01c:	1923c83a 	sub	r17,r3,r4
  a0b020:	2804943a 	slli	r2,r5,16
  a0b024:	a0a8b03a 	or	r20,r20,r2
  a0b028:	dd000315 	stw	r20,12(sp)
  a0b02c:	003ee106 	br	a0abb4 <__udivdi3+0x9c>
  a0b030:	2004943a 	slli	r2,r4,16
  a0b034:	e5c8983a 	sll	r4,fp,r23
  a0b038:	48ffffcc 	andi	r3,r9,65535
  a0b03c:	10c5883a 	add	r2,r2,r3
  a0b040:	20bfc22e 	bgeu	r4,r2,a0af4c <__udivdi3+0x434>
  a0b044:	40bfffc4 	addi	r2,r8,-1
  a0b048:	0009883a 	mov	r4,zero
  a0b04c:	003f1306 	br	a0ac9c <__udivdi3+0x184>
  a0b050:	01400204 	movi	r5,8
  a0b054:	2805883a 	mov	r2,r5
  a0b058:	003f0306 	br	a0ac68 <__udivdi3+0x150>
  a0b05c:	01400604 	movi	r5,24
  a0b060:	2805883a 	mov	r2,r5
  a0b064:	003f0006 	br	a0ac68 <__udivdi3+0x150>
  a0b068:	01400204 	movi	r5,8
  a0b06c:	2805883a 	mov	r2,r5
  a0b070:	003ec206 	br	a0ab7c <__udivdi3+0x64>
  a0b074:	01400604 	movi	r5,24
  a0b078:	2805883a 	mov	r2,r5
  a0b07c:	003ebf06 	br	a0ab7c <__udivdi3+0x64>
  a0b080:	01400204 	movi	r5,8
  a0b084:	2805883a 	mov	r2,r5
  a0b088:	003f1706 	br	a0ace8 <__udivdi3+0x1d0>
  a0b08c:	01400604 	movi	r5,24
  a0b090:	2805883a 	mov	r2,r5
  a0b094:	003f1406 	br	a0ace8 <__udivdi3+0x1d0>
  a0b098:	89ff962e 	bgeu	r17,r7,a0aef4 <__udivdi3+0x3dc>
  a0b09c:	8d63883a 	add	r17,r17,r21
  a0b0a0:	843fffc4 	addi	r16,r16,-1
  a0b0a4:	003f9306 	br	a0aef4 <__udivdi3+0x3dc>
  a0b0a8:	147f802e 	bgeu	r2,r17,a0aeac <__udivdi3+0x394>
  a0b0ac:	a53fffc4 	addi	r20,r20,-1
  a0b0b0:	1545883a 	add	r2,r2,r21
  a0b0b4:	003f7d06 	br	a0aeac <__udivdi3+0x394>
  a0b0b8:	a53fffc4 	addi	r20,r20,-1
  a0b0bc:	003ede06 	br	a0ac38 <__udivdi3+0x120>
  a0b0c0:	b5bfffc4 	addi	r22,r22,-1
  a0b0c4:	1405883a 	add	r2,r2,r16
  a0b0c8:	003f2806 	br	a0ad6c <__udivdi3+0x254>
  a0b0cc:	a53fffc4 	addi	r20,r20,-1
  a0b0d0:	003f3706 	br	a0adb0 <__udivdi3+0x298>
  a0b0d4:	147fbb2e 	bgeu	r2,r17,a0afc4 <__udivdi3+0x4ac>
  a0b0d8:	297fffc4 	addi	r5,r5,-1
  a0b0dc:	1405883a 	add	r2,r2,r16
  a0b0e0:	d9400415 	stw	r5,16(sp)
  a0b0e4:	003fb706 	br	a0afc4 <__udivdi3+0x4ac>
  a0b0e8:	b5bfffc4 	addi	r22,r22,-1
  a0b0ec:	1405883a 	add	r2,r2,r16
  a0b0f0:	003ec006 	br	a0abf4 <__udivdi3+0xdc>

00a0b0f4 <__umoddi3>:
  a0b0f4:	defff104 	addi	sp,sp,-60
  a0b0f8:	dd800b15 	stw	r22,44(sp)
  a0b0fc:	dd000915 	stw	r20,36(sp)
  a0b100:	dc000515 	stw	r16,20(sp)
  a0b104:	dfc00e15 	stw	ra,56(sp)
  a0b108:	df000d15 	stw	fp,52(sp)
  a0b10c:	ddc00c15 	stw	r23,48(sp)
  a0b110:	dd400a15 	stw	r21,40(sp)
  a0b114:	dcc00815 	stw	r19,32(sp)
  a0b118:	dc800715 	stw	r18,28(sp)
  a0b11c:	dc400615 	stw	r17,24(sp)
  a0b120:	3021883a 	mov	r16,r6
  a0b124:	202d883a 	mov	r22,r4
  a0b128:	2829883a 	mov	r20,r5
  a0b12c:	38002b1e 	bne	r7,zero,a0b1dc <__umoddi3+0xe8>
  a0b130:	29805036 	bltu	r5,r6,a0b274 <__umoddi3+0x180>
  a0b134:	30008a26 	beq	r6,zero,a0b360 <__umoddi3+0x26c>
  a0b138:	00bfffd4 	movui	r2,65535
  a0b13c:	14008236 	bltu	r2,r16,a0b348 <__umoddi3+0x254>
  a0b140:	00803fc4 	movi	r2,255
  a0b144:	14013636 	bltu	r2,r16,a0b620 <__umoddi3+0x52c>
  a0b148:	000b883a 	mov	r5,zero
  a0b14c:	0005883a 	mov	r2,zero
  a0b150:	8084d83a 	srl	r2,r16,r2
  a0b154:	01002874 	movhi	r4,161
  a0b158:	2102de04 	addi	r4,r4,2936
  a0b15c:	01800804 	movi	r6,32
  a0b160:	1105883a 	add	r2,r2,r4
  a0b164:	10c00003 	ldbu	r3,0(r2)
  a0b168:	28c7883a 	add	r3,r5,r3
  a0b16c:	30efc83a 	sub	r23,r6,r3
  a0b170:	b800941e 	bne	r23,zero,a0b3c4 <__umoddi3+0x2d0>
  a0b174:	802ad43a 	srli	r21,r16,16
  a0b178:	a423c83a 	sub	r17,r20,r16
  a0b17c:	0039883a 	mov	fp,zero
  a0b180:	853fffcc 	andi	r20,r16,65535
  a0b184:	8809883a 	mov	r4,r17
  a0b188:	a80b883a 	mov	r5,r21
  a0b18c:	0a0c1280 	call	a0c128 <__udivsi3>
  a0b190:	8809883a 	mov	r4,r17
  a0b194:	a80b883a 	mov	r5,r21
  a0b198:	a0a3383a 	mul	r17,r20,r2
  a0b19c:	0a0c1300 	call	a0c130 <__umodsi3>
  a0b1a0:	1004943a 	slli	r2,r2,16
  a0b1a4:	b006d43a 	srli	r3,r22,16
  a0b1a8:	10c4b03a 	or	r2,r2,r3
  a0b1ac:	1440032e 	bgeu	r2,r17,a0b1bc <__umoddi3+0xc8>
  a0b1b0:	1405883a 	add	r2,r2,r16
  a0b1b4:	14000136 	bltu	r2,r16,a0b1bc <__umoddi3+0xc8>
  a0b1b8:	14413536 	bltu	r2,r17,a0b690 <__umoddi3+0x59c>
  a0b1bc:	1463c83a 	sub	r17,r2,r17
  a0b1c0:	8809883a 	mov	r4,r17
  a0b1c4:	a80b883a 	mov	r5,r21
  a0b1c8:	0a0c1280 	call	a0c128 <__udivsi3>
  a0b1cc:	8809883a 	mov	r4,r17
  a0b1d0:	a0a3383a 	mul	r17,r20,r2
  a0b1d4:	a80b883a 	mov	r5,r21
  a0b1d8:	00004d06 	br	a0b310 <__umoddi3+0x21c>
  a0b1dc:	380d883a 	mov	r6,r7
  a0b1e0:	29c0102e 	bgeu	r5,r7,a0b224 <__umoddi3+0x130>
  a0b1e4:	2011883a 	mov	r8,r4
  a0b1e8:	2813883a 	mov	r9,r5
  a0b1ec:	4005883a 	mov	r2,r8
  a0b1f0:	4807883a 	mov	r3,r9
  a0b1f4:	dfc00e17 	ldw	ra,56(sp)
  a0b1f8:	df000d17 	ldw	fp,52(sp)
  a0b1fc:	ddc00c17 	ldw	r23,48(sp)
  a0b200:	dd800b17 	ldw	r22,44(sp)
  a0b204:	dd400a17 	ldw	r21,40(sp)
  a0b208:	dd000917 	ldw	r20,36(sp)
  a0b20c:	dcc00817 	ldw	r19,32(sp)
  a0b210:	dc800717 	ldw	r18,28(sp)
  a0b214:	dc400617 	ldw	r17,24(sp)
  a0b218:	dc000517 	ldw	r16,20(sp)
  a0b21c:	dec00f04 	addi	sp,sp,60
  a0b220:	f800283a 	ret
  a0b224:	00bfffd4 	movui	r2,65535
  a0b228:	11c05a36 	bltu	r2,r7,a0b394 <__umoddi3+0x2a0>
  a0b22c:	00803fc4 	movi	r2,255
  a0b230:	11c0fe36 	bltu	r2,r7,a0b62c <__umoddi3+0x538>
  a0b234:	000b883a 	mov	r5,zero
  a0b238:	0005883a 	mov	r2,zero
  a0b23c:	3084d83a 	srl	r2,r6,r2
  a0b240:	01002874 	movhi	r4,161
  a0b244:	2102de04 	addi	r4,r4,2936
  a0b248:	01c00804 	movi	r7,32
  a0b24c:	1105883a 	add	r2,r2,r4
  a0b250:	10c00003 	ldbu	r3,0(r2)
  a0b254:	28c7883a 	add	r3,r5,r3
  a0b258:	38ebc83a 	sub	r21,r7,r3
  a0b25c:	a800851e 	bne	r21,zero,a0b474 <__umoddi3+0x380>
  a0b260:	35005236 	bltu	r6,r20,a0b3ac <__umoddi3+0x2b8>
  a0b264:	b400512e 	bgeu	r22,r16,a0b3ac <__umoddi3+0x2b8>
  a0b268:	b011883a 	mov	r8,r22
  a0b26c:	a013883a 	mov	r9,r20
  a0b270:	003fde06 	br	a0b1ec <__umoddi3+0xf8>
  a0b274:	00bfffd4 	movui	r2,65535
  a0b278:	11804036 	bltu	r2,r6,a0b37c <__umoddi3+0x288>
  a0b27c:	00803fc4 	movi	r2,255
  a0b280:	1180ed36 	bltu	r2,r6,a0b638 <__umoddi3+0x544>
  a0b284:	000b883a 	mov	r5,zero
  a0b288:	0005883a 	mov	r2,zero
  a0b28c:	8084d83a 	srl	r2,r16,r2
  a0b290:	01002874 	movhi	r4,161
  a0b294:	2102de04 	addi	r4,r4,2936
  a0b298:	01800804 	movi	r6,32
  a0b29c:	1105883a 	add	r2,r2,r4
  a0b2a0:	10c00003 	ldbu	r3,0(r2)
  a0b2a4:	28c7883a 	add	r3,r5,r3
  a0b2a8:	30c7c83a 	sub	r3,r6,r3
  a0b2ac:	1800bf1e 	bne	r3,zero,a0b5ac <__umoddi3+0x4b8>
  a0b2b0:	0039883a 	mov	fp,zero
  a0b2b4:	802ad43a 	srli	r21,r16,16
  a0b2b8:	a009883a 	mov	r4,r20
  a0b2bc:	85ffffcc 	andi	r23,r16,65535
  a0b2c0:	a80b883a 	mov	r5,r21
  a0b2c4:	0a0c1280 	call	a0c128 <__udivsi3>
  a0b2c8:	a009883a 	mov	r4,r20
  a0b2cc:	a80b883a 	mov	r5,r21
  a0b2d0:	b8a3383a 	mul	r17,r23,r2
  a0b2d4:	0a0c1300 	call	a0c130 <__umodsi3>
  a0b2d8:	1004943a 	slli	r2,r2,16
  a0b2dc:	b006d43a 	srli	r3,r22,16
  a0b2e0:	10c4b03a 	or	r2,r2,r3
  a0b2e4:	1440032e 	bgeu	r2,r17,a0b2f4 <__umoddi3+0x200>
  a0b2e8:	1405883a 	add	r2,r2,r16
  a0b2ec:	14000136 	bltu	r2,r16,a0b2f4 <__umoddi3+0x200>
  a0b2f0:	1440e536 	bltu	r2,r17,a0b688 <__umoddi3+0x594>
  a0b2f4:	1463c83a 	sub	r17,r2,r17
  a0b2f8:	8809883a 	mov	r4,r17
  a0b2fc:	a80b883a 	mov	r5,r21
  a0b300:	0a0c1280 	call	a0c128 <__udivsi3>
  a0b304:	8809883a 	mov	r4,r17
  a0b308:	b8a3383a 	mul	r17,r23,r2
  a0b30c:	a80b883a 	mov	r5,r21
  a0b310:	0a0c1300 	call	a0c130 <__umodsi3>
  a0b314:	1004943a 	slli	r2,r2,16
  a0b318:	b0ffffcc 	andi	r3,r22,65535
  a0b31c:	10c4b03a 	or	r2,r2,r3
  a0b320:	1440042e 	bgeu	r2,r17,a0b334 <__umoddi3+0x240>
  a0b324:	1405883a 	add	r2,r2,r16
  a0b328:	14000236 	bltu	r2,r16,a0b334 <__umoddi3+0x240>
  a0b32c:	1440012e 	bgeu	r2,r17,a0b334 <__umoddi3+0x240>
  a0b330:	1405883a 	add	r2,r2,r16
  a0b334:	1445c83a 	sub	r2,r2,r17
  a0b338:	1724d83a 	srl	r18,r2,fp
  a0b33c:	0013883a 	mov	r9,zero
  a0b340:	9011883a 	mov	r8,r18
  a0b344:	003fa906 	br	a0b1ec <__umoddi3+0xf8>
  a0b348:	00804034 	movhi	r2,256
  a0b34c:	10bfffc4 	addi	r2,r2,-1
  a0b350:	1400b036 	bltu	r2,r16,a0b614 <__umoddi3+0x520>
  a0b354:	01400404 	movi	r5,16
  a0b358:	2805883a 	mov	r2,r5
  a0b35c:	003f7c06 	br	a0b150 <__umoddi3+0x5c>
  a0b360:	01000044 	movi	r4,1
  a0b364:	000b883a 	mov	r5,zero
  a0b368:	0a0c1280 	call	a0c128 <__udivsi3>
  a0b36c:	1021883a 	mov	r16,r2
  a0b370:	00bfffd4 	movui	r2,65535
  a0b374:	143ff436 	bltu	r2,r16,a0b348 <__umoddi3+0x254>
  a0b378:	003f7106 	br	a0b140 <__umoddi3+0x4c>
  a0b37c:	00804034 	movhi	r2,256
  a0b380:	10bfffc4 	addi	r2,r2,-1
  a0b384:	1180af36 	bltu	r2,r6,a0b644 <__umoddi3+0x550>
  a0b388:	01400404 	movi	r5,16
  a0b38c:	2805883a 	mov	r2,r5
  a0b390:	003fbe06 	br	a0b28c <__umoddi3+0x198>
  a0b394:	00804034 	movhi	r2,256
  a0b398:	10bfffc4 	addi	r2,r2,-1
  a0b39c:	11c0ac36 	bltu	r2,r7,a0b650 <__umoddi3+0x55c>
  a0b3a0:	01400404 	movi	r5,16
  a0b3a4:	2805883a 	mov	r2,r5
  a0b3a8:	003fa406 	br	a0b23c <__umoddi3+0x148>
  a0b3ac:	b409c83a 	sub	r4,r22,r16
  a0b3b0:	b105803a 	cmpltu	r2,r22,r4
  a0b3b4:	a187c83a 	sub	r3,r20,r6
  a0b3b8:	18a9c83a 	sub	r20,r3,r2
  a0b3bc:	202d883a 	mov	r22,r4
  a0b3c0:	003fa906 	br	a0b268 <__umoddi3+0x174>
  a0b3c4:	85e0983a 	sll	r16,r16,r23
  a0b3c8:	35c5c83a 	sub	r2,r6,r23
  a0b3cc:	a0a2d83a 	srl	r17,r20,r2
  a0b3d0:	802ad43a 	srli	r21,r16,16
  a0b3d4:	b084d83a 	srl	r2,r22,r2
  a0b3d8:	a5c6983a 	sll	r3,r20,r23
  a0b3dc:	8809883a 	mov	r4,r17
  a0b3e0:	a80b883a 	mov	r5,r21
  a0b3e4:	1886b03a 	or	r3,r3,r2
  a0b3e8:	d8c00115 	stw	r3,4(sp)
  a0b3ec:	853fffcc 	andi	r20,r16,65535
  a0b3f0:	0a0c1280 	call	a0c128 <__udivsi3>
  a0b3f4:	8809883a 	mov	r4,r17
  a0b3f8:	a80b883a 	mov	r5,r21
  a0b3fc:	a0a3383a 	mul	r17,r20,r2
  a0b400:	0a0c1300 	call	a0c130 <__umodsi3>
  a0b404:	d9000117 	ldw	r4,4(sp)
  a0b408:	1004943a 	slli	r2,r2,16
  a0b40c:	b839883a 	mov	fp,r23
  a0b410:	2006d43a 	srli	r3,r4,16
  a0b414:	10c4b03a 	or	r2,r2,r3
  a0b418:	1440022e 	bgeu	r2,r17,a0b424 <__umoddi3+0x330>
  a0b41c:	1405883a 	add	r2,r2,r16
  a0b420:	1400962e 	bgeu	r2,r16,a0b67c <__umoddi3+0x588>
  a0b424:	1463c83a 	sub	r17,r2,r17
  a0b428:	8809883a 	mov	r4,r17
  a0b42c:	a80b883a 	mov	r5,r21
  a0b430:	0a0c1280 	call	a0c128 <__udivsi3>
  a0b434:	8809883a 	mov	r4,r17
  a0b438:	a80b883a 	mov	r5,r21
  a0b43c:	a0a3383a 	mul	r17,r20,r2
  a0b440:	0a0c1300 	call	a0c130 <__umodsi3>
  a0b444:	d9400117 	ldw	r5,4(sp)
  a0b448:	1004943a 	slli	r2,r2,16
  a0b44c:	28ffffcc 	andi	r3,r5,65535
  a0b450:	10c4b03a 	or	r2,r2,r3
  a0b454:	1440042e 	bgeu	r2,r17,a0b468 <__umoddi3+0x374>
  a0b458:	1405883a 	add	r2,r2,r16
  a0b45c:	14000236 	bltu	r2,r16,a0b468 <__umoddi3+0x374>
  a0b460:	1440012e 	bgeu	r2,r17,a0b468 <__umoddi3+0x374>
  a0b464:	1405883a 	add	r2,r2,r16
  a0b468:	b5ec983a 	sll	r22,r22,r23
  a0b46c:	1463c83a 	sub	r17,r2,r17
  a0b470:	003f4406 	br	a0b184 <__umoddi3+0x90>
  a0b474:	3d4fc83a 	sub	r7,r7,r21
  a0b478:	3546983a 	sll	r3,r6,r21
  a0b47c:	81c4d83a 	srl	r2,r16,r7
  a0b480:	a1e2d83a 	srl	r17,r20,r7
  a0b484:	a54c983a 	sll	r6,r20,r21
  a0b488:	18aeb03a 	or	r23,r3,r2
  a0b48c:	b828d43a 	srli	r20,r23,16
  a0b490:	b1c4d83a 	srl	r2,r22,r7
  a0b494:	8809883a 	mov	r4,r17
  a0b498:	a00b883a 	mov	r5,r20
  a0b49c:	308cb03a 	or	r6,r6,r2
  a0b4a0:	d9c00315 	stw	r7,12(sp)
  a0b4a4:	d9800215 	stw	r6,8(sp)
  a0b4a8:	0a0c1280 	call	a0c128 <__udivsi3>
  a0b4ac:	8809883a 	mov	r4,r17
  a0b4b0:	a00b883a 	mov	r5,r20
  a0b4b4:	1039883a 	mov	fp,r2
  a0b4b8:	0a0c1300 	call	a0c130 <__umodsi3>
  a0b4bc:	b8ffffcc 	andi	r3,r23,65535
  a0b4c0:	d8c00415 	stw	r3,16(sp)
  a0b4c4:	d9000217 	ldw	r4,8(sp)
  a0b4c8:	d9400417 	ldw	r5,16(sp)
  a0b4cc:	1004943a 	slli	r2,r2,16
  a0b4d0:	2006d43a 	srli	r3,r4,16
  a0b4d4:	8560983a 	sll	r16,r16,r21
  a0b4d8:	2f23383a 	mul	r17,r5,fp
  a0b4dc:	10c4b03a 	or	r2,r2,r3
  a0b4e0:	dc000015 	stw	r16,0(sp)
  a0b4e4:	b56c983a 	sll	r22,r22,r21
  a0b4e8:	1440032e 	bgeu	r2,r17,a0b4f8 <__umoddi3+0x404>
  a0b4ec:	15c5883a 	add	r2,r2,r23
  a0b4f0:	e73fffc4 	addi	fp,fp,-1
  a0b4f4:	15c05d2e 	bgeu	r2,r23,a0b66c <__umoddi3+0x578>
  a0b4f8:	1463c83a 	sub	r17,r2,r17
  a0b4fc:	8809883a 	mov	r4,r17
  a0b500:	a00b883a 	mov	r5,r20
  a0b504:	0a0c1280 	call	a0c128 <__udivsi3>
  a0b508:	8809883a 	mov	r4,r17
  a0b50c:	a00b883a 	mov	r5,r20
  a0b510:	1021883a 	mov	r16,r2
  a0b514:	0a0c1300 	call	a0c130 <__umodsi3>
  a0b518:	d8c00417 	ldw	r3,16(sp)
  a0b51c:	d9000217 	ldw	r4,8(sp)
  a0b520:	1004943a 	slli	r2,r2,16
  a0b524:	1c23383a 	mul	r17,r3,r16
  a0b528:	20ffffcc 	andi	r3,r4,65535
  a0b52c:	10ceb03a 	or	r7,r2,r3
  a0b530:	3c40032e 	bgeu	r7,r17,a0b540 <__umoddi3+0x44c>
  a0b534:	3dcf883a 	add	r7,r7,r23
  a0b538:	843fffc4 	addi	r16,r16,-1
  a0b53c:	3dc0472e 	bgeu	r7,r23,a0b65c <__umoddi3+0x568>
  a0b540:	e004943a 	slli	r2,fp,16
  a0b544:	d9400017 	ldw	r5,0(sp)
  a0b548:	3c4fc83a 	sub	r7,r7,r17
  a0b54c:	8084b03a 	or	r2,r16,r2
  a0b550:	28ffffcc 	andi	r3,r5,65535
  a0b554:	280cd43a 	srli	r6,r5,16
  a0b558:	100ad43a 	srli	r5,r2,16
  a0b55c:	10bfffcc 	andi	r2,r2,65535
  a0b560:	10d1383a 	mul	r8,r2,r3
  a0b564:	28c7383a 	mul	r3,r5,r3
  a0b568:	1185383a 	mul	r2,r2,r6
  a0b56c:	4008d43a 	srli	r4,r8,16
  a0b570:	298b383a 	mul	r5,r5,r6
  a0b574:	10c5883a 	add	r2,r2,r3
  a0b578:	2089883a 	add	r4,r4,r2
  a0b57c:	20c0022e 	bgeu	r4,r3,a0b588 <__umoddi3+0x494>
  a0b580:	00800074 	movhi	r2,1
  a0b584:	288b883a 	add	r5,r5,r2
  a0b588:	2004d43a 	srli	r2,r4,16
  a0b58c:	2008943a 	slli	r4,r4,16
  a0b590:	40ffffcc 	andi	r3,r8,65535
  a0b594:	288b883a 	add	r5,r5,r2
  a0b598:	20c9883a 	add	r4,r4,r3
  a0b59c:	39400b36 	bltu	r7,r5,a0b5cc <__umoddi3+0x4d8>
  a0b5a0:	39403d26 	beq	r7,r5,a0b698 <__umoddi3+0x5a4>
  a0b5a4:	394bc83a 	sub	r5,r7,r5
  a0b5a8:	00000f06 	br	a0b5e8 <__umoddi3+0x4f4>
  a0b5ac:	30c5c83a 	sub	r2,r6,r3
  a0b5b0:	1839883a 	mov	fp,r3
  a0b5b4:	b084d83a 	srl	r2,r22,r2
  a0b5b8:	a0c6983a 	sll	r3,r20,r3
  a0b5bc:	8720983a 	sll	r16,r16,fp
  a0b5c0:	b72c983a 	sll	r22,r22,fp
  a0b5c4:	18a8b03a 	or	r20,r3,r2
  a0b5c8:	003f3a06 	br	a0b2b4 <__umoddi3+0x1c0>
  a0b5cc:	d8c00017 	ldw	r3,0(sp)
  a0b5d0:	20c5c83a 	sub	r2,r4,r3
  a0b5d4:	2089803a 	cmpltu	r4,r4,r2
  a0b5d8:	2dc7c83a 	sub	r3,r5,r23
  a0b5dc:	1907c83a 	sub	r3,r3,r4
  a0b5e0:	38cbc83a 	sub	r5,r7,r3
  a0b5e4:	1009883a 	mov	r4,r2
  a0b5e8:	b105c83a 	sub	r2,r22,r4
  a0b5ec:	b087803a 	cmpltu	r3,r22,r2
  a0b5f0:	28c7c83a 	sub	r3,r5,r3
  a0b5f4:	d9400317 	ldw	r5,12(sp)
  a0b5f8:	1544d83a 	srl	r2,r2,r21
  a0b5fc:	1948983a 	sll	r4,r3,r5
  a0b600:	1d46d83a 	srl	r3,r3,r21
  a0b604:	20a4b03a 	or	r18,r4,r2
  a0b608:	9011883a 	mov	r8,r18
  a0b60c:	1813883a 	mov	r9,r3
  a0b610:	003ef606 	br	a0b1ec <__umoddi3+0xf8>
  a0b614:	01400604 	movi	r5,24
  a0b618:	2805883a 	mov	r2,r5
  a0b61c:	003ecc06 	br	a0b150 <__umoddi3+0x5c>
  a0b620:	01400204 	movi	r5,8
  a0b624:	2805883a 	mov	r2,r5
  a0b628:	003ec906 	br	a0b150 <__umoddi3+0x5c>
  a0b62c:	01400204 	movi	r5,8
  a0b630:	2805883a 	mov	r2,r5
  a0b634:	003f0106 	br	a0b23c <__umoddi3+0x148>
  a0b638:	01400204 	movi	r5,8
  a0b63c:	2805883a 	mov	r2,r5
  a0b640:	003f1206 	br	a0b28c <__umoddi3+0x198>
  a0b644:	01400604 	movi	r5,24
  a0b648:	2805883a 	mov	r2,r5
  a0b64c:	003f0f06 	br	a0b28c <__umoddi3+0x198>
  a0b650:	01400604 	movi	r5,24
  a0b654:	2805883a 	mov	r2,r5
  a0b658:	003ef806 	br	a0b23c <__umoddi3+0x148>
  a0b65c:	3c7fb82e 	bgeu	r7,r17,a0b540 <__umoddi3+0x44c>
  a0b660:	843fffc4 	addi	r16,r16,-1
  a0b664:	3dcf883a 	add	r7,r7,r23
  a0b668:	003fb506 	br	a0b540 <__umoddi3+0x44c>
  a0b66c:	147fa22e 	bgeu	r2,r17,a0b4f8 <__umoddi3+0x404>
  a0b670:	e73fffc4 	addi	fp,fp,-1
  a0b674:	15c5883a 	add	r2,r2,r23
  a0b678:	003f9f06 	br	a0b4f8 <__umoddi3+0x404>
  a0b67c:	147f692e 	bgeu	r2,r17,a0b424 <__umoddi3+0x330>
  a0b680:	1405883a 	add	r2,r2,r16
  a0b684:	003f6706 	br	a0b424 <__umoddi3+0x330>
  a0b688:	1405883a 	add	r2,r2,r16
  a0b68c:	003f1906 	br	a0b2f4 <__umoddi3+0x200>
  a0b690:	1405883a 	add	r2,r2,r16
  a0b694:	003ec906 	br	a0b1bc <__umoddi3+0xc8>
  a0b698:	b13fcc36 	bltu	r22,r4,a0b5cc <__umoddi3+0x4d8>
  a0b69c:	000b883a 	mov	r5,zero
  a0b6a0:	003fd106 	br	a0b5e8 <__umoddi3+0x4f4>

00a0b6a4 <__muldf3>:
  a0b6a4:	deffe004 	addi	sp,sp,-128
  a0b6a8:	dc401815 	stw	r17,96(sp)
  a0b6ac:	dc400404 	addi	r17,sp,16
  a0b6b0:	2011883a 	mov	r8,r4
  a0b6b4:	2813883a 	mov	r9,r5
  a0b6b8:	dc001715 	stw	r16,92(sp)
  a0b6bc:	d809883a 	mov	r4,sp
  a0b6c0:	880b883a 	mov	r5,r17
  a0b6c4:	dc000904 	addi	r16,sp,36
  a0b6c8:	dfc01f15 	stw	ra,124(sp)
  a0b6cc:	da400115 	stw	r9,4(sp)
  a0b6d0:	d9c00315 	stw	r7,12(sp)
  a0b6d4:	da000015 	stw	r8,0(sp)
  a0b6d8:	d9800215 	stw	r6,8(sp)
  a0b6dc:	ddc01e15 	stw	r23,120(sp)
  a0b6e0:	dd801d15 	stw	r22,116(sp)
  a0b6e4:	dd401c15 	stw	r21,112(sp)
  a0b6e8:	dd001b15 	stw	r20,108(sp)
  a0b6ec:	dcc01a15 	stw	r19,104(sp)
  a0b6f0:	dc801915 	stw	r18,100(sp)
  a0b6f4:	0a035200 	call	a03520 <__unpack_d>
  a0b6f8:	d9000204 	addi	r4,sp,8
  a0b6fc:	800b883a 	mov	r5,r16
  a0b700:	0a035200 	call	a03520 <__unpack_d>
  a0b704:	d9000417 	ldw	r4,16(sp)
  a0b708:	00800044 	movi	r2,1
  a0b70c:	1100102e 	bgeu	r2,r4,a0b750 <__muldf3+0xac>
  a0b710:	d8c00917 	ldw	r3,36(sp)
  a0b714:	10c0062e 	bgeu	r2,r3,a0b730 <__muldf3+0x8c>
  a0b718:	00800104 	movi	r2,4
  a0b71c:	20800a26 	beq	r4,r2,a0b748 <__muldf3+0xa4>
  a0b720:	1880cc26 	beq	r3,r2,a0ba54 <__muldf3+0x3b0>
  a0b724:	00800084 	movi	r2,2
  a0b728:	20800926 	beq	r4,r2,a0b750 <__muldf3+0xac>
  a0b72c:	1880191e 	bne	r3,r2,a0b794 <__muldf3+0xf0>
  a0b730:	d8c00a17 	ldw	r3,40(sp)
  a0b734:	d8800517 	ldw	r2,20(sp)
  a0b738:	8009883a 	mov	r4,r16
  a0b73c:	10c4c03a 	cmpne	r2,r2,r3
  a0b740:	d8800a15 	stw	r2,40(sp)
  a0b744:	00000706 	br	a0b764 <__muldf3+0xc0>
  a0b748:	00800084 	movi	r2,2
  a0b74c:	1880c326 	beq	r3,r2,a0ba5c <__muldf3+0x3b8>
  a0b750:	d8800517 	ldw	r2,20(sp)
  a0b754:	d8c00a17 	ldw	r3,40(sp)
  a0b758:	8809883a 	mov	r4,r17
  a0b75c:	10c4c03a 	cmpne	r2,r2,r3
  a0b760:	d8800515 	stw	r2,20(sp)
  a0b764:	0a0320c0 	call	a0320c <__pack_d>
  a0b768:	dfc01f17 	ldw	ra,124(sp)
  a0b76c:	ddc01e17 	ldw	r23,120(sp)
  a0b770:	dd801d17 	ldw	r22,116(sp)
  a0b774:	dd401c17 	ldw	r21,112(sp)
  a0b778:	dd001b17 	ldw	r20,108(sp)
  a0b77c:	dcc01a17 	ldw	r19,104(sp)
  a0b780:	dc801917 	ldw	r18,100(sp)
  a0b784:	dc401817 	ldw	r17,96(sp)
  a0b788:	dc001717 	ldw	r16,92(sp)
  a0b78c:	dec02004 	addi	sp,sp,128
  a0b790:	f800283a 	ret
  a0b794:	dd800717 	ldw	r22,28(sp)
  a0b798:	dc800c17 	ldw	r18,48(sp)
  a0b79c:	002b883a 	mov	r21,zero
  a0b7a0:	0023883a 	mov	r17,zero
  a0b7a4:	a80b883a 	mov	r5,r21
  a0b7a8:	b00d883a 	mov	r6,r22
  a0b7ac:	880f883a 	mov	r7,r17
  a0b7b0:	ddc00817 	ldw	r23,32(sp)
  a0b7b4:	dcc00d17 	ldw	r19,52(sp)
  a0b7b8:	9009883a 	mov	r4,r18
  a0b7bc:	0a02df80 	call	a02df8 <__muldi3>
  a0b7c0:	001b883a 	mov	r13,zero
  a0b7c4:	680f883a 	mov	r7,r13
  a0b7c8:	b009883a 	mov	r4,r22
  a0b7cc:	000b883a 	mov	r5,zero
  a0b7d0:	980d883a 	mov	r6,r19
  a0b7d4:	b82d883a 	mov	r22,r23
  a0b7d8:	002f883a 	mov	r23,zero
  a0b7dc:	db401615 	stw	r13,88(sp)
  a0b7e0:	d8801315 	stw	r2,76(sp)
  a0b7e4:	d8c01415 	stw	r3,80(sp)
  a0b7e8:	dcc01515 	stw	r19,84(sp)
  a0b7ec:	0a02df80 	call	a02df8 <__muldi3>
  a0b7f0:	b00d883a 	mov	r6,r22
  a0b7f4:	000b883a 	mov	r5,zero
  a0b7f8:	9009883a 	mov	r4,r18
  a0b7fc:	b80f883a 	mov	r7,r23
  a0b800:	1021883a 	mov	r16,r2
  a0b804:	1823883a 	mov	r17,r3
  a0b808:	0a02df80 	call	a02df8 <__muldi3>
  a0b80c:	8085883a 	add	r2,r16,r2
  a0b810:	140d803a 	cmpltu	r6,r2,r16
  a0b814:	88c7883a 	add	r3,r17,r3
  a0b818:	30cd883a 	add	r6,r6,r3
  a0b81c:	1029883a 	mov	r20,r2
  a0b820:	302b883a 	mov	r21,r6
  a0b824:	da801317 	ldw	r10,76(sp)
  a0b828:	dac01417 	ldw	r11,80(sp)
  a0b82c:	db001517 	ldw	r12,84(sp)
  a0b830:	db401617 	ldw	r13,88(sp)
  a0b834:	3440612e 	bgeu	r6,r17,a0b9bc <__muldf3+0x318>
  a0b838:	0009883a 	mov	r4,zero
  a0b83c:	5105883a 	add	r2,r10,r4
  a0b840:	128d803a 	cmpltu	r6,r2,r10
  a0b844:	5d07883a 	add	r3,r11,r20
  a0b848:	30cd883a 	add	r6,r6,r3
  a0b84c:	0021883a 	mov	r16,zero
  a0b850:	04400044 	movi	r17,1
  a0b854:	1025883a 	mov	r18,r2
  a0b858:	3027883a 	mov	r19,r6
  a0b85c:	32c06236 	bltu	r6,r11,a0b9e8 <__muldf3+0x344>
  a0b860:	59807a26 	beq	r11,r6,a0ba4c <__muldf3+0x3a8>
  a0b864:	680b883a 	mov	r5,r13
  a0b868:	b80f883a 	mov	r7,r23
  a0b86c:	6009883a 	mov	r4,r12
  a0b870:	b00d883a 	mov	r6,r22
  a0b874:	0a02df80 	call	a02df8 <__muldi3>
  a0b878:	1009883a 	mov	r4,r2
  a0b87c:	000f883a 	mov	r7,zero
  a0b880:	1545883a 	add	r2,r2,r21
  a0b884:	1111803a 	cmpltu	r8,r2,r4
  a0b888:	19c7883a 	add	r3,r3,r7
  a0b88c:	40c7883a 	add	r3,r8,r3
  a0b890:	88cb883a 	add	r5,r17,r3
  a0b894:	d8c00617 	ldw	r3,24(sp)
  a0b898:	8089883a 	add	r4,r16,r2
  a0b89c:	d8800b17 	ldw	r2,44(sp)
  a0b8a0:	18c00104 	addi	r3,r3,4
  a0b8a4:	240d803a 	cmpltu	r6,r4,r16
  a0b8a8:	10c7883a 	add	r3,r2,r3
  a0b8ac:	2013883a 	mov	r9,r4
  a0b8b0:	d8800a17 	ldw	r2,40(sp)
  a0b8b4:	d9000517 	ldw	r4,20(sp)
  a0b8b8:	314d883a 	add	r6,r6,r5
  a0b8bc:	3015883a 	mov	r10,r6
  a0b8c0:	2088c03a 	cmpne	r4,r4,r2
  a0b8c4:	00880034 	movhi	r2,8192
  a0b8c8:	10bfffc4 	addi	r2,r2,-1
  a0b8cc:	d9000f15 	stw	r4,60(sp)
  a0b8d0:	d8c01015 	stw	r3,64(sp)
  a0b8d4:	1180162e 	bgeu	r2,r6,a0b930 <__muldf3+0x28c>
  a0b8d8:	1811883a 	mov	r8,r3
  a0b8dc:	101f883a 	mov	r15,r2
  a0b8e0:	980497fa 	slli	r2,r19,31
  a0b8e4:	9016d07a 	srli	r11,r18,1
  a0b8e8:	500697fa 	slli	r3,r10,31
  a0b8ec:	480cd07a 	srli	r6,r9,1
  a0b8f0:	500ed07a 	srli	r7,r10,1
  a0b8f4:	12d6b03a 	or	r11,r2,r11
  a0b8f8:	00800044 	movi	r2,1
  a0b8fc:	198cb03a 	or	r6,r3,r6
  a0b900:	4888703a 	and	r4,r9,r2
  a0b904:	9818d07a 	srli	r12,r19,1
  a0b908:	001b883a 	mov	r13,zero
  a0b90c:	03a00034 	movhi	r14,32768
  a0b910:	3013883a 	mov	r9,r6
  a0b914:	3815883a 	mov	r10,r7
  a0b918:	4091883a 	add	r8,r8,r2
  a0b91c:	20000226 	beq	r4,zero,a0b928 <__muldf3+0x284>
  a0b920:	5b64b03a 	or	r18,r11,r13
  a0b924:	63a6b03a 	or	r19,r12,r14
  a0b928:	7abfed36 	bltu	r15,r10,a0b8e0 <__muldf3+0x23c>
  a0b92c:	da001015 	stw	r8,64(sp)
  a0b930:	00840034 	movhi	r2,4096
  a0b934:	10bfffc4 	addi	r2,r2,-1
  a0b938:	12801436 	bltu	r2,r10,a0b98c <__muldf3+0x2e8>
  a0b93c:	da001017 	ldw	r8,64(sp)
  a0b940:	101f883a 	mov	r15,r2
  a0b944:	4a45883a 	add	r2,r9,r9
  a0b948:	124d803a 	cmpltu	r6,r2,r9
  a0b94c:	5287883a 	add	r3,r10,r10
  a0b950:	9497883a 	add	r11,r18,r18
  a0b954:	5c8f803a 	cmpltu	r7,r11,r18
  a0b958:	9cd9883a 	add	r12,r19,r19
  a0b95c:	01000044 	movi	r4,1
  a0b960:	30cd883a 	add	r6,r6,r3
  a0b964:	3b0f883a 	add	r7,r7,r12
  a0b968:	423fffc4 	addi	r8,r8,-1
  a0b96c:	1013883a 	mov	r9,r2
  a0b970:	3015883a 	mov	r10,r6
  a0b974:	111ab03a 	or	r13,r2,r4
  a0b978:	98003016 	blt	r19,zero,a0ba3c <__muldf3+0x398>
  a0b97c:	5825883a 	mov	r18,r11
  a0b980:	3827883a 	mov	r19,r7
  a0b984:	7abfef2e 	bgeu	r15,r10,a0b944 <__muldf3+0x2a0>
  a0b988:	da001015 	stw	r8,64(sp)
  a0b98c:	00803fc4 	movi	r2,255
  a0b990:	488e703a 	and	r7,r9,r2
  a0b994:	00802004 	movi	r2,128
  a0b998:	0007883a 	mov	r3,zero
  a0b99c:	0011883a 	mov	r8,zero
  a0b9a0:	38801826 	beq	r7,r2,a0ba04 <__muldf3+0x360>
  a0b9a4:	008000c4 	movi	r2,3
  a0b9a8:	d9000e04 	addi	r4,sp,56
  a0b9ac:	da801215 	stw	r10,72(sp)
  a0b9b0:	d8800e15 	stw	r2,56(sp)
  a0b9b4:	da401115 	stw	r9,68(sp)
  a0b9b8:	003f6a06 	br	a0b764 <__muldf3+0xc0>
  a0b9bc:	89802126 	beq	r17,r6,a0ba44 <__muldf3+0x3a0>
  a0b9c0:	0009883a 	mov	r4,zero
  a0b9c4:	5105883a 	add	r2,r10,r4
  a0b9c8:	128d803a 	cmpltu	r6,r2,r10
  a0b9cc:	5d07883a 	add	r3,r11,r20
  a0b9d0:	30cd883a 	add	r6,r6,r3
  a0b9d4:	0021883a 	mov	r16,zero
  a0b9d8:	0023883a 	mov	r17,zero
  a0b9dc:	1025883a 	mov	r18,r2
  a0b9e0:	3027883a 	mov	r19,r6
  a0b9e4:	32ff9e2e 	bgeu	r6,r11,a0b860 <__muldf3+0x1bc>
  a0b9e8:	00800044 	movi	r2,1
  a0b9ec:	8089883a 	add	r4,r16,r2
  a0b9f0:	240d803a 	cmpltu	r6,r4,r16
  a0b9f4:	344d883a 	add	r6,r6,r17
  a0b9f8:	2021883a 	mov	r16,r4
  a0b9fc:	3023883a 	mov	r17,r6
  a0ba00:	003f9806 	br	a0b864 <__muldf3+0x1c0>
  a0ba04:	403fe71e 	bne	r8,zero,a0b9a4 <__muldf3+0x300>
  a0ba08:	01004004 	movi	r4,256
  a0ba0c:	4904703a 	and	r2,r9,r4
  a0ba10:	10c4b03a 	or	r2,r2,r3
  a0ba14:	103fe31e 	bne	r2,zero,a0b9a4 <__muldf3+0x300>
  a0ba18:	94c4b03a 	or	r2,r18,r19
  a0ba1c:	103fe126 	beq	r2,zero,a0b9a4 <__muldf3+0x300>
  a0ba20:	49c5883a 	add	r2,r9,r7
  a0ba24:	1251803a 	cmpltu	r8,r2,r9
  a0ba28:	4291883a 	add	r8,r8,r10
  a0ba2c:	013fc004 	movi	r4,-256
  a0ba30:	1112703a 	and	r9,r2,r4
  a0ba34:	4015883a 	mov	r10,r8
  a0ba38:	003fda06 	br	a0b9a4 <__muldf3+0x300>
  a0ba3c:	6813883a 	mov	r9,r13
  a0ba40:	003fce06 	br	a0b97c <__muldf3+0x2d8>
  a0ba44:	143f7c36 	bltu	r2,r16,a0b838 <__muldf3+0x194>
  a0ba48:	003fdd06 	br	a0b9c0 <__muldf3+0x31c>
  a0ba4c:	12bf852e 	bgeu	r2,r10,a0b864 <__muldf3+0x1c0>
  a0ba50:	003fe506 	br	a0b9e8 <__muldf3+0x344>
  a0ba54:	00800084 	movi	r2,2
  a0ba58:	20bf351e 	bne	r4,r2,a0b730 <__muldf3+0x8c>
  a0ba5c:	01002874 	movhi	r4,161
  a0ba60:	2102d904 	addi	r4,r4,2916
  a0ba64:	003f3f06 	br	a0b764 <__muldf3+0xc0>

00a0ba68 <__eqdf2>:
  a0ba68:	deffef04 	addi	sp,sp,-68
  a0ba6c:	dc400f15 	stw	r17,60(sp)
  a0ba70:	dc400404 	addi	r17,sp,16
  a0ba74:	2005883a 	mov	r2,r4
  a0ba78:	2807883a 	mov	r3,r5
  a0ba7c:	dc000e15 	stw	r16,56(sp)
  a0ba80:	d809883a 	mov	r4,sp
  a0ba84:	880b883a 	mov	r5,r17
  a0ba88:	dc000904 	addi	r16,sp,36
  a0ba8c:	d8c00115 	stw	r3,4(sp)
  a0ba90:	d8800015 	stw	r2,0(sp)
  a0ba94:	d9800215 	stw	r6,8(sp)
  a0ba98:	dfc01015 	stw	ra,64(sp)
  a0ba9c:	d9c00315 	stw	r7,12(sp)
  a0baa0:	0a035200 	call	a03520 <__unpack_d>
  a0baa4:	d9000204 	addi	r4,sp,8
  a0baa8:	800b883a 	mov	r5,r16
  a0baac:	0a035200 	call	a03520 <__unpack_d>
  a0bab0:	d8800417 	ldw	r2,16(sp)
  a0bab4:	00c00044 	movi	r3,1
  a0bab8:	180d883a 	mov	r6,r3
  a0babc:	1880062e 	bgeu	r3,r2,a0bad8 <__eqdf2+0x70>
  a0bac0:	d8800917 	ldw	r2,36(sp)
  a0bac4:	8809883a 	mov	r4,r17
  a0bac8:	800b883a 	mov	r5,r16
  a0bacc:	1880022e 	bgeu	r3,r2,a0bad8 <__eqdf2+0x70>
  a0bad0:	0a036580 	call	a03658 <__fpcmp_parts_d>
  a0bad4:	100d883a 	mov	r6,r2
  a0bad8:	3005883a 	mov	r2,r6
  a0badc:	dfc01017 	ldw	ra,64(sp)
  a0bae0:	dc400f17 	ldw	r17,60(sp)
  a0bae4:	dc000e17 	ldw	r16,56(sp)
  a0bae8:	dec01104 	addi	sp,sp,68
  a0baec:	f800283a 	ret

00a0baf0 <__gtdf2>:
  a0baf0:	deffef04 	addi	sp,sp,-68
  a0baf4:	dc400f15 	stw	r17,60(sp)
  a0baf8:	dc400404 	addi	r17,sp,16
  a0bafc:	2005883a 	mov	r2,r4
  a0bb00:	2807883a 	mov	r3,r5
  a0bb04:	dc000e15 	stw	r16,56(sp)
  a0bb08:	d809883a 	mov	r4,sp
  a0bb0c:	880b883a 	mov	r5,r17
  a0bb10:	dc000904 	addi	r16,sp,36
  a0bb14:	d8c00115 	stw	r3,4(sp)
  a0bb18:	d8800015 	stw	r2,0(sp)
  a0bb1c:	d9800215 	stw	r6,8(sp)
  a0bb20:	dfc01015 	stw	ra,64(sp)
  a0bb24:	d9c00315 	stw	r7,12(sp)
  a0bb28:	0a035200 	call	a03520 <__unpack_d>
  a0bb2c:	d9000204 	addi	r4,sp,8
  a0bb30:	800b883a 	mov	r5,r16
  a0bb34:	0a035200 	call	a03520 <__unpack_d>
  a0bb38:	d8800417 	ldw	r2,16(sp)
  a0bb3c:	00c00044 	movi	r3,1
  a0bb40:	01bfffc4 	movi	r6,-1
  a0bb44:	1880062e 	bgeu	r3,r2,a0bb60 <__gtdf2+0x70>
  a0bb48:	d8800917 	ldw	r2,36(sp)
  a0bb4c:	8809883a 	mov	r4,r17
  a0bb50:	800b883a 	mov	r5,r16
  a0bb54:	1880022e 	bgeu	r3,r2,a0bb60 <__gtdf2+0x70>
  a0bb58:	0a036580 	call	a03658 <__fpcmp_parts_d>
  a0bb5c:	100d883a 	mov	r6,r2
  a0bb60:	3005883a 	mov	r2,r6
  a0bb64:	dfc01017 	ldw	ra,64(sp)
  a0bb68:	dc400f17 	ldw	r17,60(sp)
  a0bb6c:	dc000e17 	ldw	r16,56(sp)
  a0bb70:	dec01104 	addi	sp,sp,68
  a0bb74:	f800283a 	ret

00a0bb78 <__gedf2>:
  a0bb78:	deffef04 	addi	sp,sp,-68
  a0bb7c:	dc400f15 	stw	r17,60(sp)
  a0bb80:	dc400404 	addi	r17,sp,16
  a0bb84:	2005883a 	mov	r2,r4
  a0bb88:	2807883a 	mov	r3,r5
  a0bb8c:	dc000e15 	stw	r16,56(sp)
  a0bb90:	d809883a 	mov	r4,sp
  a0bb94:	880b883a 	mov	r5,r17
  a0bb98:	dc000904 	addi	r16,sp,36
  a0bb9c:	d8c00115 	stw	r3,4(sp)
  a0bba0:	d8800015 	stw	r2,0(sp)
  a0bba4:	d9800215 	stw	r6,8(sp)
  a0bba8:	dfc01015 	stw	ra,64(sp)
  a0bbac:	d9c00315 	stw	r7,12(sp)
  a0bbb0:	0a035200 	call	a03520 <__unpack_d>
  a0bbb4:	d9000204 	addi	r4,sp,8
  a0bbb8:	800b883a 	mov	r5,r16
  a0bbbc:	0a035200 	call	a03520 <__unpack_d>
  a0bbc0:	d8800417 	ldw	r2,16(sp)
  a0bbc4:	00c00044 	movi	r3,1
  a0bbc8:	01bfffc4 	movi	r6,-1
  a0bbcc:	1880062e 	bgeu	r3,r2,a0bbe8 <__gedf2+0x70>
  a0bbd0:	d8800917 	ldw	r2,36(sp)
  a0bbd4:	8809883a 	mov	r4,r17
  a0bbd8:	800b883a 	mov	r5,r16
  a0bbdc:	1880022e 	bgeu	r3,r2,a0bbe8 <__gedf2+0x70>
  a0bbe0:	0a036580 	call	a03658 <__fpcmp_parts_d>
  a0bbe4:	100d883a 	mov	r6,r2
  a0bbe8:	3005883a 	mov	r2,r6
  a0bbec:	dfc01017 	ldw	ra,64(sp)
  a0bbf0:	dc400f17 	ldw	r17,60(sp)
  a0bbf4:	dc000e17 	ldw	r16,56(sp)
  a0bbf8:	dec01104 	addi	sp,sp,68
  a0bbfc:	f800283a 	ret

00a0bc00 <__ltdf2>:
  a0bc00:	deffef04 	addi	sp,sp,-68
  a0bc04:	dc400f15 	stw	r17,60(sp)
  a0bc08:	dc400404 	addi	r17,sp,16
  a0bc0c:	2005883a 	mov	r2,r4
  a0bc10:	2807883a 	mov	r3,r5
  a0bc14:	dc000e15 	stw	r16,56(sp)
  a0bc18:	d809883a 	mov	r4,sp
  a0bc1c:	880b883a 	mov	r5,r17
  a0bc20:	dc000904 	addi	r16,sp,36
  a0bc24:	d8c00115 	stw	r3,4(sp)
  a0bc28:	d8800015 	stw	r2,0(sp)
  a0bc2c:	d9800215 	stw	r6,8(sp)
  a0bc30:	dfc01015 	stw	ra,64(sp)
  a0bc34:	d9c00315 	stw	r7,12(sp)
  a0bc38:	0a035200 	call	a03520 <__unpack_d>
  a0bc3c:	d9000204 	addi	r4,sp,8
  a0bc40:	800b883a 	mov	r5,r16
  a0bc44:	0a035200 	call	a03520 <__unpack_d>
  a0bc48:	d8800417 	ldw	r2,16(sp)
  a0bc4c:	00c00044 	movi	r3,1
  a0bc50:	180d883a 	mov	r6,r3
  a0bc54:	1880062e 	bgeu	r3,r2,a0bc70 <__ltdf2+0x70>
  a0bc58:	d8800917 	ldw	r2,36(sp)
  a0bc5c:	8809883a 	mov	r4,r17
  a0bc60:	800b883a 	mov	r5,r16
  a0bc64:	1880022e 	bgeu	r3,r2,a0bc70 <__ltdf2+0x70>
  a0bc68:	0a036580 	call	a03658 <__fpcmp_parts_d>
  a0bc6c:	100d883a 	mov	r6,r2
  a0bc70:	3005883a 	mov	r2,r6
  a0bc74:	dfc01017 	ldw	ra,64(sp)
  a0bc78:	dc400f17 	ldw	r17,60(sp)
  a0bc7c:	dc000e17 	ldw	r16,56(sp)
  a0bc80:	dec01104 	addi	sp,sp,68
  a0bc84:	f800283a 	ret

00a0bc88 <__floatsidf>:
  a0bc88:	2006d7fa 	srli	r3,r4,31
  a0bc8c:	defff604 	addi	sp,sp,-40
  a0bc90:	008000c4 	movi	r2,3
  a0bc94:	dfc00915 	stw	ra,36(sp)
  a0bc98:	dcc00815 	stw	r19,32(sp)
  a0bc9c:	dc800715 	stw	r18,28(sp)
  a0bca0:	dc400615 	stw	r17,24(sp)
  a0bca4:	dc000515 	stw	r16,20(sp)
  a0bca8:	d8800015 	stw	r2,0(sp)
  a0bcac:	d8c00115 	stw	r3,4(sp)
  a0bcb0:	20000f1e 	bne	r4,zero,a0bcf0 <__floatsidf+0x68>
  a0bcb4:	00800084 	movi	r2,2
  a0bcb8:	d8800015 	stw	r2,0(sp)
  a0bcbc:	d809883a 	mov	r4,sp
  a0bcc0:	0a0320c0 	call	a0320c <__pack_d>
  a0bcc4:	1009883a 	mov	r4,r2
  a0bcc8:	180b883a 	mov	r5,r3
  a0bccc:	2005883a 	mov	r2,r4
  a0bcd0:	2807883a 	mov	r3,r5
  a0bcd4:	dfc00917 	ldw	ra,36(sp)
  a0bcd8:	dcc00817 	ldw	r19,32(sp)
  a0bcdc:	dc800717 	ldw	r18,28(sp)
  a0bce0:	dc400617 	ldw	r17,24(sp)
  a0bce4:	dc000517 	ldw	r16,20(sp)
  a0bce8:	dec00a04 	addi	sp,sp,40
  a0bcec:	f800283a 	ret
  a0bcf0:	00800f04 	movi	r2,60
  a0bcf4:	1807003a 	cmpeq	r3,r3,zero
  a0bcf8:	d8800215 	stw	r2,8(sp)
  a0bcfc:	18001126 	beq	r3,zero,a0bd44 <__floatsidf+0xbc>
  a0bd00:	0027883a 	mov	r19,zero
  a0bd04:	2025883a 	mov	r18,r4
  a0bd08:	d9000315 	stw	r4,12(sp)
  a0bd0c:	dcc00415 	stw	r19,16(sp)
  a0bd10:	0a02e900 	call	a02e90 <__clzsi2>
  a0bd14:	11000744 	addi	r4,r2,29
  a0bd18:	013fe80e 	bge	zero,r4,a0bcbc <__floatsidf+0x34>
  a0bd1c:	10bfff44 	addi	r2,r2,-3
  a0bd20:	10000c16 	blt	r2,zero,a0bd54 <__floatsidf+0xcc>
  a0bd24:	90a2983a 	sll	r17,r18,r2
  a0bd28:	0021883a 	mov	r16,zero
  a0bd2c:	d8800217 	ldw	r2,8(sp)
  a0bd30:	dc400415 	stw	r17,16(sp)
  a0bd34:	dc000315 	stw	r16,12(sp)
  a0bd38:	1105c83a 	sub	r2,r2,r4
  a0bd3c:	d8800215 	stw	r2,8(sp)
  a0bd40:	003fde06 	br	a0bcbc <__floatsidf+0x34>
  a0bd44:	00a00034 	movhi	r2,32768
  a0bd48:	20800a26 	beq	r4,r2,a0bd74 <__floatsidf+0xec>
  a0bd4c:	0109c83a 	sub	r4,zero,r4
  a0bd50:	003feb06 	br	a0bd00 <__floatsidf+0x78>
  a0bd54:	9006d07a 	srli	r3,r18,1
  a0bd58:	008007c4 	movi	r2,31
  a0bd5c:	1105c83a 	sub	r2,r2,r4
  a0bd60:	1886d83a 	srl	r3,r3,r2
  a0bd64:	9922983a 	sll	r17,r19,r4
  a0bd68:	9120983a 	sll	r16,r18,r4
  a0bd6c:	1c62b03a 	or	r17,r3,r17
  a0bd70:	003fee06 	br	a0bd2c <__floatsidf+0xa4>
  a0bd74:	0009883a 	mov	r4,zero
  a0bd78:	01707834 	movhi	r5,49632
  a0bd7c:	003fd306 	br	a0bccc <__floatsidf+0x44>

00a0bd80 <__fixdfsi>:
  a0bd80:	defff804 	addi	sp,sp,-32
  a0bd84:	2005883a 	mov	r2,r4
  a0bd88:	2807883a 	mov	r3,r5
  a0bd8c:	d809883a 	mov	r4,sp
  a0bd90:	d9400204 	addi	r5,sp,8
  a0bd94:	d8c00115 	stw	r3,4(sp)
  a0bd98:	d8800015 	stw	r2,0(sp)
  a0bd9c:	dfc00715 	stw	ra,28(sp)
  a0bda0:	0a035200 	call	a03520 <__unpack_d>
  a0bda4:	d8c00217 	ldw	r3,8(sp)
  a0bda8:	00800084 	movi	r2,2
  a0bdac:	1880051e 	bne	r3,r2,a0bdc4 <__fixdfsi+0x44>
  a0bdb0:	0007883a 	mov	r3,zero
  a0bdb4:	1805883a 	mov	r2,r3
  a0bdb8:	dfc00717 	ldw	ra,28(sp)
  a0bdbc:	dec00804 	addi	sp,sp,32
  a0bdc0:	f800283a 	ret
  a0bdc4:	00800044 	movi	r2,1
  a0bdc8:	10fff92e 	bgeu	r2,r3,a0bdb0 <__fixdfsi+0x30>
  a0bdcc:	00800104 	movi	r2,4
  a0bdd0:	18800426 	beq	r3,r2,a0bde4 <__fixdfsi+0x64>
  a0bdd4:	d8c00417 	ldw	r3,16(sp)
  a0bdd8:	183ff516 	blt	r3,zero,a0bdb0 <__fixdfsi+0x30>
  a0bddc:	00800784 	movi	r2,30
  a0bde0:	10c0080e 	bge	r2,r3,a0be04 <__fixdfsi+0x84>
  a0bde4:	d8800317 	ldw	r2,12(sp)
  a0bde8:	1000121e 	bne	r2,zero,a0be34 <__fixdfsi+0xb4>
  a0bdec:	00e00034 	movhi	r3,32768
  a0bdf0:	18ffffc4 	addi	r3,r3,-1
  a0bdf4:	1805883a 	mov	r2,r3
  a0bdf8:	dfc00717 	ldw	ra,28(sp)
  a0bdfc:	dec00804 	addi	sp,sp,32
  a0be00:	f800283a 	ret
  a0be04:	00800f04 	movi	r2,60
  a0be08:	10d1c83a 	sub	r8,r2,r3
  a0be0c:	40bff804 	addi	r2,r8,-32
  a0be10:	d9800517 	ldw	r6,20(sp)
  a0be14:	d9c00617 	ldw	r7,24(sp)
  a0be18:	10000816 	blt	r2,zero,a0be3c <__fixdfsi+0xbc>
  a0be1c:	3888d83a 	srl	r4,r7,r2
  a0be20:	d8800317 	ldw	r2,12(sp)
  a0be24:	2007883a 	mov	r3,r4
  a0be28:	103fe226 	beq	r2,zero,a0bdb4 <__fixdfsi+0x34>
  a0be2c:	0107c83a 	sub	r3,zero,r4
  a0be30:	003fe006 	br	a0bdb4 <__fixdfsi+0x34>
  a0be34:	00e00034 	movhi	r3,32768
  a0be38:	003fde06 	br	a0bdb4 <__fixdfsi+0x34>
  a0be3c:	39c7883a 	add	r3,r7,r7
  a0be40:	008007c4 	movi	r2,31
  a0be44:	1205c83a 	sub	r2,r2,r8
  a0be48:	1886983a 	sll	r3,r3,r2
  a0be4c:	3208d83a 	srl	r4,r6,r8
  a0be50:	1908b03a 	or	r4,r3,r4
  a0be54:	003ff206 	br	a0be20 <__fixdfsi+0xa0>

00a0be58 <__floatunsidf>:
  a0be58:	defff204 	addi	sp,sp,-56
  a0be5c:	dfc00d15 	stw	ra,52(sp)
  a0be60:	ddc00c15 	stw	r23,48(sp)
  a0be64:	dd800b15 	stw	r22,44(sp)
  a0be68:	dd400a15 	stw	r21,40(sp)
  a0be6c:	dd000915 	stw	r20,36(sp)
  a0be70:	dcc00815 	stw	r19,32(sp)
  a0be74:	dc800715 	stw	r18,28(sp)
  a0be78:	dc400615 	stw	r17,24(sp)
  a0be7c:	dc000515 	stw	r16,20(sp)
  a0be80:	d8000115 	stw	zero,4(sp)
  a0be84:	20000f1e 	bne	r4,zero,a0bec4 <__floatunsidf+0x6c>
  a0be88:	00800084 	movi	r2,2
  a0be8c:	d8800015 	stw	r2,0(sp)
  a0be90:	d809883a 	mov	r4,sp
  a0be94:	0a0320c0 	call	a0320c <__pack_d>
  a0be98:	dfc00d17 	ldw	ra,52(sp)
  a0be9c:	ddc00c17 	ldw	r23,48(sp)
  a0bea0:	dd800b17 	ldw	r22,44(sp)
  a0bea4:	dd400a17 	ldw	r21,40(sp)
  a0bea8:	dd000917 	ldw	r20,36(sp)
  a0beac:	dcc00817 	ldw	r19,32(sp)
  a0beb0:	dc800717 	ldw	r18,28(sp)
  a0beb4:	dc400617 	ldw	r17,24(sp)
  a0beb8:	dc000517 	ldw	r16,20(sp)
  a0bebc:	dec00e04 	addi	sp,sp,56
  a0bec0:	f800283a 	ret
  a0bec4:	008000c4 	movi	r2,3
  a0bec8:	00c00f04 	movi	r3,60
  a0becc:	002f883a 	mov	r23,zero
  a0bed0:	202d883a 	mov	r22,r4
  a0bed4:	d8800015 	stw	r2,0(sp)
  a0bed8:	d8c00215 	stw	r3,8(sp)
  a0bedc:	d9000315 	stw	r4,12(sp)
  a0bee0:	ddc00415 	stw	r23,16(sp)
  a0bee4:	0a02e900 	call	a02e90 <__clzsi2>
  a0bee8:	12400744 	addi	r9,r2,29
  a0beec:	48000b16 	blt	r9,zero,a0bf1c <__floatunsidf+0xc4>
  a0bef0:	483fe726 	beq	r9,zero,a0be90 <__floatunsidf+0x38>
  a0bef4:	10bfff44 	addi	r2,r2,-3
  a0bef8:	10002e16 	blt	r2,zero,a0bfb4 <__floatunsidf+0x15c>
  a0befc:	b0a2983a 	sll	r17,r22,r2
  a0bf00:	0021883a 	mov	r16,zero
  a0bf04:	d8800217 	ldw	r2,8(sp)
  a0bf08:	dc400415 	stw	r17,16(sp)
  a0bf0c:	dc000315 	stw	r16,12(sp)
  a0bf10:	1245c83a 	sub	r2,r2,r9
  a0bf14:	d8800215 	stw	r2,8(sp)
  a0bf18:	003fdd06 	br	a0be90 <__floatunsidf+0x38>
  a0bf1c:	0255c83a 	sub	r10,zero,r9
  a0bf20:	51bff804 	addi	r6,r10,-32
  a0bf24:	30001b16 	blt	r6,zero,a0bf94 <__floatunsidf+0x13c>
  a0bf28:	b9a8d83a 	srl	r20,r23,r6
  a0bf2c:	002b883a 	mov	r21,zero
  a0bf30:	000f883a 	mov	r7,zero
  a0bf34:	01000044 	movi	r4,1
  a0bf38:	0011883a 	mov	r8,zero
  a0bf3c:	30002516 	blt	r6,zero,a0bfd4 <__floatunsidf+0x17c>
  a0bf40:	21a6983a 	sll	r19,r4,r6
  a0bf44:	0025883a 	mov	r18,zero
  a0bf48:	00bfffc4 	movi	r2,-1
  a0bf4c:	9089883a 	add	r4,r18,r2
  a0bf50:	988b883a 	add	r5,r19,r2
  a0bf54:	248d803a 	cmpltu	r6,r4,r18
  a0bf58:	314b883a 	add	r5,r6,r5
  a0bf5c:	b104703a 	and	r2,r22,r4
  a0bf60:	b946703a 	and	r3,r23,r5
  a0bf64:	10c4b03a 	or	r2,r2,r3
  a0bf68:	10000226 	beq	r2,zero,a0bf74 <__floatunsidf+0x11c>
  a0bf6c:	01c00044 	movi	r7,1
  a0bf70:	0011883a 	mov	r8,zero
  a0bf74:	d9000217 	ldw	r4,8(sp)
  a0bf78:	a1c4b03a 	or	r2,r20,r7
  a0bf7c:	aa06b03a 	or	r3,r21,r8
  a0bf80:	2249c83a 	sub	r4,r4,r9
  a0bf84:	d8c00415 	stw	r3,16(sp)
  a0bf88:	d9000215 	stw	r4,8(sp)
  a0bf8c:	d8800315 	stw	r2,12(sp)
  a0bf90:	003fbf06 	br	a0be90 <__floatunsidf+0x38>
  a0bf94:	bdc7883a 	add	r3,r23,r23
  a0bf98:	008007c4 	movi	r2,31
  a0bf9c:	1285c83a 	sub	r2,r2,r10
  a0bfa0:	1886983a 	sll	r3,r3,r2
  a0bfa4:	b2a8d83a 	srl	r20,r22,r10
  a0bfa8:	baaad83a 	srl	r21,r23,r10
  a0bfac:	1d28b03a 	or	r20,r3,r20
  a0bfb0:	003fdf06 	br	a0bf30 <__floatunsidf+0xd8>
  a0bfb4:	b006d07a 	srli	r3,r22,1
  a0bfb8:	008007c4 	movi	r2,31
  a0bfbc:	1245c83a 	sub	r2,r2,r9
  a0bfc0:	1886d83a 	srl	r3,r3,r2
  a0bfc4:	ba62983a 	sll	r17,r23,r9
  a0bfc8:	b260983a 	sll	r16,r22,r9
  a0bfcc:	1c62b03a 	or	r17,r3,r17
  a0bfd0:	003fcc06 	br	a0bf04 <__floatunsidf+0xac>
  a0bfd4:	2006d07a 	srli	r3,r4,1
  a0bfd8:	008007c4 	movi	r2,31
  a0bfdc:	1285c83a 	sub	r2,r2,r10
  a0bfe0:	18a6d83a 	srl	r19,r3,r2
  a0bfe4:	22a4983a 	sll	r18,r4,r10
  a0bfe8:	003fd706 	br	a0bf48 <__floatunsidf+0xf0>

00a0bfec <udivmodsi4>:
  a0bfec:	29001b2e 	bgeu	r5,r4,a0c05c <udivmodsi4+0x70>
  a0bff0:	28001a16 	blt	r5,zero,a0c05c <udivmodsi4+0x70>
  a0bff4:	00800044 	movi	r2,1
  a0bff8:	0007883a 	mov	r3,zero
  a0bffc:	01c007c4 	movi	r7,31
  a0c000:	00000306 	br	a0c010 <udivmodsi4+0x24>
  a0c004:	19c01326 	beq	r3,r7,a0c054 <udivmodsi4+0x68>
  a0c008:	18c00044 	addi	r3,r3,1
  a0c00c:	28000416 	blt	r5,zero,a0c020 <udivmodsi4+0x34>
  a0c010:	294b883a 	add	r5,r5,r5
  a0c014:	1085883a 	add	r2,r2,r2
  a0c018:	293ffa36 	bltu	r5,r4,a0c004 <udivmodsi4+0x18>
  a0c01c:	10000d26 	beq	r2,zero,a0c054 <udivmodsi4+0x68>
  a0c020:	0007883a 	mov	r3,zero
  a0c024:	21400236 	bltu	r4,r5,a0c030 <udivmodsi4+0x44>
  a0c028:	2149c83a 	sub	r4,r4,r5
  a0c02c:	1886b03a 	or	r3,r3,r2
  a0c030:	1004d07a 	srli	r2,r2,1
  a0c034:	280ad07a 	srli	r5,r5,1
  a0c038:	103ffa1e 	bne	r2,zero,a0c024 <udivmodsi4+0x38>
  a0c03c:	30000226 	beq	r6,zero,a0c048 <udivmodsi4+0x5c>
  a0c040:	2005883a 	mov	r2,r4
  a0c044:	f800283a 	ret
  a0c048:	1809883a 	mov	r4,r3
  a0c04c:	2005883a 	mov	r2,r4
  a0c050:	f800283a 	ret
  a0c054:	0007883a 	mov	r3,zero
  a0c058:	003ff806 	br	a0c03c <udivmodsi4+0x50>
  a0c05c:	00800044 	movi	r2,1
  a0c060:	0007883a 	mov	r3,zero
  a0c064:	003fef06 	br	a0c024 <udivmodsi4+0x38>

00a0c068 <__divsi3>:
  a0c068:	defffe04 	addi	sp,sp,-8
  a0c06c:	dc000015 	stw	r16,0(sp)
  a0c070:	dfc00115 	stw	ra,4(sp)
  a0c074:	0021883a 	mov	r16,zero
  a0c078:	20000c16 	blt	r4,zero,a0c0ac <__divsi3+0x44>
  a0c07c:	000d883a 	mov	r6,zero
  a0c080:	28000e16 	blt	r5,zero,a0c0bc <__divsi3+0x54>
  a0c084:	0a0bfec0 	call	a0bfec <udivmodsi4>
  a0c088:	1007883a 	mov	r3,r2
  a0c08c:	8005003a 	cmpeq	r2,r16,zero
  a0c090:	1000011e 	bne	r2,zero,a0c098 <__divsi3+0x30>
  a0c094:	00c7c83a 	sub	r3,zero,r3
  a0c098:	1805883a 	mov	r2,r3
  a0c09c:	dfc00117 	ldw	ra,4(sp)
  a0c0a0:	dc000017 	ldw	r16,0(sp)
  a0c0a4:	dec00204 	addi	sp,sp,8
  a0c0a8:	f800283a 	ret
  a0c0ac:	0109c83a 	sub	r4,zero,r4
  a0c0b0:	04000044 	movi	r16,1
  a0c0b4:	000d883a 	mov	r6,zero
  a0c0b8:	283ff20e 	bge	r5,zero,a0c084 <__divsi3+0x1c>
  a0c0bc:	014bc83a 	sub	r5,zero,r5
  a0c0c0:	8021003a 	cmpeq	r16,r16,zero
  a0c0c4:	003fef06 	br	a0c084 <__divsi3+0x1c>

00a0c0c8 <__modsi3>:
  a0c0c8:	deffff04 	addi	sp,sp,-4
  a0c0cc:	dfc00015 	stw	ra,0(sp)
  a0c0d0:	01800044 	movi	r6,1
  a0c0d4:	2807883a 	mov	r3,r5
  a0c0d8:	20000416 	blt	r4,zero,a0c0ec <__modsi3+0x24>
  a0c0dc:	28000c16 	blt	r5,zero,a0c110 <__modsi3+0x48>
  a0c0e0:	dfc00017 	ldw	ra,0(sp)
  a0c0e4:	dec00104 	addi	sp,sp,4
  a0c0e8:	0a0bfec1 	jmpi	a0bfec <udivmodsi4>
  a0c0ec:	0109c83a 	sub	r4,zero,r4
  a0c0f0:	28000b16 	blt	r5,zero,a0c120 <__modsi3+0x58>
  a0c0f4:	180b883a 	mov	r5,r3
  a0c0f8:	01800044 	movi	r6,1
  a0c0fc:	0a0bfec0 	call	a0bfec <udivmodsi4>
  a0c100:	0085c83a 	sub	r2,zero,r2
  a0c104:	dfc00017 	ldw	ra,0(sp)
  a0c108:	dec00104 	addi	sp,sp,4
  a0c10c:	f800283a 	ret
  a0c110:	014bc83a 	sub	r5,zero,r5
  a0c114:	dfc00017 	ldw	ra,0(sp)
  a0c118:	dec00104 	addi	sp,sp,4
  a0c11c:	0a0bfec1 	jmpi	a0bfec <udivmodsi4>
  a0c120:	0147c83a 	sub	r3,zero,r5
  a0c124:	003ff306 	br	a0c0f4 <__modsi3+0x2c>

00a0c128 <__udivsi3>:
  a0c128:	000d883a 	mov	r6,zero
  a0c12c:	0a0bfec1 	jmpi	a0bfec <udivmodsi4>

00a0c130 <__umodsi3>:
  a0c130:	01800044 	movi	r6,1
  a0c134:	0a0bfec1 	jmpi	a0bfec <udivmodsi4>

00a0c138 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  a0c138:	defff804 	addi	sp,sp,-32
  a0c13c:	dfc00715 	stw	ra,28(sp)
  a0c140:	df000615 	stw	fp,24(sp)
  a0c144:	df000604 	addi	fp,sp,24
  a0c148:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  a0c14c:	e0bffc17 	ldw	r2,-16(fp)
  a0c150:	1004803a 	cmplt	r2,r2,zero
  a0c154:	1000081e 	bne	r2,zero,a0c178 <close+0x40>
  a0c158:	e0bffc17 	ldw	r2,-16(fp)
  a0c15c:	10800324 	muli	r2,r2,12
  a0c160:	1007883a 	mov	r3,r2
  a0c164:	00802874 	movhi	r2,161
  a0c168:	1085ff04 	addi	r2,r2,6140
  a0c16c:	1887883a 	add	r3,r3,r2
  a0c170:	e0ffff15 	stw	r3,-4(fp)
  a0c174:	00000106 	br	a0c17c <close+0x44>
  a0c178:	e03fff15 	stw	zero,-4(fp)
  a0c17c:	e0bfff17 	ldw	r2,-4(fp)
  a0c180:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  a0c184:	e0bffb17 	ldw	r2,-20(fp)
  a0c188:	1005003a 	cmpeq	r2,r2,zero
  a0c18c:	10001d1e 	bne	r2,zero,a0c204 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  a0c190:	e0bffb17 	ldw	r2,-20(fp)
  a0c194:	10800017 	ldw	r2,0(r2)
  a0c198:	10800417 	ldw	r2,16(r2)
  a0c19c:	1005003a 	cmpeq	r2,r2,zero
  a0c1a0:	1000071e 	bne	r2,zero,a0c1c0 <close+0x88>
  a0c1a4:	e0bffb17 	ldw	r2,-20(fp)
  a0c1a8:	10800017 	ldw	r2,0(r2)
  a0c1ac:	10800417 	ldw	r2,16(r2)
  a0c1b0:	e13ffb17 	ldw	r4,-20(fp)
  a0c1b4:	103ee83a 	callr	r2
  a0c1b8:	e0bffe15 	stw	r2,-8(fp)
  a0c1bc:	00000106 	br	a0c1c4 <close+0x8c>
  a0c1c0:	e03ffe15 	stw	zero,-8(fp)
  a0c1c4:	e0bffe17 	ldw	r2,-8(fp)
  a0c1c8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  a0c1cc:	e13ffc17 	ldw	r4,-16(fp)
  a0c1d0:	0a0c97c0 	call	a0c97c <alt_release_fd>
    if (rval < 0)
  a0c1d4:	e0bffa17 	ldw	r2,-24(fp)
  a0c1d8:	1004403a 	cmpge	r2,r2,zero
  a0c1dc:	1000071e 	bne	r2,zero,a0c1fc <close+0xc4>
    {
      ALT_ERRNO = -rval;
  a0c1e0:	0a0c2340 	call	a0c234 <alt_get_errno>
  a0c1e4:	e0fffa17 	ldw	r3,-24(fp)
  a0c1e8:	00c7c83a 	sub	r3,zero,r3
  a0c1ec:	10c00015 	stw	r3,0(r2)
      return -1;
  a0c1f0:	00bfffc4 	movi	r2,-1
  a0c1f4:	e0bffd15 	stw	r2,-12(fp)
  a0c1f8:	00000806 	br	a0c21c <close+0xe4>
    }
    return 0;
  a0c1fc:	e03ffd15 	stw	zero,-12(fp)
  a0c200:	00000606 	br	a0c21c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  a0c204:	0a0c2340 	call	a0c234 <alt_get_errno>
  a0c208:	1007883a 	mov	r3,r2
  a0c20c:	00801444 	movi	r2,81
  a0c210:	18800015 	stw	r2,0(r3)
    return -1;
  a0c214:	00bfffc4 	movi	r2,-1
  a0c218:	e0bffd15 	stw	r2,-12(fp)
  a0c21c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  a0c220:	e037883a 	mov	sp,fp
  a0c224:	dfc00117 	ldw	ra,4(sp)
  a0c228:	df000017 	ldw	fp,0(sp)
  a0c22c:	dec00204 	addi	sp,sp,8
  a0c230:	f800283a 	ret

00a0c234 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0c234:	defffd04 	addi	sp,sp,-12
  a0c238:	dfc00215 	stw	ra,8(sp)
  a0c23c:	df000115 	stw	fp,4(sp)
  a0c240:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0c244:	00802874 	movhi	r2,161
  a0c248:	108adc04 	addi	r2,r2,11120
  a0c24c:	10800017 	ldw	r2,0(r2)
  a0c250:	1005003a 	cmpeq	r2,r2,zero
  a0c254:	1000061e 	bne	r2,zero,a0c270 <alt_get_errno+0x3c>
  a0c258:	00802874 	movhi	r2,161
  a0c25c:	108adc04 	addi	r2,r2,11120
  a0c260:	10800017 	ldw	r2,0(r2)
  a0c264:	103ee83a 	callr	r2
  a0c268:	e0bfff15 	stw	r2,-4(fp)
  a0c26c:	00000306 	br	a0c27c <alt_get_errno+0x48>
  a0c270:	00802874 	movhi	r2,161
  a0c274:	1091e104 	addi	r2,r2,18308
  a0c278:	e0bfff15 	stw	r2,-4(fp)
  a0c27c:	e0bfff17 	ldw	r2,-4(fp)
}
  a0c280:	e037883a 	mov	sp,fp
  a0c284:	dfc00117 	ldw	ra,4(sp)
  a0c288:	df000017 	ldw	fp,0(sp)
  a0c28c:	dec00204 	addi	sp,sp,8
  a0c290:	f800283a 	ret

00a0c294 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  a0c294:	defffc04 	addi	sp,sp,-16
  a0c298:	df000315 	stw	fp,12(sp)
  a0c29c:	df000304 	addi	fp,sp,12
  a0c2a0:	e13ffd15 	stw	r4,-12(fp)
  a0c2a4:	e17ffe15 	stw	r5,-8(fp)
  a0c2a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  a0c2ac:	e0bfff17 	ldw	r2,-4(fp)
}
  a0c2b0:	e037883a 	mov	sp,fp
  a0c2b4:	df000017 	ldw	fp,0(sp)
  a0c2b8:	dec00104 	addi	sp,sp,4
  a0c2bc:	f800283a 	ret

00a0c2c0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  a0c2c0:	defff904 	addi	sp,sp,-28
  a0c2c4:	dfc00615 	stw	ra,24(sp)
  a0c2c8:	df000515 	stw	fp,20(sp)
  a0c2cc:	df000504 	addi	fp,sp,20
  a0c2d0:	e13ffc15 	stw	r4,-16(fp)
  a0c2d4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  a0c2d8:	e0bffc17 	ldw	r2,-16(fp)
  a0c2dc:	1004803a 	cmplt	r2,r2,zero
  a0c2e0:	1000081e 	bne	r2,zero,a0c304 <fstat+0x44>
  a0c2e4:	e0bffc17 	ldw	r2,-16(fp)
  a0c2e8:	10800324 	muli	r2,r2,12
  a0c2ec:	1007883a 	mov	r3,r2
  a0c2f0:	00802874 	movhi	r2,161
  a0c2f4:	1085ff04 	addi	r2,r2,6140
  a0c2f8:	1887883a 	add	r3,r3,r2
  a0c2fc:	e0ffff15 	stw	r3,-4(fp)
  a0c300:	00000106 	br	a0c308 <fstat+0x48>
  a0c304:	e03fff15 	stw	zero,-4(fp)
  a0c308:	e0bfff17 	ldw	r2,-4(fp)
  a0c30c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  a0c310:	e0bffb17 	ldw	r2,-20(fp)
  a0c314:	1005003a 	cmpeq	r2,r2,zero
  a0c318:	1000121e 	bne	r2,zero,a0c364 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  a0c31c:	e0bffb17 	ldw	r2,-20(fp)
  a0c320:	10800017 	ldw	r2,0(r2)
  a0c324:	10800817 	ldw	r2,32(r2)
  a0c328:	1005003a 	cmpeq	r2,r2,zero
  a0c32c:	1000081e 	bne	r2,zero,a0c350 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  a0c330:	e0bffb17 	ldw	r2,-20(fp)
  a0c334:	10800017 	ldw	r2,0(r2)
  a0c338:	10800817 	ldw	r2,32(r2)
  a0c33c:	e13ffb17 	ldw	r4,-20(fp)
  a0c340:	e17ffd17 	ldw	r5,-12(fp)
  a0c344:	103ee83a 	callr	r2
  a0c348:	e0bffe15 	stw	r2,-8(fp)
  a0c34c:	00000b06 	br	a0c37c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  a0c350:	e0fffd17 	ldw	r3,-12(fp)
  a0c354:	00880004 	movi	r2,8192
  a0c358:	18800115 	stw	r2,4(r3)
      return 0;
  a0c35c:	e03ffe15 	stw	zero,-8(fp)
  a0c360:	00000606 	br	a0c37c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  a0c364:	0a0c3940 	call	a0c394 <alt_get_errno>
  a0c368:	1007883a 	mov	r3,r2
  a0c36c:	00801444 	movi	r2,81
  a0c370:	18800015 	stw	r2,0(r3)
    return -1;
  a0c374:	00bfffc4 	movi	r2,-1
  a0c378:	e0bffe15 	stw	r2,-8(fp)
  a0c37c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  a0c380:	e037883a 	mov	sp,fp
  a0c384:	dfc00117 	ldw	ra,4(sp)
  a0c388:	df000017 	ldw	fp,0(sp)
  a0c38c:	dec00204 	addi	sp,sp,8
  a0c390:	f800283a 	ret

00a0c394 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0c394:	defffd04 	addi	sp,sp,-12
  a0c398:	dfc00215 	stw	ra,8(sp)
  a0c39c:	df000115 	stw	fp,4(sp)
  a0c3a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0c3a4:	00802874 	movhi	r2,161
  a0c3a8:	108adc04 	addi	r2,r2,11120
  a0c3ac:	10800017 	ldw	r2,0(r2)
  a0c3b0:	1005003a 	cmpeq	r2,r2,zero
  a0c3b4:	1000061e 	bne	r2,zero,a0c3d0 <alt_get_errno+0x3c>
  a0c3b8:	00802874 	movhi	r2,161
  a0c3bc:	108adc04 	addi	r2,r2,11120
  a0c3c0:	10800017 	ldw	r2,0(r2)
  a0c3c4:	103ee83a 	callr	r2
  a0c3c8:	e0bfff15 	stw	r2,-4(fp)
  a0c3cc:	00000306 	br	a0c3dc <alt_get_errno+0x48>
  a0c3d0:	00802874 	movhi	r2,161
  a0c3d4:	1091e104 	addi	r2,r2,18308
  a0c3d8:	e0bfff15 	stw	r2,-4(fp)
  a0c3dc:	e0bfff17 	ldw	r2,-4(fp)
}
  a0c3e0:	e037883a 	mov	sp,fp
  a0c3e4:	dfc00117 	ldw	ra,4(sp)
  a0c3e8:	df000017 	ldw	fp,0(sp)
  a0c3ec:	dec00204 	addi	sp,sp,8
  a0c3f0:	f800283a 	ret

00a0c3f4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  a0c3f4:	deffeb04 	addi	sp,sp,-84
  a0c3f8:	dfc01415 	stw	ra,80(sp)
  a0c3fc:	df001315 	stw	fp,76(sp)
  a0c400:	df001304 	addi	fp,sp,76
  a0c404:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  a0c408:	e0bffd17 	ldw	r2,-12(fp)
  a0c40c:	1004803a 	cmplt	r2,r2,zero
  a0c410:	1000081e 	bne	r2,zero,a0c434 <isatty+0x40>
  a0c414:	e0bffd17 	ldw	r2,-12(fp)
  a0c418:	10800324 	muli	r2,r2,12
  a0c41c:	1007883a 	mov	r3,r2
  a0c420:	00802874 	movhi	r2,161
  a0c424:	1085ff04 	addi	r2,r2,6140
  a0c428:	1887883a 	add	r3,r3,r2
  a0c42c:	e0ffff15 	stw	r3,-4(fp)
  a0c430:	00000106 	br	a0c438 <isatty+0x44>
  a0c434:	e03fff15 	stw	zero,-4(fp)
  a0c438:	e0bfff17 	ldw	r2,-4(fp)
  a0c43c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  a0c440:	e0bfed17 	ldw	r2,-76(fp)
  a0c444:	1005003a 	cmpeq	r2,r2,zero
  a0c448:	10000f1e 	bne	r2,zero,a0c488 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  a0c44c:	e0bfed17 	ldw	r2,-76(fp)
  a0c450:	10800017 	ldw	r2,0(r2)
  a0c454:	10800817 	ldw	r2,32(r2)
  a0c458:	1004c03a 	cmpne	r2,r2,zero
  a0c45c:	1000031e 	bne	r2,zero,a0c46c <isatty+0x78>
    {
      return 1;
  a0c460:	00800044 	movi	r2,1
  a0c464:	e0bffe15 	stw	r2,-8(fp)
  a0c468:	00000c06 	br	a0c49c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  a0c46c:	e17fee04 	addi	r5,fp,-72
  a0c470:	e13ffd17 	ldw	r4,-12(fp)
  a0c474:	0a0c2c00 	call	a0c2c0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  a0c478:	e0bfef17 	ldw	r2,-68(fp)
  a0c47c:	10880020 	cmpeqi	r2,r2,8192
  a0c480:	e0bffe15 	stw	r2,-8(fp)
  a0c484:	00000506 	br	a0c49c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  a0c488:	0a0c4b40 	call	a0c4b4 <alt_get_errno>
  a0c48c:	1007883a 	mov	r3,r2
  a0c490:	00801444 	movi	r2,81
  a0c494:	18800015 	stw	r2,0(r3)
    return 0;
  a0c498:	e03ffe15 	stw	zero,-8(fp)
  a0c49c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  a0c4a0:	e037883a 	mov	sp,fp
  a0c4a4:	dfc00117 	ldw	ra,4(sp)
  a0c4a8:	df000017 	ldw	fp,0(sp)
  a0c4ac:	dec00204 	addi	sp,sp,8
  a0c4b0:	f800283a 	ret

00a0c4b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0c4b4:	defffd04 	addi	sp,sp,-12
  a0c4b8:	dfc00215 	stw	ra,8(sp)
  a0c4bc:	df000115 	stw	fp,4(sp)
  a0c4c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0c4c4:	00802874 	movhi	r2,161
  a0c4c8:	108adc04 	addi	r2,r2,11120
  a0c4cc:	10800017 	ldw	r2,0(r2)
  a0c4d0:	1005003a 	cmpeq	r2,r2,zero
  a0c4d4:	1000061e 	bne	r2,zero,a0c4f0 <alt_get_errno+0x3c>
  a0c4d8:	00802874 	movhi	r2,161
  a0c4dc:	108adc04 	addi	r2,r2,11120
  a0c4e0:	10800017 	ldw	r2,0(r2)
  a0c4e4:	103ee83a 	callr	r2
  a0c4e8:	e0bfff15 	stw	r2,-4(fp)
  a0c4ec:	00000306 	br	a0c4fc <alt_get_errno+0x48>
  a0c4f0:	00802874 	movhi	r2,161
  a0c4f4:	1091e104 	addi	r2,r2,18308
  a0c4f8:	e0bfff15 	stw	r2,-4(fp)
  a0c4fc:	e0bfff17 	ldw	r2,-4(fp)
}
  a0c500:	e037883a 	mov	sp,fp
  a0c504:	dfc00117 	ldw	ra,4(sp)
  a0c508:	df000017 	ldw	fp,0(sp)
  a0c50c:	dec00204 	addi	sp,sp,8
  a0c510:	f800283a 	ret

00a0c514 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  a0c514:	defffe04 	addi	sp,sp,-8
  a0c518:	dfc00115 	stw	ra,4(sp)
  a0c51c:	df000015 	stw	fp,0(sp)
  a0c520:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  a0c524:	01002874 	movhi	r4,161
  a0c528:	210ae504 	addi	r4,r4,11156
  a0c52c:	01402874 	movhi	r5,161
  a0c530:	2943f004 	addi	r5,r5,4032
  a0c534:	01802874 	movhi	r6,161
  a0c538:	318ae504 	addi	r6,r6,11156
  a0c53c:	0a0c5940 	call	a0c594 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  a0c540:	01002834 	movhi	r4,160
  a0c544:	21000804 	addi	r4,r4,32
  a0c548:	01402834 	movhi	r5,160
  a0c54c:	29400804 	addi	r5,r5,32
  a0c550:	01802834 	movhi	r6,160
  a0c554:	31806d04 	addi	r6,r6,436
  a0c558:	0a0c5940 	call	a0c594 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  a0c55c:	01002874 	movhi	r4,161
  a0c560:	2102ba04 	addi	r4,r4,2792
  a0c564:	01402874 	movhi	r5,161
  a0c568:	2942ba04 	addi	r5,r5,2792
  a0c56c:	01802874 	movhi	r6,161
  a0c570:	3183f004 	addi	r6,r6,4032
  a0c574:	0a0c5940 	call	a0c594 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  a0c578:	0a0f8940 	call	a0f894 <alt_dcache_flush_all>
  alt_icache_flush_all();
  a0c57c:	0a0fb480 	call	a0fb48 <alt_icache_flush_all>
}
  a0c580:	e037883a 	mov	sp,fp
  a0c584:	dfc00117 	ldw	ra,4(sp)
  a0c588:	df000017 	ldw	fp,0(sp)
  a0c58c:	dec00204 	addi	sp,sp,8
  a0c590:	f800283a 	ret

00a0c594 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  a0c594:	defffc04 	addi	sp,sp,-16
  a0c598:	df000315 	stw	fp,12(sp)
  a0c59c:	df000304 	addi	fp,sp,12
  a0c5a0:	e13ffd15 	stw	r4,-12(fp)
  a0c5a4:	e17ffe15 	stw	r5,-8(fp)
  a0c5a8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  a0c5ac:	e0fffe17 	ldw	r3,-8(fp)
  a0c5b0:	e0bffd17 	ldw	r2,-12(fp)
  a0c5b4:	18800e26 	beq	r3,r2,a0c5f0 <alt_load_section+0x5c>
  {
    while( to != end )
  a0c5b8:	00000a06 	br	a0c5e4 <alt_load_section+0x50>
    {
      *to++ = *from++;
  a0c5bc:	e0bffd17 	ldw	r2,-12(fp)
  a0c5c0:	10c00017 	ldw	r3,0(r2)
  a0c5c4:	e0bffe17 	ldw	r2,-8(fp)
  a0c5c8:	10c00015 	stw	r3,0(r2)
  a0c5cc:	e0bffe17 	ldw	r2,-8(fp)
  a0c5d0:	10800104 	addi	r2,r2,4
  a0c5d4:	e0bffe15 	stw	r2,-8(fp)
  a0c5d8:	e0bffd17 	ldw	r2,-12(fp)
  a0c5dc:	10800104 	addi	r2,r2,4
  a0c5e0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  a0c5e4:	e0fffe17 	ldw	r3,-8(fp)
  a0c5e8:	e0bfff17 	ldw	r2,-4(fp)
  a0c5ec:	18bff31e 	bne	r3,r2,a0c5bc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  a0c5f0:	e037883a 	mov	sp,fp
  a0c5f4:	df000017 	ldw	fp,0(sp)
  a0c5f8:	dec00104 	addi	sp,sp,4
  a0c5fc:	f800283a 	ret

00a0c600 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  a0c600:	defff804 	addi	sp,sp,-32
  a0c604:	dfc00715 	stw	ra,28(sp)
  a0c608:	df000615 	stw	fp,24(sp)
  a0c60c:	df000604 	addi	fp,sp,24
  a0c610:	e13ffc15 	stw	r4,-16(fp)
  a0c614:	e17ffd15 	stw	r5,-12(fp)
  a0c618:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  a0c61c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  a0c620:	e0bffc17 	ldw	r2,-16(fp)
  a0c624:	1004803a 	cmplt	r2,r2,zero
  a0c628:	1000081e 	bne	r2,zero,a0c64c <lseek+0x4c>
  a0c62c:	e0bffc17 	ldw	r2,-16(fp)
  a0c630:	10800324 	muli	r2,r2,12
  a0c634:	1007883a 	mov	r3,r2
  a0c638:	00802874 	movhi	r2,161
  a0c63c:	1085ff04 	addi	r2,r2,6140
  a0c640:	1887883a 	add	r3,r3,r2
  a0c644:	e0ffff15 	stw	r3,-4(fp)
  a0c648:	00000106 	br	a0c650 <lseek+0x50>
  a0c64c:	e03fff15 	stw	zero,-4(fp)
  a0c650:	e0bfff17 	ldw	r2,-4(fp)
  a0c654:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  a0c658:	e0bffb17 	ldw	r2,-20(fp)
  a0c65c:	1005003a 	cmpeq	r2,r2,zero
  a0c660:	1000111e 	bne	r2,zero,a0c6a8 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  a0c664:	e0bffb17 	ldw	r2,-20(fp)
  a0c668:	10800017 	ldw	r2,0(r2)
  a0c66c:	10800717 	ldw	r2,28(r2)
  a0c670:	1005003a 	cmpeq	r2,r2,zero
  a0c674:	1000091e 	bne	r2,zero,a0c69c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  a0c678:	e0bffb17 	ldw	r2,-20(fp)
  a0c67c:	10800017 	ldw	r2,0(r2)
  a0c680:	10800717 	ldw	r2,28(r2)
  a0c684:	e13ffb17 	ldw	r4,-20(fp)
  a0c688:	e17ffd17 	ldw	r5,-12(fp)
  a0c68c:	e1bffe17 	ldw	r6,-8(fp)
  a0c690:	103ee83a 	callr	r2
  a0c694:	e0bffa15 	stw	r2,-24(fp)
  a0c698:	00000506 	br	a0c6b0 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  a0c69c:	00bfde84 	movi	r2,-134
  a0c6a0:	e0bffa15 	stw	r2,-24(fp)
  a0c6a4:	00000206 	br	a0c6b0 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  a0c6a8:	00bfebc4 	movi	r2,-81
  a0c6ac:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  a0c6b0:	e0bffa17 	ldw	r2,-24(fp)
  a0c6b4:	1004403a 	cmpge	r2,r2,zero
  a0c6b8:	1000071e 	bne	r2,zero,a0c6d8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  a0c6bc:	0a0c6f00 	call	a0c6f0 <alt_get_errno>
  a0c6c0:	1007883a 	mov	r3,r2
  a0c6c4:	e0bffa17 	ldw	r2,-24(fp)
  a0c6c8:	0085c83a 	sub	r2,zero,r2
  a0c6cc:	18800015 	stw	r2,0(r3)
    rc = -1;
  a0c6d0:	00bfffc4 	movi	r2,-1
  a0c6d4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  a0c6d8:	e0bffa17 	ldw	r2,-24(fp)
}
  a0c6dc:	e037883a 	mov	sp,fp
  a0c6e0:	dfc00117 	ldw	ra,4(sp)
  a0c6e4:	df000017 	ldw	fp,0(sp)
  a0c6e8:	dec00204 	addi	sp,sp,8
  a0c6ec:	f800283a 	ret

00a0c6f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0c6f0:	defffd04 	addi	sp,sp,-12
  a0c6f4:	dfc00215 	stw	ra,8(sp)
  a0c6f8:	df000115 	stw	fp,4(sp)
  a0c6fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0c700:	00802874 	movhi	r2,161
  a0c704:	108adc04 	addi	r2,r2,11120
  a0c708:	10800017 	ldw	r2,0(r2)
  a0c70c:	1005003a 	cmpeq	r2,r2,zero
  a0c710:	1000061e 	bne	r2,zero,a0c72c <alt_get_errno+0x3c>
  a0c714:	00802874 	movhi	r2,161
  a0c718:	108adc04 	addi	r2,r2,11120
  a0c71c:	10800017 	ldw	r2,0(r2)
  a0c720:	103ee83a 	callr	r2
  a0c724:	e0bfff15 	stw	r2,-4(fp)
  a0c728:	00000306 	br	a0c738 <alt_get_errno+0x48>
  a0c72c:	00802874 	movhi	r2,161
  a0c730:	1091e104 	addi	r2,r2,18308
  a0c734:	e0bfff15 	stw	r2,-4(fp)
  a0c738:	e0bfff17 	ldw	r2,-4(fp)
}
  a0c73c:	e037883a 	mov	sp,fp
  a0c740:	dfc00117 	ldw	ra,4(sp)
  a0c744:	df000017 	ldw	fp,0(sp)
  a0c748:	dec00204 	addi	sp,sp,8
  a0c74c:	f800283a 	ret

00a0c750 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  a0c750:	defffd04 	addi	sp,sp,-12
  a0c754:	dfc00215 	stw	ra,8(sp)
  a0c758:	df000115 	stw	fp,4(sp)
  a0c75c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  a0c760:	0009883a 	mov	r4,zero
  a0c764:	0a0cc180 	call	a0cc18 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  a0c768:	0a0cc4c0 	call	a0cc4c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  a0c76c:	01002874 	movhi	r4,161
  a0c770:	21039e04 	addi	r4,r4,3704
  a0c774:	01402874 	movhi	r5,161
  a0c778:	29439e04 	addi	r5,r5,3704
  a0c77c:	01802874 	movhi	r6,161
  a0c780:	31839e04 	addi	r6,r6,3704
  a0c784:	0a0ff080 	call	a0ff08 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  a0c788:	0a0f9ec0 	call	a0f9ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  a0c78c:	01002874 	movhi	r4,161
  a0c790:	213e9404 	addi	r4,r4,-1456
  a0c794:	0a106700 	call	a10670 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  a0c798:	d1271a17 	ldw	r4,-25496(gp)
  a0c79c:	d1671b17 	ldw	r5,-25492(gp)
  a0c7a0:	d1a71c17 	ldw	r6,-25488(gp)
  a0c7a4:	0a007780 	call	a00778 <main>
  a0c7a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  a0c7ac:	01000044 	movi	r4,1
  a0c7b0:	0a0c1380 	call	a0c138 <close>
  exit (result);
  a0c7b4:	e13fff17 	ldw	r4,-4(fp)
  a0c7b8:	0a106840 	call	a10684 <exit>

00a0c7bc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  a0c7bc:	defffe04 	addi	sp,sp,-8
  a0c7c0:	df000115 	stw	fp,4(sp)
  a0c7c4:	df000104 	addi	fp,sp,4
  a0c7c8:	e13fff15 	stw	r4,-4(fp)
}
  a0c7cc:	e037883a 	mov	sp,fp
  a0c7d0:	df000017 	ldw	fp,0(sp)
  a0c7d4:	dec00104 	addi	sp,sp,4
  a0c7d8:	f800283a 	ret

00a0c7dc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  a0c7dc:	defffe04 	addi	sp,sp,-8
  a0c7e0:	df000115 	stw	fp,4(sp)
  a0c7e4:	df000104 	addi	fp,sp,4
  a0c7e8:	e13fff15 	stw	r4,-4(fp)
}
  a0c7ec:	e037883a 	mov	sp,fp
  a0c7f0:	df000017 	ldw	fp,0(sp)
  a0c7f4:	dec00104 	addi	sp,sp,4
  a0c7f8:	f800283a 	ret

00a0c7fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  a0c7fc:	defff704 	addi	sp,sp,-36
  a0c800:	dfc00815 	stw	ra,32(sp)
  a0c804:	df000715 	stw	fp,28(sp)
  a0c808:	df000704 	addi	fp,sp,28
  a0c80c:	e13ffb15 	stw	r4,-20(fp)
  a0c810:	e17ffc15 	stw	r5,-16(fp)
  a0c814:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  a0c818:	e0bffb17 	ldw	r2,-20(fp)
  a0c81c:	1004803a 	cmplt	r2,r2,zero
  a0c820:	1000081e 	bne	r2,zero,a0c844 <read+0x48>
  a0c824:	e0bffb17 	ldw	r2,-20(fp)
  a0c828:	10800324 	muli	r2,r2,12
  a0c82c:	1007883a 	mov	r3,r2
  a0c830:	00802874 	movhi	r2,161
  a0c834:	1085ff04 	addi	r2,r2,6140
  a0c838:	1887883a 	add	r3,r3,r2
  a0c83c:	e0ffff15 	stw	r3,-4(fp)
  a0c840:	00000106 	br	a0c848 <read+0x4c>
  a0c844:	e03fff15 	stw	zero,-4(fp)
  a0c848:	e0bfff17 	ldw	r2,-4(fp)
  a0c84c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  a0c850:	e0bffa17 	ldw	r2,-24(fp)
  a0c854:	1005003a 	cmpeq	r2,r2,zero
  a0c858:	1000241e 	bne	r2,zero,a0c8ec <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  a0c85c:	e0bffa17 	ldw	r2,-24(fp)
  a0c860:	10800217 	ldw	r2,8(r2)
  a0c864:	108000cc 	andi	r2,r2,3
  a0c868:	10800060 	cmpeqi	r2,r2,1
  a0c86c:	10001a1e 	bne	r2,zero,a0c8d8 <read+0xdc>
  a0c870:	e0bffa17 	ldw	r2,-24(fp)
  a0c874:	10800017 	ldw	r2,0(r2)
  a0c878:	10800517 	ldw	r2,20(r2)
  a0c87c:	1005003a 	cmpeq	r2,r2,zero
  a0c880:	1000151e 	bne	r2,zero,a0c8d8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  a0c884:	e0bffa17 	ldw	r2,-24(fp)
  a0c888:	10800017 	ldw	r2,0(r2)
  a0c88c:	10800517 	ldw	r2,20(r2)
  a0c890:	e17ffc17 	ldw	r5,-16(fp)
  a0c894:	e1bffd17 	ldw	r6,-12(fp)
  a0c898:	e13ffa17 	ldw	r4,-24(fp)
  a0c89c:	103ee83a 	callr	r2
  a0c8a0:	e0bff915 	stw	r2,-28(fp)
  a0c8a4:	e0bff917 	ldw	r2,-28(fp)
  a0c8a8:	1004403a 	cmpge	r2,r2,zero
  a0c8ac:	1000071e 	bne	r2,zero,a0c8cc <read+0xd0>
        {
          ALT_ERRNO = -rval;
  a0c8b0:	0a0c91c0 	call	a0c91c <alt_get_errno>
  a0c8b4:	e0fff917 	ldw	r3,-28(fp)
  a0c8b8:	00c7c83a 	sub	r3,zero,r3
  a0c8bc:	10c00015 	stw	r3,0(r2)
          return -1;
  a0c8c0:	00bfffc4 	movi	r2,-1
  a0c8c4:	e0bffe15 	stw	r2,-8(fp)
  a0c8c8:	00000e06 	br	a0c904 <read+0x108>
        }
        return rval;
  a0c8cc:	e0bff917 	ldw	r2,-28(fp)
  a0c8d0:	e0bffe15 	stw	r2,-8(fp)
  a0c8d4:	00000b06 	br	a0c904 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  a0c8d8:	0a0c91c0 	call	a0c91c <alt_get_errno>
  a0c8dc:	1007883a 	mov	r3,r2
  a0c8e0:	00800344 	movi	r2,13
  a0c8e4:	18800015 	stw	r2,0(r3)
  a0c8e8:	00000406 	br	a0c8fc <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  a0c8ec:	0a0c91c0 	call	a0c91c <alt_get_errno>
  a0c8f0:	1007883a 	mov	r3,r2
  a0c8f4:	00801444 	movi	r2,81
  a0c8f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  a0c8fc:	00bfffc4 	movi	r2,-1
  a0c900:	e0bffe15 	stw	r2,-8(fp)
  a0c904:	e0bffe17 	ldw	r2,-8(fp)
}
  a0c908:	e037883a 	mov	sp,fp
  a0c90c:	dfc00117 	ldw	ra,4(sp)
  a0c910:	df000017 	ldw	fp,0(sp)
  a0c914:	dec00204 	addi	sp,sp,8
  a0c918:	f800283a 	ret

00a0c91c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0c91c:	defffd04 	addi	sp,sp,-12
  a0c920:	dfc00215 	stw	ra,8(sp)
  a0c924:	df000115 	stw	fp,4(sp)
  a0c928:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0c92c:	00802874 	movhi	r2,161
  a0c930:	108adc04 	addi	r2,r2,11120
  a0c934:	10800017 	ldw	r2,0(r2)
  a0c938:	1005003a 	cmpeq	r2,r2,zero
  a0c93c:	1000061e 	bne	r2,zero,a0c958 <alt_get_errno+0x3c>
  a0c940:	00802874 	movhi	r2,161
  a0c944:	108adc04 	addi	r2,r2,11120
  a0c948:	10800017 	ldw	r2,0(r2)
  a0c94c:	103ee83a 	callr	r2
  a0c950:	e0bfff15 	stw	r2,-4(fp)
  a0c954:	00000306 	br	a0c964 <alt_get_errno+0x48>
  a0c958:	00802874 	movhi	r2,161
  a0c95c:	1091e104 	addi	r2,r2,18308
  a0c960:	e0bfff15 	stw	r2,-4(fp)
  a0c964:	e0bfff17 	ldw	r2,-4(fp)
}
  a0c968:	e037883a 	mov	sp,fp
  a0c96c:	dfc00117 	ldw	ra,4(sp)
  a0c970:	df000017 	ldw	fp,0(sp)
  a0c974:	dec00204 	addi	sp,sp,8
  a0c978:	f800283a 	ret

00a0c97c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  a0c97c:	defffe04 	addi	sp,sp,-8
  a0c980:	df000115 	stw	fp,4(sp)
  a0c984:	df000104 	addi	fp,sp,4
  a0c988:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  a0c98c:	e0bfff17 	ldw	r2,-4(fp)
  a0c990:	108000d0 	cmplti	r2,r2,3
  a0c994:	10000d1e 	bne	r2,zero,a0c9cc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  a0c998:	e0bfff17 	ldw	r2,-4(fp)
  a0c99c:	00c02874 	movhi	r3,161
  a0c9a0:	18c5ff04 	addi	r3,r3,6140
  a0c9a4:	10800324 	muli	r2,r2,12
  a0c9a8:	10c5883a 	add	r2,r2,r3
  a0c9ac:	10800204 	addi	r2,r2,8
  a0c9b0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  a0c9b4:	e0bfff17 	ldw	r2,-4(fp)
  a0c9b8:	00c02874 	movhi	r3,161
  a0c9bc:	18c5ff04 	addi	r3,r3,6140
  a0c9c0:	10800324 	muli	r2,r2,12
  a0c9c4:	10c5883a 	add	r2,r2,r3
  a0c9c8:	10000015 	stw	zero,0(r2)
  }
}
  a0c9cc:	e037883a 	mov	sp,fp
  a0c9d0:	df000017 	ldw	fp,0(sp)
  a0c9d4:	dec00104 	addi	sp,sp,4
  a0c9d8:	f800283a 	ret

00a0c9dc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  a0c9dc:	defff804 	addi	sp,sp,-32
  a0c9e0:	df000715 	stw	fp,28(sp)
  a0c9e4:	df000704 	addi	fp,sp,28
  a0c9e8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  a0c9ec:	0005303a 	rdctl	r2,status
  a0c9f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  a0c9f4:	e0fffb17 	ldw	r3,-20(fp)
  a0c9f8:	00bfff84 	movi	r2,-2
  a0c9fc:	1884703a 	and	r2,r3,r2
  a0ca00:	1001703a 	wrctl	status,r2
  
  return context;
  a0ca04:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  a0ca08:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  a0ca0c:	d0a01517 	ldw	r2,-32684(gp)
  a0ca10:	10c000c4 	addi	r3,r2,3
  a0ca14:	00bfff04 	movi	r2,-4
  a0ca18:	1884703a 	and	r2,r3,r2
  a0ca1c:	d0a01515 	stw	r2,-32684(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  a0ca20:	d0e01517 	ldw	r3,-32684(gp)
  a0ca24:	e0bffe17 	ldw	r2,-8(fp)
  a0ca28:	1887883a 	add	r3,r3,r2
  a0ca2c:	00803034 	movhi	r2,192
  a0ca30:	10800004 	addi	r2,r2,0
  a0ca34:	10c0072e 	bgeu	r2,r3,a0ca54 <sbrk+0x78>
  a0ca38:	e0bffd17 	ldw	r2,-12(fp)
  a0ca3c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  a0ca40:	e0bffa17 	ldw	r2,-24(fp)
  a0ca44:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  a0ca48:	00bfffc4 	movi	r2,-1
  a0ca4c:	e0bfff15 	stw	r2,-4(fp)
  a0ca50:	00000c06 	br	a0ca84 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  a0ca54:	d0a01517 	ldw	r2,-32684(gp)
  a0ca58:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  a0ca5c:	d0e01517 	ldw	r3,-32684(gp)
  a0ca60:	e0bffe17 	ldw	r2,-8(fp)
  a0ca64:	1885883a 	add	r2,r3,r2
  a0ca68:	d0a01515 	stw	r2,-32684(gp)
  a0ca6c:	e0bffd17 	ldw	r2,-12(fp)
  a0ca70:	e0bff915 	stw	r2,-28(fp)
  a0ca74:	e0bff917 	ldw	r2,-28(fp)
  a0ca78:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  a0ca7c:	e0bffc17 	ldw	r2,-16(fp)
  a0ca80:	e0bfff15 	stw	r2,-4(fp)
  a0ca84:	e0bfff17 	ldw	r2,-4(fp)
} 
  a0ca88:	e037883a 	mov	sp,fp
  a0ca8c:	df000017 	ldw	fp,0(sp)
  a0ca90:	dec00104 	addi	sp,sp,4
  a0ca94:	f800283a 	ret

00a0ca98 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  a0ca98:	defff704 	addi	sp,sp,-36
  a0ca9c:	dfc00815 	stw	ra,32(sp)
  a0caa0:	df000715 	stw	fp,28(sp)
  a0caa4:	df000704 	addi	fp,sp,28
  a0caa8:	e13ffb15 	stw	r4,-20(fp)
  a0caac:	e17ffc15 	stw	r5,-16(fp)
  a0cab0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  a0cab4:	e0bffb17 	ldw	r2,-20(fp)
  a0cab8:	1004803a 	cmplt	r2,r2,zero
  a0cabc:	1000081e 	bne	r2,zero,a0cae0 <write+0x48>
  a0cac0:	e0bffb17 	ldw	r2,-20(fp)
  a0cac4:	10800324 	muli	r2,r2,12
  a0cac8:	1007883a 	mov	r3,r2
  a0cacc:	00802874 	movhi	r2,161
  a0cad0:	1085ff04 	addi	r2,r2,6140
  a0cad4:	1887883a 	add	r3,r3,r2
  a0cad8:	e0ffff15 	stw	r3,-4(fp)
  a0cadc:	00000106 	br	a0cae4 <write+0x4c>
  a0cae0:	e03fff15 	stw	zero,-4(fp)
  a0cae4:	e0bfff17 	ldw	r2,-4(fp)
  a0cae8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  a0caec:	e0bffa17 	ldw	r2,-24(fp)
  a0caf0:	1005003a 	cmpeq	r2,r2,zero
  a0caf4:	1000241e 	bne	r2,zero,a0cb88 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  a0caf8:	e0bffa17 	ldw	r2,-24(fp)
  a0cafc:	10800217 	ldw	r2,8(r2)
  a0cb00:	108000cc 	andi	r2,r2,3
  a0cb04:	1005003a 	cmpeq	r2,r2,zero
  a0cb08:	10001a1e 	bne	r2,zero,a0cb74 <write+0xdc>
  a0cb0c:	e0bffa17 	ldw	r2,-24(fp)
  a0cb10:	10800017 	ldw	r2,0(r2)
  a0cb14:	10800617 	ldw	r2,24(r2)
  a0cb18:	1005003a 	cmpeq	r2,r2,zero
  a0cb1c:	1000151e 	bne	r2,zero,a0cb74 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  a0cb20:	e0bffa17 	ldw	r2,-24(fp)
  a0cb24:	10800017 	ldw	r2,0(r2)
  a0cb28:	10800617 	ldw	r2,24(r2)
  a0cb2c:	e17ffc17 	ldw	r5,-16(fp)
  a0cb30:	e1bffd17 	ldw	r6,-12(fp)
  a0cb34:	e13ffa17 	ldw	r4,-24(fp)
  a0cb38:	103ee83a 	callr	r2
  a0cb3c:	e0bff915 	stw	r2,-28(fp)
  a0cb40:	e0bff917 	ldw	r2,-28(fp)
  a0cb44:	1004403a 	cmpge	r2,r2,zero
  a0cb48:	1000071e 	bne	r2,zero,a0cb68 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  a0cb4c:	0a0cbb80 	call	a0cbb8 <alt_get_errno>
  a0cb50:	e0fff917 	ldw	r3,-28(fp)
  a0cb54:	00c7c83a 	sub	r3,zero,r3
  a0cb58:	10c00015 	stw	r3,0(r2)
        return -1;
  a0cb5c:	00bfffc4 	movi	r2,-1
  a0cb60:	e0bffe15 	stw	r2,-8(fp)
  a0cb64:	00000e06 	br	a0cba0 <write+0x108>
      }
      return rval;
  a0cb68:	e0bff917 	ldw	r2,-28(fp)
  a0cb6c:	e0bffe15 	stw	r2,-8(fp)
  a0cb70:	00000b06 	br	a0cba0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  a0cb74:	0a0cbb80 	call	a0cbb8 <alt_get_errno>
  a0cb78:	1007883a 	mov	r3,r2
  a0cb7c:	00800344 	movi	r2,13
  a0cb80:	18800015 	stw	r2,0(r3)
  a0cb84:	00000406 	br	a0cb98 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  a0cb88:	0a0cbb80 	call	a0cbb8 <alt_get_errno>
  a0cb8c:	1007883a 	mov	r3,r2
  a0cb90:	00801444 	movi	r2,81
  a0cb94:	18800015 	stw	r2,0(r3)
  }
  return -1;
  a0cb98:	00bfffc4 	movi	r2,-1
  a0cb9c:	e0bffe15 	stw	r2,-8(fp)
  a0cba0:	e0bffe17 	ldw	r2,-8(fp)
}
  a0cba4:	e037883a 	mov	sp,fp
  a0cba8:	dfc00117 	ldw	ra,4(sp)
  a0cbac:	df000017 	ldw	fp,0(sp)
  a0cbb0:	dec00204 	addi	sp,sp,8
  a0cbb4:	f800283a 	ret

00a0cbb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0cbb8:	defffd04 	addi	sp,sp,-12
  a0cbbc:	dfc00215 	stw	ra,8(sp)
  a0cbc0:	df000115 	stw	fp,4(sp)
  a0cbc4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0cbc8:	00802874 	movhi	r2,161
  a0cbcc:	108adc04 	addi	r2,r2,11120
  a0cbd0:	10800017 	ldw	r2,0(r2)
  a0cbd4:	1005003a 	cmpeq	r2,r2,zero
  a0cbd8:	1000061e 	bne	r2,zero,a0cbf4 <alt_get_errno+0x3c>
  a0cbdc:	00802874 	movhi	r2,161
  a0cbe0:	108adc04 	addi	r2,r2,11120
  a0cbe4:	10800017 	ldw	r2,0(r2)
  a0cbe8:	103ee83a 	callr	r2
  a0cbec:	e0bfff15 	stw	r2,-4(fp)
  a0cbf0:	00000306 	br	a0cc00 <alt_get_errno+0x48>
  a0cbf4:	00802874 	movhi	r2,161
  a0cbf8:	1091e104 	addi	r2,r2,18308
  a0cbfc:	e0bfff15 	stw	r2,-4(fp)
  a0cc00:	e0bfff17 	ldw	r2,-4(fp)
}
  a0cc04:	e037883a 	mov	sp,fp
  a0cc08:	dfc00117 	ldw	ra,4(sp)
  a0cc0c:	df000017 	ldw	fp,0(sp)
  a0cc10:	dec00204 	addi	sp,sp,8
  a0cc14:	f800283a 	ret

00a0cc18 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  a0cc18:	defffd04 	addi	sp,sp,-12
  a0cc1c:	dfc00215 	stw	ra,8(sp)
  a0cc20:	df000115 	stw	fp,4(sp)
  a0cc24:	df000104 	addi	fp,sp,4
  a0cc28:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_1, cpu_1);
  a0cc2c:	0a103e80 	call	a103e8 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  a0cc30:	00800044 	movi	r2,1
  a0cc34:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  a0cc38:	e037883a 	mov	sp,fp
  a0cc3c:	dfc00117 	ldw	ra,4(sp)
  a0cc40:	df000017 	ldw	fp,0(sp)
  a0cc44:	dec00204 	addi	sp,sp,8
  a0cc48:	f800283a 	ret

00a0cc4c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  a0cc4c:	defffd04 	addi	sp,sp,-12
  a0cc50:	dfc00215 	stw	ra,8(sp)
  a0cc54:	df000115 	stw	fp,4(sp)
  a0cc58:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
  a0cc5c:	01002874 	movhi	r4,161
  a0cc60:	21066904 	addi	r4,r4,6564
  a0cc64:	000b883a 	mov	r5,zero
  a0cc68:	01800044 	movi	r6,1
  a0cc6c:	0a0d0440 	call	a0d044 <altera_avalon_jtag_uart_init>
  a0cc70:	01002874 	movhi	r4,161
  a0cc74:	21065f04 	addi	r4,r4,6524
  a0cc78:	0a0cec40 	call	a0cec4 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
  a0cc7c:	01002874 	movhi	r4,161
  a0cc80:	210a7704 	addi	r4,r4,10716
  a0cc84:	0a0d9a80 	call	a0d9a8 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
  a0cc88:	01002874 	movhi	r4,161
  a0cc8c:	210a8604 	addi	r4,r4,10776
  a0cc90:	0a0d9a80 	call	a0d9a8 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
  a0cc94:	01002874 	movhi	r4,161
  a0cc98:	210a9504 	addi	r4,r4,10836
  a0cc9c:	0a0d9a80 	call	a0d9a8 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
  a0cca0:	01002874 	movhi	r4,161
  a0cca4:	210aa404 	addi	r4,r4,10896
  a0cca8:	0a0d9a80 	call	a0d9a8 <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
  a0ccac:	0007883a 	mov	r3,zero
  a0ccb0:	00800044 	movi	r2,1
  a0ccb4:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  a0ccb8:	00802874 	movhi	r2,161
  a0ccbc:	108ab304 	addi	r2,r2,10956
  a0ccc0:	10800a17 	ldw	r2,40(r2)
  a0ccc4:	10800017 	ldw	r2,0(r2)
  a0ccc8:	1007883a 	mov	r3,r2
  a0cccc:	00802874 	movhi	r2,161
  a0ccd0:	108ab304 	addi	r2,r2,10956
  a0ccd4:	10c00b15 	stw	r3,44(r2)
  a0ccd8:	00802874 	movhi	r2,161
  a0ccdc:	108ab304 	addi	r2,r2,10956
  a0cce0:	10800a17 	ldw	r2,40(r2)
  a0cce4:	10800104 	addi	r2,r2,4
  a0cce8:	10800017 	ldw	r2,0(r2)
  a0ccec:	1007883a 	mov	r3,r2
  a0ccf0:	00802874 	movhi	r2,161
  a0ccf4:	108ab304 	addi	r2,r2,10956
  a0ccf8:	10c00c15 	stw	r3,48(r2)
  a0ccfc:	00802874 	movhi	r2,161
  a0cd00:	108ab304 	addi	r2,r2,10956
  a0cd04:	10800a17 	ldw	r2,40(r2)
  a0cd08:	10800204 	addi	r2,r2,8
  a0cd0c:	10800017 	ldw	r2,0(r2)
  a0cd10:	10ffffcc 	andi	r3,r2,65535
  a0cd14:	00802874 	movhi	r2,161
  a0cd18:	108ab304 	addi	r2,r2,10956
  a0cd1c:	10c00f15 	stw	r3,60(r2)
  a0cd20:	00802874 	movhi	r2,161
  a0cd24:	108ab304 	addi	r2,r2,10956
  a0cd28:	10800a17 	ldw	r2,40(r2)
  a0cd2c:	10800204 	addi	r2,r2,8
  a0cd30:	10800017 	ldw	r2,0(r2)
  a0cd34:	1005d43a 	srai	r2,r2,16
  a0cd38:	10ffffcc 	andi	r3,r2,65535
  a0cd3c:	00802874 	movhi	r2,161
  a0cd40:	108ab304 	addi	r2,r2,10956
  a0cd44:	10c01015 	stw	r3,64(r2)
  a0cd48:	00802874 	movhi	r2,161
  a0cd4c:	108ab304 	addi	r2,r2,10956
  a0cd50:	10800a17 	ldw	r2,40(r2)
  a0cd54:	10800304 	addi	r2,r2,12
  a0cd58:	10800017 	ldw	r2,0(r2)
  a0cd5c:	1005d07a 	srai	r2,r2,1
  a0cd60:	10c0004c 	andi	r3,r2,1
  a0cd64:	00802874 	movhi	r2,161
  a0cd68:	108ab304 	addi	r2,r2,10956
  a0cd6c:	10c00d15 	stw	r3,52(r2)
  a0cd70:	00802874 	movhi	r2,161
  a0cd74:	108ab304 	addi	r2,r2,10956
  a0cd78:	10800a17 	ldw	r2,40(r2)
  a0cd7c:	10800304 	addi	r2,r2,12
  a0cd80:	10800017 	ldw	r2,0(r2)
  a0cd84:	1005d13a 	srai	r2,r2,4
  a0cd88:	10c003cc 	andi	r3,r2,15
  a0cd8c:	00802874 	movhi	r2,161
  a0cd90:	108ab304 	addi	r2,r2,10956
  a0cd94:	10c00e15 	stw	r3,56(r2)
  a0cd98:	00802874 	movhi	r2,161
  a0cd9c:	108ab304 	addi	r2,r2,10956
  a0cda0:	10800a17 	ldw	r2,40(r2)
  a0cda4:	10800304 	addi	r2,r2,12
  a0cda8:	10800017 	ldw	r2,0(r2)
  a0cdac:	1005d43a 	srai	r2,r2,16
  a0cdb0:	1007883a 	mov	r3,r2
  a0cdb4:	00bfffc4 	movi	r2,-1
  a0cdb8:	1884703a 	and	r2,r3,r2
  a0cdbc:	e0bfff45 	stb	r2,-3(fp)
  a0cdc0:	00802874 	movhi	r2,161
  a0cdc4:	108ab304 	addi	r2,r2,10956
  a0cdc8:	10800a17 	ldw	r2,40(r2)
  a0cdcc:	10800304 	addi	r2,r2,12
  a0cdd0:	10800017 	ldw	r2,0(r2)
  a0cdd4:	1005d63a 	srai	r2,r2,24
  a0cdd8:	1007883a 	mov	r3,r2
  a0cddc:	00bfffc4 	movi	r2,-1
  a0cde0:	1884703a 	and	r2,r3,r2
  a0cde4:	e0bfff05 	stb	r2,-4(fp)
  a0cde8:	00802874 	movhi	r2,161
  a0cdec:	108ab304 	addi	r2,r2,10956
  a0cdf0:	10800e17 	ldw	r2,56(r2)
  a0cdf4:	10800058 	cmpnei	r2,r2,1
  a0cdf8:	1000041e 	bne	r2,zero,a0ce0c <alt_sys_init+0x1c0>
  a0cdfc:	00802874 	movhi	r2,161
  a0ce00:	108ab304 	addi	r2,r2,10956
  a0ce04:	10001115 	stw	zero,68(r2)
  a0ce08:	00000e06 	br	a0ce44 <alt_sys_init+0x1f8>
  a0ce0c:	00802874 	movhi	r2,161
  a0ce10:	108ab304 	addi	r2,r2,10956
  a0ce14:	10800e17 	ldw	r2,56(r2)
  a0ce18:	10800098 	cmpnei	r2,r2,2
  a0ce1c:	1000051e 	bne	r2,zero,a0ce34 <alt_sys_init+0x1e8>
  a0ce20:	00c02874 	movhi	r3,161
  a0ce24:	18cab304 	addi	r3,r3,10956
  a0ce28:	00800044 	movi	r2,1
  a0ce2c:	18801115 	stw	r2,68(r3)
  a0ce30:	00000406 	br	a0ce44 <alt_sys_init+0x1f8>
  a0ce34:	00c02874 	movhi	r3,161
  a0ce38:	18cab304 	addi	r3,r3,10956
  a0ce3c:	00800084 	movi	r2,2
  a0ce40:	18801115 	stw	r2,68(r3)
  a0ce44:	e0ffff43 	ldbu	r3,-3(fp)
  a0ce48:	00800804 	movi	r2,32
  a0ce4c:	10c7c83a 	sub	r3,r2,r3
  a0ce50:	00bfffc4 	movi	r2,-1
  a0ce54:	10c6d83a 	srl	r3,r2,r3
  a0ce58:	00802874 	movhi	r2,161
  a0ce5c:	108ab304 	addi	r2,r2,10956
  a0ce60:	10c01215 	stw	r3,72(r2)
  a0ce64:	e0ffff43 	ldbu	r3,-3(fp)
  a0ce68:	00802874 	movhi	r2,161
  a0ce6c:	108ab304 	addi	r2,r2,10956
  a0ce70:	10801117 	ldw	r2,68(r2)
  a0ce74:	1887883a 	add	r3,r3,r2
  a0ce78:	00802874 	movhi	r2,161
  a0ce7c:	108ab304 	addi	r2,r2,10956
  a0ce80:	10c01315 	stw	r3,76(r2)
  a0ce84:	e0ffff03 	ldbu	r3,-4(fp)
  a0ce88:	00800804 	movi	r2,32
  a0ce8c:	10c7c83a 	sub	r3,r2,r3
  a0ce90:	00bfffc4 	movi	r2,-1
  a0ce94:	10c6d83a 	srl	r3,r2,r3
  a0ce98:	00802874 	movhi	r2,161
  a0ce9c:	108ab304 	addi	r2,r2,10956
  a0cea0:	10c01415 	stw	r3,80(r2)
  a0cea4:	01002874 	movhi	r4,161
  a0cea8:	210ab304 	addi	r4,r4,10956
  a0ceac:	0a0cec40 	call	a0cec4 <alt_dev_reg>
}
  a0ceb0:	e037883a 	mov	sp,fp
  a0ceb4:	dfc00117 	ldw	ra,4(sp)
  a0ceb8:	df000017 	ldw	fp,0(sp)
  a0cebc:	dec00204 	addi	sp,sp,8
  a0cec0:	f800283a 	ret

00a0cec4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  a0cec4:	defffd04 	addi	sp,sp,-12
  a0cec8:	dfc00215 	stw	ra,8(sp)
  a0cecc:	df000115 	stw	fp,4(sp)
  a0ced0:	df000104 	addi	fp,sp,4
  a0ced4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  a0ced8:	e13fff17 	ldw	r4,-4(fp)
  a0cedc:	01402874 	movhi	r5,161
  a0cee0:	294ad904 	addi	r5,r5,11108
  a0cee4:	0a0f8d80 	call	a0f8d8 <alt_dev_llist_insert>
}
  a0cee8:	e037883a 	mov	sp,fp
  a0ceec:	dfc00117 	ldw	ra,4(sp)
  a0cef0:	df000017 	ldw	fp,0(sp)
  a0cef4:	dec00204 	addi	sp,sp,8
  a0cef8:	f800283a 	ret

00a0cefc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  a0cefc:	defffa04 	addi	sp,sp,-24
  a0cf00:	dfc00515 	stw	ra,20(sp)
  a0cf04:	df000415 	stw	fp,16(sp)
  a0cf08:	df000404 	addi	fp,sp,16
  a0cf0c:	e13ffd15 	stw	r4,-12(fp)
  a0cf10:	e17ffe15 	stw	r5,-8(fp)
  a0cf14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  a0cf18:	e0bffd17 	ldw	r2,-12(fp)
  a0cf1c:	10800017 	ldw	r2,0(r2)
  a0cf20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  a0cf24:	e0bffc17 	ldw	r2,-16(fp)
  a0cf28:	11000a04 	addi	r4,r2,40
  a0cf2c:	e0bffd17 	ldw	r2,-12(fp)
  a0cf30:	11c00217 	ldw	r7,8(r2)
  a0cf34:	e17ffe17 	ldw	r5,-8(fp)
  a0cf38:	e1bfff17 	ldw	r6,-4(fp)
  a0cf3c:	0a0d5440 	call	a0d544 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  a0cf40:	e037883a 	mov	sp,fp
  a0cf44:	dfc00117 	ldw	ra,4(sp)
  a0cf48:	df000017 	ldw	fp,0(sp)
  a0cf4c:	dec00204 	addi	sp,sp,8
  a0cf50:	f800283a 	ret

00a0cf54 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  a0cf54:	defffa04 	addi	sp,sp,-24
  a0cf58:	dfc00515 	stw	ra,20(sp)
  a0cf5c:	df000415 	stw	fp,16(sp)
  a0cf60:	df000404 	addi	fp,sp,16
  a0cf64:	e13ffd15 	stw	r4,-12(fp)
  a0cf68:	e17ffe15 	stw	r5,-8(fp)
  a0cf6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  a0cf70:	e0bffd17 	ldw	r2,-12(fp)
  a0cf74:	10800017 	ldw	r2,0(r2)
  a0cf78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  a0cf7c:	e0bffc17 	ldw	r2,-16(fp)
  a0cf80:	11000a04 	addi	r4,r2,40
  a0cf84:	e0bffd17 	ldw	r2,-12(fp)
  a0cf88:	11c00217 	ldw	r7,8(r2)
  a0cf8c:	e17ffe17 	ldw	r5,-8(fp)
  a0cf90:	e1bfff17 	ldw	r6,-4(fp)
  a0cf94:	0a0d7680 	call	a0d768 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  a0cf98:	e037883a 	mov	sp,fp
  a0cf9c:	dfc00117 	ldw	ra,4(sp)
  a0cfa0:	df000017 	ldw	fp,0(sp)
  a0cfa4:	dec00204 	addi	sp,sp,8
  a0cfa8:	f800283a 	ret

00a0cfac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  a0cfac:	defffc04 	addi	sp,sp,-16
  a0cfb0:	dfc00315 	stw	ra,12(sp)
  a0cfb4:	df000215 	stw	fp,8(sp)
  a0cfb8:	df000204 	addi	fp,sp,8
  a0cfbc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  a0cfc0:	e0bfff17 	ldw	r2,-4(fp)
  a0cfc4:	10800017 	ldw	r2,0(r2)
  a0cfc8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  a0cfcc:	e0bffe17 	ldw	r2,-8(fp)
  a0cfd0:	11000a04 	addi	r4,r2,40
  a0cfd4:	e0bfff17 	ldw	r2,-4(fp)
  a0cfd8:	11400217 	ldw	r5,8(r2)
  a0cfdc:	0a0d3dc0 	call	a0d3dc <altera_avalon_jtag_uart_close>
}
  a0cfe0:	e037883a 	mov	sp,fp
  a0cfe4:	dfc00117 	ldw	ra,4(sp)
  a0cfe8:	df000017 	ldw	fp,0(sp)
  a0cfec:	dec00204 	addi	sp,sp,8
  a0cff0:	f800283a 	ret

00a0cff4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  a0cff4:	defffa04 	addi	sp,sp,-24
  a0cff8:	dfc00515 	stw	ra,20(sp)
  a0cffc:	df000415 	stw	fp,16(sp)
  a0d000:	df000404 	addi	fp,sp,16
  a0d004:	e13ffd15 	stw	r4,-12(fp)
  a0d008:	e17ffe15 	stw	r5,-8(fp)
  a0d00c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  a0d010:	e0bffd17 	ldw	r2,-12(fp)
  a0d014:	10800017 	ldw	r2,0(r2)
  a0d018:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  a0d01c:	e0bffc17 	ldw	r2,-16(fp)
  a0d020:	11000a04 	addi	r4,r2,40
  a0d024:	e17ffe17 	ldw	r5,-8(fp)
  a0d028:	e1bfff17 	ldw	r6,-4(fp)
  a0d02c:	0a0d4500 	call	a0d450 <altera_avalon_jtag_uart_ioctl>
}
  a0d030:	e037883a 	mov	sp,fp
  a0d034:	dfc00117 	ldw	ra,4(sp)
  a0d038:	df000017 	ldw	fp,0(sp)
  a0d03c:	dec00204 	addi	sp,sp,8
  a0d040:	f800283a 	ret

00a0d044 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  a0d044:	defffa04 	addi	sp,sp,-24
  a0d048:	dfc00515 	stw	ra,20(sp)
  a0d04c:	df000415 	stw	fp,16(sp)
  a0d050:	df000404 	addi	fp,sp,16
  a0d054:	e13ffd15 	stw	r4,-12(fp)
  a0d058:	e17ffe15 	stw	r5,-8(fp)
  a0d05c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  a0d060:	e0fffd17 	ldw	r3,-12(fp)
  a0d064:	00800044 	movi	r2,1
  a0d068:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  a0d06c:	e0bffd17 	ldw	r2,-12(fp)
  a0d070:	10800017 	ldw	r2,0(r2)
  a0d074:	11000104 	addi	r4,r2,4
  a0d078:	e0bffd17 	ldw	r2,-12(fp)
  a0d07c:	10800817 	ldw	r2,32(r2)
  a0d080:	1007883a 	mov	r3,r2
  a0d084:	2005883a 	mov	r2,r4
  a0d088:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  a0d08c:	e13ffe17 	ldw	r4,-8(fp)
  a0d090:	e17fff17 	ldw	r5,-4(fp)
  a0d094:	d8000015 	stw	zero,0(sp)
  a0d098:	01802874 	movhi	r6,161
  a0d09c:	31b44104 	addi	r6,r6,-12028
  a0d0a0:	e1fffd17 	ldw	r7,-12(fp)
  a0d0a4:	0a0fb780 	call	a0fb78 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  a0d0a8:	e0bffd17 	ldw	r2,-12(fp)
  a0d0ac:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  a0d0b0:	e0bffd17 	ldw	r2,-12(fp)
  a0d0b4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  a0d0b8:	00802874 	movhi	r2,161
  a0d0bc:	1091e604 	addi	r2,r2,18328
  a0d0c0:	10800017 	ldw	r2,0(r2)
  a0d0c4:	100b883a 	mov	r5,r2
  a0d0c8:	01802874 	movhi	r6,161
  a0d0cc:	31b4cb04 	addi	r6,r6,-11476
  a0d0d0:	e1fffd17 	ldw	r7,-12(fp)
  a0d0d4:	0a0f7400 	call	a0f740 <alt_alarm_start>
  a0d0d8:	1004403a 	cmpge	r2,r2,zero
  a0d0dc:	1000041e 	bne	r2,zero,a0d0f0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  a0d0e0:	e0fffd17 	ldw	r3,-12(fp)
  a0d0e4:	00a00034 	movhi	r2,32768
  a0d0e8:	10bfffc4 	addi	r2,r2,-1
  a0d0ec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  a0d0f0:	e037883a 	mov	sp,fp
  a0d0f4:	dfc00117 	ldw	ra,4(sp)
  a0d0f8:	df000017 	ldw	fp,0(sp)
  a0d0fc:	dec00204 	addi	sp,sp,8
  a0d100:	f800283a 	ret

00a0d104 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  a0d104:	defff804 	addi	sp,sp,-32
  a0d108:	df000715 	stw	fp,28(sp)
  a0d10c:	df000704 	addi	fp,sp,28
  a0d110:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  a0d114:	e0bfff17 	ldw	r2,-4(fp)
  a0d118:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  a0d11c:	e0bffe17 	ldw	r2,-8(fp)
  a0d120:	10800017 	ldw	r2,0(r2)
  a0d124:	e0bffd15 	stw	r2,-12(fp)
  a0d128:	00000006 	br	a0d12c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  a0d12c:	e0bffd17 	ldw	r2,-12(fp)
  a0d130:	10800104 	addi	r2,r2,4
  a0d134:	10800037 	ldwio	r2,0(r2)
  a0d138:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  a0d13c:	e0bffc17 	ldw	r2,-16(fp)
  a0d140:	1080c00c 	andi	r2,r2,768
  a0d144:	1005003a 	cmpeq	r2,r2,zero
  a0d148:	1000741e 	bne	r2,zero,a0d31c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  a0d14c:	e0bffc17 	ldw	r2,-16(fp)
  a0d150:	1080400c 	andi	r2,r2,256
  a0d154:	1005003a 	cmpeq	r2,r2,zero
  a0d158:	1000351e 	bne	r2,zero,a0d230 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  a0d15c:	00800074 	movhi	r2,1
  a0d160:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  a0d164:	e0bffe17 	ldw	r2,-8(fp)
  a0d168:	10800a17 	ldw	r2,40(r2)
  a0d16c:	10800044 	addi	r2,r2,1
  a0d170:	1081ffcc 	andi	r2,r2,2047
  a0d174:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  a0d178:	e0bffe17 	ldw	r2,-8(fp)
  a0d17c:	10c00b17 	ldw	r3,44(r2)
  a0d180:	e0bffa17 	ldw	r2,-24(fp)
  a0d184:	18801626 	beq	r3,r2,a0d1e0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  a0d188:	e0bffd17 	ldw	r2,-12(fp)
  a0d18c:	10800037 	ldwio	r2,0(r2)
  a0d190:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  a0d194:	e0bffb17 	ldw	r2,-20(fp)
  a0d198:	10a0000c 	andi	r2,r2,32768
  a0d19c:	1005003a 	cmpeq	r2,r2,zero
  a0d1a0:	10000f1e 	bne	r2,zero,a0d1e0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  a0d1a4:	e0bffe17 	ldw	r2,-8(fp)
  a0d1a8:	10c00a17 	ldw	r3,40(r2)
  a0d1ac:	e0bffb17 	ldw	r2,-20(fp)
  a0d1b0:	1009883a 	mov	r4,r2
  a0d1b4:	e0bffe17 	ldw	r2,-8(fp)
  a0d1b8:	1885883a 	add	r2,r3,r2
  a0d1bc:	10800e04 	addi	r2,r2,56
  a0d1c0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  a0d1c4:	e0bffe17 	ldw	r2,-8(fp)
  a0d1c8:	10800a17 	ldw	r2,40(r2)
  a0d1cc:	10800044 	addi	r2,r2,1
  a0d1d0:	10c1ffcc 	andi	r3,r2,2047
  a0d1d4:	e0bffe17 	ldw	r2,-8(fp)
  a0d1d8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  a0d1dc:	003fe106 	br	a0d164 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  a0d1e0:	e0bffb17 	ldw	r2,-20(fp)
  a0d1e4:	10bfffec 	andhi	r2,r2,65535
  a0d1e8:	1005003a 	cmpeq	r2,r2,zero
  a0d1ec:	1000101e 	bne	r2,zero,a0d230 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  a0d1f0:	e0bffe17 	ldw	r2,-8(fp)
  a0d1f4:	10c00817 	ldw	r3,32(r2)
  a0d1f8:	00bfff84 	movi	r2,-2
  a0d1fc:	1886703a 	and	r3,r3,r2
  a0d200:	e0bffe17 	ldw	r2,-8(fp)
  a0d204:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  a0d208:	e0bffd17 	ldw	r2,-12(fp)
  a0d20c:	11000104 	addi	r4,r2,4
  a0d210:	e0bffe17 	ldw	r2,-8(fp)
  a0d214:	10800817 	ldw	r2,32(r2)
  a0d218:	1007883a 	mov	r3,r2
  a0d21c:	2005883a 	mov	r2,r4
  a0d220:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  a0d224:	e0bffd17 	ldw	r2,-12(fp)
  a0d228:	10800104 	addi	r2,r2,4
  a0d22c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  a0d230:	e0bffc17 	ldw	r2,-16(fp)
  a0d234:	1080800c 	andi	r2,r2,512
  a0d238:	1005003a 	cmpeq	r2,r2,zero
  a0d23c:	103fbb1e 	bne	r2,zero,a0d12c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  a0d240:	e0bffc17 	ldw	r2,-16(fp)
  a0d244:	10bfffec 	andhi	r2,r2,65535
  a0d248:	1004d43a 	srli	r2,r2,16
  a0d24c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  a0d250:	00001506 	br	a0d2a8 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  a0d254:	e13ffd17 	ldw	r4,-12(fp)
  a0d258:	e0bffe17 	ldw	r2,-8(fp)
  a0d25c:	10c00d17 	ldw	r3,52(r2)
  a0d260:	e0bffe17 	ldw	r2,-8(fp)
  a0d264:	1885883a 	add	r2,r3,r2
  a0d268:	10820e04 	addi	r2,r2,2104
  a0d26c:	10800003 	ldbu	r2,0(r2)
  a0d270:	10c03fcc 	andi	r3,r2,255
  a0d274:	18c0201c 	xori	r3,r3,128
  a0d278:	18ffe004 	addi	r3,r3,-128
  a0d27c:	2005883a 	mov	r2,r4
  a0d280:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  a0d284:	e0bffe17 	ldw	r2,-8(fp)
  a0d288:	10800d17 	ldw	r2,52(r2)
  a0d28c:	10800044 	addi	r2,r2,1
  a0d290:	10c1ffcc 	andi	r3,r2,2047
  a0d294:	e0bffe17 	ldw	r2,-8(fp)
  a0d298:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  a0d29c:	e0bff917 	ldw	r2,-28(fp)
  a0d2a0:	10bfffc4 	addi	r2,r2,-1
  a0d2a4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  a0d2a8:	e0bff917 	ldw	r2,-28(fp)
  a0d2ac:	1005003a 	cmpeq	r2,r2,zero
  a0d2b0:	1000051e 	bne	r2,zero,a0d2c8 <altera_avalon_jtag_uart_irq+0x1c4>
  a0d2b4:	e0bffe17 	ldw	r2,-8(fp)
  a0d2b8:	10c00d17 	ldw	r3,52(r2)
  a0d2bc:	e0bffe17 	ldw	r2,-8(fp)
  a0d2c0:	10800c17 	ldw	r2,48(r2)
  a0d2c4:	18bfe31e 	bne	r3,r2,a0d254 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  a0d2c8:	e0bff917 	ldw	r2,-28(fp)
  a0d2cc:	1005003a 	cmpeq	r2,r2,zero
  a0d2d0:	103f961e 	bne	r2,zero,a0d12c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  a0d2d4:	e0bffe17 	ldw	r2,-8(fp)
  a0d2d8:	10c00817 	ldw	r3,32(r2)
  a0d2dc:	00bfff44 	movi	r2,-3
  a0d2e0:	1886703a 	and	r3,r3,r2
  a0d2e4:	e0bffe17 	ldw	r2,-8(fp)
  a0d2e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  a0d2ec:	e0bffe17 	ldw	r2,-8(fp)
  a0d2f0:	10800017 	ldw	r2,0(r2)
  a0d2f4:	11000104 	addi	r4,r2,4
  a0d2f8:	e0bffe17 	ldw	r2,-8(fp)
  a0d2fc:	10800817 	ldw	r2,32(r2)
  a0d300:	1007883a 	mov	r3,r2
  a0d304:	2005883a 	mov	r2,r4
  a0d308:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  a0d30c:	e0bffd17 	ldw	r2,-12(fp)
  a0d310:	10800104 	addi	r2,r2,4
  a0d314:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  a0d318:	003f8406 	br	a0d12c <altera_avalon_jtag_uart_irq+0x28>
}
  a0d31c:	e037883a 	mov	sp,fp
  a0d320:	df000017 	ldw	fp,0(sp)
  a0d324:	dec00104 	addi	sp,sp,4
  a0d328:	f800283a 	ret

00a0d32c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  a0d32c:	defffc04 	addi	sp,sp,-16
  a0d330:	df000315 	stw	fp,12(sp)
  a0d334:	df000304 	addi	fp,sp,12
  a0d338:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  a0d33c:	e0bfff17 	ldw	r2,-4(fp)
  a0d340:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  a0d344:	e0bffe17 	ldw	r2,-8(fp)
  a0d348:	10800017 	ldw	r2,0(r2)
  a0d34c:	10800104 	addi	r2,r2,4
  a0d350:	10800037 	ldwio	r2,0(r2)
  a0d354:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  a0d358:	e0bffd17 	ldw	r2,-12(fp)
  a0d35c:	1081000c 	andi	r2,r2,1024
  a0d360:	1005003a 	cmpeq	r2,r2,zero
  a0d364:	10000c1e 	bne	r2,zero,a0d398 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  a0d368:	e0bffe17 	ldw	r2,-8(fp)
  a0d36c:	10800017 	ldw	r2,0(r2)
  a0d370:	11000104 	addi	r4,r2,4
  a0d374:	e0bffe17 	ldw	r2,-8(fp)
  a0d378:	10800817 	ldw	r2,32(r2)
  a0d37c:	10810014 	ori	r2,r2,1024
  a0d380:	1007883a 	mov	r3,r2
  a0d384:	2005883a 	mov	r2,r4
  a0d388:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  a0d38c:	e0bffe17 	ldw	r2,-8(fp)
  a0d390:	10000915 	stw	zero,36(r2)
  a0d394:	00000a06 	br	a0d3c0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  a0d398:	e0bffe17 	ldw	r2,-8(fp)
  a0d39c:	10c00917 	ldw	r3,36(r2)
  a0d3a0:	00a00034 	movhi	r2,32768
  a0d3a4:	10bfff04 	addi	r2,r2,-4
  a0d3a8:	10c00536 	bltu	r2,r3,a0d3c0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  a0d3ac:	e0bffe17 	ldw	r2,-8(fp)
  a0d3b0:	10800917 	ldw	r2,36(r2)
  a0d3b4:	10c00044 	addi	r3,r2,1
  a0d3b8:	e0bffe17 	ldw	r2,-8(fp)
  a0d3bc:	10c00915 	stw	r3,36(r2)
  a0d3c0:	00802874 	movhi	r2,161
  a0d3c4:	1091e604 	addi	r2,r2,18328
  a0d3c8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  a0d3cc:	e037883a 	mov	sp,fp
  a0d3d0:	df000017 	ldw	fp,0(sp)
  a0d3d4:	dec00104 	addi	sp,sp,4
  a0d3d8:	f800283a 	ret

00a0d3dc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  a0d3dc:	defffc04 	addi	sp,sp,-16
  a0d3e0:	df000315 	stw	fp,12(sp)
  a0d3e4:	df000304 	addi	fp,sp,12
  a0d3e8:	e13ffd15 	stw	r4,-12(fp)
  a0d3ec:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  a0d3f0:	00000706 	br	a0d410 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  a0d3f4:	e0bffe17 	ldw	r2,-8(fp)
  a0d3f8:	1090000c 	andi	r2,r2,16384
  a0d3fc:	1005003a 	cmpeq	r2,r2,zero
  a0d400:	1000031e 	bne	r2,zero,a0d410 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  a0d404:	00bffd44 	movi	r2,-11
  a0d408:	e0bfff15 	stw	r2,-4(fp)
  a0d40c:	00000b06 	br	a0d43c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  a0d410:	e0bffd17 	ldw	r2,-12(fp)
  a0d414:	10c00d17 	ldw	r3,52(r2)
  a0d418:	e0bffd17 	ldw	r2,-12(fp)
  a0d41c:	10800c17 	ldw	r2,48(r2)
  a0d420:	18800526 	beq	r3,r2,a0d438 <altera_avalon_jtag_uart_close+0x5c>
  a0d424:	e0bffd17 	ldw	r2,-12(fp)
  a0d428:	10c00917 	ldw	r3,36(r2)
  a0d42c:	e0bffd17 	ldw	r2,-12(fp)
  a0d430:	10800117 	ldw	r2,4(r2)
  a0d434:	18bfef36 	bltu	r3,r2,a0d3f4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  a0d438:	e03fff15 	stw	zero,-4(fp)
  a0d43c:	e0bfff17 	ldw	r2,-4(fp)
}
  a0d440:	e037883a 	mov	sp,fp
  a0d444:	df000017 	ldw	fp,0(sp)
  a0d448:	dec00104 	addi	sp,sp,4
  a0d44c:	f800283a 	ret

00a0d450 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  a0d450:	defff804 	addi	sp,sp,-32
  a0d454:	df000715 	stw	fp,28(sp)
  a0d458:	df000704 	addi	fp,sp,28
  a0d45c:	e13ffb15 	stw	r4,-20(fp)
  a0d460:	e17ffc15 	stw	r5,-16(fp)
  a0d464:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  a0d468:	00bff9c4 	movi	r2,-25
  a0d46c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  a0d470:	e0bffc17 	ldw	r2,-16(fp)
  a0d474:	e0bfff15 	stw	r2,-4(fp)
  a0d478:	e0ffff17 	ldw	r3,-4(fp)
  a0d47c:	189a8060 	cmpeqi	r2,r3,27137
  a0d480:	1000041e 	bne	r2,zero,a0d494 <altera_avalon_jtag_uart_ioctl+0x44>
  a0d484:	e0ffff17 	ldw	r3,-4(fp)
  a0d488:	189a80a0 	cmpeqi	r2,r3,27138
  a0d48c:	10001b1e 	bne	r2,zero,a0d4fc <altera_avalon_jtag_uart_ioctl+0xac>
  a0d490:	00002706 	br	a0d530 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  a0d494:	e0bffb17 	ldw	r2,-20(fp)
  a0d498:	10c00117 	ldw	r3,4(r2)
  a0d49c:	00a00034 	movhi	r2,32768
  a0d4a0:	10bfffc4 	addi	r2,r2,-1
  a0d4a4:	18802226 	beq	r3,r2,a0d530 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  a0d4a8:	e0bffd17 	ldw	r2,-12(fp)
  a0d4ac:	10800017 	ldw	r2,0(r2)
  a0d4b0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  a0d4b4:	e0bff917 	ldw	r2,-28(fp)
  a0d4b8:	10800090 	cmplti	r2,r2,2
  a0d4bc:	1000071e 	bne	r2,zero,a0d4dc <altera_avalon_jtag_uart_ioctl+0x8c>
  a0d4c0:	e0fff917 	ldw	r3,-28(fp)
  a0d4c4:	00a00034 	movhi	r2,32768
  a0d4c8:	10bfffc4 	addi	r2,r2,-1
  a0d4cc:	18800326 	beq	r3,r2,a0d4dc <altera_avalon_jtag_uart_ioctl+0x8c>
  a0d4d0:	e0bff917 	ldw	r2,-28(fp)
  a0d4d4:	e0bffe15 	stw	r2,-8(fp)
  a0d4d8:	00000306 	br	a0d4e8 <altera_avalon_jtag_uart_ioctl+0x98>
  a0d4dc:	00e00034 	movhi	r3,32768
  a0d4e0:	18ffff84 	addi	r3,r3,-2
  a0d4e4:	e0fffe15 	stw	r3,-8(fp)
  a0d4e8:	e0bffb17 	ldw	r2,-20(fp)
  a0d4ec:	e0fffe17 	ldw	r3,-8(fp)
  a0d4f0:	10c00115 	stw	r3,4(r2)
      rc = 0;
  a0d4f4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  a0d4f8:	00000d06 	br	a0d530 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  a0d4fc:	e0bffb17 	ldw	r2,-20(fp)
  a0d500:	10c00117 	ldw	r3,4(r2)
  a0d504:	00a00034 	movhi	r2,32768
  a0d508:	10bfffc4 	addi	r2,r2,-1
  a0d50c:	18800826 	beq	r3,r2,a0d530 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  a0d510:	e13ffd17 	ldw	r4,-12(fp)
  a0d514:	e0bffb17 	ldw	r2,-20(fp)
  a0d518:	10c00917 	ldw	r3,36(r2)
  a0d51c:	e0bffb17 	ldw	r2,-20(fp)
  a0d520:	10800117 	ldw	r2,4(r2)
  a0d524:	1885803a 	cmpltu	r2,r3,r2
  a0d528:	20800015 	stw	r2,0(r4)
      rc = 0;
  a0d52c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  a0d530:	e0bffa17 	ldw	r2,-24(fp)
}
  a0d534:	e037883a 	mov	sp,fp
  a0d538:	df000017 	ldw	fp,0(sp)
  a0d53c:	dec00104 	addi	sp,sp,4
  a0d540:	f800283a 	ret

00a0d544 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  a0d544:	defff204 	addi	sp,sp,-56
  a0d548:	dfc00d15 	stw	ra,52(sp)
  a0d54c:	df000c15 	stw	fp,48(sp)
  a0d550:	df000c04 	addi	fp,sp,48
  a0d554:	e13ffb15 	stw	r4,-20(fp)
  a0d558:	e17ffc15 	stw	r5,-16(fp)
  a0d55c:	e1bffd15 	stw	r6,-12(fp)
  a0d560:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  a0d564:	e0bffc17 	ldw	r2,-16(fp)
  a0d568:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  a0d56c:	00004806 	br	a0d690 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  a0d570:	e0bffb17 	ldw	r2,-20(fp)
  a0d574:	10800a17 	ldw	r2,40(r2)
  a0d578:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  a0d57c:	e0bffb17 	ldw	r2,-20(fp)
  a0d580:	10800b17 	ldw	r2,44(r2)
  a0d584:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  a0d588:	e0fff717 	ldw	r3,-36(fp)
  a0d58c:	e0bff617 	ldw	r2,-40(fp)
  a0d590:	18800536 	bltu	r3,r2,a0d5a8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  a0d594:	e0bff717 	ldw	r2,-36(fp)
  a0d598:	e0fff617 	ldw	r3,-40(fp)
  a0d59c:	10c5c83a 	sub	r2,r2,r3
  a0d5a0:	e0bff815 	stw	r2,-32(fp)
  a0d5a4:	00000406 	br	a0d5b8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  a0d5a8:	00820004 	movi	r2,2048
  a0d5ac:	e0fff617 	ldw	r3,-40(fp)
  a0d5b0:	10c5c83a 	sub	r2,r2,r3
  a0d5b4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  a0d5b8:	e0bff817 	ldw	r2,-32(fp)
  a0d5bc:	1005003a 	cmpeq	r2,r2,zero
  a0d5c0:	10001f1e 	bne	r2,zero,a0d640 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  a0d5c4:	e0fffd17 	ldw	r3,-12(fp)
  a0d5c8:	e0bff817 	ldw	r2,-32(fp)
  a0d5cc:	1880022e 	bgeu	r3,r2,a0d5d8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  a0d5d0:	e0bffd17 	ldw	r2,-12(fp)
  a0d5d4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  a0d5d8:	e0bffb17 	ldw	r2,-20(fp)
  a0d5dc:	10c00e04 	addi	r3,r2,56
  a0d5e0:	e0bff617 	ldw	r2,-40(fp)
  a0d5e4:	1887883a 	add	r3,r3,r2
  a0d5e8:	e0bffa17 	ldw	r2,-24(fp)
  a0d5ec:	1009883a 	mov	r4,r2
  a0d5f0:	180b883a 	mov	r5,r3
  a0d5f4:	e1bff817 	ldw	r6,-32(fp)
  a0d5f8:	0a08b9c0 	call	a08b9c <memcpy>
      ptr   += n;
  a0d5fc:	e0fff817 	ldw	r3,-32(fp)
  a0d600:	e0bffa17 	ldw	r2,-24(fp)
  a0d604:	10c5883a 	add	r2,r2,r3
  a0d608:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  a0d60c:	e0fffd17 	ldw	r3,-12(fp)
  a0d610:	e0bff817 	ldw	r2,-32(fp)
  a0d614:	1885c83a 	sub	r2,r3,r2
  a0d618:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  a0d61c:	e0fff617 	ldw	r3,-40(fp)
  a0d620:	e0bff817 	ldw	r2,-32(fp)
  a0d624:	1885883a 	add	r2,r3,r2
  a0d628:	10c1ffcc 	andi	r3,r2,2047
  a0d62c:	e0bffb17 	ldw	r2,-20(fp)
  a0d630:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  a0d634:	e0bffd17 	ldw	r2,-12(fp)
  a0d638:	10800048 	cmpgei	r2,r2,1
  a0d63c:	103fcc1e 	bne	r2,zero,a0d570 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  a0d640:	e0fffa17 	ldw	r3,-24(fp)
  a0d644:	e0bffc17 	ldw	r2,-16(fp)
  a0d648:	1880141e 	bne	r3,r2,a0d69c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  a0d64c:	e0bffe17 	ldw	r2,-8(fp)
  a0d650:	1090000c 	andi	r2,r2,16384
  a0d654:	1004c03a 	cmpne	r2,r2,zero
  a0d658:	1000101e 	bne	r2,zero,a0d69c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  a0d65c:	e0bffb17 	ldw	r2,-20(fp)
  a0d660:	10c00a17 	ldw	r3,40(r2)
  a0d664:	e0bff717 	ldw	r2,-36(fp)
  a0d668:	1880051e 	bne	r3,r2,a0d680 <altera_avalon_jtag_uart_read+0x13c>
  a0d66c:	e0bffb17 	ldw	r2,-20(fp)
  a0d670:	10c00917 	ldw	r3,36(r2)
  a0d674:	e0bffb17 	ldw	r2,-20(fp)
  a0d678:	10800117 	ldw	r2,4(r2)
  a0d67c:	18bff736 	bltu	r3,r2,a0d65c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  a0d680:	e0bffb17 	ldw	r2,-20(fp)
  a0d684:	10c00a17 	ldw	r3,40(r2)
  a0d688:	e0bff717 	ldw	r2,-36(fp)
  a0d68c:	18800326 	beq	r3,r2,a0d69c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  a0d690:	e0bffd17 	ldw	r2,-12(fp)
  a0d694:	10800048 	cmpgei	r2,r2,1
  a0d698:	103fb51e 	bne	r2,zero,a0d570 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  a0d69c:	e0fffa17 	ldw	r3,-24(fp)
  a0d6a0:	e0bffc17 	ldw	r2,-16(fp)
  a0d6a4:	18801926 	beq	r3,r2,a0d70c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  a0d6a8:	0005303a 	rdctl	r2,status
  a0d6ac:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  a0d6b0:	e0fff517 	ldw	r3,-44(fp)
  a0d6b4:	00bfff84 	movi	r2,-2
  a0d6b8:	1884703a 	and	r2,r3,r2
  a0d6bc:	1001703a 	wrctl	status,r2
  
  return context;
  a0d6c0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  a0d6c4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  a0d6c8:	e0bffb17 	ldw	r2,-20(fp)
  a0d6cc:	10800817 	ldw	r2,32(r2)
  a0d6d0:	10c00054 	ori	r3,r2,1
  a0d6d4:	e0bffb17 	ldw	r2,-20(fp)
  a0d6d8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  a0d6dc:	e0bffb17 	ldw	r2,-20(fp)
  a0d6e0:	10800017 	ldw	r2,0(r2)
  a0d6e4:	11000104 	addi	r4,r2,4
  a0d6e8:	e0bffb17 	ldw	r2,-20(fp)
  a0d6ec:	10800817 	ldw	r2,32(r2)
  a0d6f0:	1007883a 	mov	r3,r2
  a0d6f4:	2005883a 	mov	r2,r4
  a0d6f8:	10c00035 	stwio	r3,0(r2)
  a0d6fc:	e0bff917 	ldw	r2,-28(fp)
  a0d700:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  a0d704:	e0bff417 	ldw	r2,-48(fp)
  a0d708:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  a0d70c:	e0fffa17 	ldw	r3,-24(fp)
  a0d710:	e0bffc17 	ldw	r2,-16(fp)
  a0d714:	18800526 	beq	r3,r2,a0d72c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  a0d718:	e0fffa17 	ldw	r3,-24(fp)
  a0d71c:	e0bffc17 	ldw	r2,-16(fp)
  a0d720:	1887c83a 	sub	r3,r3,r2
  a0d724:	e0ffff15 	stw	r3,-4(fp)
  a0d728:	00000906 	br	a0d750 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  a0d72c:	e0bffe17 	ldw	r2,-8(fp)
  a0d730:	1090000c 	andi	r2,r2,16384
  a0d734:	1005003a 	cmpeq	r2,r2,zero
  a0d738:	1000031e 	bne	r2,zero,a0d748 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  a0d73c:	00bffd44 	movi	r2,-11
  a0d740:	e0bfff15 	stw	r2,-4(fp)
  a0d744:	00000206 	br	a0d750 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  a0d748:	00bffec4 	movi	r2,-5
  a0d74c:	e0bfff15 	stw	r2,-4(fp)
  a0d750:	e0bfff17 	ldw	r2,-4(fp)
}
  a0d754:	e037883a 	mov	sp,fp
  a0d758:	dfc00117 	ldw	ra,4(sp)
  a0d75c:	df000017 	ldw	fp,0(sp)
  a0d760:	dec00204 	addi	sp,sp,8
  a0d764:	f800283a 	ret

00a0d768 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  a0d768:	defff204 	addi	sp,sp,-56
  a0d76c:	dfc00d15 	stw	ra,52(sp)
  a0d770:	df000c15 	stw	fp,48(sp)
  a0d774:	df000c04 	addi	fp,sp,48
  a0d778:	e13ffb15 	stw	r4,-20(fp)
  a0d77c:	e17ffc15 	stw	r5,-16(fp)
  a0d780:	e1bffd15 	stw	r6,-12(fp)
  a0d784:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  a0d788:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  a0d78c:	e0bffc17 	ldw	r2,-16(fp)
  a0d790:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  a0d794:	00003a06 	br	a0d880 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  a0d798:	e0bffb17 	ldw	r2,-20(fp)
  a0d79c:	10800c17 	ldw	r2,48(r2)
  a0d7a0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  a0d7a4:	e0bffb17 	ldw	r2,-20(fp)
  a0d7a8:	10800d17 	ldw	r2,52(r2)
  a0d7ac:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  a0d7b0:	e0fffa17 	ldw	r3,-24(fp)
  a0d7b4:	e0bff917 	ldw	r2,-28(fp)
  a0d7b8:	1880062e 	bgeu	r3,r2,a0d7d4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  a0d7bc:	e0fff917 	ldw	r3,-28(fp)
  a0d7c0:	e0bffa17 	ldw	r2,-24(fp)
  a0d7c4:	1885c83a 	sub	r2,r3,r2
  a0d7c8:	10bfffc4 	addi	r2,r2,-1
  a0d7cc:	e0bff815 	stw	r2,-32(fp)
  a0d7d0:	00000c06 	br	a0d804 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  a0d7d4:	e0bff917 	ldw	r2,-28(fp)
  a0d7d8:	1005003a 	cmpeq	r2,r2,zero
  a0d7dc:	1000051e 	bne	r2,zero,a0d7f4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  a0d7e0:	00820004 	movi	r2,2048
  a0d7e4:	e0fffa17 	ldw	r3,-24(fp)
  a0d7e8:	10c5c83a 	sub	r2,r2,r3
  a0d7ec:	e0bff815 	stw	r2,-32(fp)
  a0d7f0:	00000406 	br	a0d804 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  a0d7f4:	0081ffc4 	movi	r2,2047
  a0d7f8:	e0fffa17 	ldw	r3,-24(fp)
  a0d7fc:	10c5c83a 	sub	r2,r2,r3
  a0d800:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  a0d804:	e0bff817 	ldw	r2,-32(fp)
  a0d808:	1005003a 	cmpeq	r2,r2,zero
  a0d80c:	10001f1e 	bne	r2,zero,a0d88c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  a0d810:	e0fffd17 	ldw	r3,-12(fp)
  a0d814:	e0bff817 	ldw	r2,-32(fp)
  a0d818:	1880022e 	bgeu	r3,r2,a0d824 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  a0d81c:	e0bffd17 	ldw	r2,-12(fp)
  a0d820:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  a0d824:	e0bffb17 	ldw	r2,-20(fp)
  a0d828:	10c20e04 	addi	r3,r2,2104
  a0d82c:	e0bffa17 	ldw	r2,-24(fp)
  a0d830:	1885883a 	add	r2,r3,r2
  a0d834:	e0fffc17 	ldw	r3,-16(fp)
  a0d838:	1009883a 	mov	r4,r2
  a0d83c:	180b883a 	mov	r5,r3
  a0d840:	e1bff817 	ldw	r6,-32(fp)
  a0d844:	0a08b9c0 	call	a08b9c <memcpy>
      ptr   += n;
  a0d848:	e0fff817 	ldw	r3,-32(fp)
  a0d84c:	e0bffc17 	ldw	r2,-16(fp)
  a0d850:	10c5883a 	add	r2,r2,r3
  a0d854:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  a0d858:	e0fffd17 	ldw	r3,-12(fp)
  a0d85c:	e0bff817 	ldw	r2,-32(fp)
  a0d860:	1885c83a 	sub	r2,r3,r2
  a0d864:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  a0d868:	e0fffa17 	ldw	r3,-24(fp)
  a0d86c:	e0bff817 	ldw	r2,-32(fp)
  a0d870:	1885883a 	add	r2,r3,r2
  a0d874:	10c1ffcc 	andi	r3,r2,2047
  a0d878:	e0bffb17 	ldw	r2,-20(fp)
  a0d87c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  a0d880:	e0bffd17 	ldw	r2,-12(fp)
  a0d884:	10800048 	cmpgei	r2,r2,1
  a0d888:	103fc31e 	bne	r2,zero,a0d798 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  a0d88c:	0005303a 	rdctl	r2,status
  a0d890:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  a0d894:	e0fff517 	ldw	r3,-44(fp)
  a0d898:	00bfff84 	movi	r2,-2
  a0d89c:	1884703a 	and	r2,r3,r2
  a0d8a0:	1001703a 	wrctl	status,r2
  
  return context;
  a0d8a4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  a0d8a8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  a0d8ac:	e0bffb17 	ldw	r2,-20(fp)
  a0d8b0:	10800817 	ldw	r2,32(r2)
  a0d8b4:	10c00094 	ori	r3,r2,2
  a0d8b8:	e0bffb17 	ldw	r2,-20(fp)
  a0d8bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  a0d8c0:	e0bffb17 	ldw	r2,-20(fp)
  a0d8c4:	10800017 	ldw	r2,0(r2)
  a0d8c8:	11000104 	addi	r4,r2,4
  a0d8cc:	e0bffb17 	ldw	r2,-20(fp)
  a0d8d0:	10800817 	ldw	r2,32(r2)
  a0d8d4:	1007883a 	mov	r3,r2
  a0d8d8:	2005883a 	mov	r2,r4
  a0d8dc:	10c00035 	stwio	r3,0(r2)
  a0d8e0:	e0bff717 	ldw	r2,-36(fp)
  a0d8e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  a0d8e8:	e0bff417 	ldw	r2,-48(fp)
  a0d8ec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  a0d8f0:	e0bffd17 	ldw	r2,-12(fp)
  a0d8f4:	10800050 	cmplti	r2,r2,1
  a0d8f8:	1000111e 	bne	r2,zero,a0d940 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  a0d8fc:	e0bffe17 	ldw	r2,-8(fp)
  a0d900:	1090000c 	andi	r2,r2,16384
  a0d904:	1004c03a 	cmpne	r2,r2,zero
  a0d908:	1000101e 	bne	r2,zero,a0d94c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  a0d90c:	e0bffb17 	ldw	r2,-20(fp)
  a0d910:	10c00d17 	ldw	r3,52(r2)
  a0d914:	e0bff917 	ldw	r2,-28(fp)
  a0d918:	1880051e 	bne	r3,r2,a0d930 <altera_avalon_jtag_uart_write+0x1c8>
  a0d91c:	e0bffb17 	ldw	r2,-20(fp)
  a0d920:	10c00917 	ldw	r3,36(r2)
  a0d924:	e0bffb17 	ldw	r2,-20(fp)
  a0d928:	10800117 	ldw	r2,4(r2)
  a0d92c:	18bff736 	bltu	r3,r2,a0d90c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  a0d930:	e0bffb17 	ldw	r2,-20(fp)
  a0d934:	10c00d17 	ldw	r3,52(r2)
  a0d938:	e0bff917 	ldw	r2,-28(fp)
  a0d93c:	18800326 	beq	r3,r2,a0d94c <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  a0d940:	e0bffd17 	ldw	r2,-12(fp)
  a0d944:	10800048 	cmpgei	r2,r2,1
  a0d948:	103fcd1e 	bne	r2,zero,a0d880 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  a0d94c:	e0fffc17 	ldw	r3,-16(fp)
  a0d950:	e0bff617 	ldw	r2,-40(fp)
  a0d954:	18800526 	beq	r3,r2,a0d96c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  a0d958:	e0fffc17 	ldw	r3,-16(fp)
  a0d95c:	e0bff617 	ldw	r2,-40(fp)
  a0d960:	1887c83a 	sub	r3,r3,r2
  a0d964:	e0ffff15 	stw	r3,-4(fp)
  a0d968:	00000906 	br	a0d990 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  a0d96c:	e0bffe17 	ldw	r2,-8(fp)
  a0d970:	1090000c 	andi	r2,r2,16384
  a0d974:	1005003a 	cmpeq	r2,r2,zero
  a0d978:	1000031e 	bne	r2,zero,a0d988 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  a0d97c:	00bffd44 	movi	r2,-11
  a0d980:	e0bfff15 	stw	r2,-4(fp)
  a0d984:	00000206 	br	a0d990 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  a0d988:	00bffec4 	movi	r2,-5
  a0d98c:	e0bfff15 	stw	r2,-4(fp)
  a0d990:	e0bfff17 	ldw	r2,-4(fp)
}
  a0d994:	e037883a 	mov	sp,fp
  a0d998:	dfc00117 	ldw	ra,4(sp)
  a0d99c:	df000017 	ldw	fp,0(sp)
  a0d9a0:	dec00204 	addi	sp,sp,8
  a0d9a4:	f800283a 	ret

00a0d9a8 <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
  a0d9a8:	defffa04 	addi	sp,sp,-24
  a0d9ac:	dfc00515 	stw	ra,20(sp)
  a0d9b0:	df000415 	stw	fp,16(sp)
  a0d9b4:	df000404 	addi	fp,sp,16
  a0d9b8:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
  a0d9bc:	e0bfff17 	ldw	r2,-4(fp)
  a0d9c0:	11000704 	addi	r4,r2,28
  a0d9c4:	0a0db000 	call	a0db00 <alt_avalon_mutex_reg>
  a0d9c8:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
  a0d9cc:	e0bffe17 	ldw	r2,-8(fp)
  a0d9d0:	1004c03a 	cmpne	r2,r2,zero
  a0d9d4:	1000041e 	bne	r2,zero,a0d9e8 <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
  a0d9d8:	e0bfff17 	ldw	r2,-4(fp)
  a0d9dc:	11000b04 	addi	r4,r2,44
  a0d9e0:	0a0db000 	call	a0db00 <alt_avalon_mutex_reg>
  a0d9e4:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  a0d9e8:	e0bffe17 	ldw	r2,-8(fp)
  a0d9ec:	1004c03a 	cmpne	r2,r2,zero
  a0d9f0:	1000041e 	bne	r2,zero,a0da04 <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
  a0d9f4:	e13fff17 	ldw	r4,-4(fp)
  a0d9f8:	d1601604 	addi	r5,gp,-32680
  a0d9fc:	0a0f8d80 	call	a0f8d8 <alt_dev_llist_insert>
  a0da00:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  a0da04:	e0bffe17 	ldw	r2,-8(fp)
  a0da08:	1004c03a 	cmpne	r2,r2,zero
  a0da0c:	1000361e 	bne	r2,zero,a0dae8 <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
  a0da10:	e0bfff17 	ldw	r2,-4(fp)
  a0da14:	11000917 	ldw	r4,36(r2)
  a0da18:	0a0df4c0 	call	a0df4c <altera_avalon_mutex_open>
  a0da1c:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
  a0da20:	e0bffd17 	ldw	r2,-12(fp)
  a0da24:	1005003a 	cmpeq	r2,r2,zero
  a0da28:	10002f1e 	bne	r2,zero,a0dae8 <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
  a0da2c:	e0bfff17 	ldw	r2,-4(fp)
  a0da30:	11000d17 	ldw	r4,52(r2)
  a0da34:	0a0df4c0 	call	a0df4c <altera_avalon_mutex_open>
  a0da38:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
  a0da3c:	e0bffc17 	ldw	r2,-16(fp)
  a0da40:	1005003a 	cmpeq	r2,r2,zero
  a0da44:	1000281e 	bne	r2,zero,a0dae8 <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  a0da48:	00000f06 	br	a0da88 <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
  a0da4c:	e13ffd17 	ldw	r4,-12(fp)
  a0da50:	01400044 	movi	r5,1
  a0da54:	0a0e0640 	call	a0e064 <altera_avalon_mutex_trylock>
  a0da58:	1004c03a 	cmpne	r2,r2,zero
  a0da5c:	10000a1e 	bne	r2,zero,a0da88 <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
  a0da60:	e0bfff17 	ldw	r2,-4(fp)
  a0da64:	10800317 	ldw	r2,12(r2)
  a0da68:	1009883a 	mov	r4,r2
  a0da6c:	e0bfff17 	ldw	r2,-4(fp)
  a0da70:	10800517 	ldw	r2,20(r2)
  a0da74:	1007883a 	mov	r3,r2
  a0da78:	2005883a 	mov	r2,r4
  a0da7c:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
  a0da80:	e13ffd17 	ldw	r4,-12(fp)
  a0da84:	0a0e0a40 	call	a0e0a4 <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  a0da88:	e13ffd17 	ldw	r4,-12(fp)
  a0da8c:	0a0e17c0 	call	a0e17c <altera_avalon_mutex_first_lock>
  a0da90:	1004c03a 	cmpne	r2,r2,zero
  a0da94:	103fed1e 	bne	r2,zero,a0da4c <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  a0da98:	00000f06 	br	a0dad8 <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
  a0da9c:	e13ffc17 	ldw	r4,-16(fp)
  a0daa0:	01400044 	movi	r5,1
  a0daa4:	0a0e0640 	call	a0e064 <altera_avalon_mutex_trylock>
  a0daa8:	1004c03a 	cmpne	r2,r2,zero
  a0daac:	10000a1e 	bne	r2,zero,a0dad8 <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
  a0dab0:	e0bfff17 	ldw	r2,-4(fp)
  a0dab4:	10800417 	ldw	r2,16(r2)
  a0dab8:	1009883a 	mov	r4,r2
  a0dabc:	e0bfff17 	ldw	r2,-4(fp)
  a0dac0:	10800517 	ldw	r2,20(r2)
  a0dac4:	1007883a 	mov	r3,r2
  a0dac8:	2005883a 	mov	r2,r4
  a0dacc:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
  a0dad0:	e13ffc17 	ldw	r4,-16(fp)
  a0dad4:	0a0e0a40 	call	a0e0a4 <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  a0dad8:	e13ffc17 	ldw	r4,-16(fp)
  a0dadc:	0a0e17c0 	call	a0e17c <altera_avalon_mutex_first_lock>
  a0dae0:	1004c03a 	cmpne	r2,r2,zero
  a0dae4:	103fed1e 	bne	r2,zero,a0da9c <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
  a0dae8:	e0bffe17 	ldw	r2,-8(fp)
}
  a0daec:	e037883a 	mov	sp,fp
  a0daf0:	dfc00117 	ldw	ra,4(sp)
  a0daf4:	df000017 	ldw	fp,0(sp)
  a0daf8:	dec00204 	addi	sp,sp,8
  a0dafc:	f800283a 	ret

00a0db00 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
  a0db00:	defffc04 	addi	sp,sp,-16
  a0db04:	dfc00315 	stw	ra,12(sp)
  a0db08:	df000215 	stw	fp,8(sp)
  a0db0c:	df000204 	addi	fp,sp,8
  a0db10:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  a0db14:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  a0db18:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
  a0db1c:	e0bffe17 	ldw	r2,-8(fp)
  a0db20:	1004c03a 	cmpne	r2,r2,zero
  a0db24:	1000061e 	bne	r2,zero,a0db40 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
  a0db28:	e13fff17 	ldw	r4,-4(fp)
  a0db2c:	01402874 	movhi	r5,161
  a0db30:	294ae004 	addi	r5,r5,11136
  a0db34:	0a0f8d80 	call	a0f8d8 <alt_dev_llist_insert>
  a0db38:	e0bffe15 	stw	r2,-8(fp)
  a0db3c:	00000506 	br	a0db54 <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
  a0db40:	0a0db6c0 	call	a0db6c <alt_get_errno>
  a0db44:	00c00304 	movi	r3,12
  a0db48:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
  a0db4c:	00bffd04 	movi	r2,-12
  a0db50:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
  a0db54:	e0bffe17 	ldw	r2,-8(fp)
}
  a0db58:	e037883a 	mov	sp,fp
  a0db5c:	dfc00117 	ldw	ra,4(sp)
  a0db60:	df000017 	ldw	fp,0(sp)
  a0db64:	dec00204 	addi	sp,sp,8
  a0db68:	f800283a 	ret

00a0db6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0db6c:	defffd04 	addi	sp,sp,-12
  a0db70:	dfc00215 	stw	ra,8(sp)
  a0db74:	df000115 	stw	fp,4(sp)
  a0db78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0db7c:	00802874 	movhi	r2,161
  a0db80:	108adc04 	addi	r2,r2,11120
  a0db84:	10800017 	ldw	r2,0(r2)
  a0db88:	1005003a 	cmpeq	r2,r2,zero
  a0db8c:	1000061e 	bne	r2,zero,a0dba8 <alt_get_errno+0x3c>
  a0db90:	00802874 	movhi	r2,161
  a0db94:	108adc04 	addi	r2,r2,11120
  a0db98:	10800017 	ldw	r2,0(r2)
  a0db9c:	103ee83a 	callr	r2
  a0dba0:	e0bfff15 	stw	r2,-4(fp)
  a0dba4:	00000306 	br	a0dbb4 <alt_get_errno+0x48>
  a0dba8:	00802874 	movhi	r2,161
  a0dbac:	1091e104 	addi	r2,r2,18308
  a0dbb0:	e0bfff15 	stw	r2,-4(fp)
  a0dbb4:	e0bfff17 	ldw	r2,-4(fp)
}
  a0dbb8:	e037883a 	mov	sp,fp
  a0dbbc:	dfc00117 	ldw	ra,4(sp)
  a0dbc0:	df000017 	ldw	fp,0(sp)
  a0dbc4:	dec00204 	addi	sp,sp,8
  a0dbc8:	f800283a 	ret

00a0dbcc <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
  a0dbcc:	defffc04 	addi	sp,sp,-16
  a0dbd0:	dfc00315 	stw	ra,12(sp)
  a0dbd4:	df000215 	stw	fp,8(sp)
  a0dbd8:	df000204 	addi	fp,sp,8
  a0dbdc:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
  a0dbe0:	e13fff17 	ldw	r4,-4(fp)
  a0dbe4:	d1601604 	addi	r5,gp,-32680
  a0dbe8:	0a0fab40 	call	a0fab4 <alt_find_dev>
  a0dbec:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  a0dbf0:	e0bffe17 	ldw	r2,-8(fp)
  a0dbf4:	1004c03a 	cmpne	r2,r2,zero
  a0dbf8:	1000041e 	bne	r2,zero,a0dc0c <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  a0dbfc:	0a0db6c0 	call	a0db6c <alt_get_errno>
  a0dc00:	1007883a 	mov	r3,r2
  a0dc04:	008004c4 	movi	r2,19
  a0dc08:	18800015 	stw	r2,0(r3)
  }

  return dev;
  a0dc0c:	e0bffe17 	ldw	r2,-8(fp)

}
  a0dc10:	e037883a 	mov	sp,fp
  a0dc14:	dfc00117 	ldw	ra,4(sp)
  a0dc18:	df000017 	ldw	fp,0(sp)
  a0dc1c:	dec00204 	addi	sp,sp,8
  a0dc20:	f800283a 	ret

00a0dc24 <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
  a0dc24:	defffe04 	addi	sp,sp,-8
  a0dc28:	df000115 	stw	fp,4(sp)
  a0dc2c:	df000104 	addi	fp,sp,4
  a0dc30:	e13fff15 	stw	r4,-4(fp)
  return;
}
  a0dc34:	e037883a 	mov	sp,fp
  a0dc38:	df000017 	ldw	fp,0(sp)
  a0dc3c:	dec00104 	addi	sp,sp,4
  a0dc40:	f800283a 	ret

00a0dc44 <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
  a0dc44:	defff904 	addi	sp,sp,-28
  a0dc48:	dfc00615 	stw	ra,24(sp)
  a0dc4c:	df000515 	stw	fp,20(sp)
  a0dc50:	df000504 	addi	fp,sp,20
  a0dc54:	e13ffe15 	stw	r4,-8(fp)
  a0dc58:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  a0dc5c:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
  a0dc60:	e0bffe17 	ldw	r2,-8(fp)
  a0dc64:	11000704 	addi	r4,r2,28
  a0dc68:	01400044 	movi	r5,1
  a0dc6c:	0a0e0240 	call	a0e024 <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
  a0dc70:	e0bffe17 	ldw	r2,-8(fp)
  a0dc74:	10800317 	ldw	r2,12(r2)
  a0dc78:	10800037 	ldwio	r2,0(r2)
  a0dc7c:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
  a0dc80:	e13ffe17 	ldw	r4,-8(fp)
  a0dc84:	e17ffc17 	ldw	r5,-16(fp)
  a0dc88:	0a0dd000 	call	a0dd00 <alt_mailbox_increment_ptr>
  a0dc8c:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
  a0dc90:	e0bffe17 	ldw	r2,-8(fp)
  a0dc94:	10800417 	ldw	r2,16(r2)
  a0dc98:	10800037 	ldwio	r2,0(r2)
  a0dc9c:	1007883a 	mov	r3,r2
  a0dca0:	e0bffb17 	ldw	r2,-20(fp)
  a0dca4:	1880061e 	bne	r3,r2,a0dcc0 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
  a0dca8:	0a0db6c0 	call	a0db6c <alt_get_errno>
  a0dcac:	00c002c4 	movi	r3,11
  a0dcb0:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
  a0dcb4:	00bffd44 	movi	r2,-11
  a0dcb8:	e0bffd15 	stw	r2,-12(fp)
  a0dcbc:	00000706 	br	a0dcdc <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
  a0dcc0:	e0bffc17 	ldw	r2,-16(fp)
  a0dcc4:	e0ffff17 	ldw	r3,-4(fp)
  a0dcc8:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
  a0dccc:	e0bffe17 	ldw	r2,-8(fp)
  a0dcd0:	10800317 	ldw	r2,12(r2)
  a0dcd4:	e0fffb17 	ldw	r3,-20(fp)
  a0dcd8:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
  a0dcdc:	e0bffe17 	ldw	r2,-8(fp)
  a0dce0:	11000704 	addi	r4,r2,28
  a0dce4:	0a0e0a40 	call	a0e0a4 <altera_avalon_mutex_unlock>

  return ret_code;
  a0dce8:	e0bffd17 	ldw	r2,-12(fp)

}
  a0dcec:	e037883a 	mov	sp,fp
  a0dcf0:	dfc00117 	ldw	ra,4(sp)
  a0dcf4:	df000017 	ldw	fp,0(sp)
  a0dcf8:	dec00204 	addi	sp,sp,8
  a0dcfc:	f800283a 	ret

00a0dd00 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
  a0dd00:	defffd04 	addi	sp,sp,-12
  a0dd04:	df000215 	stw	fp,8(sp)
  a0dd08:	df000204 	addi	fp,sp,8
  a0dd0c:	e13ffe15 	stw	r4,-8(fp)
  a0dd10:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
  a0dd14:	e0bfff17 	ldw	r2,-4(fp)
  a0dd18:	10800104 	addi	r2,r2,4
  a0dd1c:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
  a0dd20:	e0bffe17 	ldw	r2,-8(fp)
  a0dd24:	10c00617 	ldw	r3,24(r2)
  a0dd28:	e0bfff17 	ldw	r2,-4(fp)
  a0dd2c:	1880032e 	bgeu	r3,r2,a0dd3c <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
  a0dd30:	e0bffe17 	ldw	r2,-8(fp)
  a0dd34:	10800517 	ldw	r2,20(r2)
  a0dd38:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
  a0dd3c:	e0bfff17 	ldw	r2,-4(fp)
}
  a0dd40:	e037883a 	mov	sp,fp
  a0dd44:	df000017 	ldw	fp,0(sp)
  a0dd48:	dec00104 	addi	sp,sp,4
  a0dd4c:	f800283a 	ret

00a0dd50 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
  a0dd50:	defffa04 	addi	sp,sp,-24
  a0dd54:	dfc00515 	stw	ra,20(sp)
  a0dd58:	df000415 	stw	fp,16(sp)
  a0dd5c:	dc000315 	stw	r16,12(sp)
  a0dd60:	df000304 	addi	fp,sp,12
  a0dd64:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  a0dd68:	e0bfff17 	ldw	r2,-4(fp)
  a0dd6c:	11000b04 	addi	r4,r2,44
  a0dd70:	01400044 	movi	r5,1
  a0dd74:	0a0e0240 	call	a0e024 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  a0dd78:	e0bfff17 	ldw	r2,-4(fp)
  a0dd7c:	10800417 	ldw	r2,16(r2)
  a0dd80:	10800037 	ldwio	r2,0(r2)
  a0dd84:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
  a0dd88:	e0bfff17 	ldw	r2,-4(fp)
  a0dd8c:	10800317 	ldw	r2,12(r2)
  a0dd90:	10800037 	ldwio	r2,0(r2)
  a0dd94:	1007883a 	mov	r3,r2
  a0dd98:	e0bffd17 	ldw	r2,-12(fp)
  a0dd9c:	18bffa26 	beq	r3,r2,a0dd88 <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
  a0dda0:	e0bffd17 	ldw	r2,-12(fp)
  a0dda4:	10800037 	ldwio	r2,0(r2)
  a0dda8:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
  a0ddac:	e0bfff17 	ldw	r2,-4(fp)
  a0ddb0:	10800417 	ldw	r2,16(r2)
  a0ddb4:	1021883a 	mov	r16,r2
  a0ddb8:	e13fff17 	ldw	r4,-4(fp)
  a0ddbc:	e17ffd17 	ldw	r5,-12(fp)
  a0ddc0:	0a0dd000 	call	a0dd00 <alt_mailbox_increment_ptr>
  a0ddc4:	1007883a 	mov	r3,r2
  a0ddc8:	8005883a 	mov	r2,r16
  a0ddcc:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
  a0ddd0:	e0bfff17 	ldw	r2,-4(fp)
  a0ddd4:	11000b04 	addi	r4,r2,44
  a0ddd8:	0a0e0a40 	call	a0e0a4 <altera_avalon_mutex_unlock>

  return msg;
  a0dddc:	e0bffe17 	ldw	r2,-8(fp)

}
  a0dde0:	e037883a 	mov	sp,fp
  a0dde4:	dfc00217 	ldw	ra,8(sp)
  a0dde8:	df000117 	ldw	fp,4(sp)
  a0ddec:	dc000017 	ldw	r16,0(sp)
  a0ddf0:	dec00304 	addi	sp,sp,12
  a0ddf4:	f800283a 	ret

00a0ddf8 <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
  a0ddf8:	defff904 	addi	sp,sp,-28
  a0ddfc:	dfc00615 	stw	ra,24(sp)
  a0de00:	df000515 	stw	fp,20(sp)
  a0de04:	dc000415 	stw	r16,16(sp)
  a0de08:	df000404 	addi	fp,sp,16
  a0de0c:	e13ffe15 	stw	r4,-8(fp)
  a0de10:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
  a0de14:	e0bfff17 	ldw	r2,-4(fp)
  a0de18:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  a0de1c:	e0bffe17 	ldw	r2,-8(fp)
  a0de20:	11000b04 	addi	r4,r2,44
  a0de24:	01400044 	movi	r5,1
  a0de28:	0a0e0240 	call	a0e024 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  a0de2c:	e0bffe17 	ldw	r2,-8(fp)
  a0de30:	10800417 	ldw	r2,16(r2)
  a0de34:	10800037 	ldwio	r2,0(r2)
  a0de38:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
  a0de3c:	e0bffe17 	ldw	r2,-8(fp)
  a0de40:	10800317 	ldw	r2,12(r2)
  a0de44:	10800037 	ldwio	r2,0(r2)
  a0de48:	1007883a 	mov	r3,r2
  a0de4c:	e0bffc17 	ldw	r2,-16(fp)
  a0de50:	1880091e 	bne	r3,r2,a0de78 <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
  a0de54:	e0ffff17 	ldw	r3,-4(fp)
  a0de58:	00bffd44 	movi	r2,-11
  a0de5c:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
  a0de60:	0a0db6c0 	call	a0db6c <alt_get_errno>
  a0de64:	1007883a 	mov	r3,r2
  a0de68:	008002c4 	movi	r2,11
  a0de6c:	18800015 	stw	r2,0(r3)
    msg = 0;
  a0de70:	e03ffd15 	stw	zero,-12(fp)
  a0de74:	00000c06 	br	a0dea8 <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
  a0de78:	e0bffc17 	ldw	r2,-16(fp)
  a0de7c:	10800037 	ldwio	r2,0(r2)
  a0de80:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
  a0de84:	e0bffe17 	ldw	r2,-8(fp)
  a0de88:	10800417 	ldw	r2,16(r2)
  a0de8c:	1021883a 	mov	r16,r2
  a0de90:	e13ffe17 	ldw	r4,-8(fp)
  a0de94:	e17ffc17 	ldw	r5,-16(fp)
  a0de98:	0a0dd000 	call	a0dd00 <alt_mailbox_increment_ptr>
  a0de9c:	1007883a 	mov	r3,r2
  a0dea0:	8005883a 	mov	r2,r16
  a0dea4:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
  a0dea8:	e0bffe17 	ldw	r2,-8(fp)
  a0deac:	11000b04 	addi	r4,r2,44
  a0deb0:	0a0e0a40 	call	a0e0a4 <altera_avalon_mutex_unlock>

  return msg;
  a0deb4:	e0bffd17 	ldw	r2,-12(fp)

}
  a0deb8:	e037883a 	mov	sp,fp
  a0debc:	dfc00217 	ldw	ra,8(sp)
  a0dec0:	df000117 	ldw	fp,4(sp)
  a0dec4:	dc000017 	ldw	r16,0(sp)
  a0dec8:	dec00304 	addi	sp,sp,12
  a0decc:	f800283a 	ret

00a0ded0 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  a0ded0:	defff904 	addi	sp,sp,-28
  a0ded4:	df000615 	stw	fp,24(sp)
  a0ded8:	df000604 	addi	fp,sp,24
  a0dedc:	e13ffe15 	stw	r4,-8(fp)
  a0dee0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
  a0dee4:	00bfffc4 	movi	r2,-1
  a0dee8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
  a0deec:	0005317a 	rdctl	r2,cpuid
  a0def0:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
  a0def4:	e0bffd17 	ldw	r2,-12(fp)
  a0def8:	1006943a 	slli	r3,r2,16
  a0defc:	e0bfff17 	ldw	r2,-4(fp)
  a0df00:	1884b03a 	or	r2,r3,r2
  a0df04:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
  a0df08:	e0bffe17 	ldw	r2,-8(fp)
  a0df0c:	10800317 	ldw	r2,12(r2)
  a0df10:	e0fffc17 	ldw	r3,-16(fp)
  a0df14:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  a0df18:	e0bffe17 	ldw	r2,-8(fp)
  a0df1c:	10800317 	ldw	r2,12(r2)
  a0df20:	10800037 	ldwio	r2,0(r2)
  a0df24:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
  a0df28:	e0fffb17 	ldw	r3,-20(fp)
  a0df2c:	e0bffc17 	ldw	r2,-16(fp)
  a0df30:	1880011e 	bne	r3,r2,a0df38 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
  a0df34:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
  a0df38:	e0bffa17 	ldw	r2,-24(fp)
}
  a0df3c:	e037883a 	mov	sp,fp
  a0df40:	df000017 	ldw	fp,0(sp)
  a0df44:	dec00104 	addi	sp,sp,4
  a0df48:	f800283a 	ret

00a0df4c <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
  a0df4c:	defffc04 	addi	sp,sp,-16
  a0df50:	dfc00315 	stw	ra,12(sp)
  a0df54:	df000215 	stw	fp,8(sp)
  a0df58:	df000204 	addi	fp,sp,8
  a0df5c:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
  a0df60:	e13fff17 	ldw	r4,-4(fp)
  a0df64:	d1601804 	addi	r5,gp,-32672
  a0df68:	0a0fab40 	call	a0fab4 <alt_find_dev>
  a0df6c:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  a0df70:	e0bffe17 	ldw	r2,-8(fp)
  a0df74:	1004c03a 	cmpne	r2,r2,zero
  a0df78:	1000041e 	bne	r2,zero,a0df8c <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  a0df7c:	0a0dfa40 	call	a0dfa4 <alt_get_errno>
  a0df80:	1007883a 	mov	r3,r2
  a0df84:	008004c4 	movi	r2,19
  a0df88:	18800015 	stw	r2,0(r3)
  }

  return dev;
  a0df8c:	e0bffe17 	ldw	r2,-8(fp)
}
  a0df90:	e037883a 	mov	sp,fp
  a0df94:	dfc00117 	ldw	ra,4(sp)
  a0df98:	df000017 	ldw	fp,0(sp)
  a0df9c:	dec00204 	addi	sp,sp,8
  a0dfa0:	f800283a 	ret

00a0dfa4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0dfa4:	defffd04 	addi	sp,sp,-12
  a0dfa8:	dfc00215 	stw	ra,8(sp)
  a0dfac:	df000115 	stw	fp,4(sp)
  a0dfb0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0dfb4:	00802874 	movhi	r2,161
  a0dfb8:	108adc04 	addi	r2,r2,11120
  a0dfbc:	10800017 	ldw	r2,0(r2)
  a0dfc0:	1005003a 	cmpeq	r2,r2,zero
  a0dfc4:	1000061e 	bne	r2,zero,a0dfe0 <alt_get_errno+0x3c>
  a0dfc8:	00802874 	movhi	r2,161
  a0dfcc:	108adc04 	addi	r2,r2,11120
  a0dfd0:	10800017 	ldw	r2,0(r2)
  a0dfd4:	103ee83a 	callr	r2
  a0dfd8:	e0bfff15 	stw	r2,-4(fp)
  a0dfdc:	00000306 	br	a0dfec <alt_get_errno+0x48>
  a0dfe0:	00802874 	movhi	r2,161
  a0dfe4:	1091e104 	addi	r2,r2,18308
  a0dfe8:	e0bfff15 	stw	r2,-4(fp)
  a0dfec:	e0bfff17 	ldw	r2,-4(fp)
}
  a0dff0:	e037883a 	mov	sp,fp
  a0dff4:	dfc00117 	ldw	ra,4(sp)
  a0dff8:	df000017 	ldw	fp,0(sp)
  a0dffc:	dec00204 	addi	sp,sp,8
  a0e000:	f800283a 	ret

00a0e004 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
  a0e004:	defffe04 	addi	sp,sp,-8
  a0e008:	df000115 	stw	fp,4(sp)
  a0e00c:	df000104 	addi	fp,sp,4
  a0e010:	e13fff15 	stw	r4,-4(fp)
  return;
}
  a0e014:	e037883a 	mov	sp,fp
  a0e018:	df000017 	ldw	fp,0(sp)
  a0e01c:	dec00104 	addi	sp,sp,4
  a0e020:	f800283a 	ret

00a0e024 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
  a0e024:	defffc04 	addi	sp,sp,-16
  a0e028:	dfc00315 	stw	ra,12(sp)
  a0e02c:	df000215 	stw	fp,8(sp)
  a0e030:	df000204 	addi	fp,sp,8
  a0e034:	e13ffe15 	stw	r4,-8(fp)
  a0e038:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
  a0e03c:	e13ffe17 	ldw	r4,-8(fp)
  a0e040:	e17fff17 	ldw	r5,-4(fp)
  a0e044:	0a0ded00 	call	a0ded0 <alt_mutex_trylock>
  a0e048:	1004c03a 	cmpne	r2,r2,zero
  a0e04c:	103ffb1e 	bne	r2,zero,a0e03c <altera_avalon_mutex_lock+0x18>
}
  a0e050:	e037883a 	mov	sp,fp
  a0e054:	dfc00117 	ldw	ra,4(sp)
  a0e058:	df000017 	ldw	fp,0(sp)
  a0e05c:	dec00204 	addi	sp,sp,8
  a0e060:	f800283a 	ret

00a0e064 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  a0e064:	defffb04 	addi	sp,sp,-20
  a0e068:	dfc00415 	stw	ra,16(sp)
  a0e06c:	df000315 	stw	fp,12(sp)
  a0e070:	df000304 	addi	fp,sp,12
  a0e074:	e13ffe15 	stw	r4,-8(fp)
  a0e078:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
  a0e07c:	e13ffe17 	ldw	r4,-8(fp)
  a0e080:	e17fff17 	ldw	r5,-4(fp)
  a0e084:	0a0ded00 	call	a0ded0 <alt_mutex_trylock>
  a0e088:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
  a0e08c:	e0bffd17 	ldw	r2,-12(fp)
}
  a0e090:	e037883a 	mov	sp,fp
  a0e094:	dfc00117 	ldw	ra,4(sp)
  a0e098:	df000017 	ldw	fp,0(sp)
  a0e09c:	dec00204 	addi	sp,sp,8
  a0e0a0:	f800283a 	ret

00a0e0a4 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  a0e0a4:	defffd04 	addi	sp,sp,-12
  a0e0a8:	df000215 	stw	fp,8(sp)
  a0e0ac:	df000204 	addi	fp,sp,8
  a0e0b0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
  a0e0b4:	0005317a 	rdctl	r2,cpuid
  a0e0b8:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
  a0e0bc:	e0bfff17 	ldw	r2,-4(fp)
  a0e0c0:	10800317 	ldw	r2,12(r2)
  a0e0c4:	10800104 	addi	r2,r2,4
  a0e0c8:	1007883a 	mov	r3,r2
  a0e0cc:	00800044 	movi	r2,1
  a0e0d0:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
  a0e0d4:	e0bfff17 	ldw	r2,-4(fp)
  a0e0d8:	11000317 	ldw	r4,12(r2)
  a0e0dc:	e0bffe17 	ldw	r2,-8(fp)
  a0e0e0:	1004943a 	slli	r2,r2,16
  a0e0e4:	1007883a 	mov	r3,r2
  a0e0e8:	2005883a 	mov	r2,r4
  a0e0ec:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
  a0e0f0:	e037883a 	mov	sp,fp
  a0e0f4:	df000017 	ldw	fp,0(sp)
  a0e0f8:	dec00104 	addi	sp,sp,4
  a0e0fc:	f800283a 	ret

00a0e100 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  a0e100:	defff904 	addi	sp,sp,-28
  a0e104:	df000615 	stw	fp,24(sp)
  a0e108:	df000604 	addi	fp,sp,24
  a0e10c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
  a0e110:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
  a0e114:	0005317a 	rdctl	r2,cpuid
  a0e118:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  a0e11c:	e0bfff17 	ldw	r2,-4(fp)
  a0e120:	10800317 	ldw	r2,12(r2)
  a0e124:	10800037 	ldwio	r2,0(r2)
  a0e128:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
  a0e12c:	e0bffd17 	ldw	r2,-12(fp)
  a0e130:	10bfffec 	andhi	r2,r2,65535
  a0e134:	1004d43a 	srli	r2,r2,16
  a0e138:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
  a0e13c:	e0fffc17 	ldw	r3,-16(fp)
  a0e140:	e0bffe17 	ldw	r2,-8(fp)
  a0e144:	1880081e 	bne	r3,r2,a0e168 <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
  a0e148:	e0bffd17 	ldw	r2,-12(fp)
  a0e14c:	10bfffcc 	andi	r2,r2,65535
  a0e150:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
  a0e154:	e0bffb17 	ldw	r2,-20(fp)
  a0e158:	1005003a 	cmpeq	r2,r2,zero
  a0e15c:	1000021e 	bne	r2,zero,a0e168 <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
  a0e160:	00800044 	movi	r2,1
  a0e164:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
  a0e168:	e0bffa17 	ldw	r2,-24(fp)
}
  a0e16c:	e037883a 	mov	sp,fp
  a0e170:	df000017 	ldw	fp,0(sp)
  a0e174:	dec00104 	addi	sp,sp,4
  a0e178:	f800283a 	ret

00a0e17c <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  a0e17c:	defffc04 	addi	sp,sp,-16
  a0e180:	df000315 	stw	fp,12(sp)
  a0e184:	df000304 	addi	fp,sp,12
  a0e188:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
  a0e18c:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
  a0e190:	e0bfff17 	ldw	r2,-4(fp)
  a0e194:	10800317 	ldw	r2,12(r2)
  a0e198:	10800104 	addi	r2,r2,4
  a0e19c:	10800037 	ldwio	r2,0(r2)
  a0e1a0:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
  a0e1a4:	e0bffe17 	ldw	r2,-8(fp)
  a0e1a8:	1080004c 	andi	r2,r2,1
  a0e1ac:	10803fcc 	andi	r2,r2,255
  a0e1b0:	1005003a 	cmpeq	r2,r2,zero
  a0e1b4:	1000021e 	bne	r2,zero,a0e1c0 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
  a0e1b8:	00800044 	movi	r2,1
  a0e1bc:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
  a0e1c0:	e0bffd17 	ldw	r2,-12(fp)
}
  a0e1c4:	e037883a 	mov	sp,fp
  a0e1c8:	df000017 	ldw	fp,0(sp)
  a0e1cc:	dec00104 	addi	sp,sp,4
  a0e1d0:	f800283a 	ret

00a0e1d4 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  a0e1d4:	defffc04 	addi	sp,sp,-16
  a0e1d8:	dfc00315 	stw	ra,12(sp)
  a0e1dc:	df000215 	stw	fp,8(sp)
  a0e1e0:	df000204 	addi	fp,sp,8
  a0e1e4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  a0e1e8:	e13fff17 	ldw	r4,-4(fp)
  a0e1ec:	01402874 	movhi	r5,161
  a0e1f0:	294ad904 	addi	r5,r5,11108
  a0e1f4:	0a0fab40 	call	a0fab4 <alt_find_dev>
  a0e1f8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  a0e1fc:	e0bffe17 	ldw	r2,-8(fp)
}
  a0e200:	e037883a 	mov	sp,fp
  a0e204:	dfc00117 	ldw	ra,4(sp)
  a0e208:	df000017 	ldw	fp,0(sp)
  a0e20c:	dec00204 	addi	sp,sp,8
  a0e210:	f800283a 	ret

00a0e214 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  a0e214:	defff904 	addi	sp,sp,-28
  a0e218:	df000615 	stw	fp,24(sp)
  a0e21c:	df000604 	addi	fp,sp,24
  a0e220:	e13ffb15 	stw	r4,-20(fp)
  a0e224:	e17ffc15 	stw	r5,-16(fp)
  a0e228:	e1bffd15 	stw	r6,-12(fp)
  a0e22c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  a0e230:	e0bffb17 	ldw	r2,-20(fp)
  a0e234:	10c00f17 	ldw	r3,60(r2)
  a0e238:	e0bffd17 	ldw	r2,-12(fp)
  a0e23c:	10c0042e 	bgeu	r2,r3,a0e250 <alt_up_pixel_buffer_dma_draw+0x3c>
  a0e240:	e0bffb17 	ldw	r2,-20(fp)
  a0e244:	10c01017 	ldw	r3,64(r2)
  a0e248:	e0bffe17 	ldw	r2,-8(fp)
  a0e24c:	10c00336 	bltu	r2,r3,a0e25c <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  a0e250:	00bfffc4 	movi	r2,-1
  a0e254:	e0bfff15 	stw	r2,-4(fp)
  a0e258:	00005106 	br	a0e3a0 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  a0e25c:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  a0e260:	e0bffb17 	ldw	r2,-20(fp)
  a0e264:	10800d17 	ldw	r2,52(r2)
  a0e268:	1004c03a 	cmpne	r2,r2,zero
  a0e26c:	1000151e 	bne	r2,zero,a0e2c4 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  a0e270:	e0bffb17 	ldw	r2,-20(fp)
  a0e274:	10c01217 	ldw	r3,72(r2)
  a0e278:	e0bffd17 	ldw	r2,-12(fp)
  a0e27c:	1886703a 	and	r3,r3,r2
  a0e280:	e0bffb17 	ldw	r2,-20(fp)
  a0e284:	10801117 	ldw	r2,68(r2)
  a0e288:	1886983a 	sll	r3,r3,r2
  a0e28c:	e0bffa17 	ldw	r2,-24(fp)
  a0e290:	10c4b03a 	or	r2,r2,r3
  a0e294:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  a0e298:	e0bffb17 	ldw	r2,-20(fp)
  a0e29c:	10c01417 	ldw	r3,80(r2)
  a0e2a0:	e0bffe17 	ldw	r2,-8(fp)
  a0e2a4:	1886703a 	and	r3,r3,r2
  a0e2a8:	e0bffb17 	ldw	r2,-20(fp)
  a0e2ac:	10801317 	ldw	r2,76(r2)
  a0e2b0:	1886983a 	sll	r3,r3,r2
  a0e2b4:	e0bffa17 	ldw	r2,-24(fp)
  a0e2b8:	10c4b03a 	or	r2,r2,r3
  a0e2bc:	e0bffa15 	stw	r2,-24(fp)
  a0e2c0:	00001706 	br	a0e320 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  a0e2c4:	e0bffb17 	ldw	r2,-20(fp)
  a0e2c8:	10c01217 	ldw	r3,72(r2)
  a0e2cc:	e0bffd17 	ldw	r2,-12(fp)
  a0e2d0:	1886703a 	and	r3,r3,r2
  a0e2d4:	e0bffb17 	ldw	r2,-20(fp)
  a0e2d8:	10801117 	ldw	r2,68(r2)
  a0e2dc:	1886983a 	sll	r3,r3,r2
  a0e2e0:	e0bffa17 	ldw	r2,-24(fp)
  a0e2e4:	10c5883a 	add	r2,r2,r3
  a0e2e8:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  a0e2ec:	e0bffb17 	ldw	r2,-20(fp)
  a0e2f0:	10c01417 	ldw	r3,80(r2)
  a0e2f4:	e0bffe17 	ldw	r2,-8(fp)
  a0e2f8:	1886703a 	and	r3,r3,r2
  a0e2fc:	e0bffb17 	ldw	r2,-20(fp)
  a0e300:	10800f17 	ldw	r2,60(r2)
  a0e304:	1887383a 	mul	r3,r3,r2
  a0e308:	e0bffb17 	ldw	r2,-20(fp)
  a0e30c:	10801117 	ldw	r2,68(r2)
  a0e310:	1886983a 	sll	r3,r3,r2
  a0e314:	e0bffa17 	ldw	r2,-24(fp)
  a0e318:	10c5883a 	add	r2,r2,r3
  a0e31c:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  a0e320:	e0bffb17 	ldw	r2,-20(fp)
  a0e324:	10800e17 	ldw	r2,56(r2)
  a0e328:	10800058 	cmpnei	r2,r2,1
  a0e32c:	1000081e 	bne	r2,zero,a0e350 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  a0e330:	e0bffb17 	ldw	r2,-20(fp)
  a0e334:	10800c17 	ldw	r2,48(r2)
  a0e338:	1007883a 	mov	r3,r2
  a0e33c:	e0bffa17 	ldw	r2,-24(fp)
  a0e340:	1885883a 	add	r2,r3,r2
  a0e344:	e0fffc17 	ldw	r3,-16(fp)
  a0e348:	10c00025 	stbio	r3,0(r2)
  a0e34c:	00001306 	br	a0e39c <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  a0e350:	e0bffb17 	ldw	r2,-20(fp)
  a0e354:	10800e17 	ldw	r2,56(r2)
  a0e358:	10800098 	cmpnei	r2,r2,2
  a0e35c:	1000081e 	bne	r2,zero,a0e380 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  a0e360:	e0bffb17 	ldw	r2,-20(fp)
  a0e364:	10800c17 	ldw	r2,48(r2)
  a0e368:	1007883a 	mov	r3,r2
  a0e36c:	e0bffa17 	ldw	r2,-24(fp)
  a0e370:	1885883a 	add	r2,r3,r2
  a0e374:	e0fffc17 	ldw	r3,-16(fp)
  a0e378:	10c0002d 	sthio	r3,0(r2)
  a0e37c:	00000706 	br	a0e39c <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  a0e380:	e0bffb17 	ldw	r2,-20(fp)
  a0e384:	10800c17 	ldw	r2,48(r2)
  a0e388:	1007883a 	mov	r3,r2
  a0e38c:	e0bffa17 	ldw	r2,-24(fp)
  a0e390:	1885883a 	add	r2,r3,r2
  a0e394:	e0fffc17 	ldw	r3,-16(fp)
  a0e398:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  a0e39c:	e03fff15 	stw	zero,-4(fp)
  a0e3a0:	e0bfff17 	ldw	r2,-4(fp)
}
  a0e3a4:	e037883a 	mov	sp,fp
  a0e3a8:	df000017 	ldw	fp,0(sp)
  a0e3ac:	dec00104 	addi	sp,sp,4
  a0e3b0:	f800283a 	ret

00a0e3b4 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  a0e3b4:	defffd04 	addi	sp,sp,-12
  a0e3b8:	df000215 	stw	fp,8(sp)
  a0e3bc:	df000204 	addi	fp,sp,8
  a0e3c0:	e13ffe15 	stw	r4,-8(fp)
  a0e3c4:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  a0e3c8:	e0bffe17 	ldw	r2,-8(fp)
  a0e3cc:	10800a17 	ldw	r2,40(r2)
  a0e3d0:	10800104 	addi	r2,r2,4
  a0e3d4:	e0ffff17 	ldw	r3,-4(fp)
  a0e3d8:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  a0e3dc:	e0bffe17 	ldw	r2,-8(fp)
  a0e3e0:	10800a17 	ldw	r2,40(r2)
  a0e3e4:	10800104 	addi	r2,r2,4
  a0e3e8:	10800037 	ldwio	r2,0(r2)
  a0e3ec:	1007883a 	mov	r3,r2
  a0e3f0:	e0bffe17 	ldw	r2,-8(fp)
  a0e3f4:	10c00c15 	stw	r3,48(r2)
	return 0;
  a0e3f8:	0005883a 	mov	r2,zero
}
  a0e3fc:	e037883a 	mov	sp,fp
  a0e400:	df000017 	ldw	fp,0(sp)
  a0e404:	dec00104 	addi	sp,sp,4
  a0e408:	f800283a 	ret

00a0e40c <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  a0e40c:	defffe04 	addi	sp,sp,-8
  a0e410:	df000115 	stw	fp,4(sp)
  a0e414:	df000104 	addi	fp,sp,4
  a0e418:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  a0e41c:	e0bfff17 	ldw	r2,-4(fp)
  a0e420:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  a0e424:	e0bfff17 	ldw	r2,-4(fp)
  a0e428:	10800a17 	ldw	r2,40(r2)
  a0e42c:	1007883a 	mov	r3,r2
  a0e430:	00800044 	movi	r2,1
  a0e434:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  a0e438:	e0bfff17 	ldw	r2,-4(fp)
  a0e43c:	10c00b17 	ldw	r3,44(r2)
  a0e440:	e0bfff17 	ldw	r2,-4(fp)
  a0e444:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  a0e448:	e0bfff17 	ldw	r2,-4(fp)
  a0e44c:	11000b15 	stw	r4,44(r2)
	return 0;
  a0e450:	0005883a 	mov	r2,zero
}
  a0e454:	e037883a 	mov	sp,fp
  a0e458:	df000017 	ldw	fp,0(sp)
  a0e45c:	dec00104 	addi	sp,sp,4
  a0e460:	f800283a 	ret

00a0e464 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  a0e464:	defffe04 	addi	sp,sp,-8
  a0e468:	df000115 	stw	fp,4(sp)
  a0e46c:	df000104 	addi	fp,sp,4
  a0e470:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  a0e474:	e0bfff17 	ldw	r2,-4(fp)
  a0e478:	10800a17 	ldw	r2,40(r2)
  a0e47c:	10800304 	addi	r2,r2,12
  a0e480:	10800037 	ldwio	r2,0(r2)
  a0e484:	1080004c 	andi	r2,r2,1
}
  a0e488:	e037883a 	mov	sp,fp
  a0e48c:	df000017 	ldw	fp,0(sp)
  a0e490:	dec00104 	addi	sp,sp,4
  a0e494:	f800283a 	ret

00a0e498 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  a0e498:	defff604 	addi	sp,sp,-40
  a0e49c:	df000915 	stw	fp,36(sp)
  a0e4a0:	df000904 	addi	fp,sp,36
  a0e4a4:	e13ff715 	stw	r4,-36(fp)
  a0e4a8:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  a0e4ac:	e0bff817 	ldw	r2,-32(fp)
  a0e4b0:	10800058 	cmpnei	r2,r2,1
  a0e4b4:	1000041e 	bne	r2,zero,a0e4c8 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  a0e4b8:	e0bff717 	ldw	r2,-36(fp)
  a0e4bc:	10800c17 	ldw	r2,48(r2)
  a0e4c0:	e0bfff15 	stw	r2,-4(fp)
  a0e4c4:	00000306 	br	a0e4d4 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  a0e4c8:	e0bff717 	ldw	r2,-36(fp)
  a0e4cc:	10800b17 	ldw	r2,44(r2)
  a0e4d0:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  a0e4d4:	e0bff717 	ldw	r2,-36(fp)
  a0e4d8:	10800f17 	ldw	r2,60(r2)
  a0e4dc:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  a0e4e0:	e0bff717 	ldw	r2,-36(fp)
  a0e4e4:	10800e17 	ldw	r2,56(r2)
  a0e4e8:	10800098 	cmpnei	r2,r2,2
  a0e4ec:	1000051e 	bne	r2,zero,a0e504 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  a0e4f0:	e0fffe17 	ldw	r3,-8(fp)
  a0e4f4:	e0fffe17 	ldw	r3,-8(fp)
  a0e4f8:	18c5883a 	add	r2,r3,r3
  a0e4fc:	e0bffe15 	stw	r2,-8(fp)
  a0e500:	00000506 	br	a0e518 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  a0e504:	e13ffe17 	ldw	r4,-8(fp)
  a0e508:	e13ffe17 	ldw	r4,-8(fp)
  a0e50c:	2105883a 	add	r2,r4,r4
  a0e510:	1085883a 	add	r2,r2,r2
  a0e514:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  a0e518:	e0bff717 	ldw	r2,-36(fp)
  a0e51c:	10801017 	ldw	r2,64(r2)
  a0e520:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  a0e524:	e0bff717 	ldw	r2,-36(fp)
  a0e528:	10800d17 	ldw	r2,52(r2)
  a0e52c:	1004c03a 	cmpne	r2,r2,zero
  a0e530:	10001e1e 	bne	r2,zero,a0e5ac <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  a0e534:	e0bff717 	ldw	r2,-36(fp)
  a0e538:	10801317 	ldw	r2,76(r2)
  a0e53c:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  a0e540:	e03ffb15 	stw	zero,-20(fp)
  a0e544:	00001506 	br	a0e59c <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  a0e548:	e03ffc15 	stw	zero,-16(fp)
  a0e54c:	00000706 	br	a0e56c <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  a0e550:	e0ffff17 	ldw	r3,-4(fp)
  a0e554:	e0bffc17 	ldw	r2,-16(fp)
  a0e558:	1885883a 	add	r2,r3,r2
  a0e55c:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  a0e560:	e0bffc17 	ldw	r2,-16(fp)
  a0e564:	10800104 	addi	r2,r2,4
  a0e568:	e0bffc15 	stw	r2,-16(fp)
  a0e56c:	e0fffc17 	ldw	r3,-16(fp)
  a0e570:	e13ffe17 	ldw	r4,-8(fp)
  a0e574:	193ff636 	bltu	r3,r4,a0e550 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  a0e578:	e0fffa17 	ldw	r3,-24(fp)
  a0e57c:	00800044 	movi	r2,1
  a0e580:	10c4983a 	sll	r2,r2,r3
  a0e584:	e0ffff17 	ldw	r3,-4(fp)
  a0e588:	1887883a 	add	r3,r3,r2
  a0e58c:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  a0e590:	e13ffb17 	ldw	r4,-20(fp)
  a0e594:	21000044 	addi	r4,r4,1
  a0e598:	e13ffb15 	stw	r4,-20(fp)
  a0e59c:	e0bffb17 	ldw	r2,-20(fp)
  a0e5a0:	e0fffd17 	ldw	r3,-12(fp)
  a0e5a4:	10ffe836 	bltu	r2,r3,a0e548 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  a0e5a8:	00001006 	br	a0e5ec <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  a0e5ac:	e13ffd17 	ldw	r4,-12(fp)
  a0e5b0:	e0bffe17 	ldw	r2,-8(fp)
  a0e5b4:	2089383a 	mul	r4,r4,r2
  a0e5b8:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  a0e5bc:	e03ff915 	stw	zero,-28(fp)
  a0e5c0:	00000706 	br	a0e5e0 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  a0e5c4:	e0ffff17 	ldw	r3,-4(fp)
  a0e5c8:	e0bff917 	ldw	r2,-28(fp)
  a0e5cc:	1885883a 	add	r2,r3,r2
  a0e5d0:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  a0e5d4:	e0fff917 	ldw	r3,-28(fp)
  a0e5d8:	18c00104 	addi	r3,r3,4
  a0e5dc:	e0fff915 	stw	r3,-28(fp)
  a0e5e0:	e0bff917 	ldw	r2,-28(fp)
  a0e5e4:	e13ffd17 	ldw	r4,-12(fp)
  a0e5e8:	113ff636 	bltu	r2,r4,a0e5c4 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  a0e5ec:	e037883a 	mov	sp,fp
  a0e5f0:	df000017 	ldw	fp,0(sp)
  a0e5f4:	dec00104 	addi	sp,sp,4
  a0e5f8:	f800283a 	ret

00a0e5fc <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  a0e5fc:	deffed04 	addi	sp,sp,-76
  a0e600:	df001215 	stw	fp,72(sp)
  a0e604:	df001204 	addi	fp,sp,72
  a0e608:	e13fee15 	stw	r4,-72(fp)
  a0e60c:	e17fef15 	stw	r5,-68(fp)
  a0e610:	e1bff015 	stw	r6,-64(fp)
  a0e614:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  a0e618:	e0bfee17 	ldw	r2,-72(fp)
  a0e61c:	10800f17 	ldw	r2,60(r2)
  a0e620:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  a0e624:	e0bfee17 	ldw	r2,-72(fp)
  a0e628:	10801017 	ldw	r2,64(r2)
  a0e62c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  a0e630:	e0bfef17 	ldw	r2,-68(fp)
  a0e634:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  a0e638:	e0fff117 	ldw	r3,-60(fp)
  a0e63c:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  a0e640:	e13ff017 	ldw	r4,-64(fp)
  a0e644:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  a0e648:	e0800117 	ldw	r2,4(fp)
  a0e64c:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  a0e650:	e0c00217 	ldw	r3,8(fp)
  a0e654:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  a0e658:	e13ffa17 	ldw	r4,-24(fp)
  a0e65c:	e0bffb17 	ldw	r2,-20(fp)
  a0e660:	2080062e 	bgeu	r4,r2,a0e67c <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  a0e664:	e0fffb17 	ldw	r3,-20(fp)
  a0e668:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  a0e66c:	e13ffa17 	ldw	r4,-24(fp)
  a0e670:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  a0e674:	e0bffc17 	ldw	r2,-16(fp)
  a0e678:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  a0e67c:	e0fff817 	ldw	r3,-32(fp)
  a0e680:	e13ff917 	ldw	r4,-28(fp)
  a0e684:	1900062e 	bgeu	r3,r4,a0e6a0 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  a0e688:	e0bff917 	ldw	r2,-28(fp)
  a0e68c:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  a0e690:	e0fff817 	ldw	r3,-32(fp)
  a0e694:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  a0e698:	e13ffc17 	ldw	r4,-16(fp)
  a0e69c:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  a0e6a0:	e0bffb17 	ldw	r2,-20(fp)
  a0e6a4:	e0fffe17 	ldw	r3,-8(fp)
  a0e6a8:	10c10d2e 	bgeu	r2,r3,a0eae0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  a0e6ac:	e13ff917 	ldw	r4,-28(fp)
  a0e6b0:	e0bffd17 	ldw	r2,-12(fp)
  a0e6b4:	20800136 	bltu	r4,r2,a0e6bc <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  a0e6b8:	00010906 	br	a0eae0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  a0e6bc:	e0fffa17 	ldw	r3,-24(fp)
  a0e6c0:	e13ffe17 	ldw	r4,-8(fp)
  a0e6c4:	19000336 	bltu	r3,r4,a0e6d4 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  a0e6c8:	e0bffe17 	ldw	r2,-8(fp)
  a0e6cc:	10bfffc4 	addi	r2,r2,-1
  a0e6d0:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  a0e6d4:	e0fff817 	ldw	r3,-32(fp)
  a0e6d8:	e13ffd17 	ldw	r4,-12(fp)
  a0e6dc:	19000336 	bltu	r3,r4,a0e6ec <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  a0e6e0:	e0bffd17 	ldw	r2,-12(fp)
  a0e6e4:	10bfffc4 	addi	r2,r2,-1
  a0e6e8:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  a0e6ec:	e0800317 	ldw	r2,12(fp)
  a0e6f0:	10800058 	cmpnei	r2,r2,1
  a0e6f4:	1000041e 	bne	r2,zero,a0e708 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  a0e6f8:	e0bfee17 	ldw	r2,-72(fp)
  a0e6fc:	10800c17 	ldw	r2,48(r2)
  a0e700:	e0bfff15 	stw	r2,-4(fp)
  a0e704:	00000306 	br	a0e714 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  a0e708:	e0bfee17 	ldw	r2,-72(fp)
  a0e70c:	10800b17 	ldw	r2,44(r2)
  a0e710:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  a0e714:	e0bfee17 	ldw	r2,-72(fp)
  a0e718:	10800d17 	ldw	r2,52(r2)
  a0e71c:	1004c03a 	cmpne	r2,r2,zero
  a0e720:	1000721e 	bne	r2,zero,a0e8ec <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  a0e724:	e0bfee17 	ldw	r2,-72(fp)
  a0e728:	10801317 	ldw	r2,76(r2)
  a0e72c:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  a0e730:	e0bff417 	ldw	r2,-48(fp)
  a0e734:	e0fff917 	ldw	r3,-28(fp)
  a0e738:	1884983a 	sll	r2,r3,r2
  a0e73c:	e13fff17 	ldw	r4,-4(fp)
  a0e740:	2089883a 	add	r4,r4,r2
  a0e744:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  a0e748:	e0bfee17 	ldw	r2,-72(fp)
  a0e74c:	10800e17 	ldw	r2,56(r2)
  a0e750:	10800058 	cmpnei	r2,r2,1
  a0e754:	10001e1e 	bne	r2,zero,a0e7d0 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  a0e758:	e0bff917 	ldw	r2,-28(fp)
  a0e75c:	e0bff515 	stw	r2,-44(fp)
  a0e760:	00001706 	br	a0e7c0 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  a0e764:	e0fffb17 	ldw	r3,-20(fp)
  a0e768:	e0fff615 	stw	r3,-40(fp)
  a0e76c:	00000806 	br	a0e790 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  a0e770:	e0ffff17 	ldw	r3,-4(fp)
  a0e774:	e0bff617 	ldw	r2,-40(fp)
  a0e778:	1885883a 	add	r2,r3,r2
  a0e77c:	e0fff717 	ldw	r3,-36(fp)
  a0e780:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  a0e784:	e13ff617 	ldw	r4,-40(fp)
  a0e788:	21000044 	addi	r4,r4,1
  a0e78c:	e13ff615 	stw	r4,-40(fp)
  a0e790:	e0bffa17 	ldw	r2,-24(fp)
  a0e794:	e0fff617 	ldw	r3,-40(fp)
  a0e798:	10fff52e 	bgeu	r2,r3,a0e770 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  a0e79c:	e0fff417 	ldw	r3,-48(fp)
  a0e7a0:	00800044 	movi	r2,1
  a0e7a4:	10c4983a 	sll	r2,r2,r3
  a0e7a8:	e13fff17 	ldw	r4,-4(fp)
  a0e7ac:	2089883a 	add	r4,r4,r2
  a0e7b0:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  a0e7b4:	e0bff517 	ldw	r2,-44(fp)
  a0e7b8:	10800044 	addi	r2,r2,1
  a0e7bc:	e0bff515 	stw	r2,-44(fp)
  a0e7c0:	e0fff817 	ldw	r3,-32(fp)
  a0e7c4:	e13ff517 	ldw	r4,-44(fp)
  a0e7c8:	193fe62e 	bgeu	r3,r4,a0e764 <alt_up_pixel_buffer_dma_draw_box+0x168>
  a0e7cc:	0000c406 	br	a0eae0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  a0e7d0:	e0bfee17 	ldw	r2,-72(fp)
  a0e7d4:	10800e17 	ldw	r2,56(r2)
  a0e7d8:	10800098 	cmpnei	r2,r2,2
  a0e7dc:	1000211e 	bne	r2,zero,a0e864 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  a0e7e0:	e0bff917 	ldw	r2,-28(fp)
  a0e7e4:	e0bff515 	stw	r2,-44(fp)
  a0e7e8:	00001a06 	br	a0e854 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  a0e7ec:	e0fffb17 	ldw	r3,-20(fp)
  a0e7f0:	e0fff615 	stw	r3,-40(fp)
  a0e7f4:	00000b06 	br	a0e824 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  a0e7f8:	e13ff617 	ldw	r4,-40(fp)
  a0e7fc:	e13ff617 	ldw	r4,-40(fp)
  a0e800:	2105883a 	add	r2,r4,r4
  a0e804:	1007883a 	mov	r3,r2
  a0e808:	e0bfff17 	ldw	r2,-4(fp)
  a0e80c:	1885883a 	add	r2,r3,r2
  a0e810:	e0fff717 	ldw	r3,-36(fp)
  a0e814:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  a0e818:	e0bff617 	ldw	r2,-40(fp)
  a0e81c:	10800044 	addi	r2,r2,1
  a0e820:	e0bff615 	stw	r2,-40(fp)
  a0e824:	e0fffa17 	ldw	r3,-24(fp)
  a0e828:	e13ff617 	ldw	r4,-40(fp)
  a0e82c:	193ff22e 	bgeu	r3,r4,a0e7f8 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  a0e830:	e0fff417 	ldw	r3,-48(fp)
  a0e834:	00800044 	movi	r2,1
  a0e838:	10c4983a 	sll	r2,r2,r3
  a0e83c:	e0ffff17 	ldw	r3,-4(fp)
  a0e840:	1887883a 	add	r3,r3,r2
  a0e844:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  a0e848:	e13ff517 	ldw	r4,-44(fp)
  a0e84c:	21000044 	addi	r4,r4,1
  a0e850:	e13ff515 	stw	r4,-44(fp)
  a0e854:	e0bff817 	ldw	r2,-32(fp)
  a0e858:	e0fff517 	ldw	r3,-44(fp)
  a0e85c:	10ffe32e 	bgeu	r2,r3,a0e7ec <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  a0e860:	00009f06 	br	a0eae0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  a0e864:	e13ff917 	ldw	r4,-28(fp)
  a0e868:	e13ff515 	stw	r4,-44(fp)
  a0e86c:	00001b06 	br	a0e8dc <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  a0e870:	e0bffb17 	ldw	r2,-20(fp)
  a0e874:	e0bff615 	stw	r2,-40(fp)
  a0e878:	00000c06 	br	a0e8ac <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  a0e87c:	e0fff617 	ldw	r3,-40(fp)
  a0e880:	e0fff617 	ldw	r3,-40(fp)
  a0e884:	18c5883a 	add	r2,r3,r3
  a0e888:	1085883a 	add	r2,r2,r2
  a0e88c:	1007883a 	mov	r3,r2
  a0e890:	e0bfff17 	ldw	r2,-4(fp)
  a0e894:	1885883a 	add	r2,r3,r2
  a0e898:	e0fff717 	ldw	r3,-36(fp)
  a0e89c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  a0e8a0:	e13ff617 	ldw	r4,-40(fp)
  a0e8a4:	21000044 	addi	r4,r4,1
  a0e8a8:	e13ff615 	stw	r4,-40(fp)
  a0e8ac:	e0bffa17 	ldw	r2,-24(fp)
  a0e8b0:	e0fff617 	ldw	r3,-40(fp)
  a0e8b4:	10fff12e 	bgeu	r2,r3,a0e87c <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  a0e8b8:	e0fff417 	ldw	r3,-48(fp)
  a0e8bc:	00800044 	movi	r2,1
  a0e8c0:	10c4983a 	sll	r2,r2,r3
  a0e8c4:	e13fff17 	ldw	r4,-4(fp)
  a0e8c8:	2089883a 	add	r4,r4,r2
  a0e8cc:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  a0e8d0:	e0bff517 	ldw	r2,-44(fp)
  a0e8d4:	10800044 	addi	r2,r2,1
  a0e8d8:	e0bff515 	stw	r2,-44(fp)
  a0e8dc:	e0fff817 	ldw	r3,-32(fp)
  a0e8e0:	e13ff517 	ldw	r4,-44(fp)
  a0e8e4:	193fe22e 	bgeu	r3,r4,a0e870 <alt_up_pixel_buffer_dma_draw_box+0x274>
  a0e8e8:	00007d06 	br	a0eae0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  a0e8ec:	e0bfee17 	ldw	r2,-72(fp)
  a0e8f0:	10800e17 	ldw	r2,56(r2)
  a0e8f4:	10800058 	cmpnei	r2,r2,1
  a0e8f8:	1000221e 	bne	r2,zero,a0e984 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  a0e8fc:	e0fff917 	ldw	r3,-28(fp)
  a0e900:	e13ffe17 	ldw	r4,-8(fp)
  a0e904:	1905383a 	mul	r2,r3,r4
  a0e908:	e0ffff17 	ldw	r3,-4(fp)
  a0e90c:	1887883a 	add	r3,r3,r2
  a0e910:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  a0e914:	e13ff917 	ldw	r4,-28(fp)
  a0e918:	e13ff215 	stw	r4,-56(fp)
  a0e91c:	00001506 	br	a0e974 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  a0e920:	e0bffb17 	ldw	r2,-20(fp)
  a0e924:	e0bff315 	stw	r2,-52(fp)
  a0e928:	00000806 	br	a0e94c <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  a0e92c:	e0ffff17 	ldw	r3,-4(fp)
  a0e930:	e0bff317 	ldw	r2,-52(fp)
  a0e934:	1885883a 	add	r2,r3,r2
  a0e938:	e0fff717 	ldw	r3,-36(fp)
  a0e93c:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  a0e940:	e0fff317 	ldw	r3,-52(fp)
  a0e944:	18c00044 	addi	r3,r3,1
  a0e948:	e0fff315 	stw	r3,-52(fp)
  a0e94c:	e13ffa17 	ldw	r4,-24(fp)
  a0e950:	e0bff317 	ldw	r2,-52(fp)
  a0e954:	20bff52e 	bgeu	r4,r2,a0e92c <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  a0e958:	e0ffff17 	ldw	r3,-4(fp)
  a0e95c:	e13ffe17 	ldw	r4,-8(fp)
  a0e960:	1907883a 	add	r3,r3,r4
  a0e964:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  a0e968:	e0bff217 	ldw	r2,-56(fp)
  a0e96c:	10800044 	addi	r2,r2,1
  a0e970:	e0bff215 	stw	r2,-56(fp)
  a0e974:	e0fff817 	ldw	r3,-32(fp)
  a0e978:	e13ff217 	ldw	r4,-56(fp)
  a0e97c:	193fe82e 	bgeu	r3,r4,a0e920 <alt_up_pixel_buffer_dma_draw_box+0x324>
  a0e980:	00005706 	br	a0eae0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  a0e984:	e0bfee17 	ldw	r2,-72(fp)
  a0e988:	10800e17 	ldw	r2,56(r2)
  a0e98c:	10800098 	cmpnei	r2,r2,2
  a0e990:	1000291e 	bne	r2,zero,a0ea38 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  a0e994:	e0fffe17 	ldw	r3,-8(fp)
  a0e998:	e0fffe17 	ldw	r3,-8(fp)
  a0e99c:	18c5883a 	add	r2,r3,r3
  a0e9a0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  a0e9a4:	e13ff917 	ldw	r4,-28(fp)
  a0e9a8:	e0fffe17 	ldw	r3,-8(fp)
  a0e9ac:	20c5383a 	mul	r2,r4,r3
  a0e9b0:	e13fff17 	ldw	r4,-4(fp)
  a0e9b4:	2089883a 	add	r4,r4,r2
  a0e9b8:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  a0e9bc:	e0bff917 	ldw	r2,-28(fp)
  a0e9c0:	e0bff215 	stw	r2,-56(fp)
  a0e9c4:	00001806 	br	a0ea28 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  a0e9c8:	e0fffb17 	ldw	r3,-20(fp)
  a0e9cc:	e0fff315 	stw	r3,-52(fp)
  a0e9d0:	00000b06 	br	a0ea00 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  a0e9d4:	e13ff317 	ldw	r4,-52(fp)
  a0e9d8:	e13ff317 	ldw	r4,-52(fp)
  a0e9dc:	2105883a 	add	r2,r4,r4
  a0e9e0:	1007883a 	mov	r3,r2
  a0e9e4:	e0bfff17 	ldw	r2,-4(fp)
  a0e9e8:	1885883a 	add	r2,r3,r2
  a0e9ec:	e0fff717 	ldw	r3,-36(fp)
  a0e9f0:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  a0e9f4:	e0bff317 	ldw	r2,-52(fp)
  a0e9f8:	10800044 	addi	r2,r2,1
  a0e9fc:	e0bff315 	stw	r2,-52(fp)
  a0ea00:	e0fffa17 	ldw	r3,-24(fp)
  a0ea04:	e13ff317 	ldw	r4,-52(fp)
  a0ea08:	193ff22e 	bgeu	r3,r4,a0e9d4 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  a0ea0c:	e0bfff17 	ldw	r2,-4(fp)
  a0ea10:	e0fffe17 	ldw	r3,-8(fp)
  a0ea14:	10c5883a 	add	r2,r2,r3
  a0ea18:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  a0ea1c:	e13ff217 	ldw	r4,-56(fp)
  a0ea20:	21000044 	addi	r4,r4,1
  a0ea24:	e13ff215 	stw	r4,-56(fp)
  a0ea28:	e0bff817 	ldw	r2,-32(fp)
  a0ea2c:	e0fff217 	ldw	r3,-56(fp)
  a0ea30:	10ffe52e 	bgeu	r2,r3,a0e9c8 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  a0ea34:	00002a06 	br	a0eae0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  a0ea38:	e13ffe17 	ldw	r4,-8(fp)
  a0ea3c:	e13ffe17 	ldw	r4,-8(fp)
  a0ea40:	2105883a 	add	r2,r4,r4
  a0ea44:	1085883a 	add	r2,r2,r2
  a0ea48:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  a0ea4c:	e0fff917 	ldw	r3,-28(fp)
  a0ea50:	e13ffe17 	ldw	r4,-8(fp)
  a0ea54:	1905383a 	mul	r2,r3,r4
  a0ea58:	e0ffff17 	ldw	r3,-4(fp)
  a0ea5c:	1887883a 	add	r3,r3,r2
  a0ea60:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  a0ea64:	e13ff917 	ldw	r4,-28(fp)
  a0ea68:	e13ff215 	stw	r4,-56(fp)
  a0ea6c:	00001906 	br	a0ead4 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  a0ea70:	e0bffb17 	ldw	r2,-20(fp)
  a0ea74:	e0bff315 	stw	r2,-52(fp)
  a0ea78:	00000c06 	br	a0eaac <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  a0ea7c:	e0fff317 	ldw	r3,-52(fp)
  a0ea80:	e0fff317 	ldw	r3,-52(fp)
  a0ea84:	18c5883a 	add	r2,r3,r3
  a0ea88:	1085883a 	add	r2,r2,r2
  a0ea8c:	1007883a 	mov	r3,r2
  a0ea90:	e0bfff17 	ldw	r2,-4(fp)
  a0ea94:	1885883a 	add	r2,r3,r2
  a0ea98:	e0fff717 	ldw	r3,-36(fp)
  a0ea9c:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  a0eaa0:	e13ff317 	ldw	r4,-52(fp)
  a0eaa4:	21000044 	addi	r4,r4,1
  a0eaa8:	e13ff315 	stw	r4,-52(fp)
  a0eaac:	e0bffa17 	ldw	r2,-24(fp)
  a0eab0:	e0fff317 	ldw	r3,-52(fp)
  a0eab4:	10fff12e 	bgeu	r2,r3,a0ea7c <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  a0eab8:	e13fff17 	ldw	r4,-4(fp)
  a0eabc:	e0bffe17 	ldw	r2,-8(fp)
  a0eac0:	2089883a 	add	r4,r4,r2
  a0eac4:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  a0eac8:	e0fff217 	ldw	r3,-56(fp)
  a0eacc:	18c00044 	addi	r3,r3,1
  a0ead0:	e0fff215 	stw	r3,-56(fp)
  a0ead4:	e13ff817 	ldw	r4,-32(fp)
  a0ead8:	e0bff217 	ldw	r2,-56(fp)
  a0eadc:	20bfe42e 	bgeu	r4,r2,a0ea70 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  a0eae0:	e037883a 	mov	sp,fp
  a0eae4:	df000017 	ldw	fp,0(sp)
  a0eae8:	dec00104 	addi	sp,sp,4
  a0eaec:	f800283a 	ret

00a0eaf0 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  a0eaf0:	defff204 	addi	sp,sp,-56
  a0eaf4:	df000d15 	stw	fp,52(sp)
  a0eaf8:	df000d04 	addi	fp,sp,52
  a0eafc:	e13ff315 	stw	r4,-52(fp)
  a0eb00:	e17ff415 	stw	r5,-48(fp)
  a0eb04:	e1bff515 	stw	r6,-44(fp)
  a0eb08:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  a0eb0c:	e0bff317 	ldw	r2,-52(fp)
  a0eb10:	10800f17 	ldw	r2,60(r2)
  a0eb14:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  a0eb18:	e0bff317 	ldw	r2,-52(fp)
  a0eb1c:	10801017 	ldw	r2,64(r2)
  a0eb20:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  a0eb24:	e0bff417 	ldw	r2,-48(fp)
  a0eb28:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  a0eb2c:	e0fff517 	ldw	r3,-44(fp)
  a0eb30:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  a0eb34:	e13ff617 	ldw	r4,-40(fp)
  a0eb38:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  a0eb3c:	e0800117 	ldw	r2,4(fp)
  a0eb40:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  a0eb44:	e0fffb17 	ldw	r3,-20(fp)
  a0eb48:	e13ffc17 	ldw	r4,-16(fp)
  a0eb4c:	1900042e 	bgeu	r3,r4,a0eb60 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  a0eb50:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  a0eb54:	e0fffb17 	ldw	r3,-20(fp)
  a0eb58:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  a0eb5c:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  a0eb60:	e13ffc17 	ldw	r4,-16(fp)
  a0eb64:	e0bffe17 	ldw	r2,-8(fp)
  a0eb68:	2080b12e 	bgeu	r4,r2,a0ee30 <alt_up_pixel_buffer_dma_draw_hline+0x340>
  a0eb6c:	e0fffa17 	ldw	r3,-24(fp)
  a0eb70:	e13ffd17 	ldw	r4,-12(fp)
  a0eb74:	19000136 	bltu	r3,r4,a0eb7c <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  a0eb78:	0000ad06 	br	a0ee30 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  a0eb7c:	e0bffb17 	ldw	r2,-20(fp)
  a0eb80:	e0fffe17 	ldw	r3,-8(fp)
  a0eb84:	10c00336 	bltu	r2,r3,a0eb94 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  a0eb88:	e13ffe17 	ldw	r4,-8(fp)
  a0eb8c:	213fffc4 	addi	r4,r4,-1
  a0eb90:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  a0eb94:	e0800217 	ldw	r2,8(fp)
  a0eb98:	10800058 	cmpnei	r2,r2,1
  a0eb9c:	1000041e 	bne	r2,zero,a0ebb0 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  a0eba0:	e0bff317 	ldw	r2,-52(fp)
  a0eba4:	10800c17 	ldw	r2,48(r2)
  a0eba8:	e0bfff15 	stw	r2,-4(fp)
  a0ebac:	00000306 	br	a0ebbc <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  a0ebb0:	e0bff317 	ldw	r2,-52(fp)
  a0ebb4:	10800b17 	ldw	r2,44(r2)
  a0ebb8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  a0ebbc:	e0bff317 	ldw	r2,-52(fp)
  a0ebc0:	10800d17 	ldw	r2,52(r2)
  a0ebc4:	1004c03a 	cmpne	r2,r2,zero
  a0ebc8:	1000431e 	bne	r2,zero,a0ecd8 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  a0ebcc:	e0bff317 	ldw	r2,-52(fp)
  a0ebd0:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  a0ebd4:	e0fffa17 	ldw	r3,-24(fp)
  a0ebd8:	1884983a 	sll	r2,r3,r2
  a0ebdc:	e13fff17 	ldw	r4,-4(fp)
  a0ebe0:	2089883a 	add	r4,r4,r2
  a0ebe4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  a0ebe8:	e0bff317 	ldw	r2,-52(fp)
  a0ebec:	10800e17 	ldw	r2,56(r2)
  a0ebf0:	10800058 	cmpnei	r2,r2,1
  a0ebf4:	10000f1e 	bne	r2,zero,a0ec34 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  a0ebf8:	e0bffc17 	ldw	r2,-16(fp)
  a0ebfc:	e0bff815 	stw	r2,-32(fp)
  a0ec00:	00000806 	br	a0ec24 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  a0ec04:	e0ffff17 	ldw	r3,-4(fp)
  a0ec08:	e0bff817 	ldw	r2,-32(fp)
  a0ec0c:	1885883a 	add	r2,r3,r2
  a0ec10:	e0fff917 	ldw	r3,-28(fp)
  a0ec14:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  a0ec18:	e0fff817 	ldw	r3,-32(fp)
  a0ec1c:	18c00044 	addi	r3,r3,1
  a0ec20:	e0fff815 	stw	r3,-32(fp)
  a0ec24:	e13ffb17 	ldw	r4,-20(fp)
  a0ec28:	e0bff817 	ldw	r2,-32(fp)
  a0ec2c:	20bff52e 	bgeu	r4,r2,a0ec04 <alt_up_pixel_buffer_dma_draw_hline+0x114>
  a0ec30:	00007f06 	br	a0ee30 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  a0ec34:	e0bff317 	ldw	r2,-52(fp)
  a0ec38:	10800e17 	ldw	r2,56(r2)
  a0ec3c:	10800098 	cmpnei	r2,r2,2
  a0ec40:	1000121e 	bne	r2,zero,a0ec8c <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  a0ec44:	e0fffc17 	ldw	r3,-16(fp)
  a0ec48:	e0fff815 	stw	r3,-32(fp)
  a0ec4c:	00000b06 	br	a0ec7c <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  a0ec50:	e13ff817 	ldw	r4,-32(fp)
  a0ec54:	e13ff817 	ldw	r4,-32(fp)
  a0ec58:	2105883a 	add	r2,r4,r4
  a0ec5c:	1007883a 	mov	r3,r2
  a0ec60:	e0bfff17 	ldw	r2,-4(fp)
  a0ec64:	1885883a 	add	r2,r3,r2
  a0ec68:	e0fff917 	ldw	r3,-28(fp)
  a0ec6c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  a0ec70:	e0bff817 	ldw	r2,-32(fp)
  a0ec74:	10800044 	addi	r2,r2,1
  a0ec78:	e0bff815 	stw	r2,-32(fp)
  a0ec7c:	e0fffb17 	ldw	r3,-20(fp)
  a0ec80:	e13ff817 	ldw	r4,-32(fp)
  a0ec84:	193ff22e 	bgeu	r3,r4,a0ec50 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  a0ec88:	00006906 	br	a0ee30 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  a0ec8c:	e0bffc17 	ldw	r2,-16(fp)
  a0ec90:	e0bff815 	stw	r2,-32(fp)
  a0ec94:	00000c06 	br	a0ecc8 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  a0ec98:	e0fff817 	ldw	r3,-32(fp)
  a0ec9c:	e0fff817 	ldw	r3,-32(fp)
  a0eca0:	18c5883a 	add	r2,r3,r3
  a0eca4:	1085883a 	add	r2,r2,r2
  a0eca8:	1007883a 	mov	r3,r2
  a0ecac:	e0bfff17 	ldw	r2,-4(fp)
  a0ecb0:	1885883a 	add	r2,r3,r2
  a0ecb4:	e0fff917 	ldw	r3,-28(fp)
  a0ecb8:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  a0ecbc:	e13ff817 	ldw	r4,-32(fp)
  a0ecc0:	21000044 	addi	r4,r4,1
  a0ecc4:	e13ff815 	stw	r4,-32(fp)
  a0ecc8:	e0bffb17 	ldw	r2,-20(fp)
  a0eccc:	e0fff817 	ldw	r3,-32(fp)
  a0ecd0:	10fff12e 	bgeu	r2,r3,a0ec98 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  a0ecd4:	00005606 	br	a0ee30 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  a0ecd8:	e0bff317 	ldw	r2,-52(fp)
  a0ecdc:	10800e17 	ldw	r2,56(r2)
  a0ece0:	10800058 	cmpnei	r2,r2,1
  a0ece4:	1000151e 	bne	r2,zero,a0ed3c <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  a0ece8:	e13ffa17 	ldw	r4,-24(fp)
  a0ecec:	e0fffe17 	ldw	r3,-8(fp)
  a0ecf0:	20c5383a 	mul	r2,r4,r3
  a0ecf4:	e13fff17 	ldw	r4,-4(fp)
  a0ecf8:	2089883a 	add	r4,r4,r2
  a0ecfc:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  a0ed00:	e0bffc17 	ldw	r2,-16(fp)
  a0ed04:	e0bff715 	stw	r2,-36(fp)
  a0ed08:	00000806 	br	a0ed2c <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  a0ed0c:	e0ffff17 	ldw	r3,-4(fp)
  a0ed10:	e0bff717 	ldw	r2,-36(fp)
  a0ed14:	1885883a 	add	r2,r3,r2
  a0ed18:	e0fff917 	ldw	r3,-28(fp)
  a0ed1c:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  a0ed20:	e0fff717 	ldw	r3,-36(fp)
  a0ed24:	18c00044 	addi	r3,r3,1
  a0ed28:	e0fff715 	stw	r3,-36(fp)
  a0ed2c:	e13ffb17 	ldw	r4,-20(fp)
  a0ed30:	e0bff717 	ldw	r2,-36(fp)
  a0ed34:	20bff52e 	bgeu	r4,r2,a0ed0c <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  a0ed38:	00003d06 	br	a0ee30 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  a0ed3c:	e0bff317 	ldw	r2,-52(fp)
  a0ed40:	10800e17 	ldw	r2,56(r2)
  a0ed44:	10800098 	cmpnei	r2,r2,2
  a0ed48:	10001c1e 	bne	r2,zero,a0edbc <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  a0ed4c:	e0fffe17 	ldw	r3,-8(fp)
  a0ed50:	e0fffe17 	ldw	r3,-8(fp)
  a0ed54:	18c5883a 	add	r2,r3,r3
  a0ed58:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  a0ed5c:	e13ffa17 	ldw	r4,-24(fp)
  a0ed60:	e0fffe17 	ldw	r3,-8(fp)
  a0ed64:	20c5383a 	mul	r2,r4,r3
  a0ed68:	e13fff17 	ldw	r4,-4(fp)
  a0ed6c:	2089883a 	add	r4,r4,r2
  a0ed70:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  a0ed74:	e0bffc17 	ldw	r2,-16(fp)
  a0ed78:	e0bff715 	stw	r2,-36(fp)
  a0ed7c:	00000b06 	br	a0edac <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  a0ed80:	e0fff717 	ldw	r3,-36(fp)
  a0ed84:	e0fff717 	ldw	r3,-36(fp)
  a0ed88:	18c5883a 	add	r2,r3,r3
  a0ed8c:	1007883a 	mov	r3,r2
  a0ed90:	e0bfff17 	ldw	r2,-4(fp)
  a0ed94:	1885883a 	add	r2,r3,r2
  a0ed98:	e0fff917 	ldw	r3,-28(fp)
  a0ed9c:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  a0eda0:	e13ff717 	ldw	r4,-36(fp)
  a0eda4:	21000044 	addi	r4,r4,1
  a0eda8:	e13ff715 	stw	r4,-36(fp)
  a0edac:	e0bffb17 	ldw	r2,-20(fp)
  a0edb0:	e0fff717 	ldw	r3,-36(fp)
  a0edb4:	10fff22e 	bgeu	r2,r3,a0ed80 <alt_up_pixel_buffer_dma_draw_hline+0x290>
  a0edb8:	00001d06 	br	a0ee30 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  a0edbc:	e13ffe17 	ldw	r4,-8(fp)
  a0edc0:	e13ffe17 	ldw	r4,-8(fp)
  a0edc4:	2105883a 	add	r2,r4,r4
  a0edc8:	1085883a 	add	r2,r2,r2
  a0edcc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  a0edd0:	e0fffa17 	ldw	r3,-24(fp)
  a0edd4:	e13ffe17 	ldw	r4,-8(fp)
  a0edd8:	1905383a 	mul	r2,r3,r4
  a0eddc:	e0ffff17 	ldw	r3,-4(fp)
  a0ede0:	1887883a 	add	r3,r3,r2
  a0ede4:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  a0ede8:	e13ffc17 	ldw	r4,-16(fp)
  a0edec:	e13ff715 	stw	r4,-36(fp)
  a0edf0:	00000c06 	br	a0ee24 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  a0edf4:	e0fff717 	ldw	r3,-36(fp)
  a0edf8:	e0fff717 	ldw	r3,-36(fp)
  a0edfc:	18c5883a 	add	r2,r3,r3
  a0ee00:	1085883a 	add	r2,r2,r2
  a0ee04:	1007883a 	mov	r3,r2
  a0ee08:	e0bfff17 	ldw	r2,-4(fp)
  a0ee0c:	1885883a 	add	r2,r3,r2
  a0ee10:	e0fff917 	ldw	r3,-28(fp)
  a0ee14:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  a0ee18:	e13ff717 	ldw	r4,-36(fp)
  a0ee1c:	21000044 	addi	r4,r4,1
  a0ee20:	e13ff715 	stw	r4,-36(fp)
  a0ee24:	e0bffb17 	ldw	r2,-20(fp)
  a0ee28:	e0fff717 	ldw	r3,-36(fp)
  a0ee2c:	10fff12e 	bgeu	r2,r3,a0edf4 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  a0ee30:	e037883a 	mov	sp,fp
  a0ee34:	df000017 	ldw	fp,0(sp)
  a0ee38:	dec00104 	addi	sp,sp,4
  a0ee3c:	f800283a 	ret

00a0ee40 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  a0ee40:	defff104 	addi	sp,sp,-60
  a0ee44:	df000e15 	stw	fp,56(sp)
  a0ee48:	df000e04 	addi	fp,sp,56
  a0ee4c:	e13ff215 	stw	r4,-56(fp)
  a0ee50:	e17ff315 	stw	r5,-52(fp)
  a0ee54:	e1bff415 	stw	r6,-48(fp)
  a0ee58:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  a0ee5c:	e0bff217 	ldw	r2,-56(fp)
  a0ee60:	10800f17 	ldw	r2,60(r2)
  a0ee64:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  a0ee68:	e0bff217 	ldw	r2,-56(fp)
  a0ee6c:	10801017 	ldw	r2,64(r2)
  a0ee70:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  a0ee74:	e0bff317 	ldw	r2,-52(fp)
  a0ee78:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  a0ee7c:	e0fff417 	ldw	r3,-48(fp)
  a0ee80:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  a0ee84:	e13ff517 	ldw	r4,-44(fp)
  a0ee88:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  a0ee8c:	e0800117 	ldw	r2,4(fp)
  a0ee90:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  a0ee94:	e0fffa17 	ldw	r3,-24(fp)
  a0ee98:	e13ffb17 	ldw	r4,-20(fp)
  a0ee9c:	1900042e 	bgeu	r3,r4,a0eeb0 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  a0eea0:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  a0eea4:	e0fffa17 	ldw	r3,-24(fp)
  a0eea8:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  a0eeac:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  a0eeb0:	e13ffc17 	ldw	r4,-16(fp)
  a0eeb4:	e0bffe17 	ldw	r2,-8(fp)
  a0eeb8:	2080d12e 	bgeu	r4,r2,a0f200 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  a0eebc:	e0fffb17 	ldw	r3,-20(fp)
  a0eec0:	e13ffd17 	ldw	r4,-12(fp)
  a0eec4:	19000136 	bltu	r3,r4,a0eecc <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  a0eec8:	0000cd06 	br	a0f200 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  a0eecc:	e0bffa17 	ldw	r2,-24(fp)
  a0eed0:	e0fffd17 	ldw	r3,-12(fp)
  a0eed4:	10c00336 	bltu	r2,r3,a0eee4 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  a0eed8:	e13ffd17 	ldw	r4,-12(fp)
  a0eedc:	213fffc4 	addi	r4,r4,-1
  a0eee0:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  a0eee4:	e0800217 	ldw	r2,8(fp)
  a0eee8:	10800058 	cmpnei	r2,r2,1
  a0eeec:	1000041e 	bne	r2,zero,a0ef00 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  a0eef0:	e0bff217 	ldw	r2,-56(fp)
  a0eef4:	10800c17 	ldw	r2,48(r2)
  a0eef8:	e0bfff15 	stw	r2,-4(fp)
  a0eefc:	00000306 	br	a0ef0c <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  a0ef00:	e0bff217 	ldw	r2,-56(fp)
  a0ef04:	10800b17 	ldw	r2,44(r2)
  a0ef08:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  a0ef0c:	e0bff217 	ldw	r2,-56(fp)
  a0ef10:	10800d17 	ldw	r2,52(r2)
  a0ef14:	1004c03a 	cmpne	r2,r2,zero
  a0ef18:	1000571e 	bne	r2,zero,a0f078 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  a0ef1c:	e0bff217 	ldw	r2,-56(fp)
  a0ef20:	10801317 	ldw	r2,76(r2)
  a0ef24:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  a0ef28:	e0bff717 	ldw	r2,-36(fp)
  a0ef2c:	e0fffb17 	ldw	r3,-20(fp)
  a0ef30:	1884983a 	sll	r2,r3,r2
  a0ef34:	e13fff17 	ldw	r4,-4(fp)
  a0ef38:	2089883a 	add	r4,r4,r2
  a0ef3c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  a0ef40:	e0bff217 	ldw	r2,-56(fp)
  a0ef44:	10800e17 	ldw	r2,56(r2)
  a0ef48:	10800058 	cmpnei	r2,r2,1
  a0ef4c:	1000151e 	bne	r2,zero,a0efa4 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  a0ef50:	e0bffb17 	ldw	r2,-20(fp)
  a0ef54:	e0bff815 	stw	r2,-32(fp)
  a0ef58:	00000e06 	br	a0ef94 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  a0ef5c:	e0ffff17 	ldw	r3,-4(fp)
  a0ef60:	e0bffc17 	ldw	r2,-16(fp)
  a0ef64:	1885883a 	add	r2,r3,r2
  a0ef68:	e0fff917 	ldw	r3,-28(fp)
  a0ef6c:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  a0ef70:	e0fff717 	ldw	r3,-36(fp)
  a0ef74:	00800044 	movi	r2,1
  a0ef78:	10c4983a 	sll	r2,r2,r3
  a0ef7c:	e0ffff17 	ldw	r3,-4(fp)
  a0ef80:	1887883a 	add	r3,r3,r2
  a0ef84:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  a0ef88:	e13ff817 	ldw	r4,-32(fp)
  a0ef8c:	21000044 	addi	r4,r4,1
  a0ef90:	e13ff815 	stw	r4,-32(fp)
  a0ef94:	e0bffa17 	ldw	r2,-24(fp)
  a0ef98:	e0fff817 	ldw	r3,-32(fp)
  a0ef9c:	10ffef2e 	bgeu	r2,r3,a0ef5c <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  a0efa0:	00009706 	br	a0f200 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  a0efa4:	e0bff217 	ldw	r2,-56(fp)
  a0efa8:	10800e17 	ldw	r2,56(r2)
  a0efac:	10800098 	cmpnei	r2,r2,2
  a0efb0:	1000181e 	bne	r2,zero,a0f014 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  a0efb4:	e13ffb17 	ldw	r4,-20(fp)
  a0efb8:	e13ff815 	stw	r4,-32(fp)
  a0efbc:	00001106 	br	a0f004 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  a0efc0:	e0fffc17 	ldw	r3,-16(fp)
  a0efc4:	e0fffc17 	ldw	r3,-16(fp)
  a0efc8:	18c5883a 	add	r2,r3,r3
  a0efcc:	1007883a 	mov	r3,r2
  a0efd0:	e0bfff17 	ldw	r2,-4(fp)
  a0efd4:	1885883a 	add	r2,r3,r2
  a0efd8:	e0fff917 	ldw	r3,-28(fp)
  a0efdc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  a0efe0:	e0fff717 	ldw	r3,-36(fp)
  a0efe4:	00800044 	movi	r2,1
  a0efe8:	10c4983a 	sll	r2,r2,r3
  a0efec:	e13fff17 	ldw	r4,-4(fp)
  a0eff0:	2089883a 	add	r4,r4,r2
  a0eff4:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  a0eff8:	e0bff817 	ldw	r2,-32(fp)
  a0effc:	10800044 	addi	r2,r2,1
  a0f000:	e0bff815 	stw	r2,-32(fp)
  a0f004:	e0fffa17 	ldw	r3,-24(fp)
  a0f008:	e13ff817 	ldw	r4,-32(fp)
  a0f00c:	193fec2e 	bgeu	r3,r4,a0efc0 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  a0f010:	00007b06 	br	a0f200 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  a0f014:	e0bffb17 	ldw	r2,-20(fp)
  a0f018:	e0bff815 	stw	r2,-32(fp)
  a0f01c:	00001206 	br	a0f068 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  a0f020:	e0fffc17 	ldw	r3,-16(fp)
  a0f024:	e0fffc17 	ldw	r3,-16(fp)
  a0f028:	18c5883a 	add	r2,r3,r3
  a0f02c:	1085883a 	add	r2,r2,r2
  a0f030:	1007883a 	mov	r3,r2
  a0f034:	e0bfff17 	ldw	r2,-4(fp)
  a0f038:	1885883a 	add	r2,r3,r2
  a0f03c:	e0fff917 	ldw	r3,-28(fp)
  a0f040:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  a0f044:	e0fff717 	ldw	r3,-36(fp)
  a0f048:	00800044 	movi	r2,1
  a0f04c:	10c4983a 	sll	r2,r2,r3
  a0f050:	e13fff17 	ldw	r4,-4(fp)
  a0f054:	2089883a 	add	r4,r4,r2
  a0f058:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  a0f05c:	e0bff817 	ldw	r2,-32(fp)
  a0f060:	10800044 	addi	r2,r2,1
  a0f064:	e0bff815 	stw	r2,-32(fp)
  a0f068:	e0fffa17 	ldw	r3,-24(fp)
  a0f06c:	e13ff817 	ldw	r4,-32(fp)
  a0f070:	193feb2e 	bgeu	r3,r4,a0f020 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  a0f074:	00006206 	br	a0f200 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  a0f078:	e0bff217 	ldw	r2,-56(fp)
  a0f07c:	10800e17 	ldw	r2,56(r2)
  a0f080:	10800058 	cmpnei	r2,r2,1
  a0f084:	1000191e 	bne	r2,zero,a0f0ec <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  a0f088:	e0fffb17 	ldw	r3,-20(fp)
  a0f08c:	e13ffe17 	ldw	r4,-8(fp)
  a0f090:	1905383a 	mul	r2,r3,r4
  a0f094:	e0ffff17 	ldw	r3,-4(fp)
  a0f098:	1887883a 	add	r3,r3,r2
  a0f09c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  a0f0a0:	e13ffb17 	ldw	r4,-20(fp)
  a0f0a4:	e13ff615 	stw	r4,-40(fp)
  a0f0a8:	00000c06 	br	a0f0dc <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  a0f0ac:	e0ffff17 	ldw	r3,-4(fp)
  a0f0b0:	e0bffc17 	ldw	r2,-16(fp)
  a0f0b4:	1885883a 	add	r2,r3,r2
  a0f0b8:	e0fff917 	ldw	r3,-28(fp)
  a0f0bc:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  a0f0c0:	e0bfff17 	ldw	r2,-4(fp)
  a0f0c4:	e0fffe17 	ldw	r3,-8(fp)
  a0f0c8:	10c5883a 	add	r2,r2,r3
  a0f0cc:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  a0f0d0:	e13ff617 	ldw	r4,-40(fp)
  a0f0d4:	21000044 	addi	r4,r4,1
  a0f0d8:	e13ff615 	stw	r4,-40(fp)
  a0f0dc:	e0bffa17 	ldw	r2,-24(fp)
  a0f0e0:	e0fff617 	ldw	r3,-40(fp)
  a0f0e4:	10fff12e 	bgeu	r2,r3,a0f0ac <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  a0f0e8:	00004506 	br	a0f200 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  a0f0ec:	e0bff217 	ldw	r2,-56(fp)
  a0f0f0:	10800e17 	ldw	r2,56(r2)
  a0f0f4:	10800098 	cmpnei	r2,r2,2
  a0f0f8:	1000201e 	bne	r2,zero,a0f17c <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  a0f0fc:	e13ffe17 	ldw	r4,-8(fp)
  a0f100:	e13ffe17 	ldw	r4,-8(fp)
  a0f104:	2105883a 	add	r2,r4,r4
  a0f108:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  a0f10c:	e0fffb17 	ldw	r3,-20(fp)
  a0f110:	e13ffe17 	ldw	r4,-8(fp)
  a0f114:	1905383a 	mul	r2,r3,r4
  a0f118:	e0ffff17 	ldw	r3,-4(fp)
  a0f11c:	1887883a 	add	r3,r3,r2
  a0f120:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  a0f124:	e13ffb17 	ldw	r4,-20(fp)
  a0f128:	e13ff615 	stw	r4,-40(fp)
  a0f12c:	00000f06 	br	a0f16c <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  a0f130:	e0fffc17 	ldw	r3,-16(fp)
  a0f134:	e0fffc17 	ldw	r3,-16(fp)
  a0f138:	18c5883a 	add	r2,r3,r3
  a0f13c:	1007883a 	mov	r3,r2
  a0f140:	e0bfff17 	ldw	r2,-4(fp)
  a0f144:	1885883a 	add	r2,r3,r2
  a0f148:	e0fff917 	ldw	r3,-28(fp)
  a0f14c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  a0f150:	e13fff17 	ldw	r4,-4(fp)
  a0f154:	e0bffe17 	ldw	r2,-8(fp)
  a0f158:	2089883a 	add	r4,r4,r2
  a0f15c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  a0f160:	e0fff617 	ldw	r3,-40(fp)
  a0f164:	18c00044 	addi	r3,r3,1
  a0f168:	e0fff615 	stw	r3,-40(fp)
  a0f16c:	e13ffa17 	ldw	r4,-24(fp)
  a0f170:	e0bff617 	ldw	r2,-40(fp)
  a0f174:	20bfee2e 	bgeu	r4,r2,a0f130 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  a0f178:	00002106 	br	a0f200 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  a0f17c:	e0fffe17 	ldw	r3,-8(fp)
  a0f180:	e0fffe17 	ldw	r3,-8(fp)
  a0f184:	18c5883a 	add	r2,r3,r3
  a0f188:	1085883a 	add	r2,r2,r2
  a0f18c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  a0f190:	e13ffb17 	ldw	r4,-20(fp)
  a0f194:	e0fffe17 	ldw	r3,-8(fp)
  a0f198:	20c5383a 	mul	r2,r4,r3
  a0f19c:	e13fff17 	ldw	r4,-4(fp)
  a0f1a0:	2089883a 	add	r4,r4,r2
  a0f1a4:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  a0f1a8:	e0bffb17 	ldw	r2,-20(fp)
  a0f1ac:	e0bff615 	stw	r2,-40(fp)
  a0f1b0:	00001006 	br	a0f1f4 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  a0f1b4:	e0fffc17 	ldw	r3,-16(fp)
  a0f1b8:	e0fffc17 	ldw	r3,-16(fp)
  a0f1bc:	18c5883a 	add	r2,r3,r3
  a0f1c0:	1085883a 	add	r2,r2,r2
  a0f1c4:	1007883a 	mov	r3,r2
  a0f1c8:	e0bfff17 	ldw	r2,-4(fp)
  a0f1cc:	1885883a 	add	r2,r3,r2
  a0f1d0:	e0fff917 	ldw	r3,-28(fp)
  a0f1d4:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  a0f1d8:	e13fff17 	ldw	r4,-4(fp)
  a0f1dc:	e0bffe17 	ldw	r2,-8(fp)
  a0f1e0:	2089883a 	add	r4,r4,r2
  a0f1e4:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  a0f1e8:	e0fff617 	ldw	r3,-40(fp)
  a0f1ec:	18c00044 	addi	r3,r3,1
  a0f1f0:	e0fff615 	stw	r3,-40(fp)
  a0f1f4:	e13ffa17 	ldw	r4,-24(fp)
  a0f1f8:	e0bff617 	ldw	r2,-40(fp)
  a0f1fc:	20bfed2e 	bgeu	r4,r2,a0f1b4 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  a0f200:	e037883a 	mov	sp,fp
  a0f204:	df000017 	ldw	fp,0(sp)
  a0f208:	dec00104 	addi	sp,sp,4
  a0f20c:	f800283a 	ret

00a0f210 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  a0f210:	defff804 	addi	sp,sp,-32
  a0f214:	dfc00715 	stw	ra,28(sp)
  a0f218:	df000615 	stw	fp,24(sp)
  a0f21c:	df000604 	addi	fp,sp,24
  a0f220:	e13ffc15 	stw	r4,-16(fp)
  a0f224:	e17ffd15 	stw	r5,-12(fp)
  a0f228:	e1bffe15 	stw	r6,-8(fp)
  a0f22c:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  a0f230:	e0800317 	ldw	r2,12(fp)
  a0f234:	d8800015 	stw	r2,0(sp)
  a0f238:	e0800417 	ldw	r2,16(fp)
  a0f23c:	d8800115 	stw	r2,4(sp)
  a0f240:	e13ffc17 	ldw	r4,-16(fp)
  a0f244:	e17ffd17 	ldw	r5,-12(fp)
  a0f248:	e1bfff17 	ldw	r6,-4(fp)
  a0f24c:	e1fffe17 	ldw	r7,-8(fp)
  a0f250:	0a0eaf00 	call	a0eaf0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  a0f254:	e0800317 	ldw	r2,12(fp)
  a0f258:	d8800015 	stw	r2,0(sp)
  a0f25c:	e0800417 	ldw	r2,16(fp)
  a0f260:	d8800115 	stw	r2,4(sp)
  a0f264:	e13ffc17 	ldw	r4,-16(fp)
  a0f268:	e17ffd17 	ldw	r5,-12(fp)
  a0f26c:	e1bfff17 	ldw	r6,-4(fp)
  a0f270:	e1c00217 	ldw	r7,8(fp)
  a0f274:	0a0eaf00 	call	a0eaf0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  a0f278:	e0800317 	ldw	r2,12(fp)
  a0f27c:	d8800015 	stw	r2,0(sp)
  a0f280:	e0800417 	ldw	r2,16(fp)
  a0f284:	d8800115 	stw	r2,4(sp)
  a0f288:	e13ffc17 	ldw	r4,-16(fp)
  a0f28c:	e17ffd17 	ldw	r5,-12(fp)
  a0f290:	e1bffe17 	ldw	r6,-8(fp)
  a0f294:	e1c00217 	ldw	r7,8(fp)
  a0f298:	0a0ee400 	call	a0ee40 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  a0f29c:	e0800317 	ldw	r2,12(fp)
  a0f2a0:	d8800015 	stw	r2,0(sp)
  a0f2a4:	e0800417 	ldw	r2,16(fp)
  a0f2a8:	d8800115 	stw	r2,4(sp)
  a0f2ac:	e13ffc17 	ldw	r4,-16(fp)
  a0f2b0:	e17fff17 	ldw	r5,-4(fp)
  a0f2b4:	e1bffe17 	ldw	r6,-8(fp)
  a0f2b8:	e1c00217 	ldw	r7,8(fp)
  a0f2bc:	0a0ee400 	call	a0ee40 <alt_up_pixel_buffer_dma_draw_vline>
}
  a0f2c0:	e037883a 	mov	sp,fp
  a0f2c4:	dfc00117 	ldw	ra,4(sp)
  a0f2c8:	df000017 	ldw	fp,0(sp)
  a0f2cc:	dec00204 	addi	sp,sp,8
  a0f2d0:	f800283a 	ret

00a0f2d4 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  a0f2d4:	defffb04 	addi	sp,sp,-20
  a0f2d8:	df000415 	stw	fp,16(sp)
  a0f2dc:	df000404 	addi	fp,sp,16
  a0f2e0:	e13ffc15 	stw	r4,-16(fp)
  a0f2e4:	e17ffd15 	stw	r5,-12(fp)
  a0f2e8:	e1bffe15 	stw	r6,-8(fp)
  a0f2ec:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  a0f2f0:	e0c00217 	ldw	r3,8(fp)
  a0f2f4:	1804c03a 	cmpne	r2,r3,zero
  a0f2f8:	10000b1e 	bne	r2,zero,a0f328 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  a0f2fc:	e13ffd17 	ldw	r4,-12(fp)
  a0f300:	e0ffff17 	ldw	r3,-4(fp)
  a0f304:	20c5383a 	mul	r2,r4,r3
  a0f308:	e13ffe17 	ldw	r4,-8(fp)
  a0f30c:	1105883a 	add	r2,r2,r4
  a0f310:	1007883a 	mov	r3,r2
  a0f314:	e0bffc17 	ldw	r2,-16(fp)
  a0f318:	1885883a 	add	r2,r3,r2
  a0f31c:	e0c00117 	ldw	r3,4(fp)
  a0f320:	10c00025 	stbio	r3,0(r2)
  a0f324:	00001b06 	br	a0f394 <helper_plot_pixel+0xc0>
	else if (mode == 1)
  a0f328:	e1000217 	ldw	r4,8(fp)
  a0f32c:	20800058 	cmpnei	r2,r4,1
  a0f330:	10000c1e 	bne	r2,zero,a0f364 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  a0f334:	e0fffd17 	ldw	r3,-12(fp)
  a0f338:	e13fff17 	ldw	r4,-4(fp)
  a0f33c:	1905383a 	mul	r2,r3,r4
  a0f340:	e0fffe17 	ldw	r3,-8(fp)
  a0f344:	10c5883a 	add	r2,r2,r3
  a0f348:	1085883a 	add	r2,r2,r2
  a0f34c:	1007883a 	mov	r3,r2
  a0f350:	e0bffc17 	ldw	r2,-16(fp)
  a0f354:	1885883a 	add	r2,r3,r2
  a0f358:	e1000117 	ldw	r4,4(fp)
  a0f35c:	1100002d 	sthio	r4,0(r2)
  a0f360:	00000c06 	br	a0f394 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  a0f364:	e0fffd17 	ldw	r3,-12(fp)
  a0f368:	e13fff17 	ldw	r4,-4(fp)
  a0f36c:	1905383a 	mul	r2,r3,r4
  a0f370:	e0fffe17 	ldw	r3,-8(fp)
  a0f374:	10c5883a 	add	r2,r2,r3
  a0f378:	1085883a 	add	r2,r2,r2
  a0f37c:	1085883a 	add	r2,r2,r2
  a0f380:	1007883a 	mov	r3,r2
  a0f384:	e0bffc17 	ldw	r2,-16(fp)
  a0f388:	1885883a 	add	r2,r3,r2
  a0f38c:	e1000117 	ldw	r4,4(fp)
  a0f390:	11000035 	stwio	r4,0(r2)
}
  a0f394:	e037883a 	mov	sp,fp
  a0f398:	df000017 	ldw	fp,0(sp)
  a0f39c:	dec00104 	addi	sp,sp,4
  a0f3a0:	f800283a 	ret

00a0f3a4 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  a0f3a4:	deffe404 	addi	sp,sp,-112
  a0f3a8:	dfc01b15 	stw	ra,108(sp)
  a0f3ac:	df001a15 	stw	fp,104(sp)
  a0f3b0:	df001a04 	addi	fp,sp,104
  a0f3b4:	e13fe815 	stw	r4,-96(fp)
  a0f3b8:	e17fe915 	stw	r5,-92(fp)
  a0f3bc:	e1bfea15 	stw	r6,-88(fp)
  a0f3c0:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  a0f3c4:	e0bfe917 	ldw	r2,-92(fp)
  a0f3c8:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  a0f3cc:	e0ffea17 	ldw	r3,-88(fp)
  a0f3d0:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  a0f3d4:	e13feb17 	ldw	r4,-84(fp)
  a0f3d8:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  a0f3dc:	e0800217 	ldw	r2,8(fp)
  a0f3e0:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  a0f3e4:	e0fff717 	ldw	r3,-36(fp)
  a0f3e8:	e13ff917 	ldw	r4,-28(fp)
  a0f3ec:	1905c83a 	sub	r2,r3,r4
  a0f3f0:	e0bfff15 	stw	r2,-4(fp)
  a0f3f4:	e0ffff17 	ldw	r3,-4(fp)
  a0f3f8:	1804403a 	cmpge	r2,r3,zero
  a0f3fc:	1000031e 	bne	r2,zero,a0f40c <alt_up_pixel_buffer_dma_draw_line+0x68>
  a0f400:	e13fff17 	ldw	r4,-4(fp)
  a0f404:	0109c83a 	sub	r4,zero,r4
  a0f408:	e13fff15 	stw	r4,-4(fp)
  a0f40c:	e0fff817 	ldw	r3,-32(fp)
  a0f410:	e13ffa17 	ldw	r4,-24(fp)
  a0f414:	1905c83a 	sub	r2,r3,r4
  a0f418:	e0bffe15 	stw	r2,-8(fp)
  a0f41c:	e0fffe17 	ldw	r3,-8(fp)
  a0f420:	1804403a 	cmpge	r2,r3,zero
  a0f424:	1000031e 	bne	r2,zero,a0f434 <alt_up_pixel_buffer_dma_draw_line+0x90>
  a0f428:	e13ffe17 	ldw	r4,-8(fp)
  a0f42c:	0109c83a 	sub	r4,zero,r4
  a0f430:	e13ffe15 	stw	r4,-8(fp)
  a0f434:	e0fffe17 	ldw	r3,-8(fp)
  a0f438:	e13fff17 	ldw	r4,-4(fp)
  a0f43c:	1904803a 	cmplt	r2,r3,r4
  a0f440:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  a0f444:	e0bfe817 	ldw	r2,-96(fp)
  a0f448:	10800e17 	ldw	r2,56(r2)
  a0f44c:	10800060 	cmpeqi	r2,r2,1
  a0f450:	10000c1e 	bne	r2,zero,a0f484 <alt_up_pixel_buffer_dma_draw_line+0xe0>
  a0f454:	e0bfe817 	ldw	r2,-96(fp)
  a0f458:	10800e17 	ldw	r2,56(r2)
  a0f45c:	10800098 	cmpnei	r2,r2,2
  a0f460:	1000031e 	bne	r2,zero,a0f470 <alt_up_pixel_buffer_dma_draw_line+0xcc>
  a0f464:	00800044 	movi	r2,1
  a0f468:	e0bffc15 	stw	r2,-16(fp)
  a0f46c:	00000206 	br	a0f478 <alt_up_pixel_buffer_dma_draw_line+0xd4>
  a0f470:	00c00084 	movi	r3,2
  a0f474:	e0fffc15 	stw	r3,-16(fp)
  a0f478:	e13ffc17 	ldw	r4,-16(fp)
  a0f47c:	e13ffd15 	stw	r4,-12(fp)
  a0f480:	00000106 	br	a0f488 <alt_up_pixel_buffer_dma_draw_line+0xe4>
  a0f484:	e03ffd15 	stw	zero,-12(fp)
  a0f488:	e0bffd17 	ldw	r2,-12(fp)
  a0f48c:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  a0f490:	e0c00317 	ldw	r3,12(fp)
  a0f494:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  a0f498:	e0bfe817 	ldw	r2,-96(fp)
  a0f49c:	10800d17 	ldw	r2,52(r2)
  a0f4a0:	1004c03a 	cmpne	r2,r2,zero
  a0f4a4:	1000091e 	bne	r2,zero,a0f4cc <alt_up_pixel_buffer_dma_draw_line+0x128>
  a0f4a8:	e0bfe817 	ldw	r2,-96(fp)
  a0f4ac:	10c01317 	ldw	r3,76(r2)
  a0f4b0:	e0bfef17 	ldw	r2,-68(fp)
  a0f4b4:	1885c83a 	sub	r2,r3,r2
  a0f4b8:	1007883a 	mov	r3,r2
  a0f4bc:	00800044 	movi	r2,1
  a0f4c0:	10c4983a 	sll	r2,r2,r3
  a0f4c4:	e0bffb15 	stw	r2,-20(fp)
  a0f4c8:	00000306 	br	a0f4d8 <alt_up_pixel_buffer_dma_draw_line+0x134>
  a0f4cc:	e0bfe817 	ldw	r2,-96(fp)
  a0f4d0:	10800f17 	ldw	r2,60(r2)
  a0f4d4:	e0bffb15 	stw	r2,-20(fp)
  a0f4d8:	e13ffb17 	ldw	r4,-20(fp)
  a0f4dc:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  a0f4e0:	e0800417 	ldw	r2,16(fp)
  a0f4e4:	10800058 	cmpnei	r2,r2,1
  a0f4e8:	1000041e 	bne	r2,zero,a0f4fc <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  a0f4ec:	e0bfe817 	ldw	r2,-96(fp)
  a0f4f0:	10800c17 	ldw	r2,48(r2)
  a0f4f4:	e0bfed15 	stw	r2,-76(fp)
  a0f4f8:	00000306 	br	a0f508 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  a0f4fc:	e0bfe817 	ldw	r2,-96(fp)
  a0f500:	10800b17 	ldw	r2,44(r2)
  a0f504:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  a0f508:	e0fff603 	ldbu	r3,-40(fp)
  a0f50c:	18803fcc 	andi	r2,r3,255
  a0f510:	1080201c 	xori	r2,r2,128
  a0f514:	10bfe004 	addi	r2,r2,-128
  a0f518:	10800050 	cmplti	r2,r2,1
  a0f51c:	10000c1e 	bne	r2,zero,a0f550 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  a0f520:	e13ffa17 	ldw	r4,-24(fp)
  a0f524:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  a0f528:	e0bff917 	ldw	r2,-28(fp)
  a0f52c:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  a0f530:	e0fff317 	ldw	r3,-52(fp)
  a0f534:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  a0f538:	e13ff817 	ldw	r4,-32(fp)
  a0f53c:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  a0f540:	e0bff717 	ldw	r2,-36(fp)
  a0f544:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  a0f548:	e0fff317 	ldw	r3,-52(fp)
  a0f54c:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  a0f550:	e13ff817 	ldw	r4,-32(fp)
  a0f554:	e0bffa17 	ldw	r2,-24(fp)
  a0f558:	20800c0e 	bge	r4,r2,a0f58c <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  a0f55c:	e0fffa17 	ldw	r3,-24(fp)
  a0f560:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  a0f564:	e13ff817 	ldw	r4,-32(fp)
  a0f568:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  a0f56c:	e0bff317 	ldw	r2,-52(fp)
  a0f570:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  a0f574:	e0fff917 	ldw	r3,-28(fp)
  a0f578:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  a0f57c:	e13ff717 	ldw	r4,-36(fp)
  a0f580:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  a0f584:	e0bff317 	ldw	r2,-52(fp)
  a0f588:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  a0f58c:	e0fff817 	ldw	r3,-32(fp)
  a0f590:	e13ffa17 	ldw	r4,-24(fp)
  a0f594:	1907c83a 	sub	r3,r3,r4
  a0f598:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  a0f59c:	e0fff717 	ldw	r3,-36(fp)
  a0f5a0:	e13ff917 	ldw	r4,-28(fp)
  a0f5a4:	1905c83a 	sub	r2,r3,r4
  a0f5a8:	e0bff415 	stw	r2,-48(fp)
  a0f5ac:	e0fff417 	ldw	r3,-48(fp)
  a0f5b0:	1804403a 	cmpge	r2,r3,zero
  a0f5b4:	1000031e 	bne	r2,zero,a0f5c4 <alt_up_pixel_buffer_dma_draw_line+0x220>
  a0f5b8:	e13ff417 	ldw	r4,-48(fp)
  a0f5bc:	0109c83a 	sub	r4,zero,r4
  a0f5c0:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  a0f5c4:	e0fff517 	ldw	r3,-44(fp)
  a0f5c8:	1804d7fa 	srli	r2,r3,31
  a0f5cc:	e13ff517 	ldw	r4,-44(fp)
  a0f5d0:	1105883a 	add	r2,r2,r4
  a0f5d4:	1005d07a 	srai	r2,r2,1
  a0f5d8:	0085c83a 	sub	r2,zero,r2
  a0f5dc:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  a0f5e0:	e0bff917 	ldw	r2,-28(fp)
  a0f5e4:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  a0f5e8:	e0fff917 	ldw	r3,-28(fp)
  a0f5ec:	e13ff717 	ldw	r4,-36(fp)
  a0f5f0:	1900030e 	bge	r3,r4,a0f600 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  a0f5f4:	00800044 	movi	r2,1
  a0f5f8:	e0bff215 	stw	r2,-56(fp)
  a0f5fc:	00000206 	br	a0f608 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  a0f600:	00ffffc4 	movi	r3,-1
  a0f604:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  a0f608:	e13ff603 	ldbu	r4,-40(fp)
  a0f60c:	20803fcc 	andi	r2,r4,255
  a0f610:	1080201c 	xori	r2,r2,128
  a0f614:	10bfe004 	addi	r2,r2,-128
  a0f618:	10800058 	cmpnei	r2,r2,1
  a0f61c:	1000221e 	bne	r2,zero,a0f6a8 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  a0f620:	e0bffa17 	ldw	r2,-24(fp)
  a0f624:	e0bff115 	stw	r2,-60(fp)
  a0f628:	00001b06 	br	a0f698 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  a0f62c:	e0ffee17 	ldw	r3,-72(fp)
  a0f630:	d8c00015 	stw	r3,0(sp)
  a0f634:	e13fef17 	ldw	r4,-68(fp)
  a0f638:	d9000115 	stw	r4,4(sp)
  a0f63c:	e13fed17 	ldw	r4,-76(fp)
  a0f640:	e17fec17 	ldw	r5,-80(fp)
  a0f644:	e1bff017 	ldw	r6,-64(fp)
  a0f648:	e1fff117 	ldw	r7,-60(fp)
  a0f64c:	0a0f2d40 	call	a0f2d4 <helper_plot_pixel>
			error = error + deltay;
  a0f650:	e0bff317 	ldw	r2,-52(fp)
  a0f654:	e0fff417 	ldw	r3,-48(fp)
  a0f658:	10c5883a 	add	r2,r2,r3
  a0f65c:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  a0f660:	e13ff317 	ldw	r4,-52(fp)
  a0f664:	20800050 	cmplti	r2,r4,1
  a0f668:	1000081e 	bne	r2,zero,a0f68c <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  a0f66c:	e0bff017 	ldw	r2,-64(fp)
  a0f670:	e0fff217 	ldw	r3,-56(fp)
  a0f674:	10c5883a 	add	r2,r2,r3
  a0f678:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  a0f67c:	e13ff317 	ldw	r4,-52(fp)
  a0f680:	e0bff517 	ldw	r2,-44(fp)
  a0f684:	2089c83a 	sub	r4,r4,r2
  a0f688:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  a0f68c:	e0fff117 	ldw	r3,-60(fp)
  a0f690:	18c00044 	addi	r3,r3,1
  a0f694:	e0fff115 	stw	r3,-60(fp)
  a0f698:	e13ff817 	ldw	r4,-32(fp)
  a0f69c:	e0bff117 	ldw	r2,-60(fp)
  a0f6a0:	20bfe20e 	bge	r4,r2,a0f62c <alt_up_pixel_buffer_dma_draw_line+0x288>
  a0f6a4:	00002106 	br	a0f72c <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  a0f6a8:	e0fffa17 	ldw	r3,-24(fp)
  a0f6ac:	e0fff115 	stw	r3,-60(fp)
  a0f6b0:	00001b06 	br	a0f720 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  a0f6b4:	e13fee17 	ldw	r4,-72(fp)
  a0f6b8:	d9000015 	stw	r4,0(sp)
  a0f6bc:	e0bfef17 	ldw	r2,-68(fp)
  a0f6c0:	d8800115 	stw	r2,4(sp)
  a0f6c4:	e13fed17 	ldw	r4,-76(fp)
  a0f6c8:	e17fec17 	ldw	r5,-80(fp)
  a0f6cc:	e1bff117 	ldw	r6,-60(fp)
  a0f6d0:	e1fff017 	ldw	r7,-64(fp)
  a0f6d4:	0a0f2d40 	call	a0f2d4 <helper_plot_pixel>
			error = error + deltay;
  a0f6d8:	e0fff317 	ldw	r3,-52(fp)
  a0f6dc:	e13ff417 	ldw	r4,-48(fp)
  a0f6e0:	1907883a 	add	r3,r3,r4
  a0f6e4:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  a0f6e8:	e0fff317 	ldw	r3,-52(fp)
  a0f6ec:	18800050 	cmplti	r2,r3,1
  a0f6f0:	1000081e 	bne	r2,zero,a0f714 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  a0f6f4:	e13ff017 	ldw	r4,-64(fp)
  a0f6f8:	e0bff217 	ldw	r2,-56(fp)
  a0f6fc:	2089883a 	add	r4,r4,r2
  a0f700:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  a0f704:	e0fff317 	ldw	r3,-52(fp)
  a0f708:	e13ff517 	ldw	r4,-44(fp)
  a0f70c:	1907c83a 	sub	r3,r3,r4
  a0f710:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  a0f714:	e0bff117 	ldw	r2,-60(fp)
  a0f718:	10800044 	addi	r2,r2,1
  a0f71c:	e0bff115 	stw	r2,-60(fp)
  a0f720:	e0fff817 	ldw	r3,-32(fp)
  a0f724:	e13ff117 	ldw	r4,-60(fp)
  a0f728:	193fe20e 	bge	r3,r4,a0f6b4 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  a0f72c:	e037883a 	mov	sp,fp
  a0f730:	dfc00117 	ldw	ra,4(sp)
  a0f734:	df000017 	ldw	fp,0(sp)
  a0f738:	dec00204 	addi	sp,sp,8
  a0f73c:	f800283a 	ret

00a0f740 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  a0f740:	defff404 	addi	sp,sp,-48
  a0f744:	df000b15 	stw	fp,44(sp)
  a0f748:	df000b04 	addi	fp,sp,44
  a0f74c:	e13ffb15 	stw	r4,-20(fp)
  a0f750:	e17ffc15 	stw	r5,-16(fp)
  a0f754:	e1bffd15 	stw	r6,-12(fp)
  a0f758:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  a0f75c:	e03ff915 	stw	zero,-28(fp)
  a0f760:	00802874 	movhi	r2,161
  a0f764:	1091e604 	addi	r2,r2,18328
  a0f768:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  a0f76c:	1005003a 	cmpeq	r2,r2,zero
  a0f770:	1000411e 	bne	r2,zero,a0f878 <alt_alarm_start+0x138>
  {
    if (alarm)
  a0f774:	e0bffb17 	ldw	r2,-20(fp)
  a0f778:	1005003a 	cmpeq	r2,r2,zero
  a0f77c:	10003b1e 	bne	r2,zero,a0f86c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  a0f780:	e0fffb17 	ldw	r3,-20(fp)
  a0f784:	e0bffd17 	ldw	r2,-12(fp)
  a0f788:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  a0f78c:	e0fffb17 	ldw	r3,-20(fp)
  a0f790:	e0bffe17 	ldw	r2,-8(fp)
  a0f794:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  a0f798:	0005303a 	rdctl	r2,status
  a0f79c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  a0f7a0:	e0fff817 	ldw	r3,-32(fp)
  a0f7a4:	00bfff84 	movi	r2,-2
  a0f7a8:	1884703a 	and	r2,r3,r2
  a0f7ac:	1001703a 	wrctl	status,r2
  
  return context;
  a0f7b0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  a0f7b4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  a0f7b8:	00802874 	movhi	r2,161
  a0f7bc:	1091e704 	addi	r2,r2,18332
  a0f7c0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  a0f7c4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  a0f7c8:	e0fffc17 	ldw	r3,-16(fp)
  a0f7cc:	e0bff917 	ldw	r2,-28(fp)
  a0f7d0:	1885883a 	add	r2,r3,r2
  a0f7d4:	10c00044 	addi	r3,r2,1
  a0f7d8:	e0bffb17 	ldw	r2,-20(fp)
  a0f7dc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  a0f7e0:	e0bffb17 	ldw	r2,-20(fp)
  a0f7e4:	10c00217 	ldw	r3,8(r2)
  a0f7e8:	e0bff917 	ldw	r2,-28(fp)
  a0f7ec:	1880042e 	bgeu	r3,r2,a0f800 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  a0f7f0:	e0fffb17 	ldw	r3,-20(fp)
  a0f7f4:	00800044 	movi	r2,1
  a0f7f8:	18800405 	stb	r2,16(r3)
  a0f7fc:	00000206 	br	a0f808 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  a0f800:	e0bffb17 	ldw	r2,-20(fp)
  a0f804:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  a0f808:	e0fffb17 	ldw	r3,-20(fp)
  a0f80c:	00802874 	movhi	r2,161
  a0f810:	108ae304 	addi	r2,r2,11148
  a0f814:	e0bff615 	stw	r2,-40(fp)
  a0f818:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  a0f81c:	e0fff717 	ldw	r3,-36(fp)
  a0f820:	e0bff617 	ldw	r2,-40(fp)
  a0f824:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  a0f828:	e0bff617 	ldw	r2,-40(fp)
  a0f82c:	10c00017 	ldw	r3,0(r2)
  a0f830:	e0bff717 	ldw	r2,-36(fp)
  a0f834:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  a0f838:	e0bff617 	ldw	r2,-40(fp)
  a0f83c:	10c00017 	ldw	r3,0(r2)
  a0f840:	e0bff717 	ldw	r2,-36(fp)
  a0f844:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  a0f848:	e0fff617 	ldw	r3,-40(fp)
  a0f84c:	e0bff717 	ldw	r2,-36(fp)
  a0f850:	18800015 	stw	r2,0(r3)
  a0f854:	e0bffa17 	ldw	r2,-24(fp)
  a0f858:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  a0f85c:	e0bff517 	ldw	r2,-44(fp)
  a0f860:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  a0f864:	e03fff15 	stw	zero,-4(fp)
  a0f868:	00000506 	br	a0f880 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  a0f86c:	00bffa84 	movi	r2,-22
  a0f870:	e0bfff15 	stw	r2,-4(fp)
  a0f874:	00000206 	br	a0f880 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  a0f878:	00bfde84 	movi	r2,-134
  a0f87c:	e0bfff15 	stw	r2,-4(fp)
  a0f880:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  a0f884:	e037883a 	mov	sp,fp
  a0f888:	df000017 	ldw	fp,0(sp)
  a0f88c:	dec00104 	addi	sp,sp,4
  a0f890:	f800283a 	ret

00a0f894 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  a0f894:	defffe04 	addi	sp,sp,-8
  a0f898:	df000115 	stw	fp,4(sp)
  a0f89c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  a0f8a0:	e03fff15 	stw	zero,-4(fp)
  a0f8a4:	00000506 	br	a0f8bc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  a0f8a8:	e0bfff17 	ldw	r2,-4(fp)
  a0f8ac:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  a0f8b0:	e0bfff17 	ldw	r2,-4(fp)
  a0f8b4:	10800804 	addi	r2,r2,32
  a0f8b8:	e0bfff15 	stw	r2,-4(fp)
  a0f8bc:	e0bfff17 	ldw	r2,-4(fp)
  a0f8c0:	10810030 	cmpltui	r2,r2,1024
  a0f8c4:	103ff81e 	bne	r2,zero,a0f8a8 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  a0f8c8:	e037883a 	mov	sp,fp
  a0f8cc:	df000017 	ldw	fp,0(sp)
  a0f8d0:	dec00104 	addi	sp,sp,4
  a0f8d4:	f800283a 	ret

00a0f8d8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  a0f8d8:	defff904 	addi	sp,sp,-28
  a0f8dc:	dfc00615 	stw	ra,24(sp)
  a0f8e0:	df000515 	stw	fp,20(sp)
  a0f8e4:	df000504 	addi	fp,sp,20
  a0f8e8:	e13ffd15 	stw	r4,-12(fp)
  a0f8ec:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  a0f8f0:	e0bffd17 	ldw	r2,-12(fp)
  a0f8f4:	1005003a 	cmpeq	r2,r2,zero
  a0f8f8:	1000041e 	bne	r2,zero,a0f90c <alt_dev_llist_insert+0x34>
  a0f8fc:	e0bffd17 	ldw	r2,-12(fp)
  a0f900:	10800217 	ldw	r2,8(r2)
  a0f904:	1004c03a 	cmpne	r2,r2,zero
  a0f908:	1000071e 	bne	r2,zero,a0f928 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  a0f90c:	0a0f98c0 	call	a0f98c <alt_get_errno>
  a0f910:	1007883a 	mov	r3,r2
  a0f914:	00800584 	movi	r2,22
  a0f918:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  a0f91c:	00bffa84 	movi	r2,-22
  a0f920:	e0bfff15 	stw	r2,-4(fp)
  a0f924:	00001306 	br	a0f974 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  a0f928:	e0fffd17 	ldw	r3,-12(fp)
  a0f92c:	e0bffe17 	ldw	r2,-8(fp)
  a0f930:	e0bffb15 	stw	r2,-20(fp)
  a0f934:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  a0f938:	e0fffc17 	ldw	r3,-16(fp)
  a0f93c:	e0bffb17 	ldw	r2,-20(fp)
  a0f940:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  a0f944:	e0bffb17 	ldw	r2,-20(fp)
  a0f948:	10c00017 	ldw	r3,0(r2)
  a0f94c:	e0bffc17 	ldw	r2,-16(fp)
  a0f950:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  a0f954:	e0bffb17 	ldw	r2,-20(fp)
  a0f958:	10c00017 	ldw	r3,0(r2)
  a0f95c:	e0bffc17 	ldw	r2,-16(fp)
  a0f960:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  a0f964:	e0fffb17 	ldw	r3,-20(fp)
  a0f968:	e0bffc17 	ldw	r2,-16(fp)
  a0f96c:	18800015 	stw	r2,0(r3)

  return 0;  
  a0f970:	e03fff15 	stw	zero,-4(fp)
  a0f974:	e0bfff17 	ldw	r2,-4(fp)
}
  a0f978:	e037883a 	mov	sp,fp
  a0f97c:	dfc00117 	ldw	ra,4(sp)
  a0f980:	df000017 	ldw	fp,0(sp)
  a0f984:	dec00204 	addi	sp,sp,8
  a0f988:	f800283a 	ret

00a0f98c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0f98c:	defffd04 	addi	sp,sp,-12
  a0f990:	dfc00215 	stw	ra,8(sp)
  a0f994:	df000115 	stw	fp,4(sp)
  a0f998:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0f99c:	00802874 	movhi	r2,161
  a0f9a0:	108adc04 	addi	r2,r2,11120
  a0f9a4:	10800017 	ldw	r2,0(r2)
  a0f9a8:	1005003a 	cmpeq	r2,r2,zero
  a0f9ac:	1000061e 	bne	r2,zero,a0f9c8 <alt_get_errno+0x3c>
  a0f9b0:	00802874 	movhi	r2,161
  a0f9b4:	108adc04 	addi	r2,r2,11120
  a0f9b8:	10800017 	ldw	r2,0(r2)
  a0f9bc:	103ee83a 	callr	r2
  a0f9c0:	e0bfff15 	stw	r2,-4(fp)
  a0f9c4:	00000306 	br	a0f9d4 <alt_get_errno+0x48>
  a0f9c8:	00802874 	movhi	r2,161
  a0f9cc:	1091e104 	addi	r2,r2,18308
  a0f9d0:	e0bfff15 	stw	r2,-4(fp)
  a0f9d4:	e0bfff17 	ldw	r2,-4(fp)
}
  a0f9d8:	e037883a 	mov	sp,fp
  a0f9dc:	dfc00117 	ldw	ra,4(sp)
  a0f9e0:	df000017 	ldw	fp,0(sp)
  a0f9e4:	dec00204 	addi	sp,sp,8
  a0f9e8:	f800283a 	ret

00a0f9ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  a0f9ec:	defffd04 	addi	sp,sp,-12
  a0f9f0:	dfc00215 	stw	ra,8(sp)
  a0f9f4:	df000115 	stw	fp,4(sp)
  a0f9f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  a0f9fc:	00bfff04 	movi	r2,-4
  a0fa00:	00c02874 	movhi	r3,161
  a0fa04:	18c2ba04 	addi	r3,r3,2792
  a0fa08:	1885883a 	add	r2,r3,r2
  a0fa0c:	e0bfff15 	stw	r2,-4(fp)
  a0fa10:	00000606 	br	a0fa2c <_do_ctors+0x40>
        (*ctor) (); 
  a0fa14:	e0bfff17 	ldw	r2,-4(fp)
  a0fa18:	10800017 	ldw	r2,0(r2)
  a0fa1c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  a0fa20:	e0bfff17 	ldw	r2,-4(fp)
  a0fa24:	10bfff04 	addi	r2,r2,-4
  a0fa28:	e0bfff15 	stw	r2,-4(fp)
  a0fa2c:	e0ffff17 	ldw	r3,-4(fp)
  a0fa30:	00802874 	movhi	r2,161
  a0fa34:	1082b904 	addi	r2,r2,2788
  a0fa38:	18bff62e 	bgeu	r3,r2,a0fa14 <_do_ctors+0x28>
        (*ctor) (); 
}
  a0fa3c:	e037883a 	mov	sp,fp
  a0fa40:	dfc00117 	ldw	ra,4(sp)
  a0fa44:	df000017 	ldw	fp,0(sp)
  a0fa48:	dec00204 	addi	sp,sp,8
  a0fa4c:	f800283a 	ret

00a0fa50 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  a0fa50:	defffd04 	addi	sp,sp,-12
  a0fa54:	dfc00215 	stw	ra,8(sp)
  a0fa58:	df000115 	stw	fp,4(sp)
  a0fa5c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  a0fa60:	00bfff04 	movi	r2,-4
  a0fa64:	00c02874 	movhi	r3,161
  a0fa68:	18c2ba04 	addi	r3,r3,2792
  a0fa6c:	1885883a 	add	r2,r3,r2
  a0fa70:	e0bfff15 	stw	r2,-4(fp)
  a0fa74:	00000606 	br	a0fa90 <_do_dtors+0x40>
        (*dtor) (); 
  a0fa78:	e0bfff17 	ldw	r2,-4(fp)
  a0fa7c:	10800017 	ldw	r2,0(r2)
  a0fa80:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  a0fa84:	e0bfff17 	ldw	r2,-4(fp)
  a0fa88:	10bfff04 	addi	r2,r2,-4
  a0fa8c:	e0bfff15 	stw	r2,-4(fp)
  a0fa90:	e0ffff17 	ldw	r3,-4(fp)
  a0fa94:	00802874 	movhi	r2,161
  a0fa98:	1082ba04 	addi	r2,r2,2792
  a0fa9c:	18bff62e 	bgeu	r3,r2,a0fa78 <_do_dtors+0x28>
        (*dtor) (); 
}
  a0faa0:	e037883a 	mov	sp,fp
  a0faa4:	dfc00117 	ldw	ra,4(sp)
  a0faa8:	df000017 	ldw	fp,0(sp)
  a0faac:	dec00204 	addi	sp,sp,8
  a0fab0:	f800283a 	ret

00a0fab4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  a0fab4:	defff904 	addi	sp,sp,-28
  a0fab8:	dfc00615 	stw	ra,24(sp)
  a0fabc:	df000515 	stw	fp,20(sp)
  a0fac0:	df000504 	addi	fp,sp,20
  a0fac4:	e13ffd15 	stw	r4,-12(fp)
  a0fac8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  a0facc:	e0bffe17 	ldw	r2,-8(fp)
  a0fad0:	10800017 	ldw	r2,0(r2)
  a0fad4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  a0fad8:	e13ffd17 	ldw	r4,-12(fp)
  a0fadc:	0a039300 	call	a03930 <strlen>
  a0fae0:	10800044 	addi	r2,r2,1
  a0fae4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  a0fae8:	00000d06 	br	a0fb20 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  a0faec:	e0bffc17 	ldw	r2,-16(fp)
  a0faf0:	11000217 	ldw	r4,8(r2)
  a0faf4:	e1bffb17 	ldw	r6,-20(fp)
  a0faf8:	e17ffd17 	ldw	r5,-12(fp)
  a0fafc:	0a106bc0 	call	a106bc <memcmp>
  a0fb00:	1004c03a 	cmpne	r2,r2,zero
  a0fb04:	1000031e 	bne	r2,zero,a0fb14 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  a0fb08:	e0bffc17 	ldw	r2,-16(fp)
  a0fb0c:	e0bfff15 	stw	r2,-4(fp)
  a0fb10:	00000706 	br	a0fb30 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  a0fb14:	e0bffc17 	ldw	r2,-16(fp)
  a0fb18:	10800017 	ldw	r2,0(r2)
  a0fb1c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  a0fb20:	e0fffe17 	ldw	r3,-8(fp)
  a0fb24:	e0bffc17 	ldw	r2,-16(fp)
  a0fb28:	10fff01e 	bne	r2,r3,a0faec <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  a0fb2c:	e03fff15 	stw	zero,-4(fp)
  a0fb30:	e0bfff17 	ldw	r2,-4(fp)
}
  a0fb34:	e037883a 	mov	sp,fp
  a0fb38:	dfc00117 	ldw	ra,4(sp)
  a0fb3c:	df000017 	ldw	fp,0(sp)
  a0fb40:	dec00204 	addi	sp,sp,8
  a0fb44:	f800283a 	ret

00a0fb48 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  a0fb48:	defffe04 	addi	sp,sp,-8
  a0fb4c:	dfc00115 	stw	ra,4(sp)
  a0fb50:	df000015 	stw	fp,0(sp)
  a0fb54:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  a0fb58:	0009883a 	mov	r4,zero
  a0fb5c:	01440004 	movi	r5,4096
  a0fb60:	0a105e00 	call	a105e0 <alt_icache_flush>
#endif
}
  a0fb64:	e037883a 	mov	sp,fp
  a0fb68:	dfc00117 	ldw	ra,4(sp)
  a0fb6c:	df000017 	ldw	fp,0(sp)
  a0fb70:	dec00204 	addi	sp,sp,8
  a0fb74:	f800283a 	ret

00a0fb78 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  a0fb78:	defff904 	addi	sp,sp,-28
  a0fb7c:	dfc00615 	stw	ra,24(sp)
  a0fb80:	df000515 	stw	fp,20(sp)
  a0fb84:	df000504 	addi	fp,sp,20
  a0fb88:	e13ffc15 	stw	r4,-16(fp)
  a0fb8c:	e17ffd15 	stw	r5,-12(fp)
  a0fb90:	e1bffe15 	stw	r6,-8(fp)
  a0fb94:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  a0fb98:	e0800217 	ldw	r2,8(fp)
  a0fb9c:	d8800015 	stw	r2,0(sp)
  a0fba0:	e13ffc17 	ldw	r4,-16(fp)
  a0fba4:	e17ffd17 	ldw	r5,-12(fp)
  a0fba8:	e1bffe17 	ldw	r6,-8(fp)
  a0fbac:	e1ffff17 	ldw	r7,-4(fp)
  a0fbb0:	0a0fd4c0 	call	a0fd4c <alt_iic_isr_register>
}  
  a0fbb4:	e037883a 	mov	sp,fp
  a0fbb8:	dfc00117 	ldw	ra,4(sp)
  a0fbbc:	df000017 	ldw	fp,0(sp)
  a0fbc0:	dec00204 	addi	sp,sp,8
  a0fbc4:	f800283a 	ret

00a0fbc8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  a0fbc8:	defff904 	addi	sp,sp,-28
  a0fbcc:	df000615 	stw	fp,24(sp)
  a0fbd0:	df000604 	addi	fp,sp,24
  a0fbd4:	e13ffe15 	stw	r4,-8(fp)
  a0fbd8:	e17fff15 	stw	r5,-4(fp)
  a0fbdc:	e0bfff17 	ldw	r2,-4(fp)
  a0fbe0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  a0fbe4:	0005303a 	rdctl	r2,status
  a0fbe8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  a0fbec:	e0fffb17 	ldw	r3,-20(fp)
  a0fbf0:	00bfff84 	movi	r2,-2
  a0fbf4:	1884703a 	and	r2,r3,r2
  a0fbf8:	1001703a 	wrctl	status,r2
  
  return context;
  a0fbfc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  a0fc00:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  a0fc04:	e0fffc17 	ldw	r3,-16(fp)
  a0fc08:	00800044 	movi	r2,1
  a0fc0c:	10c4983a 	sll	r2,r2,r3
  a0fc10:	1007883a 	mov	r3,r2
  a0fc14:	00802874 	movhi	r2,161
  a0fc18:	1091e504 	addi	r2,r2,18324
  a0fc1c:	10800017 	ldw	r2,0(r2)
  a0fc20:	1886b03a 	or	r3,r3,r2
  a0fc24:	00802874 	movhi	r2,161
  a0fc28:	1091e504 	addi	r2,r2,18324
  a0fc2c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  a0fc30:	00802874 	movhi	r2,161
  a0fc34:	1091e504 	addi	r2,r2,18324
  a0fc38:	10800017 	ldw	r2,0(r2)
  a0fc3c:	100170fa 	wrctl	ienable,r2
  a0fc40:	e0bffd17 	ldw	r2,-12(fp)
  a0fc44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  a0fc48:	e0bffa17 	ldw	r2,-24(fp)
  a0fc4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  a0fc50:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  a0fc54:	e037883a 	mov	sp,fp
  a0fc58:	df000017 	ldw	fp,0(sp)
  a0fc5c:	dec00104 	addi	sp,sp,4
  a0fc60:	f800283a 	ret

00a0fc64 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  a0fc64:	defff904 	addi	sp,sp,-28
  a0fc68:	df000615 	stw	fp,24(sp)
  a0fc6c:	df000604 	addi	fp,sp,24
  a0fc70:	e13ffe15 	stw	r4,-8(fp)
  a0fc74:	e17fff15 	stw	r5,-4(fp)
  a0fc78:	e0bfff17 	ldw	r2,-4(fp)
  a0fc7c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  a0fc80:	0005303a 	rdctl	r2,status
  a0fc84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  a0fc88:	e0fffb17 	ldw	r3,-20(fp)
  a0fc8c:	00bfff84 	movi	r2,-2
  a0fc90:	1884703a 	and	r2,r3,r2
  a0fc94:	1001703a 	wrctl	status,r2
  
  return context;
  a0fc98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  a0fc9c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  a0fca0:	e0fffc17 	ldw	r3,-16(fp)
  a0fca4:	00800044 	movi	r2,1
  a0fca8:	10c4983a 	sll	r2,r2,r3
  a0fcac:	0084303a 	nor	r2,zero,r2
  a0fcb0:	1007883a 	mov	r3,r2
  a0fcb4:	00802874 	movhi	r2,161
  a0fcb8:	1091e504 	addi	r2,r2,18324
  a0fcbc:	10800017 	ldw	r2,0(r2)
  a0fcc0:	1886703a 	and	r3,r3,r2
  a0fcc4:	00802874 	movhi	r2,161
  a0fcc8:	1091e504 	addi	r2,r2,18324
  a0fccc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  a0fcd0:	00802874 	movhi	r2,161
  a0fcd4:	1091e504 	addi	r2,r2,18324
  a0fcd8:	10800017 	ldw	r2,0(r2)
  a0fcdc:	100170fa 	wrctl	ienable,r2
  a0fce0:	e0bffd17 	ldw	r2,-12(fp)
  a0fce4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  a0fce8:	e0bffa17 	ldw	r2,-24(fp)
  a0fcec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  a0fcf0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  a0fcf4:	e037883a 	mov	sp,fp
  a0fcf8:	df000017 	ldw	fp,0(sp)
  a0fcfc:	dec00104 	addi	sp,sp,4
  a0fd00:	f800283a 	ret

00a0fd04 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  a0fd04:	defffc04 	addi	sp,sp,-16
  a0fd08:	df000315 	stw	fp,12(sp)
  a0fd0c:	df000304 	addi	fp,sp,12
  a0fd10:	e13ffe15 	stw	r4,-8(fp)
  a0fd14:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  a0fd18:	000530fa 	rdctl	r2,ienable
  a0fd1c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  a0fd20:	e0ffff17 	ldw	r3,-4(fp)
  a0fd24:	00800044 	movi	r2,1
  a0fd28:	10c4983a 	sll	r2,r2,r3
  a0fd2c:	1007883a 	mov	r3,r2
  a0fd30:	e0bffd17 	ldw	r2,-12(fp)
  a0fd34:	1884703a 	and	r2,r3,r2
  a0fd38:	1004c03a 	cmpne	r2,r2,zero
}
  a0fd3c:	e037883a 	mov	sp,fp
  a0fd40:	df000017 	ldw	fp,0(sp)
  a0fd44:	dec00104 	addi	sp,sp,4
  a0fd48:	f800283a 	ret

00a0fd4c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  a0fd4c:	defff404 	addi	sp,sp,-48
  a0fd50:	dfc00b15 	stw	ra,44(sp)
  a0fd54:	df000a15 	stw	fp,40(sp)
  a0fd58:	df000a04 	addi	fp,sp,40
  a0fd5c:	e13ffb15 	stw	r4,-20(fp)
  a0fd60:	e17ffc15 	stw	r5,-16(fp)
  a0fd64:	e1bffd15 	stw	r6,-12(fp)
  a0fd68:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  a0fd6c:	00bffa84 	movi	r2,-22
  a0fd70:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  a0fd74:	e0bffc17 	ldw	r2,-16(fp)
  a0fd78:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  a0fd7c:	e0bff917 	ldw	r2,-28(fp)
  a0fd80:	10800808 	cmpgei	r2,r2,32
  a0fd84:	1000291e 	bne	r2,zero,a0fe2c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  a0fd88:	0005303a 	rdctl	r2,status
  a0fd8c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  a0fd90:	e0fff717 	ldw	r3,-36(fp)
  a0fd94:	00bfff84 	movi	r2,-2
  a0fd98:	1884703a 	and	r2,r3,r2
  a0fd9c:	1001703a 	wrctl	status,r2
  
  return context;
  a0fda0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  a0fda4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  a0fda8:	e0bff917 	ldw	r2,-28(fp)
  a0fdac:	00c02874 	movhi	r3,161
  a0fdb0:	18d1f204 	addi	r3,r3,18376
  a0fdb4:	100490fa 	slli	r2,r2,3
  a0fdb8:	10c7883a 	add	r3,r2,r3
  a0fdbc:	e0bffd17 	ldw	r2,-12(fp)
  a0fdc0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  a0fdc4:	e0bff917 	ldw	r2,-28(fp)
  a0fdc8:	00c02874 	movhi	r3,161
  a0fdcc:	18d1f204 	addi	r3,r3,18376
  a0fdd0:	100490fa 	slli	r2,r2,3
  a0fdd4:	10c5883a 	add	r2,r2,r3
  a0fdd8:	10c00104 	addi	r3,r2,4
  a0fddc:	e0bffe17 	ldw	r2,-8(fp)
  a0fde0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  a0fde4:	e0bffd17 	ldw	r2,-12(fp)
  a0fde8:	1005003a 	cmpeq	r2,r2,zero
  a0fdec:	1000051e 	bne	r2,zero,a0fe04 <alt_iic_isr_register+0xb8>
  a0fdf0:	e17ff917 	ldw	r5,-28(fp)
  a0fdf4:	e13ffb17 	ldw	r4,-20(fp)
  a0fdf8:	0a0fbc80 	call	a0fbc8 <alt_ic_irq_enable>
  a0fdfc:	e0bfff15 	stw	r2,-4(fp)
  a0fe00:	00000406 	br	a0fe14 <alt_iic_isr_register+0xc8>
  a0fe04:	e17ff917 	ldw	r5,-28(fp)
  a0fe08:	e13ffb17 	ldw	r4,-20(fp)
  a0fe0c:	0a0fc640 	call	a0fc64 <alt_ic_irq_disable>
  a0fe10:	e0bfff15 	stw	r2,-4(fp)
  a0fe14:	e0bfff17 	ldw	r2,-4(fp)
  a0fe18:	e0bffa15 	stw	r2,-24(fp)
  a0fe1c:	e0bff817 	ldw	r2,-32(fp)
  a0fe20:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  a0fe24:	e0bff617 	ldw	r2,-40(fp)
  a0fe28:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  a0fe2c:	e0bffa17 	ldw	r2,-24(fp)
}
  a0fe30:	e037883a 	mov	sp,fp
  a0fe34:	dfc00117 	ldw	ra,4(sp)
  a0fe38:	df000017 	ldw	fp,0(sp)
  a0fe3c:	dec00204 	addi	sp,sp,8
  a0fe40:	f800283a 	ret

00a0fe44 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  a0fe44:	defff904 	addi	sp,sp,-28
  a0fe48:	dfc00615 	stw	ra,24(sp)
  a0fe4c:	df000515 	stw	fp,20(sp)
  a0fe50:	df000504 	addi	fp,sp,20
  a0fe54:	e13ffc15 	stw	r4,-16(fp)
  a0fe58:	e17ffd15 	stw	r5,-12(fp)
  a0fe5c:	e1bffe15 	stw	r6,-8(fp)
  a0fe60:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  a0fe64:	e13ffd17 	ldw	r4,-12(fp)
  a0fe68:	e17ffe17 	ldw	r5,-8(fp)
  a0fe6c:	e1bfff17 	ldw	r6,-4(fp)
  a0fe70:	0a1005c0 	call	a1005c <open>
  a0fe74:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  a0fe78:	e0bffb17 	ldw	r2,-20(fp)
  a0fe7c:	1004803a 	cmplt	r2,r2,zero
  a0fe80:	10001c1e 	bne	r2,zero,a0fef4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  a0fe84:	e0bffb17 	ldw	r2,-20(fp)
  a0fe88:	00c02874 	movhi	r3,161
  a0fe8c:	18c5ff04 	addi	r3,r3,6140
  a0fe90:	10800324 	muli	r2,r2,12
  a0fe94:	10c5883a 	add	r2,r2,r3
  a0fe98:	10c00017 	ldw	r3,0(r2)
  a0fe9c:	e0bffc17 	ldw	r2,-16(fp)
  a0fea0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  a0fea4:	e0bffb17 	ldw	r2,-20(fp)
  a0fea8:	00c02874 	movhi	r3,161
  a0feac:	18c5ff04 	addi	r3,r3,6140
  a0feb0:	10800324 	muli	r2,r2,12
  a0feb4:	10c5883a 	add	r2,r2,r3
  a0feb8:	10800104 	addi	r2,r2,4
  a0febc:	10c00017 	ldw	r3,0(r2)
  a0fec0:	e0bffc17 	ldw	r2,-16(fp)
  a0fec4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  a0fec8:	e0bffb17 	ldw	r2,-20(fp)
  a0fecc:	00c02874 	movhi	r3,161
  a0fed0:	18c5ff04 	addi	r3,r3,6140
  a0fed4:	10800324 	muli	r2,r2,12
  a0fed8:	10c5883a 	add	r2,r2,r3
  a0fedc:	10800204 	addi	r2,r2,8
  a0fee0:	10c00017 	ldw	r3,0(r2)
  a0fee4:	e0bffc17 	ldw	r2,-16(fp)
  a0fee8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  a0feec:	e13ffb17 	ldw	r4,-20(fp)
  a0fef0:	0a0c97c0 	call	a0c97c <alt_release_fd>
  }
} 
  a0fef4:	e037883a 	mov	sp,fp
  a0fef8:	dfc00117 	ldw	ra,4(sp)
  a0fefc:	df000017 	ldw	fp,0(sp)
  a0ff00:	dec00204 	addi	sp,sp,8
  a0ff04:	f800283a 	ret

00a0ff08 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  a0ff08:	defffb04 	addi	sp,sp,-20
  a0ff0c:	dfc00415 	stw	ra,16(sp)
  a0ff10:	df000315 	stw	fp,12(sp)
  a0ff14:	df000304 	addi	fp,sp,12
  a0ff18:	e13ffd15 	stw	r4,-12(fp)
  a0ff1c:	e17ffe15 	stw	r5,-8(fp)
  a0ff20:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  a0ff24:	01002874 	movhi	r4,161
  a0ff28:	21060204 	addi	r4,r4,6152
  a0ff2c:	e17ffd17 	ldw	r5,-12(fp)
  a0ff30:	01800044 	movi	r6,1
  a0ff34:	01c07fc4 	movi	r7,511
  a0ff38:	0a0fe440 	call	a0fe44 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  a0ff3c:	01002874 	movhi	r4,161
  a0ff40:	2105ff04 	addi	r4,r4,6140
  a0ff44:	e17ffe17 	ldw	r5,-8(fp)
  a0ff48:	000d883a 	mov	r6,zero
  a0ff4c:	01c07fc4 	movi	r7,511
  a0ff50:	0a0fe440 	call	a0fe44 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  a0ff54:	01002874 	movhi	r4,161
  a0ff58:	21060504 	addi	r4,r4,6164
  a0ff5c:	e17fff17 	ldw	r5,-4(fp)
  a0ff60:	01800044 	movi	r6,1
  a0ff64:	01c07fc4 	movi	r7,511
  a0ff68:	0a0fe440 	call	a0fe44 <alt_open_fd>
}  
  a0ff6c:	e037883a 	mov	sp,fp
  a0ff70:	dfc00117 	ldw	ra,4(sp)
  a0ff74:	df000017 	ldw	fp,0(sp)
  a0ff78:	dec00204 	addi	sp,sp,8
  a0ff7c:	f800283a 	ret

00a0ff80 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  a0ff80:	defffc04 	addi	sp,sp,-16
  a0ff84:	df000315 	stw	fp,12(sp)
  a0ff88:	df000304 	addi	fp,sp,12
  a0ff8c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  a0ff90:	e0bffe17 	ldw	r2,-8(fp)
  a0ff94:	10800217 	ldw	r2,8(r2)
  a0ff98:	10d00034 	orhi	r3,r2,16384
  a0ff9c:	e0bffe17 	ldw	r2,-8(fp)
  a0ffa0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  a0ffa4:	e03ffd15 	stw	zero,-12(fp)
  a0ffa8:	00002006 	br	a1002c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  a0ffac:	e0bffd17 	ldw	r2,-12(fp)
  a0ffb0:	00c02874 	movhi	r3,161
  a0ffb4:	18c5ff04 	addi	r3,r3,6140
  a0ffb8:	10800324 	muli	r2,r2,12
  a0ffbc:	10c5883a 	add	r2,r2,r3
  a0ffc0:	10c00017 	ldw	r3,0(r2)
  a0ffc4:	e0bffe17 	ldw	r2,-8(fp)
  a0ffc8:	10800017 	ldw	r2,0(r2)
  a0ffcc:	1880141e 	bne	r3,r2,a10020 <alt_file_locked+0xa0>
  a0ffd0:	e0bffd17 	ldw	r2,-12(fp)
  a0ffd4:	00c02874 	movhi	r3,161
  a0ffd8:	18c5ff04 	addi	r3,r3,6140
  a0ffdc:	10800324 	muli	r2,r2,12
  a0ffe0:	10c5883a 	add	r2,r2,r3
  a0ffe4:	10800204 	addi	r2,r2,8
  a0ffe8:	10800017 	ldw	r2,0(r2)
  a0ffec:	1004403a 	cmpge	r2,r2,zero
  a0fff0:	10000b1e 	bne	r2,zero,a10020 <alt_file_locked+0xa0>
  a0fff4:	e0bffd17 	ldw	r2,-12(fp)
  a0fff8:	10800324 	muli	r2,r2,12
  a0fffc:	1007883a 	mov	r3,r2
  a10000:	00802874 	movhi	r2,161
  a10004:	1085ff04 	addi	r2,r2,6140
  a10008:	1887883a 	add	r3,r3,r2
  a1000c:	e0bffe17 	ldw	r2,-8(fp)
  a10010:	18800326 	beq	r3,r2,a10020 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  a10014:	00bffcc4 	movi	r2,-13
  a10018:	e0bfff15 	stw	r2,-4(fp)
  a1001c:	00000a06 	br	a10048 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  a10020:	e0bffd17 	ldw	r2,-12(fp)
  a10024:	10800044 	addi	r2,r2,1
  a10028:	e0bffd15 	stw	r2,-12(fp)
  a1002c:	00802874 	movhi	r2,161
  a10030:	108adb04 	addi	r2,r2,11116
  a10034:	10800017 	ldw	r2,0(r2)
  a10038:	1007883a 	mov	r3,r2
  a1003c:	e0bffd17 	ldw	r2,-12(fp)
  a10040:	18bfda2e 	bgeu	r3,r2,a0ffac <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  a10044:	e03fff15 	stw	zero,-4(fp)
  a10048:	e0bfff17 	ldw	r2,-4(fp)
}
  a1004c:	e037883a 	mov	sp,fp
  a10050:	df000017 	ldw	fp,0(sp)
  a10054:	dec00104 	addi	sp,sp,4
  a10058:	f800283a 	ret

00a1005c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  a1005c:	defff404 	addi	sp,sp,-48
  a10060:	dfc00b15 	stw	ra,44(sp)
  a10064:	df000a15 	stw	fp,40(sp)
  a10068:	df000a04 	addi	fp,sp,40
  a1006c:	e13ffb15 	stw	r4,-20(fp)
  a10070:	e17ffc15 	stw	r5,-16(fp)
  a10074:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  a10078:	00bfffc4 	movi	r2,-1
  a1007c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  a10080:	00bffb44 	movi	r2,-19
  a10084:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  a10088:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  a1008c:	e13ffb17 	ldw	r4,-20(fp)
  a10090:	01402874 	movhi	r5,161
  a10094:	294ad904 	addi	r5,r5,11108
  a10098:	0a0fab40 	call	a0fab4 <alt_find_dev>
  a1009c:	e0bffa15 	stw	r2,-24(fp)
  a100a0:	e0bffa17 	ldw	r2,-24(fp)
  a100a4:	1004c03a 	cmpne	r2,r2,zero
  a100a8:	1000051e 	bne	r2,zero,a100c0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  a100ac:	e13ffb17 	ldw	r4,-20(fp)
  a100b0:	0a104080 	call	a10408 <alt_find_file>
  a100b4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  a100b8:	00800044 	movi	r2,1
  a100bc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  a100c0:	e0bffa17 	ldw	r2,-24(fp)
  a100c4:	1005003a 	cmpeq	r2,r2,zero
  a100c8:	1000301e 	bne	r2,zero,a1018c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  a100cc:	e13ffa17 	ldw	r4,-24(fp)
  a100d0:	0a105280 	call	a10528 <alt_get_fd>
  a100d4:	e0bff815 	stw	r2,-32(fp)
  a100d8:	e0bff817 	ldw	r2,-32(fp)
  a100dc:	1004403a 	cmpge	r2,r2,zero
  a100e0:	1000031e 	bne	r2,zero,a100f0 <open+0x94>
    {
      status = index;
  a100e4:	e0bff817 	ldw	r2,-32(fp)
  a100e8:	e0bff715 	stw	r2,-36(fp)
  a100ec:	00002906 	br	a10194 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  a100f0:	e0bff817 	ldw	r2,-32(fp)
  a100f4:	10800324 	muli	r2,r2,12
  a100f8:	1007883a 	mov	r3,r2
  a100fc:	00802874 	movhi	r2,161
  a10100:	1085ff04 	addi	r2,r2,6140
  a10104:	1885883a 	add	r2,r3,r2
  a10108:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  a1010c:	e0fffc17 	ldw	r3,-16(fp)
  a10110:	00900034 	movhi	r2,16384
  a10114:	10bfffc4 	addi	r2,r2,-1
  a10118:	1886703a 	and	r3,r3,r2
  a1011c:	e0bff917 	ldw	r2,-28(fp)
  a10120:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  a10124:	e0bff617 	ldw	r2,-40(fp)
  a10128:	1004c03a 	cmpne	r2,r2,zero
  a1012c:	1000061e 	bne	r2,zero,a10148 <open+0xec>
  a10130:	e13ff917 	ldw	r4,-28(fp)
  a10134:	0a0ff800 	call	a0ff80 <alt_file_locked>
  a10138:	e0bff715 	stw	r2,-36(fp)
  a1013c:	e0bff717 	ldw	r2,-36(fp)
  a10140:	1004803a 	cmplt	r2,r2,zero
  a10144:	1000131e 	bne	r2,zero,a10194 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  a10148:	e0bffa17 	ldw	r2,-24(fp)
  a1014c:	10800317 	ldw	r2,12(r2)
  a10150:	1005003a 	cmpeq	r2,r2,zero
  a10154:	1000091e 	bne	r2,zero,a1017c <open+0x120>
  a10158:	e0bffa17 	ldw	r2,-24(fp)
  a1015c:	10800317 	ldw	r2,12(r2)
  a10160:	e13ff917 	ldw	r4,-28(fp)
  a10164:	e17ffb17 	ldw	r5,-20(fp)
  a10168:	e1bffc17 	ldw	r6,-16(fp)
  a1016c:	e1fffd17 	ldw	r7,-12(fp)
  a10170:	103ee83a 	callr	r2
  a10174:	e0bfff15 	stw	r2,-4(fp)
  a10178:	00000106 	br	a10180 <open+0x124>
  a1017c:	e03fff15 	stw	zero,-4(fp)
  a10180:	e0bfff17 	ldw	r2,-4(fp)
  a10184:	e0bff715 	stw	r2,-36(fp)
  a10188:	00000206 	br	a10194 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  a1018c:	00bffb44 	movi	r2,-19
  a10190:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  a10194:	e0bff717 	ldw	r2,-36(fp)
  a10198:	1004403a 	cmpge	r2,r2,zero
  a1019c:	1000091e 	bne	r2,zero,a101c4 <open+0x168>
  {
    alt_release_fd (index);  
  a101a0:	e13ff817 	ldw	r4,-32(fp)
  a101a4:	0a0c97c0 	call	a0c97c <alt_release_fd>
    ALT_ERRNO = -status;
  a101a8:	0a101e40 	call	a101e4 <alt_get_errno>
  a101ac:	e0fff717 	ldw	r3,-36(fp)
  a101b0:	00c7c83a 	sub	r3,zero,r3
  a101b4:	10c00015 	stw	r3,0(r2)
    return -1;
  a101b8:	00bfffc4 	movi	r2,-1
  a101bc:	e0bffe15 	stw	r2,-8(fp)
  a101c0:	00000206 	br	a101cc <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  a101c4:	e0bff817 	ldw	r2,-32(fp)
  a101c8:	e0bffe15 	stw	r2,-8(fp)
  a101cc:	e0bffe17 	ldw	r2,-8(fp)
}
  a101d0:	e037883a 	mov	sp,fp
  a101d4:	dfc00117 	ldw	ra,4(sp)
  a101d8:	df000017 	ldw	fp,0(sp)
  a101dc:	dec00204 	addi	sp,sp,8
  a101e0:	f800283a 	ret

00a101e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a101e4:	defffd04 	addi	sp,sp,-12
  a101e8:	dfc00215 	stw	ra,8(sp)
  a101ec:	df000115 	stw	fp,4(sp)
  a101f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a101f4:	00802874 	movhi	r2,161
  a101f8:	108adc04 	addi	r2,r2,11120
  a101fc:	10800017 	ldw	r2,0(r2)
  a10200:	1005003a 	cmpeq	r2,r2,zero
  a10204:	1000061e 	bne	r2,zero,a10220 <alt_get_errno+0x3c>
  a10208:	00802874 	movhi	r2,161
  a1020c:	108adc04 	addi	r2,r2,11120
  a10210:	10800017 	ldw	r2,0(r2)
  a10214:	103ee83a 	callr	r2
  a10218:	e0bfff15 	stw	r2,-4(fp)
  a1021c:	00000306 	br	a1022c <alt_get_errno+0x48>
  a10220:	00802874 	movhi	r2,161
  a10224:	1091e104 	addi	r2,r2,18308
  a10228:	e0bfff15 	stw	r2,-4(fp)
  a1022c:	e0bfff17 	ldw	r2,-4(fp)
}
  a10230:	e037883a 	mov	sp,fp
  a10234:	dfc00117 	ldw	ra,4(sp)
  a10238:	df000017 	ldw	fp,0(sp)
  a1023c:	dec00204 	addi	sp,sp,8
  a10240:	f800283a 	ret

00a10244 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  a10244:	defffa04 	addi	sp,sp,-24
  a10248:	df000515 	stw	fp,20(sp)
  a1024c:	df000504 	addi	fp,sp,20
  a10250:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  a10254:	0005303a 	rdctl	r2,status
  a10258:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  a1025c:	e0fffd17 	ldw	r3,-12(fp)
  a10260:	00bfff84 	movi	r2,-2
  a10264:	1884703a 	and	r2,r3,r2
  a10268:	1001703a 	wrctl	status,r2
  
  return context;
  a1026c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  a10270:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  a10274:	e0bfff17 	ldw	r2,-4(fp)
  a10278:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  a1027c:	e0bffc17 	ldw	r2,-16(fp)
  a10280:	10c00017 	ldw	r3,0(r2)
  a10284:	e0bffc17 	ldw	r2,-16(fp)
  a10288:	10800117 	ldw	r2,4(r2)
  a1028c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  a10290:	e0bffc17 	ldw	r2,-16(fp)
  a10294:	10c00117 	ldw	r3,4(r2)
  a10298:	e0bffc17 	ldw	r2,-16(fp)
  a1029c:	10800017 	ldw	r2,0(r2)
  a102a0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  a102a4:	e0fffc17 	ldw	r3,-16(fp)
  a102a8:	e0bffc17 	ldw	r2,-16(fp)
  a102ac:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  a102b0:	e0fffc17 	ldw	r3,-16(fp)
  a102b4:	e0bffc17 	ldw	r2,-16(fp)
  a102b8:	18800015 	stw	r2,0(r3)
  a102bc:	e0bffe17 	ldw	r2,-8(fp)
  a102c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  a102c4:	e0bffb17 	ldw	r2,-20(fp)
  a102c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  a102cc:	e037883a 	mov	sp,fp
  a102d0:	df000017 	ldw	fp,0(sp)
  a102d4:	dec00104 	addi	sp,sp,4
  a102d8:	f800283a 	ret

00a102dc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  a102dc:	defffb04 	addi	sp,sp,-20
  a102e0:	dfc00415 	stw	ra,16(sp)
  a102e4:	df000315 	stw	fp,12(sp)
  a102e8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  a102ec:	d0a01b17 	ldw	r2,-32660(gp)
  a102f0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  a102f4:	d0a71f17 	ldw	r2,-25476(gp)
  a102f8:	10800044 	addi	r2,r2,1
  a102fc:	d0a71f15 	stw	r2,-25476(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  a10300:	00003106 	br	a103c8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  a10304:	e0bffe17 	ldw	r2,-8(fp)
  a10308:	10800017 	ldw	r2,0(r2)
  a1030c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  a10310:	e0bffe17 	ldw	r2,-8(fp)
  a10314:	10800403 	ldbu	r2,16(r2)
  a10318:	10803fcc 	andi	r2,r2,255
  a1031c:	1005003a 	cmpeq	r2,r2,zero
  a10320:	1000051e 	bne	r2,zero,a10338 <alt_tick+0x5c>
  a10324:	d0a71f17 	ldw	r2,-25476(gp)
  a10328:	1004c03a 	cmpne	r2,r2,zero
  a1032c:	1000021e 	bne	r2,zero,a10338 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  a10330:	e0bffe17 	ldw	r2,-8(fp)
  a10334:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  a10338:	e0bffe17 	ldw	r2,-8(fp)
  a1033c:	10c00217 	ldw	r3,8(r2)
  a10340:	d0a71f17 	ldw	r2,-25476(gp)
  a10344:	10c01e36 	bltu	r2,r3,a103c0 <alt_tick+0xe4>
  a10348:	e0bffe17 	ldw	r2,-8(fp)
  a1034c:	10800403 	ldbu	r2,16(r2)
  a10350:	10803fcc 	andi	r2,r2,255
  a10354:	1004c03a 	cmpne	r2,r2,zero
  a10358:	1000191e 	bne	r2,zero,a103c0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  a1035c:	e0bffe17 	ldw	r2,-8(fp)
  a10360:	10c00317 	ldw	r3,12(r2)
  a10364:	e0bffe17 	ldw	r2,-8(fp)
  a10368:	11000517 	ldw	r4,20(r2)
  a1036c:	183ee83a 	callr	r3
  a10370:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  a10374:	e0bffd17 	ldw	r2,-12(fp)
  a10378:	1004c03a 	cmpne	r2,r2,zero
  a1037c:	1000031e 	bne	r2,zero,a1038c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  a10380:	e13ffe17 	ldw	r4,-8(fp)
  a10384:	0a102440 	call	a10244 <alt_alarm_stop>
  a10388:	00000d06 	br	a103c0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  a1038c:	e0bffe17 	ldw	r2,-8(fp)
  a10390:	10c00217 	ldw	r3,8(r2)
  a10394:	e0bffd17 	ldw	r2,-12(fp)
  a10398:	1887883a 	add	r3,r3,r2
  a1039c:	e0bffe17 	ldw	r2,-8(fp)
  a103a0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  a103a4:	e0bffe17 	ldw	r2,-8(fp)
  a103a8:	10c00217 	ldw	r3,8(r2)
  a103ac:	d0a71f17 	ldw	r2,-25476(gp)
  a103b0:	1880032e 	bgeu	r3,r2,a103c0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  a103b4:	e0fffe17 	ldw	r3,-8(fp)
  a103b8:	00800044 	movi	r2,1
  a103bc:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  a103c0:	e0bfff17 	ldw	r2,-4(fp)
  a103c4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  a103c8:	d0e01b04 	addi	r3,gp,-32660
  a103cc:	e0bffe17 	ldw	r2,-8(fp)
  a103d0:	10ffcc1e 	bne	r2,r3,a10304 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  a103d4:	e037883a 	mov	sp,fp
  a103d8:	dfc00117 	ldw	ra,4(sp)
  a103dc:	df000017 	ldw	fp,0(sp)
  a103e0:	dec00204 	addi	sp,sp,8
  a103e4:	f800283a 	ret

00a103e8 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  a103e8:	deffff04 	addi	sp,sp,-4
  a103ec:	df000015 	stw	fp,0(sp)
  a103f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  a103f4:	000170fa 	wrctl	ienable,zero
}
  a103f8:	e037883a 	mov	sp,fp
  a103fc:	df000017 	ldw	fp,0(sp)
  a10400:	dec00104 	addi	sp,sp,4
  a10404:	f800283a 	ret

00a10408 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  a10408:	defffa04 	addi	sp,sp,-24
  a1040c:	dfc00515 	stw	ra,20(sp)
  a10410:	df000415 	stw	fp,16(sp)
  a10414:	df000404 	addi	fp,sp,16
  a10418:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  a1041c:	00802874 	movhi	r2,161
  a10420:	108ad704 	addi	r2,r2,11100
  a10424:	10800017 	ldw	r2,0(r2)
  a10428:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  a1042c:	00003306 	br	a104fc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  a10430:	e0bffd17 	ldw	r2,-12(fp)
  a10434:	11000217 	ldw	r4,8(r2)
  a10438:	0a039300 	call	a03930 <strlen>
  a1043c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  a10440:	e0bffd17 	ldw	r2,-12(fp)
  a10444:	10c00217 	ldw	r3,8(r2)
  a10448:	e0bffc17 	ldw	r2,-16(fp)
  a1044c:	1885883a 	add	r2,r3,r2
  a10450:	10bfffc4 	addi	r2,r2,-1
  a10454:	10800003 	ldbu	r2,0(r2)
  a10458:	10803fcc 	andi	r2,r2,255
  a1045c:	1080201c 	xori	r2,r2,128
  a10460:	10bfe004 	addi	r2,r2,-128
  a10464:	10800bd8 	cmpnei	r2,r2,47
  a10468:	1000031e 	bne	r2,zero,a10478 <alt_find_file+0x70>
    {
      len -= 1;
  a1046c:	e0bffc17 	ldw	r2,-16(fp)
  a10470:	10bfffc4 	addi	r2,r2,-1
  a10474:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  a10478:	e0bffc17 	ldw	r2,-16(fp)
  a1047c:	1007883a 	mov	r3,r2
  a10480:	e0bffe17 	ldw	r2,-8(fp)
  a10484:	1885883a 	add	r2,r3,r2
  a10488:	10800003 	ldbu	r2,0(r2)
  a1048c:	10803fcc 	andi	r2,r2,255
  a10490:	1080201c 	xori	r2,r2,128
  a10494:	10bfe004 	addi	r2,r2,-128
  a10498:	10800be0 	cmpeqi	r2,r2,47
  a1049c:	10000a1e 	bne	r2,zero,a104c8 <alt_find_file+0xc0>
  a104a0:	e0bffc17 	ldw	r2,-16(fp)
  a104a4:	1007883a 	mov	r3,r2
  a104a8:	e0bffe17 	ldw	r2,-8(fp)
  a104ac:	1885883a 	add	r2,r3,r2
  a104b0:	10800003 	ldbu	r2,0(r2)
  a104b4:	10803fcc 	andi	r2,r2,255
  a104b8:	1080201c 	xori	r2,r2,128
  a104bc:	10bfe004 	addi	r2,r2,-128
  a104c0:	1004c03a 	cmpne	r2,r2,zero
  a104c4:	10000a1e 	bne	r2,zero,a104f0 <alt_find_file+0xe8>
  a104c8:	e0bffd17 	ldw	r2,-12(fp)
  a104cc:	11000217 	ldw	r4,8(r2)
  a104d0:	e1bffc17 	ldw	r6,-16(fp)
  a104d4:	e17ffe17 	ldw	r5,-8(fp)
  a104d8:	0a106bc0 	call	a106bc <memcmp>
  a104dc:	1004c03a 	cmpne	r2,r2,zero
  a104e0:	1000031e 	bne	r2,zero,a104f0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  a104e4:	e0bffd17 	ldw	r2,-12(fp)
  a104e8:	e0bfff15 	stw	r2,-4(fp)
  a104ec:	00000806 	br	a10510 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  a104f0:	e0bffd17 	ldw	r2,-12(fp)
  a104f4:	10800017 	ldw	r2,0(r2)
  a104f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  a104fc:	00c02874 	movhi	r3,161
  a10500:	18cad704 	addi	r3,r3,11100
  a10504:	e0bffd17 	ldw	r2,-12(fp)
  a10508:	10ffc91e 	bne	r2,r3,a10430 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  a1050c:	e03fff15 	stw	zero,-4(fp)
  a10510:	e0bfff17 	ldw	r2,-4(fp)
}
  a10514:	e037883a 	mov	sp,fp
  a10518:	dfc00117 	ldw	ra,4(sp)
  a1051c:	df000017 	ldw	fp,0(sp)
  a10520:	dec00204 	addi	sp,sp,8
  a10524:	f800283a 	ret

00a10528 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  a10528:	defffc04 	addi	sp,sp,-16
  a1052c:	df000315 	stw	fp,12(sp)
  a10530:	df000304 	addi	fp,sp,12
  a10534:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  a10538:	00bffa04 	movi	r2,-24
  a1053c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  a10540:	e03ffe15 	stw	zero,-8(fp)
  a10544:	00001e06 	br	a105c0 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  a10548:	e0bffe17 	ldw	r2,-8(fp)
  a1054c:	00c02874 	movhi	r3,161
  a10550:	18c5ff04 	addi	r3,r3,6140
  a10554:	10800324 	muli	r2,r2,12
  a10558:	10c5883a 	add	r2,r2,r3
  a1055c:	10800017 	ldw	r2,0(r2)
  a10560:	1004c03a 	cmpne	r2,r2,zero
  a10564:	1000131e 	bne	r2,zero,a105b4 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  a10568:	e0bffe17 	ldw	r2,-8(fp)
  a1056c:	00c02874 	movhi	r3,161
  a10570:	18c5ff04 	addi	r3,r3,6140
  a10574:	10800324 	muli	r2,r2,12
  a10578:	10c7883a 	add	r3,r2,r3
  a1057c:	e0bfff17 	ldw	r2,-4(fp)
  a10580:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  a10584:	00802874 	movhi	r2,161
  a10588:	108adb04 	addi	r2,r2,11116
  a1058c:	10c00017 	ldw	r3,0(r2)
  a10590:	e0bffe17 	ldw	r2,-8(fp)
  a10594:	1880040e 	bge	r3,r2,a105a8 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  a10598:	00c02874 	movhi	r3,161
  a1059c:	18cadb04 	addi	r3,r3,11116
  a105a0:	e0bffe17 	ldw	r2,-8(fp)
  a105a4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  a105a8:	e0bffe17 	ldw	r2,-8(fp)
  a105ac:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  a105b0:	00000606 	br	a105cc <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  a105b4:	e0bffe17 	ldw	r2,-8(fp)
  a105b8:	10800044 	addi	r2,r2,1
  a105bc:	e0bffe15 	stw	r2,-8(fp)
  a105c0:	e0bffe17 	ldw	r2,-8(fp)
  a105c4:	10800810 	cmplti	r2,r2,32
  a105c8:	103fdf1e 	bne	r2,zero,a10548 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  a105cc:	e0bffd17 	ldw	r2,-12(fp)
}
  a105d0:	e037883a 	mov	sp,fp
  a105d4:	df000017 	ldw	fp,0(sp)
  a105d8:	dec00104 	addi	sp,sp,4
  a105dc:	f800283a 	ret

00a105e0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  a105e0:	defffb04 	addi	sp,sp,-20
  a105e4:	df000415 	stw	fp,16(sp)
  a105e8:	df000404 	addi	fp,sp,16
  a105ec:	e13ffe15 	stw	r4,-8(fp)
  a105f0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  a105f4:	e0bfff17 	ldw	r2,-4(fp)
  a105f8:	10840070 	cmpltui	r2,r2,4097
  a105fc:	1000021e 	bne	r2,zero,a10608 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  a10600:	00840004 	movi	r2,4096
  a10604:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  a10608:	e0fffe17 	ldw	r3,-8(fp)
  a1060c:	e0bfff17 	ldw	r2,-4(fp)
  a10610:	1885883a 	add	r2,r3,r2
  a10614:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  a10618:	e0bffe17 	ldw	r2,-8(fp)
  a1061c:	e0bffd15 	stw	r2,-12(fp)
  a10620:	00000506 	br	a10638 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  a10624:	e0bffd17 	ldw	r2,-12(fp)
  a10628:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  a1062c:	e0bffd17 	ldw	r2,-12(fp)
  a10630:	10800804 	addi	r2,r2,32
  a10634:	e0bffd15 	stw	r2,-12(fp)
  a10638:	e0fffd17 	ldw	r3,-12(fp)
  a1063c:	e0bffc17 	ldw	r2,-16(fp)
  a10640:	18bff836 	bltu	r3,r2,a10624 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  a10644:	e0bffe17 	ldw	r2,-8(fp)
  a10648:	108007cc 	andi	r2,r2,31
  a1064c:	1005003a 	cmpeq	r2,r2,zero
  a10650:	1000021e 	bne	r2,zero,a1065c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  a10654:	e0bffd17 	ldw	r2,-12(fp)
  a10658:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  a1065c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  a10660:	e037883a 	mov	sp,fp
  a10664:	df000017 	ldw	fp,0(sp)
  a10668:	dec00104 	addi	sp,sp,4
  a1066c:	f800283a 	ret

00a10670 <atexit>:
  a10670:	200b883a 	mov	r5,r4
  a10674:	000d883a 	mov	r6,zero
  a10678:	0009883a 	mov	r4,zero
  a1067c:	000f883a 	mov	r7,zero
  a10680:	0a107301 	jmpi	a10730 <__register_exitproc>

00a10684 <exit>:
  a10684:	defffe04 	addi	sp,sp,-8
  a10688:	000b883a 	mov	r5,zero
  a1068c:	dc000015 	stw	r16,0(sp)
  a10690:	dfc00115 	stw	ra,4(sp)
  a10694:	2021883a 	mov	r16,r4
  a10698:	0a108680 	call	a10868 <__call_exitprocs>
  a1069c:	00802874 	movhi	r2,161
  a106a0:	108ad204 	addi	r2,r2,11080
  a106a4:	11000017 	ldw	r4,0(r2)
  a106a8:	20800f17 	ldw	r2,60(r4)
  a106ac:	10000126 	beq	r2,zero,a106b4 <exit+0x30>
  a106b0:	103ee83a 	callr	r2
  a106b4:	8009883a 	mov	r4,r16
  a106b8:	0a10a580 	call	a10a58 <_exit>

00a106bc <memcmp>:
  a106bc:	00c000c4 	movi	r3,3
  a106c0:	1980032e 	bgeu	r3,r6,a106d0 <memcmp+0x14>
  a106c4:	2144b03a 	or	r2,r4,r5
  a106c8:	10c4703a 	and	r2,r2,r3
  a106cc:	10000f26 	beq	r2,zero,a1070c <memcmp+0x50>
  a106d0:	31ffffc4 	addi	r7,r6,-1
  a106d4:	3000061e 	bne	r6,zero,a106f0 <memcmp+0x34>
  a106d8:	00000a06 	br	a10704 <memcmp+0x48>
  a106dc:	39ffffc4 	addi	r7,r7,-1
  a106e0:	00bfffc4 	movi	r2,-1
  a106e4:	21000044 	addi	r4,r4,1
  a106e8:	29400044 	addi	r5,r5,1
  a106ec:	38800526 	beq	r7,r2,a10704 <memcmp+0x48>
  a106f0:	20c00003 	ldbu	r3,0(r4)
  a106f4:	28800003 	ldbu	r2,0(r5)
  a106f8:	18bff826 	beq	r3,r2,a106dc <memcmp+0x20>
  a106fc:	1885c83a 	sub	r2,r3,r2
  a10700:	f800283a 	ret
  a10704:	0005883a 	mov	r2,zero
  a10708:	f800283a 	ret
  a1070c:	180f883a 	mov	r7,r3
  a10710:	20c00017 	ldw	r3,0(r4)
  a10714:	28800017 	ldw	r2,0(r5)
  a10718:	18bfed1e 	bne	r3,r2,a106d0 <memcmp+0x14>
  a1071c:	31bfff04 	addi	r6,r6,-4
  a10720:	21000104 	addi	r4,r4,4
  a10724:	29400104 	addi	r5,r5,4
  a10728:	39bff936 	bltu	r7,r6,a10710 <memcmp+0x54>
  a1072c:	003fe806 	br	a106d0 <memcmp+0x14>

00a10730 <__register_exitproc>:
  a10730:	defffa04 	addi	sp,sp,-24
  a10734:	00802874 	movhi	r2,161
  a10738:	108ad204 	addi	r2,r2,11080
  a1073c:	dc000015 	stw	r16,0(sp)
  a10740:	14000017 	ldw	r16,0(r2)
  a10744:	dd000415 	stw	r20,16(sp)
  a10748:	2829883a 	mov	r20,r5
  a1074c:	81405217 	ldw	r5,328(r16)
  a10750:	dcc00315 	stw	r19,12(sp)
  a10754:	dc800215 	stw	r18,8(sp)
  a10758:	dc400115 	stw	r17,4(sp)
  a1075c:	dfc00515 	stw	ra,20(sp)
  a10760:	2023883a 	mov	r17,r4
  a10764:	3027883a 	mov	r19,r6
  a10768:	3825883a 	mov	r18,r7
  a1076c:	28002526 	beq	r5,zero,a10804 <__register_exitproc+0xd4>
  a10770:	29000117 	ldw	r4,4(r5)
  a10774:	008007c4 	movi	r2,31
  a10778:	11002716 	blt	r2,r4,a10818 <__register_exitproc+0xe8>
  a1077c:	8800101e 	bne	r17,zero,a107c0 <__register_exitproc+0x90>
  a10780:	2105883a 	add	r2,r4,r4
  a10784:	1085883a 	add	r2,r2,r2
  a10788:	20c00044 	addi	r3,r4,1
  a1078c:	1145883a 	add	r2,r2,r5
  a10790:	0009883a 	mov	r4,zero
  a10794:	15000215 	stw	r20,8(r2)
  a10798:	28c00115 	stw	r3,4(r5)
  a1079c:	2005883a 	mov	r2,r4
  a107a0:	dfc00517 	ldw	ra,20(sp)
  a107a4:	dd000417 	ldw	r20,16(sp)
  a107a8:	dcc00317 	ldw	r19,12(sp)
  a107ac:	dc800217 	ldw	r18,8(sp)
  a107b0:	dc400117 	ldw	r17,4(sp)
  a107b4:	dc000017 	ldw	r16,0(sp)
  a107b8:	dec00604 	addi	sp,sp,24
  a107bc:	f800283a 	ret
  a107c0:	29802204 	addi	r6,r5,136
  a107c4:	00800044 	movi	r2,1
  a107c8:	110e983a 	sll	r7,r2,r4
  a107cc:	30c04017 	ldw	r3,256(r6)
  a107d0:	2105883a 	add	r2,r4,r4
  a107d4:	1085883a 	add	r2,r2,r2
  a107d8:	1185883a 	add	r2,r2,r6
  a107dc:	19c6b03a 	or	r3,r3,r7
  a107e0:	14802015 	stw	r18,128(r2)
  a107e4:	14c00015 	stw	r19,0(r2)
  a107e8:	00800084 	movi	r2,2
  a107ec:	30c04015 	stw	r3,256(r6)
  a107f0:	88bfe31e 	bne	r17,r2,a10780 <__register_exitproc+0x50>
  a107f4:	30804117 	ldw	r2,260(r6)
  a107f8:	11c4b03a 	or	r2,r2,r7
  a107fc:	30804115 	stw	r2,260(r6)
  a10800:	003fdf06 	br	a10780 <__register_exitproc+0x50>
  a10804:	00802874 	movhi	r2,161
  a10808:	10923204 	addi	r2,r2,18632
  a1080c:	100b883a 	mov	r5,r2
  a10810:	80805215 	stw	r2,328(r16)
  a10814:	003fd606 	br	a10770 <__register_exitproc+0x40>
  a10818:	00800034 	movhi	r2,0
  a1081c:	10800004 	addi	r2,r2,0
  a10820:	1000021e 	bne	r2,zero,a1082c <__register_exitproc+0xfc>
  a10824:	013fffc4 	movi	r4,-1
  a10828:	003fdc06 	br	a1079c <__register_exitproc+0x6c>
  a1082c:	01006404 	movi	r4,400
  a10830:	103ee83a 	callr	r2
  a10834:	1007883a 	mov	r3,r2
  a10838:	103ffa26 	beq	r2,zero,a10824 <__register_exitproc+0xf4>
  a1083c:	80805217 	ldw	r2,328(r16)
  a10840:	180b883a 	mov	r5,r3
  a10844:	18000115 	stw	zero,4(r3)
  a10848:	18800015 	stw	r2,0(r3)
  a1084c:	80c05215 	stw	r3,328(r16)
  a10850:	18006215 	stw	zero,392(r3)
  a10854:	18006315 	stw	zero,396(r3)
  a10858:	0009883a 	mov	r4,zero
  a1085c:	883fc826 	beq	r17,zero,a10780 <__register_exitproc+0x50>
  a10860:	003fd706 	br	a107c0 <__register_exitproc+0x90>

00a10864 <register_fini>:
  a10864:	f800283a 	ret

00a10868 <__call_exitprocs>:
  a10868:	00802874 	movhi	r2,161
  a1086c:	108ad204 	addi	r2,r2,11080
  a10870:	10800017 	ldw	r2,0(r2)
  a10874:	defff304 	addi	sp,sp,-52
  a10878:	df000b15 	stw	fp,44(sp)
  a1087c:	d8800115 	stw	r2,4(sp)
  a10880:	00800034 	movhi	r2,0
  a10884:	10800004 	addi	r2,r2,0
  a10888:	1005003a 	cmpeq	r2,r2,zero
  a1088c:	d8800215 	stw	r2,8(sp)
  a10890:	d8800117 	ldw	r2,4(sp)
  a10894:	dd400815 	stw	r21,32(sp)
  a10898:	dd000715 	stw	r20,28(sp)
  a1089c:	10805204 	addi	r2,r2,328
  a108a0:	dfc00c15 	stw	ra,48(sp)
  a108a4:	ddc00a15 	stw	r23,40(sp)
  a108a8:	dd800915 	stw	r22,36(sp)
  a108ac:	dcc00615 	stw	r19,24(sp)
  a108b0:	dc800515 	stw	r18,20(sp)
  a108b4:	dc400415 	stw	r17,16(sp)
  a108b8:	dc000315 	stw	r16,12(sp)
  a108bc:	282b883a 	mov	r21,r5
  a108c0:	2039883a 	mov	fp,r4
  a108c4:	d8800015 	stw	r2,0(sp)
  a108c8:	2829003a 	cmpeq	r20,r5,zero
  a108cc:	d8800117 	ldw	r2,4(sp)
  a108d0:	14405217 	ldw	r17,328(r2)
  a108d4:	88001026 	beq	r17,zero,a10918 <__call_exitprocs+0xb0>
  a108d8:	ddc00017 	ldw	r23,0(sp)
  a108dc:	88800117 	ldw	r2,4(r17)
  a108e0:	8c802204 	addi	r18,r17,136
  a108e4:	143fffc4 	addi	r16,r2,-1
  a108e8:	80000916 	blt	r16,zero,a10910 <__call_exitprocs+0xa8>
  a108ec:	05bfffc4 	movi	r22,-1
  a108f0:	a000151e 	bne	r20,zero,a10948 <__call_exitprocs+0xe0>
  a108f4:	8409883a 	add	r4,r16,r16
  a108f8:	2105883a 	add	r2,r4,r4
  a108fc:	1485883a 	add	r2,r2,r18
  a10900:	10c02017 	ldw	r3,128(r2)
  a10904:	a8c01126 	beq	r21,r3,a1094c <__call_exitprocs+0xe4>
  a10908:	843fffc4 	addi	r16,r16,-1
  a1090c:	85bff81e 	bne	r16,r22,a108f0 <__call_exitprocs+0x88>
  a10910:	d8800217 	ldw	r2,8(sp)
  a10914:	10003126 	beq	r2,zero,a109dc <__call_exitprocs+0x174>
  a10918:	dfc00c17 	ldw	ra,48(sp)
  a1091c:	df000b17 	ldw	fp,44(sp)
  a10920:	ddc00a17 	ldw	r23,40(sp)
  a10924:	dd800917 	ldw	r22,36(sp)
  a10928:	dd400817 	ldw	r21,32(sp)
  a1092c:	dd000717 	ldw	r20,28(sp)
  a10930:	dcc00617 	ldw	r19,24(sp)
  a10934:	dc800517 	ldw	r18,20(sp)
  a10938:	dc400417 	ldw	r17,16(sp)
  a1093c:	dc000317 	ldw	r16,12(sp)
  a10940:	dec00d04 	addi	sp,sp,52
  a10944:	f800283a 	ret
  a10948:	8409883a 	add	r4,r16,r16
  a1094c:	88c00117 	ldw	r3,4(r17)
  a10950:	2105883a 	add	r2,r4,r4
  a10954:	1445883a 	add	r2,r2,r17
  a10958:	18ffffc4 	addi	r3,r3,-1
  a1095c:	11800217 	ldw	r6,8(r2)
  a10960:	1c001526 	beq	r3,r16,a109b8 <__call_exitprocs+0x150>
  a10964:	10000215 	stw	zero,8(r2)
  a10968:	303fe726 	beq	r6,zero,a10908 <__call_exitprocs+0xa0>
  a1096c:	00c00044 	movi	r3,1
  a10970:	1c06983a 	sll	r3,r3,r16
  a10974:	90804017 	ldw	r2,256(r18)
  a10978:	8cc00117 	ldw	r19,4(r17)
  a1097c:	1884703a 	and	r2,r3,r2
  a10980:	10001426 	beq	r2,zero,a109d4 <__call_exitprocs+0x16c>
  a10984:	90804117 	ldw	r2,260(r18)
  a10988:	1884703a 	and	r2,r3,r2
  a1098c:	10000c1e 	bne	r2,zero,a109c0 <__call_exitprocs+0x158>
  a10990:	2105883a 	add	r2,r4,r4
  a10994:	1485883a 	add	r2,r2,r18
  a10998:	11400017 	ldw	r5,0(r2)
  a1099c:	e009883a 	mov	r4,fp
  a109a0:	303ee83a 	callr	r6
  a109a4:	88800117 	ldw	r2,4(r17)
  a109a8:	98bfc81e 	bne	r19,r2,a108cc <__call_exitprocs+0x64>
  a109ac:	b8800017 	ldw	r2,0(r23)
  a109b0:	147fd526 	beq	r2,r17,a10908 <__call_exitprocs+0xa0>
  a109b4:	003fc506 	br	a108cc <__call_exitprocs+0x64>
  a109b8:	8c000115 	stw	r16,4(r17)
  a109bc:	003fea06 	br	a10968 <__call_exitprocs+0x100>
  a109c0:	2105883a 	add	r2,r4,r4
  a109c4:	1485883a 	add	r2,r2,r18
  a109c8:	11000017 	ldw	r4,0(r2)
  a109cc:	303ee83a 	callr	r6
  a109d0:	003ff406 	br	a109a4 <__call_exitprocs+0x13c>
  a109d4:	303ee83a 	callr	r6
  a109d8:	003ff206 	br	a109a4 <__call_exitprocs+0x13c>
  a109dc:	88800117 	ldw	r2,4(r17)
  a109e0:	1000081e 	bne	r2,zero,a10a04 <__call_exitprocs+0x19c>
  a109e4:	89000017 	ldw	r4,0(r17)
  a109e8:	20000726 	beq	r4,zero,a10a08 <__call_exitprocs+0x1a0>
  a109ec:	b9000015 	stw	r4,0(r23)
  a109f0:	8809883a 	mov	r4,r17
  a109f4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  a109f8:	bc400017 	ldw	r17,0(r23)
  a109fc:	883fb71e 	bne	r17,zero,a108dc <__call_exitprocs+0x74>
  a10a00:	003fc506 	br	a10918 <__call_exitprocs+0xb0>
  a10a04:	89000017 	ldw	r4,0(r17)
  a10a08:	882f883a 	mov	r23,r17
  a10a0c:	2023883a 	mov	r17,r4
  a10a10:	883fb21e 	bne	r17,zero,a108dc <__call_exitprocs+0x74>
  a10a14:	003fc006 	br	a10918 <__call_exitprocs+0xb0>

00a10a18 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  a10a18:	defffd04 	addi	sp,sp,-12
  a10a1c:	df000215 	stw	fp,8(sp)
  a10a20:	df000204 	addi	fp,sp,8
  a10a24:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  a10a28:	e0bfff17 	ldw	r2,-4(fp)
  a10a2c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  a10a30:	e0bffe17 	ldw	r2,-8(fp)
  a10a34:	1005003a 	cmpeq	r2,r2,zero
  a10a38:	1000021e 	bne	r2,zero,a10a44 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  a10a3c:	002af070 	cmpltui	zero,zero,43969
  a10a40:	00000106 	br	a10a48 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  a10a44:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  a10a48:	e037883a 	mov	sp,fp
  a10a4c:	df000017 	ldw	fp,0(sp)
  a10a50:	dec00104 	addi	sp,sp,4
  a10a54:	f800283a 	ret

00a10a58 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  a10a58:	defffd04 	addi	sp,sp,-12
  a10a5c:	dfc00215 	stw	ra,8(sp)
  a10a60:	df000115 	stw	fp,4(sp)
  a10a64:	df000104 	addi	fp,sp,4
  a10a68:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  a10a6c:	e13fff17 	ldw	r4,-4(fp)
  a10a70:	0a10a180 	call	a10a18 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  a10a74:	003fff06 	br	a10a74 <_exit+0x1c>
  a10a78:	00000010 	cmplti	zero,zero,0
  a10a7c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  a10a80:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_3+0x4b7a0>
  a10a84:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_3+0x1187c0>
  a10a88:	001b0c0b 	ldhu	zero,27696(zero)
  a10a8c:	00000028 	cmpgeui	zero,zero,0
  a10a90:	00000018 	cmpnei	zero,zero,0
  a10a94:	00a0ab18 	cmpnei	r2,zero,-32084
  a10a98:	000005dc 	xori	zero,zero,23
  a10a9c:	400e4400 	call	400e440 <__alt_mem_sram_0+0x278e440>
  a10aa0:	92099170 	cmpltui	r8,r18,9797
  a10aa4:	95079308 	cmpgei	r20,r18,7756
  a10aa8:	97049605 	stb	fp,4696(r18)
  a10aac:	90019f03 	ldbu	zero,1660(r18)
  a10ab0:	9c06940a 	0x9c06940a
  a10ab4:	00000002 	0x2
  a10ab8:	00000028 	cmpgeui	zero,zero,0
  a10abc:	00000044 	movi	zero,1
  a10ac0:	00a0b0f4 	movhi	r2,33475
  a10ac4:	000005b0 	cmpltui	zero,zero,22
  a10ac8:	3c0e4400 	call	3c0e440 <__alt_mem_sram_0+0x238e440>
  a10acc:	92099168 	cmpgeui	r8,r18,9797
  a10ad0:	95079308 	cmpgei	r20,r18,7756
  a10ad4:	9c039705 	stb	r16,3676(r19)
  a10ad8:	90019f02 	0x90019f02
  a10adc:	9606940a 	0x9606940a
  a10ae0:	00000004 	movi	zero,0
  a10ae4:	00a10864 	muli	r2,zero,-31711
