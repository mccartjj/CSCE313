
Fractal_cpu1.elf:     file format elf32-littlenios2
Fractal_cpu1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00b501b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00b50000 paddr 0x00b50000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00b50020 paddr 0x00b50020 align 2**12
         filesz 0x00011444 memsz 0x00011444 flags r-x
    LOAD off    0x00012464 vaddr 0x00b61464 paddr 0x00b63034 align 2**12
         filesz 0x00001bd0 memsz 0x00001bd0 flags rw-
    LOAD off    0x00014c04 vaddr 0x00b64c04 paddr 0x00b64c04 align 2**12
         filesz 0x00000000 memsz 0x000002f8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00b50000  00b50000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00b50020  00b50020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010dc8  00b501b4  00b501b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004e8  00b60f7c  00b60f7c  00011f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd0  00b61464  00b63034  00012464  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f8  00b64c04  00b64c04  00014c04  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00014034  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001058  00000000  00000000  00014058  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b6d  00000000  00000000  000150b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002a1b3  00000000  00000000  00016c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a00d  00000000  00000000  00040dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00019c0d  00000000  00000000  0004addd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000020e8  00000000  00000000  000649ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c32  00000000  00000000  00066ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e595  00000000  00000000  00069706  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00077c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000d38  00000000  00000000  00077cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007c685  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007c688  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0007c68d  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0007c68e  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0007c692  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0007c696  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0007c69a  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0007c6a5  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0007c6b0  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0007c6bb  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0007c6c6  2**0
                  CONTENTS, READONLY
 28 .jdi          0000ff9d  00000000  00000000  0007c6e6  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000cf0fa  00000000  00000000  0008c683  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00b50000 l    d  .entry	00000000 .entry
00b50020 l    d  .exceptions	00000000 .exceptions
00b501b4 l    d  .text	00000000 .text
00b60f7c l    d  .rodata	00000000 .rodata
00b61464 l    d  .rwdata	00000000 .rwdata
00b64c04 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00b501fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Fractal.c
00000000 l    df *ABS*	00000000 Project.c
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 ef_pow.c
00b62fc8 l     O .rwdata	00000008 bp
00b62fd0 l     O .rwdata	00000008 dp_l
00b62fd8 l     O .rwdata	00000008 dp_h
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_rint.c
00b60fe8 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_isnan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00b52124 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00b529fc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00b61464 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00b53e38 l     F .text	00000058 __sprint_r
00b6118e l     O .rodata	00000010 blanks.3452
00b6117e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00b55e9c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00b57898 l     F .text	00000058 std
00b579a4 l     F .text	00000008 __fp_lock
00b579ac l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00b62ff0 l     O .rwdata	00000004 charset
00b611bc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00b61304 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00b5c480 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00b5c6c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00b5c728 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00b5c828 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00b5c948 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00b5ca28 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00b5cb84 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00b5cdb0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00b63014 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00b5d04c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00b61e20 l     O .rwdata	00001060 jtag_uart_1
00b62e80 l     O .rwdata	0000003c mailbox_0
00b62ebc l     O .rwdata	0000003c mailbox_1
00b62ef8 l     O .rwdata	0000003c mailbox_2
00b62f34 l     O .rwdata	0000003c mailbox_3
00b62f70 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00b5d358 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00b5d598 l     F .text	00000228 altera_avalon_jtag_uart_irq
00b5d7c0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
00b5df94 l     F .text	0000006c alt_avalon_mutex_reg
00b5e000 l     F .text	00000060 alt_get_errno
00b5e194 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00b5e364 l     F .text	0000007c alt_mutex_trylock
00b5e438 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00b5fe20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00b602d8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00b60414 l     F .text	000000dc alt_file_locked
00b60678 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00b60cf8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00b60eac l     F .text	00000040 alt_sim_halt
00b50200 g     F .text	00000084 genColor
00b64c04 g     O .bss	00000008 targetArrayXYMaster
00b59654 g     F .text	00000094 _mprec_log10
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
00b59740 g     F .text	00000088 __any_on
00b5ae4c g     F .text	00000070 _isatty_r
00b612dc g     O .rodata	00000028 __mprec_tinytens
00b5cbe4 g     F .text	0000006c alt_main
00b5e1e4 g     F .text	000000a8 altera_avalon_mailbox_pend
00b5f2d4 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00b53c3c g     F .text	000000a0 _puts_r
00b64c6c g     O .bss	00000100 alt_irq
00b5aebc g     F .text	00000078 _lseek_r
00b63034 g       *ABS*	00000000 __flash_rwdata_start
00b5befc g     F .text	00000088 __eqdf2
00b64efc g       *ABS*	00000000 __alt_heap_start
00b5e28c g     F .text	000000d8 altera_avalon_mailbox_get
00b53bc4 g     F .text	00000044 printf
00b5a918 g     F .text	00000068 __sseek
00b57900 g     F .text	000000a4 __sinit
00b585d8 g     F .text	00000084 _setlocale_r
00b57a00 g     F .text	00000068 __sfmoreglue
00b5cc70 g     F .text	00000020 __malloc_unlock
00b525bc g     F .text	00000174 __divsf3
00b590d0 g     F .text	000000e0 memmove
00b579f0 g     F .text	00000010 _cleanup
00b50c84 g     F .text	00000458 powf
00b5e4f8 g     F .text	00000040 altera_avalon_mutex_trylock
00b597c8 g     F .text	000000bc _Balloc
00b5e6a8 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00b5bf84 g     F .text	00000088 __gtdf2
00b53bb4 g     F .text	00000010 __errno
00b5e668 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00b50000 g     F .entry	0000001c __reset
00b5e594 g     F .text	0000007c altera_avalon_mutex_is_mine
00b50020 g       *ABS*	00000000 __flash_exceptions_start
00b5add8 g     F .text	00000074 _fstat_r
00b64c28 g     O .bss	00000004 errno
00b531e0 g     F .text	00000038 __make_dp
00b53674 g     F .text	0000002c __make_fp
00b64c30 g     O .bss	00000004 alt_argv
00b6afc4 g       *ABS*	00000000 _gp
00b52308 g     F .text	00000070 __subsf3
00b5e848 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00006000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
00b61ca0 g     O .rwdata	00000180 alt_fd_list
00b5ff48 g     F .text	00000094 alt_find_dev
00b59030 g     F .text	000000a0 memcpy
00b579e4 g     F .text	0000000c _cleanup_r
00b5c11c g     F .text	000000f8 __floatsidf
00b6039c g     F .text	00000078 alt_io_redirect
00b5c094 g     F .text	00000088 __ltdf2
00b60f7c g       *ABS*	00000000 __DTOR_END__
00b53cdc g     F .text	00000014 puts
00b6087c g     F .text	00000020 altera_nios2_irq_init
00b595a4 g     F .text	000000b0 __ratio
00b5e0d8 g     F .text	000000bc altera_avalon_mailbox_post
00b5e8f8 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00b5d9d8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00b53c08 g     F .text	00000034 _printf_r
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00b5c5bc g     F .text	00000008 __udivsi3
00b5c888 g     F .text	000000c0 isatty
00b611ec g     O .rodata	000000c8 __mprec_tens
00b5e0b8 g     F .text	00000020 altera_avalon_mailbox_close
00b5ef84 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00b585b4 g     F .text	00000008 __locale_charset
00b52898 g     F .text	00000078 __lesf2
00b60a74 g     F .text	00000090 alt_icache_flush
00b64c1c g     O .bss	00000004 __malloc_top_pad
00b62fec g     O .rwdata	00000004 __mb_cur_max
00b585bc g     F .text	0000000c _localeconv_r
00b59ec0 g     F .text	0000003c __i2b
00b57f98 g     F .text	0000049c __sfvwrite_r
00b51f84 g     F .text	0000001c finitef
00b5a8a0 g     F .text	00000070 _sbrk_r
00b5f768 g     F .text	000000d0 helper_plot_pixel
00b51f74 g     F .text	00000010 fabsf
00b5af34 g     F .text	00000078 _read_r
00b61864 g     O .rwdata	0000000c __lc_ctype
00b6300c g     O .rwdata	00000004 alt_max_fd
00b539b4 g     F .text	00000138 __unpack_d
00b5acb4 g     F .text	00000110 _fclose_r
00b57864 g     F .text	00000034 fflush
00b509dc g     F .text	00000224 drawFullSet
00b64c20 g     O .bss	00000004 __malloc_max_sbrked_mem
00b529a8 g     F .text	00000054 __extendsfdf2
00b51fa0 g     F .text	00000018 isnanf
00b52e8c g     F .text	00000074 __adddf3
00b59484 g     F .text	00000120 __b2d
00b5e92c g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
00b5b588 g     F .text	000005b0 __umoddi3
00b5ca94 g     F .text	000000f0 lseek
00b5e610 g     F .text	00000058 altera_avalon_mutex_first_lock
00b62fe0 g     O .rwdata	00000004 __fdlib_version
00b62fe8 g     O .rwdata	00000004 _global_impure_ptr
00b5a23c g     F .text	000005f4 _realloc_r
00b64efc g       *ABS*	00000000 __bss_end
00b601e0 g     F .text	000000f8 alt_iic_isr_register
00b5ea90 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00b60770 g     F .text	0000010c alt_tick
00b5afac g     F .text	000005dc __udivdi3
00b612b4 g     O .rodata	00000028 __mprec_bigtens
00b5a11c g     F .text	00000120 __s2b
00b5c2ec g     F .text	00000194 __floatunsidf
00b593a4 g     F .text	00000060 __mcmp
00b579cc g     F .text	00000018 __fp_lock_all
00b60198 g     F .text	00000048 alt_ic_irq_enabled
00b606d8 g     F .text	00000098 alt_alarm_stop
00b64c38 g     O .bss	00000004 alt_irq_active
00b5038c g     F .text	00000168 mandelbrotNoZoom
00b500ec g     F .exceptions	000000c8 alt_irq_handler
00b61c78 g     O .rwdata	00000028 alt_dev_null
00b504f4 g     F .text	000001ac barrier
00b5e3e0 g     F .text	00000058 altera_avalon_mutex_open
00b51d64 g     F .text	00000210 rint
00b53504 g     F .text	000000c8 __unpack_f
00b5fd28 g     F .text	00000044 alt_dcache_flush_all
00b59270 g     F .text	00000070 __hi0bits
00b5f6a4 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
00b5c214 g     F .text	000000d8 __fixdfsi
00b63034 g       *ABS*	00000000 __ram_rwdata_end
00b63004 g     O .rwdata	00000008 alt_dev_list
00b5cf2c g     F .text	00000120 write
00b5f838 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00b527a8 g     F .text	00000078 __gtsf2
00b63020 g     O .rwdata	00000008 alt_mutex_list
00b61464 g       *ABS*	00000000 __ram_rodata_end
00b5c754 g     F .text	000000d4 fstat
00b59ffc g     F .text	00000120 __pow5mult
00b64c10 g     O .bss	00000004 __nlocale_changed
00b5c5c4 g     F .text	00000008 __umodsi3
00b64efc g       *ABS*	00000000 end
00b533a4 g     F .text	00000160 __pack_f
00b64c0c g     O .bss	00000004 myPixelBuffer
00b5d4d8 g     F .text	000000c0 altera_avalon_jtag_uart_init
00b60f78 g       *ABS*	00000000 __CTOR_LIST__
00d00000 g       *ABS*	00000000 __alt_stack_pointer
00b53324 g     F .text	00000080 __clzsi2
00b5dbfc g     F .text	00000240 altera_avalon_jtag_uart_write
00b5de3c g     F .text	00000158 alt_avalon_mailbox_init
00b578f0 g     F .text	00000004 __sfp_lock_acquire
00b58f4c g     F .text	000000e4 memchr
00b53e90 g     F .text	00001eac ___vfprintf_internal_r
00b53d64 g     F .text	00000060 _sprintf_r
00b57c84 g     F .text	00000314 _free_r
00b60cfc g     F .text	000001b0 __call_exitprocs
00b64c14 g     O .bss	00000004 __mlocale_changed
00b62ff8 g     O .rwdata	00000004 __malloc_sbrk_base
00b501b4 g     F .text	0000004c _start
00b64c3c g     O .bss	00000004 _alt_tick_rate
00b59b8c g     F .text	0000014c __lshift
00b64c40 g     O .bss	00000004 _alt_nticks
00b5cc90 g     F .text	00000120 read
00b5d0e0 g     F .text	00000278 alt_sys_init
00b52910 g     F .text	00000098 __floatsisf
00b60bc4 g     F .text	00000134 __register_exitproc
00b5e538 g     F .text	0000005c altera_avalon_mutex_unlock
00b59cd8 g     F .text	000001e8 __multiply
00b5d870 g     F .text	00000074 altera_avalon_jtag_uart_close
00b61464 g       *ABS*	00000000 __ram_rwdata_start
00b60f7c g       *ABS*	00000000 __ram_rodata_start
00b64c44 g     O .bss	00000028 __malloc_current_mallinfo
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00b52730 g     F .text	00000078 __eqsf2
00b59884 g     F .text	0000017c __d2b
00b5d390 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00b609bc g     F .text	000000b8 alt_get_fd
00b53aec g     F .text	000000c8 __fpcmp_parts_d
00b5ac44 g     F .text	00000070 _close_r
00b506d0 g     F .text	0000030c drawFrame
00b60b50 g     F .text	00000074 memcmp
00b5d440 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00b64efc g       *ABS*	00000000 __alt_stack_base
00b5d488 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00b55d60 g     F .text	0000013c __swsetup_r
00b52f00 g     F .text	00000258 __divdf3
00b57a68 g     F .text	000000f0 __sfp
00b596e8 g     F .text	00000058 __copybits
00b61870 g     O .rwdata	00000408 __malloc_av_
00b578fc g     F .text	00000004 __sinit_lock_release
00b5bb38 g     F .text	000003c4 __muldf3
00b510dc g     F .text	00000b14 __ieee754_powf
00b5a9fc g     F .text	00000060 __sread
00b60ff8 g     O .rodata	00000010 __thenan_sf
00b6089c g     F .text	00000120 alt_find_file
00b5fd6c g     F .text	000000b4 alt_dev_llist_insert
00b5cc50 g     F .text	00000020 __malloc_lock
00b5ce70 g     F .text	000000bc sbrk
00b51fc0 g     F .text	0000014c scalbnf
00b57668 g     F .text	000001fc _fflush_r
00b5ab90 g     F .text	000000b4 _calloc_r
00b64c04 g       *ABS*	00000000 __bss_start
00b591b0 g     F .text	00000098 memset
00b51bf0 g     F .text	0000016c __ieee754_sqrtf
00b50c00 g     F .text	00000084 main
00b64c34 g     O .bss	00000004 alt_envp
00b64c24 g     O .bss	00000004 __malloc_max_total_mem
00b5e8a0 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
00b5d3e8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00b52820 g     F .text	00000078 __ltsf2
00b5a910 g     F .text	00000008 __sclose
00b51d5c g     F .text	00000008 matherr
00d00000 g       *ABS*	00000000 __alt_heap_limit
00b5adc4 g     F .text	00000014 fclose
00b53218 g     F .text	00000074 __truncdfsf2
00b64d6c g     O .bss	00000190 _atexit0
00b5e4b8 g     F .text	00000040 altera_avalon_mutex_lock
00b560b4 g     F .text	000015b4 _dtoa_r
00b5880c g     F .text	00000740 _malloc_r
00b63010 g     O .rwdata	00000004 alt_errno
00b584fc g     F .text	000000b8 _fwalk
00b5c4fc g     F .text	00000060 __divsi3
00b61008 g     O .rodata	00000014 __thenan_df
00b57b58 g     F .text	0000012c _malloc_trim_r
00b60f7c g       *ABS*	00000000 __CTOR_END__
00b523dc g     F .text	000001e0 __mulsf3
00b5aa5c g     F .text	000000bc strcmp
00b60f7c g       *ABS*	00000000 __flash_rodata_start
00b60f7c g       *ABS*	00000000 __DTOR_LIST__
00b53158 g     F .text	00000088 __nedf2
00b5d0ac g     F .text	00000034 alt_irq_init
00b5ce10 g     F .text	00000060 alt_release_fd
00b5210c g     F .text	00000018 copysignf
00b53cf0 g     F .text	00000074 sprintf
00b6101c g     O .rodata	00000100 __clz_tab
00b64c18 g     O .bss	00000004 _PathLocale
00b60b04 g     F .text	00000014 atexit
00b5ab18 g     F .text	00000078 _write_r
00b5865c g     F .text	0000001c setlocale
00b51fb8 g     F .text	00000008 nanf
00b62fe4 g     O .rwdata	00000004 _impure_ptr
00b64c2c g     O .bss	00000004 alt_argc
00b5fee4 g     F .text	00000064 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00b50020 g       .exceptions	00000000 alt_irq_entry
00b59404 g     F .text	00000080 __ulp
00b5a830 g     F .text	00000040 __isinfd
00b579b4 g     F .text	00000018 __fp_unlock_all
00b63018 g     O .rwdata	00000008 alt_mailbox_list
00b506a0 g     F .text	00000030 setup
00b62ffc g     O .rwdata	00000008 alt_fs_list
00b50020 g       *ABS*	00000000 __ram_exceptions_start
00b585c8 g     F .text	00000010 localeconv
00b6000c g     F .text	00000050 alt_ic_isr_register
00b63034 g       *ABS*	00000000 _edata
00b64efc g       *ABS*	00000000 _end
00b501b4 g       *ABS*	00000000 __ram_exceptions_end
00b5d8e4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00b600f8 g     F .text	000000a0 alt_ic_irq_disable
00b5a980 g     F .text	0000007c __swrite
00b62ff4 g     O .rwdata	00000004 __malloc_trim_threshold
00b60b18 g     F .text	00000038 exit
00b58434 g     F .text	000000c8 _fwalk_reent
00b59a00 g     F .text	0000018c __mdiff
00b50284 g     F .text	000000fc mandelbrot
00b5c55c g     F .text	00000060 __modsi3
00d00000 g       *ABS*	00000000 __alt_data_end
00b50020 g     F .exceptions	00000000 alt_exception
00b578f4 g     F .text	00000004 __sfp_lock_release
00b5e060 g     F .text	00000058 altera_avalon_mailbox_open
00b535cc g     F .text	000000a8 __fpcmp_parts_f
00b60eec g     F .text	00000020 _exit
00b5a870 g     F .text	00000030 __isnand
00b5fbd4 g     F .text	00000154 alt_alarm_start
00b5328c g     F .text	00000098 __muldi3
00b58678 g     F .text	00000194 __smakebuf_r
00b53dc4 g     F .text	00000074 strlen
00b604f0 g     F .text	00000188 open
00b5c00c g     F .text	00000088 __gedf2
00b50380 g     F .text	0000000c clearScreen
00b5ffdc g     F .text	00000030 alt_icache_flush_all
00b63028 g     O .rwdata	00000004 alt_priority_mask
00b6005c g     F .text	0000009c alt_ic_irq_enable
00b55d3c g     F .text	00000024 __vfprintf_internal
00b5e498 g     F .text	00000020 altera_avalon_mutex_close
00b52e0c g     F .text	00000080 __subdf3
00b592e0 g     F .text	000000c4 __lo0bits
00b62fc4 g     O .rwdata	00000004 targetArrayXY
00b6302c g     O .rwdata	00000008 alt_alarm_list
00b5fe80 g     F .text	00000064 _do_ctors
00b5c5cc g     F .text	000000fc close
00b52378 g     F .text	00000064 __addsf3
00b5c9a8 g     F .text	00000080 alt_load
00b536a0 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00b578f8 g     F .text	00000004 __sinit_lock_acquire
00b59efc g     F .text	00000100 __multadd
00b59248 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00b50000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  b50000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  b50004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  b50008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  b5000c:	00bffd16 	blt	zero,r2,b50004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  b50010:	00402d74 	movhi	at,181
    ori r1, r1, %lo(_start)
  b50014:	08406d14 	ori	at,at,436
    jmp r1
  b50018:	0800683a 	jmp	at
  b5001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

00b50020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  b50020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  b50024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  b50028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  b5002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  b50030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  b50034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  b50038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  b5003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  b50040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  b50044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  b50048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  b5004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  b50050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  b50054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  b50058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  b5005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  b50060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  b50064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  b50068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  b5006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  b50070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  b50074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  b50078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  b5007c:	10000326 	beq	r2,zero,b5008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  b50080:	20000226 	beq	r4,zero,b5008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  b50084:	0b500ec0 	call	b500ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  b50088:	00000306 	br	b50098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  b5008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  b50090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  b50094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b50098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b5009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b500a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b500a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b500a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  b500ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b500b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b500b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b500b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  b500bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  b500c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  b500c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  b500c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  b500cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  b500d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  b500d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  b500d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  b500dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  b500e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  b500e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  b500e8:	ef80083a 	eret

00b500ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  b500ec:	defff904 	addi	sp,sp,-28
  b500f0:	dfc00615 	stw	ra,24(sp)
  b500f4:	df000515 	stw	fp,20(sp)
  b500f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  b500fc:	0005313a 	rdctl	r2,ipending
  b50100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  b50104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  b50108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  b5010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  b50110:	00800044 	movi	r2,1
  b50114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  b50118:	e0ffff17 	ldw	r3,-4(fp)
  b5011c:	e0bffe17 	ldw	r2,-8(fp)
  b50120:	1884703a 	and	r2,r3,r2
  b50124:	1005003a 	cmpeq	r2,r2,zero
  b50128:	1000161e 	bne	r2,zero,b50184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  b5012c:	e0bffd17 	ldw	r2,-12(fp)
  b50130:	00c02db4 	movhi	r3,182
  b50134:	18d31b04 	addi	r3,r3,19564
  b50138:	100490fa 	slli	r2,r2,3
  b5013c:	10c5883a 	add	r2,r2,r3
  b50140:	11400017 	ldw	r5,0(r2)
  b50144:	e0bffd17 	ldw	r2,-12(fp)
  b50148:	00c02db4 	movhi	r3,182
  b5014c:	18d31b04 	addi	r3,r3,19564
  b50150:	100490fa 	slli	r2,r2,3
  b50154:	10c5883a 	add	r2,r2,r3
  b50158:	10800104 	addi	r2,r2,4
  b5015c:	11000017 	ldw	r4,0(r2)
  b50160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  b50164:	0005313a 	rdctl	r2,ipending
  b50168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  b5016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  b50170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  b50174:	e0bfff17 	ldw	r2,-4(fp)
  b50178:	1004c03a 	cmpne	r2,r2,zero
  b5017c:	103fe31e 	bne	r2,zero,b5010c <alt_irq_handler+0x20>
  b50180:	00000706 	br	b501a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  b50184:	e0bffe17 	ldw	r2,-8(fp)
  b50188:	1085883a 	add	r2,r2,r2
  b5018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  b50190:	e0bffd17 	ldw	r2,-12(fp)
  b50194:	10800044 	addi	r2,r2,1
  b50198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  b5019c:	003fde06 	br	b50118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  b501a0:	e037883a 	mov	sp,fp
  b501a4:	dfc00117 	ldw	ra,4(sp)
  b501a8:	df000017 	ldw	fp,0(sp)
  b501ac:	dec00204 	addi	sp,sp,8
  b501b0:	f800283a 	ret

Disassembly of section .text:

00b501b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  b501b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
  b501b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  b501bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  b501c0:	00bffd16 	blt	zero,r2,b501b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  b501c4:	06c03434 	movhi	sp,208
    ori sp, sp, %lo(__alt_stack_pointer)
  b501c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  b501cc:	06802db4 	movhi	gp,182
    ori gp, gp, %lo(_gp)
  b501d0:	d6abf114 	ori	gp,gp,44996
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  b501d4:	00802db4 	movhi	r2,182
    ori r2, r2, %lo(__bss_start)
  b501d8:	10930114 	ori	r2,r2,19460

    movhi r3, %hi(__bss_end)
  b501dc:	00c02db4 	movhi	r3,182
    ori r3, r3, %lo(__bss_end)
  b501e0:	18d3bf14 	ori	r3,r3,20220

    beq r2, r3, 1f
  b501e4:	10c00326 	beq	r2,r3,b501f4 <_start+0x40>

0:
    stw zero, (r2)
  b501e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  b501ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  b501f0:	10fffd36 	bltu	r2,r3,b501e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  b501f4:	0b5c9a80 	call	b5c9a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  b501f8:	0b5cbe40 	call	b5cbe4 <alt_main>

00b501fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  b501fc:	003fff06 	br	b501fc <alt_after_alt_main>

00b50200 <genColor>:

}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  b50200:	00801904 	movi	r2,100
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  b50204:	200690fa 	slli	r3,r4,3
  b50208:	200b883a 	mov	r5,r4
  b5020c:	01c007c4 	movi	r7,31
  b50210:	02000fc4 	movi	r8,63

}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  b50214:	000d883a 	mov	r6,zero
  b50218:	20800c26 	beq	r4,r2,b5024c <genColor+0x4c>
		color = black;
	}
	else {
		int red = iter;
		int green = iter * 8;
		int blue = iter * 2;
  b5021c:	2105883a 	add	r2,r4,r4
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  b50220:	1009883a 	mov	r4,r2
  b50224:	40c01216 	blt	r8,r3,b50270 <genColor+0x70>
  b50228:	1804917a 	slli	r2,r3,5
  b5022c:	1181f80c 	andi	r6,r2,2016
  b50230:	39400a16 	blt	r7,r5,b5025c <genColor+0x5c>
  b50234:	280492fa 	slli	r2,r5,11
  b50238:	10fe000c 	andi	r3,r2,63488
  b5023c:	39000516 	blt	r7,r4,b50254 <genColor+0x54>
  b50240:	20803fcc 	andi	r2,r4,255
  b50244:	1884b03a 	or	r2,r3,r2
  b50248:	308cb03a 	or	r6,r6,r2
	}
	return color;
}
  b5024c:	3005883a 	mov	r2,r6
  b50250:	f800283a 	ret
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  b50254:	3809883a 	mov	r4,r7
  b50258:	003ff906 	br	b50240 <genColor+0x40>
  b5025c:	380b883a 	mov	r5,r7
  b50260:	280492fa 	slli	r2,r5,11
  b50264:	10fe000c 	andi	r3,r2,63488
  b50268:	393ff50e 	bge	r7,r4,b50240 <genColor+0x40>
  b5026c:	003ff906 	br	b50254 <genColor+0x54>
  b50270:	4007883a 	mov	r3,r8
  b50274:	1804917a 	slli	r2,r3,5
  b50278:	1181f80c 	andi	r6,r2,2016
  b5027c:	397fed0e 	bge	r7,r5,b50234 <genColor+0x34>
  b50280:	003ff606 	br	b5025c <genColor+0x5c>

00b50284 <mandelbrot>:
	}
	return color;
}

int mandelbrot(float x0, float y0, float *xOut, float *yOut) {
  b50284:	defff404 	addi	sp,sp,-48
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  b50288:	0005883a 	mov	r2,zero
		y = 2 * x * y + y0;
  b5028c:	0007883a 	mov	r3,zero
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
	}
	return color;
}

int mandelbrot(float x0, float y0, float *xOut, float *yOut) {
  b50290:	dcc00515 	stw	r19,20(sp)
  b50294:	dc400315 	stw	r17,12(sp)
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  b50298:	20a7ff72 	custom	253,r19,r4,r2
		y = 2 * x * y + y0;
  b5029c:	28e3ff72 	custom	253,r17,r5,r3
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
	}
	return color;
}

int mandelbrot(float x0, float y0, float *xOut, float *yOut) {
  b502a0:	dd000615 	stw	r20,24(sp)
  b502a4:	dc800415 	stw	r18,16(sp)

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b502a8:	9ce9ff32 	custom	252,r20,r19,r19
  b502ac:	8c65ff32 	custom	252,r18,r17,r17
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
	}
	return color;
}

int mandelbrot(float x0, float y0, float *xOut, float *yOut) {
  b502b0:	ddc00915 	stw	r23,36(sp)
  b502b4:	dd800815 	stw	r22,32(sp)
  b502b8:	202f883a 	mov	r23,r4
  b502bc:	282d883a 	mov	r22,r5

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b502c0:	a489ff72 	custom	253,r4,r20,r18
  b502c4:	01502034 	movhi	r5,16512
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
	}
	return color;
}

int mandelbrot(float x0, float y0, float *xOut, float *yOut) {
  b502c8:	dfc00b15 	stw	ra,44(sp)
  b502cc:	df000a15 	stw	fp,40(sp)
  b502d0:	dd400715 	stw	r21,28(sp)
  b502d4:	dc000215 	stw	r16,8(sp)
  b502d8:	d9800015 	stw	r6,0(sp)
  b502dc:	d9c00115 	stw	r7,4(sp)

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b502e0:	0b528980 	call	b52898 <__lesf2>
  b502e4:	00802316 	blt	zero,r2,b50374 <mandelbrot+0xf0>
  b502e8:	05400044 	movi	r21,1
  b502ec:	07001904 	movi	fp,100
  b502f0:	00000106 	br	b502f8 <mandelbrot+0x74>
  b502f4:	af000d26 	beq	r21,fp,b5032c <mandelbrot+0xa8>
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  b502f8:	9cc5ff72 	custom	253,r2,r19,r19
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  b502fc:	a487ffb2 	custom	254,r3,r20,r18
		y = 2 * x * y + y0;
  b50300:	8885ff32 	custom	252,r2,r17,r2
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  b50304:	1de1ff72 	custom	253,r16,r3,r23
		y = 2 * x * y + y0;
  b50308:	15a3ff72 	custom	253,r17,r2,r22

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b5030c:	8429ff32 	custom	252,r20,r16,r16
  b50310:	8c65ff32 	custom	252,r18,r17,r17
  b50314:	a489ff72 	custom	253,r4,r20,r18
  b50318:	01502034 	movhi	r5,16512
  b5031c:	8027883a 	mov	r19,r16
		 printf("iter number: %i\n", iter);
		 printf("Cycles on frame: %llu \n\n", (cycles));
		 }//*/

		x = xtemp;
		iter++;
  b50320:	ad400044 	addi	r21,r21,1

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b50324:	0b528980 	call	b52898 <__lesf2>
  b50328:	00bff20e 	bge	zero,r2,b502f4 <mandelbrot+0x70>
  b5032c:	8005883a 	mov	r2,r16

		x = xtemp;
		iter++;

	}
	*xOut = x;
  b50330:	d8c00017 	ldw	r3,0(sp)
  b50334:	18800015 	stw	r2,0(r3)
	*yOut = y;
  b50338:	d8800117 	ldw	r2,4(sp)
  b5033c:	14400015 	stw	r17,0(r2)

	return iter;
}
  b50340:	a805883a 	mov	r2,r21
  b50344:	dfc00b17 	ldw	ra,44(sp)
  b50348:	df000a17 	ldw	fp,40(sp)
  b5034c:	ddc00917 	ldw	r23,36(sp)
  b50350:	dd800817 	ldw	r22,32(sp)
  b50354:	dd400717 	ldw	r21,28(sp)
  b50358:	dd000617 	ldw	r20,24(sp)
  b5035c:	dcc00517 	ldw	r19,20(sp)
  b50360:	dc800417 	ldw	r18,16(sp)
  b50364:	dc400317 	ldw	r17,12(sp)
  b50368:	dc000217 	ldw	r16,8(sp)
  b5036c:	dec00c04 	addi	sp,sp,48
  b50370:	f800283a 	ret

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b50374:	9805883a 	mov	r2,r19
  b50378:	05400044 	movi	r21,1
  b5037c:	003fec06 	br	b50330 <mandelbrot+0xac>

00b50380 <clearScreen>:
	}
}

void clearScreen(void) {
	//clears the part of the screen controlled by the pixel buffer
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
  b50380:	d1271217 	ldw	r4,-25528(gp)
  b50384:	000b883a 	mov	r5,zero
  b50388:	0b5e92c1 	jmpi	b5e92c <alt_up_pixel_buffer_dma_clear_screen>

00b5038c <mandelbrotNoZoom>:
	*yOut = y;

	return iter;
}

int mandelbrotNoZoom(int cRow, int cCol, int *recalculateTargetFlag) {
  b5038c:	defff504 	addi	sp,sp,-44
  b50390:	dc400215 	stw	r17,8(sp)
  b50394:	2023883a 	mov	r17,r4
	float minX = -2.5;
	float maxX = 1;
	float minY = -1;
	float maxY = 1;

	float x0 = (((float) cCol / (float) colSize) * (maxX - minX)) + minX;
  b50398:	2809883a 	mov	r4,r5
	*yOut = y;

	return iter;
}

int mandelbrotNoZoom(int cRow, int cCol, int *recalculateTargetFlag) {
  b5039c:	dfc00a15 	stw	ra,40(sp)
  b503a0:	d9800015 	stw	r6,0(sp)
  b503a4:	ddc00815 	stw	r23,32(sp)
  b503a8:	dd800715 	stw	r22,28(sp)
  b503ac:	dd000515 	stw	r20,20(sp)
  b503b0:	dcc00415 	stw	r19,16(sp)
  b503b4:	dc800315 	stw	r18,12(sp)
  b503b8:	dc000115 	stw	r16,4(sp)
  b503bc:	df000915 	stw	fp,36(sp)
  b503c0:	dd400615 	stw	r21,24(sp)
	float minX = -2.5;
	float maxX = 1;
	float minY = -1;
	float maxY = 1;

	float x0 = (((float) cCol / (float) colSize) * (maxX - minX)) + minX;
  b503c4:	0b529100 	call	b52910 <__floatsisf>
  b503c8:	00cea034 	movhi	r3,14976
  b503cc:	10c5ff32 	custom	252,r2,r2,r3
  b503d0:	01101834 	movhi	r4,16480
  b503d4:	00d00834 	movhi	r3,16416
  b503d8:	1105ff32 	custom	252,r2,r2,r4
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
  b503dc:	8809883a 	mov	r4,r17
	float minX = -2.5;
	float maxX = 1;
	float minY = -1;
	float maxY = 1;

	float x0 = (((float) cCol / (float) colSize) * (maxX - minX)) + minX;
  b503e0:	10efffb2 	custom	254,r23,r2,r3
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
  b503e4:	0b529100 	call	b52910 <__floatsisf>
  b503e8:	01111034 	movhi	r4,17472
  b503ec:	21300004 	addi	r4,r4,-16384
  b503f0:	2089ffb2 	custom	254,r4,r4,r2
  b503f4:	01511034 	movhi	r5,17472
  b503f8:	0b525bc0 	call	b525bc <__divsf3>
  b503fc:	1085ff72 	custom	253,r2,r2,r2
  b50400:	00cfe034 	movhi	r3,16256
  b50404:	10edffb2 	custom	254,r22,r2,r3
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  b50408:	0005883a 	mov	r2,zero
		y = 2 * x * y + y0;
  b5040c:	0007883a 	mov	r3,zero
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  b50410:	b8a7ff72 	custom	253,r19,r23,r2
		y = 2 * x * y + y0;
  b50414:	b0e5ff72 	custom	253,r18,r22,r3
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b50418:	9ce9ff32 	custom	252,r20,r19,r19
  b5041c:	94a1ff32 	custom	252,r16,r18,r18
  b50420:	a409ff72 	custom	253,r4,r20,r16
  b50424:	01502034 	movhi	r5,16512
  b50428:	0b528980 	call	b52898 <__lesf2>
  b5042c:	00802e16 	blt	zero,r2,b504e8 <mandelbrotNoZoom+0x15c>
  b50430:	05400044 	movi	r21,1
  b50434:	07001904 	movi	fp,100
  b50438:	00000106 	br	b50440 <mandelbrotNoZoom+0xb4>
  b5043c:	af000d26 	beq	r21,fp,b50474 <mandelbrotNoZoom+0xe8>
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  b50440:	9cc5ff72 	custom	253,r2,r19,r19
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  b50444:	a407ffb2 	custom	254,r3,r20,r16
		y = 2 * x * y + y0;
  b50448:	9085ff32 	custom	252,r2,r18,r2
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  b5044c:	b8e3ff72 	custom	253,r17,r23,r3
		y = 2 * x * y + y0;
  b50450:	b0a5ff72 	custom	253,r18,r22,r2
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b50454:	8c69ff32 	custom	252,r20,r17,r17
  b50458:	94a1ff32 	custom	252,r16,r18,r18
  b5045c:	a409ff72 	custom	253,r4,r20,r16
  b50460:	01502034 	movhi	r5,16512
  b50464:	8827883a 	mov	r19,r17
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
  b50468:	ad400044 	addi	r21,r21,1
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b5046c:	0b528980 	call	b52898 <__lesf2>
  b50470:	00bff20e 	bge	zero,r2,b5043c <mandelbrotNoZoom+0xb0>
  b50474:	8809883a 	mov	r4,r17
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
	}
	int cpu = __builtin_rdctl(5);
  b50478:	0007317a 	rdctl	r3,cpuid
	if (cpu == 3) {
  b5047c:	008000c4 	movi	r2,3
  b50480:	18800d26 	beq	r3,r2,b504b8 <mandelbrotNoZoom+0x12c>
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
			}
		}
	}
	return iter;
}//*/
  b50484:	a805883a 	mov	r2,r21
  b50488:	dfc00a17 	ldw	ra,40(sp)
  b5048c:	df000917 	ldw	fp,36(sp)
  b50490:	ddc00817 	ldw	r23,32(sp)
  b50494:	dd800717 	ldw	r22,28(sp)
  b50498:	dd400617 	ldw	r21,24(sp)
  b5049c:	dd000517 	ldw	r20,20(sp)
  b504a0:	dcc00417 	ldw	r19,16(sp)
  b504a4:	dc800317 	ldw	r18,12(sp)
  b504a8:	dc400217 	ldw	r17,8(sp)
  b504ac:	dc000117 	ldw	r16,4(sp)
  b504b0:	dec00b04 	addi	sp,sp,44
  b504b4:	f800283a 	ret
		x = xtemp;
		iter++;
	}
	int cpu = __builtin_rdctl(5);
	if (cpu == 3) {
		if (*recalculateTargetFlag) {
  b504b8:	d8800017 	ldw	r2,0(sp)
  b504bc:	10c00017 	ldw	r3,0(r2)
  b504c0:	183ff026 	beq	r3,zero,b50484 <mandelbrotNoZoom+0xf8>
			if (iter >= (maxIter - 2)) {
  b504c4:	00801844 	movi	r2,97
  b504c8:	157fee0e 	bge	r2,r21,b50484 <mandelbrotNoZoom+0xf8>
				targetArrayXYMaster[0] = x;
				targetArrayXYMaster[1] = y;
  b504cc:	d0a71004 	addi	r2,gp,-25536
  b504d0:	14800115 	stw	r18,4(r2)
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
  b504d4:	d8800017 	ldw	r2,0(sp)
  b504d8:	18ffffc4 	addi	r3,r3,-1
	}
	int cpu = __builtin_rdctl(5);
	if (cpu == 3) {
		if (*recalculateTargetFlag) {
			if (iter >= (maxIter - 2)) {
				targetArrayXYMaster[0] = x;
  b504dc:	d1271015 	stw	r4,-25536(gp)
				targetArrayXYMaster[1] = y;
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
  b504e0:	10c00015 	stw	r3,0(r2)
  b504e4:	003fe706 	br	b50484 <mandelbrotNoZoom+0xf8>
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b504e8:	9809883a 	mov	r4,r19
  b504ec:	05400044 	movi	r21,1
  b504f0:	003fe106 	br	b50478 <mandelbrotNoZoom+0xec>

00b504f4 <barrier>:
		}
	}

}

void barrier(alt_u8 barrierNum) {
  b504f4:	deffe104 	addi	sp,sp,-124
  b504f8:	dfc01e15 	stw	ra,120(sp)
  b504fc:	dd401d15 	stw	r21,116(sp)
  b50500:	dd001c15 	stw	r20,112(sp)
  b50504:	dcc01b15 	stw	r19,108(sp)
  b50508:	dc801a15 	stw	r18,104(sp)
  b5050c:	dc401915 	stw	r17,100(sp)
  b50510:	dc001815 	stw	r16,96(sp)
	alt_u32 msg;
	alt_mailbox_dev *mb[NUM_CPUS];
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
  b50514:	0027317a 	rdctl	r19,cpuid
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  b50518:	dc400404 	addi	r17,sp,16
  b5051c:	01402db4 	movhi	r5,182
  b50520:	2943df04 	addi	r5,r5,3964
  b50524:	000d883a 	mov	r6,zero
  b50528:	8809883a 	mov	r4,r17
  b5052c:	0b53cf00 	call	b53cf0 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  b50530:	8809883a 	mov	r4,r17
  b50534:	0b5e0600 	call	b5e060 <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  b50538:	05400044 	movi	r21,1
  b5053c:	01402db4 	movhi	r5,182
  b50540:	2943df04 	addi	r5,r5,3964
  b50544:	a80d883a 	mov	r6,r21
  b50548:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  b5054c:	d8800015 	stw	r2,0(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  b50550:	0b53cf00 	call	b53cf0 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  b50554:	8809883a 	mov	r4,r17
  b50558:	0b5e0600 	call	b5e060 <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  b5055c:	05000084 	movi	r20,2
  b50560:	01402db4 	movhi	r5,182
  b50564:	2943df04 	addi	r5,r5,3964
  b50568:	a00d883a 	mov	r6,r20
  b5056c:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  b50570:	d8800115 	stw	r2,4(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  b50574:	0b53cf00 	call	b53cf0 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  b50578:	8809883a 	mov	r4,r17
  b5057c:	0b5e0600 	call	b5e060 <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  b50580:	048000c4 	movi	r18,3
  b50584:	01402db4 	movhi	r5,182
  b50588:	2943df04 	addi	r5,r5,3964
  b5058c:	900d883a 	mov	r6,r18
  b50590:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  b50594:	d8800215 	stw	r2,8(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  b50598:	0b53cf00 	call	b53cf0 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  b5059c:	8809883a 	mov	r4,r17
  b505a0:	0b5e0600 	call	b5e060 <altera_avalon_mailbox_open>
  b505a4:	1021883a 	mov	r16,r2
  b505a8:	d8800315 	stw	r2,12(sp)
  b505ac:	9c803026 	beq	r19,r18,b50670 <barrier+0x17c>
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  b505b0:	98000426 	beq	r19,zero,b505c4 <barrier+0xd0>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  b505b4:	d9000017 	ldw	r4,0(sp)
  b505b8:	000b883a 	mov	r5,zero
  b505bc:	0b5e0d80 	call	b5e0d8 <altera_avalon_mailbox_post>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  b505c0:	9d400426 	beq	r19,r21,b505d4 <barrier+0xe0>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  b505c4:	d9000117 	ldw	r4,4(sp)
  b505c8:	000b883a 	mov	r5,zero
  b505cc:	0b5e0d80 	call	b5e0d8 <altera_avalon_mailbox_post>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  b505d0:	9d000326 	beq	r19,r20,b505e0 <barrier+0xec>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  b505d4:	d9000217 	ldw	r4,8(sp)
  b505d8:	000b883a 	mov	r5,zero
  b505dc:	0b5e0d80 	call	b5e0d8 <altera_avalon_mailbox_post>
  b505e0:	8009883a 	mov	r4,r16
  b505e4:	000b883a 	mov	r5,zero
  b505e8:	0b5e0d80 	call	b5e0d8 <altera_avalon_mailbox_post>
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  b505ec:	9cc5883a 	add	r2,r19,r19
  b505f0:	1085883a 	add	r2,r2,r2
  b505f4:	16c5883a 	add	r2,r2,sp
  b505f8:	14400017 	ldw	r17,0(r2)
  b505fc:	8809883a 	mov	r4,r17
  b50600:	0b5e1e40 	call	b5e1e4 <altera_avalon_mailbox_pend>

		if (msg != 0) {
  b50604:	10000126 	beq	r2,zero,b5060c <barrier+0x118>
			targetArrayXY = (float *) msg;
  b50608:	d0a00015 	stw	r2,-32768(gp)
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  b5060c:	8809883a 	mov	r4,r17
  b50610:	0b5e1e40 	call	b5e1e4 <altera_avalon_mailbox_pend>

		if (msg != 0) {
  b50614:	10000126 	beq	r2,zero,b5061c <barrier+0x128>
			targetArrayXY = (float *) msg;
  b50618:	d0a00015 	stw	r2,-32768(gp)
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  b5061c:	8809883a 	mov	r4,r17
  b50620:	0b5e1e40 	call	b5e1e4 <altera_avalon_mailbox_pend>

		if (msg != 0) {
  b50624:	10000126 	beq	r2,zero,b5062c <barrier+0x138>
			targetArrayXY = (float *) msg;
  b50628:	d0a00015 	stw	r2,-32768(gp)
		}
	}
	for (i = 0; i < NUM_CPUS; i++) {
		altera_avalon_mailbox_close(mb[i]);
  b5062c:	d9000017 	ldw	r4,0(sp)
  b50630:	0b5e0b80 	call	b5e0b8 <altera_avalon_mailbox_close>
  b50634:	d9000117 	ldw	r4,4(sp)
  b50638:	0b5e0b80 	call	b5e0b8 <altera_avalon_mailbox_close>
  b5063c:	d9000217 	ldw	r4,8(sp)
  b50640:	0b5e0b80 	call	b5e0b8 <altera_avalon_mailbox_close>
  b50644:	8009883a 	mov	r4,r16
  b50648:	0b5e0b80 	call	b5e0b8 <altera_avalon_mailbox_close>
	}
}
  b5064c:	dfc01e17 	ldw	ra,120(sp)
  b50650:	dd401d17 	ldw	r21,116(sp)
  b50654:	dd001c17 	ldw	r20,112(sp)
  b50658:	dcc01b17 	ldw	r19,108(sp)
  b5065c:	dc801a17 	ldw	r18,104(sp)
  b50660:	dc401917 	ldw	r17,100(sp)
  b50664:	dc001817 	ldw	r16,96(sp)
  b50668:	dec01f04 	addi	sp,sp,124
  b5066c:	f800283a 	ret
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
  b50670:	0025883a 	mov	r18,zero
  b50674:	d823883a 	mov	r17,sp
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
  b50678:	89000017 	ldw	r4,0(r17)
  b5067c:	d1671004 	addi	r5,gp,-25536
	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
  b50680:	94800044 	addi	r18,r18,1
		if (i != cpu) {

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
  b50684:	0b5e0d80 	call	b5e0d8 <altera_avalon_mailbox_post>
	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
  b50688:	00800104 	movi	r2,4
  b5068c:	8c400104 	addi	r17,r17,4
  b50690:	90bfd626 	beq	r18,r2,b505ec <barrier+0xf8>
		if (i != cpu) {
  b50694:	008000c4 	movi	r2,3
  b50698:	90bff71e 	bne	r18,r2,b50678 <barrier+0x184>
  b5069c:	003fd306 	br	b505ec <barrier+0xf8>

00b506a0 <setup>:
float targetArrayXYMaster[2] = { 0.0, 0.0 };
volatile float *targetArrayXY = targetArrayXYMaster;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  b506a0:	deffff04 	addi	sp,sp,-4
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  b506a4:	01002db4 	movhi	r4,182
  b506a8:	2103e304 	addi	r4,r4,3980
float targetArrayXYMaster[2] = { 0.0, 0.0 };
volatile float *targetArrayXY = targetArrayXYMaster;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  b506ac:	dfc00015 	stw	ra,0(sp)
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  b506b0:	0b5e6680 	call	b5e668 <alt_up_pixel_buffer_dma_open_dev>
  b506b4:	d0a71215 	stw	r2,-25528(gp)
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
  b506b8:	00c00044 	movi	r3,1
  b506bc:	0005883a 	mov	r2,zero
  b506c0:	10c00035 	stwio	r3,0(r2)
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(myPixelBuffer)) {
		alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
	}
#endif

}
  b506c4:	dfc00017 	ldw	ra,0(sp)
  b506c8:	dec00104 	addi	sp,sp,4
  b506cc:	f800283a 	ret

00b506d0 <drawFrame>:
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}
}//*/

void drawFrame(int zoom) {
  b506d0:	deffec04 	addi	sp,sp,-80
  b506d4:	dfc01315 	stw	ra,76(sp)
  b506d8:	df001215 	stw	fp,72(sp)
  b506dc:	ddc01115 	stw	r23,68(sp)
  b506e0:	dd801015 	stw	r22,64(sp)
  b506e4:	dd400f15 	stw	r21,60(sp)
  b506e8:	dd000e15 	stw	r20,56(sp)
  b506ec:	dcc00d15 	stw	r19,52(sp)
  b506f0:	dc800c15 	stw	r18,48(sp)
  b506f4:	dc400b15 	stw	r17,44(sp)
  b506f8:	dc000a15 	stw	r16,40(sp)
	int i;
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
  b506fc:	0005317a 	rdctl	r2,cpuid
  b50700:	d8800715 	stw	r2,28(sp)
	int recalculateTargetFlag = 20;
	float x = 0.0;
	float y = 0.0;

	float minX = targetArrayXY[0] - (1 / powf(1.5, zoom));
  b50704:	d0a00017 	ldw	r2,-32768(gp)
  b50708:	040ff034 	movhi	r16,16320
  b5070c:	15400017 	ldw	r21,0(r2)
  b50710:	0b529100 	call	b52910 <__floatsisf>
  b50714:	100b883a 	mov	r5,r2
  b50718:	8009883a 	mov	r4,r16
  b5071c:	1023883a 	mov	r17,r2
  b50720:	0b50c840 	call	b50c84 <powf>
  b50724:	102d883a 	mov	r22,r2
	float maxX = targetArrayXY[0] + (1 / powf(1.5, zoom));
  b50728:	d0a00017 	ldw	r2,-32768(gp)
  b5072c:	8009883a 	mov	r4,r16
  b50730:	880b883a 	mov	r5,r17
  b50734:	15000017 	ldw	r20,0(r2)
  b50738:	0b50c840 	call	b50c84 <powf>
  b5073c:	102f883a 	mov	r23,r2
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
  b50740:	d0a00017 	ldw	r2,-32768(gp)
  b50744:	8009883a 	mov	r4,r16
  b50748:	880b883a 	mov	r5,r17
  b5074c:	14c00117 	ldw	r19,4(r2)
  b50750:	0b50c840 	call	b50c84 <powf>
  b50754:	1025883a 	mov	r18,r2
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));
  b50758:	d0a00017 	ldw	r2,-32768(gp)
  b5075c:	8009883a 	mov	r4,r16
  b50760:	880b883a 	mov	r5,r17
  b50764:	14000117 	ldw	r16,4(r2)
  b50768:	0b50c840 	call	b50c84 <powf>

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  b5076c:	d8c00717 	ldw	r3,28(sp)
	float y = 0.0;

	float minX = targetArrayXY[0] - (1 / powf(1.5, zoom));
	float maxX = targetArrayXY[0] + (1 / powf(1.5, zoom));
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));
  b50770:	1023883a 	mov	r17,r2

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  b50774:	0080ffc4 	movi	r2,1023
  b50778:	10c07a16 	blt	r2,r3,b50964 <drawFrame+0x294>
	int cpu = __builtin_rdctl(5);
	int recalculateTargetFlag = 20;
	float x = 0.0;
	float y = 0.0;

	float minX = targetArrayXY[0] - (1 / powf(1.5, zoom));
  b5077c:	b00b883a 	mov	r5,r22
  b50780:	012fe034 	movhi	r4,49024
  b50784:	0b525bc0 	call	b525bc <__divsf3>
  b50788:	a8abff72 	custom	253,r21,r21,r2
	float maxX = targetArrayXY[0] + (1 / powf(1.5, zoom));
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
  b5078c:	900b883a 	mov	r5,r18
  b50790:	012fd034 	movhi	r4,48960
	int cpu = __builtin_rdctl(5);
	int recalculateTargetFlag = 20;
	float x = 0.0;
	float y = 0.0;

	float minX = targetArrayXY[0] - (1 / powf(1.5, zoom));
  b50794:	dd400515 	stw	r21,20(sp)
	float maxX = targetArrayXY[0] + (1 / powf(1.5, zoom));
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
  b50798:	0b525bc0 	call	b525bc <__divsf3>
  b5079c:	98a7ff72 	custom	253,r19,r19,r2
  b507a0:	880b883a 	mov	r5,r17
  b507a4:	010fd034 	movhi	r4,16192
  b507a8:	dcc00415 	stw	r19,16(sp)
  b507ac:	0b525bc0 	call	b525bc <__divsf3>
  b507b0:	d8c00417 	ldw	r3,16(sp)
  b507b4:	8085ff72 	custom	253,r2,r16,r2
  b507b8:	b80b883a 	mov	r5,r23
  b507bc:	10c5ffb2 	custom	254,r2,r2,r3
  b507c0:	010fe034 	movhi	r4,16256
  b507c4:	d8800315 	stw	r2,12(sp)
  b507c8:	0b525bc0 	call	b525bc <__divsf3>
  b507cc:	d8c00517 	ldw	r3,20(sp)
  b507d0:	a085ff72 	custom	253,r2,r20,r2
  b507d4:	10c5ffb2 	custom	254,r2,r2,r3
  b507d8:	d8800215 	stw	r2,8(sp)
  b507dc:	d8800717 	ldw	r2,28(sp)
  b507e0:	00c00504 	movi	r3,20
  b507e4:	d8c00615 	stw	r3,24(sp)
  b507e8:	d8800915 	stw	r2,36(sp)
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 767 - (float) i) / (float) 768) * (maxY - minY)) + minY;
  b507ec:	d9000917 	ldw	r4,36(sp)
  b507f0:	0b529100 	call	b52910 <__floatsisf>
  b507f4:	01111034 	movhi	r4,17472
  b507f8:	21300004 	addi	r4,r4,-16384
  b507fc:	2089ffb2 	custom	254,r4,r4,r2
  b50800:	01511034 	movhi	r5,17472
  b50804:	0b525bc0 	call	b525bc <__divsf3>
  b50808:	d8c00317 	ldw	r3,12(sp)
  b5080c:	d8000815 	stw	zero,32(sp)
  b50810:	10c5ff32 	custom	252,r2,r2,r3
  b50814:	d8c00417 	ldw	r3,16(sp)
  b50818:	18b9ff72 	custom	253,fp,r3,r2
  b5081c:	0005883a 	mov	r2,zero
  b50820:	e085ff72 	custom	253,r2,fp,r2
  b50824:	d8800115 	stw	r2,4(sp)
  b50828:	1085ff32 	custom	252,r2,r2,r2
  b5082c:	d8800015 	stw	r2,0(sp)
		for (j = 0; j < rowSize; j++) {
			float x0 = (((float) j / (float) 1024) * (maxX - minX)) + minX;
  b50830:	d9000817 	ldw	r4,32(sp)
  b50834:	0b529100 	call	b52910 <__floatsisf>
  b50838:	00cea034 	movhi	r3,14976
  b5083c:	10c5ff32 	custom	252,r2,r2,r3
  b50840:	d8c00217 	ldw	r3,8(sp)

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b50844:	01502034 	movhi	r5,16512
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 767 - (float) i) / (float) 768) * (maxY - minY)) + minY;
		for (j = 0; j < rowSize; j++) {
			float x0 = (((float) j / (float) 1024) * (maxX - minX)) + minX;
  b50848:	1885ff32 	custom	252,r2,r3,r2
  b5084c:	d8c00517 	ldw	r3,20(sp)
  b50850:	18adff72 	custom	253,r22,r3,r2
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  b50854:	0005883a 	mov	r2,zero
  b50858:	b0a5ff72 	custom	253,r18,r22,r2

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b5085c:	d8800017 	ldw	r2,0(sp)
  b50860:	94a9ff32 	custom	252,r20,r18,r18
  b50864:	1509ff72 	custom	253,r4,r2,r20
  b50868:	0b528980 	call	b52898 <__lesf2>
  b5086c:	00805616 	blt	zero,r2,b509c8 <drawFrame+0x2f8>
  b50870:	d8c00017 	ldw	r3,0(sp)
  b50874:	d8800117 	ldw	r2,4(sp)
  b50878:	05400044 	movi	r21,1
  b5087c:	1821883a 	mov	r16,r3
  b50880:	1027883a 	mov	r19,r2
  b50884:	05c01904 	movi	r23,100
  b50888:	00000106 	br	b50890 <drawFrame+0x1c0>
  b5088c:	adc00d26 	beq	r21,r23,b508c4 <drawFrame+0x1f4>
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  b50890:	9485ff72 	custom	253,r2,r18,r18
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  b50894:	a407ffb2 	custom	254,r3,r20,r16
		y = 2 * x * y + y0;
  b50898:	9885ff32 	custom	252,r2,r19,r2
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  b5089c:	b0e3ff72 	custom	253,r17,r22,r3
		y = 2 * x * y + y0;
  b508a0:	e0a7ff72 	custom	253,r19,fp,r2

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b508a4:	8c69ff32 	custom	252,r20,r17,r17
  b508a8:	9ce1ff32 	custom	252,r16,r19,r19
  b508ac:	a409ff72 	custom	253,r4,r20,r16
  b508b0:	01502034 	movhi	r5,16512
  b508b4:	8825883a 	mov	r18,r17
		 printf("iter number: %i\n", iter);
		 printf("Cycles on frame: %llu \n\n", (cycles));
		 }//*/

		x = xtemp;
		iter++;
  b508b8:	ad400044 	addi	r21,r21,1

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b508bc:	0b528980 	call	b52898 <__lesf2>
  b508c0:	00bff20e 	bge	zero,r2,b5088c <drawFrame+0x1bc>
			float x0 = (((float) j / (float) 1024) * (maxX - minX)) + minX;

			result = mandelbrot(x0, y0, &x, &y);

			//recalculates the x and y
			if (cpu == 3) {
  b508c4:	d8c00717 	ldw	r3,28(sp)
  b508c8:	008000c4 	movi	r2,3
  b508cc:	18803326 	beq	r3,r2,b5099c <drawFrame+0x2cc>

}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  b508d0:	00801904 	movi	r2,100
  b508d4:	a8802f26 	beq	r21,r2,b50994 <drawFrame+0x2c4>
		color = black;
	}
	else {
		int red = iter;
		int green = iter * 8;
		int blue = iter * 2;
  b508d8:	a80490fa 	slli	r2,r21,3
  b508dc:	00c00fc4 	movi	r3,63
  b508e0:	ad4d883a 	add	r6,r21,r21
  b508e4:	1880010e 	bge	r3,r2,b508ec <drawFrame+0x21c>
  b508e8:	1805883a 	mov	r2,r3
  b508ec:	1004917a 	slli	r2,r2,5
  b508f0:	010007c4 	movi	r4,31
  b508f4:	a807883a 	mov	r3,r21
  b508f8:	1141f80c 	andi	r5,r2,2016
  b508fc:	2540010e 	bge	r4,r21,b50904 <drawFrame+0x234>
  b50900:	2007883a 	mov	r3,r4
  b50904:	180492fa 	slli	r2,r3,11
  b50908:	3007883a 	mov	r3,r6
  b5090c:	11be000c 	andi	r6,r2,63488
  b50910:	20c0010e 	bge	r4,r3,b50918 <drawFrame+0x248>
  b50914:	2007883a 	mov	r3,r4
  b50918:	18803fcc 	andi	r2,r3,255
  b5091c:	3084b03a 	or	r2,r6,r2
  b50920:	288ab03a 	or	r5,r5,r2
					}
				}
			}

			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
  b50924:	d1271217 	ldw	r4,-25528(gp)
  b50928:	d9c00817 	ldw	r7,32(sp)
  b5092c:	d9800917 	ldw	r6,36(sp)
  b50930:	0b5e6a80 	call	b5e6a8 <alt_up_pixel_buffer_dma_draw>
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 767 - (float) i) / (float) 768) * (maxY - minY)) + minY;
		for (j = 0; j < rowSize; j++) {
  b50934:	d8800817 	ldw	r2,32(sp)
  b50938:	10800044 	addi	r2,r2,1
  b5093c:	d8800815 	stw	r2,32(sp)
  b50940:	d8c00817 	ldw	r3,32(sp)
  b50944:	0080c004 	movi	r2,768
  b50948:	18bfb91e 	bne	r3,r2,b50830 <drawFrame+0x160>
	float minX = targetArrayXY[0] - (1 / powf(1.5, zoom));
	float maxX = targetArrayXY[0] + (1 / powf(1.5, zoom));
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  b5094c:	d8800917 	ldw	r2,36(sp)
  b50950:	10800104 	addi	r2,r2,4
  b50954:	d8800915 	stw	r2,36(sp)
  b50958:	d8c00917 	ldw	r3,36(sp)
  b5095c:	0080ffc4 	movi	r2,1023
  b50960:	10ffa20e 	bge	r2,r3,b507ec <drawFrame+0x11c>
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}

}
  b50964:	dfc01317 	ldw	ra,76(sp)
  b50968:	df001217 	ldw	fp,72(sp)
  b5096c:	ddc01117 	ldw	r23,68(sp)
  b50970:	dd801017 	ldw	r22,64(sp)
  b50974:	dd400f17 	ldw	r21,60(sp)
  b50978:	dd000e17 	ldw	r20,56(sp)
  b5097c:	dcc00d17 	ldw	r19,52(sp)
  b50980:	dc800c17 	ldw	r18,48(sp)
  b50984:	dc400b17 	ldw	r17,44(sp)
  b50988:	dc000a17 	ldw	r16,40(sp)
  b5098c:	dec01404 	addi	sp,sp,80
  b50990:	f800283a 	ret

}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  b50994:	000b883a 	mov	r5,zero
  b50998:	003fe206 	br	b50924 <drawFrame+0x254>

			result = mandelbrot(x0, y0, &x, &y);

			//recalculates the x and y
			if (cpu == 3) {
				if (recalculateTargetFlag) {
  b5099c:	d8800617 	ldw	r2,24(sp)
  b509a0:	103fcb26 	beq	r2,zero,b508d0 <drawFrame+0x200>
					if (result > (maxIter - 2)) {
  b509a4:	00801884 	movi	r2,98
  b509a8:	157fc90e 	bge	r2,r21,b508d0 <drawFrame+0x200>
						targetArrayXYMaster[0] = x;
						targetArrayXYMaster[1] = y;
						recalculateTargetFlag = recalculateTargetFlag - 1;
  b509ac:	d8c00617 	ldw	r3,24(sp)
			//recalculates the x and y
			if (cpu == 3) {
				if (recalculateTargetFlag) {
					if (result > (maxIter - 2)) {
						targetArrayXYMaster[0] = x;
						targetArrayXYMaster[1] = y;
  b509b0:	d0a71004 	addi	r2,gp,-25536
  b509b4:	14c00115 	stw	r19,4(r2)
						recalculateTargetFlag = recalculateTargetFlag - 1;
  b509b8:	18ffffc4 	addi	r3,r3,-1

			//recalculates the x and y
			if (cpu == 3) {
				if (recalculateTargetFlag) {
					if (result > (maxIter - 2)) {
						targetArrayXYMaster[0] = x;
  b509bc:	d4671015 	stw	r17,-25536(gp)
						targetArrayXYMaster[1] = y;
						recalculateTargetFlag = recalculateTargetFlag - 1;
  b509c0:	d8c00615 	stw	r3,24(sp)
  b509c4:	003fc206 	br	b508d0 <drawFrame+0x200>

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b509c8:	d8c00117 	ldw	r3,4(sp)
  b509cc:	9023883a 	mov	r17,r18
  b509d0:	05400044 	movi	r21,1
  b509d4:	1827883a 	mov	r19,r3
  b509d8:	003fba06 	br	b508c4 <drawFrame+0x1f4>

00b509dc <drawFullSet>:
	}
	return iter;
}//*/


void drawFullSet(void) {
  b509dc:	defff204 	addi	sp,sp,-56
  b509e0:	dfc00d15 	stw	ra,52(sp)
  b509e4:	df000c15 	stw	fp,48(sp)
  b509e8:	ddc00b15 	stw	r23,44(sp)
  b509ec:	dd800a15 	stw	r22,40(sp)
  b509f0:	dd400915 	stw	r21,36(sp)
  b509f4:	dd000815 	stw	r20,32(sp)
  b509f8:	dcc00715 	stw	r19,28(sp)
  b509fc:	dc800615 	stw	r18,24(sp)
  b50a00:	dc400515 	stw	r17,20(sp)
  b50a04:	dc000415 	stw	r16,16(sp)
	int i;
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
  b50a08:	0009317a 	rdctl	r4,cpuid

	int recalculateTargetFlag = 10;

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  b50a0c:	0080ffc4 	movi	r2,1023
  b50a10:	11006f16 	blt	r2,r4,b50bd0 <drawFullSet+0x1f4>
			result = mandelbrotNoZoom(j, i, &recalculateTargetFlag);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}
}//*/
  b50a14:	00800284 	movi	r2,10
  b50a18:	d9000315 	stw	r4,12(sp)
  b50a1c:	d8800215 	stw	r2,8(sp)
  b50a20:	0b529100 	call	b52910 <__floatsisf>
  b50a24:	00cea034 	movhi	r3,14976
  b50a28:	10c5ff32 	custom	252,r2,r2,r3
  b50a2c:	01101834 	movhi	r4,16480
  b50a30:	1105ff32 	custom	252,r2,r2,r4
  b50a34:	00d00834 	movhi	r3,16416
  b50a38:	10f9ffb2 	custom	254,fp,r2,r3
  b50a3c:	0005883a 	mov	r2,zero
  b50a40:	e085ff72 	custom	253,r2,fp,r2
  b50a44:	1087ff32 	custom	252,r3,r2,r2
  b50a48:	d8800015 	stw	r2,0(sp)
  b50a4c:	d8c00115 	stw	r3,4(sp)
  b50a50:	002f883a 	mov	r23,zero
	float maxX = 1;
	float minY = -1;
	float maxY = 1;

	float x0 = (((float) cCol / (float) colSize) * (maxX - minX)) + minX;
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
  b50a54:	b809883a 	mov	r4,r23
  b50a58:	0b529100 	call	b52910 <__floatsisf>
  b50a5c:	01111034 	movhi	r4,17472
  b50a60:	21300004 	addi	r4,r4,-16384
  b50a64:	2089ffb2 	custom	254,r4,r4,r2
  b50a68:	01511034 	movhi	r5,17472
  b50a6c:	0b525bc0 	call	b525bc <__divsf3>
  b50a70:	1085ff72 	custom	253,r2,r2,r2
  b50a74:	00cfe034 	movhi	r3,16256
  b50a78:	10ebffb2 	custom	254,r21,r2,r3
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  b50a7c:	0005883a 	mov	r2,zero
  b50a80:	a8a3ff72 	custom	253,r17,r21,r2
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b50a84:	d8800117 	ldw	r2,4(sp)
  b50a88:	8c67ff32 	custom	252,r19,r17,r17
  b50a8c:	01502034 	movhi	r5,16512
  b50a90:	14c9ff72 	custom	253,r4,r2,r19
  b50a94:	0b528980 	call	b52898 <__lesf2>
  b50a98:	00804916 	blt	zero,r2,b50bc0 <drawFullSet+0x1e4>
  b50a9c:	d8c00117 	ldw	r3,4(sp)
  b50aa0:	d8800017 	ldw	r2,0(sp)
  b50aa4:	05000044 	movi	r20,1
  b50aa8:	1821883a 	mov	r16,r3
  b50aac:	05801904 	movi	r22,100
  b50ab0:	1007883a 	mov	r3,r2
  b50ab4:	00000106 	br	b50abc <drawFullSet+0xe0>
  b50ab8:	a5800d26 	beq	r20,r22,b50af0 <drawFullSet+0x114>
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  b50abc:	18c5ff72 	custom	253,r2,r3,r3
  b50ac0:	8885ff32 	custom	252,r2,r17,r2
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  b50ac4:	84c7ffb2 	custom	254,r3,r16,r19
  b50ac8:	1f25ff72 	custom	253,r18,r3,fp
		y = 2 * x * y + y0;
  b50acc:	a8a3ff72 	custom	253,r17,r21,r2
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b50ad0:	94a1ff32 	custom	252,r16,r18,r18
  b50ad4:	8c67ff32 	custom	252,r19,r17,r17
  b50ad8:	84c9ff72 	custom	253,r4,r16,r19
  b50adc:	01502034 	movhi	r5,16512
  b50ae0:	0b528980 	call	b52898 <__lesf2>
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
  b50ae4:	a5000044 	addi	r20,r20,1
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b50ae8:	9007883a 	mov	r3,r18
  b50aec:	00bff20e 	bge	zero,r2,b50ab8 <drawFullSet+0xdc>
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
	}
	int cpu = __builtin_rdctl(5);
  b50af0:	0007317a 	rdctl	r3,cpuid
	if (cpu == 3) {
  b50af4:	008000c4 	movi	r2,3
  b50af8:	18802626 	beq	r3,r2,b50b94 <drawFullSet+0x1b8>

}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  b50afc:	00801904 	movi	r2,100
  b50b00:	a0802226 	beq	r20,r2,b50b8c <drawFullSet+0x1b0>
		color = black;
	}
	else {
		int red = iter;
		int green = iter * 8;
		int blue = iter * 2;
  b50b04:	a00490fa 	slli	r2,r20,3
  b50b08:	00c00fc4 	movi	r3,63
  b50b0c:	a50d883a 	add	r6,r20,r20
  b50b10:	1880010e 	bge	r3,r2,b50b18 <drawFullSet+0x13c>
  b50b14:	1805883a 	mov	r2,r3
  b50b18:	1004917a 	slli	r2,r2,5
  b50b1c:	010007c4 	movi	r4,31
  b50b20:	a007883a 	mov	r3,r20
  b50b24:	1141f80c 	andi	r5,r2,2016
  b50b28:	2500010e 	bge	r4,r20,b50b30 <drawFullSet+0x154>
  b50b2c:	2007883a 	mov	r3,r4
  b50b30:	180492fa 	slli	r2,r3,11
  b50b34:	3007883a 	mov	r3,r6
  b50b38:	11be000c 	andi	r6,r2,63488
  b50b3c:	20c0010e 	bge	r4,r3,b50b44 <drawFullSet+0x168>
  b50b40:	2007883a 	mov	r3,r4
  b50b44:	18803fcc 	andi	r2,r3,255
  b50b48:	3084b03a 	or	r2,r6,r2
  b50b4c:	288ab03a 	or	r5,r5,r2

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		for (j = 0; j < rowSize; j++) {
			result = mandelbrotNoZoom(j, i, &recalculateTargetFlag);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
  b50b50:	d1271217 	ldw	r4,-25528(gp)
  b50b54:	d9800317 	ldw	r6,12(sp)
  b50b58:	b80f883a 	mov	r7,r23
	int cpu = __builtin_rdctl(5);

	int recalculateTargetFlag = 10;

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		for (j = 0; j < rowSize; j++) {
  b50b5c:	bdc00044 	addi	r23,r23,1
			result = mandelbrotNoZoom(j, i, &recalculateTargetFlag);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
  b50b60:	0b5e6a80 	call	b5e6a8 <alt_up_pixel_buffer_dma_draw>
	int cpu = __builtin_rdctl(5);

	int recalculateTargetFlag = 10;

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		for (j = 0; j < rowSize; j++) {
  b50b64:	0080c004 	movi	r2,768
  b50b68:	b8bfba1e 	bne	r23,r2,b50a54 <drawFullSet+0x78>
	int color = 0;
	int cpu = __builtin_rdctl(5);

	int recalculateTargetFlag = 10;

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  b50b6c:	d8800317 	ldw	r2,12(sp)
  b50b70:	10800104 	addi	r2,r2,4
  b50b74:	d8800315 	stw	r2,12(sp)
  b50b78:	d8c00317 	ldw	r3,12(sp)
  b50b7c:	0080ffc4 	movi	r2,1023
  b50b80:	10c01316 	blt	r2,r3,b50bd0 <drawFullSet+0x1f4>
  b50b84:	d9000317 	ldw	r4,12(sp)
  b50b88:	003fa506 	br	b50a20 <drawFullSet+0x44>

}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  b50b8c:	000b883a 	mov	r5,zero
  b50b90:	003fef06 	br	b50b50 <drawFullSet+0x174>
		x = xtemp;
		iter++;
	}
	int cpu = __builtin_rdctl(5);
	if (cpu == 3) {
		if (*recalculateTargetFlag) {
  b50b94:	d8800217 	ldw	r2,8(sp)
  b50b98:	103fd826 	beq	r2,zero,b50afc <drawFullSet+0x120>
			if (iter >= (maxIter - 2)) {
  b50b9c:	00801844 	movi	r2,97
  b50ba0:	153fd60e 	bge	r2,r20,b50afc <drawFullSet+0x120>
				targetArrayXYMaster[0] = x;
				targetArrayXYMaster[1] = y;
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
  b50ba4:	d8c00217 	ldw	r3,8(sp)
	int cpu = __builtin_rdctl(5);
	if (cpu == 3) {
		if (*recalculateTargetFlag) {
			if (iter >= (maxIter - 2)) {
				targetArrayXYMaster[0] = x;
				targetArrayXYMaster[1] = y;
  b50ba8:	d0a71004 	addi	r2,gp,-25536
  b50bac:	14400115 	stw	r17,4(r2)
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
  b50bb0:	18ffffc4 	addi	r3,r3,-1
	}
	int cpu = __builtin_rdctl(5);
	if (cpu == 3) {
		if (*recalculateTargetFlag) {
			if (iter >= (maxIter - 2)) {
				targetArrayXYMaster[0] = x;
  b50bb4:	d4a71015 	stw	r18,-25536(gp)
				targetArrayXYMaster[1] = y;
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
  b50bb8:	d8c00215 	stw	r3,8(sp)
  b50bbc:	003fcf06 	br	b50afc <drawFullSet+0x120>
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  b50bc0:	d8c00017 	ldw	r3,0(sp)
  b50bc4:	05000044 	movi	r20,1
  b50bc8:	1825883a 	mov	r18,r3
  b50bcc:	003fc806 	br	b50af0 <drawFullSet+0x114>
			result = mandelbrotNoZoom(j, i, &recalculateTargetFlag);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}
}//*/
  b50bd0:	dfc00d17 	ldw	ra,52(sp)
  b50bd4:	df000c17 	ldw	fp,48(sp)
  b50bd8:	ddc00b17 	ldw	r23,44(sp)
  b50bdc:	dd800a17 	ldw	r22,40(sp)
  b50be0:	dd400917 	ldw	r21,36(sp)
  b50be4:	dd000817 	ldw	r20,32(sp)
  b50be8:	dcc00717 	ldw	r19,28(sp)
  b50bec:	dc800617 	ldw	r18,24(sp)
  b50bf0:	dc400517 	ldw	r17,20(sp)
  b50bf4:	dc000417 	ldw	r16,16(sp)
  b50bf8:	dec00e04 	addi	sp,sp,56
  b50bfc:	f800283a 	ret

00b50c00 <main>:

#define FIXED_POINT



int main() {
  b50c00:	defffd04 	addi	sp,sp,-12
  b50c04:	dfc00215 	stw	ra,8(sp)
  b50c08:	dc400115 	stw	r17,4(sp)
  b50c0c:	dc000015 	stw	r16,0(sp)
	setup();
  b50c10:	0b506a00 	call	b506a0 <setup>
	clearScreen();
  b50c14:	0b503800 	call	b50380 <clearScreen>
	printf("Program running (UART)...\n");
  b50c18:	01002db4 	movhi	r4,182
  b50c1c:	2103eb04 	addi	r4,r4,4012
  b50c20:	0b53cdc0 	call	b53cdc <puts>
	//reset address: 0090FFE4
	//default buffer start address: 0x01880000
	printf("ADDRESS: %08X", myPixelBuffer->back_buffer_start_address);
  b50c24:	d0a71217 	ldw	r2,-25528(gp)
  b50c28:	01002db4 	movhi	r4,182
  b50c2c:	2103f204 	addi	r4,r4,4040
  b50c30:	11400c17 	ldw	r5,48(r2)
  b50c34:	0b53bc40 	call	b53bc4 <printf>
	int cpu = __builtin_rdctl(5);
  b50c38:	000b317a 	rdctl	r5,cpuid
	printf("cpu %d\n", cpu);
  b50c3c:	01002db4 	movhi	r4,182
  b50c40:	2103f604 	addi	r4,r4,4056
  b50c44:	0b53bc40 	call	b53bc4 <printf>
  b50c48:	04401904 	movi	r17,100
  b50c4c:	0021883a 	mov	r16,zero
			 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
			 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
			 //*/
//			clearScreen();

			if (zoom == 0) {
  b50c50:	8000041e 	bne	r16,zero,b50c64 <main+0x64>
				drawFullSet();
  b50c54:	0b509dc0 	call	b509dc <drawFullSet>

			else {
				drawFrame(zoom);
			}

			barrier(0);
  b50c58:	0009883a 	mov	r4,zero
  b50c5c:	0b504f40 	call	b504f4 <barrier>
  b50c60:	04000044 	movi	r16,1
			if (zoom == 0) {
				drawFullSet();
			}

			else {
				drawFrame(zoom);
  b50c64:	8009883a 	mov	r4,r16
  b50c68:	0b506d00 	call	b506d0 <drawFrame>
	//	unsigned long long cycles = 0;
	//	drawFullSet();
	//the main program loop
	while (1) {
		int zoom;
		for (zoom = 0; zoom <= 100; zoom++) {
  b50c6c:	84000044 	addi	r16,r16,1

			else {
				drawFrame(zoom);
			}

			barrier(0);
  b50c70:	0009883a 	mov	r4,zero
  b50c74:	0b504f40 	call	b504f4 <barrier>
	//	unsigned long long cycles = 0;
	//	drawFullSet();
	//the main program loop
	while (1) {
		int zoom;
		for (zoom = 0; zoom <= 100; zoom++) {
  b50c78:	8c3ff50e 	bge	r17,r16,b50c50 <main+0x50>
	printf("Program running (UART)...\n");
	//reset address: 0090FFE4
	//default buffer start address: 0x01880000
	printf("ADDRESS: %08X", myPixelBuffer->back_buffer_start_address);
	int cpu = __builtin_rdctl(5);
	printf("cpu %d\n", cpu);
  b50c7c:	0021883a 	mov	r16,zero
  b50c80:	003ff306 	br	b50c50 <main+0x50>

00b50c84 <powf>:
  b50c84:	defff104 	addi	sp,sp,-60
  b50c88:	dd000d15 	stw	r20,52(sp)
  b50c8c:	dcc00c15 	stw	r19,48(sp)
  b50c90:	dc800b15 	stw	r18,44(sp)
  b50c94:	dc400a15 	stw	r17,40(sp)
  b50c98:	dc000915 	stw	r16,36(sp)
  b50c9c:	dfc00e15 	stw	ra,56(sp)
  b50ca0:	05002db4 	movhi	r20,182
  b50ca4:	a50bf804 	addi	r20,r20,12256
  b50ca8:	2027883a 	mov	r19,r4
  b50cac:	2825883a 	mov	r18,r5
  b50cb0:	0b510dc0 	call	b510dc <__ieee754_powf>
  b50cb4:	1021883a 	mov	r16,r2
  b50cb8:	a0800017 	ldw	r2,0(r20)
  b50cbc:	047fffc4 	movi	r17,-1
  b50cc0:	14400326 	beq	r2,r17,b50cd0 <powf+0x4c>
  b50cc4:	9009883a 	mov	r4,r18
  b50cc8:	0b51fa00 	call	b51fa0 <isnanf>
  b50ccc:	10000926 	beq	r2,zero,b50cf4 <powf+0x70>
  b50cd0:	8005883a 	mov	r2,r16
  b50cd4:	dfc00e17 	ldw	ra,56(sp)
  b50cd8:	dd000d17 	ldw	r20,52(sp)
  b50cdc:	dcc00c17 	ldw	r19,48(sp)
  b50ce0:	dc800b17 	ldw	r18,44(sp)
  b50ce4:	dc400a17 	ldw	r17,40(sp)
  b50ce8:	dc000917 	ldw	r16,36(sp)
  b50cec:	dec00f04 	addi	sp,sp,60
  b50cf0:	f800283a 	ret
  b50cf4:	9809883a 	mov	r4,r19
  b50cf8:	0b51fa00 	call	b51fa0 <isnanf>
  b50cfc:	1000151e 	bne	r2,zero,b50d54 <powf+0xd0>
  b50d00:	9809883a 	mov	r4,r19
  b50d04:	000b883a 	mov	r5,zero
  b50d08:	0b527300 	call	b52730 <__eqsf2>
  b50d0c:	10005a1e 	bne	r2,zero,b50e78 <powf+0x1f4>
  b50d10:	9009883a 	mov	r4,r18
  b50d14:	000b883a 	mov	r5,zero
  b50d18:	0b527300 	call	b52730 <__eqsf2>
  b50d1c:	1000331e 	bne	r2,zero,b50dec <powf+0x168>
  b50d20:	a0800017 	ldw	r2,0(r20)
  b50d24:	d8000615 	stw	zero,24(sp)
  b50d28:	d8000715 	stw	zero,28(sp)
  b50d2c:	10001426 	beq	r2,zero,b50d80 <powf+0xfc>
  b50d30:	008ffc34 	movhi	r2,16368
  b50d34:	d8800715 	stw	r2,28(sp)
  b50d38:	d8800617 	ldw	r2,24(sp)
  b50d3c:	d8c00717 	ldw	r3,28(sp)
  b50d40:	1009883a 	mov	r4,r2
  b50d44:	180b883a 	mov	r5,r3
  b50d48:	0b532180 	call	b53218 <__truncdfsf2>
  b50d4c:	1021883a 	mov	r16,r2
  b50d50:	003fdf06 	br	b50cd0 <powf+0x4c>
  b50d54:	9009883a 	mov	r4,r18
  b50d58:	000b883a 	mov	r5,zero
  b50d5c:	0b527300 	call	b52730 <__eqsf2>
  b50d60:	103fdb1e 	bne	r2,zero,b50cd0 <powf+0x4c>
  b50d64:	a0c00017 	ldw	r3,0(r20)
  b50d68:	010ffc34 	movhi	r4,16368
  b50d6c:	d8000615 	stw	zero,24(sp)
  b50d70:	d9000715 	stw	r4,28(sp)
  b50d74:	1c401a26 	beq	r3,r17,b50de0 <powf+0x15c>
  b50d78:	00800084 	movi	r2,2
  b50d7c:	18801826 	beq	r3,r2,b50de0 <powf+0x15c>
  b50d80:	9009883a 	mov	r4,r18
  b50d84:	0b529a80 	call	b529a8 <__extendsfdf2>
  b50d88:	9809883a 	mov	r4,r19
  b50d8c:	d8c00515 	stw	r3,20(sp)
  b50d90:	d8800415 	stw	r2,16(sp)
  b50d94:	0b529a80 	call	b529a8 <__extendsfdf2>
  b50d98:	100b883a 	mov	r5,r2
  b50d9c:	d8c00315 	stw	r3,12(sp)
  b50da0:	00802db4 	movhi	r2,182
  b50da4:	1083f804 	addi	r2,r2,4064
  b50da8:	00c00044 	movi	r3,1
  b50dac:	d809883a 	mov	r4,sp
  b50db0:	d8800115 	stw	r2,4(sp)
  b50db4:	d8c00015 	stw	r3,0(sp)
  b50db8:	d9400215 	stw	r5,8(sp)
  b50dbc:	d8000815 	stw	zero,32(sp)
  b50dc0:	0b51d5c0 	call	b51d5c <matherr>
  b50dc4:	10002826 	beq	r2,zero,b50e68 <powf+0x1e4>
  b50dc8:	d8800817 	ldw	r2,32(sp)
  b50dcc:	103fda26 	beq	r2,zero,b50d38 <powf+0xb4>
  b50dd0:	0b53bb40 	call	b53bb4 <__errno>
  b50dd4:	d8c00817 	ldw	r3,32(sp)
  b50dd8:	10c00015 	stw	r3,0(r2)
  b50ddc:	003fd606 	br	b50d38 <powf+0xb4>
  b50de0:	d9000715 	stw	r4,28(sp)
  b50de4:	d8000615 	stw	zero,24(sp)
  b50de8:	003fd306 	br	b50d38 <powf+0xb4>
  b50dec:	9009883a 	mov	r4,r18
  b50df0:	0b51f840 	call	b51f84 <finitef>
  b50df4:	103fb626 	beq	r2,zero,b50cd0 <powf+0x4c>
  b50df8:	9009883a 	mov	r4,r18
  b50dfc:	000b883a 	mov	r5,zero
  b50e00:	0b528200 	call	b52820 <__ltsf2>
  b50e04:	103fb20e 	bge	r2,zero,b50cd0 <powf+0x4c>
  b50e08:	9809883a 	mov	r4,r19
  b50e0c:	00800044 	movi	r2,1
  b50e10:	00c02db4 	movhi	r3,182
  b50e14:	18c3f804 	addi	r3,r3,4064
  b50e18:	d8800015 	stw	r2,0(sp)
  b50e1c:	d8c00115 	stw	r3,4(sp)
  b50e20:	d8000815 	stw	zero,32(sp)
  b50e24:	0b529a80 	call	b529a8 <__extendsfdf2>
  b50e28:	9009883a 	mov	r4,r18
  b50e2c:	d8c00315 	stw	r3,12(sp)
  b50e30:	d8800215 	stw	r2,8(sp)
  b50e34:	0b529a80 	call	b529a8 <__extendsfdf2>
  b50e38:	a1800017 	ldw	r6,0(r20)
  b50e3c:	d8c00515 	stw	r3,20(sp)
  b50e40:	d8800415 	stw	r2,16(sp)
  b50e44:	30005626 	beq	r6,zero,b50fa0 <powf+0x31c>
  b50e48:	00bffc34 	movhi	r2,65520
  b50e4c:	d8800715 	stw	r2,28(sp)
  b50e50:	00800084 	movi	r2,2
  b50e54:	d8000615 	stw	zero,24(sp)
  b50e58:	30800326 	beq	r6,r2,b50e68 <powf+0x1e4>
  b50e5c:	d809883a 	mov	r4,sp
  b50e60:	0b51d5c0 	call	b51d5c <matherr>
  b50e64:	103fd81e 	bne	r2,zero,b50dc8 <powf+0x144>
  b50e68:	0b53bb40 	call	b53bb4 <__errno>
  b50e6c:	00c00844 	movi	r3,33
  b50e70:	10c00015 	stw	r3,0(r2)
  b50e74:	003fd406 	br	b50dc8 <powf+0x144>
  b50e78:	8009883a 	mov	r4,r16
  b50e7c:	0b51f840 	call	b51f84 <finitef>
  b50e80:	10002426 	beq	r2,zero,b50f14 <powf+0x290>
  b50e84:	8009883a 	mov	r4,r16
  b50e88:	000b883a 	mov	r5,zero
  b50e8c:	0b527300 	call	b52730 <__eqsf2>
  b50e90:	103f8f1e 	bne	r2,zero,b50cd0 <powf+0x4c>
  b50e94:	9809883a 	mov	r4,r19
  b50e98:	0b51f840 	call	b51f84 <finitef>
  b50e9c:	103f8c26 	beq	r2,zero,b50cd0 <powf+0x4c>
  b50ea0:	9009883a 	mov	r4,r18
  b50ea4:	0b51f840 	call	b51f84 <finitef>
  b50ea8:	103f8926 	beq	r2,zero,b50cd0 <powf+0x4c>
  b50eac:	9809883a 	mov	r4,r19
  b50eb0:	00800104 	movi	r2,4
  b50eb4:	00c02db4 	movhi	r3,182
  b50eb8:	18c3f804 	addi	r3,r3,4064
  b50ebc:	d8800015 	stw	r2,0(sp)
  b50ec0:	d8c00115 	stw	r3,4(sp)
  b50ec4:	d8000815 	stw	zero,32(sp)
  b50ec8:	0b529a80 	call	b529a8 <__extendsfdf2>
  b50ecc:	9009883a 	mov	r4,r18
  b50ed0:	d8c00315 	stw	r3,12(sp)
  b50ed4:	d8800215 	stw	r2,8(sp)
  b50ed8:	0b529a80 	call	b529a8 <__extendsfdf2>
  b50edc:	a1800017 	ldw	r6,0(r20)
  b50ee0:	d8800415 	stw	r2,16(sp)
  b50ee4:	00800084 	movi	r2,2
  b50ee8:	d8c00515 	stw	r3,20(sp)
  b50eec:	d8000615 	stw	zero,24(sp)
  b50ef0:	d8000715 	stw	zero,28(sp)
  b50ef4:	30800326 	beq	r6,r2,b50f04 <powf+0x280>
  b50ef8:	d809883a 	mov	r4,sp
  b50efc:	0b51d5c0 	call	b51d5c <matherr>
  b50f00:	103fb11e 	bne	r2,zero,b50dc8 <powf+0x144>
  b50f04:	0b53bb40 	call	b53bb4 <__errno>
  b50f08:	00c00884 	movi	r3,34
  b50f0c:	10c00015 	stw	r3,0(r2)
  b50f10:	003fad06 	br	b50dc8 <powf+0x144>
  b50f14:	9809883a 	mov	r4,r19
  b50f18:	0b51f840 	call	b51f84 <finitef>
  b50f1c:	103fd926 	beq	r2,zero,b50e84 <powf+0x200>
  b50f20:	9009883a 	mov	r4,r18
  b50f24:	0b51f840 	call	b51f84 <finitef>
  b50f28:	103fd626 	beq	r2,zero,b50e84 <powf+0x200>
  b50f2c:	8009883a 	mov	r4,r16
  b50f30:	0b51fa00 	call	b51fa0 <isnanf>
  b50f34:	10001d26 	beq	r2,zero,b50fac <powf+0x328>
  b50f38:	9809883a 	mov	r4,r19
  b50f3c:	00800044 	movi	r2,1
  b50f40:	00c02db4 	movhi	r3,182
  b50f44:	18c3f804 	addi	r3,r3,4064
  b50f48:	d8800015 	stw	r2,0(sp)
  b50f4c:	d8c00115 	stw	r3,4(sp)
  b50f50:	d8000815 	stw	zero,32(sp)
  b50f54:	0b529a80 	call	b529a8 <__extendsfdf2>
  b50f58:	9009883a 	mov	r4,r18
  b50f5c:	d8c00315 	stw	r3,12(sp)
  b50f60:	d8800215 	stw	r2,8(sp)
  b50f64:	0b529a80 	call	b529a8 <__extendsfdf2>
  b50f68:	a4000017 	ldw	r16,0(r20)
  b50f6c:	d8c00515 	stw	r3,20(sp)
  b50f70:	d8800415 	stw	r2,16(sp)
  b50f74:	80000a26 	beq	r16,zero,b50fa0 <powf+0x31c>
  b50f78:	0009883a 	mov	r4,zero
  b50f7c:	000d883a 	mov	r6,zero
  b50f80:	000b883a 	mov	r5,zero
  b50f84:	000f883a 	mov	r7,zero
  b50f88:	0b52f000 	call	b52f00 <__divdf3>
  b50f8c:	d8800615 	stw	r2,24(sp)
  b50f90:	00800084 	movi	r2,2
  b50f94:	d8c00715 	stw	r3,28(sp)
  b50f98:	80bfb01e 	bne	r16,r2,b50e5c <powf+0x1d8>
  b50f9c:	003fb206 	br	b50e68 <powf+0x1e4>
  b50fa0:	d8000615 	stw	zero,24(sp)
  b50fa4:	d8000715 	stw	zero,28(sp)
  b50fa8:	003fac06 	br	b50e5c <powf+0x1d8>
  b50fac:	9809883a 	mov	r4,r19
  b50fb0:	008000c4 	movi	r2,3
  b50fb4:	00c02db4 	movhi	r3,182
  b50fb8:	18c3f804 	addi	r3,r3,4064
  b50fbc:	d8800015 	stw	r2,0(sp)
  b50fc0:	d8c00115 	stw	r3,4(sp)
  b50fc4:	d8000815 	stw	zero,32(sp)
  b50fc8:	0b529a80 	call	b529a8 <__extendsfdf2>
  b50fcc:	9009883a 	mov	r4,r18
  b50fd0:	d8c00315 	stw	r3,12(sp)
  b50fd4:	d8800215 	stw	r2,8(sp)
  b50fd8:	0b529a80 	call	b529a8 <__extendsfdf2>
  b50fdc:	a1800017 	ldw	r6,0(r20)
  b50fe0:	d8c00515 	stw	r3,20(sp)
  b50fe4:	d8800415 	stw	r2,16(sp)
  b50fe8:	3000211e 	bne	r6,zero,b51070 <powf+0x3ec>
  b50fec:	9809883a 	mov	r4,r19
  b50ff0:	0091fc34 	movhi	r2,18416
  b50ff4:	10bfffc4 	addi	r2,r2,-1
  b50ff8:	04f80034 	movhi	r19,57344
  b50ffc:	000b883a 	mov	r5,zero
  b51000:	d8800715 	stw	r2,28(sp)
  b51004:	dcc00615 	stw	r19,24(sp)
  b51008:	0b528200 	call	b52820 <__ltsf2>
  b5100c:	103fba0e 	bge	r2,zero,b50ef8 <powf+0x274>
  b51010:	014fc034 	movhi	r5,16128
  b51014:	9009883a 	mov	r4,r18
  b51018:	0b523dc0 	call	b523dc <__mulsf3>
  b5101c:	1009883a 	mov	r4,r2
  b51020:	0b529a80 	call	b529a8 <__extendsfdf2>
  b51024:	1009883a 	mov	r4,r2
  b51028:	180b883a 	mov	r5,r3
  b5102c:	1021883a 	mov	r16,r2
  b51030:	1823883a 	mov	r17,r3
  b51034:	0b51d640 	call	b51d64 <rint>
  b51038:	180f883a 	mov	r7,r3
  b5103c:	880b883a 	mov	r5,r17
  b51040:	8009883a 	mov	r4,r16
  b51044:	100d883a 	mov	r6,r2
  b51048:	0b531580 	call	b53158 <__nedf2>
  b5104c:	10000426 	beq	r2,zero,b51060 <powf+0x3dc>
  b51050:	00b1fc34 	movhi	r2,51184
  b51054:	10bfffc4 	addi	r2,r2,-1
  b51058:	dcc00615 	stw	r19,24(sp)
  b5105c:	d8800715 	stw	r2,28(sp)
  b51060:	a0c00017 	ldw	r3,0(r20)
  b51064:	00800084 	movi	r2,2
  b51068:	18bfa31e 	bne	r3,r2,b50ef8 <powf+0x274>
  b5106c:	003fa506 	br	b50f04 <powf+0x280>
  b51070:	009ffc34 	movhi	r2,32752
  b51074:	9809883a 	mov	r4,r19
  b51078:	000b883a 	mov	r5,zero
  b5107c:	d8800715 	stw	r2,28(sp)
  b51080:	d8000615 	stw	zero,24(sp)
  b51084:	0b528200 	call	b52820 <__ltsf2>
  b51088:	103ff50e 	bge	r2,zero,b51060 <powf+0x3dc>
  b5108c:	014fc034 	movhi	r5,16128
  b51090:	9009883a 	mov	r4,r18
  b51094:	0b523dc0 	call	b523dc <__mulsf3>
  b51098:	1009883a 	mov	r4,r2
  b5109c:	0b529a80 	call	b529a8 <__extendsfdf2>
  b510a0:	1009883a 	mov	r4,r2
  b510a4:	180b883a 	mov	r5,r3
  b510a8:	1021883a 	mov	r16,r2
  b510ac:	1823883a 	mov	r17,r3
  b510b0:	0b51d640 	call	b51d64 <rint>
  b510b4:	180f883a 	mov	r7,r3
  b510b8:	880b883a 	mov	r5,r17
  b510bc:	8009883a 	mov	r4,r16
  b510c0:	100d883a 	mov	r6,r2
  b510c4:	0b531580 	call	b53158 <__nedf2>
  b510c8:	103fe526 	beq	r2,zero,b51060 <powf+0x3dc>
  b510cc:	00bffc34 	movhi	r2,65520
  b510d0:	d8800715 	stw	r2,28(sp)
  b510d4:	d8000615 	stw	zero,24(sp)
  b510d8:	003fe106 	br	b51060 <powf+0x3dc>

00b510dc <__ieee754_powf>:
  b510dc:	defff004 	addi	sp,sp,-64
  b510e0:	00a00034 	movhi	r2,32768
  b510e4:	10bfffc4 	addi	r2,r2,-1
  b510e8:	dc000615 	stw	r16,24(sp)
  b510ec:	28a0703a 	and	r16,r5,r2
  b510f0:	df000e15 	stw	fp,56(sp)
  b510f4:	dcc00915 	stw	r19,36(sp)
  b510f8:	dc800815 	stw	r18,32(sp)
  b510fc:	2027883a 	mov	r19,r4
  b51100:	dfc00f15 	stw	ra,60(sp)
  b51104:	ddc00d15 	stw	r23,52(sp)
  b51108:	dd800c15 	stw	r22,48(sp)
  b5110c:	dd400b15 	stw	r21,44(sp)
  b51110:	dd000a15 	stw	r20,40(sp)
  b51114:	dc400715 	stw	r17,28(sp)
  b51118:	2839883a 	mov	fp,r5
  b5111c:	2825883a 	mov	r18,r5
  b51120:	2809883a 	mov	r4,r5
  b51124:	80003526 	beq	r16,zero,b511fc <__ieee754_powf+0x120>
  b51128:	98a2703a 	and	r17,r19,r2
  b5112c:	009fe034 	movhi	r2,32640
  b51130:	9829883a 	mov	r20,r19
  b51134:	1440100e 	bge	r2,r17,b51178 <__ieee754_powf+0x9c>
  b51138:	008fe034 	movhi	r2,16256
  b5113c:	88803d26 	beq	r17,r2,b51234 <__ieee754_powf+0x158>
  b51140:	01002db4 	movhi	r4,182
  b51144:	21045804 	addi	r4,r4,4448
  b51148:	dfc00f17 	ldw	ra,60(sp)
  b5114c:	df000e17 	ldw	fp,56(sp)
  b51150:	ddc00d17 	ldw	r23,52(sp)
  b51154:	dd800c17 	ldw	r22,48(sp)
  b51158:	dd400b17 	ldw	r21,44(sp)
  b5115c:	dd000a17 	ldw	r20,40(sp)
  b51160:	dcc00917 	ldw	r19,36(sp)
  b51164:	dc800817 	ldw	r18,32(sp)
  b51168:	dc400717 	ldw	r17,28(sp)
  b5116c:	dc000617 	ldw	r16,24(sp)
  b51170:	dec01004 	addi	sp,sp,64
  b51174:	0b51fb81 	jmpi	b51fb8 <nanf>
  b51178:	143fef16 	blt	r2,r16,b51138 <__ieee754_powf+0x5c>
  b5117c:	982a403a 	cmpge	r21,r19,zero
  b51180:	a8004526 	beq	r21,zero,b51298 <__ieee754_powf+0x1bc>
  b51184:	002f883a 	mov	r23,zero
  b51188:	009fe034 	movhi	r2,32640
  b5118c:	80803926 	beq	r16,r2,b51274 <__ieee754_powf+0x198>
  b51190:	008fe034 	movhi	r2,16256
  b51194:	80803d26 	beq	r16,r2,b5128c <__ieee754_powf+0x1b0>
  b51198:	00900034 	movhi	r2,16384
  b5119c:	20805326 	beq	r4,r2,b512ec <__ieee754_powf+0x210>
  b511a0:	008fc034 	movhi	r2,16128
  b511a4:	20802526 	beq	r4,r2,b5123c <__ieee754_powf+0x160>
  b511a8:	9809883a 	mov	r4,r19
  b511ac:	0b51f740 	call	b51f74 <fabsf>
  b511b0:	1009883a 	mov	r4,r2
  b511b4:	009fe034 	movhi	r2,32640
  b511b8:	88803c26 	beq	r17,r2,b512ac <__ieee754_powf+0x1d0>
  b511bc:	88003b26 	beq	r17,zero,b512ac <__ieee754_powf+0x1d0>
  b511c0:	014fe034 	movhi	r5,16256
  b511c4:	89403926 	beq	r17,r5,b512ac <__ieee754_powf+0x1d0>
  b511c8:	a004d7fa 	srli	r2,r20,31
  b511cc:	10bfffc4 	addi	r2,r2,-1
  b511d0:	15c6b03a 	or	r3,r2,r23
  b511d4:	d8800215 	stw	r2,8(sp)
  b511d8:	1800661e 	bne	r3,zero,b51374 <__ieee754_powf+0x298>
  b511dc:	980b883a 	mov	r5,r19
  b511e0:	9809883a 	mov	r4,r19
  b511e4:	0b523080 	call	b52308 <__subsf3>
  b511e8:	1009883a 	mov	r4,r2
  b511ec:	100b883a 	mov	r5,r2
  b511f0:	0b525bc0 	call	b525bc <__divsf3>
  b511f4:	1039883a 	mov	fp,r2
  b511f8:	00000106 	br	b51200 <__ieee754_powf+0x124>
  b511fc:	070fe034 	movhi	fp,16256
  b51200:	e005883a 	mov	r2,fp
  b51204:	dfc00f17 	ldw	ra,60(sp)
  b51208:	df000e17 	ldw	fp,56(sp)
  b5120c:	ddc00d17 	ldw	r23,52(sp)
  b51210:	dd800c17 	ldw	r22,48(sp)
  b51214:	dd400b17 	ldw	r21,44(sp)
  b51218:	dd000a17 	ldw	r20,40(sp)
  b5121c:	dcc00917 	ldw	r19,36(sp)
  b51220:	dc800817 	ldw	r18,32(sp)
  b51224:	dc400717 	ldw	r17,28(sp)
  b51228:	dc000617 	ldw	r16,24(sp)
  b5122c:	dec01004 	addi	sp,sp,64
  b51230:	f800283a 	ret
  b51234:	8839883a 	mov	fp,r17
  b51238:	003ff106 	br	b51200 <__ieee754_powf+0x124>
  b5123c:	a03fda16 	blt	r20,zero,b511a8 <__ieee754_powf+0xcc>
  b51240:	9809883a 	mov	r4,r19
  b51244:	dfc00f17 	ldw	ra,60(sp)
  b51248:	df000e17 	ldw	fp,56(sp)
  b5124c:	ddc00d17 	ldw	r23,52(sp)
  b51250:	dd800c17 	ldw	r22,48(sp)
  b51254:	dd400b17 	ldw	r21,44(sp)
  b51258:	dd000a17 	ldw	r20,40(sp)
  b5125c:	dcc00917 	ldw	r19,36(sp)
  b51260:	dc800817 	ldw	r18,32(sp)
  b51264:	dc400717 	ldw	r17,28(sp)
  b51268:	dc000617 	ldw	r16,24(sp)
  b5126c:	dec01004 	addi	sp,sp,64
  b51270:	0b51bf01 	jmpi	b51bf0 <__ieee754_sqrtf>
  b51274:	008fe034 	movhi	r2,16256
  b51278:	88bfee26 	beq	r17,r2,b51234 <__ieee754_powf+0x158>
  b5127c:	1440200e 	bge	r2,r17,b51300 <__ieee754_powf+0x224>
  b51280:	903fdf0e 	bge	r18,zero,b51200 <__ieee754_powf+0x124>
  b51284:	0039883a 	mov	fp,zero
  b51288:	003fdd06 	br	b51200 <__ieee754_powf+0x124>
  b5128c:	90002f16 	blt	r18,zero,b5134c <__ieee754_powf+0x270>
  b51290:	9839883a 	mov	fp,r19
  b51294:	003fda06 	br	b51200 <__ieee754_powf+0x124>
  b51298:	0092e034 	movhi	r2,19328
  b5129c:	10bfffc4 	addi	r2,r2,-1
  b512a0:	14001b0e 	bge	r2,r16,b51310 <__ieee754_powf+0x234>
  b512a4:	05c00084 	movi	r23,2
  b512a8:	003fb706 	br	b51188 <__ieee754_powf+0xac>
  b512ac:	90000916 	blt	r18,zero,b512d4 <__ieee754_powf+0x1f8>
  b512b0:	a8000226 	beq	r21,zero,b512bc <__ieee754_powf+0x1e0>
  b512b4:	2039883a 	mov	fp,r4
  b512b8:	003fd106 	br	b51200 <__ieee754_powf+0x124>
  b512bc:	00b02034 	movhi	r2,49280
  b512c0:	8885883a 	add	r2,r17,r2
  b512c4:	b884b03a 	or	r2,r23,r2
  b512c8:	1000251e 	bne	r2,zero,b51360 <__ieee754_powf+0x284>
  b512cc:	200b883a 	mov	r5,r4
  b512d0:	003fc406 	br	b511e4 <__ieee754_powf+0x108>
  b512d4:	200b883a 	mov	r5,r4
  b512d8:	010fe034 	movhi	r4,16256
  b512dc:	0b525bc0 	call	b525bc <__divsf3>
  b512e0:	1009883a 	mov	r4,r2
  b512e4:	a83ff31e 	bne	r21,zero,b512b4 <__ieee754_powf+0x1d8>
  b512e8:	003ff406 	br	b512bc <__ieee754_powf+0x1e0>
  b512ec:	980b883a 	mov	r5,r19
  b512f0:	9809883a 	mov	r4,r19
  b512f4:	0b523dc0 	call	b523dc <__mulsf3>
  b512f8:	1039883a 	mov	fp,r2
  b512fc:	003fc006 	br	b51200 <__ieee754_powf+0x124>
  b51300:	903fe00e 	bge	r18,zero,b51284 <__ieee754_powf+0x1a8>
  b51304:	e0a0003c 	xorhi	r2,fp,32768
  b51308:	1039883a 	mov	fp,r2
  b5130c:	003fbc06 	br	b51200 <__ieee754_powf+0x124>
  b51310:	008fe034 	movhi	r2,16256
  b51314:	10bfffc4 	addi	r2,r2,-1
  b51318:	1400060e 	bge	r2,r16,b51334 <__ieee754_powf+0x258>
  b5131c:	8007d5fa 	srai	r3,r16,23
  b51320:	00802584 	movi	r2,150
  b51324:	10c5c83a 	sub	r2,r2,r3
  b51328:	8087d83a 	sra	r3,r16,r2
  b5132c:	1884983a 	sll	r2,r3,r2
  b51330:	80800226 	beq	r16,r2,b5133c <__ieee754_powf+0x260>
  b51334:	002f883a 	mov	r23,zero
  b51338:	003f9506 	br	b51190 <__ieee754_powf+0xb4>
  b5133c:	18c0004c 	andi	r3,r3,1
  b51340:	00800084 	movi	r2,2
  b51344:	10efc83a 	sub	r23,r2,r3
  b51348:	003f9106 	br	b51190 <__ieee754_powf+0xb4>
  b5134c:	8009883a 	mov	r4,r16
  b51350:	980b883a 	mov	r5,r19
  b51354:	0b525bc0 	call	b525bc <__divsf3>
  b51358:	1039883a 	mov	fp,r2
  b5135c:	003fa806 	br	b51200 <__ieee754_powf+0x124>
  b51360:	00800044 	movi	r2,1
  b51364:	b8bfd31e 	bne	r23,r2,b512b4 <__ieee754_powf+0x1d8>
  b51368:	20a0003c 	xorhi	r2,r4,32768
  b5136c:	1039883a 	mov	fp,r2
  b51370:	003fa306 	br	b51200 <__ieee754_powf+0x124>
  b51374:	00934034 	movhi	r2,19712
  b51378:	14000a0e 	bge	r2,r16,b513a4 <__ieee754_powf+0x2c8>
  b5137c:	008fe034 	movhi	r2,16256
  b51380:	10bffdc4 	addi	r2,r2,-9
  b51384:	1441b016 	blt	r2,r17,b51a48 <__ieee754_powf+0x96c>
  b51388:	903fbe0e 	bge	r18,zero,b51284 <__ieee754_powf+0x1a8>
  b5138c:	011c52b4 	movhi	r4,29002
  b51390:	213cb284 	addi	r4,r4,-3382
  b51394:	200b883a 	mov	r5,r4
  b51398:	0b523dc0 	call	b523dc <__mulsf3>
  b5139c:	1039883a 	mov	fp,r2
  b513a0:	003f9706 	br	b51200 <__ieee754_powf+0x124>
  b513a4:	00802034 	movhi	r2,128
  b513a8:	10bfffc4 	addi	r2,r2,-1
  b513ac:	1441a10e 	bge	r2,r17,b51a34 <__ieee754_powf+0x958>
  b513b0:	0009883a 	mov	r4,zero
  b513b4:	8805d5fa 	srai	r2,r17,23
  b513b8:	00c02034 	movhi	r3,128
  b513bc:	18ffffc4 	addi	r3,r3,-1
  b513c0:	88c6703a 	and	r3,r17,r3
  b513c4:	2089883a 	add	r4,r4,r2
  b513c8:	20bfe044 	addi	r2,r4,-127
  b513cc:	d8800015 	stw	r2,0(sp)
  b513d0:	00800774 	movhi	r2,29
  b513d4:	10b11c44 	addi	r2,r2,-15247
  b513d8:	1c0fe034 	orhi	r16,r3,16256
  b513dc:	10c1790e 	bge	r2,r3,b519c4 <__ieee754_powf+0x8e8>
  b513e0:	008017b4 	movhi	r2,94
  b513e4:	10acf584 	addi	r2,r2,-19498
  b513e8:	10c17216 	blt	r2,r3,b519b4 <__ieee754_powf+0x8d8>
  b513ec:	00800934 	movhi	r2,36
  b513f0:	05000044 	movi	r20,1
  b513f4:	d8800115 	stw	r2,4(sp)
  b513f8:	a529883a 	add	r20,r20,r20
  b513fc:	a529883a 	add	r20,r20,r20
  b51400:	d0a00104 	addi	r2,gp,-32764
  b51404:	a085883a 	add	r2,r20,r2
  b51408:	14800017 	ldw	r18,0(r2)
  b5140c:	8009883a 	mov	r4,r16
  b51410:	8023d07a 	srai	r17,r16,1
  b51414:	900b883a 	mov	r5,r18
  b51418:	0b523080 	call	b52308 <__subsf3>
  b5141c:	8009883a 	mov	r4,r16
  b51420:	900b883a 	mov	r5,r18
  b51424:	1027883a 	mov	r19,r2
  b51428:	0b523780 	call	b52378 <__addsf3>
  b5142c:	100b883a 	mov	r5,r2
  b51430:	010fe034 	movhi	r4,16256
  b51434:	0b525bc0 	call	b525bc <__divsf3>
  b51438:	100b883a 	mov	r5,r2
  b5143c:	9809883a 	mov	r4,r19
  b51440:	102b883a 	mov	r21,r2
  b51444:	0b523dc0 	call	b523dc <__mulsf3>
  b51448:	d8800315 	stw	r2,12(sp)
  b5144c:	d8c00317 	ldw	r3,12(sp)
  b51450:	00bc0004 	movi	r2,-4096
  b51454:	8c480034 	orhi	r17,r17,8192
  b51458:	10ec703a 	and	r22,r2,r3
  b5145c:	d8800117 	ldw	r2,4(sp)
  b51460:	b009883a 	mov	r4,r22
  b51464:	88a3883a 	add	r17,r17,r2
  b51468:	880b883a 	mov	r5,r17
  b5146c:	0b523dc0 	call	b523dc <__mulsf3>
  b51470:	100b883a 	mov	r5,r2
  b51474:	9809883a 	mov	r4,r19
  b51478:	0b523080 	call	b52308 <__subsf3>
  b5147c:	8809883a 	mov	r4,r17
  b51480:	900b883a 	mov	r5,r18
  b51484:	1027883a 	mov	r19,r2
  b51488:	0b523080 	call	b52308 <__subsf3>
  b5148c:	100b883a 	mov	r5,r2
  b51490:	8009883a 	mov	r4,r16
  b51494:	0b523080 	call	b52308 <__subsf3>
  b51498:	100b883a 	mov	r5,r2
  b5149c:	b009883a 	mov	r4,r22
  b514a0:	0b523dc0 	call	b523dc <__mulsf3>
  b514a4:	100b883a 	mov	r5,r2
  b514a8:	9809883a 	mov	r4,r19
  b514ac:	0b523080 	call	b52308 <__subsf3>
  b514b0:	100b883a 	mov	r5,r2
  b514b4:	a809883a 	mov	r4,r21
  b514b8:	0b523dc0 	call	b523dc <__mulsf3>
  b514bc:	d9000317 	ldw	r4,12(sp)
  b514c0:	d8800415 	stw	r2,16(sp)
  b514c4:	05501034 	movhi	r21,16448
  b514c8:	200b883a 	mov	r5,r4
  b514cc:	0b523dc0 	call	b523dc <__mulsf3>
  b514d0:	1021883a 	mov	r16,r2
  b514d4:	1009883a 	mov	r4,r2
  b514d8:	100b883a 	mov	r5,r2
  b514dc:	0b523dc0 	call	b523dc <__mulsf3>
  b514e0:	8009883a 	mov	r4,r16
  b514e4:	014f9534 	movhi	r5,15956
  b514e8:	297c5084 	addi	r5,r5,-3774
  b514ec:	1023883a 	mov	r17,r2
  b514f0:	0b523dc0 	call	b523dc <__mulsf3>
  b514f4:	1009883a 	mov	r4,r2
  b514f8:	014f9b34 	movhi	r5,15980
  b514fc:	294c9544 	addi	r5,r5,12885
  b51500:	0b523780 	call	b52378 <__addsf3>
  b51504:	100b883a 	mov	r5,r2
  b51508:	8009883a 	mov	r4,r16
  b5150c:	0b523dc0 	call	b523dc <__mulsf3>
  b51510:	1009883a 	mov	r4,r2
  b51514:	014fa334 	movhi	r5,16012
  b51518:	2968c144 	addi	r5,r5,-23803
  b5151c:	0b523780 	call	b52378 <__addsf3>
  b51520:	100b883a 	mov	r5,r2
  b51524:	8009883a 	mov	r4,r16
  b51528:	0b523dc0 	call	b523dc <__mulsf3>
  b5152c:	1009883a 	mov	r4,r2
  b51530:	014faaf4 	movhi	r5,16043
  b51534:	296aaac4 	addi	r5,r5,-21845
  b51538:	0b523780 	call	b52378 <__addsf3>
  b5153c:	100b883a 	mov	r5,r2
  b51540:	8009883a 	mov	r4,r16
  b51544:	0b523dc0 	call	b523dc <__mulsf3>
  b51548:	1009883a 	mov	r4,r2
  b5154c:	014fb6f4 	movhi	r5,16091
  b51550:	295b6dc4 	addi	r5,r5,28087
  b51554:	0b523780 	call	b52378 <__addsf3>
  b51558:	100b883a 	mov	r5,r2
  b5155c:	8009883a 	mov	r4,r16
  b51560:	0b523dc0 	call	b523dc <__mulsf3>
  b51564:	1009883a 	mov	r4,r2
  b51568:	014fc6b4 	movhi	r5,16154
  b5156c:	29666684 	addi	r5,r5,-26214
  b51570:	0b523780 	call	b52378 <__addsf3>
  b51574:	100b883a 	mov	r5,r2
  b51578:	8809883a 	mov	r4,r17
  b5157c:	0b523dc0 	call	b523dc <__mulsf3>
  b51580:	d9000317 	ldw	r4,12(sp)
  b51584:	b00b883a 	mov	r5,r22
  b51588:	1021883a 	mov	r16,r2
  b5158c:	0b523780 	call	b52378 <__addsf3>
  b51590:	d9000417 	ldw	r4,16(sp)
  b51594:	100b883a 	mov	r5,r2
  b51598:	0b523dc0 	call	b523dc <__mulsf3>
  b5159c:	100b883a 	mov	r5,r2
  b515a0:	8009883a 	mov	r4,r16
  b515a4:	0b523780 	call	b52378 <__addsf3>
  b515a8:	b009883a 	mov	r4,r22
  b515ac:	b00b883a 	mov	r5,r22
  b515b0:	1025883a 	mov	r18,r2
  b515b4:	0b523dc0 	call	b523dc <__mulsf3>
  b515b8:	1009883a 	mov	r4,r2
  b515bc:	a80b883a 	mov	r5,r21
  b515c0:	1027883a 	mov	r19,r2
  b515c4:	0b523780 	call	b52378 <__addsf3>
  b515c8:	100b883a 	mov	r5,r2
  b515cc:	9009883a 	mov	r4,r18
  b515d0:	0b523780 	call	b52378 <__addsf3>
  b515d4:	00fc0004 	movi	r3,-4096
  b515d8:	10e2703a 	and	r17,r2,r3
  b515dc:	880b883a 	mov	r5,r17
  b515e0:	b009883a 	mov	r4,r22
  b515e4:	0b523dc0 	call	b523dc <__mulsf3>
  b515e8:	d9000417 	ldw	r4,16(sp)
  b515ec:	880b883a 	mov	r5,r17
  b515f0:	d8800515 	stw	r2,20(sp)
  b515f4:	0b523dc0 	call	b523dc <__mulsf3>
  b515f8:	8809883a 	mov	r4,r17
  b515fc:	a80b883a 	mov	r5,r21
  b51600:	1021883a 	mov	r16,r2
  b51604:	0b523080 	call	b52308 <__subsf3>
  b51608:	1009883a 	mov	r4,r2
  b5160c:	980b883a 	mov	r5,r19
  b51610:	0b523080 	call	b52308 <__subsf3>
  b51614:	100b883a 	mov	r5,r2
  b51618:	9009883a 	mov	r4,r18
  b5161c:	0b523080 	call	b52308 <__subsf3>
  b51620:	d9000317 	ldw	r4,12(sp)
  b51624:	100b883a 	mov	r5,r2
  b51628:	0b523dc0 	call	b523dc <__mulsf3>
  b5162c:	100b883a 	mov	r5,r2
  b51630:	8009883a 	mov	r4,r16
  b51634:	0b523780 	call	b52378 <__addsf3>
  b51638:	d9000517 	ldw	r4,20(sp)
  b5163c:	100b883a 	mov	r5,r2
  b51640:	1027883a 	mov	r19,r2
  b51644:	0b523780 	call	b52378 <__addsf3>
  b51648:	00fc0004 	movi	r3,-4096
  b5164c:	10e2703a 	and	r17,r2,r3
  b51650:	8809883a 	mov	r4,r17
  b51654:	014fddb4 	movhi	r5,16246
  b51658:	294e0004 	addi	r5,r5,14336
  b5165c:	0b523dc0 	call	b523dc <__mulsf3>
  b51660:	8809883a 	mov	r4,r17
  b51664:	014da7b4 	movhi	r5,13982
  b51668:	2970e804 	addi	r5,r5,-15456
  b5166c:	102b883a 	mov	r21,r2
  b51670:	0b523dc0 	call	b523dc <__mulsf3>
  b51674:	d9400517 	ldw	r5,20(sp)
  b51678:	8809883a 	mov	r4,r17
  b5167c:	1025883a 	mov	r18,r2
  b51680:	0b523080 	call	b52308 <__subsf3>
  b51684:	100b883a 	mov	r5,r2
  b51688:	9809883a 	mov	r4,r19
  b5168c:	0b523080 	call	b52308 <__subsf3>
  b51690:	1009883a 	mov	r4,r2
  b51694:	014fddb4 	movhi	r5,16246
  b51698:	294e13c4 	addi	r5,r5,14415
  b5169c:	0b523dc0 	call	b523dc <__mulsf3>
  b516a0:	100b883a 	mov	r5,r2
  b516a4:	9009883a 	mov	r4,r18
  b516a8:	0b523780 	call	b52378 <__addsf3>
  b516ac:	d0e00304 	addi	r3,gp,-32756
  b516b0:	a0c7883a 	add	r3,r20,r3
  b516b4:	19400017 	ldw	r5,0(r3)
  b516b8:	1009883a 	mov	r4,r2
  b516bc:	0b523780 	call	b52378 <__addsf3>
  b516c0:	d9000017 	ldw	r4,0(sp)
  b516c4:	1023883a 	mov	r17,r2
  b516c8:	0b529100 	call	b52910 <__floatsisf>
  b516cc:	1021883a 	mov	r16,r2
  b516d0:	d0a00504 	addi	r2,gp,-32748
  b516d4:	a0a9883a 	add	r20,r20,r2
  b516d8:	a4800017 	ldw	r18,0(r20)
  b516dc:	a809883a 	mov	r4,r21
  b516e0:	880b883a 	mov	r5,r17
  b516e4:	0b523780 	call	b52378 <__addsf3>
  b516e8:	1009883a 	mov	r4,r2
  b516ec:	900b883a 	mov	r5,r18
  b516f0:	0b523780 	call	b52378 <__addsf3>
  b516f4:	100b883a 	mov	r5,r2
  b516f8:	8009883a 	mov	r4,r16
  b516fc:	0b523780 	call	b52378 <__addsf3>
  b51700:	00fc0004 	movi	r3,-4096
  b51704:	10c4703a 	and	r2,r2,r3
  b51708:	800b883a 	mov	r5,r16
  b5170c:	1009883a 	mov	r4,r2
  b51710:	1027883a 	mov	r19,r2
  b51714:	0b523080 	call	b52308 <__subsf3>
  b51718:	1009883a 	mov	r4,r2
  b5171c:	900b883a 	mov	r5,r18
  b51720:	0b523080 	call	b52308 <__subsf3>
  b51724:	1009883a 	mov	r4,r2
  b51728:	a80b883a 	mov	r5,r21
  b5172c:	0b523080 	call	b52308 <__subsf3>
  b51730:	100b883a 	mov	r5,r2
  b51734:	8809883a 	mov	r4,r17
  b51738:	0b523080 	call	b52308 <__subsf3>
  b5173c:	1021883a 	mov	r16,r2
  b51740:	d8c00217 	ldw	r3,8(sp)
  b51744:	b8bfffc4 	addi	r2,r23,-1
  b51748:	1884b03a 	or	r2,r3,r2
  b5174c:	1000a11e 	bne	r2,zero,b519d4 <__ieee754_powf+0x8f8>
  b51750:	05efe034 	movhi	r23,49024
  b51754:	047c0004 	movi	r17,-4096
  b51758:	8f22703a 	and	r17,r17,fp
  b5175c:	e009883a 	mov	r4,fp
  b51760:	880b883a 	mov	r5,r17
  b51764:	0b523080 	call	b52308 <__subsf3>
  b51768:	100b883a 	mov	r5,r2
  b5176c:	9809883a 	mov	r4,r19
  b51770:	0b523dc0 	call	b523dc <__mulsf3>
  b51774:	8009883a 	mov	r4,r16
  b51778:	e00b883a 	mov	r5,fp
  b5177c:	1025883a 	mov	r18,r2
  b51780:	0b523dc0 	call	b523dc <__mulsf3>
  b51784:	100b883a 	mov	r5,r2
  b51788:	9009883a 	mov	r4,r18
  b5178c:	0b523780 	call	b52378 <__addsf3>
  b51790:	9809883a 	mov	r4,r19
  b51794:	880b883a 	mov	r5,r17
  b51798:	1021883a 	mov	r16,r2
  b5179c:	0b523dc0 	call	b523dc <__mulsf3>
  b517a0:	100b883a 	mov	r5,r2
  b517a4:	8009883a 	mov	r4,r16
  b517a8:	1027883a 	mov	r19,r2
  b517ac:	0b523780 	call	b52378 <__addsf3>
  b517b0:	1023883a 	mov	r17,r2
  b517b4:	1029883a 	mov	r20,r2
  b517b8:	00a00034 	movhi	r2,32768
  b517bc:	10bfffc4 	addi	r2,r2,-1
  b517c0:	88a4703a 	and	r18,r17,r2
  b517c4:	8039883a 	mov	fp,r16
  b517c8:	982b883a 	mov	r21,r19
  b517cc:	8807883a 	mov	r3,r17
  b517d0:	0440a30e 	bge	zero,r17,b51a60 <__ieee754_powf+0x984>
  b517d4:	0090c034 	movhi	r2,17152
  b517d8:	14808c16 	blt	r2,r18,b51a0c <__ieee754_powf+0x930>
  b517dc:	90807f26 	beq	r18,r2,b519dc <__ieee754_powf+0x900>
  b517e0:	008fc034 	movhi	r2,16128
  b517e4:	1480a816 	blt	r2,r18,b51a88 <__ieee754_powf+0x9ac>
  b517e8:	002d883a 	mov	r22,zero
  b517ec:	0029883a 	mov	r20,zero
  b517f0:	047c0004 	movi	r17,-4096
  b517f4:	88e2703a 	and	r17,r17,r3
  b517f8:	8809883a 	mov	r4,r17
  b517fc:	014fcc74 	movhi	r5,16177
  b51800:	295c8004 	addi	r5,r5,29184
  b51804:	0b523dc0 	call	b523dc <__mulsf3>
  b51808:	8809883a 	mov	r4,r17
  b5180c:	a80b883a 	mov	r5,r21
  b51810:	1027883a 	mov	r19,r2
  b51814:	0b523080 	call	b52308 <__subsf3>
  b51818:	100b883a 	mov	r5,r2
  b5181c:	e009883a 	mov	r4,fp
  b51820:	0b523080 	call	b52308 <__subsf3>
  b51824:	1009883a 	mov	r4,r2
  b51828:	014fcc74 	movhi	r5,16177
  b5182c:	295c8604 	addi	r5,r5,29208
  b51830:	0b523dc0 	call	b523dc <__mulsf3>
  b51834:	8809883a 	mov	r4,r17
  b51838:	014d7034 	movhi	r5,13760
  b5183c:	296fa304 	addi	r5,r5,-16756
  b51840:	1025883a 	mov	r18,r2
  b51844:	0b523dc0 	call	b523dc <__mulsf3>
  b51848:	100b883a 	mov	r5,r2
  b5184c:	9009883a 	mov	r4,r18
  b51850:	0b523780 	call	b52378 <__addsf3>
  b51854:	100b883a 	mov	r5,r2
  b51858:	9809883a 	mov	r4,r19
  b5185c:	1021883a 	mov	r16,r2
  b51860:	0b523780 	call	b52378 <__addsf3>
  b51864:	1009883a 	mov	r4,r2
  b51868:	980b883a 	mov	r5,r19
  b5186c:	1025883a 	mov	r18,r2
  b51870:	0b523080 	call	b52308 <__subsf3>
  b51874:	100b883a 	mov	r5,r2
  b51878:	8009883a 	mov	r4,r16
  b5187c:	0b523080 	call	b52308 <__subsf3>
  b51880:	9009883a 	mov	r4,r18
  b51884:	900b883a 	mov	r5,r18
  b51888:	1027883a 	mov	r19,r2
  b5188c:	0b523dc0 	call	b523dc <__mulsf3>
  b51890:	1009883a 	mov	r4,r2
  b51894:	014cccb4 	movhi	r5,13106
  b51898:	296ed304 	addi	r5,r5,-17588
  b5189c:	1021883a 	mov	r16,r2
  b518a0:	0b523dc0 	call	b523dc <__mulsf3>
  b518a4:	1009883a 	mov	r4,r2
  b518a8:	014d77b4 	movhi	r5,13790
  b518ac:	297a8384 	addi	r5,r5,-5618
  b518b0:	0b523080 	call	b52308 <__subsf3>
  b518b4:	100b883a 	mov	r5,r2
  b518b8:	8009883a 	mov	r4,r16
  b518bc:	0b523dc0 	call	b523dc <__mulsf3>
  b518c0:	1009883a 	mov	r4,r2
  b518c4:	014e22f4 	movhi	r5,14475
  b518c8:	296cd544 	addi	r5,r5,-19627
  b518cc:	0b523780 	call	b52378 <__addsf3>
  b518d0:	100b883a 	mov	r5,r2
  b518d4:	8009883a 	mov	r4,r16
  b518d8:	0b523dc0 	call	b523dc <__mulsf3>
  b518dc:	1009883a 	mov	r4,r2
  b518e0:	014ecdb4 	movhi	r5,15158
  b518e4:	2942d844 	addi	r5,r5,2913
  b518e8:	0b523080 	call	b52308 <__subsf3>
  b518ec:	100b883a 	mov	r5,r2
  b518f0:	8009883a 	mov	r4,r16
  b518f4:	0b523dc0 	call	b523dc <__mulsf3>
  b518f8:	1009883a 	mov	r4,r2
  b518fc:	014f8af4 	movhi	r5,15915
  b51900:	296aaac4 	addi	r5,r5,-21845
  b51904:	0b523780 	call	b52378 <__addsf3>
  b51908:	100b883a 	mov	r5,r2
  b5190c:	8009883a 	mov	r4,r16
  b51910:	0b523dc0 	call	b523dc <__mulsf3>
  b51914:	100b883a 	mov	r5,r2
  b51918:	9009883a 	mov	r4,r18
  b5191c:	0b523080 	call	b52308 <__subsf3>
  b51920:	1021883a 	mov	r16,r2
  b51924:	9009883a 	mov	r4,r18
  b51928:	100b883a 	mov	r5,r2
  b5192c:	0b523dc0 	call	b523dc <__mulsf3>
  b51930:	8009883a 	mov	r4,r16
  b51934:	01500034 	movhi	r5,16384
  b51938:	1023883a 	mov	r17,r2
  b5193c:	0b523080 	call	b52308 <__subsf3>
  b51940:	100b883a 	mov	r5,r2
  b51944:	8809883a 	mov	r4,r17
  b51948:	0b525bc0 	call	b525bc <__divsf3>
  b5194c:	9009883a 	mov	r4,r18
  b51950:	980b883a 	mov	r5,r19
  b51954:	1021883a 	mov	r16,r2
  b51958:	0b523dc0 	call	b523dc <__mulsf3>
  b5195c:	100b883a 	mov	r5,r2
  b51960:	9809883a 	mov	r4,r19
  b51964:	0b523780 	call	b52378 <__addsf3>
  b51968:	100b883a 	mov	r5,r2
  b5196c:	8009883a 	mov	r4,r16
  b51970:	0b523080 	call	b52308 <__subsf3>
  b51974:	1009883a 	mov	r4,r2
  b51978:	900b883a 	mov	r5,r18
  b5197c:	0b523080 	call	b52308 <__subsf3>
  b51980:	100b883a 	mov	r5,r2
  b51984:	010fe034 	movhi	r4,16256
  b51988:	0b523080 	call	b52308 <__subsf3>
  b5198c:	a087883a 	add	r3,r20,r2
  b51990:	1009883a 	mov	r4,r2
  b51994:	1805d5fa 	srai	r2,r3,23
  b51998:	0080920e 	bge	zero,r2,b51be4 <__ieee754_powf+0xb08>
  b5199c:	1805883a 	mov	r2,r3
  b519a0:	1009883a 	mov	r4,r2
  b519a4:	b80b883a 	mov	r5,r23
  b519a8:	0b523dc0 	call	b523dc <__mulsf3>
  b519ac:	1039883a 	mov	fp,r2
  b519b0:	003e1306 	br	b51200 <__ieee754_powf+0x124>
  b519b4:	00bfe034 	movhi	r2,65408
  b519b8:	213fe084 	addi	r4,r4,-126
  b519bc:	80a1883a 	add	r16,r16,r2
  b519c0:	d9000015 	stw	r4,0(sp)
  b519c4:	00c00134 	movhi	r3,4
  b519c8:	0029883a 	mov	r20,zero
  b519cc:	d8c00115 	stw	r3,4(sp)
  b519d0:	003e8906 	br	b513f8 <__ieee754_powf+0x31c>
  b519d4:	05cfe034 	movhi	r23,16256
  b519d8:	003f5e06 	br	b51754 <__ieee754_powf+0x678>
  b519dc:	8009883a 	mov	r4,r16
  b519e0:	014cce74 	movhi	r5,13113
  b519e4:	296a8f04 	addi	r5,r5,-21956
  b519e8:	0b523780 	call	b52378 <__addsf3>
  b519ec:	8809883a 	mov	r4,r17
  b519f0:	980b883a 	mov	r5,r19
  b519f4:	1021883a 	mov	r16,r2
  b519f8:	0b523080 	call	b52308 <__subsf3>
  b519fc:	100b883a 	mov	r5,r2
  b51a00:	8009883a 	mov	r4,r16
  b51a04:	0b527a80 	call	b527a8 <__gtsf2>
  b51a08:	00801f0e 	bge	zero,r2,b51a88 <__ieee754_powf+0x9ac>
  b51a0c:	041c52b4 	movhi	r16,29002
  b51a10:	843cb284 	addi	r16,r16,-3382
  b51a14:	b809883a 	mov	r4,r23
  b51a18:	800b883a 	mov	r5,r16
  b51a1c:	0b523dc0 	call	b523dc <__mulsf3>
  b51a20:	1009883a 	mov	r4,r2
  b51a24:	800b883a 	mov	r5,r16
  b51a28:	0b523dc0 	call	b523dc <__mulsf3>
  b51a2c:	1039883a 	mov	fp,r2
  b51a30:	003df306 	br	b51200 <__ieee754_powf+0x124>
  b51a34:	0152e034 	movhi	r5,19328
  b51a38:	0b523dc0 	call	b523dc <__mulsf3>
  b51a3c:	1023883a 	mov	r17,r2
  b51a40:	013ffa04 	movi	r4,-24
  b51a44:	003e5b06 	br	b513b4 <__ieee754_powf+0x2d8>
  b51a48:	008fe034 	movhi	r2,16256
  b51a4c:	108001c4 	addi	r2,r2,7
  b51a50:	14402c0e 	bge	r2,r17,b51b04 <__ieee754_powf+0xa28>
  b51a54:	04be4d16 	blt	zero,r18,b5138c <__ieee754_powf+0x2b0>
  b51a58:	0039883a 	mov	fp,zero
  b51a5c:	003de806 	br	b51200 <__ieee754_powf+0x124>
  b51a60:	0090c5b4 	movhi	r2,17174
  b51a64:	14802416 	blt	r2,r18,b51af8 <__ieee754_powf+0xa1c>
  b51a68:	90bf5d1e 	bne	r18,r2,b517e0 <__ieee754_powf+0x704>
  b51a6c:	8809883a 	mov	r4,r17
  b51a70:	980b883a 	mov	r5,r19
  b51a74:	0b523080 	call	b52308 <__subsf3>
  b51a78:	100b883a 	mov	r5,r2
  b51a7c:	8009883a 	mov	r4,r16
  b51a80:	0b528980 	call	b52898 <__lesf2>
  b51a84:	00801c0e 	bge	zero,r2,b51af8 <__ieee754_powf+0xa1c>
  b51a88:	9005d5fa 	srai	r2,r18,23
  b51a8c:	01002034 	movhi	r4,128
  b51a90:	01402034 	movhi	r5,128
  b51a94:	297fffc4 	addi	r5,r5,-1
  b51a98:	10bfe084 	addi	r2,r2,-126
  b51a9c:	2089d83a 	sra	r4,r4,r2
  b51aa0:	008005c4 	movi	r2,23
  b51aa4:	a109883a 	add	r4,r20,r4
  b51aa8:	2006d5fa 	srli	r3,r4,23
  b51aac:	214c703a 	and	r6,r4,r5
  b51ab0:	31802034 	orhi	r6,r6,128
  b51ab4:	18c03fcc 	andi	r3,r3,255
  b51ab8:	18ffe044 	addi	r3,r3,-127
  b51abc:	28cbd83a 	sra	r5,r5,r3
  b51ac0:	10c5c83a 	sub	r2,r2,r3
  b51ac4:	30add83a 	sra	r22,r6,r2
  b51ac8:	014a303a 	nor	r5,zero,r5
  b51acc:	214a703a 	and	r5,r4,r5
  b51ad0:	a0004216 	blt	r20,zero,b51bdc <__ieee754_powf+0xb00>
  b51ad4:	a809883a 	mov	r4,r21
  b51ad8:	0b523080 	call	b52308 <__subsf3>
  b51adc:	100b883a 	mov	r5,r2
  b51ae0:	e009883a 	mov	r4,fp
  b51ae4:	b02895fa 	slli	r20,r22,23
  b51ae8:	102b883a 	mov	r21,r2
  b51aec:	0b523780 	call	b52378 <__addsf3>
  b51af0:	1007883a 	mov	r3,r2
  b51af4:	003f3e06 	br	b517f0 <__ieee754_powf+0x714>
  b51af8:	040368b4 	movhi	r16,3490
  b51afc:	84109804 	addi	r16,r16,16992
  b51b00:	003fc406 	br	b51a14 <__ieee754_powf+0x938>
  b51b04:	0b523080 	call	b52308 <__subsf3>
  b51b08:	1021883a 	mov	r16,r2
  b51b0c:	1009883a 	mov	r4,r2
  b51b10:	014fee74 	movhi	r5,16313
  b51b14:	296a8004 	addi	r5,r5,-22016
  b51b18:	0b523dc0 	call	b523dc <__mulsf3>
  b51b1c:	8009883a 	mov	r4,r16
  b51b20:	014dbb74 	movhi	r5,14061
  b51b24:	29695c04 	addi	r5,r5,-23184
  b51b28:	1023883a 	mov	r17,r2
  b51b2c:	0b523dc0 	call	b523dc <__mulsf3>
  b51b30:	8009883a 	mov	r4,r16
  b51b34:	800b883a 	mov	r5,r16
  b51b38:	1025883a 	mov	r18,r2
  b51b3c:	0b523dc0 	call	b523dc <__mulsf3>
  b51b40:	8009883a 	mov	r4,r16
  b51b44:	016fa034 	movhi	r5,48768
  b51b48:	1027883a 	mov	r19,r2
  b51b4c:	0b523dc0 	call	b523dc <__mulsf3>
  b51b50:	1009883a 	mov	r4,r2
  b51b54:	014faaf4 	movhi	r5,16043
  b51b58:	296aaac4 	addi	r5,r5,-21845
  b51b5c:	0b523780 	call	b52378 <__addsf3>
  b51b60:	100b883a 	mov	r5,r2
  b51b64:	8009883a 	mov	r4,r16
  b51b68:	0b523dc0 	call	b523dc <__mulsf3>
  b51b6c:	100b883a 	mov	r5,r2
  b51b70:	010fc034 	movhi	r4,16128
  b51b74:	0b523080 	call	b52308 <__subsf3>
  b51b78:	100b883a 	mov	r5,r2
  b51b7c:	9809883a 	mov	r4,r19
  b51b80:	0b523dc0 	call	b523dc <__mulsf3>
  b51b84:	1009883a 	mov	r4,r2
  b51b88:	016fee74 	movhi	r5,49081
  b51b8c:	296a8ec4 	addi	r5,r5,-21957
  b51b90:	0b523dc0 	call	b523dc <__mulsf3>
  b51b94:	100b883a 	mov	r5,r2
  b51b98:	9009883a 	mov	r4,r18
  b51b9c:	0b523780 	call	b52378 <__addsf3>
  b51ba0:	100b883a 	mov	r5,r2
  b51ba4:	8809883a 	mov	r4,r17
  b51ba8:	1021883a 	mov	r16,r2
  b51bac:	0b523780 	call	b52378 <__addsf3>
  b51bb0:	00fc0004 	movi	r3,-4096
  b51bb4:	10c4703a 	and	r2,r2,r3
  b51bb8:	1009883a 	mov	r4,r2
  b51bbc:	880b883a 	mov	r5,r17
  b51bc0:	1027883a 	mov	r19,r2
  b51bc4:	0b523080 	call	b52308 <__subsf3>
  b51bc8:	100b883a 	mov	r5,r2
  b51bcc:	8009883a 	mov	r4,r16
  b51bd0:	0b523080 	call	b52308 <__subsf3>
  b51bd4:	1021883a 	mov	r16,r2
  b51bd8:	003ed906 	br	b51740 <__ieee754_powf+0x664>
  b51bdc:	05adc83a 	sub	r22,zero,r22
  b51be0:	003fbc06 	br	b51ad4 <__ieee754_powf+0x9f8>
  b51be4:	b00b883a 	mov	r5,r22
  b51be8:	0b51fc00 	call	b51fc0 <scalbnf>
  b51bec:	003f6c06 	br	b519a0 <__ieee754_powf+0x8c4>

00b51bf0 <__ieee754_sqrtf>:
  b51bf0:	00a00034 	movhi	r2,32768
  b51bf4:	10bfffc4 	addi	r2,r2,-1
  b51bf8:	defffe04 	addi	sp,sp,-8
  b51bfc:	208c703a 	and	r6,r4,r2
  b51c00:	00dfe034 	movhi	r3,32640
  b51c04:	18ffffc4 	addi	r3,r3,-1
  b51c08:	dc000015 	stw	r16,0(sp)
  b51c0c:	dfc00115 	stw	ra,4(sp)
  b51c10:	2021883a 	mov	r16,r4
  b51c14:	200b883a 	mov	r5,r4
  b51c18:	19800a2e 	bgeu	r3,r6,b51c44 <__ieee754_sqrtf+0x54>
  b51c1c:	0b523dc0 	call	b523dc <__mulsf3>
  b51c20:	100b883a 	mov	r5,r2
  b51c24:	8009883a 	mov	r4,r16
  b51c28:	0b523780 	call	b52378 <__addsf3>
  b51c2c:	1021883a 	mov	r16,r2
  b51c30:	8005883a 	mov	r2,r16
  b51c34:	dfc00117 	ldw	ra,4(sp)
  b51c38:	dc000017 	ldw	r16,0(sp)
  b51c3c:	dec00204 	addi	sp,sp,8
  b51c40:	f800283a 	ret
  b51c44:	303ffa26 	beq	r6,zero,b51c30 <__ieee754_sqrtf+0x40>
  b51c48:	20003b16 	blt	r4,zero,b51d38 <__ieee754_sqrtf+0x148>
  b51c4c:	00802034 	movhi	r2,128
  b51c50:	10bfffc4 	addi	r2,r2,-1
  b51c54:	2007d5fa 	srai	r3,r4,23
  b51c58:	11800936 	bltu	r2,r6,b51c80 <__ieee754_sqrtf+0x90>
  b51c5c:	2080202c 	andhi	r2,r4,128
  b51c60:	10003c1e 	bne	r2,zero,b51d54 <__ieee754_sqrtf+0x164>
  b51c64:	0009883a 	mov	r4,zero
  b51c68:	294b883a 	add	r5,r5,r5
  b51c6c:	2880202c 	andhi	r2,r5,128
  b51c70:	21000044 	addi	r4,r4,1
  b51c74:	103ffc26 	beq	r2,zero,b51c68 <__ieee754_sqrtf+0x78>
  b51c78:	1905c83a 	sub	r2,r3,r4
  b51c7c:	10c00044 	addi	r3,r2,1
  b51c80:	1a7fe044 	addi	r9,r3,-127
  b51c84:	48c0004c 	andi	r3,r9,1
  b51c88:	00802034 	movhi	r2,128
  b51c8c:	10bfffc4 	addi	r2,r2,-1
  b51c90:	2884703a 	and	r2,r5,r2
  b51c94:	1807003a 	cmpeq	r3,r3,zero
  b51c98:	10802034 	orhi	r2,r2,128
  b51c9c:	18002426 	beq	r3,zero,b51d30 <__ieee754_sqrtf+0x140>
  b51ca0:	1085883a 	add	r2,r2,r2
  b51ca4:	01404034 	movhi	r5,256
  b51ca8:	000f883a 	mov	r7,zero
  b51cac:	0007883a 	mov	r3,zero
  b51cb0:	000d883a 	mov	r6,zero
  b51cb4:	02000644 	movi	r8,25
  b51cb8:	3949883a 	add	r4,r7,r5
  b51cbc:	31800044 	addi	r6,r6,1
  b51cc0:	11000316 	blt	r2,r4,b51cd0 <__ieee754_sqrtf+0xe0>
  b51cc4:	1105c83a 	sub	r2,r2,r4
  b51cc8:	1947883a 	add	r3,r3,r5
  b51ccc:	214f883a 	add	r7,r4,r5
  b51cd0:	1085883a 	add	r2,r2,r2
  b51cd4:	280ad07a 	srli	r5,r5,1
  b51cd8:	323ff71e 	bne	r6,r8,b51cb8 <__ieee754_sqrtf+0xc8>
  b51cdc:	10000b1e 	bne	r2,zero,b51d0c <__ieee754_sqrtf+0x11c>
  b51ce0:	4805d07a 	srai	r2,r9,1
  b51ce4:	1807d07a 	srai	r3,r3,1
  b51ce8:	010fc034 	movhi	r4,16128
  b51cec:	100495fa 	slli	r2,r2,23
  b51cf0:	1907883a 	add	r3,r3,r4
  b51cf4:	18a1883a 	add	r16,r3,r2
  b51cf8:	8005883a 	mov	r2,r16
  b51cfc:	dfc00117 	ldw	ra,4(sp)
  b51d00:	dc000017 	ldw	r16,0(sp)
  b51d04:	dec00204 	addi	sp,sp,8
  b51d08:	f800283a 	ret
  b51d0c:	1880004c 	andi	r2,r3,1
  b51d10:	1887883a 	add	r3,r3,r2
  b51d14:	4805d07a 	srai	r2,r9,1
  b51d18:	1807d07a 	srai	r3,r3,1
  b51d1c:	010fc034 	movhi	r4,16128
  b51d20:	100495fa 	slli	r2,r2,23
  b51d24:	1907883a 	add	r3,r3,r4
  b51d28:	18a1883a 	add	r16,r3,r2
  b51d2c:	003ff206 	br	b51cf8 <__ieee754_sqrtf+0x108>
  b51d30:	1085883a 	add	r2,r2,r2
  b51d34:	003fda06 	br	b51ca0 <__ieee754_sqrtf+0xb0>
  b51d38:	200b883a 	mov	r5,r4
  b51d3c:	0b523080 	call	b52308 <__subsf3>
  b51d40:	1009883a 	mov	r4,r2
  b51d44:	100b883a 	mov	r5,r2
  b51d48:	0b525bc0 	call	b525bc <__divsf3>
  b51d4c:	1021883a 	mov	r16,r2
  b51d50:	003fb706 	br	b51c30 <__ieee754_sqrtf+0x40>
  b51d54:	0009883a 	mov	r4,zero
  b51d58:	003fc706 	br	b51c78 <__ieee754_sqrtf+0x88>

00b51d5c <matherr>:
  b51d5c:	0005883a 	mov	r2,zero
  b51d60:	f800283a 	ret

00b51d64 <rint>:
  b51d64:	2015883a 	mov	r10,r4
  b51d68:	2809d53a 	srai	r4,r5,20
  b51d6c:	defff904 	addi	sp,sp,-28
  b51d70:	034004c4 	movi	r13,19
  b51d74:	2101ffcc 	andi	r4,r4,2047
  b51d78:	227f0044 	addi	r9,r4,-1023
  b51d7c:	dc800415 	stw	r18,16(sp)
  b51d80:	dfc00615 	stw	ra,24(sp)
  b51d84:	dcc00515 	stw	r19,20(sp)
  b51d88:	dc400315 	stw	r17,12(sp)
  b51d8c:	dc000215 	stw	r16,8(sp)
  b51d90:	2817883a 	mov	r11,r5
  b51d94:	500d883a 	mov	r6,r10
  b51d98:	2824d7fa 	srli	r18,r5,31
  b51d9c:	6a403016 	blt	r13,r9,b51e60 <rint+0xfc>
  b51da0:	48004916 	blt	r9,zero,b51ec8 <rint+0x164>
  b51da4:	00800434 	movhi	r2,16
  b51da8:	10bfffc4 	addi	r2,r2,-1
  b51dac:	1247d83a 	sra	r3,r2,r9
  b51db0:	2809883a 	mov	r4,r5
  b51db4:	1944703a 	and	r2,r3,r5
  b51db8:	5084b03a 	or	r2,r10,r2
  b51dbc:	10001f26 	beq	r2,zero,b51e3c <rint+0xd8>
  b51dc0:	180ad07a 	srli	r5,r3,1
  b51dc4:	5944703a 	and	r2,r11,r5
  b51dc8:	5084b03a 	or	r2,r10,r2
  b51dcc:	10000626 	beq	r2,zero,b51de8 <rint+0x84>
  b51dd0:	4b406626 	beq	r9,r13,b51f6c <rint+0x208>
  b51dd4:	00c000b4 	movhi	r3,2
  b51dd8:	1a47d83a 	sra	r3,r3,r9
  b51ddc:	0144303a 	nor	r2,zero,r5
  b51de0:	5884703a 	and	r2,r11,r2
  b51de4:	10c8b03a 	or	r4,r2,r3
  b51de8:	900690fa 	slli	r3,r18,3
  b51dec:	00802db4 	movhi	r2,182
  b51df0:	1083fa04 	addi	r2,r2,4072
  b51df4:	200f883a 	mov	r7,r4
  b51df8:	1887883a 	add	r3,r3,r2
  b51dfc:	1c000017 	ldw	r16,0(r3)
  b51e00:	1c400117 	ldw	r17,4(r3)
  b51e04:	8009883a 	mov	r4,r16
  b51e08:	880b883a 	mov	r5,r17
  b51e0c:	0b52e8c0 	call	b52e8c <__adddf3>
  b51e10:	d8800015 	stw	r2,0(sp)
  b51e14:	d8c00115 	stw	r3,4(sp)
  b51e18:	d8800017 	ldw	r2,0(sp)
  b51e1c:	d8c00117 	ldw	r3,4(sp)
  b51e20:	880f883a 	mov	r7,r17
  b51e24:	800d883a 	mov	r6,r16
  b51e28:	180b883a 	mov	r5,r3
  b51e2c:	1009883a 	mov	r4,r2
  b51e30:	0b52e0c0 	call	b52e0c <__subdf3>
  b51e34:	1015883a 	mov	r10,r2
  b51e38:	1817883a 	mov	r11,r3
  b51e3c:	5005883a 	mov	r2,r10
  b51e40:	5807883a 	mov	r3,r11
  b51e44:	dfc00617 	ldw	ra,24(sp)
  b51e48:	dcc00517 	ldw	r19,20(sp)
  b51e4c:	dc800417 	ldw	r18,16(sp)
  b51e50:	dc400317 	ldw	r17,12(sp)
  b51e54:	dc000217 	ldw	r16,8(sp)
  b51e58:	dec00704 	addi	sp,sp,28
  b51e5c:	f800283a 	ret
  b51e60:	00800cc4 	movi	r2,51
  b51e64:	12400f16 	blt	r2,r9,b51ea4 <rint+0x140>
  b51e68:	213efb44 	addi	r4,r4,-1043
  b51e6c:	00bfffc4 	movi	r2,-1
  b51e70:	1104d83a 	srl	r2,r2,r4
  b51e74:	5086703a 	and	r3,r10,r2
  b51e78:	183ff026 	beq	r3,zero,b51e3c <rint+0xd8>
  b51e7c:	100ad07a 	srli	r5,r2,1
  b51e80:	5144703a 	and	r2,r10,r5
  b51e84:	10000526 	beq	r2,zero,b51e9c <rint+0x138>
  b51e88:	00d00034 	movhi	r3,16384
  b51e8c:	1907d83a 	sra	r3,r3,r4
  b51e90:	0144303a 	nor	r2,zero,r5
  b51e94:	5084703a 	and	r2,r10,r2
  b51e98:	10ccb03a 	or	r6,r2,r3
  b51e9c:	5809883a 	mov	r4,r11
  b51ea0:	003fd106 	br	b51de8 <rint+0x84>
  b51ea4:	00810004 	movi	r2,1024
  b51ea8:	48bfe41e 	bne	r9,r2,b51e3c <rint+0xd8>
  b51eac:	5009883a 	mov	r4,r10
  b51eb0:	500d883a 	mov	r6,r10
  b51eb4:	280f883a 	mov	r7,r5
  b51eb8:	0b52e8c0 	call	b52e8c <__adddf3>
  b51ebc:	1015883a 	mov	r10,r2
  b51ec0:	1817883a 	mov	r11,r3
  b51ec4:	003fdd06 	br	b51e3c <rint+0xd8>
  b51ec8:	04e00034 	movhi	r19,32768
  b51ecc:	9cffffc4 	addi	r19,r19,-1
  b51ed0:	2cc4703a 	and	r2,r5,r19
  b51ed4:	5084b03a 	or	r2,r10,r2
  b51ed8:	103fd826 	beq	r2,zero,b51e3c <rint+0xd8>
  b51edc:	00c00434 	movhi	r3,16
  b51ee0:	18ffffc4 	addi	r3,r3,-1
  b51ee4:	28c6703a 	and	r3,r5,r3
  b51ee8:	50c6b03a 	or	r3,r10,r3
  b51eec:	00cdc83a 	sub	r6,zero,r3
  b51ef0:	900a90fa 	slli	r5,r18,3
  b51ef4:	1986b03a 	or	r3,r3,r6
  b51ef8:	01002db4 	movhi	r4,182
  b51efc:	2103fa04 	addi	r4,r4,4072
  b51f00:	1806d33a 	srli	r3,r3,12
  b51f04:	290b883a 	add	r5,r5,r4
  b51f08:	2c000017 	ldw	r16,0(r5)
  b51f0c:	2c400117 	ldw	r17,4(r5)
  b51f10:	593fffac 	andhi	r4,r11,65534
  b51f14:	18c0022c 	andhi	r3,r3,8
  b51f18:	1906b03a 	or	r3,r3,r4
  b51f1c:	500d883a 	mov	r6,r10
  b51f20:	180f883a 	mov	r7,r3
  b51f24:	8009883a 	mov	r4,r16
  b51f28:	880b883a 	mov	r5,r17
  b51f2c:	0b52e8c0 	call	b52e8c <__adddf3>
  b51f30:	d8800015 	stw	r2,0(sp)
  b51f34:	d8c00115 	stw	r3,4(sp)
  b51f38:	d8800017 	ldw	r2,0(sp)
  b51f3c:	d8c00117 	ldw	r3,4(sp)
  b51f40:	880f883a 	mov	r7,r17
  b51f44:	800d883a 	mov	r6,r16
  b51f48:	180b883a 	mov	r5,r3
  b51f4c:	1009883a 	mov	r4,r2
  b51f50:	0b52e0c0 	call	b52e0c <__subdf3>
  b51f54:	901297fa 	slli	r9,r18,31
  b51f58:	98d0703a 	and	r8,r19,r3
  b51f5c:	1015883a 	mov	r10,r2
  b51f60:	4250b03a 	or	r8,r8,r9
  b51f64:	4017883a 	mov	r11,r8
  b51f68:	003fb406 	br	b51e3c <rint+0xd8>
  b51f6c:	01900034 	movhi	r6,16384
  b51f70:	003f9d06 	br	b51de8 <rint+0x84>

00b51f74 <fabsf>:
  b51f74:	00a00034 	movhi	r2,32768
  b51f78:	10bfffc4 	addi	r2,r2,-1
  b51f7c:	2084703a 	and	r2,r4,r2
  b51f80:	f800283a 	ret

00b51f84 <finitef>:
  b51f84:	00a00034 	movhi	r2,32768
  b51f88:	10bfffc4 	addi	r2,r2,-1
  b51f8c:	2088703a 	and	r4,r4,r2
  b51f90:	009fe034 	movhi	r2,32640
  b51f94:	10bfffc4 	addi	r2,r2,-1
  b51f98:	1104403a 	cmpge	r2,r2,r4
  b51f9c:	f800283a 	ret

00b51fa0 <isnanf>:
  b51fa0:	00a00034 	movhi	r2,32768
  b51fa4:	10bfffc4 	addi	r2,r2,-1
  b51fa8:	2088703a 	and	r4,r4,r2
  b51fac:	009fe034 	movhi	r2,32640
  b51fb0:	1104803a 	cmplt	r2,r2,r4
  b51fb4:	f800283a 	ret

00b51fb8 <nanf>:
  b51fb8:	009ff034 	movhi	r2,32704
  b51fbc:	f800283a 	ret

00b51fc0 <scalbnf>:
  b51fc0:	00a00034 	movhi	r2,32768
  b51fc4:	10bfffc4 	addi	r2,r2,-1
  b51fc8:	defffe04 	addi	sp,sp,-8
  b51fcc:	2086703a 	and	r3,r4,r2
  b51fd0:	dc000015 	stw	r16,0(sp)
  b51fd4:	dfc00115 	stw	ra,4(sp)
  b51fd8:	200d883a 	mov	r6,r4
  b51fdc:	200f883a 	mov	r7,r4
  b51fe0:	2821883a 	mov	r16,r5
  b51fe4:	18001a26 	beq	r3,zero,b52050 <scalbnf+0x90>
  b51fe8:	009fe034 	movhi	r2,32640
  b51fec:	10bfffc4 	addi	r2,r2,-1
  b51ff0:	10c01c36 	bltu	r2,r3,b52064 <scalbnf+0xa4>
  b51ff4:	00802034 	movhi	r2,128
  b51ff8:	10bfffc4 	addi	r2,r2,-1
  b51ffc:	10c02136 	bltu	r2,r3,b52084 <scalbnf+0xc4>
  b52000:	01530034 	movhi	r5,19456
  b52004:	0b523dc0 	call	b523dc <__mulsf3>
  b52008:	1009883a 	mov	r4,r2
  b5200c:	100d883a 	mov	r6,r2
  b52010:	00bffff4 	movhi	r2,65535
  b52014:	108f2c04 	addi	r2,r2,15536
  b52018:	80802616 	blt	r16,r2,b520b4 <scalbnf+0xf4>
  b5201c:	209fe02c 	andhi	r2,r4,32640
  b52020:	1005d5fa 	srai	r2,r2,23
  b52024:	200f883a 	mov	r7,r4
  b52028:	10bff9c4 	addi	r2,r2,-25
  b5202c:	1407883a 	add	r3,r2,r16
  b52030:	00803f84 	movi	r2,254
  b52034:	10c01516 	blt	r2,r3,b5208c <scalbnf+0xcc>
  b52038:	00c0230e 	bge	zero,r3,b520c8 <scalbnf+0x108>
  b5203c:	180695fa 	slli	r3,r3,23
  b52040:	00a02034 	movhi	r2,32896
  b52044:	10bfffc4 	addi	r2,r2,-1
  b52048:	3884703a 	and	r2,r7,r2
  b5204c:	10ccb03a 	or	r6,r2,r3
  b52050:	3005883a 	mov	r2,r6
  b52054:	dfc00117 	ldw	ra,4(sp)
  b52058:	dc000017 	ldw	r16,0(sp)
  b5205c:	dec00204 	addi	sp,sp,8
  b52060:	f800283a 	ret
  b52064:	200b883a 	mov	r5,r4
  b52068:	0b523780 	call	b52378 <__addsf3>
  b5206c:	100d883a 	mov	r6,r2
  b52070:	3005883a 	mov	r2,r6
  b52074:	dfc00117 	ldw	ra,4(sp)
  b52078:	dc000017 	ldw	r16,0(sp)
  b5207c:	dec00204 	addi	sp,sp,8
  b52080:	f800283a 	ret
  b52084:	1804d5fa 	srli	r2,r3,23
  b52088:	003fe806 	br	b5202c <scalbnf+0x6c>
  b5208c:	041c52b4 	movhi	r16,29002
  b52090:	843cb284 	addi	r16,r16,-3382
  b52094:	300b883a 	mov	r5,r6
  b52098:	8009883a 	mov	r4,r16
  b5209c:	0b5210c0 	call	b5210c <copysignf>
  b520a0:	1009883a 	mov	r4,r2
  b520a4:	800b883a 	mov	r5,r16
  b520a8:	0b523dc0 	call	b523dc <__mulsf3>
  b520ac:	100d883a 	mov	r6,r2
  b520b0:	003fe706 	br	b52050 <scalbnf+0x90>
  b520b4:	014368b4 	movhi	r5,3490
  b520b8:	29509804 	addi	r5,r5,16992
  b520bc:	0b523dc0 	call	b523dc <__mulsf3>
  b520c0:	100d883a 	mov	r6,r2
  b520c4:	003fe206 	br	b52050 <scalbnf+0x90>
  b520c8:	00bffa84 	movi	r2,-22
  b520cc:	1880050e 	bge	r3,r2,b520e4 <scalbnf+0x124>
  b520d0:	00b0d414 	movui	r2,50000
  b520d4:	143fed16 	blt	r2,r16,b5208c <scalbnf+0xcc>
  b520d8:	040368b4 	movhi	r16,3490
  b520dc:	84109804 	addi	r16,r16,16992
  b520e0:	003fec06 	br	b52094 <scalbnf+0xd4>
  b520e4:	18800644 	addi	r2,r3,25
  b520e8:	100495fa 	slli	r2,r2,23
  b520ec:	01202034 	movhi	r4,32896
  b520f0:	213fffc4 	addi	r4,r4,-1
  b520f4:	3908703a 	and	r4,r7,r4
  b520f8:	2088b03a 	or	r4,r4,r2
  b520fc:	014cc034 	movhi	r5,13056
  b52100:	0b523dc0 	call	b523dc <__mulsf3>
  b52104:	100d883a 	mov	r6,r2
  b52108:	003fd106 	br	b52050 <scalbnf+0x90>

00b5210c <copysignf>:
  b5210c:	00a00034 	movhi	r2,32768
  b52110:	10bfffc4 	addi	r2,r2,-1
  b52114:	2088703a 	and	r4,r4,r2
  b52118:	28a0002c 	andhi	r2,r5,32768
  b5211c:	2084b03a 	or	r2,r4,r2
  b52120:	f800283a 	ret

00b52124 <_fpadd_parts>:
  b52124:	21c00017 	ldw	r7,0(r4)
  b52128:	02000044 	movi	r8,1
  b5212c:	41c0332e 	bgeu	r8,r7,b521fc <_fpadd_parts+0xd8>
  b52130:	28800017 	ldw	r2,0(r5)
  b52134:	4080462e 	bgeu	r8,r2,b52250 <_fpadd_parts+0x12c>
  b52138:	00c00104 	movi	r3,4
  b5213c:	38c06b26 	beq	r7,r3,b522ec <_fpadd_parts+0x1c8>
  b52140:	10c04326 	beq	r2,r3,b52250 <_fpadd_parts+0x12c>
  b52144:	00c00084 	movi	r3,2
  b52148:	10c02e26 	beq	r2,r3,b52204 <_fpadd_parts+0xe0>
  b5214c:	38c04026 	beq	r7,r3,b52250 <_fpadd_parts+0x12c>
  b52150:	22800217 	ldw	r10,8(r4)
  b52154:	28c00217 	ldw	r3,8(r5)
  b52158:	23000317 	ldw	r12,12(r4)
  b5215c:	2a400317 	ldw	r9,12(r5)
  b52160:	50cfc83a 	sub	r7,r10,r3
  b52164:	3817883a 	mov	r11,r7
  b52168:	38004f16 	blt	r7,zero,b522a8 <_fpadd_parts+0x184>
  b5216c:	008007c4 	movi	r2,31
  b52170:	11c03316 	blt	r2,r7,b52240 <_fpadd_parts+0x11c>
  b52174:	02c0540e 	bge	zero,r11,b522c8 <_fpadd_parts+0x1a4>
  b52178:	41c4983a 	sll	r2,r8,r7
  b5217c:	49c6d83a 	srl	r3,r9,r7
  b52180:	10bfffc4 	addi	r2,r2,-1
  b52184:	4884703a 	and	r2,r9,r2
  b52188:	1004c03a 	cmpne	r2,r2,zero
  b5218c:	1892b03a 	or	r9,r3,r2
  b52190:	20c00117 	ldw	r3,4(r4)
  b52194:	28800117 	ldw	r2,4(r5)
  b52198:	18803c26 	beq	r3,r2,b5228c <_fpadd_parts+0x168>
  b5219c:	18002f26 	beq	r3,zero,b5225c <_fpadd_parts+0x138>
  b521a0:	4b05c83a 	sub	r2,r9,r12
  b521a4:	10004216 	blt	r2,zero,b522b0 <_fpadd_parts+0x18c>
  b521a8:	32800215 	stw	r10,8(r6)
  b521ac:	30800315 	stw	r2,12(r6)
  b521b0:	30000115 	stw	zero,4(r6)
  b521b4:	31000317 	ldw	r4,12(r6)
  b521b8:	01d00034 	movhi	r7,16384
  b521bc:	39ffff84 	addi	r7,r7,-2
  b521c0:	20bfffc4 	addi	r2,r4,-1
  b521c4:	2007883a 	mov	r3,r4
  b521c8:	38800836 	bltu	r7,r2,b521ec <_fpadd_parts+0xc8>
  b521cc:	31400217 	ldw	r5,8(r6)
  b521d0:	18c9883a 	add	r4,r3,r3
  b521d4:	20bfffc4 	addi	r2,r4,-1
  b521d8:	297fffc4 	addi	r5,r5,-1
  b521dc:	2007883a 	mov	r3,r4
  b521e0:	38bffb2e 	bgeu	r7,r2,b521d0 <_fpadd_parts+0xac>
  b521e4:	31400215 	stw	r5,8(r6)
  b521e8:	31000315 	stw	r4,12(r6)
  b521ec:	008000c4 	movi	r2,3
  b521f0:	30800015 	stw	r2,0(r6)
  b521f4:	20001b16 	blt	r4,zero,b52264 <_fpadd_parts+0x140>
  b521f8:	3009883a 	mov	r4,r6
  b521fc:	2005883a 	mov	r2,r4
  b52200:	f800283a 	ret
  b52204:	38fffd1e 	bne	r7,r3,b521fc <_fpadd_parts+0xd8>
  b52208:	31c00015 	stw	r7,0(r6)
  b5220c:	20800117 	ldw	r2,4(r4)
  b52210:	30800115 	stw	r2,4(r6)
  b52214:	20c00217 	ldw	r3,8(r4)
  b52218:	30c00215 	stw	r3,8(r6)
  b5221c:	20800317 	ldw	r2,12(r4)
  b52220:	30800315 	stw	r2,12(r6)
  b52224:	20c00117 	ldw	r3,4(r4)
  b52228:	28800117 	ldw	r2,4(r5)
  b5222c:	3009883a 	mov	r4,r6
  b52230:	1886703a 	and	r3,r3,r2
  b52234:	2005883a 	mov	r2,r4
  b52238:	30c00115 	stw	r3,4(r6)
  b5223c:	f800283a 	ret
  b52240:	1a801716 	blt	r3,r10,b522a0 <_fpadd_parts+0x17c>
  b52244:	1815883a 	mov	r10,r3
  b52248:	0019883a 	mov	r12,zero
  b5224c:	003fd006 	br	b52190 <_fpadd_parts+0x6c>
  b52250:	2809883a 	mov	r4,r5
  b52254:	2005883a 	mov	r2,r4
  b52258:	f800283a 	ret
  b5225c:	6245c83a 	sub	r2,r12,r9
  b52260:	003fd006 	br	b521a4 <_fpadd_parts+0x80>
  b52264:	30800217 	ldw	r2,8(r6)
  b52268:	2006d07a 	srli	r3,r4,1
  b5226c:	2100004c 	andi	r4,r4,1
  b52270:	10800044 	addi	r2,r2,1
  b52274:	1906b03a 	or	r3,r3,r4
  b52278:	3009883a 	mov	r4,r6
  b5227c:	30800215 	stw	r2,8(r6)
  b52280:	2005883a 	mov	r2,r4
  b52284:	30c00315 	stw	r3,12(r6)
  b52288:	f800283a 	ret
  b5228c:	4b09883a 	add	r4,r9,r12
  b52290:	30c00115 	stw	r3,4(r6)
  b52294:	32800215 	stw	r10,8(r6)
  b52298:	31000315 	stw	r4,12(r6)
  b5229c:	003fd306 	br	b521ec <_fpadd_parts+0xc8>
  b522a0:	0013883a 	mov	r9,zero
  b522a4:	003fba06 	br	b52190 <_fpadd_parts+0x6c>
  b522a8:	01cfc83a 	sub	r7,zero,r7
  b522ac:	003faf06 	br	b5216c <_fpadd_parts+0x48>
  b522b0:	0089c83a 	sub	r4,zero,r2
  b522b4:	00800044 	movi	r2,1
  b522b8:	30800115 	stw	r2,4(r6)
  b522bc:	32800215 	stw	r10,8(r6)
  b522c0:	31000315 	stw	r4,12(r6)
  b522c4:	003fbb06 	br	b521b4 <_fpadd_parts+0x90>
  b522c8:	583fb126 	beq	r11,zero,b52190 <_fpadd_parts+0x6c>
  b522cc:	41c4983a 	sll	r2,r8,r7
  b522d0:	61c6d83a 	srl	r3,r12,r7
  b522d4:	51d5883a 	add	r10,r10,r7
  b522d8:	10bfffc4 	addi	r2,r2,-1
  b522dc:	6084703a 	and	r2,r12,r2
  b522e0:	1004c03a 	cmpne	r2,r2,zero
  b522e4:	1898b03a 	or	r12,r3,r2
  b522e8:	003fa906 	br	b52190 <_fpadd_parts+0x6c>
  b522ec:	11ffc31e 	bne	r2,r7,b521fc <_fpadd_parts+0xd8>
  b522f0:	28c00117 	ldw	r3,4(r5)
  b522f4:	20800117 	ldw	r2,4(r4)
  b522f8:	10ffc026 	beq	r2,r3,b521fc <_fpadd_parts+0xd8>
  b522fc:	01002db4 	movhi	r4,182
  b52300:	2103fe04 	addi	r4,r4,4088
  b52304:	003fbd06 	br	b521fc <_fpadd_parts+0xd8>

00b52308 <__subsf3>:
  b52308:	deffef04 	addi	sp,sp,-68
  b5230c:	dcc00f15 	stw	r19,60(sp)
  b52310:	dcc00204 	addi	r19,sp,8
  b52314:	dc400e15 	stw	r17,56(sp)
  b52318:	d9000015 	stw	r4,0(sp)
  b5231c:	d9400115 	stw	r5,4(sp)
  b52320:	d809883a 	mov	r4,sp
  b52324:	980b883a 	mov	r5,r19
  b52328:	dc400604 	addi	r17,sp,24
  b5232c:	dfc01015 	stw	ra,64(sp)
  b52330:	0b535040 	call	b53504 <__unpack_f>
  b52334:	d9000104 	addi	r4,sp,4
  b52338:	880b883a 	mov	r5,r17
  b5233c:	0b535040 	call	b53504 <__unpack_f>
  b52340:	d8800717 	ldw	r2,28(sp)
  b52344:	9809883a 	mov	r4,r19
  b52348:	880b883a 	mov	r5,r17
  b5234c:	d9800a04 	addi	r6,sp,40
  b52350:	1080005c 	xori	r2,r2,1
  b52354:	d8800715 	stw	r2,28(sp)
  b52358:	0b521240 	call	b52124 <_fpadd_parts>
  b5235c:	1009883a 	mov	r4,r2
  b52360:	0b533a40 	call	b533a4 <__pack_f>
  b52364:	dfc01017 	ldw	ra,64(sp)
  b52368:	dcc00f17 	ldw	r19,60(sp)
  b5236c:	dc400e17 	ldw	r17,56(sp)
  b52370:	dec01104 	addi	sp,sp,68
  b52374:	f800283a 	ret

00b52378 <__addsf3>:
  b52378:	deffef04 	addi	sp,sp,-68
  b5237c:	dcc00f15 	stw	r19,60(sp)
  b52380:	dcc00204 	addi	r19,sp,8
  b52384:	dc400e15 	stw	r17,56(sp)
  b52388:	d9000015 	stw	r4,0(sp)
  b5238c:	d9400115 	stw	r5,4(sp)
  b52390:	d809883a 	mov	r4,sp
  b52394:	980b883a 	mov	r5,r19
  b52398:	dc400604 	addi	r17,sp,24
  b5239c:	dfc01015 	stw	ra,64(sp)
  b523a0:	0b535040 	call	b53504 <__unpack_f>
  b523a4:	d9000104 	addi	r4,sp,4
  b523a8:	880b883a 	mov	r5,r17
  b523ac:	0b535040 	call	b53504 <__unpack_f>
  b523b0:	d9800a04 	addi	r6,sp,40
  b523b4:	9809883a 	mov	r4,r19
  b523b8:	880b883a 	mov	r5,r17
  b523bc:	0b521240 	call	b52124 <_fpadd_parts>
  b523c0:	1009883a 	mov	r4,r2
  b523c4:	0b533a40 	call	b533a4 <__pack_f>
  b523c8:	dfc01017 	ldw	ra,64(sp)
  b523cc:	dcc00f17 	ldw	r19,60(sp)
  b523d0:	dc400e17 	ldw	r17,56(sp)
  b523d4:	dec01104 	addi	sp,sp,68
  b523d8:	f800283a 	ret

00b523dc <__mulsf3>:
  b523dc:	deffef04 	addi	sp,sp,-68
  b523e0:	dc400f15 	stw	r17,60(sp)
  b523e4:	dc400204 	addi	r17,sp,8
  b523e8:	dc000e15 	stw	r16,56(sp)
  b523ec:	d9000015 	stw	r4,0(sp)
  b523f0:	d9400115 	stw	r5,4(sp)
  b523f4:	d809883a 	mov	r4,sp
  b523f8:	880b883a 	mov	r5,r17
  b523fc:	dc000604 	addi	r16,sp,24
  b52400:	dfc01015 	stw	ra,64(sp)
  b52404:	0b535040 	call	b53504 <__unpack_f>
  b52408:	d9000104 	addi	r4,sp,4
  b5240c:	800b883a 	mov	r5,r16
  b52410:	0b535040 	call	b53504 <__unpack_f>
  b52414:	d9000217 	ldw	r4,8(sp)
  b52418:	00800044 	movi	r2,1
  b5241c:	01400104 	movi	r5,4
  b52420:	1100142e 	bgeu	r2,r4,b52474 <__mulsf3+0x98>
  b52424:	d8c00617 	ldw	r3,24(sp)
  b52428:	10c0052e 	bgeu	r2,r3,b52440 <__mulsf3+0x64>
  b5242c:	21400f26 	beq	r4,r5,b5246c <__mulsf3+0x90>
  b52430:	19405d26 	beq	r3,r5,b525a8 <__mulsf3+0x1cc>
  b52434:	00800084 	movi	r2,2
  b52438:	20800e26 	beq	r4,r2,b52474 <__mulsf3+0x98>
  b5243c:	1880181e 	bne	r3,r2,b524a0 <__mulsf3+0xc4>
  b52440:	d8c00717 	ldw	r3,28(sp)
  b52444:	d8800317 	ldw	r2,12(sp)
  b52448:	8009883a 	mov	r4,r16
  b5244c:	10c4c03a 	cmpne	r2,r2,r3
  b52450:	d8800715 	stw	r2,28(sp)
  b52454:	0b533a40 	call	b533a4 <__pack_f>
  b52458:	dfc01017 	ldw	ra,64(sp)
  b5245c:	dc400f17 	ldw	r17,60(sp)
  b52460:	dc000e17 	ldw	r16,56(sp)
  b52464:	dec01104 	addi	sp,sp,68
  b52468:	f800283a 	ret
  b5246c:	00800084 	movi	r2,2
  b52470:	18804f26 	beq	r3,r2,b525b0 <__mulsf3+0x1d4>
  b52474:	d8800317 	ldw	r2,12(sp)
  b52478:	d8c00717 	ldw	r3,28(sp)
  b5247c:	8809883a 	mov	r4,r17
  b52480:	10c4c03a 	cmpne	r2,r2,r3
  b52484:	d8800315 	stw	r2,12(sp)
  b52488:	0b533a40 	call	b533a4 <__pack_f>
  b5248c:	dfc01017 	ldw	ra,64(sp)
  b52490:	dc400f17 	ldw	r17,60(sp)
  b52494:	dc000e17 	ldw	r16,56(sp)
  b52498:	dec01104 	addi	sp,sp,68
  b5249c:	f800283a 	ret
  b524a0:	d8800517 	ldw	r2,20(sp)
  b524a4:	da000917 	ldw	r8,36(sp)
  b524a8:	0013883a 	mov	r9,zero
  b524ac:	0007883a 	mov	r3,zero
  b524b0:	480f883a 	mov	r7,r9
  b524b4:	180b883a 	mov	r5,r3
  b524b8:	400d883a 	mov	r6,r8
  b524bc:	1009883a 	mov	r4,r2
  b524c0:	0b5328c0 	call	b5328c <__muldi3>
  b524c4:	da800417 	ldw	r10,16(sp)
  b524c8:	d9800817 	ldw	r6,32(sp)
  b524cc:	da400317 	ldw	r9,12(sp)
  b524d0:	52800084 	addi	r10,r10,2
  b524d4:	3295883a 	add	r10,r6,r10
  b524d8:	d9800717 	ldw	r6,28(sp)
  b524dc:	180b883a 	mov	r5,r3
  b524e0:	180f883a 	mov	r7,r3
  b524e4:	4992c03a 	cmpne	r9,r9,r6
  b524e8:	da400b15 	stw	r9,44(sp)
  b524ec:	1007883a 	mov	r3,r2
  b524f0:	da800c15 	stw	r10,48(sp)
  b524f4:	2800070e 	bge	r5,zero,b52514 <__mulsf3+0x138>
  b524f8:	2880004c 	andi	r2,r5,1
  b524fc:	1005003a 	cmpeq	r2,r2,zero
  b52500:	500d883a 	mov	r6,r10
  b52504:	10001e26 	beq	r2,zero,b52580 <__mulsf3+0x1a4>
  b52508:	380ed07a 	srli	r7,r7,1
  b5250c:	31800044 	addi	r6,r6,1
  b52510:	d9800c15 	stw	r6,48(sp)
  b52514:	01100034 	movhi	r4,16384
  b52518:	213fffc4 	addi	r4,r4,-1
  b5251c:	21c00b36 	bltu	r4,r7,b5254c <__mulsf3+0x170>
  b52520:	d8800c17 	ldw	r2,48(sp)
  b52524:	00000206 	br	b52530 <__mulsf3+0x154>
  b52528:	18c7883a 	add	r3,r3,r3
  b5252c:	21c00636 	bltu	r4,r7,b52548 <__mulsf3+0x16c>
  b52530:	10bfffc4 	addi	r2,r2,-1
  b52534:	39cf883a 	add	r7,r7,r7
  b52538:	183ffb0e 	bge	r3,zero,b52528 <__mulsf3+0x14c>
  b5253c:	39c00054 	ori	r7,r7,1
  b52540:	18c7883a 	add	r3,r3,r3
  b52544:	21fffa2e 	bgeu	r4,r7,b52530 <__mulsf3+0x154>
  b52548:	d8800c15 	stw	r2,48(sp)
  b5254c:	39001fcc 	andi	r4,r7,127
  b52550:	00801004 	movi	r2,64
  b52554:	20800d26 	beq	r4,r2,b5258c <__mulsf3+0x1b0>
  b52558:	008000c4 	movi	r2,3
  b5255c:	d9000a04 	addi	r4,sp,40
  b52560:	d9c00d15 	stw	r7,52(sp)
  b52564:	d8800a15 	stw	r2,40(sp)
  b52568:	0b533a40 	call	b533a4 <__pack_f>
  b5256c:	dfc01017 	ldw	ra,64(sp)
  b52570:	dc400f17 	ldw	r17,60(sp)
  b52574:	dc000e17 	ldw	r16,56(sp)
  b52578:	dec01104 	addi	sp,sp,68
  b5257c:	f800283a 	ret
  b52580:	1804d07a 	srli	r2,r3,1
  b52584:	10e00034 	orhi	r3,r2,32768
  b52588:	003fdf06 	br	b52508 <__mulsf3+0x12c>
  b5258c:	3880200c 	andi	r2,r7,128
  b52590:	103ff11e 	bne	r2,zero,b52558 <__mulsf3+0x17c>
  b52594:	183ff026 	beq	r3,zero,b52558 <__mulsf3+0x17c>
  b52598:	3907883a 	add	r3,r7,r4
  b5259c:	00bfe004 	movi	r2,-128
  b525a0:	188e703a 	and	r7,r3,r2
  b525a4:	003fec06 	br	b52558 <__mulsf3+0x17c>
  b525a8:	00800084 	movi	r2,2
  b525ac:	20bfa41e 	bne	r4,r2,b52440 <__mulsf3+0x64>
  b525b0:	01002db4 	movhi	r4,182
  b525b4:	2103fe04 	addi	r4,r4,4088
  b525b8:	003fb306 	br	b52488 <__mulsf3+0xac>

00b525bc <__divsf3>:
  b525bc:	defff304 	addi	sp,sp,-52
  b525c0:	dc400b15 	stw	r17,44(sp)
  b525c4:	dc400204 	addi	r17,sp,8
  b525c8:	dc000a15 	stw	r16,40(sp)
  b525cc:	d9000015 	stw	r4,0(sp)
  b525d0:	d9400115 	stw	r5,4(sp)
  b525d4:	d809883a 	mov	r4,sp
  b525d8:	880b883a 	mov	r5,r17
  b525dc:	dc000604 	addi	r16,sp,24
  b525e0:	dfc00c15 	stw	ra,48(sp)
  b525e4:	0b535040 	call	b53504 <__unpack_f>
  b525e8:	d9000104 	addi	r4,sp,4
  b525ec:	800b883a 	mov	r5,r16
  b525f0:	0b535040 	call	b53504 <__unpack_f>
  b525f4:	d9000217 	ldw	r4,8(sp)
  b525f8:	00800044 	movi	r2,1
  b525fc:	01800104 	movi	r6,4
  b52600:	11000a2e 	bgeu	r2,r4,b5262c <__divsf3+0x70>
  b52604:	d9400617 	ldw	r5,24(sp)
  b52608:	1140432e 	bgeu	r2,r5,b52718 <__divsf3+0x15c>
  b5260c:	d8800317 	ldw	r2,12(sp)
  b52610:	d8c00717 	ldw	r3,28(sp)
  b52614:	10c4f03a 	xor	r2,r2,r3
  b52618:	d8800315 	stw	r2,12(sp)
  b5261c:	21800226 	beq	r4,r6,b52628 <__divsf3+0x6c>
  b52620:	00800084 	movi	r2,2
  b52624:	2080101e 	bne	r4,r2,b52668 <__divsf3+0xac>
  b52628:	29000726 	beq	r5,r4,b52648 <__divsf3+0x8c>
  b5262c:	8809883a 	mov	r4,r17
  b52630:	0b533a40 	call	b533a4 <__pack_f>
  b52634:	dfc00c17 	ldw	ra,48(sp)
  b52638:	dc400b17 	ldw	r17,44(sp)
  b5263c:	dc000a17 	ldw	r16,40(sp)
  b52640:	dec00d04 	addi	sp,sp,52
  b52644:	f800283a 	ret
  b52648:	01002db4 	movhi	r4,182
  b5264c:	2103fe04 	addi	r4,r4,4088
  b52650:	0b533a40 	call	b533a4 <__pack_f>
  b52654:	dfc00c17 	ldw	ra,48(sp)
  b52658:	dc400b17 	ldw	r17,44(sp)
  b5265c:	dc000a17 	ldw	r16,40(sp)
  b52660:	dec00d04 	addi	sp,sp,52
  b52664:	f800283a 	ret
  b52668:	29802d26 	beq	r5,r6,b52720 <__divsf3+0x164>
  b5266c:	28801a26 	beq	r5,r2,b526d8 <__divsf3+0x11c>
  b52670:	d8c00417 	ldw	r3,16(sp)
  b52674:	d8800817 	ldw	r2,32(sp)
  b52678:	d9000517 	ldw	r4,20(sp)
  b5267c:	d9800917 	ldw	r6,36(sp)
  b52680:	1885c83a 	sub	r2,r3,r2
  b52684:	d8800415 	stw	r2,16(sp)
  b52688:	2180032e 	bgeu	r4,r6,b52698 <__divsf3+0xdc>
  b5268c:	10bfffc4 	addi	r2,r2,-1
  b52690:	d8800415 	stw	r2,16(sp)
  b52694:	2109883a 	add	r4,r4,r4
  b52698:	01500034 	movhi	r5,16384
  b5269c:	0007883a 	mov	r3,zero
  b526a0:	0005883a 	mov	r2,zero
  b526a4:	01c007c4 	movi	r7,31
  b526a8:	10800044 	addi	r2,r2,1
  b526ac:	21800236 	bltu	r4,r6,b526b8 <__divsf3+0xfc>
  b526b0:	1946b03a 	or	r3,r3,r5
  b526b4:	2189c83a 	sub	r4,r4,r6
  b526b8:	280ad07a 	srli	r5,r5,1
  b526bc:	2109883a 	add	r4,r4,r4
  b526c0:	11fff91e 	bne	r2,r7,b526a8 <__divsf3+0xec>
  b526c4:	19401fcc 	andi	r5,r3,127
  b526c8:	00801004 	movi	r2,64
  b526cc:	28800a26 	beq	r5,r2,b526f8 <__divsf3+0x13c>
  b526d0:	d8c00515 	stw	r3,20(sp)
  b526d4:	003fd506 	br	b5262c <__divsf3+0x70>
  b526d8:	8809883a 	mov	r4,r17
  b526dc:	d9800215 	stw	r6,8(sp)
  b526e0:	0b533a40 	call	b533a4 <__pack_f>
  b526e4:	dfc00c17 	ldw	ra,48(sp)
  b526e8:	dc400b17 	ldw	r17,44(sp)
  b526ec:	dc000a17 	ldw	r16,40(sp)
  b526f0:	dec00d04 	addi	sp,sp,52
  b526f4:	f800283a 	ret
  b526f8:	1880200c 	andi	r2,r3,128
  b526fc:	103ff41e 	bne	r2,zero,b526d0 <__divsf3+0x114>
  b52700:	203ff326 	beq	r4,zero,b526d0 <__divsf3+0x114>
  b52704:	1947883a 	add	r3,r3,r5
  b52708:	00bfe004 	movi	r2,-128
  b5270c:	1886703a 	and	r3,r3,r2
  b52710:	d8c00515 	stw	r3,20(sp)
  b52714:	003fc506 	br	b5262c <__divsf3+0x70>
  b52718:	8009883a 	mov	r4,r16
  b5271c:	003fc406 	br	b52630 <__divsf3+0x74>
  b52720:	8809883a 	mov	r4,r17
  b52724:	d8000515 	stw	zero,20(sp)
  b52728:	d8000415 	stw	zero,16(sp)
  b5272c:	003fc006 	br	b52630 <__divsf3+0x74>

00b52730 <__eqsf2>:
  b52730:	defff304 	addi	sp,sp,-52
  b52734:	dc400b15 	stw	r17,44(sp)
  b52738:	dc400204 	addi	r17,sp,8
  b5273c:	dc000a15 	stw	r16,40(sp)
  b52740:	d9000015 	stw	r4,0(sp)
  b52744:	d9400115 	stw	r5,4(sp)
  b52748:	d809883a 	mov	r4,sp
  b5274c:	880b883a 	mov	r5,r17
  b52750:	dc000604 	addi	r16,sp,24
  b52754:	dfc00c15 	stw	ra,48(sp)
  b52758:	0b535040 	call	b53504 <__unpack_f>
  b5275c:	d9000104 	addi	r4,sp,4
  b52760:	800b883a 	mov	r5,r16
  b52764:	0b535040 	call	b53504 <__unpack_f>
  b52768:	d8800217 	ldw	r2,8(sp)
  b5276c:	00c00044 	movi	r3,1
  b52770:	180d883a 	mov	r6,r3
  b52774:	1880062e 	bgeu	r3,r2,b52790 <__eqsf2+0x60>
  b52778:	d8800617 	ldw	r2,24(sp)
  b5277c:	8809883a 	mov	r4,r17
  b52780:	800b883a 	mov	r5,r16
  b52784:	1880022e 	bgeu	r3,r2,b52790 <__eqsf2+0x60>
  b52788:	0b535cc0 	call	b535cc <__fpcmp_parts_f>
  b5278c:	100d883a 	mov	r6,r2
  b52790:	3005883a 	mov	r2,r6
  b52794:	dfc00c17 	ldw	ra,48(sp)
  b52798:	dc400b17 	ldw	r17,44(sp)
  b5279c:	dc000a17 	ldw	r16,40(sp)
  b527a0:	dec00d04 	addi	sp,sp,52
  b527a4:	f800283a 	ret

00b527a8 <__gtsf2>:
  b527a8:	defff304 	addi	sp,sp,-52
  b527ac:	dc400b15 	stw	r17,44(sp)
  b527b0:	dc400204 	addi	r17,sp,8
  b527b4:	dc000a15 	stw	r16,40(sp)
  b527b8:	d9000015 	stw	r4,0(sp)
  b527bc:	d9400115 	stw	r5,4(sp)
  b527c0:	d809883a 	mov	r4,sp
  b527c4:	880b883a 	mov	r5,r17
  b527c8:	dc000604 	addi	r16,sp,24
  b527cc:	dfc00c15 	stw	ra,48(sp)
  b527d0:	0b535040 	call	b53504 <__unpack_f>
  b527d4:	d9000104 	addi	r4,sp,4
  b527d8:	800b883a 	mov	r5,r16
  b527dc:	0b535040 	call	b53504 <__unpack_f>
  b527e0:	d8800217 	ldw	r2,8(sp)
  b527e4:	00c00044 	movi	r3,1
  b527e8:	01bfffc4 	movi	r6,-1
  b527ec:	1880062e 	bgeu	r3,r2,b52808 <__gtsf2+0x60>
  b527f0:	d8800617 	ldw	r2,24(sp)
  b527f4:	8809883a 	mov	r4,r17
  b527f8:	800b883a 	mov	r5,r16
  b527fc:	1880022e 	bgeu	r3,r2,b52808 <__gtsf2+0x60>
  b52800:	0b535cc0 	call	b535cc <__fpcmp_parts_f>
  b52804:	100d883a 	mov	r6,r2
  b52808:	3005883a 	mov	r2,r6
  b5280c:	dfc00c17 	ldw	ra,48(sp)
  b52810:	dc400b17 	ldw	r17,44(sp)
  b52814:	dc000a17 	ldw	r16,40(sp)
  b52818:	dec00d04 	addi	sp,sp,52
  b5281c:	f800283a 	ret

00b52820 <__ltsf2>:
  b52820:	defff304 	addi	sp,sp,-52
  b52824:	dc400b15 	stw	r17,44(sp)
  b52828:	dc400204 	addi	r17,sp,8
  b5282c:	dc000a15 	stw	r16,40(sp)
  b52830:	d9000015 	stw	r4,0(sp)
  b52834:	d9400115 	stw	r5,4(sp)
  b52838:	d809883a 	mov	r4,sp
  b5283c:	880b883a 	mov	r5,r17
  b52840:	dc000604 	addi	r16,sp,24
  b52844:	dfc00c15 	stw	ra,48(sp)
  b52848:	0b535040 	call	b53504 <__unpack_f>
  b5284c:	d9000104 	addi	r4,sp,4
  b52850:	800b883a 	mov	r5,r16
  b52854:	0b535040 	call	b53504 <__unpack_f>
  b52858:	d8800217 	ldw	r2,8(sp)
  b5285c:	00c00044 	movi	r3,1
  b52860:	180d883a 	mov	r6,r3
  b52864:	1880062e 	bgeu	r3,r2,b52880 <__ltsf2+0x60>
  b52868:	d8800617 	ldw	r2,24(sp)
  b5286c:	8809883a 	mov	r4,r17
  b52870:	800b883a 	mov	r5,r16
  b52874:	1880022e 	bgeu	r3,r2,b52880 <__ltsf2+0x60>
  b52878:	0b535cc0 	call	b535cc <__fpcmp_parts_f>
  b5287c:	100d883a 	mov	r6,r2
  b52880:	3005883a 	mov	r2,r6
  b52884:	dfc00c17 	ldw	ra,48(sp)
  b52888:	dc400b17 	ldw	r17,44(sp)
  b5288c:	dc000a17 	ldw	r16,40(sp)
  b52890:	dec00d04 	addi	sp,sp,52
  b52894:	f800283a 	ret

00b52898 <__lesf2>:
  b52898:	defff304 	addi	sp,sp,-52
  b5289c:	dc400b15 	stw	r17,44(sp)
  b528a0:	dc400204 	addi	r17,sp,8
  b528a4:	dc000a15 	stw	r16,40(sp)
  b528a8:	d9000015 	stw	r4,0(sp)
  b528ac:	d9400115 	stw	r5,4(sp)
  b528b0:	d809883a 	mov	r4,sp
  b528b4:	880b883a 	mov	r5,r17
  b528b8:	dc000604 	addi	r16,sp,24
  b528bc:	dfc00c15 	stw	ra,48(sp)
  b528c0:	0b535040 	call	b53504 <__unpack_f>
  b528c4:	d9000104 	addi	r4,sp,4
  b528c8:	800b883a 	mov	r5,r16
  b528cc:	0b535040 	call	b53504 <__unpack_f>
  b528d0:	d8800217 	ldw	r2,8(sp)
  b528d4:	00c00044 	movi	r3,1
  b528d8:	180d883a 	mov	r6,r3
  b528dc:	1880062e 	bgeu	r3,r2,b528f8 <__lesf2+0x60>
  b528e0:	d8800617 	ldw	r2,24(sp)
  b528e4:	8809883a 	mov	r4,r17
  b528e8:	800b883a 	mov	r5,r16
  b528ec:	1880022e 	bgeu	r3,r2,b528f8 <__lesf2+0x60>
  b528f0:	0b535cc0 	call	b535cc <__fpcmp_parts_f>
  b528f4:	100d883a 	mov	r6,r2
  b528f8:	3005883a 	mov	r2,r6
  b528fc:	dfc00c17 	ldw	ra,48(sp)
  b52900:	dc400b17 	ldw	r17,44(sp)
  b52904:	dc000a17 	ldw	r16,40(sp)
  b52908:	dec00d04 	addi	sp,sp,52
  b5290c:	f800283a 	ret

00b52910 <__floatsisf>:
  b52910:	2006d7fa 	srli	r3,r4,31
  b52914:	defffa04 	addi	sp,sp,-24
  b52918:	008000c4 	movi	r2,3
  b5291c:	dfc00515 	stw	ra,20(sp)
  b52920:	dc000415 	stw	r16,16(sp)
  b52924:	d8800015 	stw	r2,0(sp)
  b52928:	d8c00115 	stw	r3,4(sp)
  b5292c:	2000081e 	bne	r4,zero,b52950 <__floatsisf+0x40>
  b52930:	00800084 	movi	r2,2
  b52934:	d8800015 	stw	r2,0(sp)
  b52938:	d809883a 	mov	r4,sp
  b5293c:	0b533a40 	call	b533a4 <__pack_f>
  b52940:	dfc00517 	ldw	ra,20(sp)
  b52944:	dc000417 	ldw	r16,16(sp)
  b52948:	dec00604 	addi	sp,sp,24
  b5294c:	f800283a 	ret
  b52950:	00800784 	movi	r2,30
  b52954:	1807003a 	cmpeq	r3,r3,zero
  b52958:	d8800215 	stw	r2,8(sp)
  b5295c:	18000e1e 	bne	r3,zero,b52998 <__floatsisf+0x88>
  b52960:	00a00034 	movhi	r2,32768
  b52964:	20800e26 	beq	r4,r2,b529a0 <__floatsisf+0x90>
  b52968:	0121c83a 	sub	r16,zero,r4
  b5296c:	8009883a 	mov	r4,r16
  b52970:	dc000315 	stw	r16,12(sp)
  b52974:	0b533240 	call	b53324 <__clzsi2>
  b52978:	117fffc4 	addi	r5,r2,-1
  b5297c:	017fee0e 	bge	zero,r5,b52938 <__floatsisf+0x28>
  b52980:	d8800217 	ldw	r2,8(sp)
  b52984:	8146983a 	sll	r3,r16,r5
  b52988:	1145c83a 	sub	r2,r2,r5
  b5298c:	d8c00315 	stw	r3,12(sp)
  b52990:	d8800215 	stw	r2,8(sp)
  b52994:	003fe806 	br	b52938 <__floatsisf+0x28>
  b52998:	2021883a 	mov	r16,r4
  b5299c:	003ff306 	br	b5296c <__floatsisf+0x5c>
  b529a0:	00b3c034 	movhi	r2,52992
  b529a4:	003fe606 	br	b52940 <__floatsisf+0x30>

00b529a8 <__extendsfdf2>:
  b529a8:	defff904 	addi	sp,sp,-28
  b529ac:	d9000115 	stw	r4,4(sp)
  b529b0:	d9400204 	addi	r5,sp,8
  b529b4:	d9000104 	addi	r4,sp,4
  b529b8:	dfc00615 	stw	ra,24(sp)
  b529bc:	0b535040 	call	b53504 <__unpack_f>
  b529c0:	d9c00517 	ldw	r7,20(sp)
  b529c4:	0011883a 	mov	r8,zero
  b529c8:	400697ba 	slli	r3,r8,30
  b529cc:	3812d0ba 	srli	r9,r7,2
  b529d0:	380497ba 	slli	r2,r7,30
  b529d4:	d9000217 	ldw	r4,8(sp)
  b529d8:	d9400317 	ldw	r5,12(sp)
  b529dc:	d9800417 	ldw	r6,16(sp)
  b529e0:	48c6b03a 	or	r3,r9,r3
  b529e4:	100f883a 	mov	r7,r2
  b529e8:	d8c00015 	stw	r3,0(sp)
  b529ec:	0b531e00 	call	b531e0 <__make_dp>
  b529f0:	dfc00617 	ldw	ra,24(sp)
  b529f4:	dec00704 	addi	sp,sp,28
  b529f8:	f800283a 	ret

00b529fc <_fpadd_parts>:
  b529fc:	defff804 	addi	sp,sp,-32
  b52a00:	dcc00315 	stw	r19,12(sp)
  b52a04:	2027883a 	mov	r19,r4
  b52a08:	21000017 	ldw	r4,0(r4)
  b52a0c:	00c00044 	movi	r3,1
  b52a10:	dd400515 	stw	r21,20(sp)
  b52a14:	dd000415 	stw	r20,16(sp)
  b52a18:	ddc00715 	stw	r23,28(sp)
  b52a1c:	dd800615 	stw	r22,24(sp)
  b52a20:	dc800215 	stw	r18,8(sp)
  b52a24:	dc400115 	stw	r17,4(sp)
  b52a28:	dc000015 	stw	r16,0(sp)
  b52a2c:	282b883a 	mov	r21,r5
  b52a30:	3029883a 	mov	r20,r6
  b52a34:	1900632e 	bgeu	r3,r4,b52bc4 <_fpadd_parts+0x1c8>
  b52a38:	28800017 	ldw	r2,0(r5)
  b52a3c:	1880812e 	bgeu	r3,r2,b52c44 <_fpadd_parts+0x248>
  b52a40:	00c00104 	movi	r3,4
  b52a44:	20c0dc26 	beq	r4,r3,b52db8 <_fpadd_parts+0x3bc>
  b52a48:	10c07e26 	beq	r2,r3,b52c44 <_fpadd_parts+0x248>
  b52a4c:	00c00084 	movi	r3,2
  b52a50:	10c06726 	beq	r2,r3,b52bf0 <_fpadd_parts+0x1f4>
  b52a54:	20c07b26 	beq	r4,r3,b52c44 <_fpadd_parts+0x248>
  b52a58:	9dc00217 	ldw	r23,8(r19)
  b52a5c:	28c00217 	ldw	r3,8(r5)
  b52a60:	9c400317 	ldw	r17,12(r19)
  b52a64:	2bc00317 	ldw	r15,12(r5)
  b52a68:	b8cdc83a 	sub	r6,r23,r3
  b52a6c:	9c800417 	ldw	r18,16(r19)
  b52a70:	2c000417 	ldw	r16,16(r5)
  b52a74:	3009883a 	mov	r4,r6
  b52a78:	30009716 	blt	r6,zero,b52cd8 <_fpadd_parts+0x2dc>
  b52a7c:	00800fc4 	movi	r2,63
  b52a80:	11806b16 	blt	r2,r6,b52c30 <_fpadd_parts+0x234>
  b52a84:	0100a40e 	bge	zero,r4,b52d18 <_fpadd_parts+0x31c>
  b52a88:	35bff804 	addi	r22,r6,-32
  b52a8c:	b000bc16 	blt	r22,zero,b52d80 <_fpadd_parts+0x384>
  b52a90:	8596d83a 	srl	r11,r16,r22
  b52a94:	0019883a 	mov	r12,zero
  b52a98:	0013883a 	mov	r9,zero
  b52a9c:	01000044 	movi	r4,1
  b52aa0:	0015883a 	mov	r10,zero
  b52aa4:	b000be16 	blt	r22,zero,b52da0 <_fpadd_parts+0x3a4>
  b52aa8:	2590983a 	sll	r8,r4,r22
  b52aac:	000f883a 	mov	r7,zero
  b52ab0:	00bfffc4 	movi	r2,-1
  b52ab4:	3889883a 	add	r4,r7,r2
  b52ab8:	408b883a 	add	r5,r8,r2
  b52abc:	21cd803a 	cmpltu	r6,r4,r7
  b52ac0:	314b883a 	add	r5,r6,r5
  b52ac4:	7904703a 	and	r2,r15,r4
  b52ac8:	8146703a 	and	r3,r16,r5
  b52acc:	10c4b03a 	or	r2,r2,r3
  b52ad0:	10000226 	beq	r2,zero,b52adc <_fpadd_parts+0xe0>
  b52ad4:	02400044 	movi	r9,1
  b52ad8:	0015883a 	mov	r10,zero
  b52adc:	5a5eb03a 	or	r15,r11,r9
  b52ae0:	62a0b03a 	or	r16,r12,r10
  b52ae4:	99400117 	ldw	r5,4(r19)
  b52ae8:	a8800117 	ldw	r2,4(r21)
  b52aec:	28806e26 	beq	r5,r2,b52ca8 <_fpadd_parts+0x2ac>
  b52af0:	28006626 	beq	r5,zero,b52c8c <_fpadd_parts+0x290>
  b52af4:	7c45c83a 	sub	r2,r15,r17
  b52af8:	7889803a 	cmpltu	r4,r15,r2
  b52afc:	8487c83a 	sub	r3,r16,r18
  b52b00:	1909c83a 	sub	r4,r3,r4
  b52b04:	100d883a 	mov	r6,r2
  b52b08:	200f883a 	mov	r7,r4
  b52b0c:	38007716 	blt	r7,zero,b52cec <_fpadd_parts+0x2f0>
  b52b10:	a5c00215 	stw	r23,8(r20)
  b52b14:	a1c00415 	stw	r7,16(r20)
  b52b18:	a0000115 	stw	zero,4(r20)
  b52b1c:	a1800315 	stw	r6,12(r20)
  b52b20:	a2000317 	ldw	r8,12(r20)
  b52b24:	a2400417 	ldw	r9,16(r20)
  b52b28:	00bfffc4 	movi	r2,-1
  b52b2c:	408b883a 	add	r5,r8,r2
  b52b30:	2a09803a 	cmpltu	r4,r5,r8
  b52b34:	488d883a 	add	r6,r9,r2
  b52b38:	01c40034 	movhi	r7,4096
  b52b3c:	39ffffc4 	addi	r7,r7,-1
  b52b40:	218d883a 	add	r6,r4,r6
  b52b44:	39801736 	bltu	r7,r6,b52ba4 <_fpadd_parts+0x1a8>
  b52b48:	31c06526 	beq	r6,r7,b52ce0 <_fpadd_parts+0x2e4>
  b52b4c:	a3000217 	ldw	r12,8(r20)
  b52b50:	4209883a 	add	r4,r8,r8
  b52b54:	00bfffc4 	movi	r2,-1
  b52b58:	220f803a 	cmpltu	r7,r4,r8
  b52b5c:	4a4b883a 	add	r5,r9,r9
  b52b60:	394f883a 	add	r7,r7,r5
  b52b64:	2095883a 	add	r10,r4,r2
  b52b68:	3897883a 	add	r11,r7,r2
  b52b6c:	510d803a 	cmpltu	r6,r10,r4
  b52b70:	6099883a 	add	r12,r12,r2
  b52b74:	32d7883a 	add	r11,r6,r11
  b52b78:	00840034 	movhi	r2,4096
  b52b7c:	10bfffc4 	addi	r2,r2,-1
  b52b80:	2011883a 	mov	r8,r4
  b52b84:	3813883a 	mov	r9,r7
  b52b88:	a1000315 	stw	r4,12(r20)
  b52b8c:	a1c00415 	stw	r7,16(r20)
  b52b90:	a3000215 	stw	r12,8(r20)
  b52b94:	12c00336 	bltu	r2,r11,b52ba4 <_fpadd_parts+0x1a8>
  b52b98:	58bfed1e 	bne	r11,r2,b52b50 <_fpadd_parts+0x154>
  b52b9c:	00bfff84 	movi	r2,-2
  b52ba0:	12bfeb2e 	bgeu	r2,r10,b52b50 <_fpadd_parts+0x154>
  b52ba4:	a2800417 	ldw	r10,16(r20)
  b52ba8:	008000c4 	movi	r2,3
  b52bac:	00c80034 	movhi	r3,8192
  b52bb0:	18ffffc4 	addi	r3,r3,-1
  b52bb4:	a2400317 	ldw	r9,12(r20)
  b52bb8:	a0800015 	stw	r2,0(r20)
  b52bbc:	1a802336 	bltu	r3,r10,b52c4c <_fpadd_parts+0x250>
  b52bc0:	a027883a 	mov	r19,r20
  b52bc4:	9805883a 	mov	r2,r19
  b52bc8:	ddc00717 	ldw	r23,28(sp)
  b52bcc:	dd800617 	ldw	r22,24(sp)
  b52bd0:	dd400517 	ldw	r21,20(sp)
  b52bd4:	dd000417 	ldw	r20,16(sp)
  b52bd8:	dcc00317 	ldw	r19,12(sp)
  b52bdc:	dc800217 	ldw	r18,8(sp)
  b52be0:	dc400117 	ldw	r17,4(sp)
  b52be4:	dc000017 	ldw	r16,0(sp)
  b52be8:	dec00804 	addi	sp,sp,32
  b52bec:	f800283a 	ret
  b52bf0:	20fff41e 	bne	r4,r3,b52bc4 <_fpadd_parts+0x1c8>
  b52bf4:	31000015 	stw	r4,0(r6)
  b52bf8:	98800117 	ldw	r2,4(r19)
  b52bfc:	30800115 	stw	r2,4(r6)
  b52c00:	98c00217 	ldw	r3,8(r19)
  b52c04:	30c00215 	stw	r3,8(r6)
  b52c08:	98800317 	ldw	r2,12(r19)
  b52c0c:	30800315 	stw	r2,12(r6)
  b52c10:	98c00417 	ldw	r3,16(r19)
  b52c14:	30c00415 	stw	r3,16(r6)
  b52c18:	98800117 	ldw	r2,4(r19)
  b52c1c:	28c00117 	ldw	r3,4(r5)
  b52c20:	3027883a 	mov	r19,r6
  b52c24:	10c4703a 	and	r2,r2,r3
  b52c28:	30800115 	stw	r2,4(r6)
  b52c2c:	003fe506 	br	b52bc4 <_fpadd_parts+0x1c8>
  b52c30:	1dc02616 	blt	r3,r23,b52ccc <_fpadd_parts+0x2d0>
  b52c34:	0023883a 	mov	r17,zero
  b52c38:	182f883a 	mov	r23,r3
  b52c3c:	0025883a 	mov	r18,zero
  b52c40:	003fa806 	br	b52ae4 <_fpadd_parts+0xe8>
  b52c44:	a827883a 	mov	r19,r21
  b52c48:	003fde06 	br	b52bc4 <_fpadd_parts+0x1c8>
  b52c4c:	01800044 	movi	r6,1
  b52c50:	500497fa 	slli	r2,r10,31
  b52c54:	4808d07a 	srli	r4,r9,1
  b52c58:	518ad83a 	srl	r5,r10,r6
  b52c5c:	a2000217 	ldw	r8,8(r20)
  b52c60:	1108b03a 	or	r4,r2,r4
  b52c64:	0007883a 	mov	r3,zero
  b52c68:	4984703a 	and	r2,r9,r6
  b52c6c:	208cb03a 	or	r6,r4,r2
  b52c70:	28ceb03a 	or	r7,r5,r3
  b52c74:	42000044 	addi	r8,r8,1
  b52c78:	a027883a 	mov	r19,r20
  b52c7c:	a1c00415 	stw	r7,16(r20)
  b52c80:	a2000215 	stw	r8,8(r20)
  b52c84:	a1800315 	stw	r6,12(r20)
  b52c88:	003fce06 	br	b52bc4 <_fpadd_parts+0x1c8>
  b52c8c:	8bc5c83a 	sub	r2,r17,r15
  b52c90:	8889803a 	cmpltu	r4,r17,r2
  b52c94:	9407c83a 	sub	r3,r18,r16
  b52c98:	1909c83a 	sub	r4,r3,r4
  b52c9c:	100d883a 	mov	r6,r2
  b52ca0:	200f883a 	mov	r7,r4
  b52ca4:	003f9906 	br	b52b0c <_fpadd_parts+0x110>
  b52ca8:	7c45883a 	add	r2,r15,r17
  b52cac:	13c9803a 	cmpltu	r4,r2,r15
  b52cb0:	8487883a 	add	r3,r16,r18
  b52cb4:	20c9883a 	add	r4,r4,r3
  b52cb8:	a1400115 	stw	r5,4(r20)
  b52cbc:	a5c00215 	stw	r23,8(r20)
  b52cc0:	a0800315 	stw	r2,12(r20)
  b52cc4:	a1000415 	stw	r4,16(r20)
  b52cc8:	003fb606 	br	b52ba4 <_fpadd_parts+0x1a8>
  b52ccc:	001f883a 	mov	r15,zero
  b52cd0:	0021883a 	mov	r16,zero
  b52cd4:	003f8306 	br	b52ae4 <_fpadd_parts+0xe8>
  b52cd8:	018dc83a 	sub	r6,zero,r6
  b52cdc:	003f6706 	br	b52a7c <_fpadd_parts+0x80>
  b52ce0:	00bfff84 	movi	r2,-2
  b52ce4:	117faf36 	bltu	r2,r5,b52ba4 <_fpadd_parts+0x1a8>
  b52ce8:	003f9806 	br	b52b4c <_fpadd_parts+0x150>
  b52cec:	0005883a 	mov	r2,zero
  b52cf0:	1189c83a 	sub	r4,r2,r6
  b52cf4:	1105803a 	cmpltu	r2,r2,r4
  b52cf8:	01cbc83a 	sub	r5,zero,r7
  b52cfc:	2885c83a 	sub	r2,r5,r2
  b52d00:	01800044 	movi	r6,1
  b52d04:	a1800115 	stw	r6,4(r20)
  b52d08:	a5c00215 	stw	r23,8(r20)
  b52d0c:	a1000315 	stw	r4,12(r20)
  b52d10:	a0800415 	stw	r2,16(r20)
  b52d14:	003f8206 	br	b52b20 <_fpadd_parts+0x124>
  b52d18:	203f7226 	beq	r4,zero,b52ae4 <_fpadd_parts+0xe8>
  b52d1c:	35bff804 	addi	r22,r6,-32
  b52d20:	b9af883a 	add	r23,r23,r6
  b52d24:	b0003116 	blt	r22,zero,b52dec <_fpadd_parts+0x3f0>
  b52d28:	959ad83a 	srl	r13,r18,r22
  b52d2c:	001d883a 	mov	r14,zero
  b52d30:	000f883a 	mov	r7,zero
  b52d34:	01000044 	movi	r4,1
  b52d38:	0011883a 	mov	r8,zero
  b52d3c:	b0002516 	blt	r22,zero,b52dd4 <_fpadd_parts+0x3d8>
  b52d40:	2594983a 	sll	r10,r4,r22
  b52d44:	0013883a 	mov	r9,zero
  b52d48:	00bfffc4 	movi	r2,-1
  b52d4c:	4889883a 	add	r4,r9,r2
  b52d50:	508b883a 	add	r5,r10,r2
  b52d54:	224d803a 	cmpltu	r6,r4,r9
  b52d58:	314b883a 	add	r5,r6,r5
  b52d5c:	8904703a 	and	r2,r17,r4
  b52d60:	9146703a 	and	r3,r18,r5
  b52d64:	10c4b03a 	or	r2,r2,r3
  b52d68:	10000226 	beq	r2,zero,b52d74 <_fpadd_parts+0x378>
  b52d6c:	01c00044 	movi	r7,1
  b52d70:	0011883a 	mov	r8,zero
  b52d74:	69e2b03a 	or	r17,r13,r7
  b52d78:	7224b03a 	or	r18,r14,r8
  b52d7c:	003f5906 	br	b52ae4 <_fpadd_parts+0xe8>
  b52d80:	8407883a 	add	r3,r16,r16
  b52d84:	008007c4 	movi	r2,31
  b52d88:	1185c83a 	sub	r2,r2,r6
  b52d8c:	1886983a 	sll	r3,r3,r2
  b52d90:	7996d83a 	srl	r11,r15,r6
  b52d94:	8198d83a 	srl	r12,r16,r6
  b52d98:	1ad6b03a 	or	r11,r3,r11
  b52d9c:	003f3e06 	br	b52a98 <_fpadd_parts+0x9c>
  b52da0:	2006d07a 	srli	r3,r4,1
  b52da4:	008007c4 	movi	r2,31
  b52da8:	1185c83a 	sub	r2,r2,r6
  b52dac:	1890d83a 	srl	r8,r3,r2
  b52db0:	218e983a 	sll	r7,r4,r6
  b52db4:	003f3e06 	br	b52ab0 <_fpadd_parts+0xb4>
  b52db8:	113f821e 	bne	r2,r4,b52bc4 <_fpadd_parts+0x1c8>
  b52dbc:	28c00117 	ldw	r3,4(r5)
  b52dc0:	98800117 	ldw	r2,4(r19)
  b52dc4:	10ff7f26 	beq	r2,r3,b52bc4 <_fpadd_parts+0x1c8>
  b52dc8:	04c02db4 	movhi	r19,182
  b52dcc:	9cc40204 	addi	r19,r19,4104
  b52dd0:	003f7c06 	br	b52bc4 <_fpadd_parts+0x1c8>
  b52dd4:	2006d07a 	srli	r3,r4,1
  b52dd8:	008007c4 	movi	r2,31
  b52ddc:	1185c83a 	sub	r2,r2,r6
  b52de0:	1894d83a 	srl	r10,r3,r2
  b52de4:	2192983a 	sll	r9,r4,r6
  b52de8:	003fd706 	br	b52d48 <_fpadd_parts+0x34c>
  b52dec:	9487883a 	add	r3,r18,r18
  b52df0:	008007c4 	movi	r2,31
  b52df4:	1185c83a 	sub	r2,r2,r6
  b52df8:	1886983a 	sll	r3,r3,r2
  b52dfc:	899ad83a 	srl	r13,r17,r6
  b52e00:	919cd83a 	srl	r14,r18,r6
  b52e04:	1b5ab03a 	or	r13,r3,r13
  b52e08:	003fc906 	br	b52d30 <_fpadd_parts+0x334>

00b52e0c <__subdf3>:
  b52e0c:	deffea04 	addi	sp,sp,-88
  b52e10:	dcc01415 	stw	r19,80(sp)
  b52e14:	dcc00404 	addi	r19,sp,16
  b52e18:	2011883a 	mov	r8,r4
  b52e1c:	2813883a 	mov	r9,r5
  b52e20:	dc401315 	stw	r17,76(sp)
  b52e24:	d809883a 	mov	r4,sp
  b52e28:	980b883a 	mov	r5,r19
  b52e2c:	dc400904 	addi	r17,sp,36
  b52e30:	dfc01515 	stw	ra,84(sp)
  b52e34:	da400115 	stw	r9,4(sp)
  b52e38:	d9c00315 	stw	r7,12(sp)
  b52e3c:	da000015 	stw	r8,0(sp)
  b52e40:	d9800215 	stw	r6,8(sp)
  b52e44:	0b539b40 	call	b539b4 <__unpack_d>
  b52e48:	d9000204 	addi	r4,sp,8
  b52e4c:	880b883a 	mov	r5,r17
  b52e50:	0b539b40 	call	b539b4 <__unpack_d>
  b52e54:	d8800a17 	ldw	r2,40(sp)
  b52e58:	880b883a 	mov	r5,r17
  b52e5c:	9809883a 	mov	r4,r19
  b52e60:	d9800e04 	addi	r6,sp,56
  b52e64:	1080005c 	xori	r2,r2,1
  b52e68:	d8800a15 	stw	r2,40(sp)
  b52e6c:	0b529fc0 	call	b529fc <_fpadd_parts>
  b52e70:	1009883a 	mov	r4,r2
  b52e74:	0b536a00 	call	b536a0 <__pack_d>
  b52e78:	dfc01517 	ldw	ra,84(sp)
  b52e7c:	dcc01417 	ldw	r19,80(sp)
  b52e80:	dc401317 	ldw	r17,76(sp)
  b52e84:	dec01604 	addi	sp,sp,88
  b52e88:	f800283a 	ret

00b52e8c <__adddf3>:
  b52e8c:	deffea04 	addi	sp,sp,-88
  b52e90:	dcc01415 	stw	r19,80(sp)
  b52e94:	dcc00404 	addi	r19,sp,16
  b52e98:	2011883a 	mov	r8,r4
  b52e9c:	2813883a 	mov	r9,r5
  b52ea0:	dc401315 	stw	r17,76(sp)
  b52ea4:	d809883a 	mov	r4,sp
  b52ea8:	980b883a 	mov	r5,r19
  b52eac:	dc400904 	addi	r17,sp,36
  b52eb0:	dfc01515 	stw	ra,84(sp)
  b52eb4:	da400115 	stw	r9,4(sp)
  b52eb8:	d9c00315 	stw	r7,12(sp)
  b52ebc:	da000015 	stw	r8,0(sp)
  b52ec0:	d9800215 	stw	r6,8(sp)
  b52ec4:	0b539b40 	call	b539b4 <__unpack_d>
  b52ec8:	d9000204 	addi	r4,sp,8
  b52ecc:	880b883a 	mov	r5,r17
  b52ed0:	0b539b40 	call	b539b4 <__unpack_d>
  b52ed4:	d9800e04 	addi	r6,sp,56
  b52ed8:	9809883a 	mov	r4,r19
  b52edc:	880b883a 	mov	r5,r17
  b52ee0:	0b529fc0 	call	b529fc <_fpadd_parts>
  b52ee4:	1009883a 	mov	r4,r2
  b52ee8:	0b536a00 	call	b536a0 <__pack_d>
  b52eec:	dfc01517 	ldw	ra,84(sp)
  b52ef0:	dcc01417 	ldw	r19,80(sp)
  b52ef4:	dc401317 	ldw	r17,76(sp)
  b52ef8:	dec01604 	addi	sp,sp,88
  b52efc:	f800283a 	ret

00b52f00 <__divdf3>:
  b52f00:	deffed04 	addi	sp,sp,-76
  b52f04:	dcc01115 	stw	r19,68(sp)
  b52f08:	dcc00404 	addi	r19,sp,16
  b52f0c:	2011883a 	mov	r8,r4
  b52f10:	2813883a 	mov	r9,r5
  b52f14:	dc000e15 	stw	r16,56(sp)
  b52f18:	d809883a 	mov	r4,sp
  b52f1c:	980b883a 	mov	r5,r19
  b52f20:	dc000904 	addi	r16,sp,36
  b52f24:	dfc01215 	stw	ra,72(sp)
  b52f28:	da400115 	stw	r9,4(sp)
  b52f2c:	d9c00315 	stw	r7,12(sp)
  b52f30:	da000015 	stw	r8,0(sp)
  b52f34:	d9800215 	stw	r6,8(sp)
  b52f38:	dc801015 	stw	r18,64(sp)
  b52f3c:	dc400f15 	stw	r17,60(sp)
  b52f40:	0b539b40 	call	b539b4 <__unpack_d>
  b52f44:	d9000204 	addi	r4,sp,8
  b52f48:	800b883a 	mov	r5,r16
  b52f4c:	0b539b40 	call	b539b4 <__unpack_d>
  b52f50:	d9000417 	ldw	r4,16(sp)
  b52f54:	00800044 	movi	r2,1
  b52f58:	11000b2e 	bgeu	r2,r4,b52f88 <__divdf3+0x88>
  b52f5c:	d9400917 	ldw	r5,36(sp)
  b52f60:	1140762e 	bgeu	r2,r5,b5313c <__divdf3+0x23c>
  b52f64:	d8800517 	ldw	r2,20(sp)
  b52f68:	d8c00a17 	ldw	r3,40(sp)
  b52f6c:	01800104 	movi	r6,4
  b52f70:	10c4f03a 	xor	r2,r2,r3
  b52f74:	d8800515 	stw	r2,20(sp)
  b52f78:	21800226 	beq	r4,r6,b52f84 <__divdf3+0x84>
  b52f7c:	00800084 	movi	r2,2
  b52f80:	2080141e 	bne	r4,r2,b52fd4 <__divdf3+0xd4>
  b52f84:	29000926 	beq	r5,r4,b52fac <__divdf3+0xac>
  b52f88:	9809883a 	mov	r4,r19
  b52f8c:	0b536a00 	call	b536a0 <__pack_d>
  b52f90:	dfc01217 	ldw	ra,72(sp)
  b52f94:	dcc01117 	ldw	r19,68(sp)
  b52f98:	dc801017 	ldw	r18,64(sp)
  b52f9c:	dc400f17 	ldw	r17,60(sp)
  b52fa0:	dc000e17 	ldw	r16,56(sp)
  b52fa4:	dec01304 	addi	sp,sp,76
  b52fa8:	f800283a 	ret
  b52fac:	01002db4 	movhi	r4,182
  b52fb0:	21040204 	addi	r4,r4,4104
  b52fb4:	0b536a00 	call	b536a0 <__pack_d>
  b52fb8:	dfc01217 	ldw	ra,72(sp)
  b52fbc:	dcc01117 	ldw	r19,68(sp)
  b52fc0:	dc801017 	ldw	r18,64(sp)
  b52fc4:	dc400f17 	ldw	r17,60(sp)
  b52fc8:	dc000e17 	ldw	r16,56(sp)
  b52fcc:	dec01304 	addi	sp,sp,76
  b52fd0:	f800283a 	ret
  b52fd4:	29805b26 	beq	r5,r6,b53144 <__divdf3+0x244>
  b52fd8:	28802d26 	beq	r5,r2,b53090 <__divdf3+0x190>
  b52fdc:	d8c00617 	ldw	r3,24(sp)
  b52fe0:	d8800b17 	ldw	r2,44(sp)
  b52fe4:	d9c00817 	ldw	r7,32(sp)
  b52fe8:	dc400d17 	ldw	r17,52(sp)
  b52fec:	188bc83a 	sub	r5,r3,r2
  b52ff0:	d9800717 	ldw	r6,28(sp)
  b52ff4:	dc000c17 	ldw	r16,48(sp)
  b52ff8:	d9400615 	stw	r5,24(sp)
  b52ffc:	3c403836 	bltu	r7,r17,b530e0 <__divdf3+0x1e0>
  b53000:	89c03626 	beq	r17,r7,b530dc <__divdf3+0x1dc>
  b53004:	0015883a 	mov	r10,zero
  b53008:	001d883a 	mov	r14,zero
  b5300c:	02c40034 	movhi	r11,4096
  b53010:	001f883a 	mov	r15,zero
  b53014:	003f883a 	mov	ra,zero
  b53018:	04800f44 	movi	r18,61
  b5301c:	00000f06 	br	b5305c <__divdf3+0x15c>
  b53020:	601d883a 	mov	r14,r12
  b53024:	681f883a 	mov	r15,r13
  b53028:	400d883a 	mov	r6,r8
  b5302c:	100f883a 	mov	r7,r2
  b53030:	3191883a 	add	r8,r6,r6
  b53034:	5808d07a 	srli	r4,r11,1
  b53038:	4185803a 	cmpltu	r2,r8,r6
  b5303c:	39d3883a 	add	r9,r7,r7
  b53040:	28c6b03a 	or	r3,r5,r3
  b53044:	1245883a 	add	r2,r2,r9
  b53048:	1815883a 	mov	r10,r3
  b5304c:	2017883a 	mov	r11,r4
  b53050:	400d883a 	mov	r6,r8
  b53054:	100f883a 	mov	r7,r2
  b53058:	fc801726 	beq	ra,r18,b530b8 <__divdf3+0x1b8>
  b5305c:	580a97fa 	slli	r5,r11,31
  b53060:	5006d07a 	srli	r3,r10,1
  b53064:	ffc00044 	addi	ra,ra,1
  b53068:	3c7ff136 	bltu	r7,r17,b53030 <__divdf3+0x130>
  b5306c:	3411c83a 	sub	r8,r6,r16
  b53070:	3205803a 	cmpltu	r2,r6,r8
  b53074:	3c53c83a 	sub	r9,r7,r17
  b53078:	7298b03a 	or	r12,r14,r10
  b5307c:	7adab03a 	or	r13,r15,r11
  b53080:	4885c83a 	sub	r2,r9,r2
  b53084:	89ffe61e 	bne	r17,r7,b53020 <__divdf3+0x120>
  b53088:	343fe936 	bltu	r6,r16,b53030 <__divdf3+0x130>
  b5308c:	003fe406 	br	b53020 <__divdf3+0x120>
  b53090:	9809883a 	mov	r4,r19
  b53094:	d9800415 	stw	r6,16(sp)
  b53098:	0b536a00 	call	b536a0 <__pack_d>
  b5309c:	dfc01217 	ldw	ra,72(sp)
  b530a0:	dcc01117 	ldw	r19,68(sp)
  b530a4:	dc801017 	ldw	r18,64(sp)
  b530a8:	dc400f17 	ldw	r17,60(sp)
  b530ac:	dc000e17 	ldw	r16,56(sp)
  b530b0:	dec01304 	addi	sp,sp,76
  b530b4:	f800283a 	ret
  b530b8:	00803fc4 	movi	r2,255
  b530bc:	7090703a 	and	r8,r14,r2
  b530c0:	00802004 	movi	r2,128
  b530c4:	0007883a 	mov	r3,zero
  b530c8:	0013883a 	mov	r9,zero
  b530cc:	40800d26 	beq	r8,r2,b53104 <__divdf3+0x204>
  b530d0:	dbc00815 	stw	r15,32(sp)
  b530d4:	db800715 	stw	r14,28(sp)
  b530d8:	003fab06 	br	b52f88 <__divdf3+0x88>
  b530dc:	343fc92e 	bgeu	r6,r16,b53004 <__divdf3+0x104>
  b530e0:	3185883a 	add	r2,r6,r6
  b530e4:	1189803a 	cmpltu	r4,r2,r6
  b530e8:	39c7883a 	add	r3,r7,r7
  b530ec:	20c9883a 	add	r4,r4,r3
  b530f0:	297fffc4 	addi	r5,r5,-1
  b530f4:	100d883a 	mov	r6,r2
  b530f8:	200f883a 	mov	r7,r4
  b530fc:	d9400615 	stw	r5,24(sp)
  b53100:	003fc006 	br	b53004 <__divdf3+0x104>
  b53104:	483ff21e 	bne	r9,zero,b530d0 <__divdf3+0x1d0>
  b53108:	01004004 	movi	r4,256
  b5310c:	7104703a 	and	r2,r14,r4
  b53110:	10c4b03a 	or	r2,r2,r3
  b53114:	103fee1e 	bne	r2,zero,b530d0 <__divdf3+0x1d0>
  b53118:	31c4b03a 	or	r2,r6,r7
  b5311c:	103fec26 	beq	r2,zero,b530d0 <__divdf3+0x1d0>
  b53120:	7205883a 	add	r2,r14,r8
  b53124:	1391803a 	cmpltu	r8,r2,r14
  b53128:	43d1883a 	add	r8,r8,r15
  b5312c:	013fc004 	movi	r4,-256
  b53130:	111c703a 	and	r14,r2,r4
  b53134:	401f883a 	mov	r15,r8
  b53138:	003fe506 	br	b530d0 <__divdf3+0x1d0>
  b5313c:	8009883a 	mov	r4,r16
  b53140:	003f9206 	br	b52f8c <__divdf3+0x8c>
  b53144:	9809883a 	mov	r4,r19
  b53148:	d8000715 	stw	zero,28(sp)
  b5314c:	d8000815 	stw	zero,32(sp)
  b53150:	d8000615 	stw	zero,24(sp)
  b53154:	003f8d06 	br	b52f8c <__divdf3+0x8c>

00b53158 <__nedf2>:
  b53158:	deffef04 	addi	sp,sp,-68
  b5315c:	dc400f15 	stw	r17,60(sp)
  b53160:	dc400404 	addi	r17,sp,16
  b53164:	2005883a 	mov	r2,r4
  b53168:	2807883a 	mov	r3,r5
  b5316c:	dc000e15 	stw	r16,56(sp)
  b53170:	d809883a 	mov	r4,sp
  b53174:	880b883a 	mov	r5,r17
  b53178:	dc000904 	addi	r16,sp,36
  b5317c:	d8c00115 	stw	r3,4(sp)
  b53180:	d8800015 	stw	r2,0(sp)
  b53184:	d9800215 	stw	r6,8(sp)
  b53188:	dfc01015 	stw	ra,64(sp)
  b5318c:	d9c00315 	stw	r7,12(sp)
  b53190:	0b539b40 	call	b539b4 <__unpack_d>
  b53194:	d9000204 	addi	r4,sp,8
  b53198:	800b883a 	mov	r5,r16
  b5319c:	0b539b40 	call	b539b4 <__unpack_d>
  b531a0:	d8800417 	ldw	r2,16(sp)
  b531a4:	00c00044 	movi	r3,1
  b531a8:	180d883a 	mov	r6,r3
  b531ac:	1880062e 	bgeu	r3,r2,b531c8 <__nedf2+0x70>
  b531b0:	d8800917 	ldw	r2,36(sp)
  b531b4:	8809883a 	mov	r4,r17
  b531b8:	800b883a 	mov	r5,r16
  b531bc:	1880022e 	bgeu	r3,r2,b531c8 <__nedf2+0x70>
  b531c0:	0b53aec0 	call	b53aec <__fpcmp_parts_d>
  b531c4:	100d883a 	mov	r6,r2
  b531c8:	3005883a 	mov	r2,r6
  b531cc:	dfc01017 	ldw	ra,64(sp)
  b531d0:	dc400f17 	ldw	r17,60(sp)
  b531d4:	dc000e17 	ldw	r16,56(sp)
  b531d8:	dec01104 	addi	sp,sp,68
  b531dc:	f800283a 	ret

00b531e0 <__make_dp>:
  b531e0:	defff904 	addi	sp,sp,-28
  b531e4:	d8c00717 	ldw	r3,28(sp)
  b531e8:	d9000015 	stw	r4,0(sp)
  b531ec:	d809883a 	mov	r4,sp
  b531f0:	dfc00515 	stw	ra,20(sp)
  b531f4:	d9c00615 	stw	r7,24(sp)
  b531f8:	d9400115 	stw	r5,4(sp)
  b531fc:	d9800215 	stw	r6,8(sp)
  b53200:	d8c00415 	stw	r3,16(sp)
  b53204:	d9c00315 	stw	r7,12(sp)
  b53208:	0b536a00 	call	b536a0 <__pack_d>
  b5320c:	dfc00517 	ldw	ra,20(sp)
  b53210:	dec00704 	addi	sp,sp,28
  b53214:	f800283a 	ret

00b53218 <__truncdfsf2>:
  b53218:	defff804 	addi	sp,sp,-32
  b5321c:	2005883a 	mov	r2,r4
  b53220:	2807883a 	mov	r3,r5
  b53224:	d809883a 	mov	r4,sp
  b53228:	d9400204 	addi	r5,sp,8
  b5322c:	d8c00115 	stw	r3,4(sp)
  b53230:	d8800015 	stw	r2,0(sp)
  b53234:	dfc00715 	stw	ra,28(sp)
  b53238:	0b539b40 	call	b539b4 <__unpack_d>
  b5323c:	d9c00517 	ldw	r7,20(sp)
  b53240:	da000617 	ldw	r8,24(sp)
  b53244:	02d00034 	movhi	r11,16384
  b53248:	5affffc4 	addi	r11,r11,-1
  b5324c:	3812d7ba 	srli	r9,r7,30
  b53250:	401a90ba 	slli	r13,r8,2
  b53254:	3ac4703a 	and	r2,r7,r11
  b53258:	0007883a 	mov	r3,zero
  b5325c:	6a52b03a 	or	r9,r13,r9
  b53260:	10c4b03a 	or	r2,r2,r3
  b53264:	d9000217 	ldw	r4,8(sp)
  b53268:	d9400317 	ldw	r5,12(sp)
  b5326c:	d9800417 	ldw	r6,16(sp)
  b53270:	480f883a 	mov	r7,r9
  b53274:	10000126 	beq	r2,zero,b5327c <__truncdfsf2+0x64>
  b53278:	49c00054 	ori	r7,r9,1
  b5327c:	0b536740 	call	b53674 <__make_fp>
  b53280:	dfc00717 	ldw	ra,28(sp)
  b53284:	dec00804 	addi	sp,sp,32
  b53288:	f800283a 	ret

00b5328c <__muldi3>:
  b5328c:	2011883a 	mov	r8,r4
  b53290:	427fffcc 	andi	r9,r8,65535
  b53294:	4018d43a 	srli	r12,r8,16
  b53298:	32bfffcc 	andi	r10,r6,65535
  b5329c:	3016d43a 	srli	r11,r6,16
  b532a0:	4a85383a 	mul	r2,r9,r10
  b532a4:	6295383a 	mul	r10,r12,r10
  b532a8:	4ad3383a 	mul	r9,r9,r11
  b532ac:	113fffcc 	andi	r4,r2,65535
  b532b0:	1004d43a 	srli	r2,r2,16
  b532b4:	4a93883a 	add	r9,r9,r10
  b532b8:	3807883a 	mov	r3,r7
  b532bc:	1245883a 	add	r2,r2,r9
  b532c0:	280f883a 	mov	r7,r5
  b532c4:	180b883a 	mov	r5,r3
  b532c8:	1006943a 	slli	r3,r2,16
  b532cc:	defffd04 	addi	sp,sp,-12
  b532d0:	dc800215 	stw	r18,8(sp)
  b532d4:	1907883a 	add	r3,r3,r4
  b532d8:	dc400115 	stw	r17,4(sp)
  b532dc:	dc000015 	stw	r16,0(sp)
  b532e0:	4165383a 	mul	r18,r8,r5
  b532e4:	31e3383a 	mul	r17,r6,r7
  b532e8:	1012d43a 	srli	r9,r2,16
  b532ec:	62d9383a 	mul	r12,r12,r11
  b532f0:	181f883a 	mov	r15,r3
  b532f4:	1280022e 	bgeu	r2,r10,b53300 <__muldi3+0x74>
  b532f8:	00800074 	movhi	r2,1
  b532fc:	6099883a 	add	r12,r12,r2
  b53300:	624d883a 	add	r6,r12,r9
  b53304:	9187883a 	add	r3,r18,r6
  b53308:	88c7883a 	add	r3,r17,r3
  b5330c:	7805883a 	mov	r2,r15
  b53310:	dc800217 	ldw	r18,8(sp)
  b53314:	dc400117 	ldw	r17,4(sp)
  b53318:	dc000017 	ldw	r16,0(sp)
  b5331c:	dec00304 	addi	sp,sp,12
  b53320:	f800283a 	ret

00b53324 <__clzsi2>:
  b53324:	00bfffd4 	movui	r2,65535
  b53328:	11000e36 	bltu	r2,r4,b53364 <__clzsi2+0x40>
  b5332c:	00803fc4 	movi	r2,255
  b53330:	01400204 	movi	r5,8
  b53334:	0007883a 	mov	r3,zero
  b53338:	11001036 	bltu	r2,r4,b5337c <__clzsi2+0x58>
  b5333c:	000b883a 	mov	r5,zero
  b53340:	20c6d83a 	srl	r3,r4,r3
  b53344:	00802db4 	movhi	r2,182
  b53348:	10840704 	addi	r2,r2,4124
  b5334c:	1887883a 	add	r3,r3,r2
  b53350:	18800003 	ldbu	r2,0(r3)
  b53354:	00c00804 	movi	r3,32
  b53358:	2885883a 	add	r2,r5,r2
  b5335c:	1885c83a 	sub	r2,r3,r2
  b53360:	f800283a 	ret
  b53364:	01400404 	movi	r5,16
  b53368:	00804034 	movhi	r2,256
  b5336c:	10bfffc4 	addi	r2,r2,-1
  b53370:	2807883a 	mov	r3,r5
  b53374:	113ff22e 	bgeu	r2,r4,b53340 <__clzsi2+0x1c>
  b53378:	01400604 	movi	r5,24
  b5337c:	2807883a 	mov	r3,r5
  b53380:	20c6d83a 	srl	r3,r4,r3
  b53384:	00802db4 	movhi	r2,182
  b53388:	10840704 	addi	r2,r2,4124
  b5338c:	1887883a 	add	r3,r3,r2
  b53390:	18800003 	ldbu	r2,0(r3)
  b53394:	00c00804 	movi	r3,32
  b53398:	2885883a 	add	r2,r5,r2
  b5339c:	1885c83a 	sub	r2,r3,r2
  b533a0:	f800283a 	ret

00b533a4 <__pack_f>:
  b533a4:	20c00017 	ldw	r3,0(r4)
  b533a8:	01c00044 	movi	r7,1
  b533ac:	21800317 	ldw	r6,12(r4)
  b533b0:	21400117 	ldw	r5,4(r4)
  b533b4:	38c02d2e 	bgeu	r7,r3,b5346c <__pack_f+0xc8>
  b533b8:	00800104 	movi	r2,4
  b533bc:	18802826 	beq	r3,r2,b53460 <__pack_f+0xbc>
  b533c0:	00800084 	movi	r2,2
  b533c4:	18800126 	beq	r3,r2,b533cc <__pack_f+0x28>
  b533c8:	3000101e 	bne	r6,zero,b5340c <__pack_f+0x68>
  b533cc:	000d883a 	mov	r6,zero
  b533d0:	0007883a 	mov	r3,zero
  b533d4:	19003fcc 	andi	r4,r3,255
  b533d8:	200895fa 	slli	r4,r4,23
  b533dc:	00c02034 	movhi	r3,128
  b533e0:	18ffffc4 	addi	r3,r3,-1
  b533e4:	30c6703a 	and	r3,r6,r3
  b533e8:	10a0002c 	andhi	r2,r2,32768
  b533ec:	10c4b03a 	or	r2,r2,r3
  b533f0:	280a97fa 	slli	r5,r5,31
  b533f4:	1104b03a 	or	r2,r2,r4
  b533f8:	00e00034 	movhi	r3,32768
  b533fc:	18ffffc4 	addi	r3,r3,-1
  b53400:	10c4703a 	and	r2,r2,r3
  b53404:	1144b03a 	or	r2,r2,r5
  b53408:	f800283a 	ret
  b5340c:	21000217 	ldw	r4,8(r4)
  b53410:	00bfe084 	movi	r2,-126
  b53414:	20801b16 	blt	r4,r2,b53484 <__pack_f+0xe0>
  b53418:	00801fc4 	movi	r2,127
  b5341c:	11001016 	blt	r2,r4,b53460 <__pack_f+0xbc>
  b53420:	308e703a 	and	r7,r6,r2
  b53424:	2087883a 	add	r3,r4,r2
  b53428:	00801004 	movi	r2,64
  b5342c:	38800526 	beq	r7,r2,b53444 <__pack_f+0xa0>
  b53430:	31800fc4 	addi	r6,r6,63
  b53434:	30000716 	blt	r6,zero,b53454 <__pack_f+0xb0>
  b53438:	300490ba 	slli	r2,r6,2
  b5343c:	100cd27a 	srli	r6,r2,9
  b53440:	003fe406 	br	b533d4 <__pack_f+0x30>
  b53444:	3080200c 	andi	r2,r6,128
  b53448:	103ffa26 	beq	r2,zero,b53434 <__pack_f+0x90>
  b5344c:	31cd883a 	add	r6,r6,r7
  b53450:	003ff806 	br	b53434 <__pack_f+0x90>
  b53454:	300cd07a 	srli	r6,r6,1
  b53458:	18c00044 	addi	r3,r3,1
  b5345c:	003ff606 	br	b53438 <__pack_f+0x94>
  b53460:	000d883a 	mov	r6,zero
  b53464:	00ffffc4 	movi	r3,-1
  b53468:	003fda06 	br	b533d4 <__pack_f+0x30>
  b5346c:	31800434 	orhi	r6,r6,16
  b53470:	00802034 	movhi	r2,128
  b53474:	10bfffc4 	addi	r2,r2,-1
  b53478:	308c703a 	and	r6,r6,r2
  b5347c:	00ffffc4 	movi	r3,-1
  b53480:	003fd406 	br	b533d4 <__pack_f+0x30>
  b53484:	1109c83a 	sub	r4,r2,r4
  b53488:	00800644 	movi	r2,25
  b5348c:	11001216 	blt	r2,r4,b534d8 <__pack_f+0x134>
  b53490:	3904983a 	sll	r2,r7,r4
  b53494:	3106d83a 	srl	r3,r6,r4
  b53498:	10bfffc4 	addi	r2,r2,-1
  b5349c:	3084703a 	and	r2,r6,r2
  b534a0:	1004c03a 	cmpne	r2,r2,zero
  b534a4:	1886b03a 	or	r3,r3,r2
  b534a8:	19001fcc 	andi	r4,r3,127
  b534ac:	00801004 	movi	r2,64
  b534b0:	20800c26 	beq	r4,r2,b534e4 <__pack_f+0x140>
  b534b4:	18c00fc4 	addi	r3,r3,63
  b534b8:	00900034 	movhi	r2,16384
  b534bc:	10bfffc4 	addi	r2,r2,-1
  b534c0:	180cd1fa 	srli	r6,r3,7
  b534c4:	10c7803a 	cmpltu	r3,r2,r3
  b534c8:	00802034 	movhi	r2,128
  b534cc:	10bfffc4 	addi	r2,r2,-1
  b534d0:	308c703a 	and	r6,r6,r2
  b534d4:	003fbf06 	br	b533d4 <__pack_f+0x30>
  b534d8:	0007883a 	mov	r3,zero
  b534dc:	000d883a 	mov	r6,zero
  b534e0:	003ff906 	br	b534c8 <__pack_f+0x124>
  b534e4:	1880200c 	andi	r2,r3,128
  b534e8:	10000126 	beq	r2,zero,b534f0 <__pack_f+0x14c>
  b534ec:	1907883a 	add	r3,r3,r4
  b534f0:	180cd1fa 	srli	r6,r3,7
  b534f4:	00900034 	movhi	r2,16384
  b534f8:	10bfffc4 	addi	r2,r2,-1
  b534fc:	10c7803a 	cmpltu	r3,r2,r3
  b53500:	003ff106 	br	b534c8 <__pack_f+0x124>

00b53504 <__unpack_f>:
  b53504:	21800017 	ldw	r6,0(r4)
  b53508:	00c02034 	movhi	r3,128
  b5350c:	18ffffc4 	addi	r3,r3,-1
  b53510:	3004d5fa 	srli	r2,r6,23
  b53514:	3008d7fa 	srli	r4,r6,31
  b53518:	30ce703a 	and	r7,r6,r3
  b5351c:	10c03fcc 	andi	r3,r2,255
  b53520:	29000115 	stw	r4,4(r5)
  b53524:	1800131e 	bne	r3,zero,b53574 <__unpack_f+0x70>
  b53528:	38000f26 	beq	r7,zero,b53568 <__unpack_f+0x64>
  b5352c:	380691fa 	slli	r3,r7,7
  b53530:	01bfe084 	movi	r6,-126
  b53534:	008000c4 	movi	r2,3
  b53538:	01100034 	movhi	r4,16384
  b5353c:	213fffc4 	addi	r4,r4,-1
  b53540:	28800015 	stw	r2,0(r5)
  b53544:	29800215 	stw	r6,8(r5)
  b53548:	20c00536 	bltu	r4,r3,b53560 <__unpack_f+0x5c>
  b5354c:	3005883a 	mov	r2,r6
  b53550:	18c7883a 	add	r3,r3,r3
  b53554:	10bfffc4 	addi	r2,r2,-1
  b53558:	20fffd2e 	bgeu	r4,r3,b53550 <__unpack_f+0x4c>
  b5355c:	28800215 	stw	r2,8(r5)
  b53560:	28c00315 	stw	r3,12(r5)
  b53564:	f800283a 	ret
  b53568:	00800084 	movi	r2,2
  b5356c:	28800015 	stw	r2,0(r5)
  b53570:	f800283a 	ret
  b53574:	00803fc4 	movi	r2,255
  b53578:	18800826 	beq	r3,r2,b5359c <__unpack_f+0x98>
  b5357c:	380491fa 	slli	r2,r7,7
  b53580:	18ffe044 	addi	r3,r3,-127
  b53584:	28c00215 	stw	r3,8(r5)
  b53588:	10900034 	orhi	r2,r2,16384
  b5358c:	28800315 	stw	r2,12(r5)
  b53590:	008000c4 	movi	r2,3
  b53594:	28800015 	stw	r2,0(r5)
  b53598:	f800283a 	ret
  b5359c:	3800031e 	bne	r7,zero,b535ac <__unpack_f+0xa8>
  b535a0:	00800104 	movi	r2,4
  b535a4:	28800015 	stw	r2,0(r5)
  b535a8:	f800283a 	ret
  b535ac:	3080042c 	andhi	r2,r6,16
  b535b0:	10000426 	beq	r2,zero,b535c4 <__unpack_f+0xc0>
  b535b4:	00800044 	movi	r2,1
  b535b8:	28800015 	stw	r2,0(r5)
  b535bc:	29c00315 	stw	r7,12(r5)
  b535c0:	f800283a 	ret
  b535c4:	28000015 	stw	zero,0(r5)
  b535c8:	003ffc06 	br	b535bc <__unpack_f+0xb8>

00b535cc <__fpcmp_parts_f>:
  b535cc:	21800017 	ldw	r6,0(r4)
  b535d0:	00c00044 	movi	r3,1
  b535d4:	19800a2e 	bgeu	r3,r6,b53600 <__fpcmp_parts_f+0x34>
  b535d8:	28800017 	ldw	r2,0(r5)
  b535dc:	1880082e 	bgeu	r3,r2,b53600 <__fpcmp_parts_f+0x34>
  b535e0:	00c00104 	movi	r3,4
  b535e4:	30c01e26 	beq	r6,r3,b53660 <__fpcmp_parts_f+0x94>
  b535e8:	10c01a26 	beq	r2,r3,b53654 <__fpcmp_parts_f+0x88>
  b535ec:	00c00084 	movi	r3,2
  b535f0:	30c00526 	beq	r6,r3,b53608 <__fpcmp_parts_f+0x3c>
  b535f4:	10c0071e 	bne	r2,r3,b53614 <__fpcmp_parts_f+0x48>
  b535f8:	20800117 	ldw	r2,4(r4)
  b535fc:	1000091e 	bne	r2,zero,b53624 <__fpcmp_parts_f+0x58>
  b53600:	00800044 	movi	r2,1
  b53604:	f800283a 	ret
  b53608:	10c0121e 	bne	r2,r3,b53654 <__fpcmp_parts_f+0x88>
  b5360c:	0005883a 	mov	r2,zero
  b53610:	f800283a 	ret
  b53614:	20c00117 	ldw	r3,4(r4)
  b53618:	28800117 	ldw	r2,4(r5)
  b5361c:	18800326 	beq	r3,r2,b5362c <__fpcmp_parts_f+0x60>
  b53620:	183ff726 	beq	r3,zero,b53600 <__fpcmp_parts_f+0x34>
  b53624:	00bfffc4 	movi	r2,-1
  b53628:	f800283a 	ret
  b5362c:	21800217 	ldw	r6,8(r4)
  b53630:	28800217 	ldw	r2,8(r5)
  b53634:	11bffa16 	blt	r2,r6,b53620 <__fpcmp_parts_f+0x54>
  b53638:	30800416 	blt	r6,r2,b5364c <__fpcmp_parts_f+0x80>
  b5363c:	21000317 	ldw	r4,12(r4)
  b53640:	29400317 	ldw	r5,12(r5)
  b53644:	293ff636 	bltu	r5,r4,b53620 <__fpcmp_parts_f+0x54>
  b53648:	217ff02e 	bgeu	r4,r5,b5360c <__fpcmp_parts_f+0x40>
  b5364c:	183fec1e 	bne	r3,zero,b53600 <__fpcmp_parts_f+0x34>
  b53650:	003ff406 	br	b53624 <__fpcmp_parts_f+0x58>
  b53654:	28800117 	ldw	r2,4(r5)
  b53658:	103fe91e 	bne	r2,zero,b53600 <__fpcmp_parts_f+0x34>
  b5365c:	003ff106 	br	b53624 <__fpcmp_parts_f+0x58>
  b53660:	11bfe51e 	bne	r2,r6,b535f8 <__fpcmp_parts_f+0x2c>
  b53664:	28c00117 	ldw	r3,4(r5)
  b53668:	20800117 	ldw	r2,4(r4)
  b5366c:	1885c83a 	sub	r2,r3,r2
  b53670:	f800283a 	ret

00b53674 <__make_fp>:
  b53674:	defffb04 	addi	sp,sp,-20
  b53678:	d9000015 	stw	r4,0(sp)
  b5367c:	d809883a 	mov	r4,sp
  b53680:	dfc00415 	stw	ra,16(sp)
  b53684:	d9400115 	stw	r5,4(sp)
  b53688:	d9800215 	stw	r6,8(sp)
  b5368c:	d9c00315 	stw	r7,12(sp)
  b53690:	0b533a40 	call	b533a4 <__pack_f>
  b53694:	dfc00417 	ldw	ra,16(sp)
  b53698:	dec00504 	addi	sp,sp,20
  b5369c:	f800283a 	ret

00b536a0 <__pack_d>:
  b536a0:	20c00017 	ldw	r3,0(r4)
  b536a4:	defffd04 	addi	sp,sp,-12
  b536a8:	dc000015 	stw	r16,0(sp)
  b536ac:	dc800215 	stw	r18,8(sp)
  b536b0:	dc400115 	stw	r17,4(sp)
  b536b4:	00800044 	movi	r2,1
  b536b8:	22000317 	ldw	r8,12(r4)
  b536bc:	001f883a 	mov	r15,zero
  b536c0:	22400417 	ldw	r9,16(r4)
  b536c4:	24000117 	ldw	r16,4(r4)
  b536c8:	10c0552e 	bgeu	r2,r3,b53820 <__pack_d+0x180>
  b536cc:	00800104 	movi	r2,4
  b536d0:	18804f26 	beq	r3,r2,b53810 <__pack_d+0x170>
  b536d4:	00800084 	movi	r2,2
  b536d8:	18800226 	beq	r3,r2,b536e4 <__pack_d+0x44>
  b536dc:	4244b03a 	or	r2,r8,r9
  b536e0:	10001a1e 	bne	r2,zero,b5374c <__pack_d+0xac>
  b536e4:	000d883a 	mov	r6,zero
  b536e8:	000f883a 	mov	r7,zero
  b536ec:	0011883a 	mov	r8,zero
  b536f0:	00800434 	movhi	r2,16
  b536f4:	10bfffc4 	addi	r2,r2,-1
  b536f8:	301d883a 	mov	r14,r6
  b536fc:	3884703a 	and	r2,r7,r2
  b53700:	400a953a 	slli	r5,r8,20
  b53704:	79bffc2c 	andhi	r6,r15,65520
  b53708:	308cb03a 	or	r6,r6,r2
  b5370c:	00e00434 	movhi	r3,32784
  b53710:	18ffffc4 	addi	r3,r3,-1
  b53714:	800497fa 	slli	r2,r16,31
  b53718:	30c6703a 	and	r3,r6,r3
  b5371c:	1946b03a 	or	r3,r3,r5
  b53720:	01600034 	movhi	r5,32768
  b53724:	297fffc4 	addi	r5,r5,-1
  b53728:	194a703a 	and	r5,r3,r5
  b5372c:	288ab03a 	or	r5,r5,r2
  b53730:	2807883a 	mov	r3,r5
  b53734:	7005883a 	mov	r2,r14
  b53738:	dc800217 	ldw	r18,8(sp)
  b5373c:	dc400117 	ldw	r17,4(sp)
  b53740:	dc000017 	ldw	r16,0(sp)
  b53744:	dec00304 	addi	sp,sp,12
  b53748:	f800283a 	ret
  b5374c:	21000217 	ldw	r4,8(r4)
  b53750:	00bf0084 	movi	r2,-1022
  b53754:	20803f16 	blt	r4,r2,b53854 <__pack_d+0x1b4>
  b53758:	0080ffc4 	movi	r2,1023
  b5375c:	11002c16 	blt	r2,r4,b53810 <__pack_d+0x170>
  b53760:	00803fc4 	movi	r2,255
  b53764:	408c703a 	and	r6,r8,r2
  b53768:	00802004 	movi	r2,128
  b5376c:	0007883a 	mov	r3,zero
  b53770:	000f883a 	mov	r7,zero
  b53774:	2280ffc4 	addi	r10,r4,1023
  b53778:	30801e26 	beq	r6,r2,b537f4 <__pack_d+0x154>
  b5377c:	00801fc4 	movi	r2,127
  b53780:	4089883a 	add	r4,r8,r2
  b53784:	220d803a 	cmpltu	r6,r4,r8
  b53788:	324d883a 	add	r6,r6,r9
  b5378c:	2011883a 	mov	r8,r4
  b53790:	3013883a 	mov	r9,r6
  b53794:	00880034 	movhi	r2,8192
  b53798:	10bfffc4 	addi	r2,r2,-1
  b5379c:	12400d36 	bltu	r2,r9,b537d4 <__pack_d+0x134>
  b537a0:	4804963a 	slli	r2,r9,24
  b537a4:	400cd23a 	srli	r6,r8,8
  b537a8:	480ed23a 	srli	r7,r9,8
  b537ac:	013fffc4 	movi	r4,-1
  b537b0:	118cb03a 	or	r6,r2,r6
  b537b4:	01400434 	movhi	r5,16
  b537b8:	297fffc4 	addi	r5,r5,-1
  b537bc:	3104703a 	and	r2,r6,r4
  b537c0:	3946703a 	and	r3,r7,r5
  b537c4:	5201ffcc 	andi	r8,r10,2047
  b537c8:	100d883a 	mov	r6,r2
  b537cc:	180f883a 	mov	r7,r3
  b537d0:	003fc706 	br	b536f0 <__pack_d+0x50>
  b537d4:	480897fa 	slli	r4,r9,31
  b537d8:	4004d07a 	srli	r2,r8,1
  b537dc:	4806d07a 	srli	r3,r9,1
  b537e0:	52800044 	addi	r10,r10,1
  b537e4:	2084b03a 	or	r2,r4,r2
  b537e8:	1011883a 	mov	r8,r2
  b537ec:	1813883a 	mov	r9,r3
  b537f0:	003feb06 	br	b537a0 <__pack_d+0x100>
  b537f4:	383fe11e 	bne	r7,zero,b5377c <__pack_d+0xdc>
  b537f8:	01004004 	movi	r4,256
  b537fc:	4104703a 	and	r2,r8,r4
  b53800:	10c4b03a 	or	r2,r2,r3
  b53804:	103fe326 	beq	r2,zero,b53794 <__pack_d+0xf4>
  b53808:	3005883a 	mov	r2,r6
  b5380c:	003fdc06 	br	b53780 <__pack_d+0xe0>
  b53810:	000d883a 	mov	r6,zero
  b53814:	000f883a 	mov	r7,zero
  b53818:	0201ffc4 	movi	r8,2047
  b5381c:	003fb406 	br	b536f0 <__pack_d+0x50>
  b53820:	0005883a 	mov	r2,zero
  b53824:	00c00234 	movhi	r3,8
  b53828:	408cb03a 	or	r6,r8,r2
  b5382c:	48ceb03a 	or	r7,r9,r3
  b53830:	013fffc4 	movi	r4,-1
  b53834:	01400434 	movhi	r5,16
  b53838:	297fffc4 	addi	r5,r5,-1
  b5383c:	3104703a 	and	r2,r6,r4
  b53840:	3946703a 	and	r3,r7,r5
  b53844:	100d883a 	mov	r6,r2
  b53848:	180f883a 	mov	r7,r3
  b5384c:	0201ffc4 	movi	r8,2047
  b53850:	003fa706 	br	b536f0 <__pack_d+0x50>
  b53854:	1109c83a 	sub	r4,r2,r4
  b53858:	00800e04 	movi	r2,56
  b5385c:	11004316 	blt	r2,r4,b5396c <__pack_d+0x2cc>
  b53860:	21fff804 	addi	r7,r4,-32
  b53864:	38004516 	blt	r7,zero,b5397c <__pack_d+0x2dc>
  b53868:	49d8d83a 	srl	r12,r9,r7
  b5386c:	001b883a 	mov	r13,zero
  b53870:	0023883a 	mov	r17,zero
  b53874:	01400044 	movi	r5,1
  b53878:	0025883a 	mov	r18,zero
  b5387c:	38004716 	blt	r7,zero,b5399c <__pack_d+0x2fc>
  b53880:	29d6983a 	sll	r11,r5,r7
  b53884:	0015883a 	mov	r10,zero
  b53888:	00bfffc4 	movi	r2,-1
  b5388c:	5089883a 	add	r4,r10,r2
  b53890:	588b883a 	add	r5,r11,r2
  b53894:	228d803a 	cmpltu	r6,r4,r10
  b53898:	314b883a 	add	r5,r6,r5
  b5389c:	4104703a 	and	r2,r8,r4
  b538a0:	4946703a 	and	r3,r9,r5
  b538a4:	10c4b03a 	or	r2,r2,r3
  b538a8:	10000226 	beq	r2,zero,b538b4 <__pack_d+0x214>
  b538ac:	04400044 	movi	r17,1
  b538b0:	0025883a 	mov	r18,zero
  b538b4:	00803fc4 	movi	r2,255
  b538b8:	644eb03a 	or	r7,r12,r17
  b538bc:	3892703a 	and	r9,r7,r2
  b538c0:	00802004 	movi	r2,128
  b538c4:	6c90b03a 	or	r8,r13,r18
  b538c8:	0015883a 	mov	r10,zero
  b538cc:	48801626 	beq	r9,r2,b53928 <__pack_d+0x288>
  b538d0:	01001fc4 	movi	r4,127
  b538d4:	3905883a 	add	r2,r7,r4
  b538d8:	11cd803a 	cmpltu	r6,r2,r7
  b538dc:	320d883a 	add	r6,r6,r8
  b538e0:	100f883a 	mov	r7,r2
  b538e4:	00840034 	movhi	r2,4096
  b538e8:	10bfffc4 	addi	r2,r2,-1
  b538ec:	3011883a 	mov	r8,r6
  b538f0:	0007883a 	mov	r3,zero
  b538f4:	11801b36 	bltu	r2,r6,b53964 <__pack_d+0x2c4>
  b538f8:	4004963a 	slli	r2,r8,24
  b538fc:	3808d23a 	srli	r4,r7,8
  b53900:	400ad23a 	srli	r5,r8,8
  b53904:	1813883a 	mov	r9,r3
  b53908:	1108b03a 	or	r4,r2,r4
  b5390c:	00bfffc4 	movi	r2,-1
  b53910:	00c00434 	movhi	r3,16
  b53914:	18ffffc4 	addi	r3,r3,-1
  b53918:	208c703a 	and	r6,r4,r2
  b5391c:	28ce703a 	and	r7,r5,r3
  b53920:	4a01ffcc 	andi	r8,r9,2047
  b53924:	003f7206 	br	b536f0 <__pack_d+0x50>
  b53928:	503fe91e 	bne	r10,zero,b538d0 <__pack_d+0x230>
  b5392c:	01004004 	movi	r4,256
  b53930:	3904703a 	and	r2,r7,r4
  b53934:	0007883a 	mov	r3,zero
  b53938:	10c4b03a 	or	r2,r2,r3
  b5393c:	10000626 	beq	r2,zero,b53958 <__pack_d+0x2b8>
  b53940:	3a45883a 	add	r2,r7,r9
  b53944:	11cd803a 	cmpltu	r6,r2,r7
  b53948:	320d883a 	add	r6,r6,r8
  b5394c:	100f883a 	mov	r7,r2
  b53950:	3011883a 	mov	r8,r6
  b53954:	0007883a 	mov	r3,zero
  b53958:	00840034 	movhi	r2,4096
  b5395c:	10bfffc4 	addi	r2,r2,-1
  b53960:	123fe52e 	bgeu	r2,r8,b538f8 <__pack_d+0x258>
  b53964:	00c00044 	movi	r3,1
  b53968:	003fe306 	br	b538f8 <__pack_d+0x258>
  b5396c:	0009883a 	mov	r4,zero
  b53970:	0013883a 	mov	r9,zero
  b53974:	000b883a 	mov	r5,zero
  b53978:	003fe406 	br	b5390c <__pack_d+0x26c>
  b5397c:	4a47883a 	add	r3,r9,r9
  b53980:	008007c4 	movi	r2,31
  b53984:	1105c83a 	sub	r2,r2,r4
  b53988:	1886983a 	sll	r3,r3,r2
  b5398c:	4118d83a 	srl	r12,r8,r4
  b53990:	491ad83a 	srl	r13,r9,r4
  b53994:	1b18b03a 	or	r12,r3,r12
  b53998:	003fb506 	br	b53870 <__pack_d+0x1d0>
  b5399c:	2806d07a 	srli	r3,r5,1
  b539a0:	008007c4 	movi	r2,31
  b539a4:	1105c83a 	sub	r2,r2,r4
  b539a8:	1896d83a 	srl	r11,r3,r2
  b539ac:	2914983a 	sll	r10,r5,r4
  b539b0:	003fb506 	br	b53888 <__pack_d+0x1e8>

00b539b4 <__unpack_d>:
  b539b4:	20c00117 	ldw	r3,4(r4)
  b539b8:	22400017 	ldw	r9,0(r4)
  b539bc:	00800434 	movhi	r2,16
  b539c0:	10bfffc4 	addi	r2,r2,-1
  b539c4:	1808d53a 	srli	r4,r3,20
  b539c8:	180cd7fa 	srli	r6,r3,31
  b539cc:	1894703a 	and	r10,r3,r2
  b539d0:	2201ffcc 	andi	r8,r4,2047
  b539d4:	281b883a 	mov	r13,r5
  b539d8:	4817883a 	mov	r11,r9
  b539dc:	29800115 	stw	r6,4(r5)
  b539e0:	5019883a 	mov	r12,r10
  b539e4:	40001e1e 	bne	r8,zero,b53a60 <__unpack_d+0xac>
  b539e8:	4a84b03a 	or	r2,r9,r10
  b539ec:	10001926 	beq	r2,zero,b53a54 <__unpack_d+0xa0>
  b539f0:	4804d63a 	srli	r2,r9,24
  b539f4:	500c923a 	slli	r6,r10,8
  b539f8:	013f0084 	movi	r4,-1022
  b539fc:	00c40034 	movhi	r3,4096
  b53a00:	18ffffc4 	addi	r3,r3,-1
  b53a04:	118cb03a 	or	r6,r2,r6
  b53a08:	008000c4 	movi	r2,3
  b53a0c:	480a923a 	slli	r5,r9,8
  b53a10:	68800015 	stw	r2,0(r13)
  b53a14:	69000215 	stw	r4,8(r13)
  b53a18:	19800b36 	bltu	r3,r6,b53a48 <__unpack_d+0x94>
  b53a1c:	200f883a 	mov	r7,r4
  b53a20:	1811883a 	mov	r8,r3
  b53a24:	2945883a 	add	r2,r5,r5
  b53a28:	1149803a 	cmpltu	r4,r2,r5
  b53a2c:	3187883a 	add	r3,r6,r6
  b53a30:	20c9883a 	add	r4,r4,r3
  b53a34:	100b883a 	mov	r5,r2
  b53a38:	200d883a 	mov	r6,r4
  b53a3c:	39ffffc4 	addi	r7,r7,-1
  b53a40:	413ff82e 	bgeu	r8,r4,b53a24 <__unpack_d+0x70>
  b53a44:	69c00215 	stw	r7,8(r13)
  b53a48:	69800415 	stw	r6,16(r13)
  b53a4c:	69400315 	stw	r5,12(r13)
  b53a50:	f800283a 	ret
  b53a54:	00800084 	movi	r2,2
  b53a58:	28800015 	stw	r2,0(r5)
  b53a5c:	f800283a 	ret
  b53a60:	0081ffc4 	movi	r2,2047
  b53a64:	40800f26 	beq	r8,r2,b53aa4 <__unpack_d+0xf0>
  b53a68:	480cd63a 	srli	r6,r9,24
  b53a6c:	5006923a 	slli	r3,r10,8
  b53a70:	4804923a 	slli	r2,r9,8
  b53a74:	0009883a 	mov	r4,zero
  b53a78:	30c6b03a 	or	r3,r6,r3
  b53a7c:	01440034 	movhi	r5,4096
  b53a80:	110cb03a 	or	r6,r2,r4
  b53a84:	423f0044 	addi	r8,r8,-1023
  b53a88:	194eb03a 	or	r7,r3,r5
  b53a8c:	008000c4 	movi	r2,3
  b53a90:	69c00415 	stw	r7,16(r13)
  b53a94:	6a000215 	stw	r8,8(r13)
  b53a98:	68800015 	stw	r2,0(r13)
  b53a9c:	69800315 	stw	r6,12(r13)
  b53aa0:	f800283a 	ret
  b53aa4:	4a84b03a 	or	r2,r9,r10
  b53aa8:	1000031e 	bne	r2,zero,b53ab8 <__unpack_d+0x104>
  b53aac:	00800104 	movi	r2,4
  b53ab0:	28800015 	stw	r2,0(r5)
  b53ab4:	f800283a 	ret
  b53ab8:	0009883a 	mov	r4,zero
  b53abc:	01400234 	movhi	r5,8
  b53ac0:	4904703a 	and	r2,r9,r4
  b53ac4:	5146703a 	and	r3,r10,r5
  b53ac8:	10c4b03a 	or	r2,r2,r3
  b53acc:	10000526 	beq	r2,zero,b53ae4 <__unpack_d+0x130>
  b53ad0:	00800044 	movi	r2,1
  b53ad4:	68800015 	stw	r2,0(r13)
  b53ad8:	6b000415 	stw	r12,16(r13)
  b53adc:	6ac00315 	stw	r11,12(r13)
  b53ae0:	f800283a 	ret
  b53ae4:	68000015 	stw	zero,0(r13)
  b53ae8:	003ffb06 	br	b53ad8 <__unpack_d+0x124>

00b53aec <__fpcmp_parts_d>:
  b53aec:	21800017 	ldw	r6,0(r4)
  b53af0:	00c00044 	movi	r3,1
  b53af4:	19800a2e 	bgeu	r3,r6,b53b20 <__fpcmp_parts_d+0x34>
  b53af8:	28800017 	ldw	r2,0(r5)
  b53afc:	1880082e 	bgeu	r3,r2,b53b20 <__fpcmp_parts_d+0x34>
  b53b00:	00c00104 	movi	r3,4
  b53b04:	30c02626 	beq	r6,r3,b53ba0 <__fpcmp_parts_d+0xb4>
  b53b08:	10c02226 	beq	r2,r3,b53b94 <__fpcmp_parts_d+0xa8>
  b53b0c:	00c00084 	movi	r3,2
  b53b10:	30c00526 	beq	r6,r3,b53b28 <__fpcmp_parts_d+0x3c>
  b53b14:	10c0071e 	bne	r2,r3,b53b34 <__fpcmp_parts_d+0x48>
  b53b18:	20800117 	ldw	r2,4(r4)
  b53b1c:	1000091e 	bne	r2,zero,b53b44 <__fpcmp_parts_d+0x58>
  b53b20:	00800044 	movi	r2,1
  b53b24:	f800283a 	ret
  b53b28:	10c01a1e 	bne	r2,r3,b53b94 <__fpcmp_parts_d+0xa8>
  b53b2c:	0005883a 	mov	r2,zero
  b53b30:	f800283a 	ret
  b53b34:	22000117 	ldw	r8,4(r4)
  b53b38:	28800117 	ldw	r2,4(r5)
  b53b3c:	40800326 	beq	r8,r2,b53b4c <__fpcmp_parts_d+0x60>
  b53b40:	403ff726 	beq	r8,zero,b53b20 <__fpcmp_parts_d+0x34>
  b53b44:	00bfffc4 	movi	r2,-1
  b53b48:	f800283a 	ret
  b53b4c:	20c00217 	ldw	r3,8(r4)
  b53b50:	28800217 	ldw	r2,8(r5)
  b53b54:	10fffa16 	blt	r2,r3,b53b40 <__fpcmp_parts_d+0x54>
  b53b58:	18800916 	blt	r3,r2,b53b80 <__fpcmp_parts_d+0x94>
  b53b5c:	21c00417 	ldw	r7,16(r4)
  b53b60:	28c00417 	ldw	r3,16(r5)
  b53b64:	21800317 	ldw	r6,12(r4)
  b53b68:	28800317 	ldw	r2,12(r5)
  b53b6c:	19fff436 	bltu	r3,r7,b53b40 <__fpcmp_parts_d+0x54>
  b53b70:	38c00526 	beq	r7,r3,b53b88 <__fpcmp_parts_d+0x9c>
  b53b74:	38c00236 	bltu	r7,r3,b53b80 <__fpcmp_parts_d+0x94>
  b53b78:	19ffec1e 	bne	r3,r7,b53b2c <__fpcmp_parts_d+0x40>
  b53b7c:	30bfeb2e 	bgeu	r6,r2,b53b2c <__fpcmp_parts_d+0x40>
  b53b80:	403fe71e 	bne	r8,zero,b53b20 <__fpcmp_parts_d+0x34>
  b53b84:	003fef06 	br	b53b44 <__fpcmp_parts_d+0x58>
  b53b88:	11bffa2e 	bgeu	r2,r6,b53b74 <__fpcmp_parts_d+0x88>
  b53b8c:	403fe426 	beq	r8,zero,b53b20 <__fpcmp_parts_d+0x34>
  b53b90:	003fec06 	br	b53b44 <__fpcmp_parts_d+0x58>
  b53b94:	28800117 	ldw	r2,4(r5)
  b53b98:	103fe11e 	bne	r2,zero,b53b20 <__fpcmp_parts_d+0x34>
  b53b9c:	003fe906 	br	b53b44 <__fpcmp_parts_d+0x58>
  b53ba0:	11bfdd1e 	bne	r2,r6,b53b18 <__fpcmp_parts_d+0x2c>
  b53ba4:	28c00117 	ldw	r3,4(r5)
  b53ba8:	20800117 	ldw	r2,4(r4)
  b53bac:	1885c83a 	sub	r2,r3,r2
  b53bb0:	f800283a 	ret

00b53bb4 <__errno>:
  b53bb4:	00c02db4 	movhi	r3,182
  b53bb8:	18cbf904 	addi	r3,r3,12260
  b53bbc:	18800017 	ldw	r2,0(r3)
  b53bc0:	f800283a 	ret

00b53bc4 <printf>:
  b53bc4:	defffb04 	addi	sp,sp,-20
  b53bc8:	dfc00115 	stw	ra,4(sp)
  b53bcc:	d9400215 	stw	r5,8(sp)
  b53bd0:	d9800315 	stw	r6,12(sp)
  b53bd4:	d9c00415 	stw	r7,16(sp)
  b53bd8:	00802db4 	movhi	r2,182
  b53bdc:	108bf904 	addi	r2,r2,12260
  b53be0:	10c00017 	ldw	r3,0(r2)
  b53be4:	200b883a 	mov	r5,r4
  b53be8:	d8800204 	addi	r2,sp,8
  b53bec:	19000217 	ldw	r4,8(r3)
  b53bf0:	100d883a 	mov	r6,r2
  b53bf4:	d8800015 	stw	r2,0(sp)
  b53bf8:	0b55d3c0 	call	b55d3c <__vfprintf_internal>
  b53bfc:	dfc00117 	ldw	ra,4(sp)
  b53c00:	dec00504 	addi	sp,sp,20
  b53c04:	f800283a 	ret

00b53c08 <_printf_r>:
  b53c08:	defffc04 	addi	sp,sp,-16
  b53c0c:	dfc00115 	stw	ra,4(sp)
  b53c10:	d9800215 	stw	r6,8(sp)
  b53c14:	d9c00315 	stw	r7,12(sp)
  b53c18:	280d883a 	mov	r6,r5
  b53c1c:	21400217 	ldw	r5,8(r4)
  b53c20:	d8c00204 	addi	r3,sp,8
  b53c24:	180f883a 	mov	r7,r3
  b53c28:	d8c00015 	stw	r3,0(sp)
  b53c2c:	0b53e900 	call	b53e90 <___vfprintf_internal_r>
  b53c30:	dfc00117 	ldw	ra,4(sp)
  b53c34:	dec00404 	addi	sp,sp,16
  b53c38:	f800283a 	ret

00b53c3c <_puts_r>:
  b53c3c:	defff604 	addi	sp,sp,-40
  b53c40:	dc400715 	stw	r17,28(sp)
  b53c44:	2023883a 	mov	r17,r4
  b53c48:	2809883a 	mov	r4,r5
  b53c4c:	dfc00915 	stw	ra,36(sp)
  b53c50:	dcc00815 	stw	r19,32(sp)
  b53c54:	2827883a 	mov	r19,r5
  b53c58:	0b53dc40 	call	b53dc4 <strlen>
  b53c5c:	89400217 	ldw	r5,8(r17)
  b53c60:	00c02db4 	movhi	r3,182
  b53c64:	18c44804 	addi	r3,r3,4384
  b53c68:	01c00044 	movi	r7,1
  b53c6c:	12000044 	addi	r8,r2,1
  b53c70:	d8c00515 	stw	r3,20(sp)
  b53c74:	d9c00615 	stw	r7,24(sp)
  b53c78:	d8c00304 	addi	r3,sp,12
  b53c7c:	01c00084 	movi	r7,2
  b53c80:	8809883a 	mov	r4,r17
  b53c84:	d80d883a 	mov	r6,sp
  b53c88:	d8c00015 	stw	r3,0(sp)
  b53c8c:	dcc00315 	stw	r19,12(sp)
  b53c90:	da000215 	stw	r8,8(sp)
  b53c94:	d9c00115 	stw	r7,4(sp)
  b53c98:	d8800415 	stw	r2,16(sp)
  b53c9c:	0b57f980 	call	b57f98 <__sfvwrite_r>
  b53ca0:	00ffffc4 	movi	r3,-1
  b53ca4:	10000626 	beq	r2,zero,b53cc0 <_puts_r+0x84>
  b53ca8:	1805883a 	mov	r2,r3
  b53cac:	dfc00917 	ldw	ra,36(sp)
  b53cb0:	dcc00817 	ldw	r19,32(sp)
  b53cb4:	dc400717 	ldw	r17,28(sp)
  b53cb8:	dec00a04 	addi	sp,sp,40
  b53cbc:	f800283a 	ret
  b53cc0:	00c00284 	movi	r3,10
  b53cc4:	1805883a 	mov	r2,r3
  b53cc8:	dfc00917 	ldw	ra,36(sp)
  b53ccc:	dcc00817 	ldw	r19,32(sp)
  b53cd0:	dc400717 	ldw	r17,28(sp)
  b53cd4:	dec00a04 	addi	sp,sp,40
  b53cd8:	f800283a 	ret

00b53cdc <puts>:
  b53cdc:	00802db4 	movhi	r2,182
  b53ce0:	108bf904 	addi	r2,r2,12260
  b53ce4:	200b883a 	mov	r5,r4
  b53ce8:	11000017 	ldw	r4,0(r2)
  b53cec:	0b53c3c1 	jmpi	b53c3c <_puts_r>

00b53cf0 <sprintf>:
  b53cf0:	deffe504 	addi	sp,sp,-108
  b53cf4:	2013883a 	mov	r9,r4
  b53cf8:	dfc01815 	stw	ra,96(sp)
  b53cfc:	d9801915 	stw	r6,100(sp)
  b53d00:	d9c01a15 	stw	r7,104(sp)
  b53d04:	d8801904 	addi	r2,sp,100
  b53d08:	d8800015 	stw	r2,0(sp)
  b53d0c:	00802db4 	movhi	r2,182
  b53d10:	108bf904 	addi	r2,r2,12260
  b53d14:	11000017 	ldw	r4,0(r2)
  b53d18:	d9c00017 	ldw	r7,0(sp)
  b53d1c:	00808204 	movi	r2,520
  b53d20:	00e00034 	movhi	r3,32768
  b53d24:	18ffffc4 	addi	r3,r3,-1
  b53d28:	280d883a 	mov	r6,r5
  b53d2c:	d880040d 	sth	r2,16(sp)
  b53d30:	d9400104 	addi	r5,sp,4
  b53d34:	00bfffc4 	movi	r2,-1
  b53d38:	d8c00615 	stw	r3,24(sp)
  b53d3c:	d8c00315 	stw	r3,12(sp)
  b53d40:	da400515 	stw	r9,20(sp)
  b53d44:	d880048d 	sth	r2,18(sp)
  b53d48:	da400115 	stw	r9,4(sp)
  b53d4c:	0b53e900 	call	b53e90 <___vfprintf_internal_r>
  b53d50:	d8c00117 	ldw	r3,4(sp)
  b53d54:	18000005 	stb	zero,0(r3)
  b53d58:	dfc01817 	ldw	ra,96(sp)
  b53d5c:	dec01b04 	addi	sp,sp,108
  b53d60:	f800283a 	ret

00b53d64 <_sprintf_r>:
  b53d64:	deffe604 	addi	sp,sp,-104
  b53d68:	2813883a 	mov	r9,r5
  b53d6c:	dfc01815 	stw	ra,96(sp)
  b53d70:	d9c01915 	stw	r7,100(sp)
  b53d74:	d8801904 	addi	r2,sp,100
  b53d78:	d8800015 	stw	r2,0(sp)
  b53d7c:	100f883a 	mov	r7,r2
  b53d80:	00808204 	movi	r2,520
  b53d84:	00e00034 	movhi	r3,32768
  b53d88:	18ffffc4 	addi	r3,r3,-1
  b53d8c:	d880040d 	sth	r2,16(sp)
  b53d90:	d9400104 	addi	r5,sp,4
  b53d94:	00bfffc4 	movi	r2,-1
  b53d98:	d8c00615 	stw	r3,24(sp)
  b53d9c:	d8c00315 	stw	r3,12(sp)
  b53da0:	da400515 	stw	r9,20(sp)
  b53da4:	d880048d 	sth	r2,18(sp)
  b53da8:	da400115 	stw	r9,4(sp)
  b53dac:	0b53e900 	call	b53e90 <___vfprintf_internal_r>
  b53db0:	d8c00117 	ldw	r3,4(sp)
  b53db4:	18000005 	stb	zero,0(r3)
  b53db8:	dfc01817 	ldw	ra,96(sp)
  b53dbc:	dec01a04 	addi	sp,sp,104
  b53dc0:	f800283a 	ret

00b53dc4 <strlen>:
  b53dc4:	208000cc 	andi	r2,r4,3
  b53dc8:	2011883a 	mov	r8,r4
  b53dcc:	1000161e 	bne	r2,zero,b53e28 <strlen+0x64>
  b53dd0:	20c00017 	ldw	r3,0(r4)
  b53dd4:	017fbff4 	movhi	r5,65279
  b53dd8:	297fbfc4 	addi	r5,r5,-257
  b53ddc:	01e02074 	movhi	r7,32897
  b53de0:	39e02004 	addi	r7,r7,-32640
  b53de4:	1945883a 	add	r2,r3,r5
  b53de8:	11c4703a 	and	r2,r2,r7
  b53dec:	00c6303a 	nor	r3,zero,r3
  b53df0:	1886703a 	and	r3,r3,r2
  b53df4:	18000c1e 	bne	r3,zero,b53e28 <strlen+0x64>
  b53df8:	280d883a 	mov	r6,r5
  b53dfc:	380b883a 	mov	r5,r7
  b53e00:	21000104 	addi	r4,r4,4
  b53e04:	20800017 	ldw	r2,0(r4)
  b53e08:	1187883a 	add	r3,r2,r6
  b53e0c:	1946703a 	and	r3,r3,r5
  b53e10:	0084303a 	nor	r2,zero,r2
  b53e14:	10c4703a 	and	r2,r2,r3
  b53e18:	103ff926 	beq	r2,zero,b53e00 <strlen+0x3c>
  b53e1c:	20800007 	ldb	r2,0(r4)
  b53e20:	10000326 	beq	r2,zero,b53e30 <strlen+0x6c>
  b53e24:	21000044 	addi	r4,r4,1
  b53e28:	20800007 	ldb	r2,0(r4)
  b53e2c:	103ffd1e 	bne	r2,zero,b53e24 <strlen+0x60>
  b53e30:	2205c83a 	sub	r2,r4,r8
  b53e34:	f800283a 	ret

00b53e38 <__sprint_r>:
  b53e38:	30800217 	ldw	r2,8(r6)
  b53e3c:	defffe04 	addi	sp,sp,-8
  b53e40:	dc000015 	stw	r16,0(sp)
  b53e44:	dfc00115 	stw	ra,4(sp)
  b53e48:	3021883a 	mov	r16,r6
  b53e4c:	0007883a 	mov	r3,zero
  b53e50:	1000061e 	bne	r2,zero,b53e6c <__sprint_r+0x34>
  b53e54:	1805883a 	mov	r2,r3
  b53e58:	30000115 	stw	zero,4(r6)
  b53e5c:	dfc00117 	ldw	ra,4(sp)
  b53e60:	dc000017 	ldw	r16,0(sp)
  b53e64:	dec00204 	addi	sp,sp,8
  b53e68:	f800283a 	ret
  b53e6c:	0b57f980 	call	b57f98 <__sfvwrite_r>
  b53e70:	1007883a 	mov	r3,r2
  b53e74:	1805883a 	mov	r2,r3
  b53e78:	80000115 	stw	zero,4(r16)
  b53e7c:	80000215 	stw	zero,8(r16)
  b53e80:	dfc00117 	ldw	ra,4(sp)
  b53e84:	dc000017 	ldw	r16,0(sp)
  b53e88:	dec00204 	addi	sp,sp,8
  b53e8c:	f800283a 	ret

00b53e90 <___vfprintf_internal_r>:
  b53e90:	defea404 	addi	sp,sp,-1392
  b53e94:	dd815815 	stw	r22,1376(sp)
  b53e98:	dc015215 	stw	r16,1352(sp)
  b53e9c:	d9c15115 	stw	r7,1348(sp)
  b53ea0:	dfc15b15 	stw	ra,1388(sp)
  b53ea4:	df015a15 	stw	fp,1384(sp)
  b53ea8:	ddc15915 	stw	r23,1380(sp)
  b53eac:	dd415715 	stw	r21,1372(sp)
  b53eb0:	dd015615 	stw	r20,1368(sp)
  b53eb4:	dcc15515 	stw	r19,1364(sp)
  b53eb8:	dc815415 	stw	r18,1360(sp)
  b53ebc:	dc415315 	stw	r17,1356(sp)
  b53ec0:	282d883a 	mov	r22,r5
  b53ec4:	3021883a 	mov	r16,r6
  b53ec8:	d9014f15 	stw	r4,1340(sp)
  b53ecc:	0b585bc0 	call	b585bc <_localeconv_r>
  b53ed0:	10800017 	ldw	r2,0(r2)
  b53ed4:	d9c15117 	ldw	r7,1348(sp)
  b53ed8:	d8814915 	stw	r2,1316(sp)
  b53edc:	d8814f17 	ldw	r2,1340(sp)
  b53ee0:	10000226 	beq	r2,zero,b53eec <___vfprintf_internal_r+0x5c>
  b53ee4:	10800e17 	ldw	r2,56(r2)
  b53ee8:	10020d26 	beq	r2,zero,b54720 <___vfprintf_internal_r+0x890>
  b53eec:	b080030b 	ldhu	r2,12(r22)
  b53ef0:	1080020c 	andi	r2,r2,8
  b53ef4:	10020e26 	beq	r2,zero,b54730 <___vfprintf_internal_r+0x8a0>
  b53ef8:	b0800417 	ldw	r2,16(r22)
  b53efc:	10020c26 	beq	r2,zero,b54730 <___vfprintf_internal_r+0x8a0>
  b53f00:	b200030b 	ldhu	r8,12(r22)
  b53f04:	00800284 	movi	r2,10
  b53f08:	40c0068c 	andi	r3,r8,26
  b53f0c:	18802f1e 	bne	r3,r2,b53fcc <___vfprintf_internal_r+0x13c>
  b53f10:	b080038f 	ldh	r2,14(r22)
  b53f14:	10002d16 	blt	r2,zero,b53fcc <___vfprintf_internal_r+0x13c>
  b53f18:	b240038b 	ldhu	r9,14(r22)
  b53f1c:	b2800717 	ldw	r10,28(r22)
  b53f20:	b2c00917 	ldw	r11,36(r22)
  b53f24:	d9014f17 	ldw	r4,1340(sp)
  b53f28:	dc402904 	addi	r17,sp,164
  b53f2c:	d8804004 	addi	r2,sp,256
  b53f30:	00c10004 	movi	r3,1024
  b53f34:	423fff4c 	andi	r8,r8,65533
  b53f38:	800d883a 	mov	r6,r16
  b53f3c:	880b883a 	mov	r5,r17
  b53f40:	da002c0d 	sth	r8,176(sp)
  b53f44:	da402c8d 	sth	r9,178(sp)
  b53f48:	da803015 	stw	r10,192(sp)
  b53f4c:	dac03215 	stw	r11,200(sp)
  b53f50:	d8802d15 	stw	r2,180(sp)
  b53f54:	d8c02e15 	stw	r3,184(sp)
  b53f58:	d8802915 	stw	r2,164(sp)
  b53f5c:	d8c02b15 	stw	r3,172(sp)
  b53f60:	d8002f15 	stw	zero,188(sp)
  b53f64:	0b53e900 	call	b53e90 <___vfprintf_internal_r>
  b53f68:	d8814b15 	stw	r2,1324(sp)
  b53f6c:	10000416 	blt	r2,zero,b53f80 <___vfprintf_internal_r+0xf0>
  b53f70:	d9014f17 	ldw	r4,1340(sp)
  b53f74:	880b883a 	mov	r5,r17
  b53f78:	0b576680 	call	b57668 <_fflush_r>
  b53f7c:	1002321e 	bne	r2,zero,b54848 <___vfprintf_internal_r+0x9b8>
  b53f80:	d8802c0b 	ldhu	r2,176(sp)
  b53f84:	1080100c 	andi	r2,r2,64
  b53f88:	10000326 	beq	r2,zero,b53f98 <___vfprintf_internal_r+0x108>
  b53f8c:	b080030b 	ldhu	r2,12(r22)
  b53f90:	10801014 	ori	r2,r2,64
  b53f94:	b080030d 	sth	r2,12(r22)
  b53f98:	d8814b17 	ldw	r2,1324(sp)
  b53f9c:	dfc15b17 	ldw	ra,1388(sp)
  b53fa0:	df015a17 	ldw	fp,1384(sp)
  b53fa4:	ddc15917 	ldw	r23,1380(sp)
  b53fa8:	dd815817 	ldw	r22,1376(sp)
  b53fac:	dd415717 	ldw	r21,1372(sp)
  b53fb0:	dd015617 	ldw	r20,1368(sp)
  b53fb4:	dcc15517 	ldw	r19,1364(sp)
  b53fb8:	dc815417 	ldw	r18,1360(sp)
  b53fbc:	dc415317 	ldw	r17,1356(sp)
  b53fc0:	dc015217 	ldw	r16,1352(sp)
  b53fc4:	dec15c04 	addi	sp,sp,1392
  b53fc8:	f800283a 	ret
  b53fcc:	0005883a 	mov	r2,zero
  b53fd0:	0007883a 	mov	r3,zero
  b53fd4:	dd401904 	addi	r21,sp,100
  b53fd8:	d8814215 	stw	r2,1288(sp)
  b53fdc:	802f883a 	mov	r23,r16
  b53fe0:	d8c14315 	stw	r3,1292(sp)
  b53fe4:	d8014b15 	stw	zero,1324(sp)
  b53fe8:	d8014815 	stw	zero,1312(sp)
  b53fec:	d8014415 	stw	zero,1296(sp)
  b53ff0:	d8014715 	stw	zero,1308(sp)
  b53ff4:	dd400c15 	stw	r21,48(sp)
  b53ff8:	d8000e15 	stw	zero,56(sp)
  b53ffc:	d8000d15 	stw	zero,52(sp)
  b54000:	b8800007 	ldb	r2,0(r23)
  b54004:	10001926 	beq	r2,zero,b5406c <___vfprintf_internal_r+0x1dc>
  b54008:	00c00944 	movi	r3,37
  b5400c:	10c01726 	beq	r2,r3,b5406c <___vfprintf_internal_r+0x1dc>
  b54010:	b821883a 	mov	r16,r23
  b54014:	00000106 	br	b5401c <___vfprintf_internal_r+0x18c>
  b54018:	10c00326 	beq	r2,r3,b54028 <___vfprintf_internal_r+0x198>
  b5401c:	84000044 	addi	r16,r16,1
  b54020:	80800007 	ldb	r2,0(r16)
  b54024:	103ffc1e 	bne	r2,zero,b54018 <___vfprintf_internal_r+0x188>
  b54028:	85e7c83a 	sub	r19,r16,r23
  b5402c:	98000e26 	beq	r19,zero,b54068 <___vfprintf_internal_r+0x1d8>
  b54030:	dc800e17 	ldw	r18,56(sp)
  b54034:	dc400d17 	ldw	r17,52(sp)
  b54038:	008001c4 	movi	r2,7
  b5403c:	94e5883a 	add	r18,r18,r19
  b54040:	8c400044 	addi	r17,r17,1
  b54044:	adc00015 	stw	r23,0(r21)
  b54048:	dc800e15 	stw	r18,56(sp)
  b5404c:	acc00115 	stw	r19,4(r21)
  b54050:	dc400d15 	stw	r17,52(sp)
  b54054:	14428b16 	blt	r2,r17,b54a84 <___vfprintf_internal_r+0xbf4>
  b54058:	ad400204 	addi	r21,r21,8
  b5405c:	d9014b17 	ldw	r4,1324(sp)
  b54060:	24c9883a 	add	r4,r4,r19
  b54064:	d9014b15 	stw	r4,1324(sp)
  b54068:	802f883a 	mov	r23,r16
  b5406c:	b8800007 	ldb	r2,0(r23)
  b54070:	10013c26 	beq	r2,zero,b54564 <___vfprintf_internal_r+0x6d4>
  b54074:	bdc00044 	addi	r23,r23,1
  b54078:	d8000405 	stb	zero,16(sp)
  b5407c:	b8c00007 	ldb	r3,0(r23)
  b54080:	04ffffc4 	movi	r19,-1
  b54084:	d8014c15 	stw	zero,1328(sp)
  b54088:	d8014a15 	stw	zero,1320(sp)
  b5408c:	d8c14d15 	stw	r3,1332(sp)
  b54090:	bdc00044 	addi	r23,r23,1
  b54094:	d9414d17 	ldw	r5,1332(sp)
  b54098:	00801604 	movi	r2,88
  b5409c:	28fff804 	addi	r3,r5,-32
  b540a0:	10c06036 	bltu	r2,r3,b54224 <___vfprintf_internal_r+0x394>
  b540a4:	18c5883a 	add	r2,r3,r3
  b540a8:	1085883a 	add	r2,r2,r2
  b540ac:	00c02d74 	movhi	r3,181
  b540b0:	18d03004 	addi	r3,r3,16576
  b540b4:	10c5883a 	add	r2,r2,r3
  b540b8:	11000017 	ldw	r4,0(r2)
  b540bc:	2000683a 	jmp	r4
  b540c0:	00b55034 	movhi	r2,54592
  b540c4:	00b54224 	muli	r2,zero,-11000
  b540c8:	00b54224 	muli	r2,zero,-11000
  b540cc:	00b55020 	cmpeqi	r2,zero,-10944
  b540d0:	00b54224 	muli	r2,zero,-11000
  b540d4:	00b54224 	muli	r2,zero,-11000
  b540d8:	00b54224 	muli	r2,zero,-11000
  b540dc:	00b54224 	muli	r2,zero,-11000
  b540e0:	00b54224 	muli	r2,zero,-11000
  b540e4:	00b54224 	muli	r2,zero,-11000
  b540e8:	00b54e00 	call	b54e0 <__alt_mem_onchip_memory2_3+0xae4e0>
  b540ec:	00b55010 	cmplti	r2,zero,-10944
  b540f0:	00b54224 	muli	r2,zero,-11000
  b540f4:	00b54e18 	cmpnei	r2,zero,-10952
  b540f8:	00b550ac 	andhi	r2,zero,54594
  b540fc:	00b54224 	muli	r2,zero,-11000
  b54100:	00b55098 	cmpnei	r2,zero,-10942
  b54104:	00b55060 	cmpeqi	r2,zero,-10943
  b54108:	00b55060 	cmpeqi	r2,zero,-10943
  b5410c:	00b55060 	cmpeqi	r2,zero,-10943
  b54110:	00b55060 	cmpeqi	r2,zero,-10943
  b54114:	00b55060 	cmpeqi	r2,zero,-10943
  b54118:	00b55060 	cmpeqi	r2,zero,-10943
  b5411c:	00b55060 	cmpeqi	r2,zero,-10943
  b54120:	00b55060 	cmpeqi	r2,zero,-10943
  b54124:	00b55060 	cmpeqi	r2,zero,-10943
  b54128:	00b54224 	muli	r2,zero,-11000
  b5412c:	00b54224 	muli	r2,zero,-11000
  b54130:	00b54224 	muli	r2,zero,-11000
  b54134:	00b54224 	muli	r2,zero,-11000
  b54138:	00b54224 	muli	r2,zero,-11000
  b5413c:	00b54224 	muli	r2,zero,-11000
  b54140:	00b54224 	muli	r2,zero,-11000
  b54144:	00b54224 	muli	r2,zero,-11000
  b54148:	00b54224 	muli	r2,zero,-11000
  b5414c:	00b54224 	muli	r2,zero,-11000
  b54150:	00b5487c 	xorhi	r2,zero,54561
  b54154:	00b54ee8 	cmpgeui	r2,zero,54587
  b54158:	00b54224 	muli	r2,zero,-11000
  b5415c:	00b54ee8 	cmpgeui	r2,zero,54587
  b54160:	00b54224 	muli	r2,zero,-11000
  b54164:	00b54224 	muli	r2,zero,-11000
  b54168:	00b54224 	muli	r2,zero,-11000
  b5416c:	00b54224 	muli	r2,zero,-11000
  b54170:	00b5504c 	andi	r2,zero,54593
  b54174:	00b54224 	muli	r2,zero,-11000
  b54178:	00b54224 	muli	r2,zero,-11000
  b5417c:	00b54930 	cmpltui	r2,zero,54564
  b54180:	00b54224 	muli	r2,zero,-11000
  b54184:	00b54224 	muli	r2,zero,-11000
  b54188:	00b54224 	muli	r2,zero,-11000
  b5418c:	00b54224 	muli	r2,zero,-11000
  b54190:	00b54224 	muli	r2,zero,-11000
  b54194:	00b5497c 	xorhi	r2,zero,54565
  b54198:	00b54224 	muli	r2,zero,-11000
  b5419c:	00b54224 	muli	r2,zero,-11000
  b541a0:	00b54f9c 	xori	r2,zero,54590
  b541a4:	00b54224 	muli	r2,zero,-11000
  b541a8:	00b54224 	muli	r2,zero,-11000
  b541ac:	00b54224 	muli	r2,zero,-11000
  b541b0:	00b54224 	muli	r2,zero,-11000
  b541b4:	00b54224 	muli	r2,zero,-11000
  b541b8:	00b54224 	muli	r2,zero,-11000
  b541bc:	00b54224 	muli	r2,zero,-11000
  b541c0:	00b54224 	muli	r2,zero,-11000
  b541c4:	00b54224 	muli	r2,zero,-11000
  b541c8:	00b54224 	muli	r2,zero,-11000
  b541cc:	00b54f70 	cmpltui	r2,zero,54589
  b541d0:	00b54888 	cmpgei	r2,zero,-10974
  b541d4:	00b54ee8 	cmpgeui	r2,zero,54587
  b541d8:	00b54ee8 	cmpgeui	r2,zero,54587
  b541dc:	00b54ee8 	cmpgeui	r2,zero,54587
  b541e0:	00b54ed4 	movui	r2,54587
  b541e4:	00b54888 	cmpgei	r2,zero,-10974
  b541e8:	00b54224 	muli	r2,zero,-11000
  b541ec:	00b54224 	muli	r2,zero,-11000
  b541f0:	00b54e5c 	xori	r2,zero,54585
  b541f4:	00b54224 	muli	r2,zero,-11000
  b541f8:	00b54e2c 	andhi	r2,zero,54584
  b541fc:	00b5493c 	xorhi	r2,zero,54564
  b54200:	00b54e8c 	andi	r2,zero,54586
  b54204:	00b54e78 	rdprs	r2,zero,-10951
  b54208:	00b54224 	muli	r2,zero,-11000
  b5420c:	00b55108 	cmpgei	r2,zero,-10940
  b54210:	00b54224 	muli	r2,zero,-11000
  b54214:	00b54988 	cmpgei	r2,zero,-10970
  b54218:	00b54224 	muli	r2,zero,-11000
  b5421c:	00b54224 	muli	r2,zero,-11000
  b54220:	00b55000 	call	b5500 <__alt_mem_onchip_memory2_3+0xae500>
  b54224:	d9014d17 	ldw	r4,1332(sp)
  b54228:	2000ce26 	beq	r4,zero,b54564 <___vfprintf_internal_r+0x6d4>
  b5422c:	01400044 	movi	r5,1
  b54230:	d9800f04 	addi	r6,sp,60
  b54234:	d9c14015 	stw	r7,1280(sp)
  b54238:	d9414515 	stw	r5,1300(sp)
  b5423c:	d9814115 	stw	r6,1284(sp)
  b54240:	280f883a 	mov	r7,r5
  b54244:	d9000f05 	stb	r4,60(sp)
  b54248:	d8000405 	stb	zero,16(sp)
  b5424c:	d8014615 	stw	zero,1304(sp)
  b54250:	d8c14c17 	ldw	r3,1328(sp)
  b54254:	1880008c 	andi	r2,r3,2
  b54258:	1005003a 	cmpeq	r2,r2,zero
  b5425c:	d8815015 	stw	r2,1344(sp)
  b54260:	1000031e 	bne	r2,zero,b54270 <___vfprintf_internal_r+0x3e0>
  b54264:	d9014517 	ldw	r4,1300(sp)
  b54268:	21000084 	addi	r4,r4,2
  b5426c:	d9014515 	stw	r4,1300(sp)
  b54270:	d9414c17 	ldw	r5,1328(sp)
  b54274:	2940210c 	andi	r5,r5,132
  b54278:	d9414e15 	stw	r5,1336(sp)
  b5427c:	28002d1e 	bne	r5,zero,b54334 <___vfprintf_internal_r+0x4a4>
  b54280:	d9814a17 	ldw	r6,1320(sp)
  b54284:	d8814517 	ldw	r2,1300(sp)
  b54288:	30a1c83a 	sub	r16,r6,r2
  b5428c:	0400290e 	bge	zero,r16,b54334 <___vfprintf_internal_r+0x4a4>
  b54290:	00800404 	movi	r2,16
  b54294:	1404580e 	bge	r2,r16,b553f8 <___vfprintf_internal_r+0x1568>
  b54298:	dc800e17 	ldw	r18,56(sp)
  b5429c:	dc400d17 	ldw	r17,52(sp)
  b542a0:	1027883a 	mov	r19,r2
  b542a4:	07002db4 	movhi	fp,182
  b542a8:	e7046384 	addi	fp,fp,4494
  b542ac:	050001c4 	movi	r20,7
  b542b0:	00000306 	br	b542c0 <___vfprintf_internal_r+0x430>
  b542b4:	843ffc04 	addi	r16,r16,-16
  b542b8:	ad400204 	addi	r21,r21,8
  b542bc:	9c00130e 	bge	r19,r16,b5430c <___vfprintf_internal_r+0x47c>
  b542c0:	94800404 	addi	r18,r18,16
  b542c4:	8c400044 	addi	r17,r17,1
  b542c8:	af000015 	stw	fp,0(r21)
  b542cc:	acc00115 	stw	r19,4(r21)
  b542d0:	dc800e15 	stw	r18,56(sp)
  b542d4:	dc400d15 	stw	r17,52(sp)
  b542d8:	a47ff60e 	bge	r20,r17,b542b4 <___vfprintf_internal_r+0x424>
  b542dc:	d9014f17 	ldw	r4,1340(sp)
  b542e0:	b00b883a 	mov	r5,r22
  b542e4:	d9800c04 	addi	r6,sp,48
  b542e8:	d9c15115 	stw	r7,1348(sp)
  b542ec:	0b53e380 	call	b53e38 <__sprint_r>
  b542f0:	d9c15117 	ldw	r7,1348(sp)
  b542f4:	10009e1e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b542f8:	843ffc04 	addi	r16,r16,-16
  b542fc:	dc800e17 	ldw	r18,56(sp)
  b54300:	dc400d17 	ldw	r17,52(sp)
  b54304:	dd401904 	addi	r21,sp,100
  b54308:	9c3fed16 	blt	r19,r16,b542c0 <___vfprintf_internal_r+0x430>
  b5430c:	9425883a 	add	r18,r18,r16
  b54310:	8c400044 	addi	r17,r17,1
  b54314:	008001c4 	movi	r2,7
  b54318:	af000015 	stw	fp,0(r21)
  b5431c:	ac000115 	stw	r16,4(r21)
  b54320:	dc800e15 	stw	r18,56(sp)
  b54324:	dc400d15 	stw	r17,52(sp)
  b54328:	1441f516 	blt	r2,r17,b54b00 <___vfprintf_internal_r+0xc70>
  b5432c:	ad400204 	addi	r21,r21,8
  b54330:	00000206 	br	b5433c <___vfprintf_internal_r+0x4ac>
  b54334:	dc800e17 	ldw	r18,56(sp)
  b54338:	dc400d17 	ldw	r17,52(sp)
  b5433c:	d8800407 	ldb	r2,16(sp)
  b54340:	10000b26 	beq	r2,zero,b54370 <___vfprintf_internal_r+0x4e0>
  b54344:	00800044 	movi	r2,1
  b54348:	94800044 	addi	r18,r18,1
  b5434c:	8c400044 	addi	r17,r17,1
  b54350:	a8800115 	stw	r2,4(r21)
  b54354:	d8c00404 	addi	r3,sp,16
  b54358:	008001c4 	movi	r2,7
  b5435c:	a8c00015 	stw	r3,0(r21)
  b54360:	dc800e15 	stw	r18,56(sp)
  b54364:	dc400d15 	stw	r17,52(sp)
  b54368:	1441da16 	blt	r2,r17,b54ad4 <___vfprintf_internal_r+0xc44>
  b5436c:	ad400204 	addi	r21,r21,8
  b54370:	d9015017 	ldw	r4,1344(sp)
  b54374:	20000b1e 	bne	r4,zero,b543a4 <___vfprintf_internal_r+0x514>
  b54378:	d8800444 	addi	r2,sp,17
  b5437c:	94800084 	addi	r18,r18,2
  b54380:	8c400044 	addi	r17,r17,1
  b54384:	a8800015 	stw	r2,0(r21)
  b54388:	00c00084 	movi	r3,2
  b5438c:	008001c4 	movi	r2,7
  b54390:	a8c00115 	stw	r3,4(r21)
  b54394:	dc800e15 	stw	r18,56(sp)
  b54398:	dc400d15 	stw	r17,52(sp)
  b5439c:	1441c216 	blt	r2,r17,b54aa8 <___vfprintf_internal_r+0xc18>
  b543a0:	ad400204 	addi	r21,r21,8
  b543a4:	d9414e17 	ldw	r5,1336(sp)
  b543a8:	00802004 	movi	r2,128
  b543ac:	2880b126 	beq	r5,r2,b54674 <___vfprintf_internal_r+0x7e4>
  b543b0:	d8c14617 	ldw	r3,1304(sp)
  b543b4:	19e1c83a 	sub	r16,r3,r7
  b543b8:	0400260e 	bge	zero,r16,b54454 <___vfprintf_internal_r+0x5c4>
  b543bc:	00800404 	movi	r2,16
  b543c0:	1403c90e 	bge	r2,r16,b552e8 <___vfprintf_internal_r+0x1458>
  b543c4:	1027883a 	mov	r19,r2
  b543c8:	07002db4 	movhi	fp,182
  b543cc:	e7045f84 	addi	fp,fp,4478
  b543d0:	050001c4 	movi	r20,7
  b543d4:	00000306 	br	b543e4 <___vfprintf_internal_r+0x554>
  b543d8:	843ffc04 	addi	r16,r16,-16
  b543dc:	ad400204 	addi	r21,r21,8
  b543e0:	9c00130e 	bge	r19,r16,b54430 <___vfprintf_internal_r+0x5a0>
  b543e4:	94800404 	addi	r18,r18,16
  b543e8:	8c400044 	addi	r17,r17,1
  b543ec:	af000015 	stw	fp,0(r21)
  b543f0:	acc00115 	stw	r19,4(r21)
  b543f4:	dc800e15 	stw	r18,56(sp)
  b543f8:	dc400d15 	stw	r17,52(sp)
  b543fc:	a47ff60e 	bge	r20,r17,b543d8 <___vfprintf_internal_r+0x548>
  b54400:	d9014f17 	ldw	r4,1340(sp)
  b54404:	b00b883a 	mov	r5,r22
  b54408:	d9800c04 	addi	r6,sp,48
  b5440c:	d9c15115 	stw	r7,1348(sp)
  b54410:	0b53e380 	call	b53e38 <__sprint_r>
  b54414:	d9c15117 	ldw	r7,1348(sp)
  b54418:	1000551e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b5441c:	843ffc04 	addi	r16,r16,-16
  b54420:	dc800e17 	ldw	r18,56(sp)
  b54424:	dc400d17 	ldw	r17,52(sp)
  b54428:	dd401904 	addi	r21,sp,100
  b5442c:	9c3fed16 	blt	r19,r16,b543e4 <___vfprintf_internal_r+0x554>
  b54430:	9425883a 	add	r18,r18,r16
  b54434:	8c400044 	addi	r17,r17,1
  b54438:	008001c4 	movi	r2,7
  b5443c:	af000015 	stw	fp,0(r21)
  b54440:	ac000115 	stw	r16,4(r21)
  b54444:	dc800e15 	stw	r18,56(sp)
  b54448:	dc400d15 	stw	r17,52(sp)
  b5444c:	14418216 	blt	r2,r17,b54a58 <___vfprintf_internal_r+0xbc8>
  b54450:	ad400204 	addi	r21,r21,8
  b54454:	d9014c17 	ldw	r4,1328(sp)
  b54458:	2080400c 	andi	r2,r4,256
  b5445c:	10004a1e 	bne	r2,zero,b54588 <___vfprintf_internal_r+0x6f8>
  b54460:	d9414117 	ldw	r5,1284(sp)
  b54464:	91e5883a 	add	r18,r18,r7
  b54468:	8c400044 	addi	r17,r17,1
  b5446c:	008001c4 	movi	r2,7
  b54470:	a9400015 	stw	r5,0(r21)
  b54474:	a9c00115 	stw	r7,4(r21)
  b54478:	dc800e15 	stw	r18,56(sp)
  b5447c:	dc400d15 	stw	r17,52(sp)
  b54480:	14416716 	blt	r2,r17,b54a20 <___vfprintf_internal_r+0xb90>
  b54484:	a8c00204 	addi	r3,r21,8
  b54488:	d9814c17 	ldw	r6,1328(sp)
  b5448c:	3080010c 	andi	r2,r6,4
  b54490:	10002826 	beq	r2,zero,b54534 <___vfprintf_internal_r+0x6a4>
  b54494:	d8814a17 	ldw	r2,1320(sp)
  b54498:	d9014517 	ldw	r4,1300(sp)
  b5449c:	1121c83a 	sub	r16,r2,r4
  b544a0:	0400240e 	bge	zero,r16,b54534 <___vfprintf_internal_r+0x6a4>
  b544a4:	00800404 	movi	r2,16
  b544a8:	14044f0e 	bge	r2,r16,b555e8 <___vfprintf_internal_r+0x1758>
  b544ac:	dc400d17 	ldw	r17,52(sp)
  b544b0:	1027883a 	mov	r19,r2
  b544b4:	07002db4 	movhi	fp,182
  b544b8:	e7046384 	addi	fp,fp,4494
  b544bc:	050001c4 	movi	r20,7
  b544c0:	00000306 	br	b544d0 <___vfprintf_internal_r+0x640>
  b544c4:	843ffc04 	addi	r16,r16,-16
  b544c8:	18c00204 	addi	r3,r3,8
  b544cc:	9c00110e 	bge	r19,r16,b54514 <___vfprintf_internal_r+0x684>
  b544d0:	94800404 	addi	r18,r18,16
  b544d4:	8c400044 	addi	r17,r17,1
  b544d8:	1f000015 	stw	fp,0(r3)
  b544dc:	1cc00115 	stw	r19,4(r3)
  b544e0:	dc800e15 	stw	r18,56(sp)
  b544e4:	dc400d15 	stw	r17,52(sp)
  b544e8:	a47ff60e 	bge	r20,r17,b544c4 <___vfprintf_internal_r+0x634>
  b544ec:	d9014f17 	ldw	r4,1340(sp)
  b544f0:	b00b883a 	mov	r5,r22
  b544f4:	d9800c04 	addi	r6,sp,48
  b544f8:	0b53e380 	call	b53e38 <__sprint_r>
  b544fc:	10001c1e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b54500:	843ffc04 	addi	r16,r16,-16
  b54504:	dc800e17 	ldw	r18,56(sp)
  b54508:	dc400d17 	ldw	r17,52(sp)
  b5450c:	d8c01904 	addi	r3,sp,100
  b54510:	9c3fef16 	blt	r19,r16,b544d0 <___vfprintf_internal_r+0x640>
  b54514:	9425883a 	add	r18,r18,r16
  b54518:	8c400044 	addi	r17,r17,1
  b5451c:	008001c4 	movi	r2,7
  b54520:	1f000015 	stw	fp,0(r3)
  b54524:	1c000115 	stw	r16,4(r3)
  b54528:	dc800e15 	stw	r18,56(sp)
  b5452c:	dc400d15 	stw	r17,52(sp)
  b54530:	1440cb16 	blt	r2,r17,b54860 <___vfprintf_internal_r+0x9d0>
  b54534:	d8814a17 	ldw	r2,1320(sp)
  b54538:	d9414517 	ldw	r5,1300(sp)
  b5453c:	1140010e 	bge	r2,r5,b54544 <___vfprintf_internal_r+0x6b4>
  b54540:	2805883a 	mov	r2,r5
  b54544:	d9814b17 	ldw	r6,1324(sp)
  b54548:	308d883a 	add	r6,r6,r2
  b5454c:	d9814b15 	stw	r6,1324(sp)
  b54550:	90013b1e 	bne	r18,zero,b54a40 <___vfprintf_internal_r+0xbb0>
  b54554:	d9c14017 	ldw	r7,1280(sp)
  b54558:	dd401904 	addi	r21,sp,100
  b5455c:	d8000d15 	stw	zero,52(sp)
  b54560:	003ea706 	br	b54000 <___vfprintf_internal_r+0x170>
  b54564:	d8800e17 	ldw	r2,56(sp)
  b54568:	10053f1e 	bne	r2,zero,b55a68 <___vfprintf_internal_r+0x1bd8>
  b5456c:	d8000d15 	stw	zero,52(sp)
  b54570:	b080030b 	ldhu	r2,12(r22)
  b54574:	1080100c 	andi	r2,r2,64
  b54578:	103e8726 	beq	r2,zero,b53f98 <___vfprintf_internal_r+0x108>
  b5457c:	00bfffc4 	movi	r2,-1
  b54580:	d8814b15 	stw	r2,1324(sp)
  b54584:	003e8406 	br	b53f98 <___vfprintf_internal_r+0x108>
  b54588:	d9814d17 	ldw	r6,1332(sp)
  b5458c:	00801944 	movi	r2,101
  b54590:	11806e16 	blt	r2,r6,b5474c <___vfprintf_internal_r+0x8bc>
  b54594:	d9414717 	ldw	r5,1308(sp)
  b54598:	00c00044 	movi	r3,1
  b5459c:	1943430e 	bge	r3,r5,b552ac <___vfprintf_internal_r+0x141c>
  b545a0:	d8814117 	ldw	r2,1284(sp)
  b545a4:	94800044 	addi	r18,r18,1
  b545a8:	8c400044 	addi	r17,r17,1
  b545ac:	a8800015 	stw	r2,0(r21)
  b545b0:	008001c4 	movi	r2,7
  b545b4:	a8c00115 	stw	r3,4(r21)
  b545b8:	dc800e15 	stw	r18,56(sp)
  b545bc:	dc400d15 	stw	r17,52(sp)
  b545c0:	1441ca16 	blt	r2,r17,b54cec <___vfprintf_internal_r+0xe5c>
  b545c4:	a8c00204 	addi	r3,r21,8
  b545c8:	d9014917 	ldw	r4,1316(sp)
  b545cc:	00800044 	movi	r2,1
  b545d0:	94800044 	addi	r18,r18,1
  b545d4:	8c400044 	addi	r17,r17,1
  b545d8:	18800115 	stw	r2,4(r3)
  b545dc:	008001c4 	movi	r2,7
  b545e0:	19000015 	stw	r4,0(r3)
  b545e4:	dc800e15 	stw	r18,56(sp)
  b545e8:	dc400d15 	stw	r17,52(sp)
  b545ec:	1441b616 	blt	r2,r17,b54cc8 <___vfprintf_internal_r+0xe38>
  b545f0:	1cc00204 	addi	r19,r3,8
  b545f4:	d9014217 	ldw	r4,1288(sp)
  b545f8:	d9414317 	ldw	r5,1292(sp)
  b545fc:	000d883a 	mov	r6,zero
  b54600:	000f883a 	mov	r7,zero
  b54604:	0b531580 	call	b53158 <__nedf2>
  b54608:	10017426 	beq	r2,zero,b54bdc <___vfprintf_internal_r+0xd4c>
  b5460c:	d9414717 	ldw	r5,1308(sp)
  b54610:	d9814117 	ldw	r6,1284(sp)
  b54614:	8c400044 	addi	r17,r17,1
  b54618:	2c85883a 	add	r2,r5,r18
  b5461c:	14bfffc4 	addi	r18,r2,-1
  b54620:	28bfffc4 	addi	r2,r5,-1
  b54624:	30c00044 	addi	r3,r6,1
  b54628:	98800115 	stw	r2,4(r19)
  b5462c:	008001c4 	movi	r2,7
  b54630:	98c00015 	stw	r3,0(r19)
  b54634:	dc800e15 	stw	r18,56(sp)
  b54638:	dc400d15 	stw	r17,52(sp)
  b5463c:	14418e16 	blt	r2,r17,b54c78 <___vfprintf_internal_r+0xde8>
  b54640:	9cc00204 	addi	r19,r19,8
  b54644:	d9414817 	ldw	r5,1312(sp)
  b54648:	d8800804 	addi	r2,sp,32
  b5464c:	8c400044 	addi	r17,r17,1
  b54650:	9165883a 	add	r18,r18,r5
  b54654:	98800015 	stw	r2,0(r19)
  b54658:	008001c4 	movi	r2,7
  b5465c:	99400115 	stw	r5,4(r19)
  b54660:	dc800e15 	stw	r18,56(sp)
  b54664:	dc400d15 	stw	r17,52(sp)
  b54668:	1440ed16 	blt	r2,r17,b54a20 <___vfprintf_internal_r+0xb90>
  b5466c:	98c00204 	addi	r3,r19,8
  b54670:	003f8506 	br	b54488 <___vfprintf_internal_r+0x5f8>
  b54674:	d9814a17 	ldw	r6,1320(sp)
  b54678:	d8814517 	ldw	r2,1300(sp)
  b5467c:	30a1c83a 	sub	r16,r6,r2
  b54680:	043f4b0e 	bge	zero,r16,b543b0 <___vfprintf_internal_r+0x520>
  b54684:	00800404 	movi	r2,16
  b54688:	1404340e 	bge	r2,r16,b5575c <___vfprintf_internal_r+0x18cc>
  b5468c:	1027883a 	mov	r19,r2
  b54690:	07002db4 	movhi	fp,182
  b54694:	e7045f84 	addi	fp,fp,4478
  b54698:	050001c4 	movi	r20,7
  b5469c:	00000306 	br	b546ac <___vfprintf_internal_r+0x81c>
  b546a0:	843ffc04 	addi	r16,r16,-16
  b546a4:	ad400204 	addi	r21,r21,8
  b546a8:	9c00130e 	bge	r19,r16,b546f8 <___vfprintf_internal_r+0x868>
  b546ac:	94800404 	addi	r18,r18,16
  b546b0:	8c400044 	addi	r17,r17,1
  b546b4:	af000015 	stw	fp,0(r21)
  b546b8:	acc00115 	stw	r19,4(r21)
  b546bc:	dc800e15 	stw	r18,56(sp)
  b546c0:	dc400d15 	stw	r17,52(sp)
  b546c4:	a47ff60e 	bge	r20,r17,b546a0 <___vfprintf_internal_r+0x810>
  b546c8:	d9014f17 	ldw	r4,1340(sp)
  b546cc:	b00b883a 	mov	r5,r22
  b546d0:	d9800c04 	addi	r6,sp,48
  b546d4:	d9c15115 	stw	r7,1348(sp)
  b546d8:	0b53e380 	call	b53e38 <__sprint_r>
  b546dc:	d9c15117 	ldw	r7,1348(sp)
  b546e0:	103fa31e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b546e4:	843ffc04 	addi	r16,r16,-16
  b546e8:	dc800e17 	ldw	r18,56(sp)
  b546ec:	dc400d17 	ldw	r17,52(sp)
  b546f0:	dd401904 	addi	r21,sp,100
  b546f4:	9c3fed16 	blt	r19,r16,b546ac <___vfprintf_internal_r+0x81c>
  b546f8:	9425883a 	add	r18,r18,r16
  b546fc:	8c400044 	addi	r17,r17,1
  b54700:	008001c4 	movi	r2,7
  b54704:	af000015 	stw	fp,0(r21)
  b54708:	ac000115 	stw	r16,4(r21)
  b5470c:	dc800e15 	stw	r18,56(sp)
  b54710:	dc400d15 	stw	r17,52(sp)
  b54714:	14416116 	blt	r2,r17,b54c9c <___vfprintf_internal_r+0xe0c>
  b54718:	ad400204 	addi	r21,r21,8
  b5471c:	003f2406 	br	b543b0 <___vfprintf_internal_r+0x520>
  b54720:	d9014f17 	ldw	r4,1340(sp)
  b54724:	0b579000 	call	b57900 <__sinit>
  b54728:	d9c15117 	ldw	r7,1348(sp)
  b5472c:	003def06 	br	b53eec <___vfprintf_internal_r+0x5c>
  b54730:	d9014f17 	ldw	r4,1340(sp)
  b54734:	b00b883a 	mov	r5,r22
  b54738:	d9c15115 	stw	r7,1348(sp)
  b5473c:	0b55d600 	call	b55d60 <__swsetup_r>
  b54740:	d9c15117 	ldw	r7,1348(sp)
  b54744:	103dee26 	beq	r2,zero,b53f00 <___vfprintf_internal_r+0x70>
  b54748:	003f8c06 	br	b5457c <___vfprintf_internal_r+0x6ec>
  b5474c:	d9014217 	ldw	r4,1288(sp)
  b54750:	d9414317 	ldw	r5,1292(sp)
  b54754:	000d883a 	mov	r6,zero
  b54758:	000f883a 	mov	r7,zero
  b5475c:	0b5befc0 	call	b5befc <__eqdf2>
  b54760:	1000f21e 	bne	r2,zero,b54b2c <___vfprintf_internal_r+0xc9c>
  b54764:	00802db4 	movhi	r2,182
  b54768:	1083ea04 	addi	r2,r2,4008
  b5476c:	94800044 	addi	r18,r18,1
  b54770:	8c400044 	addi	r17,r17,1
  b54774:	a8800015 	stw	r2,0(r21)
  b54778:	00c00044 	movi	r3,1
  b5477c:	008001c4 	movi	r2,7
  b54780:	a8c00115 	stw	r3,4(r21)
  b54784:	dc800e15 	stw	r18,56(sp)
  b54788:	dc400d15 	stw	r17,52(sp)
  b5478c:	1442fa16 	blt	r2,r17,b55378 <___vfprintf_internal_r+0x14e8>
  b54790:	a8c00204 	addi	r3,r21,8
  b54794:	d8800517 	ldw	r2,20(sp)
  b54798:	d9014717 	ldw	r4,1308(sp)
  b5479c:	11015c0e 	bge	r2,r4,b54d10 <___vfprintf_internal_r+0xe80>
  b547a0:	dc400d17 	ldw	r17,52(sp)
  b547a4:	d9814917 	ldw	r6,1316(sp)
  b547a8:	00800044 	movi	r2,1
  b547ac:	94800044 	addi	r18,r18,1
  b547b0:	8c400044 	addi	r17,r17,1
  b547b4:	18800115 	stw	r2,4(r3)
  b547b8:	008001c4 	movi	r2,7
  b547bc:	19800015 	stw	r6,0(r3)
  b547c0:	dc800e15 	stw	r18,56(sp)
  b547c4:	dc400d15 	stw	r17,52(sp)
  b547c8:	14431016 	blt	r2,r17,b5540c <___vfprintf_internal_r+0x157c>
  b547cc:	18c00204 	addi	r3,r3,8
  b547d0:	d8814717 	ldw	r2,1308(sp)
  b547d4:	143fffc4 	addi	r16,r2,-1
  b547d8:	043f2b0e 	bge	zero,r16,b54488 <___vfprintf_internal_r+0x5f8>
  b547dc:	00800404 	movi	r2,16
  b547e0:	1402a20e 	bge	r2,r16,b5526c <___vfprintf_internal_r+0x13dc>
  b547e4:	dc400d17 	ldw	r17,52(sp)
  b547e8:	1027883a 	mov	r19,r2
  b547ec:	07002db4 	movhi	fp,182
  b547f0:	e7045f84 	addi	fp,fp,4478
  b547f4:	050001c4 	movi	r20,7
  b547f8:	00000306 	br	b54808 <___vfprintf_internal_r+0x978>
  b547fc:	18c00204 	addi	r3,r3,8
  b54800:	843ffc04 	addi	r16,r16,-16
  b54804:	9c029c0e 	bge	r19,r16,b55278 <___vfprintf_internal_r+0x13e8>
  b54808:	94800404 	addi	r18,r18,16
  b5480c:	8c400044 	addi	r17,r17,1
  b54810:	1f000015 	stw	fp,0(r3)
  b54814:	1cc00115 	stw	r19,4(r3)
  b54818:	dc800e15 	stw	r18,56(sp)
  b5481c:	dc400d15 	stw	r17,52(sp)
  b54820:	a47ff60e 	bge	r20,r17,b547fc <___vfprintf_internal_r+0x96c>
  b54824:	d9014f17 	ldw	r4,1340(sp)
  b54828:	b00b883a 	mov	r5,r22
  b5482c:	d9800c04 	addi	r6,sp,48
  b54830:	0b53e380 	call	b53e38 <__sprint_r>
  b54834:	103f4e1e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b54838:	dc800e17 	ldw	r18,56(sp)
  b5483c:	dc400d17 	ldw	r17,52(sp)
  b54840:	d8c01904 	addi	r3,sp,100
  b54844:	003fee06 	br	b54800 <___vfprintf_internal_r+0x970>
  b54848:	d8802c0b 	ldhu	r2,176(sp)
  b5484c:	00ffffc4 	movi	r3,-1
  b54850:	d8c14b15 	stw	r3,1324(sp)
  b54854:	1080100c 	andi	r2,r2,64
  b54858:	103dcc1e 	bne	r2,zero,b53f8c <___vfprintf_internal_r+0xfc>
  b5485c:	003dce06 	br	b53f98 <___vfprintf_internal_r+0x108>
  b54860:	d9014f17 	ldw	r4,1340(sp)
  b54864:	b00b883a 	mov	r5,r22
  b54868:	d9800c04 	addi	r6,sp,48
  b5486c:	0b53e380 	call	b53e38 <__sprint_r>
  b54870:	103f3f1e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b54874:	dc800e17 	ldw	r18,56(sp)
  b54878:	003f2e06 	br	b54534 <___vfprintf_internal_r+0x6a4>
  b5487c:	d9414c17 	ldw	r5,1328(sp)
  b54880:	29400414 	ori	r5,r5,16
  b54884:	d9414c15 	stw	r5,1328(sp)
  b54888:	d9814c17 	ldw	r6,1328(sp)
  b5488c:	3080080c 	andi	r2,r6,32
  b54890:	10014f1e 	bne	r2,zero,b54dd0 <___vfprintf_internal_r+0xf40>
  b54894:	d8c14c17 	ldw	r3,1328(sp)
  b54898:	1880040c 	andi	r2,r3,16
  b5489c:	1002ea1e 	bne	r2,zero,b55448 <___vfprintf_internal_r+0x15b8>
  b548a0:	d9014c17 	ldw	r4,1328(sp)
  b548a4:	2080100c 	andi	r2,r4,64
  b548a8:	1002e726 	beq	r2,zero,b55448 <___vfprintf_internal_r+0x15b8>
  b548ac:	3880000f 	ldh	r2,0(r7)
  b548b0:	39c00104 	addi	r7,r7,4
  b548b4:	d9c14015 	stw	r7,1280(sp)
  b548b8:	1023d7fa 	srai	r17,r2,31
  b548bc:	1021883a 	mov	r16,r2
  b548c0:	88037216 	blt	r17,zero,b5568c <___vfprintf_internal_r+0x17fc>
  b548c4:	01000044 	movi	r4,1
  b548c8:	98000416 	blt	r19,zero,b548dc <___vfprintf_internal_r+0xa4c>
  b548cc:	d8c14c17 	ldw	r3,1328(sp)
  b548d0:	00bfdfc4 	movi	r2,-129
  b548d4:	1886703a 	and	r3,r3,r2
  b548d8:	d8c14c15 	stw	r3,1328(sp)
  b548dc:	8444b03a 	or	r2,r16,r17
  b548e0:	1002261e 	bne	r2,zero,b5517c <___vfprintf_internal_r+0x12ec>
  b548e4:	9802251e 	bne	r19,zero,b5517c <___vfprintf_internal_r+0x12ec>
  b548e8:	20803fcc 	andi	r2,r4,255
  b548ec:	10029b26 	beq	r2,zero,b5535c <___vfprintf_internal_r+0x14cc>
  b548f0:	d8c01904 	addi	r3,sp,100
  b548f4:	dd000f04 	addi	r20,sp,60
  b548f8:	d8c14115 	stw	r3,1284(sp)
  b548fc:	d8c14117 	ldw	r3,1284(sp)
  b54900:	dcc14515 	stw	r19,1300(sp)
  b54904:	a0c5c83a 	sub	r2,r20,r3
  b54908:	11c00a04 	addi	r7,r2,40
  b5490c:	99c0010e 	bge	r19,r7,b54914 <___vfprintf_internal_r+0xa84>
  b54910:	d9c14515 	stw	r7,1300(sp)
  b54914:	dcc14615 	stw	r19,1304(sp)
  b54918:	d8800407 	ldb	r2,16(sp)
  b5491c:	103e4c26 	beq	r2,zero,b54250 <___vfprintf_internal_r+0x3c0>
  b54920:	d8814517 	ldw	r2,1300(sp)
  b54924:	10800044 	addi	r2,r2,1
  b54928:	d8814515 	stw	r2,1300(sp)
  b5492c:	003e4806 	br	b54250 <___vfprintf_internal_r+0x3c0>
  b54930:	d9814c17 	ldw	r6,1328(sp)
  b54934:	31800414 	ori	r6,r6,16
  b54938:	d9814c15 	stw	r6,1328(sp)
  b5493c:	d8c14c17 	ldw	r3,1328(sp)
  b54940:	1880080c 	andi	r2,r3,32
  b54944:	1001271e 	bne	r2,zero,b54de4 <___vfprintf_internal_r+0xf54>
  b54948:	d9414c17 	ldw	r5,1328(sp)
  b5494c:	2880040c 	andi	r2,r5,16
  b54950:	1002b61e 	bne	r2,zero,b5542c <___vfprintf_internal_r+0x159c>
  b54954:	d9814c17 	ldw	r6,1328(sp)
  b54958:	3080100c 	andi	r2,r6,64
  b5495c:	1002b326 	beq	r2,zero,b5542c <___vfprintf_internal_r+0x159c>
  b54960:	3c00000b 	ldhu	r16,0(r7)
  b54964:	0009883a 	mov	r4,zero
  b54968:	39c00104 	addi	r7,r7,4
  b5496c:	0023883a 	mov	r17,zero
  b54970:	d9c14015 	stw	r7,1280(sp)
  b54974:	d8000405 	stb	zero,16(sp)
  b54978:	003fd306 	br	b548c8 <___vfprintf_internal_r+0xa38>
  b5497c:	d9014c17 	ldw	r4,1328(sp)
  b54980:	21000414 	ori	r4,r4,16
  b54984:	d9014c15 	stw	r4,1328(sp)
  b54988:	d9414c17 	ldw	r5,1328(sp)
  b5498c:	2880080c 	andi	r2,r5,32
  b54990:	1001081e 	bne	r2,zero,b54db4 <___vfprintf_internal_r+0xf24>
  b54994:	d8c14c17 	ldw	r3,1328(sp)
  b54998:	1880040c 	andi	r2,r3,16
  b5499c:	1002b01e 	bne	r2,zero,b55460 <___vfprintf_internal_r+0x15d0>
  b549a0:	d9014c17 	ldw	r4,1328(sp)
  b549a4:	2080100c 	andi	r2,r4,64
  b549a8:	1002ad26 	beq	r2,zero,b55460 <___vfprintf_internal_r+0x15d0>
  b549ac:	3c00000b 	ldhu	r16,0(r7)
  b549b0:	01000044 	movi	r4,1
  b549b4:	39c00104 	addi	r7,r7,4
  b549b8:	0023883a 	mov	r17,zero
  b549bc:	d9c14015 	stw	r7,1280(sp)
  b549c0:	d8000405 	stb	zero,16(sp)
  b549c4:	003fc006 	br	b548c8 <___vfprintf_internal_r+0xa38>
  b549c8:	d9014f17 	ldw	r4,1340(sp)
  b549cc:	b00b883a 	mov	r5,r22
  b549d0:	d9800c04 	addi	r6,sp,48
  b549d4:	0b53e380 	call	b53e38 <__sprint_r>
  b549d8:	103ee51e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b549dc:	dc800e17 	ldw	r18,56(sp)
  b549e0:	d8c01904 	addi	r3,sp,100
  b549e4:	d9814c17 	ldw	r6,1328(sp)
  b549e8:	3080004c 	andi	r2,r6,1
  b549ec:	1005003a 	cmpeq	r2,r2,zero
  b549f0:	103ea51e 	bne	r2,zero,b54488 <___vfprintf_internal_r+0x5f8>
  b549f4:	00800044 	movi	r2,1
  b549f8:	dc400d17 	ldw	r17,52(sp)
  b549fc:	18800115 	stw	r2,4(r3)
  b54a00:	d8814917 	ldw	r2,1316(sp)
  b54a04:	94800044 	addi	r18,r18,1
  b54a08:	8c400044 	addi	r17,r17,1
  b54a0c:	18800015 	stw	r2,0(r3)
  b54a10:	008001c4 	movi	r2,7
  b54a14:	dc800e15 	stw	r18,56(sp)
  b54a18:	dc400d15 	stw	r17,52(sp)
  b54a1c:	14421e0e 	bge	r2,r17,b55298 <___vfprintf_internal_r+0x1408>
  b54a20:	d9014f17 	ldw	r4,1340(sp)
  b54a24:	b00b883a 	mov	r5,r22
  b54a28:	d9800c04 	addi	r6,sp,48
  b54a2c:	0b53e380 	call	b53e38 <__sprint_r>
  b54a30:	103ecf1e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b54a34:	dc800e17 	ldw	r18,56(sp)
  b54a38:	d8c01904 	addi	r3,sp,100
  b54a3c:	003e9206 	br	b54488 <___vfprintf_internal_r+0x5f8>
  b54a40:	d9014f17 	ldw	r4,1340(sp)
  b54a44:	b00b883a 	mov	r5,r22
  b54a48:	d9800c04 	addi	r6,sp,48
  b54a4c:	0b53e380 	call	b53e38 <__sprint_r>
  b54a50:	103ec026 	beq	r2,zero,b54554 <___vfprintf_internal_r+0x6c4>
  b54a54:	003ec606 	br	b54570 <___vfprintf_internal_r+0x6e0>
  b54a58:	d9014f17 	ldw	r4,1340(sp)
  b54a5c:	b00b883a 	mov	r5,r22
  b54a60:	d9800c04 	addi	r6,sp,48
  b54a64:	d9c15115 	stw	r7,1348(sp)
  b54a68:	0b53e380 	call	b53e38 <__sprint_r>
  b54a6c:	d9c15117 	ldw	r7,1348(sp)
  b54a70:	103ebf1e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b54a74:	dc800e17 	ldw	r18,56(sp)
  b54a78:	dc400d17 	ldw	r17,52(sp)
  b54a7c:	dd401904 	addi	r21,sp,100
  b54a80:	003e7406 	br	b54454 <___vfprintf_internal_r+0x5c4>
  b54a84:	d9014f17 	ldw	r4,1340(sp)
  b54a88:	b00b883a 	mov	r5,r22
  b54a8c:	d9800c04 	addi	r6,sp,48
  b54a90:	d9c15115 	stw	r7,1348(sp)
  b54a94:	0b53e380 	call	b53e38 <__sprint_r>
  b54a98:	d9c15117 	ldw	r7,1348(sp)
  b54a9c:	103eb41e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b54aa0:	dd401904 	addi	r21,sp,100
  b54aa4:	003d6d06 	br	b5405c <___vfprintf_internal_r+0x1cc>
  b54aa8:	d9014f17 	ldw	r4,1340(sp)
  b54aac:	b00b883a 	mov	r5,r22
  b54ab0:	d9800c04 	addi	r6,sp,48
  b54ab4:	d9c15115 	stw	r7,1348(sp)
  b54ab8:	0b53e380 	call	b53e38 <__sprint_r>
  b54abc:	d9c15117 	ldw	r7,1348(sp)
  b54ac0:	103eab1e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b54ac4:	dc800e17 	ldw	r18,56(sp)
  b54ac8:	dc400d17 	ldw	r17,52(sp)
  b54acc:	dd401904 	addi	r21,sp,100
  b54ad0:	003e3406 	br	b543a4 <___vfprintf_internal_r+0x514>
  b54ad4:	d9014f17 	ldw	r4,1340(sp)
  b54ad8:	b00b883a 	mov	r5,r22
  b54adc:	d9800c04 	addi	r6,sp,48
  b54ae0:	d9c15115 	stw	r7,1348(sp)
  b54ae4:	0b53e380 	call	b53e38 <__sprint_r>
  b54ae8:	d9c15117 	ldw	r7,1348(sp)
  b54aec:	103ea01e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b54af0:	dc800e17 	ldw	r18,56(sp)
  b54af4:	dc400d17 	ldw	r17,52(sp)
  b54af8:	dd401904 	addi	r21,sp,100
  b54afc:	003e1c06 	br	b54370 <___vfprintf_internal_r+0x4e0>
  b54b00:	d9014f17 	ldw	r4,1340(sp)
  b54b04:	b00b883a 	mov	r5,r22
  b54b08:	d9800c04 	addi	r6,sp,48
  b54b0c:	d9c15115 	stw	r7,1348(sp)
  b54b10:	0b53e380 	call	b53e38 <__sprint_r>
  b54b14:	d9c15117 	ldw	r7,1348(sp)
  b54b18:	103e951e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b54b1c:	dc800e17 	ldw	r18,56(sp)
  b54b20:	dc400d17 	ldw	r17,52(sp)
  b54b24:	dd401904 	addi	r21,sp,100
  b54b28:	003e0406 	br	b5433c <___vfprintf_internal_r+0x4ac>
  b54b2c:	d9000517 	ldw	r4,20(sp)
  b54b30:	0102520e 	bge	zero,r4,b5547c <___vfprintf_internal_r+0x15ec>
  b54b34:	d9814717 	ldw	r6,1308(sp)
  b54b38:	21807a16 	blt	r4,r6,b54d24 <___vfprintf_internal_r+0xe94>
  b54b3c:	d8814117 	ldw	r2,1284(sp)
  b54b40:	91a5883a 	add	r18,r18,r6
  b54b44:	8c400044 	addi	r17,r17,1
  b54b48:	a8800015 	stw	r2,0(r21)
  b54b4c:	008001c4 	movi	r2,7
  b54b50:	a9800115 	stw	r6,4(r21)
  b54b54:	dc800e15 	stw	r18,56(sp)
  b54b58:	dc400d15 	stw	r17,52(sp)
  b54b5c:	1442f616 	blt	r2,r17,b55738 <___vfprintf_internal_r+0x18a8>
  b54b60:	a8c00204 	addi	r3,r21,8
  b54b64:	d9414717 	ldw	r5,1308(sp)
  b54b68:	2161c83a 	sub	r16,r4,r5
  b54b6c:	043f9d0e 	bge	zero,r16,b549e4 <___vfprintf_internal_r+0xb54>
  b54b70:	00800404 	movi	r2,16
  b54b74:	1402130e 	bge	r2,r16,b553c4 <___vfprintf_internal_r+0x1534>
  b54b78:	dc400d17 	ldw	r17,52(sp)
  b54b7c:	1027883a 	mov	r19,r2
  b54b80:	07002db4 	movhi	fp,182
  b54b84:	e7045f84 	addi	fp,fp,4478
  b54b88:	050001c4 	movi	r20,7
  b54b8c:	00000306 	br	b54b9c <___vfprintf_internal_r+0xd0c>
  b54b90:	18c00204 	addi	r3,r3,8
  b54b94:	843ffc04 	addi	r16,r16,-16
  b54b98:	9c020d0e 	bge	r19,r16,b553d0 <___vfprintf_internal_r+0x1540>
  b54b9c:	94800404 	addi	r18,r18,16
  b54ba0:	8c400044 	addi	r17,r17,1
  b54ba4:	1f000015 	stw	fp,0(r3)
  b54ba8:	1cc00115 	stw	r19,4(r3)
  b54bac:	dc800e15 	stw	r18,56(sp)
  b54bb0:	dc400d15 	stw	r17,52(sp)
  b54bb4:	a47ff60e 	bge	r20,r17,b54b90 <___vfprintf_internal_r+0xd00>
  b54bb8:	d9014f17 	ldw	r4,1340(sp)
  b54bbc:	b00b883a 	mov	r5,r22
  b54bc0:	d9800c04 	addi	r6,sp,48
  b54bc4:	0b53e380 	call	b53e38 <__sprint_r>
  b54bc8:	103e691e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b54bcc:	dc800e17 	ldw	r18,56(sp)
  b54bd0:	dc400d17 	ldw	r17,52(sp)
  b54bd4:	d8c01904 	addi	r3,sp,100
  b54bd8:	003fee06 	br	b54b94 <___vfprintf_internal_r+0xd04>
  b54bdc:	d8814717 	ldw	r2,1308(sp)
  b54be0:	143fffc4 	addi	r16,r2,-1
  b54be4:	043e970e 	bge	zero,r16,b54644 <___vfprintf_internal_r+0x7b4>
  b54be8:	00800404 	movi	r2,16
  b54bec:	1400180e 	bge	r2,r16,b54c50 <___vfprintf_internal_r+0xdc0>
  b54bf0:	1029883a 	mov	r20,r2
  b54bf4:	07002db4 	movhi	fp,182
  b54bf8:	e7045f84 	addi	fp,fp,4478
  b54bfc:	054001c4 	movi	r21,7
  b54c00:	00000306 	br	b54c10 <___vfprintf_internal_r+0xd80>
  b54c04:	9cc00204 	addi	r19,r19,8
  b54c08:	843ffc04 	addi	r16,r16,-16
  b54c0c:	a400120e 	bge	r20,r16,b54c58 <___vfprintf_internal_r+0xdc8>
  b54c10:	94800404 	addi	r18,r18,16
  b54c14:	8c400044 	addi	r17,r17,1
  b54c18:	9f000015 	stw	fp,0(r19)
  b54c1c:	9d000115 	stw	r20,4(r19)
  b54c20:	dc800e15 	stw	r18,56(sp)
  b54c24:	dc400d15 	stw	r17,52(sp)
  b54c28:	ac7ff60e 	bge	r21,r17,b54c04 <___vfprintf_internal_r+0xd74>
  b54c2c:	d9014f17 	ldw	r4,1340(sp)
  b54c30:	b00b883a 	mov	r5,r22
  b54c34:	d9800c04 	addi	r6,sp,48
  b54c38:	0b53e380 	call	b53e38 <__sprint_r>
  b54c3c:	103e4c1e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b54c40:	dc800e17 	ldw	r18,56(sp)
  b54c44:	dc400d17 	ldw	r17,52(sp)
  b54c48:	dcc01904 	addi	r19,sp,100
  b54c4c:	003fee06 	br	b54c08 <___vfprintf_internal_r+0xd78>
  b54c50:	07002db4 	movhi	fp,182
  b54c54:	e7045f84 	addi	fp,fp,4478
  b54c58:	9425883a 	add	r18,r18,r16
  b54c5c:	8c400044 	addi	r17,r17,1
  b54c60:	008001c4 	movi	r2,7
  b54c64:	9f000015 	stw	fp,0(r19)
  b54c68:	9c000115 	stw	r16,4(r19)
  b54c6c:	dc800e15 	stw	r18,56(sp)
  b54c70:	dc400d15 	stw	r17,52(sp)
  b54c74:	147e720e 	bge	r2,r17,b54640 <___vfprintf_internal_r+0x7b0>
  b54c78:	d9014f17 	ldw	r4,1340(sp)
  b54c7c:	b00b883a 	mov	r5,r22
  b54c80:	d9800c04 	addi	r6,sp,48
  b54c84:	0b53e380 	call	b53e38 <__sprint_r>
  b54c88:	103e391e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b54c8c:	dc800e17 	ldw	r18,56(sp)
  b54c90:	dc400d17 	ldw	r17,52(sp)
  b54c94:	dcc01904 	addi	r19,sp,100
  b54c98:	003e6a06 	br	b54644 <___vfprintf_internal_r+0x7b4>
  b54c9c:	d9014f17 	ldw	r4,1340(sp)
  b54ca0:	b00b883a 	mov	r5,r22
  b54ca4:	d9800c04 	addi	r6,sp,48
  b54ca8:	d9c15115 	stw	r7,1348(sp)
  b54cac:	0b53e380 	call	b53e38 <__sprint_r>
  b54cb0:	d9c15117 	ldw	r7,1348(sp)
  b54cb4:	103e2e1e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b54cb8:	dc800e17 	ldw	r18,56(sp)
  b54cbc:	dc400d17 	ldw	r17,52(sp)
  b54cc0:	dd401904 	addi	r21,sp,100
  b54cc4:	003dba06 	br	b543b0 <___vfprintf_internal_r+0x520>
  b54cc8:	d9014f17 	ldw	r4,1340(sp)
  b54ccc:	b00b883a 	mov	r5,r22
  b54cd0:	d9800c04 	addi	r6,sp,48
  b54cd4:	0b53e380 	call	b53e38 <__sprint_r>
  b54cd8:	103e251e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b54cdc:	dc800e17 	ldw	r18,56(sp)
  b54ce0:	dc400d17 	ldw	r17,52(sp)
  b54ce4:	dcc01904 	addi	r19,sp,100
  b54ce8:	003e4206 	br	b545f4 <___vfprintf_internal_r+0x764>
  b54cec:	d9014f17 	ldw	r4,1340(sp)
  b54cf0:	b00b883a 	mov	r5,r22
  b54cf4:	d9800c04 	addi	r6,sp,48
  b54cf8:	0b53e380 	call	b53e38 <__sprint_r>
  b54cfc:	103e1c1e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b54d00:	dc800e17 	ldw	r18,56(sp)
  b54d04:	dc400d17 	ldw	r17,52(sp)
  b54d08:	d8c01904 	addi	r3,sp,100
  b54d0c:	003e2e06 	br	b545c8 <___vfprintf_internal_r+0x738>
  b54d10:	d9414c17 	ldw	r5,1328(sp)
  b54d14:	2880004c 	andi	r2,r5,1
  b54d18:	1005003a 	cmpeq	r2,r2,zero
  b54d1c:	103dda1e 	bne	r2,zero,b54488 <___vfprintf_internal_r+0x5f8>
  b54d20:	003e9f06 	br	b547a0 <___vfprintf_internal_r+0x910>
  b54d24:	d8c14117 	ldw	r3,1284(sp)
  b54d28:	9125883a 	add	r18,r18,r4
  b54d2c:	8c400044 	addi	r17,r17,1
  b54d30:	008001c4 	movi	r2,7
  b54d34:	a8c00015 	stw	r3,0(r21)
  b54d38:	a9000115 	stw	r4,4(r21)
  b54d3c:	dc800e15 	stw	r18,56(sp)
  b54d40:	dc400d15 	stw	r17,52(sp)
  b54d44:	14426616 	blt	r2,r17,b556e0 <___vfprintf_internal_r+0x1850>
  b54d48:	a8c00204 	addi	r3,r21,8
  b54d4c:	d9414917 	ldw	r5,1316(sp)
  b54d50:	00800044 	movi	r2,1
  b54d54:	94800044 	addi	r18,r18,1
  b54d58:	8c400044 	addi	r17,r17,1
  b54d5c:	18800115 	stw	r2,4(r3)
  b54d60:	008001c4 	movi	r2,7
  b54d64:	19400015 	stw	r5,0(r3)
  b54d68:	dc800e15 	stw	r18,56(sp)
  b54d6c:	dc400d15 	stw	r17,52(sp)
  b54d70:	2021883a 	mov	r16,r4
  b54d74:	14425016 	blt	r2,r17,b556b8 <___vfprintf_internal_r+0x1828>
  b54d78:	19400204 	addi	r5,r3,8
  b54d7c:	d9814717 	ldw	r6,1308(sp)
  b54d80:	8c400044 	addi	r17,r17,1
  b54d84:	dc400d15 	stw	r17,52(sp)
  b54d88:	3107c83a 	sub	r3,r6,r4
  b54d8c:	d9014117 	ldw	r4,1284(sp)
  b54d90:	90e5883a 	add	r18,r18,r3
  b54d94:	28c00115 	stw	r3,4(r5)
  b54d98:	8105883a 	add	r2,r16,r4
  b54d9c:	28800015 	stw	r2,0(r5)
  b54da0:	008001c4 	movi	r2,7
  b54da4:	dc800e15 	stw	r18,56(sp)
  b54da8:	147f1d16 	blt	r2,r17,b54a20 <___vfprintf_internal_r+0xb90>
  b54dac:	28c00204 	addi	r3,r5,8
  b54db0:	003db506 	br	b54488 <___vfprintf_internal_r+0x5f8>
  b54db4:	3c000017 	ldw	r16,0(r7)
  b54db8:	3c400117 	ldw	r17,4(r7)
  b54dbc:	39800204 	addi	r6,r7,8
  b54dc0:	01000044 	movi	r4,1
  b54dc4:	d9814015 	stw	r6,1280(sp)
  b54dc8:	d8000405 	stb	zero,16(sp)
  b54dcc:	003ebe06 	br	b548c8 <___vfprintf_internal_r+0xa38>
  b54dd0:	3c000017 	ldw	r16,0(r7)
  b54dd4:	3c400117 	ldw	r17,4(r7)
  b54dd8:	38800204 	addi	r2,r7,8
  b54ddc:	d8814015 	stw	r2,1280(sp)
  b54de0:	003eb706 	br	b548c0 <___vfprintf_internal_r+0xa30>
  b54de4:	3c000017 	ldw	r16,0(r7)
  b54de8:	3c400117 	ldw	r17,4(r7)
  b54dec:	39000204 	addi	r4,r7,8
  b54df0:	d9014015 	stw	r4,1280(sp)
  b54df4:	0009883a 	mov	r4,zero
  b54df8:	d8000405 	stb	zero,16(sp)
  b54dfc:	003eb206 	br	b548c8 <___vfprintf_internal_r+0xa38>
  b54e00:	38c00017 	ldw	r3,0(r7)
  b54e04:	39c00104 	addi	r7,r7,4
  b54e08:	d8c14a15 	stw	r3,1320(sp)
  b54e0c:	1800d10e 	bge	r3,zero,b55154 <___vfprintf_internal_r+0x12c4>
  b54e10:	00c7c83a 	sub	r3,zero,r3
  b54e14:	d8c14a15 	stw	r3,1320(sp)
  b54e18:	d9014c17 	ldw	r4,1328(sp)
  b54e1c:	b8c00007 	ldb	r3,0(r23)
  b54e20:	21000114 	ori	r4,r4,4
  b54e24:	d9014c15 	stw	r4,1328(sp)
  b54e28:	003c9806 	br	b5408c <___vfprintf_internal_r+0x1fc>
  b54e2c:	d9814c17 	ldw	r6,1328(sp)
  b54e30:	3080080c 	andi	r2,r6,32
  b54e34:	1001f026 	beq	r2,zero,b555f8 <___vfprintf_internal_r+0x1768>
  b54e38:	d9014b17 	ldw	r4,1324(sp)
  b54e3c:	38800017 	ldw	r2,0(r7)
  b54e40:	39c00104 	addi	r7,r7,4
  b54e44:	d9c14015 	stw	r7,1280(sp)
  b54e48:	2007d7fa 	srai	r3,r4,31
  b54e4c:	d9c14017 	ldw	r7,1280(sp)
  b54e50:	11000015 	stw	r4,0(r2)
  b54e54:	10c00115 	stw	r3,4(r2)
  b54e58:	003c6906 	br	b54000 <___vfprintf_internal_r+0x170>
  b54e5c:	b8c00007 	ldb	r3,0(r23)
  b54e60:	00801b04 	movi	r2,108
  b54e64:	18824f26 	beq	r3,r2,b557a4 <___vfprintf_internal_r+0x1914>
  b54e68:	d9414c17 	ldw	r5,1328(sp)
  b54e6c:	29400414 	ori	r5,r5,16
  b54e70:	d9414c15 	stw	r5,1328(sp)
  b54e74:	003c8506 	br	b5408c <___vfprintf_internal_r+0x1fc>
  b54e78:	d9814c17 	ldw	r6,1328(sp)
  b54e7c:	b8c00007 	ldb	r3,0(r23)
  b54e80:	31800814 	ori	r6,r6,32
  b54e84:	d9814c15 	stw	r6,1328(sp)
  b54e88:	003c8006 	br	b5408c <___vfprintf_internal_r+0x1fc>
  b54e8c:	d8814c17 	ldw	r2,1328(sp)
  b54e90:	3c000017 	ldw	r16,0(r7)
  b54e94:	00c01e04 	movi	r3,120
  b54e98:	10800094 	ori	r2,r2,2
  b54e9c:	d8814c15 	stw	r2,1328(sp)
  b54ea0:	39c00104 	addi	r7,r7,4
  b54ea4:	01402db4 	movhi	r5,182
  b54ea8:	29444904 	addi	r5,r5,4388
  b54eac:	00800c04 	movi	r2,48
  b54eb0:	0023883a 	mov	r17,zero
  b54eb4:	01000084 	movi	r4,2
  b54eb8:	d9c14015 	stw	r7,1280(sp)
  b54ebc:	d8c14d15 	stw	r3,1332(sp)
  b54ec0:	d9414415 	stw	r5,1296(sp)
  b54ec4:	d8800445 	stb	r2,17(sp)
  b54ec8:	d8c00485 	stb	r3,18(sp)
  b54ecc:	d8000405 	stb	zero,16(sp)
  b54ed0:	003e7d06 	br	b548c8 <___vfprintf_internal_r+0xa38>
  b54ed4:	d8814c17 	ldw	r2,1328(sp)
  b54ed8:	b8c00007 	ldb	r3,0(r23)
  b54edc:	10801014 	ori	r2,r2,64
  b54ee0:	d8814c15 	stw	r2,1328(sp)
  b54ee4:	003c6906 	br	b5408c <___vfprintf_internal_r+0x1fc>
  b54ee8:	d9414c17 	ldw	r5,1328(sp)
  b54eec:	2880020c 	andi	r2,r5,8
  b54ef0:	1001df26 	beq	r2,zero,b55670 <___vfprintf_internal_r+0x17e0>
  b54ef4:	39800017 	ldw	r6,0(r7)
  b54ef8:	38800204 	addi	r2,r7,8
  b54efc:	d8814015 	stw	r2,1280(sp)
  b54f00:	d9814215 	stw	r6,1288(sp)
  b54f04:	39c00117 	ldw	r7,4(r7)
  b54f08:	d9c14315 	stw	r7,1292(sp)
  b54f0c:	d9014217 	ldw	r4,1288(sp)
  b54f10:	d9414317 	ldw	r5,1292(sp)
  b54f14:	0b5a8300 	call	b5a830 <__isinfd>
  b54f18:	10021726 	beq	r2,zero,b55778 <___vfprintf_internal_r+0x18e8>
  b54f1c:	d9014217 	ldw	r4,1288(sp)
  b54f20:	d9414317 	ldw	r5,1292(sp)
  b54f24:	000d883a 	mov	r6,zero
  b54f28:	000f883a 	mov	r7,zero
  b54f2c:	0b5c0940 	call	b5c094 <__ltdf2>
  b54f30:	1002ca16 	blt	r2,zero,b55a5c <___vfprintf_internal_r+0x1bcc>
  b54f34:	d9414d17 	ldw	r5,1332(sp)
  b54f38:	008011c4 	movi	r2,71
  b54f3c:	11420a16 	blt	r2,r5,b55768 <___vfprintf_internal_r+0x18d8>
  b54f40:	01802db4 	movhi	r6,182
  b54f44:	31844e04 	addi	r6,r6,4408
  b54f48:	d9814115 	stw	r6,1284(sp)
  b54f4c:	d9014c17 	ldw	r4,1328(sp)
  b54f50:	00c000c4 	movi	r3,3
  b54f54:	00bfdfc4 	movi	r2,-129
  b54f58:	2088703a 	and	r4,r4,r2
  b54f5c:	180f883a 	mov	r7,r3
  b54f60:	d8c14515 	stw	r3,1300(sp)
  b54f64:	d9014c15 	stw	r4,1328(sp)
  b54f68:	d8014615 	stw	zero,1304(sp)
  b54f6c:	003e6a06 	br	b54918 <___vfprintf_internal_r+0xa88>
  b54f70:	38800017 	ldw	r2,0(r7)
  b54f74:	00c00044 	movi	r3,1
  b54f78:	39c00104 	addi	r7,r7,4
  b54f7c:	d9c14015 	stw	r7,1280(sp)
  b54f80:	d9000f04 	addi	r4,sp,60
  b54f84:	180f883a 	mov	r7,r3
  b54f88:	d8c14515 	stw	r3,1300(sp)
  b54f8c:	d9014115 	stw	r4,1284(sp)
  b54f90:	d8800f05 	stb	r2,60(sp)
  b54f94:	d8000405 	stb	zero,16(sp)
  b54f98:	003cac06 	br	b5424c <___vfprintf_internal_r+0x3bc>
  b54f9c:	01402db4 	movhi	r5,182
  b54fa0:	29445404 	addi	r5,r5,4432
  b54fa4:	d9414415 	stw	r5,1296(sp)
  b54fa8:	d9814c17 	ldw	r6,1328(sp)
  b54fac:	3080080c 	andi	r2,r6,32
  b54fb0:	1000f926 	beq	r2,zero,b55398 <___vfprintf_internal_r+0x1508>
  b54fb4:	3c000017 	ldw	r16,0(r7)
  b54fb8:	3c400117 	ldw	r17,4(r7)
  b54fbc:	38800204 	addi	r2,r7,8
  b54fc0:	d8814015 	stw	r2,1280(sp)
  b54fc4:	d9414c17 	ldw	r5,1328(sp)
  b54fc8:	2880004c 	andi	r2,r5,1
  b54fcc:	1005003a 	cmpeq	r2,r2,zero
  b54fd0:	1000b31e 	bne	r2,zero,b552a0 <___vfprintf_internal_r+0x1410>
  b54fd4:	8444b03a 	or	r2,r16,r17
  b54fd8:	1000b126 	beq	r2,zero,b552a0 <___vfprintf_internal_r+0x1410>
  b54fdc:	d9814d17 	ldw	r6,1332(sp)
  b54fe0:	29400094 	ori	r5,r5,2
  b54fe4:	00800c04 	movi	r2,48
  b54fe8:	01000084 	movi	r4,2
  b54fec:	d9414c15 	stw	r5,1328(sp)
  b54ff0:	d8800445 	stb	r2,17(sp)
  b54ff4:	d9800485 	stb	r6,18(sp)
  b54ff8:	d8000405 	stb	zero,16(sp)
  b54ffc:	003e3206 	br	b548c8 <___vfprintf_internal_r+0xa38>
  b55000:	01802db4 	movhi	r6,182
  b55004:	31844904 	addi	r6,r6,4388
  b55008:	d9814415 	stw	r6,1296(sp)
  b5500c:	003fe606 	br	b54fa8 <___vfprintf_internal_r+0x1118>
  b55010:	00800ac4 	movi	r2,43
  b55014:	d8800405 	stb	r2,16(sp)
  b55018:	b8c00007 	ldb	r3,0(r23)
  b5501c:	003c1b06 	br	b5408c <___vfprintf_internal_r+0x1fc>
  b55020:	d8814c17 	ldw	r2,1328(sp)
  b55024:	b8c00007 	ldb	r3,0(r23)
  b55028:	10800054 	ori	r2,r2,1
  b5502c:	d8814c15 	stw	r2,1328(sp)
  b55030:	003c1606 	br	b5408c <___vfprintf_internal_r+0x1fc>
  b55034:	d8800407 	ldb	r2,16(sp)
  b55038:	1000461e 	bne	r2,zero,b55154 <___vfprintf_internal_r+0x12c4>
  b5503c:	00800804 	movi	r2,32
  b55040:	d8800405 	stb	r2,16(sp)
  b55044:	b8c00007 	ldb	r3,0(r23)
  b55048:	003c1006 	br	b5408c <___vfprintf_internal_r+0x1fc>
  b5504c:	d9814c17 	ldw	r6,1328(sp)
  b55050:	b8c00007 	ldb	r3,0(r23)
  b55054:	31800214 	ori	r6,r6,8
  b55058:	d9814c15 	stw	r6,1328(sp)
  b5505c:	003c0b06 	br	b5408c <___vfprintf_internal_r+0x1fc>
  b55060:	0007883a 	mov	r3,zero
  b55064:	01000244 	movi	r4,9
  b55068:	188002a4 	muli	r2,r3,10
  b5506c:	b8c00007 	ldb	r3,0(r23)
  b55070:	d9814d17 	ldw	r6,1332(sp)
  b55074:	bdc00044 	addi	r23,r23,1
  b55078:	d8c14d15 	stw	r3,1332(sp)
  b5507c:	d9414d17 	ldw	r5,1332(sp)
  b55080:	3085883a 	add	r2,r6,r2
  b55084:	10fff404 	addi	r3,r2,-48
  b55088:	28bff404 	addi	r2,r5,-48
  b5508c:	20bff62e 	bgeu	r4,r2,b55068 <___vfprintf_internal_r+0x11d8>
  b55090:	d8c14a15 	stw	r3,1320(sp)
  b55094:	003bff06 	br	b54094 <___vfprintf_internal_r+0x204>
  b55098:	d9414c17 	ldw	r5,1328(sp)
  b5509c:	b8c00007 	ldb	r3,0(r23)
  b550a0:	29402014 	ori	r5,r5,128
  b550a4:	d9414c15 	stw	r5,1328(sp)
  b550a8:	003bf806 	br	b5408c <___vfprintf_internal_r+0x1fc>
  b550ac:	b8c00007 	ldb	r3,0(r23)
  b550b0:	00800a84 	movi	r2,42
  b550b4:	bdc00044 	addi	r23,r23,1
  b550b8:	18831526 	beq	r3,r2,b55d10 <___vfprintf_internal_r+0x1e80>
  b550bc:	d8c14d15 	stw	r3,1332(sp)
  b550c0:	18bff404 	addi	r2,r3,-48
  b550c4:	00c00244 	movi	r3,9
  b550c8:	18827836 	bltu	r3,r2,b55aac <___vfprintf_internal_r+0x1c1c>
  b550cc:	000d883a 	mov	r6,zero
  b550d0:	308002a4 	muli	r2,r6,10
  b550d4:	b9800007 	ldb	r6,0(r23)
  b550d8:	d9414d17 	ldw	r5,1332(sp)
  b550dc:	bdc00044 	addi	r23,r23,1
  b550e0:	d9814d15 	stw	r6,1332(sp)
  b550e4:	d9014d17 	ldw	r4,1332(sp)
  b550e8:	1145883a 	add	r2,r2,r5
  b550ec:	11bff404 	addi	r6,r2,-48
  b550f0:	20bff404 	addi	r2,r4,-48
  b550f4:	18bff62e 	bgeu	r3,r2,b550d0 <___vfprintf_internal_r+0x1240>
  b550f8:	3027883a 	mov	r19,r6
  b550fc:	303be50e 	bge	r6,zero,b54094 <___vfprintf_internal_r+0x204>
  b55100:	04ffffc4 	movi	r19,-1
  b55104:	003be306 	br	b54094 <___vfprintf_internal_r+0x204>
  b55108:	d8000405 	stb	zero,16(sp)
  b5510c:	39800017 	ldw	r6,0(r7)
  b55110:	39c00104 	addi	r7,r7,4
  b55114:	d9c14015 	stw	r7,1280(sp)
  b55118:	d9814115 	stw	r6,1284(sp)
  b5511c:	3001c926 	beq	r6,zero,b55844 <___vfprintf_internal_r+0x19b4>
  b55120:	98000e16 	blt	r19,zero,b5515c <___vfprintf_internal_r+0x12cc>
  b55124:	d9014117 	ldw	r4,1284(sp)
  b55128:	000b883a 	mov	r5,zero
  b5512c:	980d883a 	mov	r6,r19
  b55130:	0b58f4c0 	call	b58f4c <memchr>
  b55134:	10025926 	beq	r2,zero,b55a9c <___vfprintf_internal_r+0x1c0c>
  b55138:	d8c14117 	ldw	r3,1284(sp)
  b5513c:	10cfc83a 	sub	r7,r2,r3
  b55140:	99c19e16 	blt	r19,r7,b557bc <___vfprintf_internal_r+0x192c>
  b55144:	d9c14515 	stw	r7,1300(sp)
  b55148:	38000916 	blt	r7,zero,b55170 <___vfprintf_internal_r+0x12e0>
  b5514c:	d8014615 	stw	zero,1304(sp)
  b55150:	003df106 	br	b54918 <___vfprintf_internal_r+0xa88>
  b55154:	b8c00007 	ldb	r3,0(r23)
  b55158:	003bcc06 	br	b5408c <___vfprintf_internal_r+0x1fc>
  b5515c:	d9014117 	ldw	r4,1284(sp)
  b55160:	0b53dc40 	call	b53dc4 <strlen>
  b55164:	d8814515 	stw	r2,1300(sp)
  b55168:	100f883a 	mov	r7,r2
  b5516c:	103ff70e 	bge	r2,zero,b5514c <___vfprintf_internal_r+0x12bc>
  b55170:	d8014515 	stw	zero,1300(sp)
  b55174:	d8014615 	stw	zero,1304(sp)
  b55178:	003de706 	br	b54918 <___vfprintf_internal_r+0xa88>
  b5517c:	20c03fcc 	andi	r3,r4,255
  b55180:	00800044 	movi	r2,1
  b55184:	18802d26 	beq	r3,r2,b5523c <___vfprintf_internal_r+0x13ac>
  b55188:	18800e36 	bltu	r3,r2,b551c4 <___vfprintf_internal_r+0x1334>
  b5518c:	00800084 	movi	r2,2
  b55190:	1880fa26 	beq	r3,r2,b5557c <___vfprintf_internal_r+0x16ec>
  b55194:	01002db4 	movhi	r4,182
  b55198:	21045904 	addi	r4,r4,4452
  b5519c:	0b53dc40 	call	b53dc4 <strlen>
  b551a0:	100f883a 	mov	r7,r2
  b551a4:	dcc14515 	stw	r19,1300(sp)
  b551a8:	9880010e 	bge	r19,r2,b551b0 <___vfprintf_internal_r+0x1320>
  b551ac:	d8814515 	stw	r2,1300(sp)
  b551b0:	00802db4 	movhi	r2,182
  b551b4:	10845904 	addi	r2,r2,4452
  b551b8:	dcc14615 	stw	r19,1304(sp)
  b551bc:	d8814115 	stw	r2,1284(sp)
  b551c0:	003dd506 	br	b54918 <___vfprintf_internal_r+0xa88>
  b551c4:	d9401904 	addi	r5,sp,100
  b551c8:	dd000f04 	addi	r20,sp,60
  b551cc:	d9414115 	stw	r5,1284(sp)
  b551d0:	880a977a 	slli	r5,r17,29
  b551d4:	d9814117 	ldw	r6,1284(sp)
  b551d8:	8004d0fa 	srli	r2,r16,3
  b551dc:	8806d0fa 	srli	r3,r17,3
  b551e0:	810001cc 	andi	r4,r16,7
  b551e4:	2884b03a 	or	r2,r5,r2
  b551e8:	31bfffc4 	addi	r6,r6,-1
  b551ec:	21000c04 	addi	r4,r4,48
  b551f0:	d9814115 	stw	r6,1284(sp)
  b551f4:	10cab03a 	or	r5,r2,r3
  b551f8:	31000005 	stb	r4,0(r6)
  b551fc:	1021883a 	mov	r16,r2
  b55200:	1823883a 	mov	r17,r3
  b55204:	283ff21e 	bne	r5,zero,b551d0 <___vfprintf_internal_r+0x1340>
  b55208:	d8c14c17 	ldw	r3,1328(sp)
  b5520c:	1880004c 	andi	r2,r3,1
  b55210:	1005003a 	cmpeq	r2,r2,zero
  b55214:	103db91e 	bne	r2,zero,b548fc <___vfprintf_internal_r+0xa6c>
  b55218:	20803fcc 	andi	r2,r4,255
  b5521c:	1080201c 	xori	r2,r2,128
  b55220:	10bfe004 	addi	r2,r2,-128
  b55224:	00c00c04 	movi	r3,48
  b55228:	10fdb426 	beq	r2,r3,b548fc <___vfprintf_internal_r+0xa6c>
  b5522c:	31bfffc4 	addi	r6,r6,-1
  b55230:	d9814115 	stw	r6,1284(sp)
  b55234:	30c00005 	stb	r3,0(r6)
  b55238:	003db006 	br	b548fc <___vfprintf_internal_r+0xa6c>
  b5523c:	88800068 	cmpgeui	r2,r17,1
  b55240:	10002c1e 	bne	r2,zero,b552f4 <___vfprintf_internal_r+0x1464>
  b55244:	8800021e 	bne	r17,zero,b55250 <___vfprintf_internal_r+0x13c0>
  b55248:	00800244 	movi	r2,9
  b5524c:	14002936 	bltu	r2,r16,b552f4 <___vfprintf_internal_r+0x1464>
  b55250:	d90018c4 	addi	r4,sp,99
  b55254:	dd000f04 	addi	r20,sp,60
  b55258:	d9014115 	stw	r4,1284(sp)
  b5525c:	d9014117 	ldw	r4,1284(sp)
  b55260:	80800c04 	addi	r2,r16,48
  b55264:	20800005 	stb	r2,0(r4)
  b55268:	003da406 	br	b548fc <___vfprintf_internal_r+0xa6c>
  b5526c:	dc400d17 	ldw	r17,52(sp)
  b55270:	07002db4 	movhi	fp,182
  b55274:	e7045f84 	addi	fp,fp,4478
  b55278:	9425883a 	add	r18,r18,r16
  b5527c:	8c400044 	addi	r17,r17,1
  b55280:	008001c4 	movi	r2,7
  b55284:	1f000015 	stw	fp,0(r3)
  b55288:	1c000115 	stw	r16,4(r3)
  b5528c:	dc800e15 	stw	r18,56(sp)
  b55290:	dc400d15 	stw	r17,52(sp)
  b55294:	147de216 	blt	r2,r17,b54a20 <___vfprintf_internal_r+0xb90>
  b55298:	18c00204 	addi	r3,r3,8
  b5529c:	003c7a06 	br	b54488 <___vfprintf_internal_r+0x5f8>
  b552a0:	01000084 	movi	r4,2
  b552a4:	d8000405 	stb	zero,16(sp)
  b552a8:	003d8706 	br	b548c8 <___vfprintf_internal_r+0xa38>
  b552ac:	d9814c17 	ldw	r6,1328(sp)
  b552b0:	30c4703a 	and	r2,r6,r3
  b552b4:	1005003a 	cmpeq	r2,r2,zero
  b552b8:	103cb926 	beq	r2,zero,b545a0 <___vfprintf_internal_r+0x710>
  b552bc:	d9014117 	ldw	r4,1284(sp)
  b552c0:	94800044 	addi	r18,r18,1
  b552c4:	8c400044 	addi	r17,r17,1
  b552c8:	008001c4 	movi	r2,7
  b552cc:	a9000015 	stw	r4,0(r21)
  b552d0:	a8c00115 	stw	r3,4(r21)
  b552d4:	dc800e15 	stw	r18,56(sp)
  b552d8:	dc400d15 	stw	r17,52(sp)
  b552dc:	147e6616 	blt	r2,r17,b54c78 <___vfprintf_internal_r+0xde8>
  b552e0:	acc00204 	addi	r19,r21,8
  b552e4:	003cd706 	br	b54644 <___vfprintf_internal_r+0x7b4>
  b552e8:	07002db4 	movhi	fp,182
  b552ec:	e7045f84 	addi	fp,fp,4478
  b552f0:	003c4f06 	br	b54430 <___vfprintf_internal_r+0x5a0>
  b552f4:	dd000f04 	addi	r20,sp,60
  b552f8:	dc801904 	addi	r18,sp,100
  b552fc:	8009883a 	mov	r4,r16
  b55300:	880b883a 	mov	r5,r17
  b55304:	01800284 	movi	r6,10
  b55308:	000f883a 	mov	r7,zero
  b5530c:	0b5b5880 	call	b5b588 <__umoddi3>
  b55310:	12000c04 	addi	r8,r2,48
  b55314:	94bfffc4 	addi	r18,r18,-1
  b55318:	8009883a 	mov	r4,r16
  b5531c:	880b883a 	mov	r5,r17
  b55320:	01800284 	movi	r6,10
  b55324:	000f883a 	mov	r7,zero
  b55328:	92000005 	stb	r8,0(r18)
  b5532c:	0b5afac0 	call	b5afac <__udivdi3>
  b55330:	1009883a 	mov	r4,r2
  b55334:	1021883a 	mov	r16,r2
  b55338:	18800068 	cmpgeui	r2,r3,1
  b5533c:	1823883a 	mov	r17,r3
  b55340:	103fee1e 	bne	r2,zero,b552fc <___vfprintf_internal_r+0x146c>
  b55344:	1800021e 	bne	r3,zero,b55350 <___vfprintf_internal_r+0x14c0>
  b55348:	00800244 	movi	r2,9
  b5534c:	113feb36 	bltu	r2,r4,b552fc <___vfprintf_internal_r+0x146c>
  b55350:	94bfffc4 	addi	r18,r18,-1
  b55354:	dc814115 	stw	r18,1284(sp)
  b55358:	003fc006 	br	b5525c <___vfprintf_internal_r+0x13cc>
  b5535c:	d9014c17 	ldw	r4,1328(sp)
  b55360:	2080004c 	andi	r2,r4,1
  b55364:	10009a1e 	bne	r2,zero,b555d0 <___vfprintf_internal_r+0x1740>
  b55368:	d9401904 	addi	r5,sp,100
  b5536c:	dd000f04 	addi	r20,sp,60
  b55370:	d9414115 	stw	r5,1284(sp)
  b55374:	003d6106 	br	b548fc <___vfprintf_internal_r+0xa6c>
  b55378:	d9014f17 	ldw	r4,1340(sp)
  b5537c:	b00b883a 	mov	r5,r22
  b55380:	d9800c04 	addi	r6,sp,48
  b55384:	0b53e380 	call	b53e38 <__sprint_r>
  b55388:	103c791e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b5538c:	dc800e17 	ldw	r18,56(sp)
  b55390:	d8c01904 	addi	r3,sp,100
  b55394:	003cff06 	br	b54794 <___vfprintf_internal_r+0x904>
  b55398:	d8c14c17 	ldw	r3,1328(sp)
  b5539c:	1880040c 	andi	r2,r3,16
  b553a0:	1000711e 	bne	r2,zero,b55568 <___vfprintf_internal_r+0x16d8>
  b553a4:	d9014c17 	ldw	r4,1328(sp)
  b553a8:	2080100c 	andi	r2,r4,64
  b553ac:	10006e26 	beq	r2,zero,b55568 <___vfprintf_internal_r+0x16d8>
  b553b0:	3c00000b 	ldhu	r16,0(r7)
  b553b4:	0023883a 	mov	r17,zero
  b553b8:	39c00104 	addi	r7,r7,4
  b553bc:	d9c14015 	stw	r7,1280(sp)
  b553c0:	003f0006 	br	b54fc4 <___vfprintf_internal_r+0x1134>
  b553c4:	dc400d17 	ldw	r17,52(sp)
  b553c8:	07002db4 	movhi	fp,182
  b553cc:	e7045f84 	addi	fp,fp,4478
  b553d0:	9425883a 	add	r18,r18,r16
  b553d4:	8c400044 	addi	r17,r17,1
  b553d8:	008001c4 	movi	r2,7
  b553dc:	1f000015 	stw	fp,0(r3)
  b553e0:	1c000115 	stw	r16,4(r3)
  b553e4:	dc800e15 	stw	r18,56(sp)
  b553e8:	dc400d15 	stw	r17,52(sp)
  b553ec:	147d7616 	blt	r2,r17,b549c8 <___vfprintf_internal_r+0xb38>
  b553f0:	18c00204 	addi	r3,r3,8
  b553f4:	003d7b06 	br	b549e4 <___vfprintf_internal_r+0xb54>
  b553f8:	dc800e17 	ldw	r18,56(sp)
  b553fc:	dc400d17 	ldw	r17,52(sp)
  b55400:	07002db4 	movhi	fp,182
  b55404:	e7046384 	addi	fp,fp,4494
  b55408:	003bc006 	br	b5430c <___vfprintf_internal_r+0x47c>
  b5540c:	d9014f17 	ldw	r4,1340(sp)
  b55410:	b00b883a 	mov	r5,r22
  b55414:	d9800c04 	addi	r6,sp,48
  b55418:	0b53e380 	call	b53e38 <__sprint_r>
  b5541c:	103c541e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b55420:	dc800e17 	ldw	r18,56(sp)
  b55424:	d8c01904 	addi	r3,sp,100
  b55428:	003ce906 	br	b547d0 <___vfprintf_internal_r+0x940>
  b5542c:	3c000017 	ldw	r16,0(r7)
  b55430:	0009883a 	mov	r4,zero
  b55434:	39c00104 	addi	r7,r7,4
  b55438:	0023883a 	mov	r17,zero
  b5543c:	d9c14015 	stw	r7,1280(sp)
  b55440:	d8000405 	stb	zero,16(sp)
  b55444:	003d2006 	br	b548c8 <___vfprintf_internal_r+0xa38>
  b55448:	38800017 	ldw	r2,0(r7)
  b5544c:	39c00104 	addi	r7,r7,4
  b55450:	d9c14015 	stw	r7,1280(sp)
  b55454:	1023d7fa 	srai	r17,r2,31
  b55458:	1021883a 	mov	r16,r2
  b5545c:	003d1806 	br	b548c0 <___vfprintf_internal_r+0xa30>
  b55460:	3c000017 	ldw	r16,0(r7)
  b55464:	01000044 	movi	r4,1
  b55468:	39c00104 	addi	r7,r7,4
  b5546c:	0023883a 	mov	r17,zero
  b55470:	d9c14015 	stw	r7,1280(sp)
  b55474:	d8000405 	stb	zero,16(sp)
  b55478:	003d1306 	br	b548c8 <___vfprintf_internal_r+0xa38>
  b5547c:	00802db4 	movhi	r2,182
  b55480:	1083ea04 	addi	r2,r2,4008
  b55484:	94800044 	addi	r18,r18,1
  b55488:	8c400044 	addi	r17,r17,1
  b5548c:	a8800015 	stw	r2,0(r21)
  b55490:	00c00044 	movi	r3,1
  b55494:	008001c4 	movi	r2,7
  b55498:	a8c00115 	stw	r3,4(r21)
  b5549c:	dc800e15 	stw	r18,56(sp)
  b554a0:	dc400d15 	stw	r17,52(sp)
  b554a4:	1440ca16 	blt	r2,r17,b557d0 <___vfprintf_internal_r+0x1940>
  b554a8:	a8c00204 	addi	r3,r21,8
  b554ac:	2000061e 	bne	r4,zero,b554c8 <___vfprintf_internal_r+0x1638>
  b554b0:	d9414717 	ldw	r5,1308(sp)
  b554b4:	2800041e 	bne	r5,zero,b554c8 <___vfprintf_internal_r+0x1638>
  b554b8:	d9814c17 	ldw	r6,1328(sp)
  b554bc:	3080004c 	andi	r2,r6,1
  b554c0:	1005003a 	cmpeq	r2,r2,zero
  b554c4:	103bf01e 	bne	r2,zero,b54488 <___vfprintf_internal_r+0x5f8>
  b554c8:	00800044 	movi	r2,1
  b554cc:	dc400d17 	ldw	r17,52(sp)
  b554d0:	18800115 	stw	r2,4(r3)
  b554d4:	d8814917 	ldw	r2,1316(sp)
  b554d8:	94800044 	addi	r18,r18,1
  b554dc:	8c400044 	addi	r17,r17,1
  b554e0:	18800015 	stw	r2,0(r3)
  b554e4:	008001c4 	movi	r2,7
  b554e8:	dc800e15 	stw	r18,56(sp)
  b554ec:	dc400d15 	stw	r17,52(sp)
  b554f0:	1440ca16 	blt	r2,r17,b5581c <___vfprintf_internal_r+0x198c>
  b554f4:	18c00204 	addi	r3,r3,8
  b554f8:	0121c83a 	sub	r16,zero,r4
  b554fc:	0400500e 	bge	zero,r16,b55640 <___vfprintf_internal_r+0x17b0>
  b55500:	00800404 	movi	r2,16
  b55504:	1400800e 	bge	r2,r16,b55708 <___vfprintf_internal_r+0x1878>
  b55508:	1027883a 	mov	r19,r2
  b5550c:	07002db4 	movhi	fp,182
  b55510:	e7045f84 	addi	fp,fp,4478
  b55514:	050001c4 	movi	r20,7
  b55518:	00000306 	br	b55528 <___vfprintf_internal_r+0x1698>
  b5551c:	18c00204 	addi	r3,r3,8
  b55520:	843ffc04 	addi	r16,r16,-16
  b55524:	9c007a0e 	bge	r19,r16,b55710 <___vfprintf_internal_r+0x1880>
  b55528:	94800404 	addi	r18,r18,16
  b5552c:	8c400044 	addi	r17,r17,1
  b55530:	1f000015 	stw	fp,0(r3)
  b55534:	1cc00115 	stw	r19,4(r3)
  b55538:	dc800e15 	stw	r18,56(sp)
  b5553c:	dc400d15 	stw	r17,52(sp)
  b55540:	a47ff60e 	bge	r20,r17,b5551c <___vfprintf_internal_r+0x168c>
  b55544:	d9014f17 	ldw	r4,1340(sp)
  b55548:	b00b883a 	mov	r5,r22
  b5554c:	d9800c04 	addi	r6,sp,48
  b55550:	0b53e380 	call	b53e38 <__sprint_r>
  b55554:	103c061e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b55558:	dc800e17 	ldw	r18,56(sp)
  b5555c:	dc400d17 	ldw	r17,52(sp)
  b55560:	d8c01904 	addi	r3,sp,100
  b55564:	003fee06 	br	b55520 <___vfprintf_internal_r+0x1690>
  b55568:	3c000017 	ldw	r16,0(r7)
  b5556c:	0023883a 	mov	r17,zero
  b55570:	39c00104 	addi	r7,r7,4
  b55574:	d9c14015 	stw	r7,1280(sp)
  b55578:	003e9206 	br	b54fc4 <___vfprintf_internal_r+0x1134>
  b5557c:	d9401904 	addi	r5,sp,100
  b55580:	dd000f04 	addi	r20,sp,60
  b55584:	d9414115 	stw	r5,1284(sp)
  b55588:	d9814417 	ldw	r6,1296(sp)
  b5558c:	880a973a 	slli	r5,r17,28
  b55590:	8004d13a 	srli	r2,r16,4
  b55594:	810003cc 	andi	r4,r16,15
  b55598:	3109883a 	add	r4,r6,r4
  b5559c:	2884b03a 	or	r2,r5,r2
  b555a0:	21400003 	ldbu	r5,0(r4)
  b555a4:	d9014117 	ldw	r4,1284(sp)
  b555a8:	8806d13a 	srli	r3,r17,4
  b555ac:	1021883a 	mov	r16,r2
  b555b0:	213fffc4 	addi	r4,r4,-1
  b555b4:	d9014115 	stw	r4,1284(sp)
  b555b8:	d9814117 	ldw	r6,1284(sp)
  b555bc:	10c8b03a 	or	r4,r2,r3
  b555c0:	1823883a 	mov	r17,r3
  b555c4:	31400005 	stb	r5,0(r6)
  b555c8:	203fef1e 	bne	r4,zero,b55588 <___vfprintf_internal_r+0x16f8>
  b555cc:	003ccb06 	br	b548fc <___vfprintf_internal_r+0xa6c>
  b555d0:	00800c04 	movi	r2,48
  b555d4:	d98018c4 	addi	r6,sp,99
  b555d8:	dd000f04 	addi	r20,sp,60
  b555dc:	d88018c5 	stb	r2,99(sp)
  b555e0:	d9814115 	stw	r6,1284(sp)
  b555e4:	003cc506 	br	b548fc <___vfprintf_internal_r+0xa6c>
  b555e8:	dc400d17 	ldw	r17,52(sp)
  b555ec:	07002db4 	movhi	fp,182
  b555f0:	e7046384 	addi	fp,fp,4494
  b555f4:	003bc706 	br	b54514 <___vfprintf_internal_r+0x684>
  b555f8:	d9414c17 	ldw	r5,1328(sp)
  b555fc:	2880040c 	andi	r2,r5,16
  b55600:	10007c26 	beq	r2,zero,b557f4 <___vfprintf_internal_r+0x1964>
  b55604:	38800017 	ldw	r2,0(r7)
  b55608:	39c00104 	addi	r7,r7,4
  b5560c:	d9c14015 	stw	r7,1280(sp)
  b55610:	d9814b17 	ldw	r6,1324(sp)
  b55614:	d9c14017 	ldw	r7,1280(sp)
  b55618:	11800015 	stw	r6,0(r2)
  b5561c:	003a7806 	br	b54000 <___vfprintf_internal_r+0x170>
  b55620:	d9014f17 	ldw	r4,1340(sp)
  b55624:	b00b883a 	mov	r5,r22
  b55628:	d9800c04 	addi	r6,sp,48
  b5562c:	0b53e380 	call	b53e38 <__sprint_r>
  b55630:	103bcf1e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b55634:	dc800e17 	ldw	r18,56(sp)
  b55638:	dc400d17 	ldw	r17,52(sp)
  b5563c:	d8c01904 	addi	r3,sp,100
  b55640:	d9014717 	ldw	r4,1308(sp)
  b55644:	d9414117 	ldw	r5,1284(sp)
  b55648:	8c400044 	addi	r17,r17,1
  b5564c:	9125883a 	add	r18,r18,r4
  b55650:	008001c4 	movi	r2,7
  b55654:	19400015 	stw	r5,0(r3)
  b55658:	19000115 	stw	r4,4(r3)
  b5565c:	dc800e15 	stw	r18,56(sp)
  b55660:	dc400d15 	stw	r17,52(sp)
  b55664:	147cee16 	blt	r2,r17,b54a20 <___vfprintf_internal_r+0xb90>
  b55668:	18c00204 	addi	r3,r3,8
  b5566c:	003b8606 	br	b54488 <___vfprintf_internal_r+0x5f8>
  b55670:	38c00017 	ldw	r3,0(r7)
  b55674:	39000204 	addi	r4,r7,8
  b55678:	d9014015 	stw	r4,1280(sp)
  b5567c:	d8c14215 	stw	r3,1288(sp)
  b55680:	39c00117 	ldw	r7,4(r7)
  b55684:	d9c14315 	stw	r7,1292(sp)
  b55688:	003e2006 	br	b54f0c <___vfprintf_internal_r+0x107c>
  b5568c:	0005883a 	mov	r2,zero
  b55690:	1409c83a 	sub	r4,r2,r16
  b55694:	1105803a 	cmpltu	r2,r2,r4
  b55698:	044bc83a 	sub	r5,zero,r17
  b5569c:	2885c83a 	sub	r2,r5,r2
  b556a0:	2021883a 	mov	r16,r4
  b556a4:	1023883a 	mov	r17,r2
  b556a8:	01000044 	movi	r4,1
  b556ac:	00800b44 	movi	r2,45
  b556b0:	d8800405 	stb	r2,16(sp)
  b556b4:	003c8406 	br	b548c8 <___vfprintf_internal_r+0xa38>
  b556b8:	d9014f17 	ldw	r4,1340(sp)
  b556bc:	b00b883a 	mov	r5,r22
  b556c0:	d9800c04 	addi	r6,sp,48
  b556c4:	0b53e380 	call	b53e38 <__sprint_r>
  b556c8:	103ba91e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b556cc:	dc800e17 	ldw	r18,56(sp)
  b556d0:	dc400d17 	ldw	r17,52(sp)
  b556d4:	d9000517 	ldw	r4,20(sp)
  b556d8:	d9401904 	addi	r5,sp,100
  b556dc:	003da706 	br	b54d7c <___vfprintf_internal_r+0xeec>
  b556e0:	d9014f17 	ldw	r4,1340(sp)
  b556e4:	b00b883a 	mov	r5,r22
  b556e8:	d9800c04 	addi	r6,sp,48
  b556ec:	0b53e380 	call	b53e38 <__sprint_r>
  b556f0:	103b9f1e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b556f4:	dc800e17 	ldw	r18,56(sp)
  b556f8:	dc400d17 	ldw	r17,52(sp)
  b556fc:	d9000517 	ldw	r4,20(sp)
  b55700:	d8c01904 	addi	r3,sp,100
  b55704:	003d9106 	br	b54d4c <___vfprintf_internal_r+0xebc>
  b55708:	07002db4 	movhi	fp,182
  b5570c:	e7045f84 	addi	fp,fp,4478
  b55710:	9425883a 	add	r18,r18,r16
  b55714:	8c400044 	addi	r17,r17,1
  b55718:	008001c4 	movi	r2,7
  b5571c:	1f000015 	stw	fp,0(r3)
  b55720:	1c000115 	stw	r16,4(r3)
  b55724:	dc800e15 	stw	r18,56(sp)
  b55728:	dc400d15 	stw	r17,52(sp)
  b5572c:	147fbc16 	blt	r2,r17,b55620 <___vfprintf_internal_r+0x1790>
  b55730:	18c00204 	addi	r3,r3,8
  b55734:	003fc206 	br	b55640 <___vfprintf_internal_r+0x17b0>
  b55738:	d9014f17 	ldw	r4,1340(sp)
  b5573c:	b00b883a 	mov	r5,r22
  b55740:	d9800c04 	addi	r6,sp,48
  b55744:	0b53e380 	call	b53e38 <__sprint_r>
  b55748:	103b891e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b5574c:	dc800e17 	ldw	r18,56(sp)
  b55750:	d9000517 	ldw	r4,20(sp)
  b55754:	d8c01904 	addi	r3,sp,100
  b55758:	003d0206 	br	b54b64 <___vfprintf_internal_r+0xcd4>
  b5575c:	07002db4 	movhi	fp,182
  b55760:	e7045f84 	addi	fp,fp,4478
  b55764:	003be406 	br	b546f8 <___vfprintf_internal_r+0x868>
  b55768:	00802db4 	movhi	r2,182
  b5576c:	10844f04 	addi	r2,r2,4412
  b55770:	d8814115 	stw	r2,1284(sp)
  b55774:	003df506 	br	b54f4c <___vfprintf_internal_r+0x10bc>
  b55778:	d9014217 	ldw	r4,1288(sp)
  b5577c:	d9414317 	ldw	r5,1292(sp)
  b55780:	0b5a8700 	call	b5a870 <__isnand>
  b55784:	10003926 	beq	r2,zero,b5586c <___vfprintf_internal_r+0x19dc>
  b55788:	d9414d17 	ldw	r5,1332(sp)
  b5578c:	008011c4 	movi	r2,71
  b55790:	1140ce16 	blt	r2,r5,b55acc <___vfprintf_internal_r+0x1c3c>
  b55794:	01802db4 	movhi	r6,182
  b55798:	31845004 	addi	r6,r6,4416
  b5579c:	d9814115 	stw	r6,1284(sp)
  b557a0:	003dea06 	br	b54f4c <___vfprintf_internal_r+0x10bc>
  b557a4:	d9014c17 	ldw	r4,1328(sp)
  b557a8:	bdc00044 	addi	r23,r23,1
  b557ac:	b8c00007 	ldb	r3,0(r23)
  b557b0:	21000814 	ori	r4,r4,32
  b557b4:	d9014c15 	stw	r4,1328(sp)
  b557b8:	003a3406 	br	b5408c <___vfprintf_internal_r+0x1fc>
  b557bc:	dcc14515 	stw	r19,1300(sp)
  b557c0:	98011016 	blt	r19,zero,b55c04 <___vfprintf_internal_r+0x1d74>
  b557c4:	980f883a 	mov	r7,r19
  b557c8:	d8014615 	stw	zero,1304(sp)
  b557cc:	003c5206 	br	b54918 <___vfprintf_internal_r+0xa88>
  b557d0:	d9014f17 	ldw	r4,1340(sp)
  b557d4:	b00b883a 	mov	r5,r22
  b557d8:	d9800c04 	addi	r6,sp,48
  b557dc:	0b53e380 	call	b53e38 <__sprint_r>
  b557e0:	103b631e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b557e4:	dc800e17 	ldw	r18,56(sp)
  b557e8:	d9000517 	ldw	r4,20(sp)
  b557ec:	d8c01904 	addi	r3,sp,100
  b557f0:	003f2e06 	br	b554ac <___vfprintf_internal_r+0x161c>
  b557f4:	d8c14c17 	ldw	r3,1328(sp)
  b557f8:	1880100c 	andi	r2,r3,64
  b557fc:	1000a026 	beq	r2,zero,b55a80 <___vfprintf_internal_r+0x1bf0>
  b55800:	38800017 	ldw	r2,0(r7)
  b55804:	39c00104 	addi	r7,r7,4
  b55808:	d9c14015 	stw	r7,1280(sp)
  b5580c:	d9014b17 	ldw	r4,1324(sp)
  b55810:	d9c14017 	ldw	r7,1280(sp)
  b55814:	1100000d 	sth	r4,0(r2)
  b55818:	0039f906 	br	b54000 <___vfprintf_internal_r+0x170>
  b5581c:	d9014f17 	ldw	r4,1340(sp)
  b55820:	b00b883a 	mov	r5,r22
  b55824:	d9800c04 	addi	r6,sp,48
  b55828:	0b53e380 	call	b53e38 <__sprint_r>
  b5582c:	103b501e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b55830:	dc800e17 	ldw	r18,56(sp)
  b55834:	dc400d17 	ldw	r17,52(sp)
  b55838:	d9000517 	ldw	r4,20(sp)
  b5583c:	d8c01904 	addi	r3,sp,100
  b55840:	003f2d06 	br	b554f8 <___vfprintf_internal_r+0x1668>
  b55844:	00800184 	movi	r2,6
  b55848:	14c09a36 	bltu	r2,r19,b55ab4 <___vfprintf_internal_r+0x1c24>
  b5584c:	dcc14515 	stw	r19,1300(sp)
  b55850:	9800010e 	bge	r19,zero,b55858 <___vfprintf_internal_r+0x19c8>
  b55854:	d8014515 	stw	zero,1300(sp)
  b55858:	00802db4 	movhi	r2,182
  b5585c:	10845204 	addi	r2,r2,4424
  b55860:	980f883a 	mov	r7,r19
  b55864:	d8814115 	stw	r2,1284(sp)
  b55868:	003a7806 	br	b5424c <___vfprintf_internal_r+0x3bc>
  b5586c:	00bfffc4 	movi	r2,-1
  b55870:	9880e226 	beq	r19,r2,b55bfc <___vfprintf_internal_r+0x1d6c>
  b55874:	d9414d17 	ldw	r5,1332(sp)
  b55878:	008019c4 	movi	r2,103
  b5587c:	2880dc26 	beq	r5,r2,b55bf0 <___vfprintf_internal_r+0x1d60>
  b55880:	008011c4 	movi	r2,71
  b55884:	2880da26 	beq	r5,r2,b55bf0 <___vfprintf_internal_r+0x1d60>
  b55888:	d9414c17 	ldw	r5,1328(sp)
  b5588c:	d9014317 	ldw	r4,1292(sp)
  b55890:	d9814217 	ldw	r6,1288(sp)
  b55894:	29404014 	ori	r5,r5,256
  b55898:	d9414c15 	stw	r5,1328(sp)
  b5589c:	2000cc16 	blt	r4,zero,b55bd0 <___vfprintf_internal_r+0x1d40>
  b558a0:	3021883a 	mov	r16,r6
  b558a4:	2023883a 	mov	r17,r4
  b558a8:	0039883a 	mov	fp,zero
  b558ac:	d9414d17 	ldw	r5,1332(sp)
  b558b0:	00801984 	movi	r2,102
  b558b4:	2880b726 	beq	r5,r2,b55b94 <___vfprintf_internal_r+0x1d04>
  b558b8:	00801184 	movi	r2,70
  b558bc:	2880b526 	beq	r5,r2,b55b94 <___vfprintf_internal_r+0x1d04>
  b558c0:	00801944 	movi	r2,101
  b558c4:	2880c826 	beq	r5,r2,b55be8 <___vfprintf_internal_r+0x1d58>
  b558c8:	00801144 	movi	r2,69
  b558cc:	2880c626 	beq	r5,r2,b55be8 <___vfprintf_internal_r+0x1d58>
  b558d0:	9829883a 	mov	r20,r19
  b558d4:	d9014f17 	ldw	r4,1340(sp)
  b558d8:	d8800504 	addi	r2,sp,20
  b558dc:	880d883a 	mov	r6,r17
  b558e0:	d8800115 	stw	r2,4(sp)
  b558e4:	d8c00604 	addi	r3,sp,24
  b558e8:	d8800704 	addi	r2,sp,28
  b558ec:	800b883a 	mov	r5,r16
  b558f0:	01c00084 	movi	r7,2
  b558f4:	d8c00215 	stw	r3,8(sp)
  b558f8:	d8800315 	stw	r2,12(sp)
  b558fc:	dd000015 	stw	r20,0(sp)
  b55900:	0b560b40 	call	b560b4 <_dtoa_r>
  b55904:	d9814d17 	ldw	r6,1332(sp)
  b55908:	d8814115 	stw	r2,1284(sp)
  b5590c:	008019c4 	movi	r2,103
  b55910:	30809526 	beq	r6,r2,b55b68 <___vfprintf_internal_r+0x1cd8>
  b55914:	d8c14d17 	ldw	r3,1332(sp)
  b55918:	008011c4 	movi	r2,71
  b5591c:	18809226 	beq	r3,r2,b55b68 <___vfprintf_internal_r+0x1cd8>
  b55920:	d9414117 	ldw	r5,1284(sp)
  b55924:	d9814d17 	ldw	r6,1332(sp)
  b55928:	00801984 	movi	r2,102
  b5592c:	2d25883a 	add	r18,r5,r20
  b55930:	30808626 	beq	r6,r2,b55b4c <___vfprintf_internal_r+0x1cbc>
  b55934:	00801184 	movi	r2,70
  b55938:	30808426 	beq	r6,r2,b55b4c <___vfprintf_internal_r+0x1cbc>
  b5593c:	000d883a 	mov	r6,zero
  b55940:	000f883a 	mov	r7,zero
  b55944:	880b883a 	mov	r5,r17
  b55948:	8009883a 	mov	r4,r16
  b5594c:	0b5befc0 	call	b5befc <__eqdf2>
  b55950:	1000751e 	bne	r2,zero,b55b28 <___vfprintf_internal_r+0x1c98>
  b55954:	9005883a 	mov	r2,r18
  b55958:	dc800715 	stw	r18,28(sp)
  b5595c:	d9014117 	ldw	r4,1284(sp)
  b55960:	d9414d17 	ldw	r5,1332(sp)
  b55964:	00c019c4 	movi	r3,103
  b55968:	1125c83a 	sub	r18,r2,r4
  b5596c:	28c06826 	beq	r5,r3,b55b10 <___vfprintf_internal_r+0x1c80>
  b55970:	008011c4 	movi	r2,71
  b55974:	28806626 	beq	r5,r2,b55b10 <___vfprintf_internal_r+0x1c80>
  b55978:	d9000517 	ldw	r4,20(sp)
  b5597c:	d8c14d17 	ldw	r3,1332(sp)
  b55980:	00801944 	movi	r2,101
  b55984:	10c05516 	blt	r2,r3,b55adc <___vfprintf_internal_r+0x1c4c>
  b55988:	213fffc4 	addi	r4,r4,-1
  b5598c:	d9000515 	stw	r4,20(sp)
  b55990:	d8c00805 	stb	r3,32(sp)
  b55994:	2021883a 	mov	r16,r4
  b55998:	2000c116 	blt	r4,zero,b55ca0 <___vfprintf_internal_r+0x1e10>
  b5599c:	00800ac4 	movi	r2,43
  b559a0:	d8800845 	stb	r2,33(sp)
  b559a4:	00800244 	movi	r2,9
  b559a8:	1400af0e 	bge	r2,r16,b55c68 <___vfprintf_internal_r+0x1dd8>
  b559ac:	1027883a 	mov	r19,r2
  b559b0:	dc400b84 	addi	r17,sp,46
  b559b4:	8009883a 	mov	r4,r16
  b559b8:	01400284 	movi	r5,10
  b559bc:	0b5c55c0 	call	b5c55c <__modsi3>
  b559c0:	10800c04 	addi	r2,r2,48
  b559c4:	8c7fffc4 	addi	r17,r17,-1
  b559c8:	8009883a 	mov	r4,r16
  b559cc:	01400284 	movi	r5,10
  b559d0:	88800005 	stb	r2,0(r17)
  b559d4:	0b5c4fc0 	call	b5c4fc <__divsi3>
  b559d8:	1021883a 	mov	r16,r2
  b559dc:	98bff516 	blt	r19,r2,b559b4 <___vfprintf_internal_r+0x1b24>
  b559e0:	10c00c04 	addi	r3,r2,48
  b559e4:	d88009c4 	addi	r2,sp,39
  b559e8:	108001c4 	addi	r2,r2,7
  b559ec:	897fffc4 	addi	r5,r17,-1
  b559f0:	88ffffc5 	stb	r3,-1(r17)
  b559f4:	2880a72e 	bgeu	r5,r2,b55c94 <___vfprintf_internal_r+0x1e04>
  b559f8:	1009883a 	mov	r4,r2
  b559fc:	d9800804 	addi	r6,sp,32
  b55a00:	d8c00884 	addi	r3,sp,34
  b55a04:	28800003 	ldbu	r2,0(r5)
  b55a08:	29400044 	addi	r5,r5,1
  b55a0c:	18800005 	stb	r2,0(r3)
  b55a10:	18c00044 	addi	r3,r3,1
  b55a14:	293ffb36 	bltu	r5,r4,b55a04 <___vfprintf_internal_r+0x1b74>
  b55a18:	1987c83a 	sub	r3,r3,r6
  b55a1c:	00800044 	movi	r2,1
  b55a20:	d8c14815 	stw	r3,1312(sp)
  b55a24:	90cf883a 	add	r7,r18,r3
  b55a28:	1480960e 	bge	r2,r18,b55c84 <___vfprintf_internal_r+0x1df4>
  b55a2c:	39c00044 	addi	r7,r7,1
  b55a30:	d9c14515 	stw	r7,1300(sp)
  b55a34:	38003416 	blt	r7,zero,b55b08 <___vfprintf_internal_r+0x1c78>
  b55a38:	e0803fcc 	andi	r2,fp,255
  b55a3c:	1080201c 	xori	r2,r2,128
  b55a40:	10bfe004 	addi	r2,r2,-128
  b55a44:	10004e26 	beq	r2,zero,b55b80 <___vfprintf_internal_r+0x1cf0>
  b55a48:	00800b44 	movi	r2,45
  b55a4c:	dc814715 	stw	r18,1308(sp)
  b55a50:	d8014615 	stw	zero,1304(sp)
  b55a54:	d8800405 	stb	r2,16(sp)
  b55a58:	003bb106 	br	b54920 <___vfprintf_internal_r+0xa90>
  b55a5c:	00800b44 	movi	r2,45
  b55a60:	d8800405 	stb	r2,16(sp)
  b55a64:	003d3306 	br	b54f34 <___vfprintf_internal_r+0x10a4>
  b55a68:	d9014f17 	ldw	r4,1340(sp)
  b55a6c:	b00b883a 	mov	r5,r22
  b55a70:	d9800c04 	addi	r6,sp,48
  b55a74:	0b53e380 	call	b53e38 <__sprint_r>
  b55a78:	103abd1e 	bne	r2,zero,b54570 <___vfprintf_internal_r+0x6e0>
  b55a7c:	003abb06 	br	b5456c <___vfprintf_internal_r+0x6dc>
  b55a80:	38800017 	ldw	r2,0(r7)
  b55a84:	39c00104 	addi	r7,r7,4
  b55a88:	d9c14015 	stw	r7,1280(sp)
  b55a8c:	d9414b17 	ldw	r5,1324(sp)
  b55a90:	d9c14017 	ldw	r7,1280(sp)
  b55a94:	11400015 	stw	r5,0(r2)
  b55a98:	00395906 	br	b54000 <___vfprintf_internal_r+0x170>
  b55a9c:	980f883a 	mov	r7,r19
  b55aa0:	dcc14515 	stw	r19,1300(sp)
  b55aa4:	d8014615 	stw	zero,1304(sp)
  b55aa8:	003b9b06 	br	b54918 <___vfprintf_internal_r+0xa88>
  b55aac:	0027883a 	mov	r19,zero
  b55ab0:	00397806 	br	b54094 <___vfprintf_internal_r+0x204>
  b55ab4:	00c02db4 	movhi	r3,182
  b55ab8:	18c45204 	addi	r3,r3,4424
  b55abc:	100f883a 	mov	r7,r2
  b55ac0:	d8814515 	stw	r2,1300(sp)
  b55ac4:	d8c14115 	stw	r3,1284(sp)
  b55ac8:	0039e006 	br	b5424c <___vfprintf_internal_r+0x3bc>
  b55acc:	00802db4 	movhi	r2,182
  b55ad0:	10845104 	addi	r2,r2,4420
  b55ad4:	d8814115 	stw	r2,1284(sp)
  b55ad8:	003d1c06 	br	b54f4c <___vfprintf_internal_r+0x10bc>
  b55adc:	d9414d17 	ldw	r5,1332(sp)
  b55ae0:	00801984 	movi	r2,102
  b55ae4:	28804926 	beq	r5,r2,b55c0c <___vfprintf_internal_r+0x1d7c>
  b55ae8:	200f883a 	mov	r7,r4
  b55aec:	24805716 	blt	r4,r18,b55c4c <___vfprintf_internal_r+0x1dbc>
  b55af0:	d9414c17 	ldw	r5,1328(sp)
  b55af4:	2880004c 	andi	r2,r5,1
  b55af8:	10000126 	beq	r2,zero,b55b00 <___vfprintf_internal_r+0x1c70>
  b55afc:	21c00044 	addi	r7,r4,1
  b55b00:	d9c14515 	stw	r7,1300(sp)
  b55b04:	383fcc0e 	bge	r7,zero,b55a38 <___vfprintf_internal_r+0x1ba8>
  b55b08:	d8014515 	stw	zero,1300(sp)
  b55b0c:	003fca06 	br	b55a38 <___vfprintf_internal_r+0x1ba8>
  b55b10:	d9000517 	ldw	r4,20(sp)
  b55b14:	00bfff04 	movi	r2,-4
  b55b18:	1100480e 	bge	r2,r4,b55c3c <___vfprintf_internal_r+0x1dac>
  b55b1c:	99004716 	blt	r19,r4,b55c3c <___vfprintf_internal_r+0x1dac>
  b55b20:	d8c14d15 	stw	r3,1332(sp)
  b55b24:	003ff006 	br	b55ae8 <___vfprintf_internal_r+0x1c58>
  b55b28:	d8800717 	ldw	r2,28(sp)
  b55b2c:	14bf8b2e 	bgeu	r2,r18,b5595c <___vfprintf_internal_r+0x1acc>
  b55b30:	9007883a 	mov	r3,r18
  b55b34:	01000c04 	movi	r4,48
  b55b38:	11000005 	stb	r4,0(r2)
  b55b3c:	10800044 	addi	r2,r2,1
  b55b40:	d8800715 	stw	r2,28(sp)
  b55b44:	18bffc1e 	bne	r3,r2,b55b38 <___vfprintf_internal_r+0x1ca8>
  b55b48:	003f8406 	br	b5595c <___vfprintf_internal_r+0x1acc>
  b55b4c:	d8814117 	ldw	r2,1284(sp)
  b55b50:	10c00007 	ldb	r3,0(r2)
  b55b54:	00800c04 	movi	r2,48
  b55b58:	18805b26 	beq	r3,r2,b55cc8 <___vfprintf_internal_r+0x1e38>
  b55b5c:	d9000517 	ldw	r4,20(sp)
  b55b60:	9125883a 	add	r18,r18,r4
  b55b64:	003f7506 	br	b5593c <___vfprintf_internal_r+0x1aac>
  b55b68:	d9014c17 	ldw	r4,1328(sp)
  b55b6c:	2080004c 	andi	r2,r4,1
  b55b70:	1005003a 	cmpeq	r2,r2,zero
  b55b74:	103f6a26 	beq	r2,zero,b55920 <___vfprintf_internal_r+0x1a90>
  b55b78:	d8800717 	ldw	r2,28(sp)
  b55b7c:	003f7706 	br	b5595c <___vfprintf_internal_r+0x1acc>
  b55b80:	d9c14515 	stw	r7,1300(sp)
  b55b84:	38004d16 	blt	r7,zero,b55cbc <___vfprintf_internal_r+0x1e2c>
  b55b88:	dc814715 	stw	r18,1308(sp)
  b55b8c:	d8014615 	stw	zero,1304(sp)
  b55b90:	003b6106 	br	b54918 <___vfprintf_internal_r+0xa88>
  b55b94:	d9014f17 	ldw	r4,1340(sp)
  b55b98:	d8800504 	addi	r2,sp,20
  b55b9c:	d8800115 	stw	r2,4(sp)
  b55ba0:	d8c00604 	addi	r3,sp,24
  b55ba4:	d8800704 	addi	r2,sp,28
  b55ba8:	800b883a 	mov	r5,r16
  b55bac:	880d883a 	mov	r6,r17
  b55bb0:	01c000c4 	movi	r7,3
  b55bb4:	d8c00215 	stw	r3,8(sp)
  b55bb8:	d8800315 	stw	r2,12(sp)
  b55bbc:	dcc00015 	stw	r19,0(sp)
  b55bc0:	9829883a 	mov	r20,r19
  b55bc4:	0b560b40 	call	b560b4 <_dtoa_r>
  b55bc8:	d8814115 	stw	r2,1284(sp)
  b55bcc:	003f5106 	br	b55914 <___vfprintf_internal_r+0x1a84>
  b55bd0:	d8c14217 	ldw	r3,1288(sp)
  b55bd4:	d9014317 	ldw	r4,1292(sp)
  b55bd8:	07000b44 	movi	fp,45
  b55bdc:	1821883a 	mov	r16,r3
  b55be0:	2460003c 	xorhi	r17,r4,32768
  b55be4:	003f3106 	br	b558ac <___vfprintf_internal_r+0x1a1c>
  b55be8:	9d000044 	addi	r20,r19,1
  b55bec:	003f3906 	br	b558d4 <___vfprintf_internal_r+0x1a44>
  b55bf0:	983f251e 	bne	r19,zero,b55888 <___vfprintf_internal_r+0x19f8>
  b55bf4:	04c00044 	movi	r19,1
  b55bf8:	003f2306 	br	b55888 <___vfprintf_internal_r+0x19f8>
  b55bfc:	04c00184 	movi	r19,6
  b55c00:	003f2106 	br	b55888 <___vfprintf_internal_r+0x19f8>
  b55c04:	d8014515 	stw	zero,1300(sp)
  b55c08:	003eee06 	br	b557c4 <___vfprintf_internal_r+0x1934>
  b55c0c:	200f883a 	mov	r7,r4
  b55c10:	0100370e 	bge	zero,r4,b55cf0 <___vfprintf_internal_r+0x1e60>
  b55c14:	9800031e 	bne	r19,zero,b55c24 <___vfprintf_internal_r+0x1d94>
  b55c18:	d9814c17 	ldw	r6,1328(sp)
  b55c1c:	3080004c 	andi	r2,r6,1
  b55c20:	103fb726 	beq	r2,zero,b55b00 <___vfprintf_internal_r+0x1c70>
  b55c24:	20800044 	addi	r2,r4,1
  b55c28:	98a7883a 	add	r19,r19,r2
  b55c2c:	dcc14515 	stw	r19,1300(sp)
  b55c30:	980f883a 	mov	r7,r19
  b55c34:	983f800e 	bge	r19,zero,b55a38 <___vfprintf_internal_r+0x1ba8>
  b55c38:	003fb306 	br	b55b08 <___vfprintf_internal_r+0x1c78>
  b55c3c:	d9814d17 	ldw	r6,1332(sp)
  b55c40:	31bfff84 	addi	r6,r6,-2
  b55c44:	d9814d15 	stw	r6,1332(sp)
  b55c48:	003f4c06 	br	b5597c <___vfprintf_internal_r+0x1aec>
  b55c4c:	0100180e 	bge	zero,r4,b55cb0 <___vfprintf_internal_r+0x1e20>
  b55c50:	00800044 	movi	r2,1
  b55c54:	1485883a 	add	r2,r2,r18
  b55c58:	d8814515 	stw	r2,1300(sp)
  b55c5c:	100f883a 	mov	r7,r2
  b55c60:	103f750e 	bge	r2,zero,b55a38 <___vfprintf_internal_r+0x1ba8>
  b55c64:	003fa806 	br	b55b08 <___vfprintf_internal_r+0x1c78>
  b55c68:	80c00c04 	addi	r3,r16,48
  b55c6c:	00800c04 	movi	r2,48
  b55c70:	d8c008c5 	stb	r3,35(sp)
  b55c74:	d9800804 	addi	r6,sp,32
  b55c78:	d8c00904 	addi	r3,sp,36
  b55c7c:	d8800885 	stb	r2,34(sp)
  b55c80:	003f6506 	br	b55a18 <___vfprintf_internal_r+0x1b88>
  b55c84:	d9014c17 	ldw	r4,1328(sp)
  b55c88:	2084703a 	and	r2,r4,r2
  b55c8c:	103f9c26 	beq	r2,zero,b55b00 <___vfprintf_internal_r+0x1c70>
  b55c90:	003f6606 	br	b55a2c <___vfprintf_internal_r+0x1b9c>
  b55c94:	d9800804 	addi	r6,sp,32
  b55c98:	d8c00884 	addi	r3,sp,34
  b55c9c:	003f5e06 	br	b55a18 <___vfprintf_internal_r+0x1b88>
  b55ca0:	00800b44 	movi	r2,45
  b55ca4:	0121c83a 	sub	r16,zero,r4
  b55ca8:	d8800845 	stb	r2,33(sp)
  b55cac:	003f3d06 	br	b559a4 <___vfprintf_internal_r+0x1b14>
  b55cb0:	00800084 	movi	r2,2
  b55cb4:	1105c83a 	sub	r2,r2,r4
  b55cb8:	003fe606 	br	b55c54 <___vfprintf_internal_r+0x1dc4>
  b55cbc:	d8014515 	stw	zero,1300(sp)
  b55cc0:	dc814715 	stw	r18,1308(sp)
  b55cc4:	003fb106 	br	b55b8c <___vfprintf_internal_r+0x1cfc>
  b55cc8:	000d883a 	mov	r6,zero
  b55ccc:	000f883a 	mov	r7,zero
  b55cd0:	8009883a 	mov	r4,r16
  b55cd4:	880b883a 	mov	r5,r17
  b55cd8:	0b531580 	call	b53158 <__nedf2>
  b55cdc:	103f9f26 	beq	r2,zero,b55b5c <___vfprintf_internal_r+0x1ccc>
  b55ce0:	00800044 	movi	r2,1
  b55ce4:	1509c83a 	sub	r4,r2,r20
  b55ce8:	d9000515 	stw	r4,20(sp)
  b55cec:	003f9b06 	br	b55b5c <___vfprintf_internal_r+0x1ccc>
  b55cf0:	98000d1e 	bne	r19,zero,b55d28 <___vfprintf_internal_r+0x1e98>
  b55cf4:	d8c14c17 	ldw	r3,1328(sp)
  b55cf8:	1880004c 	andi	r2,r3,1
  b55cfc:	10000a1e 	bne	r2,zero,b55d28 <___vfprintf_internal_r+0x1e98>
  b55d00:	01000044 	movi	r4,1
  b55d04:	200f883a 	mov	r7,r4
  b55d08:	d9014515 	stw	r4,1300(sp)
  b55d0c:	003f4a06 	br	b55a38 <___vfprintf_internal_r+0x1ba8>
  b55d10:	3cc00017 	ldw	r19,0(r7)
  b55d14:	39c00104 	addi	r7,r7,4
  b55d18:	983d0e0e 	bge	r19,zero,b55154 <___vfprintf_internal_r+0x12c4>
  b55d1c:	b8c00007 	ldb	r3,0(r23)
  b55d20:	04ffffc4 	movi	r19,-1
  b55d24:	0038d906 	br	b5408c <___vfprintf_internal_r+0x1fc>
  b55d28:	9cc00084 	addi	r19,r19,2
  b55d2c:	dcc14515 	stw	r19,1300(sp)
  b55d30:	980f883a 	mov	r7,r19
  b55d34:	983f400e 	bge	r19,zero,b55a38 <___vfprintf_internal_r+0x1ba8>
  b55d38:	003f7306 	br	b55b08 <___vfprintf_internal_r+0x1c78>

00b55d3c <__vfprintf_internal>:
  b55d3c:	00802db4 	movhi	r2,182
  b55d40:	108bf904 	addi	r2,r2,12260
  b55d44:	2013883a 	mov	r9,r4
  b55d48:	11000017 	ldw	r4,0(r2)
  b55d4c:	2805883a 	mov	r2,r5
  b55d50:	300f883a 	mov	r7,r6
  b55d54:	480b883a 	mov	r5,r9
  b55d58:	100d883a 	mov	r6,r2
  b55d5c:	0b53e901 	jmpi	b53e90 <___vfprintf_internal_r>

00b55d60 <__swsetup_r>:
  b55d60:	00802db4 	movhi	r2,182
  b55d64:	108bf904 	addi	r2,r2,12260
  b55d68:	10c00017 	ldw	r3,0(r2)
  b55d6c:	defffd04 	addi	sp,sp,-12
  b55d70:	dc400115 	stw	r17,4(sp)
  b55d74:	dc000015 	stw	r16,0(sp)
  b55d78:	dfc00215 	stw	ra,8(sp)
  b55d7c:	2023883a 	mov	r17,r4
  b55d80:	2821883a 	mov	r16,r5
  b55d84:	18000226 	beq	r3,zero,b55d90 <__swsetup_r+0x30>
  b55d88:	18800e17 	ldw	r2,56(r3)
  b55d8c:	10001f26 	beq	r2,zero,b55e0c <__swsetup_r+0xac>
  b55d90:	8100030b 	ldhu	r4,12(r16)
  b55d94:	2080020c 	andi	r2,r4,8
  b55d98:	10002826 	beq	r2,zero,b55e3c <__swsetup_r+0xdc>
  b55d9c:	81400417 	ldw	r5,16(r16)
  b55da0:	28001d26 	beq	r5,zero,b55e18 <__swsetup_r+0xb8>
  b55da4:	2080004c 	andi	r2,r4,1
  b55da8:	1005003a 	cmpeq	r2,r2,zero
  b55dac:	10000b26 	beq	r2,zero,b55ddc <__swsetup_r+0x7c>
  b55db0:	2080008c 	andi	r2,r4,2
  b55db4:	10001226 	beq	r2,zero,b55e00 <__swsetup_r+0xa0>
  b55db8:	0005883a 	mov	r2,zero
  b55dbc:	80800215 	stw	r2,8(r16)
  b55dc0:	28000b26 	beq	r5,zero,b55df0 <__swsetup_r+0x90>
  b55dc4:	0005883a 	mov	r2,zero
  b55dc8:	dfc00217 	ldw	ra,8(sp)
  b55dcc:	dc400117 	ldw	r17,4(sp)
  b55dd0:	dc000017 	ldw	r16,0(sp)
  b55dd4:	dec00304 	addi	sp,sp,12
  b55dd8:	f800283a 	ret
  b55ddc:	80800517 	ldw	r2,20(r16)
  b55de0:	80000215 	stw	zero,8(r16)
  b55de4:	0085c83a 	sub	r2,zero,r2
  b55de8:	80800615 	stw	r2,24(r16)
  b55dec:	283ff51e 	bne	r5,zero,b55dc4 <__swsetup_r+0x64>
  b55df0:	2080200c 	andi	r2,r4,128
  b55df4:	103ff326 	beq	r2,zero,b55dc4 <__swsetup_r+0x64>
  b55df8:	00bfffc4 	movi	r2,-1
  b55dfc:	003ff206 	br	b55dc8 <__swsetup_r+0x68>
  b55e00:	80800517 	ldw	r2,20(r16)
  b55e04:	80800215 	stw	r2,8(r16)
  b55e08:	003fed06 	br	b55dc0 <__swsetup_r+0x60>
  b55e0c:	1809883a 	mov	r4,r3
  b55e10:	0b579000 	call	b57900 <__sinit>
  b55e14:	003fde06 	br	b55d90 <__swsetup_r+0x30>
  b55e18:	20c0a00c 	andi	r3,r4,640
  b55e1c:	00808004 	movi	r2,512
  b55e20:	18bfe026 	beq	r3,r2,b55da4 <__swsetup_r+0x44>
  b55e24:	8809883a 	mov	r4,r17
  b55e28:	800b883a 	mov	r5,r16
  b55e2c:	0b586780 	call	b58678 <__smakebuf_r>
  b55e30:	8100030b 	ldhu	r4,12(r16)
  b55e34:	81400417 	ldw	r5,16(r16)
  b55e38:	003fda06 	br	b55da4 <__swsetup_r+0x44>
  b55e3c:	2080040c 	andi	r2,r4,16
  b55e40:	103fed26 	beq	r2,zero,b55df8 <__swsetup_r+0x98>
  b55e44:	2080010c 	andi	r2,r4,4
  b55e48:	10001226 	beq	r2,zero,b55e94 <__swsetup_r+0x134>
  b55e4c:	81400c17 	ldw	r5,48(r16)
  b55e50:	28000526 	beq	r5,zero,b55e68 <__swsetup_r+0x108>
  b55e54:	80801004 	addi	r2,r16,64
  b55e58:	28800226 	beq	r5,r2,b55e64 <__swsetup_r+0x104>
  b55e5c:	8809883a 	mov	r4,r17
  b55e60:	0b57c840 	call	b57c84 <_free_r>
  b55e64:	80000c15 	stw	zero,48(r16)
  b55e68:	8080030b 	ldhu	r2,12(r16)
  b55e6c:	81400417 	ldw	r5,16(r16)
  b55e70:	80000115 	stw	zero,4(r16)
  b55e74:	10bff6cc 	andi	r2,r2,65499
  b55e78:	8080030d 	sth	r2,12(r16)
  b55e7c:	81400015 	stw	r5,0(r16)
  b55e80:	8080030b 	ldhu	r2,12(r16)
  b55e84:	10800214 	ori	r2,r2,8
  b55e88:	113fffcc 	andi	r4,r2,65535
  b55e8c:	8080030d 	sth	r2,12(r16)
  b55e90:	003fc306 	br	b55da0 <__swsetup_r+0x40>
  b55e94:	81400417 	ldw	r5,16(r16)
  b55e98:	003ff906 	br	b55e80 <__swsetup_r+0x120>

00b55e9c <quorem>:
  b55e9c:	28c00417 	ldw	r3,16(r5)
  b55ea0:	20800417 	ldw	r2,16(r4)
  b55ea4:	defff604 	addi	sp,sp,-40
  b55ea8:	ddc00715 	stw	r23,28(sp)
  b55eac:	dd400515 	stw	r21,20(sp)
  b55eb0:	dfc00915 	stw	ra,36(sp)
  b55eb4:	df000815 	stw	fp,32(sp)
  b55eb8:	dd800615 	stw	r22,24(sp)
  b55ebc:	dd000415 	stw	r20,16(sp)
  b55ec0:	dcc00315 	stw	r19,12(sp)
  b55ec4:	dc800215 	stw	r18,8(sp)
  b55ec8:	dc400115 	stw	r17,4(sp)
  b55ecc:	dc000015 	stw	r16,0(sp)
  b55ed0:	202f883a 	mov	r23,r4
  b55ed4:	282b883a 	mov	r21,r5
  b55ed8:	10c07416 	blt	r2,r3,b560ac <quorem+0x210>
  b55edc:	1c7fffc4 	addi	r17,r3,-1
  b55ee0:	8c45883a 	add	r2,r17,r17
  b55ee4:	1085883a 	add	r2,r2,r2
  b55ee8:	2c000504 	addi	r16,r5,20
  b55eec:	24c00504 	addi	r19,r4,20
  b55ef0:	14ed883a 	add	r22,r2,r19
  b55ef4:	80a5883a 	add	r18,r16,r2
  b55ef8:	b7000017 	ldw	fp,0(r22)
  b55efc:	91400017 	ldw	r5,0(r18)
  b55f00:	e009883a 	mov	r4,fp
  b55f04:	29400044 	addi	r5,r5,1
  b55f08:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b55f0c:	1029883a 	mov	r20,r2
  b55f10:	10003c1e 	bne	r2,zero,b56004 <quorem+0x168>
  b55f14:	a80b883a 	mov	r5,r21
  b55f18:	b809883a 	mov	r4,r23
  b55f1c:	0b593a40 	call	b593a4 <__mcmp>
  b55f20:	10002b16 	blt	r2,zero,b55fd0 <quorem+0x134>
  b55f24:	a5000044 	addi	r20,r20,1
  b55f28:	980f883a 	mov	r7,r19
  b55f2c:	0011883a 	mov	r8,zero
  b55f30:	0009883a 	mov	r4,zero
  b55f34:	81400017 	ldw	r5,0(r16)
  b55f38:	38c00017 	ldw	r3,0(r7)
  b55f3c:	84000104 	addi	r16,r16,4
  b55f40:	28bfffcc 	andi	r2,r5,65535
  b55f44:	2085883a 	add	r2,r4,r2
  b55f48:	11bfffcc 	andi	r6,r2,65535
  b55f4c:	193fffcc 	andi	r4,r3,65535
  b55f50:	1004d43a 	srli	r2,r2,16
  b55f54:	280ad43a 	srli	r5,r5,16
  b55f58:	2189c83a 	sub	r4,r4,r6
  b55f5c:	2209883a 	add	r4,r4,r8
  b55f60:	1806d43a 	srli	r3,r3,16
  b55f64:	288b883a 	add	r5,r5,r2
  b55f68:	200dd43a 	srai	r6,r4,16
  b55f6c:	28bfffcc 	andi	r2,r5,65535
  b55f70:	1887c83a 	sub	r3,r3,r2
  b55f74:	1987883a 	add	r3,r3,r6
  b55f78:	3900000d 	sth	r4,0(r7)
  b55f7c:	38c0008d 	sth	r3,2(r7)
  b55f80:	2808d43a 	srli	r4,r5,16
  b55f84:	39c00104 	addi	r7,r7,4
  b55f88:	1811d43a 	srai	r8,r3,16
  b55f8c:	943fe92e 	bgeu	r18,r16,b55f34 <quorem+0x98>
  b55f90:	8c45883a 	add	r2,r17,r17
  b55f94:	1085883a 	add	r2,r2,r2
  b55f98:	9885883a 	add	r2,r19,r2
  b55f9c:	10c00017 	ldw	r3,0(r2)
  b55fa0:	18000b1e 	bne	r3,zero,b55fd0 <quorem+0x134>
  b55fa4:	113fff04 	addi	r4,r2,-4
  b55fa8:	9900082e 	bgeu	r19,r4,b55fcc <quorem+0x130>
  b55fac:	10bfff17 	ldw	r2,-4(r2)
  b55fb0:	10000326 	beq	r2,zero,b55fc0 <quorem+0x124>
  b55fb4:	00000506 	br	b55fcc <quorem+0x130>
  b55fb8:	20800017 	ldw	r2,0(r4)
  b55fbc:	1000031e 	bne	r2,zero,b55fcc <quorem+0x130>
  b55fc0:	213fff04 	addi	r4,r4,-4
  b55fc4:	8c7fffc4 	addi	r17,r17,-1
  b55fc8:	993ffb36 	bltu	r19,r4,b55fb8 <quorem+0x11c>
  b55fcc:	bc400415 	stw	r17,16(r23)
  b55fd0:	a005883a 	mov	r2,r20
  b55fd4:	dfc00917 	ldw	ra,36(sp)
  b55fd8:	df000817 	ldw	fp,32(sp)
  b55fdc:	ddc00717 	ldw	r23,28(sp)
  b55fe0:	dd800617 	ldw	r22,24(sp)
  b55fe4:	dd400517 	ldw	r21,20(sp)
  b55fe8:	dd000417 	ldw	r20,16(sp)
  b55fec:	dcc00317 	ldw	r19,12(sp)
  b55ff0:	dc800217 	ldw	r18,8(sp)
  b55ff4:	dc400117 	ldw	r17,4(sp)
  b55ff8:	dc000017 	ldw	r16,0(sp)
  b55ffc:	dec00a04 	addi	sp,sp,40
  b56000:	f800283a 	ret
  b56004:	980f883a 	mov	r7,r19
  b56008:	8011883a 	mov	r8,r16
  b5600c:	0013883a 	mov	r9,zero
  b56010:	000d883a 	mov	r6,zero
  b56014:	40c00017 	ldw	r3,0(r8)
  b56018:	39000017 	ldw	r4,0(r7)
  b5601c:	42000104 	addi	r8,r8,4
  b56020:	18bfffcc 	andi	r2,r3,65535
  b56024:	a085383a 	mul	r2,r20,r2
  b56028:	1806d43a 	srli	r3,r3,16
  b5602c:	217fffcc 	andi	r5,r4,65535
  b56030:	3085883a 	add	r2,r6,r2
  b56034:	11bfffcc 	andi	r6,r2,65535
  b56038:	a0c7383a 	mul	r3,r20,r3
  b5603c:	1004d43a 	srli	r2,r2,16
  b56040:	298bc83a 	sub	r5,r5,r6
  b56044:	2a4b883a 	add	r5,r5,r9
  b56048:	2008d43a 	srli	r4,r4,16
  b5604c:	1887883a 	add	r3,r3,r2
  b56050:	280dd43a 	srai	r6,r5,16
  b56054:	18bfffcc 	andi	r2,r3,65535
  b56058:	2089c83a 	sub	r4,r4,r2
  b5605c:	2189883a 	add	r4,r4,r6
  b56060:	3900008d 	sth	r4,2(r7)
  b56064:	3940000d 	sth	r5,0(r7)
  b56068:	180cd43a 	srli	r6,r3,16
  b5606c:	39c00104 	addi	r7,r7,4
  b56070:	2013d43a 	srai	r9,r4,16
  b56074:	923fe72e 	bgeu	r18,r8,b56014 <quorem+0x178>
  b56078:	e03fa61e 	bne	fp,zero,b55f14 <quorem+0x78>
  b5607c:	b0ffff04 	addi	r3,r22,-4
  b56080:	98c0082e 	bgeu	r19,r3,b560a4 <quorem+0x208>
  b56084:	b0bfff17 	ldw	r2,-4(r22)
  b56088:	10000326 	beq	r2,zero,b56098 <quorem+0x1fc>
  b5608c:	00000506 	br	b560a4 <quorem+0x208>
  b56090:	18800017 	ldw	r2,0(r3)
  b56094:	1000031e 	bne	r2,zero,b560a4 <quorem+0x208>
  b56098:	18ffff04 	addi	r3,r3,-4
  b5609c:	8c7fffc4 	addi	r17,r17,-1
  b560a0:	98fffb36 	bltu	r19,r3,b56090 <quorem+0x1f4>
  b560a4:	bc400415 	stw	r17,16(r23)
  b560a8:	003f9a06 	br	b55f14 <quorem+0x78>
  b560ac:	0005883a 	mov	r2,zero
  b560b0:	003fc806 	br	b55fd4 <quorem+0x138>

00b560b4 <_dtoa_r>:
  b560b4:	22001017 	ldw	r8,64(r4)
  b560b8:	deffda04 	addi	sp,sp,-152
  b560bc:	dd402115 	stw	r21,132(sp)
  b560c0:	dd002015 	stw	r20,128(sp)
  b560c4:	dc801e15 	stw	r18,120(sp)
  b560c8:	dc401d15 	stw	r17,116(sp)
  b560cc:	dfc02515 	stw	ra,148(sp)
  b560d0:	df002415 	stw	fp,144(sp)
  b560d4:	ddc02315 	stw	r23,140(sp)
  b560d8:	dd802215 	stw	r22,136(sp)
  b560dc:	dcc01f15 	stw	r19,124(sp)
  b560e0:	dc001c15 	stw	r16,112(sp)
  b560e4:	d9001615 	stw	r4,88(sp)
  b560e8:	3023883a 	mov	r17,r6
  b560ec:	2829883a 	mov	r20,r5
  b560f0:	d9c01715 	stw	r7,92(sp)
  b560f4:	dc802817 	ldw	r18,160(sp)
  b560f8:	302b883a 	mov	r21,r6
  b560fc:	40000a26 	beq	r8,zero,b56128 <_dtoa_r+0x74>
  b56100:	20801117 	ldw	r2,68(r4)
  b56104:	400b883a 	mov	r5,r8
  b56108:	40800115 	stw	r2,4(r8)
  b5610c:	20c01117 	ldw	r3,68(r4)
  b56110:	00800044 	movi	r2,1
  b56114:	10c4983a 	sll	r2,r2,r3
  b56118:	40800215 	stw	r2,8(r8)
  b5611c:	0b592480 	call	b59248 <_Bfree>
  b56120:	d8c01617 	ldw	r3,88(sp)
  b56124:	18001015 	stw	zero,64(r3)
  b56128:	8800a316 	blt	r17,zero,b563b8 <_dtoa_r+0x304>
  b5612c:	90000015 	stw	zero,0(r18)
  b56130:	a8dffc2c 	andhi	r3,r21,32752
  b56134:	009ffc34 	movhi	r2,32752
  b56138:	18809126 	beq	r3,r2,b56380 <_dtoa_r+0x2cc>
  b5613c:	000d883a 	mov	r6,zero
  b56140:	000f883a 	mov	r7,zero
  b56144:	a009883a 	mov	r4,r20
  b56148:	a80b883a 	mov	r5,r21
  b5614c:	dd001215 	stw	r20,72(sp)
  b56150:	dd401315 	stw	r21,76(sp)
  b56154:	0b531580 	call	b53158 <__nedf2>
  b56158:	1000171e 	bne	r2,zero,b561b8 <_dtoa_r+0x104>
  b5615c:	d9802717 	ldw	r6,156(sp)
  b56160:	00800044 	movi	r2,1
  b56164:	30800015 	stw	r2,0(r6)
  b56168:	d8802917 	ldw	r2,164(sp)
  b5616c:	10029b26 	beq	r2,zero,b56bdc <_dtoa_r+0xb28>
  b56170:	d9002917 	ldw	r4,164(sp)
  b56174:	00802db4 	movhi	r2,182
  b56178:	1083ea44 	addi	r2,r2,4009
  b5617c:	10ffffc4 	addi	r3,r2,-1
  b56180:	20800015 	stw	r2,0(r4)
  b56184:	1805883a 	mov	r2,r3
  b56188:	dfc02517 	ldw	ra,148(sp)
  b5618c:	df002417 	ldw	fp,144(sp)
  b56190:	ddc02317 	ldw	r23,140(sp)
  b56194:	dd802217 	ldw	r22,136(sp)
  b56198:	dd402117 	ldw	r21,132(sp)
  b5619c:	dd002017 	ldw	r20,128(sp)
  b561a0:	dcc01f17 	ldw	r19,124(sp)
  b561a4:	dc801e17 	ldw	r18,120(sp)
  b561a8:	dc401d17 	ldw	r17,116(sp)
  b561ac:	dc001c17 	ldw	r16,112(sp)
  b561b0:	dec02604 	addi	sp,sp,152
  b561b4:	f800283a 	ret
  b561b8:	d9001617 	ldw	r4,88(sp)
  b561bc:	d9401217 	ldw	r5,72(sp)
  b561c0:	d8800104 	addi	r2,sp,4
  b561c4:	a80d883a 	mov	r6,r21
  b561c8:	d9c00204 	addi	r7,sp,8
  b561cc:	d8800015 	stw	r2,0(sp)
  b561d0:	0b598840 	call	b59884 <__d2b>
  b561d4:	d8800715 	stw	r2,28(sp)
  b561d8:	a804d53a 	srli	r2,r21,20
  b561dc:	1101ffcc 	andi	r4,r2,2047
  b561e0:	20008626 	beq	r4,zero,b563fc <_dtoa_r+0x348>
  b561e4:	d8c01217 	ldw	r3,72(sp)
  b561e8:	00800434 	movhi	r2,16
  b561ec:	10bfffc4 	addi	r2,r2,-1
  b561f0:	ddc00117 	ldw	r23,4(sp)
  b561f4:	a884703a 	and	r2,r21,r2
  b561f8:	1811883a 	mov	r8,r3
  b561fc:	124ffc34 	orhi	r9,r2,16368
  b56200:	25bf0044 	addi	r22,r4,-1023
  b56204:	d8000815 	stw	zero,32(sp)
  b56208:	0005883a 	mov	r2,zero
  b5620c:	00cffe34 	movhi	r3,16376
  b56210:	480b883a 	mov	r5,r9
  b56214:	4009883a 	mov	r4,r8
  b56218:	180f883a 	mov	r7,r3
  b5621c:	100d883a 	mov	r6,r2
  b56220:	0b52e0c0 	call	b52e0c <__subdf3>
  b56224:	0218dbf4 	movhi	r8,25455
  b56228:	4210d844 	addi	r8,r8,17249
  b5622c:	024ff4f4 	movhi	r9,16339
  b56230:	4a61e9c4 	addi	r9,r9,-30809
  b56234:	480f883a 	mov	r7,r9
  b56238:	400d883a 	mov	r6,r8
  b5623c:	180b883a 	mov	r5,r3
  b56240:	1009883a 	mov	r4,r2
  b56244:	0b5bb380 	call	b5bb38 <__muldf3>
  b56248:	0222d874 	movhi	r8,35681
  b5624c:	42322cc4 	addi	r8,r8,-14157
  b56250:	024ff1f4 	movhi	r9,16327
  b56254:	4a628a04 	addi	r9,r9,-30168
  b56258:	480f883a 	mov	r7,r9
  b5625c:	400d883a 	mov	r6,r8
  b56260:	180b883a 	mov	r5,r3
  b56264:	1009883a 	mov	r4,r2
  b56268:	0b52e8c0 	call	b52e8c <__adddf3>
  b5626c:	b009883a 	mov	r4,r22
  b56270:	1021883a 	mov	r16,r2
  b56274:	1823883a 	mov	r17,r3
  b56278:	0b5c11c0 	call	b5c11c <__floatsidf>
  b5627c:	021427f4 	movhi	r8,20639
  b56280:	421e7ec4 	addi	r8,r8,31227
  b56284:	024ff4f4 	movhi	r9,16339
  b56288:	4a5104c4 	addi	r9,r9,17427
  b5628c:	480f883a 	mov	r7,r9
  b56290:	400d883a 	mov	r6,r8
  b56294:	180b883a 	mov	r5,r3
  b56298:	1009883a 	mov	r4,r2
  b5629c:	0b5bb380 	call	b5bb38 <__muldf3>
  b562a0:	180f883a 	mov	r7,r3
  b562a4:	880b883a 	mov	r5,r17
  b562a8:	100d883a 	mov	r6,r2
  b562ac:	8009883a 	mov	r4,r16
  b562b0:	0b52e8c0 	call	b52e8c <__adddf3>
  b562b4:	1009883a 	mov	r4,r2
  b562b8:	180b883a 	mov	r5,r3
  b562bc:	1021883a 	mov	r16,r2
  b562c0:	1823883a 	mov	r17,r3
  b562c4:	0b5c2140 	call	b5c214 <__fixdfsi>
  b562c8:	000d883a 	mov	r6,zero
  b562cc:	000f883a 	mov	r7,zero
  b562d0:	8009883a 	mov	r4,r16
  b562d4:	880b883a 	mov	r5,r17
  b562d8:	d8800d15 	stw	r2,52(sp)
  b562dc:	0b5c0940 	call	b5c094 <__ltdf2>
  b562e0:	10031716 	blt	r2,zero,b56f40 <_dtoa_r+0xe8c>
  b562e4:	d8c00d17 	ldw	r3,52(sp)
  b562e8:	00800584 	movi	r2,22
  b562ec:	10c1482e 	bgeu	r2,r3,b56810 <_dtoa_r+0x75c>
  b562f0:	01000044 	movi	r4,1
  b562f4:	d9000c15 	stw	r4,48(sp)
  b562f8:	bd85c83a 	sub	r2,r23,r22
  b562fc:	11bfffc4 	addi	r6,r2,-1
  b56300:	30030b16 	blt	r6,zero,b56f30 <_dtoa_r+0xe7c>
  b56304:	d9800a15 	stw	r6,40(sp)
  b56308:	d8001115 	stw	zero,68(sp)
  b5630c:	d8c00d17 	ldw	r3,52(sp)
  b56310:	1802ff16 	blt	r3,zero,b56f10 <_dtoa_r+0xe5c>
  b56314:	d9000a17 	ldw	r4,40(sp)
  b56318:	d8c00915 	stw	r3,36(sp)
  b5631c:	d8001015 	stw	zero,64(sp)
  b56320:	20c9883a 	add	r4,r4,r3
  b56324:	d9000a15 	stw	r4,40(sp)
  b56328:	d9001717 	ldw	r4,92(sp)
  b5632c:	00800244 	movi	r2,9
  b56330:	11004636 	bltu	r2,r4,b5644c <_dtoa_r+0x398>
  b56334:	00800144 	movi	r2,5
  b56338:	11020416 	blt	r2,r4,b56b4c <_dtoa_r+0xa98>
  b5633c:	04400044 	movi	r17,1
  b56340:	d8c01717 	ldw	r3,92(sp)
  b56344:	00800144 	movi	r2,5
  b56348:	10c1ed36 	bltu	r2,r3,b56b00 <_dtoa_r+0xa4c>
  b5634c:	18c5883a 	add	r2,r3,r3
  b56350:	1085883a 	add	r2,r2,r2
  b56354:	00c02d74 	movhi	r3,181
  b56358:	18d8da04 	addi	r3,r3,25448
  b5635c:	10c5883a 	add	r2,r2,r3
  b56360:	11000017 	ldw	r4,0(r2)
  b56364:	2000683a 	jmp	r4
  b56368:	00b56454 	movui	r2,54673
  b5636c:	00b56454 	movui	r2,54673
  b56370:	00b56e54 	movui	r2,54713
  b56374:	00b56e2c 	andhi	r2,zero,54712
  b56378:	00b56e70 	cmpltui	r2,zero,54713
  b5637c:	00b56e7c 	xorhi	r2,zero,54713
  b56380:	d9002717 	ldw	r4,156(sp)
  b56384:	0089c3c4 	movi	r2,9999
  b56388:	20800015 	stw	r2,0(r4)
  b5638c:	a0001026 	beq	r20,zero,b563d0 <_dtoa_r+0x31c>
  b56390:	00c02db4 	movhi	r3,182
  b56394:	18c46b04 	addi	r3,r3,4524
  b56398:	d9802917 	ldw	r6,164(sp)
  b5639c:	303f7926 	beq	r6,zero,b56184 <_dtoa_r+0xd0>
  b563a0:	188000c7 	ldb	r2,3(r3)
  b563a4:	190000c4 	addi	r4,r3,3
  b563a8:	1000101e 	bne	r2,zero,b563ec <_dtoa_r+0x338>
  b563ac:	d8802917 	ldw	r2,164(sp)
  b563b0:	11000015 	stw	r4,0(r2)
  b563b4:	003f7306 	br	b56184 <_dtoa_r+0xd0>
  b563b8:	00a00034 	movhi	r2,32768
  b563bc:	10bfffc4 	addi	r2,r2,-1
  b563c0:	00c00044 	movi	r3,1
  b563c4:	88aa703a 	and	r21,r17,r2
  b563c8:	90c00015 	stw	r3,0(r18)
  b563cc:	003f5806 	br	b56130 <_dtoa_r+0x7c>
  b563d0:	00800434 	movhi	r2,16
  b563d4:	10bfffc4 	addi	r2,r2,-1
  b563d8:	a884703a 	and	r2,r21,r2
  b563dc:	103fec1e 	bne	r2,zero,b56390 <_dtoa_r+0x2dc>
  b563e0:	00c02db4 	movhi	r3,182
  b563e4:	18c46804 	addi	r3,r3,4512
  b563e8:	003feb06 	br	b56398 <_dtoa_r+0x2e4>
  b563ec:	d8802917 	ldw	r2,164(sp)
  b563f0:	19000204 	addi	r4,r3,8
  b563f4:	11000015 	stw	r4,0(r2)
  b563f8:	003f6206 	br	b56184 <_dtoa_r+0xd0>
  b563fc:	ddc00117 	ldw	r23,4(sp)
  b56400:	d8800217 	ldw	r2,8(sp)
  b56404:	01000804 	movi	r4,32
  b56408:	b8c10c84 	addi	r3,r23,1074
  b5640c:	18a3883a 	add	r17,r3,r2
  b56410:	2441b80e 	bge	r4,r17,b56af4 <_dtoa_r+0xa40>
  b56414:	00c01004 	movi	r3,64
  b56418:	1c47c83a 	sub	r3,r3,r17
  b5641c:	88bff804 	addi	r2,r17,-32
  b56420:	a8c6983a 	sll	r3,r21,r3
  b56424:	a084d83a 	srl	r2,r20,r2
  b56428:	1888b03a 	or	r4,r3,r2
  b5642c:	0b5c2ec0 	call	b5c2ec <__floatunsidf>
  b56430:	1011883a 	mov	r8,r2
  b56434:	00bf8434 	movhi	r2,65040
  b56438:	01000044 	movi	r4,1
  b5643c:	10d3883a 	add	r9,r2,r3
  b56440:	8dbef344 	addi	r22,r17,-1075
  b56444:	d9000815 	stw	r4,32(sp)
  b56448:	003f6f06 	br	b56208 <_dtoa_r+0x154>
  b5644c:	d8001715 	stw	zero,92(sp)
  b56450:	04400044 	movi	r17,1
  b56454:	00bfffc4 	movi	r2,-1
  b56458:	00c00044 	movi	r3,1
  b5645c:	d8800e15 	stw	r2,56(sp)
  b56460:	d8002615 	stw	zero,152(sp)
  b56464:	d8800f15 	stw	r2,60(sp)
  b56468:	d8c00b15 	stw	r3,44(sp)
  b5646c:	1021883a 	mov	r16,r2
  b56470:	d8801617 	ldw	r2,88(sp)
  b56474:	10001115 	stw	zero,68(r2)
  b56478:	d8801617 	ldw	r2,88(sp)
  b5647c:	11401117 	ldw	r5,68(r2)
  b56480:	1009883a 	mov	r4,r2
  b56484:	0b597c80 	call	b597c8 <_Balloc>
  b56488:	d8c01617 	ldw	r3,88(sp)
  b5648c:	d8800515 	stw	r2,20(sp)
  b56490:	18801015 	stw	r2,64(r3)
  b56494:	00800384 	movi	r2,14
  b56498:	14006836 	bltu	r2,r16,b5663c <_dtoa_r+0x588>
  b5649c:	8805003a 	cmpeq	r2,r17,zero
  b564a0:	1000661e 	bne	r2,zero,b5663c <_dtoa_r+0x588>
  b564a4:	d9000d17 	ldw	r4,52(sp)
  b564a8:	0102300e 	bge	zero,r4,b56d6c <_dtoa_r+0xcb8>
  b564ac:	208003cc 	andi	r2,r4,15
  b564b0:	100490fa 	slli	r2,r2,3
  b564b4:	2025d13a 	srai	r18,r4,4
  b564b8:	00c02db4 	movhi	r3,182
  b564bc:	18c47b04 	addi	r3,r3,4588
  b564c0:	10c5883a 	add	r2,r2,r3
  b564c4:	90c0040c 	andi	r3,r18,16
  b564c8:	14000017 	ldw	r16,0(r2)
  b564cc:	14400117 	ldw	r17,4(r2)
  b564d0:	18036a1e 	bne	r3,zero,b5727c <_dtoa_r+0x11c8>
  b564d4:	05800084 	movi	r22,2
  b564d8:	90001026 	beq	r18,zero,b5651c <_dtoa_r+0x468>
  b564dc:	04c02db4 	movhi	r19,182
  b564e0:	9cc4ad04 	addi	r19,r19,4788
  b564e4:	9080004c 	andi	r2,r18,1
  b564e8:	1005003a 	cmpeq	r2,r2,zero
  b564ec:	1000081e 	bne	r2,zero,b56510 <_dtoa_r+0x45c>
  b564f0:	99800017 	ldw	r6,0(r19)
  b564f4:	99c00117 	ldw	r7,4(r19)
  b564f8:	880b883a 	mov	r5,r17
  b564fc:	8009883a 	mov	r4,r16
  b56500:	0b5bb380 	call	b5bb38 <__muldf3>
  b56504:	1021883a 	mov	r16,r2
  b56508:	b5800044 	addi	r22,r22,1
  b5650c:	1823883a 	mov	r17,r3
  b56510:	9025d07a 	srai	r18,r18,1
  b56514:	9cc00204 	addi	r19,r19,8
  b56518:	903ff21e 	bne	r18,zero,b564e4 <_dtoa_r+0x430>
  b5651c:	a80b883a 	mov	r5,r21
  b56520:	a009883a 	mov	r4,r20
  b56524:	880f883a 	mov	r7,r17
  b56528:	800d883a 	mov	r6,r16
  b5652c:	0b52f000 	call	b52f00 <__divdf3>
  b56530:	1029883a 	mov	r20,r2
  b56534:	182b883a 	mov	r21,r3
  b56538:	d8c00c17 	ldw	r3,48(sp)
  b5653c:	1805003a 	cmpeq	r2,r3,zero
  b56540:	1000081e 	bne	r2,zero,b56564 <_dtoa_r+0x4b0>
  b56544:	0005883a 	mov	r2,zero
  b56548:	00cffc34 	movhi	r3,16368
  b5654c:	180f883a 	mov	r7,r3
  b56550:	a009883a 	mov	r4,r20
  b56554:	a80b883a 	mov	r5,r21
  b56558:	100d883a 	mov	r6,r2
  b5655c:	0b5c0940 	call	b5c094 <__ltdf2>
  b56560:	1003fe16 	blt	r2,zero,b5755c <_dtoa_r+0x14a8>
  b56564:	b009883a 	mov	r4,r22
  b56568:	0b5c11c0 	call	b5c11c <__floatsidf>
  b5656c:	180b883a 	mov	r5,r3
  b56570:	1009883a 	mov	r4,r2
  b56574:	a00d883a 	mov	r6,r20
  b56578:	a80f883a 	mov	r7,r21
  b5657c:	0b5bb380 	call	b5bb38 <__muldf3>
  b56580:	0011883a 	mov	r8,zero
  b56584:	02500734 	movhi	r9,16412
  b56588:	1009883a 	mov	r4,r2
  b5658c:	180b883a 	mov	r5,r3
  b56590:	480f883a 	mov	r7,r9
  b56594:	400d883a 	mov	r6,r8
  b56598:	0b52e8c0 	call	b52e8c <__adddf3>
  b5659c:	d9000f17 	ldw	r4,60(sp)
  b565a0:	102d883a 	mov	r22,r2
  b565a4:	00bf3034 	movhi	r2,64704
  b565a8:	18b9883a 	add	fp,r3,r2
  b565ac:	e02f883a 	mov	r23,fp
  b565b0:	20028f1e 	bne	r4,zero,b56ff0 <_dtoa_r+0xf3c>
  b565b4:	0005883a 	mov	r2,zero
  b565b8:	00d00534 	movhi	r3,16404
  b565bc:	a009883a 	mov	r4,r20
  b565c0:	a80b883a 	mov	r5,r21
  b565c4:	180f883a 	mov	r7,r3
  b565c8:	100d883a 	mov	r6,r2
  b565cc:	0b52e0c0 	call	b52e0c <__subdf3>
  b565d0:	1009883a 	mov	r4,r2
  b565d4:	e00f883a 	mov	r7,fp
  b565d8:	180b883a 	mov	r5,r3
  b565dc:	b00d883a 	mov	r6,r22
  b565e0:	1025883a 	mov	r18,r2
  b565e4:	1827883a 	mov	r19,r3
  b565e8:	0b5bf840 	call	b5bf84 <__gtdf2>
  b565ec:	00834f16 	blt	zero,r2,b5732c <_dtoa_r+0x1278>
  b565f0:	e0e0003c 	xorhi	r3,fp,32768
  b565f4:	9009883a 	mov	r4,r18
  b565f8:	980b883a 	mov	r5,r19
  b565fc:	180f883a 	mov	r7,r3
  b56600:	b00d883a 	mov	r6,r22
  b56604:	0b5c0940 	call	b5c094 <__ltdf2>
  b56608:	1000080e 	bge	r2,zero,b5662c <_dtoa_r+0x578>
  b5660c:	0027883a 	mov	r19,zero
  b56610:	0025883a 	mov	r18,zero
  b56614:	d8802617 	ldw	r2,152(sp)
  b56618:	df000517 	ldw	fp,20(sp)
  b5661c:	d8000615 	stw	zero,24(sp)
  b56620:	0084303a 	nor	r2,zero,r2
  b56624:	d8800d15 	stw	r2,52(sp)
  b56628:	00019b06 	br	b56c98 <_dtoa_r+0xbe4>
  b5662c:	d9801217 	ldw	r6,72(sp)
  b56630:	d8801317 	ldw	r2,76(sp)
  b56634:	3029883a 	mov	r20,r6
  b56638:	102b883a 	mov	r21,r2
  b5663c:	d8c00217 	ldw	r3,8(sp)
  b56640:	18008516 	blt	r3,zero,b56858 <_dtoa_r+0x7a4>
  b56644:	d9000d17 	ldw	r4,52(sp)
  b56648:	00800384 	movi	r2,14
  b5664c:	11008216 	blt	r2,r4,b56858 <_dtoa_r+0x7a4>
  b56650:	200490fa 	slli	r2,r4,3
  b56654:	d9802617 	ldw	r6,152(sp)
  b56658:	00c02db4 	movhi	r3,182
  b5665c:	18c47b04 	addi	r3,r3,4588
  b56660:	10c5883a 	add	r2,r2,r3
  b56664:	14800017 	ldw	r18,0(r2)
  b56668:	14c00117 	ldw	r19,4(r2)
  b5666c:	30031e16 	blt	r6,zero,b572e8 <_dtoa_r+0x1234>
  b56670:	d9000517 	ldw	r4,20(sp)
  b56674:	d8c00f17 	ldw	r3,60(sp)
  b56678:	a823883a 	mov	r17,r21
  b5667c:	a021883a 	mov	r16,r20
  b56680:	192b883a 	add	r21,r3,r4
  b56684:	2039883a 	mov	fp,r4
  b56688:	00000f06 	br	b566c8 <_dtoa_r+0x614>
  b5668c:	0005883a 	mov	r2,zero
  b56690:	00d00934 	movhi	r3,16420
  b56694:	5009883a 	mov	r4,r10
  b56698:	580b883a 	mov	r5,r11
  b5669c:	180f883a 	mov	r7,r3
  b566a0:	100d883a 	mov	r6,r2
  b566a4:	0b5bb380 	call	b5bb38 <__muldf3>
  b566a8:	180b883a 	mov	r5,r3
  b566ac:	000d883a 	mov	r6,zero
  b566b0:	000f883a 	mov	r7,zero
  b566b4:	1009883a 	mov	r4,r2
  b566b8:	1021883a 	mov	r16,r2
  b566bc:	1823883a 	mov	r17,r3
  b566c0:	0b531580 	call	b53158 <__nedf2>
  b566c4:	10004526 	beq	r2,zero,b567dc <_dtoa_r+0x728>
  b566c8:	900d883a 	mov	r6,r18
  b566cc:	980f883a 	mov	r7,r19
  b566d0:	8009883a 	mov	r4,r16
  b566d4:	880b883a 	mov	r5,r17
  b566d8:	0b52f000 	call	b52f00 <__divdf3>
  b566dc:	180b883a 	mov	r5,r3
  b566e0:	1009883a 	mov	r4,r2
  b566e4:	0b5c2140 	call	b5c214 <__fixdfsi>
  b566e8:	1009883a 	mov	r4,r2
  b566ec:	1029883a 	mov	r20,r2
  b566f0:	0b5c11c0 	call	b5c11c <__floatsidf>
  b566f4:	180f883a 	mov	r7,r3
  b566f8:	9009883a 	mov	r4,r18
  b566fc:	980b883a 	mov	r5,r19
  b56700:	100d883a 	mov	r6,r2
  b56704:	0b5bb380 	call	b5bb38 <__muldf3>
  b56708:	180f883a 	mov	r7,r3
  b5670c:	880b883a 	mov	r5,r17
  b56710:	8009883a 	mov	r4,r16
  b56714:	100d883a 	mov	r6,r2
  b56718:	0b52e0c0 	call	b52e0c <__subdf3>
  b5671c:	1015883a 	mov	r10,r2
  b56720:	a0800c04 	addi	r2,r20,48
  b56724:	e0800005 	stb	r2,0(fp)
  b56728:	e7000044 	addi	fp,fp,1
  b5672c:	1817883a 	mov	r11,r3
  b56730:	e57fd61e 	bne	fp,r21,b5668c <_dtoa_r+0x5d8>
  b56734:	500d883a 	mov	r6,r10
  b56738:	180f883a 	mov	r7,r3
  b5673c:	5009883a 	mov	r4,r10
  b56740:	180b883a 	mov	r5,r3
  b56744:	0b52e8c0 	call	b52e8c <__adddf3>
  b56748:	100d883a 	mov	r6,r2
  b5674c:	9009883a 	mov	r4,r18
  b56750:	980b883a 	mov	r5,r19
  b56754:	180f883a 	mov	r7,r3
  b56758:	1021883a 	mov	r16,r2
  b5675c:	1823883a 	mov	r17,r3
  b56760:	0b5c0940 	call	b5c094 <__ltdf2>
  b56764:	10000816 	blt	r2,zero,b56788 <_dtoa_r+0x6d4>
  b56768:	980b883a 	mov	r5,r19
  b5676c:	800d883a 	mov	r6,r16
  b56770:	880f883a 	mov	r7,r17
  b56774:	9009883a 	mov	r4,r18
  b56778:	0b5befc0 	call	b5befc <__eqdf2>
  b5677c:	1000171e 	bne	r2,zero,b567dc <_dtoa_r+0x728>
  b56780:	a080004c 	andi	r2,r20,1
  b56784:	10001526 	beq	r2,zero,b567dc <_dtoa_r+0x728>
  b56788:	d8800d17 	ldw	r2,52(sp)
  b5678c:	d8800415 	stw	r2,16(sp)
  b56790:	e009883a 	mov	r4,fp
  b56794:	213fffc4 	addi	r4,r4,-1
  b56798:	20c00007 	ldb	r3,0(r4)
  b5679c:	00800e44 	movi	r2,57
  b567a0:	1880081e 	bne	r3,r2,b567c4 <_dtoa_r+0x710>
  b567a4:	d8800517 	ldw	r2,20(sp)
  b567a8:	113ffa1e 	bne	r2,r4,b56794 <_dtoa_r+0x6e0>
  b567ac:	d8c00417 	ldw	r3,16(sp)
  b567b0:	d9800517 	ldw	r6,20(sp)
  b567b4:	00800c04 	movi	r2,48
  b567b8:	18c00044 	addi	r3,r3,1
  b567bc:	d8c00415 	stw	r3,16(sp)
  b567c0:	30800005 	stb	r2,0(r6)
  b567c4:	20800003 	ldbu	r2,0(r4)
  b567c8:	d8c00417 	ldw	r3,16(sp)
  b567cc:	27000044 	addi	fp,r4,1
  b567d0:	10800044 	addi	r2,r2,1
  b567d4:	d8c00d15 	stw	r3,52(sp)
  b567d8:	20800005 	stb	r2,0(r4)
  b567dc:	d9001617 	ldw	r4,88(sp)
  b567e0:	d9400717 	ldw	r5,28(sp)
  b567e4:	0b592480 	call	b59248 <_Bfree>
  b567e8:	e0000005 	stb	zero,0(fp)
  b567ec:	d9800d17 	ldw	r6,52(sp)
  b567f0:	d8c02717 	ldw	r3,156(sp)
  b567f4:	d9002917 	ldw	r4,164(sp)
  b567f8:	30800044 	addi	r2,r6,1
  b567fc:	18800015 	stw	r2,0(r3)
  b56800:	20029c26 	beq	r4,zero,b57274 <_dtoa_r+0x11c0>
  b56804:	d8c00517 	ldw	r3,20(sp)
  b56808:	27000015 	stw	fp,0(r4)
  b5680c:	003e5d06 	br	b56184 <_dtoa_r+0xd0>
  b56810:	d9800d17 	ldw	r6,52(sp)
  b56814:	00c02db4 	movhi	r3,182
  b56818:	18c47b04 	addi	r3,r3,4588
  b5681c:	d9001217 	ldw	r4,72(sp)
  b56820:	300490fa 	slli	r2,r6,3
  b56824:	d9401317 	ldw	r5,76(sp)
  b56828:	10c5883a 	add	r2,r2,r3
  b5682c:	12000017 	ldw	r8,0(r2)
  b56830:	12400117 	ldw	r9,4(r2)
  b56834:	400d883a 	mov	r6,r8
  b56838:	480f883a 	mov	r7,r9
  b5683c:	0b5c0940 	call	b5c094 <__ltdf2>
  b56840:	1000030e 	bge	r2,zero,b56850 <_dtoa_r+0x79c>
  b56844:	d8800d17 	ldw	r2,52(sp)
  b56848:	10bfffc4 	addi	r2,r2,-1
  b5684c:	d8800d15 	stw	r2,52(sp)
  b56850:	d8000c15 	stw	zero,48(sp)
  b56854:	003ea806 	br	b562f8 <_dtoa_r+0x244>
  b56858:	d9000b17 	ldw	r4,44(sp)
  b5685c:	202cc03a 	cmpne	r22,r4,zero
  b56860:	b000c71e 	bne	r22,zero,b56b80 <_dtoa_r+0xacc>
  b56864:	dc001117 	ldw	r16,68(sp)
  b56868:	dc801017 	ldw	r18,64(sp)
  b5686c:	0027883a 	mov	r19,zero
  b56870:	04000b0e 	bge	zero,r16,b568a0 <_dtoa_r+0x7ec>
  b56874:	d8c00a17 	ldw	r3,40(sp)
  b56878:	00c0090e 	bge	zero,r3,b568a0 <_dtoa_r+0x7ec>
  b5687c:	8005883a 	mov	r2,r16
  b56880:	1c011316 	blt	r3,r16,b56cd0 <_dtoa_r+0xc1c>
  b56884:	d9000a17 	ldw	r4,40(sp)
  b56888:	d9801117 	ldw	r6,68(sp)
  b5688c:	80a1c83a 	sub	r16,r16,r2
  b56890:	2089c83a 	sub	r4,r4,r2
  b56894:	308dc83a 	sub	r6,r6,r2
  b56898:	d9000a15 	stw	r4,40(sp)
  b5689c:	d9801115 	stw	r6,68(sp)
  b568a0:	d8801017 	ldw	r2,64(sp)
  b568a4:	0080150e 	bge	zero,r2,b568fc <_dtoa_r+0x848>
  b568a8:	d8c00b17 	ldw	r3,44(sp)
  b568ac:	1805003a 	cmpeq	r2,r3,zero
  b568b0:	1001c91e 	bne	r2,zero,b56fd8 <_dtoa_r+0xf24>
  b568b4:	04800e0e 	bge	zero,r18,b568f0 <_dtoa_r+0x83c>
  b568b8:	d9001617 	ldw	r4,88(sp)
  b568bc:	980b883a 	mov	r5,r19
  b568c0:	900d883a 	mov	r6,r18
  b568c4:	0b59ffc0 	call	b59ffc <__pow5mult>
  b568c8:	d9001617 	ldw	r4,88(sp)
  b568cc:	d9800717 	ldw	r6,28(sp)
  b568d0:	100b883a 	mov	r5,r2
  b568d4:	1027883a 	mov	r19,r2
  b568d8:	0b59cd80 	call	b59cd8 <__multiply>
  b568dc:	d9001617 	ldw	r4,88(sp)
  b568e0:	d9400717 	ldw	r5,28(sp)
  b568e4:	1023883a 	mov	r17,r2
  b568e8:	0b592480 	call	b59248 <_Bfree>
  b568ec:	dc400715 	stw	r17,28(sp)
  b568f0:	d9001017 	ldw	r4,64(sp)
  b568f4:	248dc83a 	sub	r6,r4,r18
  b568f8:	30010e1e 	bne	r6,zero,b56d34 <_dtoa_r+0xc80>
  b568fc:	d9001617 	ldw	r4,88(sp)
  b56900:	04400044 	movi	r17,1
  b56904:	880b883a 	mov	r5,r17
  b56908:	0b59ec00 	call	b59ec0 <__i2b>
  b5690c:	d9800917 	ldw	r6,36(sp)
  b56910:	1025883a 	mov	r18,r2
  b56914:	0180040e 	bge	zero,r6,b56928 <_dtoa_r+0x874>
  b56918:	d9001617 	ldw	r4,88(sp)
  b5691c:	100b883a 	mov	r5,r2
  b56920:	0b59ffc0 	call	b59ffc <__pow5mult>
  b56924:	1025883a 	mov	r18,r2
  b56928:	d8801717 	ldw	r2,92(sp)
  b5692c:	8880f30e 	bge	r17,r2,b56cfc <_dtoa_r+0xc48>
  b56930:	0023883a 	mov	r17,zero
  b56934:	d9800917 	ldw	r6,36(sp)
  b56938:	30019e1e 	bne	r6,zero,b56fb4 <_dtoa_r+0xf00>
  b5693c:	00c00044 	movi	r3,1
  b56940:	d9000a17 	ldw	r4,40(sp)
  b56944:	20c5883a 	add	r2,r4,r3
  b56948:	10c007cc 	andi	r3,r2,31
  b5694c:	1800841e 	bne	r3,zero,b56b60 <_dtoa_r+0xaac>
  b56950:	00800704 	movi	r2,28
  b56954:	d9000a17 	ldw	r4,40(sp)
  b56958:	d9801117 	ldw	r6,68(sp)
  b5695c:	80a1883a 	add	r16,r16,r2
  b56960:	2089883a 	add	r4,r4,r2
  b56964:	308d883a 	add	r6,r6,r2
  b56968:	d9000a15 	stw	r4,40(sp)
  b5696c:	d9801115 	stw	r6,68(sp)
  b56970:	d8801117 	ldw	r2,68(sp)
  b56974:	0080050e 	bge	zero,r2,b5698c <_dtoa_r+0x8d8>
  b56978:	d9400717 	ldw	r5,28(sp)
  b5697c:	d9001617 	ldw	r4,88(sp)
  b56980:	100d883a 	mov	r6,r2
  b56984:	0b59b8c0 	call	b59b8c <__lshift>
  b56988:	d8800715 	stw	r2,28(sp)
  b5698c:	d8c00a17 	ldw	r3,40(sp)
  b56990:	00c0050e 	bge	zero,r3,b569a8 <_dtoa_r+0x8f4>
  b56994:	d9001617 	ldw	r4,88(sp)
  b56998:	900b883a 	mov	r5,r18
  b5699c:	180d883a 	mov	r6,r3
  b569a0:	0b59b8c0 	call	b59b8c <__lshift>
  b569a4:	1025883a 	mov	r18,r2
  b569a8:	d9000c17 	ldw	r4,48(sp)
  b569ac:	2005003a 	cmpeq	r2,r4,zero
  b569b0:	10016f26 	beq	r2,zero,b56f70 <_dtoa_r+0xebc>
  b569b4:	d9000f17 	ldw	r4,60(sp)
  b569b8:	0102170e 	bge	zero,r4,b57218 <_dtoa_r+0x1164>
  b569bc:	d9800b17 	ldw	r6,44(sp)
  b569c0:	3005003a 	cmpeq	r2,r6,zero
  b569c4:	1000881e 	bne	r2,zero,b56be8 <_dtoa_r+0xb34>
  b569c8:	0400050e 	bge	zero,r16,b569e0 <_dtoa_r+0x92c>
  b569cc:	d9001617 	ldw	r4,88(sp)
  b569d0:	980b883a 	mov	r5,r19
  b569d4:	800d883a 	mov	r6,r16
  b569d8:	0b59b8c0 	call	b59b8c <__lshift>
  b569dc:	1027883a 	mov	r19,r2
  b569e0:	8804c03a 	cmpne	r2,r17,zero
  b569e4:	1002541e 	bne	r2,zero,b57338 <_dtoa_r+0x1284>
  b569e8:	980b883a 	mov	r5,r19
  b569ec:	dd800517 	ldw	r22,20(sp)
  b569f0:	dcc00615 	stw	r19,24(sp)
  b569f4:	a700004c 	andi	fp,r20,1
  b569f8:	2827883a 	mov	r19,r5
  b569fc:	d9000717 	ldw	r4,28(sp)
  b56a00:	900b883a 	mov	r5,r18
  b56a04:	0b55e9c0 	call	b55e9c <quorem>
  b56a08:	d9000717 	ldw	r4,28(sp)
  b56a0c:	d9400617 	ldw	r5,24(sp)
  b56a10:	1023883a 	mov	r17,r2
  b56a14:	8dc00c04 	addi	r23,r17,48
  b56a18:	0b593a40 	call	b593a4 <__mcmp>
  b56a1c:	d9001617 	ldw	r4,88(sp)
  b56a20:	900b883a 	mov	r5,r18
  b56a24:	980d883a 	mov	r6,r19
  b56a28:	1029883a 	mov	r20,r2
  b56a2c:	0b59a000 	call	b59a00 <__mdiff>
  b56a30:	102b883a 	mov	r21,r2
  b56a34:	10800317 	ldw	r2,12(r2)
  b56a38:	1001281e 	bne	r2,zero,b56edc <_dtoa_r+0xe28>
  b56a3c:	d9000717 	ldw	r4,28(sp)
  b56a40:	a80b883a 	mov	r5,r21
  b56a44:	0b593a40 	call	b593a4 <__mcmp>
  b56a48:	d9001617 	ldw	r4,88(sp)
  b56a4c:	1021883a 	mov	r16,r2
  b56a50:	a80b883a 	mov	r5,r21
  b56a54:	0b592480 	call	b59248 <_Bfree>
  b56a58:	8000041e 	bne	r16,zero,b56a6c <_dtoa_r+0x9b8>
  b56a5c:	d8801717 	ldw	r2,92(sp)
  b56a60:	1000021e 	bne	r2,zero,b56a6c <_dtoa_r+0x9b8>
  b56a64:	e004c03a 	cmpne	r2,fp,zero
  b56a68:	10011726 	beq	r2,zero,b56ec8 <_dtoa_r+0xe14>
  b56a6c:	a0010616 	blt	r20,zero,b56e88 <_dtoa_r+0xdd4>
  b56a70:	a000041e 	bne	r20,zero,b56a84 <_dtoa_r+0x9d0>
  b56a74:	d8c01717 	ldw	r3,92(sp)
  b56a78:	1800021e 	bne	r3,zero,b56a84 <_dtoa_r+0x9d0>
  b56a7c:	e004c03a 	cmpne	r2,fp,zero
  b56a80:	10010126 	beq	r2,zero,b56e88 <_dtoa_r+0xdd4>
  b56a84:	04023d16 	blt	zero,r16,b5737c <_dtoa_r+0x12c8>
  b56a88:	b5c00005 	stb	r23,0(r22)
  b56a8c:	d9800517 	ldw	r6,20(sp)
  b56a90:	d9000f17 	ldw	r4,60(sp)
  b56a94:	b5800044 	addi	r22,r22,1
  b56a98:	3105883a 	add	r2,r6,r4
  b56a9c:	b0806526 	beq	r22,r2,b56c34 <_dtoa_r+0xb80>
  b56aa0:	d9400717 	ldw	r5,28(sp)
  b56aa4:	d9001617 	ldw	r4,88(sp)
  b56aa8:	01800284 	movi	r6,10
  b56aac:	000f883a 	mov	r7,zero
  b56ab0:	0b59efc0 	call	b59efc <__multadd>
  b56ab4:	d8800715 	stw	r2,28(sp)
  b56ab8:	d8800617 	ldw	r2,24(sp)
  b56abc:	14c10c26 	beq	r2,r19,b56ef0 <_dtoa_r+0xe3c>
  b56ac0:	d9400617 	ldw	r5,24(sp)
  b56ac4:	d9001617 	ldw	r4,88(sp)
  b56ac8:	01800284 	movi	r6,10
  b56acc:	000f883a 	mov	r7,zero
  b56ad0:	0b59efc0 	call	b59efc <__multadd>
  b56ad4:	d9001617 	ldw	r4,88(sp)
  b56ad8:	980b883a 	mov	r5,r19
  b56adc:	01800284 	movi	r6,10
  b56ae0:	000f883a 	mov	r7,zero
  b56ae4:	d8800615 	stw	r2,24(sp)
  b56ae8:	0b59efc0 	call	b59efc <__multadd>
  b56aec:	1027883a 	mov	r19,r2
  b56af0:	003fc206 	br	b569fc <_dtoa_r+0x948>
  b56af4:	2445c83a 	sub	r2,r4,r17
  b56af8:	a088983a 	sll	r4,r20,r2
  b56afc:	003e4b06 	br	b5642c <_dtoa_r+0x378>
  b56b00:	01bfffc4 	movi	r6,-1
  b56b04:	00800044 	movi	r2,1
  b56b08:	d9800e15 	stw	r6,56(sp)
  b56b0c:	d9800f15 	stw	r6,60(sp)
  b56b10:	d8800b15 	stw	r2,44(sp)
  b56b14:	d8c01617 	ldw	r3,88(sp)
  b56b18:	008005c4 	movi	r2,23
  b56b1c:	18001115 	stw	zero,68(r3)
  b56b20:	1580082e 	bgeu	r2,r22,b56b44 <_dtoa_r+0xa90>
  b56b24:	00c00104 	movi	r3,4
  b56b28:	0009883a 	mov	r4,zero
  b56b2c:	18c7883a 	add	r3,r3,r3
  b56b30:	18800504 	addi	r2,r3,20
  b56b34:	21000044 	addi	r4,r4,1
  b56b38:	b0bffc2e 	bgeu	r22,r2,b56b2c <_dtoa_r+0xa78>
  b56b3c:	d9801617 	ldw	r6,88(sp)
  b56b40:	31001115 	stw	r4,68(r6)
  b56b44:	dc000f17 	ldw	r16,60(sp)
  b56b48:	003e4b06 	br	b56478 <_dtoa_r+0x3c4>
  b56b4c:	d9801717 	ldw	r6,92(sp)
  b56b50:	0023883a 	mov	r17,zero
  b56b54:	31bfff04 	addi	r6,r6,-4
  b56b58:	d9801715 	stw	r6,92(sp)
  b56b5c:	003df806 	br	b56340 <_dtoa_r+0x28c>
  b56b60:	00800804 	movi	r2,32
  b56b64:	10c9c83a 	sub	r4,r2,r3
  b56b68:	00c00104 	movi	r3,4
  b56b6c:	19005a16 	blt	r3,r4,b56cd8 <_dtoa_r+0xc24>
  b56b70:	008000c4 	movi	r2,3
  b56b74:	113f7e16 	blt	r2,r4,b56970 <_dtoa_r+0x8bc>
  b56b78:	20800704 	addi	r2,r4,28
  b56b7c:	003f7506 	br	b56954 <_dtoa_r+0x8a0>
  b56b80:	d9801717 	ldw	r6,92(sp)
  b56b84:	00800044 	movi	r2,1
  b56b88:	1180a10e 	bge	r2,r6,b56e10 <_dtoa_r+0xd5c>
  b56b8c:	d9800f17 	ldw	r6,60(sp)
  b56b90:	d8c01017 	ldw	r3,64(sp)
  b56b94:	30bfffc4 	addi	r2,r6,-1
  b56b98:	1881c616 	blt	r3,r2,b572b4 <_dtoa_r+0x1200>
  b56b9c:	18a5c83a 	sub	r18,r3,r2
  b56ba0:	d8800f17 	ldw	r2,60(sp)
  b56ba4:	10026216 	blt	r2,zero,b57530 <_dtoa_r+0x147c>
  b56ba8:	dc001117 	ldw	r16,68(sp)
  b56bac:	1007883a 	mov	r3,r2
  b56bb0:	d9800a17 	ldw	r6,40(sp)
  b56bb4:	d8801117 	ldw	r2,68(sp)
  b56bb8:	d9001617 	ldw	r4,88(sp)
  b56bbc:	30cd883a 	add	r6,r6,r3
  b56bc0:	10c5883a 	add	r2,r2,r3
  b56bc4:	01400044 	movi	r5,1
  b56bc8:	d9800a15 	stw	r6,40(sp)
  b56bcc:	d8801115 	stw	r2,68(sp)
  b56bd0:	0b59ec00 	call	b59ec0 <__i2b>
  b56bd4:	1027883a 	mov	r19,r2
  b56bd8:	003f2506 	br	b56870 <_dtoa_r+0x7bc>
  b56bdc:	00c02db4 	movhi	r3,182
  b56be0:	18c3ea04 	addi	r3,r3,4008
  b56be4:	003d6706 	br	b56184 <_dtoa_r+0xd0>
  b56be8:	dd800517 	ldw	r22,20(sp)
  b56bec:	04000044 	movi	r16,1
  b56bf0:	00000706 	br	b56c10 <_dtoa_r+0xb5c>
  b56bf4:	d9400717 	ldw	r5,28(sp)
  b56bf8:	d9001617 	ldw	r4,88(sp)
  b56bfc:	01800284 	movi	r6,10
  b56c00:	000f883a 	mov	r7,zero
  b56c04:	0b59efc0 	call	b59efc <__multadd>
  b56c08:	d8800715 	stw	r2,28(sp)
  b56c0c:	84000044 	addi	r16,r16,1
  b56c10:	d9000717 	ldw	r4,28(sp)
  b56c14:	900b883a 	mov	r5,r18
  b56c18:	0b55e9c0 	call	b55e9c <quorem>
  b56c1c:	15c00c04 	addi	r23,r2,48
  b56c20:	b5c00005 	stb	r23,0(r22)
  b56c24:	d8c00f17 	ldw	r3,60(sp)
  b56c28:	b5800044 	addi	r22,r22,1
  b56c2c:	80fff116 	blt	r16,r3,b56bf4 <_dtoa_r+0xb40>
  b56c30:	d8000615 	stw	zero,24(sp)
  b56c34:	d9400717 	ldw	r5,28(sp)
  b56c38:	d9001617 	ldw	r4,88(sp)
  b56c3c:	01800044 	movi	r6,1
  b56c40:	0b59b8c0 	call	b59b8c <__lshift>
  b56c44:	1009883a 	mov	r4,r2
  b56c48:	900b883a 	mov	r5,r18
  b56c4c:	d8800715 	stw	r2,28(sp)
  b56c50:	0b593a40 	call	b593a4 <__mcmp>
  b56c54:	00803c0e 	bge	zero,r2,b56d48 <_dtoa_r+0xc94>
  b56c58:	b009883a 	mov	r4,r22
  b56c5c:	213fffc4 	addi	r4,r4,-1
  b56c60:	21400003 	ldbu	r5,0(r4)
  b56c64:	00800e44 	movi	r2,57
  b56c68:	28c03fcc 	andi	r3,r5,255
  b56c6c:	18c0201c 	xori	r3,r3,128
  b56c70:	18ffe004 	addi	r3,r3,-128
  b56c74:	1881981e 	bne	r3,r2,b572d8 <_dtoa_r+0x1224>
  b56c78:	d9800517 	ldw	r6,20(sp)
  b56c7c:	21bff71e 	bne	r4,r6,b56c5c <_dtoa_r+0xba8>
  b56c80:	d8800d17 	ldw	r2,52(sp)
  b56c84:	37000044 	addi	fp,r6,1
  b56c88:	10800044 	addi	r2,r2,1
  b56c8c:	d8800d15 	stw	r2,52(sp)
  b56c90:	00800c44 	movi	r2,49
  b56c94:	30800005 	stb	r2,0(r6)
  b56c98:	d9001617 	ldw	r4,88(sp)
  b56c9c:	900b883a 	mov	r5,r18
  b56ca0:	0b592480 	call	b59248 <_Bfree>
  b56ca4:	983ecd26 	beq	r19,zero,b567dc <_dtoa_r+0x728>
  b56ca8:	d8c00617 	ldw	r3,24(sp)
  b56cac:	18000426 	beq	r3,zero,b56cc0 <_dtoa_r+0xc0c>
  b56cb0:	1cc00326 	beq	r3,r19,b56cc0 <_dtoa_r+0xc0c>
  b56cb4:	d9001617 	ldw	r4,88(sp)
  b56cb8:	180b883a 	mov	r5,r3
  b56cbc:	0b592480 	call	b59248 <_Bfree>
  b56cc0:	d9001617 	ldw	r4,88(sp)
  b56cc4:	980b883a 	mov	r5,r19
  b56cc8:	0b592480 	call	b59248 <_Bfree>
  b56ccc:	003ec306 	br	b567dc <_dtoa_r+0x728>
  b56cd0:	1805883a 	mov	r2,r3
  b56cd4:	003eeb06 	br	b56884 <_dtoa_r+0x7d0>
  b56cd8:	d9800a17 	ldw	r6,40(sp)
  b56cdc:	d8c01117 	ldw	r3,68(sp)
  b56ce0:	20bfff04 	addi	r2,r4,-4
  b56ce4:	308d883a 	add	r6,r6,r2
  b56ce8:	1887883a 	add	r3,r3,r2
  b56cec:	80a1883a 	add	r16,r16,r2
  b56cf0:	d9800a15 	stw	r6,40(sp)
  b56cf4:	d8c01115 	stw	r3,68(sp)
  b56cf8:	003f1d06 	br	b56970 <_dtoa_r+0x8bc>
  b56cfc:	a03f0c1e 	bne	r20,zero,b56930 <_dtoa_r+0x87c>
  b56d00:	00800434 	movhi	r2,16
  b56d04:	10bfffc4 	addi	r2,r2,-1
  b56d08:	a884703a 	and	r2,r21,r2
  b56d0c:	103f081e 	bne	r2,zero,b56930 <_dtoa_r+0x87c>
  b56d10:	a89ffc2c 	andhi	r2,r21,32752
  b56d14:	103f0626 	beq	r2,zero,b56930 <_dtoa_r+0x87c>
  b56d18:	d8c01117 	ldw	r3,68(sp)
  b56d1c:	d9000a17 	ldw	r4,40(sp)
  b56d20:	18c00044 	addi	r3,r3,1
  b56d24:	21000044 	addi	r4,r4,1
  b56d28:	d8c01115 	stw	r3,68(sp)
  b56d2c:	d9000a15 	stw	r4,40(sp)
  b56d30:	003f0006 	br	b56934 <_dtoa_r+0x880>
  b56d34:	d9400717 	ldw	r5,28(sp)
  b56d38:	d9001617 	ldw	r4,88(sp)
  b56d3c:	0b59ffc0 	call	b59ffc <__pow5mult>
  b56d40:	d8800715 	stw	r2,28(sp)
  b56d44:	003eed06 	br	b568fc <_dtoa_r+0x848>
  b56d48:	1000021e 	bne	r2,zero,b56d54 <_dtoa_r+0xca0>
  b56d4c:	b880004c 	andi	r2,r23,1
  b56d50:	103fc11e 	bne	r2,zero,b56c58 <_dtoa_r+0xba4>
  b56d54:	b5bfffc4 	addi	r22,r22,-1
  b56d58:	b0c00007 	ldb	r3,0(r22)
  b56d5c:	00800c04 	movi	r2,48
  b56d60:	18bffc26 	beq	r3,r2,b56d54 <_dtoa_r+0xca0>
  b56d64:	b7000044 	addi	fp,r22,1
  b56d68:	003fcb06 	br	b56c98 <_dtoa_r+0xbe4>
  b56d6c:	d9800d17 	ldw	r6,52(sp)
  b56d70:	018fc83a 	sub	r7,zero,r6
  b56d74:	3801f726 	beq	r7,zero,b57554 <_dtoa_r+0x14a0>
  b56d78:	398003cc 	andi	r6,r7,15
  b56d7c:	300c90fa 	slli	r6,r6,3
  b56d80:	01402db4 	movhi	r5,182
  b56d84:	29447b04 	addi	r5,r5,4588
  b56d88:	d9001217 	ldw	r4,72(sp)
  b56d8c:	314d883a 	add	r6,r6,r5
  b56d90:	30c00117 	ldw	r3,4(r6)
  b56d94:	30800017 	ldw	r2,0(r6)
  b56d98:	d9401317 	ldw	r5,76(sp)
  b56d9c:	3821d13a 	srai	r16,r7,4
  b56da0:	100d883a 	mov	r6,r2
  b56da4:	180f883a 	mov	r7,r3
  b56da8:	0b5bb380 	call	b5bb38 <__muldf3>
  b56dac:	1011883a 	mov	r8,r2
  b56db0:	1813883a 	mov	r9,r3
  b56db4:	1029883a 	mov	r20,r2
  b56db8:	182b883a 	mov	r21,r3
  b56dbc:	8001e526 	beq	r16,zero,b57554 <_dtoa_r+0x14a0>
  b56dc0:	05800084 	movi	r22,2
  b56dc4:	04402db4 	movhi	r17,182
  b56dc8:	8c44ad04 	addi	r17,r17,4788
  b56dcc:	8080004c 	andi	r2,r16,1
  b56dd0:	1005003a 	cmpeq	r2,r2,zero
  b56dd4:	1000081e 	bne	r2,zero,b56df8 <_dtoa_r+0xd44>
  b56dd8:	89800017 	ldw	r6,0(r17)
  b56ddc:	89c00117 	ldw	r7,4(r17)
  b56de0:	480b883a 	mov	r5,r9
  b56de4:	4009883a 	mov	r4,r8
  b56de8:	0b5bb380 	call	b5bb38 <__muldf3>
  b56dec:	1011883a 	mov	r8,r2
  b56df0:	b5800044 	addi	r22,r22,1
  b56df4:	1813883a 	mov	r9,r3
  b56df8:	8021d07a 	srai	r16,r16,1
  b56dfc:	8c400204 	addi	r17,r17,8
  b56e00:	803ff21e 	bne	r16,zero,b56dcc <_dtoa_r+0xd18>
  b56e04:	4029883a 	mov	r20,r8
  b56e08:	482b883a 	mov	r21,r9
  b56e0c:	003dca06 	br	b56538 <_dtoa_r+0x484>
  b56e10:	d9000817 	ldw	r4,32(sp)
  b56e14:	2005003a 	cmpeq	r2,r4,zero
  b56e18:	1001f61e 	bne	r2,zero,b575f4 <_dtoa_r+0x1540>
  b56e1c:	dc001117 	ldw	r16,68(sp)
  b56e20:	dc801017 	ldw	r18,64(sp)
  b56e24:	18c10cc4 	addi	r3,r3,1075
  b56e28:	003f6106 	br	b56bb0 <_dtoa_r+0xafc>
  b56e2c:	d8000b15 	stw	zero,44(sp)
  b56e30:	d9802617 	ldw	r6,152(sp)
  b56e34:	d8c00d17 	ldw	r3,52(sp)
  b56e38:	30800044 	addi	r2,r6,1
  b56e3c:	18ad883a 	add	r22,r3,r2
  b56e40:	b13fffc4 	addi	r4,r22,-1
  b56e44:	d9000e15 	stw	r4,56(sp)
  b56e48:	0581f60e 	bge	zero,r22,b57624 <_dtoa_r+0x1570>
  b56e4c:	dd800f15 	stw	r22,60(sp)
  b56e50:	003f3006 	br	b56b14 <_dtoa_r+0xa60>
  b56e54:	d8000b15 	stw	zero,44(sp)
  b56e58:	d9002617 	ldw	r4,152(sp)
  b56e5c:	0101eb0e 	bge	zero,r4,b5760c <_dtoa_r+0x1558>
  b56e60:	202d883a 	mov	r22,r4
  b56e64:	d9000e15 	stw	r4,56(sp)
  b56e68:	d9000f15 	stw	r4,60(sp)
  b56e6c:	003f2906 	br	b56b14 <_dtoa_r+0xa60>
  b56e70:	01800044 	movi	r6,1
  b56e74:	d9800b15 	stw	r6,44(sp)
  b56e78:	003ff706 	br	b56e58 <_dtoa_r+0xda4>
  b56e7c:	01000044 	movi	r4,1
  b56e80:	d9000b15 	stw	r4,44(sp)
  b56e84:	003fea06 	br	b56e30 <_dtoa_r+0xd7c>
  b56e88:	04000c0e 	bge	zero,r16,b56ebc <_dtoa_r+0xe08>
  b56e8c:	d9400717 	ldw	r5,28(sp)
  b56e90:	d9001617 	ldw	r4,88(sp)
  b56e94:	01800044 	movi	r6,1
  b56e98:	0b59b8c0 	call	b59b8c <__lshift>
  b56e9c:	1009883a 	mov	r4,r2
  b56ea0:	900b883a 	mov	r5,r18
  b56ea4:	d8800715 	stw	r2,28(sp)
  b56ea8:	0b593a40 	call	b593a4 <__mcmp>
  b56eac:	0081e00e 	bge	zero,r2,b57630 <_dtoa_r+0x157c>
  b56eb0:	bdc00044 	addi	r23,r23,1
  b56eb4:	00800e84 	movi	r2,58
  b56eb8:	b881a226 	beq	r23,r2,b57544 <_dtoa_r+0x1490>
  b56ebc:	b7000044 	addi	fp,r22,1
  b56ec0:	b5c00005 	stb	r23,0(r22)
  b56ec4:	003f7406 	br	b56c98 <_dtoa_r+0xbe4>
  b56ec8:	00800e44 	movi	r2,57
  b56ecc:	b8819d26 	beq	r23,r2,b57544 <_dtoa_r+0x1490>
  b56ed0:	053ffa0e 	bge	zero,r20,b56ebc <_dtoa_r+0xe08>
  b56ed4:	8dc00c44 	addi	r23,r17,49
  b56ed8:	003ff806 	br	b56ebc <_dtoa_r+0xe08>
  b56edc:	d9001617 	ldw	r4,88(sp)
  b56ee0:	a80b883a 	mov	r5,r21
  b56ee4:	04000044 	movi	r16,1
  b56ee8:	0b592480 	call	b59248 <_Bfree>
  b56eec:	003edf06 	br	b56a6c <_dtoa_r+0x9b8>
  b56ef0:	d9001617 	ldw	r4,88(sp)
  b56ef4:	980b883a 	mov	r5,r19
  b56ef8:	01800284 	movi	r6,10
  b56efc:	000f883a 	mov	r7,zero
  b56f00:	0b59efc0 	call	b59efc <__multadd>
  b56f04:	1027883a 	mov	r19,r2
  b56f08:	d8800615 	stw	r2,24(sp)
  b56f0c:	003ebb06 	br	b569fc <_dtoa_r+0x948>
  b56f10:	d9801117 	ldw	r6,68(sp)
  b56f14:	d8800d17 	ldw	r2,52(sp)
  b56f18:	d8000915 	stw	zero,36(sp)
  b56f1c:	308dc83a 	sub	r6,r6,r2
  b56f20:	0087c83a 	sub	r3,zero,r2
  b56f24:	d9801115 	stw	r6,68(sp)
  b56f28:	d8c01015 	stw	r3,64(sp)
  b56f2c:	003cfe06 	br	b56328 <_dtoa_r+0x274>
  b56f30:	018dc83a 	sub	r6,zero,r6
  b56f34:	d9801115 	stw	r6,68(sp)
  b56f38:	d8000a15 	stw	zero,40(sp)
  b56f3c:	003cf306 	br	b5630c <_dtoa_r+0x258>
  b56f40:	d9000d17 	ldw	r4,52(sp)
  b56f44:	0b5c11c0 	call	b5c11c <__floatsidf>
  b56f48:	880b883a 	mov	r5,r17
  b56f4c:	8009883a 	mov	r4,r16
  b56f50:	180f883a 	mov	r7,r3
  b56f54:	100d883a 	mov	r6,r2
  b56f58:	0b531580 	call	b53158 <__nedf2>
  b56f5c:	103ce126 	beq	r2,zero,b562e4 <_dtoa_r+0x230>
  b56f60:	d9800d17 	ldw	r6,52(sp)
  b56f64:	31bfffc4 	addi	r6,r6,-1
  b56f68:	d9800d15 	stw	r6,52(sp)
  b56f6c:	003cdd06 	br	b562e4 <_dtoa_r+0x230>
  b56f70:	d9000717 	ldw	r4,28(sp)
  b56f74:	900b883a 	mov	r5,r18
  b56f78:	0b593a40 	call	b593a4 <__mcmp>
  b56f7c:	103e8d0e 	bge	r2,zero,b569b4 <_dtoa_r+0x900>
  b56f80:	d9400717 	ldw	r5,28(sp)
  b56f84:	d9001617 	ldw	r4,88(sp)
  b56f88:	01800284 	movi	r6,10
  b56f8c:	000f883a 	mov	r7,zero
  b56f90:	0b59efc0 	call	b59efc <__multadd>
  b56f94:	d9800d17 	ldw	r6,52(sp)
  b56f98:	d8800715 	stw	r2,28(sp)
  b56f9c:	31bfffc4 	addi	r6,r6,-1
  b56fa0:	d9800d15 	stw	r6,52(sp)
  b56fa4:	b001a71e 	bne	r22,zero,b57644 <_dtoa_r+0x1590>
  b56fa8:	d8800e17 	ldw	r2,56(sp)
  b56fac:	d8800f15 	stw	r2,60(sp)
  b56fb0:	003e8006 	br	b569b4 <_dtoa_r+0x900>
  b56fb4:	90800417 	ldw	r2,16(r18)
  b56fb8:	1085883a 	add	r2,r2,r2
  b56fbc:	1085883a 	add	r2,r2,r2
  b56fc0:	1485883a 	add	r2,r2,r18
  b56fc4:	11000417 	ldw	r4,16(r2)
  b56fc8:	0b592700 	call	b59270 <__hi0bits>
  b56fcc:	00c00804 	movi	r3,32
  b56fd0:	1887c83a 	sub	r3,r3,r2
  b56fd4:	003e5a06 	br	b56940 <_dtoa_r+0x88c>
  b56fd8:	d9400717 	ldw	r5,28(sp)
  b56fdc:	d9801017 	ldw	r6,64(sp)
  b56fe0:	d9001617 	ldw	r4,88(sp)
  b56fe4:	0b59ffc0 	call	b59ffc <__pow5mult>
  b56fe8:	d8800715 	stw	r2,28(sp)
  b56fec:	003e4306 	br	b568fc <_dtoa_r+0x848>
  b56ff0:	d9800f17 	ldw	r6,60(sp)
  b56ff4:	d8800d17 	ldw	r2,52(sp)
  b56ff8:	d9800315 	stw	r6,12(sp)
  b56ffc:	d8800415 	stw	r2,16(sp)
  b57000:	d8c00b17 	ldw	r3,44(sp)
  b57004:	1805003a 	cmpeq	r2,r3,zero
  b57008:	1000e21e 	bne	r2,zero,b57394 <_dtoa_r+0x12e0>
  b5700c:	d9000317 	ldw	r4,12(sp)
  b57010:	0005883a 	mov	r2,zero
  b57014:	00cff834 	movhi	r3,16352
  b57018:	200c90fa 	slli	r6,r4,3
  b5701c:	01002db4 	movhi	r4,182
  b57020:	21047b04 	addi	r4,r4,4588
  b57024:	180b883a 	mov	r5,r3
  b57028:	310d883a 	add	r6,r6,r4
  b5702c:	327fff17 	ldw	r9,-4(r6)
  b57030:	323ffe17 	ldw	r8,-8(r6)
  b57034:	1009883a 	mov	r4,r2
  b57038:	480f883a 	mov	r7,r9
  b5703c:	400d883a 	mov	r6,r8
  b57040:	0b52f000 	call	b52f00 <__divdf3>
  b57044:	180b883a 	mov	r5,r3
  b57048:	b00d883a 	mov	r6,r22
  b5704c:	b80f883a 	mov	r7,r23
  b57050:	1009883a 	mov	r4,r2
  b57054:	0b52e0c0 	call	b52e0c <__subdf3>
  b57058:	a80b883a 	mov	r5,r21
  b5705c:	a009883a 	mov	r4,r20
  b57060:	d8c01915 	stw	r3,100(sp)
  b57064:	d8801815 	stw	r2,96(sp)
  b57068:	0b5c2140 	call	b5c214 <__fixdfsi>
  b5706c:	1009883a 	mov	r4,r2
  b57070:	1027883a 	mov	r19,r2
  b57074:	0b5c11c0 	call	b5c11c <__floatsidf>
  b57078:	a80b883a 	mov	r5,r21
  b5707c:	a009883a 	mov	r4,r20
  b57080:	180f883a 	mov	r7,r3
  b57084:	100d883a 	mov	r6,r2
  b57088:	0b52e0c0 	call	b52e0c <__subdf3>
  b5708c:	d9801817 	ldw	r6,96(sp)
  b57090:	1823883a 	mov	r17,r3
  b57094:	d8801415 	stw	r2,80(sp)
  b57098:	302d883a 	mov	r22,r6
  b5709c:	d9800517 	ldw	r6,20(sp)
  b570a0:	9cc00c04 	addi	r19,r19,48
  b570a4:	dc401515 	stw	r17,84(sp)
  b570a8:	d8c01917 	ldw	r3,100(sp)
  b570ac:	34c00005 	stb	r19,0(r6)
  b570b0:	d8800517 	ldw	r2,20(sp)
  b570b4:	d9401917 	ldw	r5,100(sp)
  b570b8:	d9801417 	ldw	r6,80(sp)
  b570bc:	b009883a 	mov	r4,r22
  b570c0:	880f883a 	mov	r7,r17
  b570c4:	182f883a 	mov	r23,r3
  b570c8:	17000044 	addi	fp,r2,1
  b570cc:	0b5bf840 	call	b5bf84 <__gtdf2>
  b570d0:	00804e16 	blt	zero,r2,b5720c <_dtoa_r+0x1158>
  b570d4:	d9801417 	ldw	r6,80(sp)
  b570d8:	0005883a 	mov	r2,zero
  b570dc:	00cffc34 	movhi	r3,16368
  b570e0:	180b883a 	mov	r5,r3
  b570e4:	880f883a 	mov	r7,r17
  b570e8:	1009883a 	mov	r4,r2
  b570ec:	0b52e0c0 	call	b52e0c <__subdf3>
  b570f0:	d9401917 	ldw	r5,100(sp)
  b570f4:	180f883a 	mov	r7,r3
  b570f8:	b009883a 	mov	r4,r22
  b570fc:	100d883a 	mov	r6,r2
  b57100:	0b5bf840 	call	b5bf84 <__gtdf2>
  b57104:	00bda216 	blt	zero,r2,b56790 <_dtoa_r+0x6dc>
  b57108:	d8c00317 	ldw	r3,12(sp)
  b5710c:	00800044 	movi	r2,1
  b57110:	10c01216 	blt	r2,r3,b5715c <_dtoa_r+0x10a8>
  b57114:	003d4506 	br	b5662c <_dtoa_r+0x578>
  b57118:	d9801417 	ldw	r6,80(sp)
  b5711c:	0005883a 	mov	r2,zero
  b57120:	00cffc34 	movhi	r3,16368
  b57124:	180b883a 	mov	r5,r3
  b57128:	880f883a 	mov	r7,r17
  b5712c:	1009883a 	mov	r4,r2
  b57130:	0b52e0c0 	call	b52e0c <__subdf3>
  b57134:	d9c01b17 	ldw	r7,108(sp)
  b57138:	180b883a 	mov	r5,r3
  b5713c:	1009883a 	mov	r4,r2
  b57140:	b00d883a 	mov	r6,r22
  b57144:	0b5c0940 	call	b5c094 <__ltdf2>
  b57148:	103d9116 	blt	r2,zero,b56790 <_dtoa_r+0x6dc>
  b5714c:	d9800517 	ldw	r6,20(sp)
  b57150:	d9000317 	ldw	r4,12(sp)
  b57154:	3105883a 	add	r2,r6,r4
  b57158:	e0bd3426 	beq	fp,r2,b5662c <_dtoa_r+0x578>
  b5715c:	04500934 	movhi	r17,16420
  b57160:	0021883a 	mov	r16,zero
  b57164:	b80b883a 	mov	r5,r23
  b57168:	b009883a 	mov	r4,r22
  b5716c:	800d883a 	mov	r6,r16
  b57170:	880f883a 	mov	r7,r17
  b57174:	0b5bb380 	call	b5bb38 <__muldf3>
  b57178:	d9401517 	ldw	r5,84(sp)
  b5717c:	d9001417 	ldw	r4,80(sp)
  b57180:	880f883a 	mov	r7,r17
  b57184:	000d883a 	mov	r6,zero
  b57188:	d8801a15 	stw	r2,104(sp)
  b5718c:	d8c01b15 	stw	r3,108(sp)
  b57190:	0b5bb380 	call	b5bb38 <__muldf3>
  b57194:	180b883a 	mov	r5,r3
  b57198:	1009883a 	mov	r4,r2
  b5719c:	1823883a 	mov	r17,r3
  b571a0:	1021883a 	mov	r16,r2
  b571a4:	0b5c2140 	call	b5c214 <__fixdfsi>
  b571a8:	1009883a 	mov	r4,r2
  b571ac:	102b883a 	mov	r21,r2
  b571b0:	0b5c11c0 	call	b5c11c <__floatsidf>
  b571b4:	880b883a 	mov	r5,r17
  b571b8:	8009883a 	mov	r4,r16
  b571bc:	180f883a 	mov	r7,r3
  b571c0:	100d883a 	mov	r6,r2
  b571c4:	0b52e0c0 	call	b52e0c <__subdf3>
  b571c8:	1021883a 	mov	r16,r2
  b571cc:	d9001b17 	ldw	r4,108(sp)
  b571d0:	1823883a 	mov	r17,r3
  b571d4:	dc001415 	stw	r16,80(sp)
  b571d8:	ad400c04 	addi	r21,r21,48
  b571dc:	dc401515 	stw	r17,84(sp)
  b571e0:	d8801a17 	ldw	r2,104(sp)
  b571e4:	e5400005 	stb	r21,0(fp)
  b571e8:	202f883a 	mov	r23,r4
  b571ec:	d9c01b17 	ldw	r7,108(sp)
  b571f0:	d9001417 	ldw	r4,80(sp)
  b571f4:	880b883a 	mov	r5,r17
  b571f8:	100d883a 	mov	r6,r2
  b571fc:	102d883a 	mov	r22,r2
  b57200:	e7000044 	addi	fp,fp,1
  b57204:	0b5c0940 	call	b5c094 <__ltdf2>
  b57208:	103fc30e 	bge	r2,zero,b57118 <_dtoa_r+0x1064>
  b5720c:	d9000417 	ldw	r4,16(sp)
  b57210:	d9000d15 	stw	r4,52(sp)
  b57214:	003d7106 	br	b567dc <_dtoa_r+0x728>
  b57218:	d9801717 	ldw	r6,92(sp)
  b5721c:	00800084 	movi	r2,2
  b57220:	11bde60e 	bge	r2,r6,b569bc <_dtoa_r+0x908>
  b57224:	203cfb1e 	bne	r4,zero,b56614 <_dtoa_r+0x560>
  b57228:	d9001617 	ldw	r4,88(sp)
  b5722c:	900b883a 	mov	r5,r18
  b57230:	01800144 	movi	r6,5
  b57234:	000f883a 	mov	r7,zero
  b57238:	0b59efc0 	call	b59efc <__multadd>
  b5723c:	d9000717 	ldw	r4,28(sp)
  b57240:	100b883a 	mov	r5,r2
  b57244:	1025883a 	mov	r18,r2
  b57248:	0b593a40 	call	b593a4 <__mcmp>
  b5724c:	00bcf10e 	bge	zero,r2,b56614 <_dtoa_r+0x560>
  b57250:	d8c00d17 	ldw	r3,52(sp)
  b57254:	d9000517 	ldw	r4,20(sp)
  b57258:	d8000615 	stw	zero,24(sp)
  b5725c:	18c00044 	addi	r3,r3,1
  b57260:	d8c00d15 	stw	r3,52(sp)
  b57264:	00800c44 	movi	r2,49
  b57268:	27000044 	addi	fp,r4,1
  b5726c:	20800005 	stb	r2,0(r4)
  b57270:	003e8906 	br	b56c98 <_dtoa_r+0xbe4>
  b57274:	d8c00517 	ldw	r3,20(sp)
  b57278:	003bc206 	br	b56184 <_dtoa_r+0xd0>
  b5727c:	01802db4 	movhi	r6,182
  b57280:	3184ad04 	addi	r6,r6,4788
  b57284:	30c00917 	ldw	r3,36(r6)
  b57288:	30800817 	ldw	r2,32(r6)
  b5728c:	d9001217 	ldw	r4,72(sp)
  b57290:	d9401317 	ldw	r5,76(sp)
  b57294:	180f883a 	mov	r7,r3
  b57298:	100d883a 	mov	r6,r2
  b5729c:	0b52f000 	call	b52f00 <__divdf3>
  b572a0:	948003cc 	andi	r18,r18,15
  b572a4:	058000c4 	movi	r22,3
  b572a8:	1029883a 	mov	r20,r2
  b572ac:	182b883a 	mov	r21,r3
  b572b0:	003c8906 	br	b564d8 <_dtoa_r+0x424>
  b572b4:	d9001017 	ldw	r4,64(sp)
  b572b8:	d9800917 	ldw	r6,36(sp)
  b572bc:	0025883a 	mov	r18,zero
  b572c0:	1105c83a 	sub	r2,r2,r4
  b572c4:	2089883a 	add	r4,r4,r2
  b572c8:	308d883a 	add	r6,r6,r2
  b572cc:	d9001015 	stw	r4,64(sp)
  b572d0:	d9800915 	stw	r6,36(sp)
  b572d4:	003e3206 	br	b56ba0 <_dtoa_r+0xaec>
  b572d8:	28800044 	addi	r2,r5,1
  b572dc:	27000044 	addi	fp,r4,1
  b572e0:	20800005 	stb	r2,0(r4)
  b572e4:	003e6c06 	br	b56c98 <_dtoa_r+0xbe4>
  b572e8:	d8800f17 	ldw	r2,60(sp)
  b572ec:	00bce016 	blt	zero,r2,b56670 <_dtoa_r+0x5bc>
  b572f0:	d9800f17 	ldw	r6,60(sp)
  b572f4:	303cc51e 	bne	r6,zero,b5660c <_dtoa_r+0x558>
  b572f8:	0005883a 	mov	r2,zero
  b572fc:	00d00534 	movhi	r3,16404
  b57300:	980b883a 	mov	r5,r19
  b57304:	180f883a 	mov	r7,r3
  b57308:	9009883a 	mov	r4,r18
  b5730c:	100d883a 	mov	r6,r2
  b57310:	0b5bb380 	call	b5bb38 <__muldf3>
  b57314:	180b883a 	mov	r5,r3
  b57318:	a80f883a 	mov	r7,r21
  b5731c:	1009883a 	mov	r4,r2
  b57320:	a00d883a 	mov	r6,r20
  b57324:	0b5c00c0 	call	b5c00c <__gedf2>
  b57328:	103cb80e 	bge	r2,zero,b5660c <_dtoa_r+0x558>
  b5732c:	0027883a 	mov	r19,zero
  b57330:	0025883a 	mov	r18,zero
  b57334:	003fc606 	br	b57250 <_dtoa_r+0x119c>
  b57338:	99400117 	ldw	r5,4(r19)
  b5733c:	d9001617 	ldw	r4,88(sp)
  b57340:	0b597c80 	call	b597c8 <_Balloc>
  b57344:	99800417 	ldw	r6,16(r19)
  b57348:	11000304 	addi	r4,r2,12
  b5734c:	99400304 	addi	r5,r19,12
  b57350:	318d883a 	add	r6,r6,r6
  b57354:	318d883a 	add	r6,r6,r6
  b57358:	31800204 	addi	r6,r6,8
  b5735c:	1023883a 	mov	r17,r2
  b57360:	0b590300 	call	b59030 <memcpy>
  b57364:	d9001617 	ldw	r4,88(sp)
  b57368:	880b883a 	mov	r5,r17
  b5736c:	01800044 	movi	r6,1
  b57370:	0b59b8c0 	call	b59b8c <__lshift>
  b57374:	100b883a 	mov	r5,r2
  b57378:	003d9c06 	br	b569ec <_dtoa_r+0x938>
  b5737c:	00800e44 	movi	r2,57
  b57380:	b8807026 	beq	r23,r2,b57544 <_dtoa_r+0x1490>
  b57384:	b8800044 	addi	r2,r23,1
  b57388:	b7000044 	addi	fp,r22,1
  b5738c:	b0800005 	stb	r2,0(r22)
  b57390:	003e4106 	br	b56c98 <_dtoa_r+0xbe4>
  b57394:	d8800317 	ldw	r2,12(sp)
  b57398:	01802db4 	movhi	r6,182
  b5739c:	31847b04 	addi	r6,r6,4588
  b573a0:	b009883a 	mov	r4,r22
  b573a4:	100e90fa 	slli	r7,r2,3
  b573a8:	b80b883a 	mov	r5,r23
  b573ac:	398f883a 	add	r7,r7,r6
  b573b0:	38bffe17 	ldw	r2,-8(r7)
  b573b4:	d9800517 	ldw	r6,20(sp)
  b573b8:	38ffff17 	ldw	r3,-4(r7)
  b573bc:	37000044 	addi	fp,r6,1
  b573c0:	180f883a 	mov	r7,r3
  b573c4:	100d883a 	mov	r6,r2
  b573c8:	0b5bb380 	call	b5bb38 <__muldf3>
  b573cc:	a80b883a 	mov	r5,r21
  b573d0:	a009883a 	mov	r4,r20
  b573d4:	182f883a 	mov	r23,r3
  b573d8:	102d883a 	mov	r22,r2
  b573dc:	0b5c2140 	call	b5c214 <__fixdfsi>
  b573e0:	1009883a 	mov	r4,r2
  b573e4:	1027883a 	mov	r19,r2
  b573e8:	0b5c11c0 	call	b5c11c <__floatsidf>
  b573ec:	a80b883a 	mov	r5,r21
  b573f0:	a009883a 	mov	r4,r20
  b573f4:	180f883a 	mov	r7,r3
  b573f8:	100d883a 	mov	r6,r2
  b573fc:	0b52e0c0 	call	b52e0c <__subdf3>
  b57400:	180b883a 	mov	r5,r3
  b57404:	d8c00517 	ldw	r3,20(sp)
  b57408:	9cc00c04 	addi	r19,r19,48
  b5740c:	1009883a 	mov	r4,r2
  b57410:	1cc00005 	stb	r19,0(r3)
  b57414:	2021883a 	mov	r16,r4
  b57418:	d9000317 	ldw	r4,12(sp)
  b5741c:	00800044 	movi	r2,1
  b57420:	2823883a 	mov	r17,r5
  b57424:	20802226 	beq	r4,r2,b574b0 <_dtoa_r+0x13fc>
  b57428:	1029883a 	mov	r20,r2
  b5742c:	0005883a 	mov	r2,zero
  b57430:	00d00934 	movhi	r3,16420
  b57434:	180f883a 	mov	r7,r3
  b57438:	100d883a 	mov	r6,r2
  b5743c:	880b883a 	mov	r5,r17
  b57440:	8009883a 	mov	r4,r16
  b57444:	0b5bb380 	call	b5bb38 <__muldf3>
  b57448:	180b883a 	mov	r5,r3
  b5744c:	1009883a 	mov	r4,r2
  b57450:	1823883a 	mov	r17,r3
  b57454:	1021883a 	mov	r16,r2
  b57458:	0b5c2140 	call	b5c214 <__fixdfsi>
  b5745c:	1009883a 	mov	r4,r2
  b57460:	102b883a 	mov	r21,r2
  b57464:	0b5c11c0 	call	b5c11c <__floatsidf>
  b57468:	880b883a 	mov	r5,r17
  b5746c:	8009883a 	mov	r4,r16
  b57470:	180f883a 	mov	r7,r3
  b57474:	100d883a 	mov	r6,r2
  b57478:	0b52e0c0 	call	b52e0c <__subdf3>
  b5747c:	180b883a 	mov	r5,r3
  b57480:	d8c00517 	ldw	r3,20(sp)
  b57484:	1009883a 	mov	r4,r2
  b57488:	ad400c04 	addi	r21,r21,48
  b5748c:	1d05883a 	add	r2,r3,r20
  b57490:	15400005 	stb	r21,0(r2)
  b57494:	2021883a 	mov	r16,r4
  b57498:	d9000317 	ldw	r4,12(sp)
  b5749c:	a5000044 	addi	r20,r20,1
  b574a0:	2823883a 	mov	r17,r5
  b574a4:	a13fe11e 	bne	r20,r4,b5742c <_dtoa_r+0x1378>
  b574a8:	e505883a 	add	r2,fp,r20
  b574ac:	173fffc4 	addi	fp,r2,-1
  b574b0:	0025883a 	mov	r18,zero
  b574b4:	04cff834 	movhi	r19,16352
  b574b8:	b009883a 	mov	r4,r22
  b574bc:	b80b883a 	mov	r5,r23
  b574c0:	900d883a 	mov	r6,r18
  b574c4:	980f883a 	mov	r7,r19
  b574c8:	0b52e8c0 	call	b52e8c <__adddf3>
  b574cc:	180b883a 	mov	r5,r3
  b574d0:	1009883a 	mov	r4,r2
  b574d4:	800d883a 	mov	r6,r16
  b574d8:	880f883a 	mov	r7,r17
  b574dc:	0b5c0940 	call	b5c094 <__ltdf2>
  b574e0:	103cab16 	blt	r2,zero,b56790 <_dtoa_r+0x6dc>
  b574e4:	0009883a 	mov	r4,zero
  b574e8:	980b883a 	mov	r5,r19
  b574ec:	b80f883a 	mov	r7,r23
  b574f0:	b00d883a 	mov	r6,r22
  b574f4:	0b52e0c0 	call	b52e0c <__subdf3>
  b574f8:	180b883a 	mov	r5,r3
  b574fc:	880f883a 	mov	r7,r17
  b57500:	1009883a 	mov	r4,r2
  b57504:	800d883a 	mov	r6,r16
  b57508:	0b5bf840 	call	b5bf84 <__gtdf2>
  b5750c:	00bc470e 	bge	zero,r2,b5662c <_dtoa_r+0x578>
  b57510:	00c00c04 	movi	r3,48
  b57514:	e73fffc4 	addi	fp,fp,-1
  b57518:	e0800007 	ldb	r2,0(fp)
  b5751c:	10fffd26 	beq	r2,r3,b57514 <_dtoa_r+0x1460>
  b57520:	d9800417 	ldw	r6,16(sp)
  b57524:	e7000044 	addi	fp,fp,1
  b57528:	d9800d15 	stw	r6,52(sp)
  b5752c:	003cab06 	br	b567dc <_dtoa_r+0x728>
  b57530:	d8c00f17 	ldw	r3,60(sp)
  b57534:	d9001117 	ldw	r4,68(sp)
  b57538:	20e1c83a 	sub	r16,r4,r3
  b5753c:	0007883a 	mov	r3,zero
  b57540:	003d9b06 	br	b56bb0 <_dtoa_r+0xafc>
  b57544:	00800e44 	movi	r2,57
  b57548:	b0800005 	stb	r2,0(r22)
  b5754c:	b5800044 	addi	r22,r22,1
  b57550:	003dc106 	br	b56c58 <_dtoa_r+0xba4>
  b57554:	05800084 	movi	r22,2
  b57558:	003bf706 	br	b56538 <_dtoa_r+0x484>
  b5755c:	d9000f17 	ldw	r4,60(sp)
  b57560:	013c000e 	bge	zero,r4,b56564 <_dtoa_r+0x4b0>
  b57564:	d9800e17 	ldw	r6,56(sp)
  b57568:	01bc300e 	bge	zero,r6,b5662c <_dtoa_r+0x578>
  b5756c:	0005883a 	mov	r2,zero
  b57570:	00d00934 	movhi	r3,16420
  b57574:	a80b883a 	mov	r5,r21
  b57578:	180f883a 	mov	r7,r3
  b5757c:	a009883a 	mov	r4,r20
  b57580:	100d883a 	mov	r6,r2
  b57584:	0b5bb380 	call	b5bb38 <__muldf3>
  b57588:	b1000044 	addi	r4,r22,1
  b5758c:	1021883a 	mov	r16,r2
  b57590:	1823883a 	mov	r17,r3
  b57594:	0b5c11c0 	call	b5c11c <__floatsidf>
  b57598:	880b883a 	mov	r5,r17
  b5759c:	8009883a 	mov	r4,r16
  b575a0:	180f883a 	mov	r7,r3
  b575a4:	100d883a 	mov	r6,r2
  b575a8:	0b5bb380 	call	b5bb38 <__muldf3>
  b575ac:	0011883a 	mov	r8,zero
  b575b0:	02500734 	movhi	r9,16412
  b575b4:	180b883a 	mov	r5,r3
  b575b8:	480f883a 	mov	r7,r9
  b575bc:	1009883a 	mov	r4,r2
  b575c0:	400d883a 	mov	r6,r8
  b575c4:	0b52e8c0 	call	b52e8c <__adddf3>
  b575c8:	102d883a 	mov	r22,r2
  b575cc:	00bf3034 	movhi	r2,64704
  b575d0:	10ef883a 	add	r23,r2,r3
  b575d4:	d8800d17 	ldw	r2,52(sp)
  b575d8:	d8c00e17 	ldw	r3,56(sp)
  b575dc:	8029883a 	mov	r20,r16
  b575e0:	10bfffc4 	addi	r2,r2,-1
  b575e4:	882b883a 	mov	r21,r17
  b575e8:	d8800415 	stw	r2,16(sp)
  b575ec:	d8c00315 	stw	r3,12(sp)
  b575f0:	003e8306 	br	b57000 <_dtoa_r+0xf4c>
  b575f4:	d8800117 	ldw	r2,4(sp)
  b575f8:	dc001117 	ldw	r16,68(sp)
  b575fc:	dc801017 	ldw	r18,64(sp)
  b57600:	00c00d84 	movi	r3,54
  b57604:	1887c83a 	sub	r3,r3,r2
  b57608:	003d6906 	br	b56bb0 <_dtoa_r+0xafc>
  b5760c:	01800044 	movi	r6,1
  b57610:	3021883a 	mov	r16,r6
  b57614:	d9800f15 	stw	r6,60(sp)
  b57618:	d9802615 	stw	r6,152(sp)
  b5761c:	d9800e15 	stw	r6,56(sp)
  b57620:	003b9306 	br	b56470 <_dtoa_r+0x3bc>
  b57624:	b021883a 	mov	r16,r22
  b57628:	dd800f15 	stw	r22,60(sp)
  b5762c:	003b9006 	br	b56470 <_dtoa_r+0x3bc>
  b57630:	103e221e 	bne	r2,zero,b56ebc <_dtoa_r+0xe08>
  b57634:	b880004c 	andi	r2,r23,1
  b57638:	1005003a 	cmpeq	r2,r2,zero
  b5763c:	103e1f1e 	bne	r2,zero,b56ebc <_dtoa_r+0xe08>
  b57640:	003e1b06 	br	b56eb0 <_dtoa_r+0xdfc>
  b57644:	d9001617 	ldw	r4,88(sp)
  b57648:	980b883a 	mov	r5,r19
  b5764c:	01800284 	movi	r6,10
  b57650:	000f883a 	mov	r7,zero
  b57654:	0b59efc0 	call	b59efc <__multadd>
  b57658:	d8c00e17 	ldw	r3,56(sp)
  b5765c:	1027883a 	mov	r19,r2
  b57660:	d8c00f15 	stw	r3,60(sp)
  b57664:	003cd306 	br	b569b4 <_dtoa_r+0x900>

00b57668 <_fflush_r>:
  b57668:	defffb04 	addi	sp,sp,-20
  b5766c:	dcc00315 	stw	r19,12(sp)
  b57670:	dc800215 	stw	r18,8(sp)
  b57674:	dfc00415 	stw	ra,16(sp)
  b57678:	dc400115 	stw	r17,4(sp)
  b5767c:	dc000015 	stw	r16,0(sp)
  b57680:	2027883a 	mov	r19,r4
  b57684:	2825883a 	mov	r18,r5
  b57688:	20000226 	beq	r4,zero,b57694 <_fflush_r+0x2c>
  b5768c:	20800e17 	ldw	r2,56(r4)
  b57690:	10005626 	beq	r2,zero,b577ec <_fflush_r+0x184>
  b57694:	9100030b 	ldhu	r4,12(r18)
  b57698:	20ffffcc 	andi	r3,r4,65535
  b5769c:	18e0001c 	xori	r3,r3,32768
  b576a0:	18e00004 	addi	r3,r3,-32768
  b576a4:	1880020c 	andi	r2,r3,8
  b576a8:	1000261e 	bne	r2,zero,b57744 <_fflush_r+0xdc>
  b576ac:	90c00117 	ldw	r3,4(r18)
  b576b0:	20820014 	ori	r2,r4,2048
  b576b4:	9080030d 	sth	r2,12(r18)
  b576b8:	1009883a 	mov	r4,r2
  b576bc:	00c0400e 	bge	zero,r3,b577c0 <_fflush_r+0x158>
  b576c0:	92000a17 	ldw	r8,40(r18)
  b576c4:	40004026 	beq	r8,zero,b577c8 <_fflush_r+0x160>
  b576c8:	2084000c 	andi	r2,r4,4096
  b576cc:	10005326 	beq	r2,zero,b5781c <_fflush_r+0x1b4>
  b576d0:	94001417 	ldw	r16,80(r18)
  b576d4:	9080030b 	ldhu	r2,12(r18)
  b576d8:	1080010c 	andi	r2,r2,4
  b576dc:	1000481e 	bne	r2,zero,b57800 <_fflush_r+0x198>
  b576e0:	91400717 	ldw	r5,28(r18)
  b576e4:	9809883a 	mov	r4,r19
  b576e8:	800d883a 	mov	r6,r16
  b576ec:	000f883a 	mov	r7,zero
  b576f0:	403ee83a 	callr	r8
  b576f4:	8080261e 	bne	r16,r2,b57790 <_fflush_r+0x128>
  b576f8:	9080030b 	ldhu	r2,12(r18)
  b576fc:	91000417 	ldw	r4,16(r18)
  b57700:	90000115 	stw	zero,4(r18)
  b57704:	10bdffcc 	andi	r2,r2,63487
  b57708:	10ffffcc 	andi	r3,r2,65535
  b5770c:	18c4000c 	andi	r3,r3,4096
  b57710:	9080030d 	sth	r2,12(r18)
  b57714:	91000015 	stw	r4,0(r18)
  b57718:	18002b26 	beq	r3,zero,b577c8 <_fflush_r+0x160>
  b5771c:	0007883a 	mov	r3,zero
  b57720:	1805883a 	mov	r2,r3
  b57724:	94001415 	stw	r16,80(r18)
  b57728:	dfc00417 	ldw	ra,16(sp)
  b5772c:	dcc00317 	ldw	r19,12(sp)
  b57730:	dc800217 	ldw	r18,8(sp)
  b57734:	dc400117 	ldw	r17,4(sp)
  b57738:	dc000017 	ldw	r16,0(sp)
  b5773c:	dec00504 	addi	sp,sp,20
  b57740:	f800283a 	ret
  b57744:	94400417 	ldw	r17,16(r18)
  b57748:	88001f26 	beq	r17,zero,b577c8 <_fflush_r+0x160>
  b5774c:	90800017 	ldw	r2,0(r18)
  b57750:	18c000cc 	andi	r3,r3,3
  b57754:	94400015 	stw	r17,0(r18)
  b57758:	1461c83a 	sub	r16,r2,r17
  b5775c:	18002526 	beq	r3,zero,b577f4 <_fflush_r+0x18c>
  b57760:	0005883a 	mov	r2,zero
  b57764:	90800215 	stw	r2,8(r18)
  b57768:	0400170e 	bge	zero,r16,b577c8 <_fflush_r+0x160>
  b5776c:	90c00917 	ldw	r3,36(r18)
  b57770:	91400717 	ldw	r5,28(r18)
  b57774:	880d883a 	mov	r6,r17
  b57778:	800f883a 	mov	r7,r16
  b5777c:	9809883a 	mov	r4,r19
  b57780:	183ee83a 	callr	r3
  b57784:	88a3883a 	add	r17,r17,r2
  b57788:	80a1c83a 	sub	r16,r16,r2
  b5778c:	00bff616 	blt	zero,r2,b57768 <_fflush_r+0x100>
  b57790:	9080030b 	ldhu	r2,12(r18)
  b57794:	00ffffc4 	movi	r3,-1
  b57798:	10801014 	ori	r2,r2,64
  b5779c:	9080030d 	sth	r2,12(r18)
  b577a0:	1805883a 	mov	r2,r3
  b577a4:	dfc00417 	ldw	ra,16(sp)
  b577a8:	dcc00317 	ldw	r19,12(sp)
  b577ac:	dc800217 	ldw	r18,8(sp)
  b577b0:	dc400117 	ldw	r17,4(sp)
  b577b4:	dc000017 	ldw	r16,0(sp)
  b577b8:	dec00504 	addi	sp,sp,20
  b577bc:	f800283a 	ret
  b577c0:	90800f17 	ldw	r2,60(r18)
  b577c4:	00bfbe16 	blt	zero,r2,b576c0 <_fflush_r+0x58>
  b577c8:	0007883a 	mov	r3,zero
  b577cc:	1805883a 	mov	r2,r3
  b577d0:	dfc00417 	ldw	ra,16(sp)
  b577d4:	dcc00317 	ldw	r19,12(sp)
  b577d8:	dc800217 	ldw	r18,8(sp)
  b577dc:	dc400117 	ldw	r17,4(sp)
  b577e0:	dc000017 	ldw	r16,0(sp)
  b577e4:	dec00504 	addi	sp,sp,20
  b577e8:	f800283a 	ret
  b577ec:	0b579000 	call	b57900 <__sinit>
  b577f0:	003fa806 	br	b57694 <_fflush_r+0x2c>
  b577f4:	90800517 	ldw	r2,20(r18)
  b577f8:	90800215 	stw	r2,8(r18)
  b577fc:	003fda06 	br	b57768 <_fflush_r+0x100>
  b57800:	90800117 	ldw	r2,4(r18)
  b57804:	90c00c17 	ldw	r3,48(r18)
  b57808:	80a1c83a 	sub	r16,r16,r2
  b5780c:	183fb426 	beq	r3,zero,b576e0 <_fflush_r+0x78>
  b57810:	90800f17 	ldw	r2,60(r18)
  b57814:	80a1c83a 	sub	r16,r16,r2
  b57818:	003fb106 	br	b576e0 <_fflush_r+0x78>
  b5781c:	91400717 	ldw	r5,28(r18)
  b57820:	9809883a 	mov	r4,r19
  b57824:	000d883a 	mov	r6,zero
  b57828:	01c00044 	movi	r7,1
  b5782c:	403ee83a 	callr	r8
  b57830:	1021883a 	mov	r16,r2
  b57834:	00bfffc4 	movi	r2,-1
  b57838:	80800226 	beq	r16,r2,b57844 <_fflush_r+0x1dc>
  b5783c:	92000a17 	ldw	r8,40(r18)
  b57840:	003fa406 	br	b576d4 <_fflush_r+0x6c>
  b57844:	98c00017 	ldw	r3,0(r19)
  b57848:	00800744 	movi	r2,29
  b5784c:	18bfde26 	beq	r3,r2,b577c8 <_fflush_r+0x160>
  b57850:	9080030b 	ldhu	r2,12(r18)
  b57854:	8007883a 	mov	r3,r16
  b57858:	10801014 	ori	r2,r2,64
  b5785c:	9080030d 	sth	r2,12(r18)
  b57860:	003fcf06 	br	b577a0 <_fflush_r+0x138>

00b57864 <fflush>:
  b57864:	01402d74 	movhi	r5,181
  b57868:	295d9a04 	addi	r5,r5,30312
  b5786c:	2007883a 	mov	r3,r4
  b57870:	20000526 	beq	r4,zero,b57888 <fflush+0x24>
  b57874:	00802db4 	movhi	r2,182
  b57878:	108bf904 	addi	r2,r2,12260
  b5787c:	11000017 	ldw	r4,0(r2)
  b57880:	180b883a 	mov	r5,r3
  b57884:	0b576681 	jmpi	b57668 <_fflush_r>
  b57888:	00802db4 	movhi	r2,182
  b5788c:	108bfa04 	addi	r2,r2,12264
  b57890:	11000017 	ldw	r4,0(r2)
  b57894:	0b584341 	jmpi	b58434 <_fwalk_reent>

00b57898 <std>:
  b57898:	00802db4 	movhi	r2,182
  b5789c:	10aa4404 	addi	r2,r2,-22256
  b578a0:	20800b15 	stw	r2,44(r4)
  b578a4:	00802db4 	movhi	r2,182
  b578a8:	10aa7f04 	addi	r2,r2,-22020
  b578ac:	20800815 	stw	r2,32(r4)
  b578b0:	00c02db4 	movhi	r3,182
  b578b4:	18ea6004 	addi	r3,r3,-22144
  b578b8:	00802db4 	movhi	r2,182
  b578bc:	10aa4604 	addi	r2,r2,-22248
  b578c0:	2140030d 	sth	r5,12(r4)
  b578c4:	2180038d 	sth	r6,14(r4)
  b578c8:	20c00915 	stw	r3,36(r4)
  b578cc:	20800a15 	stw	r2,40(r4)
  b578d0:	20000015 	stw	zero,0(r4)
  b578d4:	20000115 	stw	zero,4(r4)
  b578d8:	20000215 	stw	zero,8(r4)
  b578dc:	20000415 	stw	zero,16(r4)
  b578e0:	20000515 	stw	zero,20(r4)
  b578e4:	20000615 	stw	zero,24(r4)
  b578e8:	21000715 	stw	r4,28(r4)
  b578ec:	f800283a 	ret

00b578f0 <__sfp_lock_acquire>:
  b578f0:	f800283a 	ret

00b578f4 <__sfp_lock_release>:
  b578f4:	f800283a 	ret

00b578f8 <__sinit_lock_acquire>:
  b578f8:	f800283a 	ret

00b578fc <__sinit_lock_release>:
  b578fc:	f800283a 	ret

00b57900 <__sinit>:
  b57900:	20800e17 	ldw	r2,56(r4)
  b57904:	defffd04 	addi	sp,sp,-12
  b57908:	dc400115 	stw	r17,4(sp)
  b5790c:	dc000015 	stw	r16,0(sp)
  b57910:	dfc00215 	stw	ra,8(sp)
  b57914:	04400044 	movi	r17,1
  b57918:	01400104 	movi	r5,4
  b5791c:	000d883a 	mov	r6,zero
  b57920:	2021883a 	mov	r16,r4
  b57924:	2200bb04 	addi	r8,r4,748
  b57928:	200f883a 	mov	r7,r4
  b5792c:	10000526 	beq	r2,zero,b57944 <__sinit+0x44>
  b57930:	dfc00217 	ldw	ra,8(sp)
  b57934:	dc400117 	ldw	r17,4(sp)
  b57938:	dc000017 	ldw	r16,0(sp)
  b5793c:	dec00304 	addi	sp,sp,12
  b57940:	f800283a 	ret
  b57944:	21000117 	ldw	r4,4(r4)
  b57948:	00802d74 	movhi	r2,181
  b5794c:	109e7904 	addi	r2,r2,31204
  b57950:	00c000c4 	movi	r3,3
  b57954:	80800f15 	stw	r2,60(r16)
  b57958:	80c0b915 	stw	r3,740(r16)
  b5795c:	8200ba15 	stw	r8,744(r16)
  b57960:	84400e15 	stw	r17,56(r16)
  b57964:	8000b815 	stw	zero,736(r16)
  b57968:	0b578980 	call	b57898 <std>
  b5796c:	81000217 	ldw	r4,8(r16)
  b57970:	880d883a 	mov	r6,r17
  b57974:	800f883a 	mov	r7,r16
  b57978:	01400284 	movi	r5,10
  b5797c:	0b578980 	call	b57898 <std>
  b57980:	81000317 	ldw	r4,12(r16)
  b57984:	800f883a 	mov	r7,r16
  b57988:	01400484 	movi	r5,18
  b5798c:	01800084 	movi	r6,2
  b57990:	dfc00217 	ldw	ra,8(sp)
  b57994:	dc400117 	ldw	r17,4(sp)
  b57998:	dc000017 	ldw	r16,0(sp)
  b5799c:	dec00304 	addi	sp,sp,12
  b579a0:	0b578981 	jmpi	b57898 <std>

00b579a4 <__fp_lock>:
  b579a4:	0005883a 	mov	r2,zero
  b579a8:	f800283a 	ret

00b579ac <__fp_unlock>:
  b579ac:	0005883a 	mov	r2,zero
  b579b0:	f800283a 	ret

00b579b4 <__fp_unlock_all>:
  b579b4:	00802db4 	movhi	r2,182
  b579b8:	108bf904 	addi	r2,r2,12260
  b579bc:	11000017 	ldw	r4,0(r2)
  b579c0:	01402d74 	movhi	r5,181
  b579c4:	295e6b04 	addi	r5,r5,31148
  b579c8:	0b584fc1 	jmpi	b584fc <_fwalk>

00b579cc <__fp_lock_all>:
  b579cc:	00802db4 	movhi	r2,182
  b579d0:	108bf904 	addi	r2,r2,12260
  b579d4:	11000017 	ldw	r4,0(r2)
  b579d8:	01402d74 	movhi	r5,181
  b579dc:	295e6904 	addi	r5,r5,31140
  b579e0:	0b584fc1 	jmpi	b584fc <_fwalk>

00b579e4 <_cleanup_r>:
  b579e4:	01402db4 	movhi	r5,182
  b579e8:	296b7104 	addi	r5,r5,-21052
  b579ec:	0b584fc1 	jmpi	b584fc <_fwalk>

00b579f0 <_cleanup>:
  b579f0:	00802db4 	movhi	r2,182
  b579f4:	108bfa04 	addi	r2,r2,12264
  b579f8:	11000017 	ldw	r4,0(r2)
  b579fc:	0b579e41 	jmpi	b579e4 <_cleanup_r>

00b57a00 <__sfmoreglue>:
  b57a00:	defffc04 	addi	sp,sp,-16
  b57a04:	dc400115 	stw	r17,4(sp)
  b57a08:	2c401724 	muli	r17,r5,92
  b57a0c:	dc800215 	stw	r18,8(sp)
  b57a10:	2825883a 	mov	r18,r5
  b57a14:	89400304 	addi	r5,r17,12
  b57a18:	dc000015 	stw	r16,0(sp)
  b57a1c:	dfc00315 	stw	ra,12(sp)
  b57a20:	0b5880c0 	call	b5880c <_malloc_r>
  b57a24:	0021883a 	mov	r16,zero
  b57a28:	880d883a 	mov	r6,r17
  b57a2c:	000b883a 	mov	r5,zero
  b57a30:	10000626 	beq	r2,zero,b57a4c <__sfmoreglue+0x4c>
  b57a34:	11000304 	addi	r4,r2,12
  b57a38:	14800115 	stw	r18,4(r2)
  b57a3c:	10000015 	stw	zero,0(r2)
  b57a40:	11000215 	stw	r4,8(r2)
  b57a44:	1021883a 	mov	r16,r2
  b57a48:	0b591b00 	call	b591b0 <memset>
  b57a4c:	8005883a 	mov	r2,r16
  b57a50:	dfc00317 	ldw	ra,12(sp)
  b57a54:	dc800217 	ldw	r18,8(sp)
  b57a58:	dc400117 	ldw	r17,4(sp)
  b57a5c:	dc000017 	ldw	r16,0(sp)
  b57a60:	dec00404 	addi	sp,sp,16
  b57a64:	f800283a 	ret

00b57a68 <__sfp>:
  b57a68:	defffd04 	addi	sp,sp,-12
  b57a6c:	00802db4 	movhi	r2,182
  b57a70:	108bfa04 	addi	r2,r2,12264
  b57a74:	dc000015 	stw	r16,0(sp)
  b57a78:	14000017 	ldw	r16,0(r2)
  b57a7c:	dc400115 	stw	r17,4(sp)
  b57a80:	dfc00215 	stw	ra,8(sp)
  b57a84:	80800e17 	ldw	r2,56(r16)
  b57a88:	2023883a 	mov	r17,r4
  b57a8c:	10002626 	beq	r2,zero,b57b28 <__sfp+0xc0>
  b57a90:	8400b804 	addi	r16,r16,736
  b57a94:	80800117 	ldw	r2,4(r16)
  b57a98:	81000217 	ldw	r4,8(r16)
  b57a9c:	10ffffc4 	addi	r3,r2,-1
  b57aa0:	18000916 	blt	r3,zero,b57ac8 <__sfp+0x60>
  b57aa4:	2080030f 	ldh	r2,12(r4)
  b57aa8:	10000b26 	beq	r2,zero,b57ad8 <__sfp+0x70>
  b57aac:	017fffc4 	movi	r5,-1
  b57ab0:	00000206 	br	b57abc <__sfp+0x54>
  b57ab4:	2080030f 	ldh	r2,12(r4)
  b57ab8:	10000726 	beq	r2,zero,b57ad8 <__sfp+0x70>
  b57abc:	18ffffc4 	addi	r3,r3,-1
  b57ac0:	21001704 	addi	r4,r4,92
  b57ac4:	197ffb1e 	bne	r3,r5,b57ab4 <__sfp+0x4c>
  b57ac8:	80800017 	ldw	r2,0(r16)
  b57acc:	10001926 	beq	r2,zero,b57b34 <__sfp+0xcc>
  b57ad0:	1021883a 	mov	r16,r2
  b57ad4:	003fef06 	br	b57a94 <__sfp+0x2c>
  b57ad8:	00bfffc4 	movi	r2,-1
  b57adc:	00c00044 	movi	r3,1
  b57ae0:	2080038d 	sth	r2,14(r4)
  b57ae4:	20c0030d 	sth	r3,12(r4)
  b57ae8:	20000015 	stw	zero,0(r4)
  b57aec:	20000215 	stw	zero,8(r4)
  b57af0:	20000115 	stw	zero,4(r4)
  b57af4:	20000415 	stw	zero,16(r4)
  b57af8:	20000515 	stw	zero,20(r4)
  b57afc:	20000615 	stw	zero,24(r4)
  b57b00:	20000c15 	stw	zero,48(r4)
  b57b04:	20000d15 	stw	zero,52(r4)
  b57b08:	20001115 	stw	zero,68(r4)
  b57b0c:	20001215 	stw	zero,72(r4)
  b57b10:	2005883a 	mov	r2,r4
  b57b14:	dfc00217 	ldw	ra,8(sp)
  b57b18:	dc400117 	ldw	r17,4(sp)
  b57b1c:	dc000017 	ldw	r16,0(sp)
  b57b20:	dec00304 	addi	sp,sp,12
  b57b24:	f800283a 	ret
  b57b28:	8009883a 	mov	r4,r16
  b57b2c:	0b579000 	call	b57900 <__sinit>
  b57b30:	003fd706 	br	b57a90 <__sfp+0x28>
  b57b34:	8809883a 	mov	r4,r17
  b57b38:	01400104 	movi	r5,4
  b57b3c:	0b57a000 	call	b57a00 <__sfmoreglue>
  b57b40:	80800015 	stw	r2,0(r16)
  b57b44:	103fe21e 	bne	r2,zero,b57ad0 <__sfp+0x68>
  b57b48:	00800304 	movi	r2,12
  b57b4c:	0009883a 	mov	r4,zero
  b57b50:	88800015 	stw	r2,0(r17)
  b57b54:	003fee06 	br	b57b10 <__sfp+0xa8>

00b57b58 <_malloc_trim_r>:
  b57b58:	defffb04 	addi	sp,sp,-20
  b57b5c:	dcc00315 	stw	r19,12(sp)
  b57b60:	04c02db4 	movhi	r19,182
  b57b64:	9cc61c04 	addi	r19,r19,6256
  b57b68:	dc800215 	stw	r18,8(sp)
  b57b6c:	dc400115 	stw	r17,4(sp)
  b57b70:	dc000015 	stw	r16,0(sp)
  b57b74:	2823883a 	mov	r17,r5
  b57b78:	2025883a 	mov	r18,r4
  b57b7c:	dfc00415 	stw	ra,16(sp)
  b57b80:	0b5cc500 	call	b5cc50 <__malloc_lock>
  b57b84:	98800217 	ldw	r2,8(r19)
  b57b88:	9009883a 	mov	r4,r18
  b57b8c:	000b883a 	mov	r5,zero
  b57b90:	10c00117 	ldw	r3,4(r2)
  b57b94:	00bfff04 	movi	r2,-4
  b57b98:	18a0703a 	and	r16,r3,r2
  b57b9c:	8463c83a 	sub	r17,r16,r17
  b57ba0:	8c43fbc4 	addi	r17,r17,4079
  b57ba4:	8822d33a 	srli	r17,r17,12
  b57ba8:	0083ffc4 	movi	r2,4095
  b57bac:	8c7fffc4 	addi	r17,r17,-1
  b57bb0:	8822933a 	slli	r17,r17,12
  b57bb4:	1440060e 	bge	r2,r17,b57bd0 <_malloc_trim_r+0x78>
  b57bb8:	0b5a8a00 	call	b5a8a0 <_sbrk_r>
  b57bbc:	98c00217 	ldw	r3,8(r19)
  b57bc0:	9009883a 	mov	r4,r18
  b57bc4:	044bc83a 	sub	r5,zero,r17
  b57bc8:	80c7883a 	add	r3,r16,r3
  b57bcc:	10c00926 	beq	r2,r3,b57bf4 <_malloc_trim_r+0x9c>
  b57bd0:	0b5cc700 	call	b5cc70 <__malloc_unlock>
  b57bd4:	0005883a 	mov	r2,zero
  b57bd8:	dfc00417 	ldw	ra,16(sp)
  b57bdc:	dcc00317 	ldw	r19,12(sp)
  b57be0:	dc800217 	ldw	r18,8(sp)
  b57be4:	dc400117 	ldw	r17,4(sp)
  b57be8:	dc000017 	ldw	r16,0(sp)
  b57bec:	dec00504 	addi	sp,sp,20
  b57bf0:	f800283a 	ret
  b57bf4:	9009883a 	mov	r4,r18
  b57bf8:	0b5a8a00 	call	b5a8a0 <_sbrk_r>
  b57bfc:	844dc83a 	sub	r6,r16,r17
  b57c00:	00ffffc4 	movi	r3,-1
  b57c04:	9009883a 	mov	r4,r18
  b57c08:	000b883a 	mov	r5,zero
  b57c0c:	01c02db4 	movhi	r7,182
  b57c10:	39d31104 	addi	r7,r7,19524
  b57c14:	31800054 	ori	r6,r6,1
  b57c18:	10c00926 	beq	r2,r3,b57c40 <_malloc_trim_r+0xe8>
  b57c1c:	38800017 	ldw	r2,0(r7)
  b57c20:	98c00217 	ldw	r3,8(r19)
  b57c24:	9009883a 	mov	r4,r18
  b57c28:	1445c83a 	sub	r2,r2,r17
  b57c2c:	38800015 	stw	r2,0(r7)
  b57c30:	19800115 	stw	r6,4(r3)
  b57c34:	0b5cc700 	call	b5cc70 <__malloc_unlock>
  b57c38:	00800044 	movi	r2,1
  b57c3c:	003fe606 	br	b57bd8 <_malloc_trim_r+0x80>
  b57c40:	0b5a8a00 	call	b5a8a0 <_sbrk_r>
  b57c44:	99800217 	ldw	r6,8(r19)
  b57c48:	100f883a 	mov	r7,r2
  b57c4c:	9009883a 	mov	r4,r18
  b57c50:	1187c83a 	sub	r3,r2,r6
  b57c54:	008003c4 	movi	r2,15
  b57c58:	19400054 	ori	r5,r3,1
  b57c5c:	10ffdc0e 	bge	r2,r3,b57bd0 <_malloc_trim_r+0x78>
  b57c60:	00802db4 	movhi	r2,182
  b57c64:	108bfe04 	addi	r2,r2,12280
  b57c68:	10c00017 	ldw	r3,0(r2)
  b57c6c:	00802db4 	movhi	r2,182
  b57c70:	10931104 	addi	r2,r2,19524
  b57c74:	31400115 	stw	r5,4(r6)
  b57c78:	38c7c83a 	sub	r3,r7,r3
  b57c7c:	10c00015 	stw	r3,0(r2)
  b57c80:	003fd306 	br	b57bd0 <_malloc_trim_r+0x78>

00b57c84 <_free_r>:
  b57c84:	defffd04 	addi	sp,sp,-12
  b57c88:	dc400115 	stw	r17,4(sp)
  b57c8c:	dc000015 	stw	r16,0(sp)
  b57c90:	dfc00215 	stw	ra,8(sp)
  b57c94:	2821883a 	mov	r16,r5
  b57c98:	2023883a 	mov	r17,r4
  b57c9c:	28005a26 	beq	r5,zero,b57e08 <_free_r+0x184>
  b57ca0:	0b5cc500 	call	b5cc50 <__malloc_lock>
  b57ca4:	823ffe04 	addi	r8,r16,-8
  b57ca8:	41400117 	ldw	r5,4(r8)
  b57cac:	00bfff84 	movi	r2,-2
  b57cb0:	02802db4 	movhi	r10,182
  b57cb4:	52861c04 	addi	r10,r10,6256
  b57cb8:	288e703a 	and	r7,r5,r2
  b57cbc:	41cd883a 	add	r6,r8,r7
  b57cc0:	30c00117 	ldw	r3,4(r6)
  b57cc4:	51000217 	ldw	r4,8(r10)
  b57cc8:	00bfff04 	movi	r2,-4
  b57ccc:	1892703a 	and	r9,r3,r2
  b57cd0:	5017883a 	mov	r11,r10
  b57cd4:	31006726 	beq	r6,r4,b57e74 <_free_r+0x1f0>
  b57cd8:	2880004c 	andi	r2,r5,1
  b57cdc:	1005003a 	cmpeq	r2,r2,zero
  b57ce0:	32400115 	stw	r9,4(r6)
  b57ce4:	10001a1e 	bne	r2,zero,b57d50 <_free_r+0xcc>
  b57ce8:	000b883a 	mov	r5,zero
  b57cec:	3247883a 	add	r3,r6,r9
  b57cf0:	18800117 	ldw	r2,4(r3)
  b57cf4:	1080004c 	andi	r2,r2,1
  b57cf8:	1000231e 	bne	r2,zero,b57d88 <_free_r+0x104>
  b57cfc:	280ac03a 	cmpne	r5,r5,zero
  b57d00:	3a4f883a 	add	r7,r7,r9
  b57d04:	2800451e 	bne	r5,zero,b57e1c <_free_r+0x198>
  b57d08:	31000217 	ldw	r4,8(r6)
  b57d0c:	00802db4 	movhi	r2,182
  b57d10:	10861e04 	addi	r2,r2,6264
  b57d14:	20807b26 	beq	r4,r2,b57f04 <_free_r+0x280>
  b57d18:	30800317 	ldw	r2,12(r6)
  b57d1c:	3a07883a 	add	r3,r7,r8
  b57d20:	19c00015 	stw	r7,0(r3)
  b57d24:	11000215 	stw	r4,8(r2)
  b57d28:	20800315 	stw	r2,12(r4)
  b57d2c:	38800054 	ori	r2,r7,1
  b57d30:	40800115 	stw	r2,4(r8)
  b57d34:	28001a26 	beq	r5,zero,b57da0 <_free_r+0x11c>
  b57d38:	8809883a 	mov	r4,r17
  b57d3c:	dfc00217 	ldw	ra,8(sp)
  b57d40:	dc400117 	ldw	r17,4(sp)
  b57d44:	dc000017 	ldw	r16,0(sp)
  b57d48:	dec00304 	addi	sp,sp,12
  b57d4c:	0b5cc701 	jmpi	b5cc70 <__malloc_unlock>
  b57d50:	80bffe17 	ldw	r2,-8(r16)
  b57d54:	50c00204 	addi	r3,r10,8
  b57d58:	4091c83a 	sub	r8,r8,r2
  b57d5c:	41000217 	ldw	r4,8(r8)
  b57d60:	388f883a 	add	r7,r7,r2
  b57d64:	20c06126 	beq	r4,r3,b57eec <_free_r+0x268>
  b57d68:	40800317 	ldw	r2,12(r8)
  b57d6c:	3247883a 	add	r3,r6,r9
  b57d70:	000b883a 	mov	r5,zero
  b57d74:	11000215 	stw	r4,8(r2)
  b57d78:	20800315 	stw	r2,12(r4)
  b57d7c:	18800117 	ldw	r2,4(r3)
  b57d80:	1080004c 	andi	r2,r2,1
  b57d84:	103fdd26 	beq	r2,zero,b57cfc <_free_r+0x78>
  b57d88:	38800054 	ori	r2,r7,1
  b57d8c:	3a07883a 	add	r3,r7,r8
  b57d90:	280ac03a 	cmpne	r5,r5,zero
  b57d94:	40800115 	stw	r2,4(r8)
  b57d98:	19c00015 	stw	r7,0(r3)
  b57d9c:	283fe61e 	bne	r5,zero,b57d38 <_free_r+0xb4>
  b57da0:	00807fc4 	movi	r2,511
  b57da4:	11c01f2e 	bgeu	r2,r7,b57e24 <_free_r+0x1a0>
  b57da8:	3806d27a 	srli	r3,r7,9
  b57dac:	1800481e 	bne	r3,zero,b57ed0 <_free_r+0x24c>
  b57db0:	3804d0fa 	srli	r2,r7,3
  b57db4:	100690fa 	slli	r3,r2,3
  b57db8:	1acd883a 	add	r6,r3,r11
  b57dbc:	31400217 	ldw	r5,8(r6)
  b57dc0:	31405926 	beq	r6,r5,b57f28 <_free_r+0x2a4>
  b57dc4:	28800117 	ldw	r2,4(r5)
  b57dc8:	00ffff04 	movi	r3,-4
  b57dcc:	10c4703a 	and	r2,r2,r3
  b57dd0:	3880022e 	bgeu	r7,r2,b57ddc <_free_r+0x158>
  b57dd4:	29400217 	ldw	r5,8(r5)
  b57dd8:	317ffa1e 	bne	r6,r5,b57dc4 <_free_r+0x140>
  b57ddc:	29800317 	ldw	r6,12(r5)
  b57de0:	41800315 	stw	r6,12(r8)
  b57de4:	41400215 	stw	r5,8(r8)
  b57de8:	8809883a 	mov	r4,r17
  b57dec:	2a000315 	stw	r8,12(r5)
  b57df0:	32000215 	stw	r8,8(r6)
  b57df4:	dfc00217 	ldw	ra,8(sp)
  b57df8:	dc400117 	ldw	r17,4(sp)
  b57dfc:	dc000017 	ldw	r16,0(sp)
  b57e00:	dec00304 	addi	sp,sp,12
  b57e04:	0b5cc701 	jmpi	b5cc70 <__malloc_unlock>
  b57e08:	dfc00217 	ldw	ra,8(sp)
  b57e0c:	dc400117 	ldw	r17,4(sp)
  b57e10:	dc000017 	ldw	r16,0(sp)
  b57e14:	dec00304 	addi	sp,sp,12
  b57e18:	f800283a 	ret
  b57e1c:	31000217 	ldw	r4,8(r6)
  b57e20:	003fbd06 	br	b57d18 <_free_r+0x94>
  b57e24:	3806d0fa 	srli	r3,r7,3
  b57e28:	00800044 	movi	r2,1
  b57e2c:	51400117 	ldw	r5,4(r10)
  b57e30:	180890fa 	slli	r4,r3,3
  b57e34:	1807d0ba 	srai	r3,r3,2
  b57e38:	22c9883a 	add	r4,r4,r11
  b57e3c:	21800217 	ldw	r6,8(r4)
  b57e40:	10c4983a 	sll	r2,r2,r3
  b57e44:	41000315 	stw	r4,12(r8)
  b57e48:	41800215 	stw	r6,8(r8)
  b57e4c:	288ab03a 	or	r5,r5,r2
  b57e50:	22000215 	stw	r8,8(r4)
  b57e54:	8809883a 	mov	r4,r17
  b57e58:	51400115 	stw	r5,4(r10)
  b57e5c:	32000315 	stw	r8,12(r6)
  b57e60:	dfc00217 	ldw	ra,8(sp)
  b57e64:	dc400117 	ldw	r17,4(sp)
  b57e68:	dc000017 	ldw	r16,0(sp)
  b57e6c:	dec00304 	addi	sp,sp,12
  b57e70:	0b5cc701 	jmpi	b5cc70 <__malloc_unlock>
  b57e74:	2880004c 	andi	r2,r5,1
  b57e78:	3a4d883a 	add	r6,r7,r9
  b57e7c:	1000071e 	bne	r2,zero,b57e9c <_free_r+0x218>
  b57e80:	80bffe17 	ldw	r2,-8(r16)
  b57e84:	4091c83a 	sub	r8,r8,r2
  b57e88:	41000317 	ldw	r4,12(r8)
  b57e8c:	40c00217 	ldw	r3,8(r8)
  b57e90:	308d883a 	add	r6,r6,r2
  b57e94:	20c00215 	stw	r3,8(r4)
  b57e98:	19000315 	stw	r4,12(r3)
  b57e9c:	00802db4 	movhi	r2,182
  b57ea0:	108bfd04 	addi	r2,r2,12276
  b57ea4:	11000017 	ldw	r4,0(r2)
  b57ea8:	30c00054 	ori	r3,r6,1
  b57eac:	52000215 	stw	r8,8(r10)
  b57eb0:	40c00115 	stw	r3,4(r8)
  b57eb4:	313fa036 	bltu	r6,r4,b57d38 <_free_r+0xb4>
  b57eb8:	00802db4 	movhi	r2,182
  b57ebc:	10930704 	addi	r2,r2,19484
  b57ec0:	11400017 	ldw	r5,0(r2)
  b57ec4:	8809883a 	mov	r4,r17
  b57ec8:	0b57b580 	call	b57b58 <_malloc_trim_r>
  b57ecc:	003f9a06 	br	b57d38 <_free_r+0xb4>
  b57ed0:	00800104 	movi	r2,4
  b57ed4:	10c0072e 	bgeu	r2,r3,b57ef4 <_free_r+0x270>
  b57ed8:	00800504 	movi	r2,20
  b57edc:	10c01936 	bltu	r2,r3,b57f44 <_free_r+0x2c0>
  b57ee0:	188016c4 	addi	r2,r3,91
  b57ee4:	100690fa 	slli	r3,r2,3
  b57ee8:	003fb306 	br	b57db8 <_free_r+0x134>
  b57eec:	01400044 	movi	r5,1
  b57ef0:	003f7e06 	br	b57cec <_free_r+0x68>
  b57ef4:	3804d1ba 	srli	r2,r7,6
  b57ef8:	10800e04 	addi	r2,r2,56
  b57efc:	100690fa 	slli	r3,r2,3
  b57f00:	003fad06 	br	b57db8 <_free_r+0x134>
  b57f04:	22000315 	stw	r8,12(r4)
  b57f08:	22000215 	stw	r8,8(r4)
  b57f0c:	3a05883a 	add	r2,r7,r8
  b57f10:	38c00054 	ori	r3,r7,1
  b57f14:	11c00015 	stw	r7,0(r2)
  b57f18:	41000215 	stw	r4,8(r8)
  b57f1c:	40c00115 	stw	r3,4(r8)
  b57f20:	41000315 	stw	r4,12(r8)
  b57f24:	003f8406 	br	b57d38 <_free_r+0xb4>
  b57f28:	1005d0ba 	srai	r2,r2,2
  b57f2c:	00c00044 	movi	r3,1
  b57f30:	51000117 	ldw	r4,4(r10)
  b57f34:	1886983a 	sll	r3,r3,r2
  b57f38:	20c8b03a 	or	r4,r4,r3
  b57f3c:	51000115 	stw	r4,4(r10)
  b57f40:	003fa706 	br	b57de0 <_free_r+0x15c>
  b57f44:	00801504 	movi	r2,84
  b57f48:	10c00436 	bltu	r2,r3,b57f5c <_free_r+0x2d8>
  b57f4c:	3804d33a 	srli	r2,r7,12
  b57f50:	10801b84 	addi	r2,r2,110
  b57f54:	100690fa 	slli	r3,r2,3
  b57f58:	003f9706 	br	b57db8 <_free_r+0x134>
  b57f5c:	00805504 	movi	r2,340
  b57f60:	10c00436 	bltu	r2,r3,b57f74 <_free_r+0x2f0>
  b57f64:	3804d3fa 	srli	r2,r7,15
  b57f68:	10801dc4 	addi	r2,r2,119
  b57f6c:	100690fa 	slli	r3,r2,3
  b57f70:	003f9106 	br	b57db8 <_free_r+0x134>
  b57f74:	00815504 	movi	r2,1364
  b57f78:	10c0032e 	bgeu	r2,r3,b57f88 <_free_r+0x304>
  b57f7c:	00801f84 	movi	r2,126
  b57f80:	00c0fc04 	movi	r3,1008
  b57f84:	003f8c06 	br	b57db8 <_free_r+0x134>
  b57f88:	3804d4ba 	srli	r2,r7,18
  b57f8c:	10801f04 	addi	r2,r2,124
  b57f90:	100690fa 	slli	r3,r2,3
  b57f94:	003f8806 	br	b57db8 <_free_r+0x134>

00b57f98 <__sfvwrite_r>:
  b57f98:	30800217 	ldw	r2,8(r6)
  b57f9c:	defff504 	addi	sp,sp,-44
  b57fa0:	df000915 	stw	fp,36(sp)
  b57fa4:	dd800715 	stw	r22,28(sp)
  b57fa8:	dc800315 	stw	r18,12(sp)
  b57fac:	dfc00a15 	stw	ra,40(sp)
  b57fb0:	ddc00815 	stw	r23,32(sp)
  b57fb4:	dd400615 	stw	r21,24(sp)
  b57fb8:	dd000515 	stw	r20,20(sp)
  b57fbc:	dcc00415 	stw	r19,16(sp)
  b57fc0:	dc400215 	stw	r17,8(sp)
  b57fc4:	dc000115 	stw	r16,4(sp)
  b57fc8:	302d883a 	mov	r22,r6
  b57fcc:	2039883a 	mov	fp,r4
  b57fd0:	2825883a 	mov	r18,r5
  b57fd4:	10001c26 	beq	r2,zero,b58048 <__sfvwrite_r+0xb0>
  b57fd8:	29c0030b 	ldhu	r7,12(r5)
  b57fdc:	3880020c 	andi	r2,r7,8
  b57fe0:	10002726 	beq	r2,zero,b58080 <__sfvwrite_r+0xe8>
  b57fe4:	28800417 	ldw	r2,16(r5)
  b57fe8:	10002526 	beq	r2,zero,b58080 <__sfvwrite_r+0xe8>
  b57fec:	3880008c 	andi	r2,r7,2
  b57ff0:	b5400017 	ldw	r21,0(r22)
  b57ff4:	10002826 	beq	r2,zero,b58098 <__sfvwrite_r+0x100>
  b57ff8:	0021883a 	mov	r16,zero
  b57ffc:	0023883a 	mov	r17,zero
  b58000:	880d883a 	mov	r6,r17
  b58004:	e009883a 	mov	r4,fp
  b58008:	00810004 	movi	r2,1024
  b5800c:	80006e26 	beq	r16,zero,b581c8 <__sfvwrite_r+0x230>
  b58010:	800f883a 	mov	r7,r16
  b58014:	91400717 	ldw	r5,28(r18)
  b58018:	1400012e 	bgeu	r2,r16,b58020 <__sfvwrite_r+0x88>
  b5801c:	100f883a 	mov	r7,r2
  b58020:	90c00917 	ldw	r3,36(r18)
  b58024:	183ee83a 	callr	r3
  b58028:	1007883a 	mov	r3,r2
  b5802c:	80a1c83a 	sub	r16,r16,r2
  b58030:	88a3883a 	add	r17,r17,r2
  b58034:	00806d0e 	bge	zero,r2,b581ec <__sfvwrite_r+0x254>
  b58038:	b0800217 	ldw	r2,8(r22)
  b5803c:	10c5c83a 	sub	r2,r2,r3
  b58040:	b0800215 	stw	r2,8(r22)
  b58044:	103fee1e 	bne	r2,zero,b58000 <__sfvwrite_r+0x68>
  b58048:	0009883a 	mov	r4,zero
  b5804c:	2005883a 	mov	r2,r4
  b58050:	dfc00a17 	ldw	ra,40(sp)
  b58054:	df000917 	ldw	fp,36(sp)
  b58058:	ddc00817 	ldw	r23,32(sp)
  b5805c:	dd800717 	ldw	r22,28(sp)
  b58060:	dd400617 	ldw	r21,24(sp)
  b58064:	dd000517 	ldw	r20,20(sp)
  b58068:	dcc00417 	ldw	r19,16(sp)
  b5806c:	dc800317 	ldw	r18,12(sp)
  b58070:	dc400217 	ldw	r17,8(sp)
  b58074:	dc000117 	ldw	r16,4(sp)
  b58078:	dec00b04 	addi	sp,sp,44
  b5807c:	f800283a 	ret
  b58080:	0b55d600 	call	b55d60 <__swsetup_r>
  b58084:	1000e41e 	bne	r2,zero,b58418 <__sfvwrite_r+0x480>
  b58088:	91c0030b 	ldhu	r7,12(r18)
  b5808c:	b5400017 	ldw	r21,0(r22)
  b58090:	3880008c 	andi	r2,r7,2
  b58094:	103fd81e 	bne	r2,zero,b57ff8 <__sfvwrite_r+0x60>
  b58098:	3880004c 	andi	r2,r7,1
  b5809c:	1005003a 	cmpeq	r2,r2,zero
  b580a0:	10005726 	beq	r2,zero,b58200 <__sfvwrite_r+0x268>
  b580a4:	0029883a 	mov	r20,zero
  b580a8:	002f883a 	mov	r23,zero
  b580ac:	a0004226 	beq	r20,zero,b581b8 <__sfvwrite_r+0x220>
  b580b0:	3880800c 	andi	r2,r7,512
  b580b4:	94000217 	ldw	r16,8(r18)
  b580b8:	10008b26 	beq	r2,zero,b582e8 <__sfvwrite_r+0x350>
  b580bc:	800d883a 	mov	r6,r16
  b580c0:	a400a536 	bltu	r20,r16,b58358 <__sfvwrite_r+0x3c0>
  b580c4:	3881200c 	andi	r2,r7,1152
  b580c8:	10002726 	beq	r2,zero,b58168 <__sfvwrite_r+0x1d0>
  b580cc:	90800517 	ldw	r2,20(r18)
  b580d0:	92000417 	ldw	r8,16(r18)
  b580d4:	91400017 	ldw	r5,0(r18)
  b580d8:	1087883a 	add	r3,r2,r2
  b580dc:	1887883a 	add	r3,r3,r2
  b580e0:	1808d7fa 	srli	r4,r3,31
  b580e4:	2a21c83a 	sub	r16,r5,r8
  b580e8:	80800044 	addi	r2,r16,1
  b580ec:	20c9883a 	add	r4,r4,r3
  b580f0:	2027d07a 	srai	r19,r4,1
  b580f4:	a085883a 	add	r2,r20,r2
  b580f8:	980d883a 	mov	r6,r19
  b580fc:	9880022e 	bgeu	r19,r2,b58108 <__sfvwrite_r+0x170>
  b58100:	1027883a 	mov	r19,r2
  b58104:	100d883a 	mov	r6,r2
  b58108:	3881000c 	andi	r2,r7,1024
  b5810c:	1000b826 	beq	r2,zero,b583f0 <__sfvwrite_r+0x458>
  b58110:	300b883a 	mov	r5,r6
  b58114:	e009883a 	mov	r4,fp
  b58118:	0b5880c0 	call	b5880c <_malloc_r>
  b5811c:	10003126 	beq	r2,zero,b581e4 <__sfvwrite_r+0x24c>
  b58120:	91400417 	ldw	r5,16(r18)
  b58124:	1009883a 	mov	r4,r2
  b58128:	800d883a 	mov	r6,r16
  b5812c:	1023883a 	mov	r17,r2
  b58130:	0b590300 	call	b59030 <memcpy>
  b58134:	90c0030b 	ldhu	r3,12(r18)
  b58138:	00beffc4 	movi	r2,-1025
  b5813c:	1886703a 	and	r3,r3,r2
  b58140:	18c02014 	ori	r3,r3,128
  b58144:	90c0030d 	sth	r3,12(r18)
  b58148:	9c07c83a 	sub	r3,r19,r16
  b5814c:	8c05883a 	add	r2,r17,r16
  b58150:	a00d883a 	mov	r6,r20
  b58154:	a021883a 	mov	r16,r20
  b58158:	90800015 	stw	r2,0(r18)
  b5815c:	90c00215 	stw	r3,8(r18)
  b58160:	94400415 	stw	r17,16(r18)
  b58164:	94c00515 	stw	r19,20(r18)
  b58168:	91000017 	ldw	r4,0(r18)
  b5816c:	b80b883a 	mov	r5,r23
  b58170:	a023883a 	mov	r17,r20
  b58174:	0b590d00 	call	b590d0 <memmove>
  b58178:	90c00217 	ldw	r3,8(r18)
  b5817c:	90800017 	ldw	r2,0(r18)
  b58180:	a027883a 	mov	r19,r20
  b58184:	1c07c83a 	sub	r3,r3,r16
  b58188:	1405883a 	add	r2,r2,r16
  b5818c:	90c00215 	stw	r3,8(r18)
  b58190:	a021883a 	mov	r16,r20
  b58194:	90800015 	stw	r2,0(r18)
  b58198:	b0800217 	ldw	r2,8(r22)
  b5819c:	1405c83a 	sub	r2,r2,r16
  b581a0:	b0800215 	stw	r2,8(r22)
  b581a4:	103fa826 	beq	r2,zero,b58048 <__sfvwrite_r+0xb0>
  b581a8:	a469c83a 	sub	r20,r20,r17
  b581ac:	91c0030b 	ldhu	r7,12(r18)
  b581b0:	bcef883a 	add	r23,r23,r19
  b581b4:	a03fbe1e 	bne	r20,zero,b580b0 <__sfvwrite_r+0x118>
  b581b8:	adc00017 	ldw	r23,0(r21)
  b581bc:	ad000117 	ldw	r20,4(r21)
  b581c0:	ad400204 	addi	r21,r21,8
  b581c4:	003fb906 	br	b580ac <__sfvwrite_r+0x114>
  b581c8:	ac400017 	ldw	r17,0(r21)
  b581cc:	ac000117 	ldw	r16,4(r21)
  b581d0:	ad400204 	addi	r21,r21,8
  b581d4:	003f8a06 	br	b58000 <__sfvwrite_r+0x68>
  b581d8:	91400417 	ldw	r5,16(r18)
  b581dc:	e009883a 	mov	r4,fp
  b581e0:	0b57c840 	call	b57c84 <_free_r>
  b581e4:	00800304 	movi	r2,12
  b581e8:	e0800015 	stw	r2,0(fp)
  b581ec:	9080030b 	ldhu	r2,12(r18)
  b581f0:	013fffc4 	movi	r4,-1
  b581f4:	10801014 	ori	r2,r2,64
  b581f8:	9080030d 	sth	r2,12(r18)
  b581fc:	003f9306 	br	b5804c <__sfvwrite_r+0xb4>
  b58200:	0027883a 	mov	r19,zero
  b58204:	002f883a 	mov	r23,zero
  b58208:	d8000015 	stw	zero,0(sp)
  b5820c:	0029883a 	mov	r20,zero
  b58210:	98001e26 	beq	r19,zero,b5828c <__sfvwrite_r+0x2f4>
  b58214:	d8c00017 	ldw	r3,0(sp)
  b58218:	1804c03a 	cmpne	r2,r3,zero
  b5821c:	10005e26 	beq	r2,zero,b58398 <__sfvwrite_r+0x400>
  b58220:	9821883a 	mov	r16,r19
  b58224:	a4c0012e 	bgeu	r20,r19,b5822c <__sfvwrite_r+0x294>
  b58228:	a021883a 	mov	r16,r20
  b5822c:	91000017 	ldw	r4,0(r18)
  b58230:	90800417 	ldw	r2,16(r18)
  b58234:	91800217 	ldw	r6,8(r18)
  b58238:	91c00517 	ldw	r7,20(r18)
  b5823c:	1100022e 	bgeu	r2,r4,b58248 <__sfvwrite_r+0x2b0>
  b58240:	31e3883a 	add	r17,r6,r7
  b58244:	8c001616 	blt	r17,r16,b582a0 <__sfvwrite_r+0x308>
  b58248:	81c03816 	blt	r16,r7,b5832c <__sfvwrite_r+0x394>
  b5824c:	90c00917 	ldw	r3,36(r18)
  b58250:	91400717 	ldw	r5,28(r18)
  b58254:	e009883a 	mov	r4,fp
  b58258:	b80d883a 	mov	r6,r23
  b5825c:	183ee83a 	callr	r3
  b58260:	1023883a 	mov	r17,r2
  b58264:	00bfe10e 	bge	zero,r2,b581ec <__sfvwrite_r+0x254>
  b58268:	a469c83a 	sub	r20,r20,r17
  b5826c:	a0001826 	beq	r20,zero,b582d0 <__sfvwrite_r+0x338>
  b58270:	b0800217 	ldw	r2,8(r22)
  b58274:	1445c83a 	sub	r2,r2,r17
  b58278:	b0800215 	stw	r2,8(r22)
  b5827c:	103f7226 	beq	r2,zero,b58048 <__sfvwrite_r+0xb0>
  b58280:	9c67c83a 	sub	r19,r19,r17
  b58284:	bc6f883a 	add	r23,r23,r17
  b58288:	983fe21e 	bne	r19,zero,b58214 <__sfvwrite_r+0x27c>
  b5828c:	adc00017 	ldw	r23,0(r21)
  b58290:	acc00117 	ldw	r19,4(r21)
  b58294:	ad400204 	addi	r21,r21,8
  b58298:	d8000015 	stw	zero,0(sp)
  b5829c:	003fdc06 	br	b58210 <__sfvwrite_r+0x278>
  b582a0:	b80b883a 	mov	r5,r23
  b582a4:	880d883a 	mov	r6,r17
  b582a8:	0b590d00 	call	b590d0 <memmove>
  b582ac:	90c00017 	ldw	r3,0(r18)
  b582b0:	e009883a 	mov	r4,fp
  b582b4:	900b883a 	mov	r5,r18
  b582b8:	1c47883a 	add	r3,r3,r17
  b582bc:	90c00015 	stw	r3,0(r18)
  b582c0:	0b576680 	call	b57668 <_fflush_r>
  b582c4:	103fc91e 	bne	r2,zero,b581ec <__sfvwrite_r+0x254>
  b582c8:	a469c83a 	sub	r20,r20,r17
  b582cc:	a03fe81e 	bne	r20,zero,b58270 <__sfvwrite_r+0x2d8>
  b582d0:	e009883a 	mov	r4,fp
  b582d4:	900b883a 	mov	r5,r18
  b582d8:	0b576680 	call	b57668 <_fflush_r>
  b582dc:	103fc31e 	bne	r2,zero,b581ec <__sfvwrite_r+0x254>
  b582e0:	d8000015 	stw	zero,0(sp)
  b582e4:	003fe206 	br	b58270 <__sfvwrite_r+0x2d8>
  b582e8:	91000017 	ldw	r4,0(r18)
  b582ec:	90800417 	ldw	r2,16(r18)
  b582f0:	1100022e 	bgeu	r2,r4,b582fc <__sfvwrite_r+0x364>
  b582f4:	8023883a 	mov	r17,r16
  b582f8:	85003136 	bltu	r16,r20,b583c0 <__sfvwrite_r+0x428>
  b582fc:	91c00517 	ldw	r7,20(r18)
  b58300:	a1c01836 	bltu	r20,r7,b58364 <__sfvwrite_r+0x3cc>
  b58304:	90c00917 	ldw	r3,36(r18)
  b58308:	91400717 	ldw	r5,28(r18)
  b5830c:	e009883a 	mov	r4,fp
  b58310:	b80d883a 	mov	r6,r23
  b58314:	183ee83a 	callr	r3
  b58318:	1021883a 	mov	r16,r2
  b5831c:	00bfb30e 	bge	zero,r2,b581ec <__sfvwrite_r+0x254>
  b58320:	1023883a 	mov	r17,r2
  b58324:	1027883a 	mov	r19,r2
  b58328:	003f9b06 	br	b58198 <__sfvwrite_r+0x200>
  b5832c:	b80b883a 	mov	r5,r23
  b58330:	800d883a 	mov	r6,r16
  b58334:	0b590d00 	call	b590d0 <memmove>
  b58338:	90c00217 	ldw	r3,8(r18)
  b5833c:	90800017 	ldw	r2,0(r18)
  b58340:	8023883a 	mov	r17,r16
  b58344:	1c07c83a 	sub	r3,r3,r16
  b58348:	1405883a 	add	r2,r2,r16
  b5834c:	90c00215 	stw	r3,8(r18)
  b58350:	90800015 	stw	r2,0(r18)
  b58354:	003fc406 	br	b58268 <__sfvwrite_r+0x2d0>
  b58358:	a00d883a 	mov	r6,r20
  b5835c:	a021883a 	mov	r16,r20
  b58360:	003f8106 	br	b58168 <__sfvwrite_r+0x1d0>
  b58364:	b80b883a 	mov	r5,r23
  b58368:	a00d883a 	mov	r6,r20
  b5836c:	0b590d00 	call	b590d0 <memmove>
  b58370:	90c00217 	ldw	r3,8(r18)
  b58374:	90800017 	ldw	r2,0(r18)
  b58378:	a021883a 	mov	r16,r20
  b5837c:	1d07c83a 	sub	r3,r3,r20
  b58380:	1505883a 	add	r2,r2,r20
  b58384:	a023883a 	mov	r17,r20
  b58388:	a027883a 	mov	r19,r20
  b5838c:	90c00215 	stw	r3,8(r18)
  b58390:	90800015 	stw	r2,0(r18)
  b58394:	003f8006 	br	b58198 <__sfvwrite_r+0x200>
  b58398:	b809883a 	mov	r4,r23
  b5839c:	01400284 	movi	r5,10
  b583a0:	980d883a 	mov	r6,r19
  b583a4:	0b58f4c0 	call	b58f4c <memchr>
  b583a8:	10001726 	beq	r2,zero,b58408 <__sfvwrite_r+0x470>
  b583ac:	15c5c83a 	sub	r2,r2,r23
  b583b0:	15000044 	addi	r20,r2,1
  b583b4:	00800044 	movi	r2,1
  b583b8:	d8800015 	stw	r2,0(sp)
  b583bc:	003f9806 	br	b58220 <__sfvwrite_r+0x288>
  b583c0:	b80b883a 	mov	r5,r23
  b583c4:	800d883a 	mov	r6,r16
  b583c8:	0b590d00 	call	b590d0 <memmove>
  b583cc:	90c00017 	ldw	r3,0(r18)
  b583d0:	e009883a 	mov	r4,fp
  b583d4:	900b883a 	mov	r5,r18
  b583d8:	1c07883a 	add	r3,r3,r16
  b583dc:	90c00015 	stw	r3,0(r18)
  b583e0:	8027883a 	mov	r19,r16
  b583e4:	0b576680 	call	b57668 <_fflush_r>
  b583e8:	103f6b26 	beq	r2,zero,b58198 <__sfvwrite_r+0x200>
  b583ec:	003f7f06 	br	b581ec <__sfvwrite_r+0x254>
  b583f0:	400b883a 	mov	r5,r8
  b583f4:	e009883a 	mov	r4,fp
  b583f8:	0b5a23c0 	call	b5a23c <_realloc_r>
  b583fc:	103f7626 	beq	r2,zero,b581d8 <__sfvwrite_r+0x240>
  b58400:	1023883a 	mov	r17,r2
  b58404:	003f5006 	br	b58148 <__sfvwrite_r+0x1b0>
  b58408:	00c00044 	movi	r3,1
  b5840c:	9d000044 	addi	r20,r19,1
  b58410:	d8c00015 	stw	r3,0(sp)
  b58414:	003f8206 	br	b58220 <__sfvwrite_r+0x288>
  b58418:	9080030b 	ldhu	r2,12(r18)
  b5841c:	00c00244 	movi	r3,9
  b58420:	013fffc4 	movi	r4,-1
  b58424:	10801014 	ori	r2,r2,64
  b58428:	9080030d 	sth	r2,12(r18)
  b5842c:	e0c00015 	stw	r3,0(fp)
  b58430:	003f0606 	br	b5804c <__sfvwrite_r+0xb4>

00b58434 <_fwalk_reent>:
  b58434:	defff704 	addi	sp,sp,-36
  b58438:	dcc00315 	stw	r19,12(sp)
  b5843c:	24c0b804 	addi	r19,r4,736
  b58440:	dd800615 	stw	r22,24(sp)
  b58444:	dd400515 	stw	r21,20(sp)
  b58448:	dfc00815 	stw	ra,32(sp)
  b5844c:	ddc00715 	stw	r23,28(sp)
  b58450:	dd000415 	stw	r20,16(sp)
  b58454:	dc800215 	stw	r18,8(sp)
  b58458:	dc400115 	stw	r17,4(sp)
  b5845c:	dc000015 	stw	r16,0(sp)
  b58460:	202b883a 	mov	r21,r4
  b58464:	282d883a 	mov	r22,r5
  b58468:	0b578f00 	call	b578f0 <__sfp_lock_acquire>
  b5846c:	98002126 	beq	r19,zero,b584f4 <_fwalk_reent+0xc0>
  b58470:	002f883a 	mov	r23,zero
  b58474:	9c800117 	ldw	r18,4(r19)
  b58478:	9c000217 	ldw	r16,8(r19)
  b5847c:	90bfffc4 	addi	r2,r18,-1
  b58480:	10000d16 	blt	r2,zero,b584b8 <_fwalk_reent+0x84>
  b58484:	0023883a 	mov	r17,zero
  b58488:	053fffc4 	movi	r20,-1
  b5848c:	8080030f 	ldh	r2,12(r16)
  b58490:	8c400044 	addi	r17,r17,1
  b58494:	10000626 	beq	r2,zero,b584b0 <_fwalk_reent+0x7c>
  b58498:	8080038f 	ldh	r2,14(r16)
  b5849c:	800b883a 	mov	r5,r16
  b584a0:	a809883a 	mov	r4,r21
  b584a4:	15000226 	beq	r2,r20,b584b0 <_fwalk_reent+0x7c>
  b584a8:	b03ee83a 	callr	r22
  b584ac:	b8aeb03a 	or	r23,r23,r2
  b584b0:	84001704 	addi	r16,r16,92
  b584b4:	947ff51e 	bne	r18,r17,b5848c <_fwalk_reent+0x58>
  b584b8:	9cc00017 	ldw	r19,0(r19)
  b584bc:	983fed1e 	bne	r19,zero,b58474 <_fwalk_reent+0x40>
  b584c0:	0b578f40 	call	b578f4 <__sfp_lock_release>
  b584c4:	b805883a 	mov	r2,r23
  b584c8:	dfc00817 	ldw	ra,32(sp)
  b584cc:	ddc00717 	ldw	r23,28(sp)
  b584d0:	dd800617 	ldw	r22,24(sp)
  b584d4:	dd400517 	ldw	r21,20(sp)
  b584d8:	dd000417 	ldw	r20,16(sp)
  b584dc:	dcc00317 	ldw	r19,12(sp)
  b584e0:	dc800217 	ldw	r18,8(sp)
  b584e4:	dc400117 	ldw	r17,4(sp)
  b584e8:	dc000017 	ldw	r16,0(sp)
  b584ec:	dec00904 	addi	sp,sp,36
  b584f0:	f800283a 	ret
  b584f4:	002f883a 	mov	r23,zero
  b584f8:	003ff106 	br	b584c0 <_fwalk_reent+0x8c>

00b584fc <_fwalk>:
  b584fc:	defff804 	addi	sp,sp,-32
  b58500:	dcc00315 	stw	r19,12(sp)
  b58504:	24c0b804 	addi	r19,r4,736
  b58508:	dd400515 	stw	r21,20(sp)
  b5850c:	dfc00715 	stw	ra,28(sp)
  b58510:	dd800615 	stw	r22,24(sp)
  b58514:	dd000415 	stw	r20,16(sp)
  b58518:	dc800215 	stw	r18,8(sp)
  b5851c:	dc400115 	stw	r17,4(sp)
  b58520:	dc000015 	stw	r16,0(sp)
  b58524:	282b883a 	mov	r21,r5
  b58528:	0b578f00 	call	b578f0 <__sfp_lock_acquire>
  b5852c:	98001f26 	beq	r19,zero,b585ac <_fwalk+0xb0>
  b58530:	002d883a 	mov	r22,zero
  b58534:	9c800117 	ldw	r18,4(r19)
  b58538:	9c000217 	ldw	r16,8(r19)
  b5853c:	90bfffc4 	addi	r2,r18,-1
  b58540:	10000c16 	blt	r2,zero,b58574 <_fwalk+0x78>
  b58544:	0023883a 	mov	r17,zero
  b58548:	053fffc4 	movi	r20,-1
  b5854c:	8080030f 	ldh	r2,12(r16)
  b58550:	8c400044 	addi	r17,r17,1
  b58554:	10000526 	beq	r2,zero,b5856c <_fwalk+0x70>
  b58558:	8080038f 	ldh	r2,14(r16)
  b5855c:	8009883a 	mov	r4,r16
  b58560:	15000226 	beq	r2,r20,b5856c <_fwalk+0x70>
  b58564:	a83ee83a 	callr	r21
  b58568:	b0acb03a 	or	r22,r22,r2
  b5856c:	84001704 	addi	r16,r16,92
  b58570:	947ff61e 	bne	r18,r17,b5854c <_fwalk+0x50>
  b58574:	9cc00017 	ldw	r19,0(r19)
  b58578:	983fee1e 	bne	r19,zero,b58534 <_fwalk+0x38>
  b5857c:	0b578f40 	call	b578f4 <__sfp_lock_release>
  b58580:	b005883a 	mov	r2,r22
  b58584:	dfc00717 	ldw	ra,28(sp)
  b58588:	dd800617 	ldw	r22,24(sp)
  b5858c:	dd400517 	ldw	r21,20(sp)
  b58590:	dd000417 	ldw	r20,16(sp)
  b58594:	dcc00317 	ldw	r19,12(sp)
  b58598:	dc800217 	ldw	r18,8(sp)
  b5859c:	dc400117 	ldw	r17,4(sp)
  b585a0:	dc000017 	ldw	r16,0(sp)
  b585a4:	dec00804 	addi	sp,sp,32
  b585a8:	f800283a 	ret
  b585ac:	002d883a 	mov	r22,zero
  b585b0:	003ff206 	br	b5857c <_fwalk+0x80>

00b585b4 <__locale_charset>:
  b585b4:	d0a00b17 	ldw	r2,-32724(gp)
  b585b8:	f800283a 	ret

00b585bc <_localeconv_r>:
  b585bc:	00802db4 	movhi	r2,182
  b585c0:	10846f04 	addi	r2,r2,4540
  b585c4:	f800283a 	ret

00b585c8 <localeconv>:
  b585c8:	00802db4 	movhi	r2,182
  b585cc:	108bf904 	addi	r2,r2,12260
  b585d0:	11000017 	ldw	r4,0(r2)
  b585d4:	0b585bc1 	jmpi	b585bc <_localeconv_r>

00b585d8 <_setlocale_r>:
  b585d8:	defffc04 	addi	sp,sp,-16
  b585dc:	00c02db4 	movhi	r3,182
  b585e0:	18c44704 	addi	r3,r3,4380
  b585e4:	dc800215 	stw	r18,8(sp)
  b585e8:	dc400115 	stw	r17,4(sp)
  b585ec:	dc000015 	stw	r16,0(sp)
  b585f0:	2023883a 	mov	r17,r4
  b585f4:	2825883a 	mov	r18,r5
  b585f8:	dfc00315 	stw	ra,12(sp)
  b585fc:	3021883a 	mov	r16,r6
  b58600:	3009883a 	mov	r4,r6
  b58604:	180b883a 	mov	r5,r3
  b58608:	30000926 	beq	r6,zero,b58630 <_setlocale_r+0x58>
  b5860c:	0b5aa5c0 	call	b5aa5c <strcmp>
  b58610:	8009883a 	mov	r4,r16
  b58614:	01402db4 	movhi	r5,182
  b58618:	29445804 	addi	r5,r5,4448
  b5861c:	10000b1e 	bne	r2,zero,b5864c <_setlocale_r+0x74>
  b58620:	8c000d15 	stw	r16,52(r17)
  b58624:	8c800c15 	stw	r18,48(r17)
  b58628:	00c02db4 	movhi	r3,182
  b5862c:	18c44704 	addi	r3,r3,4380
  b58630:	1805883a 	mov	r2,r3
  b58634:	dfc00317 	ldw	ra,12(sp)
  b58638:	dc800217 	ldw	r18,8(sp)
  b5863c:	dc400117 	ldw	r17,4(sp)
  b58640:	dc000017 	ldw	r16,0(sp)
  b58644:	dec00404 	addi	sp,sp,16
  b58648:	f800283a 	ret
  b5864c:	0b5aa5c0 	call	b5aa5c <strcmp>
  b58650:	0007883a 	mov	r3,zero
  b58654:	103ff226 	beq	r2,zero,b58620 <_setlocale_r+0x48>
  b58658:	003ff506 	br	b58630 <_setlocale_r+0x58>

00b5865c <setlocale>:
  b5865c:	01802db4 	movhi	r6,182
  b58660:	318bf904 	addi	r6,r6,12260
  b58664:	2007883a 	mov	r3,r4
  b58668:	31000017 	ldw	r4,0(r6)
  b5866c:	280d883a 	mov	r6,r5
  b58670:	180b883a 	mov	r5,r3
  b58674:	0b585d81 	jmpi	b585d8 <_setlocale_r>

00b58678 <__smakebuf_r>:
  b58678:	2880030b 	ldhu	r2,12(r5)
  b5867c:	deffed04 	addi	sp,sp,-76
  b58680:	dc401015 	stw	r17,64(sp)
  b58684:	1080008c 	andi	r2,r2,2
  b58688:	dc000f15 	stw	r16,60(sp)
  b5868c:	dfc01215 	stw	ra,72(sp)
  b58690:	dc801115 	stw	r18,68(sp)
  b58694:	2821883a 	mov	r16,r5
  b58698:	2023883a 	mov	r17,r4
  b5869c:	10000b26 	beq	r2,zero,b586cc <__smakebuf_r+0x54>
  b586a0:	28c010c4 	addi	r3,r5,67
  b586a4:	00800044 	movi	r2,1
  b586a8:	28800515 	stw	r2,20(r5)
  b586ac:	28c00415 	stw	r3,16(r5)
  b586b0:	28c00015 	stw	r3,0(r5)
  b586b4:	dfc01217 	ldw	ra,72(sp)
  b586b8:	dc801117 	ldw	r18,68(sp)
  b586bc:	dc401017 	ldw	r17,64(sp)
  b586c0:	dc000f17 	ldw	r16,60(sp)
  b586c4:	dec01304 	addi	sp,sp,76
  b586c8:	f800283a 	ret
  b586cc:	2940038f 	ldh	r5,14(r5)
  b586d0:	28002116 	blt	r5,zero,b58758 <__smakebuf_r+0xe0>
  b586d4:	d80d883a 	mov	r6,sp
  b586d8:	0b5add80 	call	b5add8 <_fstat_r>
  b586dc:	10001e16 	blt	r2,zero,b58758 <__smakebuf_r+0xe0>
  b586e0:	d8800117 	ldw	r2,4(sp)
  b586e4:	00e00014 	movui	r3,32768
  b586e8:	113c000c 	andi	r4,r2,61440
  b586ec:	20c03126 	beq	r4,r3,b587b4 <__smakebuf_r+0x13c>
  b586f0:	8080030b 	ldhu	r2,12(r16)
  b586f4:	00c80004 	movi	r3,8192
  b586f8:	10820014 	ori	r2,r2,2048
  b586fc:	8080030d 	sth	r2,12(r16)
  b58700:	20c01e26 	beq	r4,r3,b5877c <__smakebuf_r+0x104>
  b58704:	04810004 	movi	r18,1024
  b58708:	8809883a 	mov	r4,r17
  b5870c:	900b883a 	mov	r5,r18
  b58710:	0b5880c0 	call	b5880c <_malloc_r>
  b58714:	1009883a 	mov	r4,r2
  b58718:	10003126 	beq	r2,zero,b587e0 <__smakebuf_r+0x168>
  b5871c:	80c0030b 	ldhu	r3,12(r16)
  b58720:	00802d74 	movhi	r2,181
  b58724:	109e7904 	addi	r2,r2,31204
  b58728:	88800f15 	stw	r2,60(r17)
  b5872c:	18c02014 	ori	r3,r3,128
  b58730:	84800515 	stw	r18,20(r16)
  b58734:	80c0030d 	sth	r3,12(r16)
  b58738:	81000415 	stw	r4,16(r16)
  b5873c:	81000015 	stw	r4,0(r16)
  b58740:	dfc01217 	ldw	ra,72(sp)
  b58744:	dc801117 	ldw	r18,68(sp)
  b58748:	dc401017 	ldw	r17,64(sp)
  b5874c:	dc000f17 	ldw	r16,60(sp)
  b58750:	dec01304 	addi	sp,sp,76
  b58754:	f800283a 	ret
  b58758:	80c0030b 	ldhu	r3,12(r16)
  b5875c:	1880200c 	andi	r2,r3,128
  b58760:	10000426 	beq	r2,zero,b58774 <__smakebuf_r+0xfc>
  b58764:	04801004 	movi	r18,64
  b58768:	18820014 	ori	r2,r3,2048
  b5876c:	8080030d 	sth	r2,12(r16)
  b58770:	003fe506 	br	b58708 <__smakebuf_r+0x90>
  b58774:	04810004 	movi	r18,1024
  b58778:	003ffb06 	br	b58768 <__smakebuf_r+0xf0>
  b5877c:	8140038f 	ldh	r5,14(r16)
  b58780:	8809883a 	mov	r4,r17
  b58784:	0b5ae4c0 	call	b5ae4c <_isatty_r>
  b58788:	103fde26 	beq	r2,zero,b58704 <__smakebuf_r+0x8c>
  b5878c:	8080030b 	ldhu	r2,12(r16)
  b58790:	80c010c4 	addi	r3,r16,67
  b58794:	04810004 	movi	r18,1024
  b58798:	10800054 	ori	r2,r2,1
  b5879c:	8080030d 	sth	r2,12(r16)
  b587a0:	00800044 	movi	r2,1
  b587a4:	80c00415 	stw	r3,16(r16)
  b587a8:	80800515 	stw	r2,20(r16)
  b587ac:	80c00015 	stw	r3,0(r16)
  b587b0:	003fd506 	br	b58708 <__smakebuf_r+0x90>
  b587b4:	80c00a17 	ldw	r3,40(r16)
  b587b8:	00802db4 	movhi	r2,182
  b587bc:	10aa4604 	addi	r2,r2,-22248
  b587c0:	18bfcb1e 	bne	r3,r2,b586f0 <__smakebuf_r+0x78>
  b587c4:	8080030b 	ldhu	r2,12(r16)
  b587c8:	00c10004 	movi	r3,1024
  b587cc:	1825883a 	mov	r18,r3
  b587d0:	10c4b03a 	or	r2,r2,r3
  b587d4:	8080030d 	sth	r2,12(r16)
  b587d8:	80c01315 	stw	r3,76(r16)
  b587dc:	003fca06 	br	b58708 <__smakebuf_r+0x90>
  b587e0:	8100030b 	ldhu	r4,12(r16)
  b587e4:	2080800c 	andi	r2,r4,512
  b587e8:	103fb21e 	bne	r2,zero,b586b4 <__smakebuf_r+0x3c>
  b587ec:	80c010c4 	addi	r3,r16,67
  b587f0:	21000094 	ori	r4,r4,2
  b587f4:	00800044 	movi	r2,1
  b587f8:	80800515 	stw	r2,20(r16)
  b587fc:	8100030d 	sth	r4,12(r16)
  b58800:	80c00415 	stw	r3,16(r16)
  b58804:	80c00015 	stw	r3,0(r16)
  b58808:	003faa06 	br	b586b4 <__smakebuf_r+0x3c>

00b5880c <_malloc_r>:
  b5880c:	defff604 	addi	sp,sp,-40
  b58810:	28c002c4 	addi	r3,r5,11
  b58814:	00800584 	movi	r2,22
  b58818:	dc800215 	stw	r18,8(sp)
  b5881c:	dfc00915 	stw	ra,36(sp)
  b58820:	df000815 	stw	fp,32(sp)
  b58824:	ddc00715 	stw	r23,28(sp)
  b58828:	dd800615 	stw	r22,24(sp)
  b5882c:	dd400515 	stw	r21,20(sp)
  b58830:	dd000415 	stw	r20,16(sp)
  b58834:	dcc00315 	stw	r19,12(sp)
  b58838:	dc400115 	stw	r17,4(sp)
  b5883c:	dc000015 	stw	r16,0(sp)
  b58840:	2025883a 	mov	r18,r4
  b58844:	10c01236 	bltu	r2,r3,b58890 <_malloc_r+0x84>
  b58848:	04400404 	movi	r17,16
  b5884c:	8940142e 	bgeu	r17,r5,b588a0 <_malloc_r+0x94>
  b58850:	00800304 	movi	r2,12
  b58854:	0007883a 	mov	r3,zero
  b58858:	90800015 	stw	r2,0(r18)
  b5885c:	1805883a 	mov	r2,r3
  b58860:	dfc00917 	ldw	ra,36(sp)
  b58864:	df000817 	ldw	fp,32(sp)
  b58868:	ddc00717 	ldw	r23,28(sp)
  b5886c:	dd800617 	ldw	r22,24(sp)
  b58870:	dd400517 	ldw	r21,20(sp)
  b58874:	dd000417 	ldw	r20,16(sp)
  b58878:	dcc00317 	ldw	r19,12(sp)
  b5887c:	dc800217 	ldw	r18,8(sp)
  b58880:	dc400117 	ldw	r17,4(sp)
  b58884:	dc000017 	ldw	r16,0(sp)
  b58888:	dec00a04 	addi	sp,sp,40
  b5888c:	f800283a 	ret
  b58890:	00bffe04 	movi	r2,-8
  b58894:	18a2703a 	and	r17,r3,r2
  b58898:	883fed16 	blt	r17,zero,b58850 <_malloc_r+0x44>
  b5889c:	897fec36 	bltu	r17,r5,b58850 <_malloc_r+0x44>
  b588a0:	9009883a 	mov	r4,r18
  b588a4:	0b5cc500 	call	b5cc50 <__malloc_lock>
  b588a8:	00807dc4 	movi	r2,503
  b588ac:	14402b2e 	bgeu	r2,r17,b5895c <_malloc_r+0x150>
  b588b0:	8806d27a 	srli	r3,r17,9
  b588b4:	18003f1e 	bne	r3,zero,b589b4 <_malloc_r+0x1a8>
  b588b8:	880cd0fa 	srli	r6,r17,3
  b588bc:	300490fa 	slli	r2,r6,3
  b588c0:	02c02db4 	movhi	r11,182
  b588c4:	5ac61c04 	addi	r11,r11,6256
  b588c8:	12cb883a 	add	r5,r2,r11
  b588cc:	2c000317 	ldw	r16,12(r5)
  b588d0:	580f883a 	mov	r7,r11
  b588d4:	2c00041e 	bne	r5,r16,b588e8 <_malloc_r+0xdc>
  b588d8:	00000a06 	br	b58904 <_malloc_r+0xf8>
  b588dc:	1800860e 	bge	r3,zero,b58af8 <_malloc_r+0x2ec>
  b588e0:	84000317 	ldw	r16,12(r16)
  b588e4:	2c000726 	beq	r5,r16,b58904 <_malloc_r+0xf8>
  b588e8:	80800117 	ldw	r2,4(r16)
  b588ec:	00ffff04 	movi	r3,-4
  b588f0:	10c8703a 	and	r4,r2,r3
  b588f4:	2447c83a 	sub	r3,r4,r17
  b588f8:	008003c4 	movi	r2,15
  b588fc:	10fff70e 	bge	r2,r3,b588dc <_malloc_r+0xd0>
  b58900:	31bfffc4 	addi	r6,r6,-1
  b58904:	32400044 	addi	r9,r6,1
  b58908:	02802db4 	movhi	r10,182
  b5890c:	52861e04 	addi	r10,r10,6264
  b58910:	54000217 	ldw	r16,8(r10)
  b58914:	8280a026 	beq	r16,r10,b58b98 <_malloc_r+0x38c>
  b58918:	80800117 	ldw	r2,4(r16)
  b5891c:	00ffff04 	movi	r3,-4
  b58920:	10ca703a 	and	r5,r2,r3
  b58924:	2c4dc83a 	sub	r6,r5,r17
  b58928:	008003c4 	movi	r2,15
  b5892c:	11808316 	blt	r2,r6,b58b3c <_malloc_r+0x330>
  b58930:	52800315 	stw	r10,12(r10)
  b58934:	52800215 	stw	r10,8(r10)
  b58938:	30002916 	blt	r6,zero,b589e0 <_malloc_r+0x1d4>
  b5893c:	8147883a 	add	r3,r16,r5
  b58940:	18800117 	ldw	r2,4(r3)
  b58944:	9009883a 	mov	r4,r18
  b58948:	10800054 	ori	r2,r2,1
  b5894c:	18800115 	stw	r2,4(r3)
  b58950:	0b5cc700 	call	b5cc70 <__malloc_unlock>
  b58954:	80c00204 	addi	r3,r16,8
  b58958:	003fc006 	br	b5885c <_malloc_r+0x50>
  b5895c:	02c02db4 	movhi	r11,182
  b58960:	5ac61c04 	addi	r11,r11,6256
  b58964:	8ac5883a 	add	r2,r17,r11
  b58968:	14000317 	ldw	r16,12(r2)
  b5896c:	580f883a 	mov	r7,r11
  b58970:	8806d0fa 	srli	r3,r17,3
  b58974:	14006c26 	beq	r2,r16,b58b28 <_malloc_r+0x31c>
  b58978:	80c00117 	ldw	r3,4(r16)
  b5897c:	00bfff04 	movi	r2,-4
  b58980:	81800317 	ldw	r6,12(r16)
  b58984:	1886703a 	and	r3,r3,r2
  b58988:	80c7883a 	add	r3,r16,r3
  b5898c:	18800117 	ldw	r2,4(r3)
  b58990:	81400217 	ldw	r5,8(r16)
  b58994:	9009883a 	mov	r4,r18
  b58998:	10800054 	ori	r2,r2,1
  b5899c:	18800115 	stw	r2,4(r3)
  b589a0:	31400215 	stw	r5,8(r6)
  b589a4:	29800315 	stw	r6,12(r5)
  b589a8:	0b5cc700 	call	b5cc70 <__malloc_unlock>
  b589ac:	80c00204 	addi	r3,r16,8
  b589b0:	003faa06 	br	b5885c <_malloc_r+0x50>
  b589b4:	00800104 	movi	r2,4
  b589b8:	10c0052e 	bgeu	r2,r3,b589d0 <_malloc_r+0x1c4>
  b589bc:	00800504 	movi	r2,20
  b589c0:	10c07836 	bltu	r2,r3,b58ba4 <_malloc_r+0x398>
  b589c4:	198016c4 	addi	r6,r3,91
  b589c8:	300490fa 	slli	r2,r6,3
  b589cc:	003fbc06 	br	b588c0 <_malloc_r+0xb4>
  b589d0:	8804d1ba 	srli	r2,r17,6
  b589d4:	11800e04 	addi	r6,r2,56
  b589d8:	300490fa 	slli	r2,r6,3
  b589dc:	003fb806 	br	b588c0 <_malloc_r+0xb4>
  b589e0:	00807fc4 	movi	r2,511
  b589e4:	1140bb36 	bltu	r2,r5,b58cd4 <_malloc_r+0x4c8>
  b589e8:	2806d0fa 	srli	r3,r5,3
  b589ec:	573ffe04 	addi	fp,r10,-8
  b589f0:	00800044 	movi	r2,1
  b589f4:	180890fa 	slli	r4,r3,3
  b589f8:	1807d0ba 	srai	r3,r3,2
  b589fc:	e1c00117 	ldw	r7,4(fp)
  b58a00:	5909883a 	add	r4,r11,r4
  b58a04:	21400217 	ldw	r5,8(r4)
  b58a08:	10c4983a 	sll	r2,r2,r3
  b58a0c:	81000315 	stw	r4,12(r16)
  b58a10:	81400215 	stw	r5,8(r16)
  b58a14:	388eb03a 	or	r7,r7,r2
  b58a18:	2c000315 	stw	r16,12(r5)
  b58a1c:	24000215 	stw	r16,8(r4)
  b58a20:	e1c00115 	stw	r7,4(fp)
  b58a24:	4807883a 	mov	r3,r9
  b58a28:	4800cd16 	blt	r9,zero,b58d60 <_malloc_r+0x554>
  b58a2c:	1807d0ba 	srai	r3,r3,2
  b58a30:	00800044 	movi	r2,1
  b58a34:	10c8983a 	sll	r4,r2,r3
  b58a38:	39004436 	bltu	r7,r4,b58b4c <_malloc_r+0x340>
  b58a3c:	21c4703a 	and	r2,r4,r7
  b58a40:	10000a1e 	bne	r2,zero,b58a6c <_malloc_r+0x260>
  b58a44:	2109883a 	add	r4,r4,r4
  b58a48:	00bfff04 	movi	r2,-4
  b58a4c:	4884703a 	and	r2,r9,r2
  b58a50:	3906703a 	and	r3,r7,r4
  b58a54:	12400104 	addi	r9,r2,4
  b58a58:	1800041e 	bne	r3,zero,b58a6c <_malloc_r+0x260>
  b58a5c:	2109883a 	add	r4,r4,r4
  b58a60:	3904703a 	and	r2,r7,r4
  b58a64:	4a400104 	addi	r9,r9,4
  b58a68:	103ffc26 	beq	r2,zero,b58a5c <_malloc_r+0x250>
  b58a6c:	480490fa 	slli	r2,r9,3
  b58a70:	4819883a 	mov	r12,r9
  b58a74:	023fff04 	movi	r8,-4
  b58a78:	589b883a 	add	r13,r11,r2
  b58a7c:	6807883a 	mov	r3,r13
  b58a80:	014003c4 	movi	r5,15
  b58a84:	1c000317 	ldw	r16,12(r3)
  b58a88:	1c00041e 	bne	r3,r16,b58a9c <_malloc_r+0x290>
  b58a8c:	0000a706 	br	b58d2c <_malloc_r+0x520>
  b58a90:	3000ab0e 	bge	r6,zero,b58d40 <_malloc_r+0x534>
  b58a94:	84000317 	ldw	r16,12(r16)
  b58a98:	1c00a426 	beq	r3,r16,b58d2c <_malloc_r+0x520>
  b58a9c:	80800117 	ldw	r2,4(r16)
  b58aa0:	1204703a 	and	r2,r2,r8
  b58aa4:	144dc83a 	sub	r6,r2,r17
  b58aa8:	29bff90e 	bge	r5,r6,b58a90 <_malloc_r+0x284>
  b58aac:	81000317 	ldw	r4,12(r16)
  b58ab0:	80c00217 	ldw	r3,8(r16)
  b58ab4:	89400054 	ori	r5,r17,1
  b58ab8:	8445883a 	add	r2,r16,r17
  b58abc:	20c00215 	stw	r3,8(r4)
  b58ac0:	19000315 	stw	r4,12(r3)
  b58ac4:	81400115 	stw	r5,4(r16)
  b58ac8:	1187883a 	add	r3,r2,r6
  b58acc:	31000054 	ori	r4,r6,1
  b58ad0:	50800315 	stw	r2,12(r10)
  b58ad4:	50800215 	stw	r2,8(r10)
  b58ad8:	19800015 	stw	r6,0(r3)
  b58adc:	11000115 	stw	r4,4(r2)
  b58ae0:	12800215 	stw	r10,8(r2)
  b58ae4:	12800315 	stw	r10,12(r2)
  b58ae8:	9009883a 	mov	r4,r18
  b58aec:	0b5cc700 	call	b5cc70 <__malloc_unlock>
  b58af0:	80c00204 	addi	r3,r16,8
  b58af4:	003f5906 	br	b5885c <_malloc_r+0x50>
  b58af8:	8109883a 	add	r4,r16,r4
  b58afc:	20800117 	ldw	r2,4(r4)
  b58b00:	80c00217 	ldw	r3,8(r16)
  b58b04:	81400317 	ldw	r5,12(r16)
  b58b08:	10800054 	ori	r2,r2,1
  b58b0c:	20800115 	stw	r2,4(r4)
  b58b10:	28c00215 	stw	r3,8(r5)
  b58b14:	19400315 	stw	r5,12(r3)
  b58b18:	9009883a 	mov	r4,r18
  b58b1c:	0b5cc700 	call	b5cc70 <__malloc_unlock>
  b58b20:	80c00204 	addi	r3,r16,8
  b58b24:	003f4d06 	br	b5885c <_malloc_r+0x50>
  b58b28:	80800204 	addi	r2,r16,8
  b58b2c:	14000317 	ldw	r16,12(r2)
  b58b30:	143f911e 	bne	r2,r16,b58978 <_malloc_r+0x16c>
  b58b34:	1a400084 	addi	r9,r3,2
  b58b38:	003f7306 	br	b58908 <_malloc_r+0xfc>
  b58b3c:	88c00054 	ori	r3,r17,1
  b58b40:	8445883a 	add	r2,r16,r17
  b58b44:	80c00115 	stw	r3,4(r16)
  b58b48:	003fdf06 	br	b58ac8 <_malloc_r+0x2bc>
  b58b4c:	e4000217 	ldw	r16,8(fp)
  b58b50:	00bfff04 	movi	r2,-4
  b58b54:	80c00117 	ldw	r3,4(r16)
  b58b58:	802d883a 	mov	r22,r16
  b58b5c:	18aa703a 	and	r21,r3,r2
  b58b60:	ac401636 	bltu	r21,r17,b58bbc <_malloc_r+0x3b0>
  b58b64:	ac49c83a 	sub	r4,r21,r17
  b58b68:	008003c4 	movi	r2,15
  b58b6c:	1100130e 	bge	r2,r4,b58bbc <_malloc_r+0x3b0>
  b58b70:	88800054 	ori	r2,r17,1
  b58b74:	8447883a 	add	r3,r16,r17
  b58b78:	80800115 	stw	r2,4(r16)
  b58b7c:	20800054 	ori	r2,r4,1
  b58b80:	18800115 	stw	r2,4(r3)
  b58b84:	e0c00215 	stw	r3,8(fp)
  b58b88:	9009883a 	mov	r4,r18
  b58b8c:	0b5cc700 	call	b5cc70 <__malloc_unlock>
  b58b90:	80c00204 	addi	r3,r16,8
  b58b94:	003f3106 	br	b5885c <_malloc_r+0x50>
  b58b98:	39c00117 	ldw	r7,4(r7)
  b58b9c:	573ffe04 	addi	fp,r10,-8
  b58ba0:	003fa006 	br	b58a24 <_malloc_r+0x218>
  b58ba4:	00801504 	movi	r2,84
  b58ba8:	10c06736 	bltu	r2,r3,b58d48 <_malloc_r+0x53c>
  b58bac:	8804d33a 	srli	r2,r17,12
  b58bb0:	11801b84 	addi	r6,r2,110
  b58bb4:	300490fa 	slli	r2,r6,3
  b58bb8:	003f4106 	br	b588c0 <_malloc_r+0xb4>
  b58bbc:	d0a71617 	ldw	r2,-25512(gp)
  b58bc0:	d0e00d17 	ldw	r3,-32716(gp)
  b58bc4:	053fffc4 	movi	r20,-1
  b58bc8:	10800404 	addi	r2,r2,16
  b58bcc:	88a7883a 	add	r19,r17,r2
  b58bd0:	1d000326 	beq	r3,r20,b58be0 <_malloc_r+0x3d4>
  b58bd4:	98c3ffc4 	addi	r3,r19,4095
  b58bd8:	00bc0004 	movi	r2,-4096
  b58bdc:	18a6703a 	and	r19,r3,r2
  b58be0:	9009883a 	mov	r4,r18
  b58be4:	980b883a 	mov	r5,r19
  b58be8:	0b5a8a00 	call	b5a8a0 <_sbrk_r>
  b58bec:	1009883a 	mov	r4,r2
  b58bf0:	15000426 	beq	r2,r20,b58c04 <_malloc_r+0x3f8>
  b58bf4:	854b883a 	add	r5,r16,r21
  b58bf8:	1029883a 	mov	r20,r2
  b58bfc:	11405a2e 	bgeu	r2,r5,b58d68 <_malloc_r+0x55c>
  b58c00:	87000c26 	beq	r16,fp,b58c34 <_malloc_r+0x428>
  b58c04:	e4000217 	ldw	r16,8(fp)
  b58c08:	80c00117 	ldw	r3,4(r16)
  b58c0c:	00bfff04 	movi	r2,-4
  b58c10:	1884703a 	and	r2,r3,r2
  b58c14:	14400336 	bltu	r2,r17,b58c24 <_malloc_r+0x418>
  b58c18:	1449c83a 	sub	r4,r2,r17
  b58c1c:	008003c4 	movi	r2,15
  b58c20:	113fd316 	blt	r2,r4,b58b70 <_malloc_r+0x364>
  b58c24:	9009883a 	mov	r4,r18
  b58c28:	0b5cc700 	call	b5cc70 <__malloc_unlock>
  b58c2c:	0007883a 	mov	r3,zero
  b58c30:	003f0a06 	br	b5885c <_malloc_r+0x50>
  b58c34:	05c02db4 	movhi	r23,182
  b58c38:	bdd31104 	addi	r23,r23,19524
  b58c3c:	b8800017 	ldw	r2,0(r23)
  b58c40:	988d883a 	add	r6,r19,r2
  b58c44:	b9800015 	stw	r6,0(r23)
  b58c48:	d0e00d17 	ldw	r3,-32716(gp)
  b58c4c:	00bfffc4 	movi	r2,-1
  b58c50:	18808e26 	beq	r3,r2,b58e8c <_malloc_r+0x680>
  b58c54:	2145c83a 	sub	r2,r4,r5
  b58c58:	3085883a 	add	r2,r6,r2
  b58c5c:	b8800015 	stw	r2,0(r23)
  b58c60:	20c001cc 	andi	r3,r4,7
  b58c64:	18005f1e 	bne	r3,zero,b58de4 <_malloc_r+0x5d8>
  b58c68:	000b883a 	mov	r5,zero
  b58c6c:	a4c5883a 	add	r2,r20,r19
  b58c70:	1083ffcc 	andi	r2,r2,4095
  b58c74:	00c40004 	movi	r3,4096
  b58c78:	1887c83a 	sub	r3,r3,r2
  b58c7c:	28e7883a 	add	r19,r5,r3
  b58c80:	9009883a 	mov	r4,r18
  b58c84:	980b883a 	mov	r5,r19
  b58c88:	0b5a8a00 	call	b5a8a0 <_sbrk_r>
  b58c8c:	1007883a 	mov	r3,r2
  b58c90:	00bfffc4 	movi	r2,-1
  b58c94:	18807a26 	beq	r3,r2,b58e80 <_malloc_r+0x674>
  b58c98:	1d05c83a 	sub	r2,r3,r20
  b58c9c:	9885883a 	add	r2,r19,r2
  b58ca0:	10c00054 	ori	r3,r2,1
  b58ca4:	b8800017 	ldw	r2,0(r23)
  b58ca8:	a021883a 	mov	r16,r20
  b58cac:	a0c00115 	stw	r3,4(r20)
  b58cb0:	9885883a 	add	r2,r19,r2
  b58cb4:	b8800015 	stw	r2,0(r23)
  b58cb8:	e5000215 	stw	r20,8(fp)
  b58cbc:	b7003626 	beq	r22,fp,b58d98 <_malloc_r+0x58c>
  b58cc0:	018003c4 	movi	r6,15
  b58cc4:	35404b36 	bltu	r6,r21,b58df4 <_malloc_r+0x5e8>
  b58cc8:	00800044 	movi	r2,1
  b58ccc:	a0800115 	stw	r2,4(r20)
  b58cd0:	003fcd06 	br	b58c08 <_malloc_r+0x3fc>
  b58cd4:	2808d27a 	srli	r4,r5,9
  b58cd8:	2000371e 	bne	r4,zero,b58db8 <_malloc_r+0x5ac>
  b58cdc:	2808d0fa 	srli	r4,r5,3
  b58ce0:	200690fa 	slli	r3,r4,3
  b58ce4:	1ad1883a 	add	r8,r3,r11
  b58ce8:	41800217 	ldw	r6,8(r8)
  b58cec:	41805b26 	beq	r8,r6,b58e5c <_malloc_r+0x650>
  b58cf0:	30800117 	ldw	r2,4(r6)
  b58cf4:	00ffff04 	movi	r3,-4
  b58cf8:	10c4703a 	and	r2,r2,r3
  b58cfc:	2880022e 	bgeu	r5,r2,b58d08 <_malloc_r+0x4fc>
  b58d00:	31800217 	ldw	r6,8(r6)
  b58d04:	41bffa1e 	bne	r8,r6,b58cf0 <_malloc_r+0x4e4>
  b58d08:	32000317 	ldw	r8,12(r6)
  b58d0c:	39c00117 	ldw	r7,4(r7)
  b58d10:	82000315 	stw	r8,12(r16)
  b58d14:	81800215 	stw	r6,8(r16)
  b58d18:	07002db4 	movhi	fp,182
  b58d1c:	e7061c04 	addi	fp,fp,6256
  b58d20:	34000315 	stw	r16,12(r6)
  b58d24:	44000215 	stw	r16,8(r8)
  b58d28:	003f3e06 	br	b58a24 <_malloc_r+0x218>
  b58d2c:	63000044 	addi	r12,r12,1
  b58d30:	608000cc 	andi	r2,r12,3
  b58d34:	10005d26 	beq	r2,zero,b58eac <_malloc_r+0x6a0>
  b58d38:	18c00204 	addi	r3,r3,8
  b58d3c:	003f5106 	br	b58a84 <_malloc_r+0x278>
  b58d40:	8089883a 	add	r4,r16,r2
  b58d44:	003f6d06 	br	b58afc <_malloc_r+0x2f0>
  b58d48:	00805504 	movi	r2,340
  b58d4c:	10c02036 	bltu	r2,r3,b58dd0 <_malloc_r+0x5c4>
  b58d50:	8804d3fa 	srli	r2,r17,15
  b58d54:	11801dc4 	addi	r6,r2,119
  b58d58:	300490fa 	slli	r2,r6,3
  b58d5c:	003ed806 	br	b588c0 <_malloc_r+0xb4>
  b58d60:	48c000c4 	addi	r3,r9,3
  b58d64:	003f3106 	br	b58a2c <_malloc_r+0x220>
  b58d68:	05c02db4 	movhi	r23,182
  b58d6c:	bdd31104 	addi	r23,r23,19524
  b58d70:	b8800017 	ldw	r2,0(r23)
  b58d74:	988d883a 	add	r6,r19,r2
  b58d78:	b9800015 	stw	r6,0(r23)
  b58d7c:	293fb21e 	bne	r5,r4,b58c48 <_malloc_r+0x43c>
  b58d80:	2083ffcc 	andi	r2,r4,4095
  b58d84:	103fb01e 	bne	r2,zero,b58c48 <_malloc_r+0x43c>
  b58d88:	e4000217 	ldw	r16,8(fp)
  b58d8c:	9d45883a 	add	r2,r19,r21
  b58d90:	10800054 	ori	r2,r2,1
  b58d94:	80800115 	stw	r2,4(r16)
  b58d98:	b8c00017 	ldw	r3,0(r23)
  b58d9c:	d0a71717 	ldw	r2,-25508(gp)
  b58da0:	10c0012e 	bgeu	r2,r3,b58da8 <_malloc_r+0x59c>
  b58da4:	d0e71715 	stw	r3,-25508(gp)
  b58da8:	d0a71817 	ldw	r2,-25504(gp)
  b58dac:	10ff962e 	bgeu	r2,r3,b58c08 <_malloc_r+0x3fc>
  b58db0:	d0e71815 	stw	r3,-25504(gp)
  b58db4:	003f9406 	br	b58c08 <_malloc_r+0x3fc>
  b58db8:	00800104 	movi	r2,4
  b58dbc:	11001e36 	bltu	r2,r4,b58e38 <_malloc_r+0x62c>
  b58dc0:	2804d1ba 	srli	r2,r5,6
  b58dc4:	11000e04 	addi	r4,r2,56
  b58dc8:	200690fa 	slli	r3,r4,3
  b58dcc:	003fc506 	br	b58ce4 <_malloc_r+0x4d8>
  b58dd0:	00815504 	movi	r2,1364
  b58dd4:	10c01d2e 	bgeu	r2,r3,b58e4c <_malloc_r+0x640>
  b58dd8:	01801f84 	movi	r6,126
  b58ddc:	0080fc04 	movi	r2,1008
  b58de0:	003eb706 	br	b588c0 <_malloc_r+0xb4>
  b58de4:	00800204 	movi	r2,8
  b58de8:	10cbc83a 	sub	r5,r2,r3
  b58dec:	2169883a 	add	r20,r4,r5
  b58df0:	003f9e06 	br	b58c6c <_malloc_r+0x460>
  b58df4:	00bffe04 	movi	r2,-8
  b58df8:	a93ffd04 	addi	r4,r21,-12
  b58dfc:	2088703a 	and	r4,r4,r2
  b58e00:	b10b883a 	add	r5,r22,r4
  b58e04:	00c00144 	movi	r3,5
  b58e08:	28c00215 	stw	r3,8(r5)
  b58e0c:	28c00115 	stw	r3,4(r5)
  b58e10:	b0800117 	ldw	r2,4(r22)
  b58e14:	1080004c 	andi	r2,r2,1
  b58e18:	2084b03a 	or	r2,r4,r2
  b58e1c:	b0800115 	stw	r2,4(r22)
  b58e20:	313fdd2e 	bgeu	r6,r4,b58d98 <_malloc_r+0x58c>
  b58e24:	b1400204 	addi	r5,r22,8
  b58e28:	9009883a 	mov	r4,r18
  b58e2c:	0b57c840 	call	b57c84 <_free_r>
  b58e30:	e4000217 	ldw	r16,8(fp)
  b58e34:	003fd806 	br	b58d98 <_malloc_r+0x58c>
  b58e38:	00800504 	movi	r2,20
  b58e3c:	11001536 	bltu	r2,r4,b58e94 <_malloc_r+0x688>
  b58e40:	210016c4 	addi	r4,r4,91
  b58e44:	200690fa 	slli	r3,r4,3
  b58e48:	003fa606 	br	b58ce4 <_malloc_r+0x4d8>
  b58e4c:	8804d4ba 	srli	r2,r17,18
  b58e50:	11801f04 	addi	r6,r2,124
  b58e54:	300490fa 	slli	r2,r6,3
  b58e58:	003e9906 	br	b588c0 <_malloc_r+0xb4>
  b58e5c:	2009d0ba 	srai	r4,r4,2
  b58e60:	01402db4 	movhi	r5,182
  b58e64:	29461c04 	addi	r5,r5,6256
  b58e68:	00c00044 	movi	r3,1
  b58e6c:	28800117 	ldw	r2,4(r5)
  b58e70:	1906983a 	sll	r3,r3,r4
  b58e74:	10c4b03a 	or	r2,r2,r3
  b58e78:	28800115 	stw	r2,4(r5)
  b58e7c:	003fa306 	br	b58d0c <_malloc_r+0x500>
  b58e80:	0027883a 	mov	r19,zero
  b58e84:	00c00044 	movi	r3,1
  b58e88:	003f8606 	br	b58ca4 <_malloc_r+0x498>
  b58e8c:	d1200d15 	stw	r4,-32716(gp)
  b58e90:	003f7306 	br	b58c60 <_malloc_r+0x454>
  b58e94:	00801504 	movi	r2,84
  b58e98:	11001936 	bltu	r2,r4,b58f00 <_malloc_r+0x6f4>
  b58e9c:	2804d33a 	srli	r2,r5,12
  b58ea0:	11001b84 	addi	r4,r2,110
  b58ea4:	200690fa 	slli	r3,r4,3
  b58ea8:	003f8e06 	br	b58ce4 <_malloc_r+0x4d8>
  b58eac:	480b883a 	mov	r5,r9
  b58eb0:	6807883a 	mov	r3,r13
  b58eb4:	288000cc 	andi	r2,r5,3
  b58eb8:	18fffe04 	addi	r3,r3,-8
  b58ebc:	297fffc4 	addi	r5,r5,-1
  b58ec0:	10001526 	beq	r2,zero,b58f18 <_malloc_r+0x70c>
  b58ec4:	18800217 	ldw	r2,8(r3)
  b58ec8:	10fffa26 	beq	r2,r3,b58eb4 <_malloc_r+0x6a8>
  b58ecc:	2109883a 	add	r4,r4,r4
  b58ed0:	393f1e36 	bltu	r7,r4,b58b4c <_malloc_r+0x340>
  b58ed4:	203f1d26 	beq	r4,zero,b58b4c <_malloc_r+0x340>
  b58ed8:	21c4703a 	and	r2,r4,r7
  b58edc:	10000226 	beq	r2,zero,b58ee8 <_malloc_r+0x6dc>
  b58ee0:	6013883a 	mov	r9,r12
  b58ee4:	003ee106 	br	b58a6c <_malloc_r+0x260>
  b58ee8:	2109883a 	add	r4,r4,r4
  b58eec:	3904703a 	and	r2,r7,r4
  b58ef0:	63000104 	addi	r12,r12,4
  b58ef4:	103ffc26 	beq	r2,zero,b58ee8 <_malloc_r+0x6dc>
  b58ef8:	6013883a 	mov	r9,r12
  b58efc:	003edb06 	br	b58a6c <_malloc_r+0x260>
  b58f00:	00805504 	movi	r2,340
  b58f04:	11000836 	bltu	r2,r4,b58f28 <_malloc_r+0x71c>
  b58f08:	2804d3fa 	srli	r2,r5,15
  b58f0c:	11001dc4 	addi	r4,r2,119
  b58f10:	200690fa 	slli	r3,r4,3
  b58f14:	003f7306 	br	b58ce4 <_malloc_r+0x4d8>
  b58f18:	0104303a 	nor	r2,zero,r4
  b58f1c:	388e703a 	and	r7,r7,r2
  b58f20:	e1c00115 	stw	r7,4(fp)
  b58f24:	003fe906 	br	b58ecc <_malloc_r+0x6c0>
  b58f28:	00815504 	movi	r2,1364
  b58f2c:	1100032e 	bgeu	r2,r4,b58f3c <_malloc_r+0x730>
  b58f30:	01001f84 	movi	r4,126
  b58f34:	00c0fc04 	movi	r3,1008
  b58f38:	003f6a06 	br	b58ce4 <_malloc_r+0x4d8>
  b58f3c:	2804d4ba 	srli	r2,r5,18
  b58f40:	11001f04 	addi	r4,r2,124
  b58f44:	200690fa 	slli	r3,r4,3
  b58f48:	003f6606 	br	b58ce4 <_malloc_r+0x4d8>

00b58f4c <memchr>:
  b58f4c:	008000c4 	movi	r2,3
  b58f50:	29403fcc 	andi	r5,r5,255
  b58f54:	2007883a 	mov	r3,r4
  b58f58:	1180022e 	bgeu	r2,r6,b58f64 <memchr+0x18>
  b58f5c:	2084703a 	and	r2,r4,r2
  b58f60:	10000b26 	beq	r2,zero,b58f90 <memchr+0x44>
  b58f64:	313fffc4 	addi	r4,r6,-1
  b58f68:	3000051e 	bne	r6,zero,b58f80 <memchr+0x34>
  b58f6c:	00002c06 	br	b59020 <memchr+0xd4>
  b58f70:	213fffc4 	addi	r4,r4,-1
  b58f74:	00bfffc4 	movi	r2,-1
  b58f78:	18c00044 	addi	r3,r3,1
  b58f7c:	20802826 	beq	r4,r2,b59020 <memchr+0xd4>
  b58f80:	18800003 	ldbu	r2,0(r3)
  b58f84:	28bffa1e 	bne	r5,r2,b58f70 <memchr+0x24>
  b58f88:	1805883a 	mov	r2,r3
  b58f8c:	f800283a 	ret
  b58f90:	0011883a 	mov	r8,zero
  b58f94:	0007883a 	mov	r3,zero
  b58f98:	01c00104 	movi	r7,4
  b58f9c:	4004923a 	slli	r2,r8,8
  b58fa0:	18c00044 	addi	r3,r3,1
  b58fa4:	1151883a 	add	r8,r2,r5
  b58fa8:	19fffc1e 	bne	r3,r7,b58f9c <memchr+0x50>
  b58fac:	02bfbff4 	movhi	r10,65279
  b58fb0:	52bfbfc4 	addi	r10,r10,-257
  b58fb4:	02602074 	movhi	r9,32897
  b58fb8:	4a602004 	addi	r9,r9,-32640
  b58fbc:	02c000c4 	movi	r11,3
  b58fc0:	20800017 	ldw	r2,0(r4)
  b58fc4:	31bfff04 	addi	r6,r6,-4
  b58fc8:	200f883a 	mov	r7,r4
  b58fcc:	1204f03a 	xor	r2,r2,r8
  b58fd0:	1287883a 	add	r3,r2,r10
  b58fd4:	1a46703a 	and	r3,r3,r9
  b58fd8:	0084303a 	nor	r2,zero,r2
  b58fdc:	10c4703a 	and	r2,r2,r3
  b58fe0:	10000b26 	beq	r2,zero,b59010 <memchr+0xc4>
  b58fe4:	20800003 	ldbu	r2,0(r4)
  b58fe8:	28800f26 	beq	r5,r2,b59028 <memchr+0xdc>
  b58fec:	20800043 	ldbu	r2,1(r4)
  b58ff0:	21c00044 	addi	r7,r4,1
  b58ff4:	28800c26 	beq	r5,r2,b59028 <memchr+0xdc>
  b58ff8:	20800083 	ldbu	r2,2(r4)
  b58ffc:	21c00084 	addi	r7,r4,2
  b59000:	28800926 	beq	r5,r2,b59028 <memchr+0xdc>
  b59004:	208000c3 	ldbu	r2,3(r4)
  b59008:	21c000c4 	addi	r7,r4,3
  b5900c:	28800626 	beq	r5,r2,b59028 <memchr+0xdc>
  b59010:	21000104 	addi	r4,r4,4
  b59014:	59bfea36 	bltu	r11,r6,b58fc0 <memchr+0x74>
  b59018:	2007883a 	mov	r3,r4
  b5901c:	003fd106 	br	b58f64 <memchr+0x18>
  b59020:	0005883a 	mov	r2,zero
  b59024:	f800283a 	ret
  b59028:	3805883a 	mov	r2,r7
  b5902c:	f800283a 	ret

00b59030 <memcpy>:
  b59030:	01c003c4 	movi	r7,15
  b59034:	2007883a 	mov	r3,r4
  b59038:	3980032e 	bgeu	r7,r6,b59048 <memcpy+0x18>
  b5903c:	2904b03a 	or	r2,r5,r4
  b59040:	108000cc 	andi	r2,r2,3
  b59044:	10000926 	beq	r2,zero,b5906c <memcpy+0x3c>
  b59048:	30000626 	beq	r6,zero,b59064 <memcpy+0x34>
  b5904c:	30cd883a 	add	r6,r6,r3
  b59050:	28800003 	ldbu	r2,0(r5)
  b59054:	29400044 	addi	r5,r5,1
  b59058:	18800005 	stb	r2,0(r3)
  b5905c:	18c00044 	addi	r3,r3,1
  b59060:	30fffb1e 	bne	r6,r3,b59050 <memcpy+0x20>
  b59064:	2005883a 	mov	r2,r4
  b59068:	f800283a 	ret
  b5906c:	3811883a 	mov	r8,r7
  b59070:	200f883a 	mov	r7,r4
  b59074:	28c00017 	ldw	r3,0(r5)
  b59078:	31bffc04 	addi	r6,r6,-16
  b5907c:	38c00015 	stw	r3,0(r7)
  b59080:	28800117 	ldw	r2,4(r5)
  b59084:	38800115 	stw	r2,4(r7)
  b59088:	28c00217 	ldw	r3,8(r5)
  b5908c:	38c00215 	stw	r3,8(r7)
  b59090:	28800317 	ldw	r2,12(r5)
  b59094:	29400404 	addi	r5,r5,16
  b59098:	38800315 	stw	r2,12(r7)
  b5909c:	39c00404 	addi	r7,r7,16
  b590a0:	41bff436 	bltu	r8,r6,b59074 <memcpy+0x44>
  b590a4:	008000c4 	movi	r2,3
  b590a8:	1180072e 	bgeu	r2,r6,b590c8 <memcpy+0x98>
  b590ac:	1007883a 	mov	r3,r2
  b590b0:	28800017 	ldw	r2,0(r5)
  b590b4:	31bfff04 	addi	r6,r6,-4
  b590b8:	29400104 	addi	r5,r5,4
  b590bc:	38800015 	stw	r2,0(r7)
  b590c0:	39c00104 	addi	r7,r7,4
  b590c4:	19bffa36 	bltu	r3,r6,b590b0 <memcpy+0x80>
  b590c8:	3807883a 	mov	r3,r7
  b590cc:	003fde06 	br	b59048 <memcpy+0x18>

00b590d0 <memmove>:
  b590d0:	2807883a 	mov	r3,r5
  b590d4:	2011883a 	mov	r8,r4
  b590d8:	29000c2e 	bgeu	r5,r4,b5910c <memmove+0x3c>
  b590dc:	298f883a 	add	r7,r5,r6
  b590e0:	21c00a2e 	bgeu	r4,r7,b5910c <memmove+0x3c>
  b590e4:	30000726 	beq	r6,zero,b59104 <memmove+0x34>
  b590e8:	2187883a 	add	r3,r4,r6
  b590ec:	198dc83a 	sub	r6,r3,r6
  b590f0:	39ffffc4 	addi	r7,r7,-1
  b590f4:	38800003 	ldbu	r2,0(r7)
  b590f8:	18ffffc4 	addi	r3,r3,-1
  b590fc:	18800005 	stb	r2,0(r3)
  b59100:	19bffb1e 	bne	r3,r6,b590f0 <memmove+0x20>
  b59104:	2005883a 	mov	r2,r4
  b59108:	f800283a 	ret
  b5910c:	01c003c4 	movi	r7,15
  b59110:	39800a36 	bltu	r7,r6,b5913c <memmove+0x6c>
  b59114:	303ffb26 	beq	r6,zero,b59104 <memmove+0x34>
  b59118:	400f883a 	mov	r7,r8
  b5911c:	320d883a 	add	r6,r6,r8
  b59120:	28800003 	ldbu	r2,0(r5)
  b59124:	29400044 	addi	r5,r5,1
  b59128:	38800005 	stb	r2,0(r7)
  b5912c:	39c00044 	addi	r7,r7,1
  b59130:	39bffb1e 	bne	r7,r6,b59120 <memmove+0x50>
  b59134:	2005883a 	mov	r2,r4
  b59138:	f800283a 	ret
  b5913c:	1904b03a 	or	r2,r3,r4
  b59140:	108000cc 	andi	r2,r2,3
  b59144:	103ff31e 	bne	r2,zero,b59114 <memmove+0x44>
  b59148:	3811883a 	mov	r8,r7
  b5914c:	180b883a 	mov	r5,r3
  b59150:	200f883a 	mov	r7,r4
  b59154:	28c00017 	ldw	r3,0(r5)
  b59158:	31bffc04 	addi	r6,r6,-16
  b5915c:	38c00015 	stw	r3,0(r7)
  b59160:	28800117 	ldw	r2,4(r5)
  b59164:	38800115 	stw	r2,4(r7)
  b59168:	28c00217 	ldw	r3,8(r5)
  b5916c:	38c00215 	stw	r3,8(r7)
  b59170:	28800317 	ldw	r2,12(r5)
  b59174:	29400404 	addi	r5,r5,16
  b59178:	38800315 	stw	r2,12(r7)
  b5917c:	39c00404 	addi	r7,r7,16
  b59180:	41bff436 	bltu	r8,r6,b59154 <memmove+0x84>
  b59184:	008000c4 	movi	r2,3
  b59188:	1180072e 	bgeu	r2,r6,b591a8 <memmove+0xd8>
  b5918c:	1007883a 	mov	r3,r2
  b59190:	28800017 	ldw	r2,0(r5)
  b59194:	31bfff04 	addi	r6,r6,-4
  b59198:	29400104 	addi	r5,r5,4
  b5919c:	38800015 	stw	r2,0(r7)
  b591a0:	39c00104 	addi	r7,r7,4
  b591a4:	19bffa36 	bltu	r3,r6,b59190 <memmove+0xc0>
  b591a8:	3811883a 	mov	r8,r7
  b591ac:	003fd906 	br	b59114 <memmove+0x44>

00b591b0 <memset>:
  b591b0:	008000c4 	movi	r2,3
  b591b4:	29403fcc 	andi	r5,r5,255
  b591b8:	2007883a 	mov	r3,r4
  b591bc:	1180022e 	bgeu	r2,r6,b591c8 <memset+0x18>
  b591c0:	2084703a 	and	r2,r4,r2
  b591c4:	10000826 	beq	r2,zero,b591e8 <memset+0x38>
  b591c8:	30000526 	beq	r6,zero,b591e0 <memset+0x30>
  b591cc:	2805883a 	mov	r2,r5
  b591d0:	30cd883a 	add	r6,r6,r3
  b591d4:	18800005 	stb	r2,0(r3)
  b591d8:	18c00044 	addi	r3,r3,1
  b591dc:	19bffd1e 	bne	r3,r6,b591d4 <memset+0x24>
  b591e0:	2005883a 	mov	r2,r4
  b591e4:	f800283a 	ret
  b591e8:	2804923a 	slli	r2,r5,8
  b591ec:	020003c4 	movi	r8,15
  b591f0:	200f883a 	mov	r7,r4
  b591f4:	2884b03a 	or	r2,r5,r2
  b591f8:	1006943a 	slli	r3,r2,16
  b591fc:	10c6b03a 	or	r3,r2,r3
  b59200:	41800a2e 	bgeu	r8,r6,b5922c <memset+0x7c>
  b59204:	4005883a 	mov	r2,r8
  b59208:	31bffc04 	addi	r6,r6,-16
  b5920c:	38c00015 	stw	r3,0(r7)
  b59210:	38c00115 	stw	r3,4(r7)
  b59214:	38c00215 	stw	r3,8(r7)
  b59218:	38c00315 	stw	r3,12(r7)
  b5921c:	39c00404 	addi	r7,r7,16
  b59220:	11bff936 	bltu	r2,r6,b59208 <memset+0x58>
  b59224:	008000c4 	movi	r2,3
  b59228:	1180052e 	bgeu	r2,r6,b59240 <memset+0x90>
  b5922c:	31bfff04 	addi	r6,r6,-4
  b59230:	008000c4 	movi	r2,3
  b59234:	38c00015 	stw	r3,0(r7)
  b59238:	39c00104 	addi	r7,r7,4
  b5923c:	11bffb36 	bltu	r2,r6,b5922c <memset+0x7c>
  b59240:	3807883a 	mov	r3,r7
  b59244:	003fe006 	br	b591c8 <memset+0x18>

00b59248 <_Bfree>:
  b59248:	28000826 	beq	r5,zero,b5926c <_Bfree+0x24>
  b5924c:	28800117 	ldw	r2,4(r5)
  b59250:	21001317 	ldw	r4,76(r4)
  b59254:	1085883a 	add	r2,r2,r2
  b59258:	1085883a 	add	r2,r2,r2
  b5925c:	1105883a 	add	r2,r2,r4
  b59260:	10c00017 	ldw	r3,0(r2)
  b59264:	28c00015 	stw	r3,0(r5)
  b59268:	11400015 	stw	r5,0(r2)
  b5926c:	f800283a 	ret

00b59270 <__hi0bits>:
  b59270:	20bfffec 	andhi	r2,r4,65535
  b59274:	10001426 	beq	r2,zero,b592c8 <__hi0bits+0x58>
  b59278:	0007883a 	mov	r3,zero
  b5927c:	20bfc02c 	andhi	r2,r4,65280
  b59280:	1000021e 	bne	r2,zero,b5928c <__hi0bits+0x1c>
  b59284:	2008923a 	slli	r4,r4,8
  b59288:	18c00204 	addi	r3,r3,8
  b5928c:	20bc002c 	andhi	r2,r4,61440
  b59290:	1000021e 	bne	r2,zero,b5929c <__hi0bits+0x2c>
  b59294:	2008913a 	slli	r4,r4,4
  b59298:	18c00104 	addi	r3,r3,4
  b5929c:	20b0002c 	andhi	r2,r4,49152
  b592a0:	1000031e 	bne	r2,zero,b592b0 <__hi0bits+0x40>
  b592a4:	2105883a 	add	r2,r4,r4
  b592a8:	18c00084 	addi	r3,r3,2
  b592ac:	1089883a 	add	r4,r2,r2
  b592b0:	20000316 	blt	r4,zero,b592c0 <__hi0bits+0x50>
  b592b4:	2090002c 	andhi	r2,r4,16384
  b592b8:	10000626 	beq	r2,zero,b592d4 <__hi0bits+0x64>
  b592bc:	18c00044 	addi	r3,r3,1
  b592c0:	1805883a 	mov	r2,r3
  b592c4:	f800283a 	ret
  b592c8:	2008943a 	slli	r4,r4,16
  b592cc:	00c00404 	movi	r3,16
  b592d0:	003fea06 	br	b5927c <__hi0bits+0xc>
  b592d4:	00c00804 	movi	r3,32
  b592d8:	1805883a 	mov	r2,r3
  b592dc:	f800283a 	ret

00b592e0 <__lo0bits>:
  b592e0:	20c00017 	ldw	r3,0(r4)
  b592e4:	188001cc 	andi	r2,r3,7
  b592e8:	10000a26 	beq	r2,zero,b59314 <__lo0bits+0x34>
  b592ec:	1880004c 	andi	r2,r3,1
  b592f0:	1005003a 	cmpeq	r2,r2,zero
  b592f4:	10002126 	beq	r2,zero,b5937c <__lo0bits+0x9c>
  b592f8:	1880008c 	andi	r2,r3,2
  b592fc:	1000251e 	bne	r2,zero,b59394 <__lo0bits+0xb4>
  b59300:	1804d0ba 	srli	r2,r3,2
  b59304:	01400084 	movi	r5,2
  b59308:	20800015 	stw	r2,0(r4)
  b5930c:	2805883a 	mov	r2,r5
  b59310:	f800283a 	ret
  b59314:	18bfffcc 	andi	r2,r3,65535
  b59318:	10001526 	beq	r2,zero,b59370 <__lo0bits+0x90>
  b5931c:	000b883a 	mov	r5,zero
  b59320:	18803fcc 	andi	r2,r3,255
  b59324:	1000021e 	bne	r2,zero,b59330 <__lo0bits+0x50>
  b59328:	1806d23a 	srli	r3,r3,8
  b5932c:	29400204 	addi	r5,r5,8
  b59330:	188003cc 	andi	r2,r3,15
  b59334:	1000021e 	bne	r2,zero,b59340 <__lo0bits+0x60>
  b59338:	1806d13a 	srli	r3,r3,4
  b5933c:	29400104 	addi	r5,r5,4
  b59340:	188000cc 	andi	r2,r3,3
  b59344:	1000021e 	bne	r2,zero,b59350 <__lo0bits+0x70>
  b59348:	1806d0ba 	srli	r3,r3,2
  b5934c:	29400084 	addi	r5,r5,2
  b59350:	1880004c 	andi	r2,r3,1
  b59354:	1000031e 	bne	r2,zero,b59364 <__lo0bits+0x84>
  b59358:	1806d07a 	srli	r3,r3,1
  b5935c:	18000a26 	beq	r3,zero,b59388 <__lo0bits+0xa8>
  b59360:	29400044 	addi	r5,r5,1
  b59364:	2805883a 	mov	r2,r5
  b59368:	20c00015 	stw	r3,0(r4)
  b5936c:	f800283a 	ret
  b59370:	1806d43a 	srli	r3,r3,16
  b59374:	01400404 	movi	r5,16
  b59378:	003fe906 	br	b59320 <__lo0bits+0x40>
  b5937c:	000b883a 	mov	r5,zero
  b59380:	2805883a 	mov	r2,r5
  b59384:	f800283a 	ret
  b59388:	01400804 	movi	r5,32
  b5938c:	2805883a 	mov	r2,r5
  b59390:	f800283a 	ret
  b59394:	1804d07a 	srli	r2,r3,1
  b59398:	01400044 	movi	r5,1
  b5939c:	20800015 	stw	r2,0(r4)
  b593a0:	003fda06 	br	b5930c <__lo0bits+0x2c>

00b593a4 <__mcmp>:
  b593a4:	20800417 	ldw	r2,16(r4)
  b593a8:	28c00417 	ldw	r3,16(r5)
  b593ac:	10cfc83a 	sub	r7,r2,r3
  b593b0:	38000c1e 	bne	r7,zero,b593e4 <__mcmp+0x40>
  b593b4:	18c5883a 	add	r2,r3,r3
  b593b8:	1085883a 	add	r2,r2,r2
  b593bc:	10c00504 	addi	r3,r2,20
  b593c0:	21000504 	addi	r4,r4,20
  b593c4:	28cb883a 	add	r5,r5,r3
  b593c8:	2085883a 	add	r2,r4,r2
  b593cc:	10bfff04 	addi	r2,r2,-4
  b593d0:	297fff04 	addi	r5,r5,-4
  b593d4:	11800017 	ldw	r6,0(r2)
  b593d8:	28c00017 	ldw	r3,0(r5)
  b593dc:	30c0031e 	bne	r6,r3,b593ec <__mcmp+0x48>
  b593e0:	20bffa36 	bltu	r4,r2,b593cc <__mcmp+0x28>
  b593e4:	3805883a 	mov	r2,r7
  b593e8:	f800283a 	ret
  b593ec:	30c00336 	bltu	r6,r3,b593fc <__mcmp+0x58>
  b593f0:	01c00044 	movi	r7,1
  b593f4:	3805883a 	mov	r2,r7
  b593f8:	f800283a 	ret
  b593fc:	01ffffc4 	movi	r7,-1
  b59400:	003ff806 	br	b593e4 <__mcmp+0x40>

00b59404 <__ulp>:
  b59404:	295ffc2c 	andhi	r5,r5,32752
  b59408:	013f3034 	movhi	r4,64704
  b5940c:	290b883a 	add	r5,r5,r4
  b59410:	0145c83a 	sub	r2,zero,r5
  b59414:	1007d53a 	srai	r3,r2,20
  b59418:	000d883a 	mov	r6,zero
  b5941c:	0140040e 	bge	zero,r5,b59430 <__ulp+0x2c>
  b59420:	280f883a 	mov	r7,r5
  b59424:	3807883a 	mov	r3,r7
  b59428:	3005883a 	mov	r2,r6
  b5942c:	f800283a 	ret
  b59430:	008004c4 	movi	r2,19
  b59434:	193ffb04 	addi	r4,r3,-20
  b59438:	10c00c0e 	bge	r2,r3,b5946c <__ulp+0x68>
  b5943c:	008007c4 	movi	r2,31
  b59440:	1107c83a 	sub	r3,r2,r4
  b59444:	00800784 	movi	r2,30
  b59448:	01400044 	movi	r5,1
  b5944c:	11000216 	blt	r2,r4,b59458 <__ulp+0x54>
  b59450:	00800044 	movi	r2,1
  b59454:	10ca983a 	sll	r5,r2,r3
  b59458:	000f883a 	mov	r7,zero
  b5945c:	280d883a 	mov	r6,r5
  b59460:	3807883a 	mov	r3,r7
  b59464:	3005883a 	mov	r2,r6
  b59468:	f800283a 	ret
  b5946c:	00800234 	movhi	r2,8
  b59470:	10cfd83a 	sra	r7,r2,r3
  b59474:	000d883a 	mov	r6,zero
  b59478:	3005883a 	mov	r2,r6
  b5947c:	3807883a 	mov	r3,r7
  b59480:	f800283a 	ret

00b59484 <__b2d>:
  b59484:	20800417 	ldw	r2,16(r4)
  b59488:	defff904 	addi	sp,sp,-28
  b5948c:	dd000415 	stw	r20,16(sp)
  b59490:	1085883a 	add	r2,r2,r2
  b59494:	25000504 	addi	r20,r4,20
  b59498:	1085883a 	add	r2,r2,r2
  b5949c:	dc000015 	stw	r16,0(sp)
  b594a0:	a0a1883a 	add	r16,r20,r2
  b594a4:	dd400515 	stw	r21,20(sp)
  b594a8:	857fff17 	ldw	r21,-4(r16)
  b594ac:	dc400115 	stw	r17,4(sp)
  b594b0:	dfc00615 	stw	ra,24(sp)
  b594b4:	a809883a 	mov	r4,r21
  b594b8:	2823883a 	mov	r17,r5
  b594bc:	dcc00315 	stw	r19,12(sp)
  b594c0:	dc800215 	stw	r18,8(sp)
  b594c4:	0b592700 	call	b59270 <__hi0bits>
  b594c8:	100b883a 	mov	r5,r2
  b594cc:	00800804 	movi	r2,32
  b594d0:	1145c83a 	sub	r2,r2,r5
  b594d4:	88800015 	stw	r2,0(r17)
  b594d8:	00800284 	movi	r2,10
  b594dc:	80ffff04 	addi	r3,r16,-4
  b594e0:	11401416 	blt	r2,r5,b59534 <__b2d+0xb0>
  b594e4:	008002c4 	movi	r2,11
  b594e8:	1149c83a 	sub	r4,r2,r5
  b594ec:	a0c02736 	bltu	r20,r3,b5958c <__b2d+0x108>
  b594f0:	000d883a 	mov	r6,zero
  b594f4:	28800544 	addi	r2,r5,21
  b594f8:	a906d83a 	srl	r3,r21,r4
  b594fc:	a884983a 	sll	r2,r21,r2
  b59500:	1ccffc34 	orhi	r19,r3,16368
  b59504:	11a4b03a 	or	r18,r2,r6
  b59508:	9005883a 	mov	r2,r18
  b5950c:	9807883a 	mov	r3,r19
  b59510:	dfc00617 	ldw	ra,24(sp)
  b59514:	dd400517 	ldw	r21,20(sp)
  b59518:	dd000417 	ldw	r20,16(sp)
  b5951c:	dcc00317 	ldw	r19,12(sp)
  b59520:	dc800217 	ldw	r18,8(sp)
  b59524:	dc400117 	ldw	r17,4(sp)
  b59528:	dc000017 	ldw	r16,0(sp)
  b5952c:	dec00704 	addi	sp,sp,28
  b59530:	f800283a 	ret
  b59534:	a0c00e36 	bltu	r20,r3,b59570 <__b2d+0xec>
  b59538:	293ffd44 	addi	r4,r5,-11
  b5953c:	000d883a 	mov	r6,zero
  b59540:	20000f26 	beq	r4,zero,b59580 <__b2d+0xfc>
  b59544:	00800804 	movi	r2,32
  b59548:	110bc83a 	sub	r5,r2,r4
  b5954c:	a0c01236 	bltu	r20,r3,b59598 <__b2d+0x114>
  b59550:	000f883a 	mov	r7,zero
  b59554:	a904983a 	sll	r2,r21,r4
  b59558:	3146d83a 	srl	r3,r6,r5
  b5955c:	3108983a 	sll	r4,r6,r4
  b59560:	108ffc34 	orhi	r2,r2,16368
  b59564:	18a6b03a 	or	r19,r3,r2
  b59568:	3924b03a 	or	r18,r7,r4
  b5956c:	003fe606 	br	b59508 <__b2d+0x84>
  b59570:	293ffd44 	addi	r4,r5,-11
  b59574:	81bffe17 	ldw	r6,-8(r16)
  b59578:	80fffe04 	addi	r3,r16,-8
  b5957c:	203ff11e 	bne	r4,zero,b59544 <__b2d+0xc0>
  b59580:	accffc34 	orhi	r19,r21,16368
  b59584:	3025883a 	mov	r18,r6
  b59588:	003fdf06 	br	b59508 <__b2d+0x84>
  b5958c:	18bfff17 	ldw	r2,-4(r3)
  b59590:	110cd83a 	srl	r6,r2,r4
  b59594:	003fd706 	br	b594f4 <__b2d+0x70>
  b59598:	18bfff17 	ldw	r2,-4(r3)
  b5959c:	114ed83a 	srl	r7,r2,r5
  b595a0:	003fec06 	br	b59554 <__b2d+0xd0>

00b595a4 <__ratio>:
  b595a4:	defff904 	addi	sp,sp,-28
  b595a8:	dc400215 	stw	r17,8(sp)
  b595ac:	2823883a 	mov	r17,r5
  b595b0:	d80b883a 	mov	r5,sp
  b595b4:	dfc00615 	stw	ra,24(sp)
  b595b8:	dd000515 	stw	r20,20(sp)
  b595bc:	dcc00415 	stw	r19,16(sp)
  b595c0:	dc800315 	stw	r18,12(sp)
  b595c4:	2025883a 	mov	r18,r4
  b595c8:	0b594840 	call	b59484 <__b2d>
  b595cc:	8809883a 	mov	r4,r17
  b595d0:	d9400104 	addi	r5,sp,4
  b595d4:	1027883a 	mov	r19,r2
  b595d8:	1829883a 	mov	r20,r3
  b595dc:	0b594840 	call	b59484 <__b2d>
  b595e0:	89000417 	ldw	r4,16(r17)
  b595e4:	91c00417 	ldw	r7,16(r18)
  b595e8:	d9800117 	ldw	r6,4(sp)
  b595ec:	180b883a 	mov	r5,r3
  b595f0:	390fc83a 	sub	r7,r7,r4
  b595f4:	1009883a 	mov	r4,r2
  b595f8:	d8800017 	ldw	r2,0(sp)
  b595fc:	380e917a 	slli	r7,r7,5
  b59600:	2011883a 	mov	r8,r4
  b59604:	1185c83a 	sub	r2,r2,r6
  b59608:	11c5883a 	add	r2,r2,r7
  b5960c:	1006953a 	slli	r3,r2,20
  b59610:	2813883a 	mov	r9,r5
  b59614:	00800d0e 	bge	zero,r2,b5964c <__ratio+0xa8>
  b59618:	1d29883a 	add	r20,r3,r20
  b5961c:	a00b883a 	mov	r5,r20
  b59620:	480f883a 	mov	r7,r9
  b59624:	9809883a 	mov	r4,r19
  b59628:	400d883a 	mov	r6,r8
  b5962c:	0b52f000 	call	b52f00 <__divdf3>
  b59630:	dfc00617 	ldw	ra,24(sp)
  b59634:	dd000517 	ldw	r20,20(sp)
  b59638:	dcc00417 	ldw	r19,16(sp)
  b5963c:	dc800317 	ldw	r18,12(sp)
  b59640:	dc400217 	ldw	r17,8(sp)
  b59644:	dec00704 	addi	sp,sp,28
  b59648:	f800283a 	ret
  b5964c:	28d3c83a 	sub	r9,r5,r3
  b59650:	003ff206 	br	b5961c <__ratio+0x78>

00b59654 <_mprec_log10>:
  b59654:	defffe04 	addi	sp,sp,-8
  b59658:	008005c4 	movi	r2,23
  b5965c:	dc000015 	stw	r16,0(sp)
  b59660:	dfc00115 	stw	ra,4(sp)
  b59664:	2021883a 	mov	r16,r4
  b59668:	11000c16 	blt	r2,r4,b5969c <_mprec_log10+0x48>
  b5966c:	200490fa 	slli	r2,r4,3
  b59670:	00c02db4 	movhi	r3,182
  b59674:	18c47b04 	addi	r3,r3,4588
  b59678:	10c5883a 	add	r2,r2,r3
  b5967c:	12400117 	ldw	r9,4(r2)
  b59680:	12000017 	ldw	r8,0(r2)
  b59684:	4807883a 	mov	r3,r9
  b59688:	4005883a 	mov	r2,r8
  b5968c:	dfc00117 	ldw	ra,4(sp)
  b59690:	dc000017 	ldw	r16,0(sp)
  b59694:	dec00204 	addi	sp,sp,8
  b59698:	f800283a 	ret
  b5969c:	0011883a 	mov	r8,zero
  b596a0:	024ffc34 	movhi	r9,16368
  b596a4:	0005883a 	mov	r2,zero
  b596a8:	00d00934 	movhi	r3,16420
  b596ac:	480b883a 	mov	r5,r9
  b596b0:	4009883a 	mov	r4,r8
  b596b4:	180f883a 	mov	r7,r3
  b596b8:	100d883a 	mov	r6,r2
  b596bc:	0b5bb380 	call	b5bb38 <__muldf3>
  b596c0:	843fffc4 	addi	r16,r16,-1
  b596c4:	1011883a 	mov	r8,r2
  b596c8:	1813883a 	mov	r9,r3
  b596cc:	803ff51e 	bne	r16,zero,b596a4 <_mprec_log10+0x50>
  b596d0:	4005883a 	mov	r2,r8
  b596d4:	4807883a 	mov	r3,r9
  b596d8:	dfc00117 	ldw	ra,4(sp)
  b596dc:	dc000017 	ldw	r16,0(sp)
  b596e0:	dec00204 	addi	sp,sp,8
  b596e4:	f800283a 	ret

00b596e8 <__copybits>:
  b596e8:	297fffc4 	addi	r5,r5,-1
  b596ec:	30800417 	ldw	r2,16(r6)
  b596f0:	280bd17a 	srai	r5,r5,5
  b596f4:	31800504 	addi	r6,r6,20
  b596f8:	1085883a 	add	r2,r2,r2
  b596fc:	294b883a 	add	r5,r5,r5
  b59700:	294b883a 	add	r5,r5,r5
  b59704:	1085883a 	add	r2,r2,r2
  b59708:	290b883a 	add	r5,r5,r4
  b5970c:	3087883a 	add	r3,r6,r2
  b59710:	29400104 	addi	r5,r5,4
  b59714:	30c0052e 	bgeu	r6,r3,b5972c <__copybits+0x44>
  b59718:	30800017 	ldw	r2,0(r6)
  b5971c:	31800104 	addi	r6,r6,4
  b59720:	20800015 	stw	r2,0(r4)
  b59724:	21000104 	addi	r4,r4,4
  b59728:	30fffb36 	bltu	r6,r3,b59718 <__copybits+0x30>
  b5972c:	2140032e 	bgeu	r4,r5,b5973c <__copybits+0x54>
  b59730:	20000015 	stw	zero,0(r4)
  b59734:	21000104 	addi	r4,r4,4
  b59738:	217ffd36 	bltu	r4,r5,b59730 <__copybits+0x48>
  b5973c:	f800283a 	ret

00b59740 <__any_on>:
  b59740:	20800417 	ldw	r2,16(r4)
  b59744:	2807d17a 	srai	r3,r5,5
  b59748:	21000504 	addi	r4,r4,20
  b5974c:	10c00d0e 	bge	r2,r3,b59784 <__any_on+0x44>
  b59750:	1085883a 	add	r2,r2,r2
  b59754:	1085883a 	add	r2,r2,r2
  b59758:	208d883a 	add	r6,r4,r2
  b5975c:	2180182e 	bgeu	r4,r6,b597c0 <__any_on+0x80>
  b59760:	30bfff17 	ldw	r2,-4(r6)
  b59764:	30ffff04 	addi	r3,r6,-4
  b59768:	1000041e 	bne	r2,zero,b5977c <__any_on+0x3c>
  b5976c:	20c0142e 	bgeu	r4,r3,b597c0 <__any_on+0x80>
  b59770:	18ffff04 	addi	r3,r3,-4
  b59774:	18800017 	ldw	r2,0(r3)
  b59778:	103ffc26 	beq	r2,zero,b5976c <__any_on+0x2c>
  b5977c:	00800044 	movi	r2,1
  b59780:	f800283a 	ret
  b59784:	18800a0e 	bge	r3,r2,b597b0 <__any_on+0x70>
  b59788:	294007cc 	andi	r5,r5,31
  b5978c:	28000826 	beq	r5,zero,b597b0 <__any_on+0x70>
  b59790:	18c5883a 	add	r2,r3,r3
  b59794:	1085883a 	add	r2,r2,r2
  b59798:	208d883a 	add	r6,r4,r2
  b5979c:	30c00017 	ldw	r3,0(r6)
  b597a0:	1944d83a 	srl	r2,r3,r5
  b597a4:	1144983a 	sll	r2,r2,r5
  b597a8:	18bff41e 	bne	r3,r2,b5977c <__any_on+0x3c>
  b597ac:	003feb06 	br	b5975c <__any_on+0x1c>
  b597b0:	18c5883a 	add	r2,r3,r3
  b597b4:	1085883a 	add	r2,r2,r2
  b597b8:	208d883a 	add	r6,r4,r2
  b597bc:	003fe706 	br	b5975c <__any_on+0x1c>
  b597c0:	0005883a 	mov	r2,zero
  b597c4:	f800283a 	ret

00b597c8 <_Balloc>:
  b597c8:	20c01317 	ldw	r3,76(r4)
  b597cc:	defffb04 	addi	sp,sp,-20
  b597d0:	dcc00315 	stw	r19,12(sp)
  b597d4:	dc800215 	stw	r18,8(sp)
  b597d8:	dfc00415 	stw	ra,16(sp)
  b597dc:	2825883a 	mov	r18,r5
  b597e0:	dc400115 	stw	r17,4(sp)
  b597e4:	dc000015 	stw	r16,0(sp)
  b597e8:	2027883a 	mov	r19,r4
  b597ec:	01800404 	movi	r6,16
  b597f0:	01400104 	movi	r5,4
  b597f4:	18001726 	beq	r3,zero,b59854 <_Balloc+0x8c>
  b597f8:	01400044 	movi	r5,1
  b597fc:	9485883a 	add	r2,r18,r18
  b59800:	2ca2983a 	sll	r17,r5,r18
  b59804:	1085883a 	add	r2,r2,r2
  b59808:	10c7883a 	add	r3,r2,r3
  b5980c:	1c000017 	ldw	r16,0(r3)
  b59810:	8c4d883a 	add	r6,r17,r17
  b59814:	318d883a 	add	r6,r6,r6
  b59818:	9809883a 	mov	r4,r19
  b5981c:	31800504 	addi	r6,r6,20
  b59820:	80001226 	beq	r16,zero,b5986c <_Balloc+0xa4>
  b59824:	80800017 	ldw	r2,0(r16)
  b59828:	18800015 	stw	r2,0(r3)
  b5982c:	80000415 	stw	zero,16(r16)
  b59830:	80000315 	stw	zero,12(r16)
  b59834:	8005883a 	mov	r2,r16
  b59838:	dfc00417 	ldw	ra,16(sp)
  b5983c:	dcc00317 	ldw	r19,12(sp)
  b59840:	dc800217 	ldw	r18,8(sp)
  b59844:	dc400117 	ldw	r17,4(sp)
  b59848:	dc000017 	ldw	r16,0(sp)
  b5984c:	dec00504 	addi	sp,sp,20
  b59850:	f800283a 	ret
  b59854:	0b5ab900 	call	b5ab90 <_calloc_r>
  b59858:	1007883a 	mov	r3,r2
  b5985c:	0021883a 	mov	r16,zero
  b59860:	98801315 	stw	r2,76(r19)
  b59864:	103fe41e 	bne	r2,zero,b597f8 <_Balloc+0x30>
  b59868:	003ff206 	br	b59834 <_Balloc+0x6c>
  b5986c:	0b5ab900 	call	b5ab90 <_calloc_r>
  b59870:	103ff026 	beq	r2,zero,b59834 <_Balloc+0x6c>
  b59874:	1021883a 	mov	r16,r2
  b59878:	14800115 	stw	r18,4(r2)
  b5987c:	14400215 	stw	r17,8(r2)
  b59880:	003fea06 	br	b5982c <_Balloc+0x64>

00b59884 <__d2b>:
  b59884:	defff504 	addi	sp,sp,-44
  b59888:	dcc00515 	stw	r19,20(sp)
  b5988c:	04c00044 	movi	r19,1
  b59890:	dc000215 	stw	r16,8(sp)
  b59894:	2821883a 	mov	r16,r5
  b59898:	980b883a 	mov	r5,r19
  b5989c:	ddc00915 	stw	r23,36(sp)
  b598a0:	dd800815 	stw	r22,32(sp)
  b598a4:	dd400715 	stw	r21,28(sp)
  b598a8:	dd000615 	stw	r20,24(sp)
  b598ac:	dc800415 	stw	r18,16(sp)
  b598b0:	dc400315 	stw	r17,12(sp)
  b598b4:	dfc00a15 	stw	ra,40(sp)
  b598b8:	3023883a 	mov	r17,r6
  b598bc:	382d883a 	mov	r22,r7
  b598c0:	ddc00b17 	ldw	r23,44(sp)
  b598c4:	0b597c80 	call	b597c8 <_Balloc>
  b598c8:	1025883a 	mov	r18,r2
  b598cc:	00a00034 	movhi	r2,32768
  b598d0:	10bfffc4 	addi	r2,r2,-1
  b598d4:	8888703a 	and	r4,r17,r2
  b598d8:	202ad53a 	srli	r21,r4,20
  b598dc:	00800434 	movhi	r2,16
  b598e0:	10bfffc4 	addi	r2,r2,-1
  b598e4:	8886703a 	and	r3,r17,r2
  b598e8:	a829003a 	cmpeq	r20,r21,zero
  b598ec:	800b883a 	mov	r5,r16
  b598f0:	d8c00115 	stw	r3,4(sp)
  b598f4:	94000504 	addi	r16,r18,20
  b598f8:	a000021e 	bne	r20,zero,b59904 <__d2b+0x80>
  b598fc:	18c00434 	orhi	r3,r3,16
  b59900:	d8c00115 	stw	r3,4(sp)
  b59904:	28002726 	beq	r5,zero,b599a4 <__d2b+0x120>
  b59908:	d809883a 	mov	r4,sp
  b5990c:	d9400015 	stw	r5,0(sp)
  b59910:	0b592e00 	call	b592e0 <__lo0bits>
  b59914:	100d883a 	mov	r6,r2
  b59918:	10003526 	beq	r2,zero,b599f0 <__d2b+0x16c>
  b5991c:	d8c00117 	ldw	r3,4(sp)
  b59920:	00800804 	movi	r2,32
  b59924:	1185c83a 	sub	r2,r2,r6
  b59928:	d9000017 	ldw	r4,0(sp)
  b5992c:	1886983a 	sll	r3,r3,r2
  b59930:	1906b03a 	or	r3,r3,r4
  b59934:	90c00515 	stw	r3,20(r18)
  b59938:	d8c00117 	ldw	r3,4(sp)
  b5993c:	1986d83a 	srl	r3,r3,r6
  b59940:	d8c00115 	stw	r3,4(sp)
  b59944:	180b003a 	cmpeq	r5,r3,zero
  b59948:	00800084 	movi	r2,2
  b5994c:	114bc83a 	sub	r5,r2,r5
  b59950:	80c00115 	stw	r3,4(r16)
  b59954:	91400415 	stw	r5,16(r18)
  b59958:	a0001a1e 	bne	r20,zero,b599c4 <__d2b+0x140>
  b5995c:	3545883a 	add	r2,r6,r21
  b59960:	10bef344 	addi	r2,r2,-1075
  b59964:	00c00d44 	movi	r3,53
  b59968:	b0800015 	stw	r2,0(r22)
  b5996c:	1987c83a 	sub	r3,r3,r6
  b59970:	b8c00015 	stw	r3,0(r23)
  b59974:	9005883a 	mov	r2,r18
  b59978:	dfc00a17 	ldw	ra,40(sp)
  b5997c:	ddc00917 	ldw	r23,36(sp)
  b59980:	dd800817 	ldw	r22,32(sp)
  b59984:	dd400717 	ldw	r21,28(sp)
  b59988:	dd000617 	ldw	r20,24(sp)
  b5998c:	dcc00517 	ldw	r19,20(sp)
  b59990:	dc800417 	ldw	r18,16(sp)
  b59994:	dc400317 	ldw	r17,12(sp)
  b59998:	dc000217 	ldw	r16,8(sp)
  b5999c:	dec00b04 	addi	sp,sp,44
  b599a0:	f800283a 	ret
  b599a4:	d9000104 	addi	r4,sp,4
  b599a8:	0b592e00 	call	b592e0 <__lo0bits>
  b599ac:	11800804 	addi	r6,r2,32
  b599b0:	d8800117 	ldw	r2,4(sp)
  b599b4:	94c00415 	stw	r19,16(r18)
  b599b8:	980b883a 	mov	r5,r19
  b599bc:	90800515 	stw	r2,20(r18)
  b599c0:	a03fe626 	beq	r20,zero,b5995c <__d2b+0xd8>
  b599c4:	2945883a 	add	r2,r5,r5
  b599c8:	1085883a 	add	r2,r2,r2
  b599cc:	1405883a 	add	r2,r2,r16
  b599d0:	113fff17 	ldw	r4,-4(r2)
  b599d4:	30fef384 	addi	r3,r6,-1074
  b599d8:	2820917a 	slli	r16,r5,5
  b599dc:	b0c00015 	stw	r3,0(r22)
  b599e0:	0b592700 	call	b59270 <__hi0bits>
  b599e4:	80a1c83a 	sub	r16,r16,r2
  b599e8:	bc000015 	stw	r16,0(r23)
  b599ec:	003fe106 	br	b59974 <__d2b+0xf0>
  b599f0:	d8800017 	ldw	r2,0(sp)
  b599f4:	90800515 	stw	r2,20(r18)
  b599f8:	d8c00117 	ldw	r3,4(sp)
  b599fc:	003fd106 	br	b59944 <__d2b+0xc0>

00b59a00 <__mdiff>:
  b59a00:	defffb04 	addi	sp,sp,-20
  b59a04:	dc000015 	stw	r16,0(sp)
  b59a08:	2821883a 	mov	r16,r5
  b59a0c:	dc800215 	stw	r18,8(sp)
  b59a10:	300b883a 	mov	r5,r6
  b59a14:	2025883a 	mov	r18,r4
  b59a18:	8009883a 	mov	r4,r16
  b59a1c:	dc400115 	stw	r17,4(sp)
  b59a20:	dfc00415 	stw	ra,16(sp)
  b59a24:	dcc00315 	stw	r19,12(sp)
  b59a28:	3023883a 	mov	r17,r6
  b59a2c:	0b593a40 	call	b593a4 <__mcmp>
  b59a30:	10004226 	beq	r2,zero,b59b3c <__mdiff+0x13c>
  b59a34:	10005016 	blt	r2,zero,b59b78 <__mdiff+0x178>
  b59a38:	0027883a 	mov	r19,zero
  b59a3c:	81400117 	ldw	r5,4(r16)
  b59a40:	9009883a 	mov	r4,r18
  b59a44:	0b597c80 	call	b597c8 <_Balloc>
  b59a48:	1019883a 	mov	r12,r2
  b59a4c:	82800417 	ldw	r10,16(r16)
  b59a50:	88800417 	ldw	r2,16(r17)
  b59a54:	81800504 	addi	r6,r16,20
  b59a58:	5287883a 	add	r3,r10,r10
  b59a5c:	1085883a 	add	r2,r2,r2
  b59a60:	18c7883a 	add	r3,r3,r3
  b59a64:	1085883a 	add	r2,r2,r2
  b59a68:	8a000504 	addi	r8,r17,20
  b59a6c:	64c00315 	stw	r19,12(r12)
  b59a70:	30db883a 	add	r13,r6,r3
  b59a74:	4097883a 	add	r11,r8,r2
  b59a78:	61c00504 	addi	r7,r12,20
  b59a7c:	0013883a 	mov	r9,zero
  b59a80:	31000017 	ldw	r4,0(r6)
  b59a84:	41400017 	ldw	r5,0(r8)
  b59a88:	42000104 	addi	r8,r8,4
  b59a8c:	20bfffcc 	andi	r2,r4,65535
  b59a90:	28ffffcc 	andi	r3,r5,65535
  b59a94:	10c5c83a 	sub	r2,r2,r3
  b59a98:	1245883a 	add	r2,r2,r9
  b59a9c:	2008d43a 	srli	r4,r4,16
  b59aa0:	280ad43a 	srli	r5,r5,16
  b59aa4:	1007d43a 	srai	r3,r2,16
  b59aa8:	3880000d 	sth	r2,0(r7)
  b59aac:	2149c83a 	sub	r4,r4,r5
  b59ab0:	20c9883a 	add	r4,r4,r3
  b59ab4:	3900008d 	sth	r4,2(r7)
  b59ab8:	31800104 	addi	r6,r6,4
  b59abc:	39c00104 	addi	r7,r7,4
  b59ac0:	2013d43a 	srai	r9,r4,16
  b59ac4:	42ffee36 	bltu	r8,r11,b59a80 <__mdiff+0x80>
  b59ac8:	33400c2e 	bgeu	r6,r13,b59afc <__mdiff+0xfc>
  b59acc:	30800017 	ldw	r2,0(r6)
  b59ad0:	31800104 	addi	r6,r6,4
  b59ad4:	10ffffcc 	andi	r3,r2,65535
  b59ad8:	1a47883a 	add	r3,r3,r9
  b59adc:	1004d43a 	srli	r2,r2,16
  b59ae0:	1809d43a 	srai	r4,r3,16
  b59ae4:	38c0000d 	sth	r3,0(r7)
  b59ae8:	1105883a 	add	r2,r2,r4
  b59aec:	3880008d 	sth	r2,2(r7)
  b59af0:	1013d43a 	srai	r9,r2,16
  b59af4:	39c00104 	addi	r7,r7,4
  b59af8:	337ff436 	bltu	r6,r13,b59acc <__mdiff+0xcc>
  b59afc:	38bfff17 	ldw	r2,-4(r7)
  b59b00:	38ffff04 	addi	r3,r7,-4
  b59b04:	1000041e 	bne	r2,zero,b59b18 <__mdiff+0x118>
  b59b08:	18ffff04 	addi	r3,r3,-4
  b59b0c:	18800017 	ldw	r2,0(r3)
  b59b10:	52bfffc4 	addi	r10,r10,-1
  b59b14:	103ffc26 	beq	r2,zero,b59b08 <__mdiff+0x108>
  b59b18:	6005883a 	mov	r2,r12
  b59b1c:	62800415 	stw	r10,16(r12)
  b59b20:	dfc00417 	ldw	ra,16(sp)
  b59b24:	dcc00317 	ldw	r19,12(sp)
  b59b28:	dc800217 	ldw	r18,8(sp)
  b59b2c:	dc400117 	ldw	r17,4(sp)
  b59b30:	dc000017 	ldw	r16,0(sp)
  b59b34:	dec00504 	addi	sp,sp,20
  b59b38:	f800283a 	ret
  b59b3c:	9009883a 	mov	r4,r18
  b59b40:	000b883a 	mov	r5,zero
  b59b44:	0b597c80 	call	b597c8 <_Balloc>
  b59b48:	1019883a 	mov	r12,r2
  b59b4c:	00800044 	movi	r2,1
  b59b50:	60800415 	stw	r2,16(r12)
  b59b54:	6005883a 	mov	r2,r12
  b59b58:	60000515 	stw	zero,20(r12)
  b59b5c:	dfc00417 	ldw	ra,16(sp)
  b59b60:	dcc00317 	ldw	r19,12(sp)
  b59b64:	dc800217 	ldw	r18,8(sp)
  b59b68:	dc400117 	ldw	r17,4(sp)
  b59b6c:	dc000017 	ldw	r16,0(sp)
  b59b70:	dec00504 	addi	sp,sp,20
  b59b74:	f800283a 	ret
  b59b78:	880d883a 	mov	r6,r17
  b59b7c:	04c00044 	movi	r19,1
  b59b80:	8023883a 	mov	r17,r16
  b59b84:	3021883a 	mov	r16,r6
  b59b88:	003fac06 	br	b59a3c <__mdiff+0x3c>

00b59b8c <__lshift>:
  b59b8c:	defff904 	addi	sp,sp,-28
  b59b90:	28800417 	ldw	r2,16(r5)
  b59b94:	dc000015 	stw	r16,0(sp)
  b59b98:	3021d17a 	srai	r16,r6,5
  b59b9c:	28c00217 	ldw	r3,8(r5)
  b59ba0:	10800044 	addi	r2,r2,1
  b59ba4:	dc400115 	stw	r17,4(sp)
  b59ba8:	80a3883a 	add	r17,r16,r2
  b59bac:	dd400515 	stw	r21,20(sp)
  b59bb0:	dd000415 	stw	r20,16(sp)
  b59bb4:	dc800215 	stw	r18,8(sp)
  b59bb8:	dfc00615 	stw	ra,24(sp)
  b59bbc:	2825883a 	mov	r18,r5
  b59bc0:	dcc00315 	stw	r19,12(sp)
  b59bc4:	3029883a 	mov	r20,r6
  b59bc8:	202b883a 	mov	r21,r4
  b59bcc:	29400117 	ldw	r5,4(r5)
  b59bd0:	1c40030e 	bge	r3,r17,b59be0 <__lshift+0x54>
  b59bd4:	18c7883a 	add	r3,r3,r3
  b59bd8:	29400044 	addi	r5,r5,1
  b59bdc:	1c7ffd16 	blt	r3,r17,b59bd4 <__lshift+0x48>
  b59be0:	a809883a 	mov	r4,r21
  b59be4:	0b597c80 	call	b597c8 <_Balloc>
  b59be8:	1027883a 	mov	r19,r2
  b59bec:	11400504 	addi	r5,r2,20
  b59bf0:	0400090e 	bge	zero,r16,b59c18 <__lshift+0x8c>
  b59bf4:	2805883a 	mov	r2,r5
  b59bf8:	0007883a 	mov	r3,zero
  b59bfc:	18c00044 	addi	r3,r3,1
  b59c00:	10000015 	stw	zero,0(r2)
  b59c04:	10800104 	addi	r2,r2,4
  b59c08:	80fffc1e 	bne	r16,r3,b59bfc <__lshift+0x70>
  b59c0c:	8405883a 	add	r2,r16,r16
  b59c10:	1085883a 	add	r2,r2,r2
  b59c14:	288b883a 	add	r5,r5,r2
  b59c18:	90800417 	ldw	r2,16(r18)
  b59c1c:	91000504 	addi	r4,r18,20
  b59c20:	a18007cc 	andi	r6,r20,31
  b59c24:	1085883a 	add	r2,r2,r2
  b59c28:	1085883a 	add	r2,r2,r2
  b59c2c:	208f883a 	add	r7,r4,r2
  b59c30:	30001e26 	beq	r6,zero,b59cac <__lshift+0x120>
  b59c34:	00800804 	movi	r2,32
  b59c38:	1191c83a 	sub	r8,r2,r6
  b59c3c:	0007883a 	mov	r3,zero
  b59c40:	20800017 	ldw	r2,0(r4)
  b59c44:	1184983a 	sll	r2,r2,r6
  b59c48:	1884b03a 	or	r2,r3,r2
  b59c4c:	28800015 	stw	r2,0(r5)
  b59c50:	20c00017 	ldw	r3,0(r4)
  b59c54:	21000104 	addi	r4,r4,4
  b59c58:	29400104 	addi	r5,r5,4
  b59c5c:	1a06d83a 	srl	r3,r3,r8
  b59c60:	21fff736 	bltu	r4,r7,b59c40 <__lshift+0xb4>
  b59c64:	28c00015 	stw	r3,0(r5)
  b59c68:	18000126 	beq	r3,zero,b59c70 <__lshift+0xe4>
  b59c6c:	8c400044 	addi	r17,r17,1
  b59c70:	88bfffc4 	addi	r2,r17,-1
  b59c74:	98800415 	stw	r2,16(r19)
  b59c78:	a809883a 	mov	r4,r21
  b59c7c:	900b883a 	mov	r5,r18
  b59c80:	0b592480 	call	b59248 <_Bfree>
  b59c84:	9805883a 	mov	r2,r19
  b59c88:	dfc00617 	ldw	ra,24(sp)
  b59c8c:	dd400517 	ldw	r21,20(sp)
  b59c90:	dd000417 	ldw	r20,16(sp)
  b59c94:	dcc00317 	ldw	r19,12(sp)
  b59c98:	dc800217 	ldw	r18,8(sp)
  b59c9c:	dc400117 	ldw	r17,4(sp)
  b59ca0:	dc000017 	ldw	r16,0(sp)
  b59ca4:	dec00704 	addi	sp,sp,28
  b59ca8:	f800283a 	ret
  b59cac:	20800017 	ldw	r2,0(r4)
  b59cb0:	21000104 	addi	r4,r4,4
  b59cb4:	28800015 	stw	r2,0(r5)
  b59cb8:	29400104 	addi	r5,r5,4
  b59cbc:	21ffec2e 	bgeu	r4,r7,b59c70 <__lshift+0xe4>
  b59cc0:	20800017 	ldw	r2,0(r4)
  b59cc4:	21000104 	addi	r4,r4,4
  b59cc8:	28800015 	stw	r2,0(r5)
  b59ccc:	29400104 	addi	r5,r5,4
  b59cd0:	21fff636 	bltu	r4,r7,b59cac <__lshift+0x120>
  b59cd4:	003fe606 	br	b59c70 <__lshift+0xe4>

00b59cd8 <__multiply>:
  b59cd8:	defff904 	addi	sp,sp,-28
  b59cdc:	dcc00315 	stw	r19,12(sp)
  b59ce0:	dc800215 	stw	r18,8(sp)
  b59ce4:	2cc00417 	ldw	r19,16(r5)
  b59ce8:	34800417 	ldw	r18,16(r6)
  b59cec:	dd000415 	stw	r20,16(sp)
  b59cf0:	dc400115 	stw	r17,4(sp)
  b59cf4:	dfc00615 	stw	ra,24(sp)
  b59cf8:	dd400515 	stw	r21,20(sp)
  b59cfc:	dc000015 	stw	r16,0(sp)
  b59d00:	2823883a 	mov	r17,r5
  b59d04:	3029883a 	mov	r20,r6
  b59d08:	9c80040e 	bge	r19,r18,b59d1c <__multiply+0x44>
  b59d0c:	9027883a 	mov	r19,r18
  b59d10:	2c800417 	ldw	r18,16(r5)
  b59d14:	2829883a 	mov	r20,r5
  b59d18:	3023883a 	mov	r17,r6
  b59d1c:	88800217 	ldw	r2,8(r17)
  b59d20:	9ca1883a 	add	r16,r19,r18
  b59d24:	89400117 	ldw	r5,4(r17)
  b59d28:	1400010e 	bge	r2,r16,b59d30 <__multiply+0x58>
  b59d2c:	29400044 	addi	r5,r5,1
  b59d30:	0b597c80 	call	b597c8 <_Balloc>
  b59d34:	102b883a 	mov	r21,r2
  b59d38:	8405883a 	add	r2,r16,r16
  b59d3c:	1085883a 	add	r2,r2,r2
  b59d40:	a9000504 	addi	r4,r21,20
  b59d44:	209d883a 	add	r14,r4,r2
  b59d48:	2380042e 	bgeu	r4,r14,b59d5c <__multiply+0x84>
  b59d4c:	2005883a 	mov	r2,r4
  b59d50:	10000015 	stw	zero,0(r2)
  b59d54:	10800104 	addi	r2,r2,4
  b59d58:	13bffd36 	bltu	r2,r14,b59d50 <__multiply+0x78>
  b59d5c:	9485883a 	add	r2,r18,r18
  b59d60:	9cc7883a 	add	r3,r19,r19
  b59d64:	a1800504 	addi	r6,r20,20
  b59d68:	1085883a 	add	r2,r2,r2
  b59d6c:	8b400504 	addi	r13,r17,20
  b59d70:	18c7883a 	add	r3,r3,r3
  b59d74:	309f883a 	add	r15,r6,r2
  b59d78:	68d7883a 	add	r11,r13,r3
  b59d7c:	33c03b2e 	bgeu	r6,r15,b59e6c <__multiply+0x194>
  b59d80:	2019883a 	mov	r12,r4
  b59d84:	30800017 	ldw	r2,0(r6)
  b59d88:	127fffcc 	andi	r9,r2,65535
  b59d8c:	48001826 	beq	r9,zero,b59df0 <__multiply+0x118>
  b59d90:	6811883a 	mov	r8,r13
  b59d94:	600f883a 	mov	r7,r12
  b59d98:	0015883a 	mov	r10,zero
  b59d9c:	40c00017 	ldw	r3,0(r8)
  b59da0:	39400017 	ldw	r5,0(r7)
  b59da4:	42000104 	addi	r8,r8,4
  b59da8:	193fffcc 	andi	r4,r3,65535
  b59dac:	4909383a 	mul	r4,r9,r4
  b59db0:	1806d43a 	srli	r3,r3,16
  b59db4:	28bfffcc 	andi	r2,r5,65535
  b59db8:	5085883a 	add	r2,r10,r2
  b59dbc:	2089883a 	add	r4,r4,r2
  b59dc0:	48c7383a 	mul	r3,r9,r3
  b59dc4:	280ad43a 	srli	r5,r5,16
  b59dc8:	2004d43a 	srli	r2,r4,16
  b59dcc:	3900000d 	sth	r4,0(r7)
  b59dd0:	1947883a 	add	r3,r3,r5
  b59dd4:	10c5883a 	add	r2,r2,r3
  b59dd8:	3880008d 	sth	r2,2(r7)
  b59ddc:	1014d43a 	srli	r10,r2,16
  b59de0:	39c00104 	addi	r7,r7,4
  b59de4:	42ffed36 	bltu	r8,r11,b59d9c <__multiply+0xc4>
  b59de8:	3a800015 	stw	r10,0(r7)
  b59dec:	30800017 	ldw	r2,0(r6)
  b59df0:	1012d43a 	srli	r9,r2,16
  b59df4:	48001926 	beq	r9,zero,b59e5c <__multiply+0x184>
  b59df8:	60800017 	ldw	r2,0(r12)
  b59dfc:	6811883a 	mov	r8,r13
  b59e00:	600f883a 	mov	r7,r12
  b59e04:	0015883a 	mov	r10,zero
  b59e08:	100b883a 	mov	r5,r2
  b59e0c:	41000017 	ldw	r4,0(r8)
  b59e10:	2806d43a 	srli	r3,r5,16
  b59e14:	3880000d 	sth	r2,0(r7)
  b59e18:	20bfffcc 	andi	r2,r4,65535
  b59e1c:	4885383a 	mul	r2,r9,r2
  b59e20:	50c7883a 	add	r3,r10,r3
  b59e24:	2008d43a 	srli	r4,r4,16
  b59e28:	10c5883a 	add	r2,r2,r3
  b59e2c:	3880008d 	sth	r2,2(r7)
  b59e30:	39c00104 	addi	r7,r7,4
  b59e34:	39400017 	ldw	r5,0(r7)
  b59e38:	4909383a 	mul	r4,r9,r4
  b59e3c:	1004d43a 	srli	r2,r2,16
  b59e40:	28ffffcc 	andi	r3,r5,65535
  b59e44:	20c9883a 	add	r4,r4,r3
  b59e48:	1105883a 	add	r2,r2,r4
  b59e4c:	42000104 	addi	r8,r8,4
  b59e50:	1014d43a 	srli	r10,r2,16
  b59e54:	42ffed36 	bltu	r8,r11,b59e0c <__multiply+0x134>
  b59e58:	38800015 	stw	r2,0(r7)
  b59e5c:	31800104 	addi	r6,r6,4
  b59e60:	33c0022e 	bgeu	r6,r15,b59e6c <__multiply+0x194>
  b59e64:	63000104 	addi	r12,r12,4
  b59e68:	003fc606 	br	b59d84 <__multiply+0xac>
  b59e6c:	0400090e 	bge	zero,r16,b59e94 <__multiply+0x1bc>
  b59e70:	70bfff17 	ldw	r2,-4(r14)
  b59e74:	70ffff04 	addi	r3,r14,-4
  b59e78:	10000326 	beq	r2,zero,b59e88 <__multiply+0x1b0>
  b59e7c:	00000506 	br	b59e94 <__multiply+0x1bc>
  b59e80:	18800017 	ldw	r2,0(r3)
  b59e84:	1000031e 	bne	r2,zero,b59e94 <__multiply+0x1bc>
  b59e88:	843fffc4 	addi	r16,r16,-1
  b59e8c:	18ffff04 	addi	r3,r3,-4
  b59e90:	803ffb1e 	bne	r16,zero,b59e80 <__multiply+0x1a8>
  b59e94:	a805883a 	mov	r2,r21
  b59e98:	ac000415 	stw	r16,16(r21)
  b59e9c:	dfc00617 	ldw	ra,24(sp)
  b59ea0:	dd400517 	ldw	r21,20(sp)
  b59ea4:	dd000417 	ldw	r20,16(sp)
  b59ea8:	dcc00317 	ldw	r19,12(sp)
  b59eac:	dc800217 	ldw	r18,8(sp)
  b59eb0:	dc400117 	ldw	r17,4(sp)
  b59eb4:	dc000017 	ldw	r16,0(sp)
  b59eb8:	dec00704 	addi	sp,sp,28
  b59ebc:	f800283a 	ret

00b59ec0 <__i2b>:
  b59ec0:	defffd04 	addi	sp,sp,-12
  b59ec4:	dc000015 	stw	r16,0(sp)
  b59ec8:	04000044 	movi	r16,1
  b59ecc:	dc800115 	stw	r18,4(sp)
  b59ed0:	2825883a 	mov	r18,r5
  b59ed4:	800b883a 	mov	r5,r16
  b59ed8:	dfc00215 	stw	ra,8(sp)
  b59edc:	0b597c80 	call	b597c8 <_Balloc>
  b59ee0:	14000415 	stw	r16,16(r2)
  b59ee4:	14800515 	stw	r18,20(r2)
  b59ee8:	dfc00217 	ldw	ra,8(sp)
  b59eec:	dc800117 	ldw	r18,4(sp)
  b59ef0:	dc000017 	ldw	r16,0(sp)
  b59ef4:	dec00304 	addi	sp,sp,12
  b59ef8:	f800283a 	ret

00b59efc <__multadd>:
  b59efc:	defffa04 	addi	sp,sp,-24
  b59f00:	dc800215 	stw	r18,8(sp)
  b59f04:	2c800417 	ldw	r18,16(r5)
  b59f08:	dd000415 	stw	r20,16(sp)
  b59f0c:	dcc00315 	stw	r19,12(sp)
  b59f10:	dc000015 	stw	r16,0(sp)
  b59f14:	dfc00515 	stw	ra,20(sp)
  b59f18:	3821883a 	mov	r16,r7
  b59f1c:	dc400115 	stw	r17,4(sp)
  b59f20:	2827883a 	mov	r19,r5
  b59f24:	2029883a 	mov	r20,r4
  b59f28:	2a000504 	addi	r8,r5,20
  b59f2c:	000f883a 	mov	r7,zero
  b59f30:	40800017 	ldw	r2,0(r8)
  b59f34:	39c00044 	addi	r7,r7,1
  b59f38:	10ffffcc 	andi	r3,r2,65535
  b59f3c:	1987383a 	mul	r3,r3,r6
  b59f40:	1004d43a 	srli	r2,r2,16
  b59f44:	1c07883a 	add	r3,r3,r16
  b59f48:	180ad43a 	srli	r5,r3,16
  b59f4c:	1185383a 	mul	r2,r2,r6
  b59f50:	18ffffcc 	andi	r3,r3,65535
  b59f54:	1145883a 	add	r2,r2,r5
  b59f58:	1008943a 	slli	r4,r2,16
  b59f5c:	1020d43a 	srli	r16,r2,16
  b59f60:	20c9883a 	add	r4,r4,r3
  b59f64:	41000015 	stw	r4,0(r8)
  b59f68:	42000104 	addi	r8,r8,4
  b59f6c:	3cbff016 	blt	r7,r18,b59f30 <__multadd+0x34>
  b59f70:	80000826 	beq	r16,zero,b59f94 <__multadd+0x98>
  b59f74:	98800217 	ldw	r2,8(r19)
  b59f78:	90800f0e 	bge	r18,r2,b59fb8 <__multadd+0xbc>
  b59f7c:	9485883a 	add	r2,r18,r18
  b59f80:	1085883a 	add	r2,r2,r2
  b59f84:	14c5883a 	add	r2,r2,r19
  b59f88:	90c00044 	addi	r3,r18,1
  b59f8c:	14000515 	stw	r16,20(r2)
  b59f90:	98c00415 	stw	r3,16(r19)
  b59f94:	9805883a 	mov	r2,r19
  b59f98:	dfc00517 	ldw	ra,20(sp)
  b59f9c:	dd000417 	ldw	r20,16(sp)
  b59fa0:	dcc00317 	ldw	r19,12(sp)
  b59fa4:	dc800217 	ldw	r18,8(sp)
  b59fa8:	dc400117 	ldw	r17,4(sp)
  b59fac:	dc000017 	ldw	r16,0(sp)
  b59fb0:	dec00604 	addi	sp,sp,24
  b59fb4:	f800283a 	ret
  b59fb8:	99400117 	ldw	r5,4(r19)
  b59fbc:	a009883a 	mov	r4,r20
  b59fc0:	29400044 	addi	r5,r5,1
  b59fc4:	0b597c80 	call	b597c8 <_Balloc>
  b59fc8:	99800417 	ldw	r6,16(r19)
  b59fcc:	99400304 	addi	r5,r19,12
  b59fd0:	11000304 	addi	r4,r2,12
  b59fd4:	318d883a 	add	r6,r6,r6
  b59fd8:	318d883a 	add	r6,r6,r6
  b59fdc:	31800204 	addi	r6,r6,8
  b59fe0:	1023883a 	mov	r17,r2
  b59fe4:	0b590300 	call	b59030 <memcpy>
  b59fe8:	980b883a 	mov	r5,r19
  b59fec:	a009883a 	mov	r4,r20
  b59ff0:	0b592480 	call	b59248 <_Bfree>
  b59ff4:	8827883a 	mov	r19,r17
  b59ff8:	003fe006 	br	b59f7c <__multadd+0x80>

00b59ffc <__pow5mult>:
  b59ffc:	defffa04 	addi	sp,sp,-24
  b5a000:	308000cc 	andi	r2,r6,3
  b5a004:	dd000415 	stw	r20,16(sp)
  b5a008:	dcc00315 	stw	r19,12(sp)
  b5a00c:	dc000015 	stw	r16,0(sp)
  b5a010:	dfc00515 	stw	ra,20(sp)
  b5a014:	dc800215 	stw	r18,8(sp)
  b5a018:	dc400115 	stw	r17,4(sp)
  b5a01c:	3021883a 	mov	r16,r6
  b5a020:	2027883a 	mov	r19,r4
  b5a024:	2829883a 	mov	r20,r5
  b5a028:	10002b1e 	bne	r2,zero,b5a0d8 <__pow5mult+0xdc>
  b5a02c:	8025d0ba 	srai	r18,r16,2
  b5a030:	90001b26 	beq	r18,zero,b5a0a0 <__pow5mult+0xa4>
  b5a034:	9c001217 	ldw	r16,72(r19)
  b5a038:	8000081e 	bne	r16,zero,b5a05c <__pow5mult+0x60>
  b5a03c:	00003006 	br	b5a100 <__pow5mult+0x104>
  b5a040:	800b883a 	mov	r5,r16
  b5a044:	800d883a 	mov	r6,r16
  b5a048:	9809883a 	mov	r4,r19
  b5a04c:	90001426 	beq	r18,zero,b5a0a0 <__pow5mult+0xa4>
  b5a050:	80800017 	ldw	r2,0(r16)
  b5a054:	10001b26 	beq	r2,zero,b5a0c4 <__pow5mult+0xc8>
  b5a058:	1021883a 	mov	r16,r2
  b5a05c:	9080004c 	andi	r2,r18,1
  b5a060:	1005003a 	cmpeq	r2,r2,zero
  b5a064:	9025d07a 	srai	r18,r18,1
  b5a068:	800d883a 	mov	r6,r16
  b5a06c:	9809883a 	mov	r4,r19
  b5a070:	a00b883a 	mov	r5,r20
  b5a074:	103ff21e 	bne	r2,zero,b5a040 <__pow5mult+0x44>
  b5a078:	0b59cd80 	call	b59cd8 <__multiply>
  b5a07c:	a00b883a 	mov	r5,r20
  b5a080:	9809883a 	mov	r4,r19
  b5a084:	1023883a 	mov	r17,r2
  b5a088:	0b592480 	call	b59248 <_Bfree>
  b5a08c:	8829883a 	mov	r20,r17
  b5a090:	800b883a 	mov	r5,r16
  b5a094:	800d883a 	mov	r6,r16
  b5a098:	9809883a 	mov	r4,r19
  b5a09c:	903fec1e 	bne	r18,zero,b5a050 <__pow5mult+0x54>
  b5a0a0:	a005883a 	mov	r2,r20
  b5a0a4:	dfc00517 	ldw	ra,20(sp)
  b5a0a8:	dd000417 	ldw	r20,16(sp)
  b5a0ac:	dcc00317 	ldw	r19,12(sp)
  b5a0b0:	dc800217 	ldw	r18,8(sp)
  b5a0b4:	dc400117 	ldw	r17,4(sp)
  b5a0b8:	dc000017 	ldw	r16,0(sp)
  b5a0bc:	dec00604 	addi	sp,sp,24
  b5a0c0:	f800283a 	ret
  b5a0c4:	0b59cd80 	call	b59cd8 <__multiply>
  b5a0c8:	80800015 	stw	r2,0(r16)
  b5a0cc:	1021883a 	mov	r16,r2
  b5a0d0:	10000015 	stw	zero,0(r2)
  b5a0d4:	003fe106 	br	b5a05c <__pow5mult+0x60>
  b5a0d8:	1085883a 	add	r2,r2,r2
  b5a0dc:	00c02db4 	movhi	r3,182
  b5a0e0:	18c4c104 	addi	r3,r3,4868
  b5a0e4:	1085883a 	add	r2,r2,r2
  b5a0e8:	10c5883a 	add	r2,r2,r3
  b5a0ec:	11bfff17 	ldw	r6,-4(r2)
  b5a0f0:	000f883a 	mov	r7,zero
  b5a0f4:	0b59efc0 	call	b59efc <__multadd>
  b5a0f8:	1029883a 	mov	r20,r2
  b5a0fc:	003fcb06 	br	b5a02c <__pow5mult+0x30>
  b5a100:	9809883a 	mov	r4,r19
  b5a104:	01409c44 	movi	r5,625
  b5a108:	0b59ec00 	call	b59ec0 <__i2b>
  b5a10c:	98801215 	stw	r2,72(r19)
  b5a110:	1021883a 	mov	r16,r2
  b5a114:	10000015 	stw	zero,0(r2)
  b5a118:	003fd006 	br	b5a05c <__pow5mult+0x60>

00b5a11c <__s2b>:
  b5a11c:	defff904 	addi	sp,sp,-28
  b5a120:	dcc00315 	stw	r19,12(sp)
  b5a124:	dc800215 	stw	r18,8(sp)
  b5a128:	2827883a 	mov	r19,r5
  b5a12c:	2025883a 	mov	r18,r4
  b5a130:	01400244 	movi	r5,9
  b5a134:	39000204 	addi	r4,r7,8
  b5a138:	dd000415 	stw	r20,16(sp)
  b5a13c:	dc400115 	stw	r17,4(sp)
  b5a140:	dfc00615 	stw	ra,24(sp)
  b5a144:	dd400515 	stw	r21,20(sp)
  b5a148:	dc000015 	stw	r16,0(sp)
  b5a14c:	3829883a 	mov	r20,r7
  b5a150:	3023883a 	mov	r17,r6
  b5a154:	0b5c4fc0 	call	b5c4fc <__divsi3>
  b5a158:	00c00044 	movi	r3,1
  b5a15c:	1880350e 	bge	r3,r2,b5a234 <__s2b+0x118>
  b5a160:	000b883a 	mov	r5,zero
  b5a164:	18c7883a 	add	r3,r3,r3
  b5a168:	29400044 	addi	r5,r5,1
  b5a16c:	18bffd16 	blt	r3,r2,b5a164 <__s2b+0x48>
  b5a170:	9009883a 	mov	r4,r18
  b5a174:	0b597c80 	call	b597c8 <_Balloc>
  b5a178:	1011883a 	mov	r8,r2
  b5a17c:	d8800717 	ldw	r2,28(sp)
  b5a180:	00c00044 	movi	r3,1
  b5a184:	01800244 	movi	r6,9
  b5a188:	40800515 	stw	r2,20(r8)
  b5a18c:	40c00415 	stw	r3,16(r8)
  b5a190:	3440260e 	bge	r6,r17,b5a22c <__s2b+0x110>
  b5a194:	3021883a 	mov	r16,r6
  b5a198:	99ab883a 	add	r21,r19,r6
  b5a19c:	9c05883a 	add	r2,r19,r16
  b5a1a0:	11c00007 	ldb	r7,0(r2)
  b5a1a4:	400b883a 	mov	r5,r8
  b5a1a8:	9009883a 	mov	r4,r18
  b5a1ac:	39fff404 	addi	r7,r7,-48
  b5a1b0:	01800284 	movi	r6,10
  b5a1b4:	0b59efc0 	call	b59efc <__multadd>
  b5a1b8:	84000044 	addi	r16,r16,1
  b5a1bc:	1011883a 	mov	r8,r2
  b5a1c0:	8c3ff61e 	bne	r17,r16,b5a19c <__s2b+0x80>
  b5a1c4:	ac45883a 	add	r2,r21,r17
  b5a1c8:	117ffe04 	addi	r5,r2,-8
  b5a1cc:	880d883a 	mov	r6,r17
  b5a1d0:	35000c0e 	bge	r6,r20,b5a204 <__s2b+0xe8>
  b5a1d4:	a185c83a 	sub	r2,r20,r6
  b5a1d8:	2821883a 	mov	r16,r5
  b5a1dc:	28a3883a 	add	r17,r5,r2
  b5a1e0:	81c00007 	ldb	r7,0(r16)
  b5a1e4:	400b883a 	mov	r5,r8
  b5a1e8:	9009883a 	mov	r4,r18
  b5a1ec:	39fff404 	addi	r7,r7,-48
  b5a1f0:	01800284 	movi	r6,10
  b5a1f4:	0b59efc0 	call	b59efc <__multadd>
  b5a1f8:	84000044 	addi	r16,r16,1
  b5a1fc:	1011883a 	mov	r8,r2
  b5a200:	847ff71e 	bne	r16,r17,b5a1e0 <__s2b+0xc4>
  b5a204:	4005883a 	mov	r2,r8
  b5a208:	dfc00617 	ldw	ra,24(sp)
  b5a20c:	dd400517 	ldw	r21,20(sp)
  b5a210:	dd000417 	ldw	r20,16(sp)
  b5a214:	dcc00317 	ldw	r19,12(sp)
  b5a218:	dc800217 	ldw	r18,8(sp)
  b5a21c:	dc400117 	ldw	r17,4(sp)
  b5a220:	dc000017 	ldw	r16,0(sp)
  b5a224:	dec00704 	addi	sp,sp,28
  b5a228:	f800283a 	ret
  b5a22c:	99400284 	addi	r5,r19,10
  b5a230:	003fe706 	br	b5a1d0 <__s2b+0xb4>
  b5a234:	000b883a 	mov	r5,zero
  b5a238:	003fcd06 	br	b5a170 <__s2b+0x54>

00b5a23c <_realloc_r>:
  b5a23c:	defff404 	addi	sp,sp,-48
  b5a240:	dd800815 	stw	r22,32(sp)
  b5a244:	dc800415 	stw	r18,16(sp)
  b5a248:	dc400315 	stw	r17,12(sp)
  b5a24c:	dfc00b15 	stw	ra,44(sp)
  b5a250:	df000a15 	stw	fp,40(sp)
  b5a254:	ddc00915 	stw	r23,36(sp)
  b5a258:	dd400715 	stw	r21,28(sp)
  b5a25c:	dd000615 	stw	r20,24(sp)
  b5a260:	dcc00515 	stw	r19,20(sp)
  b5a264:	dc000215 	stw	r16,8(sp)
  b5a268:	2825883a 	mov	r18,r5
  b5a26c:	3023883a 	mov	r17,r6
  b5a270:	202d883a 	mov	r22,r4
  b5a274:	2800c926 	beq	r5,zero,b5a59c <_realloc_r+0x360>
  b5a278:	0b5cc500 	call	b5cc50 <__malloc_lock>
  b5a27c:	943ffe04 	addi	r16,r18,-8
  b5a280:	88c002c4 	addi	r3,r17,11
  b5a284:	00800584 	movi	r2,22
  b5a288:	82000117 	ldw	r8,4(r16)
  b5a28c:	10c01b2e 	bgeu	r2,r3,b5a2fc <_realloc_r+0xc0>
  b5a290:	00bffe04 	movi	r2,-8
  b5a294:	188e703a 	and	r7,r3,r2
  b5a298:	3839883a 	mov	fp,r7
  b5a29c:	38001a16 	blt	r7,zero,b5a308 <_realloc_r+0xcc>
  b5a2a0:	e4401936 	bltu	fp,r17,b5a308 <_realloc_r+0xcc>
  b5a2a4:	013fff04 	movi	r4,-4
  b5a2a8:	4126703a 	and	r19,r8,r4
  b5a2ac:	99c02616 	blt	r19,r7,b5a348 <_realloc_r+0x10c>
  b5a2b0:	802b883a 	mov	r21,r16
  b5a2b4:	9829883a 	mov	r20,r19
  b5a2b8:	84000204 	addi	r16,r16,8
  b5a2bc:	a80f883a 	mov	r7,r21
  b5a2c0:	a70dc83a 	sub	r6,r20,fp
  b5a2c4:	008003c4 	movi	r2,15
  b5a2c8:	1180c136 	bltu	r2,r6,b5a5d0 <_realloc_r+0x394>
  b5a2cc:	38800117 	ldw	r2,4(r7)
  b5a2d0:	a549883a 	add	r4,r20,r21
  b5a2d4:	1080004c 	andi	r2,r2,1
  b5a2d8:	a084b03a 	or	r2,r20,r2
  b5a2dc:	38800115 	stw	r2,4(r7)
  b5a2e0:	20c00117 	ldw	r3,4(r4)
  b5a2e4:	18c00054 	ori	r3,r3,1
  b5a2e8:	20c00115 	stw	r3,4(r4)
  b5a2ec:	b009883a 	mov	r4,r22
  b5a2f0:	0b5cc700 	call	b5cc70 <__malloc_unlock>
  b5a2f4:	8023883a 	mov	r17,r16
  b5a2f8:	00000606 	br	b5a314 <_realloc_r+0xd8>
  b5a2fc:	01c00404 	movi	r7,16
  b5a300:	3839883a 	mov	fp,r7
  b5a304:	e47fe72e 	bgeu	fp,r17,b5a2a4 <_realloc_r+0x68>
  b5a308:	00800304 	movi	r2,12
  b5a30c:	0023883a 	mov	r17,zero
  b5a310:	b0800015 	stw	r2,0(r22)
  b5a314:	8805883a 	mov	r2,r17
  b5a318:	dfc00b17 	ldw	ra,44(sp)
  b5a31c:	df000a17 	ldw	fp,40(sp)
  b5a320:	ddc00917 	ldw	r23,36(sp)
  b5a324:	dd800817 	ldw	r22,32(sp)
  b5a328:	dd400717 	ldw	r21,28(sp)
  b5a32c:	dd000617 	ldw	r20,24(sp)
  b5a330:	dcc00517 	ldw	r19,20(sp)
  b5a334:	dc800417 	ldw	r18,16(sp)
  b5a338:	dc400317 	ldw	r17,12(sp)
  b5a33c:	dc000217 	ldw	r16,8(sp)
  b5a340:	dec00c04 	addi	sp,sp,48
  b5a344:	f800283a 	ret
  b5a348:	00802db4 	movhi	r2,182
  b5a34c:	10861c04 	addi	r2,r2,6256
  b5a350:	12400217 	ldw	r9,8(r2)
  b5a354:	84cd883a 	add	r6,r16,r19
  b5a358:	802b883a 	mov	r21,r16
  b5a35c:	3240b926 	beq	r6,r9,b5a644 <_realloc_r+0x408>
  b5a360:	31400117 	ldw	r5,4(r6)
  b5a364:	00bfff84 	movi	r2,-2
  b5a368:	2884703a 	and	r2,r5,r2
  b5a36c:	1185883a 	add	r2,r2,r6
  b5a370:	10c00117 	ldw	r3,4(r2)
  b5a374:	18c0004c 	andi	r3,r3,1
  b5a378:	1807003a 	cmpeq	r3,r3,zero
  b5a37c:	1800a326 	beq	r3,zero,b5a60c <_realloc_r+0x3d0>
  b5a380:	2908703a 	and	r4,r5,r4
  b5a384:	9929883a 	add	r20,r19,r4
  b5a388:	a1c0a30e 	bge	r20,r7,b5a618 <_realloc_r+0x3dc>
  b5a38c:	4080004c 	andi	r2,r8,1
  b5a390:	1000551e 	bne	r2,zero,b5a4e8 <_realloc_r+0x2ac>
  b5a394:	80800017 	ldw	r2,0(r16)
  b5a398:	80afc83a 	sub	r23,r16,r2
  b5a39c:	b8c00117 	ldw	r3,4(r23)
  b5a3a0:	00bfff04 	movi	r2,-4
  b5a3a4:	1884703a 	and	r2,r3,r2
  b5a3a8:	30002e26 	beq	r6,zero,b5a464 <_realloc_r+0x228>
  b5a3ac:	3240b926 	beq	r6,r9,b5a694 <_realloc_r+0x458>
  b5a3b0:	98a9883a 	add	r20,r19,r2
  b5a3b4:	2509883a 	add	r4,r4,r20
  b5a3b8:	d9000015 	stw	r4,0(sp)
  b5a3bc:	21c02a16 	blt	r4,r7,b5a468 <_realloc_r+0x22c>
  b5a3c0:	30800317 	ldw	r2,12(r6)
  b5a3c4:	30c00217 	ldw	r3,8(r6)
  b5a3c8:	01400904 	movi	r5,36
  b5a3cc:	99bfff04 	addi	r6,r19,-4
  b5a3d0:	18800315 	stw	r2,12(r3)
  b5a3d4:	10c00215 	stw	r3,8(r2)
  b5a3d8:	b9000317 	ldw	r4,12(r23)
  b5a3dc:	b8800217 	ldw	r2,8(r23)
  b5a3e0:	b82b883a 	mov	r21,r23
  b5a3e4:	bc000204 	addi	r16,r23,8
  b5a3e8:	20800215 	stw	r2,8(r4)
  b5a3ec:	11000315 	stw	r4,12(r2)
  b5a3f0:	2980e436 	bltu	r5,r6,b5a784 <_realloc_r+0x548>
  b5a3f4:	008004c4 	movi	r2,19
  b5a3f8:	9009883a 	mov	r4,r18
  b5a3fc:	8011883a 	mov	r8,r16
  b5a400:	11800f2e 	bgeu	r2,r6,b5a440 <_realloc_r+0x204>
  b5a404:	90800017 	ldw	r2,0(r18)
  b5a408:	ba000404 	addi	r8,r23,16
  b5a40c:	91000204 	addi	r4,r18,8
  b5a410:	b8800215 	stw	r2,8(r23)
  b5a414:	90c00117 	ldw	r3,4(r18)
  b5a418:	008006c4 	movi	r2,27
  b5a41c:	b8c00315 	stw	r3,12(r23)
  b5a420:	1180072e 	bgeu	r2,r6,b5a440 <_realloc_r+0x204>
  b5a424:	90c00217 	ldw	r3,8(r18)
  b5a428:	ba000604 	addi	r8,r23,24
  b5a42c:	91000404 	addi	r4,r18,16
  b5a430:	b8c00415 	stw	r3,16(r23)
  b5a434:	90800317 	ldw	r2,12(r18)
  b5a438:	b8800515 	stw	r2,20(r23)
  b5a43c:	3140e726 	beq	r6,r5,b5a7dc <_realloc_r+0x5a0>
  b5a440:	20800017 	ldw	r2,0(r4)
  b5a444:	dd000017 	ldw	r20,0(sp)
  b5a448:	b80f883a 	mov	r7,r23
  b5a44c:	40800015 	stw	r2,0(r8)
  b5a450:	20c00117 	ldw	r3,4(r4)
  b5a454:	40c00115 	stw	r3,4(r8)
  b5a458:	20800217 	ldw	r2,8(r4)
  b5a45c:	40800215 	stw	r2,8(r8)
  b5a460:	003f9706 	br	b5a2c0 <_realloc_r+0x84>
  b5a464:	98a9883a 	add	r20,r19,r2
  b5a468:	a1c01f16 	blt	r20,r7,b5a4e8 <_realloc_r+0x2ac>
  b5a46c:	b8c00317 	ldw	r3,12(r23)
  b5a470:	b8800217 	ldw	r2,8(r23)
  b5a474:	99bfff04 	addi	r6,r19,-4
  b5a478:	01400904 	movi	r5,36
  b5a47c:	b82b883a 	mov	r21,r23
  b5a480:	18800215 	stw	r2,8(r3)
  b5a484:	10c00315 	stw	r3,12(r2)
  b5a488:	bc000204 	addi	r16,r23,8
  b5a48c:	2980c336 	bltu	r5,r6,b5a79c <_realloc_r+0x560>
  b5a490:	008004c4 	movi	r2,19
  b5a494:	9009883a 	mov	r4,r18
  b5a498:	8011883a 	mov	r8,r16
  b5a49c:	11800f2e 	bgeu	r2,r6,b5a4dc <_realloc_r+0x2a0>
  b5a4a0:	90800017 	ldw	r2,0(r18)
  b5a4a4:	ba000404 	addi	r8,r23,16
  b5a4a8:	91000204 	addi	r4,r18,8
  b5a4ac:	b8800215 	stw	r2,8(r23)
  b5a4b0:	90c00117 	ldw	r3,4(r18)
  b5a4b4:	008006c4 	movi	r2,27
  b5a4b8:	b8c00315 	stw	r3,12(r23)
  b5a4bc:	1180072e 	bgeu	r2,r6,b5a4dc <_realloc_r+0x2a0>
  b5a4c0:	90c00217 	ldw	r3,8(r18)
  b5a4c4:	ba000604 	addi	r8,r23,24
  b5a4c8:	91000404 	addi	r4,r18,16
  b5a4cc:	b8c00415 	stw	r3,16(r23)
  b5a4d0:	90800317 	ldw	r2,12(r18)
  b5a4d4:	b8800515 	stw	r2,20(r23)
  b5a4d8:	3140c726 	beq	r6,r5,b5a7f8 <_realloc_r+0x5bc>
  b5a4dc:	20800017 	ldw	r2,0(r4)
  b5a4e0:	b80f883a 	mov	r7,r23
  b5a4e4:	003fd906 	br	b5a44c <_realloc_r+0x210>
  b5a4e8:	880b883a 	mov	r5,r17
  b5a4ec:	b009883a 	mov	r4,r22
  b5a4f0:	0b5880c0 	call	b5880c <_malloc_r>
  b5a4f4:	1023883a 	mov	r17,r2
  b5a4f8:	10002526 	beq	r2,zero,b5a590 <_realloc_r+0x354>
  b5a4fc:	80800117 	ldw	r2,4(r16)
  b5a500:	00ffff84 	movi	r3,-2
  b5a504:	893ffe04 	addi	r4,r17,-8
  b5a508:	10c4703a 	and	r2,r2,r3
  b5a50c:	8085883a 	add	r2,r16,r2
  b5a510:	20809526 	beq	r4,r2,b5a768 <_realloc_r+0x52c>
  b5a514:	99bfff04 	addi	r6,r19,-4
  b5a518:	01c00904 	movi	r7,36
  b5a51c:	39804536 	bltu	r7,r6,b5a634 <_realloc_r+0x3f8>
  b5a520:	008004c4 	movi	r2,19
  b5a524:	9009883a 	mov	r4,r18
  b5a528:	880b883a 	mov	r5,r17
  b5a52c:	11800f2e 	bgeu	r2,r6,b5a56c <_realloc_r+0x330>
  b5a530:	90800017 	ldw	r2,0(r18)
  b5a534:	89400204 	addi	r5,r17,8
  b5a538:	91000204 	addi	r4,r18,8
  b5a53c:	88800015 	stw	r2,0(r17)
  b5a540:	90c00117 	ldw	r3,4(r18)
  b5a544:	008006c4 	movi	r2,27
  b5a548:	88c00115 	stw	r3,4(r17)
  b5a54c:	1180072e 	bgeu	r2,r6,b5a56c <_realloc_r+0x330>
  b5a550:	90c00217 	ldw	r3,8(r18)
  b5a554:	89400404 	addi	r5,r17,16
  b5a558:	91000404 	addi	r4,r18,16
  b5a55c:	88c00215 	stw	r3,8(r17)
  b5a560:	90800317 	ldw	r2,12(r18)
  b5a564:	88800315 	stw	r2,12(r17)
  b5a568:	31c09126 	beq	r6,r7,b5a7b0 <_realloc_r+0x574>
  b5a56c:	20800017 	ldw	r2,0(r4)
  b5a570:	28800015 	stw	r2,0(r5)
  b5a574:	20c00117 	ldw	r3,4(r4)
  b5a578:	28c00115 	stw	r3,4(r5)
  b5a57c:	20800217 	ldw	r2,8(r4)
  b5a580:	28800215 	stw	r2,8(r5)
  b5a584:	900b883a 	mov	r5,r18
  b5a588:	b009883a 	mov	r4,r22
  b5a58c:	0b57c840 	call	b57c84 <_free_r>
  b5a590:	b009883a 	mov	r4,r22
  b5a594:	0b5cc700 	call	b5cc70 <__malloc_unlock>
  b5a598:	003f5e06 	br	b5a314 <_realloc_r+0xd8>
  b5a59c:	300b883a 	mov	r5,r6
  b5a5a0:	dfc00b17 	ldw	ra,44(sp)
  b5a5a4:	df000a17 	ldw	fp,40(sp)
  b5a5a8:	ddc00917 	ldw	r23,36(sp)
  b5a5ac:	dd800817 	ldw	r22,32(sp)
  b5a5b0:	dd400717 	ldw	r21,28(sp)
  b5a5b4:	dd000617 	ldw	r20,24(sp)
  b5a5b8:	dcc00517 	ldw	r19,20(sp)
  b5a5bc:	dc800417 	ldw	r18,16(sp)
  b5a5c0:	dc400317 	ldw	r17,12(sp)
  b5a5c4:	dc000217 	ldw	r16,8(sp)
  b5a5c8:	dec00c04 	addi	sp,sp,48
  b5a5cc:	0b5880c1 	jmpi	b5880c <_malloc_r>
  b5a5d0:	38800117 	ldw	r2,4(r7)
  b5a5d4:	e54b883a 	add	r5,fp,r21
  b5a5d8:	31000054 	ori	r4,r6,1
  b5a5dc:	1080004c 	andi	r2,r2,1
  b5a5e0:	1704b03a 	or	r2,r2,fp
  b5a5e4:	38800115 	stw	r2,4(r7)
  b5a5e8:	29000115 	stw	r4,4(r5)
  b5a5ec:	2987883a 	add	r3,r5,r6
  b5a5f0:	18800117 	ldw	r2,4(r3)
  b5a5f4:	29400204 	addi	r5,r5,8
  b5a5f8:	b009883a 	mov	r4,r22
  b5a5fc:	10800054 	ori	r2,r2,1
  b5a600:	18800115 	stw	r2,4(r3)
  b5a604:	0b57c840 	call	b57c84 <_free_r>
  b5a608:	003f3806 	br	b5a2ec <_realloc_r+0xb0>
  b5a60c:	000d883a 	mov	r6,zero
  b5a610:	0009883a 	mov	r4,zero
  b5a614:	003f5d06 	br	b5a38c <_realloc_r+0x150>
  b5a618:	30c00217 	ldw	r3,8(r6)
  b5a61c:	30800317 	ldw	r2,12(r6)
  b5a620:	800f883a 	mov	r7,r16
  b5a624:	84000204 	addi	r16,r16,8
  b5a628:	10c00215 	stw	r3,8(r2)
  b5a62c:	18800315 	stw	r2,12(r3)
  b5a630:	003f2306 	br	b5a2c0 <_realloc_r+0x84>
  b5a634:	8809883a 	mov	r4,r17
  b5a638:	900b883a 	mov	r5,r18
  b5a63c:	0b590d00 	call	b590d0 <memmove>
  b5a640:	003fd006 	br	b5a584 <_realloc_r+0x348>
  b5a644:	30800117 	ldw	r2,4(r6)
  b5a648:	e0c00404 	addi	r3,fp,16
  b5a64c:	1108703a 	and	r4,r2,r4
  b5a650:	9905883a 	add	r2,r19,r4
  b5a654:	10ff4d16 	blt	r2,r3,b5a38c <_realloc_r+0x150>
  b5a658:	1705c83a 	sub	r2,r2,fp
  b5a65c:	870b883a 	add	r5,r16,fp
  b5a660:	10800054 	ori	r2,r2,1
  b5a664:	28800115 	stw	r2,4(r5)
  b5a668:	80c00117 	ldw	r3,4(r16)
  b5a66c:	00802db4 	movhi	r2,182
  b5a670:	10861c04 	addi	r2,r2,6256
  b5a674:	b009883a 	mov	r4,r22
  b5a678:	18c0004c 	andi	r3,r3,1
  b5a67c:	e0c6b03a 	or	r3,fp,r3
  b5a680:	11400215 	stw	r5,8(r2)
  b5a684:	80c00115 	stw	r3,4(r16)
  b5a688:	0b5cc700 	call	b5cc70 <__malloc_unlock>
  b5a68c:	84400204 	addi	r17,r16,8
  b5a690:	003f2006 	br	b5a314 <_realloc_r+0xd8>
  b5a694:	98a9883a 	add	r20,r19,r2
  b5a698:	2509883a 	add	r4,r4,r20
  b5a69c:	e0800404 	addi	r2,fp,16
  b5a6a0:	d9000115 	stw	r4,4(sp)
  b5a6a4:	20bf7016 	blt	r4,r2,b5a468 <_realloc_r+0x22c>
  b5a6a8:	b8c00317 	ldw	r3,12(r23)
  b5a6ac:	b8800217 	ldw	r2,8(r23)
  b5a6b0:	99bfff04 	addi	r6,r19,-4
  b5a6b4:	01400904 	movi	r5,36
  b5a6b8:	18800215 	stw	r2,8(r3)
  b5a6bc:	10c00315 	stw	r3,12(r2)
  b5a6c0:	bc400204 	addi	r17,r23,8
  b5a6c4:	29804136 	bltu	r5,r6,b5a7cc <_realloc_r+0x590>
  b5a6c8:	008004c4 	movi	r2,19
  b5a6cc:	9009883a 	mov	r4,r18
  b5a6d0:	880f883a 	mov	r7,r17
  b5a6d4:	11800f2e 	bgeu	r2,r6,b5a714 <_realloc_r+0x4d8>
  b5a6d8:	90800017 	ldw	r2,0(r18)
  b5a6dc:	b9c00404 	addi	r7,r23,16
  b5a6e0:	91000204 	addi	r4,r18,8
  b5a6e4:	b8800215 	stw	r2,8(r23)
  b5a6e8:	90c00117 	ldw	r3,4(r18)
  b5a6ec:	008006c4 	movi	r2,27
  b5a6f0:	b8c00315 	stw	r3,12(r23)
  b5a6f4:	1180072e 	bgeu	r2,r6,b5a714 <_realloc_r+0x4d8>
  b5a6f8:	90c00217 	ldw	r3,8(r18)
  b5a6fc:	b9c00604 	addi	r7,r23,24
  b5a700:	91000404 	addi	r4,r18,16
  b5a704:	b8c00415 	stw	r3,16(r23)
  b5a708:	90800317 	ldw	r2,12(r18)
  b5a70c:	b8800515 	stw	r2,20(r23)
  b5a710:	31404026 	beq	r6,r5,b5a814 <_realloc_r+0x5d8>
  b5a714:	20800017 	ldw	r2,0(r4)
  b5a718:	38800015 	stw	r2,0(r7)
  b5a71c:	20c00117 	ldw	r3,4(r4)
  b5a720:	38c00115 	stw	r3,4(r7)
  b5a724:	20800217 	ldw	r2,8(r4)
  b5a728:	38800215 	stw	r2,8(r7)
  b5a72c:	d8c00117 	ldw	r3,4(sp)
  b5a730:	bf0b883a 	add	r5,r23,fp
  b5a734:	b009883a 	mov	r4,r22
  b5a738:	1f05c83a 	sub	r2,r3,fp
  b5a73c:	10800054 	ori	r2,r2,1
  b5a740:	28800115 	stw	r2,4(r5)
  b5a744:	b8c00117 	ldw	r3,4(r23)
  b5a748:	00802db4 	movhi	r2,182
  b5a74c:	10861c04 	addi	r2,r2,6256
  b5a750:	11400215 	stw	r5,8(r2)
  b5a754:	18c0004c 	andi	r3,r3,1
  b5a758:	e0c6b03a 	or	r3,fp,r3
  b5a75c:	b8c00115 	stw	r3,4(r23)
  b5a760:	0b5cc700 	call	b5cc70 <__malloc_unlock>
  b5a764:	003eeb06 	br	b5a314 <_realloc_r+0xd8>
  b5a768:	20800117 	ldw	r2,4(r4)
  b5a76c:	00ffff04 	movi	r3,-4
  b5a770:	800f883a 	mov	r7,r16
  b5a774:	10c4703a 	and	r2,r2,r3
  b5a778:	98a9883a 	add	r20,r19,r2
  b5a77c:	84000204 	addi	r16,r16,8
  b5a780:	003ecf06 	br	b5a2c0 <_realloc_r+0x84>
  b5a784:	900b883a 	mov	r5,r18
  b5a788:	8009883a 	mov	r4,r16
  b5a78c:	0b590d00 	call	b590d0 <memmove>
  b5a790:	dd000017 	ldw	r20,0(sp)
  b5a794:	b80f883a 	mov	r7,r23
  b5a798:	003ec906 	br	b5a2c0 <_realloc_r+0x84>
  b5a79c:	900b883a 	mov	r5,r18
  b5a7a0:	8009883a 	mov	r4,r16
  b5a7a4:	0b590d00 	call	b590d0 <memmove>
  b5a7a8:	b80f883a 	mov	r7,r23
  b5a7ac:	003ec406 	br	b5a2c0 <_realloc_r+0x84>
  b5a7b0:	90c00417 	ldw	r3,16(r18)
  b5a7b4:	89400604 	addi	r5,r17,24
  b5a7b8:	91000604 	addi	r4,r18,24
  b5a7bc:	88c00415 	stw	r3,16(r17)
  b5a7c0:	90800517 	ldw	r2,20(r18)
  b5a7c4:	88800515 	stw	r2,20(r17)
  b5a7c8:	003f6806 	br	b5a56c <_realloc_r+0x330>
  b5a7cc:	900b883a 	mov	r5,r18
  b5a7d0:	8809883a 	mov	r4,r17
  b5a7d4:	0b590d00 	call	b590d0 <memmove>
  b5a7d8:	003fd406 	br	b5a72c <_realloc_r+0x4f0>
  b5a7dc:	90c00417 	ldw	r3,16(r18)
  b5a7e0:	91000604 	addi	r4,r18,24
  b5a7e4:	ba000804 	addi	r8,r23,32
  b5a7e8:	b8c00615 	stw	r3,24(r23)
  b5a7ec:	90800517 	ldw	r2,20(r18)
  b5a7f0:	b8800715 	stw	r2,28(r23)
  b5a7f4:	003f1206 	br	b5a440 <_realloc_r+0x204>
  b5a7f8:	90c00417 	ldw	r3,16(r18)
  b5a7fc:	91000604 	addi	r4,r18,24
  b5a800:	ba000804 	addi	r8,r23,32
  b5a804:	b8c00615 	stw	r3,24(r23)
  b5a808:	90800517 	ldw	r2,20(r18)
  b5a80c:	b8800715 	stw	r2,28(r23)
  b5a810:	003f3206 	br	b5a4dc <_realloc_r+0x2a0>
  b5a814:	90c00417 	ldw	r3,16(r18)
  b5a818:	91000604 	addi	r4,r18,24
  b5a81c:	b9c00804 	addi	r7,r23,32
  b5a820:	b8c00615 	stw	r3,24(r23)
  b5a824:	90800517 	ldw	r2,20(r18)
  b5a828:	b8800715 	stw	r2,28(r23)
  b5a82c:	003fb906 	br	b5a714 <_realloc_r+0x4d8>

00b5a830 <__isinfd>:
  b5a830:	200d883a 	mov	r6,r4
  b5a834:	0109c83a 	sub	r4,zero,r4
  b5a838:	2188b03a 	or	r4,r4,r6
  b5a83c:	2008d7fa 	srli	r4,r4,31
  b5a840:	00a00034 	movhi	r2,32768
  b5a844:	10bfffc4 	addi	r2,r2,-1
  b5a848:	1144703a 	and	r2,r2,r5
  b5a84c:	2088b03a 	or	r4,r4,r2
  b5a850:	009ffc34 	movhi	r2,32752
  b5a854:	1105c83a 	sub	r2,r2,r4
  b5a858:	0087c83a 	sub	r3,zero,r2
  b5a85c:	10c4b03a 	or	r2,r2,r3
  b5a860:	1004d7fa 	srli	r2,r2,31
  b5a864:	00c00044 	movi	r3,1
  b5a868:	1885c83a 	sub	r2,r3,r2
  b5a86c:	f800283a 	ret

00b5a870 <__isnand>:
  b5a870:	200d883a 	mov	r6,r4
  b5a874:	0109c83a 	sub	r4,zero,r4
  b5a878:	2188b03a 	or	r4,r4,r6
  b5a87c:	2008d7fa 	srli	r4,r4,31
  b5a880:	00a00034 	movhi	r2,32768
  b5a884:	10bfffc4 	addi	r2,r2,-1
  b5a888:	1144703a 	and	r2,r2,r5
  b5a88c:	2088b03a 	or	r4,r4,r2
  b5a890:	009ffc34 	movhi	r2,32752
  b5a894:	1105c83a 	sub	r2,r2,r4
  b5a898:	1004d7fa 	srli	r2,r2,31
  b5a89c:	f800283a 	ret

00b5a8a0 <_sbrk_r>:
  b5a8a0:	defffd04 	addi	sp,sp,-12
  b5a8a4:	dc000015 	stw	r16,0(sp)
  b5a8a8:	04002db4 	movhi	r16,182
  b5a8ac:	84130a04 	addi	r16,r16,19496
  b5a8b0:	dc400115 	stw	r17,4(sp)
  b5a8b4:	80000015 	stw	zero,0(r16)
  b5a8b8:	2023883a 	mov	r17,r4
  b5a8bc:	2809883a 	mov	r4,r5
  b5a8c0:	dfc00215 	stw	ra,8(sp)
  b5a8c4:	0b5ce700 	call	b5ce70 <sbrk>
  b5a8c8:	1007883a 	mov	r3,r2
  b5a8cc:	00bfffc4 	movi	r2,-1
  b5a8d0:	18800626 	beq	r3,r2,b5a8ec <_sbrk_r+0x4c>
  b5a8d4:	1805883a 	mov	r2,r3
  b5a8d8:	dfc00217 	ldw	ra,8(sp)
  b5a8dc:	dc400117 	ldw	r17,4(sp)
  b5a8e0:	dc000017 	ldw	r16,0(sp)
  b5a8e4:	dec00304 	addi	sp,sp,12
  b5a8e8:	f800283a 	ret
  b5a8ec:	80800017 	ldw	r2,0(r16)
  b5a8f0:	103ff826 	beq	r2,zero,b5a8d4 <_sbrk_r+0x34>
  b5a8f4:	88800015 	stw	r2,0(r17)
  b5a8f8:	1805883a 	mov	r2,r3
  b5a8fc:	dfc00217 	ldw	ra,8(sp)
  b5a900:	dc400117 	ldw	r17,4(sp)
  b5a904:	dc000017 	ldw	r16,0(sp)
  b5a908:	dec00304 	addi	sp,sp,12
  b5a90c:	f800283a 	ret

00b5a910 <__sclose>:
  b5a910:	2940038f 	ldh	r5,14(r5)
  b5a914:	0b5ac441 	jmpi	b5ac44 <_close_r>

00b5a918 <__sseek>:
  b5a918:	defffe04 	addi	sp,sp,-8
  b5a91c:	dc000015 	stw	r16,0(sp)
  b5a920:	2821883a 	mov	r16,r5
  b5a924:	2940038f 	ldh	r5,14(r5)
  b5a928:	dfc00115 	stw	ra,4(sp)
  b5a92c:	0b5aebc0 	call	b5aebc <_lseek_r>
  b5a930:	1007883a 	mov	r3,r2
  b5a934:	00bfffc4 	movi	r2,-1
  b5a938:	18800926 	beq	r3,r2,b5a960 <__sseek+0x48>
  b5a93c:	8080030b 	ldhu	r2,12(r16)
  b5a940:	80c01415 	stw	r3,80(r16)
  b5a944:	10840014 	ori	r2,r2,4096
  b5a948:	8080030d 	sth	r2,12(r16)
  b5a94c:	1805883a 	mov	r2,r3
  b5a950:	dfc00117 	ldw	ra,4(sp)
  b5a954:	dc000017 	ldw	r16,0(sp)
  b5a958:	dec00204 	addi	sp,sp,8
  b5a95c:	f800283a 	ret
  b5a960:	8080030b 	ldhu	r2,12(r16)
  b5a964:	10bbffcc 	andi	r2,r2,61439
  b5a968:	8080030d 	sth	r2,12(r16)
  b5a96c:	1805883a 	mov	r2,r3
  b5a970:	dfc00117 	ldw	ra,4(sp)
  b5a974:	dc000017 	ldw	r16,0(sp)
  b5a978:	dec00204 	addi	sp,sp,8
  b5a97c:	f800283a 	ret

00b5a980 <__swrite>:
  b5a980:	2880030b 	ldhu	r2,12(r5)
  b5a984:	defffb04 	addi	sp,sp,-20
  b5a988:	dcc00315 	stw	r19,12(sp)
  b5a98c:	1080400c 	andi	r2,r2,256
  b5a990:	dc800215 	stw	r18,8(sp)
  b5a994:	dc400115 	stw	r17,4(sp)
  b5a998:	dc000015 	stw	r16,0(sp)
  b5a99c:	3027883a 	mov	r19,r6
  b5a9a0:	3825883a 	mov	r18,r7
  b5a9a4:	dfc00415 	stw	ra,16(sp)
  b5a9a8:	2821883a 	mov	r16,r5
  b5a9ac:	000d883a 	mov	r6,zero
  b5a9b0:	01c00084 	movi	r7,2
  b5a9b4:	2023883a 	mov	r17,r4
  b5a9b8:	10000226 	beq	r2,zero,b5a9c4 <__swrite+0x44>
  b5a9bc:	2940038f 	ldh	r5,14(r5)
  b5a9c0:	0b5aebc0 	call	b5aebc <_lseek_r>
  b5a9c4:	8080030b 	ldhu	r2,12(r16)
  b5a9c8:	8140038f 	ldh	r5,14(r16)
  b5a9cc:	8809883a 	mov	r4,r17
  b5a9d0:	10bbffcc 	andi	r2,r2,61439
  b5a9d4:	980d883a 	mov	r6,r19
  b5a9d8:	900f883a 	mov	r7,r18
  b5a9dc:	8080030d 	sth	r2,12(r16)
  b5a9e0:	dfc00417 	ldw	ra,16(sp)
  b5a9e4:	dcc00317 	ldw	r19,12(sp)
  b5a9e8:	dc800217 	ldw	r18,8(sp)
  b5a9ec:	dc400117 	ldw	r17,4(sp)
  b5a9f0:	dc000017 	ldw	r16,0(sp)
  b5a9f4:	dec00504 	addi	sp,sp,20
  b5a9f8:	0b5ab181 	jmpi	b5ab18 <_write_r>

00b5a9fc <__sread>:
  b5a9fc:	defffe04 	addi	sp,sp,-8
  b5aa00:	dc000015 	stw	r16,0(sp)
  b5aa04:	2821883a 	mov	r16,r5
  b5aa08:	2940038f 	ldh	r5,14(r5)
  b5aa0c:	dfc00115 	stw	ra,4(sp)
  b5aa10:	0b5af340 	call	b5af34 <_read_r>
  b5aa14:	1007883a 	mov	r3,r2
  b5aa18:	10000816 	blt	r2,zero,b5aa3c <__sread+0x40>
  b5aa1c:	80801417 	ldw	r2,80(r16)
  b5aa20:	10c5883a 	add	r2,r2,r3
  b5aa24:	80801415 	stw	r2,80(r16)
  b5aa28:	1805883a 	mov	r2,r3
  b5aa2c:	dfc00117 	ldw	ra,4(sp)
  b5aa30:	dc000017 	ldw	r16,0(sp)
  b5aa34:	dec00204 	addi	sp,sp,8
  b5aa38:	f800283a 	ret
  b5aa3c:	8080030b 	ldhu	r2,12(r16)
  b5aa40:	10bbffcc 	andi	r2,r2,61439
  b5aa44:	8080030d 	sth	r2,12(r16)
  b5aa48:	1805883a 	mov	r2,r3
  b5aa4c:	dfc00117 	ldw	ra,4(sp)
  b5aa50:	dc000017 	ldw	r16,0(sp)
  b5aa54:	dec00204 	addi	sp,sp,8
  b5aa58:	f800283a 	ret

00b5aa5c <strcmp>:
  b5aa5c:	2144b03a 	or	r2,r4,r5
  b5aa60:	108000cc 	andi	r2,r2,3
  b5aa64:	10001d1e 	bne	r2,zero,b5aadc <strcmp+0x80>
  b5aa68:	200f883a 	mov	r7,r4
  b5aa6c:	28800017 	ldw	r2,0(r5)
  b5aa70:	21000017 	ldw	r4,0(r4)
  b5aa74:	280d883a 	mov	r6,r5
  b5aa78:	2080161e 	bne	r4,r2,b5aad4 <strcmp+0x78>
  b5aa7c:	023fbff4 	movhi	r8,65279
  b5aa80:	423fbfc4 	addi	r8,r8,-257
  b5aa84:	2207883a 	add	r3,r4,r8
  b5aa88:	01602074 	movhi	r5,32897
  b5aa8c:	29602004 	addi	r5,r5,-32640
  b5aa90:	1946703a 	and	r3,r3,r5
  b5aa94:	0104303a 	nor	r2,zero,r4
  b5aa98:	10c4703a 	and	r2,r2,r3
  b5aa9c:	10001c1e 	bne	r2,zero,b5ab10 <strcmp+0xb4>
  b5aaa0:	4013883a 	mov	r9,r8
  b5aaa4:	2811883a 	mov	r8,r5
  b5aaa8:	00000106 	br	b5aab0 <strcmp+0x54>
  b5aaac:	1800181e 	bne	r3,zero,b5ab10 <strcmp+0xb4>
  b5aab0:	39c00104 	addi	r7,r7,4
  b5aab4:	39000017 	ldw	r4,0(r7)
  b5aab8:	31800104 	addi	r6,r6,4
  b5aabc:	31400017 	ldw	r5,0(r6)
  b5aac0:	2245883a 	add	r2,r4,r9
  b5aac4:	1204703a 	and	r2,r2,r8
  b5aac8:	0106303a 	nor	r3,zero,r4
  b5aacc:	1886703a 	and	r3,r3,r2
  b5aad0:	217ff626 	beq	r4,r5,b5aaac <strcmp+0x50>
  b5aad4:	3809883a 	mov	r4,r7
  b5aad8:	300b883a 	mov	r5,r6
  b5aadc:	20c00007 	ldb	r3,0(r4)
  b5aae0:	1800051e 	bne	r3,zero,b5aaf8 <strcmp+0x9c>
  b5aae4:	00000606 	br	b5ab00 <strcmp+0xa4>
  b5aae8:	21000044 	addi	r4,r4,1
  b5aaec:	20c00007 	ldb	r3,0(r4)
  b5aaf0:	29400044 	addi	r5,r5,1
  b5aaf4:	18000226 	beq	r3,zero,b5ab00 <strcmp+0xa4>
  b5aaf8:	28800007 	ldb	r2,0(r5)
  b5aafc:	18bffa26 	beq	r3,r2,b5aae8 <strcmp+0x8c>
  b5ab00:	20c00003 	ldbu	r3,0(r4)
  b5ab04:	28800003 	ldbu	r2,0(r5)
  b5ab08:	1885c83a 	sub	r2,r3,r2
  b5ab0c:	f800283a 	ret
  b5ab10:	0005883a 	mov	r2,zero
  b5ab14:	f800283a 	ret

00b5ab18 <_write_r>:
  b5ab18:	defffd04 	addi	sp,sp,-12
  b5ab1c:	dc000015 	stw	r16,0(sp)
  b5ab20:	04002db4 	movhi	r16,182
  b5ab24:	84130a04 	addi	r16,r16,19496
  b5ab28:	dc400115 	stw	r17,4(sp)
  b5ab2c:	80000015 	stw	zero,0(r16)
  b5ab30:	2023883a 	mov	r17,r4
  b5ab34:	2809883a 	mov	r4,r5
  b5ab38:	300b883a 	mov	r5,r6
  b5ab3c:	380d883a 	mov	r6,r7
  b5ab40:	dfc00215 	stw	ra,8(sp)
  b5ab44:	0b5cf2c0 	call	b5cf2c <write>
  b5ab48:	1007883a 	mov	r3,r2
  b5ab4c:	00bfffc4 	movi	r2,-1
  b5ab50:	18800626 	beq	r3,r2,b5ab6c <_write_r+0x54>
  b5ab54:	1805883a 	mov	r2,r3
  b5ab58:	dfc00217 	ldw	ra,8(sp)
  b5ab5c:	dc400117 	ldw	r17,4(sp)
  b5ab60:	dc000017 	ldw	r16,0(sp)
  b5ab64:	dec00304 	addi	sp,sp,12
  b5ab68:	f800283a 	ret
  b5ab6c:	80800017 	ldw	r2,0(r16)
  b5ab70:	103ff826 	beq	r2,zero,b5ab54 <_write_r+0x3c>
  b5ab74:	88800015 	stw	r2,0(r17)
  b5ab78:	1805883a 	mov	r2,r3
  b5ab7c:	dfc00217 	ldw	ra,8(sp)
  b5ab80:	dc400117 	ldw	r17,4(sp)
  b5ab84:	dc000017 	ldw	r16,0(sp)
  b5ab88:	dec00304 	addi	sp,sp,12
  b5ab8c:	f800283a 	ret

00b5ab90 <_calloc_r>:
  b5ab90:	298b383a 	mul	r5,r5,r6
  b5ab94:	defffe04 	addi	sp,sp,-8
  b5ab98:	dc000015 	stw	r16,0(sp)
  b5ab9c:	dfc00115 	stw	ra,4(sp)
  b5aba0:	0b5880c0 	call	b5880c <_malloc_r>
  b5aba4:	1021883a 	mov	r16,r2
  b5aba8:	01c00904 	movi	r7,36
  b5abac:	10000d26 	beq	r2,zero,b5abe4 <_calloc_r+0x54>
  b5abb0:	10ffff17 	ldw	r3,-4(r2)
  b5abb4:	1009883a 	mov	r4,r2
  b5abb8:	00bfff04 	movi	r2,-4
  b5abbc:	1886703a 	and	r3,r3,r2
  b5abc0:	1887883a 	add	r3,r3,r2
  b5abc4:	180d883a 	mov	r6,r3
  b5abc8:	000b883a 	mov	r5,zero
  b5abcc:	38c01736 	bltu	r7,r3,b5ac2c <_calloc_r+0x9c>
  b5abd0:	008004c4 	movi	r2,19
  b5abd4:	10c00836 	bltu	r2,r3,b5abf8 <_calloc_r+0x68>
  b5abd8:	20000215 	stw	zero,8(r4)
  b5abdc:	20000015 	stw	zero,0(r4)
  b5abe0:	20000115 	stw	zero,4(r4)
  b5abe4:	8005883a 	mov	r2,r16
  b5abe8:	dfc00117 	ldw	ra,4(sp)
  b5abec:	dc000017 	ldw	r16,0(sp)
  b5abf0:	dec00204 	addi	sp,sp,8
  b5abf4:	f800283a 	ret
  b5abf8:	008006c4 	movi	r2,27
  b5abfc:	80000015 	stw	zero,0(r16)
  b5ac00:	80000115 	stw	zero,4(r16)
  b5ac04:	81000204 	addi	r4,r16,8
  b5ac08:	10fff32e 	bgeu	r2,r3,b5abd8 <_calloc_r+0x48>
  b5ac0c:	80000215 	stw	zero,8(r16)
  b5ac10:	80000315 	stw	zero,12(r16)
  b5ac14:	81000404 	addi	r4,r16,16
  b5ac18:	19ffef1e 	bne	r3,r7,b5abd8 <_calloc_r+0x48>
  b5ac1c:	81000604 	addi	r4,r16,24
  b5ac20:	80000415 	stw	zero,16(r16)
  b5ac24:	80000515 	stw	zero,20(r16)
  b5ac28:	003feb06 	br	b5abd8 <_calloc_r+0x48>
  b5ac2c:	0b591b00 	call	b591b0 <memset>
  b5ac30:	8005883a 	mov	r2,r16
  b5ac34:	dfc00117 	ldw	ra,4(sp)
  b5ac38:	dc000017 	ldw	r16,0(sp)
  b5ac3c:	dec00204 	addi	sp,sp,8
  b5ac40:	f800283a 	ret

00b5ac44 <_close_r>:
  b5ac44:	defffd04 	addi	sp,sp,-12
  b5ac48:	dc000015 	stw	r16,0(sp)
  b5ac4c:	04002db4 	movhi	r16,182
  b5ac50:	84130a04 	addi	r16,r16,19496
  b5ac54:	dc400115 	stw	r17,4(sp)
  b5ac58:	80000015 	stw	zero,0(r16)
  b5ac5c:	2023883a 	mov	r17,r4
  b5ac60:	2809883a 	mov	r4,r5
  b5ac64:	dfc00215 	stw	ra,8(sp)
  b5ac68:	0b5c5cc0 	call	b5c5cc <close>
  b5ac6c:	1007883a 	mov	r3,r2
  b5ac70:	00bfffc4 	movi	r2,-1
  b5ac74:	18800626 	beq	r3,r2,b5ac90 <_close_r+0x4c>
  b5ac78:	1805883a 	mov	r2,r3
  b5ac7c:	dfc00217 	ldw	ra,8(sp)
  b5ac80:	dc400117 	ldw	r17,4(sp)
  b5ac84:	dc000017 	ldw	r16,0(sp)
  b5ac88:	dec00304 	addi	sp,sp,12
  b5ac8c:	f800283a 	ret
  b5ac90:	80800017 	ldw	r2,0(r16)
  b5ac94:	103ff826 	beq	r2,zero,b5ac78 <_close_r+0x34>
  b5ac98:	88800015 	stw	r2,0(r17)
  b5ac9c:	1805883a 	mov	r2,r3
  b5aca0:	dfc00217 	ldw	ra,8(sp)
  b5aca4:	dc400117 	ldw	r17,4(sp)
  b5aca8:	dc000017 	ldw	r16,0(sp)
  b5acac:	dec00304 	addi	sp,sp,12
  b5acb0:	f800283a 	ret

00b5acb4 <_fclose_r>:
  b5acb4:	defffc04 	addi	sp,sp,-16
  b5acb8:	dc400115 	stw	r17,4(sp)
  b5acbc:	dc000015 	stw	r16,0(sp)
  b5acc0:	dfc00315 	stw	ra,12(sp)
  b5acc4:	dc800215 	stw	r18,8(sp)
  b5acc8:	2821883a 	mov	r16,r5
  b5accc:	2023883a 	mov	r17,r4
  b5acd0:	28002926 	beq	r5,zero,b5ad78 <_fclose_r+0xc4>
  b5acd4:	0b578f00 	call	b578f0 <__sfp_lock_acquire>
  b5acd8:	88000226 	beq	r17,zero,b5ace4 <_fclose_r+0x30>
  b5acdc:	88800e17 	ldw	r2,56(r17)
  b5ace0:	10002d26 	beq	r2,zero,b5ad98 <_fclose_r+0xe4>
  b5ace4:	8080030f 	ldh	r2,12(r16)
  b5ace8:	10002226 	beq	r2,zero,b5ad74 <_fclose_r+0xc0>
  b5acec:	8809883a 	mov	r4,r17
  b5acf0:	800b883a 	mov	r5,r16
  b5acf4:	0b576680 	call	b57668 <_fflush_r>
  b5acf8:	1025883a 	mov	r18,r2
  b5acfc:	80800b17 	ldw	r2,44(r16)
  b5ad00:	10000426 	beq	r2,zero,b5ad14 <_fclose_r+0x60>
  b5ad04:	81400717 	ldw	r5,28(r16)
  b5ad08:	8809883a 	mov	r4,r17
  b5ad0c:	103ee83a 	callr	r2
  b5ad10:	10002a16 	blt	r2,zero,b5adbc <_fclose_r+0x108>
  b5ad14:	8080030b 	ldhu	r2,12(r16)
  b5ad18:	1080200c 	andi	r2,r2,128
  b5ad1c:	1000231e 	bne	r2,zero,b5adac <_fclose_r+0xf8>
  b5ad20:	81400c17 	ldw	r5,48(r16)
  b5ad24:	28000526 	beq	r5,zero,b5ad3c <_fclose_r+0x88>
  b5ad28:	80801004 	addi	r2,r16,64
  b5ad2c:	28800226 	beq	r5,r2,b5ad38 <_fclose_r+0x84>
  b5ad30:	8809883a 	mov	r4,r17
  b5ad34:	0b57c840 	call	b57c84 <_free_r>
  b5ad38:	80000c15 	stw	zero,48(r16)
  b5ad3c:	81401117 	ldw	r5,68(r16)
  b5ad40:	28000326 	beq	r5,zero,b5ad50 <_fclose_r+0x9c>
  b5ad44:	8809883a 	mov	r4,r17
  b5ad48:	0b57c840 	call	b57c84 <_free_r>
  b5ad4c:	80001115 	stw	zero,68(r16)
  b5ad50:	8000030d 	sth	zero,12(r16)
  b5ad54:	0b578f40 	call	b578f4 <__sfp_lock_release>
  b5ad58:	9005883a 	mov	r2,r18
  b5ad5c:	dfc00317 	ldw	ra,12(sp)
  b5ad60:	dc800217 	ldw	r18,8(sp)
  b5ad64:	dc400117 	ldw	r17,4(sp)
  b5ad68:	dc000017 	ldw	r16,0(sp)
  b5ad6c:	dec00404 	addi	sp,sp,16
  b5ad70:	f800283a 	ret
  b5ad74:	0b578f40 	call	b578f4 <__sfp_lock_release>
  b5ad78:	0025883a 	mov	r18,zero
  b5ad7c:	9005883a 	mov	r2,r18
  b5ad80:	dfc00317 	ldw	ra,12(sp)
  b5ad84:	dc800217 	ldw	r18,8(sp)
  b5ad88:	dc400117 	ldw	r17,4(sp)
  b5ad8c:	dc000017 	ldw	r16,0(sp)
  b5ad90:	dec00404 	addi	sp,sp,16
  b5ad94:	f800283a 	ret
  b5ad98:	8809883a 	mov	r4,r17
  b5ad9c:	0b579000 	call	b57900 <__sinit>
  b5ada0:	8080030f 	ldh	r2,12(r16)
  b5ada4:	103fd11e 	bne	r2,zero,b5acec <_fclose_r+0x38>
  b5ada8:	003ff206 	br	b5ad74 <_fclose_r+0xc0>
  b5adac:	81400417 	ldw	r5,16(r16)
  b5adb0:	8809883a 	mov	r4,r17
  b5adb4:	0b57c840 	call	b57c84 <_free_r>
  b5adb8:	003fd906 	br	b5ad20 <_fclose_r+0x6c>
  b5adbc:	04bfffc4 	movi	r18,-1
  b5adc0:	003fd406 	br	b5ad14 <_fclose_r+0x60>

00b5adc4 <fclose>:
  b5adc4:	00802db4 	movhi	r2,182
  b5adc8:	108bf904 	addi	r2,r2,12260
  b5adcc:	200b883a 	mov	r5,r4
  b5add0:	11000017 	ldw	r4,0(r2)
  b5add4:	0b5acb41 	jmpi	b5acb4 <_fclose_r>

00b5add8 <_fstat_r>:
  b5add8:	defffd04 	addi	sp,sp,-12
  b5addc:	dc000015 	stw	r16,0(sp)
  b5ade0:	04002db4 	movhi	r16,182
  b5ade4:	84130a04 	addi	r16,r16,19496
  b5ade8:	dc400115 	stw	r17,4(sp)
  b5adec:	80000015 	stw	zero,0(r16)
  b5adf0:	2023883a 	mov	r17,r4
  b5adf4:	2809883a 	mov	r4,r5
  b5adf8:	300b883a 	mov	r5,r6
  b5adfc:	dfc00215 	stw	ra,8(sp)
  b5ae00:	0b5c7540 	call	b5c754 <fstat>
  b5ae04:	1007883a 	mov	r3,r2
  b5ae08:	00bfffc4 	movi	r2,-1
  b5ae0c:	18800626 	beq	r3,r2,b5ae28 <_fstat_r+0x50>
  b5ae10:	1805883a 	mov	r2,r3
  b5ae14:	dfc00217 	ldw	ra,8(sp)
  b5ae18:	dc400117 	ldw	r17,4(sp)
  b5ae1c:	dc000017 	ldw	r16,0(sp)
  b5ae20:	dec00304 	addi	sp,sp,12
  b5ae24:	f800283a 	ret
  b5ae28:	80800017 	ldw	r2,0(r16)
  b5ae2c:	103ff826 	beq	r2,zero,b5ae10 <_fstat_r+0x38>
  b5ae30:	88800015 	stw	r2,0(r17)
  b5ae34:	1805883a 	mov	r2,r3
  b5ae38:	dfc00217 	ldw	ra,8(sp)
  b5ae3c:	dc400117 	ldw	r17,4(sp)
  b5ae40:	dc000017 	ldw	r16,0(sp)
  b5ae44:	dec00304 	addi	sp,sp,12
  b5ae48:	f800283a 	ret

00b5ae4c <_isatty_r>:
  b5ae4c:	defffd04 	addi	sp,sp,-12
  b5ae50:	dc000015 	stw	r16,0(sp)
  b5ae54:	04002db4 	movhi	r16,182
  b5ae58:	84130a04 	addi	r16,r16,19496
  b5ae5c:	dc400115 	stw	r17,4(sp)
  b5ae60:	80000015 	stw	zero,0(r16)
  b5ae64:	2023883a 	mov	r17,r4
  b5ae68:	2809883a 	mov	r4,r5
  b5ae6c:	dfc00215 	stw	ra,8(sp)
  b5ae70:	0b5c8880 	call	b5c888 <isatty>
  b5ae74:	1007883a 	mov	r3,r2
  b5ae78:	00bfffc4 	movi	r2,-1
  b5ae7c:	18800626 	beq	r3,r2,b5ae98 <_isatty_r+0x4c>
  b5ae80:	1805883a 	mov	r2,r3
  b5ae84:	dfc00217 	ldw	ra,8(sp)
  b5ae88:	dc400117 	ldw	r17,4(sp)
  b5ae8c:	dc000017 	ldw	r16,0(sp)
  b5ae90:	dec00304 	addi	sp,sp,12
  b5ae94:	f800283a 	ret
  b5ae98:	80800017 	ldw	r2,0(r16)
  b5ae9c:	103ff826 	beq	r2,zero,b5ae80 <_isatty_r+0x34>
  b5aea0:	88800015 	stw	r2,0(r17)
  b5aea4:	1805883a 	mov	r2,r3
  b5aea8:	dfc00217 	ldw	ra,8(sp)
  b5aeac:	dc400117 	ldw	r17,4(sp)
  b5aeb0:	dc000017 	ldw	r16,0(sp)
  b5aeb4:	dec00304 	addi	sp,sp,12
  b5aeb8:	f800283a 	ret

00b5aebc <_lseek_r>:
  b5aebc:	defffd04 	addi	sp,sp,-12
  b5aec0:	dc000015 	stw	r16,0(sp)
  b5aec4:	04002db4 	movhi	r16,182
  b5aec8:	84130a04 	addi	r16,r16,19496
  b5aecc:	dc400115 	stw	r17,4(sp)
  b5aed0:	80000015 	stw	zero,0(r16)
  b5aed4:	2023883a 	mov	r17,r4
  b5aed8:	2809883a 	mov	r4,r5
  b5aedc:	300b883a 	mov	r5,r6
  b5aee0:	380d883a 	mov	r6,r7
  b5aee4:	dfc00215 	stw	ra,8(sp)
  b5aee8:	0b5ca940 	call	b5ca94 <lseek>
  b5aeec:	1007883a 	mov	r3,r2
  b5aef0:	00bfffc4 	movi	r2,-1
  b5aef4:	18800626 	beq	r3,r2,b5af10 <_lseek_r+0x54>
  b5aef8:	1805883a 	mov	r2,r3
  b5aefc:	dfc00217 	ldw	ra,8(sp)
  b5af00:	dc400117 	ldw	r17,4(sp)
  b5af04:	dc000017 	ldw	r16,0(sp)
  b5af08:	dec00304 	addi	sp,sp,12
  b5af0c:	f800283a 	ret
  b5af10:	80800017 	ldw	r2,0(r16)
  b5af14:	103ff826 	beq	r2,zero,b5aef8 <_lseek_r+0x3c>
  b5af18:	88800015 	stw	r2,0(r17)
  b5af1c:	1805883a 	mov	r2,r3
  b5af20:	dfc00217 	ldw	ra,8(sp)
  b5af24:	dc400117 	ldw	r17,4(sp)
  b5af28:	dc000017 	ldw	r16,0(sp)
  b5af2c:	dec00304 	addi	sp,sp,12
  b5af30:	f800283a 	ret

00b5af34 <_read_r>:
  b5af34:	defffd04 	addi	sp,sp,-12
  b5af38:	dc000015 	stw	r16,0(sp)
  b5af3c:	04002db4 	movhi	r16,182
  b5af40:	84130a04 	addi	r16,r16,19496
  b5af44:	dc400115 	stw	r17,4(sp)
  b5af48:	80000015 	stw	zero,0(r16)
  b5af4c:	2023883a 	mov	r17,r4
  b5af50:	2809883a 	mov	r4,r5
  b5af54:	300b883a 	mov	r5,r6
  b5af58:	380d883a 	mov	r6,r7
  b5af5c:	dfc00215 	stw	ra,8(sp)
  b5af60:	0b5cc900 	call	b5cc90 <read>
  b5af64:	1007883a 	mov	r3,r2
  b5af68:	00bfffc4 	movi	r2,-1
  b5af6c:	18800626 	beq	r3,r2,b5af88 <_read_r+0x54>
  b5af70:	1805883a 	mov	r2,r3
  b5af74:	dfc00217 	ldw	ra,8(sp)
  b5af78:	dc400117 	ldw	r17,4(sp)
  b5af7c:	dc000017 	ldw	r16,0(sp)
  b5af80:	dec00304 	addi	sp,sp,12
  b5af84:	f800283a 	ret
  b5af88:	80800017 	ldw	r2,0(r16)
  b5af8c:	103ff826 	beq	r2,zero,b5af70 <_read_r+0x3c>
  b5af90:	88800015 	stw	r2,0(r17)
  b5af94:	1805883a 	mov	r2,r3
  b5af98:	dfc00217 	ldw	ra,8(sp)
  b5af9c:	dc400117 	ldw	r17,4(sp)
  b5afa0:	dc000017 	ldw	r16,0(sp)
  b5afa4:	dec00304 	addi	sp,sp,12
  b5afa8:	f800283a 	ret

00b5afac <__udivdi3>:
  b5afac:	defff004 	addi	sp,sp,-64
  b5afb0:	2005883a 	mov	r2,r4
  b5afb4:	3011883a 	mov	r8,r6
  b5afb8:	df000e15 	stw	fp,56(sp)
  b5afbc:	dd000a15 	stw	r20,40(sp)
  b5afc0:	dc000615 	stw	r16,24(sp)
  b5afc4:	dfc00f15 	stw	ra,60(sp)
  b5afc8:	ddc00d15 	stw	r23,52(sp)
  b5afcc:	dd800c15 	stw	r22,48(sp)
  b5afd0:	dd400b15 	stw	r21,44(sp)
  b5afd4:	dcc00915 	stw	r19,36(sp)
  b5afd8:	dc800815 	stw	r18,32(sp)
  b5afdc:	dc400715 	stw	r17,28(sp)
  b5afe0:	4021883a 	mov	r16,r8
  b5afe4:	1039883a 	mov	fp,r2
  b5afe8:	2829883a 	mov	r20,r5
  b5afec:	38003b1e 	bne	r7,zero,b5b0dc <__udivdi3+0x130>
  b5aff0:	2a005c36 	bltu	r5,r8,b5b164 <__udivdi3+0x1b8>
  b5aff4:	4000a626 	beq	r8,zero,b5b290 <__udivdi3+0x2e4>
  b5aff8:	00bfffd4 	movui	r2,65535
  b5affc:	14009e36 	bltu	r2,r16,b5b278 <__udivdi3+0x2cc>
  b5b000:	00803fc4 	movi	r2,255
  b5b004:	14013d36 	bltu	r2,r16,b5b4fc <__udivdi3+0x550>
  b5b008:	000b883a 	mov	r5,zero
  b5b00c:	0005883a 	mov	r2,zero
  b5b010:	8084d83a 	srl	r2,r16,r2
  b5b014:	01002db4 	movhi	r4,182
  b5b018:	21040704 	addi	r4,r4,4124
  b5b01c:	01800804 	movi	r6,32
  b5b020:	1105883a 	add	r2,r2,r4
  b5b024:	10c00003 	ldbu	r3,0(r2)
  b5b028:	28c7883a 	add	r3,r5,r3
  b5b02c:	30edc83a 	sub	r22,r6,r3
  b5b030:	b000ee1e 	bne	r22,zero,b5b3ec <__udivdi3+0x440>
  b5b034:	802ad43a 	srli	r21,r16,16
  b5b038:	00800044 	movi	r2,1
  b5b03c:	a423c83a 	sub	r17,r20,r16
  b5b040:	85ffffcc 	andi	r23,r16,65535
  b5b044:	d8800315 	stw	r2,12(sp)
  b5b048:	8809883a 	mov	r4,r17
  b5b04c:	a80b883a 	mov	r5,r21
  b5b050:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b054:	8809883a 	mov	r4,r17
  b5b058:	a80b883a 	mov	r5,r21
  b5b05c:	102d883a 	mov	r22,r2
  b5b060:	0b5c5c40 	call	b5c5c4 <__umodsi3>
  b5b064:	1004943a 	slli	r2,r2,16
  b5b068:	e006d43a 	srli	r3,fp,16
  b5b06c:	bda3383a 	mul	r17,r23,r22
  b5b070:	10c4b03a 	or	r2,r2,r3
  b5b074:	1440042e 	bgeu	r2,r17,b5b088 <__udivdi3+0xdc>
  b5b078:	1405883a 	add	r2,r2,r16
  b5b07c:	b5bfffc4 	addi	r22,r22,-1
  b5b080:	14000136 	bltu	r2,r16,b5b088 <__udivdi3+0xdc>
  b5b084:	14413d36 	bltu	r2,r17,b5b57c <__udivdi3+0x5d0>
  b5b088:	1463c83a 	sub	r17,r2,r17
  b5b08c:	8809883a 	mov	r4,r17
  b5b090:	a80b883a 	mov	r5,r21
  b5b094:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b098:	8809883a 	mov	r4,r17
  b5b09c:	a80b883a 	mov	r5,r21
  b5b0a0:	1029883a 	mov	r20,r2
  b5b0a4:	0b5c5c40 	call	b5c5c4 <__umodsi3>
  b5b0a8:	1004943a 	slli	r2,r2,16
  b5b0ac:	bd09383a 	mul	r4,r23,r20
  b5b0b0:	e0ffffcc 	andi	r3,fp,65535
  b5b0b4:	10c4b03a 	or	r2,r2,r3
  b5b0b8:	1100042e 	bgeu	r2,r4,b5b0cc <__udivdi3+0x120>
  b5b0bc:	8085883a 	add	r2,r16,r2
  b5b0c0:	a53fffc4 	addi	r20,r20,-1
  b5b0c4:	14000136 	bltu	r2,r16,b5b0cc <__udivdi3+0x120>
  b5b0c8:	11012036 	bltu	r2,r4,b5b54c <__udivdi3+0x5a0>
  b5b0cc:	b004943a 	slli	r2,r22,16
  b5b0d0:	d9000317 	ldw	r4,12(sp)
  b5b0d4:	a084b03a 	or	r2,r20,r2
  b5b0d8:	00001506 	br	b5b130 <__udivdi3+0x184>
  b5b0dc:	380d883a 	mov	r6,r7
  b5b0e0:	29c06236 	bltu	r5,r7,b5b26c <__udivdi3+0x2c0>
  b5b0e4:	00bfffd4 	movui	r2,65535
  b5b0e8:	11c05a36 	bltu	r2,r7,b5b254 <__udivdi3+0x2a8>
  b5b0ec:	00803fc4 	movi	r2,255
  b5b0f0:	11c0fc36 	bltu	r2,r7,b5b4e4 <__udivdi3+0x538>
  b5b0f4:	000b883a 	mov	r5,zero
  b5b0f8:	0005883a 	mov	r2,zero
  b5b0fc:	3084d83a 	srl	r2,r6,r2
  b5b100:	01002db4 	movhi	r4,182
  b5b104:	21040704 	addi	r4,r4,4124
  b5b108:	01c00804 	movi	r7,32
  b5b10c:	1105883a 	add	r2,r2,r4
  b5b110:	10c00003 	ldbu	r3,0(r2)
  b5b114:	28c7883a 	add	r3,r5,r3
  b5b118:	38efc83a 	sub	r23,r7,r3
  b5b11c:	b800691e 	bne	r23,zero,b5b2c4 <__udivdi3+0x318>
  b5b120:	35000136 	bltu	r6,r20,b5b128 <__udivdi3+0x17c>
  b5b124:	e4005136 	bltu	fp,r16,b5b26c <__udivdi3+0x2c0>
  b5b128:	00800044 	movi	r2,1
  b5b12c:	0009883a 	mov	r4,zero
  b5b130:	2007883a 	mov	r3,r4
  b5b134:	dfc00f17 	ldw	ra,60(sp)
  b5b138:	df000e17 	ldw	fp,56(sp)
  b5b13c:	ddc00d17 	ldw	r23,52(sp)
  b5b140:	dd800c17 	ldw	r22,48(sp)
  b5b144:	dd400b17 	ldw	r21,44(sp)
  b5b148:	dd000a17 	ldw	r20,40(sp)
  b5b14c:	dcc00917 	ldw	r19,36(sp)
  b5b150:	dc800817 	ldw	r18,32(sp)
  b5b154:	dc400717 	ldw	r17,28(sp)
  b5b158:	dc000617 	ldw	r16,24(sp)
  b5b15c:	dec01004 	addi	sp,sp,64
  b5b160:	f800283a 	ret
  b5b164:	00bfffd4 	movui	r2,65535
  b5b168:	12005036 	bltu	r2,r8,b5b2ac <__udivdi3+0x300>
  b5b16c:	00803fc4 	movi	r2,255
  b5b170:	1200e836 	bltu	r2,r8,b5b514 <__udivdi3+0x568>
  b5b174:	000b883a 	mov	r5,zero
  b5b178:	0005883a 	mov	r2,zero
  b5b17c:	8084d83a 	srl	r2,r16,r2
  b5b180:	01002db4 	movhi	r4,182
  b5b184:	21040704 	addi	r4,r4,4124
  b5b188:	01800804 	movi	r6,32
  b5b18c:	1105883a 	add	r2,r2,r4
  b5b190:	10c00003 	ldbu	r3,0(r2)
  b5b194:	28c7883a 	add	r3,r5,r3
  b5b198:	30cbc83a 	sub	r5,r6,r3
  b5b19c:	28000626 	beq	r5,zero,b5b1b8 <__udivdi3+0x20c>
  b5b1a0:	3145c83a 	sub	r2,r6,r5
  b5b1a4:	e084d83a 	srl	r2,fp,r2
  b5b1a8:	a146983a 	sll	r3,r20,r5
  b5b1ac:	e178983a 	sll	fp,fp,r5
  b5b1b0:	8160983a 	sll	r16,r16,r5
  b5b1b4:	18a8b03a 	or	r20,r3,r2
  b5b1b8:	802ad43a 	srli	r21,r16,16
  b5b1bc:	a009883a 	mov	r4,r20
  b5b1c0:	85ffffcc 	andi	r23,r16,65535
  b5b1c4:	a80b883a 	mov	r5,r21
  b5b1c8:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b1cc:	a009883a 	mov	r4,r20
  b5b1d0:	a80b883a 	mov	r5,r21
  b5b1d4:	102d883a 	mov	r22,r2
  b5b1d8:	0b5c5c40 	call	b5c5c4 <__umodsi3>
  b5b1dc:	1004943a 	slli	r2,r2,16
  b5b1e0:	e006d43a 	srli	r3,fp,16
  b5b1e4:	bda3383a 	mul	r17,r23,r22
  b5b1e8:	10c4b03a 	or	r2,r2,r3
  b5b1ec:	1440042e 	bgeu	r2,r17,b5b200 <__udivdi3+0x254>
  b5b1f0:	1405883a 	add	r2,r2,r16
  b5b1f4:	b5bfffc4 	addi	r22,r22,-1
  b5b1f8:	14000136 	bltu	r2,r16,b5b200 <__udivdi3+0x254>
  b5b1fc:	1440d536 	bltu	r2,r17,b5b554 <__udivdi3+0x5a8>
  b5b200:	1463c83a 	sub	r17,r2,r17
  b5b204:	8809883a 	mov	r4,r17
  b5b208:	a80b883a 	mov	r5,r21
  b5b20c:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b210:	8809883a 	mov	r4,r17
  b5b214:	a80b883a 	mov	r5,r21
  b5b218:	1029883a 	mov	r20,r2
  b5b21c:	0b5c5c40 	call	b5c5c4 <__umodsi3>
  b5b220:	1004943a 	slli	r2,r2,16
  b5b224:	bd09383a 	mul	r4,r23,r20
  b5b228:	e0ffffcc 	andi	r3,fp,65535
  b5b22c:	10c4b03a 	or	r2,r2,r3
  b5b230:	1100042e 	bgeu	r2,r4,b5b244 <__udivdi3+0x298>
  b5b234:	8085883a 	add	r2,r16,r2
  b5b238:	a53fffc4 	addi	r20,r20,-1
  b5b23c:	14000136 	bltu	r2,r16,b5b244 <__udivdi3+0x298>
  b5b240:	1100c736 	bltu	r2,r4,b5b560 <__udivdi3+0x5b4>
  b5b244:	b004943a 	slli	r2,r22,16
  b5b248:	0009883a 	mov	r4,zero
  b5b24c:	a084b03a 	or	r2,r20,r2
  b5b250:	003fb706 	br	b5b130 <__udivdi3+0x184>
  b5b254:	00804034 	movhi	r2,256
  b5b258:	10bfffc4 	addi	r2,r2,-1
  b5b25c:	11c0a436 	bltu	r2,r7,b5b4f0 <__udivdi3+0x544>
  b5b260:	01400404 	movi	r5,16
  b5b264:	2805883a 	mov	r2,r5
  b5b268:	003fa406 	br	b5b0fc <__udivdi3+0x150>
  b5b26c:	0005883a 	mov	r2,zero
  b5b270:	0009883a 	mov	r4,zero
  b5b274:	003fae06 	br	b5b130 <__udivdi3+0x184>
  b5b278:	00804034 	movhi	r2,256
  b5b27c:	10bfffc4 	addi	r2,r2,-1
  b5b280:	1400a136 	bltu	r2,r16,b5b508 <__udivdi3+0x55c>
  b5b284:	01400404 	movi	r5,16
  b5b288:	2805883a 	mov	r2,r5
  b5b28c:	003f6006 	br	b5b010 <__udivdi3+0x64>
  b5b290:	01000044 	movi	r4,1
  b5b294:	000b883a 	mov	r5,zero
  b5b298:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b29c:	1021883a 	mov	r16,r2
  b5b2a0:	00bfffd4 	movui	r2,65535
  b5b2a4:	143ff436 	bltu	r2,r16,b5b278 <__udivdi3+0x2cc>
  b5b2a8:	003f5506 	br	b5b000 <__udivdi3+0x54>
  b5b2ac:	00804034 	movhi	r2,256
  b5b2b0:	10bfffc4 	addi	r2,r2,-1
  b5b2b4:	12009a36 	bltu	r2,r8,b5b520 <__udivdi3+0x574>
  b5b2b8:	01400404 	movi	r5,16
  b5b2bc:	2805883a 	mov	r2,r5
  b5b2c0:	003fae06 	br	b5b17c <__udivdi3+0x1d0>
  b5b2c4:	3dc5c83a 	sub	r2,r7,r23
  b5b2c8:	35c8983a 	sll	r4,r6,r23
  b5b2cc:	8086d83a 	srl	r3,r16,r2
  b5b2d0:	a0a2d83a 	srl	r17,r20,r2
  b5b2d4:	e084d83a 	srl	r2,fp,r2
  b5b2d8:	20eab03a 	or	r21,r4,r3
  b5b2dc:	a82cd43a 	srli	r22,r21,16
  b5b2e0:	a5c6983a 	sll	r3,r20,r23
  b5b2e4:	8809883a 	mov	r4,r17
  b5b2e8:	b00b883a 	mov	r5,r22
  b5b2ec:	1886b03a 	or	r3,r3,r2
  b5b2f0:	d8c00215 	stw	r3,8(sp)
  b5b2f4:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b2f8:	8809883a 	mov	r4,r17
  b5b2fc:	b00b883a 	mov	r5,r22
  b5b300:	1029883a 	mov	r20,r2
  b5b304:	0b5c5c40 	call	b5c5c4 <__umodsi3>
  b5b308:	a8ffffcc 	andi	r3,r21,65535
  b5b30c:	d8c00515 	stw	r3,20(sp)
  b5b310:	d9000217 	ldw	r4,8(sp)
  b5b314:	d9400517 	ldw	r5,20(sp)
  b5b318:	1004943a 	slli	r2,r2,16
  b5b31c:	2006d43a 	srli	r3,r4,16
  b5b320:	85e0983a 	sll	r16,r16,r23
  b5b324:	2d23383a 	mul	r17,r5,r20
  b5b328:	10c4b03a 	or	r2,r2,r3
  b5b32c:	dc000015 	stw	r16,0(sp)
  b5b330:	1440032e 	bgeu	r2,r17,b5b340 <__udivdi3+0x394>
  b5b334:	1545883a 	add	r2,r2,r21
  b5b338:	a53fffc4 	addi	r20,r20,-1
  b5b33c:	15407f2e 	bgeu	r2,r21,b5b53c <__udivdi3+0x590>
  b5b340:	1463c83a 	sub	r17,r2,r17
  b5b344:	8809883a 	mov	r4,r17
  b5b348:	b00b883a 	mov	r5,r22
  b5b34c:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b350:	8809883a 	mov	r4,r17
  b5b354:	b00b883a 	mov	r5,r22
  b5b358:	1021883a 	mov	r16,r2
  b5b35c:	0b5c5c40 	call	b5c5c4 <__umodsi3>
  b5b360:	d8c00517 	ldw	r3,20(sp)
  b5b364:	d9000217 	ldw	r4,8(sp)
  b5b368:	1004943a 	slli	r2,r2,16
  b5b36c:	1c0f383a 	mul	r7,r3,r16
  b5b370:	20ffffcc 	andi	r3,r4,65535
  b5b374:	10e2b03a 	or	r17,r2,r3
  b5b378:	89c0032e 	bgeu	r17,r7,b5b388 <__udivdi3+0x3dc>
  b5b37c:	8d63883a 	add	r17,r17,r21
  b5b380:	843fffc4 	addi	r16,r16,-1
  b5b384:	8d40692e 	bgeu	r17,r21,b5b52c <__udivdi3+0x580>
  b5b388:	a008943a 	slli	r4,r20,16
  b5b38c:	d9400017 	ldw	r5,0(sp)
  b5b390:	89e3c83a 	sub	r17,r17,r7
  b5b394:	8110b03a 	or	r8,r16,r4
  b5b398:	280cd43a 	srli	r6,r5,16
  b5b39c:	28ffffcc 	andi	r3,r5,65535
  b5b3a0:	40bfffcc 	andi	r2,r8,65535
  b5b3a4:	400ad43a 	srli	r5,r8,16
  b5b3a8:	10d3383a 	mul	r9,r2,r3
  b5b3ac:	1185383a 	mul	r2,r2,r6
  b5b3b0:	28c7383a 	mul	r3,r5,r3
  b5b3b4:	4808d43a 	srli	r4,r9,16
  b5b3b8:	298b383a 	mul	r5,r5,r6
  b5b3bc:	10c5883a 	add	r2,r2,r3
  b5b3c0:	2089883a 	add	r4,r4,r2
  b5b3c4:	20c0022e 	bgeu	r4,r3,b5b3d0 <__udivdi3+0x424>
  b5b3c8:	00800074 	movhi	r2,1
  b5b3cc:	288b883a 	add	r5,r5,r2
  b5b3d0:	2004d43a 	srli	r2,r4,16
  b5b3d4:	288b883a 	add	r5,r5,r2
  b5b3d8:	89403f36 	bltu	r17,r5,b5b4d8 <__udivdi3+0x52c>
  b5b3dc:	89403926 	beq	r17,r5,b5b4c4 <__udivdi3+0x518>
  b5b3e0:	4005883a 	mov	r2,r8
  b5b3e4:	0009883a 	mov	r4,zero
  b5b3e8:	003f5106 	br	b5b130 <__udivdi3+0x184>
  b5b3ec:	85a0983a 	sll	r16,r16,r22
  b5b3f0:	3585c83a 	sub	r2,r6,r22
  b5b3f4:	a0a2d83a 	srl	r17,r20,r2
  b5b3f8:	802ad43a 	srli	r21,r16,16
  b5b3fc:	e084d83a 	srl	r2,fp,r2
  b5b400:	a586983a 	sll	r3,r20,r22
  b5b404:	8809883a 	mov	r4,r17
  b5b408:	a80b883a 	mov	r5,r21
  b5b40c:	1886b03a 	or	r3,r3,r2
  b5b410:	d8c00115 	stw	r3,4(sp)
  b5b414:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b418:	8809883a 	mov	r4,r17
  b5b41c:	a80b883a 	mov	r5,r21
  b5b420:	d8800415 	stw	r2,16(sp)
  b5b424:	0b5c5c40 	call	b5c5c4 <__umodsi3>
  b5b428:	d9000117 	ldw	r4,4(sp)
  b5b42c:	d9400417 	ldw	r5,16(sp)
  b5b430:	1004943a 	slli	r2,r2,16
  b5b434:	85ffffcc 	andi	r23,r16,65535
  b5b438:	2006d43a 	srli	r3,r4,16
  b5b43c:	b963383a 	mul	r17,r23,r5
  b5b440:	10c4b03a 	or	r2,r2,r3
  b5b444:	1440042e 	bgeu	r2,r17,b5b458 <__udivdi3+0x4ac>
  b5b448:	297fffc4 	addi	r5,r5,-1
  b5b44c:	1405883a 	add	r2,r2,r16
  b5b450:	d9400415 	stw	r5,16(sp)
  b5b454:	1400442e 	bgeu	r2,r16,b5b568 <__udivdi3+0x5bc>
  b5b458:	1463c83a 	sub	r17,r2,r17
  b5b45c:	8809883a 	mov	r4,r17
  b5b460:	a80b883a 	mov	r5,r21
  b5b464:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b468:	8809883a 	mov	r4,r17
  b5b46c:	a80b883a 	mov	r5,r21
  b5b470:	1029883a 	mov	r20,r2
  b5b474:	0b5c5c40 	call	b5c5c4 <__umodsi3>
  b5b478:	d9400117 	ldw	r5,4(sp)
  b5b47c:	1004943a 	slli	r2,r2,16
  b5b480:	bd09383a 	mul	r4,r23,r20
  b5b484:	28ffffcc 	andi	r3,r5,65535
  b5b488:	10c6b03a 	or	r3,r2,r3
  b5b48c:	1900062e 	bgeu	r3,r4,b5b4a8 <__udivdi3+0x4fc>
  b5b490:	1c07883a 	add	r3,r3,r16
  b5b494:	a53fffc4 	addi	r20,r20,-1
  b5b498:	1c000336 	bltu	r3,r16,b5b4a8 <__udivdi3+0x4fc>
  b5b49c:	1900022e 	bgeu	r3,r4,b5b4a8 <__udivdi3+0x4fc>
  b5b4a0:	a53fffc4 	addi	r20,r20,-1
  b5b4a4:	1c07883a 	add	r3,r3,r16
  b5b4a8:	d9400417 	ldw	r5,16(sp)
  b5b4ac:	e5b8983a 	sll	fp,fp,r22
  b5b4b0:	1923c83a 	sub	r17,r3,r4
  b5b4b4:	2804943a 	slli	r2,r5,16
  b5b4b8:	a0a8b03a 	or	r20,r20,r2
  b5b4bc:	dd000315 	stw	r20,12(sp)
  b5b4c0:	003ee106 	br	b5b048 <__udivdi3+0x9c>
  b5b4c4:	2004943a 	slli	r2,r4,16
  b5b4c8:	e5c8983a 	sll	r4,fp,r23
  b5b4cc:	48ffffcc 	andi	r3,r9,65535
  b5b4d0:	10c5883a 	add	r2,r2,r3
  b5b4d4:	20bfc22e 	bgeu	r4,r2,b5b3e0 <__udivdi3+0x434>
  b5b4d8:	40bfffc4 	addi	r2,r8,-1
  b5b4dc:	0009883a 	mov	r4,zero
  b5b4e0:	003f1306 	br	b5b130 <__udivdi3+0x184>
  b5b4e4:	01400204 	movi	r5,8
  b5b4e8:	2805883a 	mov	r2,r5
  b5b4ec:	003f0306 	br	b5b0fc <__udivdi3+0x150>
  b5b4f0:	01400604 	movi	r5,24
  b5b4f4:	2805883a 	mov	r2,r5
  b5b4f8:	003f0006 	br	b5b0fc <__udivdi3+0x150>
  b5b4fc:	01400204 	movi	r5,8
  b5b500:	2805883a 	mov	r2,r5
  b5b504:	003ec206 	br	b5b010 <__udivdi3+0x64>
  b5b508:	01400604 	movi	r5,24
  b5b50c:	2805883a 	mov	r2,r5
  b5b510:	003ebf06 	br	b5b010 <__udivdi3+0x64>
  b5b514:	01400204 	movi	r5,8
  b5b518:	2805883a 	mov	r2,r5
  b5b51c:	003f1706 	br	b5b17c <__udivdi3+0x1d0>
  b5b520:	01400604 	movi	r5,24
  b5b524:	2805883a 	mov	r2,r5
  b5b528:	003f1406 	br	b5b17c <__udivdi3+0x1d0>
  b5b52c:	89ff962e 	bgeu	r17,r7,b5b388 <__udivdi3+0x3dc>
  b5b530:	8d63883a 	add	r17,r17,r21
  b5b534:	843fffc4 	addi	r16,r16,-1
  b5b538:	003f9306 	br	b5b388 <__udivdi3+0x3dc>
  b5b53c:	147f802e 	bgeu	r2,r17,b5b340 <__udivdi3+0x394>
  b5b540:	a53fffc4 	addi	r20,r20,-1
  b5b544:	1545883a 	add	r2,r2,r21
  b5b548:	003f7d06 	br	b5b340 <__udivdi3+0x394>
  b5b54c:	a53fffc4 	addi	r20,r20,-1
  b5b550:	003ede06 	br	b5b0cc <__udivdi3+0x120>
  b5b554:	b5bfffc4 	addi	r22,r22,-1
  b5b558:	1405883a 	add	r2,r2,r16
  b5b55c:	003f2806 	br	b5b200 <__udivdi3+0x254>
  b5b560:	a53fffc4 	addi	r20,r20,-1
  b5b564:	003f3706 	br	b5b244 <__udivdi3+0x298>
  b5b568:	147fbb2e 	bgeu	r2,r17,b5b458 <__udivdi3+0x4ac>
  b5b56c:	297fffc4 	addi	r5,r5,-1
  b5b570:	1405883a 	add	r2,r2,r16
  b5b574:	d9400415 	stw	r5,16(sp)
  b5b578:	003fb706 	br	b5b458 <__udivdi3+0x4ac>
  b5b57c:	b5bfffc4 	addi	r22,r22,-1
  b5b580:	1405883a 	add	r2,r2,r16
  b5b584:	003ec006 	br	b5b088 <__udivdi3+0xdc>

00b5b588 <__umoddi3>:
  b5b588:	defff104 	addi	sp,sp,-60
  b5b58c:	dd800b15 	stw	r22,44(sp)
  b5b590:	dd000915 	stw	r20,36(sp)
  b5b594:	dc000515 	stw	r16,20(sp)
  b5b598:	dfc00e15 	stw	ra,56(sp)
  b5b59c:	df000d15 	stw	fp,52(sp)
  b5b5a0:	ddc00c15 	stw	r23,48(sp)
  b5b5a4:	dd400a15 	stw	r21,40(sp)
  b5b5a8:	dcc00815 	stw	r19,32(sp)
  b5b5ac:	dc800715 	stw	r18,28(sp)
  b5b5b0:	dc400615 	stw	r17,24(sp)
  b5b5b4:	3021883a 	mov	r16,r6
  b5b5b8:	202d883a 	mov	r22,r4
  b5b5bc:	2829883a 	mov	r20,r5
  b5b5c0:	38002b1e 	bne	r7,zero,b5b670 <__umoddi3+0xe8>
  b5b5c4:	29805036 	bltu	r5,r6,b5b708 <__umoddi3+0x180>
  b5b5c8:	30008a26 	beq	r6,zero,b5b7f4 <__umoddi3+0x26c>
  b5b5cc:	00bfffd4 	movui	r2,65535
  b5b5d0:	14008236 	bltu	r2,r16,b5b7dc <__umoddi3+0x254>
  b5b5d4:	00803fc4 	movi	r2,255
  b5b5d8:	14013636 	bltu	r2,r16,b5bab4 <__umoddi3+0x52c>
  b5b5dc:	000b883a 	mov	r5,zero
  b5b5e0:	0005883a 	mov	r2,zero
  b5b5e4:	8084d83a 	srl	r2,r16,r2
  b5b5e8:	01002db4 	movhi	r4,182
  b5b5ec:	21040704 	addi	r4,r4,4124
  b5b5f0:	01800804 	movi	r6,32
  b5b5f4:	1105883a 	add	r2,r2,r4
  b5b5f8:	10c00003 	ldbu	r3,0(r2)
  b5b5fc:	28c7883a 	add	r3,r5,r3
  b5b600:	30efc83a 	sub	r23,r6,r3
  b5b604:	b800941e 	bne	r23,zero,b5b858 <__umoddi3+0x2d0>
  b5b608:	802ad43a 	srli	r21,r16,16
  b5b60c:	a423c83a 	sub	r17,r20,r16
  b5b610:	0039883a 	mov	fp,zero
  b5b614:	853fffcc 	andi	r20,r16,65535
  b5b618:	8809883a 	mov	r4,r17
  b5b61c:	a80b883a 	mov	r5,r21
  b5b620:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b624:	8809883a 	mov	r4,r17
  b5b628:	a80b883a 	mov	r5,r21
  b5b62c:	a0a3383a 	mul	r17,r20,r2
  b5b630:	0b5c5c40 	call	b5c5c4 <__umodsi3>
  b5b634:	1004943a 	slli	r2,r2,16
  b5b638:	b006d43a 	srli	r3,r22,16
  b5b63c:	10c4b03a 	or	r2,r2,r3
  b5b640:	1440032e 	bgeu	r2,r17,b5b650 <__umoddi3+0xc8>
  b5b644:	1405883a 	add	r2,r2,r16
  b5b648:	14000136 	bltu	r2,r16,b5b650 <__umoddi3+0xc8>
  b5b64c:	14413536 	bltu	r2,r17,b5bb24 <__umoddi3+0x59c>
  b5b650:	1463c83a 	sub	r17,r2,r17
  b5b654:	8809883a 	mov	r4,r17
  b5b658:	a80b883a 	mov	r5,r21
  b5b65c:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b660:	8809883a 	mov	r4,r17
  b5b664:	a0a3383a 	mul	r17,r20,r2
  b5b668:	a80b883a 	mov	r5,r21
  b5b66c:	00004d06 	br	b5b7a4 <__umoddi3+0x21c>
  b5b670:	380d883a 	mov	r6,r7
  b5b674:	29c0102e 	bgeu	r5,r7,b5b6b8 <__umoddi3+0x130>
  b5b678:	2011883a 	mov	r8,r4
  b5b67c:	2813883a 	mov	r9,r5
  b5b680:	4005883a 	mov	r2,r8
  b5b684:	4807883a 	mov	r3,r9
  b5b688:	dfc00e17 	ldw	ra,56(sp)
  b5b68c:	df000d17 	ldw	fp,52(sp)
  b5b690:	ddc00c17 	ldw	r23,48(sp)
  b5b694:	dd800b17 	ldw	r22,44(sp)
  b5b698:	dd400a17 	ldw	r21,40(sp)
  b5b69c:	dd000917 	ldw	r20,36(sp)
  b5b6a0:	dcc00817 	ldw	r19,32(sp)
  b5b6a4:	dc800717 	ldw	r18,28(sp)
  b5b6a8:	dc400617 	ldw	r17,24(sp)
  b5b6ac:	dc000517 	ldw	r16,20(sp)
  b5b6b0:	dec00f04 	addi	sp,sp,60
  b5b6b4:	f800283a 	ret
  b5b6b8:	00bfffd4 	movui	r2,65535
  b5b6bc:	11c05a36 	bltu	r2,r7,b5b828 <__umoddi3+0x2a0>
  b5b6c0:	00803fc4 	movi	r2,255
  b5b6c4:	11c0fe36 	bltu	r2,r7,b5bac0 <__umoddi3+0x538>
  b5b6c8:	000b883a 	mov	r5,zero
  b5b6cc:	0005883a 	mov	r2,zero
  b5b6d0:	3084d83a 	srl	r2,r6,r2
  b5b6d4:	01002db4 	movhi	r4,182
  b5b6d8:	21040704 	addi	r4,r4,4124
  b5b6dc:	01c00804 	movi	r7,32
  b5b6e0:	1105883a 	add	r2,r2,r4
  b5b6e4:	10c00003 	ldbu	r3,0(r2)
  b5b6e8:	28c7883a 	add	r3,r5,r3
  b5b6ec:	38ebc83a 	sub	r21,r7,r3
  b5b6f0:	a800851e 	bne	r21,zero,b5b908 <__umoddi3+0x380>
  b5b6f4:	35005236 	bltu	r6,r20,b5b840 <__umoddi3+0x2b8>
  b5b6f8:	b400512e 	bgeu	r22,r16,b5b840 <__umoddi3+0x2b8>
  b5b6fc:	b011883a 	mov	r8,r22
  b5b700:	a013883a 	mov	r9,r20
  b5b704:	003fde06 	br	b5b680 <__umoddi3+0xf8>
  b5b708:	00bfffd4 	movui	r2,65535
  b5b70c:	11804036 	bltu	r2,r6,b5b810 <__umoddi3+0x288>
  b5b710:	00803fc4 	movi	r2,255
  b5b714:	1180ed36 	bltu	r2,r6,b5bacc <__umoddi3+0x544>
  b5b718:	000b883a 	mov	r5,zero
  b5b71c:	0005883a 	mov	r2,zero
  b5b720:	8084d83a 	srl	r2,r16,r2
  b5b724:	01002db4 	movhi	r4,182
  b5b728:	21040704 	addi	r4,r4,4124
  b5b72c:	01800804 	movi	r6,32
  b5b730:	1105883a 	add	r2,r2,r4
  b5b734:	10c00003 	ldbu	r3,0(r2)
  b5b738:	28c7883a 	add	r3,r5,r3
  b5b73c:	30c7c83a 	sub	r3,r6,r3
  b5b740:	1800bf1e 	bne	r3,zero,b5ba40 <__umoddi3+0x4b8>
  b5b744:	0039883a 	mov	fp,zero
  b5b748:	802ad43a 	srli	r21,r16,16
  b5b74c:	a009883a 	mov	r4,r20
  b5b750:	85ffffcc 	andi	r23,r16,65535
  b5b754:	a80b883a 	mov	r5,r21
  b5b758:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b75c:	a009883a 	mov	r4,r20
  b5b760:	a80b883a 	mov	r5,r21
  b5b764:	b8a3383a 	mul	r17,r23,r2
  b5b768:	0b5c5c40 	call	b5c5c4 <__umodsi3>
  b5b76c:	1004943a 	slli	r2,r2,16
  b5b770:	b006d43a 	srli	r3,r22,16
  b5b774:	10c4b03a 	or	r2,r2,r3
  b5b778:	1440032e 	bgeu	r2,r17,b5b788 <__umoddi3+0x200>
  b5b77c:	1405883a 	add	r2,r2,r16
  b5b780:	14000136 	bltu	r2,r16,b5b788 <__umoddi3+0x200>
  b5b784:	1440e536 	bltu	r2,r17,b5bb1c <__umoddi3+0x594>
  b5b788:	1463c83a 	sub	r17,r2,r17
  b5b78c:	8809883a 	mov	r4,r17
  b5b790:	a80b883a 	mov	r5,r21
  b5b794:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b798:	8809883a 	mov	r4,r17
  b5b79c:	b8a3383a 	mul	r17,r23,r2
  b5b7a0:	a80b883a 	mov	r5,r21
  b5b7a4:	0b5c5c40 	call	b5c5c4 <__umodsi3>
  b5b7a8:	1004943a 	slli	r2,r2,16
  b5b7ac:	b0ffffcc 	andi	r3,r22,65535
  b5b7b0:	10c4b03a 	or	r2,r2,r3
  b5b7b4:	1440042e 	bgeu	r2,r17,b5b7c8 <__umoddi3+0x240>
  b5b7b8:	1405883a 	add	r2,r2,r16
  b5b7bc:	14000236 	bltu	r2,r16,b5b7c8 <__umoddi3+0x240>
  b5b7c0:	1440012e 	bgeu	r2,r17,b5b7c8 <__umoddi3+0x240>
  b5b7c4:	1405883a 	add	r2,r2,r16
  b5b7c8:	1445c83a 	sub	r2,r2,r17
  b5b7cc:	1724d83a 	srl	r18,r2,fp
  b5b7d0:	0013883a 	mov	r9,zero
  b5b7d4:	9011883a 	mov	r8,r18
  b5b7d8:	003fa906 	br	b5b680 <__umoddi3+0xf8>
  b5b7dc:	00804034 	movhi	r2,256
  b5b7e0:	10bfffc4 	addi	r2,r2,-1
  b5b7e4:	1400b036 	bltu	r2,r16,b5baa8 <__umoddi3+0x520>
  b5b7e8:	01400404 	movi	r5,16
  b5b7ec:	2805883a 	mov	r2,r5
  b5b7f0:	003f7c06 	br	b5b5e4 <__umoddi3+0x5c>
  b5b7f4:	01000044 	movi	r4,1
  b5b7f8:	000b883a 	mov	r5,zero
  b5b7fc:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b800:	1021883a 	mov	r16,r2
  b5b804:	00bfffd4 	movui	r2,65535
  b5b808:	143ff436 	bltu	r2,r16,b5b7dc <__umoddi3+0x254>
  b5b80c:	003f7106 	br	b5b5d4 <__umoddi3+0x4c>
  b5b810:	00804034 	movhi	r2,256
  b5b814:	10bfffc4 	addi	r2,r2,-1
  b5b818:	1180af36 	bltu	r2,r6,b5bad8 <__umoddi3+0x550>
  b5b81c:	01400404 	movi	r5,16
  b5b820:	2805883a 	mov	r2,r5
  b5b824:	003fbe06 	br	b5b720 <__umoddi3+0x198>
  b5b828:	00804034 	movhi	r2,256
  b5b82c:	10bfffc4 	addi	r2,r2,-1
  b5b830:	11c0ac36 	bltu	r2,r7,b5bae4 <__umoddi3+0x55c>
  b5b834:	01400404 	movi	r5,16
  b5b838:	2805883a 	mov	r2,r5
  b5b83c:	003fa406 	br	b5b6d0 <__umoddi3+0x148>
  b5b840:	b409c83a 	sub	r4,r22,r16
  b5b844:	b105803a 	cmpltu	r2,r22,r4
  b5b848:	a187c83a 	sub	r3,r20,r6
  b5b84c:	18a9c83a 	sub	r20,r3,r2
  b5b850:	202d883a 	mov	r22,r4
  b5b854:	003fa906 	br	b5b6fc <__umoddi3+0x174>
  b5b858:	85e0983a 	sll	r16,r16,r23
  b5b85c:	35c5c83a 	sub	r2,r6,r23
  b5b860:	a0a2d83a 	srl	r17,r20,r2
  b5b864:	802ad43a 	srli	r21,r16,16
  b5b868:	b084d83a 	srl	r2,r22,r2
  b5b86c:	a5c6983a 	sll	r3,r20,r23
  b5b870:	8809883a 	mov	r4,r17
  b5b874:	a80b883a 	mov	r5,r21
  b5b878:	1886b03a 	or	r3,r3,r2
  b5b87c:	d8c00115 	stw	r3,4(sp)
  b5b880:	853fffcc 	andi	r20,r16,65535
  b5b884:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b888:	8809883a 	mov	r4,r17
  b5b88c:	a80b883a 	mov	r5,r21
  b5b890:	a0a3383a 	mul	r17,r20,r2
  b5b894:	0b5c5c40 	call	b5c5c4 <__umodsi3>
  b5b898:	d9000117 	ldw	r4,4(sp)
  b5b89c:	1004943a 	slli	r2,r2,16
  b5b8a0:	b839883a 	mov	fp,r23
  b5b8a4:	2006d43a 	srli	r3,r4,16
  b5b8a8:	10c4b03a 	or	r2,r2,r3
  b5b8ac:	1440022e 	bgeu	r2,r17,b5b8b8 <__umoddi3+0x330>
  b5b8b0:	1405883a 	add	r2,r2,r16
  b5b8b4:	1400962e 	bgeu	r2,r16,b5bb10 <__umoddi3+0x588>
  b5b8b8:	1463c83a 	sub	r17,r2,r17
  b5b8bc:	8809883a 	mov	r4,r17
  b5b8c0:	a80b883a 	mov	r5,r21
  b5b8c4:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b8c8:	8809883a 	mov	r4,r17
  b5b8cc:	a80b883a 	mov	r5,r21
  b5b8d0:	a0a3383a 	mul	r17,r20,r2
  b5b8d4:	0b5c5c40 	call	b5c5c4 <__umodsi3>
  b5b8d8:	d9400117 	ldw	r5,4(sp)
  b5b8dc:	1004943a 	slli	r2,r2,16
  b5b8e0:	28ffffcc 	andi	r3,r5,65535
  b5b8e4:	10c4b03a 	or	r2,r2,r3
  b5b8e8:	1440042e 	bgeu	r2,r17,b5b8fc <__umoddi3+0x374>
  b5b8ec:	1405883a 	add	r2,r2,r16
  b5b8f0:	14000236 	bltu	r2,r16,b5b8fc <__umoddi3+0x374>
  b5b8f4:	1440012e 	bgeu	r2,r17,b5b8fc <__umoddi3+0x374>
  b5b8f8:	1405883a 	add	r2,r2,r16
  b5b8fc:	b5ec983a 	sll	r22,r22,r23
  b5b900:	1463c83a 	sub	r17,r2,r17
  b5b904:	003f4406 	br	b5b618 <__umoddi3+0x90>
  b5b908:	3d4fc83a 	sub	r7,r7,r21
  b5b90c:	3546983a 	sll	r3,r6,r21
  b5b910:	81c4d83a 	srl	r2,r16,r7
  b5b914:	a1e2d83a 	srl	r17,r20,r7
  b5b918:	a54c983a 	sll	r6,r20,r21
  b5b91c:	18aeb03a 	or	r23,r3,r2
  b5b920:	b828d43a 	srli	r20,r23,16
  b5b924:	b1c4d83a 	srl	r2,r22,r7
  b5b928:	8809883a 	mov	r4,r17
  b5b92c:	a00b883a 	mov	r5,r20
  b5b930:	308cb03a 	or	r6,r6,r2
  b5b934:	d9c00315 	stw	r7,12(sp)
  b5b938:	d9800215 	stw	r6,8(sp)
  b5b93c:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b940:	8809883a 	mov	r4,r17
  b5b944:	a00b883a 	mov	r5,r20
  b5b948:	1039883a 	mov	fp,r2
  b5b94c:	0b5c5c40 	call	b5c5c4 <__umodsi3>
  b5b950:	b8ffffcc 	andi	r3,r23,65535
  b5b954:	d8c00415 	stw	r3,16(sp)
  b5b958:	d9000217 	ldw	r4,8(sp)
  b5b95c:	d9400417 	ldw	r5,16(sp)
  b5b960:	1004943a 	slli	r2,r2,16
  b5b964:	2006d43a 	srli	r3,r4,16
  b5b968:	8560983a 	sll	r16,r16,r21
  b5b96c:	2f23383a 	mul	r17,r5,fp
  b5b970:	10c4b03a 	or	r2,r2,r3
  b5b974:	dc000015 	stw	r16,0(sp)
  b5b978:	b56c983a 	sll	r22,r22,r21
  b5b97c:	1440032e 	bgeu	r2,r17,b5b98c <__umoddi3+0x404>
  b5b980:	15c5883a 	add	r2,r2,r23
  b5b984:	e73fffc4 	addi	fp,fp,-1
  b5b988:	15c05d2e 	bgeu	r2,r23,b5bb00 <__umoddi3+0x578>
  b5b98c:	1463c83a 	sub	r17,r2,r17
  b5b990:	8809883a 	mov	r4,r17
  b5b994:	a00b883a 	mov	r5,r20
  b5b998:	0b5c5bc0 	call	b5c5bc <__udivsi3>
  b5b99c:	8809883a 	mov	r4,r17
  b5b9a0:	a00b883a 	mov	r5,r20
  b5b9a4:	1021883a 	mov	r16,r2
  b5b9a8:	0b5c5c40 	call	b5c5c4 <__umodsi3>
  b5b9ac:	d8c00417 	ldw	r3,16(sp)
  b5b9b0:	d9000217 	ldw	r4,8(sp)
  b5b9b4:	1004943a 	slli	r2,r2,16
  b5b9b8:	1c23383a 	mul	r17,r3,r16
  b5b9bc:	20ffffcc 	andi	r3,r4,65535
  b5b9c0:	10ceb03a 	or	r7,r2,r3
  b5b9c4:	3c40032e 	bgeu	r7,r17,b5b9d4 <__umoddi3+0x44c>
  b5b9c8:	3dcf883a 	add	r7,r7,r23
  b5b9cc:	843fffc4 	addi	r16,r16,-1
  b5b9d0:	3dc0472e 	bgeu	r7,r23,b5baf0 <__umoddi3+0x568>
  b5b9d4:	e004943a 	slli	r2,fp,16
  b5b9d8:	d9400017 	ldw	r5,0(sp)
  b5b9dc:	3c4fc83a 	sub	r7,r7,r17
  b5b9e0:	8084b03a 	or	r2,r16,r2
  b5b9e4:	28ffffcc 	andi	r3,r5,65535
  b5b9e8:	280cd43a 	srli	r6,r5,16
  b5b9ec:	100ad43a 	srli	r5,r2,16
  b5b9f0:	10bfffcc 	andi	r2,r2,65535
  b5b9f4:	10d1383a 	mul	r8,r2,r3
  b5b9f8:	28c7383a 	mul	r3,r5,r3
  b5b9fc:	1185383a 	mul	r2,r2,r6
  b5ba00:	4008d43a 	srli	r4,r8,16
  b5ba04:	298b383a 	mul	r5,r5,r6
  b5ba08:	10c5883a 	add	r2,r2,r3
  b5ba0c:	2089883a 	add	r4,r4,r2
  b5ba10:	20c0022e 	bgeu	r4,r3,b5ba1c <__umoddi3+0x494>
  b5ba14:	00800074 	movhi	r2,1
  b5ba18:	288b883a 	add	r5,r5,r2
  b5ba1c:	2004d43a 	srli	r2,r4,16
  b5ba20:	2008943a 	slli	r4,r4,16
  b5ba24:	40ffffcc 	andi	r3,r8,65535
  b5ba28:	288b883a 	add	r5,r5,r2
  b5ba2c:	20c9883a 	add	r4,r4,r3
  b5ba30:	39400b36 	bltu	r7,r5,b5ba60 <__umoddi3+0x4d8>
  b5ba34:	39403d26 	beq	r7,r5,b5bb2c <__umoddi3+0x5a4>
  b5ba38:	394bc83a 	sub	r5,r7,r5
  b5ba3c:	00000f06 	br	b5ba7c <__umoddi3+0x4f4>
  b5ba40:	30c5c83a 	sub	r2,r6,r3
  b5ba44:	1839883a 	mov	fp,r3
  b5ba48:	b084d83a 	srl	r2,r22,r2
  b5ba4c:	a0c6983a 	sll	r3,r20,r3
  b5ba50:	8720983a 	sll	r16,r16,fp
  b5ba54:	b72c983a 	sll	r22,r22,fp
  b5ba58:	18a8b03a 	or	r20,r3,r2
  b5ba5c:	003f3a06 	br	b5b748 <__umoddi3+0x1c0>
  b5ba60:	d8c00017 	ldw	r3,0(sp)
  b5ba64:	20c5c83a 	sub	r2,r4,r3
  b5ba68:	2089803a 	cmpltu	r4,r4,r2
  b5ba6c:	2dc7c83a 	sub	r3,r5,r23
  b5ba70:	1907c83a 	sub	r3,r3,r4
  b5ba74:	38cbc83a 	sub	r5,r7,r3
  b5ba78:	1009883a 	mov	r4,r2
  b5ba7c:	b105c83a 	sub	r2,r22,r4
  b5ba80:	b087803a 	cmpltu	r3,r22,r2
  b5ba84:	28c7c83a 	sub	r3,r5,r3
  b5ba88:	d9400317 	ldw	r5,12(sp)
  b5ba8c:	1544d83a 	srl	r2,r2,r21
  b5ba90:	1948983a 	sll	r4,r3,r5
  b5ba94:	1d46d83a 	srl	r3,r3,r21
  b5ba98:	20a4b03a 	or	r18,r4,r2
  b5ba9c:	9011883a 	mov	r8,r18
  b5baa0:	1813883a 	mov	r9,r3
  b5baa4:	003ef606 	br	b5b680 <__umoddi3+0xf8>
  b5baa8:	01400604 	movi	r5,24
  b5baac:	2805883a 	mov	r2,r5
  b5bab0:	003ecc06 	br	b5b5e4 <__umoddi3+0x5c>
  b5bab4:	01400204 	movi	r5,8
  b5bab8:	2805883a 	mov	r2,r5
  b5babc:	003ec906 	br	b5b5e4 <__umoddi3+0x5c>
  b5bac0:	01400204 	movi	r5,8
  b5bac4:	2805883a 	mov	r2,r5
  b5bac8:	003f0106 	br	b5b6d0 <__umoddi3+0x148>
  b5bacc:	01400204 	movi	r5,8
  b5bad0:	2805883a 	mov	r2,r5
  b5bad4:	003f1206 	br	b5b720 <__umoddi3+0x198>
  b5bad8:	01400604 	movi	r5,24
  b5badc:	2805883a 	mov	r2,r5
  b5bae0:	003f0f06 	br	b5b720 <__umoddi3+0x198>
  b5bae4:	01400604 	movi	r5,24
  b5bae8:	2805883a 	mov	r2,r5
  b5baec:	003ef806 	br	b5b6d0 <__umoddi3+0x148>
  b5baf0:	3c7fb82e 	bgeu	r7,r17,b5b9d4 <__umoddi3+0x44c>
  b5baf4:	843fffc4 	addi	r16,r16,-1
  b5baf8:	3dcf883a 	add	r7,r7,r23
  b5bafc:	003fb506 	br	b5b9d4 <__umoddi3+0x44c>
  b5bb00:	147fa22e 	bgeu	r2,r17,b5b98c <__umoddi3+0x404>
  b5bb04:	e73fffc4 	addi	fp,fp,-1
  b5bb08:	15c5883a 	add	r2,r2,r23
  b5bb0c:	003f9f06 	br	b5b98c <__umoddi3+0x404>
  b5bb10:	147f692e 	bgeu	r2,r17,b5b8b8 <__umoddi3+0x330>
  b5bb14:	1405883a 	add	r2,r2,r16
  b5bb18:	003f6706 	br	b5b8b8 <__umoddi3+0x330>
  b5bb1c:	1405883a 	add	r2,r2,r16
  b5bb20:	003f1906 	br	b5b788 <__umoddi3+0x200>
  b5bb24:	1405883a 	add	r2,r2,r16
  b5bb28:	003ec906 	br	b5b650 <__umoddi3+0xc8>
  b5bb2c:	b13fcc36 	bltu	r22,r4,b5ba60 <__umoddi3+0x4d8>
  b5bb30:	000b883a 	mov	r5,zero
  b5bb34:	003fd106 	br	b5ba7c <__umoddi3+0x4f4>

00b5bb38 <__muldf3>:
  b5bb38:	deffe004 	addi	sp,sp,-128
  b5bb3c:	dc401815 	stw	r17,96(sp)
  b5bb40:	dc400404 	addi	r17,sp,16
  b5bb44:	2011883a 	mov	r8,r4
  b5bb48:	2813883a 	mov	r9,r5
  b5bb4c:	dc001715 	stw	r16,92(sp)
  b5bb50:	d809883a 	mov	r4,sp
  b5bb54:	880b883a 	mov	r5,r17
  b5bb58:	dc000904 	addi	r16,sp,36
  b5bb5c:	dfc01f15 	stw	ra,124(sp)
  b5bb60:	da400115 	stw	r9,4(sp)
  b5bb64:	d9c00315 	stw	r7,12(sp)
  b5bb68:	da000015 	stw	r8,0(sp)
  b5bb6c:	d9800215 	stw	r6,8(sp)
  b5bb70:	ddc01e15 	stw	r23,120(sp)
  b5bb74:	dd801d15 	stw	r22,116(sp)
  b5bb78:	dd401c15 	stw	r21,112(sp)
  b5bb7c:	dd001b15 	stw	r20,108(sp)
  b5bb80:	dcc01a15 	stw	r19,104(sp)
  b5bb84:	dc801915 	stw	r18,100(sp)
  b5bb88:	0b539b40 	call	b539b4 <__unpack_d>
  b5bb8c:	d9000204 	addi	r4,sp,8
  b5bb90:	800b883a 	mov	r5,r16
  b5bb94:	0b539b40 	call	b539b4 <__unpack_d>
  b5bb98:	d9000417 	ldw	r4,16(sp)
  b5bb9c:	00800044 	movi	r2,1
  b5bba0:	1100102e 	bgeu	r2,r4,b5bbe4 <__muldf3+0xac>
  b5bba4:	d8c00917 	ldw	r3,36(sp)
  b5bba8:	10c0062e 	bgeu	r2,r3,b5bbc4 <__muldf3+0x8c>
  b5bbac:	00800104 	movi	r2,4
  b5bbb0:	20800a26 	beq	r4,r2,b5bbdc <__muldf3+0xa4>
  b5bbb4:	1880cc26 	beq	r3,r2,b5bee8 <__muldf3+0x3b0>
  b5bbb8:	00800084 	movi	r2,2
  b5bbbc:	20800926 	beq	r4,r2,b5bbe4 <__muldf3+0xac>
  b5bbc0:	1880191e 	bne	r3,r2,b5bc28 <__muldf3+0xf0>
  b5bbc4:	d8c00a17 	ldw	r3,40(sp)
  b5bbc8:	d8800517 	ldw	r2,20(sp)
  b5bbcc:	8009883a 	mov	r4,r16
  b5bbd0:	10c4c03a 	cmpne	r2,r2,r3
  b5bbd4:	d8800a15 	stw	r2,40(sp)
  b5bbd8:	00000706 	br	b5bbf8 <__muldf3+0xc0>
  b5bbdc:	00800084 	movi	r2,2
  b5bbe0:	1880c326 	beq	r3,r2,b5bef0 <__muldf3+0x3b8>
  b5bbe4:	d8800517 	ldw	r2,20(sp)
  b5bbe8:	d8c00a17 	ldw	r3,40(sp)
  b5bbec:	8809883a 	mov	r4,r17
  b5bbf0:	10c4c03a 	cmpne	r2,r2,r3
  b5bbf4:	d8800515 	stw	r2,20(sp)
  b5bbf8:	0b536a00 	call	b536a0 <__pack_d>
  b5bbfc:	dfc01f17 	ldw	ra,124(sp)
  b5bc00:	ddc01e17 	ldw	r23,120(sp)
  b5bc04:	dd801d17 	ldw	r22,116(sp)
  b5bc08:	dd401c17 	ldw	r21,112(sp)
  b5bc0c:	dd001b17 	ldw	r20,108(sp)
  b5bc10:	dcc01a17 	ldw	r19,104(sp)
  b5bc14:	dc801917 	ldw	r18,100(sp)
  b5bc18:	dc401817 	ldw	r17,96(sp)
  b5bc1c:	dc001717 	ldw	r16,92(sp)
  b5bc20:	dec02004 	addi	sp,sp,128
  b5bc24:	f800283a 	ret
  b5bc28:	dd800717 	ldw	r22,28(sp)
  b5bc2c:	dc800c17 	ldw	r18,48(sp)
  b5bc30:	002b883a 	mov	r21,zero
  b5bc34:	0023883a 	mov	r17,zero
  b5bc38:	a80b883a 	mov	r5,r21
  b5bc3c:	b00d883a 	mov	r6,r22
  b5bc40:	880f883a 	mov	r7,r17
  b5bc44:	ddc00817 	ldw	r23,32(sp)
  b5bc48:	dcc00d17 	ldw	r19,52(sp)
  b5bc4c:	9009883a 	mov	r4,r18
  b5bc50:	0b5328c0 	call	b5328c <__muldi3>
  b5bc54:	001b883a 	mov	r13,zero
  b5bc58:	680f883a 	mov	r7,r13
  b5bc5c:	b009883a 	mov	r4,r22
  b5bc60:	000b883a 	mov	r5,zero
  b5bc64:	980d883a 	mov	r6,r19
  b5bc68:	b82d883a 	mov	r22,r23
  b5bc6c:	002f883a 	mov	r23,zero
  b5bc70:	db401615 	stw	r13,88(sp)
  b5bc74:	d8801315 	stw	r2,76(sp)
  b5bc78:	d8c01415 	stw	r3,80(sp)
  b5bc7c:	dcc01515 	stw	r19,84(sp)
  b5bc80:	0b5328c0 	call	b5328c <__muldi3>
  b5bc84:	b00d883a 	mov	r6,r22
  b5bc88:	000b883a 	mov	r5,zero
  b5bc8c:	9009883a 	mov	r4,r18
  b5bc90:	b80f883a 	mov	r7,r23
  b5bc94:	1021883a 	mov	r16,r2
  b5bc98:	1823883a 	mov	r17,r3
  b5bc9c:	0b5328c0 	call	b5328c <__muldi3>
  b5bca0:	8085883a 	add	r2,r16,r2
  b5bca4:	140d803a 	cmpltu	r6,r2,r16
  b5bca8:	88c7883a 	add	r3,r17,r3
  b5bcac:	30cd883a 	add	r6,r6,r3
  b5bcb0:	1029883a 	mov	r20,r2
  b5bcb4:	302b883a 	mov	r21,r6
  b5bcb8:	da801317 	ldw	r10,76(sp)
  b5bcbc:	dac01417 	ldw	r11,80(sp)
  b5bcc0:	db001517 	ldw	r12,84(sp)
  b5bcc4:	db401617 	ldw	r13,88(sp)
  b5bcc8:	3440612e 	bgeu	r6,r17,b5be50 <__muldf3+0x318>
  b5bccc:	0009883a 	mov	r4,zero
  b5bcd0:	5105883a 	add	r2,r10,r4
  b5bcd4:	128d803a 	cmpltu	r6,r2,r10
  b5bcd8:	5d07883a 	add	r3,r11,r20
  b5bcdc:	30cd883a 	add	r6,r6,r3
  b5bce0:	0021883a 	mov	r16,zero
  b5bce4:	04400044 	movi	r17,1
  b5bce8:	1025883a 	mov	r18,r2
  b5bcec:	3027883a 	mov	r19,r6
  b5bcf0:	32c06236 	bltu	r6,r11,b5be7c <__muldf3+0x344>
  b5bcf4:	59807a26 	beq	r11,r6,b5bee0 <__muldf3+0x3a8>
  b5bcf8:	680b883a 	mov	r5,r13
  b5bcfc:	b80f883a 	mov	r7,r23
  b5bd00:	6009883a 	mov	r4,r12
  b5bd04:	b00d883a 	mov	r6,r22
  b5bd08:	0b5328c0 	call	b5328c <__muldi3>
  b5bd0c:	1009883a 	mov	r4,r2
  b5bd10:	000f883a 	mov	r7,zero
  b5bd14:	1545883a 	add	r2,r2,r21
  b5bd18:	1111803a 	cmpltu	r8,r2,r4
  b5bd1c:	19c7883a 	add	r3,r3,r7
  b5bd20:	40c7883a 	add	r3,r8,r3
  b5bd24:	88cb883a 	add	r5,r17,r3
  b5bd28:	d8c00617 	ldw	r3,24(sp)
  b5bd2c:	8089883a 	add	r4,r16,r2
  b5bd30:	d8800b17 	ldw	r2,44(sp)
  b5bd34:	18c00104 	addi	r3,r3,4
  b5bd38:	240d803a 	cmpltu	r6,r4,r16
  b5bd3c:	10c7883a 	add	r3,r2,r3
  b5bd40:	2013883a 	mov	r9,r4
  b5bd44:	d8800a17 	ldw	r2,40(sp)
  b5bd48:	d9000517 	ldw	r4,20(sp)
  b5bd4c:	314d883a 	add	r6,r6,r5
  b5bd50:	3015883a 	mov	r10,r6
  b5bd54:	2088c03a 	cmpne	r4,r4,r2
  b5bd58:	00880034 	movhi	r2,8192
  b5bd5c:	10bfffc4 	addi	r2,r2,-1
  b5bd60:	d9000f15 	stw	r4,60(sp)
  b5bd64:	d8c01015 	stw	r3,64(sp)
  b5bd68:	1180162e 	bgeu	r2,r6,b5bdc4 <__muldf3+0x28c>
  b5bd6c:	1811883a 	mov	r8,r3
  b5bd70:	101f883a 	mov	r15,r2
  b5bd74:	980497fa 	slli	r2,r19,31
  b5bd78:	9016d07a 	srli	r11,r18,1
  b5bd7c:	500697fa 	slli	r3,r10,31
  b5bd80:	480cd07a 	srli	r6,r9,1
  b5bd84:	500ed07a 	srli	r7,r10,1
  b5bd88:	12d6b03a 	or	r11,r2,r11
  b5bd8c:	00800044 	movi	r2,1
  b5bd90:	198cb03a 	or	r6,r3,r6
  b5bd94:	4888703a 	and	r4,r9,r2
  b5bd98:	9818d07a 	srli	r12,r19,1
  b5bd9c:	001b883a 	mov	r13,zero
  b5bda0:	03a00034 	movhi	r14,32768
  b5bda4:	3013883a 	mov	r9,r6
  b5bda8:	3815883a 	mov	r10,r7
  b5bdac:	4091883a 	add	r8,r8,r2
  b5bdb0:	20000226 	beq	r4,zero,b5bdbc <__muldf3+0x284>
  b5bdb4:	5b64b03a 	or	r18,r11,r13
  b5bdb8:	63a6b03a 	or	r19,r12,r14
  b5bdbc:	7abfed36 	bltu	r15,r10,b5bd74 <__muldf3+0x23c>
  b5bdc0:	da001015 	stw	r8,64(sp)
  b5bdc4:	00840034 	movhi	r2,4096
  b5bdc8:	10bfffc4 	addi	r2,r2,-1
  b5bdcc:	12801436 	bltu	r2,r10,b5be20 <__muldf3+0x2e8>
  b5bdd0:	da001017 	ldw	r8,64(sp)
  b5bdd4:	101f883a 	mov	r15,r2
  b5bdd8:	4a45883a 	add	r2,r9,r9
  b5bddc:	124d803a 	cmpltu	r6,r2,r9
  b5bde0:	5287883a 	add	r3,r10,r10
  b5bde4:	9497883a 	add	r11,r18,r18
  b5bde8:	5c8f803a 	cmpltu	r7,r11,r18
  b5bdec:	9cd9883a 	add	r12,r19,r19
  b5bdf0:	01000044 	movi	r4,1
  b5bdf4:	30cd883a 	add	r6,r6,r3
  b5bdf8:	3b0f883a 	add	r7,r7,r12
  b5bdfc:	423fffc4 	addi	r8,r8,-1
  b5be00:	1013883a 	mov	r9,r2
  b5be04:	3015883a 	mov	r10,r6
  b5be08:	111ab03a 	or	r13,r2,r4
  b5be0c:	98003016 	blt	r19,zero,b5bed0 <__muldf3+0x398>
  b5be10:	5825883a 	mov	r18,r11
  b5be14:	3827883a 	mov	r19,r7
  b5be18:	7abfef2e 	bgeu	r15,r10,b5bdd8 <__muldf3+0x2a0>
  b5be1c:	da001015 	stw	r8,64(sp)
  b5be20:	00803fc4 	movi	r2,255
  b5be24:	488e703a 	and	r7,r9,r2
  b5be28:	00802004 	movi	r2,128
  b5be2c:	0007883a 	mov	r3,zero
  b5be30:	0011883a 	mov	r8,zero
  b5be34:	38801826 	beq	r7,r2,b5be98 <__muldf3+0x360>
  b5be38:	008000c4 	movi	r2,3
  b5be3c:	d9000e04 	addi	r4,sp,56
  b5be40:	da801215 	stw	r10,72(sp)
  b5be44:	d8800e15 	stw	r2,56(sp)
  b5be48:	da401115 	stw	r9,68(sp)
  b5be4c:	003f6a06 	br	b5bbf8 <__muldf3+0xc0>
  b5be50:	89802126 	beq	r17,r6,b5bed8 <__muldf3+0x3a0>
  b5be54:	0009883a 	mov	r4,zero
  b5be58:	5105883a 	add	r2,r10,r4
  b5be5c:	128d803a 	cmpltu	r6,r2,r10
  b5be60:	5d07883a 	add	r3,r11,r20
  b5be64:	30cd883a 	add	r6,r6,r3
  b5be68:	0021883a 	mov	r16,zero
  b5be6c:	0023883a 	mov	r17,zero
  b5be70:	1025883a 	mov	r18,r2
  b5be74:	3027883a 	mov	r19,r6
  b5be78:	32ff9e2e 	bgeu	r6,r11,b5bcf4 <__muldf3+0x1bc>
  b5be7c:	00800044 	movi	r2,1
  b5be80:	8089883a 	add	r4,r16,r2
  b5be84:	240d803a 	cmpltu	r6,r4,r16
  b5be88:	344d883a 	add	r6,r6,r17
  b5be8c:	2021883a 	mov	r16,r4
  b5be90:	3023883a 	mov	r17,r6
  b5be94:	003f9806 	br	b5bcf8 <__muldf3+0x1c0>
  b5be98:	403fe71e 	bne	r8,zero,b5be38 <__muldf3+0x300>
  b5be9c:	01004004 	movi	r4,256
  b5bea0:	4904703a 	and	r2,r9,r4
  b5bea4:	10c4b03a 	or	r2,r2,r3
  b5bea8:	103fe31e 	bne	r2,zero,b5be38 <__muldf3+0x300>
  b5beac:	94c4b03a 	or	r2,r18,r19
  b5beb0:	103fe126 	beq	r2,zero,b5be38 <__muldf3+0x300>
  b5beb4:	49c5883a 	add	r2,r9,r7
  b5beb8:	1251803a 	cmpltu	r8,r2,r9
  b5bebc:	4291883a 	add	r8,r8,r10
  b5bec0:	013fc004 	movi	r4,-256
  b5bec4:	1112703a 	and	r9,r2,r4
  b5bec8:	4015883a 	mov	r10,r8
  b5becc:	003fda06 	br	b5be38 <__muldf3+0x300>
  b5bed0:	6813883a 	mov	r9,r13
  b5bed4:	003fce06 	br	b5be10 <__muldf3+0x2d8>
  b5bed8:	143f7c36 	bltu	r2,r16,b5bccc <__muldf3+0x194>
  b5bedc:	003fdd06 	br	b5be54 <__muldf3+0x31c>
  b5bee0:	12bf852e 	bgeu	r2,r10,b5bcf8 <__muldf3+0x1c0>
  b5bee4:	003fe506 	br	b5be7c <__muldf3+0x344>
  b5bee8:	00800084 	movi	r2,2
  b5beec:	20bf351e 	bne	r4,r2,b5bbc4 <__muldf3+0x8c>
  b5bef0:	01002db4 	movhi	r4,182
  b5bef4:	21040204 	addi	r4,r4,4104
  b5bef8:	003f3f06 	br	b5bbf8 <__muldf3+0xc0>

00b5befc <__eqdf2>:
  b5befc:	deffef04 	addi	sp,sp,-68
  b5bf00:	dc400f15 	stw	r17,60(sp)
  b5bf04:	dc400404 	addi	r17,sp,16
  b5bf08:	2005883a 	mov	r2,r4
  b5bf0c:	2807883a 	mov	r3,r5
  b5bf10:	dc000e15 	stw	r16,56(sp)
  b5bf14:	d809883a 	mov	r4,sp
  b5bf18:	880b883a 	mov	r5,r17
  b5bf1c:	dc000904 	addi	r16,sp,36
  b5bf20:	d8c00115 	stw	r3,4(sp)
  b5bf24:	d8800015 	stw	r2,0(sp)
  b5bf28:	d9800215 	stw	r6,8(sp)
  b5bf2c:	dfc01015 	stw	ra,64(sp)
  b5bf30:	d9c00315 	stw	r7,12(sp)
  b5bf34:	0b539b40 	call	b539b4 <__unpack_d>
  b5bf38:	d9000204 	addi	r4,sp,8
  b5bf3c:	800b883a 	mov	r5,r16
  b5bf40:	0b539b40 	call	b539b4 <__unpack_d>
  b5bf44:	d8800417 	ldw	r2,16(sp)
  b5bf48:	00c00044 	movi	r3,1
  b5bf4c:	180d883a 	mov	r6,r3
  b5bf50:	1880062e 	bgeu	r3,r2,b5bf6c <__eqdf2+0x70>
  b5bf54:	d8800917 	ldw	r2,36(sp)
  b5bf58:	8809883a 	mov	r4,r17
  b5bf5c:	800b883a 	mov	r5,r16
  b5bf60:	1880022e 	bgeu	r3,r2,b5bf6c <__eqdf2+0x70>
  b5bf64:	0b53aec0 	call	b53aec <__fpcmp_parts_d>
  b5bf68:	100d883a 	mov	r6,r2
  b5bf6c:	3005883a 	mov	r2,r6
  b5bf70:	dfc01017 	ldw	ra,64(sp)
  b5bf74:	dc400f17 	ldw	r17,60(sp)
  b5bf78:	dc000e17 	ldw	r16,56(sp)
  b5bf7c:	dec01104 	addi	sp,sp,68
  b5bf80:	f800283a 	ret

00b5bf84 <__gtdf2>:
  b5bf84:	deffef04 	addi	sp,sp,-68
  b5bf88:	dc400f15 	stw	r17,60(sp)
  b5bf8c:	dc400404 	addi	r17,sp,16
  b5bf90:	2005883a 	mov	r2,r4
  b5bf94:	2807883a 	mov	r3,r5
  b5bf98:	dc000e15 	stw	r16,56(sp)
  b5bf9c:	d809883a 	mov	r4,sp
  b5bfa0:	880b883a 	mov	r5,r17
  b5bfa4:	dc000904 	addi	r16,sp,36
  b5bfa8:	d8c00115 	stw	r3,4(sp)
  b5bfac:	d8800015 	stw	r2,0(sp)
  b5bfb0:	d9800215 	stw	r6,8(sp)
  b5bfb4:	dfc01015 	stw	ra,64(sp)
  b5bfb8:	d9c00315 	stw	r7,12(sp)
  b5bfbc:	0b539b40 	call	b539b4 <__unpack_d>
  b5bfc0:	d9000204 	addi	r4,sp,8
  b5bfc4:	800b883a 	mov	r5,r16
  b5bfc8:	0b539b40 	call	b539b4 <__unpack_d>
  b5bfcc:	d8800417 	ldw	r2,16(sp)
  b5bfd0:	00c00044 	movi	r3,1
  b5bfd4:	01bfffc4 	movi	r6,-1
  b5bfd8:	1880062e 	bgeu	r3,r2,b5bff4 <__gtdf2+0x70>
  b5bfdc:	d8800917 	ldw	r2,36(sp)
  b5bfe0:	8809883a 	mov	r4,r17
  b5bfe4:	800b883a 	mov	r5,r16
  b5bfe8:	1880022e 	bgeu	r3,r2,b5bff4 <__gtdf2+0x70>
  b5bfec:	0b53aec0 	call	b53aec <__fpcmp_parts_d>
  b5bff0:	100d883a 	mov	r6,r2
  b5bff4:	3005883a 	mov	r2,r6
  b5bff8:	dfc01017 	ldw	ra,64(sp)
  b5bffc:	dc400f17 	ldw	r17,60(sp)
  b5c000:	dc000e17 	ldw	r16,56(sp)
  b5c004:	dec01104 	addi	sp,sp,68
  b5c008:	f800283a 	ret

00b5c00c <__gedf2>:
  b5c00c:	deffef04 	addi	sp,sp,-68
  b5c010:	dc400f15 	stw	r17,60(sp)
  b5c014:	dc400404 	addi	r17,sp,16
  b5c018:	2005883a 	mov	r2,r4
  b5c01c:	2807883a 	mov	r3,r5
  b5c020:	dc000e15 	stw	r16,56(sp)
  b5c024:	d809883a 	mov	r4,sp
  b5c028:	880b883a 	mov	r5,r17
  b5c02c:	dc000904 	addi	r16,sp,36
  b5c030:	d8c00115 	stw	r3,4(sp)
  b5c034:	d8800015 	stw	r2,0(sp)
  b5c038:	d9800215 	stw	r6,8(sp)
  b5c03c:	dfc01015 	stw	ra,64(sp)
  b5c040:	d9c00315 	stw	r7,12(sp)
  b5c044:	0b539b40 	call	b539b4 <__unpack_d>
  b5c048:	d9000204 	addi	r4,sp,8
  b5c04c:	800b883a 	mov	r5,r16
  b5c050:	0b539b40 	call	b539b4 <__unpack_d>
  b5c054:	d8800417 	ldw	r2,16(sp)
  b5c058:	00c00044 	movi	r3,1
  b5c05c:	01bfffc4 	movi	r6,-1
  b5c060:	1880062e 	bgeu	r3,r2,b5c07c <__gedf2+0x70>
  b5c064:	d8800917 	ldw	r2,36(sp)
  b5c068:	8809883a 	mov	r4,r17
  b5c06c:	800b883a 	mov	r5,r16
  b5c070:	1880022e 	bgeu	r3,r2,b5c07c <__gedf2+0x70>
  b5c074:	0b53aec0 	call	b53aec <__fpcmp_parts_d>
  b5c078:	100d883a 	mov	r6,r2
  b5c07c:	3005883a 	mov	r2,r6
  b5c080:	dfc01017 	ldw	ra,64(sp)
  b5c084:	dc400f17 	ldw	r17,60(sp)
  b5c088:	dc000e17 	ldw	r16,56(sp)
  b5c08c:	dec01104 	addi	sp,sp,68
  b5c090:	f800283a 	ret

00b5c094 <__ltdf2>:
  b5c094:	deffef04 	addi	sp,sp,-68
  b5c098:	dc400f15 	stw	r17,60(sp)
  b5c09c:	dc400404 	addi	r17,sp,16
  b5c0a0:	2005883a 	mov	r2,r4
  b5c0a4:	2807883a 	mov	r3,r5
  b5c0a8:	dc000e15 	stw	r16,56(sp)
  b5c0ac:	d809883a 	mov	r4,sp
  b5c0b0:	880b883a 	mov	r5,r17
  b5c0b4:	dc000904 	addi	r16,sp,36
  b5c0b8:	d8c00115 	stw	r3,4(sp)
  b5c0bc:	d8800015 	stw	r2,0(sp)
  b5c0c0:	d9800215 	stw	r6,8(sp)
  b5c0c4:	dfc01015 	stw	ra,64(sp)
  b5c0c8:	d9c00315 	stw	r7,12(sp)
  b5c0cc:	0b539b40 	call	b539b4 <__unpack_d>
  b5c0d0:	d9000204 	addi	r4,sp,8
  b5c0d4:	800b883a 	mov	r5,r16
  b5c0d8:	0b539b40 	call	b539b4 <__unpack_d>
  b5c0dc:	d8800417 	ldw	r2,16(sp)
  b5c0e0:	00c00044 	movi	r3,1
  b5c0e4:	180d883a 	mov	r6,r3
  b5c0e8:	1880062e 	bgeu	r3,r2,b5c104 <__ltdf2+0x70>
  b5c0ec:	d8800917 	ldw	r2,36(sp)
  b5c0f0:	8809883a 	mov	r4,r17
  b5c0f4:	800b883a 	mov	r5,r16
  b5c0f8:	1880022e 	bgeu	r3,r2,b5c104 <__ltdf2+0x70>
  b5c0fc:	0b53aec0 	call	b53aec <__fpcmp_parts_d>
  b5c100:	100d883a 	mov	r6,r2
  b5c104:	3005883a 	mov	r2,r6
  b5c108:	dfc01017 	ldw	ra,64(sp)
  b5c10c:	dc400f17 	ldw	r17,60(sp)
  b5c110:	dc000e17 	ldw	r16,56(sp)
  b5c114:	dec01104 	addi	sp,sp,68
  b5c118:	f800283a 	ret

00b5c11c <__floatsidf>:
  b5c11c:	2006d7fa 	srli	r3,r4,31
  b5c120:	defff604 	addi	sp,sp,-40
  b5c124:	008000c4 	movi	r2,3
  b5c128:	dfc00915 	stw	ra,36(sp)
  b5c12c:	dcc00815 	stw	r19,32(sp)
  b5c130:	dc800715 	stw	r18,28(sp)
  b5c134:	dc400615 	stw	r17,24(sp)
  b5c138:	dc000515 	stw	r16,20(sp)
  b5c13c:	d8800015 	stw	r2,0(sp)
  b5c140:	d8c00115 	stw	r3,4(sp)
  b5c144:	20000f1e 	bne	r4,zero,b5c184 <__floatsidf+0x68>
  b5c148:	00800084 	movi	r2,2
  b5c14c:	d8800015 	stw	r2,0(sp)
  b5c150:	d809883a 	mov	r4,sp
  b5c154:	0b536a00 	call	b536a0 <__pack_d>
  b5c158:	1009883a 	mov	r4,r2
  b5c15c:	180b883a 	mov	r5,r3
  b5c160:	2005883a 	mov	r2,r4
  b5c164:	2807883a 	mov	r3,r5
  b5c168:	dfc00917 	ldw	ra,36(sp)
  b5c16c:	dcc00817 	ldw	r19,32(sp)
  b5c170:	dc800717 	ldw	r18,28(sp)
  b5c174:	dc400617 	ldw	r17,24(sp)
  b5c178:	dc000517 	ldw	r16,20(sp)
  b5c17c:	dec00a04 	addi	sp,sp,40
  b5c180:	f800283a 	ret
  b5c184:	00800f04 	movi	r2,60
  b5c188:	1807003a 	cmpeq	r3,r3,zero
  b5c18c:	d8800215 	stw	r2,8(sp)
  b5c190:	18001126 	beq	r3,zero,b5c1d8 <__floatsidf+0xbc>
  b5c194:	0027883a 	mov	r19,zero
  b5c198:	2025883a 	mov	r18,r4
  b5c19c:	d9000315 	stw	r4,12(sp)
  b5c1a0:	dcc00415 	stw	r19,16(sp)
  b5c1a4:	0b533240 	call	b53324 <__clzsi2>
  b5c1a8:	11000744 	addi	r4,r2,29
  b5c1ac:	013fe80e 	bge	zero,r4,b5c150 <__floatsidf+0x34>
  b5c1b0:	10bfff44 	addi	r2,r2,-3
  b5c1b4:	10000c16 	blt	r2,zero,b5c1e8 <__floatsidf+0xcc>
  b5c1b8:	90a2983a 	sll	r17,r18,r2
  b5c1bc:	0021883a 	mov	r16,zero
  b5c1c0:	d8800217 	ldw	r2,8(sp)
  b5c1c4:	dc400415 	stw	r17,16(sp)
  b5c1c8:	dc000315 	stw	r16,12(sp)
  b5c1cc:	1105c83a 	sub	r2,r2,r4
  b5c1d0:	d8800215 	stw	r2,8(sp)
  b5c1d4:	003fde06 	br	b5c150 <__floatsidf+0x34>
  b5c1d8:	00a00034 	movhi	r2,32768
  b5c1dc:	20800a26 	beq	r4,r2,b5c208 <__floatsidf+0xec>
  b5c1e0:	0109c83a 	sub	r4,zero,r4
  b5c1e4:	003feb06 	br	b5c194 <__floatsidf+0x78>
  b5c1e8:	9006d07a 	srli	r3,r18,1
  b5c1ec:	008007c4 	movi	r2,31
  b5c1f0:	1105c83a 	sub	r2,r2,r4
  b5c1f4:	1886d83a 	srl	r3,r3,r2
  b5c1f8:	9922983a 	sll	r17,r19,r4
  b5c1fc:	9120983a 	sll	r16,r18,r4
  b5c200:	1c62b03a 	or	r17,r3,r17
  b5c204:	003fee06 	br	b5c1c0 <__floatsidf+0xa4>
  b5c208:	0009883a 	mov	r4,zero
  b5c20c:	01707834 	movhi	r5,49632
  b5c210:	003fd306 	br	b5c160 <__floatsidf+0x44>

00b5c214 <__fixdfsi>:
  b5c214:	defff804 	addi	sp,sp,-32
  b5c218:	2005883a 	mov	r2,r4
  b5c21c:	2807883a 	mov	r3,r5
  b5c220:	d809883a 	mov	r4,sp
  b5c224:	d9400204 	addi	r5,sp,8
  b5c228:	d8c00115 	stw	r3,4(sp)
  b5c22c:	d8800015 	stw	r2,0(sp)
  b5c230:	dfc00715 	stw	ra,28(sp)
  b5c234:	0b539b40 	call	b539b4 <__unpack_d>
  b5c238:	d8c00217 	ldw	r3,8(sp)
  b5c23c:	00800084 	movi	r2,2
  b5c240:	1880051e 	bne	r3,r2,b5c258 <__fixdfsi+0x44>
  b5c244:	0007883a 	mov	r3,zero
  b5c248:	1805883a 	mov	r2,r3
  b5c24c:	dfc00717 	ldw	ra,28(sp)
  b5c250:	dec00804 	addi	sp,sp,32
  b5c254:	f800283a 	ret
  b5c258:	00800044 	movi	r2,1
  b5c25c:	10fff92e 	bgeu	r2,r3,b5c244 <__fixdfsi+0x30>
  b5c260:	00800104 	movi	r2,4
  b5c264:	18800426 	beq	r3,r2,b5c278 <__fixdfsi+0x64>
  b5c268:	d8c00417 	ldw	r3,16(sp)
  b5c26c:	183ff516 	blt	r3,zero,b5c244 <__fixdfsi+0x30>
  b5c270:	00800784 	movi	r2,30
  b5c274:	10c0080e 	bge	r2,r3,b5c298 <__fixdfsi+0x84>
  b5c278:	d8800317 	ldw	r2,12(sp)
  b5c27c:	1000121e 	bne	r2,zero,b5c2c8 <__fixdfsi+0xb4>
  b5c280:	00e00034 	movhi	r3,32768
  b5c284:	18ffffc4 	addi	r3,r3,-1
  b5c288:	1805883a 	mov	r2,r3
  b5c28c:	dfc00717 	ldw	ra,28(sp)
  b5c290:	dec00804 	addi	sp,sp,32
  b5c294:	f800283a 	ret
  b5c298:	00800f04 	movi	r2,60
  b5c29c:	10d1c83a 	sub	r8,r2,r3
  b5c2a0:	40bff804 	addi	r2,r8,-32
  b5c2a4:	d9800517 	ldw	r6,20(sp)
  b5c2a8:	d9c00617 	ldw	r7,24(sp)
  b5c2ac:	10000816 	blt	r2,zero,b5c2d0 <__fixdfsi+0xbc>
  b5c2b0:	3888d83a 	srl	r4,r7,r2
  b5c2b4:	d8800317 	ldw	r2,12(sp)
  b5c2b8:	2007883a 	mov	r3,r4
  b5c2bc:	103fe226 	beq	r2,zero,b5c248 <__fixdfsi+0x34>
  b5c2c0:	0107c83a 	sub	r3,zero,r4
  b5c2c4:	003fe006 	br	b5c248 <__fixdfsi+0x34>
  b5c2c8:	00e00034 	movhi	r3,32768
  b5c2cc:	003fde06 	br	b5c248 <__fixdfsi+0x34>
  b5c2d0:	39c7883a 	add	r3,r7,r7
  b5c2d4:	008007c4 	movi	r2,31
  b5c2d8:	1205c83a 	sub	r2,r2,r8
  b5c2dc:	1886983a 	sll	r3,r3,r2
  b5c2e0:	3208d83a 	srl	r4,r6,r8
  b5c2e4:	1908b03a 	or	r4,r3,r4
  b5c2e8:	003ff206 	br	b5c2b4 <__fixdfsi+0xa0>

00b5c2ec <__floatunsidf>:
  b5c2ec:	defff204 	addi	sp,sp,-56
  b5c2f0:	dfc00d15 	stw	ra,52(sp)
  b5c2f4:	ddc00c15 	stw	r23,48(sp)
  b5c2f8:	dd800b15 	stw	r22,44(sp)
  b5c2fc:	dd400a15 	stw	r21,40(sp)
  b5c300:	dd000915 	stw	r20,36(sp)
  b5c304:	dcc00815 	stw	r19,32(sp)
  b5c308:	dc800715 	stw	r18,28(sp)
  b5c30c:	dc400615 	stw	r17,24(sp)
  b5c310:	dc000515 	stw	r16,20(sp)
  b5c314:	d8000115 	stw	zero,4(sp)
  b5c318:	20000f1e 	bne	r4,zero,b5c358 <__floatunsidf+0x6c>
  b5c31c:	00800084 	movi	r2,2
  b5c320:	d8800015 	stw	r2,0(sp)
  b5c324:	d809883a 	mov	r4,sp
  b5c328:	0b536a00 	call	b536a0 <__pack_d>
  b5c32c:	dfc00d17 	ldw	ra,52(sp)
  b5c330:	ddc00c17 	ldw	r23,48(sp)
  b5c334:	dd800b17 	ldw	r22,44(sp)
  b5c338:	dd400a17 	ldw	r21,40(sp)
  b5c33c:	dd000917 	ldw	r20,36(sp)
  b5c340:	dcc00817 	ldw	r19,32(sp)
  b5c344:	dc800717 	ldw	r18,28(sp)
  b5c348:	dc400617 	ldw	r17,24(sp)
  b5c34c:	dc000517 	ldw	r16,20(sp)
  b5c350:	dec00e04 	addi	sp,sp,56
  b5c354:	f800283a 	ret
  b5c358:	008000c4 	movi	r2,3
  b5c35c:	00c00f04 	movi	r3,60
  b5c360:	002f883a 	mov	r23,zero
  b5c364:	202d883a 	mov	r22,r4
  b5c368:	d8800015 	stw	r2,0(sp)
  b5c36c:	d8c00215 	stw	r3,8(sp)
  b5c370:	d9000315 	stw	r4,12(sp)
  b5c374:	ddc00415 	stw	r23,16(sp)
  b5c378:	0b533240 	call	b53324 <__clzsi2>
  b5c37c:	12400744 	addi	r9,r2,29
  b5c380:	48000b16 	blt	r9,zero,b5c3b0 <__floatunsidf+0xc4>
  b5c384:	483fe726 	beq	r9,zero,b5c324 <__floatunsidf+0x38>
  b5c388:	10bfff44 	addi	r2,r2,-3
  b5c38c:	10002e16 	blt	r2,zero,b5c448 <__floatunsidf+0x15c>
  b5c390:	b0a2983a 	sll	r17,r22,r2
  b5c394:	0021883a 	mov	r16,zero
  b5c398:	d8800217 	ldw	r2,8(sp)
  b5c39c:	dc400415 	stw	r17,16(sp)
  b5c3a0:	dc000315 	stw	r16,12(sp)
  b5c3a4:	1245c83a 	sub	r2,r2,r9
  b5c3a8:	d8800215 	stw	r2,8(sp)
  b5c3ac:	003fdd06 	br	b5c324 <__floatunsidf+0x38>
  b5c3b0:	0255c83a 	sub	r10,zero,r9
  b5c3b4:	51bff804 	addi	r6,r10,-32
  b5c3b8:	30001b16 	blt	r6,zero,b5c428 <__floatunsidf+0x13c>
  b5c3bc:	b9a8d83a 	srl	r20,r23,r6
  b5c3c0:	002b883a 	mov	r21,zero
  b5c3c4:	000f883a 	mov	r7,zero
  b5c3c8:	01000044 	movi	r4,1
  b5c3cc:	0011883a 	mov	r8,zero
  b5c3d0:	30002516 	blt	r6,zero,b5c468 <__floatunsidf+0x17c>
  b5c3d4:	21a6983a 	sll	r19,r4,r6
  b5c3d8:	0025883a 	mov	r18,zero
  b5c3dc:	00bfffc4 	movi	r2,-1
  b5c3e0:	9089883a 	add	r4,r18,r2
  b5c3e4:	988b883a 	add	r5,r19,r2
  b5c3e8:	248d803a 	cmpltu	r6,r4,r18
  b5c3ec:	314b883a 	add	r5,r6,r5
  b5c3f0:	b104703a 	and	r2,r22,r4
  b5c3f4:	b946703a 	and	r3,r23,r5
  b5c3f8:	10c4b03a 	or	r2,r2,r3
  b5c3fc:	10000226 	beq	r2,zero,b5c408 <__floatunsidf+0x11c>
  b5c400:	01c00044 	movi	r7,1
  b5c404:	0011883a 	mov	r8,zero
  b5c408:	d9000217 	ldw	r4,8(sp)
  b5c40c:	a1c4b03a 	or	r2,r20,r7
  b5c410:	aa06b03a 	or	r3,r21,r8
  b5c414:	2249c83a 	sub	r4,r4,r9
  b5c418:	d8c00415 	stw	r3,16(sp)
  b5c41c:	d9000215 	stw	r4,8(sp)
  b5c420:	d8800315 	stw	r2,12(sp)
  b5c424:	003fbf06 	br	b5c324 <__floatunsidf+0x38>
  b5c428:	bdc7883a 	add	r3,r23,r23
  b5c42c:	008007c4 	movi	r2,31
  b5c430:	1285c83a 	sub	r2,r2,r10
  b5c434:	1886983a 	sll	r3,r3,r2
  b5c438:	b2a8d83a 	srl	r20,r22,r10
  b5c43c:	baaad83a 	srl	r21,r23,r10
  b5c440:	1d28b03a 	or	r20,r3,r20
  b5c444:	003fdf06 	br	b5c3c4 <__floatunsidf+0xd8>
  b5c448:	b006d07a 	srli	r3,r22,1
  b5c44c:	008007c4 	movi	r2,31
  b5c450:	1245c83a 	sub	r2,r2,r9
  b5c454:	1886d83a 	srl	r3,r3,r2
  b5c458:	ba62983a 	sll	r17,r23,r9
  b5c45c:	b260983a 	sll	r16,r22,r9
  b5c460:	1c62b03a 	or	r17,r3,r17
  b5c464:	003fcc06 	br	b5c398 <__floatunsidf+0xac>
  b5c468:	2006d07a 	srli	r3,r4,1
  b5c46c:	008007c4 	movi	r2,31
  b5c470:	1285c83a 	sub	r2,r2,r10
  b5c474:	18a6d83a 	srl	r19,r3,r2
  b5c478:	22a4983a 	sll	r18,r4,r10
  b5c47c:	003fd706 	br	b5c3dc <__floatunsidf+0xf0>

00b5c480 <udivmodsi4>:
  b5c480:	29001b2e 	bgeu	r5,r4,b5c4f0 <udivmodsi4+0x70>
  b5c484:	28001a16 	blt	r5,zero,b5c4f0 <udivmodsi4+0x70>
  b5c488:	00800044 	movi	r2,1
  b5c48c:	0007883a 	mov	r3,zero
  b5c490:	01c007c4 	movi	r7,31
  b5c494:	00000306 	br	b5c4a4 <udivmodsi4+0x24>
  b5c498:	19c01326 	beq	r3,r7,b5c4e8 <udivmodsi4+0x68>
  b5c49c:	18c00044 	addi	r3,r3,1
  b5c4a0:	28000416 	blt	r5,zero,b5c4b4 <udivmodsi4+0x34>
  b5c4a4:	294b883a 	add	r5,r5,r5
  b5c4a8:	1085883a 	add	r2,r2,r2
  b5c4ac:	293ffa36 	bltu	r5,r4,b5c498 <udivmodsi4+0x18>
  b5c4b0:	10000d26 	beq	r2,zero,b5c4e8 <udivmodsi4+0x68>
  b5c4b4:	0007883a 	mov	r3,zero
  b5c4b8:	21400236 	bltu	r4,r5,b5c4c4 <udivmodsi4+0x44>
  b5c4bc:	2149c83a 	sub	r4,r4,r5
  b5c4c0:	1886b03a 	or	r3,r3,r2
  b5c4c4:	1004d07a 	srli	r2,r2,1
  b5c4c8:	280ad07a 	srli	r5,r5,1
  b5c4cc:	103ffa1e 	bne	r2,zero,b5c4b8 <udivmodsi4+0x38>
  b5c4d0:	30000226 	beq	r6,zero,b5c4dc <udivmodsi4+0x5c>
  b5c4d4:	2005883a 	mov	r2,r4
  b5c4d8:	f800283a 	ret
  b5c4dc:	1809883a 	mov	r4,r3
  b5c4e0:	2005883a 	mov	r2,r4
  b5c4e4:	f800283a 	ret
  b5c4e8:	0007883a 	mov	r3,zero
  b5c4ec:	003ff806 	br	b5c4d0 <udivmodsi4+0x50>
  b5c4f0:	00800044 	movi	r2,1
  b5c4f4:	0007883a 	mov	r3,zero
  b5c4f8:	003fef06 	br	b5c4b8 <udivmodsi4+0x38>

00b5c4fc <__divsi3>:
  b5c4fc:	defffe04 	addi	sp,sp,-8
  b5c500:	dc000015 	stw	r16,0(sp)
  b5c504:	dfc00115 	stw	ra,4(sp)
  b5c508:	0021883a 	mov	r16,zero
  b5c50c:	20000c16 	blt	r4,zero,b5c540 <__divsi3+0x44>
  b5c510:	000d883a 	mov	r6,zero
  b5c514:	28000e16 	blt	r5,zero,b5c550 <__divsi3+0x54>
  b5c518:	0b5c4800 	call	b5c480 <udivmodsi4>
  b5c51c:	1007883a 	mov	r3,r2
  b5c520:	8005003a 	cmpeq	r2,r16,zero
  b5c524:	1000011e 	bne	r2,zero,b5c52c <__divsi3+0x30>
  b5c528:	00c7c83a 	sub	r3,zero,r3
  b5c52c:	1805883a 	mov	r2,r3
  b5c530:	dfc00117 	ldw	ra,4(sp)
  b5c534:	dc000017 	ldw	r16,0(sp)
  b5c538:	dec00204 	addi	sp,sp,8
  b5c53c:	f800283a 	ret
  b5c540:	0109c83a 	sub	r4,zero,r4
  b5c544:	04000044 	movi	r16,1
  b5c548:	000d883a 	mov	r6,zero
  b5c54c:	283ff20e 	bge	r5,zero,b5c518 <__divsi3+0x1c>
  b5c550:	014bc83a 	sub	r5,zero,r5
  b5c554:	8021003a 	cmpeq	r16,r16,zero
  b5c558:	003fef06 	br	b5c518 <__divsi3+0x1c>

00b5c55c <__modsi3>:
  b5c55c:	deffff04 	addi	sp,sp,-4
  b5c560:	dfc00015 	stw	ra,0(sp)
  b5c564:	01800044 	movi	r6,1
  b5c568:	2807883a 	mov	r3,r5
  b5c56c:	20000416 	blt	r4,zero,b5c580 <__modsi3+0x24>
  b5c570:	28000c16 	blt	r5,zero,b5c5a4 <__modsi3+0x48>
  b5c574:	dfc00017 	ldw	ra,0(sp)
  b5c578:	dec00104 	addi	sp,sp,4
  b5c57c:	0b5c4801 	jmpi	b5c480 <udivmodsi4>
  b5c580:	0109c83a 	sub	r4,zero,r4
  b5c584:	28000b16 	blt	r5,zero,b5c5b4 <__modsi3+0x58>
  b5c588:	180b883a 	mov	r5,r3
  b5c58c:	01800044 	movi	r6,1
  b5c590:	0b5c4800 	call	b5c480 <udivmodsi4>
  b5c594:	0085c83a 	sub	r2,zero,r2
  b5c598:	dfc00017 	ldw	ra,0(sp)
  b5c59c:	dec00104 	addi	sp,sp,4
  b5c5a0:	f800283a 	ret
  b5c5a4:	014bc83a 	sub	r5,zero,r5
  b5c5a8:	dfc00017 	ldw	ra,0(sp)
  b5c5ac:	dec00104 	addi	sp,sp,4
  b5c5b0:	0b5c4801 	jmpi	b5c480 <udivmodsi4>
  b5c5b4:	0147c83a 	sub	r3,zero,r5
  b5c5b8:	003ff306 	br	b5c588 <__modsi3+0x2c>

00b5c5bc <__udivsi3>:
  b5c5bc:	000d883a 	mov	r6,zero
  b5c5c0:	0b5c4801 	jmpi	b5c480 <udivmodsi4>

00b5c5c4 <__umodsi3>:
  b5c5c4:	01800044 	movi	r6,1
  b5c5c8:	0b5c4801 	jmpi	b5c480 <udivmodsi4>

00b5c5cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  b5c5cc:	defff804 	addi	sp,sp,-32
  b5c5d0:	dfc00715 	stw	ra,28(sp)
  b5c5d4:	df000615 	stw	fp,24(sp)
  b5c5d8:	df000604 	addi	fp,sp,24
  b5c5dc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  b5c5e0:	e0bffc17 	ldw	r2,-16(fp)
  b5c5e4:	1004803a 	cmplt	r2,r2,zero
  b5c5e8:	1000081e 	bne	r2,zero,b5c60c <close+0x40>
  b5c5ec:	e0bffc17 	ldw	r2,-16(fp)
  b5c5f0:	10800324 	muli	r2,r2,12
  b5c5f4:	1007883a 	mov	r3,r2
  b5c5f8:	00802db4 	movhi	r2,182
  b5c5fc:	10872804 	addi	r2,r2,7328
  b5c600:	1887883a 	add	r3,r3,r2
  b5c604:	e0ffff15 	stw	r3,-4(fp)
  b5c608:	00000106 	br	b5c610 <close+0x44>
  b5c60c:	e03fff15 	stw	zero,-4(fp)
  b5c610:	e0bfff17 	ldw	r2,-4(fp)
  b5c614:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  b5c618:	e0bffb17 	ldw	r2,-20(fp)
  b5c61c:	1005003a 	cmpeq	r2,r2,zero
  b5c620:	10001d1e 	bne	r2,zero,b5c698 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  b5c624:	e0bffb17 	ldw	r2,-20(fp)
  b5c628:	10800017 	ldw	r2,0(r2)
  b5c62c:	10800417 	ldw	r2,16(r2)
  b5c630:	1005003a 	cmpeq	r2,r2,zero
  b5c634:	1000071e 	bne	r2,zero,b5c654 <close+0x88>
  b5c638:	e0bffb17 	ldw	r2,-20(fp)
  b5c63c:	10800017 	ldw	r2,0(r2)
  b5c640:	10800417 	ldw	r2,16(r2)
  b5c644:	e13ffb17 	ldw	r4,-20(fp)
  b5c648:	103ee83a 	callr	r2
  b5c64c:	e0bffe15 	stw	r2,-8(fp)
  b5c650:	00000106 	br	b5c658 <close+0x8c>
  b5c654:	e03ffe15 	stw	zero,-8(fp)
  b5c658:	e0bffe17 	ldw	r2,-8(fp)
  b5c65c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  b5c660:	e13ffc17 	ldw	r4,-16(fp)
  b5c664:	0b5ce100 	call	b5ce10 <alt_release_fd>
    if (rval < 0)
  b5c668:	e0bffa17 	ldw	r2,-24(fp)
  b5c66c:	1004403a 	cmpge	r2,r2,zero
  b5c670:	1000071e 	bne	r2,zero,b5c690 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  b5c674:	0b5c6c80 	call	b5c6c8 <alt_get_errno>
  b5c678:	e0fffa17 	ldw	r3,-24(fp)
  b5c67c:	00c7c83a 	sub	r3,zero,r3
  b5c680:	10c00015 	stw	r3,0(r2)
      return -1;
  b5c684:	00bfffc4 	movi	r2,-1
  b5c688:	e0bffd15 	stw	r2,-12(fp)
  b5c68c:	00000806 	br	b5c6b0 <close+0xe4>
    }
    return 0;
  b5c690:	e03ffd15 	stw	zero,-12(fp)
  b5c694:	00000606 	br	b5c6b0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  b5c698:	0b5c6c80 	call	b5c6c8 <alt_get_errno>
  b5c69c:	1007883a 	mov	r3,r2
  b5c6a0:	00801444 	movi	r2,81
  b5c6a4:	18800015 	stw	r2,0(r3)
    return -1;
  b5c6a8:	00bfffc4 	movi	r2,-1
  b5c6ac:	e0bffd15 	stw	r2,-12(fp)
  b5c6b0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  b5c6b4:	e037883a 	mov	sp,fp
  b5c6b8:	dfc00117 	ldw	ra,4(sp)
  b5c6bc:	df000017 	ldw	fp,0(sp)
  b5c6c0:	dec00204 	addi	sp,sp,8
  b5c6c4:	f800283a 	ret

00b5c6c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  b5c6c8:	defffd04 	addi	sp,sp,-12
  b5c6cc:	dfc00215 	stw	ra,8(sp)
  b5c6d0:	df000115 	stw	fp,4(sp)
  b5c6d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  b5c6d8:	00802db4 	movhi	r2,182
  b5c6dc:	108c0404 	addi	r2,r2,12304
  b5c6e0:	10800017 	ldw	r2,0(r2)
  b5c6e4:	1005003a 	cmpeq	r2,r2,zero
  b5c6e8:	1000061e 	bne	r2,zero,b5c704 <alt_get_errno+0x3c>
  b5c6ec:	00802db4 	movhi	r2,182
  b5c6f0:	108c0404 	addi	r2,r2,12304
  b5c6f4:	10800017 	ldw	r2,0(r2)
  b5c6f8:	103ee83a 	callr	r2
  b5c6fc:	e0bfff15 	stw	r2,-4(fp)
  b5c700:	00000306 	br	b5c710 <alt_get_errno+0x48>
  b5c704:	00802db4 	movhi	r2,182
  b5c708:	10930a04 	addi	r2,r2,19496
  b5c70c:	e0bfff15 	stw	r2,-4(fp)
  b5c710:	e0bfff17 	ldw	r2,-4(fp)
}
  b5c714:	e037883a 	mov	sp,fp
  b5c718:	dfc00117 	ldw	ra,4(sp)
  b5c71c:	df000017 	ldw	fp,0(sp)
  b5c720:	dec00204 	addi	sp,sp,8
  b5c724:	f800283a 	ret

00b5c728 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  b5c728:	defffc04 	addi	sp,sp,-16
  b5c72c:	df000315 	stw	fp,12(sp)
  b5c730:	df000304 	addi	fp,sp,12
  b5c734:	e13ffd15 	stw	r4,-12(fp)
  b5c738:	e17ffe15 	stw	r5,-8(fp)
  b5c73c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  b5c740:	e0bfff17 	ldw	r2,-4(fp)
}
  b5c744:	e037883a 	mov	sp,fp
  b5c748:	df000017 	ldw	fp,0(sp)
  b5c74c:	dec00104 	addi	sp,sp,4
  b5c750:	f800283a 	ret

00b5c754 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  b5c754:	defff904 	addi	sp,sp,-28
  b5c758:	dfc00615 	stw	ra,24(sp)
  b5c75c:	df000515 	stw	fp,20(sp)
  b5c760:	df000504 	addi	fp,sp,20
  b5c764:	e13ffc15 	stw	r4,-16(fp)
  b5c768:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  b5c76c:	e0bffc17 	ldw	r2,-16(fp)
  b5c770:	1004803a 	cmplt	r2,r2,zero
  b5c774:	1000081e 	bne	r2,zero,b5c798 <fstat+0x44>
  b5c778:	e0bffc17 	ldw	r2,-16(fp)
  b5c77c:	10800324 	muli	r2,r2,12
  b5c780:	1007883a 	mov	r3,r2
  b5c784:	00802db4 	movhi	r2,182
  b5c788:	10872804 	addi	r2,r2,7328
  b5c78c:	1887883a 	add	r3,r3,r2
  b5c790:	e0ffff15 	stw	r3,-4(fp)
  b5c794:	00000106 	br	b5c79c <fstat+0x48>
  b5c798:	e03fff15 	stw	zero,-4(fp)
  b5c79c:	e0bfff17 	ldw	r2,-4(fp)
  b5c7a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  b5c7a4:	e0bffb17 	ldw	r2,-20(fp)
  b5c7a8:	1005003a 	cmpeq	r2,r2,zero
  b5c7ac:	1000121e 	bne	r2,zero,b5c7f8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  b5c7b0:	e0bffb17 	ldw	r2,-20(fp)
  b5c7b4:	10800017 	ldw	r2,0(r2)
  b5c7b8:	10800817 	ldw	r2,32(r2)
  b5c7bc:	1005003a 	cmpeq	r2,r2,zero
  b5c7c0:	1000081e 	bne	r2,zero,b5c7e4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  b5c7c4:	e0bffb17 	ldw	r2,-20(fp)
  b5c7c8:	10800017 	ldw	r2,0(r2)
  b5c7cc:	10800817 	ldw	r2,32(r2)
  b5c7d0:	e13ffb17 	ldw	r4,-20(fp)
  b5c7d4:	e17ffd17 	ldw	r5,-12(fp)
  b5c7d8:	103ee83a 	callr	r2
  b5c7dc:	e0bffe15 	stw	r2,-8(fp)
  b5c7e0:	00000b06 	br	b5c810 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  b5c7e4:	e0fffd17 	ldw	r3,-12(fp)
  b5c7e8:	00880004 	movi	r2,8192
  b5c7ec:	18800115 	stw	r2,4(r3)
      return 0;
  b5c7f0:	e03ffe15 	stw	zero,-8(fp)
  b5c7f4:	00000606 	br	b5c810 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  b5c7f8:	0b5c8280 	call	b5c828 <alt_get_errno>
  b5c7fc:	1007883a 	mov	r3,r2
  b5c800:	00801444 	movi	r2,81
  b5c804:	18800015 	stw	r2,0(r3)
    return -1;
  b5c808:	00bfffc4 	movi	r2,-1
  b5c80c:	e0bffe15 	stw	r2,-8(fp)
  b5c810:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  b5c814:	e037883a 	mov	sp,fp
  b5c818:	dfc00117 	ldw	ra,4(sp)
  b5c81c:	df000017 	ldw	fp,0(sp)
  b5c820:	dec00204 	addi	sp,sp,8
  b5c824:	f800283a 	ret

00b5c828 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  b5c828:	defffd04 	addi	sp,sp,-12
  b5c82c:	dfc00215 	stw	ra,8(sp)
  b5c830:	df000115 	stw	fp,4(sp)
  b5c834:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  b5c838:	00802db4 	movhi	r2,182
  b5c83c:	108c0404 	addi	r2,r2,12304
  b5c840:	10800017 	ldw	r2,0(r2)
  b5c844:	1005003a 	cmpeq	r2,r2,zero
  b5c848:	1000061e 	bne	r2,zero,b5c864 <alt_get_errno+0x3c>
  b5c84c:	00802db4 	movhi	r2,182
  b5c850:	108c0404 	addi	r2,r2,12304
  b5c854:	10800017 	ldw	r2,0(r2)
  b5c858:	103ee83a 	callr	r2
  b5c85c:	e0bfff15 	stw	r2,-4(fp)
  b5c860:	00000306 	br	b5c870 <alt_get_errno+0x48>
  b5c864:	00802db4 	movhi	r2,182
  b5c868:	10930a04 	addi	r2,r2,19496
  b5c86c:	e0bfff15 	stw	r2,-4(fp)
  b5c870:	e0bfff17 	ldw	r2,-4(fp)
}
  b5c874:	e037883a 	mov	sp,fp
  b5c878:	dfc00117 	ldw	ra,4(sp)
  b5c87c:	df000017 	ldw	fp,0(sp)
  b5c880:	dec00204 	addi	sp,sp,8
  b5c884:	f800283a 	ret

00b5c888 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  b5c888:	deffeb04 	addi	sp,sp,-84
  b5c88c:	dfc01415 	stw	ra,80(sp)
  b5c890:	df001315 	stw	fp,76(sp)
  b5c894:	df001304 	addi	fp,sp,76
  b5c898:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  b5c89c:	e0bffd17 	ldw	r2,-12(fp)
  b5c8a0:	1004803a 	cmplt	r2,r2,zero
  b5c8a4:	1000081e 	bne	r2,zero,b5c8c8 <isatty+0x40>
  b5c8a8:	e0bffd17 	ldw	r2,-12(fp)
  b5c8ac:	10800324 	muli	r2,r2,12
  b5c8b0:	1007883a 	mov	r3,r2
  b5c8b4:	00802db4 	movhi	r2,182
  b5c8b8:	10872804 	addi	r2,r2,7328
  b5c8bc:	1887883a 	add	r3,r3,r2
  b5c8c0:	e0ffff15 	stw	r3,-4(fp)
  b5c8c4:	00000106 	br	b5c8cc <isatty+0x44>
  b5c8c8:	e03fff15 	stw	zero,-4(fp)
  b5c8cc:	e0bfff17 	ldw	r2,-4(fp)
  b5c8d0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  b5c8d4:	e0bfed17 	ldw	r2,-76(fp)
  b5c8d8:	1005003a 	cmpeq	r2,r2,zero
  b5c8dc:	10000f1e 	bne	r2,zero,b5c91c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  b5c8e0:	e0bfed17 	ldw	r2,-76(fp)
  b5c8e4:	10800017 	ldw	r2,0(r2)
  b5c8e8:	10800817 	ldw	r2,32(r2)
  b5c8ec:	1004c03a 	cmpne	r2,r2,zero
  b5c8f0:	1000031e 	bne	r2,zero,b5c900 <isatty+0x78>
    {
      return 1;
  b5c8f4:	00800044 	movi	r2,1
  b5c8f8:	e0bffe15 	stw	r2,-8(fp)
  b5c8fc:	00000c06 	br	b5c930 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  b5c900:	e17fee04 	addi	r5,fp,-72
  b5c904:	e13ffd17 	ldw	r4,-12(fp)
  b5c908:	0b5c7540 	call	b5c754 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  b5c90c:	e0bfef17 	ldw	r2,-68(fp)
  b5c910:	10880020 	cmpeqi	r2,r2,8192
  b5c914:	e0bffe15 	stw	r2,-8(fp)
  b5c918:	00000506 	br	b5c930 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  b5c91c:	0b5c9480 	call	b5c948 <alt_get_errno>
  b5c920:	1007883a 	mov	r3,r2
  b5c924:	00801444 	movi	r2,81
  b5c928:	18800015 	stw	r2,0(r3)
    return 0;
  b5c92c:	e03ffe15 	stw	zero,-8(fp)
  b5c930:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  b5c934:	e037883a 	mov	sp,fp
  b5c938:	dfc00117 	ldw	ra,4(sp)
  b5c93c:	df000017 	ldw	fp,0(sp)
  b5c940:	dec00204 	addi	sp,sp,8
  b5c944:	f800283a 	ret

00b5c948 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  b5c948:	defffd04 	addi	sp,sp,-12
  b5c94c:	dfc00215 	stw	ra,8(sp)
  b5c950:	df000115 	stw	fp,4(sp)
  b5c954:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  b5c958:	00802db4 	movhi	r2,182
  b5c95c:	108c0404 	addi	r2,r2,12304
  b5c960:	10800017 	ldw	r2,0(r2)
  b5c964:	1005003a 	cmpeq	r2,r2,zero
  b5c968:	1000061e 	bne	r2,zero,b5c984 <alt_get_errno+0x3c>
  b5c96c:	00802db4 	movhi	r2,182
  b5c970:	108c0404 	addi	r2,r2,12304
  b5c974:	10800017 	ldw	r2,0(r2)
  b5c978:	103ee83a 	callr	r2
  b5c97c:	e0bfff15 	stw	r2,-4(fp)
  b5c980:	00000306 	br	b5c990 <alt_get_errno+0x48>
  b5c984:	00802db4 	movhi	r2,182
  b5c988:	10930a04 	addi	r2,r2,19496
  b5c98c:	e0bfff15 	stw	r2,-4(fp)
  b5c990:	e0bfff17 	ldw	r2,-4(fp)
}
  b5c994:	e037883a 	mov	sp,fp
  b5c998:	dfc00117 	ldw	ra,4(sp)
  b5c99c:	df000017 	ldw	fp,0(sp)
  b5c9a0:	dec00204 	addi	sp,sp,8
  b5c9a4:	f800283a 	ret

00b5c9a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  b5c9a8:	defffe04 	addi	sp,sp,-8
  b5c9ac:	dfc00115 	stw	ra,4(sp)
  b5c9b0:	df000015 	stw	fp,0(sp)
  b5c9b4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  b5c9b8:	01002db4 	movhi	r4,182
  b5c9bc:	210c0d04 	addi	r4,r4,12340
  b5c9c0:	01402db4 	movhi	r5,182
  b5c9c4:	29451904 	addi	r5,r5,5220
  b5c9c8:	01802db4 	movhi	r6,182
  b5c9cc:	318c0d04 	addi	r6,r6,12340
  b5c9d0:	0b5ca280 	call	b5ca28 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  b5c9d4:	01002d74 	movhi	r4,181
  b5c9d8:	21000804 	addi	r4,r4,32
  b5c9dc:	01402d74 	movhi	r5,181
  b5c9e0:	29400804 	addi	r5,r5,32
  b5c9e4:	01802d74 	movhi	r6,181
  b5c9e8:	31806d04 	addi	r6,r6,436
  b5c9ec:	0b5ca280 	call	b5ca28 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  b5c9f0:	01002db4 	movhi	r4,182
  b5c9f4:	2103df04 	addi	r4,r4,3964
  b5c9f8:	01402db4 	movhi	r5,182
  b5c9fc:	2943df04 	addi	r5,r5,3964
  b5ca00:	01802db4 	movhi	r6,182
  b5ca04:	31851904 	addi	r6,r6,5220
  b5ca08:	0b5ca280 	call	b5ca28 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  b5ca0c:	0b5fd280 	call	b5fd28 <alt_dcache_flush_all>
  alt_icache_flush_all();
  b5ca10:	0b5ffdc0 	call	b5ffdc <alt_icache_flush_all>
}
  b5ca14:	e037883a 	mov	sp,fp
  b5ca18:	dfc00117 	ldw	ra,4(sp)
  b5ca1c:	df000017 	ldw	fp,0(sp)
  b5ca20:	dec00204 	addi	sp,sp,8
  b5ca24:	f800283a 	ret

00b5ca28 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  b5ca28:	defffc04 	addi	sp,sp,-16
  b5ca2c:	df000315 	stw	fp,12(sp)
  b5ca30:	df000304 	addi	fp,sp,12
  b5ca34:	e13ffd15 	stw	r4,-12(fp)
  b5ca38:	e17ffe15 	stw	r5,-8(fp)
  b5ca3c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  b5ca40:	e0fffe17 	ldw	r3,-8(fp)
  b5ca44:	e0bffd17 	ldw	r2,-12(fp)
  b5ca48:	18800e26 	beq	r3,r2,b5ca84 <alt_load_section+0x5c>
  {
    while( to != end )
  b5ca4c:	00000a06 	br	b5ca78 <alt_load_section+0x50>
    {
      *to++ = *from++;
  b5ca50:	e0bffd17 	ldw	r2,-12(fp)
  b5ca54:	10c00017 	ldw	r3,0(r2)
  b5ca58:	e0bffe17 	ldw	r2,-8(fp)
  b5ca5c:	10c00015 	stw	r3,0(r2)
  b5ca60:	e0bffe17 	ldw	r2,-8(fp)
  b5ca64:	10800104 	addi	r2,r2,4
  b5ca68:	e0bffe15 	stw	r2,-8(fp)
  b5ca6c:	e0bffd17 	ldw	r2,-12(fp)
  b5ca70:	10800104 	addi	r2,r2,4
  b5ca74:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  b5ca78:	e0fffe17 	ldw	r3,-8(fp)
  b5ca7c:	e0bfff17 	ldw	r2,-4(fp)
  b5ca80:	18bff31e 	bne	r3,r2,b5ca50 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  b5ca84:	e037883a 	mov	sp,fp
  b5ca88:	df000017 	ldw	fp,0(sp)
  b5ca8c:	dec00104 	addi	sp,sp,4
  b5ca90:	f800283a 	ret

00b5ca94 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  b5ca94:	defff804 	addi	sp,sp,-32
  b5ca98:	dfc00715 	stw	ra,28(sp)
  b5ca9c:	df000615 	stw	fp,24(sp)
  b5caa0:	df000604 	addi	fp,sp,24
  b5caa4:	e13ffc15 	stw	r4,-16(fp)
  b5caa8:	e17ffd15 	stw	r5,-12(fp)
  b5caac:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  b5cab0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  b5cab4:	e0bffc17 	ldw	r2,-16(fp)
  b5cab8:	1004803a 	cmplt	r2,r2,zero
  b5cabc:	1000081e 	bne	r2,zero,b5cae0 <lseek+0x4c>
  b5cac0:	e0bffc17 	ldw	r2,-16(fp)
  b5cac4:	10800324 	muli	r2,r2,12
  b5cac8:	1007883a 	mov	r3,r2
  b5cacc:	00802db4 	movhi	r2,182
  b5cad0:	10872804 	addi	r2,r2,7328
  b5cad4:	1887883a 	add	r3,r3,r2
  b5cad8:	e0ffff15 	stw	r3,-4(fp)
  b5cadc:	00000106 	br	b5cae4 <lseek+0x50>
  b5cae0:	e03fff15 	stw	zero,-4(fp)
  b5cae4:	e0bfff17 	ldw	r2,-4(fp)
  b5cae8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  b5caec:	e0bffb17 	ldw	r2,-20(fp)
  b5caf0:	1005003a 	cmpeq	r2,r2,zero
  b5caf4:	1000111e 	bne	r2,zero,b5cb3c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  b5caf8:	e0bffb17 	ldw	r2,-20(fp)
  b5cafc:	10800017 	ldw	r2,0(r2)
  b5cb00:	10800717 	ldw	r2,28(r2)
  b5cb04:	1005003a 	cmpeq	r2,r2,zero
  b5cb08:	1000091e 	bne	r2,zero,b5cb30 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  b5cb0c:	e0bffb17 	ldw	r2,-20(fp)
  b5cb10:	10800017 	ldw	r2,0(r2)
  b5cb14:	10800717 	ldw	r2,28(r2)
  b5cb18:	e13ffb17 	ldw	r4,-20(fp)
  b5cb1c:	e17ffd17 	ldw	r5,-12(fp)
  b5cb20:	e1bffe17 	ldw	r6,-8(fp)
  b5cb24:	103ee83a 	callr	r2
  b5cb28:	e0bffa15 	stw	r2,-24(fp)
  b5cb2c:	00000506 	br	b5cb44 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  b5cb30:	00bfde84 	movi	r2,-134
  b5cb34:	e0bffa15 	stw	r2,-24(fp)
  b5cb38:	00000206 	br	b5cb44 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  b5cb3c:	00bfebc4 	movi	r2,-81
  b5cb40:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  b5cb44:	e0bffa17 	ldw	r2,-24(fp)
  b5cb48:	1004403a 	cmpge	r2,r2,zero
  b5cb4c:	1000071e 	bne	r2,zero,b5cb6c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  b5cb50:	0b5cb840 	call	b5cb84 <alt_get_errno>
  b5cb54:	1007883a 	mov	r3,r2
  b5cb58:	e0bffa17 	ldw	r2,-24(fp)
  b5cb5c:	0085c83a 	sub	r2,zero,r2
  b5cb60:	18800015 	stw	r2,0(r3)
    rc = -1;
  b5cb64:	00bfffc4 	movi	r2,-1
  b5cb68:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  b5cb6c:	e0bffa17 	ldw	r2,-24(fp)
}
  b5cb70:	e037883a 	mov	sp,fp
  b5cb74:	dfc00117 	ldw	ra,4(sp)
  b5cb78:	df000017 	ldw	fp,0(sp)
  b5cb7c:	dec00204 	addi	sp,sp,8
  b5cb80:	f800283a 	ret

00b5cb84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  b5cb84:	defffd04 	addi	sp,sp,-12
  b5cb88:	dfc00215 	stw	ra,8(sp)
  b5cb8c:	df000115 	stw	fp,4(sp)
  b5cb90:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  b5cb94:	00802db4 	movhi	r2,182
  b5cb98:	108c0404 	addi	r2,r2,12304
  b5cb9c:	10800017 	ldw	r2,0(r2)
  b5cba0:	1005003a 	cmpeq	r2,r2,zero
  b5cba4:	1000061e 	bne	r2,zero,b5cbc0 <alt_get_errno+0x3c>
  b5cba8:	00802db4 	movhi	r2,182
  b5cbac:	108c0404 	addi	r2,r2,12304
  b5cbb0:	10800017 	ldw	r2,0(r2)
  b5cbb4:	103ee83a 	callr	r2
  b5cbb8:	e0bfff15 	stw	r2,-4(fp)
  b5cbbc:	00000306 	br	b5cbcc <alt_get_errno+0x48>
  b5cbc0:	00802db4 	movhi	r2,182
  b5cbc4:	10930a04 	addi	r2,r2,19496
  b5cbc8:	e0bfff15 	stw	r2,-4(fp)
  b5cbcc:	e0bfff17 	ldw	r2,-4(fp)
}
  b5cbd0:	e037883a 	mov	sp,fp
  b5cbd4:	dfc00117 	ldw	ra,4(sp)
  b5cbd8:	df000017 	ldw	fp,0(sp)
  b5cbdc:	dec00204 	addi	sp,sp,8
  b5cbe0:	f800283a 	ret

00b5cbe4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  b5cbe4:	defffd04 	addi	sp,sp,-12
  b5cbe8:	dfc00215 	stw	ra,8(sp)
  b5cbec:	df000115 	stw	fp,4(sp)
  b5cbf0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  b5cbf4:	0009883a 	mov	r4,zero
  b5cbf8:	0b5d0ac0 	call	b5d0ac <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  b5cbfc:	0b5d0e00 	call	b5d0e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  b5cc00:	01002db4 	movhi	r4,182
  b5cc04:	2104c704 	addi	r4,r4,4892
  b5cc08:	01402db4 	movhi	r5,182
  b5cc0c:	2944c704 	addi	r5,r5,4892
  b5cc10:	01802db4 	movhi	r6,182
  b5cc14:	3184c704 	addi	r6,r6,4892
  b5cc18:	0b6039c0 	call	b6039c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  b5cc1c:	0b5fe800 	call	b5fe80 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  b5cc20:	01002db4 	movhi	r4,182
  b5cc24:	213fb904 	addi	r4,r4,-284
  b5cc28:	0b60b040 	call	b60b04 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  b5cc2c:	d1271a17 	ldw	r4,-25496(gp)
  b5cc30:	d1671b17 	ldw	r5,-25492(gp)
  b5cc34:	d1a71c17 	ldw	r6,-25488(gp)
  b5cc38:	0b50c000 	call	b50c00 <main>
  b5cc3c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  b5cc40:	01000044 	movi	r4,1
  b5cc44:	0b5c5cc0 	call	b5c5cc <close>
  exit (result);
  b5cc48:	e13fff17 	ldw	r4,-4(fp)
  b5cc4c:	0b60b180 	call	b60b18 <exit>

00b5cc50 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  b5cc50:	defffe04 	addi	sp,sp,-8
  b5cc54:	df000115 	stw	fp,4(sp)
  b5cc58:	df000104 	addi	fp,sp,4
  b5cc5c:	e13fff15 	stw	r4,-4(fp)
}
  b5cc60:	e037883a 	mov	sp,fp
  b5cc64:	df000017 	ldw	fp,0(sp)
  b5cc68:	dec00104 	addi	sp,sp,4
  b5cc6c:	f800283a 	ret

00b5cc70 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  b5cc70:	defffe04 	addi	sp,sp,-8
  b5cc74:	df000115 	stw	fp,4(sp)
  b5cc78:	df000104 	addi	fp,sp,4
  b5cc7c:	e13fff15 	stw	r4,-4(fp)
}
  b5cc80:	e037883a 	mov	sp,fp
  b5cc84:	df000017 	ldw	fp,0(sp)
  b5cc88:	dec00104 	addi	sp,sp,4
  b5cc8c:	f800283a 	ret

00b5cc90 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  b5cc90:	defff704 	addi	sp,sp,-36
  b5cc94:	dfc00815 	stw	ra,32(sp)
  b5cc98:	df000715 	stw	fp,28(sp)
  b5cc9c:	df000704 	addi	fp,sp,28
  b5cca0:	e13ffb15 	stw	r4,-20(fp)
  b5cca4:	e17ffc15 	stw	r5,-16(fp)
  b5cca8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  b5ccac:	e0bffb17 	ldw	r2,-20(fp)
  b5ccb0:	1004803a 	cmplt	r2,r2,zero
  b5ccb4:	1000081e 	bne	r2,zero,b5ccd8 <read+0x48>
  b5ccb8:	e0bffb17 	ldw	r2,-20(fp)
  b5ccbc:	10800324 	muli	r2,r2,12
  b5ccc0:	1007883a 	mov	r3,r2
  b5ccc4:	00802db4 	movhi	r2,182
  b5ccc8:	10872804 	addi	r2,r2,7328
  b5cccc:	1887883a 	add	r3,r3,r2
  b5ccd0:	e0ffff15 	stw	r3,-4(fp)
  b5ccd4:	00000106 	br	b5ccdc <read+0x4c>
  b5ccd8:	e03fff15 	stw	zero,-4(fp)
  b5ccdc:	e0bfff17 	ldw	r2,-4(fp)
  b5cce0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  b5cce4:	e0bffa17 	ldw	r2,-24(fp)
  b5cce8:	1005003a 	cmpeq	r2,r2,zero
  b5ccec:	1000241e 	bne	r2,zero,b5cd80 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  b5ccf0:	e0bffa17 	ldw	r2,-24(fp)
  b5ccf4:	10800217 	ldw	r2,8(r2)
  b5ccf8:	108000cc 	andi	r2,r2,3
  b5ccfc:	10800060 	cmpeqi	r2,r2,1
  b5cd00:	10001a1e 	bne	r2,zero,b5cd6c <read+0xdc>
  b5cd04:	e0bffa17 	ldw	r2,-24(fp)
  b5cd08:	10800017 	ldw	r2,0(r2)
  b5cd0c:	10800517 	ldw	r2,20(r2)
  b5cd10:	1005003a 	cmpeq	r2,r2,zero
  b5cd14:	1000151e 	bne	r2,zero,b5cd6c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  b5cd18:	e0bffa17 	ldw	r2,-24(fp)
  b5cd1c:	10800017 	ldw	r2,0(r2)
  b5cd20:	10800517 	ldw	r2,20(r2)
  b5cd24:	e17ffc17 	ldw	r5,-16(fp)
  b5cd28:	e1bffd17 	ldw	r6,-12(fp)
  b5cd2c:	e13ffa17 	ldw	r4,-24(fp)
  b5cd30:	103ee83a 	callr	r2
  b5cd34:	e0bff915 	stw	r2,-28(fp)
  b5cd38:	e0bff917 	ldw	r2,-28(fp)
  b5cd3c:	1004403a 	cmpge	r2,r2,zero
  b5cd40:	1000071e 	bne	r2,zero,b5cd60 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  b5cd44:	0b5cdb00 	call	b5cdb0 <alt_get_errno>
  b5cd48:	e0fff917 	ldw	r3,-28(fp)
  b5cd4c:	00c7c83a 	sub	r3,zero,r3
  b5cd50:	10c00015 	stw	r3,0(r2)
          return -1;
  b5cd54:	00bfffc4 	movi	r2,-1
  b5cd58:	e0bffe15 	stw	r2,-8(fp)
  b5cd5c:	00000e06 	br	b5cd98 <read+0x108>
        }
        return rval;
  b5cd60:	e0bff917 	ldw	r2,-28(fp)
  b5cd64:	e0bffe15 	stw	r2,-8(fp)
  b5cd68:	00000b06 	br	b5cd98 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  b5cd6c:	0b5cdb00 	call	b5cdb0 <alt_get_errno>
  b5cd70:	1007883a 	mov	r3,r2
  b5cd74:	00800344 	movi	r2,13
  b5cd78:	18800015 	stw	r2,0(r3)
  b5cd7c:	00000406 	br	b5cd90 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  b5cd80:	0b5cdb00 	call	b5cdb0 <alt_get_errno>
  b5cd84:	1007883a 	mov	r3,r2
  b5cd88:	00801444 	movi	r2,81
  b5cd8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  b5cd90:	00bfffc4 	movi	r2,-1
  b5cd94:	e0bffe15 	stw	r2,-8(fp)
  b5cd98:	e0bffe17 	ldw	r2,-8(fp)
}
  b5cd9c:	e037883a 	mov	sp,fp
  b5cda0:	dfc00117 	ldw	ra,4(sp)
  b5cda4:	df000017 	ldw	fp,0(sp)
  b5cda8:	dec00204 	addi	sp,sp,8
  b5cdac:	f800283a 	ret

00b5cdb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  b5cdb0:	defffd04 	addi	sp,sp,-12
  b5cdb4:	dfc00215 	stw	ra,8(sp)
  b5cdb8:	df000115 	stw	fp,4(sp)
  b5cdbc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  b5cdc0:	00802db4 	movhi	r2,182
  b5cdc4:	108c0404 	addi	r2,r2,12304
  b5cdc8:	10800017 	ldw	r2,0(r2)
  b5cdcc:	1005003a 	cmpeq	r2,r2,zero
  b5cdd0:	1000061e 	bne	r2,zero,b5cdec <alt_get_errno+0x3c>
  b5cdd4:	00802db4 	movhi	r2,182
  b5cdd8:	108c0404 	addi	r2,r2,12304
  b5cddc:	10800017 	ldw	r2,0(r2)
  b5cde0:	103ee83a 	callr	r2
  b5cde4:	e0bfff15 	stw	r2,-4(fp)
  b5cde8:	00000306 	br	b5cdf8 <alt_get_errno+0x48>
  b5cdec:	00802db4 	movhi	r2,182
  b5cdf0:	10930a04 	addi	r2,r2,19496
  b5cdf4:	e0bfff15 	stw	r2,-4(fp)
  b5cdf8:	e0bfff17 	ldw	r2,-4(fp)
}
  b5cdfc:	e037883a 	mov	sp,fp
  b5ce00:	dfc00117 	ldw	ra,4(sp)
  b5ce04:	df000017 	ldw	fp,0(sp)
  b5ce08:	dec00204 	addi	sp,sp,8
  b5ce0c:	f800283a 	ret

00b5ce10 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  b5ce10:	defffe04 	addi	sp,sp,-8
  b5ce14:	df000115 	stw	fp,4(sp)
  b5ce18:	df000104 	addi	fp,sp,4
  b5ce1c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  b5ce20:	e0bfff17 	ldw	r2,-4(fp)
  b5ce24:	108000d0 	cmplti	r2,r2,3
  b5ce28:	10000d1e 	bne	r2,zero,b5ce60 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  b5ce2c:	e0bfff17 	ldw	r2,-4(fp)
  b5ce30:	00c02db4 	movhi	r3,182
  b5ce34:	18c72804 	addi	r3,r3,7328
  b5ce38:	10800324 	muli	r2,r2,12
  b5ce3c:	10c5883a 	add	r2,r2,r3
  b5ce40:	10800204 	addi	r2,r2,8
  b5ce44:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  b5ce48:	e0bfff17 	ldw	r2,-4(fp)
  b5ce4c:	00c02db4 	movhi	r3,182
  b5ce50:	18c72804 	addi	r3,r3,7328
  b5ce54:	10800324 	muli	r2,r2,12
  b5ce58:	10c5883a 	add	r2,r2,r3
  b5ce5c:	10000015 	stw	zero,0(r2)
  }
}
  b5ce60:	e037883a 	mov	sp,fp
  b5ce64:	df000017 	ldw	fp,0(sp)
  b5ce68:	dec00104 	addi	sp,sp,4
  b5ce6c:	f800283a 	ret

00b5ce70 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  b5ce70:	defff804 	addi	sp,sp,-32
  b5ce74:	df000715 	stw	fp,28(sp)
  b5ce78:	df000704 	addi	fp,sp,28
  b5ce7c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  b5ce80:	0005303a 	rdctl	r2,status
  b5ce84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  b5ce88:	e0fffb17 	ldw	r3,-20(fp)
  b5ce8c:	00bfff84 	movi	r2,-2
  b5ce90:	1884703a 	and	r2,r3,r2
  b5ce94:	1001703a 	wrctl	status,r2
  
  return context;
  b5ce98:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  b5ce9c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  b5cea0:	d0a01417 	ldw	r2,-32688(gp)
  b5cea4:	10c000c4 	addi	r3,r2,3
  b5cea8:	00bfff04 	movi	r2,-4
  b5ceac:	1884703a 	and	r2,r3,r2
  b5ceb0:	d0a01415 	stw	r2,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  b5ceb4:	d0e01417 	ldw	r3,-32688(gp)
  b5ceb8:	e0bffe17 	ldw	r2,-8(fp)
  b5cebc:	1887883a 	add	r3,r3,r2
  b5cec0:	00803434 	movhi	r2,208
  b5cec4:	10800004 	addi	r2,r2,0
  b5cec8:	10c0072e 	bgeu	r2,r3,b5cee8 <sbrk+0x78>
  b5cecc:	e0bffd17 	ldw	r2,-12(fp)
  b5ced0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  b5ced4:	e0bffa17 	ldw	r2,-24(fp)
  b5ced8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  b5cedc:	00bfffc4 	movi	r2,-1
  b5cee0:	e0bfff15 	stw	r2,-4(fp)
  b5cee4:	00000c06 	br	b5cf18 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  b5cee8:	d0a01417 	ldw	r2,-32688(gp)
  b5ceec:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  b5cef0:	d0e01417 	ldw	r3,-32688(gp)
  b5cef4:	e0bffe17 	ldw	r2,-8(fp)
  b5cef8:	1885883a 	add	r2,r3,r2
  b5cefc:	d0a01415 	stw	r2,-32688(gp)
  b5cf00:	e0bffd17 	ldw	r2,-12(fp)
  b5cf04:	e0bff915 	stw	r2,-28(fp)
  b5cf08:	e0bff917 	ldw	r2,-28(fp)
  b5cf0c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  b5cf10:	e0bffc17 	ldw	r2,-16(fp)
  b5cf14:	e0bfff15 	stw	r2,-4(fp)
  b5cf18:	e0bfff17 	ldw	r2,-4(fp)
} 
  b5cf1c:	e037883a 	mov	sp,fp
  b5cf20:	df000017 	ldw	fp,0(sp)
  b5cf24:	dec00104 	addi	sp,sp,4
  b5cf28:	f800283a 	ret

00b5cf2c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  b5cf2c:	defff704 	addi	sp,sp,-36
  b5cf30:	dfc00815 	stw	ra,32(sp)
  b5cf34:	df000715 	stw	fp,28(sp)
  b5cf38:	df000704 	addi	fp,sp,28
  b5cf3c:	e13ffb15 	stw	r4,-20(fp)
  b5cf40:	e17ffc15 	stw	r5,-16(fp)
  b5cf44:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  b5cf48:	e0bffb17 	ldw	r2,-20(fp)
  b5cf4c:	1004803a 	cmplt	r2,r2,zero
  b5cf50:	1000081e 	bne	r2,zero,b5cf74 <write+0x48>
  b5cf54:	e0bffb17 	ldw	r2,-20(fp)
  b5cf58:	10800324 	muli	r2,r2,12
  b5cf5c:	1007883a 	mov	r3,r2
  b5cf60:	00802db4 	movhi	r2,182
  b5cf64:	10872804 	addi	r2,r2,7328
  b5cf68:	1887883a 	add	r3,r3,r2
  b5cf6c:	e0ffff15 	stw	r3,-4(fp)
  b5cf70:	00000106 	br	b5cf78 <write+0x4c>
  b5cf74:	e03fff15 	stw	zero,-4(fp)
  b5cf78:	e0bfff17 	ldw	r2,-4(fp)
  b5cf7c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  b5cf80:	e0bffa17 	ldw	r2,-24(fp)
  b5cf84:	1005003a 	cmpeq	r2,r2,zero
  b5cf88:	1000241e 	bne	r2,zero,b5d01c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  b5cf8c:	e0bffa17 	ldw	r2,-24(fp)
  b5cf90:	10800217 	ldw	r2,8(r2)
  b5cf94:	108000cc 	andi	r2,r2,3
  b5cf98:	1005003a 	cmpeq	r2,r2,zero
  b5cf9c:	10001a1e 	bne	r2,zero,b5d008 <write+0xdc>
  b5cfa0:	e0bffa17 	ldw	r2,-24(fp)
  b5cfa4:	10800017 	ldw	r2,0(r2)
  b5cfa8:	10800617 	ldw	r2,24(r2)
  b5cfac:	1005003a 	cmpeq	r2,r2,zero
  b5cfb0:	1000151e 	bne	r2,zero,b5d008 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  b5cfb4:	e0bffa17 	ldw	r2,-24(fp)
  b5cfb8:	10800017 	ldw	r2,0(r2)
  b5cfbc:	10800617 	ldw	r2,24(r2)
  b5cfc0:	e17ffc17 	ldw	r5,-16(fp)
  b5cfc4:	e1bffd17 	ldw	r6,-12(fp)
  b5cfc8:	e13ffa17 	ldw	r4,-24(fp)
  b5cfcc:	103ee83a 	callr	r2
  b5cfd0:	e0bff915 	stw	r2,-28(fp)
  b5cfd4:	e0bff917 	ldw	r2,-28(fp)
  b5cfd8:	1004403a 	cmpge	r2,r2,zero
  b5cfdc:	1000071e 	bne	r2,zero,b5cffc <write+0xd0>
      {
        ALT_ERRNO = -rval;
  b5cfe0:	0b5d04c0 	call	b5d04c <alt_get_errno>
  b5cfe4:	e0fff917 	ldw	r3,-28(fp)
  b5cfe8:	00c7c83a 	sub	r3,zero,r3
  b5cfec:	10c00015 	stw	r3,0(r2)
        return -1;
  b5cff0:	00bfffc4 	movi	r2,-1
  b5cff4:	e0bffe15 	stw	r2,-8(fp)
  b5cff8:	00000e06 	br	b5d034 <write+0x108>
      }
      return rval;
  b5cffc:	e0bff917 	ldw	r2,-28(fp)
  b5d000:	e0bffe15 	stw	r2,-8(fp)
  b5d004:	00000b06 	br	b5d034 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  b5d008:	0b5d04c0 	call	b5d04c <alt_get_errno>
  b5d00c:	1007883a 	mov	r3,r2
  b5d010:	00800344 	movi	r2,13
  b5d014:	18800015 	stw	r2,0(r3)
  b5d018:	00000406 	br	b5d02c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  b5d01c:	0b5d04c0 	call	b5d04c <alt_get_errno>
  b5d020:	1007883a 	mov	r3,r2
  b5d024:	00801444 	movi	r2,81
  b5d028:	18800015 	stw	r2,0(r3)
  }
  return -1;
  b5d02c:	00bfffc4 	movi	r2,-1
  b5d030:	e0bffe15 	stw	r2,-8(fp)
  b5d034:	e0bffe17 	ldw	r2,-8(fp)
}
  b5d038:	e037883a 	mov	sp,fp
  b5d03c:	dfc00117 	ldw	ra,4(sp)
  b5d040:	df000017 	ldw	fp,0(sp)
  b5d044:	dec00204 	addi	sp,sp,8
  b5d048:	f800283a 	ret

00b5d04c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  b5d04c:	defffd04 	addi	sp,sp,-12
  b5d050:	dfc00215 	stw	ra,8(sp)
  b5d054:	df000115 	stw	fp,4(sp)
  b5d058:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  b5d05c:	00802db4 	movhi	r2,182
  b5d060:	108c0404 	addi	r2,r2,12304
  b5d064:	10800017 	ldw	r2,0(r2)
  b5d068:	1005003a 	cmpeq	r2,r2,zero
  b5d06c:	1000061e 	bne	r2,zero,b5d088 <alt_get_errno+0x3c>
  b5d070:	00802db4 	movhi	r2,182
  b5d074:	108c0404 	addi	r2,r2,12304
  b5d078:	10800017 	ldw	r2,0(r2)
  b5d07c:	103ee83a 	callr	r2
  b5d080:	e0bfff15 	stw	r2,-4(fp)
  b5d084:	00000306 	br	b5d094 <alt_get_errno+0x48>
  b5d088:	00802db4 	movhi	r2,182
  b5d08c:	10930a04 	addi	r2,r2,19496
  b5d090:	e0bfff15 	stw	r2,-4(fp)
  b5d094:	e0bfff17 	ldw	r2,-4(fp)
}
  b5d098:	e037883a 	mov	sp,fp
  b5d09c:	dfc00117 	ldw	ra,4(sp)
  b5d0a0:	df000017 	ldw	fp,0(sp)
  b5d0a4:	dec00204 	addi	sp,sp,8
  b5d0a8:	f800283a 	ret

00b5d0ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  b5d0ac:	defffd04 	addi	sp,sp,-12
  b5d0b0:	dfc00215 	stw	ra,8(sp)
  b5d0b4:	df000115 	stw	fp,4(sp)
  b5d0b8:	df000104 	addi	fp,sp,4
  b5d0bc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_1, cpu_1);
  b5d0c0:	0b6087c0 	call	b6087c <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  b5d0c4:	00800044 	movi	r2,1
  b5d0c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  b5d0cc:	e037883a 	mov	sp,fp
  b5d0d0:	dfc00117 	ldw	ra,4(sp)
  b5d0d4:	df000017 	ldw	fp,0(sp)
  b5d0d8:	dec00204 	addi	sp,sp,8
  b5d0dc:	f800283a 	ret

00b5d0e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  b5d0e0:	defffd04 	addi	sp,sp,-12
  b5d0e4:	dfc00215 	stw	ra,8(sp)
  b5d0e8:	df000115 	stw	fp,4(sp)
  b5d0ec:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
  b5d0f0:	01002db4 	movhi	r4,182
  b5d0f4:	21079204 	addi	r4,r4,7752
  b5d0f8:	000b883a 	mov	r5,zero
  b5d0fc:	01800044 	movi	r6,1
  b5d100:	0b5d4d80 	call	b5d4d8 <altera_avalon_jtag_uart_init>
  b5d104:	01002db4 	movhi	r4,182
  b5d108:	21078804 	addi	r4,r4,7712
  b5d10c:	0b5d3580 	call	b5d358 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
  b5d110:	01002db4 	movhi	r4,182
  b5d114:	210ba004 	addi	r4,r4,11904
  b5d118:	0b5de3c0 	call	b5de3c <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
  b5d11c:	01002db4 	movhi	r4,182
  b5d120:	210baf04 	addi	r4,r4,11964
  b5d124:	0b5de3c0 	call	b5de3c <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
  b5d128:	01002db4 	movhi	r4,182
  b5d12c:	210bbe04 	addi	r4,r4,12024
  b5d130:	0b5de3c0 	call	b5de3c <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
  b5d134:	01002db4 	movhi	r4,182
  b5d138:	210bcd04 	addi	r4,r4,12084
  b5d13c:	0b5de3c0 	call	b5de3c <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
  b5d140:	0007883a 	mov	r3,zero
  b5d144:	00800044 	movi	r2,1
  b5d148:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  b5d14c:	00802db4 	movhi	r2,182
  b5d150:	108bdc04 	addi	r2,r2,12144
  b5d154:	10800a17 	ldw	r2,40(r2)
  b5d158:	10800017 	ldw	r2,0(r2)
  b5d15c:	1007883a 	mov	r3,r2
  b5d160:	00802db4 	movhi	r2,182
  b5d164:	108bdc04 	addi	r2,r2,12144
  b5d168:	10c00b15 	stw	r3,44(r2)
  b5d16c:	00802db4 	movhi	r2,182
  b5d170:	108bdc04 	addi	r2,r2,12144
  b5d174:	10800a17 	ldw	r2,40(r2)
  b5d178:	10800104 	addi	r2,r2,4
  b5d17c:	10800017 	ldw	r2,0(r2)
  b5d180:	1007883a 	mov	r3,r2
  b5d184:	00802db4 	movhi	r2,182
  b5d188:	108bdc04 	addi	r2,r2,12144
  b5d18c:	10c00c15 	stw	r3,48(r2)
  b5d190:	00802db4 	movhi	r2,182
  b5d194:	108bdc04 	addi	r2,r2,12144
  b5d198:	10800a17 	ldw	r2,40(r2)
  b5d19c:	10800204 	addi	r2,r2,8
  b5d1a0:	10800017 	ldw	r2,0(r2)
  b5d1a4:	10ffffcc 	andi	r3,r2,65535
  b5d1a8:	00802db4 	movhi	r2,182
  b5d1ac:	108bdc04 	addi	r2,r2,12144
  b5d1b0:	10c00f15 	stw	r3,60(r2)
  b5d1b4:	00802db4 	movhi	r2,182
  b5d1b8:	108bdc04 	addi	r2,r2,12144
  b5d1bc:	10800a17 	ldw	r2,40(r2)
  b5d1c0:	10800204 	addi	r2,r2,8
  b5d1c4:	10800017 	ldw	r2,0(r2)
  b5d1c8:	1005d43a 	srai	r2,r2,16
  b5d1cc:	10ffffcc 	andi	r3,r2,65535
  b5d1d0:	00802db4 	movhi	r2,182
  b5d1d4:	108bdc04 	addi	r2,r2,12144
  b5d1d8:	10c01015 	stw	r3,64(r2)
  b5d1dc:	00802db4 	movhi	r2,182
  b5d1e0:	108bdc04 	addi	r2,r2,12144
  b5d1e4:	10800a17 	ldw	r2,40(r2)
  b5d1e8:	10800304 	addi	r2,r2,12
  b5d1ec:	10800017 	ldw	r2,0(r2)
  b5d1f0:	1005d07a 	srai	r2,r2,1
  b5d1f4:	10c0004c 	andi	r3,r2,1
  b5d1f8:	00802db4 	movhi	r2,182
  b5d1fc:	108bdc04 	addi	r2,r2,12144
  b5d200:	10c00d15 	stw	r3,52(r2)
  b5d204:	00802db4 	movhi	r2,182
  b5d208:	108bdc04 	addi	r2,r2,12144
  b5d20c:	10800a17 	ldw	r2,40(r2)
  b5d210:	10800304 	addi	r2,r2,12
  b5d214:	10800017 	ldw	r2,0(r2)
  b5d218:	1005d13a 	srai	r2,r2,4
  b5d21c:	10c003cc 	andi	r3,r2,15
  b5d220:	00802db4 	movhi	r2,182
  b5d224:	108bdc04 	addi	r2,r2,12144
  b5d228:	10c00e15 	stw	r3,56(r2)
  b5d22c:	00802db4 	movhi	r2,182
  b5d230:	108bdc04 	addi	r2,r2,12144
  b5d234:	10800a17 	ldw	r2,40(r2)
  b5d238:	10800304 	addi	r2,r2,12
  b5d23c:	10800017 	ldw	r2,0(r2)
  b5d240:	1005d43a 	srai	r2,r2,16
  b5d244:	1007883a 	mov	r3,r2
  b5d248:	00bfffc4 	movi	r2,-1
  b5d24c:	1884703a 	and	r2,r3,r2
  b5d250:	e0bfff45 	stb	r2,-3(fp)
  b5d254:	00802db4 	movhi	r2,182
  b5d258:	108bdc04 	addi	r2,r2,12144
  b5d25c:	10800a17 	ldw	r2,40(r2)
  b5d260:	10800304 	addi	r2,r2,12
  b5d264:	10800017 	ldw	r2,0(r2)
  b5d268:	1005d63a 	srai	r2,r2,24
  b5d26c:	1007883a 	mov	r3,r2
  b5d270:	00bfffc4 	movi	r2,-1
  b5d274:	1884703a 	and	r2,r3,r2
  b5d278:	e0bfff05 	stb	r2,-4(fp)
  b5d27c:	00802db4 	movhi	r2,182
  b5d280:	108bdc04 	addi	r2,r2,12144
  b5d284:	10800e17 	ldw	r2,56(r2)
  b5d288:	10800058 	cmpnei	r2,r2,1
  b5d28c:	1000041e 	bne	r2,zero,b5d2a0 <alt_sys_init+0x1c0>
  b5d290:	00802db4 	movhi	r2,182
  b5d294:	108bdc04 	addi	r2,r2,12144
  b5d298:	10001115 	stw	zero,68(r2)
  b5d29c:	00000e06 	br	b5d2d8 <alt_sys_init+0x1f8>
  b5d2a0:	00802db4 	movhi	r2,182
  b5d2a4:	108bdc04 	addi	r2,r2,12144
  b5d2a8:	10800e17 	ldw	r2,56(r2)
  b5d2ac:	10800098 	cmpnei	r2,r2,2
  b5d2b0:	1000051e 	bne	r2,zero,b5d2c8 <alt_sys_init+0x1e8>
  b5d2b4:	00c02db4 	movhi	r3,182
  b5d2b8:	18cbdc04 	addi	r3,r3,12144
  b5d2bc:	00800044 	movi	r2,1
  b5d2c0:	18801115 	stw	r2,68(r3)
  b5d2c4:	00000406 	br	b5d2d8 <alt_sys_init+0x1f8>
  b5d2c8:	00c02db4 	movhi	r3,182
  b5d2cc:	18cbdc04 	addi	r3,r3,12144
  b5d2d0:	00800084 	movi	r2,2
  b5d2d4:	18801115 	stw	r2,68(r3)
  b5d2d8:	e0ffff43 	ldbu	r3,-3(fp)
  b5d2dc:	00800804 	movi	r2,32
  b5d2e0:	10c7c83a 	sub	r3,r2,r3
  b5d2e4:	00bfffc4 	movi	r2,-1
  b5d2e8:	10c6d83a 	srl	r3,r2,r3
  b5d2ec:	00802db4 	movhi	r2,182
  b5d2f0:	108bdc04 	addi	r2,r2,12144
  b5d2f4:	10c01215 	stw	r3,72(r2)
  b5d2f8:	e0ffff43 	ldbu	r3,-3(fp)
  b5d2fc:	00802db4 	movhi	r2,182
  b5d300:	108bdc04 	addi	r2,r2,12144
  b5d304:	10801117 	ldw	r2,68(r2)
  b5d308:	1887883a 	add	r3,r3,r2
  b5d30c:	00802db4 	movhi	r2,182
  b5d310:	108bdc04 	addi	r2,r2,12144
  b5d314:	10c01315 	stw	r3,76(r2)
  b5d318:	e0ffff03 	ldbu	r3,-4(fp)
  b5d31c:	00800804 	movi	r2,32
  b5d320:	10c7c83a 	sub	r3,r2,r3
  b5d324:	00bfffc4 	movi	r2,-1
  b5d328:	10c6d83a 	srl	r3,r2,r3
  b5d32c:	00802db4 	movhi	r2,182
  b5d330:	108bdc04 	addi	r2,r2,12144
  b5d334:	10c01415 	stw	r3,80(r2)
  b5d338:	01002db4 	movhi	r4,182
  b5d33c:	210bdc04 	addi	r4,r4,12144
  b5d340:	0b5d3580 	call	b5d358 <alt_dev_reg>
}
  b5d344:	e037883a 	mov	sp,fp
  b5d348:	dfc00117 	ldw	ra,4(sp)
  b5d34c:	df000017 	ldw	fp,0(sp)
  b5d350:	dec00204 	addi	sp,sp,8
  b5d354:	f800283a 	ret

00b5d358 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  b5d358:	defffd04 	addi	sp,sp,-12
  b5d35c:	dfc00215 	stw	ra,8(sp)
  b5d360:	df000115 	stw	fp,4(sp)
  b5d364:	df000104 	addi	fp,sp,4
  b5d368:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  b5d36c:	e13fff17 	ldw	r4,-4(fp)
  b5d370:	01402db4 	movhi	r5,182
  b5d374:	294c0104 	addi	r5,r5,12292
  b5d378:	0b5fd6c0 	call	b5fd6c <alt_dev_llist_insert>
}
  b5d37c:	e037883a 	mov	sp,fp
  b5d380:	dfc00117 	ldw	ra,4(sp)
  b5d384:	df000017 	ldw	fp,0(sp)
  b5d388:	dec00204 	addi	sp,sp,8
  b5d38c:	f800283a 	ret

00b5d390 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  b5d390:	defffa04 	addi	sp,sp,-24
  b5d394:	dfc00515 	stw	ra,20(sp)
  b5d398:	df000415 	stw	fp,16(sp)
  b5d39c:	df000404 	addi	fp,sp,16
  b5d3a0:	e13ffd15 	stw	r4,-12(fp)
  b5d3a4:	e17ffe15 	stw	r5,-8(fp)
  b5d3a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  b5d3ac:	e0bffd17 	ldw	r2,-12(fp)
  b5d3b0:	10800017 	ldw	r2,0(r2)
  b5d3b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  b5d3b8:	e0bffc17 	ldw	r2,-16(fp)
  b5d3bc:	11000a04 	addi	r4,r2,40
  b5d3c0:	e0bffd17 	ldw	r2,-12(fp)
  b5d3c4:	11c00217 	ldw	r7,8(r2)
  b5d3c8:	e17ffe17 	ldw	r5,-8(fp)
  b5d3cc:	e1bfff17 	ldw	r6,-4(fp)
  b5d3d0:	0b5d9d80 	call	b5d9d8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  b5d3d4:	e037883a 	mov	sp,fp
  b5d3d8:	dfc00117 	ldw	ra,4(sp)
  b5d3dc:	df000017 	ldw	fp,0(sp)
  b5d3e0:	dec00204 	addi	sp,sp,8
  b5d3e4:	f800283a 	ret

00b5d3e8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  b5d3e8:	defffa04 	addi	sp,sp,-24
  b5d3ec:	dfc00515 	stw	ra,20(sp)
  b5d3f0:	df000415 	stw	fp,16(sp)
  b5d3f4:	df000404 	addi	fp,sp,16
  b5d3f8:	e13ffd15 	stw	r4,-12(fp)
  b5d3fc:	e17ffe15 	stw	r5,-8(fp)
  b5d400:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  b5d404:	e0bffd17 	ldw	r2,-12(fp)
  b5d408:	10800017 	ldw	r2,0(r2)
  b5d40c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  b5d410:	e0bffc17 	ldw	r2,-16(fp)
  b5d414:	11000a04 	addi	r4,r2,40
  b5d418:	e0bffd17 	ldw	r2,-12(fp)
  b5d41c:	11c00217 	ldw	r7,8(r2)
  b5d420:	e17ffe17 	ldw	r5,-8(fp)
  b5d424:	e1bfff17 	ldw	r6,-4(fp)
  b5d428:	0b5dbfc0 	call	b5dbfc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  b5d42c:	e037883a 	mov	sp,fp
  b5d430:	dfc00117 	ldw	ra,4(sp)
  b5d434:	df000017 	ldw	fp,0(sp)
  b5d438:	dec00204 	addi	sp,sp,8
  b5d43c:	f800283a 	ret

00b5d440 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  b5d440:	defffc04 	addi	sp,sp,-16
  b5d444:	dfc00315 	stw	ra,12(sp)
  b5d448:	df000215 	stw	fp,8(sp)
  b5d44c:	df000204 	addi	fp,sp,8
  b5d450:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  b5d454:	e0bfff17 	ldw	r2,-4(fp)
  b5d458:	10800017 	ldw	r2,0(r2)
  b5d45c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  b5d460:	e0bffe17 	ldw	r2,-8(fp)
  b5d464:	11000a04 	addi	r4,r2,40
  b5d468:	e0bfff17 	ldw	r2,-4(fp)
  b5d46c:	11400217 	ldw	r5,8(r2)
  b5d470:	0b5d8700 	call	b5d870 <altera_avalon_jtag_uart_close>
}
  b5d474:	e037883a 	mov	sp,fp
  b5d478:	dfc00117 	ldw	ra,4(sp)
  b5d47c:	df000017 	ldw	fp,0(sp)
  b5d480:	dec00204 	addi	sp,sp,8
  b5d484:	f800283a 	ret

00b5d488 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  b5d488:	defffa04 	addi	sp,sp,-24
  b5d48c:	dfc00515 	stw	ra,20(sp)
  b5d490:	df000415 	stw	fp,16(sp)
  b5d494:	df000404 	addi	fp,sp,16
  b5d498:	e13ffd15 	stw	r4,-12(fp)
  b5d49c:	e17ffe15 	stw	r5,-8(fp)
  b5d4a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  b5d4a4:	e0bffd17 	ldw	r2,-12(fp)
  b5d4a8:	10800017 	ldw	r2,0(r2)
  b5d4ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  b5d4b0:	e0bffc17 	ldw	r2,-16(fp)
  b5d4b4:	11000a04 	addi	r4,r2,40
  b5d4b8:	e17ffe17 	ldw	r5,-8(fp)
  b5d4bc:	e1bfff17 	ldw	r6,-4(fp)
  b5d4c0:	0b5d8e40 	call	b5d8e4 <altera_avalon_jtag_uart_ioctl>
}
  b5d4c4:	e037883a 	mov	sp,fp
  b5d4c8:	dfc00117 	ldw	ra,4(sp)
  b5d4cc:	df000017 	ldw	fp,0(sp)
  b5d4d0:	dec00204 	addi	sp,sp,8
  b5d4d4:	f800283a 	ret

00b5d4d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  b5d4d8:	defffa04 	addi	sp,sp,-24
  b5d4dc:	dfc00515 	stw	ra,20(sp)
  b5d4e0:	df000415 	stw	fp,16(sp)
  b5d4e4:	df000404 	addi	fp,sp,16
  b5d4e8:	e13ffd15 	stw	r4,-12(fp)
  b5d4ec:	e17ffe15 	stw	r5,-8(fp)
  b5d4f0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  b5d4f4:	e0fffd17 	ldw	r3,-12(fp)
  b5d4f8:	00800044 	movi	r2,1
  b5d4fc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  b5d500:	e0bffd17 	ldw	r2,-12(fp)
  b5d504:	10800017 	ldw	r2,0(r2)
  b5d508:	11000104 	addi	r4,r2,4
  b5d50c:	e0bffd17 	ldw	r2,-12(fp)
  b5d510:	10800817 	ldw	r2,32(r2)
  b5d514:	1007883a 	mov	r3,r2
  b5d518:	2005883a 	mov	r2,r4
  b5d51c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  b5d520:	e13ffe17 	ldw	r4,-8(fp)
  b5d524:	e17fff17 	ldw	r5,-4(fp)
  b5d528:	d8000015 	stw	zero,0(sp)
  b5d52c:	01802db4 	movhi	r6,182
  b5d530:	31b56604 	addi	r6,r6,-10856
  b5d534:	e1fffd17 	ldw	r7,-12(fp)
  b5d538:	0b6000c0 	call	b6000c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  b5d53c:	e0bffd17 	ldw	r2,-12(fp)
  b5d540:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  b5d544:	e0bffd17 	ldw	r2,-12(fp)
  b5d548:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  b5d54c:	00802db4 	movhi	r2,182
  b5d550:	10930f04 	addi	r2,r2,19516
  b5d554:	10800017 	ldw	r2,0(r2)
  b5d558:	100b883a 	mov	r5,r2
  b5d55c:	01802db4 	movhi	r6,182
  b5d560:	31b5f004 	addi	r6,r6,-10304
  b5d564:	e1fffd17 	ldw	r7,-12(fp)
  b5d568:	0b5fbd40 	call	b5fbd4 <alt_alarm_start>
  b5d56c:	1004403a 	cmpge	r2,r2,zero
  b5d570:	1000041e 	bne	r2,zero,b5d584 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  b5d574:	e0fffd17 	ldw	r3,-12(fp)
  b5d578:	00a00034 	movhi	r2,32768
  b5d57c:	10bfffc4 	addi	r2,r2,-1
  b5d580:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  b5d584:	e037883a 	mov	sp,fp
  b5d588:	dfc00117 	ldw	ra,4(sp)
  b5d58c:	df000017 	ldw	fp,0(sp)
  b5d590:	dec00204 	addi	sp,sp,8
  b5d594:	f800283a 	ret

00b5d598 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  b5d598:	defff804 	addi	sp,sp,-32
  b5d59c:	df000715 	stw	fp,28(sp)
  b5d5a0:	df000704 	addi	fp,sp,28
  b5d5a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  b5d5a8:	e0bfff17 	ldw	r2,-4(fp)
  b5d5ac:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  b5d5b0:	e0bffe17 	ldw	r2,-8(fp)
  b5d5b4:	10800017 	ldw	r2,0(r2)
  b5d5b8:	e0bffd15 	stw	r2,-12(fp)
  b5d5bc:	00000006 	br	b5d5c0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  b5d5c0:	e0bffd17 	ldw	r2,-12(fp)
  b5d5c4:	10800104 	addi	r2,r2,4
  b5d5c8:	10800037 	ldwio	r2,0(r2)
  b5d5cc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  b5d5d0:	e0bffc17 	ldw	r2,-16(fp)
  b5d5d4:	1080c00c 	andi	r2,r2,768
  b5d5d8:	1005003a 	cmpeq	r2,r2,zero
  b5d5dc:	1000741e 	bne	r2,zero,b5d7b0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  b5d5e0:	e0bffc17 	ldw	r2,-16(fp)
  b5d5e4:	1080400c 	andi	r2,r2,256
  b5d5e8:	1005003a 	cmpeq	r2,r2,zero
  b5d5ec:	1000351e 	bne	r2,zero,b5d6c4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  b5d5f0:	00800074 	movhi	r2,1
  b5d5f4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  b5d5f8:	e0bffe17 	ldw	r2,-8(fp)
  b5d5fc:	10800a17 	ldw	r2,40(r2)
  b5d600:	10800044 	addi	r2,r2,1
  b5d604:	1081ffcc 	andi	r2,r2,2047
  b5d608:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  b5d60c:	e0bffe17 	ldw	r2,-8(fp)
  b5d610:	10c00b17 	ldw	r3,44(r2)
  b5d614:	e0bffa17 	ldw	r2,-24(fp)
  b5d618:	18801626 	beq	r3,r2,b5d674 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  b5d61c:	e0bffd17 	ldw	r2,-12(fp)
  b5d620:	10800037 	ldwio	r2,0(r2)
  b5d624:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  b5d628:	e0bffb17 	ldw	r2,-20(fp)
  b5d62c:	10a0000c 	andi	r2,r2,32768
  b5d630:	1005003a 	cmpeq	r2,r2,zero
  b5d634:	10000f1e 	bne	r2,zero,b5d674 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  b5d638:	e0bffe17 	ldw	r2,-8(fp)
  b5d63c:	10c00a17 	ldw	r3,40(r2)
  b5d640:	e0bffb17 	ldw	r2,-20(fp)
  b5d644:	1009883a 	mov	r4,r2
  b5d648:	e0bffe17 	ldw	r2,-8(fp)
  b5d64c:	1885883a 	add	r2,r3,r2
  b5d650:	10800e04 	addi	r2,r2,56
  b5d654:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  b5d658:	e0bffe17 	ldw	r2,-8(fp)
  b5d65c:	10800a17 	ldw	r2,40(r2)
  b5d660:	10800044 	addi	r2,r2,1
  b5d664:	10c1ffcc 	andi	r3,r2,2047
  b5d668:	e0bffe17 	ldw	r2,-8(fp)
  b5d66c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  b5d670:	003fe106 	br	b5d5f8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  b5d674:	e0bffb17 	ldw	r2,-20(fp)
  b5d678:	10bfffec 	andhi	r2,r2,65535
  b5d67c:	1005003a 	cmpeq	r2,r2,zero
  b5d680:	1000101e 	bne	r2,zero,b5d6c4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  b5d684:	e0bffe17 	ldw	r2,-8(fp)
  b5d688:	10c00817 	ldw	r3,32(r2)
  b5d68c:	00bfff84 	movi	r2,-2
  b5d690:	1886703a 	and	r3,r3,r2
  b5d694:	e0bffe17 	ldw	r2,-8(fp)
  b5d698:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  b5d69c:	e0bffd17 	ldw	r2,-12(fp)
  b5d6a0:	11000104 	addi	r4,r2,4
  b5d6a4:	e0bffe17 	ldw	r2,-8(fp)
  b5d6a8:	10800817 	ldw	r2,32(r2)
  b5d6ac:	1007883a 	mov	r3,r2
  b5d6b0:	2005883a 	mov	r2,r4
  b5d6b4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  b5d6b8:	e0bffd17 	ldw	r2,-12(fp)
  b5d6bc:	10800104 	addi	r2,r2,4
  b5d6c0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  b5d6c4:	e0bffc17 	ldw	r2,-16(fp)
  b5d6c8:	1080800c 	andi	r2,r2,512
  b5d6cc:	1005003a 	cmpeq	r2,r2,zero
  b5d6d0:	103fbb1e 	bne	r2,zero,b5d5c0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  b5d6d4:	e0bffc17 	ldw	r2,-16(fp)
  b5d6d8:	10bfffec 	andhi	r2,r2,65535
  b5d6dc:	1004d43a 	srli	r2,r2,16
  b5d6e0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  b5d6e4:	00001506 	br	b5d73c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  b5d6e8:	e13ffd17 	ldw	r4,-12(fp)
  b5d6ec:	e0bffe17 	ldw	r2,-8(fp)
  b5d6f0:	10c00d17 	ldw	r3,52(r2)
  b5d6f4:	e0bffe17 	ldw	r2,-8(fp)
  b5d6f8:	1885883a 	add	r2,r3,r2
  b5d6fc:	10820e04 	addi	r2,r2,2104
  b5d700:	10800003 	ldbu	r2,0(r2)
  b5d704:	10c03fcc 	andi	r3,r2,255
  b5d708:	18c0201c 	xori	r3,r3,128
  b5d70c:	18ffe004 	addi	r3,r3,-128
  b5d710:	2005883a 	mov	r2,r4
  b5d714:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  b5d718:	e0bffe17 	ldw	r2,-8(fp)
  b5d71c:	10800d17 	ldw	r2,52(r2)
  b5d720:	10800044 	addi	r2,r2,1
  b5d724:	10c1ffcc 	andi	r3,r2,2047
  b5d728:	e0bffe17 	ldw	r2,-8(fp)
  b5d72c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  b5d730:	e0bff917 	ldw	r2,-28(fp)
  b5d734:	10bfffc4 	addi	r2,r2,-1
  b5d738:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  b5d73c:	e0bff917 	ldw	r2,-28(fp)
  b5d740:	1005003a 	cmpeq	r2,r2,zero
  b5d744:	1000051e 	bne	r2,zero,b5d75c <altera_avalon_jtag_uart_irq+0x1c4>
  b5d748:	e0bffe17 	ldw	r2,-8(fp)
  b5d74c:	10c00d17 	ldw	r3,52(r2)
  b5d750:	e0bffe17 	ldw	r2,-8(fp)
  b5d754:	10800c17 	ldw	r2,48(r2)
  b5d758:	18bfe31e 	bne	r3,r2,b5d6e8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  b5d75c:	e0bff917 	ldw	r2,-28(fp)
  b5d760:	1005003a 	cmpeq	r2,r2,zero
  b5d764:	103f961e 	bne	r2,zero,b5d5c0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  b5d768:	e0bffe17 	ldw	r2,-8(fp)
  b5d76c:	10c00817 	ldw	r3,32(r2)
  b5d770:	00bfff44 	movi	r2,-3
  b5d774:	1886703a 	and	r3,r3,r2
  b5d778:	e0bffe17 	ldw	r2,-8(fp)
  b5d77c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  b5d780:	e0bffe17 	ldw	r2,-8(fp)
  b5d784:	10800017 	ldw	r2,0(r2)
  b5d788:	11000104 	addi	r4,r2,4
  b5d78c:	e0bffe17 	ldw	r2,-8(fp)
  b5d790:	10800817 	ldw	r2,32(r2)
  b5d794:	1007883a 	mov	r3,r2
  b5d798:	2005883a 	mov	r2,r4
  b5d79c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  b5d7a0:	e0bffd17 	ldw	r2,-12(fp)
  b5d7a4:	10800104 	addi	r2,r2,4
  b5d7a8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  b5d7ac:	003f8406 	br	b5d5c0 <altera_avalon_jtag_uart_irq+0x28>
}
  b5d7b0:	e037883a 	mov	sp,fp
  b5d7b4:	df000017 	ldw	fp,0(sp)
  b5d7b8:	dec00104 	addi	sp,sp,4
  b5d7bc:	f800283a 	ret

00b5d7c0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  b5d7c0:	defffc04 	addi	sp,sp,-16
  b5d7c4:	df000315 	stw	fp,12(sp)
  b5d7c8:	df000304 	addi	fp,sp,12
  b5d7cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  b5d7d0:	e0bfff17 	ldw	r2,-4(fp)
  b5d7d4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  b5d7d8:	e0bffe17 	ldw	r2,-8(fp)
  b5d7dc:	10800017 	ldw	r2,0(r2)
  b5d7e0:	10800104 	addi	r2,r2,4
  b5d7e4:	10800037 	ldwio	r2,0(r2)
  b5d7e8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  b5d7ec:	e0bffd17 	ldw	r2,-12(fp)
  b5d7f0:	1081000c 	andi	r2,r2,1024
  b5d7f4:	1005003a 	cmpeq	r2,r2,zero
  b5d7f8:	10000c1e 	bne	r2,zero,b5d82c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  b5d7fc:	e0bffe17 	ldw	r2,-8(fp)
  b5d800:	10800017 	ldw	r2,0(r2)
  b5d804:	11000104 	addi	r4,r2,4
  b5d808:	e0bffe17 	ldw	r2,-8(fp)
  b5d80c:	10800817 	ldw	r2,32(r2)
  b5d810:	10810014 	ori	r2,r2,1024
  b5d814:	1007883a 	mov	r3,r2
  b5d818:	2005883a 	mov	r2,r4
  b5d81c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  b5d820:	e0bffe17 	ldw	r2,-8(fp)
  b5d824:	10000915 	stw	zero,36(r2)
  b5d828:	00000a06 	br	b5d854 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  b5d82c:	e0bffe17 	ldw	r2,-8(fp)
  b5d830:	10c00917 	ldw	r3,36(r2)
  b5d834:	00a00034 	movhi	r2,32768
  b5d838:	10bfff04 	addi	r2,r2,-4
  b5d83c:	10c00536 	bltu	r2,r3,b5d854 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  b5d840:	e0bffe17 	ldw	r2,-8(fp)
  b5d844:	10800917 	ldw	r2,36(r2)
  b5d848:	10c00044 	addi	r3,r2,1
  b5d84c:	e0bffe17 	ldw	r2,-8(fp)
  b5d850:	10c00915 	stw	r3,36(r2)
  b5d854:	00802db4 	movhi	r2,182
  b5d858:	10930f04 	addi	r2,r2,19516
  b5d85c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  b5d860:	e037883a 	mov	sp,fp
  b5d864:	df000017 	ldw	fp,0(sp)
  b5d868:	dec00104 	addi	sp,sp,4
  b5d86c:	f800283a 	ret

00b5d870 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  b5d870:	defffc04 	addi	sp,sp,-16
  b5d874:	df000315 	stw	fp,12(sp)
  b5d878:	df000304 	addi	fp,sp,12
  b5d87c:	e13ffd15 	stw	r4,-12(fp)
  b5d880:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  b5d884:	00000706 	br	b5d8a4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  b5d888:	e0bffe17 	ldw	r2,-8(fp)
  b5d88c:	1090000c 	andi	r2,r2,16384
  b5d890:	1005003a 	cmpeq	r2,r2,zero
  b5d894:	1000031e 	bne	r2,zero,b5d8a4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  b5d898:	00bffd44 	movi	r2,-11
  b5d89c:	e0bfff15 	stw	r2,-4(fp)
  b5d8a0:	00000b06 	br	b5d8d0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  b5d8a4:	e0bffd17 	ldw	r2,-12(fp)
  b5d8a8:	10c00d17 	ldw	r3,52(r2)
  b5d8ac:	e0bffd17 	ldw	r2,-12(fp)
  b5d8b0:	10800c17 	ldw	r2,48(r2)
  b5d8b4:	18800526 	beq	r3,r2,b5d8cc <altera_avalon_jtag_uart_close+0x5c>
  b5d8b8:	e0bffd17 	ldw	r2,-12(fp)
  b5d8bc:	10c00917 	ldw	r3,36(r2)
  b5d8c0:	e0bffd17 	ldw	r2,-12(fp)
  b5d8c4:	10800117 	ldw	r2,4(r2)
  b5d8c8:	18bfef36 	bltu	r3,r2,b5d888 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  b5d8cc:	e03fff15 	stw	zero,-4(fp)
  b5d8d0:	e0bfff17 	ldw	r2,-4(fp)
}
  b5d8d4:	e037883a 	mov	sp,fp
  b5d8d8:	df000017 	ldw	fp,0(sp)
  b5d8dc:	dec00104 	addi	sp,sp,4
  b5d8e0:	f800283a 	ret

00b5d8e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  b5d8e4:	defff804 	addi	sp,sp,-32
  b5d8e8:	df000715 	stw	fp,28(sp)
  b5d8ec:	df000704 	addi	fp,sp,28
  b5d8f0:	e13ffb15 	stw	r4,-20(fp)
  b5d8f4:	e17ffc15 	stw	r5,-16(fp)
  b5d8f8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  b5d8fc:	00bff9c4 	movi	r2,-25
  b5d900:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  b5d904:	e0bffc17 	ldw	r2,-16(fp)
  b5d908:	e0bfff15 	stw	r2,-4(fp)
  b5d90c:	e0ffff17 	ldw	r3,-4(fp)
  b5d910:	189a8060 	cmpeqi	r2,r3,27137
  b5d914:	1000041e 	bne	r2,zero,b5d928 <altera_avalon_jtag_uart_ioctl+0x44>
  b5d918:	e0ffff17 	ldw	r3,-4(fp)
  b5d91c:	189a80a0 	cmpeqi	r2,r3,27138
  b5d920:	10001b1e 	bne	r2,zero,b5d990 <altera_avalon_jtag_uart_ioctl+0xac>
  b5d924:	00002706 	br	b5d9c4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  b5d928:	e0bffb17 	ldw	r2,-20(fp)
  b5d92c:	10c00117 	ldw	r3,4(r2)
  b5d930:	00a00034 	movhi	r2,32768
  b5d934:	10bfffc4 	addi	r2,r2,-1
  b5d938:	18802226 	beq	r3,r2,b5d9c4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  b5d93c:	e0bffd17 	ldw	r2,-12(fp)
  b5d940:	10800017 	ldw	r2,0(r2)
  b5d944:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  b5d948:	e0bff917 	ldw	r2,-28(fp)
  b5d94c:	10800090 	cmplti	r2,r2,2
  b5d950:	1000071e 	bne	r2,zero,b5d970 <altera_avalon_jtag_uart_ioctl+0x8c>
  b5d954:	e0fff917 	ldw	r3,-28(fp)
  b5d958:	00a00034 	movhi	r2,32768
  b5d95c:	10bfffc4 	addi	r2,r2,-1
  b5d960:	18800326 	beq	r3,r2,b5d970 <altera_avalon_jtag_uart_ioctl+0x8c>
  b5d964:	e0bff917 	ldw	r2,-28(fp)
  b5d968:	e0bffe15 	stw	r2,-8(fp)
  b5d96c:	00000306 	br	b5d97c <altera_avalon_jtag_uart_ioctl+0x98>
  b5d970:	00e00034 	movhi	r3,32768
  b5d974:	18ffff84 	addi	r3,r3,-2
  b5d978:	e0fffe15 	stw	r3,-8(fp)
  b5d97c:	e0bffb17 	ldw	r2,-20(fp)
  b5d980:	e0fffe17 	ldw	r3,-8(fp)
  b5d984:	10c00115 	stw	r3,4(r2)
      rc = 0;
  b5d988:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  b5d98c:	00000d06 	br	b5d9c4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  b5d990:	e0bffb17 	ldw	r2,-20(fp)
  b5d994:	10c00117 	ldw	r3,4(r2)
  b5d998:	00a00034 	movhi	r2,32768
  b5d99c:	10bfffc4 	addi	r2,r2,-1
  b5d9a0:	18800826 	beq	r3,r2,b5d9c4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  b5d9a4:	e13ffd17 	ldw	r4,-12(fp)
  b5d9a8:	e0bffb17 	ldw	r2,-20(fp)
  b5d9ac:	10c00917 	ldw	r3,36(r2)
  b5d9b0:	e0bffb17 	ldw	r2,-20(fp)
  b5d9b4:	10800117 	ldw	r2,4(r2)
  b5d9b8:	1885803a 	cmpltu	r2,r3,r2
  b5d9bc:	20800015 	stw	r2,0(r4)
      rc = 0;
  b5d9c0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  b5d9c4:	e0bffa17 	ldw	r2,-24(fp)
}
  b5d9c8:	e037883a 	mov	sp,fp
  b5d9cc:	df000017 	ldw	fp,0(sp)
  b5d9d0:	dec00104 	addi	sp,sp,4
  b5d9d4:	f800283a 	ret

00b5d9d8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  b5d9d8:	defff204 	addi	sp,sp,-56
  b5d9dc:	dfc00d15 	stw	ra,52(sp)
  b5d9e0:	df000c15 	stw	fp,48(sp)
  b5d9e4:	df000c04 	addi	fp,sp,48
  b5d9e8:	e13ffb15 	stw	r4,-20(fp)
  b5d9ec:	e17ffc15 	stw	r5,-16(fp)
  b5d9f0:	e1bffd15 	stw	r6,-12(fp)
  b5d9f4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  b5d9f8:	e0bffc17 	ldw	r2,-16(fp)
  b5d9fc:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  b5da00:	00004806 	br	b5db24 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  b5da04:	e0bffb17 	ldw	r2,-20(fp)
  b5da08:	10800a17 	ldw	r2,40(r2)
  b5da0c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  b5da10:	e0bffb17 	ldw	r2,-20(fp)
  b5da14:	10800b17 	ldw	r2,44(r2)
  b5da18:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  b5da1c:	e0fff717 	ldw	r3,-36(fp)
  b5da20:	e0bff617 	ldw	r2,-40(fp)
  b5da24:	18800536 	bltu	r3,r2,b5da3c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  b5da28:	e0bff717 	ldw	r2,-36(fp)
  b5da2c:	e0fff617 	ldw	r3,-40(fp)
  b5da30:	10c5c83a 	sub	r2,r2,r3
  b5da34:	e0bff815 	stw	r2,-32(fp)
  b5da38:	00000406 	br	b5da4c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  b5da3c:	00820004 	movi	r2,2048
  b5da40:	e0fff617 	ldw	r3,-40(fp)
  b5da44:	10c5c83a 	sub	r2,r2,r3
  b5da48:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  b5da4c:	e0bff817 	ldw	r2,-32(fp)
  b5da50:	1005003a 	cmpeq	r2,r2,zero
  b5da54:	10001f1e 	bne	r2,zero,b5dad4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  b5da58:	e0fffd17 	ldw	r3,-12(fp)
  b5da5c:	e0bff817 	ldw	r2,-32(fp)
  b5da60:	1880022e 	bgeu	r3,r2,b5da6c <altera_avalon_jtag_uart_read+0x94>
        n = space;
  b5da64:	e0bffd17 	ldw	r2,-12(fp)
  b5da68:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  b5da6c:	e0bffb17 	ldw	r2,-20(fp)
  b5da70:	10c00e04 	addi	r3,r2,56
  b5da74:	e0bff617 	ldw	r2,-40(fp)
  b5da78:	1887883a 	add	r3,r3,r2
  b5da7c:	e0bffa17 	ldw	r2,-24(fp)
  b5da80:	1009883a 	mov	r4,r2
  b5da84:	180b883a 	mov	r5,r3
  b5da88:	e1bff817 	ldw	r6,-32(fp)
  b5da8c:	0b590300 	call	b59030 <memcpy>
      ptr   += n;
  b5da90:	e0fff817 	ldw	r3,-32(fp)
  b5da94:	e0bffa17 	ldw	r2,-24(fp)
  b5da98:	10c5883a 	add	r2,r2,r3
  b5da9c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  b5daa0:	e0fffd17 	ldw	r3,-12(fp)
  b5daa4:	e0bff817 	ldw	r2,-32(fp)
  b5daa8:	1885c83a 	sub	r2,r3,r2
  b5daac:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  b5dab0:	e0fff617 	ldw	r3,-40(fp)
  b5dab4:	e0bff817 	ldw	r2,-32(fp)
  b5dab8:	1885883a 	add	r2,r3,r2
  b5dabc:	10c1ffcc 	andi	r3,r2,2047
  b5dac0:	e0bffb17 	ldw	r2,-20(fp)
  b5dac4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  b5dac8:	e0bffd17 	ldw	r2,-12(fp)
  b5dacc:	10800048 	cmpgei	r2,r2,1
  b5dad0:	103fcc1e 	bne	r2,zero,b5da04 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  b5dad4:	e0fffa17 	ldw	r3,-24(fp)
  b5dad8:	e0bffc17 	ldw	r2,-16(fp)
  b5dadc:	1880141e 	bne	r3,r2,b5db30 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  b5dae0:	e0bffe17 	ldw	r2,-8(fp)
  b5dae4:	1090000c 	andi	r2,r2,16384
  b5dae8:	1004c03a 	cmpne	r2,r2,zero
  b5daec:	1000101e 	bne	r2,zero,b5db30 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  b5daf0:	e0bffb17 	ldw	r2,-20(fp)
  b5daf4:	10c00a17 	ldw	r3,40(r2)
  b5daf8:	e0bff717 	ldw	r2,-36(fp)
  b5dafc:	1880051e 	bne	r3,r2,b5db14 <altera_avalon_jtag_uart_read+0x13c>
  b5db00:	e0bffb17 	ldw	r2,-20(fp)
  b5db04:	10c00917 	ldw	r3,36(r2)
  b5db08:	e0bffb17 	ldw	r2,-20(fp)
  b5db0c:	10800117 	ldw	r2,4(r2)
  b5db10:	18bff736 	bltu	r3,r2,b5daf0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  b5db14:	e0bffb17 	ldw	r2,-20(fp)
  b5db18:	10c00a17 	ldw	r3,40(r2)
  b5db1c:	e0bff717 	ldw	r2,-36(fp)
  b5db20:	18800326 	beq	r3,r2,b5db30 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  b5db24:	e0bffd17 	ldw	r2,-12(fp)
  b5db28:	10800048 	cmpgei	r2,r2,1
  b5db2c:	103fb51e 	bne	r2,zero,b5da04 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  b5db30:	e0fffa17 	ldw	r3,-24(fp)
  b5db34:	e0bffc17 	ldw	r2,-16(fp)
  b5db38:	18801926 	beq	r3,r2,b5dba0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  b5db3c:	0005303a 	rdctl	r2,status
  b5db40:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  b5db44:	e0fff517 	ldw	r3,-44(fp)
  b5db48:	00bfff84 	movi	r2,-2
  b5db4c:	1884703a 	and	r2,r3,r2
  b5db50:	1001703a 	wrctl	status,r2
  
  return context;
  b5db54:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  b5db58:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  b5db5c:	e0bffb17 	ldw	r2,-20(fp)
  b5db60:	10800817 	ldw	r2,32(r2)
  b5db64:	10c00054 	ori	r3,r2,1
  b5db68:	e0bffb17 	ldw	r2,-20(fp)
  b5db6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  b5db70:	e0bffb17 	ldw	r2,-20(fp)
  b5db74:	10800017 	ldw	r2,0(r2)
  b5db78:	11000104 	addi	r4,r2,4
  b5db7c:	e0bffb17 	ldw	r2,-20(fp)
  b5db80:	10800817 	ldw	r2,32(r2)
  b5db84:	1007883a 	mov	r3,r2
  b5db88:	2005883a 	mov	r2,r4
  b5db8c:	10c00035 	stwio	r3,0(r2)
  b5db90:	e0bff917 	ldw	r2,-28(fp)
  b5db94:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  b5db98:	e0bff417 	ldw	r2,-48(fp)
  b5db9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  b5dba0:	e0fffa17 	ldw	r3,-24(fp)
  b5dba4:	e0bffc17 	ldw	r2,-16(fp)
  b5dba8:	18800526 	beq	r3,r2,b5dbc0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  b5dbac:	e0fffa17 	ldw	r3,-24(fp)
  b5dbb0:	e0bffc17 	ldw	r2,-16(fp)
  b5dbb4:	1887c83a 	sub	r3,r3,r2
  b5dbb8:	e0ffff15 	stw	r3,-4(fp)
  b5dbbc:	00000906 	br	b5dbe4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  b5dbc0:	e0bffe17 	ldw	r2,-8(fp)
  b5dbc4:	1090000c 	andi	r2,r2,16384
  b5dbc8:	1005003a 	cmpeq	r2,r2,zero
  b5dbcc:	1000031e 	bne	r2,zero,b5dbdc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  b5dbd0:	00bffd44 	movi	r2,-11
  b5dbd4:	e0bfff15 	stw	r2,-4(fp)
  b5dbd8:	00000206 	br	b5dbe4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  b5dbdc:	00bffec4 	movi	r2,-5
  b5dbe0:	e0bfff15 	stw	r2,-4(fp)
  b5dbe4:	e0bfff17 	ldw	r2,-4(fp)
}
  b5dbe8:	e037883a 	mov	sp,fp
  b5dbec:	dfc00117 	ldw	ra,4(sp)
  b5dbf0:	df000017 	ldw	fp,0(sp)
  b5dbf4:	dec00204 	addi	sp,sp,8
  b5dbf8:	f800283a 	ret

00b5dbfc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  b5dbfc:	defff204 	addi	sp,sp,-56
  b5dc00:	dfc00d15 	stw	ra,52(sp)
  b5dc04:	df000c15 	stw	fp,48(sp)
  b5dc08:	df000c04 	addi	fp,sp,48
  b5dc0c:	e13ffb15 	stw	r4,-20(fp)
  b5dc10:	e17ffc15 	stw	r5,-16(fp)
  b5dc14:	e1bffd15 	stw	r6,-12(fp)
  b5dc18:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  b5dc1c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  b5dc20:	e0bffc17 	ldw	r2,-16(fp)
  b5dc24:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  b5dc28:	00003a06 	br	b5dd14 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  b5dc2c:	e0bffb17 	ldw	r2,-20(fp)
  b5dc30:	10800c17 	ldw	r2,48(r2)
  b5dc34:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  b5dc38:	e0bffb17 	ldw	r2,-20(fp)
  b5dc3c:	10800d17 	ldw	r2,52(r2)
  b5dc40:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  b5dc44:	e0fffa17 	ldw	r3,-24(fp)
  b5dc48:	e0bff917 	ldw	r2,-28(fp)
  b5dc4c:	1880062e 	bgeu	r3,r2,b5dc68 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  b5dc50:	e0fff917 	ldw	r3,-28(fp)
  b5dc54:	e0bffa17 	ldw	r2,-24(fp)
  b5dc58:	1885c83a 	sub	r2,r3,r2
  b5dc5c:	10bfffc4 	addi	r2,r2,-1
  b5dc60:	e0bff815 	stw	r2,-32(fp)
  b5dc64:	00000c06 	br	b5dc98 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  b5dc68:	e0bff917 	ldw	r2,-28(fp)
  b5dc6c:	1005003a 	cmpeq	r2,r2,zero
  b5dc70:	1000051e 	bne	r2,zero,b5dc88 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  b5dc74:	00820004 	movi	r2,2048
  b5dc78:	e0fffa17 	ldw	r3,-24(fp)
  b5dc7c:	10c5c83a 	sub	r2,r2,r3
  b5dc80:	e0bff815 	stw	r2,-32(fp)
  b5dc84:	00000406 	br	b5dc98 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  b5dc88:	0081ffc4 	movi	r2,2047
  b5dc8c:	e0fffa17 	ldw	r3,-24(fp)
  b5dc90:	10c5c83a 	sub	r2,r2,r3
  b5dc94:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  b5dc98:	e0bff817 	ldw	r2,-32(fp)
  b5dc9c:	1005003a 	cmpeq	r2,r2,zero
  b5dca0:	10001f1e 	bne	r2,zero,b5dd20 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  b5dca4:	e0fffd17 	ldw	r3,-12(fp)
  b5dca8:	e0bff817 	ldw	r2,-32(fp)
  b5dcac:	1880022e 	bgeu	r3,r2,b5dcb8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  b5dcb0:	e0bffd17 	ldw	r2,-12(fp)
  b5dcb4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  b5dcb8:	e0bffb17 	ldw	r2,-20(fp)
  b5dcbc:	10c20e04 	addi	r3,r2,2104
  b5dcc0:	e0bffa17 	ldw	r2,-24(fp)
  b5dcc4:	1885883a 	add	r2,r3,r2
  b5dcc8:	e0fffc17 	ldw	r3,-16(fp)
  b5dccc:	1009883a 	mov	r4,r2
  b5dcd0:	180b883a 	mov	r5,r3
  b5dcd4:	e1bff817 	ldw	r6,-32(fp)
  b5dcd8:	0b590300 	call	b59030 <memcpy>
      ptr   += n;
  b5dcdc:	e0fff817 	ldw	r3,-32(fp)
  b5dce0:	e0bffc17 	ldw	r2,-16(fp)
  b5dce4:	10c5883a 	add	r2,r2,r3
  b5dce8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  b5dcec:	e0fffd17 	ldw	r3,-12(fp)
  b5dcf0:	e0bff817 	ldw	r2,-32(fp)
  b5dcf4:	1885c83a 	sub	r2,r3,r2
  b5dcf8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  b5dcfc:	e0fffa17 	ldw	r3,-24(fp)
  b5dd00:	e0bff817 	ldw	r2,-32(fp)
  b5dd04:	1885883a 	add	r2,r3,r2
  b5dd08:	10c1ffcc 	andi	r3,r2,2047
  b5dd0c:	e0bffb17 	ldw	r2,-20(fp)
  b5dd10:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  b5dd14:	e0bffd17 	ldw	r2,-12(fp)
  b5dd18:	10800048 	cmpgei	r2,r2,1
  b5dd1c:	103fc31e 	bne	r2,zero,b5dc2c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  b5dd20:	0005303a 	rdctl	r2,status
  b5dd24:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  b5dd28:	e0fff517 	ldw	r3,-44(fp)
  b5dd2c:	00bfff84 	movi	r2,-2
  b5dd30:	1884703a 	and	r2,r3,r2
  b5dd34:	1001703a 	wrctl	status,r2
  
  return context;
  b5dd38:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  b5dd3c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  b5dd40:	e0bffb17 	ldw	r2,-20(fp)
  b5dd44:	10800817 	ldw	r2,32(r2)
  b5dd48:	10c00094 	ori	r3,r2,2
  b5dd4c:	e0bffb17 	ldw	r2,-20(fp)
  b5dd50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  b5dd54:	e0bffb17 	ldw	r2,-20(fp)
  b5dd58:	10800017 	ldw	r2,0(r2)
  b5dd5c:	11000104 	addi	r4,r2,4
  b5dd60:	e0bffb17 	ldw	r2,-20(fp)
  b5dd64:	10800817 	ldw	r2,32(r2)
  b5dd68:	1007883a 	mov	r3,r2
  b5dd6c:	2005883a 	mov	r2,r4
  b5dd70:	10c00035 	stwio	r3,0(r2)
  b5dd74:	e0bff717 	ldw	r2,-36(fp)
  b5dd78:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  b5dd7c:	e0bff417 	ldw	r2,-48(fp)
  b5dd80:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  b5dd84:	e0bffd17 	ldw	r2,-12(fp)
  b5dd88:	10800050 	cmplti	r2,r2,1
  b5dd8c:	1000111e 	bne	r2,zero,b5ddd4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  b5dd90:	e0bffe17 	ldw	r2,-8(fp)
  b5dd94:	1090000c 	andi	r2,r2,16384
  b5dd98:	1004c03a 	cmpne	r2,r2,zero
  b5dd9c:	1000101e 	bne	r2,zero,b5dde0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  b5dda0:	e0bffb17 	ldw	r2,-20(fp)
  b5dda4:	10c00d17 	ldw	r3,52(r2)
  b5dda8:	e0bff917 	ldw	r2,-28(fp)
  b5ddac:	1880051e 	bne	r3,r2,b5ddc4 <altera_avalon_jtag_uart_write+0x1c8>
  b5ddb0:	e0bffb17 	ldw	r2,-20(fp)
  b5ddb4:	10c00917 	ldw	r3,36(r2)
  b5ddb8:	e0bffb17 	ldw	r2,-20(fp)
  b5ddbc:	10800117 	ldw	r2,4(r2)
  b5ddc0:	18bff736 	bltu	r3,r2,b5dda0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  b5ddc4:	e0bffb17 	ldw	r2,-20(fp)
  b5ddc8:	10c00d17 	ldw	r3,52(r2)
  b5ddcc:	e0bff917 	ldw	r2,-28(fp)
  b5ddd0:	18800326 	beq	r3,r2,b5dde0 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  b5ddd4:	e0bffd17 	ldw	r2,-12(fp)
  b5ddd8:	10800048 	cmpgei	r2,r2,1
  b5dddc:	103fcd1e 	bne	r2,zero,b5dd14 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  b5dde0:	e0fffc17 	ldw	r3,-16(fp)
  b5dde4:	e0bff617 	ldw	r2,-40(fp)
  b5dde8:	18800526 	beq	r3,r2,b5de00 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  b5ddec:	e0fffc17 	ldw	r3,-16(fp)
  b5ddf0:	e0bff617 	ldw	r2,-40(fp)
  b5ddf4:	1887c83a 	sub	r3,r3,r2
  b5ddf8:	e0ffff15 	stw	r3,-4(fp)
  b5ddfc:	00000906 	br	b5de24 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  b5de00:	e0bffe17 	ldw	r2,-8(fp)
  b5de04:	1090000c 	andi	r2,r2,16384
  b5de08:	1005003a 	cmpeq	r2,r2,zero
  b5de0c:	1000031e 	bne	r2,zero,b5de1c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  b5de10:	00bffd44 	movi	r2,-11
  b5de14:	e0bfff15 	stw	r2,-4(fp)
  b5de18:	00000206 	br	b5de24 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  b5de1c:	00bffec4 	movi	r2,-5
  b5de20:	e0bfff15 	stw	r2,-4(fp)
  b5de24:	e0bfff17 	ldw	r2,-4(fp)
}
  b5de28:	e037883a 	mov	sp,fp
  b5de2c:	dfc00117 	ldw	ra,4(sp)
  b5de30:	df000017 	ldw	fp,0(sp)
  b5de34:	dec00204 	addi	sp,sp,8
  b5de38:	f800283a 	ret

00b5de3c <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
  b5de3c:	defffa04 	addi	sp,sp,-24
  b5de40:	dfc00515 	stw	ra,20(sp)
  b5de44:	df000415 	stw	fp,16(sp)
  b5de48:	df000404 	addi	fp,sp,16
  b5de4c:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
  b5de50:	e0bfff17 	ldw	r2,-4(fp)
  b5de54:	11000704 	addi	r4,r2,28
  b5de58:	0b5df940 	call	b5df94 <alt_avalon_mutex_reg>
  b5de5c:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
  b5de60:	e0bffe17 	ldw	r2,-8(fp)
  b5de64:	1004c03a 	cmpne	r2,r2,zero
  b5de68:	1000041e 	bne	r2,zero,b5de7c <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
  b5de6c:	e0bfff17 	ldw	r2,-4(fp)
  b5de70:	11000b04 	addi	r4,r2,44
  b5de74:	0b5df940 	call	b5df94 <alt_avalon_mutex_reg>
  b5de78:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  b5de7c:	e0bffe17 	ldw	r2,-8(fp)
  b5de80:	1004c03a 	cmpne	r2,r2,zero
  b5de84:	1000041e 	bne	r2,zero,b5de98 <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
  b5de88:	e13fff17 	ldw	r4,-4(fp)
  b5de8c:	d1601504 	addi	r5,gp,-32684
  b5de90:	0b5fd6c0 	call	b5fd6c <alt_dev_llist_insert>
  b5de94:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  b5de98:	e0bffe17 	ldw	r2,-8(fp)
  b5de9c:	1004c03a 	cmpne	r2,r2,zero
  b5dea0:	1000361e 	bne	r2,zero,b5df7c <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
  b5dea4:	e0bfff17 	ldw	r2,-4(fp)
  b5dea8:	11000917 	ldw	r4,36(r2)
  b5deac:	0b5e3e00 	call	b5e3e0 <altera_avalon_mutex_open>
  b5deb0:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
  b5deb4:	e0bffd17 	ldw	r2,-12(fp)
  b5deb8:	1005003a 	cmpeq	r2,r2,zero
  b5debc:	10002f1e 	bne	r2,zero,b5df7c <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
  b5dec0:	e0bfff17 	ldw	r2,-4(fp)
  b5dec4:	11000d17 	ldw	r4,52(r2)
  b5dec8:	0b5e3e00 	call	b5e3e0 <altera_avalon_mutex_open>
  b5decc:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
  b5ded0:	e0bffc17 	ldw	r2,-16(fp)
  b5ded4:	1005003a 	cmpeq	r2,r2,zero
  b5ded8:	1000281e 	bne	r2,zero,b5df7c <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  b5dedc:	00000f06 	br	b5df1c <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
  b5dee0:	e13ffd17 	ldw	r4,-12(fp)
  b5dee4:	01400044 	movi	r5,1
  b5dee8:	0b5e4f80 	call	b5e4f8 <altera_avalon_mutex_trylock>
  b5deec:	1004c03a 	cmpne	r2,r2,zero
  b5def0:	10000a1e 	bne	r2,zero,b5df1c <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
  b5def4:	e0bfff17 	ldw	r2,-4(fp)
  b5def8:	10800317 	ldw	r2,12(r2)
  b5defc:	1009883a 	mov	r4,r2
  b5df00:	e0bfff17 	ldw	r2,-4(fp)
  b5df04:	10800517 	ldw	r2,20(r2)
  b5df08:	1007883a 	mov	r3,r2
  b5df0c:	2005883a 	mov	r2,r4
  b5df10:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
  b5df14:	e13ffd17 	ldw	r4,-12(fp)
  b5df18:	0b5e5380 	call	b5e538 <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  b5df1c:	e13ffd17 	ldw	r4,-12(fp)
  b5df20:	0b5e6100 	call	b5e610 <altera_avalon_mutex_first_lock>
  b5df24:	1004c03a 	cmpne	r2,r2,zero
  b5df28:	103fed1e 	bne	r2,zero,b5dee0 <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  b5df2c:	00000f06 	br	b5df6c <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
  b5df30:	e13ffc17 	ldw	r4,-16(fp)
  b5df34:	01400044 	movi	r5,1
  b5df38:	0b5e4f80 	call	b5e4f8 <altera_avalon_mutex_trylock>
  b5df3c:	1004c03a 	cmpne	r2,r2,zero
  b5df40:	10000a1e 	bne	r2,zero,b5df6c <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
  b5df44:	e0bfff17 	ldw	r2,-4(fp)
  b5df48:	10800417 	ldw	r2,16(r2)
  b5df4c:	1009883a 	mov	r4,r2
  b5df50:	e0bfff17 	ldw	r2,-4(fp)
  b5df54:	10800517 	ldw	r2,20(r2)
  b5df58:	1007883a 	mov	r3,r2
  b5df5c:	2005883a 	mov	r2,r4
  b5df60:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
  b5df64:	e13ffc17 	ldw	r4,-16(fp)
  b5df68:	0b5e5380 	call	b5e538 <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  b5df6c:	e13ffc17 	ldw	r4,-16(fp)
  b5df70:	0b5e6100 	call	b5e610 <altera_avalon_mutex_first_lock>
  b5df74:	1004c03a 	cmpne	r2,r2,zero
  b5df78:	103fed1e 	bne	r2,zero,b5df30 <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
  b5df7c:	e0bffe17 	ldw	r2,-8(fp)
}
  b5df80:	e037883a 	mov	sp,fp
  b5df84:	dfc00117 	ldw	ra,4(sp)
  b5df88:	df000017 	ldw	fp,0(sp)
  b5df8c:	dec00204 	addi	sp,sp,8
  b5df90:	f800283a 	ret

00b5df94 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
  b5df94:	defffc04 	addi	sp,sp,-16
  b5df98:	dfc00315 	stw	ra,12(sp)
  b5df9c:	df000215 	stw	fp,8(sp)
  b5dfa0:	df000204 	addi	fp,sp,8
  b5dfa4:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  b5dfa8:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  b5dfac:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
  b5dfb0:	e0bffe17 	ldw	r2,-8(fp)
  b5dfb4:	1004c03a 	cmpne	r2,r2,zero
  b5dfb8:	1000061e 	bne	r2,zero,b5dfd4 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
  b5dfbc:	e13fff17 	ldw	r4,-4(fp)
  b5dfc0:	01402db4 	movhi	r5,182
  b5dfc4:	294c0804 	addi	r5,r5,12320
  b5dfc8:	0b5fd6c0 	call	b5fd6c <alt_dev_llist_insert>
  b5dfcc:	e0bffe15 	stw	r2,-8(fp)
  b5dfd0:	00000506 	br	b5dfe8 <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
  b5dfd4:	0b5e0000 	call	b5e000 <alt_get_errno>
  b5dfd8:	00c00304 	movi	r3,12
  b5dfdc:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
  b5dfe0:	00bffd04 	movi	r2,-12
  b5dfe4:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
  b5dfe8:	e0bffe17 	ldw	r2,-8(fp)
}
  b5dfec:	e037883a 	mov	sp,fp
  b5dff0:	dfc00117 	ldw	ra,4(sp)
  b5dff4:	df000017 	ldw	fp,0(sp)
  b5dff8:	dec00204 	addi	sp,sp,8
  b5dffc:	f800283a 	ret

00b5e000 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  b5e000:	defffd04 	addi	sp,sp,-12
  b5e004:	dfc00215 	stw	ra,8(sp)
  b5e008:	df000115 	stw	fp,4(sp)
  b5e00c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  b5e010:	00802db4 	movhi	r2,182
  b5e014:	108c0404 	addi	r2,r2,12304
  b5e018:	10800017 	ldw	r2,0(r2)
  b5e01c:	1005003a 	cmpeq	r2,r2,zero
  b5e020:	1000061e 	bne	r2,zero,b5e03c <alt_get_errno+0x3c>
  b5e024:	00802db4 	movhi	r2,182
  b5e028:	108c0404 	addi	r2,r2,12304
  b5e02c:	10800017 	ldw	r2,0(r2)
  b5e030:	103ee83a 	callr	r2
  b5e034:	e0bfff15 	stw	r2,-4(fp)
  b5e038:	00000306 	br	b5e048 <alt_get_errno+0x48>
  b5e03c:	00802db4 	movhi	r2,182
  b5e040:	10930a04 	addi	r2,r2,19496
  b5e044:	e0bfff15 	stw	r2,-4(fp)
  b5e048:	e0bfff17 	ldw	r2,-4(fp)
}
  b5e04c:	e037883a 	mov	sp,fp
  b5e050:	dfc00117 	ldw	ra,4(sp)
  b5e054:	df000017 	ldw	fp,0(sp)
  b5e058:	dec00204 	addi	sp,sp,8
  b5e05c:	f800283a 	ret

00b5e060 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
  b5e060:	defffc04 	addi	sp,sp,-16
  b5e064:	dfc00315 	stw	ra,12(sp)
  b5e068:	df000215 	stw	fp,8(sp)
  b5e06c:	df000204 	addi	fp,sp,8
  b5e070:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
  b5e074:	e13fff17 	ldw	r4,-4(fp)
  b5e078:	d1601504 	addi	r5,gp,-32684
  b5e07c:	0b5ff480 	call	b5ff48 <alt_find_dev>
  b5e080:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  b5e084:	e0bffe17 	ldw	r2,-8(fp)
  b5e088:	1004c03a 	cmpne	r2,r2,zero
  b5e08c:	1000041e 	bne	r2,zero,b5e0a0 <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  b5e090:	0b5e0000 	call	b5e000 <alt_get_errno>
  b5e094:	1007883a 	mov	r3,r2
  b5e098:	008004c4 	movi	r2,19
  b5e09c:	18800015 	stw	r2,0(r3)
  }

  return dev;
  b5e0a0:	e0bffe17 	ldw	r2,-8(fp)

}
  b5e0a4:	e037883a 	mov	sp,fp
  b5e0a8:	dfc00117 	ldw	ra,4(sp)
  b5e0ac:	df000017 	ldw	fp,0(sp)
  b5e0b0:	dec00204 	addi	sp,sp,8
  b5e0b4:	f800283a 	ret

00b5e0b8 <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
  b5e0b8:	defffe04 	addi	sp,sp,-8
  b5e0bc:	df000115 	stw	fp,4(sp)
  b5e0c0:	df000104 	addi	fp,sp,4
  b5e0c4:	e13fff15 	stw	r4,-4(fp)
  return;
}
  b5e0c8:	e037883a 	mov	sp,fp
  b5e0cc:	df000017 	ldw	fp,0(sp)
  b5e0d0:	dec00104 	addi	sp,sp,4
  b5e0d4:	f800283a 	ret

00b5e0d8 <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
  b5e0d8:	defff904 	addi	sp,sp,-28
  b5e0dc:	dfc00615 	stw	ra,24(sp)
  b5e0e0:	df000515 	stw	fp,20(sp)
  b5e0e4:	df000504 	addi	fp,sp,20
  b5e0e8:	e13ffe15 	stw	r4,-8(fp)
  b5e0ec:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  b5e0f0:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
  b5e0f4:	e0bffe17 	ldw	r2,-8(fp)
  b5e0f8:	11000704 	addi	r4,r2,28
  b5e0fc:	01400044 	movi	r5,1
  b5e100:	0b5e4b80 	call	b5e4b8 <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
  b5e104:	e0bffe17 	ldw	r2,-8(fp)
  b5e108:	10800317 	ldw	r2,12(r2)
  b5e10c:	10800037 	ldwio	r2,0(r2)
  b5e110:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
  b5e114:	e13ffe17 	ldw	r4,-8(fp)
  b5e118:	e17ffc17 	ldw	r5,-16(fp)
  b5e11c:	0b5e1940 	call	b5e194 <alt_mailbox_increment_ptr>
  b5e120:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
  b5e124:	e0bffe17 	ldw	r2,-8(fp)
  b5e128:	10800417 	ldw	r2,16(r2)
  b5e12c:	10800037 	ldwio	r2,0(r2)
  b5e130:	1007883a 	mov	r3,r2
  b5e134:	e0bffb17 	ldw	r2,-20(fp)
  b5e138:	1880061e 	bne	r3,r2,b5e154 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
  b5e13c:	0b5e0000 	call	b5e000 <alt_get_errno>
  b5e140:	00c002c4 	movi	r3,11
  b5e144:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
  b5e148:	00bffd44 	movi	r2,-11
  b5e14c:	e0bffd15 	stw	r2,-12(fp)
  b5e150:	00000706 	br	b5e170 <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
  b5e154:	e0bffc17 	ldw	r2,-16(fp)
  b5e158:	e0ffff17 	ldw	r3,-4(fp)
  b5e15c:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
  b5e160:	e0bffe17 	ldw	r2,-8(fp)
  b5e164:	10800317 	ldw	r2,12(r2)
  b5e168:	e0fffb17 	ldw	r3,-20(fp)
  b5e16c:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
  b5e170:	e0bffe17 	ldw	r2,-8(fp)
  b5e174:	11000704 	addi	r4,r2,28
  b5e178:	0b5e5380 	call	b5e538 <altera_avalon_mutex_unlock>

  return ret_code;
  b5e17c:	e0bffd17 	ldw	r2,-12(fp)

}
  b5e180:	e037883a 	mov	sp,fp
  b5e184:	dfc00117 	ldw	ra,4(sp)
  b5e188:	df000017 	ldw	fp,0(sp)
  b5e18c:	dec00204 	addi	sp,sp,8
  b5e190:	f800283a 	ret

00b5e194 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
  b5e194:	defffd04 	addi	sp,sp,-12
  b5e198:	df000215 	stw	fp,8(sp)
  b5e19c:	df000204 	addi	fp,sp,8
  b5e1a0:	e13ffe15 	stw	r4,-8(fp)
  b5e1a4:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
  b5e1a8:	e0bfff17 	ldw	r2,-4(fp)
  b5e1ac:	10800104 	addi	r2,r2,4
  b5e1b0:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
  b5e1b4:	e0bffe17 	ldw	r2,-8(fp)
  b5e1b8:	10c00617 	ldw	r3,24(r2)
  b5e1bc:	e0bfff17 	ldw	r2,-4(fp)
  b5e1c0:	1880032e 	bgeu	r3,r2,b5e1d0 <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
  b5e1c4:	e0bffe17 	ldw	r2,-8(fp)
  b5e1c8:	10800517 	ldw	r2,20(r2)
  b5e1cc:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
  b5e1d0:	e0bfff17 	ldw	r2,-4(fp)
}
  b5e1d4:	e037883a 	mov	sp,fp
  b5e1d8:	df000017 	ldw	fp,0(sp)
  b5e1dc:	dec00104 	addi	sp,sp,4
  b5e1e0:	f800283a 	ret

00b5e1e4 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
  b5e1e4:	defffa04 	addi	sp,sp,-24
  b5e1e8:	dfc00515 	stw	ra,20(sp)
  b5e1ec:	df000415 	stw	fp,16(sp)
  b5e1f0:	dc000315 	stw	r16,12(sp)
  b5e1f4:	df000304 	addi	fp,sp,12
  b5e1f8:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  b5e1fc:	e0bfff17 	ldw	r2,-4(fp)
  b5e200:	11000b04 	addi	r4,r2,44
  b5e204:	01400044 	movi	r5,1
  b5e208:	0b5e4b80 	call	b5e4b8 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  b5e20c:	e0bfff17 	ldw	r2,-4(fp)
  b5e210:	10800417 	ldw	r2,16(r2)
  b5e214:	10800037 	ldwio	r2,0(r2)
  b5e218:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
  b5e21c:	e0bfff17 	ldw	r2,-4(fp)
  b5e220:	10800317 	ldw	r2,12(r2)
  b5e224:	10800037 	ldwio	r2,0(r2)
  b5e228:	1007883a 	mov	r3,r2
  b5e22c:	e0bffd17 	ldw	r2,-12(fp)
  b5e230:	18bffa26 	beq	r3,r2,b5e21c <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
  b5e234:	e0bffd17 	ldw	r2,-12(fp)
  b5e238:	10800037 	ldwio	r2,0(r2)
  b5e23c:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
  b5e240:	e0bfff17 	ldw	r2,-4(fp)
  b5e244:	10800417 	ldw	r2,16(r2)
  b5e248:	1021883a 	mov	r16,r2
  b5e24c:	e13fff17 	ldw	r4,-4(fp)
  b5e250:	e17ffd17 	ldw	r5,-12(fp)
  b5e254:	0b5e1940 	call	b5e194 <alt_mailbox_increment_ptr>
  b5e258:	1007883a 	mov	r3,r2
  b5e25c:	8005883a 	mov	r2,r16
  b5e260:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
  b5e264:	e0bfff17 	ldw	r2,-4(fp)
  b5e268:	11000b04 	addi	r4,r2,44
  b5e26c:	0b5e5380 	call	b5e538 <altera_avalon_mutex_unlock>

  return msg;
  b5e270:	e0bffe17 	ldw	r2,-8(fp)

}
  b5e274:	e037883a 	mov	sp,fp
  b5e278:	dfc00217 	ldw	ra,8(sp)
  b5e27c:	df000117 	ldw	fp,4(sp)
  b5e280:	dc000017 	ldw	r16,0(sp)
  b5e284:	dec00304 	addi	sp,sp,12
  b5e288:	f800283a 	ret

00b5e28c <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
  b5e28c:	defff904 	addi	sp,sp,-28
  b5e290:	dfc00615 	stw	ra,24(sp)
  b5e294:	df000515 	stw	fp,20(sp)
  b5e298:	dc000415 	stw	r16,16(sp)
  b5e29c:	df000404 	addi	fp,sp,16
  b5e2a0:	e13ffe15 	stw	r4,-8(fp)
  b5e2a4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
  b5e2a8:	e0bfff17 	ldw	r2,-4(fp)
  b5e2ac:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  b5e2b0:	e0bffe17 	ldw	r2,-8(fp)
  b5e2b4:	11000b04 	addi	r4,r2,44
  b5e2b8:	01400044 	movi	r5,1
  b5e2bc:	0b5e4b80 	call	b5e4b8 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  b5e2c0:	e0bffe17 	ldw	r2,-8(fp)
  b5e2c4:	10800417 	ldw	r2,16(r2)
  b5e2c8:	10800037 	ldwio	r2,0(r2)
  b5e2cc:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
  b5e2d0:	e0bffe17 	ldw	r2,-8(fp)
  b5e2d4:	10800317 	ldw	r2,12(r2)
  b5e2d8:	10800037 	ldwio	r2,0(r2)
  b5e2dc:	1007883a 	mov	r3,r2
  b5e2e0:	e0bffc17 	ldw	r2,-16(fp)
  b5e2e4:	1880091e 	bne	r3,r2,b5e30c <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
  b5e2e8:	e0ffff17 	ldw	r3,-4(fp)
  b5e2ec:	00bffd44 	movi	r2,-11
  b5e2f0:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
  b5e2f4:	0b5e0000 	call	b5e000 <alt_get_errno>
  b5e2f8:	1007883a 	mov	r3,r2
  b5e2fc:	008002c4 	movi	r2,11
  b5e300:	18800015 	stw	r2,0(r3)
    msg = 0;
  b5e304:	e03ffd15 	stw	zero,-12(fp)
  b5e308:	00000c06 	br	b5e33c <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
  b5e30c:	e0bffc17 	ldw	r2,-16(fp)
  b5e310:	10800037 	ldwio	r2,0(r2)
  b5e314:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
  b5e318:	e0bffe17 	ldw	r2,-8(fp)
  b5e31c:	10800417 	ldw	r2,16(r2)
  b5e320:	1021883a 	mov	r16,r2
  b5e324:	e13ffe17 	ldw	r4,-8(fp)
  b5e328:	e17ffc17 	ldw	r5,-16(fp)
  b5e32c:	0b5e1940 	call	b5e194 <alt_mailbox_increment_ptr>
  b5e330:	1007883a 	mov	r3,r2
  b5e334:	8005883a 	mov	r2,r16
  b5e338:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
  b5e33c:	e0bffe17 	ldw	r2,-8(fp)
  b5e340:	11000b04 	addi	r4,r2,44
  b5e344:	0b5e5380 	call	b5e538 <altera_avalon_mutex_unlock>

  return msg;
  b5e348:	e0bffd17 	ldw	r2,-12(fp)

}
  b5e34c:	e037883a 	mov	sp,fp
  b5e350:	dfc00217 	ldw	ra,8(sp)
  b5e354:	df000117 	ldw	fp,4(sp)
  b5e358:	dc000017 	ldw	r16,0(sp)
  b5e35c:	dec00304 	addi	sp,sp,12
  b5e360:	f800283a 	ret

00b5e364 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  b5e364:	defff904 	addi	sp,sp,-28
  b5e368:	df000615 	stw	fp,24(sp)
  b5e36c:	df000604 	addi	fp,sp,24
  b5e370:	e13ffe15 	stw	r4,-8(fp)
  b5e374:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
  b5e378:	00bfffc4 	movi	r2,-1
  b5e37c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
  b5e380:	0005317a 	rdctl	r2,cpuid
  b5e384:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
  b5e388:	e0bffd17 	ldw	r2,-12(fp)
  b5e38c:	1006943a 	slli	r3,r2,16
  b5e390:	e0bfff17 	ldw	r2,-4(fp)
  b5e394:	1884b03a 	or	r2,r3,r2
  b5e398:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
  b5e39c:	e0bffe17 	ldw	r2,-8(fp)
  b5e3a0:	10800317 	ldw	r2,12(r2)
  b5e3a4:	e0fffc17 	ldw	r3,-16(fp)
  b5e3a8:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  b5e3ac:	e0bffe17 	ldw	r2,-8(fp)
  b5e3b0:	10800317 	ldw	r2,12(r2)
  b5e3b4:	10800037 	ldwio	r2,0(r2)
  b5e3b8:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
  b5e3bc:	e0fffb17 	ldw	r3,-20(fp)
  b5e3c0:	e0bffc17 	ldw	r2,-16(fp)
  b5e3c4:	1880011e 	bne	r3,r2,b5e3cc <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
  b5e3c8:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
  b5e3cc:	e0bffa17 	ldw	r2,-24(fp)
}
  b5e3d0:	e037883a 	mov	sp,fp
  b5e3d4:	df000017 	ldw	fp,0(sp)
  b5e3d8:	dec00104 	addi	sp,sp,4
  b5e3dc:	f800283a 	ret

00b5e3e0 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
  b5e3e0:	defffc04 	addi	sp,sp,-16
  b5e3e4:	dfc00315 	stw	ra,12(sp)
  b5e3e8:	df000215 	stw	fp,8(sp)
  b5e3ec:	df000204 	addi	fp,sp,8
  b5e3f0:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
  b5e3f4:	e13fff17 	ldw	r4,-4(fp)
  b5e3f8:	d1601704 	addi	r5,gp,-32676
  b5e3fc:	0b5ff480 	call	b5ff48 <alt_find_dev>
  b5e400:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  b5e404:	e0bffe17 	ldw	r2,-8(fp)
  b5e408:	1004c03a 	cmpne	r2,r2,zero
  b5e40c:	1000041e 	bne	r2,zero,b5e420 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  b5e410:	0b5e4380 	call	b5e438 <alt_get_errno>
  b5e414:	1007883a 	mov	r3,r2
  b5e418:	008004c4 	movi	r2,19
  b5e41c:	18800015 	stw	r2,0(r3)
  }

  return dev;
  b5e420:	e0bffe17 	ldw	r2,-8(fp)
}
  b5e424:	e037883a 	mov	sp,fp
  b5e428:	dfc00117 	ldw	ra,4(sp)
  b5e42c:	df000017 	ldw	fp,0(sp)
  b5e430:	dec00204 	addi	sp,sp,8
  b5e434:	f800283a 	ret

00b5e438 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  b5e438:	defffd04 	addi	sp,sp,-12
  b5e43c:	dfc00215 	stw	ra,8(sp)
  b5e440:	df000115 	stw	fp,4(sp)
  b5e444:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  b5e448:	00802db4 	movhi	r2,182
  b5e44c:	108c0404 	addi	r2,r2,12304
  b5e450:	10800017 	ldw	r2,0(r2)
  b5e454:	1005003a 	cmpeq	r2,r2,zero
  b5e458:	1000061e 	bne	r2,zero,b5e474 <alt_get_errno+0x3c>
  b5e45c:	00802db4 	movhi	r2,182
  b5e460:	108c0404 	addi	r2,r2,12304
  b5e464:	10800017 	ldw	r2,0(r2)
  b5e468:	103ee83a 	callr	r2
  b5e46c:	e0bfff15 	stw	r2,-4(fp)
  b5e470:	00000306 	br	b5e480 <alt_get_errno+0x48>
  b5e474:	00802db4 	movhi	r2,182
  b5e478:	10930a04 	addi	r2,r2,19496
  b5e47c:	e0bfff15 	stw	r2,-4(fp)
  b5e480:	e0bfff17 	ldw	r2,-4(fp)
}
  b5e484:	e037883a 	mov	sp,fp
  b5e488:	dfc00117 	ldw	ra,4(sp)
  b5e48c:	df000017 	ldw	fp,0(sp)
  b5e490:	dec00204 	addi	sp,sp,8
  b5e494:	f800283a 	ret

00b5e498 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
  b5e498:	defffe04 	addi	sp,sp,-8
  b5e49c:	df000115 	stw	fp,4(sp)
  b5e4a0:	df000104 	addi	fp,sp,4
  b5e4a4:	e13fff15 	stw	r4,-4(fp)
  return;
}
  b5e4a8:	e037883a 	mov	sp,fp
  b5e4ac:	df000017 	ldw	fp,0(sp)
  b5e4b0:	dec00104 	addi	sp,sp,4
  b5e4b4:	f800283a 	ret

00b5e4b8 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
  b5e4b8:	defffc04 	addi	sp,sp,-16
  b5e4bc:	dfc00315 	stw	ra,12(sp)
  b5e4c0:	df000215 	stw	fp,8(sp)
  b5e4c4:	df000204 	addi	fp,sp,8
  b5e4c8:	e13ffe15 	stw	r4,-8(fp)
  b5e4cc:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
  b5e4d0:	e13ffe17 	ldw	r4,-8(fp)
  b5e4d4:	e17fff17 	ldw	r5,-4(fp)
  b5e4d8:	0b5e3640 	call	b5e364 <alt_mutex_trylock>
  b5e4dc:	1004c03a 	cmpne	r2,r2,zero
  b5e4e0:	103ffb1e 	bne	r2,zero,b5e4d0 <altera_avalon_mutex_lock+0x18>
}
  b5e4e4:	e037883a 	mov	sp,fp
  b5e4e8:	dfc00117 	ldw	ra,4(sp)
  b5e4ec:	df000017 	ldw	fp,0(sp)
  b5e4f0:	dec00204 	addi	sp,sp,8
  b5e4f4:	f800283a 	ret

00b5e4f8 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  b5e4f8:	defffb04 	addi	sp,sp,-20
  b5e4fc:	dfc00415 	stw	ra,16(sp)
  b5e500:	df000315 	stw	fp,12(sp)
  b5e504:	df000304 	addi	fp,sp,12
  b5e508:	e13ffe15 	stw	r4,-8(fp)
  b5e50c:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
  b5e510:	e13ffe17 	ldw	r4,-8(fp)
  b5e514:	e17fff17 	ldw	r5,-4(fp)
  b5e518:	0b5e3640 	call	b5e364 <alt_mutex_trylock>
  b5e51c:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
  b5e520:	e0bffd17 	ldw	r2,-12(fp)
}
  b5e524:	e037883a 	mov	sp,fp
  b5e528:	dfc00117 	ldw	ra,4(sp)
  b5e52c:	df000017 	ldw	fp,0(sp)
  b5e530:	dec00204 	addi	sp,sp,8
  b5e534:	f800283a 	ret

00b5e538 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  b5e538:	defffd04 	addi	sp,sp,-12
  b5e53c:	df000215 	stw	fp,8(sp)
  b5e540:	df000204 	addi	fp,sp,8
  b5e544:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
  b5e548:	0005317a 	rdctl	r2,cpuid
  b5e54c:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
  b5e550:	e0bfff17 	ldw	r2,-4(fp)
  b5e554:	10800317 	ldw	r2,12(r2)
  b5e558:	10800104 	addi	r2,r2,4
  b5e55c:	1007883a 	mov	r3,r2
  b5e560:	00800044 	movi	r2,1
  b5e564:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
  b5e568:	e0bfff17 	ldw	r2,-4(fp)
  b5e56c:	11000317 	ldw	r4,12(r2)
  b5e570:	e0bffe17 	ldw	r2,-8(fp)
  b5e574:	1004943a 	slli	r2,r2,16
  b5e578:	1007883a 	mov	r3,r2
  b5e57c:	2005883a 	mov	r2,r4
  b5e580:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
  b5e584:	e037883a 	mov	sp,fp
  b5e588:	df000017 	ldw	fp,0(sp)
  b5e58c:	dec00104 	addi	sp,sp,4
  b5e590:	f800283a 	ret

00b5e594 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  b5e594:	defff904 	addi	sp,sp,-28
  b5e598:	df000615 	stw	fp,24(sp)
  b5e59c:	df000604 	addi	fp,sp,24
  b5e5a0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
  b5e5a4:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
  b5e5a8:	0005317a 	rdctl	r2,cpuid
  b5e5ac:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  b5e5b0:	e0bfff17 	ldw	r2,-4(fp)
  b5e5b4:	10800317 	ldw	r2,12(r2)
  b5e5b8:	10800037 	ldwio	r2,0(r2)
  b5e5bc:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
  b5e5c0:	e0bffd17 	ldw	r2,-12(fp)
  b5e5c4:	10bfffec 	andhi	r2,r2,65535
  b5e5c8:	1004d43a 	srli	r2,r2,16
  b5e5cc:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
  b5e5d0:	e0fffc17 	ldw	r3,-16(fp)
  b5e5d4:	e0bffe17 	ldw	r2,-8(fp)
  b5e5d8:	1880081e 	bne	r3,r2,b5e5fc <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
  b5e5dc:	e0bffd17 	ldw	r2,-12(fp)
  b5e5e0:	10bfffcc 	andi	r2,r2,65535
  b5e5e4:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
  b5e5e8:	e0bffb17 	ldw	r2,-20(fp)
  b5e5ec:	1005003a 	cmpeq	r2,r2,zero
  b5e5f0:	1000021e 	bne	r2,zero,b5e5fc <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
  b5e5f4:	00800044 	movi	r2,1
  b5e5f8:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
  b5e5fc:	e0bffa17 	ldw	r2,-24(fp)
}
  b5e600:	e037883a 	mov	sp,fp
  b5e604:	df000017 	ldw	fp,0(sp)
  b5e608:	dec00104 	addi	sp,sp,4
  b5e60c:	f800283a 	ret

00b5e610 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  b5e610:	defffc04 	addi	sp,sp,-16
  b5e614:	df000315 	stw	fp,12(sp)
  b5e618:	df000304 	addi	fp,sp,12
  b5e61c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
  b5e620:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
  b5e624:	e0bfff17 	ldw	r2,-4(fp)
  b5e628:	10800317 	ldw	r2,12(r2)
  b5e62c:	10800104 	addi	r2,r2,4
  b5e630:	10800037 	ldwio	r2,0(r2)
  b5e634:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
  b5e638:	e0bffe17 	ldw	r2,-8(fp)
  b5e63c:	1080004c 	andi	r2,r2,1
  b5e640:	10803fcc 	andi	r2,r2,255
  b5e644:	1005003a 	cmpeq	r2,r2,zero
  b5e648:	1000021e 	bne	r2,zero,b5e654 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
  b5e64c:	00800044 	movi	r2,1
  b5e650:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
  b5e654:	e0bffd17 	ldw	r2,-12(fp)
}
  b5e658:	e037883a 	mov	sp,fp
  b5e65c:	df000017 	ldw	fp,0(sp)
  b5e660:	dec00104 	addi	sp,sp,4
  b5e664:	f800283a 	ret

00b5e668 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  b5e668:	defffc04 	addi	sp,sp,-16
  b5e66c:	dfc00315 	stw	ra,12(sp)
  b5e670:	df000215 	stw	fp,8(sp)
  b5e674:	df000204 	addi	fp,sp,8
  b5e678:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  b5e67c:	e13fff17 	ldw	r4,-4(fp)
  b5e680:	01402db4 	movhi	r5,182
  b5e684:	294c0104 	addi	r5,r5,12292
  b5e688:	0b5ff480 	call	b5ff48 <alt_find_dev>
  b5e68c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  b5e690:	e0bffe17 	ldw	r2,-8(fp)
}
  b5e694:	e037883a 	mov	sp,fp
  b5e698:	dfc00117 	ldw	ra,4(sp)
  b5e69c:	df000017 	ldw	fp,0(sp)
  b5e6a0:	dec00204 	addi	sp,sp,8
  b5e6a4:	f800283a 	ret

00b5e6a8 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  b5e6a8:	defff904 	addi	sp,sp,-28
  b5e6ac:	df000615 	stw	fp,24(sp)
  b5e6b0:	df000604 	addi	fp,sp,24
  b5e6b4:	e13ffb15 	stw	r4,-20(fp)
  b5e6b8:	e17ffc15 	stw	r5,-16(fp)
  b5e6bc:	e1bffd15 	stw	r6,-12(fp)
  b5e6c0:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  b5e6c4:	e0bffb17 	ldw	r2,-20(fp)
  b5e6c8:	10c00f17 	ldw	r3,60(r2)
  b5e6cc:	e0bffd17 	ldw	r2,-12(fp)
  b5e6d0:	10c0042e 	bgeu	r2,r3,b5e6e4 <alt_up_pixel_buffer_dma_draw+0x3c>
  b5e6d4:	e0bffb17 	ldw	r2,-20(fp)
  b5e6d8:	10c01017 	ldw	r3,64(r2)
  b5e6dc:	e0bffe17 	ldw	r2,-8(fp)
  b5e6e0:	10c00336 	bltu	r2,r3,b5e6f0 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  b5e6e4:	00bfffc4 	movi	r2,-1
  b5e6e8:	e0bfff15 	stw	r2,-4(fp)
  b5e6ec:	00005106 	br	b5e834 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  b5e6f0:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  b5e6f4:	e0bffb17 	ldw	r2,-20(fp)
  b5e6f8:	10800d17 	ldw	r2,52(r2)
  b5e6fc:	1004c03a 	cmpne	r2,r2,zero
  b5e700:	1000151e 	bne	r2,zero,b5e758 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  b5e704:	e0bffb17 	ldw	r2,-20(fp)
  b5e708:	10c01217 	ldw	r3,72(r2)
  b5e70c:	e0bffd17 	ldw	r2,-12(fp)
  b5e710:	1886703a 	and	r3,r3,r2
  b5e714:	e0bffb17 	ldw	r2,-20(fp)
  b5e718:	10801117 	ldw	r2,68(r2)
  b5e71c:	1886983a 	sll	r3,r3,r2
  b5e720:	e0bffa17 	ldw	r2,-24(fp)
  b5e724:	10c4b03a 	or	r2,r2,r3
  b5e728:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  b5e72c:	e0bffb17 	ldw	r2,-20(fp)
  b5e730:	10c01417 	ldw	r3,80(r2)
  b5e734:	e0bffe17 	ldw	r2,-8(fp)
  b5e738:	1886703a 	and	r3,r3,r2
  b5e73c:	e0bffb17 	ldw	r2,-20(fp)
  b5e740:	10801317 	ldw	r2,76(r2)
  b5e744:	1886983a 	sll	r3,r3,r2
  b5e748:	e0bffa17 	ldw	r2,-24(fp)
  b5e74c:	10c4b03a 	or	r2,r2,r3
  b5e750:	e0bffa15 	stw	r2,-24(fp)
  b5e754:	00001706 	br	b5e7b4 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  b5e758:	e0bffb17 	ldw	r2,-20(fp)
  b5e75c:	10c01217 	ldw	r3,72(r2)
  b5e760:	e0bffd17 	ldw	r2,-12(fp)
  b5e764:	1886703a 	and	r3,r3,r2
  b5e768:	e0bffb17 	ldw	r2,-20(fp)
  b5e76c:	10801117 	ldw	r2,68(r2)
  b5e770:	1886983a 	sll	r3,r3,r2
  b5e774:	e0bffa17 	ldw	r2,-24(fp)
  b5e778:	10c5883a 	add	r2,r2,r3
  b5e77c:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  b5e780:	e0bffb17 	ldw	r2,-20(fp)
  b5e784:	10c01417 	ldw	r3,80(r2)
  b5e788:	e0bffe17 	ldw	r2,-8(fp)
  b5e78c:	1886703a 	and	r3,r3,r2
  b5e790:	e0bffb17 	ldw	r2,-20(fp)
  b5e794:	10800f17 	ldw	r2,60(r2)
  b5e798:	1887383a 	mul	r3,r3,r2
  b5e79c:	e0bffb17 	ldw	r2,-20(fp)
  b5e7a0:	10801117 	ldw	r2,68(r2)
  b5e7a4:	1886983a 	sll	r3,r3,r2
  b5e7a8:	e0bffa17 	ldw	r2,-24(fp)
  b5e7ac:	10c5883a 	add	r2,r2,r3
  b5e7b0:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  b5e7b4:	e0bffb17 	ldw	r2,-20(fp)
  b5e7b8:	10800e17 	ldw	r2,56(r2)
  b5e7bc:	10800058 	cmpnei	r2,r2,1
  b5e7c0:	1000081e 	bne	r2,zero,b5e7e4 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  b5e7c4:	e0bffb17 	ldw	r2,-20(fp)
  b5e7c8:	10800c17 	ldw	r2,48(r2)
  b5e7cc:	1007883a 	mov	r3,r2
  b5e7d0:	e0bffa17 	ldw	r2,-24(fp)
  b5e7d4:	1885883a 	add	r2,r3,r2
  b5e7d8:	e0fffc17 	ldw	r3,-16(fp)
  b5e7dc:	10c00025 	stbio	r3,0(r2)
  b5e7e0:	00001306 	br	b5e830 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  b5e7e4:	e0bffb17 	ldw	r2,-20(fp)
  b5e7e8:	10800e17 	ldw	r2,56(r2)
  b5e7ec:	10800098 	cmpnei	r2,r2,2
  b5e7f0:	1000081e 	bne	r2,zero,b5e814 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  b5e7f4:	e0bffb17 	ldw	r2,-20(fp)
  b5e7f8:	10800c17 	ldw	r2,48(r2)
  b5e7fc:	1007883a 	mov	r3,r2
  b5e800:	e0bffa17 	ldw	r2,-24(fp)
  b5e804:	1885883a 	add	r2,r3,r2
  b5e808:	e0fffc17 	ldw	r3,-16(fp)
  b5e80c:	10c0002d 	sthio	r3,0(r2)
  b5e810:	00000706 	br	b5e830 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  b5e814:	e0bffb17 	ldw	r2,-20(fp)
  b5e818:	10800c17 	ldw	r2,48(r2)
  b5e81c:	1007883a 	mov	r3,r2
  b5e820:	e0bffa17 	ldw	r2,-24(fp)
  b5e824:	1885883a 	add	r2,r3,r2
  b5e828:	e0fffc17 	ldw	r3,-16(fp)
  b5e82c:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  b5e830:	e03fff15 	stw	zero,-4(fp)
  b5e834:	e0bfff17 	ldw	r2,-4(fp)
}
  b5e838:	e037883a 	mov	sp,fp
  b5e83c:	df000017 	ldw	fp,0(sp)
  b5e840:	dec00104 	addi	sp,sp,4
  b5e844:	f800283a 	ret

00b5e848 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  b5e848:	defffd04 	addi	sp,sp,-12
  b5e84c:	df000215 	stw	fp,8(sp)
  b5e850:	df000204 	addi	fp,sp,8
  b5e854:	e13ffe15 	stw	r4,-8(fp)
  b5e858:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  b5e85c:	e0bffe17 	ldw	r2,-8(fp)
  b5e860:	10800a17 	ldw	r2,40(r2)
  b5e864:	10800104 	addi	r2,r2,4
  b5e868:	e0ffff17 	ldw	r3,-4(fp)
  b5e86c:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  b5e870:	e0bffe17 	ldw	r2,-8(fp)
  b5e874:	10800a17 	ldw	r2,40(r2)
  b5e878:	10800104 	addi	r2,r2,4
  b5e87c:	10800037 	ldwio	r2,0(r2)
  b5e880:	1007883a 	mov	r3,r2
  b5e884:	e0bffe17 	ldw	r2,-8(fp)
  b5e888:	10c00c15 	stw	r3,48(r2)
	return 0;
  b5e88c:	0005883a 	mov	r2,zero
}
  b5e890:	e037883a 	mov	sp,fp
  b5e894:	df000017 	ldw	fp,0(sp)
  b5e898:	dec00104 	addi	sp,sp,4
  b5e89c:	f800283a 	ret

00b5e8a0 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  b5e8a0:	defffe04 	addi	sp,sp,-8
  b5e8a4:	df000115 	stw	fp,4(sp)
  b5e8a8:	df000104 	addi	fp,sp,4
  b5e8ac:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  b5e8b0:	e0bfff17 	ldw	r2,-4(fp)
  b5e8b4:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  b5e8b8:	e0bfff17 	ldw	r2,-4(fp)
  b5e8bc:	10800a17 	ldw	r2,40(r2)
  b5e8c0:	1007883a 	mov	r3,r2
  b5e8c4:	00800044 	movi	r2,1
  b5e8c8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  b5e8cc:	e0bfff17 	ldw	r2,-4(fp)
  b5e8d0:	10c00b17 	ldw	r3,44(r2)
  b5e8d4:	e0bfff17 	ldw	r2,-4(fp)
  b5e8d8:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  b5e8dc:	e0bfff17 	ldw	r2,-4(fp)
  b5e8e0:	11000b15 	stw	r4,44(r2)
	return 0;
  b5e8e4:	0005883a 	mov	r2,zero
}
  b5e8e8:	e037883a 	mov	sp,fp
  b5e8ec:	df000017 	ldw	fp,0(sp)
  b5e8f0:	dec00104 	addi	sp,sp,4
  b5e8f4:	f800283a 	ret

00b5e8f8 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  b5e8f8:	defffe04 	addi	sp,sp,-8
  b5e8fc:	df000115 	stw	fp,4(sp)
  b5e900:	df000104 	addi	fp,sp,4
  b5e904:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  b5e908:	e0bfff17 	ldw	r2,-4(fp)
  b5e90c:	10800a17 	ldw	r2,40(r2)
  b5e910:	10800304 	addi	r2,r2,12
  b5e914:	10800037 	ldwio	r2,0(r2)
  b5e918:	1080004c 	andi	r2,r2,1
}
  b5e91c:	e037883a 	mov	sp,fp
  b5e920:	df000017 	ldw	fp,0(sp)
  b5e924:	dec00104 	addi	sp,sp,4
  b5e928:	f800283a 	ret

00b5e92c <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  b5e92c:	defff604 	addi	sp,sp,-40
  b5e930:	df000915 	stw	fp,36(sp)
  b5e934:	df000904 	addi	fp,sp,36
  b5e938:	e13ff715 	stw	r4,-36(fp)
  b5e93c:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  b5e940:	e0bff817 	ldw	r2,-32(fp)
  b5e944:	10800058 	cmpnei	r2,r2,1
  b5e948:	1000041e 	bne	r2,zero,b5e95c <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  b5e94c:	e0bff717 	ldw	r2,-36(fp)
  b5e950:	10800c17 	ldw	r2,48(r2)
  b5e954:	e0bfff15 	stw	r2,-4(fp)
  b5e958:	00000306 	br	b5e968 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  b5e95c:	e0bff717 	ldw	r2,-36(fp)
  b5e960:	10800b17 	ldw	r2,44(r2)
  b5e964:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  b5e968:	e0bff717 	ldw	r2,-36(fp)
  b5e96c:	10800f17 	ldw	r2,60(r2)
  b5e970:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  b5e974:	e0bff717 	ldw	r2,-36(fp)
  b5e978:	10800e17 	ldw	r2,56(r2)
  b5e97c:	10800098 	cmpnei	r2,r2,2
  b5e980:	1000051e 	bne	r2,zero,b5e998 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  b5e984:	e0fffe17 	ldw	r3,-8(fp)
  b5e988:	e0fffe17 	ldw	r3,-8(fp)
  b5e98c:	18c5883a 	add	r2,r3,r3
  b5e990:	e0bffe15 	stw	r2,-8(fp)
  b5e994:	00000506 	br	b5e9ac <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  b5e998:	e13ffe17 	ldw	r4,-8(fp)
  b5e99c:	e13ffe17 	ldw	r4,-8(fp)
  b5e9a0:	2105883a 	add	r2,r4,r4
  b5e9a4:	1085883a 	add	r2,r2,r2
  b5e9a8:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  b5e9ac:	e0bff717 	ldw	r2,-36(fp)
  b5e9b0:	10801017 	ldw	r2,64(r2)
  b5e9b4:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  b5e9b8:	e0bff717 	ldw	r2,-36(fp)
  b5e9bc:	10800d17 	ldw	r2,52(r2)
  b5e9c0:	1004c03a 	cmpne	r2,r2,zero
  b5e9c4:	10001e1e 	bne	r2,zero,b5ea40 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  b5e9c8:	e0bff717 	ldw	r2,-36(fp)
  b5e9cc:	10801317 	ldw	r2,76(r2)
  b5e9d0:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  b5e9d4:	e03ffb15 	stw	zero,-20(fp)
  b5e9d8:	00001506 	br	b5ea30 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  b5e9dc:	e03ffc15 	stw	zero,-16(fp)
  b5e9e0:	00000706 	br	b5ea00 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  b5e9e4:	e0ffff17 	ldw	r3,-4(fp)
  b5e9e8:	e0bffc17 	ldw	r2,-16(fp)
  b5e9ec:	1885883a 	add	r2,r3,r2
  b5e9f0:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  b5e9f4:	e0bffc17 	ldw	r2,-16(fp)
  b5e9f8:	10800104 	addi	r2,r2,4
  b5e9fc:	e0bffc15 	stw	r2,-16(fp)
  b5ea00:	e0fffc17 	ldw	r3,-16(fp)
  b5ea04:	e13ffe17 	ldw	r4,-8(fp)
  b5ea08:	193ff636 	bltu	r3,r4,b5e9e4 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  b5ea0c:	e0fffa17 	ldw	r3,-24(fp)
  b5ea10:	00800044 	movi	r2,1
  b5ea14:	10c4983a 	sll	r2,r2,r3
  b5ea18:	e0ffff17 	ldw	r3,-4(fp)
  b5ea1c:	1887883a 	add	r3,r3,r2
  b5ea20:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  b5ea24:	e13ffb17 	ldw	r4,-20(fp)
  b5ea28:	21000044 	addi	r4,r4,1
  b5ea2c:	e13ffb15 	stw	r4,-20(fp)
  b5ea30:	e0bffb17 	ldw	r2,-20(fp)
  b5ea34:	e0fffd17 	ldw	r3,-12(fp)
  b5ea38:	10ffe836 	bltu	r2,r3,b5e9dc <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  b5ea3c:	00001006 	br	b5ea80 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  b5ea40:	e13ffd17 	ldw	r4,-12(fp)
  b5ea44:	e0bffe17 	ldw	r2,-8(fp)
  b5ea48:	2089383a 	mul	r4,r4,r2
  b5ea4c:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  b5ea50:	e03ff915 	stw	zero,-28(fp)
  b5ea54:	00000706 	br	b5ea74 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  b5ea58:	e0ffff17 	ldw	r3,-4(fp)
  b5ea5c:	e0bff917 	ldw	r2,-28(fp)
  b5ea60:	1885883a 	add	r2,r3,r2
  b5ea64:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  b5ea68:	e0fff917 	ldw	r3,-28(fp)
  b5ea6c:	18c00104 	addi	r3,r3,4
  b5ea70:	e0fff915 	stw	r3,-28(fp)
  b5ea74:	e0bff917 	ldw	r2,-28(fp)
  b5ea78:	e13ffd17 	ldw	r4,-12(fp)
  b5ea7c:	113ff636 	bltu	r2,r4,b5ea58 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  b5ea80:	e037883a 	mov	sp,fp
  b5ea84:	df000017 	ldw	fp,0(sp)
  b5ea88:	dec00104 	addi	sp,sp,4
  b5ea8c:	f800283a 	ret

00b5ea90 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  b5ea90:	deffed04 	addi	sp,sp,-76
  b5ea94:	df001215 	stw	fp,72(sp)
  b5ea98:	df001204 	addi	fp,sp,72
  b5ea9c:	e13fee15 	stw	r4,-72(fp)
  b5eaa0:	e17fef15 	stw	r5,-68(fp)
  b5eaa4:	e1bff015 	stw	r6,-64(fp)
  b5eaa8:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  b5eaac:	e0bfee17 	ldw	r2,-72(fp)
  b5eab0:	10800f17 	ldw	r2,60(r2)
  b5eab4:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  b5eab8:	e0bfee17 	ldw	r2,-72(fp)
  b5eabc:	10801017 	ldw	r2,64(r2)
  b5eac0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  b5eac4:	e0bfef17 	ldw	r2,-68(fp)
  b5eac8:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  b5eacc:	e0fff117 	ldw	r3,-60(fp)
  b5ead0:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  b5ead4:	e13ff017 	ldw	r4,-64(fp)
  b5ead8:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  b5eadc:	e0800117 	ldw	r2,4(fp)
  b5eae0:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  b5eae4:	e0c00217 	ldw	r3,8(fp)
  b5eae8:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  b5eaec:	e13ffa17 	ldw	r4,-24(fp)
  b5eaf0:	e0bffb17 	ldw	r2,-20(fp)
  b5eaf4:	2080062e 	bgeu	r4,r2,b5eb10 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  b5eaf8:	e0fffb17 	ldw	r3,-20(fp)
  b5eafc:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  b5eb00:	e13ffa17 	ldw	r4,-24(fp)
  b5eb04:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  b5eb08:	e0bffc17 	ldw	r2,-16(fp)
  b5eb0c:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  b5eb10:	e0fff817 	ldw	r3,-32(fp)
  b5eb14:	e13ff917 	ldw	r4,-28(fp)
  b5eb18:	1900062e 	bgeu	r3,r4,b5eb34 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  b5eb1c:	e0bff917 	ldw	r2,-28(fp)
  b5eb20:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  b5eb24:	e0fff817 	ldw	r3,-32(fp)
  b5eb28:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  b5eb2c:	e13ffc17 	ldw	r4,-16(fp)
  b5eb30:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  b5eb34:	e0bffb17 	ldw	r2,-20(fp)
  b5eb38:	e0fffe17 	ldw	r3,-8(fp)
  b5eb3c:	10c10d2e 	bgeu	r2,r3,b5ef74 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  b5eb40:	e13ff917 	ldw	r4,-28(fp)
  b5eb44:	e0bffd17 	ldw	r2,-12(fp)
  b5eb48:	20800136 	bltu	r4,r2,b5eb50 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  b5eb4c:	00010906 	br	b5ef74 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  b5eb50:	e0fffa17 	ldw	r3,-24(fp)
  b5eb54:	e13ffe17 	ldw	r4,-8(fp)
  b5eb58:	19000336 	bltu	r3,r4,b5eb68 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  b5eb5c:	e0bffe17 	ldw	r2,-8(fp)
  b5eb60:	10bfffc4 	addi	r2,r2,-1
  b5eb64:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  b5eb68:	e0fff817 	ldw	r3,-32(fp)
  b5eb6c:	e13ffd17 	ldw	r4,-12(fp)
  b5eb70:	19000336 	bltu	r3,r4,b5eb80 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  b5eb74:	e0bffd17 	ldw	r2,-12(fp)
  b5eb78:	10bfffc4 	addi	r2,r2,-1
  b5eb7c:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  b5eb80:	e0800317 	ldw	r2,12(fp)
  b5eb84:	10800058 	cmpnei	r2,r2,1
  b5eb88:	1000041e 	bne	r2,zero,b5eb9c <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  b5eb8c:	e0bfee17 	ldw	r2,-72(fp)
  b5eb90:	10800c17 	ldw	r2,48(r2)
  b5eb94:	e0bfff15 	stw	r2,-4(fp)
  b5eb98:	00000306 	br	b5eba8 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  b5eb9c:	e0bfee17 	ldw	r2,-72(fp)
  b5eba0:	10800b17 	ldw	r2,44(r2)
  b5eba4:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  b5eba8:	e0bfee17 	ldw	r2,-72(fp)
  b5ebac:	10800d17 	ldw	r2,52(r2)
  b5ebb0:	1004c03a 	cmpne	r2,r2,zero
  b5ebb4:	1000721e 	bne	r2,zero,b5ed80 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  b5ebb8:	e0bfee17 	ldw	r2,-72(fp)
  b5ebbc:	10801317 	ldw	r2,76(r2)
  b5ebc0:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  b5ebc4:	e0bff417 	ldw	r2,-48(fp)
  b5ebc8:	e0fff917 	ldw	r3,-28(fp)
  b5ebcc:	1884983a 	sll	r2,r3,r2
  b5ebd0:	e13fff17 	ldw	r4,-4(fp)
  b5ebd4:	2089883a 	add	r4,r4,r2
  b5ebd8:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  b5ebdc:	e0bfee17 	ldw	r2,-72(fp)
  b5ebe0:	10800e17 	ldw	r2,56(r2)
  b5ebe4:	10800058 	cmpnei	r2,r2,1
  b5ebe8:	10001e1e 	bne	r2,zero,b5ec64 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  b5ebec:	e0bff917 	ldw	r2,-28(fp)
  b5ebf0:	e0bff515 	stw	r2,-44(fp)
  b5ebf4:	00001706 	br	b5ec54 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  b5ebf8:	e0fffb17 	ldw	r3,-20(fp)
  b5ebfc:	e0fff615 	stw	r3,-40(fp)
  b5ec00:	00000806 	br	b5ec24 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  b5ec04:	e0ffff17 	ldw	r3,-4(fp)
  b5ec08:	e0bff617 	ldw	r2,-40(fp)
  b5ec0c:	1885883a 	add	r2,r3,r2
  b5ec10:	e0fff717 	ldw	r3,-36(fp)
  b5ec14:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  b5ec18:	e13ff617 	ldw	r4,-40(fp)
  b5ec1c:	21000044 	addi	r4,r4,1
  b5ec20:	e13ff615 	stw	r4,-40(fp)
  b5ec24:	e0bffa17 	ldw	r2,-24(fp)
  b5ec28:	e0fff617 	ldw	r3,-40(fp)
  b5ec2c:	10fff52e 	bgeu	r2,r3,b5ec04 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  b5ec30:	e0fff417 	ldw	r3,-48(fp)
  b5ec34:	00800044 	movi	r2,1
  b5ec38:	10c4983a 	sll	r2,r2,r3
  b5ec3c:	e13fff17 	ldw	r4,-4(fp)
  b5ec40:	2089883a 	add	r4,r4,r2
  b5ec44:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  b5ec48:	e0bff517 	ldw	r2,-44(fp)
  b5ec4c:	10800044 	addi	r2,r2,1
  b5ec50:	e0bff515 	stw	r2,-44(fp)
  b5ec54:	e0fff817 	ldw	r3,-32(fp)
  b5ec58:	e13ff517 	ldw	r4,-44(fp)
  b5ec5c:	193fe62e 	bgeu	r3,r4,b5ebf8 <alt_up_pixel_buffer_dma_draw_box+0x168>
  b5ec60:	0000c406 	br	b5ef74 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  b5ec64:	e0bfee17 	ldw	r2,-72(fp)
  b5ec68:	10800e17 	ldw	r2,56(r2)
  b5ec6c:	10800098 	cmpnei	r2,r2,2
  b5ec70:	1000211e 	bne	r2,zero,b5ecf8 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  b5ec74:	e0bff917 	ldw	r2,-28(fp)
  b5ec78:	e0bff515 	stw	r2,-44(fp)
  b5ec7c:	00001a06 	br	b5ece8 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  b5ec80:	e0fffb17 	ldw	r3,-20(fp)
  b5ec84:	e0fff615 	stw	r3,-40(fp)
  b5ec88:	00000b06 	br	b5ecb8 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  b5ec8c:	e13ff617 	ldw	r4,-40(fp)
  b5ec90:	e13ff617 	ldw	r4,-40(fp)
  b5ec94:	2105883a 	add	r2,r4,r4
  b5ec98:	1007883a 	mov	r3,r2
  b5ec9c:	e0bfff17 	ldw	r2,-4(fp)
  b5eca0:	1885883a 	add	r2,r3,r2
  b5eca4:	e0fff717 	ldw	r3,-36(fp)
  b5eca8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  b5ecac:	e0bff617 	ldw	r2,-40(fp)
  b5ecb0:	10800044 	addi	r2,r2,1
  b5ecb4:	e0bff615 	stw	r2,-40(fp)
  b5ecb8:	e0fffa17 	ldw	r3,-24(fp)
  b5ecbc:	e13ff617 	ldw	r4,-40(fp)
  b5ecc0:	193ff22e 	bgeu	r3,r4,b5ec8c <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  b5ecc4:	e0fff417 	ldw	r3,-48(fp)
  b5ecc8:	00800044 	movi	r2,1
  b5eccc:	10c4983a 	sll	r2,r2,r3
  b5ecd0:	e0ffff17 	ldw	r3,-4(fp)
  b5ecd4:	1887883a 	add	r3,r3,r2
  b5ecd8:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  b5ecdc:	e13ff517 	ldw	r4,-44(fp)
  b5ece0:	21000044 	addi	r4,r4,1
  b5ece4:	e13ff515 	stw	r4,-44(fp)
  b5ece8:	e0bff817 	ldw	r2,-32(fp)
  b5ecec:	e0fff517 	ldw	r3,-44(fp)
  b5ecf0:	10ffe32e 	bgeu	r2,r3,b5ec80 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  b5ecf4:	00009f06 	br	b5ef74 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  b5ecf8:	e13ff917 	ldw	r4,-28(fp)
  b5ecfc:	e13ff515 	stw	r4,-44(fp)
  b5ed00:	00001b06 	br	b5ed70 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  b5ed04:	e0bffb17 	ldw	r2,-20(fp)
  b5ed08:	e0bff615 	stw	r2,-40(fp)
  b5ed0c:	00000c06 	br	b5ed40 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  b5ed10:	e0fff617 	ldw	r3,-40(fp)
  b5ed14:	e0fff617 	ldw	r3,-40(fp)
  b5ed18:	18c5883a 	add	r2,r3,r3
  b5ed1c:	1085883a 	add	r2,r2,r2
  b5ed20:	1007883a 	mov	r3,r2
  b5ed24:	e0bfff17 	ldw	r2,-4(fp)
  b5ed28:	1885883a 	add	r2,r3,r2
  b5ed2c:	e0fff717 	ldw	r3,-36(fp)
  b5ed30:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  b5ed34:	e13ff617 	ldw	r4,-40(fp)
  b5ed38:	21000044 	addi	r4,r4,1
  b5ed3c:	e13ff615 	stw	r4,-40(fp)
  b5ed40:	e0bffa17 	ldw	r2,-24(fp)
  b5ed44:	e0fff617 	ldw	r3,-40(fp)
  b5ed48:	10fff12e 	bgeu	r2,r3,b5ed10 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  b5ed4c:	e0fff417 	ldw	r3,-48(fp)
  b5ed50:	00800044 	movi	r2,1
  b5ed54:	10c4983a 	sll	r2,r2,r3
  b5ed58:	e13fff17 	ldw	r4,-4(fp)
  b5ed5c:	2089883a 	add	r4,r4,r2
  b5ed60:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  b5ed64:	e0bff517 	ldw	r2,-44(fp)
  b5ed68:	10800044 	addi	r2,r2,1
  b5ed6c:	e0bff515 	stw	r2,-44(fp)
  b5ed70:	e0fff817 	ldw	r3,-32(fp)
  b5ed74:	e13ff517 	ldw	r4,-44(fp)
  b5ed78:	193fe22e 	bgeu	r3,r4,b5ed04 <alt_up_pixel_buffer_dma_draw_box+0x274>
  b5ed7c:	00007d06 	br	b5ef74 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  b5ed80:	e0bfee17 	ldw	r2,-72(fp)
  b5ed84:	10800e17 	ldw	r2,56(r2)
  b5ed88:	10800058 	cmpnei	r2,r2,1
  b5ed8c:	1000221e 	bne	r2,zero,b5ee18 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  b5ed90:	e0fff917 	ldw	r3,-28(fp)
  b5ed94:	e13ffe17 	ldw	r4,-8(fp)
  b5ed98:	1905383a 	mul	r2,r3,r4
  b5ed9c:	e0ffff17 	ldw	r3,-4(fp)
  b5eda0:	1887883a 	add	r3,r3,r2
  b5eda4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  b5eda8:	e13ff917 	ldw	r4,-28(fp)
  b5edac:	e13ff215 	stw	r4,-56(fp)
  b5edb0:	00001506 	br	b5ee08 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  b5edb4:	e0bffb17 	ldw	r2,-20(fp)
  b5edb8:	e0bff315 	stw	r2,-52(fp)
  b5edbc:	00000806 	br	b5ede0 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  b5edc0:	e0ffff17 	ldw	r3,-4(fp)
  b5edc4:	e0bff317 	ldw	r2,-52(fp)
  b5edc8:	1885883a 	add	r2,r3,r2
  b5edcc:	e0fff717 	ldw	r3,-36(fp)
  b5edd0:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  b5edd4:	e0fff317 	ldw	r3,-52(fp)
  b5edd8:	18c00044 	addi	r3,r3,1
  b5eddc:	e0fff315 	stw	r3,-52(fp)
  b5ede0:	e13ffa17 	ldw	r4,-24(fp)
  b5ede4:	e0bff317 	ldw	r2,-52(fp)
  b5ede8:	20bff52e 	bgeu	r4,r2,b5edc0 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  b5edec:	e0ffff17 	ldw	r3,-4(fp)
  b5edf0:	e13ffe17 	ldw	r4,-8(fp)
  b5edf4:	1907883a 	add	r3,r3,r4
  b5edf8:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  b5edfc:	e0bff217 	ldw	r2,-56(fp)
  b5ee00:	10800044 	addi	r2,r2,1
  b5ee04:	e0bff215 	stw	r2,-56(fp)
  b5ee08:	e0fff817 	ldw	r3,-32(fp)
  b5ee0c:	e13ff217 	ldw	r4,-56(fp)
  b5ee10:	193fe82e 	bgeu	r3,r4,b5edb4 <alt_up_pixel_buffer_dma_draw_box+0x324>
  b5ee14:	00005706 	br	b5ef74 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  b5ee18:	e0bfee17 	ldw	r2,-72(fp)
  b5ee1c:	10800e17 	ldw	r2,56(r2)
  b5ee20:	10800098 	cmpnei	r2,r2,2
  b5ee24:	1000291e 	bne	r2,zero,b5eecc <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  b5ee28:	e0fffe17 	ldw	r3,-8(fp)
  b5ee2c:	e0fffe17 	ldw	r3,-8(fp)
  b5ee30:	18c5883a 	add	r2,r3,r3
  b5ee34:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  b5ee38:	e13ff917 	ldw	r4,-28(fp)
  b5ee3c:	e0fffe17 	ldw	r3,-8(fp)
  b5ee40:	20c5383a 	mul	r2,r4,r3
  b5ee44:	e13fff17 	ldw	r4,-4(fp)
  b5ee48:	2089883a 	add	r4,r4,r2
  b5ee4c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  b5ee50:	e0bff917 	ldw	r2,-28(fp)
  b5ee54:	e0bff215 	stw	r2,-56(fp)
  b5ee58:	00001806 	br	b5eebc <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  b5ee5c:	e0fffb17 	ldw	r3,-20(fp)
  b5ee60:	e0fff315 	stw	r3,-52(fp)
  b5ee64:	00000b06 	br	b5ee94 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  b5ee68:	e13ff317 	ldw	r4,-52(fp)
  b5ee6c:	e13ff317 	ldw	r4,-52(fp)
  b5ee70:	2105883a 	add	r2,r4,r4
  b5ee74:	1007883a 	mov	r3,r2
  b5ee78:	e0bfff17 	ldw	r2,-4(fp)
  b5ee7c:	1885883a 	add	r2,r3,r2
  b5ee80:	e0fff717 	ldw	r3,-36(fp)
  b5ee84:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  b5ee88:	e0bff317 	ldw	r2,-52(fp)
  b5ee8c:	10800044 	addi	r2,r2,1
  b5ee90:	e0bff315 	stw	r2,-52(fp)
  b5ee94:	e0fffa17 	ldw	r3,-24(fp)
  b5ee98:	e13ff317 	ldw	r4,-52(fp)
  b5ee9c:	193ff22e 	bgeu	r3,r4,b5ee68 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  b5eea0:	e0bfff17 	ldw	r2,-4(fp)
  b5eea4:	e0fffe17 	ldw	r3,-8(fp)
  b5eea8:	10c5883a 	add	r2,r2,r3
  b5eeac:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  b5eeb0:	e13ff217 	ldw	r4,-56(fp)
  b5eeb4:	21000044 	addi	r4,r4,1
  b5eeb8:	e13ff215 	stw	r4,-56(fp)
  b5eebc:	e0bff817 	ldw	r2,-32(fp)
  b5eec0:	e0fff217 	ldw	r3,-56(fp)
  b5eec4:	10ffe52e 	bgeu	r2,r3,b5ee5c <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  b5eec8:	00002a06 	br	b5ef74 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  b5eecc:	e13ffe17 	ldw	r4,-8(fp)
  b5eed0:	e13ffe17 	ldw	r4,-8(fp)
  b5eed4:	2105883a 	add	r2,r4,r4
  b5eed8:	1085883a 	add	r2,r2,r2
  b5eedc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  b5eee0:	e0fff917 	ldw	r3,-28(fp)
  b5eee4:	e13ffe17 	ldw	r4,-8(fp)
  b5eee8:	1905383a 	mul	r2,r3,r4
  b5eeec:	e0ffff17 	ldw	r3,-4(fp)
  b5eef0:	1887883a 	add	r3,r3,r2
  b5eef4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  b5eef8:	e13ff917 	ldw	r4,-28(fp)
  b5eefc:	e13ff215 	stw	r4,-56(fp)
  b5ef00:	00001906 	br	b5ef68 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  b5ef04:	e0bffb17 	ldw	r2,-20(fp)
  b5ef08:	e0bff315 	stw	r2,-52(fp)
  b5ef0c:	00000c06 	br	b5ef40 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  b5ef10:	e0fff317 	ldw	r3,-52(fp)
  b5ef14:	e0fff317 	ldw	r3,-52(fp)
  b5ef18:	18c5883a 	add	r2,r3,r3
  b5ef1c:	1085883a 	add	r2,r2,r2
  b5ef20:	1007883a 	mov	r3,r2
  b5ef24:	e0bfff17 	ldw	r2,-4(fp)
  b5ef28:	1885883a 	add	r2,r3,r2
  b5ef2c:	e0fff717 	ldw	r3,-36(fp)
  b5ef30:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  b5ef34:	e13ff317 	ldw	r4,-52(fp)
  b5ef38:	21000044 	addi	r4,r4,1
  b5ef3c:	e13ff315 	stw	r4,-52(fp)
  b5ef40:	e0bffa17 	ldw	r2,-24(fp)
  b5ef44:	e0fff317 	ldw	r3,-52(fp)
  b5ef48:	10fff12e 	bgeu	r2,r3,b5ef10 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  b5ef4c:	e13fff17 	ldw	r4,-4(fp)
  b5ef50:	e0bffe17 	ldw	r2,-8(fp)
  b5ef54:	2089883a 	add	r4,r4,r2
  b5ef58:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  b5ef5c:	e0fff217 	ldw	r3,-56(fp)
  b5ef60:	18c00044 	addi	r3,r3,1
  b5ef64:	e0fff215 	stw	r3,-56(fp)
  b5ef68:	e13ff817 	ldw	r4,-32(fp)
  b5ef6c:	e0bff217 	ldw	r2,-56(fp)
  b5ef70:	20bfe42e 	bgeu	r4,r2,b5ef04 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  b5ef74:	e037883a 	mov	sp,fp
  b5ef78:	df000017 	ldw	fp,0(sp)
  b5ef7c:	dec00104 	addi	sp,sp,4
  b5ef80:	f800283a 	ret

00b5ef84 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  b5ef84:	defff204 	addi	sp,sp,-56
  b5ef88:	df000d15 	stw	fp,52(sp)
  b5ef8c:	df000d04 	addi	fp,sp,52
  b5ef90:	e13ff315 	stw	r4,-52(fp)
  b5ef94:	e17ff415 	stw	r5,-48(fp)
  b5ef98:	e1bff515 	stw	r6,-44(fp)
  b5ef9c:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  b5efa0:	e0bff317 	ldw	r2,-52(fp)
  b5efa4:	10800f17 	ldw	r2,60(r2)
  b5efa8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  b5efac:	e0bff317 	ldw	r2,-52(fp)
  b5efb0:	10801017 	ldw	r2,64(r2)
  b5efb4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  b5efb8:	e0bff417 	ldw	r2,-48(fp)
  b5efbc:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  b5efc0:	e0fff517 	ldw	r3,-44(fp)
  b5efc4:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  b5efc8:	e13ff617 	ldw	r4,-40(fp)
  b5efcc:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  b5efd0:	e0800117 	ldw	r2,4(fp)
  b5efd4:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  b5efd8:	e0fffb17 	ldw	r3,-20(fp)
  b5efdc:	e13ffc17 	ldw	r4,-16(fp)
  b5efe0:	1900042e 	bgeu	r3,r4,b5eff4 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  b5efe4:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  b5efe8:	e0fffb17 	ldw	r3,-20(fp)
  b5efec:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  b5eff0:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  b5eff4:	e13ffc17 	ldw	r4,-16(fp)
  b5eff8:	e0bffe17 	ldw	r2,-8(fp)
  b5effc:	2080b12e 	bgeu	r4,r2,b5f2c4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
  b5f000:	e0fffa17 	ldw	r3,-24(fp)
  b5f004:	e13ffd17 	ldw	r4,-12(fp)
  b5f008:	19000136 	bltu	r3,r4,b5f010 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  b5f00c:	0000ad06 	br	b5f2c4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  b5f010:	e0bffb17 	ldw	r2,-20(fp)
  b5f014:	e0fffe17 	ldw	r3,-8(fp)
  b5f018:	10c00336 	bltu	r2,r3,b5f028 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  b5f01c:	e13ffe17 	ldw	r4,-8(fp)
  b5f020:	213fffc4 	addi	r4,r4,-1
  b5f024:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  b5f028:	e0800217 	ldw	r2,8(fp)
  b5f02c:	10800058 	cmpnei	r2,r2,1
  b5f030:	1000041e 	bne	r2,zero,b5f044 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  b5f034:	e0bff317 	ldw	r2,-52(fp)
  b5f038:	10800c17 	ldw	r2,48(r2)
  b5f03c:	e0bfff15 	stw	r2,-4(fp)
  b5f040:	00000306 	br	b5f050 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  b5f044:	e0bff317 	ldw	r2,-52(fp)
  b5f048:	10800b17 	ldw	r2,44(r2)
  b5f04c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  b5f050:	e0bff317 	ldw	r2,-52(fp)
  b5f054:	10800d17 	ldw	r2,52(r2)
  b5f058:	1004c03a 	cmpne	r2,r2,zero
  b5f05c:	1000431e 	bne	r2,zero,b5f16c <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  b5f060:	e0bff317 	ldw	r2,-52(fp)
  b5f064:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  b5f068:	e0fffa17 	ldw	r3,-24(fp)
  b5f06c:	1884983a 	sll	r2,r3,r2
  b5f070:	e13fff17 	ldw	r4,-4(fp)
  b5f074:	2089883a 	add	r4,r4,r2
  b5f078:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  b5f07c:	e0bff317 	ldw	r2,-52(fp)
  b5f080:	10800e17 	ldw	r2,56(r2)
  b5f084:	10800058 	cmpnei	r2,r2,1
  b5f088:	10000f1e 	bne	r2,zero,b5f0c8 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  b5f08c:	e0bffc17 	ldw	r2,-16(fp)
  b5f090:	e0bff815 	stw	r2,-32(fp)
  b5f094:	00000806 	br	b5f0b8 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  b5f098:	e0ffff17 	ldw	r3,-4(fp)
  b5f09c:	e0bff817 	ldw	r2,-32(fp)
  b5f0a0:	1885883a 	add	r2,r3,r2
  b5f0a4:	e0fff917 	ldw	r3,-28(fp)
  b5f0a8:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  b5f0ac:	e0fff817 	ldw	r3,-32(fp)
  b5f0b0:	18c00044 	addi	r3,r3,1
  b5f0b4:	e0fff815 	stw	r3,-32(fp)
  b5f0b8:	e13ffb17 	ldw	r4,-20(fp)
  b5f0bc:	e0bff817 	ldw	r2,-32(fp)
  b5f0c0:	20bff52e 	bgeu	r4,r2,b5f098 <alt_up_pixel_buffer_dma_draw_hline+0x114>
  b5f0c4:	00007f06 	br	b5f2c4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  b5f0c8:	e0bff317 	ldw	r2,-52(fp)
  b5f0cc:	10800e17 	ldw	r2,56(r2)
  b5f0d0:	10800098 	cmpnei	r2,r2,2
  b5f0d4:	1000121e 	bne	r2,zero,b5f120 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  b5f0d8:	e0fffc17 	ldw	r3,-16(fp)
  b5f0dc:	e0fff815 	stw	r3,-32(fp)
  b5f0e0:	00000b06 	br	b5f110 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  b5f0e4:	e13ff817 	ldw	r4,-32(fp)
  b5f0e8:	e13ff817 	ldw	r4,-32(fp)
  b5f0ec:	2105883a 	add	r2,r4,r4
  b5f0f0:	1007883a 	mov	r3,r2
  b5f0f4:	e0bfff17 	ldw	r2,-4(fp)
  b5f0f8:	1885883a 	add	r2,r3,r2
  b5f0fc:	e0fff917 	ldw	r3,-28(fp)
  b5f100:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  b5f104:	e0bff817 	ldw	r2,-32(fp)
  b5f108:	10800044 	addi	r2,r2,1
  b5f10c:	e0bff815 	stw	r2,-32(fp)
  b5f110:	e0fffb17 	ldw	r3,-20(fp)
  b5f114:	e13ff817 	ldw	r4,-32(fp)
  b5f118:	193ff22e 	bgeu	r3,r4,b5f0e4 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  b5f11c:	00006906 	br	b5f2c4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  b5f120:	e0bffc17 	ldw	r2,-16(fp)
  b5f124:	e0bff815 	stw	r2,-32(fp)
  b5f128:	00000c06 	br	b5f15c <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  b5f12c:	e0fff817 	ldw	r3,-32(fp)
  b5f130:	e0fff817 	ldw	r3,-32(fp)
  b5f134:	18c5883a 	add	r2,r3,r3
  b5f138:	1085883a 	add	r2,r2,r2
  b5f13c:	1007883a 	mov	r3,r2
  b5f140:	e0bfff17 	ldw	r2,-4(fp)
  b5f144:	1885883a 	add	r2,r3,r2
  b5f148:	e0fff917 	ldw	r3,-28(fp)
  b5f14c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  b5f150:	e13ff817 	ldw	r4,-32(fp)
  b5f154:	21000044 	addi	r4,r4,1
  b5f158:	e13ff815 	stw	r4,-32(fp)
  b5f15c:	e0bffb17 	ldw	r2,-20(fp)
  b5f160:	e0fff817 	ldw	r3,-32(fp)
  b5f164:	10fff12e 	bgeu	r2,r3,b5f12c <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  b5f168:	00005606 	br	b5f2c4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  b5f16c:	e0bff317 	ldw	r2,-52(fp)
  b5f170:	10800e17 	ldw	r2,56(r2)
  b5f174:	10800058 	cmpnei	r2,r2,1
  b5f178:	1000151e 	bne	r2,zero,b5f1d0 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  b5f17c:	e13ffa17 	ldw	r4,-24(fp)
  b5f180:	e0fffe17 	ldw	r3,-8(fp)
  b5f184:	20c5383a 	mul	r2,r4,r3
  b5f188:	e13fff17 	ldw	r4,-4(fp)
  b5f18c:	2089883a 	add	r4,r4,r2
  b5f190:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  b5f194:	e0bffc17 	ldw	r2,-16(fp)
  b5f198:	e0bff715 	stw	r2,-36(fp)
  b5f19c:	00000806 	br	b5f1c0 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  b5f1a0:	e0ffff17 	ldw	r3,-4(fp)
  b5f1a4:	e0bff717 	ldw	r2,-36(fp)
  b5f1a8:	1885883a 	add	r2,r3,r2
  b5f1ac:	e0fff917 	ldw	r3,-28(fp)
  b5f1b0:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  b5f1b4:	e0fff717 	ldw	r3,-36(fp)
  b5f1b8:	18c00044 	addi	r3,r3,1
  b5f1bc:	e0fff715 	stw	r3,-36(fp)
  b5f1c0:	e13ffb17 	ldw	r4,-20(fp)
  b5f1c4:	e0bff717 	ldw	r2,-36(fp)
  b5f1c8:	20bff52e 	bgeu	r4,r2,b5f1a0 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  b5f1cc:	00003d06 	br	b5f2c4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  b5f1d0:	e0bff317 	ldw	r2,-52(fp)
  b5f1d4:	10800e17 	ldw	r2,56(r2)
  b5f1d8:	10800098 	cmpnei	r2,r2,2
  b5f1dc:	10001c1e 	bne	r2,zero,b5f250 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  b5f1e0:	e0fffe17 	ldw	r3,-8(fp)
  b5f1e4:	e0fffe17 	ldw	r3,-8(fp)
  b5f1e8:	18c5883a 	add	r2,r3,r3
  b5f1ec:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  b5f1f0:	e13ffa17 	ldw	r4,-24(fp)
  b5f1f4:	e0fffe17 	ldw	r3,-8(fp)
  b5f1f8:	20c5383a 	mul	r2,r4,r3
  b5f1fc:	e13fff17 	ldw	r4,-4(fp)
  b5f200:	2089883a 	add	r4,r4,r2
  b5f204:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  b5f208:	e0bffc17 	ldw	r2,-16(fp)
  b5f20c:	e0bff715 	stw	r2,-36(fp)
  b5f210:	00000b06 	br	b5f240 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  b5f214:	e0fff717 	ldw	r3,-36(fp)
  b5f218:	e0fff717 	ldw	r3,-36(fp)
  b5f21c:	18c5883a 	add	r2,r3,r3
  b5f220:	1007883a 	mov	r3,r2
  b5f224:	e0bfff17 	ldw	r2,-4(fp)
  b5f228:	1885883a 	add	r2,r3,r2
  b5f22c:	e0fff917 	ldw	r3,-28(fp)
  b5f230:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  b5f234:	e13ff717 	ldw	r4,-36(fp)
  b5f238:	21000044 	addi	r4,r4,1
  b5f23c:	e13ff715 	stw	r4,-36(fp)
  b5f240:	e0bffb17 	ldw	r2,-20(fp)
  b5f244:	e0fff717 	ldw	r3,-36(fp)
  b5f248:	10fff22e 	bgeu	r2,r3,b5f214 <alt_up_pixel_buffer_dma_draw_hline+0x290>
  b5f24c:	00001d06 	br	b5f2c4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  b5f250:	e13ffe17 	ldw	r4,-8(fp)
  b5f254:	e13ffe17 	ldw	r4,-8(fp)
  b5f258:	2105883a 	add	r2,r4,r4
  b5f25c:	1085883a 	add	r2,r2,r2
  b5f260:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  b5f264:	e0fffa17 	ldw	r3,-24(fp)
  b5f268:	e13ffe17 	ldw	r4,-8(fp)
  b5f26c:	1905383a 	mul	r2,r3,r4
  b5f270:	e0ffff17 	ldw	r3,-4(fp)
  b5f274:	1887883a 	add	r3,r3,r2
  b5f278:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  b5f27c:	e13ffc17 	ldw	r4,-16(fp)
  b5f280:	e13ff715 	stw	r4,-36(fp)
  b5f284:	00000c06 	br	b5f2b8 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  b5f288:	e0fff717 	ldw	r3,-36(fp)
  b5f28c:	e0fff717 	ldw	r3,-36(fp)
  b5f290:	18c5883a 	add	r2,r3,r3
  b5f294:	1085883a 	add	r2,r2,r2
  b5f298:	1007883a 	mov	r3,r2
  b5f29c:	e0bfff17 	ldw	r2,-4(fp)
  b5f2a0:	1885883a 	add	r2,r3,r2
  b5f2a4:	e0fff917 	ldw	r3,-28(fp)
  b5f2a8:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  b5f2ac:	e13ff717 	ldw	r4,-36(fp)
  b5f2b0:	21000044 	addi	r4,r4,1
  b5f2b4:	e13ff715 	stw	r4,-36(fp)
  b5f2b8:	e0bffb17 	ldw	r2,-20(fp)
  b5f2bc:	e0fff717 	ldw	r3,-36(fp)
  b5f2c0:	10fff12e 	bgeu	r2,r3,b5f288 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  b5f2c4:	e037883a 	mov	sp,fp
  b5f2c8:	df000017 	ldw	fp,0(sp)
  b5f2cc:	dec00104 	addi	sp,sp,4
  b5f2d0:	f800283a 	ret

00b5f2d4 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  b5f2d4:	defff104 	addi	sp,sp,-60
  b5f2d8:	df000e15 	stw	fp,56(sp)
  b5f2dc:	df000e04 	addi	fp,sp,56
  b5f2e0:	e13ff215 	stw	r4,-56(fp)
  b5f2e4:	e17ff315 	stw	r5,-52(fp)
  b5f2e8:	e1bff415 	stw	r6,-48(fp)
  b5f2ec:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  b5f2f0:	e0bff217 	ldw	r2,-56(fp)
  b5f2f4:	10800f17 	ldw	r2,60(r2)
  b5f2f8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  b5f2fc:	e0bff217 	ldw	r2,-56(fp)
  b5f300:	10801017 	ldw	r2,64(r2)
  b5f304:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  b5f308:	e0bff317 	ldw	r2,-52(fp)
  b5f30c:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  b5f310:	e0fff417 	ldw	r3,-48(fp)
  b5f314:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  b5f318:	e13ff517 	ldw	r4,-44(fp)
  b5f31c:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  b5f320:	e0800117 	ldw	r2,4(fp)
  b5f324:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  b5f328:	e0fffa17 	ldw	r3,-24(fp)
  b5f32c:	e13ffb17 	ldw	r4,-20(fp)
  b5f330:	1900042e 	bgeu	r3,r4,b5f344 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  b5f334:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  b5f338:	e0fffa17 	ldw	r3,-24(fp)
  b5f33c:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  b5f340:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  b5f344:	e13ffc17 	ldw	r4,-16(fp)
  b5f348:	e0bffe17 	ldw	r2,-8(fp)
  b5f34c:	2080d12e 	bgeu	r4,r2,b5f694 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  b5f350:	e0fffb17 	ldw	r3,-20(fp)
  b5f354:	e13ffd17 	ldw	r4,-12(fp)
  b5f358:	19000136 	bltu	r3,r4,b5f360 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  b5f35c:	0000cd06 	br	b5f694 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  b5f360:	e0bffa17 	ldw	r2,-24(fp)
  b5f364:	e0fffd17 	ldw	r3,-12(fp)
  b5f368:	10c00336 	bltu	r2,r3,b5f378 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  b5f36c:	e13ffd17 	ldw	r4,-12(fp)
  b5f370:	213fffc4 	addi	r4,r4,-1
  b5f374:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  b5f378:	e0800217 	ldw	r2,8(fp)
  b5f37c:	10800058 	cmpnei	r2,r2,1
  b5f380:	1000041e 	bne	r2,zero,b5f394 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  b5f384:	e0bff217 	ldw	r2,-56(fp)
  b5f388:	10800c17 	ldw	r2,48(r2)
  b5f38c:	e0bfff15 	stw	r2,-4(fp)
  b5f390:	00000306 	br	b5f3a0 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  b5f394:	e0bff217 	ldw	r2,-56(fp)
  b5f398:	10800b17 	ldw	r2,44(r2)
  b5f39c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  b5f3a0:	e0bff217 	ldw	r2,-56(fp)
  b5f3a4:	10800d17 	ldw	r2,52(r2)
  b5f3a8:	1004c03a 	cmpne	r2,r2,zero
  b5f3ac:	1000571e 	bne	r2,zero,b5f50c <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  b5f3b0:	e0bff217 	ldw	r2,-56(fp)
  b5f3b4:	10801317 	ldw	r2,76(r2)
  b5f3b8:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  b5f3bc:	e0bff717 	ldw	r2,-36(fp)
  b5f3c0:	e0fffb17 	ldw	r3,-20(fp)
  b5f3c4:	1884983a 	sll	r2,r3,r2
  b5f3c8:	e13fff17 	ldw	r4,-4(fp)
  b5f3cc:	2089883a 	add	r4,r4,r2
  b5f3d0:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  b5f3d4:	e0bff217 	ldw	r2,-56(fp)
  b5f3d8:	10800e17 	ldw	r2,56(r2)
  b5f3dc:	10800058 	cmpnei	r2,r2,1
  b5f3e0:	1000151e 	bne	r2,zero,b5f438 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  b5f3e4:	e0bffb17 	ldw	r2,-20(fp)
  b5f3e8:	e0bff815 	stw	r2,-32(fp)
  b5f3ec:	00000e06 	br	b5f428 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  b5f3f0:	e0ffff17 	ldw	r3,-4(fp)
  b5f3f4:	e0bffc17 	ldw	r2,-16(fp)
  b5f3f8:	1885883a 	add	r2,r3,r2
  b5f3fc:	e0fff917 	ldw	r3,-28(fp)
  b5f400:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  b5f404:	e0fff717 	ldw	r3,-36(fp)
  b5f408:	00800044 	movi	r2,1
  b5f40c:	10c4983a 	sll	r2,r2,r3
  b5f410:	e0ffff17 	ldw	r3,-4(fp)
  b5f414:	1887883a 	add	r3,r3,r2
  b5f418:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  b5f41c:	e13ff817 	ldw	r4,-32(fp)
  b5f420:	21000044 	addi	r4,r4,1
  b5f424:	e13ff815 	stw	r4,-32(fp)
  b5f428:	e0bffa17 	ldw	r2,-24(fp)
  b5f42c:	e0fff817 	ldw	r3,-32(fp)
  b5f430:	10ffef2e 	bgeu	r2,r3,b5f3f0 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  b5f434:	00009706 	br	b5f694 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  b5f438:	e0bff217 	ldw	r2,-56(fp)
  b5f43c:	10800e17 	ldw	r2,56(r2)
  b5f440:	10800098 	cmpnei	r2,r2,2
  b5f444:	1000181e 	bne	r2,zero,b5f4a8 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  b5f448:	e13ffb17 	ldw	r4,-20(fp)
  b5f44c:	e13ff815 	stw	r4,-32(fp)
  b5f450:	00001106 	br	b5f498 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  b5f454:	e0fffc17 	ldw	r3,-16(fp)
  b5f458:	e0fffc17 	ldw	r3,-16(fp)
  b5f45c:	18c5883a 	add	r2,r3,r3
  b5f460:	1007883a 	mov	r3,r2
  b5f464:	e0bfff17 	ldw	r2,-4(fp)
  b5f468:	1885883a 	add	r2,r3,r2
  b5f46c:	e0fff917 	ldw	r3,-28(fp)
  b5f470:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  b5f474:	e0fff717 	ldw	r3,-36(fp)
  b5f478:	00800044 	movi	r2,1
  b5f47c:	10c4983a 	sll	r2,r2,r3
  b5f480:	e13fff17 	ldw	r4,-4(fp)
  b5f484:	2089883a 	add	r4,r4,r2
  b5f488:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  b5f48c:	e0bff817 	ldw	r2,-32(fp)
  b5f490:	10800044 	addi	r2,r2,1
  b5f494:	e0bff815 	stw	r2,-32(fp)
  b5f498:	e0fffa17 	ldw	r3,-24(fp)
  b5f49c:	e13ff817 	ldw	r4,-32(fp)
  b5f4a0:	193fec2e 	bgeu	r3,r4,b5f454 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  b5f4a4:	00007b06 	br	b5f694 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  b5f4a8:	e0bffb17 	ldw	r2,-20(fp)
  b5f4ac:	e0bff815 	stw	r2,-32(fp)
  b5f4b0:	00001206 	br	b5f4fc <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  b5f4b4:	e0fffc17 	ldw	r3,-16(fp)
  b5f4b8:	e0fffc17 	ldw	r3,-16(fp)
  b5f4bc:	18c5883a 	add	r2,r3,r3
  b5f4c0:	1085883a 	add	r2,r2,r2
  b5f4c4:	1007883a 	mov	r3,r2
  b5f4c8:	e0bfff17 	ldw	r2,-4(fp)
  b5f4cc:	1885883a 	add	r2,r3,r2
  b5f4d0:	e0fff917 	ldw	r3,-28(fp)
  b5f4d4:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  b5f4d8:	e0fff717 	ldw	r3,-36(fp)
  b5f4dc:	00800044 	movi	r2,1
  b5f4e0:	10c4983a 	sll	r2,r2,r3
  b5f4e4:	e13fff17 	ldw	r4,-4(fp)
  b5f4e8:	2089883a 	add	r4,r4,r2
  b5f4ec:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  b5f4f0:	e0bff817 	ldw	r2,-32(fp)
  b5f4f4:	10800044 	addi	r2,r2,1
  b5f4f8:	e0bff815 	stw	r2,-32(fp)
  b5f4fc:	e0fffa17 	ldw	r3,-24(fp)
  b5f500:	e13ff817 	ldw	r4,-32(fp)
  b5f504:	193feb2e 	bgeu	r3,r4,b5f4b4 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  b5f508:	00006206 	br	b5f694 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  b5f50c:	e0bff217 	ldw	r2,-56(fp)
  b5f510:	10800e17 	ldw	r2,56(r2)
  b5f514:	10800058 	cmpnei	r2,r2,1
  b5f518:	1000191e 	bne	r2,zero,b5f580 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  b5f51c:	e0fffb17 	ldw	r3,-20(fp)
  b5f520:	e13ffe17 	ldw	r4,-8(fp)
  b5f524:	1905383a 	mul	r2,r3,r4
  b5f528:	e0ffff17 	ldw	r3,-4(fp)
  b5f52c:	1887883a 	add	r3,r3,r2
  b5f530:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  b5f534:	e13ffb17 	ldw	r4,-20(fp)
  b5f538:	e13ff615 	stw	r4,-40(fp)
  b5f53c:	00000c06 	br	b5f570 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  b5f540:	e0ffff17 	ldw	r3,-4(fp)
  b5f544:	e0bffc17 	ldw	r2,-16(fp)
  b5f548:	1885883a 	add	r2,r3,r2
  b5f54c:	e0fff917 	ldw	r3,-28(fp)
  b5f550:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  b5f554:	e0bfff17 	ldw	r2,-4(fp)
  b5f558:	e0fffe17 	ldw	r3,-8(fp)
  b5f55c:	10c5883a 	add	r2,r2,r3
  b5f560:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  b5f564:	e13ff617 	ldw	r4,-40(fp)
  b5f568:	21000044 	addi	r4,r4,1
  b5f56c:	e13ff615 	stw	r4,-40(fp)
  b5f570:	e0bffa17 	ldw	r2,-24(fp)
  b5f574:	e0fff617 	ldw	r3,-40(fp)
  b5f578:	10fff12e 	bgeu	r2,r3,b5f540 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  b5f57c:	00004506 	br	b5f694 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  b5f580:	e0bff217 	ldw	r2,-56(fp)
  b5f584:	10800e17 	ldw	r2,56(r2)
  b5f588:	10800098 	cmpnei	r2,r2,2
  b5f58c:	1000201e 	bne	r2,zero,b5f610 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  b5f590:	e13ffe17 	ldw	r4,-8(fp)
  b5f594:	e13ffe17 	ldw	r4,-8(fp)
  b5f598:	2105883a 	add	r2,r4,r4
  b5f59c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  b5f5a0:	e0fffb17 	ldw	r3,-20(fp)
  b5f5a4:	e13ffe17 	ldw	r4,-8(fp)
  b5f5a8:	1905383a 	mul	r2,r3,r4
  b5f5ac:	e0ffff17 	ldw	r3,-4(fp)
  b5f5b0:	1887883a 	add	r3,r3,r2
  b5f5b4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  b5f5b8:	e13ffb17 	ldw	r4,-20(fp)
  b5f5bc:	e13ff615 	stw	r4,-40(fp)
  b5f5c0:	00000f06 	br	b5f600 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  b5f5c4:	e0fffc17 	ldw	r3,-16(fp)
  b5f5c8:	e0fffc17 	ldw	r3,-16(fp)
  b5f5cc:	18c5883a 	add	r2,r3,r3
  b5f5d0:	1007883a 	mov	r3,r2
  b5f5d4:	e0bfff17 	ldw	r2,-4(fp)
  b5f5d8:	1885883a 	add	r2,r3,r2
  b5f5dc:	e0fff917 	ldw	r3,-28(fp)
  b5f5e0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  b5f5e4:	e13fff17 	ldw	r4,-4(fp)
  b5f5e8:	e0bffe17 	ldw	r2,-8(fp)
  b5f5ec:	2089883a 	add	r4,r4,r2
  b5f5f0:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  b5f5f4:	e0fff617 	ldw	r3,-40(fp)
  b5f5f8:	18c00044 	addi	r3,r3,1
  b5f5fc:	e0fff615 	stw	r3,-40(fp)
  b5f600:	e13ffa17 	ldw	r4,-24(fp)
  b5f604:	e0bff617 	ldw	r2,-40(fp)
  b5f608:	20bfee2e 	bgeu	r4,r2,b5f5c4 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  b5f60c:	00002106 	br	b5f694 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  b5f610:	e0fffe17 	ldw	r3,-8(fp)
  b5f614:	e0fffe17 	ldw	r3,-8(fp)
  b5f618:	18c5883a 	add	r2,r3,r3
  b5f61c:	1085883a 	add	r2,r2,r2
  b5f620:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  b5f624:	e13ffb17 	ldw	r4,-20(fp)
  b5f628:	e0fffe17 	ldw	r3,-8(fp)
  b5f62c:	20c5383a 	mul	r2,r4,r3
  b5f630:	e13fff17 	ldw	r4,-4(fp)
  b5f634:	2089883a 	add	r4,r4,r2
  b5f638:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  b5f63c:	e0bffb17 	ldw	r2,-20(fp)
  b5f640:	e0bff615 	stw	r2,-40(fp)
  b5f644:	00001006 	br	b5f688 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  b5f648:	e0fffc17 	ldw	r3,-16(fp)
  b5f64c:	e0fffc17 	ldw	r3,-16(fp)
  b5f650:	18c5883a 	add	r2,r3,r3
  b5f654:	1085883a 	add	r2,r2,r2
  b5f658:	1007883a 	mov	r3,r2
  b5f65c:	e0bfff17 	ldw	r2,-4(fp)
  b5f660:	1885883a 	add	r2,r3,r2
  b5f664:	e0fff917 	ldw	r3,-28(fp)
  b5f668:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  b5f66c:	e13fff17 	ldw	r4,-4(fp)
  b5f670:	e0bffe17 	ldw	r2,-8(fp)
  b5f674:	2089883a 	add	r4,r4,r2
  b5f678:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  b5f67c:	e0fff617 	ldw	r3,-40(fp)
  b5f680:	18c00044 	addi	r3,r3,1
  b5f684:	e0fff615 	stw	r3,-40(fp)
  b5f688:	e13ffa17 	ldw	r4,-24(fp)
  b5f68c:	e0bff617 	ldw	r2,-40(fp)
  b5f690:	20bfed2e 	bgeu	r4,r2,b5f648 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  b5f694:	e037883a 	mov	sp,fp
  b5f698:	df000017 	ldw	fp,0(sp)
  b5f69c:	dec00104 	addi	sp,sp,4
  b5f6a0:	f800283a 	ret

00b5f6a4 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  b5f6a4:	defff804 	addi	sp,sp,-32
  b5f6a8:	dfc00715 	stw	ra,28(sp)
  b5f6ac:	df000615 	stw	fp,24(sp)
  b5f6b0:	df000604 	addi	fp,sp,24
  b5f6b4:	e13ffc15 	stw	r4,-16(fp)
  b5f6b8:	e17ffd15 	stw	r5,-12(fp)
  b5f6bc:	e1bffe15 	stw	r6,-8(fp)
  b5f6c0:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  b5f6c4:	e0800317 	ldw	r2,12(fp)
  b5f6c8:	d8800015 	stw	r2,0(sp)
  b5f6cc:	e0800417 	ldw	r2,16(fp)
  b5f6d0:	d8800115 	stw	r2,4(sp)
  b5f6d4:	e13ffc17 	ldw	r4,-16(fp)
  b5f6d8:	e17ffd17 	ldw	r5,-12(fp)
  b5f6dc:	e1bfff17 	ldw	r6,-4(fp)
  b5f6e0:	e1fffe17 	ldw	r7,-8(fp)
  b5f6e4:	0b5ef840 	call	b5ef84 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  b5f6e8:	e0800317 	ldw	r2,12(fp)
  b5f6ec:	d8800015 	stw	r2,0(sp)
  b5f6f0:	e0800417 	ldw	r2,16(fp)
  b5f6f4:	d8800115 	stw	r2,4(sp)
  b5f6f8:	e13ffc17 	ldw	r4,-16(fp)
  b5f6fc:	e17ffd17 	ldw	r5,-12(fp)
  b5f700:	e1bfff17 	ldw	r6,-4(fp)
  b5f704:	e1c00217 	ldw	r7,8(fp)
  b5f708:	0b5ef840 	call	b5ef84 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  b5f70c:	e0800317 	ldw	r2,12(fp)
  b5f710:	d8800015 	stw	r2,0(sp)
  b5f714:	e0800417 	ldw	r2,16(fp)
  b5f718:	d8800115 	stw	r2,4(sp)
  b5f71c:	e13ffc17 	ldw	r4,-16(fp)
  b5f720:	e17ffd17 	ldw	r5,-12(fp)
  b5f724:	e1bffe17 	ldw	r6,-8(fp)
  b5f728:	e1c00217 	ldw	r7,8(fp)
  b5f72c:	0b5f2d40 	call	b5f2d4 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  b5f730:	e0800317 	ldw	r2,12(fp)
  b5f734:	d8800015 	stw	r2,0(sp)
  b5f738:	e0800417 	ldw	r2,16(fp)
  b5f73c:	d8800115 	stw	r2,4(sp)
  b5f740:	e13ffc17 	ldw	r4,-16(fp)
  b5f744:	e17fff17 	ldw	r5,-4(fp)
  b5f748:	e1bffe17 	ldw	r6,-8(fp)
  b5f74c:	e1c00217 	ldw	r7,8(fp)
  b5f750:	0b5f2d40 	call	b5f2d4 <alt_up_pixel_buffer_dma_draw_vline>
}
  b5f754:	e037883a 	mov	sp,fp
  b5f758:	dfc00117 	ldw	ra,4(sp)
  b5f75c:	df000017 	ldw	fp,0(sp)
  b5f760:	dec00204 	addi	sp,sp,8
  b5f764:	f800283a 	ret

00b5f768 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  b5f768:	defffb04 	addi	sp,sp,-20
  b5f76c:	df000415 	stw	fp,16(sp)
  b5f770:	df000404 	addi	fp,sp,16
  b5f774:	e13ffc15 	stw	r4,-16(fp)
  b5f778:	e17ffd15 	stw	r5,-12(fp)
  b5f77c:	e1bffe15 	stw	r6,-8(fp)
  b5f780:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  b5f784:	e0c00217 	ldw	r3,8(fp)
  b5f788:	1804c03a 	cmpne	r2,r3,zero
  b5f78c:	10000b1e 	bne	r2,zero,b5f7bc <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  b5f790:	e13ffd17 	ldw	r4,-12(fp)
  b5f794:	e0ffff17 	ldw	r3,-4(fp)
  b5f798:	20c5383a 	mul	r2,r4,r3
  b5f79c:	e13ffe17 	ldw	r4,-8(fp)
  b5f7a0:	1105883a 	add	r2,r2,r4
  b5f7a4:	1007883a 	mov	r3,r2
  b5f7a8:	e0bffc17 	ldw	r2,-16(fp)
  b5f7ac:	1885883a 	add	r2,r3,r2
  b5f7b0:	e0c00117 	ldw	r3,4(fp)
  b5f7b4:	10c00025 	stbio	r3,0(r2)
  b5f7b8:	00001b06 	br	b5f828 <helper_plot_pixel+0xc0>
	else if (mode == 1)
  b5f7bc:	e1000217 	ldw	r4,8(fp)
  b5f7c0:	20800058 	cmpnei	r2,r4,1
  b5f7c4:	10000c1e 	bne	r2,zero,b5f7f8 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  b5f7c8:	e0fffd17 	ldw	r3,-12(fp)
  b5f7cc:	e13fff17 	ldw	r4,-4(fp)
  b5f7d0:	1905383a 	mul	r2,r3,r4
  b5f7d4:	e0fffe17 	ldw	r3,-8(fp)
  b5f7d8:	10c5883a 	add	r2,r2,r3
  b5f7dc:	1085883a 	add	r2,r2,r2
  b5f7e0:	1007883a 	mov	r3,r2
  b5f7e4:	e0bffc17 	ldw	r2,-16(fp)
  b5f7e8:	1885883a 	add	r2,r3,r2
  b5f7ec:	e1000117 	ldw	r4,4(fp)
  b5f7f0:	1100002d 	sthio	r4,0(r2)
  b5f7f4:	00000c06 	br	b5f828 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  b5f7f8:	e0fffd17 	ldw	r3,-12(fp)
  b5f7fc:	e13fff17 	ldw	r4,-4(fp)
  b5f800:	1905383a 	mul	r2,r3,r4
  b5f804:	e0fffe17 	ldw	r3,-8(fp)
  b5f808:	10c5883a 	add	r2,r2,r3
  b5f80c:	1085883a 	add	r2,r2,r2
  b5f810:	1085883a 	add	r2,r2,r2
  b5f814:	1007883a 	mov	r3,r2
  b5f818:	e0bffc17 	ldw	r2,-16(fp)
  b5f81c:	1885883a 	add	r2,r3,r2
  b5f820:	e1000117 	ldw	r4,4(fp)
  b5f824:	11000035 	stwio	r4,0(r2)
}
  b5f828:	e037883a 	mov	sp,fp
  b5f82c:	df000017 	ldw	fp,0(sp)
  b5f830:	dec00104 	addi	sp,sp,4
  b5f834:	f800283a 	ret

00b5f838 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  b5f838:	deffe404 	addi	sp,sp,-112
  b5f83c:	dfc01b15 	stw	ra,108(sp)
  b5f840:	df001a15 	stw	fp,104(sp)
  b5f844:	df001a04 	addi	fp,sp,104
  b5f848:	e13fe815 	stw	r4,-96(fp)
  b5f84c:	e17fe915 	stw	r5,-92(fp)
  b5f850:	e1bfea15 	stw	r6,-88(fp)
  b5f854:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  b5f858:	e0bfe917 	ldw	r2,-92(fp)
  b5f85c:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  b5f860:	e0ffea17 	ldw	r3,-88(fp)
  b5f864:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  b5f868:	e13feb17 	ldw	r4,-84(fp)
  b5f86c:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  b5f870:	e0800217 	ldw	r2,8(fp)
  b5f874:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  b5f878:	e0fff717 	ldw	r3,-36(fp)
  b5f87c:	e13ff917 	ldw	r4,-28(fp)
  b5f880:	1905c83a 	sub	r2,r3,r4
  b5f884:	e0bfff15 	stw	r2,-4(fp)
  b5f888:	e0ffff17 	ldw	r3,-4(fp)
  b5f88c:	1804403a 	cmpge	r2,r3,zero
  b5f890:	1000031e 	bne	r2,zero,b5f8a0 <alt_up_pixel_buffer_dma_draw_line+0x68>
  b5f894:	e13fff17 	ldw	r4,-4(fp)
  b5f898:	0109c83a 	sub	r4,zero,r4
  b5f89c:	e13fff15 	stw	r4,-4(fp)
  b5f8a0:	e0fff817 	ldw	r3,-32(fp)
  b5f8a4:	e13ffa17 	ldw	r4,-24(fp)
  b5f8a8:	1905c83a 	sub	r2,r3,r4
  b5f8ac:	e0bffe15 	stw	r2,-8(fp)
  b5f8b0:	e0fffe17 	ldw	r3,-8(fp)
  b5f8b4:	1804403a 	cmpge	r2,r3,zero
  b5f8b8:	1000031e 	bne	r2,zero,b5f8c8 <alt_up_pixel_buffer_dma_draw_line+0x90>
  b5f8bc:	e13ffe17 	ldw	r4,-8(fp)
  b5f8c0:	0109c83a 	sub	r4,zero,r4
  b5f8c4:	e13ffe15 	stw	r4,-8(fp)
  b5f8c8:	e0fffe17 	ldw	r3,-8(fp)
  b5f8cc:	e13fff17 	ldw	r4,-4(fp)
  b5f8d0:	1904803a 	cmplt	r2,r3,r4
  b5f8d4:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  b5f8d8:	e0bfe817 	ldw	r2,-96(fp)
  b5f8dc:	10800e17 	ldw	r2,56(r2)
  b5f8e0:	10800060 	cmpeqi	r2,r2,1
  b5f8e4:	10000c1e 	bne	r2,zero,b5f918 <alt_up_pixel_buffer_dma_draw_line+0xe0>
  b5f8e8:	e0bfe817 	ldw	r2,-96(fp)
  b5f8ec:	10800e17 	ldw	r2,56(r2)
  b5f8f0:	10800098 	cmpnei	r2,r2,2
  b5f8f4:	1000031e 	bne	r2,zero,b5f904 <alt_up_pixel_buffer_dma_draw_line+0xcc>
  b5f8f8:	00800044 	movi	r2,1
  b5f8fc:	e0bffc15 	stw	r2,-16(fp)
  b5f900:	00000206 	br	b5f90c <alt_up_pixel_buffer_dma_draw_line+0xd4>
  b5f904:	00c00084 	movi	r3,2
  b5f908:	e0fffc15 	stw	r3,-16(fp)
  b5f90c:	e13ffc17 	ldw	r4,-16(fp)
  b5f910:	e13ffd15 	stw	r4,-12(fp)
  b5f914:	00000106 	br	b5f91c <alt_up_pixel_buffer_dma_draw_line+0xe4>
  b5f918:	e03ffd15 	stw	zero,-12(fp)
  b5f91c:	e0bffd17 	ldw	r2,-12(fp)
  b5f920:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  b5f924:	e0c00317 	ldw	r3,12(fp)
  b5f928:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  b5f92c:	e0bfe817 	ldw	r2,-96(fp)
  b5f930:	10800d17 	ldw	r2,52(r2)
  b5f934:	1004c03a 	cmpne	r2,r2,zero
  b5f938:	1000091e 	bne	r2,zero,b5f960 <alt_up_pixel_buffer_dma_draw_line+0x128>
  b5f93c:	e0bfe817 	ldw	r2,-96(fp)
  b5f940:	10c01317 	ldw	r3,76(r2)
  b5f944:	e0bfef17 	ldw	r2,-68(fp)
  b5f948:	1885c83a 	sub	r2,r3,r2
  b5f94c:	1007883a 	mov	r3,r2
  b5f950:	00800044 	movi	r2,1
  b5f954:	10c4983a 	sll	r2,r2,r3
  b5f958:	e0bffb15 	stw	r2,-20(fp)
  b5f95c:	00000306 	br	b5f96c <alt_up_pixel_buffer_dma_draw_line+0x134>
  b5f960:	e0bfe817 	ldw	r2,-96(fp)
  b5f964:	10800f17 	ldw	r2,60(r2)
  b5f968:	e0bffb15 	stw	r2,-20(fp)
  b5f96c:	e13ffb17 	ldw	r4,-20(fp)
  b5f970:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  b5f974:	e0800417 	ldw	r2,16(fp)
  b5f978:	10800058 	cmpnei	r2,r2,1
  b5f97c:	1000041e 	bne	r2,zero,b5f990 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  b5f980:	e0bfe817 	ldw	r2,-96(fp)
  b5f984:	10800c17 	ldw	r2,48(r2)
  b5f988:	e0bfed15 	stw	r2,-76(fp)
  b5f98c:	00000306 	br	b5f99c <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  b5f990:	e0bfe817 	ldw	r2,-96(fp)
  b5f994:	10800b17 	ldw	r2,44(r2)
  b5f998:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  b5f99c:	e0fff603 	ldbu	r3,-40(fp)
  b5f9a0:	18803fcc 	andi	r2,r3,255
  b5f9a4:	1080201c 	xori	r2,r2,128
  b5f9a8:	10bfe004 	addi	r2,r2,-128
  b5f9ac:	10800050 	cmplti	r2,r2,1
  b5f9b0:	10000c1e 	bne	r2,zero,b5f9e4 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  b5f9b4:	e13ffa17 	ldw	r4,-24(fp)
  b5f9b8:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  b5f9bc:	e0bff917 	ldw	r2,-28(fp)
  b5f9c0:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  b5f9c4:	e0fff317 	ldw	r3,-52(fp)
  b5f9c8:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  b5f9cc:	e13ff817 	ldw	r4,-32(fp)
  b5f9d0:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  b5f9d4:	e0bff717 	ldw	r2,-36(fp)
  b5f9d8:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  b5f9dc:	e0fff317 	ldw	r3,-52(fp)
  b5f9e0:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  b5f9e4:	e13ff817 	ldw	r4,-32(fp)
  b5f9e8:	e0bffa17 	ldw	r2,-24(fp)
  b5f9ec:	20800c0e 	bge	r4,r2,b5fa20 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  b5f9f0:	e0fffa17 	ldw	r3,-24(fp)
  b5f9f4:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  b5f9f8:	e13ff817 	ldw	r4,-32(fp)
  b5f9fc:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  b5fa00:	e0bff317 	ldw	r2,-52(fp)
  b5fa04:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  b5fa08:	e0fff917 	ldw	r3,-28(fp)
  b5fa0c:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  b5fa10:	e13ff717 	ldw	r4,-36(fp)
  b5fa14:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  b5fa18:	e0bff317 	ldw	r2,-52(fp)
  b5fa1c:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  b5fa20:	e0fff817 	ldw	r3,-32(fp)
  b5fa24:	e13ffa17 	ldw	r4,-24(fp)
  b5fa28:	1907c83a 	sub	r3,r3,r4
  b5fa2c:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  b5fa30:	e0fff717 	ldw	r3,-36(fp)
  b5fa34:	e13ff917 	ldw	r4,-28(fp)
  b5fa38:	1905c83a 	sub	r2,r3,r4
  b5fa3c:	e0bff415 	stw	r2,-48(fp)
  b5fa40:	e0fff417 	ldw	r3,-48(fp)
  b5fa44:	1804403a 	cmpge	r2,r3,zero
  b5fa48:	1000031e 	bne	r2,zero,b5fa58 <alt_up_pixel_buffer_dma_draw_line+0x220>
  b5fa4c:	e13ff417 	ldw	r4,-48(fp)
  b5fa50:	0109c83a 	sub	r4,zero,r4
  b5fa54:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  b5fa58:	e0fff517 	ldw	r3,-44(fp)
  b5fa5c:	1804d7fa 	srli	r2,r3,31
  b5fa60:	e13ff517 	ldw	r4,-44(fp)
  b5fa64:	1105883a 	add	r2,r2,r4
  b5fa68:	1005d07a 	srai	r2,r2,1
  b5fa6c:	0085c83a 	sub	r2,zero,r2
  b5fa70:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  b5fa74:	e0bff917 	ldw	r2,-28(fp)
  b5fa78:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  b5fa7c:	e0fff917 	ldw	r3,-28(fp)
  b5fa80:	e13ff717 	ldw	r4,-36(fp)
  b5fa84:	1900030e 	bge	r3,r4,b5fa94 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  b5fa88:	00800044 	movi	r2,1
  b5fa8c:	e0bff215 	stw	r2,-56(fp)
  b5fa90:	00000206 	br	b5fa9c <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  b5fa94:	00ffffc4 	movi	r3,-1
  b5fa98:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  b5fa9c:	e13ff603 	ldbu	r4,-40(fp)
  b5faa0:	20803fcc 	andi	r2,r4,255
  b5faa4:	1080201c 	xori	r2,r2,128
  b5faa8:	10bfe004 	addi	r2,r2,-128
  b5faac:	10800058 	cmpnei	r2,r2,1
  b5fab0:	1000221e 	bne	r2,zero,b5fb3c <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  b5fab4:	e0bffa17 	ldw	r2,-24(fp)
  b5fab8:	e0bff115 	stw	r2,-60(fp)
  b5fabc:	00001b06 	br	b5fb2c <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  b5fac0:	e0ffee17 	ldw	r3,-72(fp)
  b5fac4:	d8c00015 	stw	r3,0(sp)
  b5fac8:	e13fef17 	ldw	r4,-68(fp)
  b5facc:	d9000115 	stw	r4,4(sp)
  b5fad0:	e13fed17 	ldw	r4,-76(fp)
  b5fad4:	e17fec17 	ldw	r5,-80(fp)
  b5fad8:	e1bff017 	ldw	r6,-64(fp)
  b5fadc:	e1fff117 	ldw	r7,-60(fp)
  b5fae0:	0b5f7680 	call	b5f768 <helper_plot_pixel>
			error = error + deltay;
  b5fae4:	e0bff317 	ldw	r2,-52(fp)
  b5fae8:	e0fff417 	ldw	r3,-48(fp)
  b5faec:	10c5883a 	add	r2,r2,r3
  b5faf0:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  b5faf4:	e13ff317 	ldw	r4,-52(fp)
  b5faf8:	20800050 	cmplti	r2,r4,1
  b5fafc:	1000081e 	bne	r2,zero,b5fb20 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  b5fb00:	e0bff017 	ldw	r2,-64(fp)
  b5fb04:	e0fff217 	ldw	r3,-56(fp)
  b5fb08:	10c5883a 	add	r2,r2,r3
  b5fb0c:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  b5fb10:	e13ff317 	ldw	r4,-52(fp)
  b5fb14:	e0bff517 	ldw	r2,-44(fp)
  b5fb18:	2089c83a 	sub	r4,r4,r2
  b5fb1c:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  b5fb20:	e0fff117 	ldw	r3,-60(fp)
  b5fb24:	18c00044 	addi	r3,r3,1
  b5fb28:	e0fff115 	stw	r3,-60(fp)
  b5fb2c:	e13ff817 	ldw	r4,-32(fp)
  b5fb30:	e0bff117 	ldw	r2,-60(fp)
  b5fb34:	20bfe20e 	bge	r4,r2,b5fac0 <alt_up_pixel_buffer_dma_draw_line+0x288>
  b5fb38:	00002106 	br	b5fbc0 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  b5fb3c:	e0fffa17 	ldw	r3,-24(fp)
  b5fb40:	e0fff115 	stw	r3,-60(fp)
  b5fb44:	00001b06 	br	b5fbb4 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  b5fb48:	e13fee17 	ldw	r4,-72(fp)
  b5fb4c:	d9000015 	stw	r4,0(sp)
  b5fb50:	e0bfef17 	ldw	r2,-68(fp)
  b5fb54:	d8800115 	stw	r2,4(sp)
  b5fb58:	e13fed17 	ldw	r4,-76(fp)
  b5fb5c:	e17fec17 	ldw	r5,-80(fp)
  b5fb60:	e1bff117 	ldw	r6,-60(fp)
  b5fb64:	e1fff017 	ldw	r7,-64(fp)
  b5fb68:	0b5f7680 	call	b5f768 <helper_plot_pixel>
			error = error + deltay;
  b5fb6c:	e0fff317 	ldw	r3,-52(fp)
  b5fb70:	e13ff417 	ldw	r4,-48(fp)
  b5fb74:	1907883a 	add	r3,r3,r4
  b5fb78:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  b5fb7c:	e0fff317 	ldw	r3,-52(fp)
  b5fb80:	18800050 	cmplti	r2,r3,1
  b5fb84:	1000081e 	bne	r2,zero,b5fba8 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  b5fb88:	e13ff017 	ldw	r4,-64(fp)
  b5fb8c:	e0bff217 	ldw	r2,-56(fp)
  b5fb90:	2089883a 	add	r4,r4,r2
  b5fb94:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  b5fb98:	e0fff317 	ldw	r3,-52(fp)
  b5fb9c:	e13ff517 	ldw	r4,-44(fp)
  b5fba0:	1907c83a 	sub	r3,r3,r4
  b5fba4:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  b5fba8:	e0bff117 	ldw	r2,-60(fp)
  b5fbac:	10800044 	addi	r2,r2,1
  b5fbb0:	e0bff115 	stw	r2,-60(fp)
  b5fbb4:	e0fff817 	ldw	r3,-32(fp)
  b5fbb8:	e13ff117 	ldw	r4,-60(fp)
  b5fbbc:	193fe20e 	bge	r3,r4,b5fb48 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  b5fbc0:	e037883a 	mov	sp,fp
  b5fbc4:	dfc00117 	ldw	ra,4(sp)
  b5fbc8:	df000017 	ldw	fp,0(sp)
  b5fbcc:	dec00204 	addi	sp,sp,8
  b5fbd0:	f800283a 	ret

00b5fbd4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  b5fbd4:	defff404 	addi	sp,sp,-48
  b5fbd8:	df000b15 	stw	fp,44(sp)
  b5fbdc:	df000b04 	addi	fp,sp,44
  b5fbe0:	e13ffb15 	stw	r4,-20(fp)
  b5fbe4:	e17ffc15 	stw	r5,-16(fp)
  b5fbe8:	e1bffd15 	stw	r6,-12(fp)
  b5fbec:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  b5fbf0:	e03ff915 	stw	zero,-28(fp)
  b5fbf4:	00802db4 	movhi	r2,182
  b5fbf8:	10930f04 	addi	r2,r2,19516
  b5fbfc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  b5fc00:	1005003a 	cmpeq	r2,r2,zero
  b5fc04:	1000411e 	bne	r2,zero,b5fd0c <alt_alarm_start+0x138>
  {
    if (alarm)
  b5fc08:	e0bffb17 	ldw	r2,-20(fp)
  b5fc0c:	1005003a 	cmpeq	r2,r2,zero
  b5fc10:	10003b1e 	bne	r2,zero,b5fd00 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  b5fc14:	e0fffb17 	ldw	r3,-20(fp)
  b5fc18:	e0bffd17 	ldw	r2,-12(fp)
  b5fc1c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  b5fc20:	e0fffb17 	ldw	r3,-20(fp)
  b5fc24:	e0bffe17 	ldw	r2,-8(fp)
  b5fc28:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  b5fc2c:	0005303a 	rdctl	r2,status
  b5fc30:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  b5fc34:	e0fff817 	ldw	r3,-32(fp)
  b5fc38:	00bfff84 	movi	r2,-2
  b5fc3c:	1884703a 	and	r2,r3,r2
  b5fc40:	1001703a 	wrctl	status,r2
  
  return context;
  b5fc44:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  b5fc48:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  b5fc4c:	00802db4 	movhi	r2,182
  b5fc50:	10931004 	addi	r2,r2,19520
  b5fc54:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  b5fc58:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  b5fc5c:	e0fffc17 	ldw	r3,-16(fp)
  b5fc60:	e0bff917 	ldw	r2,-28(fp)
  b5fc64:	1885883a 	add	r2,r3,r2
  b5fc68:	10c00044 	addi	r3,r2,1
  b5fc6c:	e0bffb17 	ldw	r2,-20(fp)
  b5fc70:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  b5fc74:	e0bffb17 	ldw	r2,-20(fp)
  b5fc78:	10c00217 	ldw	r3,8(r2)
  b5fc7c:	e0bff917 	ldw	r2,-28(fp)
  b5fc80:	1880042e 	bgeu	r3,r2,b5fc94 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  b5fc84:	e0fffb17 	ldw	r3,-20(fp)
  b5fc88:	00800044 	movi	r2,1
  b5fc8c:	18800405 	stb	r2,16(r3)
  b5fc90:	00000206 	br	b5fc9c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  b5fc94:	e0bffb17 	ldw	r2,-20(fp)
  b5fc98:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  b5fc9c:	e0fffb17 	ldw	r3,-20(fp)
  b5fca0:	00802db4 	movhi	r2,182
  b5fca4:	108c0b04 	addi	r2,r2,12332
  b5fca8:	e0bff615 	stw	r2,-40(fp)
  b5fcac:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  b5fcb0:	e0fff717 	ldw	r3,-36(fp)
  b5fcb4:	e0bff617 	ldw	r2,-40(fp)
  b5fcb8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  b5fcbc:	e0bff617 	ldw	r2,-40(fp)
  b5fcc0:	10c00017 	ldw	r3,0(r2)
  b5fcc4:	e0bff717 	ldw	r2,-36(fp)
  b5fcc8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  b5fccc:	e0bff617 	ldw	r2,-40(fp)
  b5fcd0:	10c00017 	ldw	r3,0(r2)
  b5fcd4:	e0bff717 	ldw	r2,-36(fp)
  b5fcd8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  b5fcdc:	e0fff617 	ldw	r3,-40(fp)
  b5fce0:	e0bff717 	ldw	r2,-36(fp)
  b5fce4:	18800015 	stw	r2,0(r3)
  b5fce8:	e0bffa17 	ldw	r2,-24(fp)
  b5fcec:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  b5fcf0:	e0bff517 	ldw	r2,-44(fp)
  b5fcf4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  b5fcf8:	e03fff15 	stw	zero,-4(fp)
  b5fcfc:	00000506 	br	b5fd14 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  b5fd00:	00bffa84 	movi	r2,-22
  b5fd04:	e0bfff15 	stw	r2,-4(fp)
  b5fd08:	00000206 	br	b5fd14 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  b5fd0c:	00bfde84 	movi	r2,-134
  b5fd10:	e0bfff15 	stw	r2,-4(fp)
  b5fd14:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  b5fd18:	e037883a 	mov	sp,fp
  b5fd1c:	df000017 	ldw	fp,0(sp)
  b5fd20:	dec00104 	addi	sp,sp,4
  b5fd24:	f800283a 	ret

00b5fd28 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  b5fd28:	defffe04 	addi	sp,sp,-8
  b5fd2c:	df000115 	stw	fp,4(sp)
  b5fd30:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  b5fd34:	e03fff15 	stw	zero,-4(fp)
  b5fd38:	00000506 	br	b5fd50 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  b5fd3c:	e0bfff17 	ldw	r2,-4(fp)
  b5fd40:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  b5fd44:	e0bfff17 	ldw	r2,-4(fp)
  b5fd48:	10800804 	addi	r2,r2,32
  b5fd4c:	e0bfff15 	stw	r2,-4(fp)
  b5fd50:	e0bfff17 	ldw	r2,-4(fp)
  b5fd54:	10810030 	cmpltui	r2,r2,1024
  b5fd58:	103ff81e 	bne	r2,zero,b5fd3c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  b5fd5c:	e037883a 	mov	sp,fp
  b5fd60:	df000017 	ldw	fp,0(sp)
  b5fd64:	dec00104 	addi	sp,sp,4
  b5fd68:	f800283a 	ret

00b5fd6c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  b5fd6c:	defff904 	addi	sp,sp,-28
  b5fd70:	dfc00615 	stw	ra,24(sp)
  b5fd74:	df000515 	stw	fp,20(sp)
  b5fd78:	df000504 	addi	fp,sp,20
  b5fd7c:	e13ffd15 	stw	r4,-12(fp)
  b5fd80:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  b5fd84:	e0bffd17 	ldw	r2,-12(fp)
  b5fd88:	1005003a 	cmpeq	r2,r2,zero
  b5fd8c:	1000041e 	bne	r2,zero,b5fda0 <alt_dev_llist_insert+0x34>
  b5fd90:	e0bffd17 	ldw	r2,-12(fp)
  b5fd94:	10800217 	ldw	r2,8(r2)
  b5fd98:	1004c03a 	cmpne	r2,r2,zero
  b5fd9c:	1000071e 	bne	r2,zero,b5fdbc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  b5fda0:	0b5fe200 	call	b5fe20 <alt_get_errno>
  b5fda4:	1007883a 	mov	r3,r2
  b5fda8:	00800584 	movi	r2,22
  b5fdac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  b5fdb0:	00bffa84 	movi	r2,-22
  b5fdb4:	e0bfff15 	stw	r2,-4(fp)
  b5fdb8:	00001306 	br	b5fe08 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  b5fdbc:	e0fffd17 	ldw	r3,-12(fp)
  b5fdc0:	e0bffe17 	ldw	r2,-8(fp)
  b5fdc4:	e0bffb15 	stw	r2,-20(fp)
  b5fdc8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  b5fdcc:	e0fffc17 	ldw	r3,-16(fp)
  b5fdd0:	e0bffb17 	ldw	r2,-20(fp)
  b5fdd4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  b5fdd8:	e0bffb17 	ldw	r2,-20(fp)
  b5fddc:	10c00017 	ldw	r3,0(r2)
  b5fde0:	e0bffc17 	ldw	r2,-16(fp)
  b5fde4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  b5fde8:	e0bffb17 	ldw	r2,-20(fp)
  b5fdec:	10c00017 	ldw	r3,0(r2)
  b5fdf0:	e0bffc17 	ldw	r2,-16(fp)
  b5fdf4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  b5fdf8:	e0fffb17 	ldw	r3,-20(fp)
  b5fdfc:	e0bffc17 	ldw	r2,-16(fp)
  b5fe00:	18800015 	stw	r2,0(r3)

  return 0;  
  b5fe04:	e03fff15 	stw	zero,-4(fp)
  b5fe08:	e0bfff17 	ldw	r2,-4(fp)
}
  b5fe0c:	e037883a 	mov	sp,fp
  b5fe10:	dfc00117 	ldw	ra,4(sp)
  b5fe14:	df000017 	ldw	fp,0(sp)
  b5fe18:	dec00204 	addi	sp,sp,8
  b5fe1c:	f800283a 	ret

00b5fe20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  b5fe20:	defffd04 	addi	sp,sp,-12
  b5fe24:	dfc00215 	stw	ra,8(sp)
  b5fe28:	df000115 	stw	fp,4(sp)
  b5fe2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  b5fe30:	00802db4 	movhi	r2,182
  b5fe34:	108c0404 	addi	r2,r2,12304
  b5fe38:	10800017 	ldw	r2,0(r2)
  b5fe3c:	1005003a 	cmpeq	r2,r2,zero
  b5fe40:	1000061e 	bne	r2,zero,b5fe5c <alt_get_errno+0x3c>
  b5fe44:	00802db4 	movhi	r2,182
  b5fe48:	108c0404 	addi	r2,r2,12304
  b5fe4c:	10800017 	ldw	r2,0(r2)
  b5fe50:	103ee83a 	callr	r2
  b5fe54:	e0bfff15 	stw	r2,-4(fp)
  b5fe58:	00000306 	br	b5fe68 <alt_get_errno+0x48>
  b5fe5c:	00802db4 	movhi	r2,182
  b5fe60:	10930a04 	addi	r2,r2,19496
  b5fe64:	e0bfff15 	stw	r2,-4(fp)
  b5fe68:	e0bfff17 	ldw	r2,-4(fp)
}
  b5fe6c:	e037883a 	mov	sp,fp
  b5fe70:	dfc00117 	ldw	ra,4(sp)
  b5fe74:	df000017 	ldw	fp,0(sp)
  b5fe78:	dec00204 	addi	sp,sp,8
  b5fe7c:	f800283a 	ret

00b5fe80 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  b5fe80:	defffd04 	addi	sp,sp,-12
  b5fe84:	dfc00215 	stw	ra,8(sp)
  b5fe88:	df000115 	stw	fp,4(sp)
  b5fe8c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  b5fe90:	00bfff04 	movi	r2,-4
  b5fe94:	00c02db4 	movhi	r3,182
  b5fe98:	18c3df04 	addi	r3,r3,3964
  b5fe9c:	1885883a 	add	r2,r3,r2
  b5fea0:	e0bfff15 	stw	r2,-4(fp)
  b5fea4:	00000606 	br	b5fec0 <_do_ctors+0x40>
        (*ctor) (); 
  b5fea8:	e0bfff17 	ldw	r2,-4(fp)
  b5feac:	10800017 	ldw	r2,0(r2)
  b5feb0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  b5feb4:	e0bfff17 	ldw	r2,-4(fp)
  b5feb8:	10bfff04 	addi	r2,r2,-4
  b5febc:	e0bfff15 	stw	r2,-4(fp)
  b5fec0:	e0ffff17 	ldw	r3,-4(fp)
  b5fec4:	00802db4 	movhi	r2,182
  b5fec8:	1083de04 	addi	r2,r2,3960
  b5fecc:	18bff62e 	bgeu	r3,r2,b5fea8 <_do_ctors+0x28>
        (*ctor) (); 
}
  b5fed0:	e037883a 	mov	sp,fp
  b5fed4:	dfc00117 	ldw	ra,4(sp)
  b5fed8:	df000017 	ldw	fp,0(sp)
  b5fedc:	dec00204 	addi	sp,sp,8
  b5fee0:	f800283a 	ret

00b5fee4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  b5fee4:	defffd04 	addi	sp,sp,-12
  b5fee8:	dfc00215 	stw	ra,8(sp)
  b5feec:	df000115 	stw	fp,4(sp)
  b5fef0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  b5fef4:	00bfff04 	movi	r2,-4
  b5fef8:	00c02db4 	movhi	r3,182
  b5fefc:	18c3df04 	addi	r3,r3,3964
  b5ff00:	1885883a 	add	r2,r3,r2
  b5ff04:	e0bfff15 	stw	r2,-4(fp)
  b5ff08:	00000606 	br	b5ff24 <_do_dtors+0x40>
        (*dtor) (); 
  b5ff0c:	e0bfff17 	ldw	r2,-4(fp)
  b5ff10:	10800017 	ldw	r2,0(r2)
  b5ff14:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  b5ff18:	e0bfff17 	ldw	r2,-4(fp)
  b5ff1c:	10bfff04 	addi	r2,r2,-4
  b5ff20:	e0bfff15 	stw	r2,-4(fp)
  b5ff24:	e0ffff17 	ldw	r3,-4(fp)
  b5ff28:	00802db4 	movhi	r2,182
  b5ff2c:	1083df04 	addi	r2,r2,3964
  b5ff30:	18bff62e 	bgeu	r3,r2,b5ff0c <_do_dtors+0x28>
        (*dtor) (); 
}
  b5ff34:	e037883a 	mov	sp,fp
  b5ff38:	dfc00117 	ldw	ra,4(sp)
  b5ff3c:	df000017 	ldw	fp,0(sp)
  b5ff40:	dec00204 	addi	sp,sp,8
  b5ff44:	f800283a 	ret

00b5ff48 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  b5ff48:	defff904 	addi	sp,sp,-28
  b5ff4c:	dfc00615 	stw	ra,24(sp)
  b5ff50:	df000515 	stw	fp,20(sp)
  b5ff54:	df000504 	addi	fp,sp,20
  b5ff58:	e13ffd15 	stw	r4,-12(fp)
  b5ff5c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  b5ff60:	e0bffe17 	ldw	r2,-8(fp)
  b5ff64:	10800017 	ldw	r2,0(r2)
  b5ff68:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  b5ff6c:	e13ffd17 	ldw	r4,-12(fp)
  b5ff70:	0b53dc40 	call	b53dc4 <strlen>
  b5ff74:	10800044 	addi	r2,r2,1
  b5ff78:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  b5ff7c:	00000d06 	br	b5ffb4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  b5ff80:	e0bffc17 	ldw	r2,-16(fp)
  b5ff84:	11000217 	ldw	r4,8(r2)
  b5ff88:	e1bffb17 	ldw	r6,-20(fp)
  b5ff8c:	e17ffd17 	ldw	r5,-12(fp)
  b5ff90:	0b60b500 	call	b60b50 <memcmp>
  b5ff94:	1004c03a 	cmpne	r2,r2,zero
  b5ff98:	1000031e 	bne	r2,zero,b5ffa8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  b5ff9c:	e0bffc17 	ldw	r2,-16(fp)
  b5ffa0:	e0bfff15 	stw	r2,-4(fp)
  b5ffa4:	00000706 	br	b5ffc4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  b5ffa8:	e0bffc17 	ldw	r2,-16(fp)
  b5ffac:	10800017 	ldw	r2,0(r2)
  b5ffb0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  b5ffb4:	e0fffe17 	ldw	r3,-8(fp)
  b5ffb8:	e0bffc17 	ldw	r2,-16(fp)
  b5ffbc:	10fff01e 	bne	r2,r3,b5ff80 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  b5ffc0:	e03fff15 	stw	zero,-4(fp)
  b5ffc4:	e0bfff17 	ldw	r2,-4(fp)
}
  b5ffc8:	e037883a 	mov	sp,fp
  b5ffcc:	dfc00117 	ldw	ra,4(sp)
  b5ffd0:	df000017 	ldw	fp,0(sp)
  b5ffd4:	dec00204 	addi	sp,sp,8
  b5ffd8:	f800283a 	ret

00b5ffdc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  b5ffdc:	defffe04 	addi	sp,sp,-8
  b5ffe0:	dfc00115 	stw	ra,4(sp)
  b5ffe4:	df000015 	stw	fp,0(sp)
  b5ffe8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  b5ffec:	0009883a 	mov	r4,zero
  b5fff0:	01440004 	movi	r5,4096
  b5fff4:	0b60a740 	call	b60a74 <alt_icache_flush>
#endif
}
  b5fff8:	e037883a 	mov	sp,fp
  b5fffc:	dfc00117 	ldw	ra,4(sp)
  b60000:	df000017 	ldw	fp,0(sp)
  b60004:	dec00204 	addi	sp,sp,8
  b60008:	f800283a 	ret

00b6000c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  b6000c:	defff904 	addi	sp,sp,-28
  b60010:	dfc00615 	stw	ra,24(sp)
  b60014:	df000515 	stw	fp,20(sp)
  b60018:	df000504 	addi	fp,sp,20
  b6001c:	e13ffc15 	stw	r4,-16(fp)
  b60020:	e17ffd15 	stw	r5,-12(fp)
  b60024:	e1bffe15 	stw	r6,-8(fp)
  b60028:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  b6002c:	e0800217 	ldw	r2,8(fp)
  b60030:	d8800015 	stw	r2,0(sp)
  b60034:	e13ffc17 	ldw	r4,-16(fp)
  b60038:	e17ffd17 	ldw	r5,-12(fp)
  b6003c:	e1bffe17 	ldw	r6,-8(fp)
  b60040:	e1ffff17 	ldw	r7,-4(fp)
  b60044:	0b601e00 	call	b601e0 <alt_iic_isr_register>
}  
  b60048:	e037883a 	mov	sp,fp
  b6004c:	dfc00117 	ldw	ra,4(sp)
  b60050:	df000017 	ldw	fp,0(sp)
  b60054:	dec00204 	addi	sp,sp,8
  b60058:	f800283a 	ret

00b6005c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  b6005c:	defff904 	addi	sp,sp,-28
  b60060:	df000615 	stw	fp,24(sp)
  b60064:	df000604 	addi	fp,sp,24
  b60068:	e13ffe15 	stw	r4,-8(fp)
  b6006c:	e17fff15 	stw	r5,-4(fp)
  b60070:	e0bfff17 	ldw	r2,-4(fp)
  b60074:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  b60078:	0005303a 	rdctl	r2,status
  b6007c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  b60080:	e0fffb17 	ldw	r3,-20(fp)
  b60084:	00bfff84 	movi	r2,-2
  b60088:	1884703a 	and	r2,r3,r2
  b6008c:	1001703a 	wrctl	status,r2
  
  return context;
  b60090:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  b60094:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  b60098:	e0fffc17 	ldw	r3,-16(fp)
  b6009c:	00800044 	movi	r2,1
  b600a0:	10c4983a 	sll	r2,r2,r3
  b600a4:	1007883a 	mov	r3,r2
  b600a8:	00802db4 	movhi	r2,182
  b600ac:	10930e04 	addi	r2,r2,19512
  b600b0:	10800017 	ldw	r2,0(r2)
  b600b4:	1886b03a 	or	r3,r3,r2
  b600b8:	00802db4 	movhi	r2,182
  b600bc:	10930e04 	addi	r2,r2,19512
  b600c0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  b600c4:	00802db4 	movhi	r2,182
  b600c8:	10930e04 	addi	r2,r2,19512
  b600cc:	10800017 	ldw	r2,0(r2)
  b600d0:	100170fa 	wrctl	ienable,r2
  b600d4:	e0bffd17 	ldw	r2,-12(fp)
  b600d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  b600dc:	e0bffa17 	ldw	r2,-24(fp)
  b600e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  b600e4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  b600e8:	e037883a 	mov	sp,fp
  b600ec:	df000017 	ldw	fp,0(sp)
  b600f0:	dec00104 	addi	sp,sp,4
  b600f4:	f800283a 	ret

00b600f8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  b600f8:	defff904 	addi	sp,sp,-28
  b600fc:	df000615 	stw	fp,24(sp)
  b60100:	df000604 	addi	fp,sp,24
  b60104:	e13ffe15 	stw	r4,-8(fp)
  b60108:	e17fff15 	stw	r5,-4(fp)
  b6010c:	e0bfff17 	ldw	r2,-4(fp)
  b60110:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  b60114:	0005303a 	rdctl	r2,status
  b60118:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  b6011c:	e0fffb17 	ldw	r3,-20(fp)
  b60120:	00bfff84 	movi	r2,-2
  b60124:	1884703a 	and	r2,r3,r2
  b60128:	1001703a 	wrctl	status,r2
  
  return context;
  b6012c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  b60130:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  b60134:	e0fffc17 	ldw	r3,-16(fp)
  b60138:	00800044 	movi	r2,1
  b6013c:	10c4983a 	sll	r2,r2,r3
  b60140:	0084303a 	nor	r2,zero,r2
  b60144:	1007883a 	mov	r3,r2
  b60148:	00802db4 	movhi	r2,182
  b6014c:	10930e04 	addi	r2,r2,19512
  b60150:	10800017 	ldw	r2,0(r2)
  b60154:	1886703a 	and	r3,r3,r2
  b60158:	00802db4 	movhi	r2,182
  b6015c:	10930e04 	addi	r2,r2,19512
  b60160:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  b60164:	00802db4 	movhi	r2,182
  b60168:	10930e04 	addi	r2,r2,19512
  b6016c:	10800017 	ldw	r2,0(r2)
  b60170:	100170fa 	wrctl	ienable,r2
  b60174:	e0bffd17 	ldw	r2,-12(fp)
  b60178:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  b6017c:	e0bffa17 	ldw	r2,-24(fp)
  b60180:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  b60184:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  b60188:	e037883a 	mov	sp,fp
  b6018c:	df000017 	ldw	fp,0(sp)
  b60190:	dec00104 	addi	sp,sp,4
  b60194:	f800283a 	ret

00b60198 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  b60198:	defffc04 	addi	sp,sp,-16
  b6019c:	df000315 	stw	fp,12(sp)
  b601a0:	df000304 	addi	fp,sp,12
  b601a4:	e13ffe15 	stw	r4,-8(fp)
  b601a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  b601ac:	000530fa 	rdctl	r2,ienable
  b601b0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  b601b4:	e0ffff17 	ldw	r3,-4(fp)
  b601b8:	00800044 	movi	r2,1
  b601bc:	10c4983a 	sll	r2,r2,r3
  b601c0:	1007883a 	mov	r3,r2
  b601c4:	e0bffd17 	ldw	r2,-12(fp)
  b601c8:	1884703a 	and	r2,r3,r2
  b601cc:	1004c03a 	cmpne	r2,r2,zero
}
  b601d0:	e037883a 	mov	sp,fp
  b601d4:	df000017 	ldw	fp,0(sp)
  b601d8:	dec00104 	addi	sp,sp,4
  b601dc:	f800283a 	ret

00b601e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  b601e0:	defff404 	addi	sp,sp,-48
  b601e4:	dfc00b15 	stw	ra,44(sp)
  b601e8:	df000a15 	stw	fp,40(sp)
  b601ec:	df000a04 	addi	fp,sp,40
  b601f0:	e13ffb15 	stw	r4,-20(fp)
  b601f4:	e17ffc15 	stw	r5,-16(fp)
  b601f8:	e1bffd15 	stw	r6,-12(fp)
  b601fc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  b60200:	00bffa84 	movi	r2,-22
  b60204:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  b60208:	e0bffc17 	ldw	r2,-16(fp)
  b6020c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  b60210:	e0bff917 	ldw	r2,-28(fp)
  b60214:	10800808 	cmpgei	r2,r2,32
  b60218:	1000291e 	bne	r2,zero,b602c0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  b6021c:	0005303a 	rdctl	r2,status
  b60220:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  b60224:	e0fff717 	ldw	r3,-36(fp)
  b60228:	00bfff84 	movi	r2,-2
  b6022c:	1884703a 	and	r2,r3,r2
  b60230:	1001703a 	wrctl	status,r2
  
  return context;
  b60234:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  b60238:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  b6023c:	e0bff917 	ldw	r2,-28(fp)
  b60240:	00c02db4 	movhi	r3,182
  b60244:	18d31b04 	addi	r3,r3,19564
  b60248:	100490fa 	slli	r2,r2,3
  b6024c:	10c7883a 	add	r3,r2,r3
  b60250:	e0bffd17 	ldw	r2,-12(fp)
  b60254:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  b60258:	e0bff917 	ldw	r2,-28(fp)
  b6025c:	00c02db4 	movhi	r3,182
  b60260:	18d31b04 	addi	r3,r3,19564
  b60264:	100490fa 	slli	r2,r2,3
  b60268:	10c5883a 	add	r2,r2,r3
  b6026c:	10c00104 	addi	r3,r2,4
  b60270:	e0bffe17 	ldw	r2,-8(fp)
  b60274:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  b60278:	e0bffd17 	ldw	r2,-12(fp)
  b6027c:	1005003a 	cmpeq	r2,r2,zero
  b60280:	1000051e 	bne	r2,zero,b60298 <alt_iic_isr_register+0xb8>
  b60284:	e17ff917 	ldw	r5,-28(fp)
  b60288:	e13ffb17 	ldw	r4,-20(fp)
  b6028c:	0b6005c0 	call	b6005c <alt_ic_irq_enable>
  b60290:	e0bfff15 	stw	r2,-4(fp)
  b60294:	00000406 	br	b602a8 <alt_iic_isr_register+0xc8>
  b60298:	e17ff917 	ldw	r5,-28(fp)
  b6029c:	e13ffb17 	ldw	r4,-20(fp)
  b602a0:	0b600f80 	call	b600f8 <alt_ic_irq_disable>
  b602a4:	e0bfff15 	stw	r2,-4(fp)
  b602a8:	e0bfff17 	ldw	r2,-4(fp)
  b602ac:	e0bffa15 	stw	r2,-24(fp)
  b602b0:	e0bff817 	ldw	r2,-32(fp)
  b602b4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  b602b8:	e0bff617 	ldw	r2,-40(fp)
  b602bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  b602c0:	e0bffa17 	ldw	r2,-24(fp)
}
  b602c4:	e037883a 	mov	sp,fp
  b602c8:	dfc00117 	ldw	ra,4(sp)
  b602cc:	df000017 	ldw	fp,0(sp)
  b602d0:	dec00204 	addi	sp,sp,8
  b602d4:	f800283a 	ret

00b602d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  b602d8:	defff904 	addi	sp,sp,-28
  b602dc:	dfc00615 	stw	ra,24(sp)
  b602e0:	df000515 	stw	fp,20(sp)
  b602e4:	df000504 	addi	fp,sp,20
  b602e8:	e13ffc15 	stw	r4,-16(fp)
  b602ec:	e17ffd15 	stw	r5,-12(fp)
  b602f0:	e1bffe15 	stw	r6,-8(fp)
  b602f4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  b602f8:	e13ffd17 	ldw	r4,-12(fp)
  b602fc:	e17ffe17 	ldw	r5,-8(fp)
  b60300:	e1bfff17 	ldw	r6,-4(fp)
  b60304:	0b604f00 	call	b604f0 <open>
  b60308:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  b6030c:	e0bffb17 	ldw	r2,-20(fp)
  b60310:	1004803a 	cmplt	r2,r2,zero
  b60314:	10001c1e 	bne	r2,zero,b60388 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  b60318:	e0bffb17 	ldw	r2,-20(fp)
  b6031c:	00c02db4 	movhi	r3,182
  b60320:	18c72804 	addi	r3,r3,7328
  b60324:	10800324 	muli	r2,r2,12
  b60328:	10c5883a 	add	r2,r2,r3
  b6032c:	10c00017 	ldw	r3,0(r2)
  b60330:	e0bffc17 	ldw	r2,-16(fp)
  b60334:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  b60338:	e0bffb17 	ldw	r2,-20(fp)
  b6033c:	00c02db4 	movhi	r3,182
  b60340:	18c72804 	addi	r3,r3,7328
  b60344:	10800324 	muli	r2,r2,12
  b60348:	10c5883a 	add	r2,r2,r3
  b6034c:	10800104 	addi	r2,r2,4
  b60350:	10c00017 	ldw	r3,0(r2)
  b60354:	e0bffc17 	ldw	r2,-16(fp)
  b60358:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  b6035c:	e0bffb17 	ldw	r2,-20(fp)
  b60360:	00c02db4 	movhi	r3,182
  b60364:	18c72804 	addi	r3,r3,7328
  b60368:	10800324 	muli	r2,r2,12
  b6036c:	10c5883a 	add	r2,r2,r3
  b60370:	10800204 	addi	r2,r2,8
  b60374:	10c00017 	ldw	r3,0(r2)
  b60378:	e0bffc17 	ldw	r2,-16(fp)
  b6037c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  b60380:	e13ffb17 	ldw	r4,-20(fp)
  b60384:	0b5ce100 	call	b5ce10 <alt_release_fd>
  }
} 
  b60388:	e037883a 	mov	sp,fp
  b6038c:	dfc00117 	ldw	ra,4(sp)
  b60390:	df000017 	ldw	fp,0(sp)
  b60394:	dec00204 	addi	sp,sp,8
  b60398:	f800283a 	ret

00b6039c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  b6039c:	defffb04 	addi	sp,sp,-20
  b603a0:	dfc00415 	stw	ra,16(sp)
  b603a4:	df000315 	stw	fp,12(sp)
  b603a8:	df000304 	addi	fp,sp,12
  b603ac:	e13ffd15 	stw	r4,-12(fp)
  b603b0:	e17ffe15 	stw	r5,-8(fp)
  b603b4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  b603b8:	01002db4 	movhi	r4,182
  b603bc:	21072b04 	addi	r4,r4,7340
  b603c0:	e17ffd17 	ldw	r5,-12(fp)
  b603c4:	01800044 	movi	r6,1
  b603c8:	01c07fc4 	movi	r7,511
  b603cc:	0b602d80 	call	b602d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  b603d0:	01002db4 	movhi	r4,182
  b603d4:	21072804 	addi	r4,r4,7328
  b603d8:	e17ffe17 	ldw	r5,-8(fp)
  b603dc:	000d883a 	mov	r6,zero
  b603e0:	01c07fc4 	movi	r7,511
  b603e4:	0b602d80 	call	b602d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  b603e8:	01002db4 	movhi	r4,182
  b603ec:	21072e04 	addi	r4,r4,7352
  b603f0:	e17fff17 	ldw	r5,-4(fp)
  b603f4:	01800044 	movi	r6,1
  b603f8:	01c07fc4 	movi	r7,511
  b603fc:	0b602d80 	call	b602d8 <alt_open_fd>
}  
  b60400:	e037883a 	mov	sp,fp
  b60404:	dfc00117 	ldw	ra,4(sp)
  b60408:	df000017 	ldw	fp,0(sp)
  b6040c:	dec00204 	addi	sp,sp,8
  b60410:	f800283a 	ret

00b60414 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  b60414:	defffc04 	addi	sp,sp,-16
  b60418:	df000315 	stw	fp,12(sp)
  b6041c:	df000304 	addi	fp,sp,12
  b60420:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  b60424:	e0bffe17 	ldw	r2,-8(fp)
  b60428:	10800217 	ldw	r2,8(r2)
  b6042c:	10d00034 	orhi	r3,r2,16384
  b60430:	e0bffe17 	ldw	r2,-8(fp)
  b60434:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  b60438:	e03ffd15 	stw	zero,-12(fp)
  b6043c:	00002006 	br	b604c0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  b60440:	e0bffd17 	ldw	r2,-12(fp)
  b60444:	00c02db4 	movhi	r3,182
  b60448:	18c72804 	addi	r3,r3,7328
  b6044c:	10800324 	muli	r2,r2,12
  b60450:	10c5883a 	add	r2,r2,r3
  b60454:	10c00017 	ldw	r3,0(r2)
  b60458:	e0bffe17 	ldw	r2,-8(fp)
  b6045c:	10800017 	ldw	r2,0(r2)
  b60460:	1880141e 	bne	r3,r2,b604b4 <alt_file_locked+0xa0>
  b60464:	e0bffd17 	ldw	r2,-12(fp)
  b60468:	00c02db4 	movhi	r3,182
  b6046c:	18c72804 	addi	r3,r3,7328
  b60470:	10800324 	muli	r2,r2,12
  b60474:	10c5883a 	add	r2,r2,r3
  b60478:	10800204 	addi	r2,r2,8
  b6047c:	10800017 	ldw	r2,0(r2)
  b60480:	1004403a 	cmpge	r2,r2,zero
  b60484:	10000b1e 	bne	r2,zero,b604b4 <alt_file_locked+0xa0>
  b60488:	e0bffd17 	ldw	r2,-12(fp)
  b6048c:	10800324 	muli	r2,r2,12
  b60490:	1007883a 	mov	r3,r2
  b60494:	00802db4 	movhi	r2,182
  b60498:	10872804 	addi	r2,r2,7328
  b6049c:	1887883a 	add	r3,r3,r2
  b604a0:	e0bffe17 	ldw	r2,-8(fp)
  b604a4:	18800326 	beq	r3,r2,b604b4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  b604a8:	00bffcc4 	movi	r2,-13
  b604ac:	e0bfff15 	stw	r2,-4(fp)
  b604b0:	00000a06 	br	b604dc <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  b604b4:	e0bffd17 	ldw	r2,-12(fp)
  b604b8:	10800044 	addi	r2,r2,1
  b604bc:	e0bffd15 	stw	r2,-12(fp)
  b604c0:	00802db4 	movhi	r2,182
  b604c4:	108c0304 	addi	r2,r2,12300
  b604c8:	10800017 	ldw	r2,0(r2)
  b604cc:	1007883a 	mov	r3,r2
  b604d0:	e0bffd17 	ldw	r2,-12(fp)
  b604d4:	18bfda2e 	bgeu	r3,r2,b60440 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  b604d8:	e03fff15 	stw	zero,-4(fp)
  b604dc:	e0bfff17 	ldw	r2,-4(fp)
}
  b604e0:	e037883a 	mov	sp,fp
  b604e4:	df000017 	ldw	fp,0(sp)
  b604e8:	dec00104 	addi	sp,sp,4
  b604ec:	f800283a 	ret

00b604f0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  b604f0:	defff404 	addi	sp,sp,-48
  b604f4:	dfc00b15 	stw	ra,44(sp)
  b604f8:	df000a15 	stw	fp,40(sp)
  b604fc:	df000a04 	addi	fp,sp,40
  b60500:	e13ffb15 	stw	r4,-20(fp)
  b60504:	e17ffc15 	stw	r5,-16(fp)
  b60508:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  b6050c:	00bfffc4 	movi	r2,-1
  b60510:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  b60514:	00bffb44 	movi	r2,-19
  b60518:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  b6051c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  b60520:	e13ffb17 	ldw	r4,-20(fp)
  b60524:	01402db4 	movhi	r5,182
  b60528:	294c0104 	addi	r5,r5,12292
  b6052c:	0b5ff480 	call	b5ff48 <alt_find_dev>
  b60530:	e0bffa15 	stw	r2,-24(fp)
  b60534:	e0bffa17 	ldw	r2,-24(fp)
  b60538:	1004c03a 	cmpne	r2,r2,zero
  b6053c:	1000051e 	bne	r2,zero,b60554 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  b60540:	e13ffb17 	ldw	r4,-20(fp)
  b60544:	0b6089c0 	call	b6089c <alt_find_file>
  b60548:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  b6054c:	00800044 	movi	r2,1
  b60550:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  b60554:	e0bffa17 	ldw	r2,-24(fp)
  b60558:	1005003a 	cmpeq	r2,r2,zero
  b6055c:	1000301e 	bne	r2,zero,b60620 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  b60560:	e13ffa17 	ldw	r4,-24(fp)
  b60564:	0b609bc0 	call	b609bc <alt_get_fd>
  b60568:	e0bff815 	stw	r2,-32(fp)
  b6056c:	e0bff817 	ldw	r2,-32(fp)
  b60570:	1004403a 	cmpge	r2,r2,zero
  b60574:	1000031e 	bne	r2,zero,b60584 <open+0x94>
    {
      status = index;
  b60578:	e0bff817 	ldw	r2,-32(fp)
  b6057c:	e0bff715 	stw	r2,-36(fp)
  b60580:	00002906 	br	b60628 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  b60584:	e0bff817 	ldw	r2,-32(fp)
  b60588:	10800324 	muli	r2,r2,12
  b6058c:	1007883a 	mov	r3,r2
  b60590:	00802db4 	movhi	r2,182
  b60594:	10872804 	addi	r2,r2,7328
  b60598:	1885883a 	add	r2,r3,r2
  b6059c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  b605a0:	e0fffc17 	ldw	r3,-16(fp)
  b605a4:	00900034 	movhi	r2,16384
  b605a8:	10bfffc4 	addi	r2,r2,-1
  b605ac:	1886703a 	and	r3,r3,r2
  b605b0:	e0bff917 	ldw	r2,-28(fp)
  b605b4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  b605b8:	e0bff617 	ldw	r2,-40(fp)
  b605bc:	1004c03a 	cmpne	r2,r2,zero
  b605c0:	1000061e 	bne	r2,zero,b605dc <open+0xec>
  b605c4:	e13ff917 	ldw	r4,-28(fp)
  b605c8:	0b604140 	call	b60414 <alt_file_locked>
  b605cc:	e0bff715 	stw	r2,-36(fp)
  b605d0:	e0bff717 	ldw	r2,-36(fp)
  b605d4:	1004803a 	cmplt	r2,r2,zero
  b605d8:	1000131e 	bne	r2,zero,b60628 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  b605dc:	e0bffa17 	ldw	r2,-24(fp)
  b605e0:	10800317 	ldw	r2,12(r2)
  b605e4:	1005003a 	cmpeq	r2,r2,zero
  b605e8:	1000091e 	bne	r2,zero,b60610 <open+0x120>
  b605ec:	e0bffa17 	ldw	r2,-24(fp)
  b605f0:	10800317 	ldw	r2,12(r2)
  b605f4:	e13ff917 	ldw	r4,-28(fp)
  b605f8:	e17ffb17 	ldw	r5,-20(fp)
  b605fc:	e1bffc17 	ldw	r6,-16(fp)
  b60600:	e1fffd17 	ldw	r7,-12(fp)
  b60604:	103ee83a 	callr	r2
  b60608:	e0bfff15 	stw	r2,-4(fp)
  b6060c:	00000106 	br	b60614 <open+0x124>
  b60610:	e03fff15 	stw	zero,-4(fp)
  b60614:	e0bfff17 	ldw	r2,-4(fp)
  b60618:	e0bff715 	stw	r2,-36(fp)
  b6061c:	00000206 	br	b60628 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  b60620:	00bffb44 	movi	r2,-19
  b60624:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  b60628:	e0bff717 	ldw	r2,-36(fp)
  b6062c:	1004403a 	cmpge	r2,r2,zero
  b60630:	1000091e 	bne	r2,zero,b60658 <open+0x168>
  {
    alt_release_fd (index);  
  b60634:	e13ff817 	ldw	r4,-32(fp)
  b60638:	0b5ce100 	call	b5ce10 <alt_release_fd>
    ALT_ERRNO = -status;
  b6063c:	0b606780 	call	b60678 <alt_get_errno>
  b60640:	e0fff717 	ldw	r3,-36(fp)
  b60644:	00c7c83a 	sub	r3,zero,r3
  b60648:	10c00015 	stw	r3,0(r2)
    return -1;
  b6064c:	00bfffc4 	movi	r2,-1
  b60650:	e0bffe15 	stw	r2,-8(fp)
  b60654:	00000206 	br	b60660 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  b60658:	e0bff817 	ldw	r2,-32(fp)
  b6065c:	e0bffe15 	stw	r2,-8(fp)
  b60660:	e0bffe17 	ldw	r2,-8(fp)
}
  b60664:	e037883a 	mov	sp,fp
  b60668:	dfc00117 	ldw	ra,4(sp)
  b6066c:	df000017 	ldw	fp,0(sp)
  b60670:	dec00204 	addi	sp,sp,8
  b60674:	f800283a 	ret

00b60678 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  b60678:	defffd04 	addi	sp,sp,-12
  b6067c:	dfc00215 	stw	ra,8(sp)
  b60680:	df000115 	stw	fp,4(sp)
  b60684:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  b60688:	00802db4 	movhi	r2,182
  b6068c:	108c0404 	addi	r2,r2,12304
  b60690:	10800017 	ldw	r2,0(r2)
  b60694:	1005003a 	cmpeq	r2,r2,zero
  b60698:	1000061e 	bne	r2,zero,b606b4 <alt_get_errno+0x3c>
  b6069c:	00802db4 	movhi	r2,182
  b606a0:	108c0404 	addi	r2,r2,12304
  b606a4:	10800017 	ldw	r2,0(r2)
  b606a8:	103ee83a 	callr	r2
  b606ac:	e0bfff15 	stw	r2,-4(fp)
  b606b0:	00000306 	br	b606c0 <alt_get_errno+0x48>
  b606b4:	00802db4 	movhi	r2,182
  b606b8:	10930a04 	addi	r2,r2,19496
  b606bc:	e0bfff15 	stw	r2,-4(fp)
  b606c0:	e0bfff17 	ldw	r2,-4(fp)
}
  b606c4:	e037883a 	mov	sp,fp
  b606c8:	dfc00117 	ldw	ra,4(sp)
  b606cc:	df000017 	ldw	fp,0(sp)
  b606d0:	dec00204 	addi	sp,sp,8
  b606d4:	f800283a 	ret

00b606d8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  b606d8:	defffa04 	addi	sp,sp,-24
  b606dc:	df000515 	stw	fp,20(sp)
  b606e0:	df000504 	addi	fp,sp,20
  b606e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  b606e8:	0005303a 	rdctl	r2,status
  b606ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  b606f0:	e0fffd17 	ldw	r3,-12(fp)
  b606f4:	00bfff84 	movi	r2,-2
  b606f8:	1884703a 	and	r2,r3,r2
  b606fc:	1001703a 	wrctl	status,r2
  
  return context;
  b60700:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  b60704:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  b60708:	e0bfff17 	ldw	r2,-4(fp)
  b6070c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  b60710:	e0bffc17 	ldw	r2,-16(fp)
  b60714:	10c00017 	ldw	r3,0(r2)
  b60718:	e0bffc17 	ldw	r2,-16(fp)
  b6071c:	10800117 	ldw	r2,4(r2)
  b60720:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  b60724:	e0bffc17 	ldw	r2,-16(fp)
  b60728:	10c00117 	ldw	r3,4(r2)
  b6072c:	e0bffc17 	ldw	r2,-16(fp)
  b60730:	10800017 	ldw	r2,0(r2)
  b60734:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  b60738:	e0fffc17 	ldw	r3,-16(fp)
  b6073c:	e0bffc17 	ldw	r2,-16(fp)
  b60740:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  b60744:	e0fffc17 	ldw	r3,-16(fp)
  b60748:	e0bffc17 	ldw	r2,-16(fp)
  b6074c:	18800015 	stw	r2,0(r3)
  b60750:	e0bffe17 	ldw	r2,-8(fp)
  b60754:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  b60758:	e0bffb17 	ldw	r2,-20(fp)
  b6075c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  b60760:	e037883a 	mov	sp,fp
  b60764:	df000017 	ldw	fp,0(sp)
  b60768:	dec00104 	addi	sp,sp,4
  b6076c:	f800283a 	ret

00b60770 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  b60770:	defffb04 	addi	sp,sp,-20
  b60774:	dfc00415 	stw	ra,16(sp)
  b60778:	df000315 	stw	fp,12(sp)
  b6077c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  b60780:	d0a01a17 	ldw	r2,-32664(gp)
  b60784:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  b60788:	d0a71f17 	ldw	r2,-25476(gp)
  b6078c:	10800044 	addi	r2,r2,1
  b60790:	d0a71f15 	stw	r2,-25476(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  b60794:	00003106 	br	b6085c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  b60798:	e0bffe17 	ldw	r2,-8(fp)
  b6079c:	10800017 	ldw	r2,0(r2)
  b607a0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  b607a4:	e0bffe17 	ldw	r2,-8(fp)
  b607a8:	10800403 	ldbu	r2,16(r2)
  b607ac:	10803fcc 	andi	r2,r2,255
  b607b0:	1005003a 	cmpeq	r2,r2,zero
  b607b4:	1000051e 	bne	r2,zero,b607cc <alt_tick+0x5c>
  b607b8:	d0a71f17 	ldw	r2,-25476(gp)
  b607bc:	1004c03a 	cmpne	r2,r2,zero
  b607c0:	1000021e 	bne	r2,zero,b607cc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  b607c4:	e0bffe17 	ldw	r2,-8(fp)
  b607c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  b607cc:	e0bffe17 	ldw	r2,-8(fp)
  b607d0:	10c00217 	ldw	r3,8(r2)
  b607d4:	d0a71f17 	ldw	r2,-25476(gp)
  b607d8:	10c01e36 	bltu	r2,r3,b60854 <alt_tick+0xe4>
  b607dc:	e0bffe17 	ldw	r2,-8(fp)
  b607e0:	10800403 	ldbu	r2,16(r2)
  b607e4:	10803fcc 	andi	r2,r2,255
  b607e8:	1004c03a 	cmpne	r2,r2,zero
  b607ec:	1000191e 	bne	r2,zero,b60854 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  b607f0:	e0bffe17 	ldw	r2,-8(fp)
  b607f4:	10c00317 	ldw	r3,12(r2)
  b607f8:	e0bffe17 	ldw	r2,-8(fp)
  b607fc:	11000517 	ldw	r4,20(r2)
  b60800:	183ee83a 	callr	r3
  b60804:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  b60808:	e0bffd17 	ldw	r2,-12(fp)
  b6080c:	1004c03a 	cmpne	r2,r2,zero
  b60810:	1000031e 	bne	r2,zero,b60820 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  b60814:	e13ffe17 	ldw	r4,-8(fp)
  b60818:	0b606d80 	call	b606d8 <alt_alarm_stop>
  b6081c:	00000d06 	br	b60854 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  b60820:	e0bffe17 	ldw	r2,-8(fp)
  b60824:	10c00217 	ldw	r3,8(r2)
  b60828:	e0bffd17 	ldw	r2,-12(fp)
  b6082c:	1887883a 	add	r3,r3,r2
  b60830:	e0bffe17 	ldw	r2,-8(fp)
  b60834:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  b60838:	e0bffe17 	ldw	r2,-8(fp)
  b6083c:	10c00217 	ldw	r3,8(r2)
  b60840:	d0a71f17 	ldw	r2,-25476(gp)
  b60844:	1880032e 	bgeu	r3,r2,b60854 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  b60848:	e0fffe17 	ldw	r3,-8(fp)
  b6084c:	00800044 	movi	r2,1
  b60850:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  b60854:	e0bfff17 	ldw	r2,-4(fp)
  b60858:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  b6085c:	d0e01a04 	addi	r3,gp,-32664
  b60860:	e0bffe17 	ldw	r2,-8(fp)
  b60864:	10ffcc1e 	bne	r2,r3,b60798 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  b60868:	e037883a 	mov	sp,fp
  b6086c:	dfc00117 	ldw	ra,4(sp)
  b60870:	df000017 	ldw	fp,0(sp)
  b60874:	dec00204 	addi	sp,sp,8
  b60878:	f800283a 	ret

00b6087c <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  b6087c:	deffff04 	addi	sp,sp,-4
  b60880:	df000015 	stw	fp,0(sp)
  b60884:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  b60888:	000170fa 	wrctl	ienable,zero
}
  b6088c:	e037883a 	mov	sp,fp
  b60890:	df000017 	ldw	fp,0(sp)
  b60894:	dec00104 	addi	sp,sp,4
  b60898:	f800283a 	ret

00b6089c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  b6089c:	defffa04 	addi	sp,sp,-24
  b608a0:	dfc00515 	stw	ra,20(sp)
  b608a4:	df000415 	stw	fp,16(sp)
  b608a8:	df000404 	addi	fp,sp,16
  b608ac:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  b608b0:	00802db4 	movhi	r2,182
  b608b4:	108bff04 	addi	r2,r2,12284
  b608b8:	10800017 	ldw	r2,0(r2)
  b608bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  b608c0:	00003306 	br	b60990 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  b608c4:	e0bffd17 	ldw	r2,-12(fp)
  b608c8:	11000217 	ldw	r4,8(r2)
  b608cc:	0b53dc40 	call	b53dc4 <strlen>
  b608d0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  b608d4:	e0bffd17 	ldw	r2,-12(fp)
  b608d8:	10c00217 	ldw	r3,8(r2)
  b608dc:	e0bffc17 	ldw	r2,-16(fp)
  b608e0:	1885883a 	add	r2,r3,r2
  b608e4:	10bfffc4 	addi	r2,r2,-1
  b608e8:	10800003 	ldbu	r2,0(r2)
  b608ec:	10803fcc 	andi	r2,r2,255
  b608f0:	1080201c 	xori	r2,r2,128
  b608f4:	10bfe004 	addi	r2,r2,-128
  b608f8:	10800bd8 	cmpnei	r2,r2,47
  b608fc:	1000031e 	bne	r2,zero,b6090c <alt_find_file+0x70>
    {
      len -= 1;
  b60900:	e0bffc17 	ldw	r2,-16(fp)
  b60904:	10bfffc4 	addi	r2,r2,-1
  b60908:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  b6090c:	e0bffc17 	ldw	r2,-16(fp)
  b60910:	1007883a 	mov	r3,r2
  b60914:	e0bffe17 	ldw	r2,-8(fp)
  b60918:	1885883a 	add	r2,r3,r2
  b6091c:	10800003 	ldbu	r2,0(r2)
  b60920:	10803fcc 	andi	r2,r2,255
  b60924:	1080201c 	xori	r2,r2,128
  b60928:	10bfe004 	addi	r2,r2,-128
  b6092c:	10800be0 	cmpeqi	r2,r2,47
  b60930:	10000a1e 	bne	r2,zero,b6095c <alt_find_file+0xc0>
  b60934:	e0bffc17 	ldw	r2,-16(fp)
  b60938:	1007883a 	mov	r3,r2
  b6093c:	e0bffe17 	ldw	r2,-8(fp)
  b60940:	1885883a 	add	r2,r3,r2
  b60944:	10800003 	ldbu	r2,0(r2)
  b60948:	10803fcc 	andi	r2,r2,255
  b6094c:	1080201c 	xori	r2,r2,128
  b60950:	10bfe004 	addi	r2,r2,-128
  b60954:	1004c03a 	cmpne	r2,r2,zero
  b60958:	10000a1e 	bne	r2,zero,b60984 <alt_find_file+0xe8>
  b6095c:	e0bffd17 	ldw	r2,-12(fp)
  b60960:	11000217 	ldw	r4,8(r2)
  b60964:	e1bffc17 	ldw	r6,-16(fp)
  b60968:	e17ffe17 	ldw	r5,-8(fp)
  b6096c:	0b60b500 	call	b60b50 <memcmp>
  b60970:	1004c03a 	cmpne	r2,r2,zero
  b60974:	1000031e 	bne	r2,zero,b60984 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  b60978:	e0bffd17 	ldw	r2,-12(fp)
  b6097c:	e0bfff15 	stw	r2,-4(fp)
  b60980:	00000806 	br	b609a4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  b60984:	e0bffd17 	ldw	r2,-12(fp)
  b60988:	10800017 	ldw	r2,0(r2)
  b6098c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  b60990:	00c02db4 	movhi	r3,182
  b60994:	18cbff04 	addi	r3,r3,12284
  b60998:	e0bffd17 	ldw	r2,-12(fp)
  b6099c:	10ffc91e 	bne	r2,r3,b608c4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  b609a0:	e03fff15 	stw	zero,-4(fp)
  b609a4:	e0bfff17 	ldw	r2,-4(fp)
}
  b609a8:	e037883a 	mov	sp,fp
  b609ac:	dfc00117 	ldw	ra,4(sp)
  b609b0:	df000017 	ldw	fp,0(sp)
  b609b4:	dec00204 	addi	sp,sp,8
  b609b8:	f800283a 	ret

00b609bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  b609bc:	defffc04 	addi	sp,sp,-16
  b609c0:	df000315 	stw	fp,12(sp)
  b609c4:	df000304 	addi	fp,sp,12
  b609c8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  b609cc:	00bffa04 	movi	r2,-24
  b609d0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  b609d4:	e03ffe15 	stw	zero,-8(fp)
  b609d8:	00001e06 	br	b60a54 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  b609dc:	e0bffe17 	ldw	r2,-8(fp)
  b609e0:	00c02db4 	movhi	r3,182
  b609e4:	18c72804 	addi	r3,r3,7328
  b609e8:	10800324 	muli	r2,r2,12
  b609ec:	10c5883a 	add	r2,r2,r3
  b609f0:	10800017 	ldw	r2,0(r2)
  b609f4:	1004c03a 	cmpne	r2,r2,zero
  b609f8:	1000131e 	bne	r2,zero,b60a48 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  b609fc:	e0bffe17 	ldw	r2,-8(fp)
  b60a00:	00c02db4 	movhi	r3,182
  b60a04:	18c72804 	addi	r3,r3,7328
  b60a08:	10800324 	muli	r2,r2,12
  b60a0c:	10c7883a 	add	r3,r2,r3
  b60a10:	e0bfff17 	ldw	r2,-4(fp)
  b60a14:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  b60a18:	00802db4 	movhi	r2,182
  b60a1c:	108c0304 	addi	r2,r2,12300
  b60a20:	10c00017 	ldw	r3,0(r2)
  b60a24:	e0bffe17 	ldw	r2,-8(fp)
  b60a28:	1880040e 	bge	r3,r2,b60a3c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  b60a2c:	00c02db4 	movhi	r3,182
  b60a30:	18cc0304 	addi	r3,r3,12300
  b60a34:	e0bffe17 	ldw	r2,-8(fp)
  b60a38:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  b60a3c:	e0bffe17 	ldw	r2,-8(fp)
  b60a40:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  b60a44:	00000606 	br	b60a60 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  b60a48:	e0bffe17 	ldw	r2,-8(fp)
  b60a4c:	10800044 	addi	r2,r2,1
  b60a50:	e0bffe15 	stw	r2,-8(fp)
  b60a54:	e0bffe17 	ldw	r2,-8(fp)
  b60a58:	10800810 	cmplti	r2,r2,32
  b60a5c:	103fdf1e 	bne	r2,zero,b609dc <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  b60a60:	e0bffd17 	ldw	r2,-12(fp)
}
  b60a64:	e037883a 	mov	sp,fp
  b60a68:	df000017 	ldw	fp,0(sp)
  b60a6c:	dec00104 	addi	sp,sp,4
  b60a70:	f800283a 	ret

00b60a74 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  b60a74:	defffb04 	addi	sp,sp,-20
  b60a78:	df000415 	stw	fp,16(sp)
  b60a7c:	df000404 	addi	fp,sp,16
  b60a80:	e13ffe15 	stw	r4,-8(fp)
  b60a84:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  b60a88:	e0bfff17 	ldw	r2,-4(fp)
  b60a8c:	10840070 	cmpltui	r2,r2,4097
  b60a90:	1000021e 	bne	r2,zero,b60a9c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  b60a94:	00840004 	movi	r2,4096
  b60a98:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  b60a9c:	e0fffe17 	ldw	r3,-8(fp)
  b60aa0:	e0bfff17 	ldw	r2,-4(fp)
  b60aa4:	1885883a 	add	r2,r3,r2
  b60aa8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  b60aac:	e0bffe17 	ldw	r2,-8(fp)
  b60ab0:	e0bffd15 	stw	r2,-12(fp)
  b60ab4:	00000506 	br	b60acc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  b60ab8:	e0bffd17 	ldw	r2,-12(fp)
  b60abc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  b60ac0:	e0bffd17 	ldw	r2,-12(fp)
  b60ac4:	10800804 	addi	r2,r2,32
  b60ac8:	e0bffd15 	stw	r2,-12(fp)
  b60acc:	e0fffd17 	ldw	r3,-12(fp)
  b60ad0:	e0bffc17 	ldw	r2,-16(fp)
  b60ad4:	18bff836 	bltu	r3,r2,b60ab8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  b60ad8:	e0bffe17 	ldw	r2,-8(fp)
  b60adc:	108007cc 	andi	r2,r2,31
  b60ae0:	1005003a 	cmpeq	r2,r2,zero
  b60ae4:	1000021e 	bne	r2,zero,b60af0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  b60ae8:	e0bffd17 	ldw	r2,-12(fp)
  b60aec:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  b60af0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  b60af4:	e037883a 	mov	sp,fp
  b60af8:	df000017 	ldw	fp,0(sp)
  b60afc:	dec00104 	addi	sp,sp,4
  b60b00:	f800283a 	ret

00b60b04 <atexit>:
  b60b04:	200b883a 	mov	r5,r4
  b60b08:	000d883a 	mov	r6,zero
  b60b0c:	0009883a 	mov	r4,zero
  b60b10:	000f883a 	mov	r7,zero
  b60b14:	0b60bc41 	jmpi	b60bc4 <__register_exitproc>

00b60b18 <exit>:
  b60b18:	defffe04 	addi	sp,sp,-8
  b60b1c:	000b883a 	mov	r5,zero
  b60b20:	dc000015 	stw	r16,0(sp)
  b60b24:	dfc00115 	stw	ra,4(sp)
  b60b28:	2021883a 	mov	r16,r4
  b60b2c:	0b60cfc0 	call	b60cfc <__call_exitprocs>
  b60b30:	00802db4 	movhi	r2,182
  b60b34:	108bfa04 	addi	r2,r2,12264
  b60b38:	11000017 	ldw	r4,0(r2)
  b60b3c:	20800f17 	ldw	r2,60(r4)
  b60b40:	10000126 	beq	r2,zero,b60b48 <exit+0x30>
  b60b44:	103ee83a 	callr	r2
  b60b48:	8009883a 	mov	r4,r16
  b60b4c:	0b60eec0 	call	b60eec <_exit>

00b60b50 <memcmp>:
  b60b50:	00c000c4 	movi	r3,3
  b60b54:	1980032e 	bgeu	r3,r6,b60b64 <memcmp+0x14>
  b60b58:	2144b03a 	or	r2,r4,r5
  b60b5c:	10c4703a 	and	r2,r2,r3
  b60b60:	10000f26 	beq	r2,zero,b60ba0 <memcmp+0x50>
  b60b64:	31ffffc4 	addi	r7,r6,-1
  b60b68:	3000061e 	bne	r6,zero,b60b84 <memcmp+0x34>
  b60b6c:	00000a06 	br	b60b98 <memcmp+0x48>
  b60b70:	39ffffc4 	addi	r7,r7,-1
  b60b74:	00bfffc4 	movi	r2,-1
  b60b78:	21000044 	addi	r4,r4,1
  b60b7c:	29400044 	addi	r5,r5,1
  b60b80:	38800526 	beq	r7,r2,b60b98 <memcmp+0x48>
  b60b84:	20c00003 	ldbu	r3,0(r4)
  b60b88:	28800003 	ldbu	r2,0(r5)
  b60b8c:	18bff826 	beq	r3,r2,b60b70 <memcmp+0x20>
  b60b90:	1885c83a 	sub	r2,r3,r2
  b60b94:	f800283a 	ret
  b60b98:	0005883a 	mov	r2,zero
  b60b9c:	f800283a 	ret
  b60ba0:	180f883a 	mov	r7,r3
  b60ba4:	20c00017 	ldw	r3,0(r4)
  b60ba8:	28800017 	ldw	r2,0(r5)
  b60bac:	18bfed1e 	bne	r3,r2,b60b64 <memcmp+0x14>
  b60bb0:	31bfff04 	addi	r6,r6,-4
  b60bb4:	21000104 	addi	r4,r4,4
  b60bb8:	29400104 	addi	r5,r5,4
  b60bbc:	39bff936 	bltu	r7,r6,b60ba4 <memcmp+0x54>
  b60bc0:	003fe806 	br	b60b64 <memcmp+0x14>

00b60bc4 <__register_exitproc>:
  b60bc4:	defffa04 	addi	sp,sp,-24
  b60bc8:	00802db4 	movhi	r2,182
  b60bcc:	108bfa04 	addi	r2,r2,12264
  b60bd0:	dc000015 	stw	r16,0(sp)
  b60bd4:	14000017 	ldw	r16,0(r2)
  b60bd8:	dd000415 	stw	r20,16(sp)
  b60bdc:	2829883a 	mov	r20,r5
  b60be0:	81405217 	ldw	r5,328(r16)
  b60be4:	dcc00315 	stw	r19,12(sp)
  b60be8:	dc800215 	stw	r18,8(sp)
  b60bec:	dc400115 	stw	r17,4(sp)
  b60bf0:	dfc00515 	stw	ra,20(sp)
  b60bf4:	2023883a 	mov	r17,r4
  b60bf8:	3027883a 	mov	r19,r6
  b60bfc:	3825883a 	mov	r18,r7
  b60c00:	28002526 	beq	r5,zero,b60c98 <__register_exitproc+0xd4>
  b60c04:	29000117 	ldw	r4,4(r5)
  b60c08:	008007c4 	movi	r2,31
  b60c0c:	11002716 	blt	r2,r4,b60cac <__register_exitproc+0xe8>
  b60c10:	8800101e 	bne	r17,zero,b60c54 <__register_exitproc+0x90>
  b60c14:	2105883a 	add	r2,r4,r4
  b60c18:	1085883a 	add	r2,r2,r2
  b60c1c:	20c00044 	addi	r3,r4,1
  b60c20:	1145883a 	add	r2,r2,r5
  b60c24:	0009883a 	mov	r4,zero
  b60c28:	15000215 	stw	r20,8(r2)
  b60c2c:	28c00115 	stw	r3,4(r5)
  b60c30:	2005883a 	mov	r2,r4
  b60c34:	dfc00517 	ldw	ra,20(sp)
  b60c38:	dd000417 	ldw	r20,16(sp)
  b60c3c:	dcc00317 	ldw	r19,12(sp)
  b60c40:	dc800217 	ldw	r18,8(sp)
  b60c44:	dc400117 	ldw	r17,4(sp)
  b60c48:	dc000017 	ldw	r16,0(sp)
  b60c4c:	dec00604 	addi	sp,sp,24
  b60c50:	f800283a 	ret
  b60c54:	29802204 	addi	r6,r5,136
  b60c58:	00800044 	movi	r2,1
  b60c5c:	110e983a 	sll	r7,r2,r4
  b60c60:	30c04017 	ldw	r3,256(r6)
  b60c64:	2105883a 	add	r2,r4,r4
  b60c68:	1085883a 	add	r2,r2,r2
  b60c6c:	1185883a 	add	r2,r2,r6
  b60c70:	19c6b03a 	or	r3,r3,r7
  b60c74:	14802015 	stw	r18,128(r2)
  b60c78:	14c00015 	stw	r19,0(r2)
  b60c7c:	00800084 	movi	r2,2
  b60c80:	30c04015 	stw	r3,256(r6)
  b60c84:	88bfe31e 	bne	r17,r2,b60c14 <__register_exitproc+0x50>
  b60c88:	30804117 	ldw	r2,260(r6)
  b60c8c:	11c4b03a 	or	r2,r2,r7
  b60c90:	30804115 	stw	r2,260(r6)
  b60c94:	003fdf06 	br	b60c14 <__register_exitproc+0x50>
  b60c98:	00802db4 	movhi	r2,182
  b60c9c:	10935b04 	addi	r2,r2,19820
  b60ca0:	100b883a 	mov	r5,r2
  b60ca4:	80805215 	stw	r2,328(r16)
  b60ca8:	003fd606 	br	b60c04 <__register_exitproc+0x40>
  b60cac:	00800034 	movhi	r2,0
  b60cb0:	10800004 	addi	r2,r2,0
  b60cb4:	1000021e 	bne	r2,zero,b60cc0 <__register_exitproc+0xfc>
  b60cb8:	013fffc4 	movi	r4,-1
  b60cbc:	003fdc06 	br	b60c30 <__register_exitproc+0x6c>
  b60cc0:	01006404 	movi	r4,400
  b60cc4:	103ee83a 	callr	r2
  b60cc8:	1007883a 	mov	r3,r2
  b60ccc:	103ffa26 	beq	r2,zero,b60cb8 <__register_exitproc+0xf4>
  b60cd0:	80805217 	ldw	r2,328(r16)
  b60cd4:	180b883a 	mov	r5,r3
  b60cd8:	18000115 	stw	zero,4(r3)
  b60cdc:	18800015 	stw	r2,0(r3)
  b60ce0:	80c05215 	stw	r3,328(r16)
  b60ce4:	18006215 	stw	zero,392(r3)
  b60ce8:	18006315 	stw	zero,396(r3)
  b60cec:	0009883a 	mov	r4,zero
  b60cf0:	883fc826 	beq	r17,zero,b60c14 <__register_exitproc+0x50>
  b60cf4:	003fd706 	br	b60c54 <__register_exitproc+0x90>

00b60cf8 <register_fini>:
  b60cf8:	f800283a 	ret

00b60cfc <__call_exitprocs>:
  b60cfc:	00802db4 	movhi	r2,182
  b60d00:	108bfa04 	addi	r2,r2,12264
  b60d04:	10800017 	ldw	r2,0(r2)
  b60d08:	defff304 	addi	sp,sp,-52
  b60d0c:	df000b15 	stw	fp,44(sp)
  b60d10:	d8800115 	stw	r2,4(sp)
  b60d14:	00800034 	movhi	r2,0
  b60d18:	10800004 	addi	r2,r2,0
  b60d1c:	1005003a 	cmpeq	r2,r2,zero
  b60d20:	d8800215 	stw	r2,8(sp)
  b60d24:	d8800117 	ldw	r2,4(sp)
  b60d28:	dd400815 	stw	r21,32(sp)
  b60d2c:	dd000715 	stw	r20,28(sp)
  b60d30:	10805204 	addi	r2,r2,328
  b60d34:	dfc00c15 	stw	ra,48(sp)
  b60d38:	ddc00a15 	stw	r23,40(sp)
  b60d3c:	dd800915 	stw	r22,36(sp)
  b60d40:	dcc00615 	stw	r19,24(sp)
  b60d44:	dc800515 	stw	r18,20(sp)
  b60d48:	dc400415 	stw	r17,16(sp)
  b60d4c:	dc000315 	stw	r16,12(sp)
  b60d50:	282b883a 	mov	r21,r5
  b60d54:	2039883a 	mov	fp,r4
  b60d58:	d8800015 	stw	r2,0(sp)
  b60d5c:	2829003a 	cmpeq	r20,r5,zero
  b60d60:	d8800117 	ldw	r2,4(sp)
  b60d64:	14405217 	ldw	r17,328(r2)
  b60d68:	88001026 	beq	r17,zero,b60dac <__call_exitprocs+0xb0>
  b60d6c:	ddc00017 	ldw	r23,0(sp)
  b60d70:	88800117 	ldw	r2,4(r17)
  b60d74:	8c802204 	addi	r18,r17,136
  b60d78:	143fffc4 	addi	r16,r2,-1
  b60d7c:	80000916 	blt	r16,zero,b60da4 <__call_exitprocs+0xa8>
  b60d80:	05bfffc4 	movi	r22,-1
  b60d84:	a000151e 	bne	r20,zero,b60ddc <__call_exitprocs+0xe0>
  b60d88:	8409883a 	add	r4,r16,r16
  b60d8c:	2105883a 	add	r2,r4,r4
  b60d90:	1485883a 	add	r2,r2,r18
  b60d94:	10c02017 	ldw	r3,128(r2)
  b60d98:	a8c01126 	beq	r21,r3,b60de0 <__call_exitprocs+0xe4>
  b60d9c:	843fffc4 	addi	r16,r16,-1
  b60da0:	85bff81e 	bne	r16,r22,b60d84 <__call_exitprocs+0x88>
  b60da4:	d8800217 	ldw	r2,8(sp)
  b60da8:	10003126 	beq	r2,zero,b60e70 <__call_exitprocs+0x174>
  b60dac:	dfc00c17 	ldw	ra,48(sp)
  b60db0:	df000b17 	ldw	fp,44(sp)
  b60db4:	ddc00a17 	ldw	r23,40(sp)
  b60db8:	dd800917 	ldw	r22,36(sp)
  b60dbc:	dd400817 	ldw	r21,32(sp)
  b60dc0:	dd000717 	ldw	r20,28(sp)
  b60dc4:	dcc00617 	ldw	r19,24(sp)
  b60dc8:	dc800517 	ldw	r18,20(sp)
  b60dcc:	dc400417 	ldw	r17,16(sp)
  b60dd0:	dc000317 	ldw	r16,12(sp)
  b60dd4:	dec00d04 	addi	sp,sp,52
  b60dd8:	f800283a 	ret
  b60ddc:	8409883a 	add	r4,r16,r16
  b60de0:	88c00117 	ldw	r3,4(r17)
  b60de4:	2105883a 	add	r2,r4,r4
  b60de8:	1445883a 	add	r2,r2,r17
  b60dec:	18ffffc4 	addi	r3,r3,-1
  b60df0:	11800217 	ldw	r6,8(r2)
  b60df4:	1c001526 	beq	r3,r16,b60e4c <__call_exitprocs+0x150>
  b60df8:	10000215 	stw	zero,8(r2)
  b60dfc:	303fe726 	beq	r6,zero,b60d9c <__call_exitprocs+0xa0>
  b60e00:	00c00044 	movi	r3,1
  b60e04:	1c06983a 	sll	r3,r3,r16
  b60e08:	90804017 	ldw	r2,256(r18)
  b60e0c:	8cc00117 	ldw	r19,4(r17)
  b60e10:	1884703a 	and	r2,r3,r2
  b60e14:	10001426 	beq	r2,zero,b60e68 <__call_exitprocs+0x16c>
  b60e18:	90804117 	ldw	r2,260(r18)
  b60e1c:	1884703a 	and	r2,r3,r2
  b60e20:	10000c1e 	bne	r2,zero,b60e54 <__call_exitprocs+0x158>
  b60e24:	2105883a 	add	r2,r4,r4
  b60e28:	1485883a 	add	r2,r2,r18
  b60e2c:	11400017 	ldw	r5,0(r2)
  b60e30:	e009883a 	mov	r4,fp
  b60e34:	303ee83a 	callr	r6
  b60e38:	88800117 	ldw	r2,4(r17)
  b60e3c:	98bfc81e 	bne	r19,r2,b60d60 <__call_exitprocs+0x64>
  b60e40:	b8800017 	ldw	r2,0(r23)
  b60e44:	147fd526 	beq	r2,r17,b60d9c <__call_exitprocs+0xa0>
  b60e48:	003fc506 	br	b60d60 <__call_exitprocs+0x64>
  b60e4c:	8c000115 	stw	r16,4(r17)
  b60e50:	003fea06 	br	b60dfc <__call_exitprocs+0x100>
  b60e54:	2105883a 	add	r2,r4,r4
  b60e58:	1485883a 	add	r2,r2,r18
  b60e5c:	11000017 	ldw	r4,0(r2)
  b60e60:	303ee83a 	callr	r6
  b60e64:	003ff406 	br	b60e38 <__call_exitprocs+0x13c>
  b60e68:	303ee83a 	callr	r6
  b60e6c:	003ff206 	br	b60e38 <__call_exitprocs+0x13c>
  b60e70:	88800117 	ldw	r2,4(r17)
  b60e74:	1000081e 	bne	r2,zero,b60e98 <__call_exitprocs+0x19c>
  b60e78:	89000017 	ldw	r4,0(r17)
  b60e7c:	20000726 	beq	r4,zero,b60e9c <__call_exitprocs+0x1a0>
  b60e80:	b9000015 	stw	r4,0(r23)
  b60e84:	8809883a 	mov	r4,r17
  b60e88:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  b60e8c:	bc400017 	ldw	r17,0(r23)
  b60e90:	883fb71e 	bne	r17,zero,b60d70 <__call_exitprocs+0x74>
  b60e94:	003fc506 	br	b60dac <__call_exitprocs+0xb0>
  b60e98:	89000017 	ldw	r4,0(r17)
  b60e9c:	882f883a 	mov	r23,r17
  b60ea0:	2023883a 	mov	r17,r4
  b60ea4:	883fb21e 	bne	r17,zero,b60d70 <__call_exitprocs+0x74>
  b60ea8:	003fc006 	br	b60dac <__call_exitprocs+0xb0>

00b60eac <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  b60eac:	defffd04 	addi	sp,sp,-12
  b60eb0:	df000215 	stw	fp,8(sp)
  b60eb4:	df000204 	addi	fp,sp,8
  b60eb8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  b60ebc:	e0bfff17 	ldw	r2,-4(fp)
  b60ec0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  b60ec4:	e0bffe17 	ldw	r2,-8(fp)
  b60ec8:	1005003a 	cmpeq	r2,r2,zero
  b60ecc:	1000021e 	bne	r2,zero,b60ed8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  b60ed0:	002af070 	cmpltui	zero,zero,43969
  b60ed4:	00000106 	br	b60edc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  b60ed8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  b60edc:	e037883a 	mov	sp,fp
  b60ee0:	df000017 	ldw	fp,0(sp)
  b60ee4:	dec00104 	addi	sp,sp,4
  b60ee8:	f800283a 	ret

00b60eec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  b60eec:	defffd04 	addi	sp,sp,-12
  b60ef0:	dfc00215 	stw	ra,8(sp)
  b60ef4:	df000115 	stw	fp,4(sp)
  b60ef8:	df000104 	addi	fp,sp,4
  b60efc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  b60f00:	e13fff17 	ldw	r4,-4(fp)
  b60f04:	0b60eac0 	call	b60eac <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  b60f08:	003fff06 	br	b60f08 <_exit+0x1c>
  b60f0c:	00000010 	cmplti	zero,zero,0
  b60f10:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  b60f14:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_3+0x4b7a0>
  b60f18:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_3+0x1187c0>
  b60f1c:	001b0c0b 	ldhu	zero,27696(zero)
  b60f20:	00000028 	cmpgeui	zero,zero,0
  b60f24:	00000018 	cmpnei	zero,zero,0
  b60f28:	00b5afac 	andhi	r2,zero,54974
  b60f2c:	000005dc 	xori	zero,zero,23
  b60f30:	400e4400 	call	400e440 <__alt_data_end+0x330e440>
  b60f34:	92099170 	cmpltui	r8,r18,9797
  b60f38:	95079308 	cmpgei	r20,r18,7756
  b60f3c:	97049605 	stb	fp,4696(r18)
  b60f40:	90019f03 	ldbu	zero,1660(r18)
  b60f44:	9c06940a 	0x9c06940a
  b60f48:	00000002 	0x2
  b60f4c:	00000028 	cmpgeui	zero,zero,0
  b60f50:	00000044 	movi	zero,1
  b60f54:	00b5b588 	cmpgei	r2,zero,-10538
  b60f58:	000005b0 	cmpltui	zero,zero,22
  b60f5c:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2f0e440>
  b60f60:	92099168 	cmpgeui	r8,r18,9797
  b60f64:	95079308 	cmpgei	r20,r18,7756
  b60f68:	9c039705 	stb	r16,3676(r19)
  b60f6c:	90019f02 	0x90019f02
  b60f70:	9606940a 	0x9606940a
  b60f74:	00000004 	movi	zero,0
  b60f78:	00b60cf8 	rdprs	r2,zero,-10189
