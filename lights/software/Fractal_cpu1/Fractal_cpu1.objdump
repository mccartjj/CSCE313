
Fractal_cpu1.elf:     file format elf32-littlenios2
Fractal_cpu1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00a001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00a00000 paddr 0x00a00000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00a00020 paddr 0x00a00020 align 2**12
         filesz 0x0001100c memsz 0x0001100c flags r-x
    LOAD off    0x0001202c vaddr 0x00a1102c paddr 0x00a12c00 align 2**12
         filesz 0x00001bd4 memsz 0x00001bd4 flags rw-
    LOAD off    0x000147d4 vaddr 0x00a147d4 paddr 0x00a147d4 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00a00000  00a00000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00a00020  00a00020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010970  00a001b4  00a001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000508  00a10b24  00a10b24  00011b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd4  00a1102c  00a12c00  0001202c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  00a147d4  00a147d4  000147d4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00013c00  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001078  00000000  00000000  00013c28  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001bcc  00000000  00000000  00014ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002a10d  00000000  00000000  0001686c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a041  00000000  00000000  00040979  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000199d3  00000000  00000000  0004a9ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000212c  00000000  00000000  00064390  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c08  00000000  00000000  000664bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e345  00000000  00000000  000690c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0007740c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c38  00000000  00000000  00077440  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007bdbb  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007bdbe  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0007bdc3  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0007bdc4  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0007bdc8  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0007bdcc  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0007bdd0  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0007bddb  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0007bde6  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0007bdf1  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0007bdfc  2**0
                  CONTENTS, READONLY
 28 .jdi          0000ff9d  00000000  00000000  0007be1c  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000d9e6e  00000000  00000000  0008bdb9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00a00000 l    d  .entry	00000000 .entry
00a00020 l    d  .exceptions	00000000 .exceptions
00a001b4 l    d  .text	00000000 .text
00a10b24 l    d  .rodata	00000000 .rodata
00a1102c l    d  .rwdata	00000000 .rwdata
00a147d4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00a001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Fractal.c
00000000 l    df *ABS*	00000000 Project.c
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 ef_pow.c
00a12b94 l     O .rwdata	00000008 bp
00a12b9c l     O .rwdata	00000008 dp_l
00a12ba4 l     O .rwdata	00000008 dp_h
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_rint.c
00a10bb0 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_isnan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00a01b44 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00a0241c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00a1102c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00a03858 l     F .text	00000058 __sprint_r
00a10d56 l     O .rodata	00000010 blanks.3452
00a10d46 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00a058bc l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00a072b8 l     F .text	00000058 std
00a073c4 l     F .text	00000008 __fp_lock
00a073cc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00a12bbc l     O .rwdata	00000004 charset
00a10d84 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00a10ecc l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00a0bea0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00a0c0e8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00a0c148 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00a0c248 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00a0c368 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00a0c448 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00a0c5a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00a0c7d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00a12be0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00a0ca6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00a119e8 l     O .rwdata	00001060 jtag_uart_1
00a12a48 l     O .rwdata	0000003c mailbox_0
00a12a84 l     O .rwdata	0000003c mailbox_1
00a12ac0 l     O .rwdata	0000003c mailbox_2
00a12afc l     O .rwdata	0000003c mailbox_3
00a12b38 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00a0cd78 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00a0cfb8 l     F .text	00000228 altera_avalon_jtag_uart_irq
00a0d1e0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
00a0d9b4 l     F .text	0000006c alt_avalon_mutex_reg
00a0da20 l     F .text	00000060 alt_get_errno
00a0dbb4 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00a0dd84 l     F .text	0000007c alt_mutex_trylock
00a0de58 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00a0f9c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00a0fe80 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00a0ffbc l     F .text	000000dc alt_file_locked
00a10220 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00a108a0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00a10a54 l     F .text	00000040 alt_sim_halt
00a00200 g     F .text	0000006c genColor
00a09074 g     F .text	00000094 _mprec_log10
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
00a09160 g     F .text	00000088 __any_on
00a0a86c g     F .text	00000070 _isatty_r
00a10ea4 g     O .rodata	00000028 __mprec_tinytens
00a0c604 g     F .text	0000006c alt_main
00a0dc04 g     F .text	000000a8 altera_avalon_mailbox_pend
00a0ee7c g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00a0365c g     F .text	000000a0 _puts_r
00a14834 g     O .bss	00000100 alt_irq
00a0a8dc g     F .text	00000078 _lseek_r
00a12c00 g       *ABS*	00000000 __flash_rwdata_start
00a0b91c g     F .text	00000088 __eqdf2
00a14ac4 g       *ABS*	00000000 __alt_heap_start
00a0dcac g     F .text	000000d8 altera_avalon_mailbox_get
00a035e4 g     F .text	00000044 printf
00a0a338 g     F .text	00000068 __sseek
00a07320 g     F .text	000000a4 __sinit
00a0e1ec g     F .text	00000024 alt_get_cpu_freq
00a07ff8 g     F .text	00000084 _setlocale_r
00a07420 g     F .text	00000068 __sfmoreglue
00a0c690 g     F .text	00000020 __malloc_unlock
00a01fdc g     F .text	00000174 __divsf3
00a08af0 g     F .text	000000e0 memmove
00a07410 g     F .text	00000010 _cleanup
00a006a4 g     F .text	00000458 powf
00a0df18 g     F .text	00000040 altera_avalon_mutex_trylock
00a091e8 g     F .text	000000bc _Balloc
00a0e250 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00a0b9a4 g     F .text	00000088 __gtdf2
00a035d4 g     F .text	00000010 __errno
00a0e210 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00a00000 g     F .entry	0000001c __reset
00a0dfb4 g     F .text	0000007c altera_avalon_mutex_is_mine
00a00020 g       *ABS*	00000000 __flash_exceptions_start
00a0a7f8 g     F .text	00000074 _fstat_r
00a147f0 g     O .bss	00000004 errno
00a02c00 g     F .text	00000038 __make_dp
00a03094 g     F .text	0000002c __make_fp
00a147f8 g     O .bss	00000004 alt_argv
00a1ab8c g       *ABS*	00000000 _gp
00a01d28 g     F .text	00000070 __subsf3
00a0e3f0 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00006000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
00a11868 g     O .rwdata	00000180 alt_fd_list
00a0faf0 g     F .text	00000094 alt_find_dev
00a08a50 g     F .text	000000a0 memcpy
00a07404 g     F .text	0000000c _cleanup_r
00a0bb3c g     F .text	000000f8 __floatsidf
00a0ff44 g     F .text	00000078 alt_io_redirect
00a0bab4 g     F .text	00000088 __ltdf2
00a10b24 g       *ABS*	00000000 __DTOR_END__
00a036fc g     F .text	00000014 puts
00a10424 g     F .text	00000020 altera_nios2_irq_init
00a08fc4 g     F .text	000000b0 __ratio
00a0daf8 g     F .text	000000bc altera_avalon_mailbox_post
00a0e4a0 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00a0d3f8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00a03628 g     F .text	00000034 _printf_r
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00a0bfdc g     F .text	00000008 __udivsi3
00a0c2a8 g     F .text	000000c0 isatty
00a10db4 g     O .rodata	000000c8 __mprec_tens
00a0dad8 g     F .text	00000020 altera_avalon_mailbox_close
00a0eb2c g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00a07fd4 g     F .text	00000008 __locale_charset
00a022b8 g     F .text	00000078 __lesf2
00a1061c g     F .text	00000090 alt_icache_flush
00a147e4 g     O .bss	00000004 __malloc_top_pad
00a0e18c g     F .text	00000040 perf_get_num_starts
00a12bb8 g     O .rwdata	00000004 __mb_cur_max
00a07fdc g     F .text	0000000c _localeconv_r
00a098e0 g     F .text	0000003c __i2b
00a079b8 g     F .text	0000049c __sfvwrite_r
00a019a4 g     F .text	0000001c finitef
00a0a2c0 g     F .text	00000070 _sbrk_r
00a0f310 g     F .text	000000d0 helper_plot_pixel
00a01994 g     F .text	00000010 fabsf
00a0a954 g     F .text	00000078 _read_r
00a1142c g     O .rwdata	0000000c __lc_ctype
00a12bd8 g     O .rwdata	00000004 alt_max_fd
00a033d4 g     F .text	00000138 __unpack_d
00a0a6d4 g     F .text	00000110 _fclose_r
00a07284 g     F .text	00000034 fflush
00a147e8 g     O .bss	00000004 __malloc_max_sbrked_mem
00a023c8 g     F .text	00000054 __extendsfdf2
00a019c0 g     F .text	00000018 isnanf
00a028ac g     F .text	00000074 __adddf3
00a08ea4 g     F .text	00000120 __b2d
00a0e4d4 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
00a0afa8 g     F .text	000005b0 __umoddi3
00a0c4b4 g     F .text	000000f0 lseek
00a0e030 g     F .text	00000058 altera_avalon_mutex_first_lock
00a12b90 g     O .rwdata	00000004 targetY
00a12bac g     O .rwdata	00000004 __fdlib_version
00a12bb4 g     O .rwdata	00000004 _global_impure_ptr
00a09c5c g     F .text	000005f4 _realloc_r
00a14ac4 g       *ABS*	00000000 __bss_end
00a0fd88 g     F .text	000000f8 alt_iic_isr_register
00a0e638 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00a10318 g     F .text	0000010c alt_tick
00a0a9cc g     F .text	000005dc __udivdi3
00a10e7c g     O .rodata	00000028 __mprec_bigtens
00a09b3c g     F .text	00000120 __s2b
00a0bd0c g     F .text	00000194 __floatunsidf
00a08dc4 g     F .text	00000060 __mcmp
00a073ec g     F .text	00000018 __fp_lock_all
00a0fd40 g     F .text	00000048 alt_ic_irq_enabled
00a10280 g     F .text	00000098 alt_alarm_stop
00a14800 g     O .bss	00000004 alt_irq_active
00a000ec g     F .exceptions	000000c8 alt_irq_handler
00a11840 g     O .rwdata	00000028 alt_dev_null
00a00278 g     F .text	000000e4 barrier
00a0de00 g     F .text	00000058 altera_avalon_mutex_open
00a01784 g     F .text	00000210 rint
00a02f24 g     F .text	000000c8 __unpack_f
00a0f8d0 g     F .text	00000044 alt_dcache_flush_all
00a08c90 g     F .text	00000070 __hi0bits
00a0f24c g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
00a0bc34 g     F .text	000000d8 __fixdfsi
00a12c00 g       *ABS*	00000000 __ram_rwdata_end
00a12bd0 g     O .rwdata	00000008 alt_dev_list
00a0c94c g     F .text	00000120 write
00a0f3e0 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00a021c8 g     F .text	00000078 __gtsf2
00a12bec g     O .rwdata	00000008 alt_mutex_list
00a1102c g       *ABS*	00000000 __ram_rodata_end
00a0c174 g     F .text	000000d4 fstat
00a09a1c g     F .text	00000120 __pow5mult
00a147d8 g     O .bss	00000004 __nlocale_changed
00a0bfe4 g     F .text	00000008 __umodsi3
00a14ac4 g       *ABS*	00000000 end
00a02dc4 g     F .text	00000160 __pack_f
00a147d4 g     O .bss	00000004 myPixelBuffer
00a0cef8 g     F .text	000000c0 altera_avalon_jtag_uart_init
00a10b20 g       *ABS*	00000000 __CTOR_LIST__
00c00000 g       *ABS*	00000000 __alt_stack_pointer
00a02d44 g     F .text	00000080 __clzsi2
00a0d61c g     F .text	00000240 altera_avalon_jtag_uart_write
00a0d85c g     F .text	00000158 alt_avalon_mailbox_init
00a07310 g     F .text	00000004 __sfp_lock_acquire
00a0896c g     F .text	000000e4 memchr
00a038b0 g     F .text	00001eac ___vfprintf_internal_r
00a03784 g     F .text	00000060 _sprintf_r
00a076a4 g     F .text	00000314 _free_r
00a108a4 g     F .text	000001b0 __call_exitprocs
00a12b8c g     O .rwdata	00000004 targetX
00a147dc g     O .bss	00000004 __mlocale_changed
00a12bc4 g     O .rwdata	00000004 __malloc_sbrk_base
00a001b4 g     F .text	0000004c _start
00a14804 g     O .bss	00000004 _alt_tick_rate
00a095ac g     F .text	0000014c __lshift
00a14808 g     O .bss	00000004 _alt_nticks
00a0c6b0 g     F .text	00000120 read
00a0cb00 g     F .text	00000278 alt_sys_init
00a02330 g     F .text	00000098 __floatsisf
00a1076c g     F .text	00000134 __register_exitproc
00a0df58 g     F .text	0000005c altera_avalon_mutex_unlock
00a096f8 g     F .text	000001e8 __multiply
00a0d290 g     F .text	00000074 altera_avalon_jtag_uart_close
00a1102c g       *ABS*	00000000 __ram_rwdata_start
00a10b24 g       *ABS*	00000000 __ram_rodata_start
00a1480c g     O .bss	00000028 __malloc_current_mallinfo
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00a02150 g     F .text	00000078 __eqsf2
00a092a4 g     F .text	0000017c __d2b
00a0cdb0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00a10564 g     F .text	000000b8 alt_get_fd
00a0350c g     F .text	000000c8 __fpcmp_parts_d
00a0a664 g     F .text	00000070 _close_r
00a0045c g     F .text	000001a0 drawFrame
00a0e088 g     F .text	000000b0 perf_get_section_time
00a106f8 g     F .text	00000074 memcmp
00a0ce60 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00a14ac4 g       *ABS*	00000000 __alt_stack_base
00a0cea8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00a05780 g     F .text	0000013c __swsetup_r
00a02920 g     F .text	00000258 __divdf3
00a07488 g     F .text	000000f0 __sfp
00a09108 g     F .text	00000058 __copybits
00a0e138 g     F .text	00000054 perf_get_total_time
00a11438 g     O .rwdata	00000408 __malloc_av_
00a0731c g     F .text	00000004 __sinit_lock_release
00a0b558 g     F .text	000003c4 __muldf3
00a00afc g     F .text	00000b14 __ieee754_powf
00a0a41c g     F .text	00000060 __sread
00a10bc0 g     O .rodata	00000010 __thenan_sf
00a10444 g     F .text	00000120 alt_find_file
00a0f914 g     F .text	000000b4 alt_dev_llist_insert
00a0c670 g     F .text	00000020 __malloc_lock
00a0c890 g     F .text	000000bc sbrk
00a019e0 g     F .text	0000014c scalbnf
00a07088 g     F .text	000001fc _fflush_r
00a0a5b0 g     F .text	000000b4 _calloc_r
00a147d4 g       *ABS*	00000000 __bss_start
00a08bd0 g     F .text	00000098 memset
00a01610 g     F .text	0000016c __ieee754_sqrtf
00a0062c g     F .text	00000078 main
00a147fc g     O .bss	00000004 alt_envp
00a147ec g     O .bss	00000004 __malloc_max_total_mem
00a0e448 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
00a0ce08 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00a02240 g     F .text	00000078 __ltsf2
00a0a330 g     F .text	00000008 __sclose
00a0177c g     F .text	00000008 matherr
00c00000 g       *ABS*	00000000 __alt_heap_limit
00a0a7e4 g     F .text	00000014 fclose
00a02c38 g     F .text	00000074 __truncdfsf2
00a14934 g     O .bss	00000190 _atexit0
00a0ded8 g     F .text	00000040 altera_avalon_mutex_lock
00a05ad4 g     F .text	000015b4 _dtoa_r
00a0822c g     F .text	00000740 _malloc_r
00a12bdc g     O .rwdata	00000004 alt_errno
00a07f1c g     F .text	000000b8 _fwalk
00a0bf1c g     F .text	00000060 __divsi3
00a10bd0 g     O .rodata	00000014 __thenan_df
00a07578 g     F .text	0000012c _malloc_trim_r
00a10b24 g       *ABS*	00000000 __CTOR_END__
00a01dfc g     F .text	000001e0 __mulsf3
00a0a47c g     F .text	000000bc strcmp
00a10b24 g       *ABS*	00000000 __flash_rodata_start
00a10b24 g       *ABS*	00000000 __DTOR_LIST__
00a02b78 g     F .text	00000088 __nedf2
01880000 g       *ABS*	00000000 __alt_mem_sram_0
00a0cacc g     F .text	00000034 alt_irq_init
00a0c830 g     F .text	00000060 alt_release_fd
00a01b2c g     F .text	00000018 copysignf
00a03710 g     F .text	00000074 sprintf
00a10be4 g     O .rodata	00000100 __clz_tab
00a147e0 g     O .bss	00000004 _PathLocale
00a106ac g     F .text	00000014 atexit
00a0a538 g     F .text	00000078 _write_r
00a0807c g     F .text	0000001c setlocale
00a019d8 g     F .text	00000008 nanf
00a12bb0 g     O .rwdata	00000004 _impure_ptr
00a147f4 g     O .bss	00000004 alt_argc
00a0fa8c g     F .text	00000064 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00a00020 g       .exceptions	00000000 alt_irq_entry
00a08e24 g     F .text	00000080 __ulp
00a0a250 g     F .text	00000040 __isinfd
00a073d4 g     F .text	00000018 __fp_unlock_all
00a12be4 g     O .rwdata	00000008 alt_mailbox_list
00a005fc g     F .text	00000030 setup
00a12bc8 g     O .rwdata	00000008 alt_fs_list
00a00020 g       *ABS*	00000000 __ram_exceptions_start
00a07fe8 g     F .text	00000010 localeconv
00a0fbb4 g     F .text	00000050 alt_ic_isr_register
00a12c00 g       *ABS*	00000000 _edata
00a14ac4 g       *ABS*	00000000 _end
00a001b4 g       *ABS*	00000000 __ram_exceptions_end
00a0d304 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00a0fca0 g     F .text	000000a0 alt_ic_irq_disable
00a0a3a0 g     F .text	0000007c __swrite
00a12bc0 g     O .rwdata	00000004 __malloc_trim_threshold
00a0e1cc g     F .text	00000020 alt_get_performance_counter_base
00a106c0 g     F .text	00000038 exit
00a07e54 g     F .text	000000c8 _fwalk_reent
00a09420 g     F .text	0000018c __mdiff
00a0035c g     F .text	00000100 mandelbrot
00a0bf7c g     F .text	00000060 __modsi3
00c00000 g       *ABS*	00000000 __alt_data_end
00a00020 g     F .exceptions	00000000 alt_exception
00a07314 g     F .text	00000004 __sfp_lock_release
00a0da80 g     F .text	00000058 altera_avalon_mailbox_open
00a02fec g     F .text	000000a8 __fpcmp_parts_f
00a10a94 g     F .text	00000020 _exit
00a0a290 g     F .text	00000030 __isnand
00a0f77c g     F .text	00000154 alt_alarm_start
00a02cac g     F .text	00000098 __muldi3
00a08098 g     F .text	00000194 __smakebuf_r
00a037e4 g     F .text	00000074 strlen
00a10098 g     F .text	00000188 open
00a0ba2c g     F .text	00000088 __gedf2
00a0026c g     F .text	0000000c clearScreen
00a0fb84 g     F .text	00000030 alt_icache_flush_all
00a12bf4 g     O .rwdata	00000004 alt_priority_mask
00a0fc04 g     F .text	0000009c alt_ic_irq_enable
00a0575c g     F .text	00000024 __vfprintf_internal
00a0deb8 g     F .text	00000020 altera_avalon_mutex_close
00a0282c g     F .text	00000080 __subdf3
00a08d00 g     F .text	000000c4 __lo0bits
00a12bf8 g     O .rwdata	00000008 alt_alarm_list
00a0fa28 g     F .text	00000064 _do_ctors
00a0bfec g     F .text	000000fc close
00a01d98 g     F .text	00000064 __addsf3
00a0c3c8 g     F .text	00000080 alt_load
00a030c0 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00a07318 g     F .text	00000004 __sinit_lock_acquire
00a0991c g     F .text	00000100 __multadd
00a08c68 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00a00000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  a00000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  a00004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  a00008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  a0000c:	00bffd16 	blt	zero,r2,a00004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  a00010:	00402834 	movhi	at,160
    ori r1, r1, %lo(_start)
  a00014:	08406d14 	ori	at,at,436
    jmp r1
  a00018:	0800683a 	jmp	at
  a0001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

00a00020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  a00020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  a00024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  a00028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  a0002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  a00030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  a00034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  a00038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  a0003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  a00040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  a00044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  a00048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  a0004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  a00050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  a00054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  a00058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  a0005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  a00060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  a00064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  a00068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  a0006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a00070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  a00074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  a00078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  a0007c:	10000326 	beq	r2,zero,a0008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  a00080:	20000226 	beq	r4,zero,a0008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  a00084:	0a000ec0 	call	a000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  a00088:	00000306 	br	a00098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  a0008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  a00090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  a00094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a00098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  a0009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  a000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  a000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  a000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  a000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  a000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  a000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  a000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  a000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  a000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  a000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  a000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  a000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  a000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  a000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  a000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  a000e8:	ef80083a 	eret

00a000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  a000ec:	defff904 	addi	sp,sp,-28
  a000f0:	dfc00615 	stw	ra,24(sp)
  a000f4:	df000515 	stw	fp,20(sp)
  a000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  a000fc:	0005313a 	rdctl	r2,ipending
  a00100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  a00104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  a00108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  a0010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  a00110:	00800044 	movi	r2,1
  a00114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  a00118:	e0ffff17 	ldw	r3,-4(fp)
  a0011c:	e0bffe17 	ldw	r2,-8(fp)
  a00120:	1884703a 	and	r2,r3,r2
  a00124:	1005003a 	cmpeq	r2,r2,zero
  a00128:	1000161e 	bne	r2,zero,a00184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  a0012c:	e0bffd17 	ldw	r2,-12(fp)
  a00130:	00c02874 	movhi	r3,161
  a00134:	18d20d04 	addi	r3,r3,18484
  a00138:	100490fa 	slli	r2,r2,3
  a0013c:	10c5883a 	add	r2,r2,r3
  a00140:	11400017 	ldw	r5,0(r2)
  a00144:	e0bffd17 	ldw	r2,-12(fp)
  a00148:	00c02874 	movhi	r3,161
  a0014c:	18d20d04 	addi	r3,r3,18484
  a00150:	100490fa 	slli	r2,r2,3
  a00154:	10c5883a 	add	r2,r2,r3
  a00158:	10800104 	addi	r2,r2,4
  a0015c:	11000017 	ldw	r4,0(r2)
  a00160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  a00164:	0005313a 	rdctl	r2,ipending
  a00168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  a0016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  a00170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  a00174:	e0bfff17 	ldw	r2,-4(fp)
  a00178:	1004c03a 	cmpne	r2,r2,zero
  a0017c:	103fe31e 	bne	r2,zero,a0010c <alt_irq_handler+0x20>
  a00180:	00000706 	br	a001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  a00184:	e0bffe17 	ldw	r2,-8(fp)
  a00188:	1085883a 	add	r2,r2,r2
  a0018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  a00190:	e0bffd17 	ldw	r2,-12(fp)
  a00194:	10800044 	addi	r2,r2,1
  a00198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  a0019c:	003fde06 	br	a00118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  a001a0:	e037883a 	mov	sp,fp
  a001a4:	dfc00117 	ldw	ra,4(sp)
  a001a8:	df000017 	ldw	fp,0(sp)
  a001ac:	dec00204 	addi	sp,sp,8
  a001b0:	f800283a 	ret

Disassembly of section .text:

00a001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  a001b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
  a001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  a001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  a001c0:	00bffd16 	blt	zero,r2,a001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  a001c4:	06c03034 	movhi	sp,192
    ori sp, sp, %lo(__alt_stack_pointer)
  a001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  a001cc:	06802874 	movhi	gp,161
    ori gp, gp, %lo(_gp)
  a001d0:	d6aae314 	ori	gp,gp,43916
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  a001d4:	00802874 	movhi	r2,161
    ori r2, r2, %lo(__bss_start)
  a001d8:	1091f514 	ori	r2,r2,18388

    movhi r3, %hi(__bss_end)
  a001dc:	00c02874 	movhi	r3,161
    ori r3, r3, %lo(__bss_end)
  a001e0:	18d2b114 	ori	r3,r3,19140

    beq r2, r3, 1f
  a001e4:	10c00326 	beq	r2,r3,a001f4 <_start+0x40>

0:
    stw zero, (r2)
  a001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  a001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  a001f0:	10fffd36 	bltu	r2,r3,a001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  a001f4:	0a0c3c80 	call	a0c3c8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  a001f8:	0a0c6040 	call	a0c604 <alt_main>

00a001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  a001fc:	003fff06 	br	a001fc <alt_after_alt_main>

00a00200 <genColor>:
	int color = 0;
	if (iter == maxIter) {
		color = black;
	}
	else {
		int red = iter * 2;
  a00200:	2107883a 	add	r3,r4,r4
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  a00204:	00801904 	movi	r2,100
			red = 255;
		if (green > 255)
			green = 255;
		if (blue > 255)
			blue = 255;
		color = (red << 16) + (green << 8) + (blue);
  a00208:	200a90fa 	slli	r5,r4,3
  a0020c:	01c03fc4 	movi	r7,255
  a00210:	180d883a 	mov	r6,r3
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  a00214:	0011883a 	mov	r8,zero
  a00218:	20800926 	beq	r4,r2,a00240 <genColor+0x40>
		color = black;
	}
	else {
		int red = iter * 2;
		int green = iter * 8;
		int blue = iter * 3;
  a0021c:	1905883a 	add	r2,r3,r4
			red = 255;
		if (green > 255)
			green = 255;
		if (blue > 255)
			blue = 255;
		color = (red << 16) + (green << 8) + (blue);
  a00220:	1009883a 	mov	r4,r2
  a00224:	39400d16 	blt	r7,r5,a0025c <genColor+0x5c>
  a00228:	2806923a 	slli	r3,r5,8
  a0022c:	39000816 	blt	r7,r4,a00250 <genColor+0x50>
  a00230:	39800516 	blt	r7,r6,a00248 <genColor+0x48>
  a00234:	3004943a 	slli	r2,r6,16
  a00238:	2085883a 	add	r2,r4,r2
  a0023c:	1891883a 	add	r8,r3,r2
	}
	return color;
}
  a00240:	4005883a 	mov	r2,r8
  a00244:	f800283a 	ret
			red = 255;
		if (green > 255)
			green = 255;
		if (blue > 255)
			blue = 255;
		color = (red << 16) + (green << 8) + (blue);
  a00248:	380d883a 	mov	r6,r7
  a0024c:	003ff906 	br	a00234 <genColor+0x34>
  a00250:	3809883a 	mov	r4,r7
  a00254:	39bff70e 	bge	r7,r6,a00234 <genColor+0x34>
  a00258:	003ffb06 	br	a00248 <genColor+0x48>
  a0025c:	380b883a 	mov	r5,r7
  a00260:	2806923a 	slli	r3,r5,8
  a00264:	393ff20e 	bge	r7,r4,a00230 <genColor+0x30>
  a00268:	003ff906 	br	a00250 <genColor+0x50>

00a0026c <clearScreen>:
	}
}

void clearScreen(void) {
	//clears the part of the screen controlled by the pixel buffer
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
  a0026c:	d1271217 	ldw	r4,-25528(gp)
  a00270:	000b883a 	mov	r5,zero
  a00274:	0a0e4d41 	jmpi	a0e4d4 <alt_up_pixel_buffer_dma_clear_screen>

00a00278 <barrier>:
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}
}

void barrier(alt_u8 barrierNum) {
  a00278:	deffe304 	addi	sp,sp,-116
  a0027c:	dd001a15 	stw	r20,104(sp)
  a00280:	2029883a 	mov	r20,r4
  a00284:	dfc01c15 	stw	ra,112(sp)
  a00288:	dd401b15 	stw	r21,108(sp)
  a0028c:	dcc01915 	stw	r19,100(sp)
  a00290:	dc801815 	stw	r18,96(sp)
  a00294:	dc401715 	stw	r17,92(sp)
  a00298:	dc001615 	stw	r16,88(sp)
	alt_u32 msg;
	alt_mailbox_dev *mb[NUM_CPUS];
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
  a0029c:	002b317a 	rdctl	r21,cpuid
  a002a0:	0021883a 	mov	r16,zero
  a002a4:	d823883a 	mov	r17,sp
  a002a8:	dcc00204 	addi	r19,sp,8
  a002ac:	04800084 	movi	r18,2
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  a002b0:	800d883a 	mov	r6,r16
  a002b4:	01402874 	movhi	r5,161
  a002b8:	2942c904 	addi	r5,r5,2852
  a002bc:	9809883a 	mov	r4,r19
  a002c0:	0a037100 	call	a03710 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  a002c4:	9809883a 	mov	r4,r19
  a002c8:	0a0da800 	call	a0da80 <altera_avalon_mailbox_open>
	alt_mailbox_dev *mb[NUM_CPUS];
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
  a002cc:	84000044 	addi	r16,r16,1
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
  a002d0:	88800015 	stw	r2,0(r17)
	alt_mailbox_dev *mb[NUM_CPUS];
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
  a002d4:	8c400104 	addi	r17,r17,4
  a002d8:	84bff51e 	bne	r16,r18,a002b0 <barrier+0x38>
  a002dc:	a4403fcc 	andi	r17,r20,255
  a002e0:	0021883a 	mov	r16,zero
  a002e4:	d825883a 	mov	r18,sp
  a002e8:	05000084 	movi	r20,2
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}

	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
			altera_avalon_mailbox_post(mb[i], barrierNum);
  a002ec:	880b883a 	mov	r5,r17
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}

	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  a002f0:	ac000226 	beq	r21,r16,a002fc <barrier+0x84>
			altera_avalon_mailbox_post(mb[i], barrierNum);
  a002f4:	91000017 	ldw	r4,0(r18)
  a002f8:	0a0daf80 	call	a0daf8 <altera_avalon_mailbox_post>
	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}

	for (i = 0; i < NUM_CPUS; i++) {
  a002fc:	84000044 	addi	r16,r16,1
  a00300:	94800104 	addi	r18,r18,4
  a00304:	853ff91e 	bne	r16,r20,a002ec <barrier+0x74>
		}
	}

	for (i = 0; i < NUM_CPUS - 1; i++) {
		do {
			msg = altera_avalon_mailbox_pend(mb[cpu]);
  a00308:	ad45883a 	add	r2,r21,r21
  a0030c:	1085883a 	add	r2,r2,r2
  a00310:	16c5883a 	add	r2,r2,sp
  a00314:	14000017 	ldw	r16,0(r2)
  a00318:	8009883a 	mov	r4,r16
  a0031c:	0a0dc040 	call	a0dc04 <altera_avalon_mailbox_pend>
		}
		while (msg != barrierNum);
  a00320:	147ffd1e 	bne	r2,r17,a00318 <barrier+0xa0>
  a00324:	d821883a 	mov	r16,sp
		//		printf("cpu %0d recv msg \n", cpu);
	}

	for (i = 0; i < NUM_CPUS; i++) {
		altera_avalon_mailbox_close(mb[i]);
  a00328:	81000017 	ldw	r4,0(r16)
  a0032c:	84000104 	addi	r16,r16,4
  a00330:	0a0dad80 	call	a0dad8 <altera_avalon_mailbox_close>
		}
		while (msg != barrierNum);
		//		printf("cpu %0d recv msg \n", cpu);
	}

	for (i = 0; i < NUM_CPUS; i++) {
  a00334:	84fffc1e 	bne	r16,r19,a00328 <barrier+0xb0>
		altera_avalon_mailbox_close(mb[i]);
	}
}
  a00338:	dfc01c17 	ldw	ra,112(sp)
  a0033c:	dd401b17 	ldw	r21,108(sp)
  a00340:	dd001a17 	ldw	r20,104(sp)
  a00344:	dcc01917 	ldw	r19,100(sp)
  a00348:	dc801817 	ldw	r18,96(sp)
  a0034c:	dc401717 	ldw	r17,92(sp)
  a00350:	dc001617 	ldw	r16,88(sp)
  a00354:	dec01d04 	addi	sp,sp,116
  a00358:	f800283a 	ret

00a0035c <mandelbrot>:
		color = (red << 16) + (green << 8) + (blue);
	}
	return color;
}

int mandelbrot(int cRow, int cCol, float x0, float y0) {
  a0035c:	defff804 	addi	sp,sp,-32
  a00360:	dd800615 	stw	r22,24(sp)
  a00364:	dd400515 	stw	r21,20(sp)
  a00368:	dd000415 	stw	r20,16(sp)
  a0036c:	dcc00315 	stw	r19,12(sp)
  a00370:	dc800215 	stw	r18,8(sp)
  a00374:	dc400115 	stw	r17,4(sp)
  a00378:	dc000015 	stw	r16,0(sp)
  a0037c:	302d883a 	mov	r22,r6
  a00380:	382b883a 	mov	r21,r7
  a00384:	0029883a 	mov	r20,zero
  a00388:	0025883a 	mov	r18,zero
  a0038c:	0027883a 	mov	r19,zero
  a00390:	0023883a 	mov	r17,zero
  a00394:	0021883a 	mov	r16,zero
  a00398:	dfc00715 	stw	ra,28(sp)
  a0039c:	00000206 	br	a003a8 <mandelbrot+0x4c>
	float y = 0.0;
	float xtemp = 0.0;

	unsigned long long cycles = 0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  a003a0:	00801904 	movi	r2,100
  a003a4:	a0802226 	beq	r20,r2,a00430 <mandelbrot+0xd4>

		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
  a003a8:	00800104 	movi	r2,4
  a003ac:	10000035 	stwio	zero,0(r2)
		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
  a003b0:	00c00504 	movi	r3,20
  a003b4:	18000035 	stwio	zero,0(r3)

		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  a003b8:	9485ff72 	custom	253,r2,r18,r18
  a003bc:	14c5ff32 	custom	252,r2,r2,r19
	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {

		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

		xtemp = x * x - y * y + x0;
  a003c0:	8c25ffb2 	custom	254,r18,r17,r16
		y = 2 * x * y + y0;
  a003c4:	1567ff72 	custom	253,r19,r2,r21
	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {

		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

		xtemp = x * x - y * y + x0;
  a003c8:	95a5ff72 	custom	253,r18,r18,r22
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
  a003cc:	a5000044 	addi	r20,r20,1

		PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
  a003d0:	00800404 	movi	r2,16
  a003d4:	10000035 	stwio	zero,0(r2)
		PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
  a003d8:	0007883a 	mov	r3,zero
  a003dc:	18000035 	stwio	zero,0(r3)
		cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);
  a003e0:	0009883a 	mov	r4,zero
  a003e4:	01400044 	movi	r5,1
  a003e8:	0a0e0880 	call	a0e088 <perf_get_section_time>
		printf("iter number: %i\n", iter);
  a003ec:	01002874 	movhi	r4,161
  a003f0:	2102cd04 	addi	r4,r4,2868
  a003f4:	a00b883a 	mov	r5,r20
		x = xtemp;
		iter++;

		PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
		PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);
  a003f8:	1823883a 	mov	r17,r3
  a003fc:	1021883a 	mov	r16,r2
		printf("iter number: %i\n", iter);
  a00400:	0a035e40 	call	a035e4 <printf>
		printf("Cycles on frame: %llu \n\n", cycles);
  a00404:	880d883a 	mov	r6,r17
  a00408:	800b883a 	mov	r5,r16
  a0040c:	01002874 	movhi	r4,161
  a00410:	2102d204 	addi	r4,r4,2888
	float y = 0.0;
	float xtemp = 0.0;

	unsigned long long cycles = 0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  a00414:	94a3ff32 	custom	252,r17,r18,r18
  a00418:	9ce1ff32 	custom	252,r16,r19,r19

		PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
		PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);
		printf("iter number: %i\n", iter);
		printf("Cycles on frame: %llu \n\n", cycles);
  a0041c:	0a035e40 	call	a035e4 <printf>
	float y = 0.0;
	float xtemp = 0.0;

	unsigned long long cycles = 0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  a00420:	8c09ff72 	custom	253,r4,r17,r16
  a00424:	01502034 	movhi	r5,16512
  a00428:	0a022b80 	call	a022b8 <__lesf2>
  a0042c:	00bfdc0e 	bge	zero,r2,a003a0 <mandelbrot+0x44>
		cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);
		printf("iter number: %i\n", iter);
		printf("Cycles on frame: %llu \n\n", cycles);
	}
	return iter;
}
  a00430:	a005883a 	mov	r2,r20
  a00434:	dfc00717 	ldw	ra,28(sp)
  a00438:	dd800617 	ldw	r22,24(sp)
  a0043c:	dd400517 	ldw	r21,20(sp)
  a00440:	dd000417 	ldw	r20,16(sp)
  a00444:	dcc00317 	ldw	r19,12(sp)
  a00448:	dc800217 	ldw	r18,8(sp)
  a0044c:	dc400117 	ldw	r17,4(sp)
  a00450:	dc000017 	ldw	r16,0(sp)
  a00454:	dec00804 	addi	sp,sp,32
  a00458:	f800283a 	ret

00a0045c <drawFrame>:
//			color = genColor(result);
//			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
//		}
//	}
//}
void drawFrame(int zoom) {
  a0045c:	defff504 	addi	sp,sp,-44
  a00460:	dfc00a15 	stw	ra,40(sp)
  a00464:	df000915 	stw	fp,36(sp)
  a00468:	ddc00815 	stw	r23,32(sp)
  a0046c:	dd800715 	stw	r22,28(sp)
  a00470:	dd400615 	stw	r21,24(sp)
  a00474:	dd000515 	stw	r20,20(sp)
  a00478:	dcc00415 	stw	r19,16(sp)
  a0047c:	dc800315 	stw	r18,12(sp)
  a00480:	dc400215 	stw	r17,8(sp)
  a00484:	dc000115 	stw	r16,4(sp)
	int i;
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
  a00488:	0005317a 	rdctl	r2,cpuid

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  a0048c:	040ff034 	movhi	r16,16320
void drawFrame(int zoom) {
	int i;
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
  a00490:	d8800015 	stw	r2,0(sp)

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  a00494:	0a023300 	call	a02330 <__floatsisf>
  a00498:	1023883a 	mov	r17,r2
  a0049c:	8009883a 	mov	r4,r16
  a004a0:	100b883a 	mov	r5,r2
  a004a4:	0a006a40 	call	a006a4 <powf>
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
  a004a8:	8009883a 	mov	r4,r16
  a004ac:	880b883a 	mov	r5,r17
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  a004b0:	1025883a 	mov	r18,r2
  a004b4:	d5600017 	ldw	r21,-32768(gp)
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
  a004b8:	0a006a40 	call	a006a4 <powf>
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  a004bc:	8009883a 	mov	r4,r16
  a004c0:	880b883a 	mov	r5,r17
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
  a004c4:	102d883a 	mov	r22,r2
  a004c8:	d7200017 	ldw	fp,-32768(gp)
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  a004cc:	0a006a40 	call	a006a4 <powf>
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));
  a004d0:	8009883a 	mov	r4,r16
  a004d4:	880b883a 	mov	r5,r17
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  a004d8:	1027883a 	mov	r19,r2
  a004dc:	d4600117 	ldw	r17,-32764(gp)
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));
  a004e0:	0a006a40 	call	a006a4 <powf>

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  a004e4:	d8c00017 	ldw	r3,0(sp)
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));
  a004e8:	1029883a 	mov	r20,r2

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  a004ec:	00804fc4 	movi	r2,319
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));
  a004f0:	d4200117 	ldw	r16,-32764(gp)

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  a004f4:	10c03516 	blt	r2,r3,a005cc <drawFrame+0x170>
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  a004f8:	900b883a 	mov	r5,r18
  a004fc:	012fe034 	movhi	r4,49024
  a00500:	0a01fdc0 	call	a01fdc <__divsf3>
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  a00504:	980b883a 	mov	r5,r19
  a00508:	012fd034 	movhi	r4,48960
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);

	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  a0050c:	156bff72 	custom	253,r21,r2,r21
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  a00510:	0a01fdc0 	call	a01fdc <__divsf3>
  a00514:	a00b883a 	mov	r5,r20
  a00518:	010fd034 	movhi	r4,16192
  a0051c:	146fff72 	custom	253,r23,r2,r17
  a00520:	0a01fdc0 	call	a01fdc <__divsf3>
  a00524:	1405ff72 	custom	253,r2,r2,r16
  a00528:	b00b883a 	mov	r5,r22
  a0052c:	010fe034 	movhi	r4,16256
  a00530:	15edffb2 	custom	254,r22,r2,r23
  a00534:	0a01fdc0 	call	a01fdc <__divsf3>
  a00538:	dc800017 	ldw	r18,0(sp)
  a0053c:	1705ff72 	custom	253,r2,r2,fp
  a00540:	1569ffb2 	custom	254,r20,r2,r21
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 239 - (float) i) / (float) 240) * (maxY - minY)) + minY;
  a00544:	9009883a 	mov	r4,r18
  a00548:	0a023300 	call	a02330 <__floatsisf>
  a0054c:	0110dbf4 	movhi	r4,17263
  a00550:	2089ffb2 	custom	254,r4,r4,r2
  a00554:	0150dc34 	movhi	r5,17264
  a00558:	0a01fdc0 	call	a01fdc <__divsf3>
  a0055c:	b085ff32 	custom	252,r2,r22,r2
  a00560:	b8a7ff72 	custom	253,r19,r23,r2
  a00564:	0021883a 	mov	r16,zero
		for (j = 0; j < rowSize; j++) {
			float x0 = (((float) j / (float) 320) * (maxX - minX)) + minX;

			result = mandelbrot(j, i, x0, y0);
  a00568:	8009883a 	mov	r4,r16
  a0056c:	0a023300 	call	a02330 <__floatsisf>
  a00570:	1009883a 	mov	r4,r2
  a00574:	0150e834 	movhi	r5,17312
  a00578:	0a01fdc0 	call	a01fdc <__divsf3>
  a0057c:	1505ff32 	custom	252,r2,r2,r20
  a00580:	a88dff72 	custom	253,r6,r21,r2
  a00584:	8009883a 	mov	r4,r16
  a00588:	900b883a 	mov	r5,r18
  a0058c:	980f883a 	mov	r7,r19
  a00590:	0a0035c0 	call	a0035c <mandelbrot>
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
  a00594:	d4671217 	ldw	r17,-25528(gp)
		float y0 = ((((float) 239 - (float) i) / (float) 240) * (maxY - minY)) + minY;
		for (j = 0; j < rowSize; j++) {
			float x0 = (((float) j / (float) 320) * (maxX - minX)) + minX;

			result = mandelbrot(j, i, x0, y0);
			color = genColor(result);
  a00598:	1009883a 	mov	r4,r2
  a0059c:	0a002000 	call	a00200 <genColor>
  a005a0:	800f883a 	mov	r7,r16
  a005a4:	8809883a 	mov	r4,r17
  a005a8:	100b883a 	mov	r5,r2
  a005ac:	900d883a 	mov	r6,r18
  a005b0:	0a0e2500 	call	a0e250 <alt_up_pixel_buffer_dma_draw>
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 239 - (float) i) / (float) 240) * (maxY - minY)) + minY;
		for (j = 0; j < rowSize; j++) {
  a005b4:	84000044 	addi	r16,r16,1
  a005b8:	00803c04 	movi	r2,240
  a005bc:	80bfea1e 	bne	r16,r2,a00568 <drawFrame+0x10c>
	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  a005c0:	94800084 	addi	r18,r18,2
  a005c4:	00804fc4 	movi	r2,319
  a005c8:	14bfde0e 	bge	r2,r18,a00544 <drawFrame+0xe8>
			result = mandelbrot(j, i, x0, y0);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}
}
  a005cc:	dfc00a17 	ldw	ra,40(sp)
  a005d0:	df000917 	ldw	fp,36(sp)
  a005d4:	ddc00817 	ldw	r23,32(sp)
  a005d8:	dd800717 	ldw	r22,28(sp)
  a005dc:	dd400617 	ldw	r21,24(sp)
  a005e0:	dd000517 	ldw	r20,20(sp)
  a005e4:	dcc00417 	ldw	r19,16(sp)
  a005e8:	dc800317 	ldw	r18,12(sp)
  a005ec:	dc400217 	ldw	r17,8(sp)
  a005f0:	dc000117 	ldw	r16,4(sp)
  a005f4:	dec00b04 	addi	sp,sp,44
  a005f8:	f800283a 	ret

00a005fc <setup>:
float targetX = -0.227;
float targetY = 0.700;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  a005fc:	deffff04 	addi	sp,sp,-4
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  a00600:	01002874 	movhi	r4,161
  a00604:	2102d904 	addi	r4,r4,2916
float targetX = -0.227;
float targetY = 0.700;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  a00608:	dfc00015 	stw	ra,0(sp)
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  a0060c:	0a0e2100 	call	a0e210 <alt_up_pixel_buffer_dma_open_dev>
  a00610:	d0a71215 	stw	r2,-25528(gp)
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
  a00614:	00c00044 	movi	r3,1
  a00618:	0005883a 	mov	r2,zero
  a0061c:	10c00035 	stwio	r3,0(r2)
}
  a00620:	dfc00017 	ldw	ra,0(sp)
  a00624:	dec00104 	addi	sp,sp,4
  a00628:	f800283a 	ret

00a0062c <main>:
#define key1 6
#define key0 7

#define FIXED_POINT

int main() {
  a0062c:	defffd04 	addi	sp,sp,-12
  a00630:	dfc00215 	stw	ra,8(sp)
  a00634:	dc400115 	stw	r17,4(sp)
  a00638:	dc000015 	stw	r16,0(sp)

	setup();
  a0063c:	0a005fc0 	call	a005fc <setup>
	printf("Program running (UART)...\n");
  a00640:	01002874 	movhi	r4,161
  a00644:	2102e104 	addi	r4,r4,2948
  a00648:	0a036fc0 	call	a036fc <puts>
	int cpu = __builtin_rdctl(5);
  a0064c:	000b317a 	rdctl	r5,cpuid
	printf("cpu %d\n", cpu);
  a00650:	01002874 	movhi	r4,161
  a00654:	2102e804 	addi	r4,r4,2976
  a00658:	0a035e40 	call	a035e4 <printf>
	//	unsigned long long cycles = 0;
	clearScreen();
  a0065c:	0a0026c0 	call	a0026c <clearScreen>
	while (1) {
		int zoom;
		for (zoom = 1; zoom <= 100; zoom++) {
			//				PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
			//				PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
			clearScreen();
  a00660:	0a0026c0 	call	a0026c <clearScreen>
			drawFrame(zoom);
  a00664:	01000044 	movi	r4,1
  a00668:	0a0045c0 	call	a0045c <drawFrame>
			barrier(0);
  a0066c:	0009883a 	mov	r4,zero
  a00670:	0a002780 	call	a00278 <barrier>
  a00674:	04401904 	movi	r17,100
  a00678:	00800084 	movi	r2,2
  a0067c:	1021883a 	mov	r16,r2
	while (1) {
		int zoom;
		for (zoom = 1; zoom <= 100; zoom++) {
			//				PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
			//				PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
			clearScreen();
  a00680:	0a0026c0 	call	a0026c <clearScreen>
			drawFrame(zoom);
  a00684:	8009883a 	mov	r4,r16
  a00688:	0a0045c0 	call	a0045c <drawFrame>
			barrier(0);
  a0068c:	0009883a 	mov	r4,zero
  a00690:	0a002780 	call	a00278 <barrier>
	clearScreen();
	//	drawFullSet();
	//the main program loop
	while (1) {
		int zoom;
		for (zoom = 1; zoom <= 100; zoom++) {
  a00694:	80800044 	addi	r2,r16,1
  a00698:	04000044 	movi	r16,1
  a0069c:	88bff816 	blt	r17,r2,a00680 <main+0x54>
  a006a0:	003ff606 	br	a0067c <main+0x50>

00a006a4 <powf>:
  a006a4:	defff104 	addi	sp,sp,-60
  a006a8:	dd000d15 	stw	r20,52(sp)
  a006ac:	dcc00c15 	stw	r19,48(sp)
  a006b0:	dc800b15 	stw	r18,44(sp)
  a006b4:	dc400a15 	stw	r17,40(sp)
  a006b8:	dc000915 	stw	r16,36(sp)
  a006bc:	dfc00e15 	stw	ra,56(sp)
  a006c0:	05002874 	movhi	r20,161
  a006c4:	a50aeb04 	addi	r20,r20,11180
  a006c8:	2027883a 	mov	r19,r4
  a006cc:	2825883a 	mov	r18,r5
  a006d0:	0a00afc0 	call	a00afc <__ieee754_powf>
  a006d4:	1021883a 	mov	r16,r2
  a006d8:	a0800017 	ldw	r2,0(r20)
  a006dc:	047fffc4 	movi	r17,-1
  a006e0:	14400326 	beq	r2,r17,a006f0 <powf+0x4c>
  a006e4:	9009883a 	mov	r4,r18
  a006e8:	0a019c00 	call	a019c0 <isnanf>
  a006ec:	10000926 	beq	r2,zero,a00714 <powf+0x70>
  a006f0:	8005883a 	mov	r2,r16
  a006f4:	dfc00e17 	ldw	ra,56(sp)
  a006f8:	dd000d17 	ldw	r20,52(sp)
  a006fc:	dcc00c17 	ldw	r19,48(sp)
  a00700:	dc800b17 	ldw	r18,44(sp)
  a00704:	dc400a17 	ldw	r17,40(sp)
  a00708:	dc000917 	ldw	r16,36(sp)
  a0070c:	dec00f04 	addi	sp,sp,60
  a00710:	f800283a 	ret
  a00714:	9809883a 	mov	r4,r19
  a00718:	0a019c00 	call	a019c0 <isnanf>
  a0071c:	1000151e 	bne	r2,zero,a00774 <powf+0xd0>
  a00720:	9809883a 	mov	r4,r19
  a00724:	000b883a 	mov	r5,zero
  a00728:	0a021500 	call	a02150 <__eqsf2>
  a0072c:	10005a1e 	bne	r2,zero,a00898 <powf+0x1f4>
  a00730:	9009883a 	mov	r4,r18
  a00734:	000b883a 	mov	r5,zero
  a00738:	0a021500 	call	a02150 <__eqsf2>
  a0073c:	1000331e 	bne	r2,zero,a0080c <powf+0x168>
  a00740:	a0800017 	ldw	r2,0(r20)
  a00744:	d8000615 	stw	zero,24(sp)
  a00748:	d8000715 	stw	zero,28(sp)
  a0074c:	10001426 	beq	r2,zero,a007a0 <powf+0xfc>
  a00750:	008ffc34 	movhi	r2,16368
  a00754:	d8800715 	stw	r2,28(sp)
  a00758:	d8800617 	ldw	r2,24(sp)
  a0075c:	d8c00717 	ldw	r3,28(sp)
  a00760:	1009883a 	mov	r4,r2
  a00764:	180b883a 	mov	r5,r3
  a00768:	0a02c380 	call	a02c38 <__truncdfsf2>
  a0076c:	1021883a 	mov	r16,r2
  a00770:	003fdf06 	br	a006f0 <powf+0x4c>
  a00774:	9009883a 	mov	r4,r18
  a00778:	000b883a 	mov	r5,zero
  a0077c:	0a021500 	call	a02150 <__eqsf2>
  a00780:	103fdb1e 	bne	r2,zero,a006f0 <powf+0x4c>
  a00784:	a0c00017 	ldw	r3,0(r20)
  a00788:	010ffc34 	movhi	r4,16368
  a0078c:	d8000615 	stw	zero,24(sp)
  a00790:	d9000715 	stw	r4,28(sp)
  a00794:	1c401a26 	beq	r3,r17,a00800 <powf+0x15c>
  a00798:	00800084 	movi	r2,2
  a0079c:	18801826 	beq	r3,r2,a00800 <powf+0x15c>
  a007a0:	9009883a 	mov	r4,r18
  a007a4:	0a023c80 	call	a023c8 <__extendsfdf2>
  a007a8:	9809883a 	mov	r4,r19
  a007ac:	d8c00515 	stw	r3,20(sp)
  a007b0:	d8800415 	stw	r2,16(sp)
  a007b4:	0a023c80 	call	a023c8 <__extendsfdf2>
  a007b8:	100b883a 	mov	r5,r2
  a007bc:	d8c00315 	stw	r3,12(sp)
  a007c0:	00802874 	movhi	r2,161
  a007c4:	1082ea04 	addi	r2,r2,2984
  a007c8:	00c00044 	movi	r3,1
  a007cc:	d809883a 	mov	r4,sp
  a007d0:	d8800115 	stw	r2,4(sp)
  a007d4:	d8c00015 	stw	r3,0(sp)
  a007d8:	d9400215 	stw	r5,8(sp)
  a007dc:	d8000815 	stw	zero,32(sp)
  a007e0:	0a0177c0 	call	a0177c <matherr>
  a007e4:	10002826 	beq	r2,zero,a00888 <powf+0x1e4>
  a007e8:	d8800817 	ldw	r2,32(sp)
  a007ec:	103fda26 	beq	r2,zero,a00758 <powf+0xb4>
  a007f0:	0a035d40 	call	a035d4 <__errno>
  a007f4:	d8c00817 	ldw	r3,32(sp)
  a007f8:	10c00015 	stw	r3,0(r2)
  a007fc:	003fd606 	br	a00758 <powf+0xb4>
  a00800:	d9000715 	stw	r4,28(sp)
  a00804:	d8000615 	stw	zero,24(sp)
  a00808:	003fd306 	br	a00758 <powf+0xb4>
  a0080c:	9009883a 	mov	r4,r18
  a00810:	0a019a40 	call	a019a4 <finitef>
  a00814:	103fb626 	beq	r2,zero,a006f0 <powf+0x4c>
  a00818:	9009883a 	mov	r4,r18
  a0081c:	000b883a 	mov	r5,zero
  a00820:	0a022400 	call	a02240 <__ltsf2>
  a00824:	103fb20e 	bge	r2,zero,a006f0 <powf+0x4c>
  a00828:	9809883a 	mov	r4,r19
  a0082c:	00800044 	movi	r2,1
  a00830:	00c02874 	movhi	r3,161
  a00834:	18c2ea04 	addi	r3,r3,2984
  a00838:	d8800015 	stw	r2,0(sp)
  a0083c:	d8c00115 	stw	r3,4(sp)
  a00840:	d8000815 	stw	zero,32(sp)
  a00844:	0a023c80 	call	a023c8 <__extendsfdf2>
  a00848:	9009883a 	mov	r4,r18
  a0084c:	d8c00315 	stw	r3,12(sp)
  a00850:	d8800215 	stw	r2,8(sp)
  a00854:	0a023c80 	call	a023c8 <__extendsfdf2>
  a00858:	a1800017 	ldw	r6,0(r20)
  a0085c:	d8c00515 	stw	r3,20(sp)
  a00860:	d8800415 	stw	r2,16(sp)
  a00864:	30005626 	beq	r6,zero,a009c0 <powf+0x31c>
  a00868:	00bffc34 	movhi	r2,65520
  a0086c:	d8800715 	stw	r2,28(sp)
  a00870:	00800084 	movi	r2,2
  a00874:	d8000615 	stw	zero,24(sp)
  a00878:	30800326 	beq	r6,r2,a00888 <powf+0x1e4>
  a0087c:	d809883a 	mov	r4,sp
  a00880:	0a0177c0 	call	a0177c <matherr>
  a00884:	103fd81e 	bne	r2,zero,a007e8 <powf+0x144>
  a00888:	0a035d40 	call	a035d4 <__errno>
  a0088c:	00c00844 	movi	r3,33
  a00890:	10c00015 	stw	r3,0(r2)
  a00894:	003fd406 	br	a007e8 <powf+0x144>
  a00898:	8009883a 	mov	r4,r16
  a0089c:	0a019a40 	call	a019a4 <finitef>
  a008a0:	10002426 	beq	r2,zero,a00934 <powf+0x290>
  a008a4:	8009883a 	mov	r4,r16
  a008a8:	000b883a 	mov	r5,zero
  a008ac:	0a021500 	call	a02150 <__eqsf2>
  a008b0:	103f8f1e 	bne	r2,zero,a006f0 <powf+0x4c>
  a008b4:	9809883a 	mov	r4,r19
  a008b8:	0a019a40 	call	a019a4 <finitef>
  a008bc:	103f8c26 	beq	r2,zero,a006f0 <powf+0x4c>
  a008c0:	9009883a 	mov	r4,r18
  a008c4:	0a019a40 	call	a019a4 <finitef>
  a008c8:	103f8926 	beq	r2,zero,a006f0 <powf+0x4c>
  a008cc:	9809883a 	mov	r4,r19
  a008d0:	00800104 	movi	r2,4
  a008d4:	00c02874 	movhi	r3,161
  a008d8:	18c2ea04 	addi	r3,r3,2984
  a008dc:	d8800015 	stw	r2,0(sp)
  a008e0:	d8c00115 	stw	r3,4(sp)
  a008e4:	d8000815 	stw	zero,32(sp)
  a008e8:	0a023c80 	call	a023c8 <__extendsfdf2>
  a008ec:	9009883a 	mov	r4,r18
  a008f0:	d8c00315 	stw	r3,12(sp)
  a008f4:	d8800215 	stw	r2,8(sp)
  a008f8:	0a023c80 	call	a023c8 <__extendsfdf2>
  a008fc:	a1800017 	ldw	r6,0(r20)
  a00900:	d8800415 	stw	r2,16(sp)
  a00904:	00800084 	movi	r2,2
  a00908:	d8c00515 	stw	r3,20(sp)
  a0090c:	d8000615 	stw	zero,24(sp)
  a00910:	d8000715 	stw	zero,28(sp)
  a00914:	30800326 	beq	r6,r2,a00924 <powf+0x280>
  a00918:	d809883a 	mov	r4,sp
  a0091c:	0a0177c0 	call	a0177c <matherr>
  a00920:	103fb11e 	bne	r2,zero,a007e8 <powf+0x144>
  a00924:	0a035d40 	call	a035d4 <__errno>
  a00928:	00c00884 	movi	r3,34
  a0092c:	10c00015 	stw	r3,0(r2)
  a00930:	003fad06 	br	a007e8 <powf+0x144>
  a00934:	9809883a 	mov	r4,r19
  a00938:	0a019a40 	call	a019a4 <finitef>
  a0093c:	103fd926 	beq	r2,zero,a008a4 <powf+0x200>
  a00940:	9009883a 	mov	r4,r18
  a00944:	0a019a40 	call	a019a4 <finitef>
  a00948:	103fd626 	beq	r2,zero,a008a4 <powf+0x200>
  a0094c:	8009883a 	mov	r4,r16
  a00950:	0a019c00 	call	a019c0 <isnanf>
  a00954:	10001d26 	beq	r2,zero,a009cc <powf+0x328>
  a00958:	9809883a 	mov	r4,r19
  a0095c:	00800044 	movi	r2,1
  a00960:	00c02874 	movhi	r3,161
  a00964:	18c2ea04 	addi	r3,r3,2984
  a00968:	d8800015 	stw	r2,0(sp)
  a0096c:	d8c00115 	stw	r3,4(sp)
  a00970:	d8000815 	stw	zero,32(sp)
  a00974:	0a023c80 	call	a023c8 <__extendsfdf2>
  a00978:	9009883a 	mov	r4,r18
  a0097c:	d8c00315 	stw	r3,12(sp)
  a00980:	d8800215 	stw	r2,8(sp)
  a00984:	0a023c80 	call	a023c8 <__extendsfdf2>
  a00988:	a4000017 	ldw	r16,0(r20)
  a0098c:	d8c00515 	stw	r3,20(sp)
  a00990:	d8800415 	stw	r2,16(sp)
  a00994:	80000a26 	beq	r16,zero,a009c0 <powf+0x31c>
  a00998:	0009883a 	mov	r4,zero
  a0099c:	000d883a 	mov	r6,zero
  a009a0:	000b883a 	mov	r5,zero
  a009a4:	000f883a 	mov	r7,zero
  a009a8:	0a029200 	call	a02920 <__divdf3>
  a009ac:	d8800615 	stw	r2,24(sp)
  a009b0:	00800084 	movi	r2,2
  a009b4:	d8c00715 	stw	r3,28(sp)
  a009b8:	80bfb01e 	bne	r16,r2,a0087c <powf+0x1d8>
  a009bc:	003fb206 	br	a00888 <powf+0x1e4>
  a009c0:	d8000615 	stw	zero,24(sp)
  a009c4:	d8000715 	stw	zero,28(sp)
  a009c8:	003fac06 	br	a0087c <powf+0x1d8>
  a009cc:	9809883a 	mov	r4,r19
  a009d0:	008000c4 	movi	r2,3
  a009d4:	00c02874 	movhi	r3,161
  a009d8:	18c2ea04 	addi	r3,r3,2984
  a009dc:	d8800015 	stw	r2,0(sp)
  a009e0:	d8c00115 	stw	r3,4(sp)
  a009e4:	d8000815 	stw	zero,32(sp)
  a009e8:	0a023c80 	call	a023c8 <__extendsfdf2>
  a009ec:	9009883a 	mov	r4,r18
  a009f0:	d8c00315 	stw	r3,12(sp)
  a009f4:	d8800215 	stw	r2,8(sp)
  a009f8:	0a023c80 	call	a023c8 <__extendsfdf2>
  a009fc:	a1800017 	ldw	r6,0(r20)
  a00a00:	d8c00515 	stw	r3,20(sp)
  a00a04:	d8800415 	stw	r2,16(sp)
  a00a08:	3000211e 	bne	r6,zero,a00a90 <powf+0x3ec>
  a00a0c:	9809883a 	mov	r4,r19
  a00a10:	0091fc34 	movhi	r2,18416
  a00a14:	10bfffc4 	addi	r2,r2,-1
  a00a18:	04f80034 	movhi	r19,57344
  a00a1c:	000b883a 	mov	r5,zero
  a00a20:	d8800715 	stw	r2,28(sp)
  a00a24:	dcc00615 	stw	r19,24(sp)
  a00a28:	0a022400 	call	a02240 <__ltsf2>
  a00a2c:	103fba0e 	bge	r2,zero,a00918 <powf+0x274>
  a00a30:	014fc034 	movhi	r5,16128
  a00a34:	9009883a 	mov	r4,r18
  a00a38:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00a3c:	1009883a 	mov	r4,r2
  a00a40:	0a023c80 	call	a023c8 <__extendsfdf2>
  a00a44:	1009883a 	mov	r4,r2
  a00a48:	180b883a 	mov	r5,r3
  a00a4c:	1021883a 	mov	r16,r2
  a00a50:	1823883a 	mov	r17,r3
  a00a54:	0a017840 	call	a01784 <rint>
  a00a58:	180f883a 	mov	r7,r3
  a00a5c:	880b883a 	mov	r5,r17
  a00a60:	8009883a 	mov	r4,r16
  a00a64:	100d883a 	mov	r6,r2
  a00a68:	0a02b780 	call	a02b78 <__nedf2>
  a00a6c:	10000426 	beq	r2,zero,a00a80 <powf+0x3dc>
  a00a70:	00b1fc34 	movhi	r2,51184
  a00a74:	10bfffc4 	addi	r2,r2,-1
  a00a78:	dcc00615 	stw	r19,24(sp)
  a00a7c:	d8800715 	stw	r2,28(sp)
  a00a80:	a0c00017 	ldw	r3,0(r20)
  a00a84:	00800084 	movi	r2,2
  a00a88:	18bfa31e 	bne	r3,r2,a00918 <powf+0x274>
  a00a8c:	003fa506 	br	a00924 <powf+0x280>
  a00a90:	009ffc34 	movhi	r2,32752
  a00a94:	9809883a 	mov	r4,r19
  a00a98:	000b883a 	mov	r5,zero
  a00a9c:	d8800715 	stw	r2,28(sp)
  a00aa0:	d8000615 	stw	zero,24(sp)
  a00aa4:	0a022400 	call	a02240 <__ltsf2>
  a00aa8:	103ff50e 	bge	r2,zero,a00a80 <powf+0x3dc>
  a00aac:	014fc034 	movhi	r5,16128
  a00ab0:	9009883a 	mov	r4,r18
  a00ab4:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00ab8:	1009883a 	mov	r4,r2
  a00abc:	0a023c80 	call	a023c8 <__extendsfdf2>
  a00ac0:	1009883a 	mov	r4,r2
  a00ac4:	180b883a 	mov	r5,r3
  a00ac8:	1021883a 	mov	r16,r2
  a00acc:	1823883a 	mov	r17,r3
  a00ad0:	0a017840 	call	a01784 <rint>
  a00ad4:	180f883a 	mov	r7,r3
  a00ad8:	880b883a 	mov	r5,r17
  a00adc:	8009883a 	mov	r4,r16
  a00ae0:	100d883a 	mov	r6,r2
  a00ae4:	0a02b780 	call	a02b78 <__nedf2>
  a00ae8:	103fe526 	beq	r2,zero,a00a80 <powf+0x3dc>
  a00aec:	00bffc34 	movhi	r2,65520
  a00af0:	d8800715 	stw	r2,28(sp)
  a00af4:	d8000615 	stw	zero,24(sp)
  a00af8:	003fe106 	br	a00a80 <powf+0x3dc>

00a00afc <__ieee754_powf>:
  a00afc:	defff004 	addi	sp,sp,-64
  a00b00:	00a00034 	movhi	r2,32768
  a00b04:	10bfffc4 	addi	r2,r2,-1
  a00b08:	dc000615 	stw	r16,24(sp)
  a00b0c:	28a0703a 	and	r16,r5,r2
  a00b10:	df000e15 	stw	fp,56(sp)
  a00b14:	dcc00915 	stw	r19,36(sp)
  a00b18:	dc800815 	stw	r18,32(sp)
  a00b1c:	2027883a 	mov	r19,r4
  a00b20:	dfc00f15 	stw	ra,60(sp)
  a00b24:	ddc00d15 	stw	r23,52(sp)
  a00b28:	dd800c15 	stw	r22,48(sp)
  a00b2c:	dd400b15 	stw	r21,44(sp)
  a00b30:	dd000a15 	stw	r20,40(sp)
  a00b34:	dc400715 	stw	r17,28(sp)
  a00b38:	2839883a 	mov	fp,r5
  a00b3c:	2825883a 	mov	r18,r5
  a00b40:	2809883a 	mov	r4,r5
  a00b44:	80003526 	beq	r16,zero,a00c1c <__ieee754_powf+0x120>
  a00b48:	98a2703a 	and	r17,r19,r2
  a00b4c:	009fe034 	movhi	r2,32640
  a00b50:	9829883a 	mov	r20,r19
  a00b54:	1440100e 	bge	r2,r17,a00b98 <__ieee754_powf+0x9c>
  a00b58:	008fe034 	movhi	r2,16256
  a00b5c:	88803d26 	beq	r17,r2,a00c54 <__ieee754_powf+0x158>
  a00b60:	01002874 	movhi	r4,161
  a00b64:	2102d804 	addi	r4,r4,2912
  a00b68:	dfc00f17 	ldw	ra,60(sp)
  a00b6c:	df000e17 	ldw	fp,56(sp)
  a00b70:	ddc00d17 	ldw	r23,52(sp)
  a00b74:	dd800c17 	ldw	r22,48(sp)
  a00b78:	dd400b17 	ldw	r21,44(sp)
  a00b7c:	dd000a17 	ldw	r20,40(sp)
  a00b80:	dcc00917 	ldw	r19,36(sp)
  a00b84:	dc800817 	ldw	r18,32(sp)
  a00b88:	dc400717 	ldw	r17,28(sp)
  a00b8c:	dc000617 	ldw	r16,24(sp)
  a00b90:	dec01004 	addi	sp,sp,64
  a00b94:	0a019d81 	jmpi	a019d8 <nanf>
  a00b98:	143fef16 	blt	r2,r16,a00b58 <__ieee754_powf+0x5c>
  a00b9c:	982a403a 	cmpge	r21,r19,zero
  a00ba0:	a8004526 	beq	r21,zero,a00cb8 <__ieee754_powf+0x1bc>
  a00ba4:	002f883a 	mov	r23,zero
  a00ba8:	009fe034 	movhi	r2,32640
  a00bac:	80803926 	beq	r16,r2,a00c94 <__ieee754_powf+0x198>
  a00bb0:	008fe034 	movhi	r2,16256
  a00bb4:	80803d26 	beq	r16,r2,a00cac <__ieee754_powf+0x1b0>
  a00bb8:	00900034 	movhi	r2,16384
  a00bbc:	20805326 	beq	r4,r2,a00d0c <__ieee754_powf+0x210>
  a00bc0:	008fc034 	movhi	r2,16128
  a00bc4:	20802526 	beq	r4,r2,a00c5c <__ieee754_powf+0x160>
  a00bc8:	9809883a 	mov	r4,r19
  a00bcc:	0a019940 	call	a01994 <fabsf>
  a00bd0:	1009883a 	mov	r4,r2
  a00bd4:	009fe034 	movhi	r2,32640
  a00bd8:	88803c26 	beq	r17,r2,a00ccc <__ieee754_powf+0x1d0>
  a00bdc:	88003b26 	beq	r17,zero,a00ccc <__ieee754_powf+0x1d0>
  a00be0:	014fe034 	movhi	r5,16256
  a00be4:	89403926 	beq	r17,r5,a00ccc <__ieee754_powf+0x1d0>
  a00be8:	a004d7fa 	srli	r2,r20,31
  a00bec:	10bfffc4 	addi	r2,r2,-1
  a00bf0:	15c6b03a 	or	r3,r2,r23
  a00bf4:	d8800215 	stw	r2,8(sp)
  a00bf8:	1800661e 	bne	r3,zero,a00d94 <__ieee754_powf+0x298>
  a00bfc:	980b883a 	mov	r5,r19
  a00c00:	9809883a 	mov	r4,r19
  a00c04:	0a01d280 	call	a01d28 <__subsf3>
  a00c08:	1009883a 	mov	r4,r2
  a00c0c:	100b883a 	mov	r5,r2
  a00c10:	0a01fdc0 	call	a01fdc <__divsf3>
  a00c14:	1039883a 	mov	fp,r2
  a00c18:	00000106 	br	a00c20 <__ieee754_powf+0x124>
  a00c1c:	070fe034 	movhi	fp,16256
  a00c20:	e005883a 	mov	r2,fp
  a00c24:	dfc00f17 	ldw	ra,60(sp)
  a00c28:	df000e17 	ldw	fp,56(sp)
  a00c2c:	ddc00d17 	ldw	r23,52(sp)
  a00c30:	dd800c17 	ldw	r22,48(sp)
  a00c34:	dd400b17 	ldw	r21,44(sp)
  a00c38:	dd000a17 	ldw	r20,40(sp)
  a00c3c:	dcc00917 	ldw	r19,36(sp)
  a00c40:	dc800817 	ldw	r18,32(sp)
  a00c44:	dc400717 	ldw	r17,28(sp)
  a00c48:	dc000617 	ldw	r16,24(sp)
  a00c4c:	dec01004 	addi	sp,sp,64
  a00c50:	f800283a 	ret
  a00c54:	8839883a 	mov	fp,r17
  a00c58:	003ff106 	br	a00c20 <__ieee754_powf+0x124>
  a00c5c:	a03fda16 	blt	r20,zero,a00bc8 <__ieee754_powf+0xcc>
  a00c60:	9809883a 	mov	r4,r19
  a00c64:	dfc00f17 	ldw	ra,60(sp)
  a00c68:	df000e17 	ldw	fp,56(sp)
  a00c6c:	ddc00d17 	ldw	r23,52(sp)
  a00c70:	dd800c17 	ldw	r22,48(sp)
  a00c74:	dd400b17 	ldw	r21,44(sp)
  a00c78:	dd000a17 	ldw	r20,40(sp)
  a00c7c:	dcc00917 	ldw	r19,36(sp)
  a00c80:	dc800817 	ldw	r18,32(sp)
  a00c84:	dc400717 	ldw	r17,28(sp)
  a00c88:	dc000617 	ldw	r16,24(sp)
  a00c8c:	dec01004 	addi	sp,sp,64
  a00c90:	0a016101 	jmpi	a01610 <__ieee754_sqrtf>
  a00c94:	008fe034 	movhi	r2,16256
  a00c98:	88bfee26 	beq	r17,r2,a00c54 <__ieee754_powf+0x158>
  a00c9c:	1440200e 	bge	r2,r17,a00d20 <__ieee754_powf+0x224>
  a00ca0:	903fdf0e 	bge	r18,zero,a00c20 <__ieee754_powf+0x124>
  a00ca4:	0039883a 	mov	fp,zero
  a00ca8:	003fdd06 	br	a00c20 <__ieee754_powf+0x124>
  a00cac:	90002f16 	blt	r18,zero,a00d6c <__ieee754_powf+0x270>
  a00cb0:	9839883a 	mov	fp,r19
  a00cb4:	003fda06 	br	a00c20 <__ieee754_powf+0x124>
  a00cb8:	0092e034 	movhi	r2,19328
  a00cbc:	10bfffc4 	addi	r2,r2,-1
  a00cc0:	14001b0e 	bge	r2,r16,a00d30 <__ieee754_powf+0x234>
  a00cc4:	05c00084 	movi	r23,2
  a00cc8:	003fb706 	br	a00ba8 <__ieee754_powf+0xac>
  a00ccc:	90000916 	blt	r18,zero,a00cf4 <__ieee754_powf+0x1f8>
  a00cd0:	a8000226 	beq	r21,zero,a00cdc <__ieee754_powf+0x1e0>
  a00cd4:	2039883a 	mov	fp,r4
  a00cd8:	003fd106 	br	a00c20 <__ieee754_powf+0x124>
  a00cdc:	00b02034 	movhi	r2,49280
  a00ce0:	8885883a 	add	r2,r17,r2
  a00ce4:	b884b03a 	or	r2,r23,r2
  a00ce8:	1000251e 	bne	r2,zero,a00d80 <__ieee754_powf+0x284>
  a00cec:	200b883a 	mov	r5,r4
  a00cf0:	003fc406 	br	a00c04 <__ieee754_powf+0x108>
  a00cf4:	200b883a 	mov	r5,r4
  a00cf8:	010fe034 	movhi	r4,16256
  a00cfc:	0a01fdc0 	call	a01fdc <__divsf3>
  a00d00:	1009883a 	mov	r4,r2
  a00d04:	a83ff31e 	bne	r21,zero,a00cd4 <__ieee754_powf+0x1d8>
  a00d08:	003ff406 	br	a00cdc <__ieee754_powf+0x1e0>
  a00d0c:	980b883a 	mov	r5,r19
  a00d10:	9809883a 	mov	r4,r19
  a00d14:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00d18:	1039883a 	mov	fp,r2
  a00d1c:	003fc006 	br	a00c20 <__ieee754_powf+0x124>
  a00d20:	903fe00e 	bge	r18,zero,a00ca4 <__ieee754_powf+0x1a8>
  a00d24:	e0a0003c 	xorhi	r2,fp,32768
  a00d28:	1039883a 	mov	fp,r2
  a00d2c:	003fbc06 	br	a00c20 <__ieee754_powf+0x124>
  a00d30:	008fe034 	movhi	r2,16256
  a00d34:	10bfffc4 	addi	r2,r2,-1
  a00d38:	1400060e 	bge	r2,r16,a00d54 <__ieee754_powf+0x258>
  a00d3c:	8007d5fa 	srai	r3,r16,23
  a00d40:	00802584 	movi	r2,150
  a00d44:	10c5c83a 	sub	r2,r2,r3
  a00d48:	8087d83a 	sra	r3,r16,r2
  a00d4c:	1884983a 	sll	r2,r3,r2
  a00d50:	80800226 	beq	r16,r2,a00d5c <__ieee754_powf+0x260>
  a00d54:	002f883a 	mov	r23,zero
  a00d58:	003f9506 	br	a00bb0 <__ieee754_powf+0xb4>
  a00d5c:	18c0004c 	andi	r3,r3,1
  a00d60:	00800084 	movi	r2,2
  a00d64:	10efc83a 	sub	r23,r2,r3
  a00d68:	003f9106 	br	a00bb0 <__ieee754_powf+0xb4>
  a00d6c:	8009883a 	mov	r4,r16
  a00d70:	980b883a 	mov	r5,r19
  a00d74:	0a01fdc0 	call	a01fdc <__divsf3>
  a00d78:	1039883a 	mov	fp,r2
  a00d7c:	003fa806 	br	a00c20 <__ieee754_powf+0x124>
  a00d80:	00800044 	movi	r2,1
  a00d84:	b8bfd31e 	bne	r23,r2,a00cd4 <__ieee754_powf+0x1d8>
  a00d88:	20a0003c 	xorhi	r2,r4,32768
  a00d8c:	1039883a 	mov	fp,r2
  a00d90:	003fa306 	br	a00c20 <__ieee754_powf+0x124>
  a00d94:	00934034 	movhi	r2,19712
  a00d98:	14000a0e 	bge	r2,r16,a00dc4 <__ieee754_powf+0x2c8>
  a00d9c:	008fe034 	movhi	r2,16256
  a00da0:	10bffdc4 	addi	r2,r2,-9
  a00da4:	1441b016 	blt	r2,r17,a01468 <__ieee754_powf+0x96c>
  a00da8:	903fbe0e 	bge	r18,zero,a00ca4 <__ieee754_powf+0x1a8>
  a00dac:	011c52b4 	movhi	r4,29002
  a00db0:	213cb284 	addi	r4,r4,-3382
  a00db4:	200b883a 	mov	r5,r4
  a00db8:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00dbc:	1039883a 	mov	fp,r2
  a00dc0:	003f9706 	br	a00c20 <__ieee754_powf+0x124>
  a00dc4:	00802034 	movhi	r2,128
  a00dc8:	10bfffc4 	addi	r2,r2,-1
  a00dcc:	1441a10e 	bge	r2,r17,a01454 <__ieee754_powf+0x958>
  a00dd0:	0009883a 	mov	r4,zero
  a00dd4:	8805d5fa 	srai	r2,r17,23
  a00dd8:	00c02034 	movhi	r3,128
  a00ddc:	18ffffc4 	addi	r3,r3,-1
  a00de0:	88c6703a 	and	r3,r17,r3
  a00de4:	2089883a 	add	r4,r4,r2
  a00de8:	20bfe044 	addi	r2,r4,-127
  a00dec:	d8800015 	stw	r2,0(sp)
  a00df0:	00800774 	movhi	r2,29
  a00df4:	10b11c44 	addi	r2,r2,-15247
  a00df8:	1c0fe034 	orhi	r16,r3,16256
  a00dfc:	10c1790e 	bge	r2,r3,a013e4 <__ieee754_powf+0x8e8>
  a00e00:	008017b4 	movhi	r2,94
  a00e04:	10acf584 	addi	r2,r2,-19498
  a00e08:	10c17216 	blt	r2,r3,a013d4 <__ieee754_powf+0x8d8>
  a00e0c:	00800934 	movhi	r2,36
  a00e10:	05000044 	movi	r20,1
  a00e14:	d8800115 	stw	r2,4(sp)
  a00e18:	a529883a 	add	r20,r20,r20
  a00e1c:	a529883a 	add	r20,r20,r20
  a00e20:	d0a00204 	addi	r2,gp,-32760
  a00e24:	a085883a 	add	r2,r20,r2
  a00e28:	14800017 	ldw	r18,0(r2)
  a00e2c:	8009883a 	mov	r4,r16
  a00e30:	8023d07a 	srai	r17,r16,1
  a00e34:	900b883a 	mov	r5,r18
  a00e38:	0a01d280 	call	a01d28 <__subsf3>
  a00e3c:	8009883a 	mov	r4,r16
  a00e40:	900b883a 	mov	r5,r18
  a00e44:	1027883a 	mov	r19,r2
  a00e48:	0a01d980 	call	a01d98 <__addsf3>
  a00e4c:	100b883a 	mov	r5,r2
  a00e50:	010fe034 	movhi	r4,16256
  a00e54:	0a01fdc0 	call	a01fdc <__divsf3>
  a00e58:	100b883a 	mov	r5,r2
  a00e5c:	9809883a 	mov	r4,r19
  a00e60:	102b883a 	mov	r21,r2
  a00e64:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00e68:	d8800315 	stw	r2,12(sp)
  a00e6c:	d8c00317 	ldw	r3,12(sp)
  a00e70:	00bc0004 	movi	r2,-4096
  a00e74:	8c480034 	orhi	r17,r17,8192
  a00e78:	10ec703a 	and	r22,r2,r3
  a00e7c:	d8800117 	ldw	r2,4(sp)
  a00e80:	b009883a 	mov	r4,r22
  a00e84:	88a3883a 	add	r17,r17,r2
  a00e88:	880b883a 	mov	r5,r17
  a00e8c:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00e90:	100b883a 	mov	r5,r2
  a00e94:	9809883a 	mov	r4,r19
  a00e98:	0a01d280 	call	a01d28 <__subsf3>
  a00e9c:	8809883a 	mov	r4,r17
  a00ea0:	900b883a 	mov	r5,r18
  a00ea4:	1027883a 	mov	r19,r2
  a00ea8:	0a01d280 	call	a01d28 <__subsf3>
  a00eac:	100b883a 	mov	r5,r2
  a00eb0:	8009883a 	mov	r4,r16
  a00eb4:	0a01d280 	call	a01d28 <__subsf3>
  a00eb8:	100b883a 	mov	r5,r2
  a00ebc:	b009883a 	mov	r4,r22
  a00ec0:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00ec4:	100b883a 	mov	r5,r2
  a00ec8:	9809883a 	mov	r4,r19
  a00ecc:	0a01d280 	call	a01d28 <__subsf3>
  a00ed0:	100b883a 	mov	r5,r2
  a00ed4:	a809883a 	mov	r4,r21
  a00ed8:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00edc:	d9000317 	ldw	r4,12(sp)
  a00ee0:	d8800415 	stw	r2,16(sp)
  a00ee4:	05501034 	movhi	r21,16448
  a00ee8:	200b883a 	mov	r5,r4
  a00eec:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00ef0:	1021883a 	mov	r16,r2
  a00ef4:	1009883a 	mov	r4,r2
  a00ef8:	100b883a 	mov	r5,r2
  a00efc:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00f00:	8009883a 	mov	r4,r16
  a00f04:	014f9534 	movhi	r5,15956
  a00f08:	297c5084 	addi	r5,r5,-3774
  a00f0c:	1023883a 	mov	r17,r2
  a00f10:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00f14:	1009883a 	mov	r4,r2
  a00f18:	014f9b34 	movhi	r5,15980
  a00f1c:	294c9544 	addi	r5,r5,12885
  a00f20:	0a01d980 	call	a01d98 <__addsf3>
  a00f24:	100b883a 	mov	r5,r2
  a00f28:	8009883a 	mov	r4,r16
  a00f2c:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00f30:	1009883a 	mov	r4,r2
  a00f34:	014fa334 	movhi	r5,16012
  a00f38:	2968c144 	addi	r5,r5,-23803
  a00f3c:	0a01d980 	call	a01d98 <__addsf3>
  a00f40:	100b883a 	mov	r5,r2
  a00f44:	8009883a 	mov	r4,r16
  a00f48:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00f4c:	1009883a 	mov	r4,r2
  a00f50:	014faaf4 	movhi	r5,16043
  a00f54:	296aaac4 	addi	r5,r5,-21845
  a00f58:	0a01d980 	call	a01d98 <__addsf3>
  a00f5c:	100b883a 	mov	r5,r2
  a00f60:	8009883a 	mov	r4,r16
  a00f64:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00f68:	1009883a 	mov	r4,r2
  a00f6c:	014fb6f4 	movhi	r5,16091
  a00f70:	295b6dc4 	addi	r5,r5,28087
  a00f74:	0a01d980 	call	a01d98 <__addsf3>
  a00f78:	100b883a 	mov	r5,r2
  a00f7c:	8009883a 	mov	r4,r16
  a00f80:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00f84:	1009883a 	mov	r4,r2
  a00f88:	014fc6b4 	movhi	r5,16154
  a00f8c:	29666684 	addi	r5,r5,-26214
  a00f90:	0a01d980 	call	a01d98 <__addsf3>
  a00f94:	100b883a 	mov	r5,r2
  a00f98:	8809883a 	mov	r4,r17
  a00f9c:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00fa0:	d9000317 	ldw	r4,12(sp)
  a00fa4:	b00b883a 	mov	r5,r22
  a00fa8:	1021883a 	mov	r16,r2
  a00fac:	0a01d980 	call	a01d98 <__addsf3>
  a00fb0:	d9000417 	ldw	r4,16(sp)
  a00fb4:	100b883a 	mov	r5,r2
  a00fb8:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00fbc:	100b883a 	mov	r5,r2
  a00fc0:	8009883a 	mov	r4,r16
  a00fc4:	0a01d980 	call	a01d98 <__addsf3>
  a00fc8:	b009883a 	mov	r4,r22
  a00fcc:	b00b883a 	mov	r5,r22
  a00fd0:	1025883a 	mov	r18,r2
  a00fd4:	0a01dfc0 	call	a01dfc <__mulsf3>
  a00fd8:	1009883a 	mov	r4,r2
  a00fdc:	a80b883a 	mov	r5,r21
  a00fe0:	1027883a 	mov	r19,r2
  a00fe4:	0a01d980 	call	a01d98 <__addsf3>
  a00fe8:	100b883a 	mov	r5,r2
  a00fec:	9009883a 	mov	r4,r18
  a00ff0:	0a01d980 	call	a01d98 <__addsf3>
  a00ff4:	00fc0004 	movi	r3,-4096
  a00ff8:	10e2703a 	and	r17,r2,r3
  a00ffc:	880b883a 	mov	r5,r17
  a01000:	b009883a 	mov	r4,r22
  a01004:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01008:	d9000417 	ldw	r4,16(sp)
  a0100c:	880b883a 	mov	r5,r17
  a01010:	d8800515 	stw	r2,20(sp)
  a01014:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01018:	8809883a 	mov	r4,r17
  a0101c:	a80b883a 	mov	r5,r21
  a01020:	1021883a 	mov	r16,r2
  a01024:	0a01d280 	call	a01d28 <__subsf3>
  a01028:	1009883a 	mov	r4,r2
  a0102c:	980b883a 	mov	r5,r19
  a01030:	0a01d280 	call	a01d28 <__subsf3>
  a01034:	100b883a 	mov	r5,r2
  a01038:	9009883a 	mov	r4,r18
  a0103c:	0a01d280 	call	a01d28 <__subsf3>
  a01040:	d9000317 	ldw	r4,12(sp)
  a01044:	100b883a 	mov	r5,r2
  a01048:	0a01dfc0 	call	a01dfc <__mulsf3>
  a0104c:	100b883a 	mov	r5,r2
  a01050:	8009883a 	mov	r4,r16
  a01054:	0a01d980 	call	a01d98 <__addsf3>
  a01058:	d9000517 	ldw	r4,20(sp)
  a0105c:	100b883a 	mov	r5,r2
  a01060:	1027883a 	mov	r19,r2
  a01064:	0a01d980 	call	a01d98 <__addsf3>
  a01068:	00fc0004 	movi	r3,-4096
  a0106c:	10e2703a 	and	r17,r2,r3
  a01070:	8809883a 	mov	r4,r17
  a01074:	014fddb4 	movhi	r5,16246
  a01078:	294e0004 	addi	r5,r5,14336
  a0107c:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01080:	8809883a 	mov	r4,r17
  a01084:	014da7b4 	movhi	r5,13982
  a01088:	2970e804 	addi	r5,r5,-15456
  a0108c:	102b883a 	mov	r21,r2
  a01090:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01094:	d9400517 	ldw	r5,20(sp)
  a01098:	8809883a 	mov	r4,r17
  a0109c:	1025883a 	mov	r18,r2
  a010a0:	0a01d280 	call	a01d28 <__subsf3>
  a010a4:	100b883a 	mov	r5,r2
  a010a8:	9809883a 	mov	r4,r19
  a010ac:	0a01d280 	call	a01d28 <__subsf3>
  a010b0:	1009883a 	mov	r4,r2
  a010b4:	014fddb4 	movhi	r5,16246
  a010b8:	294e13c4 	addi	r5,r5,14415
  a010bc:	0a01dfc0 	call	a01dfc <__mulsf3>
  a010c0:	100b883a 	mov	r5,r2
  a010c4:	9009883a 	mov	r4,r18
  a010c8:	0a01d980 	call	a01d98 <__addsf3>
  a010cc:	d0e00404 	addi	r3,gp,-32752
  a010d0:	a0c7883a 	add	r3,r20,r3
  a010d4:	19400017 	ldw	r5,0(r3)
  a010d8:	1009883a 	mov	r4,r2
  a010dc:	0a01d980 	call	a01d98 <__addsf3>
  a010e0:	d9000017 	ldw	r4,0(sp)
  a010e4:	1023883a 	mov	r17,r2
  a010e8:	0a023300 	call	a02330 <__floatsisf>
  a010ec:	1021883a 	mov	r16,r2
  a010f0:	d0a00604 	addi	r2,gp,-32744
  a010f4:	a0a9883a 	add	r20,r20,r2
  a010f8:	a4800017 	ldw	r18,0(r20)
  a010fc:	a809883a 	mov	r4,r21
  a01100:	880b883a 	mov	r5,r17
  a01104:	0a01d980 	call	a01d98 <__addsf3>
  a01108:	1009883a 	mov	r4,r2
  a0110c:	900b883a 	mov	r5,r18
  a01110:	0a01d980 	call	a01d98 <__addsf3>
  a01114:	100b883a 	mov	r5,r2
  a01118:	8009883a 	mov	r4,r16
  a0111c:	0a01d980 	call	a01d98 <__addsf3>
  a01120:	00fc0004 	movi	r3,-4096
  a01124:	10c4703a 	and	r2,r2,r3
  a01128:	800b883a 	mov	r5,r16
  a0112c:	1009883a 	mov	r4,r2
  a01130:	1027883a 	mov	r19,r2
  a01134:	0a01d280 	call	a01d28 <__subsf3>
  a01138:	1009883a 	mov	r4,r2
  a0113c:	900b883a 	mov	r5,r18
  a01140:	0a01d280 	call	a01d28 <__subsf3>
  a01144:	1009883a 	mov	r4,r2
  a01148:	a80b883a 	mov	r5,r21
  a0114c:	0a01d280 	call	a01d28 <__subsf3>
  a01150:	100b883a 	mov	r5,r2
  a01154:	8809883a 	mov	r4,r17
  a01158:	0a01d280 	call	a01d28 <__subsf3>
  a0115c:	1021883a 	mov	r16,r2
  a01160:	d8c00217 	ldw	r3,8(sp)
  a01164:	b8bfffc4 	addi	r2,r23,-1
  a01168:	1884b03a 	or	r2,r3,r2
  a0116c:	1000a11e 	bne	r2,zero,a013f4 <__ieee754_powf+0x8f8>
  a01170:	05efe034 	movhi	r23,49024
  a01174:	047c0004 	movi	r17,-4096
  a01178:	8f22703a 	and	r17,r17,fp
  a0117c:	e009883a 	mov	r4,fp
  a01180:	880b883a 	mov	r5,r17
  a01184:	0a01d280 	call	a01d28 <__subsf3>
  a01188:	100b883a 	mov	r5,r2
  a0118c:	9809883a 	mov	r4,r19
  a01190:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01194:	8009883a 	mov	r4,r16
  a01198:	e00b883a 	mov	r5,fp
  a0119c:	1025883a 	mov	r18,r2
  a011a0:	0a01dfc0 	call	a01dfc <__mulsf3>
  a011a4:	100b883a 	mov	r5,r2
  a011a8:	9009883a 	mov	r4,r18
  a011ac:	0a01d980 	call	a01d98 <__addsf3>
  a011b0:	9809883a 	mov	r4,r19
  a011b4:	880b883a 	mov	r5,r17
  a011b8:	1021883a 	mov	r16,r2
  a011bc:	0a01dfc0 	call	a01dfc <__mulsf3>
  a011c0:	100b883a 	mov	r5,r2
  a011c4:	8009883a 	mov	r4,r16
  a011c8:	1027883a 	mov	r19,r2
  a011cc:	0a01d980 	call	a01d98 <__addsf3>
  a011d0:	1023883a 	mov	r17,r2
  a011d4:	1029883a 	mov	r20,r2
  a011d8:	00a00034 	movhi	r2,32768
  a011dc:	10bfffc4 	addi	r2,r2,-1
  a011e0:	88a4703a 	and	r18,r17,r2
  a011e4:	8039883a 	mov	fp,r16
  a011e8:	982b883a 	mov	r21,r19
  a011ec:	8807883a 	mov	r3,r17
  a011f0:	0440a30e 	bge	zero,r17,a01480 <__ieee754_powf+0x984>
  a011f4:	0090c034 	movhi	r2,17152
  a011f8:	14808c16 	blt	r2,r18,a0142c <__ieee754_powf+0x930>
  a011fc:	90807f26 	beq	r18,r2,a013fc <__ieee754_powf+0x900>
  a01200:	008fc034 	movhi	r2,16128
  a01204:	1480a816 	blt	r2,r18,a014a8 <__ieee754_powf+0x9ac>
  a01208:	002d883a 	mov	r22,zero
  a0120c:	0029883a 	mov	r20,zero
  a01210:	047c0004 	movi	r17,-4096
  a01214:	88e2703a 	and	r17,r17,r3
  a01218:	8809883a 	mov	r4,r17
  a0121c:	014fcc74 	movhi	r5,16177
  a01220:	295c8004 	addi	r5,r5,29184
  a01224:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01228:	8809883a 	mov	r4,r17
  a0122c:	a80b883a 	mov	r5,r21
  a01230:	1027883a 	mov	r19,r2
  a01234:	0a01d280 	call	a01d28 <__subsf3>
  a01238:	100b883a 	mov	r5,r2
  a0123c:	e009883a 	mov	r4,fp
  a01240:	0a01d280 	call	a01d28 <__subsf3>
  a01244:	1009883a 	mov	r4,r2
  a01248:	014fcc74 	movhi	r5,16177
  a0124c:	295c8604 	addi	r5,r5,29208
  a01250:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01254:	8809883a 	mov	r4,r17
  a01258:	014d7034 	movhi	r5,13760
  a0125c:	296fa304 	addi	r5,r5,-16756
  a01260:	1025883a 	mov	r18,r2
  a01264:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01268:	100b883a 	mov	r5,r2
  a0126c:	9009883a 	mov	r4,r18
  a01270:	0a01d980 	call	a01d98 <__addsf3>
  a01274:	100b883a 	mov	r5,r2
  a01278:	9809883a 	mov	r4,r19
  a0127c:	1021883a 	mov	r16,r2
  a01280:	0a01d980 	call	a01d98 <__addsf3>
  a01284:	1009883a 	mov	r4,r2
  a01288:	980b883a 	mov	r5,r19
  a0128c:	1025883a 	mov	r18,r2
  a01290:	0a01d280 	call	a01d28 <__subsf3>
  a01294:	100b883a 	mov	r5,r2
  a01298:	8009883a 	mov	r4,r16
  a0129c:	0a01d280 	call	a01d28 <__subsf3>
  a012a0:	9009883a 	mov	r4,r18
  a012a4:	900b883a 	mov	r5,r18
  a012a8:	1027883a 	mov	r19,r2
  a012ac:	0a01dfc0 	call	a01dfc <__mulsf3>
  a012b0:	1009883a 	mov	r4,r2
  a012b4:	014cccb4 	movhi	r5,13106
  a012b8:	296ed304 	addi	r5,r5,-17588
  a012bc:	1021883a 	mov	r16,r2
  a012c0:	0a01dfc0 	call	a01dfc <__mulsf3>
  a012c4:	1009883a 	mov	r4,r2
  a012c8:	014d77b4 	movhi	r5,13790
  a012cc:	297a8384 	addi	r5,r5,-5618
  a012d0:	0a01d280 	call	a01d28 <__subsf3>
  a012d4:	100b883a 	mov	r5,r2
  a012d8:	8009883a 	mov	r4,r16
  a012dc:	0a01dfc0 	call	a01dfc <__mulsf3>
  a012e0:	1009883a 	mov	r4,r2
  a012e4:	014e22f4 	movhi	r5,14475
  a012e8:	296cd544 	addi	r5,r5,-19627
  a012ec:	0a01d980 	call	a01d98 <__addsf3>
  a012f0:	100b883a 	mov	r5,r2
  a012f4:	8009883a 	mov	r4,r16
  a012f8:	0a01dfc0 	call	a01dfc <__mulsf3>
  a012fc:	1009883a 	mov	r4,r2
  a01300:	014ecdb4 	movhi	r5,15158
  a01304:	2942d844 	addi	r5,r5,2913
  a01308:	0a01d280 	call	a01d28 <__subsf3>
  a0130c:	100b883a 	mov	r5,r2
  a01310:	8009883a 	mov	r4,r16
  a01314:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01318:	1009883a 	mov	r4,r2
  a0131c:	014f8af4 	movhi	r5,15915
  a01320:	296aaac4 	addi	r5,r5,-21845
  a01324:	0a01d980 	call	a01d98 <__addsf3>
  a01328:	100b883a 	mov	r5,r2
  a0132c:	8009883a 	mov	r4,r16
  a01330:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01334:	100b883a 	mov	r5,r2
  a01338:	9009883a 	mov	r4,r18
  a0133c:	0a01d280 	call	a01d28 <__subsf3>
  a01340:	1021883a 	mov	r16,r2
  a01344:	9009883a 	mov	r4,r18
  a01348:	100b883a 	mov	r5,r2
  a0134c:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01350:	8009883a 	mov	r4,r16
  a01354:	01500034 	movhi	r5,16384
  a01358:	1023883a 	mov	r17,r2
  a0135c:	0a01d280 	call	a01d28 <__subsf3>
  a01360:	100b883a 	mov	r5,r2
  a01364:	8809883a 	mov	r4,r17
  a01368:	0a01fdc0 	call	a01fdc <__divsf3>
  a0136c:	9009883a 	mov	r4,r18
  a01370:	980b883a 	mov	r5,r19
  a01374:	1021883a 	mov	r16,r2
  a01378:	0a01dfc0 	call	a01dfc <__mulsf3>
  a0137c:	100b883a 	mov	r5,r2
  a01380:	9809883a 	mov	r4,r19
  a01384:	0a01d980 	call	a01d98 <__addsf3>
  a01388:	100b883a 	mov	r5,r2
  a0138c:	8009883a 	mov	r4,r16
  a01390:	0a01d280 	call	a01d28 <__subsf3>
  a01394:	1009883a 	mov	r4,r2
  a01398:	900b883a 	mov	r5,r18
  a0139c:	0a01d280 	call	a01d28 <__subsf3>
  a013a0:	100b883a 	mov	r5,r2
  a013a4:	010fe034 	movhi	r4,16256
  a013a8:	0a01d280 	call	a01d28 <__subsf3>
  a013ac:	a087883a 	add	r3,r20,r2
  a013b0:	1009883a 	mov	r4,r2
  a013b4:	1805d5fa 	srai	r2,r3,23
  a013b8:	0080920e 	bge	zero,r2,a01604 <__ieee754_powf+0xb08>
  a013bc:	1805883a 	mov	r2,r3
  a013c0:	1009883a 	mov	r4,r2
  a013c4:	b80b883a 	mov	r5,r23
  a013c8:	0a01dfc0 	call	a01dfc <__mulsf3>
  a013cc:	1039883a 	mov	fp,r2
  a013d0:	003e1306 	br	a00c20 <__ieee754_powf+0x124>
  a013d4:	00bfe034 	movhi	r2,65408
  a013d8:	213fe084 	addi	r4,r4,-126
  a013dc:	80a1883a 	add	r16,r16,r2
  a013e0:	d9000015 	stw	r4,0(sp)
  a013e4:	00c00134 	movhi	r3,4
  a013e8:	0029883a 	mov	r20,zero
  a013ec:	d8c00115 	stw	r3,4(sp)
  a013f0:	003e8906 	br	a00e18 <__ieee754_powf+0x31c>
  a013f4:	05cfe034 	movhi	r23,16256
  a013f8:	003f5e06 	br	a01174 <__ieee754_powf+0x678>
  a013fc:	8009883a 	mov	r4,r16
  a01400:	014cce74 	movhi	r5,13113
  a01404:	296a8f04 	addi	r5,r5,-21956
  a01408:	0a01d980 	call	a01d98 <__addsf3>
  a0140c:	8809883a 	mov	r4,r17
  a01410:	980b883a 	mov	r5,r19
  a01414:	1021883a 	mov	r16,r2
  a01418:	0a01d280 	call	a01d28 <__subsf3>
  a0141c:	100b883a 	mov	r5,r2
  a01420:	8009883a 	mov	r4,r16
  a01424:	0a021c80 	call	a021c8 <__gtsf2>
  a01428:	00801f0e 	bge	zero,r2,a014a8 <__ieee754_powf+0x9ac>
  a0142c:	041c52b4 	movhi	r16,29002
  a01430:	843cb284 	addi	r16,r16,-3382
  a01434:	b809883a 	mov	r4,r23
  a01438:	800b883a 	mov	r5,r16
  a0143c:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01440:	1009883a 	mov	r4,r2
  a01444:	800b883a 	mov	r5,r16
  a01448:	0a01dfc0 	call	a01dfc <__mulsf3>
  a0144c:	1039883a 	mov	fp,r2
  a01450:	003df306 	br	a00c20 <__ieee754_powf+0x124>
  a01454:	0152e034 	movhi	r5,19328
  a01458:	0a01dfc0 	call	a01dfc <__mulsf3>
  a0145c:	1023883a 	mov	r17,r2
  a01460:	013ffa04 	movi	r4,-24
  a01464:	003e5b06 	br	a00dd4 <__ieee754_powf+0x2d8>
  a01468:	008fe034 	movhi	r2,16256
  a0146c:	108001c4 	addi	r2,r2,7
  a01470:	14402c0e 	bge	r2,r17,a01524 <__ieee754_powf+0xa28>
  a01474:	04be4d16 	blt	zero,r18,a00dac <__ieee754_powf+0x2b0>
  a01478:	0039883a 	mov	fp,zero
  a0147c:	003de806 	br	a00c20 <__ieee754_powf+0x124>
  a01480:	0090c5b4 	movhi	r2,17174
  a01484:	14802416 	blt	r2,r18,a01518 <__ieee754_powf+0xa1c>
  a01488:	90bf5d1e 	bne	r18,r2,a01200 <__ieee754_powf+0x704>
  a0148c:	8809883a 	mov	r4,r17
  a01490:	980b883a 	mov	r5,r19
  a01494:	0a01d280 	call	a01d28 <__subsf3>
  a01498:	100b883a 	mov	r5,r2
  a0149c:	8009883a 	mov	r4,r16
  a014a0:	0a022b80 	call	a022b8 <__lesf2>
  a014a4:	00801c0e 	bge	zero,r2,a01518 <__ieee754_powf+0xa1c>
  a014a8:	9005d5fa 	srai	r2,r18,23
  a014ac:	01002034 	movhi	r4,128
  a014b0:	01402034 	movhi	r5,128
  a014b4:	297fffc4 	addi	r5,r5,-1
  a014b8:	10bfe084 	addi	r2,r2,-126
  a014bc:	2089d83a 	sra	r4,r4,r2
  a014c0:	008005c4 	movi	r2,23
  a014c4:	a109883a 	add	r4,r20,r4
  a014c8:	2006d5fa 	srli	r3,r4,23
  a014cc:	214c703a 	and	r6,r4,r5
  a014d0:	31802034 	orhi	r6,r6,128
  a014d4:	18c03fcc 	andi	r3,r3,255
  a014d8:	18ffe044 	addi	r3,r3,-127
  a014dc:	28cbd83a 	sra	r5,r5,r3
  a014e0:	10c5c83a 	sub	r2,r2,r3
  a014e4:	30add83a 	sra	r22,r6,r2
  a014e8:	014a303a 	nor	r5,zero,r5
  a014ec:	214a703a 	and	r5,r4,r5
  a014f0:	a0004216 	blt	r20,zero,a015fc <__ieee754_powf+0xb00>
  a014f4:	a809883a 	mov	r4,r21
  a014f8:	0a01d280 	call	a01d28 <__subsf3>
  a014fc:	100b883a 	mov	r5,r2
  a01500:	e009883a 	mov	r4,fp
  a01504:	b02895fa 	slli	r20,r22,23
  a01508:	102b883a 	mov	r21,r2
  a0150c:	0a01d980 	call	a01d98 <__addsf3>
  a01510:	1007883a 	mov	r3,r2
  a01514:	003f3e06 	br	a01210 <__ieee754_powf+0x714>
  a01518:	040368b4 	movhi	r16,3490
  a0151c:	84109804 	addi	r16,r16,16992
  a01520:	003fc406 	br	a01434 <__ieee754_powf+0x938>
  a01524:	0a01d280 	call	a01d28 <__subsf3>
  a01528:	1021883a 	mov	r16,r2
  a0152c:	1009883a 	mov	r4,r2
  a01530:	014fee74 	movhi	r5,16313
  a01534:	296a8004 	addi	r5,r5,-22016
  a01538:	0a01dfc0 	call	a01dfc <__mulsf3>
  a0153c:	8009883a 	mov	r4,r16
  a01540:	014dbb74 	movhi	r5,14061
  a01544:	29695c04 	addi	r5,r5,-23184
  a01548:	1023883a 	mov	r17,r2
  a0154c:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01550:	8009883a 	mov	r4,r16
  a01554:	800b883a 	mov	r5,r16
  a01558:	1025883a 	mov	r18,r2
  a0155c:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01560:	8009883a 	mov	r4,r16
  a01564:	016fa034 	movhi	r5,48768
  a01568:	1027883a 	mov	r19,r2
  a0156c:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01570:	1009883a 	mov	r4,r2
  a01574:	014faaf4 	movhi	r5,16043
  a01578:	296aaac4 	addi	r5,r5,-21845
  a0157c:	0a01d980 	call	a01d98 <__addsf3>
  a01580:	100b883a 	mov	r5,r2
  a01584:	8009883a 	mov	r4,r16
  a01588:	0a01dfc0 	call	a01dfc <__mulsf3>
  a0158c:	100b883a 	mov	r5,r2
  a01590:	010fc034 	movhi	r4,16128
  a01594:	0a01d280 	call	a01d28 <__subsf3>
  a01598:	100b883a 	mov	r5,r2
  a0159c:	9809883a 	mov	r4,r19
  a015a0:	0a01dfc0 	call	a01dfc <__mulsf3>
  a015a4:	1009883a 	mov	r4,r2
  a015a8:	016fee74 	movhi	r5,49081
  a015ac:	296a8ec4 	addi	r5,r5,-21957
  a015b0:	0a01dfc0 	call	a01dfc <__mulsf3>
  a015b4:	100b883a 	mov	r5,r2
  a015b8:	9009883a 	mov	r4,r18
  a015bc:	0a01d980 	call	a01d98 <__addsf3>
  a015c0:	100b883a 	mov	r5,r2
  a015c4:	8809883a 	mov	r4,r17
  a015c8:	1021883a 	mov	r16,r2
  a015cc:	0a01d980 	call	a01d98 <__addsf3>
  a015d0:	00fc0004 	movi	r3,-4096
  a015d4:	10c4703a 	and	r2,r2,r3
  a015d8:	1009883a 	mov	r4,r2
  a015dc:	880b883a 	mov	r5,r17
  a015e0:	1027883a 	mov	r19,r2
  a015e4:	0a01d280 	call	a01d28 <__subsf3>
  a015e8:	100b883a 	mov	r5,r2
  a015ec:	8009883a 	mov	r4,r16
  a015f0:	0a01d280 	call	a01d28 <__subsf3>
  a015f4:	1021883a 	mov	r16,r2
  a015f8:	003ed906 	br	a01160 <__ieee754_powf+0x664>
  a015fc:	05adc83a 	sub	r22,zero,r22
  a01600:	003fbc06 	br	a014f4 <__ieee754_powf+0x9f8>
  a01604:	b00b883a 	mov	r5,r22
  a01608:	0a019e00 	call	a019e0 <scalbnf>
  a0160c:	003f6c06 	br	a013c0 <__ieee754_powf+0x8c4>

00a01610 <__ieee754_sqrtf>:
  a01610:	00a00034 	movhi	r2,32768
  a01614:	10bfffc4 	addi	r2,r2,-1
  a01618:	defffe04 	addi	sp,sp,-8
  a0161c:	208c703a 	and	r6,r4,r2
  a01620:	00dfe034 	movhi	r3,32640
  a01624:	18ffffc4 	addi	r3,r3,-1
  a01628:	dc000015 	stw	r16,0(sp)
  a0162c:	dfc00115 	stw	ra,4(sp)
  a01630:	2021883a 	mov	r16,r4
  a01634:	200b883a 	mov	r5,r4
  a01638:	19800a2e 	bgeu	r3,r6,a01664 <__ieee754_sqrtf+0x54>
  a0163c:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01640:	100b883a 	mov	r5,r2
  a01644:	8009883a 	mov	r4,r16
  a01648:	0a01d980 	call	a01d98 <__addsf3>
  a0164c:	1021883a 	mov	r16,r2
  a01650:	8005883a 	mov	r2,r16
  a01654:	dfc00117 	ldw	ra,4(sp)
  a01658:	dc000017 	ldw	r16,0(sp)
  a0165c:	dec00204 	addi	sp,sp,8
  a01660:	f800283a 	ret
  a01664:	303ffa26 	beq	r6,zero,a01650 <__ieee754_sqrtf+0x40>
  a01668:	20003b16 	blt	r4,zero,a01758 <__ieee754_sqrtf+0x148>
  a0166c:	00802034 	movhi	r2,128
  a01670:	10bfffc4 	addi	r2,r2,-1
  a01674:	2007d5fa 	srai	r3,r4,23
  a01678:	11800936 	bltu	r2,r6,a016a0 <__ieee754_sqrtf+0x90>
  a0167c:	2080202c 	andhi	r2,r4,128
  a01680:	10003c1e 	bne	r2,zero,a01774 <__ieee754_sqrtf+0x164>
  a01684:	0009883a 	mov	r4,zero
  a01688:	294b883a 	add	r5,r5,r5
  a0168c:	2880202c 	andhi	r2,r5,128
  a01690:	21000044 	addi	r4,r4,1
  a01694:	103ffc26 	beq	r2,zero,a01688 <__ieee754_sqrtf+0x78>
  a01698:	1905c83a 	sub	r2,r3,r4
  a0169c:	10c00044 	addi	r3,r2,1
  a016a0:	1a7fe044 	addi	r9,r3,-127
  a016a4:	48c0004c 	andi	r3,r9,1
  a016a8:	00802034 	movhi	r2,128
  a016ac:	10bfffc4 	addi	r2,r2,-1
  a016b0:	2884703a 	and	r2,r5,r2
  a016b4:	1807003a 	cmpeq	r3,r3,zero
  a016b8:	10802034 	orhi	r2,r2,128
  a016bc:	18002426 	beq	r3,zero,a01750 <__ieee754_sqrtf+0x140>
  a016c0:	1085883a 	add	r2,r2,r2
  a016c4:	01404034 	movhi	r5,256
  a016c8:	000f883a 	mov	r7,zero
  a016cc:	0007883a 	mov	r3,zero
  a016d0:	000d883a 	mov	r6,zero
  a016d4:	02000644 	movi	r8,25
  a016d8:	3949883a 	add	r4,r7,r5
  a016dc:	31800044 	addi	r6,r6,1
  a016e0:	11000316 	blt	r2,r4,a016f0 <__ieee754_sqrtf+0xe0>
  a016e4:	1105c83a 	sub	r2,r2,r4
  a016e8:	1947883a 	add	r3,r3,r5
  a016ec:	214f883a 	add	r7,r4,r5
  a016f0:	1085883a 	add	r2,r2,r2
  a016f4:	280ad07a 	srli	r5,r5,1
  a016f8:	323ff71e 	bne	r6,r8,a016d8 <__ieee754_sqrtf+0xc8>
  a016fc:	10000b1e 	bne	r2,zero,a0172c <__ieee754_sqrtf+0x11c>
  a01700:	4805d07a 	srai	r2,r9,1
  a01704:	1807d07a 	srai	r3,r3,1
  a01708:	010fc034 	movhi	r4,16128
  a0170c:	100495fa 	slli	r2,r2,23
  a01710:	1907883a 	add	r3,r3,r4
  a01714:	18a1883a 	add	r16,r3,r2
  a01718:	8005883a 	mov	r2,r16
  a0171c:	dfc00117 	ldw	ra,4(sp)
  a01720:	dc000017 	ldw	r16,0(sp)
  a01724:	dec00204 	addi	sp,sp,8
  a01728:	f800283a 	ret
  a0172c:	1880004c 	andi	r2,r3,1
  a01730:	1887883a 	add	r3,r3,r2
  a01734:	4805d07a 	srai	r2,r9,1
  a01738:	1807d07a 	srai	r3,r3,1
  a0173c:	010fc034 	movhi	r4,16128
  a01740:	100495fa 	slli	r2,r2,23
  a01744:	1907883a 	add	r3,r3,r4
  a01748:	18a1883a 	add	r16,r3,r2
  a0174c:	003ff206 	br	a01718 <__ieee754_sqrtf+0x108>
  a01750:	1085883a 	add	r2,r2,r2
  a01754:	003fda06 	br	a016c0 <__ieee754_sqrtf+0xb0>
  a01758:	200b883a 	mov	r5,r4
  a0175c:	0a01d280 	call	a01d28 <__subsf3>
  a01760:	1009883a 	mov	r4,r2
  a01764:	100b883a 	mov	r5,r2
  a01768:	0a01fdc0 	call	a01fdc <__divsf3>
  a0176c:	1021883a 	mov	r16,r2
  a01770:	003fb706 	br	a01650 <__ieee754_sqrtf+0x40>
  a01774:	0009883a 	mov	r4,zero
  a01778:	003fc706 	br	a01698 <__ieee754_sqrtf+0x88>

00a0177c <matherr>:
  a0177c:	0005883a 	mov	r2,zero
  a01780:	f800283a 	ret

00a01784 <rint>:
  a01784:	2015883a 	mov	r10,r4
  a01788:	2809d53a 	srai	r4,r5,20
  a0178c:	defff904 	addi	sp,sp,-28
  a01790:	034004c4 	movi	r13,19
  a01794:	2101ffcc 	andi	r4,r4,2047
  a01798:	227f0044 	addi	r9,r4,-1023
  a0179c:	dc800415 	stw	r18,16(sp)
  a017a0:	dfc00615 	stw	ra,24(sp)
  a017a4:	dcc00515 	stw	r19,20(sp)
  a017a8:	dc400315 	stw	r17,12(sp)
  a017ac:	dc000215 	stw	r16,8(sp)
  a017b0:	2817883a 	mov	r11,r5
  a017b4:	500d883a 	mov	r6,r10
  a017b8:	2824d7fa 	srli	r18,r5,31
  a017bc:	6a403016 	blt	r13,r9,a01880 <rint+0xfc>
  a017c0:	48004916 	blt	r9,zero,a018e8 <rint+0x164>
  a017c4:	00800434 	movhi	r2,16
  a017c8:	10bfffc4 	addi	r2,r2,-1
  a017cc:	1247d83a 	sra	r3,r2,r9
  a017d0:	2809883a 	mov	r4,r5
  a017d4:	1944703a 	and	r2,r3,r5
  a017d8:	5084b03a 	or	r2,r10,r2
  a017dc:	10001f26 	beq	r2,zero,a0185c <rint+0xd8>
  a017e0:	180ad07a 	srli	r5,r3,1
  a017e4:	5944703a 	and	r2,r11,r5
  a017e8:	5084b03a 	or	r2,r10,r2
  a017ec:	10000626 	beq	r2,zero,a01808 <rint+0x84>
  a017f0:	4b406626 	beq	r9,r13,a0198c <rint+0x208>
  a017f4:	00c000b4 	movhi	r3,2
  a017f8:	1a47d83a 	sra	r3,r3,r9
  a017fc:	0144303a 	nor	r2,zero,r5
  a01800:	5884703a 	and	r2,r11,r2
  a01804:	10c8b03a 	or	r4,r2,r3
  a01808:	900690fa 	slli	r3,r18,3
  a0180c:	00802874 	movhi	r2,161
  a01810:	1082ec04 	addi	r2,r2,2992
  a01814:	200f883a 	mov	r7,r4
  a01818:	1887883a 	add	r3,r3,r2
  a0181c:	1c000017 	ldw	r16,0(r3)
  a01820:	1c400117 	ldw	r17,4(r3)
  a01824:	8009883a 	mov	r4,r16
  a01828:	880b883a 	mov	r5,r17
  a0182c:	0a028ac0 	call	a028ac <__adddf3>
  a01830:	d8800015 	stw	r2,0(sp)
  a01834:	d8c00115 	stw	r3,4(sp)
  a01838:	d8800017 	ldw	r2,0(sp)
  a0183c:	d8c00117 	ldw	r3,4(sp)
  a01840:	880f883a 	mov	r7,r17
  a01844:	800d883a 	mov	r6,r16
  a01848:	180b883a 	mov	r5,r3
  a0184c:	1009883a 	mov	r4,r2
  a01850:	0a0282c0 	call	a0282c <__subdf3>
  a01854:	1015883a 	mov	r10,r2
  a01858:	1817883a 	mov	r11,r3
  a0185c:	5005883a 	mov	r2,r10
  a01860:	5807883a 	mov	r3,r11
  a01864:	dfc00617 	ldw	ra,24(sp)
  a01868:	dcc00517 	ldw	r19,20(sp)
  a0186c:	dc800417 	ldw	r18,16(sp)
  a01870:	dc400317 	ldw	r17,12(sp)
  a01874:	dc000217 	ldw	r16,8(sp)
  a01878:	dec00704 	addi	sp,sp,28
  a0187c:	f800283a 	ret
  a01880:	00800cc4 	movi	r2,51
  a01884:	12400f16 	blt	r2,r9,a018c4 <rint+0x140>
  a01888:	213efb44 	addi	r4,r4,-1043
  a0188c:	00bfffc4 	movi	r2,-1
  a01890:	1104d83a 	srl	r2,r2,r4
  a01894:	5086703a 	and	r3,r10,r2
  a01898:	183ff026 	beq	r3,zero,a0185c <rint+0xd8>
  a0189c:	100ad07a 	srli	r5,r2,1
  a018a0:	5144703a 	and	r2,r10,r5
  a018a4:	10000526 	beq	r2,zero,a018bc <rint+0x138>
  a018a8:	00d00034 	movhi	r3,16384
  a018ac:	1907d83a 	sra	r3,r3,r4
  a018b0:	0144303a 	nor	r2,zero,r5
  a018b4:	5084703a 	and	r2,r10,r2
  a018b8:	10ccb03a 	or	r6,r2,r3
  a018bc:	5809883a 	mov	r4,r11
  a018c0:	003fd106 	br	a01808 <rint+0x84>
  a018c4:	00810004 	movi	r2,1024
  a018c8:	48bfe41e 	bne	r9,r2,a0185c <rint+0xd8>
  a018cc:	5009883a 	mov	r4,r10
  a018d0:	500d883a 	mov	r6,r10
  a018d4:	280f883a 	mov	r7,r5
  a018d8:	0a028ac0 	call	a028ac <__adddf3>
  a018dc:	1015883a 	mov	r10,r2
  a018e0:	1817883a 	mov	r11,r3
  a018e4:	003fdd06 	br	a0185c <rint+0xd8>
  a018e8:	04e00034 	movhi	r19,32768
  a018ec:	9cffffc4 	addi	r19,r19,-1
  a018f0:	2cc4703a 	and	r2,r5,r19
  a018f4:	5084b03a 	or	r2,r10,r2
  a018f8:	103fd826 	beq	r2,zero,a0185c <rint+0xd8>
  a018fc:	00c00434 	movhi	r3,16
  a01900:	18ffffc4 	addi	r3,r3,-1
  a01904:	28c6703a 	and	r3,r5,r3
  a01908:	50c6b03a 	or	r3,r10,r3
  a0190c:	00cdc83a 	sub	r6,zero,r3
  a01910:	900a90fa 	slli	r5,r18,3
  a01914:	1986b03a 	or	r3,r3,r6
  a01918:	01002874 	movhi	r4,161
  a0191c:	2102ec04 	addi	r4,r4,2992
  a01920:	1806d33a 	srli	r3,r3,12
  a01924:	290b883a 	add	r5,r5,r4
  a01928:	2c000017 	ldw	r16,0(r5)
  a0192c:	2c400117 	ldw	r17,4(r5)
  a01930:	593fffac 	andhi	r4,r11,65534
  a01934:	18c0022c 	andhi	r3,r3,8
  a01938:	1906b03a 	or	r3,r3,r4
  a0193c:	500d883a 	mov	r6,r10
  a01940:	180f883a 	mov	r7,r3
  a01944:	8009883a 	mov	r4,r16
  a01948:	880b883a 	mov	r5,r17
  a0194c:	0a028ac0 	call	a028ac <__adddf3>
  a01950:	d8800015 	stw	r2,0(sp)
  a01954:	d8c00115 	stw	r3,4(sp)
  a01958:	d8800017 	ldw	r2,0(sp)
  a0195c:	d8c00117 	ldw	r3,4(sp)
  a01960:	880f883a 	mov	r7,r17
  a01964:	800d883a 	mov	r6,r16
  a01968:	180b883a 	mov	r5,r3
  a0196c:	1009883a 	mov	r4,r2
  a01970:	0a0282c0 	call	a0282c <__subdf3>
  a01974:	901297fa 	slli	r9,r18,31
  a01978:	98d0703a 	and	r8,r19,r3
  a0197c:	1015883a 	mov	r10,r2
  a01980:	4250b03a 	or	r8,r8,r9
  a01984:	4017883a 	mov	r11,r8
  a01988:	003fb406 	br	a0185c <rint+0xd8>
  a0198c:	01900034 	movhi	r6,16384
  a01990:	003f9d06 	br	a01808 <rint+0x84>

00a01994 <fabsf>:
  a01994:	00a00034 	movhi	r2,32768
  a01998:	10bfffc4 	addi	r2,r2,-1
  a0199c:	2084703a 	and	r2,r4,r2
  a019a0:	f800283a 	ret

00a019a4 <finitef>:
  a019a4:	00a00034 	movhi	r2,32768
  a019a8:	10bfffc4 	addi	r2,r2,-1
  a019ac:	2088703a 	and	r4,r4,r2
  a019b0:	009fe034 	movhi	r2,32640
  a019b4:	10bfffc4 	addi	r2,r2,-1
  a019b8:	1104403a 	cmpge	r2,r2,r4
  a019bc:	f800283a 	ret

00a019c0 <isnanf>:
  a019c0:	00a00034 	movhi	r2,32768
  a019c4:	10bfffc4 	addi	r2,r2,-1
  a019c8:	2088703a 	and	r4,r4,r2
  a019cc:	009fe034 	movhi	r2,32640
  a019d0:	1104803a 	cmplt	r2,r2,r4
  a019d4:	f800283a 	ret

00a019d8 <nanf>:
  a019d8:	009ff034 	movhi	r2,32704
  a019dc:	f800283a 	ret

00a019e0 <scalbnf>:
  a019e0:	00a00034 	movhi	r2,32768
  a019e4:	10bfffc4 	addi	r2,r2,-1
  a019e8:	defffe04 	addi	sp,sp,-8
  a019ec:	2086703a 	and	r3,r4,r2
  a019f0:	dc000015 	stw	r16,0(sp)
  a019f4:	dfc00115 	stw	ra,4(sp)
  a019f8:	200d883a 	mov	r6,r4
  a019fc:	200f883a 	mov	r7,r4
  a01a00:	2821883a 	mov	r16,r5
  a01a04:	18001a26 	beq	r3,zero,a01a70 <scalbnf+0x90>
  a01a08:	009fe034 	movhi	r2,32640
  a01a0c:	10bfffc4 	addi	r2,r2,-1
  a01a10:	10c01c36 	bltu	r2,r3,a01a84 <scalbnf+0xa4>
  a01a14:	00802034 	movhi	r2,128
  a01a18:	10bfffc4 	addi	r2,r2,-1
  a01a1c:	10c02136 	bltu	r2,r3,a01aa4 <scalbnf+0xc4>
  a01a20:	01530034 	movhi	r5,19456
  a01a24:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01a28:	1009883a 	mov	r4,r2
  a01a2c:	100d883a 	mov	r6,r2
  a01a30:	00bffff4 	movhi	r2,65535
  a01a34:	108f2c04 	addi	r2,r2,15536
  a01a38:	80802616 	blt	r16,r2,a01ad4 <scalbnf+0xf4>
  a01a3c:	209fe02c 	andhi	r2,r4,32640
  a01a40:	1005d5fa 	srai	r2,r2,23
  a01a44:	200f883a 	mov	r7,r4
  a01a48:	10bff9c4 	addi	r2,r2,-25
  a01a4c:	1407883a 	add	r3,r2,r16
  a01a50:	00803f84 	movi	r2,254
  a01a54:	10c01516 	blt	r2,r3,a01aac <scalbnf+0xcc>
  a01a58:	00c0230e 	bge	zero,r3,a01ae8 <scalbnf+0x108>
  a01a5c:	180695fa 	slli	r3,r3,23
  a01a60:	00a02034 	movhi	r2,32896
  a01a64:	10bfffc4 	addi	r2,r2,-1
  a01a68:	3884703a 	and	r2,r7,r2
  a01a6c:	10ccb03a 	or	r6,r2,r3
  a01a70:	3005883a 	mov	r2,r6
  a01a74:	dfc00117 	ldw	ra,4(sp)
  a01a78:	dc000017 	ldw	r16,0(sp)
  a01a7c:	dec00204 	addi	sp,sp,8
  a01a80:	f800283a 	ret
  a01a84:	200b883a 	mov	r5,r4
  a01a88:	0a01d980 	call	a01d98 <__addsf3>
  a01a8c:	100d883a 	mov	r6,r2
  a01a90:	3005883a 	mov	r2,r6
  a01a94:	dfc00117 	ldw	ra,4(sp)
  a01a98:	dc000017 	ldw	r16,0(sp)
  a01a9c:	dec00204 	addi	sp,sp,8
  a01aa0:	f800283a 	ret
  a01aa4:	1804d5fa 	srli	r2,r3,23
  a01aa8:	003fe806 	br	a01a4c <scalbnf+0x6c>
  a01aac:	041c52b4 	movhi	r16,29002
  a01ab0:	843cb284 	addi	r16,r16,-3382
  a01ab4:	300b883a 	mov	r5,r6
  a01ab8:	8009883a 	mov	r4,r16
  a01abc:	0a01b2c0 	call	a01b2c <copysignf>
  a01ac0:	1009883a 	mov	r4,r2
  a01ac4:	800b883a 	mov	r5,r16
  a01ac8:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01acc:	100d883a 	mov	r6,r2
  a01ad0:	003fe706 	br	a01a70 <scalbnf+0x90>
  a01ad4:	014368b4 	movhi	r5,3490
  a01ad8:	29509804 	addi	r5,r5,16992
  a01adc:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01ae0:	100d883a 	mov	r6,r2
  a01ae4:	003fe206 	br	a01a70 <scalbnf+0x90>
  a01ae8:	00bffa84 	movi	r2,-22
  a01aec:	1880050e 	bge	r3,r2,a01b04 <scalbnf+0x124>
  a01af0:	00b0d414 	movui	r2,50000
  a01af4:	143fed16 	blt	r2,r16,a01aac <scalbnf+0xcc>
  a01af8:	040368b4 	movhi	r16,3490
  a01afc:	84109804 	addi	r16,r16,16992
  a01b00:	003fec06 	br	a01ab4 <scalbnf+0xd4>
  a01b04:	18800644 	addi	r2,r3,25
  a01b08:	100495fa 	slli	r2,r2,23
  a01b0c:	01202034 	movhi	r4,32896
  a01b10:	213fffc4 	addi	r4,r4,-1
  a01b14:	3908703a 	and	r4,r7,r4
  a01b18:	2088b03a 	or	r4,r4,r2
  a01b1c:	014cc034 	movhi	r5,13056
  a01b20:	0a01dfc0 	call	a01dfc <__mulsf3>
  a01b24:	100d883a 	mov	r6,r2
  a01b28:	003fd106 	br	a01a70 <scalbnf+0x90>

00a01b2c <copysignf>:
  a01b2c:	00a00034 	movhi	r2,32768
  a01b30:	10bfffc4 	addi	r2,r2,-1
  a01b34:	2088703a 	and	r4,r4,r2
  a01b38:	28a0002c 	andhi	r2,r5,32768
  a01b3c:	2084b03a 	or	r2,r4,r2
  a01b40:	f800283a 	ret

00a01b44 <_fpadd_parts>:
  a01b44:	21c00017 	ldw	r7,0(r4)
  a01b48:	02000044 	movi	r8,1
  a01b4c:	41c0332e 	bgeu	r8,r7,a01c1c <_fpadd_parts+0xd8>
  a01b50:	28800017 	ldw	r2,0(r5)
  a01b54:	4080462e 	bgeu	r8,r2,a01c70 <_fpadd_parts+0x12c>
  a01b58:	00c00104 	movi	r3,4
  a01b5c:	38c06b26 	beq	r7,r3,a01d0c <_fpadd_parts+0x1c8>
  a01b60:	10c04326 	beq	r2,r3,a01c70 <_fpadd_parts+0x12c>
  a01b64:	00c00084 	movi	r3,2
  a01b68:	10c02e26 	beq	r2,r3,a01c24 <_fpadd_parts+0xe0>
  a01b6c:	38c04026 	beq	r7,r3,a01c70 <_fpadd_parts+0x12c>
  a01b70:	22800217 	ldw	r10,8(r4)
  a01b74:	28c00217 	ldw	r3,8(r5)
  a01b78:	23000317 	ldw	r12,12(r4)
  a01b7c:	2a400317 	ldw	r9,12(r5)
  a01b80:	50cfc83a 	sub	r7,r10,r3
  a01b84:	3817883a 	mov	r11,r7
  a01b88:	38004f16 	blt	r7,zero,a01cc8 <_fpadd_parts+0x184>
  a01b8c:	008007c4 	movi	r2,31
  a01b90:	11c03316 	blt	r2,r7,a01c60 <_fpadd_parts+0x11c>
  a01b94:	02c0540e 	bge	zero,r11,a01ce8 <_fpadd_parts+0x1a4>
  a01b98:	41c4983a 	sll	r2,r8,r7
  a01b9c:	49c6d83a 	srl	r3,r9,r7
  a01ba0:	10bfffc4 	addi	r2,r2,-1
  a01ba4:	4884703a 	and	r2,r9,r2
  a01ba8:	1004c03a 	cmpne	r2,r2,zero
  a01bac:	1892b03a 	or	r9,r3,r2
  a01bb0:	20c00117 	ldw	r3,4(r4)
  a01bb4:	28800117 	ldw	r2,4(r5)
  a01bb8:	18803c26 	beq	r3,r2,a01cac <_fpadd_parts+0x168>
  a01bbc:	18002f26 	beq	r3,zero,a01c7c <_fpadd_parts+0x138>
  a01bc0:	4b05c83a 	sub	r2,r9,r12
  a01bc4:	10004216 	blt	r2,zero,a01cd0 <_fpadd_parts+0x18c>
  a01bc8:	32800215 	stw	r10,8(r6)
  a01bcc:	30800315 	stw	r2,12(r6)
  a01bd0:	30000115 	stw	zero,4(r6)
  a01bd4:	31000317 	ldw	r4,12(r6)
  a01bd8:	01d00034 	movhi	r7,16384
  a01bdc:	39ffff84 	addi	r7,r7,-2
  a01be0:	20bfffc4 	addi	r2,r4,-1
  a01be4:	2007883a 	mov	r3,r4
  a01be8:	38800836 	bltu	r7,r2,a01c0c <_fpadd_parts+0xc8>
  a01bec:	31400217 	ldw	r5,8(r6)
  a01bf0:	18c9883a 	add	r4,r3,r3
  a01bf4:	20bfffc4 	addi	r2,r4,-1
  a01bf8:	297fffc4 	addi	r5,r5,-1
  a01bfc:	2007883a 	mov	r3,r4
  a01c00:	38bffb2e 	bgeu	r7,r2,a01bf0 <_fpadd_parts+0xac>
  a01c04:	31400215 	stw	r5,8(r6)
  a01c08:	31000315 	stw	r4,12(r6)
  a01c0c:	008000c4 	movi	r2,3
  a01c10:	30800015 	stw	r2,0(r6)
  a01c14:	20001b16 	blt	r4,zero,a01c84 <_fpadd_parts+0x140>
  a01c18:	3009883a 	mov	r4,r6
  a01c1c:	2005883a 	mov	r2,r4
  a01c20:	f800283a 	ret
  a01c24:	38fffd1e 	bne	r7,r3,a01c1c <_fpadd_parts+0xd8>
  a01c28:	31c00015 	stw	r7,0(r6)
  a01c2c:	20800117 	ldw	r2,4(r4)
  a01c30:	30800115 	stw	r2,4(r6)
  a01c34:	20c00217 	ldw	r3,8(r4)
  a01c38:	30c00215 	stw	r3,8(r6)
  a01c3c:	20800317 	ldw	r2,12(r4)
  a01c40:	30800315 	stw	r2,12(r6)
  a01c44:	20c00117 	ldw	r3,4(r4)
  a01c48:	28800117 	ldw	r2,4(r5)
  a01c4c:	3009883a 	mov	r4,r6
  a01c50:	1886703a 	and	r3,r3,r2
  a01c54:	2005883a 	mov	r2,r4
  a01c58:	30c00115 	stw	r3,4(r6)
  a01c5c:	f800283a 	ret
  a01c60:	1a801716 	blt	r3,r10,a01cc0 <_fpadd_parts+0x17c>
  a01c64:	1815883a 	mov	r10,r3
  a01c68:	0019883a 	mov	r12,zero
  a01c6c:	003fd006 	br	a01bb0 <_fpadd_parts+0x6c>
  a01c70:	2809883a 	mov	r4,r5
  a01c74:	2005883a 	mov	r2,r4
  a01c78:	f800283a 	ret
  a01c7c:	6245c83a 	sub	r2,r12,r9
  a01c80:	003fd006 	br	a01bc4 <_fpadd_parts+0x80>
  a01c84:	30800217 	ldw	r2,8(r6)
  a01c88:	2006d07a 	srli	r3,r4,1
  a01c8c:	2100004c 	andi	r4,r4,1
  a01c90:	10800044 	addi	r2,r2,1
  a01c94:	1906b03a 	or	r3,r3,r4
  a01c98:	3009883a 	mov	r4,r6
  a01c9c:	30800215 	stw	r2,8(r6)
  a01ca0:	2005883a 	mov	r2,r4
  a01ca4:	30c00315 	stw	r3,12(r6)
  a01ca8:	f800283a 	ret
  a01cac:	4b09883a 	add	r4,r9,r12
  a01cb0:	30c00115 	stw	r3,4(r6)
  a01cb4:	32800215 	stw	r10,8(r6)
  a01cb8:	31000315 	stw	r4,12(r6)
  a01cbc:	003fd306 	br	a01c0c <_fpadd_parts+0xc8>
  a01cc0:	0013883a 	mov	r9,zero
  a01cc4:	003fba06 	br	a01bb0 <_fpadd_parts+0x6c>
  a01cc8:	01cfc83a 	sub	r7,zero,r7
  a01ccc:	003faf06 	br	a01b8c <_fpadd_parts+0x48>
  a01cd0:	0089c83a 	sub	r4,zero,r2
  a01cd4:	00800044 	movi	r2,1
  a01cd8:	30800115 	stw	r2,4(r6)
  a01cdc:	32800215 	stw	r10,8(r6)
  a01ce0:	31000315 	stw	r4,12(r6)
  a01ce4:	003fbb06 	br	a01bd4 <_fpadd_parts+0x90>
  a01ce8:	583fb126 	beq	r11,zero,a01bb0 <_fpadd_parts+0x6c>
  a01cec:	41c4983a 	sll	r2,r8,r7
  a01cf0:	61c6d83a 	srl	r3,r12,r7
  a01cf4:	51d5883a 	add	r10,r10,r7
  a01cf8:	10bfffc4 	addi	r2,r2,-1
  a01cfc:	6084703a 	and	r2,r12,r2
  a01d00:	1004c03a 	cmpne	r2,r2,zero
  a01d04:	1898b03a 	or	r12,r3,r2
  a01d08:	003fa906 	br	a01bb0 <_fpadd_parts+0x6c>
  a01d0c:	11ffc31e 	bne	r2,r7,a01c1c <_fpadd_parts+0xd8>
  a01d10:	28c00117 	ldw	r3,4(r5)
  a01d14:	20800117 	ldw	r2,4(r4)
  a01d18:	10ffc026 	beq	r2,r3,a01c1c <_fpadd_parts+0xd8>
  a01d1c:	01002874 	movhi	r4,161
  a01d20:	2102f004 	addi	r4,r4,3008
  a01d24:	003fbd06 	br	a01c1c <_fpadd_parts+0xd8>

00a01d28 <__subsf3>:
  a01d28:	deffef04 	addi	sp,sp,-68
  a01d2c:	dcc00f15 	stw	r19,60(sp)
  a01d30:	dcc00204 	addi	r19,sp,8
  a01d34:	dc400e15 	stw	r17,56(sp)
  a01d38:	d9000015 	stw	r4,0(sp)
  a01d3c:	d9400115 	stw	r5,4(sp)
  a01d40:	d809883a 	mov	r4,sp
  a01d44:	980b883a 	mov	r5,r19
  a01d48:	dc400604 	addi	r17,sp,24
  a01d4c:	dfc01015 	stw	ra,64(sp)
  a01d50:	0a02f240 	call	a02f24 <__unpack_f>
  a01d54:	d9000104 	addi	r4,sp,4
  a01d58:	880b883a 	mov	r5,r17
  a01d5c:	0a02f240 	call	a02f24 <__unpack_f>
  a01d60:	d8800717 	ldw	r2,28(sp)
  a01d64:	9809883a 	mov	r4,r19
  a01d68:	880b883a 	mov	r5,r17
  a01d6c:	d9800a04 	addi	r6,sp,40
  a01d70:	1080005c 	xori	r2,r2,1
  a01d74:	d8800715 	stw	r2,28(sp)
  a01d78:	0a01b440 	call	a01b44 <_fpadd_parts>
  a01d7c:	1009883a 	mov	r4,r2
  a01d80:	0a02dc40 	call	a02dc4 <__pack_f>
  a01d84:	dfc01017 	ldw	ra,64(sp)
  a01d88:	dcc00f17 	ldw	r19,60(sp)
  a01d8c:	dc400e17 	ldw	r17,56(sp)
  a01d90:	dec01104 	addi	sp,sp,68
  a01d94:	f800283a 	ret

00a01d98 <__addsf3>:
  a01d98:	deffef04 	addi	sp,sp,-68
  a01d9c:	dcc00f15 	stw	r19,60(sp)
  a01da0:	dcc00204 	addi	r19,sp,8
  a01da4:	dc400e15 	stw	r17,56(sp)
  a01da8:	d9000015 	stw	r4,0(sp)
  a01dac:	d9400115 	stw	r5,4(sp)
  a01db0:	d809883a 	mov	r4,sp
  a01db4:	980b883a 	mov	r5,r19
  a01db8:	dc400604 	addi	r17,sp,24
  a01dbc:	dfc01015 	stw	ra,64(sp)
  a01dc0:	0a02f240 	call	a02f24 <__unpack_f>
  a01dc4:	d9000104 	addi	r4,sp,4
  a01dc8:	880b883a 	mov	r5,r17
  a01dcc:	0a02f240 	call	a02f24 <__unpack_f>
  a01dd0:	d9800a04 	addi	r6,sp,40
  a01dd4:	9809883a 	mov	r4,r19
  a01dd8:	880b883a 	mov	r5,r17
  a01ddc:	0a01b440 	call	a01b44 <_fpadd_parts>
  a01de0:	1009883a 	mov	r4,r2
  a01de4:	0a02dc40 	call	a02dc4 <__pack_f>
  a01de8:	dfc01017 	ldw	ra,64(sp)
  a01dec:	dcc00f17 	ldw	r19,60(sp)
  a01df0:	dc400e17 	ldw	r17,56(sp)
  a01df4:	dec01104 	addi	sp,sp,68
  a01df8:	f800283a 	ret

00a01dfc <__mulsf3>:
  a01dfc:	deffef04 	addi	sp,sp,-68
  a01e00:	dc400f15 	stw	r17,60(sp)
  a01e04:	dc400204 	addi	r17,sp,8
  a01e08:	dc000e15 	stw	r16,56(sp)
  a01e0c:	d9000015 	stw	r4,0(sp)
  a01e10:	d9400115 	stw	r5,4(sp)
  a01e14:	d809883a 	mov	r4,sp
  a01e18:	880b883a 	mov	r5,r17
  a01e1c:	dc000604 	addi	r16,sp,24
  a01e20:	dfc01015 	stw	ra,64(sp)
  a01e24:	0a02f240 	call	a02f24 <__unpack_f>
  a01e28:	d9000104 	addi	r4,sp,4
  a01e2c:	800b883a 	mov	r5,r16
  a01e30:	0a02f240 	call	a02f24 <__unpack_f>
  a01e34:	d9000217 	ldw	r4,8(sp)
  a01e38:	00800044 	movi	r2,1
  a01e3c:	01400104 	movi	r5,4
  a01e40:	1100142e 	bgeu	r2,r4,a01e94 <__mulsf3+0x98>
  a01e44:	d8c00617 	ldw	r3,24(sp)
  a01e48:	10c0052e 	bgeu	r2,r3,a01e60 <__mulsf3+0x64>
  a01e4c:	21400f26 	beq	r4,r5,a01e8c <__mulsf3+0x90>
  a01e50:	19405d26 	beq	r3,r5,a01fc8 <__mulsf3+0x1cc>
  a01e54:	00800084 	movi	r2,2
  a01e58:	20800e26 	beq	r4,r2,a01e94 <__mulsf3+0x98>
  a01e5c:	1880181e 	bne	r3,r2,a01ec0 <__mulsf3+0xc4>
  a01e60:	d8c00717 	ldw	r3,28(sp)
  a01e64:	d8800317 	ldw	r2,12(sp)
  a01e68:	8009883a 	mov	r4,r16
  a01e6c:	10c4c03a 	cmpne	r2,r2,r3
  a01e70:	d8800715 	stw	r2,28(sp)
  a01e74:	0a02dc40 	call	a02dc4 <__pack_f>
  a01e78:	dfc01017 	ldw	ra,64(sp)
  a01e7c:	dc400f17 	ldw	r17,60(sp)
  a01e80:	dc000e17 	ldw	r16,56(sp)
  a01e84:	dec01104 	addi	sp,sp,68
  a01e88:	f800283a 	ret
  a01e8c:	00800084 	movi	r2,2
  a01e90:	18804f26 	beq	r3,r2,a01fd0 <__mulsf3+0x1d4>
  a01e94:	d8800317 	ldw	r2,12(sp)
  a01e98:	d8c00717 	ldw	r3,28(sp)
  a01e9c:	8809883a 	mov	r4,r17
  a01ea0:	10c4c03a 	cmpne	r2,r2,r3
  a01ea4:	d8800315 	stw	r2,12(sp)
  a01ea8:	0a02dc40 	call	a02dc4 <__pack_f>
  a01eac:	dfc01017 	ldw	ra,64(sp)
  a01eb0:	dc400f17 	ldw	r17,60(sp)
  a01eb4:	dc000e17 	ldw	r16,56(sp)
  a01eb8:	dec01104 	addi	sp,sp,68
  a01ebc:	f800283a 	ret
  a01ec0:	d8800517 	ldw	r2,20(sp)
  a01ec4:	da000917 	ldw	r8,36(sp)
  a01ec8:	0013883a 	mov	r9,zero
  a01ecc:	0007883a 	mov	r3,zero
  a01ed0:	480f883a 	mov	r7,r9
  a01ed4:	180b883a 	mov	r5,r3
  a01ed8:	400d883a 	mov	r6,r8
  a01edc:	1009883a 	mov	r4,r2
  a01ee0:	0a02cac0 	call	a02cac <__muldi3>
  a01ee4:	da800417 	ldw	r10,16(sp)
  a01ee8:	d9800817 	ldw	r6,32(sp)
  a01eec:	da400317 	ldw	r9,12(sp)
  a01ef0:	52800084 	addi	r10,r10,2
  a01ef4:	3295883a 	add	r10,r6,r10
  a01ef8:	d9800717 	ldw	r6,28(sp)
  a01efc:	180b883a 	mov	r5,r3
  a01f00:	180f883a 	mov	r7,r3
  a01f04:	4992c03a 	cmpne	r9,r9,r6
  a01f08:	da400b15 	stw	r9,44(sp)
  a01f0c:	1007883a 	mov	r3,r2
  a01f10:	da800c15 	stw	r10,48(sp)
  a01f14:	2800070e 	bge	r5,zero,a01f34 <__mulsf3+0x138>
  a01f18:	2880004c 	andi	r2,r5,1
  a01f1c:	1005003a 	cmpeq	r2,r2,zero
  a01f20:	500d883a 	mov	r6,r10
  a01f24:	10001e26 	beq	r2,zero,a01fa0 <__mulsf3+0x1a4>
  a01f28:	380ed07a 	srli	r7,r7,1
  a01f2c:	31800044 	addi	r6,r6,1
  a01f30:	d9800c15 	stw	r6,48(sp)
  a01f34:	01100034 	movhi	r4,16384
  a01f38:	213fffc4 	addi	r4,r4,-1
  a01f3c:	21c00b36 	bltu	r4,r7,a01f6c <__mulsf3+0x170>
  a01f40:	d8800c17 	ldw	r2,48(sp)
  a01f44:	00000206 	br	a01f50 <__mulsf3+0x154>
  a01f48:	18c7883a 	add	r3,r3,r3
  a01f4c:	21c00636 	bltu	r4,r7,a01f68 <__mulsf3+0x16c>
  a01f50:	10bfffc4 	addi	r2,r2,-1
  a01f54:	39cf883a 	add	r7,r7,r7
  a01f58:	183ffb0e 	bge	r3,zero,a01f48 <__mulsf3+0x14c>
  a01f5c:	39c00054 	ori	r7,r7,1
  a01f60:	18c7883a 	add	r3,r3,r3
  a01f64:	21fffa2e 	bgeu	r4,r7,a01f50 <__mulsf3+0x154>
  a01f68:	d8800c15 	stw	r2,48(sp)
  a01f6c:	39001fcc 	andi	r4,r7,127
  a01f70:	00801004 	movi	r2,64
  a01f74:	20800d26 	beq	r4,r2,a01fac <__mulsf3+0x1b0>
  a01f78:	008000c4 	movi	r2,3
  a01f7c:	d9000a04 	addi	r4,sp,40
  a01f80:	d9c00d15 	stw	r7,52(sp)
  a01f84:	d8800a15 	stw	r2,40(sp)
  a01f88:	0a02dc40 	call	a02dc4 <__pack_f>
  a01f8c:	dfc01017 	ldw	ra,64(sp)
  a01f90:	dc400f17 	ldw	r17,60(sp)
  a01f94:	dc000e17 	ldw	r16,56(sp)
  a01f98:	dec01104 	addi	sp,sp,68
  a01f9c:	f800283a 	ret
  a01fa0:	1804d07a 	srli	r2,r3,1
  a01fa4:	10e00034 	orhi	r3,r2,32768
  a01fa8:	003fdf06 	br	a01f28 <__mulsf3+0x12c>
  a01fac:	3880200c 	andi	r2,r7,128
  a01fb0:	103ff11e 	bne	r2,zero,a01f78 <__mulsf3+0x17c>
  a01fb4:	183ff026 	beq	r3,zero,a01f78 <__mulsf3+0x17c>
  a01fb8:	3907883a 	add	r3,r7,r4
  a01fbc:	00bfe004 	movi	r2,-128
  a01fc0:	188e703a 	and	r7,r3,r2
  a01fc4:	003fec06 	br	a01f78 <__mulsf3+0x17c>
  a01fc8:	00800084 	movi	r2,2
  a01fcc:	20bfa41e 	bne	r4,r2,a01e60 <__mulsf3+0x64>
  a01fd0:	01002874 	movhi	r4,161
  a01fd4:	2102f004 	addi	r4,r4,3008
  a01fd8:	003fb306 	br	a01ea8 <__mulsf3+0xac>

00a01fdc <__divsf3>:
  a01fdc:	defff304 	addi	sp,sp,-52
  a01fe0:	dc400b15 	stw	r17,44(sp)
  a01fe4:	dc400204 	addi	r17,sp,8
  a01fe8:	dc000a15 	stw	r16,40(sp)
  a01fec:	d9000015 	stw	r4,0(sp)
  a01ff0:	d9400115 	stw	r5,4(sp)
  a01ff4:	d809883a 	mov	r4,sp
  a01ff8:	880b883a 	mov	r5,r17
  a01ffc:	dc000604 	addi	r16,sp,24
  a02000:	dfc00c15 	stw	ra,48(sp)
  a02004:	0a02f240 	call	a02f24 <__unpack_f>
  a02008:	d9000104 	addi	r4,sp,4
  a0200c:	800b883a 	mov	r5,r16
  a02010:	0a02f240 	call	a02f24 <__unpack_f>
  a02014:	d9000217 	ldw	r4,8(sp)
  a02018:	00800044 	movi	r2,1
  a0201c:	01800104 	movi	r6,4
  a02020:	11000a2e 	bgeu	r2,r4,a0204c <__divsf3+0x70>
  a02024:	d9400617 	ldw	r5,24(sp)
  a02028:	1140432e 	bgeu	r2,r5,a02138 <__divsf3+0x15c>
  a0202c:	d8800317 	ldw	r2,12(sp)
  a02030:	d8c00717 	ldw	r3,28(sp)
  a02034:	10c4f03a 	xor	r2,r2,r3
  a02038:	d8800315 	stw	r2,12(sp)
  a0203c:	21800226 	beq	r4,r6,a02048 <__divsf3+0x6c>
  a02040:	00800084 	movi	r2,2
  a02044:	2080101e 	bne	r4,r2,a02088 <__divsf3+0xac>
  a02048:	29000726 	beq	r5,r4,a02068 <__divsf3+0x8c>
  a0204c:	8809883a 	mov	r4,r17
  a02050:	0a02dc40 	call	a02dc4 <__pack_f>
  a02054:	dfc00c17 	ldw	ra,48(sp)
  a02058:	dc400b17 	ldw	r17,44(sp)
  a0205c:	dc000a17 	ldw	r16,40(sp)
  a02060:	dec00d04 	addi	sp,sp,52
  a02064:	f800283a 	ret
  a02068:	01002874 	movhi	r4,161
  a0206c:	2102f004 	addi	r4,r4,3008
  a02070:	0a02dc40 	call	a02dc4 <__pack_f>
  a02074:	dfc00c17 	ldw	ra,48(sp)
  a02078:	dc400b17 	ldw	r17,44(sp)
  a0207c:	dc000a17 	ldw	r16,40(sp)
  a02080:	dec00d04 	addi	sp,sp,52
  a02084:	f800283a 	ret
  a02088:	29802d26 	beq	r5,r6,a02140 <__divsf3+0x164>
  a0208c:	28801a26 	beq	r5,r2,a020f8 <__divsf3+0x11c>
  a02090:	d8c00417 	ldw	r3,16(sp)
  a02094:	d8800817 	ldw	r2,32(sp)
  a02098:	d9000517 	ldw	r4,20(sp)
  a0209c:	d9800917 	ldw	r6,36(sp)
  a020a0:	1885c83a 	sub	r2,r3,r2
  a020a4:	d8800415 	stw	r2,16(sp)
  a020a8:	2180032e 	bgeu	r4,r6,a020b8 <__divsf3+0xdc>
  a020ac:	10bfffc4 	addi	r2,r2,-1
  a020b0:	d8800415 	stw	r2,16(sp)
  a020b4:	2109883a 	add	r4,r4,r4
  a020b8:	01500034 	movhi	r5,16384
  a020bc:	0007883a 	mov	r3,zero
  a020c0:	0005883a 	mov	r2,zero
  a020c4:	01c007c4 	movi	r7,31
  a020c8:	10800044 	addi	r2,r2,1
  a020cc:	21800236 	bltu	r4,r6,a020d8 <__divsf3+0xfc>
  a020d0:	1946b03a 	or	r3,r3,r5
  a020d4:	2189c83a 	sub	r4,r4,r6
  a020d8:	280ad07a 	srli	r5,r5,1
  a020dc:	2109883a 	add	r4,r4,r4
  a020e0:	11fff91e 	bne	r2,r7,a020c8 <__divsf3+0xec>
  a020e4:	19401fcc 	andi	r5,r3,127
  a020e8:	00801004 	movi	r2,64
  a020ec:	28800a26 	beq	r5,r2,a02118 <__divsf3+0x13c>
  a020f0:	d8c00515 	stw	r3,20(sp)
  a020f4:	003fd506 	br	a0204c <__divsf3+0x70>
  a020f8:	8809883a 	mov	r4,r17
  a020fc:	d9800215 	stw	r6,8(sp)
  a02100:	0a02dc40 	call	a02dc4 <__pack_f>
  a02104:	dfc00c17 	ldw	ra,48(sp)
  a02108:	dc400b17 	ldw	r17,44(sp)
  a0210c:	dc000a17 	ldw	r16,40(sp)
  a02110:	dec00d04 	addi	sp,sp,52
  a02114:	f800283a 	ret
  a02118:	1880200c 	andi	r2,r3,128
  a0211c:	103ff41e 	bne	r2,zero,a020f0 <__divsf3+0x114>
  a02120:	203ff326 	beq	r4,zero,a020f0 <__divsf3+0x114>
  a02124:	1947883a 	add	r3,r3,r5
  a02128:	00bfe004 	movi	r2,-128
  a0212c:	1886703a 	and	r3,r3,r2
  a02130:	d8c00515 	stw	r3,20(sp)
  a02134:	003fc506 	br	a0204c <__divsf3+0x70>
  a02138:	8009883a 	mov	r4,r16
  a0213c:	003fc406 	br	a02050 <__divsf3+0x74>
  a02140:	8809883a 	mov	r4,r17
  a02144:	d8000515 	stw	zero,20(sp)
  a02148:	d8000415 	stw	zero,16(sp)
  a0214c:	003fc006 	br	a02050 <__divsf3+0x74>

00a02150 <__eqsf2>:
  a02150:	defff304 	addi	sp,sp,-52
  a02154:	dc400b15 	stw	r17,44(sp)
  a02158:	dc400204 	addi	r17,sp,8
  a0215c:	dc000a15 	stw	r16,40(sp)
  a02160:	d9000015 	stw	r4,0(sp)
  a02164:	d9400115 	stw	r5,4(sp)
  a02168:	d809883a 	mov	r4,sp
  a0216c:	880b883a 	mov	r5,r17
  a02170:	dc000604 	addi	r16,sp,24
  a02174:	dfc00c15 	stw	ra,48(sp)
  a02178:	0a02f240 	call	a02f24 <__unpack_f>
  a0217c:	d9000104 	addi	r4,sp,4
  a02180:	800b883a 	mov	r5,r16
  a02184:	0a02f240 	call	a02f24 <__unpack_f>
  a02188:	d8800217 	ldw	r2,8(sp)
  a0218c:	00c00044 	movi	r3,1
  a02190:	180d883a 	mov	r6,r3
  a02194:	1880062e 	bgeu	r3,r2,a021b0 <__eqsf2+0x60>
  a02198:	d8800617 	ldw	r2,24(sp)
  a0219c:	8809883a 	mov	r4,r17
  a021a0:	800b883a 	mov	r5,r16
  a021a4:	1880022e 	bgeu	r3,r2,a021b0 <__eqsf2+0x60>
  a021a8:	0a02fec0 	call	a02fec <__fpcmp_parts_f>
  a021ac:	100d883a 	mov	r6,r2
  a021b0:	3005883a 	mov	r2,r6
  a021b4:	dfc00c17 	ldw	ra,48(sp)
  a021b8:	dc400b17 	ldw	r17,44(sp)
  a021bc:	dc000a17 	ldw	r16,40(sp)
  a021c0:	dec00d04 	addi	sp,sp,52
  a021c4:	f800283a 	ret

00a021c8 <__gtsf2>:
  a021c8:	defff304 	addi	sp,sp,-52
  a021cc:	dc400b15 	stw	r17,44(sp)
  a021d0:	dc400204 	addi	r17,sp,8
  a021d4:	dc000a15 	stw	r16,40(sp)
  a021d8:	d9000015 	stw	r4,0(sp)
  a021dc:	d9400115 	stw	r5,4(sp)
  a021e0:	d809883a 	mov	r4,sp
  a021e4:	880b883a 	mov	r5,r17
  a021e8:	dc000604 	addi	r16,sp,24
  a021ec:	dfc00c15 	stw	ra,48(sp)
  a021f0:	0a02f240 	call	a02f24 <__unpack_f>
  a021f4:	d9000104 	addi	r4,sp,4
  a021f8:	800b883a 	mov	r5,r16
  a021fc:	0a02f240 	call	a02f24 <__unpack_f>
  a02200:	d8800217 	ldw	r2,8(sp)
  a02204:	00c00044 	movi	r3,1
  a02208:	01bfffc4 	movi	r6,-1
  a0220c:	1880062e 	bgeu	r3,r2,a02228 <__gtsf2+0x60>
  a02210:	d8800617 	ldw	r2,24(sp)
  a02214:	8809883a 	mov	r4,r17
  a02218:	800b883a 	mov	r5,r16
  a0221c:	1880022e 	bgeu	r3,r2,a02228 <__gtsf2+0x60>
  a02220:	0a02fec0 	call	a02fec <__fpcmp_parts_f>
  a02224:	100d883a 	mov	r6,r2
  a02228:	3005883a 	mov	r2,r6
  a0222c:	dfc00c17 	ldw	ra,48(sp)
  a02230:	dc400b17 	ldw	r17,44(sp)
  a02234:	dc000a17 	ldw	r16,40(sp)
  a02238:	dec00d04 	addi	sp,sp,52
  a0223c:	f800283a 	ret

00a02240 <__ltsf2>:
  a02240:	defff304 	addi	sp,sp,-52
  a02244:	dc400b15 	stw	r17,44(sp)
  a02248:	dc400204 	addi	r17,sp,8
  a0224c:	dc000a15 	stw	r16,40(sp)
  a02250:	d9000015 	stw	r4,0(sp)
  a02254:	d9400115 	stw	r5,4(sp)
  a02258:	d809883a 	mov	r4,sp
  a0225c:	880b883a 	mov	r5,r17
  a02260:	dc000604 	addi	r16,sp,24
  a02264:	dfc00c15 	stw	ra,48(sp)
  a02268:	0a02f240 	call	a02f24 <__unpack_f>
  a0226c:	d9000104 	addi	r4,sp,4
  a02270:	800b883a 	mov	r5,r16
  a02274:	0a02f240 	call	a02f24 <__unpack_f>
  a02278:	d8800217 	ldw	r2,8(sp)
  a0227c:	00c00044 	movi	r3,1
  a02280:	180d883a 	mov	r6,r3
  a02284:	1880062e 	bgeu	r3,r2,a022a0 <__ltsf2+0x60>
  a02288:	d8800617 	ldw	r2,24(sp)
  a0228c:	8809883a 	mov	r4,r17
  a02290:	800b883a 	mov	r5,r16
  a02294:	1880022e 	bgeu	r3,r2,a022a0 <__ltsf2+0x60>
  a02298:	0a02fec0 	call	a02fec <__fpcmp_parts_f>
  a0229c:	100d883a 	mov	r6,r2
  a022a0:	3005883a 	mov	r2,r6
  a022a4:	dfc00c17 	ldw	ra,48(sp)
  a022a8:	dc400b17 	ldw	r17,44(sp)
  a022ac:	dc000a17 	ldw	r16,40(sp)
  a022b0:	dec00d04 	addi	sp,sp,52
  a022b4:	f800283a 	ret

00a022b8 <__lesf2>:
  a022b8:	defff304 	addi	sp,sp,-52
  a022bc:	dc400b15 	stw	r17,44(sp)
  a022c0:	dc400204 	addi	r17,sp,8
  a022c4:	dc000a15 	stw	r16,40(sp)
  a022c8:	d9000015 	stw	r4,0(sp)
  a022cc:	d9400115 	stw	r5,4(sp)
  a022d0:	d809883a 	mov	r4,sp
  a022d4:	880b883a 	mov	r5,r17
  a022d8:	dc000604 	addi	r16,sp,24
  a022dc:	dfc00c15 	stw	ra,48(sp)
  a022e0:	0a02f240 	call	a02f24 <__unpack_f>
  a022e4:	d9000104 	addi	r4,sp,4
  a022e8:	800b883a 	mov	r5,r16
  a022ec:	0a02f240 	call	a02f24 <__unpack_f>
  a022f0:	d8800217 	ldw	r2,8(sp)
  a022f4:	00c00044 	movi	r3,1
  a022f8:	180d883a 	mov	r6,r3
  a022fc:	1880062e 	bgeu	r3,r2,a02318 <__lesf2+0x60>
  a02300:	d8800617 	ldw	r2,24(sp)
  a02304:	8809883a 	mov	r4,r17
  a02308:	800b883a 	mov	r5,r16
  a0230c:	1880022e 	bgeu	r3,r2,a02318 <__lesf2+0x60>
  a02310:	0a02fec0 	call	a02fec <__fpcmp_parts_f>
  a02314:	100d883a 	mov	r6,r2
  a02318:	3005883a 	mov	r2,r6
  a0231c:	dfc00c17 	ldw	ra,48(sp)
  a02320:	dc400b17 	ldw	r17,44(sp)
  a02324:	dc000a17 	ldw	r16,40(sp)
  a02328:	dec00d04 	addi	sp,sp,52
  a0232c:	f800283a 	ret

00a02330 <__floatsisf>:
  a02330:	2006d7fa 	srli	r3,r4,31
  a02334:	defffa04 	addi	sp,sp,-24
  a02338:	008000c4 	movi	r2,3
  a0233c:	dfc00515 	stw	ra,20(sp)
  a02340:	dc000415 	stw	r16,16(sp)
  a02344:	d8800015 	stw	r2,0(sp)
  a02348:	d8c00115 	stw	r3,4(sp)
  a0234c:	2000081e 	bne	r4,zero,a02370 <__floatsisf+0x40>
  a02350:	00800084 	movi	r2,2
  a02354:	d8800015 	stw	r2,0(sp)
  a02358:	d809883a 	mov	r4,sp
  a0235c:	0a02dc40 	call	a02dc4 <__pack_f>
  a02360:	dfc00517 	ldw	ra,20(sp)
  a02364:	dc000417 	ldw	r16,16(sp)
  a02368:	dec00604 	addi	sp,sp,24
  a0236c:	f800283a 	ret
  a02370:	00800784 	movi	r2,30
  a02374:	1807003a 	cmpeq	r3,r3,zero
  a02378:	d8800215 	stw	r2,8(sp)
  a0237c:	18000e1e 	bne	r3,zero,a023b8 <__floatsisf+0x88>
  a02380:	00a00034 	movhi	r2,32768
  a02384:	20800e26 	beq	r4,r2,a023c0 <__floatsisf+0x90>
  a02388:	0121c83a 	sub	r16,zero,r4
  a0238c:	8009883a 	mov	r4,r16
  a02390:	dc000315 	stw	r16,12(sp)
  a02394:	0a02d440 	call	a02d44 <__clzsi2>
  a02398:	117fffc4 	addi	r5,r2,-1
  a0239c:	017fee0e 	bge	zero,r5,a02358 <__floatsisf+0x28>
  a023a0:	d8800217 	ldw	r2,8(sp)
  a023a4:	8146983a 	sll	r3,r16,r5
  a023a8:	1145c83a 	sub	r2,r2,r5
  a023ac:	d8c00315 	stw	r3,12(sp)
  a023b0:	d8800215 	stw	r2,8(sp)
  a023b4:	003fe806 	br	a02358 <__floatsisf+0x28>
  a023b8:	2021883a 	mov	r16,r4
  a023bc:	003ff306 	br	a0238c <__floatsisf+0x5c>
  a023c0:	00b3c034 	movhi	r2,52992
  a023c4:	003fe606 	br	a02360 <__floatsisf+0x30>

00a023c8 <__extendsfdf2>:
  a023c8:	defff904 	addi	sp,sp,-28
  a023cc:	d9000115 	stw	r4,4(sp)
  a023d0:	d9400204 	addi	r5,sp,8
  a023d4:	d9000104 	addi	r4,sp,4
  a023d8:	dfc00615 	stw	ra,24(sp)
  a023dc:	0a02f240 	call	a02f24 <__unpack_f>
  a023e0:	d9c00517 	ldw	r7,20(sp)
  a023e4:	0011883a 	mov	r8,zero
  a023e8:	400697ba 	slli	r3,r8,30
  a023ec:	3812d0ba 	srli	r9,r7,2
  a023f0:	380497ba 	slli	r2,r7,30
  a023f4:	d9000217 	ldw	r4,8(sp)
  a023f8:	d9400317 	ldw	r5,12(sp)
  a023fc:	d9800417 	ldw	r6,16(sp)
  a02400:	48c6b03a 	or	r3,r9,r3
  a02404:	100f883a 	mov	r7,r2
  a02408:	d8c00015 	stw	r3,0(sp)
  a0240c:	0a02c000 	call	a02c00 <__make_dp>
  a02410:	dfc00617 	ldw	ra,24(sp)
  a02414:	dec00704 	addi	sp,sp,28
  a02418:	f800283a 	ret

00a0241c <_fpadd_parts>:
  a0241c:	defff804 	addi	sp,sp,-32
  a02420:	dcc00315 	stw	r19,12(sp)
  a02424:	2027883a 	mov	r19,r4
  a02428:	21000017 	ldw	r4,0(r4)
  a0242c:	00c00044 	movi	r3,1
  a02430:	dd400515 	stw	r21,20(sp)
  a02434:	dd000415 	stw	r20,16(sp)
  a02438:	ddc00715 	stw	r23,28(sp)
  a0243c:	dd800615 	stw	r22,24(sp)
  a02440:	dc800215 	stw	r18,8(sp)
  a02444:	dc400115 	stw	r17,4(sp)
  a02448:	dc000015 	stw	r16,0(sp)
  a0244c:	282b883a 	mov	r21,r5
  a02450:	3029883a 	mov	r20,r6
  a02454:	1900632e 	bgeu	r3,r4,a025e4 <_fpadd_parts+0x1c8>
  a02458:	28800017 	ldw	r2,0(r5)
  a0245c:	1880812e 	bgeu	r3,r2,a02664 <_fpadd_parts+0x248>
  a02460:	00c00104 	movi	r3,4
  a02464:	20c0dc26 	beq	r4,r3,a027d8 <_fpadd_parts+0x3bc>
  a02468:	10c07e26 	beq	r2,r3,a02664 <_fpadd_parts+0x248>
  a0246c:	00c00084 	movi	r3,2
  a02470:	10c06726 	beq	r2,r3,a02610 <_fpadd_parts+0x1f4>
  a02474:	20c07b26 	beq	r4,r3,a02664 <_fpadd_parts+0x248>
  a02478:	9dc00217 	ldw	r23,8(r19)
  a0247c:	28c00217 	ldw	r3,8(r5)
  a02480:	9c400317 	ldw	r17,12(r19)
  a02484:	2bc00317 	ldw	r15,12(r5)
  a02488:	b8cdc83a 	sub	r6,r23,r3
  a0248c:	9c800417 	ldw	r18,16(r19)
  a02490:	2c000417 	ldw	r16,16(r5)
  a02494:	3009883a 	mov	r4,r6
  a02498:	30009716 	blt	r6,zero,a026f8 <_fpadd_parts+0x2dc>
  a0249c:	00800fc4 	movi	r2,63
  a024a0:	11806b16 	blt	r2,r6,a02650 <_fpadd_parts+0x234>
  a024a4:	0100a40e 	bge	zero,r4,a02738 <_fpadd_parts+0x31c>
  a024a8:	35bff804 	addi	r22,r6,-32
  a024ac:	b000bc16 	blt	r22,zero,a027a0 <_fpadd_parts+0x384>
  a024b0:	8596d83a 	srl	r11,r16,r22
  a024b4:	0019883a 	mov	r12,zero
  a024b8:	0013883a 	mov	r9,zero
  a024bc:	01000044 	movi	r4,1
  a024c0:	0015883a 	mov	r10,zero
  a024c4:	b000be16 	blt	r22,zero,a027c0 <_fpadd_parts+0x3a4>
  a024c8:	2590983a 	sll	r8,r4,r22
  a024cc:	000f883a 	mov	r7,zero
  a024d0:	00bfffc4 	movi	r2,-1
  a024d4:	3889883a 	add	r4,r7,r2
  a024d8:	408b883a 	add	r5,r8,r2
  a024dc:	21cd803a 	cmpltu	r6,r4,r7
  a024e0:	314b883a 	add	r5,r6,r5
  a024e4:	7904703a 	and	r2,r15,r4
  a024e8:	8146703a 	and	r3,r16,r5
  a024ec:	10c4b03a 	or	r2,r2,r3
  a024f0:	10000226 	beq	r2,zero,a024fc <_fpadd_parts+0xe0>
  a024f4:	02400044 	movi	r9,1
  a024f8:	0015883a 	mov	r10,zero
  a024fc:	5a5eb03a 	or	r15,r11,r9
  a02500:	62a0b03a 	or	r16,r12,r10
  a02504:	99400117 	ldw	r5,4(r19)
  a02508:	a8800117 	ldw	r2,4(r21)
  a0250c:	28806e26 	beq	r5,r2,a026c8 <_fpadd_parts+0x2ac>
  a02510:	28006626 	beq	r5,zero,a026ac <_fpadd_parts+0x290>
  a02514:	7c45c83a 	sub	r2,r15,r17
  a02518:	7889803a 	cmpltu	r4,r15,r2
  a0251c:	8487c83a 	sub	r3,r16,r18
  a02520:	1909c83a 	sub	r4,r3,r4
  a02524:	100d883a 	mov	r6,r2
  a02528:	200f883a 	mov	r7,r4
  a0252c:	38007716 	blt	r7,zero,a0270c <_fpadd_parts+0x2f0>
  a02530:	a5c00215 	stw	r23,8(r20)
  a02534:	a1c00415 	stw	r7,16(r20)
  a02538:	a0000115 	stw	zero,4(r20)
  a0253c:	a1800315 	stw	r6,12(r20)
  a02540:	a2000317 	ldw	r8,12(r20)
  a02544:	a2400417 	ldw	r9,16(r20)
  a02548:	00bfffc4 	movi	r2,-1
  a0254c:	408b883a 	add	r5,r8,r2
  a02550:	2a09803a 	cmpltu	r4,r5,r8
  a02554:	488d883a 	add	r6,r9,r2
  a02558:	01c40034 	movhi	r7,4096
  a0255c:	39ffffc4 	addi	r7,r7,-1
  a02560:	218d883a 	add	r6,r4,r6
  a02564:	39801736 	bltu	r7,r6,a025c4 <_fpadd_parts+0x1a8>
  a02568:	31c06526 	beq	r6,r7,a02700 <_fpadd_parts+0x2e4>
  a0256c:	a3000217 	ldw	r12,8(r20)
  a02570:	4209883a 	add	r4,r8,r8
  a02574:	00bfffc4 	movi	r2,-1
  a02578:	220f803a 	cmpltu	r7,r4,r8
  a0257c:	4a4b883a 	add	r5,r9,r9
  a02580:	394f883a 	add	r7,r7,r5
  a02584:	2095883a 	add	r10,r4,r2
  a02588:	3897883a 	add	r11,r7,r2
  a0258c:	510d803a 	cmpltu	r6,r10,r4
  a02590:	6099883a 	add	r12,r12,r2
  a02594:	32d7883a 	add	r11,r6,r11
  a02598:	00840034 	movhi	r2,4096
  a0259c:	10bfffc4 	addi	r2,r2,-1
  a025a0:	2011883a 	mov	r8,r4
  a025a4:	3813883a 	mov	r9,r7
  a025a8:	a1000315 	stw	r4,12(r20)
  a025ac:	a1c00415 	stw	r7,16(r20)
  a025b0:	a3000215 	stw	r12,8(r20)
  a025b4:	12c00336 	bltu	r2,r11,a025c4 <_fpadd_parts+0x1a8>
  a025b8:	58bfed1e 	bne	r11,r2,a02570 <_fpadd_parts+0x154>
  a025bc:	00bfff84 	movi	r2,-2
  a025c0:	12bfeb2e 	bgeu	r2,r10,a02570 <_fpadd_parts+0x154>
  a025c4:	a2800417 	ldw	r10,16(r20)
  a025c8:	008000c4 	movi	r2,3
  a025cc:	00c80034 	movhi	r3,8192
  a025d0:	18ffffc4 	addi	r3,r3,-1
  a025d4:	a2400317 	ldw	r9,12(r20)
  a025d8:	a0800015 	stw	r2,0(r20)
  a025dc:	1a802336 	bltu	r3,r10,a0266c <_fpadd_parts+0x250>
  a025e0:	a027883a 	mov	r19,r20
  a025e4:	9805883a 	mov	r2,r19
  a025e8:	ddc00717 	ldw	r23,28(sp)
  a025ec:	dd800617 	ldw	r22,24(sp)
  a025f0:	dd400517 	ldw	r21,20(sp)
  a025f4:	dd000417 	ldw	r20,16(sp)
  a025f8:	dcc00317 	ldw	r19,12(sp)
  a025fc:	dc800217 	ldw	r18,8(sp)
  a02600:	dc400117 	ldw	r17,4(sp)
  a02604:	dc000017 	ldw	r16,0(sp)
  a02608:	dec00804 	addi	sp,sp,32
  a0260c:	f800283a 	ret
  a02610:	20fff41e 	bne	r4,r3,a025e4 <_fpadd_parts+0x1c8>
  a02614:	31000015 	stw	r4,0(r6)
  a02618:	98800117 	ldw	r2,4(r19)
  a0261c:	30800115 	stw	r2,4(r6)
  a02620:	98c00217 	ldw	r3,8(r19)
  a02624:	30c00215 	stw	r3,8(r6)
  a02628:	98800317 	ldw	r2,12(r19)
  a0262c:	30800315 	stw	r2,12(r6)
  a02630:	98c00417 	ldw	r3,16(r19)
  a02634:	30c00415 	stw	r3,16(r6)
  a02638:	98800117 	ldw	r2,4(r19)
  a0263c:	28c00117 	ldw	r3,4(r5)
  a02640:	3027883a 	mov	r19,r6
  a02644:	10c4703a 	and	r2,r2,r3
  a02648:	30800115 	stw	r2,4(r6)
  a0264c:	003fe506 	br	a025e4 <_fpadd_parts+0x1c8>
  a02650:	1dc02616 	blt	r3,r23,a026ec <_fpadd_parts+0x2d0>
  a02654:	0023883a 	mov	r17,zero
  a02658:	182f883a 	mov	r23,r3
  a0265c:	0025883a 	mov	r18,zero
  a02660:	003fa806 	br	a02504 <_fpadd_parts+0xe8>
  a02664:	a827883a 	mov	r19,r21
  a02668:	003fde06 	br	a025e4 <_fpadd_parts+0x1c8>
  a0266c:	01800044 	movi	r6,1
  a02670:	500497fa 	slli	r2,r10,31
  a02674:	4808d07a 	srli	r4,r9,1
  a02678:	518ad83a 	srl	r5,r10,r6
  a0267c:	a2000217 	ldw	r8,8(r20)
  a02680:	1108b03a 	or	r4,r2,r4
  a02684:	0007883a 	mov	r3,zero
  a02688:	4984703a 	and	r2,r9,r6
  a0268c:	208cb03a 	or	r6,r4,r2
  a02690:	28ceb03a 	or	r7,r5,r3
  a02694:	42000044 	addi	r8,r8,1
  a02698:	a027883a 	mov	r19,r20
  a0269c:	a1c00415 	stw	r7,16(r20)
  a026a0:	a2000215 	stw	r8,8(r20)
  a026a4:	a1800315 	stw	r6,12(r20)
  a026a8:	003fce06 	br	a025e4 <_fpadd_parts+0x1c8>
  a026ac:	8bc5c83a 	sub	r2,r17,r15
  a026b0:	8889803a 	cmpltu	r4,r17,r2
  a026b4:	9407c83a 	sub	r3,r18,r16
  a026b8:	1909c83a 	sub	r4,r3,r4
  a026bc:	100d883a 	mov	r6,r2
  a026c0:	200f883a 	mov	r7,r4
  a026c4:	003f9906 	br	a0252c <_fpadd_parts+0x110>
  a026c8:	7c45883a 	add	r2,r15,r17
  a026cc:	13c9803a 	cmpltu	r4,r2,r15
  a026d0:	8487883a 	add	r3,r16,r18
  a026d4:	20c9883a 	add	r4,r4,r3
  a026d8:	a1400115 	stw	r5,4(r20)
  a026dc:	a5c00215 	stw	r23,8(r20)
  a026e0:	a0800315 	stw	r2,12(r20)
  a026e4:	a1000415 	stw	r4,16(r20)
  a026e8:	003fb606 	br	a025c4 <_fpadd_parts+0x1a8>
  a026ec:	001f883a 	mov	r15,zero
  a026f0:	0021883a 	mov	r16,zero
  a026f4:	003f8306 	br	a02504 <_fpadd_parts+0xe8>
  a026f8:	018dc83a 	sub	r6,zero,r6
  a026fc:	003f6706 	br	a0249c <_fpadd_parts+0x80>
  a02700:	00bfff84 	movi	r2,-2
  a02704:	117faf36 	bltu	r2,r5,a025c4 <_fpadd_parts+0x1a8>
  a02708:	003f9806 	br	a0256c <_fpadd_parts+0x150>
  a0270c:	0005883a 	mov	r2,zero
  a02710:	1189c83a 	sub	r4,r2,r6
  a02714:	1105803a 	cmpltu	r2,r2,r4
  a02718:	01cbc83a 	sub	r5,zero,r7
  a0271c:	2885c83a 	sub	r2,r5,r2
  a02720:	01800044 	movi	r6,1
  a02724:	a1800115 	stw	r6,4(r20)
  a02728:	a5c00215 	stw	r23,8(r20)
  a0272c:	a1000315 	stw	r4,12(r20)
  a02730:	a0800415 	stw	r2,16(r20)
  a02734:	003f8206 	br	a02540 <_fpadd_parts+0x124>
  a02738:	203f7226 	beq	r4,zero,a02504 <_fpadd_parts+0xe8>
  a0273c:	35bff804 	addi	r22,r6,-32
  a02740:	b9af883a 	add	r23,r23,r6
  a02744:	b0003116 	blt	r22,zero,a0280c <_fpadd_parts+0x3f0>
  a02748:	959ad83a 	srl	r13,r18,r22
  a0274c:	001d883a 	mov	r14,zero
  a02750:	000f883a 	mov	r7,zero
  a02754:	01000044 	movi	r4,1
  a02758:	0011883a 	mov	r8,zero
  a0275c:	b0002516 	blt	r22,zero,a027f4 <_fpadd_parts+0x3d8>
  a02760:	2594983a 	sll	r10,r4,r22
  a02764:	0013883a 	mov	r9,zero
  a02768:	00bfffc4 	movi	r2,-1
  a0276c:	4889883a 	add	r4,r9,r2
  a02770:	508b883a 	add	r5,r10,r2
  a02774:	224d803a 	cmpltu	r6,r4,r9
  a02778:	314b883a 	add	r5,r6,r5
  a0277c:	8904703a 	and	r2,r17,r4
  a02780:	9146703a 	and	r3,r18,r5
  a02784:	10c4b03a 	or	r2,r2,r3
  a02788:	10000226 	beq	r2,zero,a02794 <_fpadd_parts+0x378>
  a0278c:	01c00044 	movi	r7,1
  a02790:	0011883a 	mov	r8,zero
  a02794:	69e2b03a 	or	r17,r13,r7
  a02798:	7224b03a 	or	r18,r14,r8
  a0279c:	003f5906 	br	a02504 <_fpadd_parts+0xe8>
  a027a0:	8407883a 	add	r3,r16,r16
  a027a4:	008007c4 	movi	r2,31
  a027a8:	1185c83a 	sub	r2,r2,r6
  a027ac:	1886983a 	sll	r3,r3,r2
  a027b0:	7996d83a 	srl	r11,r15,r6
  a027b4:	8198d83a 	srl	r12,r16,r6
  a027b8:	1ad6b03a 	or	r11,r3,r11
  a027bc:	003f3e06 	br	a024b8 <_fpadd_parts+0x9c>
  a027c0:	2006d07a 	srli	r3,r4,1
  a027c4:	008007c4 	movi	r2,31
  a027c8:	1185c83a 	sub	r2,r2,r6
  a027cc:	1890d83a 	srl	r8,r3,r2
  a027d0:	218e983a 	sll	r7,r4,r6
  a027d4:	003f3e06 	br	a024d0 <_fpadd_parts+0xb4>
  a027d8:	113f821e 	bne	r2,r4,a025e4 <_fpadd_parts+0x1c8>
  a027dc:	28c00117 	ldw	r3,4(r5)
  a027e0:	98800117 	ldw	r2,4(r19)
  a027e4:	10ff7f26 	beq	r2,r3,a025e4 <_fpadd_parts+0x1c8>
  a027e8:	04c02874 	movhi	r19,161
  a027ec:	9cc2f404 	addi	r19,r19,3024
  a027f0:	003f7c06 	br	a025e4 <_fpadd_parts+0x1c8>
  a027f4:	2006d07a 	srli	r3,r4,1
  a027f8:	008007c4 	movi	r2,31
  a027fc:	1185c83a 	sub	r2,r2,r6
  a02800:	1894d83a 	srl	r10,r3,r2
  a02804:	2192983a 	sll	r9,r4,r6
  a02808:	003fd706 	br	a02768 <_fpadd_parts+0x34c>
  a0280c:	9487883a 	add	r3,r18,r18
  a02810:	008007c4 	movi	r2,31
  a02814:	1185c83a 	sub	r2,r2,r6
  a02818:	1886983a 	sll	r3,r3,r2
  a0281c:	899ad83a 	srl	r13,r17,r6
  a02820:	919cd83a 	srl	r14,r18,r6
  a02824:	1b5ab03a 	or	r13,r3,r13
  a02828:	003fc906 	br	a02750 <_fpadd_parts+0x334>

00a0282c <__subdf3>:
  a0282c:	deffea04 	addi	sp,sp,-88
  a02830:	dcc01415 	stw	r19,80(sp)
  a02834:	dcc00404 	addi	r19,sp,16
  a02838:	2011883a 	mov	r8,r4
  a0283c:	2813883a 	mov	r9,r5
  a02840:	dc401315 	stw	r17,76(sp)
  a02844:	d809883a 	mov	r4,sp
  a02848:	980b883a 	mov	r5,r19
  a0284c:	dc400904 	addi	r17,sp,36
  a02850:	dfc01515 	stw	ra,84(sp)
  a02854:	da400115 	stw	r9,4(sp)
  a02858:	d9c00315 	stw	r7,12(sp)
  a0285c:	da000015 	stw	r8,0(sp)
  a02860:	d9800215 	stw	r6,8(sp)
  a02864:	0a033d40 	call	a033d4 <__unpack_d>
  a02868:	d9000204 	addi	r4,sp,8
  a0286c:	880b883a 	mov	r5,r17
  a02870:	0a033d40 	call	a033d4 <__unpack_d>
  a02874:	d8800a17 	ldw	r2,40(sp)
  a02878:	880b883a 	mov	r5,r17
  a0287c:	9809883a 	mov	r4,r19
  a02880:	d9800e04 	addi	r6,sp,56
  a02884:	1080005c 	xori	r2,r2,1
  a02888:	d8800a15 	stw	r2,40(sp)
  a0288c:	0a0241c0 	call	a0241c <_fpadd_parts>
  a02890:	1009883a 	mov	r4,r2
  a02894:	0a030c00 	call	a030c0 <__pack_d>
  a02898:	dfc01517 	ldw	ra,84(sp)
  a0289c:	dcc01417 	ldw	r19,80(sp)
  a028a0:	dc401317 	ldw	r17,76(sp)
  a028a4:	dec01604 	addi	sp,sp,88
  a028a8:	f800283a 	ret

00a028ac <__adddf3>:
  a028ac:	deffea04 	addi	sp,sp,-88
  a028b0:	dcc01415 	stw	r19,80(sp)
  a028b4:	dcc00404 	addi	r19,sp,16
  a028b8:	2011883a 	mov	r8,r4
  a028bc:	2813883a 	mov	r9,r5
  a028c0:	dc401315 	stw	r17,76(sp)
  a028c4:	d809883a 	mov	r4,sp
  a028c8:	980b883a 	mov	r5,r19
  a028cc:	dc400904 	addi	r17,sp,36
  a028d0:	dfc01515 	stw	ra,84(sp)
  a028d4:	da400115 	stw	r9,4(sp)
  a028d8:	d9c00315 	stw	r7,12(sp)
  a028dc:	da000015 	stw	r8,0(sp)
  a028e0:	d9800215 	stw	r6,8(sp)
  a028e4:	0a033d40 	call	a033d4 <__unpack_d>
  a028e8:	d9000204 	addi	r4,sp,8
  a028ec:	880b883a 	mov	r5,r17
  a028f0:	0a033d40 	call	a033d4 <__unpack_d>
  a028f4:	d9800e04 	addi	r6,sp,56
  a028f8:	9809883a 	mov	r4,r19
  a028fc:	880b883a 	mov	r5,r17
  a02900:	0a0241c0 	call	a0241c <_fpadd_parts>
  a02904:	1009883a 	mov	r4,r2
  a02908:	0a030c00 	call	a030c0 <__pack_d>
  a0290c:	dfc01517 	ldw	ra,84(sp)
  a02910:	dcc01417 	ldw	r19,80(sp)
  a02914:	dc401317 	ldw	r17,76(sp)
  a02918:	dec01604 	addi	sp,sp,88
  a0291c:	f800283a 	ret

00a02920 <__divdf3>:
  a02920:	deffed04 	addi	sp,sp,-76
  a02924:	dcc01115 	stw	r19,68(sp)
  a02928:	dcc00404 	addi	r19,sp,16
  a0292c:	2011883a 	mov	r8,r4
  a02930:	2813883a 	mov	r9,r5
  a02934:	dc000e15 	stw	r16,56(sp)
  a02938:	d809883a 	mov	r4,sp
  a0293c:	980b883a 	mov	r5,r19
  a02940:	dc000904 	addi	r16,sp,36
  a02944:	dfc01215 	stw	ra,72(sp)
  a02948:	da400115 	stw	r9,4(sp)
  a0294c:	d9c00315 	stw	r7,12(sp)
  a02950:	da000015 	stw	r8,0(sp)
  a02954:	d9800215 	stw	r6,8(sp)
  a02958:	dc801015 	stw	r18,64(sp)
  a0295c:	dc400f15 	stw	r17,60(sp)
  a02960:	0a033d40 	call	a033d4 <__unpack_d>
  a02964:	d9000204 	addi	r4,sp,8
  a02968:	800b883a 	mov	r5,r16
  a0296c:	0a033d40 	call	a033d4 <__unpack_d>
  a02970:	d9000417 	ldw	r4,16(sp)
  a02974:	00800044 	movi	r2,1
  a02978:	11000b2e 	bgeu	r2,r4,a029a8 <__divdf3+0x88>
  a0297c:	d9400917 	ldw	r5,36(sp)
  a02980:	1140762e 	bgeu	r2,r5,a02b5c <__divdf3+0x23c>
  a02984:	d8800517 	ldw	r2,20(sp)
  a02988:	d8c00a17 	ldw	r3,40(sp)
  a0298c:	01800104 	movi	r6,4
  a02990:	10c4f03a 	xor	r2,r2,r3
  a02994:	d8800515 	stw	r2,20(sp)
  a02998:	21800226 	beq	r4,r6,a029a4 <__divdf3+0x84>
  a0299c:	00800084 	movi	r2,2
  a029a0:	2080141e 	bne	r4,r2,a029f4 <__divdf3+0xd4>
  a029a4:	29000926 	beq	r5,r4,a029cc <__divdf3+0xac>
  a029a8:	9809883a 	mov	r4,r19
  a029ac:	0a030c00 	call	a030c0 <__pack_d>
  a029b0:	dfc01217 	ldw	ra,72(sp)
  a029b4:	dcc01117 	ldw	r19,68(sp)
  a029b8:	dc801017 	ldw	r18,64(sp)
  a029bc:	dc400f17 	ldw	r17,60(sp)
  a029c0:	dc000e17 	ldw	r16,56(sp)
  a029c4:	dec01304 	addi	sp,sp,76
  a029c8:	f800283a 	ret
  a029cc:	01002874 	movhi	r4,161
  a029d0:	2102f404 	addi	r4,r4,3024
  a029d4:	0a030c00 	call	a030c0 <__pack_d>
  a029d8:	dfc01217 	ldw	ra,72(sp)
  a029dc:	dcc01117 	ldw	r19,68(sp)
  a029e0:	dc801017 	ldw	r18,64(sp)
  a029e4:	dc400f17 	ldw	r17,60(sp)
  a029e8:	dc000e17 	ldw	r16,56(sp)
  a029ec:	dec01304 	addi	sp,sp,76
  a029f0:	f800283a 	ret
  a029f4:	29805b26 	beq	r5,r6,a02b64 <__divdf3+0x244>
  a029f8:	28802d26 	beq	r5,r2,a02ab0 <__divdf3+0x190>
  a029fc:	d8c00617 	ldw	r3,24(sp)
  a02a00:	d8800b17 	ldw	r2,44(sp)
  a02a04:	d9c00817 	ldw	r7,32(sp)
  a02a08:	dc400d17 	ldw	r17,52(sp)
  a02a0c:	188bc83a 	sub	r5,r3,r2
  a02a10:	d9800717 	ldw	r6,28(sp)
  a02a14:	dc000c17 	ldw	r16,48(sp)
  a02a18:	d9400615 	stw	r5,24(sp)
  a02a1c:	3c403836 	bltu	r7,r17,a02b00 <__divdf3+0x1e0>
  a02a20:	89c03626 	beq	r17,r7,a02afc <__divdf3+0x1dc>
  a02a24:	0015883a 	mov	r10,zero
  a02a28:	001d883a 	mov	r14,zero
  a02a2c:	02c40034 	movhi	r11,4096
  a02a30:	001f883a 	mov	r15,zero
  a02a34:	003f883a 	mov	ra,zero
  a02a38:	04800f44 	movi	r18,61
  a02a3c:	00000f06 	br	a02a7c <__divdf3+0x15c>
  a02a40:	601d883a 	mov	r14,r12
  a02a44:	681f883a 	mov	r15,r13
  a02a48:	400d883a 	mov	r6,r8
  a02a4c:	100f883a 	mov	r7,r2
  a02a50:	3191883a 	add	r8,r6,r6
  a02a54:	5808d07a 	srli	r4,r11,1
  a02a58:	4185803a 	cmpltu	r2,r8,r6
  a02a5c:	39d3883a 	add	r9,r7,r7
  a02a60:	28c6b03a 	or	r3,r5,r3
  a02a64:	1245883a 	add	r2,r2,r9
  a02a68:	1815883a 	mov	r10,r3
  a02a6c:	2017883a 	mov	r11,r4
  a02a70:	400d883a 	mov	r6,r8
  a02a74:	100f883a 	mov	r7,r2
  a02a78:	fc801726 	beq	ra,r18,a02ad8 <__divdf3+0x1b8>
  a02a7c:	580a97fa 	slli	r5,r11,31
  a02a80:	5006d07a 	srli	r3,r10,1
  a02a84:	ffc00044 	addi	ra,ra,1
  a02a88:	3c7ff136 	bltu	r7,r17,a02a50 <__divdf3+0x130>
  a02a8c:	3411c83a 	sub	r8,r6,r16
  a02a90:	3205803a 	cmpltu	r2,r6,r8
  a02a94:	3c53c83a 	sub	r9,r7,r17
  a02a98:	7298b03a 	or	r12,r14,r10
  a02a9c:	7adab03a 	or	r13,r15,r11
  a02aa0:	4885c83a 	sub	r2,r9,r2
  a02aa4:	89ffe61e 	bne	r17,r7,a02a40 <__divdf3+0x120>
  a02aa8:	343fe936 	bltu	r6,r16,a02a50 <__divdf3+0x130>
  a02aac:	003fe406 	br	a02a40 <__divdf3+0x120>
  a02ab0:	9809883a 	mov	r4,r19
  a02ab4:	d9800415 	stw	r6,16(sp)
  a02ab8:	0a030c00 	call	a030c0 <__pack_d>
  a02abc:	dfc01217 	ldw	ra,72(sp)
  a02ac0:	dcc01117 	ldw	r19,68(sp)
  a02ac4:	dc801017 	ldw	r18,64(sp)
  a02ac8:	dc400f17 	ldw	r17,60(sp)
  a02acc:	dc000e17 	ldw	r16,56(sp)
  a02ad0:	dec01304 	addi	sp,sp,76
  a02ad4:	f800283a 	ret
  a02ad8:	00803fc4 	movi	r2,255
  a02adc:	7090703a 	and	r8,r14,r2
  a02ae0:	00802004 	movi	r2,128
  a02ae4:	0007883a 	mov	r3,zero
  a02ae8:	0013883a 	mov	r9,zero
  a02aec:	40800d26 	beq	r8,r2,a02b24 <__divdf3+0x204>
  a02af0:	dbc00815 	stw	r15,32(sp)
  a02af4:	db800715 	stw	r14,28(sp)
  a02af8:	003fab06 	br	a029a8 <__divdf3+0x88>
  a02afc:	343fc92e 	bgeu	r6,r16,a02a24 <__divdf3+0x104>
  a02b00:	3185883a 	add	r2,r6,r6
  a02b04:	1189803a 	cmpltu	r4,r2,r6
  a02b08:	39c7883a 	add	r3,r7,r7
  a02b0c:	20c9883a 	add	r4,r4,r3
  a02b10:	297fffc4 	addi	r5,r5,-1
  a02b14:	100d883a 	mov	r6,r2
  a02b18:	200f883a 	mov	r7,r4
  a02b1c:	d9400615 	stw	r5,24(sp)
  a02b20:	003fc006 	br	a02a24 <__divdf3+0x104>
  a02b24:	483ff21e 	bne	r9,zero,a02af0 <__divdf3+0x1d0>
  a02b28:	01004004 	movi	r4,256
  a02b2c:	7104703a 	and	r2,r14,r4
  a02b30:	10c4b03a 	or	r2,r2,r3
  a02b34:	103fee1e 	bne	r2,zero,a02af0 <__divdf3+0x1d0>
  a02b38:	31c4b03a 	or	r2,r6,r7
  a02b3c:	103fec26 	beq	r2,zero,a02af0 <__divdf3+0x1d0>
  a02b40:	7205883a 	add	r2,r14,r8
  a02b44:	1391803a 	cmpltu	r8,r2,r14
  a02b48:	43d1883a 	add	r8,r8,r15
  a02b4c:	013fc004 	movi	r4,-256
  a02b50:	111c703a 	and	r14,r2,r4
  a02b54:	401f883a 	mov	r15,r8
  a02b58:	003fe506 	br	a02af0 <__divdf3+0x1d0>
  a02b5c:	8009883a 	mov	r4,r16
  a02b60:	003f9206 	br	a029ac <__divdf3+0x8c>
  a02b64:	9809883a 	mov	r4,r19
  a02b68:	d8000715 	stw	zero,28(sp)
  a02b6c:	d8000815 	stw	zero,32(sp)
  a02b70:	d8000615 	stw	zero,24(sp)
  a02b74:	003f8d06 	br	a029ac <__divdf3+0x8c>

00a02b78 <__nedf2>:
  a02b78:	deffef04 	addi	sp,sp,-68
  a02b7c:	dc400f15 	stw	r17,60(sp)
  a02b80:	dc400404 	addi	r17,sp,16
  a02b84:	2005883a 	mov	r2,r4
  a02b88:	2807883a 	mov	r3,r5
  a02b8c:	dc000e15 	stw	r16,56(sp)
  a02b90:	d809883a 	mov	r4,sp
  a02b94:	880b883a 	mov	r5,r17
  a02b98:	dc000904 	addi	r16,sp,36
  a02b9c:	d8c00115 	stw	r3,4(sp)
  a02ba0:	d8800015 	stw	r2,0(sp)
  a02ba4:	d9800215 	stw	r6,8(sp)
  a02ba8:	dfc01015 	stw	ra,64(sp)
  a02bac:	d9c00315 	stw	r7,12(sp)
  a02bb0:	0a033d40 	call	a033d4 <__unpack_d>
  a02bb4:	d9000204 	addi	r4,sp,8
  a02bb8:	800b883a 	mov	r5,r16
  a02bbc:	0a033d40 	call	a033d4 <__unpack_d>
  a02bc0:	d8800417 	ldw	r2,16(sp)
  a02bc4:	00c00044 	movi	r3,1
  a02bc8:	180d883a 	mov	r6,r3
  a02bcc:	1880062e 	bgeu	r3,r2,a02be8 <__nedf2+0x70>
  a02bd0:	d8800917 	ldw	r2,36(sp)
  a02bd4:	8809883a 	mov	r4,r17
  a02bd8:	800b883a 	mov	r5,r16
  a02bdc:	1880022e 	bgeu	r3,r2,a02be8 <__nedf2+0x70>
  a02be0:	0a0350c0 	call	a0350c <__fpcmp_parts_d>
  a02be4:	100d883a 	mov	r6,r2
  a02be8:	3005883a 	mov	r2,r6
  a02bec:	dfc01017 	ldw	ra,64(sp)
  a02bf0:	dc400f17 	ldw	r17,60(sp)
  a02bf4:	dc000e17 	ldw	r16,56(sp)
  a02bf8:	dec01104 	addi	sp,sp,68
  a02bfc:	f800283a 	ret

00a02c00 <__make_dp>:
  a02c00:	defff904 	addi	sp,sp,-28
  a02c04:	d8c00717 	ldw	r3,28(sp)
  a02c08:	d9000015 	stw	r4,0(sp)
  a02c0c:	d809883a 	mov	r4,sp
  a02c10:	dfc00515 	stw	ra,20(sp)
  a02c14:	d9c00615 	stw	r7,24(sp)
  a02c18:	d9400115 	stw	r5,4(sp)
  a02c1c:	d9800215 	stw	r6,8(sp)
  a02c20:	d8c00415 	stw	r3,16(sp)
  a02c24:	d9c00315 	stw	r7,12(sp)
  a02c28:	0a030c00 	call	a030c0 <__pack_d>
  a02c2c:	dfc00517 	ldw	ra,20(sp)
  a02c30:	dec00704 	addi	sp,sp,28
  a02c34:	f800283a 	ret

00a02c38 <__truncdfsf2>:
  a02c38:	defff804 	addi	sp,sp,-32
  a02c3c:	2005883a 	mov	r2,r4
  a02c40:	2807883a 	mov	r3,r5
  a02c44:	d809883a 	mov	r4,sp
  a02c48:	d9400204 	addi	r5,sp,8
  a02c4c:	d8c00115 	stw	r3,4(sp)
  a02c50:	d8800015 	stw	r2,0(sp)
  a02c54:	dfc00715 	stw	ra,28(sp)
  a02c58:	0a033d40 	call	a033d4 <__unpack_d>
  a02c5c:	d9c00517 	ldw	r7,20(sp)
  a02c60:	da000617 	ldw	r8,24(sp)
  a02c64:	02d00034 	movhi	r11,16384
  a02c68:	5affffc4 	addi	r11,r11,-1
  a02c6c:	3812d7ba 	srli	r9,r7,30
  a02c70:	401a90ba 	slli	r13,r8,2
  a02c74:	3ac4703a 	and	r2,r7,r11
  a02c78:	0007883a 	mov	r3,zero
  a02c7c:	6a52b03a 	or	r9,r13,r9
  a02c80:	10c4b03a 	or	r2,r2,r3
  a02c84:	d9000217 	ldw	r4,8(sp)
  a02c88:	d9400317 	ldw	r5,12(sp)
  a02c8c:	d9800417 	ldw	r6,16(sp)
  a02c90:	480f883a 	mov	r7,r9
  a02c94:	10000126 	beq	r2,zero,a02c9c <__truncdfsf2+0x64>
  a02c98:	49c00054 	ori	r7,r9,1
  a02c9c:	0a030940 	call	a03094 <__make_fp>
  a02ca0:	dfc00717 	ldw	ra,28(sp)
  a02ca4:	dec00804 	addi	sp,sp,32
  a02ca8:	f800283a 	ret

00a02cac <__muldi3>:
  a02cac:	2011883a 	mov	r8,r4
  a02cb0:	427fffcc 	andi	r9,r8,65535
  a02cb4:	4018d43a 	srli	r12,r8,16
  a02cb8:	32bfffcc 	andi	r10,r6,65535
  a02cbc:	3016d43a 	srli	r11,r6,16
  a02cc0:	4a85383a 	mul	r2,r9,r10
  a02cc4:	6295383a 	mul	r10,r12,r10
  a02cc8:	4ad3383a 	mul	r9,r9,r11
  a02ccc:	113fffcc 	andi	r4,r2,65535
  a02cd0:	1004d43a 	srli	r2,r2,16
  a02cd4:	4a93883a 	add	r9,r9,r10
  a02cd8:	3807883a 	mov	r3,r7
  a02cdc:	1245883a 	add	r2,r2,r9
  a02ce0:	280f883a 	mov	r7,r5
  a02ce4:	180b883a 	mov	r5,r3
  a02ce8:	1006943a 	slli	r3,r2,16
  a02cec:	defffd04 	addi	sp,sp,-12
  a02cf0:	dc800215 	stw	r18,8(sp)
  a02cf4:	1907883a 	add	r3,r3,r4
  a02cf8:	dc400115 	stw	r17,4(sp)
  a02cfc:	dc000015 	stw	r16,0(sp)
  a02d00:	4165383a 	mul	r18,r8,r5
  a02d04:	31e3383a 	mul	r17,r6,r7
  a02d08:	1012d43a 	srli	r9,r2,16
  a02d0c:	62d9383a 	mul	r12,r12,r11
  a02d10:	181f883a 	mov	r15,r3
  a02d14:	1280022e 	bgeu	r2,r10,a02d20 <__muldi3+0x74>
  a02d18:	00800074 	movhi	r2,1
  a02d1c:	6099883a 	add	r12,r12,r2
  a02d20:	624d883a 	add	r6,r12,r9
  a02d24:	9187883a 	add	r3,r18,r6
  a02d28:	88c7883a 	add	r3,r17,r3
  a02d2c:	7805883a 	mov	r2,r15
  a02d30:	dc800217 	ldw	r18,8(sp)
  a02d34:	dc400117 	ldw	r17,4(sp)
  a02d38:	dc000017 	ldw	r16,0(sp)
  a02d3c:	dec00304 	addi	sp,sp,12
  a02d40:	f800283a 	ret

00a02d44 <__clzsi2>:
  a02d44:	00bfffd4 	movui	r2,65535
  a02d48:	11000e36 	bltu	r2,r4,a02d84 <__clzsi2+0x40>
  a02d4c:	00803fc4 	movi	r2,255
  a02d50:	01400204 	movi	r5,8
  a02d54:	0007883a 	mov	r3,zero
  a02d58:	11001036 	bltu	r2,r4,a02d9c <__clzsi2+0x58>
  a02d5c:	000b883a 	mov	r5,zero
  a02d60:	20c6d83a 	srl	r3,r4,r3
  a02d64:	00802874 	movhi	r2,161
  a02d68:	1082f904 	addi	r2,r2,3044
  a02d6c:	1887883a 	add	r3,r3,r2
  a02d70:	18800003 	ldbu	r2,0(r3)
  a02d74:	00c00804 	movi	r3,32
  a02d78:	2885883a 	add	r2,r5,r2
  a02d7c:	1885c83a 	sub	r2,r3,r2
  a02d80:	f800283a 	ret
  a02d84:	01400404 	movi	r5,16
  a02d88:	00804034 	movhi	r2,256
  a02d8c:	10bfffc4 	addi	r2,r2,-1
  a02d90:	2807883a 	mov	r3,r5
  a02d94:	113ff22e 	bgeu	r2,r4,a02d60 <__clzsi2+0x1c>
  a02d98:	01400604 	movi	r5,24
  a02d9c:	2807883a 	mov	r3,r5
  a02da0:	20c6d83a 	srl	r3,r4,r3
  a02da4:	00802874 	movhi	r2,161
  a02da8:	1082f904 	addi	r2,r2,3044
  a02dac:	1887883a 	add	r3,r3,r2
  a02db0:	18800003 	ldbu	r2,0(r3)
  a02db4:	00c00804 	movi	r3,32
  a02db8:	2885883a 	add	r2,r5,r2
  a02dbc:	1885c83a 	sub	r2,r3,r2
  a02dc0:	f800283a 	ret

00a02dc4 <__pack_f>:
  a02dc4:	20c00017 	ldw	r3,0(r4)
  a02dc8:	01c00044 	movi	r7,1
  a02dcc:	21800317 	ldw	r6,12(r4)
  a02dd0:	21400117 	ldw	r5,4(r4)
  a02dd4:	38c02d2e 	bgeu	r7,r3,a02e8c <__pack_f+0xc8>
  a02dd8:	00800104 	movi	r2,4
  a02ddc:	18802826 	beq	r3,r2,a02e80 <__pack_f+0xbc>
  a02de0:	00800084 	movi	r2,2
  a02de4:	18800126 	beq	r3,r2,a02dec <__pack_f+0x28>
  a02de8:	3000101e 	bne	r6,zero,a02e2c <__pack_f+0x68>
  a02dec:	000d883a 	mov	r6,zero
  a02df0:	0007883a 	mov	r3,zero
  a02df4:	19003fcc 	andi	r4,r3,255
  a02df8:	200895fa 	slli	r4,r4,23
  a02dfc:	00c02034 	movhi	r3,128
  a02e00:	18ffffc4 	addi	r3,r3,-1
  a02e04:	30c6703a 	and	r3,r6,r3
  a02e08:	10a0002c 	andhi	r2,r2,32768
  a02e0c:	10c4b03a 	or	r2,r2,r3
  a02e10:	280a97fa 	slli	r5,r5,31
  a02e14:	1104b03a 	or	r2,r2,r4
  a02e18:	00e00034 	movhi	r3,32768
  a02e1c:	18ffffc4 	addi	r3,r3,-1
  a02e20:	10c4703a 	and	r2,r2,r3
  a02e24:	1144b03a 	or	r2,r2,r5
  a02e28:	f800283a 	ret
  a02e2c:	21000217 	ldw	r4,8(r4)
  a02e30:	00bfe084 	movi	r2,-126
  a02e34:	20801b16 	blt	r4,r2,a02ea4 <__pack_f+0xe0>
  a02e38:	00801fc4 	movi	r2,127
  a02e3c:	11001016 	blt	r2,r4,a02e80 <__pack_f+0xbc>
  a02e40:	308e703a 	and	r7,r6,r2
  a02e44:	2087883a 	add	r3,r4,r2
  a02e48:	00801004 	movi	r2,64
  a02e4c:	38800526 	beq	r7,r2,a02e64 <__pack_f+0xa0>
  a02e50:	31800fc4 	addi	r6,r6,63
  a02e54:	30000716 	blt	r6,zero,a02e74 <__pack_f+0xb0>
  a02e58:	300490ba 	slli	r2,r6,2
  a02e5c:	100cd27a 	srli	r6,r2,9
  a02e60:	003fe406 	br	a02df4 <__pack_f+0x30>
  a02e64:	3080200c 	andi	r2,r6,128
  a02e68:	103ffa26 	beq	r2,zero,a02e54 <__pack_f+0x90>
  a02e6c:	31cd883a 	add	r6,r6,r7
  a02e70:	003ff806 	br	a02e54 <__pack_f+0x90>
  a02e74:	300cd07a 	srli	r6,r6,1
  a02e78:	18c00044 	addi	r3,r3,1
  a02e7c:	003ff606 	br	a02e58 <__pack_f+0x94>
  a02e80:	000d883a 	mov	r6,zero
  a02e84:	00ffffc4 	movi	r3,-1
  a02e88:	003fda06 	br	a02df4 <__pack_f+0x30>
  a02e8c:	31800434 	orhi	r6,r6,16
  a02e90:	00802034 	movhi	r2,128
  a02e94:	10bfffc4 	addi	r2,r2,-1
  a02e98:	308c703a 	and	r6,r6,r2
  a02e9c:	00ffffc4 	movi	r3,-1
  a02ea0:	003fd406 	br	a02df4 <__pack_f+0x30>
  a02ea4:	1109c83a 	sub	r4,r2,r4
  a02ea8:	00800644 	movi	r2,25
  a02eac:	11001216 	blt	r2,r4,a02ef8 <__pack_f+0x134>
  a02eb0:	3904983a 	sll	r2,r7,r4
  a02eb4:	3106d83a 	srl	r3,r6,r4
  a02eb8:	10bfffc4 	addi	r2,r2,-1
  a02ebc:	3084703a 	and	r2,r6,r2
  a02ec0:	1004c03a 	cmpne	r2,r2,zero
  a02ec4:	1886b03a 	or	r3,r3,r2
  a02ec8:	19001fcc 	andi	r4,r3,127
  a02ecc:	00801004 	movi	r2,64
  a02ed0:	20800c26 	beq	r4,r2,a02f04 <__pack_f+0x140>
  a02ed4:	18c00fc4 	addi	r3,r3,63
  a02ed8:	00900034 	movhi	r2,16384
  a02edc:	10bfffc4 	addi	r2,r2,-1
  a02ee0:	180cd1fa 	srli	r6,r3,7
  a02ee4:	10c7803a 	cmpltu	r3,r2,r3
  a02ee8:	00802034 	movhi	r2,128
  a02eec:	10bfffc4 	addi	r2,r2,-1
  a02ef0:	308c703a 	and	r6,r6,r2
  a02ef4:	003fbf06 	br	a02df4 <__pack_f+0x30>
  a02ef8:	0007883a 	mov	r3,zero
  a02efc:	000d883a 	mov	r6,zero
  a02f00:	003ff906 	br	a02ee8 <__pack_f+0x124>
  a02f04:	1880200c 	andi	r2,r3,128
  a02f08:	10000126 	beq	r2,zero,a02f10 <__pack_f+0x14c>
  a02f0c:	1907883a 	add	r3,r3,r4
  a02f10:	180cd1fa 	srli	r6,r3,7
  a02f14:	00900034 	movhi	r2,16384
  a02f18:	10bfffc4 	addi	r2,r2,-1
  a02f1c:	10c7803a 	cmpltu	r3,r2,r3
  a02f20:	003ff106 	br	a02ee8 <__pack_f+0x124>

00a02f24 <__unpack_f>:
  a02f24:	21800017 	ldw	r6,0(r4)
  a02f28:	00c02034 	movhi	r3,128
  a02f2c:	18ffffc4 	addi	r3,r3,-1
  a02f30:	3004d5fa 	srli	r2,r6,23
  a02f34:	3008d7fa 	srli	r4,r6,31
  a02f38:	30ce703a 	and	r7,r6,r3
  a02f3c:	10c03fcc 	andi	r3,r2,255
  a02f40:	29000115 	stw	r4,4(r5)
  a02f44:	1800131e 	bne	r3,zero,a02f94 <__unpack_f+0x70>
  a02f48:	38000f26 	beq	r7,zero,a02f88 <__unpack_f+0x64>
  a02f4c:	380691fa 	slli	r3,r7,7
  a02f50:	01bfe084 	movi	r6,-126
  a02f54:	008000c4 	movi	r2,3
  a02f58:	01100034 	movhi	r4,16384
  a02f5c:	213fffc4 	addi	r4,r4,-1
  a02f60:	28800015 	stw	r2,0(r5)
  a02f64:	29800215 	stw	r6,8(r5)
  a02f68:	20c00536 	bltu	r4,r3,a02f80 <__unpack_f+0x5c>
  a02f6c:	3005883a 	mov	r2,r6
  a02f70:	18c7883a 	add	r3,r3,r3
  a02f74:	10bfffc4 	addi	r2,r2,-1
  a02f78:	20fffd2e 	bgeu	r4,r3,a02f70 <__unpack_f+0x4c>
  a02f7c:	28800215 	stw	r2,8(r5)
  a02f80:	28c00315 	stw	r3,12(r5)
  a02f84:	f800283a 	ret
  a02f88:	00800084 	movi	r2,2
  a02f8c:	28800015 	stw	r2,0(r5)
  a02f90:	f800283a 	ret
  a02f94:	00803fc4 	movi	r2,255
  a02f98:	18800826 	beq	r3,r2,a02fbc <__unpack_f+0x98>
  a02f9c:	380491fa 	slli	r2,r7,7
  a02fa0:	18ffe044 	addi	r3,r3,-127
  a02fa4:	28c00215 	stw	r3,8(r5)
  a02fa8:	10900034 	orhi	r2,r2,16384
  a02fac:	28800315 	stw	r2,12(r5)
  a02fb0:	008000c4 	movi	r2,3
  a02fb4:	28800015 	stw	r2,0(r5)
  a02fb8:	f800283a 	ret
  a02fbc:	3800031e 	bne	r7,zero,a02fcc <__unpack_f+0xa8>
  a02fc0:	00800104 	movi	r2,4
  a02fc4:	28800015 	stw	r2,0(r5)
  a02fc8:	f800283a 	ret
  a02fcc:	3080042c 	andhi	r2,r6,16
  a02fd0:	10000426 	beq	r2,zero,a02fe4 <__unpack_f+0xc0>
  a02fd4:	00800044 	movi	r2,1
  a02fd8:	28800015 	stw	r2,0(r5)
  a02fdc:	29c00315 	stw	r7,12(r5)
  a02fe0:	f800283a 	ret
  a02fe4:	28000015 	stw	zero,0(r5)
  a02fe8:	003ffc06 	br	a02fdc <__unpack_f+0xb8>

00a02fec <__fpcmp_parts_f>:
  a02fec:	21800017 	ldw	r6,0(r4)
  a02ff0:	00c00044 	movi	r3,1
  a02ff4:	19800a2e 	bgeu	r3,r6,a03020 <__fpcmp_parts_f+0x34>
  a02ff8:	28800017 	ldw	r2,0(r5)
  a02ffc:	1880082e 	bgeu	r3,r2,a03020 <__fpcmp_parts_f+0x34>
  a03000:	00c00104 	movi	r3,4
  a03004:	30c01e26 	beq	r6,r3,a03080 <__fpcmp_parts_f+0x94>
  a03008:	10c01a26 	beq	r2,r3,a03074 <__fpcmp_parts_f+0x88>
  a0300c:	00c00084 	movi	r3,2
  a03010:	30c00526 	beq	r6,r3,a03028 <__fpcmp_parts_f+0x3c>
  a03014:	10c0071e 	bne	r2,r3,a03034 <__fpcmp_parts_f+0x48>
  a03018:	20800117 	ldw	r2,4(r4)
  a0301c:	1000091e 	bne	r2,zero,a03044 <__fpcmp_parts_f+0x58>
  a03020:	00800044 	movi	r2,1
  a03024:	f800283a 	ret
  a03028:	10c0121e 	bne	r2,r3,a03074 <__fpcmp_parts_f+0x88>
  a0302c:	0005883a 	mov	r2,zero
  a03030:	f800283a 	ret
  a03034:	20c00117 	ldw	r3,4(r4)
  a03038:	28800117 	ldw	r2,4(r5)
  a0303c:	18800326 	beq	r3,r2,a0304c <__fpcmp_parts_f+0x60>
  a03040:	183ff726 	beq	r3,zero,a03020 <__fpcmp_parts_f+0x34>
  a03044:	00bfffc4 	movi	r2,-1
  a03048:	f800283a 	ret
  a0304c:	21800217 	ldw	r6,8(r4)
  a03050:	28800217 	ldw	r2,8(r5)
  a03054:	11bffa16 	blt	r2,r6,a03040 <__fpcmp_parts_f+0x54>
  a03058:	30800416 	blt	r6,r2,a0306c <__fpcmp_parts_f+0x80>
  a0305c:	21000317 	ldw	r4,12(r4)
  a03060:	29400317 	ldw	r5,12(r5)
  a03064:	293ff636 	bltu	r5,r4,a03040 <__fpcmp_parts_f+0x54>
  a03068:	217ff02e 	bgeu	r4,r5,a0302c <__fpcmp_parts_f+0x40>
  a0306c:	183fec1e 	bne	r3,zero,a03020 <__fpcmp_parts_f+0x34>
  a03070:	003ff406 	br	a03044 <__fpcmp_parts_f+0x58>
  a03074:	28800117 	ldw	r2,4(r5)
  a03078:	103fe91e 	bne	r2,zero,a03020 <__fpcmp_parts_f+0x34>
  a0307c:	003ff106 	br	a03044 <__fpcmp_parts_f+0x58>
  a03080:	11bfe51e 	bne	r2,r6,a03018 <__fpcmp_parts_f+0x2c>
  a03084:	28c00117 	ldw	r3,4(r5)
  a03088:	20800117 	ldw	r2,4(r4)
  a0308c:	1885c83a 	sub	r2,r3,r2
  a03090:	f800283a 	ret

00a03094 <__make_fp>:
  a03094:	defffb04 	addi	sp,sp,-20
  a03098:	d9000015 	stw	r4,0(sp)
  a0309c:	d809883a 	mov	r4,sp
  a030a0:	dfc00415 	stw	ra,16(sp)
  a030a4:	d9400115 	stw	r5,4(sp)
  a030a8:	d9800215 	stw	r6,8(sp)
  a030ac:	d9c00315 	stw	r7,12(sp)
  a030b0:	0a02dc40 	call	a02dc4 <__pack_f>
  a030b4:	dfc00417 	ldw	ra,16(sp)
  a030b8:	dec00504 	addi	sp,sp,20
  a030bc:	f800283a 	ret

00a030c0 <__pack_d>:
  a030c0:	20c00017 	ldw	r3,0(r4)
  a030c4:	defffd04 	addi	sp,sp,-12
  a030c8:	dc000015 	stw	r16,0(sp)
  a030cc:	dc800215 	stw	r18,8(sp)
  a030d0:	dc400115 	stw	r17,4(sp)
  a030d4:	00800044 	movi	r2,1
  a030d8:	22000317 	ldw	r8,12(r4)
  a030dc:	001f883a 	mov	r15,zero
  a030e0:	22400417 	ldw	r9,16(r4)
  a030e4:	24000117 	ldw	r16,4(r4)
  a030e8:	10c0552e 	bgeu	r2,r3,a03240 <__pack_d+0x180>
  a030ec:	00800104 	movi	r2,4
  a030f0:	18804f26 	beq	r3,r2,a03230 <__pack_d+0x170>
  a030f4:	00800084 	movi	r2,2
  a030f8:	18800226 	beq	r3,r2,a03104 <__pack_d+0x44>
  a030fc:	4244b03a 	or	r2,r8,r9
  a03100:	10001a1e 	bne	r2,zero,a0316c <__pack_d+0xac>
  a03104:	000d883a 	mov	r6,zero
  a03108:	000f883a 	mov	r7,zero
  a0310c:	0011883a 	mov	r8,zero
  a03110:	00800434 	movhi	r2,16
  a03114:	10bfffc4 	addi	r2,r2,-1
  a03118:	301d883a 	mov	r14,r6
  a0311c:	3884703a 	and	r2,r7,r2
  a03120:	400a953a 	slli	r5,r8,20
  a03124:	79bffc2c 	andhi	r6,r15,65520
  a03128:	308cb03a 	or	r6,r6,r2
  a0312c:	00e00434 	movhi	r3,32784
  a03130:	18ffffc4 	addi	r3,r3,-1
  a03134:	800497fa 	slli	r2,r16,31
  a03138:	30c6703a 	and	r3,r6,r3
  a0313c:	1946b03a 	or	r3,r3,r5
  a03140:	01600034 	movhi	r5,32768
  a03144:	297fffc4 	addi	r5,r5,-1
  a03148:	194a703a 	and	r5,r3,r5
  a0314c:	288ab03a 	or	r5,r5,r2
  a03150:	2807883a 	mov	r3,r5
  a03154:	7005883a 	mov	r2,r14
  a03158:	dc800217 	ldw	r18,8(sp)
  a0315c:	dc400117 	ldw	r17,4(sp)
  a03160:	dc000017 	ldw	r16,0(sp)
  a03164:	dec00304 	addi	sp,sp,12
  a03168:	f800283a 	ret
  a0316c:	21000217 	ldw	r4,8(r4)
  a03170:	00bf0084 	movi	r2,-1022
  a03174:	20803f16 	blt	r4,r2,a03274 <__pack_d+0x1b4>
  a03178:	0080ffc4 	movi	r2,1023
  a0317c:	11002c16 	blt	r2,r4,a03230 <__pack_d+0x170>
  a03180:	00803fc4 	movi	r2,255
  a03184:	408c703a 	and	r6,r8,r2
  a03188:	00802004 	movi	r2,128
  a0318c:	0007883a 	mov	r3,zero
  a03190:	000f883a 	mov	r7,zero
  a03194:	2280ffc4 	addi	r10,r4,1023
  a03198:	30801e26 	beq	r6,r2,a03214 <__pack_d+0x154>
  a0319c:	00801fc4 	movi	r2,127
  a031a0:	4089883a 	add	r4,r8,r2
  a031a4:	220d803a 	cmpltu	r6,r4,r8
  a031a8:	324d883a 	add	r6,r6,r9
  a031ac:	2011883a 	mov	r8,r4
  a031b0:	3013883a 	mov	r9,r6
  a031b4:	00880034 	movhi	r2,8192
  a031b8:	10bfffc4 	addi	r2,r2,-1
  a031bc:	12400d36 	bltu	r2,r9,a031f4 <__pack_d+0x134>
  a031c0:	4804963a 	slli	r2,r9,24
  a031c4:	400cd23a 	srli	r6,r8,8
  a031c8:	480ed23a 	srli	r7,r9,8
  a031cc:	013fffc4 	movi	r4,-1
  a031d0:	118cb03a 	or	r6,r2,r6
  a031d4:	01400434 	movhi	r5,16
  a031d8:	297fffc4 	addi	r5,r5,-1
  a031dc:	3104703a 	and	r2,r6,r4
  a031e0:	3946703a 	and	r3,r7,r5
  a031e4:	5201ffcc 	andi	r8,r10,2047
  a031e8:	100d883a 	mov	r6,r2
  a031ec:	180f883a 	mov	r7,r3
  a031f0:	003fc706 	br	a03110 <__pack_d+0x50>
  a031f4:	480897fa 	slli	r4,r9,31
  a031f8:	4004d07a 	srli	r2,r8,1
  a031fc:	4806d07a 	srli	r3,r9,1
  a03200:	52800044 	addi	r10,r10,1
  a03204:	2084b03a 	or	r2,r4,r2
  a03208:	1011883a 	mov	r8,r2
  a0320c:	1813883a 	mov	r9,r3
  a03210:	003feb06 	br	a031c0 <__pack_d+0x100>
  a03214:	383fe11e 	bne	r7,zero,a0319c <__pack_d+0xdc>
  a03218:	01004004 	movi	r4,256
  a0321c:	4104703a 	and	r2,r8,r4
  a03220:	10c4b03a 	or	r2,r2,r3
  a03224:	103fe326 	beq	r2,zero,a031b4 <__pack_d+0xf4>
  a03228:	3005883a 	mov	r2,r6
  a0322c:	003fdc06 	br	a031a0 <__pack_d+0xe0>
  a03230:	000d883a 	mov	r6,zero
  a03234:	000f883a 	mov	r7,zero
  a03238:	0201ffc4 	movi	r8,2047
  a0323c:	003fb406 	br	a03110 <__pack_d+0x50>
  a03240:	0005883a 	mov	r2,zero
  a03244:	00c00234 	movhi	r3,8
  a03248:	408cb03a 	or	r6,r8,r2
  a0324c:	48ceb03a 	or	r7,r9,r3
  a03250:	013fffc4 	movi	r4,-1
  a03254:	01400434 	movhi	r5,16
  a03258:	297fffc4 	addi	r5,r5,-1
  a0325c:	3104703a 	and	r2,r6,r4
  a03260:	3946703a 	and	r3,r7,r5
  a03264:	100d883a 	mov	r6,r2
  a03268:	180f883a 	mov	r7,r3
  a0326c:	0201ffc4 	movi	r8,2047
  a03270:	003fa706 	br	a03110 <__pack_d+0x50>
  a03274:	1109c83a 	sub	r4,r2,r4
  a03278:	00800e04 	movi	r2,56
  a0327c:	11004316 	blt	r2,r4,a0338c <__pack_d+0x2cc>
  a03280:	21fff804 	addi	r7,r4,-32
  a03284:	38004516 	blt	r7,zero,a0339c <__pack_d+0x2dc>
  a03288:	49d8d83a 	srl	r12,r9,r7
  a0328c:	001b883a 	mov	r13,zero
  a03290:	0023883a 	mov	r17,zero
  a03294:	01400044 	movi	r5,1
  a03298:	0025883a 	mov	r18,zero
  a0329c:	38004716 	blt	r7,zero,a033bc <__pack_d+0x2fc>
  a032a0:	29d6983a 	sll	r11,r5,r7
  a032a4:	0015883a 	mov	r10,zero
  a032a8:	00bfffc4 	movi	r2,-1
  a032ac:	5089883a 	add	r4,r10,r2
  a032b0:	588b883a 	add	r5,r11,r2
  a032b4:	228d803a 	cmpltu	r6,r4,r10
  a032b8:	314b883a 	add	r5,r6,r5
  a032bc:	4104703a 	and	r2,r8,r4
  a032c0:	4946703a 	and	r3,r9,r5
  a032c4:	10c4b03a 	or	r2,r2,r3
  a032c8:	10000226 	beq	r2,zero,a032d4 <__pack_d+0x214>
  a032cc:	04400044 	movi	r17,1
  a032d0:	0025883a 	mov	r18,zero
  a032d4:	00803fc4 	movi	r2,255
  a032d8:	644eb03a 	or	r7,r12,r17
  a032dc:	3892703a 	and	r9,r7,r2
  a032e0:	00802004 	movi	r2,128
  a032e4:	6c90b03a 	or	r8,r13,r18
  a032e8:	0015883a 	mov	r10,zero
  a032ec:	48801626 	beq	r9,r2,a03348 <__pack_d+0x288>
  a032f0:	01001fc4 	movi	r4,127
  a032f4:	3905883a 	add	r2,r7,r4
  a032f8:	11cd803a 	cmpltu	r6,r2,r7
  a032fc:	320d883a 	add	r6,r6,r8
  a03300:	100f883a 	mov	r7,r2
  a03304:	00840034 	movhi	r2,4096
  a03308:	10bfffc4 	addi	r2,r2,-1
  a0330c:	3011883a 	mov	r8,r6
  a03310:	0007883a 	mov	r3,zero
  a03314:	11801b36 	bltu	r2,r6,a03384 <__pack_d+0x2c4>
  a03318:	4004963a 	slli	r2,r8,24
  a0331c:	3808d23a 	srli	r4,r7,8
  a03320:	400ad23a 	srli	r5,r8,8
  a03324:	1813883a 	mov	r9,r3
  a03328:	1108b03a 	or	r4,r2,r4
  a0332c:	00bfffc4 	movi	r2,-1
  a03330:	00c00434 	movhi	r3,16
  a03334:	18ffffc4 	addi	r3,r3,-1
  a03338:	208c703a 	and	r6,r4,r2
  a0333c:	28ce703a 	and	r7,r5,r3
  a03340:	4a01ffcc 	andi	r8,r9,2047
  a03344:	003f7206 	br	a03110 <__pack_d+0x50>
  a03348:	503fe91e 	bne	r10,zero,a032f0 <__pack_d+0x230>
  a0334c:	01004004 	movi	r4,256
  a03350:	3904703a 	and	r2,r7,r4
  a03354:	0007883a 	mov	r3,zero
  a03358:	10c4b03a 	or	r2,r2,r3
  a0335c:	10000626 	beq	r2,zero,a03378 <__pack_d+0x2b8>
  a03360:	3a45883a 	add	r2,r7,r9
  a03364:	11cd803a 	cmpltu	r6,r2,r7
  a03368:	320d883a 	add	r6,r6,r8
  a0336c:	100f883a 	mov	r7,r2
  a03370:	3011883a 	mov	r8,r6
  a03374:	0007883a 	mov	r3,zero
  a03378:	00840034 	movhi	r2,4096
  a0337c:	10bfffc4 	addi	r2,r2,-1
  a03380:	123fe52e 	bgeu	r2,r8,a03318 <__pack_d+0x258>
  a03384:	00c00044 	movi	r3,1
  a03388:	003fe306 	br	a03318 <__pack_d+0x258>
  a0338c:	0009883a 	mov	r4,zero
  a03390:	0013883a 	mov	r9,zero
  a03394:	000b883a 	mov	r5,zero
  a03398:	003fe406 	br	a0332c <__pack_d+0x26c>
  a0339c:	4a47883a 	add	r3,r9,r9
  a033a0:	008007c4 	movi	r2,31
  a033a4:	1105c83a 	sub	r2,r2,r4
  a033a8:	1886983a 	sll	r3,r3,r2
  a033ac:	4118d83a 	srl	r12,r8,r4
  a033b0:	491ad83a 	srl	r13,r9,r4
  a033b4:	1b18b03a 	or	r12,r3,r12
  a033b8:	003fb506 	br	a03290 <__pack_d+0x1d0>
  a033bc:	2806d07a 	srli	r3,r5,1
  a033c0:	008007c4 	movi	r2,31
  a033c4:	1105c83a 	sub	r2,r2,r4
  a033c8:	1896d83a 	srl	r11,r3,r2
  a033cc:	2914983a 	sll	r10,r5,r4
  a033d0:	003fb506 	br	a032a8 <__pack_d+0x1e8>

00a033d4 <__unpack_d>:
  a033d4:	20c00117 	ldw	r3,4(r4)
  a033d8:	22400017 	ldw	r9,0(r4)
  a033dc:	00800434 	movhi	r2,16
  a033e0:	10bfffc4 	addi	r2,r2,-1
  a033e4:	1808d53a 	srli	r4,r3,20
  a033e8:	180cd7fa 	srli	r6,r3,31
  a033ec:	1894703a 	and	r10,r3,r2
  a033f0:	2201ffcc 	andi	r8,r4,2047
  a033f4:	281b883a 	mov	r13,r5
  a033f8:	4817883a 	mov	r11,r9
  a033fc:	29800115 	stw	r6,4(r5)
  a03400:	5019883a 	mov	r12,r10
  a03404:	40001e1e 	bne	r8,zero,a03480 <__unpack_d+0xac>
  a03408:	4a84b03a 	or	r2,r9,r10
  a0340c:	10001926 	beq	r2,zero,a03474 <__unpack_d+0xa0>
  a03410:	4804d63a 	srli	r2,r9,24
  a03414:	500c923a 	slli	r6,r10,8
  a03418:	013f0084 	movi	r4,-1022
  a0341c:	00c40034 	movhi	r3,4096
  a03420:	18ffffc4 	addi	r3,r3,-1
  a03424:	118cb03a 	or	r6,r2,r6
  a03428:	008000c4 	movi	r2,3
  a0342c:	480a923a 	slli	r5,r9,8
  a03430:	68800015 	stw	r2,0(r13)
  a03434:	69000215 	stw	r4,8(r13)
  a03438:	19800b36 	bltu	r3,r6,a03468 <__unpack_d+0x94>
  a0343c:	200f883a 	mov	r7,r4
  a03440:	1811883a 	mov	r8,r3
  a03444:	2945883a 	add	r2,r5,r5
  a03448:	1149803a 	cmpltu	r4,r2,r5
  a0344c:	3187883a 	add	r3,r6,r6
  a03450:	20c9883a 	add	r4,r4,r3
  a03454:	100b883a 	mov	r5,r2
  a03458:	200d883a 	mov	r6,r4
  a0345c:	39ffffc4 	addi	r7,r7,-1
  a03460:	413ff82e 	bgeu	r8,r4,a03444 <__unpack_d+0x70>
  a03464:	69c00215 	stw	r7,8(r13)
  a03468:	69800415 	stw	r6,16(r13)
  a0346c:	69400315 	stw	r5,12(r13)
  a03470:	f800283a 	ret
  a03474:	00800084 	movi	r2,2
  a03478:	28800015 	stw	r2,0(r5)
  a0347c:	f800283a 	ret
  a03480:	0081ffc4 	movi	r2,2047
  a03484:	40800f26 	beq	r8,r2,a034c4 <__unpack_d+0xf0>
  a03488:	480cd63a 	srli	r6,r9,24
  a0348c:	5006923a 	slli	r3,r10,8
  a03490:	4804923a 	slli	r2,r9,8
  a03494:	0009883a 	mov	r4,zero
  a03498:	30c6b03a 	or	r3,r6,r3
  a0349c:	01440034 	movhi	r5,4096
  a034a0:	110cb03a 	or	r6,r2,r4
  a034a4:	423f0044 	addi	r8,r8,-1023
  a034a8:	194eb03a 	or	r7,r3,r5
  a034ac:	008000c4 	movi	r2,3
  a034b0:	69c00415 	stw	r7,16(r13)
  a034b4:	6a000215 	stw	r8,8(r13)
  a034b8:	68800015 	stw	r2,0(r13)
  a034bc:	69800315 	stw	r6,12(r13)
  a034c0:	f800283a 	ret
  a034c4:	4a84b03a 	or	r2,r9,r10
  a034c8:	1000031e 	bne	r2,zero,a034d8 <__unpack_d+0x104>
  a034cc:	00800104 	movi	r2,4
  a034d0:	28800015 	stw	r2,0(r5)
  a034d4:	f800283a 	ret
  a034d8:	0009883a 	mov	r4,zero
  a034dc:	01400234 	movhi	r5,8
  a034e0:	4904703a 	and	r2,r9,r4
  a034e4:	5146703a 	and	r3,r10,r5
  a034e8:	10c4b03a 	or	r2,r2,r3
  a034ec:	10000526 	beq	r2,zero,a03504 <__unpack_d+0x130>
  a034f0:	00800044 	movi	r2,1
  a034f4:	68800015 	stw	r2,0(r13)
  a034f8:	6b000415 	stw	r12,16(r13)
  a034fc:	6ac00315 	stw	r11,12(r13)
  a03500:	f800283a 	ret
  a03504:	68000015 	stw	zero,0(r13)
  a03508:	003ffb06 	br	a034f8 <__unpack_d+0x124>

00a0350c <__fpcmp_parts_d>:
  a0350c:	21800017 	ldw	r6,0(r4)
  a03510:	00c00044 	movi	r3,1
  a03514:	19800a2e 	bgeu	r3,r6,a03540 <__fpcmp_parts_d+0x34>
  a03518:	28800017 	ldw	r2,0(r5)
  a0351c:	1880082e 	bgeu	r3,r2,a03540 <__fpcmp_parts_d+0x34>
  a03520:	00c00104 	movi	r3,4
  a03524:	30c02626 	beq	r6,r3,a035c0 <__fpcmp_parts_d+0xb4>
  a03528:	10c02226 	beq	r2,r3,a035b4 <__fpcmp_parts_d+0xa8>
  a0352c:	00c00084 	movi	r3,2
  a03530:	30c00526 	beq	r6,r3,a03548 <__fpcmp_parts_d+0x3c>
  a03534:	10c0071e 	bne	r2,r3,a03554 <__fpcmp_parts_d+0x48>
  a03538:	20800117 	ldw	r2,4(r4)
  a0353c:	1000091e 	bne	r2,zero,a03564 <__fpcmp_parts_d+0x58>
  a03540:	00800044 	movi	r2,1
  a03544:	f800283a 	ret
  a03548:	10c01a1e 	bne	r2,r3,a035b4 <__fpcmp_parts_d+0xa8>
  a0354c:	0005883a 	mov	r2,zero
  a03550:	f800283a 	ret
  a03554:	22000117 	ldw	r8,4(r4)
  a03558:	28800117 	ldw	r2,4(r5)
  a0355c:	40800326 	beq	r8,r2,a0356c <__fpcmp_parts_d+0x60>
  a03560:	403ff726 	beq	r8,zero,a03540 <__fpcmp_parts_d+0x34>
  a03564:	00bfffc4 	movi	r2,-1
  a03568:	f800283a 	ret
  a0356c:	20c00217 	ldw	r3,8(r4)
  a03570:	28800217 	ldw	r2,8(r5)
  a03574:	10fffa16 	blt	r2,r3,a03560 <__fpcmp_parts_d+0x54>
  a03578:	18800916 	blt	r3,r2,a035a0 <__fpcmp_parts_d+0x94>
  a0357c:	21c00417 	ldw	r7,16(r4)
  a03580:	28c00417 	ldw	r3,16(r5)
  a03584:	21800317 	ldw	r6,12(r4)
  a03588:	28800317 	ldw	r2,12(r5)
  a0358c:	19fff436 	bltu	r3,r7,a03560 <__fpcmp_parts_d+0x54>
  a03590:	38c00526 	beq	r7,r3,a035a8 <__fpcmp_parts_d+0x9c>
  a03594:	38c00236 	bltu	r7,r3,a035a0 <__fpcmp_parts_d+0x94>
  a03598:	19ffec1e 	bne	r3,r7,a0354c <__fpcmp_parts_d+0x40>
  a0359c:	30bfeb2e 	bgeu	r6,r2,a0354c <__fpcmp_parts_d+0x40>
  a035a0:	403fe71e 	bne	r8,zero,a03540 <__fpcmp_parts_d+0x34>
  a035a4:	003fef06 	br	a03564 <__fpcmp_parts_d+0x58>
  a035a8:	11bffa2e 	bgeu	r2,r6,a03594 <__fpcmp_parts_d+0x88>
  a035ac:	403fe426 	beq	r8,zero,a03540 <__fpcmp_parts_d+0x34>
  a035b0:	003fec06 	br	a03564 <__fpcmp_parts_d+0x58>
  a035b4:	28800117 	ldw	r2,4(r5)
  a035b8:	103fe11e 	bne	r2,zero,a03540 <__fpcmp_parts_d+0x34>
  a035bc:	003fe906 	br	a03564 <__fpcmp_parts_d+0x58>
  a035c0:	11bfdd1e 	bne	r2,r6,a03538 <__fpcmp_parts_d+0x2c>
  a035c4:	28c00117 	ldw	r3,4(r5)
  a035c8:	20800117 	ldw	r2,4(r4)
  a035cc:	1885c83a 	sub	r2,r3,r2
  a035d0:	f800283a 	ret

00a035d4 <__errno>:
  a035d4:	00c02874 	movhi	r3,161
  a035d8:	18caec04 	addi	r3,r3,11184
  a035dc:	18800017 	ldw	r2,0(r3)
  a035e0:	f800283a 	ret

00a035e4 <printf>:
  a035e4:	defffb04 	addi	sp,sp,-20
  a035e8:	dfc00115 	stw	ra,4(sp)
  a035ec:	d9400215 	stw	r5,8(sp)
  a035f0:	d9800315 	stw	r6,12(sp)
  a035f4:	d9c00415 	stw	r7,16(sp)
  a035f8:	00802874 	movhi	r2,161
  a035fc:	108aec04 	addi	r2,r2,11184
  a03600:	10c00017 	ldw	r3,0(r2)
  a03604:	200b883a 	mov	r5,r4
  a03608:	d8800204 	addi	r2,sp,8
  a0360c:	19000217 	ldw	r4,8(r3)
  a03610:	100d883a 	mov	r6,r2
  a03614:	d8800015 	stw	r2,0(sp)
  a03618:	0a0575c0 	call	a0575c <__vfprintf_internal>
  a0361c:	dfc00117 	ldw	ra,4(sp)
  a03620:	dec00504 	addi	sp,sp,20
  a03624:	f800283a 	ret

00a03628 <_printf_r>:
  a03628:	defffc04 	addi	sp,sp,-16
  a0362c:	dfc00115 	stw	ra,4(sp)
  a03630:	d9800215 	stw	r6,8(sp)
  a03634:	d9c00315 	stw	r7,12(sp)
  a03638:	280d883a 	mov	r6,r5
  a0363c:	21400217 	ldw	r5,8(r4)
  a03640:	d8c00204 	addi	r3,sp,8
  a03644:	180f883a 	mov	r7,r3
  a03648:	d8c00015 	stw	r3,0(sp)
  a0364c:	0a038b00 	call	a038b0 <___vfprintf_internal_r>
  a03650:	dfc00117 	ldw	ra,4(sp)
  a03654:	dec00404 	addi	sp,sp,16
  a03658:	f800283a 	ret

00a0365c <_puts_r>:
  a0365c:	defff604 	addi	sp,sp,-40
  a03660:	dc400715 	stw	r17,28(sp)
  a03664:	2023883a 	mov	r17,r4
  a03668:	2809883a 	mov	r4,r5
  a0366c:	dfc00915 	stw	ra,36(sp)
  a03670:	dcc00815 	stw	r19,32(sp)
  a03674:	2827883a 	mov	r19,r5
  a03678:	0a037e40 	call	a037e4 <strlen>
  a0367c:	89400217 	ldw	r5,8(r17)
  a03680:	00c02874 	movhi	r3,161
  a03684:	18c33a04 	addi	r3,r3,3304
  a03688:	01c00044 	movi	r7,1
  a0368c:	12000044 	addi	r8,r2,1
  a03690:	d8c00515 	stw	r3,20(sp)
  a03694:	d9c00615 	stw	r7,24(sp)
  a03698:	d8c00304 	addi	r3,sp,12
  a0369c:	01c00084 	movi	r7,2
  a036a0:	8809883a 	mov	r4,r17
  a036a4:	d80d883a 	mov	r6,sp
  a036a8:	d8c00015 	stw	r3,0(sp)
  a036ac:	dcc00315 	stw	r19,12(sp)
  a036b0:	da000215 	stw	r8,8(sp)
  a036b4:	d9c00115 	stw	r7,4(sp)
  a036b8:	d8800415 	stw	r2,16(sp)
  a036bc:	0a079b80 	call	a079b8 <__sfvwrite_r>
  a036c0:	00ffffc4 	movi	r3,-1
  a036c4:	10000626 	beq	r2,zero,a036e0 <_puts_r+0x84>
  a036c8:	1805883a 	mov	r2,r3
  a036cc:	dfc00917 	ldw	ra,36(sp)
  a036d0:	dcc00817 	ldw	r19,32(sp)
  a036d4:	dc400717 	ldw	r17,28(sp)
  a036d8:	dec00a04 	addi	sp,sp,40
  a036dc:	f800283a 	ret
  a036e0:	00c00284 	movi	r3,10
  a036e4:	1805883a 	mov	r2,r3
  a036e8:	dfc00917 	ldw	ra,36(sp)
  a036ec:	dcc00817 	ldw	r19,32(sp)
  a036f0:	dc400717 	ldw	r17,28(sp)
  a036f4:	dec00a04 	addi	sp,sp,40
  a036f8:	f800283a 	ret

00a036fc <puts>:
  a036fc:	00802874 	movhi	r2,161
  a03700:	108aec04 	addi	r2,r2,11184
  a03704:	200b883a 	mov	r5,r4
  a03708:	11000017 	ldw	r4,0(r2)
  a0370c:	0a0365c1 	jmpi	a0365c <_puts_r>

00a03710 <sprintf>:
  a03710:	deffe504 	addi	sp,sp,-108
  a03714:	2013883a 	mov	r9,r4
  a03718:	dfc01815 	stw	ra,96(sp)
  a0371c:	d9801915 	stw	r6,100(sp)
  a03720:	d9c01a15 	stw	r7,104(sp)
  a03724:	d8801904 	addi	r2,sp,100
  a03728:	d8800015 	stw	r2,0(sp)
  a0372c:	00802874 	movhi	r2,161
  a03730:	108aec04 	addi	r2,r2,11184
  a03734:	11000017 	ldw	r4,0(r2)
  a03738:	d9c00017 	ldw	r7,0(sp)
  a0373c:	00808204 	movi	r2,520
  a03740:	00e00034 	movhi	r3,32768
  a03744:	18ffffc4 	addi	r3,r3,-1
  a03748:	280d883a 	mov	r6,r5
  a0374c:	d880040d 	sth	r2,16(sp)
  a03750:	d9400104 	addi	r5,sp,4
  a03754:	00bfffc4 	movi	r2,-1
  a03758:	d8c00615 	stw	r3,24(sp)
  a0375c:	d8c00315 	stw	r3,12(sp)
  a03760:	da400515 	stw	r9,20(sp)
  a03764:	d880048d 	sth	r2,18(sp)
  a03768:	da400115 	stw	r9,4(sp)
  a0376c:	0a038b00 	call	a038b0 <___vfprintf_internal_r>
  a03770:	d8c00117 	ldw	r3,4(sp)
  a03774:	18000005 	stb	zero,0(r3)
  a03778:	dfc01817 	ldw	ra,96(sp)
  a0377c:	dec01b04 	addi	sp,sp,108
  a03780:	f800283a 	ret

00a03784 <_sprintf_r>:
  a03784:	deffe604 	addi	sp,sp,-104
  a03788:	2813883a 	mov	r9,r5
  a0378c:	dfc01815 	stw	ra,96(sp)
  a03790:	d9c01915 	stw	r7,100(sp)
  a03794:	d8801904 	addi	r2,sp,100
  a03798:	d8800015 	stw	r2,0(sp)
  a0379c:	100f883a 	mov	r7,r2
  a037a0:	00808204 	movi	r2,520
  a037a4:	00e00034 	movhi	r3,32768
  a037a8:	18ffffc4 	addi	r3,r3,-1
  a037ac:	d880040d 	sth	r2,16(sp)
  a037b0:	d9400104 	addi	r5,sp,4
  a037b4:	00bfffc4 	movi	r2,-1
  a037b8:	d8c00615 	stw	r3,24(sp)
  a037bc:	d8c00315 	stw	r3,12(sp)
  a037c0:	da400515 	stw	r9,20(sp)
  a037c4:	d880048d 	sth	r2,18(sp)
  a037c8:	da400115 	stw	r9,4(sp)
  a037cc:	0a038b00 	call	a038b0 <___vfprintf_internal_r>
  a037d0:	d8c00117 	ldw	r3,4(sp)
  a037d4:	18000005 	stb	zero,0(r3)
  a037d8:	dfc01817 	ldw	ra,96(sp)
  a037dc:	dec01a04 	addi	sp,sp,104
  a037e0:	f800283a 	ret

00a037e4 <strlen>:
  a037e4:	208000cc 	andi	r2,r4,3
  a037e8:	2011883a 	mov	r8,r4
  a037ec:	1000161e 	bne	r2,zero,a03848 <strlen+0x64>
  a037f0:	20c00017 	ldw	r3,0(r4)
  a037f4:	017fbff4 	movhi	r5,65279
  a037f8:	297fbfc4 	addi	r5,r5,-257
  a037fc:	01e02074 	movhi	r7,32897
  a03800:	39e02004 	addi	r7,r7,-32640
  a03804:	1945883a 	add	r2,r3,r5
  a03808:	11c4703a 	and	r2,r2,r7
  a0380c:	00c6303a 	nor	r3,zero,r3
  a03810:	1886703a 	and	r3,r3,r2
  a03814:	18000c1e 	bne	r3,zero,a03848 <strlen+0x64>
  a03818:	280d883a 	mov	r6,r5
  a0381c:	380b883a 	mov	r5,r7
  a03820:	21000104 	addi	r4,r4,4
  a03824:	20800017 	ldw	r2,0(r4)
  a03828:	1187883a 	add	r3,r2,r6
  a0382c:	1946703a 	and	r3,r3,r5
  a03830:	0084303a 	nor	r2,zero,r2
  a03834:	10c4703a 	and	r2,r2,r3
  a03838:	103ff926 	beq	r2,zero,a03820 <strlen+0x3c>
  a0383c:	20800007 	ldb	r2,0(r4)
  a03840:	10000326 	beq	r2,zero,a03850 <strlen+0x6c>
  a03844:	21000044 	addi	r4,r4,1
  a03848:	20800007 	ldb	r2,0(r4)
  a0384c:	103ffd1e 	bne	r2,zero,a03844 <strlen+0x60>
  a03850:	2205c83a 	sub	r2,r4,r8
  a03854:	f800283a 	ret

00a03858 <__sprint_r>:
  a03858:	30800217 	ldw	r2,8(r6)
  a0385c:	defffe04 	addi	sp,sp,-8
  a03860:	dc000015 	stw	r16,0(sp)
  a03864:	dfc00115 	stw	ra,4(sp)
  a03868:	3021883a 	mov	r16,r6
  a0386c:	0007883a 	mov	r3,zero
  a03870:	1000061e 	bne	r2,zero,a0388c <__sprint_r+0x34>
  a03874:	1805883a 	mov	r2,r3
  a03878:	30000115 	stw	zero,4(r6)
  a0387c:	dfc00117 	ldw	ra,4(sp)
  a03880:	dc000017 	ldw	r16,0(sp)
  a03884:	dec00204 	addi	sp,sp,8
  a03888:	f800283a 	ret
  a0388c:	0a079b80 	call	a079b8 <__sfvwrite_r>
  a03890:	1007883a 	mov	r3,r2
  a03894:	1805883a 	mov	r2,r3
  a03898:	80000115 	stw	zero,4(r16)
  a0389c:	80000215 	stw	zero,8(r16)
  a038a0:	dfc00117 	ldw	ra,4(sp)
  a038a4:	dc000017 	ldw	r16,0(sp)
  a038a8:	dec00204 	addi	sp,sp,8
  a038ac:	f800283a 	ret

00a038b0 <___vfprintf_internal_r>:
  a038b0:	defea404 	addi	sp,sp,-1392
  a038b4:	dd815815 	stw	r22,1376(sp)
  a038b8:	dc015215 	stw	r16,1352(sp)
  a038bc:	d9c15115 	stw	r7,1348(sp)
  a038c0:	dfc15b15 	stw	ra,1388(sp)
  a038c4:	df015a15 	stw	fp,1384(sp)
  a038c8:	ddc15915 	stw	r23,1380(sp)
  a038cc:	dd415715 	stw	r21,1372(sp)
  a038d0:	dd015615 	stw	r20,1368(sp)
  a038d4:	dcc15515 	stw	r19,1364(sp)
  a038d8:	dc815415 	stw	r18,1360(sp)
  a038dc:	dc415315 	stw	r17,1356(sp)
  a038e0:	282d883a 	mov	r22,r5
  a038e4:	3021883a 	mov	r16,r6
  a038e8:	d9014f15 	stw	r4,1340(sp)
  a038ec:	0a07fdc0 	call	a07fdc <_localeconv_r>
  a038f0:	10800017 	ldw	r2,0(r2)
  a038f4:	d9c15117 	ldw	r7,1348(sp)
  a038f8:	d8814915 	stw	r2,1316(sp)
  a038fc:	d8814f17 	ldw	r2,1340(sp)
  a03900:	10000226 	beq	r2,zero,a0390c <___vfprintf_internal_r+0x5c>
  a03904:	10800e17 	ldw	r2,56(r2)
  a03908:	10020d26 	beq	r2,zero,a04140 <___vfprintf_internal_r+0x890>
  a0390c:	b080030b 	ldhu	r2,12(r22)
  a03910:	1080020c 	andi	r2,r2,8
  a03914:	10020e26 	beq	r2,zero,a04150 <___vfprintf_internal_r+0x8a0>
  a03918:	b0800417 	ldw	r2,16(r22)
  a0391c:	10020c26 	beq	r2,zero,a04150 <___vfprintf_internal_r+0x8a0>
  a03920:	b200030b 	ldhu	r8,12(r22)
  a03924:	00800284 	movi	r2,10
  a03928:	40c0068c 	andi	r3,r8,26
  a0392c:	18802f1e 	bne	r3,r2,a039ec <___vfprintf_internal_r+0x13c>
  a03930:	b080038f 	ldh	r2,14(r22)
  a03934:	10002d16 	blt	r2,zero,a039ec <___vfprintf_internal_r+0x13c>
  a03938:	b240038b 	ldhu	r9,14(r22)
  a0393c:	b2800717 	ldw	r10,28(r22)
  a03940:	b2c00917 	ldw	r11,36(r22)
  a03944:	d9014f17 	ldw	r4,1340(sp)
  a03948:	dc402904 	addi	r17,sp,164
  a0394c:	d8804004 	addi	r2,sp,256
  a03950:	00c10004 	movi	r3,1024
  a03954:	423fff4c 	andi	r8,r8,65533
  a03958:	800d883a 	mov	r6,r16
  a0395c:	880b883a 	mov	r5,r17
  a03960:	da002c0d 	sth	r8,176(sp)
  a03964:	da402c8d 	sth	r9,178(sp)
  a03968:	da803015 	stw	r10,192(sp)
  a0396c:	dac03215 	stw	r11,200(sp)
  a03970:	d8802d15 	stw	r2,180(sp)
  a03974:	d8c02e15 	stw	r3,184(sp)
  a03978:	d8802915 	stw	r2,164(sp)
  a0397c:	d8c02b15 	stw	r3,172(sp)
  a03980:	d8002f15 	stw	zero,188(sp)
  a03984:	0a038b00 	call	a038b0 <___vfprintf_internal_r>
  a03988:	d8814b15 	stw	r2,1324(sp)
  a0398c:	10000416 	blt	r2,zero,a039a0 <___vfprintf_internal_r+0xf0>
  a03990:	d9014f17 	ldw	r4,1340(sp)
  a03994:	880b883a 	mov	r5,r17
  a03998:	0a070880 	call	a07088 <_fflush_r>
  a0399c:	1002321e 	bne	r2,zero,a04268 <___vfprintf_internal_r+0x9b8>
  a039a0:	d8802c0b 	ldhu	r2,176(sp)
  a039a4:	1080100c 	andi	r2,r2,64
  a039a8:	10000326 	beq	r2,zero,a039b8 <___vfprintf_internal_r+0x108>
  a039ac:	b080030b 	ldhu	r2,12(r22)
  a039b0:	10801014 	ori	r2,r2,64
  a039b4:	b080030d 	sth	r2,12(r22)
  a039b8:	d8814b17 	ldw	r2,1324(sp)
  a039bc:	dfc15b17 	ldw	ra,1388(sp)
  a039c0:	df015a17 	ldw	fp,1384(sp)
  a039c4:	ddc15917 	ldw	r23,1380(sp)
  a039c8:	dd815817 	ldw	r22,1376(sp)
  a039cc:	dd415717 	ldw	r21,1372(sp)
  a039d0:	dd015617 	ldw	r20,1368(sp)
  a039d4:	dcc15517 	ldw	r19,1364(sp)
  a039d8:	dc815417 	ldw	r18,1360(sp)
  a039dc:	dc415317 	ldw	r17,1356(sp)
  a039e0:	dc015217 	ldw	r16,1352(sp)
  a039e4:	dec15c04 	addi	sp,sp,1392
  a039e8:	f800283a 	ret
  a039ec:	0005883a 	mov	r2,zero
  a039f0:	0007883a 	mov	r3,zero
  a039f4:	dd401904 	addi	r21,sp,100
  a039f8:	d8814215 	stw	r2,1288(sp)
  a039fc:	802f883a 	mov	r23,r16
  a03a00:	d8c14315 	stw	r3,1292(sp)
  a03a04:	d8014b15 	stw	zero,1324(sp)
  a03a08:	d8014815 	stw	zero,1312(sp)
  a03a0c:	d8014415 	stw	zero,1296(sp)
  a03a10:	d8014715 	stw	zero,1308(sp)
  a03a14:	dd400c15 	stw	r21,48(sp)
  a03a18:	d8000e15 	stw	zero,56(sp)
  a03a1c:	d8000d15 	stw	zero,52(sp)
  a03a20:	b8800007 	ldb	r2,0(r23)
  a03a24:	10001926 	beq	r2,zero,a03a8c <___vfprintf_internal_r+0x1dc>
  a03a28:	00c00944 	movi	r3,37
  a03a2c:	10c01726 	beq	r2,r3,a03a8c <___vfprintf_internal_r+0x1dc>
  a03a30:	b821883a 	mov	r16,r23
  a03a34:	00000106 	br	a03a3c <___vfprintf_internal_r+0x18c>
  a03a38:	10c00326 	beq	r2,r3,a03a48 <___vfprintf_internal_r+0x198>
  a03a3c:	84000044 	addi	r16,r16,1
  a03a40:	80800007 	ldb	r2,0(r16)
  a03a44:	103ffc1e 	bne	r2,zero,a03a38 <___vfprintf_internal_r+0x188>
  a03a48:	85e7c83a 	sub	r19,r16,r23
  a03a4c:	98000e26 	beq	r19,zero,a03a88 <___vfprintf_internal_r+0x1d8>
  a03a50:	dc800e17 	ldw	r18,56(sp)
  a03a54:	dc400d17 	ldw	r17,52(sp)
  a03a58:	008001c4 	movi	r2,7
  a03a5c:	94e5883a 	add	r18,r18,r19
  a03a60:	8c400044 	addi	r17,r17,1
  a03a64:	adc00015 	stw	r23,0(r21)
  a03a68:	dc800e15 	stw	r18,56(sp)
  a03a6c:	acc00115 	stw	r19,4(r21)
  a03a70:	dc400d15 	stw	r17,52(sp)
  a03a74:	14428b16 	blt	r2,r17,a044a4 <___vfprintf_internal_r+0xbf4>
  a03a78:	ad400204 	addi	r21,r21,8
  a03a7c:	d9014b17 	ldw	r4,1324(sp)
  a03a80:	24c9883a 	add	r4,r4,r19
  a03a84:	d9014b15 	stw	r4,1324(sp)
  a03a88:	802f883a 	mov	r23,r16
  a03a8c:	b8800007 	ldb	r2,0(r23)
  a03a90:	10013c26 	beq	r2,zero,a03f84 <___vfprintf_internal_r+0x6d4>
  a03a94:	bdc00044 	addi	r23,r23,1
  a03a98:	d8000405 	stb	zero,16(sp)
  a03a9c:	b8c00007 	ldb	r3,0(r23)
  a03aa0:	04ffffc4 	movi	r19,-1
  a03aa4:	d8014c15 	stw	zero,1328(sp)
  a03aa8:	d8014a15 	stw	zero,1320(sp)
  a03aac:	d8c14d15 	stw	r3,1332(sp)
  a03ab0:	bdc00044 	addi	r23,r23,1
  a03ab4:	d9414d17 	ldw	r5,1332(sp)
  a03ab8:	00801604 	movi	r2,88
  a03abc:	28fff804 	addi	r3,r5,-32
  a03ac0:	10c06036 	bltu	r2,r3,a03c44 <___vfprintf_internal_r+0x394>
  a03ac4:	18c5883a 	add	r2,r3,r3
  a03ac8:	1085883a 	add	r2,r2,r2
  a03acc:	00c02834 	movhi	r3,160
  a03ad0:	18ceb804 	addi	r3,r3,15072
  a03ad4:	10c5883a 	add	r2,r2,r3
  a03ad8:	11000017 	ldw	r4,0(r2)
  a03adc:	2000683a 	jmp	r4
  a03ae0:	00a04a54 	movui	r2,33065
  a03ae4:	00a03c44 	movi	r2,-32527
  a03ae8:	00a03c44 	movi	r2,-32527
  a03aec:	00a04a40 	call	a04a4 <__alt_mem_onchip_memory2_3+0x994a4>
  a03af0:	00a03c44 	movi	r2,-32527
  a03af4:	00a03c44 	movi	r2,-32527
  a03af8:	00a03c44 	movi	r2,-32527
  a03afc:	00a03c44 	movi	r2,-32527
  a03b00:	00a03c44 	movi	r2,-32527
  a03b04:	00a03c44 	movi	r2,-32527
  a03b08:	00a04820 	cmpeqi	r2,zero,-32480
  a03b0c:	00a04a30 	cmpltui	r2,zero,33064
  a03b10:	00a03c44 	movi	r2,-32527
  a03b14:	00a04838 	rdprs	r2,zero,-32480
  a03b18:	00a04acc 	andi	r2,zero,33067
  a03b1c:	00a03c44 	movi	r2,-32527
  a03b20:	00a04ab8 	rdprs	r2,zero,-32470
  a03b24:	00a04a80 	call	a04a8 <__alt_mem_onchip_memory2_3+0x994a8>
  a03b28:	00a04a80 	call	a04a8 <__alt_mem_onchip_memory2_3+0x994a8>
  a03b2c:	00a04a80 	call	a04a8 <__alt_mem_onchip_memory2_3+0x994a8>
  a03b30:	00a04a80 	call	a04a8 <__alt_mem_onchip_memory2_3+0x994a8>
  a03b34:	00a04a80 	call	a04a8 <__alt_mem_onchip_memory2_3+0x994a8>
  a03b38:	00a04a80 	call	a04a8 <__alt_mem_onchip_memory2_3+0x994a8>
  a03b3c:	00a04a80 	call	a04a8 <__alt_mem_onchip_memory2_3+0x994a8>
  a03b40:	00a04a80 	call	a04a8 <__alt_mem_onchip_memory2_3+0x994a8>
  a03b44:	00a04a80 	call	a04a8 <__alt_mem_onchip_memory2_3+0x994a8>
  a03b48:	00a03c44 	movi	r2,-32527
  a03b4c:	00a03c44 	movi	r2,-32527
  a03b50:	00a03c44 	movi	r2,-32527
  a03b54:	00a03c44 	movi	r2,-32527
  a03b58:	00a03c44 	movi	r2,-32527
  a03b5c:	00a03c44 	movi	r2,-32527
  a03b60:	00a03c44 	movi	r2,-32527
  a03b64:	00a03c44 	movi	r2,-32527
  a03b68:	00a03c44 	movi	r2,-32527
  a03b6c:	00a03c44 	movi	r2,-32527
  a03b70:	00a0429c 	xori	r2,zero,33034
  a03b74:	00a04908 	cmpgei	r2,zero,-32476
  a03b78:	00a03c44 	movi	r2,-32527
  a03b7c:	00a04908 	cmpgei	r2,zero,-32476
  a03b80:	00a03c44 	movi	r2,-32527
  a03b84:	00a03c44 	movi	r2,-32527
  a03b88:	00a03c44 	movi	r2,-32527
  a03b8c:	00a03c44 	movi	r2,-32527
  a03b90:	00a04a6c 	andhi	r2,zero,33065
  a03b94:	00a03c44 	movi	r2,-32527
  a03b98:	00a03c44 	movi	r2,-32527
  a03b9c:	00a04350 	cmplti	r2,zero,-32499
  a03ba0:	00a03c44 	movi	r2,-32527
  a03ba4:	00a03c44 	movi	r2,-32527
  a03ba8:	00a03c44 	movi	r2,-32527
  a03bac:	00a03c44 	movi	r2,-32527
  a03bb0:	00a03c44 	movi	r2,-32527
  a03bb4:	00a0439c 	xori	r2,zero,33038
  a03bb8:	00a03c44 	movi	r2,-32527
  a03bbc:	00a03c44 	movi	r2,-32527
  a03bc0:	00a049bc 	xorhi	r2,zero,33062
  a03bc4:	00a03c44 	movi	r2,-32527
  a03bc8:	00a03c44 	movi	r2,-32527
  a03bcc:	00a03c44 	movi	r2,-32527
  a03bd0:	00a03c44 	movi	r2,-32527
  a03bd4:	00a03c44 	movi	r2,-32527
  a03bd8:	00a03c44 	movi	r2,-32527
  a03bdc:	00a03c44 	movi	r2,-32527
  a03be0:	00a03c44 	movi	r2,-32527
  a03be4:	00a03c44 	movi	r2,-32527
  a03be8:	00a03c44 	movi	r2,-32527
  a03bec:	00a04990 	cmplti	r2,zero,-32474
  a03bf0:	00a042a8 	cmpgeui	r2,zero,33034
  a03bf4:	00a04908 	cmpgei	r2,zero,-32476
  a03bf8:	00a04908 	cmpgei	r2,zero,-32476
  a03bfc:	00a04908 	cmpgei	r2,zero,-32476
  a03c00:	00a048f4 	movhi	r2,33059
  a03c04:	00a042a8 	cmpgeui	r2,zero,33034
  a03c08:	00a03c44 	movi	r2,-32527
  a03c0c:	00a03c44 	movi	r2,-32527
  a03c10:	00a0487c 	xorhi	r2,zero,33057
  a03c14:	00a03c44 	movi	r2,-32527
  a03c18:	00a0484c 	andi	r2,zero,33057
  a03c1c:	00a0435c 	xori	r2,zero,33037
  a03c20:	00a048ac 	andhi	r2,zero,33058
  a03c24:	00a04898 	cmpnei	r2,zero,-32478
  a03c28:	00a03c44 	movi	r2,-32527
  a03c2c:	00a04b28 	cmpgeui	r2,zero,33068
  a03c30:	00a03c44 	movi	r2,-32527
  a03c34:	00a043a8 	cmpgeui	r2,zero,33038
  a03c38:	00a03c44 	movi	r2,-32527
  a03c3c:	00a03c44 	movi	r2,-32527
  a03c40:	00a04a20 	cmpeqi	r2,zero,-32472
  a03c44:	d9014d17 	ldw	r4,1332(sp)
  a03c48:	2000ce26 	beq	r4,zero,a03f84 <___vfprintf_internal_r+0x6d4>
  a03c4c:	01400044 	movi	r5,1
  a03c50:	d9800f04 	addi	r6,sp,60
  a03c54:	d9c14015 	stw	r7,1280(sp)
  a03c58:	d9414515 	stw	r5,1300(sp)
  a03c5c:	d9814115 	stw	r6,1284(sp)
  a03c60:	280f883a 	mov	r7,r5
  a03c64:	d9000f05 	stb	r4,60(sp)
  a03c68:	d8000405 	stb	zero,16(sp)
  a03c6c:	d8014615 	stw	zero,1304(sp)
  a03c70:	d8c14c17 	ldw	r3,1328(sp)
  a03c74:	1880008c 	andi	r2,r3,2
  a03c78:	1005003a 	cmpeq	r2,r2,zero
  a03c7c:	d8815015 	stw	r2,1344(sp)
  a03c80:	1000031e 	bne	r2,zero,a03c90 <___vfprintf_internal_r+0x3e0>
  a03c84:	d9014517 	ldw	r4,1300(sp)
  a03c88:	21000084 	addi	r4,r4,2
  a03c8c:	d9014515 	stw	r4,1300(sp)
  a03c90:	d9414c17 	ldw	r5,1328(sp)
  a03c94:	2940210c 	andi	r5,r5,132
  a03c98:	d9414e15 	stw	r5,1336(sp)
  a03c9c:	28002d1e 	bne	r5,zero,a03d54 <___vfprintf_internal_r+0x4a4>
  a03ca0:	d9814a17 	ldw	r6,1320(sp)
  a03ca4:	d8814517 	ldw	r2,1300(sp)
  a03ca8:	30a1c83a 	sub	r16,r6,r2
  a03cac:	0400290e 	bge	zero,r16,a03d54 <___vfprintf_internal_r+0x4a4>
  a03cb0:	00800404 	movi	r2,16
  a03cb4:	1404580e 	bge	r2,r16,a04e18 <___vfprintf_internal_r+0x1568>
  a03cb8:	dc800e17 	ldw	r18,56(sp)
  a03cbc:	dc400d17 	ldw	r17,52(sp)
  a03cc0:	1027883a 	mov	r19,r2
  a03cc4:	07002874 	movhi	fp,161
  a03cc8:	e7035584 	addi	fp,fp,3414
  a03ccc:	050001c4 	movi	r20,7
  a03cd0:	00000306 	br	a03ce0 <___vfprintf_internal_r+0x430>
  a03cd4:	843ffc04 	addi	r16,r16,-16
  a03cd8:	ad400204 	addi	r21,r21,8
  a03cdc:	9c00130e 	bge	r19,r16,a03d2c <___vfprintf_internal_r+0x47c>
  a03ce0:	94800404 	addi	r18,r18,16
  a03ce4:	8c400044 	addi	r17,r17,1
  a03ce8:	af000015 	stw	fp,0(r21)
  a03cec:	acc00115 	stw	r19,4(r21)
  a03cf0:	dc800e15 	stw	r18,56(sp)
  a03cf4:	dc400d15 	stw	r17,52(sp)
  a03cf8:	a47ff60e 	bge	r20,r17,a03cd4 <___vfprintf_internal_r+0x424>
  a03cfc:	d9014f17 	ldw	r4,1340(sp)
  a03d00:	b00b883a 	mov	r5,r22
  a03d04:	d9800c04 	addi	r6,sp,48
  a03d08:	d9c15115 	stw	r7,1348(sp)
  a03d0c:	0a038580 	call	a03858 <__sprint_r>
  a03d10:	d9c15117 	ldw	r7,1348(sp)
  a03d14:	10009e1e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a03d18:	843ffc04 	addi	r16,r16,-16
  a03d1c:	dc800e17 	ldw	r18,56(sp)
  a03d20:	dc400d17 	ldw	r17,52(sp)
  a03d24:	dd401904 	addi	r21,sp,100
  a03d28:	9c3fed16 	blt	r19,r16,a03ce0 <___vfprintf_internal_r+0x430>
  a03d2c:	9425883a 	add	r18,r18,r16
  a03d30:	8c400044 	addi	r17,r17,1
  a03d34:	008001c4 	movi	r2,7
  a03d38:	af000015 	stw	fp,0(r21)
  a03d3c:	ac000115 	stw	r16,4(r21)
  a03d40:	dc800e15 	stw	r18,56(sp)
  a03d44:	dc400d15 	stw	r17,52(sp)
  a03d48:	1441f516 	blt	r2,r17,a04520 <___vfprintf_internal_r+0xc70>
  a03d4c:	ad400204 	addi	r21,r21,8
  a03d50:	00000206 	br	a03d5c <___vfprintf_internal_r+0x4ac>
  a03d54:	dc800e17 	ldw	r18,56(sp)
  a03d58:	dc400d17 	ldw	r17,52(sp)
  a03d5c:	d8800407 	ldb	r2,16(sp)
  a03d60:	10000b26 	beq	r2,zero,a03d90 <___vfprintf_internal_r+0x4e0>
  a03d64:	00800044 	movi	r2,1
  a03d68:	94800044 	addi	r18,r18,1
  a03d6c:	8c400044 	addi	r17,r17,1
  a03d70:	a8800115 	stw	r2,4(r21)
  a03d74:	d8c00404 	addi	r3,sp,16
  a03d78:	008001c4 	movi	r2,7
  a03d7c:	a8c00015 	stw	r3,0(r21)
  a03d80:	dc800e15 	stw	r18,56(sp)
  a03d84:	dc400d15 	stw	r17,52(sp)
  a03d88:	1441da16 	blt	r2,r17,a044f4 <___vfprintf_internal_r+0xc44>
  a03d8c:	ad400204 	addi	r21,r21,8
  a03d90:	d9015017 	ldw	r4,1344(sp)
  a03d94:	20000b1e 	bne	r4,zero,a03dc4 <___vfprintf_internal_r+0x514>
  a03d98:	d8800444 	addi	r2,sp,17
  a03d9c:	94800084 	addi	r18,r18,2
  a03da0:	8c400044 	addi	r17,r17,1
  a03da4:	a8800015 	stw	r2,0(r21)
  a03da8:	00c00084 	movi	r3,2
  a03dac:	008001c4 	movi	r2,7
  a03db0:	a8c00115 	stw	r3,4(r21)
  a03db4:	dc800e15 	stw	r18,56(sp)
  a03db8:	dc400d15 	stw	r17,52(sp)
  a03dbc:	1441c216 	blt	r2,r17,a044c8 <___vfprintf_internal_r+0xc18>
  a03dc0:	ad400204 	addi	r21,r21,8
  a03dc4:	d9414e17 	ldw	r5,1336(sp)
  a03dc8:	00802004 	movi	r2,128
  a03dcc:	2880b126 	beq	r5,r2,a04094 <___vfprintf_internal_r+0x7e4>
  a03dd0:	d8c14617 	ldw	r3,1304(sp)
  a03dd4:	19e1c83a 	sub	r16,r3,r7
  a03dd8:	0400260e 	bge	zero,r16,a03e74 <___vfprintf_internal_r+0x5c4>
  a03ddc:	00800404 	movi	r2,16
  a03de0:	1403c90e 	bge	r2,r16,a04d08 <___vfprintf_internal_r+0x1458>
  a03de4:	1027883a 	mov	r19,r2
  a03de8:	07002874 	movhi	fp,161
  a03dec:	e7035184 	addi	fp,fp,3398
  a03df0:	050001c4 	movi	r20,7
  a03df4:	00000306 	br	a03e04 <___vfprintf_internal_r+0x554>
  a03df8:	843ffc04 	addi	r16,r16,-16
  a03dfc:	ad400204 	addi	r21,r21,8
  a03e00:	9c00130e 	bge	r19,r16,a03e50 <___vfprintf_internal_r+0x5a0>
  a03e04:	94800404 	addi	r18,r18,16
  a03e08:	8c400044 	addi	r17,r17,1
  a03e0c:	af000015 	stw	fp,0(r21)
  a03e10:	acc00115 	stw	r19,4(r21)
  a03e14:	dc800e15 	stw	r18,56(sp)
  a03e18:	dc400d15 	stw	r17,52(sp)
  a03e1c:	a47ff60e 	bge	r20,r17,a03df8 <___vfprintf_internal_r+0x548>
  a03e20:	d9014f17 	ldw	r4,1340(sp)
  a03e24:	b00b883a 	mov	r5,r22
  a03e28:	d9800c04 	addi	r6,sp,48
  a03e2c:	d9c15115 	stw	r7,1348(sp)
  a03e30:	0a038580 	call	a03858 <__sprint_r>
  a03e34:	d9c15117 	ldw	r7,1348(sp)
  a03e38:	1000551e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a03e3c:	843ffc04 	addi	r16,r16,-16
  a03e40:	dc800e17 	ldw	r18,56(sp)
  a03e44:	dc400d17 	ldw	r17,52(sp)
  a03e48:	dd401904 	addi	r21,sp,100
  a03e4c:	9c3fed16 	blt	r19,r16,a03e04 <___vfprintf_internal_r+0x554>
  a03e50:	9425883a 	add	r18,r18,r16
  a03e54:	8c400044 	addi	r17,r17,1
  a03e58:	008001c4 	movi	r2,7
  a03e5c:	af000015 	stw	fp,0(r21)
  a03e60:	ac000115 	stw	r16,4(r21)
  a03e64:	dc800e15 	stw	r18,56(sp)
  a03e68:	dc400d15 	stw	r17,52(sp)
  a03e6c:	14418216 	blt	r2,r17,a04478 <___vfprintf_internal_r+0xbc8>
  a03e70:	ad400204 	addi	r21,r21,8
  a03e74:	d9014c17 	ldw	r4,1328(sp)
  a03e78:	2080400c 	andi	r2,r4,256
  a03e7c:	10004a1e 	bne	r2,zero,a03fa8 <___vfprintf_internal_r+0x6f8>
  a03e80:	d9414117 	ldw	r5,1284(sp)
  a03e84:	91e5883a 	add	r18,r18,r7
  a03e88:	8c400044 	addi	r17,r17,1
  a03e8c:	008001c4 	movi	r2,7
  a03e90:	a9400015 	stw	r5,0(r21)
  a03e94:	a9c00115 	stw	r7,4(r21)
  a03e98:	dc800e15 	stw	r18,56(sp)
  a03e9c:	dc400d15 	stw	r17,52(sp)
  a03ea0:	14416716 	blt	r2,r17,a04440 <___vfprintf_internal_r+0xb90>
  a03ea4:	a8c00204 	addi	r3,r21,8
  a03ea8:	d9814c17 	ldw	r6,1328(sp)
  a03eac:	3080010c 	andi	r2,r6,4
  a03eb0:	10002826 	beq	r2,zero,a03f54 <___vfprintf_internal_r+0x6a4>
  a03eb4:	d8814a17 	ldw	r2,1320(sp)
  a03eb8:	d9014517 	ldw	r4,1300(sp)
  a03ebc:	1121c83a 	sub	r16,r2,r4
  a03ec0:	0400240e 	bge	zero,r16,a03f54 <___vfprintf_internal_r+0x6a4>
  a03ec4:	00800404 	movi	r2,16
  a03ec8:	14044f0e 	bge	r2,r16,a05008 <___vfprintf_internal_r+0x1758>
  a03ecc:	dc400d17 	ldw	r17,52(sp)
  a03ed0:	1027883a 	mov	r19,r2
  a03ed4:	07002874 	movhi	fp,161
  a03ed8:	e7035584 	addi	fp,fp,3414
  a03edc:	050001c4 	movi	r20,7
  a03ee0:	00000306 	br	a03ef0 <___vfprintf_internal_r+0x640>
  a03ee4:	843ffc04 	addi	r16,r16,-16
  a03ee8:	18c00204 	addi	r3,r3,8
  a03eec:	9c00110e 	bge	r19,r16,a03f34 <___vfprintf_internal_r+0x684>
  a03ef0:	94800404 	addi	r18,r18,16
  a03ef4:	8c400044 	addi	r17,r17,1
  a03ef8:	1f000015 	stw	fp,0(r3)
  a03efc:	1cc00115 	stw	r19,4(r3)
  a03f00:	dc800e15 	stw	r18,56(sp)
  a03f04:	dc400d15 	stw	r17,52(sp)
  a03f08:	a47ff60e 	bge	r20,r17,a03ee4 <___vfprintf_internal_r+0x634>
  a03f0c:	d9014f17 	ldw	r4,1340(sp)
  a03f10:	b00b883a 	mov	r5,r22
  a03f14:	d9800c04 	addi	r6,sp,48
  a03f18:	0a038580 	call	a03858 <__sprint_r>
  a03f1c:	10001c1e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a03f20:	843ffc04 	addi	r16,r16,-16
  a03f24:	dc800e17 	ldw	r18,56(sp)
  a03f28:	dc400d17 	ldw	r17,52(sp)
  a03f2c:	d8c01904 	addi	r3,sp,100
  a03f30:	9c3fef16 	blt	r19,r16,a03ef0 <___vfprintf_internal_r+0x640>
  a03f34:	9425883a 	add	r18,r18,r16
  a03f38:	8c400044 	addi	r17,r17,1
  a03f3c:	008001c4 	movi	r2,7
  a03f40:	1f000015 	stw	fp,0(r3)
  a03f44:	1c000115 	stw	r16,4(r3)
  a03f48:	dc800e15 	stw	r18,56(sp)
  a03f4c:	dc400d15 	stw	r17,52(sp)
  a03f50:	1440cb16 	blt	r2,r17,a04280 <___vfprintf_internal_r+0x9d0>
  a03f54:	d8814a17 	ldw	r2,1320(sp)
  a03f58:	d9414517 	ldw	r5,1300(sp)
  a03f5c:	1140010e 	bge	r2,r5,a03f64 <___vfprintf_internal_r+0x6b4>
  a03f60:	2805883a 	mov	r2,r5
  a03f64:	d9814b17 	ldw	r6,1324(sp)
  a03f68:	308d883a 	add	r6,r6,r2
  a03f6c:	d9814b15 	stw	r6,1324(sp)
  a03f70:	90013b1e 	bne	r18,zero,a04460 <___vfprintf_internal_r+0xbb0>
  a03f74:	d9c14017 	ldw	r7,1280(sp)
  a03f78:	dd401904 	addi	r21,sp,100
  a03f7c:	d8000d15 	stw	zero,52(sp)
  a03f80:	003ea706 	br	a03a20 <___vfprintf_internal_r+0x170>
  a03f84:	d8800e17 	ldw	r2,56(sp)
  a03f88:	10053f1e 	bne	r2,zero,a05488 <___vfprintf_internal_r+0x1bd8>
  a03f8c:	d8000d15 	stw	zero,52(sp)
  a03f90:	b080030b 	ldhu	r2,12(r22)
  a03f94:	1080100c 	andi	r2,r2,64
  a03f98:	103e8726 	beq	r2,zero,a039b8 <___vfprintf_internal_r+0x108>
  a03f9c:	00bfffc4 	movi	r2,-1
  a03fa0:	d8814b15 	stw	r2,1324(sp)
  a03fa4:	003e8406 	br	a039b8 <___vfprintf_internal_r+0x108>
  a03fa8:	d9814d17 	ldw	r6,1332(sp)
  a03fac:	00801944 	movi	r2,101
  a03fb0:	11806e16 	blt	r2,r6,a0416c <___vfprintf_internal_r+0x8bc>
  a03fb4:	d9414717 	ldw	r5,1308(sp)
  a03fb8:	00c00044 	movi	r3,1
  a03fbc:	1943430e 	bge	r3,r5,a04ccc <___vfprintf_internal_r+0x141c>
  a03fc0:	d8814117 	ldw	r2,1284(sp)
  a03fc4:	94800044 	addi	r18,r18,1
  a03fc8:	8c400044 	addi	r17,r17,1
  a03fcc:	a8800015 	stw	r2,0(r21)
  a03fd0:	008001c4 	movi	r2,7
  a03fd4:	a8c00115 	stw	r3,4(r21)
  a03fd8:	dc800e15 	stw	r18,56(sp)
  a03fdc:	dc400d15 	stw	r17,52(sp)
  a03fe0:	1441ca16 	blt	r2,r17,a0470c <___vfprintf_internal_r+0xe5c>
  a03fe4:	a8c00204 	addi	r3,r21,8
  a03fe8:	d9014917 	ldw	r4,1316(sp)
  a03fec:	00800044 	movi	r2,1
  a03ff0:	94800044 	addi	r18,r18,1
  a03ff4:	8c400044 	addi	r17,r17,1
  a03ff8:	18800115 	stw	r2,4(r3)
  a03ffc:	008001c4 	movi	r2,7
  a04000:	19000015 	stw	r4,0(r3)
  a04004:	dc800e15 	stw	r18,56(sp)
  a04008:	dc400d15 	stw	r17,52(sp)
  a0400c:	1441b616 	blt	r2,r17,a046e8 <___vfprintf_internal_r+0xe38>
  a04010:	1cc00204 	addi	r19,r3,8
  a04014:	d9014217 	ldw	r4,1288(sp)
  a04018:	d9414317 	ldw	r5,1292(sp)
  a0401c:	000d883a 	mov	r6,zero
  a04020:	000f883a 	mov	r7,zero
  a04024:	0a02b780 	call	a02b78 <__nedf2>
  a04028:	10017426 	beq	r2,zero,a045fc <___vfprintf_internal_r+0xd4c>
  a0402c:	d9414717 	ldw	r5,1308(sp)
  a04030:	d9814117 	ldw	r6,1284(sp)
  a04034:	8c400044 	addi	r17,r17,1
  a04038:	2c85883a 	add	r2,r5,r18
  a0403c:	14bfffc4 	addi	r18,r2,-1
  a04040:	28bfffc4 	addi	r2,r5,-1
  a04044:	30c00044 	addi	r3,r6,1
  a04048:	98800115 	stw	r2,4(r19)
  a0404c:	008001c4 	movi	r2,7
  a04050:	98c00015 	stw	r3,0(r19)
  a04054:	dc800e15 	stw	r18,56(sp)
  a04058:	dc400d15 	stw	r17,52(sp)
  a0405c:	14418e16 	blt	r2,r17,a04698 <___vfprintf_internal_r+0xde8>
  a04060:	9cc00204 	addi	r19,r19,8
  a04064:	d9414817 	ldw	r5,1312(sp)
  a04068:	d8800804 	addi	r2,sp,32
  a0406c:	8c400044 	addi	r17,r17,1
  a04070:	9165883a 	add	r18,r18,r5
  a04074:	98800015 	stw	r2,0(r19)
  a04078:	008001c4 	movi	r2,7
  a0407c:	99400115 	stw	r5,4(r19)
  a04080:	dc800e15 	stw	r18,56(sp)
  a04084:	dc400d15 	stw	r17,52(sp)
  a04088:	1440ed16 	blt	r2,r17,a04440 <___vfprintf_internal_r+0xb90>
  a0408c:	98c00204 	addi	r3,r19,8
  a04090:	003f8506 	br	a03ea8 <___vfprintf_internal_r+0x5f8>
  a04094:	d9814a17 	ldw	r6,1320(sp)
  a04098:	d8814517 	ldw	r2,1300(sp)
  a0409c:	30a1c83a 	sub	r16,r6,r2
  a040a0:	043f4b0e 	bge	zero,r16,a03dd0 <___vfprintf_internal_r+0x520>
  a040a4:	00800404 	movi	r2,16
  a040a8:	1404340e 	bge	r2,r16,a0517c <___vfprintf_internal_r+0x18cc>
  a040ac:	1027883a 	mov	r19,r2
  a040b0:	07002874 	movhi	fp,161
  a040b4:	e7035184 	addi	fp,fp,3398
  a040b8:	050001c4 	movi	r20,7
  a040bc:	00000306 	br	a040cc <___vfprintf_internal_r+0x81c>
  a040c0:	843ffc04 	addi	r16,r16,-16
  a040c4:	ad400204 	addi	r21,r21,8
  a040c8:	9c00130e 	bge	r19,r16,a04118 <___vfprintf_internal_r+0x868>
  a040cc:	94800404 	addi	r18,r18,16
  a040d0:	8c400044 	addi	r17,r17,1
  a040d4:	af000015 	stw	fp,0(r21)
  a040d8:	acc00115 	stw	r19,4(r21)
  a040dc:	dc800e15 	stw	r18,56(sp)
  a040e0:	dc400d15 	stw	r17,52(sp)
  a040e4:	a47ff60e 	bge	r20,r17,a040c0 <___vfprintf_internal_r+0x810>
  a040e8:	d9014f17 	ldw	r4,1340(sp)
  a040ec:	b00b883a 	mov	r5,r22
  a040f0:	d9800c04 	addi	r6,sp,48
  a040f4:	d9c15115 	stw	r7,1348(sp)
  a040f8:	0a038580 	call	a03858 <__sprint_r>
  a040fc:	d9c15117 	ldw	r7,1348(sp)
  a04100:	103fa31e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a04104:	843ffc04 	addi	r16,r16,-16
  a04108:	dc800e17 	ldw	r18,56(sp)
  a0410c:	dc400d17 	ldw	r17,52(sp)
  a04110:	dd401904 	addi	r21,sp,100
  a04114:	9c3fed16 	blt	r19,r16,a040cc <___vfprintf_internal_r+0x81c>
  a04118:	9425883a 	add	r18,r18,r16
  a0411c:	8c400044 	addi	r17,r17,1
  a04120:	008001c4 	movi	r2,7
  a04124:	af000015 	stw	fp,0(r21)
  a04128:	ac000115 	stw	r16,4(r21)
  a0412c:	dc800e15 	stw	r18,56(sp)
  a04130:	dc400d15 	stw	r17,52(sp)
  a04134:	14416116 	blt	r2,r17,a046bc <___vfprintf_internal_r+0xe0c>
  a04138:	ad400204 	addi	r21,r21,8
  a0413c:	003f2406 	br	a03dd0 <___vfprintf_internal_r+0x520>
  a04140:	d9014f17 	ldw	r4,1340(sp)
  a04144:	0a073200 	call	a07320 <__sinit>
  a04148:	d9c15117 	ldw	r7,1348(sp)
  a0414c:	003def06 	br	a0390c <___vfprintf_internal_r+0x5c>
  a04150:	d9014f17 	ldw	r4,1340(sp)
  a04154:	b00b883a 	mov	r5,r22
  a04158:	d9c15115 	stw	r7,1348(sp)
  a0415c:	0a057800 	call	a05780 <__swsetup_r>
  a04160:	d9c15117 	ldw	r7,1348(sp)
  a04164:	103dee26 	beq	r2,zero,a03920 <___vfprintf_internal_r+0x70>
  a04168:	003f8c06 	br	a03f9c <___vfprintf_internal_r+0x6ec>
  a0416c:	d9014217 	ldw	r4,1288(sp)
  a04170:	d9414317 	ldw	r5,1292(sp)
  a04174:	000d883a 	mov	r6,zero
  a04178:	000f883a 	mov	r7,zero
  a0417c:	0a0b91c0 	call	a0b91c <__eqdf2>
  a04180:	1000f21e 	bne	r2,zero,a0454c <___vfprintf_internal_r+0xc9c>
  a04184:	00802874 	movhi	r2,161
  a04188:	1082e004 	addi	r2,r2,2944
  a0418c:	94800044 	addi	r18,r18,1
  a04190:	8c400044 	addi	r17,r17,1
  a04194:	a8800015 	stw	r2,0(r21)
  a04198:	00c00044 	movi	r3,1
  a0419c:	008001c4 	movi	r2,7
  a041a0:	a8c00115 	stw	r3,4(r21)
  a041a4:	dc800e15 	stw	r18,56(sp)
  a041a8:	dc400d15 	stw	r17,52(sp)
  a041ac:	1442fa16 	blt	r2,r17,a04d98 <___vfprintf_internal_r+0x14e8>
  a041b0:	a8c00204 	addi	r3,r21,8
  a041b4:	d8800517 	ldw	r2,20(sp)
  a041b8:	d9014717 	ldw	r4,1308(sp)
  a041bc:	11015c0e 	bge	r2,r4,a04730 <___vfprintf_internal_r+0xe80>
  a041c0:	dc400d17 	ldw	r17,52(sp)
  a041c4:	d9814917 	ldw	r6,1316(sp)
  a041c8:	00800044 	movi	r2,1
  a041cc:	94800044 	addi	r18,r18,1
  a041d0:	8c400044 	addi	r17,r17,1
  a041d4:	18800115 	stw	r2,4(r3)
  a041d8:	008001c4 	movi	r2,7
  a041dc:	19800015 	stw	r6,0(r3)
  a041e0:	dc800e15 	stw	r18,56(sp)
  a041e4:	dc400d15 	stw	r17,52(sp)
  a041e8:	14431016 	blt	r2,r17,a04e2c <___vfprintf_internal_r+0x157c>
  a041ec:	18c00204 	addi	r3,r3,8
  a041f0:	d8814717 	ldw	r2,1308(sp)
  a041f4:	143fffc4 	addi	r16,r2,-1
  a041f8:	043f2b0e 	bge	zero,r16,a03ea8 <___vfprintf_internal_r+0x5f8>
  a041fc:	00800404 	movi	r2,16
  a04200:	1402a20e 	bge	r2,r16,a04c8c <___vfprintf_internal_r+0x13dc>
  a04204:	dc400d17 	ldw	r17,52(sp)
  a04208:	1027883a 	mov	r19,r2
  a0420c:	07002874 	movhi	fp,161
  a04210:	e7035184 	addi	fp,fp,3398
  a04214:	050001c4 	movi	r20,7
  a04218:	00000306 	br	a04228 <___vfprintf_internal_r+0x978>
  a0421c:	18c00204 	addi	r3,r3,8
  a04220:	843ffc04 	addi	r16,r16,-16
  a04224:	9c029c0e 	bge	r19,r16,a04c98 <___vfprintf_internal_r+0x13e8>
  a04228:	94800404 	addi	r18,r18,16
  a0422c:	8c400044 	addi	r17,r17,1
  a04230:	1f000015 	stw	fp,0(r3)
  a04234:	1cc00115 	stw	r19,4(r3)
  a04238:	dc800e15 	stw	r18,56(sp)
  a0423c:	dc400d15 	stw	r17,52(sp)
  a04240:	a47ff60e 	bge	r20,r17,a0421c <___vfprintf_internal_r+0x96c>
  a04244:	d9014f17 	ldw	r4,1340(sp)
  a04248:	b00b883a 	mov	r5,r22
  a0424c:	d9800c04 	addi	r6,sp,48
  a04250:	0a038580 	call	a03858 <__sprint_r>
  a04254:	103f4e1e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a04258:	dc800e17 	ldw	r18,56(sp)
  a0425c:	dc400d17 	ldw	r17,52(sp)
  a04260:	d8c01904 	addi	r3,sp,100
  a04264:	003fee06 	br	a04220 <___vfprintf_internal_r+0x970>
  a04268:	d8802c0b 	ldhu	r2,176(sp)
  a0426c:	00ffffc4 	movi	r3,-1
  a04270:	d8c14b15 	stw	r3,1324(sp)
  a04274:	1080100c 	andi	r2,r2,64
  a04278:	103dcc1e 	bne	r2,zero,a039ac <___vfprintf_internal_r+0xfc>
  a0427c:	003dce06 	br	a039b8 <___vfprintf_internal_r+0x108>
  a04280:	d9014f17 	ldw	r4,1340(sp)
  a04284:	b00b883a 	mov	r5,r22
  a04288:	d9800c04 	addi	r6,sp,48
  a0428c:	0a038580 	call	a03858 <__sprint_r>
  a04290:	103f3f1e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a04294:	dc800e17 	ldw	r18,56(sp)
  a04298:	003f2e06 	br	a03f54 <___vfprintf_internal_r+0x6a4>
  a0429c:	d9414c17 	ldw	r5,1328(sp)
  a042a0:	29400414 	ori	r5,r5,16
  a042a4:	d9414c15 	stw	r5,1328(sp)
  a042a8:	d9814c17 	ldw	r6,1328(sp)
  a042ac:	3080080c 	andi	r2,r6,32
  a042b0:	10014f1e 	bne	r2,zero,a047f0 <___vfprintf_internal_r+0xf40>
  a042b4:	d8c14c17 	ldw	r3,1328(sp)
  a042b8:	1880040c 	andi	r2,r3,16
  a042bc:	1002ea1e 	bne	r2,zero,a04e68 <___vfprintf_internal_r+0x15b8>
  a042c0:	d9014c17 	ldw	r4,1328(sp)
  a042c4:	2080100c 	andi	r2,r4,64
  a042c8:	1002e726 	beq	r2,zero,a04e68 <___vfprintf_internal_r+0x15b8>
  a042cc:	3880000f 	ldh	r2,0(r7)
  a042d0:	39c00104 	addi	r7,r7,4
  a042d4:	d9c14015 	stw	r7,1280(sp)
  a042d8:	1023d7fa 	srai	r17,r2,31
  a042dc:	1021883a 	mov	r16,r2
  a042e0:	88037216 	blt	r17,zero,a050ac <___vfprintf_internal_r+0x17fc>
  a042e4:	01000044 	movi	r4,1
  a042e8:	98000416 	blt	r19,zero,a042fc <___vfprintf_internal_r+0xa4c>
  a042ec:	d8c14c17 	ldw	r3,1328(sp)
  a042f0:	00bfdfc4 	movi	r2,-129
  a042f4:	1886703a 	and	r3,r3,r2
  a042f8:	d8c14c15 	stw	r3,1328(sp)
  a042fc:	8444b03a 	or	r2,r16,r17
  a04300:	1002261e 	bne	r2,zero,a04b9c <___vfprintf_internal_r+0x12ec>
  a04304:	9802251e 	bne	r19,zero,a04b9c <___vfprintf_internal_r+0x12ec>
  a04308:	20803fcc 	andi	r2,r4,255
  a0430c:	10029b26 	beq	r2,zero,a04d7c <___vfprintf_internal_r+0x14cc>
  a04310:	d8c01904 	addi	r3,sp,100
  a04314:	dd000f04 	addi	r20,sp,60
  a04318:	d8c14115 	stw	r3,1284(sp)
  a0431c:	d8c14117 	ldw	r3,1284(sp)
  a04320:	dcc14515 	stw	r19,1300(sp)
  a04324:	a0c5c83a 	sub	r2,r20,r3
  a04328:	11c00a04 	addi	r7,r2,40
  a0432c:	99c0010e 	bge	r19,r7,a04334 <___vfprintf_internal_r+0xa84>
  a04330:	d9c14515 	stw	r7,1300(sp)
  a04334:	dcc14615 	stw	r19,1304(sp)
  a04338:	d8800407 	ldb	r2,16(sp)
  a0433c:	103e4c26 	beq	r2,zero,a03c70 <___vfprintf_internal_r+0x3c0>
  a04340:	d8814517 	ldw	r2,1300(sp)
  a04344:	10800044 	addi	r2,r2,1
  a04348:	d8814515 	stw	r2,1300(sp)
  a0434c:	003e4806 	br	a03c70 <___vfprintf_internal_r+0x3c0>
  a04350:	d9814c17 	ldw	r6,1328(sp)
  a04354:	31800414 	ori	r6,r6,16
  a04358:	d9814c15 	stw	r6,1328(sp)
  a0435c:	d8c14c17 	ldw	r3,1328(sp)
  a04360:	1880080c 	andi	r2,r3,32
  a04364:	1001271e 	bne	r2,zero,a04804 <___vfprintf_internal_r+0xf54>
  a04368:	d9414c17 	ldw	r5,1328(sp)
  a0436c:	2880040c 	andi	r2,r5,16
  a04370:	1002b61e 	bne	r2,zero,a04e4c <___vfprintf_internal_r+0x159c>
  a04374:	d9814c17 	ldw	r6,1328(sp)
  a04378:	3080100c 	andi	r2,r6,64
  a0437c:	1002b326 	beq	r2,zero,a04e4c <___vfprintf_internal_r+0x159c>
  a04380:	3c00000b 	ldhu	r16,0(r7)
  a04384:	0009883a 	mov	r4,zero
  a04388:	39c00104 	addi	r7,r7,4
  a0438c:	0023883a 	mov	r17,zero
  a04390:	d9c14015 	stw	r7,1280(sp)
  a04394:	d8000405 	stb	zero,16(sp)
  a04398:	003fd306 	br	a042e8 <___vfprintf_internal_r+0xa38>
  a0439c:	d9014c17 	ldw	r4,1328(sp)
  a043a0:	21000414 	ori	r4,r4,16
  a043a4:	d9014c15 	stw	r4,1328(sp)
  a043a8:	d9414c17 	ldw	r5,1328(sp)
  a043ac:	2880080c 	andi	r2,r5,32
  a043b0:	1001081e 	bne	r2,zero,a047d4 <___vfprintf_internal_r+0xf24>
  a043b4:	d8c14c17 	ldw	r3,1328(sp)
  a043b8:	1880040c 	andi	r2,r3,16
  a043bc:	1002b01e 	bne	r2,zero,a04e80 <___vfprintf_internal_r+0x15d0>
  a043c0:	d9014c17 	ldw	r4,1328(sp)
  a043c4:	2080100c 	andi	r2,r4,64
  a043c8:	1002ad26 	beq	r2,zero,a04e80 <___vfprintf_internal_r+0x15d0>
  a043cc:	3c00000b 	ldhu	r16,0(r7)
  a043d0:	01000044 	movi	r4,1
  a043d4:	39c00104 	addi	r7,r7,4
  a043d8:	0023883a 	mov	r17,zero
  a043dc:	d9c14015 	stw	r7,1280(sp)
  a043e0:	d8000405 	stb	zero,16(sp)
  a043e4:	003fc006 	br	a042e8 <___vfprintf_internal_r+0xa38>
  a043e8:	d9014f17 	ldw	r4,1340(sp)
  a043ec:	b00b883a 	mov	r5,r22
  a043f0:	d9800c04 	addi	r6,sp,48
  a043f4:	0a038580 	call	a03858 <__sprint_r>
  a043f8:	103ee51e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a043fc:	dc800e17 	ldw	r18,56(sp)
  a04400:	d8c01904 	addi	r3,sp,100
  a04404:	d9814c17 	ldw	r6,1328(sp)
  a04408:	3080004c 	andi	r2,r6,1
  a0440c:	1005003a 	cmpeq	r2,r2,zero
  a04410:	103ea51e 	bne	r2,zero,a03ea8 <___vfprintf_internal_r+0x5f8>
  a04414:	00800044 	movi	r2,1
  a04418:	dc400d17 	ldw	r17,52(sp)
  a0441c:	18800115 	stw	r2,4(r3)
  a04420:	d8814917 	ldw	r2,1316(sp)
  a04424:	94800044 	addi	r18,r18,1
  a04428:	8c400044 	addi	r17,r17,1
  a0442c:	18800015 	stw	r2,0(r3)
  a04430:	008001c4 	movi	r2,7
  a04434:	dc800e15 	stw	r18,56(sp)
  a04438:	dc400d15 	stw	r17,52(sp)
  a0443c:	14421e0e 	bge	r2,r17,a04cb8 <___vfprintf_internal_r+0x1408>
  a04440:	d9014f17 	ldw	r4,1340(sp)
  a04444:	b00b883a 	mov	r5,r22
  a04448:	d9800c04 	addi	r6,sp,48
  a0444c:	0a038580 	call	a03858 <__sprint_r>
  a04450:	103ecf1e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a04454:	dc800e17 	ldw	r18,56(sp)
  a04458:	d8c01904 	addi	r3,sp,100
  a0445c:	003e9206 	br	a03ea8 <___vfprintf_internal_r+0x5f8>
  a04460:	d9014f17 	ldw	r4,1340(sp)
  a04464:	b00b883a 	mov	r5,r22
  a04468:	d9800c04 	addi	r6,sp,48
  a0446c:	0a038580 	call	a03858 <__sprint_r>
  a04470:	103ec026 	beq	r2,zero,a03f74 <___vfprintf_internal_r+0x6c4>
  a04474:	003ec606 	br	a03f90 <___vfprintf_internal_r+0x6e0>
  a04478:	d9014f17 	ldw	r4,1340(sp)
  a0447c:	b00b883a 	mov	r5,r22
  a04480:	d9800c04 	addi	r6,sp,48
  a04484:	d9c15115 	stw	r7,1348(sp)
  a04488:	0a038580 	call	a03858 <__sprint_r>
  a0448c:	d9c15117 	ldw	r7,1348(sp)
  a04490:	103ebf1e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a04494:	dc800e17 	ldw	r18,56(sp)
  a04498:	dc400d17 	ldw	r17,52(sp)
  a0449c:	dd401904 	addi	r21,sp,100
  a044a0:	003e7406 	br	a03e74 <___vfprintf_internal_r+0x5c4>
  a044a4:	d9014f17 	ldw	r4,1340(sp)
  a044a8:	b00b883a 	mov	r5,r22
  a044ac:	d9800c04 	addi	r6,sp,48
  a044b0:	d9c15115 	stw	r7,1348(sp)
  a044b4:	0a038580 	call	a03858 <__sprint_r>
  a044b8:	d9c15117 	ldw	r7,1348(sp)
  a044bc:	103eb41e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a044c0:	dd401904 	addi	r21,sp,100
  a044c4:	003d6d06 	br	a03a7c <___vfprintf_internal_r+0x1cc>
  a044c8:	d9014f17 	ldw	r4,1340(sp)
  a044cc:	b00b883a 	mov	r5,r22
  a044d0:	d9800c04 	addi	r6,sp,48
  a044d4:	d9c15115 	stw	r7,1348(sp)
  a044d8:	0a038580 	call	a03858 <__sprint_r>
  a044dc:	d9c15117 	ldw	r7,1348(sp)
  a044e0:	103eab1e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a044e4:	dc800e17 	ldw	r18,56(sp)
  a044e8:	dc400d17 	ldw	r17,52(sp)
  a044ec:	dd401904 	addi	r21,sp,100
  a044f0:	003e3406 	br	a03dc4 <___vfprintf_internal_r+0x514>
  a044f4:	d9014f17 	ldw	r4,1340(sp)
  a044f8:	b00b883a 	mov	r5,r22
  a044fc:	d9800c04 	addi	r6,sp,48
  a04500:	d9c15115 	stw	r7,1348(sp)
  a04504:	0a038580 	call	a03858 <__sprint_r>
  a04508:	d9c15117 	ldw	r7,1348(sp)
  a0450c:	103ea01e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a04510:	dc800e17 	ldw	r18,56(sp)
  a04514:	dc400d17 	ldw	r17,52(sp)
  a04518:	dd401904 	addi	r21,sp,100
  a0451c:	003e1c06 	br	a03d90 <___vfprintf_internal_r+0x4e0>
  a04520:	d9014f17 	ldw	r4,1340(sp)
  a04524:	b00b883a 	mov	r5,r22
  a04528:	d9800c04 	addi	r6,sp,48
  a0452c:	d9c15115 	stw	r7,1348(sp)
  a04530:	0a038580 	call	a03858 <__sprint_r>
  a04534:	d9c15117 	ldw	r7,1348(sp)
  a04538:	103e951e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a0453c:	dc800e17 	ldw	r18,56(sp)
  a04540:	dc400d17 	ldw	r17,52(sp)
  a04544:	dd401904 	addi	r21,sp,100
  a04548:	003e0406 	br	a03d5c <___vfprintf_internal_r+0x4ac>
  a0454c:	d9000517 	ldw	r4,20(sp)
  a04550:	0102520e 	bge	zero,r4,a04e9c <___vfprintf_internal_r+0x15ec>
  a04554:	d9814717 	ldw	r6,1308(sp)
  a04558:	21807a16 	blt	r4,r6,a04744 <___vfprintf_internal_r+0xe94>
  a0455c:	d8814117 	ldw	r2,1284(sp)
  a04560:	91a5883a 	add	r18,r18,r6
  a04564:	8c400044 	addi	r17,r17,1
  a04568:	a8800015 	stw	r2,0(r21)
  a0456c:	008001c4 	movi	r2,7
  a04570:	a9800115 	stw	r6,4(r21)
  a04574:	dc800e15 	stw	r18,56(sp)
  a04578:	dc400d15 	stw	r17,52(sp)
  a0457c:	1442f616 	blt	r2,r17,a05158 <___vfprintf_internal_r+0x18a8>
  a04580:	a8c00204 	addi	r3,r21,8
  a04584:	d9414717 	ldw	r5,1308(sp)
  a04588:	2161c83a 	sub	r16,r4,r5
  a0458c:	043f9d0e 	bge	zero,r16,a04404 <___vfprintf_internal_r+0xb54>
  a04590:	00800404 	movi	r2,16
  a04594:	1402130e 	bge	r2,r16,a04de4 <___vfprintf_internal_r+0x1534>
  a04598:	dc400d17 	ldw	r17,52(sp)
  a0459c:	1027883a 	mov	r19,r2
  a045a0:	07002874 	movhi	fp,161
  a045a4:	e7035184 	addi	fp,fp,3398
  a045a8:	050001c4 	movi	r20,7
  a045ac:	00000306 	br	a045bc <___vfprintf_internal_r+0xd0c>
  a045b0:	18c00204 	addi	r3,r3,8
  a045b4:	843ffc04 	addi	r16,r16,-16
  a045b8:	9c020d0e 	bge	r19,r16,a04df0 <___vfprintf_internal_r+0x1540>
  a045bc:	94800404 	addi	r18,r18,16
  a045c0:	8c400044 	addi	r17,r17,1
  a045c4:	1f000015 	stw	fp,0(r3)
  a045c8:	1cc00115 	stw	r19,4(r3)
  a045cc:	dc800e15 	stw	r18,56(sp)
  a045d0:	dc400d15 	stw	r17,52(sp)
  a045d4:	a47ff60e 	bge	r20,r17,a045b0 <___vfprintf_internal_r+0xd00>
  a045d8:	d9014f17 	ldw	r4,1340(sp)
  a045dc:	b00b883a 	mov	r5,r22
  a045e0:	d9800c04 	addi	r6,sp,48
  a045e4:	0a038580 	call	a03858 <__sprint_r>
  a045e8:	103e691e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a045ec:	dc800e17 	ldw	r18,56(sp)
  a045f0:	dc400d17 	ldw	r17,52(sp)
  a045f4:	d8c01904 	addi	r3,sp,100
  a045f8:	003fee06 	br	a045b4 <___vfprintf_internal_r+0xd04>
  a045fc:	d8814717 	ldw	r2,1308(sp)
  a04600:	143fffc4 	addi	r16,r2,-1
  a04604:	043e970e 	bge	zero,r16,a04064 <___vfprintf_internal_r+0x7b4>
  a04608:	00800404 	movi	r2,16
  a0460c:	1400180e 	bge	r2,r16,a04670 <___vfprintf_internal_r+0xdc0>
  a04610:	1029883a 	mov	r20,r2
  a04614:	07002874 	movhi	fp,161
  a04618:	e7035184 	addi	fp,fp,3398
  a0461c:	054001c4 	movi	r21,7
  a04620:	00000306 	br	a04630 <___vfprintf_internal_r+0xd80>
  a04624:	9cc00204 	addi	r19,r19,8
  a04628:	843ffc04 	addi	r16,r16,-16
  a0462c:	a400120e 	bge	r20,r16,a04678 <___vfprintf_internal_r+0xdc8>
  a04630:	94800404 	addi	r18,r18,16
  a04634:	8c400044 	addi	r17,r17,1
  a04638:	9f000015 	stw	fp,0(r19)
  a0463c:	9d000115 	stw	r20,4(r19)
  a04640:	dc800e15 	stw	r18,56(sp)
  a04644:	dc400d15 	stw	r17,52(sp)
  a04648:	ac7ff60e 	bge	r21,r17,a04624 <___vfprintf_internal_r+0xd74>
  a0464c:	d9014f17 	ldw	r4,1340(sp)
  a04650:	b00b883a 	mov	r5,r22
  a04654:	d9800c04 	addi	r6,sp,48
  a04658:	0a038580 	call	a03858 <__sprint_r>
  a0465c:	103e4c1e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a04660:	dc800e17 	ldw	r18,56(sp)
  a04664:	dc400d17 	ldw	r17,52(sp)
  a04668:	dcc01904 	addi	r19,sp,100
  a0466c:	003fee06 	br	a04628 <___vfprintf_internal_r+0xd78>
  a04670:	07002874 	movhi	fp,161
  a04674:	e7035184 	addi	fp,fp,3398
  a04678:	9425883a 	add	r18,r18,r16
  a0467c:	8c400044 	addi	r17,r17,1
  a04680:	008001c4 	movi	r2,7
  a04684:	9f000015 	stw	fp,0(r19)
  a04688:	9c000115 	stw	r16,4(r19)
  a0468c:	dc800e15 	stw	r18,56(sp)
  a04690:	dc400d15 	stw	r17,52(sp)
  a04694:	147e720e 	bge	r2,r17,a04060 <___vfprintf_internal_r+0x7b0>
  a04698:	d9014f17 	ldw	r4,1340(sp)
  a0469c:	b00b883a 	mov	r5,r22
  a046a0:	d9800c04 	addi	r6,sp,48
  a046a4:	0a038580 	call	a03858 <__sprint_r>
  a046a8:	103e391e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a046ac:	dc800e17 	ldw	r18,56(sp)
  a046b0:	dc400d17 	ldw	r17,52(sp)
  a046b4:	dcc01904 	addi	r19,sp,100
  a046b8:	003e6a06 	br	a04064 <___vfprintf_internal_r+0x7b4>
  a046bc:	d9014f17 	ldw	r4,1340(sp)
  a046c0:	b00b883a 	mov	r5,r22
  a046c4:	d9800c04 	addi	r6,sp,48
  a046c8:	d9c15115 	stw	r7,1348(sp)
  a046cc:	0a038580 	call	a03858 <__sprint_r>
  a046d0:	d9c15117 	ldw	r7,1348(sp)
  a046d4:	103e2e1e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a046d8:	dc800e17 	ldw	r18,56(sp)
  a046dc:	dc400d17 	ldw	r17,52(sp)
  a046e0:	dd401904 	addi	r21,sp,100
  a046e4:	003dba06 	br	a03dd0 <___vfprintf_internal_r+0x520>
  a046e8:	d9014f17 	ldw	r4,1340(sp)
  a046ec:	b00b883a 	mov	r5,r22
  a046f0:	d9800c04 	addi	r6,sp,48
  a046f4:	0a038580 	call	a03858 <__sprint_r>
  a046f8:	103e251e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a046fc:	dc800e17 	ldw	r18,56(sp)
  a04700:	dc400d17 	ldw	r17,52(sp)
  a04704:	dcc01904 	addi	r19,sp,100
  a04708:	003e4206 	br	a04014 <___vfprintf_internal_r+0x764>
  a0470c:	d9014f17 	ldw	r4,1340(sp)
  a04710:	b00b883a 	mov	r5,r22
  a04714:	d9800c04 	addi	r6,sp,48
  a04718:	0a038580 	call	a03858 <__sprint_r>
  a0471c:	103e1c1e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a04720:	dc800e17 	ldw	r18,56(sp)
  a04724:	dc400d17 	ldw	r17,52(sp)
  a04728:	d8c01904 	addi	r3,sp,100
  a0472c:	003e2e06 	br	a03fe8 <___vfprintf_internal_r+0x738>
  a04730:	d9414c17 	ldw	r5,1328(sp)
  a04734:	2880004c 	andi	r2,r5,1
  a04738:	1005003a 	cmpeq	r2,r2,zero
  a0473c:	103dda1e 	bne	r2,zero,a03ea8 <___vfprintf_internal_r+0x5f8>
  a04740:	003e9f06 	br	a041c0 <___vfprintf_internal_r+0x910>
  a04744:	d8c14117 	ldw	r3,1284(sp)
  a04748:	9125883a 	add	r18,r18,r4
  a0474c:	8c400044 	addi	r17,r17,1
  a04750:	008001c4 	movi	r2,7
  a04754:	a8c00015 	stw	r3,0(r21)
  a04758:	a9000115 	stw	r4,4(r21)
  a0475c:	dc800e15 	stw	r18,56(sp)
  a04760:	dc400d15 	stw	r17,52(sp)
  a04764:	14426616 	blt	r2,r17,a05100 <___vfprintf_internal_r+0x1850>
  a04768:	a8c00204 	addi	r3,r21,8
  a0476c:	d9414917 	ldw	r5,1316(sp)
  a04770:	00800044 	movi	r2,1
  a04774:	94800044 	addi	r18,r18,1
  a04778:	8c400044 	addi	r17,r17,1
  a0477c:	18800115 	stw	r2,4(r3)
  a04780:	008001c4 	movi	r2,7
  a04784:	19400015 	stw	r5,0(r3)
  a04788:	dc800e15 	stw	r18,56(sp)
  a0478c:	dc400d15 	stw	r17,52(sp)
  a04790:	2021883a 	mov	r16,r4
  a04794:	14425016 	blt	r2,r17,a050d8 <___vfprintf_internal_r+0x1828>
  a04798:	19400204 	addi	r5,r3,8
  a0479c:	d9814717 	ldw	r6,1308(sp)
  a047a0:	8c400044 	addi	r17,r17,1
  a047a4:	dc400d15 	stw	r17,52(sp)
  a047a8:	3107c83a 	sub	r3,r6,r4
  a047ac:	d9014117 	ldw	r4,1284(sp)
  a047b0:	90e5883a 	add	r18,r18,r3
  a047b4:	28c00115 	stw	r3,4(r5)
  a047b8:	8105883a 	add	r2,r16,r4
  a047bc:	28800015 	stw	r2,0(r5)
  a047c0:	008001c4 	movi	r2,7
  a047c4:	dc800e15 	stw	r18,56(sp)
  a047c8:	147f1d16 	blt	r2,r17,a04440 <___vfprintf_internal_r+0xb90>
  a047cc:	28c00204 	addi	r3,r5,8
  a047d0:	003db506 	br	a03ea8 <___vfprintf_internal_r+0x5f8>
  a047d4:	3c000017 	ldw	r16,0(r7)
  a047d8:	3c400117 	ldw	r17,4(r7)
  a047dc:	39800204 	addi	r6,r7,8
  a047e0:	01000044 	movi	r4,1
  a047e4:	d9814015 	stw	r6,1280(sp)
  a047e8:	d8000405 	stb	zero,16(sp)
  a047ec:	003ebe06 	br	a042e8 <___vfprintf_internal_r+0xa38>
  a047f0:	3c000017 	ldw	r16,0(r7)
  a047f4:	3c400117 	ldw	r17,4(r7)
  a047f8:	38800204 	addi	r2,r7,8
  a047fc:	d8814015 	stw	r2,1280(sp)
  a04800:	003eb706 	br	a042e0 <___vfprintf_internal_r+0xa30>
  a04804:	3c000017 	ldw	r16,0(r7)
  a04808:	3c400117 	ldw	r17,4(r7)
  a0480c:	39000204 	addi	r4,r7,8
  a04810:	d9014015 	stw	r4,1280(sp)
  a04814:	0009883a 	mov	r4,zero
  a04818:	d8000405 	stb	zero,16(sp)
  a0481c:	003eb206 	br	a042e8 <___vfprintf_internal_r+0xa38>
  a04820:	38c00017 	ldw	r3,0(r7)
  a04824:	39c00104 	addi	r7,r7,4
  a04828:	d8c14a15 	stw	r3,1320(sp)
  a0482c:	1800d10e 	bge	r3,zero,a04b74 <___vfprintf_internal_r+0x12c4>
  a04830:	00c7c83a 	sub	r3,zero,r3
  a04834:	d8c14a15 	stw	r3,1320(sp)
  a04838:	d9014c17 	ldw	r4,1328(sp)
  a0483c:	b8c00007 	ldb	r3,0(r23)
  a04840:	21000114 	ori	r4,r4,4
  a04844:	d9014c15 	stw	r4,1328(sp)
  a04848:	003c9806 	br	a03aac <___vfprintf_internal_r+0x1fc>
  a0484c:	d9814c17 	ldw	r6,1328(sp)
  a04850:	3080080c 	andi	r2,r6,32
  a04854:	1001f026 	beq	r2,zero,a05018 <___vfprintf_internal_r+0x1768>
  a04858:	d9014b17 	ldw	r4,1324(sp)
  a0485c:	38800017 	ldw	r2,0(r7)
  a04860:	39c00104 	addi	r7,r7,4
  a04864:	d9c14015 	stw	r7,1280(sp)
  a04868:	2007d7fa 	srai	r3,r4,31
  a0486c:	d9c14017 	ldw	r7,1280(sp)
  a04870:	11000015 	stw	r4,0(r2)
  a04874:	10c00115 	stw	r3,4(r2)
  a04878:	003c6906 	br	a03a20 <___vfprintf_internal_r+0x170>
  a0487c:	b8c00007 	ldb	r3,0(r23)
  a04880:	00801b04 	movi	r2,108
  a04884:	18824f26 	beq	r3,r2,a051c4 <___vfprintf_internal_r+0x1914>
  a04888:	d9414c17 	ldw	r5,1328(sp)
  a0488c:	29400414 	ori	r5,r5,16
  a04890:	d9414c15 	stw	r5,1328(sp)
  a04894:	003c8506 	br	a03aac <___vfprintf_internal_r+0x1fc>
  a04898:	d9814c17 	ldw	r6,1328(sp)
  a0489c:	b8c00007 	ldb	r3,0(r23)
  a048a0:	31800814 	ori	r6,r6,32
  a048a4:	d9814c15 	stw	r6,1328(sp)
  a048a8:	003c8006 	br	a03aac <___vfprintf_internal_r+0x1fc>
  a048ac:	d8814c17 	ldw	r2,1328(sp)
  a048b0:	3c000017 	ldw	r16,0(r7)
  a048b4:	00c01e04 	movi	r3,120
  a048b8:	10800094 	ori	r2,r2,2
  a048bc:	d8814c15 	stw	r2,1328(sp)
  a048c0:	39c00104 	addi	r7,r7,4
  a048c4:	01402874 	movhi	r5,161
  a048c8:	29433b04 	addi	r5,r5,3308
  a048cc:	00800c04 	movi	r2,48
  a048d0:	0023883a 	mov	r17,zero
  a048d4:	01000084 	movi	r4,2
  a048d8:	d9c14015 	stw	r7,1280(sp)
  a048dc:	d8c14d15 	stw	r3,1332(sp)
  a048e0:	d9414415 	stw	r5,1296(sp)
  a048e4:	d8800445 	stb	r2,17(sp)
  a048e8:	d8c00485 	stb	r3,18(sp)
  a048ec:	d8000405 	stb	zero,16(sp)
  a048f0:	003e7d06 	br	a042e8 <___vfprintf_internal_r+0xa38>
  a048f4:	d8814c17 	ldw	r2,1328(sp)
  a048f8:	b8c00007 	ldb	r3,0(r23)
  a048fc:	10801014 	ori	r2,r2,64
  a04900:	d8814c15 	stw	r2,1328(sp)
  a04904:	003c6906 	br	a03aac <___vfprintf_internal_r+0x1fc>
  a04908:	d9414c17 	ldw	r5,1328(sp)
  a0490c:	2880020c 	andi	r2,r5,8
  a04910:	1001df26 	beq	r2,zero,a05090 <___vfprintf_internal_r+0x17e0>
  a04914:	39800017 	ldw	r6,0(r7)
  a04918:	38800204 	addi	r2,r7,8
  a0491c:	d8814015 	stw	r2,1280(sp)
  a04920:	d9814215 	stw	r6,1288(sp)
  a04924:	39c00117 	ldw	r7,4(r7)
  a04928:	d9c14315 	stw	r7,1292(sp)
  a0492c:	d9014217 	ldw	r4,1288(sp)
  a04930:	d9414317 	ldw	r5,1292(sp)
  a04934:	0a0a2500 	call	a0a250 <__isinfd>
  a04938:	10021726 	beq	r2,zero,a05198 <___vfprintf_internal_r+0x18e8>
  a0493c:	d9014217 	ldw	r4,1288(sp)
  a04940:	d9414317 	ldw	r5,1292(sp)
  a04944:	000d883a 	mov	r6,zero
  a04948:	000f883a 	mov	r7,zero
  a0494c:	0a0bab40 	call	a0bab4 <__ltdf2>
  a04950:	1002ca16 	blt	r2,zero,a0547c <___vfprintf_internal_r+0x1bcc>
  a04954:	d9414d17 	ldw	r5,1332(sp)
  a04958:	008011c4 	movi	r2,71
  a0495c:	11420a16 	blt	r2,r5,a05188 <___vfprintf_internal_r+0x18d8>
  a04960:	01802874 	movhi	r6,161
  a04964:	31834004 	addi	r6,r6,3328
  a04968:	d9814115 	stw	r6,1284(sp)
  a0496c:	d9014c17 	ldw	r4,1328(sp)
  a04970:	00c000c4 	movi	r3,3
  a04974:	00bfdfc4 	movi	r2,-129
  a04978:	2088703a 	and	r4,r4,r2
  a0497c:	180f883a 	mov	r7,r3
  a04980:	d8c14515 	stw	r3,1300(sp)
  a04984:	d9014c15 	stw	r4,1328(sp)
  a04988:	d8014615 	stw	zero,1304(sp)
  a0498c:	003e6a06 	br	a04338 <___vfprintf_internal_r+0xa88>
  a04990:	38800017 	ldw	r2,0(r7)
  a04994:	00c00044 	movi	r3,1
  a04998:	39c00104 	addi	r7,r7,4
  a0499c:	d9c14015 	stw	r7,1280(sp)
  a049a0:	d9000f04 	addi	r4,sp,60
  a049a4:	180f883a 	mov	r7,r3
  a049a8:	d8c14515 	stw	r3,1300(sp)
  a049ac:	d9014115 	stw	r4,1284(sp)
  a049b0:	d8800f05 	stb	r2,60(sp)
  a049b4:	d8000405 	stb	zero,16(sp)
  a049b8:	003cac06 	br	a03c6c <___vfprintf_internal_r+0x3bc>
  a049bc:	01402874 	movhi	r5,161
  a049c0:	29434604 	addi	r5,r5,3352
  a049c4:	d9414415 	stw	r5,1296(sp)
  a049c8:	d9814c17 	ldw	r6,1328(sp)
  a049cc:	3080080c 	andi	r2,r6,32
  a049d0:	1000f926 	beq	r2,zero,a04db8 <___vfprintf_internal_r+0x1508>
  a049d4:	3c000017 	ldw	r16,0(r7)
  a049d8:	3c400117 	ldw	r17,4(r7)
  a049dc:	38800204 	addi	r2,r7,8
  a049e0:	d8814015 	stw	r2,1280(sp)
  a049e4:	d9414c17 	ldw	r5,1328(sp)
  a049e8:	2880004c 	andi	r2,r5,1
  a049ec:	1005003a 	cmpeq	r2,r2,zero
  a049f0:	1000b31e 	bne	r2,zero,a04cc0 <___vfprintf_internal_r+0x1410>
  a049f4:	8444b03a 	or	r2,r16,r17
  a049f8:	1000b126 	beq	r2,zero,a04cc0 <___vfprintf_internal_r+0x1410>
  a049fc:	d9814d17 	ldw	r6,1332(sp)
  a04a00:	29400094 	ori	r5,r5,2
  a04a04:	00800c04 	movi	r2,48
  a04a08:	01000084 	movi	r4,2
  a04a0c:	d9414c15 	stw	r5,1328(sp)
  a04a10:	d8800445 	stb	r2,17(sp)
  a04a14:	d9800485 	stb	r6,18(sp)
  a04a18:	d8000405 	stb	zero,16(sp)
  a04a1c:	003e3206 	br	a042e8 <___vfprintf_internal_r+0xa38>
  a04a20:	01802874 	movhi	r6,161
  a04a24:	31833b04 	addi	r6,r6,3308
  a04a28:	d9814415 	stw	r6,1296(sp)
  a04a2c:	003fe606 	br	a049c8 <___vfprintf_internal_r+0x1118>
  a04a30:	00800ac4 	movi	r2,43
  a04a34:	d8800405 	stb	r2,16(sp)
  a04a38:	b8c00007 	ldb	r3,0(r23)
  a04a3c:	003c1b06 	br	a03aac <___vfprintf_internal_r+0x1fc>
  a04a40:	d8814c17 	ldw	r2,1328(sp)
  a04a44:	b8c00007 	ldb	r3,0(r23)
  a04a48:	10800054 	ori	r2,r2,1
  a04a4c:	d8814c15 	stw	r2,1328(sp)
  a04a50:	003c1606 	br	a03aac <___vfprintf_internal_r+0x1fc>
  a04a54:	d8800407 	ldb	r2,16(sp)
  a04a58:	1000461e 	bne	r2,zero,a04b74 <___vfprintf_internal_r+0x12c4>
  a04a5c:	00800804 	movi	r2,32
  a04a60:	d8800405 	stb	r2,16(sp)
  a04a64:	b8c00007 	ldb	r3,0(r23)
  a04a68:	003c1006 	br	a03aac <___vfprintf_internal_r+0x1fc>
  a04a6c:	d9814c17 	ldw	r6,1328(sp)
  a04a70:	b8c00007 	ldb	r3,0(r23)
  a04a74:	31800214 	ori	r6,r6,8
  a04a78:	d9814c15 	stw	r6,1328(sp)
  a04a7c:	003c0b06 	br	a03aac <___vfprintf_internal_r+0x1fc>
  a04a80:	0007883a 	mov	r3,zero
  a04a84:	01000244 	movi	r4,9
  a04a88:	188002a4 	muli	r2,r3,10
  a04a8c:	b8c00007 	ldb	r3,0(r23)
  a04a90:	d9814d17 	ldw	r6,1332(sp)
  a04a94:	bdc00044 	addi	r23,r23,1
  a04a98:	d8c14d15 	stw	r3,1332(sp)
  a04a9c:	d9414d17 	ldw	r5,1332(sp)
  a04aa0:	3085883a 	add	r2,r6,r2
  a04aa4:	10fff404 	addi	r3,r2,-48
  a04aa8:	28bff404 	addi	r2,r5,-48
  a04aac:	20bff62e 	bgeu	r4,r2,a04a88 <___vfprintf_internal_r+0x11d8>
  a04ab0:	d8c14a15 	stw	r3,1320(sp)
  a04ab4:	003bff06 	br	a03ab4 <___vfprintf_internal_r+0x204>
  a04ab8:	d9414c17 	ldw	r5,1328(sp)
  a04abc:	b8c00007 	ldb	r3,0(r23)
  a04ac0:	29402014 	ori	r5,r5,128
  a04ac4:	d9414c15 	stw	r5,1328(sp)
  a04ac8:	003bf806 	br	a03aac <___vfprintf_internal_r+0x1fc>
  a04acc:	b8c00007 	ldb	r3,0(r23)
  a04ad0:	00800a84 	movi	r2,42
  a04ad4:	bdc00044 	addi	r23,r23,1
  a04ad8:	18831526 	beq	r3,r2,a05730 <___vfprintf_internal_r+0x1e80>
  a04adc:	d8c14d15 	stw	r3,1332(sp)
  a04ae0:	18bff404 	addi	r2,r3,-48
  a04ae4:	00c00244 	movi	r3,9
  a04ae8:	18827836 	bltu	r3,r2,a054cc <___vfprintf_internal_r+0x1c1c>
  a04aec:	000d883a 	mov	r6,zero
  a04af0:	308002a4 	muli	r2,r6,10
  a04af4:	b9800007 	ldb	r6,0(r23)
  a04af8:	d9414d17 	ldw	r5,1332(sp)
  a04afc:	bdc00044 	addi	r23,r23,1
  a04b00:	d9814d15 	stw	r6,1332(sp)
  a04b04:	d9014d17 	ldw	r4,1332(sp)
  a04b08:	1145883a 	add	r2,r2,r5
  a04b0c:	11bff404 	addi	r6,r2,-48
  a04b10:	20bff404 	addi	r2,r4,-48
  a04b14:	18bff62e 	bgeu	r3,r2,a04af0 <___vfprintf_internal_r+0x1240>
  a04b18:	3027883a 	mov	r19,r6
  a04b1c:	303be50e 	bge	r6,zero,a03ab4 <___vfprintf_internal_r+0x204>
  a04b20:	04ffffc4 	movi	r19,-1
  a04b24:	003be306 	br	a03ab4 <___vfprintf_internal_r+0x204>
  a04b28:	d8000405 	stb	zero,16(sp)
  a04b2c:	39800017 	ldw	r6,0(r7)
  a04b30:	39c00104 	addi	r7,r7,4
  a04b34:	d9c14015 	stw	r7,1280(sp)
  a04b38:	d9814115 	stw	r6,1284(sp)
  a04b3c:	3001c926 	beq	r6,zero,a05264 <___vfprintf_internal_r+0x19b4>
  a04b40:	98000e16 	blt	r19,zero,a04b7c <___vfprintf_internal_r+0x12cc>
  a04b44:	d9014117 	ldw	r4,1284(sp)
  a04b48:	000b883a 	mov	r5,zero
  a04b4c:	980d883a 	mov	r6,r19
  a04b50:	0a0896c0 	call	a0896c <memchr>
  a04b54:	10025926 	beq	r2,zero,a054bc <___vfprintf_internal_r+0x1c0c>
  a04b58:	d8c14117 	ldw	r3,1284(sp)
  a04b5c:	10cfc83a 	sub	r7,r2,r3
  a04b60:	99c19e16 	blt	r19,r7,a051dc <___vfprintf_internal_r+0x192c>
  a04b64:	d9c14515 	stw	r7,1300(sp)
  a04b68:	38000916 	blt	r7,zero,a04b90 <___vfprintf_internal_r+0x12e0>
  a04b6c:	d8014615 	stw	zero,1304(sp)
  a04b70:	003df106 	br	a04338 <___vfprintf_internal_r+0xa88>
  a04b74:	b8c00007 	ldb	r3,0(r23)
  a04b78:	003bcc06 	br	a03aac <___vfprintf_internal_r+0x1fc>
  a04b7c:	d9014117 	ldw	r4,1284(sp)
  a04b80:	0a037e40 	call	a037e4 <strlen>
  a04b84:	d8814515 	stw	r2,1300(sp)
  a04b88:	100f883a 	mov	r7,r2
  a04b8c:	103ff70e 	bge	r2,zero,a04b6c <___vfprintf_internal_r+0x12bc>
  a04b90:	d8014515 	stw	zero,1300(sp)
  a04b94:	d8014615 	stw	zero,1304(sp)
  a04b98:	003de706 	br	a04338 <___vfprintf_internal_r+0xa88>
  a04b9c:	20c03fcc 	andi	r3,r4,255
  a04ba0:	00800044 	movi	r2,1
  a04ba4:	18802d26 	beq	r3,r2,a04c5c <___vfprintf_internal_r+0x13ac>
  a04ba8:	18800e36 	bltu	r3,r2,a04be4 <___vfprintf_internal_r+0x1334>
  a04bac:	00800084 	movi	r2,2
  a04bb0:	1880fa26 	beq	r3,r2,a04f9c <___vfprintf_internal_r+0x16ec>
  a04bb4:	01002874 	movhi	r4,161
  a04bb8:	21034b04 	addi	r4,r4,3372
  a04bbc:	0a037e40 	call	a037e4 <strlen>
  a04bc0:	100f883a 	mov	r7,r2
  a04bc4:	dcc14515 	stw	r19,1300(sp)
  a04bc8:	9880010e 	bge	r19,r2,a04bd0 <___vfprintf_internal_r+0x1320>
  a04bcc:	d8814515 	stw	r2,1300(sp)
  a04bd0:	00802874 	movhi	r2,161
  a04bd4:	10834b04 	addi	r2,r2,3372
  a04bd8:	dcc14615 	stw	r19,1304(sp)
  a04bdc:	d8814115 	stw	r2,1284(sp)
  a04be0:	003dd506 	br	a04338 <___vfprintf_internal_r+0xa88>
  a04be4:	d9401904 	addi	r5,sp,100
  a04be8:	dd000f04 	addi	r20,sp,60
  a04bec:	d9414115 	stw	r5,1284(sp)
  a04bf0:	880a977a 	slli	r5,r17,29
  a04bf4:	d9814117 	ldw	r6,1284(sp)
  a04bf8:	8004d0fa 	srli	r2,r16,3
  a04bfc:	8806d0fa 	srli	r3,r17,3
  a04c00:	810001cc 	andi	r4,r16,7
  a04c04:	2884b03a 	or	r2,r5,r2
  a04c08:	31bfffc4 	addi	r6,r6,-1
  a04c0c:	21000c04 	addi	r4,r4,48
  a04c10:	d9814115 	stw	r6,1284(sp)
  a04c14:	10cab03a 	or	r5,r2,r3
  a04c18:	31000005 	stb	r4,0(r6)
  a04c1c:	1021883a 	mov	r16,r2
  a04c20:	1823883a 	mov	r17,r3
  a04c24:	283ff21e 	bne	r5,zero,a04bf0 <___vfprintf_internal_r+0x1340>
  a04c28:	d8c14c17 	ldw	r3,1328(sp)
  a04c2c:	1880004c 	andi	r2,r3,1
  a04c30:	1005003a 	cmpeq	r2,r2,zero
  a04c34:	103db91e 	bne	r2,zero,a0431c <___vfprintf_internal_r+0xa6c>
  a04c38:	20803fcc 	andi	r2,r4,255
  a04c3c:	1080201c 	xori	r2,r2,128
  a04c40:	10bfe004 	addi	r2,r2,-128
  a04c44:	00c00c04 	movi	r3,48
  a04c48:	10fdb426 	beq	r2,r3,a0431c <___vfprintf_internal_r+0xa6c>
  a04c4c:	31bfffc4 	addi	r6,r6,-1
  a04c50:	d9814115 	stw	r6,1284(sp)
  a04c54:	30c00005 	stb	r3,0(r6)
  a04c58:	003db006 	br	a0431c <___vfprintf_internal_r+0xa6c>
  a04c5c:	88800068 	cmpgeui	r2,r17,1
  a04c60:	10002c1e 	bne	r2,zero,a04d14 <___vfprintf_internal_r+0x1464>
  a04c64:	8800021e 	bne	r17,zero,a04c70 <___vfprintf_internal_r+0x13c0>
  a04c68:	00800244 	movi	r2,9
  a04c6c:	14002936 	bltu	r2,r16,a04d14 <___vfprintf_internal_r+0x1464>
  a04c70:	d90018c4 	addi	r4,sp,99
  a04c74:	dd000f04 	addi	r20,sp,60
  a04c78:	d9014115 	stw	r4,1284(sp)
  a04c7c:	d9014117 	ldw	r4,1284(sp)
  a04c80:	80800c04 	addi	r2,r16,48
  a04c84:	20800005 	stb	r2,0(r4)
  a04c88:	003da406 	br	a0431c <___vfprintf_internal_r+0xa6c>
  a04c8c:	dc400d17 	ldw	r17,52(sp)
  a04c90:	07002874 	movhi	fp,161
  a04c94:	e7035184 	addi	fp,fp,3398
  a04c98:	9425883a 	add	r18,r18,r16
  a04c9c:	8c400044 	addi	r17,r17,1
  a04ca0:	008001c4 	movi	r2,7
  a04ca4:	1f000015 	stw	fp,0(r3)
  a04ca8:	1c000115 	stw	r16,4(r3)
  a04cac:	dc800e15 	stw	r18,56(sp)
  a04cb0:	dc400d15 	stw	r17,52(sp)
  a04cb4:	147de216 	blt	r2,r17,a04440 <___vfprintf_internal_r+0xb90>
  a04cb8:	18c00204 	addi	r3,r3,8
  a04cbc:	003c7a06 	br	a03ea8 <___vfprintf_internal_r+0x5f8>
  a04cc0:	01000084 	movi	r4,2
  a04cc4:	d8000405 	stb	zero,16(sp)
  a04cc8:	003d8706 	br	a042e8 <___vfprintf_internal_r+0xa38>
  a04ccc:	d9814c17 	ldw	r6,1328(sp)
  a04cd0:	30c4703a 	and	r2,r6,r3
  a04cd4:	1005003a 	cmpeq	r2,r2,zero
  a04cd8:	103cb926 	beq	r2,zero,a03fc0 <___vfprintf_internal_r+0x710>
  a04cdc:	d9014117 	ldw	r4,1284(sp)
  a04ce0:	94800044 	addi	r18,r18,1
  a04ce4:	8c400044 	addi	r17,r17,1
  a04ce8:	008001c4 	movi	r2,7
  a04cec:	a9000015 	stw	r4,0(r21)
  a04cf0:	a8c00115 	stw	r3,4(r21)
  a04cf4:	dc800e15 	stw	r18,56(sp)
  a04cf8:	dc400d15 	stw	r17,52(sp)
  a04cfc:	147e6616 	blt	r2,r17,a04698 <___vfprintf_internal_r+0xde8>
  a04d00:	acc00204 	addi	r19,r21,8
  a04d04:	003cd706 	br	a04064 <___vfprintf_internal_r+0x7b4>
  a04d08:	07002874 	movhi	fp,161
  a04d0c:	e7035184 	addi	fp,fp,3398
  a04d10:	003c4f06 	br	a03e50 <___vfprintf_internal_r+0x5a0>
  a04d14:	dd000f04 	addi	r20,sp,60
  a04d18:	dc801904 	addi	r18,sp,100
  a04d1c:	8009883a 	mov	r4,r16
  a04d20:	880b883a 	mov	r5,r17
  a04d24:	01800284 	movi	r6,10
  a04d28:	000f883a 	mov	r7,zero
  a04d2c:	0a0afa80 	call	a0afa8 <__umoddi3>
  a04d30:	12000c04 	addi	r8,r2,48
  a04d34:	94bfffc4 	addi	r18,r18,-1
  a04d38:	8009883a 	mov	r4,r16
  a04d3c:	880b883a 	mov	r5,r17
  a04d40:	01800284 	movi	r6,10
  a04d44:	000f883a 	mov	r7,zero
  a04d48:	92000005 	stb	r8,0(r18)
  a04d4c:	0a0a9cc0 	call	a0a9cc <__udivdi3>
  a04d50:	1009883a 	mov	r4,r2
  a04d54:	1021883a 	mov	r16,r2
  a04d58:	18800068 	cmpgeui	r2,r3,1
  a04d5c:	1823883a 	mov	r17,r3
  a04d60:	103fee1e 	bne	r2,zero,a04d1c <___vfprintf_internal_r+0x146c>
  a04d64:	1800021e 	bne	r3,zero,a04d70 <___vfprintf_internal_r+0x14c0>
  a04d68:	00800244 	movi	r2,9
  a04d6c:	113feb36 	bltu	r2,r4,a04d1c <___vfprintf_internal_r+0x146c>
  a04d70:	94bfffc4 	addi	r18,r18,-1
  a04d74:	dc814115 	stw	r18,1284(sp)
  a04d78:	003fc006 	br	a04c7c <___vfprintf_internal_r+0x13cc>
  a04d7c:	d9014c17 	ldw	r4,1328(sp)
  a04d80:	2080004c 	andi	r2,r4,1
  a04d84:	10009a1e 	bne	r2,zero,a04ff0 <___vfprintf_internal_r+0x1740>
  a04d88:	d9401904 	addi	r5,sp,100
  a04d8c:	dd000f04 	addi	r20,sp,60
  a04d90:	d9414115 	stw	r5,1284(sp)
  a04d94:	003d6106 	br	a0431c <___vfprintf_internal_r+0xa6c>
  a04d98:	d9014f17 	ldw	r4,1340(sp)
  a04d9c:	b00b883a 	mov	r5,r22
  a04da0:	d9800c04 	addi	r6,sp,48
  a04da4:	0a038580 	call	a03858 <__sprint_r>
  a04da8:	103c791e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a04dac:	dc800e17 	ldw	r18,56(sp)
  a04db0:	d8c01904 	addi	r3,sp,100
  a04db4:	003cff06 	br	a041b4 <___vfprintf_internal_r+0x904>
  a04db8:	d8c14c17 	ldw	r3,1328(sp)
  a04dbc:	1880040c 	andi	r2,r3,16
  a04dc0:	1000711e 	bne	r2,zero,a04f88 <___vfprintf_internal_r+0x16d8>
  a04dc4:	d9014c17 	ldw	r4,1328(sp)
  a04dc8:	2080100c 	andi	r2,r4,64
  a04dcc:	10006e26 	beq	r2,zero,a04f88 <___vfprintf_internal_r+0x16d8>
  a04dd0:	3c00000b 	ldhu	r16,0(r7)
  a04dd4:	0023883a 	mov	r17,zero
  a04dd8:	39c00104 	addi	r7,r7,4
  a04ddc:	d9c14015 	stw	r7,1280(sp)
  a04de0:	003f0006 	br	a049e4 <___vfprintf_internal_r+0x1134>
  a04de4:	dc400d17 	ldw	r17,52(sp)
  a04de8:	07002874 	movhi	fp,161
  a04dec:	e7035184 	addi	fp,fp,3398
  a04df0:	9425883a 	add	r18,r18,r16
  a04df4:	8c400044 	addi	r17,r17,1
  a04df8:	008001c4 	movi	r2,7
  a04dfc:	1f000015 	stw	fp,0(r3)
  a04e00:	1c000115 	stw	r16,4(r3)
  a04e04:	dc800e15 	stw	r18,56(sp)
  a04e08:	dc400d15 	stw	r17,52(sp)
  a04e0c:	147d7616 	blt	r2,r17,a043e8 <___vfprintf_internal_r+0xb38>
  a04e10:	18c00204 	addi	r3,r3,8
  a04e14:	003d7b06 	br	a04404 <___vfprintf_internal_r+0xb54>
  a04e18:	dc800e17 	ldw	r18,56(sp)
  a04e1c:	dc400d17 	ldw	r17,52(sp)
  a04e20:	07002874 	movhi	fp,161
  a04e24:	e7035584 	addi	fp,fp,3414
  a04e28:	003bc006 	br	a03d2c <___vfprintf_internal_r+0x47c>
  a04e2c:	d9014f17 	ldw	r4,1340(sp)
  a04e30:	b00b883a 	mov	r5,r22
  a04e34:	d9800c04 	addi	r6,sp,48
  a04e38:	0a038580 	call	a03858 <__sprint_r>
  a04e3c:	103c541e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a04e40:	dc800e17 	ldw	r18,56(sp)
  a04e44:	d8c01904 	addi	r3,sp,100
  a04e48:	003ce906 	br	a041f0 <___vfprintf_internal_r+0x940>
  a04e4c:	3c000017 	ldw	r16,0(r7)
  a04e50:	0009883a 	mov	r4,zero
  a04e54:	39c00104 	addi	r7,r7,4
  a04e58:	0023883a 	mov	r17,zero
  a04e5c:	d9c14015 	stw	r7,1280(sp)
  a04e60:	d8000405 	stb	zero,16(sp)
  a04e64:	003d2006 	br	a042e8 <___vfprintf_internal_r+0xa38>
  a04e68:	38800017 	ldw	r2,0(r7)
  a04e6c:	39c00104 	addi	r7,r7,4
  a04e70:	d9c14015 	stw	r7,1280(sp)
  a04e74:	1023d7fa 	srai	r17,r2,31
  a04e78:	1021883a 	mov	r16,r2
  a04e7c:	003d1806 	br	a042e0 <___vfprintf_internal_r+0xa30>
  a04e80:	3c000017 	ldw	r16,0(r7)
  a04e84:	01000044 	movi	r4,1
  a04e88:	39c00104 	addi	r7,r7,4
  a04e8c:	0023883a 	mov	r17,zero
  a04e90:	d9c14015 	stw	r7,1280(sp)
  a04e94:	d8000405 	stb	zero,16(sp)
  a04e98:	003d1306 	br	a042e8 <___vfprintf_internal_r+0xa38>
  a04e9c:	00802874 	movhi	r2,161
  a04ea0:	1082e004 	addi	r2,r2,2944
  a04ea4:	94800044 	addi	r18,r18,1
  a04ea8:	8c400044 	addi	r17,r17,1
  a04eac:	a8800015 	stw	r2,0(r21)
  a04eb0:	00c00044 	movi	r3,1
  a04eb4:	008001c4 	movi	r2,7
  a04eb8:	a8c00115 	stw	r3,4(r21)
  a04ebc:	dc800e15 	stw	r18,56(sp)
  a04ec0:	dc400d15 	stw	r17,52(sp)
  a04ec4:	1440ca16 	blt	r2,r17,a051f0 <___vfprintf_internal_r+0x1940>
  a04ec8:	a8c00204 	addi	r3,r21,8
  a04ecc:	2000061e 	bne	r4,zero,a04ee8 <___vfprintf_internal_r+0x1638>
  a04ed0:	d9414717 	ldw	r5,1308(sp)
  a04ed4:	2800041e 	bne	r5,zero,a04ee8 <___vfprintf_internal_r+0x1638>
  a04ed8:	d9814c17 	ldw	r6,1328(sp)
  a04edc:	3080004c 	andi	r2,r6,1
  a04ee0:	1005003a 	cmpeq	r2,r2,zero
  a04ee4:	103bf01e 	bne	r2,zero,a03ea8 <___vfprintf_internal_r+0x5f8>
  a04ee8:	00800044 	movi	r2,1
  a04eec:	dc400d17 	ldw	r17,52(sp)
  a04ef0:	18800115 	stw	r2,4(r3)
  a04ef4:	d8814917 	ldw	r2,1316(sp)
  a04ef8:	94800044 	addi	r18,r18,1
  a04efc:	8c400044 	addi	r17,r17,1
  a04f00:	18800015 	stw	r2,0(r3)
  a04f04:	008001c4 	movi	r2,7
  a04f08:	dc800e15 	stw	r18,56(sp)
  a04f0c:	dc400d15 	stw	r17,52(sp)
  a04f10:	1440ca16 	blt	r2,r17,a0523c <___vfprintf_internal_r+0x198c>
  a04f14:	18c00204 	addi	r3,r3,8
  a04f18:	0121c83a 	sub	r16,zero,r4
  a04f1c:	0400500e 	bge	zero,r16,a05060 <___vfprintf_internal_r+0x17b0>
  a04f20:	00800404 	movi	r2,16
  a04f24:	1400800e 	bge	r2,r16,a05128 <___vfprintf_internal_r+0x1878>
  a04f28:	1027883a 	mov	r19,r2
  a04f2c:	07002874 	movhi	fp,161
  a04f30:	e7035184 	addi	fp,fp,3398
  a04f34:	050001c4 	movi	r20,7
  a04f38:	00000306 	br	a04f48 <___vfprintf_internal_r+0x1698>
  a04f3c:	18c00204 	addi	r3,r3,8
  a04f40:	843ffc04 	addi	r16,r16,-16
  a04f44:	9c007a0e 	bge	r19,r16,a05130 <___vfprintf_internal_r+0x1880>
  a04f48:	94800404 	addi	r18,r18,16
  a04f4c:	8c400044 	addi	r17,r17,1
  a04f50:	1f000015 	stw	fp,0(r3)
  a04f54:	1cc00115 	stw	r19,4(r3)
  a04f58:	dc800e15 	stw	r18,56(sp)
  a04f5c:	dc400d15 	stw	r17,52(sp)
  a04f60:	a47ff60e 	bge	r20,r17,a04f3c <___vfprintf_internal_r+0x168c>
  a04f64:	d9014f17 	ldw	r4,1340(sp)
  a04f68:	b00b883a 	mov	r5,r22
  a04f6c:	d9800c04 	addi	r6,sp,48
  a04f70:	0a038580 	call	a03858 <__sprint_r>
  a04f74:	103c061e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a04f78:	dc800e17 	ldw	r18,56(sp)
  a04f7c:	dc400d17 	ldw	r17,52(sp)
  a04f80:	d8c01904 	addi	r3,sp,100
  a04f84:	003fee06 	br	a04f40 <___vfprintf_internal_r+0x1690>
  a04f88:	3c000017 	ldw	r16,0(r7)
  a04f8c:	0023883a 	mov	r17,zero
  a04f90:	39c00104 	addi	r7,r7,4
  a04f94:	d9c14015 	stw	r7,1280(sp)
  a04f98:	003e9206 	br	a049e4 <___vfprintf_internal_r+0x1134>
  a04f9c:	d9401904 	addi	r5,sp,100
  a04fa0:	dd000f04 	addi	r20,sp,60
  a04fa4:	d9414115 	stw	r5,1284(sp)
  a04fa8:	d9814417 	ldw	r6,1296(sp)
  a04fac:	880a973a 	slli	r5,r17,28
  a04fb0:	8004d13a 	srli	r2,r16,4
  a04fb4:	810003cc 	andi	r4,r16,15
  a04fb8:	3109883a 	add	r4,r6,r4
  a04fbc:	2884b03a 	or	r2,r5,r2
  a04fc0:	21400003 	ldbu	r5,0(r4)
  a04fc4:	d9014117 	ldw	r4,1284(sp)
  a04fc8:	8806d13a 	srli	r3,r17,4
  a04fcc:	1021883a 	mov	r16,r2
  a04fd0:	213fffc4 	addi	r4,r4,-1
  a04fd4:	d9014115 	stw	r4,1284(sp)
  a04fd8:	d9814117 	ldw	r6,1284(sp)
  a04fdc:	10c8b03a 	or	r4,r2,r3
  a04fe0:	1823883a 	mov	r17,r3
  a04fe4:	31400005 	stb	r5,0(r6)
  a04fe8:	203fef1e 	bne	r4,zero,a04fa8 <___vfprintf_internal_r+0x16f8>
  a04fec:	003ccb06 	br	a0431c <___vfprintf_internal_r+0xa6c>
  a04ff0:	00800c04 	movi	r2,48
  a04ff4:	d98018c4 	addi	r6,sp,99
  a04ff8:	dd000f04 	addi	r20,sp,60
  a04ffc:	d88018c5 	stb	r2,99(sp)
  a05000:	d9814115 	stw	r6,1284(sp)
  a05004:	003cc506 	br	a0431c <___vfprintf_internal_r+0xa6c>
  a05008:	dc400d17 	ldw	r17,52(sp)
  a0500c:	07002874 	movhi	fp,161
  a05010:	e7035584 	addi	fp,fp,3414
  a05014:	003bc706 	br	a03f34 <___vfprintf_internal_r+0x684>
  a05018:	d9414c17 	ldw	r5,1328(sp)
  a0501c:	2880040c 	andi	r2,r5,16
  a05020:	10007c26 	beq	r2,zero,a05214 <___vfprintf_internal_r+0x1964>
  a05024:	38800017 	ldw	r2,0(r7)
  a05028:	39c00104 	addi	r7,r7,4
  a0502c:	d9c14015 	stw	r7,1280(sp)
  a05030:	d9814b17 	ldw	r6,1324(sp)
  a05034:	d9c14017 	ldw	r7,1280(sp)
  a05038:	11800015 	stw	r6,0(r2)
  a0503c:	003a7806 	br	a03a20 <___vfprintf_internal_r+0x170>
  a05040:	d9014f17 	ldw	r4,1340(sp)
  a05044:	b00b883a 	mov	r5,r22
  a05048:	d9800c04 	addi	r6,sp,48
  a0504c:	0a038580 	call	a03858 <__sprint_r>
  a05050:	103bcf1e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a05054:	dc800e17 	ldw	r18,56(sp)
  a05058:	dc400d17 	ldw	r17,52(sp)
  a0505c:	d8c01904 	addi	r3,sp,100
  a05060:	d9014717 	ldw	r4,1308(sp)
  a05064:	d9414117 	ldw	r5,1284(sp)
  a05068:	8c400044 	addi	r17,r17,1
  a0506c:	9125883a 	add	r18,r18,r4
  a05070:	008001c4 	movi	r2,7
  a05074:	19400015 	stw	r5,0(r3)
  a05078:	19000115 	stw	r4,4(r3)
  a0507c:	dc800e15 	stw	r18,56(sp)
  a05080:	dc400d15 	stw	r17,52(sp)
  a05084:	147cee16 	blt	r2,r17,a04440 <___vfprintf_internal_r+0xb90>
  a05088:	18c00204 	addi	r3,r3,8
  a0508c:	003b8606 	br	a03ea8 <___vfprintf_internal_r+0x5f8>
  a05090:	38c00017 	ldw	r3,0(r7)
  a05094:	39000204 	addi	r4,r7,8
  a05098:	d9014015 	stw	r4,1280(sp)
  a0509c:	d8c14215 	stw	r3,1288(sp)
  a050a0:	39c00117 	ldw	r7,4(r7)
  a050a4:	d9c14315 	stw	r7,1292(sp)
  a050a8:	003e2006 	br	a0492c <___vfprintf_internal_r+0x107c>
  a050ac:	0005883a 	mov	r2,zero
  a050b0:	1409c83a 	sub	r4,r2,r16
  a050b4:	1105803a 	cmpltu	r2,r2,r4
  a050b8:	044bc83a 	sub	r5,zero,r17
  a050bc:	2885c83a 	sub	r2,r5,r2
  a050c0:	2021883a 	mov	r16,r4
  a050c4:	1023883a 	mov	r17,r2
  a050c8:	01000044 	movi	r4,1
  a050cc:	00800b44 	movi	r2,45
  a050d0:	d8800405 	stb	r2,16(sp)
  a050d4:	003c8406 	br	a042e8 <___vfprintf_internal_r+0xa38>
  a050d8:	d9014f17 	ldw	r4,1340(sp)
  a050dc:	b00b883a 	mov	r5,r22
  a050e0:	d9800c04 	addi	r6,sp,48
  a050e4:	0a038580 	call	a03858 <__sprint_r>
  a050e8:	103ba91e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a050ec:	dc800e17 	ldw	r18,56(sp)
  a050f0:	dc400d17 	ldw	r17,52(sp)
  a050f4:	d9000517 	ldw	r4,20(sp)
  a050f8:	d9401904 	addi	r5,sp,100
  a050fc:	003da706 	br	a0479c <___vfprintf_internal_r+0xeec>
  a05100:	d9014f17 	ldw	r4,1340(sp)
  a05104:	b00b883a 	mov	r5,r22
  a05108:	d9800c04 	addi	r6,sp,48
  a0510c:	0a038580 	call	a03858 <__sprint_r>
  a05110:	103b9f1e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a05114:	dc800e17 	ldw	r18,56(sp)
  a05118:	dc400d17 	ldw	r17,52(sp)
  a0511c:	d9000517 	ldw	r4,20(sp)
  a05120:	d8c01904 	addi	r3,sp,100
  a05124:	003d9106 	br	a0476c <___vfprintf_internal_r+0xebc>
  a05128:	07002874 	movhi	fp,161
  a0512c:	e7035184 	addi	fp,fp,3398
  a05130:	9425883a 	add	r18,r18,r16
  a05134:	8c400044 	addi	r17,r17,1
  a05138:	008001c4 	movi	r2,7
  a0513c:	1f000015 	stw	fp,0(r3)
  a05140:	1c000115 	stw	r16,4(r3)
  a05144:	dc800e15 	stw	r18,56(sp)
  a05148:	dc400d15 	stw	r17,52(sp)
  a0514c:	147fbc16 	blt	r2,r17,a05040 <___vfprintf_internal_r+0x1790>
  a05150:	18c00204 	addi	r3,r3,8
  a05154:	003fc206 	br	a05060 <___vfprintf_internal_r+0x17b0>
  a05158:	d9014f17 	ldw	r4,1340(sp)
  a0515c:	b00b883a 	mov	r5,r22
  a05160:	d9800c04 	addi	r6,sp,48
  a05164:	0a038580 	call	a03858 <__sprint_r>
  a05168:	103b891e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a0516c:	dc800e17 	ldw	r18,56(sp)
  a05170:	d9000517 	ldw	r4,20(sp)
  a05174:	d8c01904 	addi	r3,sp,100
  a05178:	003d0206 	br	a04584 <___vfprintf_internal_r+0xcd4>
  a0517c:	07002874 	movhi	fp,161
  a05180:	e7035184 	addi	fp,fp,3398
  a05184:	003be406 	br	a04118 <___vfprintf_internal_r+0x868>
  a05188:	00802874 	movhi	r2,161
  a0518c:	10834104 	addi	r2,r2,3332
  a05190:	d8814115 	stw	r2,1284(sp)
  a05194:	003df506 	br	a0496c <___vfprintf_internal_r+0x10bc>
  a05198:	d9014217 	ldw	r4,1288(sp)
  a0519c:	d9414317 	ldw	r5,1292(sp)
  a051a0:	0a0a2900 	call	a0a290 <__isnand>
  a051a4:	10003926 	beq	r2,zero,a0528c <___vfprintf_internal_r+0x19dc>
  a051a8:	d9414d17 	ldw	r5,1332(sp)
  a051ac:	008011c4 	movi	r2,71
  a051b0:	1140ce16 	blt	r2,r5,a054ec <___vfprintf_internal_r+0x1c3c>
  a051b4:	01802874 	movhi	r6,161
  a051b8:	31834204 	addi	r6,r6,3336
  a051bc:	d9814115 	stw	r6,1284(sp)
  a051c0:	003dea06 	br	a0496c <___vfprintf_internal_r+0x10bc>
  a051c4:	d9014c17 	ldw	r4,1328(sp)
  a051c8:	bdc00044 	addi	r23,r23,1
  a051cc:	b8c00007 	ldb	r3,0(r23)
  a051d0:	21000814 	ori	r4,r4,32
  a051d4:	d9014c15 	stw	r4,1328(sp)
  a051d8:	003a3406 	br	a03aac <___vfprintf_internal_r+0x1fc>
  a051dc:	dcc14515 	stw	r19,1300(sp)
  a051e0:	98011016 	blt	r19,zero,a05624 <___vfprintf_internal_r+0x1d74>
  a051e4:	980f883a 	mov	r7,r19
  a051e8:	d8014615 	stw	zero,1304(sp)
  a051ec:	003c5206 	br	a04338 <___vfprintf_internal_r+0xa88>
  a051f0:	d9014f17 	ldw	r4,1340(sp)
  a051f4:	b00b883a 	mov	r5,r22
  a051f8:	d9800c04 	addi	r6,sp,48
  a051fc:	0a038580 	call	a03858 <__sprint_r>
  a05200:	103b631e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a05204:	dc800e17 	ldw	r18,56(sp)
  a05208:	d9000517 	ldw	r4,20(sp)
  a0520c:	d8c01904 	addi	r3,sp,100
  a05210:	003f2e06 	br	a04ecc <___vfprintf_internal_r+0x161c>
  a05214:	d8c14c17 	ldw	r3,1328(sp)
  a05218:	1880100c 	andi	r2,r3,64
  a0521c:	1000a026 	beq	r2,zero,a054a0 <___vfprintf_internal_r+0x1bf0>
  a05220:	38800017 	ldw	r2,0(r7)
  a05224:	39c00104 	addi	r7,r7,4
  a05228:	d9c14015 	stw	r7,1280(sp)
  a0522c:	d9014b17 	ldw	r4,1324(sp)
  a05230:	d9c14017 	ldw	r7,1280(sp)
  a05234:	1100000d 	sth	r4,0(r2)
  a05238:	0039f906 	br	a03a20 <___vfprintf_internal_r+0x170>
  a0523c:	d9014f17 	ldw	r4,1340(sp)
  a05240:	b00b883a 	mov	r5,r22
  a05244:	d9800c04 	addi	r6,sp,48
  a05248:	0a038580 	call	a03858 <__sprint_r>
  a0524c:	103b501e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a05250:	dc800e17 	ldw	r18,56(sp)
  a05254:	dc400d17 	ldw	r17,52(sp)
  a05258:	d9000517 	ldw	r4,20(sp)
  a0525c:	d8c01904 	addi	r3,sp,100
  a05260:	003f2d06 	br	a04f18 <___vfprintf_internal_r+0x1668>
  a05264:	00800184 	movi	r2,6
  a05268:	14c09a36 	bltu	r2,r19,a054d4 <___vfprintf_internal_r+0x1c24>
  a0526c:	dcc14515 	stw	r19,1300(sp)
  a05270:	9800010e 	bge	r19,zero,a05278 <___vfprintf_internal_r+0x19c8>
  a05274:	d8014515 	stw	zero,1300(sp)
  a05278:	00802874 	movhi	r2,161
  a0527c:	10834404 	addi	r2,r2,3344
  a05280:	980f883a 	mov	r7,r19
  a05284:	d8814115 	stw	r2,1284(sp)
  a05288:	003a7806 	br	a03c6c <___vfprintf_internal_r+0x3bc>
  a0528c:	00bfffc4 	movi	r2,-1
  a05290:	9880e226 	beq	r19,r2,a0561c <___vfprintf_internal_r+0x1d6c>
  a05294:	d9414d17 	ldw	r5,1332(sp)
  a05298:	008019c4 	movi	r2,103
  a0529c:	2880dc26 	beq	r5,r2,a05610 <___vfprintf_internal_r+0x1d60>
  a052a0:	008011c4 	movi	r2,71
  a052a4:	2880da26 	beq	r5,r2,a05610 <___vfprintf_internal_r+0x1d60>
  a052a8:	d9414c17 	ldw	r5,1328(sp)
  a052ac:	d9014317 	ldw	r4,1292(sp)
  a052b0:	d9814217 	ldw	r6,1288(sp)
  a052b4:	29404014 	ori	r5,r5,256
  a052b8:	d9414c15 	stw	r5,1328(sp)
  a052bc:	2000cc16 	blt	r4,zero,a055f0 <___vfprintf_internal_r+0x1d40>
  a052c0:	3021883a 	mov	r16,r6
  a052c4:	2023883a 	mov	r17,r4
  a052c8:	0039883a 	mov	fp,zero
  a052cc:	d9414d17 	ldw	r5,1332(sp)
  a052d0:	00801984 	movi	r2,102
  a052d4:	2880b726 	beq	r5,r2,a055b4 <___vfprintf_internal_r+0x1d04>
  a052d8:	00801184 	movi	r2,70
  a052dc:	2880b526 	beq	r5,r2,a055b4 <___vfprintf_internal_r+0x1d04>
  a052e0:	00801944 	movi	r2,101
  a052e4:	2880c826 	beq	r5,r2,a05608 <___vfprintf_internal_r+0x1d58>
  a052e8:	00801144 	movi	r2,69
  a052ec:	2880c626 	beq	r5,r2,a05608 <___vfprintf_internal_r+0x1d58>
  a052f0:	9829883a 	mov	r20,r19
  a052f4:	d9014f17 	ldw	r4,1340(sp)
  a052f8:	d8800504 	addi	r2,sp,20
  a052fc:	880d883a 	mov	r6,r17
  a05300:	d8800115 	stw	r2,4(sp)
  a05304:	d8c00604 	addi	r3,sp,24
  a05308:	d8800704 	addi	r2,sp,28
  a0530c:	800b883a 	mov	r5,r16
  a05310:	01c00084 	movi	r7,2
  a05314:	d8c00215 	stw	r3,8(sp)
  a05318:	d8800315 	stw	r2,12(sp)
  a0531c:	dd000015 	stw	r20,0(sp)
  a05320:	0a05ad40 	call	a05ad4 <_dtoa_r>
  a05324:	d9814d17 	ldw	r6,1332(sp)
  a05328:	d8814115 	stw	r2,1284(sp)
  a0532c:	008019c4 	movi	r2,103
  a05330:	30809526 	beq	r6,r2,a05588 <___vfprintf_internal_r+0x1cd8>
  a05334:	d8c14d17 	ldw	r3,1332(sp)
  a05338:	008011c4 	movi	r2,71
  a0533c:	18809226 	beq	r3,r2,a05588 <___vfprintf_internal_r+0x1cd8>
  a05340:	d9414117 	ldw	r5,1284(sp)
  a05344:	d9814d17 	ldw	r6,1332(sp)
  a05348:	00801984 	movi	r2,102
  a0534c:	2d25883a 	add	r18,r5,r20
  a05350:	30808626 	beq	r6,r2,a0556c <___vfprintf_internal_r+0x1cbc>
  a05354:	00801184 	movi	r2,70
  a05358:	30808426 	beq	r6,r2,a0556c <___vfprintf_internal_r+0x1cbc>
  a0535c:	000d883a 	mov	r6,zero
  a05360:	000f883a 	mov	r7,zero
  a05364:	880b883a 	mov	r5,r17
  a05368:	8009883a 	mov	r4,r16
  a0536c:	0a0b91c0 	call	a0b91c <__eqdf2>
  a05370:	1000751e 	bne	r2,zero,a05548 <___vfprintf_internal_r+0x1c98>
  a05374:	9005883a 	mov	r2,r18
  a05378:	dc800715 	stw	r18,28(sp)
  a0537c:	d9014117 	ldw	r4,1284(sp)
  a05380:	d9414d17 	ldw	r5,1332(sp)
  a05384:	00c019c4 	movi	r3,103
  a05388:	1125c83a 	sub	r18,r2,r4
  a0538c:	28c06826 	beq	r5,r3,a05530 <___vfprintf_internal_r+0x1c80>
  a05390:	008011c4 	movi	r2,71
  a05394:	28806626 	beq	r5,r2,a05530 <___vfprintf_internal_r+0x1c80>
  a05398:	d9000517 	ldw	r4,20(sp)
  a0539c:	d8c14d17 	ldw	r3,1332(sp)
  a053a0:	00801944 	movi	r2,101
  a053a4:	10c05516 	blt	r2,r3,a054fc <___vfprintf_internal_r+0x1c4c>
  a053a8:	213fffc4 	addi	r4,r4,-1
  a053ac:	d9000515 	stw	r4,20(sp)
  a053b0:	d8c00805 	stb	r3,32(sp)
  a053b4:	2021883a 	mov	r16,r4
  a053b8:	2000c116 	blt	r4,zero,a056c0 <___vfprintf_internal_r+0x1e10>
  a053bc:	00800ac4 	movi	r2,43
  a053c0:	d8800845 	stb	r2,33(sp)
  a053c4:	00800244 	movi	r2,9
  a053c8:	1400af0e 	bge	r2,r16,a05688 <___vfprintf_internal_r+0x1dd8>
  a053cc:	1027883a 	mov	r19,r2
  a053d0:	dc400b84 	addi	r17,sp,46
  a053d4:	8009883a 	mov	r4,r16
  a053d8:	01400284 	movi	r5,10
  a053dc:	0a0bf7c0 	call	a0bf7c <__modsi3>
  a053e0:	10800c04 	addi	r2,r2,48
  a053e4:	8c7fffc4 	addi	r17,r17,-1
  a053e8:	8009883a 	mov	r4,r16
  a053ec:	01400284 	movi	r5,10
  a053f0:	88800005 	stb	r2,0(r17)
  a053f4:	0a0bf1c0 	call	a0bf1c <__divsi3>
  a053f8:	1021883a 	mov	r16,r2
  a053fc:	98bff516 	blt	r19,r2,a053d4 <___vfprintf_internal_r+0x1b24>
  a05400:	10c00c04 	addi	r3,r2,48
  a05404:	d88009c4 	addi	r2,sp,39
  a05408:	108001c4 	addi	r2,r2,7
  a0540c:	897fffc4 	addi	r5,r17,-1
  a05410:	88ffffc5 	stb	r3,-1(r17)
  a05414:	2880a72e 	bgeu	r5,r2,a056b4 <___vfprintf_internal_r+0x1e04>
  a05418:	1009883a 	mov	r4,r2
  a0541c:	d9800804 	addi	r6,sp,32
  a05420:	d8c00884 	addi	r3,sp,34
  a05424:	28800003 	ldbu	r2,0(r5)
  a05428:	29400044 	addi	r5,r5,1
  a0542c:	18800005 	stb	r2,0(r3)
  a05430:	18c00044 	addi	r3,r3,1
  a05434:	293ffb36 	bltu	r5,r4,a05424 <___vfprintf_internal_r+0x1b74>
  a05438:	1987c83a 	sub	r3,r3,r6
  a0543c:	00800044 	movi	r2,1
  a05440:	d8c14815 	stw	r3,1312(sp)
  a05444:	90cf883a 	add	r7,r18,r3
  a05448:	1480960e 	bge	r2,r18,a056a4 <___vfprintf_internal_r+0x1df4>
  a0544c:	39c00044 	addi	r7,r7,1
  a05450:	d9c14515 	stw	r7,1300(sp)
  a05454:	38003416 	blt	r7,zero,a05528 <___vfprintf_internal_r+0x1c78>
  a05458:	e0803fcc 	andi	r2,fp,255
  a0545c:	1080201c 	xori	r2,r2,128
  a05460:	10bfe004 	addi	r2,r2,-128
  a05464:	10004e26 	beq	r2,zero,a055a0 <___vfprintf_internal_r+0x1cf0>
  a05468:	00800b44 	movi	r2,45
  a0546c:	dc814715 	stw	r18,1308(sp)
  a05470:	d8014615 	stw	zero,1304(sp)
  a05474:	d8800405 	stb	r2,16(sp)
  a05478:	003bb106 	br	a04340 <___vfprintf_internal_r+0xa90>
  a0547c:	00800b44 	movi	r2,45
  a05480:	d8800405 	stb	r2,16(sp)
  a05484:	003d3306 	br	a04954 <___vfprintf_internal_r+0x10a4>
  a05488:	d9014f17 	ldw	r4,1340(sp)
  a0548c:	b00b883a 	mov	r5,r22
  a05490:	d9800c04 	addi	r6,sp,48
  a05494:	0a038580 	call	a03858 <__sprint_r>
  a05498:	103abd1e 	bne	r2,zero,a03f90 <___vfprintf_internal_r+0x6e0>
  a0549c:	003abb06 	br	a03f8c <___vfprintf_internal_r+0x6dc>
  a054a0:	38800017 	ldw	r2,0(r7)
  a054a4:	39c00104 	addi	r7,r7,4
  a054a8:	d9c14015 	stw	r7,1280(sp)
  a054ac:	d9414b17 	ldw	r5,1324(sp)
  a054b0:	d9c14017 	ldw	r7,1280(sp)
  a054b4:	11400015 	stw	r5,0(r2)
  a054b8:	00395906 	br	a03a20 <___vfprintf_internal_r+0x170>
  a054bc:	980f883a 	mov	r7,r19
  a054c0:	dcc14515 	stw	r19,1300(sp)
  a054c4:	d8014615 	stw	zero,1304(sp)
  a054c8:	003b9b06 	br	a04338 <___vfprintf_internal_r+0xa88>
  a054cc:	0027883a 	mov	r19,zero
  a054d0:	00397806 	br	a03ab4 <___vfprintf_internal_r+0x204>
  a054d4:	00c02874 	movhi	r3,161
  a054d8:	18c34404 	addi	r3,r3,3344
  a054dc:	100f883a 	mov	r7,r2
  a054e0:	d8814515 	stw	r2,1300(sp)
  a054e4:	d8c14115 	stw	r3,1284(sp)
  a054e8:	0039e006 	br	a03c6c <___vfprintf_internal_r+0x3bc>
  a054ec:	00802874 	movhi	r2,161
  a054f0:	10834304 	addi	r2,r2,3340
  a054f4:	d8814115 	stw	r2,1284(sp)
  a054f8:	003d1c06 	br	a0496c <___vfprintf_internal_r+0x10bc>
  a054fc:	d9414d17 	ldw	r5,1332(sp)
  a05500:	00801984 	movi	r2,102
  a05504:	28804926 	beq	r5,r2,a0562c <___vfprintf_internal_r+0x1d7c>
  a05508:	200f883a 	mov	r7,r4
  a0550c:	24805716 	blt	r4,r18,a0566c <___vfprintf_internal_r+0x1dbc>
  a05510:	d9414c17 	ldw	r5,1328(sp)
  a05514:	2880004c 	andi	r2,r5,1
  a05518:	10000126 	beq	r2,zero,a05520 <___vfprintf_internal_r+0x1c70>
  a0551c:	21c00044 	addi	r7,r4,1
  a05520:	d9c14515 	stw	r7,1300(sp)
  a05524:	383fcc0e 	bge	r7,zero,a05458 <___vfprintf_internal_r+0x1ba8>
  a05528:	d8014515 	stw	zero,1300(sp)
  a0552c:	003fca06 	br	a05458 <___vfprintf_internal_r+0x1ba8>
  a05530:	d9000517 	ldw	r4,20(sp)
  a05534:	00bfff04 	movi	r2,-4
  a05538:	1100480e 	bge	r2,r4,a0565c <___vfprintf_internal_r+0x1dac>
  a0553c:	99004716 	blt	r19,r4,a0565c <___vfprintf_internal_r+0x1dac>
  a05540:	d8c14d15 	stw	r3,1332(sp)
  a05544:	003ff006 	br	a05508 <___vfprintf_internal_r+0x1c58>
  a05548:	d8800717 	ldw	r2,28(sp)
  a0554c:	14bf8b2e 	bgeu	r2,r18,a0537c <___vfprintf_internal_r+0x1acc>
  a05550:	9007883a 	mov	r3,r18
  a05554:	01000c04 	movi	r4,48
  a05558:	11000005 	stb	r4,0(r2)
  a0555c:	10800044 	addi	r2,r2,1
  a05560:	d8800715 	stw	r2,28(sp)
  a05564:	18bffc1e 	bne	r3,r2,a05558 <___vfprintf_internal_r+0x1ca8>
  a05568:	003f8406 	br	a0537c <___vfprintf_internal_r+0x1acc>
  a0556c:	d8814117 	ldw	r2,1284(sp)
  a05570:	10c00007 	ldb	r3,0(r2)
  a05574:	00800c04 	movi	r2,48
  a05578:	18805b26 	beq	r3,r2,a056e8 <___vfprintf_internal_r+0x1e38>
  a0557c:	d9000517 	ldw	r4,20(sp)
  a05580:	9125883a 	add	r18,r18,r4
  a05584:	003f7506 	br	a0535c <___vfprintf_internal_r+0x1aac>
  a05588:	d9014c17 	ldw	r4,1328(sp)
  a0558c:	2080004c 	andi	r2,r4,1
  a05590:	1005003a 	cmpeq	r2,r2,zero
  a05594:	103f6a26 	beq	r2,zero,a05340 <___vfprintf_internal_r+0x1a90>
  a05598:	d8800717 	ldw	r2,28(sp)
  a0559c:	003f7706 	br	a0537c <___vfprintf_internal_r+0x1acc>
  a055a0:	d9c14515 	stw	r7,1300(sp)
  a055a4:	38004d16 	blt	r7,zero,a056dc <___vfprintf_internal_r+0x1e2c>
  a055a8:	dc814715 	stw	r18,1308(sp)
  a055ac:	d8014615 	stw	zero,1304(sp)
  a055b0:	003b6106 	br	a04338 <___vfprintf_internal_r+0xa88>
  a055b4:	d9014f17 	ldw	r4,1340(sp)
  a055b8:	d8800504 	addi	r2,sp,20
  a055bc:	d8800115 	stw	r2,4(sp)
  a055c0:	d8c00604 	addi	r3,sp,24
  a055c4:	d8800704 	addi	r2,sp,28
  a055c8:	800b883a 	mov	r5,r16
  a055cc:	880d883a 	mov	r6,r17
  a055d0:	01c000c4 	movi	r7,3
  a055d4:	d8c00215 	stw	r3,8(sp)
  a055d8:	d8800315 	stw	r2,12(sp)
  a055dc:	dcc00015 	stw	r19,0(sp)
  a055e0:	9829883a 	mov	r20,r19
  a055e4:	0a05ad40 	call	a05ad4 <_dtoa_r>
  a055e8:	d8814115 	stw	r2,1284(sp)
  a055ec:	003f5106 	br	a05334 <___vfprintf_internal_r+0x1a84>
  a055f0:	d8c14217 	ldw	r3,1288(sp)
  a055f4:	d9014317 	ldw	r4,1292(sp)
  a055f8:	07000b44 	movi	fp,45
  a055fc:	1821883a 	mov	r16,r3
  a05600:	2460003c 	xorhi	r17,r4,32768
  a05604:	003f3106 	br	a052cc <___vfprintf_internal_r+0x1a1c>
  a05608:	9d000044 	addi	r20,r19,1
  a0560c:	003f3906 	br	a052f4 <___vfprintf_internal_r+0x1a44>
  a05610:	983f251e 	bne	r19,zero,a052a8 <___vfprintf_internal_r+0x19f8>
  a05614:	04c00044 	movi	r19,1
  a05618:	003f2306 	br	a052a8 <___vfprintf_internal_r+0x19f8>
  a0561c:	04c00184 	movi	r19,6
  a05620:	003f2106 	br	a052a8 <___vfprintf_internal_r+0x19f8>
  a05624:	d8014515 	stw	zero,1300(sp)
  a05628:	003eee06 	br	a051e4 <___vfprintf_internal_r+0x1934>
  a0562c:	200f883a 	mov	r7,r4
  a05630:	0100370e 	bge	zero,r4,a05710 <___vfprintf_internal_r+0x1e60>
  a05634:	9800031e 	bne	r19,zero,a05644 <___vfprintf_internal_r+0x1d94>
  a05638:	d9814c17 	ldw	r6,1328(sp)
  a0563c:	3080004c 	andi	r2,r6,1
  a05640:	103fb726 	beq	r2,zero,a05520 <___vfprintf_internal_r+0x1c70>
  a05644:	20800044 	addi	r2,r4,1
  a05648:	98a7883a 	add	r19,r19,r2
  a0564c:	dcc14515 	stw	r19,1300(sp)
  a05650:	980f883a 	mov	r7,r19
  a05654:	983f800e 	bge	r19,zero,a05458 <___vfprintf_internal_r+0x1ba8>
  a05658:	003fb306 	br	a05528 <___vfprintf_internal_r+0x1c78>
  a0565c:	d9814d17 	ldw	r6,1332(sp)
  a05660:	31bfff84 	addi	r6,r6,-2
  a05664:	d9814d15 	stw	r6,1332(sp)
  a05668:	003f4c06 	br	a0539c <___vfprintf_internal_r+0x1aec>
  a0566c:	0100180e 	bge	zero,r4,a056d0 <___vfprintf_internal_r+0x1e20>
  a05670:	00800044 	movi	r2,1
  a05674:	1485883a 	add	r2,r2,r18
  a05678:	d8814515 	stw	r2,1300(sp)
  a0567c:	100f883a 	mov	r7,r2
  a05680:	103f750e 	bge	r2,zero,a05458 <___vfprintf_internal_r+0x1ba8>
  a05684:	003fa806 	br	a05528 <___vfprintf_internal_r+0x1c78>
  a05688:	80c00c04 	addi	r3,r16,48
  a0568c:	00800c04 	movi	r2,48
  a05690:	d8c008c5 	stb	r3,35(sp)
  a05694:	d9800804 	addi	r6,sp,32
  a05698:	d8c00904 	addi	r3,sp,36
  a0569c:	d8800885 	stb	r2,34(sp)
  a056a0:	003f6506 	br	a05438 <___vfprintf_internal_r+0x1b88>
  a056a4:	d9014c17 	ldw	r4,1328(sp)
  a056a8:	2084703a 	and	r2,r4,r2
  a056ac:	103f9c26 	beq	r2,zero,a05520 <___vfprintf_internal_r+0x1c70>
  a056b0:	003f6606 	br	a0544c <___vfprintf_internal_r+0x1b9c>
  a056b4:	d9800804 	addi	r6,sp,32
  a056b8:	d8c00884 	addi	r3,sp,34
  a056bc:	003f5e06 	br	a05438 <___vfprintf_internal_r+0x1b88>
  a056c0:	00800b44 	movi	r2,45
  a056c4:	0121c83a 	sub	r16,zero,r4
  a056c8:	d8800845 	stb	r2,33(sp)
  a056cc:	003f3d06 	br	a053c4 <___vfprintf_internal_r+0x1b14>
  a056d0:	00800084 	movi	r2,2
  a056d4:	1105c83a 	sub	r2,r2,r4
  a056d8:	003fe606 	br	a05674 <___vfprintf_internal_r+0x1dc4>
  a056dc:	d8014515 	stw	zero,1300(sp)
  a056e0:	dc814715 	stw	r18,1308(sp)
  a056e4:	003fb106 	br	a055ac <___vfprintf_internal_r+0x1cfc>
  a056e8:	000d883a 	mov	r6,zero
  a056ec:	000f883a 	mov	r7,zero
  a056f0:	8009883a 	mov	r4,r16
  a056f4:	880b883a 	mov	r5,r17
  a056f8:	0a02b780 	call	a02b78 <__nedf2>
  a056fc:	103f9f26 	beq	r2,zero,a0557c <___vfprintf_internal_r+0x1ccc>
  a05700:	00800044 	movi	r2,1
  a05704:	1509c83a 	sub	r4,r2,r20
  a05708:	d9000515 	stw	r4,20(sp)
  a0570c:	003f9b06 	br	a0557c <___vfprintf_internal_r+0x1ccc>
  a05710:	98000d1e 	bne	r19,zero,a05748 <___vfprintf_internal_r+0x1e98>
  a05714:	d8c14c17 	ldw	r3,1328(sp)
  a05718:	1880004c 	andi	r2,r3,1
  a0571c:	10000a1e 	bne	r2,zero,a05748 <___vfprintf_internal_r+0x1e98>
  a05720:	01000044 	movi	r4,1
  a05724:	200f883a 	mov	r7,r4
  a05728:	d9014515 	stw	r4,1300(sp)
  a0572c:	003f4a06 	br	a05458 <___vfprintf_internal_r+0x1ba8>
  a05730:	3cc00017 	ldw	r19,0(r7)
  a05734:	39c00104 	addi	r7,r7,4
  a05738:	983d0e0e 	bge	r19,zero,a04b74 <___vfprintf_internal_r+0x12c4>
  a0573c:	b8c00007 	ldb	r3,0(r23)
  a05740:	04ffffc4 	movi	r19,-1
  a05744:	0038d906 	br	a03aac <___vfprintf_internal_r+0x1fc>
  a05748:	9cc00084 	addi	r19,r19,2
  a0574c:	dcc14515 	stw	r19,1300(sp)
  a05750:	980f883a 	mov	r7,r19
  a05754:	983f400e 	bge	r19,zero,a05458 <___vfprintf_internal_r+0x1ba8>
  a05758:	003f7306 	br	a05528 <___vfprintf_internal_r+0x1c78>

00a0575c <__vfprintf_internal>:
  a0575c:	00802874 	movhi	r2,161
  a05760:	108aec04 	addi	r2,r2,11184
  a05764:	2013883a 	mov	r9,r4
  a05768:	11000017 	ldw	r4,0(r2)
  a0576c:	2805883a 	mov	r2,r5
  a05770:	300f883a 	mov	r7,r6
  a05774:	480b883a 	mov	r5,r9
  a05778:	100d883a 	mov	r6,r2
  a0577c:	0a038b01 	jmpi	a038b0 <___vfprintf_internal_r>

00a05780 <__swsetup_r>:
  a05780:	00802874 	movhi	r2,161
  a05784:	108aec04 	addi	r2,r2,11184
  a05788:	10c00017 	ldw	r3,0(r2)
  a0578c:	defffd04 	addi	sp,sp,-12
  a05790:	dc400115 	stw	r17,4(sp)
  a05794:	dc000015 	stw	r16,0(sp)
  a05798:	dfc00215 	stw	ra,8(sp)
  a0579c:	2023883a 	mov	r17,r4
  a057a0:	2821883a 	mov	r16,r5
  a057a4:	18000226 	beq	r3,zero,a057b0 <__swsetup_r+0x30>
  a057a8:	18800e17 	ldw	r2,56(r3)
  a057ac:	10001f26 	beq	r2,zero,a0582c <__swsetup_r+0xac>
  a057b0:	8100030b 	ldhu	r4,12(r16)
  a057b4:	2080020c 	andi	r2,r4,8
  a057b8:	10002826 	beq	r2,zero,a0585c <__swsetup_r+0xdc>
  a057bc:	81400417 	ldw	r5,16(r16)
  a057c0:	28001d26 	beq	r5,zero,a05838 <__swsetup_r+0xb8>
  a057c4:	2080004c 	andi	r2,r4,1
  a057c8:	1005003a 	cmpeq	r2,r2,zero
  a057cc:	10000b26 	beq	r2,zero,a057fc <__swsetup_r+0x7c>
  a057d0:	2080008c 	andi	r2,r4,2
  a057d4:	10001226 	beq	r2,zero,a05820 <__swsetup_r+0xa0>
  a057d8:	0005883a 	mov	r2,zero
  a057dc:	80800215 	stw	r2,8(r16)
  a057e0:	28000b26 	beq	r5,zero,a05810 <__swsetup_r+0x90>
  a057e4:	0005883a 	mov	r2,zero
  a057e8:	dfc00217 	ldw	ra,8(sp)
  a057ec:	dc400117 	ldw	r17,4(sp)
  a057f0:	dc000017 	ldw	r16,0(sp)
  a057f4:	dec00304 	addi	sp,sp,12
  a057f8:	f800283a 	ret
  a057fc:	80800517 	ldw	r2,20(r16)
  a05800:	80000215 	stw	zero,8(r16)
  a05804:	0085c83a 	sub	r2,zero,r2
  a05808:	80800615 	stw	r2,24(r16)
  a0580c:	283ff51e 	bne	r5,zero,a057e4 <__swsetup_r+0x64>
  a05810:	2080200c 	andi	r2,r4,128
  a05814:	103ff326 	beq	r2,zero,a057e4 <__swsetup_r+0x64>
  a05818:	00bfffc4 	movi	r2,-1
  a0581c:	003ff206 	br	a057e8 <__swsetup_r+0x68>
  a05820:	80800517 	ldw	r2,20(r16)
  a05824:	80800215 	stw	r2,8(r16)
  a05828:	003fed06 	br	a057e0 <__swsetup_r+0x60>
  a0582c:	1809883a 	mov	r4,r3
  a05830:	0a073200 	call	a07320 <__sinit>
  a05834:	003fde06 	br	a057b0 <__swsetup_r+0x30>
  a05838:	20c0a00c 	andi	r3,r4,640
  a0583c:	00808004 	movi	r2,512
  a05840:	18bfe026 	beq	r3,r2,a057c4 <__swsetup_r+0x44>
  a05844:	8809883a 	mov	r4,r17
  a05848:	800b883a 	mov	r5,r16
  a0584c:	0a080980 	call	a08098 <__smakebuf_r>
  a05850:	8100030b 	ldhu	r4,12(r16)
  a05854:	81400417 	ldw	r5,16(r16)
  a05858:	003fda06 	br	a057c4 <__swsetup_r+0x44>
  a0585c:	2080040c 	andi	r2,r4,16
  a05860:	103fed26 	beq	r2,zero,a05818 <__swsetup_r+0x98>
  a05864:	2080010c 	andi	r2,r4,4
  a05868:	10001226 	beq	r2,zero,a058b4 <__swsetup_r+0x134>
  a0586c:	81400c17 	ldw	r5,48(r16)
  a05870:	28000526 	beq	r5,zero,a05888 <__swsetup_r+0x108>
  a05874:	80801004 	addi	r2,r16,64
  a05878:	28800226 	beq	r5,r2,a05884 <__swsetup_r+0x104>
  a0587c:	8809883a 	mov	r4,r17
  a05880:	0a076a40 	call	a076a4 <_free_r>
  a05884:	80000c15 	stw	zero,48(r16)
  a05888:	8080030b 	ldhu	r2,12(r16)
  a0588c:	81400417 	ldw	r5,16(r16)
  a05890:	80000115 	stw	zero,4(r16)
  a05894:	10bff6cc 	andi	r2,r2,65499
  a05898:	8080030d 	sth	r2,12(r16)
  a0589c:	81400015 	stw	r5,0(r16)
  a058a0:	8080030b 	ldhu	r2,12(r16)
  a058a4:	10800214 	ori	r2,r2,8
  a058a8:	113fffcc 	andi	r4,r2,65535
  a058ac:	8080030d 	sth	r2,12(r16)
  a058b0:	003fc306 	br	a057c0 <__swsetup_r+0x40>
  a058b4:	81400417 	ldw	r5,16(r16)
  a058b8:	003ff906 	br	a058a0 <__swsetup_r+0x120>

00a058bc <quorem>:
  a058bc:	28c00417 	ldw	r3,16(r5)
  a058c0:	20800417 	ldw	r2,16(r4)
  a058c4:	defff604 	addi	sp,sp,-40
  a058c8:	ddc00715 	stw	r23,28(sp)
  a058cc:	dd400515 	stw	r21,20(sp)
  a058d0:	dfc00915 	stw	ra,36(sp)
  a058d4:	df000815 	stw	fp,32(sp)
  a058d8:	dd800615 	stw	r22,24(sp)
  a058dc:	dd000415 	stw	r20,16(sp)
  a058e0:	dcc00315 	stw	r19,12(sp)
  a058e4:	dc800215 	stw	r18,8(sp)
  a058e8:	dc400115 	stw	r17,4(sp)
  a058ec:	dc000015 	stw	r16,0(sp)
  a058f0:	202f883a 	mov	r23,r4
  a058f4:	282b883a 	mov	r21,r5
  a058f8:	10c07416 	blt	r2,r3,a05acc <quorem+0x210>
  a058fc:	1c7fffc4 	addi	r17,r3,-1
  a05900:	8c45883a 	add	r2,r17,r17
  a05904:	1085883a 	add	r2,r2,r2
  a05908:	2c000504 	addi	r16,r5,20
  a0590c:	24c00504 	addi	r19,r4,20
  a05910:	14ed883a 	add	r22,r2,r19
  a05914:	80a5883a 	add	r18,r16,r2
  a05918:	b7000017 	ldw	fp,0(r22)
  a0591c:	91400017 	ldw	r5,0(r18)
  a05920:	e009883a 	mov	r4,fp
  a05924:	29400044 	addi	r5,r5,1
  a05928:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0592c:	1029883a 	mov	r20,r2
  a05930:	10003c1e 	bne	r2,zero,a05a24 <quorem+0x168>
  a05934:	a80b883a 	mov	r5,r21
  a05938:	b809883a 	mov	r4,r23
  a0593c:	0a08dc40 	call	a08dc4 <__mcmp>
  a05940:	10002b16 	blt	r2,zero,a059f0 <quorem+0x134>
  a05944:	a5000044 	addi	r20,r20,1
  a05948:	980f883a 	mov	r7,r19
  a0594c:	0011883a 	mov	r8,zero
  a05950:	0009883a 	mov	r4,zero
  a05954:	81400017 	ldw	r5,0(r16)
  a05958:	38c00017 	ldw	r3,0(r7)
  a0595c:	84000104 	addi	r16,r16,4
  a05960:	28bfffcc 	andi	r2,r5,65535
  a05964:	2085883a 	add	r2,r4,r2
  a05968:	11bfffcc 	andi	r6,r2,65535
  a0596c:	193fffcc 	andi	r4,r3,65535
  a05970:	1004d43a 	srli	r2,r2,16
  a05974:	280ad43a 	srli	r5,r5,16
  a05978:	2189c83a 	sub	r4,r4,r6
  a0597c:	2209883a 	add	r4,r4,r8
  a05980:	1806d43a 	srli	r3,r3,16
  a05984:	288b883a 	add	r5,r5,r2
  a05988:	200dd43a 	srai	r6,r4,16
  a0598c:	28bfffcc 	andi	r2,r5,65535
  a05990:	1887c83a 	sub	r3,r3,r2
  a05994:	1987883a 	add	r3,r3,r6
  a05998:	3900000d 	sth	r4,0(r7)
  a0599c:	38c0008d 	sth	r3,2(r7)
  a059a0:	2808d43a 	srli	r4,r5,16
  a059a4:	39c00104 	addi	r7,r7,4
  a059a8:	1811d43a 	srai	r8,r3,16
  a059ac:	943fe92e 	bgeu	r18,r16,a05954 <quorem+0x98>
  a059b0:	8c45883a 	add	r2,r17,r17
  a059b4:	1085883a 	add	r2,r2,r2
  a059b8:	9885883a 	add	r2,r19,r2
  a059bc:	10c00017 	ldw	r3,0(r2)
  a059c0:	18000b1e 	bne	r3,zero,a059f0 <quorem+0x134>
  a059c4:	113fff04 	addi	r4,r2,-4
  a059c8:	9900082e 	bgeu	r19,r4,a059ec <quorem+0x130>
  a059cc:	10bfff17 	ldw	r2,-4(r2)
  a059d0:	10000326 	beq	r2,zero,a059e0 <quorem+0x124>
  a059d4:	00000506 	br	a059ec <quorem+0x130>
  a059d8:	20800017 	ldw	r2,0(r4)
  a059dc:	1000031e 	bne	r2,zero,a059ec <quorem+0x130>
  a059e0:	213fff04 	addi	r4,r4,-4
  a059e4:	8c7fffc4 	addi	r17,r17,-1
  a059e8:	993ffb36 	bltu	r19,r4,a059d8 <quorem+0x11c>
  a059ec:	bc400415 	stw	r17,16(r23)
  a059f0:	a005883a 	mov	r2,r20
  a059f4:	dfc00917 	ldw	ra,36(sp)
  a059f8:	df000817 	ldw	fp,32(sp)
  a059fc:	ddc00717 	ldw	r23,28(sp)
  a05a00:	dd800617 	ldw	r22,24(sp)
  a05a04:	dd400517 	ldw	r21,20(sp)
  a05a08:	dd000417 	ldw	r20,16(sp)
  a05a0c:	dcc00317 	ldw	r19,12(sp)
  a05a10:	dc800217 	ldw	r18,8(sp)
  a05a14:	dc400117 	ldw	r17,4(sp)
  a05a18:	dc000017 	ldw	r16,0(sp)
  a05a1c:	dec00a04 	addi	sp,sp,40
  a05a20:	f800283a 	ret
  a05a24:	980f883a 	mov	r7,r19
  a05a28:	8011883a 	mov	r8,r16
  a05a2c:	0013883a 	mov	r9,zero
  a05a30:	000d883a 	mov	r6,zero
  a05a34:	40c00017 	ldw	r3,0(r8)
  a05a38:	39000017 	ldw	r4,0(r7)
  a05a3c:	42000104 	addi	r8,r8,4
  a05a40:	18bfffcc 	andi	r2,r3,65535
  a05a44:	a085383a 	mul	r2,r20,r2
  a05a48:	1806d43a 	srli	r3,r3,16
  a05a4c:	217fffcc 	andi	r5,r4,65535
  a05a50:	3085883a 	add	r2,r6,r2
  a05a54:	11bfffcc 	andi	r6,r2,65535
  a05a58:	a0c7383a 	mul	r3,r20,r3
  a05a5c:	1004d43a 	srli	r2,r2,16
  a05a60:	298bc83a 	sub	r5,r5,r6
  a05a64:	2a4b883a 	add	r5,r5,r9
  a05a68:	2008d43a 	srli	r4,r4,16
  a05a6c:	1887883a 	add	r3,r3,r2
  a05a70:	280dd43a 	srai	r6,r5,16
  a05a74:	18bfffcc 	andi	r2,r3,65535
  a05a78:	2089c83a 	sub	r4,r4,r2
  a05a7c:	2189883a 	add	r4,r4,r6
  a05a80:	3900008d 	sth	r4,2(r7)
  a05a84:	3940000d 	sth	r5,0(r7)
  a05a88:	180cd43a 	srli	r6,r3,16
  a05a8c:	39c00104 	addi	r7,r7,4
  a05a90:	2013d43a 	srai	r9,r4,16
  a05a94:	923fe72e 	bgeu	r18,r8,a05a34 <quorem+0x178>
  a05a98:	e03fa61e 	bne	fp,zero,a05934 <quorem+0x78>
  a05a9c:	b0ffff04 	addi	r3,r22,-4
  a05aa0:	98c0082e 	bgeu	r19,r3,a05ac4 <quorem+0x208>
  a05aa4:	b0bfff17 	ldw	r2,-4(r22)
  a05aa8:	10000326 	beq	r2,zero,a05ab8 <quorem+0x1fc>
  a05aac:	00000506 	br	a05ac4 <quorem+0x208>
  a05ab0:	18800017 	ldw	r2,0(r3)
  a05ab4:	1000031e 	bne	r2,zero,a05ac4 <quorem+0x208>
  a05ab8:	18ffff04 	addi	r3,r3,-4
  a05abc:	8c7fffc4 	addi	r17,r17,-1
  a05ac0:	98fffb36 	bltu	r19,r3,a05ab0 <quorem+0x1f4>
  a05ac4:	bc400415 	stw	r17,16(r23)
  a05ac8:	003f9a06 	br	a05934 <quorem+0x78>
  a05acc:	0005883a 	mov	r2,zero
  a05ad0:	003fc806 	br	a059f4 <quorem+0x138>

00a05ad4 <_dtoa_r>:
  a05ad4:	22001017 	ldw	r8,64(r4)
  a05ad8:	deffda04 	addi	sp,sp,-152
  a05adc:	dd402115 	stw	r21,132(sp)
  a05ae0:	dd002015 	stw	r20,128(sp)
  a05ae4:	dc801e15 	stw	r18,120(sp)
  a05ae8:	dc401d15 	stw	r17,116(sp)
  a05aec:	dfc02515 	stw	ra,148(sp)
  a05af0:	df002415 	stw	fp,144(sp)
  a05af4:	ddc02315 	stw	r23,140(sp)
  a05af8:	dd802215 	stw	r22,136(sp)
  a05afc:	dcc01f15 	stw	r19,124(sp)
  a05b00:	dc001c15 	stw	r16,112(sp)
  a05b04:	d9001615 	stw	r4,88(sp)
  a05b08:	3023883a 	mov	r17,r6
  a05b0c:	2829883a 	mov	r20,r5
  a05b10:	d9c01715 	stw	r7,92(sp)
  a05b14:	dc802817 	ldw	r18,160(sp)
  a05b18:	302b883a 	mov	r21,r6
  a05b1c:	40000a26 	beq	r8,zero,a05b48 <_dtoa_r+0x74>
  a05b20:	20801117 	ldw	r2,68(r4)
  a05b24:	400b883a 	mov	r5,r8
  a05b28:	40800115 	stw	r2,4(r8)
  a05b2c:	20c01117 	ldw	r3,68(r4)
  a05b30:	00800044 	movi	r2,1
  a05b34:	10c4983a 	sll	r2,r2,r3
  a05b38:	40800215 	stw	r2,8(r8)
  a05b3c:	0a08c680 	call	a08c68 <_Bfree>
  a05b40:	d8c01617 	ldw	r3,88(sp)
  a05b44:	18001015 	stw	zero,64(r3)
  a05b48:	8800a316 	blt	r17,zero,a05dd8 <_dtoa_r+0x304>
  a05b4c:	90000015 	stw	zero,0(r18)
  a05b50:	a8dffc2c 	andhi	r3,r21,32752
  a05b54:	009ffc34 	movhi	r2,32752
  a05b58:	18809126 	beq	r3,r2,a05da0 <_dtoa_r+0x2cc>
  a05b5c:	000d883a 	mov	r6,zero
  a05b60:	000f883a 	mov	r7,zero
  a05b64:	a009883a 	mov	r4,r20
  a05b68:	a80b883a 	mov	r5,r21
  a05b6c:	dd001215 	stw	r20,72(sp)
  a05b70:	dd401315 	stw	r21,76(sp)
  a05b74:	0a02b780 	call	a02b78 <__nedf2>
  a05b78:	1000171e 	bne	r2,zero,a05bd8 <_dtoa_r+0x104>
  a05b7c:	d9802717 	ldw	r6,156(sp)
  a05b80:	00800044 	movi	r2,1
  a05b84:	30800015 	stw	r2,0(r6)
  a05b88:	d8802917 	ldw	r2,164(sp)
  a05b8c:	10029b26 	beq	r2,zero,a065fc <_dtoa_r+0xb28>
  a05b90:	d9002917 	ldw	r4,164(sp)
  a05b94:	00802874 	movhi	r2,161
  a05b98:	1082e044 	addi	r2,r2,2945
  a05b9c:	10ffffc4 	addi	r3,r2,-1
  a05ba0:	20800015 	stw	r2,0(r4)
  a05ba4:	1805883a 	mov	r2,r3
  a05ba8:	dfc02517 	ldw	ra,148(sp)
  a05bac:	df002417 	ldw	fp,144(sp)
  a05bb0:	ddc02317 	ldw	r23,140(sp)
  a05bb4:	dd802217 	ldw	r22,136(sp)
  a05bb8:	dd402117 	ldw	r21,132(sp)
  a05bbc:	dd002017 	ldw	r20,128(sp)
  a05bc0:	dcc01f17 	ldw	r19,124(sp)
  a05bc4:	dc801e17 	ldw	r18,120(sp)
  a05bc8:	dc401d17 	ldw	r17,116(sp)
  a05bcc:	dc001c17 	ldw	r16,112(sp)
  a05bd0:	dec02604 	addi	sp,sp,152
  a05bd4:	f800283a 	ret
  a05bd8:	d9001617 	ldw	r4,88(sp)
  a05bdc:	d9401217 	ldw	r5,72(sp)
  a05be0:	d8800104 	addi	r2,sp,4
  a05be4:	a80d883a 	mov	r6,r21
  a05be8:	d9c00204 	addi	r7,sp,8
  a05bec:	d8800015 	stw	r2,0(sp)
  a05bf0:	0a092a40 	call	a092a4 <__d2b>
  a05bf4:	d8800715 	stw	r2,28(sp)
  a05bf8:	a804d53a 	srli	r2,r21,20
  a05bfc:	1101ffcc 	andi	r4,r2,2047
  a05c00:	20008626 	beq	r4,zero,a05e1c <_dtoa_r+0x348>
  a05c04:	d8c01217 	ldw	r3,72(sp)
  a05c08:	00800434 	movhi	r2,16
  a05c0c:	10bfffc4 	addi	r2,r2,-1
  a05c10:	ddc00117 	ldw	r23,4(sp)
  a05c14:	a884703a 	and	r2,r21,r2
  a05c18:	1811883a 	mov	r8,r3
  a05c1c:	124ffc34 	orhi	r9,r2,16368
  a05c20:	25bf0044 	addi	r22,r4,-1023
  a05c24:	d8000815 	stw	zero,32(sp)
  a05c28:	0005883a 	mov	r2,zero
  a05c2c:	00cffe34 	movhi	r3,16376
  a05c30:	480b883a 	mov	r5,r9
  a05c34:	4009883a 	mov	r4,r8
  a05c38:	180f883a 	mov	r7,r3
  a05c3c:	100d883a 	mov	r6,r2
  a05c40:	0a0282c0 	call	a0282c <__subdf3>
  a05c44:	0218dbf4 	movhi	r8,25455
  a05c48:	4210d844 	addi	r8,r8,17249
  a05c4c:	024ff4f4 	movhi	r9,16339
  a05c50:	4a61e9c4 	addi	r9,r9,-30809
  a05c54:	480f883a 	mov	r7,r9
  a05c58:	400d883a 	mov	r6,r8
  a05c5c:	180b883a 	mov	r5,r3
  a05c60:	1009883a 	mov	r4,r2
  a05c64:	0a0b5580 	call	a0b558 <__muldf3>
  a05c68:	0222d874 	movhi	r8,35681
  a05c6c:	42322cc4 	addi	r8,r8,-14157
  a05c70:	024ff1f4 	movhi	r9,16327
  a05c74:	4a628a04 	addi	r9,r9,-30168
  a05c78:	480f883a 	mov	r7,r9
  a05c7c:	400d883a 	mov	r6,r8
  a05c80:	180b883a 	mov	r5,r3
  a05c84:	1009883a 	mov	r4,r2
  a05c88:	0a028ac0 	call	a028ac <__adddf3>
  a05c8c:	b009883a 	mov	r4,r22
  a05c90:	1021883a 	mov	r16,r2
  a05c94:	1823883a 	mov	r17,r3
  a05c98:	0a0bb3c0 	call	a0bb3c <__floatsidf>
  a05c9c:	021427f4 	movhi	r8,20639
  a05ca0:	421e7ec4 	addi	r8,r8,31227
  a05ca4:	024ff4f4 	movhi	r9,16339
  a05ca8:	4a5104c4 	addi	r9,r9,17427
  a05cac:	480f883a 	mov	r7,r9
  a05cb0:	400d883a 	mov	r6,r8
  a05cb4:	180b883a 	mov	r5,r3
  a05cb8:	1009883a 	mov	r4,r2
  a05cbc:	0a0b5580 	call	a0b558 <__muldf3>
  a05cc0:	180f883a 	mov	r7,r3
  a05cc4:	880b883a 	mov	r5,r17
  a05cc8:	100d883a 	mov	r6,r2
  a05ccc:	8009883a 	mov	r4,r16
  a05cd0:	0a028ac0 	call	a028ac <__adddf3>
  a05cd4:	1009883a 	mov	r4,r2
  a05cd8:	180b883a 	mov	r5,r3
  a05cdc:	1021883a 	mov	r16,r2
  a05ce0:	1823883a 	mov	r17,r3
  a05ce4:	0a0bc340 	call	a0bc34 <__fixdfsi>
  a05ce8:	000d883a 	mov	r6,zero
  a05cec:	000f883a 	mov	r7,zero
  a05cf0:	8009883a 	mov	r4,r16
  a05cf4:	880b883a 	mov	r5,r17
  a05cf8:	d8800d15 	stw	r2,52(sp)
  a05cfc:	0a0bab40 	call	a0bab4 <__ltdf2>
  a05d00:	10031716 	blt	r2,zero,a06960 <_dtoa_r+0xe8c>
  a05d04:	d8c00d17 	ldw	r3,52(sp)
  a05d08:	00800584 	movi	r2,22
  a05d0c:	10c1482e 	bgeu	r2,r3,a06230 <_dtoa_r+0x75c>
  a05d10:	01000044 	movi	r4,1
  a05d14:	d9000c15 	stw	r4,48(sp)
  a05d18:	bd85c83a 	sub	r2,r23,r22
  a05d1c:	11bfffc4 	addi	r6,r2,-1
  a05d20:	30030b16 	blt	r6,zero,a06950 <_dtoa_r+0xe7c>
  a05d24:	d9800a15 	stw	r6,40(sp)
  a05d28:	d8001115 	stw	zero,68(sp)
  a05d2c:	d8c00d17 	ldw	r3,52(sp)
  a05d30:	1802ff16 	blt	r3,zero,a06930 <_dtoa_r+0xe5c>
  a05d34:	d9000a17 	ldw	r4,40(sp)
  a05d38:	d8c00915 	stw	r3,36(sp)
  a05d3c:	d8001015 	stw	zero,64(sp)
  a05d40:	20c9883a 	add	r4,r4,r3
  a05d44:	d9000a15 	stw	r4,40(sp)
  a05d48:	d9001717 	ldw	r4,92(sp)
  a05d4c:	00800244 	movi	r2,9
  a05d50:	11004636 	bltu	r2,r4,a05e6c <_dtoa_r+0x398>
  a05d54:	00800144 	movi	r2,5
  a05d58:	11020416 	blt	r2,r4,a0656c <_dtoa_r+0xa98>
  a05d5c:	04400044 	movi	r17,1
  a05d60:	d8c01717 	ldw	r3,92(sp)
  a05d64:	00800144 	movi	r2,5
  a05d68:	10c1ed36 	bltu	r2,r3,a06520 <_dtoa_r+0xa4c>
  a05d6c:	18c5883a 	add	r2,r3,r3
  a05d70:	1085883a 	add	r2,r2,r2
  a05d74:	00c02834 	movhi	r3,160
  a05d78:	18d76204 	addi	r3,r3,23944
  a05d7c:	10c5883a 	add	r2,r2,r3
  a05d80:	11000017 	ldw	r4,0(r2)
  a05d84:	2000683a 	jmp	r4
  a05d88:	00a05e74 	movhi	r2,33145
  a05d8c:	00a05e74 	movhi	r2,33145
  a05d90:	00a06874 	movhi	r2,33185
  a05d94:	00a0684c 	andi	r2,zero,33185
  a05d98:	00a06890 	cmplti	r2,zero,-32350
  a05d9c:	00a0689c 	xori	r2,zero,33186
  a05da0:	d9002717 	ldw	r4,156(sp)
  a05da4:	0089c3c4 	movi	r2,9999
  a05da8:	20800015 	stw	r2,0(r4)
  a05dac:	a0001026 	beq	r20,zero,a05df0 <_dtoa_r+0x31c>
  a05db0:	00c02874 	movhi	r3,161
  a05db4:	18c35d04 	addi	r3,r3,3444
  a05db8:	d9802917 	ldw	r6,164(sp)
  a05dbc:	303f7926 	beq	r6,zero,a05ba4 <_dtoa_r+0xd0>
  a05dc0:	188000c7 	ldb	r2,3(r3)
  a05dc4:	190000c4 	addi	r4,r3,3
  a05dc8:	1000101e 	bne	r2,zero,a05e0c <_dtoa_r+0x338>
  a05dcc:	d8802917 	ldw	r2,164(sp)
  a05dd0:	11000015 	stw	r4,0(r2)
  a05dd4:	003f7306 	br	a05ba4 <_dtoa_r+0xd0>
  a05dd8:	00a00034 	movhi	r2,32768
  a05ddc:	10bfffc4 	addi	r2,r2,-1
  a05de0:	00c00044 	movi	r3,1
  a05de4:	88aa703a 	and	r21,r17,r2
  a05de8:	90c00015 	stw	r3,0(r18)
  a05dec:	003f5806 	br	a05b50 <_dtoa_r+0x7c>
  a05df0:	00800434 	movhi	r2,16
  a05df4:	10bfffc4 	addi	r2,r2,-1
  a05df8:	a884703a 	and	r2,r21,r2
  a05dfc:	103fec1e 	bne	r2,zero,a05db0 <_dtoa_r+0x2dc>
  a05e00:	00c02874 	movhi	r3,161
  a05e04:	18c35a04 	addi	r3,r3,3432
  a05e08:	003feb06 	br	a05db8 <_dtoa_r+0x2e4>
  a05e0c:	d8802917 	ldw	r2,164(sp)
  a05e10:	19000204 	addi	r4,r3,8
  a05e14:	11000015 	stw	r4,0(r2)
  a05e18:	003f6206 	br	a05ba4 <_dtoa_r+0xd0>
  a05e1c:	ddc00117 	ldw	r23,4(sp)
  a05e20:	d8800217 	ldw	r2,8(sp)
  a05e24:	01000804 	movi	r4,32
  a05e28:	b8c10c84 	addi	r3,r23,1074
  a05e2c:	18a3883a 	add	r17,r3,r2
  a05e30:	2441b80e 	bge	r4,r17,a06514 <_dtoa_r+0xa40>
  a05e34:	00c01004 	movi	r3,64
  a05e38:	1c47c83a 	sub	r3,r3,r17
  a05e3c:	88bff804 	addi	r2,r17,-32
  a05e40:	a8c6983a 	sll	r3,r21,r3
  a05e44:	a084d83a 	srl	r2,r20,r2
  a05e48:	1888b03a 	or	r4,r3,r2
  a05e4c:	0a0bd0c0 	call	a0bd0c <__floatunsidf>
  a05e50:	1011883a 	mov	r8,r2
  a05e54:	00bf8434 	movhi	r2,65040
  a05e58:	01000044 	movi	r4,1
  a05e5c:	10d3883a 	add	r9,r2,r3
  a05e60:	8dbef344 	addi	r22,r17,-1075
  a05e64:	d9000815 	stw	r4,32(sp)
  a05e68:	003f6f06 	br	a05c28 <_dtoa_r+0x154>
  a05e6c:	d8001715 	stw	zero,92(sp)
  a05e70:	04400044 	movi	r17,1
  a05e74:	00bfffc4 	movi	r2,-1
  a05e78:	00c00044 	movi	r3,1
  a05e7c:	d8800e15 	stw	r2,56(sp)
  a05e80:	d8002615 	stw	zero,152(sp)
  a05e84:	d8800f15 	stw	r2,60(sp)
  a05e88:	d8c00b15 	stw	r3,44(sp)
  a05e8c:	1021883a 	mov	r16,r2
  a05e90:	d8801617 	ldw	r2,88(sp)
  a05e94:	10001115 	stw	zero,68(r2)
  a05e98:	d8801617 	ldw	r2,88(sp)
  a05e9c:	11401117 	ldw	r5,68(r2)
  a05ea0:	1009883a 	mov	r4,r2
  a05ea4:	0a091e80 	call	a091e8 <_Balloc>
  a05ea8:	d8c01617 	ldw	r3,88(sp)
  a05eac:	d8800515 	stw	r2,20(sp)
  a05eb0:	18801015 	stw	r2,64(r3)
  a05eb4:	00800384 	movi	r2,14
  a05eb8:	14006836 	bltu	r2,r16,a0605c <_dtoa_r+0x588>
  a05ebc:	8805003a 	cmpeq	r2,r17,zero
  a05ec0:	1000661e 	bne	r2,zero,a0605c <_dtoa_r+0x588>
  a05ec4:	d9000d17 	ldw	r4,52(sp)
  a05ec8:	0102300e 	bge	zero,r4,a0678c <_dtoa_r+0xcb8>
  a05ecc:	208003cc 	andi	r2,r4,15
  a05ed0:	100490fa 	slli	r2,r2,3
  a05ed4:	2025d13a 	srai	r18,r4,4
  a05ed8:	00c02874 	movhi	r3,161
  a05edc:	18c36d04 	addi	r3,r3,3508
  a05ee0:	10c5883a 	add	r2,r2,r3
  a05ee4:	90c0040c 	andi	r3,r18,16
  a05ee8:	14000017 	ldw	r16,0(r2)
  a05eec:	14400117 	ldw	r17,4(r2)
  a05ef0:	18036a1e 	bne	r3,zero,a06c9c <_dtoa_r+0x11c8>
  a05ef4:	05800084 	movi	r22,2
  a05ef8:	90001026 	beq	r18,zero,a05f3c <_dtoa_r+0x468>
  a05efc:	04c02874 	movhi	r19,161
  a05f00:	9cc39f04 	addi	r19,r19,3708
  a05f04:	9080004c 	andi	r2,r18,1
  a05f08:	1005003a 	cmpeq	r2,r2,zero
  a05f0c:	1000081e 	bne	r2,zero,a05f30 <_dtoa_r+0x45c>
  a05f10:	99800017 	ldw	r6,0(r19)
  a05f14:	99c00117 	ldw	r7,4(r19)
  a05f18:	880b883a 	mov	r5,r17
  a05f1c:	8009883a 	mov	r4,r16
  a05f20:	0a0b5580 	call	a0b558 <__muldf3>
  a05f24:	1021883a 	mov	r16,r2
  a05f28:	b5800044 	addi	r22,r22,1
  a05f2c:	1823883a 	mov	r17,r3
  a05f30:	9025d07a 	srai	r18,r18,1
  a05f34:	9cc00204 	addi	r19,r19,8
  a05f38:	903ff21e 	bne	r18,zero,a05f04 <_dtoa_r+0x430>
  a05f3c:	a80b883a 	mov	r5,r21
  a05f40:	a009883a 	mov	r4,r20
  a05f44:	880f883a 	mov	r7,r17
  a05f48:	800d883a 	mov	r6,r16
  a05f4c:	0a029200 	call	a02920 <__divdf3>
  a05f50:	1029883a 	mov	r20,r2
  a05f54:	182b883a 	mov	r21,r3
  a05f58:	d8c00c17 	ldw	r3,48(sp)
  a05f5c:	1805003a 	cmpeq	r2,r3,zero
  a05f60:	1000081e 	bne	r2,zero,a05f84 <_dtoa_r+0x4b0>
  a05f64:	0005883a 	mov	r2,zero
  a05f68:	00cffc34 	movhi	r3,16368
  a05f6c:	180f883a 	mov	r7,r3
  a05f70:	a009883a 	mov	r4,r20
  a05f74:	a80b883a 	mov	r5,r21
  a05f78:	100d883a 	mov	r6,r2
  a05f7c:	0a0bab40 	call	a0bab4 <__ltdf2>
  a05f80:	1003fe16 	blt	r2,zero,a06f7c <_dtoa_r+0x14a8>
  a05f84:	b009883a 	mov	r4,r22
  a05f88:	0a0bb3c0 	call	a0bb3c <__floatsidf>
  a05f8c:	180b883a 	mov	r5,r3
  a05f90:	1009883a 	mov	r4,r2
  a05f94:	a00d883a 	mov	r6,r20
  a05f98:	a80f883a 	mov	r7,r21
  a05f9c:	0a0b5580 	call	a0b558 <__muldf3>
  a05fa0:	0011883a 	mov	r8,zero
  a05fa4:	02500734 	movhi	r9,16412
  a05fa8:	1009883a 	mov	r4,r2
  a05fac:	180b883a 	mov	r5,r3
  a05fb0:	480f883a 	mov	r7,r9
  a05fb4:	400d883a 	mov	r6,r8
  a05fb8:	0a028ac0 	call	a028ac <__adddf3>
  a05fbc:	d9000f17 	ldw	r4,60(sp)
  a05fc0:	102d883a 	mov	r22,r2
  a05fc4:	00bf3034 	movhi	r2,64704
  a05fc8:	18b9883a 	add	fp,r3,r2
  a05fcc:	e02f883a 	mov	r23,fp
  a05fd0:	20028f1e 	bne	r4,zero,a06a10 <_dtoa_r+0xf3c>
  a05fd4:	0005883a 	mov	r2,zero
  a05fd8:	00d00534 	movhi	r3,16404
  a05fdc:	a009883a 	mov	r4,r20
  a05fe0:	a80b883a 	mov	r5,r21
  a05fe4:	180f883a 	mov	r7,r3
  a05fe8:	100d883a 	mov	r6,r2
  a05fec:	0a0282c0 	call	a0282c <__subdf3>
  a05ff0:	1009883a 	mov	r4,r2
  a05ff4:	e00f883a 	mov	r7,fp
  a05ff8:	180b883a 	mov	r5,r3
  a05ffc:	b00d883a 	mov	r6,r22
  a06000:	1025883a 	mov	r18,r2
  a06004:	1827883a 	mov	r19,r3
  a06008:	0a0b9a40 	call	a0b9a4 <__gtdf2>
  a0600c:	00834f16 	blt	zero,r2,a06d4c <_dtoa_r+0x1278>
  a06010:	e0e0003c 	xorhi	r3,fp,32768
  a06014:	9009883a 	mov	r4,r18
  a06018:	980b883a 	mov	r5,r19
  a0601c:	180f883a 	mov	r7,r3
  a06020:	b00d883a 	mov	r6,r22
  a06024:	0a0bab40 	call	a0bab4 <__ltdf2>
  a06028:	1000080e 	bge	r2,zero,a0604c <_dtoa_r+0x578>
  a0602c:	0027883a 	mov	r19,zero
  a06030:	0025883a 	mov	r18,zero
  a06034:	d8802617 	ldw	r2,152(sp)
  a06038:	df000517 	ldw	fp,20(sp)
  a0603c:	d8000615 	stw	zero,24(sp)
  a06040:	0084303a 	nor	r2,zero,r2
  a06044:	d8800d15 	stw	r2,52(sp)
  a06048:	00019b06 	br	a066b8 <_dtoa_r+0xbe4>
  a0604c:	d9801217 	ldw	r6,72(sp)
  a06050:	d8801317 	ldw	r2,76(sp)
  a06054:	3029883a 	mov	r20,r6
  a06058:	102b883a 	mov	r21,r2
  a0605c:	d8c00217 	ldw	r3,8(sp)
  a06060:	18008516 	blt	r3,zero,a06278 <_dtoa_r+0x7a4>
  a06064:	d9000d17 	ldw	r4,52(sp)
  a06068:	00800384 	movi	r2,14
  a0606c:	11008216 	blt	r2,r4,a06278 <_dtoa_r+0x7a4>
  a06070:	200490fa 	slli	r2,r4,3
  a06074:	d9802617 	ldw	r6,152(sp)
  a06078:	00c02874 	movhi	r3,161
  a0607c:	18c36d04 	addi	r3,r3,3508
  a06080:	10c5883a 	add	r2,r2,r3
  a06084:	14800017 	ldw	r18,0(r2)
  a06088:	14c00117 	ldw	r19,4(r2)
  a0608c:	30031e16 	blt	r6,zero,a06d08 <_dtoa_r+0x1234>
  a06090:	d9000517 	ldw	r4,20(sp)
  a06094:	d8c00f17 	ldw	r3,60(sp)
  a06098:	a823883a 	mov	r17,r21
  a0609c:	a021883a 	mov	r16,r20
  a060a0:	192b883a 	add	r21,r3,r4
  a060a4:	2039883a 	mov	fp,r4
  a060a8:	00000f06 	br	a060e8 <_dtoa_r+0x614>
  a060ac:	0005883a 	mov	r2,zero
  a060b0:	00d00934 	movhi	r3,16420
  a060b4:	5009883a 	mov	r4,r10
  a060b8:	580b883a 	mov	r5,r11
  a060bc:	180f883a 	mov	r7,r3
  a060c0:	100d883a 	mov	r6,r2
  a060c4:	0a0b5580 	call	a0b558 <__muldf3>
  a060c8:	180b883a 	mov	r5,r3
  a060cc:	000d883a 	mov	r6,zero
  a060d0:	000f883a 	mov	r7,zero
  a060d4:	1009883a 	mov	r4,r2
  a060d8:	1021883a 	mov	r16,r2
  a060dc:	1823883a 	mov	r17,r3
  a060e0:	0a02b780 	call	a02b78 <__nedf2>
  a060e4:	10004526 	beq	r2,zero,a061fc <_dtoa_r+0x728>
  a060e8:	900d883a 	mov	r6,r18
  a060ec:	980f883a 	mov	r7,r19
  a060f0:	8009883a 	mov	r4,r16
  a060f4:	880b883a 	mov	r5,r17
  a060f8:	0a029200 	call	a02920 <__divdf3>
  a060fc:	180b883a 	mov	r5,r3
  a06100:	1009883a 	mov	r4,r2
  a06104:	0a0bc340 	call	a0bc34 <__fixdfsi>
  a06108:	1009883a 	mov	r4,r2
  a0610c:	1029883a 	mov	r20,r2
  a06110:	0a0bb3c0 	call	a0bb3c <__floatsidf>
  a06114:	180f883a 	mov	r7,r3
  a06118:	9009883a 	mov	r4,r18
  a0611c:	980b883a 	mov	r5,r19
  a06120:	100d883a 	mov	r6,r2
  a06124:	0a0b5580 	call	a0b558 <__muldf3>
  a06128:	180f883a 	mov	r7,r3
  a0612c:	880b883a 	mov	r5,r17
  a06130:	8009883a 	mov	r4,r16
  a06134:	100d883a 	mov	r6,r2
  a06138:	0a0282c0 	call	a0282c <__subdf3>
  a0613c:	1015883a 	mov	r10,r2
  a06140:	a0800c04 	addi	r2,r20,48
  a06144:	e0800005 	stb	r2,0(fp)
  a06148:	e7000044 	addi	fp,fp,1
  a0614c:	1817883a 	mov	r11,r3
  a06150:	e57fd61e 	bne	fp,r21,a060ac <_dtoa_r+0x5d8>
  a06154:	500d883a 	mov	r6,r10
  a06158:	180f883a 	mov	r7,r3
  a0615c:	5009883a 	mov	r4,r10
  a06160:	180b883a 	mov	r5,r3
  a06164:	0a028ac0 	call	a028ac <__adddf3>
  a06168:	100d883a 	mov	r6,r2
  a0616c:	9009883a 	mov	r4,r18
  a06170:	980b883a 	mov	r5,r19
  a06174:	180f883a 	mov	r7,r3
  a06178:	1021883a 	mov	r16,r2
  a0617c:	1823883a 	mov	r17,r3
  a06180:	0a0bab40 	call	a0bab4 <__ltdf2>
  a06184:	10000816 	blt	r2,zero,a061a8 <_dtoa_r+0x6d4>
  a06188:	980b883a 	mov	r5,r19
  a0618c:	800d883a 	mov	r6,r16
  a06190:	880f883a 	mov	r7,r17
  a06194:	9009883a 	mov	r4,r18
  a06198:	0a0b91c0 	call	a0b91c <__eqdf2>
  a0619c:	1000171e 	bne	r2,zero,a061fc <_dtoa_r+0x728>
  a061a0:	a080004c 	andi	r2,r20,1
  a061a4:	10001526 	beq	r2,zero,a061fc <_dtoa_r+0x728>
  a061a8:	d8800d17 	ldw	r2,52(sp)
  a061ac:	d8800415 	stw	r2,16(sp)
  a061b0:	e009883a 	mov	r4,fp
  a061b4:	213fffc4 	addi	r4,r4,-1
  a061b8:	20c00007 	ldb	r3,0(r4)
  a061bc:	00800e44 	movi	r2,57
  a061c0:	1880081e 	bne	r3,r2,a061e4 <_dtoa_r+0x710>
  a061c4:	d8800517 	ldw	r2,20(sp)
  a061c8:	113ffa1e 	bne	r2,r4,a061b4 <_dtoa_r+0x6e0>
  a061cc:	d8c00417 	ldw	r3,16(sp)
  a061d0:	d9800517 	ldw	r6,20(sp)
  a061d4:	00800c04 	movi	r2,48
  a061d8:	18c00044 	addi	r3,r3,1
  a061dc:	d8c00415 	stw	r3,16(sp)
  a061e0:	30800005 	stb	r2,0(r6)
  a061e4:	20800003 	ldbu	r2,0(r4)
  a061e8:	d8c00417 	ldw	r3,16(sp)
  a061ec:	27000044 	addi	fp,r4,1
  a061f0:	10800044 	addi	r2,r2,1
  a061f4:	d8c00d15 	stw	r3,52(sp)
  a061f8:	20800005 	stb	r2,0(r4)
  a061fc:	d9001617 	ldw	r4,88(sp)
  a06200:	d9400717 	ldw	r5,28(sp)
  a06204:	0a08c680 	call	a08c68 <_Bfree>
  a06208:	e0000005 	stb	zero,0(fp)
  a0620c:	d9800d17 	ldw	r6,52(sp)
  a06210:	d8c02717 	ldw	r3,156(sp)
  a06214:	d9002917 	ldw	r4,164(sp)
  a06218:	30800044 	addi	r2,r6,1
  a0621c:	18800015 	stw	r2,0(r3)
  a06220:	20029c26 	beq	r4,zero,a06c94 <_dtoa_r+0x11c0>
  a06224:	d8c00517 	ldw	r3,20(sp)
  a06228:	27000015 	stw	fp,0(r4)
  a0622c:	003e5d06 	br	a05ba4 <_dtoa_r+0xd0>
  a06230:	d9800d17 	ldw	r6,52(sp)
  a06234:	00c02874 	movhi	r3,161
  a06238:	18c36d04 	addi	r3,r3,3508
  a0623c:	d9001217 	ldw	r4,72(sp)
  a06240:	300490fa 	slli	r2,r6,3
  a06244:	d9401317 	ldw	r5,76(sp)
  a06248:	10c5883a 	add	r2,r2,r3
  a0624c:	12000017 	ldw	r8,0(r2)
  a06250:	12400117 	ldw	r9,4(r2)
  a06254:	400d883a 	mov	r6,r8
  a06258:	480f883a 	mov	r7,r9
  a0625c:	0a0bab40 	call	a0bab4 <__ltdf2>
  a06260:	1000030e 	bge	r2,zero,a06270 <_dtoa_r+0x79c>
  a06264:	d8800d17 	ldw	r2,52(sp)
  a06268:	10bfffc4 	addi	r2,r2,-1
  a0626c:	d8800d15 	stw	r2,52(sp)
  a06270:	d8000c15 	stw	zero,48(sp)
  a06274:	003ea806 	br	a05d18 <_dtoa_r+0x244>
  a06278:	d9000b17 	ldw	r4,44(sp)
  a0627c:	202cc03a 	cmpne	r22,r4,zero
  a06280:	b000c71e 	bne	r22,zero,a065a0 <_dtoa_r+0xacc>
  a06284:	dc001117 	ldw	r16,68(sp)
  a06288:	dc801017 	ldw	r18,64(sp)
  a0628c:	0027883a 	mov	r19,zero
  a06290:	04000b0e 	bge	zero,r16,a062c0 <_dtoa_r+0x7ec>
  a06294:	d8c00a17 	ldw	r3,40(sp)
  a06298:	00c0090e 	bge	zero,r3,a062c0 <_dtoa_r+0x7ec>
  a0629c:	8005883a 	mov	r2,r16
  a062a0:	1c011316 	blt	r3,r16,a066f0 <_dtoa_r+0xc1c>
  a062a4:	d9000a17 	ldw	r4,40(sp)
  a062a8:	d9801117 	ldw	r6,68(sp)
  a062ac:	80a1c83a 	sub	r16,r16,r2
  a062b0:	2089c83a 	sub	r4,r4,r2
  a062b4:	308dc83a 	sub	r6,r6,r2
  a062b8:	d9000a15 	stw	r4,40(sp)
  a062bc:	d9801115 	stw	r6,68(sp)
  a062c0:	d8801017 	ldw	r2,64(sp)
  a062c4:	0080150e 	bge	zero,r2,a0631c <_dtoa_r+0x848>
  a062c8:	d8c00b17 	ldw	r3,44(sp)
  a062cc:	1805003a 	cmpeq	r2,r3,zero
  a062d0:	1001c91e 	bne	r2,zero,a069f8 <_dtoa_r+0xf24>
  a062d4:	04800e0e 	bge	zero,r18,a06310 <_dtoa_r+0x83c>
  a062d8:	d9001617 	ldw	r4,88(sp)
  a062dc:	980b883a 	mov	r5,r19
  a062e0:	900d883a 	mov	r6,r18
  a062e4:	0a09a1c0 	call	a09a1c <__pow5mult>
  a062e8:	d9001617 	ldw	r4,88(sp)
  a062ec:	d9800717 	ldw	r6,28(sp)
  a062f0:	100b883a 	mov	r5,r2
  a062f4:	1027883a 	mov	r19,r2
  a062f8:	0a096f80 	call	a096f8 <__multiply>
  a062fc:	d9001617 	ldw	r4,88(sp)
  a06300:	d9400717 	ldw	r5,28(sp)
  a06304:	1023883a 	mov	r17,r2
  a06308:	0a08c680 	call	a08c68 <_Bfree>
  a0630c:	dc400715 	stw	r17,28(sp)
  a06310:	d9001017 	ldw	r4,64(sp)
  a06314:	248dc83a 	sub	r6,r4,r18
  a06318:	30010e1e 	bne	r6,zero,a06754 <_dtoa_r+0xc80>
  a0631c:	d9001617 	ldw	r4,88(sp)
  a06320:	04400044 	movi	r17,1
  a06324:	880b883a 	mov	r5,r17
  a06328:	0a098e00 	call	a098e0 <__i2b>
  a0632c:	d9800917 	ldw	r6,36(sp)
  a06330:	1025883a 	mov	r18,r2
  a06334:	0180040e 	bge	zero,r6,a06348 <_dtoa_r+0x874>
  a06338:	d9001617 	ldw	r4,88(sp)
  a0633c:	100b883a 	mov	r5,r2
  a06340:	0a09a1c0 	call	a09a1c <__pow5mult>
  a06344:	1025883a 	mov	r18,r2
  a06348:	d8801717 	ldw	r2,92(sp)
  a0634c:	8880f30e 	bge	r17,r2,a0671c <_dtoa_r+0xc48>
  a06350:	0023883a 	mov	r17,zero
  a06354:	d9800917 	ldw	r6,36(sp)
  a06358:	30019e1e 	bne	r6,zero,a069d4 <_dtoa_r+0xf00>
  a0635c:	00c00044 	movi	r3,1
  a06360:	d9000a17 	ldw	r4,40(sp)
  a06364:	20c5883a 	add	r2,r4,r3
  a06368:	10c007cc 	andi	r3,r2,31
  a0636c:	1800841e 	bne	r3,zero,a06580 <_dtoa_r+0xaac>
  a06370:	00800704 	movi	r2,28
  a06374:	d9000a17 	ldw	r4,40(sp)
  a06378:	d9801117 	ldw	r6,68(sp)
  a0637c:	80a1883a 	add	r16,r16,r2
  a06380:	2089883a 	add	r4,r4,r2
  a06384:	308d883a 	add	r6,r6,r2
  a06388:	d9000a15 	stw	r4,40(sp)
  a0638c:	d9801115 	stw	r6,68(sp)
  a06390:	d8801117 	ldw	r2,68(sp)
  a06394:	0080050e 	bge	zero,r2,a063ac <_dtoa_r+0x8d8>
  a06398:	d9400717 	ldw	r5,28(sp)
  a0639c:	d9001617 	ldw	r4,88(sp)
  a063a0:	100d883a 	mov	r6,r2
  a063a4:	0a095ac0 	call	a095ac <__lshift>
  a063a8:	d8800715 	stw	r2,28(sp)
  a063ac:	d8c00a17 	ldw	r3,40(sp)
  a063b0:	00c0050e 	bge	zero,r3,a063c8 <_dtoa_r+0x8f4>
  a063b4:	d9001617 	ldw	r4,88(sp)
  a063b8:	900b883a 	mov	r5,r18
  a063bc:	180d883a 	mov	r6,r3
  a063c0:	0a095ac0 	call	a095ac <__lshift>
  a063c4:	1025883a 	mov	r18,r2
  a063c8:	d9000c17 	ldw	r4,48(sp)
  a063cc:	2005003a 	cmpeq	r2,r4,zero
  a063d0:	10016f26 	beq	r2,zero,a06990 <_dtoa_r+0xebc>
  a063d4:	d9000f17 	ldw	r4,60(sp)
  a063d8:	0102170e 	bge	zero,r4,a06c38 <_dtoa_r+0x1164>
  a063dc:	d9800b17 	ldw	r6,44(sp)
  a063e0:	3005003a 	cmpeq	r2,r6,zero
  a063e4:	1000881e 	bne	r2,zero,a06608 <_dtoa_r+0xb34>
  a063e8:	0400050e 	bge	zero,r16,a06400 <_dtoa_r+0x92c>
  a063ec:	d9001617 	ldw	r4,88(sp)
  a063f0:	980b883a 	mov	r5,r19
  a063f4:	800d883a 	mov	r6,r16
  a063f8:	0a095ac0 	call	a095ac <__lshift>
  a063fc:	1027883a 	mov	r19,r2
  a06400:	8804c03a 	cmpne	r2,r17,zero
  a06404:	1002541e 	bne	r2,zero,a06d58 <_dtoa_r+0x1284>
  a06408:	980b883a 	mov	r5,r19
  a0640c:	dd800517 	ldw	r22,20(sp)
  a06410:	dcc00615 	stw	r19,24(sp)
  a06414:	a700004c 	andi	fp,r20,1
  a06418:	2827883a 	mov	r19,r5
  a0641c:	d9000717 	ldw	r4,28(sp)
  a06420:	900b883a 	mov	r5,r18
  a06424:	0a058bc0 	call	a058bc <quorem>
  a06428:	d9000717 	ldw	r4,28(sp)
  a0642c:	d9400617 	ldw	r5,24(sp)
  a06430:	1023883a 	mov	r17,r2
  a06434:	8dc00c04 	addi	r23,r17,48
  a06438:	0a08dc40 	call	a08dc4 <__mcmp>
  a0643c:	d9001617 	ldw	r4,88(sp)
  a06440:	900b883a 	mov	r5,r18
  a06444:	980d883a 	mov	r6,r19
  a06448:	1029883a 	mov	r20,r2
  a0644c:	0a094200 	call	a09420 <__mdiff>
  a06450:	102b883a 	mov	r21,r2
  a06454:	10800317 	ldw	r2,12(r2)
  a06458:	1001281e 	bne	r2,zero,a068fc <_dtoa_r+0xe28>
  a0645c:	d9000717 	ldw	r4,28(sp)
  a06460:	a80b883a 	mov	r5,r21
  a06464:	0a08dc40 	call	a08dc4 <__mcmp>
  a06468:	d9001617 	ldw	r4,88(sp)
  a0646c:	1021883a 	mov	r16,r2
  a06470:	a80b883a 	mov	r5,r21
  a06474:	0a08c680 	call	a08c68 <_Bfree>
  a06478:	8000041e 	bne	r16,zero,a0648c <_dtoa_r+0x9b8>
  a0647c:	d8801717 	ldw	r2,92(sp)
  a06480:	1000021e 	bne	r2,zero,a0648c <_dtoa_r+0x9b8>
  a06484:	e004c03a 	cmpne	r2,fp,zero
  a06488:	10011726 	beq	r2,zero,a068e8 <_dtoa_r+0xe14>
  a0648c:	a0010616 	blt	r20,zero,a068a8 <_dtoa_r+0xdd4>
  a06490:	a000041e 	bne	r20,zero,a064a4 <_dtoa_r+0x9d0>
  a06494:	d8c01717 	ldw	r3,92(sp)
  a06498:	1800021e 	bne	r3,zero,a064a4 <_dtoa_r+0x9d0>
  a0649c:	e004c03a 	cmpne	r2,fp,zero
  a064a0:	10010126 	beq	r2,zero,a068a8 <_dtoa_r+0xdd4>
  a064a4:	04023d16 	blt	zero,r16,a06d9c <_dtoa_r+0x12c8>
  a064a8:	b5c00005 	stb	r23,0(r22)
  a064ac:	d9800517 	ldw	r6,20(sp)
  a064b0:	d9000f17 	ldw	r4,60(sp)
  a064b4:	b5800044 	addi	r22,r22,1
  a064b8:	3105883a 	add	r2,r6,r4
  a064bc:	b0806526 	beq	r22,r2,a06654 <_dtoa_r+0xb80>
  a064c0:	d9400717 	ldw	r5,28(sp)
  a064c4:	d9001617 	ldw	r4,88(sp)
  a064c8:	01800284 	movi	r6,10
  a064cc:	000f883a 	mov	r7,zero
  a064d0:	0a0991c0 	call	a0991c <__multadd>
  a064d4:	d8800715 	stw	r2,28(sp)
  a064d8:	d8800617 	ldw	r2,24(sp)
  a064dc:	14c10c26 	beq	r2,r19,a06910 <_dtoa_r+0xe3c>
  a064e0:	d9400617 	ldw	r5,24(sp)
  a064e4:	d9001617 	ldw	r4,88(sp)
  a064e8:	01800284 	movi	r6,10
  a064ec:	000f883a 	mov	r7,zero
  a064f0:	0a0991c0 	call	a0991c <__multadd>
  a064f4:	d9001617 	ldw	r4,88(sp)
  a064f8:	980b883a 	mov	r5,r19
  a064fc:	01800284 	movi	r6,10
  a06500:	000f883a 	mov	r7,zero
  a06504:	d8800615 	stw	r2,24(sp)
  a06508:	0a0991c0 	call	a0991c <__multadd>
  a0650c:	1027883a 	mov	r19,r2
  a06510:	003fc206 	br	a0641c <_dtoa_r+0x948>
  a06514:	2445c83a 	sub	r2,r4,r17
  a06518:	a088983a 	sll	r4,r20,r2
  a0651c:	003e4b06 	br	a05e4c <_dtoa_r+0x378>
  a06520:	01bfffc4 	movi	r6,-1
  a06524:	00800044 	movi	r2,1
  a06528:	d9800e15 	stw	r6,56(sp)
  a0652c:	d9800f15 	stw	r6,60(sp)
  a06530:	d8800b15 	stw	r2,44(sp)
  a06534:	d8c01617 	ldw	r3,88(sp)
  a06538:	008005c4 	movi	r2,23
  a0653c:	18001115 	stw	zero,68(r3)
  a06540:	1580082e 	bgeu	r2,r22,a06564 <_dtoa_r+0xa90>
  a06544:	00c00104 	movi	r3,4
  a06548:	0009883a 	mov	r4,zero
  a0654c:	18c7883a 	add	r3,r3,r3
  a06550:	18800504 	addi	r2,r3,20
  a06554:	21000044 	addi	r4,r4,1
  a06558:	b0bffc2e 	bgeu	r22,r2,a0654c <_dtoa_r+0xa78>
  a0655c:	d9801617 	ldw	r6,88(sp)
  a06560:	31001115 	stw	r4,68(r6)
  a06564:	dc000f17 	ldw	r16,60(sp)
  a06568:	003e4b06 	br	a05e98 <_dtoa_r+0x3c4>
  a0656c:	d9801717 	ldw	r6,92(sp)
  a06570:	0023883a 	mov	r17,zero
  a06574:	31bfff04 	addi	r6,r6,-4
  a06578:	d9801715 	stw	r6,92(sp)
  a0657c:	003df806 	br	a05d60 <_dtoa_r+0x28c>
  a06580:	00800804 	movi	r2,32
  a06584:	10c9c83a 	sub	r4,r2,r3
  a06588:	00c00104 	movi	r3,4
  a0658c:	19005a16 	blt	r3,r4,a066f8 <_dtoa_r+0xc24>
  a06590:	008000c4 	movi	r2,3
  a06594:	113f7e16 	blt	r2,r4,a06390 <_dtoa_r+0x8bc>
  a06598:	20800704 	addi	r2,r4,28
  a0659c:	003f7506 	br	a06374 <_dtoa_r+0x8a0>
  a065a0:	d9801717 	ldw	r6,92(sp)
  a065a4:	00800044 	movi	r2,1
  a065a8:	1180a10e 	bge	r2,r6,a06830 <_dtoa_r+0xd5c>
  a065ac:	d9800f17 	ldw	r6,60(sp)
  a065b0:	d8c01017 	ldw	r3,64(sp)
  a065b4:	30bfffc4 	addi	r2,r6,-1
  a065b8:	1881c616 	blt	r3,r2,a06cd4 <_dtoa_r+0x1200>
  a065bc:	18a5c83a 	sub	r18,r3,r2
  a065c0:	d8800f17 	ldw	r2,60(sp)
  a065c4:	10026216 	blt	r2,zero,a06f50 <_dtoa_r+0x147c>
  a065c8:	dc001117 	ldw	r16,68(sp)
  a065cc:	1007883a 	mov	r3,r2
  a065d0:	d9800a17 	ldw	r6,40(sp)
  a065d4:	d8801117 	ldw	r2,68(sp)
  a065d8:	d9001617 	ldw	r4,88(sp)
  a065dc:	30cd883a 	add	r6,r6,r3
  a065e0:	10c5883a 	add	r2,r2,r3
  a065e4:	01400044 	movi	r5,1
  a065e8:	d9800a15 	stw	r6,40(sp)
  a065ec:	d8801115 	stw	r2,68(sp)
  a065f0:	0a098e00 	call	a098e0 <__i2b>
  a065f4:	1027883a 	mov	r19,r2
  a065f8:	003f2506 	br	a06290 <_dtoa_r+0x7bc>
  a065fc:	00c02874 	movhi	r3,161
  a06600:	18c2e004 	addi	r3,r3,2944
  a06604:	003d6706 	br	a05ba4 <_dtoa_r+0xd0>
  a06608:	dd800517 	ldw	r22,20(sp)
  a0660c:	04000044 	movi	r16,1
  a06610:	00000706 	br	a06630 <_dtoa_r+0xb5c>
  a06614:	d9400717 	ldw	r5,28(sp)
  a06618:	d9001617 	ldw	r4,88(sp)
  a0661c:	01800284 	movi	r6,10
  a06620:	000f883a 	mov	r7,zero
  a06624:	0a0991c0 	call	a0991c <__multadd>
  a06628:	d8800715 	stw	r2,28(sp)
  a0662c:	84000044 	addi	r16,r16,1
  a06630:	d9000717 	ldw	r4,28(sp)
  a06634:	900b883a 	mov	r5,r18
  a06638:	0a058bc0 	call	a058bc <quorem>
  a0663c:	15c00c04 	addi	r23,r2,48
  a06640:	b5c00005 	stb	r23,0(r22)
  a06644:	d8c00f17 	ldw	r3,60(sp)
  a06648:	b5800044 	addi	r22,r22,1
  a0664c:	80fff116 	blt	r16,r3,a06614 <_dtoa_r+0xb40>
  a06650:	d8000615 	stw	zero,24(sp)
  a06654:	d9400717 	ldw	r5,28(sp)
  a06658:	d9001617 	ldw	r4,88(sp)
  a0665c:	01800044 	movi	r6,1
  a06660:	0a095ac0 	call	a095ac <__lshift>
  a06664:	1009883a 	mov	r4,r2
  a06668:	900b883a 	mov	r5,r18
  a0666c:	d8800715 	stw	r2,28(sp)
  a06670:	0a08dc40 	call	a08dc4 <__mcmp>
  a06674:	00803c0e 	bge	zero,r2,a06768 <_dtoa_r+0xc94>
  a06678:	b009883a 	mov	r4,r22
  a0667c:	213fffc4 	addi	r4,r4,-1
  a06680:	21400003 	ldbu	r5,0(r4)
  a06684:	00800e44 	movi	r2,57
  a06688:	28c03fcc 	andi	r3,r5,255
  a0668c:	18c0201c 	xori	r3,r3,128
  a06690:	18ffe004 	addi	r3,r3,-128
  a06694:	1881981e 	bne	r3,r2,a06cf8 <_dtoa_r+0x1224>
  a06698:	d9800517 	ldw	r6,20(sp)
  a0669c:	21bff71e 	bne	r4,r6,a0667c <_dtoa_r+0xba8>
  a066a0:	d8800d17 	ldw	r2,52(sp)
  a066a4:	37000044 	addi	fp,r6,1
  a066a8:	10800044 	addi	r2,r2,1
  a066ac:	d8800d15 	stw	r2,52(sp)
  a066b0:	00800c44 	movi	r2,49
  a066b4:	30800005 	stb	r2,0(r6)
  a066b8:	d9001617 	ldw	r4,88(sp)
  a066bc:	900b883a 	mov	r5,r18
  a066c0:	0a08c680 	call	a08c68 <_Bfree>
  a066c4:	983ecd26 	beq	r19,zero,a061fc <_dtoa_r+0x728>
  a066c8:	d8c00617 	ldw	r3,24(sp)
  a066cc:	18000426 	beq	r3,zero,a066e0 <_dtoa_r+0xc0c>
  a066d0:	1cc00326 	beq	r3,r19,a066e0 <_dtoa_r+0xc0c>
  a066d4:	d9001617 	ldw	r4,88(sp)
  a066d8:	180b883a 	mov	r5,r3
  a066dc:	0a08c680 	call	a08c68 <_Bfree>
  a066e0:	d9001617 	ldw	r4,88(sp)
  a066e4:	980b883a 	mov	r5,r19
  a066e8:	0a08c680 	call	a08c68 <_Bfree>
  a066ec:	003ec306 	br	a061fc <_dtoa_r+0x728>
  a066f0:	1805883a 	mov	r2,r3
  a066f4:	003eeb06 	br	a062a4 <_dtoa_r+0x7d0>
  a066f8:	d9800a17 	ldw	r6,40(sp)
  a066fc:	d8c01117 	ldw	r3,68(sp)
  a06700:	20bfff04 	addi	r2,r4,-4
  a06704:	308d883a 	add	r6,r6,r2
  a06708:	1887883a 	add	r3,r3,r2
  a0670c:	80a1883a 	add	r16,r16,r2
  a06710:	d9800a15 	stw	r6,40(sp)
  a06714:	d8c01115 	stw	r3,68(sp)
  a06718:	003f1d06 	br	a06390 <_dtoa_r+0x8bc>
  a0671c:	a03f0c1e 	bne	r20,zero,a06350 <_dtoa_r+0x87c>
  a06720:	00800434 	movhi	r2,16
  a06724:	10bfffc4 	addi	r2,r2,-1
  a06728:	a884703a 	and	r2,r21,r2
  a0672c:	103f081e 	bne	r2,zero,a06350 <_dtoa_r+0x87c>
  a06730:	a89ffc2c 	andhi	r2,r21,32752
  a06734:	103f0626 	beq	r2,zero,a06350 <_dtoa_r+0x87c>
  a06738:	d8c01117 	ldw	r3,68(sp)
  a0673c:	d9000a17 	ldw	r4,40(sp)
  a06740:	18c00044 	addi	r3,r3,1
  a06744:	21000044 	addi	r4,r4,1
  a06748:	d8c01115 	stw	r3,68(sp)
  a0674c:	d9000a15 	stw	r4,40(sp)
  a06750:	003f0006 	br	a06354 <_dtoa_r+0x880>
  a06754:	d9400717 	ldw	r5,28(sp)
  a06758:	d9001617 	ldw	r4,88(sp)
  a0675c:	0a09a1c0 	call	a09a1c <__pow5mult>
  a06760:	d8800715 	stw	r2,28(sp)
  a06764:	003eed06 	br	a0631c <_dtoa_r+0x848>
  a06768:	1000021e 	bne	r2,zero,a06774 <_dtoa_r+0xca0>
  a0676c:	b880004c 	andi	r2,r23,1
  a06770:	103fc11e 	bne	r2,zero,a06678 <_dtoa_r+0xba4>
  a06774:	b5bfffc4 	addi	r22,r22,-1
  a06778:	b0c00007 	ldb	r3,0(r22)
  a0677c:	00800c04 	movi	r2,48
  a06780:	18bffc26 	beq	r3,r2,a06774 <_dtoa_r+0xca0>
  a06784:	b7000044 	addi	fp,r22,1
  a06788:	003fcb06 	br	a066b8 <_dtoa_r+0xbe4>
  a0678c:	d9800d17 	ldw	r6,52(sp)
  a06790:	018fc83a 	sub	r7,zero,r6
  a06794:	3801f726 	beq	r7,zero,a06f74 <_dtoa_r+0x14a0>
  a06798:	398003cc 	andi	r6,r7,15
  a0679c:	300c90fa 	slli	r6,r6,3
  a067a0:	01402874 	movhi	r5,161
  a067a4:	29436d04 	addi	r5,r5,3508
  a067a8:	d9001217 	ldw	r4,72(sp)
  a067ac:	314d883a 	add	r6,r6,r5
  a067b0:	30c00117 	ldw	r3,4(r6)
  a067b4:	30800017 	ldw	r2,0(r6)
  a067b8:	d9401317 	ldw	r5,76(sp)
  a067bc:	3821d13a 	srai	r16,r7,4
  a067c0:	100d883a 	mov	r6,r2
  a067c4:	180f883a 	mov	r7,r3
  a067c8:	0a0b5580 	call	a0b558 <__muldf3>
  a067cc:	1011883a 	mov	r8,r2
  a067d0:	1813883a 	mov	r9,r3
  a067d4:	1029883a 	mov	r20,r2
  a067d8:	182b883a 	mov	r21,r3
  a067dc:	8001e526 	beq	r16,zero,a06f74 <_dtoa_r+0x14a0>
  a067e0:	05800084 	movi	r22,2
  a067e4:	04402874 	movhi	r17,161
  a067e8:	8c439f04 	addi	r17,r17,3708
  a067ec:	8080004c 	andi	r2,r16,1
  a067f0:	1005003a 	cmpeq	r2,r2,zero
  a067f4:	1000081e 	bne	r2,zero,a06818 <_dtoa_r+0xd44>
  a067f8:	89800017 	ldw	r6,0(r17)
  a067fc:	89c00117 	ldw	r7,4(r17)
  a06800:	480b883a 	mov	r5,r9
  a06804:	4009883a 	mov	r4,r8
  a06808:	0a0b5580 	call	a0b558 <__muldf3>
  a0680c:	1011883a 	mov	r8,r2
  a06810:	b5800044 	addi	r22,r22,1
  a06814:	1813883a 	mov	r9,r3
  a06818:	8021d07a 	srai	r16,r16,1
  a0681c:	8c400204 	addi	r17,r17,8
  a06820:	803ff21e 	bne	r16,zero,a067ec <_dtoa_r+0xd18>
  a06824:	4029883a 	mov	r20,r8
  a06828:	482b883a 	mov	r21,r9
  a0682c:	003dca06 	br	a05f58 <_dtoa_r+0x484>
  a06830:	d9000817 	ldw	r4,32(sp)
  a06834:	2005003a 	cmpeq	r2,r4,zero
  a06838:	1001f61e 	bne	r2,zero,a07014 <_dtoa_r+0x1540>
  a0683c:	dc001117 	ldw	r16,68(sp)
  a06840:	dc801017 	ldw	r18,64(sp)
  a06844:	18c10cc4 	addi	r3,r3,1075
  a06848:	003f6106 	br	a065d0 <_dtoa_r+0xafc>
  a0684c:	d8000b15 	stw	zero,44(sp)
  a06850:	d9802617 	ldw	r6,152(sp)
  a06854:	d8c00d17 	ldw	r3,52(sp)
  a06858:	30800044 	addi	r2,r6,1
  a0685c:	18ad883a 	add	r22,r3,r2
  a06860:	b13fffc4 	addi	r4,r22,-1
  a06864:	d9000e15 	stw	r4,56(sp)
  a06868:	0581f60e 	bge	zero,r22,a07044 <_dtoa_r+0x1570>
  a0686c:	dd800f15 	stw	r22,60(sp)
  a06870:	003f3006 	br	a06534 <_dtoa_r+0xa60>
  a06874:	d8000b15 	stw	zero,44(sp)
  a06878:	d9002617 	ldw	r4,152(sp)
  a0687c:	0101eb0e 	bge	zero,r4,a0702c <_dtoa_r+0x1558>
  a06880:	202d883a 	mov	r22,r4
  a06884:	d9000e15 	stw	r4,56(sp)
  a06888:	d9000f15 	stw	r4,60(sp)
  a0688c:	003f2906 	br	a06534 <_dtoa_r+0xa60>
  a06890:	01800044 	movi	r6,1
  a06894:	d9800b15 	stw	r6,44(sp)
  a06898:	003ff706 	br	a06878 <_dtoa_r+0xda4>
  a0689c:	01000044 	movi	r4,1
  a068a0:	d9000b15 	stw	r4,44(sp)
  a068a4:	003fea06 	br	a06850 <_dtoa_r+0xd7c>
  a068a8:	04000c0e 	bge	zero,r16,a068dc <_dtoa_r+0xe08>
  a068ac:	d9400717 	ldw	r5,28(sp)
  a068b0:	d9001617 	ldw	r4,88(sp)
  a068b4:	01800044 	movi	r6,1
  a068b8:	0a095ac0 	call	a095ac <__lshift>
  a068bc:	1009883a 	mov	r4,r2
  a068c0:	900b883a 	mov	r5,r18
  a068c4:	d8800715 	stw	r2,28(sp)
  a068c8:	0a08dc40 	call	a08dc4 <__mcmp>
  a068cc:	0081e00e 	bge	zero,r2,a07050 <_dtoa_r+0x157c>
  a068d0:	bdc00044 	addi	r23,r23,1
  a068d4:	00800e84 	movi	r2,58
  a068d8:	b881a226 	beq	r23,r2,a06f64 <_dtoa_r+0x1490>
  a068dc:	b7000044 	addi	fp,r22,1
  a068e0:	b5c00005 	stb	r23,0(r22)
  a068e4:	003f7406 	br	a066b8 <_dtoa_r+0xbe4>
  a068e8:	00800e44 	movi	r2,57
  a068ec:	b8819d26 	beq	r23,r2,a06f64 <_dtoa_r+0x1490>
  a068f0:	053ffa0e 	bge	zero,r20,a068dc <_dtoa_r+0xe08>
  a068f4:	8dc00c44 	addi	r23,r17,49
  a068f8:	003ff806 	br	a068dc <_dtoa_r+0xe08>
  a068fc:	d9001617 	ldw	r4,88(sp)
  a06900:	a80b883a 	mov	r5,r21
  a06904:	04000044 	movi	r16,1
  a06908:	0a08c680 	call	a08c68 <_Bfree>
  a0690c:	003edf06 	br	a0648c <_dtoa_r+0x9b8>
  a06910:	d9001617 	ldw	r4,88(sp)
  a06914:	980b883a 	mov	r5,r19
  a06918:	01800284 	movi	r6,10
  a0691c:	000f883a 	mov	r7,zero
  a06920:	0a0991c0 	call	a0991c <__multadd>
  a06924:	1027883a 	mov	r19,r2
  a06928:	d8800615 	stw	r2,24(sp)
  a0692c:	003ebb06 	br	a0641c <_dtoa_r+0x948>
  a06930:	d9801117 	ldw	r6,68(sp)
  a06934:	d8800d17 	ldw	r2,52(sp)
  a06938:	d8000915 	stw	zero,36(sp)
  a0693c:	308dc83a 	sub	r6,r6,r2
  a06940:	0087c83a 	sub	r3,zero,r2
  a06944:	d9801115 	stw	r6,68(sp)
  a06948:	d8c01015 	stw	r3,64(sp)
  a0694c:	003cfe06 	br	a05d48 <_dtoa_r+0x274>
  a06950:	018dc83a 	sub	r6,zero,r6
  a06954:	d9801115 	stw	r6,68(sp)
  a06958:	d8000a15 	stw	zero,40(sp)
  a0695c:	003cf306 	br	a05d2c <_dtoa_r+0x258>
  a06960:	d9000d17 	ldw	r4,52(sp)
  a06964:	0a0bb3c0 	call	a0bb3c <__floatsidf>
  a06968:	880b883a 	mov	r5,r17
  a0696c:	8009883a 	mov	r4,r16
  a06970:	180f883a 	mov	r7,r3
  a06974:	100d883a 	mov	r6,r2
  a06978:	0a02b780 	call	a02b78 <__nedf2>
  a0697c:	103ce126 	beq	r2,zero,a05d04 <_dtoa_r+0x230>
  a06980:	d9800d17 	ldw	r6,52(sp)
  a06984:	31bfffc4 	addi	r6,r6,-1
  a06988:	d9800d15 	stw	r6,52(sp)
  a0698c:	003cdd06 	br	a05d04 <_dtoa_r+0x230>
  a06990:	d9000717 	ldw	r4,28(sp)
  a06994:	900b883a 	mov	r5,r18
  a06998:	0a08dc40 	call	a08dc4 <__mcmp>
  a0699c:	103e8d0e 	bge	r2,zero,a063d4 <_dtoa_r+0x900>
  a069a0:	d9400717 	ldw	r5,28(sp)
  a069a4:	d9001617 	ldw	r4,88(sp)
  a069a8:	01800284 	movi	r6,10
  a069ac:	000f883a 	mov	r7,zero
  a069b0:	0a0991c0 	call	a0991c <__multadd>
  a069b4:	d9800d17 	ldw	r6,52(sp)
  a069b8:	d8800715 	stw	r2,28(sp)
  a069bc:	31bfffc4 	addi	r6,r6,-1
  a069c0:	d9800d15 	stw	r6,52(sp)
  a069c4:	b001a71e 	bne	r22,zero,a07064 <_dtoa_r+0x1590>
  a069c8:	d8800e17 	ldw	r2,56(sp)
  a069cc:	d8800f15 	stw	r2,60(sp)
  a069d0:	003e8006 	br	a063d4 <_dtoa_r+0x900>
  a069d4:	90800417 	ldw	r2,16(r18)
  a069d8:	1085883a 	add	r2,r2,r2
  a069dc:	1085883a 	add	r2,r2,r2
  a069e0:	1485883a 	add	r2,r2,r18
  a069e4:	11000417 	ldw	r4,16(r2)
  a069e8:	0a08c900 	call	a08c90 <__hi0bits>
  a069ec:	00c00804 	movi	r3,32
  a069f0:	1887c83a 	sub	r3,r3,r2
  a069f4:	003e5a06 	br	a06360 <_dtoa_r+0x88c>
  a069f8:	d9400717 	ldw	r5,28(sp)
  a069fc:	d9801017 	ldw	r6,64(sp)
  a06a00:	d9001617 	ldw	r4,88(sp)
  a06a04:	0a09a1c0 	call	a09a1c <__pow5mult>
  a06a08:	d8800715 	stw	r2,28(sp)
  a06a0c:	003e4306 	br	a0631c <_dtoa_r+0x848>
  a06a10:	d9800f17 	ldw	r6,60(sp)
  a06a14:	d8800d17 	ldw	r2,52(sp)
  a06a18:	d9800315 	stw	r6,12(sp)
  a06a1c:	d8800415 	stw	r2,16(sp)
  a06a20:	d8c00b17 	ldw	r3,44(sp)
  a06a24:	1805003a 	cmpeq	r2,r3,zero
  a06a28:	1000e21e 	bne	r2,zero,a06db4 <_dtoa_r+0x12e0>
  a06a2c:	d9000317 	ldw	r4,12(sp)
  a06a30:	0005883a 	mov	r2,zero
  a06a34:	00cff834 	movhi	r3,16352
  a06a38:	200c90fa 	slli	r6,r4,3
  a06a3c:	01002874 	movhi	r4,161
  a06a40:	21036d04 	addi	r4,r4,3508
  a06a44:	180b883a 	mov	r5,r3
  a06a48:	310d883a 	add	r6,r6,r4
  a06a4c:	327fff17 	ldw	r9,-4(r6)
  a06a50:	323ffe17 	ldw	r8,-8(r6)
  a06a54:	1009883a 	mov	r4,r2
  a06a58:	480f883a 	mov	r7,r9
  a06a5c:	400d883a 	mov	r6,r8
  a06a60:	0a029200 	call	a02920 <__divdf3>
  a06a64:	180b883a 	mov	r5,r3
  a06a68:	b00d883a 	mov	r6,r22
  a06a6c:	b80f883a 	mov	r7,r23
  a06a70:	1009883a 	mov	r4,r2
  a06a74:	0a0282c0 	call	a0282c <__subdf3>
  a06a78:	a80b883a 	mov	r5,r21
  a06a7c:	a009883a 	mov	r4,r20
  a06a80:	d8c01915 	stw	r3,100(sp)
  a06a84:	d8801815 	stw	r2,96(sp)
  a06a88:	0a0bc340 	call	a0bc34 <__fixdfsi>
  a06a8c:	1009883a 	mov	r4,r2
  a06a90:	1027883a 	mov	r19,r2
  a06a94:	0a0bb3c0 	call	a0bb3c <__floatsidf>
  a06a98:	a80b883a 	mov	r5,r21
  a06a9c:	a009883a 	mov	r4,r20
  a06aa0:	180f883a 	mov	r7,r3
  a06aa4:	100d883a 	mov	r6,r2
  a06aa8:	0a0282c0 	call	a0282c <__subdf3>
  a06aac:	d9801817 	ldw	r6,96(sp)
  a06ab0:	1823883a 	mov	r17,r3
  a06ab4:	d8801415 	stw	r2,80(sp)
  a06ab8:	302d883a 	mov	r22,r6
  a06abc:	d9800517 	ldw	r6,20(sp)
  a06ac0:	9cc00c04 	addi	r19,r19,48
  a06ac4:	dc401515 	stw	r17,84(sp)
  a06ac8:	d8c01917 	ldw	r3,100(sp)
  a06acc:	34c00005 	stb	r19,0(r6)
  a06ad0:	d8800517 	ldw	r2,20(sp)
  a06ad4:	d9401917 	ldw	r5,100(sp)
  a06ad8:	d9801417 	ldw	r6,80(sp)
  a06adc:	b009883a 	mov	r4,r22
  a06ae0:	880f883a 	mov	r7,r17
  a06ae4:	182f883a 	mov	r23,r3
  a06ae8:	17000044 	addi	fp,r2,1
  a06aec:	0a0b9a40 	call	a0b9a4 <__gtdf2>
  a06af0:	00804e16 	blt	zero,r2,a06c2c <_dtoa_r+0x1158>
  a06af4:	d9801417 	ldw	r6,80(sp)
  a06af8:	0005883a 	mov	r2,zero
  a06afc:	00cffc34 	movhi	r3,16368
  a06b00:	180b883a 	mov	r5,r3
  a06b04:	880f883a 	mov	r7,r17
  a06b08:	1009883a 	mov	r4,r2
  a06b0c:	0a0282c0 	call	a0282c <__subdf3>
  a06b10:	d9401917 	ldw	r5,100(sp)
  a06b14:	180f883a 	mov	r7,r3
  a06b18:	b009883a 	mov	r4,r22
  a06b1c:	100d883a 	mov	r6,r2
  a06b20:	0a0b9a40 	call	a0b9a4 <__gtdf2>
  a06b24:	00bda216 	blt	zero,r2,a061b0 <_dtoa_r+0x6dc>
  a06b28:	d8c00317 	ldw	r3,12(sp)
  a06b2c:	00800044 	movi	r2,1
  a06b30:	10c01216 	blt	r2,r3,a06b7c <_dtoa_r+0x10a8>
  a06b34:	003d4506 	br	a0604c <_dtoa_r+0x578>
  a06b38:	d9801417 	ldw	r6,80(sp)
  a06b3c:	0005883a 	mov	r2,zero
  a06b40:	00cffc34 	movhi	r3,16368
  a06b44:	180b883a 	mov	r5,r3
  a06b48:	880f883a 	mov	r7,r17
  a06b4c:	1009883a 	mov	r4,r2
  a06b50:	0a0282c0 	call	a0282c <__subdf3>
  a06b54:	d9c01b17 	ldw	r7,108(sp)
  a06b58:	180b883a 	mov	r5,r3
  a06b5c:	1009883a 	mov	r4,r2
  a06b60:	b00d883a 	mov	r6,r22
  a06b64:	0a0bab40 	call	a0bab4 <__ltdf2>
  a06b68:	103d9116 	blt	r2,zero,a061b0 <_dtoa_r+0x6dc>
  a06b6c:	d9800517 	ldw	r6,20(sp)
  a06b70:	d9000317 	ldw	r4,12(sp)
  a06b74:	3105883a 	add	r2,r6,r4
  a06b78:	e0bd3426 	beq	fp,r2,a0604c <_dtoa_r+0x578>
  a06b7c:	04500934 	movhi	r17,16420
  a06b80:	0021883a 	mov	r16,zero
  a06b84:	b80b883a 	mov	r5,r23
  a06b88:	b009883a 	mov	r4,r22
  a06b8c:	800d883a 	mov	r6,r16
  a06b90:	880f883a 	mov	r7,r17
  a06b94:	0a0b5580 	call	a0b558 <__muldf3>
  a06b98:	d9401517 	ldw	r5,84(sp)
  a06b9c:	d9001417 	ldw	r4,80(sp)
  a06ba0:	880f883a 	mov	r7,r17
  a06ba4:	000d883a 	mov	r6,zero
  a06ba8:	d8801a15 	stw	r2,104(sp)
  a06bac:	d8c01b15 	stw	r3,108(sp)
  a06bb0:	0a0b5580 	call	a0b558 <__muldf3>
  a06bb4:	180b883a 	mov	r5,r3
  a06bb8:	1009883a 	mov	r4,r2
  a06bbc:	1823883a 	mov	r17,r3
  a06bc0:	1021883a 	mov	r16,r2
  a06bc4:	0a0bc340 	call	a0bc34 <__fixdfsi>
  a06bc8:	1009883a 	mov	r4,r2
  a06bcc:	102b883a 	mov	r21,r2
  a06bd0:	0a0bb3c0 	call	a0bb3c <__floatsidf>
  a06bd4:	880b883a 	mov	r5,r17
  a06bd8:	8009883a 	mov	r4,r16
  a06bdc:	180f883a 	mov	r7,r3
  a06be0:	100d883a 	mov	r6,r2
  a06be4:	0a0282c0 	call	a0282c <__subdf3>
  a06be8:	1021883a 	mov	r16,r2
  a06bec:	d9001b17 	ldw	r4,108(sp)
  a06bf0:	1823883a 	mov	r17,r3
  a06bf4:	dc001415 	stw	r16,80(sp)
  a06bf8:	ad400c04 	addi	r21,r21,48
  a06bfc:	dc401515 	stw	r17,84(sp)
  a06c00:	d8801a17 	ldw	r2,104(sp)
  a06c04:	e5400005 	stb	r21,0(fp)
  a06c08:	202f883a 	mov	r23,r4
  a06c0c:	d9c01b17 	ldw	r7,108(sp)
  a06c10:	d9001417 	ldw	r4,80(sp)
  a06c14:	880b883a 	mov	r5,r17
  a06c18:	100d883a 	mov	r6,r2
  a06c1c:	102d883a 	mov	r22,r2
  a06c20:	e7000044 	addi	fp,fp,1
  a06c24:	0a0bab40 	call	a0bab4 <__ltdf2>
  a06c28:	103fc30e 	bge	r2,zero,a06b38 <_dtoa_r+0x1064>
  a06c2c:	d9000417 	ldw	r4,16(sp)
  a06c30:	d9000d15 	stw	r4,52(sp)
  a06c34:	003d7106 	br	a061fc <_dtoa_r+0x728>
  a06c38:	d9801717 	ldw	r6,92(sp)
  a06c3c:	00800084 	movi	r2,2
  a06c40:	11bde60e 	bge	r2,r6,a063dc <_dtoa_r+0x908>
  a06c44:	203cfb1e 	bne	r4,zero,a06034 <_dtoa_r+0x560>
  a06c48:	d9001617 	ldw	r4,88(sp)
  a06c4c:	900b883a 	mov	r5,r18
  a06c50:	01800144 	movi	r6,5
  a06c54:	000f883a 	mov	r7,zero
  a06c58:	0a0991c0 	call	a0991c <__multadd>
  a06c5c:	d9000717 	ldw	r4,28(sp)
  a06c60:	100b883a 	mov	r5,r2
  a06c64:	1025883a 	mov	r18,r2
  a06c68:	0a08dc40 	call	a08dc4 <__mcmp>
  a06c6c:	00bcf10e 	bge	zero,r2,a06034 <_dtoa_r+0x560>
  a06c70:	d8c00d17 	ldw	r3,52(sp)
  a06c74:	d9000517 	ldw	r4,20(sp)
  a06c78:	d8000615 	stw	zero,24(sp)
  a06c7c:	18c00044 	addi	r3,r3,1
  a06c80:	d8c00d15 	stw	r3,52(sp)
  a06c84:	00800c44 	movi	r2,49
  a06c88:	27000044 	addi	fp,r4,1
  a06c8c:	20800005 	stb	r2,0(r4)
  a06c90:	003e8906 	br	a066b8 <_dtoa_r+0xbe4>
  a06c94:	d8c00517 	ldw	r3,20(sp)
  a06c98:	003bc206 	br	a05ba4 <_dtoa_r+0xd0>
  a06c9c:	01802874 	movhi	r6,161
  a06ca0:	31839f04 	addi	r6,r6,3708
  a06ca4:	30c00917 	ldw	r3,36(r6)
  a06ca8:	30800817 	ldw	r2,32(r6)
  a06cac:	d9001217 	ldw	r4,72(sp)
  a06cb0:	d9401317 	ldw	r5,76(sp)
  a06cb4:	180f883a 	mov	r7,r3
  a06cb8:	100d883a 	mov	r6,r2
  a06cbc:	0a029200 	call	a02920 <__divdf3>
  a06cc0:	948003cc 	andi	r18,r18,15
  a06cc4:	058000c4 	movi	r22,3
  a06cc8:	1029883a 	mov	r20,r2
  a06ccc:	182b883a 	mov	r21,r3
  a06cd0:	003c8906 	br	a05ef8 <_dtoa_r+0x424>
  a06cd4:	d9001017 	ldw	r4,64(sp)
  a06cd8:	d9800917 	ldw	r6,36(sp)
  a06cdc:	0025883a 	mov	r18,zero
  a06ce0:	1105c83a 	sub	r2,r2,r4
  a06ce4:	2089883a 	add	r4,r4,r2
  a06ce8:	308d883a 	add	r6,r6,r2
  a06cec:	d9001015 	stw	r4,64(sp)
  a06cf0:	d9800915 	stw	r6,36(sp)
  a06cf4:	003e3206 	br	a065c0 <_dtoa_r+0xaec>
  a06cf8:	28800044 	addi	r2,r5,1
  a06cfc:	27000044 	addi	fp,r4,1
  a06d00:	20800005 	stb	r2,0(r4)
  a06d04:	003e6c06 	br	a066b8 <_dtoa_r+0xbe4>
  a06d08:	d8800f17 	ldw	r2,60(sp)
  a06d0c:	00bce016 	blt	zero,r2,a06090 <_dtoa_r+0x5bc>
  a06d10:	d9800f17 	ldw	r6,60(sp)
  a06d14:	303cc51e 	bne	r6,zero,a0602c <_dtoa_r+0x558>
  a06d18:	0005883a 	mov	r2,zero
  a06d1c:	00d00534 	movhi	r3,16404
  a06d20:	980b883a 	mov	r5,r19
  a06d24:	180f883a 	mov	r7,r3
  a06d28:	9009883a 	mov	r4,r18
  a06d2c:	100d883a 	mov	r6,r2
  a06d30:	0a0b5580 	call	a0b558 <__muldf3>
  a06d34:	180b883a 	mov	r5,r3
  a06d38:	a80f883a 	mov	r7,r21
  a06d3c:	1009883a 	mov	r4,r2
  a06d40:	a00d883a 	mov	r6,r20
  a06d44:	0a0ba2c0 	call	a0ba2c <__gedf2>
  a06d48:	103cb80e 	bge	r2,zero,a0602c <_dtoa_r+0x558>
  a06d4c:	0027883a 	mov	r19,zero
  a06d50:	0025883a 	mov	r18,zero
  a06d54:	003fc606 	br	a06c70 <_dtoa_r+0x119c>
  a06d58:	99400117 	ldw	r5,4(r19)
  a06d5c:	d9001617 	ldw	r4,88(sp)
  a06d60:	0a091e80 	call	a091e8 <_Balloc>
  a06d64:	99800417 	ldw	r6,16(r19)
  a06d68:	11000304 	addi	r4,r2,12
  a06d6c:	99400304 	addi	r5,r19,12
  a06d70:	318d883a 	add	r6,r6,r6
  a06d74:	318d883a 	add	r6,r6,r6
  a06d78:	31800204 	addi	r6,r6,8
  a06d7c:	1023883a 	mov	r17,r2
  a06d80:	0a08a500 	call	a08a50 <memcpy>
  a06d84:	d9001617 	ldw	r4,88(sp)
  a06d88:	880b883a 	mov	r5,r17
  a06d8c:	01800044 	movi	r6,1
  a06d90:	0a095ac0 	call	a095ac <__lshift>
  a06d94:	100b883a 	mov	r5,r2
  a06d98:	003d9c06 	br	a0640c <_dtoa_r+0x938>
  a06d9c:	00800e44 	movi	r2,57
  a06da0:	b8807026 	beq	r23,r2,a06f64 <_dtoa_r+0x1490>
  a06da4:	b8800044 	addi	r2,r23,1
  a06da8:	b7000044 	addi	fp,r22,1
  a06dac:	b0800005 	stb	r2,0(r22)
  a06db0:	003e4106 	br	a066b8 <_dtoa_r+0xbe4>
  a06db4:	d8800317 	ldw	r2,12(sp)
  a06db8:	01802874 	movhi	r6,161
  a06dbc:	31836d04 	addi	r6,r6,3508
  a06dc0:	b009883a 	mov	r4,r22
  a06dc4:	100e90fa 	slli	r7,r2,3
  a06dc8:	b80b883a 	mov	r5,r23
  a06dcc:	398f883a 	add	r7,r7,r6
  a06dd0:	38bffe17 	ldw	r2,-8(r7)
  a06dd4:	d9800517 	ldw	r6,20(sp)
  a06dd8:	38ffff17 	ldw	r3,-4(r7)
  a06ddc:	37000044 	addi	fp,r6,1
  a06de0:	180f883a 	mov	r7,r3
  a06de4:	100d883a 	mov	r6,r2
  a06de8:	0a0b5580 	call	a0b558 <__muldf3>
  a06dec:	a80b883a 	mov	r5,r21
  a06df0:	a009883a 	mov	r4,r20
  a06df4:	182f883a 	mov	r23,r3
  a06df8:	102d883a 	mov	r22,r2
  a06dfc:	0a0bc340 	call	a0bc34 <__fixdfsi>
  a06e00:	1009883a 	mov	r4,r2
  a06e04:	1027883a 	mov	r19,r2
  a06e08:	0a0bb3c0 	call	a0bb3c <__floatsidf>
  a06e0c:	a80b883a 	mov	r5,r21
  a06e10:	a009883a 	mov	r4,r20
  a06e14:	180f883a 	mov	r7,r3
  a06e18:	100d883a 	mov	r6,r2
  a06e1c:	0a0282c0 	call	a0282c <__subdf3>
  a06e20:	180b883a 	mov	r5,r3
  a06e24:	d8c00517 	ldw	r3,20(sp)
  a06e28:	9cc00c04 	addi	r19,r19,48
  a06e2c:	1009883a 	mov	r4,r2
  a06e30:	1cc00005 	stb	r19,0(r3)
  a06e34:	2021883a 	mov	r16,r4
  a06e38:	d9000317 	ldw	r4,12(sp)
  a06e3c:	00800044 	movi	r2,1
  a06e40:	2823883a 	mov	r17,r5
  a06e44:	20802226 	beq	r4,r2,a06ed0 <_dtoa_r+0x13fc>
  a06e48:	1029883a 	mov	r20,r2
  a06e4c:	0005883a 	mov	r2,zero
  a06e50:	00d00934 	movhi	r3,16420
  a06e54:	180f883a 	mov	r7,r3
  a06e58:	100d883a 	mov	r6,r2
  a06e5c:	880b883a 	mov	r5,r17
  a06e60:	8009883a 	mov	r4,r16
  a06e64:	0a0b5580 	call	a0b558 <__muldf3>
  a06e68:	180b883a 	mov	r5,r3
  a06e6c:	1009883a 	mov	r4,r2
  a06e70:	1823883a 	mov	r17,r3
  a06e74:	1021883a 	mov	r16,r2
  a06e78:	0a0bc340 	call	a0bc34 <__fixdfsi>
  a06e7c:	1009883a 	mov	r4,r2
  a06e80:	102b883a 	mov	r21,r2
  a06e84:	0a0bb3c0 	call	a0bb3c <__floatsidf>
  a06e88:	880b883a 	mov	r5,r17
  a06e8c:	8009883a 	mov	r4,r16
  a06e90:	180f883a 	mov	r7,r3
  a06e94:	100d883a 	mov	r6,r2
  a06e98:	0a0282c0 	call	a0282c <__subdf3>
  a06e9c:	180b883a 	mov	r5,r3
  a06ea0:	d8c00517 	ldw	r3,20(sp)
  a06ea4:	1009883a 	mov	r4,r2
  a06ea8:	ad400c04 	addi	r21,r21,48
  a06eac:	1d05883a 	add	r2,r3,r20
  a06eb0:	15400005 	stb	r21,0(r2)
  a06eb4:	2021883a 	mov	r16,r4
  a06eb8:	d9000317 	ldw	r4,12(sp)
  a06ebc:	a5000044 	addi	r20,r20,1
  a06ec0:	2823883a 	mov	r17,r5
  a06ec4:	a13fe11e 	bne	r20,r4,a06e4c <_dtoa_r+0x1378>
  a06ec8:	e505883a 	add	r2,fp,r20
  a06ecc:	173fffc4 	addi	fp,r2,-1
  a06ed0:	0025883a 	mov	r18,zero
  a06ed4:	04cff834 	movhi	r19,16352
  a06ed8:	b009883a 	mov	r4,r22
  a06edc:	b80b883a 	mov	r5,r23
  a06ee0:	900d883a 	mov	r6,r18
  a06ee4:	980f883a 	mov	r7,r19
  a06ee8:	0a028ac0 	call	a028ac <__adddf3>
  a06eec:	180b883a 	mov	r5,r3
  a06ef0:	1009883a 	mov	r4,r2
  a06ef4:	800d883a 	mov	r6,r16
  a06ef8:	880f883a 	mov	r7,r17
  a06efc:	0a0bab40 	call	a0bab4 <__ltdf2>
  a06f00:	103cab16 	blt	r2,zero,a061b0 <_dtoa_r+0x6dc>
  a06f04:	0009883a 	mov	r4,zero
  a06f08:	980b883a 	mov	r5,r19
  a06f0c:	b80f883a 	mov	r7,r23
  a06f10:	b00d883a 	mov	r6,r22
  a06f14:	0a0282c0 	call	a0282c <__subdf3>
  a06f18:	180b883a 	mov	r5,r3
  a06f1c:	880f883a 	mov	r7,r17
  a06f20:	1009883a 	mov	r4,r2
  a06f24:	800d883a 	mov	r6,r16
  a06f28:	0a0b9a40 	call	a0b9a4 <__gtdf2>
  a06f2c:	00bc470e 	bge	zero,r2,a0604c <_dtoa_r+0x578>
  a06f30:	00c00c04 	movi	r3,48
  a06f34:	e73fffc4 	addi	fp,fp,-1
  a06f38:	e0800007 	ldb	r2,0(fp)
  a06f3c:	10fffd26 	beq	r2,r3,a06f34 <_dtoa_r+0x1460>
  a06f40:	d9800417 	ldw	r6,16(sp)
  a06f44:	e7000044 	addi	fp,fp,1
  a06f48:	d9800d15 	stw	r6,52(sp)
  a06f4c:	003cab06 	br	a061fc <_dtoa_r+0x728>
  a06f50:	d8c00f17 	ldw	r3,60(sp)
  a06f54:	d9001117 	ldw	r4,68(sp)
  a06f58:	20e1c83a 	sub	r16,r4,r3
  a06f5c:	0007883a 	mov	r3,zero
  a06f60:	003d9b06 	br	a065d0 <_dtoa_r+0xafc>
  a06f64:	00800e44 	movi	r2,57
  a06f68:	b0800005 	stb	r2,0(r22)
  a06f6c:	b5800044 	addi	r22,r22,1
  a06f70:	003dc106 	br	a06678 <_dtoa_r+0xba4>
  a06f74:	05800084 	movi	r22,2
  a06f78:	003bf706 	br	a05f58 <_dtoa_r+0x484>
  a06f7c:	d9000f17 	ldw	r4,60(sp)
  a06f80:	013c000e 	bge	zero,r4,a05f84 <_dtoa_r+0x4b0>
  a06f84:	d9800e17 	ldw	r6,56(sp)
  a06f88:	01bc300e 	bge	zero,r6,a0604c <_dtoa_r+0x578>
  a06f8c:	0005883a 	mov	r2,zero
  a06f90:	00d00934 	movhi	r3,16420
  a06f94:	a80b883a 	mov	r5,r21
  a06f98:	180f883a 	mov	r7,r3
  a06f9c:	a009883a 	mov	r4,r20
  a06fa0:	100d883a 	mov	r6,r2
  a06fa4:	0a0b5580 	call	a0b558 <__muldf3>
  a06fa8:	b1000044 	addi	r4,r22,1
  a06fac:	1021883a 	mov	r16,r2
  a06fb0:	1823883a 	mov	r17,r3
  a06fb4:	0a0bb3c0 	call	a0bb3c <__floatsidf>
  a06fb8:	880b883a 	mov	r5,r17
  a06fbc:	8009883a 	mov	r4,r16
  a06fc0:	180f883a 	mov	r7,r3
  a06fc4:	100d883a 	mov	r6,r2
  a06fc8:	0a0b5580 	call	a0b558 <__muldf3>
  a06fcc:	0011883a 	mov	r8,zero
  a06fd0:	02500734 	movhi	r9,16412
  a06fd4:	180b883a 	mov	r5,r3
  a06fd8:	480f883a 	mov	r7,r9
  a06fdc:	1009883a 	mov	r4,r2
  a06fe0:	400d883a 	mov	r6,r8
  a06fe4:	0a028ac0 	call	a028ac <__adddf3>
  a06fe8:	102d883a 	mov	r22,r2
  a06fec:	00bf3034 	movhi	r2,64704
  a06ff0:	10ef883a 	add	r23,r2,r3
  a06ff4:	d8800d17 	ldw	r2,52(sp)
  a06ff8:	d8c00e17 	ldw	r3,56(sp)
  a06ffc:	8029883a 	mov	r20,r16
  a07000:	10bfffc4 	addi	r2,r2,-1
  a07004:	882b883a 	mov	r21,r17
  a07008:	d8800415 	stw	r2,16(sp)
  a0700c:	d8c00315 	stw	r3,12(sp)
  a07010:	003e8306 	br	a06a20 <_dtoa_r+0xf4c>
  a07014:	d8800117 	ldw	r2,4(sp)
  a07018:	dc001117 	ldw	r16,68(sp)
  a0701c:	dc801017 	ldw	r18,64(sp)
  a07020:	00c00d84 	movi	r3,54
  a07024:	1887c83a 	sub	r3,r3,r2
  a07028:	003d6906 	br	a065d0 <_dtoa_r+0xafc>
  a0702c:	01800044 	movi	r6,1
  a07030:	3021883a 	mov	r16,r6
  a07034:	d9800f15 	stw	r6,60(sp)
  a07038:	d9802615 	stw	r6,152(sp)
  a0703c:	d9800e15 	stw	r6,56(sp)
  a07040:	003b9306 	br	a05e90 <_dtoa_r+0x3bc>
  a07044:	b021883a 	mov	r16,r22
  a07048:	dd800f15 	stw	r22,60(sp)
  a0704c:	003b9006 	br	a05e90 <_dtoa_r+0x3bc>
  a07050:	103e221e 	bne	r2,zero,a068dc <_dtoa_r+0xe08>
  a07054:	b880004c 	andi	r2,r23,1
  a07058:	1005003a 	cmpeq	r2,r2,zero
  a0705c:	103e1f1e 	bne	r2,zero,a068dc <_dtoa_r+0xe08>
  a07060:	003e1b06 	br	a068d0 <_dtoa_r+0xdfc>
  a07064:	d9001617 	ldw	r4,88(sp)
  a07068:	980b883a 	mov	r5,r19
  a0706c:	01800284 	movi	r6,10
  a07070:	000f883a 	mov	r7,zero
  a07074:	0a0991c0 	call	a0991c <__multadd>
  a07078:	d8c00e17 	ldw	r3,56(sp)
  a0707c:	1027883a 	mov	r19,r2
  a07080:	d8c00f15 	stw	r3,60(sp)
  a07084:	003cd306 	br	a063d4 <_dtoa_r+0x900>

00a07088 <_fflush_r>:
  a07088:	defffb04 	addi	sp,sp,-20
  a0708c:	dcc00315 	stw	r19,12(sp)
  a07090:	dc800215 	stw	r18,8(sp)
  a07094:	dfc00415 	stw	ra,16(sp)
  a07098:	dc400115 	stw	r17,4(sp)
  a0709c:	dc000015 	stw	r16,0(sp)
  a070a0:	2027883a 	mov	r19,r4
  a070a4:	2825883a 	mov	r18,r5
  a070a8:	20000226 	beq	r4,zero,a070b4 <_fflush_r+0x2c>
  a070ac:	20800e17 	ldw	r2,56(r4)
  a070b0:	10005626 	beq	r2,zero,a0720c <_fflush_r+0x184>
  a070b4:	9100030b 	ldhu	r4,12(r18)
  a070b8:	20ffffcc 	andi	r3,r4,65535
  a070bc:	18e0001c 	xori	r3,r3,32768
  a070c0:	18e00004 	addi	r3,r3,-32768
  a070c4:	1880020c 	andi	r2,r3,8
  a070c8:	1000261e 	bne	r2,zero,a07164 <_fflush_r+0xdc>
  a070cc:	90c00117 	ldw	r3,4(r18)
  a070d0:	20820014 	ori	r2,r4,2048
  a070d4:	9080030d 	sth	r2,12(r18)
  a070d8:	1009883a 	mov	r4,r2
  a070dc:	00c0400e 	bge	zero,r3,a071e0 <_fflush_r+0x158>
  a070e0:	92000a17 	ldw	r8,40(r18)
  a070e4:	40004026 	beq	r8,zero,a071e8 <_fflush_r+0x160>
  a070e8:	2084000c 	andi	r2,r4,4096
  a070ec:	10005326 	beq	r2,zero,a0723c <_fflush_r+0x1b4>
  a070f0:	94001417 	ldw	r16,80(r18)
  a070f4:	9080030b 	ldhu	r2,12(r18)
  a070f8:	1080010c 	andi	r2,r2,4
  a070fc:	1000481e 	bne	r2,zero,a07220 <_fflush_r+0x198>
  a07100:	91400717 	ldw	r5,28(r18)
  a07104:	9809883a 	mov	r4,r19
  a07108:	800d883a 	mov	r6,r16
  a0710c:	000f883a 	mov	r7,zero
  a07110:	403ee83a 	callr	r8
  a07114:	8080261e 	bne	r16,r2,a071b0 <_fflush_r+0x128>
  a07118:	9080030b 	ldhu	r2,12(r18)
  a0711c:	91000417 	ldw	r4,16(r18)
  a07120:	90000115 	stw	zero,4(r18)
  a07124:	10bdffcc 	andi	r2,r2,63487
  a07128:	10ffffcc 	andi	r3,r2,65535
  a0712c:	18c4000c 	andi	r3,r3,4096
  a07130:	9080030d 	sth	r2,12(r18)
  a07134:	91000015 	stw	r4,0(r18)
  a07138:	18002b26 	beq	r3,zero,a071e8 <_fflush_r+0x160>
  a0713c:	0007883a 	mov	r3,zero
  a07140:	1805883a 	mov	r2,r3
  a07144:	94001415 	stw	r16,80(r18)
  a07148:	dfc00417 	ldw	ra,16(sp)
  a0714c:	dcc00317 	ldw	r19,12(sp)
  a07150:	dc800217 	ldw	r18,8(sp)
  a07154:	dc400117 	ldw	r17,4(sp)
  a07158:	dc000017 	ldw	r16,0(sp)
  a0715c:	dec00504 	addi	sp,sp,20
  a07160:	f800283a 	ret
  a07164:	94400417 	ldw	r17,16(r18)
  a07168:	88001f26 	beq	r17,zero,a071e8 <_fflush_r+0x160>
  a0716c:	90800017 	ldw	r2,0(r18)
  a07170:	18c000cc 	andi	r3,r3,3
  a07174:	94400015 	stw	r17,0(r18)
  a07178:	1461c83a 	sub	r16,r2,r17
  a0717c:	18002526 	beq	r3,zero,a07214 <_fflush_r+0x18c>
  a07180:	0005883a 	mov	r2,zero
  a07184:	90800215 	stw	r2,8(r18)
  a07188:	0400170e 	bge	zero,r16,a071e8 <_fflush_r+0x160>
  a0718c:	90c00917 	ldw	r3,36(r18)
  a07190:	91400717 	ldw	r5,28(r18)
  a07194:	880d883a 	mov	r6,r17
  a07198:	800f883a 	mov	r7,r16
  a0719c:	9809883a 	mov	r4,r19
  a071a0:	183ee83a 	callr	r3
  a071a4:	88a3883a 	add	r17,r17,r2
  a071a8:	80a1c83a 	sub	r16,r16,r2
  a071ac:	00bff616 	blt	zero,r2,a07188 <_fflush_r+0x100>
  a071b0:	9080030b 	ldhu	r2,12(r18)
  a071b4:	00ffffc4 	movi	r3,-1
  a071b8:	10801014 	ori	r2,r2,64
  a071bc:	9080030d 	sth	r2,12(r18)
  a071c0:	1805883a 	mov	r2,r3
  a071c4:	dfc00417 	ldw	ra,16(sp)
  a071c8:	dcc00317 	ldw	r19,12(sp)
  a071cc:	dc800217 	ldw	r18,8(sp)
  a071d0:	dc400117 	ldw	r17,4(sp)
  a071d4:	dc000017 	ldw	r16,0(sp)
  a071d8:	dec00504 	addi	sp,sp,20
  a071dc:	f800283a 	ret
  a071e0:	90800f17 	ldw	r2,60(r18)
  a071e4:	00bfbe16 	blt	zero,r2,a070e0 <_fflush_r+0x58>
  a071e8:	0007883a 	mov	r3,zero
  a071ec:	1805883a 	mov	r2,r3
  a071f0:	dfc00417 	ldw	ra,16(sp)
  a071f4:	dcc00317 	ldw	r19,12(sp)
  a071f8:	dc800217 	ldw	r18,8(sp)
  a071fc:	dc400117 	ldw	r17,4(sp)
  a07200:	dc000017 	ldw	r16,0(sp)
  a07204:	dec00504 	addi	sp,sp,20
  a07208:	f800283a 	ret
  a0720c:	0a073200 	call	a07320 <__sinit>
  a07210:	003fa806 	br	a070b4 <_fflush_r+0x2c>
  a07214:	90800517 	ldw	r2,20(r18)
  a07218:	90800215 	stw	r2,8(r18)
  a0721c:	003fda06 	br	a07188 <_fflush_r+0x100>
  a07220:	90800117 	ldw	r2,4(r18)
  a07224:	90c00c17 	ldw	r3,48(r18)
  a07228:	80a1c83a 	sub	r16,r16,r2
  a0722c:	183fb426 	beq	r3,zero,a07100 <_fflush_r+0x78>
  a07230:	90800f17 	ldw	r2,60(r18)
  a07234:	80a1c83a 	sub	r16,r16,r2
  a07238:	003fb106 	br	a07100 <_fflush_r+0x78>
  a0723c:	91400717 	ldw	r5,28(r18)
  a07240:	9809883a 	mov	r4,r19
  a07244:	000d883a 	mov	r6,zero
  a07248:	01c00044 	movi	r7,1
  a0724c:	403ee83a 	callr	r8
  a07250:	1021883a 	mov	r16,r2
  a07254:	00bfffc4 	movi	r2,-1
  a07258:	80800226 	beq	r16,r2,a07264 <_fflush_r+0x1dc>
  a0725c:	92000a17 	ldw	r8,40(r18)
  a07260:	003fa406 	br	a070f4 <_fflush_r+0x6c>
  a07264:	98c00017 	ldw	r3,0(r19)
  a07268:	00800744 	movi	r2,29
  a0726c:	18bfde26 	beq	r3,r2,a071e8 <_fflush_r+0x160>
  a07270:	9080030b 	ldhu	r2,12(r18)
  a07274:	8007883a 	mov	r3,r16
  a07278:	10801014 	ori	r2,r2,64
  a0727c:	9080030d 	sth	r2,12(r18)
  a07280:	003fcf06 	br	a071c0 <_fflush_r+0x138>

00a07284 <fflush>:
  a07284:	01402834 	movhi	r5,160
  a07288:	295c2204 	addi	r5,r5,28808
  a0728c:	2007883a 	mov	r3,r4
  a07290:	20000526 	beq	r4,zero,a072a8 <fflush+0x24>
  a07294:	00802874 	movhi	r2,161
  a07298:	108aec04 	addi	r2,r2,11184
  a0729c:	11000017 	ldw	r4,0(r2)
  a072a0:	180b883a 	mov	r5,r3
  a072a4:	0a070881 	jmpi	a07088 <_fflush_r>
  a072a8:	00802874 	movhi	r2,161
  a072ac:	108aed04 	addi	r2,r2,11188
  a072b0:	11000017 	ldw	r4,0(r2)
  a072b4:	0a07e541 	jmpi	a07e54 <_fwalk_reent>

00a072b8 <std>:
  a072b8:	00802874 	movhi	r2,161
  a072bc:	10a8cc04 	addi	r2,r2,-23760
  a072c0:	20800b15 	stw	r2,44(r4)
  a072c4:	00802874 	movhi	r2,161
  a072c8:	10a90704 	addi	r2,r2,-23524
  a072cc:	20800815 	stw	r2,32(r4)
  a072d0:	00c02874 	movhi	r3,161
  a072d4:	18e8e804 	addi	r3,r3,-23648
  a072d8:	00802874 	movhi	r2,161
  a072dc:	10a8ce04 	addi	r2,r2,-23752
  a072e0:	2140030d 	sth	r5,12(r4)
  a072e4:	2180038d 	sth	r6,14(r4)
  a072e8:	20c00915 	stw	r3,36(r4)
  a072ec:	20800a15 	stw	r2,40(r4)
  a072f0:	20000015 	stw	zero,0(r4)
  a072f4:	20000115 	stw	zero,4(r4)
  a072f8:	20000215 	stw	zero,8(r4)
  a072fc:	20000415 	stw	zero,16(r4)
  a07300:	20000515 	stw	zero,20(r4)
  a07304:	20000615 	stw	zero,24(r4)
  a07308:	21000715 	stw	r4,28(r4)
  a0730c:	f800283a 	ret

00a07310 <__sfp_lock_acquire>:
  a07310:	f800283a 	ret

00a07314 <__sfp_lock_release>:
  a07314:	f800283a 	ret

00a07318 <__sinit_lock_acquire>:
  a07318:	f800283a 	ret

00a0731c <__sinit_lock_release>:
  a0731c:	f800283a 	ret

00a07320 <__sinit>:
  a07320:	20800e17 	ldw	r2,56(r4)
  a07324:	defffd04 	addi	sp,sp,-12
  a07328:	dc400115 	stw	r17,4(sp)
  a0732c:	dc000015 	stw	r16,0(sp)
  a07330:	dfc00215 	stw	ra,8(sp)
  a07334:	04400044 	movi	r17,1
  a07338:	01400104 	movi	r5,4
  a0733c:	000d883a 	mov	r6,zero
  a07340:	2021883a 	mov	r16,r4
  a07344:	2200bb04 	addi	r8,r4,748
  a07348:	200f883a 	mov	r7,r4
  a0734c:	10000526 	beq	r2,zero,a07364 <__sinit+0x44>
  a07350:	dfc00217 	ldw	ra,8(sp)
  a07354:	dc400117 	ldw	r17,4(sp)
  a07358:	dc000017 	ldw	r16,0(sp)
  a0735c:	dec00304 	addi	sp,sp,12
  a07360:	f800283a 	ret
  a07364:	21000117 	ldw	r4,4(r4)
  a07368:	00802834 	movhi	r2,160
  a0736c:	109d0104 	addi	r2,r2,29700
  a07370:	00c000c4 	movi	r3,3
  a07374:	80800f15 	stw	r2,60(r16)
  a07378:	80c0b915 	stw	r3,740(r16)
  a0737c:	8200ba15 	stw	r8,744(r16)
  a07380:	84400e15 	stw	r17,56(r16)
  a07384:	8000b815 	stw	zero,736(r16)
  a07388:	0a072b80 	call	a072b8 <std>
  a0738c:	81000217 	ldw	r4,8(r16)
  a07390:	880d883a 	mov	r6,r17
  a07394:	800f883a 	mov	r7,r16
  a07398:	01400284 	movi	r5,10
  a0739c:	0a072b80 	call	a072b8 <std>
  a073a0:	81000317 	ldw	r4,12(r16)
  a073a4:	800f883a 	mov	r7,r16
  a073a8:	01400484 	movi	r5,18
  a073ac:	01800084 	movi	r6,2
  a073b0:	dfc00217 	ldw	ra,8(sp)
  a073b4:	dc400117 	ldw	r17,4(sp)
  a073b8:	dc000017 	ldw	r16,0(sp)
  a073bc:	dec00304 	addi	sp,sp,12
  a073c0:	0a072b81 	jmpi	a072b8 <std>

00a073c4 <__fp_lock>:
  a073c4:	0005883a 	mov	r2,zero
  a073c8:	f800283a 	ret

00a073cc <__fp_unlock>:
  a073cc:	0005883a 	mov	r2,zero
  a073d0:	f800283a 	ret

00a073d4 <__fp_unlock_all>:
  a073d4:	00802874 	movhi	r2,161
  a073d8:	108aec04 	addi	r2,r2,11184
  a073dc:	11000017 	ldw	r4,0(r2)
  a073e0:	01402834 	movhi	r5,160
  a073e4:	295cf304 	addi	r5,r5,29644
  a073e8:	0a07f1c1 	jmpi	a07f1c <_fwalk>

00a073ec <__fp_lock_all>:
  a073ec:	00802874 	movhi	r2,161
  a073f0:	108aec04 	addi	r2,r2,11184
  a073f4:	11000017 	ldw	r4,0(r2)
  a073f8:	01402834 	movhi	r5,160
  a073fc:	295cf104 	addi	r5,r5,29636
  a07400:	0a07f1c1 	jmpi	a07f1c <_fwalk>

00a07404 <_cleanup_r>:
  a07404:	01402874 	movhi	r5,161
  a07408:	2969f904 	addi	r5,r5,-22556
  a0740c:	0a07f1c1 	jmpi	a07f1c <_fwalk>

00a07410 <_cleanup>:
  a07410:	00802874 	movhi	r2,161
  a07414:	108aed04 	addi	r2,r2,11188
  a07418:	11000017 	ldw	r4,0(r2)
  a0741c:	0a074041 	jmpi	a07404 <_cleanup_r>

00a07420 <__sfmoreglue>:
  a07420:	defffc04 	addi	sp,sp,-16
  a07424:	dc400115 	stw	r17,4(sp)
  a07428:	2c401724 	muli	r17,r5,92
  a0742c:	dc800215 	stw	r18,8(sp)
  a07430:	2825883a 	mov	r18,r5
  a07434:	89400304 	addi	r5,r17,12
  a07438:	dc000015 	stw	r16,0(sp)
  a0743c:	dfc00315 	stw	ra,12(sp)
  a07440:	0a0822c0 	call	a0822c <_malloc_r>
  a07444:	0021883a 	mov	r16,zero
  a07448:	880d883a 	mov	r6,r17
  a0744c:	000b883a 	mov	r5,zero
  a07450:	10000626 	beq	r2,zero,a0746c <__sfmoreglue+0x4c>
  a07454:	11000304 	addi	r4,r2,12
  a07458:	14800115 	stw	r18,4(r2)
  a0745c:	10000015 	stw	zero,0(r2)
  a07460:	11000215 	stw	r4,8(r2)
  a07464:	1021883a 	mov	r16,r2
  a07468:	0a08bd00 	call	a08bd0 <memset>
  a0746c:	8005883a 	mov	r2,r16
  a07470:	dfc00317 	ldw	ra,12(sp)
  a07474:	dc800217 	ldw	r18,8(sp)
  a07478:	dc400117 	ldw	r17,4(sp)
  a0747c:	dc000017 	ldw	r16,0(sp)
  a07480:	dec00404 	addi	sp,sp,16
  a07484:	f800283a 	ret

00a07488 <__sfp>:
  a07488:	defffd04 	addi	sp,sp,-12
  a0748c:	00802874 	movhi	r2,161
  a07490:	108aed04 	addi	r2,r2,11188
  a07494:	dc000015 	stw	r16,0(sp)
  a07498:	14000017 	ldw	r16,0(r2)
  a0749c:	dc400115 	stw	r17,4(sp)
  a074a0:	dfc00215 	stw	ra,8(sp)
  a074a4:	80800e17 	ldw	r2,56(r16)
  a074a8:	2023883a 	mov	r17,r4
  a074ac:	10002626 	beq	r2,zero,a07548 <__sfp+0xc0>
  a074b0:	8400b804 	addi	r16,r16,736
  a074b4:	80800117 	ldw	r2,4(r16)
  a074b8:	81000217 	ldw	r4,8(r16)
  a074bc:	10ffffc4 	addi	r3,r2,-1
  a074c0:	18000916 	blt	r3,zero,a074e8 <__sfp+0x60>
  a074c4:	2080030f 	ldh	r2,12(r4)
  a074c8:	10000b26 	beq	r2,zero,a074f8 <__sfp+0x70>
  a074cc:	017fffc4 	movi	r5,-1
  a074d0:	00000206 	br	a074dc <__sfp+0x54>
  a074d4:	2080030f 	ldh	r2,12(r4)
  a074d8:	10000726 	beq	r2,zero,a074f8 <__sfp+0x70>
  a074dc:	18ffffc4 	addi	r3,r3,-1
  a074e0:	21001704 	addi	r4,r4,92
  a074e4:	197ffb1e 	bne	r3,r5,a074d4 <__sfp+0x4c>
  a074e8:	80800017 	ldw	r2,0(r16)
  a074ec:	10001926 	beq	r2,zero,a07554 <__sfp+0xcc>
  a074f0:	1021883a 	mov	r16,r2
  a074f4:	003fef06 	br	a074b4 <__sfp+0x2c>
  a074f8:	00bfffc4 	movi	r2,-1
  a074fc:	00c00044 	movi	r3,1
  a07500:	2080038d 	sth	r2,14(r4)
  a07504:	20c0030d 	sth	r3,12(r4)
  a07508:	20000015 	stw	zero,0(r4)
  a0750c:	20000215 	stw	zero,8(r4)
  a07510:	20000115 	stw	zero,4(r4)
  a07514:	20000415 	stw	zero,16(r4)
  a07518:	20000515 	stw	zero,20(r4)
  a0751c:	20000615 	stw	zero,24(r4)
  a07520:	20000c15 	stw	zero,48(r4)
  a07524:	20000d15 	stw	zero,52(r4)
  a07528:	20001115 	stw	zero,68(r4)
  a0752c:	20001215 	stw	zero,72(r4)
  a07530:	2005883a 	mov	r2,r4
  a07534:	dfc00217 	ldw	ra,8(sp)
  a07538:	dc400117 	ldw	r17,4(sp)
  a0753c:	dc000017 	ldw	r16,0(sp)
  a07540:	dec00304 	addi	sp,sp,12
  a07544:	f800283a 	ret
  a07548:	8009883a 	mov	r4,r16
  a0754c:	0a073200 	call	a07320 <__sinit>
  a07550:	003fd706 	br	a074b0 <__sfp+0x28>
  a07554:	8809883a 	mov	r4,r17
  a07558:	01400104 	movi	r5,4
  a0755c:	0a074200 	call	a07420 <__sfmoreglue>
  a07560:	80800015 	stw	r2,0(r16)
  a07564:	103fe21e 	bne	r2,zero,a074f0 <__sfp+0x68>
  a07568:	00800304 	movi	r2,12
  a0756c:	0009883a 	mov	r4,zero
  a07570:	88800015 	stw	r2,0(r17)
  a07574:	003fee06 	br	a07530 <__sfp+0xa8>

00a07578 <_malloc_trim_r>:
  a07578:	defffb04 	addi	sp,sp,-20
  a0757c:	dcc00315 	stw	r19,12(sp)
  a07580:	04c02874 	movhi	r19,161
  a07584:	9cc50e04 	addi	r19,r19,5176
  a07588:	dc800215 	stw	r18,8(sp)
  a0758c:	dc400115 	stw	r17,4(sp)
  a07590:	dc000015 	stw	r16,0(sp)
  a07594:	2823883a 	mov	r17,r5
  a07598:	2025883a 	mov	r18,r4
  a0759c:	dfc00415 	stw	ra,16(sp)
  a075a0:	0a0c6700 	call	a0c670 <__malloc_lock>
  a075a4:	98800217 	ldw	r2,8(r19)
  a075a8:	9009883a 	mov	r4,r18
  a075ac:	000b883a 	mov	r5,zero
  a075b0:	10c00117 	ldw	r3,4(r2)
  a075b4:	00bfff04 	movi	r2,-4
  a075b8:	18a0703a 	and	r16,r3,r2
  a075bc:	8463c83a 	sub	r17,r16,r17
  a075c0:	8c43fbc4 	addi	r17,r17,4079
  a075c4:	8822d33a 	srli	r17,r17,12
  a075c8:	0083ffc4 	movi	r2,4095
  a075cc:	8c7fffc4 	addi	r17,r17,-1
  a075d0:	8822933a 	slli	r17,r17,12
  a075d4:	1440060e 	bge	r2,r17,a075f0 <_malloc_trim_r+0x78>
  a075d8:	0a0a2c00 	call	a0a2c0 <_sbrk_r>
  a075dc:	98c00217 	ldw	r3,8(r19)
  a075e0:	9009883a 	mov	r4,r18
  a075e4:	044bc83a 	sub	r5,zero,r17
  a075e8:	80c7883a 	add	r3,r16,r3
  a075ec:	10c00926 	beq	r2,r3,a07614 <_malloc_trim_r+0x9c>
  a075f0:	0a0c6900 	call	a0c690 <__malloc_unlock>
  a075f4:	0005883a 	mov	r2,zero
  a075f8:	dfc00417 	ldw	ra,16(sp)
  a075fc:	dcc00317 	ldw	r19,12(sp)
  a07600:	dc800217 	ldw	r18,8(sp)
  a07604:	dc400117 	ldw	r17,4(sp)
  a07608:	dc000017 	ldw	r16,0(sp)
  a0760c:	dec00504 	addi	sp,sp,20
  a07610:	f800283a 	ret
  a07614:	9009883a 	mov	r4,r18
  a07618:	0a0a2c00 	call	a0a2c0 <_sbrk_r>
  a0761c:	844dc83a 	sub	r6,r16,r17
  a07620:	00ffffc4 	movi	r3,-1
  a07624:	9009883a 	mov	r4,r18
  a07628:	000b883a 	mov	r5,zero
  a0762c:	01c02874 	movhi	r7,161
  a07630:	39d20304 	addi	r7,r7,18444
  a07634:	31800054 	ori	r6,r6,1
  a07638:	10c00926 	beq	r2,r3,a07660 <_malloc_trim_r+0xe8>
  a0763c:	38800017 	ldw	r2,0(r7)
  a07640:	98c00217 	ldw	r3,8(r19)
  a07644:	9009883a 	mov	r4,r18
  a07648:	1445c83a 	sub	r2,r2,r17
  a0764c:	38800015 	stw	r2,0(r7)
  a07650:	19800115 	stw	r6,4(r3)
  a07654:	0a0c6900 	call	a0c690 <__malloc_unlock>
  a07658:	00800044 	movi	r2,1
  a0765c:	003fe606 	br	a075f8 <_malloc_trim_r+0x80>
  a07660:	0a0a2c00 	call	a0a2c0 <_sbrk_r>
  a07664:	99800217 	ldw	r6,8(r19)
  a07668:	100f883a 	mov	r7,r2
  a0766c:	9009883a 	mov	r4,r18
  a07670:	1187c83a 	sub	r3,r2,r6
  a07674:	008003c4 	movi	r2,15
  a07678:	19400054 	ori	r5,r3,1
  a0767c:	10ffdc0e 	bge	r2,r3,a075f0 <_malloc_trim_r+0x78>
  a07680:	00802874 	movhi	r2,161
  a07684:	108af104 	addi	r2,r2,11204
  a07688:	10c00017 	ldw	r3,0(r2)
  a0768c:	00802874 	movhi	r2,161
  a07690:	10920304 	addi	r2,r2,18444
  a07694:	31400115 	stw	r5,4(r6)
  a07698:	38c7c83a 	sub	r3,r7,r3
  a0769c:	10c00015 	stw	r3,0(r2)
  a076a0:	003fd306 	br	a075f0 <_malloc_trim_r+0x78>

00a076a4 <_free_r>:
  a076a4:	defffd04 	addi	sp,sp,-12
  a076a8:	dc400115 	stw	r17,4(sp)
  a076ac:	dc000015 	stw	r16,0(sp)
  a076b0:	dfc00215 	stw	ra,8(sp)
  a076b4:	2821883a 	mov	r16,r5
  a076b8:	2023883a 	mov	r17,r4
  a076bc:	28005a26 	beq	r5,zero,a07828 <_free_r+0x184>
  a076c0:	0a0c6700 	call	a0c670 <__malloc_lock>
  a076c4:	823ffe04 	addi	r8,r16,-8
  a076c8:	41400117 	ldw	r5,4(r8)
  a076cc:	00bfff84 	movi	r2,-2
  a076d0:	02802874 	movhi	r10,161
  a076d4:	52850e04 	addi	r10,r10,5176
  a076d8:	288e703a 	and	r7,r5,r2
  a076dc:	41cd883a 	add	r6,r8,r7
  a076e0:	30c00117 	ldw	r3,4(r6)
  a076e4:	51000217 	ldw	r4,8(r10)
  a076e8:	00bfff04 	movi	r2,-4
  a076ec:	1892703a 	and	r9,r3,r2
  a076f0:	5017883a 	mov	r11,r10
  a076f4:	31006726 	beq	r6,r4,a07894 <_free_r+0x1f0>
  a076f8:	2880004c 	andi	r2,r5,1
  a076fc:	1005003a 	cmpeq	r2,r2,zero
  a07700:	32400115 	stw	r9,4(r6)
  a07704:	10001a1e 	bne	r2,zero,a07770 <_free_r+0xcc>
  a07708:	000b883a 	mov	r5,zero
  a0770c:	3247883a 	add	r3,r6,r9
  a07710:	18800117 	ldw	r2,4(r3)
  a07714:	1080004c 	andi	r2,r2,1
  a07718:	1000231e 	bne	r2,zero,a077a8 <_free_r+0x104>
  a0771c:	280ac03a 	cmpne	r5,r5,zero
  a07720:	3a4f883a 	add	r7,r7,r9
  a07724:	2800451e 	bne	r5,zero,a0783c <_free_r+0x198>
  a07728:	31000217 	ldw	r4,8(r6)
  a0772c:	00802874 	movhi	r2,161
  a07730:	10851004 	addi	r2,r2,5184
  a07734:	20807b26 	beq	r4,r2,a07924 <_free_r+0x280>
  a07738:	30800317 	ldw	r2,12(r6)
  a0773c:	3a07883a 	add	r3,r7,r8
  a07740:	19c00015 	stw	r7,0(r3)
  a07744:	11000215 	stw	r4,8(r2)
  a07748:	20800315 	stw	r2,12(r4)
  a0774c:	38800054 	ori	r2,r7,1
  a07750:	40800115 	stw	r2,4(r8)
  a07754:	28001a26 	beq	r5,zero,a077c0 <_free_r+0x11c>
  a07758:	8809883a 	mov	r4,r17
  a0775c:	dfc00217 	ldw	ra,8(sp)
  a07760:	dc400117 	ldw	r17,4(sp)
  a07764:	dc000017 	ldw	r16,0(sp)
  a07768:	dec00304 	addi	sp,sp,12
  a0776c:	0a0c6901 	jmpi	a0c690 <__malloc_unlock>
  a07770:	80bffe17 	ldw	r2,-8(r16)
  a07774:	50c00204 	addi	r3,r10,8
  a07778:	4091c83a 	sub	r8,r8,r2
  a0777c:	41000217 	ldw	r4,8(r8)
  a07780:	388f883a 	add	r7,r7,r2
  a07784:	20c06126 	beq	r4,r3,a0790c <_free_r+0x268>
  a07788:	40800317 	ldw	r2,12(r8)
  a0778c:	3247883a 	add	r3,r6,r9
  a07790:	000b883a 	mov	r5,zero
  a07794:	11000215 	stw	r4,8(r2)
  a07798:	20800315 	stw	r2,12(r4)
  a0779c:	18800117 	ldw	r2,4(r3)
  a077a0:	1080004c 	andi	r2,r2,1
  a077a4:	103fdd26 	beq	r2,zero,a0771c <_free_r+0x78>
  a077a8:	38800054 	ori	r2,r7,1
  a077ac:	3a07883a 	add	r3,r7,r8
  a077b0:	280ac03a 	cmpne	r5,r5,zero
  a077b4:	40800115 	stw	r2,4(r8)
  a077b8:	19c00015 	stw	r7,0(r3)
  a077bc:	283fe61e 	bne	r5,zero,a07758 <_free_r+0xb4>
  a077c0:	00807fc4 	movi	r2,511
  a077c4:	11c01f2e 	bgeu	r2,r7,a07844 <_free_r+0x1a0>
  a077c8:	3806d27a 	srli	r3,r7,9
  a077cc:	1800481e 	bne	r3,zero,a078f0 <_free_r+0x24c>
  a077d0:	3804d0fa 	srli	r2,r7,3
  a077d4:	100690fa 	slli	r3,r2,3
  a077d8:	1acd883a 	add	r6,r3,r11
  a077dc:	31400217 	ldw	r5,8(r6)
  a077e0:	31405926 	beq	r6,r5,a07948 <_free_r+0x2a4>
  a077e4:	28800117 	ldw	r2,4(r5)
  a077e8:	00ffff04 	movi	r3,-4
  a077ec:	10c4703a 	and	r2,r2,r3
  a077f0:	3880022e 	bgeu	r7,r2,a077fc <_free_r+0x158>
  a077f4:	29400217 	ldw	r5,8(r5)
  a077f8:	317ffa1e 	bne	r6,r5,a077e4 <_free_r+0x140>
  a077fc:	29800317 	ldw	r6,12(r5)
  a07800:	41800315 	stw	r6,12(r8)
  a07804:	41400215 	stw	r5,8(r8)
  a07808:	8809883a 	mov	r4,r17
  a0780c:	2a000315 	stw	r8,12(r5)
  a07810:	32000215 	stw	r8,8(r6)
  a07814:	dfc00217 	ldw	ra,8(sp)
  a07818:	dc400117 	ldw	r17,4(sp)
  a0781c:	dc000017 	ldw	r16,0(sp)
  a07820:	dec00304 	addi	sp,sp,12
  a07824:	0a0c6901 	jmpi	a0c690 <__malloc_unlock>
  a07828:	dfc00217 	ldw	ra,8(sp)
  a0782c:	dc400117 	ldw	r17,4(sp)
  a07830:	dc000017 	ldw	r16,0(sp)
  a07834:	dec00304 	addi	sp,sp,12
  a07838:	f800283a 	ret
  a0783c:	31000217 	ldw	r4,8(r6)
  a07840:	003fbd06 	br	a07738 <_free_r+0x94>
  a07844:	3806d0fa 	srli	r3,r7,3
  a07848:	00800044 	movi	r2,1
  a0784c:	51400117 	ldw	r5,4(r10)
  a07850:	180890fa 	slli	r4,r3,3
  a07854:	1807d0ba 	srai	r3,r3,2
  a07858:	22c9883a 	add	r4,r4,r11
  a0785c:	21800217 	ldw	r6,8(r4)
  a07860:	10c4983a 	sll	r2,r2,r3
  a07864:	41000315 	stw	r4,12(r8)
  a07868:	41800215 	stw	r6,8(r8)
  a0786c:	288ab03a 	or	r5,r5,r2
  a07870:	22000215 	stw	r8,8(r4)
  a07874:	8809883a 	mov	r4,r17
  a07878:	51400115 	stw	r5,4(r10)
  a0787c:	32000315 	stw	r8,12(r6)
  a07880:	dfc00217 	ldw	ra,8(sp)
  a07884:	dc400117 	ldw	r17,4(sp)
  a07888:	dc000017 	ldw	r16,0(sp)
  a0788c:	dec00304 	addi	sp,sp,12
  a07890:	0a0c6901 	jmpi	a0c690 <__malloc_unlock>
  a07894:	2880004c 	andi	r2,r5,1
  a07898:	3a4d883a 	add	r6,r7,r9
  a0789c:	1000071e 	bne	r2,zero,a078bc <_free_r+0x218>
  a078a0:	80bffe17 	ldw	r2,-8(r16)
  a078a4:	4091c83a 	sub	r8,r8,r2
  a078a8:	41000317 	ldw	r4,12(r8)
  a078ac:	40c00217 	ldw	r3,8(r8)
  a078b0:	308d883a 	add	r6,r6,r2
  a078b4:	20c00215 	stw	r3,8(r4)
  a078b8:	19000315 	stw	r4,12(r3)
  a078bc:	00802874 	movhi	r2,161
  a078c0:	108af004 	addi	r2,r2,11200
  a078c4:	11000017 	ldw	r4,0(r2)
  a078c8:	30c00054 	ori	r3,r6,1
  a078cc:	52000215 	stw	r8,8(r10)
  a078d0:	40c00115 	stw	r3,4(r8)
  a078d4:	313fa036 	bltu	r6,r4,a07758 <_free_r+0xb4>
  a078d8:	00802874 	movhi	r2,161
  a078dc:	1091f904 	addi	r2,r2,18404
  a078e0:	11400017 	ldw	r5,0(r2)
  a078e4:	8809883a 	mov	r4,r17
  a078e8:	0a075780 	call	a07578 <_malloc_trim_r>
  a078ec:	003f9a06 	br	a07758 <_free_r+0xb4>
  a078f0:	00800104 	movi	r2,4
  a078f4:	10c0072e 	bgeu	r2,r3,a07914 <_free_r+0x270>
  a078f8:	00800504 	movi	r2,20
  a078fc:	10c01936 	bltu	r2,r3,a07964 <_free_r+0x2c0>
  a07900:	188016c4 	addi	r2,r3,91
  a07904:	100690fa 	slli	r3,r2,3
  a07908:	003fb306 	br	a077d8 <_free_r+0x134>
  a0790c:	01400044 	movi	r5,1
  a07910:	003f7e06 	br	a0770c <_free_r+0x68>
  a07914:	3804d1ba 	srli	r2,r7,6
  a07918:	10800e04 	addi	r2,r2,56
  a0791c:	100690fa 	slli	r3,r2,3
  a07920:	003fad06 	br	a077d8 <_free_r+0x134>
  a07924:	22000315 	stw	r8,12(r4)
  a07928:	22000215 	stw	r8,8(r4)
  a0792c:	3a05883a 	add	r2,r7,r8
  a07930:	38c00054 	ori	r3,r7,1
  a07934:	11c00015 	stw	r7,0(r2)
  a07938:	41000215 	stw	r4,8(r8)
  a0793c:	40c00115 	stw	r3,4(r8)
  a07940:	41000315 	stw	r4,12(r8)
  a07944:	003f8406 	br	a07758 <_free_r+0xb4>
  a07948:	1005d0ba 	srai	r2,r2,2
  a0794c:	00c00044 	movi	r3,1
  a07950:	51000117 	ldw	r4,4(r10)
  a07954:	1886983a 	sll	r3,r3,r2
  a07958:	20c8b03a 	or	r4,r4,r3
  a0795c:	51000115 	stw	r4,4(r10)
  a07960:	003fa706 	br	a07800 <_free_r+0x15c>
  a07964:	00801504 	movi	r2,84
  a07968:	10c00436 	bltu	r2,r3,a0797c <_free_r+0x2d8>
  a0796c:	3804d33a 	srli	r2,r7,12
  a07970:	10801b84 	addi	r2,r2,110
  a07974:	100690fa 	slli	r3,r2,3
  a07978:	003f9706 	br	a077d8 <_free_r+0x134>
  a0797c:	00805504 	movi	r2,340
  a07980:	10c00436 	bltu	r2,r3,a07994 <_free_r+0x2f0>
  a07984:	3804d3fa 	srli	r2,r7,15
  a07988:	10801dc4 	addi	r2,r2,119
  a0798c:	100690fa 	slli	r3,r2,3
  a07990:	003f9106 	br	a077d8 <_free_r+0x134>
  a07994:	00815504 	movi	r2,1364
  a07998:	10c0032e 	bgeu	r2,r3,a079a8 <_free_r+0x304>
  a0799c:	00801f84 	movi	r2,126
  a079a0:	00c0fc04 	movi	r3,1008
  a079a4:	003f8c06 	br	a077d8 <_free_r+0x134>
  a079a8:	3804d4ba 	srli	r2,r7,18
  a079ac:	10801f04 	addi	r2,r2,124
  a079b0:	100690fa 	slli	r3,r2,3
  a079b4:	003f8806 	br	a077d8 <_free_r+0x134>

00a079b8 <__sfvwrite_r>:
  a079b8:	30800217 	ldw	r2,8(r6)
  a079bc:	defff504 	addi	sp,sp,-44
  a079c0:	df000915 	stw	fp,36(sp)
  a079c4:	dd800715 	stw	r22,28(sp)
  a079c8:	dc800315 	stw	r18,12(sp)
  a079cc:	dfc00a15 	stw	ra,40(sp)
  a079d0:	ddc00815 	stw	r23,32(sp)
  a079d4:	dd400615 	stw	r21,24(sp)
  a079d8:	dd000515 	stw	r20,20(sp)
  a079dc:	dcc00415 	stw	r19,16(sp)
  a079e0:	dc400215 	stw	r17,8(sp)
  a079e4:	dc000115 	stw	r16,4(sp)
  a079e8:	302d883a 	mov	r22,r6
  a079ec:	2039883a 	mov	fp,r4
  a079f0:	2825883a 	mov	r18,r5
  a079f4:	10001c26 	beq	r2,zero,a07a68 <__sfvwrite_r+0xb0>
  a079f8:	29c0030b 	ldhu	r7,12(r5)
  a079fc:	3880020c 	andi	r2,r7,8
  a07a00:	10002726 	beq	r2,zero,a07aa0 <__sfvwrite_r+0xe8>
  a07a04:	28800417 	ldw	r2,16(r5)
  a07a08:	10002526 	beq	r2,zero,a07aa0 <__sfvwrite_r+0xe8>
  a07a0c:	3880008c 	andi	r2,r7,2
  a07a10:	b5400017 	ldw	r21,0(r22)
  a07a14:	10002826 	beq	r2,zero,a07ab8 <__sfvwrite_r+0x100>
  a07a18:	0021883a 	mov	r16,zero
  a07a1c:	0023883a 	mov	r17,zero
  a07a20:	880d883a 	mov	r6,r17
  a07a24:	e009883a 	mov	r4,fp
  a07a28:	00810004 	movi	r2,1024
  a07a2c:	80006e26 	beq	r16,zero,a07be8 <__sfvwrite_r+0x230>
  a07a30:	800f883a 	mov	r7,r16
  a07a34:	91400717 	ldw	r5,28(r18)
  a07a38:	1400012e 	bgeu	r2,r16,a07a40 <__sfvwrite_r+0x88>
  a07a3c:	100f883a 	mov	r7,r2
  a07a40:	90c00917 	ldw	r3,36(r18)
  a07a44:	183ee83a 	callr	r3
  a07a48:	1007883a 	mov	r3,r2
  a07a4c:	80a1c83a 	sub	r16,r16,r2
  a07a50:	88a3883a 	add	r17,r17,r2
  a07a54:	00806d0e 	bge	zero,r2,a07c0c <__sfvwrite_r+0x254>
  a07a58:	b0800217 	ldw	r2,8(r22)
  a07a5c:	10c5c83a 	sub	r2,r2,r3
  a07a60:	b0800215 	stw	r2,8(r22)
  a07a64:	103fee1e 	bne	r2,zero,a07a20 <__sfvwrite_r+0x68>
  a07a68:	0009883a 	mov	r4,zero
  a07a6c:	2005883a 	mov	r2,r4
  a07a70:	dfc00a17 	ldw	ra,40(sp)
  a07a74:	df000917 	ldw	fp,36(sp)
  a07a78:	ddc00817 	ldw	r23,32(sp)
  a07a7c:	dd800717 	ldw	r22,28(sp)
  a07a80:	dd400617 	ldw	r21,24(sp)
  a07a84:	dd000517 	ldw	r20,20(sp)
  a07a88:	dcc00417 	ldw	r19,16(sp)
  a07a8c:	dc800317 	ldw	r18,12(sp)
  a07a90:	dc400217 	ldw	r17,8(sp)
  a07a94:	dc000117 	ldw	r16,4(sp)
  a07a98:	dec00b04 	addi	sp,sp,44
  a07a9c:	f800283a 	ret
  a07aa0:	0a057800 	call	a05780 <__swsetup_r>
  a07aa4:	1000e41e 	bne	r2,zero,a07e38 <__sfvwrite_r+0x480>
  a07aa8:	91c0030b 	ldhu	r7,12(r18)
  a07aac:	b5400017 	ldw	r21,0(r22)
  a07ab0:	3880008c 	andi	r2,r7,2
  a07ab4:	103fd81e 	bne	r2,zero,a07a18 <__sfvwrite_r+0x60>
  a07ab8:	3880004c 	andi	r2,r7,1
  a07abc:	1005003a 	cmpeq	r2,r2,zero
  a07ac0:	10005726 	beq	r2,zero,a07c20 <__sfvwrite_r+0x268>
  a07ac4:	0029883a 	mov	r20,zero
  a07ac8:	002f883a 	mov	r23,zero
  a07acc:	a0004226 	beq	r20,zero,a07bd8 <__sfvwrite_r+0x220>
  a07ad0:	3880800c 	andi	r2,r7,512
  a07ad4:	94000217 	ldw	r16,8(r18)
  a07ad8:	10008b26 	beq	r2,zero,a07d08 <__sfvwrite_r+0x350>
  a07adc:	800d883a 	mov	r6,r16
  a07ae0:	a400a536 	bltu	r20,r16,a07d78 <__sfvwrite_r+0x3c0>
  a07ae4:	3881200c 	andi	r2,r7,1152
  a07ae8:	10002726 	beq	r2,zero,a07b88 <__sfvwrite_r+0x1d0>
  a07aec:	90800517 	ldw	r2,20(r18)
  a07af0:	92000417 	ldw	r8,16(r18)
  a07af4:	91400017 	ldw	r5,0(r18)
  a07af8:	1087883a 	add	r3,r2,r2
  a07afc:	1887883a 	add	r3,r3,r2
  a07b00:	1808d7fa 	srli	r4,r3,31
  a07b04:	2a21c83a 	sub	r16,r5,r8
  a07b08:	80800044 	addi	r2,r16,1
  a07b0c:	20c9883a 	add	r4,r4,r3
  a07b10:	2027d07a 	srai	r19,r4,1
  a07b14:	a085883a 	add	r2,r20,r2
  a07b18:	980d883a 	mov	r6,r19
  a07b1c:	9880022e 	bgeu	r19,r2,a07b28 <__sfvwrite_r+0x170>
  a07b20:	1027883a 	mov	r19,r2
  a07b24:	100d883a 	mov	r6,r2
  a07b28:	3881000c 	andi	r2,r7,1024
  a07b2c:	1000b826 	beq	r2,zero,a07e10 <__sfvwrite_r+0x458>
  a07b30:	300b883a 	mov	r5,r6
  a07b34:	e009883a 	mov	r4,fp
  a07b38:	0a0822c0 	call	a0822c <_malloc_r>
  a07b3c:	10003126 	beq	r2,zero,a07c04 <__sfvwrite_r+0x24c>
  a07b40:	91400417 	ldw	r5,16(r18)
  a07b44:	1009883a 	mov	r4,r2
  a07b48:	800d883a 	mov	r6,r16
  a07b4c:	1023883a 	mov	r17,r2
  a07b50:	0a08a500 	call	a08a50 <memcpy>
  a07b54:	90c0030b 	ldhu	r3,12(r18)
  a07b58:	00beffc4 	movi	r2,-1025
  a07b5c:	1886703a 	and	r3,r3,r2
  a07b60:	18c02014 	ori	r3,r3,128
  a07b64:	90c0030d 	sth	r3,12(r18)
  a07b68:	9c07c83a 	sub	r3,r19,r16
  a07b6c:	8c05883a 	add	r2,r17,r16
  a07b70:	a00d883a 	mov	r6,r20
  a07b74:	a021883a 	mov	r16,r20
  a07b78:	90800015 	stw	r2,0(r18)
  a07b7c:	90c00215 	stw	r3,8(r18)
  a07b80:	94400415 	stw	r17,16(r18)
  a07b84:	94c00515 	stw	r19,20(r18)
  a07b88:	91000017 	ldw	r4,0(r18)
  a07b8c:	b80b883a 	mov	r5,r23
  a07b90:	a023883a 	mov	r17,r20
  a07b94:	0a08af00 	call	a08af0 <memmove>
  a07b98:	90c00217 	ldw	r3,8(r18)
  a07b9c:	90800017 	ldw	r2,0(r18)
  a07ba0:	a027883a 	mov	r19,r20
  a07ba4:	1c07c83a 	sub	r3,r3,r16
  a07ba8:	1405883a 	add	r2,r2,r16
  a07bac:	90c00215 	stw	r3,8(r18)
  a07bb0:	a021883a 	mov	r16,r20
  a07bb4:	90800015 	stw	r2,0(r18)
  a07bb8:	b0800217 	ldw	r2,8(r22)
  a07bbc:	1405c83a 	sub	r2,r2,r16
  a07bc0:	b0800215 	stw	r2,8(r22)
  a07bc4:	103fa826 	beq	r2,zero,a07a68 <__sfvwrite_r+0xb0>
  a07bc8:	a469c83a 	sub	r20,r20,r17
  a07bcc:	91c0030b 	ldhu	r7,12(r18)
  a07bd0:	bcef883a 	add	r23,r23,r19
  a07bd4:	a03fbe1e 	bne	r20,zero,a07ad0 <__sfvwrite_r+0x118>
  a07bd8:	adc00017 	ldw	r23,0(r21)
  a07bdc:	ad000117 	ldw	r20,4(r21)
  a07be0:	ad400204 	addi	r21,r21,8
  a07be4:	003fb906 	br	a07acc <__sfvwrite_r+0x114>
  a07be8:	ac400017 	ldw	r17,0(r21)
  a07bec:	ac000117 	ldw	r16,4(r21)
  a07bf0:	ad400204 	addi	r21,r21,8
  a07bf4:	003f8a06 	br	a07a20 <__sfvwrite_r+0x68>
  a07bf8:	91400417 	ldw	r5,16(r18)
  a07bfc:	e009883a 	mov	r4,fp
  a07c00:	0a076a40 	call	a076a4 <_free_r>
  a07c04:	00800304 	movi	r2,12
  a07c08:	e0800015 	stw	r2,0(fp)
  a07c0c:	9080030b 	ldhu	r2,12(r18)
  a07c10:	013fffc4 	movi	r4,-1
  a07c14:	10801014 	ori	r2,r2,64
  a07c18:	9080030d 	sth	r2,12(r18)
  a07c1c:	003f9306 	br	a07a6c <__sfvwrite_r+0xb4>
  a07c20:	0027883a 	mov	r19,zero
  a07c24:	002f883a 	mov	r23,zero
  a07c28:	d8000015 	stw	zero,0(sp)
  a07c2c:	0029883a 	mov	r20,zero
  a07c30:	98001e26 	beq	r19,zero,a07cac <__sfvwrite_r+0x2f4>
  a07c34:	d8c00017 	ldw	r3,0(sp)
  a07c38:	1804c03a 	cmpne	r2,r3,zero
  a07c3c:	10005e26 	beq	r2,zero,a07db8 <__sfvwrite_r+0x400>
  a07c40:	9821883a 	mov	r16,r19
  a07c44:	a4c0012e 	bgeu	r20,r19,a07c4c <__sfvwrite_r+0x294>
  a07c48:	a021883a 	mov	r16,r20
  a07c4c:	91000017 	ldw	r4,0(r18)
  a07c50:	90800417 	ldw	r2,16(r18)
  a07c54:	91800217 	ldw	r6,8(r18)
  a07c58:	91c00517 	ldw	r7,20(r18)
  a07c5c:	1100022e 	bgeu	r2,r4,a07c68 <__sfvwrite_r+0x2b0>
  a07c60:	31e3883a 	add	r17,r6,r7
  a07c64:	8c001616 	blt	r17,r16,a07cc0 <__sfvwrite_r+0x308>
  a07c68:	81c03816 	blt	r16,r7,a07d4c <__sfvwrite_r+0x394>
  a07c6c:	90c00917 	ldw	r3,36(r18)
  a07c70:	91400717 	ldw	r5,28(r18)
  a07c74:	e009883a 	mov	r4,fp
  a07c78:	b80d883a 	mov	r6,r23
  a07c7c:	183ee83a 	callr	r3
  a07c80:	1023883a 	mov	r17,r2
  a07c84:	00bfe10e 	bge	zero,r2,a07c0c <__sfvwrite_r+0x254>
  a07c88:	a469c83a 	sub	r20,r20,r17
  a07c8c:	a0001826 	beq	r20,zero,a07cf0 <__sfvwrite_r+0x338>
  a07c90:	b0800217 	ldw	r2,8(r22)
  a07c94:	1445c83a 	sub	r2,r2,r17
  a07c98:	b0800215 	stw	r2,8(r22)
  a07c9c:	103f7226 	beq	r2,zero,a07a68 <__sfvwrite_r+0xb0>
  a07ca0:	9c67c83a 	sub	r19,r19,r17
  a07ca4:	bc6f883a 	add	r23,r23,r17
  a07ca8:	983fe21e 	bne	r19,zero,a07c34 <__sfvwrite_r+0x27c>
  a07cac:	adc00017 	ldw	r23,0(r21)
  a07cb0:	acc00117 	ldw	r19,4(r21)
  a07cb4:	ad400204 	addi	r21,r21,8
  a07cb8:	d8000015 	stw	zero,0(sp)
  a07cbc:	003fdc06 	br	a07c30 <__sfvwrite_r+0x278>
  a07cc0:	b80b883a 	mov	r5,r23
  a07cc4:	880d883a 	mov	r6,r17
  a07cc8:	0a08af00 	call	a08af0 <memmove>
  a07ccc:	90c00017 	ldw	r3,0(r18)
  a07cd0:	e009883a 	mov	r4,fp
  a07cd4:	900b883a 	mov	r5,r18
  a07cd8:	1c47883a 	add	r3,r3,r17
  a07cdc:	90c00015 	stw	r3,0(r18)
  a07ce0:	0a070880 	call	a07088 <_fflush_r>
  a07ce4:	103fc91e 	bne	r2,zero,a07c0c <__sfvwrite_r+0x254>
  a07ce8:	a469c83a 	sub	r20,r20,r17
  a07cec:	a03fe81e 	bne	r20,zero,a07c90 <__sfvwrite_r+0x2d8>
  a07cf0:	e009883a 	mov	r4,fp
  a07cf4:	900b883a 	mov	r5,r18
  a07cf8:	0a070880 	call	a07088 <_fflush_r>
  a07cfc:	103fc31e 	bne	r2,zero,a07c0c <__sfvwrite_r+0x254>
  a07d00:	d8000015 	stw	zero,0(sp)
  a07d04:	003fe206 	br	a07c90 <__sfvwrite_r+0x2d8>
  a07d08:	91000017 	ldw	r4,0(r18)
  a07d0c:	90800417 	ldw	r2,16(r18)
  a07d10:	1100022e 	bgeu	r2,r4,a07d1c <__sfvwrite_r+0x364>
  a07d14:	8023883a 	mov	r17,r16
  a07d18:	85003136 	bltu	r16,r20,a07de0 <__sfvwrite_r+0x428>
  a07d1c:	91c00517 	ldw	r7,20(r18)
  a07d20:	a1c01836 	bltu	r20,r7,a07d84 <__sfvwrite_r+0x3cc>
  a07d24:	90c00917 	ldw	r3,36(r18)
  a07d28:	91400717 	ldw	r5,28(r18)
  a07d2c:	e009883a 	mov	r4,fp
  a07d30:	b80d883a 	mov	r6,r23
  a07d34:	183ee83a 	callr	r3
  a07d38:	1021883a 	mov	r16,r2
  a07d3c:	00bfb30e 	bge	zero,r2,a07c0c <__sfvwrite_r+0x254>
  a07d40:	1023883a 	mov	r17,r2
  a07d44:	1027883a 	mov	r19,r2
  a07d48:	003f9b06 	br	a07bb8 <__sfvwrite_r+0x200>
  a07d4c:	b80b883a 	mov	r5,r23
  a07d50:	800d883a 	mov	r6,r16
  a07d54:	0a08af00 	call	a08af0 <memmove>
  a07d58:	90c00217 	ldw	r3,8(r18)
  a07d5c:	90800017 	ldw	r2,0(r18)
  a07d60:	8023883a 	mov	r17,r16
  a07d64:	1c07c83a 	sub	r3,r3,r16
  a07d68:	1405883a 	add	r2,r2,r16
  a07d6c:	90c00215 	stw	r3,8(r18)
  a07d70:	90800015 	stw	r2,0(r18)
  a07d74:	003fc406 	br	a07c88 <__sfvwrite_r+0x2d0>
  a07d78:	a00d883a 	mov	r6,r20
  a07d7c:	a021883a 	mov	r16,r20
  a07d80:	003f8106 	br	a07b88 <__sfvwrite_r+0x1d0>
  a07d84:	b80b883a 	mov	r5,r23
  a07d88:	a00d883a 	mov	r6,r20
  a07d8c:	0a08af00 	call	a08af0 <memmove>
  a07d90:	90c00217 	ldw	r3,8(r18)
  a07d94:	90800017 	ldw	r2,0(r18)
  a07d98:	a021883a 	mov	r16,r20
  a07d9c:	1d07c83a 	sub	r3,r3,r20
  a07da0:	1505883a 	add	r2,r2,r20
  a07da4:	a023883a 	mov	r17,r20
  a07da8:	a027883a 	mov	r19,r20
  a07dac:	90c00215 	stw	r3,8(r18)
  a07db0:	90800015 	stw	r2,0(r18)
  a07db4:	003f8006 	br	a07bb8 <__sfvwrite_r+0x200>
  a07db8:	b809883a 	mov	r4,r23
  a07dbc:	01400284 	movi	r5,10
  a07dc0:	980d883a 	mov	r6,r19
  a07dc4:	0a0896c0 	call	a0896c <memchr>
  a07dc8:	10001726 	beq	r2,zero,a07e28 <__sfvwrite_r+0x470>
  a07dcc:	15c5c83a 	sub	r2,r2,r23
  a07dd0:	15000044 	addi	r20,r2,1
  a07dd4:	00800044 	movi	r2,1
  a07dd8:	d8800015 	stw	r2,0(sp)
  a07ddc:	003f9806 	br	a07c40 <__sfvwrite_r+0x288>
  a07de0:	b80b883a 	mov	r5,r23
  a07de4:	800d883a 	mov	r6,r16
  a07de8:	0a08af00 	call	a08af0 <memmove>
  a07dec:	90c00017 	ldw	r3,0(r18)
  a07df0:	e009883a 	mov	r4,fp
  a07df4:	900b883a 	mov	r5,r18
  a07df8:	1c07883a 	add	r3,r3,r16
  a07dfc:	90c00015 	stw	r3,0(r18)
  a07e00:	8027883a 	mov	r19,r16
  a07e04:	0a070880 	call	a07088 <_fflush_r>
  a07e08:	103f6b26 	beq	r2,zero,a07bb8 <__sfvwrite_r+0x200>
  a07e0c:	003f7f06 	br	a07c0c <__sfvwrite_r+0x254>
  a07e10:	400b883a 	mov	r5,r8
  a07e14:	e009883a 	mov	r4,fp
  a07e18:	0a09c5c0 	call	a09c5c <_realloc_r>
  a07e1c:	103f7626 	beq	r2,zero,a07bf8 <__sfvwrite_r+0x240>
  a07e20:	1023883a 	mov	r17,r2
  a07e24:	003f5006 	br	a07b68 <__sfvwrite_r+0x1b0>
  a07e28:	00c00044 	movi	r3,1
  a07e2c:	9d000044 	addi	r20,r19,1
  a07e30:	d8c00015 	stw	r3,0(sp)
  a07e34:	003f8206 	br	a07c40 <__sfvwrite_r+0x288>
  a07e38:	9080030b 	ldhu	r2,12(r18)
  a07e3c:	00c00244 	movi	r3,9
  a07e40:	013fffc4 	movi	r4,-1
  a07e44:	10801014 	ori	r2,r2,64
  a07e48:	9080030d 	sth	r2,12(r18)
  a07e4c:	e0c00015 	stw	r3,0(fp)
  a07e50:	003f0606 	br	a07a6c <__sfvwrite_r+0xb4>

00a07e54 <_fwalk_reent>:
  a07e54:	defff704 	addi	sp,sp,-36
  a07e58:	dcc00315 	stw	r19,12(sp)
  a07e5c:	24c0b804 	addi	r19,r4,736
  a07e60:	dd800615 	stw	r22,24(sp)
  a07e64:	dd400515 	stw	r21,20(sp)
  a07e68:	dfc00815 	stw	ra,32(sp)
  a07e6c:	ddc00715 	stw	r23,28(sp)
  a07e70:	dd000415 	stw	r20,16(sp)
  a07e74:	dc800215 	stw	r18,8(sp)
  a07e78:	dc400115 	stw	r17,4(sp)
  a07e7c:	dc000015 	stw	r16,0(sp)
  a07e80:	202b883a 	mov	r21,r4
  a07e84:	282d883a 	mov	r22,r5
  a07e88:	0a073100 	call	a07310 <__sfp_lock_acquire>
  a07e8c:	98002126 	beq	r19,zero,a07f14 <_fwalk_reent+0xc0>
  a07e90:	002f883a 	mov	r23,zero
  a07e94:	9c800117 	ldw	r18,4(r19)
  a07e98:	9c000217 	ldw	r16,8(r19)
  a07e9c:	90bfffc4 	addi	r2,r18,-1
  a07ea0:	10000d16 	blt	r2,zero,a07ed8 <_fwalk_reent+0x84>
  a07ea4:	0023883a 	mov	r17,zero
  a07ea8:	053fffc4 	movi	r20,-1
  a07eac:	8080030f 	ldh	r2,12(r16)
  a07eb0:	8c400044 	addi	r17,r17,1
  a07eb4:	10000626 	beq	r2,zero,a07ed0 <_fwalk_reent+0x7c>
  a07eb8:	8080038f 	ldh	r2,14(r16)
  a07ebc:	800b883a 	mov	r5,r16
  a07ec0:	a809883a 	mov	r4,r21
  a07ec4:	15000226 	beq	r2,r20,a07ed0 <_fwalk_reent+0x7c>
  a07ec8:	b03ee83a 	callr	r22
  a07ecc:	b8aeb03a 	or	r23,r23,r2
  a07ed0:	84001704 	addi	r16,r16,92
  a07ed4:	947ff51e 	bne	r18,r17,a07eac <_fwalk_reent+0x58>
  a07ed8:	9cc00017 	ldw	r19,0(r19)
  a07edc:	983fed1e 	bne	r19,zero,a07e94 <_fwalk_reent+0x40>
  a07ee0:	0a073140 	call	a07314 <__sfp_lock_release>
  a07ee4:	b805883a 	mov	r2,r23
  a07ee8:	dfc00817 	ldw	ra,32(sp)
  a07eec:	ddc00717 	ldw	r23,28(sp)
  a07ef0:	dd800617 	ldw	r22,24(sp)
  a07ef4:	dd400517 	ldw	r21,20(sp)
  a07ef8:	dd000417 	ldw	r20,16(sp)
  a07efc:	dcc00317 	ldw	r19,12(sp)
  a07f00:	dc800217 	ldw	r18,8(sp)
  a07f04:	dc400117 	ldw	r17,4(sp)
  a07f08:	dc000017 	ldw	r16,0(sp)
  a07f0c:	dec00904 	addi	sp,sp,36
  a07f10:	f800283a 	ret
  a07f14:	002f883a 	mov	r23,zero
  a07f18:	003ff106 	br	a07ee0 <_fwalk_reent+0x8c>

00a07f1c <_fwalk>:
  a07f1c:	defff804 	addi	sp,sp,-32
  a07f20:	dcc00315 	stw	r19,12(sp)
  a07f24:	24c0b804 	addi	r19,r4,736
  a07f28:	dd400515 	stw	r21,20(sp)
  a07f2c:	dfc00715 	stw	ra,28(sp)
  a07f30:	dd800615 	stw	r22,24(sp)
  a07f34:	dd000415 	stw	r20,16(sp)
  a07f38:	dc800215 	stw	r18,8(sp)
  a07f3c:	dc400115 	stw	r17,4(sp)
  a07f40:	dc000015 	stw	r16,0(sp)
  a07f44:	282b883a 	mov	r21,r5
  a07f48:	0a073100 	call	a07310 <__sfp_lock_acquire>
  a07f4c:	98001f26 	beq	r19,zero,a07fcc <_fwalk+0xb0>
  a07f50:	002d883a 	mov	r22,zero
  a07f54:	9c800117 	ldw	r18,4(r19)
  a07f58:	9c000217 	ldw	r16,8(r19)
  a07f5c:	90bfffc4 	addi	r2,r18,-1
  a07f60:	10000c16 	blt	r2,zero,a07f94 <_fwalk+0x78>
  a07f64:	0023883a 	mov	r17,zero
  a07f68:	053fffc4 	movi	r20,-1
  a07f6c:	8080030f 	ldh	r2,12(r16)
  a07f70:	8c400044 	addi	r17,r17,1
  a07f74:	10000526 	beq	r2,zero,a07f8c <_fwalk+0x70>
  a07f78:	8080038f 	ldh	r2,14(r16)
  a07f7c:	8009883a 	mov	r4,r16
  a07f80:	15000226 	beq	r2,r20,a07f8c <_fwalk+0x70>
  a07f84:	a83ee83a 	callr	r21
  a07f88:	b0acb03a 	or	r22,r22,r2
  a07f8c:	84001704 	addi	r16,r16,92
  a07f90:	947ff61e 	bne	r18,r17,a07f6c <_fwalk+0x50>
  a07f94:	9cc00017 	ldw	r19,0(r19)
  a07f98:	983fee1e 	bne	r19,zero,a07f54 <_fwalk+0x38>
  a07f9c:	0a073140 	call	a07314 <__sfp_lock_release>
  a07fa0:	b005883a 	mov	r2,r22
  a07fa4:	dfc00717 	ldw	ra,28(sp)
  a07fa8:	dd800617 	ldw	r22,24(sp)
  a07fac:	dd400517 	ldw	r21,20(sp)
  a07fb0:	dd000417 	ldw	r20,16(sp)
  a07fb4:	dcc00317 	ldw	r19,12(sp)
  a07fb8:	dc800217 	ldw	r18,8(sp)
  a07fbc:	dc400117 	ldw	r17,4(sp)
  a07fc0:	dc000017 	ldw	r16,0(sp)
  a07fc4:	dec00804 	addi	sp,sp,32
  a07fc8:	f800283a 	ret
  a07fcc:	002d883a 	mov	r22,zero
  a07fd0:	003ff206 	br	a07f9c <_fwalk+0x80>

00a07fd4 <__locale_charset>:
  a07fd4:	d0a00c17 	ldw	r2,-32720(gp)
  a07fd8:	f800283a 	ret

00a07fdc <_localeconv_r>:
  a07fdc:	00802874 	movhi	r2,161
  a07fe0:	10836104 	addi	r2,r2,3460
  a07fe4:	f800283a 	ret

00a07fe8 <localeconv>:
  a07fe8:	00802874 	movhi	r2,161
  a07fec:	108aec04 	addi	r2,r2,11184
  a07ff0:	11000017 	ldw	r4,0(r2)
  a07ff4:	0a07fdc1 	jmpi	a07fdc <_localeconv_r>

00a07ff8 <_setlocale_r>:
  a07ff8:	defffc04 	addi	sp,sp,-16
  a07ffc:	00c02874 	movhi	r3,161
  a08000:	18c33904 	addi	r3,r3,3300
  a08004:	dc800215 	stw	r18,8(sp)
  a08008:	dc400115 	stw	r17,4(sp)
  a0800c:	dc000015 	stw	r16,0(sp)
  a08010:	2023883a 	mov	r17,r4
  a08014:	2825883a 	mov	r18,r5
  a08018:	dfc00315 	stw	ra,12(sp)
  a0801c:	3021883a 	mov	r16,r6
  a08020:	3009883a 	mov	r4,r6
  a08024:	180b883a 	mov	r5,r3
  a08028:	30000926 	beq	r6,zero,a08050 <_setlocale_r+0x58>
  a0802c:	0a0a47c0 	call	a0a47c <strcmp>
  a08030:	8009883a 	mov	r4,r16
  a08034:	01402874 	movhi	r5,161
  a08038:	2942d804 	addi	r5,r5,2912
  a0803c:	10000b1e 	bne	r2,zero,a0806c <_setlocale_r+0x74>
  a08040:	8c000d15 	stw	r16,52(r17)
  a08044:	8c800c15 	stw	r18,48(r17)
  a08048:	00c02874 	movhi	r3,161
  a0804c:	18c33904 	addi	r3,r3,3300
  a08050:	1805883a 	mov	r2,r3
  a08054:	dfc00317 	ldw	ra,12(sp)
  a08058:	dc800217 	ldw	r18,8(sp)
  a0805c:	dc400117 	ldw	r17,4(sp)
  a08060:	dc000017 	ldw	r16,0(sp)
  a08064:	dec00404 	addi	sp,sp,16
  a08068:	f800283a 	ret
  a0806c:	0a0a47c0 	call	a0a47c <strcmp>
  a08070:	0007883a 	mov	r3,zero
  a08074:	103ff226 	beq	r2,zero,a08040 <_setlocale_r+0x48>
  a08078:	003ff506 	br	a08050 <_setlocale_r+0x58>

00a0807c <setlocale>:
  a0807c:	01802874 	movhi	r6,161
  a08080:	318aec04 	addi	r6,r6,11184
  a08084:	2007883a 	mov	r3,r4
  a08088:	31000017 	ldw	r4,0(r6)
  a0808c:	280d883a 	mov	r6,r5
  a08090:	180b883a 	mov	r5,r3
  a08094:	0a07ff81 	jmpi	a07ff8 <_setlocale_r>

00a08098 <__smakebuf_r>:
  a08098:	2880030b 	ldhu	r2,12(r5)
  a0809c:	deffed04 	addi	sp,sp,-76
  a080a0:	dc401015 	stw	r17,64(sp)
  a080a4:	1080008c 	andi	r2,r2,2
  a080a8:	dc000f15 	stw	r16,60(sp)
  a080ac:	dfc01215 	stw	ra,72(sp)
  a080b0:	dc801115 	stw	r18,68(sp)
  a080b4:	2821883a 	mov	r16,r5
  a080b8:	2023883a 	mov	r17,r4
  a080bc:	10000b26 	beq	r2,zero,a080ec <__smakebuf_r+0x54>
  a080c0:	28c010c4 	addi	r3,r5,67
  a080c4:	00800044 	movi	r2,1
  a080c8:	28800515 	stw	r2,20(r5)
  a080cc:	28c00415 	stw	r3,16(r5)
  a080d0:	28c00015 	stw	r3,0(r5)
  a080d4:	dfc01217 	ldw	ra,72(sp)
  a080d8:	dc801117 	ldw	r18,68(sp)
  a080dc:	dc401017 	ldw	r17,64(sp)
  a080e0:	dc000f17 	ldw	r16,60(sp)
  a080e4:	dec01304 	addi	sp,sp,76
  a080e8:	f800283a 	ret
  a080ec:	2940038f 	ldh	r5,14(r5)
  a080f0:	28002116 	blt	r5,zero,a08178 <__smakebuf_r+0xe0>
  a080f4:	d80d883a 	mov	r6,sp
  a080f8:	0a0a7f80 	call	a0a7f8 <_fstat_r>
  a080fc:	10001e16 	blt	r2,zero,a08178 <__smakebuf_r+0xe0>
  a08100:	d8800117 	ldw	r2,4(sp)
  a08104:	00e00014 	movui	r3,32768
  a08108:	113c000c 	andi	r4,r2,61440
  a0810c:	20c03126 	beq	r4,r3,a081d4 <__smakebuf_r+0x13c>
  a08110:	8080030b 	ldhu	r2,12(r16)
  a08114:	00c80004 	movi	r3,8192
  a08118:	10820014 	ori	r2,r2,2048
  a0811c:	8080030d 	sth	r2,12(r16)
  a08120:	20c01e26 	beq	r4,r3,a0819c <__smakebuf_r+0x104>
  a08124:	04810004 	movi	r18,1024
  a08128:	8809883a 	mov	r4,r17
  a0812c:	900b883a 	mov	r5,r18
  a08130:	0a0822c0 	call	a0822c <_malloc_r>
  a08134:	1009883a 	mov	r4,r2
  a08138:	10003126 	beq	r2,zero,a08200 <__smakebuf_r+0x168>
  a0813c:	80c0030b 	ldhu	r3,12(r16)
  a08140:	00802834 	movhi	r2,160
  a08144:	109d0104 	addi	r2,r2,29700
  a08148:	88800f15 	stw	r2,60(r17)
  a0814c:	18c02014 	ori	r3,r3,128
  a08150:	84800515 	stw	r18,20(r16)
  a08154:	80c0030d 	sth	r3,12(r16)
  a08158:	81000415 	stw	r4,16(r16)
  a0815c:	81000015 	stw	r4,0(r16)
  a08160:	dfc01217 	ldw	ra,72(sp)
  a08164:	dc801117 	ldw	r18,68(sp)
  a08168:	dc401017 	ldw	r17,64(sp)
  a0816c:	dc000f17 	ldw	r16,60(sp)
  a08170:	dec01304 	addi	sp,sp,76
  a08174:	f800283a 	ret
  a08178:	80c0030b 	ldhu	r3,12(r16)
  a0817c:	1880200c 	andi	r2,r3,128
  a08180:	10000426 	beq	r2,zero,a08194 <__smakebuf_r+0xfc>
  a08184:	04801004 	movi	r18,64
  a08188:	18820014 	ori	r2,r3,2048
  a0818c:	8080030d 	sth	r2,12(r16)
  a08190:	003fe506 	br	a08128 <__smakebuf_r+0x90>
  a08194:	04810004 	movi	r18,1024
  a08198:	003ffb06 	br	a08188 <__smakebuf_r+0xf0>
  a0819c:	8140038f 	ldh	r5,14(r16)
  a081a0:	8809883a 	mov	r4,r17
  a081a4:	0a0a86c0 	call	a0a86c <_isatty_r>
  a081a8:	103fde26 	beq	r2,zero,a08124 <__smakebuf_r+0x8c>
  a081ac:	8080030b 	ldhu	r2,12(r16)
  a081b0:	80c010c4 	addi	r3,r16,67
  a081b4:	04810004 	movi	r18,1024
  a081b8:	10800054 	ori	r2,r2,1
  a081bc:	8080030d 	sth	r2,12(r16)
  a081c0:	00800044 	movi	r2,1
  a081c4:	80c00415 	stw	r3,16(r16)
  a081c8:	80800515 	stw	r2,20(r16)
  a081cc:	80c00015 	stw	r3,0(r16)
  a081d0:	003fd506 	br	a08128 <__smakebuf_r+0x90>
  a081d4:	80c00a17 	ldw	r3,40(r16)
  a081d8:	00802874 	movhi	r2,161
  a081dc:	10a8ce04 	addi	r2,r2,-23752
  a081e0:	18bfcb1e 	bne	r3,r2,a08110 <__smakebuf_r+0x78>
  a081e4:	8080030b 	ldhu	r2,12(r16)
  a081e8:	00c10004 	movi	r3,1024
  a081ec:	1825883a 	mov	r18,r3
  a081f0:	10c4b03a 	or	r2,r2,r3
  a081f4:	8080030d 	sth	r2,12(r16)
  a081f8:	80c01315 	stw	r3,76(r16)
  a081fc:	003fca06 	br	a08128 <__smakebuf_r+0x90>
  a08200:	8100030b 	ldhu	r4,12(r16)
  a08204:	2080800c 	andi	r2,r4,512
  a08208:	103fb21e 	bne	r2,zero,a080d4 <__smakebuf_r+0x3c>
  a0820c:	80c010c4 	addi	r3,r16,67
  a08210:	21000094 	ori	r4,r4,2
  a08214:	00800044 	movi	r2,1
  a08218:	80800515 	stw	r2,20(r16)
  a0821c:	8100030d 	sth	r4,12(r16)
  a08220:	80c00415 	stw	r3,16(r16)
  a08224:	80c00015 	stw	r3,0(r16)
  a08228:	003faa06 	br	a080d4 <__smakebuf_r+0x3c>

00a0822c <_malloc_r>:
  a0822c:	defff604 	addi	sp,sp,-40
  a08230:	28c002c4 	addi	r3,r5,11
  a08234:	00800584 	movi	r2,22
  a08238:	dc800215 	stw	r18,8(sp)
  a0823c:	dfc00915 	stw	ra,36(sp)
  a08240:	df000815 	stw	fp,32(sp)
  a08244:	ddc00715 	stw	r23,28(sp)
  a08248:	dd800615 	stw	r22,24(sp)
  a0824c:	dd400515 	stw	r21,20(sp)
  a08250:	dd000415 	stw	r20,16(sp)
  a08254:	dcc00315 	stw	r19,12(sp)
  a08258:	dc400115 	stw	r17,4(sp)
  a0825c:	dc000015 	stw	r16,0(sp)
  a08260:	2025883a 	mov	r18,r4
  a08264:	10c01236 	bltu	r2,r3,a082b0 <_malloc_r+0x84>
  a08268:	04400404 	movi	r17,16
  a0826c:	8940142e 	bgeu	r17,r5,a082c0 <_malloc_r+0x94>
  a08270:	00800304 	movi	r2,12
  a08274:	0007883a 	mov	r3,zero
  a08278:	90800015 	stw	r2,0(r18)
  a0827c:	1805883a 	mov	r2,r3
  a08280:	dfc00917 	ldw	ra,36(sp)
  a08284:	df000817 	ldw	fp,32(sp)
  a08288:	ddc00717 	ldw	r23,28(sp)
  a0828c:	dd800617 	ldw	r22,24(sp)
  a08290:	dd400517 	ldw	r21,20(sp)
  a08294:	dd000417 	ldw	r20,16(sp)
  a08298:	dcc00317 	ldw	r19,12(sp)
  a0829c:	dc800217 	ldw	r18,8(sp)
  a082a0:	dc400117 	ldw	r17,4(sp)
  a082a4:	dc000017 	ldw	r16,0(sp)
  a082a8:	dec00a04 	addi	sp,sp,40
  a082ac:	f800283a 	ret
  a082b0:	00bffe04 	movi	r2,-8
  a082b4:	18a2703a 	and	r17,r3,r2
  a082b8:	883fed16 	blt	r17,zero,a08270 <_malloc_r+0x44>
  a082bc:	897fec36 	bltu	r17,r5,a08270 <_malloc_r+0x44>
  a082c0:	9009883a 	mov	r4,r18
  a082c4:	0a0c6700 	call	a0c670 <__malloc_lock>
  a082c8:	00807dc4 	movi	r2,503
  a082cc:	14402b2e 	bgeu	r2,r17,a0837c <_malloc_r+0x150>
  a082d0:	8806d27a 	srli	r3,r17,9
  a082d4:	18003f1e 	bne	r3,zero,a083d4 <_malloc_r+0x1a8>
  a082d8:	880cd0fa 	srli	r6,r17,3
  a082dc:	300490fa 	slli	r2,r6,3
  a082e0:	02c02874 	movhi	r11,161
  a082e4:	5ac50e04 	addi	r11,r11,5176
  a082e8:	12cb883a 	add	r5,r2,r11
  a082ec:	2c000317 	ldw	r16,12(r5)
  a082f0:	580f883a 	mov	r7,r11
  a082f4:	2c00041e 	bne	r5,r16,a08308 <_malloc_r+0xdc>
  a082f8:	00000a06 	br	a08324 <_malloc_r+0xf8>
  a082fc:	1800860e 	bge	r3,zero,a08518 <_malloc_r+0x2ec>
  a08300:	84000317 	ldw	r16,12(r16)
  a08304:	2c000726 	beq	r5,r16,a08324 <_malloc_r+0xf8>
  a08308:	80800117 	ldw	r2,4(r16)
  a0830c:	00ffff04 	movi	r3,-4
  a08310:	10c8703a 	and	r4,r2,r3
  a08314:	2447c83a 	sub	r3,r4,r17
  a08318:	008003c4 	movi	r2,15
  a0831c:	10fff70e 	bge	r2,r3,a082fc <_malloc_r+0xd0>
  a08320:	31bfffc4 	addi	r6,r6,-1
  a08324:	32400044 	addi	r9,r6,1
  a08328:	02802874 	movhi	r10,161
  a0832c:	52851004 	addi	r10,r10,5184
  a08330:	54000217 	ldw	r16,8(r10)
  a08334:	8280a026 	beq	r16,r10,a085b8 <_malloc_r+0x38c>
  a08338:	80800117 	ldw	r2,4(r16)
  a0833c:	00ffff04 	movi	r3,-4
  a08340:	10ca703a 	and	r5,r2,r3
  a08344:	2c4dc83a 	sub	r6,r5,r17
  a08348:	008003c4 	movi	r2,15
  a0834c:	11808316 	blt	r2,r6,a0855c <_malloc_r+0x330>
  a08350:	52800315 	stw	r10,12(r10)
  a08354:	52800215 	stw	r10,8(r10)
  a08358:	30002916 	blt	r6,zero,a08400 <_malloc_r+0x1d4>
  a0835c:	8147883a 	add	r3,r16,r5
  a08360:	18800117 	ldw	r2,4(r3)
  a08364:	9009883a 	mov	r4,r18
  a08368:	10800054 	ori	r2,r2,1
  a0836c:	18800115 	stw	r2,4(r3)
  a08370:	0a0c6900 	call	a0c690 <__malloc_unlock>
  a08374:	80c00204 	addi	r3,r16,8
  a08378:	003fc006 	br	a0827c <_malloc_r+0x50>
  a0837c:	02c02874 	movhi	r11,161
  a08380:	5ac50e04 	addi	r11,r11,5176
  a08384:	8ac5883a 	add	r2,r17,r11
  a08388:	14000317 	ldw	r16,12(r2)
  a0838c:	580f883a 	mov	r7,r11
  a08390:	8806d0fa 	srli	r3,r17,3
  a08394:	14006c26 	beq	r2,r16,a08548 <_malloc_r+0x31c>
  a08398:	80c00117 	ldw	r3,4(r16)
  a0839c:	00bfff04 	movi	r2,-4
  a083a0:	81800317 	ldw	r6,12(r16)
  a083a4:	1886703a 	and	r3,r3,r2
  a083a8:	80c7883a 	add	r3,r16,r3
  a083ac:	18800117 	ldw	r2,4(r3)
  a083b0:	81400217 	ldw	r5,8(r16)
  a083b4:	9009883a 	mov	r4,r18
  a083b8:	10800054 	ori	r2,r2,1
  a083bc:	18800115 	stw	r2,4(r3)
  a083c0:	31400215 	stw	r5,8(r6)
  a083c4:	29800315 	stw	r6,12(r5)
  a083c8:	0a0c6900 	call	a0c690 <__malloc_unlock>
  a083cc:	80c00204 	addi	r3,r16,8
  a083d0:	003faa06 	br	a0827c <_malloc_r+0x50>
  a083d4:	00800104 	movi	r2,4
  a083d8:	10c0052e 	bgeu	r2,r3,a083f0 <_malloc_r+0x1c4>
  a083dc:	00800504 	movi	r2,20
  a083e0:	10c07836 	bltu	r2,r3,a085c4 <_malloc_r+0x398>
  a083e4:	198016c4 	addi	r6,r3,91
  a083e8:	300490fa 	slli	r2,r6,3
  a083ec:	003fbc06 	br	a082e0 <_malloc_r+0xb4>
  a083f0:	8804d1ba 	srli	r2,r17,6
  a083f4:	11800e04 	addi	r6,r2,56
  a083f8:	300490fa 	slli	r2,r6,3
  a083fc:	003fb806 	br	a082e0 <_malloc_r+0xb4>
  a08400:	00807fc4 	movi	r2,511
  a08404:	1140bb36 	bltu	r2,r5,a086f4 <_malloc_r+0x4c8>
  a08408:	2806d0fa 	srli	r3,r5,3
  a0840c:	573ffe04 	addi	fp,r10,-8
  a08410:	00800044 	movi	r2,1
  a08414:	180890fa 	slli	r4,r3,3
  a08418:	1807d0ba 	srai	r3,r3,2
  a0841c:	e1c00117 	ldw	r7,4(fp)
  a08420:	5909883a 	add	r4,r11,r4
  a08424:	21400217 	ldw	r5,8(r4)
  a08428:	10c4983a 	sll	r2,r2,r3
  a0842c:	81000315 	stw	r4,12(r16)
  a08430:	81400215 	stw	r5,8(r16)
  a08434:	388eb03a 	or	r7,r7,r2
  a08438:	2c000315 	stw	r16,12(r5)
  a0843c:	24000215 	stw	r16,8(r4)
  a08440:	e1c00115 	stw	r7,4(fp)
  a08444:	4807883a 	mov	r3,r9
  a08448:	4800cd16 	blt	r9,zero,a08780 <_malloc_r+0x554>
  a0844c:	1807d0ba 	srai	r3,r3,2
  a08450:	00800044 	movi	r2,1
  a08454:	10c8983a 	sll	r4,r2,r3
  a08458:	39004436 	bltu	r7,r4,a0856c <_malloc_r+0x340>
  a0845c:	21c4703a 	and	r2,r4,r7
  a08460:	10000a1e 	bne	r2,zero,a0848c <_malloc_r+0x260>
  a08464:	2109883a 	add	r4,r4,r4
  a08468:	00bfff04 	movi	r2,-4
  a0846c:	4884703a 	and	r2,r9,r2
  a08470:	3906703a 	and	r3,r7,r4
  a08474:	12400104 	addi	r9,r2,4
  a08478:	1800041e 	bne	r3,zero,a0848c <_malloc_r+0x260>
  a0847c:	2109883a 	add	r4,r4,r4
  a08480:	3904703a 	and	r2,r7,r4
  a08484:	4a400104 	addi	r9,r9,4
  a08488:	103ffc26 	beq	r2,zero,a0847c <_malloc_r+0x250>
  a0848c:	480490fa 	slli	r2,r9,3
  a08490:	4819883a 	mov	r12,r9
  a08494:	023fff04 	movi	r8,-4
  a08498:	589b883a 	add	r13,r11,r2
  a0849c:	6807883a 	mov	r3,r13
  a084a0:	014003c4 	movi	r5,15
  a084a4:	1c000317 	ldw	r16,12(r3)
  a084a8:	1c00041e 	bne	r3,r16,a084bc <_malloc_r+0x290>
  a084ac:	0000a706 	br	a0874c <_malloc_r+0x520>
  a084b0:	3000ab0e 	bge	r6,zero,a08760 <_malloc_r+0x534>
  a084b4:	84000317 	ldw	r16,12(r16)
  a084b8:	1c00a426 	beq	r3,r16,a0874c <_malloc_r+0x520>
  a084bc:	80800117 	ldw	r2,4(r16)
  a084c0:	1204703a 	and	r2,r2,r8
  a084c4:	144dc83a 	sub	r6,r2,r17
  a084c8:	29bff90e 	bge	r5,r6,a084b0 <_malloc_r+0x284>
  a084cc:	81000317 	ldw	r4,12(r16)
  a084d0:	80c00217 	ldw	r3,8(r16)
  a084d4:	89400054 	ori	r5,r17,1
  a084d8:	8445883a 	add	r2,r16,r17
  a084dc:	20c00215 	stw	r3,8(r4)
  a084e0:	19000315 	stw	r4,12(r3)
  a084e4:	81400115 	stw	r5,4(r16)
  a084e8:	1187883a 	add	r3,r2,r6
  a084ec:	31000054 	ori	r4,r6,1
  a084f0:	50800315 	stw	r2,12(r10)
  a084f4:	50800215 	stw	r2,8(r10)
  a084f8:	19800015 	stw	r6,0(r3)
  a084fc:	11000115 	stw	r4,4(r2)
  a08500:	12800215 	stw	r10,8(r2)
  a08504:	12800315 	stw	r10,12(r2)
  a08508:	9009883a 	mov	r4,r18
  a0850c:	0a0c6900 	call	a0c690 <__malloc_unlock>
  a08510:	80c00204 	addi	r3,r16,8
  a08514:	003f5906 	br	a0827c <_malloc_r+0x50>
  a08518:	8109883a 	add	r4,r16,r4
  a0851c:	20800117 	ldw	r2,4(r4)
  a08520:	80c00217 	ldw	r3,8(r16)
  a08524:	81400317 	ldw	r5,12(r16)
  a08528:	10800054 	ori	r2,r2,1
  a0852c:	20800115 	stw	r2,4(r4)
  a08530:	28c00215 	stw	r3,8(r5)
  a08534:	19400315 	stw	r5,12(r3)
  a08538:	9009883a 	mov	r4,r18
  a0853c:	0a0c6900 	call	a0c690 <__malloc_unlock>
  a08540:	80c00204 	addi	r3,r16,8
  a08544:	003f4d06 	br	a0827c <_malloc_r+0x50>
  a08548:	80800204 	addi	r2,r16,8
  a0854c:	14000317 	ldw	r16,12(r2)
  a08550:	143f911e 	bne	r2,r16,a08398 <_malloc_r+0x16c>
  a08554:	1a400084 	addi	r9,r3,2
  a08558:	003f7306 	br	a08328 <_malloc_r+0xfc>
  a0855c:	88c00054 	ori	r3,r17,1
  a08560:	8445883a 	add	r2,r16,r17
  a08564:	80c00115 	stw	r3,4(r16)
  a08568:	003fdf06 	br	a084e8 <_malloc_r+0x2bc>
  a0856c:	e4000217 	ldw	r16,8(fp)
  a08570:	00bfff04 	movi	r2,-4
  a08574:	80c00117 	ldw	r3,4(r16)
  a08578:	802d883a 	mov	r22,r16
  a0857c:	18aa703a 	and	r21,r3,r2
  a08580:	ac401636 	bltu	r21,r17,a085dc <_malloc_r+0x3b0>
  a08584:	ac49c83a 	sub	r4,r21,r17
  a08588:	008003c4 	movi	r2,15
  a0858c:	1100130e 	bge	r2,r4,a085dc <_malloc_r+0x3b0>
  a08590:	88800054 	ori	r2,r17,1
  a08594:	8447883a 	add	r3,r16,r17
  a08598:	80800115 	stw	r2,4(r16)
  a0859c:	20800054 	ori	r2,r4,1
  a085a0:	18800115 	stw	r2,4(r3)
  a085a4:	e0c00215 	stw	r3,8(fp)
  a085a8:	9009883a 	mov	r4,r18
  a085ac:	0a0c6900 	call	a0c690 <__malloc_unlock>
  a085b0:	80c00204 	addi	r3,r16,8
  a085b4:	003f3106 	br	a0827c <_malloc_r+0x50>
  a085b8:	39c00117 	ldw	r7,4(r7)
  a085bc:	573ffe04 	addi	fp,r10,-8
  a085c0:	003fa006 	br	a08444 <_malloc_r+0x218>
  a085c4:	00801504 	movi	r2,84
  a085c8:	10c06736 	bltu	r2,r3,a08768 <_malloc_r+0x53c>
  a085cc:	8804d33a 	srli	r2,r17,12
  a085d0:	11801b84 	addi	r6,r2,110
  a085d4:	300490fa 	slli	r2,r6,3
  a085d8:	003f4106 	br	a082e0 <_malloc_r+0xb4>
  a085dc:	d0a71617 	ldw	r2,-25512(gp)
  a085e0:	d0e00e17 	ldw	r3,-32712(gp)
  a085e4:	053fffc4 	movi	r20,-1
  a085e8:	10800404 	addi	r2,r2,16
  a085ec:	88a7883a 	add	r19,r17,r2
  a085f0:	1d000326 	beq	r3,r20,a08600 <_malloc_r+0x3d4>
  a085f4:	98c3ffc4 	addi	r3,r19,4095
  a085f8:	00bc0004 	movi	r2,-4096
  a085fc:	18a6703a 	and	r19,r3,r2
  a08600:	9009883a 	mov	r4,r18
  a08604:	980b883a 	mov	r5,r19
  a08608:	0a0a2c00 	call	a0a2c0 <_sbrk_r>
  a0860c:	1009883a 	mov	r4,r2
  a08610:	15000426 	beq	r2,r20,a08624 <_malloc_r+0x3f8>
  a08614:	854b883a 	add	r5,r16,r21
  a08618:	1029883a 	mov	r20,r2
  a0861c:	11405a2e 	bgeu	r2,r5,a08788 <_malloc_r+0x55c>
  a08620:	87000c26 	beq	r16,fp,a08654 <_malloc_r+0x428>
  a08624:	e4000217 	ldw	r16,8(fp)
  a08628:	80c00117 	ldw	r3,4(r16)
  a0862c:	00bfff04 	movi	r2,-4
  a08630:	1884703a 	and	r2,r3,r2
  a08634:	14400336 	bltu	r2,r17,a08644 <_malloc_r+0x418>
  a08638:	1449c83a 	sub	r4,r2,r17
  a0863c:	008003c4 	movi	r2,15
  a08640:	113fd316 	blt	r2,r4,a08590 <_malloc_r+0x364>
  a08644:	9009883a 	mov	r4,r18
  a08648:	0a0c6900 	call	a0c690 <__malloc_unlock>
  a0864c:	0007883a 	mov	r3,zero
  a08650:	003f0a06 	br	a0827c <_malloc_r+0x50>
  a08654:	05c02874 	movhi	r23,161
  a08658:	bdd20304 	addi	r23,r23,18444
  a0865c:	b8800017 	ldw	r2,0(r23)
  a08660:	988d883a 	add	r6,r19,r2
  a08664:	b9800015 	stw	r6,0(r23)
  a08668:	d0e00e17 	ldw	r3,-32712(gp)
  a0866c:	00bfffc4 	movi	r2,-1
  a08670:	18808e26 	beq	r3,r2,a088ac <_malloc_r+0x680>
  a08674:	2145c83a 	sub	r2,r4,r5
  a08678:	3085883a 	add	r2,r6,r2
  a0867c:	b8800015 	stw	r2,0(r23)
  a08680:	20c001cc 	andi	r3,r4,7
  a08684:	18005f1e 	bne	r3,zero,a08804 <_malloc_r+0x5d8>
  a08688:	000b883a 	mov	r5,zero
  a0868c:	a4c5883a 	add	r2,r20,r19
  a08690:	1083ffcc 	andi	r2,r2,4095
  a08694:	00c40004 	movi	r3,4096
  a08698:	1887c83a 	sub	r3,r3,r2
  a0869c:	28e7883a 	add	r19,r5,r3
  a086a0:	9009883a 	mov	r4,r18
  a086a4:	980b883a 	mov	r5,r19
  a086a8:	0a0a2c00 	call	a0a2c0 <_sbrk_r>
  a086ac:	1007883a 	mov	r3,r2
  a086b0:	00bfffc4 	movi	r2,-1
  a086b4:	18807a26 	beq	r3,r2,a088a0 <_malloc_r+0x674>
  a086b8:	1d05c83a 	sub	r2,r3,r20
  a086bc:	9885883a 	add	r2,r19,r2
  a086c0:	10c00054 	ori	r3,r2,1
  a086c4:	b8800017 	ldw	r2,0(r23)
  a086c8:	a021883a 	mov	r16,r20
  a086cc:	a0c00115 	stw	r3,4(r20)
  a086d0:	9885883a 	add	r2,r19,r2
  a086d4:	b8800015 	stw	r2,0(r23)
  a086d8:	e5000215 	stw	r20,8(fp)
  a086dc:	b7003626 	beq	r22,fp,a087b8 <_malloc_r+0x58c>
  a086e0:	018003c4 	movi	r6,15
  a086e4:	35404b36 	bltu	r6,r21,a08814 <_malloc_r+0x5e8>
  a086e8:	00800044 	movi	r2,1
  a086ec:	a0800115 	stw	r2,4(r20)
  a086f0:	003fcd06 	br	a08628 <_malloc_r+0x3fc>
  a086f4:	2808d27a 	srli	r4,r5,9
  a086f8:	2000371e 	bne	r4,zero,a087d8 <_malloc_r+0x5ac>
  a086fc:	2808d0fa 	srli	r4,r5,3
  a08700:	200690fa 	slli	r3,r4,3
  a08704:	1ad1883a 	add	r8,r3,r11
  a08708:	41800217 	ldw	r6,8(r8)
  a0870c:	41805b26 	beq	r8,r6,a0887c <_malloc_r+0x650>
  a08710:	30800117 	ldw	r2,4(r6)
  a08714:	00ffff04 	movi	r3,-4
  a08718:	10c4703a 	and	r2,r2,r3
  a0871c:	2880022e 	bgeu	r5,r2,a08728 <_malloc_r+0x4fc>
  a08720:	31800217 	ldw	r6,8(r6)
  a08724:	41bffa1e 	bne	r8,r6,a08710 <_malloc_r+0x4e4>
  a08728:	32000317 	ldw	r8,12(r6)
  a0872c:	39c00117 	ldw	r7,4(r7)
  a08730:	82000315 	stw	r8,12(r16)
  a08734:	81800215 	stw	r6,8(r16)
  a08738:	07002874 	movhi	fp,161
  a0873c:	e7050e04 	addi	fp,fp,5176
  a08740:	34000315 	stw	r16,12(r6)
  a08744:	44000215 	stw	r16,8(r8)
  a08748:	003f3e06 	br	a08444 <_malloc_r+0x218>
  a0874c:	63000044 	addi	r12,r12,1
  a08750:	608000cc 	andi	r2,r12,3
  a08754:	10005d26 	beq	r2,zero,a088cc <_malloc_r+0x6a0>
  a08758:	18c00204 	addi	r3,r3,8
  a0875c:	003f5106 	br	a084a4 <_malloc_r+0x278>
  a08760:	8089883a 	add	r4,r16,r2
  a08764:	003f6d06 	br	a0851c <_malloc_r+0x2f0>
  a08768:	00805504 	movi	r2,340
  a0876c:	10c02036 	bltu	r2,r3,a087f0 <_malloc_r+0x5c4>
  a08770:	8804d3fa 	srli	r2,r17,15
  a08774:	11801dc4 	addi	r6,r2,119
  a08778:	300490fa 	slli	r2,r6,3
  a0877c:	003ed806 	br	a082e0 <_malloc_r+0xb4>
  a08780:	48c000c4 	addi	r3,r9,3
  a08784:	003f3106 	br	a0844c <_malloc_r+0x220>
  a08788:	05c02874 	movhi	r23,161
  a0878c:	bdd20304 	addi	r23,r23,18444
  a08790:	b8800017 	ldw	r2,0(r23)
  a08794:	988d883a 	add	r6,r19,r2
  a08798:	b9800015 	stw	r6,0(r23)
  a0879c:	293fb21e 	bne	r5,r4,a08668 <_malloc_r+0x43c>
  a087a0:	2083ffcc 	andi	r2,r4,4095
  a087a4:	103fb01e 	bne	r2,zero,a08668 <_malloc_r+0x43c>
  a087a8:	e4000217 	ldw	r16,8(fp)
  a087ac:	9d45883a 	add	r2,r19,r21
  a087b0:	10800054 	ori	r2,r2,1
  a087b4:	80800115 	stw	r2,4(r16)
  a087b8:	b8c00017 	ldw	r3,0(r23)
  a087bc:	d0a71717 	ldw	r2,-25508(gp)
  a087c0:	10c0012e 	bgeu	r2,r3,a087c8 <_malloc_r+0x59c>
  a087c4:	d0e71715 	stw	r3,-25508(gp)
  a087c8:	d0a71817 	ldw	r2,-25504(gp)
  a087cc:	10ff962e 	bgeu	r2,r3,a08628 <_malloc_r+0x3fc>
  a087d0:	d0e71815 	stw	r3,-25504(gp)
  a087d4:	003f9406 	br	a08628 <_malloc_r+0x3fc>
  a087d8:	00800104 	movi	r2,4
  a087dc:	11001e36 	bltu	r2,r4,a08858 <_malloc_r+0x62c>
  a087e0:	2804d1ba 	srli	r2,r5,6
  a087e4:	11000e04 	addi	r4,r2,56
  a087e8:	200690fa 	slli	r3,r4,3
  a087ec:	003fc506 	br	a08704 <_malloc_r+0x4d8>
  a087f0:	00815504 	movi	r2,1364
  a087f4:	10c01d2e 	bgeu	r2,r3,a0886c <_malloc_r+0x640>
  a087f8:	01801f84 	movi	r6,126
  a087fc:	0080fc04 	movi	r2,1008
  a08800:	003eb706 	br	a082e0 <_malloc_r+0xb4>
  a08804:	00800204 	movi	r2,8
  a08808:	10cbc83a 	sub	r5,r2,r3
  a0880c:	2169883a 	add	r20,r4,r5
  a08810:	003f9e06 	br	a0868c <_malloc_r+0x460>
  a08814:	00bffe04 	movi	r2,-8
  a08818:	a93ffd04 	addi	r4,r21,-12
  a0881c:	2088703a 	and	r4,r4,r2
  a08820:	b10b883a 	add	r5,r22,r4
  a08824:	00c00144 	movi	r3,5
  a08828:	28c00215 	stw	r3,8(r5)
  a0882c:	28c00115 	stw	r3,4(r5)
  a08830:	b0800117 	ldw	r2,4(r22)
  a08834:	1080004c 	andi	r2,r2,1
  a08838:	2084b03a 	or	r2,r4,r2
  a0883c:	b0800115 	stw	r2,4(r22)
  a08840:	313fdd2e 	bgeu	r6,r4,a087b8 <_malloc_r+0x58c>
  a08844:	b1400204 	addi	r5,r22,8
  a08848:	9009883a 	mov	r4,r18
  a0884c:	0a076a40 	call	a076a4 <_free_r>
  a08850:	e4000217 	ldw	r16,8(fp)
  a08854:	003fd806 	br	a087b8 <_malloc_r+0x58c>
  a08858:	00800504 	movi	r2,20
  a0885c:	11001536 	bltu	r2,r4,a088b4 <_malloc_r+0x688>
  a08860:	210016c4 	addi	r4,r4,91
  a08864:	200690fa 	slli	r3,r4,3
  a08868:	003fa606 	br	a08704 <_malloc_r+0x4d8>
  a0886c:	8804d4ba 	srli	r2,r17,18
  a08870:	11801f04 	addi	r6,r2,124
  a08874:	300490fa 	slli	r2,r6,3
  a08878:	003e9906 	br	a082e0 <_malloc_r+0xb4>
  a0887c:	2009d0ba 	srai	r4,r4,2
  a08880:	01402874 	movhi	r5,161
  a08884:	29450e04 	addi	r5,r5,5176
  a08888:	00c00044 	movi	r3,1
  a0888c:	28800117 	ldw	r2,4(r5)
  a08890:	1906983a 	sll	r3,r3,r4
  a08894:	10c4b03a 	or	r2,r2,r3
  a08898:	28800115 	stw	r2,4(r5)
  a0889c:	003fa306 	br	a0872c <_malloc_r+0x500>
  a088a0:	0027883a 	mov	r19,zero
  a088a4:	00c00044 	movi	r3,1
  a088a8:	003f8606 	br	a086c4 <_malloc_r+0x498>
  a088ac:	d1200e15 	stw	r4,-32712(gp)
  a088b0:	003f7306 	br	a08680 <_malloc_r+0x454>
  a088b4:	00801504 	movi	r2,84
  a088b8:	11001936 	bltu	r2,r4,a08920 <_malloc_r+0x6f4>
  a088bc:	2804d33a 	srli	r2,r5,12
  a088c0:	11001b84 	addi	r4,r2,110
  a088c4:	200690fa 	slli	r3,r4,3
  a088c8:	003f8e06 	br	a08704 <_malloc_r+0x4d8>
  a088cc:	480b883a 	mov	r5,r9
  a088d0:	6807883a 	mov	r3,r13
  a088d4:	288000cc 	andi	r2,r5,3
  a088d8:	18fffe04 	addi	r3,r3,-8
  a088dc:	297fffc4 	addi	r5,r5,-1
  a088e0:	10001526 	beq	r2,zero,a08938 <_malloc_r+0x70c>
  a088e4:	18800217 	ldw	r2,8(r3)
  a088e8:	10fffa26 	beq	r2,r3,a088d4 <_malloc_r+0x6a8>
  a088ec:	2109883a 	add	r4,r4,r4
  a088f0:	393f1e36 	bltu	r7,r4,a0856c <_malloc_r+0x340>
  a088f4:	203f1d26 	beq	r4,zero,a0856c <_malloc_r+0x340>
  a088f8:	21c4703a 	and	r2,r4,r7
  a088fc:	10000226 	beq	r2,zero,a08908 <_malloc_r+0x6dc>
  a08900:	6013883a 	mov	r9,r12
  a08904:	003ee106 	br	a0848c <_malloc_r+0x260>
  a08908:	2109883a 	add	r4,r4,r4
  a0890c:	3904703a 	and	r2,r7,r4
  a08910:	63000104 	addi	r12,r12,4
  a08914:	103ffc26 	beq	r2,zero,a08908 <_malloc_r+0x6dc>
  a08918:	6013883a 	mov	r9,r12
  a0891c:	003edb06 	br	a0848c <_malloc_r+0x260>
  a08920:	00805504 	movi	r2,340
  a08924:	11000836 	bltu	r2,r4,a08948 <_malloc_r+0x71c>
  a08928:	2804d3fa 	srli	r2,r5,15
  a0892c:	11001dc4 	addi	r4,r2,119
  a08930:	200690fa 	slli	r3,r4,3
  a08934:	003f7306 	br	a08704 <_malloc_r+0x4d8>
  a08938:	0104303a 	nor	r2,zero,r4
  a0893c:	388e703a 	and	r7,r7,r2
  a08940:	e1c00115 	stw	r7,4(fp)
  a08944:	003fe906 	br	a088ec <_malloc_r+0x6c0>
  a08948:	00815504 	movi	r2,1364
  a0894c:	1100032e 	bgeu	r2,r4,a0895c <_malloc_r+0x730>
  a08950:	01001f84 	movi	r4,126
  a08954:	00c0fc04 	movi	r3,1008
  a08958:	003f6a06 	br	a08704 <_malloc_r+0x4d8>
  a0895c:	2804d4ba 	srli	r2,r5,18
  a08960:	11001f04 	addi	r4,r2,124
  a08964:	200690fa 	slli	r3,r4,3
  a08968:	003f6606 	br	a08704 <_malloc_r+0x4d8>

00a0896c <memchr>:
  a0896c:	008000c4 	movi	r2,3
  a08970:	29403fcc 	andi	r5,r5,255
  a08974:	2007883a 	mov	r3,r4
  a08978:	1180022e 	bgeu	r2,r6,a08984 <memchr+0x18>
  a0897c:	2084703a 	and	r2,r4,r2
  a08980:	10000b26 	beq	r2,zero,a089b0 <memchr+0x44>
  a08984:	313fffc4 	addi	r4,r6,-1
  a08988:	3000051e 	bne	r6,zero,a089a0 <memchr+0x34>
  a0898c:	00002c06 	br	a08a40 <memchr+0xd4>
  a08990:	213fffc4 	addi	r4,r4,-1
  a08994:	00bfffc4 	movi	r2,-1
  a08998:	18c00044 	addi	r3,r3,1
  a0899c:	20802826 	beq	r4,r2,a08a40 <memchr+0xd4>
  a089a0:	18800003 	ldbu	r2,0(r3)
  a089a4:	28bffa1e 	bne	r5,r2,a08990 <memchr+0x24>
  a089a8:	1805883a 	mov	r2,r3
  a089ac:	f800283a 	ret
  a089b0:	0011883a 	mov	r8,zero
  a089b4:	0007883a 	mov	r3,zero
  a089b8:	01c00104 	movi	r7,4
  a089bc:	4004923a 	slli	r2,r8,8
  a089c0:	18c00044 	addi	r3,r3,1
  a089c4:	1151883a 	add	r8,r2,r5
  a089c8:	19fffc1e 	bne	r3,r7,a089bc <memchr+0x50>
  a089cc:	02bfbff4 	movhi	r10,65279
  a089d0:	52bfbfc4 	addi	r10,r10,-257
  a089d4:	02602074 	movhi	r9,32897
  a089d8:	4a602004 	addi	r9,r9,-32640
  a089dc:	02c000c4 	movi	r11,3
  a089e0:	20800017 	ldw	r2,0(r4)
  a089e4:	31bfff04 	addi	r6,r6,-4
  a089e8:	200f883a 	mov	r7,r4
  a089ec:	1204f03a 	xor	r2,r2,r8
  a089f0:	1287883a 	add	r3,r2,r10
  a089f4:	1a46703a 	and	r3,r3,r9
  a089f8:	0084303a 	nor	r2,zero,r2
  a089fc:	10c4703a 	and	r2,r2,r3
  a08a00:	10000b26 	beq	r2,zero,a08a30 <memchr+0xc4>
  a08a04:	20800003 	ldbu	r2,0(r4)
  a08a08:	28800f26 	beq	r5,r2,a08a48 <memchr+0xdc>
  a08a0c:	20800043 	ldbu	r2,1(r4)
  a08a10:	21c00044 	addi	r7,r4,1
  a08a14:	28800c26 	beq	r5,r2,a08a48 <memchr+0xdc>
  a08a18:	20800083 	ldbu	r2,2(r4)
  a08a1c:	21c00084 	addi	r7,r4,2
  a08a20:	28800926 	beq	r5,r2,a08a48 <memchr+0xdc>
  a08a24:	208000c3 	ldbu	r2,3(r4)
  a08a28:	21c000c4 	addi	r7,r4,3
  a08a2c:	28800626 	beq	r5,r2,a08a48 <memchr+0xdc>
  a08a30:	21000104 	addi	r4,r4,4
  a08a34:	59bfea36 	bltu	r11,r6,a089e0 <memchr+0x74>
  a08a38:	2007883a 	mov	r3,r4
  a08a3c:	003fd106 	br	a08984 <memchr+0x18>
  a08a40:	0005883a 	mov	r2,zero
  a08a44:	f800283a 	ret
  a08a48:	3805883a 	mov	r2,r7
  a08a4c:	f800283a 	ret

00a08a50 <memcpy>:
  a08a50:	01c003c4 	movi	r7,15
  a08a54:	2007883a 	mov	r3,r4
  a08a58:	3980032e 	bgeu	r7,r6,a08a68 <memcpy+0x18>
  a08a5c:	2904b03a 	or	r2,r5,r4
  a08a60:	108000cc 	andi	r2,r2,3
  a08a64:	10000926 	beq	r2,zero,a08a8c <memcpy+0x3c>
  a08a68:	30000626 	beq	r6,zero,a08a84 <memcpy+0x34>
  a08a6c:	30cd883a 	add	r6,r6,r3
  a08a70:	28800003 	ldbu	r2,0(r5)
  a08a74:	29400044 	addi	r5,r5,1
  a08a78:	18800005 	stb	r2,0(r3)
  a08a7c:	18c00044 	addi	r3,r3,1
  a08a80:	30fffb1e 	bne	r6,r3,a08a70 <memcpy+0x20>
  a08a84:	2005883a 	mov	r2,r4
  a08a88:	f800283a 	ret
  a08a8c:	3811883a 	mov	r8,r7
  a08a90:	200f883a 	mov	r7,r4
  a08a94:	28c00017 	ldw	r3,0(r5)
  a08a98:	31bffc04 	addi	r6,r6,-16
  a08a9c:	38c00015 	stw	r3,0(r7)
  a08aa0:	28800117 	ldw	r2,4(r5)
  a08aa4:	38800115 	stw	r2,4(r7)
  a08aa8:	28c00217 	ldw	r3,8(r5)
  a08aac:	38c00215 	stw	r3,8(r7)
  a08ab0:	28800317 	ldw	r2,12(r5)
  a08ab4:	29400404 	addi	r5,r5,16
  a08ab8:	38800315 	stw	r2,12(r7)
  a08abc:	39c00404 	addi	r7,r7,16
  a08ac0:	41bff436 	bltu	r8,r6,a08a94 <memcpy+0x44>
  a08ac4:	008000c4 	movi	r2,3
  a08ac8:	1180072e 	bgeu	r2,r6,a08ae8 <memcpy+0x98>
  a08acc:	1007883a 	mov	r3,r2
  a08ad0:	28800017 	ldw	r2,0(r5)
  a08ad4:	31bfff04 	addi	r6,r6,-4
  a08ad8:	29400104 	addi	r5,r5,4
  a08adc:	38800015 	stw	r2,0(r7)
  a08ae0:	39c00104 	addi	r7,r7,4
  a08ae4:	19bffa36 	bltu	r3,r6,a08ad0 <memcpy+0x80>
  a08ae8:	3807883a 	mov	r3,r7
  a08aec:	003fde06 	br	a08a68 <memcpy+0x18>

00a08af0 <memmove>:
  a08af0:	2807883a 	mov	r3,r5
  a08af4:	2011883a 	mov	r8,r4
  a08af8:	29000c2e 	bgeu	r5,r4,a08b2c <memmove+0x3c>
  a08afc:	298f883a 	add	r7,r5,r6
  a08b00:	21c00a2e 	bgeu	r4,r7,a08b2c <memmove+0x3c>
  a08b04:	30000726 	beq	r6,zero,a08b24 <memmove+0x34>
  a08b08:	2187883a 	add	r3,r4,r6
  a08b0c:	198dc83a 	sub	r6,r3,r6
  a08b10:	39ffffc4 	addi	r7,r7,-1
  a08b14:	38800003 	ldbu	r2,0(r7)
  a08b18:	18ffffc4 	addi	r3,r3,-1
  a08b1c:	18800005 	stb	r2,0(r3)
  a08b20:	19bffb1e 	bne	r3,r6,a08b10 <memmove+0x20>
  a08b24:	2005883a 	mov	r2,r4
  a08b28:	f800283a 	ret
  a08b2c:	01c003c4 	movi	r7,15
  a08b30:	39800a36 	bltu	r7,r6,a08b5c <memmove+0x6c>
  a08b34:	303ffb26 	beq	r6,zero,a08b24 <memmove+0x34>
  a08b38:	400f883a 	mov	r7,r8
  a08b3c:	320d883a 	add	r6,r6,r8
  a08b40:	28800003 	ldbu	r2,0(r5)
  a08b44:	29400044 	addi	r5,r5,1
  a08b48:	38800005 	stb	r2,0(r7)
  a08b4c:	39c00044 	addi	r7,r7,1
  a08b50:	39bffb1e 	bne	r7,r6,a08b40 <memmove+0x50>
  a08b54:	2005883a 	mov	r2,r4
  a08b58:	f800283a 	ret
  a08b5c:	1904b03a 	or	r2,r3,r4
  a08b60:	108000cc 	andi	r2,r2,3
  a08b64:	103ff31e 	bne	r2,zero,a08b34 <memmove+0x44>
  a08b68:	3811883a 	mov	r8,r7
  a08b6c:	180b883a 	mov	r5,r3
  a08b70:	200f883a 	mov	r7,r4
  a08b74:	28c00017 	ldw	r3,0(r5)
  a08b78:	31bffc04 	addi	r6,r6,-16
  a08b7c:	38c00015 	stw	r3,0(r7)
  a08b80:	28800117 	ldw	r2,4(r5)
  a08b84:	38800115 	stw	r2,4(r7)
  a08b88:	28c00217 	ldw	r3,8(r5)
  a08b8c:	38c00215 	stw	r3,8(r7)
  a08b90:	28800317 	ldw	r2,12(r5)
  a08b94:	29400404 	addi	r5,r5,16
  a08b98:	38800315 	stw	r2,12(r7)
  a08b9c:	39c00404 	addi	r7,r7,16
  a08ba0:	41bff436 	bltu	r8,r6,a08b74 <memmove+0x84>
  a08ba4:	008000c4 	movi	r2,3
  a08ba8:	1180072e 	bgeu	r2,r6,a08bc8 <memmove+0xd8>
  a08bac:	1007883a 	mov	r3,r2
  a08bb0:	28800017 	ldw	r2,0(r5)
  a08bb4:	31bfff04 	addi	r6,r6,-4
  a08bb8:	29400104 	addi	r5,r5,4
  a08bbc:	38800015 	stw	r2,0(r7)
  a08bc0:	39c00104 	addi	r7,r7,4
  a08bc4:	19bffa36 	bltu	r3,r6,a08bb0 <memmove+0xc0>
  a08bc8:	3811883a 	mov	r8,r7
  a08bcc:	003fd906 	br	a08b34 <memmove+0x44>

00a08bd0 <memset>:
  a08bd0:	008000c4 	movi	r2,3
  a08bd4:	29403fcc 	andi	r5,r5,255
  a08bd8:	2007883a 	mov	r3,r4
  a08bdc:	1180022e 	bgeu	r2,r6,a08be8 <memset+0x18>
  a08be0:	2084703a 	and	r2,r4,r2
  a08be4:	10000826 	beq	r2,zero,a08c08 <memset+0x38>
  a08be8:	30000526 	beq	r6,zero,a08c00 <memset+0x30>
  a08bec:	2805883a 	mov	r2,r5
  a08bf0:	30cd883a 	add	r6,r6,r3
  a08bf4:	18800005 	stb	r2,0(r3)
  a08bf8:	18c00044 	addi	r3,r3,1
  a08bfc:	19bffd1e 	bne	r3,r6,a08bf4 <memset+0x24>
  a08c00:	2005883a 	mov	r2,r4
  a08c04:	f800283a 	ret
  a08c08:	2804923a 	slli	r2,r5,8
  a08c0c:	020003c4 	movi	r8,15
  a08c10:	200f883a 	mov	r7,r4
  a08c14:	2884b03a 	or	r2,r5,r2
  a08c18:	1006943a 	slli	r3,r2,16
  a08c1c:	10c6b03a 	or	r3,r2,r3
  a08c20:	41800a2e 	bgeu	r8,r6,a08c4c <memset+0x7c>
  a08c24:	4005883a 	mov	r2,r8
  a08c28:	31bffc04 	addi	r6,r6,-16
  a08c2c:	38c00015 	stw	r3,0(r7)
  a08c30:	38c00115 	stw	r3,4(r7)
  a08c34:	38c00215 	stw	r3,8(r7)
  a08c38:	38c00315 	stw	r3,12(r7)
  a08c3c:	39c00404 	addi	r7,r7,16
  a08c40:	11bff936 	bltu	r2,r6,a08c28 <memset+0x58>
  a08c44:	008000c4 	movi	r2,3
  a08c48:	1180052e 	bgeu	r2,r6,a08c60 <memset+0x90>
  a08c4c:	31bfff04 	addi	r6,r6,-4
  a08c50:	008000c4 	movi	r2,3
  a08c54:	38c00015 	stw	r3,0(r7)
  a08c58:	39c00104 	addi	r7,r7,4
  a08c5c:	11bffb36 	bltu	r2,r6,a08c4c <memset+0x7c>
  a08c60:	3807883a 	mov	r3,r7
  a08c64:	003fe006 	br	a08be8 <memset+0x18>

00a08c68 <_Bfree>:
  a08c68:	28000826 	beq	r5,zero,a08c8c <_Bfree+0x24>
  a08c6c:	28800117 	ldw	r2,4(r5)
  a08c70:	21001317 	ldw	r4,76(r4)
  a08c74:	1085883a 	add	r2,r2,r2
  a08c78:	1085883a 	add	r2,r2,r2
  a08c7c:	1105883a 	add	r2,r2,r4
  a08c80:	10c00017 	ldw	r3,0(r2)
  a08c84:	28c00015 	stw	r3,0(r5)
  a08c88:	11400015 	stw	r5,0(r2)
  a08c8c:	f800283a 	ret

00a08c90 <__hi0bits>:
  a08c90:	20bfffec 	andhi	r2,r4,65535
  a08c94:	10001426 	beq	r2,zero,a08ce8 <__hi0bits+0x58>
  a08c98:	0007883a 	mov	r3,zero
  a08c9c:	20bfc02c 	andhi	r2,r4,65280
  a08ca0:	1000021e 	bne	r2,zero,a08cac <__hi0bits+0x1c>
  a08ca4:	2008923a 	slli	r4,r4,8
  a08ca8:	18c00204 	addi	r3,r3,8
  a08cac:	20bc002c 	andhi	r2,r4,61440
  a08cb0:	1000021e 	bne	r2,zero,a08cbc <__hi0bits+0x2c>
  a08cb4:	2008913a 	slli	r4,r4,4
  a08cb8:	18c00104 	addi	r3,r3,4
  a08cbc:	20b0002c 	andhi	r2,r4,49152
  a08cc0:	1000031e 	bne	r2,zero,a08cd0 <__hi0bits+0x40>
  a08cc4:	2105883a 	add	r2,r4,r4
  a08cc8:	18c00084 	addi	r3,r3,2
  a08ccc:	1089883a 	add	r4,r2,r2
  a08cd0:	20000316 	blt	r4,zero,a08ce0 <__hi0bits+0x50>
  a08cd4:	2090002c 	andhi	r2,r4,16384
  a08cd8:	10000626 	beq	r2,zero,a08cf4 <__hi0bits+0x64>
  a08cdc:	18c00044 	addi	r3,r3,1
  a08ce0:	1805883a 	mov	r2,r3
  a08ce4:	f800283a 	ret
  a08ce8:	2008943a 	slli	r4,r4,16
  a08cec:	00c00404 	movi	r3,16
  a08cf0:	003fea06 	br	a08c9c <__hi0bits+0xc>
  a08cf4:	00c00804 	movi	r3,32
  a08cf8:	1805883a 	mov	r2,r3
  a08cfc:	f800283a 	ret

00a08d00 <__lo0bits>:
  a08d00:	20c00017 	ldw	r3,0(r4)
  a08d04:	188001cc 	andi	r2,r3,7
  a08d08:	10000a26 	beq	r2,zero,a08d34 <__lo0bits+0x34>
  a08d0c:	1880004c 	andi	r2,r3,1
  a08d10:	1005003a 	cmpeq	r2,r2,zero
  a08d14:	10002126 	beq	r2,zero,a08d9c <__lo0bits+0x9c>
  a08d18:	1880008c 	andi	r2,r3,2
  a08d1c:	1000251e 	bne	r2,zero,a08db4 <__lo0bits+0xb4>
  a08d20:	1804d0ba 	srli	r2,r3,2
  a08d24:	01400084 	movi	r5,2
  a08d28:	20800015 	stw	r2,0(r4)
  a08d2c:	2805883a 	mov	r2,r5
  a08d30:	f800283a 	ret
  a08d34:	18bfffcc 	andi	r2,r3,65535
  a08d38:	10001526 	beq	r2,zero,a08d90 <__lo0bits+0x90>
  a08d3c:	000b883a 	mov	r5,zero
  a08d40:	18803fcc 	andi	r2,r3,255
  a08d44:	1000021e 	bne	r2,zero,a08d50 <__lo0bits+0x50>
  a08d48:	1806d23a 	srli	r3,r3,8
  a08d4c:	29400204 	addi	r5,r5,8
  a08d50:	188003cc 	andi	r2,r3,15
  a08d54:	1000021e 	bne	r2,zero,a08d60 <__lo0bits+0x60>
  a08d58:	1806d13a 	srli	r3,r3,4
  a08d5c:	29400104 	addi	r5,r5,4
  a08d60:	188000cc 	andi	r2,r3,3
  a08d64:	1000021e 	bne	r2,zero,a08d70 <__lo0bits+0x70>
  a08d68:	1806d0ba 	srli	r3,r3,2
  a08d6c:	29400084 	addi	r5,r5,2
  a08d70:	1880004c 	andi	r2,r3,1
  a08d74:	1000031e 	bne	r2,zero,a08d84 <__lo0bits+0x84>
  a08d78:	1806d07a 	srli	r3,r3,1
  a08d7c:	18000a26 	beq	r3,zero,a08da8 <__lo0bits+0xa8>
  a08d80:	29400044 	addi	r5,r5,1
  a08d84:	2805883a 	mov	r2,r5
  a08d88:	20c00015 	stw	r3,0(r4)
  a08d8c:	f800283a 	ret
  a08d90:	1806d43a 	srli	r3,r3,16
  a08d94:	01400404 	movi	r5,16
  a08d98:	003fe906 	br	a08d40 <__lo0bits+0x40>
  a08d9c:	000b883a 	mov	r5,zero
  a08da0:	2805883a 	mov	r2,r5
  a08da4:	f800283a 	ret
  a08da8:	01400804 	movi	r5,32
  a08dac:	2805883a 	mov	r2,r5
  a08db0:	f800283a 	ret
  a08db4:	1804d07a 	srli	r2,r3,1
  a08db8:	01400044 	movi	r5,1
  a08dbc:	20800015 	stw	r2,0(r4)
  a08dc0:	003fda06 	br	a08d2c <__lo0bits+0x2c>

00a08dc4 <__mcmp>:
  a08dc4:	20800417 	ldw	r2,16(r4)
  a08dc8:	28c00417 	ldw	r3,16(r5)
  a08dcc:	10cfc83a 	sub	r7,r2,r3
  a08dd0:	38000c1e 	bne	r7,zero,a08e04 <__mcmp+0x40>
  a08dd4:	18c5883a 	add	r2,r3,r3
  a08dd8:	1085883a 	add	r2,r2,r2
  a08ddc:	10c00504 	addi	r3,r2,20
  a08de0:	21000504 	addi	r4,r4,20
  a08de4:	28cb883a 	add	r5,r5,r3
  a08de8:	2085883a 	add	r2,r4,r2
  a08dec:	10bfff04 	addi	r2,r2,-4
  a08df0:	297fff04 	addi	r5,r5,-4
  a08df4:	11800017 	ldw	r6,0(r2)
  a08df8:	28c00017 	ldw	r3,0(r5)
  a08dfc:	30c0031e 	bne	r6,r3,a08e0c <__mcmp+0x48>
  a08e00:	20bffa36 	bltu	r4,r2,a08dec <__mcmp+0x28>
  a08e04:	3805883a 	mov	r2,r7
  a08e08:	f800283a 	ret
  a08e0c:	30c00336 	bltu	r6,r3,a08e1c <__mcmp+0x58>
  a08e10:	01c00044 	movi	r7,1
  a08e14:	3805883a 	mov	r2,r7
  a08e18:	f800283a 	ret
  a08e1c:	01ffffc4 	movi	r7,-1
  a08e20:	003ff806 	br	a08e04 <__mcmp+0x40>

00a08e24 <__ulp>:
  a08e24:	295ffc2c 	andhi	r5,r5,32752
  a08e28:	013f3034 	movhi	r4,64704
  a08e2c:	290b883a 	add	r5,r5,r4
  a08e30:	0145c83a 	sub	r2,zero,r5
  a08e34:	1007d53a 	srai	r3,r2,20
  a08e38:	000d883a 	mov	r6,zero
  a08e3c:	0140040e 	bge	zero,r5,a08e50 <__ulp+0x2c>
  a08e40:	280f883a 	mov	r7,r5
  a08e44:	3807883a 	mov	r3,r7
  a08e48:	3005883a 	mov	r2,r6
  a08e4c:	f800283a 	ret
  a08e50:	008004c4 	movi	r2,19
  a08e54:	193ffb04 	addi	r4,r3,-20
  a08e58:	10c00c0e 	bge	r2,r3,a08e8c <__ulp+0x68>
  a08e5c:	008007c4 	movi	r2,31
  a08e60:	1107c83a 	sub	r3,r2,r4
  a08e64:	00800784 	movi	r2,30
  a08e68:	01400044 	movi	r5,1
  a08e6c:	11000216 	blt	r2,r4,a08e78 <__ulp+0x54>
  a08e70:	00800044 	movi	r2,1
  a08e74:	10ca983a 	sll	r5,r2,r3
  a08e78:	000f883a 	mov	r7,zero
  a08e7c:	280d883a 	mov	r6,r5
  a08e80:	3807883a 	mov	r3,r7
  a08e84:	3005883a 	mov	r2,r6
  a08e88:	f800283a 	ret
  a08e8c:	00800234 	movhi	r2,8
  a08e90:	10cfd83a 	sra	r7,r2,r3
  a08e94:	000d883a 	mov	r6,zero
  a08e98:	3005883a 	mov	r2,r6
  a08e9c:	3807883a 	mov	r3,r7
  a08ea0:	f800283a 	ret

00a08ea4 <__b2d>:
  a08ea4:	20800417 	ldw	r2,16(r4)
  a08ea8:	defff904 	addi	sp,sp,-28
  a08eac:	dd000415 	stw	r20,16(sp)
  a08eb0:	1085883a 	add	r2,r2,r2
  a08eb4:	25000504 	addi	r20,r4,20
  a08eb8:	1085883a 	add	r2,r2,r2
  a08ebc:	dc000015 	stw	r16,0(sp)
  a08ec0:	a0a1883a 	add	r16,r20,r2
  a08ec4:	dd400515 	stw	r21,20(sp)
  a08ec8:	857fff17 	ldw	r21,-4(r16)
  a08ecc:	dc400115 	stw	r17,4(sp)
  a08ed0:	dfc00615 	stw	ra,24(sp)
  a08ed4:	a809883a 	mov	r4,r21
  a08ed8:	2823883a 	mov	r17,r5
  a08edc:	dcc00315 	stw	r19,12(sp)
  a08ee0:	dc800215 	stw	r18,8(sp)
  a08ee4:	0a08c900 	call	a08c90 <__hi0bits>
  a08ee8:	100b883a 	mov	r5,r2
  a08eec:	00800804 	movi	r2,32
  a08ef0:	1145c83a 	sub	r2,r2,r5
  a08ef4:	88800015 	stw	r2,0(r17)
  a08ef8:	00800284 	movi	r2,10
  a08efc:	80ffff04 	addi	r3,r16,-4
  a08f00:	11401416 	blt	r2,r5,a08f54 <__b2d+0xb0>
  a08f04:	008002c4 	movi	r2,11
  a08f08:	1149c83a 	sub	r4,r2,r5
  a08f0c:	a0c02736 	bltu	r20,r3,a08fac <__b2d+0x108>
  a08f10:	000d883a 	mov	r6,zero
  a08f14:	28800544 	addi	r2,r5,21
  a08f18:	a906d83a 	srl	r3,r21,r4
  a08f1c:	a884983a 	sll	r2,r21,r2
  a08f20:	1ccffc34 	orhi	r19,r3,16368
  a08f24:	11a4b03a 	or	r18,r2,r6
  a08f28:	9005883a 	mov	r2,r18
  a08f2c:	9807883a 	mov	r3,r19
  a08f30:	dfc00617 	ldw	ra,24(sp)
  a08f34:	dd400517 	ldw	r21,20(sp)
  a08f38:	dd000417 	ldw	r20,16(sp)
  a08f3c:	dcc00317 	ldw	r19,12(sp)
  a08f40:	dc800217 	ldw	r18,8(sp)
  a08f44:	dc400117 	ldw	r17,4(sp)
  a08f48:	dc000017 	ldw	r16,0(sp)
  a08f4c:	dec00704 	addi	sp,sp,28
  a08f50:	f800283a 	ret
  a08f54:	a0c00e36 	bltu	r20,r3,a08f90 <__b2d+0xec>
  a08f58:	293ffd44 	addi	r4,r5,-11
  a08f5c:	000d883a 	mov	r6,zero
  a08f60:	20000f26 	beq	r4,zero,a08fa0 <__b2d+0xfc>
  a08f64:	00800804 	movi	r2,32
  a08f68:	110bc83a 	sub	r5,r2,r4
  a08f6c:	a0c01236 	bltu	r20,r3,a08fb8 <__b2d+0x114>
  a08f70:	000f883a 	mov	r7,zero
  a08f74:	a904983a 	sll	r2,r21,r4
  a08f78:	3146d83a 	srl	r3,r6,r5
  a08f7c:	3108983a 	sll	r4,r6,r4
  a08f80:	108ffc34 	orhi	r2,r2,16368
  a08f84:	18a6b03a 	or	r19,r3,r2
  a08f88:	3924b03a 	or	r18,r7,r4
  a08f8c:	003fe606 	br	a08f28 <__b2d+0x84>
  a08f90:	293ffd44 	addi	r4,r5,-11
  a08f94:	81bffe17 	ldw	r6,-8(r16)
  a08f98:	80fffe04 	addi	r3,r16,-8
  a08f9c:	203ff11e 	bne	r4,zero,a08f64 <__b2d+0xc0>
  a08fa0:	accffc34 	orhi	r19,r21,16368
  a08fa4:	3025883a 	mov	r18,r6
  a08fa8:	003fdf06 	br	a08f28 <__b2d+0x84>
  a08fac:	18bfff17 	ldw	r2,-4(r3)
  a08fb0:	110cd83a 	srl	r6,r2,r4
  a08fb4:	003fd706 	br	a08f14 <__b2d+0x70>
  a08fb8:	18bfff17 	ldw	r2,-4(r3)
  a08fbc:	114ed83a 	srl	r7,r2,r5
  a08fc0:	003fec06 	br	a08f74 <__b2d+0xd0>

00a08fc4 <__ratio>:
  a08fc4:	defff904 	addi	sp,sp,-28
  a08fc8:	dc400215 	stw	r17,8(sp)
  a08fcc:	2823883a 	mov	r17,r5
  a08fd0:	d80b883a 	mov	r5,sp
  a08fd4:	dfc00615 	stw	ra,24(sp)
  a08fd8:	dd000515 	stw	r20,20(sp)
  a08fdc:	dcc00415 	stw	r19,16(sp)
  a08fe0:	dc800315 	stw	r18,12(sp)
  a08fe4:	2025883a 	mov	r18,r4
  a08fe8:	0a08ea40 	call	a08ea4 <__b2d>
  a08fec:	8809883a 	mov	r4,r17
  a08ff0:	d9400104 	addi	r5,sp,4
  a08ff4:	1027883a 	mov	r19,r2
  a08ff8:	1829883a 	mov	r20,r3
  a08ffc:	0a08ea40 	call	a08ea4 <__b2d>
  a09000:	89000417 	ldw	r4,16(r17)
  a09004:	91c00417 	ldw	r7,16(r18)
  a09008:	d9800117 	ldw	r6,4(sp)
  a0900c:	180b883a 	mov	r5,r3
  a09010:	390fc83a 	sub	r7,r7,r4
  a09014:	1009883a 	mov	r4,r2
  a09018:	d8800017 	ldw	r2,0(sp)
  a0901c:	380e917a 	slli	r7,r7,5
  a09020:	2011883a 	mov	r8,r4
  a09024:	1185c83a 	sub	r2,r2,r6
  a09028:	11c5883a 	add	r2,r2,r7
  a0902c:	1006953a 	slli	r3,r2,20
  a09030:	2813883a 	mov	r9,r5
  a09034:	00800d0e 	bge	zero,r2,a0906c <__ratio+0xa8>
  a09038:	1d29883a 	add	r20,r3,r20
  a0903c:	a00b883a 	mov	r5,r20
  a09040:	480f883a 	mov	r7,r9
  a09044:	9809883a 	mov	r4,r19
  a09048:	400d883a 	mov	r6,r8
  a0904c:	0a029200 	call	a02920 <__divdf3>
  a09050:	dfc00617 	ldw	ra,24(sp)
  a09054:	dd000517 	ldw	r20,20(sp)
  a09058:	dcc00417 	ldw	r19,16(sp)
  a0905c:	dc800317 	ldw	r18,12(sp)
  a09060:	dc400217 	ldw	r17,8(sp)
  a09064:	dec00704 	addi	sp,sp,28
  a09068:	f800283a 	ret
  a0906c:	28d3c83a 	sub	r9,r5,r3
  a09070:	003ff206 	br	a0903c <__ratio+0x78>

00a09074 <_mprec_log10>:
  a09074:	defffe04 	addi	sp,sp,-8
  a09078:	008005c4 	movi	r2,23
  a0907c:	dc000015 	stw	r16,0(sp)
  a09080:	dfc00115 	stw	ra,4(sp)
  a09084:	2021883a 	mov	r16,r4
  a09088:	11000c16 	blt	r2,r4,a090bc <_mprec_log10+0x48>
  a0908c:	200490fa 	slli	r2,r4,3
  a09090:	00c02874 	movhi	r3,161
  a09094:	18c36d04 	addi	r3,r3,3508
  a09098:	10c5883a 	add	r2,r2,r3
  a0909c:	12400117 	ldw	r9,4(r2)
  a090a0:	12000017 	ldw	r8,0(r2)
  a090a4:	4807883a 	mov	r3,r9
  a090a8:	4005883a 	mov	r2,r8
  a090ac:	dfc00117 	ldw	ra,4(sp)
  a090b0:	dc000017 	ldw	r16,0(sp)
  a090b4:	dec00204 	addi	sp,sp,8
  a090b8:	f800283a 	ret
  a090bc:	0011883a 	mov	r8,zero
  a090c0:	024ffc34 	movhi	r9,16368
  a090c4:	0005883a 	mov	r2,zero
  a090c8:	00d00934 	movhi	r3,16420
  a090cc:	480b883a 	mov	r5,r9
  a090d0:	4009883a 	mov	r4,r8
  a090d4:	180f883a 	mov	r7,r3
  a090d8:	100d883a 	mov	r6,r2
  a090dc:	0a0b5580 	call	a0b558 <__muldf3>
  a090e0:	843fffc4 	addi	r16,r16,-1
  a090e4:	1011883a 	mov	r8,r2
  a090e8:	1813883a 	mov	r9,r3
  a090ec:	803ff51e 	bne	r16,zero,a090c4 <_mprec_log10+0x50>
  a090f0:	4005883a 	mov	r2,r8
  a090f4:	4807883a 	mov	r3,r9
  a090f8:	dfc00117 	ldw	ra,4(sp)
  a090fc:	dc000017 	ldw	r16,0(sp)
  a09100:	dec00204 	addi	sp,sp,8
  a09104:	f800283a 	ret

00a09108 <__copybits>:
  a09108:	297fffc4 	addi	r5,r5,-1
  a0910c:	30800417 	ldw	r2,16(r6)
  a09110:	280bd17a 	srai	r5,r5,5
  a09114:	31800504 	addi	r6,r6,20
  a09118:	1085883a 	add	r2,r2,r2
  a0911c:	294b883a 	add	r5,r5,r5
  a09120:	294b883a 	add	r5,r5,r5
  a09124:	1085883a 	add	r2,r2,r2
  a09128:	290b883a 	add	r5,r5,r4
  a0912c:	3087883a 	add	r3,r6,r2
  a09130:	29400104 	addi	r5,r5,4
  a09134:	30c0052e 	bgeu	r6,r3,a0914c <__copybits+0x44>
  a09138:	30800017 	ldw	r2,0(r6)
  a0913c:	31800104 	addi	r6,r6,4
  a09140:	20800015 	stw	r2,0(r4)
  a09144:	21000104 	addi	r4,r4,4
  a09148:	30fffb36 	bltu	r6,r3,a09138 <__copybits+0x30>
  a0914c:	2140032e 	bgeu	r4,r5,a0915c <__copybits+0x54>
  a09150:	20000015 	stw	zero,0(r4)
  a09154:	21000104 	addi	r4,r4,4
  a09158:	217ffd36 	bltu	r4,r5,a09150 <__copybits+0x48>
  a0915c:	f800283a 	ret

00a09160 <__any_on>:
  a09160:	20800417 	ldw	r2,16(r4)
  a09164:	2807d17a 	srai	r3,r5,5
  a09168:	21000504 	addi	r4,r4,20
  a0916c:	10c00d0e 	bge	r2,r3,a091a4 <__any_on+0x44>
  a09170:	1085883a 	add	r2,r2,r2
  a09174:	1085883a 	add	r2,r2,r2
  a09178:	208d883a 	add	r6,r4,r2
  a0917c:	2180182e 	bgeu	r4,r6,a091e0 <__any_on+0x80>
  a09180:	30bfff17 	ldw	r2,-4(r6)
  a09184:	30ffff04 	addi	r3,r6,-4
  a09188:	1000041e 	bne	r2,zero,a0919c <__any_on+0x3c>
  a0918c:	20c0142e 	bgeu	r4,r3,a091e0 <__any_on+0x80>
  a09190:	18ffff04 	addi	r3,r3,-4
  a09194:	18800017 	ldw	r2,0(r3)
  a09198:	103ffc26 	beq	r2,zero,a0918c <__any_on+0x2c>
  a0919c:	00800044 	movi	r2,1
  a091a0:	f800283a 	ret
  a091a4:	18800a0e 	bge	r3,r2,a091d0 <__any_on+0x70>
  a091a8:	294007cc 	andi	r5,r5,31
  a091ac:	28000826 	beq	r5,zero,a091d0 <__any_on+0x70>
  a091b0:	18c5883a 	add	r2,r3,r3
  a091b4:	1085883a 	add	r2,r2,r2
  a091b8:	208d883a 	add	r6,r4,r2
  a091bc:	30c00017 	ldw	r3,0(r6)
  a091c0:	1944d83a 	srl	r2,r3,r5
  a091c4:	1144983a 	sll	r2,r2,r5
  a091c8:	18bff41e 	bne	r3,r2,a0919c <__any_on+0x3c>
  a091cc:	003feb06 	br	a0917c <__any_on+0x1c>
  a091d0:	18c5883a 	add	r2,r3,r3
  a091d4:	1085883a 	add	r2,r2,r2
  a091d8:	208d883a 	add	r6,r4,r2
  a091dc:	003fe706 	br	a0917c <__any_on+0x1c>
  a091e0:	0005883a 	mov	r2,zero
  a091e4:	f800283a 	ret

00a091e8 <_Balloc>:
  a091e8:	20c01317 	ldw	r3,76(r4)
  a091ec:	defffb04 	addi	sp,sp,-20
  a091f0:	dcc00315 	stw	r19,12(sp)
  a091f4:	dc800215 	stw	r18,8(sp)
  a091f8:	dfc00415 	stw	ra,16(sp)
  a091fc:	2825883a 	mov	r18,r5
  a09200:	dc400115 	stw	r17,4(sp)
  a09204:	dc000015 	stw	r16,0(sp)
  a09208:	2027883a 	mov	r19,r4
  a0920c:	01800404 	movi	r6,16
  a09210:	01400104 	movi	r5,4
  a09214:	18001726 	beq	r3,zero,a09274 <_Balloc+0x8c>
  a09218:	01400044 	movi	r5,1
  a0921c:	9485883a 	add	r2,r18,r18
  a09220:	2ca2983a 	sll	r17,r5,r18
  a09224:	1085883a 	add	r2,r2,r2
  a09228:	10c7883a 	add	r3,r2,r3
  a0922c:	1c000017 	ldw	r16,0(r3)
  a09230:	8c4d883a 	add	r6,r17,r17
  a09234:	318d883a 	add	r6,r6,r6
  a09238:	9809883a 	mov	r4,r19
  a0923c:	31800504 	addi	r6,r6,20
  a09240:	80001226 	beq	r16,zero,a0928c <_Balloc+0xa4>
  a09244:	80800017 	ldw	r2,0(r16)
  a09248:	18800015 	stw	r2,0(r3)
  a0924c:	80000415 	stw	zero,16(r16)
  a09250:	80000315 	stw	zero,12(r16)
  a09254:	8005883a 	mov	r2,r16
  a09258:	dfc00417 	ldw	ra,16(sp)
  a0925c:	dcc00317 	ldw	r19,12(sp)
  a09260:	dc800217 	ldw	r18,8(sp)
  a09264:	dc400117 	ldw	r17,4(sp)
  a09268:	dc000017 	ldw	r16,0(sp)
  a0926c:	dec00504 	addi	sp,sp,20
  a09270:	f800283a 	ret
  a09274:	0a0a5b00 	call	a0a5b0 <_calloc_r>
  a09278:	1007883a 	mov	r3,r2
  a0927c:	0021883a 	mov	r16,zero
  a09280:	98801315 	stw	r2,76(r19)
  a09284:	103fe41e 	bne	r2,zero,a09218 <_Balloc+0x30>
  a09288:	003ff206 	br	a09254 <_Balloc+0x6c>
  a0928c:	0a0a5b00 	call	a0a5b0 <_calloc_r>
  a09290:	103ff026 	beq	r2,zero,a09254 <_Balloc+0x6c>
  a09294:	1021883a 	mov	r16,r2
  a09298:	14800115 	stw	r18,4(r2)
  a0929c:	14400215 	stw	r17,8(r2)
  a092a0:	003fea06 	br	a0924c <_Balloc+0x64>

00a092a4 <__d2b>:
  a092a4:	defff504 	addi	sp,sp,-44
  a092a8:	dcc00515 	stw	r19,20(sp)
  a092ac:	04c00044 	movi	r19,1
  a092b0:	dc000215 	stw	r16,8(sp)
  a092b4:	2821883a 	mov	r16,r5
  a092b8:	980b883a 	mov	r5,r19
  a092bc:	ddc00915 	stw	r23,36(sp)
  a092c0:	dd800815 	stw	r22,32(sp)
  a092c4:	dd400715 	stw	r21,28(sp)
  a092c8:	dd000615 	stw	r20,24(sp)
  a092cc:	dc800415 	stw	r18,16(sp)
  a092d0:	dc400315 	stw	r17,12(sp)
  a092d4:	dfc00a15 	stw	ra,40(sp)
  a092d8:	3023883a 	mov	r17,r6
  a092dc:	382d883a 	mov	r22,r7
  a092e0:	ddc00b17 	ldw	r23,44(sp)
  a092e4:	0a091e80 	call	a091e8 <_Balloc>
  a092e8:	1025883a 	mov	r18,r2
  a092ec:	00a00034 	movhi	r2,32768
  a092f0:	10bfffc4 	addi	r2,r2,-1
  a092f4:	8888703a 	and	r4,r17,r2
  a092f8:	202ad53a 	srli	r21,r4,20
  a092fc:	00800434 	movhi	r2,16
  a09300:	10bfffc4 	addi	r2,r2,-1
  a09304:	8886703a 	and	r3,r17,r2
  a09308:	a829003a 	cmpeq	r20,r21,zero
  a0930c:	800b883a 	mov	r5,r16
  a09310:	d8c00115 	stw	r3,4(sp)
  a09314:	94000504 	addi	r16,r18,20
  a09318:	a000021e 	bne	r20,zero,a09324 <__d2b+0x80>
  a0931c:	18c00434 	orhi	r3,r3,16
  a09320:	d8c00115 	stw	r3,4(sp)
  a09324:	28002726 	beq	r5,zero,a093c4 <__d2b+0x120>
  a09328:	d809883a 	mov	r4,sp
  a0932c:	d9400015 	stw	r5,0(sp)
  a09330:	0a08d000 	call	a08d00 <__lo0bits>
  a09334:	100d883a 	mov	r6,r2
  a09338:	10003526 	beq	r2,zero,a09410 <__d2b+0x16c>
  a0933c:	d8c00117 	ldw	r3,4(sp)
  a09340:	00800804 	movi	r2,32
  a09344:	1185c83a 	sub	r2,r2,r6
  a09348:	d9000017 	ldw	r4,0(sp)
  a0934c:	1886983a 	sll	r3,r3,r2
  a09350:	1906b03a 	or	r3,r3,r4
  a09354:	90c00515 	stw	r3,20(r18)
  a09358:	d8c00117 	ldw	r3,4(sp)
  a0935c:	1986d83a 	srl	r3,r3,r6
  a09360:	d8c00115 	stw	r3,4(sp)
  a09364:	180b003a 	cmpeq	r5,r3,zero
  a09368:	00800084 	movi	r2,2
  a0936c:	114bc83a 	sub	r5,r2,r5
  a09370:	80c00115 	stw	r3,4(r16)
  a09374:	91400415 	stw	r5,16(r18)
  a09378:	a0001a1e 	bne	r20,zero,a093e4 <__d2b+0x140>
  a0937c:	3545883a 	add	r2,r6,r21
  a09380:	10bef344 	addi	r2,r2,-1075
  a09384:	00c00d44 	movi	r3,53
  a09388:	b0800015 	stw	r2,0(r22)
  a0938c:	1987c83a 	sub	r3,r3,r6
  a09390:	b8c00015 	stw	r3,0(r23)
  a09394:	9005883a 	mov	r2,r18
  a09398:	dfc00a17 	ldw	ra,40(sp)
  a0939c:	ddc00917 	ldw	r23,36(sp)
  a093a0:	dd800817 	ldw	r22,32(sp)
  a093a4:	dd400717 	ldw	r21,28(sp)
  a093a8:	dd000617 	ldw	r20,24(sp)
  a093ac:	dcc00517 	ldw	r19,20(sp)
  a093b0:	dc800417 	ldw	r18,16(sp)
  a093b4:	dc400317 	ldw	r17,12(sp)
  a093b8:	dc000217 	ldw	r16,8(sp)
  a093bc:	dec00b04 	addi	sp,sp,44
  a093c0:	f800283a 	ret
  a093c4:	d9000104 	addi	r4,sp,4
  a093c8:	0a08d000 	call	a08d00 <__lo0bits>
  a093cc:	11800804 	addi	r6,r2,32
  a093d0:	d8800117 	ldw	r2,4(sp)
  a093d4:	94c00415 	stw	r19,16(r18)
  a093d8:	980b883a 	mov	r5,r19
  a093dc:	90800515 	stw	r2,20(r18)
  a093e0:	a03fe626 	beq	r20,zero,a0937c <__d2b+0xd8>
  a093e4:	2945883a 	add	r2,r5,r5
  a093e8:	1085883a 	add	r2,r2,r2
  a093ec:	1405883a 	add	r2,r2,r16
  a093f0:	113fff17 	ldw	r4,-4(r2)
  a093f4:	30fef384 	addi	r3,r6,-1074
  a093f8:	2820917a 	slli	r16,r5,5
  a093fc:	b0c00015 	stw	r3,0(r22)
  a09400:	0a08c900 	call	a08c90 <__hi0bits>
  a09404:	80a1c83a 	sub	r16,r16,r2
  a09408:	bc000015 	stw	r16,0(r23)
  a0940c:	003fe106 	br	a09394 <__d2b+0xf0>
  a09410:	d8800017 	ldw	r2,0(sp)
  a09414:	90800515 	stw	r2,20(r18)
  a09418:	d8c00117 	ldw	r3,4(sp)
  a0941c:	003fd106 	br	a09364 <__d2b+0xc0>

00a09420 <__mdiff>:
  a09420:	defffb04 	addi	sp,sp,-20
  a09424:	dc000015 	stw	r16,0(sp)
  a09428:	2821883a 	mov	r16,r5
  a0942c:	dc800215 	stw	r18,8(sp)
  a09430:	300b883a 	mov	r5,r6
  a09434:	2025883a 	mov	r18,r4
  a09438:	8009883a 	mov	r4,r16
  a0943c:	dc400115 	stw	r17,4(sp)
  a09440:	dfc00415 	stw	ra,16(sp)
  a09444:	dcc00315 	stw	r19,12(sp)
  a09448:	3023883a 	mov	r17,r6
  a0944c:	0a08dc40 	call	a08dc4 <__mcmp>
  a09450:	10004226 	beq	r2,zero,a0955c <__mdiff+0x13c>
  a09454:	10005016 	blt	r2,zero,a09598 <__mdiff+0x178>
  a09458:	0027883a 	mov	r19,zero
  a0945c:	81400117 	ldw	r5,4(r16)
  a09460:	9009883a 	mov	r4,r18
  a09464:	0a091e80 	call	a091e8 <_Balloc>
  a09468:	1019883a 	mov	r12,r2
  a0946c:	82800417 	ldw	r10,16(r16)
  a09470:	88800417 	ldw	r2,16(r17)
  a09474:	81800504 	addi	r6,r16,20
  a09478:	5287883a 	add	r3,r10,r10
  a0947c:	1085883a 	add	r2,r2,r2
  a09480:	18c7883a 	add	r3,r3,r3
  a09484:	1085883a 	add	r2,r2,r2
  a09488:	8a000504 	addi	r8,r17,20
  a0948c:	64c00315 	stw	r19,12(r12)
  a09490:	30db883a 	add	r13,r6,r3
  a09494:	4097883a 	add	r11,r8,r2
  a09498:	61c00504 	addi	r7,r12,20
  a0949c:	0013883a 	mov	r9,zero
  a094a0:	31000017 	ldw	r4,0(r6)
  a094a4:	41400017 	ldw	r5,0(r8)
  a094a8:	42000104 	addi	r8,r8,4
  a094ac:	20bfffcc 	andi	r2,r4,65535
  a094b0:	28ffffcc 	andi	r3,r5,65535
  a094b4:	10c5c83a 	sub	r2,r2,r3
  a094b8:	1245883a 	add	r2,r2,r9
  a094bc:	2008d43a 	srli	r4,r4,16
  a094c0:	280ad43a 	srli	r5,r5,16
  a094c4:	1007d43a 	srai	r3,r2,16
  a094c8:	3880000d 	sth	r2,0(r7)
  a094cc:	2149c83a 	sub	r4,r4,r5
  a094d0:	20c9883a 	add	r4,r4,r3
  a094d4:	3900008d 	sth	r4,2(r7)
  a094d8:	31800104 	addi	r6,r6,4
  a094dc:	39c00104 	addi	r7,r7,4
  a094e0:	2013d43a 	srai	r9,r4,16
  a094e4:	42ffee36 	bltu	r8,r11,a094a0 <__mdiff+0x80>
  a094e8:	33400c2e 	bgeu	r6,r13,a0951c <__mdiff+0xfc>
  a094ec:	30800017 	ldw	r2,0(r6)
  a094f0:	31800104 	addi	r6,r6,4
  a094f4:	10ffffcc 	andi	r3,r2,65535
  a094f8:	1a47883a 	add	r3,r3,r9
  a094fc:	1004d43a 	srli	r2,r2,16
  a09500:	1809d43a 	srai	r4,r3,16
  a09504:	38c0000d 	sth	r3,0(r7)
  a09508:	1105883a 	add	r2,r2,r4
  a0950c:	3880008d 	sth	r2,2(r7)
  a09510:	1013d43a 	srai	r9,r2,16
  a09514:	39c00104 	addi	r7,r7,4
  a09518:	337ff436 	bltu	r6,r13,a094ec <__mdiff+0xcc>
  a0951c:	38bfff17 	ldw	r2,-4(r7)
  a09520:	38ffff04 	addi	r3,r7,-4
  a09524:	1000041e 	bne	r2,zero,a09538 <__mdiff+0x118>
  a09528:	18ffff04 	addi	r3,r3,-4
  a0952c:	18800017 	ldw	r2,0(r3)
  a09530:	52bfffc4 	addi	r10,r10,-1
  a09534:	103ffc26 	beq	r2,zero,a09528 <__mdiff+0x108>
  a09538:	6005883a 	mov	r2,r12
  a0953c:	62800415 	stw	r10,16(r12)
  a09540:	dfc00417 	ldw	ra,16(sp)
  a09544:	dcc00317 	ldw	r19,12(sp)
  a09548:	dc800217 	ldw	r18,8(sp)
  a0954c:	dc400117 	ldw	r17,4(sp)
  a09550:	dc000017 	ldw	r16,0(sp)
  a09554:	dec00504 	addi	sp,sp,20
  a09558:	f800283a 	ret
  a0955c:	9009883a 	mov	r4,r18
  a09560:	000b883a 	mov	r5,zero
  a09564:	0a091e80 	call	a091e8 <_Balloc>
  a09568:	1019883a 	mov	r12,r2
  a0956c:	00800044 	movi	r2,1
  a09570:	60800415 	stw	r2,16(r12)
  a09574:	6005883a 	mov	r2,r12
  a09578:	60000515 	stw	zero,20(r12)
  a0957c:	dfc00417 	ldw	ra,16(sp)
  a09580:	dcc00317 	ldw	r19,12(sp)
  a09584:	dc800217 	ldw	r18,8(sp)
  a09588:	dc400117 	ldw	r17,4(sp)
  a0958c:	dc000017 	ldw	r16,0(sp)
  a09590:	dec00504 	addi	sp,sp,20
  a09594:	f800283a 	ret
  a09598:	880d883a 	mov	r6,r17
  a0959c:	04c00044 	movi	r19,1
  a095a0:	8023883a 	mov	r17,r16
  a095a4:	3021883a 	mov	r16,r6
  a095a8:	003fac06 	br	a0945c <__mdiff+0x3c>

00a095ac <__lshift>:
  a095ac:	defff904 	addi	sp,sp,-28
  a095b0:	28800417 	ldw	r2,16(r5)
  a095b4:	dc000015 	stw	r16,0(sp)
  a095b8:	3021d17a 	srai	r16,r6,5
  a095bc:	28c00217 	ldw	r3,8(r5)
  a095c0:	10800044 	addi	r2,r2,1
  a095c4:	dc400115 	stw	r17,4(sp)
  a095c8:	80a3883a 	add	r17,r16,r2
  a095cc:	dd400515 	stw	r21,20(sp)
  a095d0:	dd000415 	stw	r20,16(sp)
  a095d4:	dc800215 	stw	r18,8(sp)
  a095d8:	dfc00615 	stw	ra,24(sp)
  a095dc:	2825883a 	mov	r18,r5
  a095e0:	dcc00315 	stw	r19,12(sp)
  a095e4:	3029883a 	mov	r20,r6
  a095e8:	202b883a 	mov	r21,r4
  a095ec:	29400117 	ldw	r5,4(r5)
  a095f0:	1c40030e 	bge	r3,r17,a09600 <__lshift+0x54>
  a095f4:	18c7883a 	add	r3,r3,r3
  a095f8:	29400044 	addi	r5,r5,1
  a095fc:	1c7ffd16 	blt	r3,r17,a095f4 <__lshift+0x48>
  a09600:	a809883a 	mov	r4,r21
  a09604:	0a091e80 	call	a091e8 <_Balloc>
  a09608:	1027883a 	mov	r19,r2
  a0960c:	11400504 	addi	r5,r2,20
  a09610:	0400090e 	bge	zero,r16,a09638 <__lshift+0x8c>
  a09614:	2805883a 	mov	r2,r5
  a09618:	0007883a 	mov	r3,zero
  a0961c:	18c00044 	addi	r3,r3,1
  a09620:	10000015 	stw	zero,0(r2)
  a09624:	10800104 	addi	r2,r2,4
  a09628:	80fffc1e 	bne	r16,r3,a0961c <__lshift+0x70>
  a0962c:	8405883a 	add	r2,r16,r16
  a09630:	1085883a 	add	r2,r2,r2
  a09634:	288b883a 	add	r5,r5,r2
  a09638:	90800417 	ldw	r2,16(r18)
  a0963c:	91000504 	addi	r4,r18,20
  a09640:	a18007cc 	andi	r6,r20,31
  a09644:	1085883a 	add	r2,r2,r2
  a09648:	1085883a 	add	r2,r2,r2
  a0964c:	208f883a 	add	r7,r4,r2
  a09650:	30001e26 	beq	r6,zero,a096cc <__lshift+0x120>
  a09654:	00800804 	movi	r2,32
  a09658:	1191c83a 	sub	r8,r2,r6
  a0965c:	0007883a 	mov	r3,zero
  a09660:	20800017 	ldw	r2,0(r4)
  a09664:	1184983a 	sll	r2,r2,r6
  a09668:	1884b03a 	or	r2,r3,r2
  a0966c:	28800015 	stw	r2,0(r5)
  a09670:	20c00017 	ldw	r3,0(r4)
  a09674:	21000104 	addi	r4,r4,4
  a09678:	29400104 	addi	r5,r5,4
  a0967c:	1a06d83a 	srl	r3,r3,r8
  a09680:	21fff736 	bltu	r4,r7,a09660 <__lshift+0xb4>
  a09684:	28c00015 	stw	r3,0(r5)
  a09688:	18000126 	beq	r3,zero,a09690 <__lshift+0xe4>
  a0968c:	8c400044 	addi	r17,r17,1
  a09690:	88bfffc4 	addi	r2,r17,-1
  a09694:	98800415 	stw	r2,16(r19)
  a09698:	a809883a 	mov	r4,r21
  a0969c:	900b883a 	mov	r5,r18
  a096a0:	0a08c680 	call	a08c68 <_Bfree>
  a096a4:	9805883a 	mov	r2,r19
  a096a8:	dfc00617 	ldw	ra,24(sp)
  a096ac:	dd400517 	ldw	r21,20(sp)
  a096b0:	dd000417 	ldw	r20,16(sp)
  a096b4:	dcc00317 	ldw	r19,12(sp)
  a096b8:	dc800217 	ldw	r18,8(sp)
  a096bc:	dc400117 	ldw	r17,4(sp)
  a096c0:	dc000017 	ldw	r16,0(sp)
  a096c4:	dec00704 	addi	sp,sp,28
  a096c8:	f800283a 	ret
  a096cc:	20800017 	ldw	r2,0(r4)
  a096d0:	21000104 	addi	r4,r4,4
  a096d4:	28800015 	stw	r2,0(r5)
  a096d8:	29400104 	addi	r5,r5,4
  a096dc:	21ffec2e 	bgeu	r4,r7,a09690 <__lshift+0xe4>
  a096e0:	20800017 	ldw	r2,0(r4)
  a096e4:	21000104 	addi	r4,r4,4
  a096e8:	28800015 	stw	r2,0(r5)
  a096ec:	29400104 	addi	r5,r5,4
  a096f0:	21fff636 	bltu	r4,r7,a096cc <__lshift+0x120>
  a096f4:	003fe606 	br	a09690 <__lshift+0xe4>

00a096f8 <__multiply>:
  a096f8:	defff904 	addi	sp,sp,-28
  a096fc:	dcc00315 	stw	r19,12(sp)
  a09700:	dc800215 	stw	r18,8(sp)
  a09704:	2cc00417 	ldw	r19,16(r5)
  a09708:	34800417 	ldw	r18,16(r6)
  a0970c:	dd000415 	stw	r20,16(sp)
  a09710:	dc400115 	stw	r17,4(sp)
  a09714:	dfc00615 	stw	ra,24(sp)
  a09718:	dd400515 	stw	r21,20(sp)
  a0971c:	dc000015 	stw	r16,0(sp)
  a09720:	2823883a 	mov	r17,r5
  a09724:	3029883a 	mov	r20,r6
  a09728:	9c80040e 	bge	r19,r18,a0973c <__multiply+0x44>
  a0972c:	9027883a 	mov	r19,r18
  a09730:	2c800417 	ldw	r18,16(r5)
  a09734:	2829883a 	mov	r20,r5
  a09738:	3023883a 	mov	r17,r6
  a0973c:	88800217 	ldw	r2,8(r17)
  a09740:	9ca1883a 	add	r16,r19,r18
  a09744:	89400117 	ldw	r5,4(r17)
  a09748:	1400010e 	bge	r2,r16,a09750 <__multiply+0x58>
  a0974c:	29400044 	addi	r5,r5,1
  a09750:	0a091e80 	call	a091e8 <_Balloc>
  a09754:	102b883a 	mov	r21,r2
  a09758:	8405883a 	add	r2,r16,r16
  a0975c:	1085883a 	add	r2,r2,r2
  a09760:	a9000504 	addi	r4,r21,20
  a09764:	209d883a 	add	r14,r4,r2
  a09768:	2380042e 	bgeu	r4,r14,a0977c <__multiply+0x84>
  a0976c:	2005883a 	mov	r2,r4
  a09770:	10000015 	stw	zero,0(r2)
  a09774:	10800104 	addi	r2,r2,4
  a09778:	13bffd36 	bltu	r2,r14,a09770 <__multiply+0x78>
  a0977c:	9485883a 	add	r2,r18,r18
  a09780:	9cc7883a 	add	r3,r19,r19
  a09784:	a1800504 	addi	r6,r20,20
  a09788:	1085883a 	add	r2,r2,r2
  a0978c:	8b400504 	addi	r13,r17,20
  a09790:	18c7883a 	add	r3,r3,r3
  a09794:	309f883a 	add	r15,r6,r2
  a09798:	68d7883a 	add	r11,r13,r3
  a0979c:	33c03b2e 	bgeu	r6,r15,a0988c <__multiply+0x194>
  a097a0:	2019883a 	mov	r12,r4
  a097a4:	30800017 	ldw	r2,0(r6)
  a097a8:	127fffcc 	andi	r9,r2,65535
  a097ac:	48001826 	beq	r9,zero,a09810 <__multiply+0x118>
  a097b0:	6811883a 	mov	r8,r13
  a097b4:	600f883a 	mov	r7,r12
  a097b8:	0015883a 	mov	r10,zero
  a097bc:	40c00017 	ldw	r3,0(r8)
  a097c0:	39400017 	ldw	r5,0(r7)
  a097c4:	42000104 	addi	r8,r8,4
  a097c8:	193fffcc 	andi	r4,r3,65535
  a097cc:	4909383a 	mul	r4,r9,r4
  a097d0:	1806d43a 	srli	r3,r3,16
  a097d4:	28bfffcc 	andi	r2,r5,65535
  a097d8:	5085883a 	add	r2,r10,r2
  a097dc:	2089883a 	add	r4,r4,r2
  a097e0:	48c7383a 	mul	r3,r9,r3
  a097e4:	280ad43a 	srli	r5,r5,16
  a097e8:	2004d43a 	srli	r2,r4,16
  a097ec:	3900000d 	sth	r4,0(r7)
  a097f0:	1947883a 	add	r3,r3,r5
  a097f4:	10c5883a 	add	r2,r2,r3
  a097f8:	3880008d 	sth	r2,2(r7)
  a097fc:	1014d43a 	srli	r10,r2,16
  a09800:	39c00104 	addi	r7,r7,4
  a09804:	42ffed36 	bltu	r8,r11,a097bc <__multiply+0xc4>
  a09808:	3a800015 	stw	r10,0(r7)
  a0980c:	30800017 	ldw	r2,0(r6)
  a09810:	1012d43a 	srli	r9,r2,16
  a09814:	48001926 	beq	r9,zero,a0987c <__multiply+0x184>
  a09818:	60800017 	ldw	r2,0(r12)
  a0981c:	6811883a 	mov	r8,r13
  a09820:	600f883a 	mov	r7,r12
  a09824:	0015883a 	mov	r10,zero
  a09828:	100b883a 	mov	r5,r2
  a0982c:	41000017 	ldw	r4,0(r8)
  a09830:	2806d43a 	srli	r3,r5,16
  a09834:	3880000d 	sth	r2,0(r7)
  a09838:	20bfffcc 	andi	r2,r4,65535
  a0983c:	4885383a 	mul	r2,r9,r2
  a09840:	50c7883a 	add	r3,r10,r3
  a09844:	2008d43a 	srli	r4,r4,16
  a09848:	10c5883a 	add	r2,r2,r3
  a0984c:	3880008d 	sth	r2,2(r7)
  a09850:	39c00104 	addi	r7,r7,4
  a09854:	39400017 	ldw	r5,0(r7)
  a09858:	4909383a 	mul	r4,r9,r4
  a0985c:	1004d43a 	srli	r2,r2,16
  a09860:	28ffffcc 	andi	r3,r5,65535
  a09864:	20c9883a 	add	r4,r4,r3
  a09868:	1105883a 	add	r2,r2,r4
  a0986c:	42000104 	addi	r8,r8,4
  a09870:	1014d43a 	srli	r10,r2,16
  a09874:	42ffed36 	bltu	r8,r11,a0982c <__multiply+0x134>
  a09878:	38800015 	stw	r2,0(r7)
  a0987c:	31800104 	addi	r6,r6,4
  a09880:	33c0022e 	bgeu	r6,r15,a0988c <__multiply+0x194>
  a09884:	63000104 	addi	r12,r12,4
  a09888:	003fc606 	br	a097a4 <__multiply+0xac>
  a0988c:	0400090e 	bge	zero,r16,a098b4 <__multiply+0x1bc>
  a09890:	70bfff17 	ldw	r2,-4(r14)
  a09894:	70ffff04 	addi	r3,r14,-4
  a09898:	10000326 	beq	r2,zero,a098a8 <__multiply+0x1b0>
  a0989c:	00000506 	br	a098b4 <__multiply+0x1bc>
  a098a0:	18800017 	ldw	r2,0(r3)
  a098a4:	1000031e 	bne	r2,zero,a098b4 <__multiply+0x1bc>
  a098a8:	843fffc4 	addi	r16,r16,-1
  a098ac:	18ffff04 	addi	r3,r3,-4
  a098b0:	803ffb1e 	bne	r16,zero,a098a0 <__multiply+0x1a8>
  a098b4:	a805883a 	mov	r2,r21
  a098b8:	ac000415 	stw	r16,16(r21)
  a098bc:	dfc00617 	ldw	ra,24(sp)
  a098c0:	dd400517 	ldw	r21,20(sp)
  a098c4:	dd000417 	ldw	r20,16(sp)
  a098c8:	dcc00317 	ldw	r19,12(sp)
  a098cc:	dc800217 	ldw	r18,8(sp)
  a098d0:	dc400117 	ldw	r17,4(sp)
  a098d4:	dc000017 	ldw	r16,0(sp)
  a098d8:	dec00704 	addi	sp,sp,28
  a098dc:	f800283a 	ret

00a098e0 <__i2b>:
  a098e0:	defffd04 	addi	sp,sp,-12
  a098e4:	dc000015 	stw	r16,0(sp)
  a098e8:	04000044 	movi	r16,1
  a098ec:	dc800115 	stw	r18,4(sp)
  a098f0:	2825883a 	mov	r18,r5
  a098f4:	800b883a 	mov	r5,r16
  a098f8:	dfc00215 	stw	ra,8(sp)
  a098fc:	0a091e80 	call	a091e8 <_Balloc>
  a09900:	14000415 	stw	r16,16(r2)
  a09904:	14800515 	stw	r18,20(r2)
  a09908:	dfc00217 	ldw	ra,8(sp)
  a0990c:	dc800117 	ldw	r18,4(sp)
  a09910:	dc000017 	ldw	r16,0(sp)
  a09914:	dec00304 	addi	sp,sp,12
  a09918:	f800283a 	ret

00a0991c <__multadd>:
  a0991c:	defffa04 	addi	sp,sp,-24
  a09920:	dc800215 	stw	r18,8(sp)
  a09924:	2c800417 	ldw	r18,16(r5)
  a09928:	dd000415 	stw	r20,16(sp)
  a0992c:	dcc00315 	stw	r19,12(sp)
  a09930:	dc000015 	stw	r16,0(sp)
  a09934:	dfc00515 	stw	ra,20(sp)
  a09938:	3821883a 	mov	r16,r7
  a0993c:	dc400115 	stw	r17,4(sp)
  a09940:	2827883a 	mov	r19,r5
  a09944:	2029883a 	mov	r20,r4
  a09948:	2a000504 	addi	r8,r5,20
  a0994c:	000f883a 	mov	r7,zero
  a09950:	40800017 	ldw	r2,0(r8)
  a09954:	39c00044 	addi	r7,r7,1
  a09958:	10ffffcc 	andi	r3,r2,65535
  a0995c:	1987383a 	mul	r3,r3,r6
  a09960:	1004d43a 	srli	r2,r2,16
  a09964:	1c07883a 	add	r3,r3,r16
  a09968:	180ad43a 	srli	r5,r3,16
  a0996c:	1185383a 	mul	r2,r2,r6
  a09970:	18ffffcc 	andi	r3,r3,65535
  a09974:	1145883a 	add	r2,r2,r5
  a09978:	1008943a 	slli	r4,r2,16
  a0997c:	1020d43a 	srli	r16,r2,16
  a09980:	20c9883a 	add	r4,r4,r3
  a09984:	41000015 	stw	r4,0(r8)
  a09988:	42000104 	addi	r8,r8,4
  a0998c:	3cbff016 	blt	r7,r18,a09950 <__multadd+0x34>
  a09990:	80000826 	beq	r16,zero,a099b4 <__multadd+0x98>
  a09994:	98800217 	ldw	r2,8(r19)
  a09998:	90800f0e 	bge	r18,r2,a099d8 <__multadd+0xbc>
  a0999c:	9485883a 	add	r2,r18,r18
  a099a0:	1085883a 	add	r2,r2,r2
  a099a4:	14c5883a 	add	r2,r2,r19
  a099a8:	90c00044 	addi	r3,r18,1
  a099ac:	14000515 	stw	r16,20(r2)
  a099b0:	98c00415 	stw	r3,16(r19)
  a099b4:	9805883a 	mov	r2,r19
  a099b8:	dfc00517 	ldw	ra,20(sp)
  a099bc:	dd000417 	ldw	r20,16(sp)
  a099c0:	dcc00317 	ldw	r19,12(sp)
  a099c4:	dc800217 	ldw	r18,8(sp)
  a099c8:	dc400117 	ldw	r17,4(sp)
  a099cc:	dc000017 	ldw	r16,0(sp)
  a099d0:	dec00604 	addi	sp,sp,24
  a099d4:	f800283a 	ret
  a099d8:	99400117 	ldw	r5,4(r19)
  a099dc:	a009883a 	mov	r4,r20
  a099e0:	29400044 	addi	r5,r5,1
  a099e4:	0a091e80 	call	a091e8 <_Balloc>
  a099e8:	99800417 	ldw	r6,16(r19)
  a099ec:	99400304 	addi	r5,r19,12
  a099f0:	11000304 	addi	r4,r2,12
  a099f4:	318d883a 	add	r6,r6,r6
  a099f8:	318d883a 	add	r6,r6,r6
  a099fc:	31800204 	addi	r6,r6,8
  a09a00:	1023883a 	mov	r17,r2
  a09a04:	0a08a500 	call	a08a50 <memcpy>
  a09a08:	980b883a 	mov	r5,r19
  a09a0c:	a009883a 	mov	r4,r20
  a09a10:	0a08c680 	call	a08c68 <_Bfree>
  a09a14:	8827883a 	mov	r19,r17
  a09a18:	003fe006 	br	a0999c <__multadd+0x80>

00a09a1c <__pow5mult>:
  a09a1c:	defffa04 	addi	sp,sp,-24
  a09a20:	308000cc 	andi	r2,r6,3
  a09a24:	dd000415 	stw	r20,16(sp)
  a09a28:	dcc00315 	stw	r19,12(sp)
  a09a2c:	dc000015 	stw	r16,0(sp)
  a09a30:	dfc00515 	stw	ra,20(sp)
  a09a34:	dc800215 	stw	r18,8(sp)
  a09a38:	dc400115 	stw	r17,4(sp)
  a09a3c:	3021883a 	mov	r16,r6
  a09a40:	2027883a 	mov	r19,r4
  a09a44:	2829883a 	mov	r20,r5
  a09a48:	10002b1e 	bne	r2,zero,a09af8 <__pow5mult+0xdc>
  a09a4c:	8025d0ba 	srai	r18,r16,2
  a09a50:	90001b26 	beq	r18,zero,a09ac0 <__pow5mult+0xa4>
  a09a54:	9c001217 	ldw	r16,72(r19)
  a09a58:	8000081e 	bne	r16,zero,a09a7c <__pow5mult+0x60>
  a09a5c:	00003006 	br	a09b20 <__pow5mult+0x104>
  a09a60:	800b883a 	mov	r5,r16
  a09a64:	800d883a 	mov	r6,r16
  a09a68:	9809883a 	mov	r4,r19
  a09a6c:	90001426 	beq	r18,zero,a09ac0 <__pow5mult+0xa4>
  a09a70:	80800017 	ldw	r2,0(r16)
  a09a74:	10001b26 	beq	r2,zero,a09ae4 <__pow5mult+0xc8>
  a09a78:	1021883a 	mov	r16,r2
  a09a7c:	9080004c 	andi	r2,r18,1
  a09a80:	1005003a 	cmpeq	r2,r2,zero
  a09a84:	9025d07a 	srai	r18,r18,1
  a09a88:	800d883a 	mov	r6,r16
  a09a8c:	9809883a 	mov	r4,r19
  a09a90:	a00b883a 	mov	r5,r20
  a09a94:	103ff21e 	bne	r2,zero,a09a60 <__pow5mult+0x44>
  a09a98:	0a096f80 	call	a096f8 <__multiply>
  a09a9c:	a00b883a 	mov	r5,r20
  a09aa0:	9809883a 	mov	r4,r19
  a09aa4:	1023883a 	mov	r17,r2
  a09aa8:	0a08c680 	call	a08c68 <_Bfree>
  a09aac:	8829883a 	mov	r20,r17
  a09ab0:	800b883a 	mov	r5,r16
  a09ab4:	800d883a 	mov	r6,r16
  a09ab8:	9809883a 	mov	r4,r19
  a09abc:	903fec1e 	bne	r18,zero,a09a70 <__pow5mult+0x54>
  a09ac0:	a005883a 	mov	r2,r20
  a09ac4:	dfc00517 	ldw	ra,20(sp)
  a09ac8:	dd000417 	ldw	r20,16(sp)
  a09acc:	dcc00317 	ldw	r19,12(sp)
  a09ad0:	dc800217 	ldw	r18,8(sp)
  a09ad4:	dc400117 	ldw	r17,4(sp)
  a09ad8:	dc000017 	ldw	r16,0(sp)
  a09adc:	dec00604 	addi	sp,sp,24
  a09ae0:	f800283a 	ret
  a09ae4:	0a096f80 	call	a096f8 <__multiply>
  a09ae8:	80800015 	stw	r2,0(r16)
  a09aec:	1021883a 	mov	r16,r2
  a09af0:	10000015 	stw	zero,0(r2)
  a09af4:	003fe106 	br	a09a7c <__pow5mult+0x60>
  a09af8:	1085883a 	add	r2,r2,r2
  a09afc:	00c02874 	movhi	r3,161
  a09b00:	18c3b304 	addi	r3,r3,3788
  a09b04:	1085883a 	add	r2,r2,r2
  a09b08:	10c5883a 	add	r2,r2,r3
  a09b0c:	11bfff17 	ldw	r6,-4(r2)
  a09b10:	000f883a 	mov	r7,zero
  a09b14:	0a0991c0 	call	a0991c <__multadd>
  a09b18:	1029883a 	mov	r20,r2
  a09b1c:	003fcb06 	br	a09a4c <__pow5mult+0x30>
  a09b20:	9809883a 	mov	r4,r19
  a09b24:	01409c44 	movi	r5,625
  a09b28:	0a098e00 	call	a098e0 <__i2b>
  a09b2c:	98801215 	stw	r2,72(r19)
  a09b30:	1021883a 	mov	r16,r2
  a09b34:	10000015 	stw	zero,0(r2)
  a09b38:	003fd006 	br	a09a7c <__pow5mult+0x60>

00a09b3c <__s2b>:
  a09b3c:	defff904 	addi	sp,sp,-28
  a09b40:	dcc00315 	stw	r19,12(sp)
  a09b44:	dc800215 	stw	r18,8(sp)
  a09b48:	2827883a 	mov	r19,r5
  a09b4c:	2025883a 	mov	r18,r4
  a09b50:	01400244 	movi	r5,9
  a09b54:	39000204 	addi	r4,r7,8
  a09b58:	dd000415 	stw	r20,16(sp)
  a09b5c:	dc400115 	stw	r17,4(sp)
  a09b60:	dfc00615 	stw	ra,24(sp)
  a09b64:	dd400515 	stw	r21,20(sp)
  a09b68:	dc000015 	stw	r16,0(sp)
  a09b6c:	3829883a 	mov	r20,r7
  a09b70:	3023883a 	mov	r17,r6
  a09b74:	0a0bf1c0 	call	a0bf1c <__divsi3>
  a09b78:	00c00044 	movi	r3,1
  a09b7c:	1880350e 	bge	r3,r2,a09c54 <__s2b+0x118>
  a09b80:	000b883a 	mov	r5,zero
  a09b84:	18c7883a 	add	r3,r3,r3
  a09b88:	29400044 	addi	r5,r5,1
  a09b8c:	18bffd16 	blt	r3,r2,a09b84 <__s2b+0x48>
  a09b90:	9009883a 	mov	r4,r18
  a09b94:	0a091e80 	call	a091e8 <_Balloc>
  a09b98:	1011883a 	mov	r8,r2
  a09b9c:	d8800717 	ldw	r2,28(sp)
  a09ba0:	00c00044 	movi	r3,1
  a09ba4:	01800244 	movi	r6,9
  a09ba8:	40800515 	stw	r2,20(r8)
  a09bac:	40c00415 	stw	r3,16(r8)
  a09bb0:	3440260e 	bge	r6,r17,a09c4c <__s2b+0x110>
  a09bb4:	3021883a 	mov	r16,r6
  a09bb8:	99ab883a 	add	r21,r19,r6
  a09bbc:	9c05883a 	add	r2,r19,r16
  a09bc0:	11c00007 	ldb	r7,0(r2)
  a09bc4:	400b883a 	mov	r5,r8
  a09bc8:	9009883a 	mov	r4,r18
  a09bcc:	39fff404 	addi	r7,r7,-48
  a09bd0:	01800284 	movi	r6,10
  a09bd4:	0a0991c0 	call	a0991c <__multadd>
  a09bd8:	84000044 	addi	r16,r16,1
  a09bdc:	1011883a 	mov	r8,r2
  a09be0:	8c3ff61e 	bne	r17,r16,a09bbc <__s2b+0x80>
  a09be4:	ac45883a 	add	r2,r21,r17
  a09be8:	117ffe04 	addi	r5,r2,-8
  a09bec:	880d883a 	mov	r6,r17
  a09bf0:	35000c0e 	bge	r6,r20,a09c24 <__s2b+0xe8>
  a09bf4:	a185c83a 	sub	r2,r20,r6
  a09bf8:	2821883a 	mov	r16,r5
  a09bfc:	28a3883a 	add	r17,r5,r2
  a09c00:	81c00007 	ldb	r7,0(r16)
  a09c04:	400b883a 	mov	r5,r8
  a09c08:	9009883a 	mov	r4,r18
  a09c0c:	39fff404 	addi	r7,r7,-48
  a09c10:	01800284 	movi	r6,10
  a09c14:	0a0991c0 	call	a0991c <__multadd>
  a09c18:	84000044 	addi	r16,r16,1
  a09c1c:	1011883a 	mov	r8,r2
  a09c20:	847ff71e 	bne	r16,r17,a09c00 <__s2b+0xc4>
  a09c24:	4005883a 	mov	r2,r8
  a09c28:	dfc00617 	ldw	ra,24(sp)
  a09c2c:	dd400517 	ldw	r21,20(sp)
  a09c30:	dd000417 	ldw	r20,16(sp)
  a09c34:	dcc00317 	ldw	r19,12(sp)
  a09c38:	dc800217 	ldw	r18,8(sp)
  a09c3c:	dc400117 	ldw	r17,4(sp)
  a09c40:	dc000017 	ldw	r16,0(sp)
  a09c44:	dec00704 	addi	sp,sp,28
  a09c48:	f800283a 	ret
  a09c4c:	99400284 	addi	r5,r19,10
  a09c50:	003fe706 	br	a09bf0 <__s2b+0xb4>
  a09c54:	000b883a 	mov	r5,zero
  a09c58:	003fcd06 	br	a09b90 <__s2b+0x54>

00a09c5c <_realloc_r>:
  a09c5c:	defff404 	addi	sp,sp,-48
  a09c60:	dd800815 	stw	r22,32(sp)
  a09c64:	dc800415 	stw	r18,16(sp)
  a09c68:	dc400315 	stw	r17,12(sp)
  a09c6c:	dfc00b15 	stw	ra,44(sp)
  a09c70:	df000a15 	stw	fp,40(sp)
  a09c74:	ddc00915 	stw	r23,36(sp)
  a09c78:	dd400715 	stw	r21,28(sp)
  a09c7c:	dd000615 	stw	r20,24(sp)
  a09c80:	dcc00515 	stw	r19,20(sp)
  a09c84:	dc000215 	stw	r16,8(sp)
  a09c88:	2825883a 	mov	r18,r5
  a09c8c:	3023883a 	mov	r17,r6
  a09c90:	202d883a 	mov	r22,r4
  a09c94:	2800c926 	beq	r5,zero,a09fbc <_realloc_r+0x360>
  a09c98:	0a0c6700 	call	a0c670 <__malloc_lock>
  a09c9c:	943ffe04 	addi	r16,r18,-8
  a09ca0:	88c002c4 	addi	r3,r17,11
  a09ca4:	00800584 	movi	r2,22
  a09ca8:	82000117 	ldw	r8,4(r16)
  a09cac:	10c01b2e 	bgeu	r2,r3,a09d1c <_realloc_r+0xc0>
  a09cb0:	00bffe04 	movi	r2,-8
  a09cb4:	188e703a 	and	r7,r3,r2
  a09cb8:	3839883a 	mov	fp,r7
  a09cbc:	38001a16 	blt	r7,zero,a09d28 <_realloc_r+0xcc>
  a09cc0:	e4401936 	bltu	fp,r17,a09d28 <_realloc_r+0xcc>
  a09cc4:	013fff04 	movi	r4,-4
  a09cc8:	4126703a 	and	r19,r8,r4
  a09ccc:	99c02616 	blt	r19,r7,a09d68 <_realloc_r+0x10c>
  a09cd0:	802b883a 	mov	r21,r16
  a09cd4:	9829883a 	mov	r20,r19
  a09cd8:	84000204 	addi	r16,r16,8
  a09cdc:	a80f883a 	mov	r7,r21
  a09ce0:	a70dc83a 	sub	r6,r20,fp
  a09ce4:	008003c4 	movi	r2,15
  a09ce8:	1180c136 	bltu	r2,r6,a09ff0 <_realloc_r+0x394>
  a09cec:	38800117 	ldw	r2,4(r7)
  a09cf0:	a549883a 	add	r4,r20,r21
  a09cf4:	1080004c 	andi	r2,r2,1
  a09cf8:	a084b03a 	or	r2,r20,r2
  a09cfc:	38800115 	stw	r2,4(r7)
  a09d00:	20c00117 	ldw	r3,4(r4)
  a09d04:	18c00054 	ori	r3,r3,1
  a09d08:	20c00115 	stw	r3,4(r4)
  a09d0c:	b009883a 	mov	r4,r22
  a09d10:	0a0c6900 	call	a0c690 <__malloc_unlock>
  a09d14:	8023883a 	mov	r17,r16
  a09d18:	00000606 	br	a09d34 <_realloc_r+0xd8>
  a09d1c:	01c00404 	movi	r7,16
  a09d20:	3839883a 	mov	fp,r7
  a09d24:	e47fe72e 	bgeu	fp,r17,a09cc4 <_realloc_r+0x68>
  a09d28:	00800304 	movi	r2,12
  a09d2c:	0023883a 	mov	r17,zero
  a09d30:	b0800015 	stw	r2,0(r22)
  a09d34:	8805883a 	mov	r2,r17
  a09d38:	dfc00b17 	ldw	ra,44(sp)
  a09d3c:	df000a17 	ldw	fp,40(sp)
  a09d40:	ddc00917 	ldw	r23,36(sp)
  a09d44:	dd800817 	ldw	r22,32(sp)
  a09d48:	dd400717 	ldw	r21,28(sp)
  a09d4c:	dd000617 	ldw	r20,24(sp)
  a09d50:	dcc00517 	ldw	r19,20(sp)
  a09d54:	dc800417 	ldw	r18,16(sp)
  a09d58:	dc400317 	ldw	r17,12(sp)
  a09d5c:	dc000217 	ldw	r16,8(sp)
  a09d60:	dec00c04 	addi	sp,sp,48
  a09d64:	f800283a 	ret
  a09d68:	00802874 	movhi	r2,161
  a09d6c:	10850e04 	addi	r2,r2,5176
  a09d70:	12400217 	ldw	r9,8(r2)
  a09d74:	84cd883a 	add	r6,r16,r19
  a09d78:	802b883a 	mov	r21,r16
  a09d7c:	3240b926 	beq	r6,r9,a0a064 <_realloc_r+0x408>
  a09d80:	31400117 	ldw	r5,4(r6)
  a09d84:	00bfff84 	movi	r2,-2
  a09d88:	2884703a 	and	r2,r5,r2
  a09d8c:	1185883a 	add	r2,r2,r6
  a09d90:	10c00117 	ldw	r3,4(r2)
  a09d94:	18c0004c 	andi	r3,r3,1
  a09d98:	1807003a 	cmpeq	r3,r3,zero
  a09d9c:	1800a326 	beq	r3,zero,a0a02c <_realloc_r+0x3d0>
  a09da0:	2908703a 	and	r4,r5,r4
  a09da4:	9929883a 	add	r20,r19,r4
  a09da8:	a1c0a30e 	bge	r20,r7,a0a038 <_realloc_r+0x3dc>
  a09dac:	4080004c 	andi	r2,r8,1
  a09db0:	1000551e 	bne	r2,zero,a09f08 <_realloc_r+0x2ac>
  a09db4:	80800017 	ldw	r2,0(r16)
  a09db8:	80afc83a 	sub	r23,r16,r2
  a09dbc:	b8c00117 	ldw	r3,4(r23)
  a09dc0:	00bfff04 	movi	r2,-4
  a09dc4:	1884703a 	and	r2,r3,r2
  a09dc8:	30002e26 	beq	r6,zero,a09e84 <_realloc_r+0x228>
  a09dcc:	3240b926 	beq	r6,r9,a0a0b4 <_realloc_r+0x458>
  a09dd0:	98a9883a 	add	r20,r19,r2
  a09dd4:	2509883a 	add	r4,r4,r20
  a09dd8:	d9000015 	stw	r4,0(sp)
  a09ddc:	21c02a16 	blt	r4,r7,a09e88 <_realloc_r+0x22c>
  a09de0:	30800317 	ldw	r2,12(r6)
  a09de4:	30c00217 	ldw	r3,8(r6)
  a09de8:	01400904 	movi	r5,36
  a09dec:	99bfff04 	addi	r6,r19,-4
  a09df0:	18800315 	stw	r2,12(r3)
  a09df4:	10c00215 	stw	r3,8(r2)
  a09df8:	b9000317 	ldw	r4,12(r23)
  a09dfc:	b8800217 	ldw	r2,8(r23)
  a09e00:	b82b883a 	mov	r21,r23
  a09e04:	bc000204 	addi	r16,r23,8
  a09e08:	20800215 	stw	r2,8(r4)
  a09e0c:	11000315 	stw	r4,12(r2)
  a09e10:	2980e436 	bltu	r5,r6,a0a1a4 <_realloc_r+0x548>
  a09e14:	008004c4 	movi	r2,19
  a09e18:	9009883a 	mov	r4,r18
  a09e1c:	8011883a 	mov	r8,r16
  a09e20:	11800f2e 	bgeu	r2,r6,a09e60 <_realloc_r+0x204>
  a09e24:	90800017 	ldw	r2,0(r18)
  a09e28:	ba000404 	addi	r8,r23,16
  a09e2c:	91000204 	addi	r4,r18,8
  a09e30:	b8800215 	stw	r2,8(r23)
  a09e34:	90c00117 	ldw	r3,4(r18)
  a09e38:	008006c4 	movi	r2,27
  a09e3c:	b8c00315 	stw	r3,12(r23)
  a09e40:	1180072e 	bgeu	r2,r6,a09e60 <_realloc_r+0x204>
  a09e44:	90c00217 	ldw	r3,8(r18)
  a09e48:	ba000604 	addi	r8,r23,24
  a09e4c:	91000404 	addi	r4,r18,16
  a09e50:	b8c00415 	stw	r3,16(r23)
  a09e54:	90800317 	ldw	r2,12(r18)
  a09e58:	b8800515 	stw	r2,20(r23)
  a09e5c:	3140e726 	beq	r6,r5,a0a1fc <_realloc_r+0x5a0>
  a09e60:	20800017 	ldw	r2,0(r4)
  a09e64:	dd000017 	ldw	r20,0(sp)
  a09e68:	b80f883a 	mov	r7,r23
  a09e6c:	40800015 	stw	r2,0(r8)
  a09e70:	20c00117 	ldw	r3,4(r4)
  a09e74:	40c00115 	stw	r3,4(r8)
  a09e78:	20800217 	ldw	r2,8(r4)
  a09e7c:	40800215 	stw	r2,8(r8)
  a09e80:	003f9706 	br	a09ce0 <_realloc_r+0x84>
  a09e84:	98a9883a 	add	r20,r19,r2
  a09e88:	a1c01f16 	blt	r20,r7,a09f08 <_realloc_r+0x2ac>
  a09e8c:	b8c00317 	ldw	r3,12(r23)
  a09e90:	b8800217 	ldw	r2,8(r23)
  a09e94:	99bfff04 	addi	r6,r19,-4
  a09e98:	01400904 	movi	r5,36
  a09e9c:	b82b883a 	mov	r21,r23
  a09ea0:	18800215 	stw	r2,8(r3)
  a09ea4:	10c00315 	stw	r3,12(r2)
  a09ea8:	bc000204 	addi	r16,r23,8
  a09eac:	2980c336 	bltu	r5,r6,a0a1bc <_realloc_r+0x560>
  a09eb0:	008004c4 	movi	r2,19
  a09eb4:	9009883a 	mov	r4,r18
  a09eb8:	8011883a 	mov	r8,r16
  a09ebc:	11800f2e 	bgeu	r2,r6,a09efc <_realloc_r+0x2a0>
  a09ec0:	90800017 	ldw	r2,0(r18)
  a09ec4:	ba000404 	addi	r8,r23,16
  a09ec8:	91000204 	addi	r4,r18,8
  a09ecc:	b8800215 	stw	r2,8(r23)
  a09ed0:	90c00117 	ldw	r3,4(r18)
  a09ed4:	008006c4 	movi	r2,27
  a09ed8:	b8c00315 	stw	r3,12(r23)
  a09edc:	1180072e 	bgeu	r2,r6,a09efc <_realloc_r+0x2a0>
  a09ee0:	90c00217 	ldw	r3,8(r18)
  a09ee4:	ba000604 	addi	r8,r23,24
  a09ee8:	91000404 	addi	r4,r18,16
  a09eec:	b8c00415 	stw	r3,16(r23)
  a09ef0:	90800317 	ldw	r2,12(r18)
  a09ef4:	b8800515 	stw	r2,20(r23)
  a09ef8:	3140c726 	beq	r6,r5,a0a218 <_realloc_r+0x5bc>
  a09efc:	20800017 	ldw	r2,0(r4)
  a09f00:	b80f883a 	mov	r7,r23
  a09f04:	003fd906 	br	a09e6c <_realloc_r+0x210>
  a09f08:	880b883a 	mov	r5,r17
  a09f0c:	b009883a 	mov	r4,r22
  a09f10:	0a0822c0 	call	a0822c <_malloc_r>
  a09f14:	1023883a 	mov	r17,r2
  a09f18:	10002526 	beq	r2,zero,a09fb0 <_realloc_r+0x354>
  a09f1c:	80800117 	ldw	r2,4(r16)
  a09f20:	00ffff84 	movi	r3,-2
  a09f24:	893ffe04 	addi	r4,r17,-8
  a09f28:	10c4703a 	and	r2,r2,r3
  a09f2c:	8085883a 	add	r2,r16,r2
  a09f30:	20809526 	beq	r4,r2,a0a188 <_realloc_r+0x52c>
  a09f34:	99bfff04 	addi	r6,r19,-4
  a09f38:	01c00904 	movi	r7,36
  a09f3c:	39804536 	bltu	r7,r6,a0a054 <_realloc_r+0x3f8>
  a09f40:	008004c4 	movi	r2,19
  a09f44:	9009883a 	mov	r4,r18
  a09f48:	880b883a 	mov	r5,r17
  a09f4c:	11800f2e 	bgeu	r2,r6,a09f8c <_realloc_r+0x330>
  a09f50:	90800017 	ldw	r2,0(r18)
  a09f54:	89400204 	addi	r5,r17,8
  a09f58:	91000204 	addi	r4,r18,8
  a09f5c:	88800015 	stw	r2,0(r17)
  a09f60:	90c00117 	ldw	r3,4(r18)
  a09f64:	008006c4 	movi	r2,27
  a09f68:	88c00115 	stw	r3,4(r17)
  a09f6c:	1180072e 	bgeu	r2,r6,a09f8c <_realloc_r+0x330>
  a09f70:	90c00217 	ldw	r3,8(r18)
  a09f74:	89400404 	addi	r5,r17,16
  a09f78:	91000404 	addi	r4,r18,16
  a09f7c:	88c00215 	stw	r3,8(r17)
  a09f80:	90800317 	ldw	r2,12(r18)
  a09f84:	88800315 	stw	r2,12(r17)
  a09f88:	31c09126 	beq	r6,r7,a0a1d0 <_realloc_r+0x574>
  a09f8c:	20800017 	ldw	r2,0(r4)
  a09f90:	28800015 	stw	r2,0(r5)
  a09f94:	20c00117 	ldw	r3,4(r4)
  a09f98:	28c00115 	stw	r3,4(r5)
  a09f9c:	20800217 	ldw	r2,8(r4)
  a09fa0:	28800215 	stw	r2,8(r5)
  a09fa4:	900b883a 	mov	r5,r18
  a09fa8:	b009883a 	mov	r4,r22
  a09fac:	0a076a40 	call	a076a4 <_free_r>
  a09fb0:	b009883a 	mov	r4,r22
  a09fb4:	0a0c6900 	call	a0c690 <__malloc_unlock>
  a09fb8:	003f5e06 	br	a09d34 <_realloc_r+0xd8>
  a09fbc:	300b883a 	mov	r5,r6
  a09fc0:	dfc00b17 	ldw	ra,44(sp)
  a09fc4:	df000a17 	ldw	fp,40(sp)
  a09fc8:	ddc00917 	ldw	r23,36(sp)
  a09fcc:	dd800817 	ldw	r22,32(sp)
  a09fd0:	dd400717 	ldw	r21,28(sp)
  a09fd4:	dd000617 	ldw	r20,24(sp)
  a09fd8:	dcc00517 	ldw	r19,20(sp)
  a09fdc:	dc800417 	ldw	r18,16(sp)
  a09fe0:	dc400317 	ldw	r17,12(sp)
  a09fe4:	dc000217 	ldw	r16,8(sp)
  a09fe8:	dec00c04 	addi	sp,sp,48
  a09fec:	0a0822c1 	jmpi	a0822c <_malloc_r>
  a09ff0:	38800117 	ldw	r2,4(r7)
  a09ff4:	e54b883a 	add	r5,fp,r21
  a09ff8:	31000054 	ori	r4,r6,1
  a09ffc:	1080004c 	andi	r2,r2,1
  a0a000:	1704b03a 	or	r2,r2,fp
  a0a004:	38800115 	stw	r2,4(r7)
  a0a008:	29000115 	stw	r4,4(r5)
  a0a00c:	2987883a 	add	r3,r5,r6
  a0a010:	18800117 	ldw	r2,4(r3)
  a0a014:	29400204 	addi	r5,r5,8
  a0a018:	b009883a 	mov	r4,r22
  a0a01c:	10800054 	ori	r2,r2,1
  a0a020:	18800115 	stw	r2,4(r3)
  a0a024:	0a076a40 	call	a076a4 <_free_r>
  a0a028:	003f3806 	br	a09d0c <_realloc_r+0xb0>
  a0a02c:	000d883a 	mov	r6,zero
  a0a030:	0009883a 	mov	r4,zero
  a0a034:	003f5d06 	br	a09dac <_realloc_r+0x150>
  a0a038:	30c00217 	ldw	r3,8(r6)
  a0a03c:	30800317 	ldw	r2,12(r6)
  a0a040:	800f883a 	mov	r7,r16
  a0a044:	84000204 	addi	r16,r16,8
  a0a048:	10c00215 	stw	r3,8(r2)
  a0a04c:	18800315 	stw	r2,12(r3)
  a0a050:	003f2306 	br	a09ce0 <_realloc_r+0x84>
  a0a054:	8809883a 	mov	r4,r17
  a0a058:	900b883a 	mov	r5,r18
  a0a05c:	0a08af00 	call	a08af0 <memmove>
  a0a060:	003fd006 	br	a09fa4 <_realloc_r+0x348>
  a0a064:	30800117 	ldw	r2,4(r6)
  a0a068:	e0c00404 	addi	r3,fp,16
  a0a06c:	1108703a 	and	r4,r2,r4
  a0a070:	9905883a 	add	r2,r19,r4
  a0a074:	10ff4d16 	blt	r2,r3,a09dac <_realloc_r+0x150>
  a0a078:	1705c83a 	sub	r2,r2,fp
  a0a07c:	870b883a 	add	r5,r16,fp
  a0a080:	10800054 	ori	r2,r2,1
  a0a084:	28800115 	stw	r2,4(r5)
  a0a088:	80c00117 	ldw	r3,4(r16)
  a0a08c:	00802874 	movhi	r2,161
  a0a090:	10850e04 	addi	r2,r2,5176
  a0a094:	b009883a 	mov	r4,r22
  a0a098:	18c0004c 	andi	r3,r3,1
  a0a09c:	e0c6b03a 	or	r3,fp,r3
  a0a0a0:	11400215 	stw	r5,8(r2)
  a0a0a4:	80c00115 	stw	r3,4(r16)
  a0a0a8:	0a0c6900 	call	a0c690 <__malloc_unlock>
  a0a0ac:	84400204 	addi	r17,r16,8
  a0a0b0:	003f2006 	br	a09d34 <_realloc_r+0xd8>
  a0a0b4:	98a9883a 	add	r20,r19,r2
  a0a0b8:	2509883a 	add	r4,r4,r20
  a0a0bc:	e0800404 	addi	r2,fp,16
  a0a0c0:	d9000115 	stw	r4,4(sp)
  a0a0c4:	20bf7016 	blt	r4,r2,a09e88 <_realloc_r+0x22c>
  a0a0c8:	b8c00317 	ldw	r3,12(r23)
  a0a0cc:	b8800217 	ldw	r2,8(r23)
  a0a0d0:	99bfff04 	addi	r6,r19,-4
  a0a0d4:	01400904 	movi	r5,36
  a0a0d8:	18800215 	stw	r2,8(r3)
  a0a0dc:	10c00315 	stw	r3,12(r2)
  a0a0e0:	bc400204 	addi	r17,r23,8
  a0a0e4:	29804136 	bltu	r5,r6,a0a1ec <_realloc_r+0x590>
  a0a0e8:	008004c4 	movi	r2,19
  a0a0ec:	9009883a 	mov	r4,r18
  a0a0f0:	880f883a 	mov	r7,r17
  a0a0f4:	11800f2e 	bgeu	r2,r6,a0a134 <_realloc_r+0x4d8>
  a0a0f8:	90800017 	ldw	r2,0(r18)
  a0a0fc:	b9c00404 	addi	r7,r23,16
  a0a100:	91000204 	addi	r4,r18,8
  a0a104:	b8800215 	stw	r2,8(r23)
  a0a108:	90c00117 	ldw	r3,4(r18)
  a0a10c:	008006c4 	movi	r2,27
  a0a110:	b8c00315 	stw	r3,12(r23)
  a0a114:	1180072e 	bgeu	r2,r6,a0a134 <_realloc_r+0x4d8>
  a0a118:	90c00217 	ldw	r3,8(r18)
  a0a11c:	b9c00604 	addi	r7,r23,24
  a0a120:	91000404 	addi	r4,r18,16
  a0a124:	b8c00415 	stw	r3,16(r23)
  a0a128:	90800317 	ldw	r2,12(r18)
  a0a12c:	b8800515 	stw	r2,20(r23)
  a0a130:	31404026 	beq	r6,r5,a0a234 <_realloc_r+0x5d8>
  a0a134:	20800017 	ldw	r2,0(r4)
  a0a138:	38800015 	stw	r2,0(r7)
  a0a13c:	20c00117 	ldw	r3,4(r4)
  a0a140:	38c00115 	stw	r3,4(r7)
  a0a144:	20800217 	ldw	r2,8(r4)
  a0a148:	38800215 	stw	r2,8(r7)
  a0a14c:	d8c00117 	ldw	r3,4(sp)
  a0a150:	bf0b883a 	add	r5,r23,fp
  a0a154:	b009883a 	mov	r4,r22
  a0a158:	1f05c83a 	sub	r2,r3,fp
  a0a15c:	10800054 	ori	r2,r2,1
  a0a160:	28800115 	stw	r2,4(r5)
  a0a164:	b8c00117 	ldw	r3,4(r23)
  a0a168:	00802874 	movhi	r2,161
  a0a16c:	10850e04 	addi	r2,r2,5176
  a0a170:	11400215 	stw	r5,8(r2)
  a0a174:	18c0004c 	andi	r3,r3,1
  a0a178:	e0c6b03a 	or	r3,fp,r3
  a0a17c:	b8c00115 	stw	r3,4(r23)
  a0a180:	0a0c6900 	call	a0c690 <__malloc_unlock>
  a0a184:	003eeb06 	br	a09d34 <_realloc_r+0xd8>
  a0a188:	20800117 	ldw	r2,4(r4)
  a0a18c:	00ffff04 	movi	r3,-4
  a0a190:	800f883a 	mov	r7,r16
  a0a194:	10c4703a 	and	r2,r2,r3
  a0a198:	98a9883a 	add	r20,r19,r2
  a0a19c:	84000204 	addi	r16,r16,8
  a0a1a0:	003ecf06 	br	a09ce0 <_realloc_r+0x84>
  a0a1a4:	900b883a 	mov	r5,r18
  a0a1a8:	8009883a 	mov	r4,r16
  a0a1ac:	0a08af00 	call	a08af0 <memmove>
  a0a1b0:	dd000017 	ldw	r20,0(sp)
  a0a1b4:	b80f883a 	mov	r7,r23
  a0a1b8:	003ec906 	br	a09ce0 <_realloc_r+0x84>
  a0a1bc:	900b883a 	mov	r5,r18
  a0a1c0:	8009883a 	mov	r4,r16
  a0a1c4:	0a08af00 	call	a08af0 <memmove>
  a0a1c8:	b80f883a 	mov	r7,r23
  a0a1cc:	003ec406 	br	a09ce0 <_realloc_r+0x84>
  a0a1d0:	90c00417 	ldw	r3,16(r18)
  a0a1d4:	89400604 	addi	r5,r17,24
  a0a1d8:	91000604 	addi	r4,r18,24
  a0a1dc:	88c00415 	stw	r3,16(r17)
  a0a1e0:	90800517 	ldw	r2,20(r18)
  a0a1e4:	88800515 	stw	r2,20(r17)
  a0a1e8:	003f6806 	br	a09f8c <_realloc_r+0x330>
  a0a1ec:	900b883a 	mov	r5,r18
  a0a1f0:	8809883a 	mov	r4,r17
  a0a1f4:	0a08af00 	call	a08af0 <memmove>
  a0a1f8:	003fd406 	br	a0a14c <_realloc_r+0x4f0>
  a0a1fc:	90c00417 	ldw	r3,16(r18)
  a0a200:	91000604 	addi	r4,r18,24
  a0a204:	ba000804 	addi	r8,r23,32
  a0a208:	b8c00615 	stw	r3,24(r23)
  a0a20c:	90800517 	ldw	r2,20(r18)
  a0a210:	b8800715 	stw	r2,28(r23)
  a0a214:	003f1206 	br	a09e60 <_realloc_r+0x204>
  a0a218:	90c00417 	ldw	r3,16(r18)
  a0a21c:	91000604 	addi	r4,r18,24
  a0a220:	ba000804 	addi	r8,r23,32
  a0a224:	b8c00615 	stw	r3,24(r23)
  a0a228:	90800517 	ldw	r2,20(r18)
  a0a22c:	b8800715 	stw	r2,28(r23)
  a0a230:	003f3206 	br	a09efc <_realloc_r+0x2a0>
  a0a234:	90c00417 	ldw	r3,16(r18)
  a0a238:	91000604 	addi	r4,r18,24
  a0a23c:	b9c00804 	addi	r7,r23,32
  a0a240:	b8c00615 	stw	r3,24(r23)
  a0a244:	90800517 	ldw	r2,20(r18)
  a0a248:	b8800715 	stw	r2,28(r23)
  a0a24c:	003fb906 	br	a0a134 <_realloc_r+0x4d8>

00a0a250 <__isinfd>:
  a0a250:	200d883a 	mov	r6,r4
  a0a254:	0109c83a 	sub	r4,zero,r4
  a0a258:	2188b03a 	or	r4,r4,r6
  a0a25c:	2008d7fa 	srli	r4,r4,31
  a0a260:	00a00034 	movhi	r2,32768
  a0a264:	10bfffc4 	addi	r2,r2,-1
  a0a268:	1144703a 	and	r2,r2,r5
  a0a26c:	2088b03a 	or	r4,r4,r2
  a0a270:	009ffc34 	movhi	r2,32752
  a0a274:	1105c83a 	sub	r2,r2,r4
  a0a278:	0087c83a 	sub	r3,zero,r2
  a0a27c:	10c4b03a 	or	r2,r2,r3
  a0a280:	1004d7fa 	srli	r2,r2,31
  a0a284:	00c00044 	movi	r3,1
  a0a288:	1885c83a 	sub	r2,r3,r2
  a0a28c:	f800283a 	ret

00a0a290 <__isnand>:
  a0a290:	200d883a 	mov	r6,r4
  a0a294:	0109c83a 	sub	r4,zero,r4
  a0a298:	2188b03a 	or	r4,r4,r6
  a0a29c:	2008d7fa 	srli	r4,r4,31
  a0a2a0:	00a00034 	movhi	r2,32768
  a0a2a4:	10bfffc4 	addi	r2,r2,-1
  a0a2a8:	1144703a 	and	r2,r2,r5
  a0a2ac:	2088b03a 	or	r4,r4,r2
  a0a2b0:	009ffc34 	movhi	r2,32752
  a0a2b4:	1105c83a 	sub	r2,r2,r4
  a0a2b8:	1004d7fa 	srli	r2,r2,31
  a0a2bc:	f800283a 	ret

00a0a2c0 <_sbrk_r>:
  a0a2c0:	defffd04 	addi	sp,sp,-12
  a0a2c4:	dc000015 	stw	r16,0(sp)
  a0a2c8:	04002874 	movhi	r16,161
  a0a2cc:	8411fc04 	addi	r16,r16,18416
  a0a2d0:	dc400115 	stw	r17,4(sp)
  a0a2d4:	80000015 	stw	zero,0(r16)
  a0a2d8:	2023883a 	mov	r17,r4
  a0a2dc:	2809883a 	mov	r4,r5
  a0a2e0:	dfc00215 	stw	ra,8(sp)
  a0a2e4:	0a0c8900 	call	a0c890 <sbrk>
  a0a2e8:	1007883a 	mov	r3,r2
  a0a2ec:	00bfffc4 	movi	r2,-1
  a0a2f0:	18800626 	beq	r3,r2,a0a30c <_sbrk_r+0x4c>
  a0a2f4:	1805883a 	mov	r2,r3
  a0a2f8:	dfc00217 	ldw	ra,8(sp)
  a0a2fc:	dc400117 	ldw	r17,4(sp)
  a0a300:	dc000017 	ldw	r16,0(sp)
  a0a304:	dec00304 	addi	sp,sp,12
  a0a308:	f800283a 	ret
  a0a30c:	80800017 	ldw	r2,0(r16)
  a0a310:	103ff826 	beq	r2,zero,a0a2f4 <_sbrk_r+0x34>
  a0a314:	88800015 	stw	r2,0(r17)
  a0a318:	1805883a 	mov	r2,r3
  a0a31c:	dfc00217 	ldw	ra,8(sp)
  a0a320:	dc400117 	ldw	r17,4(sp)
  a0a324:	dc000017 	ldw	r16,0(sp)
  a0a328:	dec00304 	addi	sp,sp,12
  a0a32c:	f800283a 	ret

00a0a330 <__sclose>:
  a0a330:	2940038f 	ldh	r5,14(r5)
  a0a334:	0a0a6641 	jmpi	a0a664 <_close_r>

00a0a338 <__sseek>:
  a0a338:	defffe04 	addi	sp,sp,-8
  a0a33c:	dc000015 	stw	r16,0(sp)
  a0a340:	2821883a 	mov	r16,r5
  a0a344:	2940038f 	ldh	r5,14(r5)
  a0a348:	dfc00115 	stw	ra,4(sp)
  a0a34c:	0a0a8dc0 	call	a0a8dc <_lseek_r>
  a0a350:	1007883a 	mov	r3,r2
  a0a354:	00bfffc4 	movi	r2,-1
  a0a358:	18800926 	beq	r3,r2,a0a380 <__sseek+0x48>
  a0a35c:	8080030b 	ldhu	r2,12(r16)
  a0a360:	80c01415 	stw	r3,80(r16)
  a0a364:	10840014 	ori	r2,r2,4096
  a0a368:	8080030d 	sth	r2,12(r16)
  a0a36c:	1805883a 	mov	r2,r3
  a0a370:	dfc00117 	ldw	ra,4(sp)
  a0a374:	dc000017 	ldw	r16,0(sp)
  a0a378:	dec00204 	addi	sp,sp,8
  a0a37c:	f800283a 	ret
  a0a380:	8080030b 	ldhu	r2,12(r16)
  a0a384:	10bbffcc 	andi	r2,r2,61439
  a0a388:	8080030d 	sth	r2,12(r16)
  a0a38c:	1805883a 	mov	r2,r3
  a0a390:	dfc00117 	ldw	ra,4(sp)
  a0a394:	dc000017 	ldw	r16,0(sp)
  a0a398:	dec00204 	addi	sp,sp,8
  a0a39c:	f800283a 	ret

00a0a3a0 <__swrite>:
  a0a3a0:	2880030b 	ldhu	r2,12(r5)
  a0a3a4:	defffb04 	addi	sp,sp,-20
  a0a3a8:	dcc00315 	stw	r19,12(sp)
  a0a3ac:	1080400c 	andi	r2,r2,256
  a0a3b0:	dc800215 	stw	r18,8(sp)
  a0a3b4:	dc400115 	stw	r17,4(sp)
  a0a3b8:	dc000015 	stw	r16,0(sp)
  a0a3bc:	3027883a 	mov	r19,r6
  a0a3c0:	3825883a 	mov	r18,r7
  a0a3c4:	dfc00415 	stw	ra,16(sp)
  a0a3c8:	2821883a 	mov	r16,r5
  a0a3cc:	000d883a 	mov	r6,zero
  a0a3d0:	01c00084 	movi	r7,2
  a0a3d4:	2023883a 	mov	r17,r4
  a0a3d8:	10000226 	beq	r2,zero,a0a3e4 <__swrite+0x44>
  a0a3dc:	2940038f 	ldh	r5,14(r5)
  a0a3e0:	0a0a8dc0 	call	a0a8dc <_lseek_r>
  a0a3e4:	8080030b 	ldhu	r2,12(r16)
  a0a3e8:	8140038f 	ldh	r5,14(r16)
  a0a3ec:	8809883a 	mov	r4,r17
  a0a3f0:	10bbffcc 	andi	r2,r2,61439
  a0a3f4:	980d883a 	mov	r6,r19
  a0a3f8:	900f883a 	mov	r7,r18
  a0a3fc:	8080030d 	sth	r2,12(r16)
  a0a400:	dfc00417 	ldw	ra,16(sp)
  a0a404:	dcc00317 	ldw	r19,12(sp)
  a0a408:	dc800217 	ldw	r18,8(sp)
  a0a40c:	dc400117 	ldw	r17,4(sp)
  a0a410:	dc000017 	ldw	r16,0(sp)
  a0a414:	dec00504 	addi	sp,sp,20
  a0a418:	0a0a5381 	jmpi	a0a538 <_write_r>

00a0a41c <__sread>:
  a0a41c:	defffe04 	addi	sp,sp,-8
  a0a420:	dc000015 	stw	r16,0(sp)
  a0a424:	2821883a 	mov	r16,r5
  a0a428:	2940038f 	ldh	r5,14(r5)
  a0a42c:	dfc00115 	stw	ra,4(sp)
  a0a430:	0a0a9540 	call	a0a954 <_read_r>
  a0a434:	1007883a 	mov	r3,r2
  a0a438:	10000816 	blt	r2,zero,a0a45c <__sread+0x40>
  a0a43c:	80801417 	ldw	r2,80(r16)
  a0a440:	10c5883a 	add	r2,r2,r3
  a0a444:	80801415 	stw	r2,80(r16)
  a0a448:	1805883a 	mov	r2,r3
  a0a44c:	dfc00117 	ldw	ra,4(sp)
  a0a450:	dc000017 	ldw	r16,0(sp)
  a0a454:	dec00204 	addi	sp,sp,8
  a0a458:	f800283a 	ret
  a0a45c:	8080030b 	ldhu	r2,12(r16)
  a0a460:	10bbffcc 	andi	r2,r2,61439
  a0a464:	8080030d 	sth	r2,12(r16)
  a0a468:	1805883a 	mov	r2,r3
  a0a46c:	dfc00117 	ldw	ra,4(sp)
  a0a470:	dc000017 	ldw	r16,0(sp)
  a0a474:	dec00204 	addi	sp,sp,8
  a0a478:	f800283a 	ret

00a0a47c <strcmp>:
  a0a47c:	2144b03a 	or	r2,r4,r5
  a0a480:	108000cc 	andi	r2,r2,3
  a0a484:	10001d1e 	bne	r2,zero,a0a4fc <strcmp+0x80>
  a0a488:	200f883a 	mov	r7,r4
  a0a48c:	28800017 	ldw	r2,0(r5)
  a0a490:	21000017 	ldw	r4,0(r4)
  a0a494:	280d883a 	mov	r6,r5
  a0a498:	2080161e 	bne	r4,r2,a0a4f4 <strcmp+0x78>
  a0a49c:	023fbff4 	movhi	r8,65279
  a0a4a0:	423fbfc4 	addi	r8,r8,-257
  a0a4a4:	2207883a 	add	r3,r4,r8
  a0a4a8:	01602074 	movhi	r5,32897
  a0a4ac:	29602004 	addi	r5,r5,-32640
  a0a4b0:	1946703a 	and	r3,r3,r5
  a0a4b4:	0104303a 	nor	r2,zero,r4
  a0a4b8:	10c4703a 	and	r2,r2,r3
  a0a4bc:	10001c1e 	bne	r2,zero,a0a530 <strcmp+0xb4>
  a0a4c0:	4013883a 	mov	r9,r8
  a0a4c4:	2811883a 	mov	r8,r5
  a0a4c8:	00000106 	br	a0a4d0 <strcmp+0x54>
  a0a4cc:	1800181e 	bne	r3,zero,a0a530 <strcmp+0xb4>
  a0a4d0:	39c00104 	addi	r7,r7,4
  a0a4d4:	39000017 	ldw	r4,0(r7)
  a0a4d8:	31800104 	addi	r6,r6,4
  a0a4dc:	31400017 	ldw	r5,0(r6)
  a0a4e0:	2245883a 	add	r2,r4,r9
  a0a4e4:	1204703a 	and	r2,r2,r8
  a0a4e8:	0106303a 	nor	r3,zero,r4
  a0a4ec:	1886703a 	and	r3,r3,r2
  a0a4f0:	217ff626 	beq	r4,r5,a0a4cc <strcmp+0x50>
  a0a4f4:	3809883a 	mov	r4,r7
  a0a4f8:	300b883a 	mov	r5,r6
  a0a4fc:	20c00007 	ldb	r3,0(r4)
  a0a500:	1800051e 	bne	r3,zero,a0a518 <strcmp+0x9c>
  a0a504:	00000606 	br	a0a520 <strcmp+0xa4>
  a0a508:	21000044 	addi	r4,r4,1
  a0a50c:	20c00007 	ldb	r3,0(r4)
  a0a510:	29400044 	addi	r5,r5,1
  a0a514:	18000226 	beq	r3,zero,a0a520 <strcmp+0xa4>
  a0a518:	28800007 	ldb	r2,0(r5)
  a0a51c:	18bffa26 	beq	r3,r2,a0a508 <strcmp+0x8c>
  a0a520:	20c00003 	ldbu	r3,0(r4)
  a0a524:	28800003 	ldbu	r2,0(r5)
  a0a528:	1885c83a 	sub	r2,r3,r2
  a0a52c:	f800283a 	ret
  a0a530:	0005883a 	mov	r2,zero
  a0a534:	f800283a 	ret

00a0a538 <_write_r>:
  a0a538:	defffd04 	addi	sp,sp,-12
  a0a53c:	dc000015 	stw	r16,0(sp)
  a0a540:	04002874 	movhi	r16,161
  a0a544:	8411fc04 	addi	r16,r16,18416
  a0a548:	dc400115 	stw	r17,4(sp)
  a0a54c:	80000015 	stw	zero,0(r16)
  a0a550:	2023883a 	mov	r17,r4
  a0a554:	2809883a 	mov	r4,r5
  a0a558:	300b883a 	mov	r5,r6
  a0a55c:	380d883a 	mov	r6,r7
  a0a560:	dfc00215 	stw	ra,8(sp)
  a0a564:	0a0c94c0 	call	a0c94c <write>
  a0a568:	1007883a 	mov	r3,r2
  a0a56c:	00bfffc4 	movi	r2,-1
  a0a570:	18800626 	beq	r3,r2,a0a58c <_write_r+0x54>
  a0a574:	1805883a 	mov	r2,r3
  a0a578:	dfc00217 	ldw	ra,8(sp)
  a0a57c:	dc400117 	ldw	r17,4(sp)
  a0a580:	dc000017 	ldw	r16,0(sp)
  a0a584:	dec00304 	addi	sp,sp,12
  a0a588:	f800283a 	ret
  a0a58c:	80800017 	ldw	r2,0(r16)
  a0a590:	103ff826 	beq	r2,zero,a0a574 <_write_r+0x3c>
  a0a594:	88800015 	stw	r2,0(r17)
  a0a598:	1805883a 	mov	r2,r3
  a0a59c:	dfc00217 	ldw	ra,8(sp)
  a0a5a0:	dc400117 	ldw	r17,4(sp)
  a0a5a4:	dc000017 	ldw	r16,0(sp)
  a0a5a8:	dec00304 	addi	sp,sp,12
  a0a5ac:	f800283a 	ret

00a0a5b0 <_calloc_r>:
  a0a5b0:	298b383a 	mul	r5,r5,r6
  a0a5b4:	defffe04 	addi	sp,sp,-8
  a0a5b8:	dc000015 	stw	r16,0(sp)
  a0a5bc:	dfc00115 	stw	ra,4(sp)
  a0a5c0:	0a0822c0 	call	a0822c <_malloc_r>
  a0a5c4:	1021883a 	mov	r16,r2
  a0a5c8:	01c00904 	movi	r7,36
  a0a5cc:	10000d26 	beq	r2,zero,a0a604 <_calloc_r+0x54>
  a0a5d0:	10ffff17 	ldw	r3,-4(r2)
  a0a5d4:	1009883a 	mov	r4,r2
  a0a5d8:	00bfff04 	movi	r2,-4
  a0a5dc:	1886703a 	and	r3,r3,r2
  a0a5e0:	1887883a 	add	r3,r3,r2
  a0a5e4:	180d883a 	mov	r6,r3
  a0a5e8:	000b883a 	mov	r5,zero
  a0a5ec:	38c01736 	bltu	r7,r3,a0a64c <_calloc_r+0x9c>
  a0a5f0:	008004c4 	movi	r2,19
  a0a5f4:	10c00836 	bltu	r2,r3,a0a618 <_calloc_r+0x68>
  a0a5f8:	20000215 	stw	zero,8(r4)
  a0a5fc:	20000015 	stw	zero,0(r4)
  a0a600:	20000115 	stw	zero,4(r4)
  a0a604:	8005883a 	mov	r2,r16
  a0a608:	dfc00117 	ldw	ra,4(sp)
  a0a60c:	dc000017 	ldw	r16,0(sp)
  a0a610:	dec00204 	addi	sp,sp,8
  a0a614:	f800283a 	ret
  a0a618:	008006c4 	movi	r2,27
  a0a61c:	80000015 	stw	zero,0(r16)
  a0a620:	80000115 	stw	zero,4(r16)
  a0a624:	81000204 	addi	r4,r16,8
  a0a628:	10fff32e 	bgeu	r2,r3,a0a5f8 <_calloc_r+0x48>
  a0a62c:	80000215 	stw	zero,8(r16)
  a0a630:	80000315 	stw	zero,12(r16)
  a0a634:	81000404 	addi	r4,r16,16
  a0a638:	19ffef1e 	bne	r3,r7,a0a5f8 <_calloc_r+0x48>
  a0a63c:	81000604 	addi	r4,r16,24
  a0a640:	80000415 	stw	zero,16(r16)
  a0a644:	80000515 	stw	zero,20(r16)
  a0a648:	003feb06 	br	a0a5f8 <_calloc_r+0x48>
  a0a64c:	0a08bd00 	call	a08bd0 <memset>
  a0a650:	8005883a 	mov	r2,r16
  a0a654:	dfc00117 	ldw	ra,4(sp)
  a0a658:	dc000017 	ldw	r16,0(sp)
  a0a65c:	dec00204 	addi	sp,sp,8
  a0a660:	f800283a 	ret

00a0a664 <_close_r>:
  a0a664:	defffd04 	addi	sp,sp,-12
  a0a668:	dc000015 	stw	r16,0(sp)
  a0a66c:	04002874 	movhi	r16,161
  a0a670:	8411fc04 	addi	r16,r16,18416
  a0a674:	dc400115 	stw	r17,4(sp)
  a0a678:	80000015 	stw	zero,0(r16)
  a0a67c:	2023883a 	mov	r17,r4
  a0a680:	2809883a 	mov	r4,r5
  a0a684:	dfc00215 	stw	ra,8(sp)
  a0a688:	0a0bfec0 	call	a0bfec <close>
  a0a68c:	1007883a 	mov	r3,r2
  a0a690:	00bfffc4 	movi	r2,-1
  a0a694:	18800626 	beq	r3,r2,a0a6b0 <_close_r+0x4c>
  a0a698:	1805883a 	mov	r2,r3
  a0a69c:	dfc00217 	ldw	ra,8(sp)
  a0a6a0:	dc400117 	ldw	r17,4(sp)
  a0a6a4:	dc000017 	ldw	r16,0(sp)
  a0a6a8:	dec00304 	addi	sp,sp,12
  a0a6ac:	f800283a 	ret
  a0a6b0:	80800017 	ldw	r2,0(r16)
  a0a6b4:	103ff826 	beq	r2,zero,a0a698 <_close_r+0x34>
  a0a6b8:	88800015 	stw	r2,0(r17)
  a0a6bc:	1805883a 	mov	r2,r3
  a0a6c0:	dfc00217 	ldw	ra,8(sp)
  a0a6c4:	dc400117 	ldw	r17,4(sp)
  a0a6c8:	dc000017 	ldw	r16,0(sp)
  a0a6cc:	dec00304 	addi	sp,sp,12
  a0a6d0:	f800283a 	ret

00a0a6d4 <_fclose_r>:
  a0a6d4:	defffc04 	addi	sp,sp,-16
  a0a6d8:	dc400115 	stw	r17,4(sp)
  a0a6dc:	dc000015 	stw	r16,0(sp)
  a0a6e0:	dfc00315 	stw	ra,12(sp)
  a0a6e4:	dc800215 	stw	r18,8(sp)
  a0a6e8:	2821883a 	mov	r16,r5
  a0a6ec:	2023883a 	mov	r17,r4
  a0a6f0:	28002926 	beq	r5,zero,a0a798 <_fclose_r+0xc4>
  a0a6f4:	0a073100 	call	a07310 <__sfp_lock_acquire>
  a0a6f8:	88000226 	beq	r17,zero,a0a704 <_fclose_r+0x30>
  a0a6fc:	88800e17 	ldw	r2,56(r17)
  a0a700:	10002d26 	beq	r2,zero,a0a7b8 <_fclose_r+0xe4>
  a0a704:	8080030f 	ldh	r2,12(r16)
  a0a708:	10002226 	beq	r2,zero,a0a794 <_fclose_r+0xc0>
  a0a70c:	8809883a 	mov	r4,r17
  a0a710:	800b883a 	mov	r5,r16
  a0a714:	0a070880 	call	a07088 <_fflush_r>
  a0a718:	1025883a 	mov	r18,r2
  a0a71c:	80800b17 	ldw	r2,44(r16)
  a0a720:	10000426 	beq	r2,zero,a0a734 <_fclose_r+0x60>
  a0a724:	81400717 	ldw	r5,28(r16)
  a0a728:	8809883a 	mov	r4,r17
  a0a72c:	103ee83a 	callr	r2
  a0a730:	10002a16 	blt	r2,zero,a0a7dc <_fclose_r+0x108>
  a0a734:	8080030b 	ldhu	r2,12(r16)
  a0a738:	1080200c 	andi	r2,r2,128
  a0a73c:	1000231e 	bne	r2,zero,a0a7cc <_fclose_r+0xf8>
  a0a740:	81400c17 	ldw	r5,48(r16)
  a0a744:	28000526 	beq	r5,zero,a0a75c <_fclose_r+0x88>
  a0a748:	80801004 	addi	r2,r16,64
  a0a74c:	28800226 	beq	r5,r2,a0a758 <_fclose_r+0x84>
  a0a750:	8809883a 	mov	r4,r17
  a0a754:	0a076a40 	call	a076a4 <_free_r>
  a0a758:	80000c15 	stw	zero,48(r16)
  a0a75c:	81401117 	ldw	r5,68(r16)
  a0a760:	28000326 	beq	r5,zero,a0a770 <_fclose_r+0x9c>
  a0a764:	8809883a 	mov	r4,r17
  a0a768:	0a076a40 	call	a076a4 <_free_r>
  a0a76c:	80001115 	stw	zero,68(r16)
  a0a770:	8000030d 	sth	zero,12(r16)
  a0a774:	0a073140 	call	a07314 <__sfp_lock_release>
  a0a778:	9005883a 	mov	r2,r18
  a0a77c:	dfc00317 	ldw	ra,12(sp)
  a0a780:	dc800217 	ldw	r18,8(sp)
  a0a784:	dc400117 	ldw	r17,4(sp)
  a0a788:	dc000017 	ldw	r16,0(sp)
  a0a78c:	dec00404 	addi	sp,sp,16
  a0a790:	f800283a 	ret
  a0a794:	0a073140 	call	a07314 <__sfp_lock_release>
  a0a798:	0025883a 	mov	r18,zero
  a0a79c:	9005883a 	mov	r2,r18
  a0a7a0:	dfc00317 	ldw	ra,12(sp)
  a0a7a4:	dc800217 	ldw	r18,8(sp)
  a0a7a8:	dc400117 	ldw	r17,4(sp)
  a0a7ac:	dc000017 	ldw	r16,0(sp)
  a0a7b0:	dec00404 	addi	sp,sp,16
  a0a7b4:	f800283a 	ret
  a0a7b8:	8809883a 	mov	r4,r17
  a0a7bc:	0a073200 	call	a07320 <__sinit>
  a0a7c0:	8080030f 	ldh	r2,12(r16)
  a0a7c4:	103fd11e 	bne	r2,zero,a0a70c <_fclose_r+0x38>
  a0a7c8:	003ff206 	br	a0a794 <_fclose_r+0xc0>
  a0a7cc:	81400417 	ldw	r5,16(r16)
  a0a7d0:	8809883a 	mov	r4,r17
  a0a7d4:	0a076a40 	call	a076a4 <_free_r>
  a0a7d8:	003fd906 	br	a0a740 <_fclose_r+0x6c>
  a0a7dc:	04bfffc4 	movi	r18,-1
  a0a7e0:	003fd406 	br	a0a734 <_fclose_r+0x60>

00a0a7e4 <fclose>:
  a0a7e4:	00802874 	movhi	r2,161
  a0a7e8:	108aec04 	addi	r2,r2,11184
  a0a7ec:	200b883a 	mov	r5,r4
  a0a7f0:	11000017 	ldw	r4,0(r2)
  a0a7f4:	0a0a6d41 	jmpi	a0a6d4 <_fclose_r>

00a0a7f8 <_fstat_r>:
  a0a7f8:	defffd04 	addi	sp,sp,-12
  a0a7fc:	dc000015 	stw	r16,0(sp)
  a0a800:	04002874 	movhi	r16,161
  a0a804:	8411fc04 	addi	r16,r16,18416
  a0a808:	dc400115 	stw	r17,4(sp)
  a0a80c:	80000015 	stw	zero,0(r16)
  a0a810:	2023883a 	mov	r17,r4
  a0a814:	2809883a 	mov	r4,r5
  a0a818:	300b883a 	mov	r5,r6
  a0a81c:	dfc00215 	stw	ra,8(sp)
  a0a820:	0a0c1740 	call	a0c174 <fstat>
  a0a824:	1007883a 	mov	r3,r2
  a0a828:	00bfffc4 	movi	r2,-1
  a0a82c:	18800626 	beq	r3,r2,a0a848 <_fstat_r+0x50>
  a0a830:	1805883a 	mov	r2,r3
  a0a834:	dfc00217 	ldw	ra,8(sp)
  a0a838:	dc400117 	ldw	r17,4(sp)
  a0a83c:	dc000017 	ldw	r16,0(sp)
  a0a840:	dec00304 	addi	sp,sp,12
  a0a844:	f800283a 	ret
  a0a848:	80800017 	ldw	r2,0(r16)
  a0a84c:	103ff826 	beq	r2,zero,a0a830 <_fstat_r+0x38>
  a0a850:	88800015 	stw	r2,0(r17)
  a0a854:	1805883a 	mov	r2,r3
  a0a858:	dfc00217 	ldw	ra,8(sp)
  a0a85c:	dc400117 	ldw	r17,4(sp)
  a0a860:	dc000017 	ldw	r16,0(sp)
  a0a864:	dec00304 	addi	sp,sp,12
  a0a868:	f800283a 	ret

00a0a86c <_isatty_r>:
  a0a86c:	defffd04 	addi	sp,sp,-12
  a0a870:	dc000015 	stw	r16,0(sp)
  a0a874:	04002874 	movhi	r16,161
  a0a878:	8411fc04 	addi	r16,r16,18416
  a0a87c:	dc400115 	stw	r17,4(sp)
  a0a880:	80000015 	stw	zero,0(r16)
  a0a884:	2023883a 	mov	r17,r4
  a0a888:	2809883a 	mov	r4,r5
  a0a88c:	dfc00215 	stw	ra,8(sp)
  a0a890:	0a0c2a80 	call	a0c2a8 <isatty>
  a0a894:	1007883a 	mov	r3,r2
  a0a898:	00bfffc4 	movi	r2,-1
  a0a89c:	18800626 	beq	r3,r2,a0a8b8 <_isatty_r+0x4c>
  a0a8a0:	1805883a 	mov	r2,r3
  a0a8a4:	dfc00217 	ldw	ra,8(sp)
  a0a8a8:	dc400117 	ldw	r17,4(sp)
  a0a8ac:	dc000017 	ldw	r16,0(sp)
  a0a8b0:	dec00304 	addi	sp,sp,12
  a0a8b4:	f800283a 	ret
  a0a8b8:	80800017 	ldw	r2,0(r16)
  a0a8bc:	103ff826 	beq	r2,zero,a0a8a0 <_isatty_r+0x34>
  a0a8c0:	88800015 	stw	r2,0(r17)
  a0a8c4:	1805883a 	mov	r2,r3
  a0a8c8:	dfc00217 	ldw	ra,8(sp)
  a0a8cc:	dc400117 	ldw	r17,4(sp)
  a0a8d0:	dc000017 	ldw	r16,0(sp)
  a0a8d4:	dec00304 	addi	sp,sp,12
  a0a8d8:	f800283a 	ret

00a0a8dc <_lseek_r>:
  a0a8dc:	defffd04 	addi	sp,sp,-12
  a0a8e0:	dc000015 	stw	r16,0(sp)
  a0a8e4:	04002874 	movhi	r16,161
  a0a8e8:	8411fc04 	addi	r16,r16,18416
  a0a8ec:	dc400115 	stw	r17,4(sp)
  a0a8f0:	80000015 	stw	zero,0(r16)
  a0a8f4:	2023883a 	mov	r17,r4
  a0a8f8:	2809883a 	mov	r4,r5
  a0a8fc:	300b883a 	mov	r5,r6
  a0a900:	380d883a 	mov	r6,r7
  a0a904:	dfc00215 	stw	ra,8(sp)
  a0a908:	0a0c4b40 	call	a0c4b4 <lseek>
  a0a90c:	1007883a 	mov	r3,r2
  a0a910:	00bfffc4 	movi	r2,-1
  a0a914:	18800626 	beq	r3,r2,a0a930 <_lseek_r+0x54>
  a0a918:	1805883a 	mov	r2,r3
  a0a91c:	dfc00217 	ldw	ra,8(sp)
  a0a920:	dc400117 	ldw	r17,4(sp)
  a0a924:	dc000017 	ldw	r16,0(sp)
  a0a928:	dec00304 	addi	sp,sp,12
  a0a92c:	f800283a 	ret
  a0a930:	80800017 	ldw	r2,0(r16)
  a0a934:	103ff826 	beq	r2,zero,a0a918 <_lseek_r+0x3c>
  a0a938:	88800015 	stw	r2,0(r17)
  a0a93c:	1805883a 	mov	r2,r3
  a0a940:	dfc00217 	ldw	ra,8(sp)
  a0a944:	dc400117 	ldw	r17,4(sp)
  a0a948:	dc000017 	ldw	r16,0(sp)
  a0a94c:	dec00304 	addi	sp,sp,12
  a0a950:	f800283a 	ret

00a0a954 <_read_r>:
  a0a954:	defffd04 	addi	sp,sp,-12
  a0a958:	dc000015 	stw	r16,0(sp)
  a0a95c:	04002874 	movhi	r16,161
  a0a960:	8411fc04 	addi	r16,r16,18416
  a0a964:	dc400115 	stw	r17,4(sp)
  a0a968:	80000015 	stw	zero,0(r16)
  a0a96c:	2023883a 	mov	r17,r4
  a0a970:	2809883a 	mov	r4,r5
  a0a974:	300b883a 	mov	r5,r6
  a0a978:	380d883a 	mov	r6,r7
  a0a97c:	dfc00215 	stw	ra,8(sp)
  a0a980:	0a0c6b00 	call	a0c6b0 <read>
  a0a984:	1007883a 	mov	r3,r2
  a0a988:	00bfffc4 	movi	r2,-1
  a0a98c:	18800626 	beq	r3,r2,a0a9a8 <_read_r+0x54>
  a0a990:	1805883a 	mov	r2,r3
  a0a994:	dfc00217 	ldw	ra,8(sp)
  a0a998:	dc400117 	ldw	r17,4(sp)
  a0a99c:	dc000017 	ldw	r16,0(sp)
  a0a9a0:	dec00304 	addi	sp,sp,12
  a0a9a4:	f800283a 	ret
  a0a9a8:	80800017 	ldw	r2,0(r16)
  a0a9ac:	103ff826 	beq	r2,zero,a0a990 <_read_r+0x3c>
  a0a9b0:	88800015 	stw	r2,0(r17)
  a0a9b4:	1805883a 	mov	r2,r3
  a0a9b8:	dfc00217 	ldw	ra,8(sp)
  a0a9bc:	dc400117 	ldw	r17,4(sp)
  a0a9c0:	dc000017 	ldw	r16,0(sp)
  a0a9c4:	dec00304 	addi	sp,sp,12
  a0a9c8:	f800283a 	ret

00a0a9cc <__udivdi3>:
  a0a9cc:	defff004 	addi	sp,sp,-64
  a0a9d0:	2005883a 	mov	r2,r4
  a0a9d4:	3011883a 	mov	r8,r6
  a0a9d8:	df000e15 	stw	fp,56(sp)
  a0a9dc:	dd000a15 	stw	r20,40(sp)
  a0a9e0:	dc000615 	stw	r16,24(sp)
  a0a9e4:	dfc00f15 	stw	ra,60(sp)
  a0a9e8:	ddc00d15 	stw	r23,52(sp)
  a0a9ec:	dd800c15 	stw	r22,48(sp)
  a0a9f0:	dd400b15 	stw	r21,44(sp)
  a0a9f4:	dcc00915 	stw	r19,36(sp)
  a0a9f8:	dc800815 	stw	r18,32(sp)
  a0a9fc:	dc400715 	stw	r17,28(sp)
  a0aa00:	4021883a 	mov	r16,r8
  a0aa04:	1039883a 	mov	fp,r2
  a0aa08:	2829883a 	mov	r20,r5
  a0aa0c:	38003b1e 	bne	r7,zero,a0aafc <__udivdi3+0x130>
  a0aa10:	2a005c36 	bltu	r5,r8,a0ab84 <__udivdi3+0x1b8>
  a0aa14:	4000a626 	beq	r8,zero,a0acb0 <__udivdi3+0x2e4>
  a0aa18:	00bfffd4 	movui	r2,65535
  a0aa1c:	14009e36 	bltu	r2,r16,a0ac98 <__udivdi3+0x2cc>
  a0aa20:	00803fc4 	movi	r2,255
  a0aa24:	14013d36 	bltu	r2,r16,a0af1c <__udivdi3+0x550>
  a0aa28:	000b883a 	mov	r5,zero
  a0aa2c:	0005883a 	mov	r2,zero
  a0aa30:	8084d83a 	srl	r2,r16,r2
  a0aa34:	01002874 	movhi	r4,161
  a0aa38:	2102f904 	addi	r4,r4,3044
  a0aa3c:	01800804 	movi	r6,32
  a0aa40:	1105883a 	add	r2,r2,r4
  a0aa44:	10c00003 	ldbu	r3,0(r2)
  a0aa48:	28c7883a 	add	r3,r5,r3
  a0aa4c:	30edc83a 	sub	r22,r6,r3
  a0aa50:	b000ee1e 	bne	r22,zero,a0ae0c <__udivdi3+0x440>
  a0aa54:	802ad43a 	srli	r21,r16,16
  a0aa58:	00800044 	movi	r2,1
  a0aa5c:	a423c83a 	sub	r17,r20,r16
  a0aa60:	85ffffcc 	andi	r23,r16,65535
  a0aa64:	d8800315 	stw	r2,12(sp)
  a0aa68:	8809883a 	mov	r4,r17
  a0aa6c:	a80b883a 	mov	r5,r21
  a0aa70:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0aa74:	8809883a 	mov	r4,r17
  a0aa78:	a80b883a 	mov	r5,r21
  a0aa7c:	102d883a 	mov	r22,r2
  a0aa80:	0a0bfe40 	call	a0bfe4 <__umodsi3>
  a0aa84:	1004943a 	slli	r2,r2,16
  a0aa88:	e006d43a 	srli	r3,fp,16
  a0aa8c:	bda3383a 	mul	r17,r23,r22
  a0aa90:	10c4b03a 	or	r2,r2,r3
  a0aa94:	1440042e 	bgeu	r2,r17,a0aaa8 <__udivdi3+0xdc>
  a0aa98:	1405883a 	add	r2,r2,r16
  a0aa9c:	b5bfffc4 	addi	r22,r22,-1
  a0aaa0:	14000136 	bltu	r2,r16,a0aaa8 <__udivdi3+0xdc>
  a0aaa4:	14413d36 	bltu	r2,r17,a0af9c <__udivdi3+0x5d0>
  a0aaa8:	1463c83a 	sub	r17,r2,r17
  a0aaac:	8809883a 	mov	r4,r17
  a0aab0:	a80b883a 	mov	r5,r21
  a0aab4:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0aab8:	8809883a 	mov	r4,r17
  a0aabc:	a80b883a 	mov	r5,r21
  a0aac0:	1029883a 	mov	r20,r2
  a0aac4:	0a0bfe40 	call	a0bfe4 <__umodsi3>
  a0aac8:	1004943a 	slli	r2,r2,16
  a0aacc:	bd09383a 	mul	r4,r23,r20
  a0aad0:	e0ffffcc 	andi	r3,fp,65535
  a0aad4:	10c4b03a 	or	r2,r2,r3
  a0aad8:	1100042e 	bgeu	r2,r4,a0aaec <__udivdi3+0x120>
  a0aadc:	8085883a 	add	r2,r16,r2
  a0aae0:	a53fffc4 	addi	r20,r20,-1
  a0aae4:	14000136 	bltu	r2,r16,a0aaec <__udivdi3+0x120>
  a0aae8:	11012036 	bltu	r2,r4,a0af6c <__udivdi3+0x5a0>
  a0aaec:	b004943a 	slli	r2,r22,16
  a0aaf0:	d9000317 	ldw	r4,12(sp)
  a0aaf4:	a084b03a 	or	r2,r20,r2
  a0aaf8:	00001506 	br	a0ab50 <__udivdi3+0x184>
  a0aafc:	380d883a 	mov	r6,r7
  a0ab00:	29c06236 	bltu	r5,r7,a0ac8c <__udivdi3+0x2c0>
  a0ab04:	00bfffd4 	movui	r2,65535
  a0ab08:	11c05a36 	bltu	r2,r7,a0ac74 <__udivdi3+0x2a8>
  a0ab0c:	00803fc4 	movi	r2,255
  a0ab10:	11c0fc36 	bltu	r2,r7,a0af04 <__udivdi3+0x538>
  a0ab14:	000b883a 	mov	r5,zero
  a0ab18:	0005883a 	mov	r2,zero
  a0ab1c:	3084d83a 	srl	r2,r6,r2
  a0ab20:	01002874 	movhi	r4,161
  a0ab24:	2102f904 	addi	r4,r4,3044
  a0ab28:	01c00804 	movi	r7,32
  a0ab2c:	1105883a 	add	r2,r2,r4
  a0ab30:	10c00003 	ldbu	r3,0(r2)
  a0ab34:	28c7883a 	add	r3,r5,r3
  a0ab38:	38efc83a 	sub	r23,r7,r3
  a0ab3c:	b800691e 	bne	r23,zero,a0ace4 <__udivdi3+0x318>
  a0ab40:	35000136 	bltu	r6,r20,a0ab48 <__udivdi3+0x17c>
  a0ab44:	e4005136 	bltu	fp,r16,a0ac8c <__udivdi3+0x2c0>
  a0ab48:	00800044 	movi	r2,1
  a0ab4c:	0009883a 	mov	r4,zero
  a0ab50:	2007883a 	mov	r3,r4
  a0ab54:	dfc00f17 	ldw	ra,60(sp)
  a0ab58:	df000e17 	ldw	fp,56(sp)
  a0ab5c:	ddc00d17 	ldw	r23,52(sp)
  a0ab60:	dd800c17 	ldw	r22,48(sp)
  a0ab64:	dd400b17 	ldw	r21,44(sp)
  a0ab68:	dd000a17 	ldw	r20,40(sp)
  a0ab6c:	dcc00917 	ldw	r19,36(sp)
  a0ab70:	dc800817 	ldw	r18,32(sp)
  a0ab74:	dc400717 	ldw	r17,28(sp)
  a0ab78:	dc000617 	ldw	r16,24(sp)
  a0ab7c:	dec01004 	addi	sp,sp,64
  a0ab80:	f800283a 	ret
  a0ab84:	00bfffd4 	movui	r2,65535
  a0ab88:	12005036 	bltu	r2,r8,a0accc <__udivdi3+0x300>
  a0ab8c:	00803fc4 	movi	r2,255
  a0ab90:	1200e836 	bltu	r2,r8,a0af34 <__udivdi3+0x568>
  a0ab94:	000b883a 	mov	r5,zero
  a0ab98:	0005883a 	mov	r2,zero
  a0ab9c:	8084d83a 	srl	r2,r16,r2
  a0aba0:	01002874 	movhi	r4,161
  a0aba4:	2102f904 	addi	r4,r4,3044
  a0aba8:	01800804 	movi	r6,32
  a0abac:	1105883a 	add	r2,r2,r4
  a0abb0:	10c00003 	ldbu	r3,0(r2)
  a0abb4:	28c7883a 	add	r3,r5,r3
  a0abb8:	30cbc83a 	sub	r5,r6,r3
  a0abbc:	28000626 	beq	r5,zero,a0abd8 <__udivdi3+0x20c>
  a0abc0:	3145c83a 	sub	r2,r6,r5
  a0abc4:	e084d83a 	srl	r2,fp,r2
  a0abc8:	a146983a 	sll	r3,r20,r5
  a0abcc:	e178983a 	sll	fp,fp,r5
  a0abd0:	8160983a 	sll	r16,r16,r5
  a0abd4:	18a8b03a 	or	r20,r3,r2
  a0abd8:	802ad43a 	srli	r21,r16,16
  a0abdc:	a009883a 	mov	r4,r20
  a0abe0:	85ffffcc 	andi	r23,r16,65535
  a0abe4:	a80b883a 	mov	r5,r21
  a0abe8:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0abec:	a009883a 	mov	r4,r20
  a0abf0:	a80b883a 	mov	r5,r21
  a0abf4:	102d883a 	mov	r22,r2
  a0abf8:	0a0bfe40 	call	a0bfe4 <__umodsi3>
  a0abfc:	1004943a 	slli	r2,r2,16
  a0ac00:	e006d43a 	srli	r3,fp,16
  a0ac04:	bda3383a 	mul	r17,r23,r22
  a0ac08:	10c4b03a 	or	r2,r2,r3
  a0ac0c:	1440042e 	bgeu	r2,r17,a0ac20 <__udivdi3+0x254>
  a0ac10:	1405883a 	add	r2,r2,r16
  a0ac14:	b5bfffc4 	addi	r22,r22,-1
  a0ac18:	14000136 	bltu	r2,r16,a0ac20 <__udivdi3+0x254>
  a0ac1c:	1440d536 	bltu	r2,r17,a0af74 <__udivdi3+0x5a8>
  a0ac20:	1463c83a 	sub	r17,r2,r17
  a0ac24:	8809883a 	mov	r4,r17
  a0ac28:	a80b883a 	mov	r5,r21
  a0ac2c:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0ac30:	8809883a 	mov	r4,r17
  a0ac34:	a80b883a 	mov	r5,r21
  a0ac38:	1029883a 	mov	r20,r2
  a0ac3c:	0a0bfe40 	call	a0bfe4 <__umodsi3>
  a0ac40:	1004943a 	slli	r2,r2,16
  a0ac44:	bd09383a 	mul	r4,r23,r20
  a0ac48:	e0ffffcc 	andi	r3,fp,65535
  a0ac4c:	10c4b03a 	or	r2,r2,r3
  a0ac50:	1100042e 	bgeu	r2,r4,a0ac64 <__udivdi3+0x298>
  a0ac54:	8085883a 	add	r2,r16,r2
  a0ac58:	a53fffc4 	addi	r20,r20,-1
  a0ac5c:	14000136 	bltu	r2,r16,a0ac64 <__udivdi3+0x298>
  a0ac60:	1100c736 	bltu	r2,r4,a0af80 <__udivdi3+0x5b4>
  a0ac64:	b004943a 	slli	r2,r22,16
  a0ac68:	0009883a 	mov	r4,zero
  a0ac6c:	a084b03a 	or	r2,r20,r2
  a0ac70:	003fb706 	br	a0ab50 <__udivdi3+0x184>
  a0ac74:	00804034 	movhi	r2,256
  a0ac78:	10bfffc4 	addi	r2,r2,-1
  a0ac7c:	11c0a436 	bltu	r2,r7,a0af10 <__udivdi3+0x544>
  a0ac80:	01400404 	movi	r5,16
  a0ac84:	2805883a 	mov	r2,r5
  a0ac88:	003fa406 	br	a0ab1c <__udivdi3+0x150>
  a0ac8c:	0005883a 	mov	r2,zero
  a0ac90:	0009883a 	mov	r4,zero
  a0ac94:	003fae06 	br	a0ab50 <__udivdi3+0x184>
  a0ac98:	00804034 	movhi	r2,256
  a0ac9c:	10bfffc4 	addi	r2,r2,-1
  a0aca0:	1400a136 	bltu	r2,r16,a0af28 <__udivdi3+0x55c>
  a0aca4:	01400404 	movi	r5,16
  a0aca8:	2805883a 	mov	r2,r5
  a0acac:	003f6006 	br	a0aa30 <__udivdi3+0x64>
  a0acb0:	01000044 	movi	r4,1
  a0acb4:	000b883a 	mov	r5,zero
  a0acb8:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0acbc:	1021883a 	mov	r16,r2
  a0acc0:	00bfffd4 	movui	r2,65535
  a0acc4:	143ff436 	bltu	r2,r16,a0ac98 <__udivdi3+0x2cc>
  a0acc8:	003f5506 	br	a0aa20 <__udivdi3+0x54>
  a0accc:	00804034 	movhi	r2,256
  a0acd0:	10bfffc4 	addi	r2,r2,-1
  a0acd4:	12009a36 	bltu	r2,r8,a0af40 <__udivdi3+0x574>
  a0acd8:	01400404 	movi	r5,16
  a0acdc:	2805883a 	mov	r2,r5
  a0ace0:	003fae06 	br	a0ab9c <__udivdi3+0x1d0>
  a0ace4:	3dc5c83a 	sub	r2,r7,r23
  a0ace8:	35c8983a 	sll	r4,r6,r23
  a0acec:	8086d83a 	srl	r3,r16,r2
  a0acf0:	a0a2d83a 	srl	r17,r20,r2
  a0acf4:	e084d83a 	srl	r2,fp,r2
  a0acf8:	20eab03a 	or	r21,r4,r3
  a0acfc:	a82cd43a 	srli	r22,r21,16
  a0ad00:	a5c6983a 	sll	r3,r20,r23
  a0ad04:	8809883a 	mov	r4,r17
  a0ad08:	b00b883a 	mov	r5,r22
  a0ad0c:	1886b03a 	or	r3,r3,r2
  a0ad10:	d8c00215 	stw	r3,8(sp)
  a0ad14:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0ad18:	8809883a 	mov	r4,r17
  a0ad1c:	b00b883a 	mov	r5,r22
  a0ad20:	1029883a 	mov	r20,r2
  a0ad24:	0a0bfe40 	call	a0bfe4 <__umodsi3>
  a0ad28:	a8ffffcc 	andi	r3,r21,65535
  a0ad2c:	d8c00515 	stw	r3,20(sp)
  a0ad30:	d9000217 	ldw	r4,8(sp)
  a0ad34:	d9400517 	ldw	r5,20(sp)
  a0ad38:	1004943a 	slli	r2,r2,16
  a0ad3c:	2006d43a 	srli	r3,r4,16
  a0ad40:	85e0983a 	sll	r16,r16,r23
  a0ad44:	2d23383a 	mul	r17,r5,r20
  a0ad48:	10c4b03a 	or	r2,r2,r3
  a0ad4c:	dc000015 	stw	r16,0(sp)
  a0ad50:	1440032e 	bgeu	r2,r17,a0ad60 <__udivdi3+0x394>
  a0ad54:	1545883a 	add	r2,r2,r21
  a0ad58:	a53fffc4 	addi	r20,r20,-1
  a0ad5c:	15407f2e 	bgeu	r2,r21,a0af5c <__udivdi3+0x590>
  a0ad60:	1463c83a 	sub	r17,r2,r17
  a0ad64:	8809883a 	mov	r4,r17
  a0ad68:	b00b883a 	mov	r5,r22
  a0ad6c:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0ad70:	8809883a 	mov	r4,r17
  a0ad74:	b00b883a 	mov	r5,r22
  a0ad78:	1021883a 	mov	r16,r2
  a0ad7c:	0a0bfe40 	call	a0bfe4 <__umodsi3>
  a0ad80:	d8c00517 	ldw	r3,20(sp)
  a0ad84:	d9000217 	ldw	r4,8(sp)
  a0ad88:	1004943a 	slli	r2,r2,16
  a0ad8c:	1c0f383a 	mul	r7,r3,r16
  a0ad90:	20ffffcc 	andi	r3,r4,65535
  a0ad94:	10e2b03a 	or	r17,r2,r3
  a0ad98:	89c0032e 	bgeu	r17,r7,a0ada8 <__udivdi3+0x3dc>
  a0ad9c:	8d63883a 	add	r17,r17,r21
  a0ada0:	843fffc4 	addi	r16,r16,-1
  a0ada4:	8d40692e 	bgeu	r17,r21,a0af4c <__udivdi3+0x580>
  a0ada8:	a008943a 	slli	r4,r20,16
  a0adac:	d9400017 	ldw	r5,0(sp)
  a0adb0:	89e3c83a 	sub	r17,r17,r7
  a0adb4:	8110b03a 	or	r8,r16,r4
  a0adb8:	280cd43a 	srli	r6,r5,16
  a0adbc:	28ffffcc 	andi	r3,r5,65535
  a0adc0:	40bfffcc 	andi	r2,r8,65535
  a0adc4:	400ad43a 	srli	r5,r8,16
  a0adc8:	10d3383a 	mul	r9,r2,r3
  a0adcc:	1185383a 	mul	r2,r2,r6
  a0add0:	28c7383a 	mul	r3,r5,r3
  a0add4:	4808d43a 	srli	r4,r9,16
  a0add8:	298b383a 	mul	r5,r5,r6
  a0addc:	10c5883a 	add	r2,r2,r3
  a0ade0:	2089883a 	add	r4,r4,r2
  a0ade4:	20c0022e 	bgeu	r4,r3,a0adf0 <__udivdi3+0x424>
  a0ade8:	00800074 	movhi	r2,1
  a0adec:	288b883a 	add	r5,r5,r2
  a0adf0:	2004d43a 	srli	r2,r4,16
  a0adf4:	288b883a 	add	r5,r5,r2
  a0adf8:	89403f36 	bltu	r17,r5,a0aef8 <__udivdi3+0x52c>
  a0adfc:	89403926 	beq	r17,r5,a0aee4 <__udivdi3+0x518>
  a0ae00:	4005883a 	mov	r2,r8
  a0ae04:	0009883a 	mov	r4,zero
  a0ae08:	003f5106 	br	a0ab50 <__udivdi3+0x184>
  a0ae0c:	85a0983a 	sll	r16,r16,r22
  a0ae10:	3585c83a 	sub	r2,r6,r22
  a0ae14:	a0a2d83a 	srl	r17,r20,r2
  a0ae18:	802ad43a 	srli	r21,r16,16
  a0ae1c:	e084d83a 	srl	r2,fp,r2
  a0ae20:	a586983a 	sll	r3,r20,r22
  a0ae24:	8809883a 	mov	r4,r17
  a0ae28:	a80b883a 	mov	r5,r21
  a0ae2c:	1886b03a 	or	r3,r3,r2
  a0ae30:	d8c00115 	stw	r3,4(sp)
  a0ae34:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0ae38:	8809883a 	mov	r4,r17
  a0ae3c:	a80b883a 	mov	r5,r21
  a0ae40:	d8800415 	stw	r2,16(sp)
  a0ae44:	0a0bfe40 	call	a0bfe4 <__umodsi3>
  a0ae48:	d9000117 	ldw	r4,4(sp)
  a0ae4c:	d9400417 	ldw	r5,16(sp)
  a0ae50:	1004943a 	slli	r2,r2,16
  a0ae54:	85ffffcc 	andi	r23,r16,65535
  a0ae58:	2006d43a 	srli	r3,r4,16
  a0ae5c:	b963383a 	mul	r17,r23,r5
  a0ae60:	10c4b03a 	or	r2,r2,r3
  a0ae64:	1440042e 	bgeu	r2,r17,a0ae78 <__udivdi3+0x4ac>
  a0ae68:	297fffc4 	addi	r5,r5,-1
  a0ae6c:	1405883a 	add	r2,r2,r16
  a0ae70:	d9400415 	stw	r5,16(sp)
  a0ae74:	1400442e 	bgeu	r2,r16,a0af88 <__udivdi3+0x5bc>
  a0ae78:	1463c83a 	sub	r17,r2,r17
  a0ae7c:	8809883a 	mov	r4,r17
  a0ae80:	a80b883a 	mov	r5,r21
  a0ae84:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0ae88:	8809883a 	mov	r4,r17
  a0ae8c:	a80b883a 	mov	r5,r21
  a0ae90:	1029883a 	mov	r20,r2
  a0ae94:	0a0bfe40 	call	a0bfe4 <__umodsi3>
  a0ae98:	d9400117 	ldw	r5,4(sp)
  a0ae9c:	1004943a 	slli	r2,r2,16
  a0aea0:	bd09383a 	mul	r4,r23,r20
  a0aea4:	28ffffcc 	andi	r3,r5,65535
  a0aea8:	10c6b03a 	or	r3,r2,r3
  a0aeac:	1900062e 	bgeu	r3,r4,a0aec8 <__udivdi3+0x4fc>
  a0aeb0:	1c07883a 	add	r3,r3,r16
  a0aeb4:	a53fffc4 	addi	r20,r20,-1
  a0aeb8:	1c000336 	bltu	r3,r16,a0aec8 <__udivdi3+0x4fc>
  a0aebc:	1900022e 	bgeu	r3,r4,a0aec8 <__udivdi3+0x4fc>
  a0aec0:	a53fffc4 	addi	r20,r20,-1
  a0aec4:	1c07883a 	add	r3,r3,r16
  a0aec8:	d9400417 	ldw	r5,16(sp)
  a0aecc:	e5b8983a 	sll	fp,fp,r22
  a0aed0:	1923c83a 	sub	r17,r3,r4
  a0aed4:	2804943a 	slli	r2,r5,16
  a0aed8:	a0a8b03a 	or	r20,r20,r2
  a0aedc:	dd000315 	stw	r20,12(sp)
  a0aee0:	003ee106 	br	a0aa68 <__udivdi3+0x9c>
  a0aee4:	2004943a 	slli	r2,r4,16
  a0aee8:	e5c8983a 	sll	r4,fp,r23
  a0aeec:	48ffffcc 	andi	r3,r9,65535
  a0aef0:	10c5883a 	add	r2,r2,r3
  a0aef4:	20bfc22e 	bgeu	r4,r2,a0ae00 <__udivdi3+0x434>
  a0aef8:	40bfffc4 	addi	r2,r8,-1
  a0aefc:	0009883a 	mov	r4,zero
  a0af00:	003f1306 	br	a0ab50 <__udivdi3+0x184>
  a0af04:	01400204 	movi	r5,8
  a0af08:	2805883a 	mov	r2,r5
  a0af0c:	003f0306 	br	a0ab1c <__udivdi3+0x150>
  a0af10:	01400604 	movi	r5,24
  a0af14:	2805883a 	mov	r2,r5
  a0af18:	003f0006 	br	a0ab1c <__udivdi3+0x150>
  a0af1c:	01400204 	movi	r5,8
  a0af20:	2805883a 	mov	r2,r5
  a0af24:	003ec206 	br	a0aa30 <__udivdi3+0x64>
  a0af28:	01400604 	movi	r5,24
  a0af2c:	2805883a 	mov	r2,r5
  a0af30:	003ebf06 	br	a0aa30 <__udivdi3+0x64>
  a0af34:	01400204 	movi	r5,8
  a0af38:	2805883a 	mov	r2,r5
  a0af3c:	003f1706 	br	a0ab9c <__udivdi3+0x1d0>
  a0af40:	01400604 	movi	r5,24
  a0af44:	2805883a 	mov	r2,r5
  a0af48:	003f1406 	br	a0ab9c <__udivdi3+0x1d0>
  a0af4c:	89ff962e 	bgeu	r17,r7,a0ada8 <__udivdi3+0x3dc>
  a0af50:	8d63883a 	add	r17,r17,r21
  a0af54:	843fffc4 	addi	r16,r16,-1
  a0af58:	003f9306 	br	a0ada8 <__udivdi3+0x3dc>
  a0af5c:	147f802e 	bgeu	r2,r17,a0ad60 <__udivdi3+0x394>
  a0af60:	a53fffc4 	addi	r20,r20,-1
  a0af64:	1545883a 	add	r2,r2,r21
  a0af68:	003f7d06 	br	a0ad60 <__udivdi3+0x394>
  a0af6c:	a53fffc4 	addi	r20,r20,-1
  a0af70:	003ede06 	br	a0aaec <__udivdi3+0x120>
  a0af74:	b5bfffc4 	addi	r22,r22,-1
  a0af78:	1405883a 	add	r2,r2,r16
  a0af7c:	003f2806 	br	a0ac20 <__udivdi3+0x254>
  a0af80:	a53fffc4 	addi	r20,r20,-1
  a0af84:	003f3706 	br	a0ac64 <__udivdi3+0x298>
  a0af88:	147fbb2e 	bgeu	r2,r17,a0ae78 <__udivdi3+0x4ac>
  a0af8c:	297fffc4 	addi	r5,r5,-1
  a0af90:	1405883a 	add	r2,r2,r16
  a0af94:	d9400415 	stw	r5,16(sp)
  a0af98:	003fb706 	br	a0ae78 <__udivdi3+0x4ac>
  a0af9c:	b5bfffc4 	addi	r22,r22,-1
  a0afa0:	1405883a 	add	r2,r2,r16
  a0afa4:	003ec006 	br	a0aaa8 <__udivdi3+0xdc>

00a0afa8 <__umoddi3>:
  a0afa8:	defff104 	addi	sp,sp,-60
  a0afac:	dd800b15 	stw	r22,44(sp)
  a0afb0:	dd000915 	stw	r20,36(sp)
  a0afb4:	dc000515 	stw	r16,20(sp)
  a0afb8:	dfc00e15 	stw	ra,56(sp)
  a0afbc:	df000d15 	stw	fp,52(sp)
  a0afc0:	ddc00c15 	stw	r23,48(sp)
  a0afc4:	dd400a15 	stw	r21,40(sp)
  a0afc8:	dcc00815 	stw	r19,32(sp)
  a0afcc:	dc800715 	stw	r18,28(sp)
  a0afd0:	dc400615 	stw	r17,24(sp)
  a0afd4:	3021883a 	mov	r16,r6
  a0afd8:	202d883a 	mov	r22,r4
  a0afdc:	2829883a 	mov	r20,r5
  a0afe0:	38002b1e 	bne	r7,zero,a0b090 <__umoddi3+0xe8>
  a0afe4:	29805036 	bltu	r5,r6,a0b128 <__umoddi3+0x180>
  a0afe8:	30008a26 	beq	r6,zero,a0b214 <__umoddi3+0x26c>
  a0afec:	00bfffd4 	movui	r2,65535
  a0aff0:	14008236 	bltu	r2,r16,a0b1fc <__umoddi3+0x254>
  a0aff4:	00803fc4 	movi	r2,255
  a0aff8:	14013636 	bltu	r2,r16,a0b4d4 <__umoddi3+0x52c>
  a0affc:	000b883a 	mov	r5,zero
  a0b000:	0005883a 	mov	r2,zero
  a0b004:	8084d83a 	srl	r2,r16,r2
  a0b008:	01002874 	movhi	r4,161
  a0b00c:	2102f904 	addi	r4,r4,3044
  a0b010:	01800804 	movi	r6,32
  a0b014:	1105883a 	add	r2,r2,r4
  a0b018:	10c00003 	ldbu	r3,0(r2)
  a0b01c:	28c7883a 	add	r3,r5,r3
  a0b020:	30efc83a 	sub	r23,r6,r3
  a0b024:	b800941e 	bne	r23,zero,a0b278 <__umoddi3+0x2d0>
  a0b028:	802ad43a 	srli	r21,r16,16
  a0b02c:	a423c83a 	sub	r17,r20,r16
  a0b030:	0039883a 	mov	fp,zero
  a0b034:	853fffcc 	andi	r20,r16,65535
  a0b038:	8809883a 	mov	r4,r17
  a0b03c:	a80b883a 	mov	r5,r21
  a0b040:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0b044:	8809883a 	mov	r4,r17
  a0b048:	a80b883a 	mov	r5,r21
  a0b04c:	a0a3383a 	mul	r17,r20,r2
  a0b050:	0a0bfe40 	call	a0bfe4 <__umodsi3>
  a0b054:	1004943a 	slli	r2,r2,16
  a0b058:	b006d43a 	srli	r3,r22,16
  a0b05c:	10c4b03a 	or	r2,r2,r3
  a0b060:	1440032e 	bgeu	r2,r17,a0b070 <__umoddi3+0xc8>
  a0b064:	1405883a 	add	r2,r2,r16
  a0b068:	14000136 	bltu	r2,r16,a0b070 <__umoddi3+0xc8>
  a0b06c:	14413536 	bltu	r2,r17,a0b544 <__umoddi3+0x59c>
  a0b070:	1463c83a 	sub	r17,r2,r17
  a0b074:	8809883a 	mov	r4,r17
  a0b078:	a80b883a 	mov	r5,r21
  a0b07c:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0b080:	8809883a 	mov	r4,r17
  a0b084:	a0a3383a 	mul	r17,r20,r2
  a0b088:	a80b883a 	mov	r5,r21
  a0b08c:	00004d06 	br	a0b1c4 <__umoddi3+0x21c>
  a0b090:	380d883a 	mov	r6,r7
  a0b094:	29c0102e 	bgeu	r5,r7,a0b0d8 <__umoddi3+0x130>
  a0b098:	2011883a 	mov	r8,r4
  a0b09c:	2813883a 	mov	r9,r5
  a0b0a0:	4005883a 	mov	r2,r8
  a0b0a4:	4807883a 	mov	r3,r9
  a0b0a8:	dfc00e17 	ldw	ra,56(sp)
  a0b0ac:	df000d17 	ldw	fp,52(sp)
  a0b0b0:	ddc00c17 	ldw	r23,48(sp)
  a0b0b4:	dd800b17 	ldw	r22,44(sp)
  a0b0b8:	dd400a17 	ldw	r21,40(sp)
  a0b0bc:	dd000917 	ldw	r20,36(sp)
  a0b0c0:	dcc00817 	ldw	r19,32(sp)
  a0b0c4:	dc800717 	ldw	r18,28(sp)
  a0b0c8:	dc400617 	ldw	r17,24(sp)
  a0b0cc:	dc000517 	ldw	r16,20(sp)
  a0b0d0:	dec00f04 	addi	sp,sp,60
  a0b0d4:	f800283a 	ret
  a0b0d8:	00bfffd4 	movui	r2,65535
  a0b0dc:	11c05a36 	bltu	r2,r7,a0b248 <__umoddi3+0x2a0>
  a0b0e0:	00803fc4 	movi	r2,255
  a0b0e4:	11c0fe36 	bltu	r2,r7,a0b4e0 <__umoddi3+0x538>
  a0b0e8:	000b883a 	mov	r5,zero
  a0b0ec:	0005883a 	mov	r2,zero
  a0b0f0:	3084d83a 	srl	r2,r6,r2
  a0b0f4:	01002874 	movhi	r4,161
  a0b0f8:	2102f904 	addi	r4,r4,3044
  a0b0fc:	01c00804 	movi	r7,32
  a0b100:	1105883a 	add	r2,r2,r4
  a0b104:	10c00003 	ldbu	r3,0(r2)
  a0b108:	28c7883a 	add	r3,r5,r3
  a0b10c:	38ebc83a 	sub	r21,r7,r3
  a0b110:	a800851e 	bne	r21,zero,a0b328 <__umoddi3+0x380>
  a0b114:	35005236 	bltu	r6,r20,a0b260 <__umoddi3+0x2b8>
  a0b118:	b400512e 	bgeu	r22,r16,a0b260 <__umoddi3+0x2b8>
  a0b11c:	b011883a 	mov	r8,r22
  a0b120:	a013883a 	mov	r9,r20
  a0b124:	003fde06 	br	a0b0a0 <__umoddi3+0xf8>
  a0b128:	00bfffd4 	movui	r2,65535
  a0b12c:	11804036 	bltu	r2,r6,a0b230 <__umoddi3+0x288>
  a0b130:	00803fc4 	movi	r2,255
  a0b134:	1180ed36 	bltu	r2,r6,a0b4ec <__umoddi3+0x544>
  a0b138:	000b883a 	mov	r5,zero
  a0b13c:	0005883a 	mov	r2,zero
  a0b140:	8084d83a 	srl	r2,r16,r2
  a0b144:	01002874 	movhi	r4,161
  a0b148:	2102f904 	addi	r4,r4,3044
  a0b14c:	01800804 	movi	r6,32
  a0b150:	1105883a 	add	r2,r2,r4
  a0b154:	10c00003 	ldbu	r3,0(r2)
  a0b158:	28c7883a 	add	r3,r5,r3
  a0b15c:	30c7c83a 	sub	r3,r6,r3
  a0b160:	1800bf1e 	bne	r3,zero,a0b460 <__umoddi3+0x4b8>
  a0b164:	0039883a 	mov	fp,zero
  a0b168:	802ad43a 	srli	r21,r16,16
  a0b16c:	a009883a 	mov	r4,r20
  a0b170:	85ffffcc 	andi	r23,r16,65535
  a0b174:	a80b883a 	mov	r5,r21
  a0b178:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0b17c:	a009883a 	mov	r4,r20
  a0b180:	a80b883a 	mov	r5,r21
  a0b184:	b8a3383a 	mul	r17,r23,r2
  a0b188:	0a0bfe40 	call	a0bfe4 <__umodsi3>
  a0b18c:	1004943a 	slli	r2,r2,16
  a0b190:	b006d43a 	srli	r3,r22,16
  a0b194:	10c4b03a 	or	r2,r2,r3
  a0b198:	1440032e 	bgeu	r2,r17,a0b1a8 <__umoddi3+0x200>
  a0b19c:	1405883a 	add	r2,r2,r16
  a0b1a0:	14000136 	bltu	r2,r16,a0b1a8 <__umoddi3+0x200>
  a0b1a4:	1440e536 	bltu	r2,r17,a0b53c <__umoddi3+0x594>
  a0b1a8:	1463c83a 	sub	r17,r2,r17
  a0b1ac:	8809883a 	mov	r4,r17
  a0b1b0:	a80b883a 	mov	r5,r21
  a0b1b4:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0b1b8:	8809883a 	mov	r4,r17
  a0b1bc:	b8a3383a 	mul	r17,r23,r2
  a0b1c0:	a80b883a 	mov	r5,r21
  a0b1c4:	0a0bfe40 	call	a0bfe4 <__umodsi3>
  a0b1c8:	1004943a 	slli	r2,r2,16
  a0b1cc:	b0ffffcc 	andi	r3,r22,65535
  a0b1d0:	10c4b03a 	or	r2,r2,r3
  a0b1d4:	1440042e 	bgeu	r2,r17,a0b1e8 <__umoddi3+0x240>
  a0b1d8:	1405883a 	add	r2,r2,r16
  a0b1dc:	14000236 	bltu	r2,r16,a0b1e8 <__umoddi3+0x240>
  a0b1e0:	1440012e 	bgeu	r2,r17,a0b1e8 <__umoddi3+0x240>
  a0b1e4:	1405883a 	add	r2,r2,r16
  a0b1e8:	1445c83a 	sub	r2,r2,r17
  a0b1ec:	1724d83a 	srl	r18,r2,fp
  a0b1f0:	0013883a 	mov	r9,zero
  a0b1f4:	9011883a 	mov	r8,r18
  a0b1f8:	003fa906 	br	a0b0a0 <__umoddi3+0xf8>
  a0b1fc:	00804034 	movhi	r2,256
  a0b200:	10bfffc4 	addi	r2,r2,-1
  a0b204:	1400b036 	bltu	r2,r16,a0b4c8 <__umoddi3+0x520>
  a0b208:	01400404 	movi	r5,16
  a0b20c:	2805883a 	mov	r2,r5
  a0b210:	003f7c06 	br	a0b004 <__umoddi3+0x5c>
  a0b214:	01000044 	movi	r4,1
  a0b218:	000b883a 	mov	r5,zero
  a0b21c:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0b220:	1021883a 	mov	r16,r2
  a0b224:	00bfffd4 	movui	r2,65535
  a0b228:	143ff436 	bltu	r2,r16,a0b1fc <__umoddi3+0x254>
  a0b22c:	003f7106 	br	a0aff4 <__umoddi3+0x4c>
  a0b230:	00804034 	movhi	r2,256
  a0b234:	10bfffc4 	addi	r2,r2,-1
  a0b238:	1180af36 	bltu	r2,r6,a0b4f8 <__umoddi3+0x550>
  a0b23c:	01400404 	movi	r5,16
  a0b240:	2805883a 	mov	r2,r5
  a0b244:	003fbe06 	br	a0b140 <__umoddi3+0x198>
  a0b248:	00804034 	movhi	r2,256
  a0b24c:	10bfffc4 	addi	r2,r2,-1
  a0b250:	11c0ac36 	bltu	r2,r7,a0b504 <__umoddi3+0x55c>
  a0b254:	01400404 	movi	r5,16
  a0b258:	2805883a 	mov	r2,r5
  a0b25c:	003fa406 	br	a0b0f0 <__umoddi3+0x148>
  a0b260:	b409c83a 	sub	r4,r22,r16
  a0b264:	b105803a 	cmpltu	r2,r22,r4
  a0b268:	a187c83a 	sub	r3,r20,r6
  a0b26c:	18a9c83a 	sub	r20,r3,r2
  a0b270:	202d883a 	mov	r22,r4
  a0b274:	003fa906 	br	a0b11c <__umoddi3+0x174>
  a0b278:	85e0983a 	sll	r16,r16,r23
  a0b27c:	35c5c83a 	sub	r2,r6,r23
  a0b280:	a0a2d83a 	srl	r17,r20,r2
  a0b284:	802ad43a 	srli	r21,r16,16
  a0b288:	b084d83a 	srl	r2,r22,r2
  a0b28c:	a5c6983a 	sll	r3,r20,r23
  a0b290:	8809883a 	mov	r4,r17
  a0b294:	a80b883a 	mov	r5,r21
  a0b298:	1886b03a 	or	r3,r3,r2
  a0b29c:	d8c00115 	stw	r3,4(sp)
  a0b2a0:	853fffcc 	andi	r20,r16,65535
  a0b2a4:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0b2a8:	8809883a 	mov	r4,r17
  a0b2ac:	a80b883a 	mov	r5,r21
  a0b2b0:	a0a3383a 	mul	r17,r20,r2
  a0b2b4:	0a0bfe40 	call	a0bfe4 <__umodsi3>
  a0b2b8:	d9000117 	ldw	r4,4(sp)
  a0b2bc:	1004943a 	slli	r2,r2,16
  a0b2c0:	b839883a 	mov	fp,r23
  a0b2c4:	2006d43a 	srli	r3,r4,16
  a0b2c8:	10c4b03a 	or	r2,r2,r3
  a0b2cc:	1440022e 	bgeu	r2,r17,a0b2d8 <__umoddi3+0x330>
  a0b2d0:	1405883a 	add	r2,r2,r16
  a0b2d4:	1400962e 	bgeu	r2,r16,a0b530 <__umoddi3+0x588>
  a0b2d8:	1463c83a 	sub	r17,r2,r17
  a0b2dc:	8809883a 	mov	r4,r17
  a0b2e0:	a80b883a 	mov	r5,r21
  a0b2e4:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0b2e8:	8809883a 	mov	r4,r17
  a0b2ec:	a80b883a 	mov	r5,r21
  a0b2f0:	a0a3383a 	mul	r17,r20,r2
  a0b2f4:	0a0bfe40 	call	a0bfe4 <__umodsi3>
  a0b2f8:	d9400117 	ldw	r5,4(sp)
  a0b2fc:	1004943a 	slli	r2,r2,16
  a0b300:	28ffffcc 	andi	r3,r5,65535
  a0b304:	10c4b03a 	or	r2,r2,r3
  a0b308:	1440042e 	bgeu	r2,r17,a0b31c <__umoddi3+0x374>
  a0b30c:	1405883a 	add	r2,r2,r16
  a0b310:	14000236 	bltu	r2,r16,a0b31c <__umoddi3+0x374>
  a0b314:	1440012e 	bgeu	r2,r17,a0b31c <__umoddi3+0x374>
  a0b318:	1405883a 	add	r2,r2,r16
  a0b31c:	b5ec983a 	sll	r22,r22,r23
  a0b320:	1463c83a 	sub	r17,r2,r17
  a0b324:	003f4406 	br	a0b038 <__umoddi3+0x90>
  a0b328:	3d4fc83a 	sub	r7,r7,r21
  a0b32c:	3546983a 	sll	r3,r6,r21
  a0b330:	81c4d83a 	srl	r2,r16,r7
  a0b334:	a1e2d83a 	srl	r17,r20,r7
  a0b338:	a54c983a 	sll	r6,r20,r21
  a0b33c:	18aeb03a 	or	r23,r3,r2
  a0b340:	b828d43a 	srli	r20,r23,16
  a0b344:	b1c4d83a 	srl	r2,r22,r7
  a0b348:	8809883a 	mov	r4,r17
  a0b34c:	a00b883a 	mov	r5,r20
  a0b350:	308cb03a 	or	r6,r6,r2
  a0b354:	d9c00315 	stw	r7,12(sp)
  a0b358:	d9800215 	stw	r6,8(sp)
  a0b35c:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0b360:	8809883a 	mov	r4,r17
  a0b364:	a00b883a 	mov	r5,r20
  a0b368:	1039883a 	mov	fp,r2
  a0b36c:	0a0bfe40 	call	a0bfe4 <__umodsi3>
  a0b370:	b8ffffcc 	andi	r3,r23,65535
  a0b374:	d8c00415 	stw	r3,16(sp)
  a0b378:	d9000217 	ldw	r4,8(sp)
  a0b37c:	d9400417 	ldw	r5,16(sp)
  a0b380:	1004943a 	slli	r2,r2,16
  a0b384:	2006d43a 	srli	r3,r4,16
  a0b388:	8560983a 	sll	r16,r16,r21
  a0b38c:	2f23383a 	mul	r17,r5,fp
  a0b390:	10c4b03a 	or	r2,r2,r3
  a0b394:	dc000015 	stw	r16,0(sp)
  a0b398:	b56c983a 	sll	r22,r22,r21
  a0b39c:	1440032e 	bgeu	r2,r17,a0b3ac <__umoddi3+0x404>
  a0b3a0:	15c5883a 	add	r2,r2,r23
  a0b3a4:	e73fffc4 	addi	fp,fp,-1
  a0b3a8:	15c05d2e 	bgeu	r2,r23,a0b520 <__umoddi3+0x578>
  a0b3ac:	1463c83a 	sub	r17,r2,r17
  a0b3b0:	8809883a 	mov	r4,r17
  a0b3b4:	a00b883a 	mov	r5,r20
  a0b3b8:	0a0bfdc0 	call	a0bfdc <__udivsi3>
  a0b3bc:	8809883a 	mov	r4,r17
  a0b3c0:	a00b883a 	mov	r5,r20
  a0b3c4:	1021883a 	mov	r16,r2
  a0b3c8:	0a0bfe40 	call	a0bfe4 <__umodsi3>
  a0b3cc:	d8c00417 	ldw	r3,16(sp)
  a0b3d0:	d9000217 	ldw	r4,8(sp)
  a0b3d4:	1004943a 	slli	r2,r2,16
  a0b3d8:	1c23383a 	mul	r17,r3,r16
  a0b3dc:	20ffffcc 	andi	r3,r4,65535
  a0b3e0:	10ceb03a 	or	r7,r2,r3
  a0b3e4:	3c40032e 	bgeu	r7,r17,a0b3f4 <__umoddi3+0x44c>
  a0b3e8:	3dcf883a 	add	r7,r7,r23
  a0b3ec:	843fffc4 	addi	r16,r16,-1
  a0b3f0:	3dc0472e 	bgeu	r7,r23,a0b510 <__umoddi3+0x568>
  a0b3f4:	e004943a 	slli	r2,fp,16
  a0b3f8:	d9400017 	ldw	r5,0(sp)
  a0b3fc:	3c4fc83a 	sub	r7,r7,r17
  a0b400:	8084b03a 	or	r2,r16,r2
  a0b404:	28ffffcc 	andi	r3,r5,65535
  a0b408:	280cd43a 	srli	r6,r5,16
  a0b40c:	100ad43a 	srli	r5,r2,16
  a0b410:	10bfffcc 	andi	r2,r2,65535
  a0b414:	10d1383a 	mul	r8,r2,r3
  a0b418:	28c7383a 	mul	r3,r5,r3
  a0b41c:	1185383a 	mul	r2,r2,r6
  a0b420:	4008d43a 	srli	r4,r8,16
  a0b424:	298b383a 	mul	r5,r5,r6
  a0b428:	10c5883a 	add	r2,r2,r3
  a0b42c:	2089883a 	add	r4,r4,r2
  a0b430:	20c0022e 	bgeu	r4,r3,a0b43c <__umoddi3+0x494>
  a0b434:	00800074 	movhi	r2,1
  a0b438:	288b883a 	add	r5,r5,r2
  a0b43c:	2004d43a 	srli	r2,r4,16
  a0b440:	2008943a 	slli	r4,r4,16
  a0b444:	40ffffcc 	andi	r3,r8,65535
  a0b448:	288b883a 	add	r5,r5,r2
  a0b44c:	20c9883a 	add	r4,r4,r3
  a0b450:	39400b36 	bltu	r7,r5,a0b480 <__umoddi3+0x4d8>
  a0b454:	39403d26 	beq	r7,r5,a0b54c <__umoddi3+0x5a4>
  a0b458:	394bc83a 	sub	r5,r7,r5
  a0b45c:	00000f06 	br	a0b49c <__umoddi3+0x4f4>
  a0b460:	30c5c83a 	sub	r2,r6,r3
  a0b464:	1839883a 	mov	fp,r3
  a0b468:	b084d83a 	srl	r2,r22,r2
  a0b46c:	a0c6983a 	sll	r3,r20,r3
  a0b470:	8720983a 	sll	r16,r16,fp
  a0b474:	b72c983a 	sll	r22,r22,fp
  a0b478:	18a8b03a 	or	r20,r3,r2
  a0b47c:	003f3a06 	br	a0b168 <__umoddi3+0x1c0>
  a0b480:	d8c00017 	ldw	r3,0(sp)
  a0b484:	20c5c83a 	sub	r2,r4,r3
  a0b488:	2089803a 	cmpltu	r4,r4,r2
  a0b48c:	2dc7c83a 	sub	r3,r5,r23
  a0b490:	1907c83a 	sub	r3,r3,r4
  a0b494:	38cbc83a 	sub	r5,r7,r3
  a0b498:	1009883a 	mov	r4,r2
  a0b49c:	b105c83a 	sub	r2,r22,r4
  a0b4a0:	b087803a 	cmpltu	r3,r22,r2
  a0b4a4:	28c7c83a 	sub	r3,r5,r3
  a0b4a8:	d9400317 	ldw	r5,12(sp)
  a0b4ac:	1544d83a 	srl	r2,r2,r21
  a0b4b0:	1948983a 	sll	r4,r3,r5
  a0b4b4:	1d46d83a 	srl	r3,r3,r21
  a0b4b8:	20a4b03a 	or	r18,r4,r2
  a0b4bc:	9011883a 	mov	r8,r18
  a0b4c0:	1813883a 	mov	r9,r3
  a0b4c4:	003ef606 	br	a0b0a0 <__umoddi3+0xf8>
  a0b4c8:	01400604 	movi	r5,24
  a0b4cc:	2805883a 	mov	r2,r5
  a0b4d0:	003ecc06 	br	a0b004 <__umoddi3+0x5c>
  a0b4d4:	01400204 	movi	r5,8
  a0b4d8:	2805883a 	mov	r2,r5
  a0b4dc:	003ec906 	br	a0b004 <__umoddi3+0x5c>
  a0b4e0:	01400204 	movi	r5,8
  a0b4e4:	2805883a 	mov	r2,r5
  a0b4e8:	003f0106 	br	a0b0f0 <__umoddi3+0x148>
  a0b4ec:	01400204 	movi	r5,8
  a0b4f0:	2805883a 	mov	r2,r5
  a0b4f4:	003f1206 	br	a0b140 <__umoddi3+0x198>
  a0b4f8:	01400604 	movi	r5,24
  a0b4fc:	2805883a 	mov	r2,r5
  a0b500:	003f0f06 	br	a0b140 <__umoddi3+0x198>
  a0b504:	01400604 	movi	r5,24
  a0b508:	2805883a 	mov	r2,r5
  a0b50c:	003ef806 	br	a0b0f0 <__umoddi3+0x148>
  a0b510:	3c7fb82e 	bgeu	r7,r17,a0b3f4 <__umoddi3+0x44c>
  a0b514:	843fffc4 	addi	r16,r16,-1
  a0b518:	3dcf883a 	add	r7,r7,r23
  a0b51c:	003fb506 	br	a0b3f4 <__umoddi3+0x44c>
  a0b520:	147fa22e 	bgeu	r2,r17,a0b3ac <__umoddi3+0x404>
  a0b524:	e73fffc4 	addi	fp,fp,-1
  a0b528:	15c5883a 	add	r2,r2,r23
  a0b52c:	003f9f06 	br	a0b3ac <__umoddi3+0x404>
  a0b530:	147f692e 	bgeu	r2,r17,a0b2d8 <__umoddi3+0x330>
  a0b534:	1405883a 	add	r2,r2,r16
  a0b538:	003f6706 	br	a0b2d8 <__umoddi3+0x330>
  a0b53c:	1405883a 	add	r2,r2,r16
  a0b540:	003f1906 	br	a0b1a8 <__umoddi3+0x200>
  a0b544:	1405883a 	add	r2,r2,r16
  a0b548:	003ec906 	br	a0b070 <__umoddi3+0xc8>
  a0b54c:	b13fcc36 	bltu	r22,r4,a0b480 <__umoddi3+0x4d8>
  a0b550:	000b883a 	mov	r5,zero
  a0b554:	003fd106 	br	a0b49c <__umoddi3+0x4f4>

00a0b558 <__muldf3>:
  a0b558:	deffe004 	addi	sp,sp,-128
  a0b55c:	dc401815 	stw	r17,96(sp)
  a0b560:	dc400404 	addi	r17,sp,16
  a0b564:	2011883a 	mov	r8,r4
  a0b568:	2813883a 	mov	r9,r5
  a0b56c:	dc001715 	stw	r16,92(sp)
  a0b570:	d809883a 	mov	r4,sp
  a0b574:	880b883a 	mov	r5,r17
  a0b578:	dc000904 	addi	r16,sp,36
  a0b57c:	dfc01f15 	stw	ra,124(sp)
  a0b580:	da400115 	stw	r9,4(sp)
  a0b584:	d9c00315 	stw	r7,12(sp)
  a0b588:	da000015 	stw	r8,0(sp)
  a0b58c:	d9800215 	stw	r6,8(sp)
  a0b590:	ddc01e15 	stw	r23,120(sp)
  a0b594:	dd801d15 	stw	r22,116(sp)
  a0b598:	dd401c15 	stw	r21,112(sp)
  a0b59c:	dd001b15 	stw	r20,108(sp)
  a0b5a0:	dcc01a15 	stw	r19,104(sp)
  a0b5a4:	dc801915 	stw	r18,100(sp)
  a0b5a8:	0a033d40 	call	a033d4 <__unpack_d>
  a0b5ac:	d9000204 	addi	r4,sp,8
  a0b5b0:	800b883a 	mov	r5,r16
  a0b5b4:	0a033d40 	call	a033d4 <__unpack_d>
  a0b5b8:	d9000417 	ldw	r4,16(sp)
  a0b5bc:	00800044 	movi	r2,1
  a0b5c0:	1100102e 	bgeu	r2,r4,a0b604 <__muldf3+0xac>
  a0b5c4:	d8c00917 	ldw	r3,36(sp)
  a0b5c8:	10c0062e 	bgeu	r2,r3,a0b5e4 <__muldf3+0x8c>
  a0b5cc:	00800104 	movi	r2,4
  a0b5d0:	20800a26 	beq	r4,r2,a0b5fc <__muldf3+0xa4>
  a0b5d4:	1880cc26 	beq	r3,r2,a0b908 <__muldf3+0x3b0>
  a0b5d8:	00800084 	movi	r2,2
  a0b5dc:	20800926 	beq	r4,r2,a0b604 <__muldf3+0xac>
  a0b5e0:	1880191e 	bne	r3,r2,a0b648 <__muldf3+0xf0>
  a0b5e4:	d8c00a17 	ldw	r3,40(sp)
  a0b5e8:	d8800517 	ldw	r2,20(sp)
  a0b5ec:	8009883a 	mov	r4,r16
  a0b5f0:	10c4c03a 	cmpne	r2,r2,r3
  a0b5f4:	d8800a15 	stw	r2,40(sp)
  a0b5f8:	00000706 	br	a0b618 <__muldf3+0xc0>
  a0b5fc:	00800084 	movi	r2,2
  a0b600:	1880c326 	beq	r3,r2,a0b910 <__muldf3+0x3b8>
  a0b604:	d8800517 	ldw	r2,20(sp)
  a0b608:	d8c00a17 	ldw	r3,40(sp)
  a0b60c:	8809883a 	mov	r4,r17
  a0b610:	10c4c03a 	cmpne	r2,r2,r3
  a0b614:	d8800515 	stw	r2,20(sp)
  a0b618:	0a030c00 	call	a030c0 <__pack_d>
  a0b61c:	dfc01f17 	ldw	ra,124(sp)
  a0b620:	ddc01e17 	ldw	r23,120(sp)
  a0b624:	dd801d17 	ldw	r22,116(sp)
  a0b628:	dd401c17 	ldw	r21,112(sp)
  a0b62c:	dd001b17 	ldw	r20,108(sp)
  a0b630:	dcc01a17 	ldw	r19,104(sp)
  a0b634:	dc801917 	ldw	r18,100(sp)
  a0b638:	dc401817 	ldw	r17,96(sp)
  a0b63c:	dc001717 	ldw	r16,92(sp)
  a0b640:	dec02004 	addi	sp,sp,128
  a0b644:	f800283a 	ret
  a0b648:	dd800717 	ldw	r22,28(sp)
  a0b64c:	dc800c17 	ldw	r18,48(sp)
  a0b650:	002b883a 	mov	r21,zero
  a0b654:	0023883a 	mov	r17,zero
  a0b658:	a80b883a 	mov	r5,r21
  a0b65c:	b00d883a 	mov	r6,r22
  a0b660:	880f883a 	mov	r7,r17
  a0b664:	ddc00817 	ldw	r23,32(sp)
  a0b668:	dcc00d17 	ldw	r19,52(sp)
  a0b66c:	9009883a 	mov	r4,r18
  a0b670:	0a02cac0 	call	a02cac <__muldi3>
  a0b674:	001b883a 	mov	r13,zero
  a0b678:	680f883a 	mov	r7,r13
  a0b67c:	b009883a 	mov	r4,r22
  a0b680:	000b883a 	mov	r5,zero
  a0b684:	980d883a 	mov	r6,r19
  a0b688:	b82d883a 	mov	r22,r23
  a0b68c:	002f883a 	mov	r23,zero
  a0b690:	db401615 	stw	r13,88(sp)
  a0b694:	d8801315 	stw	r2,76(sp)
  a0b698:	d8c01415 	stw	r3,80(sp)
  a0b69c:	dcc01515 	stw	r19,84(sp)
  a0b6a0:	0a02cac0 	call	a02cac <__muldi3>
  a0b6a4:	b00d883a 	mov	r6,r22
  a0b6a8:	000b883a 	mov	r5,zero
  a0b6ac:	9009883a 	mov	r4,r18
  a0b6b0:	b80f883a 	mov	r7,r23
  a0b6b4:	1021883a 	mov	r16,r2
  a0b6b8:	1823883a 	mov	r17,r3
  a0b6bc:	0a02cac0 	call	a02cac <__muldi3>
  a0b6c0:	8085883a 	add	r2,r16,r2
  a0b6c4:	140d803a 	cmpltu	r6,r2,r16
  a0b6c8:	88c7883a 	add	r3,r17,r3
  a0b6cc:	30cd883a 	add	r6,r6,r3
  a0b6d0:	1029883a 	mov	r20,r2
  a0b6d4:	302b883a 	mov	r21,r6
  a0b6d8:	da801317 	ldw	r10,76(sp)
  a0b6dc:	dac01417 	ldw	r11,80(sp)
  a0b6e0:	db001517 	ldw	r12,84(sp)
  a0b6e4:	db401617 	ldw	r13,88(sp)
  a0b6e8:	3440612e 	bgeu	r6,r17,a0b870 <__muldf3+0x318>
  a0b6ec:	0009883a 	mov	r4,zero
  a0b6f0:	5105883a 	add	r2,r10,r4
  a0b6f4:	128d803a 	cmpltu	r6,r2,r10
  a0b6f8:	5d07883a 	add	r3,r11,r20
  a0b6fc:	30cd883a 	add	r6,r6,r3
  a0b700:	0021883a 	mov	r16,zero
  a0b704:	04400044 	movi	r17,1
  a0b708:	1025883a 	mov	r18,r2
  a0b70c:	3027883a 	mov	r19,r6
  a0b710:	32c06236 	bltu	r6,r11,a0b89c <__muldf3+0x344>
  a0b714:	59807a26 	beq	r11,r6,a0b900 <__muldf3+0x3a8>
  a0b718:	680b883a 	mov	r5,r13
  a0b71c:	b80f883a 	mov	r7,r23
  a0b720:	6009883a 	mov	r4,r12
  a0b724:	b00d883a 	mov	r6,r22
  a0b728:	0a02cac0 	call	a02cac <__muldi3>
  a0b72c:	1009883a 	mov	r4,r2
  a0b730:	000f883a 	mov	r7,zero
  a0b734:	1545883a 	add	r2,r2,r21
  a0b738:	1111803a 	cmpltu	r8,r2,r4
  a0b73c:	19c7883a 	add	r3,r3,r7
  a0b740:	40c7883a 	add	r3,r8,r3
  a0b744:	88cb883a 	add	r5,r17,r3
  a0b748:	d8c00617 	ldw	r3,24(sp)
  a0b74c:	8089883a 	add	r4,r16,r2
  a0b750:	d8800b17 	ldw	r2,44(sp)
  a0b754:	18c00104 	addi	r3,r3,4
  a0b758:	240d803a 	cmpltu	r6,r4,r16
  a0b75c:	10c7883a 	add	r3,r2,r3
  a0b760:	2013883a 	mov	r9,r4
  a0b764:	d8800a17 	ldw	r2,40(sp)
  a0b768:	d9000517 	ldw	r4,20(sp)
  a0b76c:	314d883a 	add	r6,r6,r5
  a0b770:	3015883a 	mov	r10,r6
  a0b774:	2088c03a 	cmpne	r4,r4,r2
  a0b778:	00880034 	movhi	r2,8192
  a0b77c:	10bfffc4 	addi	r2,r2,-1
  a0b780:	d9000f15 	stw	r4,60(sp)
  a0b784:	d8c01015 	stw	r3,64(sp)
  a0b788:	1180162e 	bgeu	r2,r6,a0b7e4 <__muldf3+0x28c>
  a0b78c:	1811883a 	mov	r8,r3
  a0b790:	101f883a 	mov	r15,r2
  a0b794:	980497fa 	slli	r2,r19,31
  a0b798:	9016d07a 	srli	r11,r18,1
  a0b79c:	500697fa 	slli	r3,r10,31
  a0b7a0:	480cd07a 	srli	r6,r9,1
  a0b7a4:	500ed07a 	srli	r7,r10,1
  a0b7a8:	12d6b03a 	or	r11,r2,r11
  a0b7ac:	00800044 	movi	r2,1
  a0b7b0:	198cb03a 	or	r6,r3,r6
  a0b7b4:	4888703a 	and	r4,r9,r2
  a0b7b8:	9818d07a 	srli	r12,r19,1
  a0b7bc:	001b883a 	mov	r13,zero
  a0b7c0:	03a00034 	movhi	r14,32768
  a0b7c4:	3013883a 	mov	r9,r6
  a0b7c8:	3815883a 	mov	r10,r7
  a0b7cc:	4091883a 	add	r8,r8,r2
  a0b7d0:	20000226 	beq	r4,zero,a0b7dc <__muldf3+0x284>
  a0b7d4:	5b64b03a 	or	r18,r11,r13
  a0b7d8:	63a6b03a 	or	r19,r12,r14
  a0b7dc:	7abfed36 	bltu	r15,r10,a0b794 <__muldf3+0x23c>
  a0b7e0:	da001015 	stw	r8,64(sp)
  a0b7e4:	00840034 	movhi	r2,4096
  a0b7e8:	10bfffc4 	addi	r2,r2,-1
  a0b7ec:	12801436 	bltu	r2,r10,a0b840 <__muldf3+0x2e8>
  a0b7f0:	da001017 	ldw	r8,64(sp)
  a0b7f4:	101f883a 	mov	r15,r2
  a0b7f8:	4a45883a 	add	r2,r9,r9
  a0b7fc:	124d803a 	cmpltu	r6,r2,r9
  a0b800:	5287883a 	add	r3,r10,r10
  a0b804:	9497883a 	add	r11,r18,r18
  a0b808:	5c8f803a 	cmpltu	r7,r11,r18
  a0b80c:	9cd9883a 	add	r12,r19,r19
  a0b810:	01000044 	movi	r4,1
  a0b814:	30cd883a 	add	r6,r6,r3
  a0b818:	3b0f883a 	add	r7,r7,r12
  a0b81c:	423fffc4 	addi	r8,r8,-1
  a0b820:	1013883a 	mov	r9,r2
  a0b824:	3015883a 	mov	r10,r6
  a0b828:	111ab03a 	or	r13,r2,r4
  a0b82c:	98003016 	blt	r19,zero,a0b8f0 <__muldf3+0x398>
  a0b830:	5825883a 	mov	r18,r11
  a0b834:	3827883a 	mov	r19,r7
  a0b838:	7abfef2e 	bgeu	r15,r10,a0b7f8 <__muldf3+0x2a0>
  a0b83c:	da001015 	stw	r8,64(sp)
  a0b840:	00803fc4 	movi	r2,255
  a0b844:	488e703a 	and	r7,r9,r2
  a0b848:	00802004 	movi	r2,128
  a0b84c:	0007883a 	mov	r3,zero
  a0b850:	0011883a 	mov	r8,zero
  a0b854:	38801826 	beq	r7,r2,a0b8b8 <__muldf3+0x360>
  a0b858:	008000c4 	movi	r2,3
  a0b85c:	d9000e04 	addi	r4,sp,56
  a0b860:	da801215 	stw	r10,72(sp)
  a0b864:	d8800e15 	stw	r2,56(sp)
  a0b868:	da401115 	stw	r9,68(sp)
  a0b86c:	003f6a06 	br	a0b618 <__muldf3+0xc0>
  a0b870:	89802126 	beq	r17,r6,a0b8f8 <__muldf3+0x3a0>
  a0b874:	0009883a 	mov	r4,zero
  a0b878:	5105883a 	add	r2,r10,r4
  a0b87c:	128d803a 	cmpltu	r6,r2,r10
  a0b880:	5d07883a 	add	r3,r11,r20
  a0b884:	30cd883a 	add	r6,r6,r3
  a0b888:	0021883a 	mov	r16,zero
  a0b88c:	0023883a 	mov	r17,zero
  a0b890:	1025883a 	mov	r18,r2
  a0b894:	3027883a 	mov	r19,r6
  a0b898:	32ff9e2e 	bgeu	r6,r11,a0b714 <__muldf3+0x1bc>
  a0b89c:	00800044 	movi	r2,1
  a0b8a0:	8089883a 	add	r4,r16,r2
  a0b8a4:	240d803a 	cmpltu	r6,r4,r16
  a0b8a8:	344d883a 	add	r6,r6,r17
  a0b8ac:	2021883a 	mov	r16,r4
  a0b8b0:	3023883a 	mov	r17,r6
  a0b8b4:	003f9806 	br	a0b718 <__muldf3+0x1c0>
  a0b8b8:	403fe71e 	bne	r8,zero,a0b858 <__muldf3+0x300>
  a0b8bc:	01004004 	movi	r4,256
  a0b8c0:	4904703a 	and	r2,r9,r4
  a0b8c4:	10c4b03a 	or	r2,r2,r3
  a0b8c8:	103fe31e 	bne	r2,zero,a0b858 <__muldf3+0x300>
  a0b8cc:	94c4b03a 	or	r2,r18,r19
  a0b8d0:	103fe126 	beq	r2,zero,a0b858 <__muldf3+0x300>
  a0b8d4:	49c5883a 	add	r2,r9,r7
  a0b8d8:	1251803a 	cmpltu	r8,r2,r9
  a0b8dc:	4291883a 	add	r8,r8,r10
  a0b8e0:	013fc004 	movi	r4,-256
  a0b8e4:	1112703a 	and	r9,r2,r4
  a0b8e8:	4015883a 	mov	r10,r8
  a0b8ec:	003fda06 	br	a0b858 <__muldf3+0x300>
  a0b8f0:	6813883a 	mov	r9,r13
  a0b8f4:	003fce06 	br	a0b830 <__muldf3+0x2d8>
  a0b8f8:	143f7c36 	bltu	r2,r16,a0b6ec <__muldf3+0x194>
  a0b8fc:	003fdd06 	br	a0b874 <__muldf3+0x31c>
  a0b900:	12bf852e 	bgeu	r2,r10,a0b718 <__muldf3+0x1c0>
  a0b904:	003fe506 	br	a0b89c <__muldf3+0x344>
  a0b908:	00800084 	movi	r2,2
  a0b90c:	20bf351e 	bne	r4,r2,a0b5e4 <__muldf3+0x8c>
  a0b910:	01002874 	movhi	r4,161
  a0b914:	2102f404 	addi	r4,r4,3024
  a0b918:	003f3f06 	br	a0b618 <__muldf3+0xc0>

00a0b91c <__eqdf2>:
  a0b91c:	deffef04 	addi	sp,sp,-68
  a0b920:	dc400f15 	stw	r17,60(sp)
  a0b924:	dc400404 	addi	r17,sp,16
  a0b928:	2005883a 	mov	r2,r4
  a0b92c:	2807883a 	mov	r3,r5
  a0b930:	dc000e15 	stw	r16,56(sp)
  a0b934:	d809883a 	mov	r4,sp
  a0b938:	880b883a 	mov	r5,r17
  a0b93c:	dc000904 	addi	r16,sp,36
  a0b940:	d8c00115 	stw	r3,4(sp)
  a0b944:	d8800015 	stw	r2,0(sp)
  a0b948:	d9800215 	stw	r6,8(sp)
  a0b94c:	dfc01015 	stw	ra,64(sp)
  a0b950:	d9c00315 	stw	r7,12(sp)
  a0b954:	0a033d40 	call	a033d4 <__unpack_d>
  a0b958:	d9000204 	addi	r4,sp,8
  a0b95c:	800b883a 	mov	r5,r16
  a0b960:	0a033d40 	call	a033d4 <__unpack_d>
  a0b964:	d8800417 	ldw	r2,16(sp)
  a0b968:	00c00044 	movi	r3,1
  a0b96c:	180d883a 	mov	r6,r3
  a0b970:	1880062e 	bgeu	r3,r2,a0b98c <__eqdf2+0x70>
  a0b974:	d8800917 	ldw	r2,36(sp)
  a0b978:	8809883a 	mov	r4,r17
  a0b97c:	800b883a 	mov	r5,r16
  a0b980:	1880022e 	bgeu	r3,r2,a0b98c <__eqdf2+0x70>
  a0b984:	0a0350c0 	call	a0350c <__fpcmp_parts_d>
  a0b988:	100d883a 	mov	r6,r2
  a0b98c:	3005883a 	mov	r2,r6
  a0b990:	dfc01017 	ldw	ra,64(sp)
  a0b994:	dc400f17 	ldw	r17,60(sp)
  a0b998:	dc000e17 	ldw	r16,56(sp)
  a0b99c:	dec01104 	addi	sp,sp,68
  a0b9a0:	f800283a 	ret

00a0b9a4 <__gtdf2>:
  a0b9a4:	deffef04 	addi	sp,sp,-68
  a0b9a8:	dc400f15 	stw	r17,60(sp)
  a0b9ac:	dc400404 	addi	r17,sp,16
  a0b9b0:	2005883a 	mov	r2,r4
  a0b9b4:	2807883a 	mov	r3,r5
  a0b9b8:	dc000e15 	stw	r16,56(sp)
  a0b9bc:	d809883a 	mov	r4,sp
  a0b9c0:	880b883a 	mov	r5,r17
  a0b9c4:	dc000904 	addi	r16,sp,36
  a0b9c8:	d8c00115 	stw	r3,4(sp)
  a0b9cc:	d8800015 	stw	r2,0(sp)
  a0b9d0:	d9800215 	stw	r6,8(sp)
  a0b9d4:	dfc01015 	stw	ra,64(sp)
  a0b9d8:	d9c00315 	stw	r7,12(sp)
  a0b9dc:	0a033d40 	call	a033d4 <__unpack_d>
  a0b9e0:	d9000204 	addi	r4,sp,8
  a0b9e4:	800b883a 	mov	r5,r16
  a0b9e8:	0a033d40 	call	a033d4 <__unpack_d>
  a0b9ec:	d8800417 	ldw	r2,16(sp)
  a0b9f0:	00c00044 	movi	r3,1
  a0b9f4:	01bfffc4 	movi	r6,-1
  a0b9f8:	1880062e 	bgeu	r3,r2,a0ba14 <__gtdf2+0x70>
  a0b9fc:	d8800917 	ldw	r2,36(sp)
  a0ba00:	8809883a 	mov	r4,r17
  a0ba04:	800b883a 	mov	r5,r16
  a0ba08:	1880022e 	bgeu	r3,r2,a0ba14 <__gtdf2+0x70>
  a0ba0c:	0a0350c0 	call	a0350c <__fpcmp_parts_d>
  a0ba10:	100d883a 	mov	r6,r2
  a0ba14:	3005883a 	mov	r2,r6
  a0ba18:	dfc01017 	ldw	ra,64(sp)
  a0ba1c:	dc400f17 	ldw	r17,60(sp)
  a0ba20:	dc000e17 	ldw	r16,56(sp)
  a0ba24:	dec01104 	addi	sp,sp,68
  a0ba28:	f800283a 	ret

00a0ba2c <__gedf2>:
  a0ba2c:	deffef04 	addi	sp,sp,-68
  a0ba30:	dc400f15 	stw	r17,60(sp)
  a0ba34:	dc400404 	addi	r17,sp,16
  a0ba38:	2005883a 	mov	r2,r4
  a0ba3c:	2807883a 	mov	r3,r5
  a0ba40:	dc000e15 	stw	r16,56(sp)
  a0ba44:	d809883a 	mov	r4,sp
  a0ba48:	880b883a 	mov	r5,r17
  a0ba4c:	dc000904 	addi	r16,sp,36
  a0ba50:	d8c00115 	stw	r3,4(sp)
  a0ba54:	d8800015 	stw	r2,0(sp)
  a0ba58:	d9800215 	stw	r6,8(sp)
  a0ba5c:	dfc01015 	stw	ra,64(sp)
  a0ba60:	d9c00315 	stw	r7,12(sp)
  a0ba64:	0a033d40 	call	a033d4 <__unpack_d>
  a0ba68:	d9000204 	addi	r4,sp,8
  a0ba6c:	800b883a 	mov	r5,r16
  a0ba70:	0a033d40 	call	a033d4 <__unpack_d>
  a0ba74:	d8800417 	ldw	r2,16(sp)
  a0ba78:	00c00044 	movi	r3,1
  a0ba7c:	01bfffc4 	movi	r6,-1
  a0ba80:	1880062e 	bgeu	r3,r2,a0ba9c <__gedf2+0x70>
  a0ba84:	d8800917 	ldw	r2,36(sp)
  a0ba88:	8809883a 	mov	r4,r17
  a0ba8c:	800b883a 	mov	r5,r16
  a0ba90:	1880022e 	bgeu	r3,r2,a0ba9c <__gedf2+0x70>
  a0ba94:	0a0350c0 	call	a0350c <__fpcmp_parts_d>
  a0ba98:	100d883a 	mov	r6,r2
  a0ba9c:	3005883a 	mov	r2,r6
  a0baa0:	dfc01017 	ldw	ra,64(sp)
  a0baa4:	dc400f17 	ldw	r17,60(sp)
  a0baa8:	dc000e17 	ldw	r16,56(sp)
  a0baac:	dec01104 	addi	sp,sp,68
  a0bab0:	f800283a 	ret

00a0bab4 <__ltdf2>:
  a0bab4:	deffef04 	addi	sp,sp,-68
  a0bab8:	dc400f15 	stw	r17,60(sp)
  a0babc:	dc400404 	addi	r17,sp,16
  a0bac0:	2005883a 	mov	r2,r4
  a0bac4:	2807883a 	mov	r3,r5
  a0bac8:	dc000e15 	stw	r16,56(sp)
  a0bacc:	d809883a 	mov	r4,sp
  a0bad0:	880b883a 	mov	r5,r17
  a0bad4:	dc000904 	addi	r16,sp,36
  a0bad8:	d8c00115 	stw	r3,4(sp)
  a0badc:	d8800015 	stw	r2,0(sp)
  a0bae0:	d9800215 	stw	r6,8(sp)
  a0bae4:	dfc01015 	stw	ra,64(sp)
  a0bae8:	d9c00315 	stw	r7,12(sp)
  a0baec:	0a033d40 	call	a033d4 <__unpack_d>
  a0baf0:	d9000204 	addi	r4,sp,8
  a0baf4:	800b883a 	mov	r5,r16
  a0baf8:	0a033d40 	call	a033d4 <__unpack_d>
  a0bafc:	d8800417 	ldw	r2,16(sp)
  a0bb00:	00c00044 	movi	r3,1
  a0bb04:	180d883a 	mov	r6,r3
  a0bb08:	1880062e 	bgeu	r3,r2,a0bb24 <__ltdf2+0x70>
  a0bb0c:	d8800917 	ldw	r2,36(sp)
  a0bb10:	8809883a 	mov	r4,r17
  a0bb14:	800b883a 	mov	r5,r16
  a0bb18:	1880022e 	bgeu	r3,r2,a0bb24 <__ltdf2+0x70>
  a0bb1c:	0a0350c0 	call	a0350c <__fpcmp_parts_d>
  a0bb20:	100d883a 	mov	r6,r2
  a0bb24:	3005883a 	mov	r2,r6
  a0bb28:	dfc01017 	ldw	ra,64(sp)
  a0bb2c:	dc400f17 	ldw	r17,60(sp)
  a0bb30:	dc000e17 	ldw	r16,56(sp)
  a0bb34:	dec01104 	addi	sp,sp,68
  a0bb38:	f800283a 	ret

00a0bb3c <__floatsidf>:
  a0bb3c:	2006d7fa 	srli	r3,r4,31
  a0bb40:	defff604 	addi	sp,sp,-40
  a0bb44:	008000c4 	movi	r2,3
  a0bb48:	dfc00915 	stw	ra,36(sp)
  a0bb4c:	dcc00815 	stw	r19,32(sp)
  a0bb50:	dc800715 	stw	r18,28(sp)
  a0bb54:	dc400615 	stw	r17,24(sp)
  a0bb58:	dc000515 	stw	r16,20(sp)
  a0bb5c:	d8800015 	stw	r2,0(sp)
  a0bb60:	d8c00115 	stw	r3,4(sp)
  a0bb64:	20000f1e 	bne	r4,zero,a0bba4 <__floatsidf+0x68>
  a0bb68:	00800084 	movi	r2,2
  a0bb6c:	d8800015 	stw	r2,0(sp)
  a0bb70:	d809883a 	mov	r4,sp
  a0bb74:	0a030c00 	call	a030c0 <__pack_d>
  a0bb78:	1009883a 	mov	r4,r2
  a0bb7c:	180b883a 	mov	r5,r3
  a0bb80:	2005883a 	mov	r2,r4
  a0bb84:	2807883a 	mov	r3,r5
  a0bb88:	dfc00917 	ldw	ra,36(sp)
  a0bb8c:	dcc00817 	ldw	r19,32(sp)
  a0bb90:	dc800717 	ldw	r18,28(sp)
  a0bb94:	dc400617 	ldw	r17,24(sp)
  a0bb98:	dc000517 	ldw	r16,20(sp)
  a0bb9c:	dec00a04 	addi	sp,sp,40
  a0bba0:	f800283a 	ret
  a0bba4:	00800f04 	movi	r2,60
  a0bba8:	1807003a 	cmpeq	r3,r3,zero
  a0bbac:	d8800215 	stw	r2,8(sp)
  a0bbb0:	18001126 	beq	r3,zero,a0bbf8 <__floatsidf+0xbc>
  a0bbb4:	0027883a 	mov	r19,zero
  a0bbb8:	2025883a 	mov	r18,r4
  a0bbbc:	d9000315 	stw	r4,12(sp)
  a0bbc0:	dcc00415 	stw	r19,16(sp)
  a0bbc4:	0a02d440 	call	a02d44 <__clzsi2>
  a0bbc8:	11000744 	addi	r4,r2,29
  a0bbcc:	013fe80e 	bge	zero,r4,a0bb70 <__floatsidf+0x34>
  a0bbd0:	10bfff44 	addi	r2,r2,-3
  a0bbd4:	10000c16 	blt	r2,zero,a0bc08 <__floatsidf+0xcc>
  a0bbd8:	90a2983a 	sll	r17,r18,r2
  a0bbdc:	0021883a 	mov	r16,zero
  a0bbe0:	d8800217 	ldw	r2,8(sp)
  a0bbe4:	dc400415 	stw	r17,16(sp)
  a0bbe8:	dc000315 	stw	r16,12(sp)
  a0bbec:	1105c83a 	sub	r2,r2,r4
  a0bbf0:	d8800215 	stw	r2,8(sp)
  a0bbf4:	003fde06 	br	a0bb70 <__floatsidf+0x34>
  a0bbf8:	00a00034 	movhi	r2,32768
  a0bbfc:	20800a26 	beq	r4,r2,a0bc28 <__floatsidf+0xec>
  a0bc00:	0109c83a 	sub	r4,zero,r4
  a0bc04:	003feb06 	br	a0bbb4 <__floatsidf+0x78>
  a0bc08:	9006d07a 	srli	r3,r18,1
  a0bc0c:	008007c4 	movi	r2,31
  a0bc10:	1105c83a 	sub	r2,r2,r4
  a0bc14:	1886d83a 	srl	r3,r3,r2
  a0bc18:	9922983a 	sll	r17,r19,r4
  a0bc1c:	9120983a 	sll	r16,r18,r4
  a0bc20:	1c62b03a 	or	r17,r3,r17
  a0bc24:	003fee06 	br	a0bbe0 <__floatsidf+0xa4>
  a0bc28:	0009883a 	mov	r4,zero
  a0bc2c:	01707834 	movhi	r5,49632
  a0bc30:	003fd306 	br	a0bb80 <__floatsidf+0x44>

00a0bc34 <__fixdfsi>:
  a0bc34:	defff804 	addi	sp,sp,-32
  a0bc38:	2005883a 	mov	r2,r4
  a0bc3c:	2807883a 	mov	r3,r5
  a0bc40:	d809883a 	mov	r4,sp
  a0bc44:	d9400204 	addi	r5,sp,8
  a0bc48:	d8c00115 	stw	r3,4(sp)
  a0bc4c:	d8800015 	stw	r2,0(sp)
  a0bc50:	dfc00715 	stw	ra,28(sp)
  a0bc54:	0a033d40 	call	a033d4 <__unpack_d>
  a0bc58:	d8c00217 	ldw	r3,8(sp)
  a0bc5c:	00800084 	movi	r2,2
  a0bc60:	1880051e 	bne	r3,r2,a0bc78 <__fixdfsi+0x44>
  a0bc64:	0007883a 	mov	r3,zero
  a0bc68:	1805883a 	mov	r2,r3
  a0bc6c:	dfc00717 	ldw	ra,28(sp)
  a0bc70:	dec00804 	addi	sp,sp,32
  a0bc74:	f800283a 	ret
  a0bc78:	00800044 	movi	r2,1
  a0bc7c:	10fff92e 	bgeu	r2,r3,a0bc64 <__fixdfsi+0x30>
  a0bc80:	00800104 	movi	r2,4
  a0bc84:	18800426 	beq	r3,r2,a0bc98 <__fixdfsi+0x64>
  a0bc88:	d8c00417 	ldw	r3,16(sp)
  a0bc8c:	183ff516 	blt	r3,zero,a0bc64 <__fixdfsi+0x30>
  a0bc90:	00800784 	movi	r2,30
  a0bc94:	10c0080e 	bge	r2,r3,a0bcb8 <__fixdfsi+0x84>
  a0bc98:	d8800317 	ldw	r2,12(sp)
  a0bc9c:	1000121e 	bne	r2,zero,a0bce8 <__fixdfsi+0xb4>
  a0bca0:	00e00034 	movhi	r3,32768
  a0bca4:	18ffffc4 	addi	r3,r3,-1
  a0bca8:	1805883a 	mov	r2,r3
  a0bcac:	dfc00717 	ldw	ra,28(sp)
  a0bcb0:	dec00804 	addi	sp,sp,32
  a0bcb4:	f800283a 	ret
  a0bcb8:	00800f04 	movi	r2,60
  a0bcbc:	10d1c83a 	sub	r8,r2,r3
  a0bcc0:	40bff804 	addi	r2,r8,-32
  a0bcc4:	d9800517 	ldw	r6,20(sp)
  a0bcc8:	d9c00617 	ldw	r7,24(sp)
  a0bccc:	10000816 	blt	r2,zero,a0bcf0 <__fixdfsi+0xbc>
  a0bcd0:	3888d83a 	srl	r4,r7,r2
  a0bcd4:	d8800317 	ldw	r2,12(sp)
  a0bcd8:	2007883a 	mov	r3,r4
  a0bcdc:	103fe226 	beq	r2,zero,a0bc68 <__fixdfsi+0x34>
  a0bce0:	0107c83a 	sub	r3,zero,r4
  a0bce4:	003fe006 	br	a0bc68 <__fixdfsi+0x34>
  a0bce8:	00e00034 	movhi	r3,32768
  a0bcec:	003fde06 	br	a0bc68 <__fixdfsi+0x34>
  a0bcf0:	39c7883a 	add	r3,r7,r7
  a0bcf4:	008007c4 	movi	r2,31
  a0bcf8:	1205c83a 	sub	r2,r2,r8
  a0bcfc:	1886983a 	sll	r3,r3,r2
  a0bd00:	3208d83a 	srl	r4,r6,r8
  a0bd04:	1908b03a 	or	r4,r3,r4
  a0bd08:	003ff206 	br	a0bcd4 <__fixdfsi+0xa0>

00a0bd0c <__floatunsidf>:
  a0bd0c:	defff204 	addi	sp,sp,-56
  a0bd10:	dfc00d15 	stw	ra,52(sp)
  a0bd14:	ddc00c15 	stw	r23,48(sp)
  a0bd18:	dd800b15 	stw	r22,44(sp)
  a0bd1c:	dd400a15 	stw	r21,40(sp)
  a0bd20:	dd000915 	stw	r20,36(sp)
  a0bd24:	dcc00815 	stw	r19,32(sp)
  a0bd28:	dc800715 	stw	r18,28(sp)
  a0bd2c:	dc400615 	stw	r17,24(sp)
  a0bd30:	dc000515 	stw	r16,20(sp)
  a0bd34:	d8000115 	stw	zero,4(sp)
  a0bd38:	20000f1e 	bne	r4,zero,a0bd78 <__floatunsidf+0x6c>
  a0bd3c:	00800084 	movi	r2,2
  a0bd40:	d8800015 	stw	r2,0(sp)
  a0bd44:	d809883a 	mov	r4,sp
  a0bd48:	0a030c00 	call	a030c0 <__pack_d>
  a0bd4c:	dfc00d17 	ldw	ra,52(sp)
  a0bd50:	ddc00c17 	ldw	r23,48(sp)
  a0bd54:	dd800b17 	ldw	r22,44(sp)
  a0bd58:	dd400a17 	ldw	r21,40(sp)
  a0bd5c:	dd000917 	ldw	r20,36(sp)
  a0bd60:	dcc00817 	ldw	r19,32(sp)
  a0bd64:	dc800717 	ldw	r18,28(sp)
  a0bd68:	dc400617 	ldw	r17,24(sp)
  a0bd6c:	dc000517 	ldw	r16,20(sp)
  a0bd70:	dec00e04 	addi	sp,sp,56
  a0bd74:	f800283a 	ret
  a0bd78:	008000c4 	movi	r2,3
  a0bd7c:	00c00f04 	movi	r3,60
  a0bd80:	002f883a 	mov	r23,zero
  a0bd84:	202d883a 	mov	r22,r4
  a0bd88:	d8800015 	stw	r2,0(sp)
  a0bd8c:	d8c00215 	stw	r3,8(sp)
  a0bd90:	d9000315 	stw	r4,12(sp)
  a0bd94:	ddc00415 	stw	r23,16(sp)
  a0bd98:	0a02d440 	call	a02d44 <__clzsi2>
  a0bd9c:	12400744 	addi	r9,r2,29
  a0bda0:	48000b16 	blt	r9,zero,a0bdd0 <__floatunsidf+0xc4>
  a0bda4:	483fe726 	beq	r9,zero,a0bd44 <__floatunsidf+0x38>
  a0bda8:	10bfff44 	addi	r2,r2,-3
  a0bdac:	10002e16 	blt	r2,zero,a0be68 <__floatunsidf+0x15c>
  a0bdb0:	b0a2983a 	sll	r17,r22,r2
  a0bdb4:	0021883a 	mov	r16,zero
  a0bdb8:	d8800217 	ldw	r2,8(sp)
  a0bdbc:	dc400415 	stw	r17,16(sp)
  a0bdc0:	dc000315 	stw	r16,12(sp)
  a0bdc4:	1245c83a 	sub	r2,r2,r9
  a0bdc8:	d8800215 	stw	r2,8(sp)
  a0bdcc:	003fdd06 	br	a0bd44 <__floatunsidf+0x38>
  a0bdd0:	0255c83a 	sub	r10,zero,r9
  a0bdd4:	51bff804 	addi	r6,r10,-32
  a0bdd8:	30001b16 	blt	r6,zero,a0be48 <__floatunsidf+0x13c>
  a0bddc:	b9a8d83a 	srl	r20,r23,r6
  a0bde0:	002b883a 	mov	r21,zero
  a0bde4:	000f883a 	mov	r7,zero
  a0bde8:	01000044 	movi	r4,1
  a0bdec:	0011883a 	mov	r8,zero
  a0bdf0:	30002516 	blt	r6,zero,a0be88 <__floatunsidf+0x17c>
  a0bdf4:	21a6983a 	sll	r19,r4,r6
  a0bdf8:	0025883a 	mov	r18,zero
  a0bdfc:	00bfffc4 	movi	r2,-1
  a0be00:	9089883a 	add	r4,r18,r2
  a0be04:	988b883a 	add	r5,r19,r2
  a0be08:	248d803a 	cmpltu	r6,r4,r18
  a0be0c:	314b883a 	add	r5,r6,r5
  a0be10:	b104703a 	and	r2,r22,r4
  a0be14:	b946703a 	and	r3,r23,r5
  a0be18:	10c4b03a 	or	r2,r2,r3
  a0be1c:	10000226 	beq	r2,zero,a0be28 <__floatunsidf+0x11c>
  a0be20:	01c00044 	movi	r7,1
  a0be24:	0011883a 	mov	r8,zero
  a0be28:	d9000217 	ldw	r4,8(sp)
  a0be2c:	a1c4b03a 	or	r2,r20,r7
  a0be30:	aa06b03a 	or	r3,r21,r8
  a0be34:	2249c83a 	sub	r4,r4,r9
  a0be38:	d8c00415 	stw	r3,16(sp)
  a0be3c:	d9000215 	stw	r4,8(sp)
  a0be40:	d8800315 	stw	r2,12(sp)
  a0be44:	003fbf06 	br	a0bd44 <__floatunsidf+0x38>
  a0be48:	bdc7883a 	add	r3,r23,r23
  a0be4c:	008007c4 	movi	r2,31
  a0be50:	1285c83a 	sub	r2,r2,r10
  a0be54:	1886983a 	sll	r3,r3,r2
  a0be58:	b2a8d83a 	srl	r20,r22,r10
  a0be5c:	baaad83a 	srl	r21,r23,r10
  a0be60:	1d28b03a 	or	r20,r3,r20
  a0be64:	003fdf06 	br	a0bde4 <__floatunsidf+0xd8>
  a0be68:	b006d07a 	srli	r3,r22,1
  a0be6c:	008007c4 	movi	r2,31
  a0be70:	1245c83a 	sub	r2,r2,r9
  a0be74:	1886d83a 	srl	r3,r3,r2
  a0be78:	ba62983a 	sll	r17,r23,r9
  a0be7c:	b260983a 	sll	r16,r22,r9
  a0be80:	1c62b03a 	or	r17,r3,r17
  a0be84:	003fcc06 	br	a0bdb8 <__floatunsidf+0xac>
  a0be88:	2006d07a 	srli	r3,r4,1
  a0be8c:	008007c4 	movi	r2,31
  a0be90:	1285c83a 	sub	r2,r2,r10
  a0be94:	18a6d83a 	srl	r19,r3,r2
  a0be98:	22a4983a 	sll	r18,r4,r10
  a0be9c:	003fd706 	br	a0bdfc <__floatunsidf+0xf0>

00a0bea0 <udivmodsi4>:
  a0bea0:	29001b2e 	bgeu	r5,r4,a0bf10 <udivmodsi4+0x70>
  a0bea4:	28001a16 	blt	r5,zero,a0bf10 <udivmodsi4+0x70>
  a0bea8:	00800044 	movi	r2,1
  a0beac:	0007883a 	mov	r3,zero
  a0beb0:	01c007c4 	movi	r7,31
  a0beb4:	00000306 	br	a0bec4 <udivmodsi4+0x24>
  a0beb8:	19c01326 	beq	r3,r7,a0bf08 <udivmodsi4+0x68>
  a0bebc:	18c00044 	addi	r3,r3,1
  a0bec0:	28000416 	blt	r5,zero,a0bed4 <udivmodsi4+0x34>
  a0bec4:	294b883a 	add	r5,r5,r5
  a0bec8:	1085883a 	add	r2,r2,r2
  a0becc:	293ffa36 	bltu	r5,r4,a0beb8 <udivmodsi4+0x18>
  a0bed0:	10000d26 	beq	r2,zero,a0bf08 <udivmodsi4+0x68>
  a0bed4:	0007883a 	mov	r3,zero
  a0bed8:	21400236 	bltu	r4,r5,a0bee4 <udivmodsi4+0x44>
  a0bedc:	2149c83a 	sub	r4,r4,r5
  a0bee0:	1886b03a 	or	r3,r3,r2
  a0bee4:	1004d07a 	srli	r2,r2,1
  a0bee8:	280ad07a 	srli	r5,r5,1
  a0beec:	103ffa1e 	bne	r2,zero,a0bed8 <udivmodsi4+0x38>
  a0bef0:	30000226 	beq	r6,zero,a0befc <udivmodsi4+0x5c>
  a0bef4:	2005883a 	mov	r2,r4
  a0bef8:	f800283a 	ret
  a0befc:	1809883a 	mov	r4,r3
  a0bf00:	2005883a 	mov	r2,r4
  a0bf04:	f800283a 	ret
  a0bf08:	0007883a 	mov	r3,zero
  a0bf0c:	003ff806 	br	a0bef0 <udivmodsi4+0x50>
  a0bf10:	00800044 	movi	r2,1
  a0bf14:	0007883a 	mov	r3,zero
  a0bf18:	003fef06 	br	a0bed8 <udivmodsi4+0x38>

00a0bf1c <__divsi3>:
  a0bf1c:	defffe04 	addi	sp,sp,-8
  a0bf20:	dc000015 	stw	r16,0(sp)
  a0bf24:	dfc00115 	stw	ra,4(sp)
  a0bf28:	0021883a 	mov	r16,zero
  a0bf2c:	20000c16 	blt	r4,zero,a0bf60 <__divsi3+0x44>
  a0bf30:	000d883a 	mov	r6,zero
  a0bf34:	28000e16 	blt	r5,zero,a0bf70 <__divsi3+0x54>
  a0bf38:	0a0bea00 	call	a0bea0 <udivmodsi4>
  a0bf3c:	1007883a 	mov	r3,r2
  a0bf40:	8005003a 	cmpeq	r2,r16,zero
  a0bf44:	1000011e 	bne	r2,zero,a0bf4c <__divsi3+0x30>
  a0bf48:	00c7c83a 	sub	r3,zero,r3
  a0bf4c:	1805883a 	mov	r2,r3
  a0bf50:	dfc00117 	ldw	ra,4(sp)
  a0bf54:	dc000017 	ldw	r16,0(sp)
  a0bf58:	dec00204 	addi	sp,sp,8
  a0bf5c:	f800283a 	ret
  a0bf60:	0109c83a 	sub	r4,zero,r4
  a0bf64:	04000044 	movi	r16,1
  a0bf68:	000d883a 	mov	r6,zero
  a0bf6c:	283ff20e 	bge	r5,zero,a0bf38 <__divsi3+0x1c>
  a0bf70:	014bc83a 	sub	r5,zero,r5
  a0bf74:	8021003a 	cmpeq	r16,r16,zero
  a0bf78:	003fef06 	br	a0bf38 <__divsi3+0x1c>

00a0bf7c <__modsi3>:
  a0bf7c:	deffff04 	addi	sp,sp,-4
  a0bf80:	dfc00015 	stw	ra,0(sp)
  a0bf84:	01800044 	movi	r6,1
  a0bf88:	2807883a 	mov	r3,r5
  a0bf8c:	20000416 	blt	r4,zero,a0bfa0 <__modsi3+0x24>
  a0bf90:	28000c16 	blt	r5,zero,a0bfc4 <__modsi3+0x48>
  a0bf94:	dfc00017 	ldw	ra,0(sp)
  a0bf98:	dec00104 	addi	sp,sp,4
  a0bf9c:	0a0bea01 	jmpi	a0bea0 <udivmodsi4>
  a0bfa0:	0109c83a 	sub	r4,zero,r4
  a0bfa4:	28000b16 	blt	r5,zero,a0bfd4 <__modsi3+0x58>
  a0bfa8:	180b883a 	mov	r5,r3
  a0bfac:	01800044 	movi	r6,1
  a0bfb0:	0a0bea00 	call	a0bea0 <udivmodsi4>
  a0bfb4:	0085c83a 	sub	r2,zero,r2
  a0bfb8:	dfc00017 	ldw	ra,0(sp)
  a0bfbc:	dec00104 	addi	sp,sp,4
  a0bfc0:	f800283a 	ret
  a0bfc4:	014bc83a 	sub	r5,zero,r5
  a0bfc8:	dfc00017 	ldw	ra,0(sp)
  a0bfcc:	dec00104 	addi	sp,sp,4
  a0bfd0:	0a0bea01 	jmpi	a0bea0 <udivmodsi4>
  a0bfd4:	0147c83a 	sub	r3,zero,r5
  a0bfd8:	003ff306 	br	a0bfa8 <__modsi3+0x2c>

00a0bfdc <__udivsi3>:
  a0bfdc:	000d883a 	mov	r6,zero
  a0bfe0:	0a0bea01 	jmpi	a0bea0 <udivmodsi4>

00a0bfe4 <__umodsi3>:
  a0bfe4:	01800044 	movi	r6,1
  a0bfe8:	0a0bea01 	jmpi	a0bea0 <udivmodsi4>

00a0bfec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  a0bfec:	defff804 	addi	sp,sp,-32
  a0bff0:	dfc00715 	stw	ra,28(sp)
  a0bff4:	df000615 	stw	fp,24(sp)
  a0bff8:	df000604 	addi	fp,sp,24
  a0bffc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  a0c000:	e0bffc17 	ldw	r2,-16(fp)
  a0c004:	1004803a 	cmplt	r2,r2,zero
  a0c008:	1000081e 	bne	r2,zero,a0c02c <close+0x40>
  a0c00c:	e0bffc17 	ldw	r2,-16(fp)
  a0c010:	10800324 	muli	r2,r2,12
  a0c014:	1007883a 	mov	r3,r2
  a0c018:	00802874 	movhi	r2,161
  a0c01c:	10861a04 	addi	r2,r2,6248
  a0c020:	1887883a 	add	r3,r3,r2
  a0c024:	e0ffff15 	stw	r3,-4(fp)
  a0c028:	00000106 	br	a0c030 <close+0x44>
  a0c02c:	e03fff15 	stw	zero,-4(fp)
  a0c030:	e0bfff17 	ldw	r2,-4(fp)
  a0c034:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  a0c038:	e0bffb17 	ldw	r2,-20(fp)
  a0c03c:	1005003a 	cmpeq	r2,r2,zero
  a0c040:	10001d1e 	bne	r2,zero,a0c0b8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  a0c044:	e0bffb17 	ldw	r2,-20(fp)
  a0c048:	10800017 	ldw	r2,0(r2)
  a0c04c:	10800417 	ldw	r2,16(r2)
  a0c050:	1005003a 	cmpeq	r2,r2,zero
  a0c054:	1000071e 	bne	r2,zero,a0c074 <close+0x88>
  a0c058:	e0bffb17 	ldw	r2,-20(fp)
  a0c05c:	10800017 	ldw	r2,0(r2)
  a0c060:	10800417 	ldw	r2,16(r2)
  a0c064:	e13ffb17 	ldw	r4,-20(fp)
  a0c068:	103ee83a 	callr	r2
  a0c06c:	e0bffe15 	stw	r2,-8(fp)
  a0c070:	00000106 	br	a0c078 <close+0x8c>
  a0c074:	e03ffe15 	stw	zero,-8(fp)
  a0c078:	e0bffe17 	ldw	r2,-8(fp)
  a0c07c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  a0c080:	e13ffc17 	ldw	r4,-16(fp)
  a0c084:	0a0c8300 	call	a0c830 <alt_release_fd>
    if (rval < 0)
  a0c088:	e0bffa17 	ldw	r2,-24(fp)
  a0c08c:	1004403a 	cmpge	r2,r2,zero
  a0c090:	1000071e 	bne	r2,zero,a0c0b0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  a0c094:	0a0c0e80 	call	a0c0e8 <alt_get_errno>
  a0c098:	e0fffa17 	ldw	r3,-24(fp)
  a0c09c:	00c7c83a 	sub	r3,zero,r3
  a0c0a0:	10c00015 	stw	r3,0(r2)
      return -1;
  a0c0a4:	00bfffc4 	movi	r2,-1
  a0c0a8:	e0bffd15 	stw	r2,-12(fp)
  a0c0ac:	00000806 	br	a0c0d0 <close+0xe4>
    }
    return 0;
  a0c0b0:	e03ffd15 	stw	zero,-12(fp)
  a0c0b4:	00000606 	br	a0c0d0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  a0c0b8:	0a0c0e80 	call	a0c0e8 <alt_get_errno>
  a0c0bc:	1007883a 	mov	r3,r2
  a0c0c0:	00801444 	movi	r2,81
  a0c0c4:	18800015 	stw	r2,0(r3)
    return -1;
  a0c0c8:	00bfffc4 	movi	r2,-1
  a0c0cc:	e0bffd15 	stw	r2,-12(fp)
  a0c0d0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  a0c0d4:	e037883a 	mov	sp,fp
  a0c0d8:	dfc00117 	ldw	ra,4(sp)
  a0c0dc:	df000017 	ldw	fp,0(sp)
  a0c0e0:	dec00204 	addi	sp,sp,8
  a0c0e4:	f800283a 	ret

00a0c0e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0c0e8:	defffd04 	addi	sp,sp,-12
  a0c0ec:	dfc00215 	stw	ra,8(sp)
  a0c0f0:	df000115 	stw	fp,4(sp)
  a0c0f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0c0f8:	00802874 	movhi	r2,161
  a0c0fc:	108af704 	addi	r2,r2,11228
  a0c100:	10800017 	ldw	r2,0(r2)
  a0c104:	1005003a 	cmpeq	r2,r2,zero
  a0c108:	1000061e 	bne	r2,zero,a0c124 <alt_get_errno+0x3c>
  a0c10c:	00802874 	movhi	r2,161
  a0c110:	108af704 	addi	r2,r2,11228
  a0c114:	10800017 	ldw	r2,0(r2)
  a0c118:	103ee83a 	callr	r2
  a0c11c:	e0bfff15 	stw	r2,-4(fp)
  a0c120:	00000306 	br	a0c130 <alt_get_errno+0x48>
  a0c124:	00802874 	movhi	r2,161
  a0c128:	1091fc04 	addi	r2,r2,18416
  a0c12c:	e0bfff15 	stw	r2,-4(fp)
  a0c130:	e0bfff17 	ldw	r2,-4(fp)
}
  a0c134:	e037883a 	mov	sp,fp
  a0c138:	dfc00117 	ldw	ra,4(sp)
  a0c13c:	df000017 	ldw	fp,0(sp)
  a0c140:	dec00204 	addi	sp,sp,8
  a0c144:	f800283a 	ret

00a0c148 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  a0c148:	defffc04 	addi	sp,sp,-16
  a0c14c:	df000315 	stw	fp,12(sp)
  a0c150:	df000304 	addi	fp,sp,12
  a0c154:	e13ffd15 	stw	r4,-12(fp)
  a0c158:	e17ffe15 	stw	r5,-8(fp)
  a0c15c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  a0c160:	e0bfff17 	ldw	r2,-4(fp)
}
  a0c164:	e037883a 	mov	sp,fp
  a0c168:	df000017 	ldw	fp,0(sp)
  a0c16c:	dec00104 	addi	sp,sp,4
  a0c170:	f800283a 	ret

00a0c174 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  a0c174:	defff904 	addi	sp,sp,-28
  a0c178:	dfc00615 	stw	ra,24(sp)
  a0c17c:	df000515 	stw	fp,20(sp)
  a0c180:	df000504 	addi	fp,sp,20
  a0c184:	e13ffc15 	stw	r4,-16(fp)
  a0c188:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  a0c18c:	e0bffc17 	ldw	r2,-16(fp)
  a0c190:	1004803a 	cmplt	r2,r2,zero
  a0c194:	1000081e 	bne	r2,zero,a0c1b8 <fstat+0x44>
  a0c198:	e0bffc17 	ldw	r2,-16(fp)
  a0c19c:	10800324 	muli	r2,r2,12
  a0c1a0:	1007883a 	mov	r3,r2
  a0c1a4:	00802874 	movhi	r2,161
  a0c1a8:	10861a04 	addi	r2,r2,6248
  a0c1ac:	1887883a 	add	r3,r3,r2
  a0c1b0:	e0ffff15 	stw	r3,-4(fp)
  a0c1b4:	00000106 	br	a0c1bc <fstat+0x48>
  a0c1b8:	e03fff15 	stw	zero,-4(fp)
  a0c1bc:	e0bfff17 	ldw	r2,-4(fp)
  a0c1c0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  a0c1c4:	e0bffb17 	ldw	r2,-20(fp)
  a0c1c8:	1005003a 	cmpeq	r2,r2,zero
  a0c1cc:	1000121e 	bne	r2,zero,a0c218 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  a0c1d0:	e0bffb17 	ldw	r2,-20(fp)
  a0c1d4:	10800017 	ldw	r2,0(r2)
  a0c1d8:	10800817 	ldw	r2,32(r2)
  a0c1dc:	1005003a 	cmpeq	r2,r2,zero
  a0c1e0:	1000081e 	bne	r2,zero,a0c204 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  a0c1e4:	e0bffb17 	ldw	r2,-20(fp)
  a0c1e8:	10800017 	ldw	r2,0(r2)
  a0c1ec:	10800817 	ldw	r2,32(r2)
  a0c1f0:	e13ffb17 	ldw	r4,-20(fp)
  a0c1f4:	e17ffd17 	ldw	r5,-12(fp)
  a0c1f8:	103ee83a 	callr	r2
  a0c1fc:	e0bffe15 	stw	r2,-8(fp)
  a0c200:	00000b06 	br	a0c230 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  a0c204:	e0fffd17 	ldw	r3,-12(fp)
  a0c208:	00880004 	movi	r2,8192
  a0c20c:	18800115 	stw	r2,4(r3)
      return 0;
  a0c210:	e03ffe15 	stw	zero,-8(fp)
  a0c214:	00000606 	br	a0c230 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  a0c218:	0a0c2480 	call	a0c248 <alt_get_errno>
  a0c21c:	1007883a 	mov	r3,r2
  a0c220:	00801444 	movi	r2,81
  a0c224:	18800015 	stw	r2,0(r3)
    return -1;
  a0c228:	00bfffc4 	movi	r2,-1
  a0c22c:	e0bffe15 	stw	r2,-8(fp)
  a0c230:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  a0c234:	e037883a 	mov	sp,fp
  a0c238:	dfc00117 	ldw	ra,4(sp)
  a0c23c:	df000017 	ldw	fp,0(sp)
  a0c240:	dec00204 	addi	sp,sp,8
  a0c244:	f800283a 	ret

00a0c248 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0c248:	defffd04 	addi	sp,sp,-12
  a0c24c:	dfc00215 	stw	ra,8(sp)
  a0c250:	df000115 	stw	fp,4(sp)
  a0c254:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0c258:	00802874 	movhi	r2,161
  a0c25c:	108af704 	addi	r2,r2,11228
  a0c260:	10800017 	ldw	r2,0(r2)
  a0c264:	1005003a 	cmpeq	r2,r2,zero
  a0c268:	1000061e 	bne	r2,zero,a0c284 <alt_get_errno+0x3c>
  a0c26c:	00802874 	movhi	r2,161
  a0c270:	108af704 	addi	r2,r2,11228
  a0c274:	10800017 	ldw	r2,0(r2)
  a0c278:	103ee83a 	callr	r2
  a0c27c:	e0bfff15 	stw	r2,-4(fp)
  a0c280:	00000306 	br	a0c290 <alt_get_errno+0x48>
  a0c284:	00802874 	movhi	r2,161
  a0c288:	1091fc04 	addi	r2,r2,18416
  a0c28c:	e0bfff15 	stw	r2,-4(fp)
  a0c290:	e0bfff17 	ldw	r2,-4(fp)
}
  a0c294:	e037883a 	mov	sp,fp
  a0c298:	dfc00117 	ldw	ra,4(sp)
  a0c29c:	df000017 	ldw	fp,0(sp)
  a0c2a0:	dec00204 	addi	sp,sp,8
  a0c2a4:	f800283a 	ret

00a0c2a8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  a0c2a8:	deffeb04 	addi	sp,sp,-84
  a0c2ac:	dfc01415 	stw	ra,80(sp)
  a0c2b0:	df001315 	stw	fp,76(sp)
  a0c2b4:	df001304 	addi	fp,sp,76
  a0c2b8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  a0c2bc:	e0bffd17 	ldw	r2,-12(fp)
  a0c2c0:	1004803a 	cmplt	r2,r2,zero
  a0c2c4:	1000081e 	bne	r2,zero,a0c2e8 <isatty+0x40>
  a0c2c8:	e0bffd17 	ldw	r2,-12(fp)
  a0c2cc:	10800324 	muli	r2,r2,12
  a0c2d0:	1007883a 	mov	r3,r2
  a0c2d4:	00802874 	movhi	r2,161
  a0c2d8:	10861a04 	addi	r2,r2,6248
  a0c2dc:	1887883a 	add	r3,r3,r2
  a0c2e0:	e0ffff15 	stw	r3,-4(fp)
  a0c2e4:	00000106 	br	a0c2ec <isatty+0x44>
  a0c2e8:	e03fff15 	stw	zero,-4(fp)
  a0c2ec:	e0bfff17 	ldw	r2,-4(fp)
  a0c2f0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  a0c2f4:	e0bfed17 	ldw	r2,-76(fp)
  a0c2f8:	1005003a 	cmpeq	r2,r2,zero
  a0c2fc:	10000f1e 	bne	r2,zero,a0c33c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  a0c300:	e0bfed17 	ldw	r2,-76(fp)
  a0c304:	10800017 	ldw	r2,0(r2)
  a0c308:	10800817 	ldw	r2,32(r2)
  a0c30c:	1004c03a 	cmpne	r2,r2,zero
  a0c310:	1000031e 	bne	r2,zero,a0c320 <isatty+0x78>
    {
      return 1;
  a0c314:	00800044 	movi	r2,1
  a0c318:	e0bffe15 	stw	r2,-8(fp)
  a0c31c:	00000c06 	br	a0c350 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  a0c320:	e17fee04 	addi	r5,fp,-72
  a0c324:	e13ffd17 	ldw	r4,-12(fp)
  a0c328:	0a0c1740 	call	a0c174 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  a0c32c:	e0bfef17 	ldw	r2,-68(fp)
  a0c330:	10880020 	cmpeqi	r2,r2,8192
  a0c334:	e0bffe15 	stw	r2,-8(fp)
  a0c338:	00000506 	br	a0c350 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  a0c33c:	0a0c3680 	call	a0c368 <alt_get_errno>
  a0c340:	1007883a 	mov	r3,r2
  a0c344:	00801444 	movi	r2,81
  a0c348:	18800015 	stw	r2,0(r3)
    return 0;
  a0c34c:	e03ffe15 	stw	zero,-8(fp)
  a0c350:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  a0c354:	e037883a 	mov	sp,fp
  a0c358:	dfc00117 	ldw	ra,4(sp)
  a0c35c:	df000017 	ldw	fp,0(sp)
  a0c360:	dec00204 	addi	sp,sp,8
  a0c364:	f800283a 	ret

00a0c368 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0c368:	defffd04 	addi	sp,sp,-12
  a0c36c:	dfc00215 	stw	ra,8(sp)
  a0c370:	df000115 	stw	fp,4(sp)
  a0c374:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0c378:	00802874 	movhi	r2,161
  a0c37c:	108af704 	addi	r2,r2,11228
  a0c380:	10800017 	ldw	r2,0(r2)
  a0c384:	1005003a 	cmpeq	r2,r2,zero
  a0c388:	1000061e 	bne	r2,zero,a0c3a4 <alt_get_errno+0x3c>
  a0c38c:	00802874 	movhi	r2,161
  a0c390:	108af704 	addi	r2,r2,11228
  a0c394:	10800017 	ldw	r2,0(r2)
  a0c398:	103ee83a 	callr	r2
  a0c39c:	e0bfff15 	stw	r2,-4(fp)
  a0c3a0:	00000306 	br	a0c3b0 <alt_get_errno+0x48>
  a0c3a4:	00802874 	movhi	r2,161
  a0c3a8:	1091fc04 	addi	r2,r2,18416
  a0c3ac:	e0bfff15 	stw	r2,-4(fp)
  a0c3b0:	e0bfff17 	ldw	r2,-4(fp)
}
  a0c3b4:	e037883a 	mov	sp,fp
  a0c3b8:	dfc00117 	ldw	ra,4(sp)
  a0c3bc:	df000017 	ldw	fp,0(sp)
  a0c3c0:	dec00204 	addi	sp,sp,8
  a0c3c4:	f800283a 	ret

00a0c3c8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  a0c3c8:	defffe04 	addi	sp,sp,-8
  a0c3cc:	dfc00115 	stw	ra,4(sp)
  a0c3d0:	df000015 	stw	fp,0(sp)
  a0c3d4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  a0c3d8:	01002874 	movhi	r4,161
  a0c3dc:	210b0004 	addi	r4,r4,11264
  a0c3e0:	01402874 	movhi	r5,161
  a0c3e4:	29440b04 	addi	r5,r5,4140
  a0c3e8:	01802874 	movhi	r6,161
  a0c3ec:	318b0004 	addi	r6,r6,11264
  a0c3f0:	0a0c4480 	call	a0c448 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  a0c3f4:	01002834 	movhi	r4,160
  a0c3f8:	21000804 	addi	r4,r4,32
  a0c3fc:	01402834 	movhi	r5,160
  a0c400:	29400804 	addi	r5,r5,32
  a0c404:	01802834 	movhi	r6,160
  a0c408:	31806d04 	addi	r6,r6,436
  a0c40c:	0a0c4480 	call	a0c448 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  a0c410:	01002874 	movhi	r4,161
  a0c414:	2102c904 	addi	r4,r4,2852
  a0c418:	01402874 	movhi	r5,161
  a0c41c:	2942c904 	addi	r5,r5,2852
  a0c420:	01802874 	movhi	r6,161
  a0c424:	31840b04 	addi	r6,r6,4140
  a0c428:	0a0c4480 	call	a0c448 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  a0c42c:	0a0f8d00 	call	a0f8d0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  a0c430:	0a0fb840 	call	a0fb84 <alt_icache_flush_all>
}
  a0c434:	e037883a 	mov	sp,fp
  a0c438:	dfc00117 	ldw	ra,4(sp)
  a0c43c:	df000017 	ldw	fp,0(sp)
  a0c440:	dec00204 	addi	sp,sp,8
  a0c444:	f800283a 	ret

00a0c448 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  a0c448:	defffc04 	addi	sp,sp,-16
  a0c44c:	df000315 	stw	fp,12(sp)
  a0c450:	df000304 	addi	fp,sp,12
  a0c454:	e13ffd15 	stw	r4,-12(fp)
  a0c458:	e17ffe15 	stw	r5,-8(fp)
  a0c45c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  a0c460:	e0fffe17 	ldw	r3,-8(fp)
  a0c464:	e0bffd17 	ldw	r2,-12(fp)
  a0c468:	18800e26 	beq	r3,r2,a0c4a4 <alt_load_section+0x5c>
  {
    while( to != end )
  a0c46c:	00000a06 	br	a0c498 <alt_load_section+0x50>
    {
      *to++ = *from++;
  a0c470:	e0bffd17 	ldw	r2,-12(fp)
  a0c474:	10c00017 	ldw	r3,0(r2)
  a0c478:	e0bffe17 	ldw	r2,-8(fp)
  a0c47c:	10c00015 	stw	r3,0(r2)
  a0c480:	e0bffe17 	ldw	r2,-8(fp)
  a0c484:	10800104 	addi	r2,r2,4
  a0c488:	e0bffe15 	stw	r2,-8(fp)
  a0c48c:	e0bffd17 	ldw	r2,-12(fp)
  a0c490:	10800104 	addi	r2,r2,4
  a0c494:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  a0c498:	e0fffe17 	ldw	r3,-8(fp)
  a0c49c:	e0bfff17 	ldw	r2,-4(fp)
  a0c4a0:	18bff31e 	bne	r3,r2,a0c470 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  a0c4a4:	e037883a 	mov	sp,fp
  a0c4a8:	df000017 	ldw	fp,0(sp)
  a0c4ac:	dec00104 	addi	sp,sp,4
  a0c4b0:	f800283a 	ret

00a0c4b4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  a0c4b4:	defff804 	addi	sp,sp,-32
  a0c4b8:	dfc00715 	stw	ra,28(sp)
  a0c4bc:	df000615 	stw	fp,24(sp)
  a0c4c0:	df000604 	addi	fp,sp,24
  a0c4c4:	e13ffc15 	stw	r4,-16(fp)
  a0c4c8:	e17ffd15 	stw	r5,-12(fp)
  a0c4cc:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  a0c4d0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  a0c4d4:	e0bffc17 	ldw	r2,-16(fp)
  a0c4d8:	1004803a 	cmplt	r2,r2,zero
  a0c4dc:	1000081e 	bne	r2,zero,a0c500 <lseek+0x4c>
  a0c4e0:	e0bffc17 	ldw	r2,-16(fp)
  a0c4e4:	10800324 	muli	r2,r2,12
  a0c4e8:	1007883a 	mov	r3,r2
  a0c4ec:	00802874 	movhi	r2,161
  a0c4f0:	10861a04 	addi	r2,r2,6248
  a0c4f4:	1887883a 	add	r3,r3,r2
  a0c4f8:	e0ffff15 	stw	r3,-4(fp)
  a0c4fc:	00000106 	br	a0c504 <lseek+0x50>
  a0c500:	e03fff15 	stw	zero,-4(fp)
  a0c504:	e0bfff17 	ldw	r2,-4(fp)
  a0c508:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  a0c50c:	e0bffb17 	ldw	r2,-20(fp)
  a0c510:	1005003a 	cmpeq	r2,r2,zero
  a0c514:	1000111e 	bne	r2,zero,a0c55c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  a0c518:	e0bffb17 	ldw	r2,-20(fp)
  a0c51c:	10800017 	ldw	r2,0(r2)
  a0c520:	10800717 	ldw	r2,28(r2)
  a0c524:	1005003a 	cmpeq	r2,r2,zero
  a0c528:	1000091e 	bne	r2,zero,a0c550 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  a0c52c:	e0bffb17 	ldw	r2,-20(fp)
  a0c530:	10800017 	ldw	r2,0(r2)
  a0c534:	10800717 	ldw	r2,28(r2)
  a0c538:	e13ffb17 	ldw	r4,-20(fp)
  a0c53c:	e17ffd17 	ldw	r5,-12(fp)
  a0c540:	e1bffe17 	ldw	r6,-8(fp)
  a0c544:	103ee83a 	callr	r2
  a0c548:	e0bffa15 	stw	r2,-24(fp)
  a0c54c:	00000506 	br	a0c564 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  a0c550:	00bfde84 	movi	r2,-134
  a0c554:	e0bffa15 	stw	r2,-24(fp)
  a0c558:	00000206 	br	a0c564 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  a0c55c:	00bfebc4 	movi	r2,-81
  a0c560:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  a0c564:	e0bffa17 	ldw	r2,-24(fp)
  a0c568:	1004403a 	cmpge	r2,r2,zero
  a0c56c:	1000071e 	bne	r2,zero,a0c58c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  a0c570:	0a0c5a40 	call	a0c5a4 <alt_get_errno>
  a0c574:	1007883a 	mov	r3,r2
  a0c578:	e0bffa17 	ldw	r2,-24(fp)
  a0c57c:	0085c83a 	sub	r2,zero,r2
  a0c580:	18800015 	stw	r2,0(r3)
    rc = -1;
  a0c584:	00bfffc4 	movi	r2,-1
  a0c588:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  a0c58c:	e0bffa17 	ldw	r2,-24(fp)
}
  a0c590:	e037883a 	mov	sp,fp
  a0c594:	dfc00117 	ldw	ra,4(sp)
  a0c598:	df000017 	ldw	fp,0(sp)
  a0c59c:	dec00204 	addi	sp,sp,8
  a0c5a0:	f800283a 	ret

00a0c5a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0c5a4:	defffd04 	addi	sp,sp,-12
  a0c5a8:	dfc00215 	stw	ra,8(sp)
  a0c5ac:	df000115 	stw	fp,4(sp)
  a0c5b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0c5b4:	00802874 	movhi	r2,161
  a0c5b8:	108af704 	addi	r2,r2,11228
  a0c5bc:	10800017 	ldw	r2,0(r2)
  a0c5c0:	1005003a 	cmpeq	r2,r2,zero
  a0c5c4:	1000061e 	bne	r2,zero,a0c5e0 <alt_get_errno+0x3c>
  a0c5c8:	00802874 	movhi	r2,161
  a0c5cc:	108af704 	addi	r2,r2,11228
  a0c5d0:	10800017 	ldw	r2,0(r2)
  a0c5d4:	103ee83a 	callr	r2
  a0c5d8:	e0bfff15 	stw	r2,-4(fp)
  a0c5dc:	00000306 	br	a0c5ec <alt_get_errno+0x48>
  a0c5e0:	00802874 	movhi	r2,161
  a0c5e4:	1091fc04 	addi	r2,r2,18416
  a0c5e8:	e0bfff15 	stw	r2,-4(fp)
  a0c5ec:	e0bfff17 	ldw	r2,-4(fp)
}
  a0c5f0:	e037883a 	mov	sp,fp
  a0c5f4:	dfc00117 	ldw	ra,4(sp)
  a0c5f8:	df000017 	ldw	fp,0(sp)
  a0c5fc:	dec00204 	addi	sp,sp,8
  a0c600:	f800283a 	ret

00a0c604 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  a0c604:	defffd04 	addi	sp,sp,-12
  a0c608:	dfc00215 	stw	ra,8(sp)
  a0c60c:	df000115 	stw	fp,4(sp)
  a0c610:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  a0c614:	0009883a 	mov	r4,zero
  a0c618:	0a0cacc0 	call	a0cacc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  a0c61c:	0a0cb000 	call	a0cb00 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  a0c620:	01002874 	movhi	r4,161
  a0c624:	2103b904 	addi	r4,r4,3812
  a0c628:	01402874 	movhi	r5,161
  a0c62c:	2943b904 	addi	r5,r5,3812
  a0c630:	01802874 	movhi	r6,161
  a0c634:	3183b904 	addi	r6,r6,3812
  a0c638:	0a0ff440 	call	a0ff44 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  a0c63c:	0a0fa280 	call	a0fa28 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  a0c640:	01002874 	movhi	r4,161
  a0c644:	213ea304 	addi	r4,r4,-1396
  a0c648:	0a106ac0 	call	a106ac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  a0c64c:	d1271a17 	ldw	r4,-25496(gp)
  a0c650:	d1671b17 	ldw	r5,-25492(gp)
  a0c654:	d1a71c17 	ldw	r6,-25488(gp)
  a0c658:	0a0062c0 	call	a0062c <main>
  a0c65c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  a0c660:	01000044 	movi	r4,1
  a0c664:	0a0bfec0 	call	a0bfec <close>
  exit (result);
  a0c668:	e13fff17 	ldw	r4,-4(fp)
  a0c66c:	0a106c00 	call	a106c0 <exit>

00a0c670 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  a0c670:	defffe04 	addi	sp,sp,-8
  a0c674:	df000115 	stw	fp,4(sp)
  a0c678:	df000104 	addi	fp,sp,4
  a0c67c:	e13fff15 	stw	r4,-4(fp)
}
  a0c680:	e037883a 	mov	sp,fp
  a0c684:	df000017 	ldw	fp,0(sp)
  a0c688:	dec00104 	addi	sp,sp,4
  a0c68c:	f800283a 	ret

00a0c690 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  a0c690:	defffe04 	addi	sp,sp,-8
  a0c694:	df000115 	stw	fp,4(sp)
  a0c698:	df000104 	addi	fp,sp,4
  a0c69c:	e13fff15 	stw	r4,-4(fp)
}
  a0c6a0:	e037883a 	mov	sp,fp
  a0c6a4:	df000017 	ldw	fp,0(sp)
  a0c6a8:	dec00104 	addi	sp,sp,4
  a0c6ac:	f800283a 	ret

00a0c6b0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  a0c6b0:	defff704 	addi	sp,sp,-36
  a0c6b4:	dfc00815 	stw	ra,32(sp)
  a0c6b8:	df000715 	stw	fp,28(sp)
  a0c6bc:	df000704 	addi	fp,sp,28
  a0c6c0:	e13ffb15 	stw	r4,-20(fp)
  a0c6c4:	e17ffc15 	stw	r5,-16(fp)
  a0c6c8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  a0c6cc:	e0bffb17 	ldw	r2,-20(fp)
  a0c6d0:	1004803a 	cmplt	r2,r2,zero
  a0c6d4:	1000081e 	bne	r2,zero,a0c6f8 <read+0x48>
  a0c6d8:	e0bffb17 	ldw	r2,-20(fp)
  a0c6dc:	10800324 	muli	r2,r2,12
  a0c6e0:	1007883a 	mov	r3,r2
  a0c6e4:	00802874 	movhi	r2,161
  a0c6e8:	10861a04 	addi	r2,r2,6248
  a0c6ec:	1887883a 	add	r3,r3,r2
  a0c6f0:	e0ffff15 	stw	r3,-4(fp)
  a0c6f4:	00000106 	br	a0c6fc <read+0x4c>
  a0c6f8:	e03fff15 	stw	zero,-4(fp)
  a0c6fc:	e0bfff17 	ldw	r2,-4(fp)
  a0c700:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  a0c704:	e0bffa17 	ldw	r2,-24(fp)
  a0c708:	1005003a 	cmpeq	r2,r2,zero
  a0c70c:	1000241e 	bne	r2,zero,a0c7a0 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  a0c710:	e0bffa17 	ldw	r2,-24(fp)
  a0c714:	10800217 	ldw	r2,8(r2)
  a0c718:	108000cc 	andi	r2,r2,3
  a0c71c:	10800060 	cmpeqi	r2,r2,1
  a0c720:	10001a1e 	bne	r2,zero,a0c78c <read+0xdc>
  a0c724:	e0bffa17 	ldw	r2,-24(fp)
  a0c728:	10800017 	ldw	r2,0(r2)
  a0c72c:	10800517 	ldw	r2,20(r2)
  a0c730:	1005003a 	cmpeq	r2,r2,zero
  a0c734:	1000151e 	bne	r2,zero,a0c78c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  a0c738:	e0bffa17 	ldw	r2,-24(fp)
  a0c73c:	10800017 	ldw	r2,0(r2)
  a0c740:	10800517 	ldw	r2,20(r2)
  a0c744:	e17ffc17 	ldw	r5,-16(fp)
  a0c748:	e1bffd17 	ldw	r6,-12(fp)
  a0c74c:	e13ffa17 	ldw	r4,-24(fp)
  a0c750:	103ee83a 	callr	r2
  a0c754:	e0bff915 	stw	r2,-28(fp)
  a0c758:	e0bff917 	ldw	r2,-28(fp)
  a0c75c:	1004403a 	cmpge	r2,r2,zero
  a0c760:	1000071e 	bne	r2,zero,a0c780 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  a0c764:	0a0c7d00 	call	a0c7d0 <alt_get_errno>
  a0c768:	e0fff917 	ldw	r3,-28(fp)
  a0c76c:	00c7c83a 	sub	r3,zero,r3
  a0c770:	10c00015 	stw	r3,0(r2)
          return -1;
  a0c774:	00bfffc4 	movi	r2,-1
  a0c778:	e0bffe15 	stw	r2,-8(fp)
  a0c77c:	00000e06 	br	a0c7b8 <read+0x108>
        }
        return rval;
  a0c780:	e0bff917 	ldw	r2,-28(fp)
  a0c784:	e0bffe15 	stw	r2,-8(fp)
  a0c788:	00000b06 	br	a0c7b8 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  a0c78c:	0a0c7d00 	call	a0c7d0 <alt_get_errno>
  a0c790:	1007883a 	mov	r3,r2
  a0c794:	00800344 	movi	r2,13
  a0c798:	18800015 	stw	r2,0(r3)
  a0c79c:	00000406 	br	a0c7b0 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  a0c7a0:	0a0c7d00 	call	a0c7d0 <alt_get_errno>
  a0c7a4:	1007883a 	mov	r3,r2
  a0c7a8:	00801444 	movi	r2,81
  a0c7ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
  a0c7b0:	00bfffc4 	movi	r2,-1
  a0c7b4:	e0bffe15 	stw	r2,-8(fp)
  a0c7b8:	e0bffe17 	ldw	r2,-8(fp)
}
  a0c7bc:	e037883a 	mov	sp,fp
  a0c7c0:	dfc00117 	ldw	ra,4(sp)
  a0c7c4:	df000017 	ldw	fp,0(sp)
  a0c7c8:	dec00204 	addi	sp,sp,8
  a0c7cc:	f800283a 	ret

00a0c7d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0c7d0:	defffd04 	addi	sp,sp,-12
  a0c7d4:	dfc00215 	stw	ra,8(sp)
  a0c7d8:	df000115 	stw	fp,4(sp)
  a0c7dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0c7e0:	00802874 	movhi	r2,161
  a0c7e4:	108af704 	addi	r2,r2,11228
  a0c7e8:	10800017 	ldw	r2,0(r2)
  a0c7ec:	1005003a 	cmpeq	r2,r2,zero
  a0c7f0:	1000061e 	bne	r2,zero,a0c80c <alt_get_errno+0x3c>
  a0c7f4:	00802874 	movhi	r2,161
  a0c7f8:	108af704 	addi	r2,r2,11228
  a0c7fc:	10800017 	ldw	r2,0(r2)
  a0c800:	103ee83a 	callr	r2
  a0c804:	e0bfff15 	stw	r2,-4(fp)
  a0c808:	00000306 	br	a0c818 <alt_get_errno+0x48>
  a0c80c:	00802874 	movhi	r2,161
  a0c810:	1091fc04 	addi	r2,r2,18416
  a0c814:	e0bfff15 	stw	r2,-4(fp)
  a0c818:	e0bfff17 	ldw	r2,-4(fp)
}
  a0c81c:	e037883a 	mov	sp,fp
  a0c820:	dfc00117 	ldw	ra,4(sp)
  a0c824:	df000017 	ldw	fp,0(sp)
  a0c828:	dec00204 	addi	sp,sp,8
  a0c82c:	f800283a 	ret

00a0c830 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  a0c830:	defffe04 	addi	sp,sp,-8
  a0c834:	df000115 	stw	fp,4(sp)
  a0c838:	df000104 	addi	fp,sp,4
  a0c83c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  a0c840:	e0bfff17 	ldw	r2,-4(fp)
  a0c844:	108000d0 	cmplti	r2,r2,3
  a0c848:	10000d1e 	bne	r2,zero,a0c880 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  a0c84c:	e0bfff17 	ldw	r2,-4(fp)
  a0c850:	00c02874 	movhi	r3,161
  a0c854:	18c61a04 	addi	r3,r3,6248
  a0c858:	10800324 	muli	r2,r2,12
  a0c85c:	10c5883a 	add	r2,r2,r3
  a0c860:	10800204 	addi	r2,r2,8
  a0c864:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  a0c868:	e0bfff17 	ldw	r2,-4(fp)
  a0c86c:	00c02874 	movhi	r3,161
  a0c870:	18c61a04 	addi	r3,r3,6248
  a0c874:	10800324 	muli	r2,r2,12
  a0c878:	10c5883a 	add	r2,r2,r3
  a0c87c:	10000015 	stw	zero,0(r2)
  }
}
  a0c880:	e037883a 	mov	sp,fp
  a0c884:	df000017 	ldw	fp,0(sp)
  a0c888:	dec00104 	addi	sp,sp,4
  a0c88c:	f800283a 	ret

00a0c890 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  a0c890:	defff804 	addi	sp,sp,-32
  a0c894:	df000715 	stw	fp,28(sp)
  a0c898:	df000704 	addi	fp,sp,28
  a0c89c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  a0c8a0:	0005303a 	rdctl	r2,status
  a0c8a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  a0c8a8:	e0fffb17 	ldw	r3,-20(fp)
  a0c8ac:	00bfff84 	movi	r2,-2
  a0c8b0:	1884703a 	and	r2,r3,r2
  a0c8b4:	1001703a 	wrctl	status,r2
  
  return context;
  a0c8b8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  a0c8bc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  a0c8c0:	d0a01517 	ldw	r2,-32684(gp)
  a0c8c4:	10c000c4 	addi	r3,r2,3
  a0c8c8:	00bfff04 	movi	r2,-4
  a0c8cc:	1884703a 	and	r2,r3,r2
  a0c8d0:	d0a01515 	stw	r2,-32684(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  a0c8d4:	d0e01517 	ldw	r3,-32684(gp)
  a0c8d8:	e0bffe17 	ldw	r2,-8(fp)
  a0c8dc:	1887883a 	add	r3,r3,r2
  a0c8e0:	00803034 	movhi	r2,192
  a0c8e4:	10800004 	addi	r2,r2,0
  a0c8e8:	10c0072e 	bgeu	r2,r3,a0c908 <sbrk+0x78>
  a0c8ec:	e0bffd17 	ldw	r2,-12(fp)
  a0c8f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  a0c8f4:	e0bffa17 	ldw	r2,-24(fp)
  a0c8f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  a0c8fc:	00bfffc4 	movi	r2,-1
  a0c900:	e0bfff15 	stw	r2,-4(fp)
  a0c904:	00000c06 	br	a0c938 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  a0c908:	d0a01517 	ldw	r2,-32684(gp)
  a0c90c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  a0c910:	d0e01517 	ldw	r3,-32684(gp)
  a0c914:	e0bffe17 	ldw	r2,-8(fp)
  a0c918:	1885883a 	add	r2,r3,r2
  a0c91c:	d0a01515 	stw	r2,-32684(gp)
  a0c920:	e0bffd17 	ldw	r2,-12(fp)
  a0c924:	e0bff915 	stw	r2,-28(fp)
  a0c928:	e0bff917 	ldw	r2,-28(fp)
  a0c92c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  a0c930:	e0bffc17 	ldw	r2,-16(fp)
  a0c934:	e0bfff15 	stw	r2,-4(fp)
  a0c938:	e0bfff17 	ldw	r2,-4(fp)
} 
  a0c93c:	e037883a 	mov	sp,fp
  a0c940:	df000017 	ldw	fp,0(sp)
  a0c944:	dec00104 	addi	sp,sp,4
  a0c948:	f800283a 	ret

00a0c94c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  a0c94c:	defff704 	addi	sp,sp,-36
  a0c950:	dfc00815 	stw	ra,32(sp)
  a0c954:	df000715 	stw	fp,28(sp)
  a0c958:	df000704 	addi	fp,sp,28
  a0c95c:	e13ffb15 	stw	r4,-20(fp)
  a0c960:	e17ffc15 	stw	r5,-16(fp)
  a0c964:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  a0c968:	e0bffb17 	ldw	r2,-20(fp)
  a0c96c:	1004803a 	cmplt	r2,r2,zero
  a0c970:	1000081e 	bne	r2,zero,a0c994 <write+0x48>
  a0c974:	e0bffb17 	ldw	r2,-20(fp)
  a0c978:	10800324 	muli	r2,r2,12
  a0c97c:	1007883a 	mov	r3,r2
  a0c980:	00802874 	movhi	r2,161
  a0c984:	10861a04 	addi	r2,r2,6248
  a0c988:	1887883a 	add	r3,r3,r2
  a0c98c:	e0ffff15 	stw	r3,-4(fp)
  a0c990:	00000106 	br	a0c998 <write+0x4c>
  a0c994:	e03fff15 	stw	zero,-4(fp)
  a0c998:	e0bfff17 	ldw	r2,-4(fp)
  a0c99c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  a0c9a0:	e0bffa17 	ldw	r2,-24(fp)
  a0c9a4:	1005003a 	cmpeq	r2,r2,zero
  a0c9a8:	1000241e 	bne	r2,zero,a0ca3c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  a0c9ac:	e0bffa17 	ldw	r2,-24(fp)
  a0c9b0:	10800217 	ldw	r2,8(r2)
  a0c9b4:	108000cc 	andi	r2,r2,3
  a0c9b8:	1005003a 	cmpeq	r2,r2,zero
  a0c9bc:	10001a1e 	bne	r2,zero,a0ca28 <write+0xdc>
  a0c9c0:	e0bffa17 	ldw	r2,-24(fp)
  a0c9c4:	10800017 	ldw	r2,0(r2)
  a0c9c8:	10800617 	ldw	r2,24(r2)
  a0c9cc:	1005003a 	cmpeq	r2,r2,zero
  a0c9d0:	1000151e 	bne	r2,zero,a0ca28 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  a0c9d4:	e0bffa17 	ldw	r2,-24(fp)
  a0c9d8:	10800017 	ldw	r2,0(r2)
  a0c9dc:	10800617 	ldw	r2,24(r2)
  a0c9e0:	e17ffc17 	ldw	r5,-16(fp)
  a0c9e4:	e1bffd17 	ldw	r6,-12(fp)
  a0c9e8:	e13ffa17 	ldw	r4,-24(fp)
  a0c9ec:	103ee83a 	callr	r2
  a0c9f0:	e0bff915 	stw	r2,-28(fp)
  a0c9f4:	e0bff917 	ldw	r2,-28(fp)
  a0c9f8:	1004403a 	cmpge	r2,r2,zero
  a0c9fc:	1000071e 	bne	r2,zero,a0ca1c <write+0xd0>
      {
        ALT_ERRNO = -rval;
  a0ca00:	0a0ca6c0 	call	a0ca6c <alt_get_errno>
  a0ca04:	e0fff917 	ldw	r3,-28(fp)
  a0ca08:	00c7c83a 	sub	r3,zero,r3
  a0ca0c:	10c00015 	stw	r3,0(r2)
        return -1;
  a0ca10:	00bfffc4 	movi	r2,-1
  a0ca14:	e0bffe15 	stw	r2,-8(fp)
  a0ca18:	00000e06 	br	a0ca54 <write+0x108>
      }
      return rval;
  a0ca1c:	e0bff917 	ldw	r2,-28(fp)
  a0ca20:	e0bffe15 	stw	r2,-8(fp)
  a0ca24:	00000b06 	br	a0ca54 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  a0ca28:	0a0ca6c0 	call	a0ca6c <alt_get_errno>
  a0ca2c:	1007883a 	mov	r3,r2
  a0ca30:	00800344 	movi	r2,13
  a0ca34:	18800015 	stw	r2,0(r3)
  a0ca38:	00000406 	br	a0ca4c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  a0ca3c:	0a0ca6c0 	call	a0ca6c <alt_get_errno>
  a0ca40:	1007883a 	mov	r3,r2
  a0ca44:	00801444 	movi	r2,81
  a0ca48:	18800015 	stw	r2,0(r3)
  }
  return -1;
  a0ca4c:	00bfffc4 	movi	r2,-1
  a0ca50:	e0bffe15 	stw	r2,-8(fp)
  a0ca54:	e0bffe17 	ldw	r2,-8(fp)
}
  a0ca58:	e037883a 	mov	sp,fp
  a0ca5c:	dfc00117 	ldw	ra,4(sp)
  a0ca60:	df000017 	ldw	fp,0(sp)
  a0ca64:	dec00204 	addi	sp,sp,8
  a0ca68:	f800283a 	ret

00a0ca6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0ca6c:	defffd04 	addi	sp,sp,-12
  a0ca70:	dfc00215 	stw	ra,8(sp)
  a0ca74:	df000115 	stw	fp,4(sp)
  a0ca78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0ca7c:	00802874 	movhi	r2,161
  a0ca80:	108af704 	addi	r2,r2,11228
  a0ca84:	10800017 	ldw	r2,0(r2)
  a0ca88:	1005003a 	cmpeq	r2,r2,zero
  a0ca8c:	1000061e 	bne	r2,zero,a0caa8 <alt_get_errno+0x3c>
  a0ca90:	00802874 	movhi	r2,161
  a0ca94:	108af704 	addi	r2,r2,11228
  a0ca98:	10800017 	ldw	r2,0(r2)
  a0ca9c:	103ee83a 	callr	r2
  a0caa0:	e0bfff15 	stw	r2,-4(fp)
  a0caa4:	00000306 	br	a0cab4 <alt_get_errno+0x48>
  a0caa8:	00802874 	movhi	r2,161
  a0caac:	1091fc04 	addi	r2,r2,18416
  a0cab0:	e0bfff15 	stw	r2,-4(fp)
  a0cab4:	e0bfff17 	ldw	r2,-4(fp)
}
  a0cab8:	e037883a 	mov	sp,fp
  a0cabc:	dfc00117 	ldw	ra,4(sp)
  a0cac0:	df000017 	ldw	fp,0(sp)
  a0cac4:	dec00204 	addi	sp,sp,8
  a0cac8:	f800283a 	ret

00a0cacc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  a0cacc:	defffd04 	addi	sp,sp,-12
  a0cad0:	dfc00215 	stw	ra,8(sp)
  a0cad4:	df000115 	stw	fp,4(sp)
  a0cad8:	df000104 	addi	fp,sp,4
  a0cadc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_1, cpu_1);
  a0cae0:	0a104240 	call	a10424 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  a0cae4:	00800044 	movi	r2,1
  a0cae8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  a0caec:	e037883a 	mov	sp,fp
  a0caf0:	dfc00117 	ldw	ra,4(sp)
  a0caf4:	df000017 	ldw	fp,0(sp)
  a0caf8:	dec00204 	addi	sp,sp,8
  a0cafc:	f800283a 	ret

00a0cb00 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  a0cb00:	defffd04 	addi	sp,sp,-12
  a0cb04:	dfc00215 	stw	ra,8(sp)
  a0cb08:	df000115 	stw	fp,4(sp)
  a0cb0c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
  a0cb10:	01002874 	movhi	r4,161
  a0cb14:	21068404 	addi	r4,r4,6672
  a0cb18:	000b883a 	mov	r5,zero
  a0cb1c:	01800044 	movi	r6,1
  a0cb20:	0a0cef80 	call	a0cef8 <altera_avalon_jtag_uart_init>
  a0cb24:	01002874 	movhi	r4,161
  a0cb28:	21067a04 	addi	r4,r4,6632
  a0cb2c:	0a0cd780 	call	a0cd78 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
  a0cb30:	01002874 	movhi	r4,161
  a0cb34:	210a9204 	addi	r4,r4,10824
  a0cb38:	0a0d85c0 	call	a0d85c <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
  a0cb3c:	01002874 	movhi	r4,161
  a0cb40:	210aa104 	addi	r4,r4,10884
  a0cb44:	0a0d85c0 	call	a0d85c <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
  a0cb48:	01002874 	movhi	r4,161
  a0cb4c:	210ab004 	addi	r4,r4,10944
  a0cb50:	0a0d85c0 	call	a0d85c <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
  a0cb54:	01002874 	movhi	r4,161
  a0cb58:	210abf04 	addi	r4,r4,11004
  a0cb5c:	0a0d85c0 	call	a0d85c <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
  a0cb60:	0007883a 	mov	r3,zero
  a0cb64:	00800044 	movi	r2,1
  a0cb68:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  a0cb6c:	00802874 	movhi	r2,161
  a0cb70:	108ace04 	addi	r2,r2,11064
  a0cb74:	10800a17 	ldw	r2,40(r2)
  a0cb78:	10800017 	ldw	r2,0(r2)
  a0cb7c:	1007883a 	mov	r3,r2
  a0cb80:	00802874 	movhi	r2,161
  a0cb84:	108ace04 	addi	r2,r2,11064
  a0cb88:	10c00b15 	stw	r3,44(r2)
  a0cb8c:	00802874 	movhi	r2,161
  a0cb90:	108ace04 	addi	r2,r2,11064
  a0cb94:	10800a17 	ldw	r2,40(r2)
  a0cb98:	10800104 	addi	r2,r2,4
  a0cb9c:	10800017 	ldw	r2,0(r2)
  a0cba0:	1007883a 	mov	r3,r2
  a0cba4:	00802874 	movhi	r2,161
  a0cba8:	108ace04 	addi	r2,r2,11064
  a0cbac:	10c00c15 	stw	r3,48(r2)
  a0cbb0:	00802874 	movhi	r2,161
  a0cbb4:	108ace04 	addi	r2,r2,11064
  a0cbb8:	10800a17 	ldw	r2,40(r2)
  a0cbbc:	10800204 	addi	r2,r2,8
  a0cbc0:	10800017 	ldw	r2,0(r2)
  a0cbc4:	10ffffcc 	andi	r3,r2,65535
  a0cbc8:	00802874 	movhi	r2,161
  a0cbcc:	108ace04 	addi	r2,r2,11064
  a0cbd0:	10c00f15 	stw	r3,60(r2)
  a0cbd4:	00802874 	movhi	r2,161
  a0cbd8:	108ace04 	addi	r2,r2,11064
  a0cbdc:	10800a17 	ldw	r2,40(r2)
  a0cbe0:	10800204 	addi	r2,r2,8
  a0cbe4:	10800017 	ldw	r2,0(r2)
  a0cbe8:	1005d43a 	srai	r2,r2,16
  a0cbec:	10ffffcc 	andi	r3,r2,65535
  a0cbf0:	00802874 	movhi	r2,161
  a0cbf4:	108ace04 	addi	r2,r2,11064
  a0cbf8:	10c01015 	stw	r3,64(r2)
  a0cbfc:	00802874 	movhi	r2,161
  a0cc00:	108ace04 	addi	r2,r2,11064
  a0cc04:	10800a17 	ldw	r2,40(r2)
  a0cc08:	10800304 	addi	r2,r2,12
  a0cc0c:	10800017 	ldw	r2,0(r2)
  a0cc10:	1005d07a 	srai	r2,r2,1
  a0cc14:	10c0004c 	andi	r3,r2,1
  a0cc18:	00802874 	movhi	r2,161
  a0cc1c:	108ace04 	addi	r2,r2,11064
  a0cc20:	10c00d15 	stw	r3,52(r2)
  a0cc24:	00802874 	movhi	r2,161
  a0cc28:	108ace04 	addi	r2,r2,11064
  a0cc2c:	10800a17 	ldw	r2,40(r2)
  a0cc30:	10800304 	addi	r2,r2,12
  a0cc34:	10800017 	ldw	r2,0(r2)
  a0cc38:	1005d13a 	srai	r2,r2,4
  a0cc3c:	10c003cc 	andi	r3,r2,15
  a0cc40:	00802874 	movhi	r2,161
  a0cc44:	108ace04 	addi	r2,r2,11064
  a0cc48:	10c00e15 	stw	r3,56(r2)
  a0cc4c:	00802874 	movhi	r2,161
  a0cc50:	108ace04 	addi	r2,r2,11064
  a0cc54:	10800a17 	ldw	r2,40(r2)
  a0cc58:	10800304 	addi	r2,r2,12
  a0cc5c:	10800017 	ldw	r2,0(r2)
  a0cc60:	1005d43a 	srai	r2,r2,16
  a0cc64:	1007883a 	mov	r3,r2
  a0cc68:	00bfffc4 	movi	r2,-1
  a0cc6c:	1884703a 	and	r2,r3,r2
  a0cc70:	e0bfff45 	stb	r2,-3(fp)
  a0cc74:	00802874 	movhi	r2,161
  a0cc78:	108ace04 	addi	r2,r2,11064
  a0cc7c:	10800a17 	ldw	r2,40(r2)
  a0cc80:	10800304 	addi	r2,r2,12
  a0cc84:	10800017 	ldw	r2,0(r2)
  a0cc88:	1005d63a 	srai	r2,r2,24
  a0cc8c:	1007883a 	mov	r3,r2
  a0cc90:	00bfffc4 	movi	r2,-1
  a0cc94:	1884703a 	and	r2,r3,r2
  a0cc98:	e0bfff05 	stb	r2,-4(fp)
  a0cc9c:	00802874 	movhi	r2,161
  a0cca0:	108ace04 	addi	r2,r2,11064
  a0cca4:	10800e17 	ldw	r2,56(r2)
  a0cca8:	10800058 	cmpnei	r2,r2,1
  a0ccac:	1000041e 	bne	r2,zero,a0ccc0 <alt_sys_init+0x1c0>
  a0ccb0:	00802874 	movhi	r2,161
  a0ccb4:	108ace04 	addi	r2,r2,11064
  a0ccb8:	10001115 	stw	zero,68(r2)
  a0ccbc:	00000e06 	br	a0ccf8 <alt_sys_init+0x1f8>
  a0ccc0:	00802874 	movhi	r2,161
  a0ccc4:	108ace04 	addi	r2,r2,11064
  a0ccc8:	10800e17 	ldw	r2,56(r2)
  a0cccc:	10800098 	cmpnei	r2,r2,2
  a0ccd0:	1000051e 	bne	r2,zero,a0cce8 <alt_sys_init+0x1e8>
  a0ccd4:	00c02874 	movhi	r3,161
  a0ccd8:	18cace04 	addi	r3,r3,11064
  a0ccdc:	00800044 	movi	r2,1
  a0cce0:	18801115 	stw	r2,68(r3)
  a0cce4:	00000406 	br	a0ccf8 <alt_sys_init+0x1f8>
  a0cce8:	00c02874 	movhi	r3,161
  a0ccec:	18cace04 	addi	r3,r3,11064
  a0ccf0:	00800084 	movi	r2,2
  a0ccf4:	18801115 	stw	r2,68(r3)
  a0ccf8:	e0ffff43 	ldbu	r3,-3(fp)
  a0ccfc:	00800804 	movi	r2,32
  a0cd00:	10c7c83a 	sub	r3,r2,r3
  a0cd04:	00bfffc4 	movi	r2,-1
  a0cd08:	10c6d83a 	srl	r3,r2,r3
  a0cd0c:	00802874 	movhi	r2,161
  a0cd10:	108ace04 	addi	r2,r2,11064
  a0cd14:	10c01215 	stw	r3,72(r2)
  a0cd18:	e0ffff43 	ldbu	r3,-3(fp)
  a0cd1c:	00802874 	movhi	r2,161
  a0cd20:	108ace04 	addi	r2,r2,11064
  a0cd24:	10801117 	ldw	r2,68(r2)
  a0cd28:	1887883a 	add	r3,r3,r2
  a0cd2c:	00802874 	movhi	r2,161
  a0cd30:	108ace04 	addi	r2,r2,11064
  a0cd34:	10c01315 	stw	r3,76(r2)
  a0cd38:	e0ffff03 	ldbu	r3,-4(fp)
  a0cd3c:	00800804 	movi	r2,32
  a0cd40:	10c7c83a 	sub	r3,r2,r3
  a0cd44:	00bfffc4 	movi	r2,-1
  a0cd48:	10c6d83a 	srl	r3,r2,r3
  a0cd4c:	00802874 	movhi	r2,161
  a0cd50:	108ace04 	addi	r2,r2,11064
  a0cd54:	10c01415 	stw	r3,80(r2)
  a0cd58:	01002874 	movhi	r4,161
  a0cd5c:	210ace04 	addi	r4,r4,11064
  a0cd60:	0a0cd780 	call	a0cd78 <alt_dev_reg>
}
  a0cd64:	e037883a 	mov	sp,fp
  a0cd68:	dfc00117 	ldw	ra,4(sp)
  a0cd6c:	df000017 	ldw	fp,0(sp)
  a0cd70:	dec00204 	addi	sp,sp,8
  a0cd74:	f800283a 	ret

00a0cd78 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  a0cd78:	defffd04 	addi	sp,sp,-12
  a0cd7c:	dfc00215 	stw	ra,8(sp)
  a0cd80:	df000115 	stw	fp,4(sp)
  a0cd84:	df000104 	addi	fp,sp,4
  a0cd88:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  a0cd8c:	e13fff17 	ldw	r4,-4(fp)
  a0cd90:	01402874 	movhi	r5,161
  a0cd94:	294af404 	addi	r5,r5,11216
  a0cd98:	0a0f9140 	call	a0f914 <alt_dev_llist_insert>
}
  a0cd9c:	e037883a 	mov	sp,fp
  a0cda0:	dfc00117 	ldw	ra,4(sp)
  a0cda4:	df000017 	ldw	fp,0(sp)
  a0cda8:	dec00204 	addi	sp,sp,8
  a0cdac:	f800283a 	ret

00a0cdb0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  a0cdb0:	defffa04 	addi	sp,sp,-24
  a0cdb4:	dfc00515 	stw	ra,20(sp)
  a0cdb8:	df000415 	stw	fp,16(sp)
  a0cdbc:	df000404 	addi	fp,sp,16
  a0cdc0:	e13ffd15 	stw	r4,-12(fp)
  a0cdc4:	e17ffe15 	stw	r5,-8(fp)
  a0cdc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  a0cdcc:	e0bffd17 	ldw	r2,-12(fp)
  a0cdd0:	10800017 	ldw	r2,0(r2)
  a0cdd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  a0cdd8:	e0bffc17 	ldw	r2,-16(fp)
  a0cddc:	11000a04 	addi	r4,r2,40
  a0cde0:	e0bffd17 	ldw	r2,-12(fp)
  a0cde4:	11c00217 	ldw	r7,8(r2)
  a0cde8:	e17ffe17 	ldw	r5,-8(fp)
  a0cdec:	e1bfff17 	ldw	r6,-4(fp)
  a0cdf0:	0a0d3f80 	call	a0d3f8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  a0cdf4:	e037883a 	mov	sp,fp
  a0cdf8:	dfc00117 	ldw	ra,4(sp)
  a0cdfc:	df000017 	ldw	fp,0(sp)
  a0ce00:	dec00204 	addi	sp,sp,8
  a0ce04:	f800283a 	ret

00a0ce08 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  a0ce08:	defffa04 	addi	sp,sp,-24
  a0ce0c:	dfc00515 	stw	ra,20(sp)
  a0ce10:	df000415 	stw	fp,16(sp)
  a0ce14:	df000404 	addi	fp,sp,16
  a0ce18:	e13ffd15 	stw	r4,-12(fp)
  a0ce1c:	e17ffe15 	stw	r5,-8(fp)
  a0ce20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  a0ce24:	e0bffd17 	ldw	r2,-12(fp)
  a0ce28:	10800017 	ldw	r2,0(r2)
  a0ce2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  a0ce30:	e0bffc17 	ldw	r2,-16(fp)
  a0ce34:	11000a04 	addi	r4,r2,40
  a0ce38:	e0bffd17 	ldw	r2,-12(fp)
  a0ce3c:	11c00217 	ldw	r7,8(r2)
  a0ce40:	e17ffe17 	ldw	r5,-8(fp)
  a0ce44:	e1bfff17 	ldw	r6,-4(fp)
  a0ce48:	0a0d61c0 	call	a0d61c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  a0ce4c:	e037883a 	mov	sp,fp
  a0ce50:	dfc00117 	ldw	ra,4(sp)
  a0ce54:	df000017 	ldw	fp,0(sp)
  a0ce58:	dec00204 	addi	sp,sp,8
  a0ce5c:	f800283a 	ret

00a0ce60 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  a0ce60:	defffc04 	addi	sp,sp,-16
  a0ce64:	dfc00315 	stw	ra,12(sp)
  a0ce68:	df000215 	stw	fp,8(sp)
  a0ce6c:	df000204 	addi	fp,sp,8
  a0ce70:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  a0ce74:	e0bfff17 	ldw	r2,-4(fp)
  a0ce78:	10800017 	ldw	r2,0(r2)
  a0ce7c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  a0ce80:	e0bffe17 	ldw	r2,-8(fp)
  a0ce84:	11000a04 	addi	r4,r2,40
  a0ce88:	e0bfff17 	ldw	r2,-4(fp)
  a0ce8c:	11400217 	ldw	r5,8(r2)
  a0ce90:	0a0d2900 	call	a0d290 <altera_avalon_jtag_uart_close>
}
  a0ce94:	e037883a 	mov	sp,fp
  a0ce98:	dfc00117 	ldw	ra,4(sp)
  a0ce9c:	df000017 	ldw	fp,0(sp)
  a0cea0:	dec00204 	addi	sp,sp,8
  a0cea4:	f800283a 	ret

00a0cea8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  a0cea8:	defffa04 	addi	sp,sp,-24
  a0ceac:	dfc00515 	stw	ra,20(sp)
  a0ceb0:	df000415 	stw	fp,16(sp)
  a0ceb4:	df000404 	addi	fp,sp,16
  a0ceb8:	e13ffd15 	stw	r4,-12(fp)
  a0cebc:	e17ffe15 	stw	r5,-8(fp)
  a0cec0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  a0cec4:	e0bffd17 	ldw	r2,-12(fp)
  a0cec8:	10800017 	ldw	r2,0(r2)
  a0cecc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  a0ced0:	e0bffc17 	ldw	r2,-16(fp)
  a0ced4:	11000a04 	addi	r4,r2,40
  a0ced8:	e17ffe17 	ldw	r5,-8(fp)
  a0cedc:	e1bfff17 	ldw	r6,-4(fp)
  a0cee0:	0a0d3040 	call	a0d304 <altera_avalon_jtag_uart_ioctl>
}
  a0cee4:	e037883a 	mov	sp,fp
  a0cee8:	dfc00117 	ldw	ra,4(sp)
  a0ceec:	df000017 	ldw	fp,0(sp)
  a0cef0:	dec00204 	addi	sp,sp,8
  a0cef4:	f800283a 	ret

00a0cef8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  a0cef8:	defffa04 	addi	sp,sp,-24
  a0cefc:	dfc00515 	stw	ra,20(sp)
  a0cf00:	df000415 	stw	fp,16(sp)
  a0cf04:	df000404 	addi	fp,sp,16
  a0cf08:	e13ffd15 	stw	r4,-12(fp)
  a0cf0c:	e17ffe15 	stw	r5,-8(fp)
  a0cf10:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  a0cf14:	e0fffd17 	ldw	r3,-12(fp)
  a0cf18:	00800044 	movi	r2,1
  a0cf1c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  a0cf20:	e0bffd17 	ldw	r2,-12(fp)
  a0cf24:	10800017 	ldw	r2,0(r2)
  a0cf28:	11000104 	addi	r4,r2,4
  a0cf2c:	e0bffd17 	ldw	r2,-12(fp)
  a0cf30:	10800817 	ldw	r2,32(r2)
  a0cf34:	1007883a 	mov	r3,r2
  a0cf38:	2005883a 	mov	r2,r4
  a0cf3c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  a0cf40:	e13ffe17 	ldw	r4,-8(fp)
  a0cf44:	e17fff17 	ldw	r5,-4(fp)
  a0cf48:	d8000015 	stw	zero,0(sp)
  a0cf4c:	01802874 	movhi	r6,161
  a0cf50:	31b3ee04 	addi	r6,r6,-12360
  a0cf54:	e1fffd17 	ldw	r7,-12(fp)
  a0cf58:	0a0fbb40 	call	a0fbb4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  a0cf5c:	e0bffd17 	ldw	r2,-12(fp)
  a0cf60:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  a0cf64:	e0bffd17 	ldw	r2,-12(fp)
  a0cf68:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  a0cf6c:	00802874 	movhi	r2,161
  a0cf70:	10920104 	addi	r2,r2,18436
  a0cf74:	10800017 	ldw	r2,0(r2)
  a0cf78:	100b883a 	mov	r5,r2
  a0cf7c:	01802874 	movhi	r6,161
  a0cf80:	31b47804 	addi	r6,r6,-11808
  a0cf84:	e1fffd17 	ldw	r7,-12(fp)
  a0cf88:	0a0f77c0 	call	a0f77c <alt_alarm_start>
  a0cf8c:	1004403a 	cmpge	r2,r2,zero
  a0cf90:	1000041e 	bne	r2,zero,a0cfa4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  a0cf94:	e0fffd17 	ldw	r3,-12(fp)
  a0cf98:	00a00034 	movhi	r2,32768
  a0cf9c:	10bfffc4 	addi	r2,r2,-1
  a0cfa0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  a0cfa4:	e037883a 	mov	sp,fp
  a0cfa8:	dfc00117 	ldw	ra,4(sp)
  a0cfac:	df000017 	ldw	fp,0(sp)
  a0cfb0:	dec00204 	addi	sp,sp,8
  a0cfb4:	f800283a 	ret

00a0cfb8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  a0cfb8:	defff804 	addi	sp,sp,-32
  a0cfbc:	df000715 	stw	fp,28(sp)
  a0cfc0:	df000704 	addi	fp,sp,28
  a0cfc4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  a0cfc8:	e0bfff17 	ldw	r2,-4(fp)
  a0cfcc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  a0cfd0:	e0bffe17 	ldw	r2,-8(fp)
  a0cfd4:	10800017 	ldw	r2,0(r2)
  a0cfd8:	e0bffd15 	stw	r2,-12(fp)
  a0cfdc:	00000006 	br	a0cfe0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  a0cfe0:	e0bffd17 	ldw	r2,-12(fp)
  a0cfe4:	10800104 	addi	r2,r2,4
  a0cfe8:	10800037 	ldwio	r2,0(r2)
  a0cfec:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  a0cff0:	e0bffc17 	ldw	r2,-16(fp)
  a0cff4:	1080c00c 	andi	r2,r2,768
  a0cff8:	1005003a 	cmpeq	r2,r2,zero
  a0cffc:	1000741e 	bne	r2,zero,a0d1d0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  a0d000:	e0bffc17 	ldw	r2,-16(fp)
  a0d004:	1080400c 	andi	r2,r2,256
  a0d008:	1005003a 	cmpeq	r2,r2,zero
  a0d00c:	1000351e 	bne	r2,zero,a0d0e4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  a0d010:	00800074 	movhi	r2,1
  a0d014:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  a0d018:	e0bffe17 	ldw	r2,-8(fp)
  a0d01c:	10800a17 	ldw	r2,40(r2)
  a0d020:	10800044 	addi	r2,r2,1
  a0d024:	1081ffcc 	andi	r2,r2,2047
  a0d028:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  a0d02c:	e0bffe17 	ldw	r2,-8(fp)
  a0d030:	10c00b17 	ldw	r3,44(r2)
  a0d034:	e0bffa17 	ldw	r2,-24(fp)
  a0d038:	18801626 	beq	r3,r2,a0d094 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  a0d03c:	e0bffd17 	ldw	r2,-12(fp)
  a0d040:	10800037 	ldwio	r2,0(r2)
  a0d044:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  a0d048:	e0bffb17 	ldw	r2,-20(fp)
  a0d04c:	10a0000c 	andi	r2,r2,32768
  a0d050:	1005003a 	cmpeq	r2,r2,zero
  a0d054:	10000f1e 	bne	r2,zero,a0d094 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  a0d058:	e0bffe17 	ldw	r2,-8(fp)
  a0d05c:	10c00a17 	ldw	r3,40(r2)
  a0d060:	e0bffb17 	ldw	r2,-20(fp)
  a0d064:	1009883a 	mov	r4,r2
  a0d068:	e0bffe17 	ldw	r2,-8(fp)
  a0d06c:	1885883a 	add	r2,r3,r2
  a0d070:	10800e04 	addi	r2,r2,56
  a0d074:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  a0d078:	e0bffe17 	ldw	r2,-8(fp)
  a0d07c:	10800a17 	ldw	r2,40(r2)
  a0d080:	10800044 	addi	r2,r2,1
  a0d084:	10c1ffcc 	andi	r3,r2,2047
  a0d088:	e0bffe17 	ldw	r2,-8(fp)
  a0d08c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  a0d090:	003fe106 	br	a0d018 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  a0d094:	e0bffb17 	ldw	r2,-20(fp)
  a0d098:	10bfffec 	andhi	r2,r2,65535
  a0d09c:	1005003a 	cmpeq	r2,r2,zero
  a0d0a0:	1000101e 	bne	r2,zero,a0d0e4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  a0d0a4:	e0bffe17 	ldw	r2,-8(fp)
  a0d0a8:	10c00817 	ldw	r3,32(r2)
  a0d0ac:	00bfff84 	movi	r2,-2
  a0d0b0:	1886703a 	and	r3,r3,r2
  a0d0b4:	e0bffe17 	ldw	r2,-8(fp)
  a0d0b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  a0d0bc:	e0bffd17 	ldw	r2,-12(fp)
  a0d0c0:	11000104 	addi	r4,r2,4
  a0d0c4:	e0bffe17 	ldw	r2,-8(fp)
  a0d0c8:	10800817 	ldw	r2,32(r2)
  a0d0cc:	1007883a 	mov	r3,r2
  a0d0d0:	2005883a 	mov	r2,r4
  a0d0d4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  a0d0d8:	e0bffd17 	ldw	r2,-12(fp)
  a0d0dc:	10800104 	addi	r2,r2,4
  a0d0e0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  a0d0e4:	e0bffc17 	ldw	r2,-16(fp)
  a0d0e8:	1080800c 	andi	r2,r2,512
  a0d0ec:	1005003a 	cmpeq	r2,r2,zero
  a0d0f0:	103fbb1e 	bne	r2,zero,a0cfe0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  a0d0f4:	e0bffc17 	ldw	r2,-16(fp)
  a0d0f8:	10bfffec 	andhi	r2,r2,65535
  a0d0fc:	1004d43a 	srli	r2,r2,16
  a0d100:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  a0d104:	00001506 	br	a0d15c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  a0d108:	e13ffd17 	ldw	r4,-12(fp)
  a0d10c:	e0bffe17 	ldw	r2,-8(fp)
  a0d110:	10c00d17 	ldw	r3,52(r2)
  a0d114:	e0bffe17 	ldw	r2,-8(fp)
  a0d118:	1885883a 	add	r2,r3,r2
  a0d11c:	10820e04 	addi	r2,r2,2104
  a0d120:	10800003 	ldbu	r2,0(r2)
  a0d124:	10c03fcc 	andi	r3,r2,255
  a0d128:	18c0201c 	xori	r3,r3,128
  a0d12c:	18ffe004 	addi	r3,r3,-128
  a0d130:	2005883a 	mov	r2,r4
  a0d134:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  a0d138:	e0bffe17 	ldw	r2,-8(fp)
  a0d13c:	10800d17 	ldw	r2,52(r2)
  a0d140:	10800044 	addi	r2,r2,1
  a0d144:	10c1ffcc 	andi	r3,r2,2047
  a0d148:	e0bffe17 	ldw	r2,-8(fp)
  a0d14c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  a0d150:	e0bff917 	ldw	r2,-28(fp)
  a0d154:	10bfffc4 	addi	r2,r2,-1
  a0d158:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  a0d15c:	e0bff917 	ldw	r2,-28(fp)
  a0d160:	1005003a 	cmpeq	r2,r2,zero
  a0d164:	1000051e 	bne	r2,zero,a0d17c <altera_avalon_jtag_uart_irq+0x1c4>
  a0d168:	e0bffe17 	ldw	r2,-8(fp)
  a0d16c:	10c00d17 	ldw	r3,52(r2)
  a0d170:	e0bffe17 	ldw	r2,-8(fp)
  a0d174:	10800c17 	ldw	r2,48(r2)
  a0d178:	18bfe31e 	bne	r3,r2,a0d108 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  a0d17c:	e0bff917 	ldw	r2,-28(fp)
  a0d180:	1005003a 	cmpeq	r2,r2,zero
  a0d184:	103f961e 	bne	r2,zero,a0cfe0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  a0d188:	e0bffe17 	ldw	r2,-8(fp)
  a0d18c:	10c00817 	ldw	r3,32(r2)
  a0d190:	00bfff44 	movi	r2,-3
  a0d194:	1886703a 	and	r3,r3,r2
  a0d198:	e0bffe17 	ldw	r2,-8(fp)
  a0d19c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  a0d1a0:	e0bffe17 	ldw	r2,-8(fp)
  a0d1a4:	10800017 	ldw	r2,0(r2)
  a0d1a8:	11000104 	addi	r4,r2,4
  a0d1ac:	e0bffe17 	ldw	r2,-8(fp)
  a0d1b0:	10800817 	ldw	r2,32(r2)
  a0d1b4:	1007883a 	mov	r3,r2
  a0d1b8:	2005883a 	mov	r2,r4
  a0d1bc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  a0d1c0:	e0bffd17 	ldw	r2,-12(fp)
  a0d1c4:	10800104 	addi	r2,r2,4
  a0d1c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  a0d1cc:	003f8406 	br	a0cfe0 <altera_avalon_jtag_uart_irq+0x28>
}
  a0d1d0:	e037883a 	mov	sp,fp
  a0d1d4:	df000017 	ldw	fp,0(sp)
  a0d1d8:	dec00104 	addi	sp,sp,4
  a0d1dc:	f800283a 	ret

00a0d1e0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  a0d1e0:	defffc04 	addi	sp,sp,-16
  a0d1e4:	df000315 	stw	fp,12(sp)
  a0d1e8:	df000304 	addi	fp,sp,12
  a0d1ec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  a0d1f0:	e0bfff17 	ldw	r2,-4(fp)
  a0d1f4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  a0d1f8:	e0bffe17 	ldw	r2,-8(fp)
  a0d1fc:	10800017 	ldw	r2,0(r2)
  a0d200:	10800104 	addi	r2,r2,4
  a0d204:	10800037 	ldwio	r2,0(r2)
  a0d208:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  a0d20c:	e0bffd17 	ldw	r2,-12(fp)
  a0d210:	1081000c 	andi	r2,r2,1024
  a0d214:	1005003a 	cmpeq	r2,r2,zero
  a0d218:	10000c1e 	bne	r2,zero,a0d24c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  a0d21c:	e0bffe17 	ldw	r2,-8(fp)
  a0d220:	10800017 	ldw	r2,0(r2)
  a0d224:	11000104 	addi	r4,r2,4
  a0d228:	e0bffe17 	ldw	r2,-8(fp)
  a0d22c:	10800817 	ldw	r2,32(r2)
  a0d230:	10810014 	ori	r2,r2,1024
  a0d234:	1007883a 	mov	r3,r2
  a0d238:	2005883a 	mov	r2,r4
  a0d23c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  a0d240:	e0bffe17 	ldw	r2,-8(fp)
  a0d244:	10000915 	stw	zero,36(r2)
  a0d248:	00000a06 	br	a0d274 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  a0d24c:	e0bffe17 	ldw	r2,-8(fp)
  a0d250:	10c00917 	ldw	r3,36(r2)
  a0d254:	00a00034 	movhi	r2,32768
  a0d258:	10bfff04 	addi	r2,r2,-4
  a0d25c:	10c00536 	bltu	r2,r3,a0d274 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  a0d260:	e0bffe17 	ldw	r2,-8(fp)
  a0d264:	10800917 	ldw	r2,36(r2)
  a0d268:	10c00044 	addi	r3,r2,1
  a0d26c:	e0bffe17 	ldw	r2,-8(fp)
  a0d270:	10c00915 	stw	r3,36(r2)
  a0d274:	00802874 	movhi	r2,161
  a0d278:	10920104 	addi	r2,r2,18436
  a0d27c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  a0d280:	e037883a 	mov	sp,fp
  a0d284:	df000017 	ldw	fp,0(sp)
  a0d288:	dec00104 	addi	sp,sp,4
  a0d28c:	f800283a 	ret

00a0d290 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  a0d290:	defffc04 	addi	sp,sp,-16
  a0d294:	df000315 	stw	fp,12(sp)
  a0d298:	df000304 	addi	fp,sp,12
  a0d29c:	e13ffd15 	stw	r4,-12(fp)
  a0d2a0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  a0d2a4:	00000706 	br	a0d2c4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  a0d2a8:	e0bffe17 	ldw	r2,-8(fp)
  a0d2ac:	1090000c 	andi	r2,r2,16384
  a0d2b0:	1005003a 	cmpeq	r2,r2,zero
  a0d2b4:	1000031e 	bne	r2,zero,a0d2c4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  a0d2b8:	00bffd44 	movi	r2,-11
  a0d2bc:	e0bfff15 	stw	r2,-4(fp)
  a0d2c0:	00000b06 	br	a0d2f0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  a0d2c4:	e0bffd17 	ldw	r2,-12(fp)
  a0d2c8:	10c00d17 	ldw	r3,52(r2)
  a0d2cc:	e0bffd17 	ldw	r2,-12(fp)
  a0d2d0:	10800c17 	ldw	r2,48(r2)
  a0d2d4:	18800526 	beq	r3,r2,a0d2ec <altera_avalon_jtag_uart_close+0x5c>
  a0d2d8:	e0bffd17 	ldw	r2,-12(fp)
  a0d2dc:	10c00917 	ldw	r3,36(r2)
  a0d2e0:	e0bffd17 	ldw	r2,-12(fp)
  a0d2e4:	10800117 	ldw	r2,4(r2)
  a0d2e8:	18bfef36 	bltu	r3,r2,a0d2a8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  a0d2ec:	e03fff15 	stw	zero,-4(fp)
  a0d2f0:	e0bfff17 	ldw	r2,-4(fp)
}
  a0d2f4:	e037883a 	mov	sp,fp
  a0d2f8:	df000017 	ldw	fp,0(sp)
  a0d2fc:	dec00104 	addi	sp,sp,4
  a0d300:	f800283a 	ret

00a0d304 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  a0d304:	defff804 	addi	sp,sp,-32
  a0d308:	df000715 	stw	fp,28(sp)
  a0d30c:	df000704 	addi	fp,sp,28
  a0d310:	e13ffb15 	stw	r4,-20(fp)
  a0d314:	e17ffc15 	stw	r5,-16(fp)
  a0d318:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  a0d31c:	00bff9c4 	movi	r2,-25
  a0d320:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  a0d324:	e0bffc17 	ldw	r2,-16(fp)
  a0d328:	e0bfff15 	stw	r2,-4(fp)
  a0d32c:	e0ffff17 	ldw	r3,-4(fp)
  a0d330:	189a8060 	cmpeqi	r2,r3,27137
  a0d334:	1000041e 	bne	r2,zero,a0d348 <altera_avalon_jtag_uart_ioctl+0x44>
  a0d338:	e0ffff17 	ldw	r3,-4(fp)
  a0d33c:	189a80a0 	cmpeqi	r2,r3,27138
  a0d340:	10001b1e 	bne	r2,zero,a0d3b0 <altera_avalon_jtag_uart_ioctl+0xac>
  a0d344:	00002706 	br	a0d3e4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  a0d348:	e0bffb17 	ldw	r2,-20(fp)
  a0d34c:	10c00117 	ldw	r3,4(r2)
  a0d350:	00a00034 	movhi	r2,32768
  a0d354:	10bfffc4 	addi	r2,r2,-1
  a0d358:	18802226 	beq	r3,r2,a0d3e4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  a0d35c:	e0bffd17 	ldw	r2,-12(fp)
  a0d360:	10800017 	ldw	r2,0(r2)
  a0d364:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  a0d368:	e0bff917 	ldw	r2,-28(fp)
  a0d36c:	10800090 	cmplti	r2,r2,2
  a0d370:	1000071e 	bne	r2,zero,a0d390 <altera_avalon_jtag_uart_ioctl+0x8c>
  a0d374:	e0fff917 	ldw	r3,-28(fp)
  a0d378:	00a00034 	movhi	r2,32768
  a0d37c:	10bfffc4 	addi	r2,r2,-1
  a0d380:	18800326 	beq	r3,r2,a0d390 <altera_avalon_jtag_uart_ioctl+0x8c>
  a0d384:	e0bff917 	ldw	r2,-28(fp)
  a0d388:	e0bffe15 	stw	r2,-8(fp)
  a0d38c:	00000306 	br	a0d39c <altera_avalon_jtag_uart_ioctl+0x98>
  a0d390:	00e00034 	movhi	r3,32768
  a0d394:	18ffff84 	addi	r3,r3,-2
  a0d398:	e0fffe15 	stw	r3,-8(fp)
  a0d39c:	e0bffb17 	ldw	r2,-20(fp)
  a0d3a0:	e0fffe17 	ldw	r3,-8(fp)
  a0d3a4:	10c00115 	stw	r3,4(r2)
      rc = 0;
  a0d3a8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  a0d3ac:	00000d06 	br	a0d3e4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  a0d3b0:	e0bffb17 	ldw	r2,-20(fp)
  a0d3b4:	10c00117 	ldw	r3,4(r2)
  a0d3b8:	00a00034 	movhi	r2,32768
  a0d3bc:	10bfffc4 	addi	r2,r2,-1
  a0d3c0:	18800826 	beq	r3,r2,a0d3e4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  a0d3c4:	e13ffd17 	ldw	r4,-12(fp)
  a0d3c8:	e0bffb17 	ldw	r2,-20(fp)
  a0d3cc:	10c00917 	ldw	r3,36(r2)
  a0d3d0:	e0bffb17 	ldw	r2,-20(fp)
  a0d3d4:	10800117 	ldw	r2,4(r2)
  a0d3d8:	1885803a 	cmpltu	r2,r3,r2
  a0d3dc:	20800015 	stw	r2,0(r4)
      rc = 0;
  a0d3e0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  a0d3e4:	e0bffa17 	ldw	r2,-24(fp)
}
  a0d3e8:	e037883a 	mov	sp,fp
  a0d3ec:	df000017 	ldw	fp,0(sp)
  a0d3f0:	dec00104 	addi	sp,sp,4
  a0d3f4:	f800283a 	ret

00a0d3f8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  a0d3f8:	defff204 	addi	sp,sp,-56
  a0d3fc:	dfc00d15 	stw	ra,52(sp)
  a0d400:	df000c15 	stw	fp,48(sp)
  a0d404:	df000c04 	addi	fp,sp,48
  a0d408:	e13ffb15 	stw	r4,-20(fp)
  a0d40c:	e17ffc15 	stw	r5,-16(fp)
  a0d410:	e1bffd15 	stw	r6,-12(fp)
  a0d414:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  a0d418:	e0bffc17 	ldw	r2,-16(fp)
  a0d41c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  a0d420:	00004806 	br	a0d544 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  a0d424:	e0bffb17 	ldw	r2,-20(fp)
  a0d428:	10800a17 	ldw	r2,40(r2)
  a0d42c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  a0d430:	e0bffb17 	ldw	r2,-20(fp)
  a0d434:	10800b17 	ldw	r2,44(r2)
  a0d438:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  a0d43c:	e0fff717 	ldw	r3,-36(fp)
  a0d440:	e0bff617 	ldw	r2,-40(fp)
  a0d444:	18800536 	bltu	r3,r2,a0d45c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  a0d448:	e0bff717 	ldw	r2,-36(fp)
  a0d44c:	e0fff617 	ldw	r3,-40(fp)
  a0d450:	10c5c83a 	sub	r2,r2,r3
  a0d454:	e0bff815 	stw	r2,-32(fp)
  a0d458:	00000406 	br	a0d46c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  a0d45c:	00820004 	movi	r2,2048
  a0d460:	e0fff617 	ldw	r3,-40(fp)
  a0d464:	10c5c83a 	sub	r2,r2,r3
  a0d468:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  a0d46c:	e0bff817 	ldw	r2,-32(fp)
  a0d470:	1005003a 	cmpeq	r2,r2,zero
  a0d474:	10001f1e 	bne	r2,zero,a0d4f4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  a0d478:	e0fffd17 	ldw	r3,-12(fp)
  a0d47c:	e0bff817 	ldw	r2,-32(fp)
  a0d480:	1880022e 	bgeu	r3,r2,a0d48c <altera_avalon_jtag_uart_read+0x94>
        n = space;
  a0d484:	e0bffd17 	ldw	r2,-12(fp)
  a0d488:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  a0d48c:	e0bffb17 	ldw	r2,-20(fp)
  a0d490:	10c00e04 	addi	r3,r2,56
  a0d494:	e0bff617 	ldw	r2,-40(fp)
  a0d498:	1887883a 	add	r3,r3,r2
  a0d49c:	e0bffa17 	ldw	r2,-24(fp)
  a0d4a0:	1009883a 	mov	r4,r2
  a0d4a4:	180b883a 	mov	r5,r3
  a0d4a8:	e1bff817 	ldw	r6,-32(fp)
  a0d4ac:	0a08a500 	call	a08a50 <memcpy>
      ptr   += n;
  a0d4b0:	e0fff817 	ldw	r3,-32(fp)
  a0d4b4:	e0bffa17 	ldw	r2,-24(fp)
  a0d4b8:	10c5883a 	add	r2,r2,r3
  a0d4bc:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  a0d4c0:	e0fffd17 	ldw	r3,-12(fp)
  a0d4c4:	e0bff817 	ldw	r2,-32(fp)
  a0d4c8:	1885c83a 	sub	r2,r3,r2
  a0d4cc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  a0d4d0:	e0fff617 	ldw	r3,-40(fp)
  a0d4d4:	e0bff817 	ldw	r2,-32(fp)
  a0d4d8:	1885883a 	add	r2,r3,r2
  a0d4dc:	10c1ffcc 	andi	r3,r2,2047
  a0d4e0:	e0bffb17 	ldw	r2,-20(fp)
  a0d4e4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  a0d4e8:	e0bffd17 	ldw	r2,-12(fp)
  a0d4ec:	10800048 	cmpgei	r2,r2,1
  a0d4f0:	103fcc1e 	bne	r2,zero,a0d424 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  a0d4f4:	e0fffa17 	ldw	r3,-24(fp)
  a0d4f8:	e0bffc17 	ldw	r2,-16(fp)
  a0d4fc:	1880141e 	bne	r3,r2,a0d550 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  a0d500:	e0bffe17 	ldw	r2,-8(fp)
  a0d504:	1090000c 	andi	r2,r2,16384
  a0d508:	1004c03a 	cmpne	r2,r2,zero
  a0d50c:	1000101e 	bne	r2,zero,a0d550 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  a0d510:	e0bffb17 	ldw	r2,-20(fp)
  a0d514:	10c00a17 	ldw	r3,40(r2)
  a0d518:	e0bff717 	ldw	r2,-36(fp)
  a0d51c:	1880051e 	bne	r3,r2,a0d534 <altera_avalon_jtag_uart_read+0x13c>
  a0d520:	e0bffb17 	ldw	r2,-20(fp)
  a0d524:	10c00917 	ldw	r3,36(r2)
  a0d528:	e0bffb17 	ldw	r2,-20(fp)
  a0d52c:	10800117 	ldw	r2,4(r2)
  a0d530:	18bff736 	bltu	r3,r2,a0d510 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  a0d534:	e0bffb17 	ldw	r2,-20(fp)
  a0d538:	10c00a17 	ldw	r3,40(r2)
  a0d53c:	e0bff717 	ldw	r2,-36(fp)
  a0d540:	18800326 	beq	r3,r2,a0d550 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  a0d544:	e0bffd17 	ldw	r2,-12(fp)
  a0d548:	10800048 	cmpgei	r2,r2,1
  a0d54c:	103fb51e 	bne	r2,zero,a0d424 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  a0d550:	e0fffa17 	ldw	r3,-24(fp)
  a0d554:	e0bffc17 	ldw	r2,-16(fp)
  a0d558:	18801926 	beq	r3,r2,a0d5c0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  a0d55c:	0005303a 	rdctl	r2,status
  a0d560:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  a0d564:	e0fff517 	ldw	r3,-44(fp)
  a0d568:	00bfff84 	movi	r2,-2
  a0d56c:	1884703a 	and	r2,r3,r2
  a0d570:	1001703a 	wrctl	status,r2
  
  return context;
  a0d574:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  a0d578:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  a0d57c:	e0bffb17 	ldw	r2,-20(fp)
  a0d580:	10800817 	ldw	r2,32(r2)
  a0d584:	10c00054 	ori	r3,r2,1
  a0d588:	e0bffb17 	ldw	r2,-20(fp)
  a0d58c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  a0d590:	e0bffb17 	ldw	r2,-20(fp)
  a0d594:	10800017 	ldw	r2,0(r2)
  a0d598:	11000104 	addi	r4,r2,4
  a0d59c:	e0bffb17 	ldw	r2,-20(fp)
  a0d5a0:	10800817 	ldw	r2,32(r2)
  a0d5a4:	1007883a 	mov	r3,r2
  a0d5a8:	2005883a 	mov	r2,r4
  a0d5ac:	10c00035 	stwio	r3,0(r2)
  a0d5b0:	e0bff917 	ldw	r2,-28(fp)
  a0d5b4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  a0d5b8:	e0bff417 	ldw	r2,-48(fp)
  a0d5bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  a0d5c0:	e0fffa17 	ldw	r3,-24(fp)
  a0d5c4:	e0bffc17 	ldw	r2,-16(fp)
  a0d5c8:	18800526 	beq	r3,r2,a0d5e0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  a0d5cc:	e0fffa17 	ldw	r3,-24(fp)
  a0d5d0:	e0bffc17 	ldw	r2,-16(fp)
  a0d5d4:	1887c83a 	sub	r3,r3,r2
  a0d5d8:	e0ffff15 	stw	r3,-4(fp)
  a0d5dc:	00000906 	br	a0d604 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  a0d5e0:	e0bffe17 	ldw	r2,-8(fp)
  a0d5e4:	1090000c 	andi	r2,r2,16384
  a0d5e8:	1005003a 	cmpeq	r2,r2,zero
  a0d5ec:	1000031e 	bne	r2,zero,a0d5fc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  a0d5f0:	00bffd44 	movi	r2,-11
  a0d5f4:	e0bfff15 	stw	r2,-4(fp)
  a0d5f8:	00000206 	br	a0d604 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  a0d5fc:	00bffec4 	movi	r2,-5
  a0d600:	e0bfff15 	stw	r2,-4(fp)
  a0d604:	e0bfff17 	ldw	r2,-4(fp)
}
  a0d608:	e037883a 	mov	sp,fp
  a0d60c:	dfc00117 	ldw	ra,4(sp)
  a0d610:	df000017 	ldw	fp,0(sp)
  a0d614:	dec00204 	addi	sp,sp,8
  a0d618:	f800283a 	ret

00a0d61c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  a0d61c:	defff204 	addi	sp,sp,-56
  a0d620:	dfc00d15 	stw	ra,52(sp)
  a0d624:	df000c15 	stw	fp,48(sp)
  a0d628:	df000c04 	addi	fp,sp,48
  a0d62c:	e13ffb15 	stw	r4,-20(fp)
  a0d630:	e17ffc15 	stw	r5,-16(fp)
  a0d634:	e1bffd15 	stw	r6,-12(fp)
  a0d638:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  a0d63c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  a0d640:	e0bffc17 	ldw	r2,-16(fp)
  a0d644:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  a0d648:	00003a06 	br	a0d734 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  a0d64c:	e0bffb17 	ldw	r2,-20(fp)
  a0d650:	10800c17 	ldw	r2,48(r2)
  a0d654:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  a0d658:	e0bffb17 	ldw	r2,-20(fp)
  a0d65c:	10800d17 	ldw	r2,52(r2)
  a0d660:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  a0d664:	e0fffa17 	ldw	r3,-24(fp)
  a0d668:	e0bff917 	ldw	r2,-28(fp)
  a0d66c:	1880062e 	bgeu	r3,r2,a0d688 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  a0d670:	e0fff917 	ldw	r3,-28(fp)
  a0d674:	e0bffa17 	ldw	r2,-24(fp)
  a0d678:	1885c83a 	sub	r2,r3,r2
  a0d67c:	10bfffc4 	addi	r2,r2,-1
  a0d680:	e0bff815 	stw	r2,-32(fp)
  a0d684:	00000c06 	br	a0d6b8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  a0d688:	e0bff917 	ldw	r2,-28(fp)
  a0d68c:	1005003a 	cmpeq	r2,r2,zero
  a0d690:	1000051e 	bne	r2,zero,a0d6a8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  a0d694:	00820004 	movi	r2,2048
  a0d698:	e0fffa17 	ldw	r3,-24(fp)
  a0d69c:	10c5c83a 	sub	r2,r2,r3
  a0d6a0:	e0bff815 	stw	r2,-32(fp)
  a0d6a4:	00000406 	br	a0d6b8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  a0d6a8:	0081ffc4 	movi	r2,2047
  a0d6ac:	e0fffa17 	ldw	r3,-24(fp)
  a0d6b0:	10c5c83a 	sub	r2,r2,r3
  a0d6b4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  a0d6b8:	e0bff817 	ldw	r2,-32(fp)
  a0d6bc:	1005003a 	cmpeq	r2,r2,zero
  a0d6c0:	10001f1e 	bne	r2,zero,a0d740 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  a0d6c4:	e0fffd17 	ldw	r3,-12(fp)
  a0d6c8:	e0bff817 	ldw	r2,-32(fp)
  a0d6cc:	1880022e 	bgeu	r3,r2,a0d6d8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  a0d6d0:	e0bffd17 	ldw	r2,-12(fp)
  a0d6d4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  a0d6d8:	e0bffb17 	ldw	r2,-20(fp)
  a0d6dc:	10c20e04 	addi	r3,r2,2104
  a0d6e0:	e0bffa17 	ldw	r2,-24(fp)
  a0d6e4:	1885883a 	add	r2,r3,r2
  a0d6e8:	e0fffc17 	ldw	r3,-16(fp)
  a0d6ec:	1009883a 	mov	r4,r2
  a0d6f0:	180b883a 	mov	r5,r3
  a0d6f4:	e1bff817 	ldw	r6,-32(fp)
  a0d6f8:	0a08a500 	call	a08a50 <memcpy>
      ptr   += n;
  a0d6fc:	e0fff817 	ldw	r3,-32(fp)
  a0d700:	e0bffc17 	ldw	r2,-16(fp)
  a0d704:	10c5883a 	add	r2,r2,r3
  a0d708:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  a0d70c:	e0fffd17 	ldw	r3,-12(fp)
  a0d710:	e0bff817 	ldw	r2,-32(fp)
  a0d714:	1885c83a 	sub	r2,r3,r2
  a0d718:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  a0d71c:	e0fffa17 	ldw	r3,-24(fp)
  a0d720:	e0bff817 	ldw	r2,-32(fp)
  a0d724:	1885883a 	add	r2,r3,r2
  a0d728:	10c1ffcc 	andi	r3,r2,2047
  a0d72c:	e0bffb17 	ldw	r2,-20(fp)
  a0d730:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  a0d734:	e0bffd17 	ldw	r2,-12(fp)
  a0d738:	10800048 	cmpgei	r2,r2,1
  a0d73c:	103fc31e 	bne	r2,zero,a0d64c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  a0d740:	0005303a 	rdctl	r2,status
  a0d744:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  a0d748:	e0fff517 	ldw	r3,-44(fp)
  a0d74c:	00bfff84 	movi	r2,-2
  a0d750:	1884703a 	and	r2,r3,r2
  a0d754:	1001703a 	wrctl	status,r2
  
  return context;
  a0d758:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  a0d75c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  a0d760:	e0bffb17 	ldw	r2,-20(fp)
  a0d764:	10800817 	ldw	r2,32(r2)
  a0d768:	10c00094 	ori	r3,r2,2
  a0d76c:	e0bffb17 	ldw	r2,-20(fp)
  a0d770:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  a0d774:	e0bffb17 	ldw	r2,-20(fp)
  a0d778:	10800017 	ldw	r2,0(r2)
  a0d77c:	11000104 	addi	r4,r2,4
  a0d780:	e0bffb17 	ldw	r2,-20(fp)
  a0d784:	10800817 	ldw	r2,32(r2)
  a0d788:	1007883a 	mov	r3,r2
  a0d78c:	2005883a 	mov	r2,r4
  a0d790:	10c00035 	stwio	r3,0(r2)
  a0d794:	e0bff717 	ldw	r2,-36(fp)
  a0d798:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  a0d79c:	e0bff417 	ldw	r2,-48(fp)
  a0d7a0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  a0d7a4:	e0bffd17 	ldw	r2,-12(fp)
  a0d7a8:	10800050 	cmplti	r2,r2,1
  a0d7ac:	1000111e 	bne	r2,zero,a0d7f4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  a0d7b0:	e0bffe17 	ldw	r2,-8(fp)
  a0d7b4:	1090000c 	andi	r2,r2,16384
  a0d7b8:	1004c03a 	cmpne	r2,r2,zero
  a0d7bc:	1000101e 	bne	r2,zero,a0d800 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  a0d7c0:	e0bffb17 	ldw	r2,-20(fp)
  a0d7c4:	10c00d17 	ldw	r3,52(r2)
  a0d7c8:	e0bff917 	ldw	r2,-28(fp)
  a0d7cc:	1880051e 	bne	r3,r2,a0d7e4 <altera_avalon_jtag_uart_write+0x1c8>
  a0d7d0:	e0bffb17 	ldw	r2,-20(fp)
  a0d7d4:	10c00917 	ldw	r3,36(r2)
  a0d7d8:	e0bffb17 	ldw	r2,-20(fp)
  a0d7dc:	10800117 	ldw	r2,4(r2)
  a0d7e0:	18bff736 	bltu	r3,r2,a0d7c0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  a0d7e4:	e0bffb17 	ldw	r2,-20(fp)
  a0d7e8:	10c00d17 	ldw	r3,52(r2)
  a0d7ec:	e0bff917 	ldw	r2,-28(fp)
  a0d7f0:	18800326 	beq	r3,r2,a0d800 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  a0d7f4:	e0bffd17 	ldw	r2,-12(fp)
  a0d7f8:	10800048 	cmpgei	r2,r2,1
  a0d7fc:	103fcd1e 	bne	r2,zero,a0d734 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  a0d800:	e0fffc17 	ldw	r3,-16(fp)
  a0d804:	e0bff617 	ldw	r2,-40(fp)
  a0d808:	18800526 	beq	r3,r2,a0d820 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  a0d80c:	e0fffc17 	ldw	r3,-16(fp)
  a0d810:	e0bff617 	ldw	r2,-40(fp)
  a0d814:	1887c83a 	sub	r3,r3,r2
  a0d818:	e0ffff15 	stw	r3,-4(fp)
  a0d81c:	00000906 	br	a0d844 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  a0d820:	e0bffe17 	ldw	r2,-8(fp)
  a0d824:	1090000c 	andi	r2,r2,16384
  a0d828:	1005003a 	cmpeq	r2,r2,zero
  a0d82c:	1000031e 	bne	r2,zero,a0d83c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  a0d830:	00bffd44 	movi	r2,-11
  a0d834:	e0bfff15 	stw	r2,-4(fp)
  a0d838:	00000206 	br	a0d844 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  a0d83c:	00bffec4 	movi	r2,-5
  a0d840:	e0bfff15 	stw	r2,-4(fp)
  a0d844:	e0bfff17 	ldw	r2,-4(fp)
}
  a0d848:	e037883a 	mov	sp,fp
  a0d84c:	dfc00117 	ldw	ra,4(sp)
  a0d850:	df000017 	ldw	fp,0(sp)
  a0d854:	dec00204 	addi	sp,sp,8
  a0d858:	f800283a 	ret

00a0d85c <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
  a0d85c:	defffa04 	addi	sp,sp,-24
  a0d860:	dfc00515 	stw	ra,20(sp)
  a0d864:	df000415 	stw	fp,16(sp)
  a0d868:	df000404 	addi	fp,sp,16
  a0d86c:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
  a0d870:	e0bfff17 	ldw	r2,-4(fp)
  a0d874:	11000704 	addi	r4,r2,28
  a0d878:	0a0d9b40 	call	a0d9b4 <alt_avalon_mutex_reg>
  a0d87c:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
  a0d880:	e0bffe17 	ldw	r2,-8(fp)
  a0d884:	1004c03a 	cmpne	r2,r2,zero
  a0d888:	1000041e 	bne	r2,zero,a0d89c <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
  a0d88c:	e0bfff17 	ldw	r2,-4(fp)
  a0d890:	11000b04 	addi	r4,r2,44
  a0d894:	0a0d9b40 	call	a0d9b4 <alt_avalon_mutex_reg>
  a0d898:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  a0d89c:	e0bffe17 	ldw	r2,-8(fp)
  a0d8a0:	1004c03a 	cmpne	r2,r2,zero
  a0d8a4:	1000041e 	bne	r2,zero,a0d8b8 <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
  a0d8a8:	e13fff17 	ldw	r4,-4(fp)
  a0d8ac:	d1601604 	addi	r5,gp,-32680
  a0d8b0:	0a0f9140 	call	a0f914 <alt_dev_llist_insert>
  a0d8b4:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  a0d8b8:	e0bffe17 	ldw	r2,-8(fp)
  a0d8bc:	1004c03a 	cmpne	r2,r2,zero
  a0d8c0:	1000361e 	bne	r2,zero,a0d99c <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
  a0d8c4:	e0bfff17 	ldw	r2,-4(fp)
  a0d8c8:	11000917 	ldw	r4,36(r2)
  a0d8cc:	0a0de000 	call	a0de00 <altera_avalon_mutex_open>
  a0d8d0:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
  a0d8d4:	e0bffd17 	ldw	r2,-12(fp)
  a0d8d8:	1005003a 	cmpeq	r2,r2,zero
  a0d8dc:	10002f1e 	bne	r2,zero,a0d99c <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
  a0d8e0:	e0bfff17 	ldw	r2,-4(fp)
  a0d8e4:	11000d17 	ldw	r4,52(r2)
  a0d8e8:	0a0de000 	call	a0de00 <altera_avalon_mutex_open>
  a0d8ec:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
  a0d8f0:	e0bffc17 	ldw	r2,-16(fp)
  a0d8f4:	1005003a 	cmpeq	r2,r2,zero
  a0d8f8:	1000281e 	bne	r2,zero,a0d99c <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  a0d8fc:	00000f06 	br	a0d93c <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
  a0d900:	e13ffd17 	ldw	r4,-12(fp)
  a0d904:	01400044 	movi	r5,1
  a0d908:	0a0df180 	call	a0df18 <altera_avalon_mutex_trylock>
  a0d90c:	1004c03a 	cmpne	r2,r2,zero
  a0d910:	10000a1e 	bne	r2,zero,a0d93c <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
  a0d914:	e0bfff17 	ldw	r2,-4(fp)
  a0d918:	10800317 	ldw	r2,12(r2)
  a0d91c:	1009883a 	mov	r4,r2
  a0d920:	e0bfff17 	ldw	r2,-4(fp)
  a0d924:	10800517 	ldw	r2,20(r2)
  a0d928:	1007883a 	mov	r3,r2
  a0d92c:	2005883a 	mov	r2,r4
  a0d930:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
  a0d934:	e13ffd17 	ldw	r4,-12(fp)
  a0d938:	0a0df580 	call	a0df58 <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  a0d93c:	e13ffd17 	ldw	r4,-12(fp)
  a0d940:	0a0e0300 	call	a0e030 <altera_avalon_mutex_first_lock>
  a0d944:	1004c03a 	cmpne	r2,r2,zero
  a0d948:	103fed1e 	bne	r2,zero,a0d900 <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  a0d94c:	00000f06 	br	a0d98c <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
  a0d950:	e13ffc17 	ldw	r4,-16(fp)
  a0d954:	01400044 	movi	r5,1
  a0d958:	0a0df180 	call	a0df18 <altera_avalon_mutex_trylock>
  a0d95c:	1004c03a 	cmpne	r2,r2,zero
  a0d960:	10000a1e 	bne	r2,zero,a0d98c <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
  a0d964:	e0bfff17 	ldw	r2,-4(fp)
  a0d968:	10800417 	ldw	r2,16(r2)
  a0d96c:	1009883a 	mov	r4,r2
  a0d970:	e0bfff17 	ldw	r2,-4(fp)
  a0d974:	10800517 	ldw	r2,20(r2)
  a0d978:	1007883a 	mov	r3,r2
  a0d97c:	2005883a 	mov	r2,r4
  a0d980:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
  a0d984:	e13ffc17 	ldw	r4,-16(fp)
  a0d988:	0a0df580 	call	a0df58 <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  a0d98c:	e13ffc17 	ldw	r4,-16(fp)
  a0d990:	0a0e0300 	call	a0e030 <altera_avalon_mutex_first_lock>
  a0d994:	1004c03a 	cmpne	r2,r2,zero
  a0d998:	103fed1e 	bne	r2,zero,a0d950 <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
  a0d99c:	e0bffe17 	ldw	r2,-8(fp)
}
  a0d9a0:	e037883a 	mov	sp,fp
  a0d9a4:	dfc00117 	ldw	ra,4(sp)
  a0d9a8:	df000017 	ldw	fp,0(sp)
  a0d9ac:	dec00204 	addi	sp,sp,8
  a0d9b0:	f800283a 	ret

00a0d9b4 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
  a0d9b4:	defffc04 	addi	sp,sp,-16
  a0d9b8:	dfc00315 	stw	ra,12(sp)
  a0d9bc:	df000215 	stw	fp,8(sp)
  a0d9c0:	df000204 	addi	fp,sp,8
  a0d9c4:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  a0d9c8:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  a0d9cc:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
  a0d9d0:	e0bffe17 	ldw	r2,-8(fp)
  a0d9d4:	1004c03a 	cmpne	r2,r2,zero
  a0d9d8:	1000061e 	bne	r2,zero,a0d9f4 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
  a0d9dc:	e13fff17 	ldw	r4,-4(fp)
  a0d9e0:	01402874 	movhi	r5,161
  a0d9e4:	294afb04 	addi	r5,r5,11244
  a0d9e8:	0a0f9140 	call	a0f914 <alt_dev_llist_insert>
  a0d9ec:	e0bffe15 	stw	r2,-8(fp)
  a0d9f0:	00000506 	br	a0da08 <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
  a0d9f4:	0a0da200 	call	a0da20 <alt_get_errno>
  a0d9f8:	00c00304 	movi	r3,12
  a0d9fc:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
  a0da00:	00bffd04 	movi	r2,-12
  a0da04:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
  a0da08:	e0bffe17 	ldw	r2,-8(fp)
}
  a0da0c:	e037883a 	mov	sp,fp
  a0da10:	dfc00117 	ldw	ra,4(sp)
  a0da14:	df000017 	ldw	fp,0(sp)
  a0da18:	dec00204 	addi	sp,sp,8
  a0da1c:	f800283a 	ret

00a0da20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0da20:	defffd04 	addi	sp,sp,-12
  a0da24:	dfc00215 	stw	ra,8(sp)
  a0da28:	df000115 	stw	fp,4(sp)
  a0da2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0da30:	00802874 	movhi	r2,161
  a0da34:	108af704 	addi	r2,r2,11228
  a0da38:	10800017 	ldw	r2,0(r2)
  a0da3c:	1005003a 	cmpeq	r2,r2,zero
  a0da40:	1000061e 	bne	r2,zero,a0da5c <alt_get_errno+0x3c>
  a0da44:	00802874 	movhi	r2,161
  a0da48:	108af704 	addi	r2,r2,11228
  a0da4c:	10800017 	ldw	r2,0(r2)
  a0da50:	103ee83a 	callr	r2
  a0da54:	e0bfff15 	stw	r2,-4(fp)
  a0da58:	00000306 	br	a0da68 <alt_get_errno+0x48>
  a0da5c:	00802874 	movhi	r2,161
  a0da60:	1091fc04 	addi	r2,r2,18416
  a0da64:	e0bfff15 	stw	r2,-4(fp)
  a0da68:	e0bfff17 	ldw	r2,-4(fp)
}
  a0da6c:	e037883a 	mov	sp,fp
  a0da70:	dfc00117 	ldw	ra,4(sp)
  a0da74:	df000017 	ldw	fp,0(sp)
  a0da78:	dec00204 	addi	sp,sp,8
  a0da7c:	f800283a 	ret

00a0da80 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
  a0da80:	defffc04 	addi	sp,sp,-16
  a0da84:	dfc00315 	stw	ra,12(sp)
  a0da88:	df000215 	stw	fp,8(sp)
  a0da8c:	df000204 	addi	fp,sp,8
  a0da90:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
  a0da94:	e13fff17 	ldw	r4,-4(fp)
  a0da98:	d1601604 	addi	r5,gp,-32680
  a0da9c:	0a0faf00 	call	a0faf0 <alt_find_dev>
  a0daa0:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  a0daa4:	e0bffe17 	ldw	r2,-8(fp)
  a0daa8:	1004c03a 	cmpne	r2,r2,zero
  a0daac:	1000041e 	bne	r2,zero,a0dac0 <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  a0dab0:	0a0da200 	call	a0da20 <alt_get_errno>
  a0dab4:	1007883a 	mov	r3,r2
  a0dab8:	008004c4 	movi	r2,19
  a0dabc:	18800015 	stw	r2,0(r3)
  }

  return dev;
  a0dac0:	e0bffe17 	ldw	r2,-8(fp)

}
  a0dac4:	e037883a 	mov	sp,fp
  a0dac8:	dfc00117 	ldw	ra,4(sp)
  a0dacc:	df000017 	ldw	fp,0(sp)
  a0dad0:	dec00204 	addi	sp,sp,8
  a0dad4:	f800283a 	ret

00a0dad8 <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
  a0dad8:	defffe04 	addi	sp,sp,-8
  a0dadc:	df000115 	stw	fp,4(sp)
  a0dae0:	df000104 	addi	fp,sp,4
  a0dae4:	e13fff15 	stw	r4,-4(fp)
  return;
}
  a0dae8:	e037883a 	mov	sp,fp
  a0daec:	df000017 	ldw	fp,0(sp)
  a0daf0:	dec00104 	addi	sp,sp,4
  a0daf4:	f800283a 	ret

00a0daf8 <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
  a0daf8:	defff904 	addi	sp,sp,-28
  a0dafc:	dfc00615 	stw	ra,24(sp)
  a0db00:	df000515 	stw	fp,20(sp)
  a0db04:	df000504 	addi	fp,sp,20
  a0db08:	e13ffe15 	stw	r4,-8(fp)
  a0db0c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  a0db10:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
  a0db14:	e0bffe17 	ldw	r2,-8(fp)
  a0db18:	11000704 	addi	r4,r2,28
  a0db1c:	01400044 	movi	r5,1
  a0db20:	0a0ded80 	call	a0ded8 <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
  a0db24:	e0bffe17 	ldw	r2,-8(fp)
  a0db28:	10800317 	ldw	r2,12(r2)
  a0db2c:	10800037 	ldwio	r2,0(r2)
  a0db30:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
  a0db34:	e13ffe17 	ldw	r4,-8(fp)
  a0db38:	e17ffc17 	ldw	r5,-16(fp)
  a0db3c:	0a0dbb40 	call	a0dbb4 <alt_mailbox_increment_ptr>
  a0db40:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
  a0db44:	e0bffe17 	ldw	r2,-8(fp)
  a0db48:	10800417 	ldw	r2,16(r2)
  a0db4c:	10800037 	ldwio	r2,0(r2)
  a0db50:	1007883a 	mov	r3,r2
  a0db54:	e0bffb17 	ldw	r2,-20(fp)
  a0db58:	1880061e 	bne	r3,r2,a0db74 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
  a0db5c:	0a0da200 	call	a0da20 <alt_get_errno>
  a0db60:	00c002c4 	movi	r3,11
  a0db64:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
  a0db68:	00bffd44 	movi	r2,-11
  a0db6c:	e0bffd15 	stw	r2,-12(fp)
  a0db70:	00000706 	br	a0db90 <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
  a0db74:	e0bffc17 	ldw	r2,-16(fp)
  a0db78:	e0ffff17 	ldw	r3,-4(fp)
  a0db7c:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
  a0db80:	e0bffe17 	ldw	r2,-8(fp)
  a0db84:	10800317 	ldw	r2,12(r2)
  a0db88:	e0fffb17 	ldw	r3,-20(fp)
  a0db8c:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
  a0db90:	e0bffe17 	ldw	r2,-8(fp)
  a0db94:	11000704 	addi	r4,r2,28
  a0db98:	0a0df580 	call	a0df58 <altera_avalon_mutex_unlock>

  return ret_code;
  a0db9c:	e0bffd17 	ldw	r2,-12(fp)

}
  a0dba0:	e037883a 	mov	sp,fp
  a0dba4:	dfc00117 	ldw	ra,4(sp)
  a0dba8:	df000017 	ldw	fp,0(sp)
  a0dbac:	dec00204 	addi	sp,sp,8
  a0dbb0:	f800283a 	ret

00a0dbb4 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
  a0dbb4:	defffd04 	addi	sp,sp,-12
  a0dbb8:	df000215 	stw	fp,8(sp)
  a0dbbc:	df000204 	addi	fp,sp,8
  a0dbc0:	e13ffe15 	stw	r4,-8(fp)
  a0dbc4:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
  a0dbc8:	e0bfff17 	ldw	r2,-4(fp)
  a0dbcc:	10800104 	addi	r2,r2,4
  a0dbd0:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
  a0dbd4:	e0bffe17 	ldw	r2,-8(fp)
  a0dbd8:	10c00617 	ldw	r3,24(r2)
  a0dbdc:	e0bfff17 	ldw	r2,-4(fp)
  a0dbe0:	1880032e 	bgeu	r3,r2,a0dbf0 <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
  a0dbe4:	e0bffe17 	ldw	r2,-8(fp)
  a0dbe8:	10800517 	ldw	r2,20(r2)
  a0dbec:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
  a0dbf0:	e0bfff17 	ldw	r2,-4(fp)
}
  a0dbf4:	e037883a 	mov	sp,fp
  a0dbf8:	df000017 	ldw	fp,0(sp)
  a0dbfc:	dec00104 	addi	sp,sp,4
  a0dc00:	f800283a 	ret

00a0dc04 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
  a0dc04:	defffa04 	addi	sp,sp,-24
  a0dc08:	dfc00515 	stw	ra,20(sp)
  a0dc0c:	df000415 	stw	fp,16(sp)
  a0dc10:	dc000315 	stw	r16,12(sp)
  a0dc14:	df000304 	addi	fp,sp,12
  a0dc18:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  a0dc1c:	e0bfff17 	ldw	r2,-4(fp)
  a0dc20:	11000b04 	addi	r4,r2,44
  a0dc24:	01400044 	movi	r5,1
  a0dc28:	0a0ded80 	call	a0ded8 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  a0dc2c:	e0bfff17 	ldw	r2,-4(fp)
  a0dc30:	10800417 	ldw	r2,16(r2)
  a0dc34:	10800037 	ldwio	r2,0(r2)
  a0dc38:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
  a0dc3c:	e0bfff17 	ldw	r2,-4(fp)
  a0dc40:	10800317 	ldw	r2,12(r2)
  a0dc44:	10800037 	ldwio	r2,0(r2)
  a0dc48:	1007883a 	mov	r3,r2
  a0dc4c:	e0bffd17 	ldw	r2,-12(fp)
  a0dc50:	18bffa26 	beq	r3,r2,a0dc3c <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
  a0dc54:	e0bffd17 	ldw	r2,-12(fp)
  a0dc58:	10800037 	ldwio	r2,0(r2)
  a0dc5c:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
  a0dc60:	e0bfff17 	ldw	r2,-4(fp)
  a0dc64:	10800417 	ldw	r2,16(r2)
  a0dc68:	1021883a 	mov	r16,r2
  a0dc6c:	e13fff17 	ldw	r4,-4(fp)
  a0dc70:	e17ffd17 	ldw	r5,-12(fp)
  a0dc74:	0a0dbb40 	call	a0dbb4 <alt_mailbox_increment_ptr>
  a0dc78:	1007883a 	mov	r3,r2
  a0dc7c:	8005883a 	mov	r2,r16
  a0dc80:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
  a0dc84:	e0bfff17 	ldw	r2,-4(fp)
  a0dc88:	11000b04 	addi	r4,r2,44
  a0dc8c:	0a0df580 	call	a0df58 <altera_avalon_mutex_unlock>

  return msg;
  a0dc90:	e0bffe17 	ldw	r2,-8(fp)

}
  a0dc94:	e037883a 	mov	sp,fp
  a0dc98:	dfc00217 	ldw	ra,8(sp)
  a0dc9c:	df000117 	ldw	fp,4(sp)
  a0dca0:	dc000017 	ldw	r16,0(sp)
  a0dca4:	dec00304 	addi	sp,sp,12
  a0dca8:	f800283a 	ret

00a0dcac <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
  a0dcac:	defff904 	addi	sp,sp,-28
  a0dcb0:	dfc00615 	stw	ra,24(sp)
  a0dcb4:	df000515 	stw	fp,20(sp)
  a0dcb8:	dc000415 	stw	r16,16(sp)
  a0dcbc:	df000404 	addi	fp,sp,16
  a0dcc0:	e13ffe15 	stw	r4,-8(fp)
  a0dcc4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
  a0dcc8:	e0bfff17 	ldw	r2,-4(fp)
  a0dccc:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  a0dcd0:	e0bffe17 	ldw	r2,-8(fp)
  a0dcd4:	11000b04 	addi	r4,r2,44
  a0dcd8:	01400044 	movi	r5,1
  a0dcdc:	0a0ded80 	call	a0ded8 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  a0dce0:	e0bffe17 	ldw	r2,-8(fp)
  a0dce4:	10800417 	ldw	r2,16(r2)
  a0dce8:	10800037 	ldwio	r2,0(r2)
  a0dcec:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
  a0dcf0:	e0bffe17 	ldw	r2,-8(fp)
  a0dcf4:	10800317 	ldw	r2,12(r2)
  a0dcf8:	10800037 	ldwio	r2,0(r2)
  a0dcfc:	1007883a 	mov	r3,r2
  a0dd00:	e0bffc17 	ldw	r2,-16(fp)
  a0dd04:	1880091e 	bne	r3,r2,a0dd2c <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
  a0dd08:	e0ffff17 	ldw	r3,-4(fp)
  a0dd0c:	00bffd44 	movi	r2,-11
  a0dd10:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
  a0dd14:	0a0da200 	call	a0da20 <alt_get_errno>
  a0dd18:	1007883a 	mov	r3,r2
  a0dd1c:	008002c4 	movi	r2,11
  a0dd20:	18800015 	stw	r2,0(r3)
    msg = 0;
  a0dd24:	e03ffd15 	stw	zero,-12(fp)
  a0dd28:	00000c06 	br	a0dd5c <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
  a0dd2c:	e0bffc17 	ldw	r2,-16(fp)
  a0dd30:	10800037 	ldwio	r2,0(r2)
  a0dd34:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
  a0dd38:	e0bffe17 	ldw	r2,-8(fp)
  a0dd3c:	10800417 	ldw	r2,16(r2)
  a0dd40:	1021883a 	mov	r16,r2
  a0dd44:	e13ffe17 	ldw	r4,-8(fp)
  a0dd48:	e17ffc17 	ldw	r5,-16(fp)
  a0dd4c:	0a0dbb40 	call	a0dbb4 <alt_mailbox_increment_ptr>
  a0dd50:	1007883a 	mov	r3,r2
  a0dd54:	8005883a 	mov	r2,r16
  a0dd58:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
  a0dd5c:	e0bffe17 	ldw	r2,-8(fp)
  a0dd60:	11000b04 	addi	r4,r2,44
  a0dd64:	0a0df580 	call	a0df58 <altera_avalon_mutex_unlock>

  return msg;
  a0dd68:	e0bffd17 	ldw	r2,-12(fp)

}
  a0dd6c:	e037883a 	mov	sp,fp
  a0dd70:	dfc00217 	ldw	ra,8(sp)
  a0dd74:	df000117 	ldw	fp,4(sp)
  a0dd78:	dc000017 	ldw	r16,0(sp)
  a0dd7c:	dec00304 	addi	sp,sp,12
  a0dd80:	f800283a 	ret

00a0dd84 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  a0dd84:	defff904 	addi	sp,sp,-28
  a0dd88:	df000615 	stw	fp,24(sp)
  a0dd8c:	df000604 	addi	fp,sp,24
  a0dd90:	e13ffe15 	stw	r4,-8(fp)
  a0dd94:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
  a0dd98:	00bfffc4 	movi	r2,-1
  a0dd9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
  a0dda0:	0005317a 	rdctl	r2,cpuid
  a0dda4:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
  a0dda8:	e0bffd17 	ldw	r2,-12(fp)
  a0ddac:	1006943a 	slli	r3,r2,16
  a0ddb0:	e0bfff17 	ldw	r2,-4(fp)
  a0ddb4:	1884b03a 	or	r2,r3,r2
  a0ddb8:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
  a0ddbc:	e0bffe17 	ldw	r2,-8(fp)
  a0ddc0:	10800317 	ldw	r2,12(r2)
  a0ddc4:	e0fffc17 	ldw	r3,-16(fp)
  a0ddc8:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  a0ddcc:	e0bffe17 	ldw	r2,-8(fp)
  a0ddd0:	10800317 	ldw	r2,12(r2)
  a0ddd4:	10800037 	ldwio	r2,0(r2)
  a0ddd8:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
  a0dddc:	e0fffb17 	ldw	r3,-20(fp)
  a0dde0:	e0bffc17 	ldw	r2,-16(fp)
  a0dde4:	1880011e 	bne	r3,r2,a0ddec <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
  a0dde8:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
  a0ddec:	e0bffa17 	ldw	r2,-24(fp)
}
  a0ddf0:	e037883a 	mov	sp,fp
  a0ddf4:	df000017 	ldw	fp,0(sp)
  a0ddf8:	dec00104 	addi	sp,sp,4
  a0ddfc:	f800283a 	ret

00a0de00 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
  a0de00:	defffc04 	addi	sp,sp,-16
  a0de04:	dfc00315 	stw	ra,12(sp)
  a0de08:	df000215 	stw	fp,8(sp)
  a0de0c:	df000204 	addi	fp,sp,8
  a0de10:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
  a0de14:	e13fff17 	ldw	r4,-4(fp)
  a0de18:	d1601804 	addi	r5,gp,-32672
  a0de1c:	0a0faf00 	call	a0faf0 <alt_find_dev>
  a0de20:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  a0de24:	e0bffe17 	ldw	r2,-8(fp)
  a0de28:	1004c03a 	cmpne	r2,r2,zero
  a0de2c:	1000041e 	bne	r2,zero,a0de40 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  a0de30:	0a0de580 	call	a0de58 <alt_get_errno>
  a0de34:	1007883a 	mov	r3,r2
  a0de38:	008004c4 	movi	r2,19
  a0de3c:	18800015 	stw	r2,0(r3)
  }

  return dev;
  a0de40:	e0bffe17 	ldw	r2,-8(fp)
}
  a0de44:	e037883a 	mov	sp,fp
  a0de48:	dfc00117 	ldw	ra,4(sp)
  a0de4c:	df000017 	ldw	fp,0(sp)
  a0de50:	dec00204 	addi	sp,sp,8
  a0de54:	f800283a 	ret

00a0de58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0de58:	defffd04 	addi	sp,sp,-12
  a0de5c:	dfc00215 	stw	ra,8(sp)
  a0de60:	df000115 	stw	fp,4(sp)
  a0de64:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0de68:	00802874 	movhi	r2,161
  a0de6c:	108af704 	addi	r2,r2,11228
  a0de70:	10800017 	ldw	r2,0(r2)
  a0de74:	1005003a 	cmpeq	r2,r2,zero
  a0de78:	1000061e 	bne	r2,zero,a0de94 <alt_get_errno+0x3c>
  a0de7c:	00802874 	movhi	r2,161
  a0de80:	108af704 	addi	r2,r2,11228
  a0de84:	10800017 	ldw	r2,0(r2)
  a0de88:	103ee83a 	callr	r2
  a0de8c:	e0bfff15 	stw	r2,-4(fp)
  a0de90:	00000306 	br	a0dea0 <alt_get_errno+0x48>
  a0de94:	00802874 	movhi	r2,161
  a0de98:	1091fc04 	addi	r2,r2,18416
  a0de9c:	e0bfff15 	stw	r2,-4(fp)
  a0dea0:	e0bfff17 	ldw	r2,-4(fp)
}
  a0dea4:	e037883a 	mov	sp,fp
  a0dea8:	dfc00117 	ldw	ra,4(sp)
  a0deac:	df000017 	ldw	fp,0(sp)
  a0deb0:	dec00204 	addi	sp,sp,8
  a0deb4:	f800283a 	ret

00a0deb8 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
  a0deb8:	defffe04 	addi	sp,sp,-8
  a0debc:	df000115 	stw	fp,4(sp)
  a0dec0:	df000104 	addi	fp,sp,4
  a0dec4:	e13fff15 	stw	r4,-4(fp)
  return;
}
  a0dec8:	e037883a 	mov	sp,fp
  a0decc:	df000017 	ldw	fp,0(sp)
  a0ded0:	dec00104 	addi	sp,sp,4
  a0ded4:	f800283a 	ret

00a0ded8 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
  a0ded8:	defffc04 	addi	sp,sp,-16
  a0dedc:	dfc00315 	stw	ra,12(sp)
  a0dee0:	df000215 	stw	fp,8(sp)
  a0dee4:	df000204 	addi	fp,sp,8
  a0dee8:	e13ffe15 	stw	r4,-8(fp)
  a0deec:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
  a0def0:	e13ffe17 	ldw	r4,-8(fp)
  a0def4:	e17fff17 	ldw	r5,-4(fp)
  a0def8:	0a0dd840 	call	a0dd84 <alt_mutex_trylock>
  a0defc:	1004c03a 	cmpne	r2,r2,zero
  a0df00:	103ffb1e 	bne	r2,zero,a0def0 <altera_avalon_mutex_lock+0x18>
}
  a0df04:	e037883a 	mov	sp,fp
  a0df08:	dfc00117 	ldw	ra,4(sp)
  a0df0c:	df000017 	ldw	fp,0(sp)
  a0df10:	dec00204 	addi	sp,sp,8
  a0df14:	f800283a 	ret

00a0df18 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  a0df18:	defffb04 	addi	sp,sp,-20
  a0df1c:	dfc00415 	stw	ra,16(sp)
  a0df20:	df000315 	stw	fp,12(sp)
  a0df24:	df000304 	addi	fp,sp,12
  a0df28:	e13ffe15 	stw	r4,-8(fp)
  a0df2c:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
  a0df30:	e13ffe17 	ldw	r4,-8(fp)
  a0df34:	e17fff17 	ldw	r5,-4(fp)
  a0df38:	0a0dd840 	call	a0dd84 <alt_mutex_trylock>
  a0df3c:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
  a0df40:	e0bffd17 	ldw	r2,-12(fp)
}
  a0df44:	e037883a 	mov	sp,fp
  a0df48:	dfc00117 	ldw	ra,4(sp)
  a0df4c:	df000017 	ldw	fp,0(sp)
  a0df50:	dec00204 	addi	sp,sp,8
  a0df54:	f800283a 	ret

00a0df58 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  a0df58:	defffd04 	addi	sp,sp,-12
  a0df5c:	df000215 	stw	fp,8(sp)
  a0df60:	df000204 	addi	fp,sp,8
  a0df64:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
  a0df68:	0005317a 	rdctl	r2,cpuid
  a0df6c:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
  a0df70:	e0bfff17 	ldw	r2,-4(fp)
  a0df74:	10800317 	ldw	r2,12(r2)
  a0df78:	10800104 	addi	r2,r2,4
  a0df7c:	1007883a 	mov	r3,r2
  a0df80:	00800044 	movi	r2,1
  a0df84:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
  a0df88:	e0bfff17 	ldw	r2,-4(fp)
  a0df8c:	11000317 	ldw	r4,12(r2)
  a0df90:	e0bffe17 	ldw	r2,-8(fp)
  a0df94:	1004943a 	slli	r2,r2,16
  a0df98:	1007883a 	mov	r3,r2
  a0df9c:	2005883a 	mov	r2,r4
  a0dfa0:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
  a0dfa4:	e037883a 	mov	sp,fp
  a0dfa8:	df000017 	ldw	fp,0(sp)
  a0dfac:	dec00104 	addi	sp,sp,4
  a0dfb0:	f800283a 	ret

00a0dfb4 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  a0dfb4:	defff904 	addi	sp,sp,-28
  a0dfb8:	df000615 	stw	fp,24(sp)
  a0dfbc:	df000604 	addi	fp,sp,24
  a0dfc0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
  a0dfc4:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
  a0dfc8:	0005317a 	rdctl	r2,cpuid
  a0dfcc:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  a0dfd0:	e0bfff17 	ldw	r2,-4(fp)
  a0dfd4:	10800317 	ldw	r2,12(r2)
  a0dfd8:	10800037 	ldwio	r2,0(r2)
  a0dfdc:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
  a0dfe0:	e0bffd17 	ldw	r2,-12(fp)
  a0dfe4:	10bfffec 	andhi	r2,r2,65535
  a0dfe8:	1004d43a 	srli	r2,r2,16
  a0dfec:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
  a0dff0:	e0fffc17 	ldw	r3,-16(fp)
  a0dff4:	e0bffe17 	ldw	r2,-8(fp)
  a0dff8:	1880081e 	bne	r3,r2,a0e01c <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
  a0dffc:	e0bffd17 	ldw	r2,-12(fp)
  a0e000:	10bfffcc 	andi	r2,r2,65535
  a0e004:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
  a0e008:	e0bffb17 	ldw	r2,-20(fp)
  a0e00c:	1005003a 	cmpeq	r2,r2,zero
  a0e010:	1000021e 	bne	r2,zero,a0e01c <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
  a0e014:	00800044 	movi	r2,1
  a0e018:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
  a0e01c:	e0bffa17 	ldw	r2,-24(fp)
}
  a0e020:	e037883a 	mov	sp,fp
  a0e024:	df000017 	ldw	fp,0(sp)
  a0e028:	dec00104 	addi	sp,sp,4
  a0e02c:	f800283a 	ret

00a0e030 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  a0e030:	defffc04 	addi	sp,sp,-16
  a0e034:	df000315 	stw	fp,12(sp)
  a0e038:	df000304 	addi	fp,sp,12
  a0e03c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
  a0e040:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
  a0e044:	e0bfff17 	ldw	r2,-4(fp)
  a0e048:	10800317 	ldw	r2,12(r2)
  a0e04c:	10800104 	addi	r2,r2,4
  a0e050:	10800037 	ldwio	r2,0(r2)
  a0e054:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
  a0e058:	e0bffe17 	ldw	r2,-8(fp)
  a0e05c:	1080004c 	andi	r2,r2,1
  a0e060:	10803fcc 	andi	r2,r2,255
  a0e064:	1005003a 	cmpeq	r2,r2,zero
  a0e068:	1000021e 	bne	r2,zero,a0e074 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
  a0e06c:	00800044 	movi	r2,1
  a0e070:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
  a0e074:	e0bffd17 	ldw	r2,-12(fp)
}
  a0e078:	e037883a 	mov	sp,fp
  a0e07c:	df000017 	ldw	fp,0(sp)
  a0e080:	dec00104 	addi	sp,sp,4
  a0e084:	f800283a 	ret

00a0e088 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
  a0e088:	defff904 	addi	sp,sp,-28
  a0e08c:	df000615 	stw	fp,24(sp)
  a0e090:	df000604 	addi	fp,sp,24
  a0e094:	e13ffe15 	stw	r4,-8(fp)
  a0e098:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
  a0e09c:	e03ffa15 	stw	zero,-24(fp)
  a0e0a0:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
  a0e0a4:	e0bffe17 	ldw	r2,-8(fp)
  a0e0a8:	10000035 	stwio	zero,0(r2)
  lo = IORD(hw_base_address, ( which_section*4   ));
  a0e0ac:	e0bfff17 	ldw	r2,-4(fp)
  a0e0b0:	1004913a 	slli	r2,r2,4
  a0e0b4:	1007883a 	mov	r3,r2
  a0e0b8:	e0bffe17 	ldw	r2,-8(fp)
  a0e0bc:	1885883a 	add	r2,r3,r2
  a0e0c0:	10800037 	ldwio	r2,0(r2)
  a0e0c4:	e0bffd15 	stw	r2,-12(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
  a0e0c8:	e0bfff17 	ldw	r2,-4(fp)
  a0e0cc:	1004913a 	slli	r2,r2,4
  a0e0d0:	1007883a 	mov	r3,r2
  a0e0d4:	e0bffe17 	ldw	r2,-8(fp)
  a0e0d8:	1885883a 	add	r2,r3,r2
  a0e0dc:	10800104 	addi	r2,r2,4
  a0e0e0:	10800037 	ldwio	r2,0(r2)
  a0e0e4:	e0bffc15 	stw	r2,-16(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
  a0e0e8:	e0bffc17 	ldw	r2,-16(fp)
  a0e0ec:	0007883a 	mov	r3,zero
  a0e0f0:	100a983a 	sll	r5,r2,zero
  a0e0f4:	0009883a 	mov	r4,zero
  a0e0f8:	e0bffd17 	ldw	r2,-12(fp)
  a0e0fc:	0007883a 	mov	r3,zero
  a0e100:	208cb03a 	or	r6,r4,r2
  a0e104:	e1bffa15 	stw	r6,-24(fp)
  a0e108:	28c4b03a 	or	r2,r5,r3
  a0e10c:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
  a0e110:	e17ffa17 	ldw	r5,-24(fp)
  a0e114:	e1bffb17 	ldw	r6,-20(fp)
  a0e118:	2807883a 	mov	r3,r5
  a0e11c:	3009883a 	mov	r4,r6
}
  a0e120:	1805883a 	mov	r2,r3
  a0e124:	2007883a 	mov	r3,r4
  a0e128:	e037883a 	mov	sp,fp
  a0e12c:	df000017 	ldw	fp,0(sp)
  a0e130:	dec00104 	addi	sp,sp,4
  a0e134:	f800283a 	ret

00a0e138 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
  a0e138:	defffd04 	addi	sp,sp,-12
  a0e13c:	dfc00215 	stw	ra,8(sp)
  a0e140:	df000115 	stw	fp,4(sp)
  a0e144:	df000104 	addi	fp,sp,4
  a0e148:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
  a0e14c:	e13fff17 	ldw	r4,-4(fp)
  a0e150:	000b883a 	mov	r5,zero
  a0e154:	0a0e0880 	call	a0e088 <perf_get_section_time>
  a0e158:	1009883a 	mov	r4,r2
  a0e15c:	180b883a 	mov	r5,r3
  a0e160:	200d883a 	mov	r6,r4
  a0e164:	280f883a 	mov	r7,r5
  a0e168:	3007883a 	mov	r3,r6
  a0e16c:	3809883a 	mov	r4,r7
}
  a0e170:	1805883a 	mov	r2,r3
  a0e174:	2007883a 	mov	r3,r4
  a0e178:	e037883a 	mov	sp,fp
  a0e17c:	dfc00117 	ldw	ra,4(sp)
  a0e180:	df000017 	ldw	fp,0(sp)
  a0e184:	dec00204 	addi	sp,sp,8
  a0e188:	f800283a 	ret

00a0e18c <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
  a0e18c:	defffd04 	addi	sp,sp,-12
  a0e190:	df000215 	stw	fp,8(sp)
  a0e194:	df000204 	addi	fp,sp,8
  a0e198:	e13ffe15 	stw	r4,-8(fp)
  a0e19c:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
  a0e1a0:	e0bfff17 	ldw	r2,-4(fp)
  a0e1a4:	1004913a 	slli	r2,r2,4
  a0e1a8:	1007883a 	mov	r3,r2
  a0e1ac:	e0bffe17 	ldw	r2,-8(fp)
  a0e1b0:	1885883a 	add	r2,r3,r2
  a0e1b4:	10800204 	addi	r2,r2,8
  a0e1b8:	10800037 	ldwio	r2,0(r2)
}
  a0e1bc:	e037883a 	mov	sp,fp
  a0e1c0:	df000017 	ldw	fp,0(sp)
  a0e1c4:	dec00104 	addi	sp,sp,4
  a0e1c8:	f800283a 	ret

00a0e1cc <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
  a0e1cc:	deffff04 	addi	sp,sp,-4
  a0e1d0:	df000015 	stw	fp,0(sp)
  a0e1d4:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
  a0e1d8:	0005883a 	mov	r2,zero
#else
    return (void*)0;
#endif
}
  a0e1dc:	e037883a 	mov	sp,fp
  a0e1e0:	df000017 	ldw	fp,0(sp)
  a0e1e4:	dec00104 	addi	sp,sp,4
  a0e1e8:	f800283a 	ret

00a0e1ec <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
  a0e1ec:	deffff04 	addi	sp,sp,-4
  a0e1f0:	df000015 	stw	fp,0(sp)
  a0e1f4:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
  a0e1f8:	0080bef4 	movhi	r2,763
  a0e1fc:	10bc2004 	addi	r2,r2,-3968
}
  a0e200:	e037883a 	mov	sp,fp
  a0e204:	df000017 	ldw	fp,0(sp)
  a0e208:	dec00104 	addi	sp,sp,4
  a0e20c:	f800283a 	ret

00a0e210 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  a0e210:	defffc04 	addi	sp,sp,-16
  a0e214:	dfc00315 	stw	ra,12(sp)
  a0e218:	df000215 	stw	fp,8(sp)
  a0e21c:	df000204 	addi	fp,sp,8
  a0e220:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  a0e224:	e13fff17 	ldw	r4,-4(fp)
  a0e228:	01402874 	movhi	r5,161
  a0e22c:	294af404 	addi	r5,r5,11216
  a0e230:	0a0faf00 	call	a0faf0 <alt_find_dev>
  a0e234:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  a0e238:	e0bffe17 	ldw	r2,-8(fp)
}
  a0e23c:	e037883a 	mov	sp,fp
  a0e240:	dfc00117 	ldw	ra,4(sp)
  a0e244:	df000017 	ldw	fp,0(sp)
  a0e248:	dec00204 	addi	sp,sp,8
  a0e24c:	f800283a 	ret

00a0e250 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  a0e250:	defff904 	addi	sp,sp,-28
  a0e254:	df000615 	stw	fp,24(sp)
  a0e258:	df000604 	addi	fp,sp,24
  a0e25c:	e13ffb15 	stw	r4,-20(fp)
  a0e260:	e17ffc15 	stw	r5,-16(fp)
  a0e264:	e1bffd15 	stw	r6,-12(fp)
  a0e268:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  a0e26c:	e0bffb17 	ldw	r2,-20(fp)
  a0e270:	10c00f17 	ldw	r3,60(r2)
  a0e274:	e0bffd17 	ldw	r2,-12(fp)
  a0e278:	10c0042e 	bgeu	r2,r3,a0e28c <alt_up_pixel_buffer_dma_draw+0x3c>
  a0e27c:	e0bffb17 	ldw	r2,-20(fp)
  a0e280:	10c01017 	ldw	r3,64(r2)
  a0e284:	e0bffe17 	ldw	r2,-8(fp)
  a0e288:	10c00336 	bltu	r2,r3,a0e298 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  a0e28c:	00bfffc4 	movi	r2,-1
  a0e290:	e0bfff15 	stw	r2,-4(fp)
  a0e294:	00005106 	br	a0e3dc <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  a0e298:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  a0e29c:	e0bffb17 	ldw	r2,-20(fp)
  a0e2a0:	10800d17 	ldw	r2,52(r2)
  a0e2a4:	1004c03a 	cmpne	r2,r2,zero
  a0e2a8:	1000151e 	bne	r2,zero,a0e300 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  a0e2ac:	e0bffb17 	ldw	r2,-20(fp)
  a0e2b0:	10c01217 	ldw	r3,72(r2)
  a0e2b4:	e0bffd17 	ldw	r2,-12(fp)
  a0e2b8:	1886703a 	and	r3,r3,r2
  a0e2bc:	e0bffb17 	ldw	r2,-20(fp)
  a0e2c0:	10801117 	ldw	r2,68(r2)
  a0e2c4:	1886983a 	sll	r3,r3,r2
  a0e2c8:	e0bffa17 	ldw	r2,-24(fp)
  a0e2cc:	10c4b03a 	or	r2,r2,r3
  a0e2d0:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  a0e2d4:	e0bffb17 	ldw	r2,-20(fp)
  a0e2d8:	10c01417 	ldw	r3,80(r2)
  a0e2dc:	e0bffe17 	ldw	r2,-8(fp)
  a0e2e0:	1886703a 	and	r3,r3,r2
  a0e2e4:	e0bffb17 	ldw	r2,-20(fp)
  a0e2e8:	10801317 	ldw	r2,76(r2)
  a0e2ec:	1886983a 	sll	r3,r3,r2
  a0e2f0:	e0bffa17 	ldw	r2,-24(fp)
  a0e2f4:	10c4b03a 	or	r2,r2,r3
  a0e2f8:	e0bffa15 	stw	r2,-24(fp)
  a0e2fc:	00001706 	br	a0e35c <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  a0e300:	e0bffb17 	ldw	r2,-20(fp)
  a0e304:	10c01217 	ldw	r3,72(r2)
  a0e308:	e0bffd17 	ldw	r2,-12(fp)
  a0e30c:	1886703a 	and	r3,r3,r2
  a0e310:	e0bffb17 	ldw	r2,-20(fp)
  a0e314:	10801117 	ldw	r2,68(r2)
  a0e318:	1886983a 	sll	r3,r3,r2
  a0e31c:	e0bffa17 	ldw	r2,-24(fp)
  a0e320:	10c5883a 	add	r2,r2,r3
  a0e324:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  a0e328:	e0bffb17 	ldw	r2,-20(fp)
  a0e32c:	10c01417 	ldw	r3,80(r2)
  a0e330:	e0bffe17 	ldw	r2,-8(fp)
  a0e334:	1886703a 	and	r3,r3,r2
  a0e338:	e0bffb17 	ldw	r2,-20(fp)
  a0e33c:	10800f17 	ldw	r2,60(r2)
  a0e340:	1887383a 	mul	r3,r3,r2
  a0e344:	e0bffb17 	ldw	r2,-20(fp)
  a0e348:	10801117 	ldw	r2,68(r2)
  a0e34c:	1886983a 	sll	r3,r3,r2
  a0e350:	e0bffa17 	ldw	r2,-24(fp)
  a0e354:	10c5883a 	add	r2,r2,r3
  a0e358:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  a0e35c:	e0bffb17 	ldw	r2,-20(fp)
  a0e360:	10800e17 	ldw	r2,56(r2)
  a0e364:	10800058 	cmpnei	r2,r2,1
  a0e368:	1000081e 	bne	r2,zero,a0e38c <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  a0e36c:	e0bffb17 	ldw	r2,-20(fp)
  a0e370:	10800c17 	ldw	r2,48(r2)
  a0e374:	1007883a 	mov	r3,r2
  a0e378:	e0bffa17 	ldw	r2,-24(fp)
  a0e37c:	1885883a 	add	r2,r3,r2
  a0e380:	e0fffc17 	ldw	r3,-16(fp)
  a0e384:	10c00025 	stbio	r3,0(r2)
  a0e388:	00001306 	br	a0e3d8 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  a0e38c:	e0bffb17 	ldw	r2,-20(fp)
  a0e390:	10800e17 	ldw	r2,56(r2)
  a0e394:	10800098 	cmpnei	r2,r2,2
  a0e398:	1000081e 	bne	r2,zero,a0e3bc <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  a0e39c:	e0bffb17 	ldw	r2,-20(fp)
  a0e3a0:	10800c17 	ldw	r2,48(r2)
  a0e3a4:	1007883a 	mov	r3,r2
  a0e3a8:	e0bffa17 	ldw	r2,-24(fp)
  a0e3ac:	1885883a 	add	r2,r3,r2
  a0e3b0:	e0fffc17 	ldw	r3,-16(fp)
  a0e3b4:	10c0002d 	sthio	r3,0(r2)
  a0e3b8:	00000706 	br	a0e3d8 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  a0e3bc:	e0bffb17 	ldw	r2,-20(fp)
  a0e3c0:	10800c17 	ldw	r2,48(r2)
  a0e3c4:	1007883a 	mov	r3,r2
  a0e3c8:	e0bffa17 	ldw	r2,-24(fp)
  a0e3cc:	1885883a 	add	r2,r3,r2
  a0e3d0:	e0fffc17 	ldw	r3,-16(fp)
  a0e3d4:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  a0e3d8:	e03fff15 	stw	zero,-4(fp)
  a0e3dc:	e0bfff17 	ldw	r2,-4(fp)
}
  a0e3e0:	e037883a 	mov	sp,fp
  a0e3e4:	df000017 	ldw	fp,0(sp)
  a0e3e8:	dec00104 	addi	sp,sp,4
  a0e3ec:	f800283a 	ret

00a0e3f0 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  a0e3f0:	defffd04 	addi	sp,sp,-12
  a0e3f4:	df000215 	stw	fp,8(sp)
  a0e3f8:	df000204 	addi	fp,sp,8
  a0e3fc:	e13ffe15 	stw	r4,-8(fp)
  a0e400:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  a0e404:	e0bffe17 	ldw	r2,-8(fp)
  a0e408:	10800a17 	ldw	r2,40(r2)
  a0e40c:	10800104 	addi	r2,r2,4
  a0e410:	e0ffff17 	ldw	r3,-4(fp)
  a0e414:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  a0e418:	e0bffe17 	ldw	r2,-8(fp)
  a0e41c:	10800a17 	ldw	r2,40(r2)
  a0e420:	10800104 	addi	r2,r2,4
  a0e424:	10800037 	ldwio	r2,0(r2)
  a0e428:	1007883a 	mov	r3,r2
  a0e42c:	e0bffe17 	ldw	r2,-8(fp)
  a0e430:	10c00c15 	stw	r3,48(r2)
	return 0;
  a0e434:	0005883a 	mov	r2,zero
}
  a0e438:	e037883a 	mov	sp,fp
  a0e43c:	df000017 	ldw	fp,0(sp)
  a0e440:	dec00104 	addi	sp,sp,4
  a0e444:	f800283a 	ret

00a0e448 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  a0e448:	defffe04 	addi	sp,sp,-8
  a0e44c:	df000115 	stw	fp,4(sp)
  a0e450:	df000104 	addi	fp,sp,4
  a0e454:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  a0e458:	e0bfff17 	ldw	r2,-4(fp)
  a0e45c:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  a0e460:	e0bfff17 	ldw	r2,-4(fp)
  a0e464:	10800a17 	ldw	r2,40(r2)
  a0e468:	1007883a 	mov	r3,r2
  a0e46c:	00800044 	movi	r2,1
  a0e470:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  a0e474:	e0bfff17 	ldw	r2,-4(fp)
  a0e478:	10c00b17 	ldw	r3,44(r2)
  a0e47c:	e0bfff17 	ldw	r2,-4(fp)
  a0e480:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  a0e484:	e0bfff17 	ldw	r2,-4(fp)
  a0e488:	11000b15 	stw	r4,44(r2)
	return 0;
  a0e48c:	0005883a 	mov	r2,zero
}
  a0e490:	e037883a 	mov	sp,fp
  a0e494:	df000017 	ldw	fp,0(sp)
  a0e498:	dec00104 	addi	sp,sp,4
  a0e49c:	f800283a 	ret

00a0e4a0 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  a0e4a0:	defffe04 	addi	sp,sp,-8
  a0e4a4:	df000115 	stw	fp,4(sp)
  a0e4a8:	df000104 	addi	fp,sp,4
  a0e4ac:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  a0e4b0:	e0bfff17 	ldw	r2,-4(fp)
  a0e4b4:	10800a17 	ldw	r2,40(r2)
  a0e4b8:	10800304 	addi	r2,r2,12
  a0e4bc:	10800037 	ldwio	r2,0(r2)
  a0e4c0:	1080004c 	andi	r2,r2,1
}
  a0e4c4:	e037883a 	mov	sp,fp
  a0e4c8:	df000017 	ldw	fp,0(sp)
  a0e4cc:	dec00104 	addi	sp,sp,4
  a0e4d0:	f800283a 	ret

00a0e4d4 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  a0e4d4:	defff604 	addi	sp,sp,-40
  a0e4d8:	df000915 	stw	fp,36(sp)
  a0e4dc:	df000904 	addi	fp,sp,36
  a0e4e0:	e13ff715 	stw	r4,-36(fp)
  a0e4e4:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  a0e4e8:	e0bff817 	ldw	r2,-32(fp)
  a0e4ec:	10800058 	cmpnei	r2,r2,1
  a0e4f0:	1000041e 	bne	r2,zero,a0e504 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  a0e4f4:	e0bff717 	ldw	r2,-36(fp)
  a0e4f8:	10800c17 	ldw	r2,48(r2)
  a0e4fc:	e0bfff15 	stw	r2,-4(fp)
  a0e500:	00000306 	br	a0e510 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  a0e504:	e0bff717 	ldw	r2,-36(fp)
  a0e508:	10800b17 	ldw	r2,44(r2)
  a0e50c:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  a0e510:	e0bff717 	ldw	r2,-36(fp)
  a0e514:	10800f17 	ldw	r2,60(r2)
  a0e518:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  a0e51c:	e0bff717 	ldw	r2,-36(fp)
  a0e520:	10800e17 	ldw	r2,56(r2)
  a0e524:	10800098 	cmpnei	r2,r2,2
  a0e528:	1000051e 	bne	r2,zero,a0e540 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  a0e52c:	e0fffe17 	ldw	r3,-8(fp)
  a0e530:	e0fffe17 	ldw	r3,-8(fp)
  a0e534:	18c5883a 	add	r2,r3,r3
  a0e538:	e0bffe15 	stw	r2,-8(fp)
  a0e53c:	00000506 	br	a0e554 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  a0e540:	e13ffe17 	ldw	r4,-8(fp)
  a0e544:	e13ffe17 	ldw	r4,-8(fp)
  a0e548:	2105883a 	add	r2,r4,r4
  a0e54c:	1085883a 	add	r2,r2,r2
  a0e550:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  a0e554:	e0bff717 	ldw	r2,-36(fp)
  a0e558:	10801017 	ldw	r2,64(r2)
  a0e55c:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  a0e560:	e0bff717 	ldw	r2,-36(fp)
  a0e564:	10800d17 	ldw	r2,52(r2)
  a0e568:	1004c03a 	cmpne	r2,r2,zero
  a0e56c:	10001e1e 	bne	r2,zero,a0e5e8 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  a0e570:	e0bff717 	ldw	r2,-36(fp)
  a0e574:	10801317 	ldw	r2,76(r2)
  a0e578:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  a0e57c:	e03ffb15 	stw	zero,-20(fp)
  a0e580:	00001506 	br	a0e5d8 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  a0e584:	e03ffc15 	stw	zero,-16(fp)
  a0e588:	00000706 	br	a0e5a8 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  a0e58c:	e0ffff17 	ldw	r3,-4(fp)
  a0e590:	e0bffc17 	ldw	r2,-16(fp)
  a0e594:	1885883a 	add	r2,r3,r2
  a0e598:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  a0e59c:	e0bffc17 	ldw	r2,-16(fp)
  a0e5a0:	10800104 	addi	r2,r2,4
  a0e5a4:	e0bffc15 	stw	r2,-16(fp)
  a0e5a8:	e0fffc17 	ldw	r3,-16(fp)
  a0e5ac:	e13ffe17 	ldw	r4,-8(fp)
  a0e5b0:	193ff636 	bltu	r3,r4,a0e58c <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  a0e5b4:	e0fffa17 	ldw	r3,-24(fp)
  a0e5b8:	00800044 	movi	r2,1
  a0e5bc:	10c4983a 	sll	r2,r2,r3
  a0e5c0:	e0ffff17 	ldw	r3,-4(fp)
  a0e5c4:	1887883a 	add	r3,r3,r2
  a0e5c8:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  a0e5cc:	e13ffb17 	ldw	r4,-20(fp)
  a0e5d0:	21000044 	addi	r4,r4,1
  a0e5d4:	e13ffb15 	stw	r4,-20(fp)
  a0e5d8:	e0bffb17 	ldw	r2,-20(fp)
  a0e5dc:	e0fffd17 	ldw	r3,-12(fp)
  a0e5e0:	10ffe836 	bltu	r2,r3,a0e584 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  a0e5e4:	00001006 	br	a0e628 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  a0e5e8:	e13ffd17 	ldw	r4,-12(fp)
  a0e5ec:	e0bffe17 	ldw	r2,-8(fp)
  a0e5f0:	2089383a 	mul	r4,r4,r2
  a0e5f4:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  a0e5f8:	e03ff915 	stw	zero,-28(fp)
  a0e5fc:	00000706 	br	a0e61c <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  a0e600:	e0ffff17 	ldw	r3,-4(fp)
  a0e604:	e0bff917 	ldw	r2,-28(fp)
  a0e608:	1885883a 	add	r2,r3,r2
  a0e60c:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  a0e610:	e0fff917 	ldw	r3,-28(fp)
  a0e614:	18c00104 	addi	r3,r3,4
  a0e618:	e0fff915 	stw	r3,-28(fp)
  a0e61c:	e0bff917 	ldw	r2,-28(fp)
  a0e620:	e13ffd17 	ldw	r4,-12(fp)
  a0e624:	113ff636 	bltu	r2,r4,a0e600 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  a0e628:	e037883a 	mov	sp,fp
  a0e62c:	df000017 	ldw	fp,0(sp)
  a0e630:	dec00104 	addi	sp,sp,4
  a0e634:	f800283a 	ret

00a0e638 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  a0e638:	deffed04 	addi	sp,sp,-76
  a0e63c:	df001215 	stw	fp,72(sp)
  a0e640:	df001204 	addi	fp,sp,72
  a0e644:	e13fee15 	stw	r4,-72(fp)
  a0e648:	e17fef15 	stw	r5,-68(fp)
  a0e64c:	e1bff015 	stw	r6,-64(fp)
  a0e650:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  a0e654:	e0bfee17 	ldw	r2,-72(fp)
  a0e658:	10800f17 	ldw	r2,60(r2)
  a0e65c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  a0e660:	e0bfee17 	ldw	r2,-72(fp)
  a0e664:	10801017 	ldw	r2,64(r2)
  a0e668:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  a0e66c:	e0bfef17 	ldw	r2,-68(fp)
  a0e670:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  a0e674:	e0fff117 	ldw	r3,-60(fp)
  a0e678:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  a0e67c:	e13ff017 	ldw	r4,-64(fp)
  a0e680:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  a0e684:	e0800117 	ldw	r2,4(fp)
  a0e688:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  a0e68c:	e0c00217 	ldw	r3,8(fp)
  a0e690:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  a0e694:	e13ffa17 	ldw	r4,-24(fp)
  a0e698:	e0bffb17 	ldw	r2,-20(fp)
  a0e69c:	2080062e 	bgeu	r4,r2,a0e6b8 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  a0e6a0:	e0fffb17 	ldw	r3,-20(fp)
  a0e6a4:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  a0e6a8:	e13ffa17 	ldw	r4,-24(fp)
  a0e6ac:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  a0e6b0:	e0bffc17 	ldw	r2,-16(fp)
  a0e6b4:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  a0e6b8:	e0fff817 	ldw	r3,-32(fp)
  a0e6bc:	e13ff917 	ldw	r4,-28(fp)
  a0e6c0:	1900062e 	bgeu	r3,r4,a0e6dc <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  a0e6c4:	e0bff917 	ldw	r2,-28(fp)
  a0e6c8:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  a0e6cc:	e0fff817 	ldw	r3,-32(fp)
  a0e6d0:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  a0e6d4:	e13ffc17 	ldw	r4,-16(fp)
  a0e6d8:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  a0e6dc:	e0bffb17 	ldw	r2,-20(fp)
  a0e6e0:	e0fffe17 	ldw	r3,-8(fp)
  a0e6e4:	10c10d2e 	bgeu	r2,r3,a0eb1c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  a0e6e8:	e13ff917 	ldw	r4,-28(fp)
  a0e6ec:	e0bffd17 	ldw	r2,-12(fp)
  a0e6f0:	20800136 	bltu	r4,r2,a0e6f8 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  a0e6f4:	00010906 	br	a0eb1c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  a0e6f8:	e0fffa17 	ldw	r3,-24(fp)
  a0e6fc:	e13ffe17 	ldw	r4,-8(fp)
  a0e700:	19000336 	bltu	r3,r4,a0e710 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  a0e704:	e0bffe17 	ldw	r2,-8(fp)
  a0e708:	10bfffc4 	addi	r2,r2,-1
  a0e70c:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  a0e710:	e0fff817 	ldw	r3,-32(fp)
  a0e714:	e13ffd17 	ldw	r4,-12(fp)
  a0e718:	19000336 	bltu	r3,r4,a0e728 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  a0e71c:	e0bffd17 	ldw	r2,-12(fp)
  a0e720:	10bfffc4 	addi	r2,r2,-1
  a0e724:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  a0e728:	e0800317 	ldw	r2,12(fp)
  a0e72c:	10800058 	cmpnei	r2,r2,1
  a0e730:	1000041e 	bne	r2,zero,a0e744 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  a0e734:	e0bfee17 	ldw	r2,-72(fp)
  a0e738:	10800c17 	ldw	r2,48(r2)
  a0e73c:	e0bfff15 	stw	r2,-4(fp)
  a0e740:	00000306 	br	a0e750 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  a0e744:	e0bfee17 	ldw	r2,-72(fp)
  a0e748:	10800b17 	ldw	r2,44(r2)
  a0e74c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  a0e750:	e0bfee17 	ldw	r2,-72(fp)
  a0e754:	10800d17 	ldw	r2,52(r2)
  a0e758:	1004c03a 	cmpne	r2,r2,zero
  a0e75c:	1000721e 	bne	r2,zero,a0e928 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  a0e760:	e0bfee17 	ldw	r2,-72(fp)
  a0e764:	10801317 	ldw	r2,76(r2)
  a0e768:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  a0e76c:	e0bff417 	ldw	r2,-48(fp)
  a0e770:	e0fff917 	ldw	r3,-28(fp)
  a0e774:	1884983a 	sll	r2,r3,r2
  a0e778:	e13fff17 	ldw	r4,-4(fp)
  a0e77c:	2089883a 	add	r4,r4,r2
  a0e780:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  a0e784:	e0bfee17 	ldw	r2,-72(fp)
  a0e788:	10800e17 	ldw	r2,56(r2)
  a0e78c:	10800058 	cmpnei	r2,r2,1
  a0e790:	10001e1e 	bne	r2,zero,a0e80c <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  a0e794:	e0bff917 	ldw	r2,-28(fp)
  a0e798:	e0bff515 	stw	r2,-44(fp)
  a0e79c:	00001706 	br	a0e7fc <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  a0e7a0:	e0fffb17 	ldw	r3,-20(fp)
  a0e7a4:	e0fff615 	stw	r3,-40(fp)
  a0e7a8:	00000806 	br	a0e7cc <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  a0e7ac:	e0ffff17 	ldw	r3,-4(fp)
  a0e7b0:	e0bff617 	ldw	r2,-40(fp)
  a0e7b4:	1885883a 	add	r2,r3,r2
  a0e7b8:	e0fff717 	ldw	r3,-36(fp)
  a0e7bc:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  a0e7c0:	e13ff617 	ldw	r4,-40(fp)
  a0e7c4:	21000044 	addi	r4,r4,1
  a0e7c8:	e13ff615 	stw	r4,-40(fp)
  a0e7cc:	e0bffa17 	ldw	r2,-24(fp)
  a0e7d0:	e0fff617 	ldw	r3,-40(fp)
  a0e7d4:	10fff52e 	bgeu	r2,r3,a0e7ac <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  a0e7d8:	e0fff417 	ldw	r3,-48(fp)
  a0e7dc:	00800044 	movi	r2,1
  a0e7e0:	10c4983a 	sll	r2,r2,r3
  a0e7e4:	e13fff17 	ldw	r4,-4(fp)
  a0e7e8:	2089883a 	add	r4,r4,r2
  a0e7ec:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  a0e7f0:	e0bff517 	ldw	r2,-44(fp)
  a0e7f4:	10800044 	addi	r2,r2,1
  a0e7f8:	e0bff515 	stw	r2,-44(fp)
  a0e7fc:	e0fff817 	ldw	r3,-32(fp)
  a0e800:	e13ff517 	ldw	r4,-44(fp)
  a0e804:	193fe62e 	bgeu	r3,r4,a0e7a0 <alt_up_pixel_buffer_dma_draw_box+0x168>
  a0e808:	0000c406 	br	a0eb1c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  a0e80c:	e0bfee17 	ldw	r2,-72(fp)
  a0e810:	10800e17 	ldw	r2,56(r2)
  a0e814:	10800098 	cmpnei	r2,r2,2
  a0e818:	1000211e 	bne	r2,zero,a0e8a0 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  a0e81c:	e0bff917 	ldw	r2,-28(fp)
  a0e820:	e0bff515 	stw	r2,-44(fp)
  a0e824:	00001a06 	br	a0e890 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  a0e828:	e0fffb17 	ldw	r3,-20(fp)
  a0e82c:	e0fff615 	stw	r3,-40(fp)
  a0e830:	00000b06 	br	a0e860 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  a0e834:	e13ff617 	ldw	r4,-40(fp)
  a0e838:	e13ff617 	ldw	r4,-40(fp)
  a0e83c:	2105883a 	add	r2,r4,r4
  a0e840:	1007883a 	mov	r3,r2
  a0e844:	e0bfff17 	ldw	r2,-4(fp)
  a0e848:	1885883a 	add	r2,r3,r2
  a0e84c:	e0fff717 	ldw	r3,-36(fp)
  a0e850:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  a0e854:	e0bff617 	ldw	r2,-40(fp)
  a0e858:	10800044 	addi	r2,r2,1
  a0e85c:	e0bff615 	stw	r2,-40(fp)
  a0e860:	e0fffa17 	ldw	r3,-24(fp)
  a0e864:	e13ff617 	ldw	r4,-40(fp)
  a0e868:	193ff22e 	bgeu	r3,r4,a0e834 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  a0e86c:	e0fff417 	ldw	r3,-48(fp)
  a0e870:	00800044 	movi	r2,1
  a0e874:	10c4983a 	sll	r2,r2,r3
  a0e878:	e0ffff17 	ldw	r3,-4(fp)
  a0e87c:	1887883a 	add	r3,r3,r2
  a0e880:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  a0e884:	e13ff517 	ldw	r4,-44(fp)
  a0e888:	21000044 	addi	r4,r4,1
  a0e88c:	e13ff515 	stw	r4,-44(fp)
  a0e890:	e0bff817 	ldw	r2,-32(fp)
  a0e894:	e0fff517 	ldw	r3,-44(fp)
  a0e898:	10ffe32e 	bgeu	r2,r3,a0e828 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  a0e89c:	00009f06 	br	a0eb1c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  a0e8a0:	e13ff917 	ldw	r4,-28(fp)
  a0e8a4:	e13ff515 	stw	r4,-44(fp)
  a0e8a8:	00001b06 	br	a0e918 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  a0e8ac:	e0bffb17 	ldw	r2,-20(fp)
  a0e8b0:	e0bff615 	stw	r2,-40(fp)
  a0e8b4:	00000c06 	br	a0e8e8 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  a0e8b8:	e0fff617 	ldw	r3,-40(fp)
  a0e8bc:	e0fff617 	ldw	r3,-40(fp)
  a0e8c0:	18c5883a 	add	r2,r3,r3
  a0e8c4:	1085883a 	add	r2,r2,r2
  a0e8c8:	1007883a 	mov	r3,r2
  a0e8cc:	e0bfff17 	ldw	r2,-4(fp)
  a0e8d0:	1885883a 	add	r2,r3,r2
  a0e8d4:	e0fff717 	ldw	r3,-36(fp)
  a0e8d8:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  a0e8dc:	e13ff617 	ldw	r4,-40(fp)
  a0e8e0:	21000044 	addi	r4,r4,1
  a0e8e4:	e13ff615 	stw	r4,-40(fp)
  a0e8e8:	e0bffa17 	ldw	r2,-24(fp)
  a0e8ec:	e0fff617 	ldw	r3,-40(fp)
  a0e8f0:	10fff12e 	bgeu	r2,r3,a0e8b8 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  a0e8f4:	e0fff417 	ldw	r3,-48(fp)
  a0e8f8:	00800044 	movi	r2,1
  a0e8fc:	10c4983a 	sll	r2,r2,r3
  a0e900:	e13fff17 	ldw	r4,-4(fp)
  a0e904:	2089883a 	add	r4,r4,r2
  a0e908:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  a0e90c:	e0bff517 	ldw	r2,-44(fp)
  a0e910:	10800044 	addi	r2,r2,1
  a0e914:	e0bff515 	stw	r2,-44(fp)
  a0e918:	e0fff817 	ldw	r3,-32(fp)
  a0e91c:	e13ff517 	ldw	r4,-44(fp)
  a0e920:	193fe22e 	bgeu	r3,r4,a0e8ac <alt_up_pixel_buffer_dma_draw_box+0x274>
  a0e924:	00007d06 	br	a0eb1c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  a0e928:	e0bfee17 	ldw	r2,-72(fp)
  a0e92c:	10800e17 	ldw	r2,56(r2)
  a0e930:	10800058 	cmpnei	r2,r2,1
  a0e934:	1000221e 	bne	r2,zero,a0e9c0 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  a0e938:	e0fff917 	ldw	r3,-28(fp)
  a0e93c:	e13ffe17 	ldw	r4,-8(fp)
  a0e940:	1905383a 	mul	r2,r3,r4
  a0e944:	e0ffff17 	ldw	r3,-4(fp)
  a0e948:	1887883a 	add	r3,r3,r2
  a0e94c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  a0e950:	e13ff917 	ldw	r4,-28(fp)
  a0e954:	e13ff215 	stw	r4,-56(fp)
  a0e958:	00001506 	br	a0e9b0 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  a0e95c:	e0bffb17 	ldw	r2,-20(fp)
  a0e960:	e0bff315 	stw	r2,-52(fp)
  a0e964:	00000806 	br	a0e988 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  a0e968:	e0ffff17 	ldw	r3,-4(fp)
  a0e96c:	e0bff317 	ldw	r2,-52(fp)
  a0e970:	1885883a 	add	r2,r3,r2
  a0e974:	e0fff717 	ldw	r3,-36(fp)
  a0e978:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  a0e97c:	e0fff317 	ldw	r3,-52(fp)
  a0e980:	18c00044 	addi	r3,r3,1
  a0e984:	e0fff315 	stw	r3,-52(fp)
  a0e988:	e13ffa17 	ldw	r4,-24(fp)
  a0e98c:	e0bff317 	ldw	r2,-52(fp)
  a0e990:	20bff52e 	bgeu	r4,r2,a0e968 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  a0e994:	e0ffff17 	ldw	r3,-4(fp)
  a0e998:	e13ffe17 	ldw	r4,-8(fp)
  a0e99c:	1907883a 	add	r3,r3,r4
  a0e9a0:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  a0e9a4:	e0bff217 	ldw	r2,-56(fp)
  a0e9a8:	10800044 	addi	r2,r2,1
  a0e9ac:	e0bff215 	stw	r2,-56(fp)
  a0e9b0:	e0fff817 	ldw	r3,-32(fp)
  a0e9b4:	e13ff217 	ldw	r4,-56(fp)
  a0e9b8:	193fe82e 	bgeu	r3,r4,a0e95c <alt_up_pixel_buffer_dma_draw_box+0x324>
  a0e9bc:	00005706 	br	a0eb1c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  a0e9c0:	e0bfee17 	ldw	r2,-72(fp)
  a0e9c4:	10800e17 	ldw	r2,56(r2)
  a0e9c8:	10800098 	cmpnei	r2,r2,2
  a0e9cc:	1000291e 	bne	r2,zero,a0ea74 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  a0e9d0:	e0fffe17 	ldw	r3,-8(fp)
  a0e9d4:	e0fffe17 	ldw	r3,-8(fp)
  a0e9d8:	18c5883a 	add	r2,r3,r3
  a0e9dc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  a0e9e0:	e13ff917 	ldw	r4,-28(fp)
  a0e9e4:	e0fffe17 	ldw	r3,-8(fp)
  a0e9e8:	20c5383a 	mul	r2,r4,r3
  a0e9ec:	e13fff17 	ldw	r4,-4(fp)
  a0e9f0:	2089883a 	add	r4,r4,r2
  a0e9f4:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  a0e9f8:	e0bff917 	ldw	r2,-28(fp)
  a0e9fc:	e0bff215 	stw	r2,-56(fp)
  a0ea00:	00001806 	br	a0ea64 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  a0ea04:	e0fffb17 	ldw	r3,-20(fp)
  a0ea08:	e0fff315 	stw	r3,-52(fp)
  a0ea0c:	00000b06 	br	a0ea3c <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  a0ea10:	e13ff317 	ldw	r4,-52(fp)
  a0ea14:	e13ff317 	ldw	r4,-52(fp)
  a0ea18:	2105883a 	add	r2,r4,r4
  a0ea1c:	1007883a 	mov	r3,r2
  a0ea20:	e0bfff17 	ldw	r2,-4(fp)
  a0ea24:	1885883a 	add	r2,r3,r2
  a0ea28:	e0fff717 	ldw	r3,-36(fp)
  a0ea2c:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  a0ea30:	e0bff317 	ldw	r2,-52(fp)
  a0ea34:	10800044 	addi	r2,r2,1
  a0ea38:	e0bff315 	stw	r2,-52(fp)
  a0ea3c:	e0fffa17 	ldw	r3,-24(fp)
  a0ea40:	e13ff317 	ldw	r4,-52(fp)
  a0ea44:	193ff22e 	bgeu	r3,r4,a0ea10 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  a0ea48:	e0bfff17 	ldw	r2,-4(fp)
  a0ea4c:	e0fffe17 	ldw	r3,-8(fp)
  a0ea50:	10c5883a 	add	r2,r2,r3
  a0ea54:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  a0ea58:	e13ff217 	ldw	r4,-56(fp)
  a0ea5c:	21000044 	addi	r4,r4,1
  a0ea60:	e13ff215 	stw	r4,-56(fp)
  a0ea64:	e0bff817 	ldw	r2,-32(fp)
  a0ea68:	e0fff217 	ldw	r3,-56(fp)
  a0ea6c:	10ffe52e 	bgeu	r2,r3,a0ea04 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  a0ea70:	00002a06 	br	a0eb1c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  a0ea74:	e13ffe17 	ldw	r4,-8(fp)
  a0ea78:	e13ffe17 	ldw	r4,-8(fp)
  a0ea7c:	2105883a 	add	r2,r4,r4
  a0ea80:	1085883a 	add	r2,r2,r2
  a0ea84:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  a0ea88:	e0fff917 	ldw	r3,-28(fp)
  a0ea8c:	e13ffe17 	ldw	r4,-8(fp)
  a0ea90:	1905383a 	mul	r2,r3,r4
  a0ea94:	e0ffff17 	ldw	r3,-4(fp)
  a0ea98:	1887883a 	add	r3,r3,r2
  a0ea9c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  a0eaa0:	e13ff917 	ldw	r4,-28(fp)
  a0eaa4:	e13ff215 	stw	r4,-56(fp)
  a0eaa8:	00001906 	br	a0eb10 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  a0eaac:	e0bffb17 	ldw	r2,-20(fp)
  a0eab0:	e0bff315 	stw	r2,-52(fp)
  a0eab4:	00000c06 	br	a0eae8 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  a0eab8:	e0fff317 	ldw	r3,-52(fp)
  a0eabc:	e0fff317 	ldw	r3,-52(fp)
  a0eac0:	18c5883a 	add	r2,r3,r3
  a0eac4:	1085883a 	add	r2,r2,r2
  a0eac8:	1007883a 	mov	r3,r2
  a0eacc:	e0bfff17 	ldw	r2,-4(fp)
  a0ead0:	1885883a 	add	r2,r3,r2
  a0ead4:	e0fff717 	ldw	r3,-36(fp)
  a0ead8:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  a0eadc:	e13ff317 	ldw	r4,-52(fp)
  a0eae0:	21000044 	addi	r4,r4,1
  a0eae4:	e13ff315 	stw	r4,-52(fp)
  a0eae8:	e0bffa17 	ldw	r2,-24(fp)
  a0eaec:	e0fff317 	ldw	r3,-52(fp)
  a0eaf0:	10fff12e 	bgeu	r2,r3,a0eab8 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  a0eaf4:	e13fff17 	ldw	r4,-4(fp)
  a0eaf8:	e0bffe17 	ldw	r2,-8(fp)
  a0eafc:	2089883a 	add	r4,r4,r2
  a0eb00:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  a0eb04:	e0fff217 	ldw	r3,-56(fp)
  a0eb08:	18c00044 	addi	r3,r3,1
  a0eb0c:	e0fff215 	stw	r3,-56(fp)
  a0eb10:	e13ff817 	ldw	r4,-32(fp)
  a0eb14:	e0bff217 	ldw	r2,-56(fp)
  a0eb18:	20bfe42e 	bgeu	r4,r2,a0eaac <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  a0eb1c:	e037883a 	mov	sp,fp
  a0eb20:	df000017 	ldw	fp,0(sp)
  a0eb24:	dec00104 	addi	sp,sp,4
  a0eb28:	f800283a 	ret

00a0eb2c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  a0eb2c:	defff204 	addi	sp,sp,-56
  a0eb30:	df000d15 	stw	fp,52(sp)
  a0eb34:	df000d04 	addi	fp,sp,52
  a0eb38:	e13ff315 	stw	r4,-52(fp)
  a0eb3c:	e17ff415 	stw	r5,-48(fp)
  a0eb40:	e1bff515 	stw	r6,-44(fp)
  a0eb44:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  a0eb48:	e0bff317 	ldw	r2,-52(fp)
  a0eb4c:	10800f17 	ldw	r2,60(r2)
  a0eb50:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  a0eb54:	e0bff317 	ldw	r2,-52(fp)
  a0eb58:	10801017 	ldw	r2,64(r2)
  a0eb5c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  a0eb60:	e0bff417 	ldw	r2,-48(fp)
  a0eb64:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  a0eb68:	e0fff517 	ldw	r3,-44(fp)
  a0eb6c:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  a0eb70:	e13ff617 	ldw	r4,-40(fp)
  a0eb74:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  a0eb78:	e0800117 	ldw	r2,4(fp)
  a0eb7c:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  a0eb80:	e0fffb17 	ldw	r3,-20(fp)
  a0eb84:	e13ffc17 	ldw	r4,-16(fp)
  a0eb88:	1900042e 	bgeu	r3,r4,a0eb9c <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  a0eb8c:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  a0eb90:	e0fffb17 	ldw	r3,-20(fp)
  a0eb94:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  a0eb98:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  a0eb9c:	e13ffc17 	ldw	r4,-16(fp)
  a0eba0:	e0bffe17 	ldw	r2,-8(fp)
  a0eba4:	2080b12e 	bgeu	r4,r2,a0ee6c <alt_up_pixel_buffer_dma_draw_hline+0x340>
  a0eba8:	e0fffa17 	ldw	r3,-24(fp)
  a0ebac:	e13ffd17 	ldw	r4,-12(fp)
  a0ebb0:	19000136 	bltu	r3,r4,a0ebb8 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  a0ebb4:	0000ad06 	br	a0ee6c <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  a0ebb8:	e0bffb17 	ldw	r2,-20(fp)
  a0ebbc:	e0fffe17 	ldw	r3,-8(fp)
  a0ebc0:	10c00336 	bltu	r2,r3,a0ebd0 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  a0ebc4:	e13ffe17 	ldw	r4,-8(fp)
  a0ebc8:	213fffc4 	addi	r4,r4,-1
  a0ebcc:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  a0ebd0:	e0800217 	ldw	r2,8(fp)
  a0ebd4:	10800058 	cmpnei	r2,r2,1
  a0ebd8:	1000041e 	bne	r2,zero,a0ebec <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  a0ebdc:	e0bff317 	ldw	r2,-52(fp)
  a0ebe0:	10800c17 	ldw	r2,48(r2)
  a0ebe4:	e0bfff15 	stw	r2,-4(fp)
  a0ebe8:	00000306 	br	a0ebf8 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  a0ebec:	e0bff317 	ldw	r2,-52(fp)
  a0ebf0:	10800b17 	ldw	r2,44(r2)
  a0ebf4:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  a0ebf8:	e0bff317 	ldw	r2,-52(fp)
  a0ebfc:	10800d17 	ldw	r2,52(r2)
  a0ec00:	1004c03a 	cmpne	r2,r2,zero
  a0ec04:	1000431e 	bne	r2,zero,a0ed14 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  a0ec08:	e0bff317 	ldw	r2,-52(fp)
  a0ec0c:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  a0ec10:	e0fffa17 	ldw	r3,-24(fp)
  a0ec14:	1884983a 	sll	r2,r3,r2
  a0ec18:	e13fff17 	ldw	r4,-4(fp)
  a0ec1c:	2089883a 	add	r4,r4,r2
  a0ec20:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  a0ec24:	e0bff317 	ldw	r2,-52(fp)
  a0ec28:	10800e17 	ldw	r2,56(r2)
  a0ec2c:	10800058 	cmpnei	r2,r2,1
  a0ec30:	10000f1e 	bne	r2,zero,a0ec70 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  a0ec34:	e0bffc17 	ldw	r2,-16(fp)
  a0ec38:	e0bff815 	stw	r2,-32(fp)
  a0ec3c:	00000806 	br	a0ec60 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  a0ec40:	e0ffff17 	ldw	r3,-4(fp)
  a0ec44:	e0bff817 	ldw	r2,-32(fp)
  a0ec48:	1885883a 	add	r2,r3,r2
  a0ec4c:	e0fff917 	ldw	r3,-28(fp)
  a0ec50:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  a0ec54:	e0fff817 	ldw	r3,-32(fp)
  a0ec58:	18c00044 	addi	r3,r3,1
  a0ec5c:	e0fff815 	stw	r3,-32(fp)
  a0ec60:	e13ffb17 	ldw	r4,-20(fp)
  a0ec64:	e0bff817 	ldw	r2,-32(fp)
  a0ec68:	20bff52e 	bgeu	r4,r2,a0ec40 <alt_up_pixel_buffer_dma_draw_hline+0x114>
  a0ec6c:	00007f06 	br	a0ee6c <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  a0ec70:	e0bff317 	ldw	r2,-52(fp)
  a0ec74:	10800e17 	ldw	r2,56(r2)
  a0ec78:	10800098 	cmpnei	r2,r2,2
  a0ec7c:	1000121e 	bne	r2,zero,a0ecc8 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  a0ec80:	e0fffc17 	ldw	r3,-16(fp)
  a0ec84:	e0fff815 	stw	r3,-32(fp)
  a0ec88:	00000b06 	br	a0ecb8 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  a0ec8c:	e13ff817 	ldw	r4,-32(fp)
  a0ec90:	e13ff817 	ldw	r4,-32(fp)
  a0ec94:	2105883a 	add	r2,r4,r4
  a0ec98:	1007883a 	mov	r3,r2
  a0ec9c:	e0bfff17 	ldw	r2,-4(fp)
  a0eca0:	1885883a 	add	r2,r3,r2
  a0eca4:	e0fff917 	ldw	r3,-28(fp)
  a0eca8:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  a0ecac:	e0bff817 	ldw	r2,-32(fp)
  a0ecb0:	10800044 	addi	r2,r2,1
  a0ecb4:	e0bff815 	stw	r2,-32(fp)
  a0ecb8:	e0fffb17 	ldw	r3,-20(fp)
  a0ecbc:	e13ff817 	ldw	r4,-32(fp)
  a0ecc0:	193ff22e 	bgeu	r3,r4,a0ec8c <alt_up_pixel_buffer_dma_draw_hline+0x160>
  a0ecc4:	00006906 	br	a0ee6c <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  a0ecc8:	e0bffc17 	ldw	r2,-16(fp)
  a0eccc:	e0bff815 	stw	r2,-32(fp)
  a0ecd0:	00000c06 	br	a0ed04 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  a0ecd4:	e0fff817 	ldw	r3,-32(fp)
  a0ecd8:	e0fff817 	ldw	r3,-32(fp)
  a0ecdc:	18c5883a 	add	r2,r3,r3
  a0ece0:	1085883a 	add	r2,r2,r2
  a0ece4:	1007883a 	mov	r3,r2
  a0ece8:	e0bfff17 	ldw	r2,-4(fp)
  a0ecec:	1885883a 	add	r2,r3,r2
  a0ecf0:	e0fff917 	ldw	r3,-28(fp)
  a0ecf4:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  a0ecf8:	e13ff817 	ldw	r4,-32(fp)
  a0ecfc:	21000044 	addi	r4,r4,1
  a0ed00:	e13ff815 	stw	r4,-32(fp)
  a0ed04:	e0bffb17 	ldw	r2,-20(fp)
  a0ed08:	e0fff817 	ldw	r3,-32(fp)
  a0ed0c:	10fff12e 	bgeu	r2,r3,a0ecd4 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  a0ed10:	00005606 	br	a0ee6c <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  a0ed14:	e0bff317 	ldw	r2,-52(fp)
  a0ed18:	10800e17 	ldw	r2,56(r2)
  a0ed1c:	10800058 	cmpnei	r2,r2,1
  a0ed20:	1000151e 	bne	r2,zero,a0ed78 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  a0ed24:	e13ffa17 	ldw	r4,-24(fp)
  a0ed28:	e0fffe17 	ldw	r3,-8(fp)
  a0ed2c:	20c5383a 	mul	r2,r4,r3
  a0ed30:	e13fff17 	ldw	r4,-4(fp)
  a0ed34:	2089883a 	add	r4,r4,r2
  a0ed38:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  a0ed3c:	e0bffc17 	ldw	r2,-16(fp)
  a0ed40:	e0bff715 	stw	r2,-36(fp)
  a0ed44:	00000806 	br	a0ed68 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  a0ed48:	e0ffff17 	ldw	r3,-4(fp)
  a0ed4c:	e0bff717 	ldw	r2,-36(fp)
  a0ed50:	1885883a 	add	r2,r3,r2
  a0ed54:	e0fff917 	ldw	r3,-28(fp)
  a0ed58:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  a0ed5c:	e0fff717 	ldw	r3,-36(fp)
  a0ed60:	18c00044 	addi	r3,r3,1
  a0ed64:	e0fff715 	stw	r3,-36(fp)
  a0ed68:	e13ffb17 	ldw	r4,-20(fp)
  a0ed6c:	e0bff717 	ldw	r2,-36(fp)
  a0ed70:	20bff52e 	bgeu	r4,r2,a0ed48 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  a0ed74:	00003d06 	br	a0ee6c <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  a0ed78:	e0bff317 	ldw	r2,-52(fp)
  a0ed7c:	10800e17 	ldw	r2,56(r2)
  a0ed80:	10800098 	cmpnei	r2,r2,2
  a0ed84:	10001c1e 	bne	r2,zero,a0edf8 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  a0ed88:	e0fffe17 	ldw	r3,-8(fp)
  a0ed8c:	e0fffe17 	ldw	r3,-8(fp)
  a0ed90:	18c5883a 	add	r2,r3,r3
  a0ed94:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  a0ed98:	e13ffa17 	ldw	r4,-24(fp)
  a0ed9c:	e0fffe17 	ldw	r3,-8(fp)
  a0eda0:	20c5383a 	mul	r2,r4,r3
  a0eda4:	e13fff17 	ldw	r4,-4(fp)
  a0eda8:	2089883a 	add	r4,r4,r2
  a0edac:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  a0edb0:	e0bffc17 	ldw	r2,-16(fp)
  a0edb4:	e0bff715 	stw	r2,-36(fp)
  a0edb8:	00000b06 	br	a0ede8 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  a0edbc:	e0fff717 	ldw	r3,-36(fp)
  a0edc0:	e0fff717 	ldw	r3,-36(fp)
  a0edc4:	18c5883a 	add	r2,r3,r3
  a0edc8:	1007883a 	mov	r3,r2
  a0edcc:	e0bfff17 	ldw	r2,-4(fp)
  a0edd0:	1885883a 	add	r2,r3,r2
  a0edd4:	e0fff917 	ldw	r3,-28(fp)
  a0edd8:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  a0eddc:	e13ff717 	ldw	r4,-36(fp)
  a0ede0:	21000044 	addi	r4,r4,1
  a0ede4:	e13ff715 	stw	r4,-36(fp)
  a0ede8:	e0bffb17 	ldw	r2,-20(fp)
  a0edec:	e0fff717 	ldw	r3,-36(fp)
  a0edf0:	10fff22e 	bgeu	r2,r3,a0edbc <alt_up_pixel_buffer_dma_draw_hline+0x290>
  a0edf4:	00001d06 	br	a0ee6c <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  a0edf8:	e13ffe17 	ldw	r4,-8(fp)
  a0edfc:	e13ffe17 	ldw	r4,-8(fp)
  a0ee00:	2105883a 	add	r2,r4,r4
  a0ee04:	1085883a 	add	r2,r2,r2
  a0ee08:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  a0ee0c:	e0fffa17 	ldw	r3,-24(fp)
  a0ee10:	e13ffe17 	ldw	r4,-8(fp)
  a0ee14:	1905383a 	mul	r2,r3,r4
  a0ee18:	e0ffff17 	ldw	r3,-4(fp)
  a0ee1c:	1887883a 	add	r3,r3,r2
  a0ee20:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  a0ee24:	e13ffc17 	ldw	r4,-16(fp)
  a0ee28:	e13ff715 	stw	r4,-36(fp)
  a0ee2c:	00000c06 	br	a0ee60 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  a0ee30:	e0fff717 	ldw	r3,-36(fp)
  a0ee34:	e0fff717 	ldw	r3,-36(fp)
  a0ee38:	18c5883a 	add	r2,r3,r3
  a0ee3c:	1085883a 	add	r2,r2,r2
  a0ee40:	1007883a 	mov	r3,r2
  a0ee44:	e0bfff17 	ldw	r2,-4(fp)
  a0ee48:	1885883a 	add	r2,r3,r2
  a0ee4c:	e0fff917 	ldw	r3,-28(fp)
  a0ee50:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  a0ee54:	e13ff717 	ldw	r4,-36(fp)
  a0ee58:	21000044 	addi	r4,r4,1
  a0ee5c:	e13ff715 	stw	r4,-36(fp)
  a0ee60:	e0bffb17 	ldw	r2,-20(fp)
  a0ee64:	e0fff717 	ldw	r3,-36(fp)
  a0ee68:	10fff12e 	bgeu	r2,r3,a0ee30 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  a0ee6c:	e037883a 	mov	sp,fp
  a0ee70:	df000017 	ldw	fp,0(sp)
  a0ee74:	dec00104 	addi	sp,sp,4
  a0ee78:	f800283a 	ret

00a0ee7c <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  a0ee7c:	defff104 	addi	sp,sp,-60
  a0ee80:	df000e15 	stw	fp,56(sp)
  a0ee84:	df000e04 	addi	fp,sp,56
  a0ee88:	e13ff215 	stw	r4,-56(fp)
  a0ee8c:	e17ff315 	stw	r5,-52(fp)
  a0ee90:	e1bff415 	stw	r6,-48(fp)
  a0ee94:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  a0ee98:	e0bff217 	ldw	r2,-56(fp)
  a0ee9c:	10800f17 	ldw	r2,60(r2)
  a0eea0:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  a0eea4:	e0bff217 	ldw	r2,-56(fp)
  a0eea8:	10801017 	ldw	r2,64(r2)
  a0eeac:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  a0eeb0:	e0bff317 	ldw	r2,-52(fp)
  a0eeb4:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  a0eeb8:	e0fff417 	ldw	r3,-48(fp)
  a0eebc:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  a0eec0:	e13ff517 	ldw	r4,-44(fp)
  a0eec4:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  a0eec8:	e0800117 	ldw	r2,4(fp)
  a0eecc:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  a0eed0:	e0fffa17 	ldw	r3,-24(fp)
  a0eed4:	e13ffb17 	ldw	r4,-20(fp)
  a0eed8:	1900042e 	bgeu	r3,r4,a0eeec <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  a0eedc:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  a0eee0:	e0fffa17 	ldw	r3,-24(fp)
  a0eee4:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  a0eee8:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  a0eeec:	e13ffc17 	ldw	r4,-16(fp)
  a0eef0:	e0bffe17 	ldw	r2,-8(fp)
  a0eef4:	2080d12e 	bgeu	r4,r2,a0f23c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  a0eef8:	e0fffb17 	ldw	r3,-20(fp)
  a0eefc:	e13ffd17 	ldw	r4,-12(fp)
  a0ef00:	19000136 	bltu	r3,r4,a0ef08 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  a0ef04:	0000cd06 	br	a0f23c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  a0ef08:	e0bffa17 	ldw	r2,-24(fp)
  a0ef0c:	e0fffd17 	ldw	r3,-12(fp)
  a0ef10:	10c00336 	bltu	r2,r3,a0ef20 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  a0ef14:	e13ffd17 	ldw	r4,-12(fp)
  a0ef18:	213fffc4 	addi	r4,r4,-1
  a0ef1c:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  a0ef20:	e0800217 	ldw	r2,8(fp)
  a0ef24:	10800058 	cmpnei	r2,r2,1
  a0ef28:	1000041e 	bne	r2,zero,a0ef3c <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  a0ef2c:	e0bff217 	ldw	r2,-56(fp)
  a0ef30:	10800c17 	ldw	r2,48(r2)
  a0ef34:	e0bfff15 	stw	r2,-4(fp)
  a0ef38:	00000306 	br	a0ef48 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  a0ef3c:	e0bff217 	ldw	r2,-56(fp)
  a0ef40:	10800b17 	ldw	r2,44(r2)
  a0ef44:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  a0ef48:	e0bff217 	ldw	r2,-56(fp)
  a0ef4c:	10800d17 	ldw	r2,52(r2)
  a0ef50:	1004c03a 	cmpne	r2,r2,zero
  a0ef54:	1000571e 	bne	r2,zero,a0f0b4 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  a0ef58:	e0bff217 	ldw	r2,-56(fp)
  a0ef5c:	10801317 	ldw	r2,76(r2)
  a0ef60:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  a0ef64:	e0bff717 	ldw	r2,-36(fp)
  a0ef68:	e0fffb17 	ldw	r3,-20(fp)
  a0ef6c:	1884983a 	sll	r2,r3,r2
  a0ef70:	e13fff17 	ldw	r4,-4(fp)
  a0ef74:	2089883a 	add	r4,r4,r2
  a0ef78:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  a0ef7c:	e0bff217 	ldw	r2,-56(fp)
  a0ef80:	10800e17 	ldw	r2,56(r2)
  a0ef84:	10800058 	cmpnei	r2,r2,1
  a0ef88:	1000151e 	bne	r2,zero,a0efe0 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  a0ef8c:	e0bffb17 	ldw	r2,-20(fp)
  a0ef90:	e0bff815 	stw	r2,-32(fp)
  a0ef94:	00000e06 	br	a0efd0 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  a0ef98:	e0ffff17 	ldw	r3,-4(fp)
  a0ef9c:	e0bffc17 	ldw	r2,-16(fp)
  a0efa0:	1885883a 	add	r2,r3,r2
  a0efa4:	e0fff917 	ldw	r3,-28(fp)
  a0efa8:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  a0efac:	e0fff717 	ldw	r3,-36(fp)
  a0efb0:	00800044 	movi	r2,1
  a0efb4:	10c4983a 	sll	r2,r2,r3
  a0efb8:	e0ffff17 	ldw	r3,-4(fp)
  a0efbc:	1887883a 	add	r3,r3,r2
  a0efc0:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  a0efc4:	e13ff817 	ldw	r4,-32(fp)
  a0efc8:	21000044 	addi	r4,r4,1
  a0efcc:	e13ff815 	stw	r4,-32(fp)
  a0efd0:	e0bffa17 	ldw	r2,-24(fp)
  a0efd4:	e0fff817 	ldw	r3,-32(fp)
  a0efd8:	10ffef2e 	bgeu	r2,r3,a0ef98 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  a0efdc:	00009706 	br	a0f23c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  a0efe0:	e0bff217 	ldw	r2,-56(fp)
  a0efe4:	10800e17 	ldw	r2,56(r2)
  a0efe8:	10800098 	cmpnei	r2,r2,2
  a0efec:	1000181e 	bne	r2,zero,a0f050 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  a0eff0:	e13ffb17 	ldw	r4,-20(fp)
  a0eff4:	e13ff815 	stw	r4,-32(fp)
  a0eff8:	00001106 	br	a0f040 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  a0effc:	e0fffc17 	ldw	r3,-16(fp)
  a0f000:	e0fffc17 	ldw	r3,-16(fp)
  a0f004:	18c5883a 	add	r2,r3,r3
  a0f008:	1007883a 	mov	r3,r2
  a0f00c:	e0bfff17 	ldw	r2,-4(fp)
  a0f010:	1885883a 	add	r2,r3,r2
  a0f014:	e0fff917 	ldw	r3,-28(fp)
  a0f018:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  a0f01c:	e0fff717 	ldw	r3,-36(fp)
  a0f020:	00800044 	movi	r2,1
  a0f024:	10c4983a 	sll	r2,r2,r3
  a0f028:	e13fff17 	ldw	r4,-4(fp)
  a0f02c:	2089883a 	add	r4,r4,r2
  a0f030:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  a0f034:	e0bff817 	ldw	r2,-32(fp)
  a0f038:	10800044 	addi	r2,r2,1
  a0f03c:	e0bff815 	stw	r2,-32(fp)
  a0f040:	e0fffa17 	ldw	r3,-24(fp)
  a0f044:	e13ff817 	ldw	r4,-32(fp)
  a0f048:	193fec2e 	bgeu	r3,r4,a0effc <alt_up_pixel_buffer_dma_draw_vline+0x180>
  a0f04c:	00007b06 	br	a0f23c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  a0f050:	e0bffb17 	ldw	r2,-20(fp)
  a0f054:	e0bff815 	stw	r2,-32(fp)
  a0f058:	00001206 	br	a0f0a4 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  a0f05c:	e0fffc17 	ldw	r3,-16(fp)
  a0f060:	e0fffc17 	ldw	r3,-16(fp)
  a0f064:	18c5883a 	add	r2,r3,r3
  a0f068:	1085883a 	add	r2,r2,r2
  a0f06c:	1007883a 	mov	r3,r2
  a0f070:	e0bfff17 	ldw	r2,-4(fp)
  a0f074:	1885883a 	add	r2,r3,r2
  a0f078:	e0fff917 	ldw	r3,-28(fp)
  a0f07c:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  a0f080:	e0fff717 	ldw	r3,-36(fp)
  a0f084:	00800044 	movi	r2,1
  a0f088:	10c4983a 	sll	r2,r2,r3
  a0f08c:	e13fff17 	ldw	r4,-4(fp)
  a0f090:	2089883a 	add	r4,r4,r2
  a0f094:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  a0f098:	e0bff817 	ldw	r2,-32(fp)
  a0f09c:	10800044 	addi	r2,r2,1
  a0f0a0:	e0bff815 	stw	r2,-32(fp)
  a0f0a4:	e0fffa17 	ldw	r3,-24(fp)
  a0f0a8:	e13ff817 	ldw	r4,-32(fp)
  a0f0ac:	193feb2e 	bgeu	r3,r4,a0f05c <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  a0f0b0:	00006206 	br	a0f23c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  a0f0b4:	e0bff217 	ldw	r2,-56(fp)
  a0f0b8:	10800e17 	ldw	r2,56(r2)
  a0f0bc:	10800058 	cmpnei	r2,r2,1
  a0f0c0:	1000191e 	bne	r2,zero,a0f128 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  a0f0c4:	e0fffb17 	ldw	r3,-20(fp)
  a0f0c8:	e13ffe17 	ldw	r4,-8(fp)
  a0f0cc:	1905383a 	mul	r2,r3,r4
  a0f0d0:	e0ffff17 	ldw	r3,-4(fp)
  a0f0d4:	1887883a 	add	r3,r3,r2
  a0f0d8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  a0f0dc:	e13ffb17 	ldw	r4,-20(fp)
  a0f0e0:	e13ff615 	stw	r4,-40(fp)
  a0f0e4:	00000c06 	br	a0f118 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  a0f0e8:	e0ffff17 	ldw	r3,-4(fp)
  a0f0ec:	e0bffc17 	ldw	r2,-16(fp)
  a0f0f0:	1885883a 	add	r2,r3,r2
  a0f0f4:	e0fff917 	ldw	r3,-28(fp)
  a0f0f8:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  a0f0fc:	e0bfff17 	ldw	r2,-4(fp)
  a0f100:	e0fffe17 	ldw	r3,-8(fp)
  a0f104:	10c5883a 	add	r2,r2,r3
  a0f108:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  a0f10c:	e13ff617 	ldw	r4,-40(fp)
  a0f110:	21000044 	addi	r4,r4,1
  a0f114:	e13ff615 	stw	r4,-40(fp)
  a0f118:	e0bffa17 	ldw	r2,-24(fp)
  a0f11c:	e0fff617 	ldw	r3,-40(fp)
  a0f120:	10fff12e 	bgeu	r2,r3,a0f0e8 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  a0f124:	00004506 	br	a0f23c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  a0f128:	e0bff217 	ldw	r2,-56(fp)
  a0f12c:	10800e17 	ldw	r2,56(r2)
  a0f130:	10800098 	cmpnei	r2,r2,2
  a0f134:	1000201e 	bne	r2,zero,a0f1b8 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  a0f138:	e13ffe17 	ldw	r4,-8(fp)
  a0f13c:	e13ffe17 	ldw	r4,-8(fp)
  a0f140:	2105883a 	add	r2,r4,r4
  a0f144:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  a0f148:	e0fffb17 	ldw	r3,-20(fp)
  a0f14c:	e13ffe17 	ldw	r4,-8(fp)
  a0f150:	1905383a 	mul	r2,r3,r4
  a0f154:	e0ffff17 	ldw	r3,-4(fp)
  a0f158:	1887883a 	add	r3,r3,r2
  a0f15c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  a0f160:	e13ffb17 	ldw	r4,-20(fp)
  a0f164:	e13ff615 	stw	r4,-40(fp)
  a0f168:	00000f06 	br	a0f1a8 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  a0f16c:	e0fffc17 	ldw	r3,-16(fp)
  a0f170:	e0fffc17 	ldw	r3,-16(fp)
  a0f174:	18c5883a 	add	r2,r3,r3
  a0f178:	1007883a 	mov	r3,r2
  a0f17c:	e0bfff17 	ldw	r2,-4(fp)
  a0f180:	1885883a 	add	r2,r3,r2
  a0f184:	e0fff917 	ldw	r3,-28(fp)
  a0f188:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  a0f18c:	e13fff17 	ldw	r4,-4(fp)
  a0f190:	e0bffe17 	ldw	r2,-8(fp)
  a0f194:	2089883a 	add	r4,r4,r2
  a0f198:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  a0f19c:	e0fff617 	ldw	r3,-40(fp)
  a0f1a0:	18c00044 	addi	r3,r3,1
  a0f1a4:	e0fff615 	stw	r3,-40(fp)
  a0f1a8:	e13ffa17 	ldw	r4,-24(fp)
  a0f1ac:	e0bff617 	ldw	r2,-40(fp)
  a0f1b0:	20bfee2e 	bgeu	r4,r2,a0f16c <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  a0f1b4:	00002106 	br	a0f23c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  a0f1b8:	e0fffe17 	ldw	r3,-8(fp)
  a0f1bc:	e0fffe17 	ldw	r3,-8(fp)
  a0f1c0:	18c5883a 	add	r2,r3,r3
  a0f1c4:	1085883a 	add	r2,r2,r2
  a0f1c8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  a0f1cc:	e13ffb17 	ldw	r4,-20(fp)
  a0f1d0:	e0fffe17 	ldw	r3,-8(fp)
  a0f1d4:	20c5383a 	mul	r2,r4,r3
  a0f1d8:	e13fff17 	ldw	r4,-4(fp)
  a0f1dc:	2089883a 	add	r4,r4,r2
  a0f1e0:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  a0f1e4:	e0bffb17 	ldw	r2,-20(fp)
  a0f1e8:	e0bff615 	stw	r2,-40(fp)
  a0f1ec:	00001006 	br	a0f230 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  a0f1f0:	e0fffc17 	ldw	r3,-16(fp)
  a0f1f4:	e0fffc17 	ldw	r3,-16(fp)
  a0f1f8:	18c5883a 	add	r2,r3,r3
  a0f1fc:	1085883a 	add	r2,r2,r2
  a0f200:	1007883a 	mov	r3,r2
  a0f204:	e0bfff17 	ldw	r2,-4(fp)
  a0f208:	1885883a 	add	r2,r3,r2
  a0f20c:	e0fff917 	ldw	r3,-28(fp)
  a0f210:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  a0f214:	e13fff17 	ldw	r4,-4(fp)
  a0f218:	e0bffe17 	ldw	r2,-8(fp)
  a0f21c:	2089883a 	add	r4,r4,r2
  a0f220:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  a0f224:	e0fff617 	ldw	r3,-40(fp)
  a0f228:	18c00044 	addi	r3,r3,1
  a0f22c:	e0fff615 	stw	r3,-40(fp)
  a0f230:	e13ffa17 	ldw	r4,-24(fp)
  a0f234:	e0bff617 	ldw	r2,-40(fp)
  a0f238:	20bfed2e 	bgeu	r4,r2,a0f1f0 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  a0f23c:	e037883a 	mov	sp,fp
  a0f240:	df000017 	ldw	fp,0(sp)
  a0f244:	dec00104 	addi	sp,sp,4
  a0f248:	f800283a 	ret

00a0f24c <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  a0f24c:	defff804 	addi	sp,sp,-32
  a0f250:	dfc00715 	stw	ra,28(sp)
  a0f254:	df000615 	stw	fp,24(sp)
  a0f258:	df000604 	addi	fp,sp,24
  a0f25c:	e13ffc15 	stw	r4,-16(fp)
  a0f260:	e17ffd15 	stw	r5,-12(fp)
  a0f264:	e1bffe15 	stw	r6,-8(fp)
  a0f268:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  a0f26c:	e0800317 	ldw	r2,12(fp)
  a0f270:	d8800015 	stw	r2,0(sp)
  a0f274:	e0800417 	ldw	r2,16(fp)
  a0f278:	d8800115 	stw	r2,4(sp)
  a0f27c:	e13ffc17 	ldw	r4,-16(fp)
  a0f280:	e17ffd17 	ldw	r5,-12(fp)
  a0f284:	e1bfff17 	ldw	r6,-4(fp)
  a0f288:	e1fffe17 	ldw	r7,-8(fp)
  a0f28c:	0a0eb2c0 	call	a0eb2c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  a0f290:	e0800317 	ldw	r2,12(fp)
  a0f294:	d8800015 	stw	r2,0(sp)
  a0f298:	e0800417 	ldw	r2,16(fp)
  a0f29c:	d8800115 	stw	r2,4(sp)
  a0f2a0:	e13ffc17 	ldw	r4,-16(fp)
  a0f2a4:	e17ffd17 	ldw	r5,-12(fp)
  a0f2a8:	e1bfff17 	ldw	r6,-4(fp)
  a0f2ac:	e1c00217 	ldw	r7,8(fp)
  a0f2b0:	0a0eb2c0 	call	a0eb2c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  a0f2b4:	e0800317 	ldw	r2,12(fp)
  a0f2b8:	d8800015 	stw	r2,0(sp)
  a0f2bc:	e0800417 	ldw	r2,16(fp)
  a0f2c0:	d8800115 	stw	r2,4(sp)
  a0f2c4:	e13ffc17 	ldw	r4,-16(fp)
  a0f2c8:	e17ffd17 	ldw	r5,-12(fp)
  a0f2cc:	e1bffe17 	ldw	r6,-8(fp)
  a0f2d0:	e1c00217 	ldw	r7,8(fp)
  a0f2d4:	0a0ee7c0 	call	a0ee7c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  a0f2d8:	e0800317 	ldw	r2,12(fp)
  a0f2dc:	d8800015 	stw	r2,0(sp)
  a0f2e0:	e0800417 	ldw	r2,16(fp)
  a0f2e4:	d8800115 	stw	r2,4(sp)
  a0f2e8:	e13ffc17 	ldw	r4,-16(fp)
  a0f2ec:	e17fff17 	ldw	r5,-4(fp)
  a0f2f0:	e1bffe17 	ldw	r6,-8(fp)
  a0f2f4:	e1c00217 	ldw	r7,8(fp)
  a0f2f8:	0a0ee7c0 	call	a0ee7c <alt_up_pixel_buffer_dma_draw_vline>
}
  a0f2fc:	e037883a 	mov	sp,fp
  a0f300:	dfc00117 	ldw	ra,4(sp)
  a0f304:	df000017 	ldw	fp,0(sp)
  a0f308:	dec00204 	addi	sp,sp,8
  a0f30c:	f800283a 	ret

00a0f310 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  a0f310:	defffb04 	addi	sp,sp,-20
  a0f314:	df000415 	stw	fp,16(sp)
  a0f318:	df000404 	addi	fp,sp,16
  a0f31c:	e13ffc15 	stw	r4,-16(fp)
  a0f320:	e17ffd15 	stw	r5,-12(fp)
  a0f324:	e1bffe15 	stw	r6,-8(fp)
  a0f328:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  a0f32c:	e0c00217 	ldw	r3,8(fp)
  a0f330:	1804c03a 	cmpne	r2,r3,zero
  a0f334:	10000b1e 	bne	r2,zero,a0f364 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  a0f338:	e13ffd17 	ldw	r4,-12(fp)
  a0f33c:	e0ffff17 	ldw	r3,-4(fp)
  a0f340:	20c5383a 	mul	r2,r4,r3
  a0f344:	e13ffe17 	ldw	r4,-8(fp)
  a0f348:	1105883a 	add	r2,r2,r4
  a0f34c:	1007883a 	mov	r3,r2
  a0f350:	e0bffc17 	ldw	r2,-16(fp)
  a0f354:	1885883a 	add	r2,r3,r2
  a0f358:	e0c00117 	ldw	r3,4(fp)
  a0f35c:	10c00025 	stbio	r3,0(r2)
  a0f360:	00001b06 	br	a0f3d0 <helper_plot_pixel+0xc0>
	else if (mode == 1)
  a0f364:	e1000217 	ldw	r4,8(fp)
  a0f368:	20800058 	cmpnei	r2,r4,1
  a0f36c:	10000c1e 	bne	r2,zero,a0f3a0 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  a0f370:	e0fffd17 	ldw	r3,-12(fp)
  a0f374:	e13fff17 	ldw	r4,-4(fp)
  a0f378:	1905383a 	mul	r2,r3,r4
  a0f37c:	e0fffe17 	ldw	r3,-8(fp)
  a0f380:	10c5883a 	add	r2,r2,r3
  a0f384:	1085883a 	add	r2,r2,r2
  a0f388:	1007883a 	mov	r3,r2
  a0f38c:	e0bffc17 	ldw	r2,-16(fp)
  a0f390:	1885883a 	add	r2,r3,r2
  a0f394:	e1000117 	ldw	r4,4(fp)
  a0f398:	1100002d 	sthio	r4,0(r2)
  a0f39c:	00000c06 	br	a0f3d0 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  a0f3a0:	e0fffd17 	ldw	r3,-12(fp)
  a0f3a4:	e13fff17 	ldw	r4,-4(fp)
  a0f3a8:	1905383a 	mul	r2,r3,r4
  a0f3ac:	e0fffe17 	ldw	r3,-8(fp)
  a0f3b0:	10c5883a 	add	r2,r2,r3
  a0f3b4:	1085883a 	add	r2,r2,r2
  a0f3b8:	1085883a 	add	r2,r2,r2
  a0f3bc:	1007883a 	mov	r3,r2
  a0f3c0:	e0bffc17 	ldw	r2,-16(fp)
  a0f3c4:	1885883a 	add	r2,r3,r2
  a0f3c8:	e1000117 	ldw	r4,4(fp)
  a0f3cc:	11000035 	stwio	r4,0(r2)
}
  a0f3d0:	e037883a 	mov	sp,fp
  a0f3d4:	df000017 	ldw	fp,0(sp)
  a0f3d8:	dec00104 	addi	sp,sp,4
  a0f3dc:	f800283a 	ret

00a0f3e0 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  a0f3e0:	deffe404 	addi	sp,sp,-112
  a0f3e4:	dfc01b15 	stw	ra,108(sp)
  a0f3e8:	df001a15 	stw	fp,104(sp)
  a0f3ec:	df001a04 	addi	fp,sp,104
  a0f3f0:	e13fe815 	stw	r4,-96(fp)
  a0f3f4:	e17fe915 	stw	r5,-92(fp)
  a0f3f8:	e1bfea15 	stw	r6,-88(fp)
  a0f3fc:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  a0f400:	e0bfe917 	ldw	r2,-92(fp)
  a0f404:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  a0f408:	e0ffea17 	ldw	r3,-88(fp)
  a0f40c:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  a0f410:	e13feb17 	ldw	r4,-84(fp)
  a0f414:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  a0f418:	e0800217 	ldw	r2,8(fp)
  a0f41c:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  a0f420:	e0fff717 	ldw	r3,-36(fp)
  a0f424:	e13ff917 	ldw	r4,-28(fp)
  a0f428:	1905c83a 	sub	r2,r3,r4
  a0f42c:	e0bfff15 	stw	r2,-4(fp)
  a0f430:	e0ffff17 	ldw	r3,-4(fp)
  a0f434:	1804403a 	cmpge	r2,r3,zero
  a0f438:	1000031e 	bne	r2,zero,a0f448 <alt_up_pixel_buffer_dma_draw_line+0x68>
  a0f43c:	e13fff17 	ldw	r4,-4(fp)
  a0f440:	0109c83a 	sub	r4,zero,r4
  a0f444:	e13fff15 	stw	r4,-4(fp)
  a0f448:	e0fff817 	ldw	r3,-32(fp)
  a0f44c:	e13ffa17 	ldw	r4,-24(fp)
  a0f450:	1905c83a 	sub	r2,r3,r4
  a0f454:	e0bffe15 	stw	r2,-8(fp)
  a0f458:	e0fffe17 	ldw	r3,-8(fp)
  a0f45c:	1804403a 	cmpge	r2,r3,zero
  a0f460:	1000031e 	bne	r2,zero,a0f470 <alt_up_pixel_buffer_dma_draw_line+0x90>
  a0f464:	e13ffe17 	ldw	r4,-8(fp)
  a0f468:	0109c83a 	sub	r4,zero,r4
  a0f46c:	e13ffe15 	stw	r4,-8(fp)
  a0f470:	e0fffe17 	ldw	r3,-8(fp)
  a0f474:	e13fff17 	ldw	r4,-4(fp)
  a0f478:	1904803a 	cmplt	r2,r3,r4
  a0f47c:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  a0f480:	e0bfe817 	ldw	r2,-96(fp)
  a0f484:	10800e17 	ldw	r2,56(r2)
  a0f488:	10800060 	cmpeqi	r2,r2,1
  a0f48c:	10000c1e 	bne	r2,zero,a0f4c0 <alt_up_pixel_buffer_dma_draw_line+0xe0>
  a0f490:	e0bfe817 	ldw	r2,-96(fp)
  a0f494:	10800e17 	ldw	r2,56(r2)
  a0f498:	10800098 	cmpnei	r2,r2,2
  a0f49c:	1000031e 	bne	r2,zero,a0f4ac <alt_up_pixel_buffer_dma_draw_line+0xcc>
  a0f4a0:	00800044 	movi	r2,1
  a0f4a4:	e0bffc15 	stw	r2,-16(fp)
  a0f4a8:	00000206 	br	a0f4b4 <alt_up_pixel_buffer_dma_draw_line+0xd4>
  a0f4ac:	00c00084 	movi	r3,2
  a0f4b0:	e0fffc15 	stw	r3,-16(fp)
  a0f4b4:	e13ffc17 	ldw	r4,-16(fp)
  a0f4b8:	e13ffd15 	stw	r4,-12(fp)
  a0f4bc:	00000106 	br	a0f4c4 <alt_up_pixel_buffer_dma_draw_line+0xe4>
  a0f4c0:	e03ffd15 	stw	zero,-12(fp)
  a0f4c4:	e0bffd17 	ldw	r2,-12(fp)
  a0f4c8:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  a0f4cc:	e0c00317 	ldw	r3,12(fp)
  a0f4d0:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  a0f4d4:	e0bfe817 	ldw	r2,-96(fp)
  a0f4d8:	10800d17 	ldw	r2,52(r2)
  a0f4dc:	1004c03a 	cmpne	r2,r2,zero
  a0f4e0:	1000091e 	bne	r2,zero,a0f508 <alt_up_pixel_buffer_dma_draw_line+0x128>
  a0f4e4:	e0bfe817 	ldw	r2,-96(fp)
  a0f4e8:	10c01317 	ldw	r3,76(r2)
  a0f4ec:	e0bfef17 	ldw	r2,-68(fp)
  a0f4f0:	1885c83a 	sub	r2,r3,r2
  a0f4f4:	1007883a 	mov	r3,r2
  a0f4f8:	00800044 	movi	r2,1
  a0f4fc:	10c4983a 	sll	r2,r2,r3
  a0f500:	e0bffb15 	stw	r2,-20(fp)
  a0f504:	00000306 	br	a0f514 <alt_up_pixel_buffer_dma_draw_line+0x134>
  a0f508:	e0bfe817 	ldw	r2,-96(fp)
  a0f50c:	10800f17 	ldw	r2,60(r2)
  a0f510:	e0bffb15 	stw	r2,-20(fp)
  a0f514:	e13ffb17 	ldw	r4,-20(fp)
  a0f518:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  a0f51c:	e0800417 	ldw	r2,16(fp)
  a0f520:	10800058 	cmpnei	r2,r2,1
  a0f524:	1000041e 	bne	r2,zero,a0f538 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  a0f528:	e0bfe817 	ldw	r2,-96(fp)
  a0f52c:	10800c17 	ldw	r2,48(r2)
  a0f530:	e0bfed15 	stw	r2,-76(fp)
  a0f534:	00000306 	br	a0f544 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  a0f538:	e0bfe817 	ldw	r2,-96(fp)
  a0f53c:	10800b17 	ldw	r2,44(r2)
  a0f540:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  a0f544:	e0fff603 	ldbu	r3,-40(fp)
  a0f548:	18803fcc 	andi	r2,r3,255
  a0f54c:	1080201c 	xori	r2,r2,128
  a0f550:	10bfe004 	addi	r2,r2,-128
  a0f554:	10800050 	cmplti	r2,r2,1
  a0f558:	10000c1e 	bne	r2,zero,a0f58c <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  a0f55c:	e13ffa17 	ldw	r4,-24(fp)
  a0f560:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  a0f564:	e0bff917 	ldw	r2,-28(fp)
  a0f568:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  a0f56c:	e0fff317 	ldw	r3,-52(fp)
  a0f570:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  a0f574:	e13ff817 	ldw	r4,-32(fp)
  a0f578:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  a0f57c:	e0bff717 	ldw	r2,-36(fp)
  a0f580:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  a0f584:	e0fff317 	ldw	r3,-52(fp)
  a0f588:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  a0f58c:	e13ff817 	ldw	r4,-32(fp)
  a0f590:	e0bffa17 	ldw	r2,-24(fp)
  a0f594:	20800c0e 	bge	r4,r2,a0f5c8 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  a0f598:	e0fffa17 	ldw	r3,-24(fp)
  a0f59c:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  a0f5a0:	e13ff817 	ldw	r4,-32(fp)
  a0f5a4:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  a0f5a8:	e0bff317 	ldw	r2,-52(fp)
  a0f5ac:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  a0f5b0:	e0fff917 	ldw	r3,-28(fp)
  a0f5b4:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  a0f5b8:	e13ff717 	ldw	r4,-36(fp)
  a0f5bc:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  a0f5c0:	e0bff317 	ldw	r2,-52(fp)
  a0f5c4:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  a0f5c8:	e0fff817 	ldw	r3,-32(fp)
  a0f5cc:	e13ffa17 	ldw	r4,-24(fp)
  a0f5d0:	1907c83a 	sub	r3,r3,r4
  a0f5d4:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  a0f5d8:	e0fff717 	ldw	r3,-36(fp)
  a0f5dc:	e13ff917 	ldw	r4,-28(fp)
  a0f5e0:	1905c83a 	sub	r2,r3,r4
  a0f5e4:	e0bff415 	stw	r2,-48(fp)
  a0f5e8:	e0fff417 	ldw	r3,-48(fp)
  a0f5ec:	1804403a 	cmpge	r2,r3,zero
  a0f5f0:	1000031e 	bne	r2,zero,a0f600 <alt_up_pixel_buffer_dma_draw_line+0x220>
  a0f5f4:	e13ff417 	ldw	r4,-48(fp)
  a0f5f8:	0109c83a 	sub	r4,zero,r4
  a0f5fc:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  a0f600:	e0fff517 	ldw	r3,-44(fp)
  a0f604:	1804d7fa 	srli	r2,r3,31
  a0f608:	e13ff517 	ldw	r4,-44(fp)
  a0f60c:	1105883a 	add	r2,r2,r4
  a0f610:	1005d07a 	srai	r2,r2,1
  a0f614:	0085c83a 	sub	r2,zero,r2
  a0f618:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  a0f61c:	e0bff917 	ldw	r2,-28(fp)
  a0f620:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  a0f624:	e0fff917 	ldw	r3,-28(fp)
  a0f628:	e13ff717 	ldw	r4,-36(fp)
  a0f62c:	1900030e 	bge	r3,r4,a0f63c <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  a0f630:	00800044 	movi	r2,1
  a0f634:	e0bff215 	stw	r2,-56(fp)
  a0f638:	00000206 	br	a0f644 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  a0f63c:	00ffffc4 	movi	r3,-1
  a0f640:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  a0f644:	e13ff603 	ldbu	r4,-40(fp)
  a0f648:	20803fcc 	andi	r2,r4,255
  a0f64c:	1080201c 	xori	r2,r2,128
  a0f650:	10bfe004 	addi	r2,r2,-128
  a0f654:	10800058 	cmpnei	r2,r2,1
  a0f658:	1000221e 	bne	r2,zero,a0f6e4 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  a0f65c:	e0bffa17 	ldw	r2,-24(fp)
  a0f660:	e0bff115 	stw	r2,-60(fp)
  a0f664:	00001b06 	br	a0f6d4 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  a0f668:	e0ffee17 	ldw	r3,-72(fp)
  a0f66c:	d8c00015 	stw	r3,0(sp)
  a0f670:	e13fef17 	ldw	r4,-68(fp)
  a0f674:	d9000115 	stw	r4,4(sp)
  a0f678:	e13fed17 	ldw	r4,-76(fp)
  a0f67c:	e17fec17 	ldw	r5,-80(fp)
  a0f680:	e1bff017 	ldw	r6,-64(fp)
  a0f684:	e1fff117 	ldw	r7,-60(fp)
  a0f688:	0a0f3100 	call	a0f310 <helper_plot_pixel>
			error = error + deltay;
  a0f68c:	e0bff317 	ldw	r2,-52(fp)
  a0f690:	e0fff417 	ldw	r3,-48(fp)
  a0f694:	10c5883a 	add	r2,r2,r3
  a0f698:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  a0f69c:	e13ff317 	ldw	r4,-52(fp)
  a0f6a0:	20800050 	cmplti	r2,r4,1
  a0f6a4:	1000081e 	bne	r2,zero,a0f6c8 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  a0f6a8:	e0bff017 	ldw	r2,-64(fp)
  a0f6ac:	e0fff217 	ldw	r3,-56(fp)
  a0f6b0:	10c5883a 	add	r2,r2,r3
  a0f6b4:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  a0f6b8:	e13ff317 	ldw	r4,-52(fp)
  a0f6bc:	e0bff517 	ldw	r2,-44(fp)
  a0f6c0:	2089c83a 	sub	r4,r4,r2
  a0f6c4:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  a0f6c8:	e0fff117 	ldw	r3,-60(fp)
  a0f6cc:	18c00044 	addi	r3,r3,1
  a0f6d0:	e0fff115 	stw	r3,-60(fp)
  a0f6d4:	e13ff817 	ldw	r4,-32(fp)
  a0f6d8:	e0bff117 	ldw	r2,-60(fp)
  a0f6dc:	20bfe20e 	bge	r4,r2,a0f668 <alt_up_pixel_buffer_dma_draw_line+0x288>
  a0f6e0:	00002106 	br	a0f768 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  a0f6e4:	e0fffa17 	ldw	r3,-24(fp)
  a0f6e8:	e0fff115 	stw	r3,-60(fp)
  a0f6ec:	00001b06 	br	a0f75c <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  a0f6f0:	e13fee17 	ldw	r4,-72(fp)
  a0f6f4:	d9000015 	stw	r4,0(sp)
  a0f6f8:	e0bfef17 	ldw	r2,-68(fp)
  a0f6fc:	d8800115 	stw	r2,4(sp)
  a0f700:	e13fed17 	ldw	r4,-76(fp)
  a0f704:	e17fec17 	ldw	r5,-80(fp)
  a0f708:	e1bff117 	ldw	r6,-60(fp)
  a0f70c:	e1fff017 	ldw	r7,-64(fp)
  a0f710:	0a0f3100 	call	a0f310 <helper_plot_pixel>
			error = error + deltay;
  a0f714:	e0fff317 	ldw	r3,-52(fp)
  a0f718:	e13ff417 	ldw	r4,-48(fp)
  a0f71c:	1907883a 	add	r3,r3,r4
  a0f720:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  a0f724:	e0fff317 	ldw	r3,-52(fp)
  a0f728:	18800050 	cmplti	r2,r3,1
  a0f72c:	1000081e 	bne	r2,zero,a0f750 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  a0f730:	e13ff017 	ldw	r4,-64(fp)
  a0f734:	e0bff217 	ldw	r2,-56(fp)
  a0f738:	2089883a 	add	r4,r4,r2
  a0f73c:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  a0f740:	e0fff317 	ldw	r3,-52(fp)
  a0f744:	e13ff517 	ldw	r4,-44(fp)
  a0f748:	1907c83a 	sub	r3,r3,r4
  a0f74c:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  a0f750:	e0bff117 	ldw	r2,-60(fp)
  a0f754:	10800044 	addi	r2,r2,1
  a0f758:	e0bff115 	stw	r2,-60(fp)
  a0f75c:	e0fff817 	ldw	r3,-32(fp)
  a0f760:	e13ff117 	ldw	r4,-60(fp)
  a0f764:	193fe20e 	bge	r3,r4,a0f6f0 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  a0f768:	e037883a 	mov	sp,fp
  a0f76c:	dfc00117 	ldw	ra,4(sp)
  a0f770:	df000017 	ldw	fp,0(sp)
  a0f774:	dec00204 	addi	sp,sp,8
  a0f778:	f800283a 	ret

00a0f77c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  a0f77c:	defff404 	addi	sp,sp,-48
  a0f780:	df000b15 	stw	fp,44(sp)
  a0f784:	df000b04 	addi	fp,sp,44
  a0f788:	e13ffb15 	stw	r4,-20(fp)
  a0f78c:	e17ffc15 	stw	r5,-16(fp)
  a0f790:	e1bffd15 	stw	r6,-12(fp)
  a0f794:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  a0f798:	e03ff915 	stw	zero,-28(fp)
  a0f79c:	00802874 	movhi	r2,161
  a0f7a0:	10920104 	addi	r2,r2,18436
  a0f7a4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  a0f7a8:	1005003a 	cmpeq	r2,r2,zero
  a0f7ac:	1000411e 	bne	r2,zero,a0f8b4 <alt_alarm_start+0x138>
  {
    if (alarm)
  a0f7b0:	e0bffb17 	ldw	r2,-20(fp)
  a0f7b4:	1005003a 	cmpeq	r2,r2,zero
  a0f7b8:	10003b1e 	bne	r2,zero,a0f8a8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  a0f7bc:	e0fffb17 	ldw	r3,-20(fp)
  a0f7c0:	e0bffd17 	ldw	r2,-12(fp)
  a0f7c4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  a0f7c8:	e0fffb17 	ldw	r3,-20(fp)
  a0f7cc:	e0bffe17 	ldw	r2,-8(fp)
  a0f7d0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  a0f7d4:	0005303a 	rdctl	r2,status
  a0f7d8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  a0f7dc:	e0fff817 	ldw	r3,-32(fp)
  a0f7e0:	00bfff84 	movi	r2,-2
  a0f7e4:	1884703a 	and	r2,r3,r2
  a0f7e8:	1001703a 	wrctl	status,r2
  
  return context;
  a0f7ec:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  a0f7f0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  a0f7f4:	00802874 	movhi	r2,161
  a0f7f8:	10920204 	addi	r2,r2,18440
  a0f7fc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  a0f800:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  a0f804:	e0fffc17 	ldw	r3,-16(fp)
  a0f808:	e0bff917 	ldw	r2,-28(fp)
  a0f80c:	1885883a 	add	r2,r3,r2
  a0f810:	10c00044 	addi	r3,r2,1
  a0f814:	e0bffb17 	ldw	r2,-20(fp)
  a0f818:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  a0f81c:	e0bffb17 	ldw	r2,-20(fp)
  a0f820:	10c00217 	ldw	r3,8(r2)
  a0f824:	e0bff917 	ldw	r2,-28(fp)
  a0f828:	1880042e 	bgeu	r3,r2,a0f83c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  a0f82c:	e0fffb17 	ldw	r3,-20(fp)
  a0f830:	00800044 	movi	r2,1
  a0f834:	18800405 	stb	r2,16(r3)
  a0f838:	00000206 	br	a0f844 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  a0f83c:	e0bffb17 	ldw	r2,-20(fp)
  a0f840:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  a0f844:	e0fffb17 	ldw	r3,-20(fp)
  a0f848:	00802874 	movhi	r2,161
  a0f84c:	108afe04 	addi	r2,r2,11256
  a0f850:	e0bff615 	stw	r2,-40(fp)
  a0f854:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  a0f858:	e0fff717 	ldw	r3,-36(fp)
  a0f85c:	e0bff617 	ldw	r2,-40(fp)
  a0f860:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  a0f864:	e0bff617 	ldw	r2,-40(fp)
  a0f868:	10c00017 	ldw	r3,0(r2)
  a0f86c:	e0bff717 	ldw	r2,-36(fp)
  a0f870:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  a0f874:	e0bff617 	ldw	r2,-40(fp)
  a0f878:	10c00017 	ldw	r3,0(r2)
  a0f87c:	e0bff717 	ldw	r2,-36(fp)
  a0f880:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  a0f884:	e0fff617 	ldw	r3,-40(fp)
  a0f888:	e0bff717 	ldw	r2,-36(fp)
  a0f88c:	18800015 	stw	r2,0(r3)
  a0f890:	e0bffa17 	ldw	r2,-24(fp)
  a0f894:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  a0f898:	e0bff517 	ldw	r2,-44(fp)
  a0f89c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  a0f8a0:	e03fff15 	stw	zero,-4(fp)
  a0f8a4:	00000506 	br	a0f8bc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  a0f8a8:	00bffa84 	movi	r2,-22
  a0f8ac:	e0bfff15 	stw	r2,-4(fp)
  a0f8b0:	00000206 	br	a0f8bc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  a0f8b4:	00bfde84 	movi	r2,-134
  a0f8b8:	e0bfff15 	stw	r2,-4(fp)
  a0f8bc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  a0f8c0:	e037883a 	mov	sp,fp
  a0f8c4:	df000017 	ldw	fp,0(sp)
  a0f8c8:	dec00104 	addi	sp,sp,4
  a0f8cc:	f800283a 	ret

00a0f8d0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  a0f8d0:	defffe04 	addi	sp,sp,-8
  a0f8d4:	df000115 	stw	fp,4(sp)
  a0f8d8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  a0f8dc:	e03fff15 	stw	zero,-4(fp)
  a0f8e0:	00000506 	br	a0f8f8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  a0f8e4:	e0bfff17 	ldw	r2,-4(fp)
  a0f8e8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  a0f8ec:	e0bfff17 	ldw	r2,-4(fp)
  a0f8f0:	10800804 	addi	r2,r2,32
  a0f8f4:	e0bfff15 	stw	r2,-4(fp)
  a0f8f8:	e0bfff17 	ldw	r2,-4(fp)
  a0f8fc:	10810030 	cmpltui	r2,r2,1024
  a0f900:	103ff81e 	bne	r2,zero,a0f8e4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  a0f904:	e037883a 	mov	sp,fp
  a0f908:	df000017 	ldw	fp,0(sp)
  a0f90c:	dec00104 	addi	sp,sp,4
  a0f910:	f800283a 	ret

00a0f914 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  a0f914:	defff904 	addi	sp,sp,-28
  a0f918:	dfc00615 	stw	ra,24(sp)
  a0f91c:	df000515 	stw	fp,20(sp)
  a0f920:	df000504 	addi	fp,sp,20
  a0f924:	e13ffd15 	stw	r4,-12(fp)
  a0f928:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  a0f92c:	e0bffd17 	ldw	r2,-12(fp)
  a0f930:	1005003a 	cmpeq	r2,r2,zero
  a0f934:	1000041e 	bne	r2,zero,a0f948 <alt_dev_llist_insert+0x34>
  a0f938:	e0bffd17 	ldw	r2,-12(fp)
  a0f93c:	10800217 	ldw	r2,8(r2)
  a0f940:	1004c03a 	cmpne	r2,r2,zero
  a0f944:	1000071e 	bne	r2,zero,a0f964 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  a0f948:	0a0f9c80 	call	a0f9c8 <alt_get_errno>
  a0f94c:	1007883a 	mov	r3,r2
  a0f950:	00800584 	movi	r2,22
  a0f954:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  a0f958:	00bffa84 	movi	r2,-22
  a0f95c:	e0bfff15 	stw	r2,-4(fp)
  a0f960:	00001306 	br	a0f9b0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  a0f964:	e0fffd17 	ldw	r3,-12(fp)
  a0f968:	e0bffe17 	ldw	r2,-8(fp)
  a0f96c:	e0bffb15 	stw	r2,-20(fp)
  a0f970:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  a0f974:	e0fffc17 	ldw	r3,-16(fp)
  a0f978:	e0bffb17 	ldw	r2,-20(fp)
  a0f97c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  a0f980:	e0bffb17 	ldw	r2,-20(fp)
  a0f984:	10c00017 	ldw	r3,0(r2)
  a0f988:	e0bffc17 	ldw	r2,-16(fp)
  a0f98c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  a0f990:	e0bffb17 	ldw	r2,-20(fp)
  a0f994:	10c00017 	ldw	r3,0(r2)
  a0f998:	e0bffc17 	ldw	r2,-16(fp)
  a0f99c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  a0f9a0:	e0fffb17 	ldw	r3,-20(fp)
  a0f9a4:	e0bffc17 	ldw	r2,-16(fp)
  a0f9a8:	18800015 	stw	r2,0(r3)

  return 0;  
  a0f9ac:	e03fff15 	stw	zero,-4(fp)
  a0f9b0:	e0bfff17 	ldw	r2,-4(fp)
}
  a0f9b4:	e037883a 	mov	sp,fp
  a0f9b8:	dfc00117 	ldw	ra,4(sp)
  a0f9bc:	df000017 	ldw	fp,0(sp)
  a0f9c0:	dec00204 	addi	sp,sp,8
  a0f9c4:	f800283a 	ret

00a0f9c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a0f9c8:	defffd04 	addi	sp,sp,-12
  a0f9cc:	dfc00215 	stw	ra,8(sp)
  a0f9d0:	df000115 	stw	fp,4(sp)
  a0f9d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a0f9d8:	00802874 	movhi	r2,161
  a0f9dc:	108af704 	addi	r2,r2,11228
  a0f9e0:	10800017 	ldw	r2,0(r2)
  a0f9e4:	1005003a 	cmpeq	r2,r2,zero
  a0f9e8:	1000061e 	bne	r2,zero,a0fa04 <alt_get_errno+0x3c>
  a0f9ec:	00802874 	movhi	r2,161
  a0f9f0:	108af704 	addi	r2,r2,11228
  a0f9f4:	10800017 	ldw	r2,0(r2)
  a0f9f8:	103ee83a 	callr	r2
  a0f9fc:	e0bfff15 	stw	r2,-4(fp)
  a0fa00:	00000306 	br	a0fa10 <alt_get_errno+0x48>
  a0fa04:	00802874 	movhi	r2,161
  a0fa08:	1091fc04 	addi	r2,r2,18416
  a0fa0c:	e0bfff15 	stw	r2,-4(fp)
  a0fa10:	e0bfff17 	ldw	r2,-4(fp)
}
  a0fa14:	e037883a 	mov	sp,fp
  a0fa18:	dfc00117 	ldw	ra,4(sp)
  a0fa1c:	df000017 	ldw	fp,0(sp)
  a0fa20:	dec00204 	addi	sp,sp,8
  a0fa24:	f800283a 	ret

00a0fa28 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  a0fa28:	defffd04 	addi	sp,sp,-12
  a0fa2c:	dfc00215 	stw	ra,8(sp)
  a0fa30:	df000115 	stw	fp,4(sp)
  a0fa34:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  a0fa38:	00bfff04 	movi	r2,-4
  a0fa3c:	00c02874 	movhi	r3,161
  a0fa40:	18c2c904 	addi	r3,r3,2852
  a0fa44:	1885883a 	add	r2,r3,r2
  a0fa48:	e0bfff15 	stw	r2,-4(fp)
  a0fa4c:	00000606 	br	a0fa68 <_do_ctors+0x40>
        (*ctor) (); 
  a0fa50:	e0bfff17 	ldw	r2,-4(fp)
  a0fa54:	10800017 	ldw	r2,0(r2)
  a0fa58:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  a0fa5c:	e0bfff17 	ldw	r2,-4(fp)
  a0fa60:	10bfff04 	addi	r2,r2,-4
  a0fa64:	e0bfff15 	stw	r2,-4(fp)
  a0fa68:	e0ffff17 	ldw	r3,-4(fp)
  a0fa6c:	00802874 	movhi	r2,161
  a0fa70:	1082c804 	addi	r2,r2,2848
  a0fa74:	18bff62e 	bgeu	r3,r2,a0fa50 <_do_ctors+0x28>
        (*ctor) (); 
}
  a0fa78:	e037883a 	mov	sp,fp
  a0fa7c:	dfc00117 	ldw	ra,4(sp)
  a0fa80:	df000017 	ldw	fp,0(sp)
  a0fa84:	dec00204 	addi	sp,sp,8
  a0fa88:	f800283a 	ret

00a0fa8c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  a0fa8c:	defffd04 	addi	sp,sp,-12
  a0fa90:	dfc00215 	stw	ra,8(sp)
  a0fa94:	df000115 	stw	fp,4(sp)
  a0fa98:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  a0fa9c:	00bfff04 	movi	r2,-4
  a0faa0:	00c02874 	movhi	r3,161
  a0faa4:	18c2c904 	addi	r3,r3,2852
  a0faa8:	1885883a 	add	r2,r3,r2
  a0faac:	e0bfff15 	stw	r2,-4(fp)
  a0fab0:	00000606 	br	a0facc <_do_dtors+0x40>
        (*dtor) (); 
  a0fab4:	e0bfff17 	ldw	r2,-4(fp)
  a0fab8:	10800017 	ldw	r2,0(r2)
  a0fabc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  a0fac0:	e0bfff17 	ldw	r2,-4(fp)
  a0fac4:	10bfff04 	addi	r2,r2,-4
  a0fac8:	e0bfff15 	stw	r2,-4(fp)
  a0facc:	e0ffff17 	ldw	r3,-4(fp)
  a0fad0:	00802874 	movhi	r2,161
  a0fad4:	1082c904 	addi	r2,r2,2852
  a0fad8:	18bff62e 	bgeu	r3,r2,a0fab4 <_do_dtors+0x28>
        (*dtor) (); 
}
  a0fadc:	e037883a 	mov	sp,fp
  a0fae0:	dfc00117 	ldw	ra,4(sp)
  a0fae4:	df000017 	ldw	fp,0(sp)
  a0fae8:	dec00204 	addi	sp,sp,8
  a0faec:	f800283a 	ret

00a0faf0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  a0faf0:	defff904 	addi	sp,sp,-28
  a0faf4:	dfc00615 	stw	ra,24(sp)
  a0faf8:	df000515 	stw	fp,20(sp)
  a0fafc:	df000504 	addi	fp,sp,20
  a0fb00:	e13ffd15 	stw	r4,-12(fp)
  a0fb04:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  a0fb08:	e0bffe17 	ldw	r2,-8(fp)
  a0fb0c:	10800017 	ldw	r2,0(r2)
  a0fb10:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  a0fb14:	e13ffd17 	ldw	r4,-12(fp)
  a0fb18:	0a037e40 	call	a037e4 <strlen>
  a0fb1c:	10800044 	addi	r2,r2,1
  a0fb20:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  a0fb24:	00000d06 	br	a0fb5c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  a0fb28:	e0bffc17 	ldw	r2,-16(fp)
  a0fb2c:	11000217 	ldw	r4,8(r2)
  a0fb30:	e1bffb17 	ldw	r6,-20(fp)
  a0fb34:	e17ffd17 	ldw	r5,-12(fp)
  a0fb38:	0a106f80 	call	a106f8 <memcmp>
  a0fb3c:	1004c03a 	cmpne	r2,r2,zero
  a0fb40:	1000031e 	bne	r2,zero,a0fb50 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  a0fb44:	e0bffc17 	ldw	r2,-16(fp)
  a0fb48:	e0bfff15 	stw	r2,-4(fp)
  a0fb4c:	00000706 	br	a0fb6c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  a0fb50:	e0bffc17 	ldw	r2,-16(fp)
  a0fb54:	10800017 	ldw	r2,0(r2)
  a0fb58:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  a0fb5c:	e0fffe17 	ldw	r3,-8(fp)
  a0fb60:	e0bffc17 	ldw	r2,-16(fp)
  a0fb64:	10fff01e 	bne	r2,r3,a0fb28 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  a0fb68:	e03fff15 	stw	zero,-4(fp)
  a0fb6c:	e0bfff17 	ldw	r2,-4(fp)
}
  a0fb70:	e037883a 	mov	sp,fp
  a0fb74:	dfc00117 	ldw	ra,4(sp)
  a0fb78:	df000017 	ldw	fp,0(sp)
  a0fb7c:	dec00204 	addi	sp,sp,8
  a0fb80:	f800283a 	ret

00a0fb84 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  a0fb84:	defffe04 	addi	sp,sp,-8
  a0fb88:	dfc00115 	stw	ra,4(sp)
  a0fb8c:	df000015 	stw	fp,0(sp)
  a0fb90:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  a0fb94:	0009883a 	mov	r4,zero
  a0fb98:	01440004 	movi	r5,4096
  a0fb9c:	0a1061c0 	call	a1061c <alt_icache_flush>
#endif
}
  a0fba0:	e037883a 	mov	sp,fp
  a0fba4:	dfc00117 	ldw	ra,4(sp)
  a0fba8:	df000017 	ldw	fp,0(sp)
  a0fbac:	dec00204 	addi	sp,sp,8
  a0fbb0:	f800283a 	ret

00a0fbb4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  a0fbb4:	defff904 	addi	sp,sp,-28
  a0fbb8:	dfc00615 	stw	ra,24(sp)
  a0fbbc:	df000515 	stw	fp,20(sp)
  a0fbc0:	df000504 	addi	fp,sp,20
  a0fbc4:	e13ffc15 	stw	r4,-16(fp)
  a0fbc8:	e17ffd15 	stw	r5,-12(fp)
  a0fbcc:	e1bffe15 	stw	r6,-8(fp)
  a0fbd0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  a0fbd4:	e0800217 	ldw	r2,8(fp)
  a0fbd8:	d8800015 	stw	r2,0(sp)
  a0fbdc:	e13ffc17 	ldw	r4,-16(fp)
  a0fbe0:	e17ffd17 	ldw	r5,-12(fp)
  a0fbe4:	e1bffe17 	ldw	r6,-8(fp)
  a0fbe8:	e1ffff17 	ldw	r7,-4(fp)
  a0fbec:	0a0fd880 	call	a0fd88 <alt_iic_isr_register>
}  
  a0fbf0:	e037883a 	mov	sp,fp
  a0fbf4:	dfc00117 	ldw	ra,4(sp)
  a0fbf8:	df000017 	ldw	fp,0(sp)
  a0fbfc:	dec00204 	addi	sp,sp,8
  a0fc00:	f800283a 	ret

00a0fc04 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  a0fc04:	defff904 	addi	sp,sp,-28
  a0fc08:	df000615 	stw	fp,24(sp)
  a0fc0c:	df000604 	addi	fp,sp,24
  a0fc10:	e13ffe15 	stw	r4,-8(fp)
  a0fc14:	e17fff15 	stw	r5,-4(fp)
  a0fc18:	e0bfff17 	ldw	r2,-4(fp)
  a0fc1c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  a0fc20:	0005303a 	rdctl	r2,status
  a0fc24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  a0fc28:	e0fffb17 	ldw	r3,-20(fp)
  a0fc2c:	00bfff84 	movi	r2,-2
  a0fc30:	1884703a 	and	r2,r3,r2
  a0fc34:	1001703a 	wrctl	status,r2
  
  return context;
  a0fc38:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  a0fc3c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  a0fc40:	e0fffc17 	ldw	r3,-16(fp)
  a0fc44:	00800044 	movi	r2,1
  a0fc48:	10c4983a 	sll	r2,r2,r3
  a0fc4c:	1007883a 	mov	r3,r2
  a0fc50:	00802874 	movhi	r2,161
  a0fc54:	10920004 	addi	r2,r2,18432
  a0fc58:	10800017 	ldw	r2,0(r2)
  a0fc5c:	1886b03a 	or	r3,r3,r2
  a0fc60:	00802874 	movhi	r2,161
  a0fc64:	10920004 	addi	r2,r2,18432
  a0fc68:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  a0fc6c:	00802874 	movhi	r2,161
  a0fc70:	10920004 	addi	r2,r2,18432
  a0fc74:	10800017 	ldw	r2,0(r2)
  a0fc78:	100170fa 	wrctl	ienable,r2
  a0fc7c:	e0bffd17 	ldw	r2,-12(fp)
  a0fc80:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  a0fc84:	e0bffa17 	ldw	r2,-24(fp)
  a0fc88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  a0fc8c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  a0fc90:	e037883a 	mov	sp,fp
  a0fc94:	df000017 	ldw	fp,0(sp)
  a0fc98:	dec00104 	addi	sp,sp,4
  a0fc9c:	f800283a 	ret

00a0fca0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  a0fca0:	defff904 	addi	sp,sp,-28
  a0fca4:	df000615 	stw	fp,24(sp)
  a0fca8:	df000604 	addi	fp,sp,24
  a0fcac:	e13ffe15 	stw	r4,-8(fp)
  a0fcb0:	e17fff15 	stw	r5,-4(fp)
  a0fcb4:	e0bfff17 	ldw	r2,-4(fp)
  a0fcb8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  a0fcbc:	0005303a 	rdctl	r2,status
  a0fcc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  a0fcc4:	e0fffb17 	ldw	r3,-20(fp)
  a0fcc8:	00bfff84 	movi	r2,-2
  a0fccc:	1884703a 	and	r2,r3,r2
  a0fcd0:	1001703a 	wrctl	status,r2
  
  return context;
  a0fcd4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  a0fcd8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  a0fcdc:	e0fffc17 	ldw	r3,-16(fp)
  a0fce0:	00800044 	movi	r2,1
  a0fce4:	10c4983a 	sll	r2,r2,r3
  a0fce8:	0084303a 	nor	r2,zero,r2
  a0fcec:	1007883a 	mov	r3,r2
  a0fcf0:	00802874 	movhi	r2,161
  a0fcf4:	10920004 	addi	r2,r2,18432
  a0fcf8:	10800017 	ldw	r2,0(r2)
  a0fcfc:	1886703a 	and	r3,r3,r2
  a0fd00:	00802874 	movhi	r2,161
  a0fd04:	10920004 	addi	r2,r2,18432
  a0fd08:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  a0fd0c:	00802874 	movhi	r2,161
  a0fd10:	10920004 	addi	r2,r2,18432
  a0fd14:	10800017 	ldw	r2,0(r2)
  a0fd18:	100170fa 	wrctl	ienable,r2
  a0fd1c:	e0bffd17 	ldw	r2,-12(fp)
  a0fd20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  a0fd24:	e0bffa17 	ldw	r2,-24(fp)
  a0fd28:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  a0fd2c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  a0fd30:	e037883a 	mov	sp,fp
  a0fd34:	df000017 	ldw	fp,0(sp)
  a0fd38:	dec00104 	addi	sp,sp,4
  a0fd3c:	f800283a 	ret

00a0fd40 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  a0fd40:	defffc04 	addi	sp,sp,-16
  a0fd44:	df000315 	stw	fp,12(sp)
  a0fd48:	df000304 	addi	fp,sp,12
  a0fd4c:	e13ffe15 	stw	r4,-8(fp)
  a0fd50:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  a0fd54:	000530fa 	rdctl	r2,ienable
  a0fd58:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  a0fd5c:	e0ffff17 	ldw	r3,-4(fp)
  a0fd60:	00800044 	movi	r2,1
  a0fd64:	10c4983a 	sll	r2,r2,r3
  a0fd68:	1007883a 	mov	r3,r2
  a0fd6c:	e0bffd17 	ldw	r2,-12(fp)
  a0fd70:	1884703a 	and	r2,r3,r2
  a0fd74:	1004c03a 	cmpne	r2,r2,zero
}
  a0fd78:	e037883a 	mov	sp,fp
  a0fd7c:	df000017 	ldw	fp,0(sp)
  a0fd80:	dec00104 	addi	sp,sp,4
  a0fd84:	f800283a 	ret

00a0fd88 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  a0fd88:	defff404 	addi	sp,sp,-48
  a0fd8c:	dfc00b15 	stw	ra,44(sp)
  a0fd90:	df000a15 	stw	fp,40(sp)
  a0fd94:	df000a04 	addi	fp,sp,40
  a0fd98:	e13ffb15 	stw	r4,-20(fp)
  a0fd9c:	e17ffc15 	stw	r5,-16(fp)
  a0fda0:	e1bffd15 	stw	r6,-12(fp)
  a0fda4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  a0fda8:	00bffa84 	movi	r2,-22
  a0fdac:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  a0fdb0:	e0bffc17 	ldw	r2,-16(fp)
  a0fdb4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  a0fdb8:	e0bff917 	ldw	r2,-28(fp)
  a0fdbc:	10800808 	cmpgei	r2,r2,32
  a0fdc0:	1000291e 	bne	r2,zero,a0fe68 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  a0fdc4:	0005303a 	rdctl	r2,status
  a0fdc8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  a0fdcc:	e0fff717 	ldw	r3,-36(fp)
  a0fdd0:	00bfff84 	movi	r2,-2
  a0fdd4:	1884703a 	and	r2,r3,r2
  a0fdd8:	1001703a 	wrctl	status,r2
  
  return context;
  a0fddc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  a0fde0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  a0fde4:	e0bff917 	ldw	r2,-28(fp)
  a0fde8:	00c02874 	movhi	r3,161
  a0fdec:	18d20d04 	addi	r3,r3,18484
  a0fdf0:	100490fa 	slli	r2,r2,3
  a0fdf4:	10c7883a 	add	r3,r2,r3
  a0fdf8:	e0bffd17 	ldw	r2,-12(fp)
  a0fdfc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  a0fe00:	e0bff917 	ldw	r2,-28(fp)
  a0fe04:	00c02874 	movhi	r3,161
  a0fe08:	18d20d04 	addi	r3,r3,18484
  a0fe0c:	100490fa 	slli	r2,r2,3
  a0fe10:	10c5883a 	add	r2,r2,r3
  a0fe14:	10c00104 	addi	r3,r2,4
  a0fe18:	e0bffe17 	ldw	r2,-8(fp)
  a0fe1c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  a0fe20:	e0bffd17 	ldw	r2,-12(fp)
  a0fe24:	1005003a 	cmpeq	r2,r2,zero
  a0fe28:	1000051e 	bne	r2,zero,a0fe40 <alt_iic_isr_register+0xb8>
  a0fe2c:	e17ff917 	ldw	r5,-28(fp)
  a0fe30:	e13ffb17 	ldw	r4,-20(fp)
  a0fe34:	0a0fc040 	call	a0fc04 <alt_ic_irq_enable>
  a0fe38:	e0bfff15 	stw	r2,-4(fp)
  a0fe3c:	00000406 	br	a0fe50 <alt_iic_isr_register+0xc8>
  a0fe40:	e17ff917 	ldw	r5,-28(fp)
  a0fe44:	e13ffb17 	ldw	r4,-20(fp)
  a0fe48:	0a0fca00 	call	a0fca0 <alt_ic_irq_disable>
  a0fe4c:	e0bfff15 	stw	r2,-4(fp)
  a0fe50:	e0bfff17 	ldw	r2,-4(fp)
  a0fe54:	e0bffa15 	stw	r2,-24(fp)
  a0fe58:	e0bff817 	ldw	r2,-32(fp)
  a0fe5c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  a0fe60:	e0bff617 	ldw	r2,-40(fp)
  a0fe64:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  a0fe68:	e0bffa17 	ldw	r2,-24(fp)
}
  a0fe6c:	e037883a 	mov	sp,fp
  a0fe70:	dfc00117 	ldw	ra,4(sp)
  a0fe74:	df000017 	ldw	fp,0(sp)
  a0fe78:	dec00204 	addi	sp,sp,8
  a0fe7c:	f800283a 	ret

00a0fe80 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  a0fe80:	defff904 	addi	sp,sp,-28
  a0fe84:	dfc00615 	stw	ra,24(sp)
  a0fe88:	df000515 	stw	fp,20(sp)
  a0fe8c:	df000504 	addi	fp,sp,20
  a0fe90:	e13ffc15 	stw	r4,-16(fp)
  a0fe94:	e17ffd15 	stw	r5,-12(fp)
  a0fe98:	e1bffe15 	stw	r6,-8(fp)
  a0fe9c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  a0fea0:	e13ffd17 	ldw	r4,-12(fp)
  a0fea4:	e17ffe17 	ldw	r5,-8(fp)
  a0fea8:	e1bfff17 	ldw	r6,-4(fp)
  a0feac:	0a100980 	call	a10098 <open>
  a0feb0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  a0feb4:	e0bffb17 	ldw	r2,-20(fp)
  a0feb8:	1004803a 	cmplt	r2,r2,zero
  a0febc:	10001c1e 	bne	r2,zero,a0ff30 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  a0fec0:	e0bffb17 	ldw	r2,-20(fp)
  a0fec4:	00c02874 	movhi	r3,161
  a0fec8:	18c61a04 	addi	r3,r3,6248
  a0fecc:	10800324 	muli	r2,r2,12
  a0fed0:	10c5883a 	add	r2,r2,r3
  a0fed4:	10c00017 	ldw	r3,0(r2)
  a0fed8:	e0bffc17 	ldw	r2,-16(fp)
  a0fedc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  a0fee0:	e0bffb17 	ldw	r2,-20(fp)
  a0fee4:	00c02874 	movhi	r3,161
  a0fee8:	18c61a04 	addi	r3,r3,6248
  a0feec:	10800324 	muli	r2,r2,12
  a0fef0:	10c5883a 	add	r2,r2,r3
  a0fef4:	10800104 	addi	r2,r2,4
  a0fef8:	10c00017 	ldw	r3,0(r2)
  a0fefc:	e0bffc17 	ldw	r2,-16(fp)
  a0ff00:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  a0ff04:	e0bffb17 	ldw	r2,-20(fp)
  a0ff08:	00c02874 	movhi	r3,161
  a0ff0c:	18c61a04 	addi	r3,r3,6248
  a0ff10:	10800324 	muli	r2,r2,12
  a0ff14:	10c5883a 	add	r2,r2,r3
  a0ff18:	10800204 	addi	r2,r2,8
  a0ff1c:	10c00017 	ldw	r3,0(r2)
  a0ff20:	e0bffc17 	ldw	r2,-16(fp)
  a0ff24:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  a0ff28:	e13ffb17 	ldw	r4,-20(fp)
  a0ff2c:	0a0c8300 	call	a0c830 <alt_release_fd>
  }
} 
  a0ff30:	e037883a 	mov	sp,fp
  a0ff34:	dfc00117 	ldw	ra,4(sp)
  a0ff38:	df000017 	ldw	fp,0(sp)
  a0ff3c:	dec00204 	addi	sp,sp,8
  a0ff40:	f800283a 	ret

00a0ff44 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  a0ff44:	defffb04 	addi	sp,sp,-20
  a0ff48:	dfc00415 	stw	ra,16(sp)
  a0ff4c:	df000315 	stw	fp,12(sp)
  a0ff50:	df000304 	addi	fp,sp,12
  a0ff54:	e13ffd15 	stw	r4,-12(fp)
  a0ff58:	e17ffe15 	stw	r5,-8(fp)
  a0ff5c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  a0ff60:	01002874 	movhi	r4,161
  a0ff64:	21061d04 	addi	r4,r4,6260
  a0ff68:	e17ffd17 	ldw	r5,-12(fp)
  a0ff6c:	01800044 	movi	r6,1
  a0ff70:	01c07fc4 	movi	r7,511
  a0ff74:	0a0fe800 	call	a0fe80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  a0ff78:	01002874 	movhi	r4,161
  a0ff7c:	21061a04 	addi	r4,r4,6248
  a0ff80:	e17ffe17 	ldw	r5,-8(fp)
  a0ff84:	000d883a 	mov	r6,zero
  a0ff88:	01c07fc4 	movi	r7,511
  a0ff8c:	0a0fe800 	call	a0fe80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  a0ff90:	01002874 	movhi	r4,161
  a0ff94:	21062004 	addi	r4,r4,6272
  a0ff98:	e17fff17 	ldw	r5,-4(fp)
  a0ff9c:	01800044 	movi	r6,1
  a0ffa0:	01c07fc4 	movi	r7,511
  a0ffa4:	0a0fe800 	call	a0fe80 <alt_open_fd>
}  
  a0ffa8:	e037883a 	mov	sp,fp
  a0ffac:	dfc00117 	ldw	ra,4(sp)
  a0ffb0:	df000017 	ldw	fp,0(sp)
  a0ffb4:	dec00204 	addi	sp,sp,8
  a0ffb8:	f800283a 	ret

00a0ffbc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  a0ffbc:	defffc04 	addi	sp,sp,-16
  a0ffc0:	df000315 	stw	fp,12(sp)
  a0ffc4:	df000304 	addi	fp,sp,12
  a0ffc8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  a0ffcc:	e0bffe17 	ldw	r2,-8(fp)
  a0ffd0:	10800217 	ldw	r2,8(r2)
  a0ffd4:	10d00034 	orhi	r3,r2,16384
  a0ffd8:	e0bffe17 	ldw	r2,-8(fp)
  a0ffdc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  a0ffe0:	e03ffd15 	stw	zero,-12(fp)
  a0ffe4:	00002006 	br	a10068 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  a0ffe8:	e0bffd17 	ldw	r2,-12(fp)
  a0ffec:	00c02874 	movhi	r3,161
  a0fff0:	18c61a04 	addi	r3,r3,6248
  a0fff4:	10800324 	muli	r2,r2,12
  a0fff8:	10c5883a 	add	r2,r2,r3
  a0fffc:	10c00017 	ldw	r3,0(r2)
  a10000:	e0bffe17 	ldw	r2,-8(fp)
  a10004:	10800017 	ldw	r2,0(r2)
  a10008:	1880141e 	bne	r3,r2,a1005c <alt_file_locked+0xa0>
  a1000c:	e0bffd17 	ldw	r2,-12(fp)
  a10010:	00c02874 	movhi	r3,161
  a10014:	18c61a04 	addi	r3,r3,6248
  a10018:	10800324 	muli	r2,r2,12
  a1001c:	10c5883a 	add	r2,r2,r3
  a10020:	10800204 	addi	r2,r2,8
  a10024:	10800017 	ldw	r2,0(r2)
  a10028:	1004403a 	cmpge	r2,r2,zero
  a1002c:	10000b1e 	bne	r2,zero,a1005c <alt_file_locked+0xa0>
  a10030:	e0bffd17 	ldw	r2,-12(fp)
  a10034:	10800324 	muli	r2,r2,12
  a10038:	1007883a 	mov	r3,r2
  a1003c:	00802874 	movhi	r2,161
  a10040:	10861a04 	addi	r2,r2,6248
  a10044:	1887883a 	add	r3,r3,r2
  a10048:	e0bffe17 	ldw	r2,-8(fp)
  a1004c:	18800326 	beq	r3,r2,a1005c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  a10050:	00bffcc4 	movi	r2,-13
  a10054:	e0bfff15 	stw	r2,-4(fp)
  a10058:	00000a06 	br	a10084 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  a1005c:	e0bffd17 	ldw	r2,-12(fp)
  a10060:	10800044 	addi	r2,r2,1
  a10064:	e0bffd15 	stw	r2,-12(fp)
  a10068:	00802874 	movhi	r2,161
  a1006c:	108af604 	addi	r2,r2,11224
  a10070:	10800017 	ldw	r2,0(r2)
  a10074:	1007883a 	mov	r3,r2
  a10078:	e0bffd17 	ldw	r2,-12(fp)
  a1007c:	18bfda2e 	bgeu	r3,r2,a0ffe8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  a10080:	e03fff15 	stw	zero,-4(fp)
  a10084:	e0bfff17 	ldw	r2,-4(fp)
}
  a10088:	e037883a 	mov	sp,fp
  a1008c:	df000017 	ldw	fp,0(sp)
  a10090:	dec00104 	addi	sp,sp,4
  a10094:	f800283a 	ret

00a10098 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  a10098:	defff404 	addi	sp,sp,-48
  a1009c:	dfc00b15 	stw	ra,44(sp)
  a100a0:	df000a15 	stw	fp,40(sp)
  a100a4:	df000a04 	addi	fp,sp,40
  a100a8:	e13ffb15 	stw	r4,-20(fp)
  a100ac:	e17ffc15 	stw	r5,-16(fp)
  a100b0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  a100b4:	00bfffc4 	movi	r2,-1
  a100b8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  a100bc:	00bffb44 	movi	r2,-19
  a100c0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  a100c4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  a100c8:	e13ffb17 	ldw	r4,-20(fp)
  a100cc:	01402874 	movhi	r5,161
  a100d0:	294af404 	addi	r5,r5,11216
  a100d4:	0a0faf00 	call	a0faf0 <alt_find_dev>
  a100d8:	e0bffa15 	stw	r2,-24(fp)
  a100dc:	e0bffa17 	ldw	r2,-24(fp)
  a100e0:	1004c03a 	cmpne	r2,r2,zero
  a100e4:	1000051e 	bne	r2,zero,a100fc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  a100e8:	e13ffb17 	ldw	r4,-20(fp)
  a100ec:	0a104440 	call	a10444 <alt_find_file>
  a100f0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  a100f4:	00800044 	movi	r2,1
  a100f8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  a100fc:	e0bffa17 	ldw	r2,-24(fp)
  a10100:	1005003a 	cmpeq	r2,r2,zero
  a10104:	1000301e 	bne	r2,zero,a101c8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  a10108:	e13ffa17 	ldw	r4,-24(fp)
  a1010c:	0a105640 	call	a10564 <alt_get_fd>
  a10110:	e0bff815 	stw	r2,-32(fp)
  a10114:	e0bff817 	ldw	r2,-32(fp)
  a10118:	1004403a 	cmpge	r2,r2,zero
  a1011c:	1000031e 	bne	r2,zero,a1012c <open+0x94>
    {
      status = index;
  a10120:	e0bff817 	ldw	r2,-32(fp)
  a10124:	e0bff715 	stw	r2,-36(fp)
  a10128:	00002906 	br	a101d0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  a1012c:	e0bff817 	ldw	r2,-32(fp)
  a10130:	10800324 	muli	r2,r2,12
  a10134:	1007883a 	mov	r3,r2
  a10138:	00802874 	movhi	r2,161
  a1013c:	10861a04 	addi	r2,r2,6248
  a10140:	1885883a 	add	r2,r3,r2
  a10144:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  a10148:	e0fffc17 	ldw	r3,-16(fp)
  a1014c:	00900034 	movhi	r2,16384
  a10150:	10bfffc4 	addi	r2,r2,-1
  a10154:	1886703a 	and	r3,r3,r2
  a10158:	e0bff917 	ldw	r2,-28(fp)
  a1015c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  a10160:	e0bff617 	ldw	r2,-40(fp)
  a10164:	1004c03a 	cmpne	r2,r2,zero
  a10168:	1000061e 	bne	r2,zero,a10184 <open+0xec>
  a1016c:	e13ff917 	ldw	r4,-28(fp)
  a10170:	0a0ffbc0 	call	a0ffbc <alt_file_locked>
  a10174:	e0bff715 	stw	r2,-36(fp)
  a10178:	e0bff717 	ldw	r2,-36(fp)
  a1017c:	1004803a 	cmplt	r2,r2,zero
  a10180:	1000131e 	bne	r2,zero,a101d0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  a10184:	e0bffa17 	ldw	r2,-24(fp)
  a10188:	10800317 	ldw	r2,12(r2)
  a1018c:	1005003a 	cmpeq	r2,r2,zero
  a10190:	1000091e 	bne	r2,zero,a101b8 <open+0x120>
  a10194:	e0bffa17 	ldw	r2,-24(fp)
  a10198:	10800317 	ldw	r2,12(r2)
  a1019c:	e13ff917 	ldw	r4,-28(fp)
  a101a0:	e17ffb17 	ldw	r5,-20(fp)
  a101a4:	e1bffc17 	ldw	r6,-16(fp)
  a101a8:	e1fffd17 	ldw	r7,-12(fp)
  a101ac:	103ee83a 	callr	r2
  a101b0:	e0bfff15 	stw	r2,-4(fp)
  a101b4:	00000106 	br	a101bc <open+0x124>
  a101b8:	e03fff15 	stw	zero,-4(fp)
  a101bc:	e0bfff17 	ldw	r2,-4(fp)
  a101c0:	e0bff715 	stw	r2,-36(fp)
  a101c4:	00000206 	br	a101d0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  a101c8:	00bffb44 	movi	r2,-19
  a101cc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  a101d0:	e0bff717 	ldw	r2,-36(fp)
  a101d4:	1004403a 	cmpge	r2,r2,zero
  a101d8:	1000091e 	bne	r2,zero,a10200 <open+0x168>
  {
    alt_release_fd (index);  
  a101dc:	e13ff817 	ldw	r4,-32(fp)
  a101e0:	0a0c8300 	call	a0c830 <alt_release_fd>
    ALT_ERRNO = -status;
  a101e4:	0a102200 	call	a10220 <alt_get_errno>
  a101e8:	e0fff717 	ldw	r3,-36(fp)
  a101ec:	00c7c83a 	sub	r3,zero,r3
  a101f0:	10c00015 	stw	r3,0(r2)
    return -1;
  a101f4:	00bfffc4 	movi	r2,-1
  a101f8:	e0bffe15 	stw	r2,-8(fp)
  a101fc:	00000206 	br	a10208 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  a10200:	e0bff817 	ldw	r2,-32(fp)
  a10204:	e0bffe15 	stw	r2,-8(fp)
  a10208:	e0bffe17 	ldw	r2,-8(fp)
}
  a1020c:	e037883a 	mov	sp,fp
  a10210:	dfc00117 	ldw	ra,4(sp)
  a10214:	df000017 	ldw	fp,0(sp)
  a10218:	dec00204 	addi	sp,sp,8
  a1021c:	f800283a 	ret

00a10220 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  a10220:	defffd04 	addi	sp,sp,-12
  a10224:	dfc00215 	stw	ra,8(sp)
  a10228:	df000115 	stw	fp,4(sp)
  a1022c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  a10230:	00802874 	movhi	r2,161
  a10234:	108af704 	addi	r2,r2,11228
  a10238:	10800017 	ldw	r2,0(r2)
  a1023c:	1005003a 	cmpeq	r2,r2,zero
  a10240:	1000061e 	bne	r2,zero,a1025c <alt_get_errno+0x3c>
  a10244:	00802874 	movhi	r2,161
  a10248:	108af704 	addi	r2,r2,11228
  a1024c:	10800017 	ldw	r2,0(r2)
  a10250:	103ee83a 	callr	r2
  a10254:	e0bfff15 	stw	r2,-4(fp)
  a10258:	00000306 	br	a10268 <alt_get_errno+0x48>
  a1025c:	00802874 	movhi	r2,161
  a10260:	1091fc04 	addi	r2,r2,18416
  a10264:	e0bfff15 	stw	r2,-4(fp)
  a10268:	e0bfff17 	ldw	r2,-4(fp)
}
  a1026c:	e037883a 	mov	sp,fp
  a10270:	dfc00117 	ldw	ra,4(sp)
  a10274:	df000017 	ldw	fp,0(sp)
  a10278:	dec00204 	addi	sp,sp,8
  a1027c:	f800283a 	ret

00a10280 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  a10280:	defffa04 	addi	sp,sp,-24
  a10284:	df000515 	stw	fp,20(sp)
  a10288:	df000504 	addi	fp,sp,20
  a1028c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  a10290:	0005303a 	rdctl	r2,status
  a10294:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  a10298:	e0fffd17 	ldw	r3,-12(fp)
  a1029c:	00bfff84 	movi	r2,-2
  a102a0:	1884703a 	and	r2,r3,r2
  a102a4:	1001703a 	wrctl	status,r2
  
  return context;
  a102a8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  a102ac:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  a102b0:	e0bfff17 	ldw	r2,-4(fp)
  a102b4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  a102b8:	e0bffc17 	ldw	r2,-16(fp)
  a102bc:	10c00017 	ldw	r3,0(r2)
  a102c0:	e0bffc17 	ldw	r2,-16(fp)
  a102c4:	10800117 	ldw	r2,4(r2)
  a102c8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  a102cc:	e0bffc17 	ldw	r2,-16(fp)
  a102d0:	10c00117 	ldw	r3,4(r2)
  a102d4:	e0bffc17 	ldw	r2,-16(fp)
  a102d8:	10800017 	ldw	r2,0(r2)
  a102dc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  a102e0:	e0fffc17 	ldw	r3,-16(fp)
  a102e4:	e0bffc17 	ldw	r2,-16(fp)
  a102e8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  a102ec:	e0fffc17 	ldw	r3,-16(fp)
  a102f0:	e0bffc17 	ldw	r2,-16(fp)
  a102f4:	18800015 	stw	r2,0(r3)
  a102f8:	e0bffe17 	ldw	r2,-8(fp)
  a102fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  a10300:	e0bffb17 	ldw	r2,-20(fp)
  a10304:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  a10308:	e037883a 	mov	sp,fp
  a1030c:	df000017 	ldw	fp,0(sp)
  a10310:	dec00104 	addi	sp,sp,4
  a10314:	f800283a 	ret

00a10318 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  a10318:	defffb04 	addi	sp,sp,-20
  a1031c:	dfc00415 	stw	ra,16(sp)
  a10320:	df000315 	stw	fp,12(sp)
  a10324:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  a10328:	d0a01b17 	ldw	r2,-32660(gp)
  a1032c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  a10330:	d0a71f17 	ldw	r2,-25476(gp)
  a10334:	10800044 	addi	r2,r2,1
  a10338:	d0a71f15 	stw	r2,-25476(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  a1033c:	00003106 	br	a10404 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  a10340:	e0bffe17 	ldw	r2,-8(fp)
  a10344:	10800017 	ldw	r2,0(r2)
  a10348:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  a1034c:	e0bffe17 	ldw	r2,-8(fp)
  a10350:	10800403 	ldbu	r2,16(r2)
  a10354:	10803fcc 	andi	r2,r2,255
  a10358:	1005003a 	cmpeq	r2,r2,zero
  a1035c:	1000051e 	bne	r2,zero,a10374 <alt_tick+0x5c>
  a10360:	d0a71f17 	ldw	r2,-25476(gp)
  a10364:	1004c03a 	cmpne	r2,r2,zero
  a10368:	1000021e 	bne	r2,zero,a10374 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  a1036c:	e0bffe17 	ldw	r2,-8(fp)
  a10370:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  a10374:	e0bffe17 	ldw	r2,-8(fp)
  a10378:	10c00217 	ldw	r3,8(r2)
  a1037c:	d0a71f17 	ldw	r2,-25476(gp)
  a10380:	10c01e36 	bltu	r2,r3,a103fc <alt_tick+0xe4>
  a10384:	e0bffe17 	ldw	r2,-8(fp)
  a10388:	10800403 	ldbu	r2,16(r2)
  a1038c:	10803fcc 	andi	r2,r2,255
  a10390:	1004c03a 	cmpne	r2,r2,zero
  a10394:	1000191e 	bne	r2,zero,a103fc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  a10398:	e0bffe17 	ldw	r2,-8(fp)
  a1039c:	10c00317 	ldw	r3,12(r2)
  a103a0:	e0bffe17 	ldw	r2,-8(fp)
  a103a4:	11000517 	ldw	r4,20(r2)
  a103a8:	183ee83a 	callr	r3
  a103ac:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  a103b0:	e0bffd17 	ldw	r2,-12(fp)
  a103b4:	1004c03a 	cmpne	r2,r2,zero
  a103b8:	1000031e 	bne	r2,zero,a103c8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  a103bc:	e13ffe17 	ldw	r4,-8(fp)
  a103c0:	0a102800 	call	a10280 <alt_alarm_stop>
  a103c4:	00000d06 	br	a103fc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  a103c8:	e0bffe17 	ldw	r2,-8(fp)
  a103cc:	10c00217 	ldw	r3,8(r2)
  a103d0:	e0bffd17 	ldw	r2,-12(fp)
  a103d4:	1887883a 	add	r3,r3,r2
  a103d8:	e0bffe17 	ldw	r2,-8(fp)
  a103dc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  a103e0:	e0bffe17 	ldw	r2,-8(fp)
  a103e4:	10c00217 	ldw	r3,8(r2)
  a103e8:	d0a71f17 	ldw	r2,-25476(gp)
  a103ec:	1880032e 	bgeu	r3,r2,a103fc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  a103f0:	e0fffe17 	ldw	r3,-8(fp)
  a103f4:	00800044 	movi	r2,1
  a103f8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  a103fc:	e0bfff17 	ldw	r2,-4(fp)
  a10400:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  a10404:	d0e01b04 	addi	r3,gp,-32660
  a10408:	e0bffe17 	ldw	r2,-8(fp)
  a1040c:	10ffcc1e 	bne	r2,r3,a10340 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  a10410:	e037883a 	mov	sp,fp
  a10414:	dfc00117 	ldw	ra,4(sp)
  a10418:	df000017 	ldw	fp,0(sp)
  a1041c:	dec00204 	addi	sp,sp,8
  a10420:	f800283a 	ret

00a10424 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  a10424:	deffff04 	addi	sp,sp,-4
  a10428:	df000015 	stw	fp,0(sp)
  a1042c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  a10430:	000170fa 	wrctl	ienable,zero
}
  a10434:	e037883a 	mov	sp,fp
  a10438:	df000017 	ldw	fp,0(sp)
  a1043c:	dec00104 	addi	sp,sp,4
  a10440:	f800283a 	ret

00a10444 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  a10444:	defffa04 	addi	sp,sp,-24
  a10448:	dfc00515 	stw	ra,20(sp)
  a1044c:	df000415 	stw	fp,16(sp)
  a10450:	df000404 	addi	fp,sp,16
  a10454:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  a10458:	00802874 	movhi	r2,161
  a1045c:	108af204 	addi	r2,r2,11208
  a10460:	10800017 	ldw	r2,0(r2)
  a10464:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  a10468:	00003306 	br	a10538 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  a1046c:	e0bffd17 	ldw	r2,-12(fp)
  a10470:	11000217 	ldw	r4,8(r2)
  a10474:	0a037e40 	call	a037e4 <strlen>
  a10478:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  a1047c:	e0bffd17 	ldw	r2,-12(fp)
  a10480:	10c00217 	ldw	r3,8(r2)
  a10484:	e0bffc17 	ldw	r2,-16(fp)
  a10488:	1885883a 	add	r2,r3,r2
  a1048c:	10bfffc4 	addi	r2,r2,-1
  a10490:	10800003 	ldbu	r2,0(r2)
  a10494:	10803fcc 	andi	r2,r2,255
  a10498:	1080201c 	xori	r2,r2,128
  a1049c:	10bfe004 	addi	r2,r2,-128
  a104a0:	10800bd8 	cmpnei	r2,r2,47
  a104a4:	1000031e 	bne	r2,zero,a104b4 <alt_find_file+0x70>
    {
      len -= 1;
  a104a8:	e0bffc17 	ldw	r2,-16(fp)
  a104ac:	10bfffc4 	addi	r2,r2,-1
  a104b0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  a104b4:	e0bffc17 	ldw	r2,-16(fp)
  a104b8:	1007883a 	mov	r3,r2
  a104bc:	e0bffe17 	ldw	r2,-8(fp)
  a104c0:	1885883a 	add	r2,r3,r2
  a104c4:	10800003 	ldbu	r2,0(r2)
  a104c8:	10803fcc 	andi	r2,r2,255
  a104cc:	1080201c 	xori	r2,r2,128
  a104d0:	10bfe004 	addi	r2,r2,-128
  a104d4:	10800be0 	cmpeqi	r2,r2,47
  a104d8:	10000a1e 	bne	r2,zero,a10504 <alt_find_file+0xc0>
  a104dc:	e0bffc17 	ldw	r2,-16(fp)
  a104e0:	1007883a 	mov	r3,r2
  a104e4:	e0bffe17 	ldw	r2,-8(fp)
  a104e8:	1885883a 	add	r2,r3,r2
  a104ec:	10800003 	ldbu	r2,0(r2)
  a104f0:	10803fcc 	andi	r2,r2,255
  a104f4:	1080201c 	xori	r2,r2,128
  a104f8:	10bfe004 	addi	r2,r2,-128
  a104fc:	1004c03a 	cmpne	r2,r2,zero
  a10500:	10000a1e 	bne	r2,zero,a1052c <alt_find_file+0xe8>
  a10504:	e0bffd17 	ldw	r2,-12(fp)
  a10508:	11000217 	ldw	r4,8(r2)
  a1050c:	e1bffc17 	ldw	r6,-16(fp)
  a10510:	e17ffe17 	ldw	r5,-8(fp)
  a10514:	0a106f80 	call	a106f8 <memcmp>
  a10518:	1004c03a 	cmpne	r2,r2,zero
  a1051c:	1000031e 	bne	r2,zero,a1052c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  a10520:	e0bffd17 	ldw	r2,-12(fp)
  a10524:	e0bfff15 	stw	r2,-4(fp)
  a10528:	00000806 	br	a1054c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  a1052c:	e0bffd17 	ldw	r2,-12(fp)
  a10530:	10800017 	ldw	r2,0(r2)
  a10534:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  a10538:	00c02874 	movhi	r3,161
  a1053c:	18caf204 	addi	r3,r3,11208
  a10540:	e0bffd17 	ldw	r2,-12(fp)
  a10544:	10ffc91e 	bne	r2,r3,a1046c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  a10548:	e03fff15 	stw	zero,-4(fp)
  a1054c:	e0bfff17 	ldw	r2,-4(fp)
}
  a10550:	e037883a 	mov	sp,fp
  a10554:	dfc00117 	ldw	ra,4(sp)
  a10558:	df000017 	ldw	fp,0(sp)
  a1055c:	dec00204 	addi	sp,sp,8
  a10560:	f800283a 	ret

00a10564 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  a10564:	defffc04 	addi	sp,sp,-16
  a10568:	df000315 	stw	fp,12(sp)
  a1056c:	df000304 	addi	fp,sp,12
  a10570:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  a10574:	00bffa04 	movi	r2,-24
  a10578:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  a1057c:	e03ffe15 	stw	zero,-8(fp)
  a10580:	00001e06 	br	a105fc <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  a10584:	e0bffe17 	ldw	r2,-8(fp)
  a10588:	00c02874 	movhi	r3,161
  a1058c:	18c61a04 	addi	r3,r3,6248
  a10590:	10800324 	muli	r2,r2,12
  a10594:	10c5883a 	add	r2,r2,r3
  a10598:	10800017 	ldw	r2,0(r2)
  a1059c:	1004c03a 	cmpne	r2,r2,zero
  a105a0:	1000131e 	bne	r2,zero,a105f0 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  a105a4:	e0bffe17 	ldw	r2,-8(fp)
  a105a8:	00c02874 	movhi	r3,161
  a105ac:	18c61a04 	addi	r3,r3,6248
  a105b0:	10800324 	muli	r2,r2,12
  a105b4:	10c7883a 	add	r3,r2,r3
  a105b8:	e0bfff17 	ldw	r2,-4(fp)
  a105bc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  a105c0:	00802874 	movhi	r2,161
  a105c4:	108af604 	addi	r2,r2,11224
  a105c8:	10c00017 	ldw	r3,0(r2)
  a105cc:	e0bffe17 	ldw	r2,-8(fp)
  a105d0:	1880040e 	bge	r3,r2,a105e4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  a105d4:	00c02874 	movhi	r3,161
  a105d8:	18caf604 	addi	r3,r3,11224
  a105dc:	e0bffe17 	ldw	r2,-8(fp)
  a105e0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  a105e4:	e0bffe17 	ldw	r2,-8(fp)
  a105e8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  a105ec:	00000606 	br	a10608 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  a105f0:	e0bffe17 	ldw	r2,-8(fp)
  a105f4:	10800044 	addi	r2,r2,1
  a105f8:	e0bffe15 	stw	r2,-8(fp)
  a105fc:	e0bffe17 	ldw	r2,-8(fp)
  a10600:	10800810 	cmplti	r2,r2,32
  a10604:	103fdf1e 	bne	r2,zero,a10584 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  a10608:	e0bffd17 	ldw	r2,-12(fp)
}
  a1060c:	e037883a 	mov	sp,fp
  a10610:	df000017 	ldw	fp,0(sp)
  a10614:	dec00104 	addi	sp,sp,4
  a10618:	f800283a 	ret

00a1061c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  a1061c:	defffb04 	addi	sp,sp,-20
  a10620:	df000415 	stw	fp,16(sp)
  a10624:	df000404 	addi	fp,sp,16
  a10628:	e13ffe15 	stw	r4,-8(fp)
  a1062c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  a10630:	e0bfff17 	ldw	r2,-4(fp)
  a10634:	10840070 	cmpltui	r2,r2,4097
  a10638:	1000021e 	bne	r2,zero,a10644 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  a1063c:	00840004 	movi	r2,4096
  a10640:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  a10644:	e0fffe17 	ldw	r3,-8(fp)
  a10648:	e0bfff17 	ldw	r2,-4(fp)
  a1064c:	1885883a 	add	r2,r3,r2
  a10650:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  a10654:	e0bffe17 	ldw	r2,-8(fp)
  a10658:	e0bffd15 	stw	r2,-12(fp)
  a1065c:	00000506 	br	a10674 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  a10660:	e0bffd17 	ldw	r2,-12(fp)
  a10664:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  a10668:	e0bffd17 	ldw	r2,-12(fp)
  a1066c:	10800804 	addi	r2,r2,32
  a10670:	e0bffd15 	stw	r2,-12(fp)
  a10674:	e0fffd17 	ldw	r3,-12(fp)
  a10678:	e0bffc17 	ldw	r2,-16(fp)
  a1067c:	18bff836 	bltu	r3,r2,a10660 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  a10680:	e0bffe17 	ldw	r2,-8(fp)
  a10684:	108007cc 	andi	r2,r2,31
  a10688:	1005003a 	cmpeq	r2,r2,zero
  a1068c:	1000021e 	bne	r2,zero,a10698 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  a10690:	e0bffd17 	ldw	r2,-12(fp)
  a10694:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  a10698:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  a1069c:	e037883a 	mov	sp,fp
  a106a0:	df000017 	ldw	fp,0(sp)
  a106a4:	dec00104 	addi	sp,sp,4
  a106a8:	f800283a 	ret

00a106ac <atexit>:
  a106ac:	200b883a 	mov	r5,r4
  a106b0:	000d883a 	mov	r6,zero
  a106b4:	0009883a 	mov	r4,zero
  a106b8:	000f883a 	mov	r7,zero
  a106bc:	0a1076c1 	jmpi	a1076c <__register_exitproc>

00a106c0 <exit>:
  a106c0:	defffe04 	addi	sp,sp,-8
  a106c4:	000b883a 	mov	r5,zero
  a106c8:	dc000015 	stw	r16,0(sp)
  a106cc:	dfc00115 	stw	ra,4(sp)
  a106d0:	2021883a 	mov	r16,r4
  a106d4:	0a108a40 	call	a108a4 <__call_exitprocs>
  a106d8:	00802874 	movhi	r2,161
  a106dc:	108aed04 	addi	r2,r2,11188
  a106e0:	11000017 	ldw	r4,0(r2)
  a106e4:	20800f17 	ldw	r2,60(r4)
  a106e8:	10000126 	beq	r2,zero,a106f0 <exit+0x30>
  a106ec:	103ee83a 	callr	r2
  a106f0:	8009883a 	mov	r4,r16
  a106f4:	0a10a940 	call	a10a94 <_exit>

00a106f8 <memcmp>:
  a106f8:	00c000c4 	movi	r3,3
  a106fc:	1980032e 	bgeu	r3,r6,a1070c <memcmp+0x14>
  a10700:	2144b03a 	or	r2,r4,r5
  a10704:	10c4703a 	and	r2,r2,r3
  a10708:	10000f26 	beq	r2,zero,a10748 <memcmp+0x50>
  a1070c:	31ffffc4 	addi	r7,r6,-1
  a10710:	3000061e 	bne	r6,zero,a1072c <memcmp+0x34>
  a10714:	00000a06 	br	a10740 <memcmp+0x48>
  a10718:	39ffffc4 	addi	r7,r7,-1
  a1071c:	00bfffc4 	movi	r2,-1
  a10720:	21000044 	addi	r4,r4,1
  a10724:	29400044 	addi	r5,r5,1
  a10728:	38800526 	beq	r7,r2,a10740 <memcmp+0x48>
  a1072c:	20c00003 	ldbu	r3,0(r4)
  a10730:	28800003 	ldbu	r2,0(r5)
  a10734:	18bff826 	beq	r3,r2,a10718 <memcmp+0x20>
  a10738:	1885c83a 	sub	r2,r3,r2
  a1073c:	f800283a 	ret
  a10740:	0005883a 	mov	r2,zero
  a10744:	f800283a 	ret
  a10748:	180f883a 	mov	r7,r3
  a1074c:	20c00017 	ldw	r3,0(r4)
  a10750:	28800017 	ldw	r2,0(r5)
  a10754:	18bfed1e 	bne	r3,r2,a1070c <memcmp+0x14>
  a10758:	31bfff04 	addi	r6,r6,-4
  a1075c:	21000104 	addi	r4,r4,4
  a10760:	29400104 	addi	r5,r5,4
  a10764:	39bff936 	bltu	r7,r6,a1074c <memcmp+0x54>
  a10768:	003fe806 	br	a1070c <memcmp+0x14>

00a1076c <__register_exitproc>:
  a1076c:	defffa04 	addi	sp,sp,-24
  a10770:	00802874 	movhi	r2,161
  a10774:	108aed04 	addi	r2,r2,11188
  a10778:	dc000015 	stw	r16,0(sp)
  a1077c:	14000017 	ldw	r16,0(r2)
  a10780:	dd000415 	stw	r20,16(sp)
  a10784:	2829883a 	mov	r20,r5
  a10788:	81405217 	ldw	r5,328(r16)
  a1078c:	dcc00315 	stw	r19,12(sp)
  a10790:	dc800215 	stw	r18,8(sp)
  a10794:	dc400115 	stw	r17,4(sp)
  a10798:	dfc00515 	stw	ra,20(sp)
  a1079c:	2023883a 	mov	r17,r4
  a107a0:	3027883a 	mov	r19,r6
  a107a4:	3825883a 	mov	r18,r7
  a107a8:	28002526 	beq	r5,zero,a10840 <__register_exitproc+0xd4>
  a107ac:	29000117 	ldw	r4,4(r5)
  a107b0:	008007c4 	movi	r2,31
  a107b4:	11002716 	blt	r2,r4,a10854 <__register_exitproc+0xe8>
  a107b8:	8800101e 	bne	r17,zero,a107fc <__register_exitproc+0x90>
  a107bc:	2105883a 	add	r2,r4,r4
  a107c0:	1085883a 	add	r2,r2,r2
  a107c4:	20c00044 	addi	r3,r4,1
  a107c8:	1145883a 	add	r2,r2,r5
  a107cc:	0009883a 	mov	r4,zero
  a107d0:	15000215 	stw	r20,8(r2)
  a107d4:	28c00115 	stw	r3,4(r5)
  a107d8:	2005883a 	mov	r2,r4
  a107dc:	dfc00517 	ldw	ra,20(sp)
  a107e0:	dd000417 	ldw	r20,16(sp)
  a107e4:	dcc00317 	ldw	r19,12(sp)
  a107e8:	dc800217 	ldw	r18,8(sp)
  a107ec:	dc400117 	ldw	r17,4(sp)
  a107f0:	dc000017 	ldw	r16,0(sp)
  a107f4:	dec00604 	addi	sp,sp,24
  a107f8:	f800283a 	ret
  a107fc:	29802204 	addi	r6,r5,136
  a10800:	00800044 	movi	r2,1
  a10804:	110e983a 	sll	r7,r2,r4
  a10808:	30c04017 	ldw	r3,256(r6)
  a1080c:	2105883a 	add	r2,r4,r4
  a10810:	1085883a 	add	r2,r2,r2
  a10814:	1185883a 	add	r2,r2,r6
  a10818:	19c6b03a 	or	r3,r3,r7
  a1081c:	14802015 	stw	r18,128(r2)
  a10820:	14c00015 	stw	r19,0(r2)
  a10824:	00800084 	movi	r2,2
  a10828:	30c04015 	stw	r3,256(r6)
  a1082c:	88bfe31e 	bne	r17,r2,a107bc <__register_exitproc+0x50>
  a10830:	30804117 	ldw	r2,260(r6)
  a10834:	11c4b03a 	or	r2,r2,r7
  a10838:	30804115 	stw	r2,260(r6)
  a1083c:	003fdf06 	br	a107bc <__register_exitproc+0x50>
  a10840:	00802874 	movhi	r2,161
  a10844:	10924d04 	addi	r2,r2,18740
  a10848:	100b883a 	mov	r5,r2
  a1084c:	80805215 	stw	r2,328(r16)
  a10850:	003fd606 	br	a107ac <__register_exitproc+0x40>
  a10854:	00800034 	movhi	r2,0
  a10858:	10800004 	addi	r2,r2,0
  a1085c:	1000021e 	bne	r2,zero,a10868 <__register_exitproc+0xfc>
  a10860:	013fffc4 	movi	r4,-1
  a10864:	003fdc06 	br	a107d8 <__register_exitproc+0x6c>
  a10868:	01006404 	movi	r4,400
  a1086c:	103ee83a 	callr	r2
  a10870:	1007883a 	mov	r3,r2
  a10874:	103ffa26 	beq	r2,zero,a10860 <__register_exitproc+0xf4>
  a10878:	80805217 	ldw	r2,328(r16)
  a1087c:	180b883a 	mov	r5,r3
  a10880:	18000115 	stw	zero,4(r3)
  a10884:	18800015 	stw	r2,0(r3)
  a10888:	80c05215 	stw	r3,328(r16)
  a1088c:	18006215 	stw	zero,392(r3)
  a10890:	18006315 	stw	zero,396(r3)
  a10894:	0009883a 	mov	r4,zero
  a10898:	883fc826 	beq	r17,zero,a107bc <__register_exitproc+0x50>
  a1089c:	003fd706 	br	a107fc <__register_exitproc+0x90>

00a108a0 <register_fini>:
  a108a0:	f800283a 	ret

00a108a4 <__call_exitprocs>:
  a108a4:	00802874 	movhi	r2,161
  a108a8:	108aed04 	addi	r2,r2,11188
  a108ac:	10800017 	ldw	r2,0(r2)
  a108b0:	defff304 	addi	sp,sp,-52
  a108b4:	df000b15 	stw	fp,44(sp)
  a108b8:	d8800115 	stw	r2,4(sp)
  a108bc:	00800034 	movhi	r2,0
  a108c0:	10800004 	addi	r2,r2,0
  a108c4:	1005003a 	cmpeq	r2,r2,zero
  a108c8:	d8800215 	stw	r2,8(sp)
  a108cc:	d8800117 	ldw	r2,4(sp)
  a108d0:	dd400815 	stw	r21,32(sp)
  a108d4:	dd000715 	stw	r20,28(sp)
  a108d8:	10805204 	addi	r2,r2,328
  a108dc:	dfc00c15 	stw	ra,48(sp)
  a108e0:	ddc00a15 	stw	r23,40(sp)
  a108e4:	dd800915 	stw	r22,36(sp)
  a108e8:	dcc00615 	stw	r19,24(sp)
  a108ec:	dc800515 	stw	r18,20(sp)
  a108f0:	dc400415 	stw	r17,16(sp)
  a108f4:	dc000315 	stw	r16,12(sp)
  a108f8:	282b883a 	mov	r21,r5
  a108fc:	2039883a 	mov	fp,r4
  a10900:	d8800015 	stw	r2,0(sp)
  a10904:	2829003a 	cmpeq	r20,r5,zero
  a10908:	d8800117 	ldw	r2,4(sp)
  a1090c:	14405217 	ldw	r17,328(r2)
  a10910:	88001026 	beq	r17,zero,a10954 <__call_exitprocs+0xb0>
  a10914:	ddc00017 	ldw	r23,0(sp)
  a10918:	88800117 	ldw	r2,4(r17)
  a1091c:	8c802204 	addi	r18,r17,136
  a10920:	143fffc4 	addi	r16,r2,-1
  a10924:	80000916 	blt	r16,zero,a1094c <__call_exitprocs+0xa8>
  a10928:	05bfffc4 	movi	r22,-1
  a1092c:	a000151e 	bne	r20,zero,a10984 <__call_exitprocs+0xe0>
  a10930:	8409883a 	add	r4,r16,r16
  a10934:	2105883a 	add	r2,r4,r4
  a10938:	1485883a 	add	r2,r2,r18
  a1093c:	10c02017 	ldw	r3,128(r2)
  a10940:	a8c01126 	beq	r21,r3,a10988 <__call_exitprocs+0xe4>
  a10944:	843fffc4 	addi	r16,r16,-1
  a10948:	85bff81e 	bne	r16,r22,a1092c <__call_exitprocs+0x88>
  a1094c:	d8800217 	ldw	r2,8(sp)
  a10950:	10003126 	beq	r2,zero,a10a18 <__call_exitprocs+0x174>
  a10954:	dfc00c17 	ldw	ra,48(sp)
  a10958:	df000b17 	ldw	fp,44(sp)
  a1095c:	ddc00a17 	ldw	r23,40(sp)
  a10960:	dd800917 	ldw	r22,36(sp)
  a10964:	dd400817 	ldw	r21,32(sp)
  a10968:	dd000717 	ldw	r20,28(sp)
  a1096c:	dcc00617 	ldw	r19,24(sp)
  a10970:	dc800517 	ldw	r18,20(sp)
  a10974:	dc400417 	ldw	r17,16(sp)
  a10978:	dc000317 	ldw	r16,12(sp)
  a1097c:	dec00d04 	addi	sp,sp,52
  a10980:	f800283a 	ret
  a10984:	8409883a 	add	r4,r16,r16
  a10988:	88c00117 	ldw	r3,4(r17)
  a1098c:	2105883a 	add	r2,r4,r4
  a10990:	1445883a 	add	r2,r2,r17
  a10994:	18ffffc4 	addi	r3,r3,-1
  a10998:	11800217 	ldw	r6,8(r2)
  a1099c:	1c001526 	beq	r3,r16,a109f4 <__call_exitprocs+0x150>
  a109a0:	10000215 	stw	zero,8(r2)
  a109a4:	303fe726 	beq	r6,zero,a10944 <__call_exitprocs+0xa0>
  a109a8:	00c00044 	movi	r3,1
  a109ac:	1c06983a 	sll	r3,r3,r16
  a109b0:	90804017 	ldw	r2,256(r18)
  a109b4:	8cc00117 	ldw	r19,4(r17)
  a109b8:	1884703a 	and	r2,r3,r2
  a109bc:	10001426 	beq	r2,zero,a10a10 <__call_exitprocs+0x16c>
  a109c0:	90804117 	ldw	r2,260(r18)
  a109c4:	1884703a 	and	r2,r3,r2
  a109c8:	10000c1e 	bne	r2,zero,a109fc <__call_exitprocs+0x158>
  a109cc:	2105883a 	add	r2,r4,r4
  a109d0:	1485883a 	add	r2,r2,r18
  a109d4:	11400017 	ldw	r5,0(r2)
  a109d8:	e009883a 	mov	r4,fp
  a109dc:	303ee83a 	callr	r6
  a109e0:	88800117 	ldw	r2,4(r17)
  a109e4:	98bfc81e 	bne	r19,r2,a10908 <__call_exitprocs+0x64>
  a109e8:	b8800017 	ldw	r2,0(r23)
  a109ec:	147fd526 	beq	r2,r17,a10944 <__call_exitprocs+0xa0>
  a109f0:	003fc506 	br	a10908 <__call_exitprocs+0x64>
  a109f4:	8c000115 	stw	r16,4(r17)
  a109f8:	003fea06 	br	a109a4 <__call_exitprocs+0x100>
  a109fc:	2105883a 	add	r2,r4,r4
  a10a00:	1485883a 	add	r2,r2,r18
  a10a04:	11000017 	ldw	r4,0(r2)
  a10a08:	303ee83a 	callr	r6
  a10a0c:	003ff406 	br	a109e0 <__call_exitprocs+0x13c>
  a10a10:	303ee83a 	callr	r6
  a10a14:	003ff206 	br	a109e0 <__call_exitprocs+0x13c>
  a10a18:	88800117 	ldw	r2,4(r17)
  a10a1c:	1000081e 	bne	r2,zero,a10a40 <__call_exitprocs+0x19c>
  a10a20:	89000017 	ldw	r4,0(r17)
  a10a24:	20000726 	beq	r4,zero,a10a44 <__call_exitprocs+0x1a0>
  a10a28:	b9000015 	stw	r4,0(r23)
  a10a2c:	8809883a 	mov	r4,r17
  a10a30:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  a10a34:	bc400017 	ldw	r17,0(r23)
  a10a38:	883fb71e 	bne	r17,zero,a10918 <__call_exitprocs+0x74>
  a10a3c:	003fc506 	br	a10954 <__call_exitprocs+0xb0>
  a10a40:	89000017 	ldw	r4,0(r17)
  a10a44:	882f883a 	mov	r23,r17
  a10a48:	2023883a 	mov	r17,r4
  a10a4c:	883fb21e 	bne	r17,zero,a10918 <__call_exitprocs+0x74>
  a10a50:	003fc006 	br	a10954 <__call_exitprocs+0xb0>

00a10a54 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  a10a54:	defffd04 	addi	sp,sp,-12
  a10a58:	df000215 	stw	fp,8(sp)
  a10a5c:	df000204 	addi	fp,sp,8
  a10a60:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  a10a64:	e0bfff17 	ldw	r2,-4(fp)
  a10a68:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  a10a6c:	e0bffe17 	ldw	r2,-8(fp)
  a10a70:	1005003a 	cmpeq	r2,r2,zero
  a10a74:	1000021e 	bne	r2,zero,a10a80 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  a10a78:	002af070 	cmpltui	zero,zero,43969
  a10a7c:	00000106 	br	a10a84 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  a10a80:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  a10a84:	e037883a 	mov	sp,fp
  a10a88:	df000017 	ldw	fp,0(sp)
  a10a8c:	dec00104 	addi	sp,sp,4
  a10a90:	f800283a 	ret

00a10a94 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  a10a94:	defffd04 	addi	sp,sp,-12
  a10a98:	dfc00215 	stw	ra,8(sp)
  a10a9c:	df000115 	stw	fp,4(sp)
  a10aa0:	df000104 	addi	fp,sp,4
  a10aa4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  a10aa8:	e13fff17 	ldw	r4,-4(fp)
  a10aac:	0a10a540 	call	a10a54 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  a10ab0:	003fff06 	br	a10ab0 <_exit+0x1c>
  a10ab4:	00000010 	cmplti	zero,zero,0
  a10ab8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  a10abc:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_3+0x4b7a0>
  a10ac0:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_3+0x1187c0>
  a10ac4:	001b0c0b 	ldhu	zero,27696(zero)
  a10ac8:	00000028 	cmpgeui	zero,zero,0
  a10acc:	00000018 	cmpnei	zero,zero,0
  a10ad0:	00a0a9cc 	andi	r2,zero,33447
  a10ad4:	000005dc 	xori	zero,zero,23
  a10ad8:	400e4400 	call	400e440 <__alt_mem_sram_0+0x278e440>
  a10adc:	92099170 	cmpltui	r8,r18,9797
  a10ae0:	95079308 	cmpgei	r20,r18,7756
  a10ae4:	97049605 	stb	fp,4696(r18)
  a10ae8:	90019f03 	ldbu	zero,1660(r18)
  a10aec:	9c06940a 	0x9c06940a
  a10af0:	00000002 	0x2
  a10af4:	00000028 	cmpgeui	zero,zero,0
  a10af8:	00000044 	movi	zero,1
  a10afc:	00a0afa8 	cmpgeui	r2,zero,33470
  a10b00:	000005b0 	cmpltui	zero,zero,22
  a10b04:	3c0e4400 	call	3c0e440 <__alt_mem_sram_0+0x238e440>
  a10b08:	92099168 	cmpgeui	r8,r18,9797
  a10b0c:	95079308 	cmpgei	r20,r18,7756
  a10b10:	9c039705 	stb	r16,3676(r19)
  a10b14:	90019f02 	0x90019f02
  a10b18:	9606940a 	0x9606940a
  a10b1c:	00000004 	movi	zero,0
  a10b20:	00a108a0 	cmpeqi	r2,zero,-31710
