
Fractal_cpu2.elf:     file format elf32-littlenios2
Fractal_cpu2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00c001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00c00000 paddr 0x00c00000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00c00020 paddr 0x00c00020 align 2**12
         filesz 0x00010af0 memsz 0x00010af0 flags r-x
    LOAD off    0x00011b10 vaddr 0x00c10b10 paddr 0x00c126f4 align 2**12
         filesz 0x00001be4 memsz 0x00001be4 flags rw-
    LOAD off    0x000142d8 vaddr 0x00c142d8 paddr 0x00c142d8 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00c00000  00c00000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00c00020  00c00020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010478  00c001b4  00c001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004e4  00c1062c  00c1062c  0001162c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001be4  00c10b10  00c126f4  00011b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  00c142d8  00c142d8  000142d8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000136f4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000ff8  00000000  00000000  00013718  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b85  00000000  00000000  00014710  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00028e19  00000000  00000000  00016295  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009ced  00000000  00000000  0003f0ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00018f15  00000000  00000000  00048d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002040  00000000  00000000  00061cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002beb  00000000  00000000  00063cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e334  00000000  00000000  000668db  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00074c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c90  00000000  00000000  00074c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007955a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007955d  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00079562  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00079563  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00079567  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0007956b  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  0007956f  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  00079573  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  00079577  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0007957b  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  00079586  2**0
                  CONTENTS, READONLY
 28 .jdi          0000ff9d  00000000  00000000  000795a6  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000d9e6e  00000000  00000000  00089543  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00c00000 l    d  .entry	00000000 .entry
00c00020 l    d  .exceptions	00000000 .exceptions
00c001b4 l    d  .text	00000000 .text
00c1062c l    d  .rodata	00000000 .rodata
00c10b10 l    d  .rwdata	00000000 .rwdata
00c142d8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00c001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Fractal.c
00000000 l    df *ABS*	00000000 Project.c
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 ef_pow.c
00c12688 l     O .rwdata	00000008 bp
00c12690 l     O .rwdata	00000008 dp_l
00c12698 l     O .rwdata	00000008 dp_h
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_rint.c
00c106ac l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_isnan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00c01c40 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00c02518 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00c10b10 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00c03954 l     F .text	00000058 __sprint_r
00c1084e l     O .rodata	00000010 blanks.3452
00c1083e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00c059b8 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00c073b4 l     F .text	00000058 std
00c074c0 l     F .text	00000008 __fp_lock
00c074c8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00c126b0 l     O .rwdata	00000004 charset
00c1087c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00c109c4 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00c0bf9c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00c0c1e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00c0c244 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00c0c344 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00c0c464 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00c0c544 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00c0c6a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00c0c8b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00c126d4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00c0cb4c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00c114cc l     O .rwdata	00001060 jtag_uart_2
00c1252c l     O .rwdata	0000003c mailbox_0
00c12568 l     O .rwdata	0000003c mailbox_1
00c125a4 l     O .rwdata	0000003c mailbox_2
00c125e0 l     O .rwdata	0000003c mailbox_3
00c1261c l     O .rwdata	00000054 video_pixel_buffer_dma_0
00c0ce58 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00c0d098 l     F .text	00000228 altera_avalon_jtag_uart_irq
00c0d2c0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
00c0da94 l     F .text	0000006c alt_avalon_mutex_reg
00c0db00 l     F .text	00000060 alt_get_errno
00c0dc94 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00c0de64 l     F .text	0000007c alt_mutex_trylock
00c0df38 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00c0faa8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00c103a8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00c1055c l     F .text	00000040 alt_sim_halt
00c00200 g     F .text	00000094 genColor
00c12684 g     O .rwdata	00000004 maxIter
00c09170 g     F .text	00000094 _mprec_log10
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
00c0925c g     F .text	00000088 __any_on
00c0a968 g     F .text	00000070 _isatty_r
00c1099c g     O .rodata	00000028 __mprec_tinytens
00c0c700 g     F .text	00000050 alt_main
00c0dce4 g     F .text	000000a8 altera_avalon_mailbox_pend
00c0ef5c g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00c03758 g     F .text	000000a0 _puts_r
00c14338 g     O .bss	00000100 alt_irq
00c0a9d8 g     F .text	00000078 _lseek_r
00c126f4 g       *ABS*	00000000 __flash_rwdata_start
00c0ba18 g     F .text	00000088 __eqdf2
00c145c8 g       *ABS*	00000000 __alt_heap_start
00c0dd8c g     F .text	000000d8 altera_avalon_mailbox_get
00c036e0 g     F .text	00000044 printf
00c0a434 g     F .text	00000068 __sseek
00c0741c g     F .text	000000a4 __sinit
00c0e2cc g     F .text	00000024 alt_get_cpu_freq
00c080f4 g     F .text	00000084 _setlocale_r
00c0751c g     F .text	00000068 __sfmoreglue
00c0c770 g     F .text	00000020 __malloc_unlock
00c020d8 g     F .text	00000174 __divsf3
00c08bec g     F .text	000000e0 memmove
00c0750c g     F .text	00000010 _cleanup
00c007a0 g     F .text	00000458 powf
00c0dff8 g     F .text	00000040 altera_avalon_mutex_trylock
00c092e4 g     F .text	000000bc _Balloc
00c12678 g     O .rwdata	00000004 NUM_CPUS
00c0e330 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00c0baa0 g     F .text	00000088 __gtdf2
00c036d0 g     F .text	00000010 __errno
00c0e2f0 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00c00000 g     F .entry	0000001c __reset
00c12680 g     O .rwdata	00000004 colSize
00c0e094 g     F .text	0000007c altera_avalon_mutex_is_mine
00c00020 g       *ABS*	00000000 __flash_exceptions_start
00c0a8f4 g     F .text	00000074 _fstat_r
00c142f4 g     O .bss	00000004 errno
00c02cfc g     F .text	00000038 __make_dp
00c03190 g     F .text	0000002c __make_fp
00c142fc g     O .bss	00000004 alt_argv
00c1a670 g       *ABS*	00000000 _gp
00c01e24 g     F .text	00000070 __subsf3
00c0e4d0 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00006000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
00c1134c g     O .rwdata	00000180 alt_fd_list
00c0fbd0 g     F .text	00000094 alt_find_dev
00c08b4c g     F .text	000000a0 memcpy
00c07500 g     F .text	0000000c _cleanup_r
00c0bc38 g     F .text	000000f8 __floatsidf
00c0bbb0 g     F .text	00000088 __ltdf2
00c1062c g       *ABS*	00000000 __DTOR_END__
00c037f8 g     F .text	00000014 puts
00c10104 g     F .text	00000020 altera_nios2_irq_init
00c090c0 g     F .text	000000b0 __ratio
00c0dbd8 g     F .text	000000bc altera_avalon_mailbox_post
00c0e580 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00c0d4d8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00c03724 g     F .text	00000034 _printf_r
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00c0c0d8 g     F .text	00000008 __udivsi3
00c0c3a4 g     F .text	000000c0 isatty
00c108ac g     O .rodata	000000c8 __mprec_tens
00c0dbb8 g     F .text	00000020 altera_avalon_mailbox_close
00c0ec0c g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00c080d0 g     F .text	00000008 __locale_charset
00c023b4 g     F .text	00000078 __lesf2
00c10124 g     F .text	00000090 alt_icache_flush
00c142e8 g     O .bss	00000004 __malloc_top_pad
00c0e26c g     F .text	00000040 perf_get_num_starts
00c126ac g     O .rwdata	00000004 __mb_cur_max
00c080d8 g     F .text	0000000c _localeconv_r
00c099dc g     F .text	0000003c __i2b
00c07ab4 g     F .text	0000049c __sfvwrite_r
00c01aa0 g     F .text	0000001c finitef
00c0a3bc g     F .text	00000070 _sbrk_r
00c0f3f0 g     F .text	000000d0 helper_plot_pixel
00c01a90 g     F .text	00000010 fabsf
00c0aa50 g     F .text	00000078 _read_r
00c10f10 g     O .rwdata	0000000c __lc_ctype
00c126cc g     O .rwdata	00000004 alt_max_fd
00c034d0 g     F .text	00000138 __unpack_d
00c0a7d0 g     F .text	00000110 _fclose_r
00c07380 g     F .text	00000034 fflush
00c142ec g     O .bss	00000004 __malloc_max_sbrked_mem
00c024c4 g     F .text	00000054 __extendsfdf2
00c01abc g     F .text	00000018 isnanf
00c029a8 g     F .text	00000074 __adddf3
00c08fa0 g     F .text	00000120 __b2d
00c0e5b4 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
00c0b0a4 g     F .text	000005b0 __umoddi3
00c0c5b0 g     F .text	000000f0 lseek
00c0e110 g     F .text	00000058 altera_avalon_mutex_first_lock
00c12674 g     O .rwdata	00000004 targetY
00c126a0 g     O .rwdata	00000004 __fdlib_version
00c126a8 g     O .rwdata	00000004 _global_impure_ptr
00c09d58 g     F .text	000005f4 _realloc_r
00c145c8 g       *ABS*	00000000 __bss_end
00c0fe68 g     F .text	000000f8 alt_iic_isr_register
00c0e718 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00c0fff8 g     F .text	0000010c alt_tick
00c0aac8 g     F .text	000005dc __udivdi3
00c10974 g     O .rodata	00000028 __mprec_bigtens
00c09c38 g     F .text	00000120 __s2b
00c0be08 g     F .text	00000194 __floatunsidf
00c08ec0 g     F .text	00000060 __mcmp
00c074e8 g     F .text	00000018 __fp_lock_all
00c0fe20 g     F .text	00000048 alt_ic_irq_enabled
00c0ff60 g     F .text	00000098 alt_alarm_stop
00c14304 g     O .bss	00000004 alt_irq_active
00c000ec g     F .exceptions	000000c8 alt_irq_handler
00c11324 g     O .rwdata	00000028 alt_dev_null
00c002a0 g     F .text	00000148 barrier
00c0dee0 g     F .text	00000058 altera_avalon_mutex_open
00c01880 g     F .text	00000210 rint
00c03020 g     F .text	000000c8 __unpack_f
00c0f9b0 g     F .text	00000044 alt_dcache_flush_all
00c08d8c g     F .text	00000070 __hi0bits
00c0f32c g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
00c0bd30 g     F .text	000000d8 __fixdfsi
00c126f4 g       *ABS*	00000000 __ram_rwdata_end
00c126c4 g     O .rwdata	00000008 alt_dev_list
00c0ca2c g     F .text	00000120 write
00c0f4c0 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00c022c4 g     F .text	00000078 __gtsf2
00c126e0 g     O .rwdata	00000008 alt_mutex_list
00c10b10 g       *ABS*	00000000 __ram_rodata_end
00c0c270 g     F .text	000000d4 fstat
00c1267c g     O .rwdata	00000004 rowSize
00c09b18 g     F .text	00000120 __pow5mult
00c142dc g     O .bss	00000004 __nlocale_changed
00c0c0e0 g     F .text	00000008 __umodsi3
00c145c8 g       *ABS*	00000000 end
00c02ec0 g     F .text	00000160 __pack_f
00c142d8 g     O .bss	00000004 myPixelBuffer
00c0cfd8 g     F .text	000000c0 altera_avalon_jtag_uart_init
00c10628 g       *ABS*	00000000 __CTOR_LIST__
00e00000 g       *ABS*	00000000 __alt_stack_pointer
00c02e40 g     F .text	00000080 __clzsi2
00c0d6fc g     F .text	00000240 altera_avalon_jtag_uart_write
00c0d93c g     F .text	00000158 alt_avalon_mailbox_init
00c0740c g     F .text	00000004 __sfp_lock_acquire
00c08a68 g     F .text	000000e4 memchr
00c039ac g     F .text	00001eac ___vfprintf_internal_r
00c03880 g     F .text	00000060 _sprintf_r
00c077a0 g     F .text	00000314 _free_r
00c103ac g     F .text	000001b0 __call_exitprocs
00c12670 g     O .rwdata	00000004 targetX
00c142e0 g     O .bss	00000004 __mlocale_changed
00c126b8 g     O .rwdata	00000004 __malloc_sbrk_base
00c001b4 g     F .text	0000004c _start
00c14308 g     O .bss	00000004 _alt_tick_rate
00c096a8 g     F .text	0000014c __lshift
00c1430c g     O .bss	00000004 _alt_nticks
00c0c790 g     F .text	00000120 read
00c0cbe0 g     F .text	00000278 alt_sys_init
00c0242c g     F .text	00000098 __floatsisf
00c10274 g     F .text	00000134 __register_exitproc
00c0e038 g     F .text	0000005c altera_avalon_mutex_unlock
00c097f4 g     F .text	000001e8 __multiply
00c0d370 g     F .text	00000074 altera_avalon_jtag_uart_close
00c10b10 g       *ABS*	00000000 __ram_rwdata_start
00c1062c g       *ABS*	00000000 __ram_rodata_start
00c14310 g     O .bss	00000028 __malloc_current_mallinfo
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00c0224c g     F .text	00000078 __eqsf2
00c093a0 g     F .text	0000017c __d2b
00c0ce90 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00c03608 g     F .text	000000c8 __fpcmp_parts_d
00c0a760 g     F .text	00000070 _close_r
00c005d4 g     F .text	00000138 drawFrame
00c0e168 g     F .text	000000b0 perf_get_section_time
00c10200 g     F .text	00000074 memcmp
00c0cf40 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00c145c8 g       *ABS*	00000000 __alt_stack_base
00c0cf88 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00c0587c g     F .text	0000013c __swsetup_r
00c02a1c g     F .text	00000258 __divdf3
00c07584 g     F .text	000000f0 __sfp
00c09204 g     F .text	00000058 __copybits
00c0e218 g     F .text	00000054 perf_get_total_time
00c10f1c g     O .rwdata	00000408 __malloc_av_
00c07418 g     F .text	00000004 __sinit_lock_release
00c0b654 g     F .text	000003c4 __muldf3
00c00bf8 g     F .text	00000b14 __ieee754_powf
00c0a518 g     F .text	00000060 __sread
00c106bc g     O .rodata	00000010 __thenan_sf
00c0f9f4 g     F .text	000000b4 alt_dev_llist_insert
00c0c750 g     F .text	00000020 __malloc_lock
00c0c970 g     F .text	000000bc sbrk
00c01adc g     F .text	0000014c scalbnf
00c07184 g     F .text	000001fc _fflush_r
00c0a6ac g     F .text	000000b4 _calloc_r
00c142d8 g       *ABS*	00000000 __bss_start
00c08ccc g     F .text	00000098 memset
00c0170c g     F .text	0000016c __ieee754_sqrtf
00c0070c g     F .text	00000094 main
00c14300 g     O .bss	00000004 alt_envp
00c142f0 g     O .bss	00000004 __malloc_max_total_mem
00c0e528 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
00c0cee8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00c0233c g     F .text	00000078 __ltsf2
00c0a42c g     F .text	00000008 __sclose
00c01878 g     F .text	00000008 matherr
00e00000 g       *ABS*	00000000 __alt_heap_limit
00c0a8e0 g     F .text	00000014 fclose
00c02d34 g     F .text	00000074 __truncdfsf2
00c14438 g     O .bss	00000190 _atexit0
00c0dfb8 g     F .text	00000040 altera_avalon_mutex_lock
00c05bd0 g     F .text	000015b4 _dtoa_r
00c08328 g     F .text	00000740 _malloc_r
00c126d0 g     O .rwdata	00000004 alt_errno
00c08018 g     F .text	000000b8 _fwalk
00c0c018 g     F .text	00000060 __divsi3
00c106cc g     O .rodata	00000014 __thenan_df
00c07674 g     F .text	0000012c _malloc_trim_r
00c1062c g       *ABS*	00000000 __CTOR_END__
00c01ef8 g     F .text	000001e0 __mulsf3
00c0a578 g     F .text	000000bc strcmp
00c1062c g       *ABS*	00000000 __flash_rodata_start
00c1062c g       *ABS*	00000000 __DTOR_LIST__
00c02c74 g     F .text	00000088 __nedf2
01880000 g       *ABS*	00000000 __alt_mem_sram_0
00c0cbac g     F .text	00000034 alt_irq_init
00c0c910 g     F .text	00000060 alt_release_fd
00c01c28 g     F .text	00000018 copysignf
00c0380c g     F .text	00000074 sprintf
00c106e0 g     O .rodata	00000100 __clz_tab
00c142e4 g     O .bss	00000004 _PathLocale
00c101b4 g     F .text	00000014 atexit
00c0a634 g     F .text	00000078 _write_r
00c08178 g     F .text	0000001c setlocale
00c01ad4 g     F .text	00000008 nanf
00c126a4 g     O .rwdata	00000004 _impure_ptr
00c142f8 g     O .bss	00000004 alt_argc
00c0fb6c g     F .text	00000064 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00c00020 g       .exceptions	00000000 alt_irq_entry
00c08f20 g     F .text	00000080 __ulp
00c0a34c g     F .text	00000040 __isinfd
00c074d0 g     F .text	00000018 __fp_unlock_all
00c126d8 g     O .rwdata	00000008 alt_mailbox_list
00c005a4 g     F .text	00000030 setup
00c126bc g     O .rwdata	00000008 alt_fs_list
00c003e8 g     F .text	0000001c drawPixel
00c00020 g       *ABS*	00000000 __ram_exceptions_start
00c080e4 g     F .text	00000010 localeconv
00c0fc94 g     F .text	00000050 alt_ic_isr_register
00c126f4 g       *ABS*	00000000 _edata
00c145c8 g       *ABS*	00000000 _end
00c001b4 g       *ABS*	00000000 __ram_exceptions_end
00c0d3e4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00c0fd80 g     F .text	000000a0 alt_ic_irq_disable
00c0a49c g     F .text	0000007c __swrite
00c126b4 g     O .rwdata	00000004 __malloc_trim_threshold
00c0e2ac g     F .text	00000020 alt_get_performance_counter_base
00c101c8 g     F .text	00000038 exit
00c07f50 g     F .text	000000c8 _fwalk_reent
00c0951c g     F .text	0000018c __mdiff
00c00404 g     F .text	000001a0 mandelbrot
00c0c078 g     F .text	00000060 __modsi3
00e00000 g       *ABS*	00000000 __alt_data_end
00c00020 g     F .exceptions	00000000 alt_exception
00c07410 g     F .text	00000004 __sfp_lock_release
00c0db60 g     F .text	00000058 altera_avalon_mailbox_open
00c030e8 g     F .text	000000a8 __fpcmp_parts_f
00c1059c g     F .text	00000020 _exit
00c0a38c g     F .text	00000030 __isnand
00c0f85c g     F .text	00000154 alt_alarm_start
00c02da8 g     F .text	00000098 __muldi3
00c08194 g     F .text	00000194 __smakebuf_r
00c038e0 g     F .text	00000074 strlen
00c0bb28 g     F .text	00000088 __gedf2
00c00294 g     F .text	0000000c clearScreen
00c0fc64 g     F .text	00000030 alt_icache_flush_all
00c126e8 g     O .rwdata	00000004 alt_priority_mask
00c0fce4 g     F .text	0000009c alt_ic_irq_enable
00c05858 g     F .text	00000024 __vfprintf_internal
00c0df98 g     F .text	00000020 altera_avalon_mutex_close
00c02928 g     F .text	00000080 __subdf3
00c08dfc g     F .text	000000c4 __lo0bits
00c126ec g     O .rwdata	00000008 alt_alarm_list
00c0fb08 g     F .text	00000064 _do_ctors
00c0c0e8 g     F .text	000000fc close
00c01e94 g     F .text	00000064 __addsf3
00c0c4c4 g     F .text	00000080 alt_load
00c031bc g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00c07414 g     F .text	00000004 __sinit_lock_acquire
00c09a18 g     F .text	00000100 __multadd
00c08d64 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00c00000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  c00000:	00810014 	movui	r2,1024
#endif

0:
    initi r2
  c00004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  c00008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  c0000c:	00bffd16 	blt	zero,r2,c00004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  c00010:	00403034 	movhi	at,192
    ori r1, r1, %lo(_start)
  c00014:	08406d14 	ori	at,at,436
    jmp r1
  c00018:	0800683a 	jmp	at
  c0001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

00c00020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  c00020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  c00024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  c00028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  c0002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  c00030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  c00034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  c00038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  c0003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  c00040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  c00044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  c00048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  c0004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  c00050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  c00054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  c00058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  c0005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  c00060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  c00064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  c00068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  c0006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  c00070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  c00074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  c00078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  c0007c:	10000326 	beq	r2,zero,c0008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  c00080:	20000226 	beq	r4,zero,c0008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  c00084:	0c000ec0 	call	c000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  c00088:	00000306 	br	c00098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  c0008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  c00090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  c00094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  c00098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  c0009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  c000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  c000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  c000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  c000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  c000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  c000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  c000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  c000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  c000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  c000e8:	ef80083a 	eret

00c000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  c000ec:	defff904 	addi	sp,sp,-28
  c000f0:	dfc00615 	stw	ra,24(sp)
  c000f4:	df000515 	stw	fp,20(sp)
  c000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  c000fc:	0005313a 	rdctl	r2,ipending
  c00100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  c00104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  c00108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  c0010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  c00110:	00800044 	movi	r2,1
  c00114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  c00118:	e0ffff17 	ldw	r3,-4(fp)
  c0011c:	e0bffe17 	ldw	r2,-8(fp)
  c00120:	1884703a 	and	r2,r3,r2
  c00124:	1005003a 	cmpeq	r2,r2,zero
  c00128:	1000161e 	bne	r2,zero,c00184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  c0012c:	e0bffd17 	ldw	r2,-12(fp)
  c00130:	00c03074 	movhi	r3,193
  c00134:	18d0ce04 	addi	r3,r3,17208
  c00138:	100490fa 	slli	r2,r2,3
  c0013c:	10c5883a 	add	r2,r2,r3
  c00140:	11400017 	ldw	r5,0(r2)
  c00144:	e0bffd17 	ldw	r2,-12(fp)
  c00148:	00c03074 	movhi	r3,193
  c0014c:	18d0ce04 	addi	r3,r3,17208
  c00150:	100490fa 	slli	r2,r2,3
  c00154:	10c5883a 	add	r2,r2,r3
  c00158:	10800104 	addi	r2,r2,4
  c0015c:	11000017 	ldw	r4,0(r2)
  c00160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  c00164:	0005313a 	rdctl	r2,ipending
  c00168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  c0016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  c00170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  c00174:	e0bfff17 	ldw	r2,-4(fp)
  c00178:	1004c03a 	cmpne	r2,r2,zero
  c0017c:	103fe31e 	bne	r2,zero,c0010c <alt_irq_handler+0x20>
  c00180:	00000706 	br	c001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  c00184:	e0bffe17 	ldw	r2,-8(fp)
  c00188:	1085883a 	add	r2,r2,r2
  c0018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  c00190:	e0bffd17 	ldw	r2,-12(fp)
  c00194:	10800044 	addi	r2,r2,1
  c00198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  c0019c:	003fde06 	br	c00118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  c001a0:	e037883a 	mov	sp,fp
  c001a4:	dfc00117 	ldw	ra,4(sp)
  c001a8:	df000017 	ldw	fp,0(sp)
  c001ac:	dec00204 	addi	sp,sp,8
  c001b0:	f800283a 	ret

Disassembly of section .text:

00c001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  c001b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
  c001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  c001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  c001c0:	00bffd16 	blt	zero,r2,c001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  c001c4:	06c03834 	movhi	sp,224
    ori sp, sp, %lo(__alt_stack_pointer)
  c001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  c001cc:	06803074 	movhi	gp,193
    ori gp, gp, %lo(_gp)
  c001d0:	d6a99c14 	ori	gp,gp,42608
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  c001d4:	00803074 	movhi	r2,193
    ori r2, r2, %lo(__bss_start)
  c001d8:	1090b614 	ori	r2,r2,17112

    movhi r3, %hi(__bss_end)
  c001dc:	00c03074 	movhi	r3,193
    ori r3, r3, %lo(__bss_end)
  c001e0:	18d17214 	ori	r3,r3,17864

    beq r2, r3, 1f
  c001e4:	10c00326 	beq	r2,r3,c001f4 <_start+0x40>

0:
    stw zero, (r2)
  c001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  c001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  c001f0:	10fffd36 	bltu	r2,r3,c001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  c001f4:	0c0c4c40 	call	c0c4c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  c001f8:	0c0c7000 	call	c0c700 <alt_main>

00c001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  c001fc:	003fff06 	br	c001fc <alt_after_alt_main>

00c00200 <genColor>:
void setup(void) {
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
  c00200:	defffe04 	addi	sp,sp,-8
  c00204:	dfc00115 	stw	ra,4(sp)
  c00208:	dc000015 	stw	r16,0(sp)
  c0020c:	2021883a 	mov	r16,r4
	int color = 0;
	if (iter == maxIter) {
  c00210:	0c0242c0 	call	c0242c <__floatsisf>
  c00214:	d1600517 	ldw	r5,-32748(gp)
  c00218:	1009883a 	mov	r4,r2
  c0021c:	0c0224c0 	call	c0224c <__eqsf2>
		color = black;
	}
	else {
		//		iter = iter + 12 / 2;
		int red = iter * 2;//(int)round(overIter*iter*0.3);
  c00220:	8407883a 	add	r3,r16,r16
			red = 255;
		if(green > 255)
			green = 255;
		if(blue > 255)
			blue = 255;
		color = (red << 16) + (green << 8) + (blue);
  c00224:	800a90fa 	slli	r5,r16,3
  c00228:	01c03fc4 	movi	r7,255
  c0022c:	180d883a 	mov	r6,r3
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  c00230:	0009883a 	mov	r4,zero
  c00234:	10000926 	beq	r2,zero,c0025c <genColor+0x5c>
	}
	else {
		//		iter = iter + 12 / 2;
		int red = iter * 2;//(int)round(overIter*iter*0.3);
		int green = iter * 8;//(int)round(overIter*iter*0.5);
		int blue = iter * 3;//(int)round(overIter*iter);
  c00238:	1c05883a 	add	r2,r3,r16
			red = 255;
		if(green > 255)
			green = 255;
		if(blue > 255)
			blue = 255;
		color = (red << 16) + (green << 8) + (blue);
  c0023c:	1009883a 	mov	r4,r2
  c00240:	39401016 	blt	r7,r5,c00284 <genColor+0x84>
  c00244:	2806923a 	slli	r3,r5,8
  c00248:	39000b16 	blt	r7,r4,c00278 <genColor+0x78>
  c0024c:	39800816 	blt	r7,r6,c00270 <genColor+0x70>
  c00250:	3004943a 	slli	r2,r6,16
  c00254:	2085883a 	add	r2,r4,r2
  c00258:	1889883a 	add	r4,r3,r2
	}
	return color;
}
  c0025c:	2005883a 	mov	r2,r4
  c00260:	dfc00117 	ldw	ra,4(sp)
  c00264:	dc000017 	ldw	r16,0(sp)
  c00268:	dec00204 	addi	sp,sp,8
  c0026c:	f800283a 	ret
			red = 255;
		if(green > 255)
			green = 255;
		if(blue > 255)
			blue = 255;
		color = (red << 16) + (green << 8) + (blue);
  c00270:	380d883a 	mov	r6,r7
  c00274:	003ff606 	br	c00250 <genColor+0x50>
  c00278:	3809883a 	mov	r4,r7
  c0027c:	39bff40e 	bge	r7,r6,c00250 <genColor+0x50>
  c00280:	003ffb06 	br	c00270 <genColor+0x70>
  c00284:	380b883a 	mov	r5,r7
  c00288:	2806923a 	slli	r3,r5,8
  c0028c:	393fef0e 	bge	r7,r4,c0024c <genColor+0x4c>
  c00290:	003ff906 	br	c00278 <genColor+0x78>

00c00294 <clearScreen>:
	}
}

void clearScreen(void) {
	//clears the part of the screen controlled by the pixel buffer
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
  c00294:	d1271a17 	ldw	r4,-25496(gp)
  c00298:	000b883a 	mov	r5,zero
  c0029c:	0c0e5b41 	jmpi	c0e5b4 <alt_up_pixel_buffer_dma_clear_screen>

00c002a0 <barrier>:
	alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, row, col);
}

void barrier(alt_u8 barrierNum) {
	alt_u32 msg;
	alt_mailbox_dev *mb[NUM_CPUS];
  c002a0:	d1a00217 	ldw	r6,-32760(gp)
  c002a4:	00ffff04 	movi	r3,-4

void drawPixel(int color, int row, int col) {
	alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, row, col);
}

void barrier(alt_u8 barrierNum) {
  c002a8:	deffe404 	addi	sp,sp,-112
	alt_u32 msg;
	alt_mailbox_dev *mb[NUM_CPUS];
  c002ac:	3185883a 	add	r2,r6,r6
  c002b0:	1085883a 	add	r2,r2,r2
  c002b4:	10800184 	addi	r2,r2,6
  c002b8:	10c4703a 	and	r2,r2,r3

void drawPixel(int color, int row, int col) {
	alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, row, col);
}

void barrier(alt_u8 barrierNum) {
  c002bc:	df001a15 	stw	fp,104(sp)
  c002c0:	dd401915 	stw	r21,100(sp)
  c002c4:	dd001815 	stw	r20,96(sp)
  c002c8:	dcc01715 	stw	r19,92(sp)
  c002cc:	dfc01b15 	stw	ra,108(sp)
  c002d0:	dc801615 	stw	r18,88(sp)
  c002d4:	dc401515 	stw	r17,84(sp)
  c002d8:	dc001415 	stw	r16,80(sp)
  c002dc:	df001404 	addi	fp,sp,80
  c002e0:	d82b883a 	mov	r21,sp
	alt_u32 msg;
	alt_mailbox_dev *mb[NUM_CPUS];
  c002e4:	d8b7c83a 	sub	sp,sp,r2

void drawPixel(int color, int row, int col) {
	alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, row, col);
}

void barrier(alt_u8 barrierNum) {
  c002e8:	2027883a 	mov	r19,r4
	alt_u32 msg;
	alt_mailbox_dev *mb[NUM_CPUS];
  c002ec:	d829883a 	mov	r20,sp
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
  c002f0:	0025317a 	rdctl	r18,cpuid
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
  c002f4:	0180190e 	bge	zero,r6,c0035c <barrier+0xbc>
  c002f8:	d821883a 	mov	r16,sp
  c002fc:	0023883a 	mov	r17,zero
		sprintf(mb_name, "/dev/mailbox_%d", i);
  c00300:	880d883a 	mov	r6,r17
  c00304:	01403074 	movhi	r5,193
  c00308:	29418b04 	addi	r5,r5,1580
  c0030c:	e13fec04 	addi	r4,fp,-80
  c00310:	0c0380c0 	call	c0380c <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  c00314:	e13fec04 	addi	r4,fp,-80
  c00318:	0c0db600 	call	c0db60 <altera_avalon_mailbox_open>
	alt_mailbox_dev *mb[NUM_CPUS];
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
  c0031c:	d1a00217 	ldw	r6,-32760(gp)
  c00320:	8c400044 	addi	r17,r17,1
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
  c00324:	80800015 	stw	r2,0(r16)
	alt_mailbox_dev *mb[NUM_CPUS];
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
  c00328:	84000104 	addi	r16,r16,4
  c0032c:	89bff416 	blt	r17,r6,c00300 <barrier+0x60>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}

	for (i = 0; i < NUM_CPUS; i++) {
  c00330:	01800a0e 	bge	zero,r6,c0035c <barrier+0xbc>
  c00334:	a021883a 	mov	r16,r20
  c00338:	0023883a 	mov	r17,zero
		if (i != cpu) {
			altera_avalon_mailbox_post(mb[i], barrierNum);
  c0033c:	99403fcc 	andi	r5,r19,255
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}

	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  c00340:	94400326 	beq	r18,r17,c00350 <barrier+0xb0>
			altera_avalon_mailbox_post(mb[i], barrierNum);
  c00344:	81000017 	ldw	r4,0(r16)
  c00348:	0c0dbd80 	call	c0dbd8 <altera_avalon_mailbox_post>
  c0034c:	d1a00217 	ldw	r6,-32760(gp)
	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}

	for (i = 0; i < NUM_CPUS; i++) {
  c00350:	8c400044 	addi	r17,r17,1
  c00354:	84000104 	addi	r16,r16,4
  c00358:	89bff816 	blt	r17,r6,c0033c <barrier+0x9c>
			altera_avalon_mailbox_post(mb[i], barrierNum);
			//			printf("cpu %0d post msg \n", cpu);
		}
	}

	for (i = 0; i < NUM_CPUS - 1; i++) {
  c0035c:	30bfffc4 	addi	r2,r6,-1
  c00360:	00800c0e 	bge	zero,r2,c00394 <barrier+0xf4>
  c00364:	9485883a 	add	r2,r18,r18
  c00368:	1085883a 	add	r2,r2,r2
  c0036c:	9c403fcc 	andi	r17,r19,255
  c00370:	1521883a 	add	r16,r2,r20
  c00374:	0025883a 	mov	r18,zero
		do {
			msg = altera_avalon_mailbox_pend(mb[cpu]);
  c00378:	81000017 	ldw	r4,0(r16)
  c0037c:	0c0dce40 	call	c0dce4 <altera_avalon_mailbox_pend>
		}
		while (msg != barrierNum);
  c00380:	147ffd1e 	bne	r2,r17,c00378 <barrier+0xd8>
			altera_avalon_mailbox_post(mb[i], barrierNum);
			//			printf("cpu %0d post msg \n", cpu);
		}
	}

	for (i = 0; i < NUM_CPUS - 1; i++) {
  c00384:	d1a00217 	ldw	r6,-32760(gp)
  c00388:	94800044 	addi	r18,r18,1
  c0038c:	30bfffc4 	addi	r2,r6,-1
  c00390:	90bff916 	blt	r18,r2,c00378 <barrier+0xd8>
		}
		while (msg != barrierNum);
		//		printf("cpu %0d recv msg \n", cpu);
	}

	for (i = 0; i < NUM_CPUS; i++) {
  c00394:	0180080e 	bge	zero,r6,c003b8 <barrier+0x118>
  c00398:	a021883a 	mov	r16,r20
  c0039c:	0023883a 	mov	r17,zero
		altera_avalon_mailbox_close(mb[i]);
  c003a0:	81000017 	ldw	r4,0(r16)
		}
		while (msg != barrierNum);
		//		printf("cpu %0d recv msg \n", cpu);
	}

	for (i = 0; i < NUM_CPUS; i++) {
  c003a4:	8c400044 	addi	r17,r17,1
  c003a8:	84000104 	addi	r16,r16,4
		altera_avalon_mailbox_close(mb[i]);
  c003ac:	0c0dbb80 	call	c0dbb8 <altera_avalon_mailbox_close>
		}
		while (msg != barrierNum);
		//		printf("cpu %0d recv msg \n", cpu);
	}

	for (i = 0; i < NUM_CPUS; i++) {
  c003b0:	d0a00217 	ldw	r2,-32760(gp)
  c003b4:	88bffa16 	blt	r17,r2,c003a0 <barrier+0x100>
  c003b8:	a837883a 	mov	sp,r21
		altera_avalon_mailbox_close(mb[i]);
	}
}
  c003bc:	e037883a 	mov	sp,fp
  c003c0:	dfc00717 	ldw	ra,28(sp)
  c003c4:	df000617 	ldw	fp,24(sp)
  c003c8:	dd400517 	ldw	r21,20(sp)
  c003cc:	dd000417 	ldw	r20,16(sp)
  c003d0:	dcc00317 	ldw	r19,12(sp)
  c003d4:	dc800217 	ldw	r18,8(sp)
  c003d8:	dc400117 	ldw	r17,4(sp)
  c003dc:	dc000017 	ldw	r16,0(sp)
  c003e0:	dec00804 	addi	sp,sp,32
  c003e4:	f800283a 	ret

00c003e8 <drawPixel>:
			drawPixel(color, i, j);
		}
	}
}

void drawPixel(int color, int row, int col) {
  c003e8:	2007883a 	mov	r3,r4
	alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, row, col);
  c003ec:	d1271a17 	ldw	r4,-25496(gp)
			drawPixel(color, i, j);
		}
	}
}

void drawPixel(int color, int row, int col) {
  c003f0:	2813883a 	mov	r9,r5
  c003f4:	300f883a 	mov	r7,r6
	alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, row, col);
  c003f8:	180b883a 	mov	r5,r3
  c003fc:	480d883a 	mov	r6,r9
  c00400:	0c0e3301 	jmpi	c0e330 <alt_up_pixel_buffer_dma_draw>

00c00404 <mandelbrot>:
		color = (red << 16) + (green << 8) + (blue);
	}
	return color;
}

int mandelbrot(int cRow, int cCol, int zoom) {
  c00404:	defff704 	addi	sp,sp,-36
  c00408:	dd400515 	stw	r21,20(sp)
  c0040c:	202b883a 	mov	r21,r4
	int iter = 0;
	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  c00410:	3009883a 	mov	r4,r6
		color = (red << 16) + (green << 8) + (blue);
	}
	return color;
}

int mandelbrot(int cRow, int cCol, int zoom) {
  c00414:	dfc00815 	stw	ra,32(sp)
  c00418:	ddc00715 	stw	r23,28(sp)
  c0041c:	dd800615 	stw	r22,24(sp)
  c00420:	dd000415 	stw	r20,16(sp)
  c00424:	282d883a 	mov	r22,r5
  c00428:	dcc00315 	stw	r19,12(sp)
  c0042c:	dc800215 	stw	r18,8(sp)
  c00430:	dc400115 	stw	r17,4(sp)
	int iter = 0;
	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  c00434:	048ff034 	movhi	r18,16320
		color = (red << 16) + (green << 8) + (blue);
	}
	return color;
}

int mandelbrot(int cRow, int cCol, int zoom) {
  c00438:	dc000015 	stw	r16,0(sp)
	int iter = 0;
	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  c0043c:	0c0242c0 	call	c0242c <__floatsisf>
  c00440:	100b883a 	mov	r5,r2
  c00444:	9009883a 	mov	r4,r18
  c00448:	1023883a 	mov	r17,r2
  c0044c:	0c007a00 	call	c007a0 <powf>
  c00450:	100b883a 	mov	r5,r2
  c00454:	012fe034 	movhi	r4,49024
  c00458:	0c020d80 	call	c020d8 <__divsf3>
  c0045c:	d0e00017 	ldw	r3,-32768(gp)
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
  c00460:	9009883a 	mov	r4,r18
  c00464:	880b883a 	mov	r5,r17
	return color;
}

int mandelbrot(int cRow, int cCol, int zoom) {
	int iter = 0;
	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
  c00468:	10e7ff72 	custom	253,r19,r2,r3
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
  c0046c:	0c007a00 	call	c007a0 <powf>
  c00470:	100b883a 	mov	r5,r2
  c00474:	010fe034 	movhi	r4,16256
  c00478:	0c020d80 	call	c020d8 <__divsf3>
  c0047c:	d0e00017 	ldw	r3,-32768(gp)
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  c00480:	9009883a 	mov	r4,r18
  c00484:	880b883a 	mov	r5,r17
}

int mandelbrot(int cRow, int cCol, int zoom) {
	int iter = 0;
	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
  c00488:	10e1ff72 	custom	253,r16,r2,r3
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  c0048c:	0c007a00 	call	c007a0 <powf>
  c00490:	100b883a 	mov	r5,r2
  c00494:	012fd034 	movhi	r4,48960
  c00498:	0c020d80 	call	c020d8 <__divsf3>
  c0049c:	d0e00117 	ldw	r3,-32764(gp)
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));
  c004a0:	880b883a 	mov	r5,r17
  c004a4:	9009883a 	mov	r4,r18

int mandelbrot(int cRow, int cCol, int zoom) {
	int iter = 0;
	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
  c004a8:	10e9ff72 	custom	253,r20,r2,r3
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));
  c004ac:	0c007a00 	call	c007a0 <powf>

	float x0 = (((float) cCol / (float) 320) * (maxX - minX)) + minX;
  c004b0:	b009883a 	mov	r4,r22
int mandelbrot(int cRow, int cCol, int zoom) {
	int iter = 0;
	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));
  c004b4:	1023883a 	mov	r17,r2

	float x0 = (((float) cCol / (float) 320) * (maxX - minX)) + minX;
  c004b8:	0c0242c0 	call	c0242c <__floatsisf>
  c004bc:	0150e834 	movhi	r5,17312
  c004c0:	1009883a 	mov	r4,r2
  c004c4:	0c020d80 	call	c020d8 <__divsf3>
  c004c8:	84e1ffb2 	custom	254,r16,r16,r19
  c004cc:	1405ff32 	custom	252,r2,r2,r16
	float y0 = ((((float) 239 - (float) cRow) / (float) 240) * (maxY- minY)) + minY;
  c004d0:	a809883a 	mov	r4,r21
	float minX = /*-2.5;//*/targetX - (1 / powf(1.5, zoom));
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	float x0 = (((float) cCol / (float) 320) * (maxX - minX)) + minX;
  c004d4:	98afff72 	custom	253,r23,r19,r2
	float y0 = ((((float) 239 - (float) cRow) / (float) 240) * (maxY- minY)) + minY;
  c004d8:	0c0242c0 	call	c0242c <__floatsisf>
  c004dc:	0110dbf4 	movhi	r4,17263
  c004e0:	2089ffb2 	custom	254,r4,r4,r2
  c004e4:	0150dc34 	movhi	r5,17264
  c004e8:	0c020d80 	call	c020d8 <__divsf3>
  c004ec:	880b883a 	mov	r5,r17
  c004f0:	010fd034 	movhi	r4,16192
  c004f4:	1021883a 	mov	r16,r2
  c004f8:	0c020d80 	call	c020d8 <__divsf3>
  c004fc:	d0e00117 	ldw	r3,-32764(gp)
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  c00500:	d5600517 	ldw	r21,-32748(gp)
  c00504:	0027883a 	mov	r19,zero
	float maxX = /*1;//*/targetX + (1 / powf(1.5, zoom));
	float minY = /*-1;//*/targetY - (0.75 / powf(1.5, zoom));
	float maxY = /*1;//*/targetY + (0.75 / powf(1.5, zoom));

	float x0 = (((float) cCol / (float) 320) * (maxX - minX)) + minX;
	float y0 = ((((float) 239 - (float) cRow) / (float) 240) * (maxY- minY)) + minY;
  c00508:	10c5ff72 	custom	253,r2,r2,r3
  c0050c:	1505ffb2 	custom	254,r2,r2,r20
  c00510:	80a1ff32 	custom	252,r16,r16,r2
  c00514:	a429ff72 	custom	253,r20,r20,r16
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  c00518:	0023883a 	mov	r17,zero
  c0051c:	0021883a 	mov	r16,zero
  c00520:	002d883a 	mov	r22,zero
  c00524:	0025883a 	mov	r18,zero
  c00528:	9809883a 	mov	r4,r19
  c0052c:	0c0242c0 	call	c0242c <__floatsisf>
  c00530:	a80b883a 	mov	r5,r21
  c00534:	1009883a 	mov	r4,r2
  c00538:	0c0233c0 	call	c0233c <__ltsf2>
  c0053c:	01502034 	movhi	r5,16512
  c00540:	10000c0e 	bge	r2,zero,c00574 <mandelbrot+0x170>
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  c00544:	8405ff72 	custom	253,r2,r16,r16
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  c00548:	b487ffb2 	custom	254,r3,r22,r18
		y = 2 * x * y + y0;
  c0054c:	8885ff32 	custom	252,r2,r17,r2
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  c00550:	b8c7ff72 	custom	253,r3,r23,r3
		y = 2 * x * y + y0;
  c00554:	a0a3ff72 	custom	253,r17,r20,r2
	float y0 = ((((float) 239 - (float) cRow) / (float) 240) * (maxY- minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  c00558:	18edff32 	custom	252,r22,r3,r3
  c0055c:	8c65ff32 	custom	252,r18,r17,r17
  c00560:	b489ff72 	custom	253,r4,r22,r18
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
  c00564:	9cc00044 	addi	r19,r19,1
	float y0 = ((((float) 239 - (float) cRow) / (float) 240) * (maxY- minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  c00568:	1821883a 	mov	r16,r3
  c0056c:	0c023b40 	call	c023b4 <__lesf2>
  c00570:	00bfed0e 	bge	zero,r2,c00528 <mandelbrot+0x124>
//			printf("iteration: %i X: %f Y: %f \n", iter, x, y);
//
//		}
	}
	return iter;
}
  c00574:	9805883a 	mov	r2,r19
  c00578:	dfc00817 	ldw	ra,32(sp)
  c0057c:	ddc00717 	ldw	r23,28(sp)
  c00580:	dd800617 	ldw	r22,24(sp)
  c00584:	dd400517 	ldw	r21,20(sp)
  c00588:	dd000417 	ldw	r20,16(sp)
  c0058c:	dcc00317 	ldw	r19,12(sp)
  c00590:	dc800217 	ldw	r18,8(sp)
  c00594:	dc400117 	ldw	r17,4(sp)
  c00598:	dc000017 	ldw	r16,0(sp)
  c0059c:	dec00904 	addi	sp,sp,36
  c005a0:	f800283a 	ret

00c005a4 <setup>:
float maxIter = 75;
//float highIter = 0;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  c005a4:	deffff04 	addi	sp,sp,-4
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  c005a8:	01003074 	movhi	r4,193
  c005ac:	21018f04 	addi	r4,r4,1596
float maxIter = 75;
//float highIter = 0;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  c005b0:	dfc00015 	stw	ra,0(sp)
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  c005b4:	0c0e2f00 	call	c0e2f0 <alt_up_pixel_buffer_dma_open_dev>
  c005b8:	d0a71a15 	stw	r2,-25496(gp)
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
  c005bc:	00c00044 	movi	r3,1
  c005c0:	0005883a 	mov	r2,zero
  c005c4:	10c00035 	stwio	r3,0(r2)
}
  c005c8:	dfc00017 	ldw	ra,0(sp)
  c005cc:	dec00104 	addi	sp,sp,4
  c005d0:	f800283a 	ret

00c005d4 <drawFrame>:
//		}
	}
	return iter;
}

void drawFrame(int zoom) {
  c005d4:	defffb04 	addi	sp,sp,-20
  c005d8:	dcc00315 	stw	r19,12(sp)
  c005dc:	2027883a 	mov	r19,r4
  c005e0:	dfc00415 	stw	ra,16(sp)
  c005e4:	dc800215 	stw	r18,8(sp)
  c005e8:	dc400115 	stw	r17,4(sp)
  c005ec:	dc000015 	stw	r16,0(sp)
	int i;
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
  c005f0:	0021317a 	rdctl	r16,cpuid
	printf("cpu %d\n", cpu);
  c005f4:	800b883a 	mov	r5,r16
  c005f8:	01003074 	movhi	r4,193
  c005fc:	21019704 	addi	r4,r4,1628
  c00600:	0c036e00 	call	c036e0 <printf>
	for (i = cpu; i < rowSize; i = i + NUM_CPUS) {
  c00604:	8009883a 	mov	r4,r16
  c00608:	0c0242c0 	call	c0242c <__floatsisf>
  c0060c:	d1200317 	ldw	r4,-32756(gp)
  c00610:	100b883a 	mov	r5,r2
  c00614:	0c022c40 	call	c022c4 <__gtsf2>
  c00618:	0080350e 	bge	zero,r2,c006f0 <drawFrame+0x11c>
  c0061c:	8025883a 	mov	r18,r16
		for (j = 0; j < colSize; j++) {
  c00620:	d1200417 	ldw	r4,-32752(gp)
  c00624:	000b883a 	mov	r5,zero
  c00628:	0c022c40 	call	c022c4 <__gtsf2>
  c0062c:	0080280e 	bge	zero,r2,c006d0 <drawFrame+0xfc>
  c00630:	0023883a 	mov	r17,zero
			result = mandelbrot(j, i, zoom);
  c00634:	980d883a 	mov	r6,r19
  c00638:	900b883a 	mov	r5,r18
  c0063c:	8809883a 	mov	r4,r17
  c00640:	0c004040 	call	c00404 <mandelbrot>
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  c00644:	1009883a 	mov	r4,r2
	int color = 0;
	int cpu = __builtin_rdctl(5);
	printf("cpu %d\n", cpu);
	for (i = cpu; i < rowSize; i = i + NUM_CPUS) {
		for (j = 0; j < colSize; j++) {
			result = mandelbrot(j, i, zoom);
  c00648:	1021883a 	mov	r16,r2
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  c0064c:	0c0242c0 	call	c0242c <__floatsisf>
  c00650:	d1600517 	ldw	r5,-32748(gp)
  c00654:	1009883a 	mov	r4,r2
  c00658:	0c0224c0 	call	c0224c <__eqsf2>
		color = black;
	}
	else {
		//		iter = iter + 12 / 2;
		int red = iter * 2;//(int)round(overIter*iter*0.3);
  c0065c:	8407883a 	add	r3,r16,r16
		int green = iter * 8;//(int)round(overIter*iter*0.5);
		int blue = iter * 3;//(int)round(overIter*iter);
  c00660:	800c90fa 	slli	r6,r16,3
  c00664:	02003fc4 	movi	r8,255
  c00668:	180f883a 	mov	r7,r3
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  c0066c:	000b883a 	mov	r5,zero
  c00670:	10000c26 	beq	r2,zero,c006a4 <drawFrame+0xd0>
	}
	else {
		//		iter = iter + 12 / 2;
		int red = iter * 2;//(int)round(overIter*iter*0.3);
		int green = iter * 8;//(int)round(overIter*iter*0.5);
		int blue = iter * 3;//(int)round(overIter*iter);
  c00674:	1c05883a 	add	r2,r3,r16
  c00678:	1009883a 	mov	r4,r2
  c0067c:	4180010e 	bge	r8,r6,c00684 <drawFrame+0xb0>
  c00680:	400d883a 	mov	r6,r8
  c00684:	300a923a 	slli	r5,r6,8
  c00688:	4100010e 	bge	r8,r4,c00690 <drawFrame+0xbc>
  c0068c:	4009883a 	mov	r4,r8
  c00690:	41c0010e 	bge	r8,r7,c00698 <drawFrame+0xc4>
  c00694:	400f883a 	mov	r7,r8
  c00698:	3804943a 	slli	r2,r7,16
  c0069c:	2085883a 	add	r2,r4,r2
  c006a0:	288b883a 	add	r5,r5,r2
		}
	}
}

void drawPixel(int color, int row, int col) {
	alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, row, col);
  c006a4:	d1271a17 	ldw	r4,-25496(gp)
  c006a8:	880f883a 	mov	r7,r17
  c006ac:	900d883a 	mov	r6,r18
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
	printf("cpu %d\n", cpu);
	for (i = cpu; i < rowSize; i = i + NUM_CPUS) {
		for (j = 0; j < colSize; j++) {
  c006b0:	8c400044 	addi	r17,r17,1
		}
	}
}

void drawPixel(int color, int row, int col) {
	alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, row, col);
  c006b4:	0c0e3300 	call	c0e330 <alt_up_pixel_buffer_dma_draw>
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
	printf("cpu %d\n", cpu);
	for (i = cpu; i < rowSize; i = i + NUM_CPUS) {
		for (j = 0; j < colSize; j++) {
  c006b8:	8809883a 	mov	r4,r17
  c006bc:	0c0242c0 	call	c0242c <__floatsisf>
  c006c0:	d1600417 	ldw	r5,-32752(gp)
  c006c4:	1009883a 	mov	r4,r2
  c006c8:	0c0233c0 	call	c0233c <__ltsf2>
  c006cc:	103fd916 	blt	r2,zero,c00634 <drawFrame+0x60>
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
	printf("cpu %d\n", cpu);
	for (i = cpu; i < rowSize; i = i + NUM_CPUS) {
  c006d0:	d0a00217 	ldw	r2,-32760(gp)
  c006d4:	90a5883a 	add	r18,r18,r2
  c006d8:	9009883a 	mov	r4,r18
  c006dc:	0c0242c0 	call	c0242c <__floatsisf>
  c006e0:	d1600317 	ldw	r5,-32756(gp)
  c006e4:	1009883a 	mov	r4,r2
  c006e8:	0c0233c0 	call	c0233c <__ltsf2>
  c006ec:	103fcc16 	blt	r2,zero,c00620 <drawFrame+0x4c>
			result = mandelbrot(j, i, zoom);
			color = genColor(result);
			drawPixel(color, i, j);
		}
	}
}
  c006f0:	dfc00417 	ldw	ra,16(sp)
  c006f4:	dcc00317 	ldw	r19,12(sp)
  c006f8:	dc800217 	ldw	r18,8(sp)
  c006fc:	dc400117 	ldw	r17,4(sp)
  c00700:	dc000017 	ldw	r16,0(sp)
  c00704:	dec00504 	addi	sp,sp,20
  c00708:	f800283a 	ret

00c0070c <main>:
#define key1 6
#define key0 7

#define FIXED_POINT

int main() {
  c0070c:	defffc04 	addi	sp,sp,-16
  c00710:	dfc00315 	stw	ra,12(sp)
  c00714:	dc800215 	stw	r18,8(sp)
  c00718:	dc400115 	stw	r17,4(sp)
  c0071c:	dc000015 	stw	r16,0(sp)

	setup();
  c00720:	0c005a40 	call	c005a4 <setup>
	printf("Program running (UART)...\n");
  c00724:	01003074 	movhi	r4,193
  c00728:	21019904 	addi	r4,r4,1636
  c0072c:	0c037f80 	call	c037f8 <puts>
  c00730:	04800104 	movi	r18,4
  c00734:	04400504 	movi	r17,20

	//the main program loop
	while (1) {
		printf("Beginning Frame \n");
  c00738:	01003074 	movhi	r4,193
  c0073c:	2101a004 	addi	r4,r4,1664
  c00740:	0c037f80 	call	c037f8 <puts>
  c00744:	0021883a 	mov	r16,zero
		int zoom;
		for (zoom = 0; zoom < 100; zoom++) {
			PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
  c00748:	90000035 	stwio	zero,0(r18)
			PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
  c0074c:	88000035 	stwio	zero,0(r17)
			clearScreen();
  c00750:	0c002940 	call	c00294 <clearScreen>
			drawFrame(zoom);
  c00754:	8009883a 	mov	r4,r16
  c00758:	0c005d40 	call	c005d4 <drawFrame>
			barrier(0);
  c0075c:	0009883a 	mov	r4,zero
  c00760:	0c002a00 	call	c002a0 <barrier>
			PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
  c00764:	00800404 	movi	r2,16
  c00768:	10000035 	stwio	zero,0(r2)
			PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
  c0076c:	0007883a 	mov	r3,zero
  c00770:	18000035 	stwio	zero,0(r3)
			unsigned long cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);
  c00774:	0009883a 	mov	r4,zero
  c00778:	01400044 	movi	r5,1
  c0077c:	0c0e1680 	call	c0e168 <perf_get_section_time>
  c00780:	100b883a 	mov	r5,r2
			printf("Cycles: %lu \n", cycles);
  c00784:	01003074 	movhi	r4,193
  c00788:	2101a504 	addi	r4,r4,1684
  c0078c:	0c036e00 	call	c036e0 <printf>

	//the main program loop
	while (1) {
		printf("Beginning Frame \n");
		int zoom;
		for (zoom = 0; zoom < 100; zoom++) {
  c00790:	84000044 	addi	r16,r16,1
  c00794:	00801904 	movi	r2,100
  c00798:	80bfeb1e 	bne	r16,r2,c00748 <main+0x3c>
  c0079c:	003fe606 	br	c00738 <main+0x2c>

00c007a0 <powf>:
  c007a0:	defff104 	addi	sp,sp,-60
  c007a4:	dd000d15 	stw	r20,52(sp)
  c007a8:	dcc00c15 	stw	r19,48(sp)
  c007ac:	dc800b15 	stw	r18,44(sp)
  c007b0:	dc400a15 	stw	r17,40(sp)
  c007b4:	dc000915 	stw	r16,36(sp)
  c007b8:	dfc00e15 	stw	ra,56(sp)
  c007bc:	05003074 	movhi	r20,193
  c007c0:	a509a804 	addi	r20,r20,9888
  c007c4:	2027883a 	mov	r19,r4
  c007c8:	2825883a 	mov	r18,r5
  c007cc:	0c00bf80 	call	c00bf8 <__ieee754_powf>
  c007d0:	1021883a 	mov	r16,r2
  c007d4:	a0800017 	ldw	r2,0(r20)
  c007d8:	047fffc4 	movi	r17,-1
  c007dc:	14400326 	beq	r2,r17,c007ec <powf+0x4c>
  c007e0:	9009883a 	mov	r4,r18
  c007e4:	0c01abc0 	call	c01abc <isnanf>
  c007e8:	10000926 	beq	r2,zero,c00810 <powf+0x70>
  c007ec:	8005883a 	mov	r2,r16
  c007f0:	dfc00e17 	ldw	ra,56(sp)
  c007f4:	dd000d17 	ldw	r20,52(sp)
  c007f8:	dcc00c17 	ldw	r19,48(sp)
  c007fc:	dc800b17 	ldw	r18,44(sp)
  c00800:	dc400a17 	ldw	r17,40(sp)
  c00804:	dc000917 	ldw	r16,36(sp)
  c00808:	dec00f04 	addi	sp,sp,60
  c0080c:	f800283a 	ret
  c00810:	9809883a 	mov	r4,r19
  c00814:	0c01abc0 	call	c01abc <isnanf>
  c00818:	1000151e 	bne	r2,zero,c00870 <powf+0xd0>
  c0081c:	9809883a 	mov	r4,r19
  c00820:	000b883a 	mov	r5,zero
  c00824:	0c0224c0 	call	c0224c <__eqsf2>
  c00828:	10005a1e 	bne	r2,zero,c00994 <powf+0x1f4>
  c0082c:	9009883a 	mov	r4,r18
  c00830:	000b883a 	mov	r5,zero
  c00834:	0c0224c0 	call	c0224c <__eqsf2>
  c00838:	1000331e 	bne	r2,zero,c00908 <powf+0x168>
  c0083c:	a0800017 	ldw	r2,0(r20)
  c00840:	d8000615 	stw	zero,24(sp)
  c00844:	d8000715 	stw	zero,28(sp)
  c00848:	10001426 	beq	r2,zero,c0089c <powf+0xfc>
  c0084c:	008ffc34 	movhi	r2,16368
  c00850:	d8800715 	stw	r2,28(sp)
  c00854:	d8800617 	ldw	r2,24(sp)
  c00858:	d8c00717 	ldw	r3,28(sp)
  c0085c:	1009883a 	mov	r4,r2
  c00860:	180b883a 	mov	r5,r3
  c00864:	0c02d340 	call	c02d34 <__truncdfsf2>
  c00868:	1021883a 	mov	r16,r2
  c0086c:	003fdf06 	br	c007ec <powf+0x4c>
  c00870:	9009883a 	mov	r4,r18
  c00874:	000b883a 	mov	r5,zero
  c00878:	0c0224c0 	call	c0224c <__eqsf2>
  c0087c:	103fdb1e 	bne	r2,zero,c007ec <powf+0x4c>
  c00880:	a0c00017 	ldw	r3,0(r20)
  c00884:	010ffc34 	movhi	r4,16368
  c00888:	d8000615 	stw	zero,24(sp)
  c0088c:	d9000715 	stw	r4,28(sp)
  c00890:	1c401a26 	beq	r3,r17,c008fc <powf+0x15c>
  c00894:	00800084 	movi	r2,2
  c00898:	18801826 	beq	r3,r2,c008fc <powf+0x15c>
  c0089c:	9009883a 	mov	r4,r18
  c008a0:	0c024c40 	call	c024c4 <__extendsfdf2>
  c008a4:	9809883a 	mov	r4,r19
  c008a8:	d8c00515 	stw	r3,20(sp)
  c008ac:	d8800415 	stw	r2,16(sp)
  c008b0:	0c024c40 	call	c024c4 <__extendsfdf2>
  c008b4:	100b883a 	mov	r5,r2
  c008b8:	d8c00315 	stw	r3,12(sp)
  c008bc:	00803074 	movhi	r2,193
  c008c0:	1081a904 	addi	r2,r2,1700
  c008c4:	00c00044 	movi	r3,1
  c008c8:	d809883a 	mov	r4,sp
  c008cc:	d8800115 	stw	r2,4(sp)
  c008d0:	d8c00015 	stw	r3,0(sp)
  c008d4:	d9400215 	stw	r5,8(sp)
  c008d8:	d8000815 	stw	zero,32(sp)
  c008dc:	0c018780 	call	c01878 <matherr>
  c008e0:	10002826 	beq	r2,zero,c00984 <powf+0x1e4>
  c008e4:	d8800817 	ldw	r2,32(sp)
  c008e8:	103fda26 	beq	r2,zero,c00854 <powf+0xb4>
  c008ec:	0c036d00 	call	c036d0 <__errno>
  c008f0:	d8c00817 	ldw	r3,32(sp)
  c008f4:	10c00015 	stw	r3,0(r2)
  c008f8:	003fd606 	br	c00854 <powf+0xb4>
  c008fc:	d9000715 	stw	r4,28(sp)
  c00900:	d8000615 	stw	zero,24(sp)
  c00904:	003fd306 	br	c00854 <powf+0xb4>
  c00908:	9009883a 	mov	r4,r18
  c0090c:	0c01aa00 	call	c01aa0 <finitef>
  c00910:	103fb626 	beq	r2,zero,c007ec <powf+0x4c>
  c00914:	9009883a 	mov	r4,r18
  c00918:	000b883a 	mov	r5,zero
  c0091c:	0c0233c0 	call	c0233c <__ltsf2>
  c00920:	103fb20e 	bge	r2,zero,c007ec <powf+0x4c>
  c00924:	9809883a 	mov	r4,r19
  c00928:	00800044 	movi	r2,1
  c0092c:	00c03074 	movhi	r3,193
  c00930:	18c1a904 	addi	r3,r3,1700
  c00934:	d8800015 	stw	r2,0(sp)
  c00938:	d8c00115 	stw	r3,4(sp)
  c0093c:	d8000815 	stw	zero,32(sp)
  c00940:	0c024c40 	call	c024c4 <__extendsfdf2>
  c00944:	9009883a 	mov	r4,r18
  c00948:	d8c00315 	stw	r3,12(sp)
  c0094c:	d8800215 	stw	r2,8(sp)
  c00950:	0c024c40 	call	c024c4 <__extendsfdf2>
  c00954:	a1800017 	ldw	r6,0(r20)
  c00958:	d8c00515 	stw	r3,20(sp)
  c0095c:	d8800415 	stw	r2,16(sp)
  c00960:	30005626 	beq	r6,zero,c00abc <powf+0x31c>
  c00964:	00bffc34 	movhi	r2,65520
  c00968:	d8800715 	stw	r2,28(sp)
  c0096c:	00800084 	movi	r2,2
  c00970:	d8000615 	stw	zero,24(sp)
  c00974:	30800326 	beq	r6,r2,c00984 <powf+0x1e4>
  c00978:	d809883a 	mov	r4,sp
  c0097c:	0c018780 	call	c01878 <matherr>
  c00980:	103fd81e 	bne	r2,zero,c008e4 <powf+0x144>
  c00984:	0c036d00 	call	c036d0 <__errno>
  c00988:	00c00844 	movi	r3,33
  c0098c:	10c00015 	stw	r3,0(r2)
  c00990:	003fd406 	br	c008e4 <powf+0x144>
  c00994:	8009883a 	mov	r4,r16
  c00998:	0c01aa00 	call	c01aa0 <finitef>
  c0099c:	10002426 	beq	r2,zero,c00a30 <powf+0x290>
  c009a0:	8009883a 	mov	r4,r16
  c009a4:	000b883a 	mov	r5,zero
  c009a8:	0c0224c0 	call	c0224c <__eqsf2>
  c009ac:	103f8f1e 	bne	r2,zero,c007ec <powf+0x4c>
  c009b0:	9809883a 	mov	r4,r19
  c009b4:	0c01aa00 	call	c01aa0 <finitef>
  c009b8:	103f8c26 	beq	r2,zero,c007ec <powf+0x4c>
  c009bc:	9009883a 	mov	r4,r18
  c009c0:	0c01aa00 	call	c01aa0 <finitef>
  c009c4:	103f8926 	beq	r2,zero,c007ec <powf+0x4c>
  c009c8:	9809883a 	mov	r4,r19
  c009cc:	00800104 	movi	r2,4
  c009d0:	00c03074 	movhi	r3,193
  c009d4:	18c1a904 	addi	r3,r3,1700
  c009d8:	d8800015 	stw	r2,0(sp)
  c009dc:	d8c00115 	stw	r3,4(sp)
  c009e0:	d8000815 	stw	zero,32(sp)
  c009e4:	0c024c40 	call	c024c4 <__extendsfdf2>
  c009e8:	9009883a 	mov	r4,r18
  c009ec:	d8c00315 	stw	r3,12(sp)
  c009f0:	d8800215 	stw	r2,8(sp)
  c009f4:	0c024c40 	call	c024c4 <__extendsfdf2>
  c009f8:	a1800017 	ldw	r6,0(r20)
  c009fc:	d8800415 	stw	r2,16(sp)
  c00a00:	00800084 	movi	r2,2
  c00a04:	d8c00515 	stw	r3,20(sp)
  c00a08:	d8000615 	stw	zero,24(sp)
  c00a0c:	d8000715 	stw	zero,28(sp)
  c00a10:	30800326 	beq	r6,r2,c00a20 <powf+0x280>
  c00a14:	d809883a 	mov	r4,sp
  c00a18:	0c018780 	call	c01878 <matherr>
  c00a1c:	103fb11e 	bne	r2,zero,c008e4 <powf+0x144>
  c00a20:	0c036d00 	call	c036d0 <__errno>
  c00a24:	00c00884 	movi	r3,34
  c00a28:	10c00015 	stw	r3,0(r2)
  c00a2c:	003fad06 	br	c008e4 <powf+0x144>
  c00a30:	9809883a 	mov	r4,r19
  c00a34:	0c01aa00 	call	c01aa0 <finitef>
  c00a38:	103fd926 	beq	r2,zero,c009a0 <powf+0x200>
  c00a3c:	9009883a 	mov	r4,r18
  c00a40:	0c01aa00 	call	c01aa0 <finitef>
  c00a44:	103fd626 	beq	r2,zero,c009a0 <powf+0x200>
  c00a48:	8009883a 	mov	r4,r16
  c00a4c:	0c01abc0 	call	c01abc <isnanf>
  c00a50:	10001d26 	beq	r2,zero,c00ac8 <powf+0x328>
  c00a54:	9809883a 	mov	r4,r19
  c00a58:	00800044 	movi	r2,1
  c00a5c:	00c03074 	movhi	r3,193
  c00a60:	18c1a904 	addi	r3,r3,1700
  c00a64:	d8800015 	stw	r2,0(sp)
  c00a68:	d8c00115 	stw	r3,4(sp)
  c00a6c:	d8000815 	stw	zero,32(sp)
  c00a70:	0c024c40 	call	c024c4 <__extendsfdf2>
  c00a74:	9009883a 	mov	r4,r18
  c00a78:	d8c00315 	stw	r3,12(sp)
  c00a7c:	d8800215 	stw	r2,8(sp)
  c00a80:	0c024c40 	call	c024c4 <__extendsfdf2>
  c00a84:	a4000017 	ldw	r16,0(r20)
  c00a88:	d8c00515 	stw	r3,20(sp)
  c00a8c:	d8800415 	stw	r2,16(sp)
  c00a90:	80000a26 	beq	r16,zero,c00abc <powf+0x31c>
  c00a94:	0009883a 	mov	r4,zero
  c00a98:	000d883a 	mov	r6,zero
  c00a9c:	000b883a 	mov	r5,zero
  c00aa0:	000f883a 	mov	r7,zero
  c00aa4:	0c02a1c0 	call	c02a1c <__divdf3>
  c00aa8:	d8800615 	stw	r2,24(sp)
  c00aac:	00800084 	movi	r2,2
  c00ab0:	d8c00715 	stw	r3,28(sp)
  c00ab4:	80bfb01e 	bne	r16,r2,c00978 <powf+0x1d8>
  c00ab8:	003fb206 	br	c00984 <powf+0x1e4>
  c00abc:	d8000615 	stw	zero,24(sp)
  c00ac0:	d8000715 	stw	zero,28(sp)
  c00ac4:	003fac06 	br	c00978 <powf+0x1d8>
  c00ac8:	9809883a 	mov	r4,r19
  c00acc:	008000c4 	movi	r2,3
  c00ad0:	00c03074 	movhi	r3,193
  c00ad4:	18c1a904 	addi	r3,r3,1700
  c00ad8:	d8800015 	stw	r2,0(sp)
  c00adc:	d8c00115 	stw	r3,4(sp)
  c00ae0:	d8000815 	stw	zero,32(sp)
  c00ae4:	0c024c40 	call	c024c4 <__extendsfdf2>
  c00ae8:	9009883a 	mov	r4,r18
  c00aec:	d8c00315 	stw	r3,12(sp)
  c00af0:	d8800215 	stw	r2,8(sp)
  c00af4:	0c024c40 	call	c024c4 <__extendsfdf2>
  c00af8:	a1800017 	ldw	r6,0(r20)
  c00afc:	d8c00515 	stw	r3,20(sp)
  c00b00:	d8800415 	stw	r2,16(sp)
  c00b04:	3000211e 	bne	r6,zero,c00b8c <powf+0x3ec>
  c00b08:	9809883a 	mov	r4,r19
  c00b0c:	0091fc34 	movhi	r2,18416
  c00b10:	10bfffc4 	addi	r2,r2,-1
  c00b14:	04f80034 	movhi	r19,57344
  c00b18:	000b883a 	mov	r5,zero
  c00b1c:	d8800715 	stw	r2,28(sp)
  c00b20:	dcc00615 	stw	r19,24(sp)
  c00b24:	0c0233c0 	call	c0233c <__ltsf2>
  c00b28:	103fba0e 	bge	r2,zero,c00a14 <powf+0x274>
  c00b2c:	014fc034 	movhi	r5,16128
  c00b30:	9009883a 	mov	r4,r18
  c00b34:	0c01ef80 	call	c01ef8 <__mulsf3>
  c00b38:	1009883a 	mov	r4,r2
  c00b3c:	0c024c40 	call	c024c4 <__extendsfdf2>
  c00b40:	1009883a 	mov	r4,r2
  c00b44:	180b883a 	mov	r5,r3
  c00b48:	1021883a 	mov	r16,r2
  c00b4c:	1823883a 	mov	r17,r3
  c00b50:	0c018800 	call	c01880 <rint>
  c00b54:	180f883a 	mov	r7,r3
  c00b58:	880b883a 	mov	r5,r17
  c00b5c:	8009883a 	mov	r4,r16
  c00b60:	100d883a 	mov	r6,r2
  c00b64:	0c02c740 	call	c02c74 <__nedf2>
  c00b68:	10000426 	beq	r2,zero,c00b7c <powf+0x3dc>
  c00b6c:	00b1fc34 	movhi	r2,51184
  c00b70:	10bfffc4 	addi	r2,r2,-1
  c00b74:	dcc00615 	stw	r19,24(sp)
  c00b78:	d8800715 	stw	r2,28(sp)
  c00b7c:	a0c00017 	ldw	r3,0(r20)
  c00b80:	00800084 	movi	r2,2
  c00b84:	18bfa31e 	bne	r3,r2,c00a14 <powf+0x274>
  c00b88:	003fa506 	br	c00a20 <powf+0x280>
  c00b8c:	009ffc34 	movhi	r2,32752
  c00b90:	9809883a 	mov	r4,r19
  c00b94:	000b883a 	mov	r5,zero
  c00b98:	d8800715 	stw	r2,28(sp)
  c00b9c:	d8000615 	stw	zero,24(sp)
  c00ba0:	0c0233c0 	call	c0233c <__ltsf2>
  c00ba4:	103ff50e 	bge	r2,zero,c00b7c <powf+0x3dc>
  c00ba8:	014fc034 	movhi	r5,16128
  c00bac:	9009883a 	mov	r4,r18
  c00bb0:	0c01ef80 	call	c01ef8 <__mulsf3>
  c00bb4:	1009883a 	mov	r4,r2
  c00bb8:	0c024c40 	call	c024c4 <__extendsfdf2>
  c00bbc:	1009883a 	mov	r4,r2
  c00bc0:	180b883a 	mov	r5,r3
  c00bc4:	1021883a 	mov	r16,r2
  c00bc8:	1823883a 	mov	r17,r3
  c00bcc:	0c018800 	call	c01880 <rint>
  c00bd0:	180f883a 	mov	r7,r3
  c00bd4:	880b883a 	mov	r5,r17
  c00bd8:	8009883a 	mov	r4,r16
  c00bdc:	100d883a 	mov	r6,r2
  c00be0:	0c02c740 	call	c02c74 <__nedf2>
  c00be4:	103fe526 	beq	r2,zero,c00b7c <powf+0x3dc>
  c00be8:	00bffc34 	movhi	r2,65520
  c00bec:	d8800715 	stw	r2,28(sp)
  c00bf0:	d8000615 	stw	zero,24(sp)
  c00bf4:	003fe106 	br	c00b7c <powf+0x3dc>

00c00bf8 <__ieee754_powf>:
  c00bf8:	defff004 	addi	sp,sp,-64
  c00bfc:	00a00034 	movhi	r2,32768
  c00c00:	10bfffc4 	addi	r2,r2,-1
  c00c04:	dc000615 	stw	r16,24(sp)
  c00c08:	28a0703a 	and	r16,r5,r2
  c00c0c:	df000e15 	stw	fp,56(sp)
  c00c10:	dcc00915 	stw	r19,36(sp)
  c00c14:	dc800815 	stw	r18,32(sp)
  c00c18:	2027883a 	mov	r19,r4
  c00c1c:	dfc00f15 	stw	ra,60(sp)
  c00c20:	ddc00d15 	stw	r23,52(sp)
  c00c24:	dd800c15 	stw	r22,48(sp)
  c00c28:	dd400b15 	stw	r21,44(sp)
  c00c2c:	dd000a15 	stw	r20,40(sp)
  c00c30:	dc400715 	stw	r17,28(sp)
  c00c34:	2839883a 	mov	fp,r5
  c00c38:	2825883a 	mov	r18,r5
  c00c3c:	2809883a 	mov	r4,r5
  c00c40:	80003526 	beq	r16,zero,c00d18 <__ieee754_powf+0x120>
  c00c44:	98a2703a 	and	r17,r19,r2
  c00c48:	009fe034 	movhi	r2,32640
  c00c4c:	9829883a 	mov	r20,r19
  c00c50:	1440100e 	bge	r2,r17,c00c94 <__ieee754_powf+0x9c>
  c00c54:	008fe034 	movhi	r2,16256
  c00c58:	88803d26 	beq	r17,r2,c00d50 <__ieee754_powf+0x158>
  c00c5c:	01003074 	movhi	r4,193
  c00c60:	2101a404 	addi	r4,r4,1680
  c00c64:	dfc00f17 	ldw	ra,60(sp)
  c00c68:	df000e17 	ldw	fp,56(sp)
  c00c6c:	ddc00d17 	ldw	r23,52(sp)
  c00c70:	dd800c17 	ldw	r22,48(sp)
  c00c74:	dd400b17 	ldw	r21,44(sp)
  c00c78:	dd000a17 	ldw	r20,40(sp)
  c00c7c:	dcc00917 	ldw	r19,36(sp)
  c00c80:	dc800817 	ldw	r18,32(sp)
  c00c84:	dc400717 	ldw	r17,28(sp)
  c00c88:	dc000617 	ldw	r16,24(sp)
  c00c8c:	dec01004 	addi	sp,sp,64
  c00c90:	0c01ad41 	jmpi	c01ad4 <nanf>
  c00c94:	143fef16 	blt	r2,r16,c00c54 <__ieee754_powf+0x5c>
  c00c98:	982a403a 	cmpge	r21,r19,zero
  c00c9c:	a8004526 	beq	r21,zero,c00db4 <__ieee754_powf+0x1bc>
  c00ca0:	002f883a 	mov	r23,zero
  c00ca4:	009fe034 	movhi	r2,32640
  c00ca8:	80803926 	beq	r16,r2,c00d90 <__ieee754_powf+0x198>
  c00cac:	008fe034 	movhi	r2,16256
  c00cb0:	80803d26 	beq	r16,r2,c00da8 <__ieee754_powf+0x1b0>
  c00cb4:	00900034 	movhi	r2,16384
  c00cb8:	20805326 	beq	r4,r2,c00e08 <__ieee754_powf+0x210>
  c00cbc:	008fc034 	movhi	r2,16128
  c00cc0:	20802526 	beq	r4,r2,c00d58 <__ieee754_powf+0x160>
  c00cc4:	9809883a 	mov	r4,r19
  c00cc8:	0c01a900 	call	c01a90 <fabsf>
  c00ccc:	1009883a 	mov	r4,r2
  c00cd0:	009fe034 	movhi	r2,32640
  c00cd4:	88803c26 	beq	r17,r2,c00dc8 <__ieee754_powf+0x1d0>
  c00cd8:	88003b26 	beq	r17,zero,c00dc8 <__ieee754_powf+0x1d0>
  c00cdc:	014fe034 	movhi	r5,16256
  c00ce0:	89403926 	beq	r17,r5,c00dc8 <__ieee754_powf+0x1d0>
  c00ce4:	a004d7fa 	srli	r2,r20,31
  c00ce8:	10bfffc4 	addi	r2,r2,-1
  c00cec:	15c6b03a 	or	r3,r2,r23
  c00cf0:	d8800215 	stw	r2,8(sp)
  c00cf4:	1800661e 	bne	r3,zero,c00e90 <__ieee754_powf+0x298>
  c00cf8:	980b883a 	mov	r5,r19
  c00cfc:	9809883a 	mov	r4,r19
  c00d00:	0c01e240 	call	c01e24 <__subsf3>
  c00d04:	1009883a 	mov	r4,r2
  c00d08:	100b883a 	mov	r5,r2
  c00d0c:	0c020d80 	call	c020d8 <__divsf3>
  c00d10:	1039883a 	mov	fp,r2
  c00d14:	00000106 	br	c00d1c <__ieee754_powf+0x124>
  c00d18:	070fe034 	movhi	fp,16256
  c00d1c:	e005883a 	mov	r2,fp
  c00d20:	dfc00f17 	ldw	ra,60(sp)
  c00d24:	df000e17 	ldw	fp,56(sp)
  c00d28:	ddc00d17 	ldw	r23,52(sp)
  c00d2c:	dd800c17 	ldw	r22,48(sp)
  c00d30:	dd400b17 	ldw	r21,44(sp)
  c00d34:	dd000a17 	ldw	r20,40(sp)
  c00d38:	dcc00917 	ldw	r19,36(sp)
  c00d3c:	dc800817 	ldw	r18,32(sp)
  c00d40:	dc400717 	ldw	r17,28(sp)
  c00d44:	dc000617 	ldw	r16,24(sp)
  c00d48:	dec01004 	addi	sp,sp,64
  c00d4c:	f800283a 	ret
  c00d50:	8839883a 	mov	fp,r17
  c00d54:	003ff106 	br	c00d1c <__ieee754_powf+0x124>
  c00d58:	a03fda16 	blt	r20,zero,c00cc4 <__ieee754_powf+0xcc>
  c00d5c:	9809883a 	mov	r4,r19
  c00d60:	dfc00f17 	ldw	ra,60(sp)
  c00d64:	df000e17 	ldw	fp,56(sp)
  c00d68:	ddc00d17 	ldw	r23,52(sp)
  c00d6c:	dd800c17 	ldw	r22,48(sp)
  c00d70:	dd400b17 	ldw	r21,44(sp)
  c00d74:	dd000a17 	ldw	r20,40(sp)
  c00d78:	dcc00917 	ldw	r19,36(sp)
  c00d7c:	dc800817 	ldw	r18,32(sp)
  c00d80:	dc400717 	ldw	r17,28(sp)
  c00d84:	dc000617 	ldw	r16,24(sp)
  c00d88:	dec01004 	addi	sp,sp,64
  c00d8c:	0c0170c1 	jmpi	c0170c <__ieee754_sqrtf>
  c00d90:	008fe034 	movhi	r2,16256
  c00d94:	88bfee26 	beq	r17,r2,c00d50 <__ieee754_powf+0x158>
  c00d98:	1440200e 	bge	r2,r17,c00e1c <__ieee754_powf+0x224>
  c00d9c:	903fdf0e 	bge	r18,zero,c00d1c <__ieee754_powf+0x124>
  c00da0:	0039883a 	mov	fp,zero
  c00da4:	003fdd06 	br	c00d1c <__ieee754_powf+0x124>
  c00da8:	90002f16 	blt	r18,zero,c00e68 <__ieee754_powf+0x270>
  c00dac:	9839883a 	mov	fp,r19
  c00db0:	003fda06 	br	c00d1c <__ieee754_powf+0x124>
  c00db4:	0092e034 	movhi	r2,19328
  c00db8:	10bfffc4 	addi	r2,r2,-1
  c00dbc:	14001b0e 	bge	r2,r16,c00e2c <__ieee754_powf+0x234>
  c00dc0:	05c00084 	movi	r23,2
  c00dc4:	003fb706 	br	c00ca4 <__ieee754_powf+0xac>
  c00dc8:	90000916 	blt	r18,zero,c00df0 <__ieee754_powf+0x1f8>
  c00dcc:	a8000226 	beq	r21,zero,c00dd8 <__ieee754_powf+0x1e0>
  c00dd0:	2039883a 	mov	fp,r4
  c00dd4:	003fd106 	br	c00d1c <__ieee754_powf+0x124>
  c00dd8:	00b02034 	movhi	r2,49280
  c00ddc:	8885883a 	add	r2,r17,r2
  c00de0:	b884b03a 	or	r2,r23,r2
  c00de4:	1000251e 	bne	r2,zero,c00e7c <__ieee754_powf+0x284>
  c00de8:	200b883a 	mov	r5,r4
  c00dec:	003fc406 	br	c00d00 <__ieee754_powf+0x108>
  c00df0:	200b883a 	mov	r5,r4
  c00df4:	010fe034 	movhi	r4,16256
  c00df8:	0c020d80 	call	c020d8 <__divsf3>
  c00dfc:	1009883a 	mov	r4,r2
  c00e00:	a83ff31e 	bne	r21,zero,c00dd0 <__ieee754_powf+0x1d8>
  c00e04:	003ff406 	br	c00dd8 <__ieee754_powf+0x1e0>
  c00e08:	980b883a 	mov	r5,r19
  c00e0c:	9809883a 	mov	r4,r19
  c00e10:	0c01ef80 	call	c01ef8 <__mulsf3>
  c00e14:	1039883a 	mov	fp,r2
  c00e18:	003fc006 	br	c00d1c <__ieee754_powf+0x124>
  c00e1c:	903fe00e 	bge	r18,zero,c00da0 <__ieee754_powf+0x1a8>
  c00e20:	e0a0003c 	xorhi	r2,fp,32768
  c00e24:	1039883a 	mov	fp,r2
  c00e28:	003fbc06 	br	c00d1c <__ieee754_powf+0x124>
  c00e2c:	008fe034 	movhi	r2,16256
  c00e30:	10bfffc4 	addi	r2,r2,-1
  c00e34:	1400060e 	bge	r2,r16,c00e50 <__ieee754_powf+0x258>
  c00e38:	8007d5fa 	srai	r3,r16,23
  c00e3c:	00802584 	movi	r2,150
  c00e40:	10c5c83a 	sub	r2,r2,r3
  c00e44:	8087d83a 	sra	r3,r16,r2
  c00e48:	1884983a 	sll	r2,r3,r2
  c00e4c:	80800226 	beq	r16,r2,c00e58 <__ieee754_powf+0x260>
  c00e50:	002f883a 	mov	r23,zero
  c00e54:	003f9506 	br	c00cac <__ieee754_powf+0xb4>
  c00e58:	18c0004c 	andi	r3,r3,1
  c00e5c:	00800084 	movi	r2,2
  c00e60:	10efc83a 	sub	r23,r2,r3
  c00e64:	003f9106 	br	c00cac <__ieee754_powf+0xb4>
  c00e68:	8009883a 	mov	r4,r16
  c00e6c:	980b883a 	mov	r5,r19
  c00e70:	0c020d80 	call	c020d8 <__divsf3>
  c00e74:	1039883a 	mov	fp,r2
  c00e78:	003fa806 	br	c00d1c <__ieee754_powf+0x124>
  c00e7c:	00800044 	movi	r2,1
  c00e80:	b8bfd31e 	bne	r23,r2,c00dd0 <__ieee754_powf+0x1d8>
  c00e84:	20a0003c 	xorhi	r2,r4,32768
  c00e88:	1039883a 	mov	fp,r2
  c00e8c:	003fa306 	br	c00d1c <__ieee754_powf+0x124>
  c00e90:	00934034 	movhi	r2,19712
  c00e94:	14000a0e 	bge	r2,r16,c00ec0 <__ieee754_powf+0x2c8>
  c00e98:	008fe034 	movhi	r2,16256
  c00e9c:	10bffdc4 	addi	r2,r2,-9
  c00ea0:	1441b016 	blt	r2,r17,c01564 <__ieee754_powf+0x96c>
  c00ea4:	903fbe0e 	bge	r18,zero,c00da0 <__ieee754_powf+0x1a8>
  c00ea8:	011c52b4 	movhi	r4,29002
  c00eac:	213cb284 	addi	r4,r4,-3382
  c00eb0:	200b883a 	mov	r5,r4
  c00eb4:	0c01ef80 	call	c01ef8 <__mulsf3>
  c00eb8:	1039883a 	mov	fp,r2
  c00ebc:	003f9706 	br	c00d1c <__ieee754_powf+0x124>
  c00ec0:	00802034 	movhi	r2,128
  c00ec4:	10bfffc4 	addi	r2,r2,-1
  c00ec8:	1441a10e 	bge	r2,r17,c01550 <__ieee754_powf+0x958>
  c00ecc:	0009883a 	mov	r4,zero
  c00ed0:	8805d5fa 	srai	r2,r17,23
  c00ed4:	00c02034 	movhi	r3,128
  c00ed8:	18ffffc4 	addi	r3,r3,-1
  c00edc:	88c6703a 	and	r3,r17,r3
  c00ee0:	2089883a 	add	r4,r4,r2
  c00ee4:	20bfe044 	addi	r2,r4,-127
  c00ee8:	d8800015 	stw	r2,0(sp)
  c00eec:	00800774 	movhi	r2,29
  c00ef0:	10b11c44 	addi	r2,r2,-15247
  c00ef4:	1c0fe034 	orhi	r16,r3,16256
  c00ef8:	10c1790e 	bge	r2,r3,c014e0 <__ieee754_powf+0x8e8>
  c00efc:	008017b4 	movhi	r2,94
  c00f00:	10acf584 	addi	r2,r2,-19498
  c00f04:	10c17216 	blt	r2,r3,c014d0 <__ieee754_powf+0x8d8>
  c00f08:	00800934 	movhi	r2,36
  c00f0c:	05000044 	movi	r20,1
  c00f10:	d8800115 	stw	r2,4(sp)
  c00f14:	a529883a 	add	r20,r20,r20
  c00f18:	a529883a 	add	r20,r20,r20
  c00f1c:	d0a00604 	addi	r2,gp,-32744
  c00f20:	a085883a 	add	r2,r20,r2
  c00f24:	14800017 	ldw	r18,0(r2)
  c00f28:	8009883a 	mov	r4,r16
  c00f2c:	8023d07a 	srai	r17,r16,1
  c00f30:	900b883a 	mov	r5,r18
  c00f34:	0c01e240 	call	c01e24 <__subsf3>
  c00f38:	8009883a 	mov	r4,r16
  c00f3c:	900b883a 	mov	r5,r18
  c00f40:	1027883a 	mov	r19,r2
  c00f44:	0c01e940 	call	c01e94 <__addsf3>
  c00f48:	100b883a 	mov	r5,r2
  c00f4c:	010fe034 	movhi	r4,16256
  c00f50:	0c020d80 	call	c020d8 <__divsf3>
  c00f54:	100b883a 	mov	r5,r2
  c00f58:	9809883a 	mov	r4,r19
  c00f5c:	102b883a 	mov	r21,r2
  c00f60:	0c01ef80 	call	c01ef8 <__mulsf3>
  c00f64:	d8800315 	stw	r2,12(sp)
  c00f68:	d8c00317 	ldw	r3,12(sp)
  c00f6c:	00bc0004 	movi	r2,-4096
  c00f70:	8c480034 	orhi	r17,r17,8192
  c00f74:	10ec703a 	and	r22,r2,r3
  c00f78:	d8800117 	ldw	r2,4(sp)
  c00f7c:	b009883a 	mov	r4,r22
  c00f80:	88a3883a 	add	r17,r17,r2
  c00f84:	880b883a 	mov	r5,r17
  c00f88:	0c01ef80 	call	c01ef8 <__mulsf3>
  c00f8c:	100b883a 	mov	r5,r2
  c00f90:	9809883a 	mov	r4,r19
  c00f94:	0c01e240 	call	c01e24 <__subsf3>
  c00f98:	8809883a 	mov	r4,r17
  c00f9c:	900b883a 	mov	r5,r18
  c00fa0:	1027883a 	mov	r19,r2
  c00fa4:	0c01e240 	call	c01e24 <__subsf3>
  c00fa8:	100b883a 	mov	r5,r2
  c00fac:	8009883a 	mov	r4,r16
  c00fb0:	0c01e240 	call	c01e24 <__subsf3>
  c00fb4:	100b883a 	mov	r5,r2
  c00fb8:	b009883a 	mov	r4,r22
  c00fbc:	0c01ef80 	call	c01ef8 <__mulsf3>
  c00fc0:	100b883a 	mov	r5,r2
  c00fc4:	9809883a 	mov	r4,r19
  c00fc8:	0c01e240 	call	c01e24 <__subsf3>
  c00fcc:	100b883a 	mov	r5,r2
  c00fd0:	a809883a 	mov	r4,r21
  c00fd4:	0c01ef80 	call	c01ef8 <__mulsf3>
  c00fd8:	d9000317 	ldw	r4,12(sp)
  c00fdc:	d8800415 	stw	r2,16(sp)
  c00fe0:	05501034 	movhi	r21,16448
  c00fe4:	200b883a 	mov	r5,r4
  c00fe8:	0c01ef80 	call	c01ef8 <__mulsf3>
  c00fec:	1021883a 	mov	r16,r2
  c00ff0:	1009883a 	mov	r4,r2
  c00ff4:	100b883a 	mov	r5,r2
  c00ff8:	0c01ef80 	call	c01ef8 <__mulsf3>
  c00ffc:	8009883a 	mov	r4,r16
  c01000:	014f9534 	movhi	r5,15956
  c01004:	297c5084 	addi	r5,r5,-3774
  c01008:	1023883a 	mov	r17,r2
  c0100c:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01010:	1009883a 	mov	r4,r2
  c01014:	014f9b34 	movhi	r5,15980
  c01018:	294c9544 	addi	r5,r5,12885
  c0101c:	0c01e940 	call	c01e94 <__addsf3>
  c01020:	100b883a 	mov	r5,r2
  c01024:	8009883a 	mov	r4,r16
  c01028:	0c01ef80 	call	c01ef8 <__mulsf3>
  c0102c:	1009883a 	mov	r4,r2
  c01030:	014fa334 	movhi	r5,16012
  c01034:	2968c144 	addi	r5,r5,-23803
  c01038:	0c01e940 	call	c01e94 <__addsf3>
  c0103c:	100b883a 	mov	r5,r2
  c01040:	8009883a 	mov	r4,r16
  c01044:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01048:	1009883a 	mov	r4,r2
  c0104c:	014faaf4 	movhi	r5,16043
  c01050:	296aaac4 	addi	r5,r5,-21845
  c01054:	0c01e940 	call	c01e94 <__addsf3>
  c01058:	100b883a 	mov	r5,r2
  c0105c:	8009883a 	mov	r4,r16
  c01060:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01064:	1009883a 	mov	r4,r2
  c01068:	014fb6f4 	movhi	r5,16091
  c0106c:	295b6dc4 	addi	r5,r5,28087
  c01070:	0c01e940 	call	c01e94 <__addsf3>
  c01074:	100b883a 	mov	r5,r2
  c01078:	8009883a 	mov	r4,r16
  c0107c:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01080:	1009883a 	mov	r4,r2
  c01084:	014fc6b4 	movhi	r5,16154
  c01088:	29666684 	addi	r5,r5,-26214
  c0108c:	0c01e940 	call	c01e94 <__addsf3>
  c01090:	100b883a 	mov	r5,r2
  c01094:	8809883a 	mov	r4,r17
  c01098:	0c01ef80 	call	c01ef8 <__mulsf3>
  c0109c:	d9000317 	ldw	r4,12(sp)
  c010a0:	b00b883a 	mov	r5,r22
  c010a4:	1021883a 	mov	r16,r2
  c010a8:	0c01e940 	call	c01e94 <__addsf3>
  c010ac:	d9000417 	ldw	r4,16(sp)
  c010b0:	100b883a 	mov	r5,r2
  c010b4:	0c01ef80 	call	c01ef8 <__mulsf3>
  c010b8:	100b883a 	mov	r5,r2
  c010bc:	8009883a 	mov	r4,r16
  c010c0:	0c01e940 	call	c01e94 <__addsf3>
  c010c4:	b009883a 	mov	r4,r22
  c010c8:	b00b883a 	mov	r5,r22
  c010cc:	1025883a 	mov	r18,r2
  c010d0:	0c01ef80 	call	c01ef8 <__mulsf3>
  c010d4:	1009883a 	mov	r4,r2
  c010d8:	a80b883a 	mov	r5,r21
  c010dc:	1027883a 	mov	r19,r2
  c010e0:	0c01e940 	call	c01e94 <__addsf3>
  c010e4:	100b883a 	mov	r5,r2
  c010e8:	9009883a 	mov	r4,r18
  c010ec:	0c01e940 	call	c01e94 <__addsf3>
  c010f0:	00fc0004 	movi	r3,-4096
  c010f4:	10e2703a 	and	r17,r2,r3
  c010f8:	880b883a 	mov	r5,r17
  c010fc:	b009883a 	mov	r4,r22
  c01100:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01104:	d9000417 	ldw	r4,16(sp)
  c01108:	880b883a 	mov	r5,r17
  c0110c:	d8800515 	stw	r2,20(sp)
  c01110:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01114:	8809883a 	mov	r4,r17
  c01118:	a80b883a 	mov	r5,r21
  c0111c:	1021883a 	mov	r16,r2
  c01120:	0c01e240 	call	c01e24 <__subsf3>
  c01124:	1009883a 	mov	r4,r2
  c01128:	980b883a 	mov	r5,r19
  c0112c:	0c01e240 	call	c01e24 <__subsf3>
  c01130:	100b883a 	mov	r5,r2
  c01134:	9009883a 	mov	r4,r18
  c01138:	0c01e240 	call	c01e24 <__subsf3>
  c0113c:	d9000317 	ldw	r4,12(sp)
  c01140:	100b883a 	mov	r5,r2
  c01144:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01148:	100b883a 	mov	r5,r2
  c0114c:	8009883a 	mov	r4,r16
  c01150:	0c01e940 	call	c01e94 <__addsf3>
  c01154:	d9000517 	ldw	r4,20(sp)
  c01158:	100b883a 	mov	r5,r2
  c0115c:	1027883a 	mov	r19,r2
  c01160:	0c01e940 	call	c01e94 <__addsf3>
  c01164:	00fc0004 	movi	r3,-4096
  c01168:	10e2703a 	and	r17,r2,r3
  c0116c:	8809883a 	mov	r4,r17
  c01170:	014fddb4 	movhi	r5,16246
  c01174:	294e0004 	addi	r5,r5,14336
  c01178:	0c01ef80 	call	c01ef8 <__mulsf3>
  c0117c:	8809883a 	mov	r4,r17
  c01180:	014da7b4 	movhi	r5,13982
  c01184:	2970e804 	addi	r5,r5,-15456
  c01188:	102b883a 	mov	r21,r2
  c0118c:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01190:	d9400517 	ldw	r5,20(sp)
  c01194:	8809883a 	mov	r4,r17
  c01198:	1025883a 	mov	r18,r2
  c0119c:	0c01e240 	call	c01e24 <__subsf3>
  c011a0:	100b883a 	mov	r5,r2
  c011a4:	9809883a 	mov	r4,r19
  c011a8:	0c01e240 	call	c01e24 <__subsf3>
  c011ac:	1009883a 	mov	r4,r2
  c011b0:	014fddb4 	movhi	r5,16246
  c011b4:	294e13c4 	addi	r5,r5,14415
  c011b8:	0c01ef80 	call	c01ef8 <__mulsf3>
  c011bc:	100b883a 	mov	r5,r2
  c011c0:	9009883a 	mov	r4,r18
  c011c4:	0c01e940 	call	c01e94 <__addsf3>
  c011c8:	d0e00804 	addi	r3,gp,-32736
  c011cc:	a0c7883a 	add	r3,r20,r3
  c011d0:	19400017 	ldw	r5,0(r3)
  c011d4:	1009883a 	mov	r4,r2
  c011d8:	0c01e940 	call	c01e94 <__addsf3>
  c011dc:	d9000017 	ldw	r4,0(sp)
  c011e0:	1023883a 	mov	r17,r2
  c011e4:	0c0242c0 	call	c0242c <__floatsisf>
  c011e8:	1021883a 	mov	r16,r2
  c011ec:	d0a00a04 	addi	r2,gp,-32728
  c011f0:	a0a9883a 	add	r20,r20,r2
  c011f4:	a4800017 	ldw	r18,0(r20)
  c011f8:	a809883a 	mov	r4,r21
  c011fc:	880b883a 	mov	r5,r17
  c01200:	0c01e940 	call	c01e94 <__addsf3>
  c01204:	1009883a 	mov	r4,r2
  c01208:	900b883a 	mov	r5,r18
  c0120c:	0c01e940 	call	c01e94 <__addsf3>
  c01210:	100b883a 	mov	r5,r2
  c01214:	8009883a 	mov	r4,r16
  c01218:	0c01e940 	call	c01e94 <__addsf3>
  c0121c:	00fc0004 	movi	r3,-4096
  c01220:	10c4703a 	and	r2,r2,r3
  c01224:	800b883a 	mov	r5,r16
  c01228:	1009883a 	mov	r4,r2
  c0122c:	1027883a 	mov	r19,r2
  c01230:	0c01e240 	call	c01e24 <__subsf3>
  c01234:	1009883a 	mov	r4,r2
  c01238:	900b883a 	mov	r5,r18
  c0123c:	0c01e240 	call	c01e24 <__subsf3>
  c01240:	1009883a 	mov	r4,r2
  c01244:	a80b883a 	mov	r5,r21
  c01248:	0c01e240 	call	c01e24 <__subsf3>
  c0124c:	100b883a 	mov	r5,r2
  c01250:	8809883a 	mov	r4,r17
  c01254:	0c01e240 	call	c01e24 <__subsf3>
  c01258:	1021883a 	mov	r16,r2
  c0125c:	d8c00217 	ldw	r3,8(sp)
  c01260:	b8bfffc4 	addi	r2,r23,-1
  c01264:	1884b03a 	or	r2,r3,r2
  c01268:	1000a11e 	bne	r2,zero,c014f0 <__ieee754_powf+0x8f8>
  c0126c:	05efe034 	movhi	r23,49024
  c01270:	047c0004 	movi	r17,-4096
  c01274:	8f22703a 	and	r17,r17,fp
  c01278:	e009883a 	mov	r4,fp
  c0127c:	880b883a 	mov	r5,r17
  c01280:	0c01e240 	call	c01e24 <__subsf3>
  c01284:	100b883a 	mov	r5,r2
  c01288:	9809883a 	mov	r4,r19
  c0128c:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01290:	8009883a 	mov	r4,r16
  c01294:	e00b883a 	mov	r5,fp
  c01298:	1025883a 	mov	r18,r2
  c0129c:	0c01ef80 	call	c01ef8 <__mulsf3>
  c012a0:	100b883a 	mov	r5,r2
  c012a4:	9009883a 	mov	r4,r18
  c012a8:	0c01e940 	call	c01e94 <__addsf3>
  c012ac:	9809883a 	mov	r4,r19
  c012b0:	880b883a 	mov	r5,r17
  c012b4:	1021883a 	mov	r16,r2
  c012b8:	0c01ef80 	call	c01ef8 <__mulsf3>
  c012bc:	100b883a 	mov	r5,r2
  c012c0:	8009883a 	mov	r4,r16
  c012c4:	1027883a 	mov	r19,r2
  c012c8:	0c01e940 	call	c01e94 <__addsf3>
  c012cc:	1023883a 	mov	r17,r2
  c012d0:	1029883a 	mov	r20,r2
  c012d4:	00a00034 	movhi	r2,32768
  c012d8:	10bfffc4 	addi	r2,r2,-1
  c012dc:	88a4703a 	and	r18,r17,r2
  c012e0:	8039883a 	mov	fp,r16
  c012e4:	982b883a 	mov	r21,r19
  c012e8:	8807883a 	mov	r3,r17
  c012ec:	0440a30e 	bge	zero,r17,c0157c <__ieee754_powf+0x984>
  c012f0:	0090c034 	movhi	r2,17152
  c012f4:	14808c16 	blt	r2,r18,c01528 <__ieee754_powf+0x930>
  c012f8:	90807f26 	beq	r18,r2,c014f8 <__ieee754_powf+0x900>
  c012fc:	008fc034 	movhi	r2,16128
  c01300:	1480a816 	blt	r2,r18,c015a4 <__ieee754_powf+0x9ac>
  c01304:	002d883a 	mov	r22,zero
  c01308:	0029883a 	mov	r20,zero
  c0130c:	047c0004 	movi	r17,-4096
  c01310:	88e2703a 	and	r17,r17,r3
  c01314:	8809883a 	mov	r4,r17
  c01318:	014fcc74 	movhi	r5,16177
  c0131c:	295c8004 	addi	r5,r5,29184
  c01320:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01324:	8809883a 	mov	r4,r17
  c01328:	a80b883a 	mov	r5,r21
  c0132c:	1027883a 	mov	r19,r2
  c01330:	0c01e240 	call	c01e24 <__subsf3>
  c01334:	100b883a 	mov	r5,r2
  c01338:	e009883a 	mov	r4,fp
  c0133c:	0c01e240 	call	c01e24 <__subsf3>
  c01340:	1009883a 	mov	r4,r2
  c01344:	014fcc74 	movhi	r5,16177
  c01348:	295c8604 	addi	r5,r5,29208
  c0134c:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01350:	8809883a 	mov	r4,r17
  c01354:	014d7034 	movhi	r5,13760
  c01358:	296fa304 	addi	r5,r5,-16756
  c0135c:	1025883a 	mov	r18,r2
  c01360:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01364:	100b883a 	mov	r5,r2
  c01368:	9009883a 	mov	r4,r18
  c0136c:	0c01e940 	call	c01e94 <__addsf3>
  c01370:	100b883a 	mov	r5,r2
  c01374:	9809883a 	mov	r4,r19
  c01378:	1021883a 	mov	r16,r2
  c0137c:	0c01e940 	call	c01e94 <__addsf3>
  c01380:	1009883a 	mov	r4,r2
  c01384:	980b883a 	mov	r5,r19
  c01388:	1025883a 	mov	r18,r2
  c0138c:	0c01e240 	call	c01e24 <__subsf3>
  c01390:	100b883a 	mov	r5,r2
  c01394:	8009883a 	mov	r4,r16
  c01398:	0c01e240 	call	c01e24 <__subsf3>
  c0139c:	9009883a 	mov	r4,r18
  c013a0:	900b883a 	mov	r5,r18
  c013a4:	1027883a 	mov	r19,r2
  c013a8:	0c01ef80 	call	c01ef8 <__mulsf3>
  c013ac:	1009883a 	mov	r4,r2
  c013b0:	014cccb4 	movhi	r5,13106
  c013b4:	296ed304 	addi	r5,r5,-17588
  c013b8:	1021883a 	mov	r16,r2
  c013bc:	0c01ef80 	call	c01ef8 <__mulsf3>
  c013c0:	1009883a 	mov	r4,r2
  c013c4:	014d77b4 	movhi	r5,13790
  c013c8:	297a8384 	addi	r5,r5,-5618
  c013cc:	0c01e240 	call	c01e24 <__subsf3>
  c013d0:	100b883a 	mov	r5,r2
  c013d4:	8009883a 	mov	r4,r16
  c013d8:	0c01ef80 	call	c01ef8 <__mulsf3>
  c013dc:	1009883a 	mov	r4,r2
  c013e0:	014e22f4 	movhi	r5,14475
  c013e4:	296cd544 	addi	r5,r5,-19627
  c013e8:	0c01e940 	call	c01e94 <__addsf3>
  c013ec:	100b883a 	mov	r5,r2
  c013f0:	8009883a 	mov	r4,r16
  c013f4:	0c01ef80 	call	c01ef8 <__mulsf3>
  c013f8:	1009883a 	mov	r4,r2
  c013fc:	014ecdb4 	movhi	r5,15158
  c01400:	2942d844 	addi	r5,r5,2913
  c01404:	0c01e240 	call	c01e24 <__subsf3>
  c01408:	100b883a 	mov	r5,r2
  c0140c:	8009883a 	mov	r4,r16
  c01410:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01414:	1009883a 	mov	r4,r2
  c01418:	014f8af4 	movhi	r5,15915
  c0141c:	296aaac4 	addi	r5,r5,-21845
  c01420:	0c01e940 	call	c01e94 <__addsf3>
  c01424:	100b883a 	mov	r5,r2
  c01428:	8009883a 	mov	r4,r16
  c0142c:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01430:	100b883a 	mov	r5,r2
  c01434:	9009883a 	mov	r4,r18
  c01438:	0c01e240 	call	c01e24 <__subsf3>
  c0143c:	1021883a 	mov	r16,r2
  c01440:	9009883a 	mov	r4,r18
  c01444:	100b883a 	mov	r5,r2
  c01448:	0c01ef80 	call	c01ef8 <__mulsf3>
  c0144c:	8009883a 	mov	r4,r16
  c01450:	01500034 	movhi	r5,16384
  c01454:	1023883a 	mov	r17,r2
  c01458:	0c01e240 	call	c01e24 <__subsf3>
  c0145c:	100b883a 	mov	r5,r2
  c01460:	8809883a 	mov	r4,r17
  c01464:	0c020d80 	call	c020d8 <__divsf3>
  c01468:	9009883a 	mov	r4,r18
  c0146c:	980b883a 	mov	r5,r19
  c01470:	1021883a 	mov	r16,r2
  c01474:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01478:	100b883a 	mov	r5,r2
  c0147c:	9809883a 	mov	r4,r19
  c01480:	0c01e940 	call	c01e94 <__addsf3>
  c01484:	100b883a 	mov	r5,r2
  c01488:	8009883a 	mov	r4,r16
  c0148c:	0c01e240 	call	c01e24 <__subsf3>
  c01490:	1009883a 	mov	r4,r2
  c01494:	900b883a 	mov	r5,r18
  c01498:	0c01e240 	call	c01e24 <__subsf3>
  c0149c:	100b883a 	mov	r5,r2
  c014a0:	010fe034 	movhi	r4,16256
  c014a4:	0c01e240 	call	c01e24 <__subsf3>
  c014a8:	a087883a 	add	r3,r20,r2
  c014ac:	1009883a 	mov	r4,r2
  c014b0:	1805d5fa 	srai	r2,r3,23
  c014b4:	0080920e 	bge	zero,r2,c01700 <__ieee754_powf+0xb08>
  c014b8:	1805883a 	mov	r2,r3
  c014bc:	1009883a 	mov	r4,r2
  c014c0:	b80b883a 	mov	r5,r23
  c014c4:	0c01ef80 	call	c01ef8 <__mulsf3>
  c014c8:	1039883a 	mov	fp,r2
  c014cc:	003e1306 	br	c00d1c <__ieee754_powf+0x124>
  c014d0:	00bfe034 	movhi	r2,65408
  c014d4:	213fe084 	addi	r4,r4,-126
  c014d8:	80a1883a 	add	r16,r16,r2
  c014dc:	d9000015 	stw	r4,0(sp)
  c014e0:	00c00134 	movhi	r3,4
  c014e4:	0029883a 	mov	r20,zero
  c014e8:	d8c00115 	stw	r3,4(sp)
  c014ec:	003e8906 	br	c00f14 <__ieee754_powf+0x31c>
  c014f0:	05cfe034 	movhi	r23,16256
  c014f4:	003f5e06 	br	c01270 <__ieee754_powf+0x678>
  c014f8:	8009883a 	mov	r4,r16
  c014fc:	014cce74 	movhi	r5,13113
  c01500:	296a8f04 	addi	r5,r5,-21956
  c01504:	0c01e940 	call	c01e94 <__addsf3>
  c01508:	8809883a 	mov	r4,r17
  c0150c:	980b883a 	mov	r5,r19
  c01510:	1021883a 	mov	r16,r2
  c01514:	0c01e240 	call	c01e24 <__subsf3>
  c01518:	100b883a 	mov	r5,r2
  c0151c:	8009883a 	mov	r4,r16
  c01520:	0c022c40 	call	c022c4 <__gtsf2>
  c01524:	00801f0e 	bge	zero,r2,c015a4 <__ieee754_powf+0x9ac>
  c01528:	041c52b4 	movhi	r16,29002
  c0152c:	843cb284 	addi	r16,r16,-3382
  c01530:	b809883a 	mov	r4,r23
  c01534:	800b883a 	mov	r5,r16
  c01538:	0c01ef80 	call	c01ef8 <__mulsf3>
  c0153c:	1009883a 	mov	r4,r2
  c01540:	800b883a 	mov	r5,r16
  c01544:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01548:	1039883a 	mov	fp,r2
  c0154c:	003df306 	br	c00d1c <__ieee754_powf+0x124>
  c01550:	0152e034 	movhi	r5,19328
  c01554:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01558:	1023883a 	mov	r17,r2
  c0155c:	013ffa04 	movi	r4,-24
  c01560:	003e5b06 	br	c00ed0 <__ieee754_powf+0x2d8>
  c01564:	008fe034 	movhi	r2,16256
  c01568:	108001c4 	addi	r2,r2,7
  c0156c:	14402c0e 	bge	r2,r17,c01620 <__ieee754_powf+0xa28>
  c01570:	04be4d16 	blt	zero,r18,c00ea8 <__ieee754_powf+0x2b0>
  c01574:	0039883a 	mov	fp,zero
  c01578:	003de806 	br	c00d1c <__ieee754_powf+0x124>
  c0157c:	0090c5b4 	movhi	r2,17174
  c01580:	14802416 	blt	r2,r18,c01614 <__ieee754_powf+0xa1c>
  c01584:	90bf5d1e 	bne	r18,r2,c012fc <__ieee754_powf+0x704>
  c01588:	8809883a 	mov	r4,r17
  c0158c:	980b883a 	mov	r5,r19
  c01590:	0c01e240 	call	c01e24 <__subsf3>
  c01594:	100b883a 	mov	r5,r2
  c01598:	8009883a 	mov	r4,r16
  c0159c:	0c023b40 	call	c023b4 <__lesf2>
  c015a0:	00801c0e 	bge	zero,r2,c01614 <__ieee754_powf+0xa1c>
  c015a4:	9005d5fa 	srai	r2,r18,23
  c015a8:	01002034 	movhi	r4,128
  c015ac:	01402034 	movhi	r5,128
  c015b0:	297fffc4 	addi	r5,r5,-1
  c015b4:	10bfe084 	addi	r2,r2,-126
  c015b8:	2089d83a 	sra	r4,r4,r2
  c015bc:	008005c4 	movi	r2,23
  c015c0:	a109883a 	add	r4,r20,r4
  c015c4:	2006d5fa 	srli	r3,r4,23
  c015c8:	214c703a 	and	r6,r4,r5
  c015cc:	31802034 	orhi	r6,r6,128
  c015d0:	18c03fcc 	andi	r3,r3,255
  c015d4:	18ffe044 	addi	r3,r3,-127
  c015d8:	28cbd83a 	sra	r5,r5,r3
  c015dc:	10c5c83a 	sub	r2,r2,r3
  c015e0:	30add83a 	sra	r22,r6,r2
  c015e4:	014a303a 	nor	r5,zero,r5
  c015e8:	214a703a 	and	r5,r4,r5
  c015ec:	a0004216 	blt	r20,zero,c016f8 <__ieee754_powf+0xb00>
  c015f0:	a809883a 	mov	r4,r21
  c015f4:	0c01e240 	call	c01e24 <__subsf3>
  c015f8:	100b883a 	mov	r5,r2
  c015fc:	e009883a 	mov	r4,fp
  c01600:	b02895fa 	slli	r20,r22,23
  c01604:	102b883a 	mov	r21,r2
  c01608:	0c01e940 	call	c01e94 <__addsf3>
  c0160c:	1007883a 	mov	r3,r2
  c01610:	003f3e06 	br	c0130c <__ieee754_powf+0x714>
  c01614:	040368b4 	movhi	r16,3490
  c01618:	84109804 	addi	r16,r16,16992
  c0161c:	003fc406 	br	c01530 <__ieee754_powf+0x938>
  c01620:	0c01e240 	call	c01e24 <__subsf3>
  c01624:	1021883a 	mov	r16,r2
  c01628:	1009883a 	mov	r4,r2
  c0162c:	014fee74 	movhi	r5,16313
  c01630:	296a8004 	addi	r5,r5,-22016
  c01634:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01638:	8009883a 	mov	r4,r16
  c0163c:	014dbb74 	movhi	r5,14061
  c01640:	29695c04 	addi	r5,r5,-23184
  c01644:	1023883a 	mov	r17,r2
  c01648:	0c01ef80 	call	c01ef8 <__mulsf3>
  c0164c:	8009883a 	mov	r4,r16
  c01650:	800b883a 	mov	r5,r16
  c01654:	1025883a 	mov	r18,r2
  c01658:	0c01ef80 	call	c01ef8 <__mulsf3>
  c0165c:	8009883a 	mov	r4,r16
  c01660:	016fa034 	movhi	r5,48768
  c01664:	1027883a 	mov	r19,r2
  c01668:	0c01ef80 	call	c01ef8 <__mulsf3>
  c0166c:	1009883a 	mov	r4,r2
  c01670:	014faaf4 	movhi	r5,16043
  c01674:	296aaac4 	addi	r5,r5,-21845
  c01678:	0c01e940 	call	c01e94 <__addsf3>
  c0167c:	100b883a 	mov	r5,r2
  c01680:	8009883a 	mov	r4,r16
  c01684:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01688:	100b883a 	mov	r5,r2
  c0168c:	010fc034 	movhi	r4,16128
  c01690:	0c01e240 	call	c01e24 <__subsf3>
  c01694:	100b883a 	mov	r5,r2
  c01698:	9809883a 	mov	r4,r19
  c0169c:	0c01ef80 	call	c01ef8 <__mulsf3>
  c016a0:	1009883a 	mov	r4,r2
  c016a4:	016fee74 	movhi	r5,49081
  c016a8:	296a8ec4 	addi	r5,r5,-21957
  c016ac:	0c01ef80 	call	c01ef8 <__mulsf3>
  c016b0:	100b883a 	mov	r5,r2
  c016b4:	9009883a 	mov	r4,r18
  c016b8:	0c01e940 	call	c01e94 <__addsf3>
  c016bc:	100b883a 	mov	r5,r2
  c016c0:	8809883a 	mov	r4,r17
  c016c4:	1021883a 	mov	r16,r2
  c016c8:	0c01e940 	call	c01e94 <__addsf3>
  c016cc:	00fc0004 	movi	r3,-4096
  c016d0:	10c4703a 	and	r2,r2,r3
  c016d4:	1009883a 	mov	r4,r2
  c016d8:	880b883a 	mov	r5,r17
  c016dc:	1027883a 	mov	r19,r2
  c016e0:	0c01e240 	call	c01e24 <__subsf3>
  c016e4:	100b883a 	mov	r5,r2
  c016e8:	8009883a 	mov	r4,r16
  c016ec:	0c01e240 	call	c01e24 <__subsf3>
  c016f0:	1021883a 	mov	r16,r2
  c016f4:	003ed906 	br	c0125c <__ieee754_powf+0x664>
  c016f8:	05adc83a 	sub	r22,zero,r22
  c016fc:	003fbc06 	br	c015f0 <__ieee754_powf+0x9f8>
  c01700:	b00b883a 	mov	r5,r22
  c01704:	0c01adc0 	call	c01adc <scalbnf>
  c01708:	003f6c06 	br	c014bc <__ieee754_powf+0x8c4>

00c0170c <__ieee754_sqrtf>:
  c0170c:	00a00034 	movhi	r2,32768
  c01710:	10bfffc4 	addi	r2,r2,-1
  c01714:	defffe04 	addi	sp,sp,-8
  c01718:	208c703a 	and	r6,r4,r2
  c0171c:	00dfe034 	movhi	r3,32640
  c01720:	18ffffc4 	addi	r3,r3,-1
  c01724:	dc000015 	stw	r16,0(sp)
  c01728:	dfc00115 	stw	ra,4(sp)
  c0172c:	2021883a 	mov	r16,r4
  c01730:	200b883a 	mov	r5,r4
  c01734:	19800a2e 	bgeu	r3,r6,c01760 <__ieee754_sqrtf+0x54>
  c01738:	0c01ef80 	call	c01ef8 <__mulsf3>
  c0173c:	100b883a 	mov	r5,r2
  c01740:	8009883a 	mov	r4,r16
  c01744:	0c01e940 	call	c01e94 <__addsf3>
  c01748:	1021883a 	mov	r16,r2
  c0174c:	8005883a 	mov	r2,r16
  c01750:	dfc00117 	ldw	ra,4(sp)
  c01754:	dc000017 	ldw	r16,0(sp)
  c01758:	dec00204 	addi	sp,sp,8
  c0175c:	f800283a 	ret
  c01760:	303ffa26 	beq	r6,zero,c0174c <__ieee754_sqrtf+0x40>
  c01764:	20003b16 	blt	r4,zero,c01854 <__ieee754_sqrtf+0x148>
  c01768:	00802034 	movhi	r2,128
  c0176c:	10bfffc4 	addi	r2,r2,-1
  c01770:	2007d5fa 	srai	r3,r4,23
  c01774:	11800936 	bltu	r2,r6,c0179c <__ieee754_sqrtf+0x90>
  c01778:	2080202c 	andhi	r2,r4,128
  c0177c:	10003c1e 	bne	r2,zero,c01870 <__ieee754_sqrtf+0x164>
  c01780:	0009883a 	mov	r4,zero
  c01784:	294b883a 	add	r5,r5,r5
  c01788:	2880202c 	andhi	r2,r5,128
  c0178c:	21000044 	addi	r4,r4,1
  c01790:	103ffc26 	beq	r2,zero,c01784 <__ieee754_sqrtf+0x78>
  c01794:	1905c83a 	sub	r2,r3,r4
  c01798:	10c00044 	addi	r3,r2,1
  c0179c:	1a7fe044 	addi	r9,r3,-127
  c017a0:	48c0004c 	andi	r3,r9,1
  c017a4:	00802034 	movhi	r2,128
  c017a8:	10bfffc4 	addi	r2,r2,-1
  c017ac:	2884703a 	and	r2,r5,r2
  c017b0:	1807003a 	cmpeq	r3,r3,zero
  c017b4:	10802034 	orhi	r2,r2,128
  c017b8:	18002426 	beq	r3,zero,c0184c <__ieee754_sqrtf+0x140>
  c017bc:	1085883a 	add	r2,r2,r2
  c017c0:	01404034 	movhi	r5,256
  c017c4:	000f883a 	mov	r7,zero
  c017c8:	0007883a 	mov	r3,zero
  c017cc:	000d883a 	mov	r6,zero
  c017d0:	02000644 	movi	r8,25
  c017d4:	3949883a 	add	r4,r7,r5
  c017d8:	31800044 	addi	r6,r6,1
  c017dc:	11000316 	blt	r2,r4,c017ec <__ieee754_sqrtf+0xe0>
  c017e0:	1105c83a 	sub	r2,r2,r4
  c017e4:	1947883a 	add	r3,r3,r5
  c017e8:	214f883a 	add	r7,r4,r5
  c017ec:	1085883a 	add	r2,r2,r2
  c017f0:	280ad07a 	srli	r5,r5,1
  c017f4:	323ff71e 	bne	r6,r8,c017d4 <__ieee754_sqrtf+0xc8>
  c017f8:	10000b1e 	bne	r2,zero,c01828 <__ieee754_sqrtf+0x11c>
  c017fc:	4805d07a 	srai	r2,r9,1
  c01800:	1807d07a 	srai	r3,r3,1
  c01804:	010fc034 	movhi	r4,16128
  c01808:	100495fa 	slli	r2,r2,23
  c0180c:	1907883a 	add	r3,r3,r4
  c01810:	18a1883a 	add	r16,r3,r2
  c01814:	8005883a 	mov	r2,r16
  c01818:	dfc00117 	ldw	ra,4(sp)
  c0181c:	dc000017 	ldw	r16,0(sp)
  c01820:	dec00204 	addi	sp,sp,8
  c01824:	f800283a 	ret
  c01828:	1880004c 	andi	r2,r3,1
  c0182c:	1887883a 	add	r3,r3,r2
  c01830:	4805d07a 	srai	r2,r9,1
  c01834:	1807d07a 	srai	r3,r3,1
  c01838:	010fc034 	movhi	r4,16128
  c0183c:	100495fa 	slli	r2,r2,23
  c01840:	1907883a 	add	r3,r3,r4
  c01844:	18a1883a 	add	r16,r3,r2
  c01848:	003ff206 	br	c01814 <__ieee754_sqrtf+0x108>
  c0184c:	1085883a 	add	r2,r2,r2
  c01850:	003fda06 	br	c017bc <__ieee754_sqrtf+0xb0>
  c01854:	200b883a 	mov	r5,r4
  c01858:	0c01e240 	call	c01e24 <__subsf3>
  c0185c:	1009883a 	mov	r4,r2
  c01860:	100b883a 	mov	r5,r2
  c01864:	0c020d80 	call	c020d8 <__divsf3>
  c01868:	1021883a 	mov	r16,r2
  c0186c:	003fb706 	br	c0174c <__ieee754_sqrtf+0x40>
  c01870:	0009883a 	mov	r4,zero
  c01874:	003fc706 	br	c01794 <__ieee754_sqrtf+0x88>

00c01878 <matherr>:
  c01878:	0005883a 	mov	r2,zero
  c0187c:	f800283a 	ret

00c01880 <rint>:
  c01880:	2015883a 	mov	r10,r4
  c01884:	2809d53a 	srai	r4,r5,20
  c01888:	defff904 	addi	sp,sp,-28
  c0188c:	034004c4 	movi	r13,19
  c01890:	2101ffcc 	andi	r4,r4,2047
  c01894:	227f0044 	addi	r9,r4,-1023
  c01898:	dc800415 	stw	r18,16(sp)
  c0189c:	dfc00615 	stw	ra,24(sp)
  c018a0:	dcc00515 	stw	r19,20(sp)
  c018a4:	dc400315 	stw	r17,12(sp)
  c018a8:	dc000215 	stw	r16,8(sp)
  c018ac:	2817883a 	mov	r11,r5
  c018b0:	500d883a 	mov	r6,r10
  c018b4:	2824d7fa 	srli	r18,r5,31
  c018b8:	6a403016 	blt	r13,r9,c0197c <rint+0xfc>
  c018bc:	48004916 	blt	r9,zero,c019e4 <rint+0x164>
  c018c0:	00800434 	movhi	r2,16
  c018c4:	10bfffc4 	addi	r2,r2,-1
  c018c8:	1247d83a 	sra	r3,r2,r9
  c018cc:	2809883a 	mov	r4,r5
  c018d0:	1944703a 	and	r2,r3,r5
  c018d4:	5084b03a 	or	r2,r10,r2
  c018d8:	10001f26 	beq	r2,zero,c01958 <rint+0xd8>
  c018dc:	180ad07a 	srli	r5,r3,1
  c018e0:	5944703a 	and	r2,r11,r5
  c018e4:	5084b03a 	or	r2,r10,r2
  c018e8:	10000626 	beq	r2,zero,c01904 <rint+0x84>
  c018ec:	4b406626 	beq	r9,r13,c01a88 <rint+0x208>
  c018f0:	00c000b4 	movhi	r3,2
  c018f4:	1a47d83a 	sra	r3,r3,r9
  c018f8:	0144303a 	nor	r2,zero,r5
  c018fc:	5884703a 	and	r2,r11,r2
  c01900:	10c8b03a 	or	r4,r2,r3
  c01904:	900690fa 	slli	r3,r18,3
  c01908:	00803074 	movhi	r2,193
  c0190c:	1081ab04 	addi	r2,r2,1708
  c01910:	200f883a 	mov	r7,r4
  c01914:	1887883a 	add	r3,r3,r2
  c01918:	1c000017 	ldw	r16,0(r3)
  c0191c:	1c400117 	ldw	r17,4(r3)
  c01920:	8009883a 	mov	r4,r16
  c01924:	880b883a 	mov	r5,r17
  c01928:	0c029a80 	call	c029a8 <__adddf3>
  c0192c:	d8800015 	stw	r2,0(sp)
  c01930:	d8c00115 	stw	r3,4(sp)
  c01934:	d8800017 	ldw	r2,0(sp)
  c01938:	d8c00117 	ldw	r3,4(sp)
  c0193c:	880f883a 	mov	r7,r17
  c01940:	800d883a 	mov	r6,r16
  c01944:	180b883a 	mov	r5,r3
  c01948:	1009883a 	mov	r4,r2
  c0194c:	0c029280 	call	c02928 <__subdf3>
  c01950:	1015883a 	mov	r10,r2
  c01954:	1817883a 	mov	r11,r3
  c01958:	5005883a 	mov	r2,r10
  c0195c:	5807883a 	mov	r3,r11
  c01960:	dfc00617 	ldw	ra,24(sp)
  c01964:	dcc00517 	ldw	r19,20(sp)
  c01968:	dc800417 	ldw	r18,16(sp)
  c0196c:	dc400317 	ldw	r17,12(sp)
  c01970:	dc000217 	ldw	r16,8(sp)
  c01974:	dec00704 	addi	sp,sp,28
  c01978:	f800283a 	ret
  c0197c:	00800cc4 	movi	r2,51
  c01980:	12400f16 	blt	r2,r9,c019c0 <rint+0x140>
  c01984:	213efb44 	addi	r4,r4,-1043
  c01988:	00bfffc4 	movi	r2,-1
  c0198c:	1104d83a 	srl	r2,r2,r4
  c01990:	5086703a 	and	r3,r10,r2
  c01994:	183ff026 	beq	r3,zero,c01958 <rint+0xd8>
  c01998:	100ad07a 	srli	r5,r2,1
  c0199c:	5144703a 	and	r2,r10,r5
  c019a0:	10000526 	beq	r2,zero,c019b8 <rint+0x138>
  c019a4:	00d00034 	movhi	r3,16384
  c019a8:	1907d83a 	sra	r3,r3,r4
  c019ac:	0144303a 	nor	r2,zero,r5
  c019b0:	5084703a 	and	r2,r10,r2
  c019b4:	10ccb03a 	or	r6,r2,r3
  c019b8:	5809883a 	mov	r4,r11
  c019bc:	003fd106 	br	c01904 <rint+0x84>
  c019c0:	00810004 	movi	r2,1024
  c019c4:	48bfe41e 	bne	r9,r2,c01958 <rint+0xd8>
  c019c8:	5009883a 	mov	r4,r10
  c019cc:	500d883a 	mov	r6,r10
  c019d0:	280f883a 	mov	r7,r5
  c019d4:	0c029a80 	call	c029a8 <__adddf3>
  c019d8:	1015883a 	mov	r10,r2
  c019dc:	1817883a 	mov	r11,r3
  c019e0:	003fdd06 	br	c01958 <rint+0xd8>
  c019e4:	04e00034 	movhi	r19,32768
  c019e8:	9cffffc4 	addi	r19,r19,-1
  c019ec:	2cc4703a 	and	r2,r5,r19
  c019f0:	5084b03a 	or	r2,r10,r2
  c019f4:	103fd826 	beq	r2,zero,c01958 <rint+0xd8>
  c019f8:	00c00434 	movhi	r3,16
  c019fc:	18ffffc4 	addi	r3,r3,-1
  c01a00:	28c6703a 	and	r3,r5,r3
  c01a04:	50c6b03a 	or	r3,r10,r3
  c01a08:	00cdc83a 	sub	r6,zero,r3
  c01a0c:	900a90fa 	slli	r5,r18,3
  c01a10:	1986b03a 	or	r3,r3,r6
  c01a14:	01003074 	movhi	r4,193
  c01a18:	2101ab04 	addi	r4,r4,1708
  c01a1c:	1806d33a 	srli	r3,r3,12
  c01a20:	290b883a 	add	r5,r5,r4
  c01a24:	2c000017 	ldw	r16,0(r5)
  c01a28:	2c400117 	ldw	r17,4(r5)
  c01a2c:	593fffac 	andhi	r4,r11,65534
  c01a30:	18c0022c 	andhi	r3,r3,8
  c01a34:	1906b03a 	or	r3,r3,r4
  c01a38:	500d883a 	mov	r6,r10
  c01a3c:	180f883a 	mov	r7,r3
  c01a40:	8009883a 	mov	r4,r16
  c01a44:	880b883a 	mov	r5,r17
  c01a48:	0c029a80 	call	c029a8 <__adddf3>
  c01a4c:	d8800015 	stw	r2,0(sp)
  c01a50:	d8c00115 	stw	r3,4(sp)
  c01a54:	d8800017 	ldw	r2,0(sp)
  c01a58:	d8c00117 	ldw	r3,4(sp)
  c01a5c:	880f883a 	mov	r7,r17
  c01a60:	800d883a 	mov	r6,r16
  c01a64:	180b883a 	mov	r5,r3
  c01a68:	1009883a 	mov	r4,r2
  c01a6c:	0c029280 	call	c02928 <__subdf3>
  c01a70:	901297fa 	slli	r9,r18,31
  c01a74:	98d0703a 	and	r8,r19,r3
  c01a78:	1015883a 	mov	r10,r2
  c01a7c:	4250b03a 	or	r8,r8,r9
  c01a80:	4017883a 	mov	r11,r8
  c01a84:	003fb406 	br	c01958 <rint+0xd8>
  c01a88:	01900034 	movhi	r6,16384
  c01a8c:	003f9d06 	br	c01904 <rint+0x84>

00c01a90 <fabsf>:
  c01a90:	00a00034 	movhi	r2,32768
  c01a94:	10bfffc4 	addi	r2,r2,-1
  c01a98:	2084703a 	and	r2,r4,r2
  c01a9c:	f800283a 	ret

00c01aa0 <finitef>:
  c01aa0:	00a00034 	movhi	r2,32768
  c01aa4:	10bfffc4 	addi	r2,r2,-1
  c01aa8:	2088703a 	and	r4,r4,r2
  c01aac:	009fe034 	movhi	r2,32640
  c01ab0:	10bfffc4 	addi	r2,r2,-1
  c01ab4:	1104403a 	cmpge	r2,r2,r4
  c01ab8:	f800283a 	ret

00c01abc <isnanf>:
  c01abc:	00a00034 	movhi	r2,32768
  c01ac0:	10bfffc4 	addi	r2,r2,-1
  c01ac4:	2088703a 	and	r4,r4,r2
  c01ac8:	009fe034 	movhi	r2,32640
  c01acc:	1104803a 	cmplt	r2,r2,r4
  c01ad0:	f800283a 	ret

00c01ad4 <nanf>:
  c01ad4:	009ff034 	movhi	r2,32704
  c01ad8:	f800283a 	ret

00c01adc <scalbnf>:
  c01adc:	00a00034 	movhi	r2,32768
  c01ae0:	10bfffc4 	addi	r2,r2,-1
  c01ae4:	defffe04 	addi	sp,sp,-8
  c01ae8:	2086703a 	and	r3,r4,r2
  c01aec:	dc000015 	stw	r16,0(sp)
  c01af0:	dfc00115 	stw	ra,4(sp)
  c01af4:	200d883a 	mov	r6,r4
  c01af8:	200f883a 	mov	r7,r4
  c01afc:	2821883a 	mov	r16,r5
  c01b00:	18001a26 	beq	r3,zero,c01b6c <scalbnf+0x90>
  c01b04:	009fe034 	movhi	r2,32640
  c01b08:	10bfffc4 	addi	r2,r2,-1
  c01b0c:	10c01c36 	bltu	r2,r3,c01b80 <scalbnf+0xa4>
  c01b10:	00802034 	movhi	r2,128
  c01b14:	10bfffc4 	addi	r2,r2,-1
  c01b18:	10c02136 	bltu	r2,r3,c01ba0 <scalbnf+0xc4>
  c01b1c:	01530034 	movhi	r5,19456
  c01b20:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01b24:	1009883a 	mov	r4,r2
  c01b28:	100d883a 	mov	r6,r2
  c01b2c:	00bffff4 	movhi	r2,65535
  c01b30:	108f2c04 	addi	r2,r2,15536
  c01b34:	80802616 	blt	r16,r2,c01bd0 <scalbnf+0xf4>
  c01b38:	209fe02c 	andhi	r2,r4,32640
  c01b3c:	1005d5fa 	srai	r2,r2,23
  c01b40:	200f883a 	mov	r7,r4
  c01b44:	10bff9c4 	addi	r2,r2,-25
  c01b48:	1407883a 	add	r3,r2,r16
  c01b4c:	00803f84 	movi	r2,254
  c01b50:	10c01516 	blt	r2,r3,c01ba8 <scalbnf+0xcc>
  c01b54:	00c0230e 	bge	zero,r3,c01be4 <scalbnf+0x108>
  c01b58:	180695fa 	slli	r3,r3,23
  c01b5c:	00a02034 	movhi	r2,32896
  c01b60:	10bfffc4 	addi	r2,r2,-1
  c01b64:	3884703a 	and	r2,r7,r2
  c01b68:	10ccb03a 	or	r6,r2,r3
  c01b6c:	3005883a 	mov	r2,r6
  c01b70:	dfc00117 	ldw	ra,4(sp)
  c01b74:	dc000017 	ldw	r16,0(sp)
  c01b78:	dec00204 	addi	sp,sp,8
  c01b7c:	f800283a 	ret
  c01b80:	200b883a 	mov	r5,r4
  c01b84:	0c01e940 	call	c01e94 <__addsf3>
  c01b88:	100d883a 	mov	r6,r2
  c01b8c:	3005883a 	mov	r2,r6
  c01b90:	dfc00117 	ldw	ra,4(sp)
  c01b94:	dc000017 	ldw	r16,0(sp)
  c01b98:	dec00204 	addi	sp,sp,8
  c01b9c:	f800283a 	ret
  c01ba0:	1804d5fa 	srli	r2,r3,23
  c01ba4:	003fe806 	br	c01b48 <scalbnf+0x6c>
  c01ba8:	041c52b4 	movhi	r16,29002
  c01bac:	843cb284 	addi	r16,r16,-3382
  c01bb0:	300b883a 	mov	r5,r6
  c01bb4:	8009883a 	mov	r4,r16
  c01bb8:	0c01c280 	call	c01c28 <copysignf>
  c01bbc:	1009883a 	mov	r4,r2
  c01bc0:	800b883a 	mov	r5,r16
  c01bc4:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01bc8:	100d883a 	mov	r6,r2
  c01bcc:	003fe706 	br	c01b6c <scalbnf+0x90>
  c01bd0:	014368b4 	movhi	r5,3490
  c01bd4:	29509804 	addi	r5,r5,16992
  c01bd8:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01bdc:	100d883a 	mov	r6,r2
  c01be0:	003fe206 	br	c01b6c <scalbnf+0x90>
  c01be4:	00bffa84 	movi	r2,-22
  c01be8:	1880050e 	bge	r3,r2,c01c00 <scalbnf+0x124>
  c01bec:	00b0d414 	movui	r2,50000
  c01bf0:	143fed16 	blt	r2,r16,c01ba8 <scalbnf+0xcc>
  c01bf4:	040368b4 	movhi	r16,3490
  c01bf8:	84109804 	addi	r16,r16,16992
  c01bfc:	003fec06 	br	c01bb0 <scalbnf+0xd4>
  c01c00:	18800644 	addi	r2,r3,25
  c01c04:	100495fa 	slli	r2,r2,23
  c01c08:	01202034 	movhi	r4,32896
  c01c0c:	213fffc4 	addi	r4,r4,-1
  c01c10:	3908703a 	and	r4,r7,r4
  c01c14:	2088b03a 	or	r4,r4,r2
  c01c18:	014cc034 	movhi	r5,13056
  c01c1c:	0c01ef80 	call	c01ef8 <__mulsf3>
  c01c20:	100d883a 	mov	r6,r2
  c01c24:	003fd106 	br	c01b6c <scalbnf+0x90>

00c01c28 <copysignf>:
  c01c28:	00a00034 	movhi	r2,32768
  c01c2c:	10bfffc4 	addi	r2,r2,-1
  c01c30:	2088703a 	and	r4,r4,r2
  c01c34:	28a0002c 	andhi	r2,r5,32768
  c01c38:	2084b03a 	or	r2,r4,r2
  c01c3c:	f800283a 	ret

00c01c40 <_fpadd_parts>:
  c01c40:	21c00017 	ldw	r7,0(r4)
  c01c44:	02000044 	movi	r8,1
  c01c48:	41c0332e 	bgeu	r8,r7,c01d18 <_fpadd_parts+0xd8>
  c01c4c:	28800017 	ldw	r2,0(r5)
  c01c50:	4080462e 	bgeu	r8,r2,c01d6c <_fpadd_parts+0x12c>
  c01c54:	00c00104 	movi	r3,4
  c01c58:	38c06b26 	beq	r7,r3,c01e08 <_fpadd_parts+0x1c8>
  c01c5c:	10c04326 	beq	r2,r3,c01d6c <_fpadd_parts+0x12c>
  c01c60:	00c00084 	movi	r3,2
  c01c64:	10c02e26 	beq	r2,r3,c01d20 <_fpadd_parts+0xe0>
  c01c68:	38c04026 	beq	r7,r3,c01d6c <_fpadd_parts+0x12c>
  c01c6c:	22800217 	ldw	r10,8(r4)
  c01c70:	28c00217 	ldw	r3,8(r5)
  c01c74:	23000317 	ldw	r12,12(r4)
  c01c78:	2a400317 	ldw	r9,12(r5)
  c01c7c:	50cfc83a 	sub	r7,r10,r3
  c01c80:	3817883a 	mov	r11,r7
  c01c84:	38004f16 	blt	r7,zero,c01dc4 <_fpadd_parts+0x184>
  c01c88:	008007c4 	movi	r2,31
  c01c8c:	11c03316 	blt	r2,r7,c01d5c <_fpadd_parts+0x11c>
  c01c90:	02c0540e 	bge	zero,r11,c01de4 <_fpadd_parts+0x1a4>
  c01c94:	41c4983a 	sll	r2,r8,r7
  c01c98:	49c6d83a 	srl	r3,r9,r7
  c01c9c:	10bfffc4 	addi	r2,r2,-1
  c01ca0:	4884703a 	and	r2,r9,r2
  c01ca4:	1004c03a 	cmpne	r2,r2,zero
  c01ca8:	1892b03a 	or	r9,r3,r2
  c01cac:	20c00117 	ldw	r3,4(r4)
  c01cb0:	28800117 	ldw	r2,4(r5)
  c01cb4:	18803c26 	beq	r3,r2,c01da8 <_fpadd_parts+0x168>
  c01cb8:	18002f26 	beq	r3,zero,c01d78 <_fpadd_parts+0x138>
  c01cbc:	4b05c83a 	sub	r2,r9,r12
  c01cc0:	10004216 	blt	r2,zero,c01dcc <_fpadd_parts+0x18c>
  c01cc4:	32800215 	stw	r10,8(r6)
  c01cc8:	30800315 	stw	r2,12(r6)
  c01ccc:	30000115 	stw	zero,4(r6)
  c01cd0:	31000317 	ldw	r4,12(r6)
  c01cd4:	01d00034 	movhi	r7,16384
  c01cd8:	39ffff84 	addi	r7,r7,-2
  c01cdc:	20bfffc4 	addi	r2,r4,-1
  c01ce0:	2007883a 	mov	r3,r4
  c01ce4:	38800836 	bltu	r7,r2,c01d08 <_fpadd_parts+0xc8>
  c01ce8:	31400217 	ldw	r5,8(r6)
  c01cec:	18c9883a 	add	r4,r3,r3
  c01cf0:	20bfffc4 	addi	r2,r4,-1
  c01cf4:	297fffc4 	addi	r5,r5,-1
  c01cf8:	2007883a 	mov	r3,r4
  c01cfc:	38bffb2e 	bgeu	r7,r2,c01cec <_fpadd_parts+0xac>
  c01d00:	31400215 	stw	r5,8(r6)
  c01d04:	31000315 	stw	r4,12(r6)
  c01d08:	008000c4 	movi	r2,3
  c01d0c:	30800015 	stw	r2,0(r6)
  c01d10:	20001b16 	blt	r4,zero,c01d80 <_fpadd_parts+0x140>
  c01d14:	3009883a 	mov	r4,r6
  c01d18:	2005883a 	mov	r2,r4
  c01d1c:	f800283a 	ret
  c01d20:	38fffd1e 	bne	r7,r3,c01d18 <_fpadd_parts+0xd8>
  c01d24:	31c00015 	stw	r7,0(r6)
  c01d28:	20800117 	ldw	r2,4(r4)
  c01d2c:	30800115 	stw	r2,4(r6)
  c01d30:	20c00217 	ldw	r3,8(r4)
  c01d34:	30c00215 	stw	r3,8(r6)
  c01d38:	20800317 	ldw	r2,12(r4)
  c01d3c:	30800315 	stw	r2,12(r6)
  c01d40:	20c00117 	ldw	r3,4(r4)
  c01d44:	28800117 	ldw	r2,4(r5)
  c01d48:	3009883a 	mov	r4,r6
  c01d4c:	1886703a 	and	r3,r3,r2
  c01d50:	2005883a 	mov	r2,r4
  c01d54:	30c00115 	stw	r3,4(r6)
  c01d58:	f800283a 	ret
  c01d5c:	1a801716 	blt	r3,r10,c01dbc <_fpadd_parts+0x17c>
  c01d60:	1815883a 	mov	r10,r3
  c01d64:	0019883a 	mov	r12,zero
  c01d68:	003fd006 	br	c01cac <_fpadd_parts+0x6c>
  c01d6c:	2809883a 	mov	r4,r5
  c01d70:	2005883a 	mov	r2,r4
  c01d74:	f800283a 	ret
  c01d78:	6245c83a 	sub	r2,r12,r9
  c01d7c:	003fd006 	br	c01cc0 <_fpadd_parts+0x80>
  c01d80:	30800217 	ldw	r2,8(r6)
  c01d84:	2006d07a 	srli	r3,r4,1
  c01d88:	2100004c 	andi	r4,r4,1
  c01d8c:	10800044 	addi	r2,r2,1
  c01d90:	1906b03a 	or	r3,r3,r4
  c01d94:	3009883a 	mov	r4,r6
  c01d98:	30800215 	stw	r2,8(r6)
  c01d9c:	2005883a 	mov	r2,r4
  c01da0:	30c00315 	stw	r3,12(r6)
  c01da4:	f800283a 	ret
  c01da8:	4b09883a 	add	r4,r9,r12
  c01dac:	30c00115 	stw	r3,4(r6)
  c01db0:	32800215 	stw	r10,8(r6)
  c01db4:	31000315 	stw	r4,12(r6)
  c01db8:	003fd306 	br	c01d08 <_fpadd_parts+0xc8>
  c01dbc:	0013883a 	mov	r9,zero
  c01dc0:	003fba06 	br	c01cac <_fpadd_parts+0x6c>
  c01dc4:	01cfc83a 	sub	r7,zero,r7
  c01dc8:	003faf06 	br	c01c88 <_fpadd_parts+0x48>
  c01dcc:	0089c83a 	sub	r4,zero,r2
  c01dd0:	00800044 	movi	r2,1
  c01dd4:	30800115 	stw	r2,4(r6)
  c01dd8:	32800215 	stw	r10,8(r6)
  c01ddc:	31000315 	stw	r4,12(r6)
  c01de0:	003fbb06 	br	c01cd0 <_fpadd_parts+0x90>
  c01de4:	583fb126 	beq	r11,zero,c01cac <_fpadd_parts+0x6c>
  c01de8:	41c4983a 	sll	r2,r8,r7
  c01dec:	61c6d83a 	srl	r3,r12,r7
  c01df0:	51d5883a 	add	r10,r10,r7
  c01df4:	10bfffc4 	addi	r2,r2,-1
  c01df8:	6084703a 	and	r2,r12,r2
  c01dfc:	1004c03a 	cmpne	r2,r2,zero
  c01e00:	1898b03a 	or	r12,r3,r2
  c01e04:	003fa906 	br	c01cac <_fpadd_parts+0x6c>
  c01e08:	11ffc31e 	bne	r2,r7,c01d18 <_fpadd_parts+0xd8>
  c01e0c:	28c00117 	ldw	r3,4(r5)
  c01e10:	20800117 	ldw	r2,4(r4)
  c01e14:	10ffc026 	beq	r2,r3,c01d18 <_fpadd_parts+0xd8>
  c01e18:	01003074 	movhi	r4,193
  c01e1c:	2101af04 	addi	r4,r4,1724
  c01e20:	003fbd06 	br	c01d18 <_fpadd_parts+0xd8>

00c01e24 <__subsf3>:
  c01e24:	deffef04 	addi	sp,sp,-68
  c01e28:	dcc00f15 	stw	r19,60(sp)
  c01e2c:	dcc00204 	addi	r19,sp,8
  c01e30:	dc400e15 	stw	r17,56(sp)
  c01e34:	d9000015 	stw	r4,0(sp)
  c01e38:	d9400115 	stw	r5,4(sp)
  c01e3c:	d809883a 	mov	r4,sp
  c01e40:	980b883a 	mov	r5,r19
  c01e44:	dc400604 	addi	r17,sp,24
  c01e48:	dfc01015 	stw	ra,64(sp)
  c01e4c:	0c030200 	call	c03020 <__unpack_f>
  c01e50:	d9000104 	addi	r4,sp,4
  c01e54:	880b883a 	mov	r5,r17
  c01e58:	0c030200 	call	c03020 <__unpack_f>
  c01e5c:	d8800717 	ldw	r2,28(sp)
  c01e60:	9809883a 	mov	r4,r19
  c01e64:	880b883a 	mov	r5,r17
  c01e68:	d9800a04 	addi	r6,sp,40
  c01e6c:	1080005c 	xori	r2,r2,1
  c01e70:	d8800715 	stw	r2,28(sp)
  c01e74:	0c01c400 	call	c01c40 <_fpadd_parts>
  c01e78:	1009883a 	mov	r4,r2
  c01e7c:	0c02ec00 	call	c02ec0 <__pack_f>
  c01e80:	dfc01017 	ldw	ra,64(sp)
  c01e84:	dcc00f17 	ldw	r19,60(sp)
  c01e88:	dc400e17 	ldw	r17,56(sp)
  c01e8c:	dec01104 	addi	sp,sp,68
  c01e90:	f800283a 	ret

00c01e94 <__addsf3>:
  c01e94:	deffef04 	addi	sp,sp,-68
  c01e98:	dcc00f15 	stw	r19,60(sp)
  c01e9c:	dcc00204 	addi	r19,sp,8
  c01ea0:	dc400e15 	stw	r17,56(sp)
  c01ea4:	d9000015 	stw	r4,0(sp)
  c01ea8:	d9400115 	stw	r5,4(sp)
  c01eac:	d809883a 	mov	r4,sp
  c01eb0:	980b883a 	mov	r5,r19
  c01eb4:	dc400604 	addi	r17,sp,24
  c01eb8:	dfc01015 	stw	ra,64(sp)
  c01ebc:	0c030200 	call	c03020 <__unpack_f>
  c01ec0:	d9000104 	addi	r4,sp,4
  c01ec4:	880b883a 	mov	r5,r17
  c01ec8:	0c030200 	call	c03020 <__unpack_f>
  c01ecc:	d9800a04 	addi	r6,sp,40
  c01ed0:	9809883a 	mov	r4,r19
  c01ed4:	880b883a 	mov	r5,r17
  c01ed8:	0c01c400 	call	c01c40 <_fpadd_parts>
  c01edc:	1009883a 	mov	r4,r2
  c01ee0:	0c02ec00 	call	c02ec0 <__pack_f>
  c01ee4:	dfc01017 	ldw	ra,64(sp)
  c01ee8:	dcc00f17 	ldw	r19,60(sp)
  c01eec:	dc400e17 	ldw	r17,56(sp)
  c01ef0:	dec01104 	addi	sp,sp,68
  c01ef4:	f800283a 	ret

00c01ef8 <__mulsf3>:
  c01ef8:	deffef04 	addi	sp,sp,-68
  c01efc:	dc400f15 	stw	r17,60(sp)
  c01f00:	dc400204 	addi	r17,sp,8
  c01f04:	dc000e15 	stw	r16,56(sp)
  c01f08:	d9000015 	stw	r4,0(sp)
  c01f0c:	d9400115 	stw	r5,4(sp)
  c01f10:	d809883a 	mov	r4,sp
  c01f14:	880b883a 	mov	r5,r17
  c01f18:	dc000604 	addi	r16,sp,24
  c01f1c:	dfc01015 	stw	ra,64(sp)
  c01f20:	0c030200 	call	c03020 <__unpack_f>
  c01f24:	d9000104 	addi	r4,sp,4
  c01f28:	800b883a 	mov	r5,r16
  c01f2c:	0c030200 	call	c03020 <__unpack_f>
  c01f30:	d9000217 	ldw	r4,8(sp)
  c01f34:	00800044 	movi	r2,1
  c01f38:	01400104 	movi	r5,4
  c01f3c:	1100142e 	bgeu	r2,r4,c01f90 <__mulsf3+0x98>
  c01f40:	d8c00617 	ldw	r3,24(sp)
  c01f44:	10c0052e 	bgeu	r2,r3,c01f5c <__mulsf3+0x64>
  c01f48:	21400f26 	beq	r4,r5,c01f88 <__mulsf3+0x90>
  c01f4c:	19405d26 	beq	r3,r5,c020c4 <__mulsf3+0x1cc>
  c01f50:	00800084 	movi	r2,2
  c01f54:	20800e26 	beq	r4,r2,c01f90 <__mulsf3+0x98>
  c01f58:	1880181e 	bne	r3,r2,c01fbc <__mulsf3+0xc4>
  c01f5c:	d8c00717 	ldw	r3,28(sp)
  c01f60:	d8800317 	ldw	r2,12(sp)
  c01f64:	8009883a 	mov	r4,r16
  c01f68:	10c4c03a 	cmpne	r2,r2,r3
  c01f6c:	d8800715 	stw	r2,28(sp)
  c01f70:	0c02ec00 	call	c02ec0 <__pack_f>
  c01f74:	dfc01017 	ldw	ra,64(sp)
  c01f78:	dc400f17 	ldw	r17,60(sp)
  c01f7c:	dc000e17 	ldw	r16,56(sp)
  c01f80:	dec01104 	addi	sp,sp,68
  c01f84:	f800283a 	ret
  c01f88:	00800084 	movi	r2,2
  c01f8c:	18804f26 	beq	r3,r2,c020cc <__mulsf3+0x1d4>
  c01f90:	d8800317 	ldw	r2,12(sp)
  c01f94:	d8c00717 	ldw	r3,28(sp)
  c01f98:	8809883a 	mov	r4,r17
  c01f9c:	10c4c03a 	cmpne	r2,r2,r3
  c01fa0:	d8800315 	stw	r2,12(sp)
  c01fa4:	0c02ec00 	call	c02ec0 <__pack_f>
  c01fa8:	dfc01017 	ldw	ra,64(sp)
  c01fac:	dc400f17 	ldw	r17,60(sp)
  c01fb0:	dc000e17 	ldw	r16,56(sp)
  c01fb4:	dec01104 	addi	sp,sp,68
  c01fb8:	f800283a 	ret
  c01fbc:	d8800517 	ldw	r2,20(sp)
  c01fc0:	da000917 	ldw	r8,36(sp)
  c01fc4:	0013883a 	mov	r9,zero
  c01fc8:	0007883a 	mov	r3,zero
  c01fcc:	480f883a 	mov	r7,r9
  c01fd0:	180b883a 	mov	r5,r3
  c01fd4:	400d883a 	mov	r6,r8
  c01fd8:	1009883a 	mov	r4,r2
  c01fdc:	0c02da80 	call	c02da8 <__muldi3>
  c01fe0:	da800417 	ldw	r10,16(sp)
  c01fe4:	d9800817 	ldw	r6,32(sp)
  c01fe8:	da400317 	ldw	r9,12(sp)
  c01fec:	52800084 	addi	r10,r10,2
  c01ff0:	3295883a 	add	r10,r6,r10
  c01ff4:	d9800717 	ldw	r6,28(sp)
  c01ff8:	180b883a 	mov	r5,r3
  c01ffc:	180f883a 	mov	r7,r3
  c02000:	4992c03a 	cmpne	r9,r9,r6
  c02004:	da400b15 	stw	r9,44(sp)
  c02008:	1007883a 	mov	r3,r2
  c0200c:	da800c15 	stw	r10,48(sp)
  c02010:	2800070e 	bge	r5,zero,c02030 <__mulsf3+0x138>
  c02014:	2880004c 	andi	r2,r5,1
  c02018:	1005003a 	cmpeq	r2,r2,zero
  c0201c:	500d883a 	mov	r6,r10
  c02020:	10001e26 	beq	r2,zero,c0209c <__mulsf3+0x1a4>
  c02024:	380ed07a 	srli	r7,r7,1
  c02028:	31800044 	addi	r6,r6,1
  c0202c:	d9800c15 	stw	r6,48(sp)
  c02030:	01100034 	movhi	r4,16384
  c02034:	213fffc4 	addi	r4,r4,-1
  c02038:	21c00b36 	bltu	r4,r7,c02068 <__mulsf3+0x170>
  c0203c:	d8800c17 	ldw	r2,48(sp)
  c02040:	00000206 	br	c0204c <__mulsf3+0x154>
  c02044:	18c7883a 	add	r3,r3,r3
  c02048:	21c00636 	bltu	r4,r7,c02064 <__mulsf3+0x16c>
  c0204c:	10bfffc4 	addi	r2,r2,-1
  c02050:	39cf883a 	add	r7,r7,r7
  c02054:	183ffb0e 	bge	r3,zero,c02044 <__mulsf3+0x14c>
  c02058:	39c00054 	ori	r7,r7,1
  c0205c:	18c7883a 	add	r3,r3,r3
  c02060:	21fffa2e 	bgeu	r4,r7,c0204c <__mulsf3+0x154>
  c02064:	d8800c15 	stw	r2,48(sp)
  c02068:	39001fcc 	andi	r4,r7,127
  c0206c:	00801004 	movi	r2,64
  c02070:	20800d26 	beq	r4,r2,c020a8 <__mulsf3+0x1b0>
  c02074:	008000c4 	movi	r2,3
  c02078:	d9000a04 	addi	r4,sp,40
  c0207c:	d9c00d15 	stw	r7,52(sp)
  c02080:	d8800a15 	stw	r2,40(sp)
  c02084:	0c02ec00 	call	c02ec0 <__pack_f>
  c02088:	dfc01017 	ldw	ra,64(sp)
  c0208c:	dc400f17 	ldw	r17,60(sp)
  c02090:	dc000e17 	ldw	r16,56(sp)
  c02094:	dec01104 	addi	sp,sp,68
  c02098:	f800283a 	ret
  c0209c:	1804d07a 	srli	r2,r3,1
  c020a0:	10e00034 	orhi	r3,r2,32768
  c020a4:	003fdf06 	br	c02024 <__mulsf3+0x12c>
  c020a8:	3880200c 	andi	r2,r7,128
  c020ac:	103ff11e 	bne	r2,zero,c02074 <__mulsf3+0x17c>
  c020b0:	183ff026 	beq	r3,zero,c02074 <__mulsf3+0x17c>
  c020b4:	3907883a 	add	r3,r7,r4
  c020b8:	00bfe004 	movi	r2,-128
  c020bc:	188e703a 	and	r7,r3,r2
  c020c0:	003fec06 	br	c02074 <__mulsf3+0x17c>
  c020c4:	00800084 	movi	r2,2
  c020c8:	20bfa41e 	bne	r4,r2,c01f5c <__mulsf3+0x64>
  c020cc:	01003074 	movhi	r4,193
  c020d0:	2101af04 	addi	r4,r4,1724
  c020d4:	003fb306 	br	c01fa4 <__mulsf3+0xac>

00c020d8 <__divsf3>:
  c020d8:	defff304 	addi	sp,sp,-52
  c020dc:	dc400b15 	stw	r17,44(sp)
  c020e0:	dc400204 	addi	r17,sp,8
  c020e4:	dc000a15 	stw	r16,40(sp)
  c020e8:	d9000015 	stw	r4,0(sp)
  c020ec:	d9400115 	stw	r5,4(sp)
  c020f0:	d809883a 	mov	r4,sp
  c020f4:	880b883a 	mov	r5,r17
  c020f8:	dc000604 	addi	r16,sp,24
  c020fc:	dfc00c15 	stw	ra,48(sp)
  c02100:	0c030200 	call	c03020 <__unpack_f>
  c02104:	d9000104 	addi	r4,sp,4
  c02108:	800b883a 	mov	r5,r16
  c0210c:	0c030200 	call	c03020 <__unpack_f>
  c02110:	d9000217 	ldw	r4,8(sp)
  c02114:	00800044 	movi	r2,1
  c02118:	01800104 	movi	r6,4
  c0211c:	11000a2e 	bgeu	r2,r4,c02148 <__divsf3+0x70>
  c02120:	d9400617 	ldw	r5,24(sp)
  c02124:	1140432e 	bgeu	r2,r5,c02234 <__divsf3+0x15c>
  c02128:	d8800317 	ldw	r2,12(sp)
  c0212c:	d8c00717 	ldw	r3,28(sp)
  c02130:	10c4f03a 	xor	r2,r2,r3
  c02134:	d8800315 	stw	r2,12(sp)
  c02138:	21800226 	beq	r4,r6,c02144 <__divsf3+0x6c>
  c0213c:	00800084 	movi	r2,2
  c02140:	2080101e 	bne	r4,r2,c02184 <__divsf3+0xac>
  c02144:	29000726 	beq	r5,r4,c02164 <__divsf3+0x8c>
  c02148:	8809883a 	mov	r4,r17
  c0214c:	0c02ec00 	call	c02ec0 <__pack_f>
  c02150:	dfc00c17 	ldw	ra,48(sp)
  c02154:	dc400b17 	ldw	r17,44(sp)
  c02158:	dc000a17 	ldw	r16,40(sp)
  c0215c:	dec00d04 	addi	sp,sp,52
  c02160:	f800283a 	ret
  c02164:	01003074 	movhi	r4,193
  c02168:	2101af04 	addi	r4,r4,1724
  c0216c:	0c02ec00 	call	c02ec0 <__pack_f>
  c02170:	dfc00c17 	ldw	ra,48(sp)
  c02174:	dc400b17 	ldw	r17,44(sp)
  c02178:	dc000a17 	ldw	r16,40(sp)
  c0217c:	dec00d04 	addi	sp,sp,52
  c02180:	f800283a 	ret
  c02184:	29802d26 	beq	r5,r6,c0223c <__divsf3+0x164>
  c02188:	28801a26 	beq	r5,r2,c021f4 <__divsf3+0x11c>
  c0218c:	d8c00417 	ldw	r3,16(sp)
  c02190:	d8800817 	ldw	r2,32(sp)
  c02194:	d9000517 	ldw	r4,20(sp)
  c02198:	d9800917 	ldw	r6,36(sp)
  c0219c:	1885c83a 	sub	r2,r3,r2
  c021a0:	d8800415 	stw	r2,16(sp)
  c021a4:	2180032e 	bgeu	r4,r6,c021b4 <__divsf3+0xdc>
  c021a8:	10bfffc4 	addi	r2,r2,-1
  c021ac:	d8800415 	stw	r2,16(sp)
  c021b0:	2109883a 	add	r4,r4,r4
  c021b4:	01500034 	movhi	r5,16384
  c021b8:	0007883a 	mov	r3,zero
  c021bc:	0005883a 	mov	r2,zero
  c021c0:	01c007c4 	movi	r7,31
  c021c4:	10800044 	addi	r2,r2,1
  c021c8:	21800236 	bltu	r4,r6,c021d4 <__divsf3+0xfc>
  c021cc:	1946b03a 	or	r3,r3,r5
  c021d0:	2189c83a 	sub	r4,r4,r6
  c021d4:	280ad07a 	srli	r5,r5,1
  c021d8:	2109883a 	add	r4,r4,r4
  c021dc:	11fff91e 	bne	r2,r7,c021c4 <__divsf3+0xec>
  c021e0:	19401fcc 	andi	r5,r3,127
  c021e4:	00801004 	movi	r2,64
  c021e8:	28800a26 	beq	r5,r2,c02214 <__divsf3+0x13c>
  c021ec:	d8c00515 	stw	r3,20(sp)
  c021f0:	003fd506 	br	c02148 <__divsf3+0x70>
  c021f4:	8809883a 	mov	r4,r17
  c021f8:	d9800215 	stw	r6,8(sp)
  c021fc:	0c02ec00 	call	c02ec0 <__pack_f>
  c02200:	dfc00c17 	ldw	ra,48(sp)
  c02204:	dc400b17 	ldw	r17,44(sp)
  c02208:	dc000a17 	ldw	r16,40(sp)
  c0220c:	dec00d04 	addi	sp,sp,52
  c02210:	f800283a 	ret
  c02214:	1880200c 	andi	r2,r3,128
  c02218:	103ff41e 	bne	r2,zero,c021ec <__divsf3+0x114>
  c0221c:	203ff326 	beq	r4,zero,c021ec <__divsf3+0x114>
  c02220:	1947883a 	add	r3,r3,r5
  c02224:	00bfe004 	movi	r2,-128
  c02228:	1886703a 	and	r3,r3,r2
  c0222c:	d8c00515 	stw	r3,20(sp)
  c02230:	003fc506 	br	c02148 <__divsf3+0x70>
  c02234:	8009883a 	mov	r4,r16
  c02238:	003fc406 	br	c0214c <__divsf3+0x74>
  c0223c:	8809883a 	mov	r4,r17
  c02240:	d8000515 	stw	zero,20(sp)
  c02244:	d8000415 	stw	zero,16(sp)
  c02248:	003fc006 	br	c0214c <__divsf3+0x74>

00c0224c <__eqsf2>:
  c0224c:	defff304 	addi	sp,sp,-52
  c02250:	dc400b15 	stw	r17,44(sp)
  c02254:	dc400204 	addi	r17,sp,8
  c02258:	dc000a15 	stw	r16,40(sp)
  c0225c:	d9000015 	stw	r4,0(sp)
  c02260:	d9400115 	stw	r5,4(sp)
  c02264:	d809883a 	mov	r4,sp
  c02268:	880b883a 	mov	r5,r17
  c0226c:	dc000604 	addi	r16,sp,24
  c02270:	dfc00c15 	stw	ra,48(sp)
  c02274:	0c030200 	call	c03020 <__unpack_f>
  c02278:	d9000104 	addi	r4,sp,4
  c0227c:	800b883a 	mov	r5,r16
  c02280:	0c030200 	call	c03020 <__unpack_f>
  c02284:	d8800217 	ldw	r2,8(sp)
  c02288:	00c00044 	movi	r3,1
  c0228c:	180d883a 	mov	r6,r3
  c02290:	1880062e 	bgeu	r3,r2,c022ac <__eqsf2+0x60>
  c02294:	d8800617 	ldw	r2,24(sp)
  c02298:	8809883a 	mov	r4,r17
  c0229c:	800b883a 	mov	r5,r16
  c022a0:	1880022e 	bgeu	r3,r2,c022ac <__eqsf2+0x60>
  c022a4:	0c030e80 	call	c030e8 <__fpcmp_parts_f>
  c022a8:	100d883a 	mov	r6,r2
  c022ac:	3005883a 	mov	r2,r6
  c022b0:	dfc00c17 	ldw	ra,48(sp)
  c022b4:	dc400b17 	ldw	r17,44(sp)
  c022b8:	dc000a17 	ldw	r16,40(sp)
  c022bc:	dec00d04 	addi	sp,sp,52
  c022c0:	f800283a 	ret

00c022c4 <__gtsf2>:
  c022c4:	defff304 	addi	sp,sp,-52
  c022c8:	dc400b15 	stw	r17,44(sp)
  c022cc:	dc400204 	addi	r17,sp,8
  c022d0:	dc000a15 	stw	r16,40(sp)
  c022d4:	d9000015 	stw	r4,0(sp)
  c022d8:	d9400115 	stw	r5,4(sp)
  c022dc:	d809883a 	mov	r4,sp
  c022e0:	880b883a 	mov	r5,r17
  c022e4:	dc000604 	addi	r16,sp,24
  c022e8:	dfc00c15 	stw	ra,48(sp)
  c022ec:	0c030200 	call	c03020 <__unpack_f>
  c022f0:	d9000104 	addi	r4,sp,4
  c022f4:	800b883a 	mov	r5,r16
  c022f8:	0c030200 	call	c03020 <__unpack_f>
  c022fc:	d8800217 	ldw	r2,8(sp)
  c02300:	00c00044 	movi	r3,1
  c02304:	01bfffc4 	movi	r6,-1
  c02308:	1880062e 	bgeu	r3,r2,c02324 <__gtsf2+0x60>
  c0230c:	d8800617 	ldw	r2,24(sp)
  c02310:	8809883a 	mov	r4,r17
  c02314:	800b883a 	mov	r5,r16
  c02318:	1880022e 	bgeu	r3,r2,c02324 <__gtsf2+0x60>
  c0231c:	0c030e80 	call	c030e8 <__fpcmp_parts_f>
  c02320:	100d883a 	mov	r6,r2
  c02324:	3005883a 	mov	r2,r6
  c02328:	dfc00c17 	ldw	ra,48(sp)
  c0232c:	dc400b17 	ldw	r17,44(sp)
  c02330:	dc000a17 	ldw	r16,40(sp)
  c02334:	dec00d04 	addi	sp,sp,52
  c02338:	f800283a 	ret

00c0233c <__ltsf2>:
  c0233c:	defff304 	addi	sp,sp,-52
  c02340:	dc400b15 	stw	r17,44(sp)
  c02344:	dc400204 	addi	r17,sp,8
  c02348:	dc000a15 	stw	r16,40(sp)
  c0234c:	d9000015 	stw	r4,0(sp)
  c02350:	d9400115 	stw	r5,4(sp)
  c02354:	d809883a 	mov	r4,sp
  c02358:	880b883a 	mov	r5,r17
  c0235c:	dc000604 	addi	r16,sp,24
  c02360:	dfc00c15 	stw	ra,48(sp)
  c02364:	0c030200 	call	c03020 <__unpack_f>
  c02368:	d9000104 	addi	r4,sp,4
  c0236c:	800b883a 	mov	r5,r16
  c02370:	0c030200 	call	c03020 <__unpack_f>
  c02374:	d8800217 	ldw	r2,8(sp)
  c02378:	00c00044 	movi	r3,1
  c0237c:	180d883a 	mov	r6,r3
  c02380:	1880062e 	bgeu	r3,r2,c0239c <__ltsf2+0x60>
  c02384:	d8800617 	ldw	r2,24(sp)
  c02388:	8809883a 	mov	r4,r17
  c0238c:	800b883a 	mov	r5,r16
  c02390:	1880022e 	bgeu	r3,r2,c0239c <__ltsf2+0x60>
  c02394:	0c030e80 	call	c030e8 <__fpcmp_parts_f>
  c02398:	100d883a 	mov	r6,r2
  c0239c:	3005883a 	mov	r2,r6
  c023a0:	dfc00c17 	ldw	ra,48(sp)
  c023a4:	dc400b17 	ldw	r17,44(sp)
  c023a8:	dc000a17 	ldw	r16,40(sp)
  c023ac:	dec00d04 	addi	sp,sp,52
  c023b0:	f800283a 	ret

00c023b4 <__lesf2>:
  c023b4:	defff304 	addi	sp,sp,-52
  c023b8:	dc400b15 	stw	r17,44(sp)
  c023bc:	dc400204 	addi	r17,sp,8
  c023c0:	dc000a15 	stw	r16,40(sp)
  c023c4:	d9000015 	stw	r4,0(sp)
  c023c8:	d9400115 	stw	r5,4(sp)
  c023cc:	d809883a 	mov	r4,sp
  c023d0:	880b883a 	mov	r5,r17
  c023d4:	dc000604 	addi	r16,sp,24
  c023d8:	dfc00c15 	stw	ra,48(sp)
  c023dc:	0c030200 	call	c03020 <__unpack_f>
  c023e0:	d9000104 	addi	r4,sp,4
  c023e4:	800b883a 	mov	r5,r16
  c023e8:	0c030200 	call	c03020 <__unpack_f>
  c023ec:	d8800217 	ldw	r2,8(sp)
  c023f0:	00c00044 	movi	r3,1
  c023f4:	180d883a 	mov	r6,r3
  c023f8:	1880062e 	bgeu	r3,r2,c02414 <__lesf2+0x60>
  c023fc:	d8800617 	ldw	r2,24(sp)
  c02400:	8809883a 	mov	r4,r17
  c02404:	800b883a 	mov	r5,r16
  c02408:	1880022e 	bgeu	r3,r2,c02414 <__lesf2+0x60>
  c0240c:	0c030e80 	call	c030e8 <__fpcmp_parts_f>
  c02410:	100d883a 	mov	r6,r2
  c02414:	3005883a 	mov	r2,r6
  c02418:	dfc00c17 	ldw	ra,48(sp)
  c0241c:	dc400b17 	ldw	r17,44(sp)
  c02420:	dc000a17 	ldw	r16,40(sp)
  c02424:	dec00d04 	addi	sp,sp,52
  c02428:	f800283a 	ret

00c0242c <__floatsisf>:
  c0242c:	2006d7fa 	srli	r3,r4,31
  c02430:	defffa04 	addi	sp,sp,-24
  c02434:	008000c4 	movi	r2,3
  c02438:	dfc00515 	stw	ra,20(sp)
  c0243c:	dc000415 	stw	r16,16(sp)
  c02440:	d8800015 	stw	r2,0(sp)
  c02444:	d8c00115 	stw	r3,4(sp)
  c02448:	2000081e 	bne	r4,zero,c0246c <__floatsisf+0x40>
  c0244c:	00800084 	movi	r2,2
  c02450:	d8800015 	stw	r2,0(sp)
  c02454:	d809883a 	mov	r4,sp
  c02458:	0c02ec00 	call	c02ec0 <__pack_f>
  c0245c:	dfc00517 	ldw	ra,20(sp)
  c02460:	dc000417 	ldw	r16,16(sp)
  c02464:	dec00604 	addi	sp,sp,24
  c02468:	f800283a 	ret
  c0246c:	00800784 	movi	r2,30
  c02470:	1807003a 	cmpeq	r3,r3,zero
  c02474:	d8800215 	stw	r2,8(sp)
  c02478:	18000e1e 	bne	r3,zero,c024b4 <__floatsisf+0x88>
  c0247c:	00a00034 	movhi	r2,32768
  c02480:	20800e26 	beq	r4,r2,c024bc <__floatsisf+0x90>
  c02484:	0121c83a 	sub	r16,zero,r4
  c02488:	8009883a 	mov	r4,r16
  c0248c:	dc000315 	stw	r16,12(sp)
  c02490:	0c02e400 	call	c02e40 <__clzsi2>
  c02494:	117fffc4 	addi	r5,r2,-1
  c02498:	017fee0e 	bge	zero,r5,c02454 <__floatsisf+0x28>
  c0249c:	d8800217 	ldw	r2,8(sp)
  c024a0:	8146983a 	sll	r3,r16,r5
  c024a4:	1145c83a 	sub	r2,r2,r5
  c024a8:	d8c00315 	stw	r3,12(sp)
  c024ac:	d8800215 	stw	r2,8(sp)
  c024b0:	003fe806 	br	c02454 <__floatsisf+0x28>
  c024b4:	2021883a 	mov	r16,r4
  c024b8:	003ff306 	br	c02488 <__floatsisf+0x5c>
  c024bc:	00b3c034 	movhi	r2,52992
  c024c0:	003fe606 	br	c0245c <__floatsisf+0x30>

00c024c4 <__extendsfdf2>:
  c024c4:	defff904 	addi	sp,sp,-28
  c024c8:	d9000115 	stw	r4,4(sp)
  c024cc:	d9400204 	addi	r5,sp,8
  c024d0:	d9000104 	addi	r4,sp,4
  c024d4:	dfc00615 	stw	ra,24(sp)
  c024d8:	0c030200 	call	c03020 <__unpack_f>
  c024dc:	d9c00517 	ldw	r7,20(sp)
  c024e0:	0011883a 	mov	r8,zero
  c024e4:	400697ba 	slli	r3,r8,30
  c024e8:	3812d0ba 	srli	r9,r7,2
  c024ec:	380497ba 	slli	r2,r7,30
  c024f0:	d9000217 	ldw	r4,8(sp)
  c024f4:	d9400317 	ldw	r5,12(sp)
  c024f8:	d9800417 	ldw	r6,16(sp)
  c024fc:	48c6b03a 	or	r3,r9,r3
  c02500:	100f883a 	mov	r7,r2
  c02504:	d8c00015 	stw	r3,0(sp)
  c02508:	0c02cfc0 	call	c02cfc <__make_dp>
  c0250c:	dfc00617 	ldw	ra,24(sp)
  c02510:	dec00704 	addi	sp,sp,28
  c02514:	f800283a 	ret

00c02518 <_fpadd_parts>:
  c02518:	defff804 	addi	sp,sp,-32
  c0251c:	dcc00315 	stw	r19,12(sp)
  c02520:	2027883a 	mov	r19,r4
  c02524:	21000017 	ldw	r4,0(r4)
  c02528:	00c00044 	movi	r3,1
  c0252c:	dd400515 	stw	r21,20(sp)
  c02530:	dd000415 	stw	r20,16(sp)
  c02534:	ddc00715 	stw	r23,28(sp)
  c02538:	dd800615 	stw	r22,24(sp)
  c0253c:	dc800215 	stw	r18,8(sp)
  c02540:	dc400115 	stw	r17,4(sp)
  c02544:	dc000015 	stw	r16,0(sp)
  c02548:	282b883a 	mov	r21,r5
  c0254c:	3029883a 	mov	r20,r6
  c02550:	1900632e 	bgeu	r3,r4,c026e0 <_fpadd_parts+0x1c8>
  c02554:	28800017 	ldw	r2,0(r5)
  c02558:	1880812e 	bgeu	r3,r2,c02760 <_fpadd_parts+0x248>
  c0255c:	00c00104 	movi	r3,4
  c02560:	20c0dc26 	beq	r4,r3,c028d4 <_fpadd_parts+0x3bc>
  c02564:	10c07e26 	beq	r2,r3,c02760 <_fpadd_parts+0x248>
  c02568:	00c00084 	movi	r3,2
  c0256c:	10c06726 	beq	r2,r3,c0270c <_fpadd_parts+0x1f4>
  c02570:	20c07b26 	beq	r4,r3,c02760 <_fpadd_parts+0x248>
  c02574:	9dc00217 	ldw	r23,8(r19)
  c02578:	28c00217 	ldw	r3,8(r5)
  c0257c:	9c400317 	ldw	r17,12(r19)
  c02580:	2bc00317 	ldw	r15,12(r5)
  c02584:	b8cdc83a 	sub	r6,r23,r3
  c02588:	9c800417 	ldw	r18,16(r19)
  c0258c:	2c000417 	ldw	r16,16(r5)
  c02590:	3009883a 	mov	r4,r6
  c02594:	30009716 	blt	r6,zero,c027f4 <_fpadd_parts+0x2dc>
  c02598:	00800fc4 	movi	r2,63
  c0259c:	11806b16 	blt	r2,r6,c0274c <_fpadd_parts+0x234>
  c025a0:	0100a40e 	bge	zero,r4,c02834 <_fpadd_parts+0x31c>
  c025a4:	35bff804 	addi	r22,r6,-32
  c025a8:	b000bc16 	blt	r22,zero,c0289c <_fpadd_parts+0x384>
  c025ac:	8596d83a 	srl	r11,r16,r22
  c025b0:	0019883a 	mov	r12,zero
  c025b4:	0013883a 	mov	r9,zero
  c025b8:	01000044 	movi	r4,1
  c025bc:	0015883a 	mov	r10,zero
  c025c0:	b000be16 	blt	r22,zero,c028bc <_fpadd_parts+0x3a4>
  c025c4:	2590983a 	sll	r8,r4,r22
  c025c8:	000f883a 	mov	r7,zero
  c025cc:	00bfffc4 	movi	r2,-1
  c025d0:	3889883a 	add	r4,r7,r2
  c025d4:	408b883a 	add	r5,r8,r2
  c025d8:	21cd803a 	cmpltu	r6,r4,r7
  c025dc:	314b883a 	add	r5,r6,r5
  c025e0:	7904703a 	and	r2,r15,r4
  c025e4:	8146703a 	and	r3,r16,r5
  c025e8:	10c4b03a 	or	r2,r2,r3
  c025ec:	10000226 	beq	r2,zero,c025f8 <_fpadd_parts+0xe0>
  c025f0:	02400044 	movi	r9,1
  c025f4:	0015883a 	mov	r10,zero
  c025f8:	5a5eb03a 	or	r15,r11,r9
  c025fc:	62a0b03a 	or	r16,r12,r10
  c02600:	99400117 	ldw	r5,4(r19)
  c02604:	a8800117 	ldw	r2,4(r21)
  c02608:	28806e26 	beq	r5,r2,c027c4 <_fpadd_parts+0x2ac>
  c0260c:	28006626 	beq	r5,zero,c027a8 <_fpadd_parts+0x290>
  c02610:	7c45c83a 	sub	r2,r15,r17
  c02614:	7889803a 	cmpltu	r4,r15,r2
  c02618:	8487c83a 	sub	r3,r16,r18
  c0261c:	1909c83a 	sub	r4,r3,r4
  c02620:	100d883a 	mov	r6,r2
  c02624:	200f883a 	mov	r7,r4
  c02628:	38007716 	blt	r7,zero,c02808 <_fpadd_parts+0x2f0>
  c0262c:	a5c00215 	stw	r23,8(r20)
  c02630:	a1c00415 	stw	r7,16(r20)
  c02634:	a0000115 	stw	zero,4(r20)
  c02638:	a1800315 	stw	r6,12(r20)
  c0263c:	a2000317 	ldw	r8,12(r20)
  c02640:	a2400417 	ldw	r9,16(r20)
  c02644:	00bfffc4 	movi	r2,-1
  c02648:	408b883a 	add	r5,r8,r2
  c0264c:	2a09803a 	cmpltu	r4,r5,r8
  c02650:	488d883a 	add	r6,r9,r2
  c02654:	01c40034 	movhi	r7,4096
  c02658:	39ffffc4 	addi	r7,r7,-1
  c0265c:	218d883a 	add	r6,r4,r6
  c02660:	39801736 	bltu	r7,r6,c026c0 <_fpadd_parts+0x1a8>
  c02664:	31c06526 	beq	r6,r7,c027fc <_fpadd_parts+0x2e4>
  c02668:	a3000217 	ldw	r12,8(r20)
  c0266c:	4209883a 	add	r4,r8,r8
  c02670:	00bfffc4 	movi	r2,-1
  c02674:	220f803a 	cmpltu	r7,r4,r8
  c02678:	4a4b883a 	add	r5,r9,r9
  c0267c:	394f883a 	add	r7,r7,r5
  c02680:	2095883a 	add	r10,r4,r2
  c02684:	3897883a 	add	r11,r7,r2
  c02688:	510d803a 	cmpltu	r6,r10,r4
  c0268c:	6099883a 	add	r12,r12,r2
  c02690:	32d7883a 	add	r11,r6,r11
  c02694:	00840034 	movhi	r2,4096
  c02698:	10bfffc4 	addi	r2,r2,-1
  c0269c:	2011883a 	mov	r8,r4
  c026a0:	3813883a 	mov	r9,r7
  c026a4:	a1000315 	stw	r4,12(r20)
  c026a8:	a1c00415 	stw	r7,16(r20)
  c026ac:	a3000215 	stw	r12,8(r20)
  c026b0:	12c00336 	bltu	r2,r11,c026c0 <_fpadd_parts+0x1a8>
  c026b4:	58bfed1e 	bne	r11,r2,c0266c <_fpadd_parts+0x154>
  c026b8:	00bfff84 	movi	r2,-2
  c026bc:	12bfeb2e 	bgeu	r2,r10,c0266c <_fpadd_parts+0x154>
  c026c0:	a2800417 	ldw	r10,16(r20)
  c026c4:	008000c4 	movi	r2,3
  c026c8:	00c80034 	movhi	r3,8192
  c026cc:	18ffffc4 	addi	r3,r3,-1
  c026d0:	a2400317 	ldw	r9,12(r20)
  c026d4:	a0800015 	stw	r2,0(r20)
  c026d8:	1a802336 	bltu	r3,r10,c02768 <_fpadd_parts+0x250>
  c026dc:	a027883a 	mov	r19,r20
  c026e0:	9805883a 	mov	r2,r19
  c026e4:	ddc00717 	ldw	r23,28(sp)
  c026e8:	dd800617 	ldw	r22,24(sp)
  c026ec:	dd400517 	ldw	r21,20(sp)
  c026f0:	dd000417 	ldw	r20,16(sp)
  c026f4:	dcc00317 	ldw	r19,12(sp)
  c026f8:	dc800217 	ldw	r18,8(sp)
  c026fc:	dc400117 	ldw	r17,4(sp)
  c02700:	dc000017 	ldw	r16,0(sp)
  c02704:	dec00804 	addi	sp,sp,32
  c02708:	f800283a 	ret
  c0270c:	20fff41e 	bne	r4,r3,c026e0 <_fpadd_parts+0x1c8>
  c02710:	31000015 	stw	r4,0(r6)
  c02714:	98800117 	ldw	r2,4(r19)
  c02718:	30800115 	stw	r2,4(r6)
  c0271c:	98c00217 	ldw	r3,8(r19)
  c02720:	30c00215 	stw	r3,8(r6)
  c02724:	98800317 	ldw	r2,12(r19)
  c02728:	30800315 	stw	r2,12(r6)
  c0272c:	98c00417 	ldw	r3,16(r19)
  c02730:	30c00415 	stw	r3,16(r6)
  c02734:	98800117 	ldw	r2,4(r19)
  c02738:	28c00117 	ldw	r3,4(r5)
  c0273c:	3027883a 	mov	r19,r6
  c02740:	10c4703a 	and	r2,r2,r3
  c02744:	30800115 	stw	r2,4(r6)
  c02748:	003fe506 	br	c026e0 <_fpadd_parts+0x1c8>
  c0274c:	1dc02616 	blt	r3,r23,c027e8 <_fpadd_parts+0x2d0>
  c02750:	0023883a 	mov	r17,zero
  c02754:	182f883a 	mov	r23,r3
  c02758:	0025883a 	mov	r18,zero
  c0275c:	003fa806 	br	c02600 <_fpadd_parts+0xe8>
  c02760:	a827883a 	mov	r19,r21
  c02764:	003fde06 	br	c026e0 <_fpadd_parts+0x1c8>
  c02768:	01800044 	movi	r6,1
  c0276c:	500497fa 	slli	r2,r10,31
  c02770:	4808d07a 	srli	r4,r9,1
  c02774:	518ad83a 	srl	r5,r10,r6
  c02778:	a2000217 	ldw	r8,8(r20)
  c0277c:	1108b03a 	or	r4,r2,r4
  c02780:	0007883a 	mov	r3,zero
  c02784:	4984703a 	and	r2,r9,r6
  c02788:	208cb03a 	or	r6,r4,r2
  c0278c:	28ceb03a 	or	r7,r5,r3
  c02790:	42000044 	addi	r8,r8,1
  c02794:	a027883a 	mov	r19,r20
  c02798:	a1c00415 	stw	r7,16(r20)
  c0279c:	a2000215 	stw	r8,8(r20)
  c027a0:	a1800315 	stw	r6,12(r20)
  c027a4:	003fce06 	br	c026e0 <_fpadd_parts+0x1c8>
  c027a8:	8bc5c83a 	sub	r2,r17,r15
  c027ac:	8889803a 	cmpltu	r4,r17,r2
  c027b0:	9407c83a 	sub	r3,r18,r16
  c027b4:	1909c83a 	sub	r4,r3,r4
  c027b8:	100d883a 	mov	r6,r2
  c027bc:	200f883a 	mov	r7,r4
  c027c0:	003f9906 	br	c02628 <_fpadd_parts+0x110>
  c027c4:	7c45883a 	add	r2,r15,r17
  c027c8:	13c9803a 	cmpltu	r4,r2,r15
  c027cc:	8487883a 	add	r3,r16,r18
  c027d0:	20c9883a 	add	r4,r4,r3
  c027d4:	a1400115 	stw	r5,4(r20)
  c027d8:	a5c00215 	stw	r23,8(r20)
  c027dc:	a0800315 	stw	r2,12(r20)
  c027e0:	a1000415 	stw	r4,16(r20)
  c027e4:	003fb606 	br	c026c0 <_fpadd_parts+0x1a8>
  c027e8:	001f883a 	mov	r15,zero
  c027ec:	0021883a 	mov	r16,zero
  c027f0:	003f8306 	br	c02600 <_fpadd_parts+0xe8>
  c027f4:	018dc83a 	sub	r6,zero,r6
  c027f8:	003f6706 	br	c02598 <_fpadd_parts+0x80>
  c027fc:	00bfff84 	movi	r2,-2
  c02800:	117faf36 	bltu	r2,r5,c026c0 <_fpadd_parts+0x1a8>
  c02804:	003f9806 	br	c02668 <_fpadd_parts+0x150>
  c02808:	0005883a 	mov	r2,zero
  c0280c:	1189c83a 	sub	r4,r2,r6
  c02810:	1105803a 	cmpltu	r2,r2,r4
  c02814:	01cbc83a 	sub	r5,zero,r7
  c02818:	2885c83a 	sub	r2,r5,r2
  c0281c:	01800044 	movi	r6,1
  c02820:	a1800115 	stw	r6,4(r20)
  c02824:	a5c00215 	stw	r23,8(r20)
  c02828:	a1000315 	stw	r4,12(r20)
  c0282c:	a0800415 	stw	r2,16(r20)
  c02830:	003f8206 	br	c0263c <_fpadd_parts+0x124>
  c02834:	203f7226 	beq	r4,zero,c02600 <_fpadd_parts+0xe8>
  c02838:	35bff804 	addi	r22,r6,-32
  c0283c:	b9af883a 	add	r23,r23,r6
  c02840:	b0003116 	blt	r22,zero,c02908 <_fpadd_parts+0x3f0>
  c02844:	959ad83a 	srl	r13,r18,r22
  c02848:	001d883a 	mov	r14,zero
  c0284c:	000f883a 	mov	r7,zero
  c02850:	01000044 	movi	r4,1
  c02854:	0011883a 	mov	r8,zero
  c02858:	b0002516 	blt	r22,zero,c028f0 <_fpadd_parts+0x3d8>
  c0285c:	2594983a 	sll	r10,r4,r22
  c02860:	0013883a 	mov	r9,zero
  c02864:	00bfffc4 	movi	r2,-1
  c02868:	4889883a 	add	r4,r9,r2
  c0286c:	508b883a 	add	r5,r10,r2
  c02870:	224d803a 	cmpltu	r6,r4,r9
  c02874:	314b883a 	add	r5,r6,r5
  c02878:	8904703a 	and	r2,r17,r4
  c0287c:	9146703a 	and	r3,r18,r5
  c02880:	10c4b03a 	or	r2,r2,r3
  c02884:	10000226 	beq	r2,zero,c02890 <_fpadd_parts+0x378>
  c02888:	01c00044 	movi	r7,1
  c0288c:	0011883a 	mov	r8,zero
  c02890:	69e2b03a 	or	r17,r13,r7
  c02894:	7224b03a 	or	r18,r14,r8
  c02898:	003f5906 	br	c02600 <_fpadd_parts+0xe8>
  c0289c:	8407883a 	add	r3,r16,r16
  c028a0:	008007c4 	movi	r2,31
  c028a4:	1185c83a 	sub	r2,r2,r6
  c028a8:	1886983a 	sll	r3,r3,r2
  c028ac:	7996d83a 	srl	r11,r15,r6
  c028b0:	8198d83a 	srl	r12,r16,r6
  c028b4:	1ad6b03a 	or	r11,r3,r11
  c028b8:	003f3e06 	br	c025b4 <_fpadd_parts+0x9c>
  c028bc:	2006d07a 	srli	r3,r4,1
  c028c0:	008007c4 	movi	r2,31
  c028c4:	1185c83a 	sub	r2,r2,r6
  c028c8:	1890d83a 	srl	r8,r3,r2
  c028cc:	218e983a 	sll	r7,r4,r6
  c028d0:	003f3e06 	br	c025cc <_fpadd_parts+0xb4>
  c028d4:	113f821e 	bne	r2,r4,c026e0 <_fpadd_parts+0x1c8>
  c028d8:	28c00117 	ldw	r3,4(r5)
  c028dc:	98800117 	ldw	r2,4(r19)
  c028e0:	10ff7f26 	beq	r2,r3,c026e0 <_fpadd_parts+0x1c8>
  c028e4:	04c03074 	movhi	r19,193
  c028e8:	9cc1b304 	addi	r19,r19,1740
  c028ec:	003f7c06 	br	c026e0 <_fpadd_parts+0x1c8>
  c028f0:	2006d07a 	srli	r3,r4,1
  c028f4:	008007c4 	movi	r2,31
  c028f8:	1185c83a 	sub	r2,r2,r6
  c028fc:	1894d83a 	srl	r10,r3,r2
  c02900:	2192983a 	sll	r9,r4,r6
  c02904:	003fd706 	br	c02864 <_fpadd_parts+0x34c>
  c02908:	9487883a 	add	r3,r18,r18
  c0290c:	008007c4 	movi	r2,31
  c02910:	1185c83a 	sub	r2,r2,r6
  c02914:	1886983a 	sll	r3,r3,r2
  c02918:	899ad83a 	srl	r13,r17,r6
  c0291c:	919cd83a 	srl	r14,r18,r6
  c02920:	1b5ab03a 	or	r13,r3,r13
  c02924:	003fc906 	br	c0284c <_fpadd_parts+0x334>

00c02928 <__subdf3>:
  c02928:	deffea04 	addi	sp,sp,-88
  c0292c:	dcc01415 	stw	r19,80(sp)
  c02930:	dcc00404 	addi	r19,sp,16
  c02934:	2011883a 	mov	r8,r4
  c02938:	2813883a 	mov	r9,r5
  c0293c:	dc401315 	stw	r17,76(sp)
  c02940:	d809883a 	mov	r4,sp
  c02944:	980b883a 	mov	r5,r19
  c02948:	dc400904 	addi	r17,sp,36
  c0294c:	dfc01515 	stw	ra,84(sp)
  c02950:	da400115 	stw	r9,4(sp)
  c02954:	d9c00315 	stw	r7,12(sp)
  c02958:	da000015 	stw	r8,0(sp)
  c0295c:	d9800215 	stw	r6,8(sp)
  c02960:	0c034d00 	call	c034d0 <__unpack_d>
  c02964:	d9000204 	addi	r4,sp,8
  c02968:	880b883a 	mov	r5,r17
  c0296c:	0c034d00 	call	c034d0 <__unpack_d>
  c02970:	d8800a17 	ldw	r2,40(sp)
  c02974:	880b883a 	mov	r5,r17
  c02978:	9809883a 	mov	r4,r19
  c0297c:	d9800e04 	addi	r6,sp,56
  c02980:	1080005c 	xori	r2,r2,1
  c02984:	d8800a15 	stw	r2,40(sp)
  c02988:	0c025180 	call	c02518 <_fpadd_parts>
  c0298c:	1009883a 	mov	r4,r2
  c02990:	0c031bc0 	call	c031bc <__pack_d>
  c02994:	dfc01517 	ldw	ra,84(sp)
  c02998:	dcc01417 	ldw	r19,80(sp)
  c0299c:	dc401317 	ldw	r17,76(sp)
  c029a0:	dec01604 	addi	sp,sp,88
  c029a4:	f800283a 	ret

00c029a8 <__adddf3>:
  c029a8:	deffea04 	addi	sp,sp,-88
  c029ac:	dcc01415 	stw	r19,80(sp)
  c029b0:	dcc00404 	addi	r19,sp,16
  c029b4:	2011883a 	mov	r8,r4
  c029b8:	2813883a 	mov	r9,r5
  c029bc:	dc401315 	stw	r17,76(sp)
  c029c0:	d809883a 	mov	r4,sp
  c029c4:	980b883a 	mov	r5,r19
  c029c8:	dc400904 	addi	r17,sp,36
  c029cc:	dfc01515 	stw	ra,84(sp)
  c029d0:	da400115 	stw	r9,4(sp)
  c029d4:	d9c00315 	stw	r7,12(sp)
  c029d8:	da000015 	stw	r8,0(sp)
  c029dc:	d9800215 	stw	r6,8(sp)
  c029e0:	0c034d00 	call	c034d0 <__unpack_d>
  c029e4:	d9000204 	addi	r4,sp,8
  c029e8:	880b883a 	mov	r5,r17
  c029ec:	0c034d00 	call	c034d0 <__unpack_d>
  c029f0:	d9800e04 	addi	r6,sp,56
  c029f4:	9809883a 	mov	r4,r19
  c029f8:	880b883a 	mov	r5,r17
  c029fc:	0c025180 	call	c02518 <_fpadd_parts>
  c02a00:	1009883a 	mov	r4,r2
  c02a04:	0c031bc0 	call	c031bc <__pack_d>
  c02a08:	dfc01517 	ldw	ra,84(sp)
  c02a0c:	dcc01417 	ldw	r19,80(sp)
  c02a10:	dc401317 	ldw	r17,76(sp)
  c02a14:	dec01604 	addi	sp,sp,88
  c02a18:	f800283a 	ret

00c02a1c <__divdf3>:
  c02a1c:	deffed04 	addi	sp,sp,-76
  c02a20:	dcc01115 	stw	r19,68(sp)
  c02a24:	dcc00404 	addi	r19,sp,16
  c02a28:	2011883a 	mov	r8,r4
  c02a2c:	2813883a 	mov	r9,r5
  c02a30:	dc000e15 	stw	r16,56(sp)
  c02a34:	d809883a 	mov	r4,sp
  c02a38:	980b883a 	mov	r5,r19
  c02a3c:	dc000904 	addi	r16,sp,36
  c02a40:	dfc01215 	stw	ra,72(sp)
  c02a44:	da400115 	stw	r9,4(sp)
  c02a48:	d9c00315 	stw	r7,12(sp)
  c02a4c:	da000015 	stw	r8,0(sp)
  c02a50:	d9800215 	stw	r6,8(sp)
  c02a54:	dc801015 	stw	r18,64(sp)
  c02a58:	dc400f15 	stw	r17,60(sp)
  c02a5c:	0c034d00 	call	c034d0 <__unpack_d>
  c02a60:	d9000204 	addi	r4,sp,8
  c02a64:	800b883a 	mov	r5,r16
  c02a68:	0c034d00 	call	c034d0 <__unpack_d>
  c02a6c:	d9000417 	ldw	r4,16(sp)
  c02a70:	00800044 	movi	r2,1
  c02a74:	11000b2e 	bgeu	r2,r4,c02aa4 <__divdf3+0x88>
  c02a78:	d9400917 	ldw	r5,36(sp)
  c02a7c:	1140762e 	bgeu	r2,r5,c02c58 <__divdf3+0x23c>
  c02a80:	d8800517 	ldw	r2,20(sp)
  c02a84:	d8c00a17 	ldw	r3,40(sp)
  c02a88:	01800104 	movi	r6,4
  c02a8c:	10c4f03a 	xor	r2,r2,r3
  c02a90:	d8800515 	stw	r2,20(sp)
  c02a94:	21800226 	beq	r4,r6,c02aa0 <__divdf3+0x84>
  c02a98:	00800084 	movi	r2,2
  c02a9c:	2080141e 	bne	r4,r2,c02af0 <__divdf3+0xd4>
  c02aa0:	29000926 	beq	r5,r4,c02ac8 <__divdf3+0xac>
  c02aa4:	9809883a 	mov	r4,r19
  c02aa8:	0c031bc0 	call	c031bc <__pack_d>
  c02aac:	dfc01217 	ldw	ra,72(sp)
  c02ab0:	dcc01117 	ldw	r19,68(sp)
  c02ab4:	dc801017 	ldw	r18,64(sp)
  c02ab8:	dc400f17 	ldw	r17,60(sp)
  c02abc:	dc000e17 	ldw	r16,56(sp)
  c02ac0:	dec01304 	addi	sp,sp,76
  c02ac4:	f800283a 	ret
  c02ac8:	01003074 	movhi	r4,193
  c02acc:	2101b304 	addi	r4,r4,1740
  c02ad0:	0c031bc0 	call	c031bc <__pack_d>
  c02ad4:	dfc01217 	ldw	ra,72(sp)
  c02ad8:	dcc01117 	ldw	r19,68(sp)
  c02adc:	dc801017 	ldw	r18,64(sp)
  c02ae0:	dc400f17 	ldw	r17,60(sp)
  c02ae4:	dc000e17 	ldw	r16,56(sp)
  c02ae8:	dec01304 	addi	sp,sp,76
  c02aec:	f800283a 	ret
  c02af0:	29805b26 	beq	r5,r6,c02c60 <__divdf3+0x244>
  c02af4:	28802d26 	beq	r5,r2,c02bac <__divdf3+0x190>
  c02af8:	d8c00617 	ldw	r3,24(sp)
  c02afc:	d8800b17 	ldw	r2,44(sp)
  c02b00:	d9c00817 	ldw	r7,32(sp)
  c02b04:	dc400d17 	ldw	r17,52(sp)
  c02b08:	188bc83a 	sub	r5,r3,r2
  c02b0c:	d9800717 	ldw	r6,28(sp)
  c02b10:	dc000c17 	ldw	r16,48(sp)
  c02b14:	d9400615 	stw	r5,24(sp)
  c02b18:	3c403836 	bltu	r7,r17,c02bfc <__divdf3+0x1e0>
  c02b1c:	89c03626 	beq	r17,r7,c02bf8 <__divdf3+0x1dc>
  c02b20:	0015883a 	mov	r10,zero
  c02b24:	001d883a 	mov	r14,zero
  c02b28:	02c40034 	movhi	r11,4096
  c02b2c:	001f883a 	mov	r15,zero
  c02b30:	003f883a 	mov	ra,zero
  c02b34:	04800f44 	movi	r18,61
  c02b38:	00000f06 	br	c02b78 <__divdf3+0x15c>
  c02b3c:	601d883a 	mov	r14,r12
  c02b40:	681f883a 	mov	r15,r13
  c02b44:	400d883a 	mov	r6,r8
  c02b48:	100f883a 	mov	r7,r2
  c02b4c:	3191883a 	add	r8,r6,r6
  c02b50:	5808d07a 	srli	r4,r11,1
  c02b54:	4185803a 	cmpltu	r2,r8,r6
  c02b58:	39d3883a 	add	r9,r7,r7
  c02b5c:	28c6b03a 	or	r3,r5,r3
  c02b60:	1245883a 	add	r2,r2,r9
  c02b64:	1815883a 	mov	r10,r3
  c02b68:	2017883a 	mov	r11,r4
  c02b6c:	400d883a 	mov	r6,r8
  c02b70:	100f883a 	mov	r7,r2
  c02b74:	fc801726 	beq	ra,r18,c02bd4 <__divdf3+0x1b8>
  c02b78:	580a97fa 	slli	r5,r11,31
  c02b7c:	5006d07a 	srli	r3,r10,1
  c02b80:	ffc00044 	addi	ra,ra,1
  c02b84:	3c7ff136 	bltu	r7,r17,c02b4c <__divdf3+0x130>
  c02b88:	3411c83a 	sub	r8,r6,r16
  c02b8c:	3205803a 	cmpltu	r2,r6,r8
  c02b90:	3c53c83a 	sub	r9,r7,r17
  c02b94:	7298b03a 	or	r12,r14,r10
  c02b98:	7adab03a 	or	r13,r15,r11
  c02b9c:	4885c83a 	sub	r2,r9,r2
  c02ba0:	89ffe61e 	bne	r17,r7,c02b3c <__divdf3+0x120>
  c02ba4:	343fe936 	bltu	r6,r16,c02b4c <__divdf3+0x130>
  c02ba8:	003fe406 	br	c02b3c <__divdf3+0x120>
  c02bac:	9809883a 	mov	r4,r19
  c02bb0:	d9800415 	stw	r6,16(sp)
  c02bb4:	0c031bc0 	call	c031bc <__pack_d>
  c02bb8:	dfc01217 	ldw	ra,72(sp)
  c02bbc:	dcc01117 	ldw	r19,68(sp)
  c02bc0:	dc801017 	ldw	r18,64(sp)
  c02bc4:	dc400f17 	ldw	r17,60(sp)
  c02bc8:	dc000e17 	ldw	r16,56(sp)
  c02bcc:	dec01304 	addi	sp,sp,76
  c02bd0:	f800283a 	ret
  c02bd4:	00803fc4 	movi	r2,255
  c02bd8:	7090703a 	and	r8,r14,r2
  c02bdc:	00802004 	movi	r2,128
  c02be0:	0007883a 	mov	r3,zero
  c02be4:	0013883a 	mov	r9,zero
  c02be8:	40800d26 	beq	r8,r2,c02c20 <__divdf3+0x204>
  c02bec:	dbc00815 	stw	r15,32(sp)
  c02bf0:	db800715 	stw	r14,28(sp)
  c02bf4:	003fab06 	br	c02aa4 <__divdf3+0x88>
  c02bf8:	343fc92e 	bgeu	r6,r16,c02b20 <__divdf3+0x104>
  c02bfc:	3185883a 	add	r2,r6,r6
  c02c00:	1189803a 	cmpltu	r4,r2,r6
  c02c04:	39c7883a 	add	r3,r7,r7
  c02c08:	20c9883a 	add	r4,r4,r3
  c02c0c:	297fffc4 	addi	r5,r5,-1
  c02c10:	100d883a 	mov	r6,r2
  c02c14:	200f883a 	mov	r7,r4
  c02c18:	d9400615 	stw	r5,24(sp)
  c02c1c:	003fc006 	br	c02b20 <__divdf3+0x104>
  c02c20:	483ff21e 	bne	r9,zero,c02bec <__divdf3+0x1d0>
  c02c24:	01004004 	movi	r4,256
  c02c28:	7104703a 	and	r2,r14,r4
  c02c2c:	10c4b03a 	or	r2,r2,r3
  c02c30:	103fee1e 	bne	r2,zero,c02bec <__divdf3+0x1d0>
  c02c34:	31c4b03a 	or	r2,r6,r7
  c02c38:	103fec26 	beq	r2,zero,c02bec <__divdf3+0x1d0>
  c02c3c:	7205883a 	add	r2,r14,r8
  c02c40:	1391803a 	cmpltu	r8,r2,r14
  c02c44:	43d1883a 	add	r8,r8,r15
  c02c48:	013fc004 	movi	r4,-256
  c02c4c:	111c703a 	and	r14,r2,r4
  c02c50:	401f883a 	mov	r15,r8
  c02c54:	003fe506 	br	c02bec <__divdf3+0x1d0>
  c02c58:	8009883a 	mov	r4,r16
  c02c5c:	003f9206 	br	c02aa8 <__divdf3+0x8c>
  c02c60:	9809883a 	mov	r4,r19
  c02c64:	d8000715 	stw	zero,28(sp)
  c02c68:	d8000815 	stw	zero,32(sp)
  c02c6c:	d8000615 	stw	zero,24(sp)
  c02c70:	003f8d06 	br	c02aa8 <__divdf3+0x8c>

00c02c74 <__nedf2>:
  c02c74:	deffef04 	addi	sp,sp,-68
  c02c78:	dc400f15 	stw	r17,60(sp)
  c02c7c:	dc400404 	addi	r17,sp,16
  c02c80:	2005883a 	mov	r2,r4
  c02c84:	2807883a 	mov	r3,r5
  c02c88:	dc000e15 	stw	r16,56(sp)
  c02c8c:	d809883a 	mov	r4,sp
  c02c90:	880b883a 	mov	r5,r17
  c02c94:	dc000904 	addi	r16,sp,36
  c02c98:	d8c00115 	stw	r3,4(sp)
  c02c9c:	d8800015 	stw	r2,0(sp)
  c02ca0:	d9800215 	stw	r6,8(sp)
  c02ca4:	dfc01015 	stw	ra,64(sp)
  c02ca8:	d9c00315 	stw	r7,12(sp)
  c02cac:	0c034d00 	call	c034d0 <__unpack_d>
  c02cb0:	d9000204 	addi	r4,sp,8
  c02cb4:	800b883a 	mov	r5,r16
  c02cb8:	0c034d00 	call	c034d0 <__unpack_d>
  c02cbc:	d8800417 	ldw	r2,16(sp)
  c02cc0:	00c00044 	movi	r3,1
  c02cc4:	180d883a 	mov	r6,r3
  c02cc8:	1880062e 	bgeu	r3,r2,c02ce4 <__nedf2+0x70>
  c02ccc:	d8800917 	ldw	r2,36(sp)
  c02cd0:	8809883a 	mov	r4,r17
  c02cd4:	800b883a 	mov	r5,r16
  c02cd8:	1880022e 	bgeu	r3,r2,c02ce4 <__nedf2+0x70>
  c02cdc:	0c036080 	call	c03608 <__fpcmp_parts_d>
  c02ce0:	100d883a 	mov	r6,r2
  c02ce4:	3005883a 	mov	r2,r6
  c02ce8:	dfc01017 	ldw	ra,64(sp)
  c02cec:	dc400f17 	ldw	r17,60(sp)
  c02cf0:	dc000e17 	ldw	r16,56(sp)
  c02cf4:	dec01104 	addi	sp,sp,68
  c02cf8:	f800283a 	ret

00c02cfc <__make_dp>:
  c02cfc:	defff904 	addi	sp,sp,-28
  c02d00:	d8c00717 	ldw	r3,28(sp)
  c02d04:	d9000015 	stw	r4,0(sp)
  c02d08:	d809883a 	mov	r4,sp
  c02d0c:	dfc00515 	stw	ra,20(sp)
  c02d10:	d9c00615 	stw	r7,24(sp)
  c02d14:	d9400115 	stw	r5,4(sp)
  c02d18:	d9800215 	stw	r6,8(sp)
  c02d1c:	d8c00415 	stw	r3,16(sp)
  c02d20:	d9c00315 	stw	r7,12(sp)
  c02d24:	0c031bc0 	call	c031bc <__pack_d>
  c02d28:	dfc00517 	ldw	ra,20(sp)
  c02d2c:	dec00704 	addi	sp,sp,28
  c02d30:	f800283a 	ret

00c02d34 <__truncdfsf2>:
  c02d34:	defff804 	addi	sp,sp,-32
  c02d38:	2005883a 	mov	r2,r4
  c02d3c:	2807883a 	mov	r3,r5
  c02d40:	d809883a 	mov	r4,sp
  c02d44:	d9400204 	addi	r5,sp,8
  c02d48:	d8c00115 	stw	r3,4(sp)
  c02d4c:	d8800015 	stw	r2,0(sp)
  c02d50:	dfc00715 	stw	ra,28(sp)
  c02d54:	0c034d00 	call	c034d0 <__unpack_d>
  c02d58:	d9c00517 	ldw	r7,20(sp)
  c02d5c:	da000617 	ldw	r8,24(sp)
  c02d60:	02d00034 	movhi	r11,16384
  c02d64:	5affffc4 	addi	r11,r11,-1
  c02d68:	3812d7ba 	srli	r9,r7,30
  c02d6c:	401a90ba 	slli	r13,r8,2
  c02d70:	3ac4703a 	and	r2,r7,r11
  c02d74:	0007883a 	mov	r3,zero
  c02d78:	6a52b03a 	or	r9,r13,r9
  c02d7c:	10c4b03a 	or	r2,r2,r3
  c02d80:	d9000217 	ldw	r4,8(sp)
  c02d84:	d9400317 	ldw	r5,12(sp)
  c02d88:	d9800417 	ldw	r6,16(sp)
  c02d8c:	480f883a 	mov	r7,r9
  c02d90:	10000126 	beq	r2,zero,c02d98 <__truncdfsf2+0x64>
  c02d94:	49c00054 	ori	r7,r9,1
  c02d98:	0c031900 	call	c03190 <__make_fp>
  c02d9c:	dfc00717 	ldw	ra,28(sp)
  c02da0:	dec00804 	addi	sp,sp,32
  c02da4:	f800283a 	ret

00c02da8 <__muldi3>:
  c02da8:	2011883a 	mov	r8,r4
  c02dac:	427fffcc 	andi	r9,r8,65535
  c02db0:	4018d43a 	srli	r12,r8,16
  c02db4:	32bfffcc 	andi	r10,r6,65535
  c02db8:	3016d43a 	srli	r11,r6,16
  c02dbc:	4a85383a 	mul	r2,r9,r10
  c02dc0:	6295383a 	mul	r10,r12,r10
  c02dc4:	4ad3383a 	mul	r9,r9,r11
  c02dc8:	113fffcc 	andi	r4,r2,65535
  c02dcc:	1004d43a 	srli	r2,r2,16
  c02dd0:	4a93883a 	add	r9,r9,r10
  c02dd4:	3807883a 	mov	r3,r7
  c02dd8:	1245883a 	add	r2,r2,r9
  c02ddc:	280f883a 	mov	r7,r5
  c02de0:	180b883a 	mov	r5,r3
  c02de4:	1006943a 	slli	r3,r2,16
  c02de8:	defffd04 	addi	sp,sp,-12
  c02dec:	dc800215 	stw	r18,8(sp)
  c02df0:	1907883a 	add	r3,r3,r4
  c02df4:	dc400115 	stw	r17,4(sp)
  c02df8:	dc000015 	stw	r16,0(sp)
  c02dfc:	4165383a 	mul	r18,r8,r5
  c02e00:	31e3383a 	mul	r17,r6,r7
  c02e04:	1012d43a 	srli	r9,r2,16
  c02e08:	62d9383a 	mul	r12,r12,r11
  c02e0c:	181f883a 	mov	r15,r3
  c02e10:	1280022e 	bgeu	r2,r10,c02e1c <__muldi3+0x74>
  c02e14:	00800074 	movhi	r2,1
  c02e18:	6099883a 	add	r12,r12,r2
  c02e1c:	624d883a 	add	r6,r12,r9
  c02e20:	9187883a 	add	r3,r18,r6
  c02e24:	88c7883a 	add	r3,r17,r3
  c02e28:	7805883a 	mov	r2,r15
  c02e2c:	dc800217 	ldw	r18,8(sp)
  c02e30:	dc400117 	ldw	r17,4(sp)
  c02e34:	dc000017 	ldw	r16,0(sp)
  c02e38:	dec00304 	addi	sp,sp,12
  c02e3c:	f800283a 	ret

00c02e40 <__clzsi2>:
  c02e40:	00bfffd4 	movui	r2,65535
  c02e44:	11000e36 	bltu	r2,r4,c02e80 <__clzsi2+0x40>
  c02e48:	00803fc4 	movi	r2,255
  c02e4c:	01400204 	movi	r5,8
  c02e50:	0007883a 	mov	r3,zero
  c02e54:	11001036 	bltu	r2,r4,c02e98 <__clzsi2+0x58>
  c02e58:	000b883a 	mov	r5,zero
  c02e5c:	20c6d83a 	srl	r3,r4,r3
  c02e60:	00803074 	movhi	r2,193
  c02e64:	1081b804 	addi	r2,r2,1760
  c02e68:	1887883a 	add	r3,r3,r2
  c02e6c:	18800003 	ldbu	r2,0(r3)
  c02e70:	00c00804 	movi	r3,32
  c02e74:	2885883a 	add	r2,r5,r2
  c02e78:	1885c83a 	sub	r2,r3,r2
  c02e7c:	f800283a 	ret
  c02e80:	01400404 	movi	r5,16
  c02e84:	00804034 	movhi	r2,256
  c02e88:	10bfffc4 	addi	r2,r2,-1
  c02e8c:	2807883a 	mov	r3,r5
  c02e90:	113ff22e 	bgeu	r2,r4,c02e5c <__clzsi2+0x1c>
  c02e94:	01400604 	movi	r5,24
  c02e98:	2807883a 	mov	r3,r5
  c02e9c:	20c6d83a 	srl	r3,r4,r3
  c02ea0:	00803074 	movhi	r2,193
  c02ea4:	1081b804 	addi	r2,r2,1760
  c02ea8:	1887883a 	add	r3,r3,r2
  c02eac:	18800003 	ldbu	r2,0(r3)
  c02eb0:	00c00804 	movi	r3,32
  c02eb4:	2885883a 	add	r2,r5,r2
  c02eb8:	1885c83a 	sub	r2,r3,r2
  c02ebc:	f800283a 	ret

00c02ec0 <__pack_f>:
  c02ec0:	20c00017 	ldw	r3,0(r4)
  c02ec4:	01c00044 	movi	r7,1
  c02ec8:	21800317 	ldw	r6,12(r4)
  c02ecc:	21400117 	ldw	r5,4(r4)
  c02ed0:	38c02d2e 	bgeu	r7,r3,c02f88 <__pack_f+0xc8>
  c02ed4:	00800104 	movi	r2,4
  c02ed8:	18802826 	beq	r3,r2,c02f7c <__pack_f+0xbc>
  c02edc:	00800084 	movi	r2,2
  c02ee0:	18800126 	beq	r3,r2,c02ee8 <__pack_f+0x28>
  c02ee4:	3000101e 	bne	r6,zero,c02f28 <__pack_f+0x68>
  c02ee8:	000d883a 	mov	r6,zero
  c02eec:	0007883a 	mov	r3,zero
  c02ef0:	19003fcc 	andi	r4,r3,255
  c02ef4:	200895fa 	slli	r4,r4,23
  c02ef8:	00c02034 	movhi	r3,128
  c02efc:	18ffffc4 	addi	r3,r3,-1
  c02f00:	30c6703a 	and	r3,r6,r3
  c02f04:	10a0002c 	andhi	r2,r2,32768
  c02f08:	10c4b03a 	or	r2,r2,r3
  c02f0c:	280a97fa 	slli	r5,r5,31
  c02f10:	1104b03a 	or	r2,r2,r4
  c02f14:	00e00034 	movhi	r3,32768
  c02f18:	18ffffc4 	addi	r3,r3,-1
  c02f1c:	10c4703a 	and	r2,r2,r3
  c02f20:	1144b03a 	or	r2,r2,r5
  c02f24:	f800283a 	ret
  c02f28:	21000217 	ldw	r4,8(r4)
  c02f2c:	00bfe084 	movi	r2,-126
  c02f30:	20801b16 	blt	r4,r2,c02fa0 <__pack_f+0xe0>
  c02f34:	00801fc4 	movi	r2,127
  c02f38:	11001016 	blt	r2,r4,c02f7c <__pack_f+0xbc>
  c02f3c:	308e703a 	and	r7,r6,r2
  c02f40:	2087883a 	add	r3,r4,r2
  c02f44:	00801004 	movi	r2,64
  c02f48:	38800526 	beq	r7,r2,c02f60 <__pack_f+0xa0>
  c02f4c:	31800fc4 	addi	r6,r6,63
  c02f50:	30000716 	blt	r6,zero,c02f70 <__pack_f+0xb0>
  c02f54:	300490ba 	slli	r2,r6,2
  c02f58:	100cd27a 	srli	r6,r2,9
  c02f5c:	003fe406 	br	c02ef0 <__pack_f+0x30>
  c02f60:	3080200c 	andi	r2,r6,128
  c02f64:	103ffa26 	beq	r2,zero,c02f50 <__pack_f+0x90>
  c02f68:	31cd883a 	add	r6,r6,r7
  c02f6c:	003ff806 	br	c02f50 <__pack_f+0x90>
  c02f70:	300cd07a 	srli	r6,r6,1
  c02f74:	18c00044 	addi	r3,r3,1
  c02f78:	003ff606 	br	c02f54 <__pack_f+0x94>
  c02f7c:	000d883a 	mov	r6,zero
  c02f80:	00ffffc4 	movi	r3,-1
  c02f84:	003fda06 	br	c02ef0 <__pack_f+0x30>
  c02f88:	31800434 	orhi	r6,r6,16
  c02f8c:	00802034 	movhi	r2,128
  c02f90:	10bfffc4 	addi	r2,r2,-1
  c02f94:	308c703a 	and	r6,r6,r2
  c02f98:	00ffffc4 	movi	r3,-1
  c02f9c:	003fd406 	br	c02ef0 <__pack_f+0x30>
  c02fa0:	1109c83a 	sub	r4,r2,r4
  c02fa4:	00800644 	movi	r2,25
  c02fa8:	11001216 	blt	r2,r4,c02ff4 <__pack_f+0x134>
  c02fac:	3904983a 	sll	r2,r7,r4
  c02fb0:	3106d83a 	srl	r3,r6,r4
  c02fb4:	10bfffc4 	addi	r2,r2,-1
  c02fb8:	3084703a 	and	r2,r6,r2
  c02fbc:	1004c03a 	cmpne	r2,r2,zero
  c02fc0:	1886b03a 	or	r3,r3,r2
  c02fc4:	19001fcc 	andi	r4,r3,127
  c02fc8:	00801004 	movi	r2,64
  c02fcc:	20800c26 	beq	r4,r2,c03000 <__pack_f+0x140>
  c02fd0:	18c00fc4 	addi	r3,r3,63
  c02fd4:	00900034 	movhi	r2,16384
  c02fd8:	10bfffc4 	addi	r2,r2,-1
  c02fdc:	180cd1fa 	srli	r6,r3,7
  c02fe0:	10c7803a 	cmpltu	r3,r2,r3
  c02fe4:	00802034 	movhi	r2,128
  c02fe8:	10bfffc4 	addi	r2,r2,-1
  c02fec:	308c703a 	and	r6,r6,r2
  c02ff0:	003fbf06 	br	c02ef0 <__pack_f+0x30>
  c02ff4:	0007883a 	mov	r3,zero
  c02ff8:	000d883a 	mov	r6,zero
  c02ffc:	003ff906 	br	c02fe4 <__pack_f+0x124>
  c03000:	1880200c 	andi	r2,r3,128
  c03004:	10000126 	beq	r2,zero,c0300c <__pack_f+0x14c>
  c03008:	1907883a 	add	r3,r3,r4
  c0300c:	180cd1fa 	srli	r6,r3,7
  c03010:	00900034 	movhi	r2,16384
  c03014:	10bfffc4 	addi	r2,r2,-1
  c03018:	10c7803a 	cmpltu	r3,r2,r3
  c0301c:	003ff106 	br	c02fe4 <__pack_f+0x124>

00c03020 <__unpack_f>:
  c03020:	21800017 	ldw	r6,0(r4)
  c03024:	00c02034 	movhi	r3,128
  c03028:	18ffffc4 	addi	r3,r3,-1
  c0302c:	3004d5fa 	srli	r2,r6,23
  c03030:	3008d7fa 	srli	r4,r6,31
  c03034:	30ce703a 	and	r7,r6,r3
  c03038:	10c03fcc 	andi	r3,r2,255
  c0303c:	29000115 	stw	r4,4(r5)
  c03040:	1800131e 	bne	r3,zero,c03090 <__unpack_f+0x70>
  c03044:	38000f26 	beq	r7,zero,c03084 <__unpack_f+0x64>
  c03048:	380691fa 	slli	r3,r7,7
  c0304c:	01bfe084 	movi	r6,-126
  c03050:	008000c4 	movi	r2,3
  c03054:	01100034 	movhi	r4,16384
  c03058:	213fffc4 	addi	r4,r4,-1
  c0305c:	28800015 	stw	r2,0(r5)
  c03060:	29800215 	stw	r6,8(r5)
  c03064:	20c00536 	bltu	r4,r3,c0307c <__unpack_f+0x5c>
  c03068:	3005883a 	mov	r2,r6
  c0306c:	18c7883a 	add	r3,r3,r3
  c03070:	10bfffc4 	addi	r2,r2,-1
  c03074:	20fffd2e 	bgeu	r4,r3,c0306c <__unpack_f+0x4c>
  c03078:	28800215 	stw	r2,8(r5)
  c0307c:	28c00315 	stw	r3,12(r5)
  c03080:	f800283a 	ret
  c03084:	00800084 	movi	r2,2
  c03088:	28800015 	stw	r2,0(r5)
  c0308c:	f800283a 	ret
  c03090:	00803fc4 	movi	r2,255
  c03094:	18800826 	beq	r3,r2,c030b8 <__unpack_f+0x98>
  c03098:	380491fa 	slli	r2,r7,7
  c0309c:	18ffe044 	addi	r3,r3,-127
  c030a0:	28c00215 	stw	r3,8(r5)
  c030a4:	10900034 	orhi	r2,r2,16384
  c030a8:	28800315 	stw	r2,12(r5)
  c030ac:	008000c4 	movi	r2,3
  c030b0:	28800015 	stw	r2,0(r5)
  c030b4:	f800283a 	ret
  c030b8:	3800031e 	bne	r7,zero,c030c8 <__unpack_f+0xa8>
  c030bc:	00800104 	movi	r2,4
  c030c0:	28800015 	stw	r2,0(r5)
  c030c4:	f800283a 	ret
  c030c8:	3080042c 	andhi	r2,r6,16
  c030cc:	10000426 	beq	r2,zero,c030e0 <__unpack_f+0xc0>
  c030d0:	00800044 	movi	r2,1
  c030d4:	28800015 	stw	r2,0(r5)
  c030d8:	29c00315 	stw	r7,12(r5)
  c030dc:	f800283a 	ret
  c030e0:	28000015 	stw	zero,0(r5)
  c030e4:	003ffc06 	br	c030d8 <__unpack_f+0xb8>

00c030e8 <__fpcmp_parts_f>:
  c030e8:	21800017 	ldw	r6,0(r4)
  c030ec:	00c00044 	movi	r3,1
  c030f0:	19800a2e 	bgeu	r3,r6,c0311c <__fpcmp_parts_f+0x34>
  c030f4:	28800017 	ldw	r2,0(r5)
  c030f8:	1880082e 	bgeu	r3,r2,c0311c <__fpcmp_parts_f+0x34>
  c030fc:	00c00104 	movi	r3,4
  c03100:	30c01e26 	beq	r6,r3,c0317c <__fpcmp_parts_f+0x94>
  c03104:	10c01a26 	beq	r2,r3,c03170 <__fpcmp_parts_f+0x88>
  c03108:	00c00084 	movi	r3,2
  c0310c:	30c00526 	beq	r6,r3,c03124 <__fpcmp_parts_f+0x3c>
  c03110:	10c0071e 	bne	r2,r3,c03130 <__fpcmp_parts_f+0x48>
  c03114:	20800117 	ldw	r2,4(r4)
  c03118:	1000091e 	bne	r2,zero,c03140 <__fpcmp_parts_f+0x58>
  c0311c:	00800044 	movi	r2,1
  c03120:	f800283a 	ret
  c03124:	10c0121e 	bne	r2,r3,c03170 <__fpcmp_parts_f+0x88>
  c03128:	0005883a 	mov	r2,zero
  c0312c:	f800283a 	ret
  c03130:	20c00117 	ldw	r3,4(r4)
  c03134:	28800117 	ldw	r2,4(r5)
  c03138:	18800326 	beq	r3,r2,c03148 <__fpcmp_parts_f+0x60>
  c0313c:	183ff726 	beq	r3,zero,c0311c <__fpcmp_parts_f+0x34>
  c03140:	00bfffc4 	movi	r2,-1
  c03144:	f800283a 	ret
  c03148:	21800217 	ldw	r6,8(r4)
  c0314c:	28800217 	ldw	r2,8(r5)
  c03150:	11bffa16 	blt	r2,r6,c0313c <__fpcmp_parts_f+0x54>
  c03154:	30800416 	blt	r6,r2,c03168 <__fpcmp_parts_f+0x80>
  c03158:	21000317 	ldw	r4,12(r4)
  c0315c:	29400317 	ldw	r5,12(r5)
  c03160:	293ff636 	bltu	r5,r4,c0313c <__fpcmp_parts_f+0x54>
  c03164:	217ff02e 	bgeu	r4,r5,c03128 <__fpcmp_parts_f+0x40>
  c03168:	183fec1e 	bne	r3,zero,c0311c <__fpcmp_parts_f+0x34>
  c0316c:	003ff406 	br	c03140 <__fpcmp_parts_f+0x58>
  c03170:	28800117 	ldw	r2,4(r5)
  c03174:	103fe91e 	bne	r2,zero,c0311c <__fpcmp_parts_f+0x34>
  c03178:	003ff106 	br	c03140 <__fpcmp_parts_f+0x58>
  c0317c:	11bfe51e 	bne	r2,r6,c03114 <__fpcmp_parts_f+0x2c>
  c03180:	28c00117 	ldw	r3,4(r5)
  c03184:	20800117 	ldw	r2,4(r4)
  c03188:	1885c83a 	sub	r2,r3,r2
  c0318c:	f800283a 	ret

00c03190 <__make_fp>:
  c03190:	defffb04 	addi	sp,sp,-20
  c03194:	d9000015 	stw	r4,0(sp)
  c03198:	d809883a 	mov	r4,sp
  c0319c:	dfc00415 	stw	ra,16(sp)
  c031a0:	d9400115 	stw	r5,4(sp)
  c031a4:	d9800215 	stw	r6,8(sp)
  c031a8:	d9c00315 	stw	r7,12(sp)
  c031ac:	0c02ec00 	call	c02ec0 <__pack_f>
  c031b0:	dfc00417 	ldw	ra,16(sp)
  c031b4:	dec00504 	addi	sp,sp,20
  c031b8:	f800283a 	ret

00c031bc <__pack_d>:
  c031bc:	20c00017 	ldw	r3,0(r4)
  c031c0:	defffd04 	addi	sp,sp,-12
  c031c4:	dc000015 	stw	r16,0(sp)
  c031c8:	dc800215 	stw	r18,8(sp)
  c031cc:	dc400115 	stw	r17,4(sp)
  c031d0:	00800044 	movi	r2,1
  c031d4:	22000317 	ldw	r8,12(r4)
  c031d8:	001f883a 	mov	r15,zero
  c031dc:	22400417 	ldw	r9,16(r4)
  c031e0:	24000117 	ldw	r16,4(r4)
  c031e4:	10c0552e 	bgeu	r2,r3,c0333c <__pack_d+0x180>
  c031e8:	00800104 	movi	r2,4
  c031ec:	18804f26 	beq	r3,r2,c0332c <__pack_d+0x170>
  c031f0:	00800084 	movi	r2,2
  c031f4:	18800226 	beq	r3,r2,c03200 <__pack_d+0x44>
  c031f8:	4244b03a 	or	r2,r8,r9
  c031fc:	10001a1e 	bne	r2,zero,c03268 <__pack_d+0xac>
  c03200:	000d883a 	mov	r6,zero
  c03204:	000f883a 	mov	r7,zero
  c03208:	0011883a 	mov	r8,zero
  c0320c:	00800434 	movhi	r2,16
  c03210:	10bfffc4 	addi	r2,r2,-1
  c03214:	301d883a 	mov	r14,r6
  c03218:	3884703a 	and	r2,r7,r2
  c0321c:	400a953a 	slli	r5,r8,20
  c03220:	79bffc2c 	andhi	r6,r15,65520
  c03224:	308cb03a 	or	r6,r6,r2
  c03228:	00e00434 	movhi	r3,32784
  c0322c:	18ffffc4 	addi	r3,r3,-1
  c03230:	800497fa 	slli	r2,r16,31
  c03234:	30c6703a 	and	r3,r6,r3
  c03238:	1946b03a 	or	r3,r3,r5
  c0323c:	01600034 	movhi	r5,32768
  c03240:	297fffc4 	addi	r5,r5,-1
  c03244:	194a703a 	and	r5,r3,r5
  c03248:	288ab03a 	or	r5,r5,r2
  c0324c:	2807883a 	mov	r3,r5
  c03250:	7005883a 	mov	r2,r14
  c03254:	dc800217 	ldw	r18,8(sp)
  c03258:	dc400117 	ldw	r17,4(sp)
  c0325c:	dc000017 	ldw	r16,0(sp)
  c03260:	dec00304 	addi	sp,sp,12
  c03264:	f800283a 	ret
  c03268:	21000217 	ldw	r4,8(r4)
  c0326c:	00bf0084 	movi	r2,-1022
  c03270:	20803f16 	blt	r4,r2,c03370 <__pack_d+0x1b4>
  c03274:	0080ffc4 	movi	r2,1023
  c03278:	11002c16 	blt	r2,r4,c0332c <__pack_d+0x170>
  c0327c:	00803fc4 	movi	r2,255
  c03280:	408c703a 	and	r6,r8,r2
  c03284:	00802004 	movi	r2,128
  c03288:	0007883a 	mov	r3,zero
  c0328c:	000f883a 	mov	r7,zero
  c03290:	2280ffc4 	addi	r10,r4,1023
  c03294:	30801e26 	beq	r6,r2,c03310 <__pack_d+0x154>
  c03298:	00801fc4 	movi	r2,127
  c0329c:	4089883a 	add	r4,r8,r2
  c032a0:	220d803a 	cmpltu	r6,r4,r8
  c032a4:	324d883a 	add	r6,r6,r9
  c032a8:	2011883a 	mov	r8,r4
  c032ac:	3013883a 	mov	r9,r6
  c032b0:	00880034 	movhi	r2,8192
  c032b4:	10bfffc4 	addi	r2,r2,-1
  c032b8:	12400d36 	bltu	r2,r9,c032f0 <__pack_d+0x134>
  c032bc:	4804963a 	slli	r2,r9,24
  c032c0:	400cd23a 	srli	r6,r8,8
  c032c4:	480ed23a 	srli	r7,r9,8
  c032c8:	013fffc4 	movi	r4,-1
  c032cc:	118cb03a 	or	r6,r2,r6
  c032d0:	01400434 	movhi	r5,16
  c032d4:	297fffc4 	addi	r5,r5,-1
  c032d8:	3104703a 	and	r2,r6,r4
  c032dc:	3946703a 	and	r3,r7,r5
  c032e0:	5201ffcc 	andi	r8,r10,2047
  c032e4:	100d883a 	mov	r6,r2
  c032e8:	180f883a 	mov	r7,r3
  c032ec:	003fc706 	br	c0320c <__pack_d+0x50>
  c032f0:	480897fa 	slli	r4,r9,31
  c032f4:	4004d07a 	srli	r2,r8,1
  c032f8:	4806d07a 	srli	r3,r9,1
  c032fc:	52800044 	addi	r10,r10,1
  c03300:	2084b03a 	or	r2,r4,r2
  c03304:	1011883a 	mov	r8,r2
  c03308:	1813883a 	mov	r9,r3
  c0330c:	003feb06 	br	c032bc <__pack_d+0x100>
  c03310:	383fe11e 	bne	r7,zero,c03298 <__pack_d+0xdc>
  c03314:	01004004 	movi	r4,256
  c03318:	4104703a 	and	r2,r8,r4
  c0331c:	10c4b03a 	or	r2,r2,r3
  c03320:	103fe326 	beq	r2,zero,c032b0 <__pack_d+0xf4>
  c03324:	3005883a 	mov	r2,r6
  c03328:	003fdc06 	br	c0329c <__pack_d+0xe0>
  c0332c:	000d883a 	mov	r6,zero
  c03330:	000f883a 	mov	r7,zero
  c03334:	0201ffc4 	movi	r8,2047
  c03338:	003fb406 	br	c0320c <__pack_d+0x50>
  c0333c:	0005883a 	mov	r2,zero
  c03340:	00c00234 	movhi	r3,8
  c03344:	408cb03a 	or	r6,r8,r2
  c03348:	48ceb03a 	or	r7,r9,r3
  c0334c:	013fffc4 	movi	r4,-1
  c03350:	01400434 	movhi	r5,16
  c03354:	297fffc4 	addi	r5,r5,-1
  c03358:	3104703a 	and	r2,r6,r4
  c0335c:	3946703a 	and	r3,r7,r5
  c03360:	100d883a 	mov	r6,r2
  c03364:	180f883a 	mov	r7,r3
  c03368:	0201ffc4 	movi	r8,2047
  c0336c:	003fa706 	br	c0320c <__pack_d+0x50>
  c03370:	1109c83a 	sub	r4,r2,r4
  c03374:	00800e04 	movi	r2,56
  c03378:	11004316 	blt	r2,r4,c03488 <__pack_d+0x2cc>
  c0337c:	21fff804 	addi	r7,r4,-32
  c03380:	38004516 	blt	r7,zero,c03498 <__pack_d+0x2dc>
  c03384:	49d8d83a 	srl	r12,r9,r7
  c03388:	001b883a 	mov	r13,zero
  c0338c:	0023883a 	mov	r17,zero
  c03390:	01400044 	movi	r5,1
  c03394:	0025883a 	mov	r18,zero
  c03398:	38004716 	blt	r7,zero,c034b8 <__pack_d+0x2fc>
  c0339c:	29d6983a 	sll	r11,r5,r7
  c033a0:	0015883a 	mov	r10,zero
  c033a4:	00bfffc4 	movi	r2,-1
  c033a8:	5089883a 	add	r4,r10,r2
  c033ac:	588b883a 	add	r5,r11,r2
  c033b0:	228d803a 	cmpltu	r6,r4,r10
  c033b4:	314b883a 	add	r5,r6,r5
  c033b8:	4104703a 	and	r2,r8,r4
  c033bc:	4946703a 	and	r3,r9,r5
  c033c0:	10c4b03a 	or	r2,r2,r3
  c033c4:	10000226 	beq	r2,zero,c033d0 <__pack_d+0x214>
  c033c8:	04400044 	movi	r17,1
  c033cc:	0025883a 	mov	r18,zero
  c033d0:	00803fc4 	movi	r2,255
  c033d4:	644eb03a 	or	r7,r12,r17
  c033d8:	3892703a 	and	r9,r7,r2
  c033dc:	00802004 	movi	r2,128
  c033e0:	6c90b03a 	or	r8,r13,r18
  c033e4:	0015883a 	mov	r10,zero
  c033e8:	48801626 	beq	r9,r2,c03444 <__pack_d+0x288>
  c033ec:	01001fc4 	movi	r4,127
  c033f0:	3905883a 	add	r2,r7,r4
  c033f4:	11cd803a 	cmpltu	r6,r2,r7
  c033f8:	320d883a 	add	r6,r6,r8
  c033fc:	100f883a 	mov	r7,r2
  c03400:	00840034 	movhi	r2,4096
  c03404:	10bfffc4 	addi	r2,r2,-1
  c03408:	3011883a 	mov	r8,r6
  c0340c:	0007883a 	mov	r3,zero
  c03410:	11801b36 	bltu	r2,r6,c03480 <__pack_d+0x2c4>
  c03414:	4004963a 	slli	r2,r8,24
  c03418:	3808d23a 	srli	r4,r7,8
  c0341c:	400ad23a 	srli	r5,r8,8
  c03420:	1813883a 	mov	r9,r3
  c03424:	1108b03a 	or	r4,r2,r4
  c03428:	00bfffc4 	movi	r2,-1
  c0342c:	00c00434 	movhi	r3,16
  c03430:	18ffffc4 	addi	r3,r3,-1
  c03434:	208c703a 	and	r6,r4,r2
  c03438:	28ce703a 	and	r7,r5,r3
  c0343c:	4a01ffcc 	andi	r8,r9,2047
  c03440:	003f7206 	br	c0320c <__pack_d+0x50>
  c03444:	503fe91e 	bne	r10,zero,c033ec <__pack_d+0x230>
  c03448:	01004004 	movi	r4,256
  c0344c:	3904703a 	and	r2,r7,r4
  c03450:	0007883a 	mov	r3,zero
  c03454:	10c4b03a 	or	r2,r2,r3
  c03458:	10000626 	beq	r2,zero,c03474 <__pack_d+0x2b8>
  c0345c:	3a45883a 	add	r2,r7,r9
  c03460:	11cd803a 	cmpltu	r6,r2,r7
  c03464:	320d883a 	add	r6,r6,r8
  c03468:	100f883a 	mov	r7,r2
  c0346c:	3011883a 	mov	r8,r6
  c03470:	0007883a 	mov	r3,zero
  c03474:	00840034 	movhi	r2,4096
  c03478:	10bfffc4 	addi	r2,r2,-1
  c0347c:	123fe52e 	bgeu	r2,r8,c03414 <__pack_d+0x258>
  c03480:	00c00044 	movi	r3,1
  c03484:	003fe306 	br	c03414 <__pack_d+0x258>
  c03488:	0009883a 	mov	r4,zero
  c0348c:	0013883a 	mov	r9,zero
  c03490:	000b883a 	mov	r5,zero
  c03494:	003fe406 	br	c03428 <__pack_d+0x26c>
  c03498:	4a47883a 	add	r3,r9,r9
  c0349c:	008007c4 	movi	r2,31
  c034a0:	1105c83a 	sub	r2,r2,r4
  c034a4:	1886983a 	sll	r3,r3,r2
  c034a8:	4118d83a 	srl	r12,r8,r4
  c034ac:	491ad83a 	srl	r13,r9,r4
  c034b0:	1b18b03a 	or	r12,r3,r12
  c034b4:	003fb506 	br	c0338c <__pack_d+0x1d0>
  c034b8:	2806d07a 	srli	r3,r5,1
  c034bc:	008007c4 	movi	r2,31
  c034c0:	1105c83a 	sub	r2,r2,r4
  c034c4:	1896d83a 	srl	r11,r3,r2
  c034c8:	2914983a 	sll	r10,r5,r4
  c034cc:	003fb506 	br	c033a4 <__pack_d+0x1e8>

00c034d0 <__unpack_d>:
  c034d0:	20c00117 	ldw	r3,4(r4)
  c034d4:	22400017 	ldw	r9,0(r4)
  c034d8:	00800434 	movhi	r2,16
  c034dc:	10bfffc4 	addi	r2,r2,-1
  c034e0:	1808d53a 	srli	r4,r3,20
  c034e4:	180cd7fa 	srli	r6,r3,31
  c034e8:	1894703a 	and	r10,r3,r2
  c034ec:	2201ffcc 	andi	r8,r4,2047
  c034f0:	281b883a 	mov	r13,r5
  c034f4:	4817883a 	mov	r11,r9
  c034f8:	29800115 	stw	r6,4(r5)
  c034fc:	5019883a 	mov	r12,r10
  c03500:	40001e1e 	bne	r8,zero,c0357c <__unpack_d+0xac>
  c03504:	4a84b03a 	or	r2,r9,r10
  c03508:	10001926 	beq	r2,zero,c03570 <__unpack_d+0xa0>
  c0350c:	4804d63a 	srli	r2,r9,24
  c03510:	500c923a 	slli	r6,r10,8
  c03514:	013f0084 	movi	r4,-1022
  c03518:	00c40034 	movhi	r3,4096
  c0351c:	18ffffc4 	addi	r3,r3,-1
  c03520:	118cb03a 	or	r6,r2,r6
  c03524:	008000c4 	movi	r2,3
  c03528:	480a923a 	slli	r5,r9,8
  c0352c:	68800015 	stw	r2,0(r13)
  c03530:	69000215 	stw	r4,8(r13)
  c03534:	19800b36 	bltu	r3,r6,c03564 <__unpack_d+0x94>
  c03538:	200f883a 	mov	r7,r4
  c0353c:	1811883a 	mov	r8,r3
  c03540:	2945883a 	add	r2,r5,r5
  c03544:	1149803a 	cmpltu	r4,r2,r5
  c03548:	3187883a 	add	r3,r6,r6
  c0354c:	20c9883a 	add	r4,r4,r3
  c03550:	100b883a 	mov	r5,r2
  c03554:	200d883a 	mov	r6,r4
  c03558:	39ffffc4 	addi	r7,r7,-1
  c0355c:	413ff82e 	bgeu	r8,r4,c03540 <__unpack_d+0x70>
  c03560:	69c00215 	stw	r7,8(r13)
  c03564:	69800415 	stw	r6,16(r13)
  c03568:	69400315 	stw	r5,12(r13)
  c0356c:	f800283a 	ret
  c03570:	00800084 	movi	r2,2
  c03574:	28800015 	stw	r2,0(r5)
  c03578:	f800283a 	ret
  c0357c:	0081ffc4 	movi	r2,2047
  c03580:	40800f26 	beq	r8,r2,c035c0 <__unpack_d+0xf0>
  c03584:	480cd63a 	srli	r6,r9,24
  c03588:	5006923a 	slli	r3,r10,8
  c0358c:	4804923a 	slli	r2,r9,8
  c03590:	0009883a 	mov	r4,zero
  c03594:	30c6b03a 	or	r3,r6,r3
  c03598:	01440034 	movhi	r5,4096
  c0359c:	110cb03a 	or	r6,r2,r4
  c035a0:	423f0044 	addi	r8,r8,-1023
  c035a4:	194eb03a 	or	r7,r3,r5
  c035a8:	008000c4 	movi	r2,3
  c035ac:	69c00415 	stw	r7,16(r13)
  c035b0:	6a000215 	stw	r8,8(r13)
  c035b4:	68800015 	stw	r2,0(r13)
  c035b8:	69800315 	stw	r6,12(r13)
  c035bc:	f800283a 	ret
  c035c0:	4a84b03a 	or	r2,r9,r10
  c035c4:	1000031e 	bne	r2,zero,c035d4 <__unpack_d+0x104>
  c035c8:	00800104 	movi	r2,4
  c035cc:	28800015 	stw	r2,0(r5)
  c035d0:	f800283a 	ret
  c035d4:	0009883a 	mov	r4,zero
  c035d8:	01400234 	movhi	r5,8
  c035dc:	4904703a 	and	r2,r9,r4
  c035e0:	5146703a 	and	r3,r10,r5
  c035e4:	10c4b03a 	or	r2,r2,r3
  c035e8:	10000526 	beq	r2,zero,c03600 <__unpack_d+0x130>
  c035ec:	00800044 	movi	r2,1
  c035f0:	68800015 	stw	r2,0(r13)
  c035f4:	6b000415 	stw	r12,16(r13)
  c035f8:	6ac00315 	stw	r11,12(r13)
  c035fc:	f800283a 	ret
  c03600:	68000015 	stw	zero,0(r13)
  c03604:	003ffb06 	br	c035f4 <__unpack_d+0x124>

00c03608 <__fpcmp_parts_d>:
  c03608:	21800017 	ldw	r6,0(r4)
  c0360c:	00c00044 	movi	r3,1
  c03610:	19800a2e 	bgeu	r3,r6,c0363c <__fpcmp_parts_d+0x34>
  c03614:	28800017 	ldw	r2,0(r5)
  c03618:	1880082e 	bgeu	r3,r2,c0363c <__fpcmp_parts_d+0x34>
  c0361c:	00c00104 	movi	r3,4
  c03620:	30c02626 	beq	r6,r3,c036bc <__fpcmp_parts_d+0xb4>
  c03624:	10c02226 	beq	r2,r3,c036b0 <__fpcmp_parts_d+0xa8>
  c03628:	00c00084 	movi	r3,2
  c0362c:	30c00526 	beq	r6,r3,c03644 <__fpcmp_parts_d+0x3c>
  c03630:	10c0071e 	bne	r2,r3,c03650 <__fpcmp_parts_d+0x48>
  c03634:	20800117 	ldw	r2,4(r4)
  c03638:	1000091e 	bne	r2,zero,c03660 <__fpcmp_parts_d+0x58>
  c0363c:	00800044 	movi	r2,1
  c03640:	f800283a 	ret
  c03644:	10c01a1e 	bne	r2,r3,c036b0 <__fpcmp_parts_d+0xa8>
  c03648:	0005883a 	mov	r2,zero
  c0364c:	f800283a 	ret
  c03650:	22000117 	ldw	r8,4(r4)
  c03654:	28800117 	ldw	r2,4(r5)
  c03658:	40800326 	beq	r8,r2,c03668 <__fpcmp_parts_d+0x60>
  c0365c:	403ff726 	beq	r8,zero,c0363c <__fpcmp_parts_d+0x34>
  c03660:	00bfffc4 	movi	r2,-1
  c03664:	f800283a 	ret
  c03668:	20c00217 	ldw	r3,8(r4)
  c0366c:	28800217 	ldw	r2,8(r5)
  c03670:	10fffa16 	blt	r2,r3,c0365c <__fpcmp_parts_d+0x54>
  c03674:	18800916 	blt	r3,r2,c0369c <__fpcmp_parts_d+0x94>
  c03678:	21c00417 	ldw	r7,16(r4)
  c0367c:	28c00417 	ldw	r3,16(r5)
  c03680:	21800317 	ldw	r6,12(r4)
  c03684:	28800317 	ldw	r2,12(r5)
  c03688:	19fff436 	bltu	r3,r7,c0365c <__fpcmp_parts_d+0x54>
  c0368c:	38c00526 	beq	r7,r3,c036a4 <__fpcmp_parts_d+0x9c>
  c03690:	38c00236 	bltu	r7,r3,c0369c <__fpcmp_parts_d+0x94>
  c03694:	19ffec1e 	bne	r3,r7,c03648 <__fpcmp_parts_d+0x40>
  c03698:	30bfeb2e 	bgeu	r6,r2,c03648 <__fpcmp_parts_d+0x40>
  c0369c:	403fe71e 	bne	r8,zero,c0363c <__fpcmp_parts_d+0x34>
  c036a0:	003fef06 	br	c03660 <__fpcmp_parts_d+0x58>
  c036a4:	11bffa2e 	bgeu	r2,r6,c03690 <__fpcmp_parts_d+0x88>
  c036a8:	403fe426 	beq	r8,zero,c0363c <__fpcmp_parts_d+0x34>
  c036ac:	003fec06 	br	c03660 <__fpcmp_parts_d+0x58>
  c036b0:	28800117 	ldw	r2,4(r5)
  c036b4:	103fe11e 	bne	r2,zero,c0363c <__fpcmp_parts_d+0x34>
  c036b8:	003fe906 	br	c03660 <__fpcmp_parts_d+0x58>
  c036bc:	11bfdd1e 	bne	r2,r6,c03634 <__fpcmp_parts_d+0x2c>
  c036c0:	28c00117 	ldw	r3,4(r5)
  c036c4:	20800117 	ldw	r2,4(r4)
  c036c8:	1885c83a 	sub	r2,r3,r2
  c036cc:	f800283a 	ret

00c036d0 <__errno>:
  c036d0:	00c03074 	movhi	r3,193
  c036d4:	18c9a904 	addi	r3,r3,9892
  c036d8:	18800017 	ldw	r2,0(r3)
  c036dc:	f800283a 	ret

00c036e0 <printf>:
  c036e0:	defffb04 	addi	sp,sp,-20
  c036e4:	dfc00115 	stw	ra,4(sp)
  c036e8:	d9400215 	stw	r5,8(sp)
  c036ec:	d9800315 	stw	r6,12(sp)
  c036f0:	d9c00415 	stw	r7,16(sp)
  c036f4:	00803074 	movhi	r2,193
  c036f8:	1089a904 	addi	r2,r2,9892
  c036fc:	10c00017 	ldw	r3,0(r2)
  c03700:	200b883a 	mov	r5,r4
  c03704:	d8800204 	addi	r2,sp,8
  c03708:	19000217 	ldw	r4,8(r3)
  c0370c:	100d883a 	mov	r6,r2
  c03710:	d8800015 	stw	r2,0(sp)
  c03714:	0c058580 	call	c05858 <__vfprintf_internal>
  c03718:	dfc00117 	ldw	ra,4(sp)
  c0371c:	dec00504 	addi	sp,sp,20
  c03720:	f800283a 	ret

00c03724 <_printf_r>:
  c03724:	defffc04 	addi	sp,sp,-16
  c03728:	dfc00115 	stw	ra,4(sp)
  c0372c:	d9800215 	stw	r6,8(sp)
  c03730:	d9c00315 	stw	r7,12(sp)
  c03734:	280d883a 	mov	r6,r5
  c03738:	21400217 	ldw	r5,8(r4)
  c0373c:	d8c00204 	addi	r3,sp,8
  c03740:	180f883a 	mov	r7,r3
  c03744:	d8c00015 	stw	r3,0(sp)
  c03748:	0c039ac0 	call	c039ac <___vfprintf_internal_r>
  c0374c:	dfc00117 	ldw	ra,4(sp)
  c03750:	dec00404 	addi	sp,sp,16
  c03754:	f800283a 	ret

00c03758 <_puts_r>:
  c03758:	defff604 	addi	sp,sp,-40
  c0375c:	dc400715 	stw	r17,28(sp)
  c03760:	2023883a 	mov	r17,r4
  c03764:	2809883a 	mov	r4,r5
  c03768:	dfc00915 	stw	ra,36(sp)
  c0376c:	dcc00815 	stw	r19,32(sp)
  c03770:	2827883a 	mov	r19,r5
  c03774:	0c038e00 	call	c038e0 <strlen>
  c03778:	89400217 	ldw	r5,8(r17)
  c0377c:	00c03074 	movhi	r3,193
  c03780:	18c1a804 	addi	r3,r3,1696
  c03784:	01c00044 	movi	r7,1
  c03788:	12000044 	addi	r8,r2,1
  c0378c:	d8c00515 	stw	r3,20(sp)
  c03790:	d9c00615 	stw	r7,24(sp)
  c03794:	d8c00304 	addi	r3,sp,12
  c03798:	01c00084 	movi	r7,2
  c0379c:	8809883a 	mov	r4,r17
  c037a0:	d80d883a 	mov	r6,sp
  c037a4:	d8c00015 	stw	r3,0(sp)
  c037a8:	dcc00315 	stw	r19,12(sp)
  c037ac:	da000215 	stw	r8,8(sp)
  c037b0:	d9c00115 	stw	r7,4(sp)
  c037b4:	d8800415 	stw	r2,16(sp)
  c037b8:	0c07ab40 	call	c07ab4 <__sfvwrite_r>
  c037bc:	00ffffc4 	movi	r3,-1
  c037c0:	10000626 	beq	r2,zero,c037dc <_puts_r+0x84>
  c037c4:	1805883a 	mov	r2,r3
  c037c8:	dfc00917 	ldw	ra,36(sp)
  c037cc:	dcc00817 	ldw	r19,32(sp)
  c037d0:	dc400717 	ldw	r17,28(sp)
  c037d4:	dec00a04 	addi	sp,sp,40
  c037d8:	f800283a 	ret
  c037dc:	00c00284 	movi	r3,10
  c037e0:	1805883a 	mov	r2,r3
  c037e4:	dfc00917 	ldw	ra,36(sp)
  c037e8:	dcc00817 	ldw	r19,32(sp)
  c037ec:	dc400717 	ldw	r17,28(sp)
  c037f0:	dec00a04 	addi	sp,sp,40
  c037f4:	f800283a 	ret

00c037f8 <puts>:
  c037f8:	00803074 	movhi	r2,193
  c037fc:	1089a904 	addi	r2,r2,9892
  c03800:	200b883a 	mov	r5,r4
  c03804:	11000017 	ldw	r4,0(r2)
  c03808:	0c037581 	jmpi	c03758 <_puts_r>

00c0380c <sprintf>:
  c0380c:	deffe504 	addi	sp,sp,-108
  c03810:	2013883a 	mov	r9,r4
  c03814:	dfc01815 	stw	ra,96(sp)
  c03818:	d9801915 	stw	r6,100(sp)
  c0381c:	d9c01a15 	stw	r7,104(sp)
  c03820:	d8801904 	addi	r2,sp,100
  c03824:	d8800015 	stw	r2,0(sp)
  c03828:	00803074 	movhi	r2,193
  c0382c:	1089a904 	addi	r2,r2,9892
  c03830:	11000017 	ldw	r4,0(r2)
  c03834:	d9c00017 	ldw	r7,0(sp)
  c03838:	00808204 	movi	r2,520
  c0383c:	00e00034 	movhi	r3,32768
  c03840:	18ffffc4 	addi	r3,r3,-1
  c03844:	280d883a 	mov	r6,r5
  c03848:	d880040d 	sth	r2,16(sp)
  c0384c:	d9400104 	addi	r5,sp,4
  c03850:	00bfffc4 	movi	r2,-1
  c03854:	d8c00615 	stw	r3,24(sp)
  c03858:	d8c00315 	stw	r3,12(sp)
  c0385c:	da400515 	stw	r9,20(sp)
  c03860:	d880048d 	sth	r2,18(sp)
  c03864:	da400115 	stw	r9,4(sp)
  c03868:	0c039ac0 	call	c039ac <___vfprintf_internal_r>
  c0386c:	d8c00117 	ldw	r3,4(sp)
  c03870:	18000005 	stb	zero,0(r3)
  c03874:	dfc01817 	ldw	ra,96(sp)
  c03878:	dec01b04 	addi	sp,sp,108
  c0387c:	f800283a 	ret

00c03880 <_sprintf_r>:
  c03880:	deffe604 	addi	sp,sp,-104
  c03884:	2813883a 	mov	r9,r5
  c03888:	dfc01815 	stw	ra,96(sp)
  c0388c:	d9c01915 	stw	r7,100(sp)
  c03890:	d8801904 	addi	r2,sp,100
  c03894:	d8800015 	stw	r2,0(sp)
  c03898:	100f883a 	mov	r7,r2
  c0389c:	00808204 	movi	r2,520
  c038a0:	00e00034 	movhi	r3,32768
  c038a4:	18ffffc4 	addi	r3,r3,-1
  c038a8:	d880040d 	sth	r2,16(sp)
  c038ac:	d9400104 	addi	r5,sp,4
  c038b0:	00bfffc4 	movi	r2,-1
  c038b4:	d8c00615 	stw	r3,24(sp)
  c038b8:	d8c00315 	stw	r3,12(sp)
  c038bc:	da400515 	stw	r9,20(sp)
  c038c0:	d880048d 	sth	r2,18(sp)
  c038c4:	da400115 	stw	r9,4(sp)
  c038c8:	0c039ac0 	call	c039ac <___vfprintf_internal_r>
  c038cc:	d8c00117 	ldw	r3,4(sp)
  c038d0:	18000005 	stb	zero,0(r3)
  c038d4:	dfc01817 	ldw	ra,96(sp)
  c038d8:	dec01a04 	addi	sp,sp,104
  c038dc:	f800283a 	ret

00c038e0 <strlen>:
  c038e0:	208000cc 	andi	r2,r4,3
  c038e4:	2011883a 	mov	r8,r4
  c038e8:	1000161e 	bne	r2,zero,c03944 <strlen+0x64>
  c038ec:	20c00017 	ldw	r3,0(r4)
  c038f0:	017fbff4 	movhi	r5,65279
  c038f4:	297fbfc4 	addi	r5,r5,-257
  c038f8:	01e02074 	movhi	r7,32897
  c038fc:	39e02004 	addi	r7,r7,-32640
  c03900:	1945883a 	add	r2,r3,r5
  c03904:	11c4703a 	and	r2,r2,r7
  c03908:	00c6303a 	nor	r3,zero,r3
  c0390c:	1886703a 	and	r3,r3,r2
  c03910:	18000c1e 	bne	r3,zero,c03944 <strlen+0x64>
  c03914:	280d883a 	mov	r6,r5
  c03918:	380b883a 	mov	r5,r7
  c0391c:	21000104 	addi	r4,r4,4
  c03920:	20800017 	ldw	r2,0(r4)
  c03924:	1187883a 	add	r3,r2,r6
  c03928:	1946703a 	and	r3,r3,r5
  c0392c:	0084303a 	nor	r2,zero,r2
  c03930:	10c4703a 	and	r2,r2,r3
  c03934:	103ff926 	beq	r2,zero,c0391c <strlen+0x3c>
  c03938:	20800007 	ldb	r2,0(r4)
  c0393c:	10000326 	beq	r2,zero,c0394c <strlen+0x6c>
  c03940:	21000044 	addi	r4,r4,1
  c03944:	20800007 	ldb	r2,0(r4)
  c03948:	103ffd1e 	bne	r2,zero,c03940 <strlen+0x60>
  c0394c:	2205c83a 	sub	r2,r4,r8
  c03950:	f800283a 	ret

00c03954 <__sprint_r>:
  c03954:	30800217 	ldw	r2,8(r6)
  c03958:	defffe04 	addi	sp,sp,-8
  c0395c:	dc000015 	stw	r16,0(sp)
  c03960:	dfc00115 	stw	ra,4(sp)
  c03964:	3021883a 	mov	r16,r6
  c03968:	0007883a 	mov	r3,zero
  c0396c:	1000061e 	bne	r2,zero,c03988 <__sprint_r+0x34>
  c03970:	1805883a 	mov	r2,r3
  c03974:	30000115 	stw	zero,4(r6)
  c03978:	dfc00117 	ldw	ra,4(sp)
  c0397c:	dc000017 	ldw	r16,0(sp)
  c03980:	dec00204 	addi	sp,sp,8
  c03984:	f800283a 	ret
  c03988:	0c07ab40 	call	c07ab4 <__sfvwrite_r>
  c0398c:	1007883a 	mov	r3,r2
  c03990:	1805883a 	mov	r2,r3
  c03994:	80000115 	stw	zero,4(r16)
  c03998:	80000215 	stw	zero,8(r16)
  c0399c:	dfc00117 	ldw	ra,4(sp)
  c039a0:	dc000017 	ldw	r16,0(sp)
  c039a4:	dec00204 	addi	sp,sp,8
  c039a8:	f800283a 	ret

00c039ac <___vfprintf_internal_r>:
  c039ac:	defea404 	addi	sp,sp,-1392
  c039b0:	dd815815 	stw	r22,1376(sp)
  c039b4:	dc015215 	stw	r16,1352(sp)
  c039b8:	d9c15115 	stw	r7,1348(sp)
  c039bc:	dfc15b15 	stw	ra,1388(sp)
  c039c0:	df015a15 	stw	fp,1384(sp)
  c039c4:	ddc15915 	stw	r23,1380(sp)
  c039c8:	dd415715 	stw	r21,1372(sp)
  c039cc:	dd015615 	stw	r20,1368(sp)
  c039d0:	dcc15515 	stw	r19,1364(sp)
  c039d4:	dc815415 	stw	r18,1360(sp)
  c039d8:	dc415315 	stw	r17,1356(sp)
  c039dc:	282d883a 	mov	r22,r5
  c039e0:	3021883a 	mov	r16,r6
  c039e4:	d9014f15 	stw	r4,1340(sp)
  c039e8:	0c080d80 	call	c080d8 <_localeconv_r>
  c039ec:	10800017 	ldw	r2,0(r2)
  c039f0:	d9c15117 	ldw	r7,1348(sp)
  c039f4:	d8814915 	stw	r2,1316(sp)
  c039f8:	d8814f17 	ldw	r2,1340(sp)
  c039fc:	10000226 	beq	r2,zero,c03a08 <___vfprintf_internal_r+0x5c>
  c03a00:	10800e17 	ldw	r2,56(r2)
  c03a04:	10020d26 	beq	r2,zero,c0423c <___vfprintf_internal_r+0x890>
  c03a08:	b080030b 	ldhu	r2,12(r22)
  c03a0c:	1080020c 	andi	r2,r2,8
  c03a10:	10020e26 	beq	r2,zero,c0424c <___vfprintf_internal_r+0x8a0>
  c03a14:	b0800417 	ldw	r2,16(r22)
  c03a18:	10020c26 	beq	r2,zero,c0424c <___vfprintf_internal_r+0x8a0>
  c03a1c:	b200030b 	ldhu	r8,12(r22)
  c03a20:	00800284 	movi	r2,10
  c03a24:	40c0068c 	andi	r3,r8,26
  c03a28:	18802f1e 	bne	r3,r2,c03ae8 <___vfprintf_internal_r+0x13c>
  c03a2c:	b080038f 	ldh	r2,14(r22)
  c03a30:	10002d16 	blt	r2,zero,c03ae8 <___vfprintf_internal_r+0x13c>
  c03a34:	b240038b 	ldhu	r9,14(r22)
  c03a38:	b2800717 	ldw	r10,28(r22)
  c03a3c:	b2c00917 	ldw	r11,36(r22)
  c03a40:	d9014f17 	ldw	r4,1340(sp)
  c03a44:	dc402904 	addi	r17,sp,164
  c03a48:	d8804004 	addi	r2,sp,256
  c03a4c:	00c10004 	movi	r3,1024
  c03a50:	423fff4c 	andi	r8,r8,65533
  c03a54:	800d883a 	mov	r6,r16
  c03a58:	880b883a 	mov	r5,r17
  c03a5c:	da002c0d 	sth	r8,176(sp)
  c03a60:	da402c8d 	sth	r9,178(sp)
  c03a64:	da803015 	stw	r10,192(sp)
  c03a68:	dac03215 	stw	r11,200(sp)
  c03a6c:	d8802d15 	stw	r2,180(sp)
  c03a70:	d8c02e15 	stw	r3,184(sp)
  c03a74:	d8802915 	stw	r2,164(sp)
  c03a78:	d8c02b15 	stw	r3,172(sp)
  c03a7c:	d8002f15 	stw	zero,188(sp)
  c03a80:	0c039ac0 	call	c039ac <___vfprintf_internal_r>
  c03a84:	d8814b15 	stw	r2,1324(sp)
  c03a88:	10000416 	blt	r2,zero,c03a9c <___vfprintf_internal_r+0xf0>
  c03a8c:	d9014f17 	ldw	r4,1340(sp)
  c03a90:	880b883a 	mov	r5,r17
  c03a94:	0c071840 	call	c07184 <_fflush_r>
  c03a98:	1002321e 	bne	r2,zero,c04364 <___vfprintf_internal_r+0x9b8>
  c03a9c:	d8802c0b 	ldhu	r2,176(sp)
  c03aa0:	1080100c 	andi	r2,r2,64
  c03aa4:	10000326 	beq	r2,zero,c03ab4 <___vfprintf_internal_r+0x108>
  c03aa8:	b080030b 	ldhu	r2,12(r22)
  c03aac:	10801014 	ori	r2,r2,64
  c03ab0:	b080030d 	sth	r2,12(r22)
  c03ab4:	d8814b17 	ldw	r2,1324(sp)
  c03ab8:	dfc15b17 	ldw	ra,1388(sp)
  c03abc:	df015a17 	ldw	fp,1384(sp)
  c03ac0:	ddc15917 	ldw	r23,1380(sp)
  c03ac4:	dd815817 	ldw	r22,1376(sp)
  c03ac8:	dd415717 	ldw	r21,1372(sp)
  c03acc:	dd015617 	ldw	r20,1368(sp)
  c03ad0:	dcc15517 	ldw	r19,1364(sp)
  c03ad4:	dc815417 	ldw	r18,1360(sp)
  c03ad8:	dc415317 	ldw	r17,1356(sp)
  c03adc:	dc015217 	ldw	r16,1352(sp)
  c03ae0:	dec15c04 	addi	sp,sp,1392
  c03ae4:	f800283a 	ret
  c03ae8:	0005883a 	mov	r2,zero
  c03aec:	0007883a 	mov	r3,zero
  c03af0:	dd401904 	addi	r21,sp,100
  c03af4:	d8814215 	stw	r2,1288(sp)
  c03af8:	802f883a 	mov	r23,r16
  c03afc:	d8c14315 	stw	r3,1292(sp)
  c03b00:	d8014b15 	stw	zero,1324(sp)
  c03b04:	d8014815 	stw	zero,1312(sp)
  c03b08:	d8014415 	stw	zero,1296(sp)
  c03b0c:	d8014715 	stw	zero,1308(sp)
  c03b10:	dd400c15 	stw	r21,48(sp)
  c03b14:	d8000e15 	stw	zero,56(sp)
  c03b18:	d8000d15 	stw	zero,52(sp)
  c03b1c:	b8800007 	ldb	r2,0(r23)
  c03b20:	10001926 	beq	r2,zero,c03b88 <___vfprintf_internal_r+0x1dc>
  c03b24:	00c00944 	movi	r3,37
  c03b28:	10c01726 	beq	r2,r3,c03b88 <___vfprintf_internal_r+0x1dc>
  c03b2c:	b821883a 	mov	r16,r23
  c03b30:	00000106 	br	c03b38 <___vfprintf_internal_r+0x18c>
  c03b34:	10c00326 	beq	r2,r3,c03b44 <___vfprintf_internal_r+0x198>
  c03b38:	84000044 	addi	r16,r16,1
  c03b3c:	80800007 	ldb	r2,0(r16)
  c03b40:	103ffc1e 	bne	r2,zero,c03b34 <___vfprintf_internal_r+0x188>
  c03b44:	85e7c83a 	sub	r19,r16,r23
  c03b48:	98000e26 	beq	r19,zero,c03b84 <___vfprintf_internal_r+0x1d8>
  c03b4c:	dc800e17 	ldw	r18,56(sp)
  c03b50:	dc400d17 	ldw	r17,52(sp)
  c03b54:	008001c4 	movi	r2,7
  c03b58:	94e5883a 	add	r18,r18,r19
  c03b5c:	8c400044 	addi	r17,r17,1
  c03b60:	adc00015 	stw	r23,0(r21)
  c03b64:	dc800e15 	stw	r18,56(sp)
  c03b68:	acc00115 	stw	r19,4(r21)
  c03b6c:	dc400d15 	stw	r17,52(sp)
  c03b70:	14428b16 	blt	r2,r17,c045a0 <___vfprintf_internal_r+0xbf4>
  c03b74:	ad400204 	addi	r21,r21,8
  c03b78:	d9014b17 	ldw	r4,1324(sp)
  c03b7c:	24c9883a 	add	r4,r4,r19
  c03b80:	d9014b15 	stw	r4,1324(sp)
  c03b84:	802f883a 	mov	r23,r16
  c03b88:	b8800007 	ldb	r2,0(r23)
  c03b8c:	10013c26 	beq	r2,zero,c04080 <___vfprintf_internal_r+0x6d4>
  c03b90:	bdc00044 	addi	r23,r23,1
  c03b94:	d8000405 	stb	zero,16(sp)
  c03b98:	b8c00007 	ldb	r3,0(r23)
  c03b9c:	04ffffc4 	movi	r19,-1
  c03ba0:	d8014c15 	stw	zero,1328(sp)
  c03ba4:	d8014a15 	stw	zero,1320(sp)
  c03ba8:	d8c14d15 	stw	r3,1332(sp)
  c03bac:	bdc00044 	addi	r23,r23,1
  c03bb0:	d9414d17 	ldw	r5,1332(sp)
  c03bb4:	00801604 	movi	r2,88
  c03bb8:	28fff804 	addi	r3,r5,-32
  c03bbc:	10c06036 	bltu	r2,r3,c03d40 <___vfprintf_internal_r+0x394>
  c03bc0:	18c5883a 	add	r2,r3,r3
  c03bc4:	1085883a 	add	r2,r2,r2
  c03bc8:	00c03034 	movhi	r3,192
  c03bcc:	18cef704 	addi	r3,r3,15324
  c03bd0:	10c5883a 	add	r2,r2,r3
  c03bd4:	11000017 	ldw	r4,0(r2)
  c03bd8:	2000683a 	jmp	r4
  c03bdc:	00c04b50 	cmplti	r3,zero,301
  c03be0:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03be4:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03be8:	00c04b3c 	xorhi	r3,zero,300
  c03bec:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03bf0:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03bf4:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03bf8:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03bfc:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c00:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c04:	00c0491c 	xori	r3,zero,292
  c03c08:	00c04b2c 	andhi	r3,zero,300
  c03c0c:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c10:	00c04934 	movhi	r3,292
  c03c14:	00c04bc8 	cmpgei	r3,zero,303
  c03c18:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c1c:	00c04bb4 	movhi	r3,302
  c03c20:	00c04b7c 	xorhi	r3,zero,301
  c03c24:	00c04b7c 	xorhi	r3,zero,301
  c03c28:	00c04b7c 	xorhi	r3,zero,301
  c03c2c:	00c04b7c 	xorhi	r3,zero,301
  c03c30:	00c04b7c 	xorhi	r3,zero,301
  c03c34:	00c04b7c 	xorhi	r3,zero,301
  c03c38:	00c04b7c 	xorhi	r3,zero,301
  c03c3c:	00c04b7c 	xorhi	r3,zero,301
  c03c40:	00c04b7c 	xorhi	r3,zero,301
  c03c44:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c48:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c4c:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c50:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c54:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c58:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c5c:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c60:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c64:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c68:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c6c:	00c04398 	cmpnei	r3,zero,270
  c03c70:	00c04a04 	movi	r3,296
  c03c74:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c78:	00c04a04 	movi	r3,296
  c03c7c:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c80:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c84:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c88:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c8c:	00c04b68 	cmpgeui	r3,zero,301
  c03c90:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c94:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03c98:	00c0444c 	andi	r3,zero,273
  c03c9c:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03ca0:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03ca4:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03ca8:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03cac:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03cb0:	00c04498 	cmpnei	r3,zero,274
  c03cb4:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03cb8:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03cbc:	00c04ab8 	rdprs	r3,zero,298
  c03cc0:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03cc4:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03cc8:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03ccc:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03cd0:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03cd4:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03cd8:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03cdc:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03ce0:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03ce4:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03ce8:	00c04a8c 	andi	r3,zero,298
  c03cec:	00c043a4 	muli	r3,zero,270
  c03cf0:	00c04a04 	movi	r3,296
  c03cf4:	00c04a04 	movi	r3,296
  c03cf8:	00c04a04 	movi	r3,296
  c03cfc:	00c049f0 	cmpltui	r3,zero,295
  c03d00:	00c043a4 	muli	r3,zero,270
  c03d04:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03d08:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03d0c:	00c04978 	rdprs	r3,zero,293
  c03d10:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03d14:	00c04948 	cmpgei	r3,zero,293
  c03d18:	00c04458 	cmpnei	r3,zero,273
  c03d1c:	00c049a8 	cmpgeui	r3,zero,294
  c03d20:	00c04994 	movui	r3,294
  c03d24:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03d28:	00c04c24 	muli	r3,zero,304
  c03d2c:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03d30:	00c044a4 	muli	r3,zero,274
  c03d34:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03d38:	00c03d40 	call	c03d4 <__alt_mem_onchip_memory2_3+0xb93d4>
  c03d3c:	00c04b1c 	xori	r3,zero,300
  c03d40:	d9014d17 	ldw	r4,1332(sp)
  c03d44:	2000ce26 	beq	r4,zero,c04080 <___vfprintf_internal_r+0x6d4>
  c03d48:	01400044 	movi	r5,1
  c03d4c:	d9800f04 	addi	r6,sp,60
  c03d50:	d9c14015 	stw	r7,1280(sp)
  c03d54:	d9414515 	stw	r5,1300(sp)
  c03d58:	d9814115 	stw	r6,1284(sp)
  c03d5c:	280f883a 	mov	r7,r5
  c03d60:	d9000f05 	stb	r4,60(sp)
  c03d64:	d8000405 	stb	zero,16(sp)
  c03d68:	d8014615 	stw	zero,1304(sp)
  c03d6c:	d8c14c17 	ldw	r3,1328(sp)
  c03d70:	1880008c 	andi	r2,r3,2
  c03d74:	1005003a 	cmpeq	r2,r2,zero
  c03d78:	d8815015 	stw	r2,1344(sp)
  c03d7c:	1000031e 	bne	r2,zero,c03d8c <___vfprintf_internal_r+0x3e0>
  c03d80:	d9014517 	ldw	r4,1300(sp)
  c03d84:	21000084 	addi	r4,r4,2
  c03d88:	d9014515 	stw	r4,1300(sp)
  c03d8c:	d9414c17 	ldw	r5,1328(sp)
  c03d90:	2940210c 	andi	r5,r5,132
  c03d94:	d9414e15 	stw	r5,1336(sp)
  c03d98:	28002d1e 	bne	r5,zero,c03e50 <___vfprintf_internal_r+0x4a4>
  c03d9c:	d9814a17 	ldw	r6,1320(sp)
  c03da0:	d8814517 	ldw	r2,1300(sp)
  c03da4:	30a1c83a 	sub	r16,r6,r2
  c03da8:	0400290e 	bge	zero,r16,c03e50 <___vfprintf_internal_r+0x4a4>
  c03dac:	00800404 	movi	r2,16
  c03db0:	1404580e 	bge	r2,r16,c04f14 <___vfprintf_internal_r+0x1568>
  c03db4:	dc800e17 	ldw	r18,56(sp)
  c03db8:	dc400d17 	ldw	r17,52(sp)
  c03dbc:	1027883a 	mov	r19,r2
  c03dc0:	07003074 	movhi	fp,193
  c03dc4:	e7021384 	addi	fp,fp,2126
  c03dc8:	050001c4 	movi	r20,7
  c03dcc:	00000306 	br	c03ddc <___vfprintf_internal_r+0x430>
  c03dd0:	843ffc04 	addi	r16,r16,-16
  c03dd4:	ad400204 	addi	r21,r21,8
  c03dd8:	9c00130e 	bge	r19,r16,c03e28 <___vfprintf_internal_r+0x47c>
  c03ddc:	94800404 	addi	r18,r18,16
  c03de0:	8c400044 	addi	r17,r17,1
  c03de4:	af000015 	stw	fp,0(r21)
  c03de8:	acc00115 	stw	r19,4(r21)
  c03dec:	dc800e15 	stw	r18,56(sp)
  c03df0:	dc400d15 	stw	r17,52(sp)
  c03df4:	a47ff60e 	bge	r20,r17,c03dd0 <___vfprintf_internal_r+0x424>
  c03df8:	d9014f17 	ldw	r4,1340(sp)
  c03dfc:	b00b883a 	mov	r5,r22
  c03e00:	d9800c04 	addi	r6,sp,48
  c03e04:	d9c15115 	stw	r7,1348(sp)
  c03e08:	0c039540 	call	c03954 <__sprint_r>
  c03e0c:	d9c15117 	ldw	r7,1348(sp)
  c03e10:	10009e1e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c03e14:	843ffc04 	addi	r16,r16,-16
  c03e18:	dc800e17 	ldw	r18,56(sp)
  c03e1c:	dc400d17 	ldw	r17,52(sp)
  c03e20:	dd401904 	addi	r21,sp,100
  c03e24:	9c3fed16 	blt	r19,r16,c03ddc <___vfprintf_internal_r+0x430>
  c03e28:	9425883a 	add	r18,r18,r16
  c03e2c:	8c400044 	addi	r17,r17,1
  c03e30:	008001c4 	movi	r2,7
  c03e34:	af000015 	stw	fp,0(r21)
  c03e38:	ac000115 	stw	r16,4(r21)
  c03e3c:	dc800e15 	stw	r18,56(sp)
  c03e40:	dc400d15 	stw	r17,52(sp)
  c03e44:	1441f516 	blt	r2,r17,c0461c <___vfprintf_internal_r+0xc70>
  c03e48:	ad400204 	addi	r21,r21,8
  c03e4c:	00000206 	br	c03e58 <___vfprintf_internal_r+0x4ac>
  c03e50:	dc800e17 	ldw	r18,56(sp)
  c03e54:	dc400d17 	ldw	r17,52(sp)
  c03e58:	d8800407 	ldb	r2,16(sp)
  c03e5c:	10000b26 	beq	r2,zero,c03e8c <___vfprintf_internal_r+0x4e0>
  c03e60:	00800044 	movi	r2,1
  c03e64:	94800044 	addi	r18,r18,1
  c03e68:	8c400044 	addi	r17,r17,1
  c03e6c:	a8800115 	stw	r2,4(r21)
  c03e70:	d8c00404 	addi	r3,sp,16
  c03e74:	008001c4 	movi	r2,7
  c03e78:	a8c00015 	stw	r3,0(r21)
  c03e7c:	dc800e15 	stw	r18,56(sp)
  c03e80:	dc400d15 	stw	r17,52(sp)
  c03e84:	1441da16 	blt	r2,r17,c045f0 <___vfprintf_internal_r+0xc44>
  c03e88:	ad400204 	addi	r21,r21,8
  c03e8c:	d9015017 	ldw	r4,1344(sp)
  c03e90:	20000b1e 	bne	r4,zero,c03ec0 <___vfprintf_internal_r+0x514>
  c03e94:	d8800444 	addi	r2,sp,17
  c03e98:	94800084 	addi	r18,r18,2
  c03e9c:	8c400044 	addi	r17,r17,1
  c03ea0:	a8800015 	stw	r2,0(r21)
  c03ea4:	00c00084 	movi	r3,2
  c03ea8:	008001c4 	movi	r2,7
  c03eac:	a8c00115 	stw	r3,4(r21)
  c03eb0:	dc800e15 	stw	r18,56(sp)
  c03eb4:	dc400d15 	stw	r17,52(sp)
  c03eb8:	1441c216 	blt	r2,r17,c045c4 <___vfprintf_internal_r+0xc18>
  c03ebc:	ad400204 	addi	r21,r21,8
  c03ec0:	d9414e17 	ldw	r5,1336(sp)
  c03ec4:	00802004 	movi	r2,128
  c03ec8:	2880b126 	beq	r5,r2,c04190 <___vfprintf_internal_r+0x7e4>
  c03ecc:	d8c14617 	ldw	r3,1304(sp)
  c03ed0:	19e1c83a 	sub	r16,r3,r7
  c03ed4:	0400260e 	bge	zero,r16,c03f70 <___vfprintf_internal_r+0x5c4>
  c03ed8:	00800404 	movi	r2,16
  c03edc:	1403c90e 	bge	r2,r16,c04e04 <___vfprintf_internal_r+0x1458>
  c03ee0:	1027883a 	mov	r19,r2
  c03ee4:	07003074 	movhi	fp,193
  c03ee8:	e7020f84 	addi	fp,fp,2110
  c03eec:	050001c4 	movi	r20,7
  c03ef0:	00000306 	br	c03f00 <___vfprintf_internal_r+0x554>
  c03ef4:	843ffc04 	addi	r16,r16,-16
  c03ef8:	ad400204 	addi	r21,r21,8
  c03efc:	9c00130e 	bge	r19,r16,c03f4c <___vfprintf_internal_r+0x5a0>
  c03f00:	94800404 	addi	r18,r18,16
  c03f04:	8c400044 	addi	r17,r17,1
  c03f08:	af000015 	stw	fp,0(r21)
  c03f0c:	acc00115 	stw	r19,4(r21)
  c03f10:	dc800e15 	stw	r18,56(sp)
  c03f14:	dc400d15 	stw	r17,52(sp)
  c03f18:	a47ff60e 	bge	r20,r17,c03ef4 <___vfprintf_internal_r+0x548>
  c03f1c:	d9014f17 	ldw	r4,1340(sp)
  c03f20:	b00b883a 	mov	r5,r22
  c03f24:	d9800c04 	addi	r6,sp,48
  c03f28:	d9c15115 	stw	r7,1348(sp)
  c03f2c:	0c039540 	call	c03954 <__sprint_r>
  c03f30:	d9c15117 	ldw	r7,1348(sp)
  c03f34:	1000551e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c03f38:	843ffc04 	addi	r16,r16,-16
  c03f3c:	dc800e17 	ldw	r18,56(sp)
  c03f40:	dc400d17 	ldw	r17,52(sp)
  c03f44:	dd401904 	addi	r21,sp,100
  c03f48:	9c3fed16 	blt	r19,r16,c03f00 <___vfprintf_internal_r+0x554>
  c03f4c:	9425883a 	add	r18,r18,r16
  c03f50:	8c400044 	addi	r17,r17,1
  c03f54:	008001c4 	movi	r2,7
  c03f58:	af000015 	stw	fp,0(r21)
  c03f5c:	ac000115 	stw	r16,4(r21)
  c03f60:	dc800e15 	stw	r18,56(sp)
  c03f64:	dc400d15 	stw	r17,52(sp)
  c03f68:	14418216 	blt	r2,r17,c04574 <___vfprintf_internal_r+0xbc8>
  c03f6c:	ad400204 	addi	r21,r21,8
  c03f70:	d9014c17 	ldw	r4,1328(sp)
  c03f74:	2080400c 	andi	r2,r4,256
  c03f78:	10004a1e 	bne	r2,zero,c040a4 <___vfprintf_internal_r+0x6f8>
  c03f7c:	d9414117 	ldw	r5,1284(sp)
  c03f80:	91e5883a 	add	r18,r18,r7
  c03f84:	8c400044 	addi	r17,r17,1
  c03f88:	008001c4 	movi	r2,7
  c03f8c:	a9400015 	stw	r5,0(r21)
  c03f90:	a9c00115 	stw	r7,4(r21)
  c03f94:	dc800e15 	stw	r18,56(sp)
  c03f98:	dc400d15 	stw	r17,52(sp)
  c03f9c:	14416716 	blt	r2,r17,c0453c <___vfprintf_internal_r+0xb90>
  c03fa0:	a8c00204 	addi	r3,r21,8
  c03fa4:	d9814c17 	ldw	r6,1328(sp)
  c03fa8:	3080010c 	andi	r2,r6,4
  c03fac:	10002826 	beq	r2,zero,c04050 <___vfprintf_internal_r+0x6a4>
  c03fb0:	d8814a17 	ldw	r2,1320(sp)
  c03fb4:	d9014517 	ldw	r4,1300(sp)
  c03fb8:	1121c83a 	sub	r16,r2,r4
  c03fbc:	0400240e 	bge	zero,r16,c04050 <___vfprintf_internal_r+0x6a4>
  c03fc0:	00800404 	movi	r2,16
  c03fc4:	14044f0e 	bge	r2,r16,c05104 <___vfprintf_internal_r+0x1758>
  c03fc8:	dc400d17 	ldw	r17,52(sp)
  c03fcc:	1027883a 	mov	r19,r2
  c03fd0:	07003074 	movhi	fp,193
  c03fd4:	e7021384 	addi	fp,fp,2126
  c03fd8:	050001c4 	movi	r20,7
  c03fdc:	00000306 	br	c03fec <___vfprintf_internal_r+0x640>
  c03fe0:	843ffc04 	addi	r16,r16,-16
  c03fe4:	18c00204 	addi	r3,r3,8
  c03fe8:	9c00110e 	bge	r19,r16,c04030 <___vfprintf_internal_r+0x684>
  c03fec:	94800404 	addi	r18,r18,16
  c03ff0:	8c400044 	addi	r17,r17,1
  c03ff4:	1f000015 	stw	fp,0(r3)
  c03ff8:	1cc00115 	stw	r19,4(r3)
  c03ffc:	dc800e15 	stw	r18,56(sp)
  c04000:	dc400d15 	stw	r17,52(sp)
  c04004:	a47ff60e 	bge	r20,r17,c03fe0 <___vfprintf_internal_r+0x634>
  c04008:	d9014f17 	ldw	r4,1340(sp)
  c0400c:	b00b883a 	mov	r5,r22
  c04010:	d9800c04 	addi	r6,sp,48
  c04014:	0c039540 	call	c03954 <__sprint_r>
  c04018:	10001c1e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c0401c:	843ffc04 	addi	r16,r16,-16
  c04020:	dc800e17 	ldw	r18,56(sp)
  c04024:	dc400d17 	ldw	r17,52(sp)
  c04028:	d8c01904 	addi	r3,sp,100
  c0402c:	9c3fef16 	blt	r19,r16,c03fec <___vfprintf_internal_r+0x640>
  c04030:	9425883a 	add	r18,r18,r16
  c04034:	8c400044 	addi	r17,r17,1
  c04038:	008001c4 	movi	r2,7
  c0403c:	1f000015 	stw	fp,0(r3)
  c04040:	1c000115 	stw	r16,4(r3)
  c04044:	dc800e15 	stw	r18,56(sp)
  c04048:	dc400d15 	stw	r17,52(sp)
  c0404c:	1440cb16 	blt	r2,r17,c0437c <___vfprintf_internal_r+0x9d0>
  c04050:	d8814a17 	ldw	r2,1320(sp)
  c04054:	d9414517 	ldw	r5,1300(sp)
  c04058:	1140010e 	bge	r2,r5,c04060 <___vfprintf_internal_r+0x6b4>
  c0405c:	2805883a 	mov	r2,r5
  c04060:	d9814b17 	ldw	r6,1324(sp)
  c04064:	308d883a 	add	r6,r6,r2
  c04068:	d9814b15 	stw	r6,1324(sp)
  c0406c:	90013b1e 	bne	r18,zero,c0455c <___vfprintf_internal_r+0xbb0>
  c04070:	d9c14017 	ldw	r7,1280(sp)
  c04074:	dd401904 	addi	r21,sp,100
  c04078:	d8000d15 	stw	zero,52(sp)
  c0407c:	003ea706 	br	c03b1c <___vfprintf_internal_r+0x170>
  c04080:	d8800e17 	ldw	r2,56(sp)
  c04084:	10053f1e 	bne	r2,zero,c05584 <___vfprintf_internal_r+0x1bd8>
  c04088:	d8000d15 	stw	zero,52(sp)
  c0408c:	b080030b 	ldhu	r2,12(r22)
  c04090:	1080100c 	andi	r2,r2,64
  c04094:	103e8726 	beq	r2,zero,c03ab4 <___vfprintf_internal_r+0x108>
  c04098:	00bfffc4 	movi	r2,-1
  c0409c:	d8814b15 	stw	r2,1324(sp)
  c040a0:	003e8406 	br	c03ab4 <___vfprintf_internal_r+0x108>
  c040a4:	d9814d17 	ldw	r6,1332(sp)
  c040a8:	00801944 	movi	r2,101
  c040ac:	11806e16 	blt	r2,r6,c04268 <___vfprintf_internal_r+0x8bc>
  c040b0:	d9414717 	ldw	r5,1308(sp)
  c040b4:	00c00044 	movi	r3,1
  c040b8:	1943430e 	bge	r3,r5,c04dc8 <___vfprintf_internal_r+0x141c>
  c040bc:	d8814117 	ldw	r2,1284(sp)
  c040c0:	94800044 	addi	r18,r18,1
  c040c4:	8c400044 	addi	r17,r17,1
  c040c8:	a8800015 	stw	r2,0(r21)
  c040cc:	008001c4 	movi	r2,7
  c040d0:	a8c00115 	stw	r3,4(r21)
  c040d4:	dc800e15 	stw	r18,56(sp)
  c040d8:	dc400d15 	stw	r17,52(sp)
  c040dc:	1441ca16 	blt	r2,r17,c04808 <___vfprintf_internal_r+0xe5c>
  c040e0:	a8c00204 	addi	r3,r21,8
  c040e4:	d9014917 	ldw	r4,1316(sp)
  c040e8:	00800044 	movi	r2,1
  c040ec:	94800044 	addi	r18,r18,1
  c040f0:	8c400044 	addi	r17,r17,1
  c040f4:	18800115 	stw	r2,4(r3)
  c040f8:	008001c4 	movi	r2,7
  c040fc:	19000015 	stw	r4,0(r3)
  c04100:	dc800e15 	stw	r18,56(sp)
  c04104:	dc400d15 	stw	r17,52(sp)
  c04108:	1441b616 	blt	r2,r17,c047e4 <___vfprintf_internal_r+0xe38>
  c0410c:	1cc00204 	addi	r19,r3,8
  c04110:	d9014217 	ldw	r4,1288(sp)
  c04114:	d9414317 	ldw	r5,1292(sp)
  c04118:	000d883a 	mov	r6,zero
  c0411c:	000f883a 	mov	r7,zero
  c04120:	0c02c740 	call	c02c74 <__nedf2>
  c04124:	10017426 	beq	r2,zero,c046f8 <___vfprintf_internal_r+0xd4c>
  c04128:	d9414717 	ldw	r5,1308(sp)
  c0412c:	d9814117 	ldw	r6,1284(sp)
  c04130:	8c400044 	addi	r17,r17,1
  c04134:	2c85883a 	add	r2,r5,r18
  c04138:	14bfffc4 	addi	r18,r2,-1
  c0413c:	28bfffc4 	addi	r2,r5,-1
  c04140:	30c00044 	addi	r3,r6,1
  c04144:	98800115 	stw	r2,4(r19)
  c04148:	008001c4 	movi	r2,7
  c0414c:	98c00015 	stw	r3,0(r19)
  c04150:	dc800e15 	stw	r18,56(sp)
  c04154:	dc400d15 	stw	r17,52(sp)
  c04158:	14418e16 	blt	r2,r17,c04794 <___vfprintf_internal_r+0xde8>
  c0415c:	9cc00204 	addi	r19,r19,8
  c04160:	d9414817 	ldw	r5,1312(sp)
  c04164:	d8800804 	addi	r2,sp,32
  c04168:	8c400044 	addi	r17,r17,1
  c0416c:	9165883a 	add	r18,r18,r5
  c04170:	98800015 	stw	r2,0(r19)
  c04174:	008001c4 	movi	r2,7
  c04178:	99400115 	stw	r5,4(r19)
  c0417c:	dc800e15 	stw	r18,56(sp)
  c04180:	dc400d15 	stw	r17,52(sp)
  c04184:	1440ed16 	blt	r2,r17,c0453c <___vfprintf_internal_r+0xb90>
  c04188:	98c00204 	addi	r3,r19,8
  c0418c:	003f8506 	br	c03fa4 <___vfprintf_internal_r+0x5f8>
  c04190:	d9814a17 	ldw	r6,1320(sp)
  c04194:	d8814517 	ldw	r2,1300(sp)
  c04198:	30a1c83a 	sub	r16,r6,r2
  c0419c:	043f4b0e 	bge	zero,r16,c03ecc <___vfprintf_internal_r+0x520>
  c041a0:	00800404 	movi	r2,16
  c041a4:	1404340e 	bge	r2,r16,c05278 <___vfprintf_internal_r+0x18cc>
  c041a8:	1027883a 	mov	r19,r2
  c041ac:	07003074 	movhi	fp,193
  c041b0:	e7020f84 	addi	fp,fp,2110
  c041b4:	050001c4 	movi	r20,7
  c041b8:	00000306 	br	c041c8 <___vfprintf_internal_r+0x81c>
  c041bc:	843ffc04 	addi	r16,r16,-16
  c041c0:	ad400204 	addi	r21,r21,8
  c041c4:	9c00130e 	bge	r19,r16,c04214 <___vfprintf_internal_r+0x868>
  c041c8:	94800404 	addi	r18,r18,16
  c041cc:	8c400044 	addi	r17,r17,1
  c041d0:	af000015 	stw	fp,0(r21)
  c041d4:	acc00115 	stw	r19,4(r21)
  c041d8:	dc800e15 	stw	r18,56(sp)
  c041dc:	dc400d15 	stw	r17,52(sp)
  c041e0:	a47ff60e 	bge	r20,r17,c041bc <___vfprintf_internal_r+0x810>
  c041e4:	d9014f17 	ldw	r4,1340(sp)
  c041e8:	b00b883a 	mov	r5,r22
  c041ec:	d9800c04 	addi	r6,sp,48
  c041f0:	d9c15115 	stw	r7,1348(sp)
  c041f4:	0c039540 	call	c03954 <__sprint_r>
  c041f8:	d9c15117 	ldw	r7,1348(sp)
  c041fc:	103fa31e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c04200:	843ffc04 	addi	r16,r16,-16
  c04204:	dc800e17 	ldw	r18,56(sp)
  c04208:	dc400d17 	ldw	r17,52(sp)
  c0420c:	dd401904 	addi	r21,sp,100
  c04210:	9c3fed16 	blt	r19,r16,c041c8 <___vfprintf_internal_r+0x81c>
  c04214:	9425883a 	add	r18,r18,r16
  c04218:	8c400044 	addi	r17,r17,1
  c0421c:	008001c4 	movi	r2,7
  c04220:	af000015 	stw	fp,0(r21)
  c04224:	ac000115 	stw	r16,4(r21)
  c04228:	dc800e15 	stw	r18,56(sp)
  c0422c:	dc400d15 	stw	r17,52(sp)
  c04230:	14416116 	blt	r2,r17,c047b8 <___vfprintf_internal_r+0xe0c>
  c04234:	ad400204 	addi	r21,r21,8
  c04238:	003f2406 	br	c03ecc <___vfprintf_internal_r+0x520>
  c0423c:	d9014f17 	ldw	r4,1340(sp)
  c04240:	0c0741c0 	call	c0741c <__sinit>
  c04244:	d9c15117 	ldw	r7,1348(sp)
  c04248:	003def06 	br	c03a08 <___vfprintf_internal_r+0x5c>
  c0424c:	d9014f17 	ldw	r4,1340(sp)
  c04250:	b00b883a 	mov	r5,r22
  c04254:	d9c15115 	stw	r7,1348(sp)
  c04258:	0c0587c0 	call	c0587c <__swsetup_r>
  c0425c:	d9c15117 	ldw	r7,1348(sp)
  c04260:	103dee26 	beq	r2,zero,c03a1c <___vfprintf_internal_r+0x70>
  c04264:	003f8c06 	br	c04098 <___vfprintf_internal_r+0x6ec>
  c04268:	d9014217 	ldw	r4,1288(sp)
  c0426c:	d9414317 	ldw	r5,1292(sp)
  c04270:	000d883a 	mov	r6,zero
  c04274:	000f883a 	mov	r7,zero
  c04278:	0c0ba180 	call	c0ba18 <__eqdf2>
  c0427c:	1000f21e 	bne	r2,zero,c04648 <___vfprintf_internal_r+0xc9c>
  c04280:	00803074 	movhi	r2,193
  c04284:	10819604 	addi	r2,r2,1624
  c04288:	94800044 	addi	r18,r18,1
  c0428c:	8c400044 	addi	r17,r17,1
  c04290:	a8800015 	stw	r2,0(r21)
  c04294:	00c00044 	movi	r3,1
  c04298:	008001c4 	movi	r2,7
  c0429c:	a8c00115 	stw	r3,4(r21)
  c042a0:	dc800e15 	stw	r18,56(sp)
  c042a4:	dc400d15 	stw	r17,52(sp)
  c042a8:	1442fa16 	blt	r2,r17,c04e94 <___vfprintf_internal_r+0x14e8>
  c042ac:	a8c00204 	addi	r3,r21,8
  c042b0:	d8800517 	ldw	r2,20(sp)
  c042b4:	d9014717 	ldw	r4,1308(sp)
  c042b8:	11015c0e 	bge	r2,r4,c0482c <___vfprintf_internal_r+0xe80>
  c042bc:	dc400d17 	ldw	r17,52(sp)
  c042c0:	d9814917 	ldw	r6,1316(sp)
  c042c4:	00800044 	movi	r2,1
  c042c8:	94800044 	addi	r18,r18,1
  c042cc:	8c400044 	addi	r17,r17,1
  c042d0:	18800115 	stw	r2,4(r3)
  c042d4:	008001c4 	movi	r2,7
  c042d8:	19800015 	stw	r6,0(r3)
  c042dc:	dc800e15 	stw	r18,56(sp)
  c042e0:	dc400d15 	stw	r17,52(sp)
  c042e4:	14431016 	blt	r2,r17,c04f28 <___vfprintf_internal_r+0x157c>
  c042e8:	18c00204 	addi	r3,r3,8
  c042ec:	d8814717 	ldw	r2,1308(sp)
  c042f0:	143fffc4 	addi	r16,r2,-1
  c042f4:	043f2b0e 	bge	zero,r16,c03fa4 <___vfprintf_internal_r+0x5f8>
  c042f8:	00800404 	movi	r2,16
  c042fc:	1402a20e 	bge	r2,r16,c04d88 <___vfprintf_internal_r+0x13dc>
  c04300:	dc400d17 	ldw	r17,52(sp)
  c04304:	1027883a 	mov	r19,r2
  c04308:	07003074 	movhi	fp,193
  c0430c:	e7020f84 	addi	fp,fp,2110
  c04310:	050001c4 	movi	r20,7
  c04314:	00000306 	br	c04324 <___vfprintf_internal_r+0x978>
  c04318:	18c00204 	addi	r3,r3,8
  c0431c:	843ffc04 	addi	r16,r16,-16
  c04320:	9c029c0e 	bge	r19,r16,c04d94 <___vfprintf_internal_r+0x13e8>
  c04324:	94800404 	addi	r18,r18,16
  c04328:	8c400044 	addi	r17,r17,1
  c0432c:	1f000015 	stw	fp,0(r3)
  c04330:	1cc00115 	stw	r19,4(r3)
  c04334:	dc800e15 	stw	r18,56(sp)
  c04338:	dc400d15 	stw	r17,52(sp)
  c0433c:	a47ff60e 	bge	r20,r17,c04318 <___vfprintf_internal_r+0x96c>
  c04340:	d9014f17 	ldw	r4,1340(sp)
  c04344:	b00b883a 	mov	r5,r22
  c04348:	d9800c04 	addi	r6,sp,48
  c0434c:	0c039540 	call	c03954 <__sprint_r>
  c04350:	103f4e1e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c04354:	dc800e17 	ldw	r18,56(sp)
  c04358:	dc400d17 	ldw	r17,52(sp)
  c0435c:	d8c01904 	addi	r3,sp,100
  c04360:	003fee06 	br	c0431c <___vfprintf_internal_r+0x970>
  c04364:	d8802c0b 	ldhu	r2,176(sp)
  c04368:	00ffffc4 	movi	r3,-1
  c0436c:	d8c14b15 	stw	r3,1324(sp)
  c04370:	1080100c 	andi	r2,r2,64
  c04374:	103dcc1e 	bne	r2,zero,c03aa8 <___vfprintf_internal_r+0xfc>
  c04378:	003dce06 	br	c03ab4 <___vfprintf_internal_r+0x108>
  c0437c:	d9014f17 	ldw	r4,1340(sp)
  c04380:	b00b883a 	mov	r5,r22
  c04384:	d9800c04 	addi	r6,sp,48
  c04388:	0c039540 	call	c03954 <__sprint_r>
  c0438c:	103f3f1e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c04390:	dc800e17 	ldw	r18,56(sp)
  c04394:	003f2e06 	br	c04050 <___vfprintf_internal_r+0x6a4>
  c04398:	d9414c17 	ldw	r5,1328(sp)
  c0439c:	29400414 	ori	r5,r5,16
  c043a0:	d9414c15 	stw	r5,1328(sp)
  c043a4:	d9814c17 	ldw	r6,1328(sp)
  c043a8:	3080080c 	andi	r2,r6,32
  c043ac:	10014f1e 	bne	r2,zero,c048ec <___vfprintf_internal_r+0xf40>
  c043b0:	d8c14c17 	ldw	r3,1328(sp)
  c043b4:	1880040c 	andi	r2,r3,16
  c043b8:	1002ea1e 	bne	r2,zero,c04f64 <___vfprintf_internal_r+0x15b8>
  c043bc:	d9014c17 	ldw	r4,1328(sp)
  c043c0:	2080100c 	andi	r2,r4,64
  c043c4:	1002e726 	beq	r2,zero,c04f64 <___vfprintf_internal_r+0x15b8>
  c043c8:	3880000f 	ldh	r2,0(r7)
  c043cc:	39c00104 	addi	r7,r7,4
  c043d0:	d9c14015 	stw	r7,1280(sp)
  c043d4:	1023d7fa 	srai	r17,r2,31
  c043d8:	1021883a 	mov	r16,r2
  c043dc:	88037216 	blt	r17,zero,c051a8 <___vfprintf_internal_r+0x17fc>
  c043e0:	01000044 	movi	r4,1
  c043e4:	98000416 	blt	r19,zero,c043f8 <___vfprintf_internal_r+0xa4c>
  c043e8:	d8c14c17 	ldw	r3,1328(sp)
  c043ec:	00bfdfc4 	movi	r2,-129
  c043f0:	1886703a 	and	r3,r3,r2
  c043f4:	d8c14c15 	stw	r3,1328(sp)
  c043f8:	8444b03a 	or	r2,r16,r17
  c043fc:	1002261e 	bne	r2,zero,c04c98 <___vfprintf_internal_r+0x12ec>
  c04400:	9802251e 	bne	r19,zero,c04c98 <___vfprintf_internal_r+0x12ec>
  c04404:	20803fcc 	andi	r2,r4,255
  c04408:	10029b26 	beq	r2,zero,c04e78 <___vfprintf_internal_r+0x14cc>
  c0440c:	d8c01904 	addi	r3,sp,100
  c04410:	dd000f04 	addi	r20,sp,60
  c04414:	d8c14115 	stw	r3,1284(sp)
  c04418:	d8c14117 	ldw	r3,1284(sp)
  c0441c:	dcc14515 	stw	r19,1300(sp)
  c04420:	a0c5c83a 	sub	r2,r20,r3
  c04424:	11c00a04 	addi	r7,r2,40
  c04428:	99c0010e 	bge	r19,r7,c04430 <___vfprintf_internal_r+0xa84>
  c0442c:	d9c14515 	stw	r7,1300(sp)
  c04430:	dcc14615 	stw	r19,1304(sp)
  c04434:	d8800407 	ldb	r2,16(sp)
  c04438:	103e4c26 	beq	r2,zero,c03d6c <___vfprintf_internal_r+0x3c0>
  c0443c:	d8814517 	ldw	r2,1300(sp)
  c04440:	10800044 	addi	r2,r2,1
  c04444:	d8814515 	stw	r2,1300(sp)
  c04448:	003e4806 	br	c03d6c <___vfprintf_internal_r+0x3c0>
  c0444c:	d9814c17 	ldw	r6,1328(sp)
  c04450:	31800414 	ori	r6,r6,16
  c04454:	d9814c15 	stw	r6,1328(sp)
  c04458:	d8c14c17 	ldw	r3,1328(sp)
  c0445c:	1880080c 	andi	r2,r3,32
  c04460:	1001271e 	bne	r2,zero,c04900 <___vfprintf_internal_r+0xf54>
  c04464:	d9414c17 	ldw	r5,1328(sp)
  c04468:	2880040c 	andi	r2,r5,16
  c0446c:	1002b61e 	bne	r2,zero,c04f48 <___vfprintf_internal_r+0x159c>
  c04470:	d9814c17 	ldw	r6,1328(sp)
  c04474:	3080100c 	andi	r2,r6,64
  c04478:	1002b326 	beq	r2,zero,c04f48 <___vfprintf_internal_r+0x159c>
  c0447c:	3c00000b 	ldhu	r16,0(r7)
  c04480:	0009883a 	mov	r4,zero
  c04484:	39c00104 	addi	r7,r7,4
  c04488:	0023883a 	mov	r17,zero
  c0448c:	d9c14015 	stw	r7,1280(sp)
  c04490:	d8000405 	stb	zero,16(sp)
  c04494:	003fd306 	br	c043e4 <___vfprintf_internal_r+0xa38>
  c04498:	d9014c17 	ldw	r4,1328(sp)
  c0449c:	21000414 	ori	r4,r4,16
  c044a0:	d9014c15 	stw	r4,1328(sp)
  c044a4:	d9414c17 	ldw	r5,1328(sp)
  c044a8:	2880080c 	andi	r2,r5,32
  c044ac:	1001081e 	bne	r2,zero,c048d0 <___vfprintf_internal_r+0xf24>
  c044b0:	d8c14c17 	ldw	r3,1328(sp)
  c044b4:	1880040c 	andi	r2,r3,16
  c044b8:	1002b01e 	bne	r2,zero,c04f7c <___vfprintf_internal_r+0x15d0>
  c044bc:	d9014c17 	ldw	r4,1328(sp)
  c044c0:	2080100c 	andi	r2,r4,64
  c044c4:	1002ad26 	beq	r2,zero,c04f7c <___vfprintf_internal_r+0x15d0>
  c044c8:	3c00000b 	ldhu	r16,0(r7)
  c044cc:	01000044 	movi	r4,1
  c044d0:	39c00104 	addi	r7,r7,4
  c044d4:	0023883a 	mov	r17,zero
  c044d8:	d9c14015 	stw	r7,1280(sp)
  c044dc:	d8000405 	stb	zero,16(sp)
  c044e0:	003fc006 	br	c043e4 <___vfprintf_internal_r+0xa38>
  c044e4:	d9014f17 	ldw	r4,1340(sp)
  c044e8:	b00b883a 	mov	r5,r22
  c044ec:	d9800c04 	addi	r6,sp,48
  c044f0:	0c039540 	call	c03954 <__sprint_r>
  c044f4:	103ee51e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c044f8:	dc800e17 	ldw	r18,56(sp)
  c044fc:	d8c01904 	addi	r3,sp,100
  c04500:	d9814c17 	ldw	r6,1328(sp)
  c04504:	3080004c 	andi	r2,r6,1
  c04508:	1005003a 	cmpeq	r2,r2,zero
  c0450c:	103ea51e 	bne	r2,zero,c03fa4 <___vfprintf_internal_r+0x5f8>
  c04510:	00800044 	movi	r2,1
  c04514:	dc400d17 	ldw	r17,52(sp)
  c04518:	18800115 	stw	r2,4(r3)
  c0451c:	d8814917 	ldw	r2,1316(sp)
  c04520:	94800044 	addi	r18,r18,1
  c04524:	8c400044 	addi	r17,r17,1
  c04528:	18800015 	stw	r2,0(r3)
  c0452c:	008001c4 	movi	r2,7
  c04530:	dc800e15 	stw	r18,56(sp)
  c04534:	dc400d15 	stw	r17,52(sp)
  c04538:	14421e0e 	bge	r2,r17,c04db4 <___vfprintf_internal_r+0x1408>
  c0453c:	d9014f17 	ldw	r4,1340(sp)
  c04540:	b00b883a 	mov	r5,r22
  c04544:	d9800c04 	addi	r6,sp,48
  c04548:	0c039540 	call	c03954 <__sprint_r>
  c0454c:	103ecf1e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c04550:	dc800e17 	ldw	r18,56(sp)
  c04554:	d8c01904 	addi	r3,sp,100
  c04558:	003e9206 	br	c03fa4 <___vfprintf_internal_r+0x5f8>
  c0455c:	d9014f17 	ldw	r4,1340(sp)
  c04560:	b00b883a 	mov	r5,r22
  c04564:	d9800c04 	addi	r6,sp,48
  c04568:	0c039540 	call	c03954 <__sprint_r>
  c0456c:	103ec026 	beq	r2,zero,c04070 <___vfprintf_internal_r+0x6c4>
  c04570:	003ec606 	br	c0408c <___vfprintf_internal_r+0x6e0>
  c04574:	d9014f17 	ldw	r4,1340(sp)
  c04578:	b00b883a 	mov	r5,r22
  c0457c:	d9800c04 	addi	r6,sp,48
  c04580:	d9c15115 	stw	r7,1348(sp)
  c04584:	0c039540 	call	c03954 <__sprint_r>
  c04588:	d9c15117 	ldw	r7,1348(sp)
  c0458c:	103ebf1e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c04590:	dc800e17 	ldw	r18,56(sp)
  c04594:	dc400d17 	ldw	r17,52(sp)
  c04598:	dd401904 	addi	r21,sp,100
  c0459c:	003e7406 	br	c03f70 <___vfprintf_internal_r+0x5c4>
  c045a0:	d9014f17 	ldw	r4,1340(sp)
  c045a4:	b00b883a 	mov	r5,r22
  c045a8:	d9800c04 	addi	r6,sp,48
  c045ac:	d9c15115 	stw	r7,1348(sp)
  c045b0:	0c039540 	call	c03954 <__sprint_r>
  c045b4:	d9c15117 	ldw	r7,1348(sp)
  c045b8:	103eb41e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c045bc:	dd401904 	addi	r21,sp,100
  c045c0:	003d6d06 	br	c03b78 <___vfprintf_internal_r+0x1cc>
  c045c4:	d9014f17 	ldw	r4,1340(sp)
  c045c8:	b00b883a 	mov	r5,r22
  c045cc:	d9800c04 	addi	r6,sp,48
  c045d0:	d9c15115 	stw	r7,1348(sp)
  c045d4:	0c039540 	call	c03954 <__sprint_r>
  c045d8:	d9c15117 	ldw	r7,1348(sp)
  c045dc:	103eab1e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c045e0:	dc800e17 	ldw	r18,56(sp)
  c045e4:	dc400d17 	ldw	r17,52(sp)
  c045e8:	dd401904 	addi	r21,sp,100
  c045ec:	003e3406 	br	c03ec0 <___vfprintf_internal_r+0x514>
  c045f0:	d9014f17 	ldw	r4,1340(sp)
  c045f4:	b00b883a 	mov	r5,r22
  c045f8:	d9800c04 	addi	r6,sp,48
  c045fc:	d9c15115 	stw	r7,1348(sp)
  c04600:	0c039540 	call	c03954 <__sprint_r>
  c04604:	d9c15117 	ldw	r7,1348(sp)
  c04608:	103ea01e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c0460c:	dc800e17 	ldw	r18,56(sp)
  c04610:	dc400d17 	ldw	r17,52(sp)
  c04614:	dd401904 	addi	r21,sp,100
  c04618:	003e1c06 	br	c03e8c <___vfprintf_internal_r+0x4e0>
  c0461c:	d9014f17 	ldw	r4,1340(sp)
  c04620:	b00b883a 	mov	r5,r22
  c04624:	d9800c04 	addi	r6,sp,48
  c04628:	d9c15115 	stw	r7,1348(sp)
  c0462c:	0c039540 	call	c03954 <__sprint_r>
  c04630:	d9c15117 	ldw	r7,1348(sp)
  c04634:	103e951e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c04638:	dc800e17 	ldw	r18,56(sp)
  c0463c:	dc400d17 	ldw	r17,52(sp)
  c04640:	dd401904 	addi	r21,sp,100
  c04644:	003e0406 	br	c03e58 <___vfprintf_internal_r+0x4ac>
  c04648:	d9000517 	ldw	r4,20(sp)
  c0464c:	0102520e 	bge	zero,r4,c04f98 <___vfprintf_internal_r+0x15ec>
  c04650:	d9814717 	ldw	r6,1308(sp)
  c04654:	21807a16 	blt	r4,r6,c04840 <___vfprintf_internal_r+0xe94>
  c04658:	d8814117 	ldw	r2,1284(sp)
  c0465c:	91a5883a 	add	r18,r18,r6
  c04660:	8c400044 	addi	r17,r17,1
  c04664:	a8800015 	stw	r2,0(r21)
  c04668:	008001c4 	movi	r2,7
  c0466c:	a9800115 	stw	r6,4(r21)
  c04670:	dc800e15 	stw	r18,56(sp)
  c04674:	dc400d15 	stw	r17,52(sp)
  c04678:	1442f616 	blt	r2,r17,c05254 <___vfprintf_internal_r+0x18a8>
  c0467c:	a8c00204 	addi	r3,r21,8
  c04680:	d9414717 	ldw	r5,1308(sp)
  c04684:	2161c83a 	sub	r16,r4,r5
  c04688:	043f9d0e 	bge	zero,r16,c04500 <___vfprintf_internal_r+0xb54>
  c0468c:	00800404 	movi	r2,16
  c04690:	1402130e 	bge	r2,r16,c04ee0 <___vfprintf_internal_r+0x1534>
  c04694:	dc400d17 	ldw	r17,52(sp)
  c04698:	1027883a 	mov	r19,r2
  c0469c:	07003074 	movhi	fp,193
  c046a0:	e7020f84 	addi	fp,fp,2110
  c046a4:	050001c4 	movi	r20,7
  c046a8:	00000306 	br	c046b8 <___vfprintf_internal_r+0xd0c>
  c046ac:	18c00204 	addi	r3,r3,8
  c046b0:	843ffc04 	addi	r16,r16,-16
  c046b4:	9c020d0e 	bge	r19,r16,c04eec <___vfprintf_internal_r+0x1540>
  c046b8:	94800404 	addi	r18,r18,16
  c046bc:	8c400044 	addi	r17,r17,1
  c046c0:	1f000015 	stw	fp,0(r3)
  c046c4:	1cc00115 	stw	r19,4(r3)
  c046c8:	dc800e15 	stw	r18,56(sp)
  c046cc:	dc400d15 	stw	r17,52(sp)
  c046d0:	a47ff60e 	bge	r20,r17,c046ac <___vfprintf_internal_r+0xd00>
  c046d4:	d9014f17 	ldw	r4,1340(sp)
  c046d8:	b00b883a 	mov	r5,r22
  c046dc:	d9800c04 	addi	r6,sp,48
  c046e0:	0c039540 	call	c03954 <__sprint_r>
  c046e4:	103e691e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c046e8:	dc800e17 	ldw	r18,56(sp)
  c046ec:	dc400d17 	ldw	r17,52(sp)
  c046f0:	d8c01904 	addi	r3,sp,100
  c046f4:	003fee06 	br	c046b0 <___vfprintf_internal_r+0xd04>
  c046f8:	d8814717 	ldw	r2,1308(sp)
  c046fc:	143fffc4 	addi	r16,r2,-1
  c04700:	043e970e 	bge	zero,r16,c04160 <___vfprintf_internal_r+0x7b4>
  c04704:	00800404 	movi	r2,16
  c04708:	1400180e 	bge	r2,r16,c0476c <___vfprintf_internal_r+0xdc0>
  c0470c:	1029883a 	mov	r20,r2
  c04710:	07003074 	movhi	fp,193
  c04714:	e7020f84 	addi	fp,fp,2110
  c04718:	054001c4 	movi	r21,7
  c0471c:	00000306 	br	c0472c <___vfprintf_internal_r+0xd80>
  c04720:	9cc00204 	addi	r19,r19,8
  c04724:	843ffc04 	addi	r16,r16,-16
  c04728:	a400120e 	bge	r20,r16,c04774 <___vfprintf_internal_r+0xdc8>
  c0472c:	94800404 	addi	r18,r18,16
  c04730:	8c400044 	addi	r17,r17,1
  c04734:	9f000015 	stw	fp,0(r19)
  c04738:	9d000115 	stw	r20,4(r19)
  c0473c:	dc800e15 	stw	r18,56(sp)
  c04740:	dc400d15 	stw	r17,52(sp)
  c04744:	ac7ff60e 	bge	r21,r17,c04720 <___vfprintf_internal_r+0xd74>
  c04748:	d9014f17 	ldw	r4,1340(sp)
  c0474c:	b00b883a 	mov	r5,r22
  c04750:	d9800c04 	addi	r6,sp,48
  c04754:	0c039540 	call	c03954 <__sprint_r>
  c04758:	103e4c1e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c0475c:	dc800e17 	ldw	r18,56(sp)
  c04760:	dc400d17 	ldw	r17,52(sp)
  c04764:	dcc01904 	addi	r19,sp,100
  c04768:	003fee06 	br	c04724 <___vfprintf_internal_r+0xd78>
  c0476c:	07003074 	movhi	fp,193
  c04770:	e7020f84 	addi	fp,fp,2110
  c04774:	9425883a 	add	r18,r18,r16
  c04778:	8c400044 	addi	r17,r17,1
  c0477c:	008001c4 	movi	r2,7
  c04780:	9f000015 	stw	fp,0(r19)
  c04784:	9c000115 	stw	r16,4(r19)
  c04788:	dc800e15 	stw	r18,56(sp)
  c0478c:	dc400d15 	stw	r17,52(sp)
  c04790:	147e720e 	bge	r2,r17,c0415c <___vfprintf_internal_r+0x7b0>
  c04794:	d9014f17 	ldw	r4,1340(sp)
  c04798:	b00b883a 	mov	r5,r22
  c0479c:	d9800c04 	addi	r6,sp,48
  c047a0:	0c039540 	call	c03954 <__sprint_r>
  c047a4:	103e391e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c047a8:	dc800e17 	ldw	r18,56(sp)
  c047ac:	dc400d17 	ldw	r17,52(sp)
  c047b0:	dcc01904 	addi	r19,sp,100
  c047b4:	003e6a06 	br	c04160 <___vfprintf_internal_r+0x7b4>
  c047b8:	d9014f17 	ldw	r4,1340(sp)
  c047bc:	b00b883a 	mov	r5,r22
  c047c0:	d9800c04 	addi	r6,sp,48
  c047c4:	d9c15115 	stw	r7,1348(sp)
  c047c8:	0c039540 	call	c03954 <__sprint_r>
  c047cc:	d9c15117 	ldw	r7,1348(sp)
  c047d0:	103e2e1e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c047d4:	dc800e17 	ldw	r18,56(sp)
  c047d8:	dc400d17 	ldw	r17,52(sp)
  c047dc:	dd401904 	addi	r21,sp,100
  c047e0:	003dba06 	br	c03ecc <___vfprintf_internal_r+0x520>
  c047e4:	d9014f17 	ldw	r4,1340(sp)
  c047e8:	b00b883a 	mov	r5,r22
  c047ec:	d9800c04 	addi	r6,sp,48
  c047f0:	0c039540 	call	c03954 <__sprint_r>
  c047f4:	103e251e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c047f8:	dc800e17 	ldw	r18,56(sp)
  c047fc:	dc400d17 	ldw	r17,52(sp)
  c04800:	dcc01904 	addi	r19,sp,100
  c04804:	003e4206 	br	c04110 <___vfprintf_internal_r+0x764>
  c04808:	d9014f17 	ldw	r4,1340(sp)
  c0480c:	b00b883a 	mov	r5,r22
  c04810:	d9800c04 	addi	r6,sp,48
  c04814:	0c039540 	call	c03954 <__sprint_r>
  c04818:	103e1c1e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c0481c:	dc800e17 	ldw	r18,56(sp)
  c04820:	dc400d17 	ldw	r17,52(sp)
  c04824:	d8c01904 	addi	r3,sp,100
  c04828:	003e2e06 	br	c040e4 <___vfprintf_internal_r+0x738>
  c0482c:	d9414c17 	ldw	r5,1328(sp)
  c04830:	2880004c 	andi	r2,r5,1
  c04834:	1005003a 	cmpeq	r2,r2,zero
  c04838:	103dda1e 	bne	r2,zero,c03fa4 <___vfprintf_internal_r+0x5f8>
  c0483c:	003e9f06 	br	c042bc <___vfprintf_internal_r+0x910>
  c04840:	d8c14117 	ldw	r3,1284(sp)
  c04844:	9125883a 	add	r18,r18,r4
  c04848:	8c400044 	addi	r17,r17,1
  c0484c:	008001c4 	movi	r2,7
  c04850:	a8c00015 	stw	r3,0(r21)
  c04854:	a9000115 	stw	r4,4(r21)
  c04858:	dc800e15 	stw	r18,56(sp)
  c0485c:	dc400d15 	stw	r17,52(sp)
  c04860:	14426616 	blt	r2,r17,c051fc <___vfprintf_internal_r+0x1850>
  c04864:	a8c00204 	addi	r3,r21,8
  c04868:	d9414917 	ldw	r5,1316(sp)
  c0486c:	00800044 	movi	r2,1
  c04870:	94800044 	addi	r18,r18,1
  c04874:	8c400044 	addi	r17,r17,1
  c04878:	18800115 	stw	r2,4(r3)
  c0487c:	008001c4 	movi	r2,7
  c04880:	19400015 	stw	r5,0(r3)
  c04884:	dc800e15 	stw	r18,56(sp)
  c04888:	dc400d15 	stw	r17,52(sp)
  c0488c:	2021883a 	mov	r16,r4
  c04890:	14425016 	blt	r2,r17,c051d4 <___vfprintf_internal_r+0x1828>
  c04894:	19400204 	addi	r5,r3,8
  c04898:	d9814717 	ldw	r6,1308(sp)
  c0489c:	8c400044 	addi	r17,r17,1
  c048a0:	dc400d15 	stw	r17,52(sp)
  c048a4:	3107c83a 	sub	r3,r6,r4
  c048a8:	d9014117 	ldw	r4,1284(sp)
  c048ac:	90e5883a 	add	r18,r18,r3
  c048b0:	28c00115 	stw	r3,4(r5)
  c048b4:	8105883a 	add	r2,r16,r4
  c048b8:	28800015 	stw	r2,0(r5)
  c048bc:	008001c4 	movi	r2,7
  c048c0:	dc800e15 	stw	r18,56(sp)
  c048c4:	147f1d16 	blt	r2,r17,c0453c <___vfprintf_internal_r+0xb90>
  c048c8:	28c00204 	addi	r3,r5,8
  c048cc:	003db506 	br	c03fa4 <___vfprintf_internal_r+0x5f8>
  c048d0:	3c000017 	ldw	r16,0(r7)
  c048d4:	3c400117 	ldw	r17,4(r7)
  c048d8:	39800204 	addi	r6,r7,8
  c048dc:	01000044 	movi	r4,1
  c048e0:	d9814015 	stw	r6,1280(sp)
  c048e4:	d8000405 	stb	zero,16(sp)
  c048e8:	003ebe06 	br	c043e4 <___vfprintf_internal_r+0xa38>
  c048ec:	3c000017 	ldw	r16,0(r7)
  c048f0:	3c400117 	ldw	r17,4(r7)
  c048f4:	38800204 	addi	r2,r7,8
  c048f8:	d8814015 	stw	r2,1280(sp)
  c048fc:	003eb706 	br	c043dc <___vfprintf_internal_r+0xa30>
  c04900:	3c000017 	ldw	r16,0(r7)
  c04904:	3c400117 	ldw	r17,4(r7)
  c04908:	39000204 	addi	r4,r7,8
  c0490c:	d9014015 	stw	r4,1280(sp)
  c04910:	0009883a 	mov	r4,zero
  c04914:	d8000405 	stb	zero,16(sp)
  c04918:	003eb206 	br	c043e4 <___vfprintf_internal_r+0xa38>
  c0491c:	38c00017 	ldw	r3,0(r7)
  c04920:	39c00104 	addi	r7,r7,4
  c04924:	d8c14a15 	stw	r3,1320(sp)
  c04928:	1800d10e 	bge	r3,zero,c04c70 <___vfprintf_internal_r+0x12c4>
  c0492c:	00c7c83a 	sub	r3,zero,r3
  c04930:	d8c14a15 	stw	r3,1320(sp)
  c04934:	d9014c17 	ldw	r4,1328(sp)
  c04938:	b8c00007 	ldb	r3,0(r23)
  c0493c:	21000114 	ori	r4,r4,4
  c04940:	d9014c15 	stw	r4,1328(sp)
  c04944:	003c9806 	br	c03ba8 <___vfprintf_internal_r+0x1fc>
  c04948:	d9814c17 	ldw	r6,1328(sp)
  c0494c:	3080080c 	andi	r2,r6,32
  c04950:	1001f026 	beq	r2,zero,c05114 <___vfprintf_internal_r+0x1768>
  c04954:	d9014b17 	ldw	r4,1324(sp)
  c04958:	38800017 	ldw	r2,0(r7)
  c0495c:	39c00104 	addi	r7,r7,4
  c04960:	d9c14015 	stw	r7,1280(sp)
  c04964:	2007d7fa 	srai	r3,r4,31
  c04968:	d9c14017 	ldw	r7,1280(sp)
  c0496c:	11000015 	stw	r4,0(r2)
  c04970:	10c00115 	stw	r3,4(r2)
  c04974:	003c6906 	br	c03b1c <___vfprintf_internal_r+0x170>
  c04978:	b8c00007 	ldb	r3,0(r23)
  c0497c:	00801b04 	movi	r2,108
  c04980:	18824f26 	beq	r3,r2,c052c0 <___vfprintf_internal_r+0x1914>
  c04984:	d9414c17 	ldw	r5,1328(sp)
  c04988:	29400414 	ori	r5,r5,16
  c0498c:	d9414c15 	stw	r5,1328(sp)
  c04990:	003c8506 	br	c03ba8 <___vfprintf_internal_r+0x1fc>
  c04994:	d9814c17 	ldw	r6,1328(sp)
  c04998:	b8c00007 	ldb	r3,0(r23)
  c0499c:	31800814 	ori	r6,r6,32
  c049a0:	d9814c15 	stw	r6,1328(sp)
  c049a4:	003c8006 	br	c03ba8 <___vfprintf_internal_r+0x1fc>
  c049a8:	d8814c17 	ldw	r2,1328(sp)
  c049ac:	3c000017 	ldw	r16,0(r7)
  c049b0:	00c01e04 	movi	r3,120
  c049b4:	10800094 	ori	r2,r2,2
  c049b8:	d8814c15 	stw	r2,1328(sp)
  c049bc:	39c00104 	addi	r7,r7,4
  c049c0:	01403074 	movhi	r5,193
  c049c4:	2941f904 	addi	r5,r5,2020
  c049c8:	00800c04 	movi	r2,48
  c049cc:	0023883a 	mov	r17,zero
  c049d0:	01000084 	movi	r4,2
  c049d4:	d9c14015 	stw	r7,1280(sp)
  c049d8:	d8c14d15 	stw	r3,1332(sp)
  c049dc:	d9414415 	stw	r5,1296(sp)
  c049e0:	d8800445 	stb	r2,17(sp)
  c049e4:	d8c00485 	stb	r3,18(sp)
  c049e8:	d8000405 	stb	zero,16(sp)
  c049ec:	003e7d06 	br	c043e4 <___vfprintf_internal_r+0xa38>
  c049f0:	d8814c17 	ldw	r2,1328(sp)
  c049f4:	b8c00007 	ldb	r3,0(r23)
  c049f8:	10801014 	ori	r2,r2,64
  c049fc:	d8814c15 	stw	r2,1328(sp)
  c04a00:	003c6906 	br	c03ba8 <___vfprintf_internal_r+0x1fc>
  c04a04:	d9414c17 	ldw	r5,1328(sp)
  c04a08:	2880020c 	andi	r2,r5,8
  c04a0c:	1001df26 	beq	r2,zero,c0518c <___vfprintf_internal_r+0x17e0>
  c04a10:	39800017 	ldw	r6,0(r7)
  c04a14:	38800204 	addi	r2,r7,8
  c04a18:	d8814015 	stw	r2,1280(sp)
  c04a1c:	d9814215 	stw	r6,1288(sp)
  c04a20:	39c00117 	ldw	r7,4(r7)
  c04a24:	d9c14315 	stw	r7,1292(sp)
  c04a28:	d9014217 	ldw	r4,1288(sp)
  c04a2c:	d9414317 	ldw	r5,1292(sp)
  c04a30:	0c0a34c0 	call	c0a34c <__isinfd>
  c04a34:	10021726 	beq	r2,zero,c05294 <___vfprintf_internal_r+0x18e8>
  c04a38:	d9014217 	ldw	r4,1288(sp)
  c04a3c:	d9414317 	ldw	r5,1292(sp)
  c04a40:	000d883a 	mov	r6,zero
  c04a44:	000f883a 	mov	r7,zero
  c04a48:	0c0bbb00 	call	c0bbb0 <__ltdf2>
  c04a4c:	1002ca16 	blt	r2,zero,c05578 <___vfprintf_internal_r+0x1bcc>
  c04a50:	d9414d17 	ldw	r5,1332(sp)
  c04a54:	008011c4 	movi	r2,71
  c04a58:	11420a16 	blt	r2,r5,c05284 <___vfprintf_internal_r+0x18d8>
  c04a5c:	01803074 	movhi	r6,193
  c04a60:	3181fe04 	addi	r6,r6,2040
  c04a64:	d9814115 	stw	r6,1284(sp)
  c04a68:	d9014c17 	ldw	r4,1328(sp)
  c04a6c:	00c000c4 	movi	r3,3
  c04a70:	00bfdfc4 	movi	r2,-129
  c04a74:	2088703a 	and	r4,r4,r2
  c04a78:	180f883a 	mov	r7,r3
  c04a7c:	d8c14515 	stw	r3,1300(sp)
  c04a80:	d9014c15 	stw	r4,1328(sp)
  c04a84:	d8014615 	stw	zero,1304(sp)
  c04a88:	003e6a06 	br	c04434 <___vfprintf_internal_r+0xa88>
  c04a8c:	38800017 	ldw	r2,0(r7)
  c04a90:	00c00044 	movi	r3,1
  c04a94:	39c00104 	addi	r7,r7,4
  c04a98:	d9c14015 	stw	r7,1280(sp)
  c04a9c:	d9000f04 	addi	r4,sp,60
  c04aa0:	180f883a 	mov	r7,r3
  c04aa4:	d8c14515 	stw	r3,1300(sp)
  c04aa8:	d9014115 	stw	r4,1284(sp)
  c04aac:	d8800f05 	stb	r2,60(sp)
  c04ab0:	d8000405 	stb	zero,16(sp)
  c04ab4:	003cac06 	br	c03d68 <___vfprintf_internal_r+0x3bc>
  c04ab8:	01403074 	movhi	r5,193
  c04abc:	29420404 	addi	r5,r5,2064
  c04ac0:	d9414415 	stw	r5,1296(sp)
  c04ac4:	d9814c17 	ldw	r6,1328(sp)
  c04ac8:	3080080c 	andi	r2,r6,32
  c04acc:	1000f926 	beq	r2,zero,c04eb4 <___vfprintf_internal_r+0x1508>
  c04ad0:	3c000017 	ldw	r16,0(r7)
  c04ad4:	3c400117 	ldw	r17,4(r7)
  c04ad8:	38800204 	addi	r2,r7,8
  c04adc:	d8814015 	stw	r2,1280(sp)
  c04ae0:	d9414c17 	ldw	r5,1328(sp)
  c04ae4:	2880004c 	andi	r2,r5,1
  c04ae8:	1005003a 	cmpeq	r2,r2,zero
  c04aec:	1000b31e 	bne	r2,zero,c04dbc <___vfprintf_internal_r+0x1410>
  c04af0:	8444b03a 	or	r2,r16,r17
  c04af4:	1000b126 	beq	r2,zero,c04dbc <___vfprintf_internal_r+0x1410>
  c04af8:	d9814d17 	ldw	r6,1332(sp)
  c04afc:	29400094 	ori	r5,r5,2
  c04b00:	00800c04 	movi	r2,48
  c04b04:	01000084 	movi	r4,2
  c04b08:	d9414c15 	stw	r5,1328(sp)
  c04b0c:	d8800445 	stb	r2,17(sp)
  c04b10:	d9800485 	stb	r6,18(sp)
  c04b14:	d8000405 	stb	zero,16(sp)
  c04b18:	003e3206 	br	c043e4 <___vfprintf_internal_r+0xa38>
  c04b1c:	01803074 	movhi	r6,193
  c04b20:	3181f904 	addi	r6,r6,2020
  c04b24:	d9814415 	stw	r6,1296(sp)
  c04b28:	003fe606 	br	c04ac4 <___vfprintf_internal_r+0x1118>
  c04b2c:	00800ac4 	movi	r2,43
  c04b30:	d8800405 	stb	r2,16(sp)
  c04b34:	b8c00007 	ldb	r3,0(r23)
  c04b38:	003c1b06 	br	c03ba8 <___vfprintf_internal_r+0x1fc>
  c04b3c:	d8814c17 	ldw	r2,1328(sp)
  c04b40:	b8c00007 	ldb	r3,0(r23)
  c04b44:	10800054 	ori	r2,r2,1
  c04b48:	d8814c15 	stw	r2,1328(sp)
  c04b4c:	003c1606 	br	c03ba8 <___vfprintf_internal_r+0x1fc>
  c04b50:	d8800407 	ldb	r2,16(sp)
  c04b54:	1000461e 	bne	r2,zero,c04c70 <___vfprintf_internal_r+0x12c4>
  c04b58:	00800804 	movi	r2,32
  c04b5c:	d8800405 	stb	r2,16(sp)
  c04b60:	b8c00007 	ldb	r3,0(r23)
  c04b64:	003c1006 	br	c03ba8 <___vfprintf_internal_r+0x1fc>
  c04b68:	d9814c17 	ldw	r6,1328(sp)
  c04b6c:	b8c00007 	ldb	r3,0(r23)
  c04b70:	31800214 	ori	r6,r6,8
  c04b74:	d9814c15 	stw	r6,1328(sp)
  c04b78:	003c0b06 	br	c03ba8 <___vfprintf_internal_r+0x1fc>
  c04b7c:	0007883a 	mov	r3,zero
  c04b80:	01000244 	movi	r4,9
  c04b84:	188002a4 	muli	r2,r3,10
  c04b88:	b8c00007 	ldb	r3,0(r23)
  c04b8c:	d9814d17 	ldw	r6,1332(sp)
  c04b90:	bdc00044 	addi	r23,r23,1
  c04b94:	d8c14d15 	stw	r3,1332(sp)
  c04b98:	d9414d17 	ldw	r5,1332(sp)
  c04b9c:	3085883a 	add	r2,r6,r2
  c04ba0:	10fff404 	addi	r3,r2,-48
  c04ba4:	28bff404 	addi	r2,r5,-48
  c04ba8:	20bff62e 	bgeu	r4,r2,c04b84 <___vfprintf_internal_r+0x11d8>
  c04bac:	d8c14a15 	stw	r3,1320(sp)
  c04bb0:	003bff06 	br	c03bb0 <___vfprintf_internal_r+0x204>
  c04bb4:	d9414c17 	ldw	r5,1328(sp)
  c04bb8:	b8c00007 	ldb	r3,0(r23)
  c04bbc:	29402014 	ori	r5,r5,128
  c04bc0:	d9414c15 	stw	r5,1328(sp)
  c04bc4:	003bf806 	br	c03ba8 <___vfprintf_internal_r+0x1fc>
  c04bc8:	b8c00007 	ldb	r3,0(r23)
  c04bcc:	00800a84 	movi	r2,42
  c04bd0:	bdc00044 	addi	r23,r23,1
  c04bd4:	18831526 	beq	r3,r2,c0582c <___vfprintf_internal_r+0x1e80>
  c04bd8:	d8c14d15 	stw	r3,1332(sp)
  c04bdc:	18bff404 	addi	r2,r3,-48
  c04be0:	00c00244 	movi	r3,9
  c04be4:	18827836 	bltu	r3,r2,c055c8 <___vfprintf_internal_r+0x1c1c>
  c04be8:	000d883a 	mov	r6,zero
  c04bec:	308002a4 	muli	r2,r6,10
  c04bf0:	b9800007 	ldb	r6,0(r23)
  c04bf4:	d9414d17 	ldw	r5,1332(sp)
  c04bf8:	bdc00044 	addi	r23,r23,1
  c04bfc:	d9814d15 	stw	r6,1332(sp)
  c04c00:	d9014d17 	ldw	r4,1332(sp)
  c04c04:	1145883a 	add	r2,r2,r5
  c04c08:	11bff404 	addi	r6,r2,-48
  c04c0c:	20bff404 	addi	r2,r4,-48
  c04c10:	18bff62e 	bgeu	r3,r2,c04bec <___vfprintf_internal_r+0x1240>
  c04c14:	3027883a 	mov	r19,r6
  c04c18:	303be50e 	bge	r6,zero,c03bb0 <___vfprintf_internal_r+0x204>
  c04c1c:	04ffffc4 	movi	r19,-1
  c04c20:	003be306 	br	c03bb0 <___vfprintf_internal_r+0x204>
  c04c24:	d8000405 	stb	zero,16(sp)
  c04c28:	39800017 	ldw	r6,0(r7)
  c04c2c:	39c00104 	addi	r7,r7,4
  c04c30:	d9c14015 	stw	r7,1280(sp)
  c04c34:	d9814115 	stw	r6,1284(sp)
  c04c38:	3001c926 	beq	r6,zero,c05360 <___vfprintf_internal_r+0x19b4>
  c04c3c:	98000e16 	blt	r19,zero,c04c78 <___vfprintf_internal_r+0x12cc>
  c04c40:	d9014117 	ldw	r4,1284(sp)
  c04c44:	000b883a 	mov	r5,zero
  c04c48:	980d883a 	mov	r6,r19
  c04c4c:	0c08a680 	call	c08a68 <memchr>
  c04c50:	10025926 	beq	r2,zero,c055b8 <___vfprintf_internal_r+0x1c0c>
  c04c54:	d8c14117 	ldw	r3,1284(sp)
  c04c58:	10cfc83a 	sub	r7,r2,r3
  c04c5c:	99c19e16 	blt	r19,r7,c052d8 <___vfprintf_internal_r+0x192c>
  c04c60:	d9c14515 	stw	r7,1300(sp)
  c04c64:	38000916 	blt	r7,zero,c04c8c <___vfprintf_internal_r+0x12e0>
  c04c68:	d8014615 	stw	zero,1304(sp)
  c04c6c:	003df106 	br	c04434 <___vfprintf_internal_r+0xa88>
  c04c70:	b8c00007 	ldb	r3,0(r23)
  c04c74:	003bcc06 	br	c03ba8 <___vfprintf_internal_r+0x1fc>
  c04c78:	d9014117 	ldw	r4,1284(sp)
  c04c7c:	0c038e00 	call	c038e0 <strlen>
  c04c80:	d8814515 	stw	r2,1300(sp)
  c04c84:	100f883a 	mov	r7,r2
  c04c88:	103ff70e 	bge	r2,zero,c04c68 <___vfprintf_internal_r+0x12bc>
  c04c8c:	d8014515 	stw	zero,1300(sp)
  c04c90:	d8014615 	stw	zero,1304(sp)
  c04c94:	003de706 	br	c04434 <___vfprintf_internal_r+0xa88>
  c04c98:	20c03fcc 	andi	r3,r4,255
  c04c9c:	00800044 	movi	r2,1
  c04ca0:	18802d26 	beq	r3,r2,c04d58 <___vfprintf_internal_r+0x13ac>
  c04ca4:	18800e36 	bltu	r3,r2,c04ce0 <___vfprintf_internal_r+0x1334>
  c04ca8:	00800084 	movi	r2,2
  c04cac:	1880fa26 	beq	r3,r2,c05098 <___vfprintf_internal_r+0x16ec>
  c04cb0:	01003074 	movhi	r4,193
  c04cb4:	21020904 	addi	r4,r4,2084
  c04cb8:	0c038e00 	call	c038e0 <strlen>
  c04cbc:	100f883a 	mov	r7,r2
  c04cc0:	dcc14515 	stw	r19,1300(sp)
  c04cc4:	9880010e 	bge	r19,r2,c04ccc <___vfprintf_internal_r+0x1320>
  c04cc8:	d8814515 	stw	r2,1300(sp)
  c04ccc:	00803074 	movhi	r2,193
  c04cd0:	10820904 	addi	r2,r2,2084
  c04cd4:	dcc14615 	stw	r19,1304(sp)
  c04cd8:	d8814115 	stw	r2,1284(sp)
  c04cdc:	003dd506 	br	c04434 <___vfprintf_internal_r+0xa88>
  c04ce0:	d9401904 	addi	r5,sp,100
  c04ce4:	dd000f04 	addi	r20,sp,60
  c04ce8:	d9414115 	stw	r5,1284(sp)
  c04cec:	880a977a 	slli	r5,r17,29
  c04cf0:	d9814117 	ldw	r6,1284(sp)
  c04cf4:	8004d0fa 	srli	r2,r16,3
  c04cf8:	8806d0fa 	srli	r3,r17,3
  c04cfc:	810001cc 	andi	r4,r16,7
  c04d00:	2884b03a 	or	r2,r5,r2
  c04d04:	31bfffc4 	addi	r6,r6,-1
  c04d08:	21000c04 	addi	r4,r4,48
  c04d0c:	d9814115 	stw	r6,1284(sp)
  c04d10:	10cab03a 	or	r5,r2,r3
  c04d14:	31000005 	stb	r4,0(r6)
  c04d18:	1021883a 	mov	r16,r2
  c04d1c:	1823883a 	mov	r17,r3
  c04d20:	283ff21e 	bne	r5,zero,c04cec <___vfprintf_internal_r+0x1340>
  c04d24:	d8c14c17 	ldw	r3,1328(sp)
  c04d28:	1880004c 	andi	r2,r3,1
  c04d2c:	1005003a 	cmpeq	r2,r2,zero
  c04d30:	103db91e 	bne	r2,zero,c04418 <___vfprintf_internal_r+0xa6c>
  c04d34:	20803fcc 	andi	r2,r4,255
  c04d38:	1080201c 	xori	r2,r2,128
  c04d3c:	10bfe004 	addi	r2,r2,-128
  c04d40:	00c00c04 	movi	r3,48
  c04d44:	10fdb426 	beq	r2,r3,c04418 <___vfprintf_internal_r+0xa6c>
  c04d48:	31bfffc4 	addi	r6,r6,-1
  c04d4c:	d9814115 	stw	r6,1284(sp)
  c04d50:	30c00005 	stb	r3,0(r6)
  c04d54:	003db006 	br	c04418 <___vfprintf_internal_r+0xa6c>
  c04d58:	88800068 	cmpgeui	r2,r17,1
  c04d5c:	10002c1e 	bne	r2,zero,c04e10 <___vfprintf_internal_r+0x1464>
  c04d60:	8800021e 	bne	r17,zero,c04d6c <___vfprintf_internal_r+0x13c0>
  c04d64:	00800244 	movi	r2,9
  c04d68:	14002936 	bltu	r2,r16,c04e10 <___vfprintf_internal_r+0x1464>
  c04d6c:	d90018c4 	addi	r4,sp,99
  c04d70:	dd000f04 	addi	r20,sp,60
  c04d74:	d9014115 	stw	r4,1284(sp)
  c04d78:	d9014117 	ldw	r4,1284(sp)
  c04d7c:	80800c04 	addi	r2,r16,48
  c04d80:	20800005 	stb	r2,0(r4)
  c04d84:	003da406 	br	c04418 <___vfprintf_internal_r+0xa6c>
  c04d88:	dc400d17 	ldw	r17,52(sp)
  c04d8c:	07003074 	movhi	fp,193
  c04d90:	e7020f84 	addi	fp,fp,2110
  c04d94:	9425883a 	add	r18,r18,r16
  c04d98:	8c400044 	addi	r17,r17,1
  c04d9c:	008001c4 	movi	r2,7
  c04da0:	1f000015 	stw	fp,0(r3)
  c04da4:	1c000115 	stw	r16,4(r3)
  c04da8:	dc800e15 	stw	r18,56(sp)
  c04dac:	dc400d15 	stw	r17,52(sp)
  c04db0:	147de216 	blt	r2,r17,c0453c <___vfprintf_internal_r+0xb90>
  c04db4:	18c00204 	addi	r3,r3,8
  c04db8:	003c7a06 	br	c03fa4 <___vfprintf_internal_r+0x5f8>
  c04dbc:	01000084 	movi	r4,2
  c04dc0:	d8000405 	stb	zero,16(sp)
  c04dc4:	003d8706 	br	c043e4 <___vfprintf_internal_r+0xa38>
  c04dc8:	d9814c17 	ldw	r6,1328(sp)
  c04dcc:	30c4703a 	and	r2,r6,r3
  c04dd0:	1005003a 	cmpeq	r2,r2,zero
  c04dd4:	103cb926 	beq	r2,zero,c040bc <___vfprintf_internal_r+0x710>
  c04dd8:	d9014117 	ldw	r4,1284(sp)
  c04ddc:	94800044 	addi	r18,r18,1
  c04de0:	8c400044 	addi	r17,r17,1
  c04de4:	008001c4 	movi	r2,7
  c04de8:	a9000015 	stw	r4,0(r21)
  c04dec:	a8c00115 	stw	r3,4(r21)
  c04df0:	dc800e15 	stw	r18,56(sp)
  c04df4:	dc400d15 	stw	r17,52(sp)
  c04df8:	147e6616 	blt	r2,r17,c04794 <___vfprintf_internal_r+0xde8>
  c04dfc:	acc00204 	addi	r19,r21,8
  c04e00:	003cd706 	br	c04160 <___vfprintf_internal_r+0x7b4>
  c04e04:	07003074 	movhi	fp,193
  c04e08:	e7020f84 	addi	fp,fp,2110
  c04e0c:	003c4f06 	br	c03f4c <___vfprintf_internal_r+0x5a0>
  c04e10:	dd000f04 	addi	r20,sp,60
  c04e14:	dc801904 	addi	r18,sp,100
  c04e18:	8009883a 	mov	r4,r16
  c04e1c:	880b883a 	mov	r5,r17
  c04e20:	01800284 	movi	r6,10
  c04e24:	000f883a 	mov	r7,zero
  c04e28:	0c0b0a40 	call	c0b0a4 <__umoddi3>
  c04e2c:	12000c04 	addi	r8,r2,48
  c04e30:	94bfffc4 	addi	r18,r18,-1
  c04e34:	8009883a 	mov	r4,r16
  c04e38:	880b883a 	mov	r5,r17
  c04e3c:	01800284 	movi	r6,10
  c04e40:	000f883a 	mov	r7,zero
  c04e44:	92000005 	stb	r8,0(r18)
  c04e48:	0c0aac80 	call	c0aac8 <__udivdi3>
  c04e4c:	1009883a 	mov	r4,r2
  c04e50:	1021883a 	mov	r16,r2
  c04e54:	18800068 	cmpgeui	r2,r3,1
  c04e58:	1823883a 	mov	r17,r3
  c04e5c:	103fee1e 	bne	r2,zero,c04e18 <___vfprintf_internal_r+0x146c>
  c04e60:	1800021e 	bne	r3,zero,c04e6c <___vfprintf_internal_r+0x14c0>
  c04e64:	00800244 	movi	r2,9
  c04e68:	113feb36 	bltu	r2,r4,c04e18 <___vfprintf_internal_r+0x146c>
  c04e6c:	94bfffc4 	addi	r18,r18,-1
  c04e70:	dc814115 	stw	r18,1284(sp)
  c04e74:	003fc006 	br	c04d78 <___vfprintf_internal_r+0x13cc>
  c04e78:	d9014c17 	ldw	r4,1328(sp)
  c04e7c:	2080004c 	andi	r2,r4,1
  c04e80:	10009a1e 	bne	r2,zero,c050ec <___vfprintf_internal_r+0x1740>
  c04e84:	d9401904 	addi	r5,sp,100
  c04e88:	dd000f04 	addi	r20,sp,60
  c04e8c:	d9414115 	stw	r5,1284(sp)
  c04e90:	003d6106 	br	c04418 <___vfprintf_internal_r+0xa6c>
  c04e94:	d9014f17 	ldw	r4,1340(sp)
  c04e98:	b00b883a 	mov	r5,r22
  c04e9c:	d9800c04 	addi	r6,sp,48
  c04ea0:	0c039540 	call	c03954 <__sprint_r>
  c04ea4:	103c791e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c04ea8:	dc800e17 	ldw	r18,56(sp)
  c04eac:	d8c01904 	addi	r3,sp,100
  c04eb0:	003cff06 	br	c042b0 <___vfprintf_internal_r+0x904>
  c04eb4:	d8c14c17 	ldw	r3,1328(sp)
  c04eb8:	1880040c 	andi	r2,r3,16
  c04ebc:	1000711e 	bne	r2,zero,c05084 <___vfprintf_internal_r+0x16d8>
  c04ec0:	d9014c17 	ldw	r4,1328(sp)
  c04ec4:	2080100c 	andi	r2,r4,64
  c04ec8:	10006e26 	beq	r2,zero,c05084 <___vfprintf_internal_r+0x16d8>
  c04ecc:	3c00000b 	ldhu	r16,0(r7)
  c04ed0:	0023883a 	mov	r17,zero
  c04ed4:	39c00104 	addi	r7,r7,4
  c04ed8:	d9c14015 	stw	r7,1280(sp)
  c04edc:	003f0006 	br	c04ae0 <___vfprintf_internal_r+0x1134>
  c04ee0:	dc400d17 	ldw	r17,52(sp)
  c04ee4:	07003074 	movhi	fp,193
  c04ee8:	e7020f84 	addi	fp,fp,2110
  c04eec:	9425883a 	add	r18,r18,r16
  c04ef0:	8c400044 	addi	r17,r17,1
  c04ef4:	008001c4 	movi	r2,7
  c04ef8:	1f000015 	stw	fp,0(r3)
  c04efc:	1c000115 	stw	r16,4(r3)
  c04f00:	dc800e15 	stw	r18,56(sp)
  c04f04:	dc400d15 	stw	r17,52(sp)
  c04f08:	147d7616 	blt	r2,r17,c044e4 <___vfprintf_internal_r+0xb38>
  c04f0c:	18c00204 	addi	r3,r3,8
  c04f10:	003d7b06 	br	c04500 <___vfprintf_internal_r+0xb54>
  c04f14:	dc800e17 	ldw	r18,56(sp)
  c04f18:	dc400d17 	ldw	r17,52(sp)
  c04f1c:	07003074 	movhi	fp,193
  c04f20:	e7021384 	addi	fp,fp,2126
  c04f24:	003bc006 	br	c03e28 <___vfprintf_internal_r+0x47c>
  c04f28:	d9014f17 	ldw	r4,1340(sp)
  c04f2c:	b00b883a 	mov	r5,r22
  c04f30:	d9800c04 	addi	r6,sp,48
  c04f34:	0c039540 	call	c03954 <__sprint_r>
  c04f38:	103c541e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c04f3c:	dc800e17 	ldw	r18,56(sp)
  c04f40:	d8c01904 	addi	r3,sp,100
  c04f44:	003ce906 	br	c042ec <___vfprintf_internal_r+0x940>
  c04f48:	3c000017 	ldw	r16,0(r7)
  c04f4c:	0009883a 	mov	r4,zero
  c04f50:	39c00104 	addi	r7,r7,4
  c04f54:	0023883a 	mov	r17,zero
  c04f58:	d9c14015 	stw	r7,1280(sp)
  c04f5c:	d8000405 	stb	zero,16(sp)
  c04f60:	003d2006 	br	c043e4 <___vfprintf_internal_r+0xa38>
  c04f64:	38800017 	ldw	r2,0(r7)
  c04f68:	39c00104 	addi	r7,r7,4
  c04f6c:	d9c14015 	stw	r7,1280(sp)
  c04f70:	1023d7fa 	srai	r17,r2,31
  c04f74:	1021883a 	mov	r16,r2
  c04f78:	003d1806 	br	c043dc <___vfprintf_internal_r+0xa30>
  c04f7c:	3c000017 	ldw	r16,0(r7)
  c04f80:	01000044 	movi	r4,1
  c04f84:	39c00104 	addi	r7,r7,4
  c04f88:	0023883a 	mov	r17,zero
  c04f8c:	d9c14015 	stw	r7,1280(sp)
  c04f90:	d8000405 	stb	zero,16(sp)
  c04f94:	003d1306 	br	c043e4 <___vfprintf_internal_r+0xa38>
  c04f98:	00803074 	movhi	r2,193
  c04f9c:	10819604 	addi	r2,r2,1624
  c04fa0:	94800044 	addi	r18,r18,1
  c04fa4:	8c400044 	addi	r17,r17,1
  c04fa8:	a8800015 	stw	r2,0(r21)
  c04fac:	00c00044 	movi	r3,1
  c04fb0:	008001c4 	movi	r2,7
  c04fb4:	a8c00115 	stw	r3,4(r21)
  c04fb8:	dc800e15 	stw	r18,56(sp)
  c04fbc:	dc400d15 	stw	r17,52(sp)
  c04fc0:	1440ca16 	blt	r2,r17,c052ec <___vfprintf_internal_r+0x1940>
  c04fc4:	a8c00204 	addi	r3,r21,8
  c04fc8:	2000061e 	bne	r4,zero,c04fe4 <___vfprintf_internal_r+0x1638>
  c04fcc:	d9414717 	ldw	r5,1308(sp)
  c04fd0:	2800041e 	bne	r5,zero,c04fe4 <___vfprintf_internal_r+0x1638>
  c04fd4:	d9814c17 	ldw	r6,1328(sp)
  c04fd8:	3080004c 	andi	r2,r6,1
  c04fdc:	1005003a 	cmpeq	r2,r2,zero
  c04fe0:	103bf01e 	bne	r2,zero,c03fa4 <___vfprintf_internal_r+0x5f8>
  c04fe4:	00800044 	movi	r2,1
  c04fe8:	dc400d17 	ldw	r17,52(sp)
  c04fec:	18800115 	stw	r2,4(r3)
  c04ff0:	d8814917 	ldw	r2,1316(sp)
  c04ff4:	94800044 	addi	r18,r18,1
  c04ff8:	8c400044 	addi	r17,r17,1
  c04ffc:	18800015 	stw	r2,0(r3)
  c05000:	008001c4 	movi	r2,7
  c05004:	dc800e15 	stw	r18,56(sp)
  c05008:	dc400d15 	stw	r17,52(sp)
  c0500c:	1440ca16 	blt	r2,r17,c05338 <___vfprintf_internal_r+0x198c>
  c05010:	18c00204 	addi	r3,r3,8
  c05014:	0121c83a 	sub	r16,zero,r4
  c05018:	0400500e 	bge	zero,r16,c0515c <___vfprintf_internal_r+0x17b0>
  c0501c:	00800404 	movi	r2,16
  c05020:	1400800e 	bge	r2,r16,c05224 <___vfprintf_internal_r+0x1878>
  c05024:	1027883a 	mov	r19,r2
  c05028:	07003074 	movhi	fp,193
  c0502c:	e7020f84 	addi	fp,fp,2110
  c05030:	050001c4 	movi	r20,7
  c05034:	00000306 	br	c05044 <___vfprintf_internal_r+0x1698>
  c05038:	18c00204 	addi	r3,r3,8
  c0503c:	843ffc04 	addi	r16,r16,-16
  c05040:	9c007a0e 	bge	r19,r16,c0522c <___vfprintf_internal_r+0x1880>
  c05044:	94800404 	addi	r18,r18,16
  c05048:	8c400044 	addi	r17,r17,1
  c0504c:	1f000015 	stw	fp,0(r3)
  c05050:	1cc00115 	stw	r19,4(r3)
  c05054:	dc800e15 	stw	r18,56(sp)
  c05058:	dc400d15 	stw	r17,52(sp)
  c0505c:	a47ff60e 	bge	r20,r17,c05038 <___vfprintf_internal_r+0x168c>
  c05060:	d9014f17 	ldw	r4,1340(sp)
  c05064:	b00b883a 	mov	r5,r22
  c05068:	d9800c04 	addi	r6,sp,48
  c0506c:	0c039540 	call	c03954 <__sprint_r>
  c05070:	103c061e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c05074:	dc800e17 	ldw	r18,56(sp)
  c05078:	dc400d17 	ldw	r17,52(sp)
  c0507c:	d8c01904 	addi	r3,sp,100
  c05080:	003fee06 	br	c0503c <___vfprintf_internal_r+0x1690>
  c05084:	3c000017 	ldw	r16,0(r7)
  c05088:	0023883a 	mov	r17,zero
  c0508c:	39c00104 	addi	r7,r7,4
  c05090:	d9c14015 	stw	r7,1280(sp)
  c05094:	003e9206 	br	c04ae0 <___vfprintf_internal_r+0x1134>
  c05098:	d9401904 	addi	r5,sp,100
  c0509c:	dd000f04 	addi	r20,sp,60
  c050a0:	d9414115 	stw	r5,1284(sp)
  c050a4:	d9814417 	ldw	r6,1296(sp)
  c050a8:	880a973a 	slli	r5,r17,28
  c050ac:	8004d13a 	srli	r2,r16,4
  c050b0:	810003cc 	andi	r4,r16,15
  c050b4:	3109883a 	add	r4,r6,r4
  c050b8:	2884b03a 	or	r2,r5,r2
  c050bc:	21400003 	ldbu	r5,0(r4)
  c050c0:	d9014117 	ldw	r4,1284(sp)
  c050c4:	8806d13a 	srli	r3,r17,4
  c050c8:	1021883a 	mov	r16,r2
  c050cc:	213fffc4 	addi	r4,r4,-1
  c050d0:	d9014115 	stw	r4,1284(sp)
  c050d4:	d9814117 	ldw	r6,1284(sp)
  c050d8:	10c8b03a 	or	r4,r2,r3
  c050dc:	1823883a 	mov	r17,r3
  c050e0:	31400005 	stb	r5,0(r6)
  c050e4:	203fef1e 	bne	r4,zero,c050a4 <___vfprintf_internal_r+0x16f8>
  c050e8:	003ccb06 	br	c04418 <___vfprintf_internal_r+0xa6c>
  c050ec:	00800c04 	movi	r2,48
  c050f0:	d98018c4 	addi	r6,sp,99
  c050f4:	dd000f04 	addi	r20,sp,60
  c050f8:	d88018c5 	stb	r2,99(sp)
  c050fc:	d9814115 	stw	r6,1284(sp)
  c05100:	003cc506 	br	c04418 <___vfprintf_internal_r+0xa6c>
  c05104:	dc400d17 	ldw	r17,52(sp)
  c05108:	07003074 	movhi	fp,193
  c0510c:	e7021384 	addi	fp,fp,2126
  c05110:	003bc706 	br	c04030 <___vfprintf_internal_r+0x684>
  c05114:	d9414c17 	ldw	r5,1328(sp)
  c05118:	2880040c 	andi	r2,r5,16
  c0511c:	10007c26 	beq	r2,zero,c05310 <___vfprintf_internal_r+0x1964>
  c05120:	38800017 	ldw	r2,0(r7)
  c05124:	39c00104 	addi	r7,r7,4
  c05128:	d9c14015 	stw	r7,1280(sp)
  c0512c:	d9814b17 	ldw	r6,1324(sp)
  c05130:	d9c14017 	ldw	r7,1280(sp)
  c05134:	11800015 	stw	r6,0(r2)
  c05138:	003a7806 	br	c03b1c <___vfprintf_internal_r+0x170>
  c0513c:	d9014f17 	ldw	r4,1340(sp)
  c05140:	b00b883a 	mov	r5,r22
  c05144:	d9800c04 	addi	r6,sp,48
  c05148:	0c039540 	call	c03954 <__sprint_r>
  c0514c:	103bcf1e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c05150:	dc800e17 	ldw	r18,56(sp)
  c05154:	dc400d17 	ldw	r17,52(sp)
  c05158:	d8c01904 	addi	r3,sp,100
  c0515c:	d9014717 	ldw	r4,1308(sp)
  c05160:	d9414117 	ldw	r5,1284(sp)
  c05164:	8c400044 	addi	r17,r17,1
  c05168:	9125883a 	add	r18,r18,r4
  c0516c:	008001c4 	movi	r2,7
  c05170:	19400015 	stw	r5,0(r3)
  c05174:	19000115 	stw	r4,4(r3)
  c05178:	dc800e15 	stw	r18,56(sp)
  c0517c:	dc400d15 	stw	r17,52(sp)
  c05180:	147cee16 	blt	r2,r17,c0453c <___vfprintf_internal_r+0xb90>
  c05184:	18c00204 	addi	r3,r3,8
  c05188:	003b8606 	br	c03fa4 <___vfprintf_internal_r+0x5f8>
  c0518c:	38c00017 	ldw	r3,0(r7)
  c05190:	39000204 	addi	r4,r7,8
  c05194:	d9014015 	stw	r4,1280(sp)
  c05198:	d8c14215 	stw	r3,1288(sp)
  c0519c:	39c00117 	ldw	r7,4(r7)
  c051a0:	d9c14315 	stw	r7,1292(sp)
  c051a4:	003e2006 	br	c04a28 <___vfprintf_internal_r+0x107c>
  c051a8:	0005883a 	mov	r2,zero
  c051ac:	1409c83a 	sub	r4,r2,r16
  c051b0:	1105803a 	cmpltu	r2,r2,r4
  c051b4:	044bc83a 	sub	r5,zero,r17
  c051b8:	2885c83a 	sub	r2,r5,r2
  c051bc:	2021883a 	mov	r16,r4
  c051c0:	1023883a 	mov	r17,r2
  c051c4:	01000044 	movi	r4,1
  c051c8:	00800b44 	movi	r2,45
  c051cc:	d8800405 	stb	r2,16(sp)
  c051d0:	003c8406 	br	c043e4 <___vfprintf_internal_r+0xa38>
  c051d4:	d9014f17 	ldw	r4,1340(sp)
  c051d8:	b00b883a 	mov	r5,r22
  c051dc:	d9800c04 	addi	r6,sp,48
  c051e0:	0c039540 	call	c03954 <__sprint_r>
  c051e4:	103ba91e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c051e8:	dc800e17 	ldw	r18,56(sp)
  c051ec:	dc400d17 	ldw	r17,52(sp)
  c051f0:	d9000517 	ldw	r4,20(sp)
  c051f4:	d9401904 	addi	r5,sp,100
  c051f8:	003da706 	br	c04898 <___vfprintf_internal_r+0xeec>
  c051fc:	d9014f17 	ldw	r4,1340(sp)
  c05200:	b00b883a 	mov	r5,r22
  c05204:	d9800c04 	addi	r6,sp,48
  c05208:	0c039540 	call	c03954 <__sprint_r>
  c0520c:	103b9f1e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c05210:	dc800e17 	ldw	r18,56(sp)
  c05214:	dc400d17 	ldw	r17,52(sp)
  c05218:	d9000517 	ldw	r4,20(sp)
  c0521c:	d8c01904 	addi	r3,sp,100
  c05220:	003d9106 	br	c04868 <___vfprintf_internal_r+0xebc>
  c05224:	07003074 	movhi	fp,193
  c05228:	e7020f84 	addi	fp,fp,2110
  c0522c:	9425883a 	add	r18,r18,r16
  c05230:	8c400044 	addi	r17,r17,1
  c05234:	008001c4 	movi	r2,7
  c05238:	1f000015 	stw	fp,0(r3)
  c0523c:	1c000115 	stw	r16,4(r3)
  c05240:	dc800e15 	stw	r18,56(sp)
  c05244:	dc400d15 	stw	r17,52(sp)
  c05248:	147fbc16 	blt	r2,r17,c0513c <___vfprintf_internal_r+0x1790>
  c0524c:	18c00204 	addi	r3,r3,8
  c05250:	003fc206 	br	c0515c <___vfprintf_internal_r+0x17b0>
  c05254:	d9014f17 	ldw	r4,1340(sp)
  c05258:	b00b883a 	mov	r5,r22
  c0525c:	d9800c04 	addi	r6,sp,48
  c05260:	0c039540 	call	c03954 <__sprint_r>
  c05264:	103b891e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c05268:	dc800e17 	ldw	r18,56(sp)
  c0526c:	d9000517 	ldw	r4,20(sp)
  c05270:	d8c01904 	addi	r3,sp,100
  c05274:	003d0206 	br	c04680 <___vfprintf_internal_r+0xcd4>
  c05278:	07003074 	movhi	fp,193
  c0527c:	e7020f84 	addi	fp,fp,2110
  c05280:	003be406 	br	c04214 <___vfprintf_internal_r+0x868>
  c05284:	00803074 	movhi	r2,193
  c05288:	1081ff04 	addi	r2,r2,2044
  c0528c:	d8814115 	stw	r2,1284(sp)
  c05290:	003df506 	br	c04a68 <___vfprintf_internal_r+0x10bc>
  c05294:	d9014217 	ldw	r4,1288(sp)
  c05298:	d9414317 	ldw	r5,1292(sp)
  c0529c:	0c0a38c0 	call	c0a38c <__isnand>
  c052a0:	10003926 	beq	r2,zero,c05388 <___vfprintf_internal_r+0x19dc>
  c052a4:	d9414d17 	ldw	r5,1332(sp)
  c052a8:	008011c4 	movi	r2,71
  c052ac:	1140ce16 	blt	r2,r5,c055e8 <___vfprintf_internal_r+0x1c3c>
  c052b0:	01803074 	movhi	r6,193
  c052b4:	31820004 	addi	r6,r6,2048
  c052b8:	d9814115 	stw	r6,1284(sp)
  c052bc:	003dea06 	br	c04a68 <___vfprintf_internal_r+0x10bc>
  c052c0:	d9014c17 	ldw	r4,1328(sp)
  c052c4:	bdc00044 	addi	r23,r23,1
  c052c8:	b8c00007 	ldb	r3,0(r23)
  c052cc:	21000814 	ori	r4,r4,32
  c052d0:	d9014c15 	stw	r4,1328(sp)
  c052d4:	003a3406 	br	c03ba8 <___vfprintf_internal_r+0x1fc>
  c052d8:	dcc14515 	stw	r19,1300(sp)
  c052dc:	98011016 	blt	r19,zero,c05720 <___vfprintf_internal_r+0x1d74>
  c052e0:	980f883a 	mov	r7,r19
  c052e4:	d8014615 	stw	zero,1304(sp)
  c052e8:	003c5206 	br	c04434 <___vfprintf_internal_r+0xa88>
  c052ec:	d9014f17 	ldw	r4,1340(sp)
  c052f0:	b00b883a 	mov	r5,r22
  c052f4:	d9800c04 	addi	r6,sp,48
  c052f8:	0c039540 	call	c03954 <__sprint_r>
  c052fc:	103b631e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c05300:	dc800e17 	ldw	r18,56(sp)
  c05304:	d9000517 	ldw	r4,20(sp)
  c05308:	d8c01904 	addi	r3,sp,100
  c0530c:	003f2e06 	br	c04fc8 <___vfprintf_internal_r+0x161c>
  c05310:	d8c14c17 	ldw	r3,1328(sp)
  c05314:	1880100c 	andi	r2,r3,64
  c05318:	1000a026 	beq	r2,zero,c0559c <___vfprintf_internal_r+0x1bf0>
  c0531c:	38800017 	ldw	r2,0(r7)
  c05320:	39c00104 	addi	r7,r7,4
  c05324:	d9c14015 	stw	r7,1280(sp)
  c05328:	d9014b17 	ldw	r4,1324(sp)
  c0532c:	d9c14017 	ldw	r7,1280(sp)
  c05330:	1100000d 	sth	r4,0(r2)
  c05334:	0039f906 	br	c03b1c <___vfprintf_internal_r+0x170>
  c05338:	d9014f17 	ldw	r4,1340(sp)
  c0533c:	b00b883a 	mov	r5,r22
  c05340:	d9800c04 	addi	r6,sp,48
  c05344:	0c039540 	call	c03954 <__sprint_r>
  c05348:	103b501e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c0534c:	dc800e17 	ldw	r18,56(sp)
  c05350:	dc400d17 	ldw	r17,52(sp)
  c05354:	d9000517 	ldw	r4,20(sp)
  c05358:	d8c01904 	addi	r3,sp,100
  c0535c:	003f2d06 	br	c05014 <___vfprintf_internal_r+0x1668>
  c05360:	00800184 	movi	r2,6
  c05364:	14c09a36 	bltu	r2,r19,c055d0 <___vfprintf_internal_r+0x1c24>
  c05368:	dcc14515 	stw	r19,1300(sp)
  c0536c:	9800010e 	bge	r19,zero,c05374 <___vfprintf_internal_r+0x19c8>
  c05370:	d8014515 	stw	zero,1300(sp)
  c05374:	00803074 	movhi	r2,193
  c05378:	10820204 	addi	r2,r2,2056
  c0537c:	980f883a 	mov	r7,r19
  c05380:	d8814115 	stw	r2,1284(sp)
  c05384:	003a7806 	br	c03d68 <___vfprintf_internal_r+0x3bc>
  c05388:	00bfffc4 	movi	r2,-1
  c0538c:	9880e226 	beq	r19,r2,c05718 <___vfprintf_internal_r+0x1d6c>
  c05390:	d9414d17 	ldw	r5,1332(sp)
  c05394:	008019c4 	movi	r2,103
  c05398:	2880dc26 	beq	r5,r2,c0570c <___vfprintf_internal_r+0x1d60>
  c0539c:	008011c4 	movi	r2,71
  c053a0:	2880da26 	beq	r5,r2,c0570c <___vfprintf_internal_r+0x1d60>
  c053a4:	d9414c17 	ldw	r5,1328(sp)
  c053a8:	d9014317 	ldw	r4,1292(sp)
  c053ac:	d9814217 	ldw	r6,1288(sp)
  c053b0:	29404014 	ori	r5,r5,256
  c053b4:	d9414c15 	stw	r5,1328(sp)
  c053b8:	2000cc16 	blt	r4,zero,c056ec <___vfprintf_internal_r+0x1d40>
  c053bc:	3021883a 	mov	r16,r6
  c053c0:	2023883a 	mov	r17,r4
  c053c4:	0039883a 	mov	fp,zero
  c053c8:	d9414d17 	ldw	r5,1332(sp)
  c053cc:	00801984 	movi	r2,102
  c053d0:	2880b726 	beq	r5,r2,c056b0 <___vfprintf_internal_r+0x1d04>
  c053d4:	00801184 	movi	r2,70
  c053d8:	2880b526 	beq	r5,r2,c056b0 <___vfprintf_internal_r+0x1d04>
  c053dc:	00801944 	movi	r2,101
  c053e0:	2880c826 	beq	r5,r2,c05704 <___vfprintf_internal_r+0x1d58>
  c053e4:	00801144 	movi	r2,69
  c053e8:	2880c626 	beq	r5,r2,c05704 <___vfprintf_internal_r+0x1d58>
  c053ec:	9829883a 	mov	r20,r19
  c053f0:	d9014f17 	ldw	r4,1340(sp)
  c053f4:	d8800504 	addi	r2,sp,20
  c053f8:	880d883a 	mov	r6,r17
  c053fc:	d8800115 	stw	r2,4(sp)
  c05400:	d8c00604 	addi	r3,sp,24
  c05404:	d8800704 	addi	r2,sp,28
  c05408:	800b883a 	mov	r5,r16
  c0540c:	01c00084 	movi	r7,2
  c05410:	d8c00215 	stw	r3,8(sp)
  c05414:	d8800315 	stw	r2,12(sp)
  c05418:	dd000015 	stw	r20,0(sp)
  c0541c:	0c05bd00 	call	c05bd0 <_dtoa_r>
  c05420:	d9814d17 	ldw	r6,1332(sp)
  c05424:	d8814115 	stw	r2,1284(sp)
  c05428:	008019c4 	movi	r2,103
  c0542c:	30809526 	beq	r6,r2,c05684 <___vfprintf_internal_r+0x1cd8>
  c05430:	d8c14d17 	ldw	r3,1332(sp)
  c05434:	008011c4 	movi	r2,71
  c05438:	18809226 	beq	r3,r2,c05684 <___vfprintf_internal_r+0x1cd8>
  c0543c:	d9414117 	ldw	r5,1284(sp)
  c05440:	d9814d17 	ldw	r6,1332(sp)
  c05444:	00801984 	movi	r2,102
  c05448:	2d25883a 	add	r18,r5,r20
  c0544c:	30808626 	beq	r6,r2,c05668 <___vfprintf_internal_r+0x1cbc>
  c05450:	00801184 	movi	r2,70
  c05454:	30808426 	beq	r6,r2,c05668 <___vfprintf_internal_r+0x1cbc>
  c05458:	000d883a 	mov	r6,zero
  c0545c:	000f883a 	mov	r7,zero
  c05460:	880b883a 	mov	r5,r17
  c05464:	8009883a 	mov	r4,r16
  c05468:	0c0ba180 	call	c0ba18 <__eqdf2>
  c0546c:	1000751e 	bne	r2,zero,c05644 <___vfprintf_internal_r+0x1c98>
  c05470:	9005883a 	mov	r2,r18
  c05474:	dc800715 	stw	r18,28(sp)
  c05478:	d9014117 	ldw	r4,1284(sp)
  c0547c:	d9414d17 	ldw	r5,1332(sp)
  c05480:	00c019c4 	movi	r3,103
  c05484:	1125c83a 	sub	r18,r2,r4
  c05488:	28c06826 	beq	r5,r3,c0562c <___vfprintf_internal_r+0x1c80>
  c0548c:	008011c4 	movi	r2,71
  c05490:	28806626 	beq	r5,r2,c0562c <___vfprintf_internal_r+0x1c80>
  c05494:	d9000517 	ldw	r4,20(sp)
  c05498:	d8c14d17 	ldw	r3,1332(sp)
  c0549c:	00801944 	movi	r2,101
  c054a0:	10c05516 	blt	r2,r3,c055f8 <___vfprintf_internal_r+0x1c4c>
  c054a4:	213fffc4 	addi	r4,r4,-1
  c054a8:	d9000515 	stw	r4,20(sp)
  c054ac:	d8c00805 	stb	r3,32(sp)
  c054b0:	2021883a 	mov	r16,r4
  c054b4:	2000c116 	blt	r4,zero,c057bc <___vfprintf_internal_r+0x1e10>
  c054b8:	00800ac4 	movi	r2,43
  c054bc:	d8800845 	stb	r2,33(sp)
  c054c0:	00800244 	movi	r2,9
  c054c4:	1400af0e 	bge	r2,r16,c05784 <___vfprintf_internal_r+0x1dd8>
  c054c8:	1027883a 	mov	r19,r2
  c054cc:	dc400b84 	addi	r17,sp,46
  c054d0:	8009883a 	mov	r4,r16
  c054d4:	01400284 	movi	r5,10
  c054d8:	0c0c0780 	call	c0c078 <__modsi3>
  c054dc:	10800c04 	addi	r2,r2,48
  c054e0:	8c7fffc4 	addi	r17,r17,-1
  c054e4:	8009883a 	mov	r4,r16
  c054e8:	01400284 	movi	r5,10
  c054ec:	88800005 	stb	r2,0(r17)
  c054f0:	0c0c0180 	call	c0c018 <__divsi3>
  c054f4:	1021883a 	mov	r16,r2
  c054f8:	98bff516 	blt	r19,r2,c054d0 <___vfprintf_internal_r+0x1b24>
  c054fc:	10c00c04 	addi	r3,r2,48
  c05500:	d88009c4 	addi	r2,sp,39
  c05504:	108001c4 	addi	r2,r2,7
  c05508:	897fffc4 	addi	r5,r17,-1
  c0550c:	88ffffc5 	stb	r3,-1(r17)
  c05510:	2880a72e 	bgeu	r5,r2,c057b0 <___vfprintf_internal_r+0x1e04>
  c05514:	1009883a 	mov	r4,r2
  c05518:	d9800804 	addi	r6,sp,32
  c0551c:	d8c00884 	addi	r3,sp,34
  c05520:	28800003 	ldbu	r2,0(r5)
  c05524:	29400044 	addi	r5,r5,1
  c05528:	18800005 	stb	r2,0(r3)
  c0552c:	18c00044 	addi	r3,r3,1
  c05530:	293ffb36 	bltu	r5,r4,c05520 <___vfprintf_internal_r+0x1b74>
  c05534:	1987c83a 	sub	r3,r3,r6
  c05538:	00800044 	movi	r2,1
  c0553c:	d8c14815 	stw	r3,1312(sp)
  c05540:	90cf883a 	add	r7,r18,r3
  c05544:	1480960e 	bge	r2,r18,c057a0 <___vfprintf_internal_r+0x1df4>
  c05548:	39c00044 	addi	r7,r7,1
  c0554c:	d9c14515 	stw	r7,1300(sp)
  c05550:	38003416 	blt	r7,zero,c05624 <___vfprintf_internal_r+0x1c78>
  c05554:	e0803fcc 	andi	r2,fp,255
  c05558:	1080201c 	xori	r2,r2,128
  c0555c:	10bfe004 	addi	r2,r2,-128
  c05560:	10004e26 	beq	r2,zero,c0569c <___vfprintf_internal_r+0x1cf0>
  c05564:	00800b44 	movi	r2,45
  c05568:	dc814715 	stw	r18,1308(sp)
  c0556c:	d8014615 	stw	zero,1304(sp)
  c05570:	d8800405 	stb	r2,16(sp)
  c05574:	003bb106 	br	c0443c <___vfprintf_internal_r+0xa90>
  c05578:	00800b44 	movi	r2,45
  c0557c:	d8800405 	stb	r2,16(sp)
  c05580:	003d3306 	br	c04a50 <___vfprintf_internal_r+0x10a4>
  c05584:	d9014f17 	ldw	r4,1340(sp)
  c05588:	b00b883a 	mov	r5,r22
  c0558c:	d9800c04 	addi	r6,sp,48
  c05590:	0c039540 	call	c03954 <__sprint_r>
  c05594:	103abd1e 	bne	r2,zero,c0408c <___vfprintf_internal_r+0x6e0>
  c05598:	003abb06 	br	c04088 <___vfprintf_internal_r+0x6dc>
  c0559c:	38800017 	ldw	r2,0(r7)
  c055a0:	39c00104 	addi	r7,r7,4
  c055a4:	d9c14015 	stw	r7,1280(sp)
  c055a8:	d9414b17 	ldw	r5,1324(sp)
  c055ac:	d9c14017 	ldw	r7,1280(sp)
  c055b0:	11400015 	stw	r5,0(r2)
  c055b4:	00395906 	br	c03b1c <___vfprintf_internal_r+0x170>
  c055b8:	980f883a 	mov	r7,r19
  c055bc:	dcc14515 	stw	r19,1300(sp)
  c055c0:	d8014615 	stw	zero,1304(sp)
  c055c4:	003b9b06 	br	c04434 <___vfprintf_internal_r+0xa88>
  c055c8:	0027883a 	mov	r19,zero
  c055cc:	00397806 	br	c03bb0 <___vfprintf_internal_r+0x204>
  c055d0:	00c03074 	movhi	r3,193
  c055d4:	18c20204 	addi	r3,r3,2056
  c055d8:	100f883a 	mov	r7,r2
  c055dc:	d8814515 	stw	r2,1300(sp)
  c055e0:	d8c14115 	stw	r3,1284(sp)
  c055e4:	0039e006 	br	c03d68 <___vfprintf_internal_r+0x3bc>
  c055e8:	00803074 	movhi	r2,193
  c055ec:	10820104 	addi	r2,r2,2052
  c055f0:	d8814115 	stw	r2,1284(sp)
  c055f4:	003d1c06 	br	c04a68 <___vfprintf_internal_r+0x10bc>
  c055f8:	d9414d17 	ldw	r5,1332(sp)
  c055fc:	00801984 	movi	r2,102
  c05600:	28804926 	beq	r5,r2,c05728 <___vfprintf_internal_r+0x1d7c>
  c05604:	200f883a 	mov	r7,r4
  c05608:	24805716 	blt	r4,r18,c05768 <___vfprintf_internal_r+0x1dbc>
  c0560c:	d9414c17 	ldw	r5,1328(sp)
  c05610:	2880004c 	andi	r2,r5,1
  c05614:	10000126 	beq	r2,zero,c0561c <___vfprintf_internal_r+0x1c70>
  c05618:	21c00044 	addi	r7,r4,1
  c0561c:	d9c14515 	stw	r7,1300(sp)
  c05620:	383fcc0e 	bge	r7,zero,c05554 <___vfprintf_internal_r+0x1ba8>
  c05624:	d8014515 	stw	zero,1300(sp)
  c05628:	003fca06 	br	c05554 <___vfprintf_internal_r+0x1ba8>
  c0562c:	d9000517 	ldw	r4,20(sp)
  c05630:	00bfff04 	movi	r2,-4
  c05634:	1100480e 	bge	r2,r4,c05758 <___vfprintf_internal_r+0x1dac>
  c05638:	99004716 	blt	r19,r4,c05758 <___vfprintf_internal_r+0x1dac>
  c0563c:	d8c14d15 	stw	r3,1332(sp)
  c05640:	003ff006 	br	c05604 <___vfprintf_internal_r+0x1c58>
  c05644:	d8800717 	ldw	r2,28(sp)
  c05648:	14bf8b2e 	bgeu	r2,r18,c05478 <___vfprintf_internal_r+0x1acc>
  c0564c:	9007883a 	mov	r3,r18
  c05650:	01000c04 	movi	r4,48
  c05654:	11000005 	stb	r4,0(r2)
  c05658:	10800044 	addi	r2,r2,1
  c0565c:	d8800715 	stw	r2,28(sp)
  c05660:	18bffc1e 	bne	r3,r2,c05654 <___vfprintf_internal_r+0x1ca8>
  c05664:	003f8406 	br	c05478 <___vfprintf_internal_r+0x1acc>
  c05668:	d8814117 	ldw	r2,1284(sp)
  c0566c:	10c00007 	ldb	r3,0(r2)
  c05670:	00800c04 	movi	r2,48
  c05674:	18805b26 	beq	r3,r2,c057e4 <___vfprintf_internal_r+0x1e38>
  c05678:	d9000517 	ldw	r4,20(sp)
  c0567c:	9125883a 	add	r18,r18,r4
  c05680:	003f7506 	br	c05458 <___vfprintf_internal_r+0x1aac>
  c05684:	d9014c17 	ldw	r4,1328(sp)
  c05688:	2080004c 	andi	r2,r4,1
  c0568c:	1005003a 	cmpeq	r2,r2,zero
  c05690:	103f6a26 	beq	r2,zero,c0543c <___vfprintf_internal_r+0x1a90>
  c05694:	d8800717 	ldw	r2,28(sp)
  c05698:	003f7706 	br	c05478 <___vfprintf_internal_r+0x1acc>
  c0569c:	d9c14515 	stw	r7,1300(sp)
  c056a0:	38004d16 	blt	r7,zero,c057d8 <___vfprintf_internal_r+0x1e2c>
  c056a4:	dc814715 	stw	r18,1308(sp)
  c056a8:	d8014615 	stw	zero,1304(sp)
  c056ac:	003b6106 	br	c04434 <___vfprintf_internal_r+0xa88>
  c056b0:	d9014f17 	ldw	r4,1340(sp)
  c056b4:	d8800504 	addi	r2,sp,20
  c056b8:	d8800115 	stw	r2,4(sp)
  c056bc:	d8c00604 	addi	r3,sp,24
  c056c0:	d8800704 	addi	r2,sp,28
  c056c4:	800b883a 	mov	r5,r16
  c056c8:	880d883a 	mov	r6,r17
  c056cc:	01c000c4 	movi	r7,3
  c056d0:	d8c00215 	stw	r3,8(sp)
  c056d4:	d8800315 	stw	r2,12(sp)
  c056d8:	dcc00015 	stw	r19,0(sp)
  c056dc:	9829883a 	mov	r20,r19
  c056e0:	0c05bd00 	call	c05bd0 <_dtoa_r>
  c056e4:	d8814115 	stw	r2,1284(sp)
  c056e8:	003f5106 	br	c05430 <___vfprintf_internal_r+0x1a84>
  c056ec:	d8c14217 	ldw	r3,1288(sp)
  c056f0:	d9014317 	ldw	r4,1292(sp)
  c056f4:	07000b44 	movi	fp,45
  c056f8:	1821883a 	mov	r16,r3
  c056fc:	2460003c 	xorhi	r17,r4,32768
  c05700:	003f3106 	br	c053c8 <___vfprintf_internal_r+0x1a1c>
  c05704:	9d000044 	addi	r20,r19,1
  c05708:	003f3906 	br	c053f0 <___vfprintf_internal_r+0x1a44>
  c0570c:	983f251e 	bne	r19,zero,c053a4 <___vfprintf_internal_r+0x19f8>
  c05710:	04c00044 	movi	r19,1
  c05714:	003f2306 	br	c053a4 <___vfprintf_internal_r+0x19f8>
  c05718:	04c00184 	movi	r19,6
  c0571c:	003f2106 	br	c053a4 <___vfprintf_internal_r+0x19f8>
  c05720:	d8014515 	stw	zero,1300(sp)
  c05724:	003eee06 	br	c052e0 <___vfprintf_internal_r+0x1934>
  c05728:	200f883a 	mov	r7,r4
  c0572c:	0100370e 	bge	zero,r4,c0580c <___vfprintf_internal_r+0x1e60>
  c05730:	9800031e 	bne	r19,zero,c05740 <___vfprintf_internal_r+0x1d94>
  c05734:	d9814c17 	ldw	r6,1328(sp)
  c05738:	3080004c 	andi	r2,r6,1
  c0573c:	103fb726 	beq	r2,zero,c0561c <___vfprintf_internal_r+0x1c70>
  c05740:	20800044 	addi	r2,r4,1
  c05744:	98a7883a 	add	r19,r19,r2
  c05748:	dcc14515 	stw	r19,1300(sp)
  c0574c:	980f883a 	mov	r7,r19
  c05750:	983f800e 	bge	r19,zero,c05554 <___vfprintf_internal_r+0x1ba8>
  c05754:	003fb306 	br	c05624 <___vfprintf_internal_r+0x1c78>
  c05758:	d9814d17 	ldw	r6,1332(sp)
  c0575c:	31bfff84 	addi	r6,r6,-2
  c05760:	d9814d15 	stw	r6,1332(sp)
  c05764:	003f4c06 	br	c05498 <___vfprintf_internal_r+0x1aec>
  c05768:	0100180e 	bge	zero,r4,c057cc <___vfprintf_internal_r+0x1e20>
  c0576c:	00800044 	movi	r2,1
  c05770:	1485883a 	add	r2,r2,r18
  c05774:	d8814515 	stw	r2,1300(sp)
  c05778:	100f883a 	mov	r7,r2
  c0577c:	103f750e 	bge	r2,zero,c05554 <___vfprintf_internal_r+0x1ba8>
  c05780:	003fa806 	br	c05624 <___vfprintf_internal_r+0x1c78>
  c05784:	80c00c04 	addi	r3,r16,48
  c05788:	00800c04 	movi	r2,48
  c0578c:	d8c008c5 	stb	r3,35(sp)
  c05790:	d9800804 	addi	r6,sp,32
  c05794:	d8c00904 	addi	r3,sp,36
  c05798:	d8800885 	stb	r2,34(sp)
  c0579c:	003f6506 	br	c05534 <___vfprintf_internal_r+0x1b88>
  c057a0:	d9014c17 	ldw	r4,1328(sp)
  c057a4:	2084703a 	and	r2,r4,r2
  c057a8:	103f9c26 	beq	r2,zero,c0561c <___vfprintf_internal_r+0x1c70>
  c057ac:	003f6606 	br	c05548 <___vfprintf_internal_r+0x1b9c>
  c057b0:	d9800804 	addi	r6,sp,32
  c057b4:	d8c00884 	addi	r3,sp,34
  c057b8:	003f5e06 	br	c05534 <___vfprintf_internal_r+0x1b88>
  c057bc:	00800b44 	movi	r2,45
  c057c0:	0121c83a 	sub	r16,zero,r4
  c057c4:	d8800845 	stb	r2,33(sp)
  c057c8:	003f3d06 	br	c054c0 <___vfprintf_internal_r+0x1b14>
  c057cc:	00800084 	movi	r2,2
  c057d0:	1105c83a 	sub	r2,r2,r4
  c057d4:	003fe606 	br	c05770 <___vfprintf_internal_r+0x1dc4>
  c057d8:	d8014515 	stw	zero,1300(sp)
  c057dc:	dc814715 	stw	r18,1308(sp)
  c057e0:	003fb106 	br	c056a8 <___vfprintf_internal_r+0x1cfc>
  c057e4:	000d883a 	mov	r6,zero
  c057e8:	000f883a 	mov	r7,zero
  c057ec:	8009883a 	mov	r4,r16
  c057f0:	880b883a 	mov	r5,r17
  c057f4:	0c02c740 	call	c02c74 <__nedf2>
  c057f8:	103f9f26 	beq	r2,zero,c05678 <___vfprintf_internal_r+0x1ccc>
  c057fc:	00800044 	movi	r2,1
  c05800:	1509c83a 	sub	r4,r2,r20
  c05804:	d9000515 	stw	r4,20(sp)
  c05808:	003f9b06 	br	c05678 <___vfprintf_internal_r+0x1ccc>
  c0580c:	98000d1e 	bne	r19,zero,c05844 <___vfprintf_internal_r+0x1e98>
  c05810:	d8c14c17 	ldw	r3,1328(sp)
  c05814:	1880004c 	andi	r2,r3,1
  c05818:	10000a1e 	bne	r2,zero,c05844 <___vfprintf_internal_r+0x1e98>
  c0581c:	01000044 	movi	r4,1
  c05820:	200f883a 	mov	r7,r4
  c05824:	d9014515 	stw	r4,1300(sp)
  c05828:	003f4a06 	br	c05554 <___vfprintf_internal_r+0x1ba8>
  c0582c:	3cc00017 	ldw	r19,0(r7)
  c05830:	39c00104 	addi	r7,r7,4
  c05834:	983d0e0e 	bge	r19,zero,c04c70 <___vfprintf_internal_r+0x12c4>
  c05838:	b8c00007 	ldb	r3,0(r23)
  c0583c:	04ffffc4 	movi	r19,-1
  c05840:	0038d906 	br	c03ba8 <___vfprintf_internal_r+0x1fc>
  c05844:	9cc00084 	addi	r19,r19,2
  c05848:	dcc14515 	stw	r19,1300(sp)
  c0584c:	980f883a 	mov	r7,r19
  c05850:	983f400e 	bge	r19,zero,c05554 <___vfprintf_internal_r+0x1ba8>
  c05854:	003f7306 	br	c05624 <___vfprintf_internal_r+0x1c78>

00c05858 <__vfprintf_internal>:
  c05858:	00803074 	movhi	r2,193
  c0585c:	1089a904 	addi	r2,r2,9892
  c05860:	2013883a 	mov	r9,r4
  c05864:	11000017 	ldw	r4,0(r2)
  c05868:	2805883a 	mov	r2,r5
  c0586c:	300f883a 	mov	r7,r6
  c05870:	480b883a 	mov	r5,r9
  c05874:	100d883a 	mov	r6,r2
  c05878:	0c039ac1 	jmpi	c039ac <___vfprintf_internal_r>

00c0587c <__swsetup_r>:
  c0587c:	00803074 	movhi	r2,193
  c05880:	1089a904 	addi	r2,r2,9892
  c05884:	10c00017 	ldw	r3,0(r2)
  c05888:	defffd04 	addi	sp,sp,-12
  c0588c:	dc400115 	stw	r17,4(sp)
  c05890:	dc000015 	stw	r16,0(sp)
  c05894:	dfc00215 	stw	ra,8(sp)
  c05898:	2023883a 	mov	r17,r4
  c0589c:	2821883a 	mov	r16,r5
  c058a0:	18000226 	beq	r3,zero,c058ac <__swsetup_r+0x30>
  c058a4:	18800e17 	ldw	r2,56(r3)
  c058a8:	10001f26 	beq	r2,zero,c05928 <__swsetup_r+0xac>
  c058ac:	8100030b 	ldhu	r4,12(r16)
  c058b0:	2080020c 	andi	r2,r4,8
  c058b4:	10002826 	beq	r2,zero,c05958 <__swsetup_r+0xdc>
  c058b8:	81400417 	ldw	r5,16(r16)
  c058bc:	28001d26 	beq	r5,zero,c05934 <__swsetup_r+0xb8>
  c058c0:	2080004c 	andi	r2,r4,1
  c058c4:	1005003a 	cmpeq	r2,r2,zero
  c058c8:	10000b26 	beq	r2,zero,c058f8 <__swsetup_r+0x7c>
  c058cc:	2080008c 	andi	r2,r4,2
  c058d0:	10001226 	beq	r2,zero,c0591c <__swsetup_r+0xa0>
  c058d4:	0005883a 	mov	r2,zero
  c058d8:	80800215 	stw	r2,8(r16)
  c058dc:	28000b26 	beq	r5,zero,c0590c <__swsetup_r+0x90>
  c058e0:	0005883a 	mov	r2,zero
  c058e4:	dfc00217 	ldw	ra,8(sp)
  c058e8:	dc400117 	ldw	r17,4(sp)
  c058ec:	dc000017 	ldw	r16,0(sp)
  c058f0:	dec00304 	addi	sp,sp,12
  c058f4:	f800283a 	ret
  c058f8:	80800517 	ldw	r2,20(r16)
  c058fc:	80000215 	stw	zero,8(r16)
  c05900:	0085c83a 	sub	r2,zero,r2
  c05904:	80800615 	stw	r2,24(r16)
  c05908:	283ff51e 	bne	r5,zero,c058e0 <__swsetup_r+0x64>
  c0590c:	2080200c 	andi	r2,r4,128
  c05910:	103ff326 	beq	r2,zero,c058e0 <__swsetup_r+0x64>
  c05914:	00bfffc4 	movi	r2,-1
  c05918:	003ff206 	br	c058e4 <__swsetup_r+0x68>
  c0591c:	80800517 	ldw	r2,20(r16)
  c05920:	80800215 	stw	r2,8(r16)
  c05924:	003fed06 	br	c058dc <__swsetup_r+0x60>
  c05928:	1809883a 	mov	r4,r3
  c0592c:	0c0741c0 	call	c0741c <__sinit>
  c05930:	003fde06 	br	c058ac <__swsetup_r+0x30>
  c05934:	20c0a00c 	andi	r3,r4,640
  c05938:	00808004 	movi	r2,512
  c0593c:	18bfe026 	beq	r3,r2,c058c0 <__swsetup_r+0x44>
  c05940:	8809883a 	mov	r4,r17
  c05944:	800b883a 	mov	r5,r16
  c05948:	0c081940 	call	c08194 <__smakebuf_r>
  c0594c:	8100030b 	ldhu	r4,12(r16)
  c05950:	81400417 	ldw	r5,16(r16)
  c05954:	003fda06 	br	c058c0 <__swsetup_r+0x44>
  c05958:	2080040c 	andi	r2,r4,16
  c0595c:	103fed26 	beq	r2,zero,c05914 <__swsetup_r+0x98>
  c05960:	2080010c 	andi	r2,r4,4
  c05964:	10001226 	beq	r2,zero,c059b0 <__swsetup_r+0x134>
  c05968:	81400c17 	ldw	r5,48(r16)
  c0596c:	28000526 	beq	r5,zero,c05984 <__swsetup_r+0x108>
  c05970:	80801004 	addi	r2,r16,64
  c05974:	28800226 	beq	r5,r2,c05980 <__swsetup_r+0x104>
  c05978:	8809883a 	mov	r4,r17
  c0597c:	0c077a00 	call	c077a0 <_free_r>
  c05980:	80000c15 	stw	zero,48(r16)
  c05984:	8080030b 	ldhu	r2,12(r16)
  c05988:	81400417 	ldw	r5,16(r16)
  c0598c:	80000115 	stw	zero,4(r16)
  c05990:	10bff6cc 	andi	r2,r2,65499
  c05994:	8080030d 	sth	r2,12(r16)
  c05998:	81400015 	stw	r5,0(r16)
  c0599c:	8080030b 	ldhu	r2,12(r16)
  c059a0:	10800214 	ori	r2,r2,8
  c059a4:	113fffcc 	andi	r4,r2,65535
  c059a8:	8080030d 	sth	r2,12(r16)
  c059ac:	003fc306 	br	c058bc <__swsetup_r+0x40>
  c059b0:	81400417 	ldw	r5,16(r16)
  c059b4:	003ff906 	br	c0599c <__swsetup_r+0x120>

00c059b8 <quorem>:
  c059b8:	28c00417 	ldw	r3,16(r5)
  c059bc:	20800417 	ldw	r2,16(r4)
  c059c0:	defff604 	addi	sp,sp,-40
  c059c4:	ddc00715 	stw	r23,28(sp)
  c059c8:	dd400515 	stw	r21,20(sp)
  c059cc:	dfc00915 	stw	ra,36(sp)
  c059d0:	df000815 	stw	fp,32(sp)
  c059d4:	dd800615 	stw	r22,24(sp)
  c059d8:	dd000415 	stw	r20,16(sp)
  c059dc:	dcc00315 	stw	r19,12(sp)
  c059e0:	dc800215 	stw	r18,8(sp)
  c059e4:	dc400115 	stw	r17,4(sp)
  c059e8:	dc000015 	stw	r16,0(sp)
  c059ec:	202f883a 	mov	r23,r4
  c059f0:	282b883a 	mov	r21,r5
  c059f4:	10c07416 	blt	r2,r3,c05bc8 <quorem+0x210>
  c059f8:	1c7fffc4 	addi	r17,r3,-1
  c059fc:	8c45883a 	add	r2,r17,r17
  c05a00:	1085883a 	add	r2,r2,r2
  c05a04:	2c000504 	addi	r16,r5,20
  c05a08:	24c00504 	addi	r19,r4,20
  c05a0c:	14ed883a 	add	r22,r2,r19
  c05a10:	80a5883a 	add	r18,r16,r2
  c05a14:	b7000017 	ldw	fp,0(r22)
  c05a18:	91400017 	ldw	r5,0(r18)
  c05a1c:	e009883a 	mov	r4,fp
  c05a20:	29400044 	addi	r5,r5,1
  c05a24:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c05a28:	1029883a 	mov	r20,r2
  c05a2c:	10003c1e 	bne	r2,zero,c05b20 <quorem+0x168>
  c05a30:	a80b883a 	mov	r5,r21
  c05a34:	b809883a 	mov	r4,r23
  c05a38:	0c08ec00 	call	c08ec0 <__mcmp>
  c05a3c:	10002b16 	blt	r2,zero,c05aec <quorem+0x134>
  c05a40:	a5000044 	addi	r20,r20,1
  c05a44:	980f883a 	mov	r7,r19
  c05a48:	0011883a 	mov	r8,zero
  c05a4c:	0009883a 	mov	r4,zero
  c05a50:	81400017 	ldw	r5,0(r16)
  c05a54:	38c00017 	ldw	r3,0(r7)
  c05a58:	84000104 	addi	r16,r16,4
  c05a5c:	28bfffcc 	andi	r2,r5,65535
  c05a60:	2085883a 	add	r2,r4,r2
  c05a64:	11bfffcc 	andi	r6,r2,65535
  c05a68:	193fffcc 	andi	r4,r3,65535
  c05a6c:	1004d43a 	srli	r2,r2,16
  c05a70:	280ad43a 	srli	r5,r5,16
  c05a74:	2189c83a 	sub	r4,r4,r6
  c05a78:	2209883a 	add	r4,r4,r8
  c05a7c:	1806d43a 	srli	r3,r3,16
  c05a80:	288b883a 	add	r5,r5,r2
  c05a84:	200dd43a 	srai	r6,r4,16
  c05a88:	28bfffcc 	andi	r2,r5,65535
  c05a8c:	1887c83a 	sub	r3,r3,r2
  c05a90:	1987883a 	add	r3,r3,r6
  c05a94:	3900000d 	sth	r4,0(r7)
  c05a98:	38c0008d 	sth	r3,2(r7)
  c05a9c:	2808d43a 	srli	r4,r5,16
  c05aa0:	39c00104 	addi	r7,r7,4
  c05aa4:	1811d43a 	srai	r8,r3,16
  c05aa8:	943fe92e 	bgeu	r18,r16,c05a50 <quorem+0x98>
  c05aac:	8c45883a 	add	r2,r17,r17
  c05ab0:	1085883a 	add	r2,r2,r2
  c05ab4:	9885883a 	add	r2,r19,r2
  c05ab8:	10c00017 	ldw	r3,0(r2)
  c05abc:	18000b1e 	bne	r3,zero,c05aec <quorem+0x134>
  c05ac0:	113fff04 	addi	r4,r2,-4
  c05ac4:	9900082e 	bgeu	r19,r4,c05ae8 <quorem+0x130>
  c05ac8:	10bfff17 	ldw	r2,-4(r2)
  c05acc:	10000326 	beq	r2,zero,c05adc <quorem+0x124>
  c05ad0:	00000506 	br	c05ae8 <quorem+0x130>
  c05ad4:	20800017 	ldw	r2,0(r4)
  c05ad8:	1000031e 	bne	r2,zero,c05ae8 <quorem+0x130>
  c05adc:	213fff04 	addi	r4,r4,-4
  c05ae0:	8c7fffc4 	addi	r17,r17,-1
  c05ae4:	993ffb36 	bltu	r19,r4,c05ad4 <quorem+0x11c>
  c05ae8:	bc400415 	stw	r17,16(r23)
  c05aec:	a005883a 	mov	r2,r20
  c05af0:	dfc00917 	ldw	ra,36(sp)
  c05af4:	df000817 	ldw	fp,32(sp)
  c05af8:	ddc00717 	ldw	r23,28(sp)
  c05afc:	dd800617 	ldw	r22,24(sp)
  c05b00:	dd400517 	ldw	r21,20(sp)
  c05b04:	dd000417 	ldw	r20,16(sp)
  c05b08:	dcc00317 	ldw	r19,12(sp)
  c05b0c:	dc800217 	ldw	r18,8(sp)
  c05b10:	dc400117 	ldw	r17,4(sp)
  c05b14:	dc000017 	ldw	r16,0(sp)
  c05b18:	dec00a04 	addi	sp,sp,40
  c05b1c:	f800283a 	ret
  c05b20:	980f883a 	mov	r7,r19
  c05b24:	8011883a 	mov	r8,r16
  c05b28:	0013883a 	mov	r9,zero
  c05b2c:	000d883a 	mov	r6,zero
  c05b30:	40c00017 	ldw	r3,0(r8)
  c05b34:	39000017 	ldw	r4,0(r7)
  c05b38:	42000104 	addi	r8,r8,4
  c05b3c:	18bfffcc 	andi	r2,r3,65535
  c05b40:	a085383a 	mul	r2,r20,r2
  c05b44:	1806d43a 	srli	r3,r3,16
  c05b48:	217fffcc 	andi	r5,r4,65535
  c05b4c:	3085883a 	add	r2,r6,r2
  c05b50:	11bfffcc 	andi	r6,r2,65535
  c05b54:	a0c7383a 	mul	r3,r20,r3
  c05b58:	1004d43a 	srli	r2,r2,16
  c05b5c:	298bc83a 	sub	r5,r5,r6
  c05b60:	2a4b883a 	add	r5,r5,r9
  c05b64:	2008d43a 	srli	r4,r4,16
  c05b68:	1887883a 	add	r3,r3,r2
  c05b6c:	280dd43a 	srai	r6,r5,16
  c05b70:	18bfffcc 	andi	r2,r3,65535
  c05b74:	2089c83a 	sub	r4,r4,r2
  c05b78:	2189883a 	add	r4,r4,r6
  c05b7c:	3900008d 	sth	r4,2(r7)
  c05b80:	3940000d 	sth	r5,0(r7)
  c05b84:	180cd43a 	srli	r6,r3,16
  c05b88:	39c00104 	addi	r7,r7,4
  c05b8c:	2013d43a 	srai	r9,r4,16
  c05b90:	923fe72e 	bgeu	r18,r8,c05b30 <quorem+0x178>
  c05b94:	e03fa61e 	bne	fp,zero,c05a30 <quorem+0x78>
  c05b98:	b0ffff04 	addi	r3,r22,-4
  c05b9c:	98c0082e 	bgeu	r19,r3,c05bc0 <quorem+0x208>
  c05ba0:	b0bfff17 	ldw	r2,-4(r22)
  c05ba4:	10000326 	beq	r2,zero,c05bb4 <quorem+0x1fc>
  c05ba8:	00000506 	br	c05bc0 <quorem+0x208>
  c05bac:	18800017 	ldw	r2,0(r3)
  c05bb0:	1000031e 	bne	r2,zero,c05bc0 <quorem+0x208>
  c05bb4:	18ffff04 	addi	r3,r3,-4
  c05bb8:	8c7fffc4 	addi	r17,r17,-1
  c05bbc:	98fffb36 	bltu	r19,r3,c05bac <quorem+0x1f4>
  c05bc0:	bc400415 	stw	r17,16(r23)
  c05bc4:	003f9a06 	br	c05a30 <quorem+0x78>
  c05bc8:	0005883a 	mov	r2,zero
  c05bcc:	003fc806 	br	c05af0 <quorem+0x138>

00c05bd0 <_dtoa_r>:
  c05bd0:	22001017 	ldw	r8,64(r4)
  c05bd4:	deffda04 	addi	sp,sp,-152
  c05bd8:	dd402115 	stw	r21,132(sp)
  c05bdc:	dd002015 	stw	r20,128(sp)
  c05be0:	dc801e15 	stw	r18,120(sp)
  c05be4:	dc401d15 	stw	r17,116(sp)
  c05be8:	dfc02515 	stw	ra,148(sp)
  c05bec:	df002415 	stw	fp,144(sp)
  c05bf0:	ddc02315 	stw	r23,140(sp)
  c05bf4:	dd802215 	stw	r22,136(sp)
  c05bf8:	dcc01f15 	stw	r19,124(sp)
  c05bfc:	dc001c15 	stw	r16,112(sp)
  c05c00:	d9001615 	stw	r4,88(sp)
  c05c04:	3023883a 	mov	r17,r6
  c05c08:	2829883a 	mov	r20,r5
  c05c0c:	d9c01715 	stw	r7,92(sp)
  c05c10:	dc802817 	ldw	r18,160(sp)
  c05c14:	302b883a 	mov	r21,r6
  c05c18:	40000a26 	beq	r8,zero,c05c44 <_dtoa_r+0x74>
  c05c1c:	20801117 	ldw	r2,68(r4)
  c05c20:	400b883a 	mov	r5,r8
  c05c24:	40800115 	stw	r2,4(r8)
  c05c28:	20c01117 	ldw	r3,68(r4)
  c05c2c:	00800044 	movi	r2,1
  c05c30:	10c4983a 	sll	r2,r2,r3
  c05c34:	40800215 	stw	r2,8(r8)
  c05c38:	0c08d640 	call	c08d64 <_Bfree>
  c05c3c:	d8c01617 	ldw	r3,88(sp)
  c05c40:	18001015 	stw	zero,64(r3)
  c05c44:	8800a316 	blt	r17,zero,c05ed4 <_dtoa_r+0x304>
  c05c48:	90000015 	stw	zero,0(r18)
  c05c4c:	a8dffc2c 	andhi	r3,r21,32752
  c05c50:	009ffc34 	movhi	r2,32752
  c05c54:	18809126 	beq	r3,r2,c05e9c <_dtoa_r+0x2cc>
  c05c58:	000d883a 	mov	r6,zero
  c05c5c:	000f883a 	mov	r7,zero
  c05c60:	a009883a 	mov	r4,r20
  c05c64:	a80b883a 	mov	r5,r21
  c05c68:	dd001215 	stw	r20,72(sp)
  c05c6c:	dd401315 	stw	r21,76(sp)
  c05c70:	0c02c740 	call	c02c74 <__nedf2>
  c05c74:	1000171e 	bne	r2,zero,c05cd4 <_dtoa_r+0x104>
  c05c78:	d9802717 	ldw	r6,156(sp)
  c05c7c:	00800044 	movi	r2,1
  c05c80:	30800015 	stw	r2,0(r6)
  c05c84:	d8802917 	ldw	r2,164(sp)
  c05c88:	10029b26 	beq	r2,zero,c066f8 <_dtoa_r+0xb28>
  c05c8c:	d9002917 	ldw	r4,164(sp)
  c05c90:	00803074 	movhi	r2,193
  c05c94:	10819644 	addi	r2,r2,1625
  c05c98:	10ffffc4 	addi	r3,r2,-1
  c05c9c:	20800015 	stw	r2,0(r4)
  c05ca0:	1805883a 	mov	r2,r3
  c05ca4:	dfc02517 	ldw	ra,148(sp)
  c05ca8:	df002417 	ldw	fp,144(sp)
  c05cac:	ddc02317 	ldw	r23,140(sp)
  c05cb0:	dd802217 	ldw	r22,136(sp)
  c05cb4:	dd402117 	ldw	r21,132(sp)
  c05cb8:	dd002017 	ldw	r20,128(sp)
  c05cbc:	dcc01f17 	ldw	r19,124(sp)
  c05cc0:	dc801e17 	ldw	r18,120(sp)
  c05cc4:	dc401d17 	ldw	r17,116(sp)
  c05cc8:	dc001c17 	ldw	r16,112(sp)
  c05ccc:	dec02604 	addi	sp,sp,152
  c05cd0:	f800283a 	ret
  c05cd4:	d9001617 	ldw	r4,88(sp)
  c05cd8:	d9401217 	ldw	r5,72(sp)
  c05cdc:	d8800104 	addi	r2,sp,4
  c05ce0:	a80d883a 	mov	r6,r21
  c05ce4:	d9c00204 	addi	r7,sp,8
  c05ce8:	d8800015 	stw	r2,0(sp)
  c05cec:	0c093a00 	call	c093a0 <__d2b>
  c05cf0:	d8800715 	stw	r2,28(sp)
  c05cf4:	a804d53a 	srli	r2,r21,20
  c05cf8:	1101ffcc 	andi	r4,r2,2047
  c05cfc:	20008626 	beq	r4,zero,c05f18 <_dtoa_r+0x348>
  c05d00:	d8c01217 	ldw	r3,72(sp)
  c05d04:	00800434 	movhi	r2,16
  c05d08:	10bfffc4 	addi	r2,r2,-1
  c05d0c:	ddc00117 	ldw	r23,4(sp)
  c05d10:	a884703a 	and	r2,r21,r2
  c05d14:	1811883a 	mov	r8,r3
  c05d18:	124ffc34 	orhi	r9,r2,16368
  c05d1c:	25bf0044 	addi	r22,r4,-1023
  c05d20:	d8000815 	stw	zero,32(sp)
  c05d24:	0005883a 	mov	r2,zero
  c05d28:	00cffe34 	movhi	r3,16376
  c05d2c:	480b883a 	mov	r5,r9
  c05d30:	4009883a 	mov	r4,r8
  c05d34:	180f883a 	mov	r7,r3
  c05d38:	100d883a 	mov	r6,r2
  c05d3c:	0c029280 	call	c02928 <__subdf3>
  c05d40:	0218dbf4 	movhi	r8,25455
  c05d44:	4210d844 	addi	r8,r8,17249
  c05d48:	024ff4f4 	movhi	r9,16339
  c05d4c:	4a61e9c4 	addi	r9,r9,-30809
  c05d50:	480f883a 	mov	r7,r9
  c05d54:	400d883a 	mov	r6,r8
  c05d58:	180b883a 	mov	r5,r3
  c05d5c:	1009883a 	mov	r4,r2
  c05d60:	0c0b6540 	call	c0b654 <__muldf3>
  c05d64:	0222d874 	movhi	r8,35681
  c05d68:	42322cc4 	addi	r8,r8,-14157
  c05d6c:	024ff1f4 	movhi	r9,16327
  c05d70:	4a628a04 	addi	r9,r9,-30168
  c05d74:	480f883a 	mov	r7,r9
  c05d78:	400d883a 	mov	r6,r8
  c05d7c:	180b883a 	mov	r5,r3
  c05d80:	1009883a 	mov	r4,r2
  c05d84:	0c029a80 	call	c029a8 <__adddf3>
  c05d88:	b009883a 	mov	r4,r22
  c05d8c:	1021883a 	mov	r16,r2
  c05d90:	1823883a 	mov	r17,r3
  c05d94:	0c0bc380 	call	c0bc38 <__floatsidf>
  c05d98:	021427f4 	movhi	r8,20639
  c05d9c:	421e7ec4 	addi	r8,r8,31227
  c05da0:	024ff4f4 	movhi	r9,16339
  c05da4:	4a5104c4 	addi	r9,r9,17427
  c05da8:	480f883a 	mov	r7,r9
  c05dac:	400d883a 	mov	r6,r8
  c05db0:	180b883a 	mov	r5,r3
  c05db4:	1009883a 	mov	r4,r2
  c05db8:	0c0b6540 	call	c0b654 <__muldf3>
  c05dbc:	180f883a 	mov	r7,r3
  c05dc0:	880b883a 	mov	r5,r17
  c05dc4:	100d883a 	mov	r6,r2
  c05dc8:	8009883a 	mov	r4,r16
  c05dcc:	0c029a80 	call	c029a8 <__adddf3>
  c05dd0:	1009883a 	mov	r4,r2
  c05dd4:	180b883a 	mov	r5,r3
  c05dd8:	1021883a 	mov	r16,r2
  c05ddc:	1823883a 	mov	r17,r3
  c05de0:	0c0bd300 	call	c0bd30 <__fixdfsi>
  c05de4:	000d883a 	mov	r6,zero
  c05de8:	000f883a 	mov	r7,zero
  c05dec:	8009883a 	mov	r4,r16
  c05df0:	880b883a 	mov	r5,r17
  c05df4:	d8800d15 	stw	r2,52(sp)
  c05df8:	0c0bbb00 	call	c0bbb0 <__ltdf2>
  c05dfc:	10031716 	blt	r2,zero,c06a5c <_dtoa_r+0xe8c>
  c05e00:	d8c00d17 	ldw	r3,52(sp)
  c05e04:	00800584 	movi	r2,22
  c05e08:	10c1482e 	bgeu	r2,r3,c0632c <_dtoa_r+0x75c>
  c05e0c:	01000044 	movi	r4,1
  c05e10:	d9000c15 	stw	r4,48(sp)
  c05e14:	bd85c83a 	sub	r2,r23,r22
  c05e18:	11bfffc4 	addi	r6,r2,-1
  c05e1c:	30030b16 	blt	r6,zero,c06a4c <_dtoa_r+0xe7c>
  c05e20:	d9800a15 	stw	r6,40(sp)
  c05e24:	d8001115 	stw	zero,68(sp)
  c05e28:	d8c00d17 	ldw	r3,52(sp)
  c05e2c:	1802ff16 	blt	r3,zero,c06a2c <_dtoa_r+0xe5c>
  c05e30:	d9000a17 	ldw	r4,40(sp)
  c05e34:	d8c00915 	stw	r3,36(sp)
  c05e38:	d8001015 	stw	zero,64(sp)
  c05e3c:	20c9883a 	add	r4,r4,r3
  c05e40:	d9000a15 	stw	r4,40(sp)
  c05e44:	d9001717 	ldw	r4,92(sp)
  c05e48:	00800244 	movi	r2,9
  c05e4c:	11004636 	bltu	r2,r4,c05f68 <_dtoa_r+0x398>
  c05e50:	00800144 	movi	r2,5
  c05e54:	11020416 	blt	r2,r4,c06668 <_dtoa_r+0xa98>
  c05e58:	04400044 	movi	r17,1
  c05e5c:	d8c01717 	ldw	r3,92(sp)
  c05e60:	00800144 	movi	r2,5
  c05e64:	10c1ed36 	bltu	r2,r3,c0661c <_dtoa_r+0xa4c>
  c05e68:	18c5883a 	add	r2,r3,r3
  c05e6c:	1085883a 	add	r2,r2,r2
  c05e70:	00c03034 	movhi	r3,192
  c05e74:	18d7a104 	addi	r3,r3,24196
  c05e78:	10c5883a 	add	r2,r2,r3
  c05e7c:	11000017 	ldw	r4,0(r2)
  c05e80:	2000683a 	jmp	r4
  c05e84:	00c05f70 	cmpltui	r3,zero,381
  c05e88:	00c05f70 	cmpltui	r3,zero,381
  c05e8c:	00c06970 	cmpltui	r3,zero,421
  c05e90:	00c06948 	cmpgei	r3,zero,421
  c05e94:	00c0698c 	andi	r3,zero,422
  c05e98:	00c06998 	cmpnei	r3,zero,422
  c05e9c:	d9002717 	ldw	r4,156(sp)
  c05ea0:	0089c3c4 	movi	r2,9999
  c05ea4:	20800015 	stw	r2,0(r4)
  c05ea8:	a0001026 	beq	r20,zero,c05eec <_dtoa_r+0x31c>
  c05eac:	00c03074 	movhi	r3,193
  c05eb0:	18c21b04 	addi	r3,r3,2156
  c05eb4:	d9802917 	ldw	r6,164(sp)
  c05eb8:	303f7926 	beq	r6,zero,c05ca0 <_dtoa_r+0xd0>
  c05ebc:	188000c7 	ldb	r2,3(r3)
  c05ec0:	190000c4 	addi	r4,r3,3
  c05ec4:	1000101e 	bne	r2,zero,c05f08 <_dtoa_r+0x338>
  c05ec8:	d8802917 	ldw	r2,164(sp)
  c05ecc:	11000015 	stw	r4,0(r2)
  c05ed0:	003f7306 	br	c05ca0 <_dtoa_r+0xd0>
  c05ed4:	00a00034 	movhi	r2,32768
  c05ed8:	10bfffc4 	addi	r2,r2,-1
  c05edc:	00c00044 	movi	r3,1
  c05ee0:	88aa703a 	and	r21,r17,r2
  c05ee4:	90c00015 	stw	r3,0(r18)
  c05ee8:	003f5806 	br	c05c4c <_dtoa_r+0x7c>
  c05eec:	00800434 	movhi	r2,16
  c05ef0:	10bfffc4 	addi	r2,r2,-1
  c05ef4:	a884703a 	and	r2,r21,r2
  c05ef8:	103fec1e 	bne	r2,zero,c05eac <_dtoa_r+0x2dc>
  c05efc:	00c03074 	movhi	r3,193
  c05f00:	18c21804 	addi	r3,r3,2144
  c05f04:	003feb06 	br	c05eb4 <_dtoa_r+0x2e4>
  c05f08:	d8802917 	ldw	r2,164(sp)
  c05f0c:	19000204 	addi	r4,r3,8
  c05f10:	11000015 	stw	r4,0(r2)
  c05f14:	003f6206 	br	c05ca0 <_dtoa_r+0xd0>
  c05f18:	ddc00117 	ldw	r23,4(sp)
  c05f1c:	d8800217 	ldw	r2,8(sp)
  c05f20:	01000804 	movi	r4,32
  c05f24:	b8c10c84 	addi	r3,r23,1074
  c05f28:	18a3883a 	add	r17,r3,r2
  c05f2c:	2441b80e 	bge	r4,r17,c06610 <_dtoa_r+0xa40>
  c05f30:	00c01004 	movi	r3,64
  c05f34:	1c47c83a 	sub	r3,r3,r17
  c05f38:	88bff804 	addi	r2,r17,-32
  c05f3c:	a8c6983a 	sll	r3,r21,r3
  c05f40:	a084d83a 	srl	r2,r20,r2
  c05f44:	1888b03a 	or	r4,r3,r2
  c05f48:	0c0be080 	call	c0be08 <__floatunsidf>
  c05f4c:	1011883a 	mov	r8,r2
  c05f50:	00bf8434 	movhi	r2,65040
  c05f54:	01000044 	movi	r4,1
  c05f58:	10d3883a 	add	r9,r2,r3
  c05f5c:	8dbef344 	addi	r22,r17,-1075
  c05f60:	d9000815 	stw	r4,32(sp)
  c05f64:	003f6f06 	br	c05d24 <_dtoa_r+0x154>
  c05f68:	d8001715 	stw	zero,92(sp)
  c05f6c:	04400044 	movi	r17,1
  c05f70:	00bfffc4 	movi	r2,-1
  c05f74:	00c00044 	movi	r3,1
  c05f78:	d8800e15 	stw	r2,56(sp)
  c05f7c:	d8002615 	stw	zero,152(sp)
  c05f80:	d8800f15 	stw	r2,60(sp)
  c05f84:	d8c00b15 	stw	r3,44(sp)
  c05f88:	1021883a 	mov	r16,r2
  c05f8c:	d8801617 	ldw	r2,88(sp)
  c05f90:	10001115 	stw	zero,68(r2)
  c05f94:	d8801617 	ldw	r2,88(sp)
  c05f98:	11401117 	ldw	r5,68(r2)
  c05f9c:	1009883a 	mov	r4,r2
  c05fa0:	0c092e40 	call	c092e4 <_Balloc>
  c05fa4:	d8c01617 	ldw	r3,88(sp)
  c05fa8:	d8800515 	stw	r2,20(sp)
  c05fac:	18801015 	stw	r2,64(r3)
  c05fb0:	00800384 	movi	r2,14
  c05fb4:	14006836 	bltu	r2,r16,c06158 <_dtoa_r+0x588>
  c05fb8:	8805003a 	cmpeq	r2,r17,zero
  c05fbc:	1000661e 	bne	r2,zero,c06158 <_dtoa_r+0x588>
  c05fc0:	d9000d17 	ldw	r4,52(sp)
  c05fc4:	0102300e 	bge	zero,r4,c06888 <_dtoa_r+0xcb8>
  c05fc8:	208003cc 	andi	r2,r4,15
  c05fcc:	100490fa 	slli	r2,r2,3
  c05fd0:	2025d13a 	srai	r18,r4,4
  c05fd4:	00c03074 	movhi	r3,193
  c05fd8:	18c22b04 	addi	r3,r3,2220
  c05fdc:	10c5883a 	add	r2,r2,r3
  c05fe0:	90c0040c 	andi	r3,r18,16
  c05fe4:	14000017 	ldw	r16,0(r2)
  c05fe8:	14400117 	ldw	r17,4(r2)
  c05fec:	18036a1e 	bne	r3,zero,c06d98 <_dtoa_r+0x11c8>
  c05ff0:	05800084 	movi	r22,2
  c05ff4:	90001026 	beq	r18,zero,c06038 <_dtoa_r+0x468>
  c05ff8:	04c03074 	movhi	r19,193
  c05ffc:	9cc25d04 	addi	r19,r19,2420
  c06000:	9080004c 	andi	r2,r18,1
  c06004:	1005003a 	cmpeq	r2,r2,zero
  c06008:	1000081e 	bne	r2,zero,c0602c <_dtoa_r+0x45c>
  c0600c:	99800017 	ldw	r6,0(r19)
  c06010:	99c00117 	ldw	r7,4(r19)
  c06014:	880b883a 	mov	r5,r17
  c06018:	8009883a 	mov	r4,r16
  c0601c:	0c0b6540 	call	c0b654 <__muldf3>
  c06020:	1021883a 	mov	r16,r2
  c06024:	b5800044 	addi	r22,r22,1
  c06028:	1823883a 	mov	r17,r3
  c0602c:	9025d07a 	srai	r18,r18,1
  c06030:	9cc00204 	addi	r19,r19,8
  c06034:	903ff21e 	bne	r18,zero,c06000 <_dtoa_r+0x430>
  c06038:	a80b883a 	mov	r5,r21
  c0603c:	a009883a 	mov	r4,r20
  c06040:	880f883a 	mov	r7,r17
  c06044:	800d883a 	mov	r6,r16
  c06048:	0c02a1c0 	call	c02a1c <__divdf3>
  c0604c:	1029883a 	mov	r20,r2
  c06050:	182b883a 	mov	r21,r3
  c06054:	d8c00c17 	ldw	r3,48(sp)
  c06058:	1805003a 	cmpeq	r2,r3,zero
  c0605c:	1000081e 	bne	r2,zero,c06080 <_dtoa_r+0x4b0>
  c06060:	0005883a 	mov	r2,zero
  c06064:	00cffc34 	movhi	r3,16368
  c06068:	180f883a 	mov	r7,r3
  c0606c:	a009883a 	mov	r4,r20
  c06070:	a80b883a 	mov	r5,r21
  c06074:	100d883a 	mov	r6,r2
  c06078:	0c0bbb00 	call	c0bbb0 <__ltdf2>
  c0607c:	1003fe16 	blt	r2,zero,c07078 <_dtoa_r+0x14a8>
  c06080:	b009883a 	mov	r4,r22
  c06084:	0c0bc380 	call	c0bc38 <__floatsidf>
  c06088:	180b883a 	mov	r5,r3
  c0608c:	1009883a 	mov	r4,r2
  c06090:	a00d883a 	mov	r6,r20
  c06094:	a80f883a 	mov	r7,r21
  c06098:	0c0b6540 	call	c0b654 <__muldf3>
  c0609c:	0011883a 	mov	r8,zero
  c060a0:	02500734 	movhi	r9,16412
  c060a4:	1009883a 	mov	r4,r2
  c060a8:	180b883a 	mov	r5,r3
  c060ac:	480f883a 	mov	r7,r9
  c060b0:	400d883a 	mov	r6,r8
  c060b4:	0c029a80 	call	c029a8 <__adddf3>
  c060b8:	d9000f17 	ldw	r4,60(sp)
  c060bc:	102d883a 	mov	r22,r2
  c060c0:	00bf3034 	movhi	r2,64704
  c060c4:	18b9883a 	add	fp,r3,r2
  c060c8:	e02f883a 	mov	r23,fp
  c060cc:	20028f1e 	bne	r4,zero,c06b0c <_dtoa_r+0xf3c>
  c060d0:	0005883a 	mov	r2,zero
  c060d4:	00d00534 	movhi	r3,16404
  c060d8:	a009883a 	mov	r4,r20
  c060dc:	a80b883a 	mov	r5,r21
  c060e0:	180f883a 	mov	r7,r3
  c060e4:	100d883a 	mov	r6,r2
  c060e8:	0c029280 	call	c02928 <__subdf3>
  c060ec:	1009883a 	mov	r4,r2
  c060f0:	e00f883a 	mov	r7,fp
  c060f4:	180b883a 	mov	r5,r3
  c060f8:	b00d883a 	mov	r6,r22
  c060fc:	1025883a 	mov	r18,r2
  c06100:	1827883a 	mov	r19,r3
  c06104:	0c0baa00 	call	c0baa0 <__gtdf2>
  c06108:	00834f16 	blt	zero,r2,c06e48 <_dtoa_r+0x1278>
  c0610c:	e0e0003c 	xorhi	r3,fp,32768
  c06110:	9009883a 	mov	r4,r18
  c06114:	980b883a 	mov	r5,r19
  c06118:	180f883a 	mov	r7,r3
  c0611c:	b00d883a 	mov	r6,r22
  c06120:	0c0bbb00 	call	c0bbb0 <__ltdf2>
  c06124:	1000080e 	bge	r2,zero,c06148 <_dtoa_r+0x578>
  c06128:	0027883a 	mov	r19,zero
  c0612c:	0025883a 	mov	r18,zero
  c06130:	d8802617 	ldw	r2,152(sp)
  c06134:	df000517 	ldw	fp,20(sp)
  c06138:	d8000615 	stw	zero,24(sp)
  c0613c:	0084303a 	nor	r2,zero,r2
  c06140:	d8800d15 	stw	r2,52(sp)
  c06144:	00019b06 	br	c067b4 <_dtoa_r+0xbe4>
  c06148:	d9801217 	ldw	r6,72(sp)
  c0614c:	d8801317 	ldw	r2,76(sp)
  c06150:	3029883a 	mov	r20,r6
  c06154:	102b883a 	mov	r21,r2
  c06158:	d8c00217 	ldw	r3,8(sp)
  c0615c:	18008516 	blt	r3,zero,c06374 <_dtoa_r+0x7a4>
  c06160:	d9000d17 	ldw	r4,52(sp)
  c06164:	00800384 	movi	r2,14
  c06168:	11008216 	blt	r2,r4,c06374 <_dtoa_r+0x7a4>
  c0616c:	200490fa 	slli	r2,r4,3
  c06170:	d9802617 	ldw	r6,152(sp)
  c06174:	00c03074 	movhi	r3,193
  c06178:	18c22b04 	addi	r3,r3,2220
  c0617c:	10c5883a 	add	r2,r2,r3
  c06180:	14800017 	ldw	r18,0(r2)
  c06184:	14c00117 	ldw	r19,4(r2)
  c06188:	30031e16 	blt	r6,zero,c06e04 <_dtoa_r+0x1234>
  c0618c:	d9000517 	ldw	r4,20(sp)
  c06190:	d8c00f17 	ldw	r3,60(sp)
  c06194:	a823883a 	mov	r17,r21
  c06198:	a021883a 	mov	r16,r20
  c0619c:	192b883a 	add	r21,r3,r4
  c061a0:	2039883a 	mov	fp,r4
  c061a4:	00000f06 	br	c061e4 <_dtoa_r+0x614>
  c061a8:	0005883a 	mov	r2,zero
  c061ac:	00d00934 	movhi	r3,16420
  c061b0:	5009883a 	mov	r4,r10
  c061b4:	580b883a 	mov	r5,r11
  c061b8:	180f883a 	mov	r7,r3
  c061bc:	100d883a 	mov	r6,r2
  c061c0:	0c0b6540 	call	c0b654 <__muldf3>
  c061c4:	180b883a 	mov	r5,r3
  c061c8:	000d883a 	mov	r6,zero
  c061cc:	000f883a 	mov	r7,zero
  c061d0:	1009883a 	mov	r4,r2
  c061d4:	1021883a 	mov	r16,r2
  c061d8:	1823883a 	mov	r17,r3
  c061dc:	0c02c740 	call	c02c74 <__nedf2>
  c061e0:	10004526 	beq	r2,zero,c062f8 <_dtoa_r+0x728>
  c061e4:	900d883a 	mov	r6,r18
  c061e8:	980f883a 	mov	r7,r19
  c061ec:	8009883a 	mov	r4,r16
  c061f0:	880b883a 	mov	r5,r17
  c061f4:	0c02a1c0 	call	c02a1c <__divdf3>
  c061f8:	180b883a 	mov	r5,r3
  c061fc:	1009883a 	mov	r4,r2
  c06200:	0c0bd300 	call	c0bd30 <__fixdfsi>
  c06204:	1009883a 	mov	r4,r2
  c06208:	1029883a 	mov	r20,r2
  c0620c:	0c0bc380 	call	c0bc38 <__floatsidf>
  c06210:	180f883a 	mov	r7,r3
  c06214:	9009883a 	mov	r4,r18
  c06218:	980b883a 	mov	r5,r19
  c0621c:	100d883a 	mov	r6,r2
  c06220:	0c0b6540 	call	c0b654 <__muldf3>
  c06224:	180f883a 	mov	r7,r3
  c06228:	880b883a 	mov	r5,r17
  c0622c:	8009883a 	mov	r4,r16
  c06230:	100d883a 	mov	r6,r2
  c06234:	0c029280 	call	c02928 <__subdf3>
  c06238:	1015883a 	mov	r10,r2
  c0623c:	a0800c04 	addi	r2,r20,48
  c06240:	e0800005 	stb	r2,0(fp)
  c06244:	e7000044 	addi	fp,fp,1
  c06248:	1817883a 	mov	r11,r3
  c0624c:	e57fd61e 	bne	fp,r21,c061a8 <_dtoa_r+0x5d8>
  c06250:	500d883a 	mov	r6,r10
  c06254:	180f883a 	mov	r7,r3
  c06258:	5009883a 	mov	r4,r10
  c0625c:	180b883a 	mov	r5,r3
  c06260:	0c029a80 	call	c029a8 <__adddf3>
  c06264:	100d883a 	mov	r6,r2
  c06268:	9009883a 	mov	r4,r18
  c0626c:	980b883a 	mov	r5,r19
  c06270:	180f883a 	mov	r7,r3
  c06274:	1021883a 	mov	r16,r2
  c06278:	1823883a 	mov	r17,r3
  c0627c:	0c0bbb00 	call	c0bbb0 <__ltdf2>
  c06280:	10000816 	blt	r2,zero,c062a4 <_dtoa_r+0x6d4>
  c06284:	980b883a 	mov	r5,r19
  c06288:	800d883a 	mov	r6,r16
  c0628c:	880f883a 	mov	r7,r17
  c06290:	9009883a 	mov	r4,r18
  c06294:	0c0ba180 	call	c0ba18 <__eqdf2>
  c06298:	1000171e 	bne	r2,zero,c062f8 <_dtoa_r+0x728>
  c0629c:	a080004c 	andi	r2,r20,1
  c062a0:	10001526 	beq	r2,zero,c062f8 <_dtoa_r+0x728>
  c062a4:	d8800d17 	ldw	r2,52(sp)
  c062a8:	d8800415 	stw	r2,16(sp)
  c062ac:	e009883a 	mov	r4,fp
  c062b0:	213fffc4 	addi	r4,r4,-1
  c062b4:	20c00007 	ldb	r3,0(r4)
  c062b8:	00800e44 	movi	r2,57
  c062bc:	1880081e 	bne	r3,r2,c062e0 <_dtoa_r+0x710>
  c062c0:	d8800517 	ldw	r2,20(sp)
  c062c4:	113ffa1e 	bne	r2,r4,c062b0 <_dtoa_r+0x6e0>
  c062c8:	d8c00417 	ldw	r3,16(sp)
  c062cc:	d9800517 	ldw	r6,20(sp)
  c062d0:	00800c04 	movi	r2,48
  c062d4:	18c00044 	addi	r3,r3,1
  c062d8:	d8c00415 	stw	r3,16(sp)
  c062dc:	30800005 	stb	r2,0(r6)
  c062e0:	20800003 	ldbu	r2,0(r4)
  c062e4:	d8c00417 	ldw	r3,16(sp)
  c062e8:	27000044 	addi	fp,r4,1
  c062ec:	10800044 	addi	r2,r2,1
  c062f0:	d8c00d15 	stw	r3,52(sp)
  c062f4:	20800005 	stb	r2,0(r4)
  c062f8:	d9001617 	ldw	r4,88(sp)
  c062fc:	d9400717 	ldw	r5,28(sp)
  c06300:	0c08d640 	call	c08d64 <_Bfree>
  c06304:	e0000005 	stb	zero,0(fp)
  c06308:	d9800d17 	ldw	r6,52(sp)
  c0630c:	d8c02717 	ldw	r3,156(sp)
  c06310:	d9002917 	ldw	r4,164(sp)
  c06314:	30800044 	addi	r2,r6,1
  c06318:	18800015 	stw	r2,0(r3)
  c0631c:	20029c26 	beq	r4,zero,c06d90 <_dtoa_r+0x11c0>
  c06320:	d8c00517 	ldw	r3,20(sp)
  c06324:	27000015 	stw	fp,0(r4)
  c06328:	003e5d06 	br	c05ca0 <_dtoa_r+0xd0>
  c0632c:	d9800d17 	ldw	r6,52(sp)
  c06330:	00c03074 	movhi	r3,193
  c06334:	18c22b04 	addi	r3,r3,2220
  c06338:	d9001217 	ldw	r4,72(sp)
  c0633c:	300490fa 	slli	r2,r6,3
  c06340:	d9401317 	ldw	r5,76(sp)
  c06344:	10c5883a 	add	r2,r2,r3
  c06348:	12000017 	ldw	r8,0(r2)
  c0634c:	12400117 	ldw	r9,4(r2)
  c06350:	400d883a 	mov	r6,r8
  c06354:	480f883a 	mov	r7,r9
  c06358:	0c0bbb00 	call	c0bbb0 <__ltdf2>
  c0635c:	1000030e 	bge	r2,zero,c0636c <_dtoa_r+0x79c>
  c06360:	d8800d17 	ldw	r2,52(sp)
  c06364:	10bfffc4 	addi	r2,r2,-1
  c06368:	d8800d15 	stw	r2,52(sp)
  c0636c:	d8000c15 	stw	zero,48(sp)
  c06370:	003ea806 	br	c05e14 <_dtoa_r+0x244>
  c06374:	d9000b17 	ldw	r4,44(sp)
  c06378:	202cc03a 	cmpne	r22,r4,zero
  c0637c:	b000c71e 	bne	r22,zero,c0669c <_dtoa_r+0xacc>
  c06380:	dc001117 	ldw	r16,68(sp)
  c06384:	dc801017 	ldw	r18,64(sp)
  c06388:	0027883a 	mov	r19,zero
  c0638c:	04000b0e 	bge	zero,r16,c063bc <_dtoa_r+0x7ec>
  c06390:	d8c00a17 	ldw	r3,40(sp)
  c06394:	00c0090e 	bge	zero,r3,c063bc <_dtoa_r+0x7ec>
  c06398:	8005883a 	mov	r2,r16
  c0639c:	1c011316 	blt	r3,r16,c067ec <_dtoa_r+0xc1c>
  c063a0:	d9000a17 	ldw	r4,40(sp)
  c063a4:	d9801117 	ldw	r6,68(sp)
  c063a8:	80a1c83a 	sub	r16,r16,r2
  c063ac:	2089c83a 	sub	r4,r4,r2
  c063b0:	308dc83a 	sub	r6,r6,r2
  c063b4:	d9000a15 	stw	r4,40(sp)
  c063b8:	d9801115 	stw	r6,68(sp)
  c063bc:	d8801017 	ldw	r2,64(sp)
  c063c0:	0080150e 	bge	zero,r2,c06418 <_dtoa_r+0x848>
  c063c4:	d8c00b17 	ldw	r3,44(sp)
  c063c8:	1805003a 	cmpeq	r2,r3,zero
  c063cc:	1001c91e 	bne	r2,zero,c06af4 <_dtoa_r+0xf24>
  c063d0:	04800e0e 	bge	zero,r18,c0640c <_dtoa_r+0x83c>
  c063d4:	d9001617 	ldw	r4,88(sp)
  c063d8:	980b883a 	mov	r5,r19
  c063dc:	900d883a 	mov	r6,r18
  c063e0:	0c09b180 	call	c09b18 <__pow5mult>
  c063e4:	d9001617 	ldw	r4,88(sp)
  c063e8:	d9800717 	ldw	r6,28(sp)
  c063ec:	100b883a 	mov	r5,r2
  c063f0:	1027883a 	mov	r19,r2
  c063f4:	0c097f40 	call	c097f4 <__multiply>
  c063f8:	d9001617 	ldw	r4,88(sp)
  c063fc:	d9400717 	ldw	r5,28(sp)
  c06400:	1023883a 	mov	r17,r2
  c06404:	0c08d640 	call	c08d64 <_Bfree>
  c06408:	dc400715 	stw	r17,28(sp)
  c0640c:	d9001017 	ldw	r4,64(sp)
  c06410:	248dc83a 	sub	r6,r4,r18
  c06414:	30010e1e 	bne	r6,zero,c06850 <_dtoa_r+0xc80>
  c06418:	d9001617 	ldw	r4,88(sp)
  c0641c:	04400044 	movi	r17,1
  c06420:	880b883a 	mov	r5,r17
  c06424:	0c099dc0 	call	c099dc <__i2b>
  c06428:	d9800917 	ldw	r6,36(sp)
  c0642c:	1025883a 	mov	r18,r2
  c06430:	0180040e 	bge	zero,r6,c06444 <_dtoa_r+0x874>
  c06434:	d9001617 	ldw	r4,88(sp)
  c06438:	100b883a 	mov	r5,r2
  c0643c:	0c09b180 	call	c09b18 <__pow5mult>
  c06440:	1025883a 	mov	r18,r2
  c06444:	d8801717 	ldw	r2,92(sp)
  c06448:	8880f30e 	bge	r17,r2,c06818 <_dtoa_r+0xc48>
  c0644c:	0023883a 	mov	r17,zero
  c06450:	d9800917 	ldw	r6,36(sp)
  c06454:	30019e1e 	bne	r6,zero,c06ad0 <_dtoa_r+0xf00>
  c06458:	00c00044 	movi	r3,1
  c0645c:	d9000a17 	ldw	r4,40(sp)
  c06460:	20c5883a 	add	r2,r4,r3
  c06464:	10c007cc 	andi	r3,r2,31
  c06468:	1800841e 	bne	r3,zero,c0667c <_dtoa_r+0xaac>
  c0646c:	00800704 	movi	r2,28
  c06470:	d9000a17 	ldw	r4,40(sp)
  c06474:	d9801117 	ldw	r6,68(sp)
  c06478:	80a1883a 	add	r16,r16,r2
  c0647c:	2089883a 	add	r4,r4,r2
  c06480:	308d883a 	add	r6,r6,r2
  c06484:	d9000a15 	stw	r4,40(sp)
  c06488:	d9801115 	stw	r6,68(sp)
  c0648c:	d8801117 	ldw	r2,68(sp)
  c06490:	0080050e 	bge	zero,r2,c064a8 <_dtoa_r+0x8d8>
  c06494:	d9400717 	ldw	r5,28(sp)
  c06498:	d9001617 	ldw	r4,88(sp)
  c0649c:	100d883a 	mov	r6,r2
  c064a0:	0c096a80 	call	c096a8 <__lshift>
  c064a4:	d8800715 	stw	r2,28(sp)
  c064a8:	d8c00a17 	ldw	r3,40(sp)
  c064ac:	00c0050e 	bge	zero,r3,c064c4 <_dtoa_r+0x8f4>
  c064b0:	d9001617 	ldw	r4,88(sp)
  c064b4:	900b883a 	mov	r5,r18
  c064b8:	180d883a 	mov	r6,r3
  c064bc:	0c096a80 	call	c096a8 <__lshift>
  c064c0:	1025883a 	mov	r18,r2
  c064c4:	d9000c17 	ldw	r4,48(sp)
  c064c8:	2005003a 	cmpeq	r2,r4,zero
  c064cc:	10016f26 	beq	r2,zero,c06a8c <_dtoa_r+0xebc>
  c064d0:	d9000f17 	ldw	r4,60(sp)
  c064d4:	0102170e 	bge	zero,r4,c06d34 <_dtoa_r+0x1164>
  c064d8:	d9800b17 	ldw	r6,44(sp)
  c064dc:	3005003a 	cmpeq	r2,r6,zero
  c064e0:	1000881e 	bne	r2,zero,c06704 <_dtoa_r+0xb34>
  c064e4:	0400050e 	bge	zero,r16,c064fc <_dtoa_r+0x92c>
  c064e8:	d9001617 	ldw	r4,88(sp)
  c064ec:	980b883a 	mov	r5,r19
  c064f0:	800d883a 	mov	r6,r16
  c064f4:	0c096a80 	call	c096a8 <__lshift>
  c064f8:	1027883a 	mov	r19,r2
  c064fc:	8804c03a 	cmpne	r2,r17,zero
  c06500:	1002541e 	bne	r2,zero,c06e54 <_dtoa_r+0x1284>
  c06504:	980b883a 	mov	r5,r19
  c06508:	dd800517 	ldw	r22,20(sp)
  c0650c:	dcc00615 	stw	r19,24(sp)
  c06510:	a700004c 	andi	fp,r20,1
  c06514:	2827883a 	mov	r19,r5
  c06518:	d9000717 	ldw	r4,28(sp)
  c0651c:	900b883a 	mov	r5,r18
  c06520:	0c059b80 	call	c059b8 <quorem>
  c06524:	d9000717 	ldw	r4,28(sp)
  c06528:	d9400617 	ldw	r5,24(sp)
  c0652c:	1023883a 	mov	r17,r2
  c06530:	8dc00c04 	addi	r23,r17,48
  c06534:	0c08ec00 	call	c08ec0 <__mcmp>
  c06538:	d9001617 	ldw	r4,88(sp)
  c0653c:	900b883a 	mov	r5,r18
  c06540:	980d883a 	mov	r6,r19
  c06544:	1029883a 	mov	r20,r2
  c06548:	0c0951c0 	call	c0951c <__mdiff>
  c0654c:	102b883a 	mov	r21,r2
  c06550:	10800317 	ldw	r2,12(r2)
  c06554:	1001281e 	bne	r2,zero,c069f8 <_dtoa_r+0xe28>
  c06558:	d9000717 	ldw	r4,28(sp)
  c0655c:	a80b883a 	mov	r5,r21
  c06560:	0c08ec00 	call	c08ec0 <__mcmp>
  c06564:	d9001617 	ldw	r4,88(sp)
  c06568:	1021883a 	mov	r16,r2
  c0656c:	a80b883a 	mov	r5,r21
  c06570:	0c08d640 	call	c08d64 <_Bfree>
  c06574:	8000041e 	bne	r16,zero,c06588 <_dtoa_r+0x9b8>
  c06578:	d8801717 	ldw	r2,92(sp)
  c0657c:	1000021e 	bne	r2,zero,c06588 <_dtoa_r+0x9b8>
  c06580:	e004c03a 	cmpne	r2,fp,zero
  c06584:	10011726 	beq	r2,zero,c069e4 <_dtoa_r+0xe14>
  c06588:	a0010616 	blt	r20,zero,c069a4 <_dtoa_r+0xdd4>
  c0658c:	a000041e 	bne	r20,zero,c065a0 <_dtoa_r+0x9d0>
  c06590:	d8c01717 	ldw	r3,92(sp)
  c06594:	1800021e 	bne	r3,zero,c065a0 <_dtoa_r+0x9d0>
  c06598:	e004c03a 	cmpne	r2,fp,zero
  c0659c:	10010126 	beq	r2,zero,c069a4 <_dtoa_r+0xdd4>
  c065a0:	04023d16 	blt	zero,r16,c06e98 <_dtoa_r+0x12c8>
  c065a4:	b5c00005 	stb	r23,0(r22)
  c065a8:	d9800517 	ldw	r6,20(sp)
  c065ac:	d9000f17 	ldw	r4,60(sp)
  c065b0:	b5800044 	addi	r22,r22,1
  c065b4:	3105883a 	add	r2,r6,r4
  c065b8:	b0806526 	beq	r22,r2,c06750 <_dtoa_r+0xb80>
  c065bc:	d9400717 	ldw	r5,28(sp)
  c065c0:	d9001617 	ldw	r4,88(sp)
  c065c4:	01800284 	movi	r6,10
  c065c8:	000f883a 	mov	r7,zero
  c065cc:	0c09a180 	call	c09a18 <__multadd>
  c065d0:	d8800715 	stw	r2,28(sp)
  c065d4:	d8800617 	ldw	r2,24(sp)
  c065d8:	14c10c26 	beq	r2,r19,c06a0c <_dtoa_r+0xe3c>
  c065dc:	d9400617 	ldw	r5,24(sp)
  c065e0:	d9001617 	ldw	r4,88(sp)
  c065e4:	01800284 	movi	r6,10
  c065e8:	000f883a 	mov	r7,zero
  c065ec:	0c09a180 	call	c09a18 <__multadd>
  c065f0:	d9001617 	ldw	r4,88(sp)
  c065f4:	980b883a 	mov	r5,r19
  c065f8:	01800284 	movi	r6,10
  c065fc:	000f883a 	mov	r7,zero
  c06600:	d8800615 	stw	r2,24(sp)
  c06604:	0c09a180 	call	c09a18 <__multadd>
  c06608:	1027883a 	mov	r19,r2
  c0660c:	003fc206 	br	c06518 <_dtoa_r+0x948>
  c06610:	2445c83a 	sub	r2,r4,r17
  c06614:	a088983a 	sll	r4,r20,r2
  c06618:	003e4b06 	br	c05f48 <_dtoa_r+0x378>
  c0661c:	01bfffc4 	movi	r6,-1
  c06620:	00800044 	movi	r2,1
  c06624:	d9800e15 	stw	r6,56(sp)
  c06628:	d9800f15 	stw	r6,60(sp)
  c0662c:	d8800b15 	stw	r2,44(sp)
  c06630:	d8c01617 	ldw	r3,88(sp)
  c06634:	008005c4 	movi	r2,23
  c06638:	18001115 	stw	zero,68(r3)
  c0663c:	1580082e 	bgeu	r2,r22,c06660 <_dtoa_r+0xa90>
  c06640:	00c00104 	movi	r3,4
  c06644:	0009883a 	mov	r4,zero
  c06648:	18c7883a 	add	r3,r3,r3
  c0664c:	18800504 	addi	r2,r3,20
  c06650:	21000044 	addi	r4,r4,1
  c06654:	b0bffc2e 	bgeu	r22,r2,c06648 <_dtoa_r+0xa78>
  c06658:	d9801617 	ldw	r6,88(sp)
  c0665c:	31001115 	stw	r4,68(r6)
  c06660:	dc000f17 	ldw	r16,60(sp)
  c06664:	003e4b06 	br	c05f94 <_dtoa_r+0x3c4>
  c06668:	d9801717 	ldw	r6,92(sp)
  c0666c:	0023883a 	mov	r17,zero
  c06670:	31bfff04 	addi	r6,r6,-4
  c06674:	d9801715 	stw	r6,92(sp)
  c06678:	003df806 	br	c05e5c <_dtoa_r+0x28c>
  c0667c:	00800804 	movi	r2,32
  c06680:	10c9c83a 	sub	r4,r2,r3
  c06684:	00c00104 	movi	r3,4
  c06688:	19005a16 	blt	r3,r4,c067f4 <_dtoa_r+0xc24>
  c0668c:	008000c4 	movi	r2,3
  c06690:	113f7e16 	blt	r2,r4,c0648c <_dtoa_r+0x8bc>
  c06694:	20800704 	addi	r2,r4,28
  c06698:	003f7506 	br	c06470 <_dtoa_r+0x8a0>
  c0669c:	d9801717 	ldw	r6,92(sp)
  c066a0:	00800044 	movi	r2,1
  c066a4:	1180a10e 	bge	r2,r6,c0692c <_dtoa_r+0xd5c>
  c066a8:	d9800f17 	ldw	r6,60(sp)
  c066ac:	d8c01017 	ldw	r3,64(sp)
  c066b0:	30bfffc4 	addi	r2,r6,-1
  c066b4:	1881c616 	blt	r3,r2,c06dd0 <_dtoa_r+0x1200>
  c066b8:	18a5c83a 	sub	r18,r3,r2
  c066bc:	d8800f17 	ldw	r2,60(sp)
  c066c0:	10026216 	blt	r2,zero,c0704c <_dtoa_r+0x147c>
  c066c4:	dc001117 	ldw	r16,68(sp)
  c066c8:	1007883a 	mov	r3,r2
  c066cc:	d9800a17 	ldw	r6,40(sp)
  c066d0:	d8801117 	ldw	r2,68(sp)
  c066d4:	d9001617 	ldw	r4,88(sp)
  c066d8:	30cd883a 	add	r6,r6,r3
  c066dc:	10c5883a 	add	r2,r2,r3
  c066e0:	01400044 	movi	r5,1
  c066e4:	d9800a15 	stw	r6,40(sp)
  c066e8:	d8801115 	stw	r2,68(sp)
  c066ec:	0c099dc0 	call	c099dc <__i2b>
  c066f0:	1027883a 	mov	r19,r2
  c066f4:	003f2506 	br	c0638c <_dtoa_r+0x7bc>
  c066f8:	00c03074 	movhi	r3,193
  c066fc:	18c19604 	addi	r3,r3,1624
  c06700:	003d6706 	br	c05ca0 <_dtoa_r+0xd0>
  c06704:	dd800517 	ldw	r22,20(sp)
  c06708:	04000044 	movi	r16,1
  c0670c:	00000706 	br	c0672c <_dtoa_r+0xb5c>
  c06710:	d9400717 	ldw	r5,28(sp)
  c06714:	d9001617 	ldw	r4,88(sp)
  c06718:	01800284 	movi	r6,10
  c0671c:	000f883a 	mov	r7,zero
  c06720:	0c09a180 	call	c09a18 <__multadd>
  c06724:	d8800715 	stw	r2,28(sp)
  c06728:	84000044 	addi	r16,r16,1
  c0672c:	d9000717 	ldw	r4,28(sp)
  c06730:	900b883a 	mov	r5,r18
  c06734:	0c059b80 	call	c059b8 <quorem>
  c06738:	15c00c04 	addi	r23,r2,48
  c0673c:	b5c00005 	stb	r23,0(r22)
  c06740:	d8c00f17 	ldw	r3,60(sp)
  c06744:	b5800044 	addi	r22,r22,1
  c06748:	80fff116 	blt	r16,r3,c06710 <_dtoa_r+0xb40>
  c0674c:	d8000615 	stw	zero,24(sp)
  c06750:	d9400717 	ldw	r5,28(sp)
  c06754:	d9001617 	ldw	r4,88(sp)
  c06758:	01800044 	movi	r6,1
  c0675c:	0c096a80 	call	c096a8 <__lshift>
  c06760:	1009883a 	mov	r4,r2
  c06764:	900b883a 	mov	r5,r18
  c06768:	d8800715 	stw	r2,28(sp)
  c0676c:	0c08ec00 	call	c08ec0 <__mcmp>
  c06770:	00803c0e 	bge	zero,r2,c06864 <_dtoa_r+0xc94>
  c06774:	b009883a 	mov	r4,r22
  c06778:	213fffc4 	addi	r4,r4,-1
  c0677c:	21400003 	ldbu	r5,0(r4)
  c06780:	00800e44 	movi	r2,57
  c06784:	28c03fcc 	andi	r3,r5,255
  c06788:	18c0201c 	xori	r3,r3,128
  c0678c:	18ffe004 	addi	r3,r3,-128
  c06790:	1881981e 	bne	r3,r2,c06df4 <_dtoa_r+0x1224>
  c06794:	d9800517 	ldw	r6,20(sp)
  c06798:	21bff71e 	bne	r4,r6,c06778 <_dtoa_r+0xba8>
  c0679c:	d8800d17 	ldw	r2,52(sp)
  c067a0:	37000044 	addi	fp,r6,1
  c067a4:	10800044 	addi	r2,r2,1
  c067a8:	d8800d15 	stw	r2,52(sp)
  c067ac:	00800c44 	movi	r2,49
  c067b0:	30800005 	stb	r2,0(r6)
  c067b4:	d9001617 	ldw	r4,88(sp)
  c067b8:	900b883a 	mov	r5,r18
  c067bc:	0c08d640 	call	c08d64 <_Bfree>
  c067c0:	983ecd26 	beq	r19,zero,c062f8 <_dtoa_r+0x728>
  c067c4:	d8c00617 	ldw	r3,24(sp)
  c067c8:	18000426 	beq	r3,zero,c067dc <_dtoa_r+0xc0c>
  c067cc:	1cc00326 	beq	r3,r19,c067dc <_dtoa_r+0xc0c>
  c067d0:	d9001617 	ldw	r4,88(sp)
  c067d4:	180b883a 	mov	r5,r3
  c067d8:	0c08d640 	call	c08d64 <_Bfree>
  c067dc:	d9001617 	ldw	r4,88(sp)
  c067e0:	980b883a 	mov	r5,r19
  c067e4:	0c08d640 	call	c08d64 <_Bfree>
  c067e8:	003ec306 	br	c062f8 <_dtoa_r+0x728>
  c067ec:	1805883a 	mov	r2,r3
  c067f0:	003eeb06 	br	c063a0 <_dtoa_r+0x7d0>
  c067f4:	d9800a17 	ldw	r6,40(sp)
  c067f8:	d8c01117 	ldw	r3,68(sp)
  c067fc:	20bfff04 	addi	r2,r4,-4
  c06800:	308d883a 	add	r6,r6,r2
  c06804:	1887883a 	add	r3,r3,r2
  c06808:	80a1883a 	add	r16,r16,r2
  c0680c:	d9800a15 	stw	r6,40(sp)
  c06810:	d8c01115 	stw	r3,68(sp)
  c06814:	003f1d06 	br	c0648c <_dtoa_r+0x8bc>
  c06818:	a03f0c1e 	bne	r20,zero,c0644c <_dtoa_r+0x87c>
  c0681c:	00800434 	movhi	r2,16
  c06820:	10bfffc4 	addi	r2,r2,-1
  c06824:	a884703a 	and	r2,r21,r2
  c06828:	103f081e 	bne	r2,zero,c0644c <_dtoa_r+0x87c>
  c0682c:	a89ffc2c 	andhi	r2,r21,32752
  c06830:	103f0626 	beq	r2,zero,c0644c <_dtoa_r+0x87c>
  c06834:	d8c01117 	ldw	r3,68(sp)
  c06838:	d9000a17 	ldw	r4,40(sp)
  c0683c:	18c00044 	addi	r3,r3,1
  c06840:	21000044 	addi	r4,r4,1
  c06844:	d8c01115 	stw	r3,68(sp)
  c06848:	d9000a15 	stw	r4,40(sp)
  c0684c:	003f0006 	br	c06450 <_dtoa_r+0x880>
  c06850:	d9400717 	ldw	r5,28(sp)
  c06854:	d9001617 	ldw	r4,88(sp)
  c06858:	0c09b180 	call	c09b18 <__pow5mult>
  c0685c:	d8800715 	stw	r2,28(sp)
  c06860:	003eed06 	br	c06418 <_dtoa_r+0x848>
  c06864:	1000021e 	bne	r2,zero,c06870 <_dtoa_r+0xca0>
  c06868:	b880004c 	andi	r2,r23,1
  c0686c:	103fc11e 	bne	r2,zero,c06774 <_dtoa_r+0xba4>
  c06870:	b5bfffc4 	addi	r22,r22,-1
  c06874:	b0c00007 	ldb	r3,0(r22)
  c06878:	00800c04 	movi	r2,48
  c0687c:	18bffc26 	beq	r3,r2,c06870 <_dtoa_r+0xca0>
  c06880:	b7000044 	addi	fp,r22,1
  c06884:	003fcb06 	br	c067b4 <_dtoa_r+0xbe4>
  c06888:	d9800d17 	ldw	r6,52(sp)
  c0688c:	018fc83a 	sub	r7,zero,r6
  c06890:	3801f726 	beq	r7,zero,c07070 <_dtoa_r+0x14a0>
  c06894:	398003cc 	andi	r6,r7,15
  c06898:	300c90fa 	slli	r6,r6,3
  c0689c:	01403074 	movhi	r5,193
  c068a0:	29422b04 	addi	r5,r5,2220
  c068a4:	d9001217 	ldw	r4,72(sp)
  c068a8:	314d883a 	add	r6,r6,r5
  c068ac:	30c00117 	ldw	r3,4(r6)
  c068b0:	30800017 	ldw	r2,0(r6)
  c068b4:	d9401317 	ldw	r5,76(sp)
  c068b8:	3821d13a 	srai	r16,r7,4
  c068bc:	100d883a 	mov	r6,r2
  c068c0:	180f883a 	mov	r7,r3
  c068c4:	0c0b6540 	call	c0b654 <__muldf3>
  c068c8:	1011883a 	mov	r8,r2
  c068cc:	1813883a 	mov	r9,r3
  c068d0:	1029883a 	mov	r20,r2
  c068d4:	182b883a 	mov	r21,r3
  c068d8:	8001e526 	beq	r16,zero,c07070 <_dtoa_r+0x14a0>
  c068dc:	05800084 	movi	r22,2
  c068e0:	04403074 	movhi	r17,193
  c068e4:	8c425d04 	addi	r17,r17,2420
  c068e8:	8080004c 	andi	r2,r16,1
  c068ec:	1005003a 	cmpeq	r2,r2,zero
  c068f0:	1000081e 	bne	r2,zero,c06914 <_dtoa_r+0xd44>
  c068f4:	89800017 	ldw	r6,0(r17)
  c068f8:	89c00117 	ldw	r7,4(r17)
  c068fc:	480b883a 	mov	r5,r9
  c06900:	4009883a 	mov	r4,r8
  c06904:	0c0b6540 	call	c0b654 <__muldf3>
  c06908:	1011883a 	mov	r8,r2
  c0690c:	b5800044 	addi	r22,r22,1
  c06910:	1813883a 	mov	r9,r3
  c06914:	8021d07a 	srai	r16,r16,1
  c06918:	8c400204 	addi	r17,r17,8
  c0691c:	803ff21e 	bne	r16,zero,c068e8 <_dtoa_r+0xd18>
  c06920:	4029883a 	mov	r20,r8
  c06924:	482b883a 	mov	r21,r9
  c06928:	003dca06 	br	c06054 <_dtoa_r+0x484>
  c0692c:	d9000817 	ldw	r4,32(sp)
  c06930:	2005003a 	cmpeq	r2,r4,zero
  c06934:	1001f61e 	bne	r2,zero,c07110 <_dtoa_r+0x1540>
  c06938:	dc001117 	ldw	r16,68(sp)
  c0693c:	dc801017 	ldw	r18,64(sp)
  c06940:	18c10cc4 	addi	r3,r3,1075
  c06944:	003f6106 	br	c066cc <_dtoa_r+0xafc>
  c06948:	d8000b15 	stw	zero,44(sp)
  c0694c:	d9802617 	ldw	r6,152(sp)
  c06950:	d8c00d17 	ldw	r3,52(sp)
  c06954:	30800044 	addi	r2,r6,1
  c06958:	18ad883a 	add	r22,r3,r2
  c0695c:	b13fffc4 	addi	r4,r22,-1
  c06960:	d9000e15 	stw	r4,56(sp)
  c06964:	0581f60e 	bge	zero,r22,c07140 <_dtoa_r+0x1570>
  c06968:	dd800f15 	stw	r22,60(sp)
  c0696c:	003f3006 	br	c06630 <_dtoa_r+0xa60>
  c06970:	d8000b15 	stw	zero,44(sp)
  c06974:	d9002617 	ldw	r4,152(sp)
  c06978:	0101eb0e 	bge	zero,r4,c07128 <_dtoa_r+0x1558>
  c0697c:	202d883a 	mov	r22,r4
  c06980:	d9000e15 	stw	r4,56(sp)
  c06984:	d9000f15 	stw	r4,60(sp)
  c06988:	003f2906 	br	c06630 <_dtoa_r+0xa60>
  c0698c:	01800044 	movi	r6,1
  c06990:	d9800b15 	stw	r6,44(sp)
  c06994:	003ff706 	br	c06974 <_dtoa_r+0xda4>
  c06998:	01000044 	movi	r4,1
  c0699c:	d9000b15 	stw	r4,44(sp)
  c069a0:	003fea06 	br	c0694c <_dtoa_r+0xd7c>
  c069a4:	04000c0e 	bge	zero,r16,c069d8 <_dtoa_r+0xe08>
  c069a8:	d9400717 	ldw	r5,28(sp)
  c069ac:	d9001617 	ldw	r4,88(sp)
  c069b0:	01800044 	movi	r6,1
  c069b4:	0c096a80 	call	c096a8 <__lshift>
  c069b8:	1009883a 	mov	r4,r2
  c069bc:	900b883a 	mov	r5,r18
  c069c0:	d8800715 	stw	r2,28(sp)
  c069c4:	0c08ec00 	call	c08ec0 <__mcmp>
  c069c8:	0081e00e 	bge	zero,r2,c0714c <_dtoa_r+0x157c>
  c069cc:	bdc00044 	addi	r23,r23,1
  c069d0:	00800e84 	movi	r2,58
  c069d4:	b881a226 	beq	r23,r2,c07060 <_dtoa_r+0x1490>
  c069d8:	b7000044 	addi	fp,r22,1
  c069dc:	b5c00005 	stb	r23,0(r22)
  c069e0:	003f7406 	br	c067b4 <_dtoa_r+0xbe4>
  c069e4:	00800e44 	movi	r2,57
  c069e8:	b8819d26 	beq	r23,r2,c07060 <_dtoa_r+0x1490>
  c069ec:	053ffa0e 	bge	zero,r20,c069d8 <_dtoa_r+0xe08>
  c069f0:	8dc00c44 	addi	r23,r17,49
  c069f4:	003ff806 	br	c069d8 <_dtoa_r+0xe08>
  c069f8:	d9001617 	ldw	r4,88(sp)
  c069fc:	a80b883a 	mov	r5,r21
  c06a00:	04000044 	movi	r16,1
  c06a04:	0c08d640 	call	c08d64 <_Bfree>
  c06a08:	003edf06 	br	c06588 <_dtoa_r+0x9b8>
  c06a0c:	d9001617 	ldw	r4,88(sp)
  c06a10:	980b883a 	mov	r5,r19
  c06a14:	01800284 	movi	r6,10
  c06a18:	000f883a 	mov	r7,zero
  c06a1c:	0c09a180 	call	c09a18 <__multadd>
  c06a20:	1027883a 	mov	r19,r2
  c06a24:	d8800615 	stw	r2,24(sp)
  c06a28:	003ebb06 	br	c06518 <_dtoa_r+0x948>
  c06a2c:	d9801117 	ldw	r6,68(sp)
  c06a30:	d8800d17 	ldw	r2,52(sp)
  c06a34:	d8000915 	stw	zero,36(sp)
  c06a38:	308dc83a 	sub	r6,r6,r2
  c06a3c:	0087c83a 	sub	r3,zero,r2
  c06a40:	d9801115 	stw	r6,68(sp)
  c06a44:	d8c01015 	stw	r3,64(sp)
  c06a48:	003cfe06 	br	c05e44 <_dtoa_r+0x274>
  c06a4c:	018dc83a 	sub	r6,zero,r6
  c06a50:	d9801115 	stw	r6,68(sp)
  c06a54:	d8000a15 	stw	zero,40(sp)
  c06a58:	003cf306 	br	c05e28 <_dtoa_r+0x258>
  c06a5c:	d9000d17 	ldw	r4,52(sp)
  c06a60:	0c0bc380 	call	c0bc38 <__floatsidf>
  c06a64:	880b883a 	mov	r5,r17
  c06a68:	8009883a 	mov	r4,r16
  c06a6c:	180f883a 	mov	r7,r3
  c06a70:	100d883a 	mov	r6,r2
  c06a74:	0c02c740 	call	c02c74 <__nedf2>
  c06a78:	103ce126 	beq	r2,zero,c05e00 <_dtoa_r+0x230>
  c06a7c:	d9800d17 	ldw	r6,52(sp)
  c06a80:	31bfffc4 	addi	r6,r6,-1
  c06a84:	d9800d15 	stw	r6,52(sp)
  c06a88:	003cdd06 	br	c05e00 <_dtoa_r+0x230>
  c06a8c:	d9000717 	ldw	r4,28(sp)
  c06a90:	900b883a 	mov	r5,r18
  c06a94:	0c08ec00 	call	c08ec0 <__mcmp>
  c06a98:	103e8d0e 	bge	r2,zero,c064d0 <_dtoa_r+0x900>
  c06a9c:	d9400717 	ldw	r5,28(sp)
  c06aa0:	d9001617 	ldw	r4,88(sp)
  c06aa4:	01800284 	movi	r6,10
  c06aa8:	000f883a 	mov	r7,zero
  c06aac:	0c09a180 	call	c09a18 <__multadd>
  c06ab0:	d9800d17 	ldw	r6,52(sp)
  c06ab4:	d8800715 	stw	r2,28(sp)
  c06ab8:	31bfffc4 	addi	r6,r6,-1
  c06abc:	d9800d15 	stw	r6,52(sp)
  c06ac0:	b001a71e 	bne	r22,zero,c07160 <_dtoa_r+0x1590>
  c06ac4:	d8800e17 	ldw	r2,56(sp)
  c06ac8:	d8800f15 	stw	r2,60(sp)
  c06acc:	003e8006 	br	c064d0 <_dtoa_r+0x900>
  c06ad0:	90800417 	ldw	r2,16(r18)
  c06ad4:	1085883a 	add	r2,r2,r2
  c06ad8:	1085883a 	add	r2,r2,r2
  c06adc:	1485883a 	add	r2,r2,r18
  c06ae0:	11000417 	ldw	r4,16(r2)
  c06ae4:	0c08d8c0 	call	c08d8c <__hi0bits>
  c06ae8:	00c00804 	movi	r3,32
  c06aec:	1887c83a 	sub	r3,r3,r2
  c06af0:	003e5a06 	br	c0645c <_dtoa_r+0x88c>
  c06af4:	d9400717 	ldw	r5,28(sp)
  c06af8:	d9801017 	ldw	r6,64(sp)
  c06afc:	d9001617 	ldw	r4,88(sp)
  c06b00:	0c09b180 	call	c09b18 <__pow5mult>
  c06b04:	d8800715 	stw	r2,28(sp)
  c06b08:	003e4306 	br	c06418 <_dtoa_r+0x848>
  c06b0c:	d9800f17 	ldw	r6,60(sp)
  c06b10:	d8800d17 	ldw	r2,52(sp)
  c06b14:	d9800315 	stw	r6,12(sp)
  c06b18:	d8800415 	stw	r2,16(sp)
  c06b1c:	d8c00b17 	ldw	r3,44(sp)
  c06b20:	1805003a 	cmpeq	r2,r3,zero
  c06b24:	1000e21e 	bne	r2,zero,c06eb0 <_dtoa_r+0x12e0>
  c06b28:	d9000317 	ldw	r4,12(sp)
  c06b2c:	0005883a 	mov	r2,zero
  c06b30:	00cff834 	movhi	r3,16352
  c06b34:	200c90fa 	slli	r6,r4,3
  c06b38:	01003074 	movhi	r4,193
  c06b3c:	21022b04 	addi	r4,r4,2220
  c06b40:	180b883a 	mov	r5,r3
  c06b44:	310d883a 	add	r6,r6,r4
  c06b48:	327fff17 	ldw	r9,-4(r6)
  c06b4c:	323ffe17 	ldw	r8,-8(r6)
  c06b50:	1009883a 	mov	r4,r2
  c06b54:	480f883a 	mov	r7,r9
  c06b58:	400d883a 	mov	r6,r8
  c06b5c:	0c02a1c0 	call	c02a1c <__divdf3>
  c06b60:	180b883a 	mov	r5,r3
  c06b64:	b00d883a 	mov	r6,r22
  c06b68:	b80f883a 	mov	r7,r23
  c06b6c:	1009883a 	mov	r4,r2
  c06b70:	0c029280 	call	c02928 <__subdf3>
  c06b74:	a80b883a 	mov	r5,r21
  c06b78:	a009883a 	mov	r4,r20
  c06b7c:	d8c01915 	stw	r3,100(sp)
  c06b80:	d8801815 	stw	r2,96(sp)
  c06b84:	0c0bd300 	call	c0bd30 <__fixdfsi>
  c06b88:	1009883a 	mov	r4,r2
  c06b8c:	1027883a 	mov	r19,r2
  c06b90:	0c0bc380 	call	c0bc38 <__floatsidf>
  c06b94:	a80b883a 	mov	r5,r21
  c06b98:	a009883a 	mov	r4,r20
  c06b9c:	180f883a 	mov	r7,r3
  c06ba0:	100d883a 	mov	r6,r2
  c06ba4:	0c029280 	call	c02928 <__subdf3>
  c06ba8:	d9801817 	ldw	r6,96(sp)
  c06bac:	1823883a 	mov	r17,r3
  c06bb0:	d8801415 	stw	r2,80(sp)
  c06bb4:	302d883a 	mov	r22,r6
  c06bb8:	d9800517 	ldw	r6,20(sp)
  c06bbc:	9cc00c04 	addi	r19,r19,48
  c06bc0:	dc401515 	stw	r17,84(sp)
  c06bc4:	d8c01917 	ldw	r3,100(sp)
  c06bc8:	34c00005 	stb	r19,0(r6)
  c06bcc:	d8800517 	ldw	r2,20(sp)
  c06bd0:	d9401917 	ldw	r5,100(sp)
  c06bd4:	d9801417 	ldw	r6,80(sp)
  c06bd8:	b009883a 	mov	r4,r22
  c06bdc:	880f883a 	mov	r7,r17
  c06be0:	182f883a 	mov	r23,r3
  c06be4:	17000044 	addi	fp,r2,1
  c06be8:	0c0baa00 	call	c0baa0 <__gtdf2>
  c06bec:	00804e16 	blt	zero,r2,c06d28 <_dtoa_r+0x1158>
  c06bf0:	d9801417 	ldw	r6,80(sp)
  c06bf4:	0005883a 	mov	r2,zero
  c06bf8:	00cffc34 	movhi	r3,16368
  c06bfc:	180b883a 	mov	r5,r3
  c06c00:	880f883a 	mov	r7,r17
  c06c04:	1009883a 	mov	r4,r2
  c06c08:	0c029280 	call	c02928 <__subdf3>
  c06c0c:	d9401917 	ldw	r5,100(sp)
  c06c10:	180f883a 	mov	r7,r3
  c06c14:	b009883a 	mov	r4,r22
  c06c18:	100d883a 	mov	r6,r2
  c06c1c:	0c0baa00 	call	c0baa0 <__gtdf2>
  c06c20:	00bda216 	blt	zero,r2,c062ac <_dtoa_r+0x6dc>
  c06c24:	d8c00317 	ldw	r3,12(sp)
  c06c28:	00800044 	movi	r2,1
  c06c2c:	10c01216 	blt	r2,r3,c06c78 <_dtoa_r+0x10a8>
  c06c30:	003d4506 	br	c06148 <_dtoa_r+0x578>
  c06c34:	d9801417 	ldw	r6,80(sp)
  c06c38:	0005883a 	mov	r2,zero
  c06c3c:	00cffc34 	movhi	r3,16368
  c06c40:	180b883a 	mov	r5,r3
  c06c44:	880f883a 	mov	r7,r17
  c06c48:	1009883a 	mov	r4,r2
  c06c4c:	0c029280 	call	c02928 <__subdf3>
  c06c50:	d9c01b17 	ldw	r7,108(sp)
  c06c54:	180b883a 	mov	r5,r3
  c06c58:	1009883a 	mov	r4,r2
  c06c5c:	b00d883a 	mov	r6,r22
  c06c60:	0c0bbb00 	call	c0bbb0 <__ltdf2>
  c06c64:	103d9116 	blt	r2,zero,c062ac <_dtoa_r+0x6dc>
  c06c68:	d9800517 	ldw	r6,20(sp)
  c06c6c:	d9000317 	ldw	r4,12(sp)
  c06c70:	3105883a 	add	r2,r6,r4
  c06c74:	e0bd3426 	beq	fp,r2,c06148 <_dtoa_r+0x578>
  c06c78:	04500934 	movhi	r17,16420
  c06c7c:	0021883a 	mov	r16,zero
  c06c80:	b80b883a 	mov	r5,r23
  c06c84:	b009883a 	mov	r4,r22
  c06c88:	800d883a 	mov	r6,r16
  c06c8c:	880f883a 	mov	r7,r17
  c06c90:	0c0b6540 	call	c0b654 <__muldf3>
  c06c94:	d9401517 	ldw	r5,84(sp)
  c06c98:	d9001417 	ldw	r4,80(sp)
  c06c9c:	880f883a 	mov	r7,r17
  c06ca0:	000d883a 	mov	r6,zero
  c06ca4:	d8801a15 	stw	r2,104(sp)
  c06ca8:	d8c01b15 	stw	r3,108(sp)
  c06cac:	0c0b6540 	call	c0b654 <__muldf3>
  c06cb0:	180b883a 	mov	r5,r3
  c06cb4:	1009883a 	mov	r4,r2
  c06cb8:	1823883a 	mov	r17,r3
  c06cbc:	1021883a 	mov	r16,r2
  c06cc0:	0c0bd300 	call	c0bd30 <__fixdfsi>
  c06cc4:	1009883a 	mov	r4,r2
  c06cc8:	102b883a 	mov	r21,r2
  c06ccc:	0c0bc380 	call	c0bc38 <__floatsidf>
  c06cd0:	880b883a 	mov	r5,r17
  c06cd4:	8009883a 	mov	r4,r16
  c06cd8:	180f883a 	mov	r7,r3
  c06cdc:	100d883a 	mov	r6,r2
  c06ce0:	0c029280 	call	c02928 <__subdf3>
  c06ce4:	1021883a 	mov	r16,r2
  c06ce8:	d9001b17 	ldw	r4,108(sp)
  c06cec:	1823883a 	mov	r17,r3
  c06cf0:	dc001415 	stw	r16,80(sp)
  c06cf4:	ad400c04 	addi	r21,r21,48
  c06cf8:	dc401515 	stw	r17,84(sp)
  c06cfc:	d8801a17 	ldw	r2,104(sp)
  c06d00:	e5400005 	stb	r21,0(fp)
  c06d04:	202f883a 	mov	r23,r4
  c06d08:	d9c01b17 	ldw	r7,108(sp)
  c06d0c:	d9001417 	ldw	r4,80(sp)
  c06d10:	880b883a 	mov	r5,r17
  c06d14:	100d883a 	mov	r6,r2
  c06d18:	102d883a 	mov	r22,r2
  c06d1c:	e7000044 	addi	fp,fp,1
  c06d20:	0c0bbb00 	call	c0bbb0 <__ltdf2>
  c06d24:	103fc30e 	bge	r2,zero,c06c34 <_dtoa_r+0x1064>
  c06d28:	d9000417 	ldw	r4,16(sp)
  c06d2c:	d9000d15 	stw	r4,52(sp)
  c06d30:	003d7106 	br	c062f8 <_dtoa_r+0x728>
  c06d34:	d9801717 	ldw	r6,92(sp)
  c06d38:	00800084 	movi	r2,2
  c06d3c:	11bde60e 	bge	r2,r6,c064d8 <_dtoa_r+0x908>
  c06d40:	203cfb1e 	bne	r4,zero,c06130 <_dtoa_r+0x560>
  c06d44:	d9001617 	ldw	r4,88(sp)
  c06d48:	900b883a 	mov	r5,r18
  c06d4c:	01800144 	movi	r6,5
  c06d50:	000f883a 	mov	r7,zero
  c06d54:	0c09a180 	call	c09a18 <__multadd>
  c06d58:	d9000717 	ldw	r4,28(sp)
  c06d5c:	100b883a 	mov	r5,r2
  c06d60:	1025883a 	mov	r18,r2
  c06d64:	0c08ec00 	call	c08ec0 <__mcmp>
  c06d68:	00bcf10e 	bge	zero,r2,c06130 <_dtoa_r+0x560>
  c06d6c:	d8c00d17 	ldw	r3,52(sp)
  c06d70:	d9000517 	ldw	r4,20(sp)
  c06d74:	d8000615 	stw	zero,24(sp)
  c06d78:	18c00044 	addi	r3,r3,1
  c06d7c:	d8c00d15 	stw	r3,52(sp)
  c06d80:	00800c44 	movi	r2,49
  c06d84:	27000044 	addi	fp,r4,1
  c06d88:	20800005 	stb	r2,0(r4)
  c06d8c:	003e8906 	br	c067b4 <_dtoa_r+0xbe4>
  c06d90:	d8c00517 	ldw	r3,20(sp)
  c06d94:	003bc206 	br	c05ca0 <_dtoa_r+0xd0>
  c06d98:	01803074 	movhi	r6,193
  c06d9c:	31825d04 	addi	r6,r6,2420
  c06da0:	30c00917 	ldw	r3,36(r6)
  c06da4:	30800817 	ldw	r2,32(r6)
  c06da8:	d9001217 	ldw	r4,72(sp)
  c06dac:	d9401317 	ldw	r5,76(sp)
  c06db0:	180f883a 	mov	r7,r3
  c06db4:	100d883a 	mov	r6,r2
  c06db8:	0c02a1c0 	call	c02a1c <__divdf3>
  c06dbc:	948003cc 	andi	r18,r18,15
  c06dc0:	058000c4 	movi	r22,3
  c06dc4:	1029883a 	mov	r20,r2
  c06dc8:	182b883a 	mov	r21,r3
  c06dcc:	003c8906 	br	c05ff4 <_dtoa_r+0x424>
  c06dd0:	d9001017 	ldw	r4,64(sp)
  c06dd4:	d9800917 	ldw	r6,36(sp)
  c06dd8:	0025883a 	mov	r18,zero
  c06ddc:	1105c83a 	sub	r2,r2,r4
  c06de0:	2089883a 	add	r4,r4,r2
  c06de4:	308d883a 	add	r6,r6,r2
  c06de8:	d9001015 	stw	r4,64(sp)
  c06dec:	d9800915 	stw	r6,36(sp)
  c06df0:	003e3206 	br	c066bc <_dtoa_r+0xaec>
  c06df4:	28800044 	addi	r2,r5,1
  c06df8:	27000044 	addi	fp,r4,1
  c06dfc:	20800005 	stb	r2,0(r4)
  c06e00:	003e6c06 	br	c067b4 <_dtoa_r+0xbe4>
  c06e04:	d8800f17 	ldw	r2,60(sp)
  c06e08:	00bce016 	blt	zero,r2,c0618c <_dtoa_r+0x5bc>
  c06e0c:	d9800f17 	ldw	r6,60(sp)
  c06e10:	303cc51e 	bne	r6,zero,c06128 <_dtoa_r+0x558>
  c06e14:	0005883a 	mov	r2,zero
  c06e18:	00d00534 	movhi	r3,16404
  c06e1c:	980b883a 	mov	r5,r19
  c06e20:	180f883a 	mov	r7,r3
  c06e24:	9009883a 	mov	r4,r18
  c06e28:	100d883a 	mov	r6,r2
  c06e2c:	0c0b6540 	call	c0b654 <__muldf3>
  c06e30:	180b883a 	mov	r5,r3
  c06e34:	a80f883a 	mov	r7,r21
  c06e38:	1009883a 	mov	r4,r2
  c06e3c:	a00d883a 	mov	r6,r20
  c06e40:	0c0bb280 	call	c0bb28 <__gedf2>
  c06e44:	103cb80e 	bge	r2,zero,c06128 <_dtoa_r+0x558>
  c06e48:	0027883a 	mov	r19,zero
  c06e4c:	0025883a 	mov	r18,zero
  c06e50:	003fc606 	br	c06d6c <_dtoa_r+0x119c>
  c06e54:	99400117 	ldw	r5,4(r19)
  c06e58:	d9001617 	ldw	r4,88(sp)
  c06e5c:	0c092e40 	call	c092e4 <_Balloc>
  c06e60:	99800417 	ldw	r6,16(r19)
  c06e64:	11000304 	addi	r4,r2,12
  c06e68:	99400304 	addi	r5,r19,12
  c06e6c:	318d883a 	add	r6,r6,r6
  c06e70:	318d883a 	add	r6,r6,r6
  c06e74:	31800204 	addi	r6,r6,8
  c06e78:	1023883a 	mov	r17,r2
  c06e7c:	0c08b4c0 	call	c08b4c <memcpy>
  c06e80:	d9001617 	ldw	r4,88(sp)
  c06e84:	880b883a 	mov	r5,r17
  c06e88:	01800044 	movi	r6,1
  c06e8c:	0c096a80 	call	c096a8 <__lshift>
  c06e90:	100b883a 	mov	r5,r2
  c06e94:	003d9c06 	br	c06508 <_dtoa_r+0x938>
  c06e98:	00800e44 	movi	r2,57
  c06e9c:	b8807026 	beq	r23,r2,c07060 <_dtoa_r+0x1490>
  c06ea0:	b8800044 	addi	r2,r23,1
  c06ea4:	b7000044 	addi	fp,r22,1
  c06ea8:	b0800005 	stb	r2,0(r22)
  c06eac:	003e4106 	br	c067b4 <_dtoa_r+0xbe4>
  c06eb0:	d8800317 	ldw	r2,12(sp)
  c06eb4:	01803074 	movhi	r6,193
  c06eb8:	31822b04 	addi	r6,r6,2220
  c06ebc:	b009883a 	mov	r4,r22
  c06ec0:	100e90fa 	slli	r7,r2,3
  c06ec4:	b80b883a 	mov	r5,r23
  c06ec8:	398f883a 	add	r7,r7,r6
  c06ecc:	38bffe17 	ldw	r2,-8(r7)
  c06ed0:	d9800517 	ldw	r6,20(sp)
  c06ed4:	38ffff17 	ldw	r3,-4(r7)
  c06ed8:	37000044 	addi	fp,r6,1
  c06edc:	180f883a 	mov	r7,r3
  c06ee0:	100d883a 	mov	r6,r2
  c06ee4:	0c0b6540 	call	c0b654 <__muldf3>
  c06ee8:	a80b883a 	mov	r5,r21
  c06eec:	a009883a 	mov	r4,r20
  c06ef0:	182f883a 	mov	r23,r3
  c06ef4:	102d883a 	mov	r22,r2
  c06ef8:	0c0bd300 	call	c0bd30 <__fixdfsi>
  c06efc:	1009883a 	mov	r4,r2
  c06f00:	1027883a 	mov	r19,r2
  c06f04:	0c0bc380 	call	c0bc38 <__floatsidf>
  c06f08:	a80b883a 	mov	r5,r21
  c06f0c:	a009883a 	mov	r4,r20
  c06f10:	180f883a 	mov	r7,r3
  c06f14:	100d883a 	mov	r6,r2
  c06f18:	0c029280 	call	c02928 <__subdf3>
  c06f1c:	180b883a 	mov	r5,r3
  c06f20:	d8c00517 	ldw	r3,20(sp)
  c06f24:	9cc00c04 	addi	r19,r19,48
  c06f28:	1009883a 	mov	r4,r2
  c06f2c:	1cc00005 	stb	r19,0(r3)
  c06f30:	2021883a 	mov	r16,r4
  c06f34:	d9000317 	ldw	r4,12(sp)
  c06f38:	00800044 	movi	r2,1
  c06f3c:	2823883a 	mov	r17,r5
  c06f40:	20802226 	beq	r4,r2,c06fcc <_dtoa_r+0x13fc>
  c06f44:	1029883a 	mov	r20,r2
  c06f48:	0005883a 	mov	r2,zero
  c06f4c:	00d00934 	movhi	r3,16420
  c06f50:	180f883a 	mov	r7,r3
  c06f54:	100d883a 	mov	r6,r2
  c06f58:	880b883a 	mov	r5,r17
  c06f5c:	8009883a 	mov	r4,r16
  c06f60:	0c0b6540 	call	c0b654 <__muldf3>
  c06f64:	180b883a 	mov	r5,r3
  c06f68:	1009883a 	mov	r4,r2
  c06f6c:	1823883a 	mov	r17,r3
  c06f70:	1021883a 	mov	r16,r2
  c06f74:	0c0bd300 	call	c0bd30 <__fixdfsi>
  c06f78:	1009883a 	mov	r4,r2
  c06f7c:	102b883a 	mov	r21,r2
  c06f80:	0c0bc380 	call	c0bc38 <__floatsidf>
  c06f84:	880b883a 	mov	r5,r17
  c06f88:	8009883a 	mov	r4,r16
  c06f8c:	180f883a 	mov	r7,r3
  c06f90:	100d883a 	mov	r6,r2
  c06f94:	0c029280 	call	c02928 <__subdf3>
  c06f98:	180b883a 	mov	r5,r3
  c06f9c:	d8c00517 	ldw	r3,20(sp)
  c06fa0:	1009883a 	mov	r4,r2
  c06fa4:	ad400c04 	addi	r21,r21,48
  c06fa8:	1d05883a 	add	r2,r3,r20
  c06fac:	15400005 	stb	r21,0(r2)
  c06fb0:	2021883a 	mov	r16,r4
  c06fb4:	d9000317 	ldw	r4,12(sp)
  c06fb8:	a5000044 	addi	r20,r20,1
  c06fbc:	2823883a 	mov	r17,r5
  c06fc0:	a13fe11e 	bne	r20,r4,c06f48 <_dtoa_r+0x1378>
  c06fc4:	e505883a 	add	r2,fp,r20
  c06fc8:	173fffc4 	addi	fp,r2,-1
  c06fcc:	0025883a 	mov	r18,zero
  c06fd0:	04cff834 	movhi	r19,16352
  c06fd4:	b009883a 	mov	r4,r22
  c06fd8:	b80b883a 	mov	r5,r23
  c06fdc:	900d883a 	mov	r6,r18
  c06fe0:	980f883a 	mov	r7,r19
  c06fe4:	0c029a80 	call	c029a8 <__adddf3>
  c06fe8:	180b883a 	mov	r5,r3
  c06fec:	1009883a 	mov	r4,r2
  c06ff0:	800d883a 	mov	r6,r16
  c06ff4:	880f883a 	mov	r7,r17
  c06ff8:	0c0bbb00 	call	c0bbb0 <__ltdf2>
  c06ffc:	103cab16 	blt	r2,zero,c062ac <_dtoa_r+0x6dc>
  c07000:	0009883a 	mov	r4,zero
  c07004:	980b883a 	mov	r5,r19
  c07008:	b80f883a 	mov	r7,r23
  c0700c:	b00d883a 	mov	r6,r22
  c07010:	0c029280 	call	c02928 <__subdf3>
  c07014:	180b883a 	mov	r5,r3
  c07018:	880f883a 	mov	r7,r17
  c0701c:	1009883a 	mov	r4,r2
  c07020:	800d883a 	mov	r6,r16
  c07024:	0c0baa00 	call	c0baa0 <__gtdf2>
  c07028:	00bc470e 	bge	zero,r2,c06148 <_dtoa_r+0x578>
  c0702c:	00c00c04 	movi	r3,48
  c07030:	e73fffc4 	addi	fp,fp,-1
  c07034:	e0800007 	ldb	r2,0(fp)
  c07038:	10fffd26 	beq	r2,r3,c07030 <_dtoa_r+0x1460>
  c0703c:	d9800417 	ldw	r6,16(sp)
  c07040:	e7000044 	addi	fp,fp,1
  c07044:	d9800d15 	stw	r6,52(sp)
  c07048:	003cab06 	br	c062f8 <_dtoa_r+0x728>
  c0704c:	d8c00f17 	ldw	r3,60(sp)
  c07050:	d9001117 	ldw	r4,68(sp)
  c07054:	20e1c83a 	sub	r16,r4,r3
  c07058:	0007883a 	mov	r3,zero
  c0705c:	003d9b06 	br	c066cc <_dtoa_r+0xafc>
  c07060:	00800e44 	movi	r2,57
  c07064:	b0800005 	stb	r2,0(r22)
  c07068:	b5800044 	addi	r22,r22,1
  c0706c:	003dc106 	br	c06774 <_dtoa_r+0xba4>
  c07070:	05800084 	movi	r22,2
  c07074:	003bf706 	br	c06054 <_dtoa_r+0x484>
  c07078:	d9000f17 	ldw	r4,60(sp)
  c0707c:	013c000e 	bge	zero,r4,c06080 <_dtoa_r+0x4b0>
  c07080:	d9800e17 	ldw	r6,56(sp)
  c07084:	01bc300e 	bge	zero,r6,c06148 <_dtoa_r+0x578>
  c07088:	0005883a 	mov	r2,zero
  c0708c:	00d00934 	movhi	r3,16420
  c07090:	a80b883a 	mov	r5,r21
  c07094:	180f883a 	mov	r7,r3
  c07098:	a009883a 	mov	r4,r20
  c0709c:	100d883a 	mov	r6,r2
  c070a0:	0c0b6540 	call	c0b654 <__muldf3>
  c070a4:	b1000044 	addi	r4,r22,1
  c070a8:	1021883a 	mov	r16,r2
  c070ac:	1823883a 	mov	r17,r3
  c070b0:	0c0bc380 	call	c0bc38 <__floatsidf>
  c070b4:	880b883a 	mov	r5,r17
  c070b8:	8009883a 	mov	r4,r16
  c070bc:	180f883a 	mov	r7,r3
  c070c0:	100d883a 	mov	r6,r2
  c070c4:	0c0b6540 	call	c0b654 <__muldf3>
  c070c8:	0011883a 	mov	r8,zero
  c070cc:	02500734 	movhi	r9,16412
  c070d0:	180b883a 	mov	r5,r3
  c070d4:	480f883a 	mov	r7,r9
  c070d8:	1009883a 	mov	r4,r2
  c070dc:	400d883a 	mov	r6,r8
  c070e0:	0c029a80 	call	c029a8 <__adddf3>
  c070e4:	102d883a 	mov	r22,r2
  c070e8:	00bf3034 	movhi	r2,64704
  c070ec:	10ef883a 	add	r23,r2,r3
  c070f0:	d8800d17 	ldw	r2,52(sp)
  c070f4:	d8c00e17 	ldw	r3,56(sp)
  c070f8:	8029883a 	mov	r20,r16
  c070fc:	10bfffc4 	addi	r2,r2,-1
  c07100:	882b883a 	mov	r21,r17
  c07104:	d8800415 	stw	r2,16(sp)
  c07108:	d8c00315 	stw	r3,12(sp)
  c0710c:	003e8306 	br	c06b1c <_dtoa_r+0xf4c>
  c07110:	d8800117 	ldw	r2,4(sp)
  c07114:	dc001117 	ldw	r16,68(sp)
  c07118:	dc801017 	ldw	r18,64(sp)
  c0711c:	00c00d84 	movi	r3,54
  c07120:	1887c83a 	sub	r3,r3,r2
  c07124:	003d6906 	br	c066cc <_dtoa_r+0xafc>
  c07128:	01800044 	movi	r6,1
  c0712c:	3021883a 	mov	r16,r6
  c07130:	d9800f15 	stw	r6,60(sp)
  c07134:	d9802615 	stw	r6,152(sp)
  c07138:	d9800e15 	stw	r6,56(sp)
  c0713c:	003b9306 	br	c05f8c <_dtoa_r+0x3bc>
  c07140:	b021883a 	mov	r16,r22
  c07144:	dd800f15 	stw	r22,60(sp)
  c07148:	003b9006 	br	c05f8c <_dtoa_r+0x3bc>
  c0714c:	103e221e 	bne	r2,zero,c069d8 <_dtoa_r+0xe08>
  c07150:	b880004c 	andi	r2,r23,1
  c07154:	1005003a 	cmpeq	r2,r2,zero
  c07158:	103e1f1e 	bne	r2,zero,c069d8 <_dtoa_r+0xe08>
  c0715c:	003e1b06 	br	c069cc <_dtoa_r+0xdfc>
  c07160:	d9001617 	ldw	r4,88(sp)
  c07164:	980b883a 	mov	r5,r19
  c07168:	01800284 	movi	r6,10
  c0716c:	000f883a 	mov	r7,zero
  c07170:	0c09a180 	call	c09a18 <__multadd>
  c07174:	d8c00e17 	ldw	r3,56(sp)
  c07178:	1027883a 	mov	r19,r2
  c0717c:	d8c00f15 	stw	r3,60(sp)
  c07180:	003cd306 	br	c064d0 <_dtoa_r+0x900>

00c07184 <_fflush_r>:
  c07184:	defffb04 	addi	sp,sp,-20
  c07188:	dcc00315 	stw	r19,12(sp)
  c0718c:	dc800215 	stw	r18,8(sp)
  c07190:	dfc00415 	stw	ra,16(sp)
  c07194:	dc400115 	stw	r17,4(sp)
  c07198:	dc000015 	stw	r16,0(sp)
  c0719c:	2027883a 	mov	r19,r4
  c071a0:	2825883a 	mov	r18,r5
  c071a4:	20000226 	beq	r4,zero,c071b0 <_fflush_r+0x2c>
  c071a8:	20800e17 	ldw	r2,56(r4)
  c071ac:	10005626 	beq	r2,zero,c07308 <_fflush_r+0x184>
  c071b0:	9100030b 	ldhu	r4,12(r18)
  c071b4:	20ffffcc 	andi	r3,r4,65535
  c071b8:	18e0001c 	xori	r3,r3,32768
  c071bc:	18e00004 	addi	r3,r3,-32768
  c071c0:	1880020c 	andi	r2,r3,8
  c071c4:	1000261e 	bne	r2,zero,c07260 <_fflush_r+0xdc>
  c071c8:	90c00117 	ldw	r3,4(r18)
  c071cc:	20820014 	ori	r2,r4,2048
  c071d0:	9080030d 	sth	r2,12(r18)
  c071d4:	1009883a 	mov	r4,r2
  c071d8:	00c0400e 	bge	zero,r3,c072dc <_fflush_r+0x158>
  c071dc:	92000a17 	ldw	r8,40(r18)
  c071e0:	40004026 	beq	r8,zero,c072e4 <_fflush_r+0x160>
  c071e4:	2084000c 	andi	r2,r4,4096
  c071e8:	10005326 	beq	r2,zero,c07338 <_fflush_r+0x1b4>
  c071ec:	94001417 	ldw	r16,80(r18)
  c071f0:	9080030b 	ldhu	r2,12(r18)
  c071f4:	1080010c 	andi	r2,r2,4
  c071f8:	1000481e 	bne	r2,zero,c0731c <_fflush_r+0x198>
  c071fc:	91400717 	ldw	r5,28(r18)
  c07200:	9809883a 	mov	r4,r19
  c07204:	800d883a 	mov	r6,r16
  c07208:	000f883a 	mov	r7,zero
  c0720c:	403ee83a 	callr	r8
  c07210:	8080261e 	bne	r16,r2,c072ac <_fflush_r+0x128>
  c07214:	9080030b 	ldhu	r2,12(r18)
  c07218:	91000417 	ldw	r4,16(r18)
  c0721c:	90000115 	stw	zero,4(r18)
  c07220:	10bdffcc 	andi	r2,r2,63487
  c07224:	10ffffcc 	andi	r3,r2,65535
  c07228:	18c4000c 	andi	r3,r3,4096
  c0722c:	9080030d 	sth	r2,12(r18)
  c07230:	91000015 	stw	r4,0(r18)
  c07234:	18002b26 	beq	r3,zero,c072e4 <_fflush_r+0x160>
  c07238:	0007883a 	mov	r3,zero
  c0723c:	1805883a 	mov	r2,r3
  c07240:	94001415 	stw	r16,80(r18)
  c07244:	dfc00417 	ldw	ra,16(sp)
  c07248:	dcc00317 	ldw	r19,12(sp)
  c0724c:	dc800217 	ldw	r18,8(sp)
  c07250:	dc400117 	ldw	r17,4(sp)
  c07254:	dc000017 	ldw	r16,0(sp)
  c07258:	dec00504 	addi	sp,sp,20
  c0725c:	f800283a 	ret
  c07260:	94400417 	ldw	r17,16(r18)
  c07264:	88001f26 	beq	r17,zero,c072e4 <_fflush_r+0x160>
  c07268:	90800017 	ldw	r2,0(r18)
  c0726c:	18c000cc 	andi	r3,r3,3
  c07270:	94400015 	stw	r17,0(r18)
  c07274:	1461c83a 	sub	r16,r2,r17
  c07278:	18002526 	beq	r3,zero,c07310 <_fflush_r+0x18c>
  c0727c:	0005883a 	mov	r2,zero
  c07280:	90800215 	stw	r2,8(r18)
  c07284:	0400170e 	bge	zero,r16,c072e4 <_fflush_r+0x160>
  c07288:	90c00917 	ldw	r3,36(r18)
  c0728c:	91400717 	ldw	r5,28(r18)
  c07290:	880d883a 	mov	r6,r17
  c07294:	800f883a 	mov	r7,r16
  c07298:	9809883a 	mov	r4,r19
  c0729c:	183ee83a 	callr	r3
  c072a0:	88a3883a 	add	r17,r17,r2
  c072a4:	80a1c83a 	sub	r16,r16,r2
  c072a8:	00bff616 	blt	zero,r2,c07284 <_fflush_r+0x100>
  c072ac:	9080030b 	ldhu	r2,12(r18)
  c072b0:	00ffffc4 	movi	r3,-1
  c072b4:	10801014 	ori	r2,r2,64
  c072b8:	9080030d 	sth	r2,12(r18)
  c072bc:	1805883a 	mov	r2,r3
  c072c0:	dfc00417 	ldw	ra,16(sp)
  c072c4:	dcc00317 	ldw	r19,12(sp)
  c072c8:	dc800217 	ldw	r18,8(sp)
  c072cc:	dc400117 	ldw	r17,4(sp)
  c072d0:	dc000017 	ldw	r16,0(sp)
  c072d4:	dec00504 	addi	sp,sp,20
  c072d8:	f800283a 	ret
  c072dc:	90800f17 	ldw	r2,60(r18)
  c072e0:	00bfbe16 	blt	zero,r2,c071dc <_fflush_r+0x58>
  c072e4:	0007883a 	mov	r3,zero
  c072e8:	1805883a 	mov	r2,r3
  c072ec:	dfc00417 	ldw	ra,16(sp)
  c072f0:	dcc00317 	ldw	r19,12(sp)
  c072f4:	dc800217 	ldw	r18,8(sp)
  c072f8:	dc400117 	ldw	r17,4(sp)
  c072fc:	dc000017 	ldw	r16,0(sp)
  c07300:	dec00504 	addi	sp,sp,20
  c07304:	f800283a 	ret
  c07308:	0c0741c0 	call	c0741c <__sinit>
  c0730c:	003fa806 	br	c071b0 <_fflush_r+0x2c>
  c07310:	90800517 	ldw	r2,20(r18)
  c07314:	90800215 	stw	r2,8(r18)
  c07318:	003fda06 	br	c07284 <_fflush_r+0x100>
  c0731c:	90800117 	ldw	r2,4(r18)
  c07320:	90c00c17 	ldw	r3,48(r18)
  c07324:	80a1c83a 	sub	r16,r16,r2
  c07328:	183fb426 	beq	r3,zero,c071fc <_fflush_r+0x78>
  c0732c:	90800f17 	ldw	r2,60(r18)
  c07330:	80a1c83a 	sub	r16,r16,r2
  c07334:	003fb106 	br	c071fc <_fflush_r+0x78>
  c07338:	91400717 	ldw	r5,28(r18)
  c0733c:	9809883a 	mov	r4,r19
  c07340:	000d883a 	mov	r6,zero
  c07344:	01c00044 	movi	r7,1
  c07348:	403ee83a 	callr	r8
  c0734c:	1021883a 	mov	r16,r2
  c07350:	00bfffc4 	movi	r2,-1
  c07354:	80800226 	beq	r16,r2,c07360 <_fflush_r+0x1dc>
  c07358:	92000a17 	ldw	r8,40(r18)
  c0735c:	003fa406 	br	c071f0 <_fflush_r+0x6c>
  c07360:	98c00017 	ldw	r3,0(r19)
  c07364:	00800744 	movi	r2,29
  c07368:	18bfde26 	beq	r3,r2,c072e4 <_fflush_r+0x160>
  c0736c:	9080030b 	ldhu	r2,12(r18)
  c07370:	8007883a 	mov	r3,r16
  c07374:	10801014 	ori	r2,r2,64
  c07378:	9080030d 	sth	r2,12(r18)
  c0737c:	003fcf06 	br	c072bc <_fflush_r+0x138>

00c07380 <fflush>:
  c07380:	01403034 	movhi	r5,192
  c07384:	295c6104 	addi	r5,r5,29060
  c07388:	2007883a 	mov	r3,r4
  c0738c:	20000526 	beq	r4,zero,c073a4 <fflush+0x24>
  c07390:	00803074 	movhi	r2,193
  c07394:	1089a904 	addi	r2,r2,9892
  c07398:	11000017 	ldw	r4,0(r2)
  c0739c:	180b883a 	mov	r5,r3
  c073a0:	0c071841 	jmpi	c07184 <_fflush_r>
  c073a4:	00803074 	movhi	r2,193
  c073a8:	1089aa04 	addi	r2,r2,9896
  c073ac:	11000017 	ldw	r4,0(r2)
  c073b0:	0c07f501 	jmpi	c07f50 <_fwalk_reent>

00c073b4 <std>:
  c073b4:	00803074 	movhi	r2,193
  c073b8:	10a90b04 	addi	r2,r2,-23508
  c073bc:	20800b15 	stw	r2,44(r4)
  c073c0:	00803074 	movhi	r2,193
  c073c4:	10a94604 	addi	r2,r2,-23272
  c073c8:	20800815 	stw	r2,32(r4)
  c073cc:	00c03074 	movhi	r3,193
  c073d0:	18e92704 	addi	r3,r3,-23396
  c073d4:	00803074 	movhi	r2,193
  c073d8:	10a90d04 	addi	r2,r2,-23500
  c073dc:	2140030d 	sth	r5,12(r4)
  c073e0:	2180038d 	sth	r6,14(r4)
  c073e4:	20c00915 	stw	r3,36(r4)
  c073e8:	20800a15 	stw	r2,40(r4)
  c073ec:	20000015 	stw	zero,0(r4)
  c073f0:	20000115 	stw	zero,4(r4)
  c073f4:	20000215 	stw	zero,8(r4)
  c073f8:	20000415 	stw	zero,16(r4)
  c073fc:	20000515 	stw	zero,20(r4)
  c07400:	20000615 	stw	zero,24(r4)
  c07404:	21000715 	stw	r4,28(r4)
  c07408:	f800283a 	ret

00c0740c <__sfp_lock_acquire>:
  c0740c:	f800283a 	ret

00c07410 <__sfp_lock_release>:
  c07410:	f800283a 	ret

00c07414 <__sinit_lock_acquire>:
  c07414:	f800283a 	ret

00c07418 <__sinit_lock_release>:
  c07418:	f800283a 	ret

00c0741c <__sinit>:
  c0741c:	20800e17 	ldw	r2,56(r4)
  c07420:	defffd04 	addi	sp,sp,-12
  c07424:	dc400115 	stw	r17,4(sp)
  c07428:	dc000015 	stw	r16,0(sp)
  c0742c:	dfc00215 	stw	ra,8(sp)
  c07430:	04400044 	movi	r17,1
  c07434:	01400104 	movi	r5,4
  c07438:	000d883a 	mov	r6,zero
  c0743c:	2021883a 	mov	r16,r4
  c07440:	2200bb04 	addi	r8,r4,748
  c07444:	200f883a 	mov	r7,r4
  c07448:	10000526 	beq	r2,zero,c07460 <__sinit+0x44>
  c0744c:	dfc00217 	ldw	ra,8(sp)
  c07450:	dc400117 	ldw	r17,4(sp)
  c07454:	dc000017 	ldw	r16,0(sp)
  c07458:	dec00304 	addi	sp,sp,12
  c0745c:	f800283a 	ret
  c07460:	21000117 	ldw	r4,4(r4)
  c07464:	00803034 	movhi	r2,192
  c07468:	109d4004 	addi	r2,r2,29952
  c0746c:	00c000c4 	movi	r3,3
  c07470:	80800f15 	stw	r2,60(r16)
  c07474:	80c0b915 	stw	r3,740(r16)
  c07478:	8200ba15 	stw	r8,744(r16)
  c0747c:	84400e15 	stw	r17,56(r16)
  c07480:	8000b815 	stw	zero,736(r16)
  c07484:	0c073b40 	call	c073b4 <std>
  c07488:	81000217 	ldw	r4,8(r16)
  c0748c:	880d883a 	mov	r6,r17
  c07490:	800f883a 	mov	r7,r16
  c07494:	01400284 	movi	r5,10
  c07498:	0c073b40 	call	c073b4 <std>
  c0749c:	81000317 	ldw	r4,12(r16)
  c074a0:	800f883a 	mov	r7,r16
  c074a4:	01400484 	movi	r5,18
  c074a8:	01800084 	movi	r6,2
  c074ac:	dfc00217 	ldw	ra,8(sp)
  c074b0:	dc400117 	ldw	r17,4(sp)
  c074b4:	dc000017 	ldw	r16,0(sp)
  c074b8:	dec00304 	addi	sp,sp,12
  c074bc:	0c073b41 	jmpi	c073b4 <std>

00c074c0 <__fp_lock>:
  c074c0:	0005883a 	mov	r2,zero
  c074c4:	f800283a 	ret

00c074c8 <__fp_unlock>:
  c074c8:	0005883a 	mov	r2,zero
  c074cc:	f800283a 	ret

00c074d0 <__fp_unlock_all>:
  c074d0:	00803074 	movhi	r2,193
  c074d4:	1089a904 	addi	r2,r2,9892
  c074d8:	11000017 	ldw	r4,0(r2)
  c074dc:	01403034 	movhi	r5,192
  c074e0:	295d3204 	addi	r5,r5,29896
  c074e4:	0c080181 	jmpi	c08018 <_fwalk>

00c074e8 <__fp_lock_all>:
  c074e8:	00803074 	movhi	r2,193
  c074ec:	1089a904 	addi	r2,r2,9892
  c074f0:	11000017 	ldw	r4,0(r2)
  c074f4:	01403034 	movhi	r5,192
  c074f8:	295d3004 	addi	r5,r5,29888
  c074fc:	0c080181 	jmpi	c08018 <_fwalk>

00c07500 <_cleanup_r>:
  c07500:	01403074 	movhi	r5,193
  c07504:	296a3804 	addi	r5,r5,-22304
  c07508:	0c080181 	jmpi	c08018 <_fwalk>

00c0750c <_cleanup>:
  c0750c:	00803074 	movhi	r2,193
  c07510:	1089aa04 	addi	r2,r2,9896
  c07514:	11000017 	ldw	r4,0(r2)
  c07518:	0c075001 	jmpi	c07500 <_cleanup_r>

00c0751c <__sfmoreglue>:
  c0751c:	defffc04 	addi	sp,sp,-16
  c07520:	dc400115 	stw	r17,4(sp)
  c07524:	2c401724 	muli	r17,r5,92
  c07528:	dc800215 	stw	r18,8(sp)
  c0752c:	2825883a 	mov	r18,r5
  c07530:	89400304 	addi	r5,r17,12
  c07534:	dc000015 	stw	r16,0(sp)
  c07538:	dfc00315 	stw	ra,12(sp)
  c0753c:	0c083280 	call	c08328 <_malloc_r>
  c07540:	0021883a 	mov	r16,zero
  c07544:	880d883a 	mov	r6,r17
  c07548:	000b883a 	mov	r5,zero
  c0754c:	10000626 	beq	r2,zero,c07568 <__sfmoreglue+0x4c>
  c07550:	11000304 	addi	r4,r2,12
  c07554:	14800115 	stw	r18,4(r2)
  c07558:	10000015 	stw	zero,0(r2)
  c0755c:	11000215 	stw	r4,8(r2)
  c07560:	1021883a 	mov	r16,r2
  c07564:	0c08ccc0 	call	c08ccc <memset>
  c07568:	8005883a 	mov	r2,r16
  c0756c:	dfc00317 	ldw	ra,12(sp)
  c07570:	dc800217 	ldw	r18,8(sp)
  c07574:	dc400117 	ldw	r17,4(sp)
  c07578:	dc000017 	ldw	r16,0(sp)
  c0757c:	dec00404 	addi	sp,sp,16
  c07580:	f800283a 	ret

00c07584 <__sfp>:
  c07584:	defffd04 	addi	sp,sp,-12
  c07588:	00803074 	movhi	r2,193
  c0758c:	1089aa04 	addi	r2,r2,9896
  c07590:	dc000015 	stw	r16,0(sp)
  c07594:	14000017 	ldw	r16,0(r2)
  c07598:	dc400115 	stw	r17,4(sp)
  c0759c:	dfc00215 	stw	ra,8(sp)
  c075a0:	80800e17 	ldw	r2,56(r16)
  c075a4:	2023883a 	mov	r17,r4
  c075a8:	10002626 	beq	r2,zero,c07644 <__sfp+0xc0>
  c075ac:	8400b804 	addi	r16,r16,736
  c075b0:	80800117 	ldw	r2,4(r16)
  c075b4:	81000217 	ldw	r4,8(r16)
  c075b8:	10ffffc4 	addi	r3,r2,-1
  c075bc:	18000916 	blt	r3,zero,c075e4 <__sfp+0x60>
  c075c0:	2080030f 	ldh	r2,12(r4)
  c075c4:	10000b26 	beq	r2,zero,c075f4 <__sfp+0x70>
  c075c8:	017fffc4 	movi	r5,-1
  c075cc:	00000206 	br	c075d8 <__sfp+0x54>
  c075d0:	2080030f 	ldh	r2,12(r4)
  c075d4:	10000726 	beq	r2,zero,c075f4 <__sfp+0x70>
  c075d8:	18ffffc4 	addi	r3,r3,-1
  c075dc:	21001704 	addi	r4,r4,92
  c075e0:	197ffb1e 	bne	r3,r5,c075d0 <__sfp+0x4c>
  c075e4:	80800017 	ldw	r2,0(r16)
  c075e8:	10001926 	beq	r2,zero,c07650 <__sfp+0xcc>
  c075ec:	1021883a 	mov	r16,r2
  c075f0:	003fef06 	br	c075b0 <__sfp+0x2c>
  c075f4:	00bfffc4 	movi	r2,-1
  c075f8:	00c00044 	movi	r3,1
  c075fc:	2080038d 	sth	r2,14(r4)
  c07600:	20c0030d 	sth	r3,12(r4)
  c07604:	20000015 	stw	zero,0(r4)
  c07608:	20000215 	stw	zero,8(r4)
  c0760c:	20000115 	stw	zero,4(r4)
  c07610:	20000415 	stw	zero,16(r4)
  c07614:	20000515 	stw	zero,20(r4)
  c07618:	20000615 	stw	zero,24(r4)
  c0761c:	20000c15 	stw	zero,48(r4)
  c07620:	20000d15 	stw	zero,52(r4)
  c07624:	20001115 	stw	zero,68(r4)
  c07628:	20001215 	stw	zero,72(r4)
  c0762c:	2005883a 	mov	r2,r4
  c07630:	dfc00217 	ldw	ra,8(sp)
  c07634:	dc400117 	ldw	r17,4(sp)
  c07638:	dc000017 	ldw	r16,0(sp)
  c0763c:	dec00304 	addi	sp,sp,12
  c07640:	f800283a 	ret
  c07644:	8009883a 	mov	r4,r16
  c07648:	0c0741c0 	call	c0741c <__sinit>
  c0764c:	003fd706 	br	c075ac <__sfp+0x28>
  c07650:	8809883a 	mov	r4,r17
  c07654:	01400104 	movi	r5,4
  c07658:	0c0751c0 	call	c0751c <__sfmoreglue>
  c0765c:	80800015 	stw	r2,0(r16)
  c07660:	103fe21e 	bne	r2,zero,c075ec <__sfp+0x68>
  c07664:	00800304 	movi	r2,12
  c07668:	0009883a 	mov	r4,zero
  c0766c:	88800015 	stw	r2,0(r17)
  c07670:	003fee06 	br	c0762c <__sfp+0xa8>

00c07674 <_malloc_trim_r>:
  c07674:	defffb04 	addi	sp,sp,-20
  c07678:	dcc00315 	stw	r19,12(sp)
  c0767c:	04c03074 	movhi	r19,193
  c07680:	9cc3c704 	addi	r19,r19,3868
  c07684:	dc800215 	stw	r18,8(sp)
  c07688:	dc400115 	stw	r17,4(sp)
  c0768c:	dc000015 	stw	r16,0(sp)
  c07690:	2823883a 	mov	r17,r5
  c07694:	2025883a 	mov	r18,r4
  c07698:	dfc00415 	stw	ra,16(sp)
  c0769c:	0c0c7500 	call	c0c750 <__malloc_lock>
  c076a0:	98800217 	ldw	r2,8(r19)
  c076a4:	9009883a 	mov	r4,r18
  c076a8:	000b883a 	mov	r5,zero
  c076ac:	10c00117 	ldw	r3,4(r2)
  c076b0:	00bfff04 	movi	r2,-4
  c076b4:	18a0703a 	and	r16,r3,r2
  c076b8:	8463c83a 	sub	r17,r16,r17
  c076bc:	8c43fbc4 	addi	r17,r17,4079
  c076c0:	8822d33a 	srli	r17,r17,12
  c076c4:	0083ffc4 	movi	r2,4095
  c076c8:	8c7fffc4 	addi	r17,r17,-1
  c076cc:	8822933a 	slli	r17,r17,12
  c076d0:	1440060e 	bge	r2,r17,c076ec <_malloc_trim_r+0x78>
  c076d4:	0c0a3bc0 	call	c0a3bc <_sbrk_r>
  c076d8:	98c00217 	ldw	r3,8(r19)
  c076dc:	9009883a 	mov	r4,r18
  c076e0:	044bc83a 	sub	r5,zero,r17
  c076e4:	80c7883a 	add	r3,r16,r3
  c076e8:	10c00926 	beq	r2,r3,c07710 <_malloc_trim_r+0x9c>
  c076ec:	0c0c7700 	call	c0c770 <__malloc_unlock>
  c076f0:	0005883a 	mov	r2,zero
  c076f4:	dfc00417 	ldw	ra,16(sp)
  c076f8:	dcc00317 	ldw	r19,12(sp)
  c076fc:	dc800217 	ldw	r18,8(sp)
  c07700:	dc400117 	ldw	r17,4(sp)
  c07704:	dc000017 	ldw	r16,0(sp)
  c07708:	dec00504 	addi	sp,sp,20
  c0770c:	f800283a 	ret
  c07710:	9009883a 	mov	r4,r18
  c07714:	0c0a3bc0 	call	c0a3bc <_sbrk_r>
  c07718:	844dc83a 	sub	r6,r16,r17
  c0771c:	00ffffc4 	movi	r3,-1
  c07720:	9009883a 	mov	r4,r18
  c07724:	000b883a 	mov	r5,zero
  c07728:	01c03074 	movhi	r7,193
  c0772c:	39d0c404 	addi	r7,r7,17168
  c07730:	31800054 	ori	r6,r6,1
  c07734:	10c00926 	beq	r2,r3,c0775c <_malloc_trim_r+0xe8>
  c07738:	38800017 	ldw	r2,0(r7)
  c0773c:	98c00217 	ldw	r3,8(r19)
  c07740:	9009883a 	mov	r4,r18
  c07744:	1445c83a 	sub	r2,r2,r17
  c07748:	38800015 	stw	r2,0(r7)
  c0774c:	19800115 	stw	r6,4(r3)
  c07750:	0c0c7700 	call	c0c770 <__malloc_unlock>
  c07754:	00800044 	movi	r2,1
  c07758:	003fe606 	br	c076f4 <_malloc_trim_r+0x80>
  c0775c:	0c0a3bc0 	call	c0a3bc <_sbrk_r>
  c07760:	99800217 	ldw	r6,8(r19)
  c07764:	100f883a 	mov	r7,r2
  c07768:	9009883a 	mov	r4,r18
  c0776c:	1187c83a 	sub	r3,r2,r6
  c07770:	008003c4 	movi	r2,15
  c07774:	19400054 	ori	r5,r3,1
  c07778:	10ffdc0e 	bge	r2,r3,c076ec <_malloc_trim_r+0x78>
  c0777c:	00803074 	movhi	r2,193
  c07780:	1089ae04 	addi	r2,r2,9912
  c07784:	10c00017 	ldw	r3,0(r2)
  c07788:	00803074 	movhi	r2,193
  c0778c:	1090c404 	addi	r2,r2,17168
  c07790:	31400115 	stw	r5,4(r6)
  c07794:	38c7c83a 	sub	r3,r7,r3
  c07798:	10c00015 	stw	r3,0(r2)
  c0779c:	003fd306 	br	c076ec <_malloc_trim_r+0x78>

00c077a0 <_free_r>:
  c077a0:	defffd04 	addi	sp,sp,-12
  c077a4:	dc400115 	stw	r17,4(sp)
  c077a8:	dc000015 	stw	r16,0(sp)
  c077ac:	dfc00215 	stw	ra,8(sp)
  c077b0:	2821883a 	mov	r16,r5
  c077b4:	2023883a 	mov	r17,r4
  c077b8:	28005a26 	beq	r5,zero,c07924 <_free_r+0x184>
  c077bc:	0c0c7500 	call	c0c750 <__malloc_lock>
  c077c0:	823ffe04 	addi	r8,r16,-8
  c077c4:	41400117 	ldw	r5,4(r8)
  c077c8:	00bfff84 	movi	r2,-2
  c077cc:	02803074 	movhi	r10,193
  c077d0:	5283c704 	addi	r10,r10,3868
  c077d4:	288e703a 	and	r7,r5,r2
  c077d8:	41cd883a 	add	r6,r8,r7
  c077dc:	30c00117 	ldw	r3,4(r6)
  c077e0:	51000217 	ldw	r4,8(r10)
  c077e4:	00bfff04 	movi	r2,-4
  c077e8:	1892703a 	and	r9,r3,r2
  c077ec:	5017883a 	mov	r11,r10
  c077f0:	31006726 	beq	r6,r4,c07990 <_free_r+0x1f0>
  c077f4:	2880004c 	andi	r2,r5,1
  c077f8:	1005003a 	cmpeq	r2,r2,zero
  c077fc:	32400115 	stw	r9,4(r6)
  c07800:	10001a1e 	bne	r2,zero,c0786c <_free_r+0xcc>
  c07804:	000b883a 	mov	r5,zero
  c07808:	3247883a 	add	r3,r6,r9
  c0780c:	18800117 	ldw	r2,4(r3)
  c07810:	1080004c 	andi	r2,r2,1
  c07814:	1000231e 	bne	r2,zero,c078a4 <_free_r+0x104>
  c07818:	280ac03a 	cmpne	r5,r5,zero
  c0781c:	3a4f883a 	add	r7,r7,r9
  c07820:	2800451e 	bne	r5,zero,c07938 <_free_r+0x198>
  c07824:	31000217 	ldw	r4,8(r6)
  c07828:	00803074 	movhi	r2,193
  c0782c:	1083c904 	addi	r2,r2,3876
  c07830:	20807b26 	beq	r4,r2,c07a20 <_free_r+0x280>
  c07834:	30800317 	ldw	r2,12(r6)
  c07838:	3a07883a 	add	r3,r7,r8
  c0783c:	19c00015 	stw	r7,0(r3)
  c07840:	11000215 	stw	r4,8(r2)
  c07844:	20800315 	stw	r2,12(r4)
  c07848:	38800054 	ori	r2,r7,1
  c0784c:	40800115 	stw	r2,4(r8)
  c07850:	28001a26 	beq	r5,zero,c078bc <_free_r+0x11c>
  c07854:	8809883a 	mov	r4,r17
  c07858:	dfc00217 	ldw	ra,8(sp)
  c0785c:	dc400117 	ldw	r17,4(sp)
  c07860:	dc000017 	ldw	r16,0(sp)
  c07864:	dec00304 	addi	sp,sp,12
  c07868:	0c0c7701 	jmpi	c0c770 <__malloc_unlock>
  c0786c:	80bffe17 	ldw	r2,-8(r16)
  c07870:	50c00204 	addi	r3,r10,8
  c07874:	4091c83a 	sub	r8,r8,r2
  c07878:	41000217 	ldw	r4,8(r8)
  c0787c:	388f883a 	add	r7,r7,r2
  c07880:	20c06126 	beq	r4,r3,c07a08 <_free_r+0x268>
  c07884:	40800317 	ldw	r2,12(r8)
  c07888:	3247883a 	add	r3,r6,r9
  c0788c:	000b883a 	mov	r5,zero
  c07890:	11000215 	stw	r4,8(r2)
  c07894:	20800315 	stw	r2,12(r4)
  c07898:	18800117 	ldw	r2,4(r3)
  c0789c:	1080004c 	andi	r2,r2,1
  c078a0:	103fdd26 	beq	r2,zero,c07818 <_free_r+0x78>
  c078a4:	38800054 	ori	r2,r7,1
  c078a8:	3a07883a 	add	r3,r7,r8
  c078ac:	280ac03a 	cmpne	r5,r5,zero
  c078b0:	40800115 	stw	r2,4(r8)
  c078b4:	19c00015 	stw	r7,0(r3)
  c078b8:	283fe61e 	bne	r5,zero,c07854 <_free_r+0xb4>
  c078bc:	00807fc4 	movi	r2,511
  c078c0:	11c01f2e 	bgeu	r2,r7,c07940 <_free_r+0x1a0>
  c078c4:	3806d27a 	srli	r3,r7,9
  c078c8:	1800481e 	bne	r3,zero,c079ec <_free_r+0x24c>
  c078cc:	3804d0fa 	srli	r2,r7,3
  c078d0:	100690fa 	slli	r3,r2,3
  c078d4:	1acd883a 	add	r6,r3,r11
  c078d8:	31400217 	ldw	r5,8(r6)
  c078dc:	31405926 	beq	r6,r5,c07a44 <_free_r+0x2a4>
  c078e0:	28800117 	ldw	r2,4(r5)
  c078e4:	00ffff04 	movi	r3,-4
  c078e8:	10c4703a 	and	r2,r2,r3
  c078ec:	3880022e 	bgeu	r7,r2,c078f8 <_free_r+0x158>
  c078f0:	29400217 	ldw	r5,8(r5)
  c078f4:	317ffa1e 	bne	r6,r5,c078e0 <_free_r+0x140>
  c078f8:	29800317 	ldw	r6,12(r5)
  c078fc:	41800315 	stw	r6,12(r8)
  c07900:	41400215 	stw	r5,8(r8)
  c07904:	8809883a 	mov	r4,r17
  c07908:	2a000315 	stw	r8,12(r5)
  c0790c:	32000215 	stw	r8,8(r6)
  c07910:	dfc00217 	ldw	ra,8(sp)
  c07914:	dc400117 	ldw	r17,4(sp)
  c07918:	dc000017 	ldw	r16,0(sp)
  c0791c:	dec00304 	addi	sp,sp,12
  c07920:	0c0c7701 	jmpi	c0c770 <__malloc_unlock>
  c07924:	dfc00217 	ldw	ra,8(sp)
  c07928:	dc400117 	ldw	r17,4(sp)
  c0792c:	dc000017 	ldw	r16,0(sp)
  c07930:	dec00304 	addi	sp,sp,12
  c07934:	f800283a 	ret
  c07938:	31000217 	ldw	r4,8(r6)
  c0793c:	003fbd06 	br	c07834 <_free_r+0x94>
  c07940:	3806d0fa 	srli	r3,r7,3
  c07944:	00800044 	movi	r2,1
  c07948:	51400117 	ldw	r5,4(r10)
  c0794c:	180890fa 	slli	r4,r3,3
  c07950:	1807d0ba 	srai	r3,r3,2
  c07954:	22c9883a 	add	r4,r4,r11
  c07958:	21800217 	ldw	r6,8(r4)
  c0795c:	10c4983a 	sll	r2,r2,r3
  c07960:	41000315 	stw	r4,12(r8)
  c07964:	41800215 	stw	r6,8(r8)
  c07968:	288ab03a 	or	r5,r5,r2
  c0796c:	22000215 	stw	r8,8(r4)
  c07970:	8809883a 	mov	r4,r17
  c07974:	51400115 	stw	r5,4(r10)
  c07978:	32000315 	stw	r8,12(r6)
  c0797c:	dfc00217 	ldw	ra,8(sp)
  c07980:	dc400117 	ldw	r17,4(sp)
  c07984:	dc000017 	ldw	r16,0(sp)
  c07988:	dec00304 	addi	sp,sp,12
  c0798c:	0c0c7701 	jmpi	c0c770 <__malloc_unlock>
  c07990:	2880004c 	andi	r2,r5,1
  c07994:	3a4d883a 	add	r6,r7,r9
  c07998:	1000071e 	bne	r2,zero,c079b8 <_free_r+0x218>
  c0799c:	80bffe17 	ldw	r2,-8(r16)
  c079a0:	4091c83a 	sub	r8,r8,r2
  c079a4:	41000317 	ldw	r4,12(r8)
  c079a8:	40c00217 	ldw	r3,8(r8)
  c079ac:	308d883a 	add	r6,r6,r2
  c079b0:	20c00215 	stw	r3,8(r4)
  c079b4:	19000315 	stw	r4,12(r3)
  c079b8:	00803074 	movhi	r2,193
  c079bc:	1089ad04 	addi	r2,r2,9908
  c079c0:	11000017 	ldw	r4,0(r2)
  c079c4:	30c00054 	ori	r3,r6,1
  c079c8:	52000215 	stw	r8,8(r10)
  c079cc:	40c00115 	stw	r3,4(r8)
  c079d0:	313fa036 	bltu	r6,r4,c07854 <_free_r+0xb4>
  c079d4:	00803074 	movhi	r2,193
  c079d8:	1090ba04 	addi	r2,r2,17128
  c079dc:	11400017 	ldw	r5,0(r2)
  c079e0:	8809883a 	mov	r4,r17
  c079e4:	0c076740 	call	c07674 <_malloc_trim_r>
  c079e8:	003f9a06 	br	c07854 <_free_r+0xb4>
  c079ec:	00800104 	movi	r2,4
  c079f0:	10c0072e 	bgeu	r2,r3,c07a10 <_free_r+0x270>
  c079f4:	00800504 	movi	r2,20
  c079f8:	10c01936 	bltu	r2,r3,c07a60 <_free_r+0x2c0>
  c079fc:	188016c4 	addi	r2,r3,91
  c07a00:	100690fa 	slli	r3,r2,3
  c07a04:	003fb306 	br	c078d4 <_free_r+0x134>
  c07a08:	01400044 	movi	r5,1
  c07a0c:	003f7e06 	br	c07808 <_free_r+0x68>
  c07a10:	3804d1ba 	srli	r2,r7,6
  c07a14:	10800e04 	addi	r2,r2,56
  c07a18:	100690fa 	slli	r3,r2,3
  c07a1c:	003fad06 	br	c078d4 <_free_r+0x134>
  c07a20:	22000315 	stw	r8,12(r4)
  c07a24:	22000215 	stw	r8,8(r4)
  c07a28:	3a05883a 	add	r2,r7,r8
  c07a2c:	38c00054 	ori	r3,r7,1
  c07a30:	11c00015 	stw	r7,0(r2)
  c07a34:	41000215 	stw	r4,8(r8)
  c07a38:	40c00115 	stw	r3,4(r8)
  c07a3c:	41000315 	stw	r4,12(r8)
  c07a40:	003f8406 	br	c07854 <_free_r+0xb4>
  c07a44:	1005d0ba 	srai	r2,r2,2
  c07a48:	00c00044 	movi	r3,1
  c07a4c:	51000117 	ldw	r4,4(r10)
  c07a50:	1886983a 	sll	r3,r3,r2
  c07a54:	20c8b03a 	or	r4,r4,r3
  c07a58:	51000115 	stw	r4,4(r10)
  c07a5c:	003fa706 	br	c078fc <_free_r+0x15c>
  c07a60:	00801504 	movi	r2,84
  c07a64:	10c00436 	bltu	r2,r3,c07a78 <_free_r+0x2d8>
  c07a68:	3804d33a 	srli	r2,r7,12
  c07a6c:	10801b84 	addi	r2,r2,110
  c07a70:	100690fa 	slli	r3,r2,3
  c07a74:	003f9706 	br	c078d4 <_free_r+0x134>
  c07a78:	00805504 	movi	r2,340
  c07a7c:	10c00436 	bltu	r2,r3,c07a90 <_free_r+0x2f0>
  c07a80:	3804d3fa 	srli	r2,r7,15
  c07a84:	10801dc4 	addi	r2,r2,119
  c07a88:	100690fa 	slli	r3,r2,3
  c07a8c:	003f9106 	br	c078d4 <_free_r+0x134>
  c07a90:	00815504 	movi	r2,1364
  c07a94:	10c0032e 	bgeu	r2,r3,c07aa4 <_free_r+0x304>
  c07a98:	00801f84 	movi	r2,126
  c07a9c:	00c0fc04 	movi	r3,1008
  c07aa0:	003f8c06 	br	c078d4 <_free_r+0x134>
  c07aa4:	3804d4ba 	srli	r2,r7,18
  c07aa8:	10801f04 	addi	r2,r2,124
  c07aac:	100690fa 	slli	r3,r2,3
  c07ab0:	003f8806 	br	c078d4 <_free_r+0x134>

00c07ab4 <__sfvwrite_r>:
  c07ab4:	30800217 	ldw	r2,8(r6)
  c07ab8:	defff504 	addi	sp,sp,-44
  c07abc:	df000915 	stw	fp,36(sp)
  c07ac0:	dd800715 	stw	r22,28(sp)
  c07ac4:	dc800315 	stw	r18,12(sp)
  c07ac8:	dfc00a15 	stw	ra,40(sp)
  c07acc:	ddc00815 	stw	r23,32(sp)
  c07ad0:	dd400615 	stw	r21,24(sp)
  c07ad4:	dd000515 	stw	r20,20(sp)
  c07ad8:	dcc00415 	stw	r19,16(sp)
  c07adc:	dc400215 	stw	r17,8(sp)
  c07ae0:	dc000115 	stw	r16,4(sp)
  c07ae4:	302d883a 	mov	r22,r6
  c07ae8:	2039883a 	mov	fp,r4
  c07aec:	2825883a 	mov	r18,r5
  c07af0:	10001c26 	beq	r2,zero,c07b64 <__sfvwrite_r+0xb0>
  c07af4:	29c0030b 	ldhu	r7,12(r5)
  c07af8:	3880020c 	andi	r2,r7,8
  c07afc:	10002726 	beq	r2,zero,c07b9c <__sfvwrite_r+0xe8>
  c07b00:	28800417 	ldw	r2,16(r5)
  c07b04:	10002526 	beq	r2,zero,c07b9c <__sfvwrite_r+0xe8>
  c07b08:	3880008c 	andi	r2,r7,2
  c07b0c:	b5400017 	ldw	r21,0(r22)
  c07b10:	10002826 	beq	r2,zero,c07bb4 <__sfvwrite_r+0x100>
  c07b14:	0021883a 	mov	r16,zero
  c07b18:	0023883a 	mov	r17,zero
  c07b1c:	880d883a 	mov	r6,r17
  c07b20:	e009883a 	mov	r4,fp
  c07b24:	00810004 	movi	r2,1024
  c07b28:	80006e26 	beq	r16,zero,c07ce4 <__sfvwrite_r+0x230>
  c07b2c:	800f883a 	mov	r7,r16
  c07b30:	91400717 	ldw	r5,28(r18)
  c07b34:	1400012e 	bgeu	r2,r16,c07b3c <__sfvwrite_r+0x88>
  c07b38:	100f883a 	mov	r7,r2
  c07b3c:	90c00917 	ldw	r3,36(r18)
  c07b40:	183ee83a 	callr	r3
  c07b44:	1007883a 	mov	r3,r2
  c07b48:	80a1c83a 	sub	r16,r16,r2
  c07b4c:	88a3883a 	add	r17,r17,r2
  c07b50:	00806d0e 	bge	zero,r2,c07d08 <__sfvwrite_r+0x254>
  c07b54:	b0800217 	ldw	r2,8(r22)
  c07b58:	10c5c83a 	sub	r2,r2,r3
  c07b5c:	b0800215 	stw	r2,8(r22)
  c07b60:	103fee1e 	bne	r2,zero,c07b1c <__sfvwrite_r+0x68>
  c07b64:	0009883a 	mov	r4,zero
  c07b68:	2005883a 	mov	r2,r4
  c07b6c:	dfc00a17 	ldw	ra,40(sp)
  c07b70:	df000917 	ldw	fp,36(sp)
  c07b74:	ddc00817 	ldw	r23,32(sp)
  c07b78:	dd800717 	ldw	r22,28(sp)
  c07b7c:	dd400617 	ldw	r21,24(sp)
  c07b80:	dd000517 	ldw	r20,20(sp)
  c07b84:	dcc00417 	ldw	r19,16(sp)
  c07b88:	dc800317 	ldw	r18,12(sp)
  c07b8c:	dc400217 	ldw	r17,8(sp)
  c07b90:	dc000117 	ldw	r16,4(sp)
  c07b94:	dec00b04 	addi	sp,sp,44
  c07b98:	f800283a 	ret
  c07b9c:	0c0587c0 	call	c0587c <__swsetup_r>
  c07ba0:	1000e41e 	bne	r2,zero,c07f34 <__sfvwrite_r+0x480>
  c07ba4:	91c0030b 	ldhu	r7,12(r18)
  c07ba8:	b5400017 	ldw	r21,0(r22)
  c07bac:	3880008c 	andi	r2,r7,2
  c07bb0:	103fd81e 	bne	r2,zero,c07b14 <__sfvwrite_r+0x60>
  c07bb4:	3880004c 	andi	r2,r7,1
  c07bb8:	1005003a 	cmpeq	r2,r2,zero
  c07bbc:	10005726 	beq	r2,zero,c07d1c <__sfvwrite_r+0x268>
  c07bc0:	0029883a 	mov	r20,zero
  c07bc4:	002f883a 	mov	r23,zero
  c07bc8:	a0004226 	beq	r20,zero,c07cd4 <__sfvwrite_r+0x220>
  c07bcc:	3880800c 	andi	r2,r7,512
  c07bd0:	94000217 	ldw	r16,8(r18)
  c07bd4:	10008b26 	beq	r2,zero,c07e04 <__sfvwrite_r+0x350>
  c07bd8:	800d883a 	mov	r6,r16
  c07bdc:	a400a536 	bltu	r20,r16,c07e74 <__sfvwrite_r+0x3c0>
  c07be0:	3881200c 	andi	r2,r7,1152
  c07be4:	10002726 	beq	r2,zero,c07c84 <__sfvwrite_r+0x1d0>
  c07be8:	90800517 	ldw	r2,20(r18)
  c07bec:	92000417 	ldw	r8,16(r18)
  c07bf0:	91400017 	ldw	r5,0(r18)
  c07bf4:	1087883a 	add	r3,r2,r2
  c07bf8:	1887883a 	add	r3,r3,r2
  c07bfc:	1808d7fa 	srli	r4,r3,31
  c07c00:	2a21c83a 	sub	r16,r5,r8
  c07c04:	80800044 	addi	r2,r16,1
  c07c08:	20c9883a 	add	r4,r4,r3
  c07c0c:	2027d07a 	srai	r19,r4,1
  c07c10:	a085883a 	add	r2,r20,r2
  c07c14:	980d883a 	mov	r6,r19
  c07c18:	9880022e 	bgeu	r19,r2,c07c24 <__sfvwrite_r+0x170>
  c07c1c:	1027883a 	mov	r19,r2
  c07c20:	100d883a 	mov	r6,r2
  c07c24:	3881000c 	andi	r2,r7,1024
  c07c28:	1000b826 	beq	r2,zero,c07f0c <__sfvwrite_r+0x458>
  c07c2c:	300b883a 	mov	r5,r6
  c07c30:	e009883a 	mov	r4,fp
  c07c34:	0c083280 	call	c08328 <_malloc_r>
  c07c38:	10003126 	beq	r2,zero,c07d00 <__sfvwrite_r+0x24c>
  c07c3c:	91400417 	ldw	r5,16(r18)
  c07c40:	1009883a 	mov	r4,r2
  c07c44:	800d883a 	mov	r6,r16
  c07c48:	1023883a 	mov	r17,r2
  c07c4c:	0c08b4c0 	call	c08b4c <memcpy>
  c07c50:	90c0030b 	ldhu	r3,12(r18)
  c07c54:	00beffc4 	movi	r2,-1025
  c07c58:	1886703a 	and	r3,r3,r2
  c07c5c:	18c02014 	ori	r3,r3,128
  c07c60:	90c0030d 	sth	r3,12(r18)
  c07c64:	9c07c83a 	sub	r3,r19,r16
  c07c68:	8c05883a 	add	r2,r17,r16
  c07c6c:	a00d883a 	mov	r6,r20
  c07c70:	a021883a 	mov	r16,r20
  c07c74:	90800015 	stw	r2,0(r18)
  c07c78:	90c00215 	stw	r3,8(r18)
  c07c7c:	94400415 	stw	r17,16(r18)
  c07c80:	94c00515 	stw	r19,20(r18)
  c07c84:	91000017 	ldw	r4,0(r18)
  c07c88:	b80b883a 	mov	r5,r23
  c07c8c:	a023883a 	mov	r17,r20
  c07c90:	0c08bec0 	call	c08bec <memmove>
  c07c94:	90c00217 	ldw	r3,8(r18)
  c07c98:	90800017 	ldw	r2,0(r18)
  c07c9c:	a027883a 	mov	r19,r20
  c07ca0:	1c07c83a 	sub	r3,r3,r16
  c07ca4:	1405883a 	add	r2,r2,r16
  c07ca8:	90c00215 	stw	r3,8(r18)
  c07cac:	a021883a 	mov	r16,r20
  c07cb0:	90800015 	stw	r2,0(r18)
  c07cb4:	b0800217 	ldw	r2,8(r22)
  c07cb8:	1405c83a 	sub	r2,r2,r16
  c07cbc:	b0800215 	stw	r2,8(r22)
  c07cc0:	103fa826 	beq	r2,zero,c07b64 <__sfvwrite_r+0xb0>
  c07cc4:	a469c83a 	sub	r20,r20,r17
  c07cc8:	91c0030b 	ldhu	r7,12(r18)
  c07ccc:	bcef883a 	add	r23,r23,r19
  c07cd0:	a03fbe1e 	bne	r20,zero,c07bcc <__sfvwrite_r+0x118>
  c07cd4:	adc00017 	ldw	r23,0(r21)
  c07cd8:	ad000117 	ldw	r20,4(r21)
  c07cdc:	ad400204 	addi	r21,r21,8
  c07ce0:	003fb906 	br	c07bc8 <__sfvwrite_r+0x114>
  c07ce4:	ac400017 	ldw	r17,0(r21)
  c07ce8:	ac000117 	ldw	r16,4(r21)
  c07cec:	ad400204 	addi	r21,r21,8
  c07cf0:	003f8a06 	br	c07b1c <__sfvwrite_r+0x68>
  c07cf4:	91400417 	ldw	r5,16(r18)
  c07cf8:	e009883a 	mov	r4,fp
  c07cfc:	0c077a00 	call	c077a0 <_free_r>
  c07d00:	00800304 	movi	r2,12
  c07d04:	e0800015 	stw	r2,0(fp)
  c07d08:	9080030b 	ldhu	r2,12(r18)
  c07d0c:	013fffc4 	movi	r4,-1
  c07d10:	10801014 	ori	r2,r2,64
  c07d14:	9080030d 	sth	r2,12(r18)
  c07d18:	003f9306 	br	c07b68 <__sfvwrite_r+0xb4>
  c07d1c:	0027883a 	mov	r19,zero
  c07d20:	002f883a 	mov	r23,zero
  c07d24:	d8000015 	stw	zero,0(sp)
  c07d28:	0029883a 	mov	r20,zero
  c07d2c:	98001e26 	beq	r19,zero,c07da8 <__sfvwrite_r+0x2f4>
  c07d30:	d8c00017 	ldw	r3,0(sp)
  c07d34:	1804c03a 	cmpne	r2,r3,zero
  c07d38:	10005e26 	beq	r2,zero,c07eb4 <__sfvwrite_r+0x400>
  c07d3c:	9821883a 	mov	r16,r19
  c07d40:	a4c0012e 	bgeu	r20,r19,c07d48 <__sfvwrite_r+0x294>
  c07d44:	a021883a 	mov	r16,r20
  c07d48:	91000017 	ldw	r4,0(r18)
  c07d4c:	90800417 	ldw	r2,16(r18)
  c07d50:	91800217 	ldw	r6,8(r18)
  c07d54:	91c00517 	ldw	r7,20(r18)
  c07d58:	1100022e 	bgeu	r2,r4,c07d64 <__sfvwrite_r+0x2b0>
  c07d5c:	31e3883a 	add	r17,r6,r7
  c07d60:	8c001616 	blt	r17,r16,c07dbc <__sfvwrite_r+0x308>
  c07d64:	81c03816 	blt	r16,r7,c07e48 <__sfvwrite_r+0x394>
  c07d68:	90c00917 	ldw	r3,36(r18)
  c07d6c:	91400717 	ldw	r5,28(r18)
  c07d70:	e009883a 	mov	r4,fp
  c07d74:	b80d883a 	mov	r6,r23
  c07d78:	183ee83a 	callr	r3
  c07d7c:	1023883a 	mov	r17,r2
  c07d80:	00bfe10e 	bge	zero,r2,c07d08 <__sfvwrite_r+0x254>
  c07d84:	a469c83a 	sub	r20,r20,r17
  c07d88:	a0001826 	beq	r20,zero,c07dec <__sfvwrite_r+0x338>
  c07d8c:	b0800217 	ldw	r2,8(r22)
  c07d90:	1445c83a 	sub	r2,r2,r17
  c07d94:	b0800215 	stw	r2,8(r22)
  c07d98:	103f7226 	beq	r2,zero,c07b64 <__sfvwrite_r+0xb0>
  c07d9c:	9c67c83a 	sub	r19,r19,r17
  c07da0:	bc6f883a 	add	r23,r23,r17
  c07da4:	983fe21e 	bne	r19,zero,c07d30 <__sfvwrite_r+0x27c>
  c07da8:	adc00017 	ldw	r23,0(r21)
  c07dac:	acc00117 	ldw	r19,4(r21)
  c07db0:	ad400204 	addi	r21,r21,8
  c07db4:	d8000015 	stw	zero,0(sp)
  c07db8:	003fdc06 	br	c07d2c <__sfvwrite_r+0x278>
  c07dbc:	b80b883a 	mov	r5,r23
  c07dc0:	880d883a 	mov	r6,r17
  c07dc4:	0c08bec0 	call	c08bec <memmove>
  c07dc8:	90c00017 	ldw	r3,0(r18)
  c07dcc:	e009883a 	mov	r4,fp
  c07dd0:	900b883a 	mov	r5,r18
  c07dd4:	1c47883a 	add	r3,r3,r17
  c07dd8:	90c00015 	stw	r3,0(r18)
  c07ddc:	0c071840 	call	c07184 <_fflush_r>
  c07de0:	103fc91e 	bne	r2,zero,c07d08 <__sfvwrite_r+0x254>
  c07de4:	a469c83a 	sub	r20,r20,r17
  c07de8:	a03fe81e 	bne	r20,zero,c07d8c <__sfvwrite_r+0x2d8>
  c07dec:	e009883a 	mov	r4,fp
  c07df0:	900b883a 	mov	r5,r18
  c07df4:	0c071840 	call	c07184 <_fflush_r>
  c07df8:	103fc31e 	bne	r2,zero,c07d08 <__sfvwrite_r+0x254>
  c07dfc:	d8000015 	stw	zero,0(sp)
  c07e00:	003fe206 	br	c07d8c <__sfvwrite_r+0x2d8>
  c07e04:	91000017 	ldw	r4,0(r18)
  c07e08:	90800417 	ldw	r2,16(r18)
  c07e0c:	1100022e 	bgeu	r2,r4,c07e18 <__sfvwrite_r+0x364>
  c07e10:	8023883a 	mov	r17,r16
  c07e14:	85003136 	bltu	r16,r20,c07edc <__sfvwrite_r+0x428>
  c07e18:	91c00517 	ldw	r7,20(r18)
  c07e1c:	a1c01836 	bltu	r20,r7,c07e80 <__sfvwrite_r+0x3cc>
  c07e20:	90c00917 	ldw	r3,36(r18)
  c07e24:	91400717 	ldw	r5,28(r18)
  c07e28:	e009883a 	mov	r4,fp
  c07e2c:	b80d883a 	mov	r6,r23
  c07e30:	183ee83a 	callr	r3
  c07e34:	1021883a 	mov	r16,r2
  c07e38:	00bfb30e 	bge	zero,r2,c07d08 <__sfvwrite_r+0x254>
  c07e3c:	1023883a 	mov	r17,r2
  c07e40:	1027883a 	mov	r19,r2
  c07e44:	003f9b06 	br	c07cb4 <__sfvwrite_r+0x200>
  c07e48:	b80b883a 	mov	r5,r23
  c07e4c:	800d883a 	mov	r6,r16
  c07e50:	0c08bec0 	call	c08bec <memmove>
  c07e54:	90c00217 	ldw	r3,8(r18)
  c07e58:	90800017 	ldw	r2,0(r18)
  c07e5c:	8023883a 	mov	r17,r16
  c07e60:	1c07c83a 	sub	r3,r3,r16
  c07e64:	1405883a 	add	r2,r2,r16
  c07e68:	90c00215 	stw	r3,8(r18)
  c07e6c:	90800015 	stw	r2,0(r18)
  c07e70:	003fc406 	br	c07d84 <__sfvwrite_r+0x2d0>
  c07e74:	a00d883a 	mov	r6,r20
  c07e78:	a021883a 	mov	r16,r20
  c07e7c:	003f8106 	br	c07c84 <__sfvwrite_r+0x1d0>
  c07e80:	b80b883a 	mov	r5,r23
  c07e84:	a00d883a 	mov	r6,r20
  c07e88:	0c08bec0 	call	c08bec <memmove>
  c07e8c:	90c00217 	ldw	r3,8(r18)
  c07e90:	90800017 	ldw	r2,0(r18)
  c07e94:	a021883a 	mov	r16,r20
  c07e98:	1d07c83a 	sub	r3,r3,r20
  c07e9c:	1505883a 	add	r2,r2,r20
  c07ea0:	a023883a 	mov	r17,r20
  c07ea4:	a027883a 	mov	r19,r20
  c07ea8:	90c00215 	stw	r3,8(r18)
  c07eac:	90800015 	stw	r2,0(r18)
  c07eb0:	003f8006 	br	c07cb4 <__sfvwrite_r+0x200>
  c07eb4:	b809883a 	mov	r4,r23
  c07eb8:	01400284 	movi	r5,10
  c07ebc:	980d883a 	mov	r6,r19
  c07ec0:	0c08a680 	call	c08a68 <memchr>
  c07ec4:	10001726 	beq	r2,zero,c07f24 <__sfvwrite_r+0x470>
  c07ec8:	15c5c83a 	sub	r2,r2,r23
  c07ecc:	15000044 	addi	r20,r2,1
  c07ed0:	00800044 	movi	r2,1
  c07ed4:	d8800015 	stw	r2,0(sp)
  c07ed8:	003f9806 	br	c07d3c <__sfvwrite_r+0x288>
  c07edc:	b80b883a 	mov	r5,r23
  c07ee0:	800d883a 	mov	r6,r16
  c07ee4:	0c08bec0 	call	c08bec <memmove>
  c07ee8:	90c00017 	ldw	r3,0(r18)
  c07eec:	e009883a 	mov	r4,fp
  c07ef0:	900b883a 	mov	r5,r18
  c07ef4:	1c07883a 	add	r3,r3,r16
  c07ef8:	90c00015 	stw	r3,0(r18)
  c07efc:	8027883a 	mov	r19,r16
  c07f00:	0c071840 	call	c07184 <_fflush_r>
  c07f04:	103f6b26 	beq	r2,zero,c07cb4 <__sfvwrite_r+0x200>
  c07f08:	003f7f06 	br	c07d08 <__sfvwrite_r+0x254>
  c07f0c:	400b883a 	mov	r5,r8
  c07f10:	e009883a 	mov	r4,fp
  c07f14:	0c09d580 	call	c09d58 <_realloc_r>
  c07f18:	103f7626 	beq	r2,zero,c07cf4 <__sfvwrite_r+0x240>
  c07f1c:	1023883a 	mov	r17,r2
  c07f20:	003f5006 	br	c07c64 <__sfvwrite_r+0x1b0>
  c07f24:	00c00044 	movi	r3,1
  c07f28:	9d000044 	addi	r20,r19,1
  c07f2c:	d8c00015 	stw	r3,0(sp)
  c07f30:	003f8206 	br	c07d3c <__sfvwrite_r+0x288>
  c07f34:	9080030b 	ldhu	r2,12(r18)
  c07f38:	00c00244 	movi	r3,9
  c07f3c:	013fffc4 	movi	r4,-1
  c07f40:	10801014 	ori	r2,r2,64
  c07f44:	9080030d 	sth	r2,12(r18)
  c07f48:	e0c00015 	stw	r3,0(fp)
  c07f4c:	003f0606 	br	c07b68 <__sfvwrite_r+0xb4>

00c07f50 <_fwalk_reent>:
  c07f50:	defff704 	addi	sp,sp,-36
  c07f54:	dcc00315 	stw	r19,12(sp)
  c07f58:	24c0b804 	addi	r19,r4,736
  c07f5c:	dd800615 	stw	r22,24(sp)
  c07f60:	dd400515 	stw	r21,20(sp)
  c07f64:	dfc00815 	stw	ra,32(sp)
  c07f68:	ddc00715 	stw	r23,28(sp)
  c07f6c:	dd000415 	stw	r20,16(sp)
  c07f70:	dc800215 	stw	r18,8(sp)
  c07f74:	dc400115 	stw	r17,4(sp)
  c07f78:	dc000015 	stw	r16,0(sp)
  c07f7c:	202b883a 	mov	r21,r4
  c07f80:	282d883a 	mov	r22,r5
  c07f84:	0c0740c0 	call	c0740c <__sfp_lock_acquire>
  c07f88:	98002126 	beq	r19,zero,c08010 <_fwalk_reent+0xc0>
  c07f8c:	002f883a 	mov	r23,zero
  c07f90:	9c800117 	ldw	r18,4(r19)
  c07f94:	9c000217 	ldw	r16,8(r19)
  c07f98:	90bfffc4 	addi	r2,r18,-1
  c07f9c:	10000d16 	blt	r2,zero,c07fd4 <_fwalk_reent+0x84>
  c07fa0:	0023883a 	mov	r17,zero
  c07fa4:	053fffc4 	movi	r20,-1
  c07fa8:	8080030f 	ldh	r2,12(r16)
  c07fac:	8c400044 	addi	r17,r17,1
  c07fb0:	10000626 	beq	r2,zero,c07fcc <_fwalk_reent+0x7c>
  c07fb4:	8080038f 	ldh	r2,14(r16)
  c07fb8:	800b883a 	mov	r5,r16
  c07fbc:	a809883a 	mov	r4,r21
  c07fc0:	15000226 	beq	r2,r20,c07fcc <_fwalk_reent+0x7c>
  c07fc4:	b03ee83a 	callr	r22
  c07fc8:	b8aeb03a 	or	r23,r23,r2
  c07fcc:	84001704 	addi	r16,r16,92
  c07fd0:	947ff51e 	bne	r18,r17,c07fa8 <_fwalk_reent+0x58>
  c07fd4:	9cc00017 	ldw	r19,0(r19)
  c07fd8:	983fed1e 	bne	r19,zero,c07f90 <_fwalk_reent+0x40>
  c07fdc:	0c074100 	call	c07410 <__sfp_lock_release>
  c07fe0:	b805883a 	mov	r2,r23
  c07fe4:	dfc00817 	ldw	ra,32(sp)
  c07fe8:	ddc00717 	ldw	r23,28(sp)
  c07fec:	dd800617 	ldw	r22,24(sp)
  c07ff0:	dd400517 	ldw	r21,20(sp)
  c07ff4:	dd000417 	ldw	r20,16(sp)
  c07ff8:	dcc00317 	ldw	r19,12(sp)
  c07ffc:	dc800217 	ldw	r18,8(sp)
  c08000:	dc400117 	ldw	r17,4(sp)
  c08004:	dc000017 	ldw	r16,0(sp)
  c08008:	dec00904 	addi	sp,sp,36
  c0800c:	f800283a 	ret
  c08010:	002f883a 	mov	r23,zero
  c08014:	003ff106 	br	c07fdc <_fwalk_reent+0x8c>

00c08018 <_fwalk>:
  c08018:	defff804 	addi	sp,sp,-32
  c0801c:	dcc00315 	stw	r19,12(sp)
  c08020:	24c0b804 	addi	r19,r4,736
  c08024:	dd400515 	stw	r21,20(sp)
  c08028:	dfc00715 	stw	ra,28(sp)
  c0802c:	dd800615 	stw	r22,24(sp)
  c08030:	dd000415 	stw	r20,16(sp)
  c08034:	dc800215 	stw	r18,8(sp)
  c08038:	dc400115 	stw	r17,4(sp)
  c0803c:	dc000015 	stw	r16,0(sp)
  c08040:	282b883a 	mov	r21,r5
  c08044:	0c0740c0 	call	c0740c <__sfp_lock_acquire>
  c08048:	98001f26 	beq	r19,zero,c080c8 <_fwalk+0xb0>
  c0804c:	002d883a 	mov	r22,zero
  c08050:	9c800117 	ldw	r18,4(r19)
  c08054:	9c000217 	ldw	r16,8(r19)
  c08058:	90bfffc4 	addi	r2,r18,-1
  c0805c:	10000c16 	blt	r2,zero,c08090 <_fwalk+0x78>
  c08060:	0023883a 	mov	r17,zero
  c08064:	053fffc4 	movi	r20,-1
  c08068:	8080030f 	ldh	r2,12(r16)
  c0806c:	8c400044 	addi	r17,r17,1
  c08070:	10000526 	beq	r2,zero,c08088 <_fwalk+0x70>
  c08074:	8080038f 	ldh	r2,14(r16)
  c08078:	8009883a 	mov	r4,r16
  c0807c:	15000226 	beq	r2,r20,c08088 <_fwalk+0x70>
  c08080:	a83ee83a 	callr	r21
  c08084:	b0acb03a 	or	r22,r22,r2
  c08088:	84001704 	addi	r16,r16,92
  c0808c:	947ff61e 	bne	r18,r17,c08068 <_fwalk+0x50>
  c08090:	9cc00017 	ldw	r19,0(r19)
  c08094:	983fee1e 	bne	r19,zero,c08050 <_fwalk+0x38>
  c08098:	0c074100 	call	c07410 <__sfp_lock_release>
  c0809c:	b005883a 	mov	r2,r22
  c080a0:	dfc00717 	ldw	ra,28(sp)
  c080a4:	dd800617 	ldw	r22,24(sp)
  c080a8:	dd400517 	ldw	r21,20(sp)
  c080ac:	dd000417 	ldw	r20,16(sp)
  c080b0:	dcc00317 	ldw	r19,12(sp)
  c080b4:	dc800217 	ldw	r18,8(sp)
  c080b8:	dc400117 	ldw	r17,4(sp)
  c080bc:	dc000017 	ldw	r16,0(sp)
  c080c0:	dec00804 	addi	sp,sp,32
  c080c4:	f800283a 	ret
  c080c8:	002d883a 	mov	r22,zero
  c080cc:	003ff206 	br	c08098 <_fwalk+0x80>

00c080d0 <__locale_charset>:
  c080d0:	d0a01017 	ldw	r2,-32704(gp)
  c080d4:	f800283a 	ret

00c080d8 <_localeconv_r>:
  c080d8:	00803074 	movhi	r2,193
  c080dc:	10821f04 	addi	r2,r2,2172
  c080e0:	f800283a 	ret

00c080e4 <localeconv>:
  c080e4:	00803074 	movhi	r2,193
  c080e8:	1089a904 	addi	r2,r2,9892
  c080ec:	11000017 	ldw	r4,0(r2)
  c080f0:	0c080d81 	jmpi	c080d8 <_localeconv_r>

00c080f4 <_setlocale_r>:
  c080f4:	defffc04 	addi	sp,sp,-16
  c080f8:	00c03074 	movhi	r3,193
  c080fc:	18c1f804 	addi	r3,r3,2016
  c08100:	dc800215 	stw	r18,8(sp)
  c08104:	dc400115 	stw	r17,4(sp)
  c08108:	dc000015 	stw	r16,0(sp)
  c0810c:	2023883a 	mov	r17,r4
  c08110:	2825883a 	mov	r18,r5
  c08114:	dfc00315 	stw	ra,12(sp)
  c08118:	3021883a 	mov	r16,r6
  c0811c:	3009883a 	mov	r4,r6
  c08120:	180b883a 	mov	r5,r3
  c08124:	30000926 	beq	r6,zero,c0814c <_setlocale_r+0x58>
  c08128:	0c0a5780 	call	c0a578 <strcmp>
  c0812c:	8009883a 	mov	r4,r16
  c08130:	01403074 	movhi	r5,193
  c08134:	2941a404 	addi	r5,r5,1680
  c08138:	10000b1e 	bne	r2,zero,c08168 <_setlocale_r+0x74>
  c0813c:	8c000d15 	stw	r16,52(r17)
  c08140:	8c800c15 	stw	r18,48(r17)
  c08144:	00c03074 	movhi	r3,193
  c08148:	18c1f804 	addi	r3,r3,2016
  c0814c:	1805883a 	mov	r2,r3
  c08150:	dfc00317 	ldw	ra,12(sp)
  c08154:	dc800217 	ldw	r18,8(sp)
  c08158:	dc400117 	ldw	r17,4(sp)
  c0815c:	dc000017 	ldw	r16,0(sp)
  c08160:	dec00404 	addi	sp,sp,16
  c08164:	f800283a 	ret
  c08168:	0c0a5780 	call	c0a578 <strcmp>
  c0816c:	0007883a 	mov	r3,zero
  c08170:	103ff226 	beq	r2,zero,c0813c <_setlocale_r+0x48>
  c08174:	003ff506 	br	c0814c <_setlocale_r+0x58>

00c08178 <setlocale>:
  c08178:	01803074 	movhi	r6,193
  c0817c:	3189a904 	addi	r6,r6,9892
  c08180:	2007883a 	mov	r3,r4
  c08184:	31000017 	ldw	r4,0(r6)
  c08188:	280d883a 	mov	r6,r5
  c0818c:	180b883a 	mov	r5,r3
  c08190:	0c080f41 	jmpi	c080f4 <_setlocale_r>

00c08194 <__smakebuf_r>:
  c08194:	2880030b 	ldhu	r2,12(r5)
  c08198:	deffed04 	addi	sp,sp,-76
  c0819c:	dc401015 	stw	r17,64(sp)
  c081a0:	1080008c 	andi	r2,r2,2
  c081a4:	dc000f15 	stw	r16,60(sp)
  c081a8:	dfc01215 	stw	ra,72(sp)
  c081ac:	dc801115 	stw	r18,68(sp)
  c081b0:	2821883a 	mov	r16,r5
  c081b4:	2023883a 	mov	r17,r4
  c081b8:	10000b26 	beq	r2,zero,c081e8 <__smakebuf_r+0x54>
  c081bc:	28c010c4 	addi	r3,r5,67
  c081c0:	00800044 	movi	r2,1
  c081c4:	28800515 	stw	r2,20(r5)
  c081c8:	28c00415 	stw	r3,16(r5)
  c081cc:	28c00015 	stw	r3,0(r5)
  c081d0:	dfc01217 	ldw	ra,72(sp)
  c081d4:	dc801117 	ldw	r18,68(sp)
  c081d8:	dc401017 	ldw	r17,64(sp)
  c081dc:	dc000f17 	ldw	r16,60(sp)
  c081e0:	dec01304 	addi	sp,sp,76
  c081e4:	f800283a 	ret
  c081e8:	2940038f 	ldh	r5,14(r5)
  c081ec:	28002116 	blt	r5,zero,c08274 <__smakebuf_r+0xe0>
  c081f0:	d80d883a 	mov	r6,sp
  c081f4:	0c0a8f40 	call	c0a8f4 <_fstat_r>
  c081f8:	10001e16 	blt	r2,zero,c08274 <__smakebuf_r+0xe0>
  c081fc:	d8800117 	ldw	r2,4(sp)
  c08200:	00e00014 	movui	r3,32768
  c08204:	113c000c 	andi	r4,r2,61440
  c08208:	20c03126 	beq	r4,r3,c082d0 <__smakebuf_r+0x13c>
  c0820c:	8080030b 	ldhu	r2,12(r16)
  c08210:	00c80004 	movi	r3,8192
  c08214:	10820014 	ori	r2,r2,2048
  c08218:	8080030d 	sth	r2,12(r16)
  c0821c:	20c01e26 	beq	r4,r3,c08298 <__smakebuf_r+0x104>
  c08220:	04810004 	movi	r18,1024
  c08224:	8809883a 	mov	r4,r17
  c08228:	900b883a 	mov	r5,r18
  c0822c:	0c083280 	call	c08328 <_malloc_r>
  c08230:	1009883a 	mov	r4,r2
  c08234:	10003126 	beq	r2,zero,c082fc <__smakebuf_r+0x168>
  c08238:	80c0030b 	ldhu	r3,12(r16)
  c0823c:	00803034 	movhi	r2,192
  c08240:	109d4004 	addi	r2,r2,29952
  c08244:	88800f15 	stw	r2,60(r17)
  c08248:	18c02014 	ori	r3,r3,128
  c0824c:	84800515 	stw	r18,20(r16)
  c08250:	80c0030d 	sth	r3,12(r16)
  c08254:	81000415 	stw	r4,16(r16)
  c08258:	81000015 	stw	r4,0(r16)
  c0825c:	dfc01217 	ldw	ra,72(sp)
  c08260:	dc801117 	ldw	r18,68(sp)
  c08264:	dc401017 	ldw	r17,64(sp)
  c08268:	dc000f17 	ldw	r16,60(sp)
  c0826c:	dec01304 	addi	sp,sp,76
  c08270:	f800283a 	ret
  c08274:	80c0030b 	ldhu	r3,12(r16)
  c08278:	1880200c 	andi	r2,r3,128
  c0827c:	10000426 	beq	r2,zero,c08290 <__smakebuf_r+0xfc>
  c08280:	04801004 	movi	r18,64
  c08284:	18820014 	ori	r2,r3,2048
  c08288:	8080030d 	sth	r2,12(r16)
  c0828c:	003fe506 	br	c08224 <__smakebuf_r+0x90>
  c08290:	04810004 	movi	r18,1024
  c08294:	003ffb06 	br	c08284 <__smakebuf_r+0xf0>
  c08298:	8140038f 	ldh	r5,14(r16)
  c0829c:	8809883a 	mov	r4,r17
  c082a0:	0c0a9680 	call	c0a968 <_isatty_r>
  c082a4:	103fde26 	beq	r2,zero,c08220 <__smakebuf_r+0x8c>
  c082a8:	8080030b 	ldhu	r2,12(r16)
  c082ac:	80c010c4 	addi	r3,r16,67
  c082b0:	04810004 	movi	r18,1024
  c082b4:	10800054 	ori	r2,r2,1
  c082b8:	8080030d 	sth	r2,12(r16)
  c082bc:	00800044 	movi	r2,1
  c082c0:	80c00415 	stw	r3,16(r16)
  c082c4:	80800515 	stw	r2,20(r16)
  c082c8:	80c00015 	stw	r3,0(r16)
  c082cc:	003fd506 	br	c08224 <__smakebuf_r+0x90>
  c082d0:	80c00a17 	ldw	r3,40(r16)
  c082d4:	00803074 	movhi	r2,193
  c082d8:	10a90d04 	addi	r2,r2,-23500
  c082dc:	18bfcb1e 	bne	r3,r2,c0820c <__smakebuf_r+0x78>
  c082e0:	8080030b 	ldhu	r2,12(r16)
  c082e4:	00c10004 	movi	r3,1024
  c082e8:	1825883a 	mov	r18,r3
  c082ec:	10c4b03a 	or	r2,r2,r3
  c082f0:	8080030d 	sth	r2,12(r16)
  c082f4:	80c01315 	stw	r3,76(r16)
  c082f8:	003fca06 	br	c08224 <__smakebuf_r+0x90>
  c082fc:	8100030b 	ldhu	r4,12(r16)
  c08300:	2080800c 	andi	r2,r4,512
  c08304:	103fb21e 	bne	r2,zero,c081d0 <__smakebuf_r+0x3c>
  c08308:	80c010c4 	addi	r3,r16,67
  c0830c:	21000094 	ori	r4,r4,2
  c08310:	00800044 	movi	r2,1
  c08314:	80800515 	stw	r2,20(r16)
  c08318:	8100030d 	sth	r4,12(r16)
  c0831c:	80c00415 	stw	r3,16(r16)
  c08320:	80c00015 	stw	r3,0(r16)
  c08324:	003faa06 	br	c081d0 <__smakebuf_r+0x3c>

00c08328 <_malloc_r>:
  c08328:	defff604 	addi	sp,sp,-40
  c0832c:	28c002c4 	addi	r3,r5,11
  c08330:	00800584 	movi	r2,22
  c08334:	dc800215 	stw	r18,8(sp)
  c08338:	dfc00915 	stw	ra,36(sp)
  c0833c:	df000815 	stw	fp,32(sp)
  c08340:	ddc00715 	stw	r23,28(sp)
  c08344:	dd800615 	stw	r22,24(sp)
  c08348:	dd400515 	stw	r21,20(sp)
  c0834c:	dd000415 	stw	r20,16(sp)
  c08350:	dcc00315 	stw	r19,12(sp)
  c08354:	dc400115 	stw	r17,4(sp)
  c08358:	dc000015 	stw	r16,0(sp)
  c0835c:	2025883a 	mov	r18,r4
  c08360:	10c01236 	bltu	r2,r3,c083ac <_malloc_r+0x84>
  c08364:	04400404 	movi	r17,16
  c08368:	8940142e 	bgeu	r17,r5,c083bc <_malloc_r+0x94>
  c0836c:	00800304 	movi	r2,12
  c08370:	0007883a 	mov	r3,zero
  c08374:	90800015 	stw	r2,0(r18)
  c08378:	1805883a 	mov	r2,r3
  c0837c:	dfc00917 	ldw	ra,36(sp)
  c08380:	df000817 	ldw	fp,32(sp)
  c08384:	ddc00717 	ldw	r23,28(sp)
  c08388:	dd800617 	ldw	r22,24(sp)
  c0838c:	dd400517 	ldw	r21,20(sp)
  c08390:	dd000417 	ldw	r20,16(sp)
  c08394:	dcc00317 	ldw	r19,12(sp)
  c08398:	dc800217 	ldw	r18,8(sp)
  c0839c:	dc400117 	ldw	r17,4(sp)
  c083a0:	dc000017 	ldw	r16,0(sp)
  c083a4:	dec00a04 	addi	sp,sp,40
  c083a8:	f800283a 	ret
  c083ac:	00bffe04 	movi	r2,-8
  c083b0:	18a2703a 	and	r17,r3,r2
  c083b4:	883fed16 	blt	r17,zero,c0836c <_malloc_r+0x44>
  c083b8:	897fec36 	bltu	r17,r5,c0836c <_malloc_r+0x44>
  c083bc:	9009883a 	mov	r4,r18
  c083c0:	0c0c7500 	call	c0c750 <__malloc_lock>
  c083c4:	00807dc4 	movi	r2,503
  c083c8:	14402b2e 	bgeu	r2,r17,c08478 <_malloc_r+0x150>
  c083cc:	8806d27a 	srli	r3,r17,9
  c083d0:	18003f1e 	bne	r3,zero,c084d0 <_malloc_r+0x1a8>
  c083d4:	880cd0fa 	srli	r6,r17,3
  c083d8:	300490fa 	slli	r2,r6,3
  c083dc:	02c03074 	movhi	r11,193
  c083e0:	5ac3c704 	addi	r11,r11,3868
  c083e4:	12cb883a 	add	r5,r2,r11
  c083e8:	2c000317 	ldw	r16,12(r5)
  c083ec:	580f883a 	mov	r7,r11
  c083f0:	2c00041e 	bne	r5,r16,c08404 <_malloc_r+0xdc>
  c083f4:	00000a06 	br	c08420 <_malloc_r+0xf8>
  c083f8:	1800860e 	bge	r3,zero,c08614 <_malloc_r+0x2ec>
  c083fc:	84000317 	ldw	r16,12(r16)
  c08400:	2c000726 	beq	r5,r16,c08420 <_malloc_r+0xf8>
  c08404:	80800117 	ldw	r2,4(r16)
  c08408:	00ffff04 	movi	r3,-4
  c0840c:	10c8703a 	and	r4,r2,r3
  c08410:	2447c83a 	sub	r3,r4,r17
  c08414:	008003c4 	movi	r2,15
  c08418:	10fff70e 	bge	r2,r3,c083f8 <_malloc_r+0xd0>
  c0841c:	31bfffc4 	addi	r6,r6,-1
  c08420:	32400044 	addi	r9,r6,1
  c08424:	02803074 	movhi	r10,193
  c08428:	5283c904 	addi	r10,r10,3876
  c0842c:	54000217 	ldw	r16,8(r10)
  c08430:	8280a026 	beq	r16,r10,c086b4 <_malloc_r+0x38c>
  c08434:	80800117 	ldw	r2,4(r16)
  c08438:	00ffff04 	movi	r3,-4
  c0843c:	10ca703a 	and	r5,r2,r3
  c08440:	2c4dc83a 	sub	r6,r5,r17
  c08444:	008003c4 	movi	r2,15
  c08448:	11808316 	blt	r2,r6,c08658 <_malloc_r+0x330>
  c0844c:	52800315 	stw	r10,12(r10)
  c08450:	52800215 	stw	r10,8(r10)
  c08454:	30002916 	blt	r6,zero,c084fc <_malloc_r+0x1d4>
  c08458:	8147883a 	add	r3,r16,r5
  c0845c:	18800117 	ldw	r2,4(r3)
  c08460:	9009883a 	mov	r4,r18
  c08464:	10800054 	ori	r2,r2,1
  c08468:	18800115 	stw	r2,4(r3)
  c0846c:	0c0c7700 	call	c0c770 <__malloc_unlock>
  c08470:	80c00204 	addi	r3,r16,8
  c08474:	003fc006 	br	c08378 <_malloc_r+0x50>
  c08478:	02c03074 	movhi	r11,193
  c0847c:	5ac3c704 	addi	r11,r11,3868
  c08480:	8ac5883a 	add	r2,r17,r11
  c08484:	14000317 	ldw	r16,12(r2)
  c08488:	580f883a 	mov	r7,r11
  c0848c:	8806d0fa 	srli	r3,r17,3
  c08490:	14006c26 	beq	r2,r16,c08644 <_malloc_r+0x31c>
  c08494:	80c00117 	ldw	r3,4(r16)
  c08498:	00bfff04 	movi	r2,-4
  c0849c:	81800317 	ldw	r6,12(r16)
  c084a0:	1886703a 	and	r3,r3,r2
  c084a4:	80c7883a 	add	r3,r16,r3
  c084a8:	18800117 	ldw	r2,4(r3)
  c084ac:	81400217 	ldw	r5,8(r16)
  c084b0:	9009883a 	mov	r4,r18
  c084b4:	10800054 	ori	r2,r2,1
  c084b8:	18800115 	stw	r2,4(r3)
  c084bc:	31400215 	stw	r5,8(r6)
  c084c0:	29800315 	stw	r6,12(r5)
  c084c4:	0c0c7700 	call	c0c770 <__malloc_unlock>
  c084c8:	80c00204 	addi	r3,r16,8
  c084cc:	003faa06 	br	c08378 <_malloc_r+0x50>
  c084d0:	00800104 	movi	r2,4
  c084d4:	10c0052e 	bgeu	r2,r3,c084ec <_malloc_r+0x1c4>
  c084d8:	00800504 	movi	r2,20
  c084dc:	10c07836 	bltu	r2,r3,c086c0 <_malloc_r+0x398>
  c084e0:	198016c4 	addi	r6,r3,91
  c084e4:	300490fa 	slli	r2,r6,3
  c084e8:	003fbc06 	br	c083dc <_malloc_r+0xb4>
  c084ec:	8804d1ba 	srli	r2,r17,6
  c084f0:	11800e04 	addi	r6,r2,56
  c084f4:	300490fa 	slli	r2,r6,3
  c084f8:	003fb806 	br	c083dc <_malloc_r+0xb4>
  c084fc:	00807fc4 	movi	r2,511
  c08500:	1140bb36 	bltu	r2,r5,c087f0 <_malloc_r+0x4c8>
  c08504:	2806d0fa 	srli	r3,r5,3
  c08508:	573ffe04 	addi	fp,r10,-8
  c0850c:	00800044 	movi	r2,1
  c08510:	180890fa 	slli	r4,r3,3
  c08514:	1807d0ba 	srai	r3,r3,2
  c08518:	e1c00117 	ldw	r7,4(fp)
  c0851c:	5909883a 	add	r4,r11,r4
  c08520:	21400217 	ldw	r5,8(r4)
  c08524:	10c4983a 	sll	r2,r2,r3
  c08528:	81000315 	stw	r4,12(r16)
  c0852c:	81400215 	stw	r5,8(r16)
  c08530:	388eb03a 	or	r7,r7,r2
  c08534:	2c000315 	stw	r16,12(r5)
  c08538:	24000215 	stw	r16,8(r4)
  c0853c:	e1c00115 	stw	r7,4(fp)
  c08540:	4807883a 	mov	r3,r9
  c08544:	4800cd16 	blt	r9,zero,c0887c <_malloc_r+0x554>
  c08548:	1807d0ba 	srai	r3,r3,2
  c0854c:	00800044 	movi	r2,1
  c08550:	10c8983a 	sll	r4,r2,r3
  c08554:	39004436 	bltu	r7,r4,c08668 <_malloc_r+0x340>
  c08558:	21c4703a 	and	r2,r4,r7
  c0855c:	10000a1e 	bne	r2,zero,c08588 <_malloc_r+0x260>
  c08560:	2109883a 	add	r4,r4,r4
  c08564:	00bfff04 	movi	r2,-4
  c08568:	4884703a 	and	r2,r9,r2
  c0856c:	3906703a 	and	r3,r7,r4
  c08570:	12400104 	addi	r9,r2,4
  c08574:	1800041e 	bne	r3,zero,c08588 <_malloc_r+0x260>
  c08578:	2109883a 	add	r4,r4,r4
  c0857c:	3904703a 	and	r2,r7,r4
  c08580:	4a400104 	addi	r9,r9,4
  c08584:	103ffc26 	beq	r2,zero,c08578 <_malloc_r+0x250>
  c08588:	480490fa 	slli	r2,r9,3
  c0858c:	4819883a 	mov	r12,r9
  c08590:	023fff04 	movi	r8,-4
  c08594:	589b883a 	add	r13,r11,r2
  c08598:	6807883a 	mov	r3,r13
  c0859c:	014003c4 	movi	r5,15
  c085a0:	1c000317 	ldw	r16,12(r3)
  c085a4:	1c00041e 	bne	r3,r16,c085b8 <_malloc_r+0x290>
  c085a8:	0000a706 	br	c08848 <_malloc_r+0x520>
  c085ac:	3000ab0e 	bge	r6,zero,c0885c <_malloc_r+0x534>
  c085b0:	84000317 	ldw	r16,12(r16)
  c085b4:	1c00a426 	beq	r3,r16,c08848 <_malloc_r+0x520>
  c085b8:	80800117 	ldw	r2,4(r16)
  c085bc:	1204703a 	and	r2,r2,r8
  c085c0:	144dc83a 	sub	r6,r2,r17
  c085c4:	29bff90e 	bge	r5,r6,c085ac <_malloc_r+0x284>
  c085c8:	81000317 	ldw	r4,12(r16)
  c085cc:	80c00217 	ldw	r3,8(r16)
  c085d0:	89400054 	ori	r5,r17,1
  c085d4:	8445883a 	add	r2,r16,r17
  c085d8:	20c00215 	stw	r3,8(r4)
  c085dc:	19000315 	stw	r4,12(r3)
  c085e0:	81400115 	stw	r5,4(r16)
  c085e4:	1187883a 	add	r3,r2,r6
  c085e8:	31000054 	ori	r4,r6,1
  c085ec:	50800315 	stw	r2,12(r10)
  c085f0:	50800215 	stw	r2,8(r10)
  c085f4:	19800015 	stw	r6,0(r3)
  c085f8:	11000115 	stw	r4,4(r2)
  c085fc:	12800215 	stw	r10,8(r2)
  c08600:	12800315 	stw	r10,12(r2)
  c08604:	9009883a 	mov	r4,r18
  c08608:	0c0c7700 	call	c0c770 <__malloc_unlock>
  c0860c:	80c00204 	addi	r3,r16,8
  c08610:	003f5906 	br	c08378 <_malloc_r+0x50>
  c08614:	8109883a 	add	r4,r16,r4
  c08618:	20800117 	ldw	r2,4(r4)
  c0861c:	80c00217 	ldw	r3,8(r16)
  c08620:	81400317 	ldw	r5,12(r16)
  c08624:	10800054 	ori	r2,r2,1
  c08628:	20800115 	stw	r2,4(r4)
  c0862c:	28c00215 	stw	r3,8(r5)
  c08630:	19400315 	stw	r5,12(r3)
  c08634:	9009883a 	mov	r4,r18
  c08638:	0c0c7700 	call	c0c770 <__malloc_unlock>
  c0863c:	80c00204 	addi	r3,r16,8
  c08640:	003f4d06 	br	c08378 <_malloc_r+0x50>
  c08644:	80800204 	addi	r2,r16,8
  c08648:	14000317 	ldw	r16,12(r2)
  c0864c:	143f911e 	bne	r2,r16,c08494 <_malloc_r+0x16c>
  c08650:	1a400084 	addi	r9,r3,2
  c08654:	003f7306 	br	c08424 <_malloc_r+0xfc>
  c08658:	88c00054 	ori	r3,r17,1
  c0865c:	8445883a 	add	r2,r16,r17
  c08660:	80c00115 	stw	r3,4(r16)
  c08664:	003fdf06 	br	c085e4 <_malloc_r+0x2bc>
  c08668:	e4000217 	ldw	r16,8(fp)
  c0866c:	00bfff04 	movi	r2,-4
  c08670:	80c00117 	ldw	r3,4(r16)
  c08674:	802d883a 	mov	r22,r16
  c08678:	18aa703a 	and	r21,r3,r2
  c0867c:	ac401636 	bltu	r21,r17,c086d8 <_malloc_r+0x3b0>
  c08680:	ac49c83a 	sub	r4,r21,r17
  c08684:	008003c4 	movi	r2,15
  c08688:	1100130e 	bge	r2,r4,c086d8 <_malloc_r+0x3b0>
  c0868c:	88800054 	ori	r2,r17,1
  c08690:	8447883a 	add	r3,r16,r17
  c08694:	80800115 	stw	r2,4(r16)
  c08698:	20800054 	ori	r2,r4,1
  c0869c:	18800115 	stw	r2,4(r3)
  c086a0:	e0c00215 	stw	r3,8(fp)
  c086a4:	9009883a 	mov	r4,r18
  c086a8:	0c0c7700 	call	c0c770 <__malloc_unlock>
  c086ac:	80c00204 	addi	r3,r16,8
  c086b0:	003f3106 	br	c08378 <_malloc_r+0x50>
  c086b4:	39c00117 	ldw	r7,4(r7)
  c086b8:	573ffe04 	addi	fp,r10,-8
  c086bc:	003fa006 	br	c08540 <_malloc_r+0x218>
  c086c0:	00801504 	movi	r2,84
  c086c4:	10c06736 	bltu	r2,r3,c08864 <_malloc_r+0x53c>
  c086c8:	8804d33a 	srli	r2,r17,12
  c086cc:	11801b84 	addi	r6,r2,110
  c086d0:	300490fa 	slli	r2,r6,3
  c086d4:	003f4106 	br	c083dc <_malloc_r+0xb4>
  c086d8:	d0a71e17 	ldw	r2,-25480(gp)
  c086dc:	d0e01217 	ldw	r3,-32696(gp)
  c086e0:	053fffc4 	movi	r20,-1
  c086e4:	10800404 	addi	r2,r2,16
  c086e8:	88a7883a 	add	r19,r17,r2
  c086ec:	1d000326 	beq	r3,r20,c086fc <_malloc_r+0x3d4>
  c086f0:	98c3ffc4 	addi	r3,r19,4095
  c086f4:	00bc0004 	movi	r2,-4096
  c086f8:	18a6703a 	and	r19,r3,r2
  c086fc:	9009883a 	mov	r4,r18
  c08700:	980b883a 	mov	r5,r19
  c08704:	0c0a3bc0 	call	c0a3bc <_sbrk_r>
  c08708:	1009883a 	mov	r4,r2
  c0870c:	15000426 	beq	r2,r20,c08720 <_malloc_r+0x3f8>
  c08710:	854b883a 	add	r5,r16,r21
  c08714:	1029883a 	mov	r20,r2
  c08718:	11405a2e 	bgeu	r2,r5,c08884 <_malloc_r+0x55c>
  c0871c:	87000c26 	beq	r16,fp,c08750 <_malloc_r+0x428>
  c08720:	e4000217 	ldw	r16,8(fp)
  c08724:	80c00117 	ldw	r3,4(r16)
  c08728:	00bfff04 	movi	r2,-4
  c0872c:	1884703a 	and	r2,r3,r2
  c08730:	14400336 	bltu	r2,r17,c08740 <_malloc_r+0x418>
  c08734:	1449c83a 	sub	r4,r2,r17
  c08738:	008003c4 	movi	r2,15
  c0873c:	113fd316 	blt	r2,r4,c0868c <_malloc_r+0x364>
  c08740:	9009883a 	mov	r4,r18
  c08744:	0c0c7700 	call	c0c770 <__malloc_unlock>
  c08748:	0007883a 	mov	r3,zero
  c0874c:	003f0a06 	br	c08378 <_malloc_r+0x50>
  c08750:	05c03074 	movhi	r23,193
  c08754:	bdd0c404 	addi	r23,r23,17168
  c08758:	b8800017 	ldw	r2,0(r23)
  c0875c:	988d883a 	add	r6,r19,r2
  c08760:	b9800015 	stw	r6,0(r23)
  c08764:	d0e01217 	ldw	r3,-32696(gp)
  c08768:	00bfffc4 	movi	r2,-1
  c0876c:	18808e26 	beq	r3,r2,c089a8 <_malloc_r+0x680>
  c08770:	2145c83a 	sub	r2,r4,r5
  c08774:	3085883a 	add	r2,r6,r2
  c08778:	b8800015 	stw	r2,0(r23)
  c0877c:	20c001cc 	andi	r3,r4,7
  c08780:	18005f1e 	bne	r3,zero,c08900 <_malloc_r+0x5d8>
  c08784:	000b883a 	mov	r5,zero
  c08788:	a4c5883a 	add	r2,r20,r19
  c0878c:	1083ffcc 	andi	r2,r2,4095
  c08790:	00c40004 	movi	r3,4096
  c08794:	1887c83a 	sub	r3,r3,r2
  c08798:	28e7883a 	add	r19,r5,r3
  c0879c:	9009883a 	mov	r4,r18
  c087a0:	980b883a 	mov	r5,r19
  c087a4:	0c0a3bc0 	call	c0a3bc <_sbrk_r>
  c087a8:	1007883a 	mov	r3,r2
  c087ac:	00bfffc4 	movi	r2,-1
  c087b0:	18807a26 	beq	r3,r2,c0899c <_malloc_r+0x674>
  c087b4:	1d05c83a 	sub	r2,r3,r20
  c087b8:	9885883a 	add	r2,r19,r2
  c087bc:	10c00054 	ori	r3,r2,1
  c087c0:	b8800017 	ldw	r2,0(r23)
  c087c4:	a021883a 	mov	r16,r20
  c087c8:	a0c00115 	stw	r3,4(r20)
  c087cc:	9885883a 	add	r2,r19,r2
  c087d0:	b8800015 	stw	r2,0(r23)
  c087d4:	e5000215 	stw	r20,8(fp)
  c087d8:	b7003626 	beq	r22,fp,c088b4 <_malloc_r+0x58c>
  c087dc:	018003c4 	movi	r6,15
  c087e0:	35404b36 	bltu	r6,r21,c08910 <_malloc_r+0x5e8>
  c087e4:	00800044 	movi	r2,1
  c087e8:	a0800115 	stw	r2,4(r20)
  c087ec:	003fcd06 	br	c08724 <_malloc_r+0x3fc>
  c087f0:	2808d27a 	srli	r4,r5,9
  c087f4:	2000371e 	bne	r4,zero,c088d4 <_malloc_r+0x5ac>
  c087f8:	2808d0fa 	srli	r4,r5,3
  c087fc:	200690fa 	slli	r3,r4,3
  c08800:	1ad1883a 	add	r8,r3,r11
  c08804:	41800217 	ldw	r6,8(r8)
  c08808:	41805b26 	beq	r8,r6,c08978 <_malloc_r+0x650>
  c0880c:	30800117 	ldw	r2,4(r6)
  c08810:	00ffff04 	movi	r3,-4
  c08814:	10c4703a 	and	r2,r2,r3
  c08818:	2880022e 	bgeu	r5,r2,c08824 <_malloc_r+0x4fc>
  c0881c:	31800217 	ldw	r6,8(r6)
  c08820:	41bffa1e 	bne	r8,r6,c0880c <_malloc_r+0x4e4>
  c08824:	32000317 	ldw	r8,12(r6)
  c08828:	39c00117 	ldw	r7,4(r7)
  c0882c:	82000315 	stw	r8,12(r16)
  c08830:	81800215 	stw	r6,8(r16)
  c08834:	07003074 	movhi	fp,193
  c08838:	e703c704 	addi	fp,fp,3868
  c0883c:	34000315 	stw	r16,12(r6)
  c08840:	44000215 	stw	r16,8(r8)
  c08844:	003f3e06 	br	c08540 <_malloc_r+0x218>
  c08848:	63000044 	addi	r12,r12,1
  c0884c:	608000cc 	andi	r2,r12,3
  c08850:	10005d26 	beq	r2,zero,c089c8 <_malloc_r+0x6a0>
  c08854:	18c00204 	addi	r3,r3,8
  c08858:	003f5106 	br	c085a0 <_malloc_r+0x278>
  c0885c:	8089883a 	add	r4,r16,r2
  c08860:	003f6d06 	br	c08618 <_malloc_r+0x2f0>
  c08864:	00805504 	movi	r2,340
  c08868:	10c02036 	bltu	r2,r3,c088ec <_malloc_r+0x5c4>
  c0886c:	8804d3fa 	srli	r2,r17,15
  c08870:	11801dc4 	addi	r6,r2,119
  c08874:	300490fa 	slli	r2,r6,3
  c08878:	003ed806 	br	c083dc <_malloc_r+0xb4>
  c0887c:	48c000c4 	addi	r3,r9,3
  c08880:	003f3106 	br	c08548 <_malloc_r+0x220>
  c08884:	05c03074 	movhi	r23,193
  c08888:	bdd0c404 	addi	r23,r23,17168
  c0888c:	b8800017 	ldw	r2,0(r23)
  c08890:	988d883a 	add	r6,r19,r2
  c08894:	b9800015 	stw	r6,0(r23)
  c08898:	293fb21e 	bne	r5,r4,c08764 <_malloc_r+0x43c>
  c0889c:	2083ffcc 	andi	r2,r4,4095
  c088a0:	103fb01e 	bne	r2,zero,c08764 <_malloc_r+0x43c>
  c088a4:	e4000217 	ldw	r16,8(fp)
  c088a8:	9d45883a 	add	r2,r19,r21
  c088ac:	10800054 	ori	r2,r2,1
  c088b0:	80800115 	stw	r2,4(r16)
  c088b4:	b8c00017 	ldw	r3,0(r23)
  c088b8:	d0a71f17 	ldw	r2,-25476(gp)
  c088bc:	10c0012e 	bgeu	r2,r3,c088c4 <_malloc_r+0x59c>
  c088c0:	d0e71f15 	stw	r3,-25476(gp)
  c088c4:	d0a72017 	ldw	r2,-25472(gp)
  c088c8:	10ff962e 	bgeu	r2,r3,c08724 <_malloc_r+0x3fc>
  c088cc:	d0e72015 	stw	r3,-25472(gp)
  c088d0:	003f9406 	br	c08724 <_malloc_r+0x3fc>
  c088d4:	00800104 	movi	r2,4
  c088d8:	11001e36 	bltu	r2,r4,c08954 <_malloc_r+0x62c>
  c088dc:	2804d1ba 	srli	r2,r5,6
  c088e0:	11000e04 	addi	r4,r2,56
  c088e4:	200690fa 	slli	r3,r4,3
  c088e8:	003fc506 	br	c08800 <_malloc_r+0x4d8>
  c088ec:	00815504 	movi	r2,1364
  c088f0:	10c01d2e 	bgeu	r2,r3,c08968 <_malloc_r+0x640>
  c088f4:	01801f84 	movi	r6,126
  c088f8:	0080fc04 	movi	r2,1008
  c088fc:	003eb706 	br	c083dc <_malloc_r+0xb4>
  c08900:	00800204 	movi	r2,8
  c08904:	10cbc83a 	sub	r5,r2,r3
  c08908:	2169883a 	add	r20,r4,r5
  c0890c:	003f9e06 	br	c08788 <_malloc_r+0x460>
  c08910:	00bffe04 	movi	r2,-8
  c08914:	a93ffd04 	addi	r4,r21,-12
  c08918:	2088703a 	and	r4,r4,r2
  c0891c:	b10b883a 	add	r5,r22,r4
  c08920:	00c00144 	movi	r3,5
  c08924:	28c00215 	stw	r3,8(r5)
  c08928:	28c00115 	stw	r3,4(r5)
  c0892c:	b0800117 	ldw	r2,4(r22)
  c08930:	1080004c 	andi	r2,r2,1
  c08934:	2084b03a 	or	r2,r4,r2
  c08938:	b0800115 	stw	r2,4(r22)
  c0893c:	313fdd2e 	bgeu	r6,r4,c088b4 <_malloc_r+0x58c>
  c08940:	b1400204 	addi	r5,r22,8
  c08944:	9009883a 	mov	r4,r18
  c08948:	0c077a00 	call	c077a0 <_free_r>
  c0894c:	e4000217 	ldw	r16,8(fp)
  c08950:	003fd806 	br	c088b4 <_malloc_r+0x58c>
  c08954:	00800504 	movi	r2,20
  c08958:	11001536 	bltu	r2,r4,c089b0 <_malloc_r+0x688>
  c0895c:	210016c4 	addi	r4,r4,91
  c08960:	200690fa 	slli	r3,r4,3
  c08964:	003fa606 	br	c08800 <_malloc_r+0x4d8>
  c08968:	8804d4ba 	srli	r2,r17,18
  c0896c:	11801f04 	addi	r6,r2,124
  c08970:	300490fa 	slli	r2,r6,3
  c08974:	003e9906 	br	c083dc <_malloc_r+0xb4>
  c08978:	2009d0ba 	srai	r4,r4,2
  c0897c:	01403074 	movhi	r5,193
  c08980:	2943c704 	addi	r5,r5,3868
  c08984:	00c00044 	movi	r3,1
  c08988:	28800117 	ldw	r2,4(r5)
  c0898c:	1906983a 	sll	r3,r3,r4
  c08990:	10c4b03a 	or	r2,r2,r3
  c08994:	28800115 	stw	r2,4(r5)
  c08998:	003fa306 	br	c08828 <_malloc_r+0x500>
  c0899c:	0027883a 	mov	r19,zero
  c089a0:	00c00044 	movi	r3,1
  c089a4:	003f8606 	br	c087c0 <_malloc_r+0x498>
  c089a8:	d1201215 	stw	r4,-32696(gp)
  c089ac:	003f7306 	br	c0877c <_malloc_r+0x454>
  c089b0:	00801504 	movi	r2,84
  c089b4:	11001936 	bltu	r2,r4,c08a1c <_malloc_r+0x6f4>
  c089b8:	2804d33a 	srli	r2,r5,12
  c089bc:	11001b84 	addi	r4,r2,110
  c089c0:	200690fa 	slli	r3,r4,3
  c089c4:	003f8e06 	br	c08800 <_malloc_r+0x4d8>
  c089c8:	480b883a 	mov	r5,r9
  c089cc:	6807883a 	mov	r3,r13
  c089d0:	288000cc 	andi	r2,r5,3
  c089d4:	18fffe04 	addi	r3,r3,-8
  c089d8:	297fffc4 	addi	r5,r5,-1
  c089dc:	10001526 	beq	r2,zero,c08a34 <_malloc_r+0x70c>
  c089e0:	18800217 	ldw	r2,8(r3)
  c089e4:	10fffa26 	beq	r2,r3,c089d0 <_malloc_r+0x6a8>
  c089e8:	2109883a 	add	r4,r4,r4
  c089ec:	393f1e36 	bltu	r7,r4,c08668 <_malloc_r+0x340>
  c089f0:	203f1d26 	beq	r4,zero,c08668 <_malloc_r+0x340>
  c089f4:	21c4703a 	and	r2,r4,r7
  c089f8:	10000226 	beq	r2,zero,c08a04 <_malloc_r+0x6dc>
  c089fc:	6013883a 	mov	r9,r12
  c08a00:	003ee106 	br	c08588 <_malloc_r+0x260>
  c08a04:	2109883a 	add	r4,r4,r4
  c08a08:	3904703a 	and	r2,r7,r4
  c08a0c:	63000104 	addi	r12,r12,4
  c08a10:	103ffc26 	beq	r2,zero,c08a04 <_malloc_r+0x6dc>
  c08a14:	6013883a 	mov	r9,r12
  c08a18:	003edb06 	br	c08588 <_malloc_r+0x260>
  c08a1c:	00805504 	movi	r2,340
  c08a20:	11000836 	bltu	r2,r4,c08a44 <_malloc_r+0x71c>
  c08a24:	2804d3fa 	srli	r2,r5,15
  c08a28:	11001dc4 	addi	r4,r2,119
  c08a2c:	200690fa 	slli	r3,r4,3
  c08a30:	003f7306 	br	c08800 <_malloc_r+0x4d8>
  c08a34:	0104303a 	nor	r2,zero,r4
  c08a38:	388e703a 	and	r7,r7,r2
  c08a3c:	e1c00115 	stw	r7,4(fp)
  c08a40:	003fe906 	br	c089e8 <_malloc_r+0x6c0>
  c08a44:	00815504 	movi	r2,1364
  c08a48:	1100032e 	bgeu	r2,r4,c08a58 <_malloc_r+0x730>
  c08a4c:	01001f84 	movi	r4,126
  c08a50:	00c0fc04 	movi	r3,1008
  c08a54:	003f6a06 	br	c08800 <_malloc_r+0x4d8>
  c08a58:	2804d4ba 	srli	r2,r5,18
  c08a5c:	11001f04 	addi	r4,r2,124
  c08a60:	200690fa 	slli	r3,r4,3
  c08a64:	003f6606 	br	c08800 <_malloc_r+0x4d8>

00c08a68 <memchr>:
  c08a68:	008000c4 	movi	r2,3
  c08a6c:	29403fcc 	andi	r5,r5,255
  c08a70:	2007883a 	mov	r3,r4
  c08a74:	1180022e 	bgeu	r2,r6,c08a80 <memchr+0x18>
  c08a78:	2084703a 	and	r2,r4,r2
  c08a7c:	10000b26 	beq	r2,zero,c08aac <memchr+0x44>
  c08a80:	313fffc4 	addi	r4,r6,-1
  c08a84:	3000051e 	bne	r6,zero,c08a9c <memchr+0x34>
  c08a88:	00002c06 	br	c08b3c <memchr+0xd4>
  c08a8c:	213fffc4 	addi	r4,r4,-1
  c08a90:	00bfffc4 	movi	r2,-1
  c08a94:	18c00044 	addi	r3,r3,1
  c08a98:	20802826 	beq	r4,r2,c08b3c <memchr+0xd4>
  c08a9c:	18800003 	ldbu	r2,0(r3)
  c08aa0:	28bffa1e 	bne	r5,r2,c08a8c <memchr+0x24>
  c08aa4:	1805883a 	mov	r2,r3
  c08aa8:	f800283a 	ret
  c08aac:	0011883a 	mov	r8,zero
  c08ab0:	0007883a 	mov	r3,zero
  c08ab4:	01c00104 	movi	r7,4
  c08ab8:	4004923a 	slli	r2,r8,8
  c08abc:	18c00044 	addi	r3,r3,1
  c08ac0:	1151883a 	add	r8,r2,r5
  c08ac4:	19fffc1e 	bne	r3,r7,c08ab8 <memchr+0x50>
  c08ac8:	02bfbff4 	movhi	r10,65279
  c08acc:	52bfbfc4 	addi	r10,r10,-257
  c08ad0:	02602074 	movhi	r9,32897
  c08ad4:	4a602004 	addi	r9,r9,-32640
  c08ad8:	02c000c4 	movi	r11,3
  c08adc:	20800017 	ldw	r2,0(r4)
  c08ae0:	31bfff04 	addi	r6,r6,-4
  c08ae4:	200f883a 	mov	r7,r4
  c08ae8:	1204f03a 	xor	r2,r2,r8
  c08aec:	1287883a 	add	r3,r2,r10
  c08af0:	1a46703a 	and	r3,r3,r9
  c08af4:	0084303a 	nor	r2,zero,r2
  c08af8:	10c4703a 	and	r2,r2,r3
  c08afc:	10000b26 	beq	r2,zero,c08b2c <memchr+0xc4>
  c08b00:	20800003 	ldbu	r2,0(r4)
  c08b04:	28800f26 	beq	r5,r2,c08b44 <memchr+0xdc>
  c08b08:	20800043 	ldbu	r2,1(r4)
  c08b0c:	21c00044 	addi	r7,r4,1
  c08b10:	28800c26 	beq	r5,r2,c08b44 <memchr+0xdc>
  c08b14:	20800083 	ldbu	r2,2(r4)
  c08b18:	21c00084 	addi	r7,r4,2
  c08b1c:	28800926 	beq	r5,r2,c08b44 <memchr+0xdc>
  c08b20:	208000c3 	ldbu	r2,3(r4)
  c08b24:	21c000c4 	addi	r7,r4,3
  c08b28:	28800626 	beq	r5,r2,c08b44 <memchr+0xdc>
  c08b2c:	21000104 	addi	r4,r4,4
  c08b30:	59bfea36 	bltu	r11,r6,c08adc <memchr+0x74>
  c08b34:	2007883a 	mov	r3,r4
  c08b38:	003fd106 	br	c08a80 <memchr+0x18>
  c08b3c:	0005883a 	mov	r2,zero
  c08b40:	f800283a 	ret
  c08b44:	3805883a 	mov	r2,r7
  c08b48:	f800283a 	ret

00c08b4c <memcpy>:
  c08b4c:	01c003c4 	movi	r7,15
  c08b50:	2007883a 	mov	r3,r4
  c08b54:	3980032e 	bgeu	r7,r6,c08b64 <memcpy+0x18>
  c08b58:	2904b03a 	or	r2,r5,r4
  c08b5c:	108000cc 	andi	r2,r2,3
  c08b60:	10000926 	beq	r2,zero,c08b88 <memcpy+0x3c>
  c08b64:	30000626 	beq	r6,zero,c08b80 <memcpy+0x34>
  c08b68:	30cd883a 	add	r6,r6,r3
  c08b6c:	28800003 	ldbu	r2,0(r5)
  c08b70:	29400044 	addi	r5,r5,1
  c08b74:	18800005 	stb	r2,0(r3)
  c08b78:	18c00044 	addi	r3,r3,1
  c08b7c:	30fffb1e 	bne	r6,r3,c08b6c <memcpy+0x20>
  c08b80:	2005883a 	mov	r2,r4
  c08b84:	f800283a 	ret
  c08b88:	3811883a 	mov	r8,r7
  c08b8c:	200f883a 	mov	r7,r4
  c08b90:	28c00017 	ldw	r3,0(r5)
  c08b94:	31bffc04 	addi	r6,r6,-16
  c08b98:	38c00015 	stw	r3,0(r7)
  c08b9c:	28800117 	ldw	r2,4(r5)
  c08ba0:	38800115 	stw	r2,4(r7)
  c08ba4:	28c00217 	ldw	r3,8(r5)
  c08ba8:	38c00215 	stw	r3,8(r7)
  c08bac:	28800317 	ldw	r2,12(r5)
  c08bb0:	29400404 	addi	r5,r5,16
  c08bb4:	38800315 	stw	r2,12(r7)
  c08bb8:	39c00404 	addi	r7,r7,16
  c08bbc:	41bff436 	bltu	r8,r6,c08b90 <memcpy+0x44>
  c08bc0:	008000c4 	movi	r2,3
  c08bc4:	1180072e 	bgeu	r2,r6,c08be4 <memcpy+0x98>
  c08bc8:	1007883a 	mov	r3,r2
  c08bcc:	28800017 	ldw	r2,0(r5)
  c08bd0:	31bfff04 	addi	r6,r6,-4
  c08bd4:	29400104 	addi	r5,r5,4
  c08bd8:	38800015 	stw	r2,0(r7)
  c08bdc:	39c00104 	addi	r7,r7,4
  c08be0:	19bffa36 	bltu	r3,r6,c08bcc <memcpy+0x80>
  c08be4:	3807883a 	mov	r3,r7
  c08be8:	003fde06 	br	c08b64 <memcpy+0x18>

00c08bec <memmove>:
  c08bec:	2807883a 	mov	r3,r5
  c08bf0:	2011883a 	mov	r8,r4
  c08bf4:	29000c2e 	bgeu	r5,r4,c08c28 <memmove+0x3c>
  c08bf8:	298f883a 	add	r7,r5,r6
  c08bfc:	21c00a2e 	bgeu	r4,r7,c08c28 <memmove+0x3c>
  c08c00:	30000726 	beq	r6,zero,c08c20 <memmove+0x34>
  c08c04:	2187883a 	add	r3,r4,r6
  c08c08:	198dc83a 	sub	r6,r3,r6
  c08c0c:	39ffffc4 	addi	r7,r7,-1
  c08c10:	38800003 	ldbu	r2,0(r7)
  c08c14:	18ffffc4 	addi	r3,r3,-1
  c08c18:	18800005 	stb	r2,0(r3)
  c08c1c:	19bffb1e 	bne	r3,r6,c08c0c <memmove+0x20>
  c08c20:	2005883a 	mov	r2,r4
  c08c24:	f800283a 	ret
  c08c28:	01c003c4 	movi	r7,15
  c08c2c:	39800a36 	bltu	r7,r6,c08c58 <memmove+0x6c>
  c08c30:	303ffb26 	beq	r6,zero,c08c20 <memmove+0x34>
  c08c34:	400f883a 	mov	r7,r8
  c08c38:	320d883a 	add	r6,r6,r8
  c08c3c:	28800003 	ldbu	r2,0(r5)
  c08c40:	29400044 	addi	r5,r5,1
  c08c44:	38800005 	stb	r2,0(r7)
  c08c48:	39c00044 	addi	r7,r7,1
  c08c4c:	39bffb1e 	bne	r7,r6,c08c3c <memmove+0x50>
  c08c50:	2005883a 	mov	r2,r4
  c08c54:	f800283a 	ret
  c08c58:	1904b03a 	or	r2,r3,r4
  c08c5c:	108000cc 	andi	r2,r2,3
  c08c60:	103ff31e 	bne	r2,zero,c08c30 <memmove+0x44>
  c08c64:	3811883a 	mov	r8,r7
  c08c68:	180b883a 	mov	r5,r3
  c08c6c:	200f883a 	mov	r7,r4
  c08c70:	28c00017 	ldw	r3,0(r5)
  c08c74:	31bffc04 	addi	r6,r6,-16
  c08c78:	38c00015 	stw	r3,0(r7)
  c08c7c:	28800117 	ldw	r2,4(r5)
  c08c80:	38800115 	stw	r2,4(r7)
  c08c84:	28c00217 	ldw	r3,8(r5)
  c08c88:	38c00215 	stw	r3,8(r7)
  c08c8c:	28800317 	ldw	r2,12(r5)
  c08c90:	29400404 	addi	r5,r5,16
  c08c94:	38800315 	stw	r2,12(r7)
  c08c98:	39c00404 	addi	r7,r7,16
  c08c9c:	41bff436 	bltu	r8,r6,c08c70 <memmove+0x84>
  c08ca0:	008000c4 	movi	r2,3
  c08ca4:	1180072e 	bgeu	r2,r6,c08cc4 <memmove+0xd8>
  c08ca8:	1007883a 	mov	r3,r2
  c08cac:	28800017 	ldw	r2,0(r5)
  c08cb0:	31bfff04 	addi	r6,r6,-4
  c08cb4:	29400104 	addi	r5,r5,4
  c08cb8:	38800015 	stw	r2,0(r7)
  c08cbc:	39c00104 	addi	r7,r7,4
  c08cc0:	19bffa36 	bltu	r3,r6,c08cac <memmove+0xc0>
  c08cc4:	3811883a 	mov	r8,r7
  c08cc8:	003fd906 	br	c08c30 <memmove+0x44>

00c08ccc <memset>:
  c08ccc:	008000c4 	movi	r2,3
  c08cd0:	29403fcc 	andi	r5,r5,255
  c08cd4:	2007883a 	mov	r3,r4
  c08cd8:	1180022e 	bgeu	r2,r6,c08ce4 <memset+0x18>
  c08cdc:	2084703a 	and	r2,r4,r2
  c08ce0:	10000826 	beq	r2,zero,c08d04 <memset+0x38>
  c08ce4:	30000526 	beq	r6,zero,c08cfc <memset+0x30>
  c08ce8:	2805883a 	mov	r2,r5
  c08cec:	30cd883a 	add	r6,r6,r3
  c08cf0:	18800005 	stb	r2,0(r3)
  c08cf4:	18c00044 	addi	r3,r3,1
  c08cf8:	19bffd1e 	bne	r3,r6,c08cf0 <memset+0x24>
  c08cfc:	2005883a 	mov	r2,r4
  c08d00:	f800283a 	ret
  c08d04:	2804923a 	slli	r2,r5,8
  c08d08:	020003c4 	movi	r8,15
  c08d0c:	200f883a 	mov	r7,r4
  c08d10:	2884b03a 	or	r2,r5,r2
  c08d14:	1006943a 	slli	r3,r2,16
  c08d18:	10c6b03a 	or	r3,r2,r3
  c08d1c:	41800a2e 	bgeu	r8,r6,c08d48 <memset+0x7c>
  c08d20:	4005883a 	mov	r2,r8
  c08d24:	31bffc04 	addi	r6,r6,-16
  c08d28:	38c00015 	stw	r3,0(r7)
  c08d2c:	38c00115 	stw	r3,4(r7)
  c08d30:	38c00215 	stw	r3,8(r7)
  c08d34:	38c00315 	stw	r3,12(r7)
  c08d38:	39c00404 	addi	r7,r7,16
  c08d3c:	11bff936 	bltu	r2,r6,c08d24 <memset+0x58>
  c08d40:	008000c4 	movi	r2,3
  c08d44:	1180052e 	bgeu	r2,r6,c08d5c <memset+0x90>
  c08d48:	31bfff04 	addi	r6,r6,-4
  c08d4c:	008000c4 	movi	r2,3
  c08d50:	38c00015 	stw	r3,0(r7)
  c08d54:	39c00104 	addi	r7,r7,4
  c08d58:	11bffb36 	bltu	r2,r6,c08d48 <memset+0x7c>
  c08d5c:	3807883a 	mov	r3,r7
  c08d60:	003fe006 	br	c08ce4 <memset+0x18>

00c08d64 <_Bfree>:
  c08d64:	28000826 	beq	r5,zero,c08d88 <_Bfree+0x24>
  c08d68:	28800117 	ldw	r2,4(r5)
  c08d6c:	21001317 	ldw	r4,76(r4)
  c08d70:	1085883a 	add	r2,r2,r2
  c08d74:	1085883a 	add	r2,r2,r2
  c08d78:	1105883a 	add	r2,r2,r4
  c08d7c:	10c00017 	ldw	r3,0(r2)
  c08d80:	28c00015 	stw	r3,0(r5)
  c08d84:	11400015 	stw	r5,0(r2)
  c08d88:	f800283a 	ret

00c08d8c <__hi0bits>:
  c08d8c:	20bfffec 	andhi	r2,r4,65535
  c08d90:	10001426 	beq	r2,zero,c08de4 <__hi0bits+0x58>
  c08d94:	0007883a 	mov	r3,zero
  c08d98:	20bfc02c 	andhi	r2,r4,65280
  c08d9c:	1000021e 	bne	r2,zero,c08da8 <__hi0bits+0x1c>
  c08da0:	2008923a 	slli	r4,r4,8
  c08da4:	18c00204 	addi	r3,r3,8
  c08da8:	20bc002c 	andhi	r2,r4,61440
  c08dac:	1000021e 	bne	r2,zero,c08db8 <__hi0bits+0x2c>
  c08db0:	2008913a 	slli	r4,r4,4
  c08db4:	18c00104 	addi	r3,r3,4
  c08db8:	20b0002c 	andhi	r2,r4,49152
  c08dbc:	1000031e 	bne	r2,zero,c08dcc <__hi0bits+0x40>
  c08dc0:	2105883a 	add	r2,r4,r4
  c08dc4:	18c00084 	addi	r3,r3,2
  c08dc8:	1089883a 	add	r4,r2,r2
  c08dcc:	20000316 	blt	r4,zero,c08ddc <__hi0bits+0x50>
  c08dd0:	2090002c 	andhi	r2,r4,16384
  c08dd4:	10000626 	beq	r2,zero,c08df0 <__hi0bits+0x64>
  c08dd8:	18c00044 	addi	r3,r3,1
  c08ddc:	1805883a 	mov	r2,r3
  c08de0:	f800283a 	ret
  c08de4:	2008943a 	slli	r4,r4,16
  c08de8:	00c00404 	movi	r3,16
  c08dec:	003fea06 	br	c08d98 <__hi0bits+0xc>
  c08df0:	00c00804 	movi	r3,32
  c08df4:	1805883a 	mov	r2,r3
  c08df8:	f800283a 	ret

00c08dfc <__lo0bits>:
  c08dfc:	20c00017 	ldw	r3,0(r4)
  c08e00:	188001cc 	andi	r2,r3,7
  c08e04:	10000a26 	beq	r2,zero,c08e30 <__lo0bits+0x34>
  c08e08:	1880004c 	andi	r2,r3,1
  c08e0c:	1005003a 	cmpeq	r2,r2,zero
  c08e10:	10002126 	beq	r2,zero,c08e98 <__lo0bits+0x9c>
  c08e14:	1880008c 	andi	r2,r3,2
  c08e18:	1000251e 	bne	r2,zero,c08eb0 <__lo0bits+0xb4>
  c08e1c:	1804d0ba 	srli	r2,r3,2
  c08e20:	01400084 	movi	r5,2
  c08e24:	20800015 	stw	r2,0(r4)
  c08e28:	2805883a 	mov	r2,r5
  c08e2c:	f800283a 	ret
  c08e30:	18bfffcc 	andi	r2,r3,65535
  c08e34:	10001526 	beq	r2,zero,c08e8c <__lo0bits+0x90>
  c08e38:	000b883a 	mov	r5,zero
  c08e3c:	18803fcc 	andi	r2,r3,255
  c08e40:	1000021e 	bne	r2,zero,c08e4c <__lo0bits+0x50>
  c08e44:	1806d23a 	srli	r3,r3,8
  c08e48:	29400204 	addi	r5,r5,8
  c08e4c:	188003cc 	andi	r2,r3,15
  c08e50:	1000021e 	bne	r2,zero,c08e5c <__lo0bits+0x60>
  c08e54:	1806d13a 	srli	r3,r3,4
  c08e58:	29400104 	addi	r5,r5,4
  c08e5c:	188000cc 	andi	r2,r3,3
  c08e60:	1000021e 	bne	r2,zero,c08e6c <__lo0bits+0x70>
  c08e64:	1806d0ba 	srli	r3,r3,2
  c08e68:	29400084 	addi	r5,r5,2
  c08e6c:	1880004c 	andi	r2,r3,1
  c08e70:	1000031e 	bne	r2,zero,c08e80 <__lo0bits+0x84>
  c08e74:	1806d07a 	srli	r3,r3,1
  c08e78:	18000a26 	beq	r3,zero,c08ea4 <__lo0bits+0xa8>
  c08e7c:	29400044 	addi	r5,r5,1
  c08e80:	2805883a 	mov	r2,r5
  c08e84:	20c00015 	stw	r3,0(r4)
  c08e88:	f800283a 	ret
  c08e8c:	1806d43a 	srli	r3,r3,16
  c08e90:	01400404 	movi	r5,16
  c08e94:	003fe906 	br	c08e3c <__lo0bits+0x40>
  c08e98:	000b883a 	mov	r5,zero
  c08e9c:	2805883a 	mov	r2,r5
  c08ea0:	f800283a 	ret
  c08ea4:	01400804 	movi	r5,32
  c08ea8:	2805883a 	mov	r2,r5
  c08eac:	f800283a 	ret
  c08eb0:	1804d07a 	srli	r2,r3,1
  c08eb4:	01400044 	movi	r5,1
  c08eb8:	20800015 	stw	r2,0(r4)
  c08ebc:	003fda06 	br	c08e28 <__lo0bits+0x2c>

00c08ec0 <__mcmp>:
  c08ec0:	20800417 	ldw	r2,16(r4)
  c08ec4:	28c00417 	ldw	r3,16(r5)
  c08ec8:	10cfc83a 	sub	r7,r2,r3
  c08ecc:	38000c1e 	bne	r7,zero,c08f00 <__mcmp+0x40>
  c08ed0:	18c5883a 	add	r2,r3,r3
  c08ed4:	1085883a 	add	r2,r2,r2
  c08ed8:	10c00504 	addi	r3,r2,20
  c08edc:	21000504 	addi	r4,r4,20
  c08ee0:	28cb883a 	add	r5,r5,r3
  c08ee4:	2085883a 	add	r2,r4,r2
  c08ee8:	10bfff04 	addi	r2,r2,-4
  c08eec:	297fff04 	addi	r5,r5,-4
  c08ef0:	11800017 	ldw	r6,0(r2)
  c08ef4:	28c00017 	ldw	r3,0(r5)
  c08ef8:	30c0031e 	bne	r6,r3,c08f08 <__mcmp+0x48>
  c08efc:	20bffa36 	bltu	r4,r2,c08ee8 <__mcmp+0x28>
  c08f00:	3805883a 	mov	r2,r7
  c08f04:	f800283a 	ret
  c08f08:	30c00336 	bltu	r6,r3,c08f18 <__mcmp+0x58>
  c08f0c:	01c00044 	movi	r7,1
  c08f10:	3805883a 	mov	r2,r7
  c08f14:	f800283a 	ret
  c08f18:	01ffffc4 	movi	r7,-1
  c08f1c:	003ff806 	br	c08f00 <__mcmp+0x40>

00c08f20 <__ulp>:
  c08f20:	295ffc2c 	andhi	r5,r5,32752
  c08f24:	013f3034 	movhi	r4,64704
  c08f28:	290b883a 	add	r5,r5,r4
  c08f2c:	0145c83a 	sub	r2,zero,r5
  c08f30:	1007d53a 	srai	r3,r2,20
  c08f34:	000d883a 	mov	r6,zero
  c08f38:	0140040e 	bge	zero,r5,c08f4c <__ulp+0x2c>
  c08f3c:	280f883a 	mov	r7,r5
  c08f40:	3807883a 	mov	r3,r7
  c08f44:	3005883a 	mov	r2,r6
  c08f48:	f800283a 	ret
  c08f4c:	008004c4 	movi	r2,19
  c08f50:	193ffb04 	addi	r4,r3,-20
  c08f54:	10c00c0e 	bge	r2,r3,c08f88 <__ulp+0x68>
  c08f58:	008007c4 	movi	r2,31
  c08f5c:	1107c83a 	sub	r3,r2,r4
  c08f60:	00800784 	movi	r2,30
  c08f64:	01400044 	movi	r5,1
  c08f68:	11000216 	blt	r2,r4,c08f74 <__ulp+0x54>
  c08f6c:	00800044 	movi	r2,1
  c08f70:	10ca983a 	sll	r5,r2,r3
  c08f74:	000f883a 	mov	r7,zero
  c08f78:	280d883a 	mov	r6,r5
  c08f7c:	3807883a 	mov	r3,r7
  c08f80:	3005883a 	mov	r2,r6
  c08f84:	f800283a 	ret
  c08f88:	00800234 	movhi	r2,8
  c08f8c:	10cfd83a 	sra	r7,r2,r3
  c08f90:	000d883a 	mov	r6,zero
  c08f94:	3005883a 	mov	r2,r6
  c08f98:	3807883a 	mov	r3,r7
  c08f9c:	f800283a 	ret

00c08fa0 <__b2d>:
  c08fa0:	20800417 	ldw	r2,16(r4)
  c08fa4:	defff904 	addi	sp,sp,-28
  c08fa8:	dd000415 	stw	r20,16(sp)
  c08fac:	1085883a 	add	r2,r2,r2
  c08fb0:	25000504 	addi	r20,r4,20
  c08fb4:	1085883a 	add	r2,r2,r2
  c08fb8:	dc000015 	stw	r16,0(sp)
  c08fbc:	a0a1883a 	add	r16,r20,r2
  c08fc0:	dd400515 	stw	r21,20(sp)
  c08fc4:	857fff17 	ldw	r21,-4(r16)
  c08fc8:	dc400115 	stw	r17,4(sp)
  c08fcc:	dfc00615 	stw	ra,24(sp)
  c08fd0:	a809883a 	mov	r4,r21
  c08fd4:	2823883a 	mov	r17,r5
  c08fd8:	dcc00315 	stw	r19,12(sp)
  c08fdc:	dc800215 	stw	r18,8(sp)
  c08fe0:	0c08d8c0 	call	c08d8c <__hi0bits>
  c08fe4:	100b883a 	mov	r5,r2
  c08fe8:	00800804 	movi	r2,32
  c08fec:	1145c83a 	sub	r2,r2,r5
  c08ff0:	88800015 	stw	r2,0(r17)
  c08ff4:	00800284 	movi	r2,10
  c08ff8:	80ffff04 	addi	r3,r16,-4
  c08ffc:	11401416 	blt	r2,r5,c09050 <__b2d+0xb0>
  c09000:	008002c4 	movi	r2,11
  c09004:	1149c83a 	sub	r4,r2,r5
  c09008:	a0c02736 	bltu	r20,r3,c090a8 <__b2d+0x108>
  c0900c:	000d883a 	mov	r6,zero
  c09010:	28800544 	addi	r2,r5,21
  c09014:	a906d83a 	srl	r3,r21,r4
  c09018:	a884983a 	sll	r2,r21,r2
  c0901c:	1ccffc34 	orhi	r19,r3,16368
  c09020:	11a4b03a 	or	r18,r2,r6
  c09024:	9005883a 	mov	r2,r18
  c09028:	9807883a 	mov	r3,r19
  c0902c:	dfc00617 	ldw	ra,24(sp)
  c09030:	dd400517 	ldw	r21,20(sp)
  c09034:	dd000417 	ldw	r20,16(sp)
  c09038:	dcc00317 	ldw	r19,12(sp)
  c0903c:	dc800217 	ldw	r18,8(sp)
  c09040:	dc400117 	ldw	r17,4(sp)
  c09044:	dc000017 	ldw	r16,0(sp)
  c09048:	dec00704 	addi	sp,sp,28
  c0904c:	f800283a 	ret
  c09050:	a0c00e36 	bltu	r20,r3,c0908c <__b2d+0xec>
  c09054:	293ffd44 	addi	r4,r5,-11
  c09058:	000d883a 	mov	r6,zero
  c0905c:	20000f26 	beq	r4,zero,c0909c <__b2d+0xfc>
  c09060:	00800804 	movi	r2,32
  c09064:	110bc83a 	sub	r5,r2,r4
  c09068:	a0c01236 	bltu	r20,r3,c090b4 <__b2d+0x114>
  c0906c:	000f883a 	mov	r7,zero
  c09070:	a904983a 	sll	r2,r21,r4
  c09074:	3146d83a 	srl	r3,r6,r5
  c09078:	3108983a 	sll	r4,r6,r4
  c0907c:	108ffc34 	orhi	r2,r2,16368
  c09080:	18a6b03a 	or	r19,r3,r2
  c09084:	3924b03a 	or	r18,r7,r4
  c09088:	003fe606 	br	c09024 <__b2d+0x84>
  c0908c:	293ffd44 	addi	r4,r5,-11
  c09090:	81bffe17 	ldw	r6,-8(r16)
  c09094:	80fffe04 	addi	r3,r16,-8
  c09098:	203ff11e 	bne	r4,zero,c09060 <__b2d+0xc0>
  c0909c:	accffc34 	orhi	r19,r21,16368
  c090a0:	3025883a 	mov	r18,r6
  c090a4:	003fdf06 	br	c09024 <__b2d+0x84>
  c090a8:	18bfff17 	ldw	r2,-4(r3)
  c090ac:	110cd83a 	srl	r6,r2,r4
  c090b0:	003fd706 	br	c09010 <__b2d+0x70>
  c090b4:	18bfff17 	ldw	r2,-4(r3)
  c090b8:	114ed83a 	srl	r7,r2,r5
  c090bc:	003fec06 	br	c09070 <__b2d+0xd0>

00c090c0 <__ratio>:
  c090c0:	defff904 	addi	sp,sp,-28
  c090c4:	dc400215 	stw	r17,8(sp)
  c090c8:	2823883a 	mov	r17,r5
  c090cc:	d80b883a 	mov	r5,sp
  c090d0:	dfc00615 	stw	ra,24(sp)
  c090d4:	dd000515 	stw	r20,20(sp)
  c090d8:	dcc00415 	stw	r19,16(sp)
  c090dc:	dc800315 	stw	r18,12(sp)
  c090e0:	2025883a 	mov	r18,r4
  c090e4:	0c08fa00 	call	c08fa0 <__b2d>
  c090e8:	8809883a 	mov	r4,r17
  c090ec:	d9400104 	addi	r5,sp,4
  c090f0:	1027883a 	mov	r19,r2
  c090f4:	1829883a 	mov	r20,r3
  c090f8:	0c08fa00 	call	c08fa0 <__b2d>
  c090fc:	89000417 	ldw	r4,16(r17)
  c09100:	91c00417 	ldw	r7,16(r18)
  c09104:	d9800117 	ldw	r6,4(sp)
  c09108:	180b883a 	mov	r5,r3
  c0910c:	390fc83a 	sub	r7,r7,r4
  c09110:	1009883a 	mov	r4,r2
  c09114:	d8800017 	ldw	r2,0(sp)
  c09118:	380e917a 	slli	r7,r7,5
  c0911c:	2011883a 	mov	r8,r4
  c09120:	1185c83a 	sub	r2,r2,r6
  c09124:	11c5883a 	add	r2,r2,r7
  c09128:	1006953a 	slli	r3,r2,20
  c0912c:	2813883a 	mov	r9,r5
  c09130:	00800d0e 	bge	zero,r2,c09168 <__ratio+0xa8>
  c09134:	1d29883a 	add	r20,r3,r20
  c09138:	a00b883a 	mov	r5,r20
  c0913c:	480f883a 	mov	r7,r9
  c09140:	9809883a 	mov	r4,r19
  c09144:	400d883a 	mov	r6,r8
  c09148:	0c02a1c0 	call	c02a1c <__divdf3>
  c0914c:	dfc00617 	ldw	ra,24(sp)
  c09150:	dd000517 	ldw	r20,20(sp)
  c09154:	dcc00417 	ldw	r19,16(sp)
  c09158:	dc800317 	ldw	r18,12(sp)
  c0915c:	dc400217 	ldw	r17,8(sp)
  c09160:	dec00704 	addi	sp,sp,28
  c09164:	f800283a 	ret
  c09168:	28d3c83a 	sub	r9,r5,r3
  c0916c:	003ff206 	br	c09138 <__ratio+0x78>

00c09170 <_mprec_log10>:
  c09170:	defffe04 	addi	sp,sp,-8
  c09174:	008005c4 	movi	r2,23
  c09178:	dc000015 	stw	r16,0(sp)
  c0917c:	dfc00115 	stw	ra,4(sp)
  c09180:	2021883a 	mov	r16,r4
  c09184:	11000c16 	blt	r2,r4,c091b8 <_mprec_log10+0x48>
  c09188:	200490fa 	slli	r2,r4,3
  c0918c:	00c03074 	movhi	r3,193
  c09190:	18c22b04 	addi	r3,r3,2220
  c09194:	10c5883a 	add	r2,r2,r3
  c09198:	12400117 	ldw	r9,4(r2)
  c0919c:	12000017 	ldw	r8,0(r2)
  c091a0:	4807883a 	mov	r3,r9
  c091a4:	4005883a 	mov	r2,r8
  c091a8:	dfc00117 	ldw	ra,4(sp)
  c091ac:	dc000017 	ldw	r16,0(sp)
  c091b0:	dec00204 	addi	sp,sp,8
  c091b4:	f800283a 	ret
  c091b8:	0011883a 	mov	r8,zero
  c091bc:	024ffc34 	movhi	r9,16368
  c091c0:	0005883a 	mov	r2,zero
  c091c4:	00d00934 	movhi	r3,16420
  c091c8:	480b883a 	mov	r5,r9
  c091cc:	4009883a 	mov	r4,r8
  c091d0:	180f883a 	mov	r7,r3
  c091d4:	100d883a 	mov	r6,r2
  c091d8:	0c0b6540 	call	c0b654 <__muldf3>
  c091dc:	843fffc4 	addi	r16,r16,-1
  c091e0:	1011883a 	mov	r8,r2
  c091e4:	1813883a 	mov	r9,r3
  c091e8:	803ff51e 	bne	r16,zero,c091c0 <_mprec_log10+0x50>
  c091ec:	4005883a 	mov	r2,r8
  c091f0:	4807883a 	mov	r3,r9
  c091f4:	dfc00117 	ldw	ra,4(sp)
  c091f8:	dc000017 	ldw	r16,0(sp)
  c091fc:	dec00204 	addi	sp,sp,8
  c09200:	f800283a 	ret

00c09204 <__copybits>:
  c09204:	297fffc4 	addi	r5,r5,-1
  c09208:	30800417 	ldw	r2,16(r6)
  c0920c:	280bd17a 	srai	r5,r5,5
  c09210:	31800504 	addi	r6,r6,20
  c09214:	1085883a 	add	r2,r2,r2
  c09218:	294b883a 	add	r5,r5,r5
  c0921c:	294b883a 	add	r5,r5,r5
  c09220:	1085883a 	add	r2,r2,r2
  c09224:	290b883a 	add	r5,r5,r4
  c09228:	3087883a 	add	r3,r6,r2
  c0922c:	29400104 	addi	r5,r5,4
  c09230:	30c0052e 	bgeu	r6,r3,c09248 <__copybits+0x44>
  c09234:	30800017 	ldw	r2,0(r6)
  c09238:	31800104 	addi	r6,r6,4
  c0923c:	20800015 	stw	r2,0(r4)
  c09240:	21000104 	addi	r4,r4,4
  c09244:	30fffb36 	bltu	r6,r3,c09234 <__copybits+0x30>
  c09248:	2140032e 	bgeu	r4,r5,c09258 <__copybits+0x54>
  c0924c:	20000015 	stw	zero,0(r4)
  c09250:	21000104 	addi	r4,r4,4
  c09254:	217ffd36 	bltu	r4,r5,c0924c <__copybits+0x48>
  c09258:	f800283a 	ret

00c0925c <__any_on>:
  c0925c:	20800417 	ldw	r2,16(r4)
  c09260:	2807d17a 	srai	r3,r5,5
  c09264:	21000504 	addi	r4,r4,20
  c09268:	10c00d0e 	bge	r2,r3,c092a0 <__any_on+0x44>
  c0926c:	1085883a 	add	r2,r2,r2
  c09270:	1085883a 	add	r2,r2,r2
  c09274:	208d883a 	add	r6,r4,r2
  c09278:	2180182e 	bgeu	r4,r6,c092dc <__any_on+0x80>
  c0927c:	30bfff17 	ldw	r2,-4(r6)
  c09280:	30ffff04 	addi	r3,r6,-4
  c09284:	1000041e 	bne	r2,zero,c09298 <__any_on+0x3c>
  c09288:	20c0142e 	bgeu	r4,r3,c092dc <__any_on+0x80>
  c0928c:	18ffff04 	addi	r3,r3,-4
  c09290:	18800017 	ldw	r2,0(r3)
  c09294:	103ffc26 	beq	r2,zero,c09288 <__any_on+0x2c>
  c09298:	00800044 	movi	r2,1
  c0929c:	f800283a 	ret
  c092a0:	18800a0e 	bge	r3,r2,c092cc <__any_on+0x70>
  c092a4:	294007cc 	andi	r5,r5,31
  c092a8:	28000826 	beq	r5,zero,c092cc <__any_on+0x70>
  c092ac:	18c5883a 	add	r2,r3,r3
  c092b0:	1085883a 	add	r2,r2,r2
  c092b4:	208d883a 	add	r6,r4,r2
  c092b8:	30c00017 	ldw	r3,0(r6)
  c092bc:	1944d83a 	srl	r2,r3,r5
  c092c0:	1144983a 	sll	r2,r2,r5
  c092c4:	18bff41e 	bne	r3,r2,c09298 <__any_on+0x3c>
  c092c8:	003feb06 	br	c09278 <__any_on+0x1c>
  c092cc:	18c5883a 	add	r2,r3,r3
  c092d0:	1085883a 	add	r2,r2,r2
  c092d4:	208d883a 	add	r6,r4,r2
  c092d8:	003fe706 	br	c09278 <__any_on+0x1c>
  c092dc:	0005883a 	mov	r2,zero
  c092e0:	f800283a 	ret

00c092e4 <_Balloc>:
  c092e4:	20c01317 	ldw	r3,76(r4)
  c092e8:	defffb04 	addi	sp,sp,-20
  c092ec:	dcc00315 	stw	r19,12(sp)
  c092f0:	dc800215 	stw	r18,8(sp)
  c092f4:	dfc00415 	stw	ra,16(sp)
  c092f8:	2825883a 	mov	r18,r5
  c092fc:	dc400115 	stw	r17,4(sp)
  c09300:	dc000015 	stw	r16,0(sp)
  c09304:	2027883a 	mov	r19,r4
  c09308:	01800404 	movi	r6,16
  c0930c:	01400104 	movi	r5,4
  c09310:	18001726 	beq	r3,zero,c09370 <_Balloc+0x8c>
  c09314:	01400044 	movi	r5,1
  c09318:	9485883a 	add	r2,r18,r18
  c0931c:	2ca2983a 	sll	r17,r5,r18
  c09320:	1085883a 	add	r2,r2,r2
  c09324:	10c7883a 	add	r3,r2,r3
  c09328:	1c000017 	ldw	r16,0(r3)
  c0932c:	8c4d883a 	add	r6,r17,r17
  c09330:	318d883a 	add	r6,r6,r6
  c09334:	9809883a 	mov	r4,r19
  c09338:	31800504 	addi	r6,r6,20
  c0933c:	80001226 	beq	r16,zero,c09388 <_Balloc+0xa4>
  c09340:	80800017 	ldw	r2,0(r16)
  c09344:	18800015 	stw	r2,0(r3)
  c09348:	80000415 	stw	zero,16(r16)
  c0934c:	80000315 	stw	zero,12(r16)
  c09350:	8005883a 	mov	r2,r16
  c09354:	dfc00417 	ldw	ra,16(sp)
  c09358:	dcc00317 	ldw	r19,12(sp)
  c0935c:	dc800217 	ldw	r18,8(sp)
  c09360:	dc400117 	ldw	r17,4(sp)
  c09364:	dc000017 	ldw	r16,0(sp)
  c09368:	dec00504 	addi	sp,sp,20
  c0936c:	f800283a 	ret
  c09370:	0c0a6ac0 	call	c0a6ac <_calloc_r>
  c09374:	1007883a 	mov	r3,r2
  c09378:	0021883a 	mov	r16,zero
  c0937c:	98801315 	stw	r2,76(r19)
  c09380:	103fe41e 	bne	r2,zero,c09314 <_Balloc+0x30>
  c09384:	003ff206 	br	c09350 <_Balloc+0x6c>
  c09388:	0c0a6ac0 	call	c0a6ac <_calloc_r>
  c0938c:	103ff026 	beq	r2,zero,c09350 <_Balloc+0x6c>
  c09390:	1021883a 	mov	r16,r2
  c09394:	14800115 	stw	r18,4(r2)
  c09398:	14400215 	stw	r17,8(r2)
  c0939c:	003fea06 	br	c09348 <_Balloc+0x64>

00c093a0 <__d2b>:
  c093a0:	defff504 	addi	sp,sp,-44
  c093a4:	dcc00515 	stw	r19,20(sp)
  c093a8:	04c00044 	movi	r19,1
  c093ac:	dc000215 	stw	r16,8(sp)
  c093b0:	2821883a 	mov	r16,r5
  c093b4:	980b883a 	mov	r5,r19
  c093b8:	ddc00915 	stw	r23,36(sp)
  c093bc:	dd800815 	stw	r22,32(sp)
  c093c0:	dd400715 	stw	r21,28(sp)
  c093c4:	dd000615 	stw	r20,24(sp)
  c093c8:	dc800415 	stw	r18,16(sp)
  c093cc:	dc400315 	stw	r17,12(sp)
  c093d0:	dfc00a15 	stw	ra,40(sp)
  c093d4:	3023883a 	mov	r17,r6
  c093d8:	382d883a 	mov	r22,r7
  c093dc:	ddc00b17 	ldw	r23,44(sp)
  c093e0:	0c092e40 	call	c092e4 <_Balloc>
  c093e4:	1025883a 	mov	r18,r2
  c093e8:	00a00034 	movhi	r2,32768
  c093ec:	10bfffc4 	addi	r2,r2,-1
  c093f0:	8888703a 	and	r4,r17,r2
  c093f4:	202ad53a 	srli	r21,r4,20
  c093f8:	00800434 	movhi	r2,16
  c093fc:	10bfffc4 	addi	r2,r2,-1
  c09400:	8886703a 	and	r3,r17,r2
  c09404:	a829003a 	cmpeq	r20,r21,zero
  c09408:	800b883a 	mov	r5,r16
  c0940c:	d8c00115 	stw	r3,4(sp)
  c09410:	94000504 	addi	r16,r18,20
  c09414:	a000021e 	bne	r20,zero,c09420 <__d2b+0x80>
  c09418:	18c00434 	orhi	r3,r3,16
  c0941c:	d8c00115 	stw	r3,4(sp)
  c09420:	28002726 	beq	r5,zero,c094c0 <__d2b+0x120>
  c09424:	d809883a 	mov	r4,sp
  c09428:	d9400015 	stw	r5,0(sp)
  c0942c:	0c08dfc0 	call	c08dfc <__lo0bits>
  c09430:	100d883a 	mov	r6,r2
  c09434:	10003526 	beq	r2,zero,c0950c <__d2b+0x16c>
  c09438:	d8c00117 	ldw	r3,4(sp)
  c0943c:	00800804 	movi	r2,32
  c09440:	1185c83a 	sub	r2,r2,r6
  c09444:	d9000017 	ldw	r4,0(sp)
  c09448:	1886983a 	sll	r3,r3,r2
  c0944c:	1906b03a 	or	r3,r3,r4
  c09450:	90c00515 	stw	r3,20(r18)
  c09454:	d8c00117 	ldw	r3,4(sp)
  c09458:	1986d83a 	srl	r3,r3,r6
  c0945c:	d8c00115 	stw	r3,4(sp)
  c09460:	180b003a 	cmpeq	r5,r3,zero
  c09464:	00800084 	movi	r2,2
  c09468:	114bc83a 	sub	r5,r2,r5
  c0946c:	80c00115 	stw	r3,4(r16)
  c09470:	91400415 	stw	r5,16(r18)
  c09474:	a0001a1e 	bne	r20,zero,c094e0 <__d2b+0x140>
  c09478:	3545883a 	add	r2,r6,r21
  c0947c:	10bef344 	addi	r2,r2,-1075
  c09480:	00c00d44 	movi	r3,53
  c09484:	b0800015 	stw	r2,0(r22)
  c09488:	1987c83a 	sub	r3,r3,r6
  c0948c:	b8c00015 	stw	r3,0(r23)
  c09490:	9005883a 	mov	r2,r18
  c09494:	dfc00a17 	ldw	ra,40(sp)
  c09498:	ddc00917 	ldw	r23,36(sp)
  c0949c:	dd800817 	ldw	r22,32(sp)
  c094a0:	dd400717 	ldw	r21,28(sp)
  c094a4:	dd000617 	ldw	r20,24(sp)
  c094a8:	dcc00517 	ldw	r19,20(sp)
  c094ac:	dc800417 	ldw	r18,16(sp)
  c094b0:	dc400317 	ldw	r17,12(sp)
  c094b4:	dc000217 	ldw	r16,8(sp)
  c094b8:	dec00b04 	addi	sp,sp,44
  c094bc:	f800283a 	ret
  c094c0:	d9000104 	addi	r4,sp,4
  c094c4:	0c08dfc0 	call	c08dfc <__lo0bits>
  c094c8:	11800804 	addi	r6,r2,32
  c094cc:	d8800117 	ldw	r2,4(sp)
  c094d0:	94c00415 	stw	r19,16(r18)
  c094d4:	980b883a 	mov	r5,r19
  c094d8:	90800515 	stw	r2,20(r18)
  c094dc:	a03fe626 	beq	r20,zero,c09478 <__d2b+0xd8>
  c094e0:	2945883a 	add	r2,r5,r5
  c094e4:	1085883a 	add	r2,r2,r2
  c094e8:	1405883a 	add	r2,r2,r16
  c094ec:	113fff17 	ldw	r4,-4(r2)
  c094f0:	30fef384 	addi	r3,r6,-1074
  c094f4:	2820917a 	slli	r16,r5,5
  c094f8:	b0c00015 	stw	r3,0(r22)
  c094fc:	0c08d8c0 	call	c08d8c <__hi0bits>
  c09500:	80a1c83a 	sub	r16,r16,r2
  c09504:	bc000015 	stw	r16,0(r23)
  c09508:	003fe106 	br	c09490 <__d2b+0xf0>
  c0950c:	d8800017 	ldw	r2,0(sp)
  c09510:	90800515 	stw	r2,20(r18)
  c09514:	d8c00117 	ldw	r3,4(sp)
  c09518:	003fd106 	br	c09460 <__d2b+0xc0>

00c0951c <__mdiff>:
  c0951c:	defffb04 	addi	sp,sp,-20
  c09520:	dc000015 	stw	r16,0(sp)
  c09524:	2821883a 	mov	r16,r5
  c09528:	dc800215 	stw	r18,8(sp)
  c0952c:	300b883a 	mov	r5,r6
  c09530:	2025883a 	mov	r18,r4
  c09534:	8009883a 	mov	r4,r16
  c09538:	dc400115 	stw	r17,4(sp)
  c0953c:	dfc00415 	stw	ra,16(sp)
  c09540:	dcc00315 	stw	r19,12(sp)
  c09544:	3023883a 	mov	r17,r6
  c09548:	0c08ec00 	call	c08ec0 <__mcmp>
  c0954c:	10004226 	beq	r2,zero,c09658 <__mdiff+0x13c>
  c09550:	10005016 	blt	r2,zero,c09694 <__mdiff+0x178>
  c09554:	0027883a 	mov	r19,zero
  c09558:	81400117 	ldw	r5,4(r16)
  c0955c:	9009883a 	mov	r4,r18
  c09560:	0c092e40 	call	c092e4 <_Balloc>
  c09564:	1019883a 	mov	r12,r2
  c09568:	82800417 	ldw	r10,16(r16)
  c0956c:	88800417 	ldw	r2,16(r17)
  c09570:	81800504 	addi	r6,r16,20
  c09574:	5287883a 	add	r3,r10,r10
  c09578:	1085883a 	add	r2,r2,r2
  c0957c:	18c7883a 	add	r3,r3,r3
  c09580:	1085883a 	add	r2,r2,r2
  c09584:	8a000504 	addi	r8,r17,20
  c09588:	64c00315 	stw	r19,12(r12)
  c0958c:	30db883a 	add	r13,r6,r3
  c09590:	4097883a 	add	r11,r8,r2
  c09594:	61c00504 	addi	r7,r12,20
  c09598:	0013883a 	mov	r9,zero
  c0959c:	31000017 	ldw	r4,0(r6)
  c095a0:	41400017 	ldw	r5,0(r8)
  c095a4:	42000104 	addi	r8,r8,4
  c095a8:	20bfffcc 	andi	r2,r4,65535
  c095ac:	28ffffcc 	andi	r3,r5,65535
  c095b0:	10c5c83a 	sub	r2,r2,r3
  c095b4:	1245883a 	add	r2,r2,r9
  c095b8:	2008d43a 	srli	r4,r4,16
  c095bc:	280ad43a 	srli	r5,r5,16
  c095c0:	1007d43a 	srai	r3,r2,16
  c095c4:	3880000d 	sth	r2,0(r7)
  c095c8:	2149c83a 	sub	r4,r4,r5
  c095cc:	20c9883a 	add	r4,r4,r3
  c095d0:	3900008d 	sth	r4,2(r7)
  c095d4:	31800104 	addi	r6,r6,4
  c095d8:	39c00104 	addi	r7,r7,4
  c095dc:	2013d43a 	srai	r9,r4,16
  c095e0:	42ffee36 	bltu	r8,r11,c0959c <__mdiff+0x80>
  c095e4:	33400c2e 	bgeu	r6,r13,c09618 <__mdiff+0xfc>
  c095e8:	30800017 	ldw	r2,0(r6)
  c095ec:	31800104 	addi	r6,r6,4
  c095f0:	10ffffcc 	andi	r3,r2,65535
  c095f4:	1a47883a 	add	r3,r3,r9
  c095f8:	1004d43a 	srli	r2,r2,16
  c095fc:	1809d43a 	srai	r4,r3,16
  c09600:	38c0000d 	sth	r3,0(r7)
  c09604:	1105883a 	add	r2,r2,r4
  c09608:	3880008d 	sth	r2,2(r7)
  c0960c:	1013d43a 	srai	r9,r2,16
  c09610:	39c00104 	addi	r7,r7,4
  c09614:	337ff436 	bltu	r6,r13,c095e8 <__mdiff+0xcc>
  c09618:	38bfff17 	ldw	r2,-4(r7)
  c0961c:	38ffff04 	addi	r3,r7,-4
  c09620:	1000041e 	bne	r2,zero,c09634 <__mdiff+0x118>
  c09624:	18ffff04 	addi	r3,r3,-4
  c09628:	18800017 	ldw	r2,0(r3)
  c0962c:	52bfffc4 	addi	r10,r10,-1
  c09630:	103ffc26 	beq	r2,zero,c09624 <__mdiff+0x108>
  c09634:	6005883a 	mov	r2,r12
  c09638:	62800415 	stw	r10,16(r12)
  c0963c:	dfc00417 	ldw	ra,16(sp)
  c09640:	dcc00317 	ldw	r19,12(sp)
  c09644:	dc800217 	ldw	r18,8(sp)
  c09648:	dc400117 	ldw	r17,4(sp)
  c0964c:	dc000017 	ldw	r16,0(sp)
  c09650:	dec00504 	addi	sp,sp,20
  c09654:	f800283a 	ret
  c09658:	9009883a 	mov	r4,r18
  c0965c:	000b883a 	mov	r5,zero
  c09660:	0c092e40 	call	c092e4 <_Balloc>
  c09664:	1019883a 	mov	r12,r2
  c09668:	00800044 	movi	r2,1
  c0966c:	60800415 	stw	r2,16(r12)
  c09670:	6005883a 	mov	r2,r12
  c09674:	60000515 	stw	zero,20(r12)
  c09678:	dfc00417 	ldw	ra,16(sp)
  c0967c:	dcc00317 	ldw	r19,12(sp)
  c09680:	dc800217 	ldw	r18,8(sp)
  c09684:	dc400117 	ldw	r17,4(sp)
  c09688:	dc000017 	ldw	r16,0(sp)
  c0968c:	dec00504 	addi	sp,sp,20
  c09690:	f800283a 	ret
  c09694:	880d883a 	mov	r6,r17
  c09698:	04c00044 	movi	r19,1
  c0969c:	8023883a 	mov	r17,r16
  c096a0:	3021883a 	mov	r16,r6
  c096a4:	003fac06 	br	c09558 <__mdiff+0x3c>

00c096a8 <__lshift>:
  c096a8:	defff904 	addi	sp,sp,-28
  c096ac:	28800417 	ldw	r2,16(r5)
  c096b0:	dc000015 	stw	r16,0(sp)
  c096b4:	3021d17a 	srai	r16,r6,5
  c096b8:	28c00217 	ldw	r3,8(r5)
  c096bc:	10800044 	addi	r2,r2,1
  c096c0:	dc400115 	stw	r17,4(sp)
  c096c4:	80a3883a 	add	r17,r16,r2
  c096c8:	dd400515 	stw	r21,20(sp)
  c096cc:	dd000415 	stw	r20,16(sp)
  c096d0:	dc800215 	stw	r18,8(sp)
  c096d4:	dfc00615 	stw	ra,24(sp)
  c096d8:	2825883a 	mov	r18,r5
  c096dc:	dcc00315 	stw	r19,12(sp)
  c096e0:	3029883a 	mov	r20,r6
  c096e4:	202b883a 	mov	r21,r4
  c096e8:	29400117 	ldw	r5,4(r5)
  c096ec:	1c40030e 	bge	r3,r17,c096fc <__lshift+0x54>
  c096f0:	18c7883a 	add	r3,r3,r3
  c096f4:	29400044 	addi	r5,r5,1
  c096f8:	1c7ffd16 	blt	r3,r17,c096f0 <__lshift+0x48>
  c096fc:	a809883a 	mov	r4,r21
  c09700:	0c092e40 	call	c092e4 <_Balloc>
  c09704:	1027883a 	mov	r19,r2
  c09708:	11400504 	addi	r5,r2,20
  c0970c:	0400090e 	bge	zero,r16,c09734 <__lshift+0x8c>
  c09710:	2805883a 	mov	r2,r5
  c09714:	0007883a 	mov	r3,zero
  c09718:	18c00044 	addi	r3,r3,1
  c0971c:	10000015 	stw	zero,0(r2)
  c09720:	10800104 	addi	r2,r2,4
  c09724:	80fffc1e 	bne	r16,r3,c09718 <__lshift+0x70>
  c09728:	8405883a 	add	r2,r16,r16
  c0972c:	1085883a 	add	r2,r2,r2
  c09730:	288b883a 	add	r5,r5,r2
  c09734:	90800417 	ldw	r2,16(r18)
  c09738:	91000504 	addi	r4,r18,20
  c0973c:	a18007cc 	andi	r6,r20,31
  c09740:	1085883a 	add	r2,r2,r2
  c09744:	1085883a 	add	r2,r2,r2
  c09748:	208f883a 	add	r7,r4,r2
  c0974c:	30001e26 	beq	r6,zero,c097c8 <__lshift+0x120>
  c09750:	00800804 	movi	r2,32
  c09754:	1191c83a 	sub	r8,r2,r6
  c09758:	0007883a 	mov	r3,zero
  c0975c:	20800017 	ldw	r2,0(r4)
  c09760:	1184983a 	sll	r2,r2,r6
  c09764:	1884b03a 	or	r2,r3,r2
  c09768:	28800015 	stw	r2,0(r5)
  c0976c:	20c00017 	ldw	r3,0(r4)
  c09770:	21000104 	addi	r4,r4,4
  c09774:	29400104 	addi	r5,r5,4
  c09778:	1a06d83a 	srl	r3,r3,r8
  c0977c:	21fff736 	bltu	r4,r7,c0975c <__lshift+0xb4>
  c09780:	28c00015 	stw	r3,0(r5)
  c09784:	18000126 	beq	r3,zero,c0978c <__lshift+0xe4>
  c09788:	8c400044 	addi	r17,r17,1
  c0978c:	88bfffc4 	addi	r2,r17,-1
  c09790:	98800415 	stw	r2,16(r19)
  c09794:	a809883a 	mov	r4,r21
  c09798:	900b883a 	mov	r5,r18
  c0979c:	0c08d640 	call	c08d64 <_Bfree>
  c097a0:	9805883a 	mov	r2,r19
  c097a4:	dfc00617 	ldw	ra,24(sp)
  c097a8:	dd400517 	ldw	r21,20(sp)
  c097ac:	dd000417 	ldw	r20,16(sp)
  c097b0:	dcc00317 	ldw	r19,12(sp)
  c097b4:	dc800217 	ldw	r18,8(sp)
  c097b8:	dc400117 	ldw	r17,4(sp)
  c097bc:	dc000017 	ldw	r16,0(sp)
  c097c0:	dec00704 	addi	sp,sp,28
  c097c4:	f800283a 	ret
  c097c8:	20800017 	ldw	r2,0(r4)
  c097cc:	21000104 	addi	r4,r4,4
  c097d0:	28800015 	stw	r2,0(r5)
  c097d4:	29400104 	addi	r5,r5,4
  c097d8:	21ffec2e 	bgeu	r4,r7,c0978c <__lshift+0xe4>
  c097dc:	20800017 	ldw	r2,0(r4)
  c097e0:	21000104 	addi	r4,r4,4
  c097e4:	28800015 	stw	r2,0(r5)
  c097e8:	29400104 	addi	r5,r5,4
  c097ec:	21fff636 	bltu	r4,r7,c097c8 <__lshift+0x120>
  c097f0:	003fe606 	br	c0978c <__lshift+0xe4>

00c097f4 <__multiply>:
  c097f4:	defff904 	addi	sp,sp,-28
  c097f8:	dcc00315 	stw	r19,12(sp)
  c097fc:	dc800215 	stw	r18,8(sp)
  c09800:	2cc00417 	ldw	r19,16(r5)
  c09804:	34800417 	ldw	r18,16(r6)
  c09808:	dd000415 	stw	r20,16(sp)
  c0980c:	dc400115 	stw	r17,4(sp)
  c09810:	dfc00615 	stw	ra,24(sp)
  c09814:	dd400515 	stw	r21,20(sp)
  c09818:	dc000015 	stw	r16,0(sp)
  c0981c:	2823883a 	mov	r17,r5
  c09820:	3029883a 	mov	r20,r6
  c09824:	9c80040e 	bge	r19,r18,c09838 <__multiply+0x44>
  c09828:	9027883a 	mov	r19,r18
  c0982c:	2c800417 	ldw	r18,16(r5)
  c09830:	2829883a 	mov	r20,r5
  c09834:	3023883a 	mov	r17,r6
  c09838:	88800217 	ldw	r2,8(r17)
  c0983c:	9ca1883a 	add	r16,r19,r18
  c09840:	89400117 	ldw	r5,4(r17)
  c09844:	1400010e 	bge	r2,r16,c0984c <__multiply+0x58>
  c09848:	29400044 	addi	r5,r5,1
  c0984c:	0c092e40 	call	c092e4 <_Balloc>
  c09850:	102b883a 	mov	r21,r2
  c09854:	8405883a 	add	r2,r16,r16
  c09858:	1085883a 	add	r2,r2,r2
  c0985c:	a9000504 	addi	r4,r21,20
  c09860:	209d883a 	add	r14,r4,r2
  c09864:	2380042e 	bgeu	r4,r14,c09878 <__multiply+0x84>
  c09868:	2005883a 	mov	r2,r4
  c0986c:	10000015 	stw	zero,0(r2)
  c09870:	10800104 	addi	r2,r2,4
  c09874:	13bffd36 	bltu	r2,r14,c0986c <__multiply+0x78>
  c09878:	9485883a 	add	r2,r18,r18
  c0987c:	9cc7883a 	add	r3,r19,r19
  c09880:	a1800504 	addi	r6,r20,20
  c09884:	1085883a 	add	r2,r2,r2
  c09888:	8b400504 	addi	r13,r17,20
  c0988c:	18c7883a 	add	r3,r3,r3
  c09890:	309f883a 	add	r15,r6,r2
  c09894:	68d7883a 	add	r11,r13,r3
  c09898:	33c03b2e 	bgeu	r6,r15,c09988 <__multiply+0x194>
  c0989c:	2019883a 	mov	r12,r4
  c098a0:	30800017 	ldw	r2,0(r6)
  c098a4:	127fffcc 	andi	r9,r2,65535
  c098a8:	48001826 	beq	r9,zero,c0990c <__multiply+0x118>
  c098ac:	6811883a 	mov	r8,r13
  c098b0:	600f883a 	mov	r7,r12
  c098b4:	0015883a 	mov	r10,zero
  c098b8:	40c00017 	ldw	r3,0(r8)
  c098bc:	39400017 	ldw	r5,0(r7)
  c098c0:	42000104 	addi	r8,r8,4
  c098c4:	193fffcc 	andi	r4,r3,65535
  c098c8:	4909383a 	mul	r4,r9,r4
  c098cc:	1806d43a 	srli	r3,r3,16
  c098d0:	28bfffcc 	andi	r2,r5,65535
  c098d4:	5085883a 	add	r2,r10,r2
  c098d8:	2089883a 	add	r4,r4,r2
  c098dc:	48c7383a 	mul	r3,r9,r3
  c098e0:	280ad43a 	srli	r5,r5,16
  c098e4:	2004d43a 	srli	r2,r4,16
  c098e8:	3900000d 	sth	r4,0(r7)
  c098ec:	1947883a 	add	r3,r3,r5
  c098f0:	10c5883a 	add	r2,r2,r3
  c098f4:	3880008d 	sth	r2,2(r7)
  c098f8:	1014d43a 	srli	r10,r2,16
  c098fc:	39c00104 	addi	r7,r7,4
  c09900:	42ffed36 	bltu	r8,r11,c098b8 <__multiply+0xc4>
  c09904:	3a800015 	stw	r10,0(r7)
  c09908:	30800017 	ldw	r2,0(r6)
  c0990c:	1012d43a 	srli	r9,r2,16
  c09910:	48001926 	beq	r9,zero,c09978 <__multiply+0x184>
  c09914:	60800017 	ldw	r2,0(r12)
  c09918:	6811883a 	mov	r8,r13
  c0991c:	600f883a 	mov	r7,r12
  c09920:	0015883a 	mov	r10,zero
  c09924:	100b883a 	mov	r5,r2
  c09928:	41000017 	ldw	r4,0(r8)
  c0992c:	2806d43a 	srli	r3,r5,16
  c09930:	3880000d 	sth	r2,0(r7)
  c09934:	20bfffcc 	andi	r2,r4,65535
  c09938:	4885383a 	mul	r2,r9,r2
  c0993c:	50c7883a 	add	r3,r10,r3
  c09940:	2008d43a 	srli	r4,r4,16
  c09944:	10c5883a 	add	r2,r2,r3
  c09948:	3880008d 	sth	r2,2(r7)
  c0994c:	39c00104 	addi	r7,r7,4
  c09950:	39400017 	ldw	r5,0(r7)
  c09954:	4909383a 	mul	r4,r9,r4
  c09958:	1004d43a 	srli	r2,r2,16
  c0995c:	28ffffcc 	andi	r3,r5,65535
  c09960:	20c9883a 	add	r4,r4,r3
  c09964:	1105883a 	add	r2,r2,r4
  c09968:	42000104 	addi	r8,r8,4
  c0996c:	1014d43a 	srli	r10,r2,16
  c09970:	42ffed36 	bltu	r8,r11,c09928 <__multiply+0x134>
  c09974:	38800015 	stw	r2,0(r7)
  c09978:	31800104 	addi	r6,r6,4
  c0997c:	33c0022e 	bgeu	r6,r15,c09988 <__multiply+0x194>
  c09980:	63000104 	addi	r12,r12,4
  c09984:	003fc606 	br	c098a0 <__multiply+0xac>
  c09988:	0400090e 	bge	zero,r16,c099b0 <__multiply+0x1bc>
  c0998c:	70bfff17 	ldw	r2,-4(r14)
  c09990:	70ffff04 	addi	r3,r14,-4
  c09994:	10000326 	beq	r2,zero,c099a4 <__multiply+0x1b0>
  c09998:	00000506 	br	c099b0 <__multiply+0x1bc>
  c0999c:	18800017 	ldw	r2,0(r3)
  c099a0:	1000031e 	bne	r2,zero,c099b0 <__multiply+0x1bc>
  c099a4:	843fffc4 	addi	r16,r16,-1
  c099a8:	18ffff04 	addi	r3,r3,-4
  c099ac:	803ffb1e 	bne	r16,zero,c0999c <__multiply+0x1a8>
  c099b0:	a805883a 	mov	r2,r21
  c099b4:	ac000415 	stw	r16,16(r21)
  c099b8:	dfc00617 	ldw	ra,24(sp)
  c099bc:	dd400517 	ldw	r21,20(sp)
  c099c0:	dd000417 	ldw	r20,16(sp)
  c099c4:	dcc00317 	ldw	r19,12(sp)
  c099c8:	dc800217 	ldw	r18,8(sp)
  c099cc:	dc400117 	ldw	r17,4(sp)
  c099d0:	dc000017 	ldw	r16,0(sp)
  c099d4:	dec00704 	addi	sp,sp,28
  c099d8:	f800283a 	ret

00c099dc <__i2b>:
  c099dc:	defffd04 	addi	sp,sp,-12
  c099e0:	dc000015 	stw	r16,0(sp)
  c099e4:	04000044 	movi	r16,1
  c099e8:	dc800115 	stw	r18,4(sp)
  c099ec:	2825883a 	mov	r18,r5
  c099f0:	800b883a 	mov	r5,r16
  c099f4:	dfc00215 	stw	ra,8(sp)
  c099f8:	0c092e40 	call	c092e4 <_Balloc>
  c099fc:	14000415 	stw	r16,16(r2)
  c09a00:	14800515 	stw	r18,20(r2)
  c09a04:	dfc00217 	ldw	ra,8(sp)
  c09a08:	dc800117 	ldw	r18,4(sp)
  c09a0c:	dc000017 	ldw	r16,0(sp)
  c09a10:	dec00304 	addi	sp,sp,12
  c09a14:	f800283a 	ret

00c09a18 <__multadd>:
  c09a18:	defffa04 	addi	sp,sp,-24
  c09a1c:	dc800215 	stw	r18,8(sp)
  c09a20:	2c800417 	ldw	r18,16(r5)
  c09a24:	dd000415 	stw	r20,16(sp)
  c09a28:	dcc00315 	stw	r19,12(sp)
  c09a2c:	dc000015 	stw	r16,0(sp)
  c09a30:	dfc00515 	stw	ra,20(sp)
  c09a34:	3821883a 	mov	r16,r7
  c09a38:	dc400115 	stw	r17,4(sp)
  c09a3c:	2827883a 	mov	r19,r5
  c09a40:	2029883a 	mov	r20,r4
  c09a44:	2a000504 	addi	r8,r5,20
  c09a48:	000f883a 	mov	r7,zero
  c09a4c:	40800017 	ldw	r2,0(r8)
  c09a50:	39c00044 	addi	r7,r7,1
  c09a54:	10ffffcc 	andi	r3,r2,65535
  c09a58:	1987383a 	mul	r3,r3,r6
  c09a5c:	1004d43a 	srli	r2,r2,16
  c09a60:	1c07883a 	add	r3,r3,r16
  c09a64:	180ad43a 	srli	r5,r3,16
  c09a68:	1185383a 	mul	r2,r2,r6
  c09a6c:	18ffffcc 	andi	r3,r3,65535
  c09a70:	1145883a 	add	r2,r2,r5
  c09a74:	1008943a 	slli	r4,r2,16
  c09a78:	1020d43a 	srli	r16,r2,16
  c09a7c:	20c9883a 	add	r4,r4,r3
  c09a80:	41000015 	stw	r4,0(r8)
  c09a84:	42000104 	addi	r8,r8,4
  c09a88:	3cbff016 	blt	r7,r18,c09a4c <__multadd+0x34>
  c09a8c:	80000826 	beq	r16,zero,c09ab0 <__multadd+0x98>
  c09a90:	98800217 	ldw	r2,8(r19)
  c09a94:	90800f0e 	bge	r18,r2,c09ad4 <__multadd+0xbc>
  c09a98:	9485883a 	add	r2,r18,r18
  c09a9c:	1085883a 	add	r2,r2,r2
  c09aa0:	14c5883a 	add	r2,r2,r19
  c09aa4:	90c00044 	addi	r3,r18,1
  c09aa8:	14000515 	stw	r16,20(r2)
  c09aac:	98c00415 	stw	r3,16(r19)
  c09ab0:	9805883a 	mov	r2,r19
  c09ab4:	dfc00517 	ldw	ra,20(sp)
  c09ab8:	dd000417 	ldw	r20,16(sp)
  c09abc:	dcc00317 	ldw	r19,12(sp)
  c09ac0:	dc800217 	ldw	r18,8(sp)
  c09ac4:	dc400117 	ldw	r17,4(sp)
  c09ac8:	dc000017 	ldw	r16,0(sp)
  c09acc:	dec00604 	addi	sp,sp,24
  c09ad0:	f800283a 	ret
  c09ad4:	99400117 	ldw	r5,4(r19)
  c09ad8:	a009883a 	mov	r4,r20
  c09adc:	29400044 	addi	r5,r5,1
  c09ae0:	0c092e40 	call	c092e4 <_Balloc>
  c09ae4:	99800417 	ldw	r6,16(r19)
  c09ae8:	99400304 	addi	r5,r19,12
  c09aec:	11000304 	addi	r4,r2,12
  c09af0:	318d883a 	add	r6,r6,r6
  c09af4:	318d883a 	add	r6,r6,r6
  c09af8:	31800204 	addi	r6,r6,8
  c09afc:	1023883a 	mov	r17,r2
  c09b00:	0c08b4c0 	call	c08b4c <memcpy>
  c09b04:	980b883a 	mov	r5,r19
  c09b08:	a009883a 	mov	r4,r20
  c09b0c:	0c08d640 	call	c08d64 <_Bfree>
  c09b10:	8827883a 	mov	r19,r17
  c09b14:	003fe006 	br	c09a98 <__multadd+0x80>

00c09b18 <__pow5mult>:
  c09b18:	defffa04 	addi	sp,sp,-24
  c09b1c:	308000cc 	andi	r2,r6,3
  c09b20:	dd000415 	stw	r20,16(sp)
  c09b24:	dcc00315 	stw	r19,12(sp)
  c09b28:	dc000015 	stw	r16,0(sp)
  c09b2c:	dfc00515 	stw	ra,20(sp)
  c09b30:	dc800215 	stw	r18,8(sp)
  c09b34:	dc400115 	stw	r17,4(sp)
  c09b38:	3021883a 	mov	r16,r6
  c09b3c:	2027883a 	mov	r19,r4
  c09b40:	2829883a 	mov	r20,r5
  c09b44:	10002b1e 	bne	r2,zero,c09bf4 <__pow5mult+0xdc>
  c09b48:	8025d0ba 	srai	r18,r16,2
  c09b4c:	90001b26 	beq	r18,zero,c09bbc <__pow5mult+0xa4>
  c09b50:	9c001217 	ldw	r16,72(r19)
  c09b54:	8000081e 	bne	r16,zero,c09b78 <__pow5mult+0x60>
  c09b58:	00003006 	br	c09c1c <__pow5mult+0x104>
  c09b5c:	800b883a 	mov	r5,r16
  c09b60:	800d883a 	mov	r6,r16
  c09b64:	9809883a 	mov	r4,r19
  c09b68:	90001426 	beq	r18,zero,c09bbc <__pow5mult+0xa4>
  c09b6c:	80800017 	ldw	r2,0(r16)
  c09b70:	10001b26 	beq	r2,zero,c09be0 <__pow5mult+0xc8>
  c09b74:	1021883a 	mov	r16,r2
  c09b78:	9080004c 	andi	r2,r18,1
  c09b7c:	1005003a 	cmpeq	r2,r2,zero
  c09b80:	9025d07a 	srai	r18,r18,1
  c09b84:	800d883a 	mov	r6,r16
  c09b88:	9809883a 	mov	r4,r19
  c09b8c:	a00b883a 	mov	r5,r20
  c09b90:	103ff21e 	bne	r2,zero,c09b5c <__pow5mult+0x44>
  c09b94:	0c097f40 	call	c097f4 <__multiply>
  c09b98:	a00b883a 	mov	r5,r20
  c09b9c:	9809883a 	mov	r4,r19
  c09ba0:	1023883a 	mov	r17,r2
  c09ba4:	0c08d640 	call	c08d64 <_Bfree>
  c09ba8:	8829883a 	mov	r20,r17
  c09bac:	800b883a 	mov	r5,r16
  c09bb0:	800d883a 	mov	r6,r16
  c09bb4:	9809883a 	mov	r4,r19
  c09bb8:	903fec1e 	bne	r18,zero,c09b6c <__pow5mult+0x54>
  c09bbc:	a005883a 	mov	r2,r20
  c09bc0:	dfc00517 	ldw	ra,20(sp)
  c09bc4:	dd000417 	ldw	r20,16(sp)
  c09bc8:	dcc00317 	ldw	r19,12(sp)
  c09bcc:	dc800217 	ldw	r18,8(sp)
  c09bd0:	dc400117 	ldw	r17,4(sp)
  c09bd4:	dc000017 	ldw	r16,0(sp)
  c09bd8:	dec00604 	addi	sp,sp,24
  c09bdc:	f800283a 	ret
  c09be0:	0c097f40 	call	c097f4 <__multiply>
  c09be4:	80800015 	stw	r2,0(r16)
  c09be8:	1021883a 	mov	r16,r2
  c09bec:	10000015 	stw	zero,0(r2)
  c09bf0:	003fe106 	br	c09b78 <__pow5mult+0x60>
  c09bf4:	1085883a 	add	r2,r2,r2
  c09bf8:	00c03074 	movhi	r3,193
  c09bfc:	18c27104 	addi	r3,r3,2500
  c09c00:	1085883a 	add	r2,r2,r2
  c09c04:	10c5883a 	add	r2,r2,r3
  c09c08:	11bfff17 	ldw	r6,-4(r2)
  c09c0c:	000f883a 	mov	r7,zero
  c09c10:	0c09a180 	call	c09a18 <__multadd>
  c09c14:	1029883a 	mov	r20,r2
  c09c18:	003fcb06 	br	c09b48 <__pow5mult+0x30>
  c09c1c:	9809883a 	mov	r4,r19
  c09c20:	01409c44 	movi	r5,625
  c09c24:	0c099dc0 	call	c099dc <__i2b>
  c09c28:	98801215 	stw	r2,72(r19)
  c09c2c:	1021883a 	mov	r16,r2
  c09c30:	10000015 	stw	zero,0(r2)
  c09c34:	003fd006 	br	c09b78 <__pow5mult+0x60>

00c09c38 <__s2b>:
  c09c38:	defff904 	addi	sp,sp,-28
  c09c3c:	dcc00315 	stw	r19,12(sp)
  c09c40:	dc800215 	stw	r18,8(sp)
  c09c44:	2827883a 	mov	r19,r5
  c09c48:	2025883a 	mov	r18,r4
  c09c4c:	01400244 	movi	r5,9
  c09c50:	39000204 	addi	r4,r7,8
  c09c54:	dd000415 	stw	r20,16(sp)
  c09c58:	dc400115 	stw	r17,4(sp)
  c09c5c:	dfc00615 	stw	ra,24(sp)
  c09c60:	dd400515 	stw	r21,20(sp)
  c09c64:	dc000015 	stw	r16,0(sp)
  c09c68:	3829883a 	mov	r20,r7
  c09c6c:	3023883a 	mov	r17,r6
  c09c70:	0c0c0180 	call	c0c018 <__divsi3>
  c09c74:	00c00044 	movi	r3,1
  c09c78:	1880350e 	bge	r3,r2,c09d50 <__s2b+0x118>
  c09c7c:	000b883a 	mov	r5,zero
  c09c80:	18c7883a 	add	r3,r3,r3
  c09c84:	29400044 	addi	r5,r5,1
  c09c88:	18bffd16 	blt	r3,r2,c09c80 <__s2b+0x48>
  c09c8c:	9009883a 	mov	r4,r18
  c09c90:	0c092e40 	call	c092e4 <_Balloc>
  c09c94:	1011883a 	mov	r8,r2
  c09c98:	d8800717 	ldw	r2,28(sp)
  c09c9c:	00c00044 	movi	r3,1
  c09ca0:	01800244 	movi	r6,9
  c09ca4:	40800515 	stw	r2,20(r8)
  c09ca8:	40c00415 	stw	r3,16(r8)
  c09cac:	3440260e 	bge	r6,r17,c09d48 <__s2b+0x110>
  c09cb0:	3021883a 	mov	r16,r6
  c09cb4:	99ab883a 	add	r21,r19,r6
  c09cb8:	9c05883a 	add	r2,r19,r16
  c09cbc:	11c00007 	ldb	r7,0(r2)
  c09cc0:	400b883a 	mov	r5,r8
  c09cc4:	9009883a 	mov	r4,r18
  c09cc8:	39fff404 	addi	r7,r7,-48
  c09ccc:	01800284 	movi	r6,10
  c09cd0:	0c09a180 	call	c09a18 <__multadd>
  c09cd4:	84000044 	addi	r16,r16,1
  c09cd8:	1011883a 	mov	r8,r2
  c09cdc:	8c3ff61e 	bne	r17,r16,c09cb8 <__s2b+0x80>
  c09ce0:	ac45883a 	add	r2,r21,r17
  c09ce4:	117ffe04 	addi	r5,r2,-8
  c09ce8:	880d883a 	mov	r6,r17
  c09cec:	35000c0e 	bge	r6,r20,c09d20 <__s2b+0xe8>
  c09cf0:	a185c83a 	sub	r2,r20,r6
  c09cf4:	2821883a 	mov	r16,r5
  c09cf8:	28a3883a 	add	r17,r5,r2
  c09cfc:	81c00007 	ldb	r7,0(r16)
  c09d00:	400b883a 	mov	r5,r8
  c09d04:	9009883a 	mov	r4,r18
  c09d08:	39fff404 	addi	r7,r7,-48
  c09d0c:	01800284 	movi	r6,10
  c09d10:	0c09a180 	call	c09a18 <__multadd>
  c09d14:	84000044 	addi	r16,r16,1
  c09d18:	1011883a 	mov	r8,r2
  c09d1c:	847ff71e 	bne	r16,r17,c09cfc <__s2b+0xc4>
  c09d20:	4005883a 	mov	r2,r8
  c09d24:	dfc00617 	ldw	ra,24(sp)
  c09d28:	dd400517 	ldw	r21,20(sp)
  c09d2c:	dd000417 	ldw	r20,16(sp)
  c09d30:	dcc00317 	ldw	r19,12(sp)
  c09d34:	dc800217 	ldw	r18,8(sp)
  c09d38:	dc400117 	ldw	r17,4(sp)
  c09d3c:	dc000017 	ldw	r16,0(sp)
  c09d40:	dec00704 	addi	sp,sp,28
  c09d44:	f800283a 	ret
  c09d48:	99400284 	addi	r5,r19,10
  c09d4c:	003fe706 	br	c09cec <__s2b+0xb4>
  c09d50:	000b883a 	mov	r5,zero
  c09d54:	003fcd06 	br	c09c8c <__s2b+0x54>

00c09d58 <_realloc_r>:
  c09d58:	defff404 	addi	sp,sp,-48
  c09d5c:	dd800815 	stw	r22,32(sp)
  c09d60:	dc800415 	stw	r18,16(sp)
  c09d64:	dc400315 	stw	r17,12(sp)
  c09d68:	dfc00b15 	stw	ra,44(sp)
  c09d6c:	df000a15 	stw	fp,40(sp)
  c09d70:	ddc00915 	stw	r23,36(sp)
  c09d74:	dd400715 	stw	r21,28(sp)
  c09d78:	dd000615 	stw	r20,24(sp)
  c09d7c:	dcc00515 	stw	r19,20(sp)
  c09d80:	dc000215 	stw	r16,8(sp)
  c09d84:	2825883a 	mov	r18,r5
  c09d88:	3023883a 	mov	r17,r6
  c09d8c:	202d883a 	mov	r22,r4
  c09d90:	2800c926 	beq	r5,zero,c0a0b8 <_realloc_r+0x360>
  c09d94:	0c0c7500 	call	c0c750 <__malloc_lock>
  c09d98:	943ffe04 	addi	r16,r18,-8
  c09d9c:	88c002c4 	addi	r3,r17,11
  c09da0:	00800584 	movi	r2,22
  c09da4:	82000117 	ldw	r8,4(r16)
  c09da8:	10c01b2e 	bgeu	r2,r3,c09e18 <_realloc_r+0xc0>
  c09dac:	00bffe04 	movi	r2,-8
  c09db0:	188e703a 	and	r7,r3,r2
  c09db4:	3839883a 	mov	fp,r7
  c09db8:	38001a16 	blt	r7,zero,c09e24 <_realloc_r+0xcc>
  c09dbc:	e4401936 	bltu	fp,r17,c09e24 <_realloc_r+0xcc>
  c09dc0:	013fff04 	movi	r4,-4
  c09dc4:	4126703a 	and	r19,r8,r4
  c09dc8:	99c02616 	blt	r19,r7,c09e64 <_realloc_r+0x10c>
  c09dcc:	802b883a 	mov	r21,r16
  c09dd0:	9829883a 	mov	r20,r19
  c09dd4:	84000204 	addi	r16,r16,8
  c09dd8:	a80f883a 	mov	r7,r21
  c09ddc:	a70dc83a 	sub	r6,r20,fp
  c09de0:	008003c4 	movi	r2,15
  c09de4:	1180c136 	bltu	r2,r6,c0a0ec <_realloc_r+0x394>
  c09de8:	38800117 	ldw	r2,4(r7)
  c09dec:	a549883a 	add	r4,r20,r21
  c09df0:	1080004c 	andi	r2,r2,1
  c09df4:	a084b03a 	or	r2,r20,r2
  c09df8:	38800115 	stw	r2,4(r7)
  c09dfc:	20c00117 	ldw	r3,4(r4)
  c09e00:	18c00054 	ori	r3,r3,1
  c09e04:	20c00115 	stw	r3,4(r4)
  c09e08:	b009883a 	mov	r4,r22
  c09e0c:	0c0c7700 	call	c0c770 <__malloc_unlock>
  c09e10:	8023883a 	mov	r17,r16
  c09e14:	00000606 	br	c09e30 <_realloc_r+0xd8>
  c09e18:	01c00404 	movi	r7,16
  c09e1c:	3839883a 	mov	fp,r7
  c09e20:	e47fe72e 	bgeu	fp,r17,c09dc0 <_realloc_r+0x68>
  c09e24:	00800304 	movi	r2,12
  c09e28:	0023883a 	mov	r17,zero
  c09e2c:	b0800015 	stw	r2,0(r22)
  c09e30:	8805883a 	mov	r2,r17
  c09e34:	dfc00b17 	ldw	ra,44(sp)
  c09e38:	df000a17 	ldw	fp,40(sp)
  c09e3c:	ddc00917 	ldw	r23,36(sp)
  c09e40:	dd800817 	ldw	r22,32(sp)
  c09e44:	dd400717 	ldw	r21,28(sp)
  c09e48:	dd000617 	ldw	r20,24(sp)
  c09e4c:	dcc00517 	ldw	r19,20(sp)
  c09e50:	dc800417 	ldw	r18,16(sp)
  c09e54:	dc400317 	ldw	r17,12(sp)
  c09e58:	dc000217 	ldw	r16,8(sp)
  c09e5c:	dec00c04 	addi	sp,sp,48
  c09e60:	f800283a 	ret
  c09e64:	00803074 	movhi	r2,193
  c09e68:	1083c704 	addi	r2,r2,3868
  c09e6c:	12400217 	ldw	r9,8(r2)
  c09e70:	84cd883a 	add	r6,r16,r19
  c09e74:	802b883a 	mov	r21,r16
  c09e78:	3240b926 	beq	r6,r9,c0a160 <_realloc_r+0x408>
  c09e7c:	31400117 	ldw	r5,4(r6)
  c09e80:	00bfff84 	movi	r2,-2
  c09e84:	2884703a 	and	r2,r5,r2
  c09e88:	1185883a 	add	r2,r2,r6
  c09e8c:	10c00117 	ldw	r3,4(r2)
  c09e90:	18c0004c 	andi	r3,r3,1
  c09e94:	1807003a 	cmpeq	r3,r3,zero
  c09e98:	1800a326 	beq	r3,zero,c0a128 <_realloc_r+0x3d0>
  c09e9c:	2908703a 	and	r4,r5,r4
  c09ea0:	9929883a 	add	r20,r19,r4
  c09ea4:	a1c0a30e 	bge	r20,r7,c0a134 <_realloc_r+0x3dc>
  c09ea8:	4080004c 	andi	r2,r8,1
  c09eac:	1000551e 	bne	r2,zero,c0a004 <_realloc_r+0x2ac>
  c09eb0:	80800017 	ldw	r2,0(r16)
  c09eb4:	80afc83a 	sub	r23,r16,r2
  c09eb8:	b8c00117 	ldw	r3,4(r23)
  c09ebc:	00bfff04 	movi	r2,-4
  c09ec0:	1884703a 	and	r2,r3,r2
  c09ec4:	30002e26 	beq	r6,zero,c09f80 <_realloc_r+0x228>
  c09ec8:	3240b926 	beq	r6,r9,c0a1b0 <_realloc_r+0x458>
  c09ecc:	98a9883a 	add	r20,r19,r2
  c09ed0:	2509883a 	add	r4,r4,r20
  c09ed4:	d9000015 	stw	r4,0(sp)
  c09ed8:	21c02a16 	blt	r4,r7,c09f84 <_realloc_r+0x22c>
  c09edc:	30800317 	ldw	r2,12(r6)
  c09ee0:	30c00217 	ldw	r3,8(r6)
  c09ee4:	01400904 	movi	r5,36
  c09ee8:	99bfff04 	addi	r6,r19,-4
  c09eec:	18800315 	stw	r2,12(r3)
  c09ef0:	10c00215 	stw	r3,8(r2)
  c09ef4:	b9000317 	ldw	r4,12(r23)
  c09ef8:	b8800217 	ldw	r2,8(r23)
  c09efc:	b82b883a 	mov	r21,r23
  c09f00:	bc000204 	addi	r16,r23,8
  c09f04:	20800215 	stw	r2,8(r4)
  c09f08:	11000315 	stw	r4,12(r2)
  c09f0c:	2980e436 	bltu	r5,r6,c0a2a0 <_realloc_r+0x548>
  c09f10:	008004c4 	movi	r2,19
  c09f14:	9009883a 	mov	r4,r18
  c09f18:	8011883a 	mov	r8,r16
  c09f1c:	11800f2e 	bgeu	r2,r6,c09f5c <_realloc_r+0x204>
  c09f20:	90800017 	ldw	r2,0(r18)
  c09f24:	ba000404 	addi	r8,r23,16
  c09f28:	91000204 	addi	r4,r18,8
  c09f2c:	b8800215 	stw	r2,8(r23)
  c09f30:	90c00117 	ldw	r3,4(r18)
  c09f34:	008006c4 	movi	r2,27
  c09f38:	b8c00315 	stw	r3,12(r23)
  c09f3c:	1180072e 	bgeu	r2,r6,c09f5c <_realloc_r+0x204>
  c09f40:	90c00217 	ldw	r3,8(r18)
  c09f44:	ba000604 	addi	r8,r23,24
  c09f48:	91000404 	addi	r4,r18,16
  c09f4c:	b8c00415 	stw	r3,16(r23)
  c09f50:	90800317 	ldw	r2,12(r18)
  c09f54:	b8800515 	stw	r2,20(r23)
  c09f58:	3140e726 	beq	r6,r5,c0a2f8 <_realloc_r+0x5a0>
  c09f5c:	20800017 	ldw	r2,0(r4)
  c09f60:	dd000017 	ldw	r20,0(sp)
  c09f64:	b80f883a 	mov	r7,r23
  c09f68:	40800015 	stw	r2,0(r8)
  c09f6c:	20c00117 	ldw	r3,4(r4)
  c09f70:	40c00115 	stw	r3,4(r8)
  c09f74:	20800217 	ldw	r2,8(r4)
  c09f78:	40800215 	stw	r2,8(r8)
  c09f7c:	003f9706 	br	c09ddc <_realloc_r+0x84>
  c09f80:	98a9883a 	add	r20,r19,r2
  c09f84:	a1c01f16 	blt	r20,r7,c0a004 <_realloc_r+0x2ac>
  c09f88:	b8c00317 	ldw	r3,12(r23)
  c09f8c:	b8800217 	ldw	r2,8(r23)
  c09f90:	99bfff04 	addi	r6,r19,-4
  c09f94:	01400904 	movi	r5,36
  c09f98:	b82b883a 	mov	r21,r23
  c09f9c:	18800215 	stw	r2,8(r3)
  c09fa0:	10c00315 	stw	r3,12(r2)
  c09fa4:	bc000204 	addi	r16,r23,8
  c09fa8:	2980c336 	bltu	r5,r6,c0a2b8 <_realloc_r+0x560>
  c09fac:	008004c4 	movi	r2,19
  c09fb0:	9009883a 	mov	r4,r18
  c09fb4:	8011883a 	mov	r8,r16
  c09fb8:	11800f2e 	bgeu	r2,r6,c09ff8 <_realloc_r+0x2a0>
  c09fbc:	90800017 	ldw	r2,0(r18)
  c09fc0:	ba000404 	addi	r8,r23,16
  c09fc4:	91000204 	addi	r4,r18,8
  c09fc8:	b8800215 	stw	r2,8(r23)
  c09fcc:	90c00117 	ldw	r3,4(r18)
  c09fd0:	008006c4 	movi	r2,27
  c09fd4:	b8c00315 	stw	r3,12(r23)
  c09fd8:	1180072e 	bgeu	r2,r6,c09ff8 <_realloc_r+0x2a0>
  c09fdc:	90c00217 	ldw	r3,8(r18)
  c09fe0:	ba000604 	addi	r8,r23,24
  c09fe4:	91000404 	addi	r4,r18,16
  c09fe8:	b8c00415 	stw	r3,16(r23)
  c09fec:	90800317 	ldw	r2,12(r18)
  c09ff0:	b8800515 	stw	r2,20(r23)
  c09ff4:	3140c726 	beq	r6,r5,c0a314 <_realloc_r+0x5bc>
  c09ff8:	20800017 	ldw	r2,0(r4)
  c09ffc:	b80f883a 	mov	r7,r23
  c0a000:	003fd906 	br	c09f68 <_realloc_r+0x210>
  c0a004:	880b883a 	mov	r5,r17
  c0a008:	b009883a 	mov	r4,r22
  c0a00c:	0c083280 	call	c08328 <_malloc_r>
  c0a010:	1023883a 	mov	r17,r2
  c0a014:	10002526 	beq	r2,zero,c0a0ac <_realloc_r+0x354>
  c0a018:	80800117 	ldw	r2,4(r16)
  c0a01c:	00ffff84 	movi	r3,-2
  c0a020:	893ffe04 	addi	r4,r17,-8
  c0a024:	10c4703a 	and	r2,r2,r3
  c0a028:	8085883a 	add	r2,r16,r2
  c0a02c:	20809526 	beq	r4,r2,c0a284 <_realloc_r+0x52c>
  c0a030:	99bfff04 	addi	r6,r19,-4
  c0a034:	01c00904 	movi	r7,36
  c0a038:	39804536 	bltu	r7,r6,c0a150 <_realloc_r+0x3f8>
  c0a03c:	008004c4 	movi	r2,19
  c0a040:	9009883a 	mov	r4,r18
  c0a044:	880b883a 	mov	r5,r17
  c0a048:	11800f2e 	bgeu	r2,r6,c0a088 <_realloc_r+0x330>
  c0a04c:	90800017 	ldw	r2,0(r18)
  c0a050:	89400204 	addi	r5,r17,8
  c0a054:	91000204 	addi	r4,r18,8
  c0a058:	88800015 	stw	r2,0(r17)
  c0a05c:	90c00117 	ldw	r3,4(r18)
  c0a060:	008006c4 	movi	r2,27
  c0a064:	88c00115 	stw	r3,4(r17)
  c0a068:	1180072e 	bgeu	r2,r6,c0a088 <_realloc_r+0x330>
  c0a06c:	90c00217 	ldw	r3,8(r18)
  c0a070:	89400404 	addi	r5,r17,16
  c0a074:	91000404 	addi	r4,r18,16
  c0a078:	88c00215 	stw	r3,8(r17)
  c0a07c:	90800317 	ldw	r2,12(r18)
  c0a080:	88800315 	stw	r2,12(r17)
  c0a084:	31c09126 	beq	r6,r7,c0a2cc <_realloc_r+0x574>
  c0a088:	20800017 	ldw	r2,0(r4)
  c0a08c:	28800015 	stw	r2,0(r5)
  c0a090:	20c00117 	ldw	r3,4(r4)
  c0a094:	28c00115 	stw	r3,4(r5)
  c0a098:	20800217 	ldw	r2,8(r4)
  c0a09c:	28800215 	stw	r2,8(r5)
  c0a0a0:	900b883a 	mov	r5,r18
  c0a0a4:	b009883a 	mov	r4,r22
  c0a0a8:	0c077a00 	call	c077a0 <_free_r>
  c0a0ac:	b009883a 	mov	r4,r22
  c0a0b0:	0c0c7700 	call	c0c770 <__malloc_unlock>
  c0a0b4:	003f5e06 	br	c09e30 <_realloc_r+0xd8>
  c0a0b8:	300b883a 	mov	r5,r6
  c0a0bc:	dfc00b17 	ldw	ra,44(sp)
  c0a0c0:	df000a17 	ldw	fp,40(sp)
  c0a0c4:	ddc00917 	ldw	r23,36(sp)
  c0a0c8:	dd800817 	ldw	r22,32(sp)
  c0a0cc:	dd400717 	ldw	r21,28(sp)
  c0a0d0:	dd000617 	ldw	r20,24(sp)
  c0a0d4:	dcc00517 	ldw	r19,20(sp)
  c0a0d8:	dc800417 	ldw	r18,16(sp)
  c0a0dc:	dc400317 	ldw	r17,12(sp)
  c0a0e0:	dc000217 	ldw	r16,8(sp)
  c0a0e4:	dec00c04 	addi	sp,sp,48
  c0a0e8:	0c083281 	jmpi	c08328 <_malloc_r>
  c0a0ec:	38800117 	ldw	r2,4(r7)
  c0a0f0:	e54b883a 	add	r5,fp,r21
  c0a0f4:	31000054 	ori	r4,r6,1
  c0a0f8:	1080004c 	andi	r2,r2,1
  c0a0fc:	1704b03a 	or	r2,r2,fp
  c0a100:	38800115 	stw	r2,4(r7)
  c0a104:	29000115 	stw	r4,4(r5)
  c0a108:	2987883a 	add	r3,r5,r6
  c0a10c:	18800117 	ldw	r2,4(r3)
  c0a110:	29400204 	addi	r5,r5,8
  c0a114:	b009883a 	mov	r4,r22
  c0a118:	10800054 	ori	r2,r2,1
  c0a11c:	18800115 	stw	r2,4(r3)
  c0a120:	0c077a00 	call	c077a0 <_free_r>
  c0a124:	003f3806 	br	c09e08 <_realloc_r+0xb0>
  c0a128:	000d883a 	mov	r6,zero
  c0a12c:	0009883a 	mov	r4,zero
  c0a130:	003f5d06 	br	c09ea8 <_realloc_r+0x150>
  c0a134:	30c00217 	ldw	r3,8(r6)
  c0a138:	30800317 	ldw	r2,12(r6)
  c0a13c:	800f883a 	mov	r7,r16
  c0a140:	84000204 	addi	r16,r16,8
  c0a144:	10c00215 	stw	r3,8(r2)
  c0a148:	18800315 	stw	r2,12(r3)
  c0a14c:	003f2306 	br	c09ddc <_realloc_r+0x84>
  c0a150:	8809883a 	mov	r4,r17
  c0a154:	900b883a 	mov	r5,r18
  c0a158:	0c08bec0 	call	c08bec <memmove>
  c0a15c:	003fd006 	br	c0a0a0 <_realloc_r+0x348>
  c0a160:	30800117 	ldw	r2,4(r6)
  c0a164:	e0c00404 	addi	r3,fp,16
  c0a168:	1108703a 	and	r4,r2,r4
  c0a16c:	9905883a 	add	r2,r19,r4
  c0a170:	10ff4d16 	blt	r2,r3,c09ea8 <_realloc_r+0x150>
  c0a174:	1705c83a 	sub	r2,r2,fp
  c0a178:	870b883a 	add	r5,r16,fp
  c0a17c:	10800054 	ori	r2,r2,1
  c0a180:	28800115 	stw	r2,4(r5)
  c0a184:	80c00117 	ldw	r3,4(r16)
  c0a188:	00803074 	movhi	r2,193
  c0a18c:	1083c704 	addi	r2,r2,3868
  c0a190:	b009883a 	mov	r4,r22
  c0a194:	18c0004c 	andi	r3,r3,1
  c0a198:	e0c6b03a 	or	r3,fp,r3
  c0a19c:	11400215 	stw	r5,8(r2)
  c0a1a0:	80c00115 	stw	r3,4(r16)
  c0a1a4:	0c0c7700 	call	c0c770 <__malloc_unlock>
  c0a1a8:	84400204 	addi	r17,r16,8
  c0a1ac:	003f2006 	br	c09e30 <_realloc_r+0xd8>
  c0a1b0:	98a9883a 	add	r20,r19,r2
  c0a1b4:	2509883a 	add	r4,r4,r20
  c0a1b8:	e0800404 	addi	r2,fp,16
  c0a1bc:	d9000115 	stw	r4,4(sp)
  c0a1c0:	20bf7016 	blt	r4,r2,c09f84 <_realloc_r+0x22c>
  c0a1c4:	b8c00317 	ldw	r3,12(r23)
  c0a1c8:	b8800217 	ldw	r2,8(r23)
  c0a1cc:	99bfff04 	addi	r6,r19,-4
  c0a1d0:	01400904 	movi	r5,36
  c0a1d4:	18800215 	stw	r2,8(r3)
  c0a1d8:	10c00315 	stw	r3,12(r2)
  c0a1dc:	bc400204 	addi	r17,r23,8
  c0a1e0:	29804136 	bltu	r5,r6,c0a2e8 <_realloc_r+0x590>
  c0a1e4:	008004c4 	movi	r2,19
  c0a1e8:	9009883a 	mov	r4,r18
  c0a1ec:	880f883a 	mov	r7,r17
  c0a1f0:	11800f2e 	bgeu	r2,r6,c0a230 <_realloc_r+0x4d8>
  c0a1f4:	90800017 	ldw	r2,0(r18)
  c0a1f8:	b9c00404 	addi	r7,r23,16
  c0a1fc:	91000204 	addi	r4,r18,8
  c0a200:	b8800215 	stw	r2,8(r23)
  c0a204:	90c00117 	ldw	r3,4(r18)
  c0a208:	008006c4 	movi	r2,27
  c0a20c:	b8c00315 	stw	r3,12(r23)
  c0a210:	1180072e 	bgeu	r2,r6,c0a230 <_realloc_r+0x4d8>
  c0a214:	90c00217 	ldw	r3,8(r18)
  c0a218:	b9c00604 	addi	r7,r23,24
  c0a21c:	91000404 	addi	r4,r18,16
  c0a220:	b8c00415 	stw	r3,16(r23)
  c0a224:	90800317 	ldw	r2,12(r18)
  c0a228:	b8800515 	stw	r2,20(r23)
  c0a22c:	31404026 	beq	r6,r5,c0a330 <_realloc_r+0x5d8>
  c0a230:	20800017 	ldw	r2,0(r4)
  c0a234:	38800015 	stw	r2,0(r7)
  c0a238:	20c00117 	ldw	r3,4(r4)
  c0a23c:	38c00115 	stw	r3,4(r7)
  c0a240:	20800217 	ldw	r2,8(r4)
  c0a244:	38800215 	stw	r2,8(r7)
  c0a248:	d8c00117 	ldw	r3,4(sp)
  c0a24c:	bf0b883a 	add	r5,r23,fp
  c0a250:	b009883a 	mov	r4,r22
  c0a254:	1f05c83a 	sub	r2,r3,fp
  c0a258:	10800054 	ori	r2,r2,1
  c0a25c:	28800115 	stw	r2,4(r5)
  c0a260:	b8c00117 	ldw	r3,4(r23)
  c0a264:	00803074 	movhi	r2,193
  c0a268:	1083c704 	addi	r2,r2,3868
  c0a26c:	11400215 	stw	r5,8(r2)
  c0a270:	18c0004c 	andi	r3,r3,1
  c0a274:	e0c6b03a 	or	r3,fp,r3
  c0a278:	b8c00115 	stw	r3,4(r23)
  c0a27c:	0c0c7700 	call	c0c770 <__malloc_unlock>
  c0a280:	003eeb06 	br	c09e30 <_realloc_r+0xd8>
  c0a284:	20800117 	ldw	r2,4(r4)
  c0a288:	00ffff04 	movi	r3,-4
  c0a28c:	800f883a 	mov	r7,r16
  c0a290:	10c4703a 	and	r2,r2,r3
  c0a294:	98a9883a 	add	r20,r19,r2
  c0a298:	84000204 	addi	r16,r16,8
  c0a29c:	003ecf06 	br	c09ddc <_realloc_r+0x84>
  c0a2a0:	900b883a 	mov	r5,r18
  c0a2a4:	8009883a 	mov	r4,r16
  c0a2a8:	0c08bec0 	call	c08bec <memmove>
  c0a2ac:	dd000017 	ldw	r20,0(sp)
  c0a2b0:	b80f883a 	mov	r7,r23
  c0a2b4:	003ec906 	br	c09ddc <_realloc_r+0x84>
  c0a2b8:	900b883a 	mov	r5,r18
  c0a2bc:	8009883a 	mov	r4,r16
  c0a2c0:	0c08bec0 	call	c08bec <memmove>
  c0a2c4:	b80f883a 	mov	r7,r23
  c0a2c8:	003ec406 	br	c09ddc <_realloc_r+0x84>
  c0a2cc:	90c00417 	ldw	r3,16(r18)
  c0a2d0:	89400604 	addi	r5,r17,24
  c0a2d4:	91000604 	addi	r4,r18,24
  c0a2d8:	88c00415 	stw	r3,16(r17)
  c0a2dc:	90800517 	ldw	r2,20(r18)
  c0a2e0:	88800515 	stw	r2,20(r17)
  c0a2e4:	003f6806 	br	c0a088 <_realloc_r+0x330>
  c0a2e8:	900b883a 	mov	r5,r18
  c0a2ec:	8809883a 	mov	r4,r17
  c0a2f0:	0c08bec0 	call	c08bec <memmove>
  c0a2f4:	003fd406 	br	c0a248 <_realloc_r+0x4f0>
  c0a2f8:	90c00417 	ldw	r3,16(r18)
  c0a2fc:	91000604 	addi	r4,r18,24
  c0a300:	ba000804 	addi	r8,r23,32
  c0a304:	b8c00615 	stw	r3,24(r23)
  c0a308:	90800517 	ldw	r2,20(r18)
  c0a30c:	b8800715 	stw	r2,28(r23)
  c0a310:	003f1206 	br	c09f5c <_realloc_r+0x204>
  c0a314:	90c00417 	ldw	r3,16(r18)
  c0a318:	91000604 	addi	r4,r18,24
  c0a31c:	ba000804 	addi	r8,r23,32
  c0a320:	b8c00615 	stw	r3,24(r23)
  c0a324:	90800517 	ldw	r2,20(r18)
  c0a328:	b8800715 	stw	r2,28(r23)
  c0a32c:	003f3206 	br	c09ff8 <_realloc_r+0x2a0>
  c0a330:	90c00417 	ldw	r3,16(r18)
  c0a334:	91000604 	addi	r4,r18,24
  c0a338:	b9c00804 	addi	r7,r23,32
  c0a33c:	b8c00615 	stw	r3,24(r23)
  c0a340:	90800517 	ldw	r2,20(r18)
  c0a344:	b8800715 	stw	r2,28(r23)
  c0a348:	003fb906 	br	c0a230 <_realloc_r+0x4d8>

00c0a34c <__isinfd>:
  c0a34c:	200d883a 	mov	r6,r4
  c0a350:	0109c83a 	sub	r4,zero,r4
  c0a354:	2188b03a 	or	r4,r4,r6
  c0a358:	2008d7fa 	srli	r4,r4,31
  c0a35c:	00a00034 	movhi	r2,32768
  c0a360:	10bfffc4 	addi	r2,r2,-1
  c0a364:	1144703a 	and	r2,r2,r5
  c0a368:	2088b03a 	or	r4,r4,r2
  c0a36c:	009ffc34 	movhi	r2,32752
  c0a370:	1105c83a 	sub	r2,r2,r4
  c0a374:	0087c83a 	sub	r3,zero,r2
  c0a378:	10c4b03a 	or	r2,r2,r3
  c0a37c:	1004d7fa 	srli	r2,r2,31
  c0a380:	00c00044 	movi	r3,1
  c0a384:	1885c83a 	sub	r2,r3,r2
  c0a388:	f800283a 	ret

00c0a38c <__isnand>:
  c0a38c:	200d883a 	mov	r6,r4
  c0a390:	0109c83a 	sub	r4,zero,r4
  c0a394:	2188b03a 	or	r4,r4,r6
  c0a398:	2008d7fa 	srli	r4,r4,31
  c0a39c:	00a00034 	movhi	r2,32768
  c0a3a0:	10bfffc4 	addi	r2,r2,-1
  c0a3a4:	1144703a 	and	r2,r2,r5
  c0a3a8:	2088b03a 	or	r4,r4,r2
  c0a3ac:	009ffc34 	movhi	r2,32752
  c0a3b0:	1105c83a 	sub	r2,r2,r4
  c0a3b4:	1004d7fa 	srli	r2,r2,31
  c0a3b8:	f800283a 	ret

00c0a3bc <_sbrk_r>:
  c0a3bc:	defffd04 	addi	sp,sp,-12
  c0a3c0:	dc000015 	stw	r16,0(sp)
  c0a3c4:	04003074 	movhi	r16,193
  c0a3c8:	8410bd04 	addi	r16,r16,17140
  c0a3cc:	dc400115 	stw	r17,4(sp)
  c0a3d0:	80000015 	stw	zero,0(r16)
  c0a3d4:	2023883a 	mov	r17,r4
  c0a3d8:	2809883a 	mov	r4,r5
  c0a3dc:	dfc00215 	stw	ra,8(sp)
  c0a3e0:	0c0c9700 	call	c0c970 <sbrk>
  c0a3e4:	1007883a 	mov	r3,r2
  c0a3e8:	00bfffc4 	movi	r2,-1
  c0a3ec:	18800626 	beq	r3,r2,c0a408 <_sbrk_r+0x4c>
  c0a3f0:	1805883a 	mov	r2,r3
  c0a3f4:	dfc00217 	ldw	ra,8(sp)
  c0a3f8:	dc400117 	ldw	r17,4(sp)
  c0a3fc:	dc000017 	ldw	r16,0(sp)
  c0a400:	dec00304 	addi	sp,sp,12
  c0a404:	f800283a 	ret
  c0a408:	80800017 	ldw	r2,0(r16)
  c0a40c:	103ff826 	beq	r2,zero,c0a3f0 <_sbrk_r+0x34>
  c0a410:	88800015 	stw	r2,0(r17)
  c0a414:	1805883a 	mov	r2,r3
  c0a418:	dfc00217 	ldw	ra,8(sp)
  c0a41c:	dc400117 	ldw	r17,4(sp)
  c0a420:	dc000017 	ldw	r16,0(sp)
  c0a424:	dec00304 	addi	sp,sp,12
  c0a428:	f800283a 	ret

00c0a42c <__sclose>:
  c0a42c:	2940038f 	ldh	r5,14(r5)
  c0a430:	0c0a7601 	jmpi	c0a760 <_close_r>

00c0a434 <__sseek>:
  c0a434:	defffe04 	addi	sp,sp,-8
  c0a438:	dc000015 	stw	r16,0(sp)
  c0a43c:	2821883a 	mov	r16,r5
  c0a440:	2940038f 	ldh	r5,14(r5)
  c0a444:	dfc00115 	stw	ra,4(sp)
  c0a448:	0c0a9d80 	call	c0a9d8 <_lseek_r>
  c0a44c:	1007883a 	mov	r3,r2
  c0a450:	00bfffc4 	movi	r2,-1
  c0a454:	18800926 	beq	r3,r2,c0a47c <__sseek+0x48>
  c0a458:	8080030b 	ldhu	r2,12(r16)
  c0a45c:	80c01415 	stw	r3,80(r16)
  c0a460:	10840014 	ori	r2,r2,4096
  c0a464:	8080030d 	sth	r2,12(r16)
  c0a468:	1805883a 	mov	r2,r3
  c0a46c:	dfc00117 	ldw	ra,4(sp)
  c0a470:	dc000017 	ldw	r16,0(sp)
  c0a474:	dec00204 	addi	sp,sp,8
  c0a478:	f800283a 	ret
  c0a47c:	8080030b 	ldhu	r2,12(r16)
  c0a480:	10bbffcc 	andi	r2,r2,61439
  c0a484:	8080030d 	sth	r2,12(r16)
  c0a488:	1805883a 	mov	r2,r3
  c0a48c:	dfc00117 	ldw	ra,4(sp)
  c0a490:	dc000017 	ldw	r16,0(sp)
  c0a494:	dec00204 	addi	sp,sp,8
  c0a498:	f800283a 	ret

00c0a49c <__swrite>:
  c0a49c:	2880030b 	ldhu	r2,12(r5)
  c0a4a0:	defffb04 	addi	sp,sp,-20
  c0a4a4:	dcc00315 	stw	r19,12(sp)
  c0a4a8:	1080400c 	andi	r2,r2,256
  c0a4ac:	dc800215 	stw	r18,8(sp)
  c0a4b0:	dc400115 	stw	r17,4(sp)
  c0a4b4:	dc000015 	stw	r16,0(sp)
  c0a4b8:	3027883a 	mov	r19,r6
  c0a4bc:	3825883a 	mov	r18,r7
  c0a4c0:	dfc00415 	stw	ra,16(sp)
  c0a4c4:	2821883a 	mov	r16,r5
  c0a4c8:	000d883a 	mov	r6,zero
  c0a4cc:	01c00084 	movi	r7,2
  c0a4d0:	2023883a 	mov	r17,r4
  c0a4d4:	10000226 	beq	r2,zero,c0a4e0 <__swrite+0x44>
  c0a4d8:	2940038f 	ldh	r5,14(r5)
  c0a4dc:	0c0a9d80 	call	c0a9d8 <_lseek_r>
  c0a4e0:	8080030b 	ldhu	r2,12(r16)
  c0a4e4:	8140038f 	ldh	r5,14(r16)
  c0a4e8:	8809883a 	mov	r4,r17
  c0a4ec:	10bbffcc 	andi	r2,r2,61439
  c0a4f0:	980d883a 	mov	r6,r19
  c0a4f4:	900f883a 	mov	r7,r18
  c0a4f8:	8080030d 	sth	r2,12(r16)
  c0a4fc:	dfc00417 	ldw	ra,16(sp)
  c0a500:	dcc00317 	ldw	r19,12(sp)
  c0a504:	dc800217 	ldw	r18,8(sp)
  c0a508:	dc400117 	ldw	r17,4(sp)
  c0a50c:	dc000017 	ldw	r16,0(sp)
  c0a510:	dec00504 	addi	sp,sp,20
  c0a514:	0c0a6341 	jmpi	c0a634 <_write_r>

00c0a518 <__sread>:
  c0a518:	defffe04 	addi	sp,sp,-8
  c0a51c:	dc000015 	stw	r16,0(sp)
  c0a520:	2821883a 	mov	r16,r5
  c0a524:	2940038f 	ldh	r5,14(r5)
  c0a528:	dfc00115 	stw	ra,4(sp)
  c0a52c:	0c0aa500 	call	c0aa50 <_read_r>
  c0a530:	1007883a 	mov	r3,r2
  c0a534:	10000816 	blt	r2,zero,c0a558 <__sread+0x40>
  c0a538:	80801417 	ldw	r2,80(r16)
  c0a53c:	10c5883a 	add	r2,r2,r3
  c0a540:	80801415 	stw	r2,80(r16)
  c0a544:	1805883a 	mov	r2,r3
  c0a548:	dfc00117 	ldw	ra,4(sp)
  c0a54c:	dc000017 	ldw	r16,0(sp)
  c0a550:	dec00204 	addi	sp,sp,8
  c0a554:	f800283a 	ret
  c0a558:	8080030b 	ldhu	r2,12(r16)
  c0a55c:	10bbffcc 	andi	r2,r2,61439
  c0a560:	8080030d 	sth	r2,12(r16)
  c0a564:	1805883a 	mov	r2,r3
  c0a568:	dfc00117 	ldw	ra,4(sp)
  c0a56c:	dc000017 	ldw	r16,0(sp)
  c0a570:	dec00204 	addi	sp,sp,8
  c0a574:	f800283a 	ret

00c0a578 <strcmp>:
  c0a578:	2144b03a 	or	r2,r4,r5
  c0a57c:	108000cc 	andi	r2,r2,3
  c0a580:	10001d1e 	bne	r2,zero,c0a5f8 <strcmp+0x80>
  c0a584:	200f883a 	mov	r7,r4
  c0a588:	28800017 	ldw	r2,0(r5)
  c0a58c:	21000017 	ldw	r4,0(r4)
  c0a590:	280d883a 	mov	r6,r5
  c0a594:	2080161e 	bne	r4,r2,c0a5f0 <strcmp+0x78>
  c0a598:	023fbff4 	movhi	r8,65279
  c0a59c:	423fbfc4 	addi	r8,r8,-257
  c0a5a0:	2207883a 	add	r3,r4,r8
  c0a5a4:	01602074 	movhi	r5,32897
  c0a5a8:	29602004 	addi	r5,r5,-32640
  c0a5ac:	1946703a 	and	r3,r3,r5
  c0a5b0:	0104303a 	nor	r2,zero,r4
  c0a5b4:	10c4703a 	and	r2,r2,r3
  c0a5b8:	10001c1e 	bne	r2,zero,c0a62c <strcmp+0xb4>
  c0a5bc:	4013883a 	mov	r9,r8
  c0a5c0:	2811883a 	mov	r8,r5
  c0a5c4:	00000106 	br	c0a5cc <strcmp+0x54>
  c0a5c8:	1800181e 	bne	r3,zero,c0a62c <strcmp+0xb4>
  c0a5cc:	39c00104 	addi	r7,r7,4
  c0a5d0:	39000017 	ldw	r4,0(r7)
  c0a5d4:	31800104 	addi	r6,r6,4
  c0a5d8:	31400017 	ldw	r5,0(r6)
  c0a5dc:	2245883a 	add	r2,r4,r9
  c0a5e0:	1204703a 	and	r2,r2,r8
  c0a5e4:	0106303a 	nor	r3,zero,r4
  c0a5e8:	1886703a 	and	r3,r3,r2
  c0a5ec:	217ff626 	beq	r4,r5,c0a5c8 <strcmp+0x50>
  c0a5f0:	3809883a 	mov	r4,r7
  c0a5f4:	300b883a 	mov	r5,r6
  c0a5f8:	20c00007 	ldb	r3,0(r4)
  c0a5fc:	1800051e 	bne	r3,zero,c0a614 <strcmp+0x9c>
  c0a600:	00000606 	br	c0a61c <strcmp+0xa4>
  c0a604:	21000044 	addi	r4,r4,1
  c0a608:	20c00007 	ldb	r3,0(r4)
  c0a60c:	29400044 	addi	r5,r5,1
  c0a610:	18000226 	beq	r3,zero,c0a61c <strcmp+0xa4>
  c0a614:	28800007 	ldb	r2,0(r5)
  c0a618:	18bffa26 	beq	r3,r2,c0a604 <strcmp+0x8c>
  c0a61c:	20c00003 	ldbu	r3,0(r4)
  c0a620:	28800003 	ldbu	r2,0(r5)
  c0a624:	1885c83a 	sub	r2,r3,r2
  c0a628:	f800283a 	ret
  c0a62c:	0005883a 	mov	r2,zero
  c0a630:	f800283a 	ret

00c0a634 <_write_r>:
  c0a634:	defffd04 	addi	sp,sp,-12
  c0a638:	dc000015 	stw	r16,0(sp)
  c0a63c:	04003074 	movhi	r16,193
  c0a640:	8410bd04 	addi	r16,r16,17140
  c0a644:	dc400115 	stw	r17,4(sp)
  c0a648:	80000015 	stw	zero,0(r16)
  c0a64c:	2023883a 	mov	r17,r4
  c0a650:	2809883a 	mov	r4,r5
  c0a654:	300b883a 	mov	r5,r6
  c0a658:	380d883a 	mov	r6,r7
  c0a65c:	dfc00215 	stw	ra,8(sp)
  c0a660:	0c0ca2c0 	call	c0ca2c <write>
  c0a664:	1007883a 	mov	r3,r2
  c0a668:	00bfffc4 	movi	r2,-1
  c0a66c:	18800626 	beq	r3,r2,c0a688 <_write_r+0x54>
  c0a670:	1805883a 	mov	r2,r3
  c0a674:	dfc00217 	ldw	ra,8(sp)
  c0a678:	dc400117 	ldw	r17,4(sp)
  c0a67c:	dc000017 	ldw	r16,0(sp)
  c0a680:	dec00304 	addi	sp,sp,12
  c0a684:	f800283a 	ret
  c0a688:	80800017 	ldw	r2,0(r16)
  c0a68c:	103ff826 	beq	r2,zero,c0a670 <_write_r+0x3c>
  c0a690:	88800015 	stw	r2,0(r17)
  c0a694:	1805883a 	mov	r2,r3
  c0a698:	dfc00217 	ldw	ra,8(sp)
  c0a69c:	dc400117 	ldw	r17,4(sp)
  c0a6a0:	dc000017 	ldw	r16,0(sp)
  c0a6a4:	dec00304 	addi	sp,sp,12
  c0a6a8:	f800283a 	ret

00c0a6ac <_calloc_r>:
  c0a6ac:	298b383a 	mul	r5,r5,r6
  c0a6b0:	defffe04 	addi	sp,sp,-8
  c0a6b4:	dc000015 	stw	r16,0(sp)
  c0a6b8:	dfc00115 	stw	ra,4(sp)
  c0a6bc:	0c083280 	call	c08328 <_malloc_r>
  c0a6c0:	1021883a 	mov	r16,r2
  c0a6c4:	01c00904 	movi	r7,36
  c0a6c8:	10000d26 	beq	r2,zero,c0a700 <_calloc_r+0x54>
  c0a6cc:	10ffff17 	ldw	r3,-4(r2)
  c0a6d0:	1009883a 	mov	r4,r2
  c0a6d4:	00bfff04 	movi	r2,-4
  c0a6d8:	1886703a 	and	r3,r3,r2
  c0a6dc:	1887883a 	add	r3,r3,r2
  c0a6e0:	180d883a 	mov	r6,r3
  c0a6e4:	000b883a 	mov	r5,zero
  c0a6e8:	38c01736 	bltu	r7,r3,c0a748 <_calloc_r+0x9c>
  c0a6ec:	008004c4 	movi	r2,19
  c0a6f0:	10c00836 	bltu	r2,r3,c0a714 <_calloc_r+0x68>
  c0a6f4:	20000215 	stw	zero,8(r4)
  c0a6f8:	20000015 	stw	zero,0(r4)
  c0a6fc:	20000115 	stw	zero,4(r4)
  c0a700:	8005883a 	mov	r2,r16
  c0a704:	dfc00117 	ldw	ra,4(sp)
  c0a708:	dc000017 	ldw	r16,0(sp)
  c0a70c:	dec00204 	addi	sp,sp,8
  c0a710:	f800283a 	ret
  c0a714:	008006c4 	movi	r2,27
  c0a718:	80000015 	stw	zero,0(r16)
  c0a71c:	80000115 	stw	zero,4(r16)
  c0a720:	81000204 	addi	r4,r16,8
  c0a724:	10fff32e 	bgeu	r2,r3,c0a6f4 <_calloc_r+0x48>
  c0a728:	80000215 	stw	zero,8(r16)
  c0a72c:	80000315 	stw	zero,12(r16)
  c0a730:	81000404 	addi	r4,r16,16
  c0a734:	19ffef1e 	bne	r3,r7,c0a6f4 <_calloc_r+0x48>
  c0a738:	81000604 	addi	r4,r16,24
  c0a73c:	80000415 	stw	zero,16(r16)
  c0a740:	80000515 	stw	zero,20(r16)
  c0a744:	003feb06 	br	c0a6f4 <_calloc_r+0x48>
  c0a748:	0c08ccc0 	call	c08ccc <memset>
  c0a74c:	8005883a 	mov	r2,r16
  c0a750:	dfc00117 	ldw	ra,4(sp)
  c0a754:	dc000017 	ldw	r16,0(sp)
  c0a758:	dec00204 	addi	sp,sp,8
  c0a75c:	f800283a 	ret

00c0a760 <_close_r>:
  c0a760:	defffd04 	addi	sp,sp,-12
  c0a764:	dc000015 	stw	r16,0(sp)
  c0a768:	04003074 	movhi	r16,193
  c0a76c:	8410bd04 	addi	r16,r16,17140
  c0a770:	dc400115 	stw	r17,4(sp)
  c0a774:	80000015 	stw	zero,0(r16)
  c0a778:	2023883a 	mov	r17,r4
  c0a77c:	2809883a 	mov	r4,r5
  c0a780:	dfc00215 	stw	ra,8(sp)
  c0a784:	0c0c0e80 	call	c0c0e8 <close>
  c0a788:	1007883a 	mov	r3,r2
  c0a78c:	00bfffc4 	movi	r2,-1
  c0a790:	18800626 	beq	r3,r2,c0a7ac <_close_r+0x4c>
  c0a794:	1805883a 	mov	r2,r3
  c0a798:	dfc00217 	ldw	ra,8(sp)
  c0a79c:	dc400117 	ldw	r17,4(sp)
  c0a7a0:	dc000017 	ldw	r16,0(sp)
  c0a7a4:	dec00304 	addi	sp,sp,12
  c0a7a8:	f800283a 	ret
  c0a7ac:	80800017 	ldw	r2,0(r16)
  c0a7b0:	103ff826 	beq	r2,zero,c0a794 <_close_r+0x34>
  c0a7b4:	88800015 	stw	r2,0(r17)
  c0a7b8:	1805883a 	mov	r2,r3
  c0a7bc:	dfc00217 	ldw	ra,8(sp)
  c0a7c0:	dc400117 	ldw	r17,4(sp)
  c0a7c4:	dc000017 	ldw	r16,0(sp)
  c0a7c8:	dec00304 	addi	sp,sp,12
  c0a7cc:	f800283a 	ret

00c0a7d0 <_fclose_r>:
  c0a7d0:	defffc04 	addi	sp,sp,-16
  c0a7d4:	dc400115 	stw	r17,4(sp)
  c0a7d8:	dc000015 	stw	r16,0(sp)
  c0a7dc:	dfc00315 	stw	ra,12(sp)
  c0a7e0:	dc800215 	stw	r18,8(sp)
  c0a7e4:	2821883a 	mov	r16,r5
  c0a7e8:	2023883a 	mov	r17,r4
  c0a7ec:	28002926 	beq	r5,zero,c0a894 <_fclose_r+0xc4>
  c0a7f0:	0c0740c0 	call	c0740c <__sfp_lock_acquire>
  c0a7f4:	88000226 	beq	r17,zero,c0a800 <_fclose_r+0x30>
  c0a7f8:	88800e17 	ldw	r2,56(r17)
  c0a7fc:	10002d26 	beq	r2,zero,c0a8b4 <_fclose_r+0xe4>
  c0a800:	8080030f 	ldh	r2,12(r16)
  c0a804:	10002226 	beq	r2,zero,c0a890 <_fclose_r+0xc0>
  c0a808:	8809883a 	mov	r4,r17
  c0a80c:	800b883a 	mov	r5,r16
  c0a810:	0c071840 	call	c07184 <_fflush_r>
  c0a814:	1025883a 	mov	r18,r2
  c0a818:	80800b17 	ldw	r2,44(r16)
  c0a81c:	10000426 	beq	r2,zero,c0a830 <_fclose_r+0x60>
  c0a820:	81400717 	ldw	r5,28(r16)
  c0a824:	8809883a 	mov	r4,r17
  c0a828:	103ee83a 	callr	r2
  c0a82c:	10002a16 	blt	r2,zero,c0a8d8 <_fclose_r+0x108>
  c0a830:	8080030b 	ldhu	r2,12(r16)
  c0a834:	1080200c 	andi	r2,r2,128
  c0a838:	1000231e 	bne	r2,zero,c0a8c8 <_fclose_r+0xf8>
  c0a83c:	81400c17 	ldw	r5,48(r16)
  c0a840:	28000526 	beq	r5,zero,c0a858 <_fclose_r+0x88>
  c0a844:	80801004 	addi	r2,r16,64
  c0a848:	28800226 	beq	r5,r2,c0a854 <_fclose_r+0x84>
  c0a84c:	8809883a 	mov	r4,r17
  c0a850:	0c077a00 	call	c077a0 <_free_r>
  c0a854:	80000c15 	stw	zero,48(r16)
  c0a858:	81401117 	ldw	r5,68(r16)
  c0a85c:	28000326 	beq	r5,zero,c0a86c <_fclose_r+0x9c>
  c0a860:	8809883a 	mov	r4,r17
  c0a864:	0c077a00 	call	c077a0 <_free_r>
  c0a868:	80001115 	stw	zero,68(r16)
  c0a86c:	8000030d 	sth	zero,12(r16)
  c0a870:	0c074100 	call	c07410 <__sfp_lock_release>
  c0a874:	9005883a 	mov	r2,r18
  c0a878:	dfc00317 	ldw	ra,12(sp)
  c0a87c:	dc800217 	ldw	r18,8(sp)
  c0a880:	dc400117 	ldw	r17,4(sp)
  c0a884:	dc000017 	ldw	r16,0(sp)
  c0a888:	dec00404 	addi	sp,sp,16
  c0a88c:	f800283a 	ret
  c0a890:	0c074100 	call	c07410 <__sfp_lock_release>
  c0a894:	0025883a 	mov	r18,zero
  c0a898:	9005883a 	mov	r2,r18
  c0a89c:	dfc00317 	ldw	ra,12(sp)
  c0a8a0:	dc800217 	ldw	r18,8(sp)
  c0a8a4:	dc400117 	ldw	r17,4(sp)
  c0a8a8:	dc000017 	ldw	r16,0(sp)
  c0a8ac:	dec00404 	addi	sp,sp,16
  c0a8b0:	f800283a 	ret
  c0a8b4:	8809883a 	mov	r4,r17
  c0a8b8:	0c0741c0 	call	c0741c <__sinit>
  c0a8bc:	8080030f 	ldh	r2,12(r16)
  c0a8c0:	103fd11e 	bne	r2,zero,c0a808 <_fclose_r+0x38>
  c0a8c4:	003ff206 	br	c0a890 <_fclose_r+0xc0>
  c0a8c8:	81400417 	ldw	r5,16(r16)
  c0a8cc:	8809883a 	mov	r4,r17
  c0a8d0:	0c077a00 	call	c077a0 <_free_r>
  c0a8d4:	003fd906 	br	c0a83c <_fclose_r+0x6c>
  c0a8d8:	04bfffc4 	movi	r18,-1
  c0a8dc:	003fd406 	br	c0a830 <_fclose_r+0x60>

00c0a8e0 <fclose>:
  c0a8e0:	00803074 	movhi	r2,193
  c0a8e4:	1089a904 	addi	r2,r2,9892
  c0a8e8:	200b883a 	mov	r5,r4
  c0a8ec:	11000017 	ldw	r4,0(r2)
  c0a8f0:	0c0a7d01 	jmpi	c0a7d0 <_fclose_r>

00c0a8f4 <_fstat_r>:
  c0a8f4:	defffd04 	addi	sp,sp,-12
  c0a8f8:	dc000015 	stw	r16,0(sp)
  c0a8fc:	04003074 	movhi	r16,193
  c0a900:	8410bd04 	addi	r16,r16,17140
  c0a904:	dc400115 	stw	r17,4(sp)
  c0a908:	80000015 	stw	zero,0(r16)
  c0a90c:	2023883a 	mov	r17,r4
  c0a910:	2809883a 	mov	r4,r5
  c0a914:	300b883a 	mov	r5,r6
  c0a918:	dfc00215 	stw	ra,8(sp)
  c0a91c:	0c0c2700 	call	c0c270 <fstat>
  c0a920:	1007883a 	mov	r3,r2
  c0a924:	00bfffc4 	movi	r2,-1
  c0a928:	18800626 	beq	r3,r2,c0a944 <_fstat_r+0x50>
  c0a92c:	1805883a 	mov	r2,r3
  c0a930:	dfc00217 	ldw	ra,8(sp)
  c0a934:	dc400117 	ldw	r17,4(sp)
  c0a938:	dc000017 	ldw	r16,0(sp)
  c0a93c:	dec00304 	addi	sp,sp,12
  c0a940:	f800283a 	ret
  c0a944:	80800017 	ldw	r2,0(r16)
  c0a948:	103ff826 	beq	r2,zero,c0a92c <_fstat_r+0x38>
  c0a94c:	88800015 	stw	r2,0(r17)
  c0a950:	1805883a 	mov	r2,r3
  c0a954:	dfc00217 	ldw	ra,8(sp)
  c0a958:	dc400117 	ldw	r17,4(sp)
  c0a95c:	dc000017 	ldw	r16,0(sp)
  c0a960:	dec00304 	addi	sp,sp,12
  c0a964:	f800283a 	ret

00c0a968 <_isatty_r>:
  c0a968:	defffd04 	addi	sp,sp,-12
  c0a96c:	dc000015 	stw	r16,0(sp)
  c0a970:	04003074 	movhi	r16,193
  c0a974:	8410bd04 	addi	r16,r16,17140
  c0a978:	dc400115 	stw	r17,4(sp)
  c0a97c:	80000015 	stw	zero,0(r16)
  c0a980:	2023883a 	mov	r17,r4
  c0a984:	2809883a 	mov	r4,r5
  c0a988:	dfc00215 	stw	ra,8(sp)
  c0a98c:	0c0c3a40 	call	c0c3a4 <isatty>
  c0a990:	1007883a 	mov	r3,r2
  c0a994:	00bfffc4 	movi	r2,-1
  c0a998:	18800626 	beq	r3,r2,c0a9b4 <_isatty_r+0x4c>
  c0a99c:	1805883a 	mov	r2,r3
  c0a9a0:	dfc00217 	ldw	ra,8(sp)
  c0a9a4:	dc400117 	ldw	r17,4(sp)
  c0a9a8:	dc000017 	ldw	r16,0(sp)
  c0a9ac:	dec00304 	addi	sp,sp,12
  c0a9b0:	f800283a 	ret
  c0a9b4:	80800017 	ldw	r2,0(r16)
  c0a9b8:	103ff826 	beq	r2,zero,c0a99c <_isatty_r+0x34>
  c0a9bc:	88800015 	stw	r2,0(r17)
  c0a9c0:	1805883a 	mov	r2,r3
  c0a9c4:	dfc00217 	ldw	ra,8(sp)
  c0a9c8:	dc400117 	ldw	r17,4(sp)
  c0a9cc:	dc000017 	ldw	r16,0(sp)
  c0a9d0:	dec00304 	addi	sp,sp,12
  c0a9d4:	f800283a 	ret

00c0a9d8 <_lseek_r>:
  c0a9d8:	defffd04 	addi	sp,sp,-12
  c0a9dc:	dc000015 	stw	r16,0(sp)
  c0a9e0:	04003074 	movhi	r16,193
  c0a9e4:	8410bd04 	addi	r16,r16,17140
  c0a9e8:	dc400115 	stw	r17,4(sp)
  c0a9ec:	80000015 	stw	zero,0(r16)
  c0a9f0:	2023883a 	mov	r17,r4
  c0a9f4:	2809883a 	mov	r4,r5
  c0a9f8:	300b883a 	mov	r5,r6
  c0a9fc:	380d883a 	mov	r6,r7
  c0aa00:	dfc00215 	stw	ra,8(sp)
  c0aa04:	0c0c5b00 	call	c0c5b0 <lseek>
  c0aa08:	1007883a 	mov	r3,r2
  c0aa0c:	00bfffc4 	movi	r2,-1
  c0aa10:	18800626 	beq	r3,r2,c0aa2c <_lseek_r+0x54>
  c0aa14:	1805883a 	mov	r2,r3
  c0aa18:	dfc00217 	ldw	ra,8(sp)
  c0aa1c:	dc400117 	ldw	r17,4(sp)
  c0aa20:	dc000017 	ldw	r16,0(sp)
  c0aa24:	dec00304 	addi	sp,sp,12
  c0aa28:	f800283a 	ret
  c0aa2c:	80800017 	ldw	r2,0(r16)
  c0aa30:	103ff826 	beq	r2,zero,c0aa14 <_lseek_r+0x3c>
  c0aa34:	88800015 	stw	r2,0(r17)
  c0aa38:	1805883a 	mov	r2,r3
  c0aa3c:	dfc00217 	ldw	ra,8(sp)
  c0aa40:	dc400117 	ldw	r17,4(sp)
  c0aa44:	dc000017 	ldw	r16,0(sp)
  c0aa48:	dec00304 	addi	sp,sp,12
  c0aa4c:	f800283a 	ret

00c0aa50 <_read_r>:
  c0aa50:	defffd04 	addi	sp,sp,-12
  c0aa54:	dc000015 	stw	r16,0(sp)
  c0aa58:	04003074 	movhi	r16,193
  c0aa5c:	8410bd04 	addi	r16,r16,17140
  c0aa60:	dc400115 	stw	r17,4(sp)
  c0aa64:	80000015 	stw	zero,0(r16)
  c0aa68:	2023883a 	mov	r17,r4
  c0aa6c:	2809883a 	mov	r4,r5
  c0aa70:	300b883a 	mov	r5,r6
  c0aa74:	380d883a 	mov	r6,r7
  c0aa78:	dfc00215 	stw	ra,8(sp)
  c0aa7c:	0c0c7900 	call	c0c790 <read>
  c0aa80:	1007883a 	mov	r3,r2
  c0aa84:	00bfffc4 	movi	r2,-1
  c0aa88:	18800626 	beq	r3,r2,c0aaa4 <_read_r+0x54>
  c0aa8c:	1805883a 	mov	r2,r3
  c0aa90:	dfc00217 	ldw	ra,8(sp)
  c0aa94:	dc400117 	ldw	r17,4(sp)
  c0aa98:	dc000017 	ldw	r16,0(sp)
  c0aa9c:	dec00304 	addi	sp,sp,12
  c0aaa0:	f800283a 	ret
  c0aaa4:	80800017 	ldw	r2,0(r16)
  c0aaa8:	103ff826 	beq	r2,zero,c0aa8c <_read_r+0x3c>
  c0aaac:	88800015 	stw	r2,0(r17)
  c0aab0:	1805883a 	mov	r2,r3
  c0aab4:	dfc00217 	ldw	ra,8(sp)
  c0aab8:	dc400117 	ldw	r17,4(sp)
  c0aabc:	dc000017 	ldw	r16,0(sp)
  c0aac0:	dec00304 	addi	sp,sp,12
  c0aac4:	f800283a 	ret

00c0aac8 <__udivdi3>:
  c0aac8:	defff004 	addi	sp,sp,-64
  c0aacc:	2005883a 	mov	r2,r4
  c0aad0:	3011883a 	mov	r8,r6
  c0aad4:	df000e15 	stw	fp,56(sp)
  c0aad8:	dd000a15 	stw	r20,40(sp)
  c0aadc:	dc000615 	stw	r16,24(sp)
  c0aae0:	dfc00f15 	stw	ra,60(sp)
  c0aae4:	ddc00d15 	stw	r23,52(sp)
  c0aae8:	dd800c15 	stw	r22,48(sp)
  c0aaec:	dd400b15 	stw	r21,44(sp)
  c0aaf0:	dcc00915 	stw	r19,36(sp)
  c0aaf4:	dc800815 	stw	r18,32(sp)
  c0aaf8:	dc400715 	stw	r17,28(sp)
  c0aafc:	4021883a 	mov	r16,r8
  c0ab00:	1039883a 	mov	fp,r2
  c0ab04:	2829883a 	mov	r20,r5
  c0ab08:	38003b1e 	bne	r7,zero,c0abf8 <__udivdi3+0x130>
  c0ab0c:	2a005c36 	bltu	r5,r8,c0ac80 <__udivdi3+0x1b8>
  c0ab10:	4000a626 	beq	r8,zero,c0adac <__udivdi3+0x2e4>
  c0ab14:	00bfffd4 	movui	r2,65535
  c0ab18:	14009e36 	bltu	r2,r16,c0ad94 <__udivdi3+0x2cc>
  c0ab1c:	00803fc4 	movi	r2,255
  c0ab20:	14013d36 	bltu	r2,r16,c0b018 <__udivdi3+0x550>
  c0ab24:	000b883a 	mov	r5,zero
  c0ab28:	0005883a 	mov	r2,zero
  c0ab2c:	8084d83a 	srl	r2,r16,r2
  c0ab30:	01003074 	movhi	r4,193
  c0ab34:	2101b804 	addi	r4,r4,1760
  c0ab38:	01800804 	movi	r6,32
  c0ab3c:	1105883a 	add	r2,r2,r4
  c0ab40:	10c00003 	ldbu	r3,0(r2)
  c0ab44:	28c7883a 	add	r3,r5,r3
  c0ab48:	30edc83a 	sub	r22,r6,r3
  c0ab4c:	b000ee1e 	bne	r22,zero,c0af08 <__udivdi3+0x440>
  c0ab50:	802ad43a 	srli	r21,r16,16
  c0ab54:	00800044 	movi	r2,1
  c0ab58:	a423c83a 	sub	r17,r20,r16
  c0ab5c:	85ffffcc 	andi	r23,r16,65535
  c0ab60:	d8800315 	stw	r2,12(sp)
  c0ab64:	8809883a 	mov	r4,r17
  c0ab68:	a80b883a 	mov	r5,r21
  c0ab6c:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0ab70:	8809883a 	mov	r4,r17
  c0ab74:	a80b883a 	mov	r5,r21
  c0ab78:	102d883a 	mov	r22,r2
  c0ab7c:	0c0c0e00 	call	c0c0e0 <__umodsi3>
  c0ab80:	1004943a 	slli	r2,r2,16
  c0ab84:	e006d43a 	srli	r3,fp,16
  c0ab88:	bda3383a 	mul	r17,r23,r22
  c0ab8c:	10c4b03a 	or	r2,r2,r3
  c0ab90:	1440042e 	bgeu	r2,r17,c0aba4 <__udivdi3+0xdc>
  c0ab94:	1405883a 	add	r2,r2,r16
  c0ab98:	b5bfffc4 	addi	r22,r22,-1
  c0ab9c:	14000136 	bltu	r2,r16,c0aba4 <__udivdi3+0xdc>
  c0aba0:	14413d36 	bltu	r2,r17,c0b098 <__udivdi3+0x5d0>
  c0aba4:	1463c83a 	sub	r17,r2,r17
  c0aba8:	8809883a 	mov	r4,r17
  c0abac:	a80b883a 	mov	r5,r21
  c0abb0:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0abb4:	8809883a 	mov	r4,r17
  c0abb8:	a80b883a 	mov	r5,r21
  c0abbc:	1029883a 	mov	r20,r2
  c0abc0:	0c0c0e00 	call	c0c0e0 <__umodsi3>
  c0abc4:	1004943a 	slli	r2,r2,16
  c0abc8:	bd09383a 	mul	r4,r23,r20
  c0abcc:	e0ffffcc 	andi	r3,fp,65535
  c0abd0:	10c4b03a 	or	r2,r2,r3
  c0abd4:	1100042e 	bgeu	r2,r4,c0abe8 <__udivdi3+0x120>
  c0abd8:	8085883a 	add	r2,r16,r2
  c0abdc:	a53fffc4 	addi	r20,r20,-1
  c0abe0:	14000136 	bltu	r2,r16,c0abe8 <__udivdi3+0x120>
  c0abe4:	11012036 	bltu	r2,r4,c0b068 <__udivdi3+0x5a0>
  c0abe8:	b004943a 	slli	r2,r22,16
  c0abec:	d9000317 	ldw	r4,12(sp)
  c0abf0:	a084b03a 	or	r2,r20,r2
  c0abf4:	00001506 	br	c0ac4c <__udivdi3+0x184>
  c0abf8:	380d883a 	mov	r6,r7
  c0abfc:	29c06236 	bltu	r5,r7,c0ad88 <__udivdi3+0x2c0>
  c0ac00:	00bfffd4 	movui	r2,65535
  c0ac04:	11c05a36 	bltu	r2,r7,c0ad70 <__udivdi3+0x2a8>
  c0ac08:	00803fc4 	movi	r2,255
  c0ac0c:	11c0fc36 	bltu	r2,r7,c0b000 <__udivdi3+0x538>
  c0ac10:	000b883a 	mov	r5,zero
  c0ac14:	0005883a 	mov	r2,zero
  c0ac18:	3084d83a 	srl	r2,r6,r2
  c0ac1c:	01003074 	movhi	r4,193
  c0ac20:	2101b804 	addi	r4,r4,1760
  c0ac24:	01c00804 	movi	r7,32
  c0ac28:	1105883a 	add	r2,r2,r4
  c0ac2c:	10c00003 	ldbu	r3,0(r2)
  c0ac30:	28c7883a 	add	r3,r5,r3
  c0ac34:	38efc83a 	sub	r23,r7,r3
  c0ac38:	b800691e 	bne	r23,zero,c0ade0 <__udivdi3+0x318>
  c0ac3c:	35000136 	bltu	r6,r20,c0ac44 <__udivdi3+0x17c>
  c0ac40:	e4005136 	bltu	fp,r16,c0ad88 <__udivdi3+0x2c0>
  c0ac44:	00800044 	movi	r2,1
  c0ac48:	0009883a 	mov	r4,zero
  c0ac4c:	2007883a 	mov	r3,r4
  c0ac50:	dfc00f17 	ldw	ra,60(sp)
  c0ac54:	df000e17 	ldw	fp,56(sp)
  c0ac58:	ddc00d17 	ldw	r23,52(sp)
  c0ac5c:	dd800c17 	ldw	r22,48(sp)
  c0ac60:	dd400b17 	ldw	r21,44(sp)
  c0ac64:	dd000a17 	ldw	r20,40(sp)
  c0ac68:	dcc00917 	ldw	r19,36(sp)
  c0ac6c:	dc800817 	ldw	r18,32(sp)
  c0ac70:	dc400717 	ldw	r17,28(sp)
  c0ac74:	dc000617 	ldw	r16,24(sp)
  c0ac78:	dec01004 	addi	sp,sp,64
  c0ac7c:	f800283a 	ret
  c0ac80:	00bfffd4 	movui	r2,65535
  c0ac84:	12005036 	bltu	r2,r8,c0adc8 <__udivdi3+0x300>
  c0ac88:	00803fc4 	movi	r2,255
  c0ac8c:	1200e836 	bltu	r2,r8,c0b030 <__udivdi3+0x568>
  c0ac90:	000b883a 	mov	r5,zero
  c0ac94:	0005883a 	mov	r2,zero
  c0ac98:	8084d83a 	srl	r2,r16,r2
  c0ac9c:	01003074 	movhi	r4,193
  c0aca0:	2101b804 	addi	r4,r4,1760
  c0aca4:	01800804 	movi	r6,32
  c0aca8:	1105883a 	add	r2,r2,r4
  c0acac:	10c00003 	ldbu	r3,0(r2)
  c0acb0:	28c7883a 	add	r3,r5,r3
  c0acb4:	30cbc83a 	sub	r5,r6,r3
  c0acb8:	28000626 	beq	r5,zero,c0acd4 <__udivdi3+0x20c>
  c0acbc:	3145c83a 	sub	r2,r6,r5
  c0acc0:	e084d83a 	srl	r2,fp,r2
  c0acc4:	a146983a 	sll	r3,r20,r5
  c0acc8:	e178983a 	sll	fp,fp,r5
  c0accc:	8160983a 	sll	r16,r16,r5
  c0acd0:	18a8b03a 	or	r20,r3,r2
  c0acd4:	802ad43a 	srli	r21,r16,16
  c0acd8:	a009883a 	mov	r4,r20
  c0acdc:	85ffffcc 	andi	r23,r16,65535
  c0ace0:	a80b883a 	mov	r5,r21
  c0ace4:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0ace8:	a009883a 	mov	r4,r20
  c0acec:	a80b883a 	mov	r5,r21
  c0acf0:	102d883a 	mov	r22,r2
  c0acf4:	0c0c0e00 	call	c0c0e0 <__umodsi3>
  c0acf8:	1004943a 	slli	r2,r2,16
  c0acfc:	e006d43a 	srli	r3,fp,16
  c0ad00:	bda3383a 	mul	r17,r23,r22
  c0ad04:	10c4b03a 	or	r2,r2,r3
  c0ad08:	1440042e 	bgeu	r2,r17,c0ad1c <__udivdi3+0x254>
  c0ad0c:	1405883a 	add	r2,r2,r16
  c0ad10:	b5bfffc4 	addi	r22,r22,-1
  c0ad14:	14000136 	bltu	r2,r16,c0ad1c <__udivdi3+0x254>
  c0ad18:	1440d536 	bltu	r2,r17,c0b070 <__udivdi3+0x5a8>
  c0ad1c:	1463c83a 	sub	r17,r2,r17
  c0ad20:	8809883a 	mov	r4,r17
  c0ad24:	a80b883a 	mov	r5,r21
  c0ad28:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0ad2c:	8809883a 	mov	r4,r17
  c0ad30:	a80b883a 	mov	r5,r21
  c0ad34:	1029883a 	mov	r20,r2
  c0ad38:	0c0c0e00 	call	c0c0e0 <__umodsi3>
  c0ad3c:	1004943a 	slli	r2,r2,16
  c0ad40:	bd09383a 	mul	r4,r23,r20
  c0ad44:	e0ffffcc 	andi	r3,fp,65535
  c0ad48:	10c4b03a 	or	r2,r2,r3
  c0ad4c:	1100042e 	bgeu	r2,r4,c0ad60 <__udivdi3+0x298>
  c0ad50:	8085883a 	add	r2,r16,r2
  c0ad54:	a53fffc4 	addi	r20,r20,-1
  c0ad58:	14000136 	bltu	r2,r16,c0ad60 <__udivdi3+0x298>
  c0ad5c:	1100c736 	bltu	r2,r4,c0b07c <__udivdi3+0x5b4>
  c0ad60:	b004943a 	slli	r2,r22,16
  c0ad64:	0009883a 	mov	r4,zero
  c0ad68:	a084b03a 	or	r2,r20,r2
  c0ad6c:	003fb706 	br	c0ac4c <__udivdi3+0x184>
  c0ad70:	00804034 	movhi	r2,256
  c0ad74:	10bfffc4 	addi	r2,r2,-1
  c0ad78:	11c0a436 	bltu	r2,r7,c0b00c <__udivdi3+0x544>
  c0ad7c:	01400404 	movi	r5,16
  c0ad80:	2805883a 	mov	r2,r5
  c0ad84:	003fa406 	br	c0ac18 <__udivdi3+0x150>
  c0ad88:	0005883a 	mov	r2,zero
  c0ad8c:	0009883a 	mov	r4,zero
  c0ad90:	003fae06 	br	c0ac4c <__udivdi3+0x184>
  c0ad94:	00804034 	movhi	r2,256
  c0ad98:	10bfffc4 	addi	r2,r2,-1
  c0ad9c:	1400a136 	bltu	r2,r16,c0b024 <__udivdi3+0x55c>
  c0ada0:	01400404 	movi	r5,16
  c0ada4:	2805883a 	mov	r2,r5
  c0ada8:	003f6006 	br	c0ab2c <__udivdi3+0x64>
  c0adac:	01000044 	movi	r4,1
  c0adb0:	000b883a 	mov	r5,zero
  c0adb4:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0adb8:	1021883a 	mov	r16,r2
  c0adbc:	00bfffd4 	movui	r2,65535
  c0adc0:	143ff436 	bltu	r2,r16,c0ad94 <__udivdi3+0x2cc>
  c0adc4:	003f5506 	br	c0ab1c <__udivdi3+0x54>
  c0adc8:	00804034 	movhi	r2,256
  c0adcc:	10bfffc4 	addi	r2,r2,-1
  c0add0:	12009a36 	bltu	r2,r8,c0b03c <__udivdi3+0x574>
  c0add4:	01400404 	movi	r5,16
  c0add8:	2805883a 	mov	r2,r5
  c0addc:	003fae06 	br	c0ac98 <__udivdi3+0x1d0>
  c0ade0:	3dc5c83a 	sub	r2,r7,r23
  c0ade4:	35c8983a 	sll	r4,r6,r23
  c0ade8:	8086d83a 	srl	r3,r16,r2
  c0adec:	a0a2d83a 	srl	r17,r20,r2
  c0adf0:	e084d83a 	srl	r2,fp,r2
  c0adf4:	20eab03a 	or	r21,r4,r3
  c0adf8:	a82cd43a 	srli	r22,r21,16
  c0adfc:	a5c6983a 	sll	r3,r20,r23
  c0ae00:	8809883a 	mov	r4,r17
  c0ae04:	b00b883a 	mov	r5,r22
  c0ae08:	1886b03a 	or	r3,r3,r2
  c0ae0c:	d8c00215 	stw	r3,8(sp)
  c0ae10:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0ae14:	8809883a 	mov	r4,r17
  c0ae18:	b00b883a 	mov	r5,r22
  c0ae1c:	1029883a 	mov	r20,r2
  c0ae20:	0c0c0e00 	call	c0c0e0 <__umodsi3>
  c0ae24:	a8ffffcc 	andi	r3,r21,65535
  c0ae28:	d8c00515 	stw	r3,20(sp)
  c0ae2c:	d9000217 	ldw	r4,8(sp)
  c0ae30:	d9400517 	ldw	r5,20(sp)
  c0ae34:	1004943a 	slli	r2,r2,16
  c0ae38:	2006d43a 	srli	r3,r4,16
  c0ae3c:	85e0983a 	sll	r16,r16,r23
  c0ae40:	2d23383a 	mul	r17,r5,r20
  c0ae44:	10c4b03a 	or	r2,r2,r3
  c0ae48:	dc000015 	stw	r16,0(sp)
  c0ae4c:	1440032e 	bgeu	r2,r17,c0ae5c <__udivdi3+0x394>
  c0ae50:	1545883a 	add	r2,r2,r21
  c0ae54:	a53fffc4 	addi	r20,r20,-1
  c0ae58:	15407f2e 	bgeu	r2,r21,c0b058 <__udivdi3+0x590>
  c0ae5c:	1463c83a 	sub	r17,r2,r17
  c0ae60:	8809883a 	mov	r4,r17
  c0ae64:	b00b883a 	mov	r5,r22
  c0ae68:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0ae6c:	8809883a 	mov	r4,r17
  c0ae70:	b00b883a 	mov	r5,r22
  c0ae74:	1021883a 	mov	r16,r2
  c0ae78:	0c0c0e00 	call	c0c0e0 <__umodsi3>
  c0ae7c:	d8c00517 	ldw	r3,20(sp)
  c0ae80:	d9000217 	ldw	r4,8(sp)
  c0ae84:	1004943a 	slli	r2,r2,16
  c0ae88:	1c0f383a 	mul	r7,r3,r16
  c0ae8c:	20ffffcc 	andi	r3,r4,65535
  c0ae90:	10e2b03a 	or	r17,r2,r3
  c0ae94:	89c0032e 	bgeu	r17,r7,c0aea4 <__udivdi3+0x3dc>
  c0ae98:	8d63883a 	add	r17,r17,r21
  c0ae9c:	843fffc4 	addi	r16,r16,-1
  c0aea0:	8d40692e 	bgeu	r17,r21,c0b048 <__udivdi3+0x580>
  c0aea4:	a008943a 	slli	r4,r20,16
  c0aea8:	d9400017 	ldw	r5,0(sp)
  c0aeac:	89e3c83a 	sub	r17,r17,r7
  c0aeb0:	8110b03a 	or	r8,r16,r4
  c0aeb4:	280cd43a 	srli	r6,r5,16
  c0aeb8:	28ffffcc 	andi	r3,r5,65535
  c0aebc:	40bfffcc 	andi	r2,r8,65535
  c0aec0:	400ad43a 	srli	r5,r8,16
  c0aec4:	10d3383a 	mul	r9,r2,r3
  c0aec8:	1185383a 	mul	r2,r2,r6
  c0aecc:	28c7383a 	mul	r3,r5,r3
  c0aed0:	4808d43a 	srli	r4,r9,16
  c0aed4:	298b383a 	mul	r5,r5,r6
  c0aed8:	10c5883a 	add	r2,r2,r3
  c0aedc:	2089883a 	add	r4,r4,r2
  c0aee0:	20c0022e 	bgeu	r4,r3,c0aeec <__udivdi3+0x424>
  c0aee4:	00800074 	movhi	r2,1
  c0aee8:	288b883a 	add	r5,r5,r2
  c0aeec:	2004d43a 	srli	r2,r4,16
  c0aef0:	288b883a 	add	r5,r5,r2
  c0aef4:	89403f36 	bltu	r17,r5,c0aff4 <__udivdi3+0x52c>
  c0aef8:	89403926 	beq	r17,r5,c0afe0 <__udivdi3+0x518>
  c0aefc:	4005883a 	mov	r2,r8
  c0af00:	0009883a 	mov	r4,zero
  c0af04:	003f5106 	br	c0ac4c <__udivdi3+0x184>
  c0af08:	85a0983a 	sll	r16,r16,r22
  c0af0c:	3585c83a 	sub	r2,r6,r22
  c0af10:	a0a2d83a 	srl	r17,r20,r2
  c0af14:	802ad43a 	srli	r21,r16,16
  c0af18:	e084d83a 	srl	r2,fp,r2
  c0af1c:	a586983a 	sll	r3,r20,r22
  c0af20:	8809883a 	mov	r4,r17
  c0af24:	a80b883a 	mov	r5,r21
  c0af28:	1886b03a 	or	r3,r3,r2
  c0af2c:	d8c00115 	stw	r3,4(sp)
  c0af30:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0af34:	8809883a 	mov	r4,r17
  c0af38:	a80b883a 	mov	r5,r21
  c0af3c:	d8800415 	stw	r2,16(sp)
  c0af40:	0c0c0e00 	call	c0c0e0 <__umodsi3>
  c0af44:	d9000117 	ldw	r4,4(sp)
  c0af48:	d9400417 	ldw	r5,16(sp)
  c0af4c:	1004943a 	slli	r2,r2,16
  c0af50:	85ffffcc 	andi	r23,r16,65535
  c0af54:	2006d43a 	srli	r3,r4,16
  c0af58:	b963383a 	mul	r17,r23,r5
  c0af5c:	10c4b03a 	or	r2,r2,r3
  c0af60:	1440042e 	bgeu	r2,r17,c0af74 <__udivdi3+0x4ac>
  c0af64:	297fffc4 	addi	r5,r5,-1
  c0af68:	1405883a 	add	r2,r2,r16
  c0af6c:	d9400415 	stw	r5,16(sp)
  c0af70:	1400442e 	bgeu	r2,r16,c0b084 <__udivdi3+0x5bc>
  c0af74:	1463c83a 	sub	r17,r2,r17
  c0af78:	8809883a 	mov	r4,r17
  c0af7c:	a80b883a 	mov	r5,r21
  c0af80:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0af84:	8809883a 	mov	r4,r17
  c0af88:	a80b883a 	mov	r5,r21
  c0af8c:	1029883a 	mov	r20,r2
  c0af90:	0c0c0e00 	call	c0c0e0 <__umodsi3>
  c0af94:	d9400117 	ldw	r5,4(sp)
  c0af98:	1004943a 	slli	r2,r2,16
  c0af9c:	bd09383a 	mul	r4,r23,r20
  c0afa0:	28ffffcc 	andi	r3,r5,65535
  c0afa4:	10c6b03a 	or	r3,r2,r3
  c0afa8:	1900062e 	bgeu	r3,r4,c0afc4 <__udivdi3+0x4fc>
  c0afac:	1c07883a 	add	r3,r3,r16
  c0afb0:	a53fffc4 	addi	r20,r20,-1
  c0afb4:	1c000336 	bltu	r3,r16,c0afc4 <__udivdi3+0x4fc>
  c0afb8:	1900022e 	bgeu	r3,r4,c0afc4 <__udivdi3+0x4fc>
  c0afbc:	a53fffc4 	addi	r20,r20,-1
  c0afc0:	1c07883a 	add	r3,r3,r16
  c0afc4:	d9400417 	ldw	r5,16(sp)
  c0afc8:	e5b8983a 	sll	fp,fp,r22
  c0afcc:	1923c83a 	sub	r17,r3,r4
  c0afd0:	2804943a 	slli	r2,r5,16
  c0afd4:	a0a8b03a 	or	r20,r20,r2
  c0afd8:	dd000315 	stw	r20,12(sp)
  c0afdc:	003ee106 	br	c0ab64 <__udivdi3+0x9c>
  c0afe0:	2004943a 	slli	r2,r4,16
  c0afe4:	e5c8983a 	sll	r4,fp,r23
  c0afe8:	48ffffcc 	andi	r3,r9,65535
  c0afec:	10c5883a 	add	r2,r2,r3
  c0aff0:	20bfc22e 	bgeu	r4,r2,c0aefc <__udivdi3+0x434>
  c0aff4:	40bfffc4 	addi	r2,r8,-1
  c0aff8:	0009883a 	mov	r4,zero
  c0affc:	003f1306 	br	c0ac4c <__udivdi3+0x184>
  c0b000:	01400204 	movi	r5,8
  c0b004:	2805883a 	mov	r2,r5
  c0b008:	003f0306 	br	c0ac18 <__udivdi3+0x150>
  c0b00c:	01400604 	movi	r5,24
  c0b010:	2805883a 	mov	r2,r5
  c0b014:	003f0006 	br	c0ac18 <__udivdi3+0x150>
  c0b018:	01400204 	movi	r5,8
  c0b01c:	2805883a 	mov	r2,r5
  c0b020:	003ec206 	br	c0ab2c <__udivdi3+0x64>
  c0b024:	01400604 	movi	r5,24
  c0b028:	2805883a 	mov	r2,r5
  c0b02c:	003ebf06 	br	c0ab2c <__udivdi3+0x64>
  c0b030:	01400204 	movi	r5,8
  c0b034:	2805883a 	mov	r2,r5
  c0b038:	003f1706 	br	c0ac98 <__udivdi3+0x1d0>
  c0b03c:	01400604 	movi	r5,24
  c0b040:	2805883a 	mov	r2,r5
  c0b044:	003f1406 	br	c0ac98 <__udivdi3+0x1d0>
  c0b048:	89ff962e 	bgeu	r17,r7,c0aea4 <__udivdi3+0x3dc>
  c0b04c:	8d63883a 	add	r17,r17,r21
  c0b050:	843fffc4 	addi	r16,r16,-1
  c0b054:	003f9306 	br	c0aea4 <__udivdi3+0x3dc>
  c0b058:	147f802e 	bgeu	r2,r17,c0ae5c <__udivdi3+0x394>
  c0b05c:	a53fffc4 	addi	r20,r20,-1
  c0b060:	1545883a 	add	r2,r2,r21
  c0b064:	003f7d06 	br	c0ae5c <__udivdi3+0x394>
  c0b068:	a53fffc4 	addi	r20,r20,-1
  c0b06c:	003ede06 	br	c0abe8 <__udivdi3+0x120>
  c0b070:	b5bfffc4 	addi	r22,r22,-1
  c0b074:	1405883a 	add	r2,r2,r16
  c0b078:	003f2806 	br	c0ad1c <__udivdi3+0x254>
  c0b07c:	a53fffc4 	addi	r20,r20,-1
  c0b080:	003f3706 	br	c0ad60 <__udivdi3+0x298>
  c0b084:	147fbb2e 	bgeu	r2,r17,c0af74 <__udivdi3+0x4ac>
  c0b088:	297fffc4 	addi	r5,r5,-1
  c0b08c:	1405883a 	add	r2,r2,r16
  c0b090:	d9400415 	stw	r5,16(sp)
  c0b094:	003fb706 	br	c0af74 <__udivdi3+0x4ac>
  c0b098:	b5bfffc4 	addi	r22,r22,-1
  c0b09c:	1405883a 	add	r2,r2,r16
  c0b0a0:	003ec006 	br	c0aba4 <__udivdi3+0xdc>

00c0b0a4 <__umoddi3>:
  c0b0a4:	defff104 	addi	sp,sp,-60
  c0b0a8:	dd800b15 	stw	r22,44(sp)
  c0b0ac:	dd000915 	stw	r20,36(sp)
  c0b0b0:	dc000515 	stw	r16,20(sp)
  c0b0b4:	dfc00e15 	stw	ra,56(sp)
  c0b0b8:	df000d15 	stw	fp,52(sp)
  c0b0bc:	ddc00c15 	stw	r23,48(sp)
  c0b0c0:	dd400a15 	stw	r21,40(sp)
  c0b0c4:	dcc00815 	stw	r19,32(sp)
  c0b0c8:	dc800715 	stw	r18,28(sp)
  c0b0cc:	dc400615 	stw	r17,24(sp)
  c0b0d0:	3021883a 	mov	r16,r6
  c0b0d4:	202d883a 	mov	r22,r4
  c0b0d8:	2829883a 	mov	r20,r5
  c0b0dc:	38002b1e 	bne	r7,zero,c0b18c <__umoddi3+0xe8>
  c0b0e0:	29805036 	bltu	r5,r6,c0b224 <__umoddi3+0x180>
  c0b0e4:	30008a26 	beq	r6,zero,c0b310 <__umoddi3+0x26c>
  c0b0e8:	00bfffd4 	movui	r2,65535
  c0b0ec:	14008236 	bltu	r2,r16,c0b2f8 <__umoddi3+0x254>
  c0b0f0:	00803fc4 	movi	r2,255
  c0b0f4:	14013636 	bltu	r2,r16,c0b5d0 <__umoddi3+0x52c>
  c0b0f8:	000b883a 	mov	r5,zero
  c0b0fc:	0005883a 	mov	r2,zero
  c0b100:	8084d83a 	srl	r2,r16,r2
  c0b104:	01003074 	movhi	r4,193
  c0b108:	2101b804 	addi	r4,r4,1760
  c0b10c:	01800804 	movi	r6,32
  c0b110:	1105883a 	add	r2,r2,r4
  c0b114:	10c00003 	ldbu	r3,0(r2)
  c0b118:	28c7883a 	add	r3,r5,r3
  c0b11c:	30efc83a 	sub	r23,r6,r3
  c0b120:	b800941e 	bne	r23,zero,c0b374 <__umoddi3+0x2d0>
  c0b124:	802ad43a 	srli	r21,r16,16
  c0b128:	a423c83a 	sub	r17,r20,r16
  c0b12c:	0039883a 	mov	fp,zero
  c0b130:	853fffcc 	andi	r20,r16,65535
  c0b134:	8809883a 	mov	r4,r17
  c0b138:	a80b883a 	mov	r5,r21
  c0b13c:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0b140:	8809883a 	mov	r4,r17
  c0b144:	a80b883a 	mov	r5,r21
  c0b148:	a0a3383a 	mul	r17,r20,r2
  c0b14c:	0c0c0e00 	call	c0c0e0 <__umodsi3>
  c0b150:	1004943a 	slli	r2,r2,16
  c0b154:	b006d43a 	srli	r3,r22,16
  c0b158:	10c4b03a 	or	r2,r2,r3
  c0b15c:	1440032e 	bgeu	r2,r17,c0b16c <__umoddi3+0xc8>
  c0b160:	1405883a 	add	r2,r2,r16
  c0b164:	14000136 	bltu	r2,r16,c0b16c <__umoddi3+0xc8>
  c0b168:	14413536 	bltu	r2,r17,c0b640 <__umoddi3+0x59c>
  c0b16c:	1463c83a 	sub	r17,r2,r17
  c0b170:	8809883a 	mov	r4,r17
  c0b174:	a80b883a 	mov	r5,r21
  c0b178:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0b17c:	8809883a 	mov	r4,r17
  c0b180:	a0a3383a 	mul	r17,r20,r2
  c0b184:	a80b883a 	mov	r5,r21
  c0b188:	00004d06 	br	c0b2c0 <__umoddi3+0x21c>
  c0b18c:	380d883a 	mov	r6,r7
  c0b190:	29c0102e 	bgeu	r5,r7,c0b1d4 <__umoddi3+0x130>
  c0b194:	2011883a 	mov	r8,r4
  c0b198:	2813883a 	mov	r9,r5
  c0b19c:	4005883a 	mov	r2,r8
  c0b1a0:	4807883a 	mov	r3,r9
  c0b1a4:	dfc00e17 	ldw	ra,56(sp)
  c0b1a8:	df000d17 	ldw	fp,52(sp)
  c0b1ac:	ddc00c17 	ldw	r23,48(sp)
  c0b1b0:	dd800b17 	ldw	r22,44(sp)
  c0b1b4:	dd400a17 	ldw	r21,40(sp)
  c0b1b8:	dd000917 	ldw	r20,36(sp)
  c0b1bc:	dcc00817 	ldw	r19,32(sp)
  c0b1c0:	dc800717 	ldw	r18,28(sp)
  c0b1c4:	dc400617 	ldw	r17,24(sp)
  c0b1c8:	dc000517 	ldw	r16,20(sp)
  c0b1cc:	dec00f04 	addi	sp,sp,60
  c0b1d0:	f800283a 	ret
  c0b1d4:	00bfffd4 	movui	r2,65535
  c0b1d8:	11c05a36 	bltu	r2,r7,c0b344 <__umoddi3+0x2a0>
  c0b1dc:	00803fc4 	movi	r2,255
  c0b1e0:	11c0fe36 	bltu	r2,r7,c0b5dc <__umoddi3+0x538>
  c0b1e4:	000b883a 	mov	r5,zero
  c0b1e8:	0005883a 	mov	r2,zero
  c0b1ec:	3084d83a 	srl	r2,r6,r2
  c0b1f0:	01003074 	movhi	r4,193
  c0b1f4:	2101b804 	addi	r4,r4,1760
  c0b1f8:	01c00804 	movi	r7,32
  c0b1fc:	1105883a 	add	r2,r2,r4
  c0b200:	10c00003 	ldbu	r3,0(r2)
  c0b204:	28c7883a 	add	r3,r5,r3
  c0b208:	38ebc83a 	sub	r21,r7,r3
  c0b20c:	a800851e 	bne	r21,zero,c0b424 <__umoddi3+0x380>
  c0b210:	35005236 	bltu	r6,r20,c0b35c <__umoddi3+0x2b8>
  c0b214:	b400512e 	bgeu	r22,r16,c0b35c <__umoddi3+0x2b8>
  c0b218:	b011883a 	mov	r8,r22
  c0b21c:	a013883a 	mov	r9,r20
  c0b220:	003fde06 	br	c0b19c <__umoddi3+0xf8>
  c0b224:	00bfffd4 	movui	r2,65535
  c0b228:	11804036 	bltu	r2,r6,c0b32c <__umoddi3+0x288>
  c0b22c:	00803fc4 	movi	r2,255
  c0b230:	1180ed36 	bltu	r2,r6,c0b5e8 <__umoddi3+0x544>
  c0b234:	000b883a 	mov	r5,zero
  c0b238:	0005883a 	mov	r2,zero
  c0b23c:	8084d83a 	srl	r2,r16,r2
  c0b240:	01003074 	movhi	r4,193
  c0b244:	2101b804 	addi	r4,r4,1760
  c0b248:	01800804 	movi	r6,32
  c0b24c:	1105883a 	add	r2,r2,r4
  c0b250:	10c00003 	ldbu	r3,0(r2)
  c0b254:	28c7883a 	add	r3,r5,r3
  c0b258:	30c7c83a 	sub	r3,r6,r3
  c0b25c:	1800bf1e 	bne	r3,zero,c0b55c <__umoddi3+0x4b8>
  c0b260:	0039883a 	mov	fp,zero
  c0b264:	802ad43a 	srli	r21,r16,16
  c0b268:	a009883a 	mov	r4,r20
  c0b26c:	85ffffcc 	andi	r23,r16,65535
  c0b270:	a80b883a 	mov	r5,r21
  c0b274:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0b278:	a009883a 	mov	r4,r20
  c0b27c:	a80b883a 	mov	r5,r21
  c0b280:	b8a3383a 	mul	r17,r23,r2
  c0b284:	0c0c0e00 	call	c0c0e0 <__umodsi3>
  c0b288:	1004943a 	slli	r2,r2,16
  c0b28c:	b006d43a 	srli	r3,r22,16
  c0b290:	10c4b03a 	or	r2,r2,r3
  c0b294:	1440032e 	bgeu	r2,r17,c0b2a4 <__umoddi3+0x200>
  c0b298:	1405883a 	add	r2,r2,r16
  c0b29c:	14000136 	bltu	r2,r16,c0b2a4 <__umoddi3+0x200>
  c0b2a0:	1440e536 	bltu	r2,r17,c0b638 <__umoddi3+0x594>
  c0b2a4:	1463c83a 	sub	r17,r2,r17
  c0b2a8:	8809883a 	mov	r4,r17
  c0b2ac:	a80b883a 	mov	r5,r21
  c0b2b0:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0b2b4:	8809883a 	mov	r4,r17
  c0b2b8:	b8a3383a 	mul	r17,r23,r2
  c0b2bc:	a80b883a 	mov	r5,r21
  c0b2c0:	0c0c0e00 	call	c0c0e0 <__umodsi3>
  c0b2c4:	1004943a 	slli	r2,r2,16
  c0b2c8:	b0ffffcc 	andi	r3,r22,65535
  c0b2cc:	10c4b03a 	or	r2,r2,r3
  c0b2d0:	1440042e 	bgeu	r2,r17,c0b2e4 <__umoddi3+0x240>
  c0b2d4:	1405883a 	add	r2,r2,r16
  c0b2d8:	14000236 	bltu	r2,r16,c0b2e4 <__umoddi3+0x240>
  c0b2dc:	1440012e 	bgeu	r2,r17,c0b2e4 <__umoddi3+0x240>
  c0b2e0:	1405883a 	add	r2,r2,r16
  c0b2e4:	1445c83a 	sub	r2,r2,r17
  c0b2e8:	1724d83a 	srl	r18,r2,fp
  c0b2ec:	0013883a 	mov	r9,zero
  c0b2f0:	9011883a 	mov	r8,r18
  c0b2f4:	003fa906 	br	c0b19c <__umoddi3+0xf8>
  c0b2f8:	00804034 	movhi	r2,256
  c0b2fc:	10bfffc4 	addi	r2,r2,-1
  c0b300:	1400b036 	bltu	r2,r16,c0b5c4 <__umoddi3+0x520>
  c0b304:	01400404 	movi	r5,16
  c0b308:	2805883a 	mov	r2,r5
  c0b30c:	003f7c06 	br	c0b100 <__umoddi3+0x5c>
  c0b310:	01000044 	movi	r4,1
  c0b314:	000b883a 	mov	r5,zero
  c0b318:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0b31c:	1021883a 	mov	r16,r2
  c0b320:	00bfffd4 	movui	r2,65535
  c0b324:	143ff436 	bltu	r2,r16,c0b2f8 <__umoddi3+0x254>
  c0b328:	003f7106 	br	c0b0f0 <__umoddi3+0x4c>
  c0b32c:	00804034 	movhi	r2,256
  c0b330:	10bfffc4 	addi	r2,r2,-1
  c0b334:	1180af36 	bltu	r2,r6,c0b5f4 <__umoddi3+0x550>
  c0b338:	01400404 	movi	r5,16
  c0b33c:	2805883a 	mov	r2,r5
  c0b340:	003fbe06 	br	c0b23c <__umoddi3+0x198>
  c0b344:	00804034 	movhi	r2,256
  c0b348:	10bfffc4 	addi	r2,r2,-1
  c0b34c:	11c0ac36 	bltu	r2,r7,c0b600 <__umoddi3+0x55c>
  c0b350:	01400404 	movi	r5,16
  c0b354:	2805883a 	mov	r2,r5
  c0b358:	003fa406 	br	c0b1ec <__umoddi3+0x148>
  c0b35c:	b409c83a 	sub	r4,r22,r16
  c0b360:	b105803a 	cmpltu	r2,r22,r4
  c0b364:	a187c83a 	sub	r3,r20,r6
  c0b368:	18a9c83a 	sub	r20,r3,r2
  c0b36c:	202d883a 	mov	r22,r4
  c0b370:	003fa906 	br	c0b218 <__umoddi3+0x174>
  c0b374:	85e0983a 	sll	r16,r16,r23
  c0b378:	35c5c83a 	sub	r2,r6,r23
  c0b37c:	a0a2d83a 	srl	r17,r20,r2
  c0b380:	802ad43a 	srli	r21,r16,16
  c0b384:	b084d83a 	srl	r2,r22,r2
  c0b388:	a5c6983a 	sll	r3,r20,r23
  c0b38c:	8809883a 	mov	r4,r17
  c0b390:	a80b883a 	mov	r5,r21
  c0b394:	1886b03a 	or	r3,r3,r2
  c0b398:	d8c00115 	stw	r3,4(sp)
  c0b39c:	853fffcc 	andi	r20,r16,65535
  c0b3a0:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0b3a4:	8809883a 	mov	r4,r17
  c0b3a8:	a80b883a 	mov	r5,r21
  c0b3ac:	a0a3383a 	mul	r17,r20,r2
  c0b3b0:	0c0c0e00 	call	c0c0e0 <__umodsi3>
  c0b3b4:	d9000117 	ldw	r4,4(sp)
  c0b3b8:	1004943a 	slli	r2,r2,16
  c0b3bc:	b839883a 	mov	fp,r23
  c0b3c0:	2006d43a 	srli	r3,r4,16
  c0b3c4:	10c4b03a 	or	r2,r2,r3
  c0b3c8:	1440022e 	bgeu	r2,r17,c0b3d4 <__umoddi3+0x330>
  c0b3cc:	1405883a 	add	r2,r2,r16
  c0b3d0:	1400962e 	bgeu	r2,r16,c0b62c <__umoddi3+0x588>
  c0b3d4:	1463c83a 	sub	r17,r2,r17
  c0b3d8:	8809883a 	mov	r4,r17
  c0b3dc:	a80b883a 	mov	r5,r21
  c0b3e0:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0b3e4:	8809883a 	mov	r4,r17
  c0b3e8:	a80b883a 	mov	r5,r21
  c0b3ec:	a0a3383a 	mul	r17,r20,r2
  c0b3f0:	0c0c0e00 	call	c0c0e0 <__umodsi3>
  c0b3f4:	d9400117 	ldw	r5,4(sp)
  c0b3f8:	1004943a 	slli	r2,r2,16
  c0b3fc:	28ffffcc 	andi	r3,r5,65535
  c0b400:	10c4b03a 	or	r2,r2,r3
  c0b404:	1440042e 	bgeu	r2,r17,c0b418 <__umoddi3+0x374>
  c0b408:	1405883a 	add	r2,r2,r16
  c0b40c:	14000236 	bltu	r2,r16,c0b418 <__umoddi3+0x374>
  c0b410:	1440012e 	bgeu	r2,r17,c0b418 <__umoddi3+0x374>
  c0b414:	1405883a 	add	r2,r2,r16
  c0b418:	b5ec983a 	sll	r22,r22,r23
  c0b41c:	1463c83a 	sub	r17,r2,r17
  c0b420:	003f4406 	br	c0b134 <__umoddi3+0x90>
  c0b424:	3d4fc83a 	sub	r7,r7,r21
  c0b428:	3546983a 	sll	r3,r6,r21
  c0b42c:	81c4d83a 	srl	r2,r16,r7
  c0b430:	a1e2d83a 	srl	r17,r20,r7
  c0b434:	a54c983a 	sll	r6,r20,r21
  c0b438:	18aeb03a 	or	r23,r3,r2
  c0b43c:	b828d43a 	srli	r20,r23,16
  c0b440:	b1c4d83a 	srl	r2,r22,r7
  c0b444:	8809883a 	mov	r4,r17
  c0b448:	a00b883a 	mov	r5,r20
  c0b44c:	308cb03a 	or	r6,r6,r2
  c0b450:	d9c00315 	stw	r7,12(sp)
  c0b454:	d9800215 	stw	r6,8(sp)
  c0b458:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0b45c:	8809883a 	mov	r4,r17
  c0b460:	a00b883a 	mov	r5,r20
  c0b464:	1039883a 	mov	fp,r2
  c0b468:	0c0c0e00 	call	c0c0e0 <__umodsi3>
  c0b46c:	b8ffffcc 	andi	r3,r23,65535
  c0b470:	d8c00415 	stw	r3,16(sp)
  c0b474:	d9000217 	ldw	r4,8(sp)
  c0b478:	d9400417 	ldw	r5,16(sp)
  c0b47c:	1004943a 	slli	r2,r2,16
  c0b480:	2006d43a 	srli	r3,r4,16
  c0b484:	8560983a 	sll	r16,r16,r21
  c0b488:	2f23383a 	mul	r17,r5,fp
  c0b48c:	10c4b03a 	or	r2,r2,r3
  c0b490:	dc000015 	stw	r16,0(sp)
  c0b494:	b56c983a 	sll	r22,r22,r21
  c0b498:	1440032e 	bgeu	r2,r17,c0b4a8 <__umoddi3+0x404>
  c0b49c:	15c5883a 	add	r2,r2,r23
  c0b4a0:	e73fffc4 	addi	fp,fp,-1
  c0b4a4:	15c05d2e 	bgeu	r2,r23,c0b61c <__umoddi3+0x578>
  c0b4a8:	1463c83a 	sub	r17,r2,r17
  c0b4ac:	8809883a 	mov	r4,r17
  c0b4b0:	a00b883a 	mov	r5,r20
  c0b4b4:	0c0c0d80 	call	c0c0d8 <__udivsi3>
  c0b4b8:	8809883a 	mov	r4,r17
  c0b4bc:	a00b883a 	mov	r5,r20
  c0b4c0:	1021883a 	mov	r16,r2
  c0b4c4:	0c0c0e00 	call	c0c0e0 <__umodsi3>
  c0b4c8:	d8c00417 	ldw	r3,16(sp)
  c0b4cc:	d9000217 	ldw	r4,8(sp)
  c0b4d0:	1004943a 	slli	r2,r2,16
  c0b4d4:	1c23383a 	mul	r17,r3,r16
  c0b4d8:	20ffffcc 	andi	r3,r4,65535
  c0b4dc:	10ceb03a 	or	r7,r2,r3
  c0b4e0:	3c40032e 	bgeu	r7,r17,c0b4f0 <__umoddi3+0x44c>
  c0b4e4:	3dcf883a 	add	r7,r7,r23
  c0b4e8:	843fffc4 	addi	r16,r16,-1
  c0b4ec:	3dc0472e 	bgeu	r7,r23,c0b60c <__umoddi3+0x568>
  c0b4f0:	e004943a 	slli	r2,fp,16
  c0b4f4:	d9400017 	ldw	r5,0(sp)
  c0b4f8:	3c4fc83a 	sub	r7,r7,r17
  c0b4fc:	8084b03a 	or	r2,r16,r2
  c0b500:	28ffffcc 	andi	r3,r5,65535
  c0b504:	280cd43a 	srli	r6,r5,16
  c0b508:	100ad43a 	srli	r5,r2,16
  c0b50c:	10bfffcc 	andi	r2,r2,65535
  c0b510:	10d1383a 	mul	r8,r2,r3
  c0b514:	28c7383a 	mul	r3,r5,r3
  c0b518:	1185383a 	mul	r2,r2,r6
  c0b51c:	4008d43a 	srli	r4,r8,16
  c0b520:	298b383a 	mul	r5,r5,r6
  c0b524:	10c5883a 	add	r2,r2,r3
  c0b528:	2089883a 	add	r4,r4,r2
  c0b52c:	20c0022e 	bgeu	r4,r3,c0b538 <__umoddi3+0x494>
  c0b530:	00800074 	movhi	r2,1
  c0b534:	288b883a 	add	r5,r5,r2
  c0b538:	2004d43a 	srli	r2,r4,16
  c0b53c:	2008943a 	slli	r4,r4,16
  c0b540:	40ffffcc 	andi	r3,r8,65535
  c0b544:	288b883a 	add	r5,r5,r2
  c0b548:	20c9883a 	add	r4,r4,r3
  c0b54c:	39400b36 	bltu	r7,r5,c0b57c <__umoddi3+0x4d8>
  c0b550:	39403d26 	beq	r7,r5,c0b648 <__umoddi3+0x5a4>
  c0b554:	394bc83a 	sub	r5,r7,r5
  c0b558:	00000f06 	br	c0b598 <__umoddi3+0x4f4>
  c0b55c:	30c5c83a 	sub	r2,r6,r3
  c0b560:	1839883a 	mov	fp,r3
  c0b564:	b084d83a 	srl	r2,r22,r2
  c0b568:	a0c6983a 	sll	r3,r20,r3
  c0b56c:	8720983a 	sll	r16,r16,fp
  c0b570:	b72c983a 	sll	r22,r22,fp
  c0b574:	18a8b03a 	or	r20,r3,r2
  c0b578:	003f3a06 	br	c0b264 <__umoddi3+0x1c0>
  c0b57c:	d8c00017 	ldw	r3,0(sp)
  c0b580:	20c5c83a 	sub	r2,r4,r3
  c0b584:	2089803a 	cmpltu	r4,r4,r2
  c0b588:	2dc7c83a 	sub	r3,r5,r23
  c0b58c:	1907c83a 	sub	r3,r3,r4
  c0b590:	38cbc83a 	sub	r5,r7,r3
  c0b594:	1009883a 	mov	r4,r2
  c0b598:	b105c83a 	sub	r2,r22,r4
  c0b59c:	b087803a 	cmpltu	r3,r22,r2
  c0b5a0:	28c7c83a 	sub	r3,r5,r3
  c0b5a4:	d9400317 	ldw	r5,12(sp)
  c0b5a8:	1544d83a 	srl	r2,r2,r21
  c0b5ac:	1948983a 	sll	r4,r3,r5
  c0b5b0:	1d46d83a 	srl	r3,r3,r21
  c0b5b4:	20a4b03a 	or	r18,r4,r2
  c0b5b8:	9011883a 	mov	r8,r18
  c0b5bc:	1813883a 	mov	r9,r3
  c0b5c0:	003ef606 	br	c0b19c <__umoddi3+0xf8>
  c0b5c4:	01400604 	movi	r5,24
  c0b5c8:	2805883a 	mov	r2,r5
  c0b5cc:	003ecc06 	br	c0b100 <__umoddi3+0x5c>
  c0b5d0:	01400204 	movi	r5,8
  c0b5d4:	2805883a 	mov	r2,r5
  c0b5d8:	003ec906 	br	c0b100 <__umoddi3+0x5c>
  c0b5dc:	01400204 	movi	r5,8
  c0b5e0:	2805883a 	mov	r2,r5
  c0b5e4:	003f0106 	br	c0b1ec <__umoddi3+0x148>
  c0b5e8:	01400204 	movi	r5,8
  c0b5ec:	2805883a 	mov	r2,r5
  c0b5f0:	003f1206 	br	c0b23c <__umoddi3+0x198>
  c0b5f4:	01400604 	movi	r5,24
  c0b5f8:	2805883a 	mov	r2,r5
  c0b5fc:	003f0f06 	br	c0b23c <__umoddi3+0x198>
  c0b600:	01400604 	movi	r5,24
  c0b604:	2805883a 	mov	r2,r5
  c0b608:	003ef806 	br	c0b1ec <__umoddi3+0x148>
  c0b60c:	3c7fb82e 	bgeu	r7,r17,c0b4f0 <__umoddi3+0x44c>
  c0b610:	843fffc4 	addi	r16,r16,-1
  c0b614:	3dcf883a 	add	r7,r7,r23
  c0b618:	003fb506 	br	c0b4f0 <__umoddi3+0x44c>
  c0b61c:	147fa22e 	bgeu	r2,r17,c0b4a8 <__umoddi3+0x404>
  c0b620:	e73fffc4 	addi	fp,fp,-1
  c0b624:	15c5883a 	add	r2,r2,r23
  c0b628:	003f9f06 	br	c0b4a8 <__umoddi3+0x404>
  c0b62c:	147f692e 	bgeu	r2,r17,c0b3d4 <__umoddi3+0x330>
  c0b630:	1405883a 	add	r2,r2,r16
  c0b634:	003f6706 	br	c0b3d4 <__umoddi3+0x330>
  c0b638:	1405883a 	add	r2,r2,r16
  c0b63c:	003f1906 	br	c0b2a4 <__umoddi3+0x200>
  c0b640:	1405883a 	add	r2,r2,r16
  c0b644:	003ec906 	br	c0b16c <__umoddi3+0xc8>
  c0b648:	b13fcc36 	bltu	r22,r4,c0b57c <__umoddi3+0x4d8>
  c0b64c:	000b883a 	mov	r5,zero
  c0b650:	003fd106 	br	c0b598 <__umoddi3+0x4f4>

00c0b654 <__muldf3>:
  c0b654:	deffe004 	addi	sp,sp,-128
  c0b658:	dc401815 	stw	r17,96(sp)
  c0b65c:	dc400404 	addi	r17,sp,16
  c0b660:	2011883a 	mov	r8,r4
  c0b664:	2813883a 	mov	r9,r5
  c0b668:	dc001715 	stw	r16,92(sp)
  c0b66c:	d809883a 	mov	r4,sp
  c0b670:	880b883a 	mov	r5,r17
  c0b674:	dc000904 	addi	r16,sp,36
  c0b678:	dfc01f15 	stw	ra,124(sp)
  c0b67c:	da400115 	stw	r9,4(sp)
  c0b680:	d9c00315 	stw	r7,12(sp)
  c0b684:	da000015 	stw	r8,0(sp)
  c0b688:	d9800215 	stw	r6,8(sp)
  c0b68c:	ddc01e15 	stw	r23,120(sp)
  c0b690:	dd801d15 	stw	r22,116(sp)
  c0b694:	dd401c15 	stw	r21,112(sp)
  c0b698:	dd001b15 	stw	r20,108(sp)
  c0b69c:	dcc01a15 	stw	r19,104(sp)
  c0b6a0:	dc801915 	stw	r18,100(sp)
  c0b6a4:	0c034d00 	call	c034d0 <__unpack_d>
  c0b6a8:	d9000204 	addi	r4,sp,8
  c0b6ac:	800b883a 	mov	r5,r16
  c0b6b0:	0c034d00 	call	c034d0 <__unpack_d>
  c0b6b4:	d9000417 	ldw	r4,16(sp)
  c0b6b8:	00800044 	movi	r2,1
  c0b6bc:	1100102e 	bgeu	r2,r4,c0b700 <__muldf3+0xac>
  c0b6c0:	d8c00917 	ldw	r3,36(sp)
  c0b6c4:	10c0062e 	bgeu	r2,r3,c0b6e0 <__muldf3+0x8c>
  c0b6c8:	00800104 	movi	r2,4
  c0b6cc:	20800a26 	beq	r4,r2,c0b6f8 <__muldf3+0xa4>
  c0b6d0:	1880cc26 	beq	r3,r2,c0ba04 <__muldf3+0x3b0>
  c0b6d4:	00800084 	movi	r2,2
  c0b6d8:	20800926 	beq	r4,r2,c0b700 <__muldf3+0xac>
  c0b6dc:	1880191e 	bne	r3,r2,c0b744 <__muldf3+0xf0>
  c0b6e0:	d8c00a17 	ldw	r3,40(sp)
  c0b6e4:	d8800517 	ldw	r2,20(sp)
  c0b6e8:	8009883a 	mov	r4,r16
  c0b6ec:	10c4c03a 	cmpne	r2,r2,r3
  c0b6f0:	d8800a15 	stw	r2,40(sp)
  c0b6f4:	00000706 	br	c0b714 <__muldf3+0xc0>
  c0b6f8:	00800084 	movi	r2,2
  c0b6fc:	1880c326 	beq	r3,r2,c0ba0c <__muldf3+0x3b8>
  c0b700:	d8800517 	ldw	r2,20(sp)
  c0b704:	d8c00a17 	ldw	r3,40(sp)
  c0b708:	8809883a 	mov	r4,r17
  c0b70c:	10c4c03a 	cmpne	r2,r2,r3
  c0b710:	d8800515 	stw	r2,20(sp)
  c0b714:	0c031bc0 	call	c031bc <__pack_d>
  c0b718:	dfc01f17 	ldw	ra,124(sp)
  c0b71c:	ddc01e17 	ldw	r23,120(sp)
  c0b720:	dd801d17 	ldw	r22,116(sp)
  c0b724:	dd401c17 	ldw	r21,112(sp)
  c0b728:	dd001b17 	ldw	r20,108(sp)
  c0b72c:	dcc01a17 	ldw	r19,104(sp)
  c0b730:	dc801917 	ldw	r18,100(sp)
  c0b734:	dc401817 	ldw	r17,96(sp)
  c0b738:	dc001717 	ldw	r16,92(sp)
  c0b73c:	dec02004 	addi	sp,sp,128
  c0b740:	f800283a 	ret
  c0b744:	dd800717 	ldw	r22,28(sp)
  c0b748:	dc800c17 	ldw	r18,48(sp)
  c0b74c:	002b883a 	mov	r21,zero
  c0b750:	0023883a 	mov	r17,zero
  c0b754:	a80b883a 	mov	r5,r21
  c0b758:	b00d883a 	mov	r6,r22
  c0b75c:	880f883a 	mov	r7,r17
  c0b760:	ddc00817 	ldw	r23,32(sp)
  c0b764:	dcc00d17 	ldw	r19,52(sp)
  c0b768:	9009883a 	mov	r4,r18
  c0b76c:	0c02da80 	call	c02da8 <__muldi3>
  c0b770:	001b883a 	mov	r13,zero
  c0b774:	680f883a 	mov	r7,r13
  c0b778:	b009883a 	mov	r4,r22
  c0b77c:	000b883a 	mov	r5,zero
  c0b780:	980d883a 	mov	r6,r19
  c0b784:	b82d883a 	mov	r22,r23
  c0b788:	002f883a 	mov	r23,zero
  c0b78c:	db401615 	stw	r13,88(sp)
  c0b790:	d8801315 	stw	r2,76(sp)
  c0b794:	d8c01415 	stw	r3,80(sp)
  c0b798:	dcc01515 	stw	r19,84(sp)
  c0b79c:	0c02da80 	call	c02da8 <__muldi3>
  c0b7a0:	b00d883a 	mov	r6,r22
  c0b7a4:	000b883a 	mov	r5,zero
  c0b7a8:	9009883a 	mov	r4,r18
  c0b7ac:	b80f883a 	mov	r7,r23
  c0b7b0:	1021883a 	mov	r16,r2
  c0b7b4:	1823883a 	mov	r17,r3
  c0b7b8:	0c02da80 	call	c02da8 <__muldi3>
  c0b7bc:	8085883a 	add	r2,r16,r2
  c0b7c0:	140d803a 	cmpltu	r6,r2,r16
  c0b7c4:	88c7883a 	add	r3,r17,r3
  c0b7c8:	30cd883a 	add	r6,r6,r3
  c0b7cc:	1029883a 	mov	r20,r2
  c0b7d0:	302b883a 	mov	r21,r6
  c0b7d4:	da801317 	ldw	r10,76(sp)
  c0b7d8:	dac01417 	ldw	r11,80(sp)
  c0b7dc:	db001517 	ldw	r12,84(sp)
  c0b7e0:	db401617 	ldw	r13,88(sp)
  c0b7e4:	3440612e 	bgeu	r6,r17,c0b96c <__muldf3+0x318>
  c0b7e8:	0009883a 	mov	r4,zero
  c0b7ec:	5105883a 	add	r2,r10,r4
  c0b7f0:	128d803a 	cmpltu	r6,r2,r10
  c0b7f4:	5d07883a 	add	r3,r11,r20
  c0b7f8:	30cd883a 	add	r6,r6,r3
  c0b7fc:	0021883a 	mov	r16,zero
  c0b800:	04400044 	movi	r17,1
  c0b804:	1025883a 	mov	r18,r2
  c0b808:	3027883a 	mov	r19,r6
  c0b80c:	32c06236 	bltu	r6,r11,c0b998 <__muldf3+0x344>
  c0b810:	59807a26 	beq	r11,r6,c0b9fc <__muldf3+0x3a8>
  c0b814:	680b883a 	mov	r5,r13
  c0b818:	b80f883a 	mov	r7,r23
  c0b81c:	6009883a 	mov	r4,r12
  c0b820:	b00d883a 	mov	r6,r22
  c0b824:	0c02da80 	call	c02da8 <__muldi3>
  c0b828:	1009883a 	mov	r4,r2
  c0b82c:	000f883a 	mov	r7,zero
  c0b830:	1545883a 	add	r2,r2,r21
  c0b834:	1111803a 	cmpltu	r8,r2,r4
  c0b838:	19c7883a 	add	r3,r3,r7
  c0b83c:	40c7883a 	add	r3,r8,r3
  c0b840:	88cb883a 	add	r5,r17,r3
  c0b844:	d8c00617 	ldw	r3,24(sp)
  c0b848:	8089883a 	add	r4,r16,r2
  c0b84c:	d8800b17 	ldw	r2,44(sp)
  c0b850:	18c00104 	addi	r3,r3,4
  c0b854:	240d803a 	cmpltu	r6,r4,r16
  c0b858:	10c7883a 	add	r3,r2,r3
  c0b85c:	2013883a 	mov	r9,r4
  c0b860:	d8800a17 	ldw	r2,40(sp)
  c0b864:	d9000517 	ldw	r4,20(sp)
  c0b868:	314d883a 	add	r6,r6,r5
  c0b86c:	3015883a 	mov	r10,r6
  c0b870:	2088c03a 	cmpne	r4,r4,r2
  c0b874:	00880034 	movhi	r2,8192
  c0b878:	10bfffc4 	addi	r2,r2,-1
  c0b87c:	d9000f15 	stw	r4,60(sp)
  c0b880:	d8c01015 	stw	r3,64(sp)
  c0b884:	1180162e 	bgeu	r2,r6,c0b8e0 <__muldf3+0x28c>
  c0b888:	1811883a 	mov	r8,r3
  c0b88c:	101f883a 	mov	r15,r2
  c0b890:	980497fa 	slli	r2,r19,31
  c0b894:	9016d07a 	srli	r11,r18,1
  c0b898:	500697fa 	slli	r3,r10,31
  c0b89c:	480cd07a 	srli	r6,r9,1
  c0b8a0:	500ed07a 	srli	r7,r10,1
  c0b8a4:	12d6b03a 	or	r11,r2,r11
  c0b8a8:	00800044 	movi	r2,1
  c0b8ac:	198cb03a 	or	r6,r3,r6
  c0b8b0:	4888703a 	and	r4,r9,r2
  c0b8b4:	9818d07a 	srli	r12,r19,1
  c0b8b8:	001b883a 	mov	r13,zero
  c0b8bc:	03a00034 	movhi	r14,32768
  c0b8c0:	3013883a 	mov	r9,r6
  c0b8c4:	3815883a 	mov	r10,r7
  c0b8c8:	4091883a 	add	r8,r8,r2
  c0b8cc:	20000226 	beq	r4,zero,c0b8d8 <__muldf3+0x284>
  c0b8d0:	5b64b03a 	or	r18,r11,r13
  c0b8d4:	63a6b03a 	or	r19,r12,r14
  c0b8d8:	7abfed36 	bltu	r15,r10,c0b890 <__muldf3+0x23c>
  c0b8dc:	da001015 	stw	r8,64(sp)
  c0b8e0:	00840034 	movhi	r2,4096
  c0b8e4:	10bfffc4 	addi	r2,r2,-1
  c0b8e8:	12801436 	bltu	r2,r10,c0b93c <__muldf3+0x2e8>
  c0b8ec:	da001017 	ldw	r8,64(sp)
  c0b8f0:	101f883a 	mov	r15,r2
  c0b8f4:	4a45883a 	add	r2,r9,r9
  c0b8f8:	124d803a 	cmpltu	r6,r2,r9
  c0b8fc:	5287883a 	add	r3,r10,r10
  c0b900:	9497883a 	add	r11,r18,r18
  c0b904:	5c8f803a 	cmpltu	r7,r11,r18
  c0b908:	9cd9883a 	add	r12,r19,r19
  c0b90c:	01000044 	movi	r4,1
  c0b910:	30cd883a 	add	r6,r6,r3
  c0b914:	3b0f883a 	add	r7,r7,r12
  c0b918:	423fffc4 	addi	r8,r8,-1
  c0b91c:	1013883a 	mov	r9,r2
  c0b920:	3015883a 	mov	r10,r6
  c0b924:	111ab03a 	or	r13,r2,r4
  c0b928:	98003016 	blt	r19,zero,c0b9ec <__muldf3+0x398>
  c0b92c:	5825883a 	mov	r18,r11
  c0b930:	3827883a 	mov	r19,r7
  c0b934:	7abfef2e 	bgeu	r15,r10,c0b8f4 <__muldf3+0x2a0>
  c0b938:	da001015 	stw	r8,64(sp)
  c0b93c:	00803fc4 	movi	r2,255
  c0b940:	488e703a 	and	r7,r9,r2
  c0b944:	00802004 	movi	r2,128
  c0b948:	0007883a 	mov	r3,zero
  c0b94c:	0011883a 	mov	r8,zero
  c0b950:	38801826 	beq	r7,r2,c0b9b4 <__muldf3+0x360>
  c0b954:	008000c4 	movi	r2,3
  c0b958:	d9000e04 	addi	r4,sp,56
  c0b95c:	da801215 	stw	r10,72(sp)
  c0b960:	d8800e15 	stw	r2,56(sp)
  c0b964:	da401115 	stw	r9,68(sp)
  c0b968:	003f6a06 	br	c0b714 <__muldf3+0xc0>
  c0b96c:	89802126 	beq	r17,r6,c0b9f4 <__muldf3+0x3a0>
  c0b970:	0009883a 	mov	r4,zero
  c0b974:	5105883a 	add	r2,r10,r4
  c0b978:	128d803a 	cmpltu	r6,r2,r10
  c0b97c:	5d07883a 	add	r3,r11,r20
  c0b980:	30cd883a 	add	r6,r6,r3
  c0b984:	0021883a 	mov	r16,zero
  c0b988:	0023883a 	mov	r17,zero
  c0b98c:	1025883a 	mov	r18,r2
  c0b990:	3027883a 	mov	r19,r6
  c0b994:	32ff9e2e 	bgeu	r6,r11,c0b810 <__muldf3+0x1bc>
  c0b998:	00800044 	movi	r2,1
  c0b99c:	8089883a 	add	r4,r16,r2
  c0b9a0:	240d803a 	cmpltu	r6,r4,r16
  c0b9a4:	344d883a 	add	r6,r6,r17
  c0b9a8:	2021883a 	mov	r16,r4
  c0b9ac:	3023883a 	mov	r17,r6
  c0b9b0:	003f9806 	br	c0b814 <__muldf3+0x1c0>
  c0b9b4:	403fe71e 	bne	r8,zero,c0b954 <__muldf3+0x300>
  c0b9b8:	01004004 	movi	r4,256
  c0b9bc:	4904703a 	and	r2,r9,r4
  c0b9c0:	10c4b03a 	or	r2,r2,r3
  c0b9c4:	103fe31e 	bne	r2,zero,c0b954 <__muldf3+0x300>
  c0b9c8:	94c4b03a 	or	r2,r18,r19
  c0b9cc:	103fe126 	beq	r2,zero,c0b954 <__muldf3+0x300>
  c0b9d0:	49c5883a 	add	r2,r9,r7
  c0b9d4:	1251803a 	cmpltu	r8,r2,r9
  c0b9d8:	4291883a 	add	r8,r8,r10
  c0b9dc:	013fc004 	movi	r4,-256
  c0b9e0:	1112703a 	and	r9,r2,r4
  c0b9e4:	4015883a 	mov	r10,r8
  c0b9e8:	003fda06 	br	c0b954 <__muldf3+0x300>
  c0b9ec:	6813883a 	mov	r9,r13
  c0b9f0:	003fce06 	br	c0b92c <__muldf3+0x2d8>
  c0b9f4:	143f7c36 	bltu	r2,r16,c0b7e8 <__muldf3+0x194>
  c0b9f8:	003fdd06 	br	c0b970 <__muldf3+0x31c>
  c0b9fc:	12bf852e 	bgeu	r2,r10,c0b814 <__muldf3+0x1c0>
  c0ba00:	003fe506 	br	c0b998 <__muldf3+0x344>
  c0ba04:	00800084 	movi	r2,2
  c0ba08:	20bf351e 	bne	r4,r2,c0b6e0 <__muldf3+0x8c>
  c0ba0c:	01003074 	movhi	r4,193
  c0ba10:	2101b304 	addi	r4,r4,1740
  c0ba14:	003f3f06 	br	c0b714 <__muldf3+0xc0>

00c0ba18 <__eqdf2>:
  c0ba18:	deffef04 	addi	sp,sp,-68
  c0ba1c:	dc400f15 	stw	r17,60(sp)
  c0ba20:	dc400404 	addi	r17,sp,16
  c0ba24:	2005883a 	mov	r2,r4
  c0ba28:	2807883a 	mov	r3,r5
  c0ba2c:	dc000e15 	stw	r16,56(sp)
  c0ba30:	d809883a 	mov	r4,sp
  c0ba34:	880b883a 	mov	r5,r17
  c0ba38:	dc000904 	addi	r16,sp,36
  c0ba3c:	d8c00115 	stw	r3,4(sp)
  c0ba40:	d8800015 	stw	r2,0(sp)
  c0ba44:	d9800215 	stw	r6,8(sp)
  c0ba48:	dfc01015 	stw	ra,64(sp)
  c0ba4c:	d9c00315 	stw	r7,12(sp)
  c0ba50:	0c034d00 	call	c034d0 <__unpack_d>
  c0ba54:	d9000204 	addi	r4,sp,8
  c0ba58:	800b883a 	mov	r5,r16
  c0ba5c:	0c034d00 	call	c034d0 <__unpack_d>
  c0ba60:	d8800417 	ldw	r2,16(sp)
  c0ba64:	00c00044 	movi	r3,1
  c0ba68:	180d883a 	mov	r6,r3
  c0ba6c:	1880062e 	bgeu	r3,r2,c0ba88 <__eqdf2+0x70>
  c0ba70:	d8800917 	ldw	r2,36(sp)
  c0ba74:	8809883a 	mov	r4,r17
  c0ba78:	800b883a 	mov	r5,r16
  c0ba7c:	1880022e 	bgeu	r3,r2,c0ba88 <__eqdf2+0x70>
  c0ba80:	0c036080 	call	c03608 <__fpcmp_parts_d>
  c0ba84:	100d883a 	mov	r6,r2
  c0ba88:	3005883a 	mov	r2,r6
  c0ba8c:	dfc01017 	ldw	ra,64(sp)
  c0ba90:	dc400f17 	ldw	r17,60(sp)
  c0ba94:	dc000e17 	ldw	r16,56(sp)
  c0ba98:	dec01104 	addi	sp,sp,68
  c0ba9c:	f800283a 	ret

00c0baa0 <__gtdf2>:
  c0baa0:	deffef04 	addi	sp,sp,-68
  c0baa4:	dc400f15 	stw	r17,60(sp)
  c0baa8:	dc400404 	addi	r17,sp,16
  c0baac:	2005883a 	mov	r2,r4
  c0bab0:	2807883a 	mov	r3,r5
  c0bab4:	dc000e15 	stw	r16,56(sp)
  c0bab8:	d809883a 	mov	r4,sp
  c0babc:	880b883a 	mov	r5,r17
  c0bac0:	dc000904 	addi	r16,sp,36
  c0bac4:	d8c00115 	stw	r3,4(sp)
  c0bac8:	d8800015 	stw	r2,0(sp)
  c0bacc:	d9800215 	stw	r6,8(sp)
  c0bad0:	dfc01015 	stw	ra,64(sp)
  c0bad4:	d9c00315 	stw	r7,12(sp)
  c0bad8:	0c034d00 	call	c034d0 <__unpack_d>
  c0badc:	d9000204 	addi	r4,sp,8
  c0bae0:	800b883a 	mov	r5,r16
  c0bae4:	0c034d00 	call	c034d0 <__unpack_d>
  c0bae8:	d8800417 	ldw	r2,16(sp)
  c0baec:	00c00044 	movi	r3,1
  c0baf0:	01bfffc4 	movi	r6,-1
  c0baf4:	1880062e 	bgeu	r3,r2,c0bb10 <__gtdf2+0x70>
  c0baf8:	d8800917 	ldw	r2,36(sp)
  c0bafc:	8809883a 	mov	r4,r17
  c0bb00:	800b883a 	mov	r5,r16
  c0bb04:	1880022e 	bgeu	r3,r2,c0bb10 <__gtdf2+0x70>
  c0bb08:	0c036080 	call	c03608 <__fpcmp_parts_d>
  c0bb0c:	100d883a 	mov	r6,r2
  c0bb10:	3005883a 	mov	r2,r6
  c0bb14:	dfc01017 	ldw	ra,64(sp)
  c0bb18:	dc400f17 	ldw	r17,60(sp)
  c0bb1c:	dc000e17 	ldw	r16,56(sp)
  c0bb20:	dec01104 	addi	sp,sp,68
  c0bb24:	f800283a 	ret

00c0bb28 <__gedf2>:
  c0bb28:	deffef04 	addi	sp,sp,-68
  c0bb2c:	dc400f15 	stw	r17,60(sp)
  c0bb30:	dc400404 	addi	r17,sp,16
  c0bb34:	2005883a 	mov	r2,r4
  c0bb38:	2807883a 	mov	r3,r5
  c0bb3c:	dc000e15 	stw	r16,56(sp)
  c0bb40:	d809883a 	mov	r4,sp
  c0bb44:	880b883a 	mov	r5,r17
  c0bb48:	dc000904 	addi	r16,sp,36
  c0bb4c:	d8c00115 	stw	r3,4(sp)
  c0bb50:	d8800015 	stw	r2,0(sp)
  c0bb54:	d9800215 	stw	r6,8(sp)
  c0bb58:	dfc01015 	stw	ra,64(sp)
  c0bb5c:	d9c00315 	stw	r7,12(sp)
  c0bb60:	0c034d00 	call	c034d0 <__unpack_d>
  c0bb64:	d9000204 	addi	r4,sp,8
  c0bb68:	800b883a 	mov	r5,r16
  c0bb6c:	0c034d00 	call	c034d0 <__unpack_d>
  c0bb70:	d8800417 	ldw	r2,16(sp)
  c0bb74:	00c00044 	movi	r3,1
  c0bb78:	01bfffc4 	movi	r6,-1
  c0bb7c:	1880062e 	bgeu	r3,r2,c0bb98 <__gedf2+0x70>
  c0bb80:	d8800917 	ldw	r2,36(sp)
  c0bb84:	8809883a 	mov	r4,r17
  c0bb88:	800b883a 	mov	r5,r16
  c0bb8c:	1880022e 	bgeu	r3,r2,c0bb98 <__gedf2+0x70>
  c0bb90:	0c036080 	call	c03608 <__fpcmp_parts_d>
  c0bb94:	100d883a 	mov	r6,r2
  c0bb98:	3005883a 	mov	r2,r6
  c0bb9c:	dfc01017 	ldw	ra,64(sp)
  c0bba0:	dc400f17 	ldw	r17,60(sp)
  c0bba4:	dc000e17 	ldw	r16,56(sp)
  c0bba8:	dec01104 	addi	sp,sp,68
  c0bbac:	f800283a 	ret

00c0bbb0 <__ltdf2>:
  c0bbb0:	deffef04 	addi	sp,sp,-68
  c0bbb4:	dc400f15 	stw	r17,60(sp)
  c0bbb8:	dc400404 	addi	r17,sp,16
  c0bbbc:	2005883a 	mov	r2,r4
  c0bbc0:	2807883a 	mov	r3,r5
  c0bbc4:	dc000e15 	stw	r16,56(sp)
  c0bbc8:	d809883a 	mov	r4,sp
  c0bbcc:	880b883a 	mov	r5,r17
  c0bbd0:	dc000904 	addi	r16,sp,36
  c0bbd4:	d8c00115 	stw	r3,4(sp)
  c0bbd8:	d8800015 	stw	r2,0(sp)
  c0bbdc:	d9800215 	stw	r6,8(sp)
  c0bbe0:	dfc01015 	stw	ra,64(sp)
  c0bbe4:	d9c00315 	stw	r7,12(sp)
  c0bbe8:	0c034d00 	call	c034d0 <__unpack_d>
  c0bbec:	d9000204 	addi	r4,sp,8
  c0bbf0:	800b883a 	mov	r5,r16
  c0bbf4:	0c034d00 	call	c034d0 <__unpack_d>
  c0bbf8:	d8800417 	ldw	r2,16(sp)
  c0bbfc:	00c00044 	movi	r3,1
  c0bc00:	180d883a 	mov	r6,r3
  c0bc04:	1880062e 	bgeu	r3,r2,c0bc20 <__ltdf2+0x70>
  c0bc08:	d8800917 	ldw	r2,36(sp)
  c0bc0c:	8809883a 	mov	r4,r17
  c0bc10:	800b883a 	mov	r5,r16
  c0bc14:	1880022e 	bgeu	r3,r2,c0bc20 <__ltdf2+0x70>
  c0bc18:	0c036080 	call	c03608 <__fpcmp_parts_d>
  c0bc1c:	100d883a 	mov	r6,r2
  c0bc20:	3005883a 	mov	r2,r6
  c0bc24:	dfc01017 	ldw	ra,64(sp)
  c0bc28:	dc400f17 	ldw	r17,60(sp)
  c0bc2c:	dc000e17 	ldw	r16,56(sp)
  c0bc30:	dec01104 	addi	sp,sp,68
  c0bc34:	f800283a 	ret

00c0bc38 <__floatsidf>:
  c0bc38:	2006d7fa 	srli	r3,r4,31
  c0bc3c:	defff604 	addi	sp,sp,-40
  c0bc40:	008000c4 	movi	r2,3
  c0bc44:	dfc00915 	stw	ra,36(sp)
  c0bc48:	dcc00815 	stw	r19,32(sp)
  c0bc4c:	dc800715 	stw	r18,28(sp)
  c0bc50:	dc400615 	stw	r17,24(sp)
  c0bc54:	dc000515 	stw	r16,20(sp)
  c0bc58:	d8800015 	stw	r2,0(sp)
  c0bc5c:	d8c00115 	stw	r3,4(sp)
  c0bc60:	20000f1e 	bne	r4,zero,c0bca0 <__floatsidf+0x68>
  c0bc64:	00800084 	movi	r2,2
  c0bc68:	d8800015 	stw	r2,0(sp)
  c0bc6c:	d809883a 	mov	r4,sp
  c0bc70:	0c031bc0 	call	c031bc <__pack_d>
  c0bc74:	1009883a 	mov	r4,r2
  c0bc78:	180b883a 	mov	r5,r3
  c0bc7c:	2005883a 	mov	r2,r4
  c0bc80:	2807883a 	mov	r3,r5
  c0bc84:	dfc00917 	ldw	ra,36(sp)
  c0bc88:	dcc00817 	ldw	r19,32(sp)
  c0bc8c:	dc800717 	ldw	r18,28(sp)
  c0bc90:	dc400617 	ldw	r17,24(sp)
  c0bc94:	dc000517 	ldw	r16,20(sp)
  c0bc98:	dec00a04 	addi	sp,sp,40
  c0bc9c:	f800283a 	ret
  c0bca0:	00800f04 	movi	r2,60
  c0bca4:	1807003a 	cmpeq	r3,r3,zero
  c0bca8:	d8800215 	stw	r2,8(sp)
  c0bcac:	18001126 	beq	r3,zero,c0bcf4 <__floatsidf+0xbc>
  c0bcb0:	0027883a 	mov	r19,zero
  c0bcb4:	2025883a 	mov	r18,r4
  c0bcb8:	d9000315 	stw	r4,12(sp)
  c0bcbc:	dcc00415 	stw	r19,16(sp)
  c0bcc0:	0c02e400 	call	c02e40 <__clzsi2>
  c0bcc4:	11000744 	addi	r4,r2,29
  c0bcc8:	013fe80e 	bge	zero,r4,c0bc6c <__floatsidf+0x34>
  c0bccc:	10bfff44 	addi	r2,r2,-3
  c0bcd0:	10000c16 	blt	r2,zero,c0bd04 <__floatsidf+0xcc>
  c0bcd4:	90a2983a 	sll	r17,r18,r2
  c0bcd8:	0021883a 	mov	r16,zero
  c0bcdc:	d8800217 	ldw	r2,8(sp)
  c0bce0:	dc400415 	stw	r17,16(sp)
  c0bce4:	dc000315 	stw	r16,12(sp)
  c0bce8:	1105c83a 	sub	r2,r2,r4
  c0bcec:	d8800215 	stw	r2,8(sp)
  c0bcf0:	003fde06 	br	c0bc6c <__floatsidf+0x34>
  c0bcf4:	00a00034 	movhi	r2,32768
  c0bcf8:	20800a26 	beq	r4,r2,c0bd24 <__floatsidf+0xec>
  c0bcfc:	0109c83a 	sub	r4,zero,r4
  c0bd00:	003feb06 	br	c0bcb0 <__floatsidf+0x78>
  c0bd04:	9006d07a 	srli	r3,r18,1
  c0bd08:	008007c4 	movi	r2,31
  c0bd0c:	1105c83a 	sub	r2,r2,r4
  c0bd10:	1886d83a 	srl	r3,r3,r2
  c0bd14:	9922983a 	sll	r17,r19,r4
  c0bd18:	9120983a 	sll	r16,r18,r4
  c0bd1c:	1c62b03a 	or	r17,r3,r17
  c0bd20:	003fee06 	br	c0bcdc <__floatsidf+0xa4>
  c0bd24:	0009883a 	mov	r4,zero
  c0bd28:	01707834 	movhi	r5,49632
  c0bd2c:	003fd306 	br	c0bc7c <__floatsidf+0x44>

00c0bd30 <__fixdfsi>:
  c0bd30:	defff804 	addi	sp,sp,-32
  c0bd34:	2005883a 	mov	r2,r4
  c0bd38:	2807883a 	mov	r3,r5
  c0bd3c:	d809883a 	mov	r4,sp
  c0bd40:	d9400204 	addi	r5,sp,8
  c0bd44:	d8c00115 	stw	r3,4(sp)
  c0bd48:	d8800015 	stw	r2,0(sp)
  c0bd4c:	dfc00715 	stw	ra,28(sp)
  c0bd50:	0c034d00 	call	c034d0 <__unpack_d>
  c0bd54:	d8c00217 	ldw	r3,8(sp)
  c0bd58:	00800084 	movi	r2,2
  c0bd5c:	1880051e 	bne	r3,r2,c0bd74 <__fixdfsi+0x44>
  c0bd60:	0007883a 	mov	r3,zero
  c0bd64:	1805883a 	mov	r2,r3
  c0bd68:	dfc00717 	ldw	ra,28(sp)
  c0bd6c:	dec00804 	addi	sp,sp,32
  c0bd70:	f800283a 	ret
  c0bd74:	00800044 	movi	r2,1
  c0bd78:	10fff92e 	bgeu	r2,r3,c0bd60 <__fixdfsi+0x30>
  c0bd7c:	00800104 	movi	r2,4
  c0bd80:	18800426 	beq	r3,r2,c0bd94 <__fixdfsi+0x64>
  c0bd84:	d8c00417 	ldw	r3,16(sp)
  c0bd88:	183ff516 	blt	r3,zero,c0bd60 <__fixdfsi+0x30>
  c0bd8c:	00800784 	movi	r2,30
  c0bd90:	10c0080e 	bge	r2,r3,c0bdb4 <__fixdfsi+0x84>
  c0bd94:	d8800317 	ldw	r2,12(sp)
  c0bd98:	1000121e 	bne	r2,zero,c0bde4 <__fixdfsi+0xb4>
  c0bd9c:	00e00034 	movhi	r3,32768
  c0bda0:	18ffffc4 	addi	r3,r3,-1
  c0bda4:	1805883a 	mov	r2,r3
  c0bda8:	dfc00717 	ldw	ra,28(sp)
  c0bdac:	dec00804 	addi	sp,sp,32
  c0bdb0:	f800283a 	ret
  c0bdb4:	00800f04 	movi	r2,60
  c0bdb8:	10d1c83a 	sub	r8,r2,r3
  c0bdbc:	40bff804 	addi	r2,r8,-32
  c0bdc0:	d9800517 	ldw	r6,20(sp)
  c0bdc4:	d9c00617 	ldw	r7,24(sp)
  c0bdc8:	10000816 	blt	r2,zero,c0bdec <__fixdfsi+0xbc>
  c0bdcc:	3888d83a 	srl	r4,r7,r2
  c0bdd0:	d8800317 	ldw	r2,12(sp)
  c0bdd4:	2007883a 	mov	r3,r4
  c0bdd8:	103fe226 	beq	r2,zero,c0bd64 <__fixdfsi+0x34>
  c0bddc:	0107c83a 	sub	r3,zero,r4
  c0bde0:	003fe006 	br	c0bd64 <__fixdfsi+0x34>
  c0bde4:	00e00034 	movhi	r3,32768
  c0bde8:	003fde06 	br	c0bd64 <__fixdfsi+0x34>
  c0bdec:	39c7883a 	add	r3,r7,r7
  c0bdf0:	008007c4 	movi	r2,31
  c0bdf4:	1205c83a 	sub	r2,r2,r8
  c0bdf8:	1886983a 	sll	r3,r3,r2
  c0bdfc:	3208d83a 	srl	r4,r6,r8
  c0be00:	1908b03a 	or	r4,r3,r4
  c0be04:	003ff206 	br	c0bdd0 <__fixdfsi+0xa0>

00c0be08 <__floatunsidf>:
  c0be08:	defff204 	addi	sp,sp,-56
  c0be0c:	dfc00d15 	stw	ra,52(sp)
  c0be10:	ddc00c15 	stw	r23,48(sp)
  c0be14:	dd800b15 	stw	r22,44(sp)
  c0be18:	dd400a15 	stw	r21,40(sp)
  c0be1c:	dd000915 	stw	r20,36(sp)
  c0be20:	dcc00815 	stw	r19,32(sp)
  c0be24:	dc800715 	stw	r18,28(sp)
  c0be28:	dc400615 	stw	r17,24(sp)
  c0be2c:	dc000515 	stw	r16,20(sp)
  c0be30:	d8000115 	stw	zero,4(sp)
  c0be34:	20000f1e 	bne	r4,zero,c0be74 <__floatunsidf+0x6c>
  c0be38:	00800084 	movi	r2,2
  c0be3c:	d8800015 	stw	r2,0(sp)
  c0be40:	d809883a 	mov	r4,sp
  c0be44:	0c031bc0 	call	c031bc <__pack_d>
  c0be48:	dfc00d17 	ldw	ra,52(sp)
  c0be4c:	ddc00c17 	ldw	r23,48(sp)
  c0be50:	dd800b17 	ldw	r22,44(sp)
  c0be54:	dd400a17 	ldw	r21,40(sp)
  c0be58:	dd000917 	ldw	r20,36(sp)
  c0be5c:	dcc00817 	ldw	r19,32(sp)
  c0be60:	dc800717 	ldw	r18,28(sp)
  c0be64:	dc400617 	ldw	r17,24(sp)
  c0be68:	dc000517 	ldw	r16,20(sp)
  c0be6c:	dec00e04 	addi	sp,sp,56
  c0be70:	f800283a 	ret
  c0be74:	008000c4 	movi	r2,3
  c0be78:	00c00f04 	movi	r3,60
  c0be7c:	002f883a 	mov	r23,zero
  c0be80:	202d883a 	mov	r22,r4
  c0be84:	d8800015 	stw	r2,0(sp)
  c0be88:	d8c00215 	stw	r3,8(sp)
  c0be8c:	d9000315 	stw	r4,12(sp)
  c0be90:	ddc00415 	stw	r23,16(sp)
  c0be94:	0c02e400 	call	c02e40 <__clzsi2>
  c0be98:	12400744 	addi	r9,r2,29
  c0be9c:	48000b16 	blt	r9,zero,c0becc <__floatunsidf+0xc4>
  c0bea0:	483fe726 	beq	r9,zero,c0be40 <__floatunsidf+0x38>
  c0bea4:	10bfff44 	addi	r2,r2,-3
  c0bea8:	10002e16 	blt	r2,zero,c0bf64 <__floatunsidf+0x15c>
  c0beac:	b0a2983a 	sll	r17,r22,r2
  c0beb0:	0021883a 	mov	r16,zero
  c0beb4:	d8800217 	ldw	r2,8(sp)
  c0beb8:	dc400415 	stw	r17,16(sp)
  c0bebc:	dc000315 	stw	r16,12(sp)
  c0bec0:	1245c83a 	sub	r2,r2,r9
  c0bec4:	d8800215 	stw	r2,8(sp)
  c0bec8:	003fdd06 	br	c0be40 <__floatunsidf+0x38>
  c0becc:	0255c83a 	sub	r10,zero,r9
  c0bed0:	51bff804 	addi	r6,r10,-32
  c0bed4:	30001b16 	blt	r6,zero,c0bf44 <__floatunsidf+0x13c>
  c0bed8:	b9a8d83a 	srl	r20,r23,r6
  c0bedc:	002b883a 	mov	r21,zero
  c0bee0:	000f883a 	mov	r7,zero
  c0bee4:	01000044 	movi	r4,1
  c0bee8:	0011883a 	mov	r8,zero
  c0beec:	30002516 	blt	r6,zero,c0bf84 <__floatunsidf+0x17c>
  c0bef0:	21a6983a 	sll	r19,r4,r6
  c0bef4:	0025883a 	mov	r18,zero
  c0bef8:	00bfffc4 	movi	r2,-1
  c0befc:	9089883a 	add	r4,r18,r2
  c0bf00:	988b883a 	add	r5,r19,r2
  c0bf04:	248d803a 	cmpltu	r6,r4,r18
  c0bf08:	314b883a 	add	r5,r6,r5
  c0bf0c:	b104703a 	and	r2,r22,r4
  c0bf10:	b946703a 	and	r3,r23,r5
  c0bf14:	10c4b03a 	or	r2,r2,r3
  c0bf18:	10000226 	beq	r2,zero,c0bf24 <__floatunsidf+0x11c>
  c0bf1c:	01c00044 	movi	r7,1
  c0bf20:	0011883a 	mov	r8,zero
  c0bf24:	d9000217 	ldw	r4,8(sp)
  c0bf28:	a1c4b03a 	or	r2,r20,r7
  c0bf2c:	aa06b03a 	or	r3,r21,r8
  c0bf30:	2249c83a 	sub	r4,r4,r9
  c0bf34:	d8c00415 	stw	r3,16(sp)
  c0bf38:	d9000215 	stw	r4,8(sp)
  c0bf3c:	d8800315 	stw	r2,12(sp)
  c0bf40:	003fbf06 	br	c0be40 <__floatunsidf+0x38>
  c0bf44:	bdc7883a 	add	r3,r23,r23
  c0bf48:	008007c4 	movi	r2,31
  c0bf4c:	1285c83a 	sub	r2,r2,r10
  c0bf50:	1886983a 	sll	r3,r3,r2
  c0bf54:	b2a8d83a 	srl	r20,r22,r10
  c0bf58:	baaad83a 	srl	r21,r23,r10
  c0bf5c:	1d28b03a 	or	r20,r3,r20
  c0bf60:	003fdf06 	br	c0bee0 <__floatunsidf+0xd8>
  c0bf64:	b006d07a 	srli	r3,r22,1
  c0bf68:	008007c4 	movi	r2,31
  c0bf6c:	1245c83a 	sub	r2,r2,r9
  c0bf70:	1886d83a 	srl	r3,r3,r2
  c0bf74:	ba62983a 	sll	r17,r23,r9
  c0bf78:	b260983a 	sll	r16,r22,r9
  c0bf7c:	1c62b03a 	or	r17,r3,r17
  c0bf80:	003fcc06 	br	c0beb4 <__floatunsidf+0xac>
  c0bf84:	2006d07a 	srli	r3,r4,1
  c0bf88:	008007c4 	movi	r2,31
  c0bf8c:	1285c83a 	sub	r2,r2,r10
  c0bf90:	18a6d83a 	srl	r19,r3,r2
  c0bf94:	22a4983a 	sll	r18,r4,r10
  c0bf98:	003fd706 	br	c0bef8 <__floatunsidf+0xf0>

00c0bf9c <udivmodsi4>:
  c0bf9c:	29001b2e 	bgeu	r5,r4,c0c00c <udivmodsi4+0x70>
  c0bfa0:	28001a16 	blt	r5,zero,c0c00c <udivmodsi4+0x70>
  c0bfa4:	00800044 	movi	r2,1
  c0bfa8:	0007883a 	mov	r3,zero
  c0bfac:	01c007c4 	movi	r7,31
  c0bfb0:	00000306 	br	c0bfc0 <udivmodsi4+0x24>
  c0bfb4:	19c01326 	beq	r3,r7,c0c004 <udivmodsi4+0x68>
  c0bfb8:	18c00044 	addi	r3,r3,1
  c0bfbc:	28000416 	blt	r5,zero,c0bfd0 <udivmodsi4+0x34>
  c0bfc0:	294b883a 	add	r5,r5,r5
  c0bfc4:	1085883a 	add	r2,r2,r2
  c0bfc8:	293ffa36 	bltu	r5,r4,c0bfb4 <udivmodsi4+0x18>
  c0bfcc:	10000d26 	beq	r2,zero,c0c004 <udivmodsi4+0x68>
  c0bfd0:	0007883a 	mov	r3,zero
  c0bfd4:	21400236 	bltu	r4,r5,c0bfe0 <udivmodsi4+0x44>
  c0bfd8:	2149c83a 	sub	r4,r4,r5
  c0bfdc:	1886b03a 	or	r3,r3,r2
  c0bfe0:	1004d07a 	srli	r2,r2,1
  c0bfe4:	280ad07a 	srli	r5,r5,1
  c0bfe8:	103ffa1e 	bne	r2,zero,c0bfd4 <udivmodsi4+0x38>
  c0bfec:	30000226 	beq	r6,zero,c0bff8 <udivmodsi4+0x5c>
  c0bff0:	2005883a 	mov	r2,r4
  c0bff4:	f800283a 	ret
  c0bff8:	1809883a 	mov	r4,r3
  c0bffc:	2005883a 	mov	r2,r4
  c0c000:	f800283a 	ret
  c0c004:	0007883a 	mov	r3,zero
  c0c008:	003ff806 	br	c0bfec <udivmodsi4+0x50>
  c0c00c:	00800044 	movi	r2,1
  c0c010:	0007883a 	mov	r3,zero
  c0c014:	003fef06 	br	c0bfd4 <udivmodsi4+0x38>

00c0c018 <__divsi3>:
  c0c018:	defffe04 	addi	sp,sp,-8
  c0c01c:	dc000015 	stw	r16,0(sp)
  c0c020:	dfc00115 	stw	ra,4(sp)
  c0c024:	0021883a 	mov	r16,zero
  c0c028:	20000c16 	blt	r4,zero,c0c05c <__divsi3+0x44>
  c0c02c:	000d883a 	mov	r6,zero
  c0c030:	28000e16 	blt	r5,zero,c0c06c <__divsi3+0x54>
  c0c034:	0c0bf9c0 	call	c0bf9c <udivmodsi4>
  c0c038:	1007883a 	mov	r3,r2
  c0c03c:	8005003a 	cmpeq	r2,r16,zero
  c0c040:	1000011e 	bne	r2,zero,c0c048 <__divsi3+0x30>
  c0c044:	00c7c83a 	sub	r3,zero,r3
  c0c048:	1805883a 	mov	r2,r3
  c0c04c:	dfc00117 	ldw	ra,4(sp)
  c0c050:	dc000017 	ldw	r16,0(sp)
  c0c054:	dec00204 	addi	sp,sp,8
  c0c058:	f800283a 	ret
  c0c05c:	0109c83a 	sub	r4,zero,r4
  c0c060:	04000044 	movi	r16,1
  c0c064:	000d883a 	mov	r6,zero
  c0c068:	283ff20e 	bge	r5,zero,c0c034 <__divsi3+0x1c>
  c0c06c:	014bc83a 	sub	r5,zero,r5
  c0c070:	8021003a 	cmpeq	r16,r16,zero
  c0c074:	003fef06 	br	c0c034 <__divsi3+0x1c>

00c0c078 <__modsi3>:
  c0c078:	deffff04 	addi	sp,sp,-4
  c0c07c:	dfc00015 	stw	ra,0(sp)
  c0c080:	01800044 	movi	r6,1
  c0c084:	2807883a 	mov	r3,r5
  c0c088:	20000416 	blt	r4,zero,c0c09c <__modsi3+0x24>
  c0c08c:	28000c16 	blt	r5,zero,c0c0c0 <__modsi3+0x48>
  c0c090:	dfc00017 	ldw	ra,0(sp)
  c0c094:	dec00104 	addi	sp,sp,4
  c0c098:	0c0bf9c1 	jmpi	c0bf9c <udivmodsi4>
  c0c09c:	0109c83a 	sub	r4,zero,r4
  c0c0a0:	28000b16 	blt	r5,zero,c0c0d0 <__modsi3+0x58>
  c0c0a4:	180b883a 	mov	r5,r3
  c0c0a8:	01800044 	movi	r6,1
  c0c0ac:	0c0bf9c0 	call	c0bf9c <udivmodsi4>
  c0c0b0:	0085c83a 	sub	r2,zero,r2
  c0c0b4:	dfc00017 	ldw	ra,0(sp)
  c0c0b8:	dec00104 	addi	sp,sp,4
  c0c0bc:	f800283a 	ret
  c0c0c0:	014bc83a 	sub	r5,zero,r5
  c0c0c4:	dfc00017 	ldw	ra,0(sp)
  c0c0c8:	dec00104 	addi	sp,sp,4
  c0c0cc:	0c0bf9c1 	jmpi	c0bf9c <udivmodsi4>
  c0c0d0:	0147c83a 	sub	r3,zero,r5
  c0c0d4:	003ff306 	br	c0c0a4 <__modsi3+0x2c>

00c0c0d8 <__udivsi3>:
  c0c0d8:	000d883a 	mov	r6,zero
  c0c0dc:	0c0bf9c1 	jmpi	c0bf9c <udivmodsi4>

00c0c0e0 <__umodsi3>:
  c0c0e0:	01800044 	movi	r6,1
  c0c0e4:	0c0bf9c1 	jmpi	c0bf9c <udivmodsi4>

00c0c0e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  c0c0e8:	defff804 	addi	sp,sp,-32
  c0c0ec:	dfc00715 	stw	ra,28(sp)
  c0c0f0:	df000615 	stw	fp,24(sp)
  c0c0f4:	df000604 	addi	fp,sp,24
  c0c0f8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  c0c0fc:	e0bffc17 	ldw	r2,-16(fp)
  c0c100:	1004803a 	cmplt	r2,r2,zero
  c0c104:	1000081e 	bne	r2,zero,c0c128 <close+0x40>
  c0c108:	e0bffc17 	ldw	r2,-16(fp)
  c0c10c:	10800324 	muli	r2,r2,12
  c0c110:	1007883a 	mov	r3,r2
  c0c114:	00803074 	movhi	r2,193
  c0c118:	1084d304 	addi	r2,r2,4940
  c0c11c:	1887883a 	add	r3,r3,r2
  c0c120:	e0ffff15 	stw	r3,-4(fp)
  c0c124:	00000106 	br	c0c12c <close+0x44>
  c0c128:	e03fff15 	stw	zero,-4(fp)
  c0c12c:	e0bfff17 	ldw	r2,-4(fp)
  c0c130:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  c0c134:	e0bffb17 	ldw	r2,-20(fp)
  c0c138:	1005003a 	cmpeq	r2,r2,zero
  c0c13c:	10001d1e 	bne	r2,zero,c0c1b4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  c0c140:	e0bffb17 	ldw	r2,-20(fp)
  c0c144:	10800017 	ldw	r2,0(r2)
  c0c148:	10800417 	ldw	r2,16(r2)
  c0c14c:	1005003a 	cmpeq	r2,r2,zero
  c0c150:	1000071e 	bne	r2,zero,c0c170 <close+0x88>
  c0c154:	e0bffb17 	ldw	r2,-20(fp)
  c0c158:	10800017 	ldw	r2,0(r2)
  c0c15c:	10800417 	ldw	r2,16(r2)
  c0c160:	e13ffb17 	ldw	r4,-20(fp)
  c0c164:	103ee83a 	callr	r2
  c0c168:	e0bffe15 	stw	r2,-8(fp)
  c0c16c:	00000106 	br	c0c174 <close+0x8c>
  c0c170:	e03ffe15 	stw	zero,-8(fp)
  c0c174:	e0bffe17 	ldw	r2,-8(fp)
  c0c178:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  c0c17c:	e13ffc17 	ldw	r4,-16(fp)
  c0c180:	0c0c9100 	call	c0c910 <alt_release_fd>
    if (rval < 0)
  c0c184:	e0bffa17 	ldw	r2,-24(fp)
  c0c188:	1004403a 	cmpge	r2,r2,zero
  c0c18c:	1000071e 	bne	r2,zero,c0c1ac <close+0xc4>
    {
      ALT_ERRNO = -rval;
  c0c190:	0c0c1e40 	call	c0c1e4 <alt_get_errno>
  c0c194:	e0fffa17 	ldw	r3,-24(fp)
  c0c198:	00c7c83a 	sub	r3,zero,r3
  c0c19c:	10c00015 	stw	r3,0(r2)
      return -1;
  c0c1a0:	00bfffc4 	movi	r2,-1
  c0c1a4:	e0bffd15 	stw	r2,-12(fp)
  c0c1a8:	00000806 	br	c0c1cc <close+0xe4>
    }
    return 0;
  c0c1ac:	e03ffd15 	stw	zero,-12(fp)
  c0c1b0:	00000606 	br	c0c1cc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  c0c1b4:	0c0c1e40 	call	c0c1e4 <alt_get_errno>
  c0c1b8:	1007883a 	mov	r3,r2
  c0c1bc:	00801444 	movi	r2,81
  c0c1c0:	18800015 	stw	r2,0(r3)
    return -1;
  c0c1c4:	00bfffc4 	movi	r2,-1
  c0c1c8:	e0bffd15 	stw	r2,-12(fp)
  c0c1cc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  c0c1d0:	e037883a 	mov	sp,fp
  c0c1d4:	dfc00117 	ldw	ra,4(sp)
  c0c1d8:	df000017 	ldw	fp,0(sp)
  c0c1dc:	dec00204 	addi	sp,sp,8
  c0c1e0:	f800283a 	ret

00c0c1e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  c0c1e4:	defffd04 	addi	sp,sp,-12
  c0c1e8:	dfc00215 	stw	ra,8(sp)
  c0c1ec:	df000115 	stw	fp,4(sp)
  c0c1f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  c0c1f4:	00803074 	movhi	r2,193
  c0c1f8:	1089b404 	addi	r2,r2,9936
  c0c1fc:	10800017 	ldw	r2,0(r2)
  c0c200:	1005003a 	cmpeq	r2,r2,zero
  c0c204:	1000061e 	bne	r2,zero,c0c220 <alt_get_errno+0x3c>
  c0c208:	00803074 	movhi	r2,193
  c0c20c:	1089b404 	addi	r2,r2,9936
  c0c210:	10800017 	ldw	r2,0(r2)
  c0c214:	103ee83a 	callr	r2
  c0c218:	e0bfff15 	stw	r2,-4(fp)
  c0c21c:	00000306 	br	c0c22c <alt_get_errno+0x48>
  c0c220:	00803074 	movhi	r2,193
  c0c224:	1090bd04 	addi	r2,r2,17140
  c0c228:	e0bfff15 	stw	r2,-4(fp)
  c0c22c:	e0bfff17 	ldw	r2,-4(fp)
}
  c0c230:	e037883a 	mov	sp,fp
  c0c234:	dfc00117 	ldw	ra,4(sp)
  c0c238:	df000017 	ldw	fp,0(sp)
  c0c23c:	dec00204 	addi	sp,sp,8
  c0c240:	f800283a 	ret

00c0c244 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  c0c244:	defffc04 	addi	sp,sp,-16
  c0c248:	df000315 	stw	fp,12(sp)
  c0c24c:	df000304 	addi	fp,sp,12
  c0c250:	e13ffd15 	stw	r4,-12(fp)
  c0c254:	e17ffe15 	stw	r5,-8(fp)
  c0c258:	e1bfff15 	stw	r6,-4(fp)
  return len;
  c0c25c:	e0bfff17 	ldw	r2,-4(fp)
}
  c0c260:	e037883a 	mov	sp,fp
  c0c264:	df000017 	ldw	fp,0(sp)
  c0c268:	dec00104 	addi	sp,sp,4
  c0c26c:	f800283a 	ret

00c0c270 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  c0c270:	defff904 	addi	sp,sp,-28
  c0c274:	dfc00615 	stw	ra,24(sp)
  c0c278:	df000515 	stw	fp,20(sp)
  c0c27c:	df000504 	addi	fp,sp,20
  c0c280:	e13ffc15 	stw	r4,-16(fp)
  c0c284:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  c0c288:	e0bffc17 	ldw	r2,-16(fp)
  c0c28c:	1004803a 	cmplt	r2,r2,zero
  c0c290:	1000081e 	bne	r2,zero,c0c2b4 <fstat+0x44>
  c0c294:	e0bffc17 	ldw	r2,-16(fp)
  c0c298:	10800324 	muli	r2,r2,12
  c0c29c:	1007883a 	mov	r3,r2
  c0c2a0:	00803074 	movhi	r2,193
  c0c2a4:	1084d304 	addi	r2,r2,4940
  c0c2a8:	1887883a 	add	r3,r3,r2
  c0c2ac:	e0ffff15 	stw	r3,-4(fp)
  c0c2b0:	00000106 	br	c0c2b8 <fstat+0x48>
  c0c2b4:	e03fff15 	stw	zero,-4(fp)
  c0c2b8:	e0bfff17 	ldw	r2,-4(fp)
  c0c2bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  c0c2c0:	e0bffb17 	ldw	r2,-20(fp)
  c0c2c4:	1005003a 	cmpeq	r2,r2,zero
  c0c2c8:	1000121e 	bne	r2,zero,c0c314 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  c0c2cc:	e0bffb17 	ldw	r2,-20(fp)
  c0c2d0:	10800017 	ldw	r2,0(r2)
  c0c2d4:	10800817 	ldw	r2,32(r2)
  c0c2d8:	1005003a 	cmpeq	r2,r2,zero
  c0c2dc:	1000081e 	bne	r2,zero,c0c300 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  c0c2e0:	e0bffb17 	ldw	r2,-20(fp)
  c0c2e4:	10800017 	ldw	r2,0(r2)
  c0c2e8:	10800817 	ldw	r2,32(r2)
  c0c2ec:	e13ffb17 	ldw	r4,-20(fp)
  c0c2f0:	e17ffd17 	ldw	r5,-12(fp)
  c0c2f4:	103ee83a 	callr	r2
  c0c2f8:	e0bffe15 	stw	r2,-8(fp)
  c0c2fc:	00000b06 	br	c0c32c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  c0c300:	e0fffd17 	ldw	r3,-12(fp)
  c0c304:	00880004 	movi	r2,8192
  c0c308:	18800115 	stw	r2,4(r3)
      return 0;
  c0c30c:	e03ffe15 	stw	zero,-8(fp)
  c0c310:	00000606 	br	c0c32c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  c0c314:	0c0c3440 	call	c0c344 <alt_get_errno>
  c0c318:	1007883a 	mov	r3,r2
  c0c31c:	00801444 	movi	r2,81
  c0c320:	18800015 	stw	r2,0(r3)
    return -1;
  c0c324:	00bfffc4 	movi	r2,-1
  c0c328:	e0bffe15 	stw	r2,-8(fp)
  c0c32c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  c0c330:	e037883a 	mov	sp,fp
  c0c334:	dfc00117 	ldw	ra,4(sp)
  c0c338:	df000017 	ldw	fp,0(sp)
  c0c33c:	dec00204 	addi	sp,sp,8
  c0c340:	f800283a 	ret

00c0c344 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  c0c344:	defffd04 	addi	sp,sp,-12
  c0c348:	dfc00215 	stw	ra,8(sp)
  c0c34c:	df000115 	stw	fp,4(sp)
  c0c350:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  c0c354:	00803074 	movhi	r2,193
  c0c358:	1089b404 	addi	r2,r2,9936
  c0c35c:	10800017 	ldw	r2,0(r2)
  c0c360:	1005003a 	cmpeq	r2,r2,zero
  c0c364:	1000061e 	bne	r2,zero,c0c380 <alt_get_errno+0x3c>
  c0c368:	00803074 	movhi	r2,193
  c0c36c:	1089b404 	addi	r2,r2,9936
  c0c370:	10800017 	ldw	r2,0(r2)
  c0c374:	103ee83a 	callr	r2
  c0c378:	e0bfff15 	stw	r2,-4(fp)
  c0c37c:	00000306 	br	c0c38c <alt_get_errno+0x48>
  c0c380:	00803074 	movhi	r2,193
  c0c384:	1090bd04 	addi	r2,r2,17140
  c0c388:	e0bfff15 	stw	r2,-4(fp)
  c0c38c:	e0bfff17 	ldw	r2,-4(fp)
}
  c0c390:	e037883a 	mov	sp,fp
  c0c394:	dfc00117 	ldw	ra,4(sp)
  c0c398:	df000017 	ldw	fp,0(sp)
  c0c39c:	dec00204 	addi	sp,sp,8
  c0c3a0:	f800283a 	ret

00c0c3a4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  c0c3a4:	deffeb04 	addi	sp,sp,-84
  c0c3a8:	dfc01415 	stw	ra,80(sp)
  c0c3ac:	df001315 	stw	fp,76(sp)
  c0c3b0:	df001304 	addi	fp,sp,76
  c0c3b4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  c0c3b8:	e0bffd17 	ldw	r2,-12(fp)
  c0c3bc:	1004803a 	cmplt	r2,r2,zero
  c0c3c0:	1000081e 	bne	r2,zero,c0c3e4 <isatty+0x40>
  c0c3c4:	e0bffd17 	ldw	r2,-12(fp)
  c0c3c8:	10800324 	muli	r2,r2,12
  c0c3cc:	1007883a 	mov	r3,r2
  c0c3d0:	00803074 	movhi	r2,193
  c0c3d4:	1084d304 	addi	r2,r2,4940
  c0c3d8:	1887883a 	add	r3,r3,r2
  c0c3dc:	e0ffff15 	stw	r3,-4(fp)
  c0c3e0:	00000106 	br	c0c3e8 <isatty+0x44>
  c0c3e4:	e03fff15 	stw	zero,-4(fp)
  c0c3e8:	e0bfff17 	ldw	r2,-4(fp)
  c0c3ec:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  c0c3f0:	e0bfed17 	ldw	r2,-76(fp)
  c0c3f4:	1005003a 	cmpeq	r2,r2,zero
  c0c3f8:	10000f1e 	bne	r2,zero,c0c438 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  c0c3fc:	e0bfed17 	ldw	r2,-76(fp)
  c0c400:	10800017 	ldw	r2,0(r2)
  c0c404:	10800817 	ldw	r2,32(r2)
  c0c408:	1004c03a 	cmpne	r2,r2,zero
  c0c40c:	1000031e 	bne	r2,zero,c0c41c <isatty+0x78>
    {
      return 1;
  c0c410:	00800044 	movi	r2,1
  c0c414:	e0bffe15 	stw	r2,-8(fp)
  c0c418:	00000c06 	br	c0c44c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  c0c41c:	e17fee04 	addi	r5,fp,-72
  c0c420:	e13ffd17 	ldw	r4,-12(fp)
  c0c424:	0c0c2700 	call	c0c270 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  c0c428:	e0bfef17 	ldw	r2,-68(fp)
  c0c42c:	10880020 	cmpeqi	r2,r2,8192
  c0c430:	e0bffe15 	stw	r2,-8(fp)
  c0c434:	00000506 	br	c0c44c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  c0c438:	0c0c4640 	call	c0c464 <alt_get_errno>
  c0c43c:	1007883a 	mov	r3,r2
  c0c440:	00801444 	movi	r2,81
  c0c444:	18800015 	stw	r2,0(r3)
    return 0;
  c0c448:	e03ffe15 	stw	zero,-8(fp)
  c0c44c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  c0c450:	e037883a 	mov	sp,fp
  c0c454:	dfc00117 	ldw	ra,4(sp)
  c0c458:	df000017 	ldw	fp,0(sp)
  c0c45c:	dec00204 	addi	sp,sp,8
  c0c460:	f800283a 	ret

00c0c464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  c0c464:	defffd04 	addi	sp,sp,-12
  c0c468:	dfc00215 	stw	ra,8(sp)
  c0c46c:	df000115 	stw	fp,4(sp)
  c0c470:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  c0c474:	00803074 	movhi	r2,193
  c0c478:	1089b404 	addi	r2,r2,9936
  c0c47c:	10800017 	ldw	r2,0(r2)
  c0c480:	1005003a 	cmpeq	r2,r2,zero
  c0c484:	1000061e 	bne	r2,zero,c0c4a0 <alt_get_errno+0x3c>
  c0c488:	00803074 	movhi	r2,193
  c0c48c:	1089b404 	addi	r2,r2,9936
  c0c490:	10800017 	ldw	r2,0(r2)
  c0c494:	103ee83a 	callr	r2
  c0c498:	e0bfff15 	stw	r2,-4(fp)
  c0c49c:	00000306 	br	c0c4ac <alt_get_errno+0x48>
  c0c4a0:	00803074 	movhi	r2,193
  c0c4a4:	1090bd04 	addi	r2,r2,17140
  c0c4a8:	e0bfff15 	stw	r2,-4(fp)
  c0c4ac:	e0bfff17 	ldw	r2,-4(fp)
}
  c0c4b0:	e037883a 	mov	sp,fp
  c0c4b4:	dfc00117 	ldw	ra,4(sp)
  c0c4b8:	df000017 	ldw	fp,0(sp)
  c0c4bc:	dec00204 	addi	sp,sp,8
  c0c4c0:	f800283a 	ret

00c0c4c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  c0c4c4:	defffe04 	addi	sp,sp,-8
  c0c4c8:	dfc00115 	stw	ra,4(sp)
  c0c4cc:	df000015 	stw	fp,0(sp)
  c0c4d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  c0c4d4:	01003074 	movhi	r4,193
  c0c4d8:	2109bd04 	addi	r4,r4,9972
  c0c4dc:	01403074 	movhi	r5,193
  c0c4e0:	2942c404 	addi	r5,r5,2832
  c0c4e4:	01803074 	movhi	r6,193
  c0c4e8:	3189bd04 	addi	r6,r6,9972
  c0c4ec:	0c0c5440 	call	c0c544 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  c0c4f0:	01003034 	movhi	r4,192
  c0c4f4:	21000804 	addi	r4,r4,32
  c0c4f8:	01403034 	movhi	r5,192
  c0c4fc:	29400804 	addi	r5,r5,32
  c0c500:	01803034 	movhi	r6,192
  c0c504:	31806d04 	addi	r6,r6,436
  c0c508:	0c0c5440 	call	c0c544 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  c0c50c:	01003074 	movhi	r4,193
  c0c510:	21018b04 	addi	r4,r4,1580
  c0c514:	01403074 	movhi	r5,193
  c0c518:	29418b04 	addi	r5,r5,1580
  c0c51c:	01803074 	movhi	r6,193
  c0c520:	3182c404 	addi	r6,r6,2832
  c0c524:	0c0c5440 	call	c0c544 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  c0c528:	0c0f9b00 	call	c0f9b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  c0c52c:	0c0fc640 	call	c0fc64 <alt_icache_flush_all>
}
  c0c530:	e037883a 	mov	sp,fp
  c0c534:	dfc00117 	ldw	ra,4(sp)
  c0c538:	df000017 	ldw	fp,0(sp)
  c0c53c:	dec00204 	addi	sp,sp,8
  c0c540:	f800283a 	ret

00c0c544 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  c0c544:	defffc04 	addi	sp,sp,-16
  c0c548:	df000315 	stw	fp,12(sp)
  c0c54c:	df000304 	addi	fp,sp,12
  c0c550:	e13ffd15 	stw	r4,-12(fp)
  c0c554:	e17ffe15 	stw	r5,-8(fp)
  c0c558:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  c0c55c:	e0fffe17 	ldw	r3,-8(fp)
  c0c560:	e0bffd17 	ldw	r2,-12(fp)
  c0c564:	18800e26 	beq	r3,r2,c0c5a0 <alt_load_section+0x5c>
  {
    while( to != end )
  c0c568:	00000a06 	br	c0c594 <alt_load_section+0x50>
    {
      *to++ = *from++;
  c0c56c:	e0bffd17 	ldw	r2,-12(fp)
  c0c570:	10c00017 	ldw	r3,0(r2)
  c0c574:	e0bffe17 	ldw	r2,-8(fp)
  c0c578:	10c00015 	stw	r3,0(r2)
  c0c57c:	e0bffe17 	ldw	r2,-8(fp)
  c0c580:	10800104 	addi	r2,r2,4
  c0c584:	e0bffe15 	stw	r2,-8(fp)
  c0c588:	e0bffd17 	ldw	r2,-12(fp)
  c0c58c:	10800104 	addi	r2,r2,4
  c0c590:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  c0c594:	e0fffe17 	ldw	r3,-8(fp)
  c0c598:	e0bfff17 	ldw	r2,-4(fp)
  c0c59c:	18bff31e 	bne	r3,r2,c0c56c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  c0c5a0:	e037883a 	mov	sp,fp
  c0c5a4:	df000017 	ldw	fp,0(sp)
  c0c5a8:	dec00104 	addi	sp,sp,4
  c0c5ac:	f800283a 	ret

00c0c5b0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  c0c5b0:	defff804 	addi	sp,sp,-32
  c0c5b4:	dfc00715 	stw	ra,28(sp)
  c0c5b8:	df000615 	stw	fp,24(sp)
  c0c5bc:	df000604 	addi	fp,sp,24
  c0c5c0:	e13ffc15 	stw	r4,-16(fp)
  c0c5c4:	e17ffd15 	stw	r5,-12(fp)
  c0c5c8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  c0c5cc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  c0c5d0:	e0bffc17 	ldw	r2,-16(fp)
  c0c5d4:	1004803a 	cmplt	r2,r2,zero
  c0c5d8:	1000081e 	bne	r2,zero,c0c5fc <lseek+0x4c>
  c0c5dc:	e0bffc17 	ldw	r2,-16(fp)
  c0c5e0:	10800324 	muli	r2,r2,12
  c0c5e4:	1007883a 	mov	r3,r2
  c0c5e8:	00803074 	movhi	r2,193
  c0c5ec:	1084d304 	addi	r2,r2,4940
  c0c5f0:	1887883a 	add	r3,r3,r2
  c0c5f4:	e0ffff15 	stw	r3,-4(fp)
  c0c5f8:	00000106 	br	c0c600 <lseek+0x50>
  c0c5fc:	e03fff15 	stw	zero,-4(fp)
  c0c600:	e0bfff17 	ldw	r2,-4(fp)
  c0c604:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  c0c608:	e0bffb17 	ldw	r2,-20(fp)
  c0c60c:	1005003a 	cmpeq	r2,r2,zero
  c0c610:	1000111e 	bne	r2,zero,c0c658 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  c0c614:	e0bffb17 	ldw	r2,-20(fp)
  c0c618:	10800017 	ldw	r2,0(r2)
  c0c61c:	10800717 	ldw	r2,28(r2)
  c0c620:	1005003a 	cmpeq	r2,r2,zero
  c0c624:	1000091e 	bne	r2,zero,c0c64c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  c0c628:	e0bffb17 	ldw	r2,-20(fp)
  c0c62c:	10800017 	ldw	r2,0(r2)
  c0c630:	10800717 	ldw	r2,28(r2)
  c0c634:	e13ffb17 	ldw	r4,-20(fp)
  c0c638:	e17ffd17 	ldw	r5,-12(fp)
  c0c63c:	e1bffe17 	ldw	r6,-8(fp)
  c0c640:	103ee83a 	callr	r2
  c0c644:	e0bffa15 	stw	r2,-24(fp)
  c0c648:	00000506 	br	c0c660 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  c0c64c:	00bfde84 	movi	r2,-134
  c0c650:	e0bffa15 	stw	r2,-24(fp)
  c0c654:	00000206 	br	c0c660 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  c0c658:	00bfebc4 	movi	r2,-81
  c0c65c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  c0c660:	e0bffa17 	ldw	r2,-24(fp)
  c0c664:	1004403a 	cmpge	r2,r2,zero
  c0c668:	1000071e 	bne	r2,zero,c0c688 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  c0c66c:	0c0c6a00 	call	c0c6a0 <alt_get_errno>
  c0c670:	1007883a 	mov	r3,r2
  c0c674:	e0bffa17 	ldw	r2,-24(fp)
  c0c678:	0085c83a 	sub	r2,zero,r2
  c0c67c:	18800015 	stw	r2,0(r3)
    rc = -1;
  c0c680:	00bfffc4 	movi	r2,-1
  c0c684:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  c0c688:	e0bffa17 	ldw	r2,-24(fp)
}
  c0c68c:	e037883a 	mov	sp,fp
  c0c690:	dfc00117 	ldw	ra,4(sp)
  c0c694:	df000017 	ldw	fp,0(sp)
  c0c698:	dec00204 	addi	sp,sp,8
  c0c69c:	f800283a 	ret

00c0c6a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  c0c6a0:	defffd04 	addi	sp,sp,-12
  c0c6a4:	dfc00215 	stw	ra,8(sp)
  c0c6a8:	df000115 	stw	fp,4(sp)
  c0c6ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  c0c6b0:	00803074 	movhi	r2,193
  c0c6b4:	1089b404 	addi	r2,r2,9936
  c0c6b8:	10800017 	ldw	r2,0(r2)
  c0c6bc:	1005003a 	cmpeq	r2,r2,zero
  c0c6c0:	1000061e 	bne	r2,zero,c0c6dc <alt_get_errno+0x3c>
  c0c6c4:	00803074 	movhi	r2,193
  c0c6c8:	1089b404 	addi	r2,r2,9936
  c0c6cc:	10800017 	ldw	r2,0(r2)
  c0c6d0:	103ee83a 	callr	r2
  c0c6d4:	e0bfff15 	stw	r2,-4(fp)
  c0c6d8:	00000306 	br	c0c6e8 <alt_get_errno+0x48>
  c0c6dc:	00803074 	movhi	r2,193
  c0c6e0:	1090bd04 	addi	r2,r2,17140
  c0c6e4:	e0bfff15 	stw	r2,-4(fp)
  c0c6e8:	e0bfff17 	ldw	r2,-4(fp)
}
  c0c6ec:	e037883a 	mov	sp,fp
  c0c6f0:	dfc00117 	ldw	ra,4(sp)
  c0c6f4:	df000017 	ldw	fp,0(sp)
  c0c6f8:	dec00204 	addi	sp,sp,8
  c0c6fc:	f800283a 	ret

00c0c700 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  c0c700:	defffd04 	addi	sp,sp,-12
  c0c704:	dfc00215 	stw	ra,8(sp)
  c0c708:	df000115 	stw	fp,4(sp)
  c0c70c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  c0c710:	0009883a 	mov	r4,zero
  c0c714:	0c0cbac0 	call	c0cbac <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  c0c718:	0c0cbe00 	call	c0cbe0 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  c0c71c:	0c0fb080 	call	c0fb08 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  c0c720:	01003074 	movhi	r4,193
  c0c724:	213edb04 	addi	r4,r4,-1172
  c0c728:	0c101b40 	call	c101b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  c0c72c:	d1272217 	ldw	r4,-25464(gp)
  c0c730:	d1672317 	ldw	r5,-25460(gp)
  c0c734:	d1a72417 	ldw	r6,-25456(gp)
  c0c738:	0c0070c0 	call	c0070c <main>
  c0c73c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  c0c740:	01000044 	movi	r4,1
  c0c744:	0c0c0e80 	call	c0c0e8 <close>
  exit (result);
  c0c748:	e13fff17 	ldw	r4,-4(fp)
  c0c74c:	0c101c80 	call	c101c8 <exit>

00c0c750 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  c0c750:	defffe04 	addi	sp,sp,-8
  c0c754:	df000115 	stw	fp,4(sp)
  c0c758:	df000104 	addi	fp,sp,4
  c0c75c:	e13fff15 	stw	r4,-4(fp)
}
  c0c760:	e037883a 	mov	sp,fp
  c0c764:	df000017 	ldw	fp,0(sp)
  c0c768:	dec00104 	addi	sp,sp,4
  c0c76c:	f800283a 	ret

00c0c770 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  c0c770:	defffe04 	addi	sp,sp,-8
  c0c774:	df000115 	stw	fp,4(sp)
  c0c778:	df000104 	addi	fp,sp,4
  c0c77c:	e13fff15 	stw	r4,-4(fp)
}
  c0c780:	e037883a 	mov	sp,fp
  c0c784:	df000017 	ldw	fp,0(sp)
  c0c788:	dec00104 	addi	sp,sp,4
  c0c78c:	f800283a 	ret

00c0c790 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  c0c790:	defff704 	addi	sp,sp,-36
  c0c794:	dfc00815 	stw	ra,32(sp)
  c0c798:	df000715 	stw	fp,28(sp)
  c0c79c:	df000704 	addi	fp,sp,28
  c0c7a0:	e13ffb15 	stw	r4,-20(fp)
  c0c7a4:	e17ffc15 	stw	r5,-16(fp)
  c0c7a8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  c0c7ac:	e0bffb17 	ldw	r2,-20(fp)
  c0c7b0:	1004803a 	cmplt	r2,r2,zero
  c0c7b4:	1000081e 	bne	r2,zero,c0c7d8 <read+0x48>
  c0c7b8:	e0bffb17 	ldw	r2,-20(fp)
  c0c7bc:	10800324 	muli	r2,r2,12
  c0c7c0:	1007883a 	mov	r3,r2
  c0c7c4:	00803074 	movhi	r2,193
  c0c7c8:	1084d304 	addi	r2,r2,4940
  c0c7cc:	1887883a 	add	r3,r3,r2
  c0c7d0:	e0ffff15 	stw	r3,-4(fp)
  c0c7d4:	00000106 	br	c0c7dc <read+0x4c>
  c0c7d8:	e03fff15 	stw	zero,-4(fp)
  c0c7dc:	e0bfff17 	ldw	r2,-4(fp)
  c0c7e0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  c0c7e4:	e0bffa17 	ldw	r2,-24(fp)
  c0c7e8:	1005003a 	cmpeq	r2,r2,zero
  c0c7ec:	1000241e 	bne	r2,zero,c0c880 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  c0c7f0:	e0bffa17 	ldw	r2,-24(fp)
  c0c7f4:	10800217 	ldw	r2,8(r2)
  c0c7f8:	108000cc 	andi	r2,r2,3
  c0c7fc:	10800060 	cmpeqi	r2,r2,1
  c0c800:	10001a1e 	bne	r2,zero,c0c86c <read+0xdc>
  c0c804:	e0bffa17 	ldw	r2,-24(fp)
  c0c808:	10800017 	ldw	r2,0(r2)
  c0c80c:	10800517 	ldw	r2,20(r2)
  c0c810:	1005003a 	cmpeq	r2,r2,zero
  c0c814:	1000151e 	bne	r2,zero,c0c86c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  c0c818:	e0bffa17 	ldw	r2,-24(fp)
  c0c81c:	10800017 	ldw	r2,0(r2)
  c0c820:	10800517 	ldw	r2,20(r2)
  c0c824:	e17ffc17 	ldw	r5,-16(fp)
  c0c828:	e1bffd17 	ldw	r6,-12(fp)
  c0c82c:	e13ffa17 	ldw	r4,-24(fp)
  c0c830:	103ee83a 	callr	r2
  c0c834:	e0bff915 	stw	r2,-28(fp)
  c0c838:	e0bff917 	ldw	r2,-28(fp)
  c0c83c:	1004403a 	cmpge	r2,r2,zero
  c0c840:	1000071e 	bne	r2,zero,c0c860 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  c0c844:	0c0c8b00 	call	c0c8b0 <alt_get_errno>
  c0c848:	e0fff917 	ldw	r3,-28(fp)
  c0c84c:	00c7c83a 	sub	r3,zero,r3
  c0c850:	10c00015 	stw	r3,0(r2)
          return -1;
  c0c854:	00bfffc4 	movi	r2,-1
  c0c858:	e0bffe15 	stw	r2,-8(fp)
  c0c85c:	00000e06 	br	c0c898 <read+0x108>
        }
        return rval;
  c0c860:	e0bff917 	ldw	r2,-28(fp)
  c0c864:	e0bffe15 	stw	r2,-8(fp)
  c0c868:	00000b06 	br	c0c898 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  c0c86c:	0c0c8b00 	call	c0c8b0 <alt_get_errno>
  c0c870:	1007883a 	mov	r3,r2
  c0c874:	00800344 	movi	r2,13
  c0c878:	18800015 	stw	r2,0(r3)
  c0c87c:	00000406 	br	c0c890 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  c0c880:	0c0c8b00 	call	c0c8b0 <alt_get_errno>
  c0c884:	1007883a 	mov	r3,r2
  c0c888:	00801444 	movi	r2,81
  c0c88c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  c0c890:	00bfffc4 	movi	r2,-1
  c0c894:	e0bffe15 	stw	r2,-8(fp)
  c0c898:	e0bffe17 	ldw	r2,-8(fp)
}
  c0c89c:	e037883a 	mov	sp,fp
  c0c8a0:	dfc00117 	ldw	ra,4(sp)
  c0c8a4:	df000017 	ldw	fp,0(sp)
  c0c8a8:	dec00204 	addi	sp,sp,8
  c0c8ac:	f800283a 	ret

00c0c8b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  c0c8b0:	defffd04 	addi	sp,sp,-12
  c0c8b4:	dfc00215 	stw	ra,8(sp)
  c0c8b8:	df000115 	stw	fp,4(sp)
  c0c8bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  c0c8c0:	00803074 	movhi	r2,193
  c0c8c4:	1089b404 	addi	r2,r2,9936
  c0c8c8:	10800017 	ldw	r2,0(r2)
  c0c8cc:	1005003a 	cmpeq	r2,r2,zero
  c0c8d0:	1000061e 	bne	r2,zero,c0c8ec <alt_get_errno+0x3c>
  c0c8d4:	00803074 	movhi	r2,193
  c0c8d8:	1089b404 	addi	r2,r2,9936
  c0c8dc:	10800017 	ldw	r2,0(r2)
  c0c8e0:	103ee83a 	callr	r2
  c0c8e4:	e0bfff15 	stw	r2,-4(fp)
  c0c8e8:	00000306 	br	c0c8f8 <alt_get_errno+0x48>
  c0c8ec:	00803074 	movhi	r2,193
  c0c8f0:	1090bd04 	addi	r2,r2,17140
  c0c8f4:	e0bfff15 	stw	r2,-4(fp)
  c0c8f8:	e0bfff17 	ldw	r2,-4(fp)
}
  c0c8fc:	e037883a 	mov	sp,fp
  c0c900:	dfc00117 	ldw	ra,4(sp)
  c0c904:	df000017 	ldw	fp,0(sp)
  c0c908:	dec00204 	addi	sp,sp,8
  c0c90c:	f800283a 	ret

00c0c910 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  c0c910:	defffe04 	addi	sp,sp,-8
  c0c914:	df000115 	stw	fp,4(sp)
  c0c918:	df000104 	addi	fp,sp,4
  c0c91c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  c0c920:	e0bfff17 	ldw	r2,-4(fp)
  c0c924:	108000d0 	cmplti	r2,r2,3
  c0c928:	10000d1e 	bne	r2,zero,c0c960 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  c0c92c:	e0bfff17 	ldw	r2,-4(fp)
  c0c930:	00c03074 	movhi	r3,193
  c0c934:	18c4d304 	addi	r3,r3,4940
  c0c938:	10800324 	muli	r2,r2,12
  c0c93c:	10c5883a 	add	r2,r2,r3
  c0c940:	10800204 	addi	r2,r2,8
  c0c944:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  c0c948:	e0bfff17 	ldw	r2,-4(fp)
  c0c94c:	00c03074 	movhi	r3,193
  c0c950:	18c4d304 	addi	r3,r3,4940
  c0c954:	10800324 	muli	r2,r2,12
  c0c958:	10c5883a 	add	r2,r2,r3
  c0c95c:	10000015 	stw	zero,0(r2)
  }
}
  c0c960:	e037883a 	mov	sp,fp
  c0c964:	df000017 	ldw	fp,0(sp)
  c0c968:	dec00104 	addi	sp,sp,4
  c0c96c:	f800283a 	ret

00c0c970 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  c0c970:	defff804 	addi	sp,sp,-32
  c0c974:	df000715 	stw	fp,28(sp)
  c0c978:	df000704 	addi	fp,sp,28
  c0c97c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  c0c980:	0005303a 	rdctl	r2,status
  c0c984:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  c0c988:	e0fffb17 	ldw	r3,-20(fp)
  c0c98c:	00bfff84 	movi	r2,-2
  c0c990:	1884703a 	and	r2,r3,r2
  c0c994:	1001703a 	wrctl	status,r2
  
  return context;
  c0c998:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  c0c99c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  c0c9a0:	d0a01917 	ldw	r2,-32668(gp)
  c0c9a4:	10c000c4 	addi	r3,r2,3
  c0c9a8:	00bfff04 	movi	r2,-4
  c0c9ac:	1884703a 	and	r2,r3,r2
  c0c9b0:	d0a01915 	stw	r2,-32668(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  c0c9b4:	d0e01917 	ldw	r3,-32668(gp)
  c0c9b8:	e0bffe17 	ldw	r2,-8(fp)
  c0c9bc:	1887883a 	add	r3,r3,r2
  c0c9c0:	00803834 	movhi	r2,224
  c0c9c4:	10800004 	addi	r2,r2,0
  c0c9c8:	10c0072e 	bgeu	r2,r3,c0c9e8 <sbrk+0x78>
  c0c9cc:	e0bffd17 	ldw	r2,-12(fp)
  c0c9d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  c0c9d4:	e0bffa17 	ldw	r2,-24(fp)
  c0c9d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  c0c9dc:	00bfffc4 	movi	r2,-1
  c0c9e0:	e0bfff15 	stw	r2,-4(fp)
  c0c9e4:	00000c06 	br	c0ca18 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  c0c9e8:	d0a01917 	ldw	r2,-32668(gp)
  c0c9ec:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  c0c9f0:	d0e01917 	ldw	r3,-32668(gp)
  c0c9f4:	e0bffe17 	ldw	r2,-8(fp)
  c0c9f8:	1885883a 	add	r2,r3,r2
  c0c9fc:	d0a01915 	stw	r2,-32668(gp)
  c0ca00:	e0bffd17 	ldw	r2,-12(fp)
  c0ca04:	e0bff915 	stw	r2,-28(fp)
  c0ca08:	e0bff917 	ldw	r2,-28(fp)
  c0ca0c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  c0ca10:	e0bffc17 	ldw	r2,-16(fp)
  c0ca14:	e0bfff15 	stw	r2,-4(fp)
  c0ca18:	e0bfff17 	ldw	r2,-4(fp)
} 
  c0ca1c:	e037883a 	mov	sp,fp
  c0ca20:	df000017 	ldw	fp,0(sp)
  c0ca24:	dec00104 	addi	sp,sp,4
  c0ca28:	f800283a 	ret

00c0ca2c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  c0ca2c:	defff704 	addi	sp,sp,-36
  c0ca30:	dfc00815 	stw	ra,32(sp)
  c0ca34:	df000715 	stw	fp,28(sp)
  c0ca38:	df000704 	addi	fp,sp,28
  c0ca3c:	e13ffb15 	stw	r4,-20(fp)
  c0ca40:	e17ffc15 	stw	r5,-16(fp)
  c0ca44:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  c0ca48:	e0bffb17 	ldw	r2,-20(fp)
  c0ca4c:	1004803a 	cmplt	r2,r2,zero
  c0ca50:	1000081e 	bne	r2,zero,c0ca74 <write+0x48>
  c0ca54:	e0bffb17 	ldw	r2,-20(fp)
  c0ca58:	10800324 	muli	r2,r2,12
  c0ca5c:	1007883a 	mov	r3,r2
  c0ca60:	00803074 	movhi	r2,193
  c0ca64:	1084d304 	addi	r2,r2,4940
  c0ca68:	1887883a 	add	r3,r3,r2
  c0ca6c:	e0ffff15 	stw	r3,-4(fp)
  c0ca70:	00000106 	br	c0ca78 <write+0x4c>
  c0ca74:	e03fff15 	stw	zero,-4(fp)
  c0ca78:	e0bfff17 	ldw	r2,-4(fp)
  c0ca7c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  c0ca80:	e0bffa17 	ldw	r2,-24(fp)
  c0ca84:	1005003a 	cmpeq	r2,r2,zero
  c0ca88:	1000241e 	bne	r2,zero,c0cb1c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  c0ca8c:	e0bffa17 	ldw	r2,-24(fp)
  c0ca90:	10800217 	ldw	r2,8(r2)
  c0ca94:	108000cc 	andi	r2,r2,3
  c0ca98:	1005003a 	cmpeq	r2,r2,zero
  c0ca9c:	10001a1e 	bne	r2,zero,c0cb08 <write+0xdc>
  c0caa0:	e0bffa17 	ldw	r2,-24(fp)
  c0caa4:	10800017 	ldw	r2,0(r2)
  c0caa8:	10800617 	ldw	r2,24(r2)
  c0caac:	1005003a 	cmpeq	r2,r2,zero
  c0cab0:	1000151e 	bne	r2,zero,c0cb08 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  c0cab4:	e0bffa17 	ldw	r2,-24(fp)
  c0cab8:	10800017 	ldw	r2,0(r2)
  c0cabc:	10800617 	ldw	r2,24(r2)
  c0cac0:	e17ffc17 	ldw	r5,-16(fp)
  c0cac4:	e1bffd17 	ldw	r6,-12(fp)
  c0cac8:	e13ffa17 	ldw	r4,-24(fp)
  c0cacc:	103ee83a 	callr	r2
  c0cad0:	e0bff915 	stw	r2,-28(fp)
  c0cad4:	e0bff917 	ldw	r2,-28(fp)
  c0cad8:	1004403a 	cmpge	r2,r2,zero
  c0cadc:	1000071e 	bne	r2,zero,c0cafc <write+0xd0>
      {
        ALT_ERRNO = -rval;
  c0cae0:	0c0cb4c0 	call	c0cb4c <alt_get_errno>
  c0cae4:	e0fff917 	ldw	r3,-28(fp)
  c0cae8:	00c7c83a 	sub	r3,zero,r3
  c0caec:	10c00015 	stw	r3,0(r2)
        return -1;
  c0caf0:	00bfffc4 	movi	r2,-1
  c0caf4:	e0bffe15 	stw	r2,-8(fp)
  c0caf8:	00000e06 	br	c0cb34 <write+0x108>
      }
      return rval;
  c0cafc:	e0bff917 	ldw	r2,-28(fp)
  c0cb00:	e0bffe15 	stw	r2,-8(fp)
  c0cb04:	00000b06 	br	c0cb34 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  c0cb08:	0c0cb4c0 	call	c0cb4c <alt_get_errno>
  c0cb0c:	1007883a 	mov	r3,r2
  c0cb10:	00800344 	movi	r2,13
  c0cb14:	18800015 	stw	r2,0(r3)
  c0cb18:	00000406 	br	c0cb2c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  c0cb1c:	0c0cb4c0 	call	c0cb4c <alt_get_errno>
  c0cb20:	1007883a 	mov	r3,r2
  c0cb24:	00801444 	movi	r2,81
  c0cb28:	18800015 	stw	r2,0(r3)
  }
  return -1;
  c0cb2c:	00bfffc4 	movi	r2,-1
  c0cb30:	e0bffe15 	stw	r2,-8(fp)
  c0cb34:	e0bffe17 	ldw	r2,-8(fp)
}
  c0cb38:	e037883a 	mov	sp,fp
  c0cb3c:	dfc00117 	ldw	ra,4(sp)
  c0cb40:	df000017 	ldw	fp,0(sp)
  c0cb44:	dec00204 	addi	sp,sp,8
  c0cb48:	f800283a 	ret

00c0cb4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  c0cb4c:	defffd04 	addi	sp,sp,-12
  c0cb50:	dfc00215 	stw	ra,8(sp)
  c0cb54:	df000115 	stw	fp,4(sp)
  c0cb58:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  c0cb5c:	00803074 	movhi	r2,193
  c0cb60:	1089b404 	addi	r2,r2,9936
  c0cb64:	10800017 	ldw	r2,0(r2)
  c0cb68:	1005003a 	cmpeq	r2,r2,zero
  c0cb6c:	1000061e 	bne	r2,zero,c0cb88 <alt_get_errno+0x3c>
  c0cb70:	00803074 	movhi	r2,193
  c0cb74:	1089b404 	addi	r2,r2,9936
  c0cb78:	10800017 	ldw	r2,0(r2)
  c0cb7c:	103ee83a 	callr	r2
  c0cb80:	e0bfff15 	stw	r2,-4(fp)
  c0cb84:	00000306 	br	c0cb94 <alt_get_errno+0x48>
  c0cb88:	00803074 	movhi	r2,193
  c0cb8c:	1090bd04 	addi	r2,r2,17140
  c0cb90:	e0bfff15 	stw	r2,-4(fp)
  c0cb94:	e0bfff17 	ldw	r2,-4(fp)
}
  c0cb98:	e037883a 	mov	sp,fp
  c0cb9c:	dfc00117 	ldw	ra,4(sp)
  c0cba0:	df000017 	ldw	fp,0(sp)
  c0cba4:	dec00204 	addi	sp,sp,8
  c0cba8:	f800283a 	ret

00c0cbac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  c0cbac:	defffd04 	addi	sp,sp,-12
  c0cbb0:	dfc00215 	stw	ra,8(sp)
  c0cbb4:	df000115 	stw	fp,4(sp)
  c0cbb8:	df000104 	addi	fp,sp,4
  c0cbbc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_2, cpu_2);
  c0cbc0:	0c101040 	call	c10104 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  c0cbc4:	00800044 	movi	r2,1
  c0cbc8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  c0cbcc:	e037883a 	mov	sp,fp
  c0cbd0:	dfc00117 	ldw	ra,4(sp)
  c0cbd4:	df000017 	ldw	fp,0(sp)
  c0cbd8:	dec00204 	addi	sp,sp,8
  c0cbdc:	f800283a 	ret

00c0cbe0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  c0cbe0:	defffd04 	addi	sp,sp,-12
  c0cbe4:	dfc00215 	stw	ra,8(sp)
  c0cbe8:	df000115 	stw	fp,4(sp)
  c0cbec:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_2, jtag_uart_2);
  c0cbf0:	01003074 	movhi	r4,193
  c0cbf4:	21053d04 	addi	r4,r4,5364
  c0cbf8:	000b883a 	mov	r5,zero
  c0cbfc:	01800044 	movi	r6,1
  c0cc00:	0c0cfd80 	call	c0cfd8 <altera_avalon_jtag_uart_init>
  c0cc04:	01003074 	movhi	r4,193
  c0cc08:	21053304 	addi	r4,r4,5324
  c0cc0c:	0c0ce580 	call	c0ce58 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
  c0cc10:	01003074 	movhi	r4,193
  c0cc14:	21094b04 	addi	r4,r4,9516
  c0cc18:	0c0d93c0 	call	c0d93c <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
  c0cc1c:	01003074 	movhi	r4,193
  c0cc20:	21095a04 	addi	r4,r4,9576
  c0cc24:	0c0d93c0 	call	c0d93c <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
  c0cc28:	01003074 	movhi	r4,193
  c0cc2c:	21096904 	addi	r4,r4,9636
  c0cc30:	0c0d93c0 	call	c0d93c <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
  c0cc34:	01003074 	movhi	r4,193
  c0cc38:	21097804 	addi	r4,r4,9696
  c0cc3c:	0c0d93c0 	call	c0d93c <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
  c0cc40:	0007883a 	mov	r3,zero
  c0cc44:	00800044 	movi	r2,1
  c0cc48:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  c0cc4c:	00803074 	movhi	r2,193
  c0cc50:	10898704 	addi	r2,r2,9756
  c0cc54:	10800a17 	ldw	r2,40(r2)
  c0cc58:	10800017 	ldw	r2,0(r2)
  c0cc5c:	1007883a 	mov	r3,r2
  c0cc60:	00803074 	movhi	r2,193
  c0cc64:	10898704 	addi	r2,r2,9756
  c0cc68:	10c00b15 	stw	r3,44(r2)
  c0cc6c:	00803074 	movhi	r2,193
  c0cc70:	10898704 	addi	r2,r2,9756
  c0cc74:	10800a17 	ldw	r2,40(r2)
  c0cc78:	10800104 	addi	r2,r2,4
  c0cc7c:	10800017 	ldw	r2,0(r2)
  c0cc80:	1007883a 	mov	r3,r2
  c0cc84:	00803074 	movhi	r2,193
  c0cc88:	10898704 	addi	r2,r2,9756
  c0cc8c:	10c00c15 	stw	r3,48(r2)
  c0cc90:	00803074 	movhi	r2,193
  c0cc94:	10898704 	addi	r2,r2,9756
  c0cc98:	10800a17 	ldw	r2,40(r2)
  c0cc9c:	10800204 	addi	r2,r2,8
  c0cca0:	10800017 	ldw	r2,0(r2)
  c0cca4:	10ffffcc 	andi	r3,r2,65535
  c0cca8:	00803074 	movhi	r2,193
  c0ccac:	10898704 	addi	r2,r2,9756
  c0ccb0:	10c00f15 	stw	r3,60(r2)
  c0ccb4:	00803074 	movhi	r2,193
  c0ccb8:	10898704 	addi	r2,r2,9756
  c0ccbc:	10800a17 	ldw	r2,40(r2)
  c0ccc0:	10800204 	addi	r2,r2,8
  c0ccc4:	10800017 	ldw	r2,0(r2)
  c0ccc8:	1005d43a 	srai	r2,r2,16
  c0cccc:	10ffffcc 	andi	r3,r2,65535
  c0ccd0:	00803074 	movhi	r2,193
  c0ccd4:	10898704 	addi	r2,r2,9756
  c0ccd8:	10c01015 	stw	r3,64(r2)
  c0ccdc:	00803074 	movhi	r2,193
  c0cce0:	10898704 	addi	r2,r2,9756
  c0cce4:	10800a17 	ldw	r2,40(r2)
  c0cce8:	10800304 	addi	r2,r2,12
  c0ccec:	10800017 	ldw	r2,0(r2)
  c0ccf0:	1005d07a 	srai	r2,r2,1
  c0ccf4:	10c0004c 	andi	r3,r2,1
  c0ccf8:	00803074 	movhi	r2,193
  c0ccfc:	10898704 	addi	r2,r2,9756
  c0cd00:	10c00d15 	stw	r3,52(r2)
  c0cd04:	00803074 	movhi	r2,193
  c0cd08:	10898704 	addi	r2,r2,9756
  c0cd0c:	10800a17 	ldw	r2,40(r2)
  c0cd10:	10800304 	addi	r2,r2,12
  c0cd14:	10800017 	ldw	r2,0(r2)
  c0cd18:	1005d13a 	srai	r2,r2,4
  c0cd1c:	10c003cc 	andi	r3,r2,15
  c0cd20:	00803074 	movhi	r2,193
  c0cd24:	10898704 	addi	r2,r2,9756
  c0cd28:	10c00e15 	stw	r3,56(r2)
  c0cd2c:	00803074 	movhi	r2,193
  c0cd30:	10898704 	addi	r2,r2,9756
  c0cd34:	10800a17 	ldw	r2,40(r2)
  c0cd38:	10800304 	addi	r2,r2,12
  c0cd3c:	10800017 	ldw	r2,0(r2)
  c0cd40:	1005d43a 	srai	r2,r2,16
  c0cd44:	1007883a 	mov	r3,r2
  c0cd48:	00bfffc4 	movi	r2,-1
  c0cd4c:	1884703a 	and	r2,r3,r2
  c0cd50:	e0bfff45 	stb	r2,-3(fp)
  c0cd54:	00803074 	movhi	r2,193
  c0cd58:	10898704 	addi	r2,r2,9756
  c0cd5c:	10800a17 	ldw	r2,40(r2)
  c0cd60:	10800304 	addi	r2,r2,12
  c0cd64:	10800017 	ldw	r2,0(r2)
  c0cd68:	1005d63a 	srai	r2,r2,24
  c0cd6c:	1007883a 	mov	r3,r2
  c0cd70:	00bfffc4 	movi	r2,-1
  c0cd74:	1884703a 	and	r2,r3,r2
  c0cd78:	e0bfff05 	stb	r2,-4(fp)
  c0cd7c:	00803074 	movhi	r2,193
  c0cd80:	10898704 	addi	r2,r2,9756
  c0cd84:	10800e17 	ldw	r2,56(r2)
  c0cd88:	10800058 	cmpnei	r2,r2,1
  c0cd8c:	1000041e 	bne	r2,zero,c0cda0 <alt_sys_init+0x1c0>
  c0cd90:	00803074 	movhi	r2,193
  c0cd94:	10898704 	addi	r2,r2,9756
  c0cd98:	10001115 	stw	zero,68(r2)
  c0cd9c:	00000e06 	br	c0cdd8 <alt_sys_init+0x1f8>
  c0cda0:	00803074 	movhi	r2,193
  c0cda4:	10898704 	addi	r2,r2,9756
  c0cda8:	10800e17 	ldw	r2,56(r2)
  c0cdac:	10800098 	cmpnei	r2,r2,2
  c0cdb0:	1000051e 	bne	r2,zero,c0cdc8 <alt_sys_init+0x1e8>
  c0cdb4:	00c03074 	movhi	r3,193
  c0cdb8:	18c98704 	addi	r3,r3,9756
  c0cdbc:	00800044 	movi	r2,1
  c0cdc0:	18801115 	stw	r2,68(r3)
  c0cdc4:	00000406 	br	c0cdd8 <alt_sys_init+0x1f8>
  c0cdc8:	00c03074 	movhi	r3,193
  c0cdcc:	18c98704 	addi	r3,r3,9756
  c0cdd0:	00800084 	movi	r2,2
  c0cdd4:	18801115 	stw	r2,68(r3)
  c0cdd8:	e0ffff43 	ldbu	r3,-3(fp)
  c0cddc:	00800804 	movi	r2,32
  c0cde0:	10c7c83a 	sub	r3,r2,r3
  c0cde4:	00bfffc4 	movi	r2,-1
  c0cde8:	10c6d83a 	srl	r3,r2,r3
  c0cdec:	00803074 	movhi	r2,193
  c0cdf0:	10898704 	addi	r2,r2,9756
  c0cdf4:	10c01215 	stw	r3,72(r2)
  c0cdf8:	e0ffff43 	ldbu	r3,-3(fp)
  c0cdfc:	00803074 	movhi	r2,193
  c0ce00:	10898704 	addi	r2,r2,9756
  c0ce04:	10801117 	ldw	r2,68(r2)
  c0ce08:	1887883a 	add	r3,r3,r2
  c0ce0c:	00803074 	movhi	r2,193
  c0ce10:	10898704 	addi	r2,r2,9756
  c0ce14:	10c01315 	stw	r3,76(r2)
  c0ce18:	e0ffff03 	ldbu	r3,-4(fp)
  c0ce1c:	00800804 	movi	r2,32
  c0ce20:	10c7c83a 	sub	r3,r2,r3
  c0ce24:	00bfffc4 	movi	r2,-1
  c0ce28:	10c6d83a 	srl	r3,r2,r3
  c0ce2c:	00803074 	movhi	r2,193
  c0ce30:	10898704 	addi	r2,r2,9756
  c0ce34:	10c01415 	stw	r3,80(r2)
  c0ce38:	01003074 	movhi	r4,193
  c0ce3c:	21098704 	addi	r4,r4,9756
  c0ce40:	0c0ce580 	call	c0ce58 <alt_dev_reg>
}
  c0ce44:	e037883a 	mov	sp,fp
  c0ce48:	dfc00117 	ldw	ra,4(sp)
  c0ce4c:	df000017 	ldw	fp,0(sp)
  c0ce50:	dec00204 	addi	sp,sp,8
  c0ce54:	f800283a 	ret

00c0ce58 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  c0ce58:	defffd04 	addi	sp,sp,-12
  c0ce5c:	dfc00215 	stw	ra,8(sp)
  c0ce60:	df000115 	stw	fp,4(sp)
  c0ce64:	df000104 	addi	fp,sp,4
  c0ce68:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  c0ce6c:	e13fff17 	ldw	r4,-4(fp)
  c0ce70:	01403074 	movhi	r5,193
  c0ce74:	2949b104 	addi	r5,r5,9924
  c0ce78:	0c0f9f40 	call	c0f9f4 <alt_dev_llist_insert>
}
  c0ce7c:	e037883a 	mov	sp,fp
  c0ce80:	dfc00117 	ldw	ra,4(sp)
  c0ce84:	df000017 	ldw	fp,0(sp)
  c0ce88:	dec00204 	addi	sp,sp,8
  c0ce8c:	f800283a 	ret

00c0ce90 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  c0ce90:	defffa04 	addi	sp,sp,-24
  c0ce94:	dfc00515 	stw	ra,20(sp)
  c0ce98:	df000415 	stw	fp,16(sp)
  c0ce9c:	df000404 	addi	fp,sp,16
  c0cea0:	e13ffd15 	stw	r4,-12(fp)
  c0cea4:	e17ffe15 	stw	r5,-8(fp)
  c0cea8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  c0ceac:	e0bffd17 	ldw	r2,-12(fp)
  c0ceb0:	10800017 	ldw	r2,0(r2)
  c0ceb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  c0ceb8:	e0bffc17 	ldw	r2,-16(fp)
  c0cebc:	11000a04 	addi	r4,r2,40
  c0cec0:	e0bffd17 	ldw	r2,-12(fp)
  c0cec4:	11c00217 	ldw	r7,8(r2)
  c0cec8:	e17ffe17 	ldw	r5,-8(fp)
  c0cecc:	e1bfff17 	ldw	r6,-4(fp)
  c0ced0:	0c0d4d80 	call	c0d4d8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  c0ced4:	e037883a 	mov	sp,fp
  c0ced8:	dfc00117 	ldw	ra,4(sp)
  c0cedc:	df000017 	ldw	fp,0(sp)
  c0cee0:	dec00204 	addi	sp,sp,8
  c0cee4:	f800283a 	ret

00c0cee8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  c0cee8:	defffa04 	addi	sp,sp,-24
  c0ceec:	dfc00515 	stw	ra,20(sp)
  c0cef0:	df000415 	stw	fp,16(sp)
  c0cef4:	df000404 	addi	fp,sp,16
  c0cef8:	e13ffd15 	stw	r4,-12(fp)
  c0cefc:	e17ffe15 	stw	r5,-8(fp)
  c0cf00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  c0cf04:	e0bffd17 	ldw	r2,-12(fp)
  c0cf08:	10800017 	ldw	r2,0(r2)
  c0cf0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  c0cf10:	e0bffc17 	ldw	r2,-16(fp)
  c0cf14:	11000a04 	addi	r4,r2,40
  c0cf18:	e0bffd17 	ldw	r2,-12(fp)
  c0cf1c:	11c00217 	ldw	r7,8(r2)
  c0cf20:	e17ffe17 	ldw	r5,-8(fp)
  c0cf24:	e1bfff17 	ldw	r6,-4(fp)
  c0cf28:	0c0d6fc0 	call	c0d6fc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  c0cf2c:	e037883a 	mov	sp,fp
  c0cf30:	dfc00117 	ldw	ra,4(sp)
  c0cf34:	df000017 	ldw	fp,0(sp)
  c0cf38:	dec00204 	addi	sp,sp,8
  c0cf3c:	f800283a 	ret

00c0cf40 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  c0cf40:	defffc04 	addi	sp,sp,-16
  c0cf44:	dfc00315 	stw	ra,12(sp)
  c0cf48:	df000215 	stw	fp,8(sp)
  c0cf4c:	df000204 	addi	fp,sp,8
  c0cf50:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  c0cf54:	e0bfff17 	ldw	r2,-4(fp)
  c0cf58:	10800017 	ldw	r2,0(r2)
  c0cf5c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  c0cf60:	e0bffe17 	ldw	r2,-8(fp)
  c0cf64:	11000a04 	addi	r4,r2,40
  c0cf68:	e0bfff17 	ldw	r2,-4(fp)
  c0cf6c:	11400217 	ldw	r5,8(r2)
  c0cf70:	0c0d3700 	call	c0d370 <altera_avalon_jtag_uart_close>
}
  c0cf74:	e037883a 	mov	sp,fp
  c0cf78:	dfc00117 	ldw	ra,4(sp)
  c0cf7c:	df000017 	ldw	fp,0(sp)
  c0cf80:	dec00204 	addi	sp,sp,8
  c0cf84:	f800283a 	ret

00c0cf88 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  c0cf88:	defffa04 	addi	sp,sp,-24
  c0cf8c:	dfc00515 	stw	ra,20(sp)
  c0cf90:	df000415 	stw	fp,16(sp)
  c0cf94:	df000404 	addi	fp,sp,16
  c0cf98:	e13ffd15 	stw	r4,-12(fp)
  c0cf9c:	e17ffe15 	stw	r5,-8(fp)
  c0cfa0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  c0cfa4:	e0bffd17 	ldw	r2,-12(fp)
  c0cfa8:	10800017 	ldw	r2,0(r2)
  c0cfac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  c0cfb0:	e0bffc17 	ldw	r2,-16(fp)
  c0cfb4:	11000a04 	addi	r4,r2,40
  c0cfb8:	e17ffe17 	ldw	r5,-8(fp)
  c0cfbc:	e1bfff17 	ldw	r6,-4(fp)
  c0cfc0:	0c0d3e40 	call	c0d3e4 <altera_avalon_jtag_uart_ioctl>
}
  c0cfc4:	e037883a 	mov	sp,fp
  c0cfc8:	dfc00117 	ldw	ra,4(sp)
  c0cfcc:	df000017 	ldw	fp,0(sp)
  c0cfd0:	dec00204 	addi	sp,sp,8
  c0cfd4:	f800283a 	ret

00c0cfd8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  c0cfd8:	defffa04 	addi	sp,sp,-24
  c0cfdc:	dfc00515 	stw	ra,20(sp)
  c0cfe0:	df000415 	stw	fp,16(sp)
  c0cfe4:	df000404 	addi	fp,sp,16
  c0cfe8:	e13ffd15 	stw	r4,-12(fp)
  c0cfec:	e17ffe15 	stw	r5,-8(fp)
  c0cff0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  c0cff4:	e0fffd17 	ldw	r3,-12(fp)
  c0cff8:	00800044 	movi	r2,1
  c0cffc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  c0d000:	e0bffd17 	ldw	r2,-12(fp)
  c0d004:	10800017 	ldw	r2,0(r2)
  c0d008:	11000104 	addi	r4,r2,4
  c0d00c:	e0bffd17 	ldw	r2,-12(fp)
  c0d010:	10800817 	ldw	r2,32(r2)
  c0d014:	1007883a 	mov	r3,r2
  c0d018:	2005883a 	mov	r2,r4
  c0d01c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  c0d020:	e13ffe17 	ldw	r4,-8(fp)
  c0d024:	e17fff17 	ldw	r5,-4(fp)
  c0d028:	d8000015 	stw	zero,0(sp)
  c0d02c:	01803074 	movhi	r6,193
  c0d030:	31b42604 	addi	r6,r6,-12136
  c0d034:	e1fffd17 	ldw	r7,-12(fp)
  c0d038:	0c0fc940 	call	c0fc94 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  c0d03c:	e0bffd17 	ldw	r2,-12(fp)
  c0d040:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  c0d044:	e0bffd17 	ldw	r2,-12(fp)
  c0d048:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  c0d04c:	00803074 	movhi	r2,193
  c0d050:	1090c204 	addi	r2,r2,17160
  c0d054:	10800017 	ldw	r2,0(r2)
  c0d058:	100b883a 	mov	r5,r2
  c0d05c:	01803074 	movhi	r6,193
  c0d060:	31b4b004 	addi	r6,r6,-11584
  c0d064:	e1fffd17 	ldw	r7,-12(fp)
  c0d068:	0c0f85c0 	call	c0f85c <alt_alarm_start>
  c0d06c:	1004403a 	cmpge	r2,r2,zero
  c0d070:	1000041e 	bne	r2,zero,c0d084 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  c0d074:	e0fffd17 	ldw	r3,-12(fp)
  c0d078:	00a00034 	movhi	r2,32768
  c0d07c:	10bfffc4 	addi	r2,r2,-1
  c0d080:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  c0d084:	e037883a 	mov	sp,fp
  c0d088:	dfc00117 	ldw	ra,4(sp)
  c0d08c:	df000017 	ldw	fp,0(sp)
  c0d090:	dec00204 	addi	sp,sp,8
  c0d094:	f800283a 	ret

00c0d098 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  c0d098:	defff804 	addi	sp,sp,-32
  c0d09c:	df000715 	stw	fp,28(sp)
  c0d0a0:	df000704 	addi	fp,sp,28
  c0d0a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  c0d0a8:	e0bfff17 	ldw	r2,-4(fp)
  c0d0ac:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  c0d0b0:	e0bffe17 	ldw	r2,-8(fp)
  c0d0b4:	10800017 	ldw	r2,0(r2)
  c0d0b8:	e0bffd15 	stw	r2,-12(fp)
  c0d0bc:	00000006 	br	c0d0c0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  c0d0c0:	e0bffd17 	ldw	r2,-12(fp)
  c0d0c4:	10800104 	addi	r2,r2,4
  c0d0c8:	10800037 	ldwio	r2,0(r2)
  c0d0cc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  c0d0d0:	e0bffc17 	ldw	r2,-16(fp)
  c0d0d4:	1080c00c 	andi	r2,r2,768
  c0d0d8:	1005003a 	cmpeq	r2,r2,zero
  c0d0dc:	1000741e 	bne	r2,zero,c0d2b0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  c0d0e0:	e0bffc17 	ldw	r2,-16(fp)
  c0d0e4:	1080400c 	andi	r2,r2,256
  c0d0e8:	1005003a 	cmpeq	r2,r2,zero
  c0d0ec:	1000351e 	bne	r2,zero,c0d1c4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  c0d0f0:	00800074 	movhi	r2,1
  c0d0f4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  c0d0f8:	e0bffe17 	ldw	r2,-8(fp)
  c0d0fc:	10800a17 	ldw	r2,40(r2)
  c0d100:	10800044 	addi	r2,r2,1
  c0d104:	1081ffcc 	andi	r2,r2,2047
  c0d108:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  c0d10c:	e0bffe17 	ldw	r2,-8(fp)
  c0d110:	10c00b17 	ldw	r3,44(r2)
  c0d114:	e0bffa17 	ldw	r2,-24(fp)
  c0d118:	18801626 	beq	r3,r2,c0d174 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  c0d11c:	e0bffd17 	ldw	r2,-12(fp)
  c0d120:	10800037 	ldwio	r2,0(r2)
  c0d124:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  c0d128:	e0bffb17 	ldw	r2,-20(fp)
  c0d12c:	10a0000c 	andi	r2,r2,32768
  c0d130:	1005003a 	cmpeq	r2,r2,zero
  c0d134:	10000f1e 	bne	r2,zero,c0d174 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  c0d138:	e0bffe17 	ldw	r2,-8(fp)
  c0d13c:	10c00a17 	ldw	r3,40(r2)
  c0d140:	e0bffb17 	ldw	r2,-20(fp)
  c0d144:	1009883a 	mov	r4,r2
  c0d148:	e0bffe17 	ldw	r2,-8(fp)
  c0d14c:	1885883a 	add	r2,r3,r2
  c0d150:	10800e04 	addi	r2,r2,56
  c0d154:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  c0d158:	e0bffe17 	ldw	r2,-8(fp)
  c0d15c:	10800a17 	ldw	r2,40(r2)
  c0d160:	10800044 	addi	r2,r2,1
  c0d164:	10c1ffcc 	andi	r3,r2,2047
  c0d168:	e0bffe17 	ldw	r2,-8(fp)
  c0d16c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  c0d170:	003fe106 	br	c0d0f8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  c0d174:	e0bffb17 	ldw	r2,-20(fp)
  c0d178:	10bfffec 	andhi	r2,r2,65535
  c0d17c:	1005003a 	cmpeq	r2,r2,zero
  c0d180:	1000101e 	bne	r2,zero,c0d1c4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  c0d184:	e0bffe17 	ldw	r2,-8(fp)
  c0d188:	10c00817 	ldw	r3,32(r2)
  c0d18c:	00bfff84 	movi	r2,-2
  c0d190:	1886703a 	and	r3,r3,r2
  c0d194:	e0bffe17 	ldw	r2,-8(fp)
  c0d198:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  c0d19c:	e0bffd17 	ldw	r2,-12(fp)
  c0d1a0:	11000104 	addi	r4,r2,4
  c0d1a4:	e0bffe17 	ldw	r2,-8(fp)
  c0d1a8:	10800817 	ldw	r2,32(r2)
  c0d1ac:	1007883a 	mov	r3,r2
  c0d1b0:	2005883a 	mov	r2,r4
  c0d1b4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  c0d1b8:	e0bffd17 	ldw	r2,-12(fp)
  c0d1bc:	10800104 	addi	r2,r2,4
  c0d1c0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  c0d1c4:	e0bffc17 	ldw	r2,-16(fp)
  c0d1c8:	1080800c 	andi	r2,r2,512
  c0d1cc:	1005003a 	cmpeq	r2,r2,zero
  c0d1d0:	103fbb1e 	bne	r2,zero,c0d0c0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  c0d1d4:	e0bffc17 	ldw	r2,-16(fp)
  c0d1d8:	10bfffec 	andhi	r2,r2,65535
  c0d1dc:	1004d43a 	srli	r2,r2,16
  c0d1e0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  c0d1e4:	00001506 	br	c0d23c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  c0d1e8:	e13ffd17 	ldw	r4,-12(fp)
  c0d1ec:	e0bffe17 	ldw	r2,-8(fp)
  c0d1f0:	10c00d17 	ldw	r3,52(r2)
  c0d1f4:	e0bffe17 	ldw	r2,-8(fp)
  c0d1f8:	1885883a 	add	r2,r3,r2
  c0d1fc:	10820e04 	addi	r2,r2,2104
  c0d200:	10800003 	ldbu	r2,0(r2)
  c0d204:	10c03fcc 	andi	r3,r2,255
  c0d208:	18c0201c 	xori	r3,r3,128
  c0d20c:	18ffe004 	addi	r3,r3,-128
  c0d210:	2005883a 	mov	r2,r4
  c0d214:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  c0d218:	e0bffe17 	ldw	r2,-8(fp)
  c0d21c:	10800d17 	ldw	r2,52(r2)
  c0d220:	10800044 	addi	r2,r2,1
  c0d224:	10c1ffcc 	andi	r3,r2,2047
  c0d228:	e0bffe17 	ldw	r2,-8(fp)
  c0d22c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  c0d230:	e0bff917 	ldw	r2,-28(fp)
  c0d234:	10bfffc4 	addi	r2,r2,-1
  c0d238:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  c0d23c:	e0bff917 	ldw	r2,-28(fp)
  c0d240:	1005003a 	cmpeq	r2,r2,zero
  c0d244:	1000051e 	bne	r2,zero,c0d25c <altera_avalon_jtag_uart_irq+0x1c4>
  c0d248:	e0bffe17 	ldw	r2,-8(fp)
  c0d24c:	10c00d17 	ldw	r3,52(r2)
  c0d250:	e0bffe17 	ldw	r2,-8(fp)
  c0d254:	10800c17 	ldw	r2,48(r2)
  c0d258:	18bfe31e 	bne	r3,r2,c0d1e8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  c0d25c:	e0bff917 	ldw	r2,-28(fp)
  c0d260:	1005003a 	cmpeq	r2,r2,zero
  c0d264:	103f961e 	bne	r2,zero,c0d0c0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  c0d268:	e0bffe17 	ldw	r2,-8(fp)
  c0d26c:	10c00817 	ldw	r3,32(r2)
  c0d270:	00bfff44 	movi	r2,-3
  c0d274:	1886703a 	and	r3,r3,r2
  c0d278:	e0bffe17 	ldw	r2,-8(fp)
  c0d27c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  c0d280:	e0bffe17 	ldw	r2,-8(fp)
  c0d284:	10800017 	ldw	r2,0(r2)
  c0d288:	11000104 	addi	r4,r2,4
  c0d28c:	e0bffe17 	ldw	r2,-8(fp)
  c0d290:	10800817 	ldw	r2,32(r2)
  c0d294:	1007883a 	mov	r3,r2
  c0d298:	2005883a 	mov	r2,r4
  c0d29c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  c0d2a0:	e0bffd17 	ldw	r2,-12(fp)
  c0d2a4:	10800104 	addi	r2,r2,4
  c0d2a8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  c0d2ac:	003f8406 	br	c0d0c0 <altera_avalon_jtag_uart_irq+0x28>
}
  c0d2b0:	e037883a 	mov	sp,fp
  c0d2b4:	df000017 	ldw	fp,0(sp)
  c0d2b8:	dec00104 	addi	sp,sp,4
  c0d2bc:	f800283a 	ret

00c0d2c0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  c0d2c0:	defffc04 	addi	sp,sp,-16
  c0d2c4:	df000315 	stw	fp,12(sp)
  c0d2c8:	df000304 	addi	fp,sp,12
  c0d2cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  c0d2d0:	e0bfff17 	ldw	r2,-4(fp)
  c0d2d4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  c0d2d8:	e0bffe17 	ldw	r2,-8(fp)
  c0d2dc:	10800017 	ldw	r2,0(r2)
  c0d2e0:	10800104 	addi	r2,r2,4
  c0d2e4:	10800037 	ldwio	r2,0(r2)
  c0d2e8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  c0d2ec:	e0bffd17 	ldw	r2,-12(fp)
  c0d2f0:	1081000c 	andi	r2,r2,1024
  c0d2f4:	1005003a 	cmpeq	r2,r2,zero
  c0d2f8:	10000c1e 	bne	r2,zero,c0d32c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  c0d2fc:	e0bffe17 	ldw	r2,-8(fp)
  c0d300:	10800017 	ldw	r2,0(r2)
  c0d304:	11000104 	addi	r4,r2,4
  c0d308:	e0bffe17 	ldw	r2,-8(fp)
  c0d30c:	10800817 	ldw	r2,32(r2)
  c0d310:	10810014 	ori	r2,r2,1024
  c0d314:	1007883a 	mov	r3,r2
  c0d318:	2005883a 	mov	r2,r4
  c0d31c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  c0d320:	e0bffe17 	ldw	r2,-8(fp)
  c0d324:	10000915 	stw	zero,36(r2)
  c0d328:	00000a06 	br	c0d354 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  c0d32c:	e0bffe17 	ldw	r2,-8(fp)
  c0d330:	10c00917 	ldw	r3,36(r2)
  c0d334:	00a00034 	movhi	r2,32768
  c0d338:	10bfff04 	addi	r2,r2,-4
  c0d33c:	10c00536 	bltu	r2,r3,c0d354 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  c0d340:	e0bffe17 	ldw	r2,-8(fp)
  c0d344:	10800917 	ldw	r2,36(r2)
  c0d348:	10c00044 	addi	r3,r2,1
  c0d34c:	e0bffe17 	ldw	r2,-8(fp)
  c0d350:	10c00915 	stw	r3,36(r2)
  c0d354:	00803074 	movhi	r2,193
  c0d358:	1090c204 	addi	r2,r2,17160
  c0d35c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  c0d360:	e037883a 	mov	sp,fp
  c0d364:	df000017 	ldw	fp,0(sp)
  c0d368:	dec00104 	addi	sp,sp,4
  c0d36c:	f800283a 	ret

00c0d370 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  c0d370:	defffc04 	addi	sp,sp,-16
  c0d374:	df000315 	stw	fp,12(sp)
  c0d378:	df000304 	addi	fp,sp,12
  c0d37c:	e13ffd15 	stw	r4,-12(fp)
  c0d380:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  c0d384:	00000706 	br	c0d3a4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  c0d388:	e0bffe17 	ldw	r2,-8(fp)
  c0d38c:	1090000c 	andi	r2,r2,16384
  c0d390:	1005003a 	cmpeq	r2,r2,zero
  c0d394:	1000031e 	bne	r2,zero,c0d3a4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  c0d398:	00bffd44 	movi	r2,-11
  c0d39c:	e0bfff15 	stw	r2,-4(fp)
  c0d3a0:	00000b06 	br	c0d3d0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  c0d3a4:	e0bffd17 	ldw	r2,-12(fp)
  c0d3a8:	10c00d17 	ldw	r3,52(r2)
  c0d3ac:	e0bffd17 	ldw	r2,-12(fp)
  c0d3b0:	10800c17 	ldw	r2,48(r2)
  c0d3b4:	18800526 	beq	r3,r2,c0d3cc <altera_avalon_jtag_uart_close+0x5c>
  c0d3b8:	e0bffd17 	ldw	r2,-12(fp)
  c0d3bc:	10c00917 	ldw	r3,36(r2)
  c0d3c0:	e0bffd17 	ldw	r2,-12(fp)
  c0d3c4:	10800117 	ldw	r2,4(r2)
  c0d3c8:	18bfef36 	bltu	r3,r2,c0d388 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  c0d3cc:	e03fff15 	stw	zero,-4(fp)
  c0d3d0:	e0bfff17 	ldw	r2,-4(fp)
}
  c0d3d4:	e037883a 	mov	sp,fp
  c0d3d8:	df000017 	ldw	fp,0(sp)
  c0d3dc:	dec00104 	addi	sp,sp,4
  c0d3e0:	f800283a 	ret

00c0d3e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  c0d3e4:	defff804 	addi	sp,sp,-32
  c0d3e8:	df000715 	stw	fp,28(sp)
  c0d3ec:	df000704 	addi	fp,sp,28
  c0d3f0:	e13ffb15 	stw	r4,-20(fp)
  c0d3f4:	e17ffc15 	stw	r5,-16(fp)
  c0d3f8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  c0d3fc:	00bff9c4 	movi	r2,-25
  c0d400:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  c0d404:	e0bffc17 	ldw	r2,-16(fp)
  c0d408:	e0bfff15 	stw	r2,-4(fp)
  c0d40c:	e0ffff17 	ldw	r3,-4(fp)
  c0d410:	189a8060 	cmpeqi	r2,r3,27137
  c0d414:	1000041e 	bne	r2,zero,c0d428 <altera_avalon_jtag_uart_ioctl+0x44>
  c0d418:	e0ffff17 	ldw	r3,-4(fp)
  c0d41c:	189a80a0 	cmpeqi	r2,r3,27138
  c0d420:	10001b1e 	bne	r2,zero,c0d490 <altera_avalon_jtag_uart_ioctl+0xac>
  c0d424:	00002706 	br	c0d4c4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  c0d428:	e0bffb17 	ldw	r2,-20(fp)
  c0d42c:	10c00117 	ldw	r3,4(r2)
  c0d430:	00a00034 	movhi	r2,32768
  c0d434:	10bfffc4 	addi	r2,r2,-1
  c0d438:	18802226 	beq	r3,r2,c0d4c4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  c0d43c:	e0bffd17 	ldw	r2,-12(fp)
  c0d440:	10800017 	ldw	r2,0(r2)
  c0d444:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  c0d448:	e0bff917 	ldw	r2,-28(fp)
  c0d44c:	10800090 	cmplti	r2,r2,2
  c0d450:	1000071e 	bne	r2,zero,c0d470 <altera_avalon_jtag_uart_ioctl+0x8c>
  c0d454:	e0fff917 	ldw	r3,-28(fp)
  c0d458:	00a00034 	movhi	r2,32768
  c0d45c:	10bfffc4 	addi	r2,r2,-1
  c0d460:	18800326 	beq	r3,r2,c0d470 <altera_avalon_jtag_uart_ioctl+0x8c>
  c0d464:	e0bff917 	ldw	r2,-28(fp)
  c0d468:	e0bffe15 	stw	r2,-8(fp)
  c0d46c:	00000306 	br	c0d47c <altera_avalon_jtag_uart_ioctl+0x98>
  c0d470:	00e00034 	movhi	r3,32768
  c0d474:	18ffff84 	addi	r3,r3,-2
  c0d478:	e0fffe15 	stw	r3,-8(fp)
  c0d47c:	e0bffb17 	ldw	r2,-20(fp)
  c0d480:	e0fffe17 	ldw	r3,-8(fp)
  c0d484:	10c00115 	stw	r3,4(r2)
      rc = 0;
  c0d488:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  c0d48c:	00000d06 	br	c0d4c4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  c0d490:	e0bffb17 	ldw	r2,-20(fp)
  c0d494:	10c00117 	ldw	r3,4(r2)
  c0d498:	00a00034 	movhi	r2,32768
  c0d49c:	10bfffc4 	addi	r2,r2,-1
  c0d4a0:	18800826 	beq	r3,r2,c0d4c4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  c0d4a4:	e13ffd17 	ldw	r4,-12(fp)
  c0d4a8:	e0bffb17 	ldw	r2,-20(fp)
  c0d4ac:	10c00917 	ldw	r3,36(r2)
  c0d4b0:	e0bffb17 	ldw	r2,-20(fp)
  c0d4b4:	10800117 	ldw	r2,4(r2)
  c0d4b8:	1885803a 	cmpltu	r2,r3,r2
  c0d4bc:	20800015 	stw	r2,0(r4)
      rc = 0;
  c0d4c0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  c0d4c4:	e0bffa17 	ldw	r2,-24(fp)
}
  c0d4c8:	e037883a 	mov	sp,fp
  c0d4cc:	df000017 	ldw	fp,0(sp)
  c0d4d0:	dec00104 	addi	sp,sp,4
  c0d4d4:	f800283a 	ret

00c0d4d8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  c0d4d8:	defff204 	addi	sp,sp,-56
  c0d4dc:	dfc00d15 	stw	ra,52(sp)
  c0d4e0:	df000c15 	stw	fp,48(sp)
  c0d4e4:	df000c04 	addi	fp,sp,48
  c0d4e8:	e13ffb15 	stw	r4,-20(fp)
  c0d4ec:	e17ffc15 	stw	r5,-16(fp)
  c0d4f0:	e1bffd15 	stw	r6,-12(fp)
  c0d4f4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  c0d4f8:	e0bffc17 	ldw	r2,-16(fp)
  c0d4fc:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  c0d500:	00004806 	br	c0d624 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  c0d504:	e0bffb17 	ldw	r2,-20(fp)
  c0d508:	10800a17 	ldw	r2,40(r2)
  c0d50c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  c0d510:	e0bffb17 	ldw	r2,-20(fp)
  c0d514:	10800b17 	ldw	r2,44(r2)
  c0d518:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  c0d51c:	e0fff717 	ldw	r3,-36(fp)
  c0d520:	e0bff617 	ldw	r2,-40(fp)
  c0d524:	18800536 	bltu	r3,r2,c0d53c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  c0d528:	e0bff717 	ldw	r2,-36(fp)
  c0d52c:	e0fff617 	ldw	r3,-40(fp)
  c0d530:	10c5c83a 	sub	r2,r2,r3
  c0d534:	e0bff815 	stw	r2,-32(fp)
  c0d538:	00000406 	br	c0d54c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  c0d53c:	00820004 	movi	r2,2048
  c0d540:	e0fff617 	ldw	r3,-40(fp)
  c0d544:	10c5c83a 	sub	r2,r2,r3
  c0d548:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  c0d54c:	e0bff817 	ldw	r2,-32(fp)
  c0d550:	1005003a 	cmpeq	r2,r2,zero
  c0d554:	10001f1e 	bne	r2,zero,c0d5d4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  c0d558:	e0fffd17 	ldw	r3,-12(fp)
  c0d55c:	e0bff817 	ldw	r2,-32(fp)
  c0d560:	1880022e 	bgeu	r3,r2,c0d56c <altera_avalon_jtag_uart_read+0x94>
        n = space;
  c0d564:	e0bffd17 	ldw	r2,-12(fp)
  c0d568:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  c0d56c:	e0bffb17 	ldw	r2,-20(fp)
  c0d570:	10c00e04 	addi	r3,r2,56
  c0d574:	e0bff617 	ldw	r2,-40(fp)
  c0d578:	1887883a 	add	r3,r3,r2
  c0d57c:	e0bffa17 	ldw	r2,-24(fp)
  c0d580:	1009883a 	mov	r4,r2
  c0d584:	180b883a 	mov	r5,r3
  c0d588:	e1bff817 	ldw	r6,-32(fp)
  c0d58c:	0c08b4c0 	call	c08b4c <memcpy>
      ptr   += n;
  c0d590:	e0fff817 	ldw	r3,-32(fp)
  c0d594:	e0bffa17 	ldw	r2,-24(fp)
  c0d598:	10c5883a 	add	r2,r2,r3
  c0d59c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  c0d5a0:	e0fffd17 	ldw	r3,-12(fp)
  c0d5a4:	e0bff817 	ldw	r2,-32(fp)
  c0d5a8:	1885c83a 	sub	r2,r3,r2
  c0d5ac:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  c0d5b0:	e0fff617 	ldw	r3,-40(fp)
  c0d5b4:	e0bff817 	ldw	r2,-32(fp)
  c0d5b8:	1885883a 	add	r2,r3,r2
  c0d5bc:	10c1ffcc 	andi	r3,r2,2047
  c0d5c0:	e0bffb17 	ldw	r2,-20(fp)
  c0d5c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  c0d5c8:	e0bffd17 	ldw	r2,-12(fp)
  c0d5cc:	10800048 	cmpgei	r2,r2,1
  c0d5d0:	103fcc1e 	bne	r2,zero,c0d504 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  c0d5d4:	e0fffa17 	ldw	r3,-24(fp)
  c0d5d8:	e0bffc17 	ldw	r2,-16(fp)
  c0d5dc:	1880141e 	bne	r3,r2,c0d630 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  c0d5e0:	e0bffe17 	ldw	r2,-8(fp)
  c0d5e4:	1090000c 	andi	r2,r2,16384
  c0d5e8:	1004c03a 	cmpne	r2,r2,zero
  c0d5ec:	1000101e 	bne	r2,zero,c0d630 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  c0d5f0:	e0bffb17 	ldw	r2,-20(fp)
  c0d5f4:	10c00a17 	ldw	r3,40(r2)
  c0d5f8:	e0bff717 	ldw	r2,-36(fp)
  c0d5fc:	1880051e 	bne	r3,r2,c0d614 <altera_avalon_jtag_uart_read+0x13c>
  c0d600:	e0bffb17 	ldw	r2,-20(fp)
  c0d604:	10c00917 	ldw	r3,36(r2)
  c0d608:	e0bffb17 	ldw	r2,-20(fp)
  c0d60c:	10800117 	ldw	r2,4(r2)
  c0d610:	18bff736 	bltu	r3,r2,c0d5f0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  c0d614:	e0bffb17 	ldw	r2,-20(fp)
  c0d618:	10c00a17 	ldw	r3,40(r2)
  c0d61c:	e0bff717 	ldw	r2,-36(fp)
  c0d620:	18800326 	beq	r3,r2,c0d630 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  c0d624:	e0bffd17 	ldw	r2,-12(fp)
  c0d628:	10800048 	cmpgei	r2,r2,1
  c0d62c:	103fb51e 	bne	r2,zero,c0d504 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  c0d630:	e0fffa17 	ldw	r3,-24(fp)
  c0d634:	e0bffc17 	ldw	r2,-16(fp)
  c0d638:	18801926 	beq	r3,r2,c0d6a0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  c0d63c:	0005303a 	rdctl	r2,status
  c0d640:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  c0d644:	e0fff517 	ldw	r3,-44(fp)
  c0d648:	00bfff84 	movi	r2,-2
  c0d64c:	1884703a 	and	r2,r3,r2
  c0d650:	1001703a 	wrctl	status,r2
  
  return context;
  c0d654:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  c0d658:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  c0d65c:	e0bffb17 	ldw	r2,-20(fp)
  c0d660:	10800817 	ldw	r2,32(r2)
  c0d664:	10c00054 	ori	r3,r2,1
  c0d668:	e0bffb17 	ldw	r2,-20(fp)
  c0d66c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  c0d670:	e0bffb17 	ldw	r2,-20(fp)
  c0d674:	10800017 	ldw	r2,0(r2)
  c0d678:	11000104 	addi	r4,r2,4
  c0d67c:	e0bffb17 	ldw	r2,-20(fp)
  c0d680:	10800817 	ldw	r2,32(r2)
  c0d684:	1007883a 	mov	r3,r2
  c0d688:	2005883a 	mov	r2,r4
  c0d68c:	10c00035 	stwio	r3,0(r2)
  c0d690:	e0bff917 	ldw	r2,-28(fp)
  c0d694:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  c0d698:	e0bff417 	ldw	r2,-48(fp)
  c0d69c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  c0d6a0:	e0fffa17 	ldw	r3,-24(fp)
  c0d6a4:	e0bffc17 	ldw	r2,-16(fp)
  c0d6a8:	18800526 	beq	r3,r2,c0d6c0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  c0d6ac:	e0fffa17 	ldw	r3,-24(fp)
  c0d6b0:	e0bffc17 	ldw	r2,-16(fp)
  c0d6b4:	1887c83a 	sub	r3,r3,r2
  c0d6b8:	e0ffff15 	stw	r3,-4(fp)
  c0d6bc:	00000906 	br	c0d6e4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  c0d6c0:	e0bffe17 	ldw	r2,-8(fp)
  c0d6c4:	1090000c 	andi	r2,r2,16384
  c0d6c8:	1005003a 	cmpeq	r2,r2,zero
  c0d6cc:	1000031e 	bne	r2,zero,c0d6dc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  c0d6d0:	00bffd44 	movi	r2,-11
  c0d6d4:	e0bfff15 	stw	r2,-4(fp)
  c0d6d8:	00000206 	br	c0d6e4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  c0d6dc:	00bffec4 	movi	r2,-5
  c0d6e0:	e0bfff15 	stw	r2,-4(fp)
  c0d6e4:	e0bfff17 	ldw	r2,-4(fp)
}
  c0d6e8:	e037883a 	mov	sp,fp
  c0d6ec:	dfc00117 	ldw	ra,4(sp)
  c0d6f0:	df000017 	ldw	fp,0(sp)
  c0d6f4:	dec00204 	addi	sp,sp,8
  c0d6f8:	f800283a 	ret

00c0d6fc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  c0d6fc:	defff204 	addi	sp,sp,-56
  c0d700:	dfc00d15 	stw	ra,52(sp)
  c0d704:	df000c15 	stw	fp,48(sp)
  c0d708:	df000c04 	addi	fp,sp,48
  c0d70c:	e13ffb15 	stw	r4,-20(fp)
  c0d710:	e17ffc15 	stw	r5,-16(fp)
  c0d714:	e1bffd15 	stw	r6,-12(fp)
  c0d718:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  c0d71c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  c0d720:	e0bffc17 	ldw	r2,-16(fp)
  c0d724:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  c0d728:	00003a06 	br	c0d814 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  c0d72c:	e0bffb17 	ldw	r2,-20(fp)
  c0d730:	10800c17 	ldw	r2,48(r2)
  c0d734:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  c0d738:	e0bffb17 	ldw	r2,-20(fp)
  c0d73c:	10800d17 	ldw	r2,52(r2)
  c0d740:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  c0d744:	e0fffa17 	ldw	r3,-24(fp)
  c0d748:	e0bff917 	ldw	r2,-28(fp)
  c0d74c:	1880062e 	bgeu	r3,r2,c0d768 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  c0d750:	e0fff917 	ldw	r3,-28(fp)
  c0d754:	e0bffa17 	ldw	r2,-24(fp)
  c0d758:	1885c83a 	sub	r2,r3,r2
  c0d75c:	10bfffc4 	addi	r2,r2,-1
  c0d760:	e0bff815 	stw	r2,-32(fp)
  c0d764:	00000c06 	br	c0d798 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  c0d768:	e0bff917 	ldw	r2,-28(fp)
  c0d76c:	1005003a 	cmpeq	r2,r2,zero
  c0d770:	1000051e 	bne	r2,zero,c0d788 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  c0d774:	00820004 	movi	r2,2048
  c0d778:	e0fffa17 	ldw	r3,-24(fp)
  c0d77c:	10c5c83a 	sub	r2,r2,r3
  c0d780:	e0bff815 	stw	r2,-32(fp)
  c0d784:	00000406 	br	c0d798 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  c0d788:	0081ffc4 	movi	r2,2047
  c0d78c:	e0fffa17 	ldw	r3,-24(fp)
  c0d790:	10c5c83a 	sub	r2,r2,r3
  c0d794:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  c0d798:	e0bff817 	ldw	r2,-32(fp)
  c0d79c:	1005003a 	cmpeq	r2,r2,zero
  c0d7a0:	10001f1e 	bne	r2,zero,c0d820 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  c0d7a4:	e0fffd17 	ldw	r3,-12(fp)
  c0d7a8:	e0bff817 	ldw	r2,-32(fp)
  c0d7ac:	1880022e 	bgeu	r3,r2,c0d7b8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  c0d7b0:	e0bffd17 	ldw	r2,-12(fp)
  c0d7b4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  c0d7b8:	e0bffb17 	ldw	r2,-20(fp)
  c0d7bc:	10c20e04 	addi	r3,r2,2104
  c0d7c0:	e0bffa17 	ldw	r2,-24(fp)
  c0d7c4:	1885883a 	add	r2,r3,r2
  c0d7c8:	e0fffc17 	ldw	r3,-16(fp)
  c0d7cc:	1009883a 	mov	r4,r2
  c0d7d0:	180b883a 	mov	r5,r3
  c0d7d4:	e1bff817 	ldw	r6,-32(fp)
  c0d7d8:	0c08b4c0 	call	c08b4c <memcpy>
      ptr   += n;
  c0d7dc:	e0fff817 	ldw	r3,-32(fp)
  c0d7e0:	e0bffc17 	ldw	r2,-16(fp)
  c0d7e4:	10c5883a 	add	r2,r2,r3
  c0d7e8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  c0d7ec:	e0fffd17 	ldw	r3,-12(fp)
  c0d7f0:	e0bff817 	ldw	r2,-32(fp)
  c0d7f4:	1885c83a 	sub	r2,r3,r2
  c0d7f8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  c0d7fc:	e0fffa17 	ldw	r3,-24(fp)
  c0d800:	e0bff817 	ldw	r2,-32(fp)
  c0d804:	1885883a 	add	r2,r3,r2
  c0d808:	10c1ffcc 	andi	r3,r2,2047
  c0d80c:	e0bffb17 	ldw	r2,-20(fp)
  c0d810:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  c0d814:	e0bffd17 	ldw	r2,-12(fp)
  c0d818:	10800048 	cmpgei	r2,r2,1
  c0d81c:	103fc31e 	bne	r2,zero,c0d72c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  c0d820:	0005303a 	rdctl	r2,status
  c0d824:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  c0d828:	e0fff517 	ldw	r3,-44(fp)
  c0d82c:	00bfff84 	movi	r2,-2
  c0d830:	1884703a 	and	r2,r3,r2
  c0d834:	1001703a 	wrctl	status,r2
  
  return context;
  c0d838:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  c0d83c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  c0d840:	e0bffb17 	ldw	r2,-20(fp)
  c0d844:	10800817 	ldw	r2,32(r2)
  c0d848:	10c00094 	ori	r3,r2,2
  c0d84c:	e0bffb17 	ldw	r2,-20(fp)
  c0d850:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  c0d854:	e0bffb17 	ldw	r2,-20(fp)
  c0d858:	10800017 	ldw	r2,0(r2)
  c0d85c:	11000104 	addi	r4,r2,4
  c0d860:	e0bffb17 	ldw	r2,-20(fp)
  c0d864:	10800817 	ldw	r2,32(r2)
  c0d868:	1007883a 	mov	r3,r2
  c0d86c:	2005883a 	mov	r2,r4
  c0d870:	10c00035 	stwio	r3,0(r2)
  c0d874:	e0bff717 	ldw	r2,-36(fp)
  c0d878:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  c0d87c:	e0bff417 	ldw	r2,-48(fp)
  c0d880:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  c0d884:	e0bffd17 	ldw	r2,-12(fp)
  c0d888:	10800050 	cmplti	r2,r2,1
  c0d88c:	1000111e 	bne	r2,zero,c0d8d4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  c0d890:	e0bffe17 	ldw	r2,-8(fp)
  c0d894:	1090000c 	andi	r2,r2,16384
  c0d898:	1004c03a 	cmpne	r2,r2,zero
  c0d89c:	1000101e 	bne	r2,zero,c0d8e0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  c0d8a0:	e0bffb17 	ldw	r2,-20(fp)
  c0d8a4:	10c00d17 	ldw	r3,52(r2)
  c0d8a8:	e0bff917 	ldw	r2,-28(fp)
  c0d8ac:	1880051e 	bne	r3,r2,c0d8c4 <altera_avalon_jtag_uart_write+0x1c8>
  c0d8b0:	e0bffb17 	ldw	r2,-20(fp)
  c0d8b4:	10c00917 	ldw	r3,36(r2)
  c0d8b8:	e0bffb17 	ldw	r2,-20(fp)
  c0d8bc:	10800117 	ldw	r2,4(r2)
  c0d8c0:	18bff736 	bltu	r3,r2,c0d8a0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  c0d8c4:	e0bffb17 	ldw	r2,-20(fp)
  c0d8c8:	10c00d17 	ldw	r3,52(r2)
  c0d8cc:	e0bff917 	ldw	r2,-28(fp)
  c0d8d0:	18800326 	beq	r3,r2,c0d8e0 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  c0d8d4:	e0bffd17 	ldw	r2,-12(fp)
  c0d8d8:	10800048 	cmpgei	r2,r2,1
  c0d8dc:	103fcd1e 	bne	r2,zero,c0d814 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  c0d8e0:	e0fffc17 	ldw	r3,-16(fp)
  c0d8e4:	e0bff617 	ldw	r2,-40(fp)
  c0d8e8:	18800526 	beq	r3,r2,c0d900 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  c0d8ec:	e0fffc17 	ldw	r3,-16(fp)
  c0d8f0:	e0bff617 	ldw	r2,-40(fp)
  c0d8f4:	1887c83a 	sub	r3,r3,r2
  c0d8f8:	e0ffff15 	stw	r3,-4(fp)
  c0d8fc:	00000906 	br	c0d924 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  c0d900:	e0bffe17 	ldw	r2,-8(fp)
  c0d904:	1090000c 	andi	r2,r2,16384
  c0d908:	1005003a 	cmpeq	r2,r2,zero
  c0d90c:	1000031e 	bne	r2,zero,c0d91c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  c0d910:	00bffd44 	movi	r2,-11
  c0d914:	e0bfff15 	stw	r2,-4(fp)
  c0d918:	00000206 	br	c0d924 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  c0d91c:	00bffec4 	movi	r2,-5
  c0d920:	e0bfff15 	stw	r2,-4(fp)
  c0d924:	e0bfff17 	ldw	r2,-4(fp)
}
  c0d928:	e037883a 	mov	sp,fp
  c0d92c:	dfc00117 	ldw	ra,4(sp)
  c0d930:	df000017 	ldw	fp,0(sp)
  c0d934:	dec00204 	addi	sp,sp,8
  c0d938:	f800283a 	ret

00c0d93c <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
  c0d93c:	defffa04 	addi	sp,sp,-24
  c0d940:	dfc00515 	stw	ra,20(sp)
  c0d944:	df000415 	stw	fp,16(sp)
  c0d948:	df000404 	addi	fp,sp,16
  c0d94c:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
  c0d950:	e0bfff17 	ldw	r2,-4(fp)
  c0d954:	11000704 	addi	r4,r2,28
  c0d958:	0c0da940 	call	c0da94 <alt_avalon_mutex_reg>
  c0d95c:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
  c0d960:	e0bffe17 	ldw	r2,-8(fp)
  c0d964:	1004c03a 	cmpne	r2,r2,zero
  c0d968:	1000041e 	bne	r2,zero,c0d97c <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
  c0d96c:	e0bfff17 	ldw	r2,-4(fp)
  c0d970:	11000b04 	addi	r4,r2,44
  c0d974:	0c0da940 	call	c0da94 <alt_avalon_mutex_reg>
  c0d978:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  c0d97c:	e0bffe17 	ldw	r2,-8(fp)
  c0d980:	1004c03a 	cmpne	r2,r2,zero
  c0d984:	1000041e 	bne	r2,zero,c0d998 <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
  c0d988:	e13fff17 	ldw	r4,-4(fp)
  c0d98c:	d1601a04 	addi	r5,gp,-32664
  c0d990:	0c0f9f40 	call	c0f9f4 <alt_dev_llist_insert>
  c0d994:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  c0d998:	e0bffe17 	ldw	r2,-8(fp)
  c0d99c:	1004c03a 	cmpne	r2,r2,zero
  c0d9a0:	1000361e 	bne	r2,zero,c0da7c <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
  c0d9a4:	e0bfff17 	ldw	r2,-4(fp)
  c0d9a8:	11000917 	ldw	r4,36(r2)
  c0d9ac:	0c0dee00 	call	c0dee0 <altera_avalon_mutex_open>
  c0d9b0:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
  c0d9b4:	e0bffd17 	ldw	r2,-12(fp)
  c0d9b8:	1005003a 	cmpeq	r2,r2,zero
  c0d9bc:	10002f1e 	bne	r2,zero,c0da7c <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
  c0d9c0:	e0bfff17 	ldw	r2,-4(fp)
  c0d9c4:	11000d17 	ldw	r4,52(r2)
  c0d9c8:	0c0dee00 	call	c0dee0 <altera_avalon_mutex_open>
  c0d9cc:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
  c0d9d0:	e0bffc17 	ldw	r2,-16(fp)
  c0d9d4:	1005003a 	cmpeq	r2,r2,zero
  c0d9d8:	1000281e 	bne	r2,zero,c0da7c <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  c0d9dc:	00000f06 	br	c0da1c <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
  c0d9e0:	e13ffd17 	ldw	r4,-12(fp)
  c0d9e4:	01400044 	movi	r5,1
  c0d9e8:	0c0dff80 	call	c0dff8 <altera_avalon_mutex_trylock>
  c0d9ec:	1004c03a 	cmpne	r2,r2,zero
  c0d9f0:	10000a1e 	bne	r2,zero,c0da1c <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
  c0d9f4:	e0bfff17 	ldw	r2,-4(fp)
  c0d9f8:	10800317 	ldw	r2,12(r2)
  c0d9fc:	1009883a 	mov	r4,r2
  c0da00:	e0bfff17 	ldw	r2,-4(fp)
  c0da04:	10800517 	ldw	r2,20(r2)
  c0da08:	1007883a 	mov	r3,r2
  c0da0c:	2005883a 	mov	r2,r4
  c0da10:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
  c0da14:	e13ffd17 	ldw	r4,-12(fp)
  c0da18:	0c0e0380 	call	c0e038 <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  c0da1c:	e13ffd17 	ldw	r4,-12(fp)
  c0da20:	0c0e1100 	call	c0e110 <altera_avalon_mutex_first_lock>
  c0da24:	1004c03a 	cmpne	r2,r2,zero
  c0da28:	103fed1e 	bne	r2,zero,c0d9e0 <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  c0da2c:	00000f06 	br	c0da6c <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
  c0da30:	e13ffc17 	ldw	r4,-16(fp)
  c0da34:	01400044 	movi	r5,1
  c0da38:	0c0dff80 	call	c0dff8 <altera_avalon_mutex_trylock>
  c0da3c:	1004c03a 	cmpne	r2,r2,zero
  c0da40:	10000a1e 	bne	r2,zero,c0da6c <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
  c0da44:	e0bfff17 	ldw	r2,-4(fp)
  c0da48:	10800417 	ldw	r2,16(r2)
  c0da4c:	1009883a 	mov	r4,r2
  c0da50:	e0bfff17 	ldw	r2,-4(fp)
  c0da54:	10800517 	ldw	r2,20(r2)
  c0da58:	1007883a 	mov	r3,r2
  c0da5c:	2005883a 	mov	r2,r4
  c0da60:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
  c0da64:	e13ffc17 	ldw	r4,-16(fp)
  c0da68:	0c0e0380 	call	c0e038 <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  c0da6c:	e13ffc17 	ldw	r4,-16(fp)
  c0da70:	0c0e1100 	call	c0e110 <altera_avalon_mutex_first_lock>
  c0da74:	1004c03a 	cmpne	r2,r2,zero
  c0da78:	103fed1e 	bne	r2,zero,c0da30 <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
  c0da7c:	e0bffe17 	ldw	r2,-8(fp)
}
  c0da80:	e037883a 	mov	sp,fp
  c0da84:	dfc00117 	ldw	ra,4(sp)
  c0da88:	df000017 	ldw	fp,0(sp)
  c0da8c:	dec00204 	addi	sp,sp,8
  c0da90:	f800283a 	ret

00c0da94 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
  c0da94:	defffc04 	addi	sp,sp,-16
  c0da98:	dfc00315 	stw	ra,12(sp)
  c0da9c:	df000215 	stw	fp,8(sp)
  c0daa0:	df000204 	addi	fp,sp,8
  c0daa4:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  c0daa8:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  c0daac:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
  c0dab0:	e0bffe17 	ldw	r2,-8(fp)
  c0dab4:	1004c03a 	cmpne	r2,r2,zero
  c0dab8:	1000061e 	bne	r2,zero,c0dad4 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
  c0dabc:	e13fff17 	ldw	r4,-4(fp)
  c0dac0:	01403074 	movhi	r5,193
  c0dac4:	2949b804 	addi	r5,r5,9952
  c0dac8:	0c0f9f40 	call	c0f9f4 <alt_dev_llist_insert>
  c0dacc:	e0bffe15 	stw	r2,-8(fp)
  c0dad0:	00000506 	br	c0dae8 <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
  c0dad4:	0c0db000 	call	c0db00 <alt_get_errno>
  c0dad8:	00c00304 	movi	r3,12
  c0dadc:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
  c0dae0:	00bffd04 	movi	r2,-12
  c0dae4:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
  c0dae8:	e0bffe17 	ldw	r2,-8(fp)
}
  c0daec:	e037883a 	mov	sp,fp
  c0daf0:	dfc00117 	ldw	ra,4(sp)
  c0daf4:	df000017 	ldw	fp,0(sp)
  c0daf8:	dec00204 	addi	sp,sp,8
  c0dafc:	f800283a 	ret

00c0db00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  c0db00:	defffd04 	addi	sp,sp,-12
  c0db04:	dfc00215 	stw	ra,8(sp)
  c0db08:	df000115 	stw	fp,4(sp)
  c0db0c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  c0db10:	00803074 	movhi	r2,193
  c0db14:	1089b404 	addi	r2,r2,9936
  c0db18:	10800017 	ldw	r2,0(r2)
  c0db1c:	1005003a 	cmpeq	r2,r2,zero
  c0db20:	1000061e 	bne	r2,zero,c0db3c <alt_get_errno+0x3c>
  c0db24:	00803074 	movhi	r2,193
  c0db28:	1089b404 	addi	r2,r2,9936
  c0db2c:	10800017 	ldw	r2,0(r2)
  c0db30:	103ee83a 	callr	r2
  c0db34:	e0bfff15 	stw	r2,-4(fp)
  c0db38:	00000306 	br	c0db48 <alt_get_errno+0x48>
  c0db3c:	00803074 	movhi	r2,193
  c0db40:	1090bd04 	addi	r2,r2,17140
  c0db44:	e0bfff15 	stw	r2,-4(fp)
  c0db48:	e0bfff17 	ldw	r2,-4(fp)
}
  c0db4c:	e037883a 	mov	sp,fp
  c0db50:	dfc00117 	ldw	ra,4(sp)
  c0db54:	df000017 	ldw	fp,0(sp)
  c0db58:	dec00204 	addi	sp,sp,8
  c0db5c:	f800283a 	ret

00c0db60 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
  c0db60:	defffc04 	addi	sp,sp,-16
  c0db64:	dfc00315 	stw	ra,12(sp)
  c0db68:	df000215 	stw	fp,8(sp)
  c0db6c:	df000204 	addi	fp,sp,8
  c0db70:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
  c0db74:	e13fff17 	ldw	r4,-4(fp)
  c0db78:	d1601a04 	addi	r5,gp,-32664
  c0db7c:	0c0fbd00 	call	c0fbd0 <alt_find_dev>
  c0db80:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  c0db84:	e0bffe17 	ldw	r2,-8(fp)
  c0db88:	1004c03a 	cmpne	r2,r2,zero
  c0db8c:	1000041e 	bne	r2,zero,c0dba0 <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  c0db90:	0c0db000 	call	c0db00 <alt_get_errno>
  c0db94:	1007883a 	mov	r3,r2
  c0db98:	008004c4 	movi	r2,19
  c0db9c:	18800015 	stw	r2,0(r3)
  }

  return dev;
  c0dba0:	e0bffe17 	ldw	r2,-8(fp)

}
  c0dba4:	e037883a 	mov	sp,fp
  c0dba8:	dfc00117 	ldw	ra,4(sp)
  c0dbac:	df000017 	ldw	fp,0(sp)
  c0dbb0:	dec00204 	addi	sp,sp,8
  c0dbb4:	f800283a 	ret

00c0dbb8 <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
  c0dbb8:	defffe04 	addi	sp,sp,-8
  c0dbbc:	df000115 	stw	fp,4(sp)
  c0dbc0:	df000104 	addi	fp,sp,4
  c0dbc4:	e13fff15 	stw	r4,-4(fp)
  return;
}
  c0dbc8:	e037883a 	mov	sp,fp
  c0dbcc:	df000017 	ldw	fp,0(sp)
  c0dbd0:	dec00104 	addi	sp,sp,4
  c0dbd4:	f800283a 	ret

00c0dbd8 <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
  c0dbd8:	defff904 	addi	sp,sp,-28
  c0dbdc:	dfc00615 	stw	ra,24(sp)
  c0dbe0:	df000515 	stw	fp,20(sp)
  c0dbe4:	df000504 	addi	fp,sp,20
  c0dbe8:	e13ffe15 	stw	r4,-8(fp)
  c0dbec:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  c0dbf0:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
  c0dbf4:	e0bffe17 	ldw	r2,-8(fp)
  c0dbf8:	11000704 	addi	r4,r2,28
  c0dbfc:	01400044 	movi	r5,1
  c0dc00:	0c0dfb80 	call	c0dfb8 <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
  c0dc04:	e0bffe17 	ldw	r2,-8(fp)
  c0dc08:	10800317 	ldw	r2,12(r2)
  c0dc0c:	10800037 	ldwio	r2,0(r2)
  c0dc10:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
  c0dc14:	e13ffe17 	ldw	r4,-8(fp)
  c0dc18:	e17ffc17 	ldw	r5,-16(fp)
  c0dc1c:	0c0dc940 	call	c0dc94 <alt_mailbox_increment_ptr>
  c0dc20:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
  c0dc24:	e0bffe17 	ldw	r2,-8(fp)
  c0dc28:	10800417 	ldw	r2,16(r2)
  c0dc2c:	10800037 	ldwio	r2,0(r2)
  c0dc30:	1007883a 	mov	r3,r2
  c0dc34:	e0bffb17 	ldw	r2,-20(fp)
  c0dc38:	1880061e 	bne	r3,r2,c0dc54 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
  c0dc3c:	0c0db000 	call	c0db00 <alt_get_errno>
  c0dc40:	00c002c4 	movi	r3,11
  c0dc44:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
  c0dc48:	00bffd44 	movi	r2,-11
  c0dc4c:	e0bffd15 	stw	r2,-12(fp)
  c0dc50:	00000706 	br	c0dc70 <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
  c0dc54:	e0bffc17 	ldw	r2,-16(fp)
  c0dc58:	e0ffff17 	ldw	r3,-4(fp)
  c0dc5c:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
  c0dc60:	e0bffe17 	ldw	r2,-8(fp)
  c0dc64:	10800317 	ldw	r2,12(r2)
  c0dc68:	e0fffb17 	ldw	r3,-20(fp)
  c0dc6c:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
  c0dc70:	e0bffe17 	ldw	r2,-8(fp)
  c0dc74:	11000704 	addi	r4,r2,28
  c0dc78:	0c0e0380 	call	c0e038 <altera_avalon_mutex_unlock>

  return ret_code;
  c0dc7c:	e0bffd17 	ldw	r2,-12(fp)

}
  c0dc80:	e037883a 	mov	sp,fp
  c0dc84:	dfc00117 	ldw	ra,4(sp)
  c0dc88:	df000017 	ldw	fp,0(sp)
  c0dc8c:	dec00204 	addi	sp,sp,8
  c0dc90:	f800283a 	ret

00c0dc94 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
  c0dc94:	defffd04 	addi	sp,sp,-12
  c0dc98:	df000215 	stw	fp,8(sp)
  c0dc9c:	df000204 	addi	fp,sp,8
  c0dca0:	e13ffe15 	stw	r4,-8(fp)
  c0dca4:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
  c0dca8:	e0bfff17 	ldw	r2,-4(fp)
  c0dcac:	10800104 	addi	r2,r2,4
  c0dcb0:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
  c0dcb4:	e0bffe17 	ldw	r2,-8(fp)
  c0dcb8:	10c00617 	ldw	r3,24(r2)
  c0dcbc:	e0bfff17 	ldw	r2,-4(fp)
  c0dcc0:	1880032e 	bgeu	r3,r2,c0dcd0 <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
  c0dcc4:	e0bffe17 	ldw	r2,-8(fp)
  c0dcc8:	10800517 	ldw	r2,20(r2)
  c0dccc:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
  c0dcd0:	e0bfff17 	ldw	r2,-4(fp)
}
  c0dcd4:	e037883a 	mov	sp,fp
  c0dcd8:	df000017 	ldw	fp,0(sp)
  c0dcdc:	dec00104 	addi	sp,sp,4
  c0dce0:	f800283a 	ret

00c0dce4 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
  c0dce4:	defffa04 	addi	sp,sp,-24
  c0dce8:	dfc00515 	stw	ra,20(sp)
  c0dcec:	df000415 	stw	fp,16(sp)
  c0dcf0:	dc000315 	stw	r16,12(sp)
  c0dcf4:	df000304 	addi	fp,sp,12
  c0dcf8:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  c0dcfc:	e0bfff17 	ldw	r2,-4(fp)
  c0dd00:	11000b04 	addi	r4,r2,44
  c0dd04:	01400044 	movi	r5,1
  c0dd08:	0c0dfb80 	call	c0dfb8 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  c0dd0c:	e0bfff17 	ldw	r2,-4(fp)
  c0dd10:	10800417 	ldw	r2,16(r2)
  c0dd14:	10800037 	ldwio	r2,0(r2)
  c0dd18:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
  c0dd1c:	e0bfff17 	ldw	r2,-4(fp)
  c0dd20:	10800317 	ldw	r2,12(r2)
  c0dd24:	10800037 	ldwio	r2,0(r2)
  c0dd28:	1007883a 	mov	r3,r2
  c0dd2c:	e0bffd17 	ldw	r2,-12(fp)
  c0dd30:	18bffa26 	beq	r3,r2,c0dd1c <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
  c0dd34:	e0bffd17 	ldw	r2,-12(fp)
  c0dd38:	10800037 	ldwio	r2,0(r2)
  c0dd3c:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
  c0dd40:	e0bfff17 	ldw	r2,-4(fp)
  c0dd44:	10800417 	ldw	r2,16(r2)
  c0dd48:	1021883a 	mov	r16,r2
  c0dd4c:	e13fff17 	ldw	r4,-4(fp)
  c0dd50:	e17ffd17 	ldw	r5,-12(fp)
  c0dd54:	0c0dc940 	call	c0dc94 <alt_mailbox_increment_ptr>
  c0dd58:	1007883a 	mov	r3,r2
  c0dd5c:	8005883a 	mov	r2,r16
  c0dd60:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
  c0dd64:	e0bfff17 	ldw	r2,-4(fp)
  c0dd68:	11000b04 	addi	r4,r2,44
  c0dd6c:	0c0e0380 	call	c0e038 <altera_avalon_mutex_unlock>

  return msg;
  c0dd70:	e0bffe17 	ldw	r2,-8(fp)

}
  c0dd74:	e037883a 	mov	sp,fp
  c0dd78:	dfc00217 	ldw	ra,8(sp)
  c0dd7c:	df000117 	ldw	fp,4(sp)
  c0dd80:	dc000017 	ldw	r16,0(sp)
  c0dd84:	dec00304 	addi	sp,sp,12
  c0dd88:	f800283a 	ret

00c0dd8c <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
  c0dd8c:	defff904 	addi	sp,sp,-28
  c0dd90:	dfc00615 	stw	ra,24(sp)
  c0dd94:	df000515 	stw	fp,20(sp)
  c0dd98:	dc000415 	stw	r16,16(sp)
  c0dd9c:	df000404 	addi	fp,sp,16
  c0dda0:	e13ffe15 	stw	r4,-8(fp)
  c0dda4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
  c0dda8:	e0bfff17 	ldw	r2,-4(fp)
  c0ddac:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  c0ddb0:	e0bffe17 	ldw	r2,-8(fp)
  c0ddb4:	11000b04 	addi	r4,r2,44
  c0ddb8:	01400044 	movi	r5,1
  c0ddbc:	0c0dfb80 	call	c0dfb8 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  c0ddc0:	e0bffe17 	ldw	r2,-8(fp)
  c0ddc4:	10800417 	ldw	r2,16(r2)
  c0ddc8:	10800037 	ldwio	r2,0(r2)
  c0ddcc:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
  c0ddd0:	e0bffe17 	ldw	r2,-8(fp)
  c0ddd4:	10800317 	ldw	r2,12(r2)
  c0ddd8:	10800037 	ldwio	r2,0(r2)
  c0dddc:	1007883a 	mov	r3,r2
  c0dde0:	e0bffc17 	ldw	r2,-16(fp)
  c0dde4:	1880091e 	bne	r3,r2,c0de0c <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
  c0dde8:	e0ffff17 	ldw	r3,-4(fp)
  c0ddec:	00bffd44 	movi	r2,-11
  c0ddf0:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
  c0ddf4:	0c0db000 	call	c0db00 <alt_get_errno>
  c0ddf8:	1007883a 	mov	r3,r2
  c0ddfc:	008002c4 	movi	r2,11
  c0de00:	18800015 	stw	r2,0(r3)
    msg = 0;
  c0de04:	e03ffd15 	stw	zero,-12(fp)
  c0de08:	00000c06 	br	c0de3c <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
  c0de0c:	e0bffc17 	ldw	r2,-16(fp)
  c0de10:	10800037 	ldwio	r2,0(r2)
  c0de14:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
  c0de18:	e0bffe17 	ldw	r2,-8(fp)
  c0de1c:	10800417 	ldw	r2,16(r2)
  c0de20:	1021883a 	mov	r16,r2
  c0de24:	e13ffe17 	ldw	r4,-8(fp)
  c0de28:	e17ffc17 	ldw	r5,-16(fp)
  c0de2c:	0c0dc940 	call	c0dc94 <alt_mailbox_increment_ptr>
  c0de30:	1007883a 	mov	r3,r2
  c0de34:	8005883a 	mov	r2,r16
  c0de38:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
  c0de3c:	e0bffe17 	ldw	r2,-8(fp)
  c0de40:	11000b04 	addi	r4,r2,44
  c0de44:	0c0e0380 	call	c0e038 <altera_avalon_mutex_unlock>

  return msg;
  c0de48:	e0bffd17 	ldw	r2,-12(fp)

}
  c0de4c:	e037883a 	mov	sp,fp
  c0de50:	dfc00217 	ldw	ra,8(sp)
  c0de54:	df000117 	ldw	fp,4(sp)
  c0de58:	dc000017 	ldw	r16,0(sp)
  c0de5c:	dec00304 	addi	sp,sp,12
  c0de60:	f800283a 	ret

00c0de64 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  c0de64:	defff904 	addi	sp,sp,-28
  c0de68:	df000615 	stw	fp,24(sp)
  c0de6c:	df000604 	addi	fp,sp,24
  c0de70:	e13ffe15 	stw	r4,-8(fp)
  c0de74:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
  c0de78:	00bfffc4 	movi	r2,-1
  c0de7c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
  c0de80:	0005317a 	rdctl	r2,cpuid
  c0de84:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
  c0de88:	e0bffd17 	ldw	r2,-12(fp)
  c0de8c:	1006943a 	slli	r3,r2,16
  c0de90:	e0bfff17 	ldw	r2,-4(fp)
  c0de94:	1884b03a 	or	r2,r3,r2
  c0de98:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
  c0de9c:	e0bffe17 	ldw	r2,-8(fp)
  c0dea0:	10800317 	ldw	r2,12(r2)
  c0dea4:	e0fffc17 	ldw	r3,-16(fp)
  c0dea8:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  c0deac:	e0bffe17 	ldw	r2,-8(fp)
  c0deb0:	10800317 	ldw	r2,12(r2)
  c0deb4:	10800037 	ldwio	r2,0(r2)
  c0deb8:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
  c0debc:	e0fffb17 	ldw	r3,-20(fp)
  c0dec0:	e0bffc17 	ldw	r2,-16(fp)
  c0dec4:	1880011e 	bne	r3,r2,c0decc <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
  c0dec8:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
  c0decc:	e0bffa17 	ldw	r2,-24(fp)
}
  c0ded0:	e037883a 	mov	sp,fp
  c0ded4:	df000017 	ldw	fp,0(sp)
  c0ded8:	dec00104 	addi	sp,sp,4
  c0dedc:	f800283a 	ret

00c0dee0 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
  c0dee0:	defffc04 	addi	sp,sp,-16
  c0dee4:	dfc00315 	stw	ra,12(sp)
  c0dee8:	df000215 	stw	fp,8(sp)
  c0deec:	df000204 	addi	fp,sp,8
  c0def0:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
  c0def4:	e13fff17 	ldw	r4,-4(fp)
  c0def8:	d1601c04 	addi	r5,gp,-32656
  c0defc:	0c0fbd00 	call	c0fbd0 <alt_find_dev>
  c0df00:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  c0df04:	e0bffe17 	ldw	r2,-8(fp)
  c0df08:	1004c03a 	cmpne	r2,r2,zero
  c0df0c:	1000041e 	bne	r2,zero,c0df20 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  c0df10:	0c0df380 	call	c0df38 <alt_get_errno>
  c0df14:	1007883a 	mov	r3,r2
  c0df18:	008004c4 	movi	r2,19
  c0df1c:	18800015 	stw	r2,0(r3)
  }

  return dev;
  c0df20:	e0bffe17 	ldw	r2,-8(fp)
}
  c0df24:	e037883a 	mov	sp,fp
  c0df28:	dfc00117 	ldw	ra,4(sp)
  c0df2c:	df000017 	ldw	fp,0(sp)
  c0df30:	dec00204 	addi	sp,sp,8
  c0df34:	f800283a 	ret

00c0df38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  c0df38:	defffd04 	addi	sp,sp,-12
  c0df3c:	dfc00215 	stw	ra,8(sp)
  c0df40:	df000115 	stw	fp,4(sp)
  c0df44:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  c0df48:	00803074 	movhi	r2,193
  c0df4c:	1089b404 	addi	r2,r2,9936
  c0df50:	10800017 	ldw	r2,0(r2)
  c0df54:	1005003a 	cmpeq	r2,r2,zero
  c0df58:	1000061e 	bne	r2,zero,c0df74 <alt_get_errno+0x3c>
  c0df5c:	00803074 	movhi	r2,193
  c0df60:	1089b404 	addi	r2,r2,9936
  c0df64:	10800017 	ldw	r2,0(r2)
  c0df68:	103ee83a 	callr	r2
  c0df6c:	e0bfff15 	stw	r2,-4(fp)
  c0df70:	00000306 	br	c0df80 <alt_get_errno+0x48>
  c0df74:	00803074 	movhi	r2,193
  c0df78:	1090bd04 	addi	r2,r2,17140
  c0df7c:	e0bfff15 	stw	r2,-4(fp)
  c0df80:	e0bfff17 	ldw	r2,-4(fp)
}
  c0df84:	e037883a 	mov	sp,fp
  c0df88:	dfc00117 	ldw	ra,4(sp)
  c0df8c:	df000017 	ldw	fp,0(sp)
  c0df90:	dec00204 	addi	sp,sp,8
  c0df94:	f800283a 	ret

00c0df98 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
  c0df98:	defffe04 	addi	sp,sp,-8
  c0df9c:	df000115 	stw	fp,4(sp)
  c0dfa0:	df000104 	addi	fp,sp,4
  c0dfa4:	e13fff15 	stw	r4,-4(fp)
  return;
}
  c0dfa8:	e037883a 	mov	sp,fp
  c0dfac:	df000017 	ldw	fp,0(sp)
  c0dfb0:	dec00104 	addi	sp,sp,4
  c0dfb4:	f800283a 	ret

00c0dfb8 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
  c0dfb8:	defffc04 	addi	sp,sp,-16
  c0dfbc:	dfc00315 	stw	ra,12(sp)
  c0dfc0:	df000215 	stw	fp,8(sp)
  c0dfc4:	df000204 	addi	fp,sp,8
  c0dfc8:	e13ffe15 	stw	r4,-8(fp)
  c0dfcc:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
  c0dfd0:	e13ffe17 	ldw	r4,-8(fp)
  c0dfd4:	e17fff17 	ldw	r5,-4(fp)
  c0dfd8:	0c0de640 	call	c0de64 <alt_mutex_trylock>
  c0dfdc:	1004c03a 	cmpne	r2,r2,zero
  c0dfe0:	103ffb1e 	bne	r2,zero,c0dfd0 <altera_avalon_mutex_lock+0x18>
}
  c0dfe4:	e037883a 	mov	sp,fp
  c0dfe8:	dfc00117 	ldw	ra,4(sp)
  c0dfec:	df000017 	ldw	fp,0(sp)
  c0dff0:	dec00204 	addi	sp,sp,8
  c0dff4:	f800283a 	ret

00c0dff8 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  c0dff8:	defffb04 	addi	sp,sp,-20
  c0dffc:	dfc00415 	stw	ra,16(sp)
  c0e000:	df000315 	stw	fp,12(sp)
  c0e004:	df000304 	addi	fp,sp,12
  c0e008:	e13ffe15 	stw	r4,-8(fp)
  c0e00c:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
  c0e010:	e13ffe17 	ldw	r4,-8(fp)
  c0e014:	e17fff17 	ldw	r5,-4(fp)
  c0e018:	0c0de640 	call	c0de64 <alt_mutex_trylock>
  c0e01c:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
  c0e020:	e0bffd17 	ldw	r2,-12(fp)
}
  c0e024:	e037883a 	mov	sp,fp
  c0e028:	dfc00117 	ldw	ra,4(sp)
  c0e02c:	df000017 	ldw	fp,0(sp)
  c0e030:	dec00204 	addi	sp,sp,8
  c0e034:	f800283a 	ret

00c0e038 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  c0e038:	defffd04 	addi	sp,sp,-12
  c0e03c:	df000215 	stw	fp,8(sp)
  c0e040:	df000204 	addi	fp,sp,8
  c0e044:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
  c0e048:	0005317a 	rdctl	r2,cpuid
  c0e04c:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
  c0e050:	e0bfff17 	ldw	r2,-4(fp)
  c0e054:	10800317 	ldw	r2,12(r2)
  c0e058:	10800104 	addi	r2,r2,4
  c0e05c:	1007883a 	mov	r3,r2
  c0e060:	00800044 	movi	r2,1
  c0e064:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
  c0e068:	e0bfff17 	ldw	r2,-4(fp)
  c0e06c:	11000317 	ldw	r4,12(r2)
  c0e070:	e0bffe17 	ldw	r2,-8(fp)
  c0e074:	1004943a 	slli	r2,r2,16
  c0e078:	1007883a 	mov	r3,r2
  c0e07c:	2005883a 	mov	r2,r4
  c0e080:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
  c0e084:	e037883a 	mov	sp,fp
  c0e088:	df000017 	ldw	fp,0(sp)
  c0e08c:	dec00104 	addi	sp,sp,4
  c0e090:	f800283a 	ret

00c0e094 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  c0e094:	defff904 	addi	sp,sp,-28
  c0e098:	df000615 	stw	fp,24(sp)
  c0e09c:	df000604 	addi	fp,sp,24
  c0e0a0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
  c0e0a4:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
  c0e0a8:	0005317a 	rdctl	r2,cpuid
  c0e0ac:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  c0e0b0:	e0bfff17 	ldw	r2,-4(fp)
  c0e0b4:	10800317 	ldw	r2,12(r2)
  c0e0b8:	10800037 	ldwio	r2,0(r2)
  c0e0bc:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
  c0e0c0:	e0bffd17 	ldw	r2,-12(fp)
  c0e0c4:	10bfffec 	andhi	r2,r2,65535
  c0e0c8:	1004d43a 	srli	r2,r2,16
  c0e0cc:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
  c0e0d0:	e0fffc17 	ldw	r3,-16(fp)
  c0e0d4:	e0bffe17 	ldw	r2,-8(fp)
  c0e0d8:	1880081e 	bne	r3,r2,c0e0fc <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
  c0e0dc:	e0bffd17 	ldw	r2,-12(fp)
  c0e0e0:	10bfffcc 	andi	r2,r2,65535
  c0e0e4:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
  c0e0e8:	e0bffb17 	ldw	r2,-20(fp)
  c0e0ec:	1005003a 	cmpeq	r2,r2,zero
  c0e0f0:	1000021e 	bne	r2,zero,c0e0fc <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
  c0e0f4:	00800044 	movi	r2,1
  c0e0f8:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
  c0e0fc:	e0bffa17 	ldw	r2,-24(fp)
}
  c0e100:	e037883a 	mov	sp,fp
  c0e104:	df000017 	ldw	fp,0(sp)
  c0e108:	dec00104 	addi	sp,sp,4
  c0e10c:	f800283a 	ret

00c0e110 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  c0e110:	defffc04 	addi	sp,sp,-16
  c0e114:	df000315 	stw	fp,12(sp)
  c0e118:	df000304 	addi	fp,sp,12
  c0e11c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
  c0e120:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
  c0e124:	e0bfff17 	ldw	r2,-4(fp)
  c0e128:	10800317 	ldw	r2,12(r2)
  c0e12c:	10800104 	addi	r2,r2,4
  c0e130:	10800037 	ldwio	r2,0(r2)
  c0e134:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
  c0e138:	e0bffe17 	ldw	r2,-8(fp)
  c0e13c:	1080004c 	andi	r2,r2,1
  c0e140:	10803fcc 	andi	r2,r2,255
  c0e144:	1005003a 	cmpeq	r2,r2,zero
  c0e148:	1000021e 	bne	r2,zero,c0e154 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
  c0e14c:	00800044 	movi	r2,1
  c0e150:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
  c0e154:	e0bffd17 	ldw	r2,-12(fp)
}
  c0e158:	e037883a 	mov	sp,fp
  c0e15c:	df000017 	ldw	fp,0(sp)
  c0e160:	dec00104 	addi	sp,sp,4
  c0e164:	f800283a 	ret

00c0e168 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
  c0e168:	defff904 	addi	sp,sp,-28
  c0e16c:	df000615 	stw	fp,24(sp)
  c0e170:	df000604 	addi	fp,sp,24
  c0e174:	e13ffe15 	stw	r4,-8(fp)
  c0e178:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
  c0e17c:	e03ffa15 	stw	zero,-24(fp)
  c0e180:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
  c0e184:	e0bffe17 	ldw	r2,-8(fp)
  c0e188:	10000035 	stwio	zero,0(r2)
  lo = IORD(hw_base_address, ( which_section*4   ));
  c0e18c:	e0bfff17 	ldw	r2,-4(fp)
  c0e190:	1004913a 	slli	r2,r2,4
  c0e194:	1007883a 	mov	r3,r2
  c0e198:	e0bffe17 	ldw	r2,-8(fp)
  c0e19c:	1885883a 	add	r2,r3,r2
  c0e1a0:	10800037 	ldwio	r2,0(r2)
  c0e1a4:	e0bffd15 	stw	r2,-12(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
  c0e1a8:	e0bfff17 	ldw	r2,-4(fp)
  c0e1ac:	1004913a 	slli	r2,r2,4
  c0e1b0:	1007883a 	mov	r3,r2
  c0e1b4:	e0bffe17 	ldw	r2,-8(fp)
  c0e1b8:	1885883a 	add	r2,r3,r2
  c0e1bc:	10800104 	addi	r2,r2,4
  c0e1c0:	10800037 	ldwio	r2,0(r2)
  c0e1c4:	e0bffc15 	stw	r2,-16(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
  c0e1c8:	e0bffc17 	ldw	r2,-16(fp)
  c0e1cc:	0007883a 	mov	r3,zero
  c0e1d0:	100a983a 	sll	r5,r2,zero
  c0e1d4:	0009883a 	mov	r4,zero
  c0e1d8:	e0bffd17 	ldw	r2,-12(fp)
  c0e1dc:	0007883a 	mov	r3,zero
  c0e1e0:	208cb03a 	or	r6,r4,r2
  c0e1e4:	e1bffa15 	stw	r6,-24(fp)
  c0e1e8:	28c4b03a 	or	r2,r5,r3
  c0e1ec:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
  c0e1f0:	e17ffa17 	ldw	r5,-24(fp)
  c0e1f4:	e1bffb17 	ldw	r6,-20(fp)
  c0e1f8:	2807883a 	mov	r3,r5
  c0e1fc:	3009883a 	mov	r4,r6
}
  c0e200:	1805883a 	mov	r2,r3
  c0e204:	2007883a 	mov	r3,r4
  c0e208:	e037883a 	mov	sp,fp
  c0e20c:	df000017 	ldw	fp,0(sp)
  c0e210:	dec00104 	addi	sp,sp,4
  c0e214:	f800283a 	ret

00c0e218 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
  c0e218:	defffd04 	addi	sp,sp,-12
  c0e21c:	dfc00215 	stw	ra,8(sp)
  c0e220:	df000115 	stw	fp,4(sp)
  c0e224:	df000104 	addi	fp,sp,4
  c0e228:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
  c0e22c:	e13fff17 	ldw	r4,-4(fp)
  c0e230:	000b883a 	mov	r5,zero
  c0e234:	0c0e1680 	call	c0e168 <perf_get_section_time>
  c0e238:	1009883a 	mov	r4,r2
  c0e23c:	180b883a 	mov	r5,r3
  c0e240:	200d883a 	mov	r6,r4
  c0e244:	280f883a 	mov	r7,r5
  c0e248:	3007883a 	mov	r3,r6
  c0e24c:	3809883a 	mov	r4,r7
}
  c0e250:	1805883a 	mov	r2,r3
  c0e254:	2007883a 	mov	r3,r4
  c0e258:	e037883a 	mov	sp,fp
  c0e25c:	dfc00117 	ldw	ra,4(sp)
  c0e260:	df000017 	ldw	fp,0(sp)
  c0e264:	dec00204 	addi	sp,sp,8
  c0e268:	f800283a 	ret

00c0e26c <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
  c0e26c:	defffd04 	addi	sp,sp,-12
  c0e270:	df000215 	stw	fp,8(sp)
  c0e274:	df000204 	addi	fp,sp,8
  c0e278:	e13ffe15 	stw	r4,-8(fp)
  c0e27c:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
  c0e280:	e0bfff17 	ldw	r2,-4(fp)
  c0e284:	1004913a 	slli	r2,r2,4
  c0e288:	1007883a 	mov	r3,r2
  c0e28c:	e0bffe17 	ldw	r2,-8(fp)
  c0e290:	1885883a 	add	r2,r3,r2
  c0e294:	10800204 	addi	r2,r2,8
  c0e298:	10800037 	ldwio	r2,0(r2)
}
  c0e29c:	e037883a 	mov	sp,fp
  c0e2a0:	df000017 	ldw	fp,0(sp)
  c0e2a4:	dec00104 	addi	sp,sp,4
  c0e2a8:	f800283a 	ret

00c0e2ac <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
  c0e2ac:	deffff04 	addi	sp,sp,-4
  c0e2b0:	df000015 	stw	fp,0(sp)
  c0e2b4:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
  c0e2b8:	0005883a 	mov	r2,zero
#else
    return (void*)0;
#endif
}
  c0e2bc:	e037883a 	mov	sp,fp
  c0e2c0:	df000017 	ldw	fp,0(sp)
  c0e2c4:	dec00104 	addi	sp,sp,4
  c0e2c8:	f800283a 	ret

00c0e2cc <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
  c0e2cc:	deffff04 	addi	sp,sp,-4
  c0e2d0:	df000015 	stw	fp,0(sp)
  c0e2d4:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
  c0e2d8:	0080bef4 	movhi	r2,763
  c0e2dc:	10bc2004 	addi	r2,r2,-3968
}
  c0e2e0:	e037883a 	mov	sp,fp
  c0e2e4:	df000017 	ldw	fp,0(sp)
  c0e2e8:	dec00104 	addi	sp,sp,4
  c0e2ec:	f800283a 	ret

00c0e2f0 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  c0e2f0:	defffc04 	addi	sp,sp,-16
  c0e2f4:	dfc00315 	stw	ra,12(sp)
  c0e2f8:	df000215 	stw	fp,8(sp)
  c0e2fc:	df000204 	addi	fp,sp,8
  c0e300:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  c0e304:	e13fff17 	ldw	r4,-4(fp)
  c0e308:	01403074 	movhi	r5,193
  c0e30c:	2949b104 	addi	r5,r5,9924
  c0e310:	0c0fbd00 	call	c0fbd0 <alt_find_dev>
  c0e314:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  c0e318:	e0bffe17 	ldw	r2,-8(fp)
}
  c0e31c:	e037883a 	mov	sp,fp
  c0e320:	dfc00117 	ldw	ra,4(sp)
  c0e324:	df000017 	ldw	fp,0(sp)
  c0e328:	dec00204 	addi	sp,sp,8
  c0e32c:	f800283a 	ret

00c0e330 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  c0e330:	defff904 	addi	sp,sp,-28
  c0e334:	df000615 	stw	fp,24(sp)
  c0e338:	df000604 	addi	fp,sp,24
  c0e33c:	e13ffb15 	stw	r4,-20(fp)
  c0e340:	e17ffc15 	stw	r5,-16(fp)
  c0e344:	e1bffd15 	stw	r6,-12(fp)
  c0e348:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  c0e34c:	e0bffb17 	ldw	r2,-20(fp)
  c0e350:	10c00f17 	ldw	r3,60(r2)
  c0e354:	e0bffd17 	ldw	r2,-12(fp)
  c0e358:	10c0042e 	bgeu	r2,r3,c0e36c <alt_up_pixel_buffer_dma_draw+0x3c>
  c0e35c:	e0bffb17 	ldw	r2,-20(fp)
  c0e360:	10c01017 	ldw	r3,64(r2)
  c0e364:	e0bffe17 	ldw	r2,-8(fp)
  c0e368:	10c00336 	bltu	r2,r3,c0e378 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  c0e36c:	00bfffc4 	movi	r2,-1
  c0e370:	e0bfff15 	stw	r2,-4(fp)
  c0e374:	00005106 	br	c0e4bc <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  c0e378:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  c0e37c:	e0bffb17 	ldw	r2,-20(fp)
  c0e380:	10800d17 	ldw	r2,52(r2)
  c0e384:	1004c03a 	cmpne	r2,r2,zero
  c0e388:	1000151e 	bne	r2,zero,c0e3e0 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  c0e38c:	e0bffb17 	ldw	r2,-20(fp)
  c0e390:	10c01217 	ldw	r3,72(r2)
  c0e394:	e0bffd17 	ldw	r2,-12(fp)
  c0e398:	1886703a 	and	r3,r3,r2
  c0e39c:	e0bffb17 	ldw	r2,-20(fp)
  c0e3a0:	10801117 	ldw	r2,68(r2)
  c0e3a4:	1886983a 	sll	r3,r3,r2
  c0e3a8:	e0bffa17 	ldw	r2,-24(fp)
  c0e3ac:	10c4b03a 	or	r2,r2,r3
  c0e3b0:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  c0e3b4:	e0bffb17 	ldw	r2,-20(fp)
  c0e3b8:	10c01417 	ldw	r3,80(r2)
  c0e3bc:	e0bffe17 	ldw	r2,-8(fp)
  c0e3c0:	1886703a 	and	r3,r3,r2
  c0e3c4:	e0bffb17 	ldw	r2,-20(fp)
  c0e3c8:	10801317 	ldw	r2,76(r2)
  c0e3cc:	1886983a 	sll	r3,r3,r2
  c0e3d0:	e0bffa17 	ldw	r2,-24(fp)
  c0e3d4:	10c4b03a 	or	r2,r2,r3
  c0e3d8:	e0bffa15 	stw	r2,-24(fp)
  c0e3dc:	00001706 	br	c0e43c <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  c0e3e0:	e0bffb17 	ldw	r2,-20(fp)
  c0e3e4:	10c01217 	ldw	r3,72(r2)
  c0e3e8:	e0bffd17 	ldw	r2,-12(fp)
  c0e3ec:	1886703a 	and	r3,r3,r2
  c0e3f0:	e0bffb17 	ldw	r2,-20(fp)
  c0e3f4:	10801117 	ldw	r2,68(r2)
  c0e3f8:	1886983a 	sll	r3,r3,r2
  c0e3fc:	e0bffa17 	ldw	r2,-24(fp)
  c0e400:	10c5883a 	add	r2,r2,r3
  c0e404:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  c0e408:	e0bffb17 	ldw	r2,-20(fp)
  c0e40c:	10c01417 	ldw	r3,80(r2)
  c0e410:	e0bffe17 	ldw	r2,-8(fp)
  c0e414:	1886703a 	and	r3,r3,r2
  c0e418:	e0bffb17 	ldw	r2,-20(fp)
  c0e41c:	10800f17 	ldw	r2,60(r2)
  c0e420:	1887383a 	mul	r3,r3,r2
  c0e424:	e0bffb17 	ldw	r2,-20(fp)
  c0e428:	10801117 	ldw	r2,68(r2)
  c0e42c:	1886983a 	sll	r3,r3,r2
  c0e430:	e0bffa17 	ldw	r2,-24(fp)
  c0e434:	10c5883a 	add	r2,r2,r3
  c0e438:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  c0e43c:	e0bffb17 	ldw	r2,-20(fp)
  c0e440:	10800e17 	ldw	r2,56(r2)
  c0e444:	10800058 	cmpnei	r2,r2,1
  c0e448:	1000081e 	bne	r2,zero,c0e46c <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  c0e44c:	e0bffb17 	ldw	r2,-20(fp)
  c0e450:	10800c17 	ldw	r2,48(r2)
  c0e454:	1007883a 	mov	r3,r2
  c0e458:	e0bffa17 	ldw	r2,-24(fp)
  c0e45c:	1885883a 	add	r2,r3,r2
  c0e460:	e0fffc17 	ldw	r3,-16(fp)
  c0e464:	10c00025 	stbio	r3,0(r2)
  c0e468:	00001306 	br	c0e4b8 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  c0e46c:	e0bffb17 	ldw	r2,-20(fp)
  c0e470:	10800e17 	ldw	r2,56(r2)
  c0e474:	10800098 	cmpnei	r2,r2,2
  c0e478:	1000081e 	bne	r2,zero,c0e49c <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  c0e47c:	e0bffb17 	ldw	r2,-20(fp)
  c0e480:	10800c17 	ldw	r2,48(r2)
  c0e484:	1007883a 	mov	r3,r2
  c0e488:	e0bffa17 	ldw	r2,-24(fp)
  c0e48c:	1885883a 	add	r2,r3,r2
  c0e490:	e0fffc17 	ldw	r3,-16(fp)
  c0e494:	10c0002d 	sthio	r3,0(r2)
  c0e498:	00000706 	br	c0e4b8 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  c0e49c:	e0bffb17 	ldw	r2,-20(fp)
  c0e4a0:	10800c17 	ldw	r2,48(r2)
  c0e4a4:	1007883a 	mov	r3,r2
  c0e4a8:	e0bffa17 	ldw	r2,-24(fp)
  c0e4ac:	1885883a 	add	r2,r3,r2
  c0e4b0:	e0fffc17 	ldw	r3,-16(fp)
  c0e4b4:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  c0e4b8:	e03fff15 	stw	zero,-4(fp)
  c0e4bc:	e0bfff17 	ldw	r2,-4(fp)
}
  c0e4c0:	e037883a 	mov	sp,fp
  c0e4c4:	df000017 	ldw	fp,0(sp)
  c0e4c8:	dec00104 	addi	sp,sp,4
  c0e4cc:	f800283a 	ret

00c0e4d0 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  c0e4d0:	defffd04 	addi	sp,sp,-12
  c0e4d4:	df000215 	stw	fp,8(sp)
  c0e4d8:	df000204 	addi	fp,sp,8
  c0e4dc:	e13ffe15 	stw	r4,-8(fp)
  c0e4e0:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  c0e4e4:	e0bffe17 	ldw	r2,-8(fp)
  c0e4e8:	10800a17 	ldw	r2,40(r2)
  c0e4ec:	10800104 	addi	r2,r2,4
  c0e4f0:	e0ffff17 	ldw	r3,-4(fp)
  c0e4f4:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  c0e4f8:	e0bffe17 	ldw	r2,-8(fp)
  c0e4fc:	10800a17 	ldw	r2,40(r2)
  c0e500:	10800104 	addi	r2,r2,4
  c0e504:	10800037 	ldwio	r2,0(r2)
  c0e508:	1007883a 	mov	r3,r2
  c0e50c:	e0bffe17 	ldw	r2,-8(fp)
  c0e510:	10c00c15 	stw	r3,48(r2)
	return 0;
  c0e514:	0005883a 	mov	r2,zero
}
  c0e518:	e037883a 	mov	sp,fp
  c0e51c:	df000017 	ldw	fp,0(sp)
  c0e520:	dec00104 	addi	sp,sp,4
  c0e524:	f800283a 	ret

00c0e528 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  c0e528:	defffe04 	addi	sp,sp,-8
  c0e52c:	df000115 	stw	fp,4(sp)
  c0e530:	df000104 	addi	fp,sp,4
  c0e534:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  c0e538:	e0bfff17 	ldw	r2,-4(fp)
  c0e53c:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  c0e540:	e0bfff17 	ldw	r2,-4(fp)
  c0e544:	10800a17 	ldw	r2,40(r2)
  c0e548:	1007883a 	mov	r3,r2
  c0e54c:	00800044 	movi	r2,1
  c0e550:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  c0e554:	e0bfff17 	ldw	r2,-4(fp)
  c0e558:	10c00b17 	ldw	r3,44(r2)
  c0e55c:	e0bfff17 	ldw	r2,-4(fp)
  c0e560:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  c0e564:	e0bfff17 	ldw	r2,-4(fp)
  c0e568:	11000b15 	stw	r4,44(r2)
	return 0;
  c0e56c:	0005883a 	mov	r2,zero
}
  c0e570:	e037883a 	mov	sp,fp
  c0e574:	df000017 	ldw	fp,0(sp)
  c0e578:	dec00104 	addi	sp,sp,4
  c0e57c:	f800283a 	ret

00c0e580 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  c0e580:	defffe04 	addi	sp,sp,-8
  c0e584:	df000115 	stw	fp,4(sp)
  c0e588:	df000104 	addi	fp,sp,4
  c0e58c:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  c0e590:	e0bfff17 	ldw	r2,-4(fp)
  c0e594:	10800a17 	ldw	r2,40(r2)
  c0e598:	10800304 	addi	r2,r2,12
  c0e59c:	10800037 	ldwio	r2,0(r2)
  c0e5a0:	1080004c 	andi	r2,r2,1
}
  c0e5a4:	e037883a 	mov	sp,fp
  c0e5a8:	df000017 	ldw	fp,0(sp)
  c0e5ac:	dec00104 	addi	sp,sp,4
  c0e5b0:	f800283a 	ret

00c0e5b4 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  c0e5b4:	defff604 	addi	sp,sp,-40
  c0e5b8:	df000915 	stw	fp,36(sp)
  c0e5bc:	df000904 	addi	fp,sp,36
  c0e5c0:	e13ff715 	stw	r4,-36(fp)
  c0e5c4:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  c0e5c8:	e0bff817 	ldw	r2,-32(fp)
  c0e5cc:	10800058 	cmpnei	r2,r2,1
  c0e5d0:	1000041e 	bne	r2,zero,c0e5e4 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  c0e5d4:	e0bff717 	ldw	r2,-36(fp)
  c0e5d8:	10800c17 	ldw	r2,48(r2)
  c0e5dc:	e0bfff15 	stw	r2,-4(fp)
  c0e5e0:	00000306 	br	c0e5f0 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  c0e5e4:	e0bff717 	ldw	r2,-36(fp)
  c0e5e8:	10800b17 	ldw	r2,44(r2)
  c0e5ec:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  c0e5f0:	e0bff717 	ldw	r2,-36(fp)
  c0e5f4:	10800f17 	ldw	r2,60(r2)
  c0e5f8:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  c0e5fc:	e0bff717 	ldw	r2,-36(fp)
  c0e600:	10800e17 	ldw	r2,56(r2)
  c0e604:	10800098 	cmpnei	r2,r2,2
  c0e608:	1000051e 	bne	r2,zero,c0e620 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  c0e60c:	e0fffe17 	ldw	r3,-8(fp)
  c0e610:	e0fffe17 	ldw	r3,-8(fp)
  c0e614:	18c5883a 	add	r2,r3,r3
  c0e618:	e0bffe15 	stw	r2,-8(fp)
  c0e61c:	00000506 	br	c0e634 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  c0e620:	e13ffe17 	ldw	r4,-8(fp)
  c0e624:	e13ffe17 	ldw	r4,-8(fp)
  c0e628:	2105883a 	add	r2,r4,r4
  c0e62c:	1085883a 	add	r2,r2,r2
  c0e630:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  c0e634:	e0bff717 	ldw	r2,-36(fp)
  c0e638:	10801017 	ldw	r2,64(r2)
  c0e63c:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  c0e640:	e0bff717 	ldw	r2,-36(fp)
  c0e644:	10800d17 	ldw	r2,52(r2)
  c0e648:	1004c03a 	cmpne	r2,r2,zero
  c0e64c:	10001e1e 	bne	r2,zero,c0e6c8 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  c0e650:	e0bff717 	ldw	r2,-36(fp)
  c0e654:	10801317 	ldw	r2,76(r2)
  c0e658:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  c0e65c:	e03ffb15 	stw	zero,-20(fp)
  c0e660:	00001506 	br	c0e6b8 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  c0e664:	e03ffc15 	stw	zero,-16(fp)
  c0e668:	00000706 	br	c0e688 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  c0e66c:	e0ffff17 	ldw	r3,-4(fp)
  c0e670:	e0bffc17 	ldw	r2,-16(fp)
  c0e674:	1885883a 	add	r2,r3,r2
  c0e678:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  c0e67c:	e0bffc17 	ldw	r2,-16(fp)
  c0e680:	10800104 	addi	r2,r2,4
  c0e684:	e0bffc15 	stw	r2,-16(fp)
  c0e688:	e0fffc17 	ldw	r3,-16(fp)
  c0e68c:	e13ffe17 	ldw	r4,-8(fp)
  c0e690:	193ff636 	bltu	r3,r4,c0e66c <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  c0e694:	e0fffa17 	ldw	r3,-24(fp)
  c0e698:	00800044 	movi	r2,1
  c0e69c:	10c4983a 	sll	r2,r2,r3
  c0e6a0:	e0ffff17 	ldw	r3,-4(fp)
  c0e6a4:	1887883a 	add	r3,r3,r2
  c0e6a8:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  c0e6ac:	e13ffb17 	ldw	r4,-20(fp)
  c0e6b0:	21000044 	addi	r4,r4,1
  c0e6b4:	e13ffb15 	stw	r4,-20(fp)
  c0e6b8:	e0bffb17 	ldw	r2,-20(fp)
  c0e6bc:	e0fffd17 	ldw	r3,-12(fp)
  c0e6c0:	10ffe836 	bltu	r2,r3,c0e664 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  c0e6c4:	00001006 	br	c0e708 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  c0e6c8:	e13ffd17 	ldw	r4,-12(fp)
  c0e6cc:	e0bffe17 	ldw	r2,-8(fp)
  c0e6d0:	2089383a 	mul	r4,r4,r2
  c0e6d4:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  c0e6d8:	e03ff915 	stw	zero,-28(fp)
  c0e6dc:	00000706 	br	c0e6fc <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  c0e6e0:	e0ffff17 	ldw	r3,-4(fp)
  c0e6e4:	e0bff917 	ldw	r2,-28(fp)
  c0e6e8:	1885883a 	add	r2,r3,r2
  c0e6ec:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  c0e6f0:	e0fff917 	ldw	r3,-28(fp)
  c0e6f4:	18c00104 	addi	r3,r3,4
  c0e6f8:	e0fff915 	stw	r3,-28(fp)
  c0e6fc:	e0bff917 	ldw	r2,-28(fp)
  c0e700:	e13ffd17 	ldw	r4,-12(fp)
  c0e704:	113ff636 	bltu	r2,r4,c0e6e0 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  c0e708:	e037883a 	mov	sp,fp
  c0e70c:	df000017 	ldw	fp,0(sp)
  c0e710:	dec00104 	addi	sp,sp,4
  c0e714:	f800283a 	ret

00c0e718 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  c0e718:	deffed04 	addi	sp,sp,-76
  c0e71c:	df001215 	stw	fp,72(sp)
  c0e720:	df001204 	addi	fp,sp,72
  c0e724:	e13fee15 	stw	r4,-72(fp)
  c0e728:	e17fef15 	stw	r5,-68(fp)
  c0e72c:	e1bff015 	stw	r6,-64(fp)
  c0e730:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  c0e734:	e0bfee17 	ldw	r2,-72(fp)
  c0e738:	10800f17 	ldw	r2,60(r2)
  c0e73c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  c0e740:	e0bfee17 	ldw	r2,-72(fp)
  c0e744:	10801017 	ldw	r2,64(r2)
  c0e748:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  c0e74c:	e0bfef17 	ldw	r2,-68(fp)
  c0e750:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  c0e754:	e0fff117 	ldw	r3,-60(fp)
  c0e758:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  c0e75c:	e13ff017 	ldw	r4,-64(fp)
  c0e760:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  c0e764:	e0800117 	ldw	r2,4(fp)
  c0e768:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  c0e76c:	e0c00217 	ldw	r3,8(fp)
  c0e770:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  c0e774:	e13ffa17 	ldw	r4,-24(fp)
  c0e778:	e0bffb17 	ldw	r2,-20(fp)
  c0e77c:	2080062e 	bgeu	r4,r2,c0e798 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  c0e780:	e0fffb17 	ldw	r3,-20(fp)
  c0e784:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  c0e788:	e13ffa17 	ldw	r4,-24(fp)
  c0e78c:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  c0e790:	e0bffc17 	ldw	r2,-16(fp)
  c0e794:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  c0e798:	e0fff817 	ldw	r3,-32(fp)
  c0e79c:	e13ff917 	ldw	r4,-28(fp)
  c0e7a0:	1900062e 	bgeu	r3,r4,c0e7bc <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  c0e7a4:	e0bff917 	ldw	r2,-28(fp)
  c0e7a8:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  c0e7ac:	e0fff817 	ldw	r3,-32(fp)
  c0e7b0:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  c0e7b4:	e13ffc17 	ldw	r4,-16(fp)
  c0e7b8:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  c0e7bc:	e0bffb17 	ldw	r2,-20(fp)
  c0e7c0:	e0fffe17 	ldw	r3,-8(fp)
  c0e7c4:	10c10d2e 	bgeu	r2,r3,c0ebfc <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  c0e7c8:	e13ff917 	ldw	r4,-28(fp)
  c0e7cc:	e0bffd17 	ldw	r2,-12(fp)
  c0e7d0:	20800136 	bltu	r4,r2,c0e7d8 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  c0e7d4:	00010906 	br	c0ebfc <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  c0e7d8:	e0fffa17 	ldw	r3,-24(fp)
  c0e7dc:	e13ffe17 	ldw	r4,-8(fp)
  c0e7e0:	19000336 	bltu	r3,r4,c0e7f0 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  c0e7e4:	e0bffe17 	ldw	r2,-8(fp)
  c0e7e8:	10bfffc4 	addi	r2,r2,-1
  c0e7ec:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  c0e7f0:	e0fff817 	ldw	r3,-32(fp)
  c0e7f4:	e13ffd17 	ldw	r4,-12(fp)
  c0e7f8:	19000336 	bltu	r3,r4,c0e808 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  c0e7fc:	e0bffd17 	ldw	r2,-12(fp)
  c0e800:	10bfffc4 	addi	r2,r2,-1
  c0e804:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  c0e808:	e0800317 	ldw	r2,12(fp)
  c0e80c:	10800058 	cmpnei	r2,r2,1
  c0e810:	1000041e 	bne	r2,zero,c0e824 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  c0e814:	e0bfee17 	ldw	r2,-72(fp)
  c0e818:	10800c17 	ldw	r2,48(r2)
  c0e81c:	e0bfff15 	stw	r2,-4(fp)
  c0e820:	00000306 	br	c0e830 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  c0e824:	e0bfee17 	ldw	r2,-72(fp)
  c0e828:	10800b17 	ldw	r2,44(r2)
  c0e82c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  c0e830:	e0bfee17 	ldw	r2,-72(fp)
  c0e834:	10800d17 	ldw	r2,52(r2)
  c0e838:	1004c03a 	cmpne	r2,r2,zero
  c0e83c:	1000721e 	bne	r2,zero,c0ea08 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  c0e840:	e0bfee17 	ldw	r2,-72(fp)
  c0e844:	10801317 	ldw	r2,76(r2)
  c0e848:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  c0e84c:	e0bff417 	ldw	r2,-48(fp)
  c0e850:	e0fff917 	ldw	r3,-28(fp)
  c0e854:	1884983a 	sll	r2,r3,r2
  c0e858:	e13fff17 	ldw	r4,-4(fp)
  c0e85c:	2089883a 	add	r4,r4,r2
  c0e860:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  c0e864:	e0bfee17 	ldw	r2,-72(fp)
  c0e868:	10800e17 	ldw	r2,56(r2)
  c0e86c:	10800058 	cmpnei	r2,r2,1
  c0e870:	10001e1e 	bne	r2,zero,c0e8ec <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  c0e874:	e0bff917 	ldw	r2,-28(fp)
  c0e878:	e0bff515 	stw	r2,-44(fp)
  c0e87c:	00001706 	br	c0e8dc <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  c0e880:	e0fffb17 	ldw	r3,-20(fp)
  c0e884:	e0fff615 	stw	r3,-40(fp)
  c0e888:	00000806 	br	c0e8ac <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  c0e88c:	e0ffff17 	ldw	r3,-4(fp)
  c0e890:	e0bff617 	ldw	r2,-40(fp)
  c0e894:	1885883a 	add	r2,r3,r2
  c0e898:	e0fff717 	ldw	r3,-36(fp)
  c0e89c:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  c0e8a0:	e13ff617 	ldw	r4,-40(fp)
  c0e8a4:	21000044 	addi	r4,r4,1
  c0e8a8:	e13ff615 	stw	r4,-40(fp)
  c0e8ac:	e0bffa17 	ldw	r2,-24(fp)
  c0e8b0:	e0fff617 	ldw	r3,-40(fp)
  c0e8b4:	10fff52e 	bgeu	r2,r3,c0e88c <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  c0e8b8:	e0fff417 	ldw	r3,-48(fp)
  c0e8bc:	00800044 	movi	r2,1
  c0e8c0:	10c4983a 	sll	r2,r2,r3
  c0e8c4:	e13fff17 	ldw	r4,-4(fp)
  c0e8c8:	2089883a 	add	r4,r4,r2
  c0e8cc:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  c0e8d0:	e0bff517 	ldw	r2,-44(fp)
  c0e8d4:	10800044 	addi	r2,r2,1
  c0e8d8:	e0bff515 	stw	r2,-44(fp)
  c0e8dc:	e0fff817 	ldw	r3,-32(fp)
  c0e8e0:	e13ff517 	ldw	r4,-44(fp)
  c0e8e4:	193fe62e 	bgeu	r3,r4,c0e880 <alt_up_pixel_buffer_dma_draw_box+0x168>
  c0e8e8:	0000c406 	br	c0ebfc <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  c0e8ec:	e0bfee17 	ldw	r2,-72(fp)
  c0e8f0:	10800e17 	ldw	r2,56(r2)
  c0e8f4:	10800098 	cmpnei	r2,r2,2
  c0e8f8:	1000211e 	bne	r2,zero,c0e980 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  c0e8fc:	e0bff917 	ldw	r2,-28(fp)
  c0e900:	e0bff515 	stw	r2,-44(fp)
  c0e904:	00001a06 	br	c0e970 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  c0e908:	e0fffb17 	ldw	r3,-20(fp)
  c0e90c:	e0fff615 	stw	r3,-40(fp)
  c0e910:	00000b06 	br	c0e940 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  c0e914:	e13ff617 	ldw	r4,-40(fp)
  c0e918:	e13ff617 	ldw	r4,-40(fp)
  c0e91c:	2105883a 	add	r2,r4,r4
  c0e920:	1007883a 	mov	r3,r2
  c0e924:	e0bfff17 	ldw	r2,-4(fp)
  c0e928:	1885883a 	add	r2,r3,r2
  c0e92c:	e0fff717 	ldw	r3,-36(fp)
  c0e930:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  c0e934:	e0bff617 	ldw	r2,-40(fp)
  c0e938:	10800044 	addi	r2,r2,1
  c0e93c:	e0bff615 	stw	r2,-40(fp)
  c0e940:	e0fffa17 	ldw	r3,-24(fp)
  c0e944:	e13ff617 	ldw	r4,-40(fp)
  c0e948:	193ff22e 	bgeu	r3,r4,c0e914 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  c0e94c:	e0fff417 	ldw	r3,-48(fp)
  c0e950:	00800044 	movi	r2,1
  c0e954:	10c4983a 	sll	r2,r2,r3
  c0e958:	e0ffff17 	ldw	r3,-4(fp)
  c0e95c:	1887883a 	add	r3,r3,r2
  c0e960:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  c0e964:	e13ff517 	ldw	r4,-44(fp)
  c0e968:	21000044 	addi	r4,r4,1
  c0e96c:	e13ff515 	stw	r4,-44(fp)
  c0e970:	e0bff817 	ldw	r2,-32(fp)
  c0e974:	e0fff517 	ldw	r3,-44(fp)
  c0e978:	10ffe32e 	bgeu	r2,r3,c0e908 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  c0e97c:	00009f06 	br	c0ebfc <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  c0e980:	e13ff917 	ldw	r4,-28(fp)
  c0e984:	e13ff515 	stw	r4,-44(fp)
  c0e988:	00001b06 	br	c0e9f8 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  c0e98c:	e0bffb17 	ldw	r2,-20(fp)
  c0e990:	e0bff615 	stw	r2,-40(fp)
  c0e994:	00000c06 	br	c0e9c8 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  c0e998:	e0fff617 	ldw	r3,-40(fp)
  c0e99c:	e0fff617 	ldw	r3,-40(fp)
  c0e9a0:	18c5883a 	add	r2,r3,r3
  c0e9a4:	1085883a 	add	r2,r2,r2
  c0e9a8:	1007883a 	mov	r3,r2
  c0e9ac:	e0bfff17 	ldw	r2,-4(fp)
  c0e9b0:	1885883a 	add	r2,r3,r2
  c0e9b4:	e0fff717 	ldw	r3,-36(fp)
  c0e9b8:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  c0e9bc:	e13ff617 	ldw	r4,-40(fp)
  c0e9c0:	21000044 	addi	r4,r4,1
  c0e9c4:	e13ff615 	stw	r4,-40(fp)
  c0e9c8:	e0bffa17 	ldw	r2,-24(fp)
  c0e9cc:	e0fff617 	ldw	r3,-40(fp)
  c0e9d0:	10fff12e 	bgeu	r2,r3,c0e998 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  c0e9d4:	e0fff417 	ldw	r3,-48(fp)
  c0e9d8:	00800044 	movi	r2,1
  c0e9dc:	10c4983a 	sll	r2,r2,r3
  c0e9e0:	e13fff17 	ldw	r4,-4(fp)
  c0e9e4:	2089883a 	add	r4,r4,r2
  c0e9e8:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  c0e9ec:	e0bff517 	ldw	r2,-44(fp)
  c0e9f0:	10800044 	addi	r2,r2,1
  c0e9f4:	e0bff515 	stw	r2,-44(fp)
  c0e9f8:	e0fff817 	ldw	r3,-32(fp)
  c0e9fc:	e13ff517 	ldw	r4,-44(fp)
  c0ea00:	193fe22e 	bgeu	r3,r4,c0e98c <alt_up_pixel_buffer_dma_draw_box+0x274>
  c0ea04:	00007d06 	br	c0ebfc <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  c0ea08:	e0bfee17 	ldw	r2,-72(fp)
  c0ea0c:	10800e17 	ldw	r2,56(r2)
  c0ea10:	10800058 	cmpnei	r2,r2,1
  c0ea14:	1000221e 	bne	r2,zero,c0eaa0 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  c0ea18:	e0fff917 	ldw	r3,-28(fp)
  c0ea1c:	e13ffe17 	ldw	r4,-8(fp)
  c0ea20:	1905383a 	mul	r2,r3,r4
  c0ea24:	e0ffff17 	ldw	r3,-4(fp)
  c0ea28:	1887883a 	add	r3,r3,r2
  c0ea2c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  c0ea30:	e13ff917 	ldw	r4,-28(fp)
  c0ea34:	e13ff215 	stw	r4,-56(fp)
  c0ea38:	00001506 	br	c0ea90 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  c0ea3c:	e0bffb17 	ldw	r2,-20(fp)
  c0ea40:	e0bff315 	stw	r2,-52(fp)
  c0ea44:	00000806 	br	c0ea68 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  c0ea48:	e0ffff17 	ldw	r3,-4(fp)
  c0ea4c:	e0bff317 	ldw	r2,-52(fp)
  c0ea50:	1885883a 	add	r2,r3,r2
  c0ea54:	e0fff717 	ldw	r3,-36(fp)
  c0ea58:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  c0ea5c:	e0fff317 	ldw	r3,-52(fp)
  c0ea60:	18c00044 	addi	r3,r3,1
  c0ea64:	e0fff315 	stw	r3,-52(fp)
  c0ea68:	e13ffa17 	ldw	r4,-24(fp)
  c0ea6c:	e0bff317 	ldw	r2,-52(fp)
  c0ea70:	20bff52e 	bgeu	r4,r2,c0ea48 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  c0ea74:	e0ffff17 	ldw	r3,-4(fp)
  c0ea78:	e13ffe17 	ldw	r4,-8(fp)
  c0ea7c:	1907883a 	add	r3,r3,r4
  c0ea80:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  c0ea84:	e0bff217 	ldw	r2,-56(fp)
  c0ea88:	10800044 	addi	r2,r2,1
  c0ea8c:	e0bff215 	stw	r2,-56(fp)
  c0ea90:	e0fff817 	ldw	r3,-32(fp)
  c0ea94:	e13ff217 	ldw	r4,-56(fp)
  c0ea98:	193fe82e 	bgeu	r3,r4,c0ea3c <alt_up_pixel_buffer_dma_draw_box+0x324>
  c0ea9c:	00005706 	br	c0ebfc <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  c0eaa0:	e0bfee17 	ldw	r2,-72(fp)
  c0eaa4:	10800e17 	ldw	r2,56(r2)
  c0eaa8:	10800098 	cmpnei	r2,r2,2
  c0eaac:	1000291e 	bne	r2,zero,c0eb54 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  c0eab0:	e0fffe17 	ldw	r3,-8(fp)
  c0eab4:	e0fffe17 	ldw	r3,-8(fp)
  c0eab8:	18c5883a 	add	r2,r3,r3
  c0eabc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  c0eac0:	e13ff917 	ldw	r4,-28(fp)
  c0eac4:	e0fffe17 	ldw	r3,-8(fp)
  c0eac8:	20c5383a 	mul	r2,r4,r3
  c0eacc:	e13fff17 	ldw	r4,-4(fp)
  c0ead0:	2089883a 	add	r4,r4,r2
  c0ead4:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  c0ead8:	e0bff917 	ldw	r2,-28(fp)
  c0eadc:	e0bff215 	stw	r2,-56(fp)
  c0eae0:	00001806 	br	c0eb44 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  c0eae4:	e0fffb17 	ldw	r3,-20(fp)
  c0eae8:	e0fff315 	stw	r3,-52(fp)
  c0eaec:	00000b06 	br	c0eb1c <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  c0eaf0:	e13ff317 	ldw	r4,-52(fp)
  c0eaf4:	e13ff317 	ldw	r4,-52(fp)
  c0eaf8:	2105883a 	add	r2,r4,r4
  c0eafc:	1007883a 	mov	r3,r2
  c0eb00:	e0bfff17 	ldw	r2,-4(fp)
  c0eb04:	1885883a 	add	r2,r3,r2
  c0eb08:	e0fff717 	ldw	r3,-36(fp)
  c0eb0c:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  c0eb10:	e0bff317 	ldw	r2,-52(fp)
  c0eb14:	10800044 	addi	r2,r2,1
  c0eb18:	e0bff315 	stw	r2,-52(fp)
  c0eb1c:	e0fffa17 	ldw	r3,-24(fp)
  c0eb20:	e13ff317 	ldw	r4,-52(fp)
  c0eb24:	193ff22e 	bgeu	r3,r4,c0eaf0 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  c0eb28:	e0bfff17 	ldw	r2,-4(fp)
  c0eb2c:	e0fffe17 	ldw	r3,-8(fp)
  c0eb30:	10c5883a 	add	r2,r2,r3
  c0eb34:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  c0eb38:	e13ff217 	ldw	r4,-56(fp)
  c0eb3c:	21000044 	addi	r4,r4,1
  c0eb40:	e13ff215 	stw	r4,-56(fp)
  c0eb44:	e0bff817 	ldw	r2,-32(fp)
  c0eb48:	e0fff217 	ldw	r3,-56(fp)
  c0eb4c:	10ffe52e 	bgeu	r2,r3,c0eae4 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  c0eb50:	00002a06 	br	c0ebfc <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  c0eb54:	e13ffe17 	ldw	r4,-8(fp)
  c0eb58:	e13ffe17 	ldw	r4,-8(fp)
  c0eb5c:	2105883a 	add	r2,r4,r4
  c0eb60:	1085883a 	add	r2,r2,r2
  c0eb64:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  c0eb68:	e0fff917 	ldw	r3,-28(fp)
  c0eb6c:	e13ffe17 	ldw	r4,-8(fp)
  c0eb70:	1905383a 	mul	r2,r3,r4
  c0eb74:	e0ffff17 	ldw	r3,-4(fp)
  c0eb78:	1887883a 	add	r3,r3,r2
  c0eb7c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  c0eb80:	e13ff917 	ldw	r4,-28(fp)
  c0eb84:	e13ff215 	stw	r4,-56(fp)
  c0eb88:	00001906 	br	c0ebf0 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  c0eb8c:	e0bffb17 	ldw	r2,-20(fp)
  c0eb90:	e0bff315 	stw	r2,-52(fp)
  c0eb94:	00000c06 	br	c0ebc8 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  c0eb98:	e0fff317 	ldw	r3,-52(fp)
  c0eb9c:	e0fff317 	ldw	r3,-52(fp)
  c0eba0:	18c5883a 	add	r2,r3,r3
  c0eba4:	1085883a 	add	r2,r2,r2
  c0eba8:	1007883a 	mov	r3,r2
  c0ebac:	e0bfff17 	ldw	r2,-4(fp)
  c0ebb0:	1885883a 	add	r2,r3,r2
  c0ebb4:	e0fff717 	ldw	r3,-36(fp)
  c0ebb8:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  c0ebbc:	e13ff317 	ldw	r4,-52(fp)
  c0ebc0:	21000044 	addi	r4,r4,1
  c0ebc4:	e13ff315 	stw	r4,-52(fp)
  c0ebc8:	e0bffa17 	ldw	r2,-24(fp)
  c0ebcc:	e0fff317 	ldw	r3,-52(fp)
  c0ebd0:	10fff12e 	bgeu	r2,r3,c0eb98 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  c0ebd4:	e13fff17 	ldw	r4,-4(fp)
  c0ebd8:	e0bffe17 	ldw	r2,-8(fp)
  c0ebdc:	2089883a 	add	r4,r4,r2
  c0ebe0:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  c0ebe4:	e0fff217 	ldw	r3,-56(fp)
  c0ebe8:	18c00044 	addi	r3,r3,1
  c0ebec:	e0fff215 	stw	r3,-56(fp)
  c0ebf0:	e13ff817 	ldw	r4,-32(fp)
  c0ebf4:	e0bff217 	ldw	r2,-56(fp)
  c0ebf8:	20bfe42e 	bgeu	r4,r2,c0eb8c <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  c0ebfc:	e037883a 	mov	sp,fp
  c0ec00:	df000017 	ldw	fp,0(sp)
  c0ec04:	dec00104 	addi	sp,sp,4
  c0ec08:	f800283a 	ret

00c0ec0c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  c0ec0c:	defff204 	addi	sp,sp,-56
  c0ec10:	df000d15 	stw	fp,52(sp)
  c0ec14:	df000d04 	addi	fp,sp,52
  c0ec18:	e13ff315 	stw	r4,-52(fp)
  c0ec1c:	e17ff415 	stw	r5,-48(fp)
  c0ec20:	e1bff515 	stw	r6,-44(fp)
  c0ec24:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  c0ec28:	e0bff317 	ldw	r2,-52(fp)
  c0ec2c:	10800f17 	ldw	r2,60(r2)
  c0ec30:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  c0ec34:	e0bff317 	ldw	r2,-52(fp)
  c0ec38:	10801017 	ldw	r2,64(r2)
  c0ec3c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  c0ec40:	e0bff417 	ldw	r2,-48(fp)
  c0ec44:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  c0ec48:	e0fff517 	ldw	r3,-44(fp)
  c0ec4c:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  c0ec50:	e13ff617 	ldw	r4,-40(fp)
  c0ec54:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  c0ec58:	e0800117 	ldw	r2,4(fp)
  c0ec5c:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  c0ec60:	e0fffb17 	ldw	r3,-20(fp)
  c0ec64:	e13ffc17 	ldw	r4,-16(fp)
  c0ec68:	1900042e 	bgeu	r3,r4,c0ec7c <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  c0ec6c:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  c0ec70:	e0fffb17 	ldw	r3,-20(fp)
  c0ec74:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  c0ec78:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  c0ec7c:	e13ffc17 	ldw	r4,-16(fp)
  c0ec80:	e0bffe17 	ldw	r2,-8(fp)
  c0ec84:	2080b12e 	bgeu	r4,r2,c0ef4c <alt_up_pixel_buffer_dma_draw_hline+0x340>
  c0ec88:	e0fffa17 	ldw	r3,-24(fp)
  c0ec8c:	e13ffd17 	ldw	r4,-12(fp)
  c0ec90:	19000136 	bltu	r3,r4,c0ec98 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  c0ec94:	0000ad06 	br	c0ef4c <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  c0ec98:	e0bffb17 	ldw	r2,-20(fp)
  c0ec9c:	e0fffe17 	ldw	r3,-8(fp)
  c0eca0:	10c00336 	bltu	r2,r3,c0ecb0 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  c0eca4:	e13ffe17 	ldw	r4,-8(fp)
  c0eca8:	213fffc4 	addi	r4,r4,-1
  c0ecac:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  c0ecb0:	e0800217 	ldw	r2,8(fp)
  c0ecb4:	10800058 	cmpnei	r2,r2,1
  c0ecb8:	1000041e 	bne	r2,zero,c0eccc <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  c0ecbc:	e0bff317 	ldw	r2,-52(fp)
  c0ecc0:	10800c17 	ldw	r2,48(r2)
  c0ecc4:	e0bfff15 	stw	r2,-4(fp)
  c0ecc8:	00000306 	br	c0ecd8 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  c0eccc:	e0bff317 	ldw	r2,-52(fp)
  c0ecd0:	10800b17 	ldw	r2,44(r2)
  c0ecd4:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  c0ecd8:	e0bff317 	ldw	r2,-52(fp)
  c0ecdc:	10800d17 	ldw	r2,52(r2)
  c0ece0:	1004c03a 	cmpne	r2,r2,zero
  c0ece4:	1000431e 	bne	r2,zero,c0edf4 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  c0ece8:	e0bff317 	ldw	r2,-52(fp)
  c0ecec:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  c0ecf0:	e0fffa17 	ldw	r3,-24(fp)
  c0ecf4:	1884983a 	sll	r2,r3,r2
  c0ecf8:	e13fff17 	ldw	r4,-4(fp)
  c0ecfc:	2089883a 	add	r4,r4,r2
  c0ed00:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  c0ed04:	e0bff317 	ldw	r2,-52(fp)
  c0ed08:	10800e17 	ldw	r2,56(r2)
  c0ed0c:	10800058 	cmpnei	r2,r2,1
  c0ed10:	10000f1e 	bne	r2,zero,c0ed50 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  c0ed14:	e0bffc17 	ldw	r2,-16(fp)
  c0ed18:	e0bff815 	stw	r2,-32(fp)
  c0ed1c:	00000806 	br	c0ed40 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  c0ed20:	e0ffff17 	ldw	r3,-4(fp)
  c0ed24:	e0bff817 	ldw	r2,-32(fp)
  c0ed28:	1885883a 	add	r2,r3,r2
  c0ed2c:	e0fff917 	ldw	r3,-28(fp)
  c0ed30:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  c0ed34:	e0fff817 	ldw	r3,-32(fp)
  c0ed38:	18c00044 	addi	r3,r3,1
  c0ed3c:	e0fff815 	stw	r3,-32(fp)
  c0ed40:	e13ffb17 	ldw	r4,-20(fp)
  c0ed44:	e0bff817 	ldw	r2,-32(fp)
  c0ed48:	20bff52e 	bgeu	r4,r2,c0ed20 <alt_up_pixel_buffer_dma_draw_hline+0x114>
  c0ed4c:	00007f06 	br	c0ef4c <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  c0ed50:	e0bff317 	ldw	r2,-52(fp)
  c0ed54:	10800e17 	ldw	r2,56(r2)
  c0ed58:	10800098 	cmpnei	r2,r2,2
  c0ed5c:	1000121e 	bne	r2,zero,c0eda8 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  c0ed60:	e0fffc17 	ldw	r3,-16(fp)
  c0ed64:	e0fff815 	stw	r3,-32(fp)
  c0ed68:	00000b06 	br	c0ed98 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  c0ed6c:	e13ff817 	ldw	r4,-32(fp)
  c0ed70:	e13ff817 	ldw	r4,-32(fp)
  c0ed74:	2105883a 	add	r2,r4,r4
  c0ed78:	1007883a 	mov	r3,r2
  c0ed7c:	e0bfff17 	ldw	r2,-4(fp)
  c0ed80:	1885883a 	add	r2,r3,r2
  c0ed84:	e0fff917 	ldw	r3,-28(fp)
  c0ed88:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  c0ed8c:	e0bff817 	ldw	r2,-32(fp)
  c0ed90:	10800044 	addi	r2,r2,1
  c0ed94:	e0bff815 	stw	r2,-32(fp)
  c0ed98:	e0fffb17 	ldw	r3,-20(fp)
  c0ed9c:	e13ff817 	ldw	r4,-32(fp)
  c0eda0:	193ff22e 	bgeu	r3,r4,c0ed6c <alt_up_pixel_buffer_dma_draw_hline+0x160>
  c0eda4:	00006906 	br	c0ef4c <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  c0eda8:	e0bffc17 	ldw	r2,-16(fp)
  c0edac:	e0bff815 	stw	r2,-32(fp)
  c0edb0:	00000c06 	br	c0ede4 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  c0edb4:	e0fff817 	ldw	r3,-32(fp)
  c0edb8:	e0fff817 	ldw	r3,-32(fp)
  c0edbc:	18c5883a 	add	r2,r3,r3
  c0edc0:	1085883a 	add	r2,r2,r2
  c0edc4:	1007883a 	mov	r3,r2
  c0edc8:	e0bfff17 	ldw	r2,-4(fp)
  c0edcc:	1885883a 	add	r2,r3,r2
  c0edd0:	e0fff917 	ldw	r3,-28(fp)
  c0edd4:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  c0edd8:	e13ff817 	ldw	r4,-32(fp)
  c0eddc:	21000044 	addi	r4,r4,1
  c0ede0:	e13ff815 	stw	r4,-32(fp)
  c0ede4:	e0bffb17 	ldw	r2,-20(fp)
  c0ede8:	e0fff817 	ldw	r3,-32(fp)
  c0edec:	10fff12e 	bgeu	r2,r3,c0edb4 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  c0edf0:	00005606 	br	c0ef4c <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  c0edf4:	e0bff317 	ldw	r2,-52(fp)
  c0edf8:	10800e17 	ldw	r2,56(r2)
  c0edfc:	10800058 	cmpnei	r2,r2,1
  c0ee00:	1000151e 	bne	r2,zero,c0ee58 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  c0ee04:	e13ffa17 	ldw	r4,-24(fp)
  c0ee08:	e0fffe17 	ldw	r3,-8(fp)
  c0ee0c:	20c5383a 	mul	r2,r4,r3
  c0ee10:	e13fff17 	ldw	r4,-4(fp)
  c0ee14:	2089883a 	add	r4,r4,r2
  c0ee18:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  c0ee1c:	e0bffc17 	ldw	r2,-16(fp)
  c0ee20:	e0bff715 	stw	r2,-36(fp)
  c0ee24:	00000806 	br	c0ee48 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  c0ee28:	e0ffff17 	ldw	r3,-4(fp)
  c0ee2c:	e0bff717 	ldw	r2,-36(fp)
  c0ee30:	1885883a 	add	r2,r3,r2
  c0ee34:	e0fff917 	ldw	r3,-28(fp)
  c0ee38:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  c0ee3c:	e0fff717 	ldw	r3,-36(fp)
  c0ee40:	18c00044 	addi	r3,r3,1
  c0ee44:	e0fff715 	stw	r3,-36(fp)
  c0ee48:	e13ffb17 	ldw	r4,-20(fp)
  c0ee4c:	e0bff717 	ldw	r2,-36(fp)
  c0ee50:	20bff52e 	bgeu	r4,r2,c0ee28 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  c0ee54:	00003d06 	br	c0ef4c <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  c0ee58:	e0bff317 	ldw	r2,-52(fp)
  c0ee5c:	10800e17 	ldw	r2,56(r2)
  c0ee60:	10800098 	cmpnei	r2,r2,2
  c0ee64:	10001c1e 	bne	r2,zero,c0eed8 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  c0ee68:	e0fffe17 	ldw	r3,-8(fp)
  c0ee6c:	e0fffe17 	ldw	r3,-8(fp)
  c0ee70:	18c5883a 	add	r2,r3,r3
  c0ee74:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  c0ee78:	e13ffa17 	ldw	r4,-24(fp)
  c0ee7c:	e0fffe17 	ldw	r3,-8(fp)
  c0ee80:	20c5383a 	mul	r2,r4,r3
  c0ee84:	e13fff17 	ldw	r4,-4(fp)
  c0ee88:	2089883a 	add	r4,r4,r2
  c0ee8c:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  c0ee90:	e0bffc17 	ldw	r2,-16(fp)
  c0ee94:	e0bff715 	stw	r2,-36(fp)
  c0ee98:	00000b06 	br	c0eec8 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  c0ee9c:	e0fff717 	ldw	r3,-36(fp)
  c0eea0:	e0fff717 	ldw	r3,-36(fp)
  c0eea4:	18c5883a 	add	r2,r3,r3
  c0eea8:	1007883a 	mov	r3,r2
  c0eeac:	e0bfff17 	ldw	r2,-4(fp)
  c0eeb0:	1885883a 	add	r2,r3,r2
  c0eeb4:	e0fff917 	ldw	r3,-28(fp)
  c0eeb8:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  c0eebc:	e13ff717 	ldw	r4,-36(fp)
  c0eec0:	21000044 	addi	r4,r4,1
  c0eec4:	e13ff715 	stw	r4,-36(fp)
  c0eec8:	e0bffb17 	ldw	r2,-20(fp)
  c0eecc:	e0fff717 	ldw	r3,-36(fp)
  c0eed0:	10fff22e 	bgeu	r2,r3,c0ee9c <alt_up_pixel_buffer_dma_draw_hline+0x290>
  c0eed4:	00001d06 	br	c0ef4c <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  c0eed8:	e13ffe17 	ldw	r4,-8(fp)
  c0eedc:	e13ffe17 	ldw	r4,-8(fp)
  c0eee0:	2105883a 	add	r2,r4,r4
  c0eee4:	1085883a 	add	r2,r2,r2
  c0eee8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  c0eeec:	e0fffa17 	ldw	r3,-24(fp)
  c0eef0:	e13ffe17 	ldw	r4,-8(fp)
  c0eef4:	1905383a 	mul	r2,r3,r4
  c0eef8:	e0ffff17 	ldw	r3,-4(fp)
  c0eefc:	1887883a 	add	r3,r3,r2
  c0ef00:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  c0ef04:	e13ffc17 	ldw	r4,-16(fp)
  c0ef08:	e13ff715 	stw	r4,-36(fp)
  c0ef0c:	00000c06 	br	c0ef40 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  c0ef10:	e0fff717 	ldw	r3,-36(fp)
  c0ef14:	e0fff717 	ldw	r3,-36(fp)
  c0ef18:	18c5883a 	add	r2,r3,r3
  c0ef1c:	1085883a 	add	r2,r2,r2
  c0ef20:	1007883a 	mov	r3,r2
  c0ef24:	e0bfff17 	ldw	r2,-4(fp)
  c0ef28:	1885883a 	add	r2,r3,r2
  c0ef2c:	e0fff917 	ldw	r3,-28(fp)
  c0ef30:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  c0ef34:	e13ff717 	ldw	r4,-36(fp)
  c0ef38:	21000044 	addi	r4,r4,1
  c0ef3c:	e13ff715 	stw	r4,-36(fp)
  c0ef40:	e0bffb17 	ldw	r2,-20(fp)
  c0ef44:	e0fff717 	ldw	r3,-36(fp)
  c0ef48:	10fff12e 	bgeu	r2,r3,c0ef10 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  c0ef4c:	e037883a 	mov	sp,fp
  c0ef50:	df000017 	ldw	fp,0(sp)
  c0ef54:	dec00104 	addi	sp,sp,4
  c0ef58:	f800283a 	ret

00c0ef5c <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  c0ef5c:	defff104 	addi	sp,sp,-60
  c0ef60:	df000e15 	stw	fp,56(sp)
  c0ef64:	df000e04 	addi	fp,sp,56
  c0ef68:	e13ff215 	stw	r4,-56(fp)
  c0ef6c:	e17ff315 	stw	r5,-52(fp)
  c0ef70:	e1bff415 	stw	r6,-48(fp)
  c0ef74:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  c0ef78:	e0bff217 	ldw	r2,-56(fp)
  c0ef7c:	10800f17 	ldw	r2,60(r2)
  c0ef80:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  c0ef84:	e0bff217 	ldw	r2,-56(fp)
  c0ef88:	10801017 	ldw	r2,64(r2)
  c0ef8c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  c0ef90:	e0bff317 	ldw	r2,-52(fp)
  c0ef94:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  c0ef98:	e0fff417 	ldw	r3,-48(fp)
  c0ef9c:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  c0efa0:	e13ff517 	ldw	r4,-44(fp)
  c0efa4:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  c0efa8:	e0800117 	ldw	r2,4(fp)
  c0efac:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  c0efb0:	e0fffa17 	ldw	r3,-24(fp)
  c0efb4:	e13ffb17 	ldw	r4,-20(fp)
  c0efb8:	1900042e 	bgeu	r3,r4,c0efcc <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  c0efbc:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  c0efc0:	e0fffa17 	ldw	r3,-24(fp)
  c0efc4:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  c0efc8:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  c0efcc:	e13ffc17 	ldw	r4,-16(fp)
  c0efd0:	e0bffe17 	ldw	r2,-8(fp)
  c0efd4:	2080d12e 	bgeu	r4,r2,c0f31c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  c0efd8:	e0fffb17 	ldw	r3,-20(fp)
  c0efdc:	e13ffd17 	ldw	r4,-12(fp)
  c0efe0:	19000136 	bltu	r3,r4,c0efe8 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  c0efe4:	0000cd06 	br	c0f31c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  c0efe8:	e0bffa17 	ldw	r2,-24(fp)
  c0efec:	e0fffd17 	ldw	r3,-12(fp)
  c0eff0:	10c00336 	bltu	r2,r3,c0f000 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  c0eff4:	e13ffd17 	ldw	r4,-12(fp)
  c0eff8:	213fffc4 	addi	r4,r4,-1
  c0effc:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  c0f000:	e0800217 	ldw	r2,8(fp)
  c0f004:	10800058 	cmpnei	r2,r2,1
  c0f008:	1000041e 	bne	r2,zero,c0f01c <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  c0f00c:	e0bff217 	ldw	r2,-56(fp)
  c0f010:	10800c17 	ldw	r2,48(r2)
  c0f014:	e0bfff15 	stw	r2,-4(fp)
  c0f018:	00000306 	br	c0f028 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  c0f01c:	e0bff217 	ldw	r2,-56(fp)
  c0f020:	10800b17 	ldw	r2,44(r2)
  c0f024:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  c0f028:	e0bff217 	ldw	r2,-56(fp)
  c0f02c:	10800d17 	ldw	r2,52(r2)
  c0f030:	1004c03a 	cmpne	r2,r2,zero
  c0f034:	1000571e 	bne	r2,zero,c0f194 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  c0f038:	e0bff217 	ldw	r2,-56(fp)
  c0f03c:	10801317 	ldw	r2,76(r2)
  c0f040:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  c0f044:	e0bff717 	ldw	r2,-36(fp)
  c0f048:	e0fffb17 	ldw	r3,-20(fp)
  c0f04c:	1884983a 	sll	r2,r3,r2
  c0f050:	e13fff17 	ldw	r4,-4(fp)
  c0f054:	2089883a 	add	r4,r4,r2
  c0f058:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  c0f05c:	e0bff217 	ldw	r2,-56(fp)
  c0f060:	10800e17 	ldw	r2,56(r2)
  c0f064:	10800058 	cmpnei	r2,r2,1
  c0f068:	1000151e 	bne	r2,zero,c0f0c0 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  c0f06c:	e0bffb17 	ldw	r2,-20(fp)
  c0f070:	e0bff815 	stw	r2,-32(fp)
  c0f074:	00000e06 	br	c0f0b0 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  c0f078:	e0ffff17 	ldw	r3,-4(fp)
  c0f07c:	e0bffc17 	ldw	r2,-16(fp)
  c0f080:	1885883a 	add	r2,r3,r2
  c0f084:	e0fff917 	ldw	r3,-28(fp)
  c0f088:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  c0f08c:	e0fff717 	ldw	r3,-36(fp)
  c0f090:	00800044 	movi	r2,1
  c0f094:	10c4983a 	sll	r2,r2,r3
  c0f098:	e0ffff17 	ldw	r3,-4(fp)
  c0f09c:	1887883a 	add	r3,r3,r2
  c0f0a0:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  c0f0a4:	e13ff817 	ldw	r4,-32(fp)
  c0f0a8:	21000044 	addi	r4,r4,1
  c0f0ac:	e13ff815 	stw	r4,-32(fp)
  c0f0b0:	e0bffa17 	ldw	r2,-24(fp)
  c0f0b4:	e0fff817 	ldw	r3,-32(fp)
  c0f0b8:	10ffef2e 	bgeu	r2,r3,c0f078 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  c0f0bc:	00009706 	br	c0f31c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  c0f0c0:	e0bff217 	ldw	r2,-56(fp)
  c0f0c4:	10800e17 	ldw	r2,56(r2)
  c0f0c8:	10800098 	cmpnei	r2,r2,2
  c0f0cc:	1000181e 	bne	r2,zero,c0f130 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  c0f0d0:	e13ffb17 	ldw	r4,-20(fp)
  c0f0d4:	e13ff815 	stw	r4,-32(fp)
  c0f0d8:	00001106 	br	c0f120 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  c0f0dc:	e0fffc17 	ldw	r3,-16(fp)
  c0f0e0:	e0fffc17 	ldw	r3,-16(fp)
  c0f0e4:	18c5883a 	add	r2,r3,r3
  c0f0e8:	1007883a 	mov	r3,r2
  c0f0ec:	e0bfff17 	ldw	r2,-4(fp)
  c0f0f0:	1885883a 	add	r2,r3,r2
  c0f0f4:	e0fff917 	ldw	r3,-28(fp)
  c0f0f8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  c0f0fc:	e0fff717 	ldw	r3,-36(fp)
  c0f100:	00800044 	movi	r2,1
  c0f104:	10c4983a 	sll	r2,r2,r3
  c0f108:	e13fff17 	ldw	r4,-4(fp)
  c0f10c:	2089883a 	add	r4,r4,r2
  c0f110:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  c0f114:	e0bff817 	ldw	r2,-32(fp)
  c0f118:	10800044 	addi	r2,r2,1
  c0f11c:	e0bff815 	stw	r2,-32(fp)
  c0f120:	e0fffa17 	ldw	r3,-24(fp)
  c0f124:	e13ff817 	ldw	r4,-32(fp)
  c0f128:	193fec2e 	bgeu	r3,r4,c0f0dc <alt_up_pixel_buffer_dma_draw_vline+0x180>
  c0f12c:	00007b06 	br	c0f31c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  c0f130:	e0bffb17 	ldw	r2,-20(fp)
  c0f134:	e0bff815 	stw	r2,-32(fp)
  c0f138:	00001206 	br	c0f184 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  c0f13c:	e0fffc17 	ldw	r3,-16(fp)
  c0f140:	e0fffc17 	ldw	r3,-16(fp)
  c0f144:	18c5883a 	add	r2,r3,r3
  c0f148:	1085883a 	add	r2,r2,r2
  c0f14c:	1007883a 	mov	r3,r2
  c0f150:	e0bfff17 	ldw	r2,-4(fp)
  c0f154:	1885883a 	add	r2,r3,r2
  c0f158:	e0fff917 	ldw	r3,-28(fp)
  c0f15c:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  c0f160:	e0fff717 	ldw	r3,-36(fp)
  c0f164:	00800044 	movi	r2,1
  c0f168:	10c4983a 	sll	r2,r2,r3
  c0f16c:	e13fff17 	ldw	r4,-4(fp)
  c0f170:	2089883a 	add	r4,r4,r2
  c0f174:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  c0f178:	e0bff817 	ldw	r2,-32(fp)
  c0f17c:	10800044 	addi	r2,r2,1
  c0f180:	e0bff815 	stw	r2,-32(fp)
  c0f184:	e0fffa17 	ldw	r3,-24(fp)
  c0f188:	e13ff817 	ldw	r4,-32(fp)
  c0f18c:	193feb2e 	bgeu	r3,r4,c0f13c <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  c0f190:	00006206 	br	c0f31c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  c0f194:	e0bff217 	ldw	r2,-56(fp)
  c0f198:	10800e17 	ldw	r2,56(r2)
  c0f19c:	10800058 	cmpnei	r2,r2,1
  c0f1a0:	1000191e 	bne	r2,zero,c0f208 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  c0f1a4:	e0fffb17 	ldw	r3,-20(fp)
  c0f1a8:	e13ffe17 	ldw	r4,-8(fp)
  c0f1ac:	1905383a 	mul	r2,r3,r4
  c0f1b0:	e0ffff17 	ldw	r3,-4(fp)
  c0f1b4:	1887883a 	add	r3,r3,r2
  c0f1b8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  c0f1bc:	e13ffb17 	ldw	r4,-20(fp)
  c0f1c0:	e13ff615 	stw	r4,-40(fp)
  c0f1c4:	00000c06 	br	c0f1f8 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  c0f1c8:	e0ffff17 	ldw	r3,-4(fp)
  c0f1cc:	e0bffc17 	ldw	r2,-16(fp)
  c0f1d0:	1885883a 	add	r2,r3,r2
  c0f1d4:	e0fff917 	ldw	r3,-28(fp)
  c0f1d8:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  c0f1dc:	e0bfff17 	ldw	r2,-4(fp)
  c0f1e0:	e0fffe17 	ldw	r3,-8(fp)
  c0f1e4:	10c5883a 	add	r2,r2,r3
  c0f1e8:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  c0f1ec:	e13ff617 	ldw	r4,-40(fp)
  c0f1f0:	21000044 	addi	r4,r4,1
  c0f1f4:	e13ff615 	stw	r4,-40(fp)
  c0f1f8:	e0bffa17 	ldw	r2,-24(fp)
  c0f1fc:	e0fff617 	ldw	r3,-40(fp)
  c0f200:	10fff12e 	bgeu	r2,r3,c0f1c8 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  c0f204:	00004506 	br	c0f31c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  c0f208:	e0bff217 	ldw	r2,-56(fp)
  c0f20c:	10800e17 	ldw	r2,56(r2)
  c0f210:	10800098 	cmpnei	r2,r2,2
  c0f214:	1000201e 	bne	r2,zero,c0f298 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  c0f218:	e13ffe17 	ldw	r4,-8(fp)
  c0f21c:	e13ffe17 	ldw	r4,-8(fp)
  c0f220:	2105883a 	add	r2,r4,r4
  c0f224:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  c0f228:	e0fffb17 	ldw	r3,-20(fp)
  c0f22c:	e13ffe17 	ldw	r4,-8(fp)
  c0f230:	1905383a 	mul	r2,r3,r4
  c0f234:	e0ffff17 	ldw	r3,-4(fp)
  c0f238:	1887883a 	add	r3,r3,r2
  c0f23c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  c0f240:	e13ffb17 	ldw	r4,-20(fp)
  c0f244:	e13ff615 	stw	r4,-40(fp)
  c0f248:	00000f06 	br	c0f288 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  c0f24c:	e0fffc17 	ldw	r3,-16(fp)
  c0f250:	e0fffc17 	ldw	r3,-16(fp)
  c0f254:	18c5883a 	add	r2,r3,r3
  c0f258:	1007883a 	mov	r3,r2
  c0f25c:	e0bfff17 	ldw	r2,-4(fp)
  c0f260:	1885883a 	add	r2,r3,r2
  c0f264:	e0fff917 	ldw	r3,-28(fp)
  c0f268:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  c0f26c:	e13fff17 	ldw	r4,-4(fp)
  c0f270:	e0bffe17 	ldw	r2,-8(fp)
  c0f274:	2089883a 	add	r4,r4,r2
  c0f278:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  c0f27c:	e0fff617 	ldw	r3,-40(fp)
  c0f280:	18c00044 	addi	r3,r3,1
  c0f284:	e0fff615 	stw	r3,-40(fp)
  c0f288:	e13ffa17 	ldw	r4,-24(fp)
  c0f28c:	e0bff617 	ldw	r2,-40(fp)
  c0f290:	20bfee2e 	bgeu	r4,r2,c0f24c <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  c0f294:	00002106 	br	c0f31c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  c0f298:	e0fffe17 	ldw	r3,-8(fp)
  c0f29c:	e0fffe17 	ldw	r3,-8(fp)
  c0f2a0:	18c5883a 	add	r2,r3,r3
  c0f2a4:	1085883a 	add	r2,r2,r2
  c0f2a8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  c0f2ac:	e13ffb17 	ldw	r4,-20(fp)
  c0f2b0:	e0fffe17 	ldw	r3,-8(fp)
  c0f2b4:	20c5383a 	mul	r2,r4,r3
  c0f2b8:	e13fff17 	ldw	r4,-4(fp)
  c0f2bc:	2089883a 	add	r4,r4,r2
  c0f2c0:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  c0f2c4:	e0bffb17 	ldw	r2,-20(fp)
  c0f2c8:	e0bff615 	stw	r2,-40(fp)
  c0f2cc:	00001006 	br	c0f310 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  c0f2d0:	e0fffc17 	ldw	r3,-16(fp)
  c0f2d4:	e0fffc17 	ldw	r3,-16(fp)
  c0f2d8:	18c5883a 	add	r2,r3,r3
  c0f2dc:	1085883a 	add	r2,r2,r2
  c0f2e0:	1007883a 	mov	r3,r2
  c0f2e4:	e0bfff17 	ldw	r2,-4(fp)
  c0f2e8:	1885883a 	add	r2,r3,r2
  c0f2ec:	e0fff917 	ldw	r3,-28(fp)
  c0f2f0:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  c0f2f4:	e13fff17 	ldw	r4,-4(fp)
  c0f2f8:	e0bffe17 	ldw	r2,-8(fp)
  c0f2fc:	2089883a 	add	r4,r4,r2
  c0f300:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  c0f304:	e0fff617 	ldw	r3,-40(fp)
  c0f308:	18c00044 	addi	r3,r3,1
  c0f30c:	e0fff615 	stw	r3,-40(fp)
  c0f310:	e13ffa17 	ldw	r4,-24(fp)
  c0f314:	e0bff617 	ldw	r2,-40(fp)
  c0f318:	20bfed2e 	bgeu	r4,r2,c0f2d0 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  c0f31c:	e037883a 	mov	sp,fp
  c0f320:	df000017 	ldw	fp,0(sp)
  c0f324:	dec00104 	addi	sp,sp,4
  c0f328:	f800283a 	ret

00c0f32c <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  c0f32c:	defff804 	addi	sp,sp,-32
  c0f330:	dfc00715 	stw	ra,28(sp)
  c0f334:	df000615 	stw	fp,24(sp)
  c0f338:	df000604 	addi	fp,sp,24
  c0f33c:	e13ffc15 	stw	r4,-16(fp)
  c0f340:	e17ffd15 	stw	r5,-12(fp)
  c0f344:	e1bffe15 	stw	r6,-8(fp)
  c0f348:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  c0f34c:	e0800317 	ldw	r2,12(fp)
  c0f350:	d8800015 	stw	r2,0(sp)
  c0f354:	e0800417 	ldw	r2,16(fp)
  c0f358:	d8800115 	stw	r2,4(sp)
  c0f35c:	e13ffc17 	ldw	r4,-16(fp)
  c0f360:	e17ffd17 	ldw	r5,-12(fp)
  c0f364:	e1bfff17 	ldw	r6,-4(fp)
  c0f368:	e1fffe17 	ldw	r7,-8(fp)
  c0f36c:	0c0ec0c0 	call	c0ec0c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  c0f370:	e0800317 	ldw	r2,12(fp)
  c0f374:	d8800015 	stw	r2,0(sp)
  c0f378:	e0800417 	ldw	r2,16(fp)
  c0f37c:	d8800115 	stw	r2,4(sp)
  c0f380:	e13ffc17 	ldw	r4,-16(fp)
  c0f384:	e17ffd17 	ldw	r5,-12(fp)
  c0f388:	e1bfff17 	ldw	r6,-4(fp)
  c0f38c:	e1c00217 	ldw	r7,8(fp)
  c0f390:	0c0ec0c0 	call	c0ec0c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  c0f394:	e0800317 	ldw	r2,12(fp)
  c0f398:	d8800015 	stw	r2,0(sp)
  c0f39c:	e0800417 	ldw	r2,16(fp)
  c0f3a0:	d8800115 	stw	r2,4(sp)
  c0f3a4:	e13ffc17 	ldw	r4,-16(fp)
  c0f3a8:	e17ffd17 	ldw	r5,-12(fp)
  c0f3ac:	e1bffe17 	ldw	r6,-8(fp)
  c0f3b0:	e1c00217 	ldw	r7,8(fp)
  c0f3b4:	0c0ef5c0 	call	c0ef5c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  c0f3b8:	e0800317 	ldw	r2,12(fp)
  c0f3bc:	d8800015 	stw	r2,0(sp)
  c0f3c0:	e0800417 	ldw	r2,16(fp)
  c0f3c4:	d8800115 	stw	r2,4(sp)
  c0f3c8:	e13ffc17 	ldw	r4,-16(fp)
  c0f3cc:	e17fff17 	ldw	r5,-4(fp)
  c0f3d0:	e1bffe17 	ldw	r6,-8(fp)
  c0f3d4:	e1c00217 	ldw	r7,8(fp)
  c0f3d8:	0c0ef5c0 	call	c0ef5c <alt_up_pixel_buffer_dma_draw_vline>
}
  c0f3dc:	e037883a 	mov	sp,fp
  c0f3e0:	dfc00117 	ldw	ra,4(sp)
  c0f3e4:	df000017 	ldw	fp,0(sp)
  c0f3e8:	dec00204 	addi	sp,sp,8
  c0f3ec:	f800283a 	ret

00c0f3f0 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  c0f3f0:	defffb04 	addi	sp,sp,-20
  c0f3f4:	df000415 	stw	fp,16(sp)
  c0f3f8:	df000404 	addi	fp,sp,16
  c0f3fc:	e13ffc15 	stw	r4,-16(fp)
  c0f400:	e17ffd15 	stw	r5,-12(fp)
  c0f404:	e1bffe15 	stw	r6,-8(fp)
  c0f408:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  c0f40c:	e0c00217 	ldw	r3,8(fp)
  c0f410:	1804c03a 	cmpne	r2,r3,zero
  c0f414:	10000b1e 	bne	r2,zero,c0f444 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  c0f418:	e13ffd17 	ldw	r4,-12(fp)
  c0f41c:	e0ffff17 	ldw	r3,-4(fp)
  c0f420:	20c5383a 	mul	r2,r4,r3
  c0f424:	e13ffe17 	ldw	r4,-8(fp)
  c0f428:	1105883a 	add	r2,r2,r4
  c0f42c:	1007883a 	mov	r3,r2
  c0f430:	e0bffc17 	ldw	r2,-16(fp)
  c0f434:	1885883a 	add	r2,r3,r2
  c0f438:	e0c00117 	ldw	r3,4(fp)
  c0f43c:	10c00025 	stbio	r3,0(r2)
  c0f440:	00001b06 	br	c0f4b0 <helper_plot_pixel+0xc0>
	else if (mode == 1)
  c0f444:	e1000217 	ldw	r4,8(fp)
  c0f448:	20800058 	cmpnei	r2,r4,1
  c0f44c:	10000c1e 	bne	r2,zero,c0f480 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  c0f450:	e0fffd17 	ldw	r3,-12(fp)
  c0f454:	e13fff17 	ldw	r4,-4(fp)
  c0f458:	1905383a 	mul	r2,r3,r4
  c0f45c:	e0fffe17 	ldw	r3,-8(fp)
  c0f460:	10c5883a 	add	r2,r2,r3
  c0f464:	1085883a 	add	r2,r2,r2
  c0f468:	1007883a 	mov	r3,r2
  c0f46c:	e0bffc17 	ldw	r2,-16(fp)
  c0f470:	1885883a 	add	r2,r3,r2
  c0f474:	e1000117 	ldw	r4,4(fp)
  c0f478:	1100002d 	sthio	r4,0(r2)
  c0f47c:	00000c06 	br	c0f4b0 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  c0f480:	e0fffd17 	ldw	r3,-12(fp)
  c0f484:	e13fff17 	ldw	r4,-4(fp)
  c0f488:	1905383a 	mul	r2,r3,r4
  c0f48c:	e0fffe17 	ldw	r3,-8(fp)
  c0f490:	10c5883a 	add	r2,r2,r3
  c0f494:	1085883a 	add	r2,r2,r2
  c0f498:	1085883a 	add	r2,r2,r2
  c0f49c:	1007883a 	mov	r3,r2
  c0f4a0:	e0bffc17 	ldw	r2,-16(fp)
  c0f4a4:	1885883a 	add	r2,r3,r2
  c0f4a8:	e1000117 	ldw	r4,4(fp)
  c0f4ac:	11000035 	stwio	r4,0(r2)
}
  c0f4b0:	e037883a 	mov	sp,fp
  c0f4b4:	df000017 	ldw	fp,0(sp)
  c0f4b8:	dec00104 	addi	sp,sp,4
  c0f4bc:	f800283a 	ret

00c0f4c0 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  c0f4c0:	deffe404 	addi	sp,sp,-112
  c0f4c4:	dfc01b15 	stw	ra,108(sp)
  c0f4c8:	df001a15 	stw	fp,104(sp)
  c0f4cc:	df001a04 	addi	fp,sp,104
  c0f4d0:	e13fe815 	stw	r4,-96(fp)
  c0f4d4:	e17fe915 	stw	r5,-92(fp)
  c0f4d8:	e1bfea15 	stw	r6,-88(fp)
  c0f4dc:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  c0f4e0:	e0bfe917 	ldw	r2,-92(fp)
  c0f4e4:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  c0f4e8:	e0ffea17 	ldw	r3,-88(fp)
  c0f4ec:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  c0f4f0:	e13feb17 	ldw	r4,-84(fp)
  c0f4f4:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  c0f4f8:	e0800217 	ldw	r2,8(fp)
  c0f4fc:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  c0f500:	e0fff717 	ldw	r3,-36(fp)
  c0f504:	e13ff917 	ldw	r4,-28(fp)
  c0f508:	1905c83a 	sub	r2,r3,r4
  c0f50c:	e0bfff15 	stw	r2,-4(fp)
  c0f510:	e0ffff17 	ldw	r3,-4(fp)
  c0f514:	1804403a 	cmpge	r2,r3,zero
  c0f518:	1000031e 	bne	r2,zero,c0f528 <alt_up_pixel_buffer_dma_draw_line+0x68>
  c0f51c:	e13fff17 	ldw	r4,-4(fp)
  c0f520:	0109c83a 	sub	r4,zero,r4
  c0f524:	e13fff15 	stw	r4,-4(fp)
  c0f528:	e0fff817 	ldw	r3,-32(fp)
  c0f52c:	e13ffa17 	ldw	r4,-24(fp)
  c0f530:	1905c83a 	sub	r2,r3,r4
  c0f534:	e0bffe15 	stw	r2,-8(fp)
  c0f538:	e0fffe17 	ldw	r3,-8(fp)
  c0f53c:	1804403a 	cmpge	r2,r3,zero
  c0f540:	1000031e 	bne	r2,zero,c0f550 <alt_up_pixel_buffer_dma_draw_line+0x90>
  c0f544:	e13ffe17 	ldw	r4,-8(fp)
  c0f548:	0109c83a 	sub	r4,zero,r4
  c0f54c:	e13ffe15 	stw	r4,-8(fp)
  c0f550:	e0fffe17 	ldw	r3,-8(fp)
  c0f554:	e13fff17 	ldw	r4,-4(fp)
  c0f558:	1904803a 	cmplt	r2,r3,r4
  c0f55c:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  c0f560:	e0bfe817 	ldw	r2,-96(fp)
  c0f564:	10800e17 	ldw	r2,56(r2)
  c0f568:	10800060 	cmpeqi	r2,r2,1
  c0f56c:	10000c1e 	bne	r2,zero,c0f5a0 <alt_up_pixel_buffer_dma_draw_line+0xe0>
  c0f570:	e0bfe817 	ldw	r2,-96(fp)
  c0f574:	10800e17 	ldw	r2,56(r2)
  c0f578:	10800098 	cmpnei	r2,r2,2
  c0f57c:	1000031e 	bne	r2,zero,c0f58c <alt_up_pixel_buffer_dma_draw_line+0xcc>
  c0f580:	00800044 	movi	r2,1
  c0f584:	e0bffc15 	stw	r2,-16(fp)
  c0f588:	00000206 	br	c0f594 <alt_up_pixel_buffer_dma_draw_line+0xd4>
  c0f58c:	00c00084 	movi	r3,2
  c0f590:	e0fffc15 	stw	r3,-16(fp)
  c0f594:	e13ffc17 	ldw	r4,-16(fp)
  c0f598:	e13ffd15 	stw	r4,-12(fp)
  c0f59c:	00000106 	br	c0f5a4 <alt_up_pixel_buffer_dma_draw_line+0xe4>
  c0f5a0:	e03ffd15 	stw	zero,-12(fp)
  c0f5a4:	e0bffd17 	ldw	r2,-12(fp)
  c0f5a8:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  c0f5ac:	e0c00317 	ldw	r3,12(fp)
  c0f5b0:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  c0f5b4:	e0bfe817 	ldw	r2,-96(fp)
  c0f5b8:	10800d17 	ldw	r2,52(r2)
  c0f5bc:	1004c03a 	cmpne	r2,r2,zero
  c0f5c0:	1000091e 	bne	r2,zero,c0f5e8 <alt_up_pixel_buffer_dma_draw_line+0x128>
  c0f5c4:	e0bfe817 	ldw	r2,-96(fp)
  c0f5c8:	10c01317 	ldw	r3,76(r2)
  c0f5cc:	e0bfef17 	ldw	r2,-68(fp)
  c0f5d0:	1885c83a 	sub	r2,r3,r2
  c0f5d4:	1007883a 	mov	r3,r2
  c0f5d8:	00800044 	movi	r2,1
  c0f5dc:	10c4983a 	sll	r2,r2,r3
  c0f5e0:	e0bffb15 	stw	r2,-20(fp)
  c0f5e4:	00000306 	br	c0f5f4 <alt_up_pixel_buffer_dma_draw_line+0x134>
  c0f5e8:	e0bfe817 	ldw	r2,-96(fp)
  c0f5ec:	10800f17 	ldw	r2,60(r2)
  c0f5f0:	e0bffb15 	stw	r2,-20(fp)
  c0f5f4:	e13ffb17 	ldw	r4,-20(fp)
  c0f5f8:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  c0f5fc:	e0800417 	ldw	r2,16(fp)
  c0f600:	10800058 	cmpnei	r2,r2,1
  c0f604:	1000041e 	bne	r2,zero,c0f618 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  c0f608:	e0bfe817 	ldw	r2,-96(fp)
  c0f60c:	10800c17 	ldw	r2,48(r2)
  c0f610:	e0bfed15 	stw	r2,-76(fp)
  c0f614:	00000306 	br	c0f624 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  c0f618:	e0bfe817 	ldw	r2,-96(fp)
  c0f61c:	10800b17 	ldw	r2,44(r2)
  c0f620:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  c0f624:	e0fff603 	ldbu	r3,-40(fp)
  c0f628:	18803fcc 	andi	r2,r3,255
  c0f62c:	1080201c 	xori	r2,r2,128
  c0f630:	10bfe004 	addi	r2,r2,-128
  c0f634:	10800050 	cmplti	r2,r2,1
  c0f638:	10000c1e 	bne	r2,zero,c0f66c <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  c0f63c:	e13ffa17 	ldw	r4,-24(fp)
  c0f640:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  c0f644:	e0bff917 	ldw	r2,-28(fp)
  c0f648:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  c0f64c:	e0fff317 	ldw	r3,-52(fp)
  c0f650:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  c0f654:	e13ff817 	ldw	r4,-32(fp)
  c0f658:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  c0f65c:	e0bff717 	ldw	r2,-36(fp)
  c0f660:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  c0f664:	e0fff317 	ldw	r3,-52(fp)
  c0f668:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  c0f66c:	e13ff817 	ldw	r4,-32(fp)
  c0f670:	e0bffa17 	ldw	r2,-24(fp)
  c0f674:	20800c0e 	bge	r4,r2,c0f6a8 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  c0f678:	e0fffa17 	ldw	r3,-24(fp)
  c0f67c:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  c0f680:	e13ff817 	ldw	r4,-32(fp)
  c0f684:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  c0f688:	e0bff317 	ldw	r2,-52(fp)
  c0f68c:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  c0f690:	e0fff917 	ldw	r3,-28(fp)
  c0f694:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  c0f698:	e13ff717 	ldw	r4,-36(fp)
  c0f69c:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  c0f6a0:	e0bff317 	ldw	r2,-52(fp)
  c0f6a4:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  c0f6a8:	e0fff817 	ldw	r3,-32(fp)
  c0f6ac:	e13ffa17 	ldw	r4,-24(fp)
  c0f6b0:	1907c83a 	sub	r3,r3,r4
  c0f6b4:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  c0f6b8:	e0fff717 	ldw	r3,-36(fp)
  c0f6bc:	e13ff917 	ldw	r4,-28(fp)
  c0f6c0:	1905c83a 	sub	r2,r3,r4
  c0f6c4:	e0bff415 	stw	r2,-48(fp)
  c0f6c8:	e0fff417 	ldw	r3,-48(fp)
  c0f6cc:	1804403a 	cmpge	r2,r3,zero
  c0f6d0:	1000031e 	bne	r2,zero,c0f6e0 <alt_up_pixel_buffer_dma_draw_line+0x220>
  c0f6d4:	e13ff417 	ldw	r4,-48(fp)
  c0f6d8:	0109c83a 	sub	r4,zero,r4
  c0f6dc:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  c0f6e0:	e0fff517 	ldw	r3,-44(fp)
  c0f6e4:	1804d7fa 	srli	r2,r3,31
  c0f6e8:	e13ff517 	ldw	r4,-44(fp)
  c0f6ec:	1105883a 	add	r2,r2,r4
  c0f6f0:	1005d07a 	srai	r2,r2,1
  c0f6f4:	0085c83a 	sub	r2,zero,r2
  c0f6f8:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  c0f6fc:	e0bff917 	ldw	r2,-28(fp)
  c0f700:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  c0f704:	e0fff917 	ldw	r3,-28(fp)
  c0f708:	e13ff717 	ldw	r4,-36(fp)
  c0f70c:	1900030e 	bge	r3,r4,c0f71c <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  c0f710:	00800044 	movi	r2,1
  c0f714:	e0bff215 	stw	r2,-56(fp)
  c0f718:	00000206 	br	c0f724 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  c0f71c:	00ffffc4 	movi	r3,-1
  c0f720:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  c0f724:	e13ff603 	ldbu	r4,-40(fp)
  c0f728:	20803fcc 	andi	r2,r4,255
  c0f72c:	1080201c 	xori	r2,r2,128
  c0f730:	10bfe004 	addi	r2,r2,-128
  c0f734:	10800058 	cmpnei	r2,r2,1
  c0f738:	1000221e 	bne	r2,zero,c0f7c4 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  c0f73c:	e0bffa17 	ldw	r2,-24(fp)
  c0f740:	e0bff115 	stw	r2,-60(fp)
  c0f744:	00001b06 	br	c0f7b4 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  c0f748:	e0ffee17 	ldw	r3,-72(fp)
  c0f74c:	d8c00015 	stw	r3,0(sp)
  c0f750:	e13fef17 	ldw	r4,-68(fp)
  c0f754:	d9000115 	stw	r4,4(sp)
  c0f758:	e13fed17 	ldw	r4,-76(fp)
  c0f75c:	e17fec17 	ldw	r5,-80(fp)
  c0f760:	e1bff017 	ldw	r6,-64(fp)
  c0f764:	e1fff117 	ldw	r7,-60(fp)
  c0f768:	0c0f3f00 	call	c0f3f0 <helper_plot_pixel>
			error = error + deltay;
  c0f76c:	e0bff317 	ldw	r2,-52(fp)
  c0f770:	e0fff417 	ldw	r3,-48(fp)
  c0f774:	10c5883a 	add	r2,r2,r3
  c0f778:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  c0f77c:	e13ff317 	ldw	r4,-52(fp)
  c0f780:	20800050 	cmplti	r2,r4,1
  c0f784:	1000081e 	bne	r2,zero,c0f7a8 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  c0f788:	e0bff017 	ldw	r2,-64(fp)
  c0f78c:	e0fff217 	ldw	r3,-56(fp)
  c0f790:	10c5883a 	add	r2,r2,r3
  c0f794:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  c0f798:	e13ff317 	ldw	r4,-52(fp)
  c0f79c:	e0bff517 	ldw	r2,-44(fp)
  c0f7a0:	2089c83a 	sub	r4,r4,r2
  c0f7a4:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  c0f7a8:	e0fff117 	ldw	r3,-60(fp)
  c0f7ac:	18c00044 	addi	r3,r3,1
  c0f7b0:	e0fff115 	stw	r3,-60(fp)
  c0f7b4:	e13ff817 	ldw	r4,-32(fp)
  c0f7b8:	e0bff117 	ldw	r2,-60(fp)
  c0f7bc:	20bfe20e 	bge	r4,r2,c0f748 <alt_up_pixel_buffer_dma_draw_line+0x288>
  c0f7c0:	00002106 	br	c0f848 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  c0f7c4:	e0fffa17 	ldw	r3,-24(fp)
  c0f7c8:	e0fff115 	stw	r3,-60(fp)
  c0f7cc:	00001b06 	br	c0f83c <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  c0f7d0:	e13fee17 	ldw	r4,-72(fp)
  c0f7d4:	d9000015 	stw	r4,0(sp)
  c0f7d8:	e0bfef17 	ldw	r2,-68(fp)
  c0f7dc:	d8800115 	stw	r2,4(sp)
  c0f7e0:	e13fed17 	ldw	r4,-76(fp)
  c0f7e4:	e17fec17 	ldw	r5,-80(fp)
  c0f7e8:	e1bff117 	ldw	r6,-60(fp)
  c0f7ec:	e1fff017 	ldw	r7,-64(fp)
  c0f7f0:	0c0f3f00 	call	c0f3f0 <helper_plot_pixel>
			error = error + deltay;
  c0f7f4:	e0fff317 	ldw	r3,-52(fp)
  c0f7f8:	e13ff417 	ldw	r4,-48(fp)
  c0f7fc:	1907883a 	add	r3,r3,r4
  c0f800:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  c0f804:	e0fff317 	ldw	r3,-52(fp)
  c0f808:	18800050 	cmplti	r2,r3,1
  c0f80c:	1000081e 	bne	r2,zero,c0f830 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  c0f810:	e13ff017 	ldw	r4,-64(fp)
  c0f814:	e0bff217 	ldw	r2,-56(fp)
  c0f818:	2089883a 	add	r4,r4,r2
  c0f81c:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  c0f820:	e0fff317 	ldw	r3,-52(fp)
  c0f824:	e13ff517 	ldw	r4,-44(fp)
  c0f828:	1907c83a 	sub	r3,r3,r4
  c0f82c:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  c0f830:	e0bff117 	ldw	r2,-60(fp)
  c0f834:	10800044 	addi	r2,r2,1
  c0f838:	e0bff115 	stw	r2,-60(fp)
  c0f83c:	e0fff817 	ldw	r3,-32(fp)
  c0f840:	e13ff117 	ldw	r4,-60(fp)
  c0f844:	193fe20e 	bge	r3,r4,c0f7d0 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  c0f848:	e037883a 	mov	sp,fp
  c0f84c:	dfc00117 	ldw	ra,4(sp)
  c0f850:	df000017 	ldw	fp,0(sp)
  c0f854:	dec00204 	addi	sp,sp,8
  c0f858:	f800283a 	ret

00c0f85c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  c0f85c:	defff404 	addi	sp,sp,-48
  c0f860:	df000b15 	stw	fp,44(sp)
  c0f864:	df000b04 	addi	fp,sp,44
  c0f868:	e13ffb15 	stw	r4,-20(fp)
  c0f86c:	e17ffc15 	stw	r5,-16(fp)
  c0f870:	e1bffd15 	stw	r6,-12(fp)
  c0f874:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  c0f878:	e03ff915 	stw	zero,-28(fp)
  c0f87c:	00803074 	movhi	r2,193
  c0f880:	1090c204 	addi	r2,r2,17160
  c0f884:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  c0f888:	1005003a 	cmpeq	r2,r2,zero
  c0f88c:	1000411e 	bne	r2,zero,c0f994 <alt_alarm_start+0x138>
  {
    if (alarm)
  c0f890:	e0bffb17 	ldw	r2,-20(fp)
  c0f894:	1005003a 	cmpeq	r2,r2,zero
  c0f898:	10003b1e 	bne	r2,zero,c0f988 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  c0f89c:	e0fffb17 	ldw	r3,-20(fp)
  c0f8a0:	e0bffd17 	ldw	r2,-12(fp)
  c0f8a4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  c0f8a8:	e0fffb17 	ldw	r3,-20(fp)
  c0f8ac:	e0bffe17 	ldw	r2,-8(fp)
  c0f8b0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  c0f8b4:	0005303a 	rdctl	r2,status
  c0f8b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  c0f8bc:	e0fff817 	ldw	r3,-32(fp)
  c0f8c0:	00bfff84 	movi	r2,-2
  c0f8c4:	1884703a 	and	r2,r3,r2
  c0f8c8:	1001703a 	wrctl	status,r2
  
  return context;
  c0f8cc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  c0f8d0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  c0f8d4:	00803074 	movhi	r2,193
  c0f8d8:	1090c304 	addi	r2,r2,17164
  c0f8dc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  c0f8e0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  c0f8e4:	e0fffc17 	ldw	r3,-16(fp)
  c0f8e8:	e0bff917 	ldw	r2,-28(fp)
  c0f8ec:	1885883a 	add	r2,r3,r2
  c0f8f0:	10c00044 	addi	r3,r2,1
  c0f8f4:	e0bffb17 	ldw	r2,-20(fp)
  c0f8f8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  c0f8fc:	e0bffb17 	ldw	r2,-20(fp)
  c0f900:	10c00217 	ldw	r3,8(r2)
  c0f904:	e0bff917 	ldw	r2,-28(fp)
  c0f908:	1880042e 	bgeu	r3,r2,c0f91c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  c0f90c:	e0fffb17 	ldw	r3,-20(fp)
  c0f910:	00800044 	movi	r2,1
  c0f914:	18800405 	stb	r2,16(r3)
  c0f918:	00000206 	br	c0f924 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  c0f91c:	e0bffb17 	ldw	r2,-20(fp)
  c0f920:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  c0f924:	e0fffb17 	ldw	r3,-20(fp)
  c0f928:	00803074 	movhi	r2,193
  c0f92c:	1089bb04 	addi	r2,r2,9964
  c0f930:	e0bff615 	stw	r2,-40(fp)
  c0f934:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  c0f938:	e0fff717 	ldw	r3,-36(fp)
  c0f93c:	e0bff617 	ldw	r2,-40(fp)
  c0f940:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  c0f944:	e0bff617 	ldw	r2,-40(fp)
  c0f948:	10c00017 	ldw	r3,0(r2)
  c0f94c:	e0bff717 	ldw	r2,-36(fp)
  c0f950:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  c0f954:	e0bff617 	ldw	r2,-40(fp)
  c0f958:	10c00017 	ldw	r3,0(r2)
  c0f95c:	e0bff717 	ldw	r2,-36(fp)
  c0f960:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  c0f964:	e0fff617 	ldw	r3,-40(fp)
  c0f968:	e0bff717 	ldw	r2,-36(fp)
  c0f96c:	18800015 	stw	r2,0(r3)
  c0f970:	e0bffa17 	ldw	r2,-24(fp)
  c0f974:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  c0f978:	e0bff517 	ldw	r2,-44(fp)
  c0f97c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  c0f980:	e03fff15 	stw	zero,-4(fp)
  c0f984:	00000506 	br	c0f99c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  c0f988:	00bffa84 	movi	r2,-22
  c0f98c:	e0bfff15 	stw	r2,-4(fp)
  c0f990:	00000206 	br	c0f99c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  c0f994:	00bfde84 	movi	r2,-134
  c0f998:	e0bfff15 	stw	r2,-4(fp)
  c0f99c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  c0f9a0:	e037883a 	mov	sp,fp
  c0f9a4:	df000017 	ldw	fp,0(sp)
  c0f9a8:	dec00104 	addi	sp,sp,4
  c0f9ac:	f800283a 	ret

00c0f9b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  c0f9b0:	defffe04 	addi	sp,sp,-8
  c0f9b4:	df000115 	stw	fp,4(sp)
  c0f9b8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  c0f9bc:	e03fff15 	stw	zero,-4(fp)
  c0f9c0:	00000506 	br	c0f9d8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  c0f9c4:	e0bfff17 	ldw	r2,-4(fp)
  c0f9c8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  c0f9cc:	e0bfff17 	ldw	r2,-4(fp)
  c0f9d0:	10800804 	addi	r2,r2,32
  c0f9d4:	e0bfff15 	stw	r2,-4(fp)
  c0f9d8:	e0bfff17 	ldw	r2,-4(fp)
  c0f9dc:	10810030 	cmpltui	r2,r2,1024
  c0f9e0:	103ff81e 	bne	r2,zero,c0f9c4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  c0f9e4:	e037883a 	mov	sp,fp
  c0f9e8:	df000017 	ldw	fp,0(sp)
  c0f9ec:	dec00104 	addi	sp,sp,4
  c0f9f0:	f800283a 	ret

00c0f9f4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  c0f9f4:	defff904 	addi	sp,sp,-28
  c0f9f8:	dfc00615 	stw	ra,24(sp)
  c0f9fc:	df000515 	stw	fp,20(sp)
  c0fa00:	df000504 	addi	fp,sp,20
  c0fa04:	e13ffd15 	stw	r4,-12(fp)
  c0fa08:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  c0fa0c:	e0bffd17 	ldw	r2,-12(fp)
  c0fa10:	1005003a 	cmpeq	r2,r2,zero
  c0fa14:	1000041e 	bne	r2,zero,c0fa28 <alt_dev_llist_insert+0x34>
  c0fa18:	e0bffd17 	ldw	r2,-12(fp)
  c0fa1c:	10800217 	ldw	r2,8(r2)
  c0fa20:	1004c03a 	cmpne	r2,r2,zero
  c0fa24:	1000071e 	bne	r2,zero,c0fa44 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  c0fa28:	0c0faa80 	call	c0faa8 <alt_get_errno>
  c0fa2c:	1007883a 	mov	r3,r2
  c0fa30:	00800584 	movi	r2,22
  c0fa34:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  c0fa38:	00bffa84 	movi	r2,-22
  c0fa3c:	e0bfff15 	stw	r2,-4(fp)
  c0fa40:	00001306 	br	c0fa90 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  c0fa44:	e0fffd17 	ldw	r3,-12(fp)
  c0fa48:	e0bffe17 	ldw	r2,-8(fp)
  c0fa4c:	e0bffb15 	stw	r2,-20(fp)
  c0fa50:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  c0fa54:	e0fffc17 	ldw	r3,-16(fp)
  c0fa58:	e0bffb17 	ldw	r2,-20(fp)
  c0fa5c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  c0fa60:	e0bffb17 	ldw	r2,-20(fp)
  c0fa64:	10c00017 	ldw	r3,0(r2)
  c0fa68:	e0bffc17 	ldw	r2,-16(fp)
  c0fa6c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  c0fa70:	e0bffb17 	ldw	r2,-20(fp)
  c0fa74:	10c00017 	ldw	r3,0(r2)
  c0fa78:	e0bffc17 	ldw	r2,-16(fp)
  c0fa7c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  c0fa80:	e0fffb17 	ldw	r3,-20(fp)
  c0fa84:	e0bffc17 	ldw	r2,-16(fp)
  c0fa88:	18800015 	stw	r2,0(r3)

  return 0;  
  c0fa8c:	e03fff15 	stw	zero,-4(fp)
  c0fa90:	e0bfff17 	ldw	r2,-4(fp)
}
  c0fa94:	e037883a 	mov	sp,fp
  c0fa98:	dfc00117 	ldw	ra,4(sp)
  c0fa9c:	df000017 	ldw	fp,0(sp)
  c0faa0:	dec00204 	addi	sp,sp,8
  c0faa4:	f800283a 	ret

00c0faa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  c0faa8:	defffd04 	addi	sp,sp,-12
  c0faac:	dfc00215 	stw	ra,8(sp)
  c0fab0:	df000115 	stw	fp,4(sp)
  c0fab4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  c0fab8:	00803074 	movhi	r2,193
  c0fabc:	1089b404 	addi	r2,r2,9936
  c0fac0:	10800017 	ldw	r2,0(r2)
  c0fac4:	1005003a 	cmpeq	r2,r2,zero
  c0fac8:	1000061e 	bne	r2,zero,c0fae4 <alt_get_errno+0x3c>
  c0facc:	00803074 	movhi	r2,193
  c0fad0:	1089b404 	addi	r2,r2,9936
  c0fad4:	10800017 	ldw	r2,0(r2)
  c0fad8:	103ee83a 	callr	r2
  c0fadc:	e0bfff15 	stw	r2,-4(fp)
  c0fae0:	00000306 	br	c0faf0 <alt_get_errno+0x48>
  c0fae4:	00803074 	movhi	r2,193
  c0fae8:	1090bd04 	addi	r2,r2,17140
  c0faec:	e0bfff15 	stw	r2,-4(fp)
  c0faf0:	e0bfff17 	ldw	r2,-4(fp)
}
  c0faf4:	e037883a 	mov	sp,fp
  c0faf8:	dfc00117 	ldw	ra,4(sp)
  c0fafc:	df000017 	ldw	fp,0(sp)
  c0fb00:	dec00204 	addi	sp,sp,8
  c0fb04:	f800283a 	ret

00c0fb08 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  c0fb08:	defffd04 	addi	sp,sp,-12
  c0fb0c:	dfc00215 	stw	ra,8(sp)
  c0fb10:	df000115 	stw	fp,4(sp)
  c0fb14:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  c0fb18:	00bfff04 	movi	r2,-4
  c0fb1c:	00c03074 	movhi	r3,193
  c0fb20:	18c18b04 	addi	r3,r3,1580
  c0fb24:	1885883a 	add	r2,r3,r2
  c0fb28:	e0bfff15 	stw	r2,-4(fp)
  c0fb2c:	00000606 	br	c0fb48 <_do_ctors+0x40>
        (*ctor) (); 
  c0fb30:	e0bfff17 	ldw	r2,-4(fp)
  c0fb34:	10800017 	ldw	r2,0(r2)
  c0fb38:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  c0fb3c:	e0bfff17 	ldw	r2,-4(fp)
  c0fb40:	10bfff04 	addi	r2,r2,-4
  c0fb44:	e0bfff15 	stw	r2,-4(fp)
  c0fb48:	e0ffff17 	ldw	r3,-4(fp)
  c0fb4c:	00803074 	movhi	r2,193
  c0fb50:	10818a04 	addi	r2,r2,1576
  c0fb54:	18bff62e 	bgeu	r3,r2,c0fb30 <_do_ctors+0x28>
        (*ctor) (); 
}
  c0fb58:	e037883a 	mov	sp,fp
  c0fb5c:	dfc00117 	ldw	ra,4(sp)
  c0fb60:	df000017 	ldw	fp,0(sp)
  c0fb64:	dec00204 	addi	sp,sp,8
  c0fb68:	f800283a 	ret

00c0fb6c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  c0fb6c:	defffd04 	addi	sp,sp,-12
  c0fb70:	dfc00215 	stw	ra,8(sp)
  c0fb74:	df000115 	stw	fp,4(sp)
  c0fb78:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  c0fb7c:	00bfff04 	movi	r2,-4
  c0fb80:	00c03074 	movhi	r3,193
  c0fb84:	18c18b04 	addi	r3,r3,1580
  c0fb88:	1885883a 	add	r2,r3,r2
  c0fb8c:	e0bfff15 	stw	r2,-4(fp)
  c0fb90:	00000606 	br	c0fbac <_do_dtors+0x40>
        (*dtor) (); 
  c0fb94:	e0bfff17 	ldw	r2,-4(fp)
  c0fb98:	10800017 	ldw	r2,0(r2)
  c0fb9c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  c0fba0:	e0bfff17 	ldw	r2,-4(fp)
  c0fba4:	10bfff04 	addi	r2,r2,-4
  c0fba8:	e0bfff15 	stw	r2,-4(fp)
  c0fbac:	e0ffff17 	ldw	r3,-4(fp)
  c0fbb0:	00803074 	movhi	r2,193
  c0fbb4:	10818b04 	addi	r2,r2,1580
  c0fbb8:	18bff62e 	bgeu	r3,r2,c0fb94 <_do_dtors+0x28>
        (*dtor) (); 
}
  c0fbbc:	e037883a 	mov	sp,fp
  c0fbc0:	dfc00117 	ldw	ra,4(sp)
  c0fbc4:	df000017 	ldw	fp,0(sp)
  c0fbc8:	dec00204 	addi	sp,sp,8
  c0fbcc:	f800283a 	ret

00c0fbd0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  c0fbd0:	defff904 	addi	sp,sp,-28
  c0fbd4:	dfc00615 	stw	ra,24(sp)
  c0fbd8:	df000515 	stw	fp,20(sp)
  c0fbdc:	df000504 	addi	fp,sp,20
  c0fbe0:	e13ffd15 	stw	r4,-12(fp)
  c0fbe4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  c0fbe8:	e0bffe17 	ldw	r2,-8(fp)
  c0fbec:	10800017 	ldw	r2,0(r2)
  c0fbf0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  c0fbf4:	e13ffd17 	ldw	r4,-12(fp)
  c0fbf8:	0c038e00 	call	c038e0 <strlen>
  c0fbfc:	10800044 	addi	r2,r2,1
  c0fc00:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  c0fc04:	00000d06 	br	c0fc3c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  c0fc08:	e0bffc17 	ldw	r2,-16(fp)
  c0fc0c:	11000217 	ldw	r4,8(r2)
  c0fc10:	e1bffb17 	ldw	r6,-20(fp)
  c0fc14:	e17ffd17 	ldw	r5,-12(fp)
  c0fc18:	0c102000 	call	c10200 <memcmp>
  c0fc1c:	1004c03a 	cmpne	r2,r2,zero
  c0fc20:	1000031e 	bne	r2,zero,c0fc30 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  c0fc24:	e0bffc17 	ldw	r2,-16(fp)
  c0fc28:	e0bfff15 	stw	r2,-4(fp)
  c0fc2c:	00000706 	br	c0fc4c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  c0fc30:	e0bffc17 	ldw	r2,-16(fp)
  c0fc34:	10800017 	ldw	r2,0(r2)
  c0fc38:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  c0fc3c:	e0fffe17 	ldw	r3,-8(fp)
  c0fc40:	e0bffc17 	ldw	r2,-16(fp)
  c0fc44:	10fff01e 	bne	r2,r3,c0fc08 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  c0fc48:	e03fff15 	stw	zero,-4(fp)
  c0fc4c:	e0bfff17 	ldw	r2,-4(fp)
}
  c0fc50:	e037883a 	mov	sp,fp
  c0fc54:	dfc00117 	ldw	ra,4(sp)
  c0fc58:	df000017 	ldw	fp,0(sp)
  c0fc5c:	dec00204 	addi	sp,sp,8
  c0fc60:	f800283a 	ret

00c0fc64 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  c0fc64:	defffe04 	addi	sp,sp,-8
  c0fc68:	dfc00115 	stw	ra,4(sp)
  c0fc6c:	df000015 	stw	fp,0(sp)
  c0fc70:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  c0fc74:	0009883a 	mov	r4,zero
  c0fc78:	01410004 	movi	r5,1024
  c0fc7c:	0c101240 	call	c10124 <alt_icache_flush>
#endif
}
  c0fc80:	e037883a 	mov	sp,fp
  c0fc84:	dfc00117 	ldw	ra,4(sp)
  c0fc88:	df000017 	ldw	fp,0(sp)
  c0fc8c:	dec00204 	addi	sp,sp,8
  c0fc90:	f800283a 	ret

00c0fc94 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  c0fc94:	defff904 	addi	sp,sp,-28
  c0fc98:	dfc00615 	stw	ra,24(sp)
  c0fc9c:	df000515 	stw	fp,20(sp)
  c0fca0:	df000504 	addi	fp,sp,20
  c0fca4:	e13ffc15 	stw	r4,-16(fp)
  c0fca8:	e17ffd15 	stw	r5,-12(fp)
  c0fcac:	e1bffe15 	stw	r6,-8(fp)
  c0fcb0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  c0fcb4:	e0800217 	ldw	r2,8(fp)
  c0fcb8:	d8800015 	stw	r2,0(sp)
  c0fcbc:	e13ffc17 	ldw	r4,-16(fp)
  c0fcc0:	e17ffd17 	ldw	r5,-12(fp)
  c0fcc4:	e1bffe17 	ldw	r6,-8(fp)
  c0fcc8:	e1ffff17 	ldw	r7,-4(fp)
  c0fccc:	0c0fe680 	call	c0fe68 <alt_iic_isr_register>
}  
  c0fcd0:	e037883a 	mov	sp,fp
  c0fcd4:	dfc00117 	ldw	ra,4(sp)
  c0fcd8:	df000017 	ldw	fp,0(sp)
  c0fcdc:	dec00204 	addi	sp,sp,8
  c0fce0:	f800283a 	ret

00c0fce4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  c0fce4:	defff904 	addi	sp,sp,-28
  c0fce8:	df000615 	stw	fp,24(sp)
  c0fcec:	df000604 	addi	fp,sp,24
  c0fcf0:	e13ffe15 	stw	r4,-8(fp)
  c0fcf4:	e17fff15 	stw	r5,-4(fp)
  c0fcf8:	e0bfff17 	ldw	r2,-4(fp)
  c0fcfc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  c0fd00:	0005303a 	rdctl	r2,status
  c0fd04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  c0fd08:	e0fffb17 	ldw	r3,-20(fp)
  c0fd0c:	00bfff84 	movi	r2,-2
  c0fd10:	1884703a 	and	r2,r3,r2
  c0fd14:	1001703a 	wrctl	status,r2
  
  return context;
  c0fd18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  c0fd1c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  c0fd20:	e0fffc17 	ldw	r3,-16(fp)
  c0fd24:	00800044 	movi	r2,1
  c0fd28:	10c4983a 	sll	r2,r2,r3
  c0fd2c:	1007883a 	mov	r3,r2
  c0fd30:	00803074 	movhi	r2,193
  c0fd34:	1090c104 	addi	r2,r2,17156
  c0fd38:	10800017 	ldw	r2,0(r2)
  c0fd3c:	1886b03a 	or	r3,r3,r2
  c0fd40:	00803074 	movhi	r2,193
  c0fd44:	1090c104 	addi	r2,r2,17156
  c0fd48:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  c0fd4c:	00803074 	movhi	r2,193
  c0fd50:	1090c104 	addi	r2,r2,17156
  c0fd54:	10800017 	ldw	r2,0(r2)
  c0fd58:	100170fa 	wrctl	ienable,r2
  c0fd5c:	e0bffd17 	ldw	r2,-12(fp)
  c0fd60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  c0fd64:	e0bffa17 	ldw	r2,-24(fp)
  c0fd68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  c0fd6c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  c0fd70:	e037883a 	mov	sp,fp
  c0fd74:	df000017 	ldw	fp,0(sp)
  c0fd78:	dec00104 	addi	sp,sp,4
  c0fd7c:	f800283a 	ret

00c0fd80 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  c0fd80:	defff904 	addi	sp,sp,-28
  c0fd84:	df000615 	stw	fp,24(sp)
  c0fd88:	df000604 	addi	fp,sp,24
  c0fd8c:	e13ffe15 	stw	r4,-8(fp)
  c0fd90:	e17fff15 	stw	r5,-4(fp)
  c0fd94:	e0bfff17 	ldw	r2,-4(fp)
  c0fd98:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  c0fd9c:	0005303a 	rdctl	r2,status
  c0fda0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  c0fda4:	e0fffb17 	ldw	r3,-20(fp)
  c0fda8:	00bfff84 	movi	r2,-2
  c0fdac:	1884703a 	and	r2,r3,r2
  c0fdb0:	1001703a 	wrctl	status,r2
  
  return context;
  c0fdb4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  c0fdb8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  c0fdbc:	e0fffc17 	ldw	r3,-16(fp)
  c0fdc0:	00800044 	movi	r2,1
  c0fdc4:	10c4983a 	sll	r2,r2,r3
  c0fdc8:	0084303a 	nor	r2,zero,r2
  c0fdcc:	1007883a 	mov	r3,r2
  c0fdd0:	00803074 	movhi	r2,193
  c0fdd4:	1090c104 	addi	r2,r2,17156
  c0fdd8:	10800017 	ldw	r2,0(r2)
  c0fddc:	1886703a 	and	r3,r3,r2
  c0fde0:	00803074 	movhi	r2,193
  c0fde4:	1090c104 	addi	r2,r2,17156
  c0fde8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  c0fdec:	00803074 	movhi	r2,193
  c0fdf0:	1090c104 	addi	r2,r2,17156
  c0fdf4:	10800017 	ldw	r2,0(r2)
  c0fdf8:	100170fa 	wrctl	ienable,r2
  c0fdfc:	e0bffd17 	ldw	r2,-12(fp)
  c0fe00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  c0fe04:	e0bffa17 	ldw	r2,-24(fp)
  c0fe08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  c0fe0c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  c0fe10:	e037883a 	mov	sp,fp
  c0fe14:	df000017 	ldw	fp,0(sp)
  c0fe18:	dec00104 	addi	sp,sp,4
  c0fe1c:	f800283a 	ret

00c0fe20 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  c0fe20:	defffc04 	addi	sp,sp,-16
  c0fe24:	df000315 	stw	fp,12(sp)
  c0fe28:	df000304 	addi	fp,sp,12
  c0fe2c:	e13ffe15 	stw	r4,-8(fp)
  c0fe30:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  c0fe34:	000530fa 	rdctl	r2,ienable
  c0fe38:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  c0fe3c:	e0ffff17 	ldw	r3,-4(fp)
  c0fe40:	00800044 	movi	r2,1
  c0fe44:	10c4983a 	sll	r2,r2,r3
  c0fe48:	1007883a 	mov	r3,r2
  c0fe4c:	e0bffd17 	ldw	r2,-12(fp)
  c0fe50:	1884703a 	and	r2,r3,r2
  c0fe54:	1004c03a 	cmpne	r2,r2,zero
}
  c0fe58:	e037883a 	mov	sp,fp
  c0fe5c:	df000017 	ldw	fp,0(sp)
  c0fe60:	dec00104 	addi	sp,sp,4
  c0fe64:	f800283a 	ret

00c0fe68 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  c0fe68:	defff404 	addi	sp,sp,-48
  c0fe6c:	dfc00b15 	stw	ra,44(sp)
  c0fe70:	df000a15 	stw	fp,40(sp)
  c0fe74:	df000a04 	addi	fp,sp,40
  c0fe78:	e13ffb15 	stw	r4,-20(fp)
  c0fe7c:	e17ffc15 	stw	r5,-16(fp)
  c0fe80:	e1bffd15 	stw	r6,-12(fp)
  c0fe84:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  c0fe88:	00bffa84 	movi	r2,-22
  c0fe8c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  c0fe90:	e0bffc17 	ldw	r2,-16(fp)
  c0fe94:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  c0fe98:	e0bff917 	ldw	r2,-28(fp)
  c0fe9c:	10800808 	cmpgei	r2,r2,32
  c0fea0:	1000291e 	bne	r2,zero,c0ff48 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  c0fea4:	0005303a 	rdctl	r2,status
  c0fea8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  c0feac:	e0fff717 	ldw	r3,-36(fp)
  c0feb0:	00bfff84 	movi	r2,-2
  c0feb4:	1884703a 	and	r2,r3,r2
  c0feb8:	1001703a 	wrctl	status,r2
  
  return context;
  c0febc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  c0fec0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  c0fec4:	e0bff917 	ldw	r2,-28(fp)
  c0fec8:	00c03074 	movhi	r3,193
  c0fecc:	18d0ce04 	addi	r3,r3,17208
  c0fed0:	100490fa 	slli	r2,r2,3
  c0fed4:	10c7883a 	add	r3,r2,r3
  c0fed8:	e0bffd17 	ldw	r2,-12(fp)
  c0fedc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  c0fee0:	e0bff917 	ldw	r2,-28(fp)
  c0fee4:	00c03074 	movhi	r3,193
  c0fee8:	18d0ce04 	addi	r3,r3,17208
  c0feec:	100490fa 	slli	r2,r2,3
  c0fef0:	10c5883a 	add	r2,r2,r3
  c0fef4:	10c00104 	addi	r3,r2,4
  c0fef8:	e0bffe17 	ldw	r2,-8(fp)
  c0fefc:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  c0ff00:	e0bffd17 	ldw	r2,-12(fp)
  c0ff04:	1005003a 	cmpeq	r2,r2,zero
  c0ff08:	1000051e 	bne	r2,zero,c0ff20 <alt_iic_isr_register+0xb8>
  c0ff0c:	e17ff917 	ldw	r5,-28(fp)
  c0ff10:	e13ffb17 	ldw	r4,-20(fp)
  c0ff14:	0c0fce40 	call	c0fce4 <alt_ic_irq_enable>
  c0ff18:	e0bfff15 	stw	r2,-4(fp)
  c0ff1c:	00000406 	br	c0ff30 <alt_iic_isr_register+0xc8>
  c0ff20:	e17ff917 	ldw	r5,-28(fp)
  c0ff24:	e13ffb17 	ldw	r4,-20(fp)
  c0ff28:	0c0fd800 	call	c0fd80 <alt_ic_irq_disable>
  c0ff2c:	e0bfff15 	stw	r2,-4(fp)
  c0ff30:	e0bfff17 	ldw	r2,-4(fp)
  c0ff34:	e0bffa15 	stw	r2,-24(fp)
  c0ff38:	e0bff817 	ldw	r2,-32(fp)
  c0ff3c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  c0ff40:	e0bff617 	ldw	r2,-40(fp)
  c0ff44:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  c0ff48:	e0bffa17 	ldw	r2,-24(fp)
}
  c0ff4c:	e037883a 	mov	sp,fp
  c0ff50:	dfc00117 	ldw	ra,4(sp)
  c0ff54:	df000017 	ldw	fp,0(sp)
  c0ff58:	dec00204 	addi	sp,sp,8
  c0ff5c:	f800283a 	ret

00c0ff60 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  c0ff60:	defffa04 	addi	sp,sp,-24
  c0ff64:	df000515 	stw	fp,20(sp)
  c0ff68:	df000504 	addi	fp,sp,20
  c0ff6c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  c0ff70:	0005303a 	rdctl	r2,status
  c0ff74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  c0ff78:	e0fffd17 	ldw	r3,-12(fp)
  c0ff7c:	00bfff84 	movi	r2,-2
  c0ff80:	1884703a 	and	r2,r3,r2
  c0ff84:	1001703a 	wrctl	status,r2
  
  return context;
  c0ff88:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  c0ff8c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  c0ff90:	e0bfff17 	ldw	r2,-4(fp)
  c0ff94:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  c0ff98:	e0bffc17 	ldw	r2,-16(fp)
  c0ff9c:	10c00017 	ldw	r3,0(r2)
  c0ffa0:	e0bffc17 	ldw	r2,-16(fp)
  c0ffa4:	10800117 	ldw	r2,4(r2)
  c0ffa8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  c0ffac:	e0bffc17 	ldw	r2,-16(fp)
  c0ffb0:	10c00117 	ldw	r3,4(r2)
  c0ffb4:	e0bffc17 	ldw	r2,-16(fp)
  c0ffb8:	10800017 	ldw	r2,0(r2)
  c0ffbc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  c0ffc0:	e0fffc17 	ldw	r3,-16(fp)
  c0ffc4:	e0bffc17 	ldw	r2,-16(fp)
  c0ffc8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  c0ffcc:	e0fffc17 	ldw	r3,-16(fp)
  c0ffd0:	e0bffc17 	ldw	r2,-16(fp)
  c0ffd4:	18800015 	stw	r2,0(r3)
  c0ffd8:	e0bffe17 	ldw	r2,-8(fp)
  c0ffdc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  c0ffe0:	e0bffb17 	ldw	r2,-20(fp)
  c0ffe4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  c0ffe8:	e037883a 	mov	sp,fp
  c0ffec:	df000017 	ldw	fp,0(sp)
  c0fff0:	dec00104 	addi	sp,sp,4
  c0fff4:	f800283a 	ret

00c0fff8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  c0fff8:	defffb04 	addi	sp,sp,-20
  c0fffc:	dfc00415 	stw	ra,16(sp)
  c10000:	df000315 	stw	fp,12(sp)
  c10004:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  c10008:	d0a01f17 	ldw	r2,-32644(gp)
  c1000c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  c10010:	d0a72717 	ldw	r2,-25444(gp)
  c10014:	10800044 	addi	r2,r2,1
  c10018:	d0a72715 	stw	r2,-25444(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  c1001c:	00003106 	br	c100e4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  c10020:	e0bffe17 	ldw	r2,-8(fp)
  c10024:	10800017 	ldw	r2,0(r2)
  c10028:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  c1002c:	e0bffe17 	ldw	r2,-8(fp)
  c10030:	10800403 	ldbu	r2,16(r2)
  c10034:	10803fcc 	andi	r2,r2,255
  c10038:	1005003a 	cmpeq	r2,r2,zero
  c1003c:	1000051e 	bne	r2,zero,c10054 <alt_tick+0x5c>
  c10040:	d0a72717 	ldw	r2,-25444(gp)
  c10044:	1004c03a 	cmpne	r2,r2,zero
  c10048:	1000021e 	bne	r2,zero,c10054 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  c1004c:	e0bffe17 	ldw	r2,-8(fp)
  c10050:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  c10054:	e0bffe17 	ldw	r2,-8(fp)
  c10058:	10c00217 	ldw	r3,8(r2)
  c1005c:	d0a72717 	ldw	r2,-25444(gp)
  c10060:	10c01e36 	bltu	r2,r3,c100dc <alt_tick+0xe4>
  c10064:	e0bffe17 	ldw	r2,-8(fp)
  c10068:	10800403 	ldbu	r2,16(r2)
  c1006c:	10803fcc 	andi	r2,r2,255
  c10070:	1004c03a 	cmpne	r2,r2,zero
  c10074:	1000191e 	bne	r2,zero,c100dc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  c10078:	e0bffe17 	ldw	r2,-8(fp)
  c1007c:	10c00317 	ldw	r3,12(r2)
  c10080:	e0bffe17 	ldw	r2,-8(fp)
  c10084:	11000517 	ldw	r4,20(r2)
  c10088:	183ee83a 	callr	r3
  c1008c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  c10090:	e0bffd17 	ldw	r2,-12(fp)
  c10094:	1004c03a 	cmpne	r2,r2,zero
  c10098:	1000031e 	bne	r2,zero,c100a8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  c1009c:	e13ffe17 	ldw	r4,-8(fp)
  c100a0:	0c0ff600 	call	c0ff60 <alt_alarm_stop>
  c100a4:	00000d06 	br	c100dc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  c100a8:	e0bffe17 	ldw	r2,-8(fp)
  c100ac:	10c00217 	ldw	r3,8(r2)
  c100b0:	e0bffd17 	ldw	r2,-12(fp)
  c100b4:	1887883a 	add	r3,r3,r2
  c100b8:	e0bffe17 	ldw	r2,-8(fp)
  c100bc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  c100c0:	e0bffe17 	ldw	r2,-8(fp)
  c100c4:	10c00217 	ldw	r3,8(r2)
  c100c8:	d0a72717 	ldw	r2,-25444(gp)
  c100cc:	1880032e 	bgeu	r3,r2,c100dc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  c100d0:	e0fffe17 	ldw	r3,-8(fp)
  c100d4:	00800044 	movi	r2,1
  c100d8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  c100dc:	e0bfff17 	ldw	r2,-4(fp)
  c100e0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  c100e4:	d0e01f04 	addi	r3,gp,-32644
  c100e8:	e0bffe17 	ldw	r2,-8(fp)
  c100ec:	10ffcc1e 	bne	r2,r3,c10020 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  c100f0:	e037883a 	mov	sp,fp
  c100f4:	dfc00117 	ldw	ra,4(sp)
  c100f8:	df000017 	ldw	fp,0(sp)
  c100fc:	dec00204 	addi	sp,sp,8
  c10100:	f800283a 	ret

00c10104 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  c10104:	deffff04 	addi	sp,sp,-4
  c10108:	df000015 	stw	fp,0(sp)
  c1010c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  c10110:	000170fa 	wrctl	ienable,zero
}
  c10114:	e037883a 	mov	sp,fp
  c10118:	df000017 	ldw	fp,0(sp)
  c1011c:	dec00104 	addi	sp,sp,4
  c10120:	f800283a 	ret

00c10124 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  c10124:	defffb04 	addi	sp,sp,-20
  c10128:	df000415 	stw	fp,16(sp)
  c1012c:	df000404 	addi	fp,sp,16
  c10130:	e13ffe15 	stw	r4,-8(fp)
  c10134:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  c10138:	e0bfff17 	ldw	r2,-4(fp)
  c1013c:	10810070 	cmpltui	r2,r2,1025
  c10140:	1000021e 	bne	r2,zero,c1014c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  c10144:	00810004 	movi	r2,1024
  c10148:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  c1014c:	e0fffe17 	ldw	r3,-8(fp)
  c10150:	e0bfff17 	ldw	r2,-4(fp)
  c10154:	1885883a 	add	r2,r3,r2
  c10158:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  c1015c:	e0bffe17 	ldw	r2,-8(fp)
  c10160:	e0bffd15 	stw	r2,-12(fp)
  c10164:	00000506 	br	c1017c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  c10168:	e0bffd17 	ldw	r2,-12(fp)
  c1016c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  c10170:	e0bffd17 	ldw	r2,-12(fp)
  c10174:	10800804 	addi	r2,r2,32
  c10178:	e0bffd15 	stw	r2,-12(fp)
  c1017c:	e0fffd17 	ldw	r3,-12(fp)
  c10180:	e0bffc17 	ldw	r2,-16(fp)
  c10184:	18bff836 	bltu	r3,r2,c10168 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  c10188:	e0bffe17 	ldw	r2,-8(fp)
  c1018c:	108007cc 	andi	r2,r2,31
  c10190:	1005003a 	cmpeq	r2,r2,zero
  c10194:	1000021e 	bne	r2,zero,c101a0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  c10198:	e0bffd17 	ldw	r2,-12(fp)
  c1019c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  c101a0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  c101a4:	e037883a 	mov	sp,fp
  c101a8:	df000017 	ldw	fp,0(sp)
  c101ac:	dec00104 	addi	sp,sp,4
  c101b0:	f800283a 	ret

00c101b4 <atexit>:
  c101b4:	200b883a 	mov	r5,r4
  c101b8:	000d883a 	mov	r6,zero
  c101bc:	0009883a 	mov	r4,zero
  c101c0:	000f883a 	mov	r7,zero
  c101c4:	0c102741 	jmpi	c10274 <__register_exitproc>

00c101c8 <exit>:
  c101c8:	defffe04 	addi	sp,sp,-8
  c101cc:	000b883a 	mov	r5,zero
  c101d0:	dc000015 	stw	r16,0(sp)
  c101d4:	dfc00115 	stw	ra,4(sp)
  c101d8:	2021883a 	mov	r16,r4
  c101dc:	0c103ac0 	call	c103ac <__call_exitprocs>
  c101e0:	00803074 	movhi	r2,193
  c101e4:	1089aa04 	addi	r2,r2,9896
  c101e8:	11000017 	ldw	r4,0(r2)
  c101ec:	20800f17 	ldw	r2,60(r4)
  c101f0:	10000126 	beq	r2,zero,c101f8 <exit+0x30>
  c101f4:	103ee83a 	callr	r2
  c101f8:	8009883a 	mov	r4,r16
  c101fc:	0c1059c0 	call	c1059c <_exit>

00c10200 <memcmp>:
  c10200:	00c000c4 	movi	r3,3
  c10204:	1980032e 	bgeu	r3,r6,c10214 <memcmp+0x14>
  c10208:	2144b03a 	or	r2,r4,r5
  c1020c:	10c4703a 	and	r2,r2,r3
  c10210:	10000f26 	beq	r2,zero,c10250 <memcmp+0x50>
  c10214:	31ffffc4 	addi	r7,r6,-1
  c10218:	3000061e 	bne	r6,zero,c10234 <memcmp+0x34>
  c1021c:	00000a06 	br	c10248 <memcmp+0x48>
  c10220:	39ffffc4 	addi	r7,r7,-1
  c10224:	00bfffc4 	movi	r2,-1
  c10228:	21000044 	addi	r4,r4,1
  c1022c:	29400044 	addi	r5,r5,1
  c10230:	38800526 	beq	r7,r2,c10248 <memcmp+0x48>
  c10234:	20c00003 	ldbu	r3,0(r4)
  c10238:	28800003 	ldbu	r2,0(r5)
  c1023c:	18bff826 	beq	r3,r2,c10220 <memcmp+0x20>
  c10240:	1885c83a 	sub	r2,r3,r2
  c10244:	f800283a 	ret
  c10248:	0005883a 	mov	r2,zero
  c1024c:	f800283a 	ret
  c10250:	180f883a 	mov	r7,r3
  c10254:	20c00017 	ldw	r3,0(r4)
  c10258:	28800017 	ldw	r2,0(r5)
  c1025c:	18bfed1e 	bne	r3,r2,c10214 <memcmp+0x14>
  c10260:	31bfff04 	addi	r6,r6,-4
  c10264:	21000104 	addi	r4,r4,4
  c10268:	29400104 	addi	r5,r5,4
  c1026c:	39bff936 	bltu	r7,r6,c10254 <memcmp+0x54>
  c10270:	003fe806 	br	c10214 <memcmp+0x14>

00c10274 <__register_exitproc>:
  c10274:	defffa04 	addi	sp,sp,-24
  c10278:	00803074 	movhi	r2,193
  c1027c:	1089aa04 	addi	r2,r2,9896
  c10280:	dc000015 	stw	r16,0(sp)
  c10284:	14000017 	ldw	r16,0(r2)
  c10288:	dd000415 	stw	r20,16(sp)
  c1028c:	2829883a 	mov	r20,r5
  c10290:	81405217 	ldw	r5,328(r16)
  c10294:	dcc00315 	stw	r19,12(sp)
  c10298:	dc800215 	stw	r18,8(sp)
  c1029c:	dc400115 	stw	r17,4(sp)
  c102a0:	dfc00515 	stw	ra,20(sp)
  c102a4:	2023883a 	mov	r17,r4
  c102a8:	3027883a 	mov	r19,r6
  c102ac:	3825883a 	mov	r18,r7
  c102b0:	28002526 	beq	r5,zero,c10348 <__register_exitproc+0xd4>
  c102b4:	29000117 	ldw	r4,4(r5)
  c102b8:	008007c4 	movi	r2,31
  c102bc:	11002716 	blt	r2,r4,c1035c <__register_exitproc+0xe8>
  c102c0:	8800101e 	bne	r17,zero,c10304 <__register_exitproc+0x90>
  c102c4:	2105883a 	add	r2,r4,r4
  c102c8:	1085883a 	add	r2,r2,r2
  c102cc:	20c00044 	addi	r3,r4,1
  c102d0:	1145883a 	add	r2,r2,r5
  c102d4:	0009883a 	mov	r4,zero
  c102d8:	15000215 	stw	r20,8(r2)
  c102dc:	28c00115 	stw	r3,4(r5)
  c102e0:	2005883a 	mov	r2,r4
  c102e4:	dfc00517 	ldw	ra,20(sp)
  c102e8:	dd000417 	ldw	r20,16(sp)
  c102ec:	dcc00317 	ldw	r19,12(sp)
  c102f0:	dc800217 	ldw	r18,8(sp)
  c102f4:	dc400117 	ldw	r17,4(sp)
  c102f8:	dc000017 	ldw	r16,0(sp)
  c102fc:	dec00604 	addi	sp,sp,24
  c10300:	f800283a 	ret
  c10304:	29802204 	addi	r6,r5,136
  c10308:	00800044 	movi	r2,1
  c1030c:	110e983a 	sll	r7,r2,r4
  c10310:	30c04017 	ldw	r3,256(r6)
  c10314:	2105883a 	add	r2,r4,r4
  c10318:	1085883a 	add	r2,r2,r2
  c1031c:	1185883a 	add	r2,r2,r6
  c10320:	19c6b03a 	or	r3,r3,r7
  c10324:	14802015 	stw	r18,128(r2)
  c10328:	14c00015 	stw	r19,0(r2)
  c1032c:	00800084 	movi	r2,2
  c10330:	30c04015 	stw	r3,256(r6)
  c10334:	88bfe31e 	bne	r17,r2,c102c4 <__register_exitproc+0x50>
  c10338:	30804117 	ldw	r2,260(r6)
  c1033c:	11c4b03a 	or	r2,r2,r7
  c10340:	30804115 	stw	r2,260(r6)
  c10344:	003fdf06 	br	c102c4 <__register_exitproc+0x50>
  c10348:	00803074 	movhi	r2,193
  c1034c:	10910e04 	addi	r2,r2,17464
  c10350:	100b883a 	mov	r5,r2
  c10354:	80805215 	stw	r2,328(r16)
  c10358:	003fd606 	br	c102b4 <__register_exitproc+0x40>
  c1035c:	00800034 	movhi	r2,0
  c10360:	10800004 	addi	r2,r2,0
  c10364:	1000021e 	bne	r2,zero,c10370 <__register_exitproc+0xfc>
  c10368:	013fffc4 	movi	r4,-1
  c1036c:	003fdc06 	br	c102e0 <__register_exitproc+0x6c>
  c10370:	01006404 	movi	r4,400
  c10374:	103ee83a 	callr	r2
  c10378:	1007883a 	mov	r3,r2
  c1037c:	103ffa26 	beq	r2,zero,c10368 <__register_exitproc+0xf4>
  c10380:	80805217 	ldw	r2,328(r16)
  c10384:	180b883a 	mov	r5,r3
  c10388:	18000115 	stw	zero,4(r3)
  c1038c:	18800015 	stw	r2,0(r3)
  c10390:	80c05215 	stw	r3,328(r16)
  c10394:	18006215 	stw	zero,392(r3)
  c10398:	18006315 	stw	zero,396(r3)
  c1039c:	0009883a 	mov	r4,zero
  c103a0:	883fc826 	beq	r17,zero,c102c4 <__register_exitproc+0x50>
  c103a4:	003fd706 	br	c10304 <__register_exitproc+0x90>

00c103a8 <register_fini>:
  c103a8:	f800283a 	ret

00c103ac <__call_exitprocs>:
  c103ac:	00803074 	movhi	r2,193
  c103b0:	1089aa04 	addi	r2,r2,9896
  c103b4:	10800017 	ldw	r2,0(r2)
  c103b8:	defff304 	addi	sp,sp,-52
  c103bc:	df000b15 	stw	fp,44(sp)
  c103c0:	d8800115 	stw	r2,4(sp)
  c103c4:	00800034 	movhi	r2,0
  c103c8:	10800004 	addi	r2,r2,0
  c103cc:	1005003a 	cmpeq	r2,r2,zero
  c103d0:	d8800215 	stw	r2,8(sp)
  c103d4:	d8800117 	ldw	r2,4(sp)
  c103d8:	dd400815 	stw	r21,32(sp)
  c103dc:	dd000715 	stw	r20,28(sp)
  c103e0:	10805204 	addi	r2,r2,328
  c103e4:	dfc00c15 	stw	ra,48(sp)
  c103e8:	ddc00a15 	stw	r23,40(sp)
  c103ec:	dd800915 	stw	r22,36(sp)
  c103f0:	dcc00615 	stw	r19,24(sp)
  c103f4:	dc800515 	stw	r18,20(sp)
  c103f8:	dc400415 	stw	r17,16(sp)
  c103fc:	dc000315 	stw	r16,12(sp)
  c10400:	282b883a 	mov	r21,r5
  c10404:	2039883a 	mov	fp,r4
  c10408:	d8800015 	stw	r2,0(sp)
  c1040c:	2829003a 	cmpeq	r20,r5,zero
  c10410:	d8800117 	ldw	r2,4(sp)
  c10414:	14405217 	ldw	r17,328(r2)
  c10418:	88001026 	beq	r17,zero,c1045c <__call_exitprocs+0xb0>
  c1041c:	ddc00017 	ldw	r23,0(sp)
  c10420:	88800117 	ldw	r2,4(r17)
  c10424:	8c802204 	addi	r18,r17,136
  c10428:	143fffc4 	addi	r16,r2,-1
  c1042c:	80000916 	blt	r16,zero,c10454 <__call_exitprocs+0xa8>
  c10430:	05bfffc4 	movi	r22,-1
  c10434:	a000151e 	bne	r20,zero,c1048c <__call_exitprocs+0xe0>
  c10438:	8409883a 	add	r4,r16,r16
  c1043c:	2105883a 	add	r2,r4,r4
  c10440:	1485883a 	add	r2,r2,r18
  c10444:	10c02017 	ldw	r3,128(r2)
  c10448:	a8c01126 	beq	r21,r3,c10490 <__call_exitprocs+0xe4>
  c1044c:	843fffc4 	addi	r16,r16,-1
  c10450:	85bff81e 	bne	r16,r22,c10434 <__call_exitprocs+0x88>
  c10454:	d8800217 	ldw	r2,8(sp)
  c10458:	10003126 	beq	r2,zero,c10520 <__call_exitprocs+0x174>
  c1045c:	dfc00c17 	ldw	ra,48(sp)
  c10460:	df000b17 	ldw	fp,44(sp)
  c10464:	ddc00a17 	ldw	r23,40(sp)
  c10468:	dd800917 	ldw	r22,36(sp)
  c1046c:	dd400817 	ldw	r21,32(sp)
  c10470:	dd000717 	ldw	r20,28(sp)
  c10474:	dcc00617 	ldw	r19,24(sp)
  c10478:	dc800517 	ldw	r18,20(sp)
  c1047c:	dc400417 	ldw	r17,16(sp)
  c10480:	dc000317 	ldw	r16,12(sp)
  c10484:	dec00d04 	addi	sp,sp,52
  c10488:	f800283a 	ret
  c1048c:	8409883a 	add	r4,r16,r16
  c10490:	88c00117 	ldw	r3,4(r17)
  c10494:	2105883a 	add	r2,r4,r4
  c10498:	1445883a 	add	r2,r2,r17
  c1049c:	18ffffc4 	addi	r3,r3,-1
  c104a0:	11800217 	ldw	r6,8(r2)
  c104a4:	1c001526 	beq	r3,r16,c104fc <__call_exitprocs+0x150>
  c104a8:	10000215 	stw	zero,8(r2)
  c104ac:	303fe726 	beq	r6,zero,c1044c <__call_exitprocs+0xa0>
  c104b0:	00c00044 	movi	r3,1
  c104b4:	1c06983a 	sll	r3,r3,r16
  c104b8:	90804017 	ldw	r2,256(r18)
  c104bc:	8cc00117 	ldw	r19,4(r17)
  c104c0:	1884703a 	and	r2,r3,r2
  c104c4:	10001426 	beq	r2,zero,c10518 <__call_exitprocs+0x16c>
  c104c8:	90804117 	ldw	r2,260(r18)
  c104cc:	1884703a 	and	r2,r3,r2
  c104d0:	10000c1e 	bne	r2,zero,c10504 <__call_exitprocs+0x158>
  c104d4:	2105883a 	add	r2,r4,r4
  c104d8:	1485883a 	add	r2,r2,r18
  c104dc:	11400017 	ldw	r5,0(r2)
  c104e0:	e009883a 	mov	r4,fp
  c104e4:	303ee83a 	callr	r6
  c104e8:	88800117 	ldw	r2,4(r17)
  c104ec:	98bfc81e 	bne	r19,r2,c10410 <__call_exitprocs+0x64>
  c104f0:	b8800017 	ldw	r2,0(r23)
  c104f4:	147fd526 	beq	r2,r17,c1044c <__call_exitprocs+0xa0>
  c104f8:	003fc506 	br	c10410 <__call_exitprocs+0x64>
  c104fc:	8c000115 	stw	r16,4(r17)
  c10500:	003fea06 	br	c104ac <__call_exitprocs+0x100>
  c10504:	2105883a 	add	r2,r4,r4
  c10508:	1485883a 	add	r2,r2,r18
  c1050c:	11000017 	ldw	r4,0(r2)
  c10510:	303ee83a 	callr	r6
  c10514:	003ff406 	br	c104e8 <__call_exitprocs+0x13c>
  c10518:	303ee83a 	callr	r6
  c1051c:	003ff206 	br	c104e8 <__call_exitprocs+0x13c>
  c10520:	88800117 	ldw	r2,4(r17)
  c10524:	1000081e 	bne	r2,zero,c10548 <__call_exitprocs+0x19c>
  c10528:	89000017 	ldw	r4,0(r17)
  c1052c:	20000726 	beq	r4,zero,c1054c <__call_exitprocs+0x1a0>
  c10530:	b9000015 	stw	r4,0(r23)
  c10534:	8809883a 	mov	r4,r17
  c10538:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  c1053c:	bc400017 	ldw	r17,0(r23)
  c10540:	883fb71e 	bne	r17,zero,c10420 <__call_exitprocs+0x74>
  c10544:	003fc506 	br	c1045c <__call_exitprocs+0xb0>
  c10548:	89000017 	ldw	r4,0(r17)
  c1054c:	882f883a 	mov	r23,r17
  c10550:	2023883a 	mov	r17,r4
  c10554:	883fb21e 	bne	r17,zero,c10420 <__call_exitprocs+0x74>
  c10558:	003fc006 	br	c1045c <__call_exitprocs+0xb0>

00c1055c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  c1055c:	defffd04 	addi	sp,sp,-12
  c10560:	df000215 	stw	fp,8(sp)
  c10564:	df000204 	addi	fp,sp,8
  c10568:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  c1056c:	e0bfff17 	ldw	r2,-4(fp)
  c10570:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  c10574:	e0bffe17 	ldw	r2,-8(fp)
  c10578:	1005003a 	cmpeq	r2,r2,zero
  c1057c:	1000021e 	bne	r2,zero,c10588 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  c10580:	002af070 	cmpltui	zero,zero,43969
  c10584:	00000106 	br	c1058c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  c10588:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  c1058c:	e037883a 	mov	sp,fp
  c10590:	df000017 	ldw	fp,0(sp)
  c10594:	dec00104 	addi	sp,sp,4
  c10598:	f800283a 	ret

00c1059c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  c1059c:	defffd04 	addi	sp,sp,-12
  c105a0:	dfc00215 	stw	ra,8(sp)
  c105a4:	df000115 	stw	fp,4(sp)
  c105a8:	df000104 	addi	fp,sp,4
  c105ac:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  c105b0:	e13fff17 	ldw	r4,-4(fp)
  c105b4:	0c1055c0 	call	c1055c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  c105b8:	003fff06 	br	c105b8 <_exit+0x1c>
  c105bc:	00000010 	cmplti	zero,zero,0
  c105c0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  c105c4:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_3+0x4b7a0>
  c105c8:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_3+0x1187c0>
  c105cc:	001b0c0b 	ldhu	zero,27696(zero)
  c105d0:	00000028 	cmpgeui	zero,zero,0
  c105d4:	00000018 	cmpnei	zero,zero,0
  c105d8:	00c0aac8 	cmpgei	r3,zero,683
  c105dc:	000005dc 	xori	zero,zero,23
  c105e0:	400e4400 	call	400e440 <__alt_mem_sram_0+0x278e440>
  c105e4:	92099170 	cmpltui	r8,r18,9797
  c105e8:	95079308 	cmpgei	r20,r18,7756
  c105ec:	97049605 	stb	fp,4696(r18)
  c105f0:	90019f03 	ldbu	zero,1660(r18)
  c105f4:	9c06940a 	0x9c06940a
  c105f8:	00000002 	0x2
  c105fc:	00000028 	cmpgeui	zero,zero,0
  c10600:	00000044 	movi	zero,1
  c10604:	00c0b0a4 	muli	r3,zero,706
  c10608:	000005b0 	cmpltui	zero,zero,22
  c1060c:	3c0e4400 	call	3c0e440 <__alt_mem_sram_0+0x238e440>
  c10610:	92099168 	cmpgeui	r8,r18,9797
  c10614:	95079308 	cmpgei	r20,r18,7756
  c10618:	9c039705 	stb	r16,3676(r19)
  c1061c:	90019f02 	0x90019f02
  c10620:	9606940a 	0x9606940a
  c10624:	00000004 	movi	zero,0
  c10628:	00c103a8 	cmpgeui	r3,zero,1038
