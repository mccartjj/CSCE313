
Fractal_cpu2.elf:     file format elf32-littlenios2
Fractal_cpu2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00d001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00d00000 paddr 0x00d00000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00d00020 paddr 0x00d00020 align 2**12
         filesz 0x00011588 memsz 0x00011588 flags r-x
    LOAD off    0x000125a8 vaddr 0x00d115a8 paddr 0x00d13178 align 2**12
         filesz 0x00001bd0 memsz 0x00001bd0 flags rw-
    LOAD off    0x00014d48 vaddr 0x00d14d48 paddr 0x00d14d48 align 2**12
         filesz 0x00000000 memsz 0x000002f8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00d00000  00d00000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00d00020  00d00020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010edc  00d001b4  00d001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000518  00d11090  00d11090  00012090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd0  00d115a8  00d13178  000125a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f8  00d14d48  00d14d48  00014d48  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00014178  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001098  00000000  00000000  000141a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001c64  00000000  00000000  00015238  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002a7b2  00000000  00000000  00016e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a21e  00000000  00000000  0004164e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00019e31  00000000  00000000  0004b86c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000021c0  00000000  00000000  000656a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002cd2  00000000  00000000  00067860  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e53a  00000000  00000000  0006a532  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00078a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000e60  00000000  00000000  00078aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007d700  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007d703  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0007d708  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0007d709  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0007d70d  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0007d711  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0007d715  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0007d720  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0007d72b  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0007d736  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0007d741  2**0
                  CONTENTS, READONLY
 28 .jdi          0000ff9d  00000000  00000000  0007d761  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000cf0fa  00000000  00000000  0008d6fe  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00d00000 l    d  .entry	00000000 .entry
00d00020 l    d  .exceptions	00000000 .exceptions
00d001b4 l    d  .text	00000000 .text
00d11090 l    d  .rodata	00000000 .rodata
00d115a8 l    d  .rwdata	00000000 .rwdata
00d14d48 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00d001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Fractal.c
00000000 l    df *ABS*	00000000 Project.c
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 ef_pow.c
00d1310c l     O .rwdata	00000008 bp
00d13114 l     O .rwdata	00000008 dp_l
00d1311c l     O .rwdata	00000008 dp_h
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_rint.c
00d1112c l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_isnan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00d020b4 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00d02a20 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00d115a8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00d03dc4 l     F .text	00000058 __sprint_r
00d112d2 l     O .rodata	00000010 blanks.3452
00d112c2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00d05e28 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00d07824 l     F .text	00000058 std
00d07930 l     F .text	00000008 __fp_lock
00d07938 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00d13134 l     O .rwdata	00000004 charset
00d11300 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00d11448 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00d0c40c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00d0c654 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00d0c6b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00d0c7b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00d0c8d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00d0c9b4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00d0cb10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00d0cd3c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00d13158 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00d0cfd8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00d11f64 l     O .rwdata	00001060 jtag_uart_2
00d12fc4 l     O .rwdata	0000003c mailbox_0
00d13000 l     O .rwdata	0000003c mailbox_1
00d1303c l     O .rwdata	0000003c mailbox_2
00d13078 l     O .rwdata	0000003c mailbox_3
00d130b4 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00d0d2e4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00d0d524 l     F .text	00000228 altera_avalon_jtag_uart_irq
00d0d74c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
00d0df20 l     F .text	0000006c alt_avalon_mutex_reg
00d0df8c l     F .text	00000060 alt_get_errno
00d0e120 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00d0e2f0 l     F .text	0000007c alt_mutex_trylock
00d0e3c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00d0ff34 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00d103ec l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00d10528 l     F .text	000000dc alt_file_locked
00d1078c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00d10e0c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00d10fc0 l     F .text	00000040 alt_sim_halt
00d00200 g     F .text	00000070 genColor
00d14d48 g     O .bss	00000008 targetArrayXYMaster
00d095e0 g     F .text	00000094 _mprec_log10
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
00d096cc g     F .text	00000088 __any_on
00d0add8 g     F .text	00000070 _isatty_r
00d11420 g     O .rodata	00000028 __mprec_tinytens
00d0cb70 g     F .text	0000006c alt_main
00d0e170 g     F .text	000000a8 altera_avalon_mailbox_pend
00d0f3e8 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00d03bc8 g     F .text	000000a0 _puts_r
00d14db0 g     O .bss	00000100 alt_irq
00d0ae48 g     F .text	00000078 _lseek_r
00d13178 g       *ABS*	00000000 __flash_rwdata_start
00d0be88 g     F .text	00000088 __eqdf2
00d15040 g       *ABS*	00000000 __alt_heap_start
00d0e218 g     F .text	000000d8 altera_avalon_mailbox_get
00d03b50 g     F .text	00000044 printf
00d0a8a4 g     F .text	00000068 __sseek
00d0788c g     F .text	000000a4 __sinit
00d0e758 g     F .text	00000024 alt_get_cpu_freq
00d00434 g     F .text	00000020 startTimer
00d08564 g     F .text	00000084 _setlocale_r
00d0798c g     F .text	00000068 __sfmoreglue
00d0cbfc g     F .text	00000020 __malloc_unlock
00d0254c g     F .text	00000174 __divsf3
00d0905c g     F .text	000000e0 memmove
00d0797c g     F .text	00000010 _cleanup
00d00b7c g     F .text	00000458 powf
00d0e484 g     F .text	00000040 altera_avalon_mutex_trylock
00d09754 g     F .text	000000bc _Balloc
00d02938 g     F .text	00000094 __fixsfsi
00d0e7bc g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00d0bf10 g     F .text	00000088 __gtdf2
00d03b40 g     F .text	00000010 __errno
00d0e77c g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00d00000 g     F .entry	0000001c __reset
00d0e520 g     F .text	0000007c altera_avalon_mutex_is_mine
00d00020 g       *ABS*	00000000 __flash_exceptions_start
00d0ad64 g     F .text	00000074 _fstat_r
00d14d6c g     O .bss	00000004 errno
00d03204 g     F .text	00000038 __make_dp
00d03600 g     F .text	0000002c __make_fp
00d14d74 g     O .bss	00000004 alt_argv
00d1b108 g       *ABS*	00000000 _gp
00d02298 g     F .text	00000070 __subsf3
00d0e95c g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00006000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
00d11de4 g     O .rwdata	00000180 alt_fd_list
00d1005c g     F .text	00000094 alt_find_dev
00d08fbc g     F .text	000000a0 memcpy
00d07970 g     F .text	0000000c _cleanup_r
00d0c0a8 g     F .text	000000f8 __floatsidf
00d104b0 g     F .text	00000078 alt_io_redirect
00d0c020 g     F .text	00000088 __ltdf2
00d11090 g       *ABS*	00000000 __DTOR_END__
00d03c68 g     F .text	00000014 puts
00d10990 g     F .text	00000020 altera_nios2_irq_init
00d09530 g     F .text	000000b0 __ratio
00d0e064 g     F .text	000000bc altera_avalon_mailbox_post
00d0ea0c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00d0d964 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00d03b94 g     F .text	00000034 _printf_r
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00d0c548 g     F .text	00000008 __udivsi3
00d0c814 g     F .text	000000c0 isatty
00d11330 g     O .rodata	000000c8 __mprec_tens
00d0e044 g     F .text	00000020 altera_avalon_mailbox_close
00d0f098 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00d08540 g     F .text	00000008 __locale_charset
00d02828 g     F .text	00000078 __lesf2
00d10b88 g     F .text	00000090 alt_icache_flush
00d14d60 g     O .bss	00000004 __malloc_top_pad
00d0e6f8 g     F .text	00000040 perf_get_num_starts
00d13130 g     O .rwdata	00000004 __mb_cur_max
00d08548 g     F .text	0000000c _localeconv_r
00d09e4c g     F .text	0000003c __i2b
00d07f24 g     F .text	0000049c __sfvwrite_r
00d01e7c g     F .text	0000001c finitef
00d0a82c g     F .text	00000070 _sbrk_r
00d0f87c g     F .text	000000d0 helper_plot_pixel
00d01e6c g     F .text	00000010 fabsf
00d0aec0 g     F .text	00000078 _read_r
00d119a8 g     O .rwdata	0000000c __lc_ctype
00d13150 g     O .rwdata	00000004 alt_max_fd
00d03940 g     F .text	00000138 __unpack_d
00d0ac40 g     F .text	00000110 _fclose_r
00d077f0 g     F .text	00000034 fflush
00d14d64 g     O .bss	00000004 __malloc_max_sbrked_mem
00d029cc g     F .text	00000054 __extendsfdf2
00d01e98 g     F .text	00000018 isnanf
00d02eb0 g     F .text	00000074 __adddf3
00d09410 g     F .text	00000120 __b2d
00d0ea40 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
00d0b514 g     F .text	000005b0 __umoddi3
00d0ca20 g     F .text	000000f0 lseek
00d0e59c g     F .text	00000058 altera_avalon_mutex_first_lock
00d13124 g     O .rwdata	00000004 __fdlib_version
00d1312c g     O .rwdata	00000004 _global_impure_ptr
00d0a1c8 g     F .text	000005f4 _realloc_r
00d15040 g       *ABS*	00000000 __bss_end
00d102f4 g     F .text	000000f8 alt_iic_isr_register
00d0eba4 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00d10884 g     F .text	0000010c alt_tick
00d0af38 g     F .text	000005dc __udivdi3
00d113f8 g     O .rodata	00000028 __mprec_bigtens
00d0a0a8 g     F .text	00000120 __s2b
00d0c278 g     F .text	00000194 __floatunsidf
00d09330 g     F .text	00000060 __mcmp
00d00454 g     F .text	00000040 endTimeAndPrint
00d07958 g     F .text	00000018 __fp_lock_all
00d102ac g     F .text	00000048 alt_ic_irq_enabled
00d107ec g     F .text	00000098 alt_alarm_stop
00d14d7c g     O .bss	00000004 alt_irq_active
00d000ec g     F .exceptions	000000c8 alt_irq_handler
00d003d0 g     F .text	00000020 FloatToFixed
00d11dbc g     O .rwdata	00000028 alt_dev_null
00d004a0 g     F .text	000001ac barrier
00d0e36c g     F .text	00000058 altera_avalon_mutex_open
00d01c5c g     F .text	00000210 rint
00d03490 g     F .text	000000c8 __unpack_f
00d0fe3c g     F .text	00000044 alt_dcache_flush_all
00d091fc g     F .text	00000070 __hi0bits
00d0f7b8 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
00d0c1a0 g     F .text	000000d8 __fixdfsi
00d13178 g       *ABS*	00000000 __ram_rwdata_end
00d13148 g     O .rwdata	00000008 alt_dev_list
00d0ceb8 g     F .text	00000120 write
00d0f94c g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00d02738 g     F .text	00000078 __gtsf2
00d13164 g     O .rwdata	00000008 alt_mutex_list
00d115a8 g       *ABS*	00000000 __ram_rodata_end
00d0c6e0 g     F .text	000000d4 fstat
00d09f88 g     F .text	00000120 __pow5mult
00d14d54 g     O .bss	00000004 __nlocale_changed
00d0c550 g     F .text	00000008 __umodsi3
00d15040 g       *ABS*	00000000 end
00d03330 g     F .text	00000160 __pack_f
00d14d50 g     O .bss	00000004 myPixelBuffer
00d0d464 g     F .text	000000c0 altera_avalon_jtag_uart_init
00d1108c g       *ABS*	00000000 __CTOR_LIST__
00e50000 g       *ABS*	00000000 __alt_stack_pointer
00d032b0 g     F .text	00000080 __clzsi2
00d0db88 g     F .text	00000240 altera_avalon_jtag_uart_write
00d0ddc8 g     F .text	00000158 alt_avalon_mailbox_init
00d0787c g     F .text	00000004 __sfp_lock_acquire
00d08ed8 g     F .text	000000e4 memchr
00d03e1c g     F .text	00001eac ___vfprintf_internal_r
00d03cf0 g     F .text	00000060 _sprintf_r
00d07c10 g     F .text	00000314 _free_r
00d10e10 g     F .text	000001b0 __call_exitprocs
00d14d58 g     O .bss	00000004 __mlocale_changed
00d1313c g     O .rwdata	00000004 __malloc_sbrk_base
00d001b4 g     F .text	0000004c _start
00d14d80 g     O .bss	00000004 _alt_tick_rate
00d09b18 g     F .text	0000014c __lshift
00d14d84 g     O .bss	00000004 _alt_nticks
00d0cc1c g     F .text	00000120 read
00d0d06c g     F .text	00000278 alt_sys_init
00d028a0 g     F .text	00000098 __floatsisf
00d003f8 g     F .text	0000003c fixedPointMultiply64
00d10cd8 g     F .text	00000134 __register_exitproc
00d0e4c4 g     F .text	0000005c altera_avalon_mutex_unlock
00d09c64 g     F .text	000001e8 __multiply
00d0d7fc g     F .text	00000074 altera_avalon_jtag_uart_close
00d115a8 g       *ABS*	00000000 __ram_rwdata_start
00d11090 g       *ABS*	00000000 __ram_rodata_start
00d14d88 g     O .bss	00000028 __malloc_current_mallinfo
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00d026c0 g     F .text	00000078 __eqsf2
00d09810 g     F .text	0000017c __d2b
00d0d31c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00d10ad0 g     F .text	000000b8 alt_get_fd
00d03a78 g     F .text	000000c8 __fpcmp_parts_d
00d0abd0 g     F .text	00000070 _close_r
00d00690 g     F .text	0000046c drawFrame
00d0e5f4 g     F .text	000000b0 perf_get_section_time
00d10c64 g     F .text	00000074 memcmp
00d0d3cc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00d15040 g       *ABS*	00000000 __alt_stack_base
00d0d414 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00d05cec g     F .text	0000013c __swsetup_r
00d02f24 g     F .text	00000258 __divdf3
00d079f4 g     F .text	000000f0 __sfp
00d09674 g     F .text	00000058 __copybits
00d0e6a4 g     F .text	00000054 perf_get_total_time
00d119b4 g     O .rwdata	00000408 __malloc_av_
00d07888 g     F .text	00000004 __sinit_lock_release
00d0bac4 g     F .text	000003c4 __muldf3
00d00fd4 g     F .text	00000b14 __ieee754_powf
00d0a988 g     F .text	00000060 __sread
00d1113c g     O .rodata	00000010 __thenan_sf
00d109b0 g     F .text	00000120 alt_find_file
00d0fe80 g     F .text	000000b4 alt_dev_llist_insert
00d0cbdc g     F .text	00000020 __malloc_lock
00d0cdfc g     F .text	000000bc sbrk
00d01eb8 g     F .text	0000014c scalbnf
00d075f4 g     F .text	000001fc _fflush_r
00d0ab1c g     F .text	000000b4 _calloc_r
00d003f0 g     F .text	00000008 fixedPointMultiply32
00d14d48 g       *ABS*	00000000 __bss_start
00d0913c g     F .text	00000098 memset
00d01ae8 g     F .text	0000016c __ieee754_sqrtf
00d00afc g     F .text	00000080 main
00d14d78 g     O .bss	00000004 alt_envp
00d14d68 g     O .bss	00000004 __malloc_max_total_mem
00d0e9b4 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
00d0d374 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00d027b0 g     F .text	00000078 __ltsf2
00d0a89c g     F .text	00000008 __sclose
00d01c54 g     F .text	00000008 matherr
00e50000 g       *ABS*	00000000 __alt_heap_limit
00d0ad50 g     F .text	00000014 fclose
00d0323c g     F .text	00000074 __truncdfsf2
00d14eb0 g     O .bss	00000190 _atexit0
00d0e444 g     F .text	00000040 altera_avalon_mutex_lock
00d06040 g     F .text	000015b4 _dtoa_r
00d08798 g     F .text	00000740 _malloc_r
00d13154 g     O .rwdata	00000004 alt_errno
00d08488 g     F .text	000000b8 _fwalk
00d0c488 g     F .text	00000060 __divsi3
00d1114c g     O .rodata	00000014 __thenan_df
00d07ae4 g     F .text	0000012c _malloc_trim_r
00d11090 g       *ABS*	00000000 __CTOR_END__
00d0236c g     F .text	000001e0 __mulsf3
00d0a9e8 g     F .text	000000bc strcmp
00d11090 g       *ABS*	00000000 __flash_rodata_start
00d11090 g       *ABS*	00000000 __DTOR_LIST__
00d0317c g     F .text	00000088 __nedf2
00d0d038 g     F .text	00000034 alt_irq_init
00d0cd9c g     F .text	00000060 alt_release_fd
00d02004 g     F .text	00000018 copysignf
00d03c7c g     F .text	00000074 sprintf
00d11160 g     O .rodata	00000100 __clz_tab
00d14d5c g     O .bss	00000004 _PathLocale
00d10c18 g     F .text	00000014 atexit
00d0aaa4 g     F .text	00000078 _write_r
00d085e8 g     F .text	0000001c setlocale
00d01eb0 g     F .text	00000008 nanf
00d13128 g     O .rwdata	00000004 _impure_ptr
00d14d70 g     O .bss	00000004 alt_argc
00d0fff8 g     F .text	00000064 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00d00020 g       .exceptions	00000000 alt_irq_entry
00d09390 g     F .text	00000080 __ulp
00d0a7bc g     F .text	00000040 __isinfd
00d07940 g     F .text	00000018 __fp_unlock_all
00d1315c g     O .rwdata	00000008 alt_mailbox_list
00d0064c g     F .text	00000044 setup
00d13140 g     O .rwdata	00000008 alt_fs_list
00d00020 g       *ABS*	00000000 __ram_exceptions_start
00d08554 g     F .text	00000010 localeconv
00d10120 g     F .text	00000050 alt_ic_isr_register
00d13178 g       *ABS*	00000000 _edata
00d15040 g       *ABS*	00000000 _end
00d001b4 g       *ABS*	00000000 __ram_exceptions_end
00d0d870 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00d1020c g     F .text	000000a0 alt_ic_irq_disable
00d0a90c g     F .text	0000007c __swrite
00d13138 g     O .rwdata	00000004 __malloc_trim_threshold
00d0e738 g     F .text	00000020 alt_get_performance_counter_base
00d10c2c g     F .text	00000038 exit
00d083c0 g     F .text	000000c8 _fwalk_reent
00d0998c g     F .text	0000018c __mdiff
00d00270 g     F .text	00000160 mandelbrot
00d0c4e8 g     F .text	00000060 __modsi3
00e50000 g       *ABS*	00000000 __alt_data_end
00d00020 g     F .exceptions	00000000 alt_exception
00d07880 g     F .text	00000004 __sfp_lock_release
00d0dfec g     F .text	00000058 altera_avalon_mailbox_open
00d03558 g     F .text	000000a8 __fpcmp_parts_f
00d11000 g     F .text	00000020 _exit
00d0a7fc g     F .text	00000030 __isnand
00d0fce8 g     F .text	00000154 alt_alarm_start
00d0201c g     F .text	00000098 __muldi3
00d08604 g     F .text	00000194 __smakebuf_r
00d03d50 g     F .text	00000074 strlen
00d10604 g     F .text	00000188 open
00d0bf98 g     F .text	00000088 __gedf2
00d00494 g     F .text	0000000c clearScreen
00d100f0 g     F .text	00000030 alt_icache_flush_all
00d1316c g     O .rwdata	00000004 alt_priority_mask
00d10170 g     F .text	0000009c alt_ic_irq_enable
00d05cc8 g     F .text	00000024 __vfprintf_internal
00d0e424 g     F .text	00000020 altera_avalon_mutex_close
00d02e30 g     F .text	00000080 __subdf3
00d0926c g     F .text	000000c4 __lo0bits
00d13108 g     O .rwdata	00000004 targetArrayXY
00d13170 g     O .rwdata	00000008 alt_alarm_list
00d0ff94 g     F .text	00000064 _do_ctors
00d0c558 g     F .text	000000fc close
00d02308 g     F .text	00000064 __addsf3
00d0c934 g     F .text	00000080 alt_load
00d0362c g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00d07884 g     F .text	00000004 __sinit_lock_acquire
00d09e88 g     F .text	00000100 __multadd
00d091d4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00d00000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  d00000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  d00004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  d00008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  d0000c:	00bffd16 	blt	zero,r2,d00004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  d00010:	00403434 	movhi	at,208
    ori r1, r1, %lo(_start)
  d00014:	08406d14 	ori	at,at,436
    jmp r1
  d00018:	0800683a 	jmp	at
  d0001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

00d00020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  d00020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  d00024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  d00028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  d0002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  d00030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  d00034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  d00038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  d0003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  d00040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  d00044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  d00048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  d0004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  d00050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  d00054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  d00058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  d0005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  d00060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  d00064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  d00068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  d0006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  d00070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  d00074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  d00078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  d0007c:	10000326 	beq	r2,zero,d0008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  d00080:	20000226 	beq	r4,zero,d0008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  d00084:	0d000ec0 	call	d000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  d00088:	00000306 	br	d00098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  d0008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  d00090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  d00094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  d00098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  d0009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  d000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  d000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  d000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  d000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  d000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  d000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  d000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  d000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  d000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  d000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  d000e8:	ef80083a 	eret

00d000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  d000ec:	defff904 	addi	sp,sp,-28
  d000f0:	dfc00615 	stw	ra,24(sp)
  d000f4:	df000515 	stw	fp,20(sp)
  d000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  d000fc:	0005313a 	rdctl	r2,ipending
  d00100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  d00104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  d00108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  d0010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  d00110:	00800044 	movi	r2,1
  d00114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  d00118:	e0ffff17 	ldw	r3,-4(fp)
  d0011c:	e0bffe17 	ldw	r2,-8(fp)
  d00120:	1884703a 	and	r2,r3,r2
  d00124:	1005003a 	cmpeq	r2,r2,zero
  d00128:	1000161e 	bne	r2,zero,d00184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  d0012c:	e0bffd17 	ldw	r2,-12(fp)
  d00130:	00c03474 	movhi	r3,209
  d00134:	18d36c04 	addi	r3,r3,19888
  d00138:	100490fa 	slli	r2,r2,3
  d0013c:	10c5883a 	add	r2,r2,r3
  d00140:	11400017 	ldw	r5,0(r2)
  d00144:	e0bffd17 	ldw	r2,-12(fp)
  d00148:	00c03474 	movhi	r3,209
  d0014c:	18d36c04 	addi	r3,r3,19888
  d00150:	100490fa 	slli	r2,r2,3
  d00154:	10c5883a 	add	r2,r2,r3
  d00158:	10800104 	addi	r2,r2,4
  d0015c:	11000017 	ldw	r4,0(r2)
  d00160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  d00164:	0005313a 	rdctl	r2,ipending
  d00168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  d0016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  d00170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  d00174:	e0bfff17 	ldw	r2,-4(fp)
  d00178:	1004c03a 	cmpne	r2,r2,zero
  d0017c:	103fe31e 	bne	r2,zero,d0010c <alt_irq_handler+0x20>
  d00180:	00000706 	br	d001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  d00184:	e0bffe17 	ldw	r2,-8(fp)
  d00188:	1085883a 	add	r2,r2,r2
  d0018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  d00190:	e0bffd17 	ldw	r2,-12(fp)
  d00194:	10800044 	addi	r2,r2,1
  d00198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  d0019c:	003fde06 	br	d00118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  d001a0:	e037883a 	mov	sp,fp
  d001a4:	dfc00117 	ldw	ra,4(sp)
  d001a8:	df000017 	ldw	fp,0(sp)
  d001ac:	dec00204 	addi	sp,sp,8
  d001b0:	f800283a 	ret

Disassembly of section .text:

00d001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  d001b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
  d001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  d001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  d001c0:	00bffd16 	blt	zero,r2,d001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  d001c4:	06c03974 	movhi	sp,229
    ori sp, sp, %lo(__alt_stack_pointer)
  d001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  d001cc:	06803474 	movhi	gp,209
    ori gp, gp, %lo(_gp)
  d001d0:	d6ac4214 	ori	gp,gp,45320
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  d001d4:	00803474 	movhi	r2,209
    ori r2, r2, %lo(__bss_start)
  d001d8:	10935214 	ori	r2,r2,19784

    movhi r3, %hi(__bss_end)
  d001dc:	00c03474 	movhi	r3,209
    ori r3, r3, %lo(__bss_end)
  d001e0:	18d41014 	ori	r3,r3,20544

    beq r2, r3, 1f
  d001e4:	10c00326 	beq	r2,r3,d001f4 <_start+0x40>

0:
    stw zero, (r2)
  d001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  d001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  d001f0:	10fffd36 	bltu	r2,r3,d001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  d001f4:	0d0c9340 	call	d0c934 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  d001f8:	0d0cb700 	call	d0cb70 <alt_main>

00d001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  d001fc:	003fff06 	br	d001fc <alt_after_alt_main>

00d00200 <genColor>:
}

//makes the color for display
int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  d00200:	00801904 	movi	r2,100
		color = black;
	}
	else {
		int red = iter;
		int green = iter * 6;
  d00204:	200b883a 	mov	r5,r4
  d00208:	018007c4 	movi	r6,31
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  d0020c:	01c00fc4 	movi	r7,63
}

//makes the color for display
int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  d00210:	0007883a 	mov	r3,zero
  d00214:	20800b26 	beq	r4,r2,d00244 <genColor+0x44>
		color = black;
	}
	else {
		int red = iter;
		int green = iter * 6;
  d00218:	210001a4 	muli	r4,r4,6
  d0021c:	31400d16 	blt	r6,r5,d00254 <genColor+0x54>
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  d00220:	280492fa 	slli	r2,r5,11
  d00224:	29403fcc 	andi	r5,r5,255
  d00228:	10fe000c 	andi	r3,r2,63488
  d0022c:	2005883a 	mov	r2,r4
  d00230:	39000616 	blt	r7,r4,d0024c <genColor+0x4c>
  d00234:	1004917a 	slli	r2,r2,5
  d00238:	1946b03a 	or	r3,r3,r5
  d0023c:	1081f80c 	andi	r2,r2,2016
  d00240:	10c6b03a 	or	r3,r2,r3
	}
	return color;
}
  d00244:	1805883a 	mov	r2,r3
  d00248:	f800283a 	ret
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  d0024c:	3805883a 	mov	r2,r7
  d00250:	003ff806 	br	d00234 <genColor+0x34>
	if (iter == maxIter) {
		color = black;
	}
	else {
		int red = iter;
		int green = iter * 6;
  d00254:	300b883a 	mov	r5,r6
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  d00258:	280492fa 	slli	r2,r5,11
  d0025c:	29403fcc 	andi	r5,r5,255
  d00260:	10fe000c 	andi	r3,r2,63488
  d00264:	2005883a 	mov	r2,r4
  d00268:	393ff20e 	bge	r7,r4,d00234 <genColor+0x34>
  d0026c:	003ff706 	br	d0024c <genColor+0x4c>

00d00270 <mandelbrot>:
	}
	return color;
}

//this calculates the math to find if a location is in the Mandelbrot set
int mandelbrot(long x0, long y0, long *xOut, long *yOut) {
  d00270:	defff304 	addi	sp,sp,-52
  d00274:	df000b15 	stw	fp,44(sp)
  d00278:	ddc00a15 	stw	r23,40(sp)
  d0027c:	dd400815 	stw	r21,32(sp)
  d00280:	dcc00615 	stw	r19,24(sp)
  d00284:	dc800515 	stw	r18,20(sp)
  d00288:	dc400415 	stw	r17,16(sp)
  d0028c:	dc000315 	stw	r16,12(sp)
  d00290:	0025883a 	mov	r18,zero
  d00294:	0021883a 	mov	r16,zero
  d00298:	2839883a 	mov	fp,r5
  d0029c:	0017883a 	mov	r11,zero
  d002a0:	0023883a 	mov	r17,zero
  d002a4:	002b883a 	mov	r21,zero
  d002a8:	002f883a 	mov	r23,zero
  d002ac:	0027883a 	mov	r19,zero
  d002b0:	dfc00c15 	stw	ra,48(sp)
  d002b4:	dd800915 	stw	r22,36(sp)
  d002b8:	dd000715 	stw	r20,28(sp)
  d002bc:	d9000015 	stw	r4,0(sp)
  d002c0:	d9800115 	stw	r6,4(sp)
  d002c4:	d9c00215 	stw	r7,8(sp)
  d002c8:	00000206 	br	d002d4 <mandelbrot+0x64>
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  d002cc:	00801904 	movi	r2,100
  d002d0:	b8802e26 	beq	r23,r2,d0038c <mandelbrot+0x11c>
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  d002d4:	9008d17a 	srli	r4,r18,5
  d002d8:	980696fa 	slli	r3,r19,27
  d002dc:	900496fa 	slli	r2,r18,27

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  d002e0:	da800017 	ldw	r10,0(sp)
  d002e4:	aad7c83a 	sub	r11,r21,r11
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  d002e8:	20c6b03a 	or	r3,r4,r3

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  d002ec:	5aad883a 	add	r22,r11,r10
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  d002f0:	1010d6ba 	srli	r8,r2,26
  d002f4:	181491ba 	slli	r10,r3,6
  d002f8:	880b883a 	mov	r5,r17
  d002fc:	8009883a 	mov	r4,r16
  d00300:	5210b03a 	or	r8,r10,r8
  d00304:	4005d7fa 	srai	r2,r8,31
  d00308:	400d883a 	mov	r6,r8
	return (long long) a * (long long) b;
}

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  d0030c:	b027d7fa 	srai	r19,r22,31
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  d00310:	100f883a 	mov	r7,r2
  d00314:	0d0201c0 	call	d0201c <__muldi3>
  d00318:	180c91ba 	slli	r6,r3,6
  d0031c:	1004d6ba 	srli	r2,r2,26

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  d00320:	b009883a 	mov	r4,r22
  d00324:	980b883a 	mov	r5,r19
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  d00328:	3084b03a 	or	r2,r6,r2

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  d0032c:	980f883a 	mov	r7,r19
  d00330:	b00d883a 	mov	r6,r22
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  d00334:	e0a9883a 	add	r20,fp,r2

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  d00338:	0d0201c0 	call	d0201c <__muldi3>
  d0033c:	180c91ba 	slli	r6,r3,6
	return (long long) a * (long long) b;
}

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  d00340:	a023d7fa 	srai	r17,r20,31

	return c >> 26;
  d00344:	1004d6ba 	srli	r2,r2,26
  d00348:	a009883a 	mov	r4,r20
  d0034c:	880b883a 	mov	r5,r17
  d00350:	3084b03a 	or	r2,r6,r2
  d00354:	880f883a 	mov	r7,r17
  d00358:	a00d883a 	mov	r6,r20
  d0035c:	102b883a 	mov	r21,r2
  d00360:	0d0201c0 	call	d0201c <__muldi3>
  d00364:	180c91ba 	slli	r6,r3,6
  d00368:	1004d6ba 	srli	r2,r2,26
		 if (cpu == 3) {
		 endTimeAndPrint();
		 }//*/

		x = xtemp;
		iter++;
  d0036c:	bdc00044 	addi	r23,r23,1
	return (long long) a * (long long) b;
}

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  d00370:	b025883a 	mov	r18,r22

	return c >> 26;
  d00374:	3084b03a 	or	r2,r6,r2
  d00378:	1017883a 	mov	r11,r2
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  d0037c:	a889883a 	add	r4,r21,r2
  d00380:	00840034 	movhi	r2,4096
	return (long long) a * (long long) b;
}

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  d00384:	a021883a 	mov	r16,r20
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  d00388:	113fd00e 	bge	r2,r4,d002cc <mandelbrot+0x5c>

		x = xtemp;
		iter++;

	}
	*xOut = x;
  d0038c:	d8800117 	ldw	r2,4(sp)
	*yOut = y;
  d00390:	da800217 	ldw	r10,8(sp)

		x = xtemp;
		iter++;

	}
	*xOut = x;
  d00394:	15800015 	stw	r22,0(r2)
	*yOut = y;

	return iter;
}
  d00398:	b805883a 	mov	r2,r23
		x = xtemp;
		iter++;

	}
	*xOut = x;
	*yOut = y;
  d0039c:	55000015 	stw	r20,0(r10)

	return iter;
}
  d003a0:	dfc00c17 	ldw	ra,48(sp)
  d003a4:	df000b17 	ldw	fp,44(sp)
  d003a8:	ddc00a17 	ldw	r23,40(sp)
  d003ac:	dd800917 	ldw	r22,36(sp)
  d003b0:	dd400817 	ldw	r21,32(sp)
  d003b4:	dd000717 	ldw	r20,28(sp)
  d003b8:	dcc00617 	ldw	r19,24(sp)
  d003bc:	dc800517 	ldw	r18,20(sp)
  d003c0:	dc400417 	ldw	r17,16(sp)
  d003c4:	dc000317 	ldw	r16,12(sp)
  d003c8:	dec00d04 	addi	sp,sp,52
  d003cc:	f800283a 	ret

00d003d0 <FloatToFixed>:
	cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);

	printf("Cycles : %llu \n\n", (cycles));
}

long FloatToFixed(float fixMe) {
  d003d0:	00934034 	movhi	r2,19712
  d003d4:	deffff04 	addi	sp,sp,-4
  d003d8:	2089ff32 	custom	252,r4,r4,r2
  d003dc:	dfc00015 	stw	ra,0(sp)
  d003e0:	0d029380 	call	d02938 <__fixsfsi>
	return (long) (fixMe * ((float) 134217728));
}
  d003e4:	dfc00017 	ldw	ra,0(sp)
  d003e8:	dec00104 	addi	sp,sp,4
  d003ec:	f800283a 	ret

00d003f0 <fixedPointMultiply32>:

long fixedPointMultiply32(long a, long b) {
	return (long long) a * (long long) b;
}
  d003f0:	2145383a 	mul	r2,r4,r5
  d003f4:	f800283a 	ret

00d003f8 <fixedPointMultiply64>:

long fixedPointMultiply64(long a, long b) {
  d003f8:	2813d7fa 	srai	r9,r5,31
  d003fc:	2007d7fa 	srai	r3,r4,31
  d00400:	2811883a 	mov	r8,r5
  d00404:	deffff04 	addi	sp,sp,-4
  d00408:	400d883a 	mov	r6,r8
  d0040c:	180b883a 	mov	r5,r3
  d00410:	480f883a 	mov	r7,r9
  d00414:	dfc00015 	stw	ra,0(sp)
  d00418:	0d0201c0 	call	d0201c <__muldi3>
  d0041c:	180c91ba 	slli	r6,r3,6
  d00420:	1004d6ba 	srli	r2,r2,26
  d00424:	3084b03a 	or	r2,r6,r2

	long long c = (long long) a * (long long) b;

	return c >> 26;
}
  d00428:	dfc00017 	ldw	ra,0(sp)
  d0042c:	dec00104 	addi	sp,sp,4
  d00430:	f800283a 	ret

00d00434 <startTimer>:
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
}

//starts the performance counter
void startTimer(void) {
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
  d00434:	01000044 	movi	r4,1
  d00438:	0005883a 	mov	r2,zero
  d0043c:	11000035 	stwio	r4,0(r2)
	PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
  d00440:	00c00104 	movi	r3,4
  d00444:	18000035 	stwio	zero,0(r3)
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
  d00448:	00800504 	movi	r2,20
  d0044c:	10000035 	stwio	zero,0(r2)
}
  d00450:	f800283a 	ret

00d00454 <endTimeAndPrint>:

//stops the timer and prints out the number of cycles
void endTimeAndPrint(void) {
  d00454:	deffff04 	addi	sp,sp,-4
	unsigned long long cycles = 0;

	PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
  d00458:	00800404 	movi	r2,16
	PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
}

//stops the timer and prints out the number of cycles
void endTimeAndPrint(void) {
  d0045c:	dfc00015 	stw	ra,0(sp)
	unsigned long long cycles = 0;

	PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
  d00460:	10000035 	stwio	zero,0(r2)
	PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
  d00464:	0007883a 	mov	r3,zero
  d00468:	18000035 	stwio	zero,0(r3)
	cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);
  d0046c:	0009883a 	mov	r4,zero
  d00470:	01400044 	movi	r5,1
  d00474:	0d0e5f40 	call	d0e5f4 <perf_get_section_time>

	printf("Cycles : %llu \n\n", (cycles));
  d00478:	180d883a 	mov	r6,r3
  d0047c:	01003474 	movhi	r4,209
  d00480:	21042404 	addi	r4,r4,4240
  d00484:	100b883a 	mov	r5,r2
}
  d00488:	dfc00017 	ldw	ra,0(sp)
  d0048c:	dec00104 	addi	sp,sp,4

	PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
	PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
	cycles = perf_get_section_time((void*) PERFORMANCE_COUNTER_0_BASE, 1);

	printf("Cycles : %llu \n\n", (cycles));
  d00490:	0d03b501 	jmpi	d03b50 <printf>

00d00494 <clearScreen>:
	}
}

void clearScreen(void) {
	//clears the part of the screen controlled by the pixel buffer
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
  d00494:	d1271217 	ldw	r4,-25528(gp)
  d00498:	000b883a 	mov	r5,zero
  d0049c:	0d0ea401 	jmpi	d0ea40 <alt_up_pixel_buffer_dma_clear_screen>

00d004a0 <barrier>:
		}
	}

}

void barrier(alt_u8 barrierNum) {
  d004a0:	deffe104 	addi	sp,sp,-124
  d004a4:	dfc01e15 	stw	ra,120(sp)
  d004a8:	dd401d15 	stw	r21,116(sp)
  d004ac:	dd001c15 	stw	r20,112(sp)
  d004b0:	dcc01b15 	stw	r19,108(sp)
  d004b4:	dc801a15 	stw	r18,104(sp)
  d004b8:	dc401915 	stw	r17,100(sp)
  d004bc:	dc001815 	stw	r16,96(sp)
	alt_u32 msg;
	alt_mailbox_dev *mb[NUM_CPUS];
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
  d004c0:	0027317a 	rdctl	r19,cpuid
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  d004c4:	dc400404 	addi	r17,sp,16
  d004c8:	01403474 	movhi	r5,209
  d004cc:	29442904 	addi	r5,r5,4260
  d004d0:	000d883a 	mov	r6,zero
  d004d4:	8809883a 	mov	r4,r17
  d004d8:	0d03c7c0 	call	d03c7c <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  d004dc:	8809883a 	mov	r4,r17
  d004e0:	0d0dfec0 	call	d0dfec <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  d004e4:	05400044 	movi	r21,1
  d004e8:	01403474 	movhi	r5,209
  d004ec:	29442904 	addi	r5,r5,4260
  d004f0:	a80d883a 	mov	r6,r21
  d004f4:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  d004f8:	d8800015 	stw	r2,0(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  d004fc:	0d03c7c0 	call	d03c7c <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  d00500:	8809883a 	mov	r4,r17
  d00504:	0d0dfec0 	call	d0dfec <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  d00508:	05000084 	movi	r20,2
  d0050c:	01403474 	movhi	r5,209
  d00510:	29442904 	addi	r5,r5,4260
  d00514:	a00d883a 	mov	r6,r20
  d00518:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  d0051c:	d8800115 	stw	r2,4(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  d00520:	0d03c7c0 	call	d03c7c <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  d00524:	8809883a 	mov	r4,r17
  d00528:	0d0dfec0 	call	d0dfec <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  d0052c:	048000c4 	movi	r18,3
  d00530:	01403474 	movhi	r5,209
  d00534:	29442904 	addi	r5,r5,4260
  d00538:	900d883a 	mov	r6,r18
  d0053c:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  d00540:	d8800215 	stw	r2,8(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  d00544:	0d03c7c0 	call	d03c7c <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  d00548:	8809883a 	mov	r4,r17
  d0054c:	0d0dfec0 	call	d0dfec <altera_avalon_mailbox_open>
  d00550:	1021883a 	mov	r16,r2
  d00554:	d8800315 	stw	r2,12(sp)
  d00558:	9c803026 	beq	r19,r18,d0061c <barrier+0x17c>
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  d0055c:	98000426 	beq	r19,zero,d00570 <barrier+0xd0>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  d00560:	d9000017 	ldw	r4,0(sp)
  d00564:	000b883a 	mov	r5,zero
  d00568:	0d0e0640 	call	d0e064 <altera_avalon_mailbox_post>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  d0056c:	9d400426 	beq	r19,r21,d00580 <barrier+0xe0>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  d00570:	d9000117 	ldw	r4,4(sp)
  d00574:	000b883a 	mov	r5,zero
  d00578:	0d0e0640 	call	d0e064 <altera_avalon_mailbox_post>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  d0057c:	9d000326 	beq	r19,r20,d0058c <barrier+0xec>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  d00580:	d9000217 	ldw	r4,8(sp)
  d00584:	000b883a 	mov	r5,zero
  d00588:	0d0e0640 	call	d0e064 <altera_avalon_mailbox_post>
  d0058c:	8009883a 	mov	r4,r16
  d00590:	000b883a 	mov	r5,zero
  d00594:	0d0e0640 	call	d0e064 <altera_avalon_mailbox_post>
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  d00598:	9cc5883a 	add	r2,r19,r19
  d0059c:	1085883a 	add	r2,r2,r2
  d005a0:	16c5883a 	add	r2,r2,sp
  d005a4:	14400017 	ldw	r17,0(r2)
  d005a8:	8809883a 	mov	r4,r17
  d005ac:	0d0e1700 	call	d0e170 <altera_avalon_mailbox_pend>

		if (msg != 0) {
  d005b0:	10000126 	beq	r2,zero,d005b8 <barrier+0x118>
			targetArrayXY = (long *) msg;
  d005b4:	d0a00015 	stw	r2,-32768(gp)
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  d005b8:	8809883a 	mov	r4,r17
  d005bc:	0d0e1700 	call	d0e170 <altera_avalon_mailbox_pend>

		if (msg != 0) {
  d005c0:	10000126 	beq	r2,zero,d005c8 <barrier+0x128>
			targetArrayXY = (long *) msg;
  d005c4:	d0a00015 	stw	r2,-32768(gp)
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  d005c8:	8809883a 	mov	r4,r17
  d005cc:	0d0e1700 	call	d0e170 <altera_avalon_mailbox_pend>

		if (msg != 0) {
  d005d0:	10000126 	beq	r2,zero,d005d8 <barrier+0x138>
			targetArrayXY = (long *) msg;
  d005d4:	d0a00015 	stw	r2,-32768(gp)
		}
	}
	for (i = 0; i < NUM_CPUS; i++) {
		altera_avalon_mailbox_close(mb[i]);
  d005d8:	d9000017 	ldw	r4,0(sp)
  d005dc:	0d0e0440 	call	d0e044 <altera_avalon_mailbox_close>
  d005e0:	d9000117 	ldw	r4,4(sp)
  d005e4:	0d0e0440 	call	d0e044 <altera_avalon_mailbox_close>
  d005e8:	d9000217 	ldw	r4,8(sp)
  d005ec:	0d0e0440 	call	d0e044 <altera_avalon_mailbox_close>
  d005f0:	8009883a 	mov	r4,r16
  d005f4:	0d0e0440 	call	d0e044 <altera_avalon_mailbox_close>
	}
}
  d005f8:	dfc01e17 	ldw	ra,120(sp)
  d005fc:	dd401d17 	ldw	r21,116(sp)
  d00600:	dd001c17 	ldw	r20,112(sp)
  d00604:	dcc01b17 	ldw	r19,108(sp)
  d00608:	dc801a17 	ldw	r18,104(sp)
  d0060c:	dc401917 	ldw	r17,100(sp)
  d00610:	dc001817 	ldw	r16,96(sp)
  d00614:	dec01f04 	addi	sp,sp,124
  d00618:	f800283a 	ret
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
  d0061c:	0025883a 	mov	r18,zero
  d00620:	d823883a 	mov	r17,sp
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
  d00624:	89000017 	ldw	r4,0(r17)
  d00628:	d1671004 	addi	r5,gp,-25536
	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
  d0062c:	94800044 	addi	r18,r18,1
		if (i != cpu) {

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
  d00630:	0d0e0640 	call	d0e064 <altera_avalon_mailbox_post>
	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
  d00634:	00800104 	movi	r2,4
  d00638:	8c400104 	addi	r17,r17,4
  d0063c:	90bfd626 	beq	r18,r2,d00598 <barrier+0xf8>
		if (i != cpu) {
  d00640:	008000c4 	movi	r2,3
  d00644:	90bff71e 	bne	r18,r2,d00624 <barrier+0x184>
  d00648:	003fd306 	br	d00598 <barrier+0xf8>

00d0064c <setup>:
long targetArrayXYMaster[2] = { 0, 0 };
volatile long *targetArrayXY = targetArrayXYMaster;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  d0064c:	deffff04 	addi	sp,sp,-4
		alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
	}
	*buffaddr = pixel_buffer_memory;
#endif

	barrier(0);
  d00650:	0009883a 	mov	r4,zero
long targetArrayXYMaster[2] = { 0, 0 };
volatile long *targetArrayXY = targetArrayXYMaster;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  d00654:	dfc00015 	stw	ra,0(sp)
		alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
	}
	*buffaddr = pixel_buffer_memory;
#endif

	barrier(0);
  d00658:	0d004a00 	call	d004a0 <barrier>

#ifndef MASTER
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  d0065c:	01003474 	movhi	r4,209
  d00660:	21042d04 	addi	r4,r4,4276
  d00664:	0d0e77c0 	call	d0e77c <alt_up_pixel_buffer_dma_open_dev>

	myPixelBuffer->back_buffer_start_address = (unsigned int) *buffaddr;
  d00668:	00cc7f44 	movi	r3,12797
  d0066c:	19000017 	ldw	r4,0(r3)
#endif

	barrier(0);

#ifndef MASTER
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  d00670:	d0a71215 	stw	r2,-25528(gp)

	myPixelBuffer->back_buffer_start_address = (unsigned int) *buffaddr;
#endif

	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
  d00674:	00c00044 	movi	r3,1
	barrier(0);

#ifndef MASTER
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");

	myPixelBuffer->back_buffer_start_address = (unsigned int) *buffaddr;
  d00678:	11000c15 	stw	r4,48(r2)
#endif

	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
  d0067c:	0005883a 	mov	r2,zero
  d00680:	10c00035 	stwio	r3,0(r2)
}
  d00684:	dfc00017 	ldw	ra,0(sp)
  d00688:	dec00104 	addi	sp,sp,4
  d0068c:	f800283a 	ret

00d00690 <drawFrame>:
	*yOut = y;

	return iter;
}

void drawFrame(int zoom) {
  d00690:	deffe404 	addi	sp,sp,-112
  d00694:	dfc01b15 	stw	ra,108(sp)
  d00698:	df001a15 	stw	fp,104(sp)
  d0069c:	ddc01915 	stw	r23,100(sp)
  d006a0:	dd801815 	stw	r22,96(sp)
  d006a4:	dd401715 	stw	r21,92(sp)
  d006a8:	dd001615 	stw	r20,88(sp)
  d006ac:	dcc01515 	stw	r19,84(sp)
  d006b0:	dc801415 	stw	r18,80(sp)
  d006b4:	dc401315 	stw	r17,76(sp)
  d006b8:	dc001215 	stw	r16,72(sp)
	int i;
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
  d006bc:	0007317a 	rdctl	r3,cpuid
  d006c0:	d8c00d15 	stw	r3,52(sp)
	long oneOverRowSize = 87381;
	long oneOverColSize = 65536;
	long rowOverRowSize = 0;
	long colOverColSize = 0;

	if (zoom == 0) {
  d006c4:	2000d81e 	bne	r4,zero,d00a28 <drawFrame+0x398>
  d006c8:	013b0034 	movhi	r4,60416
  d006cc:	05420034 	movhi	r21,2048
  d006d0:	017e0034 	movhi	r5,63488
  d006d4:	d9000b15 	stw	r4,44(sp)
  d006d8:	d9400a15 	stw	r5,40(sp)
  d006dc:	a809883a 	mov	r4,r21
		minY = targetArrayXY[1] - FloatToFixed(0.75 / powf(1.5, zoom));
		maxY = targetArrayXY[1] + FloatToFixed(0.75 / powf(1.5, zoom));
	}

	//the loop that goes over the rows
	for (i = cpu; i < rowSize; i = i + NUM_CPUS) {
  d006e0:	d9800d17 	ldw	r6,52(sp)
  d006e4:	0480bfc4 	movi	r18,767
  d006e8:	9180b716 	blt	r18,r6,d009c8 <drawFrame+0x338>
  d006ec:	d8800a17 	ldw	r2,40(sp)
  d006f0:	00ffffc4 	movi	r3,-1
  d006f4:	180f883a 	mov	r7,r3
  d006f8:	2089c83a 	sub	r4,r4,r2
  d006fc:	2021883a 	mov	r16,r4
  d00700:	2023d7fa 	srai	r17,r4,31
  d00704:	d9000b17 	ldw	r4,44(sp)
  d00708:	00bffef4 	movhi	r2,65531
  d0070c:	10aaab04 	addi	r2,r2,-21844
  d00710:	880b883a 	mov	r5,r17
  d00714:	a911c83a 	sub	r8,r21,r4
  d00718:	da000815 	stw	r8,32(sp)
  d0071c:	4011d7fa 	srai	r8,r8,31
  d00720:	8009883a 	mov	r4,r16
  d00724:	100d883a 	mov	r6,r2
  d00728:	da000915 	stw	r8,36(sp)
  d0072c:	0d0201c0 	call	d0201c <__muldi3>
  d00730:	d9000d17 	ldw	r4,52(sp)
  d00734:	880f883a 	mov	r7,r17
  d00738:	800d883a 	mov	r6,r16
  d0073c:	910bc83a 	sub	r5,r18,r4
  d00740:	01000074 	movhi	r4,1
  d00744:	21155544 	addi	r4,r4,21845
  d00748:	290b383a 	mul	r5,r5,r4
  d0074c:	d8800015 	stw	r2,0(sp)
  d00750:	d8c00115 	stw	r3,4(sp)
  d00754:	2813d7fa 	srai	r9,r5,31
  d00758:	2811883a 	mov	r8,r5
  d0075c:	4009883a 	mov	r4,r8
  d00760:	480b883a 	mov	r5,r9
  d00764:	0d0201c0 	call	d0201c <__muldi3>
  d00768:	180b883a 	mov	r5,r3
  d0076c:	d8c00817 	ldw	r3,32(sp)
  d00770:	1009883a 	mov	r4,r2
  d00774:	d8800d17 	ldw	r2,52(sp)
  d00778:	1806d43a 	srli	r3,r3,16
  d0077c:	d9000415 	stw	r4,16(sp)
  d00780:	d9400515 	stw	r5,20(sp)
  d00784:	d8c01115 	stw	r3,68(sp)
  d00788:	00c00044 	movi	r3,1
  d0078c:	d8800f15 	stw	r2,60(sp)
  d00790:	d8c00c15 	stw	r3,48(sp)

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  d00794:	d9400517 	ldw	r5,20(sp)
  d00798:	d9800417 	ldw	r6,16(sp)
  d0079c:	d8000e15 	stw	zero,56(sp)
  d007a0:	280891ba 	slli	r4,r5,6
  d007a4:	d9400917 	ldw	r5,36(sp)
  d007a8:	3004d6ba 	srli	r2,r6,26
  d007ac:	000d883a 	mov	r6,zero
  d007b0:	280a943a 	slli	r5,r5,16
  d007b4:	2084b03a 	or	r2,r4,r2
  d007b8:	d9000817 	ldw	r4,32(sp)
  d007bc:	d9800215 	stw	r6,8(sp)
  d007c0:	280d883a 	mov	r6,r5
  d007c4:	d9401117 	ldw	r5,68(sp)
  d007c8:	2008943a 	slli	r4,r4,16
  d007cc:	d8801015 	stw	r2,64(sp)
  d007d0:	298cb03a 	or	r6,r5,r6
  d007d4:	000b883a 	mov	r5,zero
  d007d8:	d9800715 	stw	r6,28(sp)
  d007dc:	d9000615 	stw	r4,24(sp)
  d007e0:	d9400315 	stw	r5,12(sp)
  d007e4:	d9800317 	ldw	r6,12(sp)
  d007e8:	d9400217 	ldw	r5,8(sp)
  d007ec:	0021883a 	mov	r16,zero
  d007f0:	300891ba 	slli	r4,r6,6
  d007f4:	2804d6ba 	srli	r2,r5,26
  d007f8:	0025883a 	mov	r18,zero
  d007fc:	0015883a 	mov	r10,zero
  d00800:	2084b03a 	or	r2,r4,r2
  d00804:	0023883a 	mov	r17,zero
  d00808:	1039883a 	mov	fp,r2
  d0080c:	002b883a 	mov	r21,zero
  d00810:	0027883a 	mov	r19,zero
  d00814:	002f883a 	mov	r23,zero
  d00818:	00000206 	br	d00824 <drawFrame+0x194>
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  d0081c:	00801904 	movi	r2,100
  d00820:	b8803226 	beq	r23,r2,d008ec <drawFrame+0x25c>
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  d00824:	9008d17a 	srli	r4,r18,5
  d00828:	980696fa 	slli	r3,r19,27
  d0082c:	900496fa 	slli	r2,r18,27

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  d00830:	aa95c83a 	sub	r10,r21,r10
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  d00834:	20c6b03a 	or	r3,r4,r3
  d00838:	181691ba 	slli	r11,r3,6
  d0083c:	1010d6ba 	srli	r8,r2,26

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  d00840:	d9000b17 	ldw	r4,44(sp)
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  d00844:	880b883a 	mov	r5,r17
  d00848:	5a10b03a 	or	r8,r11,r8
  d0084c:	4005d7fa 	srai	r2,r8,31

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  d00850:	2295883a 	add	r10,r4,r10
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  d00854:	400d883a 	mov	r6,r8
  d00858:	8009883a 	mov	r4,r16
  d0085c:	100f883a 	mov	r7,r2

		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
  d00860:	e2ad883a 	add	r22,fp,r10
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  d00864:	0d0201c0 	call	d0201c <__muldi3>
  d00868:	180c91ba 	slli	r6,r3,6
  d0086c:	1004d6ba 	srli	r2,r2,26
	return (long long) a * (long long) b;
}

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  d00870:	b027d7fa 	srai	r19,r22,31
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  d00874:	d8c01017 	ldw	r3,64(sp)
  d00878:	3084b03a 	or	r2,r6,r2
  d0087c:	d9800a17 	ldw	r6,40(sp)

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  d00880:	b009883a 	mov	r4,r22
  d00884:	980b883a 	mov	r5,r19
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  d00888:	3085883a 	add	r2,r6,r2

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  d0088c:	980f883a 	mov	r7,r19
  d00890:	b00d883a 	mov	r6,r22
		/*if (cpu == 3) {
		 startTimer();
		 }//*/

		xtemp = fixedPointMultiply64(x, x) - fixedPointMultiply64(y, y) + x0;
		y = fixedPointMultiply64(fixedPointMultiply64(FP2, x), y) + y0;
  d00894:	18a9883a 	add	r20,r3,r2

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;

	return c >> 26;
  d00898:	0d0201c0 	call	d0201c <__muldi3>
  d0089c:	180c91ba 	slli	r6,r3,6
	return (long long) a * (long long) b;
}

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  d008a0:	a023d7fa 	srai	r17,r20,31

	return c >> 26;
  d008a4:	1004d6ba 	srli	r2,r2,26
  d008a8:	a009883a 	mov	r4,r20
  d008ac:	880b883a 	mov	r5,r17
  d008b0:	3084b03a 	or	r2,r6,r2
  d008b4:	880f883a 	mov	r7,r17
  d008b8:	a00d883a 	mov	r6,r20
  d008bc:	102b883a 	mov	r21,r2
  d008c0:	0d0201c0 	call	d0201c <__muldi3>
  d008c4:	180c91ba 	slli	r6,r3,6
  d008c8:	1004d6ba 	srli	r2,r2,26
		 if (cpu == 3) {
		 endTimeAndPrint();
		 }//*/

		x = xtemp;
		iter++;
  d008cc:	bdc00044 	addi	r23,r23,1
	return (long long) a * (long long) b;
}

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  d008d0:	b025883a 	mov	r18,r22

	return c >> 26;
  d008d4:	3084b03a 	or	r2,r6,r2
  d008d8:	1015883a 	mov	r10,r2
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  d008dc:	a889883a 	add	r4,r21,r2
  d008e0:	00840034 	movhi	r2,4096
	return (long long) a * (long long) b;
}

long fixedPointMultiply64(long a, long b) {

	long long c = (long long) a * (long long) b;
  d008e4:	a021883a 	mov	r16,r20
	long y = 0.0;
	long xtemp = 0.0;

	long FP2 = 134217728; // 2 in fixed point

	while (((fixedPointMultiply64(x, x) + fixedPointMultiply64(y, y)) <= 268435456) && (iter < maxIter)) {
  d008e8:	113fcc0e 	bge	r2,r4,d0081c <drawFrame+0x18c>

			//getting the number of iterations it takes a location to go out of the set
			result = mandelbrot(x0, y0, &x, &y);

			//recalculates the x and y
			if (cpu == 3) {
  d008ec:	d9000d17 	ldw	r4,52(sp)
  d008f0:	008000c4 	movi	r2,3
  d008f4:	20804226 	beq	r4,r2,d00a00 <drawFrame+0x370>
}

//makes the color for display
int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  d008f8:	00801904 	movi	r2,100
  d008fc:	b8803e26 	beq	r23,r2,d009f8 <drawFrame+0x368>
		color = black;
	}
	else {
		int red = iter;
		int green = iter * 6;
  d00900:	008007c4 	movi	r2,31
  d00904:	b809883a 	mov	r4,r23
  d00908:	b8c001a4 	muli	r3,r23,6
  d0090c:	15c0010e 	bge	r2,r23,d00914 <drawFrame+0x284>
  d00910:	1009883a 	mov	r4,r2
  d00914:	00800fc4 	movi	r2,63
  d00918:	10c0010e 	bge	r2,r3,d00920 <drawFrame+0x290>
  d0091c:	1007883a 	mov	r3,r2
  d00920:	200492fa 	slli	r2,r4,11
  d00924:	1806917a 	slli	r3,r3,5
  d00928:	21003fcc 	andi	r4,r4,255
  d0092c:	10be000c 	andi	r2,r2,63488
  d00930:	1104b03a 	or	r2,r2,r4
  d00934:	18c1f80c 	andi	r3,r3,2016
  d00938:	188ab03a 	or	r5,r3,r2
					}
				}
			}

			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, j, i);
  d0093c:	d1271217 	ldw	r4,-25528(gp)
  d00940:	d9800e17 	ldw	r6,56(sp)
  d00944:	d9c00f17 	ldw	r7,60(sp)
  d00948:	0d0e7bc0 	call	d0e7bc <alt_up_pixel_buffer_dma_draw>
		//calculating the y0
		rowOverRowSize = fixedPointMultiply32(((rowSize - 1) - i), oneOverRowSize);
		y0 = fixedPointMultiply64(rowOverRowSize, (maxY - minY)) + minY;

		//the loop that goes over the columns
		for (j = 0; j < colSize; j++) {
  d0094c:	d9800217 	ldw	r6,8(sp)
  d00950:	d8800617 	ldw	r2,24(sp)
  d00954:	3087883a 	add	r3,r6,r2
  d00958:	198b803a 	cmpltu	r5,r3,r6
  d0095c:	d8800317 	ldw	r2,12(sp)
  d00960:	d9800717 	ldw	r6,28(sp)
  d00964:	d8c00215 	stw	r3,8(sp)
  d00968:	1189883a 	add	r4,r2,r6
  d0096c:	d8800e17 	ldw	r2,56(sp)
  d00970:	290b883a 	add	r5,r5,r4
  d00974:	d9400315 	stw	r5,12(sp)
  d00978:	10800044 	addi	r2,r2,1
  d0097c:	d8800e15 	stw	r2,56(sp)
  d00980:	d8c00e17 	ldw	r3,56(sp)
  d00984:	00810004 	movi	r2,1024
  d00988:	18bf961e 	bne	r3,r2,d007e4 <drawFrame+0x154>
		minY = targetArrayXY[1] - FloatToFixed(0.75 / powf(1.5, zoom));
		maxY = targetArrayXY[1] + FloatToFixed(0.75 / powf(1.5, zoom));
	}

	//the loop that goes over the rows
	for (i = cpu; i < rowSize; i = i + NUM_CPUS) {
  d0098c:	d9000417 	ldw	r4,16(sp)
  d00990:	d9400017 	ldw	r5,0(sp)
  d00994:	d9800117 	ldw	r6,4(sp)
  d00998:	2145883a 	add	r2,r4,r5
  d0099c:	d9400517 	ldw	r5,20(sp)
  d009a0:	1109803a 	cmpltu	r4,r2,r4
  d009a4:	d8800415 	stw	r2,16(sp)
  d009a8:	2987883a 	add	r3,r5,r6
  d009ac:	d9400f17 	ldw	r5,60(sp)
  d009b0:	20c9883a 	add	r4,r4,r3
  d009b4:	0080bfc4 	movi	r2,767
  d009b8:	29400104 	addi	r5,r5,4
  d009bc:	d9400f15 	stw	r5,60(sp)
  d009c0:	d9000515 	stw	r4,20(sp)
  d009c4:	117f730e 	bge	r2,r5,d00794 <drawFrame+0x104>
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, j, i);
		}
	}

}
  d009c8:	dfc01b17 	ldw	ra,108(sp)
  d009cc:	df001a17 	ldw	fp,104(sp)
  d009d0:	ddc01917 	ldw	r23,100(sp)
  d009d4:	dd801817 	ldw	r22,96(sp)
  d009d8:	dd401717 	ldw	r21,92(sp)
  d009dc:	dd001617 	ldw	r20,88(sp)
  d009e0:	dcc01517 	ldw	r19,84(sp)
  d009e4:	dc801417 	ldw	r18,80(sp)
  d009e8:	dc401317 	ldw	r17,76(sp)
  d009ec:	dc001217 	ldw	r16,72(sp)
  d009f0:	dec01c04 	addi	sp,sp,112
  d009f4:	f800283a 	ret
}

//makes the color for display
int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  d009f8:	000b883a 	mov	r5,zero
  d009fc:	003fcf06 	br	d0093c <drawFrame+0x2ac>
			//getting the number of iterations it takes a location to go out of the set
			result = mandelbrot(x0, y0, &x, &y);

			//recalculates the x and y
			if (cpu == 3) {
				if (recalculateTargetFlag) {
  d00a00:	d9400c17 	ldw	r5,48(sp)
  d00a04:	283fbc26 	beq	r5,zero,d008f8 <drawFrame+0x268>
					if (result > (maxIter - 2)) {
  d00a08:	00801884 	movi	r2,98
  d00a0c:	15ffba0e 	bge	r2,r23,d008f8 <drawFrame+0x268>
						targetArrayXYMaster[0] = x;
						targetArrayXYMaster[1] = y;
  d00a10:	d0a71004 	addi	r2,gp,-25536
						recalculateTargetFlag = recalculateTargetFlag - 1;
  d00a14:	297fffc4 	addi	r5,r5,-1
			//recalculates the x and y
			if (cpu == 3) {
				if (recalculateTargetFlag) {
					if (result > (maxIter - 2)) {
						targetArrayXYMaster[0] = x;
						targetArrayXYMaster[1] = y;
  d00a18:	15000115 	stw	r20,4(r2)

			//recalculates the x and y
			if (cpu == 3) {
				if (recalculateTargetFlag) {
					if (result > (maxIter - 2)) {
						targetArrayXYMaster[0] = x;
  d00a1c:	d5a71015 	stw	r22,-25536(gp)
						targetArrayXYMaster[1] = y;
						recalculateTargetFlag = recalculateTargetFlag - 1;
  d00a20:	d9400c15 	stw	r5,48(sp)
  d00a24:	003fb406 	br	d008f8 <drawFrame+0x268>
		minY = FloatToFixed(-1.0);
		maxY = FloatToFixed(1.0);
	}

	else {
		minX = targetArrayXY[0] - FloatToFixed(1.0 / powf(1.5, zoom));
  d00a28:	d0a00017 	ldw	r2,-32768(gp)
  d00a2c:	040ff034 	movhi	r16,16320
  d00a30:	050fe034 	movhi	r20,16256
  d00a34:	14c00017 	ldw	r19,0(r2)
  d00a38:	0d028a00 	call	d028a0 <__floatsisf>
  d00a3c:	100b883a 	mov	r5,r2
  d00a40:	8009883a 	mov	r4,r16
  d00a44:	1023883a 	mov	r17,r2
  d00a48:	0d00b7c0 	call	d00b7c <powf>
  d00a4c:	100b883a 	mov	r5,r2
  d00a50:	a009883a 	mov	r4,r20
  d00a54:	0d0254c0 	call	d0254c <__divsf3>
  d00a58:	04934034 	movhi	r18,19712
  d00a5c:	1489ff32 	custom	252,r4,r2,r18
  d00a60:	0d029380 	call	d02938 <__fixsfsi>
  d00a64:	98a7c83a 	sub	r19,r19,r2
		maxX = targetArrayXY[0] + FloatToFixed(1.0 / powf(1.5, zoom));
  d00a68:	d0a00017 	ldw	r2,-32768(gp)
  d00a6c:	8009883a 	mov	r4,r16
  d00a70:	880b883a 	mov	r5,r17
		minY = FloatToFixed(-1.0);
		maxY = FloatToFixed(1.0);
	}

	else {
		minX = targetArrayXY[0] - FloatToFixed(1.0 / powf(1.5, zoom));
  d00a74:	dcc00b15 	stw	r19,44(sp)
		maxX = targetArrayXY[0] + FloatToFixed(1.0 / powf(1.5, zoom));
  d00a78:	14c00017 	ldw	r19,0(r2)
  d00a7c:	0d00b7c0 	call	d00b7c <powf>
  d00a80:	100b883a 	mov	r5,r2
  d00a84:	a009883a 	mov	r4,r20
  d00a88:	0d0254c0 	call	d0254c <__divsf3>
  d00a8c:	1489ff32 	custom	252,r4,r2,r18
  d00a90:	0d029380 	call	d02938 <__fixsfsi>
  d00a94:	98ab883a 	add	r21,r19,r2
		minY = targetArrayXY[1] - FloatToFixed(0.75 / powf(1.5, zoom));
  d00a98:	d0a00017 	ldw	r2,-32768(gp)
  d00a9c:	8009883a 	mov	r4,r16
  d00aa0:	880b883a 	mov	r5,r17
  d00aa4:	14c00117 	ldw	r19,4(r2)
  d00aa8:	050fd034 	movhi	r20,16192
  d00aac:	0d00b7c0 	call	d00b7c <powf>
  d00ab0:	100b883a 	mov	r5,r2
  d00ab4:	a009883a 	mov	r4,r20
  d00ab8:	0d0254c0 	call	d0254c <__divsf3>
  d00abc:	1489ff32 	custom	252,r4,r2,r18
  d00ac0:	0d029380 	call	d02938 <__fixsfsi>
  d00ac4:	98a7c83a 	sub	r19,r19,r2
		maxY = targetArrayXY[1] + FloatToFixed(0.75 / powf(1.5, zoom));
  d00ac8:	d0a00017 	ldw	r2,-32768(gp)
  d00acc:	8009883a 	mov	r4,r16
  d00ad0:	880b883a 	mov	r5,r17
  d00ad4:	14000117 	ldw	r16,4(r2)
	}

	else {
		minX = targetArrayXY[0] - FloatToFixed(1.0 / powf(1.5, zoom));
		maxX = targetArrayXY[0] + FloatToFixed(1.0 / powf(1.5, zoom));
		minY = targetArrayXY[1] - FloatToFixed(0.75 / powf(1.5, zoom));
  d00ad8:	dcc00a15 	stw	r19,40(sp)
		maxY = targetArrayXY[1] + FloatToFixed(0.75 / powf(1.5, zoom));
  d00adc:	0d00b7c0 	call	d00b7c <powf>
  d00ae0:	100b883a 	mov	r5,r2
  d00ae4:	a009883a 	mov	r4,r20
  d00ae8:	0d0254c0 	call	d0254c <__divsf3>
  d00aec:	1489ff32 	custom	252,r4,r2,r18
  d00af0:	0d029380 	call	d02938 <__fixsfsi>
  d00af4:	8089883a 	add	r4,r16,r2
  d00af8:	003ef906 	br	d006e0 <drawFrame+0x50>

00d00afc <main>:
#define key1 6
#define key0 7

#define FIXED_POINT

int main() {
  d00afc:	defffd04 	addi	sp,sp,-12

	barrier(0);
  d00b00:	0009883a 	mov	r4,zero
#define key1 6
#define key0 7

#define FIXED_POINT

int main() {
  d00b04:	dfc00215 	stw	ra,8(sp)
  d00b08:	dc400115 	stw	r17,4(sp)
  d00b0c:	dc000015 	stw	r16,0(sp)

	barrier(0);
  d00b10:	0d004a00 	call	d004a0 <barrier>
	setup();
  d00b14:	0d0064c0 	call	d0064c <setup>

	printf("Program running (UART)...\n");
  d00b18:	01003474 	movhi	r4,209
  d00b1c:	21043504 	addi	r4,r4,4308
  d00b20:	0d03c680 	call	d03c68 <puts>

	//how to reset the interrupt vector
	//the following will show you the number to put in SOPC video DMA controller
	//reset address: 0090FFE4
	//default buffer start address: 0x01880000
	printf("ADDRESS: %08X \n", myPixelBuffer->back_buffer_start_address);
  d00b24:	d0a71217 	ldw	r2,-25528(gp)
  d00b28:	01003474 	movhi	r4,209
  d00b2c:	21043c04 	addi	r4,r4,4336
  d00b30:	11400c17 	ldw	r5,48(r2)
  d00b34:	0d03b500 	call	d03b50 <printf>
	int cpu = __builtin_rdctl(5);
  d00b38:	000b317a 	rdctl	r5,cpuid
	printf("cpu %d \n", cpu);
  d00b3c:	01003474 	movhi	r4,209
  d00b40:	21044004 	addi	r4,r4,4352
  d00b44:	0d03b500 	call	d03b50 <printf>
  d00b48:	04401944 	movi	r17,101

	//unsigned long long cycles = 0;
	//the main program loop
	while (1) {

		printf("entering the main loop \n");
  d00b4c:	01003474 	movhi	r4,209
  d00b50:	21044304 	addi	r4,r4,4364
  d00b54:	0d03c680 	call	d03c68 <puts>
  d00b58:	0021883a 	mov	r16,zero

		int zoom;
		for (zoom = 0; zoom <= 100; zoom++) {

			//startTimer();
			clearScreen();
  d00b5c:	0d004940 	call	d00494 <clearScreen>

			drawFrame(zoom);
  d00b60:	8009883a 	mov	r4,r16
  d00b64:	0d006900 	call	d00690 <drawFrame>
	while (1) {

		printf("entering the main loop \n");

		int zoom;
		for (zoom = 0; zoom <= 100; zoom++) {
  d00b68:	84000044 	addi	r16,r16,1
			clearScreen();

			drawFrame(zoom);

			//printf("before barrier %d \n", zoom);
			barrier(0);
  d00b6c:	0009883a 	mov	r4,zero
  d00b70:	0d004a00 	call	d004a0 <barrier>
	while (1) {

		printf("entering the main loop \n");

		int zoom;
		for (zoom = 0; zoom <= 100; zoom++) {
  d00b74:	847ff91e 	bne	r16,r17,d00b5c <main+0x60>
  d00b78:	003ff406 	br	d00b4c <main+0x50>

00d00b7c <powf>:
  d00b7c:	defff104 	addi	sp,sp,-60
  d00b80:	dd000d15 	stw	r20,52(sp)
  d00b84:	dcc00c15 	stw	r19,48(sp)
  d00b88:	dc800b15 	stw	r18,44(sp)
  d00b8c:	dc400a15 	stw	r17,40(sp)
  d00b90:	dc000915 	stw	r16,36(sp)
  d00b94:	dfc00e15 	stw	ra,56(sp)
  d00b98:	05003474 	movhi	r20,209
  d00b9c:	a50c4904 	addi	r20,r20,12580
  d00ba0:	2027883a 	mov	r19,r4
  d00ba4:	2825883a 	mov	r18,r5
  d00ba8:	0d00fd40 	call	d00fd4 <__ieee754_powf>
  d00bac:	1021883a 	mov	r16,r2
  d00bb0:	a0800017 	ldw	r2,0(r20)
  d00bb4:	047fffc4 	movi	r17,-1
  d00bb8:	14400326 	beq	r2,r17,d00bc8 <powf+0x4c>
  d00bbc:	9009883a 	mov	r4,r18
  d00bc0:	0d01e980 	call	d01e98 <isnanf>
  d00bc4:	10000926 	beq	r2,zero,d00bec <powf+0x70>
  d00bc8:	8005883a 	mov	r2,r16
  d00bcc:	dfc00e17 	ldw	ra,56(sp)
  d00bd0:	dd000d17 	ldw	r20,52(sp)
  d00bd4:	dcc00c17 	ldw	r19,48(sp)
  d00bd8:	dc800b17 	ldw	r18,44(sp)
  d00bdc:	dc400a17 	ldw	r17,40(sp)
  d00be0:	dc000917 	ldw	r16,36(sp)
  d00be4:	dec00f04 	addi	sp,sp,60
  d00be8:	f800283a 	ret
  d00bec:	9809883a 	mov	r4,r19
  d00bf0:	0d01e980 	call	d01e98 <isnanf>
  d00bf4:	1000151e 	bne	r2,zero,d00c4c <powf+0xd0>
  d00bf8:	9809883a 	mov	r4,r19
  d00bfc:	000b883a 	mov	r5,zero
  d00c00:	0d026c00 	call	d026c0 <__eqsf2>
  d00c04:	10005a1e 	bne	r2,zero,d00d70 <powf+0x1f4>
  d00c08:	9009883a 	mov	r4,r18
  d00c0c:	000b883a 	mov	r5,zero
  d00c10:	0d026c00 	call	d026c0 <__eqsf2>
  d00c14:	1000331e 	bne	r2,zero,d00ce4 <powf+0x168>
  d00c18:	a0800017 	ldw	r2,0(r20)
  d00c1c:	d8000615 	stw	zero,24(sp)
  d00c20:	d8000715 	stw	zero,28(sp)
  d00c24:	10001426 	beq	r2,zero,d00c78 <powf+0xfc>
  d00c28:	008ffc34 	movhi	r2,16368
  d00c2c:	d8800715 	stw	r2,28(sp)
  d00c30:	d8800617 	ldw	r2,24(sp)
  d00c34:	d8c00717 	ldw	r3,28(sp)
  d00c38:	1009883a 	mov	r4,r2
  d00c3c:	180b883a 	mov	r5,r3
  d00c40:	0d0323c0 	call	d0323c <__truncdfsf2>
  d00c44:	1021883a 	mov	r16,r2
  d00c48:	003fdf06 	br	d00bc8 <powf+0x4c>
  d00c4c:	9009883a 	mov	r4,r18
  d00c50:	000b883a 	mov	r5,zero
  d00c54:	0d026c00 	call	d026c0 <__eqsf2>
  d00c58:	103fdb1e 	bne	r2,zero,d00bc8 <powf+0x4c>
  d00c5c:	a0c00017 	ldw	r3,0(r20)
  d00c60:	010ffc34 	movhi	r4,16368
  d00c64:	d8000615 	stw	zero,24(sp)
  d00c68:	d9000715 	stw	r4,28(sp)
  d00c6c:	1c401a26 	beq	r3,r17,d00cd8 <powf+0x15c>
  d00c70:	00800084 	movi	r2,2
  d00c74:	18801826 	beq	r3,r2,d00cd8 <powf+0x15c>
  d00c78:	9009883a 	mov	r4,r18
  d00c7c:	0d029cc0 	call	d029cc <__extendsfdf2>
  d00c80:	9809883a 	mov	r4,r19
  d00c84:	d8c00515 	stw	r3,20(sp)
  d00c88:	d8800415 	stw	r2,16(sp)
  d00c8c:	0d029cc0 	call	d029cc <__extendsfdf2>
  d00c90:	100b883a 	mov	r5,r2
  d00c94:	d8c00315 	stw	r3,12(sp)
  d00c98:	00803474 	movhi	r2,209
  d00c9c:	10844904 	addi	r2,r2,4388
  d00ca0:	00c00044 	movi	r3,1
  d00ca4:	d809883a 	mov	r4,sp
  d00ca8:	d8800115 	stw	r2,4(sp)
  d00cac:	d8c00015 	stw	r3,0(sp)
  d00cb0:	d9400215 	stw	r5,8(sp)
  d00cb4:	d8000815 	stw	zero,32(sp)
  d00cb8:	0d01c540 	call	d01c54 <matherr>
  d00cbc:	10002826 	beq	r2,zero,d00d60 <powf+0x1e4>
  d00cc0:	d8800817 	ldw	r2,32(sp)
  d00cc4:	103fda26 	beq	r2,zero,d00c30 <powf+0xb4>
  d00cc8:	0d03b400 	call	d03b40 <__errno>
  d00ccc:	d8c00817 	ldw	r3,32(sp)
  d00cd0:	10c00015 	stw	r3,0(r2)
  d00cd4:	003fd606 	br	d00c30 <powf+0xb4>
  d00cd8:	d9000715 	stw	r4,28(sp)
  d00cdc:	d8000615 	stw	zero,24(sp)
  d00ce0:	003fd306 	br	d00c30 <powf+0xb4>
  d00ce4:	9009883a 	mov	r4,r18
  d00ce8:	0d01e7c0 	call	d01e7c <finitef>
  d00cec:	103fb626 	beq	r2,zero,d00bc8 <powf+0x4c>
  d00cf0:	9009883a 	mov	r4,r18
  d00cf4:	000b883a 	mov	r5,zero
  d00cf8:	0d027b00 	call	d027b0 <__ltsf2>
  d00cfc:	103fb20e 	bge	r2,zero,d00bc8 <powf+0x4c>
  d00d00:	9809883a 	mov	r4,r19
  d00d04:	00800044 	movi	r2,1
  d00d08:	00c03474 	movhi	r3,209
  d00d0c:	18c44904 	addi	r3,r3,4388
  d00d10:	d8800015 	stw	r2,0(sp)
  d00d14:	d8c00115 	stw	r3,4(sp)
  d00d18:	d8000815 	stw	zero,32(sp)
  d00d1c:	0d029cc0 	call	d029cc <__extendsfdf2>
  d00d20:	9009883a 	mov	r4,r18
  d00d24:	d8c00315 	stw	r3,12(sp)
  d00d28:	d8800215 	stw	r2,8(sp)
  d00d2c:	0d029cc0 	call	d029cc <__extendsfdf2>
  d00d30:	a1800017 	ldw	r6,0(r20)
  d00d34:	d8c00515 	stw	r3,20(sp)
  d00d38:	d8800415 	stw	r2,16(sp)
  d00d3c:	30005626 	beq	r6,zero,d00e98 <powf+0x31c>
  d00d40:	00bffc34 	movhi	r2,65520
  d00d44:	d8800715 	stw	r2,28(sp)
  d00d48:	00800084 	movi	r2,2
  d00d4c:	d8000615 	stw	zero,24(sp)
  d00d50:	30800326 	beq	r6,r2,d00d60 <powf+0x1e4>
  d00d54:	d809883a 	mov	r4,sp
  d00d58:	0d01c540 	call	d01c54 <matherr>
  d00d5c:	103fd81e 	bne	r2,zero,d00cc0 <powf+0x144>
  d00d60:	0d03b400 	call	d03b40 <__errno>
  d00d64:	00c00844 	movi	r3,33
  d00d68:	10c00015 	stw	r3,0(r2)
  d00d6c:	003fd406 	br	d00cc0 <powf+0x144>
  d00d70:	8009883a 	mov	r4,r16
  d00d74:	0d01e7c0 	call	d01e7c <finitef>
  d00d78:	10002426 	beq	r2,zero,d00e0c <powf+0x290>
  d00d7c:	8009883a 	mov	r4,r16
  d00d80:	000b883a 	mov	r5,zero
  d00d84:	0d026c00 	call	d026c0 <__eqsf2>
  d00d88:	103f8f1e 	bne	r2,zero,d00bc8 <powf+0x4c>
  d00d8c:	9809883a 	mov	r4,r19
  d00d90:	0d01e7c0 	call	d01e7c <finitef>
  d00d94:	103f8c26 	beq	r2,zero,d00bc8 <powf+0x4c>
  d00d98:	9009883a 	mov	r4,r18
  d00d9c:	0d01e7c0 	call	d01e7c <finitef>
  d00da0:	103f8926 	beq	r2,zero,d00bc8 <powf+0x4c>
  d00da4:	9809883a 	mov	r4,r19
  d00da8:	00800104 	movi	r2,4
  d00dac:	00c03474 	movhi	r3,209
  d00db0:	18c44904 	addi	r3,r3,4388
  d00db4:	d8800015 	stw	r2,0(sp)
  d00db8:	d8c00115 	stw	r3,4(sp)
  d00dbc:	d8000815 	stw	zero,32(sp)
  d00dc0:	0d029cc0 	call	d029cc <__extendsfdf2>
  d00dc4:	9009883a 	mov	r4,r18
  d00dc8:	d8c00315 	stw	r3,12(sp)
  d00dcc:	d8800215 	stw	r2,8(sp)
  d00dd0:	0d029cc0 	call	d029cc <__extendsfdf2>
  d00dd4:	a1800017 	ldw	r6,0(r20)
  d00dd8:	d8800415 	stw	r2,16(sp)
  d00ddc:	00800084 	movi	r2,2
  d00de0:	d8c00515 	stw	r3,20(sp)
  d00de4:	d8000615 	stw	zero,24(sp)
  d00de8:	d8000715 	stw	zero,28(sp)
  d00dec:	30800326 	beq	r6,r2,d00dfc <powf+0x280>
  d00df0:	d809883a 	mov	r4,sp
  d00df4:	0d01c540 	call	d01c54 <matherr>
  d00df8:	103fb11e 	bne	r2,zero,d00cc0 <powf+0x144>
  d00dfc:	0d03b400 	call	d03b40 <__errno>
  d00e00:	00c00884 	movi	r3,34
  d00e04:	10c00015 	stw	r3,0(r2)
  d00e08:	003fad06 	br	d00cc0 <powf+0x144>
  d00e0c:	9809883a 	mov	r4,r19
  d00e10:	0d01e7c0 	call	d01e7c <finitef>
  d00e14:	103fd926 	beq	r2,zero,d00d7c <powf+0x200>
  d00e18:	9009883a 	mov	r4,r18
  d00e1c:	0d01e7c0 	call	d01e7c <finitef>
  d00e20:	103fd626 	beq	r2,zero,d00d7c <powf+0x200>
  d00e24:	8009883a 	mov	r4,r16
  d00e28:	0d01e980 	call	d01e98 <isnanf>
  d00e2c:	10001d26 	beq	r2,zero,d00ea4 <powf+0x328>
  d00e30:	9809883a 	mov	r4,r19
  d00e34:	00800044 	movi	r2,1
  d00e38:	00c03474 	movhi	r3,209
  d00e3c:	18c44904 	addi	r3,r3,4388
  d00e40:	d8800015 	stw	r2,0(sp)
  d00e44:	d8c00115 	stw	r3,4(sp)
  d00e48:	d8000815 	stw	zero,32(sp)
  d00e4c:	0d029cc0 	call	d029cc <__extendsfdf2>
  d00e50:	9009883a 	mov	r4,r18
  d00e54:	d8c00315 	stw	r3,12(sp)
  d00e58:	d8800215 	stw	r2,8(sp)
  d00e5c:	0d029cc0 	call	d029cc <__extendsfdf2>
  d00e60:	a4000017 	ldw	r16,0(r20)
  d00e64:	d8c00515 	stw	r3,20(sp)
  d00e68:	d8800415 	stw	r2,16(sp)
  d00e6c:	80000a26 	beq	r16,zero,d00e98 <powf+0x31c>
  d00e70:	0009883a 	mov	r4,zero
  d00e74:	000d883a 	mov	r6,zero
  d00e78:	000b883a 	mov	r5,zero
  d00e7c:	000f883a 	mov	r7,zero
  d00e80:	0d02f240 	call	d02f24 <__divdf3>
  d00e84:	d8800615 	stw	r2,24(sp)
  d00e88:	00800084 	movi	r2,2
  d00e8c:	d8c00715 	stw	r3,28(sp)
  d00e90:	80bfb01e 	bne	r16,r2,d00d54 <powf+0x1d8>
  d00e94:	003fb206 	br	d00d60 <powf+0x1e4>
  d00e98:	d8000615 	stw	zero,24(sp)
  d00e9c:	d8000715 	stw	zero,28(sp)
  d00ea0:	003fac06 	br	d00d54 <powf+0x1d8>
  d00ea4:	9809883a 	mov	r4,r19
  d00ea8:	008000c4 	movi	r2,3
  d00eac:	00c03474 	movhi	r3,209
  d00eb0:	18c44904 	addi	r3,r3,4388
  d00eb4:	d8800015 	stw	r2,0(sp)
  d00eb8:	d8c00115 	stw	r3,4(sp)
  d00ebc:	d8000815 	stw	zero,32(sp)
  d00ec0:	0d029cc0 	call	d029cc <__extendsfdf2>
  d00ec4:	9009883a 	mov	r4,r18
  d00ec8:	d8c00315 	stw	r3,12(sp)
  d00ecc:	d8800215 	stw	r2,8(sp)
  d00ed0:	0d029cc0 	call	d029cc <__extendsfdf2>
  d00ed4:	a1800017 	ldw	r6,0(r20)
  d00ed8:	d8c00515 	stw	r3,20(sp)
  d00edc:	d8800415 	stw	r2,16(sp)
  d00ee0:	3000211e 	bne	r6,zero,d00f68 <powf+0x3ec>
  d00ee4:	9809883a 	mov	r4,r19
  d00ee8:	0091fc34 	movhi	r2,18416
  d00eec:	10bfffc4 	addi	r2,r2,-1
  d00ef0:	04f80034 	movhi	r19,57344
  d00ef4:	000b883a 	mov	r5,zero
  d00ef8:	d8800715 	stw	r2,28(sp)
  d00efc:	dcc00615 	stw	r19,24(sp)
  d00f00:	0d027b00 	call	d027b0 <__ltsf2>
  d00f04:	103fba0e 	bge	r2,zero,d00df0 <powf+0x274>
  d00f08:	014fc034 	movhi	r5,16128
  d00f0c:	9009883a 	mov	r4,r18
  d00f10:	0d0236c0 	call	d0236c <__mulsf3>
  d00f14:	1009883a 	mov	r4,r2
  d00f18:	0d029cc0 	call	d029cc <__extendsfdf2>
  d00f1c:	1009883a 	mov	r4,r2
  d00f20:	180b883a 	mov	r5,r3
  d00f24:	1021883a 	mov	r16,r2
  d00f28:	1823883a 	mov	r17,r3
  d00f2c:	0d01c5c0 	call	d01c5c <rint>
  d00f30:	180f883a 	mov	r7,r3
  d00f34:	880b883a 	mov	r5,r17
  d00f38:	8009883a 	mov	r4,r16
  d00f3c:	100d883a 	mov	r6,r2
  d00f40:	0d0317c0 	call	d0317c <__nedf2>
  d00f44:	10000426 	beq	r2,zero,d00f58 <powf+0x3dc>
  d00f48:	00b1fc34 	movhi	r2,51184
  d00f4c:	10bfffc4 	addi	r2,r2,-1
  d00f50:	dcc00615 	stw	r19,24(sp)
  d00f54:	d8800715 	stw	r2,28(sp)
  d00f58:	a0c00017 	ldw	r3,0(r20)
  d00f5c:	00800084 	movi	r2,2
  d00f60:	18bfa31e 	bne	r3,r2,d00df0 <powf+0x274>
  d00f64:	003fa506 	br	d00dfc <powf+0x280>
  d00f68:	009ffc34 	movhi	r2,32752
  d00f6c:	9809883a 	mov	r4,r19
  d00f70:	000b883a 	mov	r5,zero
  d00f74:	d8800715 	stw	r2,28(sp)
  d00f78:	d8000615 	stw	zero,24(sp)
  d00f7c:	0d027b00 	call	d027b0 <__ltsf2>
  d00f80:	103ff50e 	bge	r2,zero,d00f58 <powf+0x3dc>
  d00f84:	014fc034 	movhi	r5,16128
  d00f88:	9009883a 	mov	r4,r18
  d00f8c:	0d0236c0 	call	d0236c <__mulsf3>
  d00f90:	1009883a 	mov	r4,r2
  d00f94:	0d029cc0 	call	d029cc <__extendsfdf2>
  d00f98:	1009883a 	mov	r4,r2
  d00f9c:	180b883a 	mov	r5,r3
  d00fa0:	1021883a 	mov	r16,r2
  d00fa4:	1823883a 	mov	r17,r3
  d00fa8:	0d01c5c0 	call	d01c5c <rint>
  d00fac:	180f883a 	mov	r7,r3
  d00fb0:	880b883a 	mov	r5,r17
  d00fb4:	8009883a 	mov	r4,r16
  d00fb8:	100d883a 	mov	r6,r2
  d00fbc:	0d0317c0 	call	d0317c <__nedf2>
  d00fc0:	103fe526 	beq	r2,zero,d00f58 <powf+0x3dc>
  d00fc4:	00bffc34 	movhi	r2,65520
  d00fc8:	d8800715 	stw	r2,28(sp)
  d00fcc:	d8000615 	stw	zero,24(sp)
  d00fd0:	003fe106 	br	d00f58 <powf+0x3dc>

00d00fd4 <__ieee754_powf>:
  d00fd4:	defff004 	addi	sp,sp,-64
  d00fd8:	00a00034 	movhi	r2,32768
  d00fdc:	10bfffc4 	addi	r2,r2,-1
  d00fe0:	dc000615 	stw	r16,24(sp)
  d00fe4:	28a0703a 	and	r16,r5,r2
  d00fe8:	df000e15 	stw	fp,56(sp)
  d00fec:	dcc00915 	stw	r19,36(sp)
  d00ff0:	dc800815 	stw	r18,32(sp)
  d00ff4:	2027883a 	mov	r19,r4
  d00ff8:	dfc00f15 	stw	ra,60(sp)
  d00ffc:	ddc00d15 	stw	r23,52(sp)
  d01000:	dd800c15 	stw	r22,48(sp)
  d01004:	dd400b15 	stw	r21,44(sp)
  d01008:	dd000a15 	stw	r20,40(sp)
  d0100c:	dc400715 	stw	r17,28(sp)
  d01010:	2839883a 	mov	fp,r5
  d01014:	2825883a 	mov	r18,r5
  d01018:	2809883a 	mov	r4,r5
  d0101c:	80003526 	beq	r16,zero,d010f4 <__ieee754_powf+0x120>
  d01020:	98a2703a 	and	r17,r19,r2
  d01024:	009fe034 	movhi	r2,32640
  d01028:	9829883a 	mov	r20,r19
  d0102c:	1440100e 	bge	r2,r17,d01070 <__ieee754_powf+0x9c>
  d01030:	008fe034 	movhi	r2,16256
  d01034:	88803d26 	beq	r17,r2,d0112c <__ieee754_powf+0x158>
  d01038:	01003474 	movhi	r4,209
  d0103c:	21042804 	addi	r4,r4,4256
  d01040:	dfc00f17 	ldw	ra,60(sp)
  d01044:	df000e17 	ldw	fp,56(sp)
  d01048:	ddc00d17 	ldw	r23,52(sp)
  d0104c:	dd800c17 	ldw	r22,48(sp)
  d01050:	dd400b17 	ldw	r21,44(sp)
  d01054:	dd000a17 	ldw	r20,40(sp)
  d01058:	dcc00917 	ldw	r19,36(sp)
  d0105c:	dc800817 	ldw	r18,32(sp)
  d01060:	dc400717 	ldw	r17,28(sp)
  d01064:	dc000617 	ldw	r16,24(sp)
  d01068:	dec01004 	addi	sp,sp,64
  d0106c:	0d01eb01 	jmpi	d01eb0 <nanf>
  d01070:	143fef16 	blt	r2,r16,d01030 <__ieee754_powf+0x5c>
  d01074:	982a403a 	cmpge	r21,r19,zero
  d01078:	a8004526 	beq	r21,zero,d01190 <__ieee754_powf+0x1bc>
  d0107c:	002f883a 	mov	r23,zero
  d01080:	009fe034 	movhi	r2,32640
  d01084:	80803926 	beq	r16,r2,d0116c <__ieee754_powf+0x198>
  d01088:	008fe034 	movhi	r2,16256
  d0108c:	80803d26 	beq	r16,r2,d01184 <__ieee754_powf+0x1b0>
  d01090:	00900034 	movhi	r2,16384
  d01094:	20805326 	beq	r4,r2,d011e4 <__ieee754_powf+0x210>
  d01098:	008fc034 	movhi	r2,16128
  d0109c:	20802526 	beq	r4,r2,d01134 <__ieee754_powf+0x160>
  d010a0:	9809883a 	mov	r4,r19
  d010a4:	0d01e6c0 	call	d01e6c <fabsf>
  d010a8:	1009883a 	mov	r4,r2
  d010ac:	009fe034 	movhi	r2,32640
  d010b0:	88803c26 	beq	r17,r2,d011a4 <__ieee754_powf+0x1d0>
  d010b4:	88003b26 	beq	r17,zero,d011a4 <__ieee754_powf+0x1d0>
  d010b8:	014fe034 	movhi	r5,16256
  d010bc:	89403926 	beq	r17,r5,d011a4 <__ieee754_powf+0x1d0>
  d010c0:	a004d7fa 	srli	r2,r20,31
  d010c4:	10bfffc4 	addi	r2,r2,-1
  d010c8:	15c6b03a 	or	r3,r2,r23
  d010cc:	d8800215 	stw	r2,8(sp)
  d010d0:	1800661e 	bne	r3,zero,d0126c <__ieee754_powf+0x298>
  d010d4:	980b883a 	mov	r5,r19
  d010d8:	9809883a 	mov	r4,r19
  d010dc:	0d022980 	call	d02298 <__subsf3>
  d010e0:	1009883a 	mov	r4,r2
  d010e4:	100b883a 	mov	r5,r2
  d010e8:	0d0254c0 	call	d0254c <__divsf3>
  d010ec:	1039883a 	mov	fp,r2
  d010f0:	00000106 	br	d010f8 <__ieee754_powf+0x124>
  d010f4:	070fe034 	movhi	fp,16256
  d010f8:	e005883a 	mov	r2,fp
  d010fc:	dfc00f17 	ldw	ra,60(sp)
  d01100:	df000e17 	ldw	fp,56(sp)
  d01104:	ddc00d17 	ldw	r23,52(sp)
  d01108:	dd800c17 	ldw	r22,48(sp)
  d0110c:	dd400b17 	ldw	r21,44(sp)
  d01110:	dd000a17 	ldw	r20,40(sp)
  d01114:	dcc00917 	ldw	r19,36(sp)
  d01118:	dc800817 	ldw	r18,32(sp)
  d0111c:	dc400717 	ldw	r17,28(sp)
  d01120:	dc000617 	ldw	r16,24(sp)
  d01124:	dec01004 	addi	sp,sp,64
  d01128:	f800283a 	ret
  d0112c:	8839883a 	mov	fp,r17
  d01130:	003ff106 	br	d010f8 <__ieee754_powf+0x124>
  d01134:	a03fda16 	blt	r20,zero,d010a0 <__ieee754_powf+0xcc>
  d01138:	9809883a 	mov	r4,r19
  d0113c:	dfc00f17 	ldw	ra,60(sp)
  d01140:	df000e17 	ldw	fp,56(sp)
  d01144:	ddc00d17 	ldw	r23,52(sp)
  d01148:	dd800c17 	ldw	r22,48(sp)
  d0114c:	dd400b17 	ldw	r21,44(sp)
  d01150:	dd000a17 	ldw	r20,40(sp)
  d01154:	dcc00917 	ldw	r19,36(sp)
  d01158:	dc800817 	ldw	r18,32(sp)
  d0115c:	dc400717 	ldw	r17,28(sp)
  d01160:	dc000617 	ldw	r16,24(sp)
  d01164:	dec01004 	addi	sp,sp,64
  d01168:	0d01ae81 	jmpi	d01ae8 <__ieee754_sqrtf>
  d0116c:	008fe034 	movhi	r2,16256
  d01170:	88bfee26 	beq	r17,r2,d0112c <__ieee754_powf+0x158>
  d01174:	1440200e 	bge	r2,r17,d011f8 <__ieee754_powf+0x224>
  d01178:	903fdf0e 	bge	r18,zero,d010f8 <__ieee754_powf+0x124>
  d0117c:	0039883a 	mov	fp,zero
  d01180:	003fdd06 	br	d010f8 <__ieee754_powf+0x124>
  d01184:	90002f16 	blt	r18,zero,d01244 <__ieee754_powf+0x270>
  d01188:	9839883a 	mov	fp,r19
  d0118c:	003fda06 	br	d010f8 <__ieee754_powf+0x124>
  d01190:	0092e034 	movhi	r2,19328
  d01194:	10bfffc4 	addi	r2,r2,-1
  d01198:	14001b0e 	bge	r2,r16,d01208 <__ieee754_powf+0x234>
  d0119c:	05c00084 	movi	r23,2
  d011a0:	003fb706 	br	d01080 <__ieee754_powf+0xac>
  d011a4:	90000916 	blt	r18,zero,d011cc <__ieee754_powf+0x1f8>
  d011a8:	a8000226 	beq	r21,zero,d011b4 <__ieee754_powf+0x1e0>
  d011ac:	2039883a 	mov	fp,r4
  d011b0:	003fd106 	br	d010f8 <__ieee754_powf+0x124>
  d011b4:	00b02034 	movhi	r2,49280
  d011b8:	8885883a 	add	r2,r17,r2
  d011bc:	b884b03a 	or	r2,r23,r2
  d011c0:	1000251e 	bne	r2,zero,d01258 <__ieee754_powf+0x284>
  d011c4:	200b883a 	mov	r5,r4
  d011c8:	003fc406 	br	d010dc <__ieee754_powf+0x108>
  d011cc:	200b883a 	mov	r5,r4
  d011d0:	010fe034 	movhi	r4,16256
  d011d4:	0d0254c0 	call	d0254c <__divsf3>
  d011d8:	1009883a 	mov	r4,r2
  d011dc:	a83ff31e 	bne	r21,zero,d011ac <__ieee754_powf+0x1d8>
  d011e0:	003ff406 	br	d011b4 <__ieee754_powf+0x1e0>
  d011e4:	980b883a 	mov	r5,r19
  d011e8:	9809883a 	mov	r4,r19
  d011ec:	0d0236c0 	call	d0236c <__mulsf3>
  d011f0:	1039883a 	mov	fp,r2
  d011f4:	003fc006 	br	d010f8 <__ieee754_powf+0x124>
  d011f8:	903fe00e 	bge	r18,zero,d0117c <__ieee754_powf+0x1a8>
  d011fc:	e0a0003c 	xorhi	r2,fp,32768
  d01200:	1039883a 	mov	fp,r2
  d01204:	003fbc06 	br	d010f8 <__ieee754_powf+0x124>
  d01208:	008fe034 	movhi	r2,16256
  d0120c:	10bfffc4 	addi	r2,r2,-1
  d01210:	1400060e 	bge	r2,r16,d0122c <__ieee754_powf+0x258>
  d01214:	8007d5fa 	srai	r3,r16,23
  d01218:	00802584 	movi	r2,150
  d0121c:	10c5c83a 	sub	r2,r2,r3
  d01220:	8087d83a 	sra	r3,r16,r2
  d01224:	1884983a 	sll	r2,r3,r2
  d01228:	80800226 	beq	r16,r2,d01234 <__ieee754_powf+0x260>
  d0122c:	002f883a 	mov	r23,zero
  d01230:	003f9506 	br	d01088 <__ieee754_powf+0xb4>
  d01234:	18c0004c 	andi	r3,r3,1
  d01238:	00800084 	movi	r2,2
  d0123c:	10efc83a 	sub	r23,r2,r3
  d01240:	003f9106 	br	d01088 <__ieee754_powf+0xb4>
  d01244:	8009883a 	mov	r4,r16
  d01248:	980b883a 	mov	r5,r19
  d0124c:	0d0254c0 	call	d0254c <__divsf3>
  d01250:	1039883a 	mov	fp,r2
  d01254:	003fa806 	br	d010f8 <__ieee754_powf+0x124>
  d01258:	00800044 	movi	r2,1
  d0125c:	b8bfd31e 	bne	r23,r2,d011ac <__ieee754_powf+0x1d8>
  d01260:	20a0003c 	xorhi	r2,r4,32768
  d01264:	1039883a 	mov	fp,r2
  d01268:	003fa306 	br	d010f8 <__ieee754_powf+0x124>
  d0126c:	00934034 	movhi	r2,19712
  d01270:	14000a0e 	bge	r2,r16,d0129c <__ieee754_powf+0x2c8>
  d01274:	008fe034 	movhi	r2,16256
  d01278:	10bffdc4 	addi	r2,r2,-9
  d0127c:	1441b016 	blt	r2,r17,d01940 <__ieee754_powf+0x96c>
  d01280:	903fbe0e 	bge	r18,zero,d0117c <__ieee754_powf+0x1a8>
  d01284:	011c52b4 	movhi	r4,29002
  d01288:	213cb284 	addi	r4,r4,-3382
  d0128c:	200b883a 	mov	r5,r4
  d01290:	0d0236c0 	call	d0236c <__mulsf3>
  d01294:	1039883a 	mov	fp,r2
  d01298:	003f9706 	br	d010f8 <__ieee754_powf+0x124>
  d0129c:	00802034 	movhi	r2,128
  d012a0:	10bfffc4 	addi	r2,r2,-1
  d012a4:	1441a10e 	bge	r2,r17,d0192c <__ieee754_powf+0x958>
  d012a8:	0009883a 	mov	r4,zero
  d012ac:	8805d5fa 	srai	r2,r17,23
  d012b0:	00c02034 	movhi	r3,128
  d012b4:	18ffffc4 	addi	r3,r3,-1
  d012b8:	88c6703a 	and	r3,r17,r3
  d012bc:	2089883a 	add	r4,r4,r2
  d012c0:	20bfe044 	addi	r2,r4,-127
  d012c4:	d8800015 	stw	r2,0(sp)
  d012c8:	00800774 	movhi	r2,29
  d012cc:	10b11c44 	addi	r2,r2,-15247
  d012d0:	1c0fe034 	orhi	r16,r3,16256
  d012d4:	10c1790e 	bge	r2,r3,d018bc <__ieee754_powf+0x8e8>
  d012d8:	008017b4 	movhi	r2,94
  d012dc:	10acf584 	addi	r2,r2,-19498
  d012e0:	10c17216 	blt	r2,r3,d018ac <__ieee754_powf+0x8d8>
  d012e4:	00800934 	movhi	r2,36
  d012e8:	05000044 	movi	r20,1
  d012ec:	d8800115 	stw	r2,4(sp)
  d012f0:	a529883a 	add	r20,r20,r20
  d012f4:	a529883a 	add	r20,r20,r20
  d012f8:	d0a00104 	addi	r2,gp,-32764
  d012fc:	a085883a 	add	r2,r20,r2
  d01300:	14800017 	ldw	r18,0(r2)
  d01304:	8009883a 	mov	r4,r16
  d01308:	8023d07a 	srai	r17,r16,1
  d0130c:	900b883a 	mov	r5,r18
  d01310:	0d022980 	call	d02298 <__subsf3>
  d01314:	8009883a 	mov	r4,r16
  d01318:	900b883a 	mov	r5,r18
  d0131c:	1027883a 	mov	r19,r2
  d01320:	0d023080 	call	d02308 <__addsf3>
  d01324:	100b883a 	mov	r5,r2
  d01328:	010fe034 	movhi	r4,16256
  d0132c:	0d0254c0 	call	d0254c <__divsf3>
  d01330:	100b883a 	mov	r5,r2
  d01334:	9809883a 	mov	r4,r19
  d01338:	102b883a 	mov	r21,r2
  d0133c:	0d0236c0 	call	d0236c <__mulsf3>
  d01340:	d8800315 	stw	r2,12(sp)
  d01344:	d8c00317 	ldw	r3,12(sp)
  d01348:	00bc0004 	movi	r2,-4096
  d0134c:	8c480034 	orhi	r17,r17,8192
  d01350:	10ec703a 	and	r22,r2,r3
  d01354:	d8800117 	ldw	r2,4(sp)
  d01358:	b009883a 	mov	r4,r22
  d0135c:	88a3883a 	add	r17,r17,r2
  d01360:	880b883a 	mov	r5,r17
  d01364:	0d0236c0 	call	d0236c <__mulsf3>
  d01368:	100b883a 	mov	r5,r2
  d0136c:	9809883a 	mov	r4,r19
  d01370:	0d022980 	call	d02298 <__subsf3>
  d01374:	8809883a 	mov	r4,r17
  d01378:	900b883a 	mov	r5,r18
  d0137c:	1027883a 	mov	r19,r2
  d01380:	0d022980 	call	d02298 <__subsf3>
  d01384:	100b883a 	mov	r5,r2
  d01388:	8009883a 	mov	r4,r16
  d0138c:	0d022980 	call	d02298 <__subsf3>
  d01390:	100b883a 	mov	r5,r2
  d01394:	b009883a 	mov	r4,r22
  d01398:	0d0236c0 	call	d0236c <__mulsf3>
  d0139c:	100b883a 	mov	r5,r2
  d013a0:	9809883a 	mov	r4,r19
  d013a4:	0d022980 	call	d02298 <__subsf3>
  d013a8:	100b883a 	mov	r5,r2
  d013ac:	a809883a 	mov	r4,r21
  d013b0:	0d0236c0 	call	d0236c <__mulsf3>
  d013b4:	d9000317 	ldw	r4,12(sp)
  d013b8:	d8800415 	stw	r2,16(sp)
  d013bc:	05501034 	movhi	r21,16448
  d013c0:	200b883a 	mov	r5,r4
  d013c4:	0d0236c0 	call	d0236c <__mulsf3>
  d013c8:	1021883a 	mov	r16,r2
  d013cc:	1009883a 	mov	r4,r2
  d013d0:	100b883a 	mov	r5,r2
  d013d4:	0d0236c0 	call	d0236c <__mulsf3>
  d013d8:	8009883a 	mov	r4,r16
  d013dc:	014f9534 	movhi	r5,15956
  d013e0:	297c5084 	addi	r5,r5,-3774
  d013e4:	1023883a 	mov	r17,r2
  d013e8:	0d0236c0 	call	d0236c <__mulsf3>
  d013ec:	1009883a 	mov	r4,r2
  d013f0:	014f9b34 	movhi	r5,15980
  d013f4:	294c9544 	addi	r5,r5,12885
  d013f8:	0d023080 	call	d02308 <__addsf3>
  d013fc:	100b883a 	mov	r5,r2
  d01400:	8009883a 	mov	r4,r16
  d01404:	0d0236c0 	call	d0236c <__mulsf3>
  d01408:	1009883a 	mov	r4,r2
  d0140c:	014fa334 	movhi	r5,16012
  d01410:	2968c144 	addi	r5,r5,-23803
  d01414:	0d023080 	call	d02308 <__addsf3>
  d01418:	100b883a 	mov	r5,r2
  d0141c:	8009883a 	mov	r4,r16
  d01420:	0d0236c0 	call	d0236c <__mulsf3>
  d01424:	1009883a 	mov	r4,r2
  d01428:	014faaf4 	movhi	r5,16043
  d0142c:	296aaac4 	addi	r5,r5,-21845
  d01430:	0d023080 	call	d02308 <__addsf3>
  d01434:	100b883a 	mov	r5,r2
  d01438:	8009883a 	mov	r4,r16
  d0143c:	0d0236c0 	call	d0236c <__mulsf3>
  d01440:	1009883a 	mov	r4,r2
  d01444:	014fb6f4 	movhi	r5,16091
  d01448:	295b6dc4 	addi	r5,r5,28087
  d0144c:	0d023080 	call	d02308 <__addsf3>
  d01450:	100b883a 	mov	r5,r2
  d01454:	8009883a 	mov	r4,r16
  d01458:	0d0236c0 	call	d0236c <__mulsf3>
  d0145c:	1009883a 	mov	r4,r2
  d01460:	014fc6b4 	movhi	r5,16154
  d01464:	29666684 	addi	r5,r5,-26214
  d01468:	0d023080 	call	d02308 <__addsf3>
  d0146c:	100b883a 	mov	r5,r2
  d01470:	8809883a 	mov	r4,r17
  d01474:	0d0236c0 	call	d0236c <__mulsf3>
  d01478:	d9000317 	ldw	r4,12(sp)
  d0147c:	b00b883a 	mov	r5,r22
  d01480:	1021883a 	mov	r16,r2
  d01484:	0d023080 	call	d02308 <__addsf3>
  d01488:	d9000417 	ldw	r4,16(sp)
  d0148c:	100b883a 	mov	r5,r2
  d01490:	0d0236c0 	call	d0236c <__mulsf3>
  d01494:	100b883a 	mov	r5,r2
  d01498:	8009883a 	mov	r4,r16
  d0149c:	0d023080 	call	d02308 <__addsf3>
  d014a0:	b009883a 	mov	r4,r22
  d014a4:	b00b883a 	mov	r5,r22
  d014a8:	1025883a 	mov	r18,r2
  d014ac:	0d0236c0 	call	d0236c <__mulsf3>
  d014b0:	1009883a 	mov	r4,r2
  d014b4:	a80b883a 	mov	r5,r21
  d014b8:	1027883a 	mov	r19,r2
  d014bc:	0d023080 	call	d02308 <__addsf3>
  d014c0:	100b883a 	mov	r5,r2
  d014c4:	9009883a 	mov	r4,r18
  d014c8:	0d023080 	call	d02308 <__addsf3>
  d014cc:	00fc0004 	movi	r3,-4096
  d014d0:	10e2703a 	and	r17,r2,r3
  d014d4:	880b883a 	mov	r5,r17
  d014d8:	b009883a 	mov	r4,r22
  d014dc:	0d0236c0 	call	d0236c <__mulsf3>
  d014e0:	d9000417 	ldw	r4,16(sp)
  d014e4:	880b883a 	mov	r5,r17
  d014e8:	d8800515 	stw	r2,20(sp)
  d014ec:	0d0236c0 	call	d0236c <__mulsf3>
  d014f0:	8809883a 	mov	r4,r17
  d014f4:	a80b883a 	mov	r5,r21
  d014f8:	1021883a 	mov	r16,r2
  d014fc:	0d022980 	call	d02298 <__subsf3>
  d01500:	1009883a 	mov	r4,r2
  d01504:	980b883a 	mov	r5,r19
  d01508:	0d022980 	call	d02298 <__subsf3>
  d0150c:	100b883a 	mov	r5,r2
  d01510:	9009883a 	mov	r4,r18
  d01514:	0d022980 	call	d02298 <__subsf3>
  d01518:	d9000317 	ldw	r4,12(sp)
  d0151c:	100b883a 	mov	r5,r2
  d01520:	0d0236c0 	call	d0236c <__mulsf3>
  d01524:	100b883a 	mov	r5,r2
  d01528:	8009883a 	mov	r4,r16
  d0152c:	0d023080 	call	d02308 <__addsf3>
  d01530:	d9000517 	ldw	r4,20(sp)
  d01534:	100b883a 	mov	r5,r2
  d01538:	1027883a 	mov	r19,r2
  d0153c:	0d023080 	call	d02308 <__addsf3>
  d01540:	00fc0004 	movi	r3,-4096
  d01544:	10e2703a 	and	r17,r2,r3
  d01548:	8809883a 	mov	r4,r17
  d0154c:	014fddb4 	movhi	r5,16246
  d01550:	294e0004 	addi	r5,r5,14336
  d01554:	0d0236c0 	call	d0236c <__mulsf3>
  d01558:	8809883a 	mov	r4,r17
  d0155c:	014da7b4 	movhi	r5,13982
  d01560:	2970e804 	addi	r5,r5,-15456
  d01564:	102b883a 	mov	r21,r2
  d01568:	0d0236c0 	call	d0236c <__mulsf3>
  d0156c:	d9400517 	ldw	r5,20(sp)
  d01570:	8809883a 	mov	r4,r17
  d01574:	1025883a 	mov	r18,r2
  d01578:	0d022980 	call	d02298 <__subsf3>
  d0157c:	100b883a 	mov	r5,r2
  d01580:	9809883a 	mov	r4,r19
  d01584:	0d022980 	call	d02298 <__subsf3>
  d01588:	1009883a 	mov	r4,r2
  d0158c:	014fddb4 	movhi	r5,16246
  d01590:	294e13c4 	addi	r5,r5,14415
  d01594:	0d0236c0 	call	d0236c <__mulsf3>
  d01598:	100b883a 	mov	r5,r2
  d0159c:	9009883a 	mov	r4,r18
  d015a0:	0d023080 	call	d02308 <__addsf3>
  d015a4:	d0e00304 	addi	r3,gp,-32756
  d015a8:	a0c7883a 	add	r3,r20,r3
  d015ac:	19400017 	ldw	r5,0(r3)
  d015b0:	1009883a 	mov	r4,r2
  d015b4:	0d023080 	call	d02308 <__addsf3>
  d015b8:	d9000017 	ldw	r4,0(sp)
  d015bc:	1023883a 	mov	r17,r2
  d015c0:	0d028a00 	call	d028a0 <__floatsisf>
  d015c4:	1021883a 	mov	r16,r2
  d015c8:	d0a00504 	addi	r2,gp,-32748
  d015cc:	a0a9883a 	add	r20,r20,r2
  d015d0:	a4800017 	ldw	r18,0(r20)
  d015d4:	a809883a 	mov	r4,r21
  d015d8:	880b883a 	mov	r5,r17
  d015dc:	0d023080 	call	d02308 <__addsf3>
  d015e0:	1009883a 	mov	r4,r2
  d015e4:	900b883a 	mov	r5,r18
  d015e8:	0d023080 	call	d02308 <__addsf3>
  d015ec:	100b883a 	mov	r5,r2
  d015f0:	8009883a 	mov	r4,r16
  d015f4:	0d023080 	call	d02308 <__addsf3>
  d015f8:	00fc0004 	movi	r3,-4096
  d015fc:	10c4703a 	and	r2,r2,r3
  d01600:	800b883a 	mov	r5,r16
  d01604:	1009883a 	mov	r4,r2
  d01608:	1027883a 	mov	r19,r2
  d0160c:	0d022980 	call	d02298 <__subsf3>
  d01610:	1009883a 	mov	r4,r2
  d01614:	900b883a 	mov	r5,r18
  d01618:	0d022980 	call	d02298 <__subsf3>
  d0161c:	1009883a 	mov	r4,r2
  d01620:	a80b883a 	mov	r5,r21
  d01624:	0d022980 	call	d02298 <__subsf3>
  d01628:	100b883a 	mov	r5,r2
  d0162c:	8809883a 	mov	r4,r17
  d01630:	0d022980 	call	d02298 <__subsf3>
  d01634:	1021883a 	mov	r16,r2
  d01638:	d8c00217 	ldw	r3,8(sp)
  d0163c:	b8bfffc4 	addi	r2,r23,-1
  d01640:	1884b03a 	or	r2,r3,r2
  d01644:	1000a11e 	bne	r2,zero,d018cc <__ieee754_powf+0x8f8>
  d01648:	05efe034 	movhi	r23,49024
  d0164c:	047c0004 	movi	r17,-4096
  d01650:	8f22703a 	and	r17,r17,fp
  d01654:	e009883a 	mov	r4,fp
  d01658:	880b883a 	mov	r5,r17
  d0165c:	0d022980 	call	d02298 <__subsf3>
  d01660:	100b883a 	mov	r5,r2
  d01664:	9809883a 	mov	r4,r19
  d01668:	0d0236c0 	call	d0236c <__mulsf3>
  d0166c:	8009883a 	mov	r4,r16
  d01670:	e00b883a 	mov	r5,fp
  d01674:	1025883a 	mov	r18,r2
  d01678:	0d0236c0 	call	d0236c <__mulsf3>
  d0167c:	100b883a 	mov	r5,r2
  d01680:	9009883a 	mov	r4,r18
  d01684:	0d023080 	call	d02308 <__addsf3>
  d01688:	9809883a 	mov	r4,r19
  d0168c:	880b883a 	mov	r5,r17
  d01690:	1021883a 	mov	r16,r2
  d01694:	0d0236c0 	call	d0236c <__mulsf3>
  d01698:	100b883a 	mov	r5,r2
  d0169c:	8009883a 	mov	r4,r16
  d016a0:	1027883a 	mov	r19,r2
  d016a4:	0d023080 	call	d02308 <__addsf3>
  d016a8:	1023883a 	mov	r17,r2
  d016ac:	1029883a 	mov	r20,r2
  d016b0:	00a00034 	movhi	r2,32768
  d016b4:	10bfffc4 	addi	r2,r2,-1
  d016b8:	88a4703a 	and	r18,r17,r2
  d016bc:	8039883a 	mov	fp,r16
  d016c0:	982b883a 	mov	r21,r19
  d016c4:	8807883a 	mov	r3,r17
  d016c8:	0440a30e 	bge	zero,r17,d01958 <__ieee754_powf+0x984>
  d016cc:	0090c034 	movhi	r2,17152
  d016d0:	14808c16 	blt	r2,r18,d01904 <__ieee754_powf+0x930>
  d016d4:	90807f26 	beq	r18,r2,d018d4 <__ieee754_powf+0x900>
  d016d8:	008fc034 	movhi	r2,16128
  d016dc:	1480a816 	blt	r2,r18,d01980 <__ieee754_powf+0x9ac>
  d016e0:	002d883a 	mov	r22,zero
  d016e4:	0029883a 	mov	r20,zero
  d016e8:	047c0004 	movi	r17,-4096
  d016ec:	88e2703a 	and	r17,r17,r3
  d016f0:	8809883a 	mov	r4,r17
  d016f4:	014fcc74 	movhi	r5,16177
  d016f8:	295c8004 	addi	r5,r5,29184
  d016fc:	0d0236c0 	call	d0236c <__mulsf3>
  d01700:	8809883a 	mov	r4,r17
  d01704:	a80b883a 	mov	r5,r21
  d01708:	1027883a 	mov	r19,r2
  d0170c:	0d022980 	call	d02298 <__subsf3>
  d01710:	100b883a 	mov	r5,r2
  d01714:	e009883a 	mov	r4,fp
  d01718:	0d022980 	call	d02298 <__subsf3>
  d0171c:	1009883a 	mov	r4,r2
  d01720:	014fcc74 	movhi	r5,16177
  d01724:	295c8604 	addi	r5,r5,29208
  d01728:	0d0236c0 	call	d0236c <__mulsf3>
  d0172c:	8809883a 	mov	r4,r17
  d01730:	014d7034 	movhi	r5,13760
  d01734:	296fa304 	addi	r5,r5,-16756
  d01738:	1025883a 	mov	r18,r2
  d0173c:	0d0236c0 	call	d0236c <__mulsf3>
  d01740:	100b883a 	mov	r5,r2
  d01744:	9009883a 	mov	r4,r18
  d01748:	0d023080 	call	d02308 <__addsf3>
  d0174c:	100b883a 	mov	r5,r2
  d01750:	9809883a 	mov	r4,r19
  d01754:	1021883a 	mov	r16,r2
  d01758:	0d023080 	call	d02308 <__addsf3>
  d0175c:	1009883a 	mov	r4,r2
  d01760:	980b883a 	mov	r5,r19
  d01764:	1025883a 	mov	r18,r2
  d01768:	0d022980 	call	d02298 <__subsf3>
  d0176c:	100b883a 	mov	r5,r2
  d01770:	8009883a 	mov	r4,r16
  d01774:	0d022980 	call	d02298 <__subsf3>
  d01778:	9009883a 	mov	r4,r18
  d0177c:	900b883a 	mov	r5,r18
  d01780:	1027883a 	mov	r19,r2
  d01784:	0d0236c0 	call	d0236c <__mulsf3>
  d01788:	1009883a 	mov	r4,r2
  d0178c:	014cccb4 	movhi	r5,13106
  d01790:	296ed304 	addi	r5,r5,-17588
  d01794:	1021883a 	mov	r16,r2
  d01798:	0d0236c0 	call	d0236c <__mulsf3>
  d0179c:	1009883a 	mov	r4,r2
  d017a0:	014d77b4 	movhi	r5,13790
  d017a4:	297a8384 	addi	r5,r5,-5618
  d017a8:	0d022980 	call	d02298 <__subsf3>
  d017ac:	100b883a 	mov	r5,r2
  d017b0:	8009883a 	mov	r4,r16
  d017b4:	0d0236c0 	call	d0236c <__mulsf3>
  d017b8:	1009883a 	mov	r4,r2
  d017bc:	014e22f4 	movhi	r5,14475
  d017c0:	296cd544 	addi	r5,r5,-19627
  d017c4:	0d023080 	call	d02308 <__addsf3>
  d017c8:	100b883a 	mov	r5,r2
  d017cc:	8009883a 	mov	r4,r16
  d017d0:	0d0236c0 	call	d0236c <__mulsf3>
  d017d4:	1009883a 	mov	r4,r2
  d017d8:	014ecdb4 	movhi	r5,15158
  d017dc:	2942d844 	addi	r5,r5,2913
  d017e0:	0d022980 	call	d02298 <__subsf3>
  d017e4:	100b883a 	mov	r5,r2
  d017e8:	8009883a 	mov	r4,r16
  d017ec:	0d0236c0 	call	d0236c <__mulsf3>
  d017f0:	1009883a 	mov	r4,r2
  d017f4:	014f8af4 	movhi	r5,15915
  d017f8:	296aaac4 	addi	r5,r5,-21845
  d017fc:	0d023080 	call	d02308 <__addsf3>
  d01800:	100b883a 	mov	r5,r2
  d01804:	8009883a 	mov	r4,r16
  d01808:	0d0236c0 	call	d0236c <__mulsf3>
  d0180c:	100b883a 	mov	r5,r2
  d01810:	9009883a 	mov	r4,r18
  d01814:	0d022980 	call	d02298 <__subsf3>
  d01818:	1021883a 	mov	r16,r2
  d0181c:	9009883a 	mov	r4,r18
  d01820:	100b883a 	mov	r5,r2
  d01824:	0d0236c0 	call	d0236c <__mulsf3>
  d01828:	8009883a 	mov	r4,r16
  d0182c:	01500034 	movhi	r5,16384
  d01830:	1023883a 	mov	r17,r2
  d01834:	0d022980 	call	d02298 <__subsf3>
  d01838:	100b883a 	mov	r5,r2
  d0183c:	8809883a 	mov	r4,r17
  d01840:	0d0254c0 	call	d0254c <__divsf3>
  d01844:	9009883a 	mov	r4,r18
  d01848:	980b883a 	mov	r5,r19
  d0184c:	1021883a 	mov	r16,r2
  d01850:	0d0236c0 	call	d0236c <__mulsf3>
  d01854:	100b883a 	mov	r5,r2
  d01858:	9809883a 	mov	r4,r19
  d0185c:	0d023080 	call	d02308 <__addsf3>
  d01860:	100b883a 	mov	r5,r2
  d01864:	8009883a 	mov	r4,r16
  d01868:	0d022980 	call	d02298 <__subsf3>
  d0186c:	1009883a 	mov	r4,r2
  d01870:	900b883a 	mov	r5,r18
  d01874:	0d022980 	call	d02298 <__subsf3>
  d01878:	100b883a 	mov	r5,r2
  d0187c:	010fe034 	movhi	r4,16256
  d01880:	0d022980 	call	d02298 <__subsf3>
  d01884:	a087883a 	add	r3,r20,r2
  d01888:	1009883a 	mov	r4,r2
  d0188c:	1805d5fa 	srai	r2,r3,23
  d01890:	0080920e 	bge	zero,r2,d01adc <__ieee754_powf+0xb08>
  d01894:	1805883a 	mov	r2,r3
  d01898:	1009883a 	mov	r4,r2
  d0189c:	b80b883a 	mov	r5,r23
  d018a0:	0d0236c0 	call	d0236c <__mulsf3>
  d018a4:	1039883a 	mov	fp,r2
  d018a8:	003e1306 	br	d010f8 <__ieee754_powf+0x124>
  d018ac:	00bfe034 	movhi	r2,65408
  d018b0:	213fe084 	addi	r4,r4,-126
  d018b4:	80a1883a 	add	r16,r16,r2
  d018b8:	d9000015 	stw	r4,0(sp)
  d018bc:	00c00134 	movhi	r3,4
  d018c0:	0029883a 	mov	r20,zero
  d018c4:	d8c00115 	stw	r3,4(sp)
  d018c8:	003e8906 	br	d012f0 <__ieee754_powf+0x31c>
  d018cc:	05cfe034 	movhi	r23,16256
  d018d0:	003f5e06 	br	d0164c <__ieee754_powf+0x678>
  d018d4:	8009883a 	mov	r4,r16
  d018d8:	014cce74 	movhi	r5,13113
  d018dc:	296a8f04 	addi	r5,r5,-21956
  d018e0:	0d023080 	call	d02308 <__addsf3>
  d018e4:	8809883a 	mov	r4,r17
  d018e8:	980b883a 	mov	r5,r19
  d018ec:	1021883a 	mov	r16,r2
  d018f0:	0d022980 	call	d02298 <__subsf3>
  d018f4:	100b883a 	mov	r5,r2
  d018f8:	8009883a 	mov	r4,r16
  d018fc:	0d027380 	call	d02738 <__gtsf2>
  d01900:	00801f0e 	bge	zero,r2,d01980 <__ieee754_powf+0x9ac>
  d01904:	041c52b4 	movhi	r16,29002
  d01908:	843cb284 	addi	r16,r16,-3382
  d0190c:	b809883a 	mov	r4,r23
  d01910:	800b883a 	mov	r5,r16
  d01914:	0d0236c0 	call	d0236c <__mulsf3>
  d01918:	1009883a 	mov	r4,r2
  d0191c:	800b883a 	mov	r5,r16
  d01920:	0d0236c0 	call	d0236c <__mulsf3>
  d01924:	1039883a 	mov	fp,r2
  d01928:	003df306 	br	d010f8 <__ieee754_powf+0x124>
  d0192c:	0152e034 	movhi	r5,19328
  d01930:	0d0236c0 	call	d0236c <__mulsf3>
  d01934:	1023883a 	mov	r17,r2
  d01938:	013ffa04 	movi	r4,-24
  d0193c:	003e5b06 	br	d012ac <__ieee754_powf+0x2d8>
  d01940:	008fe034 	movhi	r2,16256
  d01944:	108001c4 	addi	r2,r2,7
  d01948:	14402c0e 	bge	r2,r17,d019fc <__ieee754_powf+0xa28>
  d0194c:	04be4d16 	blt	zero,r18,d01284 <__ieee754_powf+0x2b0>
  d01950:	0039883a 	mov	fp,zero
  d01954:	003de806 	br	d010f8 <__ieee754_powf+0x124>
  d01958:	0090c5b4 	movhi	r2,17174
  d0195c:	14802416 	blt	r2,r18,d019f0 <__ieee754_powf+0xa1c>
  d01960:	90bf5d1e 	bne	r18,r2,d016d8 <__ieee754_powf+0x704>
  d01964:	8809883a 	mov	r4,r17
  d01968:	980b883a 	mov	r5,r19
  d0196c:	0d022980 	call	d02298 <__subsf3>
  d01970:	100b883a 	mov	r5,r2
  d01974:	8009883a 	mov	r4,r16
  d01978:	0d028280 	call	d02828 <__lesf2>
  d0197c:	00801c0e 	bge	zero,r2,d019f0 <__ieee754_powf+0xa1c>
  d01980:	9005d5fa 	srai	r2,r18,23
  d01984:	01002034 	movhi	r4,128
  d01988:	01402034 	movhi	r5,128
  d0198c:	297fffc4 	addi	r5,r5,-1
  d01990:	10bfe084 	addi	r2,r2,-126
  d01994:	2089d83a 	sra	r4,r4,r2
  d01998:	008005c4 	movi	r2,23
  d0199c:	a109883a 	add	r4,r20,r4
  d019a0:	2006d5fa 	srli	r3,r4,23
  d019a4:	214c703a 	and	r6,r4,r5
  d019a8:	31802034 	orhi	r6,r6,128
  d019ac:	18c03fcc 	andi	r3,r3,255
  d019b0:	18ffe044 	addi	r3,r3,-127
  d019b4:	28cbd83a 	sra	r5,r5,r3
  d019b8:	10c5c83a 	sub	r2,r2,r3
  d019bc:	30add83a 	sra	r22,r6,r2
  d019c0:	014a303a 	nor	r5,zero,r5
  d019c4:	214a703a 	and	r5,r4,r5
  d019c8:	a0004216 	blt	r20,zero,d01ad4 <__ieee754_powf+0xb00>
  d019cc:	a809883a 	mov	r4,r21
  d019d0:	0d022980 	call	d02298 <__subsf3>
  d019d4:	100b883a 	mov	r5,r2
  d019d8:	e009883a 	mov	r4,fp
  d019dc:	b02895fa 	slli	r20,r22,23
  d019e0:	102b883a 	mov	r21,r2
  d019e4:	0d023080 	call	d02308 <__addsf3>
  d019e8:	1007883a 	mov	r3,r2
  d019ec:	003f3e06 	br	d016e8 <__ieee754_powf+0x714>
  d019f0:	040368b4 	movhi	r16,3490
  d019f4:	84109804 	addi	r16,r16,16992
  d019f8:	003fc406 	br	d0190c <__ieee754_powf+0x938>
  d019fc:	0d022980 	call	d02298 <__subsf3>
  d01a00:	1021883a 	mov	r16,r2
  d01a04:	1009883a 	mov	r4,r2
  d01a08:	014fee74 	movhi	r5,16313
  d01a0c:	296a8004 	addi	r5,r5,-22016
  d01a10:	0d0236c0 	call	d0236c <__mulsf3>
  d01a14:	8009883a 	mov	r4,r16
  d01a18:	014dbb74 	movhi	r5,14061
  d01a1c:	29695c04 	addi	r5,r5,-23184
  d01a20:	1023883a 	mov	r17,r2
  d01a24:	0d0236c0 	call	d0236c <__mulsf3>
  d01a28:	8009883a 	mov	r4,r16
  d01a2c:	800b883a 	mov	r5,r16
  d01a30:	1025883a 	mov	r18,r2
  d01a34:	0d0236c0 	call	d0236c <__mulsf3>
  d01a38:	8009883a 	mov	r4,r16
  d01a3c:	016fa034 	movhi	r5,48768
  d01a40:	1027883a 	mov	r19,r2
  d01a44:	0d0236c0 	call	d0236c <__mulsf3>
  d01a48:	1009883a 	mov	r4,r2
  d01a4c:	014faaf4 	movhi	r5,16043
  d01a50:	296aaac4 	addi	r5,r5,-21845
  d01a54:	0d023080 	call	d02308 <__addsf3>
  d01a58:	100b883a 	mov	r5,r2
  d01a5c:	8009883a 	mov	r4,r16
  d01a60:	0d0236c0 	call	d0236c <__mulsf3>
  d01a64:	100b883a 	mov	r5,r2
  d01a68:	010fc034 	movhi	r4,16128
  d01a6c:	0d022980 	call	d02298 <__subsf3>
  d01a70:	100b883a 	mov	r5,r2
  d01a74:	9809883a 	mov	r4,r19
  d01a78:	0d0236c0 	call	d0236c <__mulsf3>
  d01a7c:	1009883a 	mov	r4,r2
  d01a80:	016fee74 	movhi	r5,49081
  d01a84:	296a8ec4 	addi	r5,r5,-21957
  d01a88:	0d0236c0 	call	d0236c <__mulsf3>
  d01a8c:	100b883a 	mov	r5,r2
  d01a90:	9009883a 	mov	r4,r18
  d01a94:	0d023080 	call	d02308 <__addsf3>
  d01a98:	100b883a 	mov	r5,r2
  d01a9c:	8809883a 	mov	r4,r17
  d01aa0:	1021883a 	mov	r16,r2
  d01aa4:	0d023080 	call	d02308 <__addsf3>
  d01aa8:	00fc0004 	movi	r3,-4096
  d01aac:	10c4703a 	and	r2,r2,r3
  d01ab0:	1009883a 	mov	r4,r2
  d01ab4:	880b883a 	mov	r5,r17
  d01ab8:	1027883a 	mov	r19,r2
  d01abc:	0d022980 	call	d02298 <__subsf3>
  d01ac0:	100b883a 	mov	r5,r2
  d01ac4:	8009883a 	mov	r4,r16
  d01ac8:	0d022980 	call	d02298 <__subsf3>
  d01acc:	1021883a 	mov	r16,r2
  d01ad0:	003ed906 	br	d01638 <__ieee754_powf+0x664>
  d01ad4:	05adc83a 	sub	r22,zero,r22
  d01ad8:	003fbc06 	br	d019cc <__ieee754_powf+0x9f8>
  d01adc:	b00b883a 	mov	r5,r22
  d01ae0:	0d01eb80 	call	d01eb8 <scalbnf>
  d01ae4:	003f6c06 	br	d01898 <__ieee754_powf+0x8c4>

00d01ae8 <__ieee754_sqrtf>:
  d01ae8:	00a00034 	movhi	r2,32768
  d01aec:	10bfffc4 	addi	r2,r2,-1
  d01af0:	defffe04 	addi	sp,sp,-8
  d01af4:	208c703a 	and	r6,r4,r2
  d01af8:	00dfe034 	movhi	r3,32640
  d01afc:	18ffffc4 	addi	r3,r3,-1
  d01b00:	dc000015 	stw	r16,0(sp)
  d01b04:	dfc00115 	stw	ra,4(sp)
  d01b08:	2021883a 	mov	r16,r4
  d01b0c:	200b883a 	mov	r5,r4
  d01b10:	19800a2e 	bgeu	r3,r6,d01b3c <__ieee754_sqrtf+0x54>
  d01b14:	0d0236c0 	call	d0236c <__mulsf3>
  d01b18:	100b883a 	mov	r5,r2
  d01b1c:	8009883a 	mov	r4,r16
  d01b20:	0d023080 	call	d02308 <__addsf3>
  d01b24:	1021883a 	mov	r16,r2
  d01b28:	8005883a 	mov	r2,r16
  d01b2c:	dfc00117 	ldw	ra,4(sp)
  d01b30:	dc000017 	ldw	r16,0(sp)
  d01b34:	dec00204 	addi	sp,sp,8
  d01b38:	f800283a 	ret
  d01b3c:	303ffa26 	beq	r6,zero,d01b28 <__ieee754_sqrtf+0x40>
  d01b40:	20003b16 	blt	r4,zero,d01c30 <__ieee754_sqrtf+0x148>
  d01b44:	00802034 	movhi	r2,128
  d01b48:	10bfffc4 	addi	r2,r2,-1
  d01b4c:	2007d5fa 	srai	r3,r4,23
  d01b50:	11800936 	bltu	r2,r6,d01b78 <__ieee754_sqrtf+0x90>
  d01b54:	2080202c 	andhi	r2,r4,128
  d01b58:	10003c1e 	bne	r2,zero,d01c4c <__ieee754_sqrtf+0x164>
  d01b5c:	0009883a 	mov	r4,zero
  d01b60:	294b883a 	add	r5,r5,r5
  d01b64:	2880202c 	andhi	r2,r5,128
  d01b68:	21000044 	addi	r4,r4,1
  d01b6c:	103ffc26 	beq	r2,zero,d01b60 <__ieee754_sqrtf+0x78>
  d01b70:	1905c83a 	sub	r2,r3,r4
  d01b74:	10c00044 	addi	r3,r2,1
  d01b78:	1a7fe044 	addi	r9,r3,-127
  d01b7c:	48c0004c 	andi	r3,r9,1
  d01b80:	00802034 	movhi	r2,128
  d01b84:	10bfffc4 	addi	r2,r2,-1
  d01b88:	2884703a 	and	r2,r5,r2
  d01b8c:	1807003a 	cmpeq	r3,r3,zero
  d01b90:	10802034 	orhi	r2,r2,128
  d01b94:	18002426 	beq	r3,zero,d01c28 <__ieee754_sqrtf+0x140>
  d01b98:	1085883a 	add	r2,r2,r2
  d01b9c:	01404034 	movhi	r5,256
  d01ba0:	000f883a 	mov	r7,zero
  d01ba4:	0007883a 	mov	r3,zero
  d01ba8:	000d883a 	mov	r6,zero
  d01bac:	02000644 	movi	r8,25
  d01bb0:	3949883a 	add	r4,r7,r5
  d01bb4:	31800044 	addi	r6,r6,1
  d01bb8:	11000316 	blt	r2,r4,d01bc8 <__ieee754_sqrtf+0xe0>
  d01bbc:	1105c83a 	sub	r2,r2,r4
  d01bc0:	1947883a 	add	r3,r3,r5
  d01bc4:	214f883a 	add	r7,r4,r5
  d01bc8:	1085883a 	add	r2,r2,r2
  d01bcc:	280ad07a 	srli	r5,r5,1
  d01bd0:	323ff71e 	bne	r6,r8,d01bb0 <__ieee754_sqrtf+0xc8>
  d01bd4:	10000b1e 	bne	r2,zero,d01c04 <__ieee754_sqrtf+0x11c>
  d01bd8:	4805d07a 	srai	r2,r9,1
  d01bdc:	1807d07a 	srai	r3,r3,1
  d01be0:	010fc034 	movhi	r4,16128
  d01be4:	100495fa 	slli	r2,r2,23
  d01be8:	1907883a 	add	r3,r3,r4
  d01bec:	18a1883a 	add	r16,r3,r2
  d01bf0:	8005883a 	mov	r2,r16
  d01bf4:	dfc00117 	ldw	ra,4(sp)
  d01bf8:	dc000017 	ldw	r16,0(sp)
  d01bfc:	dec00204 	addi	sp,sp,8
  d01c00:	f800283a 	ret
  d01c04:	1880004c 	andi	r2,r3,1
  d01c08:	1887883a 	add	r3,r3,r2
  d01c0c:	4805d07a 	srai	r2,r9,1
  d01c10:	1807d07a 	srai	r3,r3,1
  d01c14:	010fc034 	movhi	r4,16128
  d01c18:	100495fa 	slli	r2,r2,23
  d01c1c:	1907883a 	add	r3,r3,r4
  d01c20:	18a1883a 	add	r16,r3,r2
  d01c24:	003ff206 	br	d01bf0 <__ieee754_sqrtf+0x108>
  d01c28:	1085883a 	add	r2,r2,r2
  d01c2c:	003fda06 	br	d01b98 <__ieee754_sqrtf+0xb0>
  d01c30:	200b883a 	mov	r5,r4
  d01c34:	0d022980 	call	d02298 <__subsf3>
  d01c38:	1009883a 	mov	r4,r2
  d01c3c:	100b883a 	mov	r5,r2
  d01c40:	0d0254c0 	call	d0254c <__divsf3>
  d01c44:	1021883a 	mov	r16,r2
  d01c48:	003fb706 	br	d01b28 <__ieee754_sqrtf+0x40>
  d01c4c:	0009883a 	mov	r4,zero
  d01c50:	003fc706 	br	d01b70 <__ieee754_sqrtf+0x88>

00d01c54 <matherr>:
  d01c54:	0005883a 	mov	r2,zero
  d01c58:	f800283a 	ret

00d01c5c <rint>:
  d01c5c:	2015883a 	mov	r10,r4
  d01c60:	2809d53a 	srai	r4,r5,20
  d01c64:	defff904 	addi	sp,sp,-28
  d01c68:	034004c4 	movi	r13,19
  d01c6c:	2101ffcc 	andi	r4,r4,2047
  d01c70:	227f0044 	addi	r9,r4,-1023
  d01c74:	dc800415 	stw	r18,16(sp)
  d01c78:	dfc00615 	stw	ra,24(sp)
  d01c7c:	dcc00515 	stw	r19,20(sp)
  d01c80:	dc400315 	stw	r17,12(sp)
  d01c84:	dc000215 	stw	r16,8(sp)
  d01c88:	2817883a 	mov	r11,r5
  d01c8c:	500d883a 	mov	r6,r10
  d01c90:	2824d7fa 	srli	r18,r5,31
  d01c94:	6a403016 	blt	r13,r9,d01d58 <rint+0xfc>
  d01c98:	48004916 	blt	r9,zero,d01dc0 <rint+0x164>
  d01c9c:	00800434 	movhi	r2,16
  d01ca0:	10bfffc4 	addi	r2,r2,-1
  d01ca4:	1247d83a 	sra	r3,r2,r9
  d01ca8:	2809883a 	mov	r4,r5
  d01cac:	1944703a 	and	r2,r3,r5
  d01cb0:	5084b03a 	or	r2,r10,r2
  d01cb4:	10001f26 	beq	r2,zero,d01d34 <rint+0xd8>
  d01cb8:	180ad07a 	srli	r5,r3,1
  d01cbc:	5944703a 	and	r2,r11,r5
  d01cc0:	5084b03a 	or	r2,r10,r2
  d01cc4:	10000626 	beq	r2,zero,d01ce0 <rint+0x84>
  d01cc8:	4b406626 	beq	r9,r13,d01e64 <rint+0x208>
  d01ccc:	00c000b4 	movhi	r3,2
  d01cd0:	1a47d83a 	sra	r3,r3,r9
  d01cd4:	0144303a 	nor	r2,zero,r5
  d01cd8:	5884703a 	and	r2,r11,r2
  d01cdc:	10c8b03a 	or	r4,r2,r3
  d01ce0:	900690fa 	slli	r3,r18,3
  d01ce4:	00803474 	movhi	r2,209
  d01ce8:	10844b04 	addi	r2,r2,4396
  d01cec:	200f883a 	mov	r7,r4
  d01cf0:	1887883a 	add	r3,r3,r2
  d01cf4:	1c000017 	ldw	r16,0(r3)
  d01cf8:	1c400117 	ldw	r17,4(r3)
  d01cfc:	8009883a 	mov	r4,r16
  d01d00:	880b883a 	mov	r5,r17
  d01d04:	0d02eb00 	call	d02eb0 <__adddf3>
  d01d08:	d8800015 	stw	r2,0(sp)
  d01d0c:	d8c00115 	stw	r3,4(sp)
  d01d10:	d8800017 	ldw	r2,0(sp)
  d01d14:	d8c00117 	ldw	r3,4(sp)
  d01d18:	880f883a 	mov	r7,r17
  d01d1c:	800d883a 	mov	r6,r16
  d01d20:	180b883a 	mov	r5,r3
  d01d24:	1009883a 	mov	r4,r2
  d01d28:	0d02e300 	call	d02e30 <__subdf3>
  d01d2c:	1015883a 	mov	r10,r2
  d01d30:	1817883a 	mov	r11,r3
  d01d34:	5005883a 	mov	r2,r10
  d01d38:	5807883a 	mov	r3,r11
  d01d3c:	dfc00617 	ldw	ra,24(sp)
  d01d40:	dcc00517 	ldw	r19,20(sp)
  d01d44:	dc800417 	ldw	r18,16(sp)
  d01d48:	dc400317 	ldw	r17,12(sp)
  d01d4c:	dc000217 	ldw	r16,8(sp)
  d01d50:	dec00704 	addi	sp,sp,28
  d01d54:	f800283a 	ret
  d01d58:	00800cc4 	movi	r2,51
  d01d5c:	12400f16 	blt	r2,r9,d01d9c <rint+0x140>
  d01d60:	213efb44 	addi	r4,r4,-1043
  d01d64:	00bfffc4 	movi	r2,-1
  d01d68:	1104d83a 	srl	r2,r2,r4
  d01d6c:	5086703a 	and	r3,r10,r2
  d01d70:	183ff026 	beq	r3,zero,d01d34 <rint+0xd8>
  d01d74:	100ad07a 	srli	r5,r2,1
  d01d78:	5144703a 	and	r2,r10,r5
  d01d7c:	10000526 	beq	r2,zero,d01d94 <rint+0x138>
  d01d80:	00d00034 	movhi	r3,16384
  d01d84:	1907d83a 	sra	r3,r3,r4
  d01d88:	0144303a 	nor	r2,zero,r5
  d01d8c:	5084703a 	and	r2,r10,r2
  d01d90:	10ccb03a 	or	r6,r2,r3
  d01d94:	5809883a 	mov	r4,r11
  d01d98:	003fd106 	br	d01ce0 <rint+0x84>
  d01d9c:	00810004 	movi	r2,1024
  d01da0:	48bfe41e 	bne	r9,r2,d01d34 <rint+0xd8>
  d01da4:	5009883a 	mov	r4,r10
  d01da8:	500d883a 	mov	r6,r10
  d01dac:	280f883a 	mov	r7,r5
  d01db0:	0d02eb00 	call	d02eb0 <__adddf3>
  d01db4:	1015883a 	mov	r10,r2
  d01db8:	1817883a 	mov	r11,r3
  d01dbc:	003fdd06 	br	d01d34 <rint+0xd8>
  d01dc0:	04e00034 	movhi	r19,32768
  d01dc4:	9cffffc4 	addi	r19,r19,-1
  d01dc8:	2cc4703a 	and	r2,r5,r19
  d01dcc:	5084b03a 	or	r2,r10,r2
  d01dd0:	103fd826 	beq	r2,zero,d01d34 <rint+0xd8>
  d01dd4:	00c00434 	movhi	r3,16
  d01dd8:	18ffffc4 	addi	r3,r3,-1
  d01ddc:	28c6703a 	and	r3,r5,r3
  d01de0:	50c6b03a 	or	r3,r10,r3
  d01de4:	00cdc83a 	sub	r6,zero,r3
  d01de8:	900a90fa 	slli	r5,r18,3
  d01dec:	1986b03a 	or	r3,r3,r6
  d01df0:	01003474 	movhi	r4,209
  d01df4:	21044b04 	addi	r4,r4,4396
  d01df8:	1806d33a 	srli	r3,r3,12
  d01dfc:	290b883a 	add	r5,r5,r4
  d01e00:	2c000017 	ldw	r16,0(r5)
  d01e04:	2c400117 	ldw	r17,4(r5)
  d01e08:	593fffac 	andhi	r4,r11,65534
  d01e0c:	18c0022c 	andhi	r3,r3,8
  d01e10:	1906b03a 	or	r3,r3,r4
  d01e14:	500d883a 	mov	r6,r10
  d01e18:	180f883a 	mov	r7,r3
  d01e1c:	8009883a 	mov	r4,r16
  d01e20:	880b883a 	mov	r5,r17
  d01e24:	0d02eb00 	call	d02eb0 <__adddf3>
  d01e28:	d8800015 	stw	r2,0(sp)
  d01e2c:	d8c00115 	stw	r3,4(sp)
  d01e30:	d8800017 	ldw	r2,0(sp)
  d01e34:	d8c00117 	ldw	r3,4(sp)
  d01e38:	880f883a 	mov	r7,r17
  d01e3c:	800d883a 	mov	r6,r16
  d01e40:	180b883a 	mov	r5,r3
  d01e44:	1009883a 	mov	r4,r2
  d01e48:	0d02e300 	call	d02e30 <__subdf3>
  d01e4c:	901297fa 	slli	r9,r18,31
  d01e50:	98d0703a 	and	r8,r19,r3
  d01e54:	1015883a 	mov	r10,r2
  d01e58:	4250b03a 	or	r8,r8,r9
  d01e5c:	4017883a 	mov	r11,r8
  d01e60:	003fb406 	br	d01d34 <rint+0xd8>
  d01e64:	01900034 	movhi	r6,16384
  d01e68:	003f9d06 	br	d01ce0 <rint+0x84>

00d01e6c <fabsf>:
  d01e6c:	00a00034 	movhi	r2,32768
  d01e70:	10bfffc4 	addi	r2,r2,-1
  d01e74:	2084703a 	and	r2,r4,r2
  d01e78:	f800283a 	ret

00d01e7c <finitef>:
  d01e7c:	00a00034 	movhi	r2,32768
  d01e80:	10bfffc4 	addi	r2,r2,-1
  d01e84:	2088703a 	and	r4,r4,r2
  d01e88:	009fe034 	movhi	r2,32640
  d01e8c:	10bfffc4 	addi	r2,r2,-1
  d01e90:	1104403a 	cmpge	r2,r2,r4
  d01e94:	f800283a 	ret

00d01e98 <isnanf>:
  d01e98:	00a00034 	movhi	r2,32768
  d01e9c:	10bfffc4 	addi	r2,r2,-1
  d01ea0:	2088703a 	and	r4,r4,r2
  d01ea4:	009fe034 	movhi	r2,32640
  d01ea8:	1104803a 	cmplt	r2,r2,r4
  d01eac:	f800283a 	ret

00d01eb0 <nanf>:
  d01eb0:	009ff034 	movhi	r2,32704
  d01eb4:	f800283a 	ret

00d01eb8 <scalbnf>:
  d01eb8:	00a00034 	movhi	r2,32768
  d01ebc:	10bfffc4 	addi	r2,r2,-1
  d01ec0:	defffe04 	addi	sp,sp,-8
  d01ec4:	2086703a 	and	r3,r4,r2
  d01ec8:	dc000015 	stw	r16,0(sp)
  d01ecc:	dfc00115 	stw	ra,4(sp)
  d01ed0:	200d883a 	mov	r6,r4
  d01ed4:	200f883a 	mov	r7,r4
  d01ed8:	2821883a 	mov	r16,r5
  d01edc:	18001a26 	beq	r3,zero,d01f48 <scalbnf+0x90>
  d01ee0:	009fe034 	movhi	r2,32640
  d01ee4:	10bfffc4 	addi	r2,r2,-1
  d01ee8:	10c01c36 	bltu	r2,r3,d01f5c <scalbnf+0xa4>
  d01eec:	00802034 	movhi	r2,128
  d01ef0:	10bfffc4 	addi	r2,r2,-1
  d01ef4:	10c02136 	bltu	r2,r3,d01f7c <scalbnf+0xc4>
  d01ef8:	01530034 	movhi	r5,19456
  d01efc:	0d0236c0 	call	d0236c <__mulsf3>
  d01f00:	1009883a 	mov	r4,r2
  d01f04:	100d883a 	mov	r6,r2
  d01f08:	00bffff4 	movhi	r2,65535
  d01f0c:	108f2c04 	addi	r2,r2,15536
  d01f10:	80802616 	blt	r16,r2,d01fac <scalbnf+0xf4>
  d01f14:	209fe02c 	andhi	r2,r4,32640
  d01f18:	1005d5fa 	srai	r2,r2,23
  d01f1c:	200f883a 	mov	r7,r4
  d01f20:	10bff9c4 	addi	r2,r2,-25
  d01f24:	1407883a 	add	r3,r2,r16
  d01f28:	00803f84 	movi	r2,254
  d01f2c:	10c01516 	blt	r2,r3,d01f84 <scalbnf+0xcc>
  d01f30:	00c0230e 	bge	zero,r3,d01fc0 <scalbnf+0x108>
  d01f34:	180695fa 	slli	r3,r3,23
  d01f38:	00a02034 	movhi	r2,32896
  d01f3c:	10bfffc4 	addi	r2,r2,-1
  d01f40:	3884703a 	and	r2,r7,r2
  d01f44:	10ccb03a 	or	r6,r2,r3
  d01f48:	3005883a 	mov	r2,r6
  d01f4c:	dfc00117 	ldw	ra,4(sp)
  d01f50:	dc000017 	ldw	r16,0(sp)
  d01f54:	dec00204 	addi	sp,sp,8
  d01f58:	f800283a 	ret
  d01f5c:	200b883a 	mov	r5,r4
  d01f60:	0d023080 	call	d02308 <__addsf3>
  d01f64:	100d883a 	mov	r6,r2
  d01f68:	3005883a 	mov	r2,r6
  d01f6c:	dfc00117 	ldw	ra,4(sp)
  d01f70:	dc000017 	ldw	r16,0(sp)
  d01f74:	dec00204 	addi	sp,sp,8
  d01f78:	f800283a 	ret
  d01f7c:	1804d5fa 	srli	r2,r3,23
  d01f80:	003fe806 	br	d01f24 <scalbnf+0x6c>
  d01f84:	041c52b4 	movhi	r16,29002
  d01f88:	843cb284 	addi	r16,r16,-3382
  d01f8c:	300b883a 	mov	r5,r6
  d01f90:	8009883a 	mov	r4,r16
  d01f94:	0d020040 	call	d02004 <copysignf>
  d01f98:	1009883a 	mov	r4,r2
  d01f9c:	800b883a 	mov	r5,r16
  d01fa0:	0d0236c0 	call	d0236c <__mulsf3>
  d01fa4:	100d883a 	mov	r6,r2
  d01fa8:	003fe706 	br	d01f48 <scalbnf+0x90>
  d01fac:	014368b4 	movhi	r5,3490
  d01fb0:	29509804 	addi	r5,r5,16992
  d01fb4:	0d0236c0 	call	d0236c <__mulsf3>
  d01fb8:	100d883a 	mov	r6,r2
  d01fbc:	003fe206 	br	d01f48 <scalbnf+0x90>
  d01fc0:	00bffa84 	movi	r2,-22
  d01fc4:	1880050e 	bge	r3,r2,d01fdc <scalbnf+0x124>
  d01fc8:	00b0d414 	movui	r2,50000
  d01fcc:	143fed16 	blt	r2,r16,d01f84 <scalbnf+0xcc>
  d01fd0:	040368b4 	movhi	r16,3490
  d01fd4:	84109804 	addi	r16,r16,16992
  d01fd8:	003fec06 	br	d01f8c <scalbnf+0xd4>
  d01fdc:	18800644 	addi	r2,r3,25
  d01fe0:	100495fa 	slli	r2,r2,23
  d01fe4:	01202034 	movhi	r4,32896
  d01fe8:	213fffc4 	addi	r4,r4,-1
  d01fec:	3908703a 	and	r4,r7,r4
  d01ff0:	2088b03a 	or	r4,r4,r2
  d01ff4:	014cc034 	movhi	r5,13056
  d01ff8:	0d0236c0 	call	d0236c <__mulsf3>
  d01ffc:	100d883a 	mov	r6,r2
  d02000:	003fd106 	br	d01f48 <scalbnf+0x90>

00d02004 <copysignf>:
  d02004:	00a00034 	movhi	r2,32768
  d02008:	10bfffc4 	addi	r2,r2,-1
  d0200c:	2088703a 	and	r4,r4,r2
  d02010:	28a0002c 	andhi	r2,r5,32768
  d02014:	2084b03a 	or	r2,r4,r2
  d02018:	f800283a 	ret

00d0201c <__muldi3>:
  d0201c:	2011883a 	mov	r8,r4
  d02020:	427fffcc 	andi	r9,r8,65535
  d02024:	4018d43a 	srli	r12,r8,16
  d02028:	32bfffcc 	andi	r10,r6,65535
  d0202c:	3016d43a 	srli	r11,r6,16
  d02030:	4a85383a 	mul	r2,r9,r10
  d02034:	6295383a 	mul	r10,r12,r10
  d02038:	4ad3383a 	mul	r9,r9,r11
  d0203c:	113fffcc 	andi	r4,r2,65535
  d02040:	1004d43a 	srli	r2,r2,16
  d02044:	4a93883a 	add	r9,r9,r10
  d02048:	3807883a 	mov	r3,r7
  d0204c:	1245883a 	add	r2,r2,r9
  d02050:	280f883a 	mov	r7,r5
  d02054:	180b883a 	mov	r5,r3
  d02058:	1006943a 	slli	r3,r2,16
  d0205c:	defffd04 	addi	sp,sp,-12
  d02060:	dc800215 	stw	r18,8(sp)
  d02064:	1907883a 	add	r3,r3,r4
  d02068:	dc400115 	stw	r17,4(sp)
  d0206c:	dc000015 	stw	r16,0(sp)
  d02070:	4165383a 	mul	r18,r8,r5
  d02074:	31e3383a 	mul	r17,r6,r7
  d02078:	1012d43a 	srli	r9,r2,16
  d0207c:	62d9383a 	mul	r12,r12,r11
  d02080:	181f883a 	mov	r15,r3
  d02084:	1280022e 	bgeu	r2,r10,d02090 <__muldi3+0x74>
  d02088:	00800074 	movhi	r2,1
  d0208c:	6099883a 	add	r12,r12,r2
  d02090:	624d883a 	add	r6,r12,r9
  d02094:	9187883a 	add	r3,r18,r6
  d02098:	88c7883a 	add	r3,r17,r3
  d0209c:	7805883a 	mov	r2,r15
  d020a0:	dc800217 	ldw	r18,8(sp)
  d020a4:	dc400117 	ldw	r17,4(sp)
  d020a8:	dc000017 	ldw	r16,0(sp)
  d020ac:	dec00304 	addi	sp,sp,12
  d020b0:	f800283a 	ret

00d020b4 <_fpadd_parts>:
  d020b4:	21c00017 	ldw	r7,0(r4)
  d020b8:	02000044 	movi	r8,1
  d020bc:	41c0332e 	bgeu	r8,r7,d0218c <_fpadd_parts+0xd8>
  d020c0:	28800017 	ldw	r2,0(r5)
  d020c4:	4080462e 	bgeu	r8,r2,d021e0 <_fpadd_parts+0x12c>
  d020c8:	00c00104 	movi	r3,4
  d020cc:	38c06b26 	beq	r7,r3,d0227c <_fpadd_parts+0x1c8>
  d020d0:	10c04326 	beq	r2,r3,d021e0 <_fpadd_parts+0x12c>
  d020d4:	00c00084 	movi	r3,2
  d020d8:	10c02e26 	beq	r2,r3,d02194 <_fpadd_parts+0xe0>
  d020dc:	38c04026 	beq	r7,r3,d021e0 <_fpadd_parts+0x12c>
  d020e0:	22800217 	ldw	r10,8(r4)
  d020e4:	28c00217 	ldw	r3,8(r5)
  d020e8:	23000317 	ldw	r12,12(r4)
  d020ec:	2a400317 	ldw	r9,12(r5)
  d020f0:	50cfc83a 	sub	r7,r10,r3
  d020f4:	3817883a 	mov	r11,r7
  d020f8:	38004f16 	blt	r7,zero,d02238 <_fpadd_parts+0x184>
  d020fc:	008007c4 	movi	r2,31
  d02100:	11c03316 	blt	r2,r7,d021d0 <_fpadd_parts+0x11c>
  d02104:	02c0540e 	bge	zero,r11,d02258 <_fpadd_parts+0x1a4>
  d02108:	41c4983a 	sll	r2,r8,r7
  d0210c:	49c6d83a 	srl	r3,r9,r7
  d02110:	10bfffc4 	addi	r2,r2,-1
  d02114:	4884703a 	and	r2,r9,r2
  d02118:	1004c03a 	cmpne	r2,r2,zero
  d0211c:	1892b03a 	or	r9,r3,r2
  d02120:	20c00117 	ldw	r3,4(r4)
  d02124:	28800117 	ldw	r2,4(r5)
  d02128:	18803c26 	beq	r3,r2,d0221c <_fpadd_parts+0x168>
  d0212c:	18002f26 	beq	r3,zero,d021ec <_fpadd_parts+0x138>
  d02130:	4b05c83a 	sub	r2,r9,r12
  d02134:	10004216 	blt	r2,zero,d02240 <_fpadd_parts+0x18c>
  d02138:	32800215 	stw	r10,8(r6)
  d0213c:	30800315 	stw	r2,12(r6)
  d02140:	30000115 	stw	zero,4(r6)
  d02144:	31000317 	ldw	r4,12(r6)
  d02148:	01d00034 	movhi	r7,16384
  d0214c:	39ffff84 	addi	r7,r7,-2
  d02150:	20bfffc4 	addi	r2,r4,-1
  d02154:	2007883a 	mov	r3,r4
  d02158:	38800836 	bltu	r7,r2,d0217c <_fpadd_parts+0xc8>
  d0215c:	31400217 	ldw	r5,8(r6)
  d02160:	18c9883a 	add	r4,r3,r3
  d02164:	20bfffc4 	addi	r2,r4,-1
  d02168:	297fffc4 	addi	r5,r5,-1
  d0216c:	2007883a 	mov	r3,r4
  d02170:	38bffb2e 	bgeu	r7,r2,d02160 <_fpadd_parts+0xac>
  d02174:	31400215 	stw	r5,8(r6)
  d02178:	31000315 	stw	r4,12(r6)
  d0217c:	008000c4 	movi	r2,3
  d02180:	30800015 	stw	r2,0(r6)
  d02184:	20001b16 	blt	r4,zero,d021f4 <_fpadd_parts+0x140>
  d02188:	3009883a 	mov	r4,r6
  d0218c:	2005883a 	mov	r2,r4
  d02190:	f800283a 	ret
  d02194:	38fffd1e 	bne	r7,r3,d0218c <_fpadd_parts+0xd8>
  d02198:	31c00015 	stw	r7,0(r6)
  d0219c:	20800117 	ldw	r2,4(r4)
  d021a0:	30800115 	stw	r2,4(r6)
  d021a4:	20c00217 	ldw	r3,8(r4)
  d021a8:	30c00215 	stw	r3,8(r6)
  d021ac:	20800317 	ldw	r2,12(r4)
  d021b0:	30800315 	stw	r2,12(r6)
  d021b4:	20c00117 	ldw	r3,4(r4)
  d021b8:	28800117 	ldw	r2,4(r5)
  d021bc:	3009883a 	mov	r4,r6
  d021c0:	1886703a 	and	r3,r3,r2
  d021c4:	2005883a 	mov	r2,r4
  d021c8:	30c00115 	stw	r3,4(r6)
  d021cc:	f800283a 	ret
  d021d0:	1a801716 	blt	r3,r10,d02230 <_fpadd_parts+0x17c>
  d021d4:	1815883a 	mov	r10,r3
  d021d8:	0019883a 	mov	r12,zero
  d021dc:	003fd006 	br	d02120 <_fpadd_parts+0x6c>
  d021e0:	2809883a 	mov	r4,r5
  d021e4:	2005883a 	mov	r2,r4
  d021e8:	f800283a 	ret
  d021ec:	6245c83a 	sub	r2,r12,r9
  d021f0:	003fd006 	br	d02134 <_fpadd_parts+0x80>
  d021f4:	30800217 	ldw	r2,8(r6)
  d021f8:	2006d07a 	srli	r3,r4,1
  d021fc:	2100004c 	andi	r4,r4,1
  d02200:	10800044 	addi	r2,r2,1
  d02204:	1906b03a 	or	r3,r3,r4
  d02208:	3009883a 	mov	r4,r6
  d0220c:	30800215 	stw	r2,8(r6)
  d02210:	2005883a 	mov	r2,r4
  d02214:	30c00315 	stw	r3,12(r6)
  d02218:	f800283a 	ret
  d0221c:	4b09883a 	add	r4,r9,r12
  d02220:	30c00115 	stw	r3,4(r6)
  d02224:	32800215 	stw	r10,8(r6)
  d02228:	31000315 	stw	r4,12(r6)
  d0222c:	003fd306 	br	d0217c <_fpadd_parts+0xc8>
  d02230:	0013883a 	mov	r9,zero
  d02234:	003fba06 	br	d02120 <_fpadd_parts+0x6c>
  d02238:	01cfc83a 	sub	r7,zero,r7
  d0223c:	003faf06 	br	d020fc <_fpadd_parts+0x48>
  d02240:	0089c83a 	sub	r4,zero,r2
  d02244:	00800044 	movi	r2,1
  d02248:	30800115 	stw	r2,4(r6)
  d0224c:	32800215 	stw	r10,8(r6)
  d02250:	31000315 	stw	r4,12(r6)
  d02254:	003fbb06 	br	d02144 <_fpadd_parts+0x90>
  d02258:	583fb126 	beq	r11,zero,d02120 <_fpadd_parts+0x6c>
  d0225c:	41c4983a 	sll	r2,r8,r7
  d02260:	61c6d83a 	srl	r3,r12,r7
  d02264:	51d5883a 	add	r10,r10,r7
  d02268:	10bfffc4 	addi	r2,r2,-1
  d0226c:	6084703a 	and	r2,r12,r2
  d02270:	1004c03a 	cmpne	r2,r2,zero
  d02274:	1898b03a 	or	r12,r3,r2
  d02278:	003fa906 	br	d02120 <_fpadd_parts+0x6c>
  d0227c:	11ffc31e 	bne	r2,r7,d0218c <_fpadd_parts+0xd8>
  d02280:	28c00117 	ldw	r3,4(r5)
  d02284:	20800117 	ldw	r2,4(r4)
  d02288:	10ffc026 	beq	r2,r3,d0218c <_fpadd_parts+0xd8>
  d0228c:	01003474 	movhi	r4,209
  d02290:	21044f04 	addi	r4,r4,4412
  d02294:	003fbd06 	br	d0218c <_fpadd_parts+0xd8>

00d02298 <__subsf3>:
  d02298:	deffef04 	addi	sp,sp,-68
  d0229c:	dcc00f15 	stw	r19,60(sp)
  d022a0:	dcc00204 	addi	r19,sp,8
  d022a4:	dc400e15 	stw	r17,56(sp)
  d022a8:	d9000015 	stw	r4,0(sp)
  d022ac:	d9400115 	stw	r5,4(sp)
  d022b0:	d809883a 	mov	r4,sp
  d022b4:	980b883a 	mov	r5,r19
  d022b8:	dc400604 	addi	r17,sp,24
  d022bc:	dfc01015 	stw	ra,64(sp)
  d022c0:	0d034900 	call	d03490 <__unpack_f>
  d022c4:	d9000104 	addi	r4,sp,4
  d022c8:	880b883a 	mov	r5,r17
  d022cc:	0d034900 	call	d03490 <__unpack_f>
  d022d0:	d8800717 	ldw	r2,28(sp)
  d022d4:	9809883a 	mov	r4,r19
  d022d8:	880b883a 	mov	r5,r17
  d022dc:	d9800a04 	addi	r6,sp,40
  d022e0:	1080005c 	xori	r2,r2,1
  d022e4:	d8800715 	stw	r2,28(sp)
  d022e8:	0d020b40 	call	d020b4 <_fpadd_parts>
  d022ec:	1009883a 	mov	r4,r2
  d022f0:	0d033300 	call	d03330 <__pack_f>
  d022f4:	dfc01017 	ldw	ra,64(sp)
  d022f8:	dcc00f17 	ldw	r19,60(sp)
  d022fc:	dc400e17 	ldw	r17,56(sp)
  d02300:	dec01104 	addi	sp,sp,68
  d02304:	f800283a 	ret

00d02308 <__addsf3>:
  d02308:	deffef04 	addi	sp,sp,-68
  d0230c:	dcc00f15 	stw	r19,60(sp)
  d02310:	dcc00204 	addi	r19,sp,8
  d02314:	dc400e15 	stw	r17,56(sp)
  d02318:	d9000015 	stw	r4,0(sp)
  d0231c:	d9400115 	stw	r5,4(sp)
  d02320:	d809883a 	mov	r4,sp
  d02324:	980b883a 	mov	r5,r19
  d02328:	dc400604 	addi	r17,sp,24
  d0232c:	dfc01015 	stw	ra,64(sp)
  d02330:	0d034900 	call	d03490 <__unpack_f>
  d02334:	d9000104 	addi	r4,sp,4
  d02338:	880b883a 	mov	r5,r17
  d0233c:	0d034900 	call	d03490 <__unpack_f>
  d02340:	d9800a04 	addi	r6,sp,40
  d02344:	9809883a 	mov	r4,r19
  d02348:	880b883a 	mov	r5,r17
  d0234c:	0d020b40 	call	d020b4 <_fpadd_parts>
  d02350:	1009883a 	mov	r4,r2
  d02354:	0d033300 	call	d03330 <__pack_f>
  d02358:	dfc01017 	ldw	ra,64(sp)
  d0235c:	dcc00f17 	ldw	r19,60(sp)
  d02360:	dc400e17 	ldw	r17,56(sp)
  d02364:	dec01104 	addi	sp,sp,68
  d02368:	f800283a 	ret

00d0236c <__mulsf3>:
  d0236c:	deffef04 	addi	sp,sp,-68
  d02370:	dc400f15 	stw	r17,60(sp)
  d02374:	dc400204 	addi	r17,sp,8
  d02378:	dc000e15 	stw	r16,56(sp)
  d0237c:	d9000015 	stw	r4,0(sp)
  d02380:	d9400115 	stw	r5,4(sp)
  d02384:	d809883a 	mov	r4,sp
  d02388:	880b883a 	mov	r5,r17
  d0238c:	dc000604 	addi	r16,sp,24
  d02390:	dfc01015 	stw	ra,64(sp)
  d02394:	0d034900 	call	d03490 <__unpack_f>
  d02398:	d9000104 	addi	r4,sp,4
  d0239c:	800b883a 	mov	r5,r16
  d023a0:	0d034900 	call	d03490 <__unpack_f>
  d023a4:	d9000217 	ldw	r4,8(sp)
  d023a8:	00800044 	movi	r2,1
  d023ac:	01400104 	movi	r5,4
  d023b0:	1100142e 	bgeu	r2,r4,d02404 <__mulsf3+0x98>
  d023b4:	d8c00617 	ldw	r3,24(sp)
  d023b8:	10c0052e 	bgeu	r2,r3,d023d0 <__mulsf3+0x64>
  d023bc:	21400f26 	beq	r4,r5,d023fc <__mulsf3+0x90>
  d023c0:	19405d26 	beq	r3,r5,d02538 <__mulsf3+0x1cc>
  d023c4:	00800084 	movi	r2,2
  d023c8:	20800e26 	beq	r4,r2,d02404 <__mulsf3+0x98>
  d023cc:	1880181e 	bne	r3,r2,d02430 <__mulsf3+0xc4>
  d023d0:	d8c00717 	ldw	r3,28(sp)
  d023d4:	d8800317 	ldw	r2,12(sp)
  d023d8:	8009883a 	mov	r4,r16
  d023dc:	10c4c03a 	cmpne	r2,r2,r3
  d023e0:	d8800715 	stw	r2,28(sp)
  d023e4:	0d033300 	call	d03330 <__pack_f>
  d023e8:	dfc01017 	ldw	ra,64(sp)
  d023ec:	dc400f17 	ldw	r17,60(sp)
  d023f0:	dc000e17 	ldw	r16,56(sp)
  d023f4:	dec01104 	addi	sp,sp,68
  d023f8:	f800283a 	ret
  d023fc:	00800084 	movi	r2,2
  d02400:	18804f26 	beq	r3,r2,d02540 <__mulsf3+0x1d4>
  d02404:	d8800317 	ldw	r2,12(sp)
  d02408:	d8c00717 	ldw	r3,28(sp)
  d0240c:	8809883a 	mov	r4,r17
  d02410:	10c4c03a 	cmpne	r2,r2,r3
  d02414:	d8800315 	stw	r2,12(sp)
  d02418:	0d033300 	call	d03330 <__pack_f>
  d0241c:	dfc01017 	ldw	ra,64(sp)
  d02420:	dc400f17 	ldw	r17,60(sp)
  d02424:	dc000e17 	ldw	r16,56(sp)
  d02428:	dec01104 	addi	sp,sp,68
  d0242c:	f800283a 	ret
  d02430:	d8800517 	ldw	r2,20(sp)
  d02434:	da000917 	ldw	r8,36(sp)
  d02438:	0013883a 	mov	r9,zero
  d0243c:	0007883a 	mov	r3,zero
  d02440:	480f883a 	mov	r7,r9
  d02444:	180b883a 	mov	r5,r3
  d02448:	400d883a 	mov	r6,r8
  d0244c:	1009883a 	mov	r4,r2
  d02450:	0d0201c0 	call	d0201c <__muldi3>
  d02454:	da800417 	ldw	r10,16(sp)
  d02458:	d9800817 	ldw	r6,32(sp)
  d0245c:	da400317 	ldw	r9,12(sp)
  d02460:	52800084 	addi	r10,r10,2
  d02464:	3295883a 	add	r10,r6,r10
  d02468:	d9800717 	ldw	r6,28(sp)
  d0246c:	180b883a 	mov	r5,r3
  d02470:	180f883a 	mov	r7,r3
  d02474:	4992c03a 	cmpne	r9,r9,r6
  d02478:	da400b15 	stw	r9,44(sp)
  d0247c:	1007883a 	mov	r3,r2
  d02480:	da800c15 	stw	r10,48(sp)
  d02484:	2800070e 	bge	r5,zero,d024a4 <__mulsf3+0x138>
  d02488:	2880004c 	andi	r2,r5,1
  d0248c:	1005003a 	cmpeq	r2,r2,zero
  d02490:	500d883a 	mov	r6,r10
  d02494:	10001e26 	beq	r2,zero,d02510 <__mulsf3+0x1a4>
  d02498:	380ed07a 	srli	r7,r7,1
  d0249c:	31800044 	addi	r6,r6,1
  d024a0:	d9800c15 	stw	r6,48(sp)
  d024a4:	01100034 	movhi	r4,16384
  d024a8:	213fffc4 	addi	r4,r4,-1
  d024ac:	21c00b36 	bltu	r4,r7,d024dc <__mulsf3+0x170>
  d024b0:	d8800c17 	ldw	r2,48(sp)
  d024b4:	00000206 	br	d024c0 <__mulsf3+0x154>
  d024b8:	18c7883a 	add	r3,r3,r3
  d024bc:	21c00636 	bltu	r4,r7,d024d8 <__mulsf3+0x16c>
  d024c0:	10bfffc4 	addi	r2,r2,-1
  d024c4:	39cf883a 	add	r7,r7,r7
  d024c8:	183ffb0e 	bge	r3,zero,d024b8 <__mulsf3+0x14c>
  d024cc:	39c00054 	ori	r7,r7,1
  d024d0:	18c7883a 	add	r3,r3,r3
  d024d4:	21fffa2e 	bgeu	r4,r7,d024c0 <__mulsf3+0x154>
  d024d8:	d8800c15 	stw	r2,48(sp)
  d024dc:	39001fcc 	andi	r4,r7,127
  d024e0:	00801004 	movi	r2,64
  d024e4:	20800d26 	beq	r4,r2,d0251c <__mulsf3+0x1b0>
  d024e8:	008000c4 	movi	r2,3
  d024ec:	d9000a04 	addi	r4,sp,40
  d024f0:	d9c00d15 	stw	r7,52(sp)
  d024f4:	d8800a15 	stw	r2,40(sp)
  d024f8:	0d033300 	call	d03330 <__pack_f>
  d024fc:	dfc01017 	ldw	ra,64(sp)
  d02500:	dc400f17 	ldw	r17,60(sp)
  d02504:	dc000e17 	ldw	r16,56(sp)
  d02508:	dec01104 	addi	sp,sp,68
  d0250c:	f800283a 	ret
  d02510:	1804d07a 	srli	r2,r3,1
  d02514:	10e00034 	orhi	r3,r2,32768
  d02518:	003fdf06 	br	d02498 <__mulsf3+0x12c>
  d0251c:	3880200c 	andi	r2,r7,128
  d02520:	103ff11e 	bne	r2,zero,d024e8 <__mulsf3+0x17c>
  d02524:	183ff026 	beq	r3,zero,d024e8 <__mulsf3+0x17c>
  d02528:	3907883a 	add	r3,r7,r4
  d0252c:	00bfe004 	movi	r2,-128
  d02530:	188e703a 	and	r7,r3,r2
  d02534:	003fec06 	br	d024e8 <__mulsf3+0x17c>
  d02538:	00800084 	movi	r2,2
  d0253c:	20bfa41e 	bne	r4,r2,d023d0 <__mulsf3+0x64>
  d02540:	01003474 	movhi	r4,209
  d02544:	21044f04 	addi	r4,r4,4412
  d02548:	003fb306 	br	d02418 <__mulsf3+0xac>

00d0254c <__divsf3>:
  d0254c:	defff304 	addi	sp,sp,-52
  d02550:	dc400b15 	stw	r17,44(sp)
  d02554:	dc400204 	addi	r17,sp,8
  d02558:	dc000a15 	stw	r16,40(sp)
  d0255c:	d9000015 	stw	r4,0(sp)
  d02560:	d9400115 	stw	r5,4(sp)
  d02564:	d809883a 	mov	r4,sp
  d02568:	880b883a 	mov	r5,r17
  d0256c:	dc000604 	addi	r16,sp,24
  d02570:	dfc00c15 	stw	ra,48(sp)
  d02574:	0d034900 	call	d03490 <__unpack_f>
  d02578:	d9000104 	addi	r4,sp,4
  d0257c:	800b883a 	mov	r5,r16
  d02580:	0d034900 	call	d03490 <__unpack_f>
  d02584:	d9000217 	ldw	r4,8(sp)
  d02588:	00800044 	movi	r2,1
  d0258c:	01800104 	movi	r6,4
  d02590:	11000a2e 	bgeu	r2,r4,d025bc <__divsf3+0x70>
  d02594:	d9400617 	ldw	r5,24(sp)
  d02598:	1140432e 	bgeu	r2,r5,d026a8 <__divsf3+0x15c>
  d0259c:	d8800317 	ldw	r2,12(sp)
  d025a0:	d8c00717 	ldw	r3,28(sp)
  d025a4:	10c4f03a 	xor	r2,r2,r3
  d025a8:	d8800315 	stw	r2,12(sp)
  d025ac:	21800226 	beq	r4,r6,d025b8 <__divsf3+0x6c>
  d025b0:	00800084 	movi	r2,2
  d025b4:	2080101e 	bne	r4,r2,d025f8 <__divsf3+0xac>
  d025b8:	29000726 	beq	r5,r4,d025d8 <__divsf3+0x8c>
  d025bc:	8809883a 	mov	r4,r17
  d025c0:	0d033300 	call	d03330 <__pack_f>
  d025c4:	dfc00c17 	ldw	ra,48(sp)
  d025c8:	dc400b17 	ldw	r17,44(sp)
  d025cc:	dc000a17 	ldw	r16,40(sp)
  d025d0:	dec00d04 	addi	sp,sp,52
  d025d4:	f800283a 	ret
  d025d8:	01003474 	movhi	r4,209
  d025dc:	21044f04 	addi	r4,r4,4412
  d025e0:	0d033300 	call	d03330 <__pack_f>
  d025e4:	dfc00c17 	ldw	ra,48(sp)
  d025e8:	dc400b17 	ldw	r17,44(sp)
  d025ec:	dc000a17 	ldw	r16,40(sp)
  d025f0:	dec00d04 	addi	sp,sp,52
  d025f4:	f800283a 	ret
  d025f8:	29802d26 	beq	r5,r6,d026b0 <__divsf3+0x164>
  d025fc:	28801a26 	beq	r5,r2,d02668 <__divsf3+0x11c>
  d02600:	d8c00417 	ldw	r3,16(sp)
  d02604:	d8800817 	ldw	r2,32(sp)
  d02608:	d9000517 	ldw	r4,20(sp)
  d0260c:	d9800917 	ldw	r6,36(sp)
  d02610:	1885c83a 	sub	r2,r3,r2
  d02614:	d8800415 	stw	r2,16(sp)
  d02618:	2180032e 	bgeu	r4,r6,d02628 <__divsf3+0xdc>
  d0261c:	10bfffc4 	addi	r2,r2,-1
  d02620:	d8800415 	stw	r2,16(sp)
  d02624:	2109883a 	add	r4,r4,r4
  d02628:	01500034 	movhi	r5,16384
  d0262c:	0007883a 	mov	r3,zero
  d02630:	0005883a 	mov	r2,zero
  d02634:	01c007c4 	movi	r7,31
  d02638:	10800044 	addi	r2,r2,1
  d0263c:	21800236 	bltu	r4,r6,d02648 <__divsf3+0xfc>
  d02640:	1946b03a 	or	r3,r3,r5
  d02644:	2189c83a 	sub	r4,r4,r6
  d02648:	280ad07a 	srli	r5,r5,1
  d0264c:	2109883a 	add	r4,r4,r4
  d02650:	11fff91e 	bne	r2,r7,d02638 <__divsf3+0xec>
  d02654:	19401fcc 	andi	r5,r3,127
  d02658:	00801004 	movi	r2,64
  d0265c:	28800a26 	beq	r5,r2,d02688 <__divsf3+0x13c>
  d02660:	d8c00515 	stw	r3,20(sp)
  d02664:	003fd506 	br	d025bc <__divsf3+0x70>
  d02668:	8809883a 	mov	r4,r17
  d0266c:	d9800215 	stw	r6,8(sp)
  d02670:	0d033300 	call	d03330 <__pack_f>
  d02674:	dfc00c17 	ldw	ra,48(sp)
  d02678:	dc400b17 	ldw	r17,44(sp)
  d0267c:	dc000a17 	ldw	r16,40(sp)
  d02680:	dec00d04 	addi	sp,sp,52
  d02684:	f800283a 	ret
  d02688:	1880200c 	andi	r2,r3,128
  d0268c:	103ff41e 	bne	r2,zero,d02660 <__divsf3+0x114>
  d02690:	203ff326 	beq	r4,zero,d02660 <__divsf3+0x114>
  d02694:	1947883a 	add	r3,r3,r5
  d02698:	00bfe004 	movi	r2,-128
  d0269c:	1886703a 	and	r3,r3,r2
  d026a0:	d8c00515 	stw	r3,20(sp)
  d026a4:	003fc506 	br	d025bc <__divsf3+0x70>
  d026a8:	8009883a 	mov	r4,r16
  d026ac:	003fc406 	br	d025c0 <__divsf3+0x74>
  d026b0:	8809883a 	mov	r4,r17
  d026b4:	d8000515 	stw	zero,20(sp)
  d026b8:	d8000415 	stw	zero,16(sp)
  d026bc:	003fc006 	br	d025c0 <__divsf3+0x74>

00d026c0 <__eqsf2>:
  d026c0:	defff304 	addi	sp,sp,-52
  d026c4:	dc400b15 	stw	r17,44(sp)
  d026c8:	dc400204 	addi	r17,sp,8
  d026cc:	dc000a15 	stw	r16,40(sp)
  d026d0:	d9000015 	stw	r4,0(sp)
  d026d4:	d9400115 	stw	r5,4(sp)
  d026d8:	d809883a 	mov	r4,sp
  d026dc:	880b883a 	mov	r5,r17
  d026e0:	dc000604 	addi	r16,sp,24
  d026e4:	dfc00c15 	stw	ra,48(sp)
  d026e8:	0d034900 	call	d03490 <__unpack_f>
  d026ec:	d9000104 	addi	r4,sp,4
  d026f0:	800b883a 	mov	r5,r16
  d026f4:	0d034900 	call	d03490 <__unpack_f>
  d026f8:	d8800217 	ldw	r2,8(sp)
  d026fc:	00c00044 	movi	r3,1
  d02700:	180d883a 	mov	r6,r3
  d02704:	1880062e 	bgeu	r3,r2,d02720 <__eqsf2+0x60>
  d02708:	d8800617 	ldw	r2,24(sp)
  d0270c:	8809883a 	mov	r4,r17
  d02710:	800b883a 	mov	r5,r16
  d02714:	1880022e 	bgeu	r3,r2,d02720 <__eqsf2+0x60>
  d02718:	0d035580 	call	d03558 <__fpcmp_parts_f>
  d0271c:	100d883a 	mov	r6,r2
  d02720:	3005883a 	mov	r2,r6
  d02724:	dfc00c17 	ldw	ra,48(sp)
  d02728:	dc400b17 	ldw	r17,44(sp)
  d0272c:	dc000a17 	ldw	r16,40(sp)
  d02730:	dec00d04 	addi	sp,sp,52
  d02734:	f800283a 	ret

00d02738 <__gtsf2>:
  d02738:	defff304 	addi	sp,sp,-52
  d0273c:	dc400b15 	stw	r17,44(sp)
  d02740:	dc400204 	addi	r17,sp,8
  d02744:	dc000a15 	stw	r16,40(sp)
  d02748:	d9000015 	stw	r4,0(sp)
  d0274c:	d9400115 	stw	r5,4(sp)
  d02750:	d809883a 	mov	r4,sp
  d02754:	880b883a 	mov	r5,r17
  d02758:	dc000604 	addi	r16,sp,24
  d0275c:	dfc00c15 	stw	ra,48(sp)
  d02760:	0d034900 	call	d03490 <__unpack_f>
  d02764:	d9000104 	addi	r4,sp,4
  d02768:	800b883a 	mov	r5,r16
  d0276c:	0d034900 	call	d03490 <__unpack_f>
  d02770:	d8800217 	ldw	r2,8(sp)
  d02774:	00c00044 	movi	r3,1
  d02778:	01bfffc4 	movi	r6,-1
  d0277c:	1880062e 	bgeu	r3,r2,d02798 <__gtsf2+0x60>
  d02780:	d8800617 	ldw	r2,24(sp)
  d02784:	8809883a 	mov	r4,r17
  d02788:	800b883a 	mov	r5,r16
  d0278c:	1880022e 	bgeu	r3,r2,d02798 <__gtsf2+0x60>
  d02790:	0d035580 	call	d03558 <__fpcmp_parts_f>
  d02794:	100d883a 	mov	r6,r2
  d02798:	3005883a 	mov	r2,r6
  d0279c:	dfc00c17 	ldw	ra,48(sp)
  d027a0:	dc400b17 	ldw	r17,44(sp)
  d027a4:	dc000a17 	ldw	r16,40(sp)
  d027a8:	dec00d04 	addi	sp,sp,52
  d027ac:	f800283a 	ret

00d027b0 <__ltsf2>:
  d027b0:	defff304 	addi	sp,sp,-52
  d027b4:	dc400b15 	stw	r17,44(sp)
  d027b8:	dc400204 	addi	r17,sp,8
  d027bc:	dc000a15 	stw	r16,40(sp)
  d027c0:	d9000015 	stw	r4,0(sp)
  d027c4:	d9400115 	stw	r5,4(sp)
  d027c8:	d809883a 	mov	r4,sp
  d027cc:	880b883a 	mov	r5,r17
  d027d0:	dc000604 	addi	r16,sp,24
  d027d4:	dfc00c15 	stw	ra,48(sp)
  d027d8:	0d034900 	call	d03490 <__unpack_f>
  d027dc:	d9000104 	addi	r4,sp,4
  d027e0:	800b883a 	mov	r5,r16
  d027e4:	0d034900 	call	d03490 <__unpack_f>
  d027e8:	d8800217 	ldw	r2,8(sp)
  d027ec:	00c00044 	movi	r3,1
  d027f0:	180d883a 	mov	r6,r3
  d027f4:	1880062e 	bgeu	r3,r2,d02810 <__ltsf2+0x60>
  d027f8:	d8800617 	ldw	r2,24(sp)
  d027fc:	8809883a 	mov	r4,r17
  d02800:	800b883a 	mov	r5,r16
  d02804:	1880022e 	bgeu	r3,r2,d02810 <__ltsf2+0x60>
  d02808:	0d035580 	call	d03558 <__fpcmp_parts_f>
  d0280c:	100d883a 	mov	r6,r2
  d02810:	3005883a 	mov	r2,r6
  d02814:	dfc00c17 	ldw	ra,48(sp)
  d02818:	dc400b17 	ldw	r17,44(sp)
  d0281c:	dc000a17 	ldw	r16,40(sp)
  d02820:	dec00d04 	addi	sp,sp,52
  d02824:	f800283a 	ret

00d02828 <__lesf2>:
  d02828:	defff304 	addi	sp,sp,-52
  d0282c:	dc400b15 	stw	r17,44(sp)
  d02830:	dc400204 	addi	r17,sp,8
  d02834:	dc000a15 	stw	r16,40(sp)
  d02838:	d9000015 	stw	r4,0(sp)
  d0283c:	d9400115 	stw	r5,4(sp)
  d02840:	d809883a 	mov	r4,sp
  d02844:	880b883a 	mov	r5,r17
  d02848:	dc000604 	addi	r16,sp,24
  d0284c:	dfc00c15 	stw	ra,48(sp)
  d02850:	0d034900 	call	d03490 <__unpack_f>
  d02854:	d9000104 	addi	r4,sp,4
  d02858:	800b883a 	mov	r5,r16
  d0285c:	0d034900 	call	d03490 <__unpack_f>
  d02860:	d8800217 	ldw	r2,8(sp)
  d02864:	00c00044 	movi	r3,1
  d02868:	180d883a 	mov	r6,r3
  d0286c:	1880062e 	bgeu	r3,r2,d02888 <__lesf2+0x60>
  d02870:	d8800617 	ldw	r2,24(sp)
  d02874:	8809883a 	mov	r4,r17
  d02878:	800b883a 	mov	r5,r16
  d0287c:	1880022e 	bgeu	r3,r2,d02888 <__lesf2+0x60>
  d02880:	0d035580 	call	d03558 <__fpcmp_parts_f>
  d02884:	100d883a 	mov	r6,r2
  d02888:	3005883a 	mov	r2,r6
  d0288c:	dfc00c17 	ldw	ra,48(sp)
  d02890:	dc400b17 	ldw	r17,44(sp)
  d02894:	dc000a17 	ldw	r16,40(sp)
  d02898:	dec00d04 	addi	sp,sp,52
  d0289c:	f800283a 	ret

00d028a0 <__floatsisf>:
  d028a0:	2006d7fa 	srli	r3,r4,31
  d028a4:	defffa04 	addi	sp,sp,-24
  d028a8:	008000c4 	movi	r2,3
  d028ac:	dfc00515 	stw	ra,20(sp)
  d028b0:	dc000415 	stw	r16,16(sp)
  d028b4:	d8800015 	stw	r2,0(sp)
  d028b8:	d8c00115 	stw	r3,4(sp)
  d028bc:	2000081e 	bne	r4,zero,d028e0 <__floatsisf+0x40>
  d028c0:	00800084 	movi	r2,2
  d028c4:	d8800015 	stw	r2,0(sp)
  d028c8:	d809883a 	mov	r4,sp
  d028cc:	0d033300 	call	d03330 <__pack_f>
  d028d0:	dfc00517 	ldw	ra,20(sp)
  d028d4:	dc000417 	ldw	r16,16(sp)
  d028d8:	dec00604 	addi	sp,sp,24
  d028dc:	f800283a 	ret
  d028e0:	00800784 	movi	r2,30
  d028e4:	1807003a 	cmpeq	r3,r3,zero
  d028e8:	d8800215 	stw	r2,8(sp)
  d028ec:	18000e1e 	bne	r3,zero,d02928 <__floatsisf+0x88>
  d028f0:	00a00034 	movhi	r2,32768
  d028f4:	20800e26 	beq	r4,r2,d02930 <__floatsisf+0x90>
  d028f8:	0121c83a 	sub	r16,zero,r4
  d028fc:	8009883a 	mov	r4,r16
  d02900:	dc000315 	stw	r16,12(sp)
  d02904:	0d032b00 	call	d032b0 <__clzsi2>
  d02908:	117fffc4 	addi	r5,r2,-1
  d0290c:	017fee0e 	bge	zero,r5,d028c8 <__floatsisf+0x28>
  d02910:	d8800217 	ldw	r2,8(sp)
  d02914:	8146983a 	sll	r3,r16,r5
  d02918:	1145c83a 	sub	r2,r2,r5
  d0291c:	d8c00315 	stw	r3,12(sp)
  d02920:	d8800215 	stw	r2,8(sp)
  d02924:	003fe806 	br	d028c8 <__floatsisf+0x28>
  d02928:	2021883a 	mov	r16,r4
  d0292c:	003ff306 	br	d028fc <__floatsisf+0x5c>
  d02930:	00b3c034 	movhi	r2,52992
  d02934:	003fe606 	br	d028d0 <__floatsisf+0x30>

00d02938 <__fixsfsi>:
  d02938:	defffa04 	addi	sp,sp,-24
  d0293c:	d9000015 	stw	r4,0(sp)
  d02940:	d9400104 	addi	r5,sp,4
  d02944:	d809883a 	mov	r4,sp
  d02948:	dfc00515 	stw	ra,20(sp)
  d0294c:	0d034900 	call	d03490 <__unpack_f>
  d02950:	d8c00117 	ldw	r3,4(sp)
  d02954:	00800084 	movi	r2,2
  d02958:	1880041e 	bne	r3,r2,d0296c <__fixsfsi+0x34>
  d0295c:	0005883a 	mov	r2,zero
  d02960:	dfc00517 	ldw	ra,20(sp)
  d02964:	dec00604 	addi	sp,sp,24
  d02968:	f800283a 	ret
  d0296c:	00800044 	movi	r2,1
  d02970:	10fffa2e 	bgeu	r2,r3,d0295c <__fixsfsi+0x24>
  d02974:	00800104 	movi	r2,4
  d02978:	18800426 	beq	r3,r2,d0298c <__fixsfsi+0x54>
  d0297c:	d8800317 	ldw	r2,12(sp)
  d02980:	103ff616 	blt	r2,zero,d0295c <__fixsfsi+0x24>
  d02984:	00c00784 	movi	r3,30
  d02988:	1880070e 	bge	r3,r2,d029a8 <__fixsfsi+0x70>
  d0298c:	d8800217 	ldw	r2,8(sp)
  d02990:	10000c1e 	bne	r2,zero,d029c4 <__fixsfsi+0x8c>
  d02994:	00a00034 	movhi	r2,32768
  d02998:	10bfffc4 	addi	r2,r2,-1
  d0299c:	dfc00517 	ldw	ra,20(sp)
  d029a0:	dec00604 	addi	sp,sp,24
  d029a4:	f800283a 	ret
  d029a8:	1885c83a 	sub	r2,r3,r2
  d029ac:	d9000217 	ldw	r4,8(sp)
  d029b0:	d8c00417 	ldw	r3,16(sp)
  d029b4:	1884d83a 	srl	r2,r3,r2
  d029b8:	203fe926 	beq	r4,zero,d02960 <__fixsfsi+0x28>
  d029bc:	0085c83a 	sub	r2,zero,r2
  d029c0:	003fe706 	br	d02960 <__fixsfsi+0x28>
  d029c4:	00a00034 	movhi	r2,32768
  d029c8:	003fe506 	br	d02960 <__fixsfsi+0x28>

00d029cc <__extendsfdf2>:
  d029cc:	defff904 	addi	sp,sp,-28
  d029d0:	d9000115 	stw	r4,4(sp)
  d029d4:	d9400204 	addi	r5,sp,8
  d029d8:	d9000104 	addi	r4,sp,4
  d029dc:	dfc00615 	stw	ra,24(sp)
  d029e0:	0d034900 	call	d03490 <__unpack_f>
  d029e4:	d9c00517 	ldw	r7,20(sp)
  d029e8:	0011883a 	mov	r8,zero
  d029ec:	400697ba 	slli	r3,r8,30
  d029f0:	3812d0ba 	srli	r9,r7,2
  d029f4:	380497ba 	slli	r2,r7,30
  d029f8:	d9000217 	ldw	r4,8(sp)
  d029fc:	d9400317 	ldw	r5,12(sp)
  d02a00:	d9800417 	ldw	r6,16(sp)
  d02a04:	48c6b03a 	or	r3,r9,r3
  d02a08:	100f883a 	mov	r7,r2
  d02a0c:	d8c00015 	stw	r3,0(sp)
  d02a10:	0d032040 	call	d03204 <__make_dp>
  d02a14:	dfc00617 	ldw	ra,24(sp)
  d02a18:	dec00704 	addi	sp,sp,28
  d02a1c:	f800283a 	ret

00d02a20 <_fpadd_parts>:
  d02a20:	defff804 	addi	sp,sp,-32
  d02a24:	dcc00315 	stw	r19,12(sp)
  d02a28:	2027883a 	mov	r19,r4
  d02a2c:	21000017 	ldw	r4,0(r4)
  d02a30:	00c00044 	movi	r3,1
  d02a34:	dd400515 	stw	r21,20(sp)
  d02a38:	dd000415 	stw	r20,16(sp)
  d02a3c:	ddc00715 	stw	r23,28(sp)
  d02a40:	dd800615 	stw	r22,24(sp)
  d02a44:	dc800215 	stw	r18,8(sp)
  d02a48:	dc400115 	stw	r17,4(sp)
  d02a4c:	dc000015 	stw	r16,0(sp)
  d02a50:	282b883a 	mov	r21,r5
  d02a54:	3029883a 	mov	r20,r6
  d02a58:	1900632e 	bgeu	r3,r4,d02be8 <_fpadd_parts+0x1c8>
  d02a5c:	28800017 	ldw	r2,0(r5)
  d02a60:	1880812e 	bgeu	r3,r2,d02c68 <_fpadd_parts+0x248>
  d02a64:	00c00104 	movi	r3,4
  d02a68:	20c0dc26 	beq	r4,r3,d02ddc <_fpadd_parts+0x3bc>
  d02a6c:	10c07e26 	beq	r2,r3,d02c68 <_fpadd_parts+0x248>
  d02a70:	00c00084 	movi	r3,2
  d02a74:	10c06726 	beq	r2,r3,d02c14 <_fpadd_parts+0x1f4>
  d02a78:	20c07b26 	beq	r4,r3,d02c68 <_fpadd_parts+0x248>
  d02a7c:	9dc00217 	ldw	r23,8(r19)
  d02a80:	28c00217 	ldw	r3,8(r5)
  d02a84:	9c400317 	ldw	r17,12(r19)
  d02a88:	2bc00317 	ldw	r15,12(r5)
  d02a8c:	b8cdc83a 	sub	r6,r23,r3
  d02a90:	9c800417 	ldw	r18,16(r19)
  d02a94:	2c000417 	ldw	r16,16(r5)
  d02a98:	3009883a 	mov	r4,r6
  d02a9c:	30009716 	blt	r6,zero,d02cfc <_fpadd_parts+0x2dc>
  d02aa0:	00800fc4 	movi	r2,63
  d02aa4:	11806b16 	blt	r2,r6,d02c54 <_fpadd_parts+0x234>
  d02aa8:	0100a40e 	bge	zero,r4,d02d3c <_fpadd_parts+0x31c>
  d02aac:	35bff804 	addi	r22,r6,-32
  d02ab0:	b000bc16 	blt	r22,zero,d02da4 <_fpadd_parts+0x384>
  d02ab4:	8596d83a 	srl	r11,r16,r22
  d02ab8:	0019883a 	mov	r12,zero
  d02abc:	0013883a 	mov	r9,zero
  d02ac0:	01000044 	movi	r4,1
  d02ac4:	0015883a 	mov	r10,zero
  d02ac8:	b000be16 	blt	r22,zero,d02dc4 <_fpadd_parts+0x3a4>
  d02acc:	2590983a 	sll	r8,r4,r22
  d02ad0:	000f883a 	mov	r7,zero
  d02ad4:	00bfffc4 	movi	r2,-1
  d02ad8:	3889883a 	add	r4,r7,r2
  d02adc:	408b883a 	add	r5,r8,r2
  d02ae0:	21cd803a 	cmpltu	r6,r4,r7
  d02ae4:	314b883a 	add	r5,r6,r5
  d02ae8:	7904703a 	and	r2,r15,r4
  d02aec:	8146703a 	and	r3,r16,r5
  d02af0:	10c4b03a 	or	r2,r2,r3
  d02af4:	10000226 	beq	r2,zero,d02b00 <_fpadd_parts+0xe0>
  d02af8:	02400044 	movi	r9,1
  d02afc:	0015883a 	mov	r10,zero
  d02b00:	5a5eb03a 	or	r15,r11,r9
  d02b04:	62a0b03a 	or	r16,r12,r10
  d02b08:	99400117 	ldw	r5,4(r19)
  d02b0c:	a8800117 	ldw	r2,4(r21)
  d02b10:	28806e26 	beq	r5,r2,d02ccc <_fpadd_parts+0x2ac>
  d02b14:	28006626 	beq	r5,zero,d02cb0 <_fpadd_parts+0x290>
  d02b18:	7c45c83a 	sub	r2,r15,r17
  d02b1c:	7889803a 	cmpltu	r4,r15,r2
  d02b20:	8487c83a 	sub	r3,r16,r18
  d02b24:	1909c83a 	sub	r4,r3,r4
  d02b28:	100d883a 	mov	r6,r2
  d02b2c:	200f883a 	mov	r7,r4
  d02b30:	38007716 	blt	r7,zero,d02d10 <_fpadd_parts+0x2f0>
  d02b34:	a5c00215 	stw	r23,8(r20)
  d02b38:	a1c00415 	stw	r7,16(r20)
  d02b3c:	a0000115 	stw	zero,4(r20)
  d02b40:	a1800315 	stw	r6,12(r20)
  d02b44:	a2000317 	ldw	r8,12(r20)
  d02b48:	a2400417 	ldw	r9,16(r20)
  d02b4c:	00bfffc4 	movi	r2,-1
  d02b50:	408b883a 	add	r5,r8,r2
  d02b54:	2a09803a 	cmpltu	r4,r5,r8
  d02b58:	488d883a 	add	r6,r9,r2
  d02b5c:	01c40034 	movhi	r7,4096
  d02b60:	39ffffc4 	addi	r7,r7,-1
  d02b64:	218d883a 	add	r6,r4,r6
  d02b68:	39801736 	bltu	r7,r6,d02bc8 <_fpadd_parts+0x1a8>
  d02b6c:	31c06526 	beq	r6,r7,d02d04 <_fpadd_parts+0x2e4>
  d02b70:	a3000217 	ldw	r12,8(r20)
  d02b74:	4209883a 	add	r4,r8,r8
  d02b78:	00bfffc4 	movi	r2,-1
  d02b7c:	220f803a 	cmpltu	r7,r4,r8
  d02b80:	4a4b883a 	add	r5,r9,r9
  d02b84:	394f883a 	add	r7,r7,r5
  d02b88:	2095883a 	add	r10,r4,r2
  d02b8c:	3897883a 	add	r11,r7,r2
  d02b90:	510d803a 	cmpltu	r6,r10,r4
  d02b94:	6099883a 	add	r12,r12,r2
  d02b98:	32d7883a 	add	r11,r6,r11
  d02b9c:	00840034 	movhi	r2,4096
  d02ba0:	10bfffc4 	addi	r2,r2,-1
  d02ba4:	2011883a 	mov	r8,r4
  d02ba8:	3813883a 	mov	r9,r7
  d02bac:	a1000315 	stw	r4,12(r20)
  d02bb0:	a1c00415 	stw	r7,16(r20)
  d02bb4:	a3000215 	stw	r12,8(r20)
  d02bb8:	12c00336 	bltu	r2,r11,d02bc8 <_fpadd_parts+0x1a8>
  d02bbc:	58bfed1e 	bne	r11,r2,d02b74 <_fpadd_parts+0x154>
  d02bc0:	00bfff84 	movi	r2,-2
  d02bc4:	12bfeb2e 	bgeu	r2,r10,d02b74 <_fpadd_parts+0x154>
  d02bc8:	a2800417 	ldw	r10,16(r20)
  d02bcc:	008000c4 	movi	r2,3
  d02bd0:	00c80034 	movhi	r3,8192
  d02bd4:	18ffffc4 	addi	r3,r3,-1
  d02bd8:	a2400317 	ldw	r9,12(r20)
  d02bdc:	a0800015 	stw	r2,0(r20)
  d02be0:	1a802336 	bltu	r3,r10,d02c70 <_fpadd_parts+0x250>
  d02be4:	a027883a 	mov	r19,r20
  d02be8:	9805883a 	mov	r2,r19
  d02bec:	ddc00717 	ldw	r23,28(sp)
  d02bf0:	dd800617 	ldw	r22,24(sp)
  d02bf4:	dd400517 	ldw	r21,20(sp)
  d02bf8:	dd000417 	ldw	r20,16(sp)
  d02bfc:	dcc00317 	ldw	r19,12(sp)
  d02c00:	dc800217 	ldw	r18,8(sp)
  d02c04:	dc400117 	ldw	r17,4(sp)
  d02c08:	dc000017 	ldw	r16,0(sp)
  d02c0c:	dec00804 	addi	sp,sp,32
  d02c10:	f800283a 	ret
  d02c14:	20fff41e 	bne	r4,r3,d02be8 <_fpadd_parts+0x1c8>
  d02c18:	31000015 	stw	r4,0(r6)
  d02c1c:	98800117 	ldw	r2,4(r19)
  d02c20:	30800115 	stw	r2,4(r6)
  d02c24:	98c00217 	ldw	r3,8(r19)
  d02c28:	30c00215 	stw	r3,8(r6)
  d02c2c:	98800317 	ldw	r2,12(r19)
  d02c30:	30800315 	stw	r2,12(r6)
  d02c34:	98c00417 	ldw	r3,16(r19)
  d02c38:	30c00415 	stw	r3,16(r6)
  d02c3c:	98800117 	ldw	r2,4(r19)
  d02c40:	28c00117 	ldw	r3,4(r5)
  d02c44:	3027883a 	mov	r19,r6
  d02c48:	10c4703a 	and	r2,r2,r3
  d02c4c:	30800115 	stw	r2,4(r6)
  d02c50:	003fe506 	br	d02be8 <_fpadd_parts+0x1c8>
  d02c54:	1dc02616 	blt	r3,r23,d02cf0 <_fpadd_parts+0x2d0>
  d02c58:	0023883a 	mov	r17,zero
  d02c5c:	182f883a 	mov	r23,r3
  d02c60:	0025883a 	mov	r18,zero
  d02c64:	003fa806 	br	d02b08 <_fpadd_parts+0xe8>
  d02c68:	a827883a 	mov	r19,r21
  d02c6c:	003fde06 	br	d02be8 <_fpadd_parts+0x1c8>
  d02c70:	01800044 	movi	r6,1
  d02c74:	500497fa 	slli	r2,r10,31
  d02c78:	4808d07a 	srli	r4,r9,1
  d02c7c:	518ad83a 	srl	r5,r10,r6
  d02c80:	a2000217 	ldw	r8,8(r20)
  d02c84:	1108b03a 	or	r4,r2,r4
  d02c88:	0007883a 	mov	r3,zero
  d02c8c:	4984703a 	and	r2,r9,r6
  d02c90:	208cb03a 	or	r6,r4,r2
  d02c94:	28ceb03a 	or	r7,r5,r3
  d02c98:	42000044 	addi	r8,r8,1
  d02c9c:	a027883a 	mov	r19,r20
  d02ca0:	a1c00415 	stw	r7,16(r20)
  d02ca4:	a2000215 	stw	r8,8(r20)
  d02ca8:	a1800315 	stw	r6,12(r20)
  d02cac:	003fce06 	br	d02be8 <_fpadd_parts+0x1c8>
  d02cb0:	8bc5c83a 	sub	r2,r17,r15
  d02cb4:	8889803a 	cmpltu	r4,r17,r2
  d02cb8:	9407c83a 	sub	r3,r18,r16
  d02cbc:	1909c83a 	sub	r4,r3,r4
  d02cc0:	100d883a 	mov	r6,r2
  d02cc4:	200f883a 	mov	r7,r4
  d02cc8:	003f9906 	br	d02b30 <_fpadd_parts+0x110>
  d02ccc:	7c45883a 	add	r2,r15,r17
  d02cd0:	13c9803a 	cmpltu	r4,r2,r15
  d02cd4:	8487883a 	add	r3,r16,r18
  d02cd8:	20c9883a 	add	r4,r4,r3
  d02cdc:	a1400115 	stw	r5,4(r20)
  d02ce0:	a5c00215 	stw	r23,8(r20)
  d02ce4:	a0800315 	stw	r2,12(r20)
  d02ce8:	a1000415 	stw	r4,16(r20)
  d02cec:	003fb606 	br	d02bc8 <_fpadd_parts+0x1a8>
  d02cf0:	001f883a 	mov	r15,zero
  d02cf4:	0021883a 	mov	r16,zero
  d02cf8:	003f8306 	br	d02b08 <_fpadd_parts+0xe8>
  d02cfc:	018dc83a 	sub	r6,zero,r6
  d02d00:	003f6706 	br	d02aa0 <_fpadd_parts+0x80>
  d02d04:	00bfff84 	movi	r2,-2
  d02d08:	117faf36 	bltu	r2,r5,d02bc8 <_fpadd_parts+0x1a8>
  d02d0c:	003f9806 	br	d02b70 <_fpadd_parts+0x150>
  d02d10:	0005883a 	mov	r2,zero
  d02d14:	1189c83a 	sub	r4,r2,r6
  d02d18:	1105803a 	cmpltu	r2,r2,r4
  d02d1c:	01cbc83a 	sub	r5,zero,r7
  d02d20:	2885c83a 	sub	r2,r5,r2
  d02d24:	01800044 	movi	r6,1
  d02d28:	a1800115 	stw	r6,4(r20)
  d02d2c:	a5c00215 	stw	r23,8(r20)
  d02d30:	a1000315 	stw	r4,12(r20)
  d02d34:	a0800415 	stw	r2,16(r20)
  d02d38:	003f8206 	br	d02b44 <_fpadd_parts+0x124>
  d02d3c:	203f7226 	beq	r4,zero,d02b08 <_fpadd_parts+0xe8>
  d02d40:	35bff804 	addi	r22,r6,-32
  d02d44:	b9af883a 	add	r23,r23,r6
  d02d48:	b0003116 	blt	r22,zero,d02e10 <_fpadd_parts+0x3f0>
  d02d4c:	959ad83a 	srl	r13,r18,r22
  d02d50:	001d883a 	mov	r14,zero
  d02d54:	000f883a 	mov	r7,zero
  d02d58:	01000044 	movi	r4,1
  d02d5c:	0011883a 	mov	r8,zero
  d02d60:	b0002516 	blt	r22,zero,d02df8 <_fpadd_parts+0x3d8>
  d02d64:	2594983a 	sll	r10,r4,r22
  d02d68:	0013883a 	mov	r9,zero
  d02d6c:	00bfffc4 	movi	r2,-1
  d02d70:	4889883a 	add	r4,r9,r2
  d02d74:	508b883a 	add	r5,r10,r2
  d02d78:	224d803a 	cmpltu	r6,r4,r9
  d02d7c:	314b883a 	add	r5,r6,r5
  d02d80:	8904703a 	and	r2,r17,r4
  d02d84:	9146703a 	and	r3,r18,r5
  d02d88:	10c4b03a 	or	r2,r2,r3
  d02d8c:	10000226 	beq	r2,zero,d02d98 <_fpadd_parts+0x378>
  d02d90:	01c00044 	movi	r7,1
  d02d94:	0011883a 	mov	r8,zero
  d02d98:	69e2b03a 	or	r17,r13,r7
  d02d9c:	7224b03a 	or	r18,r14,r8
  d02da0:	003f5906 	br	d02b08 <_fpadd_parts+0xe8>
  d02da4:	8407883a 	add	r3,r16,r16
  d02da8:	008007c4 	movi	r2,31
  d02dac:	1185c83a 	sub	r2,r2,r6
  d02db0:	1886983a 	sll	r3,r3,r2
  d02db4:	7996d83a 	srl	r11,r15,r6
  d02db8:	8198d83a 	srl	r12,r16,r6
  d02dbc:	1ad6b03a 	or	r11,r3,r11
  d02dc0:	003f3e06 	br	d02abc <_fpadd_parts+0x9c>
  d02dc4:	2006d07a 	srli	r3,r4,1
  d02dc8:	008007c4 	movi	r2,31
  d02dcc:	1185c83a 	sub	r2,r2,r6
  d02dd0:	1890d83a 	srl	r8,r3,r2
  d02dd4:	218e983a 	sll	r7,r4,r6
  d02dd8:	003f3e06 	br	d02ad4 <_fpadd_parts+0xb4>
  d02ddc:	113f821e 	bne	r2,r4,d02be8 <_fpadd_parts+0x1c8>
  d02de0:	28c00117 	ldw	r3,4(r5)
  d02de4:	98800117 	ldw	r2,4(r19)
  d02de8:	10ff7f26 	beq	r2,r3,d02be8 <_fpadd_parts+0x1c8>
  d02dec:	04c03474 	movhi	r19,209
  d02df0:	9cc45304 	addi	r19,r19,4428
  d02df4:	003f7c06 	br	d02be8 <_fpadd_parts+0x1c8>
  d02df8:	2006d07a 	srli	r3,r4,1
  d02dfc:	008007c4 	movi	r2,31
  d02e00:	1185c83a 	sub	r2,r2,r6
  d02e04:	1894d83a 	srl	r10,r3,r2
  d02e08:	2192983a 	sll	r9,r4,r6
  d02e0c:	003fd706 	br	d02d6c <_fpadd_parts+0x34c>
  d02e10:	9487883a 	add	r3,r18,r18
  d02e14:	008007c4 	movi	r2,31
  d02e18:	1185c83a 	sub	r2,r2,r6
  d02e1c:	1886983a 	sll	r3,r3,r2
  d02e20:	899ad83a 	srl	r13,r17,r6
  d02e24:	919cd83a 	srl	r14,r18,r6
  d02e28:	1b5ab03a 	or	r13,r3,r13
  d02e2c:	003fc906 	br	d02d54 <_fpadd_parts+0x334>

00d02e30 <__subdf3>:
  d02e30:	deffea04 	addi	sp,sp,-88
  d02e34:	dcc01415 	stw	r19,80(sp)
  d02e38:	dcc00404 	addi	r19,sp,16
  d02e3c:	2011883a 	mov	r8,r4
  d02e40:	2813883a 	mov	r9,r5
  d02e44:	dc401315 	stw	r17,76(sp)
  d02e48:	d809883a 	mov	r4,sp
  d02e4c:	980b883a 	mov	r5,r19
  d02e50:	dc400904 	addi	r17,sp,36
  d02e54:	dfc01515 	stw	ra,84(sp)
  d02e58:	da400115 	stw	r9,4(sp)
  d02e5c:	d9c00315 	stw	r7,12(sp)
  d02e60:	da000015 	stw	r8,0(sp)
  d02e64:	d9800215 	stw	r6,8(sp)
  d02e68:	0d039400 	call	d03940 <__unpack_d>
  d02e6c:	d9000204 	addi	r4,sp,8
  d02e70:	880b883a 	mov	r5,r17
  d02e74:	0d039400 	call	d03940 <__unpack_d>
  d02e78:	d8800a17 	ldw	r2,40(sp)
  d02e7c:	880b883a 	mov	r5,r17
  d02e80:	9809883a 	mov	r4,r19
  d02e84:	d9800e04 	addi	r6,sp,56
  d02e88:	1080005c 	xori	r2,r2,1
  d02e8c:	d8800a15 	stw	r2,40(sp)
  d02e90:	0d02a200 	call	d02a20 <_fpadd_parts>
  d02e94:	1009883a 	mov	r4,r2
  d02e98:	0d0362c0 	call	d0362c <__pack_d>
  d02e9c:	dfc01517 	ldw	ra,84(sp)
  d02ea0:	dcc01417 	ldw	r19,80(sp)
  d02ea4:	dc401317 	ldw	r17,76(sp)
  d02ea8:	dec01604 	addi	sp,sp,88
  d02eac:	f800283a 	ret

00d02eb0 <__adddf3>:
  d02eb0:	deffea04 	addi	sp,sp,-88
  d02eb4:	dcc01415 	stw	r19,80(sp)
  d02eb8:	dcc00404 	addi	r19,sp,16
  d02ebc:	2011883a 	mov	r8,r4
  d02ec0:	2813883a 	mov	r9,r5
  d02ec4:	dc401315 	stw	r17,76(sp)
  d02ec8:	d809883a 	mov	r4,sp
  d02ecc:	980b883a 	mov	r5,r19
  d02ed0:	dc400904 	addi	r17,sp,36
  d02ed4:	dfc01515 	stw	ra,84(sp)
  d02ed8:	da400115 	stw	r9,4(sp)
  d02edc:	d9c00315 	stw	r7,12(sp)
  d02ee0:	da000015 	stw	r8,0(sp)
  d02ee4:	d9800215 	stw	r6,8(sp)
  d02ee8:	0d039400 	call	d03940 <__unpack_d>
  d02eec:	d9000204 	addi	r4,sp,8
  d02ef0:	880b883a 	mov	r5,r17
  d02ef4:	0d039400 	call	d03940 <__unpack_d>
  d02ef8:	d9800e04 	addi	r6,sp,56
  d02efc:	9809883a 	mov	r4,r19
  d02f00:	880b883a 	mov	r5,r17
  d02f04:	0d02a200 	call	d02a20 <_fpadd_parts>
  d02f08:	1009883a 	mov	r4,r2
  d02f0c:	0d0362c0 	call	d0362c <__pack_d>
  d02f10:	dfc01517 	ldw	ra,84(sp)
  d02f14:	dcc01417 	ldw	r19,80(sp)
  d02f18:	dc401317 	ldw	r17,76(sp)
  d02f1c:	dec01604 	addi	sp,sp,88
  d02f20:	f800283a 	ret

00d02f24 <__divdf3>:
  d02f24:	deffed04 	addi	sp,sp,-76
  d02f28:	dcc01115 	stw	r19,68(sp)
  d02f2c:	dcc00404 	addi	r19,sp,16
  d02f30:	2011883a 	mov	r8,r4
  d02f34:	2813883a 	mov	r9,r5
  d02f38:	dc000e15 	stw	r16,56(sp)
  d02f3c:	d809883a 	mov	r4,sp
  d02f40:	980b883a 	mov	r5,r19
  d02f44:	dc000904 	addi	r16,sp,36
  d02f48:	dfc01215 	stw	ra,72(sp)
  d02f4c:	da400115 	stw	r9,4(sp)
  d02f50:	d9c00315 	stw	r7,12(sp)
  d02f54:	da000015 	stw	r8,0(sp)
  d02f58:	d9800215 	stw	r6,8(sp)
  d02f5c:	dc801015 	stw	r18,64(sp)
  d02f60:	dc400f15 	stw	r17,60(sp)
  d02f64:	0d039400 	call	d03940 <__unpack_d>
  d02f68:	d9000204 	addi	r4,sp,8
  d02f6c:	800b883a 	mov	r5,r16
  d02f70:	0d039400 	call	d03940 <__unpack_d>
  d02f74:	d9000417 	ldw	r4,16(sp)
  d02f78:	00800044 	movi	r2,1
  d02f7c:	11000b2e 	bgeu	r2,r4,d02fac <__divdf3+0x88>
  d02f80:	d9400917 	ldw	r5,36(sp)
  d02f84:	1140762e 	bgeu	r2,r5,d03160 <__divdf3+0x23c>
  d02f88:	d8800517 	ldw	r2,20(sp)
  d02f8c:	d8c00a17 	ldw	r3,40(sp)
  d02f90:	01800104 	movi	r6,4
  d02f94:	10c4f03a 	xor	r2,r2,r3
  d02f98:	d8800515 	stw	r2,20(sp)
  d02f9c:	21800226 	beq	r4,r6,d02fa8 <__divdf3+0x84>
  d02fa0:	00800084 	movi	r2,2
  d02fa4:	2080141e 	bne	r4,r2,d02ff8 <__divdf3+0xd4>
  d02fa8:	29000926 	beq	r5,r4,d02fd0 <__divdf3+0xac>
  d02fac:	9809883a 	mov	r4,r19
  d02fb0:	0d0362c0 	call	d0362c <__pack_d>
  d02fb4:	dfc01217 	ldw	ra,72(sp)
  d02fb8:	dcc01117 	ldw	r19,68(sp)
  d02fbc:	dc801017 	ldw	r18,64(sp)
  d02fc0:	dc400f17 	ldw	r17,60(sp)
  d02fc4:	dc000e17 	ldw	r16,56(sp)
  d02fc8:	dec01304 	addi	sp,sp,76
  d02fcc:	f800283a 	ret
  d02fd0:	01003474 	movhi	r4,209
  d02fd4:	21045304 	addi	r4,r4,4428
  d02fd8:	0d0362c0 	call	d0362c <__pack_d>
  d02fdc:	dfc01217 	ldw	ra,72(sp)
  d02fe0:	dcc01117 	ldw	r19,68(sp)
  d02fe4:	dc801017 	ldw	r18,64(sp)
  d02fe8:	dc400f17 	ldw	r17,60(sp)
  d02fec:	dc000e17 	ldw	r16,56(sp)
  d02ff0:	dec01304 	addi	sp,sp,76
  d02ff4:	f800283a 	ret
  d02ff8:	29805b26 	beq	r5,r6,d03168 <__divdf3+0x244>
  d02ffc:	28802d26 	beq	r5,r2,d030b4 <__divdf3+0x190>
  d03000:	d8c00617 	ldw	r3,24(sp)
  d03004:	d8800b17 	ldw	r2,44(sp)
  d03008:	d9c00817 	ldw	r7,32(sp)
  d0300c:	dc400d17 	ldw	r17,52(sp)
  d03010:	188bc83a 	sub	r5,r3,r2
  d03014:	d9800717 	ldw	r6,28(sp)
  d03018:	dc000c17 	ldw	r16,48(sp)
  d0301c:	d9400615 	stw	r5,24(sp)
  d03020:	3c403836 	bltu	r7,r17,d03104 <__divdf3+0x1e0>
  d03024:	89c03626 	beq	r17,r7,d03100 <__divdf3+0x1dc>
  d03028:	0015883a 	mov	r10,zero
  d0302c:	001d883a 	mov	r14,zero
  d03030:	02c40034 	movhi	r11,4096
  d03034:	001f883a 	mov	r15,zero
  d03038:	003f883a 	mov	ra,zero
  d0303c:	04800f44 	movi	r18,61
  d03040:	00000f06 	br	d03080 <__divdf3+0x15c>
  d03044:	601d883a 	mov	r14,r12
  d03048:	681f883a 	mov	r15,r13
  d0304c:	400d883a 	mov	r6,r8
  d03050:	100f883a 	mov	r7,r2
  d03054:	3191883a 	add	r8,r6,r6
  d03058:	5808d07a 	srli	r4,r11,1
  d0305c:	4185803a 	cmpltu	r2,r8,r6
  d03060:	39d3883a 	add	r9,r7,r7
  d03064:	28c6b03a 	or	r3,r5,r3
  d03068:	1245883a 	add	r2,r2,r9
  d0306c:	1815883a 	mov	r10,r3
  d03070:	2017883a 	mov	r11,r4
  d03074:	400d883a 	mov	r6,r8
  d03078:	100f883a 	mov	r7,r2
  d0307c:	fc801726 	beq	ra,r18,d030dc <__divdf3+0x1b8>
  d03080:	580a97fa 	slli	r5,r11,31
  d03084:	5006d07a 	srli	r3,r10,1
  d03088:	ffc00044 	addi	ra,ra,1
  d0308c:	3c7ff136 	bltu	r7,r17,d03054 <__divdf3+0x130>
  d03090:	3411c83a 	sub	r8,r6,r16
  d03094:	3205803a 	cmpltu	r2,r6,r8
  d03098:	3c53c83a 	sub	r9,r7,r17
  d0309c:	7298b03a 	or	r12,r14,r10
  d030a0:	7adab03a 	or	r13,r15,r11
  d030a4:	4885c83a 	sub	r2,r9,r2
  d030a8:	89ffe61e 	bne	r17,r7,d03044 <__divdf3+0x120>
  d030ac:	343fe936 	bltu	r6,r16,d03054 <__divdf3+0x130>
  d030b0:	003fe406 	br	d03044 <__divdf3+0x120>
  d030b4:	9809883a 	mov	r4,r19
  d030b8:	d9800415 	stw	r6,16(sp)
  d030bc:	0d0362c0 	call	d0362c <__pack_d>
  d030c0:	dfc01217 	ldw	ra,72(sp)
  d030c4:	dcc01117 	ldw	r19,68(sp)
  d030c8:	dc801017 	ldw	r18,64(sp)
  d030cc:	dc400f17 	ldw	r17,60(sp)
  d030d0:	dc000e17 	ldw	r16,56(sp)
  d030d4:	dec01304 	addi	sp,sp,76
  d030d8:	f800283a 	ret
  d030dc:	00803fc4 	movi	r2,255
  d030e0:	7090703a 	and	r8,r14,r2
  d030e4:	00802004 	movi	r2,128
  d030e8:	0007883a 	mov	r3,zero
  d030ec:	0013883a 	mov	r9,zero
  d030f0:	40800d26 	beq	r8,r2,d03128 <__divdf3+0x204>
  d030f4:	dbc00815 	stw	r15,32(sp)
  d030f8:	db800715 	stw	r14,28(sp)
  d030fc:	003fab06 	br	d02fac <__divdf3+0x88>
  d03100:	343fc92e 	bgeu	r6,r16,d03028 <__divdf3+0x104>
  d03104:	3185883a 	add	r2,r6,r6
  d03108:	1189803a 	cmpltu	r4,r2,r6
  d0310c:	39c7883a 	add	r3,r7,r7
  d03110:	20c9883a 	add	r4,r4,r3
  d03114:	297fffc4 	addi	r5,r5,-1
  d03118:	100d883a 	mov	r6,r2
  d0311c:	200f883a 	mov	r7,r4
  d03120:	d9400615 	stw	r5,24(sp)
  d03124:	003fc006 	br	d03028 <__divdf3+0x104>
  d03128:	483ff21e 	bne	r9,zero,d030f4 <__divdf3+0x1d0>
  d0312c:	01004004 	movi	r4,256
  d03130:	7104703a 	and	r2,r14,r4
  d03134:	10c4b03a 	or	r2,r2,r3
  d03138:	103fee1e 	bne	r2,zero,d030f4 <__divdf3+0x1d0>
  d0313c:	31c4b03a 	or	r2,r6,r7
  d03140:	103fec26 	beq	r2,zero,d030f4 <__divdf3+0x1d0>
  d03144:	7205883a 	add	r2,r14,r8
  d03148:	1391803a 	cmpltu	r8,r2,r14
  d0314c:	43d1883a 	add	r8,r8,r15
  d03150:	013fc004 	movi	r4,-256
  d03154:	111c703a 	and	r14,r2,r4
  d03158:	401f883a 	mov	r15,r8
  d0315c:	003fe506 	br	d030f4 <__divdf3+0x1d0>
  d03160:	8009883a 	mov	r4,r16
  d03164:	003f9206 	br	d02fb0 <__divdf3+0x8c>
  d03168:	9809883a 	mov	r4,r19
  d0316c:	d8000715 	stw	zero,28(sp)
  d03170:	d8000815 	stw	zero,32(sp)
  d03174:	d8000615 	stw	zero,24(sp)
  d03178:	003f8d06 	br	d02fb0 <__divdf3+0x8c>

00d0317c <__nedf2>:
  d0317c:	deffef04 	addi	sp,sp,-68
  d03180:	dc400f15 	stw	r17,60(sp)
  d03184:	dc400404 	addi	r17,sp,16
  d03188:	2005883a 	mov	r2,r4
  d0318c:	2807883a 	mov	r3,r5
  d03190:	dc000e15 	stw	r16,56(sp)
  d03194:	d809883a 	mov	r4,sp
  d03198:	880b883a 	mov	r5,r17
  d0319c:	dc000904 	addi	r16,sp,36
  d031a0:	d8c00115 	stw	r3,4(sp)
  d031a4:	d8800015 	stw	r2,0(sp)
  d031a8:	d9800215 	stw	r6,8(sp)
  d031ac:	dfc01015 	stw	ra,64(sp)
  d031b0:	d9c00315 	stw	r7,12(sp)
  d031b4:	0d039400 	call	d03940 <__unpack_d>
  d031b8:	d9000204 	addi	r4,sp,8
  d031bc:	800b883a 	mov	r5,r16
  d031c0:	0d039400 	call	d03940 <__unpack_d>
  d031c4:	d8800417 	ldw	r2,16(sp)
  d031c8:	00c00044 	movi	r3,1
  d031cc:	180d883a 	mov	r6,r3
  d031d0:	1880062e 	bgeu	r3,r2,d031ec <__nedf2+0x70>
  d031d4:	d8800917 	ldw	r2,36(sp)
  d031d8:	8809883a 	mov	r4,r17
  d031dc:	800b883a 	mov	r5,r16
  d031e0:	1880022e 	bgeu	r3,r2,d031ec <__nedf2+0x70>
  d031e4:	0d03a780 	call	d03a78 <__fpcmp_parts_d>
  d031e8:	100d883a 	mov	r6,r2
  d031ec:	3005883a 	mov	r2,r6
  d031f0:	dfc01017 	ldw	ra,64(sp)
  d031f4:	dc400f17 	ldw	r17,60(sp)
  d031f8:	dc000e17 	ldw	r16,56(sp)
  d031fc:	dec01104 	addi	sp,sp,68
  d03200:	f800283a 	ret

00d03204 <__make_dp>:
  d03204:	defff904 	addi	sp,sp,-28
  d03208:	d8c00717 	ldw	r3,28(sp)
  d0320c:	d9000015 	stw	r4,0(sp)
  d03210:	d809883a 	mov	r4,sp
  d03214:	dfc00515 	stw	ra,20(sp)
  d03218:	d9c00615 	stw	r7,24(sp)
  d0321c:	d9400115 	stw	r5,4(sp)
  d03220:	d9800215 	stw	r6,8(sp)
  d03224:	d8c00415 	stw	r3,16(sp)
  d03228:	d9c00315 	stw	r7,12(sp)
  d0322c:	0d0362c0 	call	d0362c <__pack_d>
  d03230:	dfc00517 	ldw	ra,20(sp)
  d03234:	dec00704 	addi	sp,sp,28
  d03238:	f800283a 	ret

00d0323c <__truncdfsf2>:
  d0323c:	defff804 	addi	sp,sp,-32
  d03240:	2005883a 	mov	r2,r4
  d03244:	2807883a 	mov	r3,r5
  d03248:	d809883a 	mov	r4,sp
  d0324c:	d9400204 	addi	r5,sp,8
  d03250:	d8c00115 	stw	r3,4(sp)
  d03254:	d8800015 	stw	r2,0(sp)
  d03258:	dfc00715 	stw	ra,28(sp)
  d0325c:	0d039400 	call	d03940 <__unpack_d>
  d03260:	d9c00517 	ldw	r7,20(sp)
  d03264:	da000617 	ldw	r8,24(sp)
  d03268:	02d00034 	movhi	r11,16384
  d0326c:	5affffc4 	addi	r11,r11,-1
  d03270:	3812d7ba 	srli	r9,r7,30
  d03274:	401a90ba 	slli	r13,r8,2
  d03278:	3ac4703a 	and	r2,r7,r11
  d0327c:	0007883a 	mov	r3,zero
  d03280:	6a52b03a 	or	r9,r13,r9
  d03284:	10c4b03a 	or	r2,r2,r3
  d03288:	d9000217 	ldw	r4,8(sp)
  d0328c:	d9400317 	ldw	r5,12(sp)
  d03290:	d9800417 	ldw	r6,16(sp)
  d03294:	480f883a 	mov	r7,r9
  d03298:	10000126 	beq	r2,zero,d032a0 <__truncdfsf2+0x64>
  d0329c:	49c00054 	ori	r7,r9,1
  d032a0:	0d036000 	call	d03600 <__make_fp>
  d032a4:	dfc00717 	ldw	ra,28(sp)
  d032a8:	dec00804 	addi	sp,sp,32
  d032ac:	f800283a 	ret

00d032b0 <__clzsi2>:
  d032b0:	00bfffd4 	movui	r2,65535
  d032b4:	11000e36 	bltu	r2,r4,d032f0 <__clzsi2+0x40>
  d032b8:	00803fc4 	movi	r2,255
  d032bc:	01400204 	movi	r5,8
  d032c0:	0007883a 	mov	r3,zero
  d032c4:	11001036 	bltu	r2,r4,d03308 <__clzsi2+0x58>
  d032c8:	000b883a 	mov	r5,zero
  d032cc:	20c6d83a 	srl	r3,r4,r3
  d032d0:	00803474 	movhi	r2,209
  d032d4:	10845804 	addi	r2,r2,4448
  d032d8:	1887883a 	add	r3,r3,r2
  d032dc:	18800003 	ldbu	r2,0(r3)
  d032e0:	00c00804 	movi	r3,32
  d032e4:	2885883a 	add	r2,r5,r2
  d032e8:	1885c83a 	sub	r2,r3,r2
  d032ec:	f800283a 	ret
  d032f0:	01400404 	movi	r5,16
  d032f4:	00804034 	movhi	r2,256
  d032f8:	10bfffc4 	addi	r2,r2,-1
  d032fc:	2807883a 	mov	r3,r5
  d03300:	113ff22e 	bgeu	r2,r4,d032cc <__clzsi2+0x1c>
  d03304:	01400604 	movi	r5,24
  d03308:	2807883a 	mov	r3,r5
  d0330c:	20c6d83a 	srl	r3,r4,r3
  d03310:	00803474 	movhi	r2,209
  d03314:	10845804 	addi	r2,r2,4448
  d03318:	1887883a 	add	r3,r3,r2
  d0331c:	18800003 	ldbu	r2,0(r3)
  d03320:	00c00804 	movi	r3,32
  d03324:	2885883a 	add	r2,r5,r2
  d03328:	1885c83a 	sub	r2,r3,r2
  d0332c:	f800283a 	ret

00d03330 <__pack_f>:
  d03330:	20c00017 	ldw	r3,0(r4)
  d03334:	01c00044 	movi	r7,1
  d03338:	21800317 	ldw	r6,12(r4)
  d0333c:	21400117 	ldw	r5,4(r4)
  d03340:	38c02d2e 	bgeu	r7,r3,d033f8 <__pack_f+0xc8>
  d03344:	00800104 	movi	r2,4
  d03348:	18802826 	beq	r3,r2,d033ec <__pack_f+0xbc>
  d0334c:	00800084 	movi	r2,2
  d03350:	18800126 	beq	r3,r2,d03358 <__pack_f+0x28>
  d03354:	3000101e 	bne	r6,zero,d03398 <__pack_f+0x68>
  d03358:	000d883a 	mov	r6,zero
  d0335c:	0007883a 	mov	r3,zero
  d03360:	19003fcc 	andi	r4,r3,255
  d03364:	200895fa 	slli	r4,r4,23
  d03368:	00c02034 	movhi	r3,128
  d0336c:	18ffffc4 	addi	r3,r3,-1
  d03370:	30c6703a 	and	r3,r6,r3
  d03374:	10a0002c 	andhi	r2,r2,32768
  d03378:	10c4b03a 	or	r2,r2,r3
  d0337c:	280a97fa 	slli	r5,r5,31
  d03380:	1104b03a 	or	r2,r2,r4
  d03384:	00e00034 	movhi	r3,32768
  d03388:	18ffffc4 	addi	r3,r3,-1
  d0338c:	10c4703a 	and	r2,r2,r3
  d03390:	1144b03a 	or	r2,r2,r5
  d03394:	f800283a 	ret
  d03398:	21000217 	ldw	r4,8(r4)
  d0339c:	00bfe084 	movi	r2,-126
  d033a0:	20801b16 	blt	r4,r2,d03410 <__pack_f+0xe0>
  d033a4:	00801fc4 	movi	r2,127
  d033a8:	11001016 	blt	r2,r4,d033ec <__pack_f+0xbc>
  d033ac:	308e703a 	and	r7,r6,r2
  d033b0:	2087883a 	add	r3,r4,r2
  d033b4:	00801004 	movi	r2,64
  d033b8:	38800526 	beq	r7,r2,d033d0 <__pack_f+0xa0>
  d033bc:	31800fc4 	addi	r6,r6,63
  d033c0:	30000716 	blt	r6,zero,d033e0 <__pack_f+0xb0>
  d033c4:	300490ba 	slli	r2,r6,2
  d033c8:	100cd27a 	srli	r6,r2,9
  d033cc:	003fe406 	br	d03360 <__pack_f+0x30>
  d033d0:	3080200c 	andi	r2,r6,128
  d033d4:	103ffa26 	beq	r2,zero,d033c0 <__pack_f+0x90>
  d033d8:	31cd883a 	add	r6,r6,r7
  d033dc:	003ff806 	br	d033c0 <__pack_f+0x90>
  d033e0:	300cd07a 	srli	r6,r6,1
  d033e4:	18c00044 	addi	r3,r3,1
  d033e8:	003ff606 	br	d033c4 <__pack_f+0x94>
  d033ec:	000d883a 	mov	r6,zero
  d033f0:	00ffffc4 	movi	r3,-1
  d033f4:	003fda06 	br	d03360 <__pack_f+0x30>
  d033f8:	31800434 	orhi	r6,r6,16
  d033fc:	00802034 	movhi	r2,128
  d03400:	10bfffc4 	addi	r2,r2,-1
  d03404:	308c703a 	and	r6,r6,r2
  d03408:	00ffffc4 	movi	r3,-1
  d0340c:	003fd406 	br	d03360 <__pack_f+0x30>
  d03410:	1109c83a 	sub	r4,r2,r4
  d03414:	00800644 	movi	r2,25
  d03418:	11001216 	blt	r2,r4,d03464 <__pack_f+0x134>
  d0341c:	3904983a 	sll	r2,r7,r4
  d03420:	3106d83a 	srl	r3,r6,r4
  d03424:	10bfffc4 	addi	r2,r2,-1
  d03428:	3084703a 	and	r2,r6,r2
  d0342c:	1004c03a 	cmpne	r2,r2,zero
  d03430:	1886b03a 	or	r3,r3,r2
  d03434:	19001fcc 	andi	r4,r3,127
  d03438:	00801004 	movi	r2,64
  d0343c:	20800c26 	beq	r4,r2,d03470 <__pack_f+0x140>
  d03440:	18c00fc4 	addi	r3,r3,63
  d03444:	00900034 	movhi	r2,16384
  d03448:	10bfffc4 	addi	r2,r2,-1
  d0344c:	180cd1fa 	srli	r6,r3,7
  d03450:	10c7803a 	cmpltu	r3,r2,r3
  d03454:	00802034 	movhi	r2,128
  d03458:	10bfffc4 	addi	r2,r2,-1
  d0345c:	308c703a 	and	r6,r6,r2
  d03460:	003fbf06 	br	d03360 <__pack_f+0x30>
  d03464:	0007883a 	mov	r3,zero
  d03468:	000d883a 	mov	r6,zero
  d0346c:	003ff906 	br	d03454 <__pack_f+0x124>
  d03470:	1880200c 	andi	r2,r3,128
  d03474:	10000126 	beq	r2,zero,d0347c <__pack_f+0x14c>
  d03478:	1907883a 	add	r3,r3,r4
  d0347c:	180cd1fa 	srli	r6,r3,7
  d03480:	00900034 	movhi	r2,16384
  d03484:	10bfffc4 	addi	r2,r2,-1
  d03488:	10c7803a 	cmpltu	r3,r2,r3
  d0348c:	003ff106 	br	d03454 <__pack_f+0x124>

00d03490 <__unpack_f>:
  d03490:	21800017 	ldw	r6,0(r4)
  d03494:	00c02034 	movhi	r3,128
  d03498:	18ffffc4 	addi	r3,r3,-1
  d0349c:	3004d5fa 	srli	r2,r6,23
  d034a0:	3008d7fa 	srli	r4,r6,31
  d034a4:	30ce703a 	and	r7,r6,r3
  d034a8:	10c03fcc 	andi	r3,r2,255
  d034ac:	29000115 	stw	r4,4(r5)
  d034b0:	1800131e 	bne	r3,zero,d03500 <__unpack_f+0x70>
  d034b4:	38000f26 	beq	r7,zero,d034f4 <__unpack_f+0x64>
  d034b8:	380691fa 	slli	r3,r7,7
  d034bc:	01bfe084 	movi	r6,-126
  d034c0:	008000c4 	movi	r2,3
  d034c4:	01100034 	movhi	r4,16384
  d034c8:	213fffc4 	addi	r4,r4,-1
  d034cc:	28800015 	stw	r2,0(r5)
  d034d0:	29800215 	stw	r6,8(r5)
  d034d4:	20c00536 	bltu	r4,r3,d034ec <__unpack_f+0x5c>
  d034d8:	3005883a 	mov	r2,r6
  d034dc:	18c7883a 	add	r3,r3,r3
  d034e0:	10bfffc4 	addi	r2,r2,-1
  d034e4:	20fffd2e 	bgeu	r4,r3,d034dc <__unpack_f+0x4c>
  d034e8:	28800215 	stw	r2,8(r5)
  d034ec:	28c00315 	stw	r3,12(r5)
  d034f0:	f800283a 	ret
  d034f4:	00800084 	movi	r2,2
  d034f8:	28800015 	stw	r2,0(r5)
  d034fc:	f800283a 	ret
  d03500:	00803fc4 	movi	r2,255
  d03504:	18800826 	beq	r3,r2,d03528 <__unpack_f+0x98>
  d03508:	380491fa 	slli	r2,r7,7
  d0350c:	18ffe044 	addi	r3,r3,-127
  d03510:	28c00215 	stw	r3,8(r5)
  d03514:	10900034 	orhi	r2,r2,16384
  d03518:	28800315 	stw	r2,12(r5)
  d0351c:	008000c4 	movi	r2,3
  d03520:	28800015 	stw	r2,0(r5)
  d03524:	f800283a 	ret
  d03528:	3800031e 	bne	r7,zero,d03538 <__unpack_f+0xa8>
  d0352c:	00800104 	movi	r2,4
  d03530:	28800015 	stw	r2,0(r5)
  d03534:	f800283a 	ret
  d03538:	3080042c 	andhi	r2,r6,16
  d0353c:	10000426 	beq	r2,zero,d03550 <__unpack_f+0xc0>
  d03540:	00800044 	movi	r2,1
  d03544:	28800015 	stw	r2,0(r5)
  d03548:	29c00315 	stw	r7,12(r5)
  d0354c:	f800283a 	ret
  d03550:	28000015 	stw	zero,0(r5)
  d03554:	003ffc06 	br	d03548 <__unpack_f+0xb8>

00d03558 <__fpcmp_parts_f>:
  d03558:	21800017 	ldw	r6,0(r4)
  d0355c:	00c00044 	movi	r3,1
  d03560:	19800a2e 	bgeu	r3,r6,d0358c <__fpcmp_parts_f+0x34>
  d03564:	28800017 	ldw	r2,0(r5)
  d03568:	1880082e 	bgeu	r3,r2,d0358c <__fpcmp_parts_f+0x34>
  d0356c:	00c00104 	movi	r3,4
  d03570:	30c01e26 	beq	r6,r3,d035ec <__fpcmp_parts_f+0x94>
  d03574:	10c01a26 	beq	r2,r3,d035e0 <__fpcmp_parts_f+0x88>
  d03578:	00c00084 	movi	r3,2
  d0357c:	30c00526 	beq	r6,r3,d03594 <__fpcmp_parts_f+0x3c>
  d03580:	10c0071e 	bne	r2,r3,d035a0 <__fpcmp_parts_f+0x48>
  d03584:	20800117 	ldw	r2,4(r4)
  d03588:	1000091e 	bne	r2,zero,d035b0 <__fpcmp_parts_f+0x58>
  d0358c:	00800044 	movi	r2,1
  d03590:	f800283a 	ret
  d03594:	10c0121e 	bne	r2,r3,d035e0 <__fpcmp_parts_f+0x88>
  d03598:	0005883a 	mov	r2,zero
  d0359c:	f800283a 	ret
  d035a0:	20c00117 	ldw	r3,4(r4)
  d035a4:	28800117 	ldw	r2,4(r5)
  d035a8:	18800326 	beq	r3,r2,d035b8 <__fpcmp_parts_f+0x60>
  d035ac:	183ff726 	beq	r3,zero,d0358c <__fpcmp_parts_f+0x34>
  d035b0:	00bfffc4 	movi	r2,-1
  d035b4:	f800283a 	ret
  d035b8:	21800217 	ldw	r6,8(r4)
  d035bc:	28800217 	ldw	r2,8(r5)
  d035c0:	11bffa16 	blt	r2,r6,d035ac <__fpcmp_parts_f+0x54>
  d035c4:	30800416 	blt	r6,r2,d035d8 <__fpcmp_parts_f+0x80>
  d035c8:	21000317 	ldw	r4,12(r4)
  d035cc:	29400317 	ldw	r5,12(r5)
  d035d0:	293ff636 	bltu	r5,r4,d035ac <__fpcmp_parts_f+0x54>
  d035d4:	217ff02e 	bgeu	r4,r5,d03598 <__fpcmp_parts_f+0x40>
  d035d8:	183fec1e 	bne	r3,zero,d0358c <__fpcmp_parts_f+0x34>
  d035dc:	003ff406 	br	d035b0 <__fpcmp_parts_f+0x58>
  d035e0:	28800117 	ldw	r2,4(r5)
  d035e4:	103fe91e 	bne	r2,zero,d0358c <__fpcmp_parts_f+0x34>
  d035e8:	003ff106 	br	d035b0 <__fpcmp_parts_f+0x58>
  d035ec:	11bfe51e 	bne	r2,r6,d03584 <__fpcmp_parts_f+0x2c>
  d035f0:	28c00117 	ldw	r3,4(r5)
  d035f4:	20800117 	ldw	r2,4(r4)
  d035f8:	1885c83a 	sub	r2,r3,r2
  d035fc:	f800283a 	ret

00d03600 <__make_fp>:
  d03600:	defffb04 	addi	sp,sp,-20
  d03604:	d9000015 	stw	r4,0(sp)
  d03608:	d809883a 	mov	r4,sp
  d0360c:	dfc00415 	stw	ra,16(sp)
  d03610:	d9400115 	stw	r5,4(sp)
  d03614:	d9800215 	stw	r6,8(sp)
  d03618:	d9c00315 	stw	r7,12(sp)
  d0361c:	0d033300 	call	d03330 <__pack_f>
  d03620:	dfc00417 	ldw	ra,16(sp)
  d03624:	dec00504 	addi	sp,sp,20
  d03628:	f800283a 	ret

00d0362c <__pack_d>:
  d0362c:	20c00017 	ldw	r3,0(r4)
  d03630:	defffd04 	addi	sp,sp,-12
  d03634:	dc000015 	stw	r16,0(sp)
  d03638:	dc800215 	stw	r18,8(sp)
  d0363c:	dc400115 	stw	r17,4(sp)
  d03640:	00800044 	movi	r2,1
  d03644:	22000317 	ldw	r8,12(r4)
  d03648:	001f883a 	mov	r15,zero
  d0364c:	22400417 	ldw	r9,16(r4)
  d03650:	24000117 	ldw	r16,4(r4)
  d03654:	10c0552e 	bgeu	r2,r3,d037ac <__pack_d+0x180>
  d03658:	00800104 	movi	r2,4
  d0365c:	18804f26 	beq	r3,r2,d0379c <__pack_d+0x170>
  d03660:	00800084 	movi	r2,2
  d03664:	18800226 	beq	r3,r2,d03670 <__pack_d+0x44>
  d03668:	4244b03a 	or	r2,r8,r9
  d0366c:	10001a1e 	bne	r2,zero,d036d8 <__pack_d+0xac>
  d03670:	000d883a 	mov	r6,zero
  d03674:	000f883a 	mov	r7,zero
  d03678:	0011883a 	mov	r8,zero
  d0367c:	00800434 	movhi	r2,16
  d03680:	10bfffc4 	addi	r2,r2,-1
  d03684:	301d883a 	mov	r14,r6
  d03688:	3884703a 	and	r2,r7,r2
  d0368c:	400a953a 	slli	r5,r8,20
  d03690:	79bffc2c 	andhi	r6,r15,65520
  d03694:	308cb03a 	or	r6,r6,r2
  d03698:	00e00434 	movhi	r3,32784
  d0369c:	18ffffc4 	addi	r3,r3,-1
  d036a0:	800497fa 	slli	r2,r16,31
  d036a4:	30c6703a 	and	r3,r6,r3
  d036a8:	1946b03a 	or	r3,r3,r5
  d036ac:	01600034 	movhi	r5,32768
  d036b0:	297fffc4 	addi	r5,r5,-1
  d036b4:	194a703a 	and	r5,r3,r5
  d036b8:	288ab03a 	or	r5,r5,r2
  d036bc:	2807883a 	mov	r3,r5
  d036c0:	7005883a 	mov	r2,r14
  d036c4:	dc800217 	ldw	r18,8(sp)
  d036c8:	dc400117 	ldw	r17,4(sp)
  d036cc:	dc000017 	ldw	r16,0(sp)
  d036d0:	dec00304 	addi	sp,sp,12
  d036d4:	f800283a 	ret
  d036d8:	21000217 	ldw	r4,8(r4)
  d036dc:	00bf0084 	movi	r2,-1022
  d036e0:	20803f16 	blt	r4,r2,d037e0 <__pack_d+0x1b4>
  d036e4:	0080ffc4 	movi	r2,1023
  d036e8:	11002c16 	blt	r2,r4,d0379c <__pack_d+0x170>
  d036ec:	00803fc4 	movi	r2,255
  d036f0:	408c703a 	and	r6,r8,r2
  d036f4:	00802004 	movi	r2,128
  d036f8:	0007883a 	mov	r3,zero
  d036fc:	000f883a 	mov	r7,zero
  d03700:	2280ffc4 	addi	r10,r4,1023
  d03704:	30801e26 	beq	r6,r2,d03780 <__pack_d+0x154>
  d03708:	00801fc4 	movi	r2,127
  d0370c:	4089883a 	add	r4,r8,r2
  d03710:	220d803a 	cmpltu	r6,r4,r8
  d03714:	324d883a 	add	r6,r6,r9
  d03718:	2011883a 	mov	r8,r4
  d0371c:	3013883a 	mov	r9,r6
  d03720:	00880034 	movhi	r2,8192
  d03724:	10bfffc4 	addi	r2,r2,-1
  d03728:	12400d36 	bltu	r2,r9,d03760 <__pack_d+0x134>
  d0372c:	4804963a 	slli	r2,r9,24
  d03730:	400cd23a 	srli	r6,r8,8
  d03734:	480ed23a 	srli	r7,r9,8
  d03738:	013fffc4 	movi	r4,-1
  d0373c:	118cb03a 	or	r6,r2,r6
  d03740:	01400434 	movhi	r5,16
  d03744:	297fffc4 	addi	r5,r5,-1
  d03748:	3104703a 	and	r2,r6,r4
  d0374c:	3946703a 	and	r3,r7,r5
  d03750:	5201ffcc 	andi	r8,r10,2047
  d03754:	100d883a 	mov	r6,r2
  d03758:	180f883a 	mov	r7,r3
  d0375c:	003fc706 	br	d0367c <__pack_d+0x50>
  d03760:	480897fa 	slli	r4,r9,31
  d03764:	4004d07a 	srli	r2,r8,1
  d03768:	4806d07a 	srli	r3,r9,1
  d0376c:	52800044 	addi	r10,r10,1
  d03770:	2084b03a 	or	r2,r4,r2
  d03774:	1011883a 	mov	r8,r2
  d03778:	1813883a 	mov	r9,r3
  d0377c:	003feb06 	br	d0372c <__pack_d+0x100>
  d03780:	383fe11e 	bne	r7,zero,d03708 <__pack_d+0xdc>
  d03784:	01004004 	movi	r4,256
  d03788:	4104703a 	and	r2,r8,r4
  d0378c:	10c4b03a 	or	r2,r2,r3
  d03790:	103fe326 	beq	r2,zero,d03720 <__pack_d+0xf4>
  d03794:	3005883a 	mov	r2,r6
  d03798:	003fdc06 	br	d0370c <__pack_d+0xe0>
  d0379c:	000d883a 	mov	r6,zero
  d037a0:	000f883a 	mov	r7,zero
  d037a4:	0201ffc4 	movi	r8,2047
  d037a8:	003fb406 	br	d0367c <__pack_d+0x50>
  d037ac:	0005883a 	mov	r2,zero
  d037b0:	00c00234 	movhi	r3,8
  d037b4:	408cb03a 	or	r6,r8,r2
  d037b8:	48ceb03a 	or	r7,r9,r3
  d037bc:	013fffc4 	movi	r4,-1
  d037c0:	01400434 	movhi	r5,16
  d037c4:	297fffc4 	addi	r5,r5,-1
  d037c8:	3104703a 	and	r2,r6,r4
  d037cc:	3946703a 	and	r3,r7,r5
  d037d0:	100d883a 	mov	r6,r2
  d037d4:	180f883a 	mov	r7,r3
  d037d8:	0201ffc4 	movi	r8,2047
  d037dc:	003fa706 	br	d0367c <__pack_d+0x50>
  d037e0:	1109c83a 	sub	r4,r2,r4
  d037e4:	00800e04 	movi	r2,56
  d037e8:	11004316 	blt	r2,r4,d038f8 <__pack_d+0x2cc>
  d037ec:	21fff804 	addi	r7,r4,-32
  d037f0:	38004516 	blt	r7,zero,d03908 <__pack_d+0x2dc>
  d037f4:	49d8d83a 	srl	r12,r9,r7
  d037f8:	001b883a 	mov	r13,zero
  d037fc:	0023883a 	mov	r17,zero
  d03800:	01400044 	movi	r5,1
  d03804:	0025883a 	mov	r18,zero
  d03808:	38004716 	blt	r7,zero,d03928 <__pack_d+0x2fc>
  d0380c:	29d6983a 	sll	r11,r5,r7
  d03810:	0015883a 	mov	r10,zero
  d03814:	00bfffc4 	movi	r2,-1
  d03818:	5089883a 	add	r4,r10,r2
  d0381c:	588b883a 	add	r5,r11,r2
  d03820:	228d803a 	cmpltu	r6,r4,r10
  d03824:	314b883a 	add	r5,r6,r5
  d03828:	4104703a 	and	r2,r8,r4
  d0382c:	4946703a 	and	r3,r9,r5
  d03830:	10c4b03a 	or	r2,r2,r3
  d03834:	10000226 	beq	r2,zero,d03840 <__pack_d+0x214>
  d03838:	04400044 	movi	r17,1
  d0383c:	0025883a 	mov	r18,zero
  d03840:	00803fc4 	movi	r2,255
  d03844:	644eb03a 	or	r7,r12,r17
  d03848:	3892703a 	and	r9,r7,r2
  d0384c:	00802004 	movi	r2,128
  d03850:	6c90b03a 	or	r8,r13,r18
  d03854:	0015883a 	mov	r10,zero
  d03858:	48801626 	beq	r9,r2,d038b4 <__pack_d+0x288>
  d0385c:	01001fc4 	movi	r4,127
  d03860:	3905883a 	add	r2,r7,r4
  d03864:	11cd803a 	cmpltu	r6,r2,r7
  d03868:	320d883a 	add	r6,r6,r8
  d0386c:	100f883a 	mov	r7,r2
  d03870:	00840034 	movhi	r2,4096
  d03874:	10bfffc4 	addi	r2,r2,-1
  d03878:	3011883a 	mov	r8,r6
  d0387c:	0007883a 	mov	r3,zero
  d03880:	11801b36 	bltu	r2,r6,d038f0 <__pack_d+0x2c4>
  d03884:	4004963a 	slli	r2,r8,24
  d03888:	3808d23a 	srli	r4,r7,8
  d0388c:	400ad23a 	srli	r5,r8,8
  d03890:	1813883a 	mov	r9,r3
  d03894:	1108b03a 	or	r4,r2,r4
  d03898:	00bfffc4 	movi	r2,-1
  d0389c:	00c00434 	movhi	r3,16
  d038a0:	18ffffc4 	addi	r3,r3,-1
  d038a4:	208c703a 	and	r6,r4,r2
  d038a8:	28ce703a 	and	r7,r5,r3
  d038ac:	4a01ffcc 	andi	r8,r9,2047
  d038b0:	003f7206 	br	d0367c <__pack_d+0x50>
  d038b4:	503fe91e 	bne	r10,zero,d0385c <__pack_d+0x230>
  d038b8:	01004004 	movi	r4,256
  d038bc:	3904703a 	and	r2,r7,r4
  d038c0:	0007883a 	mov	r3,zero
  d038c4:	10c4b03a 	or	r2,r2,r3
  d038c8:	10000626 	beq	r2,zero,d038e4 <__pack_d+0x2b8>
  d038cc:	3a45883a 	add	r2,r7,r9
  d038d0:	11cd803a 	cmpltu	r6,r2,r7
  d038d4:	320d883a 	add	r6,r6,r8
  d038d8:	100f883a 	mov	r7,r2
  d038dc:	3011883a 	mov	r8,r6
  d038e0:	0007883a 	mov	r3,zero
  d038e4:	00840034 	movhi	r2,4096
  d038e8:	10bfffc4 	addi	r2,r2,-1
  d038ec:	123fe52e 	bgeu	r2,r8,d03884 <__pack_d+0x258>
  d038f0:	00c00044 	movi	r3,1
  d038f4:	003fe306 	br	d03884 <__pack_d+0x258>
  d038f8:	0009883a 	mov	r4,zero
  d038fc:	0013883a 	mov	r9,zero
  d03900:	000b883a 	mov	r5,zero
  d03904:	003fe406 	br	d03898 <__pack_d+0x26c>
  d03908:	4a47883a 	add	r3,r9,r9
  d0390c:	008007c4 	movi	r2,31
  d03910:	1105c83a 	sub	r2,r2,r4
  d03914:	1886983a 	sll	r3,r3,r2
  d03918:	4118d83a 	srl	r12,r8,r4
  d0391c:	491ad83a 	srl	r13,r9,r4
  d03920:	1b18b03a 	or	r12,r3,r12
  d03924:	003fb506 	br	d037fc <__pack_d+0x1d0>
  d03928:	2806d07a 	srli	r3,r5,1
  d0392c:	008007c4 	movi	r2,31
  d03930:	1105c83a 	sub	r2,r2,r4
  d03934:	1896d83a 	srl	r11,r3,r2
  d03938:	2914983a 	sll	r10,r5,r4
  d0393c:	003fb506 	br	d03814 <__pack_d+0x1e8>

00d03940 <__unpack_d>:
  d03940:	20c00117 	ldw	r3,4(r4)
  d03944:	22400017 	ldw	r9,0(r4)
  d03948:	00800434 	movhi	r2,16
  d0394c:	10bfffc4 	addi	r2,r2,-1
  d03950:	1808d53a 	srli	r4,r3,20
  d03954:	180cd7fa 	srli	r6,r3,31
  d03958:	1894703a 	and	r10,r3,r2
  d0395c:	2201ffcc 	andi	r8,r4,2047
  d03960:	281b883a 	mov	r13,r5
  d03964:	4817883a 	mov	r11,r9
  d03968:	29800115 	stw	r6,4(r5)
  d0396c:	5019883a 	mov	r12,r10
  d03970:	40001e1e 	bne	r8,zero,d039ec <__unpack_d+0xac>
  d03974:	4a84b03a 	or	r2,r9,r10
  d03978:	10001926 	beq	r2,zero,d039e0 <__unpack_d+0xa0>
  d0397c:	4804d63a 	srli	r2,r9,24
  d03980:	500c923a 	slli	r6,r10,8
  d03984:	013f0084 	movi	r4,-1022
  d03988:	00c40034 	movhi	r3,4096
  d0398c:	18ffffc4 	addi	r3,r3,-1
  d03990:	118cb03a 	or	r6,r2,r6
  d03994:	008000c4 	movi	r2,3
  d03998:	480a923a 	slli	r5,r9,8
  d0399c:	68800015 	stw	r2,0(r13)
  d039a0:	69000215 	stw	r4,8(r13)
  d039a4:	19800b36 	bltu	r3,r6,d039d4 <__unpack_d+0x94>
  d039a8:	200f883a 	mov	r7,r4
  d039ac:	1811883a 	mov	r8,r3
  d039b0:	2945883a 	add	r2,r5,r5
  d039b4:	1149803a 	cmpltu	r4,r2,r5
  d039b8:	3187883a 	add	r3,r6,r6
  d039bc:	20c9883a 	add	r4,r4,r3
  d039c0:	100b883a 	mov	r5,r2
  d039c4:	200d883a 	mov	r6,r4
  d039c8:	39ffffc4 	addi	r7,r7,-1
  d039cc:	413ff82e 	bgeu	r8,r4,d039b0 <__unpack_d+0x70>
  d039d0:	69c00215 	stw	r7,8(r13)
  d039d4:	69800415 	stw	r6,16(r13)
  d039d8:	69400315 	stw	r5,12(r13)
  d039dc:	f800283a 	ret
  d039e0:	00800084 	movi	r2,2
  d039e4:	28800015 	stw	r2,0(r5)
  d039e8:	f800283a 	ret
  d039ec:	0081ffc4 	movi	r2,2047
  d039f0:	40800f26 	beq	r8,r2,d03a30 <__unpack_d+0xf0>
  d039f4:	480cd63a 	srli	r6,r9,24
  d039f8:	5006923a 	slli	r3,r10,8
  d039fc:	4804923a 	slli	r2,r9,8
  d03a00:	0009883a 	mov	r4,zero
  d03a04:	30c6b03a 	or	r3,r6,r3
  d03a08:	01440034 	movhi	r5,4096
  d03a0c:	110cb03a 	or	r6,r2,r4
  d03a10:	423f0044 	addi	r8,r8,-1023
  d03a14:	194eb03a 	or	r7,r3,r5
  d03a18:	008000c4 	movi	r2,3
  d03a1c:	69c00415 	stw	r7,16(r13)
  d03a20:	6a000215 	stw	r8,8(r13)
  d03a24:	68800015 	stw	r2,0(r13)
  d03a28:	69800315 	stw	r6,12(r13)
  d03a2c:	f800283a 	ret
  d03a30:	4a84b03a 	or	r2,r9,r10
  d03a34:	1000031e 	bne	r2,zero,d03a44 <__unpack_d+0x104>
  d03a38:	00800104 	movi	r2,4
  d03a3c:	28800015 	stw	r2,0(r5)
  d03a40:	f800283a 	ret
  d03a44:	0009883a 	mov	r4,zero
  d03a48:	01400234 	movhi	r5,8
  d03a4c:	4904703a 	and	r2,r9,r4
  d03a50:	5146703a 	and	r3,r10,r5
  d03a54:	10c4b03a 	or	r2,r2,r3
  d03a58:	10000526 	beq	r2,zero,d03a70 <__unpack_d+0x130>
  d03a5c:	00800044 	movi	r2,1
  d03a60:	68800015 	stw	r2,0(r13)
  d03a64:	6b000415 	stw	r12,16(r13)
  d03a68:	6ac00315 	stw	r11,12(r13)
  d03a6c:	f800283a 	ret
  d03a70:	68000015 	stw	zero,0(r13)
  d03a74:	003ffb06 	br	d03a64 <__unpack_d+0x124>

00d03a78 <__fpcmp_parts_d>:
  d03a78:	21800017 	ldw	r6,0(r4)
  d03a7c:	00c00044 	movi	r3,1
  d03a80:	19800a2e 	bgeu	r3,r6,d03aac <__fpcmp_parts_d+0x34>
  d03a84:	28800017 	ldw	r2,0(r5)
  d03a88:	1880082e 	bgeu	r3,r2,d03aac <__fpcmp_parts_d+0x34>
  d03a8c:	00c00104 	movi	r3,4
  d03a90:	30c02626 	beq	r6,r3,d03b2c <__fpcmp_parts_d+0xb4>
  d03a94:	10c02226 	beq	r2,r3,d03b20 <__fpcmp_parts_d+0xa8>
  d03a98:	00c00084 	movi	r3,2
  d03a9c:	30c00526 	beq	r6,r3,d03ab4 <__fpcmp_parts_d+0x3c>
  d03aa0:	10c0071e 	bne	r2,r3,d03ac0 <__fpcmp_parts_d+0x48>
  d03aa4:	20800117 	ldw	r2,4(r4)
  d03aa8:	1000091e 	bne	r2,zero,d03ad0 <__fpcmp_parts_d+0x58>
  d03aac:	00800044 	movi	r2,1
  d03ab0:	f800283a 	ret
  d03ab4:	10c01a1e 	bne	r2,r3,d03b20 <__fpcmp_parts_d+0xa8>
  d03ab8:	0005883a 	mov	r2,zero
  d03abc:	f800283a 	ret
  d03ac0:	22000117 	ldw	r8,4(r4)
  d03ac4:	28800117 	ldw	r2,4(r5)
  d03ac8:	40800326 	beq	r8,r2,d03ad8 <__fpcmp_parts_d+0x60>
  d03acc:	403ff726 	beq	r8,zero,d03aac <__fpcmp_parts_d+0x34>
  d03ad0:	00bfffc4 	movi	r2,-1
  d03ad4:	f800283a 	ret
  d03ad8:	20c00217 	ldw	r3,8(r4)
  d03adc:	28800217 	ldw	r2,8(r5)
  d03ae0:	10fffa16 	blt	r2,r3,d03acc <__fpcmp_parts_d+0x54>
  d03ae4:	18800916 	blt	r3,r2,d03b0c <__fpcmp_parts_d+0x94>
  d03ae8:	21c00417 	ldw	r7,16(r4)
  d03aec:	28c00417 	ldw	r3,16(r5)
  d03af0:	21800317 	ldw	r6,12(r4)
  d03af4:	28800317 	ldw	r2,12(r5)
  d03af8:	19fff436 	bltu	r3,r7,d03acc <__fpcmp_parts_d+0x54>
  d03afc:	38c00526 	beq	r7,r3,d03b14 <__fpcmp_parts_d+0x9c>
  d03b00:	38c00236 	bltu	r7,r3,d03b0c <__fpcmp_parts_d+0x94>
  d03b04:	19ffec1e 	bne	r3,r7,d03ab8 <__fpcmp_parts_d+0x40>
  d03b08:	30bfeb2e 	bgeu	r6,r2,d03ab8 <__fpcmp_parts_d+0x40>
  d03b0c:	403fe71e 	bne	r8,zero,d03aac <__fpcmp_parts_d+0x34>
  d03b10:	003fef06 	br	d03ad0 <__fpcmp_parts_d+0x58>
  d03b14:	11bffa2e 	bgeu	r2,r6,d03b00 <__fpcmp_parts_d+0x88>
  d03b18:	403fe426 	beq	r8,zero,d03aac <__fpcmp_parts_d+0x34>
  d03b1c:	003fec06 	br	d03ad0 <__fpcmp_parts_d+0x58>
  d03b20:	28800117 	ldw	r2,4(r5)
  d03b24:	103fe11e 	bne	r2,zero,d03aac <__fpcmp_parts_d+0x34>
  d03b28:	003fe906 	br	d03ad0 <__fpcmp_parts_d+0x58>
  d03b2c:	11bfdd1e 	bne	r2,r6,d03aa4 <__fpcmp_parts_d+0x2c>
  d03b30:	28c00117 	ldw	r3,4(r5)
  d03b34:	20800117 	ldw	r2,4(r4)
  d03b38:	1885c83a 	sub	r2,r3,r2
  d03b3c:	f800283a 	ret

00d03b40 <__errno>:
  d03b40:	00c03474 	movhi	r3,209
  d03b44:	18cc4a04 	addi	r3,r3,12584
  d03b48:	18800017 	ldw	r2,0(r3)
  d03b4c:	f800283a 	ret

00d03b50 <printf>:
  d03b50:	defffb04 	addi	sp,sp,-20
  d03b54:	dfc00115 	stw	ra,4(sp)
  d03b58:	d9400215 	stw	r5,8(sp)
  d03b5c:	d9800315 	stw	r6,12(sp)
  d03b60:	d9c00415 	stw	r7,16(sp)
  d03b64:	00803474 	movhi	r2,209
  d03b68:	108c4a04 	addi	r2,r2,12584
  d03b6c:	10c00017 	ldw	r3,0(r2)
  d03b70:	200b883a 	mov	r5,r4
  d03b74:	d8800204 	addi	r2,sp,8
  d03b78:	19000217 	ldw	r4,8(r3)
  d03b7c:	100d883a 	mov	r6,r2
  d03b80:	d8800015 	stw	r2,0(sp)
  d03b84:	0d05cc80 	call	d05cc8 <__vfprintf_internal>
  d03b88:	dfc00117 	ldw	ra,4(sp)
  d03b8c:	dec00504 	addi	sp,sp,20
  d03b90:	f800283a 	ret

00d03b94 <_printf_r>:
  d03b94:	defffc04 	addi	sp,sp,-16
  d03b98:	dfc00115 	stw	ra,4(sp)
  d03b9c:	d9800215 	stw	r6,8(sp)
  d03ba0:	d9c00315 	stw	r7,12(sp)
  d03ba4:	280d883a 	mov	r6,r5
  d03ba8:	21400217 	ldw	r5,8(r4)
  d03bac:	d8c00204 	addi	r3,sp,8
  d03bb0:	180f883a 	mov	r7,r3
  d03bb4:	d8c00015 	stw	r3,0(sp)
  d03bb8:	0d03e1c0 	call	d03e1c <___vfprintf_internal_r>
  d03bbc:	dfc00117 	ldw	ra,4(sp)
  d03bc0:	dec00404 	addi	sp,sp,16
  d03bc4:	f800283a 	ret

00d03bc8 <_puts_r>:
  d03bc8:	defff604 	addi	sp,sp,-40
  d03bcc:	dc400715 	stw	r17,28(sp)
  d03bd0:	2023883a 	mov	r17,r4
  d03bd4:	2809883a 	mov	r4,r5
  d03bd8:	dfc00915 	stw	ra,36(sp)
  d03bdc:	dcc00815 	stw	r19,32(sp)
  d03be0:	2827883a 	mov	r19,r5
  d03be4:	0d03d500 	call	d03d50 <strlen>
  d03be8:	89400217 	ldw	r5,8(r17)
  d03bec:	00c03474 	movhi	r3,209
  d03bf0:	18c49904 	addi	r3,r3,4708
  d03bf4:	01c00044 	movi	r7,1
  d03bf8:	12000044 	addi	r8,r2,1
  d03bfc:	d8c00515 	stw	r3,20(sp)
  d03c00:	d9c00615 	stw	r7,24(sp)
  d03c04:	d8c00304 	addi	r3,sp,12
  d03c08:	01c00084 	movi	r7,2
  d03c0c:	8809883a 	mov	r4,r17
  d03c10:	d80d883a 	mov	r6,sp
  d03c14:	d8c00015 	stw	r3,0(sp)
  d03c18:	dcc00315 	stw	r19,12(sp)
  d03c1c:	da000215 	stw	r8,8(sp)
  d03c20:	d9c00115 	stw	r7,4(sp)
  d03c24:	d8800415 	stw	r2,16(sp)
  d03c28:	0d07f240 	call	d07f24 <__sfvwrite_r>
  d03c2c:	00ffffc4 	movi	r3,-1
  d03c30:	10000626 	beq	r2,zero,d03c4c <_puts_r+0x84>
  d03c34:	1805883a 	mov	r2,r3
  d03c38:	dfc00917 	ldw	ra,36(sp)
  d03c3c:	dcc00817 	ldw	r19,32(sp)
  d03c40:	dc400717 	ldw	r17,28(sp)
  d03c44:	dec00a04 	addi	sp,sp,40
  d03c48:	f800283a 	ret
  d03c4c:	00c00284 	movi	r3,10
  d03c50:	1805883a 	mov	r2,r3
  d03c54:	dfc00917 	ldw	ra,36(sp)
  d03c58:	dcc00817 	ldw	r19,32(sp)
  d03c5c:	dc400717 	ldw	r17,28(sp)
  d03c60:	dec00a04 	addi	sp,sp,40
  d03c64:	f800283a 	ret

00d03c68 <puts>:
  d03c68:	00803474 	movhi	r2,209
  d03c6c:	108c4a04 	addi	r2,r2,12584
  d03c70:	200b883a 	mov	r5,r4
  d03c74:	11000017 	ldw	r4,0(r2)
  d03c78:	0d03bc81 	jmpi	d03bc8 <_puts_r>

00d03c7c <sprintf>:
  d03c7c:	deffe504 	addi	sp,sp,-108
  d03c80:	2013883a 	mov	r9,r4
  d03c84:	dfc01815 	stw	ra,96(sp)
  d03c88:	d9801915 	stw	r6,100(sp)
  d03c8c:	d9c01a15 	stw	r7,104(sp)
  d03c90:	d8801904 	addi	r2,sp,100
  d03c94:	d8800015 	stw	r2,0(sp)
  d03c98:	00803474 	movhi	r2,209
  d03c9c:	108c4a04 	addi	r2,r2,12584
  d03ca0:	11000017 	ldw	r4,0(r2)
  d03ca4:	d9c00017 	ldw	r7,0(sp)
  d03ca8:	00808204 	movi	r2,520
  d03cac:	00e00034 	movhi	r3,32768
  d03cb0:	18ffffc4 	addi	r3,r3,-1
  d03cb4:	280d883a 	mov	r6,r5
  d03cb8:	d880040d 	sth	r2,16(sp)
  d03cbc:	d9400104 	addi	r5,sp,4
  d03cc0:	00bfffc4 	movi	r2,-1
  d03cc4:	d8c00615 	stw	r3,24(sp)
  d03cc8:	d8c00315 	stw	r3,12(sp)
  d03ccc:	da400515 	stw	r9,20(sp)
  d03cd0:	d880048d 	sth	r2,18(sp)
  d03cd4:	da400115 	stw	r9,4(sp)
  d03cd8:	0d03e1c0 	call	d03e1c <___vfprintf_internal_r>
  d03cdc:	d8c00117 	ldw	r3,4(sp)
  d03ce0:	18000005 	stb	zero,0(r3)
  d03ce4:	dfc01817 	ldw	ra,96(sp)
  d03ce8:	dec01b04 	addi	sp,sp,108
  d03cec:	f800283a 	ret

00d03cf0 <_sprintf_r>:
  d03cf0:	deffe604 	addi	sp,sp,-104
  d03cf4:	2813883a 	mov	r9,r5
  d03cf8:	dfc01815 	stw	ra,96(sp)
  d03cfc:	d9c01915 	stw	r7,100(sp)
  d03d00:	d8801904 	addi	r2,sp,100
  d03d04:	d8800015 	stw	r2,0(sp)
  d03d08:	100f883a 	mov	r7,r2
  d03d0c:	00808204 	movi	r2,520
  d03d10:	00e00034 	movhi	r3,32768
  d03d14:	18ffffc4 	addi	r3,r3,-1
  d03d18:	d880040d 	sth	r2,16(sp)
  d03d1c:	d9400104 	addi	r5,sp,4
  d03d20:	00bfffc4 	movi	r2,-1
  d03d24:	d8c00615 	stw	r3,24(sp)
  d03d28:	d8c00315 	stw	r3,12(sp)
  d03d2c:	da400515 	stw	r9,20(sp)
  d03d30:	d880048d 	sth	r2,18(sp)
  d03d34:	da400115 	stw	r9,4(sp)
  d03d38:	0d03e1c0 	call	d03e1c <___vfprintf_internal_r>
  d03d3c:	d8c00117 	ldw	r3,4(sp)
  d03d40:	18000005 	stb	zero,0(r3)
  d03d44:	dfc01817 	ldw	ra,96(sp)
  d03d48:	dec01a04 	addi	sp,sp,104
  d03d4c:	f800283a 	ret

00d03d50 <strlen>:
  d03d50:	208000cc 	andi	r2,r4,3
  d03d54:	2011883a 	mov	r8,r4
  d03d58:	1000161e 	bne	r2,zero,d03db4 <strlen+0x64>
  d03d5c:	20c00017 	ldw	r3,0(r4)
  d03d60:	017fbff4 	movhi	r5,65279
  d03d64:	297fbfc4 	addi	r5,r5,-257
  d03d68:	01e02074 	movhi	r7,32897
  d03d6c:	39e02004 	addi	r7,r7,-32640
  d03d70:	1945883a 	add	r2,r3,r5
  d03d74:	11c4703a 	and	r2,r2,r7
  d03d78:	00c6303a 	nor	r3,zero,r3
  d03d7c:	1886703a 	and	r3,r3,r2
  d03d80:	18000c1e 	bne	r3,zero,d03db4 <strlen+0x64>
  d03d84:	280d883a 	mov	r6,r5
  d03d88:	380b883a 	mov	r5,r7
  d03d8c:	21000104 	addi	r4,r4,4
  d03d90:	20800017 	ldw	r2,0(r4)
  d03d94:	1187883a 	add	r3,r2,r6
  d03d98:	1946703a 	and	r3,r3,r5
  d03d9c:	0084303a 	nor	r2,zero,r2
  d03da0:	10c4703a 	and	r2,r2,r3
  d03da4:	103ff926 	beq	r2,zero,d03d8c <strlen+0x3c>
  d03da8:	20800007 	ldb	r2,0(r4)
  d03dac:	10000326 	beq	r2,zero,d03dbc <strlen+0x6c>
  d03db0:	21000044 	addi	r4,r4,1
  d03db4:	20800007 	ldb	r2,0(r4)
  d03db8:	103ffd1e 	bne	r2,zero,d03db0 <strlen+0x60>
  d03dbc:	2205c83a 	sub	r2,r4,r8
  d03dc0:	f800283a 	ret

00d03dc4 <__sprint_r>:
  d03dc4:	30800217 	ldw	r2,8(r6)
  d03dc8:	defffe04 	addi	sp,sp,-8
  d03dcc:	dc000015 	stw	r16,0(sp)
  d03dd0:	dfc00115 	stw	ra,4(sp)
  d03dd4:	3021883a 	mov	r16,r6
  d03dd8:	0007883a 	mov	r3,zero
  d03ddc:	1000061e 	bne	r2,zero,d03df8 <__sprint_r+0x34>
  d03de0:	1805883a 	mov	r2,r3
  d03de4:	30000115 	stw	zero,4(r6)
  d03de8:	dfc00117 	ldw	ra,4(sp)
  d03dec:	dc000017 	ldw	r16,0(sp)
  d03df0:	dec00204 	addi	sp,sp,8
  d03df4:	f800283a 	ret
  d03df8:	0d07f240 	call	d07f24 <__sfvwrite_r>
  d03dfc:	1007883a 	mov	r3,r2
  d03e00:	1805883a 	mov	r2,r3
  d03e04:	80000115 	stw	zero,4(r16)
  d03e08:	80000215 	stw	zero,8(r16)
  d03e0c:	dfc00117 	ldw	ra,4(sp)
  d03e10:	dc000017 	ldw	r16,0(sp)
  d03e14:	dec00204 	addi	sp,sp,8
  d03e18:	f800283a 	ret

00d03e1c <___vfprintf_internal_r>:
  d03e1c:	defea404 	addi	sp,sp,-1392
  d03e20:	dd815815 	stw	r22,1376(sp)
  d03e24:	dc015215 	stw	r16,1352(sp)
  d03e28:	d9c15115 	stw	r7,1348(sp)
  d03e2c:	dfc15b15 	stw	ra,1388(sp)
  d03e30:	df015a15 	stw	fp,1384(sp)
  d03e34:	ddc15915 	stw	r23,1380(sp)
  d03e38:	dd415715 	stw	r21,1372(sp)
  d03e3c:	dd015615 	stw	r20,1368(sp)
  d03e40:	dcc15515 	stw	r19,1364(sp)
  d03e44:	dc815415 	stw	r18,1360(sp)
  d03e48:	dc415315 	stw	r17,1356(sp)
  d03e4c:	282d883a 	mov	r22,r5
  d03e50:	3021883a 	mov	r16,r6
  d03e54:	d9014f15 	stw	r4,1340(sp)
  d03e58:	0d085480 	call	d08548 <_localeconv_r>
  d03e5c:	10800017 	ldw	r2,0(r2)
  d03e60:	d9c15117 	ldw	r7,1348(sp)
  d03e64:	d8814915 	stw	r2,1316(sp)
  d03e68:	d8814f17 	ldw	r2,1340(sp)
  d03e6c:	10000226 	beq	r2,zero,d03e78 <___vfprintf_internal_r+0x5c>
  d03e70:	10800e17 	ldw	r2,56(r2)
  d03e74:	10020d26 	beq	r2,zero,d046ac <___vfprintf_internal_r+0x890>
  d03e78:	b080030b 	ldhu	r2,12(r22)
  d03e7c:	1080020c 	andi	r2,r2,8
  d03e80:	10020e26 	beq	r2,zero,d046bc <___vfprintf_internal_r+0x8a0>
  d03e84:	b0800417 	ldw	r2,16(r22)
  d03e88:	10020c26 	beq	r2,zero,d046bc <___vfprintf_internal_r+0x8a0>
  d03e8c:	b200030b 	ldhu	r8,12(r22)
  d03e90:	00800284 	movi	r2,10
  d03e94:	40c0068c 	andi	r3,r8,26
  d03e98:	18802f1e 	bne	r3,r2,d03f58 <___vfprintf_internal_r+0x13c>
  d03e9c:	b080038f 	ldh	r2,14(r22)
  d03ea0:	10002d16 	blt	r2,zero,d03f58 <___vfprintf_internal_r+0x13c>
  d03ea4:	b240038b 	ldhu	r9,14(r22)
  d03ea8:	b2800717 	ldw	r10,28(r22)
  d03eac:	b2c00917 	ldw	r11,36(r22)
  d03eb0:	d9014f17 	ldw	r4,1340(sp)
  d03eb4:	dc402904 	addi	r17,sp,164
  d03eb8:	d8804004 	addi	r2,sp,256
  d03ebc:	00c10004 	movi	r3,1024
  d03ec0:	423fff4c 	andi	r8,r8,65533
  d03ec4:	800d883a 	mov	r6,r16
  d03ec8:	880b883a 	mov	r5,r17
  d03ecc:	da002c0d 	sth	r8,176(sp)
  d03ed0:	da402c8d 	sth	r9,178(sp)
  d03ed4:	da803015 	stw	r10,192(sp)
  d03ed8:	dac03215 	stw	r11,200(sp)
  d03edc:	d8802d15 	stw	r2,180(sp)
  d03ee0:	d8c02e15 	stw	r3,184(sp)
  d03ee4:	d8802915 	stw	r2,164(sp)
  d03ee8:	d8c02b15 	stw	r3,172(sp)
  d03eec:	d8002f15 	stw	zero,188(sp)
  d03ef0:	0d03e1c0 	call	d03e1c <___vfprintf_internal_r>
  d03ef4:	d8814b15 	stw	r2,1324(sp)
  d03ef8:	10000416 	blt	r2,zero,d03f0c <___vfprintf_internal_r+0xf0>
  d03efc:	d9014f17 	ldw	r4,1340(sp)
  d03f00:	880b883a 	mov	r5,r17
  d03f04:	0d075f40 	call	d075f4 <_fflush_r>
  d03f08:	1002321e 	bne	r2,zero,d047d4 <___vfprintf_internal_r+0x9b8>
  d03f0c:	d8802c0b 	ldhu	r2,176(sp)
  d03f10:	1080100c 	andi	r2,r2,64
  d03f14:	10000326 	beq	r2,zero,d03f24 <___vfprintf_internal_r+0x108>
  d03f18:	b080030b 	ldhu	r2,12(r22)
  d03f1c:	10801014 	ori	r2,r2,64
  d03f20:	b080030d 	sth	r2,12(r22)
  d03f24:	d8814b17 	ldw	r2,1324(sp)
  d03f28:	dfc15b17 	ldw	ra,1388(sp)
  d03f2c:	df015a17 	ldw	fp,1384(sp)
  d03f30:	ddc15917 	ldw	r23,1380(sp)
  d03f34:	dd815817 	ldw	r22,1376(sp)
  d03f38:	dd415717 	ldw	r21,1372(sp)
  d03f3c:	dd015617 	ldw	r20,1368(sp)
  d03f40:	dcc15517 	ldw	r19,1364(sp)
  d03f44:	dc815417 	ldw	r18,1360(sp)
  d03f48:	dc415317 	ldw	r17,1356(sp)
  d03f4c:	dc015217 	ldw	r16,1352(sp)
  d03f50:	dec15c04 	addi	sp,sp,1392
  d03f54:	f800283a 	ret
  d03f58:	0005883a 	mov	r2,zero
  d03f5c:	0007883a 	mov	r3,zero
  d03f60:	dd401904 	addi	r21,sp,100
  d03f64:	d8814215 	stw	r2,1288(sp)
  d03f68:	802f883a 	mov	r23,r16
  d03f6c:	d8c14315 	stw	r3,1292(sp)
  d03f70:	d8014b15 	stw	zero,1324(sp)
  d03f74:	d8014815 	stw	zero,1312(sp)
  d03f78:	d8014415 	stw	zero,1296(sp)
  d03f7c:	d8014715 	stw	zero,1308(sp)
  d03f80:	dd400c15 	stw	r21,48(sp)
  d03f84:	d8000e15 	stw	zero,56(sp)
  d03f88:	d8000d15 	stw	zero,52(sp)
  d03f8c:	b8800007 	ldb	r2,0(r23)
  d03f90:	10001926 	beq	r2,zero,d03ff8 <___vfprintf_internal_r+0x1dc>
  d03f94:	00c00944 	movi	r3,37
  d03f98:	10c01726 	beq	r2,r3,d03ff8 <___vfprintf_internal_r+0x1dc>
  d03f9c:	b821883a 	mov	r16,r23
  d03fa0:	00000106 	br	d03fa8 <___vfprintf_internal_r+0x18c>
  d03fa4:	10c00326 	beq	r2,r3,d03fb4 <___vfprintf_internal_r+0x198>
  d03fa8:	84000044 	addi	r16,r16,1
  d03fac:	80800007 	ldb	r2,0(r16)
  d03fb0:	103ffc1e 	bne	r2,zero,d03fa4 <___vfprintf_internal_r+0x188>
  d03fb4:	85e7c83a 	sub	r19,r16,r23
  d03fb8:	98000e26 	beq	r19,zero,d03ff4 <___vfprintf_internal_r+0x1d8>
  d03fbc:	dc800e17 	ldw	r18,56(sp)
  d03fc0:	dc400d17 	ldw	r17,52(sp)
  d03fc4:	008001c4 	movi	r2,7
  d03fc8:	94e5883a 	add	r18,r18,r19
  d03fcc:	8c400044 	addi	r17,r17,1
  d03fd0:	adc00015 	stw	r23,0(r21)
  d03fd4:	dc800e15 	stw	r18,56(sp)
  d03fd8:	acc00115 	stw	r19,4(r21)
  d03fdc:	dc400d15 	stw	r17,52(sp)
  d03fe0:	14428b16 	blt	r2,r17,d04a10 <___vfprintf_internal_r+0xbf4>
  d03fe4:	ad400204 	addi	r21,r21,8
  d03fe8:	d9014b17 	ldw	r4,1324(sp)
  d03fec:	24c9883a 	add	r4,r4,r19
  d03ff0:	d9014b15 	stw	r4,1324(sp)
  d03ff4:	802f883a 	mov	r23,r16
  d03ff8:	b8800007 	ldb	r2,0(r23)
  d03ffc:	10013c26 	beq	r2,zero,d044f0 <___vfprintf_internal_r+0x6d4>
  d04000:	bdc00044 	addi	r23,r23,1
  d04004:	d8000405 	stb	zero,16(sp)
  d04008:	b8c00007 	ldb	r3,0(r23)
  d0400c:	04ffffc4 	movi	r19,-1
  d04010:	d8014c15 	stw	zero,1328(sp)
  d04014:	d8014a15 	stw	zero,1320(sp)
  d04018:	d8c14d15 	stw	r3,1332(sp)
  d0401c:	bdc00044 	addi	r23,r23,1
  d04020:	d9414d17 	ldw	r5,1332(sp)
  d04024:	00801604 	movi	r2,88
  d04028:	28fff804 	addi	r3,r5,-32
  d0402c:	10c06036 	bltu	r2,r3,d041b0 <___vfprintf_internal_r+0x394>
  d04030:	18c5883a 	add	r2,r3,r3
  d04034:	1085883a 	add	r2,r2,r2
  d04038:	00c03434 	movhi	r3,208
  d0403c:	18d01304 	addi	r3,r3,16460
  d04040:	10c5883a 	add	r2,r2,r3
  d04044:	11000017 	ldw	r4,0(r2)
  d04048:	2000683a 	jmp	r4
  d0404c:	00d04fc0 	call	d04fc <__alt_mem_onchip_memory2_3+0xc94fc>
  d04050:	00d041b0 	cmpltui	r3,zero,16646
  d04054:	00d041b0 	cmpltui	r3,zero,16646
  d04058:	00d04fac 	andhi	r3,zero,16702
  d0405c:	00d041b0 	cmpltui	r3,zero,16646
  d04060:	00d041b0 	cmpltui	r3,zero,16646
  d04064:	00d041b0 	cmpltui	r3,zero,16646
  d04068:	00d041b0 	cmpltui	r3,zero,16646
  d0406c:	00d041b0 	cmpltui	r3,zero,16646
  d04070:	00d041b0 	cmpltui	r3,zero,16646
  d04074:	00d04d8c 	andi	r3,zero,16694
  d04078:	00d04f9c 	xori	r3,zero,16702
  d0407c:	00d041b0 	cmpltui	r3,zero,16646
  d04080:	00d04da4 	muli	r3,zero,16694
  d04084:	00d05038 	rdprs	r3,zero,16704
  d04088:	00d041b0 	cmpltui	r3,zero,16646
  d0408c:	00d05024 	muli	r3,zero,16704
  d04090:	00d04fec 	andhi	r3,zero,16703
  d04094:	00d04fec 	andhi	r3,zero,16703
  d04098:	00d04fec 	andhi	r3,zero,16703
  d0409c:	00d04fec 	andhi	r3,zero,16703
  d040a0:	00d04fec 	andhi	r3,zero,16703
  d040a4:	00d04fec 	andhi	r3,zero,16703
  d040a8:	00d04fec 	andhi	r3,zero,16703
  d040ac:	00d04fec 	andhi	r3,zero,16703
  d040b0:	00d04fec 	andhi	r3,zero,16703
  d040b4:	00d041b0 	cmpltui	r3,zero,16646
  d040b8:	00d041b0 	cmpltui	r3,zero,16646
  d040bc:	00d041b0 	cmpltui	r3,zero,16646
  d040c0:	00d041b0 	cmpltui	r3,zero,16646
  d040c4:	00d041b0 	cmpltui	r3,zero,16646
  d040c8:	00d041b0 	cmpltui	r3,zero,16646
  d040cc:	00d041b0 	cmpltui	r3,zero,16646
  d040d0:	00d041b0 	cmpltui	r3,zero,16646
  d040d4:	00d041b0 	cmpltui	r3,zero,16646
  d040d8:	00d041b0 	cmpltui	r3,zero,16646
  d040dc:	00d04808 	cmpgei	r3,zero,16672
  d040e0:	00d04e74 	movhi	r3,16697
  d040e4:	00d041b0 	cmpltui	r3,zero,16646
  d040e8:	00d04e74 	movhi	r3,16697
  d040ec:	00d041b0 	cmpltui	r3,zero,16646
  d040f0:	00d041b0 	cmpltui	r3,zero,16646
  d040f4:	00d041b0 	cmpltui	r3,zero,16646
  d040f8:	00d041b0 	cmpltui	r3,zero,16646
  d040fc:	00d04fd8 	cmpnei	r3,zero,16703
  d04100:	00d041b0 	cmpltui	r3,zero,16646
  d04104:	00d041b0 	cmpltui	r3,zero,16646
  d04108:	00d048bc 	xorhi	r3,zero,16674
  d0410c:	00d041b0 	cmpltui	r3,zero,16646
  d04110:	00d041b0 	cmpltui	r3,zero,16646
  d04114:	00d041b0 	cmpltui	r3,zero,16646
  d04118:	00d041b0 	cmpltui	r3,zero,16646
  d0411c:	00d041b0 	cmpltui	r3,zero,16646
  d04120:	00d04908 	cmpgei	r3,zero,16676
  d04124:	00d041b0 	cmpltui	r3,zero,16646
  d04128:	00d041b0 	cmpltui	r3,zero,16646
  d0412c:	00d04f28 	cmpgeui	r3,zero,16700
  d04130:	00d041b0 	cmpltui	r3,zero,16646
  d04134:	00d041b0 	cmpltui	r3,zero,16646
  d04138:	00d041b0 	cmpltui	r3,zero,16646
  d0413c:	00d041b0 	cmpltui	r3,zero,16646
  d04140:	00d041b0 	cmpltui	r3,zero,16646
  d04144:	00d041b0 	cmpltui	r3,zero,16646
  d04148:	00d041b0 	cmpltui	r3,zero,16646
  d0414c:	00d041b0 	cmpltui	r3,zero,16646
  d04150:	00d041b0 	cmpltui	r3,zero,16646
  d04154:	00d041b0 	cmpltui	r3,zero,16646
  d04158:	00d04efc 	xorhi	r3,zero,16699
  d0415c:	00d04814 	movui	r3,16672
  d04160:	00d04e74 	movhi	r3,16697
  d04164:	00d04e74 	movhi	r3,16697
  d04168:	00d04e74 	movhi	r3,16697
  d0416c:	00d04e60 	cmpeqi	r3,zero,16697
  d04170:	00d04814 	movui	r3,16672
  d04174:	00d041b0 	cmpltui	r3,zero,16646
  d04178:	00d041b0 	cmpltui	r3,zero,16646
  d0417c:	00d04de8 	cmpgeui	r3,zero,16695
  d04180:	00d041b0 	cmpltui	r3,zero,16646
  d04184:	00d04db8 	rdprs	r3,zero,16694
  d04188:	00d048c8 	cmpgei	r3,zero,16675
  d0418c:	00d04e18 	cmpnei	r3,zero,16696
  d04190:	00d04e04 	movi	r3,16696
  d04194:	00d041b0 	cmpltui	r3,zero,16646
  d04198:	00d05094 	movui	r3,16706
  d0419c:	00d041b0 	cmpltui	r3,zero,16646
  d041a0:	00d04914 	movui	r3,16676
  d041a4:	00d041b0 	cmpltui	r3,zero,16646
  d041a8:	00d041b0 	cmpltui	r3,zero,16646
  d041ac:	00d04f8c 	andi	r3,zero,16702
  d041b0:	d9014d17 	ldw	r4,1332(sp)
  d041b4:	2000ce26 	beq	r4,zero,d044f0 <___vfprintf_internal_r+0x6d4>
  d041b8:	01400044 	movi	r5,1
  d041bc:	d9800f04 	addi	r6,sp,60
  d041c0:	d9c14015 	stw	r7,1280(sp)
  d041c4:	d9414515 	stw	r5,1300(sp)
  d041c8:	d9814115 	stw	r6,1284(sp)
  d041cc:	280f883a 	mov	r7,r5
  d041d0:	d9000f05 	stb	r4,60(sp)
  d041d4:	d8000405 	stb	zero,16(sp)
  d041d8:	d8014615 	stw	zero,1304(sp)
  d041dc:	d8c14c17 	ldw	r3,1328(sp)
  d041e0:	1880008c 	andi	r2,r3,2
  d041e4:	1005003a 	cmpeq	r2,r2,zero
  d041e8:	d8815015 	stw	r2,1344(sp)
  d041ec:	1000031e 	bne	r2,zero,d041fc <___vfprintf_internal_r+0x3e0>
  d041f0:	d9014517 	ldw	r4,1300(sp)
  d041f4:	21000084 	addi	r4,r4,2
  d041f8:	d9014515 	stw	r4,1300(sp)
  d041fc:	d9414c17 	ldw	r5,1328(sp)
  d04200:	2940210c 	andi	r5,r5,132
  d04204:	d9414e15 	stw	r5,1336(sp)
  d04208:	28002d1e 	bne	r5,zero,d042c0 <___vfprintf_internal_r+0x4a4>
  d0420c:	d9814a17 	ldw	r6,1320(sp)
  d04210:	d8814517 	ldw	r2,1300(sp)
  d04214:	30a1c83a 	sub	r16,r6,r2
  d04218:	0400290e 	bge	zero,r16,d042c0 <___vfprintf_internal_r+0x4a4>
  d0421c:	00800404 	movi	r2,16
  d04220:	1404580e 	bge	r2,r16,d05384 <___vfprintf_internal_r+0x1568>
  d04224:	dc800e17 	ldw	r18,56(sp)
  d04228:	dc400d17 	ldw	r17,52(sp)
  d0422c:	1027883a 	mov	r19,r2
  d04230:	07003474 	movhi	fp,209
  d04234:	e704b484 	addi	fp,fp,4818
  d04238:	050001c4 	movi	r20,7
  d0423c:	00000306 	br	d0424c <___vfprintf_internal_r+0x430>
  d04240:	843ffc04 	addi	r16,r16,-16
  d04244:	ad400204 	addi	r21,r21,8
  d04248:	9c00130e 	bge	r19,r16,d04298 <___vfprintf_internal_r+0x47c>
  d0424c:	94800404 	addi	r18,r18,16
  d04250:	8c400044 	addi	r17,r17,1
  d04254:	af000015 	stw	fp,0(r21)
  d04258:	acc00115 	stw	r19,4(r21)
  d0425c:	dc800e15 	stw	r18,56(sp)
  d04260:	dc400d15 	stw	r17,52(sp)
  d04264:	a47ff60e 	bge	r20,r17,d04240 <___vfprintf_internal_r+0x424>
  d04268:	d9014f17 	ldw	r4,1340(sp)
  d0426c:	b00b883a 	mov	r5,r22
  d04270:	d9800c04 	addi	r6,sp,48
  d04274:	d9c15115 	stw	r7,1348(sp)
  d04278:	0d03dc40 	call	d03dc4 <__sprint_r>
  d0427c:	d9c15117 	ldw	r7,1348(sp)
  d04280:	10009e1e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d04284:	843ffc04 	addi	r16,r16,-16
  d04288:	dc800e17 	ldw	r18,56(sp)
  d0428c:	dc400d17 	ldw	r17,52(sp)
  d04290:	dd401904 	addi	r21,sp,100
  d04294:	9c3fed16 	blt	r19,r16,d0424c <___vfprintf_internal_r+0x430>
  d04298:	9425883a 	add	r18,r18,r16
  d0429c:	8c400044 	addi	r17,r17,1
  d042a0:	008001c4 	movi	r2,7
  d042a4:	af000015 	stw	fp,0(r21)
  d042a8:	ac000115 	stw	r16,4(r21)
  d042ac:	dc800e15 	stw	r18,56(sp)
  d042b0:	dc400d15 	stw	r17,52(sp)
  d042b4:	1441f516 	blt	r2,r17,d04a8c <___vfprintf_internal_r+0xc70>
  d042b8:	ad400204 	addi	r21,r21,8
  d042bc:	00000206 	br	d042c8 <___vfprintf_internal_r+0x4ac>
  d042c0:	dc800e17 	ldw	r18,56(sp)
  d042c4:	dc400d17 	ldw	r17,52(sp)
  d042c8:	d8800407 	ldb	r2,16(sp)
  d042cc:	10000b26 	beq	r2,zero,d042fc <___vfprintf_internal_r+0x4e0>
  d042d0:	00800044 	movi	r2,1
  d042d4:	94800044 	addi	r18,r18,1
  d042d8:	8c400044 	addi	r17,r17,1
  d042dc:	a8800115 	stw	r2,4(r21)
  d042e0:	d8c00404 	addi	r3,sp,16
  d042e4:	008001c4 	movi	r2,7
  d042e8:	a8c00015 	stw	r3,0(r21)
  d042ec:	dc800e15 	stw	r18,56(sp)
  d042f0:	dc400d15 	stw	r17,52(sp)
  d042f4:	1441da16 	blt	r2,r17,d04a60 <___vfprintf_internal_r+0xc44>
  d042f8:	ad400204 	addi	r21,r21,8
  d042fc:	d9015017 	ldw	r4,1344(sp)
  d04300:	20000b1e 	bne	r4,zero,d04330 <___vfprintf_internal_r+0x514>
  d04304:	d8800444 	addi	r2,sp,17
  d04308:	94800084 	addi	r18,r18,2
  d0430c:	8c400044 	addi	r17,r17,1
  d04310:	a8800015 	stw	r2,0(r21)
  d04314:	00c00084 	movi	r3,2
  d04318:	008001c4 	movi	r2,7
  d0431c:	a8c00115 	stw	r3,4(r21)
  d04320:	dc800e15 	stw	r18,56(sp)
  d04324:	dc400d15 	stw	r17,52(sp)
  d04328:	1441c216 	blt	r2,r17,d04a34 <___vfprintf_internal_r+0xc18>
  d0432c:	ad400204 	addi	r21,r21,8
  d04330:	d9414e17 	ldw	r5,1336(sp)
  d04334:	00802004 	movi	r2,128
  d04338:	2880b126 	beq	r5,r2,d04600 <___vfprintf_internal_r+0x7e4>
  d0433c:	d8c14617 	ldw	r3,1304(sp)
  d04340:	19e1c83a 	sub	r16,r3,r7
  d04344:	0400260e 	bge	zero,r16,d043e0 <___vfprintf_internal_r+0x5c4>
  d04348:	00800404 	movi	r2,16
  d0434c:	1403c90e 	bge	r2,r16,d05274 <___vfprintf_internal_r+0x1458>
  d04350:	1027883a 	mov	r19,r2
  d04354:	07003474 	movhi	fp,209
  d04358:	e704b084 	addi	fp,fp,4802
  d0435c:	050001c4 	movi	r20,7
  d04360:	00000306 	br	d04370 <___vfprintf_internal_r+0x554>
  d04364:	843ffc04 	addi	r16,r16,-16
  d04368:	ad400204 	addi	r21,r21,8
  d0436c:	9c00130e 	bge	r19,r16,d043bc <___vfprintf_internal_r+0x5a0>
  d04370:	94800404 	addi	r18,r18,16
  d04374:	8c400044 	addi	r17,r17,1
  d04378:	af000015 	stw	fp,0(r21)
  d0437c:	acc00115 	stw	r19,4(r21)
  d04380:	dc800e15 	stw	r18,56(sp)
  d04384:	dc400d15 	stw	r17,52(sp)
  d04388:	a47ff60e 	bge	r20,r17,d04364 <___vfprintf_internal_r+0x548>
  d0438c:	d9014f17 	ldw	r4,1340(sp)
  d04390:	b00b883a 	mov	r5,r22
  d04394:	d9800c04 	addi	r6,sp,48
  d04398:	d9c15115 	stw	r7,1348(sp)
  d0439c:	0d03dc40 	call	d03dc4 <__sprint_r>
  d043a0:	d9c15117 	ldw	r7,1348(sp)
  d043a4:	1000551e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d043a8:	843ffc04 	addi	r16,r16,-16
  d043ac:	dc800e17 	ldw	r18,56(sp)
  d043b0:	dc400d17 	ldw	r17,52(sp)
  d043b4:	dd401904 	addi	r21,sp,100
  d043b8:	9c3fed16 	blt	r19,r16,d04370 <___vfprintf_internal_r+0x554>
  d043bc:	9425883a 	add	r18,r18,r16
  d043c0:	8c400044 	addi	r17,r17,1
  d043c4:	008001c4 	movi	r2,7
  d043c8:	af000015 	stw	fp,0(r21)
  d043cc:	ac000115 	stw	r16,4(r21)
  d043d0:	dc800e15 	stw	r18,56(sp)
  d043d4:	dc400d15 	stw	r17,52(sp)
  d043d8:	14418216 	blt	r2,r17,d049e4 <___vfprintf_internal_r+0xbc8>
  d043dc:	ad400204 	addi	r21,r21,8
  d043e0:	d9014c17 	ldw	r4,1328(sp)
  d043e4:	2080400c 	andi	r2,r4,256
  d043e8:	10004a1e 	bne	r2,zero,d04514 <___vfprintf_internal_r+0x6f8>
  d043ec:	d9414117 	ldw	r5,1284(sp)
  d043f0:	91e5883a 	add	r18,r18,r7
  d043f4:	8c400044 	addi	r17,r17,1
  d043f8:	008001c4 	movi	r2,7
  d043fc:	a9400015 	stw	r5,0(r21)
  d04400:	a9c00115 	stw	r7,4(r21)
  d04404:	dc800e15 	stw	r18,56(sp)
  d04408:	dc400d15 	stw	r17,52(sp)
  d0440c:	14416716 	blt	r2,r17,d049ac <___vfprintf_internal_r+0xb90>
  d04410:	a8c00204 	addi	r3,r21,8
  d04414:	d9814c17 	ldw	r6,1328(sp)
  d04418:	3080010c 	andi	r2,r6,4
  d0441c:	10002826 	beq	r2,zero,d044c0 <___vfprintf_internal_r+0x6a4>
  d04420:	d8814a17 	ldw	r2,1320(sp)
  d04424:	d9014517 	ldw	r4,1300(sp)
  d04428:	1121c83a 	sub	r16,r2,r4
  d0442c:	0400240e 	bge	zero,r16,d044c0 <___vfprintf_internal_r+0x6a4>
  d04430:	00800404 	movi	r2,16
  d04434:	14044f0e 	bge	r2,r16,d05574 <___vfprintf_internal_r+0x1758>
  d04438:	dc400d17 	ldw	r17,52(sp)
  d0443c:	1027883a 	mov	r19,r2
  d04440:	07003474 	movhi	fp,209
  d04444:	e704b484 	addi	fp,fp,4818
  d04448:	050001c4 	movi	r20,7
  d0444c:	00000306 	br	d0445c <___vfprintf_internal_r+0x640>
  d04450:	843ffc04 	addi	r16,r16,-16
  d04454:	18c00204 	addi	r3,r3,8
  d04458:	9c00110e 	bge	r19,r16,d044a0 <___vfprintf_internal_r+0x684>
  d0445c:	94800404 	addi	r18,r18,16
  d04460:	8c400044 	addi	r17,r17,1
  d04464:	1f000015 	stw	fp,0(r3)
  d04468:	1cc00115 	stw	r19,4(r3)
  d0446c:	dc800e15 	stw	r18,56(sp)
  d04470:	dc400d15 	stw	r17,52(sp)
  d04474:	a47ff60e 	bge	r20,r17,d04450 <___vfprintf_internal_r+0x634>
  d04478:	d9014f17 	ldw	r4,1340(sp)
  d0447c:	b00b883a 	mov	r5,r22
  d04480:	d9800c04 	addi	r6,sp,48
  d04484:	0d03dc40 	call	d03dc4 <__sprint_r>
  d04488:	10001c1e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d0448c:	843ffc04 	addi	r16,r16,-16
  d04490:	dc800e17 	ldw	r18,56(sp)
  d04494:	dc400d17 	ldw	r17,52(sp)
  d04498:	d8c01904 	addi	r3,sp,100
  d0449c:	9c3fef16 	blt	r19,r16,d0445c <___vfprintf_internal_r+0x640>
  d044a0:	9425883a 	add	r18,r18,r16
  d044a4:	8c400044 	addi	r17,r17,1
  d044a8:	008001c4 	movi	r2,7
  d044ac:	1f000015 	stw	fp,0(r3)
  d044b0:	1c000115 	stw	r16,4(r3)
  d044b4:	dc800e15 	stw	r18,56(sp)
  d044b8:	dc400d15 	stw	r17,52(sp)
  d044bc:	1440cb16 	blt	r2,r17,d047ec <___vfprintf_internal_r+0x9d0>
  d044c0:	d8814a17 	ldw	r2,1320(sp)
  d044c4:	d9414517 	ldw	r5,1300(sp)
  d044c8:	1140010e 	bge	r2,r5,d044d0 <___vfprintf_internal_r+0x6b4>
  d044cc:	2805883a 	mov	r2,r5
  d044d0:	d9814b17 	ldw	r6,1324(sp)
  d044d4:	308d883a 	add	r6,r6,r2
  d044d8:	d9814b15 	stw	r6,1324(sp)
  d044dc:	90013b1e 	bne	r18,zero,d049cc <___vfprintf_internal_r+0xbb0>
  d044e0:	d9c14017 	ldw	r7,1280(sp)
  d044e4:	dd401904 	addi	r21,sp,100
  d044e8:	d8000d15 	stw	zero,52(sp)
  d044ec:	003ea706 	br	d03f8c <___vfprintf_internal_r+0x170>
  d044f0:	d8800e17 	ldw	r2,56(sp)
  d044f4:	10053f1e 	bne	r2,zero,d059f4 <___vfprintf_internal_r+0x1bd8>
  d044f8:	d8000d15 	stw	zero,52(sp)
  d044fc:	b080030b 	ldhu	r2,12(r22)
  d04500:	1080100c 	andi	r2,r2,64
  d04504:	103e8726 	beq	r2,zero,d03f24 <___vfprintf_internal_r+0x108>
  d04508:	00bfffc4 	movi	r2,-1
  d0450c:	d8814b15 	stw	r2,1324(sp)
  d04510:	003e8406 	br	d03f24 <___vfprintf_internal_r+0x108>
  d04514:	d9814d17 	ldw	r6,1332(sp)
  d04518:	00801944 	movi	r2,101
  d0451c:	11806e16 	blt	r2,r6,d046d8 <___vfprintf_internal_r+0x8bc>
  d04520:	d9414717 	ldw	r5,1308(sp)
  d04524:	00c00044 	movi	r3,1
  d04528:	1943430e 	bge	r3,r5,d05238 <___vfprintf_internal_r+0x141c>
  d0452c:	d8814117 	ldw	r2,1284(sp)
  d04530:	94800044 	addi	r18,r18,1
  d04534:	8c400044 	addi	r17,r17,1
  d04538:	a8800015 	stw	r2,0(r21)
  d0453c:	008001c4 	movi	r2,7
  d04540:	a8c00115 	stw	r3,4(r21)
  d04544:	dc800e15 	stw	r18,56(sp)
  d04548:	dc400d15 	stw	r17,52(sp)
  d0454c:	1441ca16 	blt	r2,r17,d04c78 <___vfprintf_internal_r+0xe5c>
  d04550:	a8c00204 	addi	r3,r21,8
  d04554:	d9014917 	ldw	r4,1316(sp)
  d04558:	00800044 	movi	r2,1
  d0455c:	94800044 	addi	r18,r18,1
  d04560:	8c400044 	addi	r17,r17,1
  d04564:	18800115 	stw	r2,4(r3)
  d04568:	008001c4 	movi	r2,7
  d0456c:	19000015 	stw	r4,0(r3)
  d04570:	dc800e15 	stw	r18,56(sp)
  d04574:	dc400d15 	stw	r17,52(sp)
  d04578:	1441b616 	blt	r2,r17,d04c54 <___vfprintf_internal_r+0xe38>
  d0457c:	1cc00204 	addi	r19,r3,8
  d04580:	d9014217 	ldw	r4,1288(sp)
  d04584:	d9414317 	ldw	r5,1292(sp)
  d04588:	000d883a 	mov	r6,zero
  d0458c:	000f883a 	mov	r7,zero
  d04590:	0d0317c0 	call	d0317c <__nedf2>
  d04594:	10017426 	beq	r2,zero,d04b68 <___vfprintf_internal_r+0xd4c>
  d04598:	d9414717 	ldw	r5,1308(sp)
  d0459c:	d9814117 	ldw	r6,1284(sp)
  d045a0:	8c400044 	addi	r17,r17,1
  d045a4:	2c85883a 	add	r2,r5,r18
  d045a8:	14bfffc4 	addi	r18,r2,-1
  d045ac:	28bfffc4 	addi	r2,r5,-1
  d045b0:	30c00044 	addi	r3,r6,1
  d045b4:	98800115 	stw	r2,4(r19)
  d045b8:	008001c4 	movi	r2,7
  d045bc:	98c00015 	stw	r3,0(r19)
  d045c0:	dc800e15 	stw	r18,56(sp)
  d045c4:	dc400d15 	stw	r17,52(sp)
  d045c8:	14418e16 	blt	r2,r17,d04c04 <___vfprintf_internal_r+0xde8>
  d045cc:	9cc00204 	addi	r19,r19,8
  d045d0:	d9414817 	ldw	r5,1312(sp)
  d045d4:	d8800804 	addi	r2,sp,32
  d045d8:	8c400044 	addi	r17,r17,1
  d045dc:	9165883a 	add	r18,r18,r5
  d045e0:	98800015 	stw	r2,0(r19)
  d045e4:	008001c4 	movi	r2,7
  d045e8:	99400115 	stw	r5,4(r19)
  d045ec:	dc800e15 	stw	r18,56(sp)
  d045f0:	dc400d15 	stw	r17,52(sp)
  d045f4:	1440ed16 	blt	r2,r17,d049ac <___vfprintf_internal_r+0xb90>
  d045f8:	98c00204 	addi	r3,r19,8
  d045fc:	003f8506 	br	d04414 <___vfprintf_internal_r+0x5f8>
  d04600:	d9814a17 	ldw	r6,1320(sp)
  d04604:	d8814517 	ldw	r2,1300(sp)
  d04608:	30a1c83a 	sub	r16,r6,r2
  d0460c:	043f4b0e 	bge	zero,r16,d0433c <___vfprintf_internal_r+0x520>
  d04610:	00800404 	movi	r2,16
  d04614:	1404340e 	bge	r2,r16,d056e8 <___vfprintf_internal_r+0x18cc>
  d04618:	1027883a 	mov	r19,r2
  d0461c:	07003474 	movhi	fp,209
  d04620:	e704b084 	addi	fp,fp,4802
  d04624:	050001c4 	movi	r20,7
  d04628:	00000306 	br	d04638 <___vfprintf_internal_r+0x81c>
  d0462c:	843ffc04 	addi	r16,r16,-16
  d04630:	ad400204 	addi	r21,r21,8
  d04634:	9c00130e 	bge	r19,r16,d04684 <___vfprintf_internal_r+0x868>
  d04638:	94800404 	addi	r18,r18,16
  d0463c:	8c400044 	addi	r17,r17,1
  d04640:	af000015 	stw	fp,0(r21)
  d04644:	acc00115 	stw	r19,4(r21)
  d04648:	dc800e15 	stw	r18,56(sp)
  d0464c:	dc400d15 	stw	r17,52(sp)
  d04650:	a47ff60e 	bge	r20,r17,d0462c <___vfprintf_internal_r+0x810>
  d04654:	d9014f17 	ldw	r4,1340(sp)
  d04658:	b00b883a 	mov	r5,r22
  d0465c:	d9800c04 	addi	r6,sp,48
  d04660:	d9c15115 	stw	r7,1348(sp)
  d04664:	0d03dc40 	call	d03dc4 <__sprint_r>
  d04668:	d9c15117 	ldw	r7,1348(sp)
  d0466c:	103fa31e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d04670:	843ffc04 	addi	r16,r16,-16
  d04674:	dc800e17 	ldw	r18,56(sp)
  d04678:	dc400d17 	ldw	r17,52(sp)
  d0467c:	dd401904 	addi	r21,sp,100
  d04680:	9c3fed16 	blt	r19,r16,d04638 <___vfprintf_internal_r+0x81c>
  d04684:	9425883a 	add	r18,r18,r16
  d04688:	8c400044 	addi	r17,r17,1
  d0468c:	008001c4 	movi	r2,7
  d04690:	af000015 	stw	fp,0(r21)
  d04694:	ac000115 	stw	r16,4(r21)
  d04698:	dc800e15 	stw	r18,56(sp)
  d0469c:	dc400d15 	stw	r17,52(sp)
  d046a0:	14416116 	blt	r2,r17,d04c28 <___vfprintf_internal_r+0xe0c>
  d046a4:	ad400204 	addi	r21,r21,8
  d046a8:	003f2406 	br	d0433c <___vfprintf_internal_r+0x520>
  d046ac:	d9014f17 	ldw	r4,1340(sp)
  d046b0:	0d0788c0 	call	d0788c <__sinit>
  d046b4:	d9c15117 	ldw	r7,1348(sp)
  d046b8:	003def06 	br	d03e78 <___vfprintf_internal_r+0x5c>
  d046bc:	d9014f17 	ldw	r4,1340(sp)
  d046c0:	b00b883a 	mov	r5,r22
  d046c4:	d9c15115 	stw	r7,1348(sp)
  d046c8:	0d05cec0 	call	d05cec <__swsetup_r>
  d046cc:	d9c15117 	ldw	r7,1348(sp)
  d046d0:	103dee26 	beq	r2,zero,d03e8c <___vfprintf_internal_r+0x70>
  d046d4:	003f8c06 	br	d04508 <___vfprintf_internal_r+0x6ec>
  d046d8:	d9014217 	ldw	r4,1288(sp)
  d046dc:	d9414317 	ldw	r5,1292(sp)
  d046e0:	000d883a 	mov	r6,zero
  d046e4:	000f883a 	mov	r7,zero
  d046e8:	0d0be880 	call	d0be88 <__eqdf2>
  d046ec:	1000f21e 	bne	r2,zero,d04ab8 <___vfprintf_internal_r+0xc9c>
  d046f0:	00803474 	movhi	r2,209
  d046f4:	10843404 	addi	r2,r2,4304
  d046f8:	94800044 	addi	r18,r18,1
  d046fc:	8c400044 	addi	r17,r17,1
  d04700:	a8800015 	stw	r2,0(r21)
  d04704:	00c00044 	movi	r3,1
  d04708:	008001c4 	movi	r2,7
  d0470c:	a8c00115 	stw	r3,4(r21)
  d04710:	dc800e15 	stw	r18,56(sp)
  d04714:	dc400d15 	stw	r17,52(sp)
  d04718:	1442fa16 	blt	r2,r17,d05304 <___vfprintf_internal_r+0x14e8>
  d0471c:	a8c00204 	addi	r3,r21,8
  d04720:	d8800517 	ldw	r2,20(sp)
  d04724:	d9014717 	ldw	r4,1308(sp)
  d04728:	11015c0e 	bge	r2,r4,d04c9c <___vfprintf_internal_r+0xe80>
  d0472c:	dc400d17 	ldw	r17,52(sp)
  d04730:	d9814917 	ldw	r6,1316(sp)
  d04734:	00800044 	movi	r2,1
  d04738:	94800044 	addi	r18,r18,1
  d0473c:	8c400044 	addi	r17,r17,1
  d04740:	18800115 	stw	r2,4(r3)
  d04744:	008001c4 	movi	r2,7
  d04748:	19800015 	stw	r6,0(r3)
  d0474c:	dc800e15 	stw	r18,56(sp)
  d04750:	dc400d15 	stw	r17,52(sp)
  d04754:	14431016 	blt	r2,r17,d05398 <___vfprintf_internal_r+0x157c>
  d04758:	18c00204 	addi	r3,r3,8
  d0475c:	d8814717 	ldw	r2,1308(sp)
  d04760:	143fffc4 	addi	r16,r2,-1
  d04764:	043f2b0e 	bge	zero,r16,d04414 <___vfprintf_internal_r+0x5f8>
  d04768:	00800404 	movi	r2,16
  d0476c:	1402a20e 	bge	r2,r16,d051f8 <___vfprintf_internal_r+0x13dc>
  d04770:	dc400d17 	ldw	r17,52(sp)
  d04774:	1027883a 	mov	r19,r2
  d04778:	07003474 	movhi	fp,209
  d0477c:	e704b084 	addi	fp,fp,4802
  d04780:	050001c4 	movi	r20,7
  d04784:	00000306 	br	d04794 <___vfprintf_internal_r+0x978>
  d04788:	18c00204 	addi	r3,r3,8
  d0478c:	843ffc04 	addi	r16,r16,-16
  d04790:	9c029c0e 	bge	r19,r16,d05204 <___vfprintf_internal_r+0x13e8>
  d04794:	94800404 	addi	r18,r18,16
  d04798:	8c400044 	addi	r17,r17,1
  d0479c:	1f000015 	stw	fp,0(r3)
  d047a0:	1cc00115 	stw	r19,4(r3)
  d047a4:	dc800e15 	stw	r18,56(sp)
  d047a8:	dc400d15 	stw	r17,52(sp)
  d047ac:	a47ff60e 	bge	r20,r17,d04788 <___vfprintf_internal_r+0x96c>
  d047b0:	d9014f17 	ldw	r4,1340(sp)
  d047b4:	b00b883a 	mov	r5,r22
  d047b8:	d9800c04 	addi	r6,sp,48
  d047bc:	0d03dc40 	call	d03dc4 <__sprint_r>
  d047c0:	103f4e1e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d047c4:	dc800e17 	ldw	r18,56(sp)
  d047c8:	dc400d17 	ldw	r17,52(sp)
  d047cc:	d8c01904 	addi	r3,sp,100
  d047d0:	003fee06 	br	d0478c <___vfprintf_internal_r+0x970>
  d047d4:	d8802c0b 	ldhu	r2,176(sp)
  d047d8:	00ffffc4 	movi	r3,-1
  d047dc:	d8c14b15 	stw	r3,1324(sp)
  d047e0:	1080100c 	andi	r2,r2,64
  d047e4:	103dcc1e 	bne	r2,zero,d03f18 <___vfprintf_internal_r+0xfc>
  d047e8:	003dce06 	br	d03f24 <___vfprintf_internal_r+0x108>
  d047ec:	d9014f17 	ldw	r4,1340(sp)
  d047f0:	b00b883a 	mov	r5,r22
  d047f4:	d9800c04 	addi	r6,sp,48
  d047f8:	0d03dc40 	call	d03dc4 <__sprint_r>
  d047fc:	103f3f1e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d04800:	dc800e17 	ldw	r18,56(sp)
  d04804:	003f2e06 	br	d044c0 <___vfprintf_internal_r+0x6a4>
  d04808:	d9414c17 	ldw	r5,1328(sp)
  d0480c:	29400414 	ori	r5,r5,16
  d04810:	d9414c15 	stw	r5,1328(sp)
  d04814:	d9814c17 	ldw	r6,1328(sp)
  d04818:	3080080c 	andi	r2,r6,32
  d0481c:	10014f1e 	bne	r2,zero,d04d5c <___vfprintf_internal_r+0xf40>
  d04820:	d8c14c17 	ldw	r3,1328(sp)
  d04824:	1880040c 	andi	r2,r3,16
  d04828:	1002ea1e 	bne	r2,zero,d053d4 <___vfprintf_internal_r+0x15b8>
  d0482c:	d9014c17 	ldw	r4,1328(sp)
  d04830:	2080100c 	andi	r2,r4,64
  d04834:	1002e726 	beq	r2,zero,d053d4 <___vfprintf_internal_r+0x15b8>
  d04838:	3880000f 	ldh	r2,0(r7)
  d0483c:	39c00104 	addi	r7,r7,4
  d04840:	d9c14015 	stw	r7,1280(sp)
  d04844:	1023d7fa 	srai	r17,r2,31
  d04848:	1021883a 	mov	r16,r2
  d0484c:	88037216 	blt	r17,zero,d05618 <___vfprintf_internal_r+0x17fc>
  d04850:	01000044 	movi	r4,1
  d04854:	98000416 	blt	r19,zero,d04868 <___vfprintf_internal_r+0xa4c>
  d04858:	d8c14c17 	ldw	r3,1328(sp)
  d0485c:	00bfdfc4 	movi	r2,-129
  d04860:	1886703a 	and	r3,r3,r2
  d04864:	d8c14c15 	stw	r3,1328(sp)
  d04868:	8444b03a 	or	r2,r16,r17
  d0486c:	1002261e 	bne	r2,zero,d05108 <___vfprintf_internal_r+0x12ec>
  d04870:	9802251e 	bne	r19,zero,d05108 <___vfprintf_internal_r+0x12ec>
  d04874:	20803fcc 	andi	r2,r4,255
  d04878:	10029b26 	beq	r2,zero,d052e8 <___vfprintf_internal_r+0x14cc>
  d0487c:	d8c01904 	addi	r3,sp,100
  d04880:	dd000f04 	addi	r20,sp,60
  d04884:	d8c14115 	stw	r3,1284(sp)
  d04888:	d8c14117 	ldw	r3,1284(sp)
  d0488c:	dcc14515 	stw	r19,1300(sp)
  d04890:	a0c5c83a 	sub	r2,r20,r3
  d04894:	11c00a04 	addi	r7,r2,40
  d04898:	99c0010e 	bge	r19,r7,d048a0 <___vfprintf_internal_r+0xa84>
  d0489c:	d9c14515 	stw	r7,1300(sp)
  d048a0:	dcc14615 	stw	r19,1304(sp)
  d048a4:	d8800407 	ldb	r2,16(sp)
  d048a8:	103e4c26 	beq	r2,zero,d041dc <___vfprintf_internal_r+0x3c0>
  d048ac:	d8814517 	ldw	r2,1300(sp)
  d048b0:	10800044 	addi	r2,r2,1
  d048b4:	d8814515 	stw	r2,1300(sp)
  d048b8:	003e4806 	br	d041dc <___vfprintf_internal_r+0x3c0>
  d048bc:	d9814c17 	ldw	r6,1328(sp)
  d048c0:	31800414 	ori	r6,r6,16
  d048c4:	d9814c15 	stw	r6,1328(sp)
  d048c8:	d8c14c17 	ldw	r3,1328(sp)
  d048cc:	1880080c 	andi	r2,r3,32
  d048d0:	1001271e 	bne	r2,zero,d04d70 <___vfprintf_internal_r+0xf54>
  d048d4:	d9414c17 	ldw	r5,1328(sp)
  d048d8:	2880040c 	andi	r2,r5,16
  d048dc:	1002b61e 	bne	r2,zero,d053b8 <___vfprintf_internal_r+0x159c>
  d048e0:	d9814c17 	ldw	r6,1328(sp)
  d048e4:	3080100c 	andi	r2,r6,64
  d048e8:	1002b326 	beq	r2,zero,d053b8 <___vfprintf_internal_r+0x159c>
  d048ec:	3c00000b 	ldhu	r16,0(r7)
  d048f0:	0009883a 	mov	r4,zero
  d048f4:	39c00104 	addi	r7,r7,4
  d048f8:	0023883a 	mov	r17,zero
  d048fc:	d9c14015 	stw	r7,1280(sp)
  d04900:	d8000405 	stb	zero,16(sp)
  d04904:	003fd306 	br	d04854 <___vfprintf_internal_r+0xa38>
  d04908:	d9014c17 	ldw	r4,1328(sp)
  d0490c:	21000414 	ori	r4,r4,16
  d04910:	d9014c15 	stw	r4,1328(sp)
  d04914:	d9414c17 	ldw	r5,1328(sp)
  d04918:	2880080c 	andi	r2,r5,32
  d0491c:	1001081e 	bne	r2,zero,d04d40 <___vfprintf_internal_r+0xf24>
  d04920:	d8c14c17 	ldw	r3,1328(sp)
  d04924:	1880040c 	andi	r2,r3,16
  d04928:	1002b01e 	bne	r2,zero,d053ec <___vfprintf_internal_r+0x15d0>
  d0492c:	d9014c17 	ldw	r4,1328(sp)
  d04930:	2080100c 	andi	r2,r4,64
  d04934:	1002ad26 	beq	r2,zero,d053ec <___vfprintf_internal_r+0x15d0>
  d04938:	3c00000b 	ldhu	r16,0(r7)
  d0493c:	01000044 	movi	r4,1
  d04940:	39c00104 	addi	r7,r7,4
  d04944:	0023883a 	mov	r17,zero
  d04948:	d9c14015 	stw	r7,1280(sp)
  d0494c:	d8000405 	stb	zero,16(sp)
  d04950:	003fc006 	br	d04854 <___vfprintf_internal_r+0xa38>
  d04954:	d9014f17 	ldw	r4,1340(sp)
  d04958:	b00b883a 	mov	r5,r22
  d0495c:	d9800c04 	addi	r6,sp,48
  d04960:	0d03dc40 	call	d03dc4 <__sprint_r>
  d04964:	103ee51e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d04968:	dc800e17 	ldw	r18,56(sp)
  d0496c:	d8c01904 	addi	r3,sp,100
  d04970:	d9814c17 	ldw	r6,1328(sp)
  d04974:	3080004c 	andi	r2,r6,1
  d04978:	1005003a 	cmpeq	r2,r2,zero
  d0497c:	103ea51e 	bne	r2,zero,d04414 <___vfprintf_internal_r+0x5f8>
  d04980:	00800044 	movi	r2,1
  d04984:	dc400d17 	ldw	r17,52(sp)
  d04988:	18800115 	stw	r2,4(r3)
  d0498c:	d8814917 	ldw	r2,1316(sp)
  d04990:	94800044 	addi	r18,r18,1
  d04994:	8c400044 	addi	r17,r17,1
  d04998:	18800015 	stw	r2,0(r3)
  d0499c:	008001c4 	movi	r2,7
  d049a0:	dc800e15 	stw	r18,56(sp)
  d049a4:	dc400d15 	stw	r17,52(sp)
  d049a8:	14421e0e 	bge	r2,r17,d05224 <___vfprintf_internal_r+0x1408>
  d049ac:	d9014f17 	ldw	r4,1340(sp)
  d049b0:	b00b883a 	mov	r5,r22
  d049b4:	d9800c04 	addi	r6,sp,48
  d049b8:	0d03dc40 	call	d03dc4 <__sprint_r>
  d049bc:	103ecf1e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d049c0:	dc800e17 	ldw	r18,56(sp)
  d049c4:	d8c01904 	addi	r3,sp,100
  d049c8:	003e9206 	br	d04414 <___vfprintf_internal_r+0x5f8>
  d049cc:	d9014f17 	ldw	r4,1340(sp)
  d049d0:	b00b883a 	mov	r5,r22
  d049d4:	d9800c04 	addi	r6,sp,48
  d049d8:	0d03dc40 	call	d03dc4 <__sprint_r>
  d049dc:	103ec026 	beq	r2,zero,d044e0 <___vfprintf_internal_r+0x6c4>
  d049e0:	003ec606 	br	d044fc <___vfprintf_internal_r+0x6e0>
  d049e4:	d9014f17 	ldw	r4,1340(sp)
  d049e8:	b00b883a 	mov	r5,r22
  d049ec:	d9800c04 	addi	r6,sp,48
  d049f0:	d9c15115 	stw	r7,1348(sp)
  d049f4:	0d03dc40 	call	d03dc4 <__sprint_r>
  d049f8:	d9c15117 	ldw	r7,1348(sp)
  d049fc:	103ebf1e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d04a00:	dc800e17 	ldw	r18,56(sp)
  d04a04:	dc400d17 	ldw	r17,52(sp)
  d04a08:	dd401904 	addi	r21,sp,100
  d04a0c:	003e7406 	br	d043e0 <___vfprintf_internal_r+0x5c4>
  d04a10:	d9014f17 	ldw	r4,1340(sp)
  d04a14:	b00b883a 	mov	r5,r22
  d04a18:	d9800c04 	addi	r6,sp,48
  d04a1c:	d9c15115 	stw	r7,1348(sp)
  d04a20:	0d03dc40 	call	d03dc4 <__sprint_r>
  d04a24:	d9c15117 	ldw	r7,1348(sp)
  d04a28:	103eb41e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d04a2c:	dd401904 	addi	r21,sp,100
  d04a30:	003d6d06 	br	d03fe8 <___vfprintf_internal_r+0x1cc>
  d04a34:	d9014f17 	ldw	r4,1340(sp)
  d04a38:	b00b883a 	mov	r5,r22
  d04a3c:	d9800c04 	addi	r6,sp,48
  d04a40:	d9c15115 	stw	r7,1348(sp)
  d04a44:	0d03dc40 	call	d03dc4 <__sprint_r>
  d04a48:	d9c15117 	ldw	r7,1348(sp)
  d04a4c:	103eab1e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d04a50:	dc800e17 	ldw	r18,56(sp)
  d04a54:	dc400d17 	ldw	r17,52(sp)
  d04a58:	dd401904 	addi	r21,sp,100
  d04a5c:	003e3406 	br	d04330 <___vfprintf_internal_r+0x514>
  d04a60:	d9014f17 	ldw	r4,1340(sp)
  d04a64:	b00b883a 	mov	r5,r22
  d04a68:	d9800c04 	addi	r6,sp,48
  d04a6c:	d9c15115 	stw	r7,1348(sp)
  d04a70:	0d03dc40 	call	d03dc4 <__sprint_r>
  d04a74:	d9c15117 	ldw	r7,1348(sp)
  d04a78:	103ea01e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d04a7c:	dc800e17 	ldw	r18,56(sp)
  d04a80:	dc400d17 	ldw	r17,52(sp)
  d04a84:	dd401904 	addi	r21,sp,100
  d04a88:	003e1c06 	br	d042fc <___vfprintf_internal_r+0x4e0>
  d04a8c:	d9014f17 	ldw	r4,1340(sp)
  d04a90:	b00b883a 	mov	r5,r22
  d04a94:	d9800c04 	addi	r6,sp,48
  d04a98:	d9c15115 	stw	r7,1348(sp)
  d04a9c:	0d03dc40 	call	d03dc4 <__sprint_r>
  d04aa0:	d9c15117 	ldw	r7,1348(sp)
  d04aa4:	103e951e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d04aa8:	dc800e17 	ldw	r18,56(sp)
  d04aac:	dc400d17 	ldw	r17,52(sp)
  d04ab0:	dd401904 	addi	r21,sp,100
  d04ab4:	003e0406 	br	d042c8 <___vfprintf_internal_r+0x4ac>
  d04ab8:	d9000517 	ldw	r4,20(sp)
  d04abc:	0102520e 	bge	zero,r4,d05408 <___vfprintf_internal_r+0x15ec>
  d04ac0:	d9814717 	ldw	r6,1308(sp)
  d04ac4:	21807a16 	blt	r4,r6,d04cb0 <___vfprintf_internal_r+0xe94>
  d04ac8:	d8814117 	ldw	r2,1284(sp)
  d04acc:	91a5883a 	add	r18,r18,r6
  d04ad0:	8c400044 	addi	r17,r17,1
  d04ad4:	a8800015 	stw	r2,0(r21)
  d04ad8:	008001c4 	movi	r2,7
  d04adc:	a9800115 	stw	r6,4(r21)
  d04ae0:	dc800e15 	stw	r18,56(sp)
  d04ae4:	dc400d15 	stw	r17,52(sp)
  d04ae8:	1442f616 	blt	r2,r17,d056c4 <___vfprintf_internal_r+0x18a8>
  d04aec:	a8c00204 	addi	r3,r21,8
  d04af0:	d9414717 	ldw	r5,1308(sp)
  d04af4:	2161c83a 	sub	r16,r4,r5
  d04af8:	043f9d0e 	bge	zero,r16,d04970 <___vfprintf_internal_r+0xb54>
  d04afc:	00800404 	movi	r2,16
  d04b00:	1402130e 	bge	r2,r16,d05350 <___vfprintf_internal_r+0x1534>
  d04b04:	dc400d17 	ldw	r17,52(sp)
  d04b08:	1027883a 	mov	r19,r2
  d04b0c:	07003474 	movhi	fp,209
  d04b10:	e704b084 	addi	fp,fp,4802
  d04b14:	050001c4 	movi	r20,7
  d04b18:	00000306 	br	d04b28 <___vfprintf_internal_r+0xd0c>
  d04b1c:	18c00204 	addi	r3,r3,8
  d04b20:	843ffc04 	addi	r16,r16,-16
  d04b24:	9c020d0e 	bge	r19,r16,d0535c <___vfprintf_internal_r+0x1540>
  d04b28:	94800404 	addi	r18,r18,16
  d04b2c:	8c400044 	addi	r17,r17,1
  d04b30:	1f000015 	stw	fp,0(r3)
  d04b34:	1cc00115 	stw	r19,4(r3)
  d04b38:	dc800e15 	stw	r18,56(sp)
  d04b3c:	dc400d15 	stw	r17,52(sp)
  d04b40:	a47ff60e 	bge	r20,r17,d04b1c <___vfprintf_internal_r+0xd00>
  d04b44:	d9014f17 	ldw	r4,1340(sp)
  d04b48:	b00b883a 	mov	r5,r22
  d04b4c:	d9800c04 	addi	r6,sp,48
  d04b50:	0d03dc40 	call	d03dc4 <__sprint_r>
  d04b54:	103e691e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d04b58:	dc800e17 	ldw	r18,56(sp)
  d04b5c:	dc400d17 	ldw	r17,52(sp)
  d04b60:	d8c01904 	addi	r3,sp,100
  d04b64:	003fee06 	br	d04b20 <___vfprintf_internal_r+0xd04>
  d04b68:	d8814717 	ldw	r2,1308(sp)
  d04b6c:	143fffc4 	addi	r16,r2,-1
  d04b70:	043e970e 	bge	zero,r16,d045d0 <___vfprintf_internal_r+0x7b4>
  d04b74:	00800404 	movi	r2,16
  d04b78:	1400180e 	bge	r2,r16,d04bdc <___vfprintf_internal_r+0xdc0>
  d04b7c:	1029883a 	mov	r20,r2
  d04b80:	07003474 	movhi	fp,209
  d04b84:	e704b084 	addi	fp,fp,4802
  d04b88:	054001c4 	movi	r21,7
  d04b8c:	00000306 	br	d04b9c <___vfprintf_internal_r+0xd80>
  d04b90:	9cc00204 	addi	r19,r19,8
  d04b94:	843ffc04 	addi	r16,r16,-16
  d04b98:	a400120e 	bge	r20,r16,d04be4 <___vfprintf_internal_r+0xdc8>
  d04b9c:	94800404 	addi	r18,r18,16
  d04ba0:	8c400044 	addi	r17,r17,1
  d04ba4:	9f000015 	stw	fp,0(r19)
  d04ba8:	9d000115 	stw	r20,4(r19)
  d04bac:	dc800e15 	stw	r18,56(sp)
  d04bb0:	dc400d15 	stw	r17,52(sp)
  d04bb4:	ac7ff60e 	bge	r21,r17,d04b90 <___vfprintf_internal_r+0xd74>
  d04bb8:	d9014f17 	ldw	r4,1340(sp)
  d04bbc:	b00b883a 	mov	r5,r22
  d04bc0:	d9800c04 	addi	r6,sp,48
  d04bc4:	0d03dc40 	call	d03dc4 <__sprint_r>
  d04bc8:	103e4c1e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d04bcc:	dc800e17 	ldw	r18,56(sp)
  d04bd0:	dc400d17 	ldw	r17,52(sp)
  d04bd4:	dcc01904 	addi	r19,sp,100
  d04bd8:	003fee06 	br	d04b94 <___vfprintf_internal_r+0xd78>
  d04bdc:	07003474 	movhi	fp,209
  d04be0:	e704b084 	addi	fp,fp,4802
  d04be4:	9425883a 	add	r18,r18,r16
  d04be8:	8c400044 	addi	r17,r17,1
  d04bec:	008001c4 	movi	r2,7
  d04bf0:	9f000015 	stw	fp,0(r19)
  d04bf4:	9c000115 	stw	r16,4(r19)
  d04bf8:	dc800e15 	stw	r18,56(sp)
  d04bfc:	dc400d15 	stw	r17,52(sp)
  d04c00:	147e720e 	bge	r2,r17,d045cc <___vfprintf_internal_r+0x7b0>
  d04c04:	d9014f17 	ldw	r4,1340(sp)
  d04c08:	b00b883a 	mov	r5,r22
  d04c0c:	d9800c04 	addi	r6,sp,48
  d04c10:	0d03dc40 	call	d03dc4 <__sprint_r>
  d04c14:	103e391e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d04c18:	dc800e17 	ldw	r18,56(sp)
  d04c1c:	dc400d17 	ldw	r17,52(sp)
  d04c20:	dcc01904 	addi	r19,sp,100
  d04c24:	003e6a06 	br	d045d0 <___vfprintf_internal_r+0x7b4>
  d04c28:	d9014f17 	ldw	r4,1340(sp)
  d04c2c:	b00b883a 	mov	r5,r22
  d04c30:	d9800c04 	addi	r6,sp,48
  d04c34:	d9c15115 	stw	r7,1348(sp)
  d04c38:	0d03dc40 	call	d03dc4 <__sprint_r>
  d04c3c:	d9c15117 	ldw	r7,1348(sp)
  d04c40:	103e2e1e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d04c44:	dc800e17 	ldw	r18,56(sp)
  d04c48:	dc400d17 	ldw	r17,52(sp)
  d04c4c:	dd401904 	addi	r21,sp,100
  d04c50:	003dba06 	br	d0433c <___vfprintf_internal_r+0x520>
  d04c54:	d9014f17 	ldw	r4,1340(sp)
  d04c58:	b00b883a 	mov	r5,r22
  d04c5c:	d9800c04 	addi	r6,sp,48
  d04c60:	0d03dc40 	call	d03dc4 <__sprint_r>
  d04c64:	103e251e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d04c68:	dc800e17 	ldw	r18,56(sp)
  d04c6c:	dc400d17 	ldw	r17,52(sp)
  d04c70:	dcc01904 	addi	r19,sp,100
  d04c74:	003e4206 	br	d04580 <___vfprintf_internal_r+0x764>
  d04c78:	d9014f17 	ldw	r4,1340(sp)
  d04c7c:	b00b883a 	mov	r5,r22
  d04c80:	d9800c04 	addi	r6,sp,48
  d04c84:	0d03dc40 	call	d03dc4 <__sprint_r>
  d04c88:	103e1c1e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d04c8c:	dc800e17 	ldw	r18,56(sp)
  d04c90:	dc400d17 	ldw	r17,52(sp)
  d04c94:	d8c01904 	addi	r3,sp,100
  d04c98:	003e2e06 	br	d04554 <___vfprintf_internal_r+0x738>
  d04c9c:	d9414c17 	ldw	r5,1328(sp)
  d04ca0:	2880004c 	andi	r2,r5,1
  d04ca4:	1005003a 	cmpeq	r2,r2,zero
  d04ca8:	103dda1e 	bne	r2,zero,d04414 <___vfprintf_internal_r+0x5f8>
  d04cac:	003e9f06 	br	d0472c <___vfprintf_internal_r+0x910>
  d04cb0:	d8c14117 	ldw	r3,1284(sp)
  d04cb4:	9125883a 	add	r18,r18,r4
  d04cb8:	8c400044 	addi	r17,r17,1
  d04cbc:	008001c4 	movi	r2,7
  d04cc0:	a8c00015 	stw	r3,0(r21)
  d04cc4:	a9000115 	stw	r4,4(r21)
  d04cc8:	dc800e15 	stw	r18,56(sp)
  d04ccc:	dc400d15 	stw	r17,52(sp)
  d04cd0:	14426616 	blt	r2,r17,d0566c <___vfprintf_internal_r+0x1850>
  d04cd4:	a8c00204 	addi	r3,r21,8
  d04cd8:	d9414917 	ldw	r5,1316(sp)
  d04cdc:	00800044 	movi	r2,1
  d04ce0:	94800044 	addi	r18,r18,1
  d04ce4:	8c400044 	addi	r17,r17,1
  d04ce8:	18800115 	stw	r2,4(r3)
  d04cec:	008001c4 	movi	r2,7
  d04cf0:	19400015 	stw	r5,0(r3)
  d04cf4:	dc800e15 	stw	r18,56(sp)
  d04cf8:	dc400d15 	stw	r17,52(sp)
  d04cfc:	2021883a 	mov	r16,r4
  d04d00:	14425016 	blt	r2,r17,d05644 <___vfprintf_internal_r+0x1828>
  d04d04:	19400204 	addi	r5,r3,8
  d04d08:	d9814717 	ldw	r6,1308(sp)
  d04d0c:	8c400044 	addi	r17,r17,1
  d04d10:	dc400d15 	stw	r17,52(sp)
  d04d14:	3107c83a 	sub	r3,r6,r4
  d04d18:	d9014117 	ldw	r4,1284(sp)
  d04d1c:	90e5883a 	add	r18,r18,r3
  d04d20:	28c00115 	stw	r3,4(r5)
  d04d24:	8105883a 	add	r2,r16,r4
  d04d28:	28800015 	stw	r2,0(r5)
  d04d2c:	008001c4 	movi	r2,7
  d04d30:	dc800e15 	stw	r18,56(sp)
  d04d34:	147f1d16 	blt	r2,r17,d049ac <___vfprintf_internal_r+0xb90>
  d04d38:	28c00204 	addi	r3,r5,8
  d04d3c:	003db506 	br	d04414 <___vfprintf_internal_r+0x5f8>
  d04d40:	3c000017 	ldw	r16,0(r7)
  d04d44:	3c400117 	ldw	r17,4(r7)
  d04d48:	39800204 	addi	r6,r7,8
  d04d4c:	01000044 	movi	r4,1
  d04d50:	d9814015 	stw	r6,1280(sp)
  d04d54:	d8000405 	stb	zero,16(sp)
  d04d58:	003ebe06 	br	d04854 <___vfprintf_internal_r+0xa38>
  d04d5c:	3c000017 	ldw	r16,0(r7)
  d04d60:	3c400117 	ldw	r17,4(r7)
  d04d64:	38800204 	addi	r2,r7,8
  d04d68:	d8814015 	stw	r2,1280(sp)
  d04d6c:	003eb706 	br	d0484c <___vfprintf_internal_r+0xa30>
  d04d70:	3c000017 	ldw	r16,0(r7)
  d04d74:	3c400117 	ldw	r17,4(r7)
  d04d78:	39000204 	addi	r4,r7,8
  d04d7c:	d9014015 	stw	r4,1280(sp)
  d04d80:	0009883a 	mov	r4,zero
  d04d84:	d8000405 	stb	zero,16(sp)
  d04d88:	003eb206 	br	d04854 <___vfprintf_internal_r+0xa38>
  d04d8c:	38c00017 	ldw	r3,0(r7)
  d04d90:	39c00104 	addi	r7,r7,4
  d04d94:	d8c14a15 	stw	r3,1320(sp)
  d04d98:	1800d10e 	bge	r3,zero,d050e0 <___vfprintf_internal_r+0x12c4>
  d04d9c:	00c7c83a 	sub	r3,zero,r3
  d04da0:	d8c14a15 	stw	r3,1320(sp)
  d04da4:	d9014c17 	ldw	r4,1328(sp)
  d04da8:	b8c00007 	ldb	r3,0(r23)
  d04dac:	21000114 	ori	r4,r4,4
  d04db0:	d9014c15 	stw	r4,1328(sp)
  d04db4:	003c9806 	br	d04018 <___vfprintf_internal_r+0x1fc>
  d04db8:	d9814c17 	ldw	r6,1328(sp)
  d04dbc:	3080080c 	andi	r2,r6,32
  d04dc0:	1001f026 	beq	r2,zero,d05584 <___vfprintf_internal_r+0x1768>
  d04dc4:	d9014b17 	ldw	r4,1324(sp)
  d04dc8:	38800017 	ldw	r2,0(r7)
  d04dcc:	39c00104 	addi	r7,r7,4
  d04dd0:	d9c14015 	stw	r7,1280(sp)
  d04dd4:	2007d7fa 	srai	r3,r4,31
  d04dd8:	d9c14017 	ldw	r7,1280(sp)
  d04ddc:	11000015 	stw	r4,0(r2)
  d04de0:	10c00115 	stw	r3,4(r2)
  d04de4:	003c6906 	br	d03f8c <___vfprintf_internal_r+0x170>
  d04de8:	b8c00007 	ldb	r3,0(r23)
  d04dec:	00801b04 	movi	r2,108
  d04df0:	18824f26 	beq	r3,r2,d05730 <___vfprintf_internal_r+0x1914>
  d04df4:	d9414c17 	ldw	r5,1328(sp)
  d04df8:	29400414 	ori	r5,r5,16
  d04dfc:	d9414c15 	stw	r5,1328(sp)
  d04e00:	003c8506 	br	d04018 <___vfprintf_internal_r+0x1fc>
  d04e04:	d9814c17 	ldw	r6,1328(sp)
  d04e08:	b8c00007 	ldb	r3,0(r23)
  d04e0c:	31800814 	ori	r6,r6,32
  d04e10:	d9814c15 	stw	r6,1328(sp)
  d04e14:	003c8006 	br	d04018 <___vfprintf_internal_r+0x1fc>
  d04e18:	d8814c17 	ldw	r2,1328(sp)
  d04e1c:	3c000017 	ldw	r16,0(r7)
  d04e20:	00c01e04 	movi	r3,120
  d04e24:	10800094 	ori	r2,r2,2
  d04e28:	d8814c15 	stw	r2,1328(sp)
  d04e2c:	39c00104 	addi	r7,r7,4
  d04e30:	01403474 	movhi	r5,209
  d04e34:	29449a04 	addi	r5,r5,4712
  d04e38:	00800c04 	movi	r2,48
  d04e3c:	0023883a 	mov	r17,zero
  d04e40:	01000084 	movi	r4,2
  d04e44:	d9c14015 	stw	r7,1280(sp)
  d04e48:	d8c14d15 	stw	r3,1332(sp)
  d04e4c:	d9414415 	stw	r5,1296(sp)
  d04e50:	d8800445 	stb	r2,17(sp)
  d04e54:	d8c00485 	stb	r3,18(sp)
  d04e58:	d8000405 	stb	zero,16(sp)
  d04e5c:	003e7d06 	br	d04854 <___vfprintf_internal_r+0xa38>
  d04e60:	d8814c17 	ldw	r2,1328(sp)
  d04e64:	b8c00007 	ldb	r3,0(r23)
  d04e68:	10801014 	ori	r2,r2,64
  d04e6c:	d8814c15 	stw	r2,1328(sp)
  d04e70:	003c6906 	br	d04018 <___vfprintf_internal_r+0x1fc>
  d04e74:	d9414c17 	ldw	r5,1328(sp)
  d04e78:	2880020c 	andi	r2,r5,8
  d04e7c:	1001df26 	beq	r2,zero,d055fc <___vfprintf_internal_r+0x17e0>
  d04e80:	39800017 	ldw	r6,0(r7)
  d04e84:	38800204 	addi	r2,r7,8
  d04e88:	d8814015 	stw	r2,1280(sp)
  d04e8c:	d9814215 	stw	r6,1288(sp)
  d04e90:	39c00117 	ldw	r7,4(r7)
  d04e94:	d9c14315 	stw	r7,1292(sp)
  d04e98:	d9014217 	ldw	r4,1288(sp)
  d04e9c:	d9414317 	ldw	r5,1292(sp)
  d04ea0:	0d0a7bc0 	call	d0a7bc <__isinfd>
  d04ea4:	10021726 	beq	r2,zero,d05704 <___vfprintf_internal_r+0x18e8>
  d04ea8:	d9014217 	ldw	r4,1288(sp)
  d04eac:	d9414317 	ldw	r5,1292(sp)
  d04eb0:	000d883a 	mov	r6,zero
  d04eb4:	000f883a 	mov	r7,zero
  d04eb8:	0d0c0200 	call	d0c020 <__ltdf2>
  d04ebc:	1002ca16 	blt	r2,zero,d059e8 <___vfprintf_internal_r+0x1bcc>
  d04ec0:	d9414d17 	ldw	r5,1332(sp)
  d04ec4:	008011c4 	movi	r2,71
  d04ec8:	11420a16 	blt	r2,r5,d056f4 <___vfprintf_internal_r+0x18d8>
  d04ecc:	01803474 	movhi	r6,209
  d04ed0:	31849f04 	addi	r6,r6,4732
  d04ed4:	d9814115 	stw	r6,1284(sp)
  d04ed8:	d9014c17 	ldw	r4,1328(sp)
  d04edc:	00c000c4 	movi	r3,3
  d04ee0:	00bfdfc4 	movi	r2,-129
  d04ee4:	2088703a 	and	r4,r4,r2
  d04ee8:	180f883a 	mov	r7,r3
  d04eec:	d8c14515 	stw	r3,1300(sp)
  d04ef0:	d9014c15 	stw	r4,1328(sp)
  d04ef4:	d8014615 	stw	zero,1304(sp)
  d04ef8:	003e6a06 	br	d048a4 <___vfprintf_internal_r+0xa88>
  d04efc:	38800017 	ldw	r2,0(r7)
  d04f00:	00c00044 	movi	r3,1
  d04f04:	39c00104 	addi	r7,r7,4
  d04f08:	d9c14015 	stw	r7,1280(sp)
  d04f0c:	d9000f04 	addi	r4,sp,60
  d04f10:	180f883a 	mov	r7,r3
  d04f14:	d8c14515 	stw	r3,1300(sp)
  d04f18:	d9014115 	stw	r4,1284(sp)
  d04f1c:	d8800f05 	stb	r2,60(sp)
  d04f20:	d8000405 	stb	zero,16(sp)
  d04f24:	003cac06 	br	d041d8 <___vfprintf_internal_r+0x3bc>
  d04f28:	01403474 	movhi	r5,209
  d04f2c:	2944a504 	addi	r5,r5,4756
  d04f30:	d9414415 	stw	r5,1296(sp)
  d04f34:	d9814c17 	ldw	r6,1328(sp)
  d04f38:	3080080c 	andi	r2,r6,32
  d04f3c:	1000f926 	beq	r2,zero,d05324 <___vfprintf_internal_r+0x1508>
  d04f40:	3c000017 	ldw	r16,0(r7)
  d04f44:	3c400117 	ldw	r17,4(r7)
  d04f48:	38800204 	addi	r2,r7,8
  d04f4c:	d8814015 	stw	r2,1280(sp)
  d04f50:	d9414c17 	ldw	r5,1328(sp)
  d04f54:	2880004c 	andi	r2,r5,1
  d04f58:	1005003a 	cmpeq	r2,r2,zero
  d04f5c:	1000b31e 	bne	r2,zero,d0522c <___vfprintf_internal_r+0x1410>
  d04f60:	8444b03a 	or	r2,r16,r17
  d04f64:	1000b126 	beq	r2,zero,d0522c <___vfprintf_internal_r+0x1410>
  d04f68:	d9814d17 	ldw	r6,1332(sp)
  d04f6c:	29400094 	ori	r5,r5,2
  d04f70:	00800c04 	movi	r2,48
  d04f74:	01000084 	movi	r4,2
  d04f78:	d9414c15 	stw	r5,1328(sp)
  d04f7c:	d8800445 	stb	r2,17(sp)
  d04f80:	d9800485 	stb	r6,18(sp)
  d04f84:	d8000405 	stb	zero,16(sp)
  d04f88:	003e3206 	br	d04854 <___vfprintf_internal_r+0xa38>
  d04f8c:	01803474 	movhi	r6,209
  d04f90:	31849a04 	addi	r6,r6,4712
  d04f94:	d9814415 	stw	r6,1296(sp)
  d04f98:	003fe606 	br	d04f34 <___vfprintf_internal_r+0x1118>
  d04f9c:	00800ac4 	movi	r2,43
  d04fa0:	d8800405 	stb	r2,16(sp)
  d04fa4:	b8c00007 	ldb	r3,0(r23)
  d04fa8:	003c1b06 	br	d04018 <___vfprintf_internal_r+0x1fc>
  d04fac:	d8814c17 	ldw	r2,1328(sp)
  d04fb0:	b8c00007 	ldb	r3,0(r23)
  d04fb4:	10800054 	ori	r2,r2,1
  d04fb8:	d8814c15 	stw	r2,1328(sp)
  d04fbc:	003c1606 	br	d04018 <___vfprintf_internal_r+0x1fc>
  d04fc0:	d8800407 	ldb	r2,16(sp)
  d04fc4:	1000461e 	bne	r2,zero,d050e0 <___vfprintf_internal_r+0x12c4>
  d04fc8:	00800804 	movi	r2,32
  d04fcc:	d8800405 	stb	r2,16(sp)
  d04fd0:	b8c00007 	ldb	r3,0(r23)
  d04fd4:	003c1006 	br	d04018 <___vfprintf_internal_r+0x1fc>
  d04fd8:	d9814c17 	ldw	r6,1328(sp)
  d04fdc:	b8c00007 	ldb	r3,0(r23)
  d04fe0:	31800214 	ori	r6,r6,8
  d04fe4:	d9814c15 	stw	r6,1328(sp)
  d04fe8:	003c0b06 	br	d04018 <___vfprintf_internal_r+0x1fc>
  d04fec:	0007883a 	mov	r3,zero
  d04ff0:	01000244 	movi	r4,9
  d04ff4:	188002a4 	muli	r2,r3,10
  d04ff8:	b8c00007 	ldb	r3,0(r23)
  d04ffc:	d9814d17 	ldw	r6,1332(sp)
  d05000:	bdc00044 	addi	r23,r23,1
  d05004:	d8c14d15 	stw	r3,1332(sp)
  d05008:	d9414d17 	ldw	r5,1332(sp)
  d0500c:	3085883a 	add	r2,r6,r2
  d05010:	10fff404 	addi	r3,r2,-48
  d05014:	28bff404 	addi	r2,r5,-48
  d05018:	20bff62e 	bgeu	r4,r2,d04ff4 <___vfprintf_internal_r+0x11d8>
  d0501c:	d8c14a15 	stw	r3,1320(sp)
  d05020:	003bff06 	br	d04020 <___vfprintf_internal_r+0x204>
  d05024:	d9414c17 	ldw	r5,1328(sp)
  d05028:	b8c00007 	ldb	r3,0(r23)
  d0502c:	29402014 	ori	r5,r5,128
  d05030:	d9414c15 	stw	r5,1328(sp)
  d05034:	003bf806 	br	d04018 <___vfprintf_internal_r+0x1fc>
  d05038:	b8c00007 	ldb	r3,0(r23)
  d0503c:	00800a84 	movi	r2,42
  d05040:	bdc00044 	addi	r23,r23,1
  d05044:	18831526 	beq	r3,r2,d05c9c <___vfprintf_internal_r+0x1e80>
  d05048:	d8c14d15 	stw	r3,1332(sp)
  d0504c:	18bff404 	addi	r2,r3,-48
  d05050:	00c00244 	movi	r3,9
  d05054:	18827836 	bltu	r3,r2,d05a38 <___vfprintf_internal_r+0x1c1c>
  d05058:	000d883a 	mov	r6,zero
  d0505c:	308002a4 	muli	r2,r6,10
  d05060:	b9800007 	ldb	r6,0(r23)
  d05064:	d9414d17 	ldw	r5,1332(sp)
  d05068:	bdc00044 	addi	r23,r23,1
  d0506c:	d9814d15 	stw	r6,1332(sp)
  d05070:	d9014d17 	ldw	r4,1332(sp)
  d05074:	1145883a 	add	r2,r2,r5
  d05078:	11bff404 	addi	r6,r2,-48
  d0507c:	20bff404 	addi	r2,r4,-48
  d05080:	18bff62e 	bgeu	r3,r2,d0505c <___vfprintf_internal_r+0x1240>
  d05084:	3027883a 	mov	r19,r6
  d05088:	303be50e 	bge	r6,zero,d04020 <___vfprintf_internal_r+0x204>
  d0508c:	04ffffc4 	movi	r19,-1
  d05090:	003be306 	br	d04020 <___vfprintf_internal_r+0x204>
  d05094:	d8000405 	stb	zero,16(sp)
  d05098:	39800017 	ldw	r6,0(r7)
  d0509c:	39c00104 	addi	r7,r7,4
  d050a0:	d9c14015 	stw	r7,1280(sp)
  d050a4:	d9814115 	stw	r6,1284(sp)
  d050a8:	3001c926 	beq	r6,zero,d057d0 <___vfprintf_internal_r+0x19b4>
  d050ac:	98000e16 	blt	r19,zero,d050e8 <___vfprintf_internal_r+0x12cc>
  d050b0:	d9014117 	ldw	r4,1284(sp)
  d050b4:	000b883a 	mov	r5,zero
  d050b8:	980d883a 	mov	r6,r19
  d050bc:	0d08ed80 	call	d08ed8 <memchr>
  d050c0:	10025926 	beq	r2,zero,d05a28 <___vfprintf_internal_r+0x1c0c>
  d050c4:	d8c14117 	ldw	r3,1284(sp)
  d050c8:	10cfc83a 	sub	r7,r2,r3
  d050cc:	99c19e16 	blt	r19,r7,d05748 <___vfprintf_internal_r+0x192c>
  d050d0:	d9c14515 	stw	r7,1300(sp)
  d050d4:	38000916 	blt	r7,zero,d050fc <___vfprintf_internal_r+0x12e0>
  d050d8:	d8014615 	stw	zero,1304(sp)
  d050dc:	003df106 	br	d048a4 <___vfprintf_internal_r+0xa88>
  d050e0:	b8c00007 	ldb	r3,0(r23)
  d050e4:	003bcc06 	br	d04018 <___vfprintf_internal_r+0x1fc>
  d050e8:	d9014117 	ldw	r4,1284(sp)
  d050ec:	0d03d500 	call	d03d50 <strlen>
  d050f0:	d8814515 	stw	r2,1300(sp)
  d050f4:	100f883a 	mov	r7,r2
  d050f8:	103ff70e 	bge	r2,zero,d050d8 <___vfprintf_internal_r+0x12bc>
  d050fc:	d8014515 	stw	zero,1300(sp)
  d05100:	d8014615 	stw	zero,1304(sp)
  d05104:	003de706 	br	d048a4 <___vfprintf_internal_r+0xa88>
  d05108:	20c03fcc 	andi	r3,r4,255
  d0510c:	00800044 	movi	r2,1
  d05110:	18802d26 	beq	r3,r2,d051c8 <___vfprintf_internal_r+0x13ac>
  d05114:	18800e36 	bltu	r3,r2,d05150 <___vfprintf_internal_r+0x1334>
  d05118:	00800084 	movi	r2,2
  d0511c:	1880fa26 	beq	r3,r2,d05508 <___vfprintf_internal_r+0x16ec>
  d05120:	01003474 	movhi	r4,209
  d05124:	2104aa04 	addi	r4,r4,4776
  d05128:	0d03d500 	call	d03d50 <strlen>
  d0512c:	100f883a 	mov	r7,r2
  d05130:	dcc14515 	stw	r19,1300(sp)
  d05134:	9880010e 	bge	r19,r2,d0513c <___vfprintf_internal_r+0x1320>
  d05138:	d8814515 	stw	r2,1300(sp)
  d0513c:	00803474 	movhi	r2,209
  d05140:	1084aa04 	addi	r2,r2,4776
  d05144:	dcc14615 	stw	r19,1304(sp)
  d05148:	d8814115 	stw	r2,1284(sp)
  d0514c:	003dd506 	br	d048a4 <___vfprintf_internal_r+0xa88>
  d05150:	d9401904 	addi	r5,sp,100
  d05154:	dd000f04 	addi	r20,sp,60
  d05158:	d9414115 	stw	r5,1284(sp)
  d0515c:	880a977a 	slli	r5,r17,29
  d05160:	d9814117 	ldw	r6,1284(sp)
  d05164:	8004d0fa 	srli	r2,r16,3
  d05168:	8806d0fa 	srli	r3,r17,3
  d0516c:	810001cc 	andi	r4,r16,7
  d05170:	2884b03a 	or	r2,r5,r2
  d05174:	31bfffc4 	addi	r6,r6,-1
  d05178:	21000c04 	addi	r4,r4,48
  d0517c:	d9814115 	stw	r6,1284(sp)
  d05180:	10cab03a 	or	r5,r2,r3
  d05184:	31000005 	stb	r4,0(r6)
  d05188:	1021883a 	mov	r16,r2
  d0518c:	1823883a 	mov	r17,r3
  d05190:	283ff21e 	bne	r5,zero,d0515c <___vfprintf_internal_r+0x1340>
  d05194:	d8c14c17 	ldw	r3,1328(sp)
  d05198:	1880004c 	andi	r2,r3,1
  d0519c:	1005003a 	cmpeq	r2,r2,zero
  d051a0:	103db91e 	bne	r2,zero,d04888 <___vfprintf_internal_r+0xa6c>
  d051a4:	20803fcc 	andi	r2,r4,255
  d051a8:	1080201c 	xori	r2,r2,128
  d051ac:	10bfe004 	addi	r2,r2,-128
  d051b0:	00c00c04 	movi	r3,48
  d051b4:	10fdb426 	beq	r2,r3,d04888 <___vfprintf_internal_r+0xa6c>
  d051b8:	31bfffc4 	addi	r6,r6,-1
  d051bc:	d9814115 	stw	r6,1284(sp)
  d051c0:	30c00005 	stb	r3,0(r6)
  d051c4:	003db006 	br	d04888 <___vfprintf_internal_r+0xa6c>
  d051c8:	88800068 	cmpgeui	r2,r17,1
  d051cc:	10002c1e 	bne	r2,zero,d05280 <___vfprintf_internal_r+0x1464>
  d051d0:	8800021e 	bne	r17,zero,d051dc <___vfprintf_internal_r+0x13c0>
  d051d4:	00800244 	movi	r2,9
  d051d8:	14002936 	bltu	r2,r16,d05280 <___vfprintf_internal_r+0x1464>
  d051dc:	d90018c4 	addi	r4,sp,99
  d051e0:	dd000f04 	addi	r20,sp,60
  d051e4:	d9014115 	stw	r4,1284(sp)
  d051e8:	d9014117 	ldw	r4,1284(sp)
  d051ec:	80800c04 	addi	r2,r16,48
  d051f0:	20800005 	stb	r2,0(r4)
  d051f4:	003da406 	br	d04888 <___vfprintf_internal_r+0xa6c>
  d051f8:	dc400d17 	ldw	r17,52(sp)
  d051fc:	07003474 	movhi	fp,209
  d05200:	e704b084 	addi	fp,fp,4802
  d05204:	9425883a 	add	r18,r18,r16
  d05208:	8c400044 	addi	r17,r17,1
  d0520c:	008001c4 	movi	r2,7
  d05210:	1f000015 	stw	fp,0(r3)
  d05214:	1c000115 	stw	r16,4(r3)
  d05218:	dc800e15 	stw	r18,56(sp)
  d0521c:	dc400d15 	stw	r17,52(sp)
  d05220:	147de216 	blt	r2,r17,d049ac <___vfprintf_internal_r+0xb90>
  d05224:	18c00204 	addi	r3,r3,8
  d05228:	003c7a06 	br	d04414 <___vfprintf_internal_r+0x5f8>
  d0522c:	01000084 	movi	r4,2
  d05230:	d8000405 	stb	zero,16(sp)
  d05234:	003d8706 	br	d04854 <___vfprintf_internal_r+0xa38>
  d05238:	d9814c17 	ldw	r6,1328(sp)
  d0523c:	30c4703a 	and	r2,r6,r3
  d05240:	1005003a 	cmpeq	r2,r2,zero
  d05244:	103cb926 	beq	r2,zero,d0452c <___vfprintf_internal_r+0x710>
  d05248:	d9014117 	ldw	r4,1284(sp)
  d0524c:	94800044 	addi	r18,r18,1
  d05250:	8c400044 	addi	r17,r17,1
  d05254:	008001c4 	movi	r2,7
  d05258:	a9000015 	stw	r4,0(r21)
  d0525c:	a8c00115 	stw	r3,4(r21)
  d05260:	dc800e15 	stw	r18,56(sp)
  d05264:	dc400d15 	stw	r17,52(sp)
  d05268:	147e6616 	blt	r2,r17,d04c04 <___vfprintf_internal_r+0xde8>
  d0526c:	acc00204 	addi	r19,r21,8
  d05270:	003cd706 	br	d045d0 <___vfprintf_internal_r+0x7b4>
  d05274:	07003474 	movhi	fp,209
  d05278:	e704b084 	addi	fp,fp,4802
  d0527c:	003c4f06 	br	d043bc <___vfprintf_internal_r+0x5a0>
  d05280:	dd000f04 	addi	r20,sp,60
  d05284:	dc801904 	addi	r18,sp,100
  d05288:	8009883a 	mov	r4,r16
  d0528c:	880b883a 	mov	r5,r17
  d05290:	01800284 	movi	r6,10
  d05294:	000f883a 	mov	r7,zero
  d05298:	0d0b5140 	call	d0b514 <__umoddi3>
  d0529c:	12000c04 	addi	r8,r2,48
  d052a0:	94bfffc4 	addi	r18,r18,-1
  d052a4:	8009883a 	mov	r4,r16
  d052a8:	880b883a 	mov	r5,r17
  d052ac:	01800284 	movi	r6,10
  d052b0:	000f883a 	mov	r7,zero
  d052b4:	92000005 	stb	r8,0(r18)
  d052b8:	0d0af380 	call	d0af38 <__udivdi3>
  d052bc:	1009883a 	mov	r4,r2
  d052c0:	1021883a 	mov	r16,r2
  d052c4:	18800068 	cmpgeui	r2,r3,1
  d052c8:	1823883a 	mov	r17,r3
  d052cc:	103fee1e 	bne	r2,zero,d05288 <___vfprintf_internal_r+0x146c>
  d052d0:	1800021e 	bne	r3,zero,d052dc <___vfprintf_internal_r+0x14c0>
  d052d4:	00800244 	movi	r2,9
  d052d8:	113feb36 	bltu	r2,r4,d05288 <___vfprintf_internal_r+0x146c>
  d052dc:	94bfffc4 	addi	r18,r18,-1
  d052e0:	dc814115 	stw	r18,1284(sp)
  d052e4:	003fc006 	br	d051e8 <___vfprintf_internal_r+0x13cc>
  d052e8:	d9014c17 	ldw	r4,1328(sp)
  d052ec:	2080004c 	andi	r2,r4,1
  d052f0:	10009a1e 	bne	r2,zero,d0555c <___vfprintf_internal_r+0x1740>
  d052f4:	d9401904 	addi	r5,sp,100
  d052f8:	dd000f04 	addi	r20,sp,60
  d052fc:	d9414115 	stw	r5,1284(sp)
  d05300:	003d6106 	br	d04888 <___vfprintf_internal_r+0xa6c>
  d05304:	d9014f17 	ldw	r4,1340(sp)
  d05308:	b00b883a 	mov	r5,r22
  d0530c:	d9800c04 	addi	r6,sp,48
  d05310:	0d03dc40 	call	d03dc4 <__sprint_r>
  d05314:	103c791e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d05318:	dc800e17 	ldw	r18,56(sp)
  d0531c:	d8c01904 	addi	r3,sp,100
  d05320:	003cff06 	br	d04720 <___vfprintf_internal_r+0x904>
  d05324:	d8c14c17 	ldw	r3,1328(sp)
  d05328:	1880040c 	andi	r2,r3,16
  d0532c:	1000711e 	bne	r2,zero,d054f4 <___vfprintf_internal_r+0x16d8>
  d05330:	d9014c17 	ldw	r4,1328(sp)
  d05334:	2080100c 	andi	r2,r4,64
  d05338:	10006e26 	beq	r2,zero,d054f4 <___vfprintf_internal_r+0x16d8>
  d0533c:	3c00000b 	ldhu	r16,0(r7)
  d05340:	0023883a 	mov	r17,zero
  d05344:	39c00104 	addi	r7,r7,4
  d05348:	d9c14015 	stw	r7,1280(sp)
  d0534c:	003f0006 	br	d04f50 <___vfprintf_internal_r+0x1134>
  d05350:	dc400d17 	ldw	r17,52(sp)
  d05354:	07003474 	movhi	fp,209
  d05358:	e704b084 	addi	fp,fp,4802
  d0535c:	9425883a 	add	r18,r18,r16
  d05360:	8c400044 	addi	r17,r17,1
  d05364:	008001c4 	movi	r2,7
  d05368:	1f000015 	stw	fp,0(r3)
  d0536c:	1c000115 	stw	r16,4(r3)
  d05370:	dc800e15 	stw	r18,56(sp)
  d05374:	dc400d15 	stw	r17,52(sp)
  d05378:	147d7616 	blt	r2,r17,d04954 <___vfprintf_internal_r+0xb38>
  d0537c:	18c00204 	addi	r3,r3,8
  d05380:	003d7b06 	br	d04970 <___vfprintf_internal_r+0xb54>
  d05384:	dc800e17 	ldw	r18,56(sp)
  d05388:	dc400d17 	ldw	r17,52(sp)
  d0538c:	07003474 	movhi	fp,209
  d05390:	e704b484 	addi	fp,fp,4818
  d05394:	003bc006 	br	d04298 <___vfprintf_internal_r+0x47c>
  d05398:	d9014f17 	ldw	r4,1340(sp)
  d0539c:	b00b883a 	mov	r5,r22
  d053a0:	d9800c04 	addi	r6,sp,48
  d053a4:	0d03dc40 	call	d03dc4 <__sprint_r>
  d053a8:	103c541e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d053ac:	dc800e17 	ldw	r18,56(sp)
  d053b0:	d8c01904 	addi	r3,sp,100
  d053b4:	003ce906 	br	d0475c <___vfprintf_internal_r+0x940>
  d053b8:	3c000017 	ldw	r16,0(r7)
  d053bc:	0009883a 	mov	r4,zero
  d053c0:	39c00104 	addi	r7,r7,4
  d053c4:	0023883a 	mov	r17,zero
  d053c8:	d9c14015 	stw	r7,1280(sp)
  d053cc:	d8000405 	stb	zero,16(sp)
  d053d0:	003d2006 	br	d04854 <___vfprintf_internal_r+0xa38>
  d053d4:	38800017 	ldw	r2,0(r7)
  d053d8:	39c00104 	addi	r7,r7,4
  d053dc:	d9c14015 	stw	r7,1280(sp)
  d053e0:	1023d7fa 	srai	r17,r2,31
  d053e4:	1021883a 	mov	r16,r2
  d053e8:	003d1806 	br	d0484c <___vfprintf_internal_r+0xa30>
  d053ec:	3c000017 	ldw	r16,0(r7)
  d053f0:	01000044 	movi	r4,1
  d053f4:	39c00104 	addi	r7,r7,4
  d053f8:	0023883a 	mov	r17,zero
  d053fc:	d9c14015 	stw	r7,1280(sp)
  d05400:	d8000405 	stb	zero,16(sp)
  d05404:	003d1306 	br	d04854 <___vfprintf_internal_r+0xa38>
  d05408:	00803474 	movhi	r2,209
  d0540c:	10843404 	addi	r2,r2,4304
  d05410:	94800044 	addi	r18,r18,1
  d05414:	8c400044 	addi	r17,r17,1
  d05418:	a8800015 	stw	r2,0(r21)
  d0541c:	00c00044 	movi	r3,1
  d05420:	008001c4 	movi	r2,7
  d05424:	a8c00115 	stw	r3,4(r21)
  d05428:	dc800e15 	stw	r18,56(sp)
  d0542c:	dc400d15 	stw	r17,52(sp)
  d05430:	1440ca16 	blt	r2,r17,d0575c <___vfprintf_internal_r+0x1940>
  d05434:	a8c00204 	addi	r3,r21,8
  d05438:	2000061e 	bne	r4,zero,d05454 <___vfprintf_internal_r+0x1638>
  d0543c:	d9414717 	ldw	r5,1308(sp)
  d05440:	2800041e 	bne	r5,zero,d05454 <___vfprintf_internal_r+0x1638>
  d05444:	d9814c17 	ldw	r6,1328(sp)
  d05448:	3080004c 	andi	r2,r6,1
  d0544c:	1005003a 	cmpeq	r2,r2,zero
  d05450:	103bf01e 	bne	r2,zero,d04414 <___vfprintf_internal_r+0x5f8>
  d05454:	00800044 	movi	r2,1
  d05458:	dc400d17 	ldw	r17,52(sp)
  d0545c:	18800115 	stw	r2,4(r3)
  d05460:	d8814917 	ldw	r2,1316(sp)
  d05464:	94800044 	addi	r18,r18,1
  d05468:	8c400044 	addi	r17,r17,1
  d0546c:	18800015 	stw	r2,0(r3)
  d05470:	008001c4 	movi	r2,7
  d05474:	dc800e15 	stw	r18,56(sp)
  d05478:	dc400d15 	stw	r17,52(sp)
  d0547c:	1440ca16 	blt	r2,r17,d057a8 <___vfprintf_internal_r+0x198c>
  d05480:	18c00204 	addi	r3,r3,8
  d05484:	0121c83a 	sub	r16,zero,r4
  d05488:	0400500e 	bge	zero,r16,d055cc <___vfprintf_internal_r+0x17b0>
  d0548c:	00800404 	movi	r2,16
  d05490:	1400800e 	bge	r2,r16,d05694 <___vfprintf_internal_r+0x1878>
  d05494:	1027883a 	mov	r19,r2
  d05498:	07003474 	movhi	fp,209
  d0549c:	e704b084 	addi	fp,fp,4802
  d054a0:	050001c4 	movi	r20,7
  d054a4:	00000306 	br	d054b4 <___vfprintf_internal_r+0x1698>
  d054a8:	18c00204 	addi	r3,r3,8
  d054ac:	843ffc04 	addi	r16,r16,-16
  d054b0:	9c007a0e 	bge	r19,r16,d0569c <___vfprintf_internal_r+0x1880>
  d054b4:	94800404 	addi	r18,r18,16
  d054b8:	8c400044 	addi	r17,r17,1
  d054bc:	1f000015 	stw	fp,0(r3)
  d054c0:	1cc00115 	stw	r19,4(r3)
  d054c4:	dc800e15 	stw	r18,56(sp)
  d054c8:	dc400d15 	stw	r17,52(sp)
  d054cc:	a47ff60e 	bge	r20,r17,d054a8 <___vfprintf_internal_r+0x168c>
  d054d0:	d9014f17 	ldw	r4,1340(sp)
  d054d4:	b00b883a 	mov	r5,r22
  d054d8:	d9800c04 	addi	r6,sp,48
  d054dc:	0d03dc40 	call	d03dc4 <__sprint_r>
  d054e0:	103c061e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d054e4:	dc800e17 	ldw	r18,56(sp)
  d054e8:	dc400d17 	ldw	r17,52(sp)
  d054ec:	d8c01904 	addi	r3,sp,100
  d054f0:	003fee06 	br	d054ac <___vfprintf_internal_r+0x1690>
  d054f4:	3c000017 	ldw	r16,0(r7)
  d054f8:	0023883a 	mov	r17,zero
  d054fc:	39c00104 	addi	r7,r7,4
  d05500:	d9c14015 	stw	r7,1280(sp)
  d05504:	003e9206 	br	d04f50 <___vfprintf_internal_r+0x1134>
  d05508:	d9401904 	addi	r5,sp,100
  d0550c:	dd000f04 	addi	r20,sp,60
  d05510:	d9414115 	stw	r5,1284(sp)
  d05514:	d9814417 	ldw	r6,1296(sp)
  d05518:	880a973a 	slli	r5,r17,28
  d0551c:	8004d13a 	srli	r2,r16,4
  d05520:	810003cc 	andi	r4,r16,15
  d05524:	3109883a 	add	r4,r6,r4
  d05528:	2884b03a 	or	r2,r5,r2
  d0552c:	21400003 	ldbu	r5,0(r4)
  d05530:	d9014117 	ldw	r4,1284(sp)
  d05534:	8806d13a 	srli	r3,r17,4
  d05538:	1021883a 	mov	r16,r2
  d0553c:	213fffc4 	addi	r4,r4,-1
  d05540:	d9014115 	stw	r4,1284(sp)
  d05544:	d9814117 	ldw	r6,1284(sp)
  d05548:	10c8b03a 	or	r4,r2,r3
  d0554c:	1823883a 	mov	r17,r3
  d05550:	31400005 	stb	r5,0(r6)
  d05554:	203fef1e 	bne	r4,zero,d05514 <___vfprintf_internal_r+0x16f8>
  d05558:	003ccb06 	br	d04888 <___vfprintf_internal_r+0xa6c>
  d0555c:	00800c04 	movi	r2,48
  d05560:	d98018c4 	addi	r6,sp,99
  d05564:	dd000f04 	addi	r20,sp,60
  d05568:	d88018c5 	stb	r2,99(sp)
  d0556c:	d9814115 	stw	r6,1284(sp)
  d05570:	003cc506 	br	d04888 <___vfprintf_internal_r+0xa6c>
  d05574:	dc400d17 	ldw	r17,52(sp)
  d05578:	07003474 	movhi	fp,209
  d0557c:	e704b484 	addi	fp,fp,4818
  d05580:	003bc706 	br	d044a0 <___vfprintf_internal_r+0x684>
  d05584:	d9414c17 	ldw	r5,1328(sp)
  d05588:	2880040c 	andi	r2,r5,16
  d0558c:	10007c26 	beq	r2,zero,d05780 <___vfprintf_internal_r+0x1964>
  d05590:	38800017 	ldw	r2,0(r7)
  d05594:	39c00104 	addi	r7,r7,4
  d05598:	d9c14015 	stw	r7,1280(sp)
  d0559c:	d9814b17 	ldw	r6,1324(sp)
  d055a0:	d9c14017 	ldw	r7,1280(sp)
  d055a4:	11800015 	stw	r6,0(r2)
  d055a8:	003a7806 	br	d03f8c <___vfprintf_internal_r+0x170>
  d055ac:	d9014f17 	ldw	r4,1340(sp)
  d055b0:	b00b883a 	mov	r5,r22
  d055b4:	d9800c04 	addi	r6,sp,48
  d055b8:	0d03dc40 	call	d03dc4 <__sprint_r>
  d055bc:	103bcf1e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d055c0:	dc800e17 	ldw	r18,56(sp)
  d055c4:	dc400d17 	ldw	r17,52(sp)
  d055c8:	d8c01904 	addi	r3,sp,100
  d055cc:	d9014717 	ldw	r4,1308(sp)
  d055d0:	d9414117 	ldw	r5,1284(sp)
  d055d4:	8c400044 	addi	r17,r17,1
  d055d8:	9125883a 	add	r18,r18,r4
  d055dc:	008001c4 	movi	r2,7
  d055e0:	19400015 	stw	r5,0(r3)
  d055e4:	19000115 	stw	r4,4(r3)
  d055e8:	dc800e15 	stw	r18,56(sp)
  d055ec:	dc400d15 	stw	r17,52(sp)
  d055f0:	147cee16 	blt	r2,r17,d049ac <___vfprintf_internal_r+0xb90>
  d055f4:	18c00204 	addi	r3,r3,8
  d055f8:	003b8606 	br	d04414 <___vfprintf_internal_r+0x5f8>
  d055fc:	38c00017 	ldw	r3,0(r7)
  d05600:	39000204 	addi	r4,r7,8
  d05604:	d9014015 	stw	r4,1280(sp)
  d05608:	d8c14215 	stw	r3,1288(sp)
  d0560c:	39c00117 	ldw	r7,4(r7)
  d05610:	d9c14315 	stw	r7,1292(sp)
  d05614:	003e2006 	br	d04e98 <___vfprintf_internal_r+0x107c>
  d05618:	0005883a 	mov	r2,zero
  d0561c:	1409c83a 	sub	r4,r2,r16
  d05620:	1105803a 	cmpltu	r2,r2,r4
  d05624:	044bc83a 	sub	r5,zero,r17
  d05628:	2885c83a 	sub	r2,r5,r2
  d0562c:	2021883a 	mov	r16,r4
  d05630:	1023883a 	mov	r17,r2
  d05634:	01000044 	movi	r4,1
  d05638:	00800b44 	movi	r2,45
  d0563c:	d8800405 	stb	r2,16(sp)
  d05640:	003c8406 	br	d04854 <___vfprintf_internal_r+0xa38>
  d05644:	d9014f17 	ldw	r4,1340(sp)
  d05648:	b00b883a 	mov	r5,r22
  d0564c:	d9800c04 	addi	r6,sp,48
  d05650:	0d03dc40 	call	d03dc4 <__sprint_r>
  d05654:	103ba91e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d05658:	dc800e17 	ldw	r18,56(sp)
  d0565c:	dc400d17 	ldw	r17,52(sp)
  d05660:	d9000517 	ldw	r4,20(sp)
  d05664:	d9401904 	addi	r5,sp,100
  d05668:	003da706 	br	d04d08 <___vfprintf_internal_r+0xeec>
  d0566c:	d9014f17 	ldw	r4,1340(sp)
  d05670:	b00b883a 	mov	r5,r22
  d05674:	d9800c04 	addi	r6,sp,48
  d05678:	0d03dc40 	call	d03dc4 <__sprint_r>
  d0567c:	103b9f1e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d05680:	dc800e17 	ldw	r18,56(sp)
  d05684:	dc400d17 	ldw	r17,52(sp)
  d05688:	d9000517 	ldw	r4,20(sp)
  d0568c:	d8c01904 	addi	r3,sp,100
  d05690:	003d9106 	br	d04cd8 <___vfprintf_internal_r+0xebc>
  d05694:	07003474 	movhi	fp,209
  d05698:	e704b084 	addi	fp,fp,4802
  d0569c:	9425883a 	add	r18,r18,r16
  d056a0:	8c400044 	addi	r17,r17,1
  d056a4:	008001c4 	movi	r2,7
  d056a8:	1f000015 	stw	fp,0(r3)
  d056ac:	1c000115 	stw	r16,4(r3)
  d056b0:	dc800e15 	stw	r18,56(sp)
  d056b4:	dc400d15 	stw	r17,52(sp)
  d056b8:	147fbc16 	blt	r2,r17,d055ac <___vfprintf_internal_r+0x1790>
  d056bc:	18c00204 	addi	r3,r3,8
  d056c0:	003fc206 	br	d055cc <___vfprintf_internal_r+0x17b0>
  d056c4:	d9014f17 	ldw	r4,1340(sp)
  d056c8:	b00b883a 	mov	r5,r22
  d056cc:	d9800c04 	addi	r6,sp,48
  d056d0:	0d03dc40 	call	d03dc4 <__sprint_r>
  d056d4:	103b891e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d056d8:	dc800e17 	ldw	r18,56(sp)
  d056dc:	d9000517 	ldw	r4,20(sp)
  d056e0:	d8c01904 	addi	r3,sp,100
  d056e4:	003d0206 	br	d04af0 <___vfprintf_internal_r+0xcd4>
  d056e8:	07003474 	movhi	fp,209
  d056ec:	e704b084 	addi	fp,fp,4802
  d056f0:	003be406 	br	d04684 <___vfprintf_internal_r+0x868>
  d056f4:	00803474 	movhi	r2,209
  d056f8:	1084a004 	addi	r2,r2,4736
  d056fc:	d8814115 	stw	r2,1284(sp)
  d05700:	003df506 	br	d04ed8 <___vfprintf_internal_r+0x10bc>
  d05704:	d9014217 	ldw	r4,1288(sp)
  d05708:	d9414317 	ldw	r5,1292(sp)
  d0570c:	0d0a7fc0 	call	d0a7fc <__isnand>
  d05710:	10003926 	beq	r2,zero,d057f8 <___vfprintf_internal_r+0x19dc>
  d05714:	d9414d17 	ldw	r5,1332(sp)
  d05718:	008011c4 	movi	r2,71
  d0571c:	1140ce16 	blt	r2,r5,d05a58 <___vfprintf_internal_r+0x1c3c>
  d05720:	01803474 	movhi	r6,209
  d05724:	3184a104 	addi	r6,r6,4740
  d05728:	d9814115 	stw	r6,1284(sp)
  d0572c:	003dea06 	br	d04ed8 <___vfprintf_internal_r+0x10bc>
  d05730:	d9014c17 	ldw	r4,1328(sp)
  d05734:	bdc00044 	addi	r23,r23,1
  d05738:	b8c00007 	ldb	r3,0(r23)
  d0573c:	21000814 	ori	r4,r4,32
  d05740:	d9014c15 	stw	r4,1328(sp)
  d05744:	003a3406 	br	d04018 <___vfprintf_internal_r+0x1fc>
  d05748:	dcc14515 	stw	r19,1300(sp)
  d0574c:	98011016 	blt	r19,zero,d05b90 <___vfprintf_internal_r+0x1d74>
  d05750:	980f883a 	mov	r7,r19
  d05754:	d8014615 	stw	zero,1304(sp)
  d05758:	003c5206 	br	d048a4 <___vfprintf_internal_r+0xa88>
  d0575c:	d9014f17 	ldw	r4,1340(sp)
  d05760:	b00b883a 	mov	r5,r22
  d05764:	d9800c04 	addi	r6,sp,48
  d05768:	0d03dc40 	call	d03dc4 <__sprint_r>
  d0576c:	103b631e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d05770:	dc800e17 	ldw	r18,56(sp)
  d05774:	d9000517 	ldw	r4,20(sp)
  d05778:	d8c01904 	addi	r3,sp,100
  d0577c:	003f2e06 	br	d05438 <___vfprintf_internal_r+0x161c>
  d05780:	d8c14c17 	ldw	r3,1328(sp)
  d05784:	1880100c 	andi	r2,r3,64
  d05788:	1000a026 	beq	r2,zero,d05a0c <___vfprintf_internal_r+0x1bf0>
  d0578c:	38800017 	ldw	r2,0(r7)
  d05790:	39c00104 	addi	r7,r7,4
  d05794:	d9c14015 	stw	r7,1280(sp)
  d05798:	d9014b17 	ldw	r4,1324(sp)
  d0579c:	d9c14017 	ldw	r7,1280(sp)
  d057a0:	1100000d 	sth	r4,0(r2)
  d057a4:	0039f906 	br	d03f8c <___vfprintf_internal_r+0x170>
  d057a8:	d9014f17 	ldw	r4,1340(sp)
  d057ac:	b00b883a 	mov	r5,r22
  d057b0:	d9800c04 	addi	r6,sp,48
  d057b4:	0d03dc40 	call	d03dc4 <__sprint_r>
  d057b8:	103b501e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d057bc:	dc800e17 	ldw	r18,56(sp)
  d057c0:	dc400d17 	ldw	r17,52(sp)
  d057c4:	d9000517 	ldw	r4,20(sp)
  d057c8:	d8c01904 	addi	r3,sp,100
  d057cc:	003f2d06 	br	d05484 <___vfprintf_internal_r+0x1668>
  d057d0:	00800184 	movi	r2,6
  d057d4:	14c09a36 	bltu	r2,r19,d05a40 <___vfprintf_internal_r+0x1c24>
  d057d8:	dcc14515 	stw	r19,1300(sp)
  d057dc:	9800010e 	bge	r19,zero,d057e4 <___vfprintf_internal_r+0x19c8>
  d057e0:	d8014515 	stw	zero,1300(sp)
  d057e4:	00803474 	movhi	r2,209
  d057e8:	1084a304 	addi	r2,r2,4748
  d057ec:	980f883a 	mov	r7,r19
  d057f0:	d8814115 	stw	r2,1284(sp)
  d057f4:	003a7806 	br	d041d8 <___vfprintf_internal_r+0x3bc>
  d057f8:	00bfffc4 	movi	r2,-1
  d057fc:	9880e226 	beq	r19,r2,d05b88 <___vfprintf_internal_r+0x1d6c>
  d05800:	d9414d17 	ldw	r5,1332(sp)
  d05804:	008019c4 	movi	r2,103
  d05808:	2880dc26 	beq	r5,r2,d05b7c <___vfprintf_internal_r+0x1d60>
  d0580c:	008011c4 	movi	r2,71
  d05810:	2880da26 	beq	r5,r2,d05b7c <___vfprintf_internal_r+0x1d60>
  d05814:	d9414c17 	ldw	r5,1328(sp)
  d05818:	d9014317 	ldw	r4,1292(sp)
  d0581c:	d9814217 	ldw	r6,1288(sp)
  d05820:	29404014 	ori	r5,r5,256
  d05824:	d9414c15 	stw	r5,1328(sp)
  d05828:	2000cc16 	blt	r4,zero,d05b5c <___vfprintf_internal_r+0x1d40>
  d0582c:	3021883a 	mov	r16,r6
  d05830:	2023883a 	mov	r17,r4
  d05834:	0039883a 	mov	fp,zero
  d05838:	d9414d17 	ldw	r5,1332(sp)
  d0583c:	00801984 	movi	r2,102
  d05840:	2880b726 	beq	r5,r2,d05b20 <___vfprintf_internal_r+0x1d04>
  d05844:	00801184 	movi	r2,70
  d05848:	2880b526 	beq	r5,r2,d05b20 <___vfprintf_internal_r+0x1d04>
  d0584c:	00801944 	movi	r2,101
  d05850:	2880c826 	beq	r5,r2,d05b74 <___vfprintf_internal_r+0x1d58>
  d05854:	00801144 	movi	r2,69
  d05858:	2880c626 	beq	r5,r2,d05b74 <___vfprintf_internal_r+0x1d58>
  d0585c:	9829883a 	mov	r20,r19
  d05860:	d9014f17 	ldw	r4,1340(sp)
  d05864:	d8800504 	addi	r2,sp,20
  d05868:	880d883a 	mov	r6,r17
  d0586c:	d8800115 	stw	r2,4(sp)
  d05870:	d8c00604 	addi	r3,sp,24
  d05874:	d8800704 	addi	r2,sp,28
  d05878:	800b883a 	mov	r5,r16
  d0587c:	01c00084 	movi	r7,2
  d05880:	d8c00215 	stw	r3,8(sp)
  d05884:	d8800315 	stw	r2,12(sp)
  d05888:	dd000015 	stw	r20,0(sp)
  d0588c:	0d060400 	call	d06040 <_dtoa_r>
  d05890:	d9814d17 	ldw	r6,1332(sp)
  d05894:	d8814115 	stw	r2,1284(sp)
  d05898:	008019c4 	movi	r2,103
  d0589c:	30809526 	beq	r6,r2,d05af4 <___vfprintf_internal_r+0x1cd8>
  d058a0:	d8c14d17 	ldw	r3,1332(sp)
  d058a4:	008011c4 	movi	r2,71
  d058a8:	18809226 	beq	r3,r2,d05af4 <___vfprintf_internal_r+0x1cd8>
  d058ac:	d9414117 	ldw	r5,1284(sp)
  d058b0:	d9814d17 	ldw	r6,1332(sp)
  d058b4:	00801984 	movi	r2,102
  d058b8:	2d25883a 	add	r18,r5,r20
  d058bc:	30808626 	beq	r6,r2,d05ad8 <___vfprintf_internal_r+0x1cbc>
  d058c0:	00801184 	movi	r2,70
  d058c4:	30808426 	beq	r6,r2,d05ad8 <___vfprintf_internal_r+0x1cbc>
  d058c8:	000d883a 	mov	r6,zero
  d058cc:	000f883a 	mov	r7,zero
  d058d0:	880b883a 	mov	r5,r17
  d058d4:	8009883a 	mov	r4,r16
  d058d8:	0d0be880 	call	d0be88 <__eqdf2>
  d058dc:	1000751e 	bne	r2,zero,d05ab4 <___vfprintf_internal_r+0x1c98>
  d058e0:	9005883a 	mov	r2,r18
  d058e4:	dc800715 	stw	r18,28(sp)
  d058e8:	d9014117 	ldw	r4,1284(sp)
  d058ec:	d9414d17 	ldw	r5,1332(sp)
  d058f0:	00c019c4 	movi	r3,103
  d058f4:	1125c83a 	sub	r18,r2,r4
  d058f8:	28c06826 	beq	r5,r3,d05a9c <___vfprintf_internal_r+0x1c80>
  d058fc:	008011c4 	movi	r2,71
  d05900:	28806626 	beq	r5,r2,d05a9c <___vfprintf_internal_r+0x1c80>
  d05904:	d9000517 	ldw	r4,20(sp)
  d05908:	d8c14d17 	ldw	r3,1332(sp)
  d0590c:	00801944 	movi	r2,101
  d05910:	10c05516 	blt	r2,r3,d05a68 <___vfprintf_internal_r+0x1c4c>
  d05914:	213fffc4 	addi	r4,r4,-1
  d05918:	d9000515 	stw	r4,20(sp)
  d0591c:	d8c00805 	stb	r3,32(sp)
  d05920:	2021883a 	mov	r16,r4
  d05924:	2000c116 	blt	r4,zero,d05c2c <___vfprintf_internal_r+0x1e10>
  d05928:	00800ac4 	movi	r2,43
  d0592c:	d8800845 	stb	r2,33(sp)
  d05930:	00800244 	movi	r2,9
  d05934:	1400af0e 	bge	r2,r16,d05bf4 <___vfprintf_internal_r+0x1dd8>
  d05938:	1027883a 	mov	r19,r2
  d0593c:	dc400b84 	addi	r17,sp,46
  d05940:	8009883a 	mov	r4,r16
  d05944:	01400284 	movi	r5,10
  d05948:	0d0c4e80 	call	d0c4e8 <__modsi3>
  d0594c:	10800c04 	addi	r2,r2,48
  d05950:	8c7fffc4 	addi	r17,r17,-1
  d05954:	8009883a 	mov	r4,r16
  d05958:	01400284 	movi	r5,10
  d0595c:	88800005 	stb	r2,0(r17)
  d05960:	0d0c4880 	call	d0c488 <__divsi3>
  d05964:	1021883a 	mov	r16,r2
  d05968:	98bff516 	blt	r19,r2,d05940 <___vfprintf_internal_r+0x1b24>
  d0596c:	10c00c04 	addi	r3,r2,48
  d05970:	d88009c4 	addi	r2,sp,39
  d05974:	108001c4 	addi	r2,r2,7
  d05978:	897fffc4 	addi	r5,r17,-1
  d0597c:	88ffffc5 	stb	r3,-1(r17)
  d05980:	2880a72e 	bgeu	r5,r2,d05c20 <___vfprintf_internal_r+0x1e04>
  d05984:	1009883a 	mov	r4,r2
  d05988:	d9800804 	addi	r6,sp,32
  d0598c:	d8c00884 	addi	r3,sp,34
  d05990:	28800003 	ldbu	r2,0(r5)
  d05994:	29400044 	addi	r5,r5,1
  d05998:	18800005 	stb	r2,0(r3)
  d0599c:	18c00044 	addi	r3,r3,1
  d059a0:	293ffb36 	bltu	r5,r4,d05990 <___vfprintf_internal_r+0x1b74>
  d059a4:	1987c83a 	sub	r3,r3,r6
  d059a8:	00800044 	movi	r2,1
  d059ac:	d8c14815 	stw	r3,1312(sp)
  d059b0:	90cf883a 	add	r7,r18,r3
  d059b4:	1480960e 	bge	r2,r18,d05c10 <___vfprintf_internal_r+0x1df4>
  d059b8:	39c00044 	addi	r7,r7,1
  d059bc:	d9c14515 	stw	r7,1300(sp)
  d059c0:	38003416 	blt	r7,zero,d05a94 <___vfprintf_internal_r+0x1c78>
  d059c4:	e0803fcc 	andi	r2,fp,255
  d059c8:	1080201c 	xori	r2,r2,128
  d059cc:	10bfe004 	addi	r2,r2,-128
  d059d0:	10004e26 	beq	r2,zero,d05b0c <___vfprintf_internal_r+0x1cf0>
  d059d4:	00800b44 	movi	r2,45
  d059d8:	dc814715 	stw	r18,1308(sp)
  d059dc:	d8014615 	stw	zero,1304(sp)
  d059e0:	d8800405 	stb	r2,16(sp)
  d059e4:	003bb106 	br	d048ac <___vfprintf_internal_r+0xa90>
  d059e8:	00800b44 	movi	r2,45
  d059ec:	d8800405 	stb	r2,16(sp)
  d059f0:	003d3306 	br	d04ec0 <___vfprintf_internal_r+0x10a4>
  d059f4:	d9014f17 	ldw	r4,1340(sp)
  d059f8:	b00b883a 	mov	r5,r22
  d059fc:	d9800c04 	addi	r6,sp,48
  d05a00:	0d03dc40 	call	d03dc4 <__sprint_r>
  d05a04:	103abd1e 	bne	r2,zero,d044fc <___vfprintf_internal_r+0x6e0>
  d05a08:	003abb06 	br	d044f8 <___vfprintf_internal_r+0x6dc>
  d05a0c:	38800017 	ldw	r2,0(r7)
  d05a10:	39c00104 	addi	r7,r7,4
  d05a14:	d9c14015 	stw	r7,1280(sp)
  d05a18:	d9414b17 	ldw	r5,1324(sp)
  d05a1c:	d9c14017 	ldw	r7,1280(sp)
  d05a20:	11400015 	stw	r5,0(r2)
  d05a24:	00395906 	br	d03f8c <___vfprintf_internal_r+0x170>
  d05a28:	980f883a 	mov	r7,r19
  d05a2c:	dcc14515 	stw	r19,1300(sp)
  d05a30:	d8014615 	stw	zero,1304(sp)
  d05a34:	003b9b06 	br	d048a4 <___vfprintf_internal_r+0xa88>
  d05a38:	0027883a 	mov	r19,zero
  d05a3c:	00397806 	br	d04020 <___vfprintf_internal_r+0x204>
  d05a40:	00c03474 	movhi	r3,209
  d05a44:	18c4a304 	addi	r3,r3,4748
  d05a48:	100f883a 	mov	r7,r2
  d05a4c:	d8814515 	stw	r2,1300(sp)
  d05a50:	d8c14115 	stw	r3,1284(sp)
  d05a54:	0039e006 	br	d041d8 <___vfprintf_internal_r+0x3bc>
  d05a58:	00803474 	movhi	r2,209
  d05a5c:	1084a204 	addi	r2,r2,4744
  d05a60:	d8814115 	stw	r2,1284(sp)
  d05a64:	003d1c06 	br	d04ed8 <___vfprintf_internal_r+0x10bc>
  d05a68:	d9414d17 	ldw	r5,1332(sp)
  d05a6c:	00801984 	movi	r2,102
  d05a70:	28804926 	beq	r5,r2,d05b98 <___vfprintf_internal_r+0x1d7c>
  d05a74:	200f883a 	mov	r7,r4
  d05a78:	24805716 	blt	r4,r18,d05bd8 <___vfprintf_internal_r+0x1dbc>
  d05a7c:	d9414c17 	ldw	r5,1328(sp)
  d05a80:	2880004c 	andi	r2,r5,1
  d05a84:	10000126 	beq	r2,zero,d05a8c <___vfprintf_internal_r+0x1c70>
  d05a88:	21c00044 	addi	r7,r4,1
  d05a8c:	d9c14515 	stw	r7,1300(sp)
  d05a90:	383fcc0e 	bge	r7,zero,d059c4 <___vfprintf_internal_r+0x1ba8>
  d05a94:	d8014515 	stw	zero,1300(sp)
  d05a98:	003fca06 	br	d059c4 <___vfprintf_internal_r+0x1ba8>
  d05a9c:	d9000517 	ldw	r4,20(sp)
  d05aa0:	00bfff04 	movi	r2,-4
  d05aa4:	1100480e 	bge	r2,r4,d05bc8 <___vfprintf_internal_r+0x1dac>
  d05aa8:	99004716 	blt	r19,r4,d05bc8 <___vfprintf_internal_r+0x1dac>
  d05aac:	d8c14d15 	stw	r3,1332(sp)
  d05ab0:	003ff006 	br	d05a74 <___vfprintf_internal_r+0x1c58>
  d05ab4:	d8800717 	ldw	r2,28(sp)
  d05ab8:	14bf8b2e 	bgeu	r2,r18,d058e8 <___vfprintf_internal_r+0x1acc>
  d05abc:	9007883a 	mov	r3,r18
  d05ac0:	01000c04 	movi	r4,48
  d05ac4:	11000005 	stb	r4,0(r2)
  d05ac8:	10800044 	addi	r2,r2,1
  d05acc:	d8800715 	stw	r2,28(sp)
  d05ad0:	18bffc1e 	bne	r3,r2,d05ac4 <___vfprintf_internal_r+0x1ca8>
  d05ad4:	003f8406 	br	d058e8 <___vfprintf_internal_r+0x1acc>
  d05ad8:	d8814117 	ldw	r2,1284(sp)
  d05adc:	10c00007 	ldb	r3,0(r2)
  d05ae0:	00800c04 	movi	r2,48
  d05ae4:	18805b26 	beq	r3,r2,d05c54 <___vfprintf_internal_r+0x1e38>
  d05ae8:	d9000517 	ldw	r4,20(sp)
  d05aec:	9125883a 	add	r18,r18,r4
  d05af0:	003f7506 	br	d058c8 <___vfprintf_internal_r+0x1aac>
  d05af4:	d9014c17 	ldw	r4,1328(sp)
  d05af8:	2080004c 	andi	r2,r4,1
  d05afc:	1005003a 	cmpeq	r2,r2,zero
  d05b00:	103f6a26 	beq	r2,zero,d058ac <___vfprintf_internal_r+0x1a90>
  d05b04:	d8800717 	ldw	r2,28(sp)
  d05b08:	003f7706 	br	d058e8 <___vfprintf_internal_r+0x1acc>
  d05b0c:	d9c14515 	stw	r7,1300(sp)
  d05b10:	38004d16 	blt	r7,zero,d05c48 <___vfprintf_internal_r+0x1e2c>
  d05b14:	dc814715 	stw	r18,1308(sp)
  d05b18:	d8014615 	stw	zero,1304(sp)
  d05b1c:	003b6106 	br	d048a4 <___vfprintf_internal_r+0xa88>
  d05b20:	d9014f17 	ldw	r4,1340(sp)
  d05b24:	d8800504 	addi	r2,sp,20
  d05b28:	d8800115 	stw	r2,4(sp)
  d05b2c:	d8c00604 	addi	r3,sp,24
  d05b30:	d8800704 	addi	r2,sp,28
  d05b34:	800b883a 	mov	r5,r16
  d05b38:	880d883a 	mov	r6,r17
  d05b3c:	01c000c4 	movi	r7,3
  d05b40:	d8c00215 	stw	r3,8(sp)
  d05b44:	d8800315 	stw	r2,12(sp)
  d05b48:	dcc00015 	stw	r19,0(sp)
  d05b4c:	9829883a 	mov	r20,r19
  d05b50:	0d060400 	call	d06040 <_dtoa_r>
  d05b54:	d8814115 	stw	r2,1284(sp)
  d05b58:	003f5106 	br	d058a0 <___vfprintf_internal_r+0x1a84>
  d05b5c:	d8c14217 	ldw	r3,1288(sp)
  d05b60:	d9014317 	ldw	r4,1292(sp)
  d05b64:	07000b44 	movi	fp,45
  d05b68:	1821883a 	mov	r16,r3
  d05b6c:	2460003c 	xorhi	r17,r4,32768
  d05b70:	003f3106 	br	d05838 <___vfprintf_internal_r+0x1a1c>
  d05b74:	9d000044 	addi	r20,r19,1
  d05b78:	003f3906 	br	d05860 <___vfprintf_internal_r+0x1a44>
  d05b7c:	983f251e 	bne	r19,zero,d05814 <___vfprintf_internal_r+0x19f8>
  d05b80:	04c00044 	movi	r19,1
  d05b84:	003f2306 	br	d05814 <___vfprintf_internal_r+0x19f8>
  d05b88:	04c00184 	movi	r19,6
  d05b8c:	003f2106 	br	d05814 <___vfprintf_internal_r+0x19f8>
  d05b90:	d8014515 	stw	zero,1300(sp)
  d05b94:	003eee06 	br	d05750 <___vfprintf_internal_r+0x1934>
  d05b98:	200f883a 	mov	r7,r4
  d05b9c:	0100370e 	bge	zero,r4,d05c7c <___vfprintf_internal_r+0x1e60>
  d05ba0:	9800031e 	bne	r19,zero,d05bb0 <___vfprintf_internal_r+0x1d94>
  d05ba4:	d9814c17 	ldw	r6,1328(sp)
  d05ba8:	3080004c 	andi	r2,r6,1
  d05bac:	103fb726 	beq	r2,zero,d05a8c <___vfprintf_internal_r+0x1c70>
  d05bb0:	20800044 	addi	r2,r4,1
  d05bb4:	98a7883a 	add	r19,r19,r2
  d05bb8:	dcc14515 	stw	r19,1300(sp)
  d05bbc:	980f883a 	mov	r7,r19
  d05bc0:	983f800e 	bge	r19,zero,d059c4 <___vfprintf_internal_r+0x1ba8>
  d05bc4:	003fb306 	br	d05a94 <___vfprintf_internal_r+0x1c78>
  d05bc8:	d9814d17 	ldw	r6,1332(sp)
  d05bcc:	31bfff84 	addi	r6,r6,-2
  d05bd0:	d9814d15 	stw	r6,1332(sp)
  d05bd4:	003f4c06 	br	d05908 <___vfprintf_internal_r+0x1aec>
  d05bd8:	0100180e 	bge	zero,r4,d05c3c <___vfprintf_internal_r+0x1e20>
  d05bdc:	00800044 	movi	r2,1
  d05be0:	1485883a 	add	r2,r2,r18
  d05be4:	d8814515 	stw	r2,1300(sp)
  d05be8:	100f883a 	mov	r7,r2
  d05bec:	103f750e 	bge	r2,zero,d059c4 <___vfprintf_internal_r+0x1ba8>
  d05bf0:	003fa806 	br	d05a94 <___vfprintf_internal_r+0x1c78>
  d05bf4:	80c00c04 	addi	r3,r16,48
  d05bf8:	00800c04 	movi	r2,48
  d05bfc:	d8c008c5 	stb	r3,35(sp)
  d05c00:	d9800804 	addi	r6,sp,32
  d05c04:	d8c00904 	addi	r3,sp,36
  d05c08:	d8800885 	stb	r2,34(sp)
  d05c0c:	003f6506 	br	d059a4 <___vfprintf_internal_r+0x1b88>
  d05c10:	d9014c17 	ldw	r4,1328(sp)
  d05c14:	2084703a 	and	r2,r4,r2
  d05c18:	103f9c26 	beq	r2,zero,d05a8c <___vfprintf_internal_r+0x1c70>
  d05c1c:	003f6606 	br	d059b8 <___vfprintf_internal_r+0x1b9c>
  d05c20:	d9800804 	addi	r6,sp,32
  d05c24:	d8c00884 	addi	r3,sp,34
  d05c28:	003f5e06 	br	d059a4 <___vfprintf_internal_r+0x1b88>
  d05c2c:	00800b44 	movi	r2,45
  d05c30:	0121c83a 	sub	r16,zero,r4
  d05c34:	d8800845 	stb	r2,33(sp)
  d05c38:	003f3d06 	br	d05930 <___vfprintf_internal_r+0x1b14>
  d05c3c:	00800084 	movi	r2,2
  d05c40:	1105c83a 	sub	r2,r2,r4
  d05c44:	003fe606 	br	d05be0 <___vfprintf_internal_r+0x1dc4>
  d05c48:	d8014515 	stw	zero,1300(sp)
  d05c4c:	dc814715 	stw	r18,1308(sp)
  d05c50:	003fb106 	br	d05b18 <___vfprintf_internal_r+0x1cfc>
  d05c54:	000d883a 	mov	r6,zero
  d05c58:	000f883a 	mov	r7,zero
  d05c5c:	8009883a 	mov	r4,r16
  d05c60:	880b883a 	mov	r5,r17
  d05c64:	0d0317c0 	call	d0317c <__nedf2>
  d05c68:	103f9f26 	beq	r2,zero,d05ae8 <___vfprintf_internal_r+0x1ccc>
  d05c6c:	00800044 	movi	r2,1
  d05c70:	1509c83a 	sub	r4,r2,r20
  d05c74:	d9000515 	stw	r4,20(sp)
  d05c78:	003f9b06 	br	d05ae8 <___vfprintf_internal_r+0x1ccc>
  d05c7c:	98000d1e 	bne	r19,zero,d05cb4 <___vfprintf_internal_r+0x1e98>
  d05c80:	d8c14c17 	ldw	r3,1328(sp)
  d05c84:	1880004c 	andi	r2,r3,1
  d05c88:	10000a1e 	bne	r2,zero,d05cb4 <___vfprintf_internal_r+0x1e98>
  d05c8c:	01000044 	movi	r4,1
  d05c90:	200f883a 	mov	r7,r4
  d05c94:	d9014515 	stw	r4,1300(sp)
  d05c98:	003f4a06 	br	d059c4 <___vfprintf_internal_r+0x1ba8>
  d05c9c:	3cc00017 	ldw	r19,0(r7)
  d05ca0:	39c00104 	addi	r7,r7,4
  d05ca4:	983d0e0e 	bge	r19,zero,d050e0 <___vfprintf_internal_r+0x12c4>
  d05ca8:	b8c00007 	ldb	r3,0(r23)
  d05cac:	04ffffc4 	movi	r19,-1
  d05cb0:	0038d906 	br	d04018 <___vfprintf_internal_r+0x1fc>
  d05cb4:	9cc00084 	addi	r19,r19,2
  d05cb8:	dcc14515 	stw	r19,1300(sp)
  d05cbc:	980f883a 	mov	r7,r19
  d05cc0:	983f400e 	bge	r19,zero,d059c4 <___vfprintf_internal_r+0x1ba8>
  d05cc4:	003f7306 	br	d05a94 <___vfprintf_internal_r+0x1c78>

00d05cc8 <__vfprintf_internal>:
  d05cc8:	00803474 	movhi	r2,209
  d05ccc:	108c4a04 	addi	r2,r2,12584
  d05cd0:	2013883a 	mov	r9,r4
  d05cd4:	11000017 	ldw	r4,0(r2)
  d05cd8:	2805883a 	mov	r2,r5
  d05cdc:	300f883a 	mov	r7,r6
  d05ce0:	480b883a 	mov	r5,r9
  d05ce4:	100d883a 	mov	r6,r2
  d05ce8:	0d03e1c1 	jmpi	d03e1c <___vfprintf_internal_r>

00d05cec <__swsetup_r>:
  d05cec:	00803474 	movhi	r2,209
  d05cf0:	108c4a04 	addi	r2,r2,12584
  d05cf4:	10c00017 	ldw	r3,0(r2)
  d05cf8:	defffd04 	addi	sp,sp,-12
  d05cfc:	dc400115 	stw	r17,4(sp)
  d05d00:	dc000015 	stw	r16,0(sp)
  d05d04:	dfc00215 	stw	ra,8(sp)
  d05d08:	2023883a 	mov	r17,r4
  d05d0c:	2821883a 	mov	r16,r5
  d05d10:	18000226 	beq	r3,zero,d05d1c <__swsetup_r+0x30>
  d05d14:	18800e17 	ldw	r2,56(r3)
  d05d18:	10001f26 	beq	r2,zero,d05d98 <__swsetup_r+0xac>
  d05d1c:	8100030b 	ldhu	r4,12(r16)
  d05d20:	2080020c 	andi	r2,r4,8
  d05d24:	10002826 	beq	r2,zero,d05dc8 <__swsetup_r+0xdc>
  d05d28:	81400417 	ldw	r5,16(r16)
  d05d2c:	28001d26 	beq	r5,zero,d05da4 <__swsetup_r+0xb8>
  d05d30:	2080004c 	andi	r2,r4,1
  d05d34:	1005003a 	cmpeq	r2,r2,zero
  d05d38:	10000b26 	beq	r2,zero,d05d68 <__swsetup_r+0x7c>
  d05d3c:	2080008c 	andi	r2,r4,2
  d05d40:	10001226 	beq	r2,zero,d05d8c <__swsetup_r+0xa0>
  d05d44:	0005883a 	mov	r2,zero
  d05d48:	80800215 	stw	r2,8(r16)
  d05d4c:	28000b26 	beq	r5,zero,d05d7c <__swsetup_r+0x90>
  d05d50:	0005883a 	mov	r2,zero
  d05d54:	dfc00217 	ldw	ra,8(sp)
  d05d58:	dc400117 	ldw	r17,4(sp)
  d05d5c:	dc000017 	ldw	r16,0(sp)
  d05d60:	dec00304 	addi	sp,sp,12
  d05d64:	f800283a 	ret
  d05d68:	80800517 	ldw	r2,20(r16)
  d05d6c:	80000215 	stw	zero,8(r16)
  d05d70:	0085c83a 	sub	r2,zero,r2
  d05d74:	80800615 	stw	r2,24(r16)
  d05d78:	283ff51e 	bne	r5,zero,d05d50 <__swsetup_r+0x64>
  d05d7c:	2080200c 	andi	r2,r4,128
  d05d80:	103ff326 	beq	r2,zero,d05d50 <__swsetup_r+0x64>
  d05d84:	00bfffc4 	movi	r2,-1
  d05d88:	003ff206 	br	d05d54 <__swsetup_r+0x68>
  d05d8c:	80800517 	ldw	r2,20(r16)
  d05d90:	80800215 	stw	r2,8(r16)
  d05d94:	003fed06 	br	d05d4c <__swsetup_r+0x60>
  d05d98:	1809883a 	mov	r4,r3
  d05d9c:	0d0788c0 	call	d0788c <__sinit>
  d05da0:	003fde06 	br	d05d1c <__swsetup_r+0x30>
  d05da4:	20c0a00c 	andi	r3,r4,640
  d05da8:	00808004 	movi	r2,512
  d05dac:	18bfe026 	beq	r3,r2,d05d30 <__swsetup_r+0x44>
  d05db0:	8809883a 	mov	r4,r17
  d05db4:	800b883a 	mov	r5,r16
  d05db8:	0d086040 	call	d08604 <__smakebuf_r>
  d05dbc:	8100030b 	ldhu	r4,12(r16)
  d05dc0:	81400417 	ldw	r5,16(r16)
  d05dc4:	003fda06 	br	d05d30 <__swsetup_r+0x44>
  d05dc8:	2080040c 	andi	r2,r4,16
  d05dcc:	103fed26 	beq	r2,zero,d05d84 <__swsetup_r+0x98>
  d05dd0:	2080010c 	andi	r2,r4,4
  d05dd4:	10001226 	beq	r2,zero,d05e20 <__swsetup_r+0x134>
  d05dd8:	81400c17 	ldw	r5,48(r16)
  d05ddc:	28000526 	beq	r5,zero,d05df4 <__swsetup_r+0x108>
  d05de0:	80801004 	addi	r2,r16,64
  d05de4:	28800226 	beq	r5,r2,d05df0 <__swsetup_r+0x104>
  d05de8:	8809883a 	mov	r4,r17
  d05dec:	0d07c100 	call	d07c10 <_free_r>
  d05df0:	80000c15 	stw	zero,48(r16)
  d05df4:	8080030b 	ldhu	r2,12(r16)
  d05df8:	81400417 	ldw	r5,16(r16)
  d05dfc:	80000115 	stw	zero,4(r16)
  d05e00:	10bff6cc 	andi	r2,r2,65499
  d05e04:	8080030d 	sth	r2,12(r16)
  d05e08:	81400015 	stw	r5,0(r16)
  d05e0c:	8080030b 	ldhu	r2,12(r16)
  d05e10:	10800214 	ori	r2,r2,8
  d05e14:	113fffcc 	andi	r4,r2,65535
  d05e18:	8080030d 	sth	r2,12(r16)
  d05e1c:	003fc306 	br	d05d2c <__swsetup_r+0x40>
  d05e20:	81400417 	ldw	r5,16(r16)
  d05e24:	003ff906 	br	d05e0c <__swsetup_r+0x120>

00d05e28 <quorem>:
  d05e28:	28c00417 	ldw	r3,16(r5)
  d05e2c:	20800417 	ldw	r2,16(r4)
  d05e30:	defff604 	addi	sp,sp,-40
  d05e34:	ddc00715 	stw	r23,28(sp)
  d05e38:	dd400515 	stw	r21,20(sp)
  d05e3c:	dfc00915 	stw	ra,36(sp)
  d05e40:	df000815 	stw	fp,32(sp)
  d05e44:	dd800615 	stw	r22,24(sp)
  d05e48:	dd000415 	stw	r20,16(sp)
  d05e4c:	dcc00315 	stw	r19,12(sp)
  d05e50:	dc800215 	stw	r18,8(sp)
  d05e54:	dc400115 	stw	r17,4(sp)
  d05e58:	dc000015 	stw	r16,0(sp)
  d05e5c:	202f883a 	mov	r23,r4
  d05e60:	282b883a 	mov	r21,r5
  d05e64:	10c07416 	blt	r2,r3,d06038 <quorem+0x210>
  d05e68:	1c7fffc4 	addi	r17,r3,-1
  d05e6c:	8c45883a 	add	r2,r17,r17
  d05e70:	1085883a 	add	r2,r2,r2
  d05e74:	2c000504 	addi	r16,r5,20
  d05e78:	24c00504 	addi	r19,r4,20
  d05e7c:	14ed883a 	add	r22,r2,r19
  d05e80:	80a5883a 	add	r18,r16,r2
  d05e84:	b7000017 	ldw	fp,0(r22)
  d05e88:	91400017 	ldw	r5,0(r18)
  d05e8c:	e009883a 	mov	r4,fp
  d05e90:	29400044 	addi	r5,r5,1
  d05e94:	0d0c5480 	call	d0c548 <__udivsi3>
  d05e98:	1029883a 	mov	r20,r2
  d05e9c:	10003c1e 	bne	r2,zero,d05f90 <quorem+0x168>
  d05ea0:	a80b883a 	mov	r5,r21
  d05ea4:	b809883a 	mov	r4,r23
  d05ea8:	0d093300 	call	d09330 <__mcmp>
  d05eac:	10002b16 	blt	r2,zero,d05f5c <quorem+0x134>
  d05eb0:	a5000044 	addi	r20,r20,1
  d05eb4:	980f883a 	mov	r7,r19
  d05eb8:	0011883a 	mov	r8,zero
  d05ebc:	0009883a 	mov	r4,zero
  d05ec0:	81400017 	ldw	r5,0(r16)
  d05ec4:	38c00017 	ldw	r3,0(r7)
  d05ec8:	84000104 	addi	r16,r16,4
  d05ecc:	28bfffcc 	andi	r2,r5,65535
  d05ed0:	2085883a 	add	r2,r4,r2
  d05ed4:	11bfffcc 	andi	r6,r2,65535
  d05ed8:	193fffcc 	andi	r4,r3,65535
  d05edc:	1004d43a 	srli	r2,r2,16
  d05ee0:	280ad43a 	srli	r5,r5,16
  d05ee4:	2189c83a 	sub	r4,r4,r6
  d05ee8:	2209883a 	add	r4,r4,r8
  d05eec:	1806d43a 	srli	r3,r3,16
  d05ef0:	288b883a 	add	r5,r5,r2
  d05ef4:	200dd43a 	srai	r6,r4,16
  d05ef8:	28bfffcc 	andi	r2,r5,65535
  d05efc:	1887c83a 	sub	r3,r3,r2
  d05f00:	1987883a 	add	r3,r3,r6
  d05f04:	3900000d 	sth	r4,0(r7)
  d05f08:	38c0008d 	sth	r3,2(r7)
  d05f0c:	2808d43a 	srli	r4,r5,16
  d05f10:	39c00104 	addi	r7,r7,4
  d05f14:	1811d43a 	srai	r8,r3,16
  d05f18:	943fe92e 	bgeu	r18,r16,d05ec0 <quorem+0x98>
  d05f1c:	8c45883a 	add	r2,r17,r17
  d05f20:	1085883a 	add	r2,r2,r2
  d05f24:	9885883a 	add	r2,r19,r2
  d05f28:	10c00017 	ldw	r3,0(r2)
  d05f2c:	18000b1e 	bne	r3,zero,d05f5c <quorem+0x134>
  d05f30:	113fff04 	addi	r4,r2,-4
  d05f34:	9900082e 	bgeu	r19,r4,d05f58 <quorem+0x130>
  d05f38:	10bfff17 	ldw	r2,-4(r2)
  d05f3c:	10000326 	beq	r2,zero,d05f4c <quorem+0x124>
  d05f40:	00000506 	br	d05f58 <quorem+0x130>
  d05f44:	20800017 	ldw	r2,0(r4)
  d05f48:	1000031e 	bne	r2,zero,d05f58 <quorem+0x130>
  d05f4c:	213fff04 	addi	r4,r4,-4
  d05f50:	8c7fffc4 	addi	r17,r17,-1
  d05f54:	993ffb36 	bltu	r19,r4,d05f44 <quorem+0x11c>
  d05f58:	bc400415 	stw	r17,16(r23)
  d05f5c:	a005883a 	mov	r2,r20
  d05f60:	dfc00917 	ldw	ra,36(sp)
  d05f64:	df000817 	ldw	fp,32(sp)
  d05f68:	ddc00717 	ldw	r23,28(sp)
  d05f6c:	dd800617 	ldw	r22,24(sp)
  d05f70:	dd400517 	ldw	r21,20(sp)
  d05f74:	dd000417 	ldw	r20,16(sp)
  d05f78:	dcc00317 	ldw	r19,12(sp)
  d05f7c:	dc800217 	ldw	r18,8(sp)
  d05f80:	dc400117 	ldw	r17,4(sp)
  d05f84:	dc000017 	ldw	r16,0(sp)
  d05f88:	dec00a04 	addi	sp,sp,40
  d05f8c:	f800283a 	ret
  d05f90:	980f883a 	mov	r7,r19
  d05f94:	8011883a 	mov	r8,r16
  d05f98:	0013883a 	mov	r9,zero
  d05f9c:	000d883a 	mov	r6,zero
  d05fa0:	40c00017 	ldw	r3,0(r8)
  d05fa4:	39000017 	ldw	r4,0(r7)
  d05fa8:	42000104 	addi	r8,r8,4
  d05fac:	18bfffcc 	andi	r2,r3,65535
  d05fb0:	a085383a 	mul	r2,r20,r2
  d05fb4:	1806d43a 	srli	r3,r3,16
  d05fb8:	217fffcc 	andi	r5,r4,65535
  d05fbc:	3085883a 	add	r2,r6,r2
  d05fc0:	11bfffcc 	andi	r6,r2,65535
  d05fc4:	a0c7383a 	mul	r3,r20,r3
  d05fc8:	1004d43a 	srli	r2,r2,16
  d05fcc:	298bc83a 	sub	r5,r5,r6
  d05fd0:	2a4b883a 	add	r5,r5,r9
  d05fd4:	2008d43a 	srli	r4,r4,16
  d05fd8:	1887883a 	add	r3,r3,r2
  d05fdc:	280dd43a 	srai	r6,r5,16
  d05fe0:	18bfffcc 	andi	r2,r3,65535
  d05fe4:	2089c83a 	sub	r4,r4,r2
  d05fe8:	2189883a 	add	r4,r4,r6
  d05fec:	3900008d 	sth	r4,2(r7)
  d05ff0:	3940000d 	sth	r5,0(r7)
  d05ff4:	180cd43a 	srli	r6,r3,16
  d05ff8:	39c00104 	addi	r7,r7,4
  d05ffc:	2013d43a 	srai	r9,r4,16
  d06000:	923fe72e 	bgeu	r18,r8,d05fa0 <quorem+0x178>
  d06004:	e03fa61e 	bne	fp,zero,d05ea0 <quorem+0x78>
  d06008:	b0ffff04 	addi	r3,r22,-4
  d0600c:	98c0082e 	bgeu	r19,r3,d06030 <quorem+0x208>
  d06010:	b0bfff17 	ldw	r2,-4(r22)
  d06014:	10000326 	beq	r2,zero,d06024 <quorem+0x1fc>
  d06018:	00000506 	br	d06030 <quorem+0x208>
  d0601c:	18800017 	ldw	r2,0(r3)
  d06020:	1000031e 	bne	r2,zero,d06030 <quorem+0x208>
  d06024:	18ffff04 	addi	r3,r3,-4
  d06028:	8c7fffc4 	addi	r17,r17,-1
  d0602c:	98fffb36 	bltu	r19,r3,d0601c <quorem+0x1f4>
  d06030:	bc400415 	stw	r17,16(r23)
  d06034:	003f9a06 	br	d05ea0 <quorem+0x78>
  d06038:	0005883a 	mov	r2,zero
  d0603c:	003fc806 	br	d05f60 <quorem+0x138>

00d06040 <_dtoa_r>:
  d06040:	22001017 	ldw	r8,64(r4)
  d06044:	deffda04 	addi	sp,sp,-152
  d06048:	dd402115 	stw	r21,132(sp)
  d0604c:	dd002015 	stw	r20,128(sp)
  d06050:	dc801e15 	stw	r18,120(sp)
  d06054:	dc401d15 	stw	r17,116(sp)
  d06058:	dfc02515 	stw	ra,148(sp)
  d0605c:	df002415 	stw	fp,144(sp)
  d06060:	ddc02315 	stw	r23,140(sp)
  d06064:	dd802215 	stw	r22,136(sp)
  d06068:	dcc01f15 	stw	r19,124(sp)
  d0606c:	dc001c15 	stw	r16,112(sp)
  d06070:	d9001615 	stw	r4,88(sp)
  d06074:	3023883a 	mov	r17,r6
  d06078:	2829883a 	mov	r20,r5
  d0607c:	d9c01715 	stw	r7,92(sp)
  d06080:	dc802817 	ldw	r18,160(sp)
  d06084:	302b883a 	mov	r21,r6
  d06088:	40000a26 	beq	r8,zero,d060b4 <_dtoa_r+0x74>
  d0608c:	20801117 	ldw	r2,68(r4)
  d06090:	400b883a 	mov	r5,r8
  d06094:	40800115 	stw	r2,4(r8)
  d06098:	20c01117 	ldw	r3,68(r4)
  d0609c:	00800044 	movi	r2,1
  d060a0:	10c4983a 	sll	r2,r2,r3
  d060a4:	40800215 	stw	r2,8(r8)
  d060a8:	0d091d40 	call	d091d4 <_Bfree>
  d060ac:	d8c01617 	ldw	r3,88(sp)
  d060b0:	18001015 	stw	zero,64(r3)
  d060b4:	8800a316 	blt	r17,zero,d06344 <_dtoa_r+0x304>
  d060b8:	90000015 	stw	zero,0(r18)
  d060bc:	a8dffc2c 	andhi	r3,r21,32752
  d060c0:	009ffc34 	movhi	r2,32752
  d060c4:	18809126 	beq	r3,r2,d0630c <_dtoa_r+0x2cc>
  d060c8:	000d883a 	mov	r6,zero
  d060cc:	000f883a 	mov	r7,zero
  d060d0:	a009883a 	mov	r4,r20
  d060d4:	a80b883a 	mov	r5,r21
  d060d8:	dd001215 	stw	r20,72(sp)
  d060dc:	dd401315 	stw	r21,76(sp)
  d060e0:	0d0317c0 	call	d0317c <__nedf2>
  d060e4:	1000171e 	bne	r2,zero,d06144 <_dtoa_r+0x104>
  d060e8:	d9802717 	ldw	r6,156(sp)
  d060ec:	00800044 	movi	r2,1
  d060f0:	30800015 	stw	r2,0(r6)
  d060f4:	d8802917 	ldw	r2,164(sp)
  d060f8:	10029b26 	beq	r2,zero,d06b68 <_dtoa_r+0xb28>
  d060fc:	d9002917 	ldw	r4,164(sp)
  d06100:	00803474 	movhi	r2,209
  d06104:	10843444 	addi	r2,r2,4305
  d06108:	10ffffc4 	addi	r3,r2,-1
  d0610c:	20800015 	stw	r2,0(r4)
  d06110:	1805883a 	mov	r2,r3
  d06114:	dfc02517 	ldw	ra,148(sp)
  d06118:	df002417 	ldw	fp,144(sp)
  d0611c:	ddc02317 	ldw	r23,140(sp)
  d06120:	dd802217 	ldw	r22,136(sp)
  d06124:	dd402117 	ldw	r21,132(sp)
  d06128:	dd002017 	ldw	r20,128(sp)
  d0612c:	dcc01f17 	ldw	r19,124(sp)
  d06130:	dc801e17 	ldw	r18,120(sp)
  d06134:	dc401d17 	ldw	r17,116(sp)
  d06138:	dc001c17 	ldw	r16,112(sp)
  d0613c:	dec02604 	addi	sp,sp,152
  d06140:	f800283a 	ret
  d06144:	d9001617 	ldw	r4,88(sp)
  d06148:	d9401217 	ldw	r5,72(sp)
  d0614c:	d8800104 	addi	r2,sp,4
  d06150:	a80d883a 	mov	r6,r21
  d06154:	d9c00204 	addi	r7,sp,8
  d06158:	d8800015 	stw	r2,0(sp)
  d0615c:	0d098100 	call	d09810 <__d2b>
  d06160:	d8800715 	stw	r2,28(sp)
  d06164:	a804d53a 	srli	r2,r21,20
  d06168:	1101ffcc 	andi	r4,r2,2047
  d0616c:	20008626 	beq	r4,zero,d06388 <_dtoa_r+0x348>
  d06170:	d8c01217 	ldw	r3,72(sp)
  d06174:	00800434 	movhi	r2,16
  d06178:	10bfffc4 	addi	r2,r2,-1
  d0617c:	ddc00117 	ldw	r23,4(sp)
  d06180:	a884703a 	and	r2,r21,r2
  d06184:	1811883a 	mov	r8,r3
  d06188:	124ffc34 	orhi	r9,r2,16368
  d0618c:	25bf0044 	addi	r22,r4,-1023
  d06190:	d8000815 	stw	zero,32(sp)
  d06194:	0005883a 	mov	r2,zero
  d06198:	00cffe34 	movhi	r3,16376
  d0619c:	480b883a 	mov	r5,r9
  d061a0:	4009883a 	mov	r4,r8
  d061a4:	180f883a 	mov	r7,r3
  d061a8:	100d883a 	mov	r6,r2
  d061ac:	0d02e300 	call	d02e30 <__subdf3>
  d061b0:	0218dbf4 	movhi	r8,25455
  d061b4:	4210d844 	addi	r8,r8,17249
  d061b8:	024ff4f4 	movhi	r9,16339
  d061bc:	4a61e9c4 	addi	r9,r9,-30809
  d061c0:	480f883a 	mov	r7,r9
  d061c4:	400d883a 	mov	r6,r8
  d061c8:	180b883a 	mov	r5,r3
  d061cc:	1009883a 	mov	r4,r2
  d061d0:	0d0bac40 	call	d0bac4 <__muldf3>
  d061d4:	0222d874 	movhi	r8,35681
  d061d8:	42322cc4 	addi	r8,r8,-14157
  d061dc:	024ff1f4 	movhi	r9,16327
  d061e0:	4a628a04 	addi	r9,r9,-30168
  d061e4:	480f883a 	mov	r7,r9
  d061e8:	400d883a 	mov	r6,r8
  d061ec:	180b883a 	mov	r5,r3
  d061f0:	1009883a 	mov	r4,r2
  d061f4:	0d02eb00 	call	d02eb0 <__adddf3>
  d061f8:	b009883a 	mov	r4,r22
  d061fc:	1021883a 	mov	r16,r2
  d06200:	1823883a 	mov	r17,r3
  d06204:	0d0c0a80 	call	d0c0a8 <__floatsidf>
  d06208:	021427f4 	movhi	r8,20639
  d0620c:	421e7ec4 	addi	r8,r8,31227
  d06210:	024ff4f4 	movhi	r9,16339
  d06214:	4a5104c4 	addi	r9,r9,17427
  d06218:	480f883a 	mov	r7,r9
  d0621c:	400d883a 	mov	r6,r8
  d06220:	180b883a 	mov	r5,r3
  d06224:	1009883a 	mov	r4,r2
  d06228:	0d0bac40 	call	d0bac4 <__muldf3>
  d0622c:	180f883a 	mov	r7,r3
  d06230:	880b883a 	mov	r5,r17
  d06234:	100d883a 	mov	r6,r2
  d06238:	8009883a 	mov	r4,r16
  d0623c:	0d02eb00 	call	d02eb0 <__adddf3>
  d06240:	1009883a 	mov	r4,r2
  d06244:	180b883a 	mov	r5,r3
  d06248:	1021883a 	mov	r16,r2
  d0624c:	1823883a 	mov	r17,r3
  d06250:	0d0c1a00 	call	d0c1a0 <__fixdfsi>
  d06254:	000d883a 	mov	r6,zero
  d06258:	000f883a 	mov	r7,zero
  d0625c:	8009883a 	mov	r4,r16
  d06260:	880b883a 	mov	r5,r17
  d06264:	d8800d15 	stw	r2,52(sp)
  d06268:	0d0c0200 	call	d0c020 <__ltdf2>
  d0626c:	10031716 	blt	r2,zero,d06ecc <_dtoa_r+0xe8c>
  d06270:	d8c00d17 	ldw	r3,52(sp)
  d06274:	00800584 	movi	r2,22
  d06278:	10c1482e 	bgeu	r2,r3,d0679c <_dtoa_r+0x75c>
  d0627c:	01000044 	movi	r4,1
  d06280:	d9000c15 	stw	r4,48(sp)
  d06284:	bd85c83a 	sub	r2,r23,r22
  d06288:	11bfffc4 	addi	r6,r2,-1
  d0628c:	30030b16 	blt	r6,zero,d06ebc <_dtoa_r+0xe7c>
  d06290:	d9800a15 	stw	r6,40(sp)
  d06294:	d8001115 	stw	zero,68(sp)
  d06298:	d8c00d17 	ldw	r3,52(sp)
  d0629c:	1802ff16 	blt	r3,zero,d06e9c <_dtoa_r+0xe5c>
  d062a0:	d9000a17 	ldw	r4,40(sp)
  d062a4:	d8c00915 	stw	r3,36(sp)
  d062a8:	d8001015 	stw	zero,64(sp)
  d062ac:	20c9883a 	add	r4,r4,r3
  d062b0:	d9000a15 	stw	r4,40(sp)
  d062b4:	d9001717 	ldw	r4,92(sp)
  d062b8:	00800244 	movi	r2,9
  d062bc:	11004636 	bltu	r2,r4,d063d8 <_dtoa_r+0x398>
  d062c0:	00800144 	movi	r2,5
  d062c4:	11020416 	blt	r2,r4,d06ad8 <_dtoa_r+0xa98>
  d062c8:	04400044 	movi	r17,1
  d062cc:	d8c01717 	ldw	r3,92(sp)
  d062d0:	00800144 	movi	r2,5
  d062d4:	10c1ed36 	bltu	r2,r3,d06a8c <_dtoa_r+0xa4c>
  d062d8:	18c5883a 	add	r2,r3,r3
  d062dc:	1085883a 	add	r2,r2,r2
  d062e0:	00c03434 	movhi	r3,208
  d062e4:	18d8bd04 	addi	r3,r3,25332
  d062e8:	10c5883a 	add	r2,r2,r3
  d062ec:	11000017 	ldw	r4,0(r2)
  d062f0:	2000683a 	jmp	r4
  d062f4:	00d063e0 	cmpeqi	r3,zero,16783
  d062f8:	00d063e0 	cmpeqi	r3,zero,16783
  d062fc:	00d06de0 	cmpeqi	r3,zero,16823
  d06300:	00d06db8 	rdprs	r3,zero,16822
  d06304:	00d06dfc 	xorhi	r3,zero,16823
  d06308:	00d06e08 	cmpgei	r3,zero,16824
  d0630c:	d9002717 	ldw	r4,156(sp)
  d06310:	0089c3c4 	movi	r2,9999
  d06314:	20800015 	stw	r2,0(r4)
  d06318:	a0001026 	beq	r20,zero,d0635c <_dtoa_r+0x31c>
  d0631c:	00c03474 	movhi	r3,209
  d06320:	18c4bc04 	addi	r3,r3,4848
  d06324:	d9802917 	ldw	r6,164(sp)
  d06328:	303f7926 	beq	r6,zero,d06110 <_dtoa_r+0xd0>
  d0632c:	188000c7 	ldb	r2,3(r3)
  d06330:	190000c4 	addi	r4,r3,3
  d06334:	1000101e 	bne	r2,zero,d06378 <_dtoa_r+0x338>
  d06338:	d8802917 	ldw	r2,164(sp)
  d0633c:	11000015 	stw	r4,0(r2)
  d06340:	003f7306 	br	d06110 <_dtoa_r+0xd0>
  d06344:	00a00034 	movhi	r2,32768
  d06348:	10bfffc4 	addi	r2,r2,-1
  d0634c:	00c00044 	movi	r3,1
  d06350:	88aa703a 	and	r21,r17,r2
  d06354:	90c00015 	stw	r3,0(r18)
  d06358:	003f5806 	br	d060bc <_dtoa_r+0x7c>
  d0635c:	00800434 	movhi	r2,16
  d06360:	10bfffc4 	addi	r2,r2,-1
  d06364:	a884703a 	and	r2,r21,r2
  d06368:	103fec1e 	bne	r2,zero,d0631c <_dtoa_r+0x2dc>
  d0636c:	00c03474 	movhi	r3,209
  d06370:	18c4b904 	addi	r3,r3,4836
  d06374:	003feb06 	br	d06324 <_dtoa_r+0x2e4>
  d06378:	d8802917 	ldw	r2,164(sp)
  d0637c:	19000204 	addi	r4,r3,8
  d06380:	11000015 	stw	r4,0(r2)
  d06384:	003f6206 	br	d06110 <_dtoa_r+0xd0>
  d06388:	ddc00117 	ldw	r23,4(sp)
  d0638c:	d8800217 	ldw	r2,8(sp)
  d06390:	01000804 	movi	r4,32
  d06394:	b8c10c84 	addi	r3,r23,1074
  d06398:	18a3883a 	add	r17,r3,r2
  d0639c:	2441b80e 	bge	r4,r17,d06a80 <_dtoa_r+0xa40>
  d063a0:	00c01004 	movi	r3,64
  d063a4:	1c47c83a 	sub	r3,r3,r17
  d063a8:	88bff804 	addi	r2,r17,-32
  d063ac:	a8c6983a 	sll	r3,r21,r3
  d063b0:	a084d83a 	srl	r2,r20,r2
  d063b4:	1888b03a 	or	r4,r3,r2
  d063b8:	0d0c2780 	call	d0c278 <__floatunsidf>
  d063bc:	1011883a 	mov	r8,r2
  d063c0:	00bf8434 	movhi	r2,65040
  d063c4:	01000044 	movi	r4,1
  d063c8:	10d3883a 	add	r9,r2,r3
  d063cc:	8dbef344 	addi	r22,r17,-1075
  d063d0:	d9000815 	stw	r4,32(sp)
  d063d4:	003f6f06 	br	d06194 <_dtoa_r+0x154>
  d063d8:	d8001715 	stw	zero,92(sp)
  d063dc:	04400044 	movi	r17,1
  d063e0:	00bfffc4 	movi	r2,-1
  d063e4:	00c00044 	movi	r3,1
  d063e8:	d8800e15 	stw	r2,56(sp)
  d063ec:	d8002615 	stw	zero,152(sp)
  d063f0:	d8800f15 	stw	r2,60(sp)
  d063f4:	d8c00b15 	stw	r3,44(sp)
  d063f8:	1021883a 	mov	r16,r2
  d063fc:	d8801617 	ldw	r2,88(sp)
  d06400:	10001115 	stw	zero,68(r2)
  d06404:	d8801617 	ldw	r2,88(sp)
  d06408:	11401117 	ldw	r5,68(r2)
  d0640c:	1009883a 	mov	r4,r2
  d06410:	0d097540 	call	d09754 <_Balloc>
  d06414:	d8c01617 	ldw	r3,88(sp)
  d06418:	d8800515 	stw	r2,20(sp)
  d0641c:	18801015 	stw	r2,64(r3)
  d06420:	00800384 	movi	r2,14
  d06424:	14006836 	bltu	r2,r16,d065c8 <_dtoa_r+0x588>
  d06428:	8805003a 	cmpeq	r2,r17,zero
  d0642c:	1000661e 	bne	r2,zero,d065c8 <_dtoa_r+0x588>
  d06430:	d9000d17 	ldw	r4,52(sp)
  d06434:	0102300e 	bge	zero,r4,d06cf8 <_dtoa_r+0xcb8>
  d06438:	208003cc 	andi	r2,r4,15
  d0643c:	100490fa 	slli	r2,r2,3
  d06440:	2025d13a 	srai	r18,r4,4
  d06444:	00c03474 	movhi	r3,209
  d06448:	18c4cc04 	addi	r3,r3,4912
  d0644c:	10c5883a 	add	r2,r2,r3
  d06450:	90c0040c 	andi	r3,r18,16
  d06454:	14000017 	ldw	r16,0(r2)
  d06458:	14400117 	ldw	r17,4(r2)
  d0645c:	18036a1e 	bne	r3,zero,d07208 <_dtoa_r+0x11c8>
  d06460:	05800084 	movi	r22,2
  d06464:	90001026 	beq	r18,zero,d064a8 <_dtoa_r+0x468>
  d06468:	04c03474 	movhi	r19,209
  d0646c:	9cc4fe04 	addi	r19,r19,5112
  d06470:	9080004c 	andi	r2,r18,1
  d06474:	1005003a 	cmpeq	r2,r2,zero
  d06478:	1000081e 	bne	r2,zero,d0649c <_dtoa_r+0x45c>
  d0647c:	99800017 	ldw	r6,0(r19)
  d06480:	99c00117 	ldw	r7,4(r19)
  d06484:	880b883a 	mov	r5,r17
  d06488:	8009883a 	mov	r4,r16
  d0648c:	0d0bac40 	call	d0bac4 <__muldf3>
  d06490:	1021883a 	mov	r16,r2
  d06494:	b5800044 	addi	r22,r22,1
  d06498:	1823883a 	mov	r17,r3
  d0649c:	9025d07a 	srai	r18,r18,1
  d064a0:	9cc00204 	addi	r19,r19,8
  d064a4:	903ff21e 	bne	r18,zero,d06470 <_dtoa_r+0x430>
  d064a8:	a80b883a 	mov	r5,r21
  d064ac:	a009883a 	mov	r4,r20
  d064b0:	880f883a 	mov	r7,r17
  d064b4:	800d883a 	mov	r6,r16
  d064b8:	0d02f240 	call	d02f24 <__divdf3>
  d064bc:	1029883a 	mov	r20,r2
  d064c0:	182b883a 	mov	r21,r3
  d064c4:	d8c00c17 	ldw	r3,48(sp)
  d064c8:	1805003a 	cmpeq	r2,r3,zero
  d064cc:	1000081e 	bne	r2,zero,d064f0 <_dtoa_r+0x4b0>
  d064d0:	0005883a 	mov	r2,zero
  d064d4:	00cffc34 	movhi	r3,16368
  d064d8:	180f883a 	mov	r7,r3
  d064dc:	a009883a 	mov	r4,r20
  d064e0:	a80b883a 	mov	r5,r21
  d064e4:	100d883a 	mov	r6,r2
  d064e8:	0d0c0200 	call	d0c020 <__ltdf2>
  d064ec:	1003fe16 	blt	r2,zero,d074e8 <_dtoa_r+0x14a8>
  d064f0:	b009883a 	mov	r4,r22
  d064f4:	0d0c0a80 	call	d0c0a8 <__floatsidf>
  d064f8:	180b883a 	mov	r5,r3
  d064fc:	1009883a 	mov	r4,r2
  d06500:	a00d883a 	mov	r6,r20
  d06504:	a80f883a 	mov	r7,r21
  d06508:	0d0bac40 	call	d0bac4 <__muldf3>
  d0650c:	0011883a 	mov	r8,zero
  d06510:	02500734 	movhi	r9,16412
  d06514:	1009883a 	mov	r4,r2
  d06518:	180b883a 	mov	r5,r3
  d0651c:	480f883a 	mov	r7,r9
  d06520:	400d883a 	mov	r6,r8
  d06524:	0d02eb00 	call	d02eb0 <__adddf3>
  d06528:	d9000f17 	ldw	r4,60(sp)
  d0652c:	102d883a 	mov	r22,r2
  d06530:	00bf3034 	movhi	r2,64704
  d06534:	18b9883a 	add	fp,r3,r2
  d06538:	e02f883a 	mov	r23,fp
  d0653c:	20028f1e 	bne	r4,zero,d06f7c <_dtoa_r+0xf3c>
  d06540:	0005883a 	mov	r2,zero
  d06544:	00d00534 	movhi	r3,16404
  d06548:	a009883a 	mov	r4,r20
  d0654c:	a80b883a 	mov	r5,r21
  d06550:	180f883a 	mov	r7,r3
  d06554:	100d883a 	mov	r6,r2
  d06558:	0d02e300 	call	d02e30 <__subdf3>
  d0655c:	1009883a 	mov	r4,r2
  d06560:	e00f883a 	mov	r7,fp
  d06564:	180b883a 	mov	r5,r3
  d06568:	b00d883a 	mov	r6,r22
  d0656c:	1025883a 	mov	r18,r2
  d06570:	1827883a 	mov	r19,r3
  d06574:	0d0bf100 	call	d0bf10 <__gtdf2>
  d06578:	00834f16 	blt	zero,r2,d072b8 <_dtoa_r+0x1278>
  d0657c:	e0e0003c 	xorhi	r3,fp,32768
  d06580:	9009883a 	mov	r4,r18
  d06584:	980b883a 	mov	r5,r19
  d06588:	180f883a 	mov	r7,r3
  d0658c:	b00d883a 	mov	r6,r22
  d06590:	0d0c0200 	call	d0c020 <__ltdf2>
  d06594:	1000080e 	bge	r2,zero,d065b8 <_dtoa_r+0x578>
  d06598:	0027883a 	mov	r19,zero
  d0659c:	0025883a 	mov	r18,zero
  d065a0:	d8802617 	ldw	r2,152(sp)
  d065a4:	df000517 	ldw	fp,20(sp)
  d065a8:	d8000615 	stw	zero,24(sp)
  d065ac:	0084303a 	nor	r2,zero,r2
  d065b0:	d8800d15 	stw	r2,52(sp)
  d065b4:	00019b06 	br	d06c24 <_dtoa_r+0xbe4>
  d065b8:	d9801217 	ldw	r6,72(sp)
  d065bc:	d8801317 	ldw	r2,76(sp)
  d065c0:	3029883a 	mov	r20,r6
  d065c4:	102b883a 	mov	r21,r2
  d065c8:	d8c00217 	ldw	r3,8(sp)
  d065cc:	18008516 	blt	r3,zero,d067e4 <_dtoa_r+0x7a4>
  d065d0:	d9000d17 	ldw	r4,52(sp)
  d065d4:	00800384 	movi	r2,14
  d065d8:	11008216 	blt	r2,r4,d067e4 <_dtoa_r+0x7a4>
  d065dc:	200490fa 	slli	r2,r4,3
  d065e0:	d9802617 	ldw	r6,152(sp)
  d065e4:	00c03474 	movhi	r3,209
  d065e8:	18c4cc04 	addi	r3,r3,4912
  d065ec:	10c5883a 	add	r2,r2,r3
  d065f0:	14800017 	ldw	r18,0(r2)
  d065f4:	14c00117 	ldw	r19,4(r2)
  d065f8:	30031e16 	blt	r6,zero,d07274 <_dtoa_r+0x1234>
  d065fc:	d9000517 	ldw	r4,20(sp)
  d06600:	d8c00f17 	ldw	r3,60(sp)
  d06604:	a823883a 	mov	r17,r21
  d06608:	a021883a 	mov	r16,r20
  d0660c:	192b883a 	add	r21,r3,r4
  d06610:	2039883a 	mov	fp,r4
  d06614:	00000f06 	br	d06654 <_dtoa_r+0x614>
  d06618:	0005883a 	mov	r2,zero
  d0661c:	00d00934 	movhi	r3,16420
  d06620:	5009883a 	mov	r4,r10
  d06624:	580b883a 	mov	r5,r11
  d06628:	180f883a 	mov	r7,r3
  d0662c:	100d883a 	mov	r6,r2
  d06630:	0d0bac40 	call	d0bac4 <__muldf3>
  d06634:	180b883a 	mov	r5,r3
  d06638:	000d883a 	mov	r6,zero
  d0663c:	000f883a 	mov	r7,zero
  d06640:	1009883a 	mov	r4,r2
  d06644:	1021883a 	mov	r16,r2
  d06648:	1823883a 	mov	r17,r3
  d0664c:	0d0317c0 	call	d0317c <__nedf2>
  d06650:	10004526 	beq	r2,zero,d06768 <_dtoa_r+0x728>
  d06654:	900d883a 	mov	r6,r18
  d06658:	980f883a 	mov	r7,r19
  d0665c:	8009883a 	mov	r4,r16
  d06660:	880b883a 	mov	r5,r17
  d06664:	0d02f240 	call	d02f24 <__divdf3>
  d06668:	180b883a 	mov	r5,r3
  d0666c:	1009883a 	mov	r4,r2
  d06670:	0d0c1a00 	call	d0c1a0 <__fixdfsi>
  d06674:	1009883a 	mov	r4,r2
  d06678:	1029883a 	mov	r20,r2
  d0667c:	0d0c0a80 	call	d0c0a8 <__floatsidf>
  d06680:	180f883a 	mov	r7,r3
  d06684:	9009883a 	mov	r4,r18
  d06688:	980b883a 	mov	r5,r19
  d0668c:	100d883a 	mov	r6,r2
  d06690:	0d0bac40 	call	d0bac4 <__muldf3>
  d06694:	180f883a 	mov	r7,r3
  d06698:	880b883a 	mov	r5,r17
  d0669c:	8009883a 	mov	r4,r16
  d066a0:	100d883a 	mov	r6,r2
  d066a4:	0d02e300 	call	d02e30 <__subdf3>
  d066a8:	1015883a 	mov	r10,r2
  d066ac:	a0800c04 	addi	r2,r20,48
  d066b0:	e0800005 	stb	r2,0(fp)
  d066b4:	e7000044 	addi	fp,fp,1
  d066b8:	1817883a 	mov	r11,r3
  d066bc:	e57fd61e 	bne	fp,r21,d06618 <_dtoa_r+0x5d8>
  d066c0:	500d883a 	mov	r6,r10
  d066c4:	180f883a 	mov	r7,r3
  d066c8:	5009883a 	mov	r4,r10
  d066cc:	180b883a 	mov	r5,r3
  d066d0:	0d02eb00 	call	d02eb0 <__adddf3>
  d066d4:	100d883a 	mov	r6,r2
  d066d8:	9009883a 	mov	r4,r18
  d066dc:	980b883a 	mov	r5,r19
  d066e0:	180f883a 	mov	r7,r3
  d066e4:	1021883a 	mov	r16,r2
  d066e8:	1823883a 	mov	r17,r3
  d066ec:	0d0c0200 	call	d0c020 <__ltdf2>
  d066f0:	10000816 	blt	r2,zero,d06714 <_dtoa_r+0x6d4>
  d066f4:	980b883a 	mov	r5,r19
  d066f8:	800d883a 	mov	r6,r16
  d066fc:	880f883a 	mov	r7,r17
  d06700:	9009883a 	mov	r4,r18
  d06704:	0d0be880 	call	d0be88 <__eqdf2>
  d06708:	1000171e 	bne	r2,zero,d06768 <_dtoa_r+0x728>
  d0670c:	a080004c 	andi	r2,r20,1
  d06710:	10001526 	beq	r2,zero,d06768 <_dtoa_r+0x728>
  d06714:	d8800d17 	ldw	r2,52(sp)
  d06718:	d8800415 	stw	r2,16(sp)
  d0671c:	e009883a 	mov	r4,fp
  d06720:	213fffc4 	addi	r4,r4,-1
  d06724:	20c00007 	ldb	r3,0(r4)
  d06728:	00800e44 	movi	r2,57
  d0672c:	1880081e 	bne	r3,r2,d06750 <_dtoa_r+0x710>
  d06730:	d8800517 	ldw	r2,20(sp)
  d06734:	113ffa1e 	bne	r2,r4,d06720 <_dtoa_r+0x6e0>
  d06738:	d8c00417 	ldw	r3,16(sp)
  d0673c:	d9800517 	ldw	r6,20(sp)
  d06740:	00800c04 	movi	r2,48
  d06744:	18c00044 	addi	r3,r3,1
  d06748:	d8c00415 	stw	r3,16(sp)
  d0674c:	30800005 	stb	r2,0(r6)
  d06750:	20800003 	ldbu	r2,0(r4)
  d06754:	d8c00417 	ldw	r3,16(sp)
  d06758:	27000044 	addi	fp,r4,1
  d0675c:	10800044 	addi	r2,r2,1
  d06760:	d8c00d15 	stw	r3,52(sp)
  d06764:	20800005 	stb	r2,0(r4)
  d06768:	d9001617 	ldw	r4,88(sp)
  d0676c:	d9400717 	ldw	r5,28(sp)
  d06770:	0d091d40 	call	d091d4 <_Bfree>
  d06774:	e0000005 	stb	zero,0(fp)
  d06778:	d9800d17 	ldw	r6,52(sp)
  d0677c:	d8c02717 	ldw	r3,156(sp)
  d06780:	d9002917 	ldw	r4,164(sp)
  d06784:	30800044 	addi	r2,r6,1
  d06788:	18800015 	stw	r2,0(r3)
  d0678c:	20029c26 	beq	r4,zero,d07200 <_dtoa_r+0x11c0>
  d06790:	d8c00517 	ldw	r3,20(sp)
  d06794:	27000015 	stw	fp,0(r4)
  d06798:	003e5d06 	br	d06110 <_dtoa_r+0xd0>
  d0679c:	d9800d17 	ldw	r6,52(sp)
  d067a0:	00c03474 	movhi	r3,209
  d067a4:	18c4cc04 	addi	r3,r3,4912
  d067a8:	d9001217 	ldw	r4,72(sp)
  d067ac:	300490fa 	slli	r2,r6,3
  d067b0:	d9401317 	ldw	r5,76(sp)
  d067b4:	10c5883a 	add	r2,r2,r3
  d067b8:	12000017 	ldw	r8,0(r2)
  d067bc:	12400117 	ldw	r9,4(r2)
  d067c0:	400d883a 	mov	r6,r8
  d067c4:	480f883a 	mov	r7,r9
  d067c8:	0d0c0200 	call	d0c020 <__ltdf2>
  d067cc:	1000030e 	bge	r2,zero,d067dc <_dtoa_r+0x79c>
  d067d0:	d8800d17 	ldw	r2,52(sp)
  d067d4:	10bfffc4 	addi	r2,r2,-1
  d067d8:	d8800d15 	stw	r2,52(sp)
  d067dc:	d8000c15 	stw	zero,48(sp)
  d067e0:	003ea806 	br	d06284 <_dtoa_r+0x244>
  d067e4:	d9000b17 	ldw	r4,44(sp)
  d067e8:	202cc03a 	cmpne	r22,r4,zero
  d067ec:	b000c71e 	bne	r22,zero,d06b0c <_dtoa_r+0xacc>
  d067f0:	dc001117 	ldw	r16,68(sp)
  d067f4:	dc801017 	ldw	r18,64(sp)
  d067f8:	0027883a 	mov	r19,zero
  d067fc:	04000b0e 	bge	zero,r16,d0682c <_dtoa_r+0x7ec>
  d06800:	d8c00a17 	ldw	r3,40(sp)
  d06804:	00c0090e 	bge	zero,r3,d0682c <_dtoa_r+0x7ec>
  d06808:	8005883a 	mov	r2,r16
  d0680c:	1c011316 	blt	r3,r16,d06c5c <_dtoa_r+0xc1c>
  d06810:	d9000a17 	ldw	r4,40(sp)
  d06814:	d9801117 	ldw	r6,68(sp)
  d06818:	80a1c83a 	sub	r16,r16,r2
  d0681c:	2089c83a 	sub	r4,r4,r2
  d06820:	308dc83a 	sub	r6,r6,r2
  d06824:	d9000a15 	stw	r4,40(sp)
  d06828:	d9801115 	stw	r6,68(sp)
  d0682c:	d8801017 	ldw	r2,64(sp)
  d06830:	0080150e 	bge	zero,r2,d06888 <_dtoa_r+0x848>
  d06834:	d8c00b17 	ldw	r3,44(sp)
  d06838:	1805003a 	cmpeq	r2,r3,zero
  d0683c:	1001c91e 	bne	r2,zero,d06f64 <_dtoa_r+0xf24>
  d06840:	04800e0e 	bge	zero,r18,d0687c <_dtoa_r+0x83c>
  d06844:	d9001617 	ldw	r4,88(sp)
  d06848:	980b883a 	mov	r5,r19
  d0684c:	900d883a 	mov	r6,r18
  d06850:	0d09f880 	call	d09f88 <__pow5mult>
  d06854:	d9001617 	ldw	r4,88(sp)
  d06858:	d9800717 	ldw	r6,28(sp)
  d0685c:	100b883a 	mov	r5,r2
  d06860:	1027883a 	mov	r19,r2
  d06864:	0d09c640 	call	d09c64 <__multiply>
  d06868:	d9001617 	ldw	r4,88(sp)
  d0686c:	d9400717 	ldw	r5,28(sp)
  d06870:	1023883a 	mov	r17,r2
  d06874:	0d091d40 	call	d091d4 <_Bfree>
  d06878:	dc400715 	stw	r17,28(sp)
  d0687c:	d9001017 	ldw	r4,64(sp)
  d06880:	248dc83a 	sub	r6,r4,r18
  d06884:	30010e1e 	bne	r6,zero,d06cc0 <_dtoa_r+0xc80>
  d06888:	d9001617 	ldw	r4,88(sp)
  d0688c:	04400044 	movi	r17,1
  d06890:	880b883a 	mov	r5,r17
  d06894:	0d09e4c0 	call	d09e4c <__i2b>
  d06898:	d9800917 	ldw	r6,36(sp)
  d0689c:	1025883a 	mov	r18,r2
  d068a0:	0180040e 	bge	zero,r6,d068b4 <_dtoa_r+0x874>
  d068a4:	d9001617 	ldw	r4,88(sp)
  d068a8:	100b883a 	mov	r5,r2
  d068ac:	0d09f880 	call	d09f88 <__pow5mult>
  d068b0:	1025883a 	mov	r18,r2
  d068b4:	d8801717 	ldw	r2,92(sp)
  d068b8:	8880f30e 	bge	r17,r2,d06c88 <_dtoa_r+0xc48>
  d068bc:	0023883a 	mov	r17,zero
  d068c0:	d9800917 	ldw	r6,36(sp)
  d068c4:	30019e1e 	bne	r6,zero,d06f40 <_dtoa_r+0xf00>
  d068c8:	00c00044 	movi	r3,1
  d068cc:	d9000a17 	ldw	r4,40(sp)
  d068d0:	20c5883a 	add	r2,r4,r3
  d068d4:	10c007cc 	andi	r3,r2,31
  d068d8:	1800841e 	bne	r3,zero,d06aec <_dtoa_r+0xaac>
  d068dc:	00800704 	movi	r2,28
  d068e0:	d9000a17 	ldw	r4,40(sp)
  d068e4:	d9801117 	ldw	r6,68(sp)
  d068e8:	80a1883a 	add	r16,r16,r2
  d068ec:	2089883a 	add	r4,r4,r2
  d068f0:	308d883a 	add	r6,r6,r2
  d068f4:	d9000a15 	stw	r4,40(sp)
  d068f8:	d9801115 	stw	r6,68(sp)
  d068fc:	d8801117 	ldw	r2,68(sp)
  d06900:	0080050e 	bge	zero,r2,d06918 <_dtoa_r+0x8d8>
  d06904:	d9400717 	ldw	r5,28(sp)
  d06908:	d9001617 	ldw	r4,88(sp)
  d0690c:	100d883a 	mov	r6,r2
  d06910:	0d09b180 	call	d09b18 <__lshift>
  d06914:	d8800715 	stw	r2,28(sp)
  d06918:	d8c00a17 	ldw	r3,40(sp)
  d0691c:	00c0050e 	bge	zero,r3,d06934 <_dtoa_r+0x8f4>
  d06920:	d9001617 	ldw	r4,88(sp)
  d06924:	900b883a 	mov	r5,r18
  d06928:	180d883a 	mov	r6,r3
  d0692c:	0d09b180 	call	d09b18 <__lshift>
  d06930:	1025883a 	mov	r18,r2
  d06934:	d9000c17 	ldw	r4,48(sp)
  d06938:	2005003a 	cmpeq	r2,r4,zero
  d0693c:	10016f26 	beq	r2,zero,d06efc <_dtoa_r+0xebc>
  d06940:	d9000f17 	ldw	r4,60(sp)
  d06944:	0102170e 	bge	zero,r4,d071a4 <_dtoa_r+0x1164>
  d06948:	d9800b17 	ldw	r6,44(sp)
  d0694c:	3005003a 	cmpeq	r2,r6,zero
  d06950:	1000881e 	bne	r2,zero,d06b74 <_dtoa_r+0xb34>
  d06954:	0400050e 	bge	zero,r16,d0696c <_dtoa_r+0x92c>
  d06958:	d9001617 	ldw	r4,88(sp)
  d0695c:	980b883a 	mov	r5,r19
  d06960:	800d883a 	mov	r6,r16
  d06964:	0d09b180 	call	d09b18 <__lshift>
  d06968:	1027883a 	mov	r19,r2
  d0696c:	8804c03a 	cmpne	r2,r17,zero
  d06970:	1002541e 	bne	r2,zero,d072c4 <_dtoa_r+0x1284>
  d06974:	980b883a 	mov	r5,r19
  d06978:	dd800517 	ldw	r22,20(sp)
  d0697c:	dcc00615 	stw	r19,24(sp)
  d06980:	a700004c 	andi	fp,r20,1
  d06984:	2827883a 	mov	r19,r5
  d06988:	d9000717 	ldw	r4,28(sp)
  d0698c:	900b883a 	mov	r5,r18
  d06990:	0d05e280 	call	d05e28 <quorem>
  d06994:	d9000717 	ldw	r4,28(sp)
  d06998:	d9400617 	ldw	r5,24(sp)
  d0699c:	1023883a 	mov	r17,r2
  d069a0:	8dc00c04 	addi	r23,r17,48
  d069a4:	0d093300 	call	d09330 <__mcmp>
  d069a8:	d9001617 	ldw	r4,88(sp)
  d069ac:	900b883a 	mov	r5,r18
  d069b0:	980d883a 	mov	r6,r19
  d069b4:	1029883a 	mov	r20,r2
  d069b8:	0d0998c0 	call	d0998c <__mdiff>
  d069bc:	102b883a 	mov	r21,r2
  d069c0:	10800317 	ldw	r2,12(r2)
  d069c4:	1001281e 	bne	r2,zero,d06e68 <_dtoa_r+0xe28>
  d069c8:	d9000717 	ldw	r4,28(sp)
  d069cc:	a80b883a 	mov	r5,r21
  d069d0:	0d093300 	call	d09330 <__mcmp>
  d069d4:	d9001617 	ldw	r4,88(sp)
  d069d8:	1021883a 	mov	r16,r2
  d069dc:	a80b883a 	mov	r5,r21
  d069e0:	0d091d40 	call	d091d4 <_Bfree>
  d069e4:	8000041e 	bne	r16,zero,d069f8 <_dtoa_r+0x9b8>
  d069e8:	d8801717 	ldw	r2,92(sp)
  d069ec:	1000021e 	bne	r2,zero,d069f8 <_dtoa_r+0x9b8>
  d069f0:	e004c03a 	cmpne	r2,fp,zero
  d069f4:	10011726 	beq	r2,zero,d06e54 <_dtoa_r+0xe14>
  d069f8:	a0010616 	blt	r20,zero,d06e14 <_dtoa_r+0xdd4>
  d069fc:	a000041e 	bne	r20,zero,d06a10 <_dtoa_r+0x9d0>
  d06a00:	d8c01717 	ldw	r3,92(sp)
  d06a04:	1800021e 	bne	r3,zero,d06a10 <_dtoa_r+0x9d0>
  d06a08:	e004c03a 	cmpne	r2,fp,zero
  d06a0c:	10010126 	beq	r2,zero,d06e14 <_dtoa_r+0xdd4>
  d06a10:	04023d16 	blt	zero,r16,d07308 <_dtoa_r+0x12c8>
  d06a14:	b5c00005 	stb	r23,0(r22)
  d06a18:	d9800517 	ldw	r6,20(sp)
  d06a1c:	d9000f17 	ldw	r4,60(sp)
  d06a20:	b5800044 	addi	r22,r22,1
  d06a24:	3105883a 	add	r2,r6,r4
  d06a28:	b0806526 	beq	r22,r2,d06bc0 <_dtoa_r+0xb80>
  d06a2c:	d9400717 	ldw	r5,28(sp)
  d06a30:	d9001617 	ldw	r4,88(sp)
  d06a34:	01800284 	movi	r6,10
  d06a38:	000f883a 	mov	r7,zero
  d06a3c:	0d09e880 	call	d09e88 <__multadd>
  d06a40:	d8800715 	stw	r2,28(sp)
  d06a44:	d8800617 	ldw	r2,24(sp)
  d06a48:	14c10c26 	beq	r2,r19,d06e7c <_dtoa_r+0xe3c>
  d06a4c:	d9400617 	ldw	r5,24(sp)
  d06a50:	d9001617 	ldw	r4,88(sp)
  d06a54:	01800284 	movi	r6,10
  d06a58:	000f883a 	mov	r7,zero
  d06a5c:	0d09e880 	call	d09e88 <__multadd>
  d06a60:	d9001617 	ldw	r4,88(sp)
  d06a64:	980b883a 	mov	r5,r19
  d06a68:	01800284 	movi	r6,10
  d06a6c:	000f883a 	mov	r7,zero
  d06a70:	d8800615 	stw	r2,24(sp)
  d06a74:	0d09e880 	call	d09e88 <__multadd>
  d06a78:	1027883a 	mov	r19,r2
  d06a7c:	003fc206 	br	d06988 <_dtoa_r+0x948>
  d06a80:	2445c83a 	sub	r2,r4,r17
  d06a84:	a088983a 	sll	r4,r20,r2
  d06a88:	003e4b06 	br	d063b8 <_dtoa_r+0x378>
  d06a8c:	01bfffc4 	movi	r6,-1
  d06a90:	00800044 	movi	r2,1
  d06a94:	d9800e15 	stw	r6,56(sp)
  d06a98:	d9800f15 	stw	r6,60(sp)
  d06a9c:	d8800b15 	stw	r2,44(sp)
  d06aa0:	d8c01617 	ldw	r3,88(sp)
  d06aa4:	008005c4 	movi	r2,23
  d06aa8:	18001115 	stw	zero,68(r3)
  d06aac:	1580082e 	bgeu	r2,r22,d06ad0 <_dtoa_r+0xa90>
  d06ab0:	00c00104 	movi	r3,4
  d06ab4:	0009883a 	mov	r4,zero
  d06ab8:	18c7883a 	add	r3,r3,r3
  d06abc:	18800504 	addi	r2,r3,20
  d06ac0:	21000044 	addi	r4,r4,1
  d06ac4:	b0bffc2e 	bgeu	r22,r2,d06ab8 <_dtoa_r+0xa78>
  d06ac8:	d9801617 	ldw	r6,88(sp)
  d06acc:	31001115 	stw	r4,68(r6)
  d06ad0:	dc000f17 	ldw	r16,60(sp)
  d06ad4:	003e4b06 	br	d06404 <_dtoa_r+0x3c4>
  d06ad8:	d9801717 	ldw	r6,92(sp)
  d06adc:	0023883a 	mov	r17,zero
  d06ae0:	31bfff04 	addi	r6,r6,-4
  d06ae4:	d9801715 	stw	r6,92(sp)
  d06ae8:	003df806 	br	d062cc <_dtoa_r+0x28c>
  d06aec:	00800804 	movi	r2,32
  d06af0:	10c9c83a 	sub	r4,r2,r3
  d06af4:	00c00104 	movi	r3,4
  d06af8:	19005a16 	blt	r3,r4,d06c64 <_dtoa_r+0xc24>
  d06afc:	008000c4 	movi	r2,3
  d06b00:	113f7e16 	blt	r2,r4,d068fc <_dtoa_r+0x8bc>
  d06b04:	20800704 	addi	r2,r4,28
  d06b08:	003f7506 	br	d068e0 <_dtoa_r+0x8a0>
  d06b0c:	d9801717 	ldw	r6,92(sp)
  d06b10:	00800044 	movi	r2,1
  d06b14:	1180a10e 	bge	r2,r6,d06d9c <_dtoa_r+0xd5c>
  d06b18:	d9800f17 	ldw	r6,60(sp)
  d06b1c:	d8c01017 	ldw	r3,64(sp)
  d06b20:	30bfffc4 	addi	r2,r6,-1
  d06b24:	1881c616 	blt	r3,r2,d07240 <_dtoa_r+0x1200>
  d06b28:	18a5c83a 	sub	r18,r3,r2
  d06b2c:	d8800f17 	ldw	r2,60(sp)
  d06b30:	10026216 	blt	r2,zero,d074bc <_dtoa_r+0x147c>
  d06b34:	dc001117 	ldw	r16,68(sp)
  d06b38:	1007883a 	mov	r3,r2
  d06b3c:	d9800a17 	ldw	r6,40(sp)
  d06b40:	d8801117 	ldw	r2,68(sp)
  d06b44:	d9001617 	ldw	r4,88(sp)
  d06b48:	30cd883a 	add	r6,r6,r3
  d06b4c:	10c5883a 	add	r2,r2,r3
  d06b50:	01400044 	movi	r5,1
  d06b54:	d9800a15 	stw	r6,40(sp)
  d06b58:	d8801115 	stw	r2,68(sp)
  d06b5c:	0d09e4c0 	call	d09e4c <__i2b>
  d06b60:	1027883a 	mov	r19,r2
  d06b64:	003f2506 	br	d067fc <_dtoa_r+0x7bc>
  d06b68:	00c03474 	movhi	r3,209
  d06b6c:	18c43404 	addi	r3,r3,4304
  d06b70:	003d6706 	br	d06110 <_dtoa_r+0xd0>
  d06b74:	dd800517 	ldw	r22,20(sp)
  d06b78:	04000044 	movi	r16,1
  d06b7c:	00000706 	br	d06b9c <_dtoa_r+0xb5c>
  d06b80:	d9400717 	ldw	r5,28(sp)
  d06b84:	d9001617 	ldw	r4,88(sp)
  d06b88:	01800284 	movi	r6,10
  d06b8c:	000f883a 	mov	r7,zero
  d06b90:	0d09e880 	call	d09e88 <__multadd>
  d06b94:	d8800715 	stw	r2,28(sp)
  d06b98:	84000044 	addi	r16,r16,1
  d06b9c:	d9000717 	ldw	r4,28(sp)
  d06ba0:	900b883a 	mov	r5,r18
  d06ba4:	0d05e280 	call	d05e28 <quorem>
  d06ba8:	15c00c04 	addi	r23,r2,48
  d06bac:	b5c00005 	stb	r23,0(r22)
  d06bb0:	d8c00f17 	ldw	r3,60(sp)
  d06bb4:	b5800044 	addi	r22,r22,1
  d06bb8:	80fff116 	blt	r16,r3,d06b80 <_dtoa_r+0xb40>
  d06bbc:	d8000615 	stw	zero,24(sp)
  d06bc0:	d9400717 	ldw	r5,28(sp)
  d06bc4:	d9001617 	ldw	r4,88(sp)
  d06bc8:	01800044 	movi	r6,1
  d06bcc:	0d09b180 	call	d09b18 <__lshift>
  d06bd0:	1009883a 	mov	r4,r2
  d06bd4:	900b883a 	mov	r5,r18
  d06bd8:	d8800715 	stw	r2,28(sp)
  d06bdc:	0d093300 	call	d09330 <__mcmp>
  d06be0:	00803c0e 	bge	zero,r2,d06cd4 <_dtoa_r+0xc94>
  d06be4:	b009883a 	mov	r4,r22
  d06be8:	213fffc4 	addi	r4,r4,-1
  d06bec:	21400003 	ldbu	r5,0(r4)
  d06bf0:	00800e44 	movi	r2,57
  d06bf4:	28c03fcc 	andi	r3,r5,255
  d06bf8:	18c0201c 	xori	r3,r3,128
  d06bfc:	18ffe004 	addi	r3,r3,-128
  d06c00:	1881981e 	bne	r3,r2,d07264 <_dtoa_r+0x1224>
  d06c04:	d9800517 	ldw	r6,20(sp)
  d06c08:	21bff71e 	bne	r4,r6,d06be8 <_dtoa_r+0xba8>
  d06c0c:	d8800d17 	ldw	r2,52(sp)
  d06c10:	37000044 	addi	fp,r6,1
  d06c14:	10800044 	addi	r2,r2,1
  d06c18:	d8800d15 	stw	r2,52(sp)
  d06c1c:	00800c44 	movi	r2,49
  d06c20:	30800005 	stb	r2,0(r6)
  d06c24:	d9001617 	ldw	r4,88(sp)
  d06c28:	900b883a 	mov	r5,r18
  d06c2c:	0d091d40 	call	d091d4 <_Bfree>
  d06c30:	983ecd26 	beq	r19,zero,d06768 <_dtoa_r+0x728>
  d06c34:	d8c00617 	ldw	r3,24(sp)
  d06c38:	18000426 	beq	r3,zero,d06c4c <_dtoa_r+0xc0c>
  d06c3c:	1cc00326 	beq	r3,r19,d06c4c <_dtoa_r+0xc0c>
  d06c40:	d9001617 	ldw	r4,88(sp)
  d06c44:	180b883a 	mov	r5,r3
  d06c48:	0d091d40 	call	d091d4 <_Bfree>
  d06c4c:	d9001617 	ldw	r4,88(sp)
  d06c50:	980b883a 	mov	r5,r19
  d06c54:	0d091d40 	call	d091d4 <_Bfree>
  d06c58:	003ec306 	br	d06768 <_dtoa_r+0x728>
  d06c5c:	1805883a 	mov	r2,r3
  d06c60:	003eeb06 	br	d06810 <_dtoa_r+0x7d0>
  d06c64:	d9800a17 	ldw	r6,40(sp)
  d06c68:	d8c01117 	ldw	r3,68(sp)
  d06c6c:	20bfff04 	addi	r2,r4,-4
  d06c70:	308d883a 	add	r6,r6,r2
  d06c74:	1887883a 	add	r3,r3,r2
  d06c78:	80a1883a 	add	r16,r16,r2
  d06c7c:	d9800a15 	stw	r6,40(sp)
  d06c80:	d8c01115 	stw	r3,68(sp)
  d06c84:	003f1d06 	br	d068fc <_dtoa_r+0x8bc>
  d06c88:	a03f0c1e 	bne	r20,zero,d068bc <_dtoa_r+0x87c>
  d06c8c:	00800434 	movhi	r2,16
  d06c90:	10bfffc4 	addi	r2,r2,-1
  d06c94:	a884703a 	and	r2,r21,r2
  d06c98:	103f081e 	bne	r2,zero,d068bc <_dtoa_r+0x87c>
  d06c9c:	a89ffc2c 	andhi	r2,r21,32752
  d06ca0:	103f0626 	beq	r2,zero,d068bc <_dtoa_r+0x87c>
  d06ca4:	d8c01117 	ldw	r3,68(sp)
  d06ca8:	d9000a17 	ldw	r4,40(sp)
  d06cac:	18c00044 	addi	r3,r3,1
  d06cb0:	21000044 	addi	r4,r4,1
  d06cb4:	d8c01115 	stw	r3,68(sp)
  d06cb8:	d9000a15 	stw	r4,40(sp)
  d06cbc:	003f0006 	br	d068c0 <_dtoa_r+0x880>
  d06cc0:	d9400717 	ldw	r5,28(sp)
  d06cc4:	d9001617 	ldw	r4,88(sp)
  d06cc8:	0d09f880 	call	d09f88 <__pow5mult>
  d06ccc:	d8800715 	stw	r2,28(sp)
  d06cd0:	003eed06 	br	d06888 <_dtoa_r+0x848>
  d06cd4:	1000021e 	bne	r2,zero,d06ce0 <_dtoa_r+0xca0>
  d06cd8:	b880004c 	andi	r2,r23,1
  d06cdc:	103fc11e 	bne	r2,zero,d06be4 <_dtoa_r+0xba4>
  d06ce0:	b5bfffc4 	addi	r22,r22,-1
  d06ce4:	b0c00007 	ldb	r3,0(r22)
  d06ce8:	00800c04 	movi	r2,48
  d06cec:	18bffc26 	beq	r3,r2,d06ce0 <_dtoa_r+0xca0>
  d06cf0:	b7000044 	addi	fp,r22,1
  d06cf4:	003fcb06 	br	d06c24 <_dtoa_r+0xbe4>
  d06cf8:	d9800d17 	ldw	r6,52(sp)
  d06cfc:	018fc83a 	sub	r7,zero,r6
  d06d00:	3801f726 	beq	r7,zero,d074e0 <_dtoa_r+0x14a0>
  d06d04:	398003cc 	andi	r6,r7,15
  d06d08:	300c90fa 	slli	r6,r6,3
  d06d0c:	01403474 	movhi	r5,209
  d06d10:	2944cc04 	addi	r5,r5,4912
  d06d14:	d9001217 	ldw	r4,72(sp)
  d06d18:	314d883a 	add	r6,r6,r5
  d06d1c:	30c00117 	ldw	r3,4(r6)
  d06d20:	30800017 	ldw	r2,0(r6)
  d06d24:	d9401317 	ldw	r5,76(sp)
  d06d28:	3821d13a 	srai	r16,r7,4
  d06d2c:	100d883a 	mov	r6,r2
  d06d30:	180f883a 	mov	r7,r3
  d06d34:	0d0bac40 	call	d0bac4 <__muldf3>
  d06d38:	1011883a 	mov	r8,r2
  d06d3c:	1813883a 	mov	r9,r3
  d06d40:	1029883a 	mov	r20,r2
  d06d44:	182b883a 	mov	r21,r3
  d06d48:	8001e526 	beq	r16,zero,d074e0 <_dtoa_r+0x14a0>
  d06d4c:	05800084 	movi	r22,2
  d06d50:	04403474 	movhi	r17,209
  d06d54:	8c44fe04 	addi	r17,r17,5112
  d06d58:	8080004c 	andi	r2,r16,1
  d06d5c:	1005003a 	cmpeq	r2,r2,zero
  d06d60:	1000081e 	bne	r2,zero,d06d84 <_dtoa_r+0xd44>
  d06d64:	89800017 	ldw	r6,0(r17)
  d06d68:	89c00117 	ldw	r7,4(r17)
  d06d6c:	480b883a 	mov	r5,r9
  d06d70:	4009883a 	mov	r4,r8
  d06d74:	0d0bac40 	call	d0bac4 <__muldf3>
  d06d78:	1011883a 	mov	r8,r2
  d06d7c:	b5800044 	addi	r22,r22,1
  d06d80:	1813883a 	mov	r9,r3
  d06d84:	8021d07a 	srai	r16,r16,1
  d06d88:	8c400204 	addi	r17,r17,8
  d06d8c:	803ff21e 	bne	r16,zero,d06d58 <_dtoa_r+0xd18>
  d06d90:	4029883a 	mov	r20,r8
  d06d94:	482b883a 	mov	r21,r9
  d06d98:	003dca06 	br	d064c4 <_dtoa_r+0x484>
  d06d9c:	d9000817 	ldw	r4,32(sp)
  d06da0:	2005003a 	cmpeq	r2,r4,zero
  d06da4:	1001f61e 	bne	r2,zero,d07580 <_dtoa_r+0x1540>
  d06da8:	dc001117 	ldw	r16,68(sp)
  d06dac:	dc801017 	ldw	r18,64(sp)
  d06db0:	18c10cc4 	addi	r3,r3,1075
  d06db4:	003f6106 	br	d06b3c <_dtoa_r+0xafc>
  d06db8:	d8000b15 	stw	zero,44(sp)
  d06dbc:	d9802617 	ldw	r6,152(sp)
  d06dc0:	d8c00d17 	ldw	r3,52(sp)
  d06dc4:	30800044 	addi	r2,r6,1
  d06dc8:	18ad883a 	add	r22,r3,r2
  d06dcc:	b13fffc4 	addi	r4,r22,-1
  d06dd0:	d9000e15 	stw	r4,56(sp)
  d06dd4:	0581f60e 	bge	zero,r22,d075b0 <_dtoa_r+0x1570>
  d06dd8:	dd800f15 	stw	r22,60(sp)
  d06ddc:	003f3006 	br	d06aa0 <_dtoa_r+0xa60>
  d06de0:	d8000b15 	stw	zero,44(sp)
  d06de4:	d9002617 	ldw	r4,152(sp)
  d06de8:	0101eb0e 	bge	zero,r4,d07598 <_dtoa_r+0x1558>
  d06dec:	202d883a 	mov	r22,r4
  d06df0:	d9000e15 	stw	r4,56(sp)
  d06df4:	d9000f15 	stw	r4,60(sp)
  d06df8:	003f2906 	br	d06aa0 <_dtoa_r+0xa60>
  d06dfc:	01800044 	movi	r6,1
  d06e00:	d9800b15 	stw	r6,44(sp)
  d06e04:	003ff706 	br	d06de4 <_dtoa_r+0xda4>
  d06e08:	01000044 	movi	r4,1
  d06e0c:	d9000b15 	stw	r4,44(sp)
  d06e10:	003fea06 	br	d06dbc <_dtoa_r+0xd7c>
  d06e14:	04000c0e 	bge	zero,r16,d06e48 <_dtoa_r+0xe08>
  d06e18:	d9400717 	ldw	r5,28(sp)
  d06e1c:	d9001617 	ldw	r4,88(sp)
  d06e20:	01800044 	movi	r6,1
  d06e24:	0d09b180 	call	d09b18 <__lshift>
  d06e28:	1009883a 	mov	r4,r2
  d06e2c:	900b883a 	mov	r5,r18
  d06e30:	d8800715 	stw	r2,28(sp)
  d06e34:	0d093300 	call	d09330 <__mcmp>
  d06e38:	0081e00e 	bge	zero,r2,d075bc <_dtoa_r+0x157c>
  d06e3c:	bdc00044 	addi	r23,r23,1
  d06e40:	00800e84 	movi	r2,58
  d06e44:	b881a226 	beq	r23,r2,d074d0 <_dtoa_r+0x1490>
  d06e48:	b7000044 	addi	fp,r22,1
  d06e4c:	b5c00005 	stb	r23,0(r22)
  d06e50:	003f7406 	br	d06c24 <_dtoa_r+0xbe4>
  d06e54:	00800e44 	movi	r2,57
  d06e58:	b8819d26 	beq	r23,r2,d074d0 <_dtoa_r+0x1490>
  d06e5c:	053ffa0e 	bge	zero,r20,d06e48 <_dtoa_r+0xe08>
  d06e60:	8dc00c44 	addi	r23,r17,49
  d06e64:	003ff806 	br	d06e48 <_dtoa_r+0xe08>
  d06e68:	d9001617 	ldw	r4,88(sp)
  d06e6c:	a80b883a 	mov	r5,r21
  d06e70:	04000044 	movi	r16,1
  d06e74:	0d091d40 	call	d091d4 <_Bfree>
  d06e78:	003edf06 	br	d069f8 <_dtoa_r+0x9b8>
  d06e7c:	d9001617 	ldw	r4,88(sp)
  d06e80:	980b883a 	mov	r5,r19
  d06e84:	01800284 	movi	r6,10
  d06e88:	000f883a 	mov	r7,zero
  d06e8c:	0d09e880 	call	d09e88 <__multadd>
  d06e90:	1027883a 	mov	r19,r2
  d06e94:	d8800615 	stw	r2,24(sp)
  d06e98:	003ebb06 	br	d06988 <_dtoa_r+0x948>
  d06e9c:	d9801117 	ldw	r6,68(sp)
  d06ea0:	d8800d17 	ldw	r2,52(sp)
  d06ea4:	d8000915 	stw	zero,36(sp)
  d06ea8:	308dc83a 	sub	r6,r6,r2
  d06eac:	0087c83a 	sub	r3,zero,r2
  d06eb0:	d9801115 	stw	r6,68(sp)
  d06eb4:	d8c01015 	stw	r3,64(sp)
  d06eb8:	003cfe06 	br	d062b4 <_dtoa_r+0x274>
  d06ebc:	018dc83a 	sub	r6,zero,r6
  d06ec0:	d9801115 	stw	r6,68(sp)
  d06ec4:	d8000a15 	stw	zero,40(sp)
  d06ec8:	003cf306 	br	d06298 <_dtoa_r+0x258>
  d06ecc:	d9000d17 	ldw	r4,52(sp)
  d06ed0:	0d0c0a80 	call	d0c0a8 <__floatsidf>
  d06ed4:	880b883a 	mov	r5,r17
  d06ed8:	8009883a 	mov	r4,r16
  d06edc:	180f883a 	mov	r7,r3
  d06ee0:	100d883a 	mov	r6,r2
  d06ee4:	0d0317c0 	call	d0317c <__nedf2>
  d06ee8:	103ce126 	beq	r2,zero,d06270 <_dtoa_r+0x230>
  d06eec:	d9800d17 	ldw	r6,52(sp)
  d06ef0:	31bfffc4 	addi	r6,r6,-1
  d06ef4:	d9800d15 	stw	r6,52(sp)
  d06ef8:	003cdd06 	br	d06270 <_dtoa_r+0x230>
  d06efc:	d9000717 	ldw	r4,28(sp)
  d06f00:	900b883a 	mov	r5,r18
  d06f04:	0d093300 	call	d09330 <__mcmp>
  d06f08:	103e8d0e 	bge	r2,zero,d06940 <_dtoa_r+0x900>
  d06f0c:	d9400717 	ldw	r5,28(sp)
  d06f10:	d9001617 	ldw	r4,88(sp)
  d06f14:	01800284 	movi	r6,10
  d06f18:	000f883a 	mov	r7,zero
  d06f1c:	0d09e880 	call	d09e88 <__multadd>
  d06f20:	d9800d17 	ldw	r6,52(sp)
  d06f24:	d8800715 	stw	r2,28(sp)
  d06f28:	31bfffc4 	addi	r6,r6,-1
  d06f2c:	d9800d15 	stw	r6,52(sp)
  d06f30:	b001a71e 	bne	r22,zero,d075d0 <_dtoa_r+0x1590>
  d06f34:	d8800e17 	ldw	r2,56(sp)
  d06f38:	d8800f15 	stw	r2,60(sp)
  d06f3c:	003e8006 	br	d06940 <_dtoa_r+0x900>
  d06f40:	90800417 	ldw	r2,16(r18)
  d06f44:	1085883a 	add	r2,r2,r2
  d06f48:	1085883a 	add	r2,r2,r2
  d06f4c:	1485883a 	add	r2,r2,r18
  d06f50:	11000417 	ldw	r4,16(r2)
  d06f54:	0d091fc0 	call	d091fc <__hi0bits>
  d06f58:	00c00804 	movi	r3,32
  d06f5c:	1887c83a 	sub	r3,r3,r2
  d06f60:	003e5a06 	br	d068cc <_dtoa_r+0x88c>
  d06f64:	d9400717 	ldw	r5,28(sp)
  d06f68:	d9801017 	ldw	r6,64(sp)
  d06f6c:	d9001617 	ldw	r4,88(sp)
  d06f70:	0d09f880 	call	d09f88 <__pow5mult>
  d06f74:	d8800715 	stw	r2,28(sp)
  d06f78:	003e4306 	br	d06888 <_dtoa_r+0x848>
  d06f7c:	d9800f17 	ldw	r6,60(sp)
  d06f80:	d8800d17 	ldw	r2,52(sp)
  d06f84:	d9800315 	stw	r6,12(sp)
  d06f88:	d8800415 	stw	r2,16(sp)
  d06f8c:	d8c00b17 	ldw	r3,44(sp)
  d06f90:	1805003a 	cmpeq	r2,r3,zero
  d06f94:	1000e21e 	bne	r2,zero,d07320 <_dtoa_r+0x12e0>
  d06f98:	d9000317 	ldw	r4,12(sp)
  d06f9c:	0005883a 	mov	r2,zero
  d06fa0:	00cff834 	movhi	r3,16352
  d06fa4:	200c90fa 	slli	r6,r4,3
  d06fa8:	01003474 	movhi	r4,209
  d06fac:	2104cc04 	addi	r4,r4,4912
  d06fb0:	180b883a 	mov	r5,r3
  d06fb4:	310d883a 	add	r6,r6,r4
  d06fb8:	327fff17 	ldw	r9,-4(r6)
  d06fbc:	323ffe17 	ldw	r8,-8(r6)
  d06fc0:	1009883a 	mov	r4,r2
  d06fc4:	480f883a 	mov	r7,r9
  d06fc8:	400d883a 	mov	r6,r8
  d06fcc:	0d02f240 	call	d02f24 <__divdf3>
  d06fd0:	180b883a 	mov	r5,r3
  d06fd4:	b00d883a 	mov	r6,r22
  d06fd8:	b80f883a 	mov	r7,r23
  d06fdc:	1009883a 	mov	r4,r2
  d06fe0:	0d02e300 	call	d02e30 <__subdf3>
  d06fe4:	a80b883a 	mov	r5,r21
  d06fe8:	a009883a 	mov	r4,r20
  d06fec:	d8c01915 	stw	r3,100(sp)
  d06ff0:	d8801815 	stw	r2,96(sp)
  d06ff4:	0d0c1a00 	call	d0c1a0 <__fixdfsi>
  d06ff8:	1009883a 	mov	r4,r2
  d06ffc:	1027883a 	mov	r19,r2
  d07000:	0d0c0a80 	call	d0c0a8 <__floatsidf>
  d07004:	a80b883a 	mov	r5,r21
  d07008:	a009883a 	mov	r4,r20
  d0700c:	180f883a 	mov	r7,r3
  d07010:	100d883a 	mov	r6,r2
  d07014:	0d02e300 	call	d02e30 <__subdf3>
  d07018:	d9801817 	ldw	r6,96(sp)
  d0701c:	1823883a 	mov	r17,r3
  d07020:	d8801415 	stw	r2,80(sp)
  d07024:	302d883a 	mov	r22,r6
  d07028:	d9800517 	ldw	r6,20(sp)
  d0702c:	9cc00c04 	addi	r19,r19,48
  d07030:	dc401515 	stw	r17,84(sp)
  d07034:	d8c01917 	ldw	r3,100(sp)
  d07038:	34c00005 	stb	r19,0(r6)
  d0703c:	d8800517 	ldw	r2,20(sp)
  d07040:	d9401917 	ldw	r5,100(sp)
  d07044:	d9801417 	ldw	r6,80(sp)
  d07048:	b009883a 	mov	r4,r22
  d0704c:	880f883a 	mov	r7,r17
  d07050:	182f883a 	mov	r23,r3
  d07054:	17000044 	addi	fp,r2,1
  d07058:	0d0bf100 	call	d0bf10 <__gtdf2>
  d0705c:	00804e16 	blt	zero,r2,d07198 <_dtoa_r+0x1158>
  d07060:	d9801417 	ldw	r6,80(sp)
  d07064:	0005883a 	mov	r2,zero
  d07068:	00cffc34 	movhi	r3,16368
  d0706c:	180b883a 	mov	r5,r3
  d07070:	880f883a 	mov	r7,r17
  d07074:	1009883a 	mov	r4,r2
  d07078:	0d02e300 	call	d02e30 <__subdf3>
  d0707c:	d9401917 	ldw	r5,100(sp)
  d07080:	180f883a 	mov	r7,r3
  d07084:	b009883a 	mov	r4,r22
  d07088:	100d883a 	mov	r6,r2
  d0708c:	0d0bf100 	call	d0bf10 <__gtdf2>
  d07090:	00bda216 	blt	zero,r2,d0671c <_dtoa_r+0x6dc>
  d07094:	d8c00317 	ldw	r3,12(sp)
  d07098:	00800044 	movi	r2,1
  d0709c:	10c01216 	blt	r2,r3,d070e8 <_dtoa_r+0x10a8>
  d070a0:	003d4506 	br	d065b8 <_dtoa_r+0x578>
  d070a4:	d9801417 	ldw	r6,80(sp)
  d070a8:	0005883a 	mov	r2,zero
  d070ac:	00cffc34 	movhi	r3,16368
  d070b0:	180b883a 	mov	r5,r3
  d070b4:	880f883a 	mov	r7,r17
  d070b8:	1009883a 	mov	r4,r2
  d070bc:	0d02e300 	call	d02e30 <__subdf3>
  d070c0:	d9c01b17 	ldw	r7,108(sp)
  d070c4:	180b883a 	mov	r5,r3
  d070c8:	1009883a 	mov	r4,r2
  d070cc:	b00d883a 	mov	r6,r22
  d070d0:	0d0c0200 	call	d0c020 <__ltdf2>
  d070d4:	103d9116 	blt	r2,zero,d0671c <_dtoa_r+0x6dc>
  d070d8:	d9800517 	ldw	r6,20(sp)
  d070dc:	d9000317 	ldw	r4,12(sp)
  d070e0:	3105883a 	add	r2,r6,r4
  d070e4:	e0bd3426 	beq	fp,r2,d065b8 <_dtoa_r+0x578>
  d070e8:	04500934 	movhi	r17,16420
  d070ec:	0021883a 	mov	r16,zero
  d070f0:	b80b883a 	mov	r5,r23
  d070f4:	b009883a 	mov	r4,r22
  d070f8:	800d883a 	mov	r6,r16
  d070fc:	880f883a 	mov	r7,r17
  d07100:	0d0bac40 	call	d0bac4 <__muldf3>
  d07104:	d9401517 	ldw	r5,84(sp)
  d07108:	d9001417 	ldw	r4,80(sp)
  d0710c:	880f883a 	mov	r7,r17
  d07110:	000d883a 	mov	r6,zero
  d07114:	d8801a15 	stw	r2,104(sp)
  d07118:	d8c01b15 	stw	r3,108(sp)
  d0711c:	0d0bac40 	call	d0bac4 <__muldf3>
  d07120:	180b883a 	mov	r5,r3
  d07124:	1009883a 	mov	r4,r2
  d07128:	1823883a 	mov	r17,r3
  d0712c:	1021883a 	mov	r16,r2
  d07130:	0d0c1a00 	call	d0c1a0 <__fixdfsi>
  d07134:	1009883a 	mov	r4,r2
  d07138:	102b883a 	mov	r21,r2
  d0713c:	0d0c0a80 	call	d0c0a8 <__floatsidf>
  d07140:	880b883a 	mov	r5,r17
  d07144:	8009883a 	mov	r4,r16
  d07148:	180f883a 	mov	r7,r3
  d0714c:	100d883a 	mov	r6,r2
  d07150:	0d02e300 	call	d02e30 <__subdf3>
  d07154:	1021883a 	mov	r16,r2
  d07158:	d9001b17 	ldw	r4,108(sp)
  d0715c:	1823883a 	mov	r17,r3
  d07160:	dc001415 	stw	r16,80(sp)
  d07164:	ad400c04 	addi	r21,r21,48
  d07168:	dc401515 	stw	r17,84(sp)
  d0716c:	d8801a17 	ldw	r2,104(sp)
  d07170:	e5400005 	stb	r21,0(fp)
  d07174:	202f883a 	mov	r23,r4
  d07178:	d9c01b17 	ldw	r7,108(sp)
  d0717c:	d9001417 	ldw	r4,80(sp)
  d07180:	880b883a 	mov	r5,r17
  d07184:	100d883a 	mov	r6,r2
  d07188:	102d883a 	mov	r22,r2
  d0718c:	e7000044 	addi	fp,fp,1
  d07190:	0d0c0200 	call	d0c020 <__ltdf2>
  d07194:	103fc30e 	bge	r2,zero,d070a4 <_dtoa_r+0x1064>
  d07198:	d9000417 	ldw	r4,16(sp)
  d0719c:	d9000d15 	stw	r4,52(sp)
  d071a0:	003d7106 	br	d06768 <_dtoa_r+0x728>
  d071a4:	d9801717 	ldw	r6,92(sp)
  d071a8:	00800084 	movi	r2,2
  d071ac:	11bde60e 	bge	r2,r6,d06948 <_dtoa_r+0x908>
  d071b0:	203cfb1e 	bne	r4,zero,d065a0 <_dtoa_r+0x560>
  d071b4:	d9001617 	ldw	r4,88(sp)
  d071b8:	900b883a 	mov	r5,r18
  d071bc:	01800144 	movi	r6,5
  d071c0:	000f883a 	mov	r7,zero
  d071c4:	0d09e880 	call	d09e88 <__multadd>
  d071c8:	d9000717 	ldw	r4,28(sp)
  d071cc:	100b883a 	mov	r5,r2
  d071d0:	1025883a 	mov	r18,r2
  d071d4:	0d093300 	call	d09330 <__mcmp>
  d071d8:	00bcf10e 	bge	zero,r2,d065a0 <_dtoa_r+0x560>
  d071dc:	d8c00d17 	ldw	r3,52(sp)
  d071e0:	d9000517 	ldw	r4,20(sp)
  d071e4:	d8000615 	stw	zero,24(sp)
  d071e8:	18c00044 	addi	r3,r3,1
  d071ec:	d8c00d15 	stw	r3,52(sp)
  d071f0:	00800c44 	movi	r2,49
  d071f4:	27000044 	addi	fp,r4,1
  d071f8:	20800005 	stb	r2,0(r4)
  d071fc:	003e8906 	br	d06c24 <_dtoa_r+0xbe4>
  d07200:	d8c00517 	ldw	r3,20(sp)
  d07204:	003bc206 	br	d06110 <_dtoa_r+0xd0>
  d07208:	01803474 	movhi	r6,209
  d0720c:	3184fe04 	addi	r6,r6,5112
  d07210:	30c00917 	ldw	r3,36(r6)
  d07214:	30800817 	ldw	r2,32(r6)
  d07218:	d9001217 	ldw	r4,72(sp)
  d0721c:	d9401317 	ldw	r5,76(sp)
  d07220:	180f883a 	mov	r7,r3
  d07224:	100d883a 	mov	r6,r2
  d07228:	0d02f240 	call	d02f24 <__divdf3>
  d0722c:	948003cc 	andi	r18,r18,15
  d07230:	058000c4 	movi	r22,3
  d07234:	1029883a 	mov	r20,r2
  d07238:	182b883a 	mov	r21,r3
  d0723c:	003c8906 	br	d06464 <_dtoa_r+0x424>
  d07240:	d9001017 	ldw	r4,64(sp)
  d07244:	d9800917 	ldw	r6,36(sp)
  d07248:	0025883a 	mov	r18,zero
  d0724c:	1105c83a 	sub	r2,r2,r4
  d07250:	2089883a 	add	r4,r4,r2
  d07254:	308d883a 	add	r6,r6,r2
  d07258:	d9001015 	stw	r4,64(sp)
  d0725c:	d9800915 	stw	r6,36(sp)
  d07260:	003e3206 	br	d06b2c <_dtoa_r+0xaec>
  d07264:	28800044 	addi	r2,r5,1
  d07268:	27000044 	addi	fp,r4,1
  d0726c:	20800005 	stb	r2,0(r4)
  d07270:	003e6c06 	br	d06c24 <_dtoa_r+0xbe4>
  d07274:	d8800f17 	ldw	r2,60(sp)
  d07278:	00bce016 	blt	zero,r2,d065fc <_dtoa_r+0x5bc>
  d0727c:	d9800f17 	ldw	r6,60(sp)
  d07280:	303cc51e 	bne	r6,zero,d06598 <_dtoa_r+0x558>
  d07284:	0005883a 	mov	r2,zero
  d07288:	00d00534 	movhi	r3,16404
  d0728c:	980b883a 	mov	r5,r19
  d07290:	180f883a 	mov	r7,r3
  d07294:	9009883a 	mov	r4,r18
  d07298:	100d883a 	mov	r6,r2
  d0729c:	0d0bac40 	call	d0bac4 <__muldf3>
  d072a0:	180b883a 	mov	r5,r3
  d072a4:	a80f883a 	mov	r7,r21
  d072a8:	1009883a 	mov	r4,r2
  d072ac:	a00d883a 	mov	r6,r20
  d072b0:	0d0bf980 	call	d0bf98 <__gedf2>
  d072b4:	103cb80e 	bge	r2,zero,d06598 <_dtoa_r+0x558>
  d072b8:	0027883a 	mov	r19,zero
  d072bc:	0025883a 	mov	r18,zero
  d072c0:	003fc606 	br	d071dc <_dtoa_r+0x119c>
  d072c4:	99400117 	ldw	r5,4(r19)
  d072c8:	d9001617 	ldw	r4,88(sp)
  d072cc:	0d097540 	call	d09754 <_Balloc>
  d072d0:	99800417 	ldw	r6,16(r19)
  d072d4:	11000304 	addi	r4,r2,12
  d072d8:	99400304 	addi	r5,r19,12
  d072dc:	318d883a 	add	r6,r6,r6
  d072e0:	318d883a 	add	r6,r6,r6
  d072e4:	31800204 	addi	r6,r6,8
  d072e8:	1023883a 	mov	r17,r2
  d072ec:	0d08fbc0 	call	d08fbc <memcpy>
  d072f0:	d9001617 	ldw	r4,88(sp)
  d072f4:	880b883a 	mov	r5,r17
  d072f8:	01800044 	movi	r6,1
  d072fc:	0d09b180 	call	d09b18 <__lshift>
  d07300:	100b883a 	mov	r5,r2
  d07304:	003d9c06 	br	d06978 <_dtoa_r+0x938>
  d07308:	00800e44 	movi	r2,57
  d0730c:	b8807026 	beq	r23,r2,d074d0 <_dtoa_r+0x1490>
  d07310:	b8800044 	addi	r2,r23,1
  d07314:	b7000044 	addi	fp,r22,1
  d07318:	b0800005 	stb	r2,0(r22)
  d0731c:	003e4106 	br	d06c24 <_dtoa_r+0xbe4>
  d07320:	d8800317 	ldw	r2,12(sp)
  d07324:	01803474 	movhi	r6,209
  d07328:	3184cc04 	addi	r6,r6,4912
  d0732c:	b009883a 	mov	r4,r22
  d07330:	100e90fa 	slli	r7,r2,3
  d07334:	b80b883a 	mov	r5,r23
  d07338:	398f883a 	add	r7,r7,r6
  d0733c:	38bffe17 	ldw	r2,-8(r7)
  d07340:	d9800517 	ldw	r6,20(sp)
  d07344:	38ffff17 	ldw	r3,-4(r7)
  d07348:	37000044 	addi	fp,r6,1
  d0734c:	180f883a 	mov	r7,r3
  d07350:	100d883a 	mov	r6,r2
  d07354:	0d0bac40 	call	d0bac4 <__muldf3>
  d07358:	a80b883a 	mov	r5,r21
  d0735c:	a009883a 	mov	r4,r20
  d07360:	182f883a 	mov	r23,r3
  d07364:	102d883a 	mov	r22,r2
  d07368:	0d0c1a00 	call	d0c1a0 <__fixdfsi>
  d0736c:	1009883a 	mov	r4,r2
  d07370:	1027883a 	mov	r19,r2
  d07374:	0d0c0a80 	call	d0c0a8 <__floatsidf>
  d07378:	a80b883a 	mov	r5,r21
  d0737c:	a009883a 	mov	r4,r20
  d07380:	180f883a 	mov	r7,r3
  d07384:	100d883a 	mov	r6,r2
  d07388:	0d02e300 	call	d02e30 <__subdf3>
  d0738c:	180b883a 	mov	r5,r3
  d07390:	d8c00517 	ldw	r3,20(sp)
  d07394:	9cc00c04 	addi	r19,r19,48
  d07398:	1009883a 	mov	r4,r2
  d0739c:	1cc00005 	stb	r19,0(r3)
  d073a0:	2021883a 	mov	r16,r4
  d073a4:	d9000317 	ldw	r4,12(sp)
  d073a8:	00800044 	movi	r2,1
  d073ac:	2823883a 	mov	r17,r5
  d073b0:	20802226 	beq	r4,r2,d0743c <_dtoa_r+0x13fc>
  d073b4:	1029883a 	mov	r20,r2
  d073b8:	0005883a 	mov	r2,zero
  d073bc:	00d00934 	movhi	r3,16420
  d073c0:	180f883a 	mov	r7,r3
  d073c4:	100d883a 	mov	r6,r2
  d073c8:	880b883a 	mov	r5,r17
  d073cc:	8009883a 	mov	r4,r16
  d073d0:	0d0bac40 	call	d0bac4 <__muldf3>
  d073d4:	180b883a 	mov	r5,r3
  d073d8:	1009883a 	mov	r4,r2
  d073dc:	1823883a 	mov	r17,r3
  d073e0:	1021883a 	mov	r16,r2
  d073e4:	0d0c1a00 	call	d0c1a0 <__fixdfsi>
  d073e8:	1009883a 	mov	r4,r2
  d073ec:	102b883a 	mov	r21,r2
  d073f0:	0d0c0a80 	call	d0c0a8 <__floatsidf>
  d073f4:	880b883a 	mov	r5,r17
  d073f8:	8009883a 	mov	r4,r16
  d073fc:	180f883a 	mov	r7,r3
  d07400:	100d883a 	mov	r6,r2
  d07404:	0d02e300 	call	d02e30 <__subdf3>
  d07408:	180b883a 	mov	r5,r3
  d0740c:	d8c00517 	ldw	r3,20(sp)
  d07410:	1009883a 	mov	r4,r2
  d07414:	ad400c04 	addi	r21,r21,48
  d07418:	1d05883a 	add	r2,r3,r20
  d0741c:	15400005 	stb	r21,0(r2)
  d07420:	2021883a 	mov	r16,r4
  d07424:	d9000317 	ldw	r4,12(sp)
  d07428:	a5000044 	addi	r20,r20,1
  d0742c:	2823883a 	mov	r17,r5
  d07430:	a13fe11e 	bne	r20,r4,d073b8 <_dtoa_r+0x1378>
  d07434:	e505883a 	add	r2,fp,r20
  d07438:	173fffc4 	addi	fp,r2,-1
  d0743c:	0025883a 	mov	r18,zero
  d07440:	04cff834 	movhi	r19,16352
  d07444:	b009883a 	mov	r4,r22
  d07448:	b80b883a 	mov	r5,r23
  d0744c:	900d883a 	mov	r6,r18
  d07450:	980f883a 	mov	r7,r19
  d07454:	0d02eb00 	call	d02eb0 <__adddf3>
  d07458:	180b883a 	mov	r5,r3
  d0745c:	1009883a 	mov	r4,r2
  d07460:	800d883a 	mov	r6,r16
  d07464:	880f883a 	mov	r7,r17
  d07468:	0d0c0200 	call	d0c020 <__ltdf2>
  d0746c:	103cab16 	blt	r2,zero,d0671c <_dtoa_r+0x6dc>
  d07470:	0009883a 	mov	r4,zero
  d07474:	980b883a 	mov	r5,r19
  d07478:	b80f883a 	mov	r7,r23
  d0747c:	b00d883a 	mov	r6,r22
  d07480:	0d02e300 	call	d02e30 <__subdf3>
  d07484:	180b883a 	mov	r5,r3
  d07488:	880f883a 	mov	r7,r17
  d0748c:	1009883a 	mov	r4,r2
  d07490:	800d883a 	mov	r6,r16
  d07494:	0d0bf100 	call	d0bf10 <__gtdf2>
  d07498:	00bc470e 	bge	zero,r2,d065b8 <_dtoa_r+0x578>
  d0749c:	00c00c04 	movi	r3,48
  d074a0:	e73fffc4 	addi	fp,fp,-1
  d074a4:	e0800007 	ldb	r2,0(fp)
  d074a8:	10fffd26 	beq	r2,r3,d074a0 <_dtoa_r+0x1460>
  d074ac:	d9800417 	ldw	r6,16(sp)
  d074b0:	e7000044 	addi	fp,fp,1
  d074b4:	d9800d15 	stw	r6,52(sp)
  d074b8:	003cab06 	br	d06768 <_dtoa_r+0x728>
  d074bc:	d8c00f17 	ldw	r3,60(sp)
  d074c0:	d9001117 	ldw	r4,68(sp)
  d074c4:	20e1c83a 	sub	r16,r4,r3
  d074c8:	0007883a 	mov	r3,zero
  d074cc:	003d9b06 	br	d06b3c <_dtoa_r+0xafc>
  d074d0:	00800e44 	movi	r2,57
  d074d4:	b0800005 	stb	r2,0(r22)
  d074d8:	b5800044 	addi	r22,r22,1
  d074dc:	003dc106 	br	d06be4 <_dtoa_r+0xba4>
  d074e0:	05800084 	movi	r22,2
  d074e4:	003bf706 	br	d064c4 <_dtoa_r+0x484>
  d074e8:	d9000f17 	ldw	r4,60(sp)
  d074ec:	013c000e 	bge	zero,r4,d064f0 <_dtoa_r+0x4b0>
  d074f0:	d9800e17 	ldw	r6,56(sp)
  d074f4:	01bc300e 	bge	zero,r6,d065b8 <_dtoa_r+0x578>
  d074f8:	0005883a 	mov	r2,zero
  d074fc:	00d00934 	movhi	r3,16420
  d07500:	a80b883a 	mov	r5,r21
  d07504:	180f883a 	mov	r7,r3
  d07508:	a009883a 	mov	r4,r20
  d0750c:	100d883a 	mov	r6,r2
  d07510:	0d0bac40 	call	d0bac4 <__muldf3>
  d07514:	b1000044 	addi	r4,r22,1
  d07518:	1021883a 	mov	r16,r2
  d0751c:	1823883a 	mov	r17,r3
  d07520:	0d0c0a80 	call	d0c0a8 <__floatsidf>
  d07524:	880b883a 	mov	r5,r17
  d07528:	8009883a 	mov	r4,r16
  d0752c:	180f883a 	mov	r7,r3
  d07530:	100d883a 	mov	r6,r2
  d07534:	0d0bac40 	call	d0bac4 <__muldf3>
  d07538:	0011883a 	mov	r8,zero
  d0753c:	02500734 	movhi	r9,16412
  d07540:	180b883a 	mov	r5,r3
  d07544:	480f883a 	mov	r7,r9
  d07548:	1009883a 	mov	r4,r2
  d0754c:	400d883a 	mov	r6,r8
  d07550:	0d02eb00 	call	d02eb0 <__adddf3>
  d07554:	102d883a 	mov	r22,r2
  d07558:	00bf3034 	movhi	r2,64704
  d0755c:	10ef883a 	add	r23,r2,r3
  d07560:	d8800d17 	ldw	r2,52(sp)
  d07564:	d8c00e17 	ldw	r3,56(sp)
  d07568:	8029883a 	mov	r20,r16
  d0756c:	10bfffc4 	addi	r2,r2,-1
  d07570:	882b883a 	mov	r21,r17
  d07574:	d8800415 	stw	r2,16(sp)
  d07578:	d8c00315 	stw	r3,12(sp)
  d0757c:	003e8306 	br	d06f8c <_dtoa_r+0xf4c>
  d07580:	d8800117 	ldw	r2,4(sp)
  d07584:	dc001117 	ldw	r16,68(sp)
  d07588:	dc801017 	ldw	r18,64(sp)
  d0758c:	00c00d84 	movi	r3,54
  d07590:	1887c83a 	sub	r3,r3,r2
  d07594:	003d6906 	br	d06b3c <_dtoa_r+0xafc>
  d07598:	01800044 	movi	r6,1
  d0759c:	3021883a 	mov	r16,r6
  d075a0:	d9800f15 	stw	r6,60(sp)
  d075a4:	d9802615 	stw	r6,152(sp)
  d075a8:	d9800e15 	stw	r6,56(sp)
  d075ac:	003b9306 	br	d063fc <_dtoa_r+0x3bc>
  d075b0:	b021883a 	mov	r16,r22
  d075b4:	dd800f15 	stw	r22,60(sp)
  d075b8:	003b9006 	br	d063fc <_dtoa_r+0x3bc>
  d075bc:	103e221e 	bne	r2,zero,d06e48 <_dtoa_r+0xe08>
  d075c0:	b880004c 	andi	r2,r23,1
  d075c4:	1005003a 	cmpeq	r2,r2,zero
  d075c8:	103e1f1e 	bne	r2,zero,d06e48 <_dtoa_r+0xe08>
  d075cc:	003e1b06 	br	d06e3c <_dtoa_r+0xdfc>
  d075d0:	d9001617 	ldw	r4,88(sp)
  d075d4:	980b883a 	mov	r5,r19
  d075d8:	01800284 	movi	r6,10
  d075dc:	000f883a 	mov	r7,zero
  d075e0:	0d09e880 	call	d09e88 <__multadd>
  d075e4:	d8c00e17 	ldw	r3,56(sp)
  d075e8:	1027883a 	mov	r19,r2
  d075ec:	d8c00f15 	stw	r3,60(sp)
  d075f0:	003cd306 	br	d06940 <_dtoa_r+0x900>

00d075f4 <_fflush_r>:
  d075f4:	defffb04 	addi	sp,sp,-20
  d075f8:	dcc00315 	stw	r19,12(sp)
  d075fc:	dc800215 	stw	r18,8(sp)
  d07600:	dfc00415 	stw	ra,16(sp)
  d07604:	dc400115 	stw	r17,4(sp)
  d07608:	dc000015 	stw	r16,0(sp)
  d0760c:	2027883a 	mov	r19,r4
  d07610:	2825883a 	mov	r18,r5
  d07614:	20000226 	beq	r4,zero,d07620 <_fflush_r+0x2c>
  d07618:	20800e17 	ldw	r2,56(r4)
  d0761c:	10005626 	beq	r2,zero,d07778 <_fflush_r+0x184>
  d07620:	9100030b 	ldhu	r4,12(r18)
  d07624:	20ffffcc 	andi	r3,r4,65535
  d07628:	18e0001c 	xori	r3,r3,32768
  d0762c:	18e00004 	addi	r3,r3,-32768
  d07630:	1880020c 	andi	r2,r3,8
  d07634:	1000261e 	bne	r2,zero,d076d0 <_fflush_r+0xdc>
  d07638:	90c00117 	ldw	r3,4(r18)
  d0763c:	20820014 	ori	r2,r4,2048
  d07640:	9080030d 	sth	r2,12(r18)
  d07644:	1009883a 	mov	r4,r2
  d07648:	00c0400e 	bge	zero,r3,d0774c <_fflush_r+0x158>
  d0764c:	92000a17 	ldw	r8,40(r18)
  d07650:	40004026 	beq	r8,zero,d07754 <_fflush_r+0x160>
  d07654:	2084000c 	andi	r2,r4,4096
  d07658:	10005326 	beq	r2,zero,d077a8 <_fflush_r+0x1b4>
  d0765c:	94001417 	ldw	r16,80(r18)
  d07660:	9080030b 	ldhu	r2,12(r18)
  d07664:	1080010c 	andi	r2,r2,4
  d07668:	1000481e 	bne	r2,zero,d0778c <_fflush_r+0x198>
  d0766c:	91400717 	ldw	r5,28(r18)
  d07670:	9809883a 	mov	r4,r19
  d07674:	800d883a 	mov	r6,r16
  d07678:	000f883a 	mov	r7,zero
  d0767c:	403ee83a 	callr	r8
  d07680:	8080261e 	bne	r16,r2,d0771c <_fflush_r+0x128>
  d07684:	9080030b 	ldhu	r2,12(r18)
  d07688:	91000417 	ldw	r4,16(r18)
  d0768c:	90000115 	stw	zero,4(r18)
  d07690:	10bdffcc 	andi	r2,r2,63487
  d07694:	10ffffcc 	andi	r3,r2,65535
  d07698:	18c4000c 	andi	r3,r3,4096
  d0769c:	9080030d 	sth	r2,12(r18)
  d076a0:	91000015 	stw	r4,0(r18)
  d076a4:	18002b26 	beq	r3,zero,d07754 <_fflush_r+0x160>
  d076a8:	0007883a 	mov	r3,zero
  d076ac:	1805883a 	mov	r2,r3
  d076b0:	94001415 	stw	r16,80(r18)
  d076b4:	dfc00417 	ldw	ra,16(sp)
  d076b8:	dcc00317 	ldw	r19,12(sp)
  d076bc:	dc800217 	ldw	r18,8(sp)
  d076c0:	dc400117 	ldw	r17,4(sp)
  d076c4:	dc000017 	ldw	r16,0(sp)
  d076c8:	dec00504 	addi	sp,sp,20
  d076cc:	f800283a 	ret
  d076d0:	94400417 	ldw	r17,16(r18)
  d076d4:	88001f26 	beq	r17,zero,d07754 <_fflush_r+0x160>
  d076d8:	90800017 	ldw	r2,0(r18)
  d076dc:	18c000cc 	andi	r3,r3,3
  d076e0:	94400015 	stw	r17,0(r18)
  d076e4:	1461c83a 	sub	r16,r2,r17
  d076e8:	18002526 	beq	r3,zero,d07780 <_fflush_r+0x18c>
  d076ec:	0005883a 	mov	r2,zero
  d076f0:	90800215 	stw	r2,8(r18)
  d076f4:	0400170e 	bge	zero,r16,d07754 <_fflush_r+0x160>
  d076f8:	90c00917 	ldw	r3,36(r18)
  d076fc:	91400717 	ldw	r5,28(r18)
  d07700:	880d883a 	mov	r6,r17
  d07704:	800f883a 	mov	r7,r16
  d07708:	9809883a 	mov	r4,r19
  d0770c:	183ee83a 	callr	r3
  d07710:	88a3883a 	add	r17,r17,r2
  d07714:	80a1c83a 	sub	r16,r16,r2
  d07718:	00bff616 	blt	zero,r2,d076f4 <_fflush_r+0x100>
  d0771c:	9080030b 	ldhu	r2,12(r18)
  d07720:	00ffffc4 	movi	r3,-1
  d07724:	10801014 	ori	r2,r2,64
  d07728:	9080030d 	sth	r2,12(r18)
  d0772c:	1805883a 	mov	r2,r3
  d07730:	dfc00417 	ldw	ra,16(sp)
  d07734:	dcc00317 	ldw	r19,12(sp)
  d07738:	dc800217 	ldw	r18,8(sp)
  d0773c:	dc400117 	ldw	r17,4(sp)
  d07740:	dc000017 	ldw	r16,0(sp)
  d07744:	dec00504 	addi	sp,sp,20
  d07748:	f800283a 	ret
  d0774c:	90800f17 	ldw	r2,60(r18)
  d07750:	00bfbe16 	blt	zero,r2,d0764c <_fflush_r+0x58>
  d07754:	0007883a 	mov	r3,zero
  d07758:	1805883a 	mov	r2,r3
  d0775c:	dfc00417 	ldw	ra,16(sp)
  d07760:	dcc00317 	ldw	r19,12(sp)
  d07764:	dc800217 	ldw	r18,8(sp)
  d07768:	dc400117 	ldw	r17,4(sp)
  d0776c:	dc000017 	ldw	r16,0(sp)
  d07770:	dec00504 	addi	sp,sp,20
  d07774:	f800283a 	ret
  d07778:	0d0788c0 	call	d0788c <__sinit>
  d0777c:	003fa806 	br	d07620 <_fflush_r+0x2c>
  d07780:	90800517 	ldw	r2,20(r18)
  d07784:	90800215 	stw	r2,8(r18)
  d07788:	003fda06 	br	d076f4 <_fflush_r+0x100>
  d0778c:	90800117 	ldw	r2,4(r18)
  d07790:	90c00c17 	ldw	r3,48(r18)
  d07794:	80a1c83a 	sub	r16,r16,r2
  d07798:	183fb426 	beq	r3,zero,d0766c <_fflush_r+0x78>
  d0779c:	90800f17 	ldw	r2,60(r18)
  d077a0:	80a1c83a 	sub	r16,r16,r2
  d077a4:	003fb106 	br	d0766c <_fflush_r+0x78>
  d077a8:	91400717 	ldw	r5,28(r18)
  d077ac:	9809883a 	mov	r4,r19
  d077b0:	000d883a 	mov	r6,zero
  d077b4:	01c00044 	movi	r7,1
  d077b8:	403ee83a 	callr	r8
  d077bc:	1021883a 	mov	r16,r2
  d077c0:	00bfffc4 	movi	r2,-1
  d077c4:	80800226 	beq	r16,r2,d077d0 <_fflush_r+0x1dc>
  d077c8:	92000a17 	ldw	r8,40(r18)
  d077cc:	003fa406 	br	d07660 <_fflush_r+0x6c>
  d077d0:	98c00017 	ldw	r3,0(r19)
  d077d4:	00800744 	movi	r2,29
  d077d8:	18bfde26 	beq	r3,r2,d07754 <_fflush_r+0x160>
  d077dc:	9080030b 	ldhu	r2,12(r18)
  d077e0:	8007883a 	mov	r3,r16
  d077e4:	10801014 	ori	r2,r2,64
  d077e8:	9080030d 	sth	r2,12(r18)
  d077ec:	003fcf06 	br	d0772c <_fflush_r+0x138>

00d077f0 <fflush>:
  d077f0:	01403434 	movhi	r5,208
  d077f4:	295d7d04 	addi	r5,r5,30196
  d077f8:	2007883a 	mov	r3,r4
  d077fc:	20000526 	beq	r4,zero,d07814 <fflush+0x24>
  d07800:	00803474 	movhi	r2,209
  d07804:	108c4a04 	addi	r2,r2,12584
  d07808:	11000017 	ldw	r4,0(r2)
  d0780c:	180b883a 	mov	r5,r3
  d07810:	0d075f41 	jmpi	d075f4 <_fflush_r>
  d07814:	00803474 	movhi	r2,209
  d07818:	108c4b04 	addi	r2,r2,12588
  d0781c:	11000017 	ldw	r4,0(r2)
  d07820:	0d083c01 	jmpi	d083c0 <_fwalk_reent>

00d07824 <std>:
  d07824:	00803474 	movhi	r2,209
  d07828:	10aa2704 	addi	r2,r2,-22372
  d0782c:	20800b15 	stw	r2,44(r4)
  d07830:	00803474 	movhi	r2,209
  d07834:	10aa6204 	addi	r2,r2,-22136
  d07838:	20800815 	stw	r2,32(r4)
  d0783c:	00c03474 	movhi	r3,209
  d07840:	18ea4304 	addi	r3,r3,-22260
  d07844:	00803474 	movhi	r2,209
  d07848:	10aa2904 	addi	r2,r2,-22364
  d0784c:	2140030d 	sth	r5,12(r4)
  d07850:	2180038d 	sth	r6,14(r4)
  d07854:	20c00915 	stw	r3,36(r4)
  d07858:	20800a15 	stw	r2,40(r4)
  d0785c:	20000015 	stw	zero,0(r4)
  d07860:	20000115 	stw	zero,4(r4)
  d07864:	20000215 	stw	zero,8(r4)
  d07868:	20000415 	stw	zero,16(r4)
  d0786c:	20000515 	stw	zero,20(r4)
  d07870:	20000615 	stw	zero,24(r4)
  d07874:	21000715 	stw	r4,28(r4)
  d07878:	f800283a 	ret

00d0787c <__sfp_lock_acquire>:
  d0787c:	f800283a 	ret

00d07880 <__sfp_lock_release>:
  d07880:	f800283a 	ret

00d07884 <__sinit_lock_acquire>:
  d07884:	f800283a 	ret

00d07888 <__sinit_lock_release>:
  d07888:	f800283a 	ret

00d0788c <__sinit>:
  d0788c:	20800e17 	ldw	r2,56(r4)
  d07890:	defffd04 	addi	sp,sp,-12
  d07894:	dc400115 	stw	r17,4(sp)
  d07898:	dc000015 	stw	r16,0(sp)
  d0789c:	dfc00215 	stw	ra,8(sp)
  d078a0:	04400044 	movi	r17,1
  d078a4:	01400104 	movi	r5,4
  d078a8:	000d883a 	mov	r6,zero
  d078ac:	2021883a 	mov	r16,r4
  d078b0:	2200bb04 	addi	r8,r4,748
  d078b4:	200f883a 	mov	r7,r4
  d078b8:	10000526 	beq	r2,zero,d078d0 <__sinit+0x44>
  d078bc:	dfc00217 	ldw	ra,8(sp)
  d078c0:	dc400117 	ldw	r17,4(sp)
  d078c4:	dc000017 	ldw	r16,0(sp)
  d078c8:	dec00304 	addi	sp,sp,12
  d078cc:	f800283a 	ret
  d078d0:	21000117 	ldw	r4,4(r4)
  d078d4:	00803434 	movhi	r2,208
  d078d8:	109e5c04 	addi	r2,r2,31088
  d078dc:	00c000c4 	movi	r3,3
  d078e0:	80800f15 	stw	r2,60(r16)
  d078e4:	80c0b915 	stw	r3,740(r16)
  d078e8:	8200ba15 	stw	r8,744(r16)
  d078ec:	84400e15 	stw	r17,56(r16)
  d078f0:	8000b815 	stw	zero,736(r16)
  d078f4:	0d078240 	call	d07824 <std>
  d078f8:	81000217 	ldw	r4,8(r16)
  d078fc:	880d883a 	mov	r6,r17
  d07900:	800f883a 	mov	r7,r16
  d07904:	01400284 	movi	r5,10
  d07908:	0d078240 	call	d07824 <std>
  d0790c:	81000317 	ldw	r4,12(r16)
  d07910:	800f883a 	mov	r7,r16
  d07914:	01400484 	movi	r5,18
  d07918:	01800084 	movi	r6,2
  d0791c:	dfc00217 	ldw	ra,8(sp)
  d07920:	dc400117 	ldw	r17,4(sp)
  d07924:	dc000017 	ldw	r16,0(sp)
  d07928:	dec00304 	addi	sp,sp,12
  d0792c:	0d078241 	jmpi	d07824 <std>

00d07930 <__fp_lock>:
  d07930:	0005883a 	mov	r2,zero
  d07934:	f800283a 	ret

00d07938 <__fp_unlock>:
  d07938:	0005883a 	mov	r2,zero
  d0793c:	f800283a 	ret

00d07940 <__fp_unlock_all>:
  d07940:	00803474 	movhi	r2,209
  d07944:	108c4a04 	addi	r2,r2,12584
  d07948:	11000017 	ldw	r4,0(r2)
  d0794c:	01403434 	movhi	r5,208
  d07950:	295e4e04 	addi	r5,r5,31032
  d07954:	0d084881 	jmpi	d08488 <_fwalk>

00d07958 <__fp_lock_all>:
  d07958:	00803474 	movhi	r2,209
  d0795c:	108c4a04 	addi	r2,r2,12584
  d07960:	11000017 	ldw	r4,0(r2)
  d07964:	01403434 	movhi	r5,208
  d07968:	295e4c04 	addi	r5,r5,31024
  d0796c:	0d084881 	jmpi	d08488 <_fwalk>

00d07970 <_cleanup_r>:
  d07970:	01403474 	movhi	r5,209
  d07974:	296b5404 	addi	r5,r5,-21168
  d07978:	0d084881 	jmpi	d08488 <_fwalk>

00d0797c <_cleanup>:
  d0797c:	00803474 	movhi	r2,209
  d07980:	108c4b04 	addi	r2,r2,12588
  d07984:	11000017 	ldw	r4,0(r2)
  d07988:	0d079701 	jmpi	d07970 <_cleanup_r>

00d0798c <__sfmoreglue>:
  d0798c:	defffc04 	addi	sp,sp,-16
  d07990:	dc400115 	stw	r17,4(sp)
  d07994:	2c401724 	muli	r17,r5,92
  d07998:	dc800215 	stw	r18,8(sp)
  d0799c:	2825883a 	mov	r18,r5
  d079a0:	89400304 	addi	r5,r17,12
  d079a4:	dc000015 	stw	r16,0(sp)
  d079a8:	dfc00315 	stw	ra,12(sp)
  d079ac:	0d087980 	call	d08798 <_malloc_r>
  d079b0:	0021883a 	mov	r16,zero
  d079b4:	880d883a 	mov	r6,r17
  d079b8:	000b883a 	mov	r5,zero
  d079bc:	10000626 	beq	r2,zero,d079d8 <__sfmoreglue+0x4c>
  d079c0:	11000304 	addi	r4,r2,12
  d079c4:	14800115 	stw	r18,4(r2)
  d079c8:	10000015 	stw	zero,0(r2)
  d079cc:	11000215 	stw	r4,8(r2)
  d079d0:	1021883a 	mov	r16,r2
  d079d4:	0d0913c0 	call	d0913c <memset>
  d079d8:	8005883a 	mov	r2,r16
  d079dc:	dfc00317 	ldw	ra,12(sp)
  d079e0:	dc800217 	ldw	r18,8(sp)
  d079e4:	dc400117 	ldw	r17,4(sp)
  d079e8:	dc000017 	ldw	r16,0(sp)
  d079ec:	dec00404 	addi	sp,sp,16
  d079f0:	f800283a 	ret

00d079f4 <__sfp>:
  d079f4:	defffd04 	addi	sp,sp,-12
  d079f8:	00803474 	movhi	r2,209
  d079fc:	108c4b04 	addi	r2,r2,12588
  d07a00:	dc000015 	stw	r16,0(sp)
  d07a04:	14000017 	ldw	r16,0(r2)
  d07a08:	dc400115 	stw	r17,4(sp)
  d07a0c:	dfc00215 	stw	ra,8(sp)
  d07a10:	80800e17 	ldw	r2,56(r16)
  d07a14:	2023883a 	mov	r17,r4
  d07a18:	10002626 	beq	r2,zero,d07ab4 <__sfp+0xc0>
  d07a1c:	8400b804 	addi	r16,r16,736
  d07a20:	80800117 	ldw	r2,4(r16)
  d07a24:	81000217 	ldw	r4,8(r16)
  d07a28:	10ffffc4 	addi	r3,r2,-1
  d07a2c:	18000916 	blt	r3,zero,d07a54 <__sfp+0x60>
  d07a30:	2080030f 	ldh	r2,12(r4)
  d07a34:	10000b26 	beq	r2,zero,d07a64 <__sfp+0x70>
  d07a38:	017fffc4 	movi	r5,-1
  d07a3c:	00000206 	br	d07a48 <__sfp+0x54>
  d07a40:	2080030f 	ldh	r2,12(r4)
  d07a44:	10000726 	beq	r2,zero,d07a64 <__sfp+0x70>
  d07a48:	18ffffc4 	addi	r3,r3,-1
  d07a4c:	21001704 	addi	r4,r4,92
  d07a50:	197ffb1e 	bne	r3,r5,d07a40 <__sfp+0x4c>
  d07a54:	80800017 	ldw	r2,0(r16)
  d07a58:	10001926 	beq	r2,zero,d07ac0 <__sfp+0xcc>
  d07a5c:	1021883a 	mov	r16,r2
  d07a60:	003fef06 	br	d07a20 <__sfp+0x2c>
  d07a64:	00bfffc4 	movi	r2,-1
  d07a68:	00c00044 	movi	r3,1
  d07a6c:	2080038d 	sth	r2,14(r4)
  d07a70:	20c0030d 	sth	r3,12(r4)
  d07a74:	20000015 	stw	zero,0(r4)
  d07a78:	20000215 	stw	zero,8(r4)
  d07a7c:	20000115 	stw	zero,4(r4)
  d07a80:	20000415 	stw	zero,16(r4)
  d07a84:	20000515 	stw	zero,20(r4)
  d07a88:	20000615 	stw	zero,24(r4)
  d07a8c:	20000c15 	stw	zero,48(r4)
  d07a90:	20000d15 	stw	zero,52(r4)
  d07a94:	20001115 	stw	zero,68(r4)
  d07a98:	20001215 	stw	zero,72(r4)
  d07a9c:	2005883a 	mov	r2,r4
  d07aa0:	dfc00217 	ldw	ra,8(sp)
  d07aa4:	dc400117 	ldw	r17,4(sp)
  d07aa8:	dc000017 	ldw	r16,0(sp)
  d07aac:	dec00304 	addi	sp,sp,12
  d07ab0:	f800283a 	ret
  d07ab4:	8009883a 	mov	r4,r16
  d07ab8:	0d0788c0 	call	d0788c <__sinit>
  d07abc:	003fd706 	br	d07a1c <__sfp+0x28>
  d07ac0:	8809883a 	mov	r4,r17
  d07ac4:	01400104 	movi	r5,4
  d07ac8:	0d0798c0 	call	d0798c <__sfmoreglue>
  d07acc:	80800015 	stw	r2,0(r16)
  d07ad0:	103fe21e 	bne	r2,zero,d07a5c <__sfp+0x68>
  d07ad4:	00800304 	movi	r2,12
  d07ad8:	0009883a 	mov	r4,zero
  d07adc:	88800015 	stw	r2,0(r17)
  d07ae0:	003fee06 	br	d07a9c <__sfp+0xa8>

00d07ae4 <_malloc_trim_r>:
  d07ae4:	defffb04 	addi	sp,sp,-20
  d07ae8:	dcc00315 	stw	r19,12(sp)
  d07aec:	04c03474 	movhi	r19,209
  d07af0:	9cc66d04 	addi	r19,r19,6580
  d07af4:	dc800215 	stw	r18,8(sp)
  d07af8:	dc400115 	stw	r17,4(sp)
  d07afc:	dc000015 	stw	r16,0(sp)
  d07b00:	2823883a 	mov	r17,r5
  d07b04:	2025883a 	mov	r18,r4
  d07b08:	dfc00415 	stw	ra,16(sp)
  d07b0c:	0d0cbdc0 	call	d0cbdc <__malloc_lock>
  d07b10:	98800217 	ldw	r2,8(r19)
  d07b14:	9009883a 	mov	r4,r18
  d07b18:	000b883a 	mov	r5,zero
  d07b1c:	10c00117 	ldw	r3,4(r2)
  d07b20:	00bfff04 	movi	r2,-4
  d07b24:	18a0703a 	and	r16,r3,r2
  d07b28:	8463c83a 	sub	r17,r16,r17
  d07b2c:	8c43fbc4 	addi	r17,r17,4079
  d07b30:	8822d33a 	srli	r17,r17,12
  d07b34:	0083ffc4 	movi	r2,4095
  d07b38:	8c7fffc4 	addi	r17,r17,-1
  d07b3c:	8822933a 	slli	r17,r17,12
  d07b40:	1440060e 	bge	r2,r17,d07b5c <_malloc_trim_r+0x78>
  d07b44:	0d0a82c0 	call	d0a82c <_sbrk_r>
  d07b48:	98c00217 	ldw	r3,8(r19)
  d07b4c:	9009883a 	mov	r4,r18
  d07b50:	044bc83a 	sub	r5,zero,r17
  d07b54:	80c7883a 	add	r3,r16,r3
  d07b58:	10c00926 	beq	r2,r3,d07b80 <_malloc_trim_r+0x9c>
  d07b5c:	0d0cbfc0 	call	d0cbfc <__malloc_unlock>
  d07b60:	0005883a 	mov	r2,zero
  d07b64:	dfc00417 	ldw	ra,16(sp)
  d07b68:	dcc00317 	ldw	r19,12(sp)
  d07b6c:	dc800217 	ldw	r18,8(sp)
  d07b70:	dc400117 	ldw	r17,4(sp)
  d07b74:	dc000017 	ldw	r16,0(sp)
  d07b78:	dec00504 	addi	sp,sp,20
  d07b7c:	f800283a 	ret
  d07b80:	9009883a 	mov	r4,r18
  d07b84:	0d0a82c0 	call	d0a82c <_sbrk_r>
  d07b88:	844dc83a 	sub	r6,r16,r17
  d07b8c:	00ffffc4 	movi	r3,-1
  d07b90:	9009883a 	mov	r4,r18
  d07b94:	000b883a 	mov	r5,zero
  d07b98:	01c03474 	movhi	r7,209
  d07b9c:	39d36204 	addi	r7,r7,19848
  d07ba0:	31800054 	ori	r6,r6,1
  d07ba4:	10c00926 	beq	r2,r3,d07bcc <_malloc_trim_r+0xe8>
  d07ba8:	38800017 	ldw	r2,0(r7)
  d07bac:	98c00217 	ldw	r3,8(r19)
  d07bb0:	9009883a 	mov	r4,r18
  d07bb4:	1445c83a 	sub	r2,r2,r17
  d07bb8:	38800015 	stw	r2,0(r7)
  d07bbc:	19800115 	stw	r6,4(r3)
  d07bc0:	0d0cbfc0 	call	d0cbfc <__malloc_unlock>
  d07bc4:	00800044 	movi	r2,1
  d07bc8:	003fe606 	br	d07b64 <_malloc_trim_r+0x80>
  d07bcc:	0d0a82c0 	call	d0a82c <_sbrk_r>
  d07bd0:	99800217 	ldw	r6,8(r19)
  d07bd4:	100f883a 	mov	r7,r2
  d07bd8:	9009883a 	mov	r4,r18
  d07bdc:	1187c83a 	sub	r3,r2,r6
  d07be0:	008003c4 	movi	r2,15
  d07be4:	19400054 	ori	r5,r3,1
  d07be8:	10ffdc0e 	bge	r2,r3,d07b5c <_malloc_trim_r+0x78>
  d07bec:	00803474 	movhi	r2,209
  d07bf0:	108c4f04 	addi	r2,r2,12604
  d07bf4:	10c00017 	ldw	r3,0(r2)
  d07bf8:	00803474 	movhi	r2,209
  d07bfc:	10936204 	addi	r2,r2,19848
  d07c00:	31400115 	stw	r5,4(r6)
  d07c04:	38c7c83a 	sub	r3,r7,r3
  d07c08:	10c00015 	stw	r3,0(r2)
  d07c0c:	003fd306 	br	d07b5c <_malloc_trim_r+0x78>

00d07c10 <_free_r>:
  d07c10:	defffd04 	addi	sp,sp,-12
  d07c14:	dc400115 	stw	r17,4(sp)
  d07c18:	dc000015 	stw	r16,0(sp)
  d07c1c:	dfc00215 	stw	ra,8(sp)
  d07c20:	2821883a 	mov	r16,r5
  d07c24:	2023883a 	mov	r17,r4
  d07c28:	28005a26 	beq	r5,zero,d07d94 <_free_r+0x184>
  d07c2c:	0d0cbdc0 	call	d0cbdc <__malloc_lock>
  d07c30:	823ffe04 	addi	r8,r16,-8
  d07c34:	41400117 	ldw	r5,4(r8)
  d07c38:	00bfff84 	movi	r2,-2
  d07c3c:	02803474 	movhi	r10,209
  d07c40:	52866d04 	addi	r10,r10,6580
  d07c44:	288e703a 	and	r7,r5,r2
  d07c48:	41cd883a 	add	r6,r8,r7
  d07c4c:	30c00117 	ldw	r3,4(r6)
  d07c50:	51000217 	ldw	r4,8(r10)
  d07c54:	00bfff04 	movi	r2,-4
  d07c58:	1892703a 	and	r9,r3,r2
  d07c5c:	5017883a 	mov	r11,r10
  d07c60:	31006726 	beq	r6,r4,d07e00 <_free_r+0x1f0>
  d07c64:	2880004c 	andi	r2,r5,1
  d07c68:	1005003a 	cmpeq	r2,r2,zero
  d07c6c:	32400115 	stw	r9,4(r6)
  d07c70:	10001a1e 	bne	r2,zero,d07cdc <_free_r+0xcc>
  d07c74:	000b883a 	mov	r5,zero
  d07c78:	3247883a 	add	r3,r6,r9
  d07c7c:	18800117 	ldw	r2,4(r3)
  d07c80:	1080004c 	andi	r2,r2,1
  d07c84:	1000231e 	bne	r2,zero,d07d14 <_free_r+0x104>
  d07c88:	280ac03a 	cmpne	r5,r5,zero
  d07c8c:	3a4f883a 	add	r7,r7,r9
  d07c90:	2800451e 	bne	r5,zero,d07da8 <_free_r+0x198>
  d07c94:	31000217 	ldw	r4,8(r6)
  d07c98:	00803474 	movhi	r2,209
  d07c9c:	10866f04 	addi	r2,r2,6588
  d07ca0:	20807b26 	beq	r4,r2,d07e90 <_free_r+0x280>
  d07ca4:	30800317 	ldw	r2,12(r6)
  d07ca8:	3a07883a 	add	r3,r7,r8
  d07cac:	19c00015 	stw	r7,0(r3)
  d07cb0:	11000215 	stw	r4,8(r2)
  d07cb4:	20800315 	stw	r2,12(r4)
  d07cb8:	38800054 	ori	r2,r7,1
  d07cbc:	40800115 	stw	r2,4(r8)
  d07cc0:	28001a26 	beq	r5,zero,d07d2c <_free_r+0x11c>
  d07cc4:	8809883a 	mov	r4,r17
  d07cc8:	dfc00217 	ldw	ra,8(sp)
  d07ccc:	dc400117 	ldw	r17,4(sp)
  d07cd0:	dc000017 	ldw	r16,0(sp)
  d07cd4:	dec00304 	addi	sp,sp,12
  d07cd8:	0d0cbfc1 	jmpi	d0cbfc <__malloc_unlock>
  d07cdc:	80bffe17 	ldw	r2,-8(r16)
  d07ce0:	50c00204 	addi	r3,r10,8
  d07ce4:	4091c83a 	sub	r8,r8,r2
  d07ce8:	41000217 	ldw	r4,8(r8)
  d07cec:	388f883a 	add	r7,r7,r2
  d07cf0:	20c06126 	beq	r4,r3,d07e78 <_free_r+0x268>
  d07cf4:	40800317 	ldw	r2,12(r8)
  d07cf8:	3247883a 	add	r3,r6,r9
  d07cfc:	000b883a 	mov	r5,zero
  d07d00:	11000215 	stw	r4,8(r2)
  d07d04:	20800315 	stw	r2,12(r4)
  d07d08:	18800117 	ldw	r2,4(r3)
  d07d0c:	1080004c 	andi	r2,r2,1
  d07d10:	103fdd26 	beq	r2,zero,d07c88 <_free_r+0x78>
  d07d14:	38800054 	ori	r2,r7,1
  d07d18:	3a07883a 	add	r3,r7,r8
  d07d1c:	280ac03a 	cmpne	r5,r5,zero
  d07d20:	40800115 	stw	r2,4(r8)
  d07d24:	19c00015 	stw	r7,0(r3)
  d07d28:	283fe61e 	bne	r5,zero,d07cc4 <_free_r+0xb4>
  d07d2c:	00807fc4 	movi	r2,511
  d07d30:	11c01f2e 	bgeu	r2,r7,d07db0 <_free_r+0x1a0>
  d07d34:	3806d27a 	srli	r3,r7,9
  d07d38:	1800481e 	bne	r3,zero,d07e5c <_free_r+0x24c>
  d07d3c:	3804d0fa 	srli	r2,r7,3
  d07d40:	100690fa 	slli	r3,r2,3
  d07d44:	1acd883a 	add	r6,r3,r11
  d07d48:	31400217 	ldw	r5,8(r6)
  d07d4c:	31405926 	beq	r6,r5,d07eb4 <_free_r+0x2a4>
  d07d50:	28800117 	ldw	r2,4(r5)
  d07d54:	00ffff04 	movi	r3,-4
  d07d58:	10c4703a 	and	r2,r2,r3
  d07d5c:	3880022e 	bgeu	r7,r2,d07d68 <_free_r+0x158>
  d07d60:	29400217 	ldw	r5,8(r5)
  d07d64:	317ffa1e 	bne	r6,r5,d07d50 <_free_r+0x140>
  d07d68:	29800317 	ldw	r6,12(r5)
  d07d6c:	41800315 	stw	r6,12(r8)
  d07d70:	41400215 	stw	r5,8(r8)
  d07d74:	8809883a 	mov	r4,r17
  d07d78:	2a000315 	stw	r8,12(r5)
  d07d7c:	32000215 	stw	r8,8(r6)
  d07d80:	dfc00217 	ldw	ra,8(sp)
  d07d84:	dc400117 	ldw	r17,4(sp)
  d07d88:	dc000017 	ldw	r16,0(sp)
  d07d8c:	dec00304 	addi	sp,sp,12
  d07d90:	0d0cbfc1 	jmpi	d0cbfc <__malloc_unlock>
  d07d94:	dfc00217 	ldw	ra,8(sp)
  d07d98:	dc400117 	ldw	r17,4(sp)
  d07d9c:	dc000017 	ldw	r16,0(sp)
  d07da0:	dec00304 	addi	sp,sp,12
  d07da4:	f800283a 	ret
  d07da8:	31000217 	ldw	r4,8(r6)
  d07dac:	003fbd06 	br	d07ca4 <_free_r+0x94>
  d07db0:	3806d0fa 	srli	r3,r7,3
  d07db4:	00800044 	movi	r2,1
  d07db8:	51400117 	ldw	r5,4(r10)
  d07dbc:	180890fa 	slli	r4,r3,3
  d07dc0:	1807d0ba 	srai	r3,r3,2
  d07dc4:	22c9883a 	add	r4,r4,r11
  d07dc8:	21800217 	ldw	r6,8(r4)
  d07dcc:	10c4983a 	sll	r2,r2,r3
  d07dd0:	41000315 	stw	r4,12(r8)
  d07dd4:	41800215 	stw	r6,8(r8)
  d07dd8:	288ab03a 	or	r5,r5,r2
  d07ddc:	22000215 	stw	r8,8(r4)
  d07de0:	8809883a 	mov	r4,r17
  d07de4:	51400115 	stw	r5,4(r10)
  d07de8:	32000315 	stw	r8,12(r6)
  d07dec:	dfc00217 	ldw	ra,8(sp)
  d07df0:	dc400117 	ldw	r17,4(sp)
  d07df4:	dc000017 	ldw	r16,0(sp)
  d07df8:	dec00304 	addi	sp,sp,12
  d07dfc:	0d0cbfc1 	jmpi	d0cbfc <__malloc_unlock>
  d07e00:	2880004c 	andi	r2,r5,1
  d07e04:	3a4d883a 	add	r6,r7,r9
  d07e08:	1000071e 	bne	r2,zero,d07e28 <_free_r+0x218>
  d07e0c:	80bffe17 	ldw	r2,-8(r16)
  d07e10:	4091c83a 	sub	r8,r8,r2
  d07e14:	41000317 	ldw	r4,12(r8)
  d07e18:	40c00217 	ldw	r3,8(r8)
  d07e1c:	308d883a 	add	r6,r6,r2
  d07e20:	20c00215 	stw	r3,8(r4)
  d07e24:	19000315 	stw	r4,12(r3)
  d07e28:	00803474 	movhi	r2,209
  d07e2c:	108c4e04 	addi	r2,r2,12600
  d07e30:	11000017 	ldw	r4,0(r2)
  d07e34:	30c00054 	ori	r3,r6,1
  d07e38:	52000215 	stw	r8,8(r10)
  d07e3c:	40c00115 	stw	r3,4(r8)
  d07e40:	313fa036 	bltu	r6,r4,d07cc4 <_free_r+0xb4>
  d07e44:	00803474 	movhi	r2,209
  d07e48:	10935804 	addi	r2,r2,19808
  d07e4c:	11400017 	ldw	r5,0(r2)
  d07e50:	8809883a 	mov	r4,r17
  d07e54:	0d07ae40 	call	d07ae4 <_malloc_trim_r>
  d07e58:	003f9a06 	br	d07cc4 <_free_r+0xb4>
  d07e5c:	00800104 	movi	r2,4
  d07e60:	10c0072e 	bgeu	r2,r3,d07e80 <_free_r+0x270>
  d07e64:	00800504 	movi	r2,20
  d07e68:	10c01936 	bltu	r2,r3,d07ed0 <_free_r+0x2c0>
  d07e6c:	188016c4 	addi	r2,r3,91
  d07e70:	100690fa 	slli	r3,r2,3
  d07e74:	003fb306 	br	d07d44 <_free_r+0x134>
  d07e78:	01400044 	movi	r5,1
  d07e7c:	003f7e06 	br	d07c78 <_free_r+0x68>
  d07e80:	3804d1ba 	srli	r2,r7,6
  d07e84:	10800e04 	addi	r2,r2,56
  d07e88:	100690fa 	slli	r3,r2,3
  d07e8c:	003fad06 	br	d07d44 <_free_r+0x134>
  d07e90:	22000315 	stw	r8,12(r4)
  d07e94:	22000215 	stw	r8,8(r4)
  d07e98:	3a05883a 	add	r2,r7,r8
  d07e9c:	38c00054 	ori	r3,r7,1
  d07ea0:	11c00015 	stw	r7,0(r2)
  d07ea4:	41000215 	stw	r4,8(r8)
  d07ea8:	40c00115 	stw	r3,4(r8)
  d07eac:	41000315 	stw	r4,12(r8)
  d07eb0:	003f8406 	br	d07cc4 <_free_r+0xb4>
  d07eb4:	1005d0ba 	srai	r2,r2,2
  d07eb8:	00c00044 	movi	r3,1
  d07ebc:	51000117 	ldw	r4,4(r10)
  d07ec0:	1886983a 	sll	r3,r3,r2
  d07ec4:	20c8b03a 	or	r4,r4,r3
  d07ec8:	51000115 	stw	r4,4(r10)
  d07ecc:	003fa706 	br	d07d6c <_free_r+0x15c>
  d07ed0:	00801504 	movi	r2,84
  d07ed4:	10c00436 	bltu	r2,r3,d07ee8 <_free_r+0x2d8>
  d07ed8:	3804d33a 	srli	r2,r7,12
  d07edc:	10801b84 	addi	r2,r2,110
  d07ee0:	100690fa 	slli	r3,r2,3
  d07ee4:	003f9706 	br	d07d44 <_free_r+0x134>
  d07ee8:	00805504 	movi	r2,340
  d07eec:	10c00436 	bltu	r2,r3,d07f00 <_free_r+0x2f0>
  d07ef0:	3804d3fa 	srli	r2,r7,15
  d07ef4:	10801dc4 	addi	r2,r2,119
  d07ef8:	100690fa 	slli	r3,r2,3
  d07efc:	003f9106 	br	d07d44 <_free_r+0x134>
  d07f00:	00815504 	movi	r2,1364
  d07f04:	10c0032e 	bgeu	r2,r3,d07f14 <_free_r+0x304>
  d07f08:	00801f84 	movi	r2,126
  d07f0c:	00c0fc04 	movi	r3,1008
  d07f10:	003f8c06 	br	d07d44 <_free_r+0x134>
  d07f14:	3804d4ba 	srli	r2,r7,18
  d07f18:	10801f04 	addi	r2,r2,124
  d07f1c:	100690fa 	slli	r3,r2,3
  d07f20:	003f8806 	br	d07d44 <_free_r+0x134>

00d07f24 <__sfvwrite_r>:
  d07f24:	30800217 	ldw	r2,8(r6)
  d07f28:	defff504 	addi	sp,sp,-44
  d07f2c:	df000915 	stw	fp,36(sp)
  d07f30:	dd800715 	stw	r22,28(sp)
  d07f34:	dc800315 	stw	r18,12(sp)
  d07f38:	dfc00a15 	stw	ra,40(sp)
  d07f3c:	ddc00815 	stw	r23,32(sp)
  d07f40:	dd400615 	stw	r21,24(sp)
  d07f44:	dd000515 	stw	r20,20(sp)
  d07f48:	dcc00415 	stw	r19,16(sp)
  d07f4c:	dc400215 	stw	r17,8(sp)
  d07f50:	dc000115 	stw	r16,4(sp)
  d07f54:	302d883a 	mov	r22,r6
  d07f58:	2039883a 	mov	fp,r4
  d07f5c:	2825883a 	mov	r18,r5
  d07f60:	10001c26 	beq	r2,zero,d07fd4 <__sfvwrite_r+0xb0>
  d07f64:	29c0030b 	ldhu	r7,12(r5)
  d07f68:	3880020c 	andi	r2,r7,8
  d07f6c:	10002726 	beq	r2,zero,d0800c <__sfvwrite_r+0xe8>
  d07f70:	28800417 	ldw	r2,16(r5)
  d07f74:	10002526 	beq	r2,zero,d0800c <__sfvwrite_r+0xe8>
  d07f78:	3880008c 	andi	r2,r7,2
  d07f7c:	b5400017 	ldw	r21,0(r22)
  d07f80:	10002826 	beq	r2,zero,d08024 <__sfvwrite_r+0x100>
  d07f84:	0021883a 	mov	r16,zero
  d07f88:	0023883a 	mov	r17,zero
  d07f8c:	880d883a 	mov	r6,r17
  d07f90:	e009883a 	mov	r4,fp
  d07f94:	00810004 	movi	r2,1024
  d07f98:	80006e26 	beq	r16,zero,d08154 <__sfvwrite_r+0x230>
  d07f9c:	800f883a 	mov	r7,r16
  d07fa0:	91400717 	ldw	r5,28(r18)
  d07fa4:	1400012e 	bgeu	r2,r16,d07fac <__sfvwrite_r+0x88>
  d07fa8:	100f883a 	mov	r7,r2
  d07fac:	90c00917 	ldw	r3,36(r18)
  d07fb0:	183ee83a 	callr	r3
  d07fb4:	1007883a 	mov	r3,r2
  d07fb8:	80a1c83a 	sub	r16,r16,r2
  d07fbc:	88a3883a 	add	r17,r17,r2
  d07fc0:	00806d0e 	bge	zero,r2,d08178 <__sfvwrite_r+0x254>
  d07fc4:	b0800217 	ldw	r2,8(r22)
  d07fc8:	10c5c83a 	sub	r2,r2,r3
  d07fcc:	b0800215 	stw	r2,8(r22)
  d07fd0:	103fee1e 	bne	r2,zero,d07f8c <__sfvwrite_r+0x68>
  d07fd4:	0009883a 	mov	r4,zero
  d07fd8:	2005883a 	mov	r2,r4
  d07fdc:	dfc00a17 	ldw	ra,40(sp)
  d07fe0:	df000917 	ldw	fp,36(sp)
  d07fe4:	ddc00817 	ldw	r23,32(sp)
  d07fe8:	dd800717 	ldw	r22,28(sp)
  d07fec:	dd400617 	ldw	r21,24(sp)
  d07ff0:	dd000517 	ldw	r20,20(sp)
  d07ff4:	dcc00417 	ldw	r19,16(sp)
  d07ff8:	dc800317 	ldw	r18,12(sp)
  d07ffc:	dc400217 	ldw	r17,8(sp)
  d08000:	dc000117 	ldw	r16,4(sp)
  d08004:	dec00b04 	addi	sp,sp,44
  d08008:	f800283a 	ret
  d0800c:	0d05cec0 	call	d05cec <__swsetup_r>
  d08010:	1000e41e 	bne	r2,zero,d083a4 <__sfvwrite_r+0x480>
  d08014:	91c0030b 	ldhu	r7,12(r18)
  d08018:	b5400017 	ldw	r21,0(r22)
  d0801c:	3880008c 	andi	r2,r7,2
  d08020:	103fd81e 	bne	r2,zero,d07f84 <__sfvwrite_r+0x60>
  d08024:	3880004c 	andi	r2,r7,1
  d08028:	1005003a 	cmpeq	r2,r2,zero
  d0802c:	10005726 	beq	r2,zero,d0818c <__sfvwrite_r+0x268>
  d08030:	0029883a 	mov	r20,zero
  d08034:	002f883a 	mov	r23,zero
  d08038:	a0004226 	beq	r20,zero,d08144 <__sfvwrite_r+0x220>
  d0803c:	3880800c 	andi	r2,r7,512
  d08040:	94000217 	ldw	r16,8(r18)
  d08044:	10008b26 	beq	r2,zero,d08274 <__sfvwrite_r+0x350>
  d08048:	800d883a 	mov	r6,r16
  d0804c:	a400a536 	bltu	r20,r16,d082e4 <__sfvwrite_r+0x3c0>
  d08050:	3881200c 	andi	r2,r7,1152
  d08054:	10002726 	beq	r2,zero,d080f4 <__sfvwrite_r+0x1d0>
  d08058:	90800517 	ldw	r2,20(r18)
  d0805c:	92000417 	ldw	r8,16(r18)
  d08060:	91400017 	ldw	r5,0(r18)
  d08064:	1087883a 	add	r3,r2,r2
  d08068:	1887883a 	add	r3,r3,r2
  d0806c:	1808d7fa 	srli	r4,r3,31
  d08070:	2a21c83a 	sub	r16,r5,r8
  d08074:	80800044 	addi	r2,r16,1
  d08078:	20c9883a 	add	r4,r4,r3
  d0807c:	2027d07a 	srai	r19,r4,1
  d08080:	a085883a 	add	r2,r20,r2
  d08084:	980d883a 	mov	r6,r19
  d08088:	9880022e 	bgeu	r19,r2,d08094 <__sfvwrite_r+0x170>
  d0808c:	1027883a 	mov	r19,r2
  d08090:	100d883a 	mov	r6,r2
  d08094:	3881000c 	andi	r2,r7,1024
  d08098:	1000b826 	beq	r2,zero,d0837c <__sfvwrite_r+0x458>
  d0809c:	300b883a 	mov	r5,r6
  d080a0:	e009883a 	mov	r4,fp
  d080a4:	0d087980 	call	d08798 <_malloc_r>
  d080a8:	10003126 	beq	r2,zero,d08170 <__sfvwrite_r+0x24c>
  d080ac:	91400417 	ldw	r5,16(r18)
  d080b0:	1009883a 	mov	r4,r2
  d080b4:	800d883a 	mov	r6,r16
  d080b8:	1023883a 	mov	r17,r2
  d080bc:	0d08fbc0 	call	d08fbc <memcpy>
  d080c0:	90c0030b 	ldhu	r3,12(r18)
  d080c4:	00beffc4 	movi	r2,-1025
  d080c8:	1886703a 	and	r3,r3,r2
  d080cc:	18c02014 	ori	r3,r3,128
  d080d0:	90c0030d 	sth	r3,12(r18)
  d080d4:	9c07c83a 	sub	r3,r19,r16
  d080d8:	8c05883a 	add	r2,r17,r16
  d080dc:	a00d883a 	mov	r6,r20
  d080e0:	a021883a 	mov	r16,r20
  d080e4:	90800015 	stw	r2,0(r18)
  d080e8:	90c00215 	stw	r3,8(r18)
  d080ec:	94400415 	stw	r17,16(r18)
  d080f0:	94c00515 	stw	r19,20(r18)
  d080f4:	91000017 	ldw	r4,0(r18)
  d080f8:	b80b883a 	mov	r5,r23
  d080fc:	a023883a 	mov	r17,r20
  d08100:	0d0905c0 	call	d0905c <memmove>
  d08104:	90c00217 	ldw	r3,8(r18)
  d08108:	90800017 	ldw	r2,0(r18)
  d0810c:	a027883a 	mov	r19,r20
  d08110:	1c07c83a 	sub	r3,r3,r16
  d08114:	1405883a 	add	r2,r2,r16
  d08118:	90c00215 	stw	r3,8(r18)
  d0811c:	a021883a 	mov	r16,r20
  d08120:	90800015 	stw	r2,0(r18)
  d08124:	b0800217 	ldw	r2,8(r22)
  d08128:	1405c83a 	sub	r2,r2,r16
  d0812c:	b0800215 	stw	r2,8(r22)
  d08130:	103fa826 	beq	r2,zero,d07fd4 <__sfvwrite_r+0xb0>
  d08134:	a469c83a 	sub	r20,r20,r17
  d08138:	91c0030b 	ldhu	r7,12(r18)
  d0813c:	bcef883a 	add	r23,r23,r19
  d08140:	a03fbe1e 	bne	r20,zero,d0803c <__sfvwrite_r+0x118>
  d08144:	adc00017 	ldw	r23,0(r21)
  d08148:	ad000117 	ldw	r20,4(r21)
  d0814c:	ad400204 	addi	r21,r21,8
  d08150:	003fb906 	br	d08038 <__sfvwrite_r+0x114>
  d08154:	ac400017 	ldw	r17,0(r21)
  d08158:	ac000117 	ldw	r16,4(r21)
  d0815c:	ad400204 	addi	r21,r21,8
  d08160:	003f8a06 	br	d07f8c <__sfvwrite_r+0x68>
  d08164:	91400417 	ldw	r5,16(r18)
  d08168:	e009883a 	mov	r4,fp
  d0816c:	0d07c100 	call	d07c10 <_free_r>
  d08170:	00800304 	movi	r2,12
  d08174:	e0800015 	stw	r2,0(fp)
  d08178:	9080030b 	ldhu	r2,12(r18)
  d0817c:	013fffc4 	movi	r4,-1
  d08180:	10801014 	ori	r2,r2,64
  d08184:	9080030d 	sth	r2,12(r18)
  d08188:	003f9306 	br	d07fd8 <__sfvwrite_r+0xb4>
  d0818c:	0027883a 	mov	r19,zero
  d08190:	002f883a 	mov	r23,zero
  d08194:	d8000015 	stw	zero,0(sp)
  d08198:	0029883a 	mov	r20,zero
  d0819c:	98001e26 	beq	r19,zero,d08218 <__sfvwrite_r+0x2f4>
  d081a0:	d8c00017 	ldw	r3,0(sp)
  d081a4:	1804c03a 	cmpne	r2,r3,zero
  d081a8:	10005e26 	beq	r2,zero,d08324 <__sfvwrite_r+0x400>
  d081ac:	9821883a 	mov	r16,r19
  d081b0:	a4c0012e 	bgeu	r20,r19,d081b8 <__sfvwrite_r+0x294>
  d081b4:	a021883a 	mov	r16,r20
  d081b8:	91000017 	ldw	r4,0(r18)
  d081bc:	90800417 	ldw	r2,16(r18)
  d081c0:	91800217 	ldw	r6,8(r18)
  d081c4:	91c00517 	ldw	r7,20(r18)
  d081c8:	1100022e 	bgeu	r2,r4,d081d4 <__sfvwrite_r+0x2b0>
  d081cc:	31e3883a 	add	r17,r6,r7
  d081d0:	8c001616 	blt	r17,r16,d0822c <__sfvwrite_r+0x308>
  d081d4:	81c03816 	blt	r16,r7,d082b8 <__sfvwrite_r+0x394>
  d081d8:	90c00917 	ldw	r3,36(r18)
  d081dc:	91400717 	ldw	r5,28(r18)
  d081e0:	e009883a 	mov	r4,fp
  d081e4:	b80d883a 	mov	r6,r23
  d081e8:	183ee83a 	callr	r3
  d081ec:	1023883a 	mov	r17,r2
  d081f0:	00bfe10e 	bge	zero,r2,d08178 <__sfvwrite_r+0x254>
  d081f4:	a469c83a 	sub	r20,r20,r17
  d081f8:	a0001826 	beq	r20,zero,d0825c <__sfvwrite_r+0x338>
  d081fc:	b0800217 	ldw	r2,8(r22)
  d08200:	1445c83a 	sub	r2,r2,r17
  d08204:	b0800215 	stw	r2,8(r22)
  d08208:	103f7226 	beq	r2,zero,d07fd4 <__sfvwrite_r+0xb0>
  d0820c:	9c67c83a 	sub	r19,r19,r17
  d08210:	bc6f883a 	add	r23,r23,r17
  d08214:	983fe21e 	bne	r19,zero,d081a0 <__sfvwrite_r+0x27c>
  d08218:	adc00017 	ldw	r23,0(r21)
  d0821c:	acc00117 	ldw	r19,4(r21)
  d08220:	ad400204 	addi	r21,r21,8
  d08224:	d8000015 	stw	zero,0(sp)
  d08228:	003fdc06 	br	d0819c <__sfvwrite_r+0x278>
  d0822c:	b80b883a 	mov	r5,r23
  d08230:	880d883a 	mov	r6,r17
  d08234:	0d0905c0 	call	d0905c <memmove>
  d08238:	90c00017 	ldw	r3,0(r18)
  d0823c:	e009883a 	mov	r4,fp
  d08240:	900b883a 	mov	r5,r18
  d08244:	1c47883a 	add	r3,r3,r17
  d08248:	90c00015 	stw	r3,0(r18)
  d0824c:	0d075f40 	call	d075f4 <_fflush_r>
  d08250:	103fc91e 	bne	r2,zero,d08178 <__sfvwrite_r+0x254>
  d08254:	a469c83a 	sub	r20,r20,r17
  d08258:	a03fe81e 	bne	r20,zero,d081fc <__sfvwrite_r+0x2d8>
  d0825c:	e009883a 	mov	r4,fp
  d08260:	900b883a 	mov	r5,r18
  d08264:	0d075f40 	call	d075f4 <_fflush_r>
  d08268:	103fc31e 	bne	r2,zero,d08178 <__sfvwrite_r+0x254>
  d0826c:	d8000015 	stw	zero,0(sp)
  d08270:	003fe206 	br	d081fc <__sfvwrite_r+0x2d8>
  d08274:	91000017 	ldw	r4,0(r18)
  d08278:	90800417 	ldw	r2,16(r18)
  d0827c:	1100022e 	bgeu	r2,r4,d08288 <__sfvwrite_r+0x364>
  d08280:	8023883a 	mov	r17,r16
  d08284:	85003136 	bltu	r16,r20,d0834c <__sfvwrite_r+0x428>
  d08288:	91c00517 	ldw	r7,20(r18)
  d0828c:	a1c01836 	bltu	r20,r7,d082f0 <__sfvwrite_r+0x3cc>
  d08290:	90c00917 	ldw	r3,36(r18)
  d08294:	91400717 	ldw	r5,28(r18)
  d08298:	e009883a 	mov	r4,fp
  d0829c:	b80d883a 	mov	r6,r23
  d082a0:	183ee83a 	callr	r3
  d082a4:	1021883a 	mov	r16,r2
  d082a8:	00bfb30e 	bge	zero,r2,d08178 <__sfvwrite_r+0x254>
  d082ac:	1023883a 	mov	r17,r2
  d082b0:	1027883a 	mov	r19,r2
  d082b4:	003f9b06 	br	d08124 <__sfvwrite_r+0x200>
  d082b8:	b80b883a 	mov	r5,r23
  d082bc:	800d883a 	mov	r6,r16
  d082c0:	0d0905c0 	call	d0905c <memmove>
  d082c4:	90c00217 	ldw	r3,8(r18)
  d082c8:	90800017 	ldw	r2,0(r18)
  d082cc:	8023883a 	mov	r17,r16
  d082d0:	1c07c83a 	sub	r3,r3,r16
  d082d4:	1405883a 	add	r2,r2,r16
  d082d8:	90c00215 	stw	r3,8(r18)
  d082dc:	90800015 	stw	r2,0(r18)
  d082e0:	003fc406 	br	d081f4 <__sfvwrite_r+0x2d0>
  d082e4:	a00d883a 	mov	r6,r20
  d082e8:	a021883a 	mov	r16,r20
  d082ec:	003f8106 	br	d080f4 <__sfvwrite_r+0x1d0>
  d082f0:	b80b883a 	mov	r5,r23
  d082f4:	a00d883a 	mov	r6,r20
  d082f8:	0d0905c0 	call	d0905c <memmove>
  d082fc:	90c00217 	ldw	r3,8(r18)
  d08300:	90800017 	ldw	r2,0(r18)
  d08304:	a021883a 	mov	r16,r20
  d08308:	1d07c83a 	sub	r3,r3,r20
  d0830c:	1505883a 	add	r2,r2,r20
  d08310:	a023883a 	mov	r17,r20
  d08314:	a027883a 	mov	r19,r20
  d08318:	90c00215 	stw	r3,8(r18)
  d0831c:	90800015 	stw	r2,0(r18)
  d08320:	003f8006 	br	d08124 <__sfvwrite_r+0x200>
  d08324:	b809883a 	mov	r4,r23
  d08328:	01400284 	movi	r5,10
  d0832c:	980d883a 	mov	r6,r19
  d08330:	0d08ed80 	call	d08ed8 <memchr>
  d08334:	10001726 	beq	r2,zero,d08394 <__sfvwrite_r+0x470>
  d08338:	15c5c83a 	sub	r2,r2,r23
  d0833c:	15000044 	addi	r20,r2,1
  d08340:	00800044 	movi	r2,1
  d08344:	d8800015 	stw	r2,0(sp)
  d08348:	003f9806 	br	d081ac <__sfvwrite_r+0x288>
  d0834c:	b80b883a 	mov	r5,r23
  d08350:	800d883a 	mov	r6,r16
  d08354:	0d0905c0 	call	d0905c <memmove>
  d08358:	90c00017 	ldw	r3,0(r18)
  d0835c:	e009883a 	mov	r4,fp
  d08360:	900b883a 	mov	r5,r18
  d08364:	1c07883a 	add	r3,r3,r16
  d08368:	90c00015 	stw	r3,0(r18)
  d0836c:	8027883a 	mov	r19,r16
  d08370:	0d075f40 	call	d075f4 <_fflush_r>
  d08374:	103f6b26 	beq	r2,zero,d08124 <__sfvwrite_r+0x200>
  d08378:	003f7f06 	br	d08178 <__sfvwrite_r+0x254>
  d0837c:	400b883a 	mov	r5,r8
  d08380:	e009883a 	mov	r4,fp
  d08384:	0d0a1c80 	call	d0a1c8 <_realloc_r>
  d08388:	103f7626 	beq	r2,zero,d08164 <__sfvwrite_r+0x240>
  d0838c:	1023883a 	mov	r17,r2
  d08390:	003f5006 	br	d080d4 <__sfvwrite_r+0x1b0>
  d08394:	00c00044 	movi	r3,1
  d08398:	9d000044 	addi	r20,r19,1
  d0839c:	d8c00015 	stw	r3,0(sp)
  d083a0:	003f8206 	br	d081ac <__sfvwrite_r+0x288>
  d083a4:	9080030b 	ldhu	r2,12(r18)
  d083a8:	00c00244 	movi	r3,9
  d083ac:	013fffc4 	movi	r4,-1
  d083b0:	10801014 	ori	r2,r2,64
  d083b4:	9080030d 	sth	r2,12(r18)
  d083b8:	e0c00015 	stw	r3,0(fp)
  d083bc:	003f0606 	br	d07fd8 <__sfvwrite_r+0xb4>

00d083c0 <_fwalk_reent>:
  d083c0:	defff704 	addi	sp,sp,-36
  d083c4:	dcc00315 	stw	r19,12(sp)
  d083c8:	24c0b804 	addi	r19,r4,736
  d083cc:	dd800615 	stw	r22,24(sp)
  d083d0:	dd400515 	stw	r21,20(sp)
  d083d4:	dfc00815 	stw	ra,32(sp)
  d083d8:	ddc00715 	stw	r23,28(sp)
  d083dc:	dd000415 	stw	r20,16(sp)
  d083e0:	dc800215 	stw	r18,8(sp)
  d083e4:	dc400115 	stw	r17,4(sp)
  d083e8:	dc000015 	stw	r16,0(sp)
  d083ec:	202b883a 	mov	r21,r4
  d083f0:	282d883a 	mov	r22,r5
  d083f4:	0d0787c0 	call	d0787c <__sfp_lock_acquire>
  d083f8:	98002126 	beq	r19,zero,d08480 <_fwalk_reent+0xc0>
  d083fc:	002f883a 	mov	r23,zero
  d08400:	9c800117 	ldw	r18,4(r19)
  d08404:	9c000217 	ldw	r16,8(r19)
  d08408:	90bfffc4 	addi	r2,r18,-1
  d0840c:	10000d16 	blt	r2,zero,d08444 <_fwalk_reent+0x84>
  d08410:	0023883a 	mov	r17,zero
  d08414:	053fffc4 	movi	r20,-1
  d08418:	8080030f 	ldh	r2,12(r16)
  d0841c:	8c400044 	addi	r17,r17,1
  d08420:	10000626 	beq	r2,zero,d0843c <_fwalk_reent+0x7c>
  d08424:	8080038f 	ldh	r2,14(r16)
  d08428:	800b883a 	mov	r5,r16
  d0842c:	a809883a 	mov	r4,r21
  d08430:	15000226 	beq	r2,r20,d0843c <_fwalk_reent+0x7c>
  d08434:	b03ee83a 	callr	r22
  d08438:	b8aeb03a 	or	r23,r23,r2
  d0843c:	84001704 	addi	r16,r16,92
  d08440:	947ff51e 	bne	r18,r17,d08418 <_fwalk_reent+0x58>
  d08444:	9cc00017 	ldw	r19,0(r19)
  d08448:	983fed1e 	bne	r19,zero,d08400 <_fwalk_reent+0x40>
  d0844c:	0d078800 	call	d07880 <__sfp_lock_release>
  d08450:	b805883a 	mov	r2,r23
  d08454:	dfc00817 	ldw	ra,32(sp)
  d08458:	ddc00717 	ldw	r23,28(sp)
  d0845c:	dd800617 	ldw	r22,24(sp)
  d08460:	dd400517 	ldw	r21,20(sp)
  d08464:	dd000417 	ldw	r20,16(sp)
  d08468:	dcc00317 	ldw	r19,12(sp)
  d0846c:	dc800217 	ldw	r18,8(sp)
  d08470:	dc400117 	ldw	r17,4(sp)
  d08474:	dc000017 	ldw	r16,0(sp)
  d08478:	dec00904 	addi	sp,sp,36
  d0847c:	f800283a 	ret
  d08480:	002f883a 	mov	r23,zero
  d08484:	003ff106 	br	d0844c <_fwalk_reent+0x8c>

00d08488 <_fwalk>:
  d08488:	defff804 	addi	sp,sp,-32
  d0848c:	dcc00315 	stw	r19,12(sp)
  d08490:	24c0b804 	addi	r19,r4,736
  d08494:	dd400515 	stw	r21,20(sp)
  d08498:	dfc00715 	stw	ra,28(sp)
  d0849c:	dd800615 	stw	r22,24(sp)
  d084a0:	dd000415 	stw	r20,16(sp)
  d084a4:	dc800215 	stw	r18,8(sp)
  d084a8:	dc400115 	stw	r17,4(sp)
  d084ac:	dc000015 	stw	r16,0(sp)
  d084b0:	282b883a 	mov	r21,r5
  d084b4:	0d0787c0 	call	d0787c <__sfp_lock_acquire>
  d084b8:	98001f26 	beq	r19,zero,d08538 <_fwalk+0xb0>
  d084bc:	002d883a 	mov	r22,zero
  d084c0:	9c800117 	ldw	r18,4(r19)
  d084c4:	9c000217 	ldw	r16,8(r19)
  d084c8:	90bfffc4 	addi	r2,r18,-1
  d084cc:	10000c16 	blt	r2,zero,d08500 <_fwalk+0x78>
  d084d0:	0023883a 	mov	r17,zero
  d084d4:	053fffc4 	movi	r20,-1
  d084d8:	8080030f 	ldh	r2,12(r16)
  d084dc:	8c400044 	addi	r17,r17,1
  d084e0:	10000526 	beq	r2,zero,d084f8 <_fwalk+0x70>
  d084e4:	8080038f 	ldh	r2,14(r16)
  d084e8:	8009883a 	mov	r4,r16
  d084ec:	15000226 	beq	r2,r20,d084f8 <_fwalk+0x70>
  d084f0:	a83ee83a 	callr	r21
  d084f4:	b0acb03a 	or	r22,r22,r2
  d084f8:	84001704 	addi	r16,r16,92
  d084fc:	947ff61e 	bne	r18,r17,d084d8 <_fwalk+0x50>
  d08500:	9cc00017 	ldw	r19,0(r19)
  d08504:	983fee1e 	bne	r19,zero,d084c0 <_fwalk+0x38>
  d08508:	0d078800 	call	d07880 <__sfp_lock_release>
  d0850c:	b005883a 	mov	r2,r22
  d08510:	dfc00717 	ldw	ra,28(sp)
  d08514:	dd800617 	ldw	r22,24(sp)
  d08518:	dd400517 	ldw	r21,20(sp)
  d0851c:	dd000417 	ldw	r20,16(sp)
  d08520:	dcc00317 	ldw	r19,12(sp)
  d08524:	dc800217 	ldw	r18,8(sp)
  d08528:	dc400117 	ldw	r17,4(sp)
  d0852c:	dc000017 	ldw	r16,0(sp)
  d08530:	dec00804 	addi	sp,sp,32
  d08534:	f800283a 	ret
  d08538:	002d883a 	mov	r22,zero
  d0853c:	003ff206 	br	d08508 <_fwalk+0x80>

00d08540 <__locale_charset>:
  d08540:	d0a00b17 	ldw	r2,-32724(gp)
  d08544:	f800283a 	ret

00d08548 <_localeconv_r>:
  d08548:	00803474 	movhi	r2,209
  d0854c:	1084c004 	addi	r2,r2,4864
  d08550:	f800283a 	ret

00d08554 <localeconv>:
  d08554:	00803474 	movhi	r2,209
  d08558:	108c4a04 	addi	r2,r2,12584
  d0855c:	11000017 	ldw	r4,0(r2)
  d08560:	0d085481 	jmpi	d08548 <_localeconv_r>

00d08564 <_setlocale_r>:
  d08564:	defffc04 	addi	sp,sp,-16
  d08568:	00c03474 	movhi	r3,209
  d0856c:	18c49804 	addi	r3,r3,4704
  d08570:	dc800215 	stw	r18,8(sp)
  d08574:	dc400115 	stw	r17,4(sp)
  d08578:	dc000015 	stw	r16,0(sp)
  d0857c:	2023883a 	mov	r17,r4
  d08580:	2825883a 	mov	r18,r5
  d08584:	dfc00315 	stw	ra,12(sp)
  d08588:	3021883a 	mov	r16,r6
  d0858c:	3009883a 	mov	r4,r6
  d08590:	180b883a 	mov	r5,r3
  d08594:	30000926 	beq	r6,zero,d085bc <_setlocale_r+0x58>
  d08598:	0d0a9e80 	call	d0a9e8 <strcmp>
  d0859c:	8009883a 	mov	r4,r16
  d085a0:	01403474 	movhi	r5,209
  d085a4:	29442804 	addi	r5,r5,4256
  d085a8:	10000b1e 	bne	r2,zero,d085d8 <_setlocale_r+0x74>
  d085ac:	8c000d15 	stw	r16,52(r17)
  d085b0:	8c800c15 	stw	r18,48(r17)
  d085b4:	00c03474 	movhi	r3,209
  d085b8:	18c49804 	addi	r3,r3,4704
  d085bc:	1805883a 	mov	r2,r3
  d085c0:	dfc00317 	ldw	ra,12(sp)
  d085c4:	dc800217 	ldw	r18,8(sp)
  d085c8:	dc400117 	ldw	r17,4(sp)
  d085cc:	dc000017 	ldw	r16,0(sp)
  d085d0:	dec00404 	addi	sp,sp,16
  d085d4:	f800283a 	ret
  d085d8:	0d0a9e80 	call	d0a9e8 <strcmp>
  d085dc:	0007883a 	mov	r3,zero
  d085e0:	103ff226 	beq	r2,zero,d085ac <_setlocale_r+0x48>
  d085e4:	003ff506 	br	d085bc <_setlocale_r+0x58>

00d085e8 <setlocale>:
  d085e8:	01803474 	movhi	r6,209
  d085ec:	318c4a04 	addi	r6,r6,12584
  d085f0:	2007883a 	mov	r3,r4
  d085f4:	31000017 	ldw	r4,0(r6)
  d085f8:	280d883a 	mov	r6,r5
  d085fc:	180b883a 	mov	r5,r3
  d08600:	0d085641 	jmpi	d08564 <_setlocale_r>

00d08604 <__smakebuf_r>:
  d08604:	2880030b 	ldhu	r2,12(r5)
  d08608:	deffed04 	addi	sp,sp,-76
  d0860c:	dc401015 	stw	r17,64(sp)
  d08610:	1080008c 	andi	r2,r2,2
  d08614:	dc000f15 	stw	r16,60(sp)
  d08618:	dfc01215 	stw	ra,72(sp)
  d0861c:	dc801115 	stw	r18,68(sp)
  d08620:	2821883a 	mov	r16,r5
  d08624:	2023883a 	mov	r17,r4
  d08628:	10000b26 	beq	r2,zero,d08658 <__smakebuf_r+0x54>
  d0862c:	28c010c4 	addi	r3,r5,67
  d08630:	00800044 	movi	r2,1
  d08634:	28800515 	stw	r2,20(r5)
  d08638:	28c00415 	stw	r3,16(r5)
  d0863c:	28c00015 	stw	r3,0(r5)
  d08640:	dfc01217 	ldw	ra,72(sp)
  d08644:	dc801117 	ldw	r18,68(sp)
  d08648:	dc401017 	ldw	r17,64(sp)
  d0864c:	dc000f17 	ldw	r16,60(sp)
  d08650:	dec01304 	addi	sp,sp,76
  d08654:	f800283a 	ret
  d08658:	2940038f 	ldh	r5,14(r5)
  d0865c:	28002116 	blt	r5,zero,d086e4 <__smakebuf_r+0xe0>
  d08660:	d80d883a 	mov	r6,sp
  d08664:	0d0ad640 	call	d0ad64 <_fstat_r>
  d08668:	10001e16 	blt	r2,zero,d086e4 <__smakebuf_r+0xe0>
  d0866c:	d8800117 	ldw	r2,4(sp)
  d08670:	00e00014 	movui	r3,32768
  d08674:	113c000c 	andi	r4,r2,61440
  d08678:	20c03126 	beq	r4,r3,d08740 <__smakebuf_r+0x13c>
  d0867c:	8080030b 	ldhu	r2,12(r16)
  d08680:	00c80004 	movi	r3,8192
  d08684:	10820014 	ori	r2,r2,2048
  d08688:	8080030d 	sth	r2,12(r16)
  d0868c:	20c01e26 	beq	r4,r3,d08708 <__smakebuf_r+0x104>
  d08690:	04810004 	movi	r18,1024
  d08694:	8809883a 	mov	r4,r17
  d08698:	900b883a 	mov	r5,r18
  d0869c:	0d087980 	call	d08798 <_malloc_r>
  d086a0:	1009883a 	mov	r4,r2
  d086a4:	10003126 	beq	r2,zero,d0876c <__smakebuf_r+0x168>
  d086a8:	80c0030b 	ldhu	r3,12(r16)
  d086ac:	00803434 	movhi	r2,208
  d086b0:	109e5c04 	addi	r2,r2,31088
  d086b4:	88800f15 	stw	r2,60(r17)
  d086b8:	18c02014 	ori	r3,r3,128
  d086bc:	84800515 	stw	r18,20(r16)
  d086c0:	80c0030d 	sth	r3,12(r16)
  d086c4:	81000415 	stw	r4,16(r16)
  d086c8:	81000015 	stw	r4,0(r16)
  d086cc:	dfc01217 	ldw	ra,72(sp)
  d086d0:	dc801117 	ldw	r18,68(sp)
  d086d4:	dc401017 	ldw	r17,64(sp)
  d086d8:	dc000f17 	ldw	r16,60(sp)
  d086dc:	dec01304 	addi	sp,sp,76
  d086e0:	f800283a 	ret
  d086e4:	80c0030b 	ldhu	r3,12(r16)
  d086e8:	1880200c 	andi	r2,r3,128
  d086ec:	10000426 	beq	r2,zero,d08700 <__smakebuf_r+0xfc>
  d086f0:	04801004 	movi	r18,64
  d086f4:	18820014 	ori	r2,r3,2048
  d086f8:	8080030d 	sth	r2,12(r16)
  d086fc:	003fe506 	br	d08694 <__smakebuf_r+0x90>
  d08700:	04810004 	movi	r18,1024
  d08704:	003ffb06 	br	d086f4 <__smakebuf_r+0xf0>
  d08708:	8140038f 	ldh	r5,14(r16)
  d0870c:	8809883a 	mov	r4,r17
  d08710:	0d0add80 	call	d0add8 <_isatty_r>
  d08714:	103fde26 	beq	r2,zero,d08690 <__smakebuf_r+0x8c>
  d08718:	8080030b 	ldhu	r2,12(r16)
  d0871c:	80c010c4 	addi	r3,r16,67
  d08720:	04810004 	movi	r18,1024
  d08724:	10800054 	ori	r2,r2,1
  d08728:	8080030d 	sth	r2,12(r16)
  d0872c:	00800044 	movi	r2,1
  d08730:	80c00415 	stw	r3,16(r16)
  d08734:	80800515 	stw	r2,20(r16)
  d08738:	80c00015 	stw	r3,0(r16)
  d0873c:	003fd506 	br	d08694 <__smakebuf_r+0x90>
  d08740:	80c00a17 	ldw	r3,40(r16)
  d08744:	00803474 	movhi	r2,209
  d08748:	10aa2904 	addi	r2,r2,-22364
  d0874c:	18bfcb1e 	bne	r3,r2,d0867c <__smakebuf_r+0x78>
  d08750:	8080030b 	ldhu	r2,12(r16)
  d08754:	00c10004 	movi	r3,1024
  d08758:	1825883a 	mov	r18,r3
  d0875c:	10c4b03a 	or	r2,r2,r3
  d08760:	8080030d 	sth	r2,12(r16)
  d08764:	80c01315 	stw	r3,76(r16)
  d08768:	003fca06 	br	d08694 <__smakebuf_r+0x90>
  d0876c:	8100030b 	ldhu	r4,12(r16)
  d08770:	2080800c 	andi	r2,r4,512
  d08774:	103fb21e 	bne	r2,zero,d08640 <__smakebuf_r+0x3c>
  d08778:	80c010c4 	addi	r3,r16,67
  d0877c:	21000094 	ori	r4,r4,2
  d08780:	00800044 	movi	r2,1
  d08784:	80800515 	stw	r2,20(r16)
  d08788:	8100030d 	sth	r4,12(r16)
  d0878c:	80c00415 	stw	r3,16(r16)
  d08790:	80c00015 	stw	r3,0(r16)
  d08794:	003faa06 	br	d08640 <__smakebuf_r+0x3c>

00d08798 <_malloc_r>:
  d08798:	defff604 	addi	sp,sp,-40
  d0879c:	28c002c4 	addi	r3,r5,11
  d087a0:	00800584 	movi	r2,22
  d087a4:	dc800215 	stw	r18,8(sp)
  d087a8:	dfc00915 	stw	ra,36(sp)
  d087ac:	df000815 	stw	fp,32(sp)
  d087b0:	ddc00715 	stw	r23,28(sp)
  d087b4:	dd800615 	stw	r22,24(sp)
  d087b8:	dd400515 	stw	r21,20(sp)
  d087bc:	dd000415 	stw	r20,16(sp)
  d087c0:	dcc00315 	stw	r19,12(sp)
  d087c4:	dc400115 	stw	r17,4(sp)
  d087c8:	dc000015 	stw	r16,0(sp)
  d087cc:	2025883a 	mov	r18,r4
  d087d0:	10c01236 	bltu	r2,r3,d0881c <_malloc_r+0x84>
  d087d4:	04400404 	movi	r17,16
  d087d8:	8940142e 	bgeu	r17,r5,d0882c <_malloc_r+0x94>
  d087dc:	00800304 	movi	r2,12
  d087e0:	0007883a 	mov	r3,zero
  d087e4:	90800015 	stw	r2,0(r18)
  d087e8:	1805883a 	mov	r2,r3
  d087ec:	dfc00917 	ldw	ra,36(sp)
  d087f0:	df000817 	ldw	fp,32(sp)
  d087f4:	ddc00717 	ldw	r23,28(sp)
  d087f8:	dd800617 	ldw	r22,24(sp)
  d087fc:	dd400517 	ldw	r21,20(sp)
  d08800:	dd000417 	ldw	r20,16(sp)
  d08804:	dcc00317 	ldw	r19,12(sp)
  d08808:	dc800217 	ldw	r18,8(sp)
  d0880c:	dc400117 	ldw	r17,4(sp)
  d08810:	dc000017 	ldw	r16,0(sp)
  d08814:	dec00a04 	addi	sp,sp,40
  d08818:	f800283a 	ret
  d0881c:	00bffe04 	movi	r2,-8
  d08820:	18a2703a 	and	r17,r3,r2
  d08824:	883fed16 	blt	r17,zero,d087dc <_malloc_r+0x44>
  d08828:	897fec36 	bltu	r17,r5,d087dc <_malloc_r+0x44>
  d0882c:	9009883a 	mov	r4,r18
  d08830:	0d0cbdc0 	call	d0cbdc <__malloc_lock>
  d08834:	00807dc4 	movi	r2,503
  d08838:	14402b2e 	bgeu	r2,r17,d088e8 <_malloc_r+0x150>
  d0883c:	8806d27a 	srli	r3,r17,9
  d08840:	18003f1e 	bne	r3,zero,d08940 <_malloc_r+0x1a8>
  d08844:	880cd0fa 	srli	r6,r17,3
  d08848:	300490fa 	slli	r2,r6,3
  d0884c:	02c03474 	movhi	r11,209
  d08850:	5ac66d04 	addi	r11,r11,6580
  d08854:	12cb883a 	add	r5,r2,r11
  d08858:	2c000317 	ldw	r16,12(r5)
  d0885c:	580f883a 	mov	r7,r11
  d08860:	2c00041e 	bne	r5,r16,d08874 <_malloc_r+0xdc>
  d08864:	00000a06 	br	d08890 <_malloc_r+0xf8>
  d08868:	1800860e 	bge	r3,zero,d08a84 <_malloc_r+0x2ec>
  d0886c:	84000317 	ldw	r16,12(r16)
  d08870:	2c000726 	beq	r5,r16,d08890 <_malloc_r+0xf8>
  d08874:	80800117 	ldw	r2,4(r16)
  d08878:	00ffff04 	movi	r3,-4
  d0887c:	10c8703a 	and	r4,r2,r3
  d08880:	2447c83a 	sub	r3,r4,r17
  d08884:	008003c4 	movi	r2,15
  d08888:	10fff70e 	bge	r2,r3,d08868 <_malloc_r+0xd0>
  d0888c:	31bfffc4 	addi	r6,r6,-1
  d08890:	32400044 	addi	r9,r6,1
  d08894:	02803474 	movhi	r10,209
  d08898:	52866f04 	addi	r10,r10,6588
  d0889c:	54000217 	ldw	r16,8(r10)
  d088a0:	8280a026 	beq	r16,r10,d08b24 <_malloc_r+0x38c>
  d088a4:	80800117 	ldw	r2,4(r16)
  d088a8:	00ffff04 	movi	r3,-4
  d088ac:	10ca703a 	and	r5,r2,r3
  d088b0:	2c4dc83a 	sub	r6,r5,r17
  d088b4:	008003c4 	movi	r2,15
  d088b8:	11808316 	blt	r2,r6,d08ac8 <_malloc_r+0x330>
  d088bc:	52800315 	stw	r10,12(r10)
  d088c0:	52800215 	stw	r10,8(r10)
  d088c4:	30002916 	blt	r6,zero,d0896c <_malloc_r+0x1d4>
  d088c8:	8147883a 	add	r3,r16,r5
  d088cc:	18800117 	ldw	r2,4(r3)
  d088d0:	9009883a 	mov	r4,r18
  d088d4:	10800054 	ori	r2,r2,1
  d088d8:	18800115 	stw	r2,4(r3)
  d088dc:	0d0cbfc0 	call	d0cbfc <__malloc_unlock>
  d088e0:	80c00204 	addi	r3,r16,8
  d088e4:	003fc006 	br	d087e8 <_malloc_r+0x50>
  d088e8:	02c03474 	movhi	r11,209
  d088ec:	5ac66d04 	addi	r11,r11,6580
  d088f0:	8ac5883a 	add	r2,r17,r11
  d088f4:	14000317 	ldw	r16,12(r2)
  d088f8:	580f883a 	mov	r7,r11
  d088fc:	8806d0fa 	srli	r3,r17,3
  d08900:	14006c26 	beq	r2,r16,d08ab4 <_malloc_r+0x31c>
  d08904:	80c00117 	ldw	r3,4(r16)
  d08908:	00bfff04 	movi	r2,-4
  d0890c:	81800317 	ldw	r6,12(r16)
  d08910:	1886703a 	and	r3,r3,r2
  d08914:	80c7883a 	add	r3,r16,r3
  d08918:	18800117 	ldw	r2,4(r3)
  d0891c:	81400217 	ldw	r5,8(r16)
  d08920:	9009883a 	mov	r4,r18
  d08924:	10800054 	ori	r2,r2,1
  d08928:	18800115 	stw	r2,4(r3)
  d0892c:	31400215 	stw	r5,8(r6)
  d08930:	29800315 	stw	r6,12(r5)
  d08934:	0d0cbfc0 	call	d0cbfc <__malloc_unlock>
  d08938:	80c00204 	addi	r3,r16,8
  d0893c:	003faa06 	br	d087e8 <_malloc_r+0x50>
  d08940:	00800104 	movi	r2,4
  d08944:	10c0052e 	bgeu	r2,r3,d0895c <_malloc_r+0x1c4>
  d08948:	00800504 	movi	r2,20
  d0894c:	10c07836 	bltu	r2,r3,d08b30 <_malloc_r+0x398>
  d08950:	198016c4 	addi	r6,r3,91
  d08954:	300490fa 	slli	r2,r6,3
  d08958:	003fbc06 	br	d0884c <_malloc_r+0xb4>
  d0895c:	8804d1ba 	srli	r2,r17,6
  d08960:	11800e04 	addi	r6,r2,56
  d08964:	300490fa 	slli	r2,r6,3
  d08968:	003fb806 	br	d0884c <_malloc_r+0xb4>
  d0896c:	00807fc4 	movi	r2,511
  d08970:	1140bb36 	bltu	r2,r5,d08c60 <_malloc_r+0x4c8>
  d08974:	2806d0fa 	srli	r3,r5,3
  d08978:	573ffe04 	addi	fp,r10,-8
  d0897c:	00800044 	movi	r2,1
  d08980:	180890fa 	slli	r4,r3,3
  d08984:	1807d0ba 	srai	r3,r3,2
  d08988:	e1c00117 	ldw	r7,4(fp)
  d0898c:	5909883a 	add	r4,r11,r4
  d08990:	21400217 	ldw	r5,8(r4)
  d08994:	10c4983a 	sll	r2,r2,r3
  d08998:	81000315 	stw	r4,12(r16)
  d0899c:	81400215 	stw	r5,8(r16)
  d089a0:	388eb03a 	or	r7,r7,r2
  d089a4:	2c000315 	stw	r16,12(r5)
  d089a8:	24000215 	stw	r16,8(r4)
  d089ac:	e1c00115 	stw	r7,4(fp)
  d089b0:	4807883a 	mov	r3,r9
  d089b4:	4800cd16 	blt	r9,zero,d08cec <_malloc_r+0x554>
  d089b8:	1807d0ba 	srai	r3,r3,2
  d089bc:	00800044 	movi	r2,1
  d089c0:	10c8983a 	sll	r4,r2,r3
  d089c4:	39004436 	bltu	r7,r4,d08ad8 <_malloc_r+0x340>
  d089c8:	21c4703a 	and	r2,r4,r7
  d089cc:	10000a1e 	bne	r2,zero,d089f8 <_malloc_r+0x260>
  d089d0:	2109883a 	add	r4,r4,r4
  d089d4:	00bfff04 	movi	r2,-4
  d089d8:	4884703a 	and	r2,r9,r2
  d089dc:	3906703a 	and	r3,r7,r4
  d089e0:	12400104 	addi	r9,r2,4
  d089e4:	1800041e 	bne	r3,zero,d089f8 <_malloc_r+0x260>
  d089e8:	2109883a 	add	r4,r4,r4
  d089ec:	3904703a 	and	r2,r7,r4
  d089f0:	4a400104 	addi	r9,r9,4
  d089f4:	103ffc26 	beq	r2,zero,d089e8 <_malloc_r+0x250>
  d089f8:	480490fa 	slli	r2,r9,3
  d089fc:	4819883a 	mov	r12,r9
  d08a00:	023fff04 	movi	r8,-4
  d08a04:	589b883a 	add	r13,r11,r2
  d08a08:	6807883a 	mov	r3,r13
  d08a0c:	014003c4 	movi	r5,15
  d08a10:	1c000317 	ldw	r16,12(r3)
  d08a14:	1c00041e 	bne	r3,r16,d08a28 <_malloc_r+0x290>
  d08a18:	0000a706 	br	d08cb8 <_malloc_r+0x520>
  d08a1c:	3000ab0e 	bge	r6,zero,d08ccc <_malloc_r+0x534>
  d08a20:	84000317 	ldw	r16,12(r16)
  d08a24:	1c00a426 	beq	r3,r16,d08cb8 <_malloc_r+0x520>
  d08a28:	80800117 	ldw	r2,4(r16)
  d08a2c:	1204703a 	and	r2,r2,r8
  d08a30:	144dc83a 	sub	r6,r2,r17
  d08a34:	29bff90e 	bge	r5,r6,d08a1c <_malloc_r+0x284>
  d08a38:	81000317 	ldw	r4,12(r16)
  d08a3c:	80c00217 	ldw	r3,8(r16)
  d08a40:	89400054 	ori	r5,r17,1
  d08a44:	8445883a 	add	r2,r16,r17
  d08a48:	20c00215 	stw	r3,8(r4)
  d08a4c:	19000315 	stw	r4,12(r3)
  d08a50:	81400115 	stw	r5,4(r16)
  d08a54:	1187883a 	add	r3,r2,r6
  d08a58:	31000054 	ori	r4,r6,1
  d08a5c:	50800315 	stw	r2,12(r10)
  d08a60:	50800215 	stw	r2,8(r10)
  d08a64:	19800015 	stw	r6,0(r3)
  d08a68:	11000115 	stw	r4,4(r2)
  d08a6c:	12800215 	stw	r10,8(r2)
  d08a70:	12800315 	stw	r10,12(r2)
  d08a74:	9009883a 	mov	r4,r18
  d08a78:	0d0cbfc0 	call	d0cbfc <__malloc_unlock>
  d08a7c:	80c00204 	addi	r3,r16,8
  d08a80:	003f5906 	br	d087e8 <_malloc_r+0x50>
  d08a84:	8109883a 	add	r4,r16,r4
  d08a88:	20800117 	ldw	r2,4(r4)
  d08a8c:	80c00217 	ldw	r3,8(r16)
  d08a90:	81400317 	ldw	r5,12(r16)
  d08a94:	10800054 	ori	r2,r2,1
  d08a98:	20800115 	stw	r2,4(r4)
  d08a9c:	28c00215 	stw	r3,8(r5)
  d08aa0:	19400315 	stw	r5,12(r3)
  d08aa4:	9009883a 	mov	r4,r18
  d08aa8:	0d0cbfc0 	call	d0cbfc <__malloc_unlock>
  d08aac:	80c00204 	addi	r3,r16,8
  d08ab0:	003f4d06 	br	d087e8 <_malloc_r+0x50>
  d08ab4:	80800204 	addi	r2,r16,8
  d08ab8:	14000317 	ldw	r16,12(r2)
  d08abc:	143f911e 	bne	r2,r16,d08904 <_malloc_r+0x16c>
  d08ac0:	1a400084 	addi	r9,r3,2
  d08ac4:	003f7306 	br	d08894 <_malloc_r+0xfc>
  d08ac8:	88c00054 	ori	r3,r17,1
  d08acc:	8445883a 	add	r2,r16,r17
  d08ad0:	80c00115 	stw	r3,4(r16)
  d08ad4:	003fdf06 	br	d08a54 <_malloc_r+0x2bc>
  d08ad8:	e4000217 	ldw	r16,8(fp)
  d08adc:	00bfff04 	movi	r2,-4
  d08ae0:	80c00117 	ldw	r3,4(r16)
  d08ae4:	802d883a 	mov	r22,r16
  d08ae8:	18aa703a 	and	r21,r3,r2
  d08aec:	ac401636 	bltu	r21,r17,d08b48 <_malloc_r+0x3b0>
  d08af0:	ac49c83a 	sub	r4,r21,r17
  d08af4:	008003c4 	movi	r2,15
  d08af8:	1100130e 	bge	r2,r4,d08b48 <_malloc_r+0x3b0>
  d08afc:	88800054 	ori	r2,r17,1
  d08b00:	8447883a 	add	r3,r16,r17
  d08b04:	80800115 	stw	r2,4(r16)
  d08b08:	20800054 	ori	r2,r4,1
  d08b0c:	18800115 	stw	r2,4(r3)
  d08b10:	e0c00215 	stw	r3,8(fp)
  d08b14:	9009883a 	mov	r4,r18
  d08b18:	0d0cbfc0 	call	d0cbfc <__malloc_unlock>
  d08b1c:	80c00204 	addi	r3,r16,8
  d08b20:	003f3106 	br	d087e8 <_malloc_r+0x50>
  d08b24:	39c00117 	ldw	r7,4(r7)
  d08b28:	573ffe04 	addi	fp,r10,-8
  d08b2c:	003fa006 	br	d089b0 <_malloc_r+0x218>
  d08b30:	00801504 	movi	r2,84
  d08b34:	10c06736 	bltu	r2,r3,d08cd4 <_malloc_r+0x53c>
  d08b38:	8804d33a 	srli	r2,r17,12
  d08b3c:	11801b84 	addi	r6,r2,110
  d08b40:	300490fa 	slli	r2,r6,3
  d08b44:	003f4106 	br	d0884c <_malloc_r+0xb4>
  d08b48:	d0a71617 	ldw	r2,-25512(gp)
  d08b4c:	d0e00d17 	ldw	r3,-32716(gp)
  d08b50:	053fffc4 	movi	r20,-1
  d08b54:	10800404 	addi	r2,r2,16
  d08b58:	88a7883a 	add	r19,r17,r2
  d08b5c:	1d000326 	beq	r3,r20,d08b6c <_malloc_r+0x3d4>
  d08b60:	98c3ffc4 	addi	r3,r19,4095
  d08b64:	00bc0004 	movi	r2,-4096
  d08b68:	18a6703a 	and	r19,r3,r2
  d08b6c:	9009883a 	mov	r4,r18
  d08b70:	980b883a 	mov	r5,r19
  d08b74:	0d0a82c0 	call	d0a82c <_sbrk_r>
  d08b78:	1009883a 	mov	r4,r2
  d08b7c:	15000426 	beq	r2,r20,d08b90 <_malloc_r+0x3f8>
  d08b80:	854b883a 	add	r5,r16,r21
  d08b84:	1029883a 	mov	r20,r2
  d08b88:	11405a2e 	bgeu	r2,r5,d08cf4 <_malloc_r+0x55c>
  d08b8c:	87000c26 	beq	r16,fp,d08bc0 <_malloc_r+0x428>
  d08b90:	e4000217 	ldw	r16,8(fp)
  d08b94:	80c00117 	ldw	r3,4(r16)
  d08b98:	00bfff04 	movi	r2,-4
  d08b9c:	1884703a 	and	r2,r3,r2
  d08ba0:	14400336 	bltu	r2,r17,d08bb0 <_malloc_r+0x418>
  d08ba4:	1449c83a 	sub	r4,r2,r17
  d08ba8:	008003c4 	movi	r2,15
  d08bac:	113fd316 	blt	r2,r4,d08afc <_malloc_r+0x364>
  d08bb0:	9009883a 	mov	r4,r18
  d08bb4:	0d0cbfc0 	call	d0cbfc <__malloc_unlock>
  d08bb8:	0007883a 	mov	r3,zero
  d08bbc:	003f0a06 	br	d087e8 <_malloc_r+0x50>
  d08bc0:	05c03474 	movhi	r23,209
  d08bc4:	bdd36204 	addi	r23,r23,19848
  d08bc8:	b8800017 	ldw	r2,0(r23)
  d08bcc:	988d883a 	add	r6,r19,r2
  d08bd0:	b9800015 	stw	r6,0(r23)
  d08bd4:	d0e00d17 	ldw	r3,-32716(gp)
  d08bd8:	00bfffc4 	movi	r2,-1
  d08bdc:	18808e26 	beq	r3,r2,d08e18 <_malloc_r+0x680>
  d08be0:	2145c83a 	sub	r2,r4,r5
  d08be4:	3085883a 	add	r2,r6,r2
  d08be8:	b8800015 	stw	r2,0(r23)
  d08bec:	20c001cc 	andi	r3,r4,7
  d08bf0:	18005f1e 	bne	r3,zero,d08d70 <_malloc_r+0x5d8>
  d08bf4:	000b883a 	mov	r5,zero
  d08bf8:	a4c5883a 	add	r2,r20,r19
  d08bfc:	1083ffcc 	andi	r2,r2,4095
  d08c00:	00c40004 	movi	r3,4096
  d08c04:	1887c83a 	sub	r3,r3,r2
  d08c08:	28e7883a 	add	r19,r5,r3
  d08c0c:	9009883a 	mov	r4,r18
  d08c10:	980b883a 	mov	r5,r19
  d08c14:	0d0a82c0 	call	d0a82c <_sbrk_r>
  d08c18:	1007883a 	mov	r3,r2
  d08c1c:	00bfffc4 	movi	r2,-1
  d08c20:	18807a26 	beq	r3,r2,d08e0c <_malloc_r+0x674>
  d08c24:	1d05c83a 	sub	r2,r3,r20
  d08c28:	9885883a 	add	r2,r19,r2
  d08c2c:	10c00054 	ori	r3,r2,1
  d08c30:	b8800017 	ldw	r2,0(r23)
  d08c34:	a021883a 	mov	r16,r20
  d08c38:	a0c00115 	stw	r3,4(r20)
  d08c3c:	9885883a 	add	r2,r19,r2
  d08c40:	b8800015 	stw	r2,0(r23)
  d08c44:	e5000215 	stw	r20,8(fp)
  d08c48:	b7003626 	beq	r22,fp,d08d24 <_malloc_r+0x58c>
  d08c4c:	018003c4 	movi	r6,15
  d08c50:	35404b36 	bltu	r6,r21,d08d80 <_malloc_r+0x5e8>
  d08c54:	00800044 	movi	r2,1
  d08c58:	a0800115 	stw	r2,4(r20)
  d08c5c:	003fcd06 	br	d08b94 <_malloc_r+0x3fc>
  d08c60:	2808d27a 	srli	r4,r5,9
  d08c64:	2000371e 	bne	r4,zero,d08d44 <_malloc_r+0x5ac>
  d08c68:	2808d0fa 	srli	r4,r5,3
  d08c6c:	200690fa 	slli	r3,r4,3
  d08c70:	1ad1883a 	add	r8,r3,r11
  d08c74:	41800217 	ldw	r6,8(r8)
  d08c78:	41805b26 	beq	r8,r6,d08de8 <_malloc_r+0x650>
  d08c7c:	30800117 	ldw	r2,4(r6)
  d08c80:	00ffff04 	movi	r3,-4
  d08c84:	10c4703a 	and	r2,r2,r3
  d08c88:	2880022e 	bgeu	r5,r2,d08c94 <_malloc_r+0x4fc>
  d08c8c:	31800217 	ldw	r6,8(r6)
  d08c90:	41bffa1e 	bne	r8,r6,d08c7c <_malloc_r+0x4e4>
  d08c94:	32000317 	ldw	r8,12(r6)
  d08c98:	39c00117 	ldw	r7,4(r7)
  d08c9c:	82000315 	stw	r8,12(r16)
  d08ca0:	81800215 	stw	r6,8(r16)
  d08ca4:	07003474 	movhi	fp,209
  d08ca8:	e7066d04 	addi	fp,fp,6580
  d08cac:	34000315 	stw	r16,12(r6)
  d08cb0:	44000215 	stw	r16,8(r8)
  d08cb4:	003f3e06 	br	d089b0 <_malloc_r+0x218>
  d08cb8:	63000044 	addi	r12,r12,1
  d08cbc:	608000cc 	andi	r2,r12,3
  d08cc0:	10005d26 	beq	r2,zero,d08e38 <_malloc_r+0x6a0>
  d08cc4:	18c00204 	addi	r3,r3,8
  d08cc8:	003f5106 	br	d08a10 <_malloc_r+0x278>
  d08ccc:	8089883a 	add	r4,r16,r2
  d08cd0:	003f6d06 	br	d08a88 <_malloc_r+0x2f0>
  d08cd4:	00805504 	movi	r2,340
  d08cd8:	10c02036 	bltu	r2,r3,d08d5c <_malloc_r+0x5c4>
  d08cdc:	8804d3fa 	srli	r2,r17,15
  d08ce0:	11801dc4 	addi	r6,r2,119
  d08ce4:	300490fa 	slli	r2,r6,3
  d08ce8:	003ed806 	br	d0884c <_malloc_r+0xb4>
  d08cec:	48c000c4 	addi	r3,r9,3
  d08cf0:	003f3106 	br	d089b8 <_malloc_r+0x220>
  d08cf4:	05c03474 	movhi	r23,209
  d08cf8:	bdd36204 	addi	r23,r23,19848
  d08cfc:	b8800017 	ldw	r2,0(r23)
  d08d00:	988d883a 	add	r6,r19,r2
  d08d04:	b9800015 	stw	r6,0(r23)
  d08d08:	293fb21e 	bne	r5,r4,d08bd4 <_malloc_r+0x43c>
  d08d0c:	2083ffcc 	andi	r2,r4,4095
  d08d10:	103fb01e 	bne	r2,zero,d08bd4 <_malloc_r+0x43c>
  d08d14:	e4000217 	ldw	r16,8(fp)
  d08d18:	9d45883a 	add	r2,r19,r21
  d08d1c:	10800054 	ori	r2,r2,1
  d08d20:	80800115 	stw	r2,4(r16)
  d08d24:	b8c00017 	ldw	r3,0(r23)
  d08d28:	d0a71717 	ldw	r2,-25508(gp)
  d08d2c:	10c0012e 	bgeu	r2,r3,d08d34 <_malloc_r+0x59c>
  d08d30:	d0e71715 	stw	r3,-25508(gp)
  d08d34:	d0a71817 	ldw	r2,-25504(gp)
  d08d38:	10ff962e 	bgeu	r2,r3,d08b94 <_malloc_r+0x3fc>
  d08d3c:	d0e71815 	stw	r3,-25504(gp)
  d08d40:	003f9406 	br	d08b94 <_malloc_r+0x3fc>
  d08d44:	00800104 	movi	r2,4
  d08d48:	11001e36 	bltu	r2,r4,d08dc4 <_malloc_r+0x62c>
  d08d4c:	2804d1ba 	srli	r2,r5,6
  d08d50:	11000e04 	addi	r4,r2,56
  d08d54:	200690fa 	slli	r3,r4,3
  d08d58:	003fc506 	br	d08c70 <_malloc_r+0x4d8>
  d08d5c:	00815504 	movi	r2,1364
  d08d60:	10c01d2e 	bgeu	r2,r3,d08dd8 <_malloc_r+0x640>
  d08d64:	01801f84 	movi	r6,126
  d08d68:	0080fc04 	movi	r2,1008
  d08d6c:	003eb706 	br	d0884c <_malloc_r+0xb4>
  d08d70:	00800204 	movi	r2,8
  d08d74:	10cbc83a 	sub	r5,r2,r3
  d08d78:	2169883a 	add	r20,r4,r5
  d08d7c:	003f9e06 	br	d08bf8 <_malloc_r+0x460>
  d08d80:	00bffe04 	movi	r2,-8
  d08d84:	a93ffd04 	addi	r4,r21,-12
  d08d88:	2088703a 	and	r4,r4,r2
  d08d8c:	b10b883a 	add	r5,r22,r4
  d08d90:	00c00144 	movi	r3,5
  d08d94:	28c00215 	stw	r3,8(r5)
  d08d98:	28c00115 	stw	r3,4(r5)
  d08d9c:	b0800117 	ldw	r2,4(r22)
  d08da0:	1080004c 	andi	r2,r2,1
  d08da4:	2084b03a 	or	r2,r4,r2
  d08da8:	b0800115 	stw	r2,4(r22)
  d08dac:	313fdd2e 	bgeu	r6,r4,d08d24 <_malloc_r+0x58c>
  d08db0:	b1400204 	addi	r5,r22,8
  d08db4:	9009883a 	mov	r4,r18
  d08db8:	0d07c100 	call	d07c10 <_free_r>
  d08dbc:	e4000217 	ldw	r16,8(fp)
  d08dc0:	003fd806 	br	d08d24 <_malloc_r+0x58c>
  d08dc4:	00800504 	movi	r2,20
  d08dc8:	11001536 	bltu	r2,r4,d08e20 <_malloc_r+0x688>
  d08dcc:	210016c4 	addi	r4,r4,91
  d08dd0:	200690fa 	slli	r3,r4,3
  d08dd4:	003fa606 	br	d08c70 <_malloc_r+0x4d8>
  d08dd8:	8804d4ba 	srli	r2,r17,18
  d08ddc:	11801f04 	addi	r6,r2,124
  d08de0:	300490fa 	slli	r2,r6,3
  d08de4:	003e9906 	br	d0884c <_malloc_r+0xb4>
  d08de8:	2009d0ba 	srai	r4,r4,2
  d08dec:	01403474 	movhi	r5,209
  d08df0:	29466d04 	addi	r5,r5,6580
  d08df4:	00c00044 	movi	r3,1
  d08df8:	28800117 	ldw	r2,4(r5)
  d08dfc:	1906983a 	sll	r3,r3,r4
  d08e00:	10c4b03a 	or	r2,r2,r3
  d08e04:	28800115 	stw	r2,4(r5)
  d08e08:	003fa306 	br	d08c98 <_malloc_r+0x500>
  d08e0c:	0027883a 	mov	r19,zero
  d08e10:	00c00044 	movi	r3,1
  d08e14:	003f8606 	br	d08c30 <_malloc_r+0x498>
  d08e18:	d1200d15 	stw	r4,-32716(gp)
  d08e1c:	003f7306 	br	d08bec <_malloc_r+0x454>
  d08e20:	00801504 	movi	r2,84
  d08e24:	11001936 	bltu	r2,r4,d08e8c <_malloc_r+0x6f4>
  d08e28:	2804d33a 	srli	r2,r5,12
  d08e2c:	11001b84 	addi	r4,r2,110
  d08e30:	200690fa 	slli	r3,r4,3
  d08e34:	003f8e06 	br	d08c70 <_malloc_r+0x4d8>
  d08e38:	480b883a 	mov	r5,r9
  d08e3c:	6807883a 	mov	r3,r13
  d08e40:	288000cc 	andi	r2,r5,3
  d08e44:	18fffe04 	addi	r3,r3,-8
  d08e48:	297fffc4 	addi	r5,r5,-1
  d08e4c:	10001526 	beq	r2,zero,d08ea4 <_malloc_r+0x70c>
  d08e50:	18800217 	ldw	r2,8(r3)
  d08e54:	10fffa26 	beq	r2,r3,d08e40 <_malloc_r+0x6a8>
  d08e58:	2109883a 	add	r4,r4,r4
  d08e5c:	393f1e36 	bltu	r7,r4,d08ad8 <_malloc_r+0x340>
  d08e60:	203f1d26 	beq	r4,zero,d08ad8 <_malloc_r+0x340>
  d08e64:	21c4703a 	and	r2,r4,r7
  d08e68:	10000226 	beq	r2,zero,d08e74 <_malloc_r+0x6dc>
  d08e6c:	6013883a 	mov	r9,r12
  d08e70:	003ee106 	br	d089f8 <_malloc_r+0x260>
  d08e74:	2109883a 	add	r4,r4,r4
  d08e78:	3904703a 	and	r2,r7,r4
  d08e7c:	63000104 	addi	r12,r12,4
  d08e80:	103ffc26 	beq	r2,zero,d08e74 <_malloc_r+0x6dc>
  d08e84:	6013883a 	mov	r9,r12
  d08e88:	003edb06 	br	d089f8 <_malloc_r+0x260>
  d08e8c:	00805504 	movi	r2,340
  d08e90:	11000836 	bltu	r2,r4,d08eb4 <_malloc_r+0x71c>
  d08e94:	2804d3fa 	srli	r2,r5,15
  d08e98:	11001dc4 	addi	r4,r2,119
  d08e9c:	200690fa 	slli	r3,r4,3
  d08ea0:	003f7306 	br	d08c70 <_malloc_r+0x4d8>
  d08ea4:	0104303a 	nor	r2,zero,r4
  d08ea8:	388e703a 	and	r7,r7,r2
  d08eac:	e1c00115 	stw	r7,4(fp)
  d08eb0:	003fe906 	br	d08e58 <_malloc_r+0x6c0>
  d08eb4:	00815504 	movi	r2,1364
  d08eb8:	1100032e 	bgeu	r2,r4,d08ec8 <_malloc_r+0x730>
  d08ebc:	01001f84 	movi	r4,126
  d08ec0:	00c0fc04 	movi	r3,1008
  d08ec4:	003f6a06 	br	d08c70 <_malloc_r+0x4d8>
  d08ec8:	2804d4ba 	srli	r2,r5,18
  d08ecc:	11001f04 	addi	r4,r2,124
  d08ed0:	200690fa 	slli	r3,r4,3
  d08ed4:	003f6606 	br	d08c70 <_malloc_r+0x4d8>

00d08ed8 <memchr>:
  d08ed8:	008000c4 	movi	r2,3
  d08edc:	29403fcc 	andi	r5,r5,255
  d08ee0:	2007883a 	mov	r3,r4
  d08ee4:	1180022e 	bgeu	r2,r6,d08ef0 <memchr+0x18>
  d08ee8:	2084703a 	and	r2,r4,r2
  d08eec:	10000b26 	beq	r2,zero,d08f1c <memchr+0x44>
  d08ef0:	313fffc4 	addi	r4,r6,-1
  d08ef4:	3000051e 	bne	r6,zero,d08f0c <memchr+0x34>
  d08ef8:	00002c06 	br	d08fac <memchr+0xd4>
  d08efc:	213fffc4 	addi	r4,r4,-1
  d08f00:	00bfffc4 	movi	r2,-1
  d08f04:	18c00044 	addi	r3,r3,1
  d08f08:	20802826 	beq	r4,r2,d08fac <memchr+0xd4>
  d08f0c:	18800003 	ldbu	r2,0(r3)
  d08f10:	28bffa1e 	bne	r5,r2,d08efc <memchr+0x24>
  d08f14:	1805883a 	mov	r2,r3
  d08f18:	f800283a 	ret
  d08f1c:	0011883a 	mov	r8,zero
  d08f20:	0007883a 	mov	r3,zero
  d08f24:	01c00104 	movi	r7,4
  d08f28:	4004923a 	slli	r2,r8,8
  d08f2c:	18c00044 	addi	r3,r3,1
  d08f30:	1151883a 	add	r8,r2,r5
  d08f34:	19fffc1e 	bne	r3,r7,d08f28 <memchr+0x50>
  d08f38:	02bfbff4 	movhi	r10,65279
  d08f3c:	52bfbfc4 	addi	r10,r10,-257
  d08f40:	02602074 	movhi	r9,32897
  d08f44:	4a602004 	addi	r9,r9,-32640
  d08f48:	02c000c4 	movi	r11,3
  d08f4c:	20800017 	ldw	r2,0(r4)
  d08f50:	31bfff04 	addi	r6,r6,-4
  d08f54:	200f883a 	mov	r7,r4
  d08f58:	1204f03a 	xor	r2,r2,r8
  d08f5c:	1287883a 	add	r3,r2,r10
  d08f60:	1a46703a 	and	r3,r3,r9
  d08f64:	0084303a 	nor	r2,zero,r2
  d08f68:	10c4703a 	and	r2,r2,r3
  d08f6c:	10000b26 	beq	r2,zero,d08f9c <memchr+0xc4>
  d08f70:	20800003 	ldbu	r2,0(r4)
  d08f74:	28800f26 	beq	r5,r2,d08fb4 <memchr+0xdc>
  d08f78:	20800043 	ldbu	r2,1(r4)
  d08f7c:	21c00044 	addi	r7,r4,1
  d08f80:	28800c26 	beq	r5,r2,d08fb4 <memchr+0xdc>
  d08f84:	20800083 	ldbu	r2,2(r4)
  d08f88:	21c00084 	addi	r7,r4,2
  d08f8c:	28800926 	beq	r5,r2,d08fb4 <memchr+0xdc>
  d08f90:	208000c3 	ldbu	r2,3(r4)
  d08f94:	21c000c4 	addi	r7,r4,3
  d08f98:	28800626 	beq	r5,r2,d08fb4 <memchr+0xdc>
  d08f9c:	21000104 	addi	r4,r4,4
  d08fa0:	59bfea36 	bltu	r11,r6,d08f4c <memchr+0x74>
  d08fa4:	2007883a 	mov	r3,r4
  d08fa8:	003fd106 	br	d08ef0 <memchr+0x18>
  d08fac:	0005883a 	mov	r2,zero
  d08fb0:	f800283a 	ret
  d08fb4:	3805883a 	mov	r2,r7
  d08fb8:	f800283a 	ret

00d08fbc <memcpy>:
  d08fbc:	01c003c4 	movi	r7,15
  d08fc0:	2007883a 	mov	r3,r4
  d08fc4:	3980032e 	bgeu	r7,r6,d08fd4 <memcpy+0x18>
  d08fc8:	2904b03a 	or	r2,r5,r4
  d08fcc:	108000cc 	andi	r2,r2,3
  d08fd0:	10000926 	beq	r2,zero,d08ff8 <memcpy+0x3c>
  d08fd4:	30000626 	beq	r6,zero,d08ff0 <memcpy+0x34>
  d08fd8:	30cd883a 	add	r6,r6,r3
  d08fdc:	28800003 	ldbu	r2,0(r5)
  d08fe0:	29400044 	addi	r5,r5,1
  d08fe4:	18800005 	stb	r2,0(r3)
  d08fe8:	18c00044 	addi	r3,r3,1
  d08fec:	30fffb1e 	bne	r6,r3,d08fdc <memcpy+0x20>
  d08ff0:	2005883a 	mov	r2,r4
  d08ff4:	f800283a 	ret
  d08ff8:	3811883a 	mov	r8,r7
  d08ffc:	200f883a 	mov	r7,r4
  d09000:	28c00017 	ldw	r3,0(r5)
  d09004:	31bffc04 	addi	r6,r6,-16
  d09008:	38c00015 	stw	r3,0(r7)
  d0900c:	28800117 	ldw	r2,4(r5)
  d09010:	38800115 	stw	r2,4(r7)
  d09014:	28c00217 	ldw	r3,8(r5)
  d09018:	38c00215 	stw	r3,8(r7)
  d0901c:	28800317 	ldw	r2,12(r5)
  d09020:	29400404 	addi	r5,r5,16
  d09024:	38800315 	stw	r2,12(r7)
  d09028:	39c00404 	addi	r7,r7,16
  d0902c:	41bff436 	bltu	r8,r6,d09000 <memcpy+0x44>
  d09030:	008000c4 	movi	r2,3
  d09034:	1180072e 	bgeu	r2,r6,d09054 <memcpy+0x98>
  d09038:	1007883a 	mov	r3,r2
  d0903c:	28800017 	ldw	r2,0(r5)
  d09040:	31bfff04 	addi	r6,r6,-4
  d09044:	29400104 	addi	r5,r5,4
  d09048:	38800015 	stw	r2,0(r7)
  d0904c:	39c00104 	addi	r7,r7,4
  d09050:	19bffa36 	bltu	r3,r6,d0903c <memcpy+0x80>
  d09054:	3807883a 	mov	r3,r7
  d09058:	003fde06 	br	d08fd4 <memcpy+0x18>

00d0905c <memmove>:
  d0905c:	2807883a 	mov	r3,r5
  d09060:	2011883a 	mov	r8,r4
  d09064:	29000c2e 	bgeu	r5,r4,d09098 <memmove+0x3c>
  d09068:	298f883a 	add	r7,r5,r6
  d0906c:	21c00a2e 	bgeu	r4,r7,d09098 <memmove+0x3c>
  d09070:	30000726 	beq	r6,zero,d09090 <memmove+0x34>
  d09074:	2187883a 	add	r3,r4,r6
  d09078:	198dc83a 	sub	r6,r3,r6
  d0907c:	39ffffc4 	addi	r7,r7,-1
  d09080:	38800003 	ldbu	r2,0(r7)
  d09084:	18ffffc4 	addi	r3,r3,-1
  d09088:	18800005 	stb	r2,0(r3)
  d0908c:	19bffb1e 	bne	r3,r6,d0907c <memmove+0x20>
  d09090:	2005883a 	mov	r2,r4
  d09094:	f800283a 	ret
  d09098:	01c003c4 	movi	r7,15
  d0909c:	39800a36 	bltu	r7,r6,d090c8 <memmove+0x6c>
  d090a0:	303ffb26 	beq	r6,zero,d09090 <memmove+0x34>
  d090a4:	400f883a 	mov	r7,r8
  d090a8:	320d883a 	add	r6,r6,r8
  d090ac:	28800003 	ldbu	r2,0(r5)
  d090b0:	29400044 	addi	r5,r5,1
  d090b4:	38800005 	stb	r2,0(r7)
  d090b8:	39c00044 	addi	r7,r7,1
  d090bc:	39bffb1e 	bne	r7,r6,d090ac <memmove+0x50>
  d090c0:	2005883a 	mov	r2,r4
  d090c4:	f800283a 	ret
  d090c8:	1904b03a 	or	r2,r3,r4
  d090cc:	108000cc 	andi	r2,r2,3
  d090d0:	103ff31e 	bne	r2,zero,d090a0 <memmove+0x44>
  d090d4:	3811883a 	mov	r8,r7
  d090d8:	180b883a 	mov	r5,r3
  d090dc:	200f883a 	mov	r7,r4
  d090e0:	28c00017 	ldw	r3,0(r5)
  d090e4:	31bffc04 	addi	r6,r6,-16
  d090e8:	38c00015 	stw	r3,0(r7)
  d090ec:	28800117 	ldw	r2,4(r5)
  d090f0:	38800115 	stw	r2,4(r7)
  d090f4:	28c00217 	ldw	r3,8(r5)
  d090f8:	38c00215 	stw	r3,8(r7)
  d090fc:	28800317 	ldw	r2,12(r5)
  d09100:	29400404 	addi	r5,r5,16
  d09104:	38800315 	stw	r2,12(r7)
  d09108:	39c00404 	addi	r7,r7,16
  d0910c:	41bff436 	bltu	r8,r6,d090e0 <memmove+0x84>
  d09110:	008000c4 	movi	r2,3
  d09114:	1180072e 	bgeu	r2,r6,d09134 <memmove+0xd8>
  d09118:	1007883a 	mov	r3,r2
  d0911c:	28800017 	ldw	r2,0(r5)
  d09120:	31bfff04 	addi	r6,r6,-4
  d09124:	29400104 	addi	r5,r5,4
  d09128:	38800015 	stw	r2,0(r7)
  d0912c:	39c00104 	addi	r7,r7,4
  d09130:	19bffa36 	bltu	r3,r6,d0911c <memmove+0xc0>
  d09134:	3811883a 	mov	r8,r7
  d09138:	003fd906 	br	d090a0 <memmove+0x44>

00d0913c <memset>:
  d0913c:	008000c4 	movi	r2,3
  d09140:	29403fcc 	andi	r5,r5,255
  d09144:	2007883a 	mov	r3,r4
  d09148:	1180022e 	bgeu	r2,r6,d09154 <memset+0x18>
  d0914c:	2084703a 	and	r2,r4,r2
  d09150:	10000826 	beq	r2,zero,d09174 <memset+0x38>
  d09154:	30000526 	beq	r6,zero,d0916c <memset+0x30>
  d09158:	2805883a 	mov	r2,r5
  d0915c:	30cd883a 	add	r6,r6,r3
  d09160:	18800005 	stb	r2,0(r3)
  d09164:	18c00044 	addi	r3,r3,1
  d09168:	19bffd1e 	bne	r3,r6,d09160 <memset+0x24>
  d0916c:	2005883a 	mov	r2,r4
  d09170:	f800283a 	ret
  d09174:	2804923a 	slli	r2,r5,8
  d09178:	020003c4 	movi	r8,15
  d0917c:	200f883a 	mov	r7,r4
  d09180:	2884b03a 	or	r2,r5,r2
  d09184:	1006943a 	slli	r3,r2,16
  d09188:	10c6b03a 	or	r3,r2,r3
  d0918c:	41800a2e 	bgeu	r8,r6,d091b8 <memset+0x7c>
  d09190:	4005883a 	mov	r2,r8
  d09194:	31bffc04 	addi	r6,r6,-16
  d09198:	38c00015 	stw	r3,0(r7)
  d0919c:	38c00115 	stw	r3,4(r7)
  d091a0:	38c00215 	stw	r3,8(r7)
  d091a4:	38c00315 	stw	r3,12(r7)
  d091a8:	39c00404 	addi	r7,r7,16
  d091ac:	11bff936 	bltu	r2,r6,d09194 <memset+0x58>
  d091b0:	008000c4 	movi	r2,3
  d091b4:	1180052e 	bgeu	r2,r6,d091cc <memset+0x90>
  d091b8:	31bfff04 	addi	r6,r6,-4
  d091bc:	008000c4 	movi	r2,3
  d091c0:	38c00015 	stw	r3,0(r7)
  d091c4:	39c00104 	addi	r7,r7,4
  d091c8:	11bffb36 	bltu	r2,r6,d091b8 <memset+0x7c>
  d091cc:	3807883a 	mov	r3,r7
  d091d0:	003fe006 	br	d09154 <memset+0x18>

00d091d4 <_Bfree>:
  d091d4:	28000826 	beq	r5,zero,d091f8 <_Bfree+0x24>
  d091d8:	28800117 	ldw	r2,4(r5)
  d091dc:	21001317 	ldw	r4,76(r4)
  d091e0:	1085883a 	add	r2,r2,r2
  d091e4:	1085883a 	add	r2,r2,r2
  d091e8:	1105883a 	add	r2,r2,r4
  d091ec:	10c00017 	ldw	r3,0(r2)
  d091f0:	28c00015 	stw	r3,0(r5)
  d091f4:	11400015 	stw	r5,0(r2)
  d091f8:	f800283a 	ret

00d091fc <__hi0bits>:
  d091fc:	20bfffec 	andhi	r2,r4,65535
  d09200:	10001426 	beq	r2,zero,d09254 <__hi0bits+0x58>
  d09204:	0007883a 	mov	r3,zero
  d09208:	20bfc02c 	andhi	r2,r4,65280
  d0920c:	1000021e 	bne	r2,zero,d09218 <__hi0bits+0x1c>
  d09210:	2008923a 	slli	r4,r4,8
  d09214:	18c00204 	addi	r3,r3,8
  d09218:	20bc002c 	andhi	r2,r4,61440
  d0921c:	1000021e 	bne	r2,zero,d09228 <__hi0bits+0x2c>
  d09220:	2008913a 	slli	r4,r4,4
  d09224:	18c00104 	addi	r3,r3,4
  d09228:	20b0002c 	andhi	r2,r4,49152
  d0922c:	1000031e 	bne	r2,zero,d0923c <__hi0bits+0x40>
  d09230:	2105883a 	add	r2,r4,r4
  d09234:	18c00084 	addi	r3,r3,2
  d09238:	1089883a 	add	r4,r2,r2
  d0923c:	20000316 	blt	r4,zero,d0924c <__hi0bits+0x50>
  d09240:	2090002c 	andhi	r2,r4,16384
  d09244:	10000626 	beq	r2,zero,d09260 <__hi0bits+0x64>
  d09248:	18c00044 	addi	r3,r3,1
  d0924c:	1805883a 	mov	r2,r3
  d09250:	f800283a 	ret
  d09254:	2008943a 	slli	r4,r4,16
  d09258:	00c00404 	movi	r3,16
  d0925c:	003fea06 	br	d09208 <__hi0bits+0xc>
  d09260:	00c00804 	movi	r3,32
  d09264:	1805883a 	mov	r2,r3
  d09268:	f800283a 	ret

00d0926c <__lo0bits>:
  d0926c:	20c00017 	ldw	r3,0(r4)
  d09270:	188001cc 	andi	r2,r3,7
  d09274:	10000a26 	beq	r2,zero,d092a0 <__lo0bits+0x34>
  d09278:	1880004c 	andi	r2,r3,1
  d0927c:	1005003a 	cmpeq	r2,r2,zero
  d09280:	10002126 	beq	r2,zero,d09308 <__lo0bits+0x9c>
  d09284:	1880008c 	andi	r2,r3,2
  d09288:	1000251e 	bne	r2,zero,d09320 <__lo0bits+0xb4>
  d0928c:	1804d0ba 	srli	r2,r3,2
  d09290:	01400084 	movi	r5,2
  d09294:	20800015 	stw	r2,0(r4)
  d09298:	2805883a 	mov	r2,r5
  d0929c:	f800283a 	ret
  d092a0:	18bfffcc 	andi	r2,r3,65535
  d092a4:	10001526 	beq	r2,zero,d092fc <__lo0bits+0x90>
  d092a8:	000b883a 	mov	r5,zero
  d092ac:	18803fcc 	andi	r2,r3,255
  d092b0:	1000021e 	bne	r2,zero,d092bc <__lo0bits+0x50>
  d092b4:	1806d23a 	srli	r3,r3,8
  d092b8:	29400204 	addi	r5,r5,8
  d092bc:	188003cc 	andi	r2,r3,15
  d092c0:	1000021e 	bne	r2,zero,d092cc <__lo0bits+0x60>
  d092c4:	1806d13a 	srli	r3,r3,4
  d092c8:	29400104 	addi	r5,r5,4
  d092cc:	188000cc 	andi	r2,r3,3
  d092d0:	1000021e 	bne	r2,zero,d092dc <__lo0bits+0x70>
  d092d4:	1806d0ba 	srli	r3,r3,2
  d092d8:	29400084 	addi	r5,r5,2
  d092dc:	1880004c 	andi	r2,r3,1
  d092e0:	1000031e 	bne	r2,zero,d092f0 <__lo0bits+0x84>
  d092e4:	1806d07a 	srli	r3,r3,1
  d092e8:	18000a26 	beq	r3,zero,d09314 <__lo0bits+0xa8>
  d092ec:	29400044 	addi	r5,r5,1
  d092f0:	2805883a 	mov	r2,r5
  d092f4:	20c00015 	stw	r3,0(r4)
  d092f8:	f800283a 	ret
  d092fc:	1806d43a 	srli	r3,r3,16
  d09300:	01400404 	movi	r5,16
  d09304:	003fe906 	br	d092ac <__lo0bits+0x40>
  d09308:	000b883a 	mov	r5,zero
  d0930c:	2805883a 	mov	r2,r5
  d09310:	f800283a 	ret
  d09314:	01400804 	movi	r5,32
  d09318:	2805883a 	mov	r2,r5
  d0931c:	f800283a 	ret
  d09320:	1804d07a 	srli	r2,r3,1
  d09324:	01400044 	movi	r5,1
  d09328:	20800015 	stw	r2,0(r4)
  d0932c:	003fda06 	br	d09298 <__lo0bits+0x2c>

00d09330 <__mcmp>:
  d09330:	20800417 	ldw	r2,16(r4)
  d09334:	28c00417 	ldw	r3,16(r5)
  d09338:	10cfc83a 	sub	r7,r2,r3
  d0933c:	38000c1e 	bne	r7,zero,d09370 <__mcmp+0x40>
  d09340:	18c5883a 	add	r2,r3,r3
  d09344:	1085883a 	add	r2,r2,r2
  d09348:	10c00504 	addi	r3,r2,20
  d0934c:	21000504 	addi	r4,r4,20
  d09350:	28cb883a 	add	r5,r5,r3
  d09354:	2085883a 	add	r2,r4,r2
  d09358:	10bfff04 	addi	r2,r2,-4
  d0935c:	297fff04 	addi	r5,r5,-4
  d09360:	11800017 	ldw	r6,0(r2)
  d09364:	28c00017 	ldw	r3,0(r5)
  d09368:	30c0031e 	bne	r6,r3,d09378 <__mcmp+0x48>
  d0936c:	20bffa36 	bltu	r4,r2,d09358 <__mcmp+0x28>
  d09370:	3805883a 	mov	r2,r7
  d09374:	f800283a 	ret
  d09378:	30c00336 	bltu	r6,r3,d09388 <__mcmp+0x58>
  d0937c:	01c00044 	movi	r7,1
  d09380:	3805883a 	mov	r2,r7
  d09384:	f800283a 	ret
  d09388:	01ffffc4 	movi	r7,-1
  d0938c:	003ff806 	br	d09370 <__mcmp+0x40>

00d09390 <__ulp>:
  d09390:	295ffc2c 	andhi	r5,r5,32752
  d09394:	013f3034 	movhi	r4,64704
  d09398:	290b883a 	add	r5,r5,r4
  d0939c:	0145c83a 	sub	r2,zero,r5
  d093a0:	1007d53a 	srai	r3,r2,20
  d093a4:	000d883a 	mov	r6,zero
  d093a8:	0140040e 	bge	zero,r5,d093bc <__ulp+0x2c>
  d093ac:	280f883a 	mov	r7,r5
  d093b0:	3807883a 	mov	r3,r7
  d093b4:	3005883a 	mov	r2,r6
  d093b8:	f800283a 	ret
  d093bc:	008004c4 	movi	r2,19
  d093c0:	193ffb04 	addi	r4,r3,-20
  d093c4:	10c00c0e 	bge	r2,r3,d093f8 <__ulp+0x68>
  d093c8:	008007c4 	movi	r2,31
  d093cc:	1107c83a 	sub	r3,r2,r4
  d093d0:	00800784 	movi	r2,30
  d093d4:	01400044 	movi	r5,1
  d093d8:	11000216 	blt	r2,r4,d093e4 <__ulp+0x54>
  d093dc:	00800044 	movi	r2,1
  d093e0:	10ca983a 	sll	r5,r2,r3
  d093e4:	000f883a 	mov	r7,zero
  d093e8:	280d883a 	mov	r6,r5
  d093ec:	3807883a 	mov	r3,r7
  d093f0:	3005883a 	mov	r2,r6
  d093f4:	f800283a 	ret
  d093f8:	00800234 	movhi	r2,8
  d093fc:	10cfd83a 	sra	r7,r2,r3
  d09400:	000d883a 	mov	r6,zero
  d09404:	3005883a 	mov	r2,r6
  d09408:	3807883a 	mov	r3,r7
  d0940c:	f800283a 	ret

00d09410 <__b2d>:
  d09410:	20800417 	ldw	r2,16(r4)
  d09414:	defff904 	addi	sp,sp,-28
  d09418:	dd000415 	stw	r20,16(sp)
  d0941c:	1085883a 	add	r2,r2,r2
  d09420:	25000504 	addi	r20,r4,20
  d09424:	1085883a 	add	r2,r2,r2
  d09428:	dc000015 	stw	r16,0(sp)
  d0942c:	a0a1883a 	add	r16,r20,r2
  d09430:	dd400515 	stw	r21,20(sp)
  d09434:	857fff17 	ldw	r21,-4(r16)
  d09438:	dc400115 	stw	r17,4(sp)
  d0943c:	dfc00615 	stw	ra,24(sp)
  d09440:	a809883a 	mov	r4,r21
  d09444:	2823883a 	mov	r17,r5
  d09448:	dcc00315 	stw	r19,12(sp)
  d0944c:	dc800215 	stw	r18,8(sp)
  d09450:	0d091fc0 	call	d091fc <__hi0bits>
  d09454:	100b883a 	mov	r5,r2
  d09458:	00800804 	movi	r2,32
  d0945c:	1145c83a 	sub	r2,r2,r5
  d09460:	88800015 	stw	r2,0(r17)
  d09464:	00800284 	movi	r2,10
  d09468:	80ffff04 	addi	r3,r16,-4
  d0946c:	11401416 	blt	r2,r5,d094c0 <__b2d+0xb0>
  d09470:	008002c4 	movi	r2,11
  d09474:	1149c83a 	sub	r4,r2,r5
  d09478:	a0c02736 	bltu	r20,r3,d09518 <__b2d+0x108>
  d0947c:	000d883a 	mov	r6,zero
  d09480:	28800544 	addi	r2,r5,21
  d09484:	a906d83a 	srl	r3,r21,r4
  d09488:	a884983a 	sll	r2,r21,r2
  d0948c:	1ccffc34 	orhi	r19,r3,16368
  d09490:	11a4b03a 	or	r18,r2,r6
  d09494:	9005883a 	mov	r2,r18
  d09498:	9807883a 	mov	r3,r19
  d0949c:	dfc00617 	ldw	ra,24(sp)
  d094a0:	dd400517 	ldw	r21,20(sp)
  d094a4:	dd000417 	ldw	r20,16(sp)
  d094a8:	dcc00317 	ldw	r19,12(sp)
  d094ac:	dc800217 	ldw	r18,8(sp)
  d094b0:	dc400117 	ldw	r17,4(sp)
  d094b4:	dc000017 	ldw	r16,0(sp)
  d094b8:	dec00704 	addi	sp,sp,28
  d094bc:	f800283a 	ret
  d094c0:	a0c00e36 	bltu	r20,r3,d094fc <__b2d+0xec>
  d094c4:	293ffd44 	addi	r4,r5,-11
  d094c8:	000d883a 	mov	r6,zero
  d094cc:	20000f26 	beq	r4,zero,d0950c <__b2d+0xfc>
  d094d0:	00800804 	movi	r2,32
  d094d4:	110bc83a 	sub	r5,r2,r4
  d094d8:	a0c01236 	bltu	r20,r3,d09524 <__b2d+0x114>
  d094dc:	000f883a 	mov	r7,zero
  d094e0:	a904983a 	sll	r2,r21,r4
  d094e4:	3146d83a 	srl	r3,r6,r5
  d094e8:	3108983a 	sll	r4,r6,r4
  d094ec:	108ffc34 	orhi	r2,r2,16368
  d094f0:	18a6b03a 	or	r19,r3,r2
  d094f4:	3924b03a 	or	r18,r7,r4
  d094f8:	003fe606 	br	d09494 <__b2d+0x84>
  d094fc:	293ffd44 	addi	r4,r5,-11
  d09500:	81bffe17 	ldw	r6,-8(r16)
  d09504:	80fffe04 	addi	r3,r16,-8
  d09508:	203ff11e 	bne	r4,zero,d094d0 <__b2d+0xc0>
  d0950c:	accffc34 	orhi	r19,r21,16368
  d09510:	3025883a 	mov	r18,r6
  d09514:	003fdf06 	br	d09494 <__b2d+0x84>
  d09518:	18bfff17 	ldw	r2,-4(r3)
  d0951c:	110cd83a 	srl	r6,r2,r4
  d09520:	003fd706 	br	d09480 <__b2d+0x70>
  d09524:	18bfff17 	ldw	r2,-4(r3)
  d09528:	114ed83a 	srl	r7,r2,r5
  d0952c:	003fec06 	br	d094e0 <__b2d+0xd0>

00d09530 <__ratio>:
  d09530:	defff904 	addi	sp,sp,-28
  d09534:	dc400215 	stw	r17,8(sp)
  d09538:	2823883a 	mov	r17,r5
  d0953c:	d80b883a 	mov	r5,sp
  d09540:	dfc00615 	stw	ra,24(sp)
  d09544:	dd000515 	stw	r20,20(sp)
  d09548:	dcc00415 	stw	r19,16(sp)
  d0954c:	dc800315 	stw	r18,12(sp)
  d09550:	2025883a 	mov	r18,r4
  d09554:	0d094100 	call	d09410 <__b2d>
  d09558:	8809883a 	mov	r4,r17
  d0955c:	d9400104 	addi	r5,sp,4
  d09560:	1027883a 	mov	r19,r2
  d09564:	1829883a 	mov	r20,r3
  d09568:	0d094100 	call	d09410 <__b2d>
  d0956c:	89000417 	ldw	r4,16(r17)
  d09570:	91c00417 	ldw	r7,16(r18)
  d09574:	d9800117 	ldw	r6,4(sp)
  d09578:	180b883a 	mov	r5,r3
  d0957c:	390fc83a 	sub	r7,r7,r4
  d09580:	1009883a 	mov	r4,r2
  d09584:	d8800017 	ldw	r2,0(sp)
  d09588:	380e917a 	slli	r7,r7,5
  d0958c:	2011883a 	mov	r8,r4
  d09590:	1185c83a 	sub	r2,r2,r6
  d09594:	11c5883a 	add	r2,r2,r7
  d09598:	1006953a 	slli	r3,r2,20
  d0959c:	2813883a 	mov	r9,r5
  d095a0:	00800d0e 	bge	zero,r2,d095d8 <__ratio+0xa8>
  d095a4:	1d29883a 	add	r20,r3,r20
  d095a8:	a00b883a 	mov	r5,r20
  d095ac:	480f883a 	mov	r7,r9
  d095b0:	9809883a 	mov	r4,r19
  d095b4:	400d883a 	mov	r6,r8
  d095b8:	0d02f240 	call	d02f24 <__divdf3>
  d095bc:	dfc00617 	ldw	ra,24(sp)
  d095c0:	dd000517 	ldw	r20,20(sp)
  d095c4:	dcc00417 	ldw	r19,16(sp)
  d095c8:	dc800317 	ldw	r18,12(sp)
  d095cc:	dc400217 	ldw	r17,8(sp)
  d095d0:	dec00704 	addi	sp,sp,28
  d095d4:	f800283a 	ret
  d095d8:	28d3c83a 	sub	r9,r5,r3
  d095dc:	003ff206 	br	d095a8 <__ratio+0x78>

00d095e0 <_mprec_log10>:
  d095e0:	defffe04 	addi	sp,sp,-8
  d095e4:	008005c4 	movi	r2,23
  d095e8:	dc000015 	stw	r16,0(sp)
  d095ec:	dfc00115 	stw	ra,4(sp)
  d095f0:	2021883a 	mov	r16,r4
  d095f4:	11000c16 	blt	r2,r4,d09628 <_mprec_log10+0x48>
  d095f8:	200490fa 	slli	r2,r4,3
  d095fc:	00c03474 	movhi	r3,209
  d09600:	18c4cc04 	addi	r3,r3,4912
  d09604:	10c5883a 	add	r2,r2,r3
  d09608:	12400117 	ldw	r9,4(r2)
  d0960c:	12000017 	ldw	r8,0(r2)
  d09610:	4807883a 	mov	r3,r9
  d09614:	4005883a 	mov	r2,r8
  d09618:	dfc00117 	ldw	ra,4(sp)
  d0961c:	dc000017 	ldw	r16,0(sp)
  d09620:	dec00204 	addi	sp,sp,8
  d09624:	f800283a 	ret
  d09628:	0011883a 	mov	r8,zero
  d0962c:	024ffc34 	movhi	r9,16368
  d09630:	0005883a 	mov	r2,zero
  d09634:	00d00934 	movhi	r3,16420
  d09638:	480b883a 	mov	r5,r9
  d0963c:	4009883a 	mov	r4,r8
  d09640:	180f883a 	mov	r7,r3
  d09644:	100d883a 	mov	r6,r2
  d09648:	0d0bac40 	call	d0bac4 <__muldf3>
  d0964c:	843fffc4 	addi	r16,r16,-1
  d09650:	1011883a 	mov	r8,r2
  d09654:	1813883a 	mov	r9,r3
  d09658:	803ff51e 	bne	r16,zero,d09630 <_mprec_log10+0x50>
  d0965c:	4005883a 	mov	r2,r8
  d09660:	4807883a 	mov	r3,r9
  d09664:	dfc00117 	ldw	ra,4(sp)
  d09668:	dc000017 	ldw	r16,0(sp)
  d0966c:	dec00204 	addi	sp,sp,8
  d09670:	f800283a 	ret

00d09674 <__copybits>:
  d09674:	297fffc4 	addi	r5,r5,-1
  d09678:	30800417 	ldw	r2,16(r6)
  d0967c:	280bd17a 	srai	r5,r5,5
  d09680:	31800504 	addi	r6,r6,20
  d09684:	1085883a 	add	r2,r2,r2
  d09688:	294b883a 	add	r5,r5,r5
  d0968c:	294b883a 	add	r5,r5,r5
  d09690:	1085883a 	add	r2,r2,r2
  d09694:	290b883a 	add	r5,r5,r4
  d09698:	3087883a 	add	r3,r6,r2
  d0969c:	29400104 	addi	r5,r5,4
  d096a0:	30c0052e 	bgeu	r6,r3,d096b8 <__copybits+0x44>
  d096a4:	30800017 	ldw	r2,0(r6)
  d096a8:	31800104 	addi	r6,r6,4
  d096ac:	20800015 	stw	r2,0(r4)
  d096b0:	21000104 	addi	r4,r4,4
  d096b4:	30fffb36 	bltu	r6,r3,d096a4 <__copybits+0x30>
  d096b8:	2140032e 	bgeu	r4,r5,d096c8 <__copybits+0x54>
  d096bc:	20000015 	stw	zero,0(r4)
  d096c0:	21000104 	addi	r4,r4,4
  d096c4:	217ffd36 	bltu	r4,r5,d096bc <__copybits+0x48>
  d096c8:	f800283a 	ret

00d096cc <__any_on>:
  d096cc:	20800417 	ldw	r2,16(r4)
  d096d0:	2807d17a 	srai	r3,r5,5
  d096d4:	21000504 	addi	r4,r4,20
  d096d8:	10c00d0e 	bge	r2,r3,d09710 <__any_on+0x44>
  d096dc:	1085883a 	add	r2,r2,r2
  d096e0:	1085883a 	add	r2,r2,r2
  d096e4:	208d883a 	add	r6,r4,r2
  d096e8:	2180182e 	bgeu	r4,r6,d0974c <__any_on+0x80>
  d096ec:	30bfff17 	ldw	r2,-4(r6)
  d096f0:	30ffff04 	addi	r3,r6,-4
  d096f4:	1000041e 	bne	r2,zero,d09708 <__any_on+0x3c>
  d096f8:	20c0142e 	bgeu	r4,r3,d0974c <__any_on+0x80>
  d096fc:	18ffff04 	addi	r3,r3,-4
  d09700:	18800017 	ldw	r2,0(r3)
  d09704:	103ffc26 	beq	r2,zero,d096f8 <__any_on+0x2c>
  d09708:	00800044 	movi	r2,1
  d0970c:	f800283a 	ret
  d09710:	18800a0e 	bge	r3,r2,d0973c <__any_on+0x70>
  d09714:	294007cc 	andi	r5,r5,31
  d09718:	28000826 	beq	r5,zero,d0973c <__any_on+0x70>
  d0971c:	18c5883a 	add	r2,r3,r3
  d09720:	1085883a 	add	r2,r2,r2
  d09724:	208d883a 	add	r6,r4,r2
  d09728:	30c00017 	ldw	r3,0(r6)
  d0972c:	1944d83a 	srl	r2,r3,r5
  d09730:	1144983a 	sll	r2,r2,r5
  d09734:	18bff41e 	bne	r3,r2,d09708 <__any_on+0x3c>
  d09738:	003feb06 	br	d096e8 <__any_on+0x1c>
  d0973c:	18c5883a 	add	r2,r3,r3
  d09740:	1085883a 	add	r2,r2,r2
  d09744:	208d883a 	add	r6,r4,r2
  d09748:	003fe706 	br	d096e8 <__any_on+0x1c>
  d0974c:	0005883a 	mov	r2,zero
  d09750:	f800283a 	ret

00d09754 <_Balloc>:
  d09754:	20c01317 	ldw	r3,76(r4)
  d09758:	defffb04 	addi	sp,sp,-20
  d0975c:	dcc00315 	stw	r19,12(sp)
  d09760:	dc800215 	stw	r18,8(sp)
  d09764:	dfc00415 	stw	ra,16(sp)
  d09768:	2825883a 	mov	r18,r5
  d0976c:	dc400115 	stw	r17,4(sp)
  d09770:	dc000015 	stw	r16,0(sp)
  d09774:	2027883a 	mov	r19,r4
  d09778:	01800404 	movi	r6,16
  d0977c:	01400104 	movi	r5,4
  d09780:	18001726 	beq	r3,zero,d097e0 <_Balloc+0x8c>
  d09784:	01400044 	movi	r5,1
  d09788:	9485883a 	add	r2,r18,r18
  d0978c:	2ca2983a 	sll	r17,r5,r18
  d09790:	1085883a 	add	r2,r2,r2
  d09794:	10c7883a 	add	r3,r2,r3
  d09798:	1c000017 	ldw	r16,0(r3)
  d0979c:	8c4d883a 	add	r6,r17,r17
  d097a0:	318d883a 	add	r6,r6,r6
  d097a4:	9809883a 	mov	r4,r19
  d097a8:	31800504 	addi	r6,r6,20
  d097ac:	80001226 	beq	r16,zero,d097f8 <_Balloc+0xa4>
  d097b0:	80800017 	ldw	r2,0(r16)
  d097b4:	18800015 	stw	r2,0(r3)
  d097b8:	80000415 	stw	zero,16(r16)
  d097bc:	80000315 	stw	zero,12(r16)
  d097c0:	8005883a 	mov	r2,r16
  d097c4:	dfc00417 	ldw	ra,16(sp)
  d097c8:	dcc00317 	ldw	r19,12(sp)
  d097cc:	dc800217 	ldw	r18,8(sp)
  d097d0:	dc400117 	ldw	r17,4(sp)
  d097d4:	dc000017 	ldw	r16,0(sp)
  d097d8:	dec00504 	addi	sp,sp,20
  d097dc:	f800283a 	ret
  d097e0:	0d0ab1c0 	call	d0ab1c <_calloc_r>
  d097e4:	1007883a 	mov	r3,r2
  d097e8:	0021883a 	mov	r16,zero
  d097ec:	98801315 	stw	r2,76(r19)
  d097f0:	103fe41e 	bne	r2,zero,d09784 <_Balloc+0x30>
  d097f4:	003ff206 	br	d097c0 <_Balloc+0x6c>
  d097f8:	0d0ab1c0 	call	d0ab1c <_calloc_r>
  d097fc:	103ff026 	beq	r2,zero,d097c0 <_Balloc+0x6c>
  d09800:	1021883a 	mov	r16,r2
  d09804:	14800115 	stw	r18,4(r2)
  d09808:	14400215 	stw	r17,8(r2)
  d0980c:	003fea06 	br	d097b8 <_Balloc+0x64>

00d09810 <__d2b>:
  d09810:	defff504 	addi	sp,sp,-44
  d09814:	dcc00515 	stw	r19,20(sp)
  d09818:	04c00044 	movi	r19,1
  d0981c:	dc000215 	stw	r16,8(sp)
  d09820:	2821883a 	mov	r16,r5
  d09824:	980b883a 	mov	r5,r19
  d09828:	ddc00915 	stw	r23,36(sp)
  d0982c:	dd800815 	stw	r22,32(sp)
  d09830:	dd400715 	stw	r21,28(sp)
  d09834:	dd000615 	stw	r20,24(sp)
  d09838:	dc800415 	stw	r18,16(sp)
  d0983c:	dc400315 	stw	r17,12(sp)
  d09840:	dfc00a15 	stw	ra,40(sp)
  d09844:	3023883a 	mov	r17,r6
  d09848:	382d883a 	mov	r22,r7
  d0984c:	ddc00b17 	ldw	r23,44(sp)
  d09850:	0d097540 	call	d09754 <_Balloc>
  d09854:	1025883a 	mov	r18,r2
  d09858:	00a00034 	movhi	r2,32768
  d0985c:	10bfffc4 	addi	r2,r2,-1
  d09860:	8888703a 	and	r4,r17,r2
  d09864:	202ad53a 	srli	r21,r4,20
  d09868:	00800434 	movhi	r2,16
  d0986c:	10bfffc4 	addi	r2,r2,-1
  d09870:	8886703a 	and	r3,r17,r2
  d09874:	a829003a 	cmpeq	r20,r21,zero
  d09878:	800b883a 	mov	r5,r16
  d0987c:	d8c00115 	stw	r3,4(sp)
  d09880:	94000504 	addi	r16,r18,20
  d09884:	a000021e 	bne	r20,zero,d09890 <__d2b+0x80>
  d09888:	18c00434 	orhi	r3,r3,16
  d0988c:	d8c00115 	stw	r3,4(sp)
  d09890:	28002726 	beq	r5,zero,d09930 <__d2b+0x120>
  d09894:	d809883a 	mov	r4,sp
  d09898:	d9400015 	stw	r5,0(sp)
  d0989c:	0d0926c0 	call	d0926c <__lo0bits>
  d098a0:	100d883a 	mov	r6,r2
  d098a4:	10003526 	beq	r2,zero,d0997c <__d2b+0x16c>
  d098a8:	d8c00117 	ldw	r3,4(sp)
  d098ac:	00800804 	movi	r2,32
  d098b0:	1185c83a 	sub	r2,r2,r6
  d098b4:	d9000017 	ldw	r4,0(sp)
  d098b8:	1886983a 	sll	r3,r3,r2
  d098bc:	1906b03a 	or	r3,r3,r4
  d098c0:	90c00515 	stw	r3,20(r18)
  d098c4:	d8c00117 	ldw	r3,4(sp)
  d098c8:	1986d83a 	srl	r3,r3,r6
  d098cc:	d8c00115 	stw	r3,4(sp)
  d098d0:	180b003a 	cmpeq	r5,r3,zero
  d098d4:	00800084 	movi	r2,2
  d098d8:	114bc83a 	sub	r5,r2,r5
  d098dc:	80c00115 	stw	r3,4(r16)
  d098e0:	91400415 	stw	r5,16(r18)
  d098e4:	a0001a1e 	bne	r20,zero,d09950 <__d2b+0x140>
  d098e8:	3545883a 	add	r2,r6,r21
  d098ec:	10bef344 	addi	r2,r2,-1075
  d098f0:	00c00d44 	movi	r3,53
  d098f4:	b0800015 	stw	r2,0(r22)
  d098f8:	1987c83a 	sub	r3,r3,r6
  d098fc:	b8c00015 	stw	r3,0(r23)
  d09900:	9005883a 	mov	r2,r18
  d09904:	dfc00a17 	ldw	ra,40(sp)
  d09908:	ddc00917 	ldw	r23,36(sp)
  d0990c:	dd800817 	ldw	r22,32(sp)
  d09910:	dd400717 	ldw	r21,28(sp)
  d09914:	dd000617 	ldw	r20,24(sp)
  d09918:	dcc00517 	ldw	r19,20(sp)
  d0991c:	dc800417 	ldw	r18,16(sp)
  d09920:	dc400317 	ldw	r17,12(sp)
  d09924:	dc000217 	ldw	r16,8(sp)
  d09928:	dec00b04 	addi	sp,sp,44
  d0992c:	f800283a 	ret
  d09930:	d9000104 	addi	r4,sp,4
  d09934:	0d0926c0 	call	d0926c <__lo0bits>
  d09938:	11800804 	addi	r6,r2,32
  d0993c:	d8800117 	ldw	r2,4(sp)
  d09940:	94c00415 	stw	r19,16(r18)
  d09944:	980b883a 	mov	r5,r19
  d09948:	90800515 	stw	r2,20(r18)
  d0994c:	a03fe626 	beq	r20,zero,d098e8 <__d2b+0xd8>
  d09950:	2945883a 	add	r2,r5,r5
  d09954:	1085883a 	add	r2,r2,r2
  d09958:	1405883a 	add	r2,r2,r16
  d0995c:	113fff17 	ldw	r4,-4(r2)
  d09960:	30fef384 	addi	r3,r6,-1074
  d09964:	2820917a 	slli	r16,r5,5
  d09968:	b0c00015 	stw	r3,0(r22)
  d0996c:	0d091fc0 	call	d091fc <__hi0bits>
  d09970:	80a1c83a 	sub	r16,r16,r2
  d09974:	bc000015 	stw	r16,0(r23)
  d09978:	003fe106 	br	d09900 <__d2b+0xf0>
  d0997c:	d8800017 	ldw	r2,0(sp)
  d09980:	90800515 	stw	r2,20(r18)
  d09984:	d8c00117 	ldw	r3,4(sp)
  d09988:	003fd106 	br	d098d0 <__d2b+0xc0>

00d0998c <__mdiff>:
  d0998c:	defffb04 	addi	sp,sp,-20
  d09990:	dc000015 	stw	r16,0(sp)
  d09994:	2821883a 	mov	r16,r5
  d09998:	dc800215 	stw	r18,8(sp)
  d0999c:	300b883a 	mov	r5,r6
  d099a0:	2025883a 	mov	r18,r4
  d099a4:	8009883a 	mov	r4,r16
  d099a8:	dc400115 	stw	r17,4(sp)
  d099ac:	dfc00415 	stw	ra,16(sp)
  d099b0:	dcc00315 	stw	r19,12(sp)
  d099b4:	3023883a 	mov	r17,r6
  d099b8:	0d093300 	call	d09330 <__mcmp>
  d099bc:	10004226 	beq	r2,zero,d09ac8 <__mdiff+0x13c>
  d099c0:	10005016 	blt	r2,zero,d09b04 <__mdiff+0x178>
  d099c4:	0027883a 	mov	r19,zero
  d099c8:	81400117 	ldw	r5,4(r16)
  d099cc:	9009883a 	mov	r4,r18
  d099d0:	0d097540 	call	d09754 <_Balloc>
  d099d4:	1019883a 	mov	r12,r2
  d099d8:	82800417 	ldw	r10,16(r16)
  d099dc:	88800417 	ldw	r2,16(r17)
  d099e0:	81800504 	addi	r6,r16,20
  d099e4:	5287883a 	add	r3,r10,r10
  d099e8:	1085883a 	add	r2,r2,r2
  d099ec:	18c7883a 	add	r3,r3,r3
  d099f0:	1085883a 	add	r2,r2,r2
  d099f4:	8a000504 	addi	r8,r17,20
  d099f8:	64c00315 	stw	r19,12(r12)
  d099fc:	30db883a 	add	r13,r6,r3
  d09a00:	4097883a 	add	r11,r8,r2
  d09a04:	61c00504 	addi	r7,r12,20
  d09a08:	0013883a 	mov	r9,zero
  d09a0c:	31000017 	ldw	r4,0(r6)
  d09a10:	41400017 	ldw	r5,0(r8)
  d09a14:	42000104 	addi	r8,r8,4
  d09a18:	20bfffcc 	andi	r2,r4,65535
  d09a1c:	28ffffcc 	andi	r3,r5,65535
  d09a20:	10c5c83a 	sub	r2,r2,r3
  d09a24:	1245883a 	add	r2,r2,r9
  d09a28:	2008d43a 	srli	r4,r4,16
  d09a2c:	280ad43a 	srli	r5,r5,16
  d09a30:	1007d43a 	srai	r3,r2,16
  d09a34:	3880000d 	sth	r2,0(r7)
  d09a38:	2149c83a 	sub	r4,r4,r5
  d09a3c:	20c9883a 	add	r4,r4,r3
  d09a40:	3900008d 	sth	r4,2(r7)
  d09a44:	31800104 	addi	r6,r6,4
  d09a48:	39c00104 	addi	r7,r7,4
  d09a4c:	2013d43a 	srai	r9,r4,16
  d09a50:	42ffee36 	bltu	r8,r11,d09a0c <__mdiff+0x80>
  d09a54:	33400c2e 	bgeu	r6,r13,d09a88 <__mdiff+0xfc>
  d09a58:	30800017 	ldw	r2,0(r6)
  d09a5c:	31800104 	addi	r6,r6,4
  d09a60:	10ffffcc 	andi	r3,r2,65535
  d09a64:	1a47883a 	add	r3,r3,r9
  d09a68:	1004d43a 	srli	r2,r2,16
  d09a6c:	1809d43a 	srai	r4,r3,16
  d09a70:	38c0000d 	sth	r3,0(r7)
  d09a74:	1105883a 	add	r2,r2,r4
  d09a78:	3880008d 	sth	r2,2(r7)
  d09a7c:	1013d43a 	srai	r9,r2,16
  d09a80:	39c00104 	addi	r7,r7,4
  d09a84:	337ff436 	bltu	r6,r13,d09a58 <__mdiff+0xcc>
  d09a88:	38bfff17 	ldw	r2,-4(r7)
  d09a8c:	38ffff04 	addi	r3,r7,-4
  d09a90:	1000041e 	bne	r2,zero,d09aa4 <__mdiff+0x118>
  d09a94:	18ffff04 	addi	r3,r3,-4
  d09a98:	18800017 	ldw	r2,0(r3)
  d09a9c:	52bfffc4 	addi	r10,r10,-1
  d09aa0:	103ffc26 	beq	r2,zero,d09a94 <__mdiff+0x108>
  d09aa4:	6005883a 	mov	r2,r12
  d09aa8:	62800415 	stw	r10,16(r12)
  d09aac:	dfc00417 	ldw	ra,16(sp)
  d09ab0:	dcc00317 	ldw	r19,12(sp)
  d09ab4:	dc800217 	ldw	r18,8(sp)
  d09ab8:	dc400117 	ldw	r17,4(sp)
  d09abc:	dc000017 	ldw	r16,0(sp)
  d09ac0:	dec00504 	addi	sp,sp,20
  d09ac4:	f800283a 	ret
  d09ac8:	9009883a 	mov	r4,r18
  d09acc:	000b883a 	mov	r5,zero
  d09ad0:	0d097540 	call	d09754 <_Balloc>
  d09ad4:	1019883a 	mov	r12,r2
  d09ad8:	00800044 	movi	r2,1
  d09adc:	60800415 	stw	r2,16(r12)
  d09ae0:	6005883a 	mov	r2,r12
  d09ae4:	60000515 	stw	zero,20(r12)
  d09ae8:	dfc00417 	ldw	ra,16(sp)
  d09aec:	dcc00317 	ldw	r19,12(sp)
  d09af0:	dc800217 	ldw	r18,8(sp)
  d09af4:	dc400117 	ldw	r17,4(sp)
  d09af8:	dc000017 	ldw	r16,0(sp)
  d09afc:	dec00504 	addi	sp,sp,20
  d09b00:	f800283a 	ret
  d09b04:	880d883a 	mov	r6,r17
  d09b08:	04c00044 	movi	r19,1
  d09b0c:	8023883a 	mov	r17,r16
  d09b10:	3021883a 	mov	r16,r6
  d09b14:	003fac06 	br	d099c8 <__mdiff+0x3c>

00d09b18 <__lshift>:
  d09b18:	defff904 	addi	sp,sp,-28
  d09b1c:	28800417 	ldw	r2,16(r5)
  d09b20:	dc000015 	stw	r16,0(sp)
  d09b24:	3021d17a 	srai	r16,r6,5
  d09b28:	28c00217 	ldw	r3,8(r5)
  d09b2c:	10800044 	addi	r2,r2,1
  d09b30:	dc400115 	stw	r17,4(sp)
  d09b34:	80a3883a 	add	r17,r16,r2
  d09b38:	dd400515 	stw	r21,20(sp)
  d09b3c:	dd000415 	stw	r20,16(sp)
  d09b40:	dc800215 	stw	r18,8(sp)
  d09b44:	dfc00615 	stw	ra,24(sp)
  d09b48:	2825883a 	mov	r18,r5
  d09b4c:	dcc00315 	stw	r19,12(sp)
  d09b50:	3029883a 	mov	r20,r6
  d09b54:	202b883a 	mov	r21,r4
  d09b58:	29400117 	ldw	r5,4(r5)
  d09b5c:	1c40030e 	bge	r3,r17,d09b6c <__lshift+0x54>
  d09b60:	18c7883a 	add	r3,r3,r3
  d09b64:	29400044 	addi	r5,r5,1
  d09b68:	1c7ffd16 	blt	r3,r17,d09b60 <__lshift+0x48>
  d09b6c:	a809883a 	mov	r4,r21
  d09b70:	0d097540 	call	d09754 <_Balloc>
  d09b74:	1027883a 	mov	r19,r2
  d09b78:	11400504 	addi	r5,r2,20
  d09b7c:	0400090e 	bge	zero,r16,d09ba4 <__lshift+0x8c>
  d09b80:	2805883a 	mov	r2,r5
  d09b84:	0007883a 	mov	r3,zero
  d09b88:	18c00044 	addi	r3,r3,1
  d09b8c:	10000015 	stw	zero,0(r2)
  d09b90:	10800104 	addi	r2,r2,4
  d09b94:	80fffc1e 	bne	r16,r3,d09b88 <__lshift+0x70>
  d09b98:	8405883a 	add	r2,r16,r16
  d09b9c:	1085883a 	add	r2,r2,r2
  d09ba0:	288b883a 	add	r5,r5,r2
  d09ba4:	90800417 	ldw	r2,16(r18)
  d09ba8:	91000504 	addi	r4,r18,20
  d09bac:	a18007cc 	andi	r6,r20,31
  d09bb0:	1085883a 	add	r2,r2,r2
  d09bb4:	1085883a 	add	r2,r2,r2
  d09bb8:	208f883a 	add	r7,r4,r2
  d09bbc:	30001e26 	beq	r6,zero,d09c38 <__lshift+0x120>
  d09bc0:	00800804 	movi	r2,32
  d09bc4:	1191c83a 	sub	r8,r2,r6
  d09bc8:	0007883a 	mov	r3,zero
  d09bcc:	20800017 	ldw	r2,0(r4)
  d09bd0:	1184983a 	sll	r2,r2,r6
  d09bd4:	1884b03a 	or	r2,r3,r2
  d09bd8:	28800015 	stw	r2,0(r5)
  d09bdc:	20c00017 	ldw	r3,0(r4)
  d09be0:	21000104 	addi	r4,r4,4
  d09be4:	29400104 	addi	r5,r5,4
  d09be8:	1a06d83a 	srl	r3,r3,r8
  d09bec:	21fff736 	bltu	r4,r7,d09bcc <__lshift+0xb4>
  d09bf0:	28c00015 	stw	r3,0(r5)
  d09bf4:	18000126 	beq	r3,zero,d09bfc <__lshift+0xe4>
  d09bf8:	8c400044 	addi	r17,r17,1
  d09bfc:	88bfffc4 	addi	r2,r17,-1
  d09c00:	98800415 	stw	r2,16(r19)
  d09c04:	a809883a 	mov	r4,r21
  d09c08:	900b883a 	mov	r5,r18
  d09c0c:	0d091d40 	call	d091d4 <_Bfree>
  d09c10:	9805883a 	mov	r2,r19
  d09c14:	dfc00617 	ldw	ra,24(sp)
  d09c18:	dd400517 	ldw	r21,20(sp)
  d09c1c:	dd000417 	ldw	r20,16(sp)
  d09c20:	dcc00317 	ldw	r19,12(sp)
  d09c24:	dc800217 	ldw	r18,8(sp)
  d09c28:	dc400117 	ldw	r17,4(sp)
  d09c2c:	dc000017 	ldw	r16,0(sp)
  d09c30:	dec00704 	addi	sp,sp,28
  d09c34:	f800283a 	ret
  d09c38:	20800017 	ldw	r2,0(r4)
  d09c3c:	21000104 	addi	r4,r4,4
  d09c40:	28800015 	stw	r2,0(r5)
  d09c44:	29400104 	addi	r5,r5,4
  d09c48:	21ffec2e 	bgeu	r4,r7,d09bfc <__lshift+0xe4>
  d09c4c:	20800017 	ldw	r2,0(r4)
  d09c50:	21000104 	addi	r4,r4,4
  d09c54:	28800015 	stw	r2,0(r5)
  d09c58:	29400104 	addi	r5,r5,4
  d09c5c:	21fff636 	bltu	r4,r7,d09c38 <__lshift+0x120>
  d09c60:	003fe606 	br	d09bfc <__lshift+0xe4>

00d09c64 <__multiply>:
  d09c64:	defff904 	addi	sp,sp,-28
  d09c68:	dcc00315 	stw	r19,12(sp)
  d09c6c:	dc800215 	stw	r18,8(sp)
  d09c70:	2cc00417 	ldw	r19,16(r5)
  d09c74:	34800417 	ldw	r18,16(r6)
  d09c78:	dd000415 	stw	r20,16(sp)
  d09c7c:	dc400115 	stw	r17,4(sp)
  d09c80:	dfc00615 	stw	ra,24(sp)
  d09c84:	dd400515 	stw	r21,20(sp)
  d09c88:	dc000015 	stw	r16,0(sp)
  d09c8c:	2823883a 	mov	r17,r5
  d09c90:	3029883a 	mov	r20,r6
  d09c94:	9c80040e 	bge	r19,r18,d09ca8 <__multiply+0x44>
  d09c98:	9027883a 	mov	r19,r18
  d09c9c:	2c800417 	ldw	r18,16(r5)
  d09ca0:	2829883a 	mov	r20,r5
  d09ca4:	3023883a 	mov	r17,r6
  d09ca8:	88800217 	ldw	r2,8(r17)
  d09cac:	9ca1883a 	add	r16,r19,r18
  d09cb0:	89400117 	ldw	r5,4(r17)
  d09cb4:	1400010e 	bge	r2,r16,d09cbc <__multiply+0x58>
  d09cb8:	29400044 	addi	r5,r5,1
  d09cbc:	0d097540 	call	d09754 <_Balloc>
  d09cc0:	102b883a 	mov	r21,r2
  d09cc4:	8405883a 	add	r2,r16,r16
  d09cc8:	1085883a 	add	r2,r2,r2
  d09ccc:	a9000504 	addi	r4,r21,20
  d09cd0:	209d883a 	add	r14,r4,r2
  d09cd4:	2380042e 	bgeu	r4,r14,d09ce8 <__multiply+0x84>
  d09cd8:	2005883a 	mov	r2,r4
  d09cdc:	10000015 	stw	zero,0(r2)
  d09ce0:	10800104 	addi	r2,r2,4
  d09ce4:	13bffd36 	bltu	r2,r14,d09cdc <__multiply+0x78>
  d09ce8:	9485883a 	add	r2,r18,r18
  d09cec:	9cc7883a 	add	r3,r19,r19
  d09cf0:	a1800504 	addi	r6,r20,20
  d09cf4:	1085883a 	add	r2,r2,r2
  d09cf8:	8b400504 	addi	r13,r17,20
  d09cfc:	18c7883a 	add	r3,r3,r3
  d09d00:	309f883a 	add	r15,r6,r2
  d09d04:	68d7883a 	add	r11,r13,r3
  d09d08:	33c03b2e 	bgeu	r6,r15,d09df8 <__multiply+0x194>
  d09d0c:	2019883a 	mov	r12,r4
  d09d10:	30800017 	ldw	r2,0(r6)
  d09d14:	127fffcc 	andi	r9,r2,65535
  d09d18:	48001826 	beq	r9,zero,d09d7c <__multiply+0x118>
  d09d1c:	6811883a 	mov	r8,r13
  d09d20:	600f883a 	mov	r7,r12
  d09d24:	0015883a 	mov	r10,zero
  d09d28:	40c00017 	ldw	r3,0(r8)
  d09d2c:	39400017 	ldw	r5,0(r7)
  d09d30:	42000104 	addi	r8,r8,4
  d09d34:	193fffcc 	andi	r4,r3,65535
  d09d38:	4909383a 	mul	r4,r9,r4
  d09d3c:	1806d43a 	srli	r3,r3,16
  d09d40:	28bfffcc 	andi	r2,r5,65535
  d09d44:	5085883a 	add	r2,r10,r2
  d09d48:	2089883a 	add	r4,r4,r2
  d09d4c:	48c7383a 	mul	r3,r9,r3
  d09d50:	280ad43a 	srli	r5,r5,16
  d09d54:	2004d43a 	srli	r2,r4,16
  d09d58:	3900000d 	sth	r4,0(r7)
  d09d5c:	1947883a 	add	r3,r3,r5
  d09d60:	10c5883a 	add	r2,r2,r3
  d09d64:	3880008d 	sth	r2,2(r7)
  d09d68:	1014d43a 	srli	r10,r2,16
  d09d6c:	39c00104 	addi	r7,r7,4
  d09d70:	42ffed36 	bltu	r8,r11,d09d28 <__multiply+0xc4>
  d09d74:	3a800015 	stw	r10,0(r7)
  d09d78:	30800017 	ldw	r2,0(r6)
  d09d7c:	1012d43a 	srli	r9,r2,16
  d09d80:	48001926 	beq	r9,zero,d09de8 <__multiply+0x184>
  d09d84:	60800017 	ldw	r2,0(r12)
  d09d88:	6811883a 	mov	r8,r13
  d09d8c:	600f883a 	mov	r7,r12
  d09d90:	0015883a 	mov	r10,zero
  d09d94:	100b883a 	mov	r5,r2
  d09d98:	41000017 	ldw	r4,0(r8)
  d09d9c:	2806d43a 	srli	r3,r5,16
  d09da0:	3880000d 	sth	r2,0(r7)
  d09da4:	20bfffcc 	andi	r2,r4,65535
  d09da8:	4885383a 	mul	r2,r9,r2
  d09dac:	50c7883a 	add	r3,r10,r3
  d09db0:	2008d43a 	srli	r4,r4,16
  d09db4:	10c5883a 	add	r2,r2,r3
  d09db8:	3880008d 	sth	r2,2(r7)
  d09dbc:	39c00104 	addi	r7,r7,4
  d09dc0:	39400017 	ldw	r5,0(r7)
  d09dc4:	4909383a 	mul	r4,r9,r4
  d09dc8:	1004d43a 	srli	r2,r2,16
  d09dcc:	28ffffcc 	andi	r3,r5,65535
  d09dd0:	20c9883a 	add	r4,r4,r3
  d09dd4:	1105883a 	add	r2,r2,r4
  d09dd8:	42000104 	addi	r8,r8,4
  d09ddc:	1014d43a 	srli	r10,r2,16
  d09de0:	42ffed36 	bltu	r8,r11,d09d98 <__multiply+0x134>
  d09de4:	38800015 	stw	r2,0(r7)
  d09de8:	31800104 	addi	r6,r6,4
  d09dec:	33c0022e 	bgeu	r6,r15,d09df8 <__multiply+0x194>
  d09df0:	63000104 	addi	r12,r12,4
  d09df4:	003fc606 	br	d09d10 <__multiply+0xac>
  d09df8:	0400090e 	bge	zero,r16,d09e20 <__multiply+0x1bc>
  d09dfc:	70bfff17 	ldw	r2,-4(r14)
  d09e00:	70ffff04 	addi	r3,r14,-4
  d09e04:	10000326 	beq	r2,zero,d09e14 <__multiply+0x1b0>
  d09e08:	00000506 	br	d09e20 <__multiply+0x1bc>
  d09e0c:	18800017 	ldw	r2,0(r3)
  d09e10:	1000031e 	bne	r2,zero,d09e20 <__multiply+0x1bc>
  d09e14:	843fffc4 	addi	r16,r16,-1
  d09e18:	18ffff04 	addi	r3,r3,-4
  d09e1c:	803ffb1e 	bne	r16,zero,d09e0c <__multiply+0x1a8>
  d09e20:	a805883a 	mov	r2,r21
  d09e24:	ac000415 	stw	r16,16(r21)
  d09e28:	dfc00617 	ldw	ra,24(sp)
  d09e2c:	dd400517 	ldw	r21,20(sp)
  d09e30:	dd000417 	ldw	r20,16(sp)
  d09e34:	dcc00317 	ldw	r19,12(sp)
  d09e38:	dc800217 	ldw	r18,8(sp)
  d09e3c:	dc400117 	ldw	r17,4(sp)
  d09e40:	dc000017 	ldw	r16,0(sp)
  d09e44:	dec00704 	addi	sp,sp,28
  d09e48:	f800283a 	ret

00d09e4c <__i2b>:
  d09e4c:	defffd04 	addi	sp,sp,-12
  d09e50:	dc000015 	stw	r16,0(sp)
  d09e54:	04000044 	movi	r16,1
  d09e58:	dc800115 	stw	r18,4(sp)
  d09e5c:	2825883a 	mov	r18,r5
  d09e60:	800b883a 	mov	r5,r16
  d09e64:	dfc00215 	stw	ra,8(sp)
  d09e68:	0d097540 	call	d09754 <_Balloc>
  d09e6c:	14000415 	stw	r16,16(r2)
  d09e70:	14800515 	stw	r18,20(r2)
  d09e74:	dfc00217 	ldw	ra,8(sp)
  d09e78:	dc800117 	ldw	r18,4(sp)
  d09e7c:	dc000017 	ldw	r16,0(sp)
  d09e80:	dec00304 	addi	sp,sp,12
  d09e84:	f800283a 	ret

00d09e88 <__multadd>:
  d09e88:	defffa04 	addi	sp,sp,-24
  d09e8c:	dc800215 	stw	r18,8(sp)
  d09e90:	2c800417 	ldw	r18,16(r5)
  d09e94:	dd000415 	stw	r20,16(sp)
  d09e98:	dcc00315 	stw	r19,12(sp)
  d09e9c:	dc000015 	stw	r16,0(sp)
  d09ea0:	dfc00515 	stw	ra,20(sp)
  d09ea4:	3821883a 	mov	r16,r7
  d09ea8:	dc400115 	stw	r17,4(sp)
  d09eac:	2827883a 	mov	r19,r5
  d09eb0:	2029883a 	mov	r20,r4
  d09eb4:	2a000504 	addi	r8,r5,20
  d09eb8:	000f883a 	mov	r7,zero
  d09ebc:	40800017 	ldw	r2,0(r8)
  d09ec0:	39c00044 	addi	r7,r7,1
  d09ec4:	10ffffcc 	andi	r3,r2,65535
  d09ec8:	1987383a 	mul	r3,r3,r6
  d09ecc:	1004d43a 	srli	r2,r2,16
  d09ed0:	1c07883a 	add	r3,r3,r16
  d09ed4:	180ad43a 	srli	r5,r3,16
  d09ed8:	1185383a 	mul	r2,r2,r6
  d09edc:	18ffffcc 	andi	r3,r3,65535
  d09ee0:	1145883a 	add	r2,r2,r5
  d09ee4:	1008943a 	slli	r4,r2,16
  d09ee8:	1020d43a 	srli	r16,r2,16
  d09eec:	20c9883a 	add	r4,r4,r3
  d09ef0:	41000015 	stw	r4,0(r8)
  d09ef4:	42000104 	addi	r8,r8,4
  d09ef8:	3cbff016 	blt	r7,r18,d09ebc <__multadd+0x34>
  d09efc:	80000826 	beq	r16,zero,d09f20 <__multadd+0x98>
  d09f00:	98800217 	ldw	r2,8(r19)
  d09f04:	90800f0e 	bge	r18,r2,d09f44 <__multadd+0xbc>
  d09f08:	9485883a 	add	r2,r18,r18
  d09f0c:	1085883a 	add	r2,r2,r2
  d09f10:	14c5883a 	add	r2,r2,r19
  d09f14:	90c00044 	addi	r3,r18,1
  d09f18:	14000515 	stw	r16,20(r2)
  d09f1c:	98c00415 	stw	r3,16(r19)
  d09f20:	9805883a 	mov	r2,r19
  d09f24:	dfc00517 	ldw	ra,20(sp)
  d09f28:	dd000417 	ldw	r20,16(sp)
  d09f2c:	dcc00317 	ldw	r19,12(sp)
  d09f30:	dc800217 	ldw	r18,8(sp)
  d09f34:	dc400117 	ldw	r17,4(sp)
  d09f38:	dc000017 	ldw	r16,0(sp)
  d09f3c:	dec00604 	addi	sp,sp,24
  d09f40:	f800283a 	ret
  d09f44:	99400117 	ldw	r5,4(r19)
  d09f48:	a009883a 	mov	r4,r20
  d09f4c:	29400044 	addi	r5,r5,1
  d09f50:	0d097540 	call	d09754 <_Balloc>
  d09f54:	99800417 	ldw	r6,16(r19)
  d09f58:	99400304 	addi	r5,r19,12
  d09f5c:	11000304 	addi	r4,r2,12
  d09f60:	318d883a 	add	r6,r6,r6
  d09f64:	318d883a 	add	r6,r6,r6
  d09f68:	31800204 	addi	r6,r6,8
  d09f6c:	1023883a 	mov	r17,r2
  d09f70:	0d08fbc0 	call	d08fbc <memcpy>
  d09f74:	980b883a 	mov	r5,r19
  d09f78:	a009883a 	mov	r4,r20
  d09f7c:	0d091d40 	call	d091d4 <_Bfree>
  d09f80:	8827883a 	mov	r19,r17
  d09f84:	003fe006 	br	d09f08 <__multadd+0x80>

00d09f88 <__pow5mult>:
  d09f88:	defffa04 	addi	sp,sp,-24
  d09f8c:	308000cc 	andi	r2,r6,3
  d09f90:	dd000415 	stw	r20,16(sp)
  d09f94:	dcc00315 	stw	r19,12(sp)
  d09f98:	dc000015 	stw	r16,0(sp)
  d09f9c:	dfc00515 	stw	ra,20(sp)
  d09fa0:	dc800215 	stw	r18,8(sp)
  d09fa4:	dc400115 	stw	r17,4(sp)
  d09fa8:	3021883a 	mov	r16,r6
  d09fac:	2027883a 	mov	r19,r4
  d09fb0:	2829883a 	mov	r20,r5
  d09fb4:	10002b1e 	bne	r2,zero,d0a064 <__pow5mult+0xdc>
  d09fb8:	8025d0ba 	srai	r18,r16,2
  d09fbc:	90001b26 	beq	r18,zero,d0a02c <__pow5mult+0xa4>
  d09fc0:	9c001217 	ldw	r16,72(r19)
  d09fc4:	8000081e 	bne	r16,zero,d09fe8 <__pow5mult+0x60>
  d09fc8:	00003006 	br	d0a08c <__pow5mult+0x104>
  d09fcc:	800b883a 	mov	r5,r16
  d09fd0:	800d883a 	mov	r6,r16
  d09fd4:	9809883a 	mov	r4,r19
  d09fd8:	90001426 	beq	r18,zero,d0a02c <__pow5mult+0xa4>
  d09fdc:	80800017 	ldw	r2,0(r16)
  d09fe0:	10001b26 	beq	r2,zero,d0a050 <__pow5mult+0xc8>
  d09fe4:	1021883a 	mov	r16,r2
  d09fe8:	9080004c 	andi	r2,r18,1
  d09fec:	1005003a 	cmpeq	r2,r2,zero
  d09ff0:	9025d07a 	srai	r18,r18,1
  d09ff4:	800d883a 	mov	r6,r16
  d09ff8:	9809883a 	mov	r4,r19
  d09ffc:	a00b883a 	mov	r5,r20
  d0a000:	103ff21e 	bne	r2,zero,d09fcc <__pow5mult+0x44>
  d0a004:	0d09c640 	call	d09c64 <__multiply>
  d0a008:	a00b883a 	mov	r5,r20
  d0a00c:	9809883a 	mov	r4,r19
  d0a010:	1023883a 	mov	r17,r2
  d0a014:	0d091d40 	call	d091d4 <_Bfree>
  d0a018:	8829883a 	mov	r20,r17
  d0a01c:	800b883a 	mov	r5,r16
  d0a020:	800d883a 	mov	r6,r16
  d0a024:	9809883a 	mov	r4,r19
  d0a028:	903fec1e 	bne	r18,zero,d09fdc <__pow5mult+0x54>
  d0a02c:	a005883a 	mov	r2,r20
  d0a030:	dfc00517 	ldw	ra,20(sp)
  d0a034:	dd000417 	ldw	r20,16(sp)
  d0a038:	dcc00317 	ldw	r19,12(sp)
  d0a03c:	dc800217 	ldw	r18,8(sp)
  d0a040:	dc400117 	ldw	r17,4(sp)
  d0a044:	dc000017 	ldw	r16,0(sp)
  d0a048:	dec00604 	addi	sp,sp,24
  d0a04c:	f800283a 	ret
  d0a050:	0d09c640 	call	d09c64 <__multiply>
  d0a054:	80800015 	stw	r2,0(r16)
  d0a058:	1021883a 	mov	r16,r2
  d0a05c:	10000015 	stw	zero,0(r2)
  d0a060:	003fe106 	br	d09fe8 <__pow5mult+0x60>
  d0a064:	1085883a 	add	r2,r2,r2
  d0a068:	00c03474 	movhi	r3,209
  d0a06c:	18c51204 	addi	r3,r3,5192
  d0a070:	1085883a 	add	r2,r2,r2
  d0a074:	10c5883a 	add	r2,r2,r3
  d0a078:	11bfff17 	ldw	r6,-4(r2)
  d0a07c:	000f883a 	mov	r7,zero
  d0a080:	0d09e880 	call	d09e88 <__multadd>
  d0a084:	1029883a 	mov	r20,r2
  d0a088:	003fcb06 	br	d09fb8 <__pow5mult+0x30>
  d0a08c:	9809883a 	mov	r4,r19
  d0a090:	01409c44 	movi	r5,625
  d0a094:	0d09e4c0 	call	d09e4c <__i2b>
  d0a098:	98801215 	stw	r2,72(r19)
  d0a09c:	1021883a 	mov	r16,r2
  d0a0a0:	10000015 	stw	zero,0(r2)
  d0a0a4:	003fd006 	br	d09fe8 <__pow5mult+0x60>

00d0a0a8 <__s2b>:
  d0a0a8:	defff904 	addi	sp,sp,-28
  d0a0ac:	dcc00315 	stw	r19,12(sp)
  d0a0b0:	dc800215 	stw	r18,8(sp)
  d0a0b4:	2827883a 	mov	r19,r5
  d0a0b8:	2025883a 	mov	r18,r4
  d0a0bc:	01400244 	movi	r5,9
  d0a0c0:	39000204 	addi	r4,r7,8
  d0a0c4:	dd000415 	stw	r20,16(sp)
  d0a0c8:	dc400115 	stw	r17,4(sp)
  d0a0cc:	dfc00615 	stw	ra,24(sp)
  d0a0d0:	dd400515 	stw	r21,20(sp)
  d0a0d4:	dc000015 	stw	r16,0(sp)
  d0a0d8:	3829883a 	mov	r20,r7
  d0a0dc:	3023883a 	mov	r17,r6
  d0a0e0:	0d0c4880 	call	d0c488 <__divsi3>
  d0a0e4:	00c00044 	movi	r3,1
  d0a0e8:	1880350e 	bge	r3,r2,d0a1c0 <__s2b+0x118>
  d0a0ec:	000b883a 	mov	r5,zero
  d0a0f0:	18c7883a 	add	r3,r3,r3
  d0a0f4:	29400044 	addi	r5,r5,1
  d0a0f8:	18bffd16 	blt	r3,r2,d0a0f0 <__s2b+0x48>
  d0a0fc:	9009883a 	mov	r4,r18
  d0a100:	0d097540 	call	d09754 <_Balloc>
  d0a104:	1011883a 	mov	r8,r2
  d0a108:	d8800717 	ldw	r2,28(sp)
  d0a10c:	00c00044 	movi	r3,1
  d0a110:	01800244 	movi	r6,9
  d0a114:	40800515 	stw	r2,20(r8)
  d0a118:	40c00415 	stw	r3,16(r8)
  d0a11c:	3440260e 	bge	r6,r17,d0a1b8 <__s2b+0x110>
  d0a120:	3021883a 	mov	r16,r6
  d0a124:	99ab883a 	add	r21,r19,r6
  d0a128:	9c05883a 	add	r2,r19,r16
  d0a12c:	11c00007 	ldb	r7,0(r2)
  d0a130:	400b883a 	mov	r5,r8
  d0a134:	9009883a 	mov	r4,r18
  d0a138:	39fff404 	addi	r7,r7,-48
  d0a13c:	01800284 	movi	r6,10
  d0a140:	0d09e880 	call	d09e88 <__multadd>
  d0a144:	84000044 	addi	r16,r16,1
  d0a148:	1011883a 	mov	r8,r2
  d0a14c:	8c3ff61e 	bne	r17,r16,d0a128 <__s2b+0x80>
  d0a150:	ac45883a 	add	r2,r21,r17
  d0a154:	117ffe04 	addi	r5,r2,-8
  d0a158:	880d883a 	mov	r6,r17
  d0a15c:	35000c0e 	bge	r6,r20,d0a190 <__s2b+0xe8>
  d0a160:	a185c83a 	sub	r2,r20,r6
  d0a164:	2821883a 	mov	r16,r5
  d0a168:	28a3883a 	add	r17,r5,r2
  d0a16c:	81c00007 	ldb	r7,0(r16)
  d0a170:	400b883a 	mov	r5,r8
  d0a174:	9009883a 	mov	r4,r18
  d0a178:	39fff404 	addi	r7,r7,-48
  d0a17c:	01800284 	movi	r6,10
  d0a180:	0d09e880 	call	d09e88 <__multadd>
  d0a184:	84000044 	addi	r16,r16,1
  d0a188:	1011883a 	mov	r8,r2
  d0a18c:	847ff71e 	bne	r16,r17,d0a16c <__s2b+0xc4>
  d0a190:	4005883a 	mov	r2,r8
  d0a194:	dfc00617 	ldw	ra,24(sp)
  d0a198:	dd400517 	ldw	r21,20(sp)
  d0a19c:	dd000417 	ldw	r20,16(sp)
  d0a1a0:	dcc00317 	ldw	r19,12(sp)
  d0a1a4:	dc800217 	ldw	r18,8(sp)
  d0a1a8:	dc400117 	ldw	r17,4(sp)
  d0a1ac:	dc000017 	ldw	r16,0(sp)
  d0a1b0:	dec00704 	addi	sp,sp,28
  d0a1b4:	f800283a 	ret
  d0a1b8:	99400284 	addi	r5,r19,10
  d0a1bc:	003fe706 	br	d0a15c <__s2b+0xb4>
  d0a1c0:	000b883a 	mov	r5,zero
  d0a1c4:	003fcd06 	br	d0a0fc <__s2b+0x54>

00d0a1c8 <_realloc_r>:
  d0a1c8:	defff404 	addi	sp,sp,-48
  d0a1cc:	dd800815 	stw	r22,32(sp)
  d0a1d0:	dc800415 	stw	r18,16(sp)
  d0a1d4:	dc400315 	stw	r17,12(sp)
  d0a1d8:	dfc00b15 	stw	ra,44(sp)
  d0a1dc:	df000a15 	stw	fp,40(sp)
  d0a1e0:	ddc00915 	stw	r23,36(sp)
  d0a1e4:	dd400715 	stw	r21,28(sp)
  d0a1e8:	dd000615 	stw	r20,24(sp)
  d0a1ec:	dcc00515 	stw	r19,20(sp)
  d0a1f0:	dc000215 	stw	r16,8(sp)
  d0a1f4:	2825883a 	mov	r18,r5
  d0a1f8:	3023883a 	mov	r17,r6
  d0a1fc:	202d883a 	mov	r22,r4
  d0a200:	2800c926 	beq	r5,zero,d0a528 <_realloc_r+0x360>
  d0a204:	0d0cbdc0 	call	d0cbdc <__malloc_lock>
  d0a208:	943ffe04 	addi	r16,r18,-8
  d0a20c:	88c002c4 	addi	r3,r17,11
  d0a210:	00800584 	movi	r2,22
  d0a214:	82000117 	ldw	r8,4(r16)
  d0a218:	10c01b2e 	bgeu	r2,r3,d0a288 <_realloc_r+0xc0>
  d0a21c:	00bffe04 	movi	r2,-8
  d0a220:	188e703a 	and	r7,r3,r2
  d0a224:	3839883a 	mov	fp,r7
  d0a228:	38001a16 	blt	r7,zero,d0a294 <_realloc_r+0xcc>
  d0a22c:	e4401936 	bltu	fp,r17,d0a294 <_realloc_r+0xcc>
  d0a230:	013fff04 	movi	r4,-4
  d0a234:	4126703a 	and	r19,r8,r4
  d0a238:	99c02616 	blt	r19,r7,d0a2d4 <_realloc_r+0x10c>
  d0a23c:	802b883a 	mov	r21,r16
  d0a240:	9829883a 	mov	r20,r19
  d0a244:	84000204 	addi	r16,r16,8
  d0a248:	a80f883a 	mov	r7,r21
  d0a24c:	a70dc83a 	sub	r6,r20,fp
  d0a250:	008003c4 	movi	r2,15
  d0a254:	1180c136 	bltu	r2,r6,d0a55c <_realloc_r+0x394>
  d0a258:	38800117 	ldw	r2,4(r7)
  d0a25c:	a549883a 	add	r4,r20,r21
  d0a260:	1080004c 	andi	r2,r2,1
  d0a264:	a084b03a 	or	r2,r20,r2
  d0a268:	38800115 	stw	r2,4(r7)
  d0a26c:	20c00117 	ldw	r3,4(r4)
  d0a270:	18c00054 	ori	r3,r3,1
  d0a274:	20c00115 	stw	r3,4(r4)
  d0a278:	b009883a 	mov	r4,r22
  d0a27c:	0d0cbfc0 	call	d0cbfc <__malloc_unlock>
  d0a280:	8023883a 	mov	r17,r16
  d0a284:	00000606 	br	d0a2a0 <_realloc_r+0xd8>
  d0a288:	01c00404 	movi	r7,16
  d0a28c:	3839883a 	mov	fp,r7
  d0a290:	e47fe72e 	bgeu	fp,r17,d0a230 <_realloc_r+0x68>
  d0a294:	00800304 	movi	r2,12
  d0a298:	0023883a 	mov	r17,zero
  d0a29c:	b0800015 	stw	r2,0(r22)
  d0a2a0:	8805883a 	mov	r2,r17
  d0a2a4:	dfc00b17 	ldw	ra,44(sp)
  d0a2a8:	df000a17 	ldw	fp,40(sp)
  d0a2ac:	ddc00917 	ldw	r23,36(sp)
  d0a2b0:	dd800817 	ldw	r22,32(sp)
  d0a2b4:	dd400717 	ldw	r21,28(sp)
  d0a2b8:	dd000617 	ldw	r20,24(sp)
  d0a2bc:	dcc00517 	ldw	r19,20(sp)
  d0a2c0:	dc800417 	ldw	r18,16(sp)
  d0a2c4:	dc400317 	ldw	r17,12(sp)
  d0a2c8:	dc000217 	ldw	r16,8(sp)
  d0a2cc:	dec00c04 	addi	sp,sp,48
  d0a2d0:	f800283a 	ret
  d0a2d4:	00803474 	movhi	r2,209
  d0a2d8:	10866d04 	addi	r2,r2,6580
  d0a2dc:	12400217 	ldw	r9,8(r2)
  d0a2e0:	84cd883a 	add	r6,r16,r19
  d0a2e4:	802b883a 	mov	r21,r16
  d0a2e8:	3240b926 	beq	r6,r9,d0a5d0 <_realloc_r+0x408>
  d0a2ec:	31400117 	ldw	r5,4(r6)
  d0a2f0:	00bfff84 	movi	r2,-2
  d0a2f4:	2884703a 	and	r2,r5,r2
  d0a2f8:	1185883a 	add	r2,r2,r6
  d0a2fc:	10c00117 	ldw	r3,4(r2)
  d0a300:	18c0004c 	andi	r3,r3,1
  d0a304:	1807003a 	cmpeq	r3,r3,zero
  d0a308:	1800a326 	beq	r3,zero,d0a598 <_realloc_r+0x3d0>
  d0a30c:	2908703a 	and	r4,r5,r4
  d0a310:	9929883a 	add	r20,r19,r4
  d0a314:	a1c0a30e 	bge	r20,r7,d0a5a4 <_realloc_r+0x3dc>
  d0a318:	4080004c 	andi	r2,r8,1
  d0a31c:	1000551e 	bne	r2,zero,d0a474 <_realloc_r+0x2ac>
  d0a320:	80800017 	ldw	r2,0(r16)
  d0a324:	80afc83a 	sub	r23,r16,r2
  d0a328:	b8c00117 	ldw	r3,4(r23)
  d0a32c:	00bfff04 	movi	r2,-4
  d0a330:	1884703a 	and	r2,r3,r2
  d0a334:	30002e26 	beq	r6,zero,d0a3f0 <_realloc_r+0x228>
  d0a338:	3240b926 	beq	r6,r9,d0a620 <_realloc_r+0x458>
  d0a33c:	98a9883a 	add	r20,r19,r2
  d0a340:	2509883a 	add	r4,r4,r20
  d0a344:	d9000015 	stw	r4,0(sp)
  d0a348:	21c02a16 	blt	r4,r7,d0a3f4 <_realloc_r+0x22c>
  d0a34c:	30800317 	ldw	r2,12(r6)
  d0a350:	30c00217 	ldw	r3,8(r6)
  d0a354:	01400904 	movi	r5,36
  d0a358:	99bfff04 	addi	r6,r19,-4
  d0a35c:	18800315 	stw	r2,12(r3)
  d0a360:	10c00215 	stw	r3,8(r2)
  d0a364:	b9000317 	ldw	r4,12(r23)
  d0a368:	b8800217 	ldw	r2,8(r23)
  d0a36c:	b82b883a 	mov	r21,r23
  d0a370:	bc000204 	addi	r16,r23,8
  d0a374:	20800215 	stw	r2,8(r4)
  d0a378:	11000315 	stw	r4,12(r2)
  d0a37c:	2980e436 	bltu	r5,r6,d0a710 <_realloc_r+0x548>
  d0a380:	008004c4 	movi	r2,19
  d0a384:	9009883a 	mov	r4,r18
  d0a388:	8011883a 	mov	r8,r16
  d0a38c:	11800f2e 	bgeu	r2,r6,d0a3cc <_realloc_r+0x204>
  d0a390:	90800017 	ldw	r2,0(r18)
  d0a394:	ba000404 	addi	r8,r23,16
  d0a398:	91000204 	addi	r4,r18,8
  d0a39c:	b8800215 	stw	r2,8(r23)
  d0a3a0:	90c00117 	ldw	r3,4(r18)
  d0a3a4:	008006c4 	movi	r2,27
  d0a3a8:	b8c00315 	stw	r3,12(r23)
  d0a3ac:	1180072e 	bgeu	r2,r6,d0a3cc <_realloc_r+0x204>
  d0a3b0:	90c00217 	ldw	r3,8(r18)
  d0a3b4:	ba000604 	addi	r8,r23,24
  d0a3b8:	91000404 	addi	r4,r18,16
  d0a3bc:	b8c00415 	stw	r3,16(r23)
  d0a3c0:	90800317 	ldw	r2,12(r18)
  d0a3c4:	b8800515 	stw	r2,20(r23)
  d0a3c8:	3140e726 	beq	r6,r5,d0a768 <_realloc_r+0x5a0>
  d0a3cc:	20800017 	ldw	r2,0(r4)
  d0a3d0:	dd000017 	ldw	r20,0(sp)
  d0a3d4:	b80f883a 	mov	r7,r23
  d0a3d8:	40800015 	stw	r2,0(r8)
  d0a3dc:	20c00117 	ldw	r3,4(r4)
  d0a3e0:	40c00115 	stw	r3,4(r8)
  d0a3e4:	20800217 	ldw	r2,8(r4)
  d0a3e8:	40800215 	stw	r2,8(r8)
  d0a3ec:	003f9706 	br	d0a24c <_realloc_r+0x84>
  d0a3f0:	98a9883a 	add	r20,r19,r2
  d0a3f4:	a1c01f16 	blt	r20,r7,d0a474 <_realloc_r+0x2ac>
  d0a3f8:	b8c00317 	ldw	r3,12(r23)
  d0a3fc:	b8800217 	ldw	r2,8(r23)
  d0a400:	99bfff04 	addi	r6,r19,-4
  d0a404:	01400904 	movi	r5,36
  d0a408:	b82b883a 	mov	r21,r23
  d0a40c:	18800215 	stw	r2,8(r3)
  d0a410:	10c00315 	stw	r3,12(r2)
  d0a414:	bc000204 	addi	r16,r23,8
  d0a418:	2980c336 	bltu	r5,r6,d0a728 <_realloc_r+0x560>
  d0a41c:	008004c4 	movi	r2,19
  d0a420:	9009883a 	mov	r4,r18
  d0a424:	8011883a 	mov	r8,r16
  d0a428:	11800f2e 	bgeu	r2,r6,d0a468 <_realloc_r+0x2a0>
  d0a42c:	90800017 	ldw	r2,0(r18)
  d0a430:	ba000404 	addi	r8,r23,16
  d0a434:	91000204 	addi	r4,r18,8
  d0a438:	b8800215 	stw	r2,8(r23)
  d0a43c:	90c00117 	ldw	r3,4(r18)
  d0a440:	008006c4 	movi	r2,27
  d0a444:	b8c00315 	stw	r3,12(r23)
  d0a448:	1180072e 	bgeu	r2,r6,d0a468 <_realloc_r+0x2a0>
  d0a44c:	90c00217 	ldw	r3,8(r18)
  d0a450:	ba000604 	addi	r8,r23,24
  d0a454:	91000404 	addi	r4,r18,16
  d0a458:	b8c00415 	stw	r3,16(r23)
  d0a45c:	90800317 	ldw	r2,12(r18)
  d0a460:	b8800515 	stw	r2,20(r23)
  d0a464:	3140c726 	beq	r6,r5,d0a784 <_realloc_r+0x5bc>
  d0a468:	20800017 	ldw	r2,0(r4)
  d0a46c:	b80f883a 	mov	r7,r23
  d0a470:	003fd906 	br	d0a3d8 <_realloc_r+0x210>
  d0a474:	880b883a 	mov	r5,r17
  d0a478:	b009883a 	mov	r4,r22
  d0a47c:	0d087980 	call	d08798 <_malloc_r>
  d0a480:	1023883a 	mov	r17,r2
  d0a484:	10002526 	beq	r2,zero,d0a51c <_realloc_r+0x354>
  d0a488:	80800117 	ldw	r2,4(r16)
  d0a48c:	00ffff84 	movi	r3,-2
  d0a490:	893ffe04 	addi	r4,r17,-8
  d0a494:	10c4703a 	and	r2,r2,r3
  d0a498:	8085883a 	add	r2,r16,r2
  d0a49c:	20809526 	beq	r4,r2,d0a6f4 <_realloc_r+0x52c>
  d0a4a0:	99bfff04 	addi	r6,r19,-4
  d0a4a4:	01c00904 	movi	r7,36
  d0a4a8:	39804536 	bltu	r7,r6,d0a5c0 <_realloc_r+0x3f8>
  d0a4ac:	008004c4 	movi	r2,19
  d0a4b0:	9009883a 	mov	r4,r18
  d0a4b4:	880b883a 	mov	r5,r17
  d0a4b8:	11800f2e 	bgeu	r2,r6,d0a4f8 <_realloc_r+0x330>
  d0a4bc:	90800017 	ldw	r2,0(r18)
  d0a4c0:	89400204 	addi	r5,r17,8
  d0a4c4:	91000204 	addi	r4,r18,8
  d0a4c8:	88800015 	stw	r2,0(r17)
  d0a4cc:	90c00117 	ldw	r3,4(r18)
  d0a4d0:	008006c4 	movi	r2,27
  d0a4d4:	88c00115 	stw	r3,4(r17)
  d0a4d8:	1180072e 	bgeu	r2,r6,d0a4f8 <_realloc_r+0x330>
  d0a4dc:	90c00217 	ldw	r3,8(r18)
  d0a4e0:	89400404 	addi	r5,r17,16
  d0a4e4:	91000404 	addi	r4,r18,16
  d0a4e8:	88c00215 	stw	r3,8(r17)
  d0a4ec:	90800317 	ldw	r2,12(r18)
  d0a4f0:	88800315 	stw	r2,12(r17)
  d0a4f4:	31c09126 	beq	r6,r7,d0a73c <_realloc_r+0x574>
  d0a4f8:	20800017 	ldw	r2,0(r4)
  d0a4fc:	28800015 	stw	r2,0(r5)
  d0a500:	20c00117 	ldw	r3,4(r4)
  d0a504:	28c00115 	stw	r3,4(r5)
  d0a508:	20800217 	ldw	r2,8(r4)
  d0a50c:	28800215 	stw	r2,8(r5)
  d0a510:	900b883a 	mov	r5,r18
  d0a514:	b009883a 	mov	r4,r22
  d0a518:	0d07c100 	call	d07c10 <_free_r>
  d0a51c:	b009883a 	mov	r4,r22
  d0a520:	0d0cbfc0 	call	d0cbfc <__malloc_unlock>
  d0a524:	003f5e06 	br	d0a2a0 <_realloc_r+0xd8>
  d0a528:	300b883a 	mov	r5,r6
  d0a52c:	dfc00b17 	ldw	ra,44(sp)
  d0a530:	df000a17 	ldw	fp,40(sp)
  d0a534:	ddc00917 	ldw	r23,36(sp)
  d0a538:	dd800817 	ldw	r22,32(sp)
  d0a53c:	dd400717 	ldw	r21,28(sp)
  d0a540:	dd000617 	ldw	r20,24(sp)
  d0a544:	dcc00517 	ldw	r19,20(sp)
  d0a548:	dc800417 	ldw	r18,16(sp)
  d0a54c:	dc400317 	ldw	r17,12(sp)
  d0a550:	dc000217 	ldw	r16,8(sp)
  d0a554:	dec00c04 	addi	sp,sp,48
  d0a558:	0d087981 	jmpi	d08798 <_malloc_r>
  d0a55c:	38800117 	ldw	r2,4(r7)
  d0a560:	e54b883a 	add	r5,fp,r21
  d0a564:	31000054 	ori	r4,r6,1
  d0a568:	1080004c 	andi	r2,r2,1
  d0a56c:	1704b03a 	or	r2,r2,fp
  d0a570:	38800115 	stw	r2,4(r7)
  d0a574:	29000115 	stw	r4,4(r5)
  d0a578:	2987883a 	add	r3,r5,r6
  d0a57c:	18800117 	ldw	r2,4(r3)
  d0a580:	29400204 	addi	r5,r5,8
  d0a584:	b009883a 	mov	r4,r22
  d0a588:	10800054 	ori	r2,r2,1
  d0a58c:	18800115 	stw	r2,4(r3)
  d0a590:	0d07c100 	call	d07c10 <_free_r>
  d0a594:	003f3806 	br	d0a278 <_realloc_r+0xb0>
  d0a598:	000d883a 	mov	r6,zero
  d0a59c:	0009883a 	mov	r4,zero
  d0a5a0:	003f5d06 	br	d0a318 <_realloc_r+0x150>
  d0a5a4:	30c00217 	ldw	r3,8(r6)
  d0a5a8:	30800317 	ldw	r2,12(r6)
  d0a5ac:	800f883a 	mov	r7,r16
  d0a5b0:	84000204 	addi	r16,r16,8
  d0a5b4:	10c00215 	stw	r3,8(r2)
  d0a5b8:	18800315 	stw	r2,12(r3)
  d0a5bc:	003f2306 	br	d0a24c <_realloc_r+0x84>
  d0a5c0:	8809883a 	mov	r4,r17
  d0a5c4:	900b883a 	mov	r5,r18
  d0a5c8:	0d0905c0 	call	d0905c <memmove>
  d0a5cc:	003fd006 	br	d0a510 <_realloc_r+0x348>
  d0a5d0:	30800117 	ldw	r2,4(r6)
  d0a5d4:	e0c00404 	addi	r3,fp,16
  d0a5d8:	1108703a 	and	r4,r2,r4
  d0a5dc:	9905883a 	add	r2,r19,r4
  d0a5e0:	10ff4d16 	blt	r2,r3,d0a318 <_realloc_r+0x150>
  d0a5e4:	1705c83a 	sub	r2,r2,fp
  d0a5e8:	870b883a 	add	r5,r16,fp
  d0a5ec:	10800054 	ori	r2,r2,1
  d0a5f0:	28800115 	stw	r2,4(r5)
  d0a5f4:	80c00117 	ldw	r3,4(r16)
  d0a5f8:	00803474 	movhi	r2,209
  d0a5fc:	10866d04 	addi	r2,r2,6580
  d0a600:	b009883a 	mov	r4,r22
  d0a604:	18c0004c 	andi	r3,r3,1
  d0a608:	e0c6b03a 	or	r3,fp,r3
  d0a60c:	11400215 	stw	r5,8(r2)
  d0a610:	80c00115 	stw	r3,4(r16)
  d0a614:	0d0cbfc0 	call	d0cbfc <__malloc_unlock>
  d0a618:	84400204 	addi	r17,r16,8
  d0a61c:	003f2006 	br	d0a2a0 <_realloc_r+0xd8>
  d0a620:	98a9883a 	add	r20,r19,r2
  d0a624:	2509883a 	add	r4,r4,r20
  d0a628:	e0800404 	addi	r2,fp,16
  d0a62c:	d9000115 	stw	r4,4(sp)
  d0a630:	20bf7016 	blt	r4,r2,d0a3f4 <_realloc_r+0x22c>
  d0a634:	b8c00317 	ldw	r3,12(r23)
  d0a638:	b8800217 	ldw	r2,8(r23)
  d0a63c:	99bfff04 	addi	r6,r19,-4
  d0a640:	01400904 	movi	r5,36
  d0a644:	18800215 	stw	r2,8(r3)
  d0a648:	10c00315 	stw	r3,12(r2)
  d0a64c:	bc400204 	addi	r17,r23,8
  d0a650:	29804136 	bltu	r5,r6,d0a758 <_realloc_r+0x590>
  d0a654:	008004c4 	movi	r2,19
  d0a658:	9009883a 	mov	r4,r18
  d0a65c:	880f883a 	mov	r7,r17
  d0a660:	11800f2e 	bgeu	r2,r6,d0a6a0 <_realloc_r+0x4d8>
  d0a664:	90800017 	ldw	r2,0(r18)
  d0a668:	b9c00404 	addi	r7,r23,16
  d0a66c:	91000204 	addi	r4,r18,8
  d0a670:	b8800215 	stw	r2,8(r23)
  d0a674:	90c00117 	ldw	r3,4(r18)
  d0a678:	008006c4 	movi	r2,27
  d0a67c:	b8c00315 	stw	r3,12(r23)
  d0a680:	1180072e 	bgeu	r2,r6,d0a6a0 <_realloc_r+0x4d8>
  d0a684:	90c00217 	ldw	r3,8(r18)
  d0a688:	b9c00604 	addi	r7,r23,24
  d0a68c:	91000404 	addi	r4,r18,16
  d0a690:	b8c00415 	stw	r3,16(r23)
  d0a694:	90800317 	ldw	r2,12(r18)
  d0a698:	b8800515 	stw	r2,20(r23)
  d0a69c:	31404026 	beq	r6,r5,d0a7a0 <_realloc_r+0x5d8>
  d0a6a0:	20800017 	ldw	r2,0(r4)
  d0a6a4:	38800015 	stw	r2,0(r7)
  d0a6a8:	20c00117 	ldw	r3,4(r4)
  d0a6ac:	38c00115 	stw	r3,4(r7)
  d0a6b0:	20800217 	ldw	r2,8(r4)
  d0a6b4:	38800215 	stw	r2,8(r7)
  d0a6b8:	d8c00117 	ldw	r3,4(sp)
  d0a6bc:	bf0b883a 	add	r5,r23,fp
  d0a6c0:	b009883a 	mov	r4,r22
  d0a6c4:	1f05c83a 	sub	r2,r3,fp
  d0a6c8:	10800054 	ori	r2,r2,1
  d0a6cc:	28800115 	stw	r2,4(r5)
  d0a6d0:	b8c00117 	ldw	r3,4(r23)
  d0a6d4:	00803474 	movhi	r2,209
  d0a6d8:	10866d04 	addi	r2,r2,6580
  d0a6dc:	11400215 	stw	r5,8(r2)
  d0a6e0:	18c0004c 	andi	r3,r3,1
  d0a6e4:	e0c6b03a 	or	r3,fp,r3
  d0a6e8:	b8c00115 	stw	r3,4(r23)
  d0a6ec:	0d0cbfc0 	call	d0cbfc <__malloc_unlock>
  d0a6f0:	003eeb06 	br	d0a2a0 <_realloc_r+0xd8>
  d0a6f4:	20800117 	ldw	r2,4(r4)
  d0a6f8:	00ffff04 	movi	r3,-4
  d0a6fc:	800f883a 	mov	r7,r16
  d0a700:	10c4703a 	and	r2,r2,r3
  d0a704:	98a9883a 	add	r20,r19,r2
  d0a708:	84000204 	addi	r16,r16,8
  d0a70c:	003ecf06 	br	d0a24c <_realloc_r+0x84>
  d0a710:	900b883a 	mov	r5,r18
  d0a714:	8009883a 	mov	r4,r16
  d0a718:	0d0905c0 	call	d0905c <memmove>
  d0a71c:	dd000017 	ldw	r20,0(sp)
  d0a720:	b80f883a 	mov	r7,r23
  d0a724:	003ec906 	br	d0a24c <_realloc_r+0x84>
  d0a728:	900b883a 	mov	r5,r18
  d0a72c:	8009883a 	mov	r4,r16
  d0a730:	0d0905c0 	call	d0905c <memmove>
  d0a734:	b80f883a 	mov	r7,r23
  d0a738:	003ec406 	br	d0a24c <_realloc_r+0x84>
  d0a73c:	90c00417 	ldw	r3,16(r18)
  d0a740:	89400604 	addi	r5,r17,24
  d0a744:	91000604 	addi	r4,r18,24
  d0a748:	88c00415 	stw	r3,16(r17)
  d0a74c:	90800517 	ldw	r2,20(r18)
  d0a750:	88800515 	stw	r2,20(r17)
  d0a754:	003f6806 	br	d0a4f8 <_realloc_r+0x330>
  d0a758:	900b883a 	mov	r5,r18
  d0a75c:	8809883a 	mov	r4,r17
  d0a760:	0d0905c0 	call	d0905c <memmove>
  d0a764:	003fd406 	br	d0a6b8 <_realloc_r+0x4f0>
  d0a768:	90c00417 	ldw	r3,16(r18)
  d0a76c:	91000604 	addi	r4,r18,24
  d0a770:	ba000804 	addi	r8,r23,32
  d0a774:	b8c00615 	stw	r3,24(r23)
  d0a778:	90800517 	ldw	r2,20(r18)
  d0a77c:	b8800715 	stw	r2,28(r23)
  d0a780:	003f1206 	br	d0a3cc <_realloc_r+0x204>
  d0a784:	90c00417 	ldw	r3,16(r18)
  d0a788:	91000604 	addi	r4,r18,24
  d0a78c:	ba000804 	addi	r8,r23,32
  d0a790:	b8c00615 	stw	r3,24(r23)
  d0a794:	90800517 	ldw	r2,20(r18)
  d0a798:	b8800715 	stw	r2,28(r23)
  d0a79c:	003f3206 	br	d0a468 <_realloc_r+0x2a0>
  d0a7a0:	90c00417 	ldw	r3,16(r18)
  d0a7a4:	91000604 	addi	r4,r18,24
  d0a7a8:	b9c00804 	addi	r7,r23,32
  d0a7ac:	b8c00615 	stw	r3,24(r23)
  d0a7b0:	90800517 	ldw	r2,20(r18)
  d0a7b4:	b8800715 	stw	r2,28(r23)
  d0a7b8:	003fb906 	br	d0a6a0 <_realloc_r+0x4d8>

00d0a7bc <__isinfd>:
  d0a7bc:	200d883a 	mov	r6,r4
  d0a7c0:	0109c83a 	sub	r4,zero,r4
  d0a7c4:	2188b03a 	or	r4,r4,r6
  d0a7c8:	2008d7fa 	srli	r4,r4,31
  d0a7cc:	00a00034 	movhi	r2,32768
  d0a7d0:	10bfffc4 	addi	r2,r2,-1
  d0a7d4:	1144703a 	and	r2,r2,r5
  d0a7d8:	2088b03a 	or	r4,r4,r2
  d0a7dc:	009ffc34 	movhi	r2,32752
  d0a7e0:	1105c83a 	sub	r2,r2,r4
  d0a7e4:	0087c83a 	sub	r3,zero,r2
  d0a7e8:	10c4b03a 	or	r2,r2,r3
  d0a7ec:	1004d7fa 	srli	r2,r2,31
  d0a7f0:	00c00044 	movi	r3,1
  d0a7f4:	1885c83a 	sub	r2,r3,r2
  d0a7f8:	f800283a 	ret

00d0a7fc <__isnand>:
  d0a7fc:	200d883a 	mov	r6,r4
  d0a800:	0109c83a 	sub	r4,zero,r4
  d0a804:	2188b03a 	or	r4,r4,r6
  d0a808:	2008d7fa 	srli	r4,r4,31
  d0a80c:	00a00034 	movhi	r2,32768
  d0a810:	10bfffc4 	addi	r2,r2,-1
  d0a814:	1144703a 	and	r2,r2,r5
  d0a818:	2088b03a 	or	r4,r4,r2
  d0a81c:	009ffc34 	movhi	r2,32752
  d0a820:	1105c83a 	sub	r2,r2,r4
  d0a824:	1004d7fa 	srli	r2,r2,31
  d0a828:	f800283a 	ret

00d0a82c <_sbrk_r>:
  d0a82c:	defffd04 	addi	sp,sp,-12
  d0a830:	dc000015 	stw	r16,0(sp)
  d0a834:	04003474 	movhi	r16,209
  d0a838:	84135b04 	addi	r16,r16,19820
  d0a83c:	dc400115 	stw	r17,4(sp)
  d0a840:	80000015 	stw	zero,0(r16)
  d0a844:	2023883a 	mov	r17,r4
  d0a848:	2809883a 	mov	r4,r5
  d0a84c:	dfc00215 	stw	ra,8(sp)
  d0a850:	0d0cdfc0 	call	d0cdfc <sbrk>
  d0a854:	1007883a 	mov	r3,r2
  d0a858:	00bfffc4 	movi	r2,-1
  d0a85c:	18800626 	beq	r3,r2,d0a878 <_sbrk_r+0x4c>
  d0a860:	1805883a 	mov	r2,r3
  d0a864:	dfc00217 	ldw	ra,8(sp)
  d0a868:	dc400117 	ldw	r17,4(sp)
  d0a86c:	dc000017 	ldw	r16,0(sp)
  d0a870:	dec00304 	addi	sp,sp,12
  d0a874:	f800283a 	ret
  d0a878:	80800017 	ldw	r2,0(r16)
  d0a87c:	103ff826 	beq	r2,zero,d0a860 <_sbrk_r+0x34>
  d0a880:	88800015 	stw	r2,0(r17)
  d0a884:	1805883a 	mov	r2,r3
  d0a888:	dfc00217 	ldw	ra,8(sp)
  d0a88c:	dc400117 	ldw	r17,4(sp)
  d0a890:	dc000017 	ldw	r16,0(sp)
  d0a894:	dec00304 	addi	sp,sp,12
  d0a898:	f800283a 	ret

00d0a89c <__sclose>:
  d0a89c:	2940038f 	ldh	r5,14(r5)
  d0a8a0:	0d0abd01 	jmpi	d0abd0 <_close_r>

00d0a8a4 <__sseek>:
  d0a8a4:	defffe04 	addi	sp,sp,-8
  d0a8a8:	dc000015 	stw	r16,0(sp)
  d0a8ac:	2821883a 	mov	r16,r5
  d0a8b0:	2940038f 	ldh	r5,14(r5)
  d0a8b4:	dfc00115 	stw	ra,4(sp)
  d0a8b8:	0d0ae480 	call	d0ae48 <_lseek_r>
  d0a8bc:	1007883a 	mov	r3,r2
  d0a8c0:	00bfffc4 	movi	r2,-1
  d0a8c4:	18800926 	beq	r3,r2,d0a8ec <__sseek+0x48>
  d0a8c8:	8080030b 	ldhu	r2,12(r16)
  d0a8cc:	80c01415 	stw	r3,80(r16)
  d0a8d0:	10840014 	ori	r2,r2,4096
  d0a8d4:	8080030d 	sth	r2,12(r16)
  d0a8d8:	1805883a 	mov	r2,r3
  d0a8dc:	dfc00117 	ldw	ra,4(sp)
  d0a8e0:	dc000017 	ldw	r16,0(sp)
  d0a8e4:	dec00204 	addi	sp,sp,8
  d0a8e8:	f800283a 	ret
  d0a8ec:	8080030b 	ldhu	r2,12(r16)
  d0a8f0:	10bbffcc 	andi	r2,r2,61439
  d0a8f4:	8080030d 	sth	r2,12(r16)
  d0a8f8:	1805883a 	mov	r2,r3
  d0a8fc:	dfc00117 	ldw	ra,4(sp)
  d0a900:	dc000017 	ldw	r16,0(sp)
  d0a904:	dec00204 	addi	sp,sp,8
  d0a908:	f800283a 	ret

00d0a90c <__swrite>:
  d0a90c:	2880030b 	ldhu	r2,12(r5)
  d0a910:	defffb04 	addi	sp,sp,-20
  d0a914:	dcc00315 	stw	r19,12(sp)
  d0a918:	1080400c 	andi	r2,r2,256
  d0a91c:	dc800215 	stw	r18,8(sp)
  d0a920:	dc400115 	stw	r17,4(sp)
  d0a924:	dc000015 	stw	r16,0(sp)
  d0a928:	3027883a 	mov	r19,r6
  d0a92c:	3825883a 	mov	r18,r7
  d0a930:	dfc00415 	stw	ra,16(sp)
  d0a934:	2821883a 	mov	r16,r5
  d0a938:	000d883a 	mov	r6,zero
  d0a93c:	01c00084 	movi	r7,2
  d0a940:	2023883a 	mov	r17,r4
  d0a944:	10000226 	beq	r2,zero,d0a950 <__swrite+0x44>
  d0a948:	2940038f 	ldh	r5,14(r5)
  d0a94c:	0d0ae480 	call	d0ae48 <_lseek_r>
  d0a950:	8080030b 	ldhu	r2,12(r16)
  d0a954:	8140038f 	ldh	r5,14(r16)
  d0a958:	8809883a 	mov	r4,r17
  d0a95c:	10bbffcc 	andi	r2,r2,61439
  d0a960:	980d883a 	mov	r6,r19
  d0a964:	900f883a 	mov	r7,r18
  d0a968:	8080030d 	sth	r2,12(r16)
  d0a96c:	dfc00417 	ldw	ra,16(sp)
  d0a970:	dcc00317 	ldw	r19,12(sp)
  d0a974:	dc800217 	ldw	r18,8(sp)
  d0a978:	dc400117 	ldw	r17,4(sp)
  d0a97c:	dc000017 	ldw	r16,0(sp)
  d0a980:	dec00504 	addi	sp,sp,20
  d0a984:	0d0aaa41 	jmpi	d0aaa4 <_write_r>

00d0a988 <__sread>:
  d0a988:	defffe04 	addi	sp,sp,-8
  d0a98c:	dc000015 	stw	r16,0(sp)
  d0a990:	2821883a 	mov	r16,r5
  d0a994:	2940038f 	ldh	r5,14(r5)
  d0a998:	dfc00115 	stw	ra,4(sp)
  d0a99c:	0d0aec00 	call	d0aec0 <_read_r>
  d0a9a0:	1007883a 	mov	r3,r2
  d0a9a4:	10000816 	blt	r2,zero,d0a9c8 <__sread+0x40>
  d0a9a8:	80801417 	ldw	r2,80(r16)
  d0a9ac:	10c5883a 	add	r2,r2,r3
  d0a9b0:	80801415 	stw	r2,80(r16)
  d0a9b4:	1805883a 	mov	r2,r3
  d0a9b8:	dfc00117 	ldw	ra,4(sp)
  d0a9bc:	dc000017 	ldw	r16,0(sp)
  d0a9c0:	dec00204 	addi	sp,sp,8
  d0a9c4:	f800283a 	ret
  d0a9c8:	8080030b 	ldhu	r2,12(r16)
  d0a9cc:	10bbffcc 	andi	r2,r2,61439
  d0a9d0:	8080030d 	sth	r2,12(r16)
  d0a9d4:	1805883a 	mov	r2,r3
  d0a9d8:	dfc00117 	ldw	ra,4(sp)
  d0a9dc:	dc000017 	ldw	r16,0(sp)
  d0a9e0:	dec00204 	addi	sp,sp,8
  d0a9e4:	f800283a 	ret

00d0a9e8 <strcmp>:
  d0a9e8:	2144b03a 	or	r2,r4,r5
  d0a9ec:	108000cc 	andi	r2,r2,3
  d0a9f0:	10001d1e 	bne	r2,zero,d0aa68 <strcmp+0x80>
  d0a9f4:	200f883a 	mov	r7,r4
  d0a9f8:	28800017 	ldw	r2,0(r5)
  d0a9fc:	21000017 	ldw	r4,0(r4)
  d0aa00:	280d883a 	mov	r6,r5
  d0aa04:	2080161e 	bne	r4,r2,d0aa60 <strcmp+0x78>
  d0aa08:	023fbff4 	movhi	r8,65279
  d0aa0c:	423fbfc4 	addi	r8,r8,-257
  d0aa10:	2207883a 	add	r3,r4,r8
  d0aa14:	01602074 	movhi	r5,32897
  d0aa18:	29602004 	addi	r5,r5,-32640
  d0aa1c:	1946703a 	and	r3,r3,r5
  d0aa20:	0104303a 	nor	r2,zero,r4
  d0aa24:	10c4703a 	and	r2,r2,r3
  d0aa28:	10001c1e 	bne	r2,zero,d0aa9c <strcmp+0xb4>
  d0aa2c:	4013883a 	mov	r9,r8
  d0aa30:	2811883a 	mov	r8,r5
  d0aa34:	00000106 	br	d0aa3c <strcmp+0x54>
  d0aa38:	1800181e 	bne	r3,zero,d0aa9c <strcmp+0xb4>
  d0aa3c:	39c00104 	addi	r7,r7,4
  d0aa40:	39000017 	ldw	r4,0(r7)
  d0aa44:	31800104 	addi	r6,r6,4
  d0aa48:	31400017 	ldw	r5,0(r6)
  d0aa4c:	2245883a 	add	r2,r4,r9
  d0aa50:	1204703a 	and	r2,r2,r8
  d0aa54:	0106303a 	nor	r3,zero,r4
  d0aa58:	1886703a 	and	r3,r3,r2
  d0aa5c:	217ff626 	beq	r4,r5,d0aa38 <strcmp+0x50>
  d0aa60:	3809883a 	mov	r4,r7
  d0aa64:	300b883a 	mov	r5,r6
  d0aa68:	20c00007 	ldb	r3,0(r4)
  d0aa6c:	1800051e 	bne	r3,zero,d0aa84 <strcmp+0x9c>
  d0aa70:	00000606 	br	d0aa8c <strcmp+0xa4>
  d0aa74:	21000044 	addi	r4,r4,1
  d0aa78:	20c00007 	ldb	r3,0(r4)
  d0aa7c:	29400044 	addi	r5,r5,1
  d0aa80:	18000226 	beq	r3,zero,d0aa8c <strcmp+0xa4>
  d0aa84:	28800007 	ldb	r2,0(r5)
  d0aa88:	18bffa26 	beq	r3,r2,d0aa74 <strcmp+0x8c>
  d0aa8c:	20c00003 	ldbu	r3,0(r4)
  d0aa90:	28800003 	ldbu	r2,0(r5)
  d0aa94:	1885c83a 	sub	r2,r3,r2
  d0aa98:	f800283a 	ret
  d0aa9c:	0005883a 	mov	r2,zero
  d0aaa0:	f800283a 	ret

00d0aaa4 <_write_r>:
  d0aaa4:	defffd04 	addi	sp,sp,-12
  d0aaa8:	dc000015 	stw	r16,0(sp)
  d0aaac:	04003474 	movhi	r16,209
  d0aab0:	84135b04 	addi	r16,r16,19820
  d0aab4:	dc400115 	stw	r17,4(sp)
  d0aab8:	80000015 	stw	zero,0(r16)
  d0aabc:	2023883a 	mov	r17,r4
  d0aac0:	2809883a 	mov	r4,r5
  d0aac4:	300b883a 	mov	r5,r6
  d0aac8:	380d883a 	mov	r6,r7
  d0aacc:	dfc00215 	stw	ra,8(sp)
  d0aad0:	0d0ceb80 	call	d0ceb8 <write>
  d0aad4:	1007883a 	mov	r3,r2
  d0aad8:	00bfffc4 	movi	r2,-1
  d0aadc:	18800626 	beq	r3,r2,d0aaf8 <_write_r+0x54>
  d0aae0:	1805883a 	mov	r2,r3
  d0aae4:	dfc00217 	ldw	ra,8(sp)
  d0aae8:	dc400117 	ldw	r17,4(sp)
  d0aaec:	dc000017 	ldw	r16,0(sp)
  d0aaf0:	dec00304 	addi	sp,sp,12
  d0aaf4:	f800283a 	ret
  d0aaf8:	80800017 	ldw	r2,0(r16)
  d0aafc:	103ff826 	beq	r2,zero,d0aae0 <_write_r+0x3c>
  d0ab00:	88800015 	stw	r2,0(r17)
  d0ab04:	1805883a 	mov	r2,r3
  d0ab08:	dfc00217 	ldw	ra,8(sp)
  d0ab0c:	dc400117 	ldw	r17,4(sp)
  d0ab10:	dc000017 	ldw	r16,0(sp)
  d0ab14:	dec00304 	addi	sp,sp,12
  d0ab18:	f800283a 	ret

00d0ab1c <_calloc_r>:
  d0ab1c:	298b383a 	mul	r5,r5,r6
  d0ab20:	defffe04 	addi	sp,sp,-8
  d0ab24:	dc000015 	stw	r16,0(sp)
  d0ab28:	dfc00115 	stw	ra,4(sp)
  d0ab2c:	0d087980 	call	d08798 <_malloc_r>
  d0ab30:	1021883a 	mov	r16,r2
  d0ab34:	01c00904 	movi	r7,36
  d0ab38:	10000d26 	beq	r2,zero,d0ab70 <_calloc_r+0x54>
  d0ab3c:	10ffff17 	ldw	r3,-4(r2)
  d0ab40:	1009883a 	mov	r4,r2
  d0ab44:	00bfff04 	movi	r2,-4
  d0ab48:	1886703a 	and	r3,r3,r2
  d0ab4c:	1887883a 	add	r3,r3,r2
  d0ab50:	180d883a 	mov	r6,r3
  d0ab54:	000b883a 	mov	r5,zero
  d0ab58:	38c01736 	bltu	r7,r3,d0abb8 <_calloc_r+0x9c>
  d0ab5c:	008004c4 	movi	r2,19
  d0ab60:	10c00836 	bltu	r2,r3,d0ab84 <_calloc_r+0x68>
  d0ab64:	20000215 	stw	zero,8(r4)
  d0ab68:	20000015 	stw	zero,0(r4)
  d0ab6c:	20000115 	stw	zero,4(r4)
  d0ab70:	8005883a 	mov	r2,r16
  d0ab74:	dfc00117 	ldw	ra,4(sp)
  d0ab78:	dc000017 	ldw	r16,0(sp)
  d0ab7c:	dec00204 	addi	sp,sp,8
  d0ab80:	f800283a 	ret
  d0ab84:	008006c4 	movi	r2,27
  d0ab88:	80000015 	stw	zero,0(r16)
  d0ab8c:	80000115 	stw	zero,4(r16)
  d0ab90:	81000204 	addi	r4,r16,8
  d0ab94:	10fff32e 	bgeu	r2,r3,d0ab64 <_calloc_r+0x48>
  d0ab98:	80000215 	stw	zero,8(r16)
  d0ab9c:	80000315 	stw	zero,12(r16)
  d0aba0:	81000404 	addi	r4,r16,16
  d0aba4:	19ffef1e 	bne	r3,r7,d0ab64 <_calloc_r+0x48>
  d0aba8:	81000604 	addi	r4,r16,24
  d0abac:	80000415 	stw	zero,16(r16)
  d0abb0:	80000515 	stw	zero,20(r16)
  d0abb4:	003feb06 	br	d0ab64 <_calloc_r+0x48>
  d0abb8:	0d0913c0 	call	d0913c <memset>
  d0abbc:	8005883a 	mov	r2,r16
  d0abc0:	dfc00117 	ldw	ra,4(sp)
  d0abc4:	dc000017 	ldw	r16,0(sp)
  d0abc8:	dec00204 	addi	sp,sp,8
  d0abcc:	f800283a 	ret

00d0abd0 <_close_r>:
  d0abd0:	defffd04 	addi	sp,sp,-12
  d0abd4:	dc000015 	stw	r16,0(sp)
  d0abd8:	04003474 	movhi	r16,209
  d0abdc:	84135b04 	addi	r16,r16,19820
  d0abe0:	dc400115 	stw	r17,4(sp)
  d0abe4:	80000015 	stw	zero,0(r16)
  d0abe8:	2023883a 	mov	r17,r4
  d0abec:	2809883a 	mov	r4,r5
  d0abf0:	dfc00215 	stw	ra,8(sp)
  d0abf4:	0d0c5580 	call	d0c558 <close>
  d0abf8:	1007883a 	mov	r3,r2
  d0abfc:	00bfffc4 	movi	r2,-1
  d0ac00:	18800626 	beq	r3,r2,d0ac1c <_close_r+0x4c>
  d0ac04:	1805883a 	mov	r2,r3
  d0ac08:	dfc00217 	ldw	ra,8(sp)
  d0ac0c:	dc400117 	ldw	r17,4(sp)
  d0ac10:	dc000017 	ldw	r16,0(sp)
  d0ac14:	dec00304 	addi	sp,sp,12
  d0ac18:	f800283a 	ret
  d0ac1c:	80800017 	ldw	r2,0(r16)
  d0ac20:	103ff826 	beq	r2,zero,d0ac04 <_close_r+0x34>
  d0ac24:	88800015 	stw	r2,0(r17)
  d0ac28:	1805883a 	mov	r2,r3
  d0ac2c:	dfc00217 	ldw	ra,8(sp)
  d0ac30:	dc400117 	ldw	r17,4(sp)
  d0ac34:	dc000017 	ldw	r16,0(sp)
  d0ac38:	dec00304 	addi	sp,sp,12
  d0ac3c:	f800283a 	ret

00d0ac40 <_fclose_r>:
  d0ac40:	defffc04 	addi	sp,sp,-16
  d0ac44:	dc400115 	stw	r17,4(sp)
  d0ac48:	dc000015 	stw	r16,0(sp)
  d0ac4c:	dfc00315 	stw	ra,12(sp)
  d0ac50:	dc800215 	stw	r18,8(sp)
  d0ac54:	2821883a 	mov	r16,r5
  d0ac58:	2023883a 	mov	r17,r4
  d0ac5c:	28002926 	beq	r5,zero,d0ad04 <_fclose_r+0xc4>
  d0ac60:	0d0787c0 	call	d0787c <__sfp_lock_acquire>
  d0ac64:	88000226 	beq	r17,zero,d0ac70 <_fclose_r+0x30>
  d0ac68:	88800e17 	ldw	r2,56(r17)
  d0ac6c:	10002d26 	beq	r2,zero,d0ad24 <_fclose_r+0xe4>
  d0ac70:	8080030f 	ldh	r2,12(r16)
  d0ac74:	10002226 	beq	r2,zero,d0ad00 <_fclose_r+0xc0>
  d0ac78:	8809883a 	mov	r4,r17
  d0ac7c:	800b883a 	mov	r5,r16
  d0ac80:	0d075f40 	call	d075f4 <_fflush_r>
  d0ac84:	1025883a 	mov	r18,r2
  d0ac88:	80800b17 	ldw	r2,44(r16)
  d0ac8c:	10000426 	beq	r2,zero,d0aca0 <_fclose_r+0x60>
  d0ac90:	81400717 	ldw	r5,28(r16)
  d0ac94:	8809883a 	mov	r4,r17
  d0ac98:	103ee83a 	callr	r2
  d0ac9c:	10002a16 	blt	r2,zero,d0ad48 <_fclose_r+0x108>
  d0aca0:	8080030b 	ldhu	r2,12(r16)
  d0aca4:	1080200c 	andi	r2,r2,128
  d0aca8:	1000231e 	bne	r2,zero,d0ad38 <_fclose_r+0xf8>
  d0acac:	81400c17 	ldw	r5,48(r16)
  d0acb0:	28000526 	beq	r5,zero,d0acc8 <_fclose_r+0x88>
  d0acb4:	80801004 	addi	r2,r16,64
  d0acb8:	28800226 	beq	r5,r2,d0acc4 <_fclose_r+0x84>
  d0acbc:	8809883a 	mov	r4,r17
  d0acc0:	0d07c100 	call	d07c10 <_free_r>
  d0acc4:	80000c15 	stw	zero,48(r16)
  d0acc8:	81401117 	ldw	r5,68(r16)
  d0accc:	28000326 	beq	r5,zero,d0acdc <_fclose_r+0x9c>
  d0acd0:	8809883a 	mov	r4,r17
  d0acd4:	0d07c100 	call	d07c10 <_free_r>
  d0acd8:	80001115 	stw	zero,68(r16)
  d0acdc:	8000030d 	sth	zero,12(r16)
  d0ace0:	0d078800 	call	d07880 <__sfp_lock_release>
  d0ace4:	9005883a 	mov	r2,r18
  d0ace8:	dfc00317 	ldw	ra,12(sp)
  d0acec:	dc800217 	ldw	r18,8(sp)
  d0acf0:	dc400117 	ldw	r17,4(sp)
  d0acf4:	dc000017 	ldw	r16,0(sp)
  d0acf8:	dec00404 	addi	sp,sp,16
  d0acfc:	f800283a 	ret
  d0ad00:	0d078800 	call	d07880 <__sfp_lock_release>
  d0ad04:	0025883a 	mov	r18,zero
  d0ad08:	9005883a 	mov	r2,r18
  d0ad0c:	dfc00317 	ldw	ra,12(sp)
  d0ad10:	dc800217 	ldw	r18,8(sp)
  d0ad14:	dc400117 	ldw	r17,4(sp)
  d0ad18:	dc000017 	ldw	r16,0(sp)
  d0ad1c:	dec00404 	addi	sp,sp,16
  d0ad20:	f800283a 	ret
  d0ad24:	8809883a 	mov	r4,r17
  d0ad28:	0d0788c0 	call	d0788c <__sinit>
  d0ad2c:	8080030f 	ldh	r2,12(r16)
  d0ad30:	103fd11e 	bne	r2,zero,d0ac78 <_fclose_r+0x38>
  d0ad34:	003ff206 	br	d0ad00 <_fclose_r+0xc0>
  d0ad38:	81400417 	ldw	r5,16(r16)
  d0ad3c:	8809883a 	mov	r4,r17
  d0ad40:	0d07c100 	call	d07c10 <_free_r>
  d0ad44:	003fd906 	br	d0acac <_fclose_r+0x6c>
  d0ad48:	04bfffc4 	movi	r18,-1
  d0ad4c:	003fd406 	br	d0aca0 <_fclose_r+0x60>

00d0ad50 <fclose>:
  d0ad50:	00803474 	movhi	r2,209
  d0ad54:	108c4a04 	addi	r2,r2,12584
  d0ad58:	200b883a 	mov	r5,r4
  d0ad5c:	11000017 	ldw	r4,0(r2)
  d0ad60:	0d0ac401 	jmpi	d0ac40 <_fclose_r>

00d0ad64 <_fstat_r>:
  d0ad64:	defffd04 	addi	sp,sp,-12
  d0ad68:	dc000015 	stw	r16,0(sp)
  d0ad6c:	04003474 	movhi	r16,209
  d0ad70:	84135b04 	addi	r16,r16,19820
  d0ad74:	dc400115 	stw	r17,4(sp)
  d0ad78:	80000015 	stw	zero,0(r16)
  d0ad7c:	2023883a 	mov	r17,r4
  d0ad80:	2809883a 	mov	r4,r5
  d0ad84:	300b883a 	mov	r5,r6
  d0ad88:	dfc00215 	stw	ra,8(sp)
  d0ad8c:	0d0c6e00 	call	d0c6e0 <fstat>
  d0ad90:	1007883a 	mov	r3,r2
  d0ad94:	00bfffc4 	movi	r2,-1
  d0ad98:	18800626 	beq	r3,r2,d0adb4 <_fstat_r+0x50>
  d0ad9c:	1805883a 	mov	r2,r3
  d0ada0:	dfc00217 	ldw	ra,8(sp)
  d0ada4:	dc400117 	ldw	r17,4(sp)
  d0ada8:	dc000017 	ldw	r16,0(sp)
  d0adac:	dec00304 	addi	sp,sp,12
  d0adb0:	f800283a 	ret
  d0adb4:	80800017 	ldw	r2,0(r16)
  d0adb8:	103ff826 	beq	r2,zero,d0ad9c <_fstat_r+0x38>
  d0adbc:	88800015 	stw	r2,0(r17)
  d0adc0:	1805883a 	mov	r2,r3
  d0adc4:	dfc00217 	ldw	ra,8(sp)
  d0adc8:	dc400117 	ldw	r17,4(sp)
  d0adcc:	dc000017 	ldw	r16,0(sp)
  d0add0:	dec00304 	addi	sp,sp,12
  d0add4:	f800283a 	ret

00d0add8 <_isatty_r>:
  d0add8:	defffd04 	addi	sp,sp,-12
  d0addc:	dc000015 	stw	r16,0(sp)
  d0ade0:	04003474 	movhi	r16,209
  d0ade4:	84135b04 	addi	r16,r16,19820
  d0ade8:	dc400115 	stw	r17,4(sp)
  d0adec:	80000015 	stw	zero,0(r16)
  d0adf0:	2023883a 	mov	r17,r4
  d0adf4:	2809883a 	mov	r4,r5
  d0adf8:	dfc00215 	stw	ra,8(sp)
  d0adfc:	0d0c8140 	call	d0c814 <isatty>
  d0ae00:	1007883a 	mov	r3,r2
  d0ae04:	00bfffc4 	movi	r2,-1
  d0ae08:	18800626 	beq	r3,r2,d0ae24 <_isatty_r+0x4c>
  d0ae0c:	1805883a 	mov	r2,r3
  d0ae10:	dfc00217 	ldw	ra,8(sp)
  d0ae14:	dc400117 	ldw	r17,4(sp)
  d0ae18:	dc000017 	ldw	r16,0(sp)
  d0ae1c:	dec00304 	addi	sp,sp,12
  d0ae20:	f800283a 	ret
  d0ae24:	80800017 	ldw	r2,0(r16)
  d0ae28:	103ff826 	beq	r2,zero,d0ae0c <_isatty_r+0x34>
  d0ae2c:	88800015 	stw	r2,0(r17)
  d0ae30:	1805883a 	mov	r2,r3
  d0ae34:	dfc00217 	ldw	ra,8(sp)
  d0ae38:	dc400117 	ldw	r17,4(sp)
  d0ae3c:	dc000017 	ldw	r16,0(sp)
  d0ae40:	dec00304 	addi	sp,sp,12
  d0ae44:	f800283a 	ret

00d0ae48 <_lseek_r>:
  d0ae48:	defffd04 	addi	sp,sp,-12
  d0ae4c:	dc000015 	stw	r16,0(sp)
  d0ae50:	04003474 	movhi	r16,209
  d0ae54:	84135b04 	addi	r16,r16,19820
  d0ae58:	dc400115 	stw	r17,4(sp)
  d0ae5c:	80000015 	stw	zero,0(r16)
  d0ae60:	2023883a 	mov	r17,r4
  d0ae64:	2809883a 	mov	r4,r5
  d0ae68:	300b883a 	mov	r5,r6
  d0ae6c:	380d883a 	mov	r6,r7
  d0ae70:	dfc00215 	stw	ra,8(sp)
  d0ae74:	0d0ca200 	call	d0ca20 <lseek>
  d0ae78:	1007883a 	mov	r3,r2
  d0ae7c:	00bfffc4 	movi	r2,-1
  d0ae80:	18800626 	beq	r3,r2,d0ae9c <_lseek_r+0x54>
  d0ae84:	1805883a 	mov	r2,r3
  d0ae88:	dfc00217 	ldw	ra,8(sp)
  d0ae8c:	dc400117 	ldw	r17,4(sp)
  d0ae90:	dc000017 	ldw	r16,0(sp)
  d0ae94:	dec00304 	addi	sp,sp,12
  d0ae98:	f800283a 	ret
  d0ae9c:	80800017 	ldw	r2,0(r16)
  d0aea0:	103ff826 	beq	r2,zero,d0ae84 <_lseek_r+0x3c>
  d0aea4:	88800015 	stw	r2,0(r17)
  d0aea8:	1805883a 	mov	r2,r3
  d0aeac:	dfc00217 	ldw	ra,8(sp)
  d0aeb0:	dc400117 	ldw	r17,4(sp)
  d0aeb4:	dc000017 	ldw	r16,0(sp)
  d0aeb8:	dec00304 	addi	sp,sp,12
  d0aebc:	f800283a 	ret

00d0aec0 <_read_r>:
  d0aec0:	defffd04 	addi	sp,sp,-12
  d0aec4:	dc000015 	stw	r16,0(sp)
  d0aec8:	04003474 	movhi	r16,209
  d0aecc:	84135b04 	addi	r16,r16,19820
  d0aed0:	dc400115 	stw	r17,4(sp)
  d0aed4:	80000015 	stw	zero,0(r16)
  d0aed8:	2023883a 	mov	r17,r4
  d0aedc:	2809883a 	mov	r4,r5
  d0aee0:	300b883a 	mov	r5,r6
  d0aee4:	380d883a 	mov	r6,r7
  d0aee8:	dfc00215 	stw	ra,8(sp)
  d0aeec:	0d0cc1c0 	call	d0cc1c <read>
  d0aef0:	1007883a 	mov	r3,r2
  d0aef4:	00bfffc4 	movi	r2,-1
  d0aef8:	18800626 	beq	r3,r2,d0af14 <_read_r+0x54>
  d0aefc:	1805883a 	mov	r2,r3
  d0af00:	dfc00217 	ldw	ra,8(sp)
  d0af04:	dc400117 	ldw	r17,4(sp)
  d0af08:	dc000017 	ldw	r16,0(sp)
  d0af0c:	dec00304 	addi	sp,sp,12
  d0af10:	f800283a 	ret
  d0af14:	80800017 	ldw	r2,0(r16)
  d0af18:	103ff826 	beq	r2,zero,d0aefc <_read_r+0x3c>
  d0af1c:	88800015 	stw	r2,0(r17)
  d0af20:	1805883a 	mov	r2,r3
  d0af24:	dfc00217 	ldw	ra,8(sp)
  d0af28:	dc400117 	ldw	r17,4(sp)
  d0af2c:	dc000017 	ldw	r16,0(sp)
  d0af30:	dec00304 	addi	sp,sp,12
  d0af34:	f800283a 	ret

00d0af38 <__udivdi3>:
  d0af38:	defff004 	addi	sp,sp,-64
  d0af3c:	2005883a 	mov	r2,r4
  d0af40:	3011883a 	mov	r8,r6
  d0af44:	df000e15 	stw	fp,56(sp)
  d0af48:	dd000a15 	stw	r20,40(sp)
  d0af4c:	dc000615 	stw	r16,24(sp)
  d0af50:	dfc00f15 	stw	ra,60(sp)
  d0af54:	ddc00d15 	stw	r23,52(sp)
  d0af58:	dd800c15 	stw	r22,48(sp)
  d0af5c:	dd400b15 	stw	r21,44(sp)
  d0af60:	dcc00915 	stw	r19,36(sp)
  d0af64:	dc800815 	stw	r18,32(sp)
  d0af68:	dc400715 	stw	r17,28(sp)
  d0af6c:	4021883a 	mov	r16,r8
  d0af70:	1039883a 	mov	fp,r2
  d0af74:	2829883a 	mov	r20,r5
  d0af78:	38003b1e 	bne	r7,zero,d0b068 <__udivdi3+0x130>
  d0af7c:	2a005c36 	bltu	r5,r8,d0b0f0 <__udivdi3+0x1b8>
  d0af80:	4000a626 	beq	r8,zero,d0b21c <__udivdi3+0x2e4>
  d0af84:	00bfffd4 	movui	r2,65535
  d0af88:	14009e36 	bltu	r2,r16,d0b204 <__udivdi3+0x2cc>
  d0af8c:	00803fc4 	movi	r2,255
  d0af90:	14013d36 	bltu	r2,r16,d0b488 <__udivdi3+0x550>
  d0af94:	000b883a 	mov	r5,zero
  d0af98:	0005883a 	mov	r2,zero
  d0af9c:	8084d83a 	srl	r2,r16,r2
  d0afa0:	01003474 	movhi	r4,209
  d0afa4:	21045804 	addi	r4,r4,4448
  d0afa8:	01800804 	movi	r6,32
  d0afac:	1105883a 	add	r2,r2,r4
  d0afb0:	10c00003 	ldbu	r3,0(r2)
  d0afb4:	28c7883a 	add	r3,r5,r3
  d0afb8:	30edc83a 	sub	r22,r6,r3
  d0afbc:	b000ee1e 	bne	r22,zero,d0b378 <__udivdi3+0x440>
  d0afc0:	802ad43a 	srli	r21,r16,16
  d0afc4:	00800044 	movi	r2,1
  d0afc8:	a423c83a 	sub	r17,r20,r16
  d0afcc:	85ffffcc 	andi	r23,r16,65535
  d0afd0:	d8800315 	stw	r2,12(sp)
  d0afd4:	8809883a 	mov	r4,r17
  d0afd8:	a80b883a 	mov	r5,r21
  d0afdc:	0d0c5480 	call	d0c548 <__udivsi3>
  d0afe0:	8809883a 	mov	r4,r17
  d0afe4:	a80b883a 	mov	r5,r21
  d0afe8:	102d883a 	mov	r22,r2
  d0afec:	0d0c5500 	call	d0c550 <__umodsi3>
  d0aff0:	1004943a 	slli	r2,r2,16
  d0aff4:	e006d43a 	srli	r3,fp,16
  d0aff8:	bda3383a 	mul	r17,r23,r22
  d0affc:	10c4b03a 	or	r2,r2,r3
  d0b000:	1440042e 	bgeu	r2,r17,d0b014 <__udivdi3+0xdc>
  d0b004:	1405883a 	add	r2,r2,r16
  d0b008:	b5bfffc4 	addi	r22,r22,-1
  d0b00c:	14000136 	bltu	r2,r16,d0b014 <__udivdi3+0xdc>
  d0b010:	14413d36 	bltu	r2,r17,d0b508 <__udivdi3+0x5d0>
  d0b014:	1463c83a 	sub	r17,r2,r17
  d0b018:	8809883a 	mov	r4,r17
  d0b01c:	a80b883a 	mov	r5,r21
  d0b020:	0d0c5480 	call	d0c548 <__udivsi3>
  d0b024:	8809883a 	mov	r4,r17
  d0b028:	a80b883a 	mov	r5,r21
  d0b02c:	1029883a 	mov	r20,r2
  d0b030:	0d0c5500 	call	d0c550 <__umodsi3>
  d0b034:	1004943a 	slli	r2,r2,16
  d0b038:	bd09383a 	mul	r4,r23,r20
  d0b03c:	e0ffffcc 	andi	r3,fp,65535
  d0b040:	10c4b03a 	or	r2,r2,r3
  d0b044:	1100042e 	bgeu	r2,r4,d0b058 <__udivdi3+0x120>
  d0b048:	8085883a 	add	r2,r16,r2
  d0b04c:	a53fffc4 	addi	r20,r20,-1
  d0b050:	14000136 	bltu	r2,r16,d0b058 <__udivdi3+0x120>
  d0b054:	11012036 	bltu	r2,r4,d0b4d8 <__udivdi3+0x5a0>
  d0b058:	b004943a 	slli	r2,r22,16
  d0b05c:	d9000317 	ldw	r4,12(sp)
  d0b060:	a084b03a 	or	r2,r20,r2
  d0b064:	00001506 	br	d0b0bc <__udivdi3+0x184>
  d0b068:	380d883a 	mov	r6,r7
  d0b06c:	29c06236 	bltu	r5,r7,d0b1f8 <__udivdi3+0x2c0>
  d0b070:	00bfffd4 	movui	r2,65535
  d0b074:	11c05a36 	bltu	r2,r7,d0b1e0 <__udivdi3+0x2a8>
  d0b078:	00803fc4 	movi	r2,255
  d0b07c:	11c0fc36 	bltu	r2,r7,d0b470 <__udivdi3+0x538>
  d0b080:	000b883a 	mov	r5,zero
  d0b084:	0005883a 	mov	r2,zero
  d0b088:	3084d83a 	srl	r2,r6,r2
  d0b08c:	01003474 	movhi	r4,209
  d0b090:	21045804 	addi	r4,r4,4448
  d0b094:	01c00804 	movi	r7,32
  d0b098:	1105883a 	add	r2,r2,r4
  d0b09c:	10c00003 	ldbu	r3,0(r2)
  d0b0a0:	28c7883a 	add	r3,r5,r3
  d0b0a4:	38efc83a 	sub	r23,r7,r3
  d0b0a8:	b800691e 	bne	r23,zero,d0b250 <__udivdi3+0x318>
  d0b0ac:	35000136 	bltu	r6,r20,d0b0b4 <__udivdi3+0x17c>
  d0b0b0:	e4005136 	bltu	fp,r16,d0b1f8 <__udivdi3+0x2c0>
  d0b0b4:	00800044 	movi	r2,1
  d0b0b8:	0009883a 	mov	r4,zero
  d0b0bc:	2007883a 	mov	r3,r4
  d0b0c0:	dfc00f17 	ldw	ra,60(sp)
  d0b0c4:	df000e17 	ldw	fp,56(sp)
  d0b0c8:	ddc00d17 	ldw	r23,52(sp)
  d0b0cc:	dd800c17 	ldw	r22,48(sp)
  d0b0d0:	dd400b17 	ldw	r21,44(sp)
  d0b0d4:	dd000a17 	ldw	r20,40(sp)
  d0b0d8:	dcc00917 	ldw	r19,36(sp)
  d0b0dc:	dc800817 	ldw	r18,32(sp)
  d0b0e0:	dc400717 	ldw	r17,28(sp)
  d0b0e4:	dc000617 	ldw	r16,24(sp)
  d0b0e8:	dec01004 	addi	sp,sp,64
  d0b0ec:	f800283a 	ret
  d0b0f0:	00bfffd4 	movui	r2,65535
  d0b0f4:	12005036 	bltu	r2,r8,d0b238 <__udivdi3+0x300>
  d0b0f8:	00803fc4 	movi	r2,255
  d0b0fc:	1200e836 	bltu	r2,r8,d0b4a0 <__udivdi3+0x568>
  d0b100:	000b883a 	mov	r5,zero
  d0b104:	0005883a 	mov	r2,zero
  d0b108:	8084d83a 	srl	r2,r16,r2
  d0b10c:	01003474 	movhi	r4,209
  d0b110:	21045804 	addi	r4,r4,4448
  d0b114:	01800804 	movi	r6,32
  d0b118:	1105883a 	add	r2,r2,r4
  d0b11c:	10c00003 	ldbu	r3,0(r2)
  d0b120:	28c7883a 	add	r3,r5,r3
  d0b124:	30cbc83a 	sub	r5,r6,r3
  d0b128:	28000626 	beq	r5,zero,d0b144 <__udivdi3+0x20c>
  d0b12c:	3145c83a 	sub	r2,r6,r5
  d0b130:	e084d83a 	srl	r2,fp,r2
  d0b134:	a146983a 	sll	r3,r20,r5
  d0b138:	e178983a 	sll	fp,fp,r5
  d0b13c:	8160983a 	sll	r16,r16,r5
  d0b140:	18a8b03a 	or	r20,r3,r2
  d0b144:	802ad43a 	srli	r21,r16,16
  d0b148:	a009883a 	mov	r4,r20
  d0b14c:	85ffffcc 	andi	r23,r16,65535
  d0b150:	a80b883a 	mov	r5,r21
  d0b154:	0d0c5480 	call	d0c548 <__udivsi3>
  d0b158:	a009883a 	mov	r4,r20
  d0b15c:	a80b883a 	mov	r5,r21
  d0b160:	102d883a 	mov	r22,r2
  d0b164:	0d0c5500 	call	d0c550 <__umodsi3>
  d0b168:	1004943a 	slli	r2,r2,16
  d0b16c:	e006d43a 	srli	r3,fp,16
  d0b170:	bda3383a 	mul	r17,r23,r22
  d0b174:	10c4b03a 	or	r2,r2,r3
  d0b178:	1440042e 	bgeu	r2,r17,d0b18c <__udivdi3+0x254>
  d0b17c:	1405883a 	add	r2,r2,r16
  d0b180:	b5bfffc4 	addi	r22,r22,-1
  d0b184:	14000136 	bltu	r2,r16,d0b18c <__udivdi3+0x254>
  d0b188:	1440d536 	bltu	r2,r17,d0b4e0 <__udivdi3+0x5a8>
  d0b18c:	1463c83a 	sub	r17,r2,r17
  d0b190:	8809883a 	mov	r4,r17
  d0b194:	a80b883a 	mov	r5,r21
  d0b198:	0d0c5480 	call	d0c548 <__udivsi3>
  d0b19c:	8809883a 	mov	r4,r17
  d0b1a0:	a80b883a 	mov	r5,r21
  d0b1a4:	1029883a 	mov	r20,r2
  d0b1a8:	0d0c5500 	call	d0c550 <__umodsi3>
  d0b1ac:	1004943a 	slli	r2,r2,16
  d0b1b0:	bd09383a 	mul	r4,r23,r20
  d0b1b4:	e0ffffcc 	andi	r3,fp,65535
  d0b1b8:	10c4b03a 	or	r2,r2,r3
  d0b1bc:	1100042e 	bgeu	r2,r4,d0b1d0 <__udivdi3+0x298>
  d0b1c0:	8085883a 	add	r2,r16,r2
  d0b1c4:	a53fffc4 	addi	r20,r20,-1
  d0b1c8:	14000136 	bltu	r2,r16,d0b1d0 <__udivdi3+0x298>
  d0b1cc:	1100c736 	bltu	r2,r4,d0b4ec <__udivdi3+0x5b4>
  d0b1d0:	b004943a 	slli	r2,r22,16
  d0b1d4:	0009883a 	mov	r4,zero
  d0b1d8:	a084b03a 	or	r2,r20,r2
  d0b1dc:	003fb706 	br	d0b0bc <__udivdi3+0x184>
  d0b1e0:	00804034 	movhi	r2,256
  d0b1e4:	10bfffc4 	addi	r2,r2,-1
  d0b1e8:	11c0a436 	bltu	r2,r7,d0b47c <__udivdi3+0x544>
  d0b1ec:	01400404 	movi	r5,16
  d0b1f0:	2805883a 	mov	r2,r5
  d0b1f4:	003fa406 	br	d0b088 <__udivdi3+0x150>
  d0b1f8:	0005883a 	mov	r2,zero
  d0b1fc:	0009883a 	mov	r4,zero
  d0b200:	003fae06 	br	d0b0bc <__udivdi3+0x184>
  d0b204:	00804034 	movhi	r2,256
  d0b208:	10bfffc4 	addi	r2,r2,-1
  d0b20c:	1400a136 	bltu	r2,r16,d0b494 <__udivdi3+0x55c>
  d0b210:	01400404 	movi	r5,16
  d0b214:	2805883a 	mov	r2,r5
  d0b218:	003f6006 	br	d0af9c <__udivdi3+0x64>
  d0b21c:	01000044 	movi	r4,1
  d0b220:	000b883a 	mov	r5,zero
  d0b224:	0d0c5480 	call	d0c548 <__udivsi3>
  d0b228:	1021883a 	mov	r16,r2
  d0b22c:	00bfffd4 	movui	r2,65535
  d0b230:	143ff436 	bltu	r2,r16,d0b204 <__udivdi3+0x2cc>
  d0b234:	003f5506 	br	d0af8c <__udivdi3+0x54>
  d0b238:	00804034 	movhi	r2,256
  d0b23c:	10bfffc4 	addi	r2,r2,-1
  d0b240:	12009a36 	bltu	r2,r8,d0b4ac <__udivdi3+0x574>
  d0b244:	01400404 	movi	r5,16
  d0b248:	2805883a 	mov	r2,r5
  d0b24c:	003fae06 	br	d0b108 <__udivdi3+0x1d0>
  d0b250:	3dc5c83a 	sub	r2,r7,r23
  d0b254:	35c8983a 	sll	r4,r6,r23
  d0b258:	8086d83a 	srl	r3,r16,r2
  d0b25c:	a0a2d83a 	srl	r17,r20,r2
  d0b260:	e084d83a 	srl	r2,fp,r2
  d0b264:	20eab03a 	or	r21,r4,r3
  d0b268:	a82cd43a 	srli	r22,r21,16
  d0b26c:	a5c6983a 	sll	r3,r20,r23
  d0b270:	8809883a 	mov	r4,r17
  d0b274:	b00b883a 	mov	r5,r22
  d0b278:	1886b03a 	or	r3,r3,r2
  d0b27c:	d8c00215 	stw	r3,8(sp)
  d0b280:	0d0c5480 	call	d0c548 <__udivsi3>
  d0b284:	8809883a 	mov	r4,r17
  d0b288:	b00b883a 	mov	r5,r22
  d0b28c:	1029883a 	mov	r20,r2
  d0b290:	0d0c5500 	call	d0c550 <__umodsi3>
  d0b294:	a8ffffcc 	andi	r3,r21,65535
  d0b298:	d8c00515 	stw	r3,20(sp)
  d0b29c:	d9000217 	ldw	r4,8(sp)
  d0b2a0:	d9400517 	ldw	r5,20(sp)
  d0b2a4:	1004943a 	slli	r2,r2,16
  d0b2a8:	2006d43a 	srli	r3,r4,16
  d0b2ac:	85e0983a 	sll	r16,r16,r23
  d0b2b0:	2d23383a 	mul	r17,r5,r20
  d0b2b4:	10c4b03a 	or	r2,r2,r3
  d0b2b8:	dc000015 	stw	r16,0(sp)
  d0b2bc:	1440032e 	bgeu	r2,r17,d0b2cc <__udivdi3+0x394>
  d0b2c0:	1545883a 	add	r2,r2,r21
  d0b2c4:	a53fffc4 	addi	r20,r20,-1
  d0b2c8:	15407f2e 	bgeu	r2,r21,d0b4c8 <__udivdi3+0x590>
  d0b2cc:	1463c83a 	sub	r17,r2,r17
  d0b2d0:	8809883a 	mov	r4,r17
  d0b2d4:	b00b883a 	mov	r5,r22
  d0b2d8:	0d0c5480 	call	d0c548 <__udivsi3>
  d0b2dc:	8809883a 	mov	r4,r17
  d0b2e0:	b00b883a 	mov	r5,r22
  d0b2e4:	1021883a 	mov	r16,r2
  d0b2e8:	0d0c5500 	call	d0c550 <__umodsi3>
  d0b2ec:	d8c00517 	ldw	r3,20(sp)
  d0b2f0:	d9000217 	ldw	r4,8(sp)
  d0b2f4:	1004943a 	slli	r2,r2,16
  d0b2f8:	1c0f383a 	mul	r7,r3,r16
  d0b2fc:	20ffffcc 	andi	r3,r4,65535
  d0b300:	10e2b03a 	or	r17,r2,r3
  d0b304:	89c0032e 	bgeu	r17,r7,d0b314 <__udivdi3+0x3dc>
  d0b308:	8d63883a 	add	r17,r17,r21
  d0b30c:	843fffc4 	addi	r16,r16,-1
  d0b310:	8d40692e 	bgeu	r17,r21,d0b4b8 <__udivdi3+0x580>
  d0b314:	a008943a 	slli	r4,r20,16
  d0b318:	d9400017 	ldw	r5,0(sp)
  d0b31c:	89e3c83a 	sub	r17,r17,r7
  d0b320:	8110b03a 	or	r8,r16,r4
  d0b324:	280cd43a 	srli	r6,r5,16
  d0b328:	28ffffcc 	andi	r3,r5,65535
  d0b32c:	40bfffcc 	andi	r2,r8,65535
  d0b330:	400ad43a 	srli	r5,r8,16
  d0b334:	10d3383a 	mul	r9,r2,r3
  d0b338:	1185383a 	mul	r2,r2,r6
  d0b33c:	28c7383a 	mul	r3,r5,r3
  d0b340:	4808d43a 	srli	r4,r9,16
  d0b344:	298b383a 	mul	r5,r5,r6
  d0b348:	10c5883a 	add	r2,r2,r3
  d0b34c:	2089883a 	add	r4,r4,r2
  d0b350:	20c0022e 	bgeu	r4,r3,d0b35c <__udivdi3+0x424>
  d0b354:	00800074 	movhi	r2,1
  d0b358:	288b883a 	add	r5,r5,r2
  d0b35c:	2004d43a 	srli	r2,r4,16
  d0b360:	288b883a 	add	r5,r5,r2
  d0b364:	89403f36 	bltu	r17,r5,d0b464 <__udivdi3+0x52c>
  d0b368:	89403926 	beq	r17,r5,d0b450 <__udivdi3+0x518>
  d0b36c:	4005883a 	mov	r2,r8
  d0b370:	0009883a 	mov	r4,zero
  d0b374:	003f5106 	br	d0b0bc <__udivdi3+0x184>
  d0b378:	85a0983a 	sll	r16,r16,r22
  d0b37c:	3585c83a 	sub	r2,r6,r22
  d0b380:	a0a2d83a 	srl	r17,r20,r2
  d0b384:	802ad43a 	srli	r21,r16,16
  d0b388:	e084d83a 	srl	r2,fp,r2
  d0b38c:	a586983a 	sll	r3,r20,r22
  d0b390:	8809883a 	mov	r4,r17
  d0b394:	a80b883a 	mov	r5,r21
  d0b398:	1886b03a 	or	r3,r3,r2
  d0b39c:	d8c00115 	stw	r3,4(sp)
  d0b3a0:	0d0c5480 	call	d0c548 <__udivsi3>
  d0b3a4:	8809883a 	mov	r4,r17
  d0b3a8:	a80b883a 	mov	r5,r21
  d0b3ac:	d8800415 	stw	r2,16(sp)
  d0b3b0:	0d0c5500 	call	d0c550 <__umodsi3>
  d0b3b4:	d9000117 	ldw	r4,4(sp)
  d0b3b8:	d9400417 	ldw	r5,16(sp)
  d0b3bc:	1004943a 	slli	r2,r2,16
  d0b3c0:	85ffffcc 	andi	r23,r16,65535
  d0b3c4:	2006d43a 	srli	r3,r4,16
  d0b3c8:	b963383a 	mul	r17,r23,r5
  d0b3cc:	10c4b03a 	or	r2,r2,r3
  d0b3d0:	1440042e 	bgeu	r2,r17,d0b3e4 <__udivdi3+0x4ac>
  d0b3d4:	297fffc4 	addi	r5,r5,-1
  d0b3d8:	1405883a 	add	r2,r2,r16
  d0b3dc:	d9400415 	stw	r5,16(sp)
  d0b3e0:	1400442e 	bgeu	r2,r16,d0b4f4 <__udivdi3+0x5bc>
  d0b3e4:	1463c83a 	sub	r17,r2,r17
  d0b3e8:	8809883a 	mov	r4,r17
  d0b3ec:	a80b883a 	mov	r5,r21
  d0b3f0:	0d0c5480 	call	d0c548 <__udivsi3>
  d0b3f4:	8809883a 	mov	r4,r17
  d0b3f8:	a80b883a 	mov	r5,r21
  d0b3fc:	1029883a 	mov	r20,r2
  d0b400:	0d0c5500 	call	d0c550 <__umodsi3>
  d0b404:	d9400117 	ldw	r5,4(sp)
  d0b408:	1004943a 	slli	r2,r2,16
  d0b40c:	bd09383a 	mul	r4,r23,r20
  d0b410:	28ffffcc 	andi	r3,r5,65535
  d0b414:	10c6b03a 	or	r3,r2,r3
  d0b418:	1900062e 	bgeu	r3,r4,d0b434 <__udivdi3+0x4fc>
  d0b41c:	1c07883a 	add	r3,r3,r16
  d0b420:	a53fffc4 	addi	r20,r20,-1
  d0b424:	1c000336 	bltu	r3,r16,d0b434 <__udivdi3+0x4fc>
  d0b428:	1900022e 	bgeu	r3,r4,d0b434 <__udivdi3+0x4fc>
  d0b42c:	a53fffc4 	addi	r20,r20,-1
  d0b430:	1c07883a 	add	r3,r3,r16
  d0b434:	d9400417 	ldw	r5,16(sp)
  d0b438:	e5b8983a 	sll	fp,fp,r22
  d0b43c:	1923c83a 	sub	r17,r3,r4
  d0b440:	2804943a 	slli	r2,r5,16
  d0b444:	a0a8b03a 	or	r20,r20,r2
  d0b448:	dd000315 	stw	r20,12(sp)
  d0b44c:	003ee106 	br	d0afd4 <__udivdi3+0x9c>
  d0b450:	2004943a 	slli	r2,r4,16
  d0b454:	e5c8983a 	sll	r4,fp,r23
  d0b458:	48ffffcc 	andi	r3,r9,65535
  d0b45c:	10c5883a 	add	r2,r2,r3
  d0b460:	20bfc22e 	bgeu	r4,r2,d0b36c <__udivdi3+0x434>
  d0b464:	40bfffc4 	addi	r2,r8,-1
  d0b468:	0009883a 	mov	r4,zero
  d0b46c:	003f1306 	br	d0b0bc <__udivdi3+0x184>
  d0b470:	01400204 	movi	r5,8
  d0b474:	2805883a 	mov	r2,r5
  d0b478:	003f0306 	br	d0b088 <__udivdi3+0x150>
  d0b47c:	01400604 	movi	r5,24
  d0b480:	2805883a 	mov	r2,r5
  d0b484:	003f0006 	br	d0b088 <__udivdi3+0x150>
  d0b488:	01400204 	movi	r5,8
  d0b48c:	2805883a 	mov	r2,r5
  d0b490:	003ec206 	br	d0af9c <__udivdi3+0x64>
  d0b494:	01400604 	movi	r5,24
  d0b498:	2805883a 	mov	r2,r5
  d0b49c:	003ebf06 	br	d0af9c <__udivdi3+0x64>
  d0b4a0:	01400204 	movi	r5,8
  d0b4a4:	2805883a 	mov	r2,r5
  d0b4a8:	003f1706 	br	d0b108 <__udivdi3+0x1d0>
  d0b4ac:	01400604 	movi	r5,24
  d0b4b0:	2805883a 	mov	r2,r5
  d0b4b4:	003f1406 	br	d0b108 <__udivdi3+0x1d0>
  d0b4b8:	89ff962e 	bgeu	r17,r7,d0b314 <__udivdi3+0x3dc>
  d0b4bc:	8d63883a 	add	r17,r17,r21
  d0b4c0:	843fffc4 	addi	r16,r16,-1
  d0b4c4:	003f9306 	br	d0b314 <__udivdi3+0x3dc>
  d0b4c8:	147f802e 	bgeu	r2,r17,d0b2cc <__udivdi3+0x394>
  d0b4cc:	a53fffc4 	addi	r20,r20,-1
  d0b4d0:	1545883a 	add	r2,r2,r21
  d0b4d4:	003f7d06 	br	d0b2cc <__udivdi3+0x394>
  d0b4d8:	a53fffc4 	addi	r20,r20,-1
  d0b4dc:	003ede06 	br	d0b058 <__udivdi3+0x120>
  d0b4e0:	b5bfffc4 	addi	r22,r22,-1
  d0b4e4:	1405883a 	add	r2,r2,r16
  d0b4e8:	003f2806 	br	d0b18c <__udivdi3+0x254>
  d0b4ec:	a53fffc4 	addi	r20,r20,-1
  d0b4f0:	003f3706 	br	d0b1d0 <__udivdi3+0x298>
  d0b4f4:	147fbb2e 	bgeu	r2,r17,d0b3e4 <__udivdi3+0x4ac>
  d0b4f8:	297fffc4 	addi	r5,r5,-1
  d0b4fc:	1405883a 	add	r2,r2,r16
  d0b500:	d9400415 	stw	r5,16(sp)
  d0b504:	003fb706 	br	d0b3e4 <__udivdi3+0x4ac>
  d0b508:	b5bfffc4 	addi	r22,r22,-1
  d0b50c:	1405883a 	add	r2,r2,r16
  d0b510:	003ec006 	br	d0b014 <__udivdi3+0xdc>

00d0b514 <__umoddi3>:
  d0b514:	defff104 	addi	sp,sp,-60
  d0b518:	dd800b15 	stw	r22,44(sp)
  d0b51c:	dd000915 	stw	r20,36(sp)
  d0b520:	dc000515 	stw	r16,20(sp)
  d0b524:	dfc00e15 	stw	ra,56(sp)
  d0b528:	df000d15 	stw	fp,52(sp)
  d0b52c:	ddc00c15 	stw	r23,48(sp)
  d0b530:	dd400a15 	stw	r21,40(sp)
  d0b534:	dcc00815 	stw	r19,32(sp)
  d0b538:	dc800715 	stw	r18,28(sp)
  d0b53c:	dc400615 	stw	r17,24(sp)
  d0b540:	3021883a 	mov	r16,r6
  d0b544:	202d883a 	mov	r22,r4
  d0b548:	2829883a 	mov	r20,r5
  d0b54c:	38002b1e 	bne	r7,zero,d0b5fc <__umoddi3+0xe8>
  d0b550:	29805036 	bltu	r5,r6,d0b694 <__umoddi3+0x180>
  d0b554:	30008a26 	beq	r6,zero,d0b780 <__umoddi3+0x26c>
  d0b558:	00bfffd4 	movui	r2,65535
  d0b55c:	14008236 	bltu	r2,r16,d0b768 <__umoddi3+0x254>
  d0b560:	00803fc4 	movi	r2,255
  d0b564:	14013636 	bltu	r2,r16,d0ba40 <__umoddi3+0x52c>
  d0b568:	000b883a 	mov	r5,zero
  d0b56c:	0005883a 	mov	r2,zero
  d0b570:	8084d83a 	srl	r2,r16,r2
  d0b574:	01003474 	movhi	r4,209
  d0b578:	21045804 	addi	r4,r4,4448
  d0b57c:	01800804 	movi	r6,32
  d0b580:	1105883a 	add	r2,r2,r4
  d0b584:	10c00003 	ldbu	r3,0(r2)
  d0b588:	28c7883a 	add	r3,r5,r3
  d0b58c:	30efc83a 	sub	r23,r6,r3
  d0b590:	b800941e 	bne	r23,zero,d0b7e4 <__umoddi3+0x2d0>
  d0b594:	802ad43a 	srli	r21,r16,16
  d0b598:	a423c83a 	sub	r17,r20,r16
  d0b59c:	0039883a 	mov	fp,zero
  d0b5a0:	853fffcc 	andi	r20,r16,65535
  d0b5a4:	8809883a 	mov	r4,r17
  d0b5a8:	a80b883a 	mov	r5,r21
  d0b5ac:	0d0c5480 	call	d0c548 <__udivsi3>
  d0b5b0:	8809883a 	mov	r4,r17
  d0b5b4:	a80b883a 	mov	r5,r21
  d0b5b8:	a0a3383a 	mul	r17,r20,r2
  d0b5bc:	0d0c5500 	call	d0c550 <__umodsi3>
  d0b5c0:	1004943a 	slli	r2,r2,16
  d0b5c4:	b006d43a 	srli	r3,r22,16
  d0b5c8:	10c4b03a 	or	r2,r2,r3
  d0b5cc:	1440032e 	bgeu	r2,r17,d0b5dc <__umoddi3+0xc8>
  d0b5d0:	1405883a 	add	r2,r2,r16
  d0b5d4:	14000136 	bltu	r2,r16,d0b5dc <__umoddi3+0xc8>
  d0b5d8:	14413536 	bltu	r2,r17,d0bab0 <__umoddi3+0x59c>
  d0b5dc:	1463c83a 	sub	r17,r2,r17
  d0b5e0:	8809883a 	mov	r4,r17
  d0b5e4:	a80b883a 	mov	r5,r21
  d0b5e8:	0d0c5480 	call	d0c548 <__udivsi3>
  d0b5ec:	8809883a 	mov	r4,r17
  d0b5f0:	a0a3383a 	mul	r17,r20,r2
  d0b5f4:	a80b883a 	mov	r5,r21
  d0b5f8:	00004d06 	br	d0b730 <__umoddi3+0x21c>
  d0b5fc:	380d883a 	mov	r6,r7
  d0b600:	29c0102e 	bgeu	r5,r7,d0b644 <__umoddi3+0x130>
  d0b604:	2011883a 	mov	r8,r4
  d0b608:	2813883a 	mov	r9,r5
  d0b60c:	4005883a 	mov	r2,r8
  d0b610:	4807883a 	mov	r3,r9
  d0b614:	dfc00e17 	ldw	ra,56(sp)
  d0b618:	df000d17 	ldw	fp,52(sp)
  d0b61c:	ddc00c17 	ldw	r23,48(sp)
  d0b620:	dd800b17 	ldw	r22,44(sp)
  d0b624:	dd400a17 	ldw	r21,40(sp)
  d0b628:	dd000917 	ldw	r20,36(sp)
  d0b62c:	dcc00817 	ldw	r19,32(sp)
  d0b630:	dc800717 	ldw	r18,28(sp)
  d0b634:	dc400617 	ldw	r17,24(sp)
  d0b638:	dc000517 	ldw	r16,20(sp)
  d0b63c:	dec00f04 	addi	sp,sp,60
  d0b640:	f800283a 	ret
  d0b644:	00bfffd4 	movui	r2,65535
  d0b648:	11c05a36 	bltu	r2,r7,d0b7b4 <__umoddi3+0x2a0>
  d0b64c:	00803fc4 	movi	r2,255
  d0b650:	11c0fe36 	bltu	r2,r7,d0ba4c <__umoddi3+0x538>
  d0b654:	000b883a 	mov	r5,zero
  d0b658:	0005883a 	mov	r2,zero
  d0b65c:	3084d83a 	srl	r2,r6,r2
  d0b660:	01003474 	movhi	r4,209
  d0b664:	21045804 	addi	r4,r4,4448
  d0b668:	01c00804 	movi	r7,32
  d0b66c:	1105883a 	add	r2,r2,r4
  d0b670:	10c00003 	ldbu	r3,0(r2)
  d0b674:	28c7883a 	add	r3,r5,r3
  d0b678:	38ebc83a 	sub	r21,r7,r3
  d0b67c:	a800851e 	bne	r21,zero,d0b894 <__umoddi3+0x380>
  d0b680:	35005236 	bltu	r6,r20,d0b7cc <__umoddi3+0x2b8>
  d0b684:	b400512e 	bgeu	r22,r16,d0b7cc <__umoddi3+0x2b8>
  d0b688:	b011883a 	mov	r8,r22
  d0b68c:	a013883a 	mov	r9,r20
  d0b690:	003fde06 	br	d0b60c <__umoddi3+0xf8>
  d0b694:	00bfffd4 	movui	r2,65535
  d0b698:	11804036 	bltu	r2,r6,d0b79c <__umoddi3+0x288>
  d0b69c:	00803fc4 	movi	r2,255
  d0b6a0:	1180ed36 	bltu	r2,r6,d0ba58 <__umoddi3+0x544>
  d0b6a4:	000b883a 	mov	r5,zero
  d0b6a8:	0005883a 	mov	r2,zero
  d0b6ac:	8084d83a 	srl	r2,r16,r2
  d0b6b0:	01003474 	movhi	r4,209
  d0b6b4:	21045804 	addi	r4,r4,4448
  d0b6b8:	01800804 	movi	r6,32
  d0b6bc:	1105883a 	add	r2,r2,r4
  d0b6c0:	10c00003 	ldbu	r3,0(r2)
  d0b6c4:	28c7883a 	add	r3,r5,r3
  d0b6c8:	30c7c83a 	sub	r3,r6,r3
  d0b6cc:	1800bf1e 	bne	r3,zero,d0b9cc <__umoddi3+0x4b8>
  d0b6d0:	0039883a 	mov	fp,zero
  d0b6d4:	802ad43a 	srli	r21,r16,16
  d0b6d8:	a009883a 	mov	r4,r20
  d0b6dc:	85ffffcc 	andi	r23,r16,65535
  d0b6e0:	a80b883a 	mov	r5,r21
  d0b6e4:	0d0c5480 	call	d0c548 <__udivsi3>
  d0b6e8:	a009883a 	mov	r4,r20
  d0b6ec:	a80b883a 	mov	r5,r21
  d0b6f0:	b8a3383a 	mul	r17,r23,r2
  d0b6f4:	0d0c5500 	call	d0c550 <__umodsi3>
  d0b6f8:	1004943a 	slli	r2,r2,16
  d0b6fc:	b006d43a 	srli	r3,r22,16
  d0b700:	10c4b03a 	or	r2,r2,r3
  d0b704:	1440032e 	bgeu	r2,r17,d0b714 <__umoddi3+0x200>
  d0b708:	1405883a 	add	r2,r2,r16
  d0b70c:	14000136 	bltu	r2,r16,d0b714 <__umoddi3+0x200>
  d0b710:	1440e536 	bltu	r2,r17,d0baa8 <__umoddi3+0x594>
  d0b714:	1463c83a 	sub	r17,r2,r17
  d0b718:	8809883a 	mov	r4,r17
  d0b71c:	a80b883a 	mov	r5,r21
  d0b720:	0d0c5480 	call	d0c548 <__udivsi3>
  d0b724:	8809883a 	mov	r4,r17
  d0b728:	b8a3383a 	mul	r17,r23,r2
  d0b72c:	a80b883a 	mov	r5,r21
  d0b730:	0d0c5500 	call	d0c550 <__umodsi3>
  d0b734:	1004943a 	slli	r2,r2,16
  d0b738:	b0ffffcc 	andi	r3,r22,65535
  d0b73c:	10c4b03a 	or	r2,r2,r3
  d0b740:	1440042e 	bgeu	r2,r17,d0b754 <__umoddi3+0x240>
  d0b744:	1405883a 	add	r2,r2,r16
  d0b748:	14000236 	bltu	r2,r16,d0b754 <__umoddi3+0x240>
  d0b74c:	1440012e 	bgeu	r2,r17,d0b754 <__umoddi3+0x240>
  d0b750:	1405883a 	add	r2,r2,r16
  d0b754:	1445c83a 	sub	r2,r2,r17
  d0b758:	1724d83a 	srl	r18,r2,fp
  d0b75c:	0013883a 	mov	r9,zero
  d0b760:	9011883a 	mov	r8,r18
  d0b764:	003fa906 	br	d0b60c <__umoddi3+0xf8>
  d0b768:	00804034 	movhi	r2,256
  d0b76c:	10bfffc4 	addi	r2,r2,-1
  d0b770:	1400b036 	bltu	r2,r16,d0ba34 <__umoddi3+0x520>
  d0b774:	01400404 	movi	r5,16
  d0b778:	2805883a 	mov	r2,r5
  d0b77c:	003f7c06 	br	d0b570 <__umoddi3+0x5c>
  d0b780:	01000044 	movi	r4,1
  d0b784:	000b883a 	mov	r5,zero
  d0b788:	0d0c5480 	call	d0c548 <__udivsi3>
  d0b78c:	1021883a 	mov	r16,r2
  d0b790:	00bfffd4 	movui	r2,65535
  d0b794:	143ff436 	bltu	r2,r16,d0b768 <__umoddi3+0x254>
  d0b798:	003f7106 	br	d0b560 <__umoddi3+0x4c>
  d0b79c:	00804034 	movhi	r2,256
  d0b7a0:	10bfffc4 	addi	r2,r2,-1
  d0b7a4:	1180af36 	bltu	r2,r6,d0ba64 <__umoddi3+0x550>
  d0b7a8:	01400404 	movi	r5,16
  d0b7ac:	2805883a 	mov	r2,r5
  d0b7b0:	003fbe06 	br	d0b6ac <__umoddi3+0x198>
  d0b7b4:	00804034 	movhi	r2,256
  d0b7b8:	10bfffc4 	addi	r2,r2,-1
  d0b7bc:	11c0ac36 	bltu	r2,r7,d0ba70 <__umoddi3+0x55c>
  d0b7c0:	01400404 	movi	r5,16
  d0b7c4:	2805883a 	mov	r2,r5
  d0b7c8:	003fa406 	br	d0b65c <__umoddi3+0x148>
  d0b7cc:	b409c83a 	sub	r4,r22,r16
  d0b7d0:	b105803a 	cmpltu	r2,r22,r4
  d0b7d4:	a187c83a 	sub	r3,r20,r6
  d0b7d8:	18a9c83a 	sub	r20,r3,r2
  d0b7dc:	202d883a 	mov	r22,r4
  d0b7e0:	003fa906 	br	d0b688 <__umoddi3+0x174>
  d0b7e4:	85e0983a 	sll	r16,r16,r23
  d0b7e8:	35c5c83a 	sub	r2,r6,r23
  d0b7ec:	a0a2d83a 	srl	r17,r20,r2
  d0b7f0:	802ad43a 	srli	r21,r16,16
  d0b7f4:	b084d83a 	srl	r2,r22,r2
  d0b7f8:	a5c6983a 	sll	r3,r20,r23
  d0b7fc:	8809883a 	mov	r4,r17
  d0b800:	a80b883a 	mov	r5,r21
  d0b804:	1886b03a 	or	r3,r3,r2
  d0b808:	d8c00115 	stw	r3,4(sp)
  d0b80c:	853fffcc 	andi	r20,r16,65535
  d0b810:	0d0c5480 	call	d0c548 <__udivsi3>
  d0b814:	8809883a 	mov	r4,r17
  d0b818:	a80b883a 	mov	r5,r21
  d0b81c:	a0a3383a 	mul	r17,r20,r2
  d0b820:	0d0c5500 	call	d0c550 <__umodsi3>
  d0b824:	d9000117 	ldw	r4,4(sp)
  d0b828:	1004943a 	slli	r2,r2,16
  d0b82c:	b839883a 	mov	fp,r23
  d0b830:	2006d43a 	srli	r3,r4,16
  d0b834:	10c4b03a 	or	r2,r2,r3
  d0b838:	1440022e 	bgeu	r2,r17,d0b844 <__umoddi3+0x330>
  d0b83c:	1405883a 	add	r2,r2,r16
  d0b840:	1400962e 	bgeu	r2,r16,d0ba9c <__umoddi3+0x588>
  d0b844:	1463c83a 	sub	r17,r2,r17
  d0b848:	8809883a 	mov	r4,r17
  d0b84c:	a80b883a 	mov	r5,r21
  d0b850:	0d0c5480 	call	d0c548 <__udivsi3>
  d0b854:	8809883a 	mov	r4,r17
  d0b858:	a80b883a 	mov	r5,r21
  d0b85c:	a0a3383a 	mul	r17,r20,r2
  d0b860:	0d0c5500 	call	d0c550 <__umodsi3>
  d0b864:	d9400117 	ldw	r5,4(sp)
  d0b868:	1004943a 	slli	r2,r2,16
  d0b86c:	28ffffcc 	andi	r3,r5,65535
  d0b870:	10c4b03a 	or	r2,r2,r3
  d0b874:	1440042e 	bgeu	r2,r17,d0b888 <__umoddi3+0x374>
  d0b878:	1405883a 	add	r2,r2,r16
  d0b87c:	14000236 	bltu	r2,r16,d0b888 <__umoddi3+0x374>
  d0b880:	1440012e 	bgeu	r2,r17,d0b888 <__umoddi3+0x374>
  d0b884:	1405883a 	add	r2,r2,r16
  d0b888:	b5ec983a 	sll	r22,r22,r23
  d0b88c:	1463c83a 	sub	r17,r2,r17
  d0b890:	003f4406 	br	d0b5a4 <__umoddi3+0x90>
  d0b894:	3d4fc83a 	sub	r7,r7,r21
  d0b898:	3546983a 	sll	r3,r6,r21
  d0b89c:	81c4d83a 	srl	r2,r16,r7
  d0b8a0:	a1e2d83a 	srl	r17,r20,r7
  d0b8a4:	a54c983a 	sll	r6,r20,r21
  d0b8a8:	18aeb03a 	or	r23,r3,r2
  d0b8ac:	b828d43a 	srli	r20,r23,16
  d0b8b0:	b1c4d83a 	srl	r2,r22,r7
  d0b8b4:	8809883a 	mov	r4,r17
  d0b8b8:	a00b883a 	mov	r5,r20
  d0b8bc:	308cb03a 	or	r6,r6,r2
  d0b8c0:	d9c00315 	stw	r7,12(sp)
  d0b8c4:	d9800215 	stw	r6,8(sp)
  d0b8c8:	0d0c5480 	call	d0c548 <__udivsi3>
  d0b8cc:	8809883a 	mov	r4,r17
  d0b8d0:	a00b883a 	mov	r5,r20
  d0b8d4:	1039883a 	mov	fp,r2
  d0b8d8:	0d0c5500 	call	d0c550 <__umodsi3>
  d0b8dc:	b8ffffcc 	andi	r3,r23,65535
  d0b8e0:	d8c00415 	stw	r3,16(sp)
  d0b8e4:	d9000217 	ldw	r4,8(sp)
  d0b8e8:	d9400417 	ldw	r5,16(sp)
  d0b8ec:	1004943a 	slli	r2,r2,16
  d0b8f0:	2006d43a 	srli	r3,r4,16
  d0b8f4:	8560983a 	sll	r16,r16,r21
  d0b8f8:	2f23383a 	mul	r17,r5,fp
  d0b8fc:	10c4b03a 	or	r2,r2,r3
  d0b900:	dc000015 	stw	r16,0(sp)
  d0b904:	b56c983a 	sll	r22,r22,r21
  d0b908:	1440032e 	bgeu	r2,r17,d0b918 <__umoddi3+0x404>
  d0b90c:	15c5883a 	add	r2,r2,r23
  d0b910:	e73fffc4 	addi	fp,fp,-1
  d0b914:	15c05d2e 	bgeu	r2,r23,d0ba8c <__umoddi3+0x578>
  d0b918:	1463c83a 	sub	r17,r2,r17
  d0b91c:	8809883a 	mov	r4,r17
  d0b920:	a00b883a 	mov	r5,r20
  d0b924:	0d0c5480 	call	d0c548 <__udivsi3>
  d0b928:	8809883a 	mov	r4,r17
  d0b92c:	a00b883a 	mov	r5,r20
  d0b930:	1021883a 	mov	r16,r2
  d0b934:	0d0c5500 	call	d0c550 <__umodsi3>
  d0b938:	d8c00417 	ldw	r3,16(sp)
  d0b93c:	d9000217 	ldw	r4,8(sp)
  d0b940:	1004943a 	slli	r2,r2,16
  d0b944:	1c23383a 	mul	r17,r3,r16
  d0b948:	20ffffcc 	andi	r3,r4,65535
  d0b94c:	10ceb03a 	or	r7,r2,r3
  d0b950:	3c40032e 	bgeu	r7,r17,d0b960 <__umoddi3+0x44c>
  d0b954:	3dcf883a 	add	r7,r7,r23
  d0b958:	843fffc4 	addi	r16,r16,-1
  d0b95c:	3dc0472e 	bgeu	r7,r23,d0ba7c <__umoddi3+0x568>
  d0b960:	e004943a 	slli	r2,fp,16
  d0b964:	d9400017 	ldw	r5,0(sp)
  d0b968:	3c4fc83a 	sub	r7,r7,r17
  d0b96c:	8084b03a 	or	r2,r16,r2
  d0b970:	28ffffcc 	andi	r3,r5,65535
  d0b974:	280cd43a 	srli	r6,r5,16
  d0b978:	100ad43a 	srli	r5,r2,16
  d0b97c:	10bfffcc 	andi	r2,r2,65535
  d0b980:	10d1383a 	mul	r8,r2,r3
  d0b984:	28c7383a 	mul	r3,r5,r3
  d0b988:	1185383a 	mul	r2,r2,r6
  d0b98c:	4008d43a 	srli	r4,r8,16
  d0b990:	298b383a 	mul	r5,r5,r6
  d0b994:	10c5883a 	add	r2,r2,r3
  d0b998:	2089883a 	add	r4,r4,r2
  d0b99c:	20c0022e 	bgeu	r4,r3,d0b9a8 <__umoddi3+0x494>
  d0b9a0:	00800074 	movhi	r2,1
  d0b9a4:	288b883a 	add	r5,r5,r2
  d0b9a8:	2004d43a 	srli	r2,r4,16
  d0b9ac:	2008943a 	slli	r4,r4,16
  d0b9b0:	40ffffcc 	andi	r3,r8,65535
  d0b9b4:	288b883a 	add	r5,r5,r2
  d0b9b8:	20c9883a 	add	r4,r4,r3
  d0b9bc:	39400b36 	bltu	r7,r5,d0b9ec <__umoddi3+0x4d8>
  d0b9c0:	39403d26 	beq	r7,r5,d0bab8 <__umoddi3+0x5a4>
  d0b9c4:	394bc83a 	sub	r5,r7,r5
  d0b9c8:	00000f06 	br	d0ba08 <__umoddi3+0x4f4>
  d0b9cc:	30c5c83a 	sub	r2,r6,r3
  d0b9d0:	1839883a 	mov	fp,r3
  d0b9d4:	b084d83a 	srl	r2,r22,r2
  d0b9d8:	a0c6983a 	sll	r3,r20,r3
  d0b9dc:	8720983a 	sll	r16,r16,fp
  d0b9e0:	b72c983a 	sll	r22,r22,fp
  d0b9e4:	18a8b03a 	or	r20,r3,r2
  d0b9e8:	003f3a06 	br	d0b6d4 <__umoddi3+0x1c0>
  d0b9ec:	d8c00017 	ldw	r3,0(sp)
  d0b9f0:	20c5c83a 	sub	r2,r4,r3
  d0b9f4:	2089803a 	cmpltu	r4,r4,r2
  d0b9f8:	2dc7c83a 	sub	r3,r5,r23
  d0b9fc:	1907c83a 	sub	r3,r3,r4
  d0ba00:	38cbc83a 	sub	r5,r7,r3
  d0ba04:	1009883a 	mov	r4,r2
  d0ba08:	b105c83a 	sub	r2,r22,r4
  d0ba0c:	b087803a 	cmpltu	r3,r22,r2
  d0ba10:	28c7c83a 	sub	r3,r5,r3
  d0ba14:	d9400317 	ldw	r5,12(sp)
  d0ba18:	1544d83a 	srl	r2,r2,r21
  d0ba1c:	1948983a 	sll	r4,r3,r5
  d0ba20:	1d46d83a 	srl	r3,r3,r21
  d0ba24:	20a4b03a 	or	r18,r4,r2
  d0ba28:	9011883a 	mov	r8,r18
  d0ba2c:	1813883a 	mov	r9,r3
  d0ba30:	003ef606 	br	d0b60c <__umoddi3+0xf8>
  d0ba34:	01400604 	movi	r5,24
  d0ba38:	2805883a 	mov	r2,r5
  d0ba3c:	003ecc06 	br	d0b570 <__umoddi3+0x5c>
  d0ba40:	01400204 	movi	r5,8
  d0ba44:	2805883a 	mov	r2,r5
  d0ba48:	003ec906 	br	d0b570 <__umoddi3+0x5c>
  d0ba4c:	01400204 	movi	r5,8
  d0ba50:	2805883a 	mov	r2,r5
  d0ba54:	003f0106 	br	d0b65c <__umoddi3+0x148>
  d0ba58:	01400204 	movi	r5,8
  d0ba5c:	2805883a 	mov	r2,r5
  d0ba60:	003f1206 	br	d0b6ac <__umoddi3+0x198>
  d0ba64:	01400604 	movi	r5,24
  d0ba68:	2805883a 	mov	r2,r5
  d0ba6c:	003f0f06 	br	d0b6ac <__umoddi3+0x198>
  d0ba70:	01400604 	movi	r5,24
  d0ba74:	2805883a 	mov	r2,r5
  d0ba78:	003ef806 	br	d0b65c <__umoddi3+0x148>
  d0ba7c:	3c7fb82e 	bgeu	r7,r17,d0b960 <__umoddi3+0x44c>
  d0ba80:	843fffc4 	addi	r16,r16,-1
  d0ba84:	3dcf883a 	add	r7,r7,r23
  d0ba88:	003fb506 	br	d0b960 <__umoddi3+0x44c>
  d0ba8c:	147fa22e 	bgeu	r2,r17,d0b918 <__umoddi3+0x404>
  d0ba90:	e73fffc4 	addi	fp,fp,-1
  d0ba94:	15c5883a 	add	r2,r2,r23
  d0ba98:	003f9f06 	br	d0b918 <__umoddi3+0x404>
  d0ba9c:	147f692e 	bgeu	r2,r17,d0b844 <__umoddi3+0x330>
  d0baa0:	1405883a 	add	r2,r2,r16
  d0baa4:	003f6706 	br	d0b844 <__umoddi3+0x330>
  d0baa8:	1405883a 	add	r2,r2,r16
  d0baac:	003f1906 	br	d0b714 <__umoddi3+0x200>
  d0bab0:	1405883a 	add	r2,r2,r16
  d0bab4:	003ec906 	br	d0b5dc <__umoddi3+0xc8>
  d0bab8:	b13fcc36 	bltu	r22,r4,d0b9ec <__umoddi3+0x4d8>
  d0babc:	000b883a 	mov	r5,zero
  d0bac0:	003fd106 	br	d0ba08 <__umoddi3+0x4f4>

00d0bac4 <__muldf3>:
  d0bac4:	deffe004 	addi	sp,sp,-128
  d0bac8:	dc401815 	stw	r17,96(sp)
  d0bacc:	dc400404 	addi	r17,sp,16
  d0bad0:	2011883a 	mov	r8,r4
  d0bad4:	2813883a 	mov	r9,r5
  d0bad8:	dc001715 	stw	r16,92(sp)
  d0badc:	d809883a 	mov	r4,sp
  d0bae0:	880b883a 	mov	r5,r17
  d0bae4:	dc000904 	addi	r16,sp,36
  d0bae8:	dfc01f15 	stw	ra,124(sp)
  d0baec:	da400115 	stw	r9,4(sp)
  d0baf0:	d9c00315 	stw	r7,12(sp)
  d0baf4:	da000015 	stw	r8,0(sp)
  d0baf8:	d9800215 	stw	r6,8(sp)
  d0bafc:	ddc01e15 	stw	r23,120(sp)
  d0bb00:	dd801d15 	stw	r22,116(sp)
  d0bb04:	dd401c15 	stw	r21,112(sp)
  d0bb08:	dd001b15 	stw	r20,108(sp)
  d0bb0c:	dcc01a15 	stw	r19,104(sp)
  d0bb10:	dc801915 	stw	r18,100(sp)
  d0bb14:	0d039400 	call	d03940 <__unpack_d>
  d0bb18:	d9000204 	addi	r4,sp,8
  d0bb1c:	800b883a 	mov	r5,r16
  d0bb20:	0d039400 	call	d03940 <__unpack_d>
  d0bb24:	d9000417 	ldw	r4,16(sp)
  d0bb28:	00800044 	movi	r2,1
  d0bb2c:	1100102e 	bgeu	r2,r4,d0bb70 <__muldf3+0xac>
  d0bb30:	d8c00917 	ldw	r3,36(sp)
  d0bb34:	10c0062e 	bgeu	r2,r3,d0bb50 <__muldf3+0x8c>
  d0bb38:	00800104 	movi	r2,4
  d0bb3c:	20800a26 	beq	r4,r2,d0bb68 <__muldf3+0xa4>
  d0bb40:	1880cc26 	beq	r3,r2,d0be74 <__muldf3+0x3b0>
  d0bb44:	00800084 	movi	r2,2
  d0bb48:	20800926 	beq	r4,r2,d0bb70 <__muldf3+0xac>
  d0bb4c:	1880191e 	bne	r3,r2,d0bbb4 <__muldf3+0xf0>
  d0bb50:	d8c00a17 	ldw	r3,40(sp)
  d0bb54:	d8800517 	ldw	r2,20(sp)
  d0bb58:	8009883a 	mov	r4,r16
  d0bb5c:	10c4c03a 	cmpne	r2,r2,r3
  d0bb60:	d8800a15 	stw	r2,40(sp)
  d0bb64:	00000706 	br	d0bb84 <__muldf3+0xc0>
  d0bb68:	00800084 	movi	r2,2
  d0bb6c:	1880c326 	beq	r3,r2,d0be7c <__muldf3+0x3b8>
  d0bb70:	d8800517 	ldw	r2,20(sp)
  d0bb74:	d8c00a17 	ldw	r3,40(sp)
  d0bb78:	8809883a 	mov	r4,r17
  d0bb7c:	10c4c03a 	cmpne	r2,r2,r3
  d0bb80:	d8800515 	stw	r2,20(sp)
  d0bb84:	0d0362c0 	call	d0362c <__pack_d>
  d0bb88:	dfc01f17 	ldw	ra,124(sp)
  d0bb8c:	ddc01e17 	ldw	r23,120(sp)
  d0bb90:	dd801d17 	ldw	r22,116(sp)
  d0bb94:	dd401c17 	ldw	r21,112(sp)
  d0bb98:	dd001b17 	ldw	r20,108(sp)
  d0bb9c:	dcc01a17 	ldw	r19,104(sp)
  d0bba0:	dc801917 	ldw	r18,100(sp)
  d0bba4:	dc401817 	ldw	r17,96(sp)
  d0bba8:	dc001717 	ldw	r16,92(sp)
  d0bbac:	dec02004 	addi	sp,sp,128
  d0bbb0:	f800283a 	ret
  d0bbb4:	dd800717 	ldw	r22,28(sp)
  d0bbb8:	dc800c17 	ldw	r18,48(sp)
  d0bbbc:	002b883a 	mov	r21,zero
  d0bbc0:	0023883a 	mov	r17,zero
  d0bbc4:	a80b883a 	mov	r5,r21
  d0bbc8:	b00d883a 	mov	r6,r22
  d0bbcc:	880f883a 	mov	r7,r17
  d0bbd0:	ddc00817 	ldw	r23,32(sp)
  d0bbd4:	dcc00d17 	ldw	r19,52(sp)
  d0bbd8:	9009883a 	mov	r4,r18
  d0bbdc:	0d0201c0 	call	d0201c <__muldi3>
  d0bbe0:	001b883a 	mov	r13,zero
  d0bbe4:	680f883a 	mov	r7,r13
  d0bbe8:	b009883a 	mov	r4,r22
  d0bbec:	000b883a 	mov	r5,zero
  d0bbf0:	980d883a 	mov	r6,r19
  d0bbf4:	b82d883a 	mov	r22,r23
  d0bbf8:	002f883a 	mov	r23,zero
  d0bbfc:	db401615 	stw	r13,88(sp)
  d0bc00:	d8801315 	stw	r2,76(sp)
  d0bc04:	d8c01415 	stw	r3,80(sp)
  d0bc08:	dcc01515 	stw	r19,84(sp)
  d0bc0c:	0d0201c0 	call	d0201c <__muldi3>
  d0bc10:	b00d883a 	mov	r6,r22
  d0bc14:	000b883a 	mov	r5,zero
  d0bc18:	9009883a 	mov	r4,r18
  d0bc1c:	b80f883a 	mov	r7,r23
  d0bc20:	1021883a 	mov	r16,r2
  d0bc24:	1823883a 	mov	r17,r3
  d0bc28:	0d0201c0 	call	d0201c <__muldi3>
  d0bc2c:	8085883a 	add	r2,r16,r2
  d0bc30:	140d803a 	cmpltu	r6,r2,r16
  d0bc34:	88c7883a 	add	r3,r17,r3
  d0bc38:	30cd883a 	add	r6,r6,r3
  d0bc3c:	1029883a 	mov	r20,r2
  d0bc40:	302b883a 	mov	r21,r6
  d0bc44:	da801317 	ldw	r10,76(sp)
  d0bc48:	dac01417 	ldw	r11,80(sp)
  d0bc4c:	db001517 	ldw	r12,84(sp)
  d0bc50:	db401617 	ldw	r13,88(sp)
  d0bc54:	3440612e 	bgeu	r6,r17,d0bddc <__muldf3+0x318>
  d0bc58:	0009883a 	mov	r4,zero
  d0bc5c:	5105883a 	add	r2,r10,r4
  d0bc60:	128d803a 	cmpltu	r6,r2,r10
  d0bc64:	5d07883a 	add	r3,r11,r20
  d0bc68:	30cd883a 	add	r6,r6,r3
  d0bc6c:	0021883a 	mov	r16,zero
  d0bc70:	04400044 	movi	r17,1
  d0bc74:	1025883a 	mov	r18,r2
  d0bc78:	3027883a 	mov	r19,r6
  d0bc7c:	32c06236 	bltu	r6,r11,d0be08 <__muldf3+0x344>
  d0bc80:	59807a26 	beq	r11,r6,d0be6c <__muldf3+0x3a8>
  d0bc84:	680b883a 	mov	r5,r13
  d0bc88:	b80f883a 	mov	r7,r23
  d0bc8c:	6009883a 	mov	r4,r12
  d0bc90:	b00d883a 	mov	r6,r22
  d0bc94:	0d0201c0 	call	d0201c <__muldi3>
  d0bc98:	1009883a 	mov	r4,r2
  d0bc9c:	000f883a 	mov	r7,zero
  d0bca0:	1545883a 	add	r2,r2,r21
  d0bca4:	1111803a 	cmpltu	r8,r2,r4
  d0bca8:	19c7883a 	add	r3,r3,r7
  d0bcac:	40c7883a 	add	r3,r8,r3
  d0bcb0:	88cb883a 	add	r5,r17,r3
  d0bcb4:	d8c00617 	ldw	r3,24(sp)
  d0bcb8:	8089883a 	add	r4,r16,r2
  d0bcbc:	d8800b17 	ldw	r2,44(sp)
  d0bcc0:	18c00104 	addi	r3,r3,4
  d0bcc4:	240d803a 	cmpltu	r6,r4,r16
  d0bcc8:	10c7883a 	add	r3,r2,r3
  d0bccc:	2013883a 	mov	r9,r4
  d0bcd0:	d8800a17 	ldw	r2,40(sp)
  d0bcd4:	d9000517 	ldw	r4,20(sp)
  d0bcd8:	314d883a 	add	r6,r6,r5
  d0bcdc:	3015883a 	mov	r10,r6
  d0bce0:	2088c03a 	cmpne	r4,r4,r2
  d0bce4:	00880034 	movhi	r2,8192
  d0bce8:	10bfffc4 	addi	r2,r2,-1
  d0bcec:	d9000f15 	stw	r4,60(sp)
  d0bcf0:	d8c01015 	stw	r3,64(sp)
  d0bcf4:	1180162e 	bgeu	r2,r6,d0bd50 <__muldf3+0x28c>
  d0bcf8:	1811883a 	mov	r8,r3
  d0bcfc:	101f883a 	mov	r15,r2
  d0bd00:	980497fa 	slli	r2,r19,31
  d0bd04:	9016d07a 	srli	r11,r18,1
  d0bd08:	500697fa 	slli	r3,r10,31
  d0bd0c:	480cd07a 	srli	r6,r9,1
  d0bd10:	500ed07a 	srli	r7,r10,1
  d0bd14:	12d6b03a 	or	r11,r2,r11
  d0bd18:	00800044 	movi	r2,1
  d0bd1c:	198cb03a 	or	r6,r3,r6
  d0bd20:	4888703a 	and	r4,r9,r2
  d0bd24:	9818d07a 	srli	r12,r19,1
  d0bd28:	001b883a 	mov	r13,zero
  d0bd2c:	03a00034 	movhi	r14,32768
  d0bd30:	3013883a 	mov	r9,r6
  d0bd34:	3815883a 	mov	r10,r7
  d0bd38:	4091883a 	add	r8,r8,r2
  d0bd3c:	20000226 	beq	r4,zero,d0bd48 <__muldf3+0x284>
  d0bd40:	5b64b03a 	or	r18,r11,r13
  d0bd44:	63a6b03a 	or	r19,r12,r14
  d0bd48:	7abfed36 	bltu	r15,r10,d0bd00 <__muldf3+0x23c>
  d0bd4c:	da001015 	stw	r8,64(sp)
  d0bd50:	00840034 	movhi	r2,4096
  d0bd54:	10bfffc4 	addi	r2,r2,-1
  d0bd58:	12801436 	bltu	r2,r10,d0bdac <__muldf3+0x2e8>
  d0bd5c:	da001017 	ldw	r8,64(sp)
  d0bd60:	101f883a 	mov	r15,r2
  d0bd64:	4a45883a 	add	r2,r9,r9
  d0bd68:	124d803a 	cmpltu	r6,r2,r9
  d0bd6c:	5287883a 	add	r3,r10,r10
  d0bd70:	9497883a 	add	r11,r18,r18
  d0bd74:	5c8f803a 	cmpltu	r7,r11,r18
  d0bd78:	9cd9883a 	add	r12,r19,r19
  d0bd7c:	01000044 	movi	r4,1
  d0bd80:	30cd883a 	add	r6,r6,r3
  d0bd84:	3b0f883a 	add	r7,r7,r12
  d0bd88:	423fffc4 	addi	r8,r8,-1
  d0bd8c:	1013883a 	mov	r9,r2
  d0bd90:	3015883a 	mov	r10,r6
  d0bd94:	111ab03a 	or	r13,r2,r4
  d0bd98:	98003016 	blt	r19,zero,d0be5c <__muldf3+0x398>
  d0bd9c:	5825883a 	mov	r18,r11
  d0bda0:	3827883a 	mov	r19,r7
  d0bda4:	7abfef2e 	bgeu	r15,r10,d0bd64 <__muldf3+0x2a0>
  d0bda8:	da001015 	stw	r8,64(sp)
  d0bdac:	00803fc4 	movi	r2,255
  d0bdb0:	488e703a 	and	r7,r9,r2
  d0bdb4:	00802004 	movi	r2,128
  d0bdb8:	0007883a 	mov	r3,zero
  d0bdbc:	0011883a 	mov	r8,zero
  d0bdc0:	38801826 	beq	r7,r2,d0be24 <__muldf3+0x360>
  d0bdc4:	008000c4 	movi	r2,3
  d0bdc8:	d9000e04 	addi	r4,sp,56
  d0bdcc:	da801215 	stw	r10,72(sp)
  d0bdd0:	d8800e15 	stw	r2,56(sp)
  d0bdd4:	da401115 	stw	r9,68(sp)
  d0bdd8:	003f6a06 	br	d0bb84 <__muldf3+0xc0>
  d0bddc:	89802126 	beq	r17,r6,d0be64 <__muldf3+0x3a0>
  d0bde0:	0009883a 	mov	r4,zero
  d0bde4:	5105883a 	add	r2,r10,r4
  d0bde8:	128d803a 	cmpltu	r6,r2,r10
  d0bdec:	5d07883a 	add	r3,r11,r20
  d0bdf0:	30cd883a 	add	r6,r6,r3
  d0bdf4:	0021883a 	mov	r16,zero
  d0bdf8:	0023883a 	mov	r17,zero
  d0bdfc:	1025883a 	mov	r18,r2
  d0be00:	3027883a 	mov	r19,r6
  d0be04:	32ff9e2e 	bgeu	r6,r11,d0bc80 <__muldf3+0x1bc>
  d0be08:	00800044 	movi	r2,1
  d0be0c:	8089883a 	add	r4,r16,r2
  d0be10:	240d803a 	cmpltu	r6,r4,r16
  d0be14:	344d883a 	add	r6,r6,r17
  d0be18:	2021883a 	mov	r16,r4
  d0be1c:	3023883a 	mov	r17,r6
  d0be20:	003f9806 	br	d0bc84 <__muldf3+0x1c0>
  d0be24:	403fe71e 	bne	r8,zero,d0bdc4 <__muldf3+0x300>
  d0be28:	01004004 	movi	r4,256
  d0be2c:	4904703a 	and	r2,r9,r4
  d0be30:	10c4b03a 	or	r2,r2,r3
  d0be34:	103fe31e 	bne	r2,zero,d0bdc4 <__muldf3+0x300>
  d0be38:	94c4b03a 	or	r2,r18,r19
  d0be3c:	103fe126 	beq	r2,zero,d0bdc4 <__muldf3+0x300>
  d0be40:	49c5883a 	add	r2,r9,r7
  d0be44:	1251803a 	cmpltu	r8,r2,r9
  d0be48:	4291883a 	add	r8,r8,r10
  d0be4c:	013fc004 	movi	r4,-256
  d0be50:	1112703a 	and	r9,r2,r4
  d0be54:	4015883a 	mov	r10,r8
  d0be58:	003fda06 	br	d0bdc4 <__muldf3+0x300>
  d0be5c:	6813883a 	mov	r9,r13
  d0be60:	003fce06 	br	d0bd9c <__muldf3+0x2d8>
  d0be64:	143f7c36 	bltu	r2,r16,d0bc58 <__muldf3+0x194>
  d0be68:	003fdd06 	br	d0bde0 <__muldf3+0x31c>
  d0be6c:	12bf852e 	bgeu	r2,r10,d0bc84 <__muldf3+0x1c0>
  d0be70:	003fe506 	br	d0be08 <__muldf3+0x344>
  d0be74:	00800084 	movi	r2,2
  d0be78:	20bf351e 	bne	r4,r2,d0bb50 <__muldf3+0x8c>
  d0be7c:	01003474 	movhi	r4,209
  d0be80:	21045304 	addi	r4,r4,4428
  d0be84:	003f3f06 	br	d0bb84 <__muldf3+0xc0>

00d0be88 <__eqdf2>:
  d0be88:	deffef04 	addi	sp,sp,-68
  d0be8c:	dc400f15 	stw	r17,60(sp)
  d0be90:	dc400404 	addi	r17,sp,16
  d0be94:	2005883a 	mov	r2,r4
  d0be98:	2807883a 	mov	r3,r5
  d0be9c:	dc000e15 	stw	r16,56(sp)
  d0bea0:	d809883a 	mov	r4,sp
  d0bea4:	880b883a 	mov	r5,r17
  d0bea8:	dc000904 	addi	r16,sp,36
  d0beac:	d8c00115 	stw	r3,4(sp)
  d0beb0:	d8800015 	stw	r2,0(sp)
  d0beb4:	d9800215 	stw	r6,8(sp)
  d0beb8:	dfc01015 	stw	ra,64(sp)
  d0bebc:	d9c00315 	stw	r7,12(sp)
  d0bec0:	0d039400 	call	d03940 <__unpack_d>
  d0bec4:	d9000204 	addi	r4,sp,8
  d0bec8:	800b883a 	mov	r5,r16
  d0becc:	0d039400 	call	d03940 <__unpack_d>
  d0bed0:	d8800417 	ldw	r2,16(sp)
  d0bed4:	00c00044 	movi	r3,1
  d0bed8:	180d883a 	mov	r6,r3
  d0bedc:	1880062e 	bgeu	r3,r2,d0bef8 <__eqdf2+0x70>
  d0bee0:	d8800917 	ldw	r2,36(sp)
  d0bee4:	8809883a 	mov	r4,r17
  d0bee8:	800b883a 	mov	r5,r16
  d0beec:	1880022e 	bgeu	r3,r2,d0bef8 <__eqdf2+0x70>
  d0bef0:	0d03a780 	call	d03a78 <__fpcmp_parts_d>
  d0bef4:	100d883a 	mov	r6,r2
  d0bef8:	3005883a 	mov	r2,r6
  d0befc:	dfc01017 	ldw	ra,64(sp)
  d0bf00:	dc400f17 	ldw	r17,60(sp)
  d0bf04:	dc000e17 	ldw	r16,56(sp)
  d0bf08:	dec01104 	addi	sp,sp,68
  d0bf0c:	f800283a 	ret

00d0bf10 <__gtdf2>:
  d0bf10:	deffef04 	addi	sp,sp,-68
  d0bf14:	dc400f15 	stw	r17,60(sp)
  d0bf18:	dc400404 	addi	r17,sp,16
  d0bf1c:	2005883a 	mov	r2,r4
  d0bf20:	2807883a 	mov	r3,r5
  d0bf24:	dc000e15 	stw	r16,56(sp)
  d0bf28:	d809883a 	mov	r4,sp
  d0bf2c:	880b883a 	mov	r5,r17
  d0bf30:	dc000904 	addi	r16,sp,36
  d0bf34:	d8c00115 	stw	r3,4(sp)
  d0bf38:	d8800015 	stw	r2,0(sp)
  d0bf3c:	d9800215 	stw	r6,8(sp)
  d0bf40:	dfc01015 	stw	ra,64(sp)
  d0bf44:	d9c00315 	stw	r7,12(sp)
  d0bf48:	0d039400 	call	d03940 <__unpack_d>
  d0bf4c:	d9000204 	addi	r4,sp,8
  d0bf50:	800b883a 	mov	r5,r16
  d0bf54:	0d039400 	call	d03940 <__unpack_d>
  d0bf58:	d8800417 	ldw	r2,16(sp)
  d0bf5c:	00c00044 	movi	r3,1
  d0bf60:	01bfffc4 	movi	r6,-1
  d0bf64:	1880062e 	bgeu	r3,r2,d0bf80 <__gtdf2+0x70>
  d0bf68:	d8800917 	ldw	r2,36(sp)
  d0bf6c:	8809883a 	mov	r4,r17
  d0bf70:	800b883a 	mov	r5,r16
  d0bf74:	1880022e 	bgeu	r3,r2,d0bf80 <__gtdf2+0x70>
  d0bf78:	0d03a780 	call	d03a78 <__fpcmp_parts_d>
  d0bf7c:	100d883a 	mov	r6,r2
  d0bf80:	3005883a 	mov	r2,r6
  d0bf84:	dfc01017 	ldw	ra,64(sp)
  d0bf88:	dc400f17 	ldw	r17,60(sp)
  d0bf8c:	dc000e17 	ldw	r16,56(sp)
  d0bf90:	dec01104 	addi	sp,sp,68
  d0bf94:	f800283a 	ret

00d0bf98 <__gedf2>:
  d0bf98:	deffef04 	addi	sp,sp,-68
  d0bf9c:	dc400f15 	stw	r17,60(sp)
  d0bfa0:	dc400404 	addi	r17,sp,16
  d0bfa4:	2005883a 	mov	r2,r4
  d0bfa8:	2807883a 	mov	r3,r5
  d0bfac:	dc000e15 	stw	r16,56(sp)
  d0bfb0:	d809883a 	mov	r4,sp
  d0bfb4:	880b883a 	mov	r5,r17
  d0bfb8:	dc000904 	addi	r16,sp,36
  d0bfbc:	d8c00115 	stw	r3,4(sp)
  d0bfc0:	d8800015 	stw	r2,0(sp)
  d0bfc4:	d9800215 	stw	r6,8(sp)
  d0bfc8:	dfc01015 	stw	ra,64(sp)
  d0bfcc:	d9c00315 	stw	r7,12(sp)
  d0bfd0:	0d039400 	call	d03940 <__unpack_d>
  d0bfd4:	d9000204 	addi	r4,sp,8
  d0bfd8:	800b883a 	mov	r5,r16
  d0bfdc:	0d039400 	call	d03940 <__unpack_d>
  d0bfe0:	d8800417 	ldw	r2,16(sp)
  d0bfe4:	00c00044 	movi	r3,1
  d0bfe8:	01bfffc4 	movi	r6,-1
  d0bfec:	1880062e 	bgeu	r3,r2,d0c008 <__gedf2+0x70>
  d0bff0:	d8800917 	ldw	r2,36(sp)
  d0bff4:	8809883a 	mov	r4,r17
  d0bff8:	800b883a 	mov	r5,r16
  d0bffc:	1880022e 	bgeu	r3,r2,d0c008 <__gedf2+0x70>
  d0c000:	0d03a780 	call	d03a78 <__fpcmp_parts_d>
  d0c004:	100d883a 	mov	r6,r2
  d0c008:	3005883a 	mov	r2,r6
  d0c00c:	dfc01017 	ldw	ra,64(sp)
  d0c010:	dc400f17 	ldw	r17,60(sp)
  d0c014:	dc000e17 	ldw	r16,56(sp)
  d0c018:	dec01104 	addi	sp,sp,68
  d0c01c:	f800283a 	ret

00d0c020 <__ltdf2>:
  d0c020:	deffef04 	addi	sp,sp,-68
  d0c024:	dc400f15 	stw	r17,60(sp)
  d0c028:	dc400404 	addi	r17,sp,16
  d0c02c:	2005883a 	mov	r2,r4
  d0c030:	2807883a 	mov	r3,r5
  d0c034:	dc000e15 	stw	r16,56(sp)
  d0c038:	d809883a 	mov	r4,sp
  d0c03c:	880b883a 	mov	r5,r17
  d0c040:	dc000904 	addi	r16,sp,36
  d0c044:	d8c00115 	stw	r3,4(sp)
  d0c048:	d8800015 	stw	r2,0(sp)
  d0c04c:	d9800215 	stw	r6,8(sp)
  d0c050:	dfc01015 	stw	ra,64(sp)
  d0c054:	d9c00315 	stw	r7,12(sp)
  d0c058:	0d039400 	call	d03940 <__unpack_d>
  d0c05c:	d9000204 	addi	r4,sp,8
  d0c060:	800b883a 	mov	r5,r16
  d0c064:	0d039400 	call	d03940 <__unpack_d>
  d0c068:	d8800417 	ldw	r2,16(sp)
  d0c06c:	00c00044 	movi	r3,1
  d0c070:	180d883a 	mov	r6,r3
  d0c074:	1880062e 	bgeu	r3,r2,d0c090 <__ltdf2+0x70>
  d0c078:	d8800917 	ldw	r2,36(sp)
  d0c07c:	8809883a 	mov	r4,r17
  d0c080:	800b883a 	mov	r5,r16
  d0c084:	1880022e 	bgeu	r3,r2,d0c090 <__ltdf2+0x70>
  d0c088:	0d03a780 	call	d03a78 <__fpcmp_parts_d>
  d0c08c:	100d883a 	mov	r6,r2
  d0c090:	3005883a 	mov	r2,r6
  d0c094:	dfc01017 	ldw	ra,64(sp)
  d0c098:	dc400f17 	ldw	r17,60(sp)
  d0c09c:	dc000e17 	ldw	r16,56(sp)
  d0c0a0:	dec01104 	addi	sp,sp,68
  d0c0a4:	f800283a 	ret

00d0c0a8 <__floatsidf>:
  d0c0a8:	2006d7fa 	srli	r3,r4,31
  d0c0ac:	defff604 	addi	sp,sp,-40
  d0c0b0:	008000c4 	movi	r2,3
  d0c0b4:	dfc00915 	stw	ra,36(sp)
  d0c0b8:	dcc00815 	stw	r19,32(sp)
  d0c0bc:	dc800715 	stw	r18,28(sp)
  d0c0c0:	dc400615 	stw	r17,24(sp)
  d0c0c4:	dc000515 	stw	r16,20(sp)
  d0c0c8:	d8800015 	stw	r2,0(sp)
  d0c0cc:	d8c00115 	stw	r3,4(sp)
  d0c0d0:	20000f1e 	bne	r4,zero,d0c110 <__floatsidf+0x68>
  d0c0d4:	00800084 	movi	r2,2
  d0c0d8:	d8800015 	stw	r2,0(sp)
  d0c0dc:	d809883a 	mov	r4,sp
  d0c0e0:	0d0362c0 	call	d0362c <__pack_d>
  d0c0e4:	1009883a 	mov	r4,r2
  d0c0e8:	180b883a 	mov	r5,r3
  d0c0ec:	2005883a 	mov	r2,r4
  d0c0f0:	2807883a 	mov	r3,r5
  d0c0f4:	dfc00917 	ldw	ra,36(sp)
  d0c0f8:	dcc00817 	ldw	r19,32(sp)
  d0c0fc:	dc800717 	ldw	r18,28(sp)
  d0c100:	dc400617 	ldw	r17,24(sp)
  d0c104:	dc000517 	ldw	r16,20(sp)
  d0c108:	dec00a04 	addi	sp,sp,40
  d0c10c:	f800283a 	ret
  d0c110:	00800f04 	movi	r2,60
  d0c114:	1807003a 	cmpeq	r3,r3,zero
  d0c118:	d8800215 	stw	r2,8(sp)
  d0c11c:	18001126 	beq	r3,zero,d0c164 <__floatsidf+0xbc>
  d0c120:	0027883a 	mov	r19,zero
  d0c124:	2025883a 	mov	r18,r4
  d0c128:	d9000315 	stw	r4,12(sp)
  d0c12c:	dcc00415 	stw	r19,16(sp)
  d0c130:	0d032b00 	call	d032b0 <__clzsi2>
  d0c134:	11000744 	addi	r4,r2,29
  d0c138:	013fe80e 	bge	zero,r4,d0c0dc <__floatsidf+0x34>
  d0c13c:	10bfff44 	addi	r2,r2,-3
  d0c140:	10000c16 	blt	r2,zero,d0c174 <__floatsidf+0xcc>
  d0c144:	90a2983a 	sll	r17,r18,r2
  d0c148:	0021883a 	mov	r16,zero
  d0c14c:	d8800217 	ldw	r2,8(sp)
  d0c150:	dc400415 	stw	r17,16(sp)
  d0c154:	dc000315 	stw	r16,12(sp)
  d0c158:	1105c83a 	sub	r2,r2,r4
  d0c15c:	d8800215 	stw	r2,8(sp)
  d0c160:	003fde06 	br	d0c0dc <__floatsidf+0x34>
  d0c164:	00a00034 	movhi	r2,32768
  d0c168:	20800a26 	beq	r4,r2,d0c194 <__floatsidf+0xec>
  d0c16c:	0109c83a 	sub	r4,zero,r4
  d0c170:	003feb06 	br	d0c120 <__floatsidf+0x78>
  d0c174:	9006d07a 	srli	r3,r18,1
  d0c178:	008007c4 	movi	r2,31
  d0c17c:	1105c83a 	sub	r2,r2,r4
  d0c180:	1886d83a 	srl	r3,r3,r2
  d0c184:	9922983a 	sll	r17,r19,r4
  d0c188:	9120983a 	sll	r16,r18,r4
  d0c18c:	1c62b03a 	or	r17,r3,r17
  d0c190:	003fee06 	br	d0c14c <__floatsidf+0xa4>
  d0c194:	0009883a 	mov	r4,zero
  d0c198:	01707834 	movhi	r5,49632
  d0c19c:	003fd306 	br	d0c0ec <__floatsidf+0x44>

00d0c1a0 <__fixdfsi>:
  d0c1a0:	defff804 	addi	sp,sp,-32
  d0c1a4:	2005883a 	mov	r2,r4
  d0c1a8:	2807883a 	mov	r3,r5
  d0c1ac:	d809883a 	mov	r4,sp
  d0c1b0:	d9400204 	addi	r5,sp,8
  d0c1b4:	d8c00115 	stw	r3,4(sp)
  d0c1b8:	d8800015 	stw	r2,0(sp)
  d0c1bc:	dfc00715 	stw	ra,28(sp)
  d0c1c0:	0d039400 	call	d03940 <__unpack_d>
  d0c1c4:	d8c00217 	ldw	r3,8(sp)
  d0c1c8:	00800084 	movi	r2,2
  d0c1cc:	1880051e 	bne	r3,r2,d0c1e4 <__fixdfsi+0x44>
  d0c1d0:	0007883a 	mov	r3,zero
  d0c1d4:	1805883a 	mov	r2,r3
  d0c1d8:	dfc00717 	ldw	ra,28(sp)
  d0c1dc:	dec00804 	addi	sp,sp,32
  d0c1e0:	f800283a 	ret
  d0c1e4:	00800044 	movi	r2,1
  d0c1e8:	10fff92e 	bgeu	r2,r3,d0c1d0 <__fixdfsi+0x30>
  d0c1ec:	00800104 	movi	r2,4
  d0c1f0:	18800426 	beq	r3,r2,d0c204 <__fixdfsi+0x64>
  d0c1f4:	d8c00417 	ldw	r3,16(sp)
  d0c1f8:	183ff516 	blt	r3,zero,d0c1d0 <__fixdfsi+0x30>
  d0c1fc:	00800784 	movi	r2,30
  d0c200:	10c0080e 	bge	r2,r3,d0c224 <__fixdfsi+0x84>
  d0c204:	d8800317 	ldw	r2,12(sp)
  d0c208:	1000121e 	bne	r2,zero,d0c254 <__fixdfsi+0xb4>
  d0c20c:	00e00034 	movhi	r3,32768
  d0c210:	18ffffc4 	addi	r3,r3,-1
  d0c214:	1805883a 	mov	r2,r3
  d0c218:	dfc00717 	ldw	ra,28(sp)
  d0c21c:	dec00804 	addi	sp,sp,32
  d0c220:	f800283a 	ret
  d0c224:	00800f04 	movi	r2,60
  d0c228:	10d1c83a 	sub	r8,r2,r3
  d0c22c:	40bff804 	addi	r2,r8,-32
  d0c230:	d9800517 	ldw	r6,20(sp)
  d0c234:	d9c00617 	ldw	r7,24(sp)
  d0c238:	10000816 	blt	r2,zero,d0c25c <__fixdfsi+0xbc>
  d0c23c:	3888d83a 	srl	r4,r7,r2
  d0c240:	d8800317 	ldw	r2,12(sp)
  d0c244:	2007883a 	mov	r3,r4
  d0c248:	103fe226 	beq	r2,zero,d0c1d4 <__fixdfsi+0x34>
  d0c24c:	0107c83a 	sub	r3,zero,r4
  d0c250:	003fe006 	br	d0c1d4 <__fixdfsi+0x34>
  d0c254:	00e00034 	movhi	r3,32768
  d0c258:	003fde06 	br	d0c1d4 <__fixdfsi+0x34>
  d0c25c:	39c7883a 	add	r3,r7,r7
  d0c260:	008007c4 	movi	r2,31
  d0c264:	1205c83a 	sub	r2,r2,r8
  d0c268:	1886983a 	sll	r3,r3,r2
  d0c26c:	3208d83a 	srl	r4,r6,r8
  d0c270:	1908b03a 	or	r4,r3,r4
  d0c274:	003ff206 	br	d0c240 <__fixdfsi+0xa0>

00d0c278 <__floatunsidf>:
  d0c278:	defff204 	addi	sp,sp,-56
  d0c27c:	dfc00d15 	stw	ra,52(sp)
  d0c280:	ddc00c15 	stw	r23,48(sp)
  d0c284:	dd800b15 	stw	r22,44(sp)
  d0c288:	dd400a15 	stw	r21,40(sp)
  d0c28c:	dd000915 	stw	r20,36(sp)
  d0c290:	dcc00815 	stw	r19,32(sp)
  d0c294:	dc800715 	stw	r18,28(sp)
  d0c298:	dc400615 	stw	r17,24(sp)
  d0c29c:	dc000515 	stw	r16,20(sp)
  d0c2a0:	d8000115 	stw	zero,4(sp)
  d0c2a4:	20000f1e 	bne	r4,zero,d0c2e4 <__floatunsidf+0x6c>
  d0c2a8:	00800084 	movi	r2,2
  d0c2ac:	d8800015 	stw	r2,0(sp)
  d0c2b0:	d809883a 	mov	r4,sp
  d0c2b4:	0d0362c0 	call	d0362c <__pack_d>
  d0c2b8:	dfc00d17 	ldw	ra,52(sp)
  d0c2bc:	ddc00c17 	ldw	r23,48(sp)
  d0c2c0:	dd800b17 	ldw	r22,44(sp)
  d0c2c4:	dd400a17 	ldw	r21,40(sp)
  d0c2c8:	dd000917 	ldw	r20,36(sp)
  d0c2cc:	dcc00817 	ldw	r19,32(sp)
  d0c2d0:	dc800717 	ldw	r18,28(sp)
  d0c2d4:	dc400617 	ldw	r17,24(sp)
  d0c2d8:	dc000517 	ldw	r16,20(sp)
  d0c2dc:	dec00e04 	addi	sp,sp,56
  d0c2e0:	f800283a 	ret
  d0c2e4:	008000c4 	movi	r2,3
  d0c2e8:	00c00f04 	movi	r3,60
  d0c2ec:	002f883a 	mov	r23,zero
  d0c2f0:	202d883a 	mov	r22,r4
  d0c2f4:	d8800015 	stw	r2,0(sp)
  d0c2f8:	d8c00215 	stw	r3,8(sp)
  d0c2fc:	d9000315 	stw	r4,12(sp)
  d0c300:	ddc00415 	stw	r23,16(sp)
  d0c304:	0d032b00 	call	d032b0 <__clzsi2>
  d0c308:	12400744 	addi	r9,r2,29
  d0c30c:	48000b16 	blt	r9,zero,d0c33c <__floatunsidf+0xc4>
  d0c310:	483fe726 	beq	r9,zero,d0c2b0 <__floatunsidf+0x38>
  d0c314:	10bfff44 	addi	r2,r2,-3
  d0c318:	10002e16 	blt	r2,zero,d0c3d4 <__floatunsidf+0x15c>
  d0c31c:	b0a2983a 	sll	r17,r22,r2
  d0c320:	0021883a 	mov	r16,zero
  d0c324:	d8800217 	ldw	r2,8(sp)
  d0c328:	dc400415 	stw	r17,16(sp)
  d0c32c:	dc000315 	stw	r16,12(sp)
  d0c330:	1245c83a 	sub	r2,r2,r9
  d0c334:	d8800215 	stw	r2,8(sp)
  d0c338:	003fdd06 	br	d0c2b0 <__floatunsidf+0x38>
  d0c33c:	0255c83a 	sub	r10,zero,r9
  d0c340:	51bff804 	addi	r6,r10,-32
  d0c344:	30001b16 	blt	r6,zero,d0c3b4 <__floatunsidf+0x13c>
  d0c348:	b9a8d83a 	srl	r20,r23,r6
  d0c34c:	002b883a 	mov	r21,zero
  d0c350:	000f883a 	mov	r7,zero
  d0c354:	01000044 	movi	r4,1
  d0c358:	0011883a 	mov	r8,zero
  d0c35c:	30002516 	blt	r6,zero,d0c3f4 <__floatunsidf+0x17c>
  d0c360:	21a6983a 	sll	r19,r4,r6
  d0c364:	0025883a 	mov	r18,zero
  d0c368:	00bfffc4 	movi	r2,-1
  d0c36c:	9089883a 	add	r4,r18,r2
  d0c370:	988b883a 	add	r5,r19,r2
  d0c374:	248d803a 	cmpltu	r6,r4,r18
  d0c378:	314b883a 	add	r5,r6,r5
  d0c37c:	b104703a 	and	r2,r22,r4
  d0c380:	b946703a 	and	r3,r23,r5
  d0c384:	10c4b03a 	or	r2,r2,r3
  d0c388:	10000226 	beq	r2,zero,d0c394 <__floatunsidf+0x11c>
  d0c38c:	01c00044 	movi	r7,1
  d0c390:	0011883a 	mov	r8,zero
  d0c394:	d9000217 	ldw	r4,8(sp)
  d0c398:	a1c4b03a 	or	r2,r20,r7
  d0c39c:	aa06b03a 	or	r3,r21,r8
  d0c3a0:	2249c83a 	sub	r4,r4,r9
  d0c3a4:	d8c00415 	stw	r3,16(sp)
  d0c3a8:	d9000215 	stw	r4,8(sp)
  d0c3ac:	d8800315 	stw	r2,12(sp)
  d0c3b0:	003fbf06 	br	d0c2b0 <__floatunsidf+0x38>
  d0c3b4:	bdc7883a 	add	r3,r23,r23
  d0c3b8:	008007c4 	movi	r2,31
  d0c3bc:	1285c83a 	sub	r2,r2,r10
  d0c3c0:	1886983a 	sll	r3,r3,r2
  d0c3c4:	b2a8d83a 	srl	r20,r22,r10
  d0c3c8:	baaad83a 	srl	r21,r23,r10
  d0c3cc:	1d28b03a 	or	r20,r3,r20
  d0c3d0:	003fdf06 	br	d0c350 <__floatunsidf+0xd8>
  d0c3d4:	b006d07a 	srli	r3,r22,1
  d0c3d8:	008007c4 	movi	r2,31
  d0c3dc:	1245c83a 	sub	r2,r2,r9
  d0c3e0:	1886d83a 	srl	r3,r3,r2
  d0c3e4:	ba62983a 	sll	r17,r23,r9
  d0c3e8:	b260983a 	sll	r16,r22,r9
  d0c3ec:	1c62b03a 	or	r17,r3,r17
  d0c3f0:	003fcc06 	br	d0c324 <__floatunsidf+0xac>
  d0c3f4:	2006d07a 	srli	r3,r4,1
  d0c3f8:	008007c4 	movi	r2,31
  d0c3fc:	1285c83a 	sub	r2,r2,r10
  d0c400:	18a6d83a 	srl	r19,r3,r2
  d0c404:	22a4983a 	sll	r18,r4,r10
  d0c408:	003fd706 	br	d0c368 <__floatunsidf+0xf0>

00d0c40c <udivmodsi4>:
  d0c40c:	29001b2e 	bgeu	r5,r4,d0c47c <udivmodsi4+0x70>
  d0c410:	28001a16 	blt	r5,zero,d0c47c <udivmodsi4+0x70>
  d0c414:	00800044 	movi	r2,1
  d0c418:	0007883a 	mov	r3,zero
  d0c41c:	01c007c4 	movi	r7,31
  d0c420:	00000306 	br	d0c430 <udivmodsi4+0x24>
  d0c424:	19c01326 	beq	r3,r7,d0c474 <udivmodsi4+0x68>
  d0c428:	18c00044 	addi	r3,r3,1
  d0c42c:	28000416 	blt	r5,zero,d0c440 <udivmodsi4+0x34>
  d0c430:	294b883a 	add	r5,r5,r5
  d0c434:	1085883a 	add	r2,r2,r2
  d0c438:	293ffa36 	bltu	r5,r4,d0c424 <udivmodsi4+0x18>
  d0c43c:	10000d26 	beq	r2,zero,d0c474 <udivmodsi4+0x68>
  d0c440:	0007883a 	mov	r3,zero
  d0c444:	21400236 	bltu	r4,r5,d0c450 <udivmodsi4+0x44>
  d0c448:	2149c83a 	sub	r4,r4,r5
  d0c44c:	1886b03a 	or	r3,r3,r2
  d0c450:	1004d07a 	srli	r2,r2,1
  d0c454:	280ad07a 	srli	r5,r5,1
  d0c458:	103ffa1e 	bne	r2,zero,d0c444 <udivmodsi4+0x38>
  d0c45c:	30000226 	beq	r6,zero,d0c468 <udivmodsi4+0x5c>
  d0c460:	2005883a 	mov	r2,r4
  d0c464:	f800283a 	ret
  d0c468:	1809883a 	mov	r4,r3
  d0c46c:	2005883a 	mov	r2,r4
  d0c470:	f800283a 	ret
  d0c474:	0007883a 	mov	r3,zero
  d0c478:	003ff806 	br	d0c45c <udivmodsi4+0x50>
  d0c47c:	00800044 	movi	r2,1
  d0c480:	0007883a 	mov	r3,zero
  d0c484:	003fef06 	br	d0c444 <udivmodsi4+0x38>

00d0c488 <__divsi3>:
  d0c488:	defffe04 	addi	sp,sp,-8
  d0c48c:	dc000015 	stw	r16,0(sp)
  d0c490:	dfc00115 	stw	ra,4(sp)
  d0c494:	0021883a 	mov	r16,zero
  d0c498:	20000c16 	blt	r4,zero,d0c4cc <__divsi3+0x44>
  d0c49c:	000d883a 	mov	r6,zero
  d0c4a0:	28000e16 	blt	r5,zero,d0c4dc <__divsi3+0x54>
  d0c4a4:	0d0c40c0 	call	d0c40c <udivmodsi4>
  d0c4a8:	1007883a 	mov	r3,r2
  d0c4ac:	8005003a 	cmpeq	r2,r16,zero
  d0c4b0:	1000011e 	bne	r2,zero,d0c4b8 <__divsi3+0x30>
  d0c4b4:	00c7c83a 	sub	r3,zero,r3
  d0c4b8:	1805883a 	mov	r2,r3
  d0c4bc:	dfc00117 	ldw	ra,4(sp)
  d0c4c0:	dc000017 	ldw	r16,0(sp)
  d0c4c4:	dec00204 	addi	sp,sp,8
  d0c4c8:	f800283a 	ret
  d0c4cc:	0109c83a 	sub	r4,zero,r4
  d0c4d0:	04000044 	movi	r16,1
  d0c4d4:	000d883a 	mov	r6,zero
  d0c4d8:	283ff20e 	bge	r5,zero,d0c4a4 <__divsi3+0x1c>
  d0c4dc:	014bc83a 	sub	r5,zero,r5
  d0c4e0:	8021003a 	cmpeq	r16,r16,zero
  d0c4e4:	003fef06 	br	d0c4a4 <__divsi3+0x1c>

00d0c4e8 <__modsi3>:
  d0c4e8:	deffff04 	addi	sp,sp,-4
  d0c4ec:	dfc00015 	stw	ra,0(sp)
  d0c4f0:	01800044 	movi	r6,1
  d0c4f4:	2807883a 	mov	r3,r5
  d0c4f8:	20000416 	blt	r4,zero,d0c50c <__modsi3+0x24>
  d0c4fc:	28000c16 	blt	r5,zero,d0c530 <__modsi3+0x48>
  d0c500:	dfc00017 	ldw	ra,0(sp)
  d0c504:	dec00104 	addi	sp,sp,4
  d0c508:	0d0c40c1 	jmpi	d0c40c <udivmodsi4>
  d0c50c:	0109c83a 	sub	r4,zero,r4
  d0c510:	28000b16 	blt	r5,zero,d0c540 <__modsi3+0x58>
  d0c514:	180b883a 	mov	r5,r3
  d0c518:	01800044 	movi	r6,1
  d0c51c:	0d0c40c0 	call	d0c40c <udivmodsi4>
  d0c520:	0085c83a 	sub	r2,zero,r2
  d0c524:	dfc00017 	ldw	ra,0(sp)
  d0c528:	dec00104 	addi	sp,sp,4
  d0c52c:	f800283a 	ret
  d0c530:	014bc83a 	sub	r5,zero,r5
  d0c534:	dfc00017 	ldw	ra,0(sp)
  d0c538:	dec00104 	addi	sp,sp,4
  d0c53c:	0d0c40c1 	jmpi	d0c40c <udivmodsi4>
  d0c540:	0147c83a 	sub	r3,zero,r5
  d0c544:	003ff306 	br	d0c514 <__modsi3+0x2c>

00d0c548 <__udivsi3>:
  d0c548:	000d883a 	mov	r6,zero
  d0c54c:	0d0c40c1 	jmpi	d0c40c <udivmodsi4>

00d0c550 <__umodsi3>:
  d0c550:	01800044 	movi	r6,1
  d0c554:	0d0c40c1 	jmpi	d0c40c <udivmodsi4>

00d0c558 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  d0c558:	defff804 	addi	sp,sp,-32
  d0c55c:	dfc00715 	stw	ra,28(sp)
  d0c560:	df000615 	stw	fp,24(sp)
  d0c564:	df000604 	addi	fp,sp,24
  d0c568:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  d0c56c:	e0bffc17 	ldw	r2,-16(fp)
  d0c570:	1004803a 	cmplt	r2,r2,zero
  d0c574:	1000081e 	bne	r2,zero,d0c598 <close+0x40>
  d0c578:	e0bffc17 	ldw	r2,-16(fp)
  d0c57c:	10800324 	muli	r2,r2,12
  d0c580:	1007883a 	mov	r3,r2
  d0c584:	00803474 	movhi	r2,209
  d0c588:	10877904 	addi	r2,r2,7652
  d0c58c:	1887883a 	add	r3,r3,r2
  d0c590:	e0ffff15 	stw	r3,-4(fp)
  d0c594:	00000106 	br	d0c59c <close+0x44>
  d0c598:	e03fff15 	stw	zero,-4(fp)
  d0c59c:	e0bfff17 	ldw	r2,-4(fp)
  d0c5a0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  d0c5a4:	e0bffb17 	ldw	r2,-20(fp)
  d0c5a8:	1005003a 	cmpeq	r2,r2,zero
  d0c5ac:	10001d1e 	bne	r2,zero,d0c624 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  d0c5b0:	e0bffb17 	ldw	r2,-20(fp)
  d0c5b4:	10800017 	ldw	r2,0(r2)
  d0c5b8:	10800417 	ldw	r2,16(r2)
  d0c5bc:	1005003a 	cmpeq	r2,r2,zero
  d0c5c0:	1000071e 	bne	r2,zero,d0c5e0 <close+0x88>
  d0c5c4:	e0bffb17 	ldw	r2,-20(fp)
  d0c5c8:	10800017 	ldw	r2,0(r2)
  d0c5cc:	10800417 	ldw	r2,16(r2)
  d0c5d0:	e13ffb17 	ldw	r4,-20(fp)
  d0c5d4:	103ee83a 	callr	r2
  d0c5d8:	e0bffe15 	stw	r2,-8(fp)
  d0c5dc:	00000106 	br	d0c5e4 <close+0x8c>
  d0c5e0:	e03ffe15 	stw	zero,-8(fp)
  d0c5e4:	e0bffe17 	ldw	r2,-8(fp)
  d0c5e8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  d0c5ec:	e13ffc17 	ldw	r4,-16(fp)
  d0c5f0:	0d0cd9c0 	call	d0cd9c <alt_release_fd>
    if (rval < 0)
  d0c5f4:	e0bffa17 	ldw	r2,-24(fp)
  d0c5f8:	1004403a 	cmpge	r2,r2,zero
  d0c5fc:	1000071e 	bne	r2,zero,d0c61c <close+0xc4>
    {
      ALT_ERRNO = -rval;
  d0c600:	0d0c6540 	call	d0c654 <alt_get_errno>
  d0c604:	e0fffa17 	ldw	r3,-24(fp)
  d0c608:	00c7c83a 	sub	r3,zero,r3
  d0c60c:	10c00015 	stw	r3,0(r2)
      return -1;
  d0c610:	00bfffc4 	movi	r2,-1
  d0c614:	e0bffd15 	stw	r2,-12(fp)
  d0c618:	00000806 	br	d0c63c <close+0xe4>
    }
    return 0;
  d0c61c:	e03ffd15 	stw	zero,-12(fp)
  d0c620:	00000606 	br	d0c63c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  d0c624:	0d0c6540 	call	d0c654 <alt_get_errno>
  d0c628:	1007883a 	mov	r3,r2
  d0c62c:	00801444 	movi	r2,81
  d0c630:	18800015 	stw	r2,0(r3)
    return -1;
  d0c634:	00bfffc4 	movi	r2,-1
  d0c638:	e0bffd15 	stw	r2,-12(fp)
  d0c63c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  d0c640:	e037883a 	mov	sp,fp
  d0c644:	dfc00117 	ldw	ra,4(sp)
  d0c648:	df000017 	ldw	fp,0(sp)
  d0c64c:	dec00204 	addi	sp,sp,8
  d0c650:	f800283a 	ret

00d0c654 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0c654:	defffd04 	addi	sp,sp,-12
  d0c658:	dfc00215 	stw	ra,8(sp)
  d0c65c:	df000115 	stw	fp,4(sp)
  d0c660:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0c664:	00803474 	movhi	r2,209
  d0c668:	108c5504 	addi	r2,r2,12628
  d0c66c:	10800017 	ldw	r2,0(r2)
  d0c670:	1005003a 	cmpeq	r2,r2,zero
  d0c674:	1000061e 	bne	r2,zero,d0c690 <alt_get_errno+0x3c>
  d0c678:	00803474 	movhi	r2,209
  d0c67c:	108c5504 	addi	r2,r2,12628
  d0c680:	10800017 	ldw	r2,0(r2)
  d0c684:	103ee83a 	callr	r2
  d0c688:	e0bfff15 	stw	r2,-4(fp)
  d0c68c:	00000306 	br	d0c69c <alt_get_errno+0x48>
  d0c690:	00803474 	movhi	r2,209
  d0c694:	10935b04 	addi	r2,r2,19820
  d0c698:	e0bfff15 	stw	r2,-4(fp)
  d0c69c:	e0bfff17 	ldw	r2,-4(fp)
}
  d0c6a0:	e037883a 	mov	sp,fp
  d0c6a4:	dfc00117 	ldw	ra,4(sp)
  d0c6a8:	df000017 	ldw	fp,0(sp)
  d0c6ac:	dec00204 	addi	sp,sp,8
  d0c6b0:	f800283a 	ret

00d0c6b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  d0c6b4:	defffc04 	addi	sp,sp,-16
  d0c6b8:	df000315 	stw	fp,12(sp)
  d0c6bc:	df000304 	addi	fp,sp,12
  d0c6c0:	e13ffd15 	stw	r4,-12(fp)
  d0c6c4:	e17ffe15 	stw	r5,-8(fp)
  d0c6c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  d0c6cc:	e0bfff17 	ldw	r2,-4(fp)
}
  d0c6d0:	e037883a 	mov	sp,fp
  d0c6d4:	df000017 	ldw	fp,0(sp)
  d0c6d8:	dec00104 	addi	sp,sp,4
  d0c6dc:	f800283a 	ret

00d0c6e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  d0c6e0:	defff904 	addi	sp,sp,-28
  d0c6e4:	dfc00615 	stw	ra,24(sp)
  d0c6e8:	df000515 	stw	fp,20(sp)
  d0c6ec:	df000504 	addi	fp,sp,20
  d0c6f0:	e13ffc15 	stw	r4,-16(fp)
  d0c6f4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  d0c6f8:	e0bffc17 	ldw	r2,-16(fp)
  d0c6fc:	1004803a 	cmplt	r2,r2,zero
  d0c700:	1000081e 	bne	r2,zero,d0c724 <fstat+0x44>
  d0c704:	e0bffc17 	ldw	r2,-16(fp)
  d0c708:	10800324 	muli	r2,r2,12
  d0c70c:	1007883a 	mov	r3,r2
  d0c710:	00803474 	movhi	r2,209
  d0c714:	10877904 	addi	r2,r2,7652
  d0c718:	1887883a 	add	r3,r3,r2
  d0c71c:	e0ffff15 	stw	r3,-4(fp)
  d0c720:	00000106 	br	d0c728 <fstat+0x48>
  d0c724:	e03fff15 	stw	zero,-4(fp)
  d0c728:	e0bfff17 	ldw	r2,-4(fp)
  d0c72c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  d0c730:	e0bffb17 	ldw	r2,-20(fp)
  d0c734:	1005003a 	cmpeq	r2,r2,zero
  d0c738:	1000121e 	bne	r2,zero,d0c784 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  d0c73c:	e0bffb17 	ldw	r2,-20(fp)
  d0c740:	10800017 	ldw	r2,0(r2)
  d0c744:	10800817 	ldw	r2,32(r2)
  d0c748:	1005003a 	cmpeq	r2,r2,zero
  d0c74c:	1000081e 	bne	r2,zero,d0c770 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  d0c750:	e0bffb17 	ldw	r2,-20(fp)
  d0c754:	10800017 	ldw	r2,0(r2)
  d0c758:	10800817 	ldw	r2,32(r2)
  d0c75c:	e13ffb17 	ldw	r4,-20(fp)
  d0c760:	e17ffd17 	ldw	r5,-12(fp)
  d0c764:	103ee83a 	callr	r2
  d0c768:	e0bffe15 	stw	r2,-8(fp)
  d0c76c:	00000b06 	br	d0c79c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  d0c770:	e0fffd17 	ldw	r3,-12(fp)
  d0c774:	00880004 	movi	r2,8192
  d0c778:	18800115 	stw	r2,4(r3)
      return 0;
  d0c77c:	e03ffe15 	stw	zero,-8(fp)
  d0c780:	00000606 	br	d0c79c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  d0c784:	0d0c7b40 	call	d0c7b4 <alt_get_errno>
  d0c788:	1007883a 	mov	r3,r2
  d0c78c:	00801444 	movi	r2,81
  d0c790:	18800015 	stw	r2,0(r3)
    return -1;
  d0c794:	00bfffc4 	movi	r2,-1
  d0c798:	e0bffe15 	stw	r2,-8(fp)
  d0c79c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  d0c7a0:	e037883a 	mov	sp,fp
  d0c7a4:	dfc00117 	ldw	ra,4(sp)
  d0c7a8:	df000017 	ldw	fp,0(sp)
  d0c7ac:	dec00204 	addi	sp,sp,8
  d0c7b0:	f800283a 	ret

00d0c7b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0c7b4:	defffd04 	addi	sp,sp,-12
  d0c7b8:	dfc00215 	stw	ra,8(sp)
  d0c7bc:	df000115 	stw	fp,4(sp)
  d0c7c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0c7c4:	00803474 	movhi	r2,209
  d0c7c8:	108c5504 	addi	r2,r2,12628
  d0c7cc:	10800017 	ldw	r2,0(r2)
  d0c7d0:	1005003a 	cmpeq	r2,r2,zero
  d0c7d4:	1000061e 	bne	r2,zero,d0c7f0 <alt_get_errno+0x3c>
  d0c7d8:	00803474 	movhi	r2,209
  d0c7dc:	108c5504 	addi	r2,r2,12628
  d0c7e0:	10800017 	ldw	r2,0(r2)
  d0c7e4:	103ee83a 	callr	r2
  d0c7e8:	e0bfff15 	stw	r2,-4(fp)
  d0c7ec:	00000306 	br	d0c7fc <alt_get_errno+0x48>
  d0c7f0:	00803474 	movhi	r2,209
  d0c7f4:	10935b04 	addi	r2,r2,19820
  d0c7f8:	e0bfff15 	stw	r2,-4(fp)
  d0c7fc:	e0bfff17 	ldw	r2,-4(fp)
}
  d0c800:	e037883a 	mov	sp,fp
  d0c804:	dfc00117 	ldw	ra,4(sp)
  d0c808:	df000017 	ldw	fp,0(sp)
  d0c80c:	dec00204 	addi	sp,sp,8
  d0c810:	f800283a 	ret

00d0c814 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  d0c814:	deffeb04 	addi	sp,sp,-84
  d0c818:	dfc01415 	stw	ra,80(sp)
  d0c81c:	df001315 	stw	fp,76(sp)
  d0c820:	df001304 	addi	fp,sp,76
  d0c824:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  d0c828:	e0bffd17 	ldw	r2,-12(fp)
  d0c82c:	1004803a 	cmplt	r2,r2,zero
  d0c830:	1000081e 	bne	r2,zero,d0c854 <isatty+0x40>
  d0c834:	e0bffd17 	ldw	r2,-12(fp)
  d0c838:	10800324 	muli	r2,r2,12
  d0c83c:	1007883a 	mov	r3,r2
  d0c840:	00803474 	movhi	r2,209
  d0c844:	10877904 	addi	r2,r2,7652
  d0c848:	1887883a 	add	r3,r3,r2
  d0c84c:	e0ffff15 	stw	r3,-4(fp)
  d0c850:	00000106 	br	d0c858 <isatty+0x44>
  d0c854:	e03fff15 	stw	zero,-4(fp)
  d0c858:	e0bfff17 	ldw	r2,-4(fp)
  d0c85c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  d0c860:	e0bfed17 	ldw	r2,-76(fp)
  d0c864:	1005003a 	cmpeq	r2,r2,zero
  d0c868:	10000f1e 	bne	r2,zero,d0c8a8 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  d0c86c:	e0bfed17 	ldw	r2,-76(fp)
  d0c870:	10800017 	ldw	r2,0(r2)
  d0c874:	10800817 	ldw	r2,32(r2)
  d0c878:	1004c03a 	cmpne	r2,r2,zero
  d0c87c:	1000031e 	bne	r2,zero,d0c88c <isatty+0x78>
    {
      return 1;
  d0c880:	00800044 	movi	r2,1
  d0c884:	e0bffe15 	stw	r2,-8(fp)
  d0c888:	00000c06 	br	d0c8bc <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  d0c88c:	e17fee04 	addi	r5,fp,-72
  d0c890:	e13ffd17 	ldw	r4,-12(fp)
  d0c894:	0d0c6e00 	call	d0c6e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  d0c898:	e0bfef17 	ldw	r2,-68(fp)
  d0c89c:	10880020 	cmpeqi	r2,r2,8192
  d0c8a0:	e0bffe15 	stw	r2,-8(fp)
  d0c8a4:	00000506 	br	d0c8bc <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  d0c8a8:	0d0c8d40 	call	d0c8d4 <alt_get_errno>
  d0c8ac:	1007883a 	mov	r3,r2
  d0c8b0:	00801444 	movi	r2,81
  d0c8b4:	18800015 	stw	r2,0(r3)
    return 0;
  d0c8b8:	e03ffe15 	stw	zero,-8(fp)
  d0c8bc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  d0c8c0:	e037883a 	mov	sp,fp
  d0c8c4:	dfc00117 	ldw	ra,4(sp)
  d0c8c8:	df000017 	ldw	fp,0(sp)
  d0c8cc:	dec00204 	addi	sp,sp,8
  d0c8d0:	f800283a 	ret

00d0c8d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0c8d4:	defffd04 	addi	sp,sp,-12
  d0c8d8:	dfc00215 	stw	ra,8(sp)
  d0c8dc:	df000115 	stw	fp,4(sp)
  d0c8e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0c8e4:	00803474 	movhi	r2,209
  d0c8e8:	108c5504 	addi	r2,r2,12628
  d0c8ec:	10800017 	ldw	r2,0(r2)
  d0c8f0:	1005003a 	cmpeq	r2,r2,zero
  d0c8f4:	1000061e 	bne	r2,zero,d0c910 <alt_get_errno+0x3c>
  d0c8f8:	00803474 	movhi	r2,209
  d0c8fc:	108c5504 	addi	r2,r2,12628
  d0c900:	10800017 	ldw	r2,0(r2)
  d0c904:	103ee83a 	callr	r2
  d0c908:	e0bfff15 	stw	r2,-4(fp)
  d0c90c:	00000306 	br	d0c91c <alt_get_errno+0x48>
  d0c910:	00803474 	movhi	r2,209
  d0c914:	10935b04 	addi	r2,r2,19820
  d0c918:	e0bfff15 	stw	r2,-4(fp)
  d0c91c:	e0bfff17 	ldw	r2,-4(fp)
}
  d0c920:	e037883a 	mov	sp,fp
  d0c924:	dfc00117 	ldw	ra,4(sp)
  d0c928:	df000017 	ldw	fp,0(sp)
  d0c92c:	dec00204 	addi	sp,sp,8
  d0c930:	f800283a 	ret

00d0c934 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  d0c934:	defffe04 	addi	sp,sp,-8
  d0c938:	dfc00115 	stw	ra,4(sp)
  d0c93c:	df000015 	stw	fp,0(sp)
  d0c940:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  d0c944:	01003474 	movhi	r4,209
  d0c948:	210c5e04 	addi	r4,r4,12664
  d0c94c:	01403474 	movhi	r5,209
  d0c950:	29456a04 	addi	r5,r5,5544
  d0c954:	01803474 	movhi	r6,209
  d0c958:	318c5e04 	addi	r6,r6,12664
  d0c95c:	0d0c9b40 	call	d0c9b4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  d0c960:	01003434 	movhi	r4,208
  d0c964:	21000804 	addi	r4,r4,32
  d0c968:	01403434 	movhi	r5,208
  d0c96c:	29400804 	addi	r5,r5,32
  d0c970:	01803434 	movhi	r6,208
  d0c974:	31806d04 	addi	r6,r6,436
  d0c978:	0d0c9b40 	call	d0c9b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  d0c97c:	01003474 	movhi	r4,209
  d0c980:	21042404 	addi	r4,r4,4240
  d0c984:	01403474 	movhi	r5,209
  d0c988:	29442404 	addi	r5,r5,4240
  d0c98c:	01803474 	movhi	r6,209
  d0c990:	31856a04 	addi	r6,r6,5544
  d0c994:	0d0c9b40 	call	d0c9b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  d0c998:	0d0fe3c0 	call	d0fe3c <alt_dcache_flush_all>
  alt_icache_flush_all();
  d0c99c:	0d100f00 	call	d100f0 <alt_icache_flush_all>
}
  d0c9a0:	e037883a 	mov	sp,fp
  d0c9a4:	dfc00117 	ldw	ra,4(sp)
  d0c9a8:	df000017 	ldw	fp,0(sp)
  d0c9ac:	dec00204 	addi	sp,sp,8
  d0c9b0:	f800283a 	ret

00d0c9b4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  d0c9b4:	defffc04 	addi	sp,sp,-16
  d0c9b8:	df000315 	stw	fp,12(sp)
  d0c9bc:	df000304 	addi	fp,sp,12
  d0c9c0:	e13ffd15 	stw	r4,-12(fp)
  d0c9c4:	e17ffe15 	stw	r5,-8(fp)
  d0c9c8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  d0c9cc:	e0fffe17 	ldw	r3,-8(fp)
  d0c9d0:	e0bffd17 	ldw	r2,-12(fp)
  d0c9d4:	18800e26 	beq	r3,r2,d0ca10 <alt_load_section+0x5c>
  {
    while( to != end )
  d0c9d8:	00000a06 	br	d0ca04 <alt_load_section+0x50>
    {
      *to++ = *from++;
  d0c9dc:	e0bffd17 	ldw	r2,-12(fp)
  d0c9e0:	10c00017 	ldw	r3,0(r2)
  d0c9e4:	e0bffe17 	ldw	r2,-8(fp)
  d0c9e8:	10c00015 	stw	r3,0(r2)
  d0c9ec:	e0bffe17 	ldw	r2,-8(fp)
  d0c9f0:	10800104 	addi	r2,r2,4
  d0c9f4:	e0bffe15 	stw	r2,-8(fp)
  d0c9f8:	e0bffd17 	ldw	r2,-12(fp)
  d0c9fc:	10800104 	addi	r2,r2,4
  d0ca00:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  d0ca04:	e0fffe17 	ldw	r3,-8(fp)
  d0ca08:	e0bfff17 	ldw	r2,-4(fp)
  d0ca0c:	18bff31e 	bne	r3,r2,d0c9dc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  d0ca10:	e037883a 	mov	sp,fp
  d0ca14:	df000017 	ldw	fp,0(sp)
  d0ca18:	dec00104 	addi	sp,sp,4
  d0ca1c:	f800283a 	ret

00d0ca20 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  d0ca20:	defff804 	addi	sp,sp,-32
  d0ca24:	dfc00715 	stw	ra,28(sp)
  d0ca28:	df000615 	stw	fp,24(sp)
  d0ca2c:	df000604 	addi	fp,sp,24
  d0ca30:	e13ffc15 	stw	r4,-16(fp)
  d0ca34:	e17ffd15 	stw	r5,-12(fp)
  d0ca38:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  d0ca3c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  d0ca40:	e0bffc17 	ldw	r2,-16(fp)
  d0ca44:	1004803a 	cmplt	r2,r2,zero
  d0ca48:	1000081e 	bne	r2,zero,d0ca6c <lseek+0x4c>
  d0ca4c:	e0bffc17 	ldw	r2,-16(fp)
  d0ca50:	10800324 	muli	r2,r2,12
  d0ca54:	1007883a 	mov	r3,r2
  d0ca58:	00803474 	movhi	r2,209
  d0ca5c:	10877904 	addi	r2,r2,7652
  d0ca60:	1887883a 	add	r3,r3,r2
  d0ca64:	e0ffff15 	stw	r3,-4(fp)
  d0ca68:	00000106 	br	d0ca70 <lseek+0x50>
  d0ca6c:	e03fff15 	stw	zero,-4(fp)
  d0ca70:	e0bfff17 	ldw	r2,-4(fp)
  d0ca74:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  d0ca78:	e0bffb17 	ldw	r2,-20(fp)
  d0ca7c:	1005003a 	cmpeq	r2,r2,zero
  d0ca80:	1000111e 	bne	r2,zero,d0cac8 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  d0ca84:	e0bffb17 	ldw	r2,-20(fp)
  d0ca88:	10800017 	ldw	r2,0(r2)
  d0ca8c:	10800717 	ldw	r2,28(r2)
  d0ca90:	1005003a 	cmpeq	r2,r2,zero
  d0ca94:	1000091e 	bne	r2,zero,d0cabc <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  d0ca98:	e0bffb17 	ldw	r2,-20(fp)
  d0ca9c:	10800017 	ldw	r2,0(r2)
  d0caa0:	10800717 	ldw	r2,28(r2)
  d0caa4:	e13ffb17 	ldw	r4,-20(fp)
  d0caa8:	e17ffd17 	ldw	r5,-12(fp)
  d0caac:	e1bffe17 	ldw	r6,-8(fp)
  d0cab0:	103ee83a 	callr	r2
  d0cab4:	e0bffa15 	stw	r2,-24(fp)
  d0cab8:	00000506 	br	d0cad0 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  d0cabc:	00bfde84 	movi	r2,-134
  d0cac0:	e0bffa15 	stw	r2,-24(fp)
  d0cac4:	00000206 	br	d0cad0 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  d0cac8:	00bfebc4 	movi	r2,-81
  d0cacc:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  d0cad0:	e0bffa17 	ldw	r2,-24(fp)
  d0cad4:	1004403a 	cmpge	r2,r2,zero
  d0cad8:	1000071e 	bne	r2,zero,d0caf8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  d0cadc:	0d0cb100 	call	d0cb10 <alt_get_errno>
  d0cae0:	1007883a 	mov	r3,r2
  d0cae4:	e0bffa17 	ldw	r2,-24(fp)
  d0cae8:	0085c83a 	sub	r2,zero,r2
  d0caec:	18800015 	stw	r2,0(r3)
    rc = -1;
  d0caf0:	00bfffc4 	movi	r2,-1
  d0caf4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  d0caf8:	e0bffa17 	ldw	r2,-24(fp)
}
  d0cafc:	e037883a 	mov	sp,fp
  d0cb00:	dfc00117 	ldw	ra,4(sp)
  d0cb04:	df000017 	ldw	fp,0(sp)
  d0cb08:	dec00204 	addi	sp,sp,8
  d0cb0c:	f800283a 	ret

00d0cb10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0cb10:	defffd04 	addi	sp,sp,-12
  d0cb14:	dfc00215 	stw	ra,8(sp)
  d0cb18:	df000115 	stw	fp,4(sp)
  d0cb1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0cb20:	00803474 	movhi	r2,209
  d0cb24:	108c5504 	addi	r2,r2,12628
  d0cb28:	10800017 	ldw	r2,0(r2)
  d0cb2c:	1005003a 	cmpeq	r2,r2,zero
  d0cb30:	1000061e 	bne	r2,zero,d0cb4c <alt_get_errno+0x3c>
  d0cb34:	00803474 	movhi	r2,209
  d0cb38:	108c5504 	addi	r2,r2,12628
  d0cb3c:	10800017 	ldw	r2,0(r2)
  d0cb40:	103ee83a 	callr	r2
  d0cb44:	e0bfff15 	stw	r2,-4(fp)
  d0cb48:	00000306 	br	d0cb58 <alt_get_errno+0x48>
  d0cb4c:	00803474 	movhi	r2,209
  d0cb50:	10935b04 	addi	r2,r2,19820
  d0cb54:	e0bfff15 	stw	r2,-4(fp)
  d0cb58:	e0bfff17 	ldw	r2,-4(fp)
}
  d0cb5c:	e037883a 	mov	sp,fp
  d0cb60:	dfc00117 	ldw	ra,4(sp)
  d0cb64:	df000017 	ldw	fp,0(sp)
  d0cb68:	dec00204 	addi	sp,sp,8
  d0cb6c:	f800283a 	ret

00d0cb70 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  d0cb70:	defffd04 	addi	sp,sp,-12
  d0cb74:	dfc00215 	stw	ra,8(sp)
  d0cb78:	df000115 	stw	fp,4(sp)
  d0cb7c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  d0cb80:	0009883a 	mov	r4,zero
  d0cb84:	0d0d0380 	call	d0d038 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  d0cb88:	0d0d06c0 	call	d0d06c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  d0cb8c:	01003474 	movhi	r4,209
  d0cb90:	21051804 	addi	r4,r4,5216
  d0cb94:	01403474 	movhi	r5,209
  d0cb98:	29451804 	addi	r5,r5,5216
  d0cb9c:	01803474 	movhi	r6,209
  d0cba0:	31851804 	addi	r6,r6,5216
  d0cba4:	0d104b00 	call	d104b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  d0cba8:	0d0ff940 	call	d0ff94 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  d0cbac:	01003474 	movhi	r4,209
  d0cbb0:	213ffe04 	addi	r4,r4,-8
  d0cbb4:	0d10c180 	call	d10c18 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  d0cbb8:	d1271a17 	ldw	r4,-25496(gp)
  d0cbbc:	d1671b17 	ldw	r5,-25492(gp)
  d0cbc0:	d1a71c17 	ldw	r6,-25488(gp)
  d0cbc4:	0d00afc0 	call	d00afc <main>
  d0cbc8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  d0cbcc:	01000044 	movi	r4,1
  d0cbd0:	0d0c5580 	call	d0c558 <close>
  exit (result);
  d0cbd4:	e13fff17 	ldw	r4,-4(fp)
  d0cbd8:	0d10c2c0 	call	d10c2c <exit>

00d0cbdc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  d0cbdc:	defffe04 	addi	sp,sp,-8
  d0cbe0:	df000115 	stw	fp,4(sp)
  d0cbe4:	df000104 	addi	fp,sp,4
  d0cbe8:	e13fff15 	stw	r4,-4(fp)
}
  d0cbec:	e037883a 	mov	sp,fp
  d0cbf0:	df000017 	ldw	fp,0(sp)
  d0cbf4:	dec00104 	addi	sp,sp,4
  d0cbf8:	f800283a 	ret

00d0cbfc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  d0cbfc:	defffe04 	addi	sp,sp,-8
  d0cc00:	df000115 	stw	fp,4(sp)
  d0cc04:	df000104 	addi	fp,sp,4
  d0cc08:	e13fff15 	stw	r4,-4(fp)
}
  d0cc0c:	e037883a 	mov	sp,fp
  d0cc10:	df000017 	ldw	fp,0(sp)
  d0cc14:	dec00104 	addi	sp,sp,4
  d0cc18:	f800283a 	ret

00d0cc1c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  d0cc1c:	defff704 	addi	sp,sp,-36
  d0cc20:	dfc00815 	stw	ra,32(sp)
  d0cc24:	df000715 	stw	fp,28(sp)
  d0cc28:	df000704 	addi	fp,sp,28
  d0cc2c:	e13ffb15 	stw	r4,-20(fp)
  d0cc30:	e17ffc15 	stw	r5,-16(fp)
  d0cc34:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  d0cc38:	e0bffb17 	ldw	r2,-20(fp)
  d0cc3c:	1004803a 	cmplt	r2,r2,zero
  d0cc40:	1000081e 	bne	r2,zero,d0cc64 <read+0x48>
  d0cc44:	e0bffb17 	ldw	r2,-20(fp)
  d0cc48:	10800324 	muli	r2,r2,12
  d0cc4c:	1007883a 	mov	r3,r2
  d0cc50:	00803474 	movhi	r2,209
  d0cc54:	10877904 	addi	r2,r2,7652
  d0cc58:	1887883a 	add	r3,r3,r2
  d0cc5c:	e0ffff15 	stw	r3,-4(fp)
  d0cc60:	00000106 	br	d0cc68 <read+0x4c>
  d0cc64:	e03fff15 	stw	zero,-4(fp)
  d0cc68:	e0bfff17 	ldw	r2,-4(fp)
  d0cc6c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  d0cc70:	e0bffa17 	ldw	r2,-24(fp)
  d0cc74:	1005003a 	cmpeq	r2,r2,zero
  d0cc78:	1000241e 	bne	r2,zero,d0cd0c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  d0cc7c:	e0bffa17 	ldw	r2,-24(fp)
  d0cc80:	10800217 	ldw	r2,8(r2)
  d0cc84:	108000cc 	andi	r2,r2,3
  d0cc88:	10800060 	cmpeqi	r2,r2,1
  d0cc8c:	10001a1e 	bne	r2,zero,d0ccf8 <read+0xdc>
  d0cc90:	e0bffa17 	ldw	r2,-24(fp)
  d0cc94:	10800017 	ldw	r2,0(r2)
  d0cc98:	10800517 	ldw	r2,20(r2)
  d0cc9c:	1005003a 	cmpeq	r2,r2,zero
  d0cca0:	1000151e 	bne	r2,zero,d0ccf8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  d0cca4:	e0bffa17 	ldw	r2,-24(fp)
  d0cca8:	10800017 	ldw	r2,0(r2)
  d0ccac:	10800517 	ldw	r2,20(r2)
  d0ccb0:	e17ffc17 	ldw	r5,-16(fp)
  d0ccb4:	e1bffd17 	ldw	r6,-12(fp)
  d0ccb8:	e13ffa17 	ldw	r4,-24(fp)
  d0ccbc:	103ee83a 	callr	r2
  d0ccc0:	e0bff915 	stw	r2,-28(fp)
  d0ccc4:	e0bff917 	ldw	r2,-28(fp)
  d0ccc8:	1004403a 	cmpge	r2,r2,zero
  d0cccc:	1000071e 	bne	r2,zero,d0ccec <read+0xd0>
        {
          ALT_ERRNO = -rval;
  d0ccd0:	0d0cd3c0 	call	d0cd3c <alt_get_errno>
  d0ccd4:	e0fff917 	ldw	r3,-28(fp)
  d0ccd8:	00c7c83a 	sub	r3,zero,r3
  d0ccdc:	10c00015 	stw	r3,0(r2)
          return -1;
  d0cce0:	00bfffc4 	movi	r2,-1
  d0cce4:	e0bffe15 	stw	r2,-8(fp)
  d0cce8:	00000e06 	br	d0cd24 <read+0x108>
        }
        return rval;
  d0ccec:	e0bff917 	ldw	r2,-28(fp)
  d0ccf0:	e0bffe15 	stw	r2,-8(fp)
  d0ccf4:	00000b06 	br	d0cd24 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  d0ccf8:	0d0cd3c0 	call	d0cd3c <alt_get_errno>
  d0ccfc:	1007883a 	mov	r3,r2
  d0cd00:	00800344 	movi	r2,13
  d0cd04:	18800015 	stw	r2,0(r3)
  d0cd08:	00000406 	br	d0cd1c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  d0cd0c:	0d0cd3c0 	call	d0cd3c <alt_get_errno>
  d0cd10:	1007883a 	mov	r3,r2
  d0cd14:	00801444 	movi	r2,81
  d0cd18:	18800015 	stw	r2,0(r3)
  }
  return -1;
  d0cd1c:	00bfffc4 	movi	r2,-1
  d0cd20:	e0bffe15 	stw	r2,-8(fp)
  d0cd24:	e0bffe17 	ldw	r2,-8(fp)
}
  d0cd28:	e037883a 	mov	sp,fp
  d0cd2c:	dfc00117 	ldw	ra,4(sp)
  d0cd30:	df000017 	ldw	fp,0(sp)
  d0cd34:	dec00204 	addi	sp,sp,8
  d0cd38:	f800283a 	ret

00d0cd3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0cd3c:	defffd04 	addi	sp,sp,-12
  d0cd40:	dfc00215 	stw	ra,8(sp)
  d0cd44:	df000115 	stw	fp,4(sp)
  d0cd48:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0cd4c:	00803474 	movhi	r2,209
  d0cd50:	108c5504 	addi	r2,r2,12628
  d0cd54:	10800017 	ldw	r2,0(r2)
  d0cd58:	1005003a 	cmpeq	r2,r2,zero
  d0cd5c:	1000061e 	bne	r2,zero,d0cd78 <alt_get_errno+0x3c>
  d0cd60:	00803474 	movhi	r2,209
  d0cd64:	108c5504 	addi	r2,r2,12628
  d0cd68:	10800017 	ldw	r2,0(r2)
  d0cd6c:	103ee83a 	callr	r2
  d0cd70:	e0bfff15 	stw	r2,-4(fp)
  d0cd74:	00000306 	br	d0cd84 <alt_get_errno+0x48>
  d0cd78:	00803474 	movhi	r2,209
  d0cd7c:	10935b04 	addi	r2,r2,19820
  d0cd80:	e0bfff15 	stw	r2,-4(fp)
  d0cd84:	e0bfff17 	ldw	r2,-4(fp)
}
  d0cd88:	e037883a 	mov	sp,fp
  d0cd8c:	dfc00117 	ldw	ra,4(sp)
  d0cd90:	df000017 	ldw	fp,0(sp)
  d0cd94:	dec00204 	addi	sp,sp,8
  d0cd98:	f800283a 	ret

00d0cd9c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  d0cd9c:	defffe04 	addi	sp,sp,-8
  d0cda0:	df000115 	stw	fp,4(sp)
  d0cda4:	df000104 	addi	fp,sp,4
  d0cda8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  d0cdac:	e0bfff17 	ldw	r2,-4(fp)
  d0cdb0:	108000d0 	cmplti	r2,r2,3
  d0cdb4:	10000d1e 	bne	r2,zero,d0cdec <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  d0cdb8:	e0bfff17 	ldw	r2,-4(fp)
  d0cdbc:	00c03474 	movhi	r3,209
  d0cdc0:	18c77904 	addi	r3,r3,7652
  d0cdc4:	10800324 	muli	r2,r2,12
  d0cdc8:	10c5883a 	add	r2,r2,r3
  d0cdcc:	10800204 	addi	r2,r2,8
  d0cdd0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  d0cdd4:	e0bfff17 	ldw	r2,-4(fp)
  d0cdd8:	00c03474 	movhi	r3,209
  d0cddc:	18c77904 	addi	r3,r3,7652
  d0cde0:	10800324 	muli	r2,r2,12
  d0cde4:	10c5883a 	add	r2,r2,r3
  d0cde8:	10000015 	stw	zero,0(r2)
  }
}
  d0cdec:	e037883a 	mov	sp,fp
  d0cdf0:	df000017 	ldw	fp,0(sp)
  d0cdf4:	dec00104 	addi	sp,sp,4
  d0cdf8:	f800283a 	ret

00d0cdfc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  d0cdfc:	defff804 	addi	sp,sp,-32
  d0ce00:	df000715 	stw	fp,28(sp)
  d0ce04:	df000704 	addi	fp,sp,28
  d0ce08:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  d0ce0c:	0005303a 	rdctl	r2,status
  d0ce10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  d0ce14:	e0fffb17 	ldw	r3,-20(fp)
  d0ce18:	00bfff84 	movi	r2,-2
  d0ce1c:	1884703a 	and	r2,r3,r2
  d0ce20:	1001703a 	wrctl	status,r2
  
  return context;
  d0ce24:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  d0ce28:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  d0ce2c:	d0a01417 	ldw	r2,-32688(gp)
  d0ce30:	10c000c4 	addi	r3,r2,3
  d0ce34:	00bfff04 	movi	r2,-4
  d0ce38:	1884703a 	and	r2,r3,r2
  d0ce3c:	d0a01415 	stw	r2,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  d0ce40:	d0e01417 	ldw	r3,-32688(gp)
  d0ce44:	e0bffe17 	ldw	r2,-8(fp)
  d0ce48:	1887883a 	add	r3,r3,r2
  d0ce4c:	00803974 	movhi	r2,229
  d0ce50:	10800004 	addi	r2,r2,0
  d0ce54:	10c0072e 	bgeu	r2,r3,d0ce74 <sbrk+0x78>
  d0ce58:	e0bffd17 	ldw	r2,-12(fp)
  d0ce5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  d0ce60:	e0bffa17 	ldw	r2,-24(fp)
  d0ce64:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  d0ce68:	00bfffc4 	movi	r2,-1
  d0ce6c:	e0bfff15 	stw	r2,-4(fp)
  d0ce70:	00000c06 	br	d0cea4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  d0ce74:	d0a01417 	ldw	r2,-32688(gp)
  d0ce78:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  d0ce7c:	d0e01417 	ldw	r3,-32688(gp)
  d0ce80:	e0bffe17 	ldw	r2,-8(fp)
  d0ce84:	1885883a 	add	r2,r3,r2
  d0ce88:	d0a01415 	stw	r2,-32688(gp)
  d0ce8c:	e0bffd17 	ldw	r2,-12(fp)
  d0ce90:	e0bff915 	stw	r2,-28(fp)
  d0ce94:	e0bff917 	ldw	r2,-28(fp)
  d0ce98:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  d0ce9c:	e0bffc17 	ldw	r2,-16(fp)
  d0cea0:	e0bfff15 	stw	r2,-4(fp)
  d0cea4:	e0bfff17 	ldw	r2,-4(fp)
} 
  d0cea8:	e037883a 	mov	sp,fp
  d0ceac:	df000017 	ldw	fp,0(sp)
  d0ceb0:	dec00104 	addi	sp,sp,4
  d0ceb4:	f800283a 	ret

00d0ceb8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  d0ceb8:	defff704 	addi	sp,sp,-36
  d0cebc:	dfc00815 	stw	ra,32(sp)
  d0cec0:	df000715 	stw	fp,28(sp)
  d0cec4:	df000704 	addi	fp,sp,28
  d0cec8:	e13ffb15 	stw	r4,-20(fp)
  d0cecc:	e17ffc15 	stw	r5,-16(fp)
  d0ced0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  d0ced4:	e0bffb17 	ldw	r2,-20(fp)
  d0ced8:	1004803a 	cmplt	r2,r2,zero
  d0cedc:	1000081e 	bne	r2,zero,d0cf00 <write+0x48>
  d0cee0:	e0bffb17 	ldw	r2,-20(fp)
  d0cee4:	10800324 	muli	r2,r2,12
  d0cee8:	1007883a 	mov	r3,r2
  d0ceec:	00803474 	movhi	r2,209
  d0cef0:	10877904 	addi	r2,r2,7652
  d0cef4:	1887883a 	add	r3,r3,r2
  d0cef8:	e0ffff15 	stw	r3,-4(fp)
  d0cefc:	00000106 	br	d0cf04 <write+0x4c>
  d0cf00:	e03fff15 	stw	zero,-4(fp)
  d0cf04:	e0bfff17 	ldw	r2,-4(fp)
  d0cf08:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  d0cf0c:	e0bffa17 	ldw	r2,-24(fp)
  d0cf10:	1005003a 	cmpeq	r2,r2,zero
  d0cf14:	1000241e 	bne	r2,zero,d0cfa8 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  d0cf18:	e0bffa17 	ldw	r2,-24(fp)
  d0cf1c:	10800217 	ldw	r2,8(r2)
  d0cf20:	108000cc 	andi	r2,r2,3
  d0cf24:	1005003a 	cmpeq	r2,r2,zero
  d0cf28:	10001a1e 	bne	r2,zero,d0cf94 <write+0xdc>
  d0cf2c:	e0bffa17 	ldw	r2,-24(fp)
  d0cf30:	10800017 	ldw	r2,0(r2)
  d0cf34:	10800617 	ldw	r2,24(r2)
  d0cf38:	1005003a 	cmpeq	r2,r2,zero
  d0cf3c:	1000151e 	bne	r2,zero,d0cf94 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  d0cf40:	e0bffa17 	ldw	r2,-24(fp)
  d0cf44:	10800017 	ldw	r2,0(r2)
  d0cf48:	10800617 	ldw	r2,24(r2)
  d0cf4c:	e17ffc17 	ldw	r5,-16(fp)
  d0cf50:	e1bffd17 	ldw	r6,-12(fp)
  d0cf54:	e13ffa17 	ldw	r4,-24(fp)
  d0cf58:	103ee83a 	callr	r2
  d0cf5c:	e0bff915 	stw	r2,-28(fp)
  d0cf60:	e0bff917 	ldw	r2,-28(fp)
  d0cf64:	1004403a 	cmpge	r2,r2,zero
  d0cf68:	1000071e 	bne	r2,zero,d0cf88 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  d0cf6c:	0d0cfd80 	call	d0cfd8 <alt_get_errno>
  d0cf70:	e0fff917 	ldw	r3,-28(fp)
  d0cf74:	00c7c83a 	sub	r3,zero,r3
  d0cf78:	10c00015 	stw	r3,0(r2)
        return -1;
  d0cf7c:	00bfffc4 	movi	r2,-1
  d0cf80:	e0bffe15 	stw	r2,-8(fp)
  d0cf84:	00000e06 	br	d0cfc0 <write+0x108>
      }
      return rval;
  d0cf88:	e0bff917 	ldw	r2,-28(fp)
  d0cf8c:	e0bffe15 	stw	r2,-8(fp)
  d0cf90:	00000b06 	br	d0cfc0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  d0cf94:	0d0cfd80 	call	d0cfd8 <alt_get_errno>
  d0cf98:	1007883a 	mov	r3,r2
  d0cf9c:	00800344 	movi	r2,13
  d0cfa0:	18800015 	stw	r2,0(r3)
  d0cfa4:	00000406 	br	d0cfb8 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  d0cfa8:	0d0cfd80 	call	d0cfd8 <alt_get_errno>
  d0cfac:	1007883a 	mov	r3,r2
  d0cfb0:	00801444 	movi	r2,81
  d0cfb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  d0cfb8:	00bfffc4 	movi	r2,-1
  d0cfbc:	e0bffe15 	stw	r2,-8(fp)
  d0cfc0:	e0bffe17 	ldw	r2,-8(fp)
}
  d0cfc4:	e037883a 	mov	sp,fp
  d0cfc8:	dfc00117 	ldw	ra,4(sp)
  d0cfcc:	df000017 	ldw	fp,0(sp)
  d0cfd0:	dec00204 	addi	sp,sp,8
  d0cfd4:	f800283a 	ret

00d0cfd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0cfd8:	defffd04 	addi	sp,sp,-12
  d0cfdc:	dfc00215 	stw	ra,8(sp)
  d0cfe0:	df000115 	stw	fp,4(sp)
  d0cfe4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0cfe8:	00803474 	movhi	r2,209
  d0cfec:	108c5504 	addi	r2,r2,12628
  d0cff0:	10800017 	ldw	r2,0(r2)
  d0cff4:	1005003a 	cmpeq	r2,r2,zero
  d0cff8:	1000061e 	bne	r2,zero,d0d014 <alt_get_errno+0x3c>
  d0cffc:	00803474 	movhi	r2,209
  d0d000:	108c5504 	addi	r2,r2,12628
  d0d004:	10800017 	ldw	r2,0(r2)
  d0d008:	103ee83a 	callr	r2
  d0d00c:	e0bfff15 	stw	r2,-4(fp)
  d0d010:	00000306 	br	d0d020 <alt_get_errno+0x48>
  d0d014:	00803474 	movhi	r2,209
  d0d018:	10935b04 	addi	r2,r2,19820
  d0d01c:	e0bfff15 	stw	r2,-4(fp)
  d0d020:	e0bfff17 	ldw	r2,-4(fp)
}
  d0d024:	e037883a 	mov	sp,fp
  d0d028:	dfc00117 	ldw	ra,4(sp)
  d0d02c:	df000017 	ldw	fp,0(sp)
  d0d030:	dec00204 	addi	sp,sp,8
  d0d034:	f800283a 	ret

00d0d038 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  d0d038:	defffd04 	addi	sp,sp,-12
  d0d03c:	dfc00215 	stw	ra,8(sp)
  d0d040:	df000115 	stw	fp,4(sp)
  d0d044:	df000104 	addi	fp,sp,4
  d0d048:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_2, cpu_2);
  d0d04c:	0d109900 	call	d10990 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  d0d050:	00800044 	movi	r2,1
  d0d054:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  d0d058:	e037883a 	mov	sp,fp
  d0d05c:	dfc00117 	ldw	ra,4(sp)
  d0d060:	df000017 	ldw	fp,0(sp)
  d0d064:	dec00204 	addi	sp,sp,8
  d0d068:	f800283a 	ret

00d0d06c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  d0d06c:	defffd04 	addi	sp,sp,-12
  d0d070:	dfc00215 	stw	ra,8(sp)
  d0d074:	df000115 	stw	fp,4(sp)
  d0d078:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_2, jtag_uart_2);
  d0d07c:	01003474 	movhi	r4,209
  d0d080:	2107e304 	addi	r4,r4,8076
  d0d084:	000b883a 	mov	r5,zero
  d0d088:	01800044 	movi	r6,1
  d0d08c:	0d0d4640 	call	d0d464 <altera_avalon_jtag_uart_init>
  d0d090:	01003474 	movhi	r4,209
  d0d094:	2107d904 	addi	r4,r4,8036
  d0d098:	0d0d2e40 	call	d0d2e4 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
  d0d09c:	01003474 	movhi	r4,209
  d0d0a0:	210bf104 	addi	r4,r4,12228
  d0d0a4:	0d0ddc80 	call	d0ddc8 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
  d0d0a8:	01003474 	movhi	r4,209
  d0d0ac:	210c0004 	addi	r4,r4,12288
  d0d0b0:	0d0ddc80 	call	d0ddc8 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
  d0d0b4:	01003474 	movhi	r4,209
  d0d0b8:	210c0f04 	addi	r4,r4,12348
  d0d0bc:	0d0ddc80 	call	d0ddc8 <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
  d0d0c0:	01003474 	movhi	r4,209
  d0d0c4:	210c1e04 	addi	r4,r4,12408
  d0d0c8:	0d0ddc80 	call	d0ddc8 <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
  d0d0cc:	0007883a 	mov	r3,zero
  d0d0d0:	00800044 	movi	r2,1
  d0d0d4:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  d0d0d8:	00803474 	movhi	r2,209
  d0d0dc:	108c2d04 	addi	r2,r2,12468
  d0d0e0:	10800a17 	ldw	r2,40(r2)
  d0d0e4:	10800017 	ldw	r2,0(r2)
  d0d0e8:	1007883a 	mov	r3,r2
  d0d0ec:	00803474 	movhi	r2,209
  d0d0f0:	108c2d04 	addi	r2,r2,12468
  d0d0f4:	10c00b15 	stw	r3,44(r2)
  d0d0f8:	00803474 	movhi	r2,209
  d0d0fc:	108c2d04 	addi	r2,r2,12468
  d0d100:	10800a17 	ldw	r2,40(r2)
  d0d104:	10800104 	addi	r2,r2,4
  d0d108:	10800017 	ldw	r2,0(r2)
  d0d10c:	1007883a 	mov	r3,r2
  d0d110:	00803474 	movhi	r2,209
  d0d114:	108c2d04 	addi	r2,r2,12468
  d0d118:	10c00c15 	stw	r3,48(r2)
  d0d11c:	00803474 	movhi	r2,209
  d0d120:	108c2d04 	addi	r2,r2,12468
  d0d124:	10800a17 	ldw	r2,40(r2)
  d0d128:	10800204 	addi	r2,r2,8
  d0d12c:	10800017 	ldw	r2,0(r2)
  d0d130:	10ffffcc 	andi	r3,r2,65535
  d0d134:	00803474 	movhi	r2,209
  d0d138:	108c2d04 	addi	r2,r2,12468
  d0d13c:	10c00f15 	stw	r3,60(r2)
  d0d140:	00803474 	movhi	r2,209
  d0d144:	108c2d04 	addi	r2,r2,12468
  d0d148:	10800a17 	ldw	r2,40(r2)
  d0d14c:	10800204 	addi	r2,r2,8
  d0d150:	10800017 	ldw	r2,0(r2)
  d0d154:	1005d43a 	srai	r2,r2,16
  d0d158:	10ffffcc 	andi	r3,r2,65535
  d0d15c:	00803474 	movhi	r2,209
  d0d160:	108c2d04 	addi	r2,r2,12468
  d0d164:	10c01015 	stw	r3,64(r2)
  d0d168:	00803474 	movhi	r2,209
  d0d16c:	108c2d04 	addi	r2,r2,12468
  d0d170:	10800a17 	ldw	r2,40(r2)
  d0d174:	10800304 	addi	r2,r2,12
  d0d178:	10800017 	ldw	r2,0(r2)
  d0d17c:	1005d07a 	srai	r2,r2,1
  d0d180:	10c0004c 	andi	r3,r2,1
  d0d184:	00803474 	movhi	r2,209
  d0d188:	108c2d04 	addi	r2,r2,12468
  d0d18c:	10c00d15 	stw	r3,52(r2)
  d0d190:	00803474 	movhi	r2,209
  d0d194:	108c2d04 	addi	r2,r2,12468
  d0d198:	10800a17 	ldw	r2,40(r2)
  d0d19c:	10800304 	addi	r2,r2,12
  d0d1a0:	10800017 	ldw	r2,0(r2)
  d0d1a4:	1005d13a 	srai	r2,r2,4
  d0d1a8:	10c003cc 	andi	r3,r2,15
  d0d1ac:	00803474 	movhi	r2,209
  d0d1b0:	108c2d04 	addi	r2,r2,12468
  d0d1b4:	10c00e15 	stw	r3,56(r2)
  d0d1b8:	00803474 	movhi	r2,209
  d0d1bc:	108c2d04 	addi	r2,r2,12468
  d0d1c0:	10800a17 	ldw	r2,40(r2)
  d0d1c4:	10800304 	addi	r2,r2,12
  d0d1c8:	10800017 	ldw	r2,0(r2)
  d0d1cc:	1005d43a 	srai	r2,r2,16
  d0d1d0:	1007883a 	mov	r3,r2
  d0d1d4:	00bfffc4 	movi	r2,-1
  d0d1d8:	1884703a 	and	r2,r3,r2
  d0d1dc:	e0bfff45 	stb	r2,-3(fp)
  d0d1e0:	00803474 	movhi	r2,209
  d0d1e4:	108c2d04 	addi	r2,r2,12468
  d0d1e8:	10800a17 	ldw	r2,40(r2)
  d0d1ec:	10800304 	addi	r2,r2,12
  d0d1f0:	10800017 	ldw	r2,0(r2)
  d0d1f4:	1005d63a 	srai	r2,r2,24
  d0d1f8:	1007883a 	mov	r3,r2
  d0d1fc:	00bfffc4 	movi	r2,-1
  d0d200:	1884703a 	and	r2,r3,r2
  d0d204:	e0bfff05 	stb	r2,-4(fp)
  d0d208:	00803474 	movhi	r2,209
  d0d20c:	108c2d04 	addi	r2,r2,12468
  d0d210:	10800e17 	ldw	r2,56(r2)
  d0d214:	10800058 	cmpnei	r2,r2,1
  d0d218:	1000041e 	bne	r2,zero,d0d22c <alt_sys_init+0x1c0>
  d0d21c:	00803474 	movhi	r2,209
  d0d220:	108c2d04 	addi	r2,r2,12468
  d0d224:	10001115 	stw	zero,68(r2)
  d0d228:	00000e06 	br	d0d264 <alt_sys_init+0x1f8>
  d0d22c:	00803474 	movhi	r2,209
  d0d230:	108c2d04 	addi	r2,r2,12468
  d0d234:	10800e17 	ldw	r2,56(r2)
  d0d238:	10800098 	cmpnei	r2,r2,2
  d0d23c:	1000051e 	bne	r2,zero,d0d254 <alt_sys_init+0x1e8>
  d0d240:	00c03474 	movhi	r3,209
  d0d244:	18cc2d04 	addi	r3,r3,12468
  d0d248:	00800044 	movi	r2,1
  d0d24c:	18801115 	stw	r2,68(r3)
  d0d250:	00000406 	br	d0d264 <alt_sys_init+0x1f8>
  d0d254:	00c03474 	movhi	r3,209
  d0d258:	18cc2d04 	addi	r3,r3,12468
  d0d25c:	00800084 	movi	r2,2
  d0d260:	18801115 	stw	r2,68(r3)
  d0d264:	e0ffff43 	ldbu	r3,-3(fp)
  d0d268:	00800804 	movi	r2,32
  d0d26c:	10c7c83a 	sub	r3,r2,r3
  d0d270:	00bfffc4 	movi	r2,-1
  d0d274:	10c6d83a 	srl	r3,r2,r3
  d0d278:	00803474 	movhi	r2,209
  d0d27c:	108c2d04 	addi	r2,r2,12468
  d0d280:	10c01215 	stw	r3,72(r2)
  d0d284:	e0ffff43 	ldbu	r3,-3(fp)
  d0d288:	00803474 	movhi	r2,209
  d0d28c:	108c2d04 	addi	r2,r2,12468
  d0d290:	10801117 	ldw	r2,68(r2)
  d0d294:	1887883a 	add	r3,r3,r2
  d0d298:	00803474 	movhi	r2,209
  d0d29c:	108c2d04 	addi	r2,r2,12468
  d0d2a0:	10c01315 	stw	r3,76(r2)
  d0d2a4:	e0ffff03 	ldbu	r3,-4(fp)
  d0d2a8:	00800804 	movi	r2,32
  d0d2ac:	10c7c83a 	sub	r3,r2,r3
  d0d2b0:	00bfffc4 	movi	r2,-1
  d0d2b4:	10c6d83a 	srl	r3,r2,r3
  d0d2b8:	00803474 	movhi	r2,209
  d0d2bc:	108c2d04 	addi	r2,r2,12468
  d0d2c0:	10c01415 	stw	r3,80(r2)
  d0d2c4:	01003474 	movhi	r4,209
  d0d2c8:	210c2d04 	addi	r4,r4,12468
  d0d2cc:	0d0d2e40 	call	d0d2e4 <alt_dev_reg>
}
  d0d2d0:	e037883a 	mov	sp,fp
  d0d2d4:	dfc00117 	ldw	ra,4(sp)
  d0d2d8:	df000017 	ldw	fp,0(sp)
  d0d2dc:	dec00204 	addi	sp,sp,8
  d0d2e0:	f800283a 	ret

00d0d2e4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  d0d2e4:	defffd04 	addi	sp,sp,-12
  d0d2e8:	dfc00215 	stw	ra,8(sp)
  d0d2ec:	df000115 	stw	fp,4(sp)
  d0d2f0:	df000104 	addi	fp,sp,4
  d0d2f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  d0d2f8:	e13fff17 	ldw	r4,-4(fp)
  d0d2fc:	01403474 	movhi	r5,209
  d0d300:	294c5204 	addi	r5,r5,12616
  d0d304:	0d0fe800 	call	d0fe80 <alt_dev_llist_insert>
}
  d0d308:	e037883a 	mov	sp,fp
  d0d30c:	dfc00117 	ldw	ra,4(sp)
  d0d310:	df000017 	ldw	fp,0(sp)
  d0d314:	dec00204 	addi	sp,sp,8
  d0d318:	f800283a 	ret

00d0d31c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  d0d31c:	defffa04 	addi	sp,sp,-24
  d0d320:	dfc00515 	stw	ra,20(sp)
  d0d324:	df000415 	stw	fp,16(sp)
  d0d328:	df000404 	addi	fp,sp,16
  d0d32c:	e13ffd15 	stw	r4,-12(fp)
  d0d330:	e17ffe15 	stw	r5,-8(fp)
  d0d334:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  d0d338:	e0bffd17 	ldw	r2,-12(fp)
  d0d33c:	10800017 	ldw	r2,0(r2)
  d0d340:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  d0d344:	e0bffc17 	ldw	r2,-16(fp)
  d0d348:	11000a04 	addi	r4,r2,40
  d0d34c:	e0bffd17 	ldw	r2,-12(fp)
  d0d350:	11c00217 	ldw	r7,8(r2)
  d0d354:	e17ffe17 	ldw	r5,-8(fp)
  d0d358:	e1bfff17 	ldw	r6,-4(fp)
  d0d35c:	0d0d9640 	call	d0d964 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  d0d360:	e037883a 	mov	sp,fp
  d0d364:	dfc00117 	ldw	ra,4(sp)
  d0d368:	df000017 	ldw	fp,0(sp)
  d0d36c:	dec00204 	addi	sp,sp,8
  d0d370:	f800283a 	ret

00d0d374 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  d0d374:	defffa04 	addi	sp,sp,-24
  d0d378:	dfc00515 	stw	ra,20(sp)
  d0d37c:	df000415 	stw	fp,16(sp)
  d0d380:	df000404 	addi	fp,sp,16
  d0d384:	e13ffd15 	stw	r4,-12(fp)
  d0d388:	e17ffe15 	stw	r5,-8(fp)
  d0d38c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  d0d390:	e0bffd17 	ldw	r2,-12(fp)
  d0d394:	10800017 	ldw	r2,0(r2)
  d0d398:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  d0d39c:	e0bffc17 	ldw	r2,-16(fp)
  d0d3a0:	11000a04 	addi	r4,r2,40
  d0d3a4:	e0bffd17 	ldw	r2,-12(fp)
  d0d3a8:	11c00217 	ldw	r7,8(r2)
  d0d3ac:	e17ffe17 	ldw	r5,-8(fp)
  d0d3b0:	e1bfff17 	ldw	r6,-4(fp)
  d0d3b4:	0d0db880 	call	d0db88 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  d0d3b8:	e037883a 	mov	sp,fp
  d0d3bc:	dfc00117 	ldw	ra,4(sp)
  d0d3c0:	df000017 	ldw	fp,0(sp)
  d0d3c4:	dec00204 	addi	sp,sp,8
  d0d3c8:	f800283a 	ret

00d0d3cc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  d0d3cc:	defffc04 	addi	sp,sp,-16
  d0d3d0:	dfc00315 	stw	ra,12(sp)
  d0d3d4:	df000215 	stw	fp,8(sp)
  d0d3d8:	df000204 	addi	fp,sp,8
  d0d3dc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  d0d3e0:	e0bfff17 	ldw	r2,-4(fp)
  d0d3e4:	10800017 	ldw	r2,0(r2)
  d0d3e8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  d0d3ec:	e0bffe17 	ldw	r2,-8(fp)
  d0d3f0:	11000a04 	addi	r4,r2,40
  d0d3f4:	e0bfff17 	ldw	r2,-4(fp)
  d0d3f8:	11400217 	ldw	r5,8(r2)
  d0d3fc:	0d0d7fc0 	call	d0d7fc <altera_avalon_jtag_uart_close>
}
  d0d400:	e037883a 	mov	sp,fp
  d0d404:	dfc00117 	ldw	ra,4(sp)
  d0d408:	df000017 	ldw	fp,0(sp)
  d0d40c:	dec00204 	addi	sp,sp,8
  d0d410:	f800283a 	ret

00d0d414 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  d0d414:	defffa04 	addi	sp,sp,-24
  d0d418:	dfc00515 	stw	ra,20(sp)
  d0d41c:	df000415 	stw	fp,16(sp)
  d0d420:	df000404 	addi	fp,sp,16
  d0d424:	e13ffd15 	stw	r4,-12(fp)
  d0d428:	e17ffe15 	stw	r5,-8(fp)
  d0d42c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  d0d430:	e0bffd17 	ldw	r2,-12(fp)
  d0d434:	10800017 	ldw	r2,0(r2)
  d0d438:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  d0d43c:	e0bffc17 	ldw	r2,-16(fp)
  d0d440:	11000a04 	addi	r4,r2,40
  d0d444:	e17ffe17 	ldw	r5,-8(fp)
  d0d448:	e1bfff17 	ldw	r6,-4(fp)
  d0d44c:	0d0d8700 	call	d0d870 <altera_avalon_jtag_uart_ioctl>
}
  d0d450:	e037883a 	mov	sp,fp
  d0d454:	dfc00117 	ldw	ra,4(sp)
  d0d458:	df000017 	ldw	fp,0(sp)
  d0d45c:	dec00204 	addi	sp,sp,8
  d0d460:	f800283a 	ret

00d0d464 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  d0d464:	defffa04 	addi	sp,sp,-24
  d0d468:	dfc00515 	stw	ra,20(sp)
  d0d46c:	df000415 	stw	fp,16(sp)
  d0d470:	df000404 	addi	fp,sp,16
  d0d474:	e13ffd15 	stw	r4,-12(fp)
  d0d478:	e17ffe15 	stw	r5,-8(fp)
  d0d47c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  d0d480:	e0fffd17 	ldw	r3,-12(fp)
  d0d484:	00800044 	movi	r2,1
  d0d488:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  d0d48c:	e0bffd17 	ldw	r2,-12(fp)
  d0d490:	10800017 	ldw	r2,0(r2)
  d0d494:	11000104 	addi	r4,r2,4
  d0d498:	e0bffd17 	ldw	r2,-12(fp)
  d0d49c:	10800817 	ldw	r2,32(r2)
  d0d4a0:	1007883a 	mov	r3,r2
  d0d4a4:	2005883a 	mov	r2,r4
  d0d4a8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  d0d4ac:	e13ffe17 	ldw	r4,-8(fp)
  d0d4b0:	e17fff17 	ldw	r5,-4(fp)
  d0d4b4:	d8000015 	stw	zero,0(sp)
  d0d4b8:	01803474 	movhi	r6,209
  d0d4bc:	31b54904 	addi	r6,r6,-10972
  d0d4c0:	e1fffd17 	ldw	r7,-12(fp)
  d0d4c4:	0d101200 	call	d10120 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  d0d4c8:	e0bffd17 	ldw	r2,-12(fp)
  d0d4cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  d0d4d0:	e0bffd17 	ldw	r2,-12(fp)
  d0d4d4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  d0d4d8:	00803474 	movhi	r2,209
  d0d4dc:	10936004 	addi	r2,r2,19840
  d0d4e0:	10800017 	ldw	r2,0(r2)
  d0d4e4:	100b883a 	mov	r5,r2
  d0d4e8:	01803474 	movhi	r6,209
  d0d4ec:	31b5d304 	addi	r6,r6,-10420
  d0d4f0:	e1fffd17 	ldw	r7,-12(fp)
  d0d4f4:	0d0fce80 	call	d0fce8 <alt_alarm_start>
  d0d4f8:	1004403a 	cmpge	r2,r2,zero
  d0d4fc:	1000041e 	bne	r2,zero,d0d510 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  d0d500:	e0fffd17 	ldw	r3,-12(fp)
  d0d504:	00a00034 	movhi	r2,32768
  d0d508:	10bfffc4 	addi	r2,r2,-1
  d0d50c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  d0d510:	e037883a 	mov	sp,fp
  d0d514:	dfc00117 	ldw	ra,4(sp)
  d0d518:	df000017 	ldw	fp,0(sp)
  d0d51c:	dec00204 	addi	sp,sp,8
  d0d520:	f800283a 	ret

00d0d524 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  d0d524:	defff804 	addi	sp,sp,-32
  d0d528:	df000715 	stw	fp,28(sp)
  d0d52c:	df000704 	addi	fp,sp,28
  d0d530:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  d0d534:	e0bfff17 	ldw	r2,-4(fp)
  d0d538:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  d0d53c:	e0bffe17 	ldw	r2,-8(fp)
  d0d540:	10800017 	ldw	r2,0(r2)
  d0d544:	e0bffd15 	stw	r2,-12(fp)
  d0d548:	00000006 	br	d0d54c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  d0d54c:	e0bffd17 	ldw	r2,-12(fp)
  d0d550:	10800104 	addi	r2,r2,4
  d0d554:	10800037 	ldwio	r2,0(r2)
  d0d558:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  d0d55c:	e0bffc17 	ldw	r2,-16(fp)
  d0d560:	1080c00c 	andi	r2,r2,768
  d0d564:	1005003a 	cmpeq	r2,r2,zero
  d0d568:	1000741e 	bne	r2,zero,d0d73c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  d0d56c:	e0bffc17 	ldw	r2,-16(fp)
  d0d570:	1080400c 	andi	r2,r2,256
  d0d574:	1005003a 	cmpeq	r2,r2,zero
  d0d578:	1000351e 	bne	r2,zero,d0d650 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  d0d57c:	00800074 	movhi	r2,1
  d0d580:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  d0d584:	e0bffe17 	ldw	r2,-8(fp)
  d0d588:	10800a17 	ldw	r2,40(r2)
  d0d58c:	10800044 	addi	r2,r2,1
  d0d590:	1081ffcc 	andi	r2,r2,2047
  d0d594:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  d0d598:	e0bffe17 	ldw	r2,-8(fp)
  d0d59c:	10c00b17 	ldw	r3,44(r2)
  d0d5a0:	e0bffa17 	ldw	r2,-24(fp)
  d0d5a4:	18801626 	beq	r3,r2,d0d600 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  d0d5a8:	e0bffd17 	ldw	r2,-12(fp)
  d0d5ac:	10800037 	ldwio	r2,0(r2)
  d0d5b0:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  d0d5b4:	e0bffb17 	ldw	r2,-20(fp)
  d0d5b8:	10a0000c 	andi	r2,r2,32768
  d0d5bc:	1005003a 	cmpeq	r2,r2,zero
  d0d5c0:	10000f1e 	bne	r2,zero,d0d600 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  d0d5c4:	e0bffe17 	ldw	r2,-8(fp)
  d0d5c8:	10c00a17 	ldw	r3,40(r2)
  d0d5cc:	e0bffb17 	ldw	r2,-20(fp)
  d0d5d0:	1009883a 	mov	r4,r2
  d0d5d4:	e0bffe17 	ldw	r2,-8(fp)
  d0d5d8:	1885883a 	add	r2,r3,r2
  d0d5dc:	10800e04 	addi	r2,r2,56
  d0d5e0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  d0d5e4:	e0bffe17 	ldw	r2,-8(fp)
  d0d5e8:	10800a17 	ldw	r2,40(r2)
  d0d5ec:	10800044 	addi	r2,r2,1
  d0d5f0:	10c1ffcc 	andi	r3,r2,2047
  d0d5f4:	e0bffe17 	ldw	r2,-8(fp)
  d0d5f8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  d0d5fc:	003fe106 	br	d0d584 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  d0d600:	e0bffb17 	ldw	r2,-20(fp)
  d0d604:	10bfffec 	andhi	r2,r2,65535
  d0d608:	1005003a 	cmpeq	r2,r2,zero
  d0d60c:	1000101e 	bne	r2,zero,d0d650 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  d0d610:	e0bffe17 	ldw	r2,-8(fp)
  d0d614:	10c00817 	ldw	r3,32(r2)
  d0d618:	00bfff84 	movi	r2,-2
  d0d61c:	1886703a 	and	r3,r3,r2
  d0d620:	e0bffe17 	ldw	r2,-8(fp)
  d0d624:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  d0d628:	e0bffd17 	ldw	r2,-12(fp)
  d0d62c:	11000104 	addi	r4,r2,4
  d0d630:	e0bffe17 	ldw	r2,-8(fp)
  d0d634:	10800817 	ldw	r2,32(r2)
  d0d638:	1007883a 	mov	r3,r2
  d0d63c:	2005883a 	mov	r2,r4
  d0d640:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  d0d644:	e0bffd17 	ldw	r2,-12(fp)
  d0d648:	10800104 	addi	r2,r2,4
  d0d64c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  d0d650:	e0bffc17 	ldw	r2,-16(fp)
  d0d654:	1080800c 	andi	r2,r2,512
  d0d658:	1005003a 	cmpeq	r2,r2,zero
  d0d65c:	103fbb1e 	bne	r2,zero,d0d54c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  d0d660:	e0bffc17 	ldw	r2,-16(fp)
  d0d664:	10bfffec 	andhi	r2,r2,65535
  d0d668:	1004d43a 	srli	r2,r2,16
  d0d66c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  d0d670:	00001506 	br	d0d6c8 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  d0d674:	e13ffd17 	ldw	r4,-12(fp)
  d0d678:	e0bffe17 	ldw	r2,-8(fp)
  d0d67c:	10c00d17 	ldw	r3,52(r2)
  d0d680:	e0bffe17 	ldw	r2,-8(fp)
  d0d684:	1885883a 	add	r2,r3,r2
  d0d688:	10820e04 	addi	r2,r2,2104
  d0d68c:	10800003 	ldbu	r2,0(r2)
  d0d690:	10c03fcc 	andi	r3,r2,255
  d0d694:	18c0201c 	xori	r3,r3,128
  d0d698:	18ffe004 	addi	r3,r3,-128
  d0d69c:	2005883a 	mov	r2,r4
  d0d6a0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  d0d6a4:	e0bffe17 	ldw	r2,-8(fp)
  d0d6a8:	10800d17 	ldw	r2,52(r2)
  d0d6ac:	10800044 	addi	r2,r2,1
  d0d6b0:	10c1ffcc 	andi	r3,r2,2047
  d0d6b4:	e0bffe17 	ldw	r2,-8(fp)
  d0d6b8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  d0d6bc:	e0bff917 	ldw	r2,-28(fp)
  d0d6c0:	10bfffc4 	addi	r2,r2,-1
  d0d6c4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  d0d6c8:	e0bff917 	ldw	r2,-28(fp)
  d0d6cc:	1005003a 	cmpeq	r2,r2,zero
  d0d6d0:	1000051e 	bne	r2,zero,d0d6e8 <altera_avalon_jtag_uart_irq+0x1c4>
  d0d6d4:	e0bffe17 	ldw	r2,-8(fp)
  d0d6d8:	10c00d17 	ldw	r3,52(r2)
  d0d6dc:	e0bffe17 	ldw	r2,-8(fp)
  d0d6e0:	10800c17 	ldw	r2,48(r2)
  d0d6e4:	18bfe31e 	bne	r3,r2,d0d674 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  d0d6e8:	e0bff917 	ldw	r2,-28(fp)
  d0d6ec:	1005003a 	cmpeq	r2,r2,zero
  d0d6f0:	103f961e 	bne	r2,zero,d0d54c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  d0d6f4:	e0bffe17 	ldw	r2,-8(fp)
  d0d6f8:	10c00817 	ldw	r3,32(r2)
  d0d6fc:	00bfff44 	movi	r2,-3
  d0d700:	1886703a 	and	r3,r3,r2
  d0d704:	e0bffe17 	ldw	r2,-8(fp)
  d0d708:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  d0d70c:	e0bffe17 	ldw	r2,-8(fp)
  d0d710:	10800017 	ldw	r2,0(r2)
  d0d714:	11000104 	addi	r4,r2,4
  d0d718:	e0bffe17 	ldw	r2,-8(fp)
  d0d71c:	10800817 	ldw	r2,32(r2)
  d0d720:	1007883a 	mov	r3,r2
  d0d724:	2005883a 	mov	r2,r4
  d0d728:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  d0d72c:	e0bffd17 	ldw	r2,-12(fp)
  d0d730:	10800104 	addi	r2,r2,4
  d0d734:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  d0d738:	003f8406 	br	d0d54c <altera_avalon_jtag_uart_irq+0x28>
}
  d0d73c:	e037883a 	mov	sp,fp
  d0d740:	df000017 	ldw	fp,0(sp)
  d0d744:	dec00104 	addi	sp,sp,4
  d0d748:	f800283a 	ret

00d0d74c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  d0d74c:	defffc04 	addi	sp,sp,-16
  d0d750:	df000315 	stw	fp,12(sp)
  d0d754:	df000304 	addi	fp,sp,12
  d0d758:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  d0d75c:	e0bfff17 	ldw	r2,-4(fp)
  d0d760:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  d0d764:	e0bffe17 	ldw	r2,-8(fp)
  d0d768:	10800017 	ldw	r2,0(r2)
  d0d76c:	10800104 	addi	r2,r2,4
  d0d770:	10800037 	ldwio	r2,0(r2)
  d0d774:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  d0d778:	e0bffd17 	ldw	r2,-12(fp)
  d0d77c:	1081000c 	andi	r2,r2,1024
  d0d780:	1005003a 	cmpeq	r2,r2,zero
  d0d784:	10000c1e 	bne	r2,zero,d0d7b8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  d0d788:	e0bffe17 	ldw	r2,-8(fp)
  d0d78c:	10800017 	ldw	r2,0(r2)
  d0d790:	11000104 	addi	r4,r2,4
  d0d794:	e0bffe17 	ldw	r2,-8(fp)
  d0d798:	10800817 	ldw	r2,32(r2)
  d0d79c:	10810014 	ori	r2,r2,1024
  d0d7a0:	1007883a 	mov	r3,r2
  d0d7a4:	2005883a 	mov	r2,r4
  d0d7a8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  d0d7ac:	e0bffe17 	ldw	r2,-8(fp)
  d0d7b0:	10000915 	stw	zero,36(r2)
  d0d7b4:	00000a06 	br	d0d7e0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  d0d7b8:	e0bffe17 	ldw	r2,-8(fp)
  d0d7bc:	10c00917 	ldw	r3,36(r2)
  d0d7c0:	00a00034 	movhi	r2,32768
  d0d7c4:	10bfff04 	addi	r2,r2,-4
  d0d7c8:	10c00536 	bltu	r2,r3,d0d7e0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  d0d7cc:	e0bffe17 	ldw	r2,-8(fp)
  d0d7d0:	10800917 	ldw	r2,36(r2)
  d0d7d4:	10c00044 	addi	r3,r2,1
  d0d7d8:	e0bffe17 	ldw	r2,-8(fp)
  d0d7dc:	10c00915 	stw	r3,36(r2)
  d0d7e0:	00803474 	movhi	r2,209
  d0d7e4:	10936004 	addi	r2,r2,19840
  d0d7e8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  d0d7ec:	e037883a 	mov	sp,fp
  d0d7f0:	df000017 	ldw	fp,0(sp)
  d0d7f4:	dec00104 	addi	sp,sp,4
  d0d7f8:	f800283a 	ret

00d0d7fc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  d0d7fc:	defffc04 	addi	sp,sp,-16
  d0d800:	df000315 	stw	fp,12(sp)
  d0d804:	df000304 	addi	fp,sp,12
  d0d808:	e13ffd15 	stw	r4,-12(fp)
  d0d80c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  d0d810:	00000706 	br	d0d830 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  d0d814:	e0bffe17 	ldw	r2,-8(fp)
  d0d818:	1090000c 	andi	r2,r2,16384
  d0d81c:	1005003a 	cmpeq	r2,r2,zero
  d0d820:	1000031e 	bne	r2,zero,d0d830 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  d0d824:	00bffd44 	movi	r2,-11
  d0d828:	e0bfff15 	stw	r2,-4(fp)
  d0d82c:	00000b06 	br	d0d85c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  d0d830:	e0bffd17 	ldw	r2,-12(fp)
  d0d834:	10c00d17 	ldw	r3,52(r2)
  d0d838:	e0bffd17 	ldw	r2,-12(fp)
  d0d83c:	10800c17 	ldw	r2,48(r2)
  d0d840:	18800526 	beq	r3,r2,d0d858 <altera_avalon_jtag_uart_close+0x5c>
  d0d844:	e0bffd17 	ldw	r2,-12(fp)
  d0d848:	10c00917 	ldw	r3,36(r2)
  d0d84c:	e0bffd17 	ldw	r2,-12(fp)
  d0d850:	10800117 	ldw	r2,4(r2)
  d0d854:	18bfef36 	bltu	r3,r2,d0d814 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  d0d858:	e03fff15 	stw	zero,-4(fp)
  d0d85c:	e0bfff17 	ldw	r2,-4(fp)
}
  d0d860:	e037883a 	mov	sp,fp
  d0d864:	df000017 	ldw	fp,0(sp)
  d0d868:	dec00104 	addi	sp,sp,4
  d0d86c:	f800283a 	ret

00d0d870 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  d0d870:	defff804 	addi	sp,sp,-32
  d0d874:	df000715 	stw	fp,28(sp)
  d0d878:	df000704 	addi	fp,sp,28
  d0d87c:	e13ffb15 	stw	r4,-20(fp)
  d0d880:	e17ffc15 	stw	r5,-16(fp)
  d0d884:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  d0d888:	00bff9c4 	movi	r2,-25
  d0d88c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  d0d890:	e0bffc17 	ldw	r2,-16(fp)
  d0d894:	e0bfff15 	stw	r2,-4(fp)
  d0d898:	e0ffff17 	ldw	r3,-4(fp)
  d0d89c:	189a8060 	cmpeqi	r2,r3,27137
  d0d8a0:	1000041e 	bne	r2,zero,d0d8b4 <altera_avalon_jtag_uart_ioctl+0x44>
  d0d8a4:	e0ffff17 	ldw	r3,-4(fp)
  d0d8a8:	189a80a0 	cmpeqi	r2,r3,27138
  d0d8ac:	10001b1e 	bne	r2,zero,d0d91c <altera_avalon_jtag_uart_ioctl+0xac>
  d0d8b0:	00002706 	br	d0d950 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  d0d8b4:	e0bffb17 	ldw	r2,-20(fp)
  d0d8b8:	10c00117 	ldw	r3,4(r2)
  d0d8bc:	00a00034 	movhi	r2,32768
  d0d8c0:	10bfffc4 	addi	r2,r2,-1
  d0d8c4:	18802226 	beq	r3,r2,d0d950 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  d0d8c8:	e0bffd17 	ldw	r2,-12(fp)
  d0d8cc:	10800017 	ldw	r2,0(r2)
  d0d8d0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  d0d8d4:	e0bff917 	ldw	r2,-28(fp)
  d0d8d8:	10800090 	cmplti	r2,r2,2
  d0d8dc:	1000071e 	bne	r2,zero,d0d8fc <altera_avalon_jtag_uart_ioctl+0x8c>
  d0d8e0:	e0fff917 	ldw	r3,-28(fp)
  d0d8e4:	00a00034 	movhi	r2,32768
  d0d8e8:	10bfffc4 	addi	r2,r2,-1
  d0d8ec:	18800326 	beq	r3,r2,d0d8fc <altera_avalon_jtag_uart_ioctl+0x8c>
  d0d8f0:	e0bff917 	ldw	r2,-28(fp)
  d0d8f4:	e0bffe15 	stw	r2,-8(fp)
  d0d8f8:	00000306 	br	d0d908 <altera_avalon_jtag_uart_ioctl+0x98>
  d0d8fc:	00e00034 	movhi	r3,32768
  d0d900:	18ffff84 	addi	r3,r3,-2
  d0d904:	e0fffe15 	stw	r3,-8(fp)
  d0d908:	e0bffb17 	ldw	r2,-20(fp)
  d0d90c:	e0fffe17 	ldw	r3,-8(fp)
  d0d910:	10c00115 	stw	r3,4(r2)
      rc = 0;
  d0d914:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  d0d918:	00000d06 	br	d0d950 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  d0d91c:	e0bffb17 	ldw	r2,-20(fp)
  d0d920:	10c00117 	ldw	r3,4(r2)
  d0d924:	00a00034 	movhi	r2,32768
  d0d928:	10bfffc4 	addi	r2,r2,-1
  d0d92c:	18800826 	beq	r3,r2,d0d950 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  d0d930:	e13ffd17 	ldw	r4,-12(fp)
  d0d934:	e0bffb17 	ldw	r2,-20(fp)
  d0d938:	10c00917 	ldw	r3,36(r2)
  d0d93c:	e0bffb17 	ldw	r2,-20(fp)
  d0d940:	10800117 	ldw	r2,4(r2)
  d0d944:	1885803a 	cmpltu	r2,r3,r2
  d0d948:	20800015 	stw	r2,0(r4)
      rc = 0;
  d0d94c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  d0d950:	e0bffa17 	ldw	r2,-24(fp)
}
  d0d954:	e037883a 	mov	sp,fp
  d0d958:	df000017 	ldw	fp,0(sp)
  d0d95c:	dec00104 	addi	sp,sp,4
  d0d960:	f800283a 	ret

00d0d964 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  d0d964:	defff204 	addi	sp,sp,-56
  d0d968:	dfc00d15 	stw	ra,52(sp)
  d0d96c:	df000c15 	stw	fp,48(sp)
  d0d970:	df000c04 	addi	fp,sp,48
  d0d974:	e13ffb15 	stw	r4,-20(fp)
  d0d978:	e17ffc15 	stw	r5,-16(fp)
  d0d97c:	e1bffd15 	stw	r6,-12(fp)
  d0d980:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  d0d984:	e0bffc17 	ldw	r2,-16(fp)
  d0d988:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  d0d98c:	00004806 	br	d0dab0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  d0d990:	e0bffb17 	ldw	r2,-20(fp)
  d0d994:	10800a17 	ldw	r2,40(r2)
  d0d998:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  d0d99c:	e0bffb17 	ldw	r2,-20(fp)
  d0d9a0:	10800b17 	ldw	r2,44(r2)
  d0d9a4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  d0d9a8:	e0fff717 	ldw	r3,-36(fp)
  d0d9ac:	e0bff617 	ldw	r2,-40(fp)
  d0d9b0:	18800536 	bltu	r3,r2,d0d9c8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  d0d9b4:	e0bff717 	ldw	r2,-36(fp)
  d0d9b8:	e0fff617 	ldw	r3,-40(fp)
  d0d9bc:	10c5c83a 	sub	r2,r2,r3
  d0d9c0:	e0bff815 	stw	r2,-32(fp)
  d0d9c4:	00000406 	br	d0d9d8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  d0d9c8:	00820004 	movi	r2,2048
  d0d9cc:	e0fff617 	ldw	r3,-40(fp)
  d0d9d0:	10c5c83a 	sub	r2,r2,r3
  d0d9d4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  d0d9d8:	e0bff817 	ldw	r2,-32(fp)
  d0d9dc:	1005003a 	cmpeq	r2,r2,zero
  d0d9e0:	10001f1e 	bne	r2,zero,d0da60 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  d0d9e4:	e0fffd17 	ldw	r3,-12(fp)
  d0d9e8:	e0bff817 	ldw	r2,-32(fp)
  d0d9ec:	1880022e 	bgeu	r3,r2,d0d9f8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  d0d9f0:	e0bffd17 	ldw	r2,-12(fp)
  d0d9f4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  d0d9f8:	e0bffb17 	ldw	r2,-20(fp)
  d0d9fc:	10c00e04 	addi	r3,r2,56
  d0da00:	e0bff617 	ldw	r2,-40(fp)
  d0da04:	1887883a 	add	r3,r3,r2
  d0da08:	e0bffa17 	ldw	r2,-24(fp)
  d0da0c:	1009883a 	mov	r4,r2
  d0da10:	180b883a 	mov	r5,r3
  d0da14:	e1bff817 	ldw	r6,-32(fp)
  d0da18:	0d08fbc0 	call	d08fbc <memcpy>
      ptr   += n;
  d0da1c:	e0fff817 	ldw	r3,-32(fp)
  d0da20:	e0bffa17 	ldw	r2,-24(fp)
  d0da24:	10c5883a 	add	r2,r2,r3
  d0da28:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  d0da2c:	e0fffd17 	ldw	r3,-12(fp)
  d0da30:	e0bff817 	ldw	r2,-32(fp)
  d0da34:	1885c83a 	sub	r2,r3,r2
  d0da38:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  d0da3c:	e0fff617 	ldw	r3,-40(fp)
  d0da40:	e0bff817 	ldw	r2,-32(fp)
  d0da44:	1885883a 	add	r2,r3,r2
  d0da48:	10c1ffcc 	andi	r3,r2,2047
  d0da4c:	e0bffb17 	ldw	r2,-20(fp)
  d0da50:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  d0da54:	e0bffd17 	ldw	r2,-12(fp)
  d0da58:	10800048 	cmpgei	r2,r2,1
  d0da5c:	103fcc1e 	bne	r2,zero,d0d990 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  d0da60:	e0fffa17 	ldw	r3,-24(fp)
  d0da64:	e0bffc17 	ldw	r2,-16(fp)
  d0da68:	1880141e 	bne	r3,r2,d0dabc <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  d0da6c:	e0bffe17 	ldw	r2,-8(fp)
  d0da70:	1090000c 	andi	r2,r2,16384
  d0da74:	1004c03a 	cmpne	r2,r2,zero
  d0da78:	1000101e 	bne	r2,zero,d0dabc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  d0da7c:	e0bffb17 	ldw	r2,-20(fp)
  d0da80:	10c00a17 	ldw	r3,40(r2)
  d0da84:	e0bff717 	ldw	r2,-36(fp)
  d0da88:	1880051e 	bne	r3,r2,d0daa0 <altera_avalon_jtag_uart_read+0x13c>
  d0da8c:	e0bffb17 	ldw	r2,-20(fp)
  d0da90:	10c00917 	ldw	r3,36(r2)
  d0da94:	e0bffb17 	ldw	r2,-20(fp)
  d0da98:	10800117 	ldw	r2,4(r2)
  d0da9c:	18bff736 	bltu	r3,r2,d0da7c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  d0daa0:	e0bffb17 	ldw	r2,-20(fp)
  d0daa4:	10c00a17 	ldw	r3,40(r2)
  d0daa8:	e0bff717 	ldw	r2,-36(fp)
  d0daac:	18800326 	beq	r3,r2,d0dabc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  d0dab0:	e0bffd17 	ldw	r2,-12(fp)
  d0dab4:	10800048 	cmpgei	r2,r2,1
  d0dab8:	103fb51e 	bne	r2,zero,d0d990 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  d0dabc:	e0fffa17 	ldw	r3,-24(fp)
  d0dac0:	e0bffc17 	ldw	r2,-16(fp)
  d0dac4:	18801926 	beq	r3,r2,d0db2c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  d0dac8:	0005303a 	rdctl	r2,status
  d0dacc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  d0dad0:	e0fff517 	ldw	r3,-44(fp)
  d0dad4:	00bfff84 	movi	r2,-2
  d0dad8:	1884703a 	and	r2,r3,r2
  d0dadc:	1001703a 	wrctl	status,r2
  
  return context;
  d0dae0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  d0dae4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  d0dae8:	e0bffb17 	ldw	r2,-20(fp)
  d0daec:	10800817 	ldw	r2,32(r2)
  d0daf0:	10c00054 	ori	r3,r2,1
  d0daf4:	e0bffb17 	ldw	r2,-20(fp)
  d0daf8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  d0dafc:	e0bffb17 	ldw	r2,-20(fp)
  d0db00:	10800017 	ldw	r2,0(r2)
  d0db04:	11000104 	addi	r4,r2,4
  d0db08:	e0bffb17 	ldw	r2,-20(fp)
  d0db0c:	10800817 	ldw	r2,32(r2)
  d0db10:	1007883a 	mov	r3,r2
  d0db14:	2005883a 	mov	r2,r4
  d0db18:	10c00035 	stwio	r3,0(r2)
  d0db1c:	e0bff917 	ldw	r2,-28(fp)
  d0db20:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  d0db24:	e0bff417 	ldw	r2,-48(fp)
  d0db28:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  d0db2c:	e0fffa17 	ldw	r3,-24(fp)
  d0db30:	e0bffc17 	ldw	r2,-16(fp)
  d0db34:	18800526 	beq	r3,r2,d0db4c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  d0db38:	e0fffa17 	ldw	r3,-24(fp)
  d0db3c:	e0bffc17 	ldw	r2,-16(fp)
  d0db40:	1887c83a 	sub	r3,r3,r2
  d0db44:	e0ffff15 	stw	r3,-4(fp)
  d0db48:	00000906 	br	d0db70 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  d0db4c:	e0bffe17 	ldw	r2,-8(fp)
  d0db50:	1090000c 	andi	r2,r2,16384
  d0db54:	1005003a 	cmpeq	r2,r2,zero
  d0db58:	1000031e 	bne	r2,zero,d0db68 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  d0db5c:	00bffd44 	movi	r2,-11
  d0db60:	e0bfff15 	stw	r2,-4(fp)
  d0db64:	00000206 	br	d0db70 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  d0db68:	00bffec4 	movi	r2,-5
  d0db6c:	e0bfff15 	stw	r2,-4(fp)
  d0db70:	e0bfff17 	ldw	r2,-4(fp)
}
  d0db74:	e037883a 	mov	sp,fp
  d0db78:	dfc00117 	ldw	ra,4(sp)
  d0db7c:	df000017 	ldw	fp,0(sp)
  d0db80:	dec00204 	addi	sp,sp,8
  d0db84:	f800283a 	ret

00d0db88 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  d0db88:	defff204 	addi	sp,sp,-56
  d0db8c:	dfc00d15 	stw	ra,52(sp)
  d0db90:	df000c15 	stw	fp,48(sp)
  d0db94:	df000c04 	addi	fp,sp,48
  d0db98:	e13ffb15 	stw	r4,-20(fp)
  d0db9c:	e17ffc15 	stw	r5,-16(fp)
  d0dba0:	e1bffd15 	stw	r6,-12(fp)
  d0dba4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  d0dba8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  d0dbac:	e0bffc17 	ldw	r2,-16(fp)
  d0dbb0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  d0dbb4:	00003a06 	br	d0dca0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  d0dbb8:	e0bffb17 	ldw	r2,-20(fp)
  d0dbbc:	10800c17 	ldw	r2,48(r2)
  d0dbc0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  d0dbc4:	e0bffb17 	ldw	r2,-20(fp)
  d0dbc8:	10800d17 	ldw	r2,52(r2)
  d0dbcc:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  d0dbd0:	e0fffa17 	ldw	r3,-24(fp)
  d0dbd4:	e0bff917 	ldw	r2,-28(fp)
  d0dbd8:	1880062e 	bgeu	r3,r2,d0dbf4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  d0dbdc:	e0fff917 	ldw	r3,-28(fp)
  d0dbe0:	e0bffa17 	ldw	r2,-24(fp)
  d0dbe4:	1885c83a 	sub	r2,r3,r2
  d0dbe8:	10bfffc4 	addi	r2,r2,-1
  d0dbec:	e0bff815 	stw	r2,-32(fp)
  d0dbf0:	00000c06 	br	d0dc24 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  d0dbf4:	e0bff917 	ldw	r2,-28(fp)
  d0dbf8:	1005003a 	cmpeq	r2,r2,zero
  d0dbfc:	1000051e 	bne	r2,zero,d0dc14 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  d0dc00:	00820004 	movi	r2,2048
  d0dc04:	e0fffa17 	ldw	r3,-24(fp)
  d0dc08:	10c5c83a 	sub	r2,r2,r3
  d0dc0c:	e0bff815 	stw	r2,-32(fp)
  d0dc10:	00000406 	br	d0dc24 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  d0dc14:	0081ffc4 	movi	r2,2047
  d0dc18:	e0fffa17 	ldw	r3,-24(fp)
  d0dc1c:	10c5c83a 	sub	r2,r2,r3
  d0dc20:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  d0dc24:	e0bff817 	ldw	r2,-32(fp)
  d0dc28:	1005003a 	cmpeq	r2,r2,zero
  d0dc2c:	10001f1e 	bne	r2,zero,d0dcac <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  d0dc30:	e0fffd17 	ldw	r3,-12(fp)
  d0dc34:	e0bff817 	ldw	r2,-32(fp)
  d0dc38:	1880022e 	bgeu	r3,r2,d0dc44 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  d0dc3c:	e0bffd17 	ldw	r2,-12(fp)
  d0dc40:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  d0dc44:	e0bffb17 	ldw	r2,-20(fp)
  d0dc48:	10c20e04 	addi	r3,r2,2104
  d0dc4c:	e0bffa17 	ldw	r2,-24(fp)
  d0dc50:	1885883a 	add	r2,r3,r2
  d0dc54:	e0fffc17 	ldw	r3,-16(fp)
  d0dc58:	1009883a 	mov	r4,r2
  d0dc5c:	180b883a 	mov	r5,r3
  d0dc60:	e1bff817 	ldw	r6,-32(fp)
  d0dc64:	0d08fbc0 	call	d08fbc <memcpy>
      ptr   += n;
  d0dc68:	e0fff817 	ldw	r3,-32(fp)
  d0dc6c:	e0bffc17 	ldw	r2,-16(fp)
  d0dc70:	10c5883a 	add	r2,r2,r3
  d0dc74:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  d0dc78:	e0fffd17 	ldw	r3,-12(fp)
  d0dc7c:	e0bff817 	ldw	r2,-32(fp)
  d0dc80:	1885c83a 	sub	r2,r3,r2
  d0dc84:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  d0dc88:	e0fffa17 	ldw	r3,-24(fp)
  d0dc8c:	e0bff817 	ldw	r2,-32(fp)
  d0dc90:	1885883a 	add	r2,r3,r2
  d0dc94:	10c1ffcc 	andi	r3,r2,2047
  d0dc98:	e0bffb17 	ldw	r2,-20(fp)
  d0dc9c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  d0dca0:	e0bffd17 	ldw	r2,-12(fp)
  d0dca4:	10800048 	cmpgei	r2,r2,1
  d0dca8:	103fc31e 	bne	r2,zero,d0dbb8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  d0dcac:	0005303a 	rdctl	r2,status
  d0dcb0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  d0dcb4:	e0fff517 	ldw	r3,-44(fp)
  d0dcb8:	00bfff84 	movi	r2,-2
  d0dcbc:	1884703a 	and	r2,r3,r2
  d0dcc0:	1001703a 	wrctl	status,r2
  
  return context;
  d0dcc4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  d0dcc8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  d0dccc:	e0bffb17 	ldw	r2,-20(fp)
  d0dcd0:	10800817 	ldw	r2,32(r2)
  d0dcd4:	10c00094 	ori	r3,r2,2
  d0dcd8:	e0bffb17 	ldw	r2,-20(fp)
  d0dcdc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  d0dce0:	e0bffb17 	ldw	r2,-20(fp)
  d0dce4:	10800017 	ldw	r2,0(r2)
  d0dce8:	11000104 	addi	r4,r2,4
  d0dcec:	e0bffb17 	ldw	r2,-20(fp)
  d0dcf0:	10800817 	ldw	r2,32(r2)
  d0dcf4:	1007883a 	mov	r3,r2
  d0dcf8:	2005883a 	mov	r2,r4
  d0dcfc:	10c00035 	stwio	r3,0(r2)
  d0dd00:	e0bff717 	ldw	r2,-36(fp)
  d0dd04:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  d0dd08:	e0bff417 	ldw	r2,-48(fp)
  d0dd0c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  d0dd10:	e0bffd17 	ldw	r2,-12(fp)
  d0dd14:	10800050 	cmplti	r2,r2,1
  d0dd18:	1000111e 	bne	r2,zero,d0dd60 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  d0dd1c:	e0bffe17 	ldw	r2,-8(fp)
  d0dd20:	1090000c 	andi	r2,r2,16384
  d0dd24:	1004c03a 	cmpne	r2,r2,zero
  d0dd28:	1000101e 	bne	r2,zero,d0dd6c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  d0dd2c:	e0bffb17 	ldw	r2,-20(fp)
  d0dd30:	10c00d17 	ldw	r3,52(r2)
  d0dd34:	e0bff917 	ldw	r2,-28(fp)
  d0dd38:	1880051e 	bne	r3,r2,d0dd50 <altera_avalon_jtag_uart_write+0x1c8>
  d0dd3c:	e0bffb17 	ldw	r2,-20(fp)
  d0dd40:	10c00917 	ldw	r3,36(r2)
  d0dd44:	e0bffb17 	ldw	r2,-20(fp)
  d0dd48:	10800117 	ldw	r2,4(r2)
  d0dd4c:	18bff736 	bltu	r3,r2,d0dd2c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  d0dd50:	e0bffb17 	ldw	r2,-20(fp)
  d0dd54:	10c00d17 	ldw	r3,52(r2)
  d0dd58:	e0bff917 	ldw	r2,-28(fp)
  d0dd5c:	18800326 	beq	r3,r2,d0dd6c <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  d0dd60:	e0bffd17 	ldw	r2,-12(fp)
  d0dd64:	10800048 	cmpgei	r2,r2,1
  d0dd68:	103fcd1e 	bne	r2,zero,d0dca0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  d0dd6c:	e0fffc17 	ldw	r3,-16(fp)
  d0dd70:	e0bff617 	ldw	r2,-40(fp)
  d0dd74:	18800526 	beq	r3,r2,d0dd8c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  d0dd78:	e0fffc17 	ldw	r3,-16(fp)
  d0dd7c:	e0bff617 	ldw	r2,-40(fp)
  d0dd80:	1887c83a 	sub	r3,r3,r2
  d0dd84:	e0ffff15 	stw	r3,-4(fp)
  d0dd88:	00000906 	br	d0ddb0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  d0dd8c:	e0bffe17 	ldw	r2,-8(fp)
  d0dd90:	1090000c 	andi	r2,r2,16384
  d0dd94:	1005003a 	cmpeq	r2,r2,zero
  d0dd98:	1000031e 	bne	r2,zero,d0dda8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  d0dd9c:	00bffd44 	movi	r2,-11
  d0dda0:	e0bfff15 	stw	r2,-4(fp)
  d0dda4:	00000206 	br	d0ddb0 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  d0dda8:	00bffec4 	movi	r2,-5
  d0ddac:	e0bfff15 	stw	r2,-4(fp)
  d0ddb0:	e0bfff17 	ldw	r2,-4(fp)
}
  d0ddb4:	e037883a 	mov	sp,fp
  d0ddb8:	dfc00117 	ldw	ra,4(sp)
  d0ddbc:	df000017 	ldw	fp,0(sp)
  d0ddc0:	dec00204 	addi	sp,sp,8
  d0ddc4:	f800283a 	ret

00d0ddc8 <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
  d0ddc8:	defffa04 	addi	sp,sp,-24
  d0ddcc:	dfc00515 	stw	ra,20(sp)
  d0ddd0:	df000415 	stw	fp,16(sp)
  d0ddd4:	df000404 	addi	fp,sp,16
  d0ddd8:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
  d0dddc:	e0bfff17 	ldw	r2,-4(fp)
  d0dde0:	11000704 	addi	r4,r2,28
  d0dde4:	0d0df200 	call	d0df20 <alt_avalon_mutex_reg>
  d0dde8:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
  d0ddec:	e0bffe17 	ldw	r2,-8(fp)
  d0ddf0:	1004c03a 	cmpne	r2,r2,zero
  d0ddf4:	1000041e 	bne	r2,zero,d0de08 <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
  d0ddf8:	e0bfff17 	ldw	r2,-4(fp)
  d0ddfc:	11000b04 	addi	r4,r2,44
  d0de00:	0d0df200 	call	d0df20 <alt_avalon_mutex_reg>
  d0de04:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  d0de08:	e0bffe17 	ldw	r2,-8(fp)
  d0de0c:	1004c03a 	cmpne	r2,r2,zero
  d0de10:	1000041e 	bne	r2,zero,d0de24 <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
  d0de14:	e13fff17 	ldw	r4,-4(fp)
  d0de18:	d1601504 	addi	r5,gp,-32684
  d0de1c:	0d0fe800 	call	d0fe80 <alt_dev_llist_insert>
  d0de20:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  d0de24:	e0bffe17 	ldw	r2,-8(fp)
  d0de28:	1004c03a 	cmpne	r2,r2,zero
  d0de2c:	1000361e 	bne	r2,zero,d0df08 <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
  d0de30:	e0bfff17 	ldw	r2,-4(fp)
  d0de34:	11000917 	ldw	r4,36(r2)
  d0de38:	0d0e36c0 	call	d0e36c <altera_avalon_mutex_open>
  d0de3c:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
  d0de40:	e0bffd17 	ldw	r2,-12(fp)
  d0de44:	1005003a 	cmpeq	r2,r2,zero
  d0de48:	10002f1e 	bne	r2,zero,d0df08 <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
  d0de4c:	e0bfff17 	ldw	r2,-4(fp)
  d0de50:	11000d17 	ldw	r4,52(r2)
  d0de54:	0d0e36c0 	call	d0e36c <altera_avalon_mutex_open>
  d0de58:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
  d0de5c:	e0bffc17 	ldw	r2,-16(fp)
  d0de60:	1005003a 	cmpeq	r2,r2,zero
  d0de64:	1000281e 	bne	r2,zero,d0df08 <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  d0de68:	00000f06 	br	d0dea8 <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
  d0de6c:	e13ffd17 	ldw	r4,-12(fp)
  d0de70:	01400044 	movi	r5,1
  d0de74:	0d0e4840 	call	d0e484 <altera_avalon_mutex_trylock>
  d0de78:	1004c03a 	cmpne	r2,r2,zero
  d0de7c:	10000a1e 	bne	r2,zero,d0dea8 <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
  d0de80:	e0bfff17 	ldw	r2,-4(fp)
  d0de84:	10800317 	ldw	r2,12(r2)
  d0de88:	1009883a 	mov	r4,r2
  d0de8c:	e0bfff17 	ldw	r2,-4(fp)
  d0de90:	10800517 	ldw	r2,20(r2)
  d0de94:	1007883a 	mov	r3,r2
  d0de98:	2005883a 	mov	r2,r4
  d0de9c:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
  d0dea0:	e13ffd17 	ldw	r4,-12(fp)
  d0dea4:	0d0e4c40 	call	d0e4c4 <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  d0dea8:	e13ffd17 	ldw	r4,-12(fp)
  d0deac:	0d0e59c0 	call	d0e59c <altera_avalon_mutex_first_lock>
  d0deb0:	1004c03a 	cmpne	r2,r2,zero
  d0deb4:	103fed1e 	bne	r2,zero,d0de6c <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  d0deb8:	00000f06 	br	d0def8 <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
  d0debc:	e13ffc17 	ldw	r4,-16(fp)
  d0dec0:	01400044 	movi	r5,1
  d0dec4:	0d0e4840 	call	d0e484 <altera_avalon_mutex_trylock>
  d0dec8:	1004c03a 	cmpne	r2,r2,zero
  d0decc:	10000a1e 	bne	r2,zero,d0def8 <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
  d0ded0:	e0bfff17 	ldw	r2,-4(fp)
  d0ded4:	10800417 	ldw	r2,16(r2)
  d0ded8:	1009883a 	mov	r4,r2
  d0dedc:	e0bfff17 	ldw	r2,-4(fp)
  d0dee0:	10800517 	ldw	r2,20(r2)
  d0dee4:	1007883a 	mov	r3,r2
  d0dee8:	2005883a 	mov	r2,r4
  d0deec:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
  d0def0:	e13ffc17 	ldw	r4,-16(fp)
  d0def4:	0d0e4c40 	call	d0e4c4 <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  d0def8:	e13ffc17 	ldw	r4,-16(fp)
  d0defc:	0d0e59c0 	call	d0e59c <altera_avalon_mutex_first_lock>
  d0df00:	1004c03a 	cmpne	r2,r2,zero
  d0df04:	103fed1e 	bne	r2,zero,d0debc <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
  d0df08:	e0bffe17 	ldw	r2,-8(fp)
}
  d0df0c:	e037883a 	mov	sp,fp
  d0df10:	dfc00117 	ldw	ra,4(sp)
  d0df14:	df000017 	ldw	fp,0(sp)
  d0df18:	dec00204 	addi	sp,sp,8
  d0df1c:	f800283a 	ret

00d0df20 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
  d0df20:	defffc04 	addi	sp,sp,-16
  d0df24:	dfc00315 	stw	ra,12(sp)
  d0df28:	df000215 	stw	fp,8(sp)
  d0df2c:	df000204 	addi	fp,sp,8
  d0df30:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  d0df34:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  d0df38:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
  d0df3c:	e0bffe17 	ldw	r2,-8(fp)
  d0df40:	1004c03a 	cmpne	r2,r2,zero
  d0df44:	1000061e 	bne	r2,zero,d0df60 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
  d0df48:	e13fff17 	ldw	r4,-4(fp)
  d0df4c:	01403474 	movhi	r5,209
  d0df50:	294c5904 	addi	r5,r5,12644
  d0df54:	0d0fe800 	call	d0fe80 <alt_dev_llist_insert>
  d0df58:	e0bffe15 	stw	r2,-8(fp)
  d0df5c:	00000506 	br	d0df74 <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
  d0df60:	0d0df8c0 	call	d0df8c <alt_get_errno>
  d0df64:	00c00304 	movi	r3,12
  d0df68:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
  d0df6c:	00bffd04 	movi	r2,-12
  d0df70:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
  d0df74:	e0bffe17 	ldw	r2,-8(fp)
}
  d0df78:	e037883a 	mov	sp,fp
  d0df7c:	dfc00117 	ldw	ra,4(sp)
  d0df80:	df000017 	ldw	fp,0(sp)
  d0df84:	dec00204 	addi	sp,sp,8
  d0df88:	f800283a 	ret

00d0df8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0df8c:	defffd04 	addi	sp,sp,-12
  d0df90:	dfc00215 	stw	ra,8(sp)
  d0df94:	df000115 	stw	fp,4(sp)
  d0df98:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0df9c:	00803474 	movhi	r2,209
  d0dfa0:	108c5504 	addi	r2,r2,12628
  d0dfa4:	10800017 	ldw	r2,0(r2)
  d0dfa8:	1005003a 	cmpeq	r2,r2,zero
  d0dfac:	1000061e 	bne	r2,zero,d0dfc8 <alt_get_errno+0x3c>
  d0dfb0:	00803474 	movhi	r2,209
  d0dfb4:	108c5504 	addi	r2,r2,12628
  d0dfb8:	10800017 	ldw	r2,0(r2)
  d0dfbc:	103ee83a 	callr	r2
  d0dfc0:	e0bfff15 	stw	r2,-4(fp)
  d0dfc4:	00000306 	br	d0dfd4 <alt_get_errno+0x48>
  d0dfc8:	00803474 	movhi	r2,209
  d0dfcc:	10935b04 	addi	r2,r2,19820
  d0dfd0:	e0bfff15 	stw	r2,-4(fp)
  d0dfd4:	e0bfff17 	ldw	r2,-4(fp)
}
  d0dfd8:	e037883a 	mov	sp,fp
  d0dfdc:	dfc00117 	ldw	ra,4(sp)
  d0dfe0:	df000017 	ldw	fp,0(sp)
  d0dfe4:	dec00204 	addi	sp,sp,8
  d0dfe8:	f800283a 	ret

00d0dfec <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
  d0dfec:	defffc04 	addi	sp,sp,-16
  d0dff0:	dfc00315 	stw	ra,12(sp)
  d0dff4:	df000215 	stw	fp,8(sp)
  d0dff8:	df000204 	addi	fp,sp,8
  d0dffc:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
  d0e000:	e13fff17 	ldw	r4,-4(fp)
  d0e004:	d1601504 	addi	r5,gp,-32684
  d0e008:	0d1005c0 	call	d1005c <alt_find_dev>
  d0e00c:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  d0e010:	e0bffe17 	ldw	r2,-8(fp)
  d0e014:	1004c03a 	cmpne	r2,r2,zero
  d0e018:	1000041e 	bne	r2,zero,d0e02c <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  d0e01c:	0d0df8c0 	call	d0df8c <alt_get_errno>
  d0e020:	1007883a 	mov	r3,r2
  d0e024:	008004c4 	movi	r2,19
  d0e028:	18800015 	stw	r2,0(r3)
  }

  return dev;
  d0e02c:	e0bffe17 	ldw	r2,-8(fp)

}
  d0e030:	e037883a 	mov	sp,fp
  d0e034:	dfc00117 	ldw	ra,4(sp)
  d0e038:	df000017 	ldw	fp,0(sp)
  d0e03c:	dec00204 	addi	sp,sp,8
  d0e040:	f800283a 	ret

00d0e044 <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
  d0e044:	defffe04 	addi	sp,sp,-8
  d0e048:	df000115 	stw	fp,4(sp)
  d0e04c:	df000104 	addi	fp,sp,4
  d0e050:	e13fff15 	stw	r4,-4(fp)
  return;
}
  d0e054:	e037883a 	mov	sp,fp
  d0e058:	df000017 	ldw	fp,0(sp)
  d0e05c:	dec00104 	addi	sp,sp,4
  d0e060:	f800283a 	ret

00d0e064 <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
  d0e064:	defff904 	addi	sp,sp,-28
  d0e068:	dfc00615 	stw	ra,24(sp)
  d0e06c:	df000515 	stw	fp,20(sp)
  d0e070:	df000504 	addi	fp,sp,20
  d0e074:	e13ffe15 	stw	r4,-8(fp)
  d0e078:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  d0e07c:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
  d0e080:	e0bffe17 	ldw	r2,-8(fp)
  d0e084:	11000704 	addi	r4,r2,28
  d0e088:	01400044 	movi	r5,1
  d0e08c:	0d0e4440 	call	d0e444 <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
  d0e090:	e0bffe17 	ldw	r2,-8(fp)
  d0e094:	10800317 	ldw	r2,12(r2)
  d0e098:	10800037 	ldwio	r2,0(r2)
  d0e09c:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
  d0e0a0:	e13ffe17 	ldw	r4,-8(fp)
  d0e0a4:	e17ffc17 	ldw	r5,-16(fp)
  d0e0a8:	0d0e1200 	call	d0e120 <alt_mailbox_increment_ptr>
  d0e0ac:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
  d0e0b0:	e0bffe17 	ldw	r2,-8(fp)
  d0e0b4:	10800417 	ldw	r2,16(r2)
  d0e0b8:	10800037 	ldwio	r2,0(r2)
  d0e0bc:	1007883a 	mov	r3,r2
  d0e0c0:	e0bffb17 	ldw	r2,-20(fp)
  d0e0c4:	1880061e 	bne	r3,r2,d0e0e0 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
  d0e0c8:	0d0df8c0 	call	d0df8c <alt_get_errno>
  d0e0cc:	00c002c4 	movi	r3,11
  d0e0d0:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
  d0e0d4:	00bffd44 	movi	r2,-11
  d0e0d8:	e0bffd15 	stw	r2,-12(fp)
  d0e0dc:	00000706 	br	d0e0fc <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
  d0e0e0:	e0bffc17 	ldw	r2,-16(fp)
  d0e0e4:	e0ffff17 	ldw	r3,-4(fp)
  d0e0e8:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
  d0e0ec:	e0bffe17 	ldw	r2,-8(fp)
  d0e0f0:	10800317 	ldw	r2,12(r2)
  d0e0f4:	e0fffb17 	ldw	r3,-20(fp)
  d0e0f8:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
  d0e0fc:	e0bffe17 	ldw	r2,-8(fp)
  d0e100:	11000704 	addi	r4,r2,28
  d0e104:	0d0e4c40 	call	d0e4c4 <altera_avalon_mutex_unlock>

  return ret_code;
  d0e108:	e0bffd17 	ldw	r2,-12(fp)

}
  d0e10c:	e037883a 	mov	sp,fp
  d0e110:	dfc00117 	ldw	ra,4(sp)
  d0e114:	df000017 	ldw	fp,0(sp)
  d0e118:	dec00204 	addi	sp,sp,8
  d0e11c:	f800283a 	ret

00d0e120 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
  d0e120:	defffd04 	addi	sp,sp,-12
  d0e124:	df000215 	stw	fp,8(sp)
  d0e128:	df000204 	addi	fp,sp,8
  d0e12c:	e13ffe15 	stw	r4,-8(fp)
  d0e130:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
  d0e134:	e0bfff17 	ldw	r2,-4(fp)
  d0e138:	10800104 	addi	r2,r2,4
  d0e13c:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
  d0e140:	e0bffe17 	ldw	r2,-8(fp)
  d0e144:	10c00617 	ldw	r3,24(r2)
  d0e148:	e0bfff17 	ldw	r2,-4(fp)
  d0e14c:	1880032e 	bgeu	r3,r2,d0e15c <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
  d0e150:	e0bffe17 	ldw	r2,-8(fp)
  d0e154:	10800517 	ldw	r2,20(r2)
  d0e158:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
  d0e15c:	e0bfff17 	ldw	r2,-4(fp)
}
  d0e160:	e037883a 	mov	sp,fp
  d0e164:	df000017 	ldw	fp,0(sp)
  d0e168:	dec00104 	addi	sp,sp,4
  d0e16c:	f800283a 	ret

00d0e170 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
  d0e170:	defffa04 	addi	sp,sp,-24
  d0e174:	dfc00515 	stw	ra,20(sp)
  d0e178:	df000415 	stw	fp,16(sp)
  d0e17c:	dc000315 	stw	r16,12(sp)
  d0e180:	df000304 	addi	fp,sp,12
  d0e184:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  d0e188:	e0bfff17 	ldw	r2,-4(fp)
  d0e18c:	11000b04 	addi	r4,r2,44
  d0e190:	01400044 	movi	r5,1
  d0e194:	0d0e4440 	call	d0e444 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  d0e198:	e0bfff17 	ldw	r2,-4(fp)
  d0e19c:	10800417 	ldw	r2,16(r2)
  d0e1a0:	10800037 	ldwio	r2,0(r2)
  d0e1a4:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
  d0e1a8:	e0bfff17 	ldw	r2,-4(fp)
  d0e1ac:	10800317 	ldw	r2,12(r2)
  d0e1b0:	10800037 	ldwio	r2,0(r2)
  d0e1b4:	1007883a 	mov	r3,r2
  d0e1b8:	e0bffd17 	ldw	r2,-12(fp)
  d0e1bc:	18bffa26 	beq	r3,r2,d0e1a8 <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
  d0e1c0:	e0bffd17 	ldw	r2,-12(fp)
  d0e1c4:	10800037 	ldwio	r2,0(r2)
  d0e1c8:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
  d0e1cc:	e0bfff17 	ldw	r2,-4(fp)
  d0e1d0:	10800417 	ldw	r2,16(r2)
  d0e1d4:	1021883a 	mov	r16,r2
  d0e1d8:	e13fff17 	ldw	r4,-4(fp)
  d0e1dc:	e17ffd17 	ldw	r5,-12(fp)
  d0e1e0:	0d0e1200 	call	d0e120 <alt_mailbox_increment_ptr>
  d0e1e4:	1007883a 	mov	r3,r2
  d0e1e8:	8005883a 	mov	r2,r16
  d0e1ec:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
  d0e1f0:	e0bfff17 	ldw	r2,-4(fp)
  d0e1f4:	11000b04 	addi	r4,r2,44
  d0e1f8:	0d0e4c40 	call	d0e4c4 <altera_avalon_mutex_unlock>

  return msg;
  d0e1fc:	e0bffe17 	ldw	r2,-8(fp)

}
  d0e200:	e037883a 	mov	sp,fp
  d0e204:	dfc00217 	ldw	ra,8(sp)
  d0e208:	df000117 	ldw	fp,4(sp)
  d0e20c:	dc000017 	ldw	r16,0(sp)
  d0e210:	dec00304 	addi	sp,sp,12
  d0e214:	f800283a 	ret

00d0e218 <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
  d0e218:	defff904 	addi	sp,sp,-28
  d0e21c:	dfc00615 	stw	ra,24(sp)
  d0e220:	df000515 	stw	fp,20(sp)
  d0e224:	dc000415 	stw	r16,16(sp)
  d0e228:	df000404 	addi	fp,sp,16
  d0e22c:	e13ffe15 	stw	r4,-8(fp)
  d0e230:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
  d0e234:	e0bfff17 	ldw	r2,-4(fp)
  d0e238:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  d0e23c:	e0bffe17 	ldw	r2,-8(fp)
  d0e240:	11000b04 	addi	r4,r2,44
  d0e244:	01400044 	movi	r5,1
  d0e248:	0d0e4440 	call	d0e444 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  d0e24c:	e0bffe17 	ldw	r2,-8(fp)
  d0e250:	10800417 	ldw	r2,16(r2)
  d0e254:	10800037 	ldwio	r2,0(r2)
  d0e258:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
  d0e25c:	e0bffe17 	ldw	r2,-8(fp)
  d0e260:	10800317 	ldw	r2,12(r2)
  d0e264:	10800037 	ldwio	r2,0(r2)
  d0e268:	1007883a 	mov	r3,r2
  d0e26c:	e0bffc17 	ldw	r2,-16(fp)
  d0e270:	1880091e 	bne	r3,r2,d0e298 <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
  d0e274:	e0ffff17 	ldw	r3,-4(fp)
  d0e278:	00bffd44 	movi	r2,-11
  d0e27c:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
  d0e280:	0d0df8c0 	call	d0df8c <alt_get_errno>
  d0e284:	1007883a 	mov	r3,r2
  d0e288:	008002c4 	movi	r2,11
  d0e28c:	18800015 	stw	r2,0(r3)
    msg = 0;
  d0e290:	e03ffd15 	stw	zero,-12(fp)
  d0e294:	00000c06 	br	d0e2c8 <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
  d0e298:	e0bffc17 	ldw	r2,-16(fp)
  d0e29c:	10800037 	ldwio	r2,0(r2)
  d0e2a0:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
  d0e2a4:	e0bffe17 	ldw	r2,-8(fp)
  d0e2a8:	10800417 	ldw	r2,16(r2)
  d0e2ac:	1021883a 	mov	r16,r2
  d0e2b0:	e13ffe17 	ldw	r4,-8(fp)
  d0e2b4:	e17ffc17 	ldw	r5,-16(fp)
  d0e2b8:	0d0e1200 	call	d0e120 <alt_mailbox_increment_ptr>
  d0e2bc:	1007883a 	mov	r3,r2
  d0e2c0:	8005883a 	mov	r2,r16
  d0e2c4:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
  d0e2c8:	e0bffe17 	ldw	r2,-8(fp)
  d0e2cc:	11000b04 	addi	r4,r2,44
  d0e2d0:	0d0e4c40 	call	d0e4c4 <altera_avalon_mutex_unlock>

  return msg;
  d0e2d4:	e0bffd17 	ldw	r2,-12(fp)

}
  d0e2d8:	e037883a 	mov	sp,fp
  d0e2dc:	dfc00217 	ldw	ra,8(sp)
  d0e2e0:	df000117 	ldw	fp,4(sp)
  d0e2e4:	dc000017 	ldw	r16,0(sp)
  d0e2e8:	dec00304 	addi	sp,sp,12
  d0e2ec:	f800283a 	ret

00d0e2f0 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  d0e2f0:	defff904 	addi	sp,sp,-28
  d0e2f4:	df000615 	stw	fp,24(sp)
  d0e2f8:	df000604 	addi	fp,sp,24
  d0e2fc:	e13ffe15 	stw	r4,-8(fp)
  d0e300:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
  d0e304:	00bfffc4 	movi	r2,-1
  d0e308:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
  d0e30c:	0005317a 	rdctl	r2,cpuid
  d0e310:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
  d0e314:	e0bffd17 	ldw	r2,-12(fp)
  d0e318:	1006943a 	slli	r3,r2,16
  d0e31c:	e0bfff17 	ldw	r2,-4(fp)
  d0e320:	1884b03a 	or	r2,r3,r2
  d0e324:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
  d0e328:	e0bffe17 	ldw	r2,-8(fp)
  d0e32c:	10800317 	ldw	r2,12(r2)
  d0e330:	e0fffc17 	ldw	r3,-16(fp)
  d0e334:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  d0e338:	e0bffe17 	ldw	r2,-8(fp)
  d0e33c:	10800317 	ldw	r2,12(r2)
  d0e340:	10800037 	ldwio	r2,0(r2)
  d0e344:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
  d0e348:	e0fffb17 	ldw	r3,-20(fp)
  d0e34c:	e0bffc17 	ldw	r2,-16(fp)
  d0e350:	1880011e 	bne	r3,r2,d0e358 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
  d0e354:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
  d0e358:	e0bffa17 	ldw	r2,-24(fp)
}
  d0e35c:	e037883a 	mov	sp,fp
  d0e360:	df000017 	ldw	fp,0(sp)
  d0e364:	dec00104 	addi	sp,sp,4
  d0e368:	f800283a 	ret

00d0e36c <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
  d0e36c:	defffc04 	addi	sp,sp,-16
  d0e370:	dfc00315 	stw	ra,12(sp)
  d0e374:	df000215 	stw	fp,8(sp)
  d0e378:	df000204 	addi	fp,sp,8
  d0e37c:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
  d0e380:	e13fff17 	ldw	r4,-4(fp)
  d0e384:	d1601704 	addi	r5,gp,-32676
  d0e388:	0d1005c0 	call	d1005c <alt_find_dev>
  d0e38c:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  d0e390:	e0bffe17 	ldw	r2,-8(fp)
  d0e394:	1004c03a 	cmpne	r2,r2,zero
  d0e398:	1000041e 	bne	r2,zero,d0e3ac <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  d0e39c:	0d0e3c40 	call	d0e3c4 <alt_get_errno>
  d0e3a0:	1007883a 	mov	r3,r2
  d0e3a4:	008004c4 	movi	r2,19
  d0e3a8:	18800015 	stw	r2,0(r3)
  }

  return dev;
  d0e3ac:	e0bffe17 	ldw	r2,-8(fp)
}
  d0e3b0:	e037883a 	mov	sp,fp
  d0e3b4:	dfc00117 	ldw	ra,4(sp)
  d0e3b8:	df000017 	ldw	fp,0(sp)
  d0e3bc:	dec00204 	addi	sp,sp,8
  d0e3c0:	f800283a 	ret

00d0e3c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0e3c4:	defffd04 	addi	sp,sp,-12
  d0e3c8:	dfc00215 	stw	ra,8(sp)
  d0e3cc:	df000115 	stw	fp,4(sp)
  d0e3d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0e3d4:	00803474 	movhi	r2,209
  d0e3d8:	108c5504 	addi	r2,r2,12628
  d0e3dc:	10800017 	ldw	r2,0(r2)
  d0e3e0:	1005003a 	cmpeq	r2,r2,zero
  d0e3e4:	1000061e 	bne	r2,zero,d0e400 <alt_get_errno+0x3c>
  d0e3e8:	00803474 	movhi	r2,209
  d0e3ec:	108c5504 	addi	r2,r2,12628
  d0e3f0:	10800017 	ldw	r2,0(r2)
  d0e3f4:	103ee83a 	callr	r2
  d0e3f8:	e0bfff15 	stw	r2,-4(fp)
  d0e3fc:	00000306 	br	d0e40c <alt_get_errno+0x48>
  d0e400:	00803474 	movhi	r2,209
  d0e404:	10935b04 	addi	r2,r2,19820
  d0e408:	e0bfff15 	stw	r2,-4(fp)
  d0e40c:	e0bfff17 	ldw	r2,-4(fp)
}
  d0e410:	e037883a 	mov	sp,fp
  d0e414:	dfc00117 	ldw	ra,4(sp)
  d0e418:	df000017 	ldw	fp,0(sp)
  d0e41c:	dec00204 	addi	sp,sp,8
  d0e420:	f800283a 	ret

00d0e424 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
  d0e424:	defffe04 	addi	sp,sp,-8
  d0e428:	df000115 	stw	fp,4(sp)
  d0e42c:	df000104 	addi	fp,sp,4
  d0e430:	e13fff15 	stw	r4,-4(fp)
  return;
}
  d0e434:	e037883a 	mov	sp,fp
  d0e438:	df000017 	ldw	fp,0(sp)
  d0e43c:	dec00104 	addi	sp,sp,4
  d0e440:	f800283a 	ret

00d0e444 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
  d0e444:	defffc04 	addi	sp,sp,-16
  d0e448:	dfc00315 	stw	ra,12(sp)
  d0e44c:	df000215 	stw	fp,8(sp)
  d0e450:	df000204 	addi	fp,sp,8
  d0e454:	e13ffe15 	stw	r4,-8(fp)
  d0e458:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
  d0e45c:	e13ffe17 	ldw	r4,-8(fp)
  d0e460:	e17fff17 	ldw	r5,-4(fp)
  d0e464:	0d0e2f00 	call	d0e2f0 <alt_mutex_trylock>
  d0e468:	1004c03a 	cmpne	r2,r2,zero
  d0e46c:	103ffb1e 	bne	r2,zero,d0e45c <altera_avalon_mutex_lock+0x18>
}
  d0e470:	e037883a 	mov	sp,fp
  d0e474:	dfc00117 	ldw	ra,4(sp)
  d0e478:	df000017 	ldw	fp,0(sp)
  d0e47c:	dec00204 	addi	sp,sp,8
  d0e480:	f800283a 	ret

00d0e484 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  d0e484:	defffb04 	addi	sp,sp,-20
  d0e488:	dfc00415 	stw	ra,16(sp)
  d0e48c:	df000315 	stw	fp,12(sp)
  d0e490:	df000304 	addi	fp,sp,12
  d0e494:	e13ffe15 	stw	r4,-8(fp)
  d0e498:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
  d0e49c:	e13ffe17 	ldw	r4,-8(fp)
  d0e4a0:	e17fff17 	ldw	r5,-4(fp)
  d0e4a4:	0d0e2f00 	call	d0e2f0 <alt_mutex_trylock>
  d0e4a8:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
  d0e4ac:	e0bffd17 	ldw	r2,-12(fp)
}
  d0e4b0:	e037883a 	mov	sp,fp
  d0e4b4:	dfc00117 	ldw	ra,4(sp)
  d0e4b8:	df000017 	ldw	fp,0(sp)
  d0e4bc:	dec00204 	addi	sp,sp,8
  d0e4c0:	f800283a 	ret

00d0e4c4 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  d0e4c4:	defffd04 	addi	sp,sp,-12
  d0e4c8:	df000215 	stw	fp,8(sp)
  d0e4cc:	df000204 	addi	fp,sp,8
  d0e4d0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
  d0e4d4:	0005317a 	rdctl	r2,cpuid
  d0e4d8:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
  d0e4dc:	e0bfff17 	ldw	r2,-4(fp)
  d0e4e0:	10800317 	ldw	r2,12(r2)
  d0e4e4:	10800104 	addi	r2,r2,4
  d0e4e8:	1007883a 	mov	r3,r2
  d0e4ec:	00800044 	movi	r2,1
  d0e4f0:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
  d0e4f4:	e0bfff17 	ldw	r2,-4(fp)
  d0e4f8:	11000317 	ldw	r4,12(r2)
  d0e4fc:	e0bffe17 	ldw	r2,-8(fp)
  d0e500:	1004943a 	slli	r2,r2,16
  d0e504:	1007883a 	mov	r3,r2
  d0e508:	2005883a 	mov	r2,r4
  d0e50c:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
  d0e510:	e037883a 	mov	sp,fp
  d0e514:	df000017 	ldw	fp,0(sp)
  d0e518:	dec00104 	addi	sp,sp,4
  d0e51c:	f800283a 	ret

00d0e520 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  d0e520:	defff904 	addi	sp,sp,-28
  d0e524:	df000615 	stw	fp,24(sp)
  d0e528:	df000604 	addi	fp,sp,24
  d0e52c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
  d0e530:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
  d0e534:	0005317a 	rdctl	r2,cpuid
  d0e538:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  d0e53c:	e0bfff17 	ldw	r2,-4(fp)
  d0e540:	10800317 	ldw	r2,12(r2)
  d0e544:	10800037 	ldwio	r2,0(r2)
  d0e548:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
  d0e54c:	e0bffd17 	ldw	r2,-12(fp)
  d0e550:	10bfffec 	andhi	r2,r2,65535
  d0e554:	1004d43a 	srli	r2,r2,16
  d0e558:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
  d0e55c:	e0fffc17 	ldw	r3,-16(fp)
  d0e560:	e0bffe17 	ldw	r2,-8(fp)
  d0e564:	1880081e 	bne	r3,r2,d0e588 <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
  d0e568:	e0bffd17 	ldw	r2,-12(fp)
  d0e56c:	10bfffcc 	andi	r2,r2,65535
  d0e570:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
  d0e574:	e0bffb17 	ldw	r2,-20(fp)
  d0e578:	1005003a 	cmpeq	r2,r2,zero
  d0e57c:	1000021e 	bne	r2,zero,d0e588 <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
  d0e580:	00800044 	movi	r2,1
  d0e584:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
  d0e588:	e0bffa17 	ldw	r2,-24(fp)
}
  d0e58c:	e037883a 	mov	sp,fp
  d0e590:	df000017 	ldw	fp,0(sp)
  d0e594:	dec00104 	addi	sp,sp,4
  d0e598:	f800283a 	ret

00d0e59c <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  d0e59c:	defffc04 	addi	sp,sp,-16
  d0e5a0:	df000315 	stw	fp,12(sp)
  d0e5a4:	df000304 	addi	fp,sp,12
  d0e5a8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
  d0e5ac:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
  d0e5b0:	e0bfff17 	ldw	r2,-4(fp)
  d0e5b4:	10800317 	ldw	r2,12(r2)
  d0e5b8:	10800104 	addi	r2,r2,4
  d0e5bc:	10800037 	ldwio	r2,0(r2)
  d0e5c0:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
  d0e5c4:	e0bffe17 	ldw	r2,-8(fp)
  d0e5c8:	1080004c 	andi	r2,r2,1
  d0e5cc:	10803fcc 	andi	r2,r2,255
  d0e5d0:	1005003a 	cmpeq	r2,r2,zero
  d0e5d4:	1000021e 	bne	r2,zero,d0e5e0 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
  d0e5d8:	00800044 	movi	r2,1
  d0e5dc:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
  d0e5e0:	e0bffd17 	ldw	r2,-12(fp)
}
  d0e5e4:	e037883a 	mov	sp,fp
  d0e5e8:	df000017 	ldw	fp,0(sp)
  d0e5ec:	dec00104 	addi	sp,sp,4
  d0e5f0:	f800283a 	ret

00d0e5f4 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
  d0e5f4:	defff904 	addi	sp,sp,-28
  d0e5f8:	df000615 	stw	fp,24(sp)
  d0e5fc:	df000604 	addi	fp,sp,24
  d0e600:	e13ffe15 	stw	r4,-8(fp)
  d0e604:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
  d0e608:	e03ffa15 	stw	zero,-24(fp)
  d0e60c:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
  d0e610:	e0bffe17 	ldw	r2,-8(fp)
  d0e614:	10000035 	stwio	zero,0(r2)
  lo = IORD(hw_base_address, ( which_section*4   ));
  d0e618:	e0bfff17 	ldw	r2,-4(fp)
  d0e61c:	1004913a 	slli	r2,r2,4
  d0e620:	1007883a 	mov	r3,r2
  d0e624:	e0bffe17 	ldw	r2,-8(fp)
  d0e628:	1885883a 	add	r2,r3,r2
  d0e62c:	10800037 	ldwio	r2,0(r2)
  d0e630:	e0bffd15 	stw	r2,-12(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
  d0e634:	e0bfff17 	ldw	r2,-4(fp)
  d0e638:	1004913a 	slli	r2,r2,4
  d0e63c:	1007883a 	mov	r3,r2
  d0e640:	e0bffe17 	ldw	r2,-8(fp)
  d0e644:	1885883a 	add	r2,r3,r2
  d0e648:	10800104 	addi	r2,r2,4
  d0e64c:	10800037 	ldwio	r2,0(r2)
  d0e650:	e0bffc15 	stw	r2,-16(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
  d0e654:	e0bffc17 	ldw	r2,-16(fp)
  d0e658:	0007883a 	mov	r3,zero
  d0e65c:	100a983a 	sll	r5,r2,zero
  d0e660:	0009883a 	mov	r4,zero
  d0e664:	e0bffd17 	ldw	r2,-12(fp)
  d0e668:	0007883a 	mov	r3,zero
  d0e66c:	208cb03a 	or	r6,r4,r2
  d0e670:	e1bffa15 	stw	r6,-24(fp)
  d0e674:	28c4b03a 	or	r2,r5,r3
  d0e678:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
  d0e67c:	e17ffa17 	ldw	r5,-24(fp)
  d0e680:	e1bffb17 	ldw	r6,-20(fp)
  d0e684:	2807883a 	mov	r3,r5
  d0e688:	3009883a 	mov	r4,r6
}
  d0e68c:	1805883a 	mov	r2,r3
  d0e690:	2007883a 	mov	r3,r4
  d0e694:	e037883a 	mov	sp,fp
  d0e698:	df000017 	ldw	fp,0(sp)
  d0e69c:	dec00104 	addi	sp,sp,4
  d0e6a0:	f800283a 	ret

00d0e6a4 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
  d0e6a4:	defffd04 	addi	sp,sp,-12
  d0e6a8:	dfc00215 	stw	ra,8(sp)
  d0e6ac:	df000115 	stw	fp,4(sp)
  d0e6b0:	df000104 	addi	fp,sp,4
  d0e6b4:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
  d0e6b8:	e13fff17 	ldw	r4,-4(fp)
  d0e6bc:	000b883a 	mov	r5,zero
  d0e6c0:	0d0e5f40 	call	d0e5f4 <perf_get_section_time>
  d0e6c4:	1009883a 	mov	r4,r2
  d0e6c8:	180b883a 	mov	r5,r3
  d0e6cc:	200d883a 	mov	r6,r4
  d0e6d0:	280f883a 	mov	r7,r5
  d0e6d4:	3007883a 	mov	r3,r6
  d0e6d8:	3809883a 	mov	r4,r7
}
  d0e6dc:	1805883a 	mov	r2,r3
  d0e6e0:	2007883a 	mov	r3,r4
  d0e6e4:	e037883a 	mov	sp,fp
  d0e6e8:	dfc00117 	ldw	ra,4(sp)
  d0e6ec:	df000017 	ldw	fp,0(sp)
  d0e6f0:	dec00204 	addi	sp,sp,8
  d0e6f4:	f800283a 	ret

00d0e6f8 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
  d0e6f8:	defffd04 	addi	sp,sp,-12
  d0e6fc:	df000215 	stw	fp,8(sp)
  d0e700:	df000204 	addi	fp,sp,8
  d0e704:	e13ffe15 	stw	r4,-8(fp)
  d0e708:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
  d0e70c:	e0bfff17 	ldw	r2,-4(fp)
  d0e710:	1004913a 	slli	r2,r2,4
  d0e714:	1007883a 	mov	r3,r2
  d0e718:	e0bffe17 	ldw	r2,-8(fp)
  d0e71c:	1885883a 	add	r2,r3,r2
  d0e720:	10800204 	addi	r2,r2,8
  d0e724:	10800037 	ldwio	r2,0(r2)
}
  d0e728:	e037883a 	mov	sp,fp
  d0e72c:	df000017 	ldw	fp,0(sp)
  d0e730:	dec00104 	addi	sp,sp,4
  d0e734:	f800283a 	ret

00d0e738 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
  d0e738:	deffff04 	addi	sp,sp,-4
  d0e73c:	df000015 	stw	fp,0(sp)
  d0e740:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
  d0e744:	0005883a 	mov	r2,zero
#else
    return (void*)0;
#endif
}
  d0e748:	e037883a 	mov	sp,fp
  d0e74c:	df000017 	ldw	fp,0(sp)
  d0e750:	dec00104 	addi	sp,sp,4
  d0e754:	f800283a 	ret

00d0e758 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
  d0e758:	deffff04 	addi	sp,sp,-4
  d0e75c:	df000015 	stw	fp,0(sp)
  d0e760:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
  d0e764:	0080bef4 	movhi	r2,763
  d0e768:	10bc2004 	addi	r2,r2,-3968
}
  d0e76c:	e037883a 	mov	sp,fp
  d0e770:	df000017 	ldw	fp,0(sp)
  d0e774:	dec00104 	addi	sp,sp,4
  d0e778:	f800283a 	ret

00d0e77c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  d0e77c:	defffc04 	addi	sp,sp,-16
  d0e780:	dfc00315 	stw	ra,12(sp)
  d0e784:	df000215 	stw	fp,8(sp)
  d0e788:	df000204 	addi	fp,sp,8
  d0e78c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  d0e790:	e13fff17 	ldw	r4,-4(fp)
  d0e794:	01403474 	movhi	r5,209
  d0e798:	294c5204 	addi	r5,r5,12616
  d0e79c:	0d1005c0 	call	d1005c <alt_find_dev>
  d0e7a0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  d0e7a4:	e0bffe17 	ldw	r2,-8(fp)
}
  d0e7a8:	e037883a 	mov	sp,fp
  d0e7ac:	dfc00117 	ldw	ra,4(sp)
  d0e7b0:	df000017 	ldw	fp,0(sp)
  d0e7b4:	dec00204 	addi	sp,sp,8
  d0e7b8:	f800283a 	ret

00d0e7bc <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  d0e7bc:	defff904 	addi	sp,sp,-28
  d0e7c0:	df000615 	stw	fp,24(sp)
  d0e7c4:	df000604 	addi	fp,sp,24
  d0e7c8:	e13ffb15 	stw	r4,-20(fp)
  d0e7cc:	e17ffc15 	stw	r5,-16(fp)
  d0e7d0:	e1bffd15 	stw	r6,-12(fp)
  d0e7d4:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  d0e7d8:	e0bffb17 	ldw	r2,-20(fp)
  d0e7dc:	10c00f17 	ldw	r3,60(r2)
  d0e7e0:	e0bffd17 	ldw	r2,-12(fp)
  d0e7e4:	10c0042e 	bgeu	r2,r3,d0e7f8 <alt_up_pixel_buffer_dma_draw+0x3c>
  d0e7e8:	e0bffb17 	ldw	r2,-20(fp)
  d0e7ec:	10c01017 	ldw	r3,64(r2)
  d0e7f0:	e0bffe17 	ldw	r2,-8(fp)
  d0e7f4:	10c00336 	bltu	r2,r3,d0e804 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  d0e7f8:	00bfffc4 	movi	r2,-1
  d0e7fc:	e0bfff15 	stw	r2,-4(fp)
  d0e800:	00005106 	br	d0e948 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  d0e804:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  d0e808:	e0bffb17 	ldw	r2,-20(fp)
  d0e80c:	10800d17 	ldw	r2,52(r2)
  d0e810:	1004c03a 	cmpne	r2,r2,zero
  d0e814:	1000151e 	bne	r2,zero,d0e86c <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  d0e818:	e0bffb17 	ldw	r2,-20(fp)
  d0e81c:	10c01217 	ldw	r3,72(r2)
  d0e820:	e0bffd17 	ldw	r2,-12(fp)
  d0e824:	1886703a 	and	r3,r3,r2
  d0e828:	e0bffb17 	ldw	r2,-20(fp)
  d0e82c:	10801117 	ldw	r2,68(r2)
  d0e830:	1886983a 	sll	r3,r3,r2
  d0e834:	e0bffa17 	ldw	r2,-24(fp)
  d0e838:	10c4b03a 	or	r2,r2,r3
  d0e83c:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  d0e840:	e0bffb17 	ldw	r2,-20(fp)
  d0e844:	10c01417 	ldw	r3,80(r2)
  d0e848:	e0bffe17 	ldw	r2,-8(fp)
  d0e84c:	1886703a 	and	r3,r3,r2
  d0e850:	e0bffb17 	ldw	r2,-20(fp)
  d0e854:	10801317 	ldw	r2,76(r2)
  d0e858:	1886983a 	sll	r3,r3,r2
  d0e85c:	e0bffa17 	ldw	r2,-24(fp)
  d0e860:	10c4b03a 	or	r2,r2,r3
  d0e864:	e0bffa15 	stw	r2,-24(fp)
  d0e868:	00001706 	br	d0e8c8 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  d0e86c:	e0bffb17 	ldw	r2,-20(fp)
  d0e870:	10c01217 	ldw	r3,72(r2)
  d0e874:	e0bffd17 	ldw	r2,-12(fp)
  d0e878:	1886703a 	and	r3,r3,r2
  d0e87c:	e0bffb17 	ldw	r2,-20(fp)
  d0e880:	10801117 	ldw	r2,68(r2)
  d0e884:	1886983a 	sll	r3,r3,r2
  d0e888:	e0bffa17 	ldw	r2,-24(fp)
  d0e88c:	10c5883a 	add	r2,r2,r3
  d0e890:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  d0e894:	e0bffb17 	ldw	r2,-20(fp)
  d0e898:	10c01417 	ldw	r3,80(r2)
  d0e89c:	e0bffe17 	ldw	r2,-8(fp)
  d0e8a0:	1886703a 	and	r3,r3,r2
  d0e8a4:	e0bffb17 	ldw	r2,-20(fp)
  d0e8a8:	10800f17 	ldw	r2,60(r2)
  d0e8ac:	1887383a 	mul	r3,r3,r2
  d0e8b0:	e0bffb17 	ldw	r2,-20(fp)
  d0e8b4:	10801117 	ldw	r2,68(r2)
  d0e8b8:	1886983a 	sll	r3,r3,r2
  d0e8bc:	e0bffa17 	ldw	r2,-24(fp)
  d0e8c0:	10c5883a 	add	r2,r2,r3
  d0e8c4:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  d0e8c8:	e0bffb17 	ldw	r2,-20(fp)
  d0e8cc:	10800e17 	ldw	r2,56(r2)
  d0e8d0:	10800058 	cmpnei	r2,r2,1
  d0e8d4:	1000081e 	bne	r2,zero,d0e8f8 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  d0e8d8:	e0bffb17 	ldw	r2,-20(fp)
  d0e8dc:	10800c17 	ldw	r2,48(r2)
  d0e8e0:	1007883a 	mov	r3,r2
  d0e8e4:	e0bffa17 	ldw	r2,-24(fp)
  d0e8e8:	1885883a 	add	r2,r3,r2
  d0e8ec:	e0fffc17 	ldw	r3,-16(fp)
  d0e8f0:	10c00025 	stbio	r3,0(r2)
  d0e8f4:	00001306 	br	d0e944 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  d0e8f8:	e0bffb17 	ldw	r2,-20(fp)
  d0e8fc:	10800e17 	ldw	r2,56(r2)
  d0e900:	10800098 	cmpnei	r2,r2,2
  d0e904:	1000081e 	bne	r2,zero,d0e928 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  d0e908:	e0bffb17 	ldw	r2,-20(fp)
  d0e90c:	10800c17 	ldw	r2,48(r2)
  d0e910:	1007883a 	mov	r3,r2
  d0e914:	e0bffa17 	ldw	r2,-24(fp)
  d0e918:	1885883a 	add	r2,r3,r2
  d0e91c:	e0fffc17 	ldw	r3,-16(fp)
  d0e920:	10c0002d 	sthio	r3,0(r2)
  d0e924:	00000706 	br	d0e944 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  d0e928:	e0bffb17 	ldw	r2,-20(fp)
  d0e92c:	10800c17 	ldw	r2,48(r2)
  d0e930:	1007883a 	mov	r3,r2
  d0e934:	e0bffa17 	ldw	r2,-24(fp)
  d0e938:	1885883a 	add	r2,r3,r2
  d0e93c:	e0fffc17 	ldw	r3,-16(fp)
  d0e940:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  d0e944:	e03fff15 	stw	zero,-4(fp)
  d0e948:	e0bfff17 	ldw	r2,-4(fp)
}
  d0e94c:	e037883a 	mov	sp,fp
  d0e950:	df000017 	ldw	fp,0(sp)
  d0e954:	dec00104 	addi	sp,sp,4
  d0e958:	f800283a 	ret

00d0e95c <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  d0e95c:	defffd04 	addi	sp,sp,-12
  d0e960:	df000215 	stw	fp,8(sp)
  d0e964:	df000204 	addi	fp,sp,8
  d0e968:	e13ffe15 	stw	r4,-8(fp)
  d0e96c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  d0e970:	e0bffe17 	ldw	r2,-8(fp)
  d0e974:	10800a17 	ldw	r2,40(r2)
  d0e978:	10800104 	addi	r2,r2,4
  d0e97c:	e0ffff17 	ldw	r3,-4(fp)
  d0e980:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  d0e984:	e0bffe17 	ldw	r2,-8(fp)
  d0e988:	10800a17 	ldw	r2,40(r2)
  d0e98c:	10800104 	addi	r2,r2,4
  d0e990:	10800037 	ldwio	r2,0(r2)
  d0e994:	1007883a 	mov	r3,r2
  d0e998:	e0bffe17 	ldw	r2,-8(fp)
  d0e99c:	10c00c15 	stw	r3,48(r2)
	return 0;
  d0e9a0:	0005883a 	mov	r2,zero
}
  d0e9a4:	e037883a 	mov	sp,fp
  d0e9a8:	df000017 	ldw	fp,0(sp)
  d0e9ac:	dec00104 	addi	sp,sp,4
  d0e9b0:	f800283a 	ret

00d0e9b4 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  d0e9b4:	defffe04 	addi	sp,sp,-8
  d0e9b8:	df000115 	stw	fp,4(sp)
  d0e9bc:	df000104 	addi	fp,sp,4
  d0e9c0:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  d0e9c4:	e0bfff17 	ldw	r2,-4(fp)
  d0e9c8:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  d0e9cc:	e0bfff17 	ldw	r2,-4(fp)
  d0e9d0:	10800a17 	ldw	r2,40(r2)
  d0e9d4:	1007883a 	mov	r3,r2
  d0e9d8:	00800044 	movi	r2,1
  d0e9dc:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  d0e9e0:	e0bfff17 	ldw	r2,-4(fp)
  d0e9e4:	10c00b17 	ldw	r3,44(r2)
  d0e9e8:	e0bfff17 	ldw	r2,-4(fp)
  d0e9ec:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  d0e9f0:	e0bfff17 	ldw	r2,-4(fp)
  d0e9f4:	11000b15 	stw	r4,44(r2)
	return 0;
  d0e9f8:	0005883a 	mov	r2,zero
}
  d0e9fc:	e037883a 	mov	sp,fp
  d0ea00:	df000017 	ldw	fp,0(sp)
  d0ea04:	dec00104 	addi	sp,sp,4
  d0ea08:	f800283a 	ret

00d0ea0c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  d0ea0c:	defffe04 	addi	sp,sp,-8
  d0ea10:	df000115 	stw	fp,4(sp)
  d0ea14:	df000104 	addi	fp,sp,4
  d0ea18:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  d0ea1c:	e0bfff17 	ldw	r2,-4(fp)
  d0ea20:	10800a17 	ldw	r2,40(r2)
  d0ea24:	10800304 	addi	r2,r2,12
  d0ea28:	10800037 	ldwio	r2,0(r2)
  d0ea2c:	1080004c 	andi	r2,r2,1
}
  d0ea30:	e037883a 	mov	sp,fp
  d0ea34:	df000017 	ldw	fp,0(sp)
  d0ea38:	dec00104 	addi	sp,sp,4
  d0ea3c:	f800283a 	ret

00d0ea40 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  d0ea40:	defff604 	addi	sp,sp,-40
  d0ea44:	df000915 	stw	fp,36(sp)
  d0ea48:	df000904 	addi	fp,sp,36
  d0ea4c:	e13ff715 	stw	r4,-36(fp)
  d0ea50:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  d0ea54:	e0bff817 	ldw	r2,-32(fp)
  d0ea58:	10800058 	cmpnei	r2,r2,1
  d0ea5c:	1000041e 	bne	r2,zero,d0ea70 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  d0ea60:	e0bff717 	ldw	r2,-36(fp)
  d0ea64:	10800c17 	ldw	r2,48(r2)
  d0ea68:	e0bfff15 	stw	r2,-4(fp)
  d0ea6c:	00000306 	br	d0ea7c <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  d0ea70:	e0bff717 	ldw	r2,-36(fp)
  d0ea74:	10800b17 	ldw	r2,44(r2)
  d0ea78:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  d0ea7c:	e0bff717 	ldw	r2,-36(fp)
  d0ea80:	10800f17 	ldw	r2,60(r2)
  d0ea84:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  d0ea88:	e0bff717 	ldw	r2,-36(fp)
  d0ea8c:	10800e17 	ldw	r2,56(r2)
  d0ea90:	10800098 	cmpnei	r2,r2,2
  d0ea94:	1000051e 	bne	r2,zero,d0eaac <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  d0ea98:	e0fffe17 	ldw	r3,-8(fp)
  d0ea9c:	e0fffe17 	ldw	r3,-8(fp)
  d0eaa0:	18c5883a 	add	r2,r3,r3
  d0eaa4:	e0bffe15 	stw	r2,-8(fp)
  d0eaa8:	00000506 	br	d0eac0 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  d0eaac:	e13ffe17 	ldw	r4,-8(fp)
  d0eab0:	e13ffe17 	ldw	r4,-8(fp)
  d0eab4:	2105883a 	add	r2,r4,r4
  d0eab8:	1085883a 	add	r2,r2,r2
  d0eabc:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  d0eac0:	e0bff717 	ldw	r2,-36(fp)
  d0eac4:	10801017 	ldw	r2,64(r2)
  d0eac8:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  d0eacc:	e0bff717 	ldw	r2,-36(fp)
  d0ead0:	10800d17 	ldw	r2,52(r2)
  d0ead4:	1004c03a 	cmpne	r2,r2,zero
  d0ead8:	10001e1e 	bne	r2,zero,d0eb54 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  d0eadc:	e0bff717 	ldw	r2,-36(fp)
  d0eae0:	10801317 	ldw	r2,76(r2)
  d0eae4:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  d0eae8:	e03ffb15 	stw	zero,-20(fp)
  d0eaec:	00001506 	br	d0eb44 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  d0eaf0:	e03ffc15 	stw	zero,-16(fp)
  d0eaf4:	00000706 	br	d0eb14 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  d0eaf8:	e0ffff17 	ldw	r3,-4(fp)
  d0eafc:	e0bffc17 	ldw	r2,-16(fp)
  d0eb00:	1885883a 	add	r2,r3,r2
  d0eb04:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  d0eb08:	e0bffc17 	ldw	r2,-16(fp)
  d0eb0c:	10800104 	addi	r2,r2,4
  d0eb10:	e0bffc15 	stw	r2,-16(fp)
  d0eb14:	e0fffc17 	ldw	r3,-16(fp)
  d0eb18:	e13ffe17 	ldw	r4,-8(fp)
  d0eb1c:	193ff636 	bltu	r3,r4,d0eaf8 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  d0eb20:	e0fffa17 	ldw	r3,-24(fp)
  d0eb24:	00800044 	movi	r2,1
  d0eb28:	10c4983a 	sll	r2,r2,r3
  d0eb2c:	e0ffff17 	ldw	r3,-4(fp)
  d0eb30:	1887883a 	add	r3,r3,r2
  d0eb34:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  d0eb38:	e13ffb17 	ldw	r4,-20(fp)
  d0eb3c:	21000044 	addi	r4,r4,1
  d0eb40:	e13ffb15 	stw	r4,-20(fp)
  d0eb44:	e0bffb17 	ldw	r2,-20(fp)
  d0eb48:	e0fffd17 	ldw	r3,-12(fp)
  d0eb4c:	10ffe836 	bltu	r2,r3,d0eaf0 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  d0eb50:	00001006 	br	d0eb94 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  d0eb54:	e13ffd17 	ldw	r4,-12(fp)
  d0eb58:	e0bffe17 	ldw	r2,-8(fp)
  d0eb5c:	2089383a 	mul	r4,r4,r2
  d0eb60:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  d0eb64:	e03ff915 	stw	zero,-28(fp)
  d0eb68:	00000706 	br	d0eb88 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  d0eb6c:	e0ffff17 	ldw	r3,-4(fp)
  d0eb70:	e0bff917 	ldw	r2,-28(fp)
  d0eb74:	1885883a 	add	r2,r3,r2
  d0eb78:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  d0eb7c:	e0fff917 	ldw	r3,-28(fp)
  d0eb80:	18c00104 	addi	r3,r3,4
  d0eb84:	e0fff915 	stw	r3,-28(fp)
  d0eb88:	e0bff917 	ldw	r2,-28(fp)
  d0eb8c:	e13ffd17 	ldw	r4,-12(fp)
  d0eb90:	113ff636 	bltu	r2,r4,d0eb6c <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  d0eb94:	e037883a 	mov	sp,fp
  d0eb98:	df000017 	ldw	fp,0(sp)
  d0eb9c:	dec00104 	addi	sp,sp,4
  d0eba0:	f800283a 	ret

00d0eba4 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  d0eba4:	deffed04 	addi	sp,sp,-76
  d0eba8:	df001215 	stw	fp,72(sp)
  d0ebac:	df001204 	addi	fp,sp,72
  d0ebb0:	e13fee15 	stw	r4,-72(fp)
  d0ebb4:	e17fef15 	stw	r5,-68(fp)
  d0ebb8:	e1bff015 	stw	r6,-64(fp)
  d0ebbc:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  d0ebc0:	e0bfee17 	ldw	r2,-72(fp)
  d0ebc4:	10800f17 	ldw	r2,60(r2)
  d0ebc8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  d0ebcc:	e0bfee17 	ldw	r2,-72(fp)
  d0ebd0:	10801017 	ldw	r2,64(r2)
  d0ebd4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  d0ebd8:	e0bfef17 	ldw	r2,-68(fp)
  d0ebdc:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  d0ebe0:	e0fff117 	ldw	r3,-60(fp)
  d0ebe4:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  d0ebe8:	e13ff017 	ldw	r4,-64(fp)
  d0ebec:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  d0ebf0:	e0800117 	ldw	r2,4(fp)
  d0ebf4:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  d0ebf8:	e0c00217 	ldw	r3,8(fp)
  d0ebfc:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  d0ec00:	e13ffa17 	ldw	r4,-24(fp)
  d0ec04:	e0bffb17 	ldw	r2,-20(fp)
  d0ec08:	2080062e 	bgeu	r4,r2,d0ec24 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  d0ec0c:	e0fffb17 	ldw	r3,-20(fp)
  d0ec10:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  d0ec14:	e13ffa17 	ldw	r4,-24(fp)
  d0ec18:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  d0ec1c:	e0bffc17 	ldw	r2,-16(fp)
  d0ec20:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  d0ec24:	e0fff817 	ldw	r3,-32(fp)
  d0ec28:	e13ff917 	ldw	r4,-28(fp)
  d0ec2c:	1900062e 	bgeu	r3,r4,d0ec48 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  d0ec30:	e0bff917 	ldw	r2,-28(fp)
  d0ec34:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  d0ec38:	e0fff817 	ldw	r3,-32(fp)
  d0ec3c:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  d0ec40:	e13ffc17 	ldw	r4,-16(fp)
  d0ec44:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  d0ec48:	e0bffb17 	ldw	r2,-20(fp)
  d0ec4c:	e0fffe17 	ldw	r3,-8(fp)
  d0ec50:	10c10d2e 	bgeu	r2,r3,d0f088 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  d0ec54:	e13ff917 	ldw	r4,-28(fp)
  d0ec58:	e0bffd17 	ldw	r2,-12(fp)
  d0ec5c:	20800136 	bltu	r4,r2,d0ec64 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  d0ec60:	00010906 	br	d0f088 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  d0ec64:	e0fffa17 	ldw	r3,-24(fp)
  d0ec68:	e13ffe17 	ldw	r4,-8(fp)
  d0ec6c:	19000336 	bltu	r3,r4,d0ec7c <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  d0ec70:	e0bffe17 	ldw	r2,-8(fp)
  d0ec74:	10bfffc4 	addi	r2,r2,-1
  d0ec78:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  d0ec7c:	e0fff817 	ldw	r3,-32(fp)
  d0ec80:	e13ffd17 	ldw	r4,-12(fp)
  d0ec84:	19000336 	bltu	r3,r4,d0ec94 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  d0ec88:	e0bffd17 	ldw	r2,-12(fp)
  d0ec8c:	10bfffc4 	addi	r2,r2,-1
  d0ec90:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  d0ec94:	e0800317 	ldw	r2,12(fp)
  d0ec98:	10800058 	cmpnei	r2,r2,1
  d0ec9c:	1000041e 	bne	r2,zero,d0ecb0 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  d0eca0:	e0bfee17 	ldw	r2,-72(fp)
  d0eca4:	10800c17 	ldw	r2,48(r2)
  d0eca8:	e0bfff15 	stw	r2,-4(fp)
  d0ecac:	00000306 	br	d0ecbc <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  d0ecb0:	e0bfee17 	ldw	r2,-72(fp)
  d0ecb4:	10800b17 	ldw	r2,44(r2)
  d0ecb8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  d0ecbc:	e0bfee17 	ldw	r2,-72(fp)
  d0ecc0:	10800d17 	ldw	r2,52(r2)
  d0ecc4:	1004c03a 	cmpne	r2,r2,zero
  d0ecc8:	1000721e 	bne	r2,zero,d0ee94 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  d0eccc:	e0bfee17 	ldw	r2,-72(fp)
  d0ecd0:	10801317 	ldw	r2,76(r2)
  d0ecd4:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  d0ecd8:	e0bff417 	ldw	r2,-48(fp)
  d0ecdc:	e0fff917 	ldw	r3,-28(fp)
  d0ece0:	1884983a 	sll	r2,r3,r2
  d0ece4:	e13fff17 	ldw	r4,-4(fp)
  d0ece8:	2089883a 	add	r4,r4,r2
  d0ecec:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  d0ecf0:	e0bfee17 	ldw	r2,-72(fp)
  d0ecf4:	10800e17 	ldw	r2,56(r2)
  d0ecf8:	10800058 	cmpnei	r2,r2,1
  d0ecfc:	10001e1e 	bne	r2,zero,d0ed78 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  d0ed00:	e0bff917 	ldw	r2,-28(fp)
  d0ed04:	e0bff515 	stw	r2,-44(fp)
  d0ed08:	00001706 	br	d0ed68 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  d0ed0c:	e0fffb17 	ldw	r3,-20(fp)
  d0ed10:	e0fff615 	stw	r3,-40(fp)
  d0ed14:	00000806 	br	d0ed38 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  d0ed18:	e0ffff17 	ldw	r3,-4(fp)
  d0ed1c:	e0bff617 	ldw	r2,-40(fp)
  d0ed20:	1885883a 	add	r2,r3,r2
  d0ed24:	e0fff717 	ldw	r3,-36(fp)
  d0ed28:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  d0ed2c:	e13ff617 	ldw	r4,-40(fp)
  d0ed30:	21000044 	addi	r4,r4,1
  d0ed34:	e13ff615 	stw	r4,-40(fp)
  d0ed38:	e0bffa17 	ldw	r2,-24(fp)
  d0ed3c:	e0fff617 	ldw	r3,-40(fp)
  d0ed40:	10fff52e 	bgeu	r2,r3,d0ed18 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  d0ed44:	e0fff417 	ldw	r3,-48(fp)
  d0ed48:	00800044 	movi	r2,1
  d0ed4c:	10c4983a 	sll	r2,r2,r3
  d0ed50:	e13fff17 	ldw	r4,-4(fp)
  d0ed54:	2089883a 	add	r4,r4,r2
  d0ed58:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  d0ed5c:	e0bff517 	ldw	r2,-44(fp)
  d0ed60:	10800044 	addi	r2,r2,1
  d0ed64:	e0bff515 	stw	r2,-44(fp)
  d0ed68:	e0fff817 	ldw	r3,-32(fp)
  d0ed6c:	e13ff517 	ldw	r4,-44(fp)
  d0ed70:	193fe62e 	bgeu	r3,r4,d0ed0c <alt_up_pixel_buffer_dma_draw_box+0x168>
  d0ed74:	0000c406 	br	d0f088 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  d0ed78:	e0bfee17 	ldw	r2,-72(fp)
  d0ed7c:	10800e17 	ldw	r2,56(r2)
  d0ed80:	10800098 	cmpnei	r2,r2,2
  d0ed84:	1000211e 	bne	r2,zero,d0ee0c <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  d0ed88:	e0bff917 	ldw	r2,-28(fp)
  d0ed8c:	e0bff515 	stw	r2,-44(fp)
  d0ed90:	00001a06 	br	d0edfc <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  d0ed94:	e0fffb17 	ldw	r3,-20(fp)
  d0ed98:	e0fff615 	stw	r3,-40(fp)
  d0ed9c:	00000b06 	br	d0edcc <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  d0eda0:	e13ff617 	ldw	r4,-40(fp)
  d0eda4:	e13ff617 	ldw	r4,-40(fp)
  d0eda8:	2105883a 	add	r2,r4,r4
  d0edac:	1007883a 	mov	r3,r2
  d0edb0:	e0bfff17 	ldw	r2,-4(fp)
  d0edb4:	1885883a 	add	r2,r3,r2
  d0edb8:	e0fff717 	ldw	r3,-36(fp)
  d0edbc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  d0edc0:	e0bff617 	ldw	r2,-40(fp)
  d0edc4:	10800044 	addi	r2,r2,1
  d0edc8:	e0bff615 	stw	r2,-40(fp)
  d0edcc:	e0fffa17 	ldw	r3,-24(fp)
  d0edd0:	e13ff617 	ldw	r4,-40(fp)
  d0edd4:	193ff22e 	bgeu	r3,r4,d0eda0 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  d0edd8:	e0fff417 	ldw	r3,-48(fp)
  d0eddc:	00800044 	movi	r2,1
  d0ede0:	10c4983a 	sll	r2,r2,r3
  d0ede4:	e0ffff17 	ldw	r3,-4(fp)
  d0ede8:	1887883a 	add	r3,r3,r2
  d0edec:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  d0edf0:	e13ff517 	ldw	r4,-44(fp)
  d0edf4:	21000044 	addi	r4,r4,1
  d0edf8:	e13ff515 	stw	r4,-44(fp)
  d0edfc:	e0bff817 	ldw	r2,-32(fp)
  d0ee00:	e0fff517 	ldw	r3,-44(fp)
  d0ee04:	10ffe32e 	bgeu	r2,r3,d0ed94 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  d0ee08:	00009f06 	br	d0f088 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  d0ee0c:	e13ff917 	ldw	r4,-28(fp)
  d0ee10:	e13ff515 	stw	r4,-44(fp)
  d0ee14:	00001b06 	br	d0ee84 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  d0ee18:	e0bffb17 	ldw	r2,-20(fp)
  d0ee1c:	e0bff615 	stw	r2,-40(fp)
  d0ee20:	00000c06 	br	d0ee54 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  d0ee24:	e0fff617 	ldw	r3,-40(fp)
  d0ee28:	e0fff617 	ldw	r3,-40(fp)
  d0ee2c:	18c5883a 	add	r2,r3,r3
  d0ee30:	1085883a 	add	r2,r2,r2
  d0ee34:	1007883a 	mov	r3,r2
  d0ee38:	e0bfff17 	ldw	r2,-4(fp)
  d0ee3c:	1885883a 	add	r2,r3,r2
  d0ee40:	e0fff717 	ldw	r3,-36(fp)
  d0ee44:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  d0ee48:	e13ff617 	ldw	r4,-40(fp)
  d0ee4c:	21000044 	addi	r4,r4,1
  d0ee50:	e13ff615 	stw	r4,-40(fp)
  d0ee54:	e0bffa17 	ldw	r2,-24(fp)
  d0ee58:	e0fff617 	ldw	r3,-40(fp)
  d0ee5c:	10fff12e 	bgeu	r2,r3,d0ee24 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  d0ee60:	e0fff417 	ldw	r3,-48(fp)
  d0ee64:	00800044 	movi	r2,1
  d0ee68:	10c4983a 	sll	r2,r2,r3
  d0ee6c:	e13fff17 	ldw	r4,-4(fp)
  d0ee70:	2089883a 	add	r4,r4,r2
  d0ee74:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  d0ee78:	e0bff517 	ldw	r2,-44(fp)
  d0ee7c:	10800044 	addi	r2,r2,1
  d0ee80:	e0bff515 	stw	r2,-44(fp)
  d0ee84:	e0fff817 	ldw	r3,-32(fp)
  d0ee88:	e13ff517 	ldw	r4,-44(fp)
  d0ee8c:	193fe22e 	bgeu	r3,r4,d0ee18 <alt_up_pixel_buffer_dma_draw_box+0x274>
  d0ee90:	00007d06 	br	d0f088 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  d0ee94:	e0bfee17 	ldw	r2,-72(fp)
  d0ee98:	10800e17 	ldw	r2,56(r2)
  d0ee9c:	10800058 	cmpnei	r2,r2,1
  d0eea0:	1000221e 	bne	r2,zero,d0ef2c <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  d0eea4:	e0fff917 	ldw	r3,-28(fp)
  d0eea8:	e13ffe17 	ldw	r4,-8(fp)
  d0eeac:	1905383a 	mul	r2,r3,r4
  d0eeb0:	e0ffff17 	ldw	r3,-4(fp)
  d0eeb4:	1887883a 	add	r3,r3,r2
  d0eeb8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  d0eebc:	e13ff917 	ldw	r4,-28(fp)
  d0eec0:	e13ff215 	stw	r4,-56(fp)
  d0eec4:	00001506 	br	d0ef1c <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  d0eec8:	e0bffb17 	ldw	r2,-20(fp)
  d0eecc:	e0bff315 	stw	r2,-52(fp)
  d0eed0:	00000806 	br	d0eef4 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  d0eed4:	e0ffff17 	ldw	r3,-4(fp)
  d0eed8:	e0bff317 	ldw	r2,-52(fp)
  d0eedc:	1885883a 	add	r2,r3,r2
  d0eee0:	e0fff717 	ldw	r3,-36(fp)
  d0eee4:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  d0eee8:	e0fff317 	ldw	r3,-52(fp)
  d0eeec:	18c00044 	addi	r3,r3,1
  d0eef0:	e0fff315 	stw	r3,-52(fp)
  d0eef4:	e13ffa17 	ldw	r4,-24(fp)
  d0eef8:	e0bff317 	ldw	r2,-52(fp)
  d0eefc:	20bff52e 	bgeu	r4,r2,d0eed4 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  d0ef00:	e0ffff17 	ldw	r3,-4(fp)
  d0ef04:	e13ffe17 	ldw	r4,-8(fp)
  d0ef08:	1907883a 	add	r3,r3,r4
  d0ef0c:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  d0ef10:	e0bff217 	ldw	r2,-56(fp)
  d0ef14:	10800044 	addi	r2,r2,1
  d0ef18:	e0bff215 	stw	r2,-56(fp)
  d0ef1c:	e0fff817 	ldw	r3,-32(fp)
  d0ef20:	e13ff217 	ldw	r4,-56(fp)
  d0ef24:	193fe82e 	bgeu	r3,r4,d0eec8 <alt_up_pixel_buffer_dma_draw_box+0x324>
  d0ef28:	00005706 	br	d0f088 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  d0ef2c:	e0bfee17 	ldw	r2,-72(fp)
  d0ef30:	10800e17 	ldw	r2,56(r2)
  d0ef34:	10800098 	cmpnei	r2,r2,2
  d0ef38:	1000291e 	bne	r2,zero,d0efe0 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  d0ef3c:	e0fffe17 	ldw	r3,-8(fp)
  d0ef40:	e0fffe17 	ldw	r3,-8(fp)
  d0ef44:	18c5883a 	add	r2,r3,r3
  d0ef48:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  d0ef4c:	e13ff917 	ldw	r4,-28(fp)
  d0ef50:	e0fffe17 	ldw	r3,-8(fp)
  d0ef54:	20c5383a 	mul	r2,r4,r3
  d0ef58:	e13fff17 	ldw	r4,-4(fp)
  d0ef5c:	2089883a 	add	r4,r4,r2
  d0ef60:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  d0ef64:	e0bff917 	ldw	r2,-28(fp)
  d0ef68:	e0bff215 	stw	r2,-56(fp)
  d0ef6c:	00001806 	br	d0efd0 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  d0ef70:	e0fffb17 	ldw	r3,-20(fp)
  d0ef74:	e0fff315 	stw	r3,-52(fp)
  d0ef78:	00000b06 	br	d0efa8 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  d0ef7c:	e13ff317 	ldw	r4,-52(fp)
  d0ef80:	e13ff317 	ldw	r4,-52(fp)
  d0ef84:	2105883a 	add	r2,r4,r4
  d0ef88:	1007883a 	mov	r3,r2
  d0ef8c:	e0bfff17 	ldw	r2,-4(fp)
  d0ef90:	1885883a 	add	r2,r3,r2
  d0ef94:	e0fff717 	ldw	r3,-36(fp)
  d0ef98:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  d0ef9c:	e0bff317 	ldw	r2,-52(fp)
  d0efa0:	10800044 	addi	r2,r2,1
  d0efa4:	e0bff315 	stw	r2,-52(fp)
  d0efa8:	e0fffa17 	ldw	r3,-24(fp)
  d0efac:	e13ff317 	ldw	r4,-52(fp)
  d0efb0:	193ff22e 	bgeu	r3,r4,d0ef7c <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  d0efb4:	e0bfff17 	ldw	r2,-4(fp)
  d0efb8:	e0fffe17 	ldw	r3,-8(fp)
  d0efbc:	10c5883a 	add	r2,r2,r3
  d0efc0:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  d0efc4:	e13ff217 	ldw	r4,-56(fp)
  d0efc8:	21000044 	addi	r4,r4,1
  d0efcc:	e13ff215 	stw	r4,-56(fp)
  d0efd0:	e0bff817 	ldw	r2,-32(fp)
  d0efd4:	e0fff217 	ldw	r3,-56(fp)
  d0efd8:	10ffe52e 	bgeu	r2,r3,d0ef70 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  d0efdc:	00002a06 	br	d0f088 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  d0efe0:	e13ffe17 	ldw	r4,-8(fp)
  d0efe4:	e13ffe17 	ldw	r4,-8(fp)
  d0efe8:	2105883a 	add	r2,r4,r4
  d0efec:	1085883a 	add	r2,r2,r2
  d0eff0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  d0eff4:	e0fff917 	ldw	r3,-28(fp)
  d0eff8:	e13ffe17 	ldw	r4,-8(fp)
  d0effc:	1905383a 	mul	r2,r3,r4
  d0f000:	e0ffff17 	ldw	r3,-4(fp)
  d0f004:	1887883a 	add	r3,r3,r2
  d0f008:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  d0f00c:	e13ff917 	ldw	r4,-28(fp)
  d0f010:	e13ff215 	stw	r4,-56(fp)
  d0f014:	00001906 	br	d0f07c <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  d0f018:	e0bffb17 	ldw	r2,-20(fp)
  d0f01c:	e0bff315 	stw	r2,-52(fp)
  d0f020:	00000c06 	br	d0f054 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  d0f024:	e0fff317 	ldw	r3,-52(fp)
  d0f028:	e0fff317 	ldw	r3,-52(fp)
  d0f02c:	18c5883a 	add	r2,r3,r3
  d0f030:	1085883a 	add	r2,r2,r2
  d0f034:	1007883a 	mov	r3,r2
  d0f038:	e0bfff17 	ldw	r2,-4(fp)
  d0f03c:	1885883a 	add	r2,r3,r2
  d0f040:	e0fff717 	ldw	r3,-36(fp)
  d0f044:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  d0f048:	e13ff317 	ldw	r4,-52(fp)
  d0f04c:	21000044 	addi	r4,r4,1
  d0f050:	e13ff315 	stw	r4,-52(fp)
  d0f054:	e0bffa17 	ldw	r2,-24(fp)
  d0f058:	e0fff317 	ldw	r3,-52(fp)
  d0f05c:	10fff12e 	bgeu	r2,r3,d0f024 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  d0f060:	e13fff17 	ldw	r4,-4(fp)
  d0f064:	e0bffe17 	ldw	r2,-8(fp)
  d0f068:	2089883a 	add	r4,r4,r2
  d0f06c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  d0f070:	e0fff217 	ldw	r3,-56(fp)
  d0f074:	18c00044 	addi	r3,r3,1
  d0f078:	e0fff215 	stw	r3,-56(fp)
  d0f07c:	e13ff817 	ldw	r4,-32(fp)
  d0f080:	e0bff217 	ldw	r2,-56(fp)
  d0f084:	20bfe42e 	bgeu	r4,r2,d0f018 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  d0f088:	e037883a 	mov	sp,fp
  d0f08c:	df000017 	ldw	fp,0(sp)
  d0f090:	dec00104 	addi	sp,sp,4
  d0f094:	f800283a 	ret

00d0f098 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  d0f098:	defff204 	addi	sp,sp,-56
  d0f09c:	df000d15 	stw	fp,52(sp)
  d0f0a0:	df000d04 	addi	fp,sp,52
  d0f0a4:	e13ff315 	stw	r4,-52(fp)
  d0f0a8:	e17ff415 	stw	r5,-48(fp)
  d0f0ac:	e1bff515 	stw	r6,-44(fp)
  d0f0b0:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  d0f0b4:	e0bff317 	ldw	r2,-52(fp)
  d0f0b8:	10800f17 	ldw	r2,60(r2)
  d0f0bc:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  d0f0c0:	e0bff317 	ldw	r2,-52(fp)
  d0f0c4:	10801017 	ldw	r2,64(r2)
  d0f0c8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  d0f0cc:	e0bff417 	ldw	r2,-48(fp)
  d0f0d0:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  d0f0d4:	e0fff517 	ldw	r3,-44(fp)
  d0f0d8:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  d0f0dc:	e13ff617 	ldw	r4,-40(fp)
  d0f0e0:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  d0f0e4:	e0800117 	ldw	r2,4(fp)
  d0f0e8:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  d0f0ec:	e0fffb17 	ldw	r3,-20(fp)
  d0f0f0:	e13ffc17 	ldw	r4,-16(fp)
  d0f0f4:	1900042e 	bgeu	r3,r4,d0f108 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  d0f0f8:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  d0f0fc:	e0fffb17 	ldw	r3,-20(fp)
  d0f100:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  d0f104:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  d0f108:	e13ffc17 	ldw	r4,-16(fp)
  d0f10c:	e0bffe17 	ldw	r2,-8(fp)
  d0f110:	2080b12e 	bgeu	r4,r2,d0f3d8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
  d0f114:	e0fffa17 	ldw	r3,-24(fp)
  d0f118:	e13ffd17 	ldw	r4,-12(fp)
  d0f11c:	19000136 	bltu	r3,r4,d0f124 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  d0f120:	0000ad06 	br	d0f3d8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  d0f124:	e0bffb17 	ldw	r2,-20(fp)
  d0f128:	e0fffe17 	ldw	r3,-8(fp)
  d0f12c:	10c00336 	bltu	r2,r3,d0f13c <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  d0f130:	e13ffe17 	ldw	r4,-8(fp)
  d0f134:	213fffc4 	addi	r4,r4,-1
  d0f138:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  d0f13c:	e0800217 	ldw	r2,8(fp)
  d0f140:	10800058 	cmpnei	r2,r2,1
  d0f144:	1000041e 	bne	r2,zero,d0f158 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  d0f148:	e0bff317 	ldw	r2,-52(fp)
  d0f14c:	10800c17 	ldw	r2,48(r2)
  d0f150:	e0bfff15 	stw	r2,-4(fp)
  d0f154:	00000306 	br	d0f164 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  d0f158:	e0bff317 	ldw	r2,-52(fp)
  d0f15c:	10800b17 	ldw	r2,44(r2)
  d0f160:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  d0f164:	e0bff317 	ldw	r2,-52(fp)
  d0f168:	10800d17 	ldw	r2,52(r2)
  d0f16c:	1004c03a 	cmpne	r2,r2,zero
  d0f170:	1000431e 	bne	r2,zero,d0f280 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  d0f174:	e0bff317 	ldw	r2,-52(fp)
  d0f178:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  d0f17c:	e0fffa17 	ldw	r3,-24(fp)
  d0f180:	1884983a 	sll	r2,r3,r2
  d0f184:	e13fff17 	ldw	r4,-4(fp)
  d0f188:	2089883a 	add	r4,r4,r2
  d0f18c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  d0f190:	e0bff317 	ldw	r2,-52(fp)
  d0f194:	10800e17 	ldw	r2,56(r2)
  d0f198:	10800058 	cmpnei	r2,r2,1
  d0f19c:	10000f1e 	bne	r2,zero,d0f1dc <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  d0f1a0:	e0bffc17 	ldw	r2,-16(fp)
  d0f1a4:	e0bff815 	stw	r2,-32(fp)
  d0f1a8:	00000806 	br	d0f1cc <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  d0f1ac:	e0ffff17 	ldw	r3,-4(fp)
  d0f1b0:	e0bff817 	ldw	r2,-32(fp)
  d0f1b4:	1885883a 	add	r2,r3,r2
  d0f1b8:	e0fff917 	ldw	r3,-28(fp)
  d0f1bc:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  d0f1c0:	e0fff817 	ldw	r3,-32(fp)
  d0f1c4:	18c00044 	addi	r3,r3,1
  d0f1c8:	e0fff815 	stw	r3,-32(fp)
  d0f1cc:	e13ffb17 	ldw	r4,-20(fp)
  d0f1d0:	e0bff817 	ldw	r2,-32(fp)
  d0f1d4:	20bff52e 	bgeu	r4,r2,d0f1ac <alt_up_pixel_buffer_dma_draw_hline+0x114>
  d0f1d8:	00007f06 	br	d0f3d8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  d0f1dc:	e0bff317 	ldw	r2,-52(fp)
  d0f1e0:	10800e17 	ldw	r2,56(r2)
  d0f1e4:	10800098 	cmpnei	r2,r2,2
  d0f1e8:	1000121e 	bne	r2,zero,d0f234 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  d0f1ec:	e0fffc17 	ldw	r3,-16(fp)
  d0f1f0:	e0fff815 	stw	r3,-32(fp)
  d0f1f4:	00000b06 	br	d0f224 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  d0f1f8:	e13ff817 	ldw	r4,-32(fp)
  d0f1fc:	e13ff817 	ldw	r4,-32(fp)
  d0f200:	2105883a 	add	r2,r4,r4
  d0f204:	1007883a 	mov	r3,r2
  d0f208:	e0bfff17 	ldw	r2,-4(fp)
  d0f20c:	1885883a 	add	r2,r3,r2
  d0f210:	e0fff917 	ldw	r3,-28(fp)
  d0f214:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  d0f218:	e0bff817 	ldw	r2,-32(fp)
  d0f21c:	10800044 	addi	r2,r2,1
  d0f220:	e0bff815 	stw	r2,-32(fp)
  d0f224:	e0fffb17 	ldw	r3,-20(fp)
  d0f228:	e13ff817 	ldw	r4,-32(fp)
  d0f22c:	193ff22e 	bgeu	r3,r4,d0f1f8 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  d0f230:	00006906 	br	d0f3d8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  d0f234:	e0bffc17 	ldw	r2,-16(fp)
  d0f238:	e0bff815 	stw	r2,-32(fp)
  d0f23c:	00000c06 	br	d0f270 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  d0f240:	e0fff817 	ldw	r3,-32(fp)
  d0f244:	e0fff817 	ldw	r3,-32(fp)
  d0f248:	18c5883a 	add	r2,r3,r3
  d0f24c:	1085883a 	add	r2,r2,r2
  d0f250:	1007883a 	mov	r3,r2
  d0f254:	e0bfff17 	ldw	r2,-4(fp)
  d0f258:	1885883a 	add	r2,r3,r2
  d0f25c:	e0fff917 	ldw	r3,-28(fp)
  d0f260:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  d0f264:	e13ff817 	ldw	r4,-32(fp)
  d0f268:	21000044 	addi	r4,r4,1
  d0f26c:	e13ff815 	stw	r4,-32(fp)
  d0f270:	e0bffb17 	ldw	r2,-20(fp)
  d0f274:	e0fff817 	ldw	r3,-32(fp)
  d0f278:	10fff12e 	bgeu	r2,r3,d0f240 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  d0f27c:	00005606 	br	d0f3d8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  d0f280:	e0bff317 	ldw	r2,-52(fp)
  d0f284:	10800e17 	ldw	r2,56(r2)
  d0f288:	10800058 	cmpnei	r2,r2,1
  d0f28c:	1000151e 	bne	r2,zero,d0f2e4 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  d0f290:	e13ffa17 	ldw	r4,-24(fp)
  d0f294:	e0fffe17 	ldw	r3,-8(fp)
  d0f298:	20c5383a 	mul	r2,r4,r3
  d0f29c:	e13fff17 	ldw	r4,-4(fp)
  d0f2a0:	2089883a 	add	r4,r4,r2
  d0f2a4:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  d0f2a8:	e0bffc17 	ldw	r2,-16(fp)
  d0f2ac:	e0bff715 	stw	r2,-36(fp)
  d0f2b0:	00000806 	br	d0f2d4 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  d0f2b4:	e0ffff17 	ldw	r3,-4(fp)
  d0f2b8:	e0bff717 	ldw	r2,-36(fp)
  d0f2bc:	1885883a 	add	r2,r3,r2
  d0f2c0:	e0fff917 	ldw	r3,-28(fp)
  d0f2c4:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  d0f2c8:	e0fff717 	ldw	r3,-36(fp)
  d0f2cc:	18c00044 	addi	r3,r3,1
  d0f2d0:	e0fff715 	stw	r3,-36(fp)
  d0f2d4:	e13ffb17 	ldw	r4,-20(fp)
  d0f2d8:	e0bff717 	ldw	r2,-36(fp)
  d0f2dc:	20bff52e 	bgeu	r4,r2,d0f2b4 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  d0f2e0:	00003d06 	br	d0f3d8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  d0f2e4:	e0bff317 	ldw	r2,-52(fp)
  d0f2e8:	10800e17 	ldw	r2,56(r2)
  d0f2ec:	10800098 	cmpnei	r2,r2,2
  d0f2f0:	10001c1e 	bne	r2,zero,d0f364 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  d0f2f4:	e0fffe17 	ldw	r3,-8(fp)
  d0f2f8:	e0fffe17 	ldw	r3,-8(fp)
  d0f2fc:	18c5883a 	add	r2,r3,r3
  d0f300:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  d0f304:	e13ffa17 	ldw	r4,-24(fp)
  d0f308:	e0fffe17 	ldw	r3,-8(fp)
  d0f30c:	20c5383a 	mul	r2,r4,r3
  d0f310:	e13fff17 	ldw	r4,-4(fp)
  d0f314:	2089883a 	add	r4,r4,r2
  d0f318:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  d0f31c:	e0bffc17 	ldw	r2,-16(fp)
  d0f320:	e0bff715 	stw	r2,-36(fp)
  d0f324:	00000b06 	br	d0f354 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  d0f328:	e0fff717 	ldw	r3,-36(fp)
  d0f32c:	e0fff717 	ldw	r3,-36(fp)
  d0f330:	18c5883a 	add	r2,r3,r3
  d0f334:	1007883a 	mov	r3,r2
  d0f338:	e0bfff17 	ldw	r2,-4(fp)
  d0f33c:	1885883a 	add	r2,r3,r2
  d0f340:	e0fff917 	ldw	r3,-28(fp)
  d0f344:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  d0f348:	e13ff717 	ldw	r4,-36(fp)
  d0f34c:	21000044 	addi	r4,r4,1
  d0f350:	e13ff715 	stw	r4,-36(fp)
  d0f354:	e0bffb17 	ldw	r2,-20(fp)
  d0f358:	e0fff717 	ldw	r3,-36(fp)
  d0f35c:	10fff22e 	bgeu	r2,r3,d0f328 <alt_up_pixel_buffer_dma_draw_hline+0x290>
  d0f360:	00001d06 	br	d0f3d8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  d0f364:	e13ffe17 	ldw	r4,-8(fp)
  d0f368:	e13ffe17 	ldw	r4,-8(fp)
  d0f36c:	2105883a 	add	r2,r4,r4
  d0f370:	1085883a 	add	r2,r2,r2
  d0f374:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  d0f378:	e0fffa17 	ldw	r3,-24(fp)
  d0f37c:	e13ffe17 	ldw	r4,-8(fp)
  d0f380:	1905383a 	mul	r2,r3,r4
  d0f384:	e0ffff17 	ldw	r3,-4(fp)
  d0f388:	1887883a 	add	r3,r3,r2
  d0f38c:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  d0f390:	e13ffc17 	ldw	r4,-16(fp)
  d0f394:	e13ff715 	stw	r4,-36(fp)
  d0f398:	00000c06 	br	d0f3cc <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  d0f39c:	e0fff717 	ldw	r3,-36(fp)
  d0f3a0:	e0fff717 	ldw	r3,-36(fp)
  d0f3a4:	18c5883a 	add	r2,r3,r3
  d0f3a8:	1085883a 	add	r2,r2,r2
  d0f3ac:	1007883a 	mov	r3,r2
  d0f3b0:	e0bfff17 	ldw	r2,-4(fp)
  d0f3b4:	1885883a 	add	r2,r3,r2
  d0f3b8:	e0fff917 	ldw	r3,-28(fp)
  d0f3bc:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  d0f3c0:	e13ff717 	ldw	r4,-36(fp)
  d0f3c4:	21000044 	addi	r4,r4,1
  d0f3c8:	e13ff715 	stw	r4,-36(fp)
  d0f3cc:	e0bffb17 	ldw	r2,-20(fp)
  d0f3d0:	e0fff717 	ldw	r3,-36(fp)
  d0f3d4:	10fff12e 	bgeu	r2,r3,d0f39c <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  d0f3d8:	e037883a 	mov	sp,fp
  d0f3dc:	df000017 	ldw	fp,0(sp)
  d0f3e0:	dec00104 	addi	sp,sp,4
  d0f3e4:	f800283a 	ret

00d0f3e8 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  d0f3e8:	defff104 	addi	sp,sp,-60
  d0f3ec:	df000e15 	stw	fp,56(sp)
  d0f3f0:	df000e04 	addi	fp,sp,56
  d0f3f4:	e13ff215 	stw	r4,-56(fp)
  d0f3f8:	e17ff315 	stw	r5,-52(fp)
  d0f3fc:	e1bff415 	stw	r6,-48(fp)
  d0f400:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  d0f404:	e0bff217 	ldw	r2,-56(fp)
  d0f408:	10800f17 	ldw	r2,60(r2)
  d0f40c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  d0f410:	e0bff217 	ldw	r2,-56(fp)
  d0f414:	10801017 	ldw	r2,64(r2)
  d0f418:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  d0f41c:	e0bff317 	ldw	r2,-52(fp)
  d0f420:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  d0f424:	e0fff417 	ldw	r3,-48(fp)
  d0f428:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  d0f42c:	e13ff517 	ldw	r4,-44(fp)
  d0f430:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  d0f434:	e0800117 	ldw	r2,4(fp)
  d0f438:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  d0f43c:	e0fffa17 	ldw	r3,-24(fp)
  d0f440:	e13ffb17 	ldw	r4,-20(fp)
  d0f444:	1900042e 	bgeu	r3,r4,d0f458 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  d0f448:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  d0f44c:	e0fffa17 	ldw	r3,-24(fp)
  d0f450:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  d0f454:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  d0f458:	e13ffc17 	ldw	r4,-16(fp)
  d0f45c:	e0bffe17 	ldw	r2,-8(fp)
  d0f460:	2080d12e 	bgeu	r4,r2,d0f7a8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  d0f464:	e0fffb17 	ldw	r3,-20(fp)
  d0f468:	e13ffd17 	ldw	r4,-12(fp)
  d0f46c:	19000136 	bltu	r3,r4,d0f474 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  d0f470:	0000cd06 	br	d0f7a8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  d0f474:	e0bffa17 	ldw	r2,-24(fp)
  d0f478:	e0fffd17 	ldw	r3,-12(fp)
  d0f47c:	10c00336 	bltu	r2,r3,d0f48c <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  d0f480:	e13ffd17 	ldw	r4,-12(fp)
  d0f484:	213fffc4 	addi	r4,r4,-1
  d0f488:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  d0f48c:	e0800217 	ldw	r2,8(fp)
  d0f490:	10800058 	cmpnei	r2,r2,1
  d0f494:	1000041e 	bne	r2,zero,d0f4a8 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  d0f498:	e0bff217 	ldw	r2,-56(fp)
  d0f49c:	10800c17 	ldw	r2,48(r2)
  d0f4a0:	e0bfff15 	stw	r2,-4(fp)
  d0f4a4:	00000306 	br	d0f4b4 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  d0f4a8:	e0bff217 	ldw	r2,-56(fp)
  d0f4ac:	10800b17 	ldw	r2,44(r2)
  d0f4b0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  d0f4b4:	e0bff217 	ldw	r2,-56(fp)
  d0f4b8:	10800d17 	ldw	r2,52(r2)
  d0f4bc:	1004c03a 	cmpne	r2,r2,zero
  d0f4c0:	1000571e 	bne	r2,zero,d0f620 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  d0f4c4:	e0bff217 	ldw	r2,-56(fp)
  d0f4c8:	10801317 	ldw	r2,76(r2)
  d0f4cc:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  d0f4d0:	e0bff717 	ldw	r2,-36(fp)
  d0f4d4:	e0fffb17 	ldw	r3,-20(fp)
  d0f4d8:	1884983a 	sll	r2,r3,r2
  d0f4dc:	e13fff17 	ldw	r4,-4(fp)
  d0f4e0:	2089883a 	add	r4,r4,r2
  d0f4e4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  d0f4e8:	e0bff217 	ldw	r2,-56(fp)
  d0f4ec:	10800e17 	ldw	r2,56(r2)
  d0f4f0:	10800058 	cmpnei	r2,r2,1
  d0f4f4:	1000151e 	bne	r2,zero,d0f54c <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  d0f4f8:	e0bffb17 	ldw	r2,-20(fp)
  d0f4fc:	e0bff815 	stw	r2,-32(fp)
  d0f500:	00000e06 	br	d0f53c <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  d0f504:	e0ffff17 	ldw	r3,-4(fp)
  d0f508:	e0bffc17 	ldw	r2,-16(fp)
  d0f50c:	1885883a 	add	r2,r3,r2
  d0f510:	e0fff917 	ldw	r3,-28(fp)
  d0f514:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  d0f518:	e0fff717 	ldw	r3,-36(fp)
  d0f51c:	00800044 	movi	r2,1
  d0f520:	10c4983a 	sll	r2,r2,r3
  d0f524:	e0ffff17 	ldw	r3,-4(fp)
  d0f528:	1887883a 	add	r3,r3,r2
  d0f52c:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  d0f530:	e13ff817 	ldw	r4,-32(fp)
  d0f534:	21000044 	addi	r4,r4,1
  d0f538:	e13ff815 	stw	r4,-32(fp)
  d0f53c:	e0bffa17 	ldw	r2,-24(fp)
  d0f540:	e0fff817 	ldw	r3,-32(fp)
  d0f544:	10ffef2e 	bgeu	r2,r3,d0f504 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  d0f548:	00009706 	br	d0f7a8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  d0f54c:	e0bff217 	ldw	r2,-56(fp)
  d0f550:	10800e17 	ldw	r2,56(r2)
  d0f554:	10800098 	cmpnei	r2,r2,2
  d0f558:	1000181e 	bne	r2,zero,d0f5bc <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  d0f55c:	e13ffb17 	ldw	r4,-20(fp)
  d0f560:	e13ff815 	stw	r4,-32(fp)
  d0f564:	00001106 	br	d0f5ac <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  d0f568:	e0fffc17 	ldw	r3,-16(fp)
  d0f56c:	e0fffc17 	ldw	r3,-16(fp)
  d0f570:	18c5883a 	add	r2,r3,r3
  d0f574:	1007883a 	mov	r3,r2
  d0f578:	e0bfff17 	ldw	r2,-4(fp)
  d0f57c:	1885883a 	add	r2,r3,r2
  d0f580:	e0fff917 	ldw	r3,-28(fp)
  d0f584:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  d0f588:	e0fff717 	ldw	r3,-36(fp)
  d0f58c:	00800044 	movi	r2,1
  d0f590:	10c4983a 	sll	r2,r2,r3
  d0f594:	e13fff17 	ldw	r4,-4(fp)
  d0f598:	2089883a 	add	r4,r4,r2
  d0f59c:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  d0f5a0:	e0bff817 	ldw	r2,-32(fp)
  d0f5a4:	10800044 	addi	r2,r2,1
  d0f5a8:	e0bff815 	stw	r2,-32(fp)
  d0f5ac:	e0fffa17 	ldw	r3,-24(fp)
  d0f5b0:	e13ff817 	ldw	r4,-32(fp)
  d0f5b4:	193fec2e 	bgeu	r3,r4,d0f568 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  d0f5b8:	00007b06 	br	d0f7a8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  d0f5bc:	e0bffb17 	ldw	r2,-20(fp)
  d0f5c0:	e0bff815 	stw	r2,-32(fp)
  d0f5c4:	00001206 	br	d0f610 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  d0f5c8:	e0fffc17 	ldw	r3,-16(fp)
  d0f5cc:	e0fffc17 	ldw	r3,-16(fp)
  d0f5d0:	18c5883a 	add	r2,r3,r3
  d0f5d4:	1085883a 	add	r2,r2,r2
  d0f5d8:	1007883a 	mov	r3,r2
  d0f5dc:	e0bfff17 	ldw	r2,-4(fp)
  d0f5e0:	1885883a 	add	r2,r3,r2
  d0f5e4:	e0fff917 	ldw	r3,-28(fp)
  d0f5e8:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  d0f5ec:	e0fff717 	ldw	r3,-36(fp)
  d0f5f0:	00800044 	movi	r2,1
  d0f5f4:	10c4983a 	sll	r2,r2,r3
  d0f5f8:	e13fff17 	ldw	r4,-4(fp)
  d0f5fc:	2089883a 	add	r4,r4,r2
  d0f600:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  d0f604:	e0bff817 	ldw	r2,-32(fp)
  d0f608:	10800044 	addi	r2,r2,1
  d0f60c:	e0bff815 	stw	r2,-32(fp)
  d0f610:	e0fffa17 	ldw	r3,-24(fp)
  d0f614:	e13ff817 	ldw	r4,-32(fp)
  d0f618:	193feb2e 	bgeu	r3,r4,d0f5c8 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  d0f61c:	00006206 	br	d0f7a8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  d0f620:	e0bff217 	ldw	r2,-56(fp)
  d0f624:	10800e17 	ldw	r2,56(r2)
  d0f628:	10800058 	cmpnei	r2,r2,1
  d0f62c:	1000191e 	bne	r2,zero,d0f694 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  d0f630:	e0fffb17 	ldw	r3,-20(fp)
  d0f634:	e13ffe17 	ldw	r4,-8(fp)
  d0f638:	1905383a 	mul	r2,r3,r4
  d0f63c:	e0ffff17 	ldw	r3,-4(fp)
  d0f640:	1887883a 	add	r3,r3,r2
  d0f644:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  d0f648:	e13ffb17 	ldw	r4,-20(fp)
  d0f64c:	e13ff615 	stw	r4,-40(fp)
  d0f650:	00000c06 	br	d0f684 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  d0f654:	e0ffff17 	ldw	r3,-4(fp)
  d0f658:	e0bffc17 	ldw	r2,-16(fp)
  d0f65c:	1885883a 	add	r2,r3,r2
  d0f660:	e0fff917 	ldw	r3,-28(fp)
  d0f664:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  d0f668:	e0bfff17 	ldw	r2,-4(fp)
  d0f66c:	e0fffe17 	ldw	r3,-8(fp)
  d0f670:	10c5883a 	add	r2,r2,r3
  d0f674:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  d0f678:	e13ff617 	ldw	r4,-40(fp)
  d0f67c:	21000044 	addi	r4,r4,1
  d0f680:	e13ff615 	stw	r4,-40(fp)
  d0f684:	e0bffa17 	ldw	r2,-24(fp)
  d0f688:	e0fff617 	ldw	r3,-40(fp)
  d0f68c:	10fff12e 	bgeu	r2,r3,d0f654 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  d0f690:	00004506 	br	d0f7a8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  d0f694:	e0bff217 	ldw	r2,-56(fp)
  d0f698:	10800e17 	ldw	r2,56(r2)
  d0f69c:	10800098 	cmpnei	r2,r2,2
  d0f6a0:	1000201e 	bne	r2,zero,d0f724 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  d0f6a4:	e13ffe17 	ldw	r4,-8(fp)
  d0f6a8:	e13ffe17 	ldw	r4,-8(fp)
  d0f6ac:	2105883a 	add	r2,r4,r4
  d0f6b0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  d0f6b4:	e0fffb17 	ldw	r3,-20(fp)
  d0f6b8:	e13ffe17 	ldw	r4,-8(fp)
  d0f6bc:	1905383a 	mul	r2,r3,r4
  d0f6c0:	e0ffff17 	ldw	r3,-4(fp)
  d0f6c4:	1887883a 	add	r3,r3,r2
  d0f6c8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  d0f6cc:	e13ffb17 	ldw	r4,-20(fp)
  d0f6d0:	e13ff615 	stw	r4,-40(fp)
  d0f6d4:	00000f06 	br	d0f714 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  d0f6d8:	e0fffc17 	ldw	r3,-16(fp)
  d0f6dc:	e0fffc17 	ldw	r3,-16(fp)
  d0f6e0:	18c5883a 	add	r2,r3,r3
  d0f6e4:	1007883a 	mov	r3,r2
  d0f6e8:	e0bfff17 	ldw	r2,-4(fp)
  d0f6ec:	1885883a 	add	r2,r3,r2
  d0f6f0:	e0fff917 	ldw	r3,-28(fp)
  d0f6f4:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  d0f6f8:	e13fff17 	ldw	r4,-4(fp)
  d0f6fc:	e0bffe17 	ldw	r2,-8(fp)
  d0f700:	2089883a 	add	r4,r4,r2
  d0f704:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  d0f708:	e0fff617 	ldw	r3,-40(fp)
  d0f70c:	18c00044 	addi	r3,r3,1
  d0f710:	e0fff615 	stw	r3,-40(fp)
  d0f714:	e13ffa17 	ldw	r4,-24(fp)
  d0f718:	e0bff617 	ldw	r2,-40(fp)
  d0f71c:	20bfee2e 	bgeu	r4,r2,d0f6d8 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  d0f720:	00002106 	br	d0f7a8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  d0f724:	e0fffe17 	ldw	r3,-8(fp)
  d0f728:	e0fffe17 	ldw	r3,-8(fp)
  d0f72c:	18c5883a 	add	r2,r3,r3
  d0f730:	1085883a 	add	r2,r2,r2
  d0f734:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  d0f738:	e13ffb17 	ldw	r4,-20(fp)
  d0f73c:	e0fffe17 	ldw	r3,-8(fp)
  d0f740:	20c5383a 	mul	r2,r4,r3
  d0f744:	e13fff17 	ldw	r4,-4(fp)
  d0f748:	2089883a 	add	r4,r4,r2
  d0f74c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  d0f750:	e0bffb17 	ldw	r2,-20(fp)
  d0f754:	e0bff615 	stw	r2,-40(fp)
  d0f758:	00001006 	br	d0f79c <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  d0f75c:	e0fffc17 	ldw	r3,-16(fp)
  d0f760:	e0fffc17 	ldw	r3,-16(fp)
  d0f764:	18c5883a 	add	r2,r3,r3
  d0f768:	1085883a 	add	r2,r2,r2
  d0f76c:	1007883a 	mov	r3,r2
  d0f770:	e0bfff17 	ldw	r2,-4(fp)
  d0f774:	1885883a 	add	r2,r3,r2
  d0f778:	e0fff917 	ldw	r3,-28(fp)
  d0f77c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  d0f780:	e13fff17 	ldw	r4,-4(fp)
  d0f784:	e0bffe17 	ldw	r2,-8(fp)
  d0f788:	2089883a 	add	r4,r4,r2
  d0f78c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  d0f790:	e0fff617 	ldw	r3,-40(fp)
  d0f794:	18c00044 	addi	r3,r3,1
  d0f798:	e0fff615 	stw	r3,-40(fp)
  d0f79c:	e13ffa17 	ldw	r4,-24(fp)
  d0f7a0:	e0bff617 	ldw	r2,-40(fp)
  d0f7a4:	20bfed2e 	bgeu	r4,r2,d0f75c <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  d0f7a8:	e037883a 	mov	sp,fp
  d0f7ac:	df000017 	ldw	fp,0(sp)
  d0f7b0:	dec00104 	addi	sp,sp,4
  d0f7b4:	f800283a 	ret

00d0f7b8 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  d0f7b8:	defff804 	addi	sp,sp,-32
  d0f7bc:	dfc00715 	stw	ra,28(sp)
  d0f7c0:	df000615 	stw	fp,24(sp)
  d0f7c4:	df000604 	addi	fp,sp,24
  d0f7c8:	e13ffc15 	stw	r4,-16(fp)
  d0f7cc:	e17ffd15 	stw	r5,-12(fp)
  d0f7d0:	e1bffe15 	stw	r6,-8(fp)
  d0f7d4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  d0f7d8:	e0800317 	ldw	r2,12(fp)
  d0f7dc:	d8800015 	stw	r2,0(sp)
  d0f7e0:	e0800417 	ldw	r2,16(fp)
  d0f7e4:	d8800115 	stw	r2,4(sp)
  d0f7e8:	e13ffc17 	ldw	r4,-16(fp)
  d0f7ec:	e17ffd17 	ldw	r5,-12(fp)
  d0f7f0:	e1bfff17 	ldw	r6,-4(fp)
  d0f7f4:	e1fffe17 	ldw	r7,-8(fp)
  d0f7f8:	0d0f0980 	call	d0f098 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  d0f7fc:	e0800317 	ldw	r2,12(fp)
  d0f800:	d8800015 	stw	r2,0(sp)
  d0f804:	e0800417 	ldw	r2,16(fp)
  d0f808:	d8800115 	stw	r2,4(sp)
  d0f80c:	e13ffc17 	ldw	r4,-16(fp)
  d0f810:	e17ffd17 	ldw	r5,-12(fp)
  d0f814:	e1bfff17 	ldw	r6,-4(fp)
  d0f818:	e1c00217 	ldw	r7,8(fp)
  d0f81c:	0d0f0980 	call	d0f098 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  d0f820:	e0800317 	ldw	r2,12(fp)
  d0f824:	d8800015 	stw	r2,0(sp)
  d0f828:	e0800417 	ldw	r2,16(fp)
  d0f82c:	d8800115 	stw	r2,4(sp)
  d0f830:	e13ffc17 	ldw	r4,-16(fp)
  d0f834:	e17ffd17 	ldw	r5,-12(fp)
  d0f838:	e1bffe17 	ldw	r6,-8(fp)
  d0f83c:	e1c00217 	ldw	r7,8(fp)
  d0f840:	0d0f3e80 	call	d0f3e8 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  d0f844:	e0800317 	ldw	r2,12(fp)
  d0f848:	d8800015 	stw	r2,0(sp)
  d0f84c:	e0800417 	ldw	r2,16(fp)
  d0f850:	d8800115 	stw	r2,4(sp)
  d0f854:	e13ffc17 	ldw	r4,-16(fp)
  d0f858:	e17fff17 	ldw	r5,-4(fp)
  d0f85c:	e1bffe17 	ldw	r6,-8(fp)
  d0f860:	e1c00217 	ldw	r7,8(fp)
  d0f864:	0d0f3e80 	call	d0f3e8 <alt_up_pixel_buffer_dma_draw_vline>
}
  d0f868:	e037883a 	mov	sp,fp
  d0f86c:	dfc00117 	ldw	ra,4(sp)
  d0f870:	df000017 	ldw	fp,0(sp)
  d0f874:	dec00204 	addi	sp,sp,8
  d0f878:	f800283a 	ret

00d0f87c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  d0f87c:	defffb04 	addi	sp,sp,-20
  d0f880:	df000415 	stw	fp,16(sp)
  d0f884:	df000404 	addi	fp,sp,16
  d0f888:	e13ffc15 	stw	r4,-16(fp)
  d0f88c:	e17ffd15 	stw	r5,-12(fp)
  d0f890:	e1bffe15 	stw	r6,-8(fp)
  d0f894:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  d0f898:	e0c00217 	ldw	r3,8(fp)
  d0f89c:	1804c03a 	cmpne	r2,r3,zero
  d0f8a0:	10000b1e 	bne	r2,zero,d0f8d0 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  d0f8a4:	e13ffd17 	ldw	r4,-12(fp)
  d0f8a8:	e0ffff17 	ldw	r3,-4(fp)
  d0f8ac:	20c5383a 	mul	r2,r4,r3
  d0f8b0:	e13ffe17 	ldw	r4,-8(fp)
  d0f8b4:	1105883a 	add	r2,r2,r4
  d0f8b8:	1007883a 	mov	r3,r2
  d0f8bc:	e0bffc17 	ldw	r2,-16(fp)
  d0f8c0:	1885883a 	add	r2,r3,r2
  d0f8c4:	e0c00117 	ldw	r3,4(fp)
  d0f8c8:	10c00025 	stbio	r3,0(r2)
  d0f8cc:	00001b06 	br	d0f93c <helper_plot_pixel+0xc0>
	else if (mode == 1)
  d0f8d0:	e1000217 	ldw	r4,8(fp)
  d0f8d4:	20800058 	cmpnei	r2,r4,1
  d0f8d8:	10000c1e 	bne	r2,zero,d0f90c <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  d0f8dc:	e0fffd17 	ldw	r3,-12(fp)
  d0f8e0:	e13fff17 	ldw	r4,-4(fp)
  d0f8e4:	1905383a 	mul	r2,r3,r4
  d0f8e8:	e0fffe17 	ldw	r3,-8(fp)
  d0f8ec:	10c5883a 	add	r2,r2,r3
  d0f8f0:	1085883a 	add	r2,r2,r2
  d0f8f4:	1007883a 	mov	r3,r2
  d0f8f8:	e0bffc17 	ldw	r2,-16(fp)
  d0f8fc:	1885883a 	add	r2,r3,r2
  d0f900:	e1000117 	ldw	r4,4(fp)
  d0f904:	1100002d 	sthio	r4,0(r2)
  d0f908:	00000c06 	br	d0f93c <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  d0f90c:	e0fffd17 	ldw	r3,-12(fp)
  d0f910:	e13fff17 	ldw	r4,-4(fp)
  d0f914:	1905383a 	mul	r2,r3,r4
  d0f918:	e0fffe17 	ldw	r3,-8(fp)
  d0f91c:	10c5883a 	add	r2,r2,r3
  d0f920:	1085883a 	add	r2,r2,r2
  d0f924:	1085883a 	add	r2,r2,r2
  d0f928:	1007883a 	mov	r3,r2
  d0f92c:	e0bffc17 	ldw	r2,-16(fp)
  d0f930:	1885883a 	add	r2,r3,r2
  d0f934:	e1000117 	ldw	r4,4(fp)
  d0f938:	11000035 	stwio	r4,0(r2)
}
  d0f93c:	e037883a 	mov	sp,fp
  d0f940:	df000017 	ldw	fp,0(sp)
  d0f944:	dec00104 	addi	sp,sp,4
  d0f948:	f800283a 	ret

00d0f94c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  d0f94c:	deffe404 	addi	sp,sp,-112
  d0f950:	dfc01b15 	stw	ra,108(sp)
  d0f954:	df001a15 	stw	fp,104(sp)
  d0f958:	df001a04 	addi	fp,sp,104
  d0f95c:	e13fe815 	stw	r4,-96(fp)
  d0f960:	e17fe915 	stw	r5,-92(fp)
  d0f964:	e1bfea15 	stw	r6,-88(fp)
  d0f968:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  d0f96c:	e0bfe917 	ldw	r2,-92(fp)
  d0f970:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  d0f974:	e0ffea17 	ldw	r3,-88(fp)
  d0f978:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  d0f97c:	e13feb17 	ldw	r4,-84(fp)
  d0f980:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  d0f984:	e0800217 	ldw	r2,8(fp)
  d0f988:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  d0f98c:	e0fff717 	ldw	r3,-36(fp)
  d0f990:	e13ff917 	ldw	r4,-28(fp)
  d0f994:	1905c83a 	sub	r2,r3,r4
  d0f998:	e0bfff15 	stw	r2,-4(fp)
  d0f99c:	e0ffff17 	ldw	r3,-4(fp)
  d0f9a0:	1804403a 	cmpge	r2,r3,zero
  d0f9a4:	1000031e 	bne	r2,zero,d0f9b4 <alt_up_pixel_buffer_dma_draw_line+0x68>
  d0f9a8:	e13fff17 	ldw	r4,-4(fp)
  d0f9ac:	0109c83a 	sub	r4,zero,r4
  d0f9b0:	e13fff15 	stw	r4,-4(fp)
  d0f9b4:	e0fff817 	ldw	r3,-32(fp)
  d0f9b8:	e13ffa17 	ldw	r4,-24(fp)
  d0f9bc:	1905c83a 	sub	r2,r3,r4
  d0f9c0:	e0bffe15 	stw	r2,-8(fp)
  d0f9c4:	e0fffe17 	ldw	r3,-8(fp)
  d0f9c8:	1804403a 	cmpge	r2,r3,zero
  d0f9cc:	1000031e 	bne	r2,zero,d0f9dc <alt_up_pixel_buffer_dma_draw_line+0x90>
  d0f9d0:	e13ffe17 	ldw	r4,-8(fp)
  d0f9d4:	0109c83a 	sub	r4,zero,r4
  d0f9d8:	e13ffe15 	stw	r4,-8(fp)
  d0f9dc:	e0fffe17 	ldw	r3,-8(fp)
  d0f9e0:	e13fff17 	ldw	r4,-4(fp)
  d0f9e4:	1904803a 	cmplt	r2,r3,r4
  d0f9e8:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  d0f9ec:	e0bfe817 	ldw	r2,-96(fp)
  d0f9f0:	10800e17 	ldw	r2,56(r2)
  d0f9f4:	10800060 	cmpeqi	r2,r2,1
  d0f9f8:	10000c1e 	bne	r2,zero,d0fa2c <alt_up_pixel_buffer_dma_draw_line+0xe0>
  d0f9fc:	e0bfe817 	ldw	r2,-96(fp)
  d0fa00:	10800e17 	ldw	r2,56(r2)
  d0fa04:	10800098 	cmpnei	r2,r2,2
  d0fa08:	1000031e 	bne	r2,zero,d0fa18 <alt_up_pixel_buffer_dma_draw_line+0xcc>
  d0fa0c:	00800044 	movi	r2,1
  d0fa10:	e0bffc15 	stw	r2,-16(fp)
  d0fa14:	00000206 	br	d0fa20 <alt_up_pixel_buffer_dma_draw_line+0xd4>
  d0fa18:	00c00084 	movi	r3,2
  d0fa1c:	e0fffc15 	stw	r3,-16(fp)
  d0fa20:	e13ffc17 	ldw	r4,-16(fp)
  d0fa24:	e13ffd15 	stw	r4,-12(fp)
  d0fa28:	00000106 	br	d0fa30 <alt_up_pixel_buffer_dma_draw_line+0xe4>
  d0fa2c:	e03ffd15 	stw	zero,-12(fp)
  d0fa30:	e0bffd17 	ldw	r2,-12(fp)
  d0fa34:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  d0fa38:	e0c00317 	ldw	r3,12(fp)
  d0fa3c:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  d0fa40:	e0bfe817 	ldw	r2,-96(fp)
  d0fa44:	10800d17 	ldw	r2,52(r2)
  d0fa48:	1004c03a 	cmpne	r2,r2,zero
  d0fa4c:	1000091e 	bne	r2,zero,d0fa74 <alt_up_pixel_buffer_dma_draw_line+0x128>
  d0fa50:	e0bfe817 	ldw	r2,-96(fp)
  d0fa54:	10c01317 	ldw	r3,76(r2)
  d0fa58:	e0bfef17 	ldw	r2,-68(fp)
  d0fa5c:	1885c83a 	sub	r2,r3,r2
  d0fa60:	1007883a 	mov	r3,r2
  d0fa64:	00800044 	movi	r2,1
  d0fa68:	10c4983a 	sll	r2,r2,r3
  d0fa6c:	e0bffb15 	stw	r2,-20(fp)
  d0fa70:	00000306 	br	d0fa80 <alt_up_pixel_buffer_dma_draw_line+0x134>
  d0fa74:	e0bfe817 	ldw	r2,-96(fp)
  d0fa78:	10800f17 	ldw	r2,60(r2)
  d0fa7c:	e0bffb15 	stw	r2,-20(fp)
  d0fa80:	e13ffb17 	ldw	r4,-20(fp)
  d0fa84:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  d0fa88:	e0800417 	ldw	r2,16(fp)
  d0fa8c:	10800058 	cmpnei	r2,r2,1
  d0fa90:	1000041e 	bne	r2,zero,d0faa4 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  d0fa94:	e0bfe817 	ldw	r2,-96(fp)
  d0fa98:	10800c17 	ldw	r2,48(r2)
  d0fa9c:	e0bfed15 	stw	r2,-76(fp)
  d0faa0:	00000306 	br	d0fab0 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  d0faa4:	e0bfe817 	ldw	r2,-96(fp)
  d0faa8:	10800b17 	ldw	r2,44(r2)
  d0faac:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  d0fab0:	e0fff603 	ldbu	r3,-40(fp)
  d0fab4:	18803fcc 	andi	r2,r3,255
  d0fab8:	1080201c 	xori	r2,r2,128
  d0fabc:	10bfe004 	addi	r2,r2,-128
  d0fac0:	10800050 	cmplti	r2,r2,1
  d0fac4:	10000c1e 	bne	r2,zero,d0faf8 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  d0fac8:	e13ffa17 	ldw	r4,-24(fp)
  d0facc:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  d0fad0:	e0bff917 	ldw	r2,-28(fp)
  d0fad4:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  d0fad8:	e0fff317 	ldw	r3,-52(fp)
  d0fadc:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  d0fae0:	e13ff817 	ldw	r4,-32(fp)
  d0fae4:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  d0fae8:	e0bff717 	ldw	r2,-36(fp)
  d0faec:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  d0faf0:	e0fff317 	ldw	r3,-52(fp)
  d0faf4:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  d0faf8:	e13ff817 	ldw	r4,-32(fp)
  d0fafc:	e0bffa17 	ldw	r2,-24(fp)
  d0fb00:	20800c0e 	bge	r4,r2,d0fb34 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  d0fb04:	e0fffa17 	ldw	r3,-24(fp)
  d0fb08:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  d0fb0c:	e13ff817 	ldw	r4,-32(fp)
  d0fb10:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  d0fb14:	e0bff317 	ldw	r2,-52(fp)
  d0fb18:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  d0fb1c:	e0fff917 	ldw	r3,-28(fp)
  d0fb20:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  d0fb24:	e13ff717 	ldw	r4,-36(fp)
  d0fb28:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  d0fb2c:	e0bff317 	ldw	r2,-52(fp)
  d0fb30:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  d0fb34:	e0fff817 	ldw	r3,-32(fp)
  d0fb38:	e13ffa17 	ldw	r4,-24(fp)
  d0fb3c:	1907c83a 	sub	r3,r3,r4
  d0fb40:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  d0fb44:	e0fff717 	ldw	r3,-36(fp)
  d0fb48:	e13ff917 	ldw	r4,-28(fp)
  d0fb4c:	1905c83a 	sub	r2,r3,r4
  d0fb50:	e0bff415 	stw	r2,-48(fp)
  d0fb54:	e0fff417 	ldw	r3,-48(fp)
  d0fb58:	1804403a 	cmpge	r2,r3,zero
  d0fb5c:	1000031e 	bne	r2,zero,d0fb6c <alt_up_pixel_buffer_dma_draw_line+0x220>
  d0fb60:	e13ff417 	ldw	r4,-48(fp)
  d0fb64:	0109c83a 	sub	r4,zero,r4
  d0fb68:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  d0fb6c:	e0fff517 	ldw	r3,-44(fp)
  d0fb70:	1804d7fa 	srli	r2,r3,31
  d0fb74:	e13ff517 	ldw	r4,-44(fp)
  d0fb78:	1105883a 	add	r2,r2,r4
  d0fb7c:	1005d07a 	srai	r2,r2,1
  d0fb80:	0085c83a 	sub	r2,zero,r2
  d0fb84:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  d0fb88:	e0bff917 	ldw	r2,-28(fp)
  d0fb8c:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  d0fb90:	e0fff917 	ldw	r3,-28(fp)
  d0fb94:	e13ff717 	ldw	r4,-36(fp)
  d0fb98:	1900030e 	bge	r3,r4,d0fba8 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  d0fb9c:	00800044 	movi	r2,1
  d0fba0:	e0bff215 	stw	r2,-56(fp)
  d0fba4:	00000206 	br	d0fbb0 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  d0fba8:	00ffffc4 	movi	r3,-1
  d0fbac:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  d0fbb0:	e13ff603 	ldbu	r4,-40(fp)
  d0fbb4:	20803fcc 	andi	r2,r4,255
  d0fbb8:	1080201c 	xori	r2,r2,128
  d0fbbc:	10bfe004 	addi	r2,r2,-128
  d0fbc0:	10800058 	cmpnei	r2,r2,1
  d0fbc4:	1000221e 	bne	r2,zero,d0fc50 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  d0fbc8:	e0bffa17 	ldw	r2,-24(fp)
  d0fbcc:	e0bff115 	stw	r2,-60(fp)
  d0fbd0:	00001b06 	br	d0fc40 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  d0fbd4:	e0ffee17 	ldw	r3,-72(fp)
  d0fbd8:	d8c00015 	stw	r3,0(sp)
  d0fbdc:	e13fef17 	ldw	r4,-68(fp)
  d0fbe0:	d9000115 	stw	r4,4(sp)
  d0fbe4:	e13fed17 	ldw	r4,-76(fp)
  d0fbe8:	e17fec17 	ldw	r5,-80(fp)
  d0fbec:	e1bff017 	ldw	r6,-64(fp)
  d0fbf0:	e1fff117 	ldw	r7,-60(fp)
  d0fbf4:	0d0f87c0 	call	d0f87c <helper_plot_pixel>
			error = error + deltay;
  d0fbf8:	e0bff317 	ldw	r2,-52(fp)
  d0fbfc:	e0fff417 	ldw	r3,-48(fp)
  d0fc00:	10c5883a 	add	r2,r2,r3
  d0fc04:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  d0fc08:	e13ff317 	ldw	r4,-52(fp)
  d0fc0c:	20800050 	cmplti	r2,r4,1
  d0fc10:	1000081e 	bne	r2,zero,d0fc34 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  d0fc14:	e0bff017 	ldw	r2,-64(fp)
  d0fc18:	e0fff217 	ldw	r3,-56(fp)
  d0fc1c:	10c5883a 	add	r2,r2,r3
  d0fc20:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  d0fc24:	e13ff317 	ldw	r4,-52(fp)
  d0fc28:	e0bff517 	ldw	r2,-44(fp)
  d0fc2c:	2089c83a 	sub	r4,r4,r2
  d0fc30:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  d0fc34:	e0fff117 	ldw	r3,-60(fp)
  d0fc38:	18c00044 	addi	r3,r3,1
  d0fc3c:	e0fff115 	stw	r3,-60(fp)
  d0fc40:	e13ff817 	ldw	r4,-32(fp)
  d0fc44:	e0bff117 	ldw	r2,-60(fp)
  d0fc48:	20bfe20e 	bge	r4,r2,d0fbd4 <alt_up_pixel_buffer_dma_draw_line+0x288>
  d0fc4c:	00002106 	br	d0fcd4 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  d0fc50:	e0fffa17 	ldw	r3,-24(fp)
  d0fc54:	e0fff115 	stw	r3,-60(fp)
  d0fc58:	00001b06 	br	d0fcc8 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  d0fc5c:	e13fee17 	ldw	r4,-72(fp)
  d0fc60:	d9000015 	stw	r4,0(sp)
  d0fc64:	e0bfef17 	ldw	r2,-68(fp)
  d0fc68:	d8800115 	stw	r2,4(sp)
  d0fc6c:	e13fed17 	ldw	r4,-76(fp)
  d0fc70:	e17fec17 	ldw	r5,-80(fp)
  d0fc74:	e1bff117 	ldw	r6,-60(fp)
  d0fc78:	e1fff017 	ldw	r7,-64(fp)
  d0fc7c:	0d0f87c0 	call	d0f87c <helper_plot_pixel>
			error = error + deltay;
  d0fc80:	e0fff317 	ldw	r3,-52(fp)
  d0fc84:	e13ff417 	ldw	r4,-48(fp)
  d0fc88:	1907883a 	add	r3,r3,r4
  d0fc8c:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  d0fc90:	e0fff317 	ldw	r3,-52(fp)
  d0fc94:	18800050 	cmplti	r2,r3,1
  d0fc98:	1000081e 	bne	r2,zero,d0fcbc <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  d0fc9c:	e13ff017 	ldw	r4,-64(fp)
  d0fca0:	e0bff217 	ldw	r2,-56(fp)
  d0fca4:	2089883a 	add	r4,r4,r2
  d0fca8:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  d0fcac:	e0fff317 	ldw	r3,-52(fp)
  d0fcb0:	e13ff517 	ldw	r4,-44(fp)
  d0fcb4:	1907c83a 	sub	r3,r3,r4
  d0fcb8:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  d0fcbc:	e0bff117 	ldw	r2,-60(fp)
  d0fcc0:	10800044 	addi	r2,r2,1
  d0fcc4:	e0bff115 	stw	r2,-60(fp)
  d0fcc8:	e0fff817 	ldw	r3,-32(fp)
  d0fccc:	e13ff117 	ldw	r4,-60(fp)
  d0fcd0:	193fe20e 	bge	r3,r4,d0fc5c <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  d0fcd4:	e037883a 	mov	sp,fp
  d0fcd8:	dfc00117 	ldw	ra,4(sp)
  d0fcdc:	df000017 	ldw	fp,0(sp)
  d0fce0:	dec00204 	addi	sp,sp,8
  d0fce4:	f800283a 	ret

00d0fce8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  d0fce8:	defff404 	addi	sp,sp,-48
  d0fcec:	df000b15 	stw	fp,44(sp)
  d0fcf0:	df000b04 	addi	fp,sp,44
  d0fcf4:	e13ffb15 	stw	r4,-20(fp)
  d0fcf8:	e17ffc15 	stw	r5,-16(fp)
  d0fcfc:	e1bffd15 	stw	r6,-12(fp)
  d0fd00:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  d0fd04:	e03ff915 	stw	zero,-28(fp)
  d0fd08:	00803474 	movhi	r2,209
  d0fd0c:	10936004 	addi	r2,r2,19840
  d0fd10:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  d0fd14:	1005003a 	cmpeq	r2,r2,zero
  d0fd18:	1000411e 	bne	r2,zero,d0fe20 <alt_alarm_start+0x138>
  {
    if (alarm)
  d0fd1c:	e0bffb17 	ldw	r2,-20(fp)
  d0fd20:	1005003a 	cmpeq	r2,r2,zero
  d0fd24:	10003b1e 	bne	r2,zero,d0fe14 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  d0fd28:	e0fffb17 	ldw	r3,-20(fp)
  d0fd2c:	e0bffd17 	ldw	r2,-12(fp)
  d0fd30:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  d0fd34:	e0fffb17 	ldw	r3,-20(fp)
  d0fd38:	e0bffe17 	ldw	r2,-8(fp)
  d0fd3c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  d0fd40:	0005303a 	rdctl	r2,status
  d0fd44:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  d0fd48:	e0fff817 	ldw	r3,-32(fp)
  d0fd4c:	00bfff84 	movi	r2,-2
  d0fd50:	1884703a 	and	r2,r3,r2
  d0fd54:	1001703a 	wrctl	status,r2
  
  return context;
  d0fd58:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  d0fd5c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  d0fd60:	00803474 	movhi	r2,209
  d0fd64:	10936104 	addi	r2,r2,19844
  d0fd68:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  d0fd6c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  d0fd70:	e0fffc17 	ldw	r3,-16(fp)
  d0fd74:	e0bff917 	ldw	r2,-28(fp)
  d0fd78:	1885883a 	add	r2,r3,r2
  d0fd7c:	10c00044 	addi	r3,r2,1
  d0fd80:	e0bffb17 	ldw	r2,-20(fp)
  d0fd84:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  d0fd88:	e0bffb17 	ldw	r2,-20(fp)
  d0fd8c:	10c00217 	ldw	r3,8(r2)
  d0fd90:	e0bff917 	ldw	r2,-28(fp)
  d0fd94:	1880042e 	bgeu	r3,r2,d0fda8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  d0fd98:	e0fffb17 	ldw	r3,-20(fp)
  d0fd9c:	00800044 	movi	r2,1
  d0fda0:	18800405 	stb	r2,16(r3)
  d0fda4:	00000206 	br	d0fdb0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  d0fda8:	e0bffb17 	ldw	r2,-20(fp)
  d0fdac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  d0fdb0:	e0fffb17 	ldw	r3,-20(fp)
  d0fdb4:	00803474 	movhi	r2,209
  d0fdb8:	108c5c04 	addi	r2,r2,12656
  d0fdbc:	e0bff615 	stw	r2,-40(fp)
  d0fdc0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  d0fdc4:	e0fff717 	ldw	r3,-36(fp)
  d0fdc8:	e0bff617 	ldw	r2,-40(fp)
  d0fdcc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  d0fdd0:	e0bff617 	ldw	r2,-40(fp)
  d0fdd4:	10c00017 	ldw	r3,0(r2)
  d0fdd8:	e0bff717 	ldw	r2,-36(fp)
  d0fddc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  d0fde0:	e0bff617 	ldw	r2,-40(fp)
  d0fde4:	10c00017 	ldw	r3,0(r2)
  d0fde8:	e0bff717 	ldw	r2,-36(fp)
  d0fdec:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  d0fdf0:	e0fff617 	ldw	r3,-40(fp)
  d0fdf4:	e0bff717 	ldw	r2,-36(fp)
  d0fdf8:	18800015 	stw	r2,0(r3)
  d0fdfc:	e0bffa17 	ldw	r2,-24(fp)
  d0fe00:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  d0fe04:	e0bff517 	ldw	r2,-44(fp)
  d0fe08:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  d0fe0c:	e03fff15 	stw	zero,-4(fp)
  d0fe10:	00000506 	br	d0fe28 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  d0fe14:	00bffa84 	movi	r2,-22
  d0fe18:	e0bfff15 	stw	r2,-4(fp)
  d0fe1c:	00000206 	br	d0fe28 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  d0fe20:	00bfde84 	movi	r2,-134
  d0fe24:	e0bfff15 	stw	r2,-4(fp)
  d0fe28:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  d0fe2c:	e037883a 	mov	sp,fp
  d0fe30:	df000017 	ldw	fp,0(sp)
  d0fe34:	dec00104 	addi	sp,sp,4
  d0fe38:	f800283a 	ret

00d0fe3c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  d0fe3c:	defffe04 	addi	sp,sp,-8
  d0fe40:	df000115 	stw	fp,4(sp)
  d0fe44:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  d0fe48:	e03fff15 	stw	zero,-4(fp)
  d0fe4c:	00000506 	br	d0fe64 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  d0fe50:	e0bfff17 	ldw	r2,-4(fp)
  d0fe54:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  d0fe58:	e0bfff17 	ldw	r2,-4(fp)
  d0fe5c:	10800804 	addi	r2,r2,32
  d0fe60:	e0bfff15 	stw	r2,-4(fp)
  d0fe64:	e0bfff17 	ldw	r2,-4(fp)
  d0fe68:	10810030 	cmpltui	r2,r2,1024
  d0fe6c:	103ff81e 	bne	r2,zero,d0fe50 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  d0fe70:	e037883a 	mov	sp,fp
  d0fe74:	df000017 	ldw	fp,0(sp)
  d0fe78:	dec00104 	addi	sp,sp,4
  d0fe7c:	f800283a 	ret

00d0fe80 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  d0fe80:	defff904 	addi	sp,sp,-28
  d0fe84:	dfc00615 	stw	ra,24(sp)
  d0fe88:	df000515 	stw	fp,20(sp)
  d0fe8c:	df000504 	addi	fp,sp,20
  d0fe90:	e13ffd15 	stw	r4,-12(fp)
  d0fe94:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  d0fe98:	e0bffd17 	ldw	r2,-12(fp)
  d0fe9c:	1005003a 	cmpeq	r2,r2,zero
  d0fea0:	1000041e 	bne	r2,zero,d0feb4 <alt_dev_llist_insert+0x34>
  d0fea4:	e0bffd17 	ldw	r2,-12(fp)
  d0fea8:	10800217 	ldw	r2,8(r2)
  d0feac:	1004c03a 	cmpne	r2,r2,zero
  d0feb0:	1000071e 	bne	r2,zero,d0fed0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  d0feb4:	0d0ff340 	call	d0ff34 <alt_get_errno>
  d0feb8:	1007883a 	mov	r3,r2
  d0febc:	00800584 	movi	r2,22
  d0fec0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  d0fec4:	00bffa84 	movi	r2,-22
  d0fec8:	e0bfff15 	stw	r2,-4(fp)
  d0fecc:	00001306 	br	d0ff1c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  d0fed0:	e0fffd17 	ldw	r3,-12(fp)
  d0fed4:	e0bffe17 	ldw	r2,-8(fp)
  d0fed8:	e0bffb15 	stw	r2,-20(fp)
  d0fedc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  d0fee0:	e0fffc17 	ldw	r3,-16(fp)
  d0fee4:	e0bffb17 	ldw	r2,-20(fp)
  d0fee8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  d0feec:	e0bffb17 	ldw	r2,-20(fp)
  d0fef0:	10c00017 	ldw	r3,0(r2)
  d0fef4:	e0bffc17 	ldw	r2,-16(fp)
  d0fef8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  d0fefc:	e0bffb17 	ldw	r2,-20(fp)
  d0ff00:	10c00017 	ldw	r3,0(r2)
  d0ff04:	e0bffc17 	ldw	r2,-16(fp)
  d0ff08:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  d0ff0c:	e0fffb17 	ldw	r3,-20(fp)
  d0ff10:	e0bffc17 	ldw	r2,-16(fp)
  d0ff14:	18800015 	stw	r2,0(r3)

  return 0;  
  d0ff18:	e03fff15 	stw	zero,-4(fp)
  d0ff1c:	e0bfff17 	ldw	r2,-4(fp)
}
  d0ff20:	e037883a 	mov	sp,fp
  d0ff24:	dfc00117 	ldw	ra,4(sp)
  d0ff28:	df000017 	ldw	fp,0(sp)
  d0ff2c:	dec00204 	addi	sp,sp,8
  d0ff30:	f800283a 	ret

00d0ff34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0ff34:	defffd04 	addi	sp,sp,-12
  d0ff38:	dfc00215 	stw	ra,8(sp)
  d0ff3c:	df000115 	stw	fp,4(sp)
  d0ff40:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0ff44:	00803474 	movhi	r2,209
  d0ff48:	108c5504 	addi	r2,r2,12628
  d0ff4c:	10800017 	ldw	r2,0(r2)
  d0ff50:	1005003a 	cmpeq	r2,r2,zero
  d0ff54:	1000061e 	bne	r2,zero,d0ff70 <alt_get_errno+0x3c>
  d0ff58:	00803474 	movhi	r2,209
  d0ff5c:	108c5504 	addi	r2,r2,12628
  d0ff60:	10800017 	ldw	r2,0(r2)
  d0ff64:	103ee83a 	callr	r2
  d0ff68:	e0bfff15 	stw	r2,-4(fp)
  d0ff6c:	00000306 	br	d0ff7c <alt_get_errno+0x48>
  d0ff70:	00803474 	movhi	r2,209
  d0ff74:	10935b04 	addi	r2,r2,19820
  d0ff78:	e0bfff15 	stw	r2,-4(fp)
  d0ff7c:	e0bfff17 	ldw	r2,-4(fp)
}
  d0ff80:	e037883a 	mov	sp,fp
  d0ff84:	dfc00117 	ldw	ra,4(sp)
  d0ff88:	df000017 	ldw	fp,0(sp)
  d0ff8c:	dec00204 	addi	sp,sp,8
  d0ff90:	f800283a 	ret

00d0ff94 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  d0ff94:	defffd04 	addi	sp,sp,-12
  d0ff98:	dfc00215 	stw	ra,8(sp)
  d0ff9c:	df000115 	stw	fp,4(sp)
  d0ffa0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  d0ffa4:	00bfff04 	movi	r2,-4
  d0ffa8:	00c03474 	movhi	r3,209
  d0ffac:	18c42404 	addi	r3,r3,4240
  d0ffb0:	1885883a 	add	r2,r3,r2
  d0ffb4:	e0bfff15 	stw	r2,-4(fp)
  d0ffb8:	00000606 	br	d0ffd4 <_do_ctors+0x40>
        (*ctor) (); 
  d0ffbc:	e0bfff17 	ldw	r2,-4(fp)
  d0ffc0:	10800017 	ldw	r2,0(r2)
  d0ffc4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  d0ffc8:	e0bfff17 	ldw	r2,-4(fp)
  d0ffcc:	10bfff04 	addi	r2,r2,-4
  d0ffd0:	e0bfff15 	stw	r2,-4(fp)
  d0ffd4:	e0ffff17 	ldw	r3,-4(fp)
  d0ffd8:	00803474 	movhi	r2,209
  d0ffdc:	10842304 	addi	r2,r2,4236
  d0ffe0:	18bff62e 	bgeu	r3,r2,d0ffbc <_do_ctors+0x28>
        (*ctor) (); 
}
  d0ffe4:	e037883a 	mov	sp,fp
  d0ffe8:	dfc00117 	ldw	ra,4(sp)
  d0ffec:	df000017 	ldw	fp,0(sp)
  d0fff0:	dec00204 	addi	sp,sp,8
  d0fff4:	f800283a 	ret

00d0fff8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  d0fff8:	defffd04 	addi	sp,sp,-12
  d0fffc:	dfc00215 	stw	ra,8(sp)
  d10000:	df000115 	stw	fp,4(sp)
  d10004:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  d10008:	00bfff04 	movi	r2,-4
  d1000c:	00c03474 	movhi	r3,209
  d10010:	18c42404 	addi	r3,r3,4240
  d10014:	1885883a 	add	r2,r3,r2
  d10018:	e0bfff15 	stw	r2,-4(fp)
  d1001c:	00000606 	br	d10038 <_do_dtors+0x40>
        (*dtor) (); 
  d10020:	e0bfff17 	ldw	r2,-4(fp)
  d10024:	10800017 	ldw	r2,0(r2)
  d10028:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  d1002c:	e0bfff17 	ldw	r2,-4(fp)
  d10030:	10bfff04 	addi	r2,r2,-4
  d10034:	e0bfff15 	stw	r2,-4(fp)
  d10038:	e0ffff17 	ldw	r3,-4(fp)
  d1003c:	00803474 	movhi	r2,209
  d10040:	10842404 	addi	r2,r2,4240
  d10044:	18bff62e 	bgeu	r3,r2,d10020 <_do_dtors+0x28>
        (*dtor) (); 
}
  d10048:	e037883a 	mov	sp,fp
  d1004c:	dfc00117 	ldw	ra,4(sp)
  d10050:	df000017 	ldw	fp,0(sp)
  d10054:	dec00204 	addi	sp,sp,8
  d10058:	f800283a 	ret

00d1005c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  d1005c:	defff904 	addi	sp,sp,-28
  d10060:	dfc00615 	stw	ra,24(sp)
  d10064:	df000515 	stw	fp,20(sp)
  d10068:	df000504 	addi	fp,sp,20
  d1006c:	e13ffd15 	stw	r4,-12(fp)
  d10070:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  d10074:	e0bffe17 	ldw	r2,-8(fp)
  d10078:	10800017 	ldw	r2,0(r2)
  d1007c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  d10080:	e13ffd17 	ldw	r4,-12(fp)
  d10084:	0d03d500 	call	d03d50 <strlen>
  d10088:	10800044 	addi	r2,r2,1
  d1008c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  d10090:	00000d06 	br	d100c8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  d10094:	e0bffc17 	ldw	r2,-16(fp)
  d10098:	11000217 	ldw	r4,8(r2)
  d1009c:	e1bffb17 	ldw	r6,-20(fp)
  d100a0:	e17ffd17 	ldw	r5,-12(fp)
  d100a4:	0d10c640 	call	d10c64 <memcmp>
  d100a8:	1004c03a 	cmpne	r2,r2,zero
  d100ac:	1000031e 	bne	r2,zero,d100bc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  d100b0:	e0bffc17 	ldw	r2,-16(fp)
  d100b4:	e0bfff15 	stw	r2,-4(fp)
  d100b8:	00000706 	br	d100d8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  d100bc:	e0bffc17 	ldw	r2,-16(fp)
  d100c0:	10800017 	ldw	r2,0(r2)
  d100c4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  d100c8:	e0fffe17 	ldw	r3,-8(fp)
  d100cc:	e0bffc17 	ldw	r2,-16(fp)
  d100d0:	10fff01e 	bne	r2,r3,d10094 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  d100d4:	e03fff15 	stw	zero,-4(fp)
  d100d8:	e0bfff17 	ldw	r2,-4(fp)
}
  d100dc:	e037883a 	mov	sp,fp
  d100e0:	dfc00117 	ldw	ra,4(sp)
  d100e4:	df000017 	ldw	fp,0(sp)
  d100e8:	dec00204 	addi	sp,sp,8
  d100ec:	f800283a 	ret

00d100f0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  d100f0:	defffe04 	addi	sp,sp,-8
  d100f4:	dfc00115 	stw	ra,4(sp)
  d100f8:	df000015 	stw	fp,0(sp)
  d100fc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  d10100:	0009883a 	mov	r4,zero
  d10104:	01440004 	movi	r5,4096
  d10108:	0d10b880 	call	d10b88 <alt_icache_flush>
#endif
}
  d1010c:	e037883a 	mov	sp,fp
  d10110:	dfc00117 	ldw	ra,4(sp)
  d10114:	df000017 	ldw	fp,0(sp)
  d10118:	dec00204 	addi	sp,sp,8
  d1011c:	f800283a 	ret

00d10120 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  d10120:	defff904 	addi	sp,sp,-28
  d10124:	dfc00615 	stw	ra,24(sp)
  d10128:	df000515 	stw	fp,20(sp)
  d1012c:	df000504 	addi	fp,sp,20
  d10130:	e13ffc15 	stw	r4,-16(fp)
  d10134:	e17ffd15 	stw	r5,-12(fp)
  d10138:	e1bffe15 	stw	r6,-8(fp)
  d1013c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  d10140:	e0800217 	ldw	r2,8(fp)
  d10144:	d8800015 	stw	r2,0(sp)
  d10148:	e13ffc17 	ldw	r4,-16(fp)
  d1014c:	e17ffd17 	ldw	r5,-12(fp)
  d10150:	e1bffe17 	ldw	r6,-8(fp)
  d10154:	e1ffff17 	ldw	r7,-4(fp)
  d10158:	0d102f40 	call	d102f4 <alt_iic_isr_register>
}  
  d1015c:	e037883a 	mov	sp,fp
  d10160:	dfc00117 	ldw	ra,4(sp)
  d10164:	df000017 	ldw	fp,0(sp)
  d10168:	dec00204 	addi	sp,sp,8
  d1016c:	f800283a 	ret

00d10170 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  d10170:	defff904 	addi	sp,sp,-28
  d10174:	df000615 	stw	fp,24(sp)
  d10178:	df000604 	addi	fp,sp,24
  d1017c:	e13ffe15 	stw	r4,-8(fp)
  d10180:	e17fff15 	stw	r5,-4(fp)
  d10184:	e0bfff17 	ldw	r2,-4(fp)
  d10188:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  d1018c:	0005303a 	rdctl	r2,status
  d10190:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  d10194:	e0fffb17 	ldw	r3,-20(fp)
  d10198:	00bfff84 	movi	r2,-2
  d1019c:	1884703a 	and	r2,r3,r2
  d101a0:	1001703a 	wrctl	status,r2
  
  return context;
  d101a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  d101a8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  d101ac:	e0fffc17 	ldw	r3,-16(fp)
  d101b0:	00800044 	movi	r2,1
  d101b4:	10c4983a 	sll	r2,r2,r3
  d101b8:	1007883a 	mov	r3,r2
  d101bc:	00803474 	movhi	r2,209
  d101c0:	10935f04 	addi	r2,r2,19836
  d101c4:	10800017 	ldw	r2,0(r2)
  d101c8:	1886b03a 	or	r3,r3,r2
  d101cc:	00803474 	movhi	r2,209
  d101d0:	10935f04 	addi	r2,r2,19836
  d101d4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  d101d8:	00803474 	movhi	r2,209
  d101dc:	10935f04 	addi	r2,r2,19836
  d101e0:	10800017 	ldw	r2,0(r2)
  d101e4:	100170fa 	wrctl	ienable,r2
  d101e8:	e0bffd17 	ldw	r2,-12(fp)
  d101ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  d101f0:	e0bffa17 	ldw	r2,-24(fp)
  d101f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  d101f8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  d101fc:	e037883a 	mov	sp,fp
  d10200:	df000017 	ldw	fp,0(sp)
  d10204:	dec00104 	addi	sp,sp,4
  d10208:	f800283a 	ret

00d1020c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  d1020c:	defff904 	addi	sp,sp,-28
  d10210:	df000615 	stw	fp,24(sp)
  d10214:	df000604 	addi	fp,sp,24
  d10218:	e13ffe15 	stw	r4,-8(fp)
  d1021c:	e17fff15 	stw	r5,-4(fp)
  d10220:	e0bfff17 	ldw	r2,-4(fp)
  d10224:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  d10228:	0005303a 	rdctl	r2,status
  d1022c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  d10230:	e0fffb17 	ldw	r3,-20(fp)
  d10234:	00bfff84 	movi	r2,-2
  d10238:	1884703a 	and	r2,r3,r2
  d1023c:	1001703a 	wrctl	status,r2
  
  return context;
  d10240:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  d10244:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  d10248:	e0fffc17 	ldw	r3,-16(fp)
  d1024c:	00800044 	movi	r2,1
  d10250:	10c4983a 	sll	r2,r2,r3
  d10254:	0084303a 	nor	r2,zero,r2
  d10258:	1007883a 	mov	r3,r2
  d1025c:	00803474 	movhi	r2,209
  d10260:	10935f04 	addi	r2,r2,19836
  d10264:	10800017 	ldw	r2,0(r2)
  d10268:	1886703a 	and	r3,r3,r2
  d1026c:	00803474 	movhi	r2,209
  d10270:	10935f04 	addi	r2,r2,19836
  d10274:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  d10278:	00803474 	movhi	r2,209
  d1027c:	10935f04 	addi	r2,r2,19836
  d10280:	10800017 	ldw	r2,0(r2)
  d10284:	100170fa 	wrctl	ienable,r2
  d10288:	e0bffd17 	ldw	r2,-12(fp)
  d1028c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  d10290:	e0bffa17 	ldw	r2,-24(fp)
  d10294:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  d10298:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  d1029c:	e037883a 	mov	sp,fp
  d102a0:	df000017 	ldw	fp,0(sp)
  d102a4:	dec00104 	addi	sp,sp,4
  d102a8:	f800283a 	ret

00d102ac <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  d102ac:	defffc04 	addi	sp,sp,-16
  d102b0:	df000315 	stw	fp,12(sp)
  d102b4:	df000304 	addi	fp,sp,12
  d102b8:	e13ffe15 	stw	r4,-8(fp)
  d102bc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  d102c0:	000530fa 	rdctl	r2,ienable
  d102c4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  d102c8:	e0ffff17 	ldw	r3,-4(fp)
  d102cc:	00800044 	movi	r2,1
  d102d0:	10c4983a 	sll	r2,r2,r3
  d102d4:	1007883a 	mov	r3,r2
  d102d8:	e0bffd17 	ldw	r2,-12(fp)
  d102dc:	1884703a 	and	r2,r3,r2
  d102e0:	1004c03a 	cmpne	r2,r2,zero
}
  d102e4:	e037883a 	mov	sp,fp
  d102e8:	df000017 	ldw	fp,0(sp)
  d102ec:	dec00104 	addi	sp,sp,4
  d102f0:	f800283a 	ret

00d102f4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  d102f4:	defff404 	addi	sp,sp,-48
  d102f8:	dfc00b15 	stw	ra,44(sp)
  d102fc:	df000a15 	stw	fp,40(sp)
  d10300:	df000a04 	addi	fp,sp,40
  d10304:	e13ffb15 	stw	r4,-20(fp)
  d10308:	e17ffc15 	stw	r5,-16(fp)
  d1030c:	e1bffd15 	stw	r6,-12(fp)
  d10310:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  d10314:	00bffa84 	movi	r2,-22
  d10318:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  d1031c:	e0bffc17 	ldw	r2,-16(fp)
  d10320:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  d10324:	e0bff917 	ldw	r2,-28(fp)
  d10328:	10800808 	cmpgei	r2,r2,32
  d1032c:	1000291e 	bne	r2,zero,d103d4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  d10330:	0005303a 	rdctl	r2,status
  d10334:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  d10338:	e0fff717 	ldw	r3,-36(fp)
  d1033c:	00bfff84 	movi	r2,-2
  d10340:	1884703a 	and	r2,r3,r2
  d10344:	1001703a 	wrctl	status,r2
  
  return context;
  d10348:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  d1034c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  d10350:	e0bff917 	ldw	r2,-28(fp)
  d10354:	00c03474 	movhi	r3,209
  d10358:	18d36c04 	addi	r3,r3,19888
  d1035c:	100490fa 	slli	r2,r2,3
  d10360:	10c7883a 	add	r3,r2,r3
  d10364:	e0bffd17 	ldw	r2,-12(fp)
  d10368:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  d1036c:	e0bff917 	ldw	r2,-28(fp)
  d10370:	00c03474 	movhi	r3,209
  d10374:	18d36c04 	addi	r3,r3,19888
  d10378:	100490fa 	slli	r2,r2,3
  d1037c:	10c5883a 	add	r2,r2,r3
  d10380:	10c00104 	addi	r3,r2,4
  d10384:	e0bffe17 	ldw	r2,-8(fp)
  d10388:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  d1038c:	e0bffd17 	ldw	r2,-12(fp)
  d10390:	1005003a 	cmpeq	r2,r2,zero
  d10394:	1000051e 	bne	r2,zero,d103ac <alt_iic_isr_register+0xb8>
  d10398:	e17ff917 	ldw	r5,-28(fp)
  d1039c:	e13ffb17 	ldw	r4,-20(fp)
  d103a0:	0d101700 	call	d10170 <alt_ic_irq_enable>
  d103a4:	e0bfff15 	stw	r2,-4(fp)
  d103a8:	00000406 	br	d103bc <alt_iic_isr_register+0xc8>
  d103ac:	e17ff917 	ldw	r5,-28(fp)
  d103b0:	e13ffb17 	ldw	r4,-20(fp)
  d103b4:	0d1020c0 	call	d1020c <alt_ic_irq_disable>
  d103b8:	e0bfff15 	stw	r2,-4(fp)
  d103bc:	e0bfff17 	ldw	r2,-4(fp)
  d103c0:	e0bffa15 	stw	r2,-24(fp)
  d103c4:	e0bff817 	ldw	r2,-32(fp)
  d103c8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  d103cc:	e0bff617 	ldw	r2,-40(fp)
  d103d0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  d103d4:	e0bffa17 	ldw	r2,-24(fp)
}
  d103d8:	e037883a 	mov	sp,fp
  d103dc:	dfc00117 	ldw	ra,4(sp)
  d103e0:	df000017 	ldw	fp,0(sp)
  d103e4:	dec00204 	addi	sp,sp,8
  d103e8:	f800283a 	ret

00d103ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  d103ec:	defff904 	addi	sp,sp,-28
  d103f0:	dfc00615 	stw	ra,24(sp)
  d103f4:	df000515 	stw	fp,20(sp)
  d103f8:	df000504 	addi	fp,sp,20
  d103fc:	e13ffc15 	stw	r4,-16(fp)
  d10400:	e17ffd15 	stw	r5,-12(fp)
  d10404:	e1bffe15 	stw	r6,-8(fp)
  d10408:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  d1040c:	e13ffd17 	ldw	r4,-12(fp)
  d10410:	e17ffe17 	ldw	r5,-8(fp)
  d10414:	e1bfff17 	ldw	r6,-4(fp)
  d10418:	0d106040 	call	d10604 <open>
  d1041c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  d10420:	e0bffb17 	ldw	r2,-20(fp)
  d10424:	1004803a 	cmplt	r2,r2,zero
  d10428:	10001c1e 	bne	r2,zero,d1049c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  d1042c:	e0bffb17 	ldw	r2,-20(fp)
  d10430:	00c03474 	movhi	r3,209
  d10434:	18c77904 	addi	r3,r3,7652
  d10438:	10800324 	muli	r2,r2,12
  d1043c:	10c5883a 	add	r2,r2,r3
  d10440:	10c00017 	ldw	r3,0(r2)
  d10444:	e0bffc17 	ldw	r2,-16(fp)
  d10448:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  d1044c:	e0bffb17 	ldw	r2,-20(fp)
  d10450:	00c03474 	movhi	r3,209
  d10454:	18c77904 	addi	r3,r3,7652
  d10458:	10800324 	muli	r2,r2,12
  d1045c:	10c5883a 	add	r2,r2,r3
  d10460:	10800104 	addi	r2,r2,4
  d10464:	10c00017 	ldw	r3,0(r2)
  d10468:	e0bffc17 	ldw	r2,-16(fp)
  d1046c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  d10470:	e0bffb17 	ldw	r2,-20(fp)
  d10474:	00c03474 	movhi	r3,209
  d10478:	18c77904 	addi	r3,r3,7652
  d1047c:	10800324 	muli	r2,r2,12
  d10480:	10c5883a 	add	r2,r2,r3
  d10484:	10800204 	addi	r2,r2,8
  d10488:	10c00017 	ldw	r3,0(r2)
  d1048c:	e0bffc17 	ldw	r2,-16(fp)
  d10490:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  d10494:	e13ffb17 	ldw	r4,-20(fp)
  d10498:	0d0cd9c0 	call	d0cd9c <alt_release_fd>
  }
} 
  d1049c:	e037883a 	mov	sp,fp
  d104a0:	dfc00117 	ldw	ra,4(sp)
  d104a4:	df000017 	ldw	fp,0(sp)
  d104a8:	dec00204 	addi	sp,sp,8
  d104ac:	f800283a 	ret

00d104b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  d104b0:	defffb04 	addi	sp,sp,-20
  d104b4:	dfc00415 	stw	ra,16(sp)
  d104b8:	df000315 	stw	fp,12(sp)
  d104bc:	df000304 	addi	fp,sp,12
  d104c0:	e13ffd15 	stw	r4,-12(fp)
  d104c4:	e17ffe15 	stw	r5,-8(fp)
  d104c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  d104cc:	01003474 	movhi	r4,209
  d104d0:	21077c04 	addi	r4,r4,7664
  d104d4:	e17ffd17 	ldw	r5,-12(fp)
  d104d8:	01800044 	movi	r6,1
  d104dc:	01c07fc4 	movi	r7,511
  d104e0:	0d103ec0 	call	d103ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  d104e4:	01003474 	movhi	r4,209
  d104e8:	21077904 	addi	r4,r4,7652
  d104ec:	e17ffe17 	ldw	r5,-8(fp)
  d104f0:	000d883a 	mov	r6,zero
  d104f4:	01c07fc4 	movi	r7,511
  d104f8:	0d103ec0 	call	d103ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  d104fc:	01003474 	movhi	r4,209
  d10500:	21077f04 	addi	r4,r4,7676
  d10504:	e17fff17 	ldw	r5,-4(fp)
  d10508:	01800044 	movi	r6,1
  d1050c:	01c07fc4 	movi	r7,511
  d10510:	0d103ec0 	call	d103ec <alt_open_fd>
}  
  d10514:	e037883a 	mov	sp,fp
  d10518:	dfc00117 	ldw	ra,4(sp)
  d1051c:	df000017 	ldw	fp,0(sp)
  d10520:	dec00204 	addi	sp,sp,8
  d10524:	f800283a 	ret

00d10528 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  d10528:	defffc04 	addi	sp,sp,-16
  d1052c:	df000315 	stw	fp,12(sp)
  d10530:	df000304 	addi	fp,sp,12
  d10534:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  d10538:	e0bffe17 	ldw	r2,-8(fp)
  d1053c:	10800217 	ldw	r2,8(r2)
  d10540:	10d00034 	orhi	r3,r2,16384
  d10544:	e0bffe17 	ldw	r2,-8(fp)
  d10548:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  d1054c:	e03ffd15 	stw	zero,-12(fp)
  d10550:	00002006 	br	d105d4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  d10554:	e0bffd17 	ldw	r2,-12(fp)
  d10558:	00c03474 	movhi	r3,209
  d1055c:	18c77904 	addi	r3,r3,7652
  d10560:	10800324 	muli	r2,r2,12
  d10564:	10c5883a 	add	r2,r2,r3
  d10568:	10c00017 	ldw	r3,0(r2)
  d1056c:	e0bffe17 	ldw	r2,-8(fp)
  d10570:	10800017 	ldw	r2,0(r2)
  d10574:	1880141e 	bne	r3,r2,d105c8 <alt_file_locked+0xa0>
  d10578:	e0bffd17 	ldw	r2,-12(fp)
  d1057c:	00c03474 	movhi	r3,209
  d10580:	18c77904 	addi	r3,r3,7652
  d10584:	10800324 	muli	r2,r2,12
  d10588:	10c5883a 	add	r2,r2,r3
  d1058c:	10800204 	addi	r2,r2,8
  d10590:	10800017 	ldw	r2,0(r2)
  d10594:	1004403a 	cmpge	r2,r2,zero
  d10598:	10000b1e 	bne	r2,zero,d105c8 <alt_file_locked+0xa0>
  d1059c:	e0bffd17 	ldw	r2,-12(fp)
  d105a0:	10800324 	muli	r2,r2,12
  d105a4:	1007883a 	mov	r3,r2
  d105a8:	00803474 	movhi	r2,209
  d105ac:	10877904 	addi	r2,r2,7652
  d105b0:	1887883a 	add	r3,r3,r2
  d105b4:	e0bffe17 	ldw	r2,-8(fp)
  d105b8:	18800326 	beq	r3,r2,d105c8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  d105bc:	00bffcc4 	movi	r2,-13
  d105c0:	e0bfff15 	stw	r2,-4(fp)
  d105c4:	00000a06 	br	d105f0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  d105c8:	e0bffd17 	ldw	r2,-12(fp)
  d105cc:	10800044 	addi	r2,r2,1
  d105d0:	e0bffd15 	stw	r2,-12(fp)
  d105d4:	00803474 	movhi	r2,209
  d105d8:	108c5404 	addi	r2,r2,12624
  d105dc:	10800017 	ldw	r2,0(r2)
  d105e0:	1007883a 	mov	r3,r2
  d105e4:	e0bffd17 	ldw	r2,-12(fp)
  d105e8:	18bfda2e 	bgeu	r3,r2,d10554 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  d105ec:	e03fff15 	stw	zero,-4(fp)
  d105f0:	e0bfff17 	ldw	r2,-4(fp)
}
  d105f4:	e037883a 	mov	sp,fp
  d105f8:	df000017 	ldw	fp,0(sp)
  d105fc:	dec00104 	addi	sp,sp,4
  d10600:	f800283a 	ret

00d10604 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  d10604:	defff404 	addi	sp,sp,-48
  d10608:	dfc00b15 	stw	ra,44(sp)
  d1060c:	df000a15 	stw	fp,40(sp)
  d10610:	df000a04 	addi	fp,sp,40
  d10614:	e13ffb15 	stw	r4,-20(fp)
  d10618:	e17ffc15 	stw	r5,-16(fp)
  d1061c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  d10620:	00bfffc4 	movi	r2,-1
  d10624:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  d10628:	00bffb44 	movi	r2,-19
  d1062c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  d10630:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  d10634:	e13ffb17 	ldw	r4,-20(fp)
  d10638:	01403474 	movhi	r5,209
  d1063c:	294c5204 	addi	r5,r5,12616
  d10640:	0d1005c0 	call	d1005c <alt_find_dev>
  d10644:	e0bffa15 	stw	r2,-24(fp)
  d10648:	e0bffa17 	ldw	r2,-24(fp)
  d1064c:	1004c03a 	cmpne	r2,r2,zero
  d10650:	1000051e 	bne	r2,zero,d10668 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  d10654:	e13ffb17 	ldw	r4,-20(fp)
  d10658:	0d109b00 	call	d109b0 <alt_find_file>
  d1065c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  d10660:	00800044 	movi	r2,1
  d10664:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  d10668:	e0bffa17 	ldw	r2,-24(fp)
  d1066c:	1005003a 	cmpeq	r2,r2,zero
  d10670:	1000301e 	bne	r2,zero,d10734 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  d10674:	e13ffa17 	ldw	r4,-24(fp)
  d10678:	0d10ad00 	call	d10ad0 <alt_get_fd>
  d1067c:	e0bff815 	stw	r2,-32(fp)
  d10680:	e0bff817 	ldw	r2,-32(fp)
  d10684:	1004403a 	cmpge	r2,r2,zero
  d10688:	1000031e 	bne	r2,zero,d10698 <open+0x94>
    {
      status = index;
  d1068c:	e0bff817 	ldw	r2,-32(fp)
  d10690:	e0bff715 	stw	r2,-36(fp)
  d10694:	00002906 	br	d1073c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  d10698:	e0bff817 	ldw	r2,-32(fp)
  d1069c:	10800324 	muli	r2,r2,12
  d106a0:	1007883a 	mov	r3,r2
  d106a4:	00803474 	movhi	r2,209
  d106a8:	10877904 	addi	r2,r2,7652
  d106ac:	1885883a 	add	r2,r3,r2
  d106b0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  d106b4:	e0fffc17 	ldw	r3,-16(fp)
  d106b8:	00900034 	movhi	r2,16384
  d106bc:	10bfffc4 	addi	r2,r2,-1
  d106c0:	1886703a 	and	r3,r3,r2
  d106c4:	e0bff917 	ldw	r2,-28(fp)
  d106c8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  d106cc:	e0bff617 	ldw	r2,-40(fp)
  d106d0:	1004c03a 	cmpne	r2,r2,zero
  d106d4:	1000061e 	bne	r2,zero,d106f0 <open+0xec>
  d106d8:	e13ff917 	ldw	r4,-28(fp)
  d106dc:	0d105280 	call	d10528 <alt_file_locked>
  d106e0:	e0bff715 	stw	r2,-36(fp)
  d106e4:	e0bff717 	ldw	r2,-36(fp)
  d106e8:	1004803a 	cmplt	r2,r2,zero
  d106ec:	1000131e 	bne	r2,zero,d1073c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  d106f0:	e0bffa17 	ldw	r2,-24(fp)
  d106f4:	10800317 	ldw	r2,12(r2)
  d106f8:	1005003a 	cmpeq	r2,r2,zero
  d106fc:	1000091e 	bne	r2,zero,d10724 <open+0x120>
  d10700:	e0bffa17 	ldw	r2,-24(fp)
  d10704:	10800317 	ldw	r2,12(r2)
  d10708:	e13ff917 	ldw	r4,-28(fp)
  d1070c:	e17ffb17 	ldw	r5,-20(fp)
  d10710:	e1bffc17 	ldw	r6,-16(fp)
  d10714:	e1fffd17 	ldw	r7,-12(fp)
  d10718:	103ee83a 	callr	r2
  d1071c:	e0bfff15 	stw	r2,-4(fp)
  d10720:	00000106 	br	d10728 <open+0x124>
  d10724:	e03fff15 	stw	zero,-4(fp)
  d10728:	e0bfff17 	ldw	r2,-4(fp)
  d1072c:	e0bff715 	stw	r2,-36(fp)
  d10730:	00000206 	br	d1073c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  d10734:	00bffb44 	movi	r2,-19
  d10738:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  d1073c:	e0bff717 	ldw	r2,-36(fp)
  d10740:	1004403a 	cmpge	r2,r2,zero
  d10744:	1000091e 	bne	r2,zero,d1076c <open+0x168>
  {
    alt_release_fd (index);  
  d10748:	e13ff817 	ldw	r4,-32(fp)
  d1074c:	0d0cd9c0 	call	d0cd9c <alt_release_fd>
    ALT_ERRNO = -status;
  d10750:	0d1078c0 	call	d1078c <alt_get_errno>
  d10754:	e0fff717 	ldw	r3,-36(fp)
  d10758:	00c7c83a 	sub	r3,zero,r3
  d1075c:	10c00015 	stw	r3,0(r2)
    return -1;
  d10760:	00bfffc4 	movi	r2,-1
  d10764:	e0bffe15 	stw	r2,-8(fp)
  d10768:	00000206 	br	d10774 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  d1076c:	e0bff817 	ldw	r2,-32(fp)
  d10770:	e0bffe15 	stw	r2,-8(fp)
  d10774:	e0bffe17 	ldw	r2,-8(fp)
}
  d10778:	e037883a 	mov	sp,fp
  d1077c:	dfc00117 	ldw	ra,4(sp)
  d10780:	df000017 	ldw	fp,0(sp)
  d10784:	dec00204 	addi	sp,sp,8
  d10788:	f800283a 	ret

00d1078c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d1078c:	defffd04 	addi	sp,sp,-12
  d10790:	dfc00215 	stw	ra,8(sp)
  d10794:	df000115 	stw	fp,4(sp)
  d10798:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d1079c:	00803474 	movhi	r2,209
  d107a0:	108c5504 	addi	r2,r2,12628
  d107a4:	10800017 	ldw	r2,0(r2)
  d107a8:	1005003a 	cmpeq	r2,r2,zero
  d107ac:	1000061e 	bne	r2,zero,d107c8 <alt_get_errno+0x3c>
  d107b0:	00803474 	movhi	r2,209
  d107b4:	108c5504 	addi	r2,r2,12628
  d107b8:	10800017 	ldw	r2,0(r2)
  d107bc:	103ee83a 	callr	r2
  d107c0:	e0bfff15 	stw	r2,-4(fp)
  d107c4:	00000306 	br	d107d4 <alt_get_errno+0x48>
  d107c8:	00803474 	movhi	r2,209
  d107cc:	10935b04 	addi	r2,r2,19820
  d107d0:	e0bfff15 	stw	r2,-4(fp)
  d107d4:	e0bfff17 	ldw	r2,-4(fp)
}
  d107d8:	e037883a 	mov	sp,fp
  d107dc:	dfc00117 	ldw	ra,4(sp)
  d107e0:	df000017 	ldw	fp,0(sp)
  d107e4:	dec00204 	addi	sp,sp,8
  d107e8:	f800283a 	ret

00d107ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  d107ec:	defffa04 	addi	sp,sp,-24
  d107f0:	df000515 	stw	fp,20(sp)
  d107f4:	df000504 	addi	fp,sp,20
  d107f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  d107fc:	0005303a 	rdctl	r2,status
  d10800:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  d10804:	e0fffd17 	ldw	r3,-12(fp)
  d10808:	00bfff84 	movi	r2,-2
  d1080c:	1884703a 	and	r2,r3,r2
  d10810:	1001703a 	wrctl	status,r2
  
  return context;
  d10814:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  d10818:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  d1081c:	e0bfff17 	ldw	r2,-4(fp)
  d10820:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  d10824:	e0bffc17 	ldw	r2,-16(fp)
  d10828:	10c00017 	ldw	r3,0(r2)
  d1082c:	e0bffc17 	ldw	r2,-16(fp)
  d10830:	10800117 	ldw	r2,4(r2)
  d10834:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  d10838:	e0bffc17 	ldw	r2,-16(fp)
  d1083c:	10c00117 	ldw	r3,4(r2)
  d10840:	e0bffc17 	ldw	r2,-16(fp)
  d10844:	10800017 	ldw	r2,0(r2)
  d10848:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  d1084c:	e0fffc17 	ldw	r3,-16(fp)
  d10850:	e0bffc17 	ldw	r2,-16(fp)
  d10854:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  d10858:	e0fffc17 	ldw	r3,-16(fp)
  d1085c:	e0bffc17 	ldw	r2,-16(fp)
  d10860:	18800015 	stw	r2,0(r3)
  d10864:	e0bffe17 	ldw	r2,-8(fp)
  d10868:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  d1086c:	e0bffb17 	ldw	r2,-20(fp)
  d10870:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  d10874:	e037883a 	mov	sp,fp
  d10878:	df000017 	ldw	fp,0(sp)
  d1087c:	dec00104 	addi	sp,sp,4
  d10880:	f800283a 	ret

00d10884 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  d10884:	defffb04 	addi	sp,sp,-20
  d10888:	dfc00415 	stw	ra,16(sp)
  d1088c:	df000315 	stw	fp,12(sp)
  d10890:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  d10894:	d0a01a17 	ldw	r2,-32664(gp)
  d10898:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  d1089c:	d0a71f17 	ldw	r2,-25476(gp)
  d108a0:	10800044 	addi	r2,r2,1
  d108a4:	d0a71f15 	stw	r2,-25476(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  d108a8:	00003106 	br	d10970 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  d108ac:	e0bffe17 	ldw	r2,-8(fp)
  d108b0:	10800017 	ldw	r2,0(r2)
  d108b4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  d108b8:	e0bffe17 	ldw	r2,-8(fp)
  d108bc:	10800403 	ldbu	r2,16(r2)
  d108c0:	10803fcc 	andi	r2,r2,255
  d108c4:	1005003a 	cmpeq	r2,r2,zero
  d108c8:	1000051e 	bne	r2,zero,d108e0 <alt_tick+0x5c>
  d108cc:	d0a71f17 	ldw	r2,-25476(gp)
  d108d0:	1004c03a 	cmpne	r2,r2,zero
  d108d4:	1000021e 	bne	r2,zero,d108e0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  d108d8:	e0bffe17 	ldw	r2,-8(fp)
  d108dc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  d108e0:	e0bffe17 	ldw	r2,-8(fp)
  d108e4:	10c00217 	ldw	r3,8(r2)
  d108e8:	d0a71f17 	ldw	r2,-25476(gp)
  d108ec:	10c01e36 	bltu	r2,r3,d10968 <alt_tick+0xe4>
  d108f0:	e0bffe17 	ldw	r2,-8(fp)
  d108f4:	10800403 	ldbu	r2,16(r2)
  d108f8:	10803fcc 	andi	r2,r2,255
  d108fc:	1004c03a 	cmpne	r2,r2,zero
  d10900:	1000191e 	bne	r2,zero,d10968 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  d10904:	e0bffe17 	ldw	r2,-8(fp)
  d10908:	10c00317 	ldw	r3,12(r2)
  d1090c:	e0bffe17 	ldw	r2,-8(fp)
  d10910:	11000517 	ldw	r4,20(r2)
  d10914:	183ee83a 	callr	r3
  d10918:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  d1091c:	e0bffd17 	ldw	r2,-12(fp)
  d10920:	1004c03a 	cmpne	r2,r2,zero
  d10924:	1000031e 	bne	r2,zero,d10934 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  d10928:	e13ffe17 	ldw	r4,-8(fp)
  d1092c:	0d107ec0 	call	d107ec <alt_alarm_stop>
  d10930:	00000d06 	br	d10968 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  d10934:	e0bffe17 	ldw	r2,-8(fp)
  d10938:	10c00217 	ldw	r3,8(r2)
  d1093c:	e0bffd17 	ldw	r2,-12(fp)
  d10940:	1887883a 	add	r3,r3,r2
  d10944:	e0bffe17 	ldw	r2,-8(fp)
  d10948:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  d1094c:	e0bffe17 	ldw	r2,-8(fp)
  d10950:	10c00217 	ldw	r3,8(r2)
  d10954:	d0a71f17 	ldw	r2,-25476(gp)
  d10958:	1880032e 	bgeu	r3,r2,d10968 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  d1095c:	e0fffe17 	ldw	r3,-8(fp)
  d10960:	00800044 	movi	r2,1
  d10964:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  d10968:	e0bfff17 	ldw	r2,-4(fp)
  d1096c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  d10970:	d0e01a04 	addi	r3,gp,-32664
  d10974:	e0bffe17 	ldw	r2,-8(fp)
  d10978:	10ffcc1e 	bne	r2,r3,d108ac <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  d1097c:	e037883a 	mov	sp,fp
  d10980:	dfc00117 	ldw	ra,4(sp)
  d10984:	df000017 	ldw	fp,0(sp)
  d10988:	dec00204 	addi	sp,sp,8
  d1098c:	f800283a 	ret

00d10990 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  d10990:	deffff04 	addi	sp,sp,-4
  d10994:	df000015 	stw	fp,0(sp)
  d10998:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  d1099c:	000170fa 	wrctl	ienable,zero
}
  d109a0:	e037883a 	mov	sp,fp
  d109a4:	df000017 	ldw	fp,0(sp)
  d109a8:	dec00104 	addi	sp,sp,4
  d109ac:	f800283a 	ret

00d109b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  d109b0:	defffa04 	addi	sp,sp,-24
  d109b4:	dfc00515 	stw	ra,20(sp)
  d109b8:	df000415 	stw	fp,16(sp)
  d109bc:	df000404 	addi	fp,sp,16
  d109c0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  d109c4:	00803474 	movhi	r2,209
  d109c8:	108c5004 	addi	r2,r2,12608
  d109cc:	10800017 	ldw	r2,0(r2)
  d109d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  d109d4:	00003306 	br	d10aa4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  d109d8:	e0bffd17 	ldw	r2,-12(fp)
  d109dc:	11000217 	ldw	r4,8(r2)
  d109e0:	0d03d500 	call	d03d50 <strlen>
  d109e4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  d109e8:	e0bffd17 	ldw	r2,-12(fp)
  d109ec:	10c00217 	ldw	r3,8(r2)
  d109f0:	e0bffc17 	ldw	r2,-16(fp)
  d109f4:	1885883a 	add	r2,r3,r2
  d109f8:	10bfffc4 	addi	r2,r2,-1
  d109fc:	10800003 	ldbu	r2,0(r2)
  d10a00:	10803fcc 	andi	r2,r2,255
  d10a04:	1080201c 	xori	r2,r2,128
  d10a08:	10bfe004 	addi	r2,r2,-128
  d10a0c:	10800bd8 	cmpnei	r2,r2,47
  d10a10:	1000031e 	bne	r2,zero,d10a20 <alt_find_file+0x70>
    {
      len -= 1;
  d10a14:	e0bffc17 	ldw	r2,-16(fp)
  d10a18:	10bfffc4 	addi	r2,r2,-1
  d10a1c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  d10a20:	e0bffc17 	ldw	r2,-16(fp)
  d10a24:	1007883a 	mov	r3,r2
  d10a28:	e0bffe17 	ldw	r2,-8(fp)
  d10a2c:	1885883a 	add	r2,r3,r2
  d10a30:	10800003 	ldbu	r2,0(r2)
  d10a34:	10803fcc 	andi	r2,r2,255
  d10a38:	1080201c 	xori	r2,r2,128
  d10a3c:	10bfe004 	addi	r2,r2,-128
  d10a40:	10800be0 	cmpeqi	r2,r2,47
  d10a44:	10000a1e 	bne	r2,zero,d10a70 <alt_find_file+0xc0>
  d10a48:	e0bffc17 	ldw	r2,-16(fp)
  d10a4c:	1007883a 	mov	r3,r2
  d10a50:	e0bffe17 	ldw	r2,-8(fp)
  d10a54:	1885883a 	add	r2,r3,r2
  d10a58:	10800003 	ldbu	r2,0(r2)
  d10a5c:	10803fcc 	andi	r2,r2,255
  d10a60:	1080201c 	xori	r2,r2,128
  d10a64:	10bfe004 	addi	r2,r2,-128
  d10a68:	1004c03a 	cmpne	r2,r2,zero
  d10a6c:	10000a1e 	bne	r2,zero,d10a98 <alt_find_file+0xe8>
  d10a70:	e0bffd17 	ldw	r2,-12(fp)
  d10a74:	11000217 	ldw	r4,8(r2)
  d10a78:	e1bffc17 	ldw	r6,-16(fp)
  d10a7c:	e17ffe17 	ldw	r5,-8(fp)
  d10a80:	0d10c640 	call	d10c64 <memcmp>
  d10a84:	1004c03a 	cmpne	r2,r2,zero
  d10a88:	1000031e 	bne	r2,zero,d10a98 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  d10a8c:	e0bffd17 	ldw	r2,-12(fp)
  d10a90:	e0bfff15 	stw	r2,-4(fp)
  d10a94:	00000806 	br	d10ab8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  d10a98:	e0bffd17 	ldw	r2,-12(fp)
  d10a9c:	10800017 	ldw	r2,0(r2)
  d10aa0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  d10aa4:	00c03474 	movhi	r3,209
  d10aa8:	18cc5004 	addi	r3,r3,12608
  d10aac:	e0bffd17 	ldw	r2,-12(fp)
  d10ab0:	10ffc91e 	bne	r2,r3,d109d8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  d10ab4:	e03fff15 	stw	zero,-4(fp)
  d10ab8:	e0bfff17 	ldw	r2,-4(fp)
}
  d10abc:	e037883a 	mov	sp,fp
  d10ac0:	dfc00117 	ldw	ra,4(sp)
  d10ac4:	df000017 	ldw	fp,0(sp)
  d10ac8:	dec00204 	addi	sp,sp,8
  d10acc:	f800283a 	ret

00d10ad0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  d10ad0:	defffc04 	addi	sp,sp,-16
  d10ad4:	df000315 	stw	fp,12(sp)
  d10ad8:	df000304 	addi	fp,sp,12
  d10adc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  d10ae0:	00bffa04 	movi	r2,-24
  d10ae4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  d10ae8:	e03ffe15 	stw	zero,-8(fp)
  d10aec:	00001e06 	br	d10b68 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  d10af0:	e0bffe17 	ldw	r2,-8(fp)
  d10af4:	00c03474 	movhi	r3,209
  d10af8:	18c77904 	addi	r3,r3,7652
  d10afc:	10800324 	muli	r2,r2,12
  d10b00:	10c5883a 	add	r2,r2,r3
  d10b04:	10800017 	ldw	r2,0(r2)
  d10b08:	1004c03a 	cmpne	r2,r2,zero
  d10b0c:	1000131e 	bne	r2,zero,d10b5c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  d10b10:	e0bffe17 	ldw	r2,-8(fp)
  d10b14:	00c03474 	movhi	r3,209
  d10b18:	18c77904 	addi	r3,r3,7652
  d10b1c:	10800324 	muli	r2,r2,12
  d10b20:	10c7883a 	add	r3,r2,r3
  d10b24:	e0bfff17 	ldw	r2,-4(fp)
  d10b28:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  d10b2c:	00803474 	movhi	r2,209
  d10b30:	108c5404 	addi	r2,r2,12624
  d10b34:	10c00017 	ldw	r3,0(r2)
  d10b38:	e0bffe17 	ldw	r2,-8(fp)
  d10b3c:	1880040e 	bge	r3,r2,d10b50 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  d10b40:	00c03474 	movhi	r3,209
  d10b44:	18cc5404 	addi	r3,r3,12624
  d10b48:	e0bffe17 	ldw	r2,-8(fp)
  d10b4c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  d10b50:	e0bffe17 	ldw	r2,-8(fp)
  d10b54:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  d10b58:	00000606 	br	d10b74 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  d10b5c:	e0bffe17 	ldw	r2,-8(fp)
  d10b60:	10800044 	addi	r2,r2,1
  d10b64:	e0bffe15 	stw	r2,-8(fp)
  d10b68:	e0bffe17 	ldw	r2,-8(fp)
  d10b6c:	10800810 	cmplti	r2,r2,32
  d10b70:	103fdf1e 	bne	r2,zero,d10af0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  d10b74:	e0bffd17 	ldw	r2,-12(fp)
}
  d10b78:	e037883a 	mov	sp,fp
  d10b7c:	df000017 	ldw	fp,0(sp)
  d10b80:	dec00104 	addi	sp,sp,4
  d10b84:	f800283a 	ret

00d10b88 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  d10b88:	defffb04 	addi	sp,sp,-20
  d10b8c:	df000415 	stw	fp,16(sp)
  d10b90:	df000404 	addi	fp,sp,16
  d10b94:	e13ffe15 	stw	r4,-8(fp)
  d10b98:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  d10b9c:	e0bfff17 	ldw	r2,-4(fp)
  d10ba0:	10840070 	cmpltui	r2,r2,4097
  d10ba4:	1000021e 	bne	r2,zero,d10bb0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  d10ba8:	00840004 	movi	r2,4096
  d10bac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  d10bb0:	e0fffe17 	ldw	r3,-8(fp)
  d10bb4:	e0bfff17 	ldw	r2,-4(fp)
  d10bb8:	1885883a 	add	r2,r3,r2
  d10bbc:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  d10bc0:	e0bffe17 	ldw	r2,-8(fp)
  d10bc4:	e0bffd15 	stw	r2,-12(fp)
  d10bc8:	00000506 	br	d10be0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  d10bcc:	e0bffd17 	ldw	r2,-12(fp)
  d10bd0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  d10bd4:	e0bffd17 	ldw	r2,-12(fp)
  d10bd8:	10800804 	addi	r2,r2,32
  d10bdc:	e0bffd15 	stw	r2,-12(fp)
  d10be0:	e0fffd17 	ldw	r3,-12(fp)
  d10be4:	e0bffc17 	ldw	r2,-16(fp)
  d10be8:	18bff836 	bltu	r3,r2,d10bcc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  d10bec:	e0bffe17 	ldw	r2,-8(fp)
  d10bf0:	108007cc 	andi	r2,r2,31
  d10bf4:	1005003a 	cmpeq	r2,r2,zero
  d10bf8:	1000021e 	bne	r2,zero,d10c04 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  d10bfc:	e0bffd17 	ldw	r2,-12(fp)
  d10c00:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  d10c04:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  d10c08:	e037883a 	mov	sp,fp
  d10c0c:	df000017 	ldw	fp,0(sp)
  d10c10:	dec00104 	addi	sp,sp,4
  d10c14:	f800283a 	ret

00d10c18 <atexit>:
  d10c18:	200b883a 	mov	r5,r4
  d10c1c:	000d883a 	mov	r6,zero
  d10c20:	0009883a 	mov	r4,zero
  d10c24:	000f883a 	mov	r7,zero
  d10c28:	0d10cd81 	jmpi	d10cd8 <__register_exitproc>

00d10c2c <exit>:
  d10c2c:	defffe04 	addi	sp,sp,-8
  d10c30:	000b883a 	mov	r5,zero
  d10c34:	dc000015 	stw	r16,0(sp)
  d10c38:	dfc00115 	stw	ra,4(sp)
  d10c3c:	2021883a 	mov	r16,r4
  d10c40:	0d10e100 	call	d10e10 <__call_exitprocs>
  d10c44:	00803474 	movhi	r2,209
  d10c48:	108c4b04 	addi	r2,r2,12588
  d10c4c:	11000017 	ldw	r4,0(r2)
  d10c50:	20800f17 	ldw	r2,60(r4)
  d10c54:	10000126 	beq	r2,zero,d10c5c <exit+0x30>
  d10c58:	103ee83a 	callr	r2
  d10c5c:	8009883a 	mov	r4,r16
  d10c60:	0d110000 	call	d11000 <_exit>

00d10c64 <memcmp>:
  d10c64:	00c000c4 	movi	r3,3
  d10c68:	1980032e 	bgeu	r3,r6,d10c78 <memcmp+0x14>
  d10c6c:	2144b03a 	or	r2,r4,r5
  d10c70:	10c4703a 	and	r2,r2,r3
  d10c74:	10000f26 	beq	r2,zero,d10cb4 <memcmp+0x50>
  d10c78:	31ffffc4 	addi	r7,r6,-1
  d10c7c:	3000061e 	bne	r6,zero,d10c98 <memcmp+0x34>
  d10c80:	00000a06 	br	d10cac <memcmp+0x48>
  d10c84:	39ffffc4 	addi	r7,r7,-1
  d10c88:	00bfffc4 	movi	r2,-1
  d10c8c:	21000044 	addi	r4,r4,1
  d10c90:	29400044 	addi	r5,r5,1
  d10c94:	38800526 	beq	r7,r2,d10cac <memcmp+0x48>
  d10c98:	20c00003 	ldbu	r3,0(r4)
  d10c9c:	28800003 	ldbu	r2,0(r5)
  d10ca0:	18bff826 	beq	r3,r2,d10c84 <memcmp+0x20>
  d10ca4:	1885c83a 	sub	r2,r3,r2
  d10ca8:	f800283a 	ret
  d10cac:	0005883a 	mov	r2,zero
  d10cb0:	f800283a 	ret
  d10cb4:	180f883a 	mov	r7,r3
  d10cb8:	20c00017 	ldw	r3,0(r4)
  d10cbc:	28800017 	ldw	r2,0(r5)
  d10cc0:	18bfed1e 	bne	r3,r2,d10c78 <memcmp+0x14>
  d10cc4:	31bfff04 	addi	r6,r6,-4
  d10cc8:	21000104 	addi	r4,r4,4
  d10ccc:	29400104 	addi	r5,r5,4
  d10cd0:	39bff936 	bltu	r7,r6,d10cb8 <memcmp+0x54>
  d10cd4:	003fe806 	br	d10c78 <memcmp+0x14>

00d10cd8 <__register_exitproc>:
  d10cd8:	defffa04 	addi	sp,sp,-24
  d10cdc:	00803474 	movhi	r2,209
  d10ce0:	108c4b04 	addi	r2,r2,12588
  d10ce4:	dc000015 	stw	r16,0(sp)
  d10ce8:	14000017 	ldw	r16,0(r2)
  d10cec:	dd000415 	stw	r20,16(sp)
  d10cf0:	2829883a 	mov	r20,r5
  d10cf4:	81405217 	ldw	r5,328(r16)
  d10cf8:	dcc00315 	stw	r19,12(sp)
  d10cfc:	dc800215 	stw	r18,8(sp)
  d10d00:	dc400115 	stw	r17,4(sp)
  d10d04:	dfc00515 	stw	ra,20(sp)
  d10d08:	2023883a 	mov	r17,r4
  d10d0c:	3027883a 	mov	r19,r6
  d10d10:	3825883a 	mov	r18,r7
  d10d14:	28002526 	beq	r5,zero,d10dac <__register_exitproc+0xd4>
  d10d18:	29000117 	ldw	r4,4(r5)
  d10d1c:	008007c4 	movi	r2,31
  d10d20:	11002716 	blt	r2,r4,d10dc0 <__register_exitproc+0xe8>
  d10d24:	8800101e 	bne	r17,zero,d10d68 <__register_exitproc+0x90>
  d10d28:	2105883a 	add	r2,r4,r4
  d10d2c:	1085883a 	add	r2,r2,r2
  d10d30:	20c00044 	addi	r3,r4,1
  d10d34:	1145883a 	add	r2,r2,r5
  d10d38:	0009883a 	mov	r4,zero
  d10d3c:	15000215 	stw	r20,8(r2)
  d10d40:	28c00115 	stw	r3,4(r5)
  d10d44:	2005883a 	mov	r2,r4
  d10d48:	dfc00517 	ldw	ra,20(sp)
  d10d4c:	dd000417 	ldw	r20,16(sp)
  d10d50:	dcc00317 	ldw	r19,12(sp)
  d10d54:	dc800217 	ldw	r18,8(sp)
  d10d58:	dc400117 	ldw	r17,4(sp)
  d10d5c:	dc000017 	ldw	r16,0(sp)
  d10d60:	dec00604 	addi	sp,sp,24
  d10d64:	f800283a 	ret
  d10d68:	29802204 	addi	r6,r5,136
  d10d6c:	00800044 	movi	r2,1
  d10d70:	110e983a 	sll	r7,r2,r4
  d10d74:	30c04017 	ldw	r3,256(r6)
  d10d78:	2105883a 	add	r2,r4,r4
  d10d7c:	1085883a 	add	r2,r2,r2
  d10d80:	1185883a 	add	r2,r2,r6
  d10d84:	19c6b03a 	or	r3,r3,r7
  d10d88:	14802015 	stw	r18,128(r2)
  d10d8c:	14c00015 	stw	r19,0(r2)
  d10d90:	00800084 	movi	r2,2
  d10d94:	30c04015 	stw	r3,256(r6)
  d10d98:	88bfe31e 	bne	r17,r2,d10d28 <__register_exitproc+0x50>
  d10d9c:	30804117 	ldw	r2,260(r6)
  d10da0:	11c4b03a 	or	r2,r2,r7
  d10da4:	30804115 	stw	r2,260(r6)
  d10da8:	003fdf06 	br	d10d28 <__register_exitproc+0x50>
  d10dac:	00803474 	movhi	r2,209
  d10db0:	1093ac04 	addi	r2,r2,20144
  d10db4:	100b883a 	mov	r5,r2
  d10db8:	80805215 	stw	r2,328(r16)
  d10dbc:	003fd606 	br	d10d18 <__register_exitproc+0x40>
  d10dc0:	00800034 	movhi	r2,0
  d10dc4:	10800004 	addi	r2,r2,0
  d10dc8:	1000021e 	bne	r2,zero,d10dd4 <__register_exitproc+0xfc>
  d10dcc:	013fffc4 	movi	r4,-1
  d10dd0:	003fdc06 	br	d10d44 <__register_exitproc+0x6c>
  d10dd4:	01006404 	movi	r4,400
  d10dd8:	103ee83a 	callr	r2
  d10ddc:	1007883a 	mov	r3,r2
  d10de0:	103ffa26 	beq	r2,zero,d10dcc <__register_exitproc+0xf4>
  d10de4:	80805217 	ldw	r2,328(r16)
  d10de8:	180b883a 	mov	r5,r3
  d10dec:	18000115 	stw	zero,4(r3)
  d10df0:	18800015 	stw	r2,0(r3)
  d10df4:	80c05215 	stw	r3,328(r16)
  d10df8:	18006215 	stw	zero,392(r3)
  d10dfc:	18006315 	stw	zero,396(r3)
  d10e00:	0009883a 	mov	r4,zero
  d10e04:	883fc826 	beq	r17,zero,d10d28 <__register_exitproc+0x50>
  d10e08:	003fd706 	br	d10d68 <__register_exitproc+0x90>

00d10e0c <register_fini>:
  d10e0c:	f800283a 	ret

00d10e10 <__call_exitprocs>:
  d10e10:	00803474 	movhi	r2,209
  d10e14:	108c4b04 	addi	r2,r2,12588
  d10e18:	10800017 	ldw	r2,0(r2)
  d10e1c:	defff304 	addi	sp,sp,-52
  d10e20:	df000b15 	stw	fp,44(sp)
  d10e24:	d8800115 	stw	r2,4(sp)
  d10e28:	00800034 	movhi	r2,0
  d10e2c:	10800004 	addi	r2,r2,0
  d10e30:	1005003a 	cmpeq	r2,r2,zero
  d10e34:	d8800215 	stw	r2,8(sp)
  d10e38:	d8800117 	ldw	r2,4(sp)
  d10e3c:	dd400815 	stw	r21,32(sp)
  d10e40:	dd000715 	stw	r20,28(sp)
  d10e44:	10805204 	addi	r2,r2,328
  d10e48:	dfc00c15 	stw	ra,48(sp)
  d10e4c:	ddc00a15 	stw	r23,40(sp)
  d10e50:	dd800915 	stw	r22,36(sp)
  d10e54:	dcc00615 	stw	r19,24(sp)
  d10e58:	dc800515 	stw	r18,20(sp)
  d10e5c:	dc400415 	stw	r17,16(sp)
  d10e60:	dc000315 	stw	r16,12(sp)
  d10e64:	282b883a 	mov	r21,r5
  d10e68:	2039883a 	mov	fp,r4
  d10e6c:	d8800015 	stw	r2,0(sp)
  d10e70:	2829003a 	cmpeq	r20,r5,zero
  d10e74:	d8800117 	ldw	r2,4(sp)
  d10e78:	14405217 	ldw	r17,328(r2)
  d10e7c:	88001026 	beq	r17,zero,d10ec0 <__call_exitprocs+0xb0>
  d10e80:	ddc00017 	ldw	r23,0(sp)
  d10e84:	88800117 	ldw	r2,4(r17)
  d10e88:	8c802204 	addi	r18,r17,136
  d10e8c:	143fffc4 	addi	r16,r2,-1
  d10e90:	80000916 	blt	r16,zero,d10eb8 <__call_exitprocs+0xa8>
  d10e94:	05bfffc4 	movi	r22,-1
  d10e98:	a000151e 	bne	r20,zero,d10ef0 <__call_exitprocs+0xe0>
  d10e9c:	8409883a 	add	r4,r16,r16
  d10ea0:	2105883a 	add	r2,r4,r4
  d10ea4:	1485883a 	add	r2,r2,r18
  d10ea8:	10c02017 	ldw	r3,128(r2)
  d10eac:	a8c01126 	beq	r21,r3,d10ef4 <__call_exitprocs+0xe4>
  d10eb0:	843fffc4 	addi	r16,r16,-1
  d10eb4:	85bff81e 	bne	r16,r22,d10e98 <__call_exitprocs+0x88>
  d10eb8:	d8800217 	ldw	r2,8(sp)
  d10ebc:	10003126 	beq	r2,zero,d10f84 <__call_exitprocs+0x174>
  d10ec0:	dfc00c17 	ldw	ra,48(sp)
  d10ec4:	df000b17 	ldw	fp,44(sp)
  d10ec8:	ddc00a17 	ldw	r23,40(sp)
  d10ecc:	dd800917 	ldw	r22,36(sp)
  d10ed0:	dd400817 	ldw	r21,32(sp)
  d10ed4:	dd000717 	ldw	r20,28(sp)
  d10ed8:	dcc00617 	ldw	r19,24(sp)
  d10edc:	dc800517 	ldw	r18,20(sp)
  d10ee0:	dc400417 	ldw	r17,16(sp)
  d10ee4:	dc000317 	ldw	r16,12(sp)
  d10ee8:	dec00d04 	addi	sp,sp,52
  d10eec:	f800283a 	ret
  d10ef0:	8409883a 	add	r4,r16,r16
  d10ef4:	88c00117 	ldw	r3,4(r17)
  d10ef8:	2105883a 	add	r2,r4,r4
  d10efc:	1445883a 	add	r2,r2,r17
  d10f00:	18ffffc4 	addi	r3,r3,-1
  d10f04:	11800217 	ldw	r6,8(r2)
  d10f08:	1c001526 	beq	r3,r16,d10f60 <__call_exitprocs+0x150>
  d10f0c:	10000215 	stw	zero,8(r2)
  d10f10:	303fe726 	beq	r6,zero,d10eb0 <__call_exitprocs+0xa0>
  d10f14:	00c00044 	movi	r3,1
  d10f18:	1c06983a 	sll	r3,r3,r16
  d10f1c:	90804017 	ldw	r2,256(r18)
  d10f20:	8cc00117 	ldw	r19,4(r17)
  d10f24:	1884703a 	and	r2,r3,r2
  d10f28:	10001426 	beq	r2,zero,d10f7c <__call_exitprocs+0x16c>
  d10f2c:	90804117 	ldw	r2,260(r18)
  d10f30:	1884703a 	and	r2,r3,r2
  d10f34:	10000c1e 	bne	r2,zero,d10f68 <__call_exitprocs+0x158>
  d10f38:	2105883a 	add	r2,r4,r4
  d10f3c:	1485883a 	add	r2,r2,r18
  d10f40:	11400017 	ldw	r5,0(r2)
  d10f44:	e009883a 	mov	r4,fp
  d10f48:	303ee83a 	callr	r6
  d10f4c:	88800117 	ldw	r2,4(r17)
  d10f50:	98bfc81e 	bne	r19,r2,d10e74 <__call_exitprocs+0x64>
  d10f54:	b8800017 	ldw	r2,0(r23)
  d10f58:	147fd526 	beq	r2,r17,d10eb0 <__call_exitprocs+0xa0>
  d10f5c:	003fc506 	br	d10e74 <__call_exitprocs+0x64>
  d10f60:	8c000115 	stw	r16,4(r17)
  d10f64:	003fea06 	br	d10f10 <__call_exitprocs+0x100>
  d10f68:	2105883a 	add	r2,r4,r4
  d10f6c:	1485883a 	add	r2,r2,r18
  d10f70:	11000017 	ldw	r4,0(r2)
  d10f74:	303ee83a 	callr	r6
  d10f78:	003ff406 	br	d10f4c <__call_exitprocs+0x13c>
  d10f7c:	303ee83a 	callr	r6
  d10f80:	003ff206 	br	d10f4c <__call_exitprocs+0x13c>
  d10f84:	88800117 	ldw	r2,4(r17)
  d10f88:	1000081e 	bne	r2,zero,d10fac <__call_exitprocs+0x19c>
  d10f8c:	89000017 	ldw	r4,0(r17)
  d10f90:	20000726 	beq	r4,zero,d10fb0 <__call_exitprocs+0x1a0>
  d10f94:	b9000015 	stw	r4,0(r23)
  d10f98:	8809883a 	mov	r4,r17
  d10f9c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  d10fa0:	bc400017 	ldw	r17,0(r23)
  d10fa4:	883fb71e 	bne	r17,zero,d10e84 <__call_exitprocs+0x74>
  d10fa8:	003fc506 	br	d10ec0 <__call_exitprocs+0xb0>
  d10fac:	89000017 	ldw	r4,0(r17)
  d10fb0:	882f883a 	mov	r23,r17
  d10fb4:	2023883a 	mov	r17,r4
  d10fb8:	883fb21e 	bne	r17,zero,d10e84 <__call_exitprocs+0x74>
  d10fbc:	003fc006 	br	d10ec0 <__call_exitprocs+0xb0>

00d10fc0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  d10fc0:	defffd04 	addi	sp,sp,-12
  d10fc4:	df000215 	stw	fp,8(sp)
  d10fc8:	df000204 	addi	fp,sp,8
  d10fcc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  d10fd0:	e0bfff17 	ldw	r2,-4(fp)
  d10fd4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  d10fd8:	e0bffe17 	ldw	r2,-8(fp)
  d10fdc:	1005003a 	cmpeq	r2,r2,zero
  d10fe0:	1000021e 	bne	r2,zero,d10fec <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  d10fe4:	002af070 	cmpltui	zero,zero,43969
  d10fe8:	00000106 	br	d10ff0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  d10fec:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  d10ff0:	e037883a 	mov	sp,fp
  d10ff4:	df000017 	ldw	fp,0(sp)
  d10ff8:	dec00104 	addi	sp,sp,4
  d10ffc:	f800283a 	ret

00d11000 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  d11000:	defffd04 	addi	sp,sp,-12
  d11004:	dfc00215 	stw	ra,8(sp)
  d11008:	df000115 	stw	fp,4(sp)
  d1100c:	df000104 	addi	fp,sp,4
  d11010:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  d11014:	e13fff17 	ldw	r4,-4(fp)
  d11018:	0d10fc00 	call	d10fc0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  d1101c:	003fff06 	br	d1101c <_exit+0x1c>
  d11020:	00000010 	cmplti	zero,zero,0
  d11024:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  d11028:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_3+0x4b7a0>
  d1102c:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_3+0x1187c0>
  d11030:	001b0c0b 	ldhu	zero,27696(zero)
  d11034:	00000028 	cmpgeui	zero,zero,0
  d11038:	00000018 	cmpnei	zero,zero,0
  d1103c:	00d0af38 	rdprs	r3,zero,17084
  d11040:	000005dc 	xori	zero,zero,23
  d11044:	400e4400 	call	400e440 <__alt_data_end+0x31be440>
  d11048:	92099170 	cmpltui	r8,r18,9797
  d1104c:	95079308 	cmpgei	r20,r18,7756
  d11050:	97049605 	stb	fp,4696(r18)
  d11054:	90019f03 	ldbu	zero,1660(r18)
  d11058:	9c06940a 	0x9c06940a
  d1105c:	00000002 	0x2
  d11060:	00000028 	cmpgeui	zero,zero,0
  d11064:	00000044 	movi	zero,1
  d11068:	00d0b514 	movui	r3,17108
  d1106c:	000005b0 	cmpltui	zero,zero,22
  d11070:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2dbe440>
  d11074:	92099168 	cmpgeui	r8,r18,9797
  d11078:	95079308 	cmpgei	r20,r18,7756
  d1107c:	9c039705 	stb	r16,3676(r19)
  d11080:	90019f02 	0x90019f02
  d11084:	9606940a 	0x9606940a
  d11088:	00000004 	movi	zero,0
  d1108c:	00d10e0c 	andi	r3,zero,17464
