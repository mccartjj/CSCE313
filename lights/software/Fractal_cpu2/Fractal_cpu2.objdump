
Fractal_cpu2.elf:     file format elf32-littlenios2
Fractal_cpu2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00d001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00d00000 paddr 0x00d00000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00d00020 paddr 0x00d00020 align 2**12
         filesz 0x00011444 memsz 0x00011444 flags r-x
    LOAD off    0x00012464 vaddr 0x00d11464 paddr 0x00d13034 align 2**12
         filesz 0x00001bd0 memsz 0x00001bd0 flags rw-
    LOAD off    0x00014c04 vaddr 0x00d14c04 paddr 0x00d14c04 align 2**12
         filesz 0x00000000 memsz 0x000002f8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00d00000  00d00000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00d00020  00d00020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010dc8  00d001b4  00d001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004e8  00d10f7c  00d10f7c  00011f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd0  00d11464  00d13034  00012464  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f8  00d14c04  00d14c04  00014c04  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00014034  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001058  00000000  00000000  00014058  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b6d  00000000  00000000  000150b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002a1b3  00000000  00000000  00016c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a00d  00000000  00000000  00040dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00019c0d  00000000  00000000  0004addd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000020e8  00000000  00000000  000649ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c32  00000000  00000000  00066ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e595  00000000  00000000  00069706  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00077c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000d38  00000000  00000000  00077cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007c685  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007c688  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0007c68d  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0007c68e  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0007c692  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0007c696  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0007c69a  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0007c6a5  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0007c6b0  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0007c6bb  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0007c6c6  2**0
                  CONTENTS, READONLY
 28 .jdi          0000ff9d  00000000  00000000  0007c6e6  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000cf0fa  00000000  00000000  0008c683  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00d00000 l    d  .entry	00000000 .entry
00d00020 l    d  .exceptions	00000000 .exceptions
00d001b4 l    d  .text	00000000 .text
00d10f7c l    d  .rodata	00000000 .rodata
00d11464 l    d  .rwdata	00000000 .rwdata
00d14c04 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00d001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Fractal.c
00000000 l    df *ABS*	00000000 Project.c
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 ef_pow.c
00d12fc8 l     O .rwdata	00000008 bp
00d12fd0 l     O .rwdata	00000008 dp_l
00d12fd8 l     O .rwdata	00000008 dp_h
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_rint.c
00d10fe8 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_isnan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00d02124 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00d029fc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00d11464 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00d03e38 l     F .text	00000058 __sprint_r
00d1118e l     O .rodata	00000010 blanks.3452
00d1117e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00d05e9c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00d07898 l     F .text	00000058 std
00d079a4 l     F .text	00000008 __fp_lock
00d079ac l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00d12ff0 l     O .rwdata	00000004 charset
00d111bc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00d11304 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00d0c480 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00d0c6c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00d0c728 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00d0c828 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00d0c948 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00d0ca28 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00d0cb84 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00d0cdb0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00d13014 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00d0d04c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00d11e20 l     O .rwdata	00001060 jtag_uart_2
00d12e80 l     O .rwdata	0000003c mailbox_0
00d12ebc l     O .rwdata	0000003c mailbox_1
00d12ef8 l     O .rwdata	0000003c mailbox_2
00d12f34 l     O .rwdata	0000003c mailbox_3
00d12f70 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00d0d358 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00d0d598 l     F .text	00000228 altera_avalon_jtag_uart_irq
00d0d7c0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox.c
00d0df94 l     F .text	0000006c alt_avalon_mutex_reg
00d0e000 l     F .text	00000060 alt_get_errno
00d0e194 l     F .text	00000050 alt_mailbox_increment_ptr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00d0e364 l     F .text	0000007c alt_mutex_trylock
00d0e438 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00d0fe20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00d102d8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00d10414 l     F .text	000000dc alt_file_locked
00d10678 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00d10cf8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00d10eac l     F .text	00000040 alt_sim_halt
00d00200 g     F .text	00000084 genColor
00d14c04 g     O .bss	00000008 targetArrayXYMaster
00d09654 g     F .text	00000094 _mprec_log10
00007000 g       *ABS*	00000000 __alt_mem_onchip_memory2_3
00d09740 g     F .text	00000088 __any_on
00d0ae4c g     F .text	00000070 _isatty_r
00d112dc g     O .rodata	00000028 __mprec_tinytens
00d0cbe4 g     F .text	0000006c alt_main
00d0e1e4 g     F .text	000000a8 altera_avalon_mailbox_pend
00d0f2d4 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00d03c3c g     F .text	000000a0 _puts_r
00d14c6c g     O .bss	00000100 alt_irq
00d0aebc g     F .text	00000078 _lseek_r
00d13034 g       *ABS*	00000000 __flash_rwdata_start
00d0befc g     F .text	00000088 __eqdf2
00d14efc g       *ABS*	00000000 __alt_heap_start
00d0e28c g     F .text	000000d8 altera_avalon_mailbox_get
00d03bc4 g     F .text	00000044 printf
00d0a918 g     F .text	00000068 __sseek
00d07900 g     F .text	000000a4 __sinit
00d085d8 g     F .text	00000084 _setlocale_r
00d07a00 g     F .text	00000068 __sfmoreglue
00d0cc70 g     F .text	00000020 __malloc_unlock
00d025bc g     F .text	00000174 __divsf3
00d090d0 g     F .text	000000e0 memmove
00d079f0 g     F .text	00000010 _cleanup
00d00c84 g     F .text	00000458 powf
00d0e4f8 g     F .text	00000040 altera_avalon_mutex_trylock
00d097c8 g     F .text	000000bc _Balloc
00d0e6a8 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00d0bf84 g     F .text	00000088 __gtdf2
00d03bb4 g     F .text	00000010 __errno
00d0e668 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00d00000 g     F .entry	0000001c __reset
00d0e594 g     F .text	0000007c altera_avalon_mutex_is_mine
00d00020 g       *ABS*	00000000 __flash_exceptions_start
00d0add8 g     F .text	00000074 _fstat_r
00d14c28 g     O .bss	00000004 errno
00d031e0 g     F .text	00000038 __make_dp
00d03674 g     F .text	0000002c __make_fp
00d14c30 g     O .bss	00000004 alt_argv
00d1afc4 g       *ABS*	00000000 _gp
00d02308 g     F .text	00000070 __subsf3
00d0e848 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00006000 g       *ABS*	00000000 __alt_mem_onchip_memory2_2
00d11ca0 g     O .rwdata	00000180 alt_fd_list
00d0ff48 g     F .text	00000094 alt_find_dev
00d09030 g     F .text	000000a0 memcpy
00d079e4 g     F .text	0000000c _cleanup_r
00d0c11c g     F .text	000000f8 __floatsidf
00d1039c g     F .text	00000078 alt_io_redirect
00d0c094 g     F .text	00000088 __ltdf2
00d10f7c g       *ABS*	00000000 __DTOR_END__
00d03cdc g     F .text	00000014 puts
00d1087c g     F .text	00000020 altera_nios2_irq_init
00d095a4 g     F .text	000000b0 __ratio
00d0e0d8 g     F .text	000000bc altera_avalon_mailbox_post
00d0e8f8 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00d0d9d8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00d03c08 g     F .text	00000034 _printf_r
00003000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00d0c5bc g     F .text	00000008 __udivsi3
00d0c888 g     F .text	000000c0 isatty
00d111ec g     O .rodata	000000c8 __mprec_tens
00d0e0b8 g     F .text	00000020 altera_avalon_mailbox_close
00d0ef84 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00d085b4 g     F .text	00000008 __locale_charset
00d02898 g     F .text	00000078 __lesf2
00d10a74 g     F .text	00000090 alt_icache_flush
00d14c1c g     O .bss	00000004 __malloc_top_pad
00d12fec g     O .rwdata	00000004 __mb_cur_max
00d085bc g     F .text	0000000c _localeconv_r
00d09ec0 g     F .text	0000003c __i2b
00d07f98 g     F .text	0000049c __sfvwrite_r
00d01f84 g     F .text	0000001c finitef
00d0a8a0 g     F .text	00000070 _sbrk_r
00d0f768 g     F .text	000000d0 helper_plot_pixel
00d01f74 g     F .text	00000010 fabsf
00d0af34 g     F .text	00000078 _read_r
00d11864 g     O .rwdata	0000000c __lc_ctype
00d1300c g     O .rwdata	00000004 alt_max_fd
00d039b4 g     F .text	00000138 __unpack_d
00d0acb4 g     F .text	00000110 _fclose_r
00d07864 g     F .text	00000034 fflush
00d009dc g     F .text	00000224 drawFullSet
00d14c20 g     O .bss	00000004 __malloc_max_sbrked_mem
00d029a8 g     F .text	00000054 __extendsfdf2
00d01fa0 g     F .text	00000018 isnanf
00d02e8c g     F .text	00000074 __adddf3
00d09484 g     F .text	00000120 __b2d
00d0e92c g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
00d0b588 g     F .text	000005b0 __umoddi3
00d0ca94 g     F .text	000000f0 lseek
00d0e610 g     F .text	00000058 altera_avalon_mutex_first_lock
00d12fe0 g     O .rwdata	00000004 __fdlib_version
00d12fe8 g     O .rwdata	00000004 _global_impure_ptr
00d0a23c g     F .text	000005f4 _realloc_r
00d14efc g       *ABS*	00000000 __bss_end
00d101e0 g     F .text	000000f8 alt_iic_isr_register
00d0ea90 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00d10770 g     F .text	0000010c alt_tick
00d0afac g     F .text	000005dc __udivdi3
00d112b4 g     O .rodata	00000028 __mprec_bigtens
00d0a11c g     F .text	00000120 __s2b
00d0c2ec g     F .text	00000194 __floatunsidf
00d093a4 g     F .text	00000060 __mcmp
00d079cc g     F .text	00000018 __fp_lock_all
00d10198 g     F .text	00000048 alt_ic_irq_enabled
00d106d8 g     F .text	00000098 alt_alarm_stop
00d14c38 g     O .bss	00000004 alt_irq_active
00d0038c g     F .text	00000168 mandelbrotNoZoom
00d000ec g     F .exceptions	000000c8 alt_irq_handler
00d11c78 g     O .rwdata	00000028 alt_dev_null
00d004f4 g     F .text	000001ac barrier
00d0e3e0 g     F .text	00000058 altera_avalon_mutex_open
00d01d64 g     F .text	00000210 rint
00d03504 g     F .text	000000c8 __unpack_f
00d0fd28 g     F .text	00000044 alt_dcache_flush_all
00d09270 g     F .text	00000070 __hi0bits
00d0f6a4 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
00d0c214 g     F .text	000000d8 __fixdfsi
00d13034 g       *ABS*	00000000 __ram_rwdata_end
00d13004 g     O .rwdata	00000008 alt_dev_list
00d0cf2c g     F .text	00000120 write
00d0f838 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00d027a8 g     F .text	00000078 __gtsf2
00d13020 g     O .rwdata	00000008 alt_mutex_list
00d11464 g       *ABS*	00000000 __ram_rodata_end
00d0c754 g     F .text	000000d4 fstat
00d09ffc g     F .text	00000120 __pow5mult
00d14c10 g     O .bss	00000004 __nlocale_changed
00d0c5c4 g     F .text	00000008 __umodsi3
00d14efc g       *ABS*	00000000 end
00d033a4 g     F .text	00000160 __pack_f
00d14c0c g     O .bss	00000004 myPixelBuffer
00d0d4d8 g     F .text	000000c0 altera_avalon_jtag_uart_init
00d10f78 g       *ABS*	00000000 __CTOR_LIST__
00e50000 g       *ABS*	00000000 __alt_stack_pointer
00d03324 g     F .text	00000080 __clzsi2
00d0dbfc g     F .text	00000240 altera_avalon_jtag_uart_write
00d0de3c g     F .text	00000158 alt_avalon_mailbox_init
00d078f0 g     F .text	00000004 __sfp_lock_acquire
00d08f4c g     F .text	000000e4 memchr
00d03e90 g     F .text	00001eac ___vfprintf_internal_r
00d03d64 g     F .text	00000060 _sprintf_r
00d07c84 g     F .text	00000314 _free_r
00d10cfc g     F .text	000001b0 __call_exitprocs
00d14c14 g     O .bss	00000004 __mlocale_changed
00d12ff8 g     O .rwdata	00000004 __malloc_sbrk_base
00d001b4 g     F .text	0000004c _start
00d14c3c g     O .bss	00000004 _alt_tick_rate
00d09b8c g     F .text	0000014c __lshift
00d14c40 g     O .bss	00000004 _alt_nticks
00d0cc90 g     F .text	00000120 read
00d0d0e0 g     F .text	00000278 alt_sys_init
00d02910 g     F .text	00000098 __floatsisf
00d10bc4 g     F .text	00000134 __register_exitproc
00d0e538 g     F .text	0000005c altera_avalon_mutex_unlock
00d09cd8 g     F .text	000001e8 __multiply
00d0d870 g     F .text	00000074 altera_avalon_jtag_uart_close
00d11464 g       *ABS*	00000000 __ram_rwdata_start
00d10f7c g       *ABS*	00000000 __ram_rodata_start
00d14c44 g     O .bss	00000028 __malloc_current_mallinfo
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00d02730 g     F .text	00000078 __eqsf2
00d09884 g     F .text	0000017c __d2b
00d0d390 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00d109bc g     F .text	000000b8 alt_get_fd
00d03aec g     F .text	000000c8 __fpcmp_parts_d
00d0ac44 g     F .text	00000070 _close_r
00d006d0 g     F .text	0000030c drawFrame
00d10b50 g     F .text	00000074 memcmp
00d0d440 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00d14efc g       *ABS*	00000000 __alt_stack_base
00d0d488 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00d05d60 g     F .text	0000013c __swsetup_r
00d02f00 g     F .text	00000258 __divdf3
00d07a68 g     F .text	000000f0 __sfp
00d096e8 g     F .text	00000058 __copybits
00d11870 g     O .rwdata	00000408 __malloc_av_
00d078fc g     F .text	00000004 __sinit_lock_release
00d0bb38 g     F .text	000003c4 __muldf3
00d010dc g     F .text	00000b14 __ieee754_powf
00d0a9fc g     F .text	00000060 __sread
00d10ff8 g     O .rodata	00000010 __thenan_sf
00d1089c g     F .text	00000120 alt_find_file
00d0fd6c g     F .text	000000b4 alt_dev_llist_insert
00d0cc50 g     F .text	00000020 __malloc_lock
00d0ce70 g     F .text	000000bc sbrk
00d01fc0 g     F .text	0000014c scalbnf
00d07668 g     F .text	000001fc _fflush_r
00d0ab90 g     F .text	000000b4 _calloc_r
00d14c04 g       *ABS*	00000000 __bss_start
00d091b0 g     F .text	00000098 memset
00d01bf0 g     F .text	0000016c __ieee754_sqrtf
00d00c00 g     F .text	00000084 main
00d14c34 g     O .bss	00000004 alt_envp
00d14c24 g     O .bss	00000004 __malloc_max_total_mem
00d0e8a0 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
00d0d3e8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00d02820 g     F .text	00000078 __ltsf2
00d0a910 g     F .text	00000008 __sclose
00d01d5c g     F .text	00000008 matherr
00e50000 g       *ABS*	00000000 __alt_heap_limit
00d0adc4 g     F .text	00000014 fclose
00d03218 g     F .text	00000074 __truncdfsf2
00d14d6c g     O .bss	00000190 _atexit0
00d0e4b8 g     F .text	00000040 altera_avalon_mutex_lock
00d060b4 g     F .text	000015b4 _dtoa_r
00d0880c g     F .text	00000740 _malloc_r
00d13010 g     O .rwdata	00000004 alt_errno
00d084fc g     F .text	000000b8 _fwalk
00d0c4fc g     F .text	00000060 __divsi3
00d11008 g     O .rodata	00000014 __thenan_df
00d07b58 g     F .text	0000012c _malloc_trim_r
00d10f7c g       *ABS*	00000000 __CTOR_END__
00d023dc g     F .text	000001e0 __mulsf3
00d0aa5c g     F .text	000000bc strcmp
00d10f7c g       *ABS*	00000000 __flash_rodata_start
00d10f7c g       *ABS*	00000000 __DTOR_LIST__
00d03158 g     F .text	00000088 __nedf2
00d0d0ac g     F .text	00000034 alt_irq_init
00d0ce10 g     F .text	00000060 alt_release_fd
00d0210c g     F .text	00000018 copysignf
00d03cf0 g     F .text	00000074 sprintf
00d1101c g     O .rodata	00000100 __clz_tab
00d14c18 g     O .bss	00000004 _PathLocale
00d10b04 g     F .text	00000014 atexit
00d0ab18 g     F .text	00000078 _write_r
00d0865c g     F .text	0000001c setlocale
00d01fb8 g     F .text	00000008 nanf
00d12fe4 g     O .rwdata	00000004 _impure_ptr
00d14c2c g     O .bss	00000004 alt_argc
00d0fee4 g     F .text	00000064 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00d00020 g       .exceptions	00000000 alt_irq_entry
00d09404 g     F .text	00000080 __ulp
00d0a830 g     F .text	00000040 __isinfd
00d079b4 g     F .text	00000018 __fp_unlock_all
00d13018 g     O .rwdata	00000008 alt_mailbox_list
00d006a0 g     F .text	00000030 setup
00d12ffc g     O .rwdata	00000008 alt_fs_list
00d00020 g       *ABS*	00000000 __ram_exceptions_start
00d085c8 g     F .text	00000010 localeconv
00d1000c g     F .text	00000050 alt_ic_isr_register
00d13034 g       *ABS*	00000000 _edata
00d14efc g       *ABS*	00000000 _end
00d001b4 g       *ABS*	00000000 __ram_exceptions_end
00d0d8e4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00d100f8 g     F .text	000000a0 alt_ic_irq_disable
00d0a980 g     F .text	0000007c __swrite
00d12ff4 g     O .rwdata	00000004 __malloc_trim_threshold
00d10b18 g     F .text	00000038 exit
00d08434 g     F .text	000000c8 _fwalk_reent
00d09a00 g     F .text	0000018c __mdiff
00d00284 g     F .text	000000fc mandelbrot
00d0c55c g     F .text	00000060 __modsi3
00e50000 g       *ABS*	00000000 __alt_data_end
00d00020 g     F .exceptions	00000000 alt_exception
00d078f4 g     F .text	00000004 __sfp_lock_release
00d0e060 g     F .text	00000058 altera_avalon_mailbox_open
00d035cc g     F .text	000000a8 __fpcmp_parts_f
00d10eec g     F .text	00000020 _exit
00d0a870 g     F .text	00000030 __isnand
00d0fbd4 g     F .text	00000154 alt_alarm_start
00d0328c g     F .text	00000098 __muldi3
00d08678 g     F .text	00000194 __smakebuf_r
00d03dc4 g     F .text	00000074 strlen
00d104f0 g     F .text	00000188 open
00d0c00c g     F .text	00000088 __gedf2
00d00380 g     F .text	0000000c clearScreen
00d0ffdc g     F .text	00000030 alt_icache_flush_all
00d13028 g     O .rwdata	00000004 alt_priority_mask
00d1005c g     F .text	0000009c alt_ic_irq_enable
00d05d3c g     F .text	00000024 __vfprintf_internal
00d0e498 g     F .text	00000020 altera_avalon_mutex_close
00d02e0c g     F .text	00000080 __subdf3
00d092e0 g     F .text	000000c4 __lo0bits
00d12fc4 g     O .rwdata	00000004 targetArrayXY
00d1302c g     O .rwdata	00000008 alt_alarm_list
00d0fe80 g     F .text	00000064 _do_ctors
00d0c5cc g     F .text	000000fc close
00d02378 g     F .text	00000064 __addsf3
00d0c9a8 g     F .text	00000080 alt_load
00d036a0 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00d078f8 g     F .text	00000004 __sinit_lock_acquire
00d09efc g     F .text	00000100 __multadd
00d09248 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00d00000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  d00000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  d00004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  d00008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  d0000c:	00bffd16 	blt	zero,r2,d00004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  d00010:	00403434 	movhi	at,208
    ori r1, r1, %lo(_start)
  d00014:	08406d14 	ori	at,at,436
    jmp r1
  d00018:	0800683a 	jmp	at
  d0001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>

Disassembly of section .exceptions:

00d00020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  d00020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  d00024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  d00028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  d0002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  d00030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  d00034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  d00038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  d0003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  d00040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  d00044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  d00048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  d0004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  d00050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  d00054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  d00058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  d0005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  d00060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  d00064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  d00068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  d0006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  d00070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  d00074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  d00078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  d0007c:	10000326 	beq	r2,zero,d0008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  d00080:	20000226 	beq	r4,zero,d0008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  d00084:	0d000ec0 	call	d000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  d00088:	00000306 	br	d00098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  d0008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  d00090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  d00094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  d00098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  d0009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  d000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  d000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  d000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  d000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  d000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  d000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  d000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  d000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  d000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  d000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  d000e8:	ef80083a 	eret

00d000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  d000ec:	defff904 	addi	sp,sp,-28
  d000f0:	dfc00615 	stw	ra,24(sp)
  d000f4:	df000515 	stw	fp,20(sp)
  d000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  d000fc:	0005313a 	rdctl	r2,ipending
  d00100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  d00104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  d00108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  d0010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  d00110:	00800044 	movi	r2,1
  d00114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  d00118:	e0ffff17 	ldw	r3,-4(fp)
  d0011c:	e0bffe17 	ldw	r2,-8(fp)
  d00120:	1884703a 	and	r2,r3,r2
  d00124:	1005003a 	cmpeq	r2,r2,zero
  d00128:	1000161e 	bne	r2,zero,d00184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  d0012c:	e0bffd17 	ldw	r2,-12(fp)
  d00130:	00c03474 	movhi	r3,209
  d00134:	18d31b04 	addi	r3,r3,19564
  d00138:	100490fa 	slli	r2,r2,3
  d0013c:	10c5883a 	add	r2,r2,r3
  d00140:	11400017 	ldw	r5,0(r2)
  d00144:	e0bffd17 	ldw	r2,-12(fp)
  d00148:	00c03474 	movhi	r3,209
  d0014c:	18d31b04 	addi	r3,r3,19564
  d00150:	100490fa 	slli	r2,r2,3
  d00154:	10c5883a 	add	r2,r2,r3
  d00158:	10800104 	addi	r2,r2,4
  d0015c:	11000017 	ldw	r4,0(r2)
  d00160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  d00164:	0005313a 	rdctl	r2,ipending
  d00168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  d0016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  d00170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  d00174:	e0bfff17 	ldw	r2,-4(fp)
  d00178:	1004c03a 	cmpne	r2,r2,zero
  d0017c:	103fe31e 	bne	r2,zero,d0010c <alt_irq_handler+0x20>
  d00180:	00000706 	br	d001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  d00184:	e0bffe17 	ldw	r2,-8(fp)
  d00188:	1085883a 	add	r2,r2,r2
  d0018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  d00190:	e0bffd17 	ldw	r2,-12(fp)
  d00194:	10800044 	addi	r2,r2,1
  d00198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  d0019c:	003fde06 	br	d00118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  d001a0:	e037883a 	mov	sp,fp
  d001a4:	dfc00117 	ldw	ra,4(sp)
  d001a8:	df000017 	ldw	fp,0(sp)
  d001ac:	dec00204 	addi	sp,sp,8
  d001b0:	f800283a 	ret

Disassembly of section .text:

00d001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  d001b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
  d001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  d001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  d001c0:	00bffd16 	blt	zero,r2,d001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  d001c4:	06c03974 	movhi	sp,229
    ori sp, sp, %lo(__alt_stack_pointer)
  d001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  d001cc:	06803474 	movhi	gp,209
    ori gp, gp, %lo(_gp)
  d001d0:	d6abf114 	ori	gp,gp,44996
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  d001d4:	00803474 	movhi	r2,209
    ori r2, r2, %lo(__bss_start)
  d001d8:	10930114 	ori	r2,r2,19460

    movhi r3, %hi(__bss_end)
  d001dc:	00c03474 	movhi	r3,209
    ori r3, r3, %lo(__bss_end)
  d001e0:	18d3bf14 	ori	r3,r3,20220

    beq r2, r3, 1f
  d001e4:	10c00326 	beq	r2,r3,d001f4 <_start+0x40>

0:
    stw zero, (r2)
  d001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  d001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  d001f0:	10fffd36 	bltu	r2,r3,d001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  d001f4:	0d0c9a80 	call	d0c9a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  d001f8:	0d0cbe40 	call	d0cbe4 <alt_main>

00d001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  d001fc:	003fff06 	br	d001fc <alt_after_alt_main>

00d00200 <genColor>:

}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  d00200:	00801904 	movi	r2,100
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  d00204:	200690fa 	slli	r3,r4,3
  d00208:	200b883a 	mov	r5,r4
  d0020c:	01c007c4 	movi	r7,31
  d00210:	02000fc4 	movi	r8,63

}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  d00214:	000d883a 	mov	r6,zero
  d00218:	20800c26 	beq	r4,r2,d0024c <genColor+0x4c>
		color = black;
	}
	else {
		int red = iter;
		int green = iter * 8;
		int blue = iter * 2;
  d0021c:	2105883a 	add	r2,r4,r4
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  d00220:	1009883a 	mov	r4,r2
  d00224:	40c01216 	blt	r8,r3,d00270 <genColor+0x70>
  d00228:	1804917a 	slli	r2,r3,5
  d0022c:	1181f80c 	andi	r6,r2,2016
  d00230:	39400a16 	blt	r7,r5,d0025c <genColor+0x5c>
  d00234:	280492fa 	slli	r2,r5,11
  d00238:	10fe000c 	andi	r3,r2,63488
  d0023c:	39000516 	blt	r7,r4,d00254 <genColor+0x54>
  d00240:	20803fcc 	andi	r2,r4,255
  d00244:	1884b03a 	or	r2,r3,r2
  d00248:	308cb03a 	or	r6,r6,r2
	}
	return color;
}
  d0024c:	3005883a 	mov	r2,r6
  d00250:	f800283a 	ret
			green = 63;
		if (blue > 31)
			blue = 31;

		//making the final color
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
  d00254:	3809883a 	mov	r4,r7
  d00258:	003ff906 	br	d00240 <genColor+0x40>
  d0025c:	380b883a 	mov	r5,r7
  d00260:	280492fa 	slli	r2,r5,11
  d00264:	10fe000c 	andi	r3,r2,63488
  d00268:	393ff50e 	bge	r7,r4,d00240 <genColor+0x40>
  d0026c:	003ff906 	br	d00254 <genColor+0x54>
  d00270:	4007883a 	mov	r3,r8
  d00274:	1804917a 	slli	r2,r3,5
  d00278:	1181f80c 	andi	r6,r2,2016
  d0027c:	397fed0e 	bge	r7,r5,d00234 <genColor+0x34>
  d00280:	003ff606 	br	d0025c <genColor+0x5c>

00d00284 <mandelbrot>:
	}
	return color;
}

int mandelbrot(float x0, float y0, float *xOut, float *yOut) {
  d00284:	defff404 	addi	sp,sp,-48
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  d00288:	0005883a 	mov	r2,zero
		y = 2 * x * y + y0;
  d0028c:	0007883a 	mov	r3,zero
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
	}
	return color;
}

int mandelbrot(float x0, float y0, float *xOut, float *yOut) {
  d00290:	dcc00515 	stw	r19,20(sp)
  d00294:	dc400315 	stw	r17,12(sp)
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  d00298:	20a7ff72 	custom	253,r19,r4,r2
		y = 2 * x * y + y0;
  d0029c:	28e3ff72 	custom	253,r17,r5,r3
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
	}
	return color;
}

int mandelbrot(float x0, float y0, float *xOut, float *yOut) {
  d002a0:	dd000615 	stw	r20,24(sp)
  d002a4:	dc800415 	stw	r18,16(sp)

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d002a8:	9ce9ff32 	custom	252,r20,r19,r19
  d002ac:	8c65ff32 	custom	252,r18,r17,r17
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
	}
	return color;
}

int mandelbrot(float x0, float y0, float *xOut, float *yOut) {
  d002b0:	ddc00915 	stw	r23,36(sp)
  d002b4:	dd800815 	stw	r22,32(sp)
  d002b8:	202f883a 	mov	r23,r4
  d002bc:	282d883a 	mov	r22,r5

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d002c0:	a489ff72 	custom	253,r4,r20,r18
  d002c4:	01502034 	movhi	r5,16512
		color = ((red << 11) & 0xF800) | ((green << 5) & 0x07E0) | (blue & 0x00FF);
	}
	return color;
}

int mandelbrot(float x0, float y0, float *xOut, float *yOut) {
  d002c8:	dfc00b15 	stw	ra,44(sp)
  d002cc:	df000a15 	stw	fp,40(sp)
  d002d0:	dd400715 	stw	r21,28(sp)
  d002d4:	dc000215 	stw	r16,8(sp)
  d002d8:	d9800015 	stw	r6,0(sp)
  d002dc:	d9c00115 	stw	r7,4(sp)

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d002e0:	0d028980 	call	d02898 <__lesf2>
  d002e4:	00802316 	blt	zero,r2,d00374 <mandelbrot+0xf0>
  d002e8:	05400044 	movi	r21,1
  d002ec:	07001904 	movi	fp,100
  d002f0:	00000106 	br	d002f8 <mandelbrot+0x74>
  d002f4:	af000d26 	beq	r21,fp,d0032c <mandelbrot+0xa8>
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  d002f8:	9cc5ff72 	custom	253,r2,r19,r19
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  d002fc:	a487ffb2 	custom	254,r3,r20,r18
		y = 2 * x * y + y0;
  d00300:	8885ff32 	custom	252,r2,r17,r2
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  d00304:	1de1ff72 	custom	253,r16,r3,r23
		y = 2 * x * y + y0;
  d00308:	15a3ff72 	custom	253,r17,r2,r22

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d0030c:	8429ff32 	custom	252,r20,r16,r16
  d00310:	8c65ff32 	custom	252,r18,r17,r17
  d00314:	a489ff72 	custom	253,r4,r20,r18
  d00318:	01502034 	movhi	r5,16512
  d0031c:	8027883a 	mov	r19,r16
		 printf("iter number: %i\n", iter);
		 printf("Cycles on frame: %llu \n\n", (cycles));
		 }//*/

		x = xtemp;
		iter++;
  d00320:	ad400044 	addi	r21,r21,1

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d00324:	0d028980 	call	d02898 <__lesf2>
  d00328:	00bff20e 	bge	zero,r2,d002f4 <mandelbrot+0x70>
  d0032c:	8005883a 	mov	r2,r16

		x = xtemp;
		iter++;

	}
	*xOut = x;
  d00330:	d8c00017 	ldw	r3,0(sp)
  d00334:	18800015 	stw	r2,0(r3)
	*yOut = y;
  d00338:	d8800117 	ldw	r2,4(sp)
  d0033c:	14400015 	stw	r17,0(r2)

	return iter;
}
  d00340:	a805883a 	mov	r2,r21
  d00344:	dfc00b17 	ldw	ra,44(sp)
  d00348:	df000a17 	ldw	fp,40(sp)
  d0034c:	ddc00917 	ldw	r23,36(sp)
  d00350:	dd800817 	ldw	r22,32(sp)
  d00354:	dd400717 	ldw	r21,28(sp)
  d00358:	dd000617 	ldw	r20,24(sp)
  d0035c:	dcc00517 	ldw	r19,20(sp)
  d00360:	dc800417 	ldw	r18,16(sp)
  d00364:	dc400317 	ldw	r17,12(sp)
  d00368:	dc000217 	ldw	r16,8(sp)
  d0036c:	dec00c04 	addi	sp,sp,48
  d00370:	f800283a 	ret

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d00374:	9805883a 	mov	r2,r19
  d00378:	05400044 	movi	r21,1
  d0037c:	003fec06 	br	d00330 <mandelbrot+0xac>

00d00380 <clearScreen>:
	}
}

void clearScreen(void) {
	//clears the part of the screen controlled by the pixel buffer
	alt_up_pixel_buffer_dma_clear_screen(myPixelBuffer, 0);
  d00380:	d1271217 	ldw	r4,-25528(gp)
  d00384:	000b883a 	mov	r5,zero
  d00388:	0d0e92c1 	jmpi	d0e92c <alt_up_pixel_buffer_dma_clear_screen>

00d0038c <mandelbrotNoZoom>:
	*yOut = y;

	return iter;
}

int mandelbrotNoZoom(int cRow, int cCol, int *recalculateTargetFlag) {
  d0038c:	defff504 	addi	sp,sp,-44
  d00390:	dc400215 	stw	r17,8(sp)
  d00394:	2023883a 	mov	r17,r4
	float minX = -2.5;
	float maxX = 1;
	float minY = -1;
	float maxY = 1;

	float x0 = (((float) cCol / (float) colSize) * (maxX - minX)) + minX;
  d00398:	2809883a 	mov	r4,r5
	*yOut = y;

	return iter;
}

int mandelbrotNoZoom(int cRow, int cCol, int *recalculateTargetFlag) {
  d0039c:	dfc00a15 	stw	ra,40(sp)
  d003a0:	d9800015 	stw	r6,0(sp)
  d003a4:	ddc00815 	stw	r23,32(sp)
  d003a8:	dd800715 	stw	r22,28(sp)
  d003ac:	dd000515 	stw	r20,20(sp)
  d003b0:	dcc00415 	stw	r19,16(sp)
  d003b4:	dc800315 	stw	r18,12(sp)
  d003b8:	dc000115 	stw	r16,4(sp)
  d003bc:	df000915 	stw	fp,36(sp)
  d003c0:	dd400615 	stw	r21,24(sp)
	float minX = -2.5;
	float maxX = 1;
	float minY = -1;
	float maxY = 1;

	float x0 = (((float) cCol / (float) colSize) * (maxX - minX)) + minX;
  d003c4:	0d029100 	call	d02910 <__floatsisf>
  d003c8:	00cea034 	movhi	r3,14976
  d003cc:	10c5ff32 	custom	252,r2,r2,r3
  d003d0:	01101834 	movhi	r4,16480
  d003d4:	00d00834 	movhi	r3,16416
  d003d8:	1105ff32 	custom	252,r2,r2,r4
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
  d003dc:	8809883a 	mov	r4,r17
	float minX = -2.5;
	float maxX = 1;
	float minY = -1;
	float maxY = 1;

	float x0 = (((float) cCol / (float) colSize) * (maxX - minX)) + minX;
  d003e0:	10efffb2 	custom	254,r23,r2,r3
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
  d003e4:	0d029100 	call	d02910 <__floatsisf>
  d003e8:	01111034 	movhi	r4,17472
  d003ec:	21300004 	addi	r4,r4,-16384
  d003f0:	2089ffb2 	custom	254,r4,r4,r2
  d003f4:	01511034 	movhi	r5,17472
  d003f8:	0d025bc0 	call	d025bc <__divsf3>
  d003fc:	1085ff72 	custom	253,r2,r2,r2
  d00400:	00cfe034 	movhi	r3,16256
  d00404:	10edffb2 	custom	254,r22,r2,r3
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  d00408:	0005883a 	mov	r2,zero
		y = 2 * x * y + y0;
  d0040c:	0007883a 	mov	r3,zero
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  d00410:	b8a7ff72 	custom	253,r19,r23,r2
		y = 2 * x * y + y0;
  d00414:	b0e5ff72 	custom	253,r18,r22,r3
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d00418:	9ce9ff32 	custom	252,r20,r19,r19
  d0041c:	94a1ff32 	custom	252,r16,r18,r18
  d00420:	a409ff72 	custom	253,r4,r20,r16
  d00424:	01502034 	movhi	r5,16512
  d00428:	0d028980 	call	d02898 <__lesf2>
  d0042c:	00802e16 	blt	zero,r2,d004e8 <mandelbrotNoZoom+0x15c>
  d00430:	05400044 	movi	r21,1
  d00434:	07001904 	movi	fp,100
  d00438:	00000106 	br	d00440 <mandelbrotNoZoom+0xb4>
  d0043c:	af000d26 	beq	r21,fp,d00474 <mandelbrotNoZoom+0xe8>
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  d00440:	9cc5ff72 	custom	253,r2,r19,r19
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  d00444:	a407ffb2 	custom	254,r3,r20,r16
		y = 2 * x * y + y0;
  d00448:	9085ff32 	custom	252,r2,r18,r2
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  d0044c:	b8e3ff72 	custom	253,r17,r23,r3
		y = 2 * x * y + y0;
  d00450:	b0a5ff72 	custom	253,r18,r22,r2
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d00454:	8c69ff32 	custom	252,r20,r17,r17
  d00458:	94a1ff32 	custom	252,r16,r18,r18
  d0045c:	a409ff72 	custom	253,r4,r20,r16
  d00460:	01502034 	movhi	r5,16512
  d00464:	8827883a 	mov	r19,r17
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
  d00468:	ad400044 	addi	r21,r21,1
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d0046c:	0d028980 	call	d02898 <__lesf2>
  d00470:	00bff20e 	bge	zero,r2,d0043c <mandelbrotNoZoom+0xb0>
  d00474:	8809883a 	mov	r4,r17
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
	}
	int cpu = __builtin_rdctl(5);
  d00478:	0007317a 	rdctl	r3,cpuid
	if (cpu == 3) {
  d0047c:	008000c4 	movi	r2,3
  d00480:	18800d26 	beq	r3,r2,d004b8 <mandelbrotNoZoom+0x12c>
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
			}
		}
	}
	return iter;
}//*/
  d00484:	a805883a 	mov	r2,r21
  d00488:	dfc00a17 	ldw	ra,40(sp)
  d0048c:	df000917 	ldw	fp,36(sp)
  d00490:	ddc00817 	ldw	r23,32(sp)
  d00494:	dd800717 	ldw	r22,28(sp)
  d00498:	dd400617 	ldw	r21,24(sp)
  d0049c:	dd000517 	ldw	r20,20(sp)
  d004a0:	dcc00417 	ldw	r19,16(sp)
  d004a4:	dc800317 	ldw	r18,12(sp)
  d004a8:	dc400217 	ldw	r17,8(sp)
  d004ac:	dc000117 	ldw	r16,4(sp)
  d004b0:	dec00b04 	addi	sp,sp,44
  d004b4:	f800283a 	ret
		x = xtemp;
		iter++;
	}
	int cpu = __builtin_rdctl(5);
	if (cpu == 3) {
		if (*recalculateTargetFlag) {
  d004b8:	d8800017 	ldw	r2,0(sp)
  d004bc:	10c00017 	ldw	r3,0(r2)
  d004c0:	183ff026 	beq	r3,zero,d00484 <mandelbrotNoZoom+0xf8>
			if (iter >= (maxIter - 2)) {
  d004c4:	00801844 	movi	r2,97
  d004c8:	157fee0e 	bge	r2,r21,d00484 <mandelbrotNoZoom+0xf8>
				targetArrayXYMaster[0] = x;
				targetArrayXYMaster[1] = y;
  d004cc:	d0a71004 	addi	r2,gp,-25536
  d004d0:	14800115 	stw	r18,4(r2)
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
  d004d4:	d8800017 	ldw	r2,0(sp)
  d004d8:	18ffffc4 	addi	r3,r3,-1
	}
	int cpu = __builtin_rdctl(5);
	if (cpu == 3) {
		if (*recalculateTargetFlag) {
			if (iter >= (maxIter - 2)) {
				targetArrayXYMaster[0] = x;
  d004dc:	d1271015 	stw	r4,-25536(gp)
				targetArrayXYMaster[1] = y;
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
  d004e0:	10c00015 	stw	r3,0(r2)
  d004e4:	003fe706 	br	d00484 <mandelbrotNoZoom+0xf8>
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d004e8:	9809883a 	mov	r4,r19
  d004ec:	05400044 	movi	r21,1
  d004f0:	003fe106 	br	d00478 <mandelbrotNoZoom+0xec>

00d004f4 <barrier>:
		}
	}

}

void barrier(alt_u8 barrierNum) {
  d004f4:	deffe104 	addi	sp,sp,-124
  d004f8:	dfc01e15 	stw	ra,120(sp)
  d004fc:	dd401d15 	stw	r21,116(sp)
  d00500:	dd001c15 	stw	r20,112(sp)
  d00504:	dcc01b15 	stw	r19,108(sp)
  d00508:	dc801a15 	stw	r18,104(sp)
  d0050c:	dc401915 	stw	r17,100(sp)
  d00510:	dc001815 	stw	r16,96(sp)
	alt_u32 msg;
	alt_mailbox_dev *mb[NUM_CPUS];
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
  d00514:	0027317a 	rdctl	r19,cpuid
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  d00518:	dc400404 	addi	r17,sp,16
  d0051c:	01403474 	movhi	r5,209
  d00520:	2943df04 	addi	r5,r5,3964
  d00524:	000d883a 	mov	r6,zero
  d00528:	8809883a 	mov	r4,r17
  d0052c:	0d03cf00 	call	d03cf0 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  d00530:	8809883a 	mov	r4,r17
  d00534:	0d0e0600 	call	d0e060 <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  d00538:	05400044 	movi	r21,1
  d0053c:	01403474 	movhi	r5,209
  d00540:	2943df04 	addi	r5,r5,3964
  d00544:	a80d883a 	mov	r6,r21
  d00548:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  d0054c:	d8800015 	stw	r2,0(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  d00550:	0d03cf00 	call	d03cf0 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  d00554:	8809883a 	mov	r4,r17
  d00558:	0d0e0600 	call	d0e060 <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  d0055c:	05000084 	movi	r20,2
  d00560:	01403474 	movhi	r5,209
  d00564:	2943df04 	addi	r5,r5,3964
  d00568:	a00d883a 	mov	r6,r20
  d0056c:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  d00570:	d8800115 	stw	r2,4(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  d00574:	0d03cf00 	call	d03cf0 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  d00578:	8809883a 	mov	r4,r17
  d0057c:	0d0e0600 	call	d0e060 <altera_avalon_mailbox_open>
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  d00580:	048000c4 	movi	r18,3
  d00584:	01403474 	movhi	r5,209
  d00588:	2943df04 	addi	r5,r5,3964
  d0058c:	900d883a 	mov	r6,r18
  d00590:	8809883a 	mov	r4,r17
		mb[i] = altera_avalon_mailbox_open(mb_name);
  d00594:	d8800215 	stw	r2,8(sp)
	char mb_name[80];
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
  d00598:	0d03cf00 	call	d03cf0 <sprintf>
		mb[i] = altera_avalon_mailbox_open(mb_name);
  d0059c:	8809883a 	mov	r4,r17
  d005a0:	0d0e0600 	call	d0e060 <altera_avalon_mailbox_open>
  d005a4:	1021883a 	mov	r16,r2
  d005a8:	d8800315 	stw	r2,12(sp)
  d005ac:	9c803026 	beq	r19,r18,d00670 <barrier+0x17c>
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  d005b0:	98000426 	beq	r19,zero,d005c4 <barrier+0xd0>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  d005b4:	d9000017 	ldw	r4,0(sp)
  d005b8:	000b883a 	mov	r5,zero
  d005bc:	0d0e0d80 	call	d0e0d8 <altera_avalon_mailbox_post>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  d005c0:	9d400426 	beq	r19,r21,d005d4 <barrier+0xe0>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  d005c4:	d9000117 	ldw	r4,4(sp)
  d005c8:	000b883a 	mov	r5,zero
  d005cc:	0d0e0d80 	call	d0e0d8 <altera_avalon_mailbox_post>
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {
  d005d0:	9d000326 	beq	r19,r20,d005e0 <barrier+0xec>

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
			}
			else {
				altera_avalon_mailbox_post(mb[i], 0);
  d005d4:	d9000217 	ldw	r4,8(sp)
  d005d8:	000b883a 	mov	r5,zero
  d005dc:	0d0e0d80 	call	d0e0d8 <altera_avalon_mailbox_post>
  d005e0:	8009883a 	mov	r4,r16
  d005e4:	000b883a 	mov	r5,zero
  d005e8:	0d0e0d80 	call	d0e0d8 <altera_avalon_mailbox_post>
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  d005ec:	9cc5883a 	add	r2,r19,r19
  d005f0:	1085883a 	add	r2,r2,r2
  d005f4:	16c5883a 	add	r2,r2,sp
  d005f8:	14400017 	ldw	r17,0(r2)
  d005fc:	8809883a 	mov	r4,r17
  d00600:	0d0e1e40 	call	d0e1e4 <altera_avalon_mailbox_pend>

		if (msg != 0) {
  d00604:	10000126 	beq	r2,zero,d0060c <barrier+0x118>
			targetArrayXY = (float *) msg;
  d00608:	d0a00015 	stw	r2,-32768(gp)
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  d0060c:	8809883a 	mov	r4,r17
  d00610:	0d0e1e40 	call	d0e1e4 <altera_avalon_mailbox_pend>

		if (msg != 0) {
  d00614:	10000126 	beq	r2,zero,d0061c <barrier+0x128>
			targetArrayXY = (float *) msg;
  d00618:	d0a00015 	stw	r2,-32768(gp)
	}

	//gets the messages from the other CPU's
	for (i = 0; i < NUM_CPUS - 1; i++) {

		msg = altera_avalon_mailbox_pend(mb[cpu]);
  d0061c:	8809883a 	mov	r4,r17
  d00620:	0d0e1e40 	call	d0e1e4 <altera_avalon_mailbox_pend>

		if (msg != 0) {
  d00624:	10000126 	beq	r2,zero,d0062c <barrier+0x138>
			targetArrayXY = (float *) msg;
  d00628:	d0a00015 	stw	r2,-32768(gp)
		}
	}
	for (i = 0; i < NUM_CPUS; i++) {
		altera_avalon_mailbox_close(mb[i]);
  d0062c:	d9000017 	ldw	r4,0(sp)
  d00630:	0d0e0b80 	call	d0e0b8 <altera_avalon_mailbox_close>
  d00634:	d9000117 	ldw	r4,4(sp)
  d00638:	0d0e0b80 	call	d0e0b8 <altera_avalon_mailbox_close>
  d0063c:	d9000217 	ldw	r4,8(sp)
  d00640:	0d0e0b80 	call	d0e0b8 <altera_avalon_mailbox_close>
  d00644:	8009883a 	mov	r4,r16
  d00648:	0d0e0b80 	call	d0e0b8 <altera_avalon_mailbox_close>
	}
}
  d0064c:	dfc01e17 	ldw	ra,120(sp)
  d00650:	dd401d17 	ldw	r21,116(sp)
  d00654:	dd001c17 	ldw	r20,112(sp)
  d00658:	dcc01b17 	ldw	r19,108(sp)
  d0065c:	dc801a17 	ldw	r18,104(sp)
  d00660:	dc401917 	ldw	r17,100(sp)
  d00664:	dc001817 	ldw	r16,96(sp)
  d00668:	dec01f04 	addi	sp,sp,124
  d0066c:	f800283a 	ret
	int cpu = __builtin_rdctl(5);
	int i = 0;

	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
  d00670:	0025883a 	mov	r18,zero
  d00674:	d823883a 	mov	r17,sp
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
		if (i != cpu) {

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
  d00678:	89000017 	ldw	r4,0(r17)
  d0067c:	d1671004 	addi	r5,gp,-25536
	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
  d00680:	94800044 	addi	r18,r18,1
		if (i != cpu) {

			if (cpu == 3) {
				altera_avalon_mailbox_post(mb[i], (int) targetArrayXYMaster);
  d00684:	0d0e0d80 	call	d0e0d8 <altera_avalon_mailbox_post>
	for (i = 0; i < NUM_CPUS; i++) {
		sprintf(mb_name, "/dev/mailbox_%d", i);
		mb[i] = altera_avalon_mailbox_open(mb_name);
	}
	//sending the messages to the other CPU's
	for (i = 0; i < NUM_CPUS; i++) {
  d00688:	00800104 	movi	r2,4
  d0068c:	8c400104 	addi	r17,r17,4
  d00690:	90bfd626 	beq	r18,r2,d005ec <barrier+0xf8>
		if (i != cpu) {
  d00694:	008000c4 	movi	r2,3
  d00698:	90bff71e 	bne	r18,r2,d00678 <barrier+0x184>
  d0069c:	003fd306 	br	d005ec <barrier+0xf8>

00d006a0 <setup>:
float targetArrayXYMaster[2] = { 0.0, 0.0 };
volatile float *targetArrayXY = targetArrayXYMaster;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  d006a0:	deffff04 	addi	sp,sp,-4
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  d006a4:	01003474 	movhi	r4,209
  d006a8:	2103e304 	addi	r4,r4,3980
float targetArrayXYMaster[2] = { 0.0, 0.0 };
volatile float *targetArrayXY = targetArrayXYMaster;

extern alt_up_pixel_buffer_dma_dev *myPixelBuffer;

void setup(void) {
  d006ac:	dfc00015 	stw	ra,0(sp)
	myPixelBuffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  d006b0:	0d0e6680 	call	d0e668 <alt_up_pixel_buffer_dma_open_dev>
  d006b4:	d0a71215 	stw	r2,-25528(gp)
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
  d006b8:	00c00044 	movi	r3,1
  d006bc:	0005883a 	mov	r2,zero
  d006c0:	10c00035 	stwio	r3,0(r2)
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(myPixelBuffer)) {
		alt_up_pixel_buffer_dma_change_back_buffer_address(myPixelBuffer, (unsigned int) pixel_buffer_memory);
	}
#endif

}
  d006c4:	dfc00017 	ldw	ra,0(sp)
  d006c8:	dec00104 	addi	sp,sp,4
  d006cc:	f800283a 	ret

00d006d0 <drawFrame>:
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}
}//*/

void drawFrame(int zoom) {
  d006d0:	deffec04 	addi	sp,sp,-80
  d006d4:	dfc01315 	stw	ra,76(sp)
  d006d8:	df001215 	stw	fp,72(sp)
  d006dc:	ddc01115 	stw	r23,68(sp)
  d006e0:	dd801015 	stw	r22,64(sp)
  d006e4:	dd400f15 	stw	r21,60(sp)
  d006e8:	dd000e15 	stw	r20,56(sp)
  d006ec:	dcc00d15 	stw	r19,52(sp)
  d006f0:	dc800c15 	stw	r18,48(sp)
  d006f4:	dc400b15 	stw	r17,44(sp)
  d006f8:	dc000a15 	stw	r16,40(sp)
	int i;
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
  d006fc:	0005317a 	rdctl	r2,cpuid
  d00700:	d8800715 	stw	r2,28(sp)
	int recalculateTargetFlag = 20;
	float x = 0.0;
	float y = 0.0;

	float minX = targetArrayXY[0] - (1 / powf(1.5, zoom));
  d00704:	d0a00017 	ldw	r2,-32768(gp)
  d00708:	040ff034 	movhi	r16,16320
  d0070c:	15400017 	ldw	r21,0(r2)
  d00710:	0d029100 	call	d02910 <__floatsisf>
  d00714:	100b883a 	mov	r5,r2
  d00718:	8009883a 	mov	r4,r16
  d0071c:	1023883a 	mov	r17,r2
  d00720:	0d00c840 	call	d00c84 <powf>
  d00724:	102d883a 	mov	r22,r2
	float maxX = targetArrayXY[0] + (1 / powf(1.5, zoom));
  d00728:	d0a00017 	ldw	r2,-32768(gp)
  d0072c:	8009883a 	mov	r4,r16
  d00730:	880b883a 	mov	r5,r17
  d00734:	15000017 	ldw	r20,0(r2)
  d00738:	0d00c840 	call	d00c84 <powf>
  d0073c:	102f883a 	mov	r23,r2
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
  d00740:	d0a00017 	ldw	r2,-32768(gp)
  d00744:	8009883a 	mov	r4,r16
  d00748:	880b883a 	mov	r5,r17
  d0074c:	14c00117 	ldw	r19,4(r2)
  d00750:	0d00c840 	call	d00c84 <powf>
  d00754:	1025883a 	mov	r18,r2
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));
  d00758:	d0a00017 	ldw	r2,-32768(gp)
  d0075c:	8009883a 	mov	r4,r16
  d00760:	880b883a 	mov	r5,r17
  d00764:	14000117 	ldw	r16,4(r2)
  d00768:	0d00c840 	call	d00c84 <powf>

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  d0076c:	d8c00717 	ldw	r3,28(sp)
	float y = 0.0;

	float minX = targetArrayXY[0] - (1 / powf(1.5, zoom));
	float maxX = targetArrayXY[0] + (1 / powf(1.5, zoom));
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));
  d00770:	1023883a 	mov	r17,r2

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  d00774:	0080ffc4 	movi	r2,1023
  d00778:	10c07a16 	blt	r2,r3,d00964 <drawFrame+0x294>
	int cpu = __builtin_rdctl(5);
	int recalculateTargetFlag = 20;
	float x = 0.0;
	float y = 0.0;

	float minX = targetArrayXY[0] - (1 / powf(1.5, zoom));
  d0077c:	b00b883a 	mov	r5,r22
  d00780:	012fe034 	movhi	r4,49024
  d00784:	0d025bc0 	call	d025bc <__divsf3>
  d00788:	a8abff72 	custom	253,r21,r21,r2
	float maxX = targetArrayXY[0] + (1 / powf(1.5, zoom));
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
  d0078c:	900b883a 	mov	r5,r18
  d00790:	012fd034 	movhi	r4,48960
	int cpu = __builtin_rdctl(5);
	int recalculateTargetFlag = 20;
	float x = 0.0;
	float y = 0.0;

	float minX = targetArrayXY[0] - (1 / powf(1.5, zoom));
  d00794:	dd400515 	stw	r21,20(sp)
	float maxX = targetArrayXY[0] + (1 / powf(1.5, zoom));
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
  d00798:	0d025bc0 	call	d025bc <__divsf3>
  d0079c:	98a7ff72 	custom	253,r19,r19,r2
  d007a0:	880b883a 	mov	r5,r17
  d007a4:	010fd034 	movhi	r4,16192
  d007a8:	dcc00415 	stw	r19,16(sp)
  d007ac:	0d025bc0 	call	d025bc <__divsf3>
  d007b0:	d8c00417 	ldw	r3,16(sp)
  d007b4:	8085ff72 	custom	253,r2,r16,r2
  d007b8:	b80b883a 	mov	r5,r23
  d007bc:	10c5ffb2 	custom	254,r2,r2,r3
  d007c0:	010fe034 	movhi	r4,16256
  d007c4:	d8800315 	stw	r2,12(sp)
  d007c8:	0d025bc0 	call	d025bc <__divsf3>
  d007cc:	d8c00517 	ldw	r3,20(sp)
  d007d0:	a085ff72 	custom	253,r2,r20,r2
  d007d4:	10c5ffb2 	custom	254,r2,r2,r3
  d007d8:	d8800215 	stw	r2,8(sp)
  d007dc:	d8800717 	ldw	r2,28(sp)
  d007e0:	00c00504 	movi	r3,20
  d007e4:	d8c00615 	stw	r3,24(sp)
  d007e8:	d8800915 	stw	r2,36(sp)
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 767 - (float) i) / (float) 768) * (maxY - minY)) + minY;
  d007ec:	d9000917 	ldw	r4,36(sp)
  d007f0:	0d029100 	call	d02910 <__floatsisf>
  d007f4:	01111034 	movhi	r4,17472
  d007f8:	21300004 	addi	r4,r4,-16384
  d007fc:	2089ffb2 	custom	254,r4,r4,r2
  d00800:	01511034 	movhi	r5,17472
  d00804:	0d025bc0 	call	d025bc <__divsf3>
  d00808:	d8c00317 	ldw	r3,12(sp)
  d0080c:	d8000815 	stw	zero,32(sp)
  d00810:	10c5ff32 	custom	252,r2,r2,r3
  d00814:	d8c00417 	ldw	r3,16(sp)
  d00818:	18b9ff72 	custom	253,fp,r3,r2
  d0081c:	0005883a 	mov	r2,zero
  d00820:	e085ff72 	custom	253,r2,fp,r2
  d00824:	d8800115 	stw	r2,4(sp)
  d00828:	1085ff32 	custom	252,r2,r2,r2
  d0082c:	d8800015 	stw	r2,0(sp)
		for (j = 0; j < rowSize; j++) {
			float x0 = (((float) j / (float) 1024) * (maxX - minX)) + minX;
  d00830:	d9000817 	ldw	r4,32(sp)
  d00834:	0d029100 	call	d02910 <__floatsisf>
  d00838:	00cea034 	movhi	r3,14976
  d0083c:	10c5ff32 	custom	252,r2,r2,r3
  d00840:	d8c00217 	ldw	r3,8(sp)

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d00844:	01502034 	movhi	r5,16512
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 767 - (float) i) / (float) 768) * (maxY - minY)) + minY;
		for (j = 0; j < rowSize; j++) {
			float x0 = (((float) j / (float) 1024) * (maxX - minX)) + minX;
  d00848:	1885ff32 	custom	252,r2,r3,r2
  d0084c:	d8c00517 	ldw	r3,20(sp)
  d00850:	18adff72 	custom	253,r22,r3,r2
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  d00854:	0005883a 	mov	r2,zero
  d00858:	b0a5ff72 	custom	253,r18,r22,r2

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d0085c:	d8800017 	ldw	r2,0(sp)
  d00860:	94a9ff32 	custom	252,r20,r18,r18
  d00864:	1509ff72 	custom	253,r4,r2,r20
  d00868:	0d028980 	call	d02898 <__lesf2>
  d0086c:	00805616 	blt	zero,r2,d009c8 <drawFrame+0x2f8>
  d00870:	d8c00017 	ldw	r3,0(sp)
  d00874:	d8800117 	ldw	r2,4(sp)
  d00878:	05400044 	movi	r21,1
  d0087c:	1821883a 	mov	r16,r3
  d00880:	1027883a 	mov	r19,r2
  d00884:	05c01904 	movi	r23,100
  d00888:	00000106 	br	d00890 <drawFrame+0x1c0>
  d0088c:	adc00d26 	beq	r21,r23,d008c4 <drawFrame+0x1f4>
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  d00890:	9485ff72 	custom	253,r2,r18,r18
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  d00894:	a407ffb2 	custom	254,r3,r20,r16
		y = 2 * x * y + y0;
  d00898:	9885ff32 	custom	252,r2,r19,r2
		 PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
		 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
		 }//*/

		xtemp = x * x - y * y + x0;
  d0089c:	b0e3ff72 	custom	253,r17,r22,r3
		y = 2 * x * y + y0;
  d008a0:	e0a7ff72 	custom	253,r19,fp,r2

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d008a4:	8c69ff32 	custom	252,r20,r17,r17
  d008a8:	9ce1ff32 	custom	252,r16,r19,r19
  d008ac:	a409ff72 	custom	253,r4,r20,r16
  d008b0:	01502034 	movhi	r5,16512
  d008b4:	8825883a 	mov	r18,r17
		 printf("iter number: %i\n", iter);
		 printf("Cycles on frame: %llu \n\n", (cycles));
		 }//*/

		x = xtemp;
		iter++;
  d008b8:	ad400044 	addi	r21,r21,1

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d008bc:	0d028980 	call	d02898 <__lesf2>
  d008c0:	00bff20e 	bge	zero,r2,d0088c <drawFrame+0x1bc>
			float x0 = (((float) j / (float) 1024) * (maxX - minX)) + minX;

			result = mandelbrot(x0, y0, &x, &y);

			//recalculates the x and y
			if (cpu == 3) {
  d008c4:	d8c00717 	ldw	r3,28(sp)
  d008c8:	008000c4 	movi	r2,3
  d008cc:	18803326 	beq	r3,r2,d0099c <drawFrame+0x2cc>

}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  d008d0:	00801904 	movi	r2,100
  d008d4:	a8802f26 	beq	r21,r2,d00994 <drawFrame+0x2c4>
		color = black;
	}
	else {
		int red = iter;
		int green = iter * 8;
		int blue = iter * 2;
  d008d8:	a80490fa 	slli	r2,r21,3
  d008dc:	00c00fc4 	movi	r3,63
  d008e0:	ad4d883a 	add	r6,r21,r21
  d008e4:	1880010e 	bge	r3,r2,d008ec <drawFrame+0x21c>
  d008e8:	1805883a 	mov	r2,r3
  d008ec:	1004917a 	slli	r2,r2,5
  d008f0:	010007c4 	movi	r4,31
  d008f4:	a807883a 	mov	r3,r21
  d008f8:	1141f80c 	andi	r5,r2,2016
  d008fc:	2540010e 	bge	r4,r21,d00904 <drawFrame+0x234>
  d00900:	2007883a 	mov	r3,r4
  d00904:	180492fa 	slli	r2,r3,11
  d00908:	3007883a 	mov	r3,r6
  d0090c:	11be000c 	andi	r6,r2,63488
  d00910:	20c0010e 	bge	r4,r3,d00918 <drawFrame+0x248>
  d00914:	2007883a 	mov	r3,r4
  d00918:	18803fcc 	andi	r2,r3,255
  d0091c:	3084b03a 	or	r2,r6,r2
  d00920:	288ab03a 	or	r5,r5,r2
					}
				}
			}

			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
  d00924:	d1271217 	ldw	r4,-25528(gp)
  d00928:	d9c00817 	ldw	r7,32(sp)
  d0092c:	d9800917 	ldw	r6,36(sp)
  d00930:	0d0e6a80 	call	d0e6a8 <alt_up_pixel_buffer_dma_draw>
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		float y0 = ((((float) 767 - (float) i) / (float) 768) * (maxY - minY)) + minY;
		for (j = 0; j < rowSize; j++) {
  d00934:	d8800817 	ldw	r2,32(sp)
  d00938:	10800044 	addi	r2,r2,1
  d0093c:	d8800815 	stw	r2,32(sp)
  d00940:	d8c00817 	ldw	r3,32(sp)
  d00944:	0080c004 	movi	r2,768
  d00948:	18bfb91e 	bne	r3,r2,d00830 <drawFrame+0x160>
	float minX = targetArrayXY[0] - (1 / powf(1.5, zoom));
	float maxX = targetArrayXY[0] + (1 / powf(1.5, zoom));
	float minY = targetArrayXY[1] - (0.75 / powf(1.5, zoom));
	float maxY = targetArrayXY[1] + (0.75 / powf(1.5, zoom));

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  d0094c:	d8800917 	ldw	r2,36(sp)
  d00950:	10800104 	addi	r2,r2,4
  d00954:	d8800915 	stw	r2,36(sp)
  d00958:	d8c00917 	ldw	r3,36(sp)
  d0095c:	0080ffc4 	movi	r2,1023
  d00960:	10ffa20e 	bge	r2,r3,d007ec <drawFrame+0x11c>
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}

}
  d00964:	dfc01317 	ldw	ra,76(sp)
  d00968:	df001217 	ldw	fp,72(sp)
  d0096c:	ddc01117 	ldw	r23,68(sp)
  d00970:	dd801017 	ldw	r22,64(sp)
  d00974:	dd400f17 	ldw	r21,60(sp)
  d00978:	dd000e17 	ldw	r20,56(sp)
  d0097c:	dcc00d17 	ldw	r19,52(sp)
  d00980:	dc800c17 	ldw	r18,48(sp)
  d00984:	dc400b17 	ldw	r17,44(sp)
  d00988:	dc000a17 	ldw	r16,40(sp)
  d0098c:	dec01404 	addi	sp,sp,80
  d00990:	f800283a 	ret

}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  d00994:	000b883a 	mov	r5,zero
  d00998:	003fe206 	br	d00924 <drawFrame+0x254>

			result = mandelbrot(x0, y0, &x, &y);

			//recalculates the x and y
			if (cpu == 3) {
				if (recalculateTargetFlag) {
  d0099c:	d8800617 	ldw	r2,24(sp)
  d009a0:	103fcb26 	beq	r2,zero,d008d0 <drawFrame+0x200>
					if (result > (maxIter - 2)) {
  d009a4:	00801884 	movi	r2,98
  d009a8:	157fc90e 	bge	r2,r21,d008d0 <drawFrame+0x200>
						targetArrayXYMaster[0] = x;
						targetArrayXYMaster[1] = y;
						recalculateTargetFlag = recalculateTargetFlag - 1;
  d009ac:	d8c00617 	ldw	r3,24(sp)
			//recalculates the x and y
			if (cpu == 3) {
				if (recalculateTargetFlag) {
					if (result > (maxIter - 2)) {
						targetArrayXYMaster[0] = x;
						targetArrayXYMaster[1] = y;
  d009b0:	d0a71004 	addi	r2,gp,-25536
  d009b4:	14c00115 	stw	r19,4(r2)
						recalculateTargetFlag = recalculateTargetFlag - 1;
  d009b8:	18ffffc4 	addi	r3,r3,-1

			//recalculates the x and y
			if (cpu == 3) {
				if (recalculateTargetFlag) {
					if (result > (maxIter - 2)) {
						targetArrayXYMaster[0] = x;
  d009bc:	d4671015 	stw	r17,-25536(gp)
						targetArrayXYMaster[1] = y;
						recalculateTargetFlag = recalculateTargetFlag - 1;
  d009c0:	d8c00615 	stw	r3,24(sp)
  d009c4:	003fc206 	br	d008d0 <drawFrame+0x200>

	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d009c8:	d8c00117 	ldw	r3,4(sp)
  d009cc:	9023883a 	mov	r17,r18
  d009d0:	05400044 	movi	r21,1
  d009d4:	1827883a 	mov	r19,r3
  d009d8:	003fba06 	br	d008c4 <drawFrame+0x1f4>

00d009dc <drawFullSet>:
	}
	return iter;
}//*/


void drawFullSet(void) {
  d009dc:	defff204 	addi	sp,sp,-56
  d009e0:	dfc00d15 	stw	ra,52(sp)
  d009e4:	df000c15 	stw	fp,48(sp)
  d009e8:	ddc00b15 	stw	r23,44(sp)
  d009ec:	dd800a15 	stw	r22,40(sp)
  d009f0:	dd400915 	stw	r21,36(sp)
  d009f4:	dd000815 	stw	r20,32(sp)
  d009f8:	dcc00715 	stw	r19,28(sp)
  d009fc:	dc800615 	stw	r18,24(sp)
  d00a00:	dc400515 	stw	r17,20(sp)
  d00a04:	dc000415 	stw	r16,16(sp)
	int i;
	int j;
	int result = 0;
	int color = 0;
	int cpu = __builtin_rdctl(5);
  d00a08:	0009317a 	rdctl	r4,cpuid

	int recalculateTargetFlag = 10;

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  d00a0c:	0080ffc4 	movi	r2,1023
  d00a10:	11006f16 	blt	r2,r4,d00bd0 <drawFullSet+0x1f4>
			result = mandelbrotNoZoom(j, i, &recalculateTargetFlag);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}
}//*/
  d00a14:	00800284 	movi	r2,10
  d00a18:	d9000315 	stw	r4,12(sp)
  d00a1c:	d8800215 	stw	r2,8(sp)
  d00a20:	0d029100 	call	d02910 <__floatsisf>
  d00a24:	00cea034 	movhi	r3,14976
  d00a28:	10c5ff32 	custom	252,r2,r2,r3
  d00a2c:	01101834 	movhi	r4,16480
  d00a30:	1105ff32 	custom	252,r2,r2,r4
  d00a34:	00d00834 	movhi	r3,16416
  d00a38:	10f9ffb2 	custom	254,fp,r2,r3
  d00a3c:	0005883a 	mov	r2,zero
  d00a40:	e085ff72 	custom	253,r2,fp,r2
  d00a44:	1087ff32 	custom	252,r3,r2,r2
  d00a48:	d8800015 	stw	r2,0(sp)
  d00a4c:	d8c00115 	stw	r3,4(sp)
  d00a50:	002f883a 	mov	r23,zero
	float maxX = 1;
	float minY = -1;
	float maxY = 1;

	float x0 = (((float) cCol / (float) colSize) * (maxX - minX)) + minX;
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
  d00a54:	b809883a 	mov	r4,r23
  d00a58:	0d029100 	call	d02910 <__floatsisf>
  d00a5c:	01111034 	movhi	r4,17472
  d00a60:	21300004 	addi	r4,r4,-16384
  d00a64:	2089ffb2 	custom	254,r4,r4,r2
  d00a68:	01511034 	movhi	r5,17472
  d00a6c:	0d025bc0 	call	d025bc <__divsf3>
  d00a70:	1085ff72 	custom	253,r2,r2,r2
  d00a74:	00cfe034 	movhi	r3,16256
  d00a78:	10ebffb2 	custom	254,r21,r2,r3
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  d00a7c:	0005883a 	mov	r2,zero
  d00a80:	a8a3ff72 	custom	253,r17,r21,r2
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d00a84:	d8800117 	ldw	r2,4(sp)
  d00a88:	8c67ff32 	custom	252,r19,r17,r17
  d00a8c:	01502034 	movhi	r5,16512
  d00a90:	14c9ff72 	custom	253,r4,r2,r19
  d00a94:	0d028980 	call	d02898 <__lesf2>
  d00a98:	00804916 	blt	zero,r2,d00bc0 <drawFullSet+0x1e4>
  d00a9c:	d8c00117 	ldw	r3,4(sp)
  d00aa0:	d8800017 	ldw	r2,0(sp)
  d00aa4:	05000044 	movi	r20,1
  d00aa8:	1821883a 	mov	r16,r3
  d00aac:	05801904 	movi	r22,100
  d00ab0:	1007883a 	mov	r3,r2
  d00ab4:	00000106 	br	d00abc <drawFullSet+0xe0>
  d00ab8:	a5800d26 	beq	r20,r22,d00af0 <drawFullSet+0x114>
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
  d00abc:	18c5ff72 	custom	253,r2,r3,r3
  d00ac0:	8885ff32 	custom	252,r2,r17,r2
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
		xtemp = x * x - y * y + x0;
  d00ac4:	84c7ffb2 	custom	254,r3,r16,r19
  d00ac8:	1f25ff72 	custom	253,r18,r3,fp
		y = 2 * x * y + y0;
  d00acc:	a8a3ff72 	custom	253,r17,r21,r2
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d00ad0:	94a1ff32 	custom	252,r16,r18,r18
  d00ad4:	8c67ff32 	custom	252,r19,r17,r17
  d00ad8:	84c9ff72 	custom	253,r4,r16,r19
  d00adc:	01502034 	movhi	r5,16512
  d00ae0:	0d028980 	call	d02898 <__lesf2>
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
  d00ae4:	a5000044 	addi	r20,r20,1
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d00ae8:	9007883a 	mov	r3,r18
  d00aec:	00bff20e 	bge	zero,r2,d00ab8 <drawFullSet+0xdc>
		xtemp = x * x - y * y + x0;
		y = 2 * x * y + y0;
		x = xtemp;
		iter++;
	}
	int cpu = __builtin_rdctl(5);
  d00af0:	0007317a 	rdctl	r3,cpuid
	if (cpu == 3) {
  d00af4:	008000c4 	movi	r2,3
  d00af8:	18802626 	beq	r3,r2,d00b94 <drawFullSet+0x1b8>

}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  d00afc:	00801904 	movi	r2,100
  d00b00:	a0802226 	beq	r20,r2,d00b8c <drawFullSet+0x1b0>
		color = black;
	}
	else {
		int red = iter;
		int green = iter * 8;
		int blue = iter * 2;
  d00b04:	a00490fa 	slli	r2,r20,3
  d00b08:	00c00fc4 	movi	r3,63
  d00b0c:	a50d883a 	add	r6,r20,r20
  d00b10:	1880010e 	bge	r3,r2,d00b18 <drawFullSet+0x13c>
  d00b14:	1805883a 	mov	r2,r3
  d00b18:	1004917a 	slli	r2,r2,5
  d00b1c:	010007c4 	movi	r4,31
  d00b20:	a007883a 	mov	r3,r20
  d00b24:	1141f80c 	andi	r5,r2,2016
  d00b28:	2500010e 	bge	r4,r20,d00b30 <drawFullSet+0x154>
  d00b2c:	2007883a 	mov	r3,r4
  d00b30:	180492fa 	slli	r2,r3,11
  d00b34:	3007883a 	mov	r3,r6
  d00b38:	11be000c 	andi	r6,r2,63488
  d00b3c:	20c0010e 	bge	r4,r3,d00b44 <drawFullSet+0x168>
  d00b40:	2007883a 	mov	r3,r4
  d00b44:	18803fcc 	andi	r2,r3,255
  d00b48:	3084b03a 	or	r2,r6,r2
  d00b4c:	288ab03a 	or	r5,r5,r2

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		for (j = 0; j < rowSize; j++) {
			result = mandelbrotNoZoom(j, i, &recalculateTargetFlag);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
  d00b50:	d1271217 	ldw	r4,-25528(gp)
  d00b54:	d9800317 	ldw	r6,12(sp)
  d00b58:	b80f883a 	mov	r7,r23
	int cpu = __builtin_rdctl(5);

	int recalculateTargetFlag = 10;

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		for (j = 0; j < rowSize; j++) {
  d00b5c:	bdc00044 	addi	r23,r23,1
			result = mandelbrotNoZoom(j, i, &recalculateTargetFlag);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
  d00b60:	0d0e6a80 	call	d0e6a8 <alt_up_pixel_buffer_dma_draw>
	int cpu = __builtin_rdctl(5);

	int recalculateTargetFlag = 10;

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
		for (j = 0; j < rowSize; j++) {
  d00b64:	0080c004 	movi	r2,768
  d00b68:	b8bfba1e 	bne	r23,r2,d00a54 <drawFullSet+0x78>
	int color = 0;
	int cpu = __builtin_rdctl(5);

	int recalculateTargetFlag = 10;

	for (i = cpu; i < colSize; i = i + NUM_CPUS) {
  d00b6c:	d8800317 	ldw	r2,12(sp)
  d00b70:	10800104 	addi	r2,r2,4
  d00b74:	d8800315 	stw	r2,12(sp)
  d00b78:	d8c00317 	ldw	r3,12(sp)
  d00b7c:	0080ffc4 	movi	r2,1023
  d00b80:	10c01316 	blt	r2,r3,d00bd0 <drawFullSet+0x1f4>
  d00b84:	d9000317 	ldw	r4,12(sp)
  d00b88:	003fa506 	br	d00a20 <drawFullSet+0x44>

}

int genColor(int iter) {
	int color = 0;
	if (iter == maxIter) {
  d00b8c:	000b883a 	mov	r5,zero
  d00b90:	003fef06 	br	d00b50 <drawFullSet+0x174>
		x = xtemp;
		iter++;
	}
	int cpu = __builtin_rdctl(5);
	if (cpu == 3) {
		if (*recalculateTargetFlag) {
  d00b94:	d8800217 	ldw	r2,8(sp)
  d00b98:	103fd826 	beq	r2,zero,d00afc <drawFullSet+0x120>
			if (iter >= (maxIter - 2)) {
  d00b9c:	00801844 	movi	r2,97
  d00ba0:	153fd60e 	bge	r2,r20,d00afc <drawFullSet+0x120>
				targetArrayXYMaster[0] = x;
				targetArrayXYMaster[1] = y;
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
  d00ba4:	d8c00217 	ldw	r3,8(sp)
	int cpu = __builtin_rdctl(5);
	if (cpu == 3) {
		if (*recalculateTargetFlag) {
			if (iter >= (maxIter - 2)) {
				targetArrayXYMaster[0] = x;
				targetArrayXYMaster[1] = y;
  d00ba8:	d0a71004 	addi	r2,gp,-25536
  d00bac:	14400115 	stw	r17,4(r2)
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
  d00bb0:	18ffffc4 	addi	r3,r3,-1
	}
	int cpu = __builtin_rdctl(5);
	if (cpu == 3) {
		if (*recalculateTargetFlag) {
			if (iter >= (maxIter - 2)) {
				targetArrayXYMaster[0] = x;
  d00bb4:	d4a71015 	stw	r18,-25536(gp)
				targetArrayXYMaster[1] = y;
				*recalculateTargetFlag = *recalculateTargetFlag - 1;
  d00bb8:	d8c00215 	stw	r3,8(sp)
  d00bbc:	003fcf06 	br	d00afc <drawFullSet+0x120>
	float y0 = ((((float) 767 - (float) cRow) / (float) rowSize) * (maxY - minY)) + minY;
	float x = 0.0;
	float y = 0.0;
	float xtemp = 0.0;

	while (((x * x + y * y) <= 4.0) && (iter < maxIter)) {
  d00bc0:	d8c00017 	ldw	r3,0(sp)
  d00bc4:	05000044 	movi	r20,1
  d00bc8:	1825883a 	mov	r18,r3
  d00bcc:	003fc806 	br	d00af0 <drawFullSet+0x114>
			result = mandelbrotNoZoom(j, i, &recalculateTargetFlag);
			color = genColor(result);
			alt_up_pixel_buffer_dma_draw(myPixelBuffer, color, i, j);
		}
	}
}//*/
  d00bd0:	dfc00d17 	ldw	ra,52(sp)
  d00bd4:	df000c17 	ldw	fp,48(sp)
  d00bd8:	ddc00b17 	ldw	r23,44(sp)
  d00bdc:	dd800a17 	ldw	r22,40(sp)
  d00be0:	dd400917 	ldw	r21,36(sp)
  d00be4:	dd000817 	ldw	r20,32(sp)
  d00be8:	dcc00717 	ldw	r19,28(sp)
  d00bec:	dc800617 	ldw	r18,24(sp)
  d00bf0:	dc400517 	ldw	r17,20(sp)
  d00bf4:	dc000417 	ldw	r16,16(sp)
  d00bf8:	dec00e04 	addi	sp,sp,56
  d00bfc:	f800283a 	ret

00d00c00 <main>:

#define FIXED_POINT



int main() {
  d00c00:	defffd04 	addi	sp,sp,-12
  d00c04:	dfc00215 	stw	ra,8(sp)
  d00c08:	dc400115 	stw	r17,4(sp)
  d00c0c:	dc000015 	stw	r16,0(sp)
	setup();
  d00c10:	0d006a00 	call	d006a0 <setup>
	clearScreen();
  d00c14:	0d003800 	call	d00380 <clearScreen>
	printf("Program running (UART)...\n");
  d00c18:	01003474 	movhi	r4,209
  d00c1c:	2103eb04 	addi	r4,r4,4012
  d00c20:	0d03cdc0 	call	d03cdc <puts>
	//reset address: 0090FFE4
	//default buffer start address: 0x01880000
	printf("ADDRESS: %08X", myPixelBuffer->back_buffer_start_address);
  d00c24:	d0a71217 	ldw	r2,-25528(gp)
  d00c28:	01003474 	movhi	r4,209
  d00c2c:	2103f204 	addi	r4,r4,4040
  d00c30:	11400c17 	ldw	r5,48(r2)
  d00c34:	0d03bc40 	call	d03bc4 <printf>
	int cpu = __builtin_rdctl(5);
  d00c38:	000b317a 	rdctl	r5,cpuid
	printf("cpu %d\n", cpu);
  d00c3c:	01003474 	movhi	r4,209
  d00c40:	2103f604 	addi	r4,r4,4056
  d00c44:	0d03bc40 	call	d03bc4 <printf>
  d00c48:	04401904 	movi	r17,100
  d00c4c:	0021883a 	mov	r16,zero
			 PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
			 PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
			 //*/
//			clearScreen();

			if (zoom == 0) {
  d00c50:	8000041e 	bne	r16,zero,d00c64 <main+0x64>
				drawFullSet();
  d00c54:	0d009dc0 	call	d009dc <drawFullSet>

			else {
				drawFrame(zoom);
			}

			barrier(0);
  d00c58:	0009883a 	mov	r4,zero
  d00c5c:	0d004f40 	call	d004f4 <barrier>
  d00c60:	04000044 	movi	r16,1
			if (zoom == 0) {
				drawFullSet();
			}

			else {
				drawFrame(zoom);
  d00c64:	8009883a 	mov	r4,r16
  d00c68:	0d006d00 	call	d006d0 <drawFrame>
	//	unsigned long long cycles = 0;
	//	drawFullSet();
	//the main program loop
	while (1) {
		int zoom;
		for (zoom = 0; zoom <= 100; zoom++) {
  d00c6c:	84000044 	addi	r16,r16,1

			else {
				drawFrame(zoom);
			}

			barrier(0);
  d00c70:	0009883a 	mov	r4,zero
  d00c74:	0d004f40 	call	d004f4 <barrier>
	//	unsigned long long cycles = 0;
	//	drawFullSet();
	//the main program loop
	while (1) {
		int zoom;
		for (zoom = 0; zoom <= 100; zoom++) {
  d00c78:	8c3ff50e 	bge	r17,r16,d00c50 <main+0x50>
	printf("Program running (UART)...\n");
	//reset address: 0090FFE4
	//default buffer start address: 0x01880000
	printf("ADDRESS: %08X", myPixelBuffer->back_buffer_start_address);
	int cpu = __builtin_rdctl(5);
	printf("cpu %d\n", cpu);
  d00c7c:	0021883a 	mov	r16,zero
  d00c80:	003ff306 	br	d00c50 <main+0x50>

00d00c84 <powf>:
  d00c84:	defff104 	addi	sp,sp,-60
  d00c88:	dd000d15 	stw	r20,52(sp)
  d00c8c:	dcc00c15 	stw	r19,48(sp)
  d00c90:	dc800b15 	stw	r18,44(sp)
  d00c94:	dc400a15 	stw	r17,40(sp)
  d00c98:	dc000915 	stw	r16,36(sp)
  d00c9c:	dfc00e15 	stw	ra,56(sp)
  d00ca0:	05003474 	movhi	r20,209
  d00ca4:	a50bf804 	addi	r20,r20,12256
  d00ca8:	2027883a 	mov	r19,r4
  d00cac:	2825883a 	mov	r18,r5
  d00cb0:	0d010dc0 	call	d010dc <__ieee754_powf>
  d00cb4:	1021883a 	mov	r16,r2
  d00cb8:	a0800017 	ldw	r2,0(r20)
  d00cbc:	047fffc4 	movi	r17,-1
  d00cc0:	14400326 	beq	r2,r17,d00cd0 <powf+0x4c>
  d00cc4:	9009883a 	mov	r4,r18
  d00cc8:	0d01fa00 	call	d01fa0 <isnanf>
  d00ccc:	10000926 	beq	r2,zero,d00cf4 <powf+0x70>
  d00cd0:	8005883a 	mov	r2,r16
  d00cd4:	dfc00e17 	ldw	ra,56(sp)
  d00cd8:	dd000d17 	ldw	r20,52(sp)
  d00cdc:	dcc00c17 	ldw	r19,48(sp)
  d00ce0:	dc800b17 	ldw	r18,44(sp)
  d00ce4:	dc400a17 	ldw	r17,40(sp)
  d00ce8:	dc000917 	ldw	r16,36(sp)
  d00cec:	dec00f04 	addi	sp,sp,60
  d00cf0:	f800283a 	ret
  d00cf4:	9809883a 	mov	r4,r19
  d00cf8:	0d01fa00 	call	d01fa0 <isnanf>
  d00cfc:	1000151e 	bne	r2,zero,d00d54 <powf+0xd0>
  d00d00:	9809883a 	mov	r4,r19
  d00d04:	000b883a 	mov	r5,zero
  d00d08:	0d027300 	call	d02730 <__eqsf2>
  d00d0c:	10005a1e 	bne	r2,zero,d00e78 <powf+0x1f4>
  d00d10:	9009883a 	mov	r4,r18
  d00d14:	000b883a 	mov	r5,zero
  d00d18:	0d027300 	call	d02730 <__eqsf2>
  d00d1c:	1000331e 	bne	r2,zero,d00dec <powf+0x168>
  d00d20:	a0800017 	ldw	r2,0(r20)
  d00d24:	d8000615 	stw	zero,24(sp)
  d00d28:	d8000715 	stw	zero,28(sp)
  d00d2c:	10001426 	beq	r2,zero,d00d80 <powf+0xfc>
  d00d30:	008ffc34 	movhi	r2,16368
  d00d34:	d8800715 	stw	r2,28(sp)
  d00d38:	d8800617 	ldw	r2,24(sp)
  d00d3c:	d8c00717 	ldw	r3,28(sp)
  d00d40:	1009883a 	mov	r4,r2
  d00d44:	180b883a 	mov	r5,r3
  d00d48:	0d032180 	call	d03218 <__truncdfsf2>
  d00d4c:	1021883a 	mov	r16,r2
  d00d50:	003fdf06 	br	d00cd0 <powf+0x4c>
  d00d54:	9009883a 	mov	r4,r18
  d00d58:	000b883a 	mov	r5,zero
  d00d5c:	0d027300 	call	d02730 <__eqsf2>
  d00d60:	103fdb1e 	bne	r2,zero,d00cd0 <powf+0x4c>
  d00d64:	a0c00017 	ldw	r3,0(r20)
  d00d68:	010ffc34 	movhi	r4,16368
  d00d6c:	d8000615 	stw	zero,24(sp)
  d00d70:	d9000715 	stw	r4,28(sp)
  d00d74:	1c401a26 	beq	r3,r17,d00de0 <powf+0x15c>
  d00d78:	00800084 	movi	r2,2
  d00d7c:	18801826 	beq	r3,r2,d00de0 <powf+0x15c>
  d00d80:	9009883a 	mov	r4,r18
  d00d84:	0d029a80 	call	d029a8 <__extendsfdf2>
  d00d88:	9809883a 	mov	r4,r19
  d00d8c:	d8c00515 	stw	r3,20(sp)
  d00d90:	d8800415 	stw	r2,16(sp)
  d00d94:	0d029a80 	call	d029a8 <__extendsfdf2>
  d00d98:	100b883a 	mov	r5,r2
  d00d9c:	d8c00315 	stw	r3,12(sp)
  d00da0:	00803474 	movhi	r2,209
  d00da4:	1083f804 	addi	r2,r2,4064
  d00da8:	00c00044 	movi	r3,1
  d00dac:	d809883a 	mov	r4,sp
  d00db0:	d8800115 	stw	r2,4(sp)
  d00db4:	d8c00015 	stw	r3,0(sp)
  d00db8:	d9400215 	stw	r5,8(sp)
  d00dbc:	d8000815 	stw	zero,32(sp)
  d00dc0:	0d01d5c0 	call	d01d5c <matherr>
  d00dc4:	10002826 	beq	r2,zero,d00e68 <powf+0x1e4>
  d00dc8:	d8800817 	ldw	r2,32(sp)
  d00dcc:	103fda26 	beq	r2,zero,d00d38 <powf+0xb4>
  d00dd0:	0d03bb40 	call	d03bb4 <__errno>
  d00dd4:	d8c00817 	ldw	r3,32(sp)
  d00dd8:	10c00015 	stw	r3,0(r2)
  d00ddc:	003fd606 	br	d00d38 <powf+0xb4>
  d00de0:	d9000715 	stw	r4,28(sp)
  d00de4:	d8000615 	stw	zero,24(sp)
  d00de8:	003fd306 	br	d00d38 <powf+0xb4>
  d00dec:	9009883a 	mov	r4,r18
  d00df0:	0d01f840 	call	d01f84 <finitef>
  d00df4:	103fb626 	beq	r2,zero,d00cd0 <powf+0x4c>
  d00df8:	9009883a 	mov	r4,r18
  d00dfc:	000b883a 	mov	r5,zero
  d00e00:	0d028200 	call	d02820 <__ltsf2>
  d00e04:	103fb20e 	bge	r2,zero,d00cd0 <powf+0x4c>
  d00e08:	9809883a 	mov	r4,r19
  d00e0c:	00800044 	movi	r2,1
  d00e10:	00c03474 	movhi	r3,209
  d00e14:	18c3f804 	addi	r3,r3,4064
  d00e18:	d8800015 	stw	r2,0(sp)
  d00e1c:	d8c00115 	stw	r3,4(sp)
  d00e20:	d8000815 	stw	zero,32(sp)
  d00e24:	0d029a80 	call	d029a8 <__extendsfdf2>
  d00e28:	9009883a 	mov	r4,r18
  d00e2c:	d8c00315 	stw	r3,12(sp)
  d00e30:	d8800215 	stw	r2,8(sp)
  d00e34:	0d029a80 	call	d029a8 <__extendsfdf2>
  d00e38:	a1800017 	ldw	r6,0(r20)
  d00e3c:	d8c00515 	stw	r3,20(sp)
  d00e40:	d8800415 	stw	r2,16(sp)
  d00e44:	30005626 	beq	r6,zero,d00fa0 <powf+0x31c>
  d00e48:	00bffc34 	movhi	r2,65520
  d00e4c:	d8800715 	stw	r2,28(sp)
  d00e50:	00800084 	movi	r2,2
  d00e54:	d8000615 	stw	zero,24(sp)
  d00e58:	30800326 	beq	r6,r2,d00e68 <powf+0x1e4>
  d00e5c:	d809883a 	mov	r4,sp
  d00e60:	0d01d5c0 	call	d01d5c <matherr>
  d00e64:	103fd81e 	bne	r2,zero,d00dc8 <powf+0x144>
  d00e68:	0d03bb40 	call	d03bb4 <__errno>
  d00e6c:	00c00844 	movi	r3,33
  d00e70:	10c00015 	stw	r3,0(r2)
  d00e74:	003fd406 	br	d00dc8 <powf+0x144>
  d00e78:	8009883a 	mov	r4,r16
  d00e7c:	0d01f840 	call	d01f84 <finitef>
  d00e80:	10002426 	beq	r2,zero,d00f14 <powf+0x290>
  d00e84:	8009883a 	mov	r4,r16
  d00e88:	000b883a 	mov	r5,zero
  d00e8c:	0d027300 	call	d02730 <__eqsf2>
  d00e90:	103f8f1e 	bne	r2,zero,d00cd0 <powf+0x4c>
  d00e94:	9809883a 	mov	r4,r19
  d00e98:	0d01f840 	call	d01f84 <finitef>
  d00e9c:	103f8c26 	beq	r2,zero,d00cd0 <powf+0x4c>
  d00ea0:	9009883a 	mov	r4,r18
  d00ea4:	0d01f840 	call	d01f84 <finitef>
  d00ea8:	103f8926 	beq	r2,zero,d00cd0 <powf+0x4c>
  d00eac:	9809883a 	mov	r4,r19
  d00eb0:	00800104 	movi	r2,4
  d00eb4:	00c03474 	movhi	r3,209
  d00eb8:	18c3f804 	addi	r3,r3,4064
  d00ebc:	d8800015 	stw	r2,0(sp)
  d00ec0:	d8c00115 	stw	r3,4(sp)
  d00ec4:	d8000815 	stw	zero,32(sp)
  d00ec8:	0d029a80 	call	d029a8 <__extendsfdf2>
  d00ecc:	9009883a 	mov	r4,r18
  d00ed0:	d8c00315 	stw	r3,12(sp)
  d00ed4:	d8800215 	stw	r2,8(sp)
  d00ed8:	0d029a80 	call	d029a8 <__extendsfdf2>
  d00edc:	a1800017 	ldw	r6,0(r20)
  d00ee0:	d8800415 	stw	r2,16(sp)
  d00ee4:	00800084 	movi	r2,2
  d00ee8:	d8c00515 	stw	r3,20(sp)
  d00eec:	d8000615 	stw	zero,24(sp)
  d00ef0:	d8000715 	stw	zero,28(sp)
  d00ef4:	30800326 	beq	r6,r2,d00f04 <powf+0x280>
  d00ef8:	d809883a 	mov	r4,sp
  d00efc:	0d01d5c0 	call	d01d5c <matherr>
  d00f00:	103fb11e 	bne	r2,zero,d00dc8 <powf+0x144>
  d00f04:	0d03bb40 	call	d03bb4 <__errno>
  d00f08:	00c00884 	movi	r3,34
  d00f0c:	10c00015 	stw	r3,0(r2)
  d00f10:	003fad06 	br	d00dc8 <powf+0x144>
  d00f14:	9809883a 	mov	r4,r19
  d00f18:	0d01f840 	call	d01f84 <finitef>
  d00f1c:	103fd926 	beq	r2,zero,d00e84 <powf+0x200>
  d00f20:	9009883a 	mov	r4,r18
  d00f24:	0d01f840 	call	d01f84 <finitef>
  d00f28:	103fd626 	beq	r2,zero,d00e84 <powf+0x200>
  d00f2c:	8009883a 	mov	r4,r16
  d00f30:	0d01fa00 	call	d01fa0 <isnanf>
  d00f34:	10001d26 	beq	r2,zero,d00fac <powf+0x328>
  d00f38:	9809883a 	mov	r4,r19
  d00f3c:	00800044 	movi	r2,1
  d00f40:	00c03474 	movhi	r3,209
  d00f44:	18c3f804 	addi	r3,r3,4064
  d00f48:	d8800015 	stw	r2,0(sp)
  d00f4c:	d8c00115 	stw	r3,4(sp)
  d00f50:	d8000815 	stw	zero,32(sp)
  d00f54:	0d029a80 	call	d029a8 <__extendsfdf2>
  d00f58:	9009883a 	mov	r4,r18
  d00f5c:	d8c00315 	stw	r3,12(sp)
  d00f60:	d8800215 	stw	r2,8(sp)
  d00f64:	0d029a80 	call	d029a8 <__extendsfdf2>
  d00f68:	a4000017 	ldw	r16,0(r20)
  d00f6c:	d8c00515 	stw	r3,20(sp)
  d00f70:	d8800415 	stw	r2,16(sp)
  d00f74:	80000a26 	beq	r16,zero,d00fa0 <powf+0x31c>
  d00f78:	0009883a 	mov	r4,zero
  d00f7c:	000d883a 	mov	r6,zero
  d00f80:	000b883a 	mov	r5,zero
  d00f84:	000f883a 	mov	r7,zero
  d00f88:	0d02f000 	call	d02f00 <__divdf3>
  d00f8c:	d8800615 	stw	r2,24(sp)
  d00f90:	00800084 	movi	r2,2
  d00f94:	d8c00715 	stw	r3,28(sp)
  d00f98:	80bfb01e 	bne	r16,r2,d00e5c <powf+0x1d8>
  d00f9c:	003fb206 	br	d00e68 <powf+0x1e4>
  d00fa0:	d8000615 	stw	zero,24(sp)
  d00fa4:	d8000715 	stw	zero,28(sp)
  d00fa8:	003fac06 	br	d00e5c <powf+0x1d8>
  d00fac:	9809883a 	mov	r4,r19
  d00fb0:	008000c4 	movi	r2,3
  d00fb4:	00c03474 	movhi	r3,209
  d00fb8:	18c3f804 	addi	r3,r3,4064
  d00fbc:	d8800015 	stw	r2,0(sp)
  d00fc0:	d8c00115 	stw	r3,4(sp)
  d00fc4:	d8000815 	stw	zero,32(sp)
  d00fc8:	0d029a80 	call	d029a8 <__extendsfdf2>
  d00fcc:	9009883a 	mov	r4,r18
  d00fd0:	d8c00315 	stw	r3,12(sp)
  d00fd4:	d8800215 	stw	r2,8(sp)
  d00fd8:	0d029a80 	call	d029a8 <__extendsfdf2>
  d00fdc:	a1800017 	ldw	r6,0(r20)
  d00fe0:	d8c00515 	stw	r3,20(sp)
  d00fe4:	d8800415 	stw	r2,16(sp)
  d00fe8:	3000211e 	bne	r6,zero,d01070 <powf+0x3ec>
  d00fec:	9809883a 	mov	r4,r19
  d00ff0:	0091fc34 	movhi	r2,18416
  d00ff4:	10bfffc4 	addi	r2,r2,-1
  d00ff8:	04f80034 	movhi	r19,57344
  d00ffc:	000b883a 	mov	r5,zero
  d01000:	d8800715 	stw	r2,28(sp)
  d01004:	dcc00615 	stw	r19,24(sp)
  d01008:	0d028200 	call	d02820 <__ltsf2>
  d0100c:	103fba0e 	bge	r2,zero,d00ef8 <powf+0x274>
  d01010:	014fc034 	movhi	r5,16128
  d01014:	9009883a 	mov	r4,r18
  d01018:	0d023dc0 	call	d023dc <__mulsf3>
  d0101c:	1009883a 	mov	r4,r2
  d01020:	0d029a80 	call	d029a8 <__extendsfdf2>
  d01024:	1009883a 	mov	r4,r2
  d01028:	180b883a 	mov	r5,r3
  d0102c:	1021883a 	mov	r16,r2
  d01030:	1823883a 	mov	r17,r3
  d01034:	0d01d640 	call	d01d64 <rint>
  d01038:	180f883a 	mov	r7,r3
  d0103c:	880b883a 	mov	r5,r17
  d01040:	8009883a 	mov	r4,r16
  d01044:	100d883a 	mov	r6,r2
  d01048:	0d031580 	call	d03158 <__nedf2>
  d0104c:	10000426 	beq	r2,zero,d01060 <powf+0x3dc>
  d01050:	00b1fc34 	movhi	r2,51184
  d01054:	10bfffc4 	addi	r2,r2,-1
  d01058:	dcc00615 	stw	r19,24(sp)
  d0105c:	d8800715 	stw	r2,28(sp)
  d01060:	a0c00017 	ldw	r3,0(r20)
  d01064:	00800084 	movi	r2,2
  d01068:	18bfa31e 	bne	r3,r2,d00ef8 <powf+0x274>
  d0106c:	003fa506 	br	d00f04 <powf+0x280>
  d01070:	009ffc34 	movhi	r2,32752
  d01074:	9809883a 	mov	r4,r19
  d01078:	000b883a 	mov	r5,zero
  d0107c:	d8800715 	stw	r2,28(sp)
  d01080:	d8000615 	stw	zero,24(sp)
  d01084:	0d028200 	call	d02820 <__ltsf2>
  d01088:	103ff50e 	bge	r2,zero,d01060 <powf+0x3dc>
  d0108c:	014fc034 	movhi	r5,16128
  d01090:	9009883a 	mov	r4,r18
  d01094:	0d023dc0 	call	d023dc <__mulsf3>
  d01098:	1009883a 	mov	r4,r2
  d0109c:	0d029a80 	call	d029a8 <__extendsfdf2>
  d010a0:	1009883a 	mov	r4,r2
  d010a4:	180b883a 	mov	r5,r3
  d010a8:	1021883a 	mov	r16,r2
  d010ac:	1823883a 	mov	r17,r3
  d010b0:	0d01d640 	call	d01d64 <rint>
  d010b4:	180f883a 	mov	r7,r3
  d010b8:	880b883a 	mov	r5,r17
  d010bc:	8009883a 	mov	r4,r16
  d010c0:	100d883a 	mov	r6,r2
  d010c4:	0d031580 	call	d03158 <__nedf2>
  d010c8:	103fe526 	beq	r2,zero,d01060 <powf+0x3dc>
  d010cc:	00bffc34 	movhi	r2,65520
  d010d0:	d8800715 	stw	r2,28(sp)
  d010d4:	d8000615 	stw	zero,24(sp)
  d010d8:	003fe106 	br	d01060 <powf+0x3dc>

00d010dc <__ieee754_powf>:
  d010dc:	defff004 	addi	sp,sp,-64
  d010e0:	00a00034 	movhi	r2,32768
  d010e4:	10bfffc4 	addi	r2,r2,-1
  d010e8:	dc000615 	stw	r16,24(sp)
  d010ec:	28a0703a 	and	r16,r5,r2
  d010f0:	df000e15 	stw	fp,56(sp)
  d010f4:	dcc00915 	stw	r19,36(sp)
  d010f8:	dc800815 	stw	r18,32(sp)
  d010fc:	2027883a 	mov	r19,r4
  d01100:	dfc00f15 	stw	ra,60(sp)
  d01104:	ddc00d15 	stw	r23,52(sp)
  d01108:	dd800c15 	stw	r22,48(sp)
  d0110c:	dd400b15 	stw	r21,44(sp)
  d01110:	dd000a15 	stw	r20,40(sp)
  d01114:	dc400715 	stw	r17,28(sp)
  d01118:	2839883a 	mov	fp,r5
  d0111c:	2825883a 	mov	r18,r5
  d01120:	2809883a 	mov	r4,r5
  d01124:	80003526 	beq	r16,zero,d011fc <__ieee754_powf+0x120>
  d01128:	98a2703a 	and	r17,r19,r2
  d0112c:	009fe034 	movhi	r2,32640
  d01130:	9829883a 	mov	r20,r19
  d01134:	1440100e 	bge	r2,r17,d01178 <__ieee754_powf+0x9c>
  d01138:	008fe034 	movhi	r2,16256
  d0113c:	88803d26 	beq	r17,r2,d01234 <__ieee754_powf+0x158>
  d01140:	01003474 	movhi	r4,209
  d01144:	21045804 	addi	r4,r4,4448
  d01148:	dfc00f17 	ldw	ra,60(sp)
  d0114c:	df000e17 	ldw	fp,56(sp)
  d01150:	ddc00d17 	ldw	r23,52(sp)
  d01154:	dd800c17 	ldw	r22,48(sp)
  d01158:	dd400b17 	ldw	r21,44(sp)
  d0115c:	dd000a17 	ldw	r20,40(sp)
  d01160:	dcc00917 	ldw	r19,36(sp)
  d01164:	dc800817 	ldw	r18,32(sp)
  d01168:	dc400717 	ldw	r17,28(sp)
  d0116c:	dc000617 	ldw	r16,24(sp)
  d01170:	dec01004 	addi	sp,sp,64
  d01174:	0d01fb81 	jmpi	d01fb8 <nanf>
  d01178:	143fef16 	blt	r2,r16,d01138 <__ieee754_powf+0x5c>
  d0117c:	982a403a 	cmpge	r21,r19,zero
  d01180:	a8004526 	beq	r21,zero,d01298 <__ieee754_powf+0x1bc>
  d01184:	002f883a 	mov	r23,zero
  d01188:	009fe034 	movhi	r2,32640
  d0118c:	80803926 	beq	r16,r2,d01274 <__ieee754_powf+0x198>
  d01190:	008fe034 	movhi	r2,16256
  d01194:	80803d26 	beq	r16,r2,d0128c <__ieee754_powf+0x1b0>
  d01198:	00900034 	movhi	r2,16384
  d0119c:	20805326 	beq	r4,r2,d012ec <__ieee754_powf+0x210>
  d011a0:	008fc034 	movhi	r2,16128
  d011a4:	20802526 	beq	r4,r2,d0123c <__ieee754_powf+0x160>
  d011a8:	9809883a 	mov	r4,r19
  d011ac:	0d01f740 	call	d01f74 <fabsf>
  d011b0:	1009883a 	mov	r4,r2
  d011b4:	009fe034 	movhi	r2,32640
  d011b8:	88803c26 	beq	r17,r2,d012ac <__ieee754_powf+0x1d0>
  d011bc:	88003b26 	beq	r17,zero,d012ac <__ieee754_powf+0x1d0>
  d011c0:	014fe034 	movhi	r5,16256
  d011c4:	89403926 	beq	r17,r5,d012ac <__ieee754_powf+0x1d0>
  d011c8:	a004d7fa 	srli	r2,r20,31
  d011cc:	10bfffc4 	addi	r2,r2,-1
  d011d0:	15c6b03a 	or	r3,r2,r23
  d011d4:	d8800215 	stw	r2,8(sp)
  d011d8:	1800661e 	bne	r3,zero,d01374 <__ieee754_powf+0x298>
  d011dc:	980b883a 	mov	r5,r19
  d011e0:	9809883a 	mov	r4,r19
  d011e4:	0d023080 	call	d02308 <__subsf3>
  d011e8:	1009883a 	mov	r4,r2
  d011ec:	100b883a 	mov	r5,r2
  d011f0:	0d025bc0 	call	d025bc <__divsf3>
  d011f4:	1039883a 	mov	fp,r2
  d011f8:	00000106 	br	d01200 <__ieee754_powf+0x124>
  d011fc:	070fe034 	movhi	fp,16256
  d01200:	e005883a 	mov	r2,fp
  d01204:	dfc00f17 	ldw	ra,60(sp)
  d01208:	df000e17 	ldw	fp,56(sp)
  d0120c:	ddc00d17 	ldw	r23,52(sp)
  d01210:	dd800c17 	ldw	r22,48(sp)
  d01214:	dd400b17 	ldw	r21,44(sp)
  d01218:	dd000a17 	ldw	r20,40(sp)
  d0121c:	dcc00917 	ldw	r19,36(sp)
  d01220:	dc800817 	ldw	r18,32(sp)
  d01224:	dc400717 	ldw	r17,28(sp)
  d01228:	dc000617 	ldw	r16,24(sp)
  d0122c:	dec01004 	addi	sp,sp,64
  d01230:	f800283a 	ret
  d01234:	8839883a 	mov	fp,r17
  d01238:	003ff106 	br	d01200 <__ieee754_powf+0x124>
  d0123c:	a03fda16 	blt	r20,zero,d011a8 <__ieee754_powf+0xcc>
  d01240:	9809883a 	mov	r4,r19
  d01244:	dfc00f17 	ldw	ra,60(sp)
  d01248:	df000e17 	ldw	fp,56(sp)
  d0124c:	ddc00d17 	ldw	r23,52(sp)
  d01250:	dd800c17 	ldw	r22,48(sp)
  d01254:	dd400b17 	ldw	r21,44(sp)
  d01258:	dd000a17 	ldw	r20,40(sp)
  d0125c:	dcc00917 	ldw	r19,36(sp)
  d01260:	dc800817 	ldw	r18,32(sp)
  d01264:	dc400717 	ldw	r17,28(sp)
  d01268:	dc000617 	ldw	r16,24(sp)
  d0126c:	dec01004 	addi	sp,sp,64
  d01270:	0d01bf01 	jmpi	d01bf0 <__ieee754_sqrtf>
  d01274:	008fe034 	movhi	r2,16256
  d01278:	88bfee26 	beq	r17,r2,d01234 <__ieee754_powf+0x158>
  d0127c:	1440200e 	bge	r2,r17,d01300 <__ieee754_powf+0x224>
  d01280:	903fdf0e 	bge	r18,zero,d01200 <__ieee754_powf+0x124>
  d01284:	0039883a 	mov	fp,zero
  d01288:	003fdd06 	br	d01200 <__ieee754_powf+0x124>
  d0128c:	90002f16 	blt	r18,zero,d0134c <__ieee754_powf+0x270>
  d01290:	9839883a 	mov	fp,r19
  d01294:	003fda06 	br	d01200 <__ieee754_powf+0x124>
  d01298:	0092e034 	movhi	r2,19328
  d0129c:	10bfffc4 	addi	r2,r2,-1
  d012a0:	14001b0e 	bge	r2,r16,d01310 <__ieee754_powf+0x234>
  d012a4:	05c00084 	movi	r23,2
  d012a8:	003fb706 	br	d01188 <__ieee754_powf+0xac>
  d012ac:	90000916 	blt	r18,zero,d012d4 <__ieee754_powf+0x1f8>
  d012b0:	a8000226 	beq	r21,zero,d012bc <__ieee754_powf+0x1e0>
  d012b4:	2039883a 	mov	fp,r4
  d012b8:	003fd106 	br	d01200 <__ieee754_powf+0x124>
  d012bc:	00b02034 	movhi	r2,49280
  d012c0:	8885883a 	add	r2,r17,r2
  d012c4:	b884b03a 	or	r2,r23,r2
  d012c8:	1000251e 	bne	r2,zero,d01360 <__ieee754_powf+0x284>
  d012cc:	200b883a 	mov	r5,r4
  d012d0:	003fc406 	br	d011e4 <__ieee754_powf+0x108>
  d012d4:	200b883a 	mov	r5,r4
  d012d8:	010fe034 	movhi	r4,16256
  d012dc:	0d025bc0 	call	d025bc <__divsf3>
  d012e0:	1009883a 	mov	r4,r2
  d012e4:	a83ff31e 	bne	r21,zero,d012b4 <__ieee754_powf+0x1d8>
  d012e8:	003ff406 	br	d012bc <__ieee754_powf+0x1e0>
  d012ec:	980b883a 	mov	r5,r19
  d012f0:	9809883a 	mov	r4,r19
  d012f4:	0d023dc0 	call	d023dc <__mulsf3>
  d012f8:	1039883a 	mov	fp,r2
  d012fc:	003fc006 	br	d01200 <__ieee754_powf+0x124>
  d01300:	903fe00e 	bge	r18,zero,d01284 <__ieee754_powf+0x1a8>
  d01304:	e0a0003c 	xorhi	r2,fp,32768
  d01308:	1039883a 	mov	fp,r2
  d0130c:	003fbc06 	br	d01200 <__ieee754_powf+0x124>
  d01310:	008fe034 	movhi	r2,16256
  d01314:	10bfffc4 	addi	r2,r2,-1
  d01318:	1400060e 	bge	r2,r16,d01334 <__ieee754_powf+0x258>
  d0131c:	8007d5fa 	srai	r3,r16,23
  d01320:	00802584 	movi	r2,150
  d01324:	10c5c83a 	sub	r2,r2,r3
  d01328:	8087d83a 	sra	r3,r16,r2
  d0132c:	1884983a 	sll	r2,r3,r2
  d01330:	80800226 	beq	r16,r2,d0133c <__ieee754_powf+0x260>
  d01334:	002f883a 	mov	r23,zero
  d01338:	003f9506 	br	d01190 <__ieee754_powf+0xb4>
  d0133c:	18c0004c 	andi	r3,r3,1
  d01340:	00800084 	movi	r2,2
  d01344:	10efc83a 	sub	r23,r2,r3
  d01348:	003f9106 	br	d01190 <__ieee754_powf+0xb4>
  d0134c:	8009883a 	mov	r4,r16
  d01350:	980b883a 	mov	r5,r19
  d01354:	0d025bc0 	call	d025bc <__divsf3>
  d01358:	1039883a 	mov	fp,r2
  d0135c:	003fa806 	br	d01200 <__ieee754_powf+0x124>
  d01360:	00800044 	movi	r2,1
  d01364:	b8bfd31e 	bne	r23,r2,d012b4 <__ieee754_powf+0x1d8>
  d01368:	20a0003c 	xorhi	r2,r4,32768
  d0136c:	1039883a 	mov	fp,r2
  d01370:	003fa306 	br	d01200 <__ieee754_powf+0x124>
  d01374:	00934034 	movhi	r2,19712
  d01378:	14000a0e 	bge	r2,r16,d013a4 <__ieee754_powf+0x2c8>
  d0137c:	008fe034 	movhi	r2,16256
  d01380:	10bffdc4 	addi	r2,r2,-9
  d01384:	1441b016 	blt	r2,r17,d01a48 <__ieee754_powf+0x96c>
  d01388:	903fbe0e 	bge	r18,zero,d01284 <__ieee754_powf+0x1a8>
  d0138c:	011c52b4 	movhi	r4,29002
  d01390:	213cb284 	addi	r4,r4,-3382
  d01394:	200b883a 	mov	r5,r4
  d01398:	0d023dc0 	call	d023dc <__mulsf3>
  d0139c:	1039883a 	mov	fp,r2
  d013a0:	003f9706 	br	d01200 <__ieee754_powf+0x124>
  d013a4:	00802034 	movhi	r2,128
  d013a8:	10bfffc4 	addi	r2,r2,-1
  d013ac:	1441a10e 	bge	r2,r17,d01a34 <__ieee754_powf+0x958>
  d013b0:	0009883a 	mov	r4,zero
  d013b4:	8805d5fa 	srai	r2,r17,23
  d013b8:	00c02034 	movhi	r3,128
  d013bc:	18ffffc4 	addi	r3,r3,-1
  d013c0:	88c6703a 	and	r3,r17,r3
  d013c4:	2089883a 	add	r4,r4,r2
  d013c8:	20bfe044 	addi	r2,r4,-127
  d013cc:	d8800015 	stw	r2,0(sp)
  d013d0:	00800774 	movhi	r2,29
  d013d4:	10b11c44 	addi	r2,r2,-15247
  d013d8:	1c0fe034 	orhi	r16,r3,16256
  d013dc:	10c1790e 	bge	r2,r3,d019c4 <__ieee754_powf+0x8e8>
  d013e0:	008017b4 	movhi	r2,94
  d013e4:	10acf584 	addi	r2,r2,-19498
  d013e8:	10c17216 	blt	r2,r3,d019b4 <__ieee754_powf+0x8d8>
  d013ec:	00800934 	movhi	r2,36
  d013f0:	05000044 	movi	r20,1
  d013f4:	d8800115 	stw	r2,4(sp)
  d013f8:	a529883a 	add	r20,r20,r20
  d013fc:	a529883a 	add	r20,r20,r20
  d01400:	d0a00104 	addi	r2,gp,-32764
  d01404:	a085883a 	add	r2,r20,r2
  d01408:	14800017 	ldw	r18,0(r2)
  d0140c:	8009883a 	mov	r4,r16
  d01410:	8023d07a 	srai	r17,r16,1
  d01414:	900b883a 	mov	r5,r18
  d01418:	0d023080 	call	d02308 <__subsf3>
  d0141c:	8009883a 	mov	r4,r16
  d01420:	900b883a 	mov	r5,r18
  d01424:	1027883a 	mov	r19,r2
  d01428:	0d023780 	call	d02378 <__addsf3>
  d0142c:	100b883a 	mov	r5,r2
  d01430:	010fe034 	movhi	r4,16256
  d01434:	0d025bc0 	call	d025bc <__divsf3>
  d01438:	100b883a 	mov	r5,r2
  d0143c:	9809883a 	mov	r4,r19
  d01440:	102b883a 	mov	r21,r2
  d01444:	0d023dc0 	call	d023dc <__mulsf3>
  d01448:	d8800315 	stw	r2,12(sp)
  d0144c:	d8c00317 	ldw	r3,12(sp)
  d01450:	00bc0004 	movi	r2,-4096
  d01454:	8c480034 	orhi	r17,r17,8192
  d01458:	10ec703a 	and	r22,r2,r3
  d0145c:	d8800117 	ldw	r2,4(sp)
  d01460:	b009883a 	mov	r4,r22
  d01464:	88a3883a 	add	r17,r17,r2
  d01468:	880b883a 	mov	r5,r17
  d0146c:	0d023dc0 	call	d023dc <__mulsf3>
  d01470:	100b883a 	mov	r5,r2
  d01474:	9809883a 	mov	r4,r19
  d01478:	0d023080 	call	d02308 <__subsf3>
  d0147c:	8809883a 	mov	r4,r17
  d01480:	900b883a 	mov	r5,r18
  d01484:	1027883a 	mov	r19,r2
  d01488:	0d023080 	call	d02308 <__subsf3>
  d0148c:	100b883a 	mov	r5,r2
  d01490:	8009883a 	mov	r4,r16
  d01494:	0d023080 	call	d02308 <__subsf3>
  d01498:	100b883a 	mov	r5,r2
  d0149c:	b009883a 	mov	r4,r22
  d014a0:	0d023dc0 	call	d023dc <__mulsf3>
  d014a4:	100b883a 	mov	r5,r2
  d014a8:	9809883a 	mov	r4,r19
  d014ac:	0d023080 	call	d02308 <__subsf3>
  d014b0:	100b883a 	mov	r5,r2
  d014b4:	a809883a 	mov	r4,r21
  d014b8:	0d023dc0 	call	d023dc <__mulsf3>
  d014bc:	d9000317 	ldw	r4,12(sp)
  d014c0:	d8800415 	stw	r2,16(sp)
  d014c4:	05501034 	movhi	r21,16448
  d014c8:	200b883a 	mov	r5,r4
  d014cc:	0d023dc0 	call	d023dc <__mulsf3>
  d014d0:	1021883a 	mov	r16,r2
  d014d4:	1009883a 	mov	r4,r2
  d014d8:	100b883a 	mov	r5,r2
  d014dc:	0d023dc0 	call	d023dc <__mulsf3>
  d014e0:	8009883a 	mov	r4,r16
  d014e4:	014f9534 	movhi	r5,15956
  d014e8:	297c5084 	addi	r5,r5,-3774
  d014ec:	1023883a 	mov	r17,r2
  d014f0:	0d023dc0 	call	d023dc <__mulsf3>
  d014f4:	1009883a 	mov	r4,r2
  d014f8:	014f9b34 	movhi	r5,15980
  d014fc:	294c9544 	addi	r5,r5,12885
  d01500:	0d023780 	call	d02378 <__addsf3>
  d01504:	100b883a 	mov	r5,r2
  d01508:	8009883a 	mov	r4,r16
  d0150c:	0d023dc0 	call	d023dc <__mulsf3>
  d01510:	1009883a 	mov	r4,r2
  d01514:	014fa334 	movhi	r5,16012
  d01518:	2968c144 	addi	r5,r5,-23803
  d0151c:	0d023780 	call	d02378 <__addsf3>
  d01520:	100b883a 	mov	r5,r2
  d01524:	8009883a 	mov	r4,r16
  d01528:	0d023dc0 	call	d023dc <__mulsf3>
  d0152c:	1009883a 	mov	r4,r2
  d01530:	014faaf4 	movhi	r5,16043
  d01534:	296aaac4 	addi	r5,r5,-21845
  d01538:	0d023780 	call	d02378 <__addsf3>
  d0153c:	100b883a 	mov	r5,r2
  d01540:	8009883a 	mov	r4,r16
  d01544:	0d023dc0 	call	d023dc <__mulsf3>
  d01548:	1009883a 	mov	r4,r2
  d0154c:	014fb6f4 	movhi	r5,16091
  d01550:	295b6dc4 	addi	r5,r5,28087
  d01554:	0d023780 	call	d02378 <__addsf3>
  d01558:	100b883a 	mov	r5,r2
  d0155c:	8009883a 	mov	r4,r16
  d01560:	0d023dc0 	call	d023dc <__mulsf3>
  d01564:	1009883a 	mov	r4,r2
  d01568:	014fc6b4 	movhi	r5,16154
  d0156c:	29666684 	addi	r5,r5,-26214
  d01570:	0d023780 	call	d02378 <__addsf3>
  d01574:	100b883a 	mov	r5,r2
  d01578:	8809883a 	mov	r4,r17
  d0157c:	0d023dc0 	call	d023dc <__mulsf3>
  d01580:	d9000317 	ldw	r4,12(sp)
  d01584:	b00b883a 	mov	r5,r22
  d01588:	1021883a 	mov	r16,r2
  d0158c:	0d023780 	call	d02378 <__addsf3>
  d01590:	d9000417 	ldw	r4,16(sp)
  d01594:	100b883a 	mov	r5,r2
  d01598:	0d023dc0 	call	d023dc <__mulsf3>
  d0159c:	100b883a 	mov	r5,r2
  d015a0:	8009883a 	mov	r4,r16
  d015a4:	0d023780 	call	d02378 <__addsf3>
  d015a8:	b009883a 	mov	r4,r22
  d015ac:	b00b883a 	mov	r5,r22
  d015b0:	1025883a 	mov	r18,r2
  d015b4:	0d023dc0 	call	d023dc <__mulsf3>
  d015b8:	1009883a 	mov	r4,r2
  d015bc:	a80b883a 	mov	r5,r21
  d015c0:	1027883a 	mov	r19,r2
  d015c4:	0d023780 	call	d02378 <__addsf3>
  d015c8:	100b883a 	mov	r5,r2
  d015cc:	9009883a 	mov	r4,r18
  d015d0:	0d023780 	call	d02378 <__addsf3>
  d015d4:	00fc0004 	movi	r3,-4096
  d015d8:	10e2703a 	and	r17,r2,r3
  d015dc:	880b883a 	mov	r5,r17
  d015e0:	b009883a 	mov	r4,r22
  d015e4:	0d023dc0 	call	d023dc <__mulsf3>
  d015e8:	d9000417 	ldw	r4,16(sp)
  d015ec:	880b883a 	mov	r5,r17
  d015f0:	d8800515 	stw	r2,20(sp)
  d015f4:	0d023dc0 	call	d023dc <__mulsf3>
  d015f8:	8809883a 	mov	r4,r17
  d015fc:	a80b883a 	mov	r5,r21
  d01600:	1021883a 	mov	r16,r2
  d01604:	0d023080 	call	d02308 <__subsf3>
  d01608:	1009883a 	mov	r4,r2
  d0160c:	980b883a 	mov	r5,r19
  d01610:	0d023080 	call	d02308 <__subsf3>
  d01614:	100b883a 	mov	r5,r2
  d01618:	9009883a 	mov	r4,r18
  d0161c:	0d023080 	call	d02308 <__subsf3>
  d01620:	d9000317 	ldw	r4,12(sp)
  d01624:	100b883a 	mov	r5,r2
  d01628:	0d023dc0 	call	d023dc <__mulsf3>
  d0162c:	100b883a 	mov	r5,r2
  d01630:	8009883a 	mov	r4,r16
  d01634:	0d023780 	call	d02378 <__addsf3>
  d01638:	d9000517 	ldw	r4,20(sp)
  d0163c:	100b883a 	mov	r5,r2
  d01640:	1027883a 	mov	r19,r2
  d01644:	0d023780 	call	d02378 <__addsf3>
  d01648:	00fc0004 	movi	r3,-4096
  d0164c:	10e2703a 	and	r17,r2,r3
  d01650:	8809883a 	mov	r4,r17
  d01654:	014fddb4 	movhi	r5,16246
  d01658:	294e0004 	addi	r5,r5,14336
  d0165c:	0d023dc0 	call	d023dc <__mulsf3>
  d01660:	8809883a 	mov	r4,r17
  d01664:	014da7b4 	movhi	r5,13982
  d01668:	2970e804 	addi	r5,r5,-15456
  d0166c:	102b883a 	mov	r21,r2
  d01670:	0d023dc0 	call	d023dc <__mulsf3>
  d01674:	d9400517 	ldw	r5,20(sp)
  d01678:	8809883a 	mov	r4,r17
  d0167c:	1025883a 	mov	r18,r2
  d01680:	0d023080 	call	d02308 <__subsf3>
  d01684:	100b883a 	mov	r5,r2
  d01688:	9809883a 	mov	r4,r19
  d0168c:	0d023080 	call	d02308 <__subsf3>
  d01690:	1009883a 	mov	r4,r2
  d01694:	014fddb4 	movhi	r5,16246
  d01698:	294e13c4 	addi	r5,r5,14415
  d0169c:	0d023dc0 	call	d023dc <__mulsf3>
  d016a0:	100b883a 	mov	r5,r2
  d016a4:	9009883a 	mov	r4,r18
  d016a8:	0d023780 	call	d02378 <__addsf3>
  d016ac:	d0e00304 	addi	r3,gp,-32756
  d016b0:	a0c7883a 	add	r3,r20,r3
  d016b4:	19400017 	ldw	r5,0(r3)
  d016b8:	1009883a 	mov	r4,r2
  d016bc:	0d023780 	call	d02378 <__addsf3>
  d016c0:	d9000017 	ldw	r4,0(sp)
  d016c4:	1023883a 	mov	r17,r2
  d016c8:	0d029100 	call	d02910 <__floatsisf>
  d016cc:	1021883a 	mov	r16,r2
  d016d0:	d0a00504 	addi	r2,gp,-32748
  d016d4:	a0a9883a 	add	r20,r20,r2
  d016d8:	a4800017 	ldw	r18,0(r20)
  d016dc:	a809883a 	mov	r4,r21
  d016e0:	880b883a 	mov	r5,r17
  d016e4:	0d023780 	call	d02378 <__addsf3>
  d016e8:	1009883a 	mov	r4,r2
  d016ec:	900b883a 	mov	r5,r18
  d016f0:	0d023780 	call	d02378 <__addsf3>
  d016f4:	100b883a 	mov	r5,r2
  d016f8:	8009883a 	mov	r4,r16
  d016fc:	0d023780 	call	d02378 <__addsf3>
  d01700:	00fc0004 	movi	r3,-4096
  d01704:	10c4703a 	and	r2,r2,r3
  d01708:	800b883a 	mov	r5,r16
  d0170c:	1009883a 	mov	r4,r2
  d01710:	1027883a 	mov	r19,r2
  d01714:	0d023080 	call	d02308 <__subsf3>
  d01718:	1009883a 	mov	r4,r2
  d0171c:	900b883a 	mov	r5,r18
  d01720:	0d023080 	call	d02308 <__subsf3>
  d01724:	1009883a 	mov	r4,r2
  d01728:	a80b883a 	mov	r5,r21
  d0172c:	0d023080 	call	d02308 <__subsf3>
  d01730:	100b883a 	mov	r5,r2
  d01734:	8809883a 	mov	r4,r17
  d01738:	0d023080 	call	d02308 <__subsf3>
  d0173c:	1021883a 	mov	r16,r2
  d01740:	d8c00217 	ldw	r3,8(sp)
  d01744:	b8bfffc4 	addi	r2,r23,-1
  d01748:	1884b03a 	or	r2,r3,r2
  d0174c:	1000a11e 	bne	r2,zero,d019d4 <__ieee754_powf+0x8f8>
  d01750:	05efe034 	movhi	r23,49024
  d01754:	047c0004 	movi	r17,-4096
  d01758:	8f22703a 	and	r17,r17,fp
  d0175c:	e009883a 	mov	r4,fp
  d01760:	880b883a 	mov	r5,r17
  d01764:	0d023080 	call	d02308 <__subsf3>
  d01768:	100b883a 	mov	r5,r2
  d0176c:	9809883a 	mov	r4,r19
  d01770:	0d023dc0 	call	d023dc <__mulsf3>
  d01774:	8009883a 	mov	r4,r16
  d01778:	e00b883a 	mov	r5,fp
  d0177c:	1025883a 	mov	r18,r2
  d01780:	0d023dc0 	call	d023dc <__mulsf3>
  d01784:	100b883a 	mov	r5,r2
  d01788:	9009883a 	mov	r4,r18
  d0178c:	0d023780 	call	d02378 <__addsf3>
  d01790:	9809883a 	mov	r4,r19
  d01794:	880b883a 	mov	r5,r17
  d01798:	1021883a 	mov	r16,r2
  d0179c:	0d023dc0 	call	d023dc <__mulsf3>
  d017a0:	100b883a 	mov	r5,r2
  d017a4:	8009883a 	mov	r4,r16
  d017a8:	1027883a 	mov	r19,r2
  d017ac:	0d023780 	call	d02378 <__addsf3>
  d017b0:	1023883a 	mov	r17,r2
  d017b4:	1029883a 	mov	r20,r2
  d017b8:	00a00034 	movhi	r2,32768
  d017bc:	10bfffc4 	addi	r2,r2,-1
  d017c0:	88a4703a 	and	r18,r17,r2
  d017c4:	8039883a 	mov	fp,r16
  d017c8:	982b883a 	mov	r21,r19
  d017cc:	8807883a 	mov	r3,r17
  d017d0:	0440a30e 	bge	zero,r17,d01a60 <__ieee754_powf+0x984>
  d017d4:	0090c034 	movhi	r2,17152
  d017d8:	14808c16 	blt	r2,r18,d01a0c <__ieee754_powf+0x930>
  d017dc:	90807f26 	beq	r18,r2,d019dc <__ieee754_powf+0x900>
  d017e0:	008fc034 	movhi	r2,16128
  d017e4:	1480a816 	blt	r2,r18,d01a88 <__ieee754_powf+0x9ac>
  d017e8:	002d883a 	mov	r22,zero
  d017ec:	0029883a 	mov	r20,zero
  d017f0:	047c0004 	movi	r17,-4096
  d017f4:	88e2703a 	and	r17,r17,r3
  d017f8:	8809883a 	mov	r4,r17
  d017fc:	014fcc74 	movhi	r5,16177
  d01800:	295c8004 	addi	r5,r5,29184
  d01804:	0d023dc0 	call	d023dc <__mulsf3>
  d01808:	8809883a 	mov	r4,r17
  d0180c:	a80b883a 	mov	r5,r21
  d01810:	1027883a 	mov	r19,r2
  d01814:	0d023080 	call	d02308 <__subsf3>
  d01818:	100b883a 	mov	r5,r2
  d0181c:	e009883a 	mov	r4,fp
  d01820:	0d023080 	call	d02308 <__subsf3>
  d01824:	1009883a 	mov	r4,r2
  d01828:	014fcc74 	movhi	r5,16177
  d0182c:	295c8604 	addi	r5,r5,29208
  d01830:	0d023dc0 	call	d023dc <__mulsf3>
  d01834:	8809883a 	mov	r4,r17
  d01838:	014d7034 	movhi	r5,13760
  d0183c:	296fa304 	addi	r5,r5,-16756
  d01840:	1025883a 	mov	r18,r2
  d01844:	0d023dc0 	call	d023dc <__mulsf3>
  d01848:	100b883a 	mov	r5,r2
  d0184c:	9009883a 	mov	r4,r18
  d01850:	0d023780 	call	d02378 <__addsf3>
  d01854:	100b883a 	mov	r5,r2
  d01858:	9809883a 	mov	r4,r19
  d0185c:	1021883a 	mov	r16,r2
  d01860:	0d023780 	call	d02378 <__addsf3>
  d01864:	1009883a 	mov	r4,r2
  d01868:	980b883a 	mov	r5,r19
  d0186c:	1025883a 	mov	r18,r2
  d01870:	0d023080 	call	d02308 <__subsf3>
  d01874:	100b883a 	mov	r5,r2
  d01878:	8009883a 	mov	r4,r16
  d0187c:	0d023080 	call	d02308 <__subsf3>
  d01880:	9009883a 	mov	r4,r18
  d01884:	900b883a 	mov	r5,r18
  d01888:	1027883a 	mov	r19,r2
  d0188c:	0d023dc0 	call	d023dc <__mulsf3>
  d01890:	1009883a 	mov	r4,r2
  d01894:	014cccb4 	movhi	r5,13106
  d01898:	296ed304 	addi	r5,r5,-17588
  d0189c:	1021883a 	mov	r16,r2
  d018a0:	0d023dc0 	call	d023dc <__mulsf3>
  d018a4:	1009883a 	mov	r4,r2
  d018a8:	014d77b4 	movhi	r5,13790
  d018ac:	297a8384 	addi	r5,r5,-5618
  d018b0:	0d023080 	call	d02308 <__subsf3>
  d018b4:	100b883a 	mov	r5,r2
  d018b8:	8009883a 	mov	r4,r16
  d018bc:	0d023dc0 	call	d023dc <__mulsf3>
  d018c0:	1009883a 	mov	r4,r2
  d018c4:	014e22f4 	movhi	r5,14475
  d018c8:	296cd544 	addi	r5,r5,-19627
  d018cc:	0d023780 	call	d02378 <__addsf3>
  d018d0:	100b883a 	mov	r5,r2
  d018d4:	8009883a 	mov	r4,r16
  d018d8:	0d023dc0 	call	d023dc <__mulsf3>
  d018dc:	1009883a 	mov	r4,r2
  d018e0:	014ecdb4 	movhi	r5,15158
  d018e4:	2942d844 	addi	r5,r5,2913
  d018e8:	0d023080 	call	d02308 <__subsf3>
  d018ec:	100b883a 	mov	r5,r2
  d018f0:	8009883a 	mov	r4,r16
  d018f4:	0d023dc0 	call	d023dc <__mulsf3>
  d018f8:	1009883a 	mov	r4,r2
  d018fc:	014f8af4 	movhi	r5,15915
  d01900:	296aaac4 	addi	r5,r5,-21845
  d01904:	0d023780 	call	d02378 <__addsf3>
  d01908:	100b883a 	mov	r5,r2
  d0190c:	8009883a 	mov	r4,r16
  d01910:	0d023dc0 	call	d023dc <__mulsf3>
  d01914:	100b883a 	mov	r5,r2
  d01918:	9009883a 	mov	r4,r18
  d0191c:	0d023080 	call	d02308 <__subsf3>
  d01920:	1021883a 	mov	r16,r2
  d01924:	9009883a 	mov	r4,r18
  d01928:	100b883a 	mov	r5,r2
  d0192c:	0d023dc0 	call	d023dc <__mulsf3>
  d01930:	8009883a 	mov	r4,r16
  d01934:	01500034 	movhi	r5,16384
  d01938:	1023883a 	mov	r17,r2
  d0193c:	0d023080 	call	d02308 <__subsf3>
  d01940:	100b883a 	mov	r5,r2
  d01944:	8809883a 	mov	r4,r17
  d01948:	0d025bc0 	call	d025bc <__divsf3>
  d0194c:	9009883a 	mov	r4,r18
  d01950:	980b883a 	mov	r5,r19
  d01954:	1021883a 	mov	r16,r2
  d01958:	0d023dc0 	call	d023dc <__mulsf3>
  d0195c:	100b883a 	mov	r5,r2
  d01960:	9809883a 	mov	r4,r19
  d01964:	0d023780 	call	d02378 <__addsf3>
  d01968:	100b883a 	mov	r5,r2
  d0196c:	8009883a 	mov	r4,r16
  d01970:	0d023080 	call	d02308 <__subsf3>
  d01974:	1009883a 	mov	r4,r2
  d01978:	900b883a 	mov	r5,r18
  d0197c:	0d023080 	call	d02308 <__subsf3>
  d01980:	100b883a 	mov	r5,r2
  d01984:	010fe034 	movhi	r4,16256
  d01988:	0d023080 	call	d02308 <__subsf3>
  d0198c:	a087883a 	add	r3,r20,r2
  d01990:	1009883a 	mov	r4,r2
  d01994:	1805d5fa 	srai	r2,r3,23
  d01998:	0080920e 	bge	zero,r2,d01be4 <__ieee754_powf+0xb08>
  d0199c:	1805883a 	mov	r2,r3
  d019a0:	1009883a 	mov	r4,r2
  d019a4:	b80b883a 	mov	r5,r23
  d019a8:	0d023dc0 	call	d023dc <__mulsf3>
  d019ac:	1039883a 	mov	fp,r2
  d019b0:	003e1306 	br	d01200 <__ieee754_powf+0x124>
  d019b4:	00bfe034 	movhi	r2,65408
  d019b8:	213fe084 	addi	r4,r4,-126
  d019bc:	80a1883a 	add	r16,r16,r2
  d019c0:	d9000015 	stw	r4,0(sp)
  d019c4:	00c00134 	movhi	r3,4
  d019c8:	0029883a 	mov	r20,zero
  d019cc:	d8c00115 	stw	r3,4(sp)
  d019d0:	003e8906 	br	d013f8 <__ieee754_powf+0x31c>
  d019d4:	05cfe034 	movhi	r23,16256
  d019d8:	003f5e06 	br	d01754 <__ieee754_powf+0x678>
  d019dc:	8009883a 	mov	r4,r16
  d019e0:	014cce74 	movhi	r5,13113
  d019e4:	296a8f04 	addi	r5,r5,-21956
  d019e8:	0d023780 	call	d02378 <__addsf3>
  d019ec:	8809883a 	mov	r4,r17
  d019f0:	980b883a 	mov	r5,r19
  d019f4:	1021883a 	mov	r16,r2
  d019f8:	0d023080 	call	d02308 <__subsf3>
  d019fc:	100b883a 	mov	r5,r2
  d01a00:	8009883a 	mov	r4,r16
  d01a04:	0d027a80 	call	d027a8 <__gtsf2>
  d01a08:	00801f0e 	bge	zero,r2,d01a88 <__ieee754_powf+0x9ac>
  d01a0c:	041c52b4 	movhi	r16,29002
  d01a10:	843cb284 	addi	r16,r16,-3382
  d01a14:	b809883a 	mov	r4,r23
  d01a18:	800b883a 	mov	r5,r16
  d01a1c:	0d023dc0 	call	d023dc <__mulsf3>
  d01a20:	1009883a 	mov	r4,r2
  d01a24:	800b883a 	mov	r5,r16
  d01a28:	0d023dc0 	call	d023dc <__mulsf3>
  d01a2c:	1039883a 	mov	fp,r2
  d01a30:	003df306 	br	d01200 <__ieee754_powf+0x124>
  d01a34:	0152e034 	movhi	r5,19328
  d01a38:	0d023dc0 	call	d023dc <__mulsf3>
  d01a3c:	1023883a 	mov	r17,r2
  d01a40:	013ffa04 	movi	r4,-24
  d01a44:	003e5b06 	br	d013b4 <__ieee754_powf+0x2d8>
  d01a48:	008fe034 	movhi	r2,16256
  d01a4c:	108001c4 	addi	r2,r2,7
  d01a50:	14402c0e 	bge	r2,r17,d01b04 <__ieee754_powf+0xa28>
  d01a54:	04be4d16 	blt	zero,r18,d0138c <__ieee754_powf+0x2b0>
  d01a58:	0039883a 	mov	fp,zero
  d01a5c:	003de806 	br	d01200 <__ieee754_powf+0x124>
  d01a60:	0090c5b4 	movhi	r2,17174
  d01a64:	14802416 	blt	r2,r18,d01af8 <__ieee754_powf+0xa1c>
  d01a68:	90bf5d1e 	bne	r18,r2,d017e0 <__ieee754_powf+0x704>
  d01a6c:	8809883a 	mov	r4,r17
  d01a70:	980b883a 	mov	r5,r19
  d01a74:	0d023080 	call	d02308 <__subsf3>
  d01a78:	100b883a 	mov	r5,r2
  d01a7c:	8009883a 	mov	r4,r16
  d01a80:	0d028980 	call	d02898 <__lesf2>
  d01a84:	00801c0e 	bge	zero,r2,d01af8 <__ieee754_powf+0xa1c>
  d01a88:	9005d5fa 	srai	r2,r18,23
  d01a8c:	01002034 	movhi	r4,128
  d01a90:	01402034 	movhi	r5,128
  d01a94:	297fffc4 	addi	r5,r5,-1
  d01a98:	10bfe084 	addi	r2,r2,-126
  d01a9c:	2089d83a 	sra	r4,r4,r2
  d01aa0:	008005c4 	movi	r2,23
  d01aa4:	a109883a 	add	r4,r20,r4
  d01aa8:	2006d5fa 	srli	r3,r4,23
  d01aac:	214c703a 	and	r6,r4,r5
  d01ab0:	31802034 	orhi	r6,r6,128
  d01ab4:	18c03fcc 	andi	r3,r3,255
  d01ab8:	18ffe044 	addi	r3,r3,-127
  d01abc:	28cbd83a 	sra	r5,r5,r3
  d01ac0:	10c5c83a 	sub	r2,r2,r3
  d01ac4:	30add83a 	sra	r22,r6,r2
  d01ac8:	014a303a 	nor	r5,zero,r5
  d01acc:	214a703a 	and	r5,r4,r5
  d01ad0:	a0004216 	blt	r20,zero,d01bdc <__ieee754_powf+0xb00>
  d01ad4:	a809883a 	mov	r4,r21
  d01ad8:	0d023080 	call	d02308 <__subsf3>
  d01adc:	100b883a 	mov	r5,r2
  d01ae0:	e009883a 	mov	r4,fp
  d01ae4:	b02895fa 	slli	r20,r22,23
  d01ae8:	102b883a 	mov	r21,r2
  d01aec:	0d023780 	call	d02378 <__addsf3>
  d01af0:	1007883a 	mov	r3,r2
  d01af4:	003f3e06 	br	d017f0 <__ieee754_powf+0x714>
  d01af8:	040368b4 	movhi	r16,3490
  d01afc:	84109804 	addi	r16,r16,16992
  d01b00:	003fc406 	br	d01a14 <__ieee754_powf+0x938>
  d01b04:	0d023080 	call	d02308 <__subsf3>
  d01b08:	1021883a 	mov	r16,r2
  d01b0c:	1009883a 	mov	r4,r2
  d01b10:	014fee74 	movhi	r5,16313
  d01b14:	296a8004 	addi	r5,r5,-22016
  d01b18:	0d023dc0 	call	d023dc <__mulsf3>
  d01b1c:	8009883a 	mov	r4,r16
  d01b20:	014dbb74 	movhi	r5,14061
  d01b24:	29695c04 	addi	r5,r5,-23184
  d01b28:	1023883a 	mov	r17,r2
  d01b2c:	0d023dc0 	call	d023dc <__mulsf3>
  d01b30:	8009883a 	mov	r4,r16
  d01b34:	800b883a 	mov	r5,r16
  d01b38:	1025883a 	mov	r18,r2
  d01b3c:	0d023dc0 	call	d023dc <__mulsf3>
  d01b40:	8009883a 	mov	r4,r16
  d01b44:	016fa034 	movhi	r5,48768
  d01b48:	1027883a 	mov	r19,r2
  d01b4c:	0d023dc0 	call	d023dc <__mulsf3>
  d01b50:	1009883a 	mov	r4,r2
  d01b54:	014faaf4 	movhi	r5,16043
  d01b58:	296aaac4 	addi	r5,r5,-21845
  d01b5c:	0d023780 	call	d02378 <__addsf3>
  d01b60:	100b883a 	mov	r5,r2
  d01b64:	8009883a 	mov	r4,r16
  d01b68:	0d023dc0 	call	d023dc <__mulsf3>
  d01b6c:	100b883a 	mov	r5,r2
  d01b70:	010fc034 	movhi	r4,16128
  d01b74:	0d023080 	call	d02308 <__subsf3>
  d01b78:	100b883a 	mov	r5,r2
  d01b7c:	9809883a 	mov	r4,r19
  d01b80:	0d023dc0 	call	d023dc <__mulsf3>
  d01b84:	1009883a 	mov	r4,r2
  d01b88:	016fee74 	movhi	r5,49081
  d01b8c:	296a8ec4 	addi	r5,r5,-21957
  d01b90:	0d023dc0 	call	d023dc <__mulsf3>
  d01b94:	100b883a 	mov	r5,r2
  d01b98:	9009883a 	mov	r4,r18
  d01b9c:	0d023780 	call	d02378 <__addsf3>
  d01ba0:	100b883a 	mov	r5,r2
  d01ba4:	8809883a 	mov	r4,r17
  d01ba8:	1021883a 	mov	r16,r2
  d01bac:	0d023780 	call	d02378 <__addsf3>
  d01bb0:	00fc0004 	movi	r3,-4096
  d01bb4:	10c4703a 	and	r2,r2,r3
  d01bb8:	1009883a 	mov	r4,r2
  d01bbc:	880b883a 	mov	r5,r17
  d01bc0:	1027883a 	mov	r19,r2
  d01bc4:	0d023080 	call	d02308 <__subsf3>
  d01bc8:	100b883a 	mov	r5,r2
  d01bcc:	8009883a 	mov	r4,r16
  d01bd0:	0d023080 	call	d02308 <__subsf3>
  d01bd4:	1021883a 	mov	r16,r2
  d01bd8:	003ed906 	br	d01740 <__ieee754_powf+0x664>
  d01bdc:	05adc83a 	sub	r22,zero,r22
  d01be0:	003fbc06 	br	d01ad4 <__ieee754_powf+0x9f8>
  d01be4:	b00b883a 	mov	r5,r22
  d01be8:	0d01fc00 	call	d01fc0 <scalbnf>
  d01bec:	003f6c06 	br	d019a0 <__ieee754_powf+0x8c4>

00d01bf0 <__ieee754_sqrtf>:
  d01bf0:	00a00034 	movhi	r2,32768
  d01bf4:	10bfffc4 	addi	r2,r2,-1
  d01bf8:	defffe04 	addi	sp,sp,-8
  d01bfc:	208c703a 	and	r6,r4,r2
  d01c00:	00dfe034 	movhi	r3,32640
  d01c04:	18ffffc4 	addi	r3,r3,-1
  d01c08:	dc000015 	stw	r16,0(sp)
  d01c0c:	dfc00115 	stw	ra,4(sp)
  d01c10:	2021883a 	mov	r16,r4
  d01c14:	200b883a 	mov	r5,r4
  d01c18:	19800a2e 	bgeu	r3,r6,d01c44 <__ieee754_sqrtf+0x54>
  d01c1c:	0d023dc0 	call	d023dc <__mulsf3>
  d01c20:	100b883a 	mov	r5,r2
  d01c24:	8009883a 	mov	r4,r16
  d01c28:	0d023780 	call	d02378 <__addsf3>
  d01c2c:	1021883a 	mov	r16,r2
  d01c30:	8005883a 	mov	r2,r16
  d01c34:	dfc00117 	ldw	ra,4(sp)
  d01c38:	dc000017 	ldw	r16,0(sp)
  d01c3c:	dec00204 	addi	sp,sp,8
  d01c40:	f800283a 	ret
  d01c44:	303ffa26 	beq	r6,zero,d01c30 <__ieee754_sqrtf+0x40>
  d01c48:	20003b16 	blt	r4,zero,d01d38 <__ieee754_sqrtf+0x148>
  d01c4c:	00802034 	movhi	r2,128
  d01c50:	10bfffc4 	addi	r2,r2,-1
  d01c54:	2007d5fa 	srai	r3,r4,23
  d01c58:	11800936 	bltu	r2,r6,d01c80 <__ieee754_sqrtf+0x90>
  d01c5c:	2080202c 	andhi	r2,r4,128
  d01c60:	10003c1e 	bne	r2,zero,d01d54 <__ieee754_sqrtf+0x164>
  d01c64:	0009883a 	mov	r4,zero
  d01c68:	294b883a 	add	r5,r5,r5
  d01c6c:	2880202c 	andhi	r2,r5,128
  d01c70:	21000044 	addi	r4,r4,1
  d01c74:	103ffc26 	beq	r2,zero,d01c68 <__ieee754_sqrtf+0x78>
  d01c78:	1905c83a 	sub	r2,r3,r4
  d01c7c:	10c00044 	addi	r3,r2,1
  d01c80:	1a7fe044 	addi	r9,r3,-127
  d01c84:	48c0004c 	andi	r3,r9,1
  d01c88:	00802034 	movhi	r2,128
  d01c8c:	10bfffc4 	addi	r2,r2,-1
  d01c90:	2884703a 	and	r2,r5,r2
  d01c94:	1807003a 	cmpeq	r3,r3,zero
  d01c98:	10802034 	orhi	r2,r2,128
  d01c9c:	18002426 	beq	r3,zero,d01d30 <__ieee754_sqrtf+0x140>
  d01ca0:	1085883a 	add	r2,r2,r2
  d01ca4:	01404034 	movhi	r5,256
  d01ca8:	000f883a 	mov	r7,zero
  d01cac:	0007883a 	mov	r3,zero
  d01cb0:	000d883a 	mov	r6,zero
  d01cb4:	02000644 	movi	r8,25
  d01cb8:	3949883a 	add	r4,r7,r5
  d01cbc:	31800044 	addi	r6,r6,1
  d01cc0:	11000316 	blt	r2,r4,d01cd0 <__ieee754_sqrtf+0xe0>
  d01cc4:	1105c83a 	sub	r2,r2,r4
  d01cc8:	1947883a 	add	r3,r3,r5
  d01ccc:	214f883a 	add	r7,r4,r5
  d01cd0:	1085883a 	add	r2,r2,r2
  d01cd4:	280ad07a 	srli	r5,r5,1
  d01cd8:	323ff71e 	bne	r6,r8,d01cb8 <__ieee754_sqrtf+0xc8>
  d01cdc:	10000b1e 	bne	r2,zero,d01d0c <__ieee754_sqrtf+0x11c>
  d01ce0:	4805d07a 	srai	r2,r9,1
  d01ce4:	1807d07a 	srai	r3,r3,1
  d01ce8:	010fc034 	movhi	r4,16128
  d01cec:	100495fa 	slli	r2,r2,23
  d01cf0:	1907883a 	add	r3,r3,r4
  d01cf4:	18a1883a 	add	r16,r3,r2
  d01cf8:	8005883a 	mov	r2,r16
  d01cfc:	dfc00117 	ldw	ra,4(sp)
  d01d00:	dc000017 	ldw	r16,0(sp)
  d01d04:	dec00204 	addi	sp,sp,8
  d01d08:	f800283a 	ret
  d01d0c:	1880004c 	andi	r2,r3,1
  d01d10:	1887883a 	add	r3,r3,r2
  d01d14:	4805d07a 	srai	r2,r9,1
  d01d18:	1807d07a 	srai	r3,r3,1
  d01d1c:	010fc034 	movhi	r4,16128
  d01d20:	100495fa 	slli	r2,r2,23
  d01d24:	1907883a 	add	r3,r3,r4
  d01d28:	18a1883a 	add	r16,r3,r2
  d01d2c:	003ff206 	br	d01cf8 <__ieee754_sqrtf+0x108>
  d01d30:	1085883a 	add	r2,r2,r2
  d01d34:	003fda06 	br	d01ca0 <__ieee754_sqrtf+0xb0>
  d01d38:	200b883a 	mov	r5,r4
  d01d3c:	0d023080 	call	d02308 <__subsf3>
  d01d40:	1009883a 	mov	r4,r2
  d01d44:	100b883a 	mov	r5,r2
  d01d48:	0d025bc0 	call	d025bc <__divsf3>
  d01d4c:	1021883a 	mov	r16,r2
  d01d50:	003fb706 	br	d01c30 <__ieee754_sqrtf+0x40>
  d01d54:	0009883a 	mov	r4,zero
  d01d58:	003fc706 	br	d01c78 <__ieee754_sqrtf+0x88>

00d01d5c <matherr>:
  d01d5c:	0005883a 	mov	r2,zero
  d01d60:	f800283a 	ret

00d01d64 <rint>:
  d01d64:	2015883a 	mov	r10,r4
  d01d68:	2809d53a 	srai	r4,r5,20
  d01d6c:	defff904 	addi	sp,sp,-28
  d01d70:	034004c4 	movi	r13,19
  d01d74:	2101ffcc 	andi	r4,r4,2047
  d01d78:	227f0044 	addi	r9,r4,-1023
  d01d7c:	dc800415 	stw	r18,16(sp)
  d01d80:	dfc00615 	stw	ra,24(sp)
  d01d84:	dcc00515 	stw	r19,20(sp)
  d01d88:	dc400315 	stw	r17,12(sp)
  d01d8c:	dc000215 	stw	r16,8(sp)
  d01d90:	2817883a 	mov	r11,r5
  d01d94:	500d883a 	mov	r6,r10
  d01d98:	2824d7fa 	srli	r18,r5,31
  d01d9c:	6a403016 	blt	r13,r9,d01e60 <rint+0xfc>
  d01da0:	48004916 	blt	r9,zero,d01ec8 <rint+0x164>
  d01da4:	00800434 	movhi	r2,16
  d01da8:	10bfffc4 	addi	r2,r2,-1
  d01dac:	1247d83a 	sra	r3,r2,r9
  d01db0:	2809883a 	mov	r4,r5
  d01db4:	1944703a 	and	r2,r3,r5
  d01db8:	5084b03a 	or	r2,r10,r2
  d01dbc:	10001f26 	beq	r2,zero,d01e3c <rint+0xd8>
  d01dc0:	180ad07a 	srli	r5,r3,1
  d01dc4:	5944703a 	and	r2,r11,r5
  d01dc8:	5084b03a 	or	r2,r10,r2
  d01dcc:	10000626 	beq	r2,zero,d01de8 <rint+0x84>
  d01dd0:	4b406626 	beq	r9,r13,d01f6c <rint+0x208>
  d01dd4:	00c000b4 	movhi	r3,2
  d01dd8:	1a47d83a 	sra	r3,r3,r9
  d01ddc:	0144303a 	nor	r2,zero,r5
  d01de0:	5884703a 	and	r2,r11,r2
  d01de4:	10c8b03a 	or	r4,r2,r3
  d01de8:	900690fa 	slli	r3,r18,3
  d01dec:	00803474 	movhi	r2,209
  d01df0:	1083fa04 	addi	r2,r2,4072
  d01df4:	200f883a 	mov	r7,r4
  d01df8:	1887883a 	add	r3,r3,r2
  d01dfc:	1c000017 	ldw	r16,0(r3)
  d01e00:	1c400117 	ldw	r17,4(r3)
  d01e04:	8009883a 	mov	r4,r16
  d01e08:	880b883a 	mov	r5,r17
  d01e0c:	0d02e8c0 	call	d02e8c <__adddf3>
  d01e10:	d8800015 	stw	r2,0(sp)
  d01e14:	d8c00115 	stw	r3,4(sp)
  d01e18:	d8800017 	ldw	r2,0(sp)
  d01e1c:	d8c00117 	ldw	r3,4(sp)
  d01e20:	880f883a 	mov	r7,r17
  d01e24:	800d883a 	mov	r6,r16
  d01e28:	180b883a 	mov	r5,r3
  d01e2c:	1009883a 	mov	r4,r2
  d01e30:	0d02e0c0 	call	d02e0c <__subdf3>
  d01e34:	1015883a 	mov	r10,r2
  d01e38:	1817883a 	mov	r11,r3
  d01e3c:	5005883a 	mov	r2,r10
  d01e40:	5807883a 	mov	r3,r11
  d01e44:	dfc00617 	ldw	ra,24(sp)
  d01e48:	dcc00517 	ldw	r19,20(sp)
  d01e4c:	dc800417 	ldw	r18,16(sp)
  d01e50:	dc400317 	ldw	r17,12(sp)
  d01e54:	dc000217 	ldw	r16,8(sp)
  d01e58:	dec00704 	addi	sp,sp,28
  d01e5c:	f800283a 	ret
  d01e60:	00800cc4 	movi	r2,51
  d01e64:	12400f16 	blt	r2,r9,d01ea4 <rint+0x140>
  d01e68:	213efb44 	addi	r4,r4,-1043
  d01e6c:	00bfffc4 	movi	r2,-1
  d01e70:	1104d83a 	srl	r2,r2,r4
  d01e74:	5086703a 	and	r3,r10,r2
  d01e78:	183ff026 	beq	r3,zero,d01e3c <rint+0xd8>
  d01e7c:	100ad07a 	srli	r5,r2,1
  d01e80:	5144703a 	and	r2,r10,r5
  d01e84:	10000526 	beq	r2,zero,d01e9c <rint+0x138>
  d01e88:	00d00034 	movhi	r3,16384
  d01e8c:	1907d83a 	sra	r3,r3,r4
  d01e90:	0144303a 	nor	r2,zero,r5
  d01e94:	5084703a 	and	r2,r10,r2
  d01e98:	10ccb03a 	or	r6,r2,r3
  d01e9c:	5809883a 	mov	r4,r11
  d01ea0:	003fd106 	br	d01de8 <rint+0x84>
  d01ea4:	00810004 	movi	r2,1024
  d01ea8:	48bfe41e 	bne	r9,r2,d01e3c <rint+0xd8>
  d01eac:	5009883a 	mov	r4,r10
  d01eb0:	500d883a 	mov	r6,r10
  d01eb4:	280f883a 	mov	r7,r5
  d01eb8:	0d02e8c0 	call	d02e8c <__adddf3>
  d01ebc:	1015883a 	mov	r10,r2
  d01ec0:	1817883a 	mov	r11,r3
  d01ec4:	003fdd06 	br	d01e3c <rint+0xd8>
  d01ec8:	04e00034 	movhi	r19,32768
  d01ecc:	9cffffc4 	addi	r19,r19,-1
  d01ed0:	2cc4703a 	and	r2,r5,r19
  d01ed4:	5084b03a 	or	r2,r10,r2
  d01ed8:	103fd826 	beq	r2,zero,d01e3c <rint+0xd8>
  d01edc:	00c00434 	movhi	r3,16
  d01ee0:	18ffffc4 	addi	r3,r3,-1
  d01ee4:	28c6703a 	and	r3,r5,r3
  d01ee8:	50c6b03a 	or	r3,r10,r3
  d01eec:	00cdc83a 	sub	r6,zero,r3
  d01ef0:	900a90fa 	slli	r5,r18,3
  d01ef4:	1986b03a 	or	r3,r3,r6
  d01ef8:	01003474 	movhi	r4,209
  d01efc:	2103fa04 	addi	r4,r4,4072
  d01f00:	1806d33a 	srli	r3,r3,12
  d01f04:	290b883a 	add	r5,r5,r4
  d01f08:	2c000017 	ldw	r16,0(r5)
  d01f0c:	2c400117 	ldw	r17,4(r5)
  d01f10:	593fffac 	andhi	r4,r11,65534
  d01f14:	18c0022c 	andhi	r3,r3,8
  d01f18:	1906b03a 	or	r3,r3,r4
  d01f1c:	500d883a 	mov	r6,r10
  d01f20:	180f883a 	mov	r7,r3
  d01f24:	8009883a 	mov	r4,r16
  d01f28:	880b883a 	mov	r5,r17
  d01f2c:	0d02e8c0 	call	d02e8c <__adddf3>
  d01f30:	d8800015 	stw	r2,0(sp)
  d01f34:	d8c00115 	stw	r3,4(sp)
  d01f38:	d8800017 	ldw	r2,0(sp)
  d01f3c:	d8c00117 	ldw	r3,4(sp)
  d01f40:	880f883a 	mov	r7,r17
  d01f44:	800d883a 	mov	r6,r16
  d01f48:	180b883a 	mov	r5,r3
  d01f4c:	1009883a 	mov	r4,r2
  d01f50:	0d02e0c0 	call	d02e0c <__subdf3>
  d01f54:	901297fa 	slli	r9,r18,31
  d01f58:	98d0703a 	and	r8,r19,r3
  d01f5c:	1015883a 	mov	r10,r2
  d01f60:	4250b03a 	or	r8,r8,r9
  d01f64:	4017883a 	mov	r11,r8
  d01f68:	003fb406 	br	d01e3c <rint+0xd8>
  d01f6c:	01900034 	movhi	r6,16384
  d01f70:	003f9d06 	br	d01de8 <rint+0x84>

00d01f74 <fabsf>:
  d01f74:	00a00034 	movhi	r2,32768
  d01f78:	10bfffc4 	addi	r2,r2,-1
  d01f7c:	2084703a 	and	r2,r4,r2
  d01f80:	f800283a 	ret

00d01f84 <finitef>:
  d01f84:	00a00034 	movhi	r2,32768
  d01f88:	10bfffc4 	addi	r2,r2,-1
  d01f8c:	2088703a 	and	r4,r4,r2
  d01f90:	009fe034 	movhi	r2,32640
  d01f94:	10bfffc4 	addi	r2,r2,-1
  d01f98:	1104403a 	cmpge	r2,r2,r4
  d01f9c:	f800283a 	ret

00d01fa0 <isnanf>:
  d01fa0:	00a00034 	movhi	r2,32768
  d01fa4:	10bfffc4 	addi	r2,r2,-1
  d01fa8:	2088703a 	and	r4,r4,r2
  d01fac:	009fe034 	movhi	r2,32640
  d01fb0:	1104803a 	cmplt	r2,r2,r4
  d01fb4:	f800283a 	ret

00d01fb8 <nanf>:
  d01fb8:	009ff034 	movhi	r2,32704
  d01fbc:	f800283a 	ret

00d01fc0 <scalbnf>:
  d01fc0:	00a00034 	movhi	r2,32768
  d01fc4:	10bfffc4 	addi	r2,r2,-1
  d01fc8:	defffe04 	addi	sp,sp,-8
  d01fcc:	2086703a 	and	r3,r4,r2
  d01fd0:	dc000015 	stw	r16,0(sp)
  d01fd4:	dfc00115 	stw	ra,4(sp)
  d01fd8:	200d883a 	mov	r6,r4
  d01fdc:	200f883a 	mov	r7,r4
  d01fe0:	2821883a 	mov	r16,r5
  d01fe4:	18001a26 	beq	r3,zero,d02050 <scalbnf+0x90>
  d01fe8:	009fe034 	movhi	r2,32640
  d01fec:	10bfffc4 	addi	r2,r2,-1
  d01ff0:	10c01c36 	bltu	r2,r3,d02064 <scalbnf+0xa4>
  d01ff4:	00802034 	movhi	r2,128
  d01ff8:	10bfffc4 	addi	r2,r2,-1
  d01ffc:	10c02136 	bltu	r2,r3,d02084 <scalbnf+0xc4>
  d02000:	01530034 	movhi	r5,19456
  d02004:	0d023dc0 	call	d023dc <__mulsf3>
  d02008:	1009883a 	mov	r4,r2
  d0200c:	100d883a 	mov	r6,r2
  d02010:	00bffff4 	movhi	r2,65535
  d02014:	108f2c04 	addi	r2,r2,15536
  d02018:	80802616 	blt	r16,r2,d020b4 <scalbnf+0xf4>
  d0201c:	209fe02c 	andhi	r2,r4,32640
  d02020:	1005d5fa 	srai	r2,r2,23
  d02024:	200f883a 	mov	r7,r4
  d02028:	10bff9c4 	addi	r2,r2,-25
  d0202c:	1407883a 	add	r3,r2,r16
  d02030:	00803f84 	movi	r2,254
  d02034:	10c01516 	blt	r2,r3,d0208c <scalbnf+0xcc>
  d02038:	00c0230e 	bge	zero,r3,d020c8 <scalbnf+0x108>
  d0203c:	180695fa 	slli	r3,r3,23
  d02040:	00a02034 	movhi	r2,32896
  d02044:	10bfffc4 	addi	r2,r2,-1
  d02048:	3884703a 	and	r2,r7,r2
  d0204c:	10ccb03a 	or	r6,r2,r3
  d02050:	3005883a 	mov	r2,r6
  d02054:	dfc00117 	ldw	ra,4(sp)
  d02058:	dc000017 	ldw	r16,0(sp)
  d0205c:	dec00204 	addi	sp,sp,8
  d02060:	f800283a 	ret
  d02064:	200b883a 	mov	r5,r4
  d02068:	0d023780 	call	d02378 <__addsf3>
  d0206c:	100d883a 	mov	r6,r2
  d02070:	3005883a 	mov	r2,r6
  d02074:	dfc00117 	ldw	ra,4(sp)
  d02078:	dc000017 	ldw	r16,0(sp)
  d0207c:	dec00204 	addi	sp,sp,8
  d02080:	f800283a 	ret
  d02084:	1804d5fa 	srli	r2,r3,23
  d02088:	003fe806 	br	d0202c <scalbnf+0x6c>
  d0208c:	041c52b4 	movhi	r16,29002
  d02090:	843cb284 	addi	r16,r16,-3382
  d02094:	300b883a 	mov	r5,r6
  d02098:	8009883a 	mov	r4,r16
  d0209c:	0d0210c0 	call	d0210c <copysignf>
  d020a0:	1009883a 	mov	r4,r2
  d020a4:	800b883a 	mov	r5,r16
  d020a8:	0d023dc0 	call	d023dc <__mulsf3>
  d020ac:	100d883a 	mov	r6,r2
  d020b0:	003fe706 	br	d02050 <scalbnf+0x90>
  d020b4:	014368b4 	movhi	r5,3490
  d020b8:	29509804 	addi	r5,r5,16992
  d020bc:	0d023dc0 	call	d023dc <__mulsf3>
  d020c0:	100d883a 	mov	r6,r2
  d020c4:	003fe206 	br	d02050 <scalbnf+0x90>
  d020c8:	00bffa84 	movi	r2,-22
  d020cc:	1880050e 	bge	r3,r2,d020e4 <scalbnf+0x124>
  d020d0:	00b0d414 	movui	r2,50000
  d020d4:	143fed16 	blt	r2,r16,d0208c <scalbnf+0xcc>
  d020d8:	040368b4 	movhi	r16,3490
  d020dc:	84109804 	addi	r16,r16,16992
  d020e0:	003fec06 	br	d02094 <scalbnf+0xd4>
  d020e4:	18800644 	addi	r2,r3,25
  d020e8:	100495fa 	slli	r2,r2,23
  d020ec:	01202034 	movhi	r4,32896
  d020f0:	213fffc4 	addi	r4,r4,-1
  d020f4:	3908703a 	and	r4,r7,r4
  d020f8:	2088b03a 	or	r4,r4,r2
  d020fc:	014cc034 	movhi	r5,13056
  d02100:	0d023dc0 	call	d023dc <__mulsf3>
  d02104:	100d883a 	mov	r6,r2
  d02108:	003fd106 	br	d02050 <scalbnf+0x90>

00d0210c <copysignf>:
  d0210c:	00a00034 	movhi	r2,32768
  d02110:	10bfffc4 	addi	r2,r2,-1
  d02114:	2088703a 	and	r4,r4,r2
  d02118:	28a0002c 	andhi	r2,r5,32768
  d0211c:	2084b03a 	or	r2,r4,r2
  d02120:	f800283a 	ret

00d02124 <_fpadd_parts>:
  d02124:	21c00017 	ldw	r7,0(r4)
  d02128:	02000044 	movi	r8,1
  d0212c:	41c0332e 	bgeu	r8,r7,d021fc <_fpadd_parts+0xd8>
  d02130:	28800017 	ldw	r2,0(r5)
  d02134:	4080462e 	bgeu	r8,r2,d02250 <_fpadd_parts+0x12c>
  d02138:	00c00104 	movi	r3,4
  d0213c:	38c06b26 	beq	r7,r3,d022ec <_fpadd_parts+0x1c8>
  d02140:	10c04326 	beq	r2,r3,d02250 <_fpadd_parts+0x12c>
  d02144:	00c00084 	movi	r3,2
  d02148:	10c02e26 	beq	r2,r3,d02204 <_fpadd_parts+0xe0>
  d0214c:	38c04026 	beq	r7,r3,d02250 <_fpadd_parts+0x12c>
  d02150:	22800217 	ldw	r10,8(r4)
  d02154:	28c00217 	ldw	r3,8(r5)
  d02158:	23000317 	ldw	r12,12(r4)
  d0215c:	2a400317 	ldw	r9,12(r5)
  d02160:	50cfc83a 	sub	r7,r10,r3
  d02164:	3817883a 	mov	r11,r7
  d02168:	38004f16 	blt	r7,zero,d022a8 <_fpadd_parts+0x184>
  d0216c:	008007c4 	movi	r2,31
  d02170:	11c03316 	blt	r2,r7,d02240 <_fpadd_parts+0x11c>
  d02174:	02c0540e 	bge	zero,r11,d022c8 <_fpadd_parts+0x1a4>
  d02178:	41c4983a 	sll	r2,r8,r7
  d0217c:	49c6d83a 	srl	r3,r9,r7
  d02180:	10bfffc4 	addi	r2,r2,-1
  d02184:	4884703a 	and	r2,r9,r2
  d02188:	1004c03a 	cmpne	r2,r2,zero
  d0218c:	1892b03a 	or	r9,r3,r2
  d02190:	20c00117 	ldw	r3,4(r4)
  d02194:	28800117 	ldw	r2,4(r5)
  d02198:	18803c26 	beq	r3,r2,d0228c <_fpadd_parts+0x168>
  d0219c:	18002f26 	beq	r3,zero,d0225c <_fpadd_parts+0x138>
  d021a0:	4b05c83a 	sub	r2,r9,r12
  d021a4:	10004216 	blt	r2,zero,d022b0 <_fpadd_parts+0x18c>
  d021a8:	32800215 	stw	r10,8(r6)
  d021ac:	30800315 	stw	r2,12(r6)
  d021b0:	30000115 	stw	zero,4(r6)
  d021b4:	31000317 	ldw	r4,12(r6)
  d021b8:	01d00034 	movhi	r7,16384
  d021bc:	39ffff84 	addi	r7,r7,-2
  d021c0:	20bfffc4 	addi	r2,r4,-1
  d021c4:	2007883a 	mov	r3,r4
  d021c8:	38800836 	bltu	r7,r2,d021ec <_fpadd_parts+0xc8>
  d021cc:	31400217 	ldw	r5,8(r6)
  d021d0:	18c9883a 	add	r4,r3,r3
  d021d4:	20bfffc4 	addi	r2,r4,-1
  d021d8:	297fffc4 	addi	r5,r5,-1
  d021dc:	2007883a 	mov	r3,r4
  d021e0:	38bffb2e 	bgeu	r7,r2,d021d0 <_fpadd_parts+0xac>
  d021e4:	31400215 	stw	r5,8(r6)
  d021e8:	31000315 	stw	r4,12(r6)
  d021ec:	008000c4 	movi	r2,3
  d021f0:	30800015 	stw	r2,0(r6)
  d021f4:	20001b16 	blt	r4,zero,d02264 <_fpadd_parts+0x140>
  d021f8:	3009883a 	mov	r4,r6
  d021fc:	2005883a 	mov	r2,r4
  d02200:	f800283a 	ret
  d02204:	38fffd1e 	bne	r7,r3,d021fc <_fpadd_parts+0xd8>
  d02208:	31c00015 	stw	r7,0(r6)
  d0220c:	20800117 	ldw	r2,4(r4)
  d02210:	30800115 	stw	r2,4(r6)
  d02214:	20c00217 	ldw	r3,8(r4)
  d02218:	30c00215 	stw	r3,8(r6)
  d0221c:	20800317 	ldw	r2,12(r4)
  d02220:	30800315 	stw	r2,12(r6)
  d02224:	20c00117 	ldw	r3,4(r4)
  d02228:	28800117 	ldw	r2,4(r5)
  d0222c:	3009883a 	mov	r4,r6
  d02230:	1886703a 	and	r3,r3,r2
  d02234:	2005883a 	mov	r2,r4
  d02238:	30c00115 	stw	r3,4(r6)
  d0223c:	f800283a 	ret
  d02240:	1a801716 	blt	r3,r10,d022a0 <_fpadd_parts+0x17c>
  d02244:	1815883a 	mov	r10,r3
  d02248:	0019883a 	mov	r12,zero
  d0224c:	003fd006 	br	d02190 <_fpadd_parts+0x6c>
  d02250:	2809883a 	mov	r4,r5
  d02254:	2005883a 	mov	r2,r4
  d02258:	f800283a 	ret
  d0225c:	6245c83a 	sub	r2,r12,r9
  d02260:	003fd006 	br	d021a4 <_fpadd_parts+0x80>
  d02264:	30800217 	ldw	r2,8(r6)
  d02268:	2006d07a 	srli	r3,r4,1
  d0226c:	2100004c 	andi	r4,r4,1
  d02270:	10800044 	addi	r2,r2,1
  d02274:	1906b03a 	or	r3,r3,r4
  d02278:	3009883a 	mov	r4,r6
  d0227c:	30800215 	stw	r2,8(r6)
  d02280:	2005883a 	mov	r2,r4
  d02284:	30c00315 	stw	r3,12(r6)
  d02288:	f800283a 	ret
  d0228c:	4b09883a 	add	r4,r9,r12
  d02290:	30c00115 	stw	r3,4(r6)
  d02294:	32800215 	stw	r10,8(r6)
  d02298:	31000315 	stw	r4,12(r6)
  d0229c:	003fd306 	br	d021ec <_fpadd_parts+0xc8>
  d022a0:	0013883a 	mov	r9,zero
  d022a4:	003fba06 	br	d02190 <_fpadd_parts+0x6c>
  d022a8:	01cfc83a 	sub	r7,zero,r7
  d022ac:	003faf06 	br	d0216c <_fpadd_parts+0x48>
  d022b0:	0089c83a 	sub	r4,zero,r2
  d022b4:	00800044 	movi	r2,1
  d022b8:	30800115 	stw	r2,4(r6)
  d022bc:	32800215 	stw	r10,8(r6)
  d022c0:	31000315 	stw	r4,12(r6)
  d022c4:	003fbb06 	br	d021b4 <_fpadd_parts+0x90>
  d022c8:	583fb126 	beq	r11,zero,d02190 <_fpadd_parts+0x6c>
  d022cc:	41c4983a 	sll	r2,r8,r7
  d022d0:	61c6d83a 	srl	r3,r12,r7
  d022d4:	51d5883a 	add	r10,r10,r7
  d022d8:	10bfffc4 	addi	r2,r2,-1
  d022dc:	6084703a 	and	r2,r12,r2
  d022e0:	1004c03a 	cmpne	r2,r2,zero
  d022e4:	1898b03a 	or	r12,r3,r2
  d022e8:	003fa906 	br	d02190 <_fpadd_parts+0x6c>
  d022ec:	11ffc31e 	bne	r2,r7,d021fc <_fpadd_parts+0xd8>
  d022f0:	28c00117 	ldw	r3,4(r5)
  d022f4:	20800117 	ldw	r2,4(r4)
  d022f8:	10ffc026 	beq	r2,r3,d021fc <_fpadd_parts+0xd8>
  d022fc:	01003474 	movhi	r4,209
  d02300:	2103fe04 	addi	r4,r4,4088
  d02304:	003fbd06 	br	d021fc <_fpadd_parts+0xd8>

00d02308 <__subsf3>:
  d02308:	deffef04 	addi	sp,sp,-68
  d0230c:	dcc00f15 	stw	r19,60(sp)
  d02310:	dcc00204 	addi	r19,sp,8
  d02314:	dc400e15 	stw	r17,56(sp)
  d02318:	d9000015 	stw	r4,0(sp)
  d0231c:	d9400115 	stw	r5,4(sp)
  d02320:	d809883a 	mov	r4,sp
  d02324:	980b883a 	mov	r5,r19
  d02328:	dc400604 	addi	r17,sp,24
  d0232c:	dfc01015 	stw	ra,64(sp)
  d02330:	0d035040 	call	d03504 <__unpack_f>
  d02334:	d9000104 	addi	r4,sp,4
  d02338:	880b883a 	mov	r5,r17
  d0233c:	0d035040 	call	d03504 <__unpack_f>
  d02340:	d8800717 	ldw	r2,28(sp)
  d02344:	9809883a 	mov	r4,r19
  d02348:	880b883a 	mov	r5,r17
  d0234c:	d9800a04 	addi	r6,sp,40
  d02350:	1080005c 	xori	r2,r2,1
  d02354:	d8800715 	stw	r2,28(sp)
  d02358:	0d021240 	call	d02124 <_fpadd_parts>
  d0235c:	1009883a 	mov	r4,r2
  d02360:	0d033a40 	call	d033a4 <__pack_f>
  d02364:	dfc01017 	ldw	ra,64(sp)
  d02368:	dcc00f17 	ldw	r19,60(sp)
  d0236c:	dc400e17 	ldw	r17,56(sp)
  d02370:	dec01104 	addi	sp,sp,68
  d02374:	f800283a 	ret

00d02378 <__addsf3>:
  d02378:	deffef04 	addi	sp,sp,-68
  d0237c:	dcc00f15 	stw	r19,60(sp)
  d02380:	dcc00204 	addi	r19,sp,8
  d02384:	dc400e15 	stw	r17,56(sp)
  d02388:	d9000015 	stw	r4,0(sp)
  d0238c:	d9400115 	stw	r5,4(sp)
  d02390:	d809883a 	mov	r4,sp
  d02394:	980b883a 	mov	r5,r19
  d02398:	dc400604 	addi	r17,sp,24
  d0239c:	dfc01015 	stw	ra,64(sp)
  d023a0:	0d035040 	call	d03504 <__unpack_f>
  d023a4:	d9000104 	addi	r4,sp,4
  d023a8:	880b883a 	mov	r5,r17
  d023ac:	0d035040 	call	d03504 <__unpack_f>
  d023b0:	d9800a04 	addi	r6,sp,40
  d023b4:	9809883a 	mov	r4,r19
  d023b8:	880b883a 	mov	r5,r17
  d023bc:	0d021240 	call	d02124 <_fpadd_parts>
  d023c0:	1009883a 	mov	r4,r2
  d023c4:	0d033a40 	call	d033a4 <__pack_f>
  d023c8:	dfc01017 	ldw	ra,64(sp)
  d023cc:	dcc00f17 	ldw	r19,60(sp)
  d023d0:	dc400e17 	ldw	r17,56(sp)
  d023d4:	dec01104 	addi	sp,sp,68
  d023d8:	f800283a 	ret

00d023dc <__mulsf3>:
  d023dc:	deffef04 	addi	sp,sp,-68
  d023e0:	dc400f15 	stw	r17,60(sp)
  d023e4:	dc400204 	addi	r17,sp,8
  d023e8:	dc000e15 	stw	r16,56(sp)
  d023ec:	d9000015 	stw	r4,0(sp)
  d023f0:	d9400115 	stw	r5,4(sp)
  d023f4:	d809883a 	mov	r4,sp
  d023f8:	880b883a 	mov	r5,r17
  d023fc:	dc000604 	addi	r16,sp,24
  d02400:	dfc01015 	stw	ra,64(sp)
  d02404:	0d035040 	call	d03504 <__unpack_f>
  d02408:	d9000104 	addi	r4,sp,4
  d0240c:	800b883a 	mov	r5,r16
  d02410:	0d035040 	call	d03504 <__unpack_f>
  d02414:	d9000217 	ldw	r4,8(sp)
  d02418:	00800044 	movi	r2,1
  d0241c:	01400104 	movi	r5,4
  d02420:	1100142e 	bgeu	r2,r4,d02474 <__mulsf3+0x98>
  d02424:	d8c00617 	ldw	r3,24(sp)
  d02428:	10c0052e 	bgeu	r2,r3,d02440 <__mulsf3+0x64>
  d0242c:	21400f26 	beq	r4,r5,d0246c <__mulsf3+0x90>
  d02430:	19405d26 	beq	r3,r5,d025a8 <__mulsf3+0x1cc>
  d02434:	00800084 	movi	r2,2
  d02438:	20800e26 	beq	r4,r2,d02474 <__mulsf3+0x98>
  d0243c:	1880181e 	bne	r3,r2,d024a0 <__mulsf3+0xc4>
  d02440:	d8c00717 	ldw	r3,28(sp)
  d02444:	d8800317 	ldw	r2,12(sp)
  d02448:	8009883a 	mov	r4,r16
  d0244c:	10c4c03a 	cmpne	r2,r2,r3
  d02450:	d8800715 	stw	r2,28(sp)
  d02454:	0d033a40 	call	d033a4 <__pack_f>
  d02458:	dfc01017 	ldw	ra,64(sp)
  d0245c:	dc400f17 	ldw	r17,60(sp)
  d02460:	dc000e17 	ldw	r16,56(sp)
  d02464:	dec01104 	addi	sp,sp,68
  d02468:	f800283a 	ret
  d0246c:	00800084 	movi	r2,2
  d02470:	18804f26 	beq	r3,r2,d025b0 <__mulsf3+0x1d4>
  d02474:	d8800317 	ldw	r2,12(sp)
  d02478:	d8c00717 	ldw	r3,28(sp)
  d0247c:	8809883a 	mov	r4,r17
  d02480:	10c4c03a 	cmpne	r2,r2,r3
  d02484:	d8800315 	stw	r2,12(sp)
  d02488:	0d033a40 	call	d033a4 <__pack_f>
  d0248c:	dfc01017 	ldw	ra,64(sp)
  d02490:	dc400f17 	ldw	r17,60(sp)
  d02494:	dc000e17 	ldw	r16,56(sp)
  d02498:	dec01104 	addi	sp,sp,68
  d0249c:	f800283a 	ret
  d024a0:	d8800517 	ldw	r2,20(sp)
  d024a4:	da000917 	ldw	r8,36(sp)
  d024a8:	0013883a 	mov	r9,zero
  d024ac:	0007883a 	mov	r3,zero
  d024b0:	480f883a 	mov	r7,r9
  d024b4:	180b883a 	mov	r5,r3
  d024b8:	400d883a 	mov	r6,r8
  d024bc:	1009883a 	mov	r4,r2
  d024c0:	0d0328c0 	call	d0328c <__muldi3>
  d024c4:	da800417 	ldw	r10,16(sp)
  d024c8:	d9800817 	ldw	r6,32(sp)
  d024cc:	da400317 	ldw	r9,12(sp)
  d024d0:	52800084 	addi	r10,r10,2
  d024d4:	3295883a 	add	r10,r6,r10
  d024d8:	d9800717 	ldw	r6,28(sp)
  d024dc:	180b883a 	mov	r5,r3
  d024e0:	180f883a 	mov	r7,r3
  d024e4:	4992c03a 	cmpne	r9,r9,r6
  d024e8:	da400b15 	stw	r9,44(sp)
  d024ec:	1007883a 	mov	r3,r2
  d024f0:	da800c15 	stw	r10,48(sp)
  d024f4:	2800070e 	bge	r5,zero,d02514 <__mulsf3+0x138>
  d024f8:	2880004c 	andi	r2,r5,1
  d024fc:	1005003a 	cmpeq	r2,r2,zero
  d02500:	500d883a 	mov	r6,r10
  d02504:	10001e26 	beq	r2,zero,d02580 <__mulsf3+0x1a4>
  d02508:	380ed07a 	srli	r7,r7,1
  d0250c:	31800044 	addi	r6,r6,1
  d02510:	d9800c15 	stw	r6,48(sp)
  d02514:	01100034 	movhi	r4,16384
  d02518:	213fffc4 	addi	r4,r4,-1
  d0251c:	21c00b36 	bltu	r4,r7,d0254c <__mulsf3+0x170>
  d02520:	d8800c17 	ldw	r2,48(sp)
  d02524:	00000206 	br	d02530 <__mulsf3+0x154>
  d02528:	18c7883a 	add	r3,r3,r3
  d0252c:	21c00636 	bltu	r4,r7,d02548 <__mulsf3+0x16c>
  d02530:	10bfffc4 	addi	r2,r2,-1
  d02534:	39cf883a 	add	r7,r7,r7
  d02538:	183ffb0e 	bge	r3,zero,d02528 <__mulsf3+0x14c>
  d0253c:	39c00054 	ori	r7,r7,1
  d02540:	18c7883a 	add	r3,r3,r3
  d02544:	21fffa2e 	bgeu	r4,r7,d02530 <__mulsf3+0x154>
  d02548:	d8800c15 	stw	r2,48(sp)
  d0254c:	39001fcc 	andi	r4,r7,127
  d02550:	00801004 	movi	r2,64
  d02554:	20800d26 	beq	r4,r2,d0258c <__mulsf3+0x1b0>
  d02558:	008000c4 	movi	r2,3
  d0255c:	d9000a04 	addi	r4,sp,40
  d02560:	d9c00d15 	stw	r7,52(sp)
  d02564:	d8800a15 	stw	r2,40(sp)
  d02568:	0d033a40 	call	d033a4 <__pack_f>
  d0256c:	dfc01017 	ldw	ra,64(sp)
  d02570:	dc400f17 	ldw	r17,60(sp)
  d02574:	dc000e17 	ldw	r16,56(sp)
  d02578:	dec01104 	addi	sp,sp,68
  d0257c:	f800283a 	ret
  d02580:	1804d07a 	srli	r2,r3,1
  d02584:	10e00034 	orhi	r3,r2,32768
  d02588:	003fdf06 	br	d02508 <__mulsf3+0x12c>
  d0258c:	3880200c 	andi	r2,r7,128
  d02590:	103ff11e 	bne	r2,zero,d02558 <__mulsf3+0x17c>
  d02594:	183ff026 	beq	r3,zero,d02558 <__mulsf3+0x17c>
  d02598:	3907883a 	add	r3,r7,r4
  d0259c:	00bfe004 	movi	r2,-128
  d025a0:	188e703a 	and	r7,r3,r2
  d025a4:	003fec06 	br	d02558 <__mulsf3+0x17c>
  d025a8:	00800084 	movi	r2,2
  d025ac:	20bfa41e 	bne	r4,r2,d02440 <__mulsf3+0x64>
  d025b0:	01003474 	movhi	r4,209
  d025b4:	2103fe04 	addi	r4,r4,4088
  d025b8:	003fb306 	br	d02488 <__mulsf3+0xac>

00d025bc <__divsf3>:
  d025bc:	defff304 	addi	sp,sp,-52
  d025c0:	dc400b15 	stw	r17,44(sp)
  d025c4:	dc400204 	addi	r17,sp,8
  d025c8:	dc000a15 	stw	r16,40(sp)
  d025cc:	d9000015 	stw	r4,0(sp)
  d025d0:	d9400115 	stw	r5,4(sp)
  d025d4:	d809883a 	mov	r4,sp
  d025d8:	880b883a 	mov	r5,r17
  d025dc:	dc000604 	addi	r16,sp,24
  d025e0:	dfc00c15 	stw	ra,48(sp)
  d025e4:	0d035040 	call	d03504 <__unpack_f>
  d025e8:	d9000104 	addi	r4,sp,4
  d025ec:	800b883a 	mov	r5,r16
  d025f0:	0d035040 	call	d03504 <__unpack_f>
  d025f4:	d9000217 	ldw	r4,8(sp)
  d025f8:	00800044 	movi	r2,1
  d025fc:	01800104 	movi	r6,4
  d02600:	11000a2e 	bgeu	r2,r4,d0262c <__divsf3+0x70>
  d02604:	d9400617 	ldw	r5,24(sp)
  d02608:	1140432e 	bgeu	r2,r5,d02718 <__divsf3+0x15c>
  d0260c:	d8800317 	ldw	r2,12(sp)
  d02610:	d8c00717 	ldw	r3,28(sp)
  d02614:	10c4f03a 	xor	r2,r2,r3
  d02618:	d8800315 	stw	r2,12(sp)
  d0261c:	21800226 	beq	r4,r6,d02628 <__divsf3+0x6c>
  d02620:	00800084 	movi	r2,2
  d02624:	2080101e 	bne	r4,r2,d02668 <__divsf3+0xac>
  d02628:	29000726 	beq	r5,r4,d02648 <__divsf3+0x8c>
  d0262c:	8809883a 	mov	r4,r17
  d02630:	0d033a40 	call	d033a4 <__pack_f>
  d02634:	dfc00c17 	ldw	ra,48(sp)
  d02638:	dc400b17 	ldw	r17,44(sp)
  d0263c:	dc000a17 	ldw	r16,40(sp)
  d02640:	dec00d04 	addi	sp,sp,52
  d02644:	f800283a 	ret
  d02648:	01003474 	movhi	r4,209
  d0264c:	2103fe04 	addi	r4,r4,4088
  d02650:	0d033a40 	call	d033a4 <__pack_f>
  d02654:	dfc00c17 	ldw	ra,48(sp)
  d02658:	dc400b17 	ldw	r17,44(sp)
  d0265c:	dc000a17 	ldw	r16,40(sp)
  d02660:	dec00d04 	addi	sp,sp,52
  d02664:	f800283a 	ret
  d02668:	29802d26 	beq	r5,r6,d02720 <__divsf3+0x164>
  d0266c:	28801a26 	beq	r5,r2,d026d8 <__divsf3+0x11c>
  d02670:	d8c00417 	ldw	r3,16(sp)
  d02674:	d8800817 	ldw	r2,32(sp)
  d02678:	d9000517 	ldw	r4,20(sp)
  d0267c:	d9800917 	ldw	r6,36(sp)
  d02680:	1885c83a 	sub	r2,r3,r2
  d02684:	d8800415 	stw	r2,16(sp)
  d02688:	2180032e 	bgeu	r4,r6,d02698 <__divsf3+0xdc>
  d0268c:	10bfffc4 	addi	r2,r2,-1
  d02690:	d8800415 	stw	r2,16(sp)
  d02694:	2109883a 	add	r4,r4,r4
  d02698:	01500034 	movhi	r5,16384
  d0269c:	0007883a 	mov	r3,zero
  d026a0:	0005883a 	mov	r2,zero
  d026a4:	01c007c4 	movi	r7,31
  d026a8:	10800044 	addi	r2,r2,1
  d026ac:	21800236 	bltu	r4,r6,d026b8 <__divsf3+0xfc>
  d026b0:	1946b03a 	or	r3,r3,r5
  d026b4:	2189c83a 	sub	r4,r4,r6
  d026b8:	280ad07a 	srli	r5,r5,1
  d026bc:	2109883a 	add	r4,r4,r4
  d026c0:	11fff91e 	bne	r2,r7,d026a8 <__divsf3+0xec>
  d026c4:	19401fcc 	andi	r5,r3,127
  d026c8:	00801004 	movi	r2,64
  d026cc:	28800a26 	beq	r5,r2,d026f8 <__divsf3+0x13c>
  d026d0:	d8c00515 	stw	r3,20(sp)
  d026d4:	003fd506 	br	d0262c <__divsf3+0x70>
  d026d8:	8809883a 	mov	r4,r17
  d026dc:	d9800215 	stw	r6,8(sp)
  d026e0:	0d033a40 	call	d033a4 <__pack_f>
  d026e4:	dfc00c17 	ldw	ra,48(sp)
  d026e8:	dc400b17 	ldw	r17,44(sp)
  d026ec:	dc000a17 	ldw	r16,40(sp)
  d026f0:	dec00d04 	addi	sp,sp,52
  d026f4:	f800283a 	ret
  d026f8:	1880200c 	andi	r2,r3,128
  d026fc:	103ff41e 	bne	r2,zero,d026d0 <__divsf3+0x114>
  d02700:	203ff326 	beq	r4,zero,d026d0 <__divsf3+0x114>
  d02704:	1947883a 	add	r3,r3,r5
  d02708:	00bfe004 	movi	r2,-128
  d0270c:	1886703a 	and	r3,r3,r2
  d02710:	d8c00515 	stw	r3,20(sp)
  d02714:	003fc506 	br	d0262c <__divsf3+0x70>
  d02718:	8009883a 	mov	r4,r16
  d0271c:	003fc406 	br	d02630 <__divsf3+0x74>
  d02720:	8809883a 	mov	r4,r17
  d02724:	d8000515 	stw	zero,20(sp)
  d02728:	d8000415 	stw	zero,16(sp)
  d0272c:	003fc006 	br	d02630 <__divsf3+0x74>

00d02730 <__eqsf2>:
  d02730:	defff304 	addi	sp,sp,-52
  d02734:	dc400b15 	stw	r17,44(sp)
  d02738:	dc400204 	addi	r17,sp,8
  d0273c:	dc000a15 	stw	r16,40(sp)
  d02740:	d9000015 	stw	r4,0(sp)
  d02744:	d9400115 	stw	r5,4(sp)
  d02748:	d809883a 	mov	r4,sp
  d0274c:	880b883a 	mov	r5,r17
  d02750:	dc000604 	addi	r16,sp,24
  d02754:	dfc00c15 	stw	ra,48(sp)
  d02758:	0d035040 	call	d03504 <__unpack_f>
  d0275c:	d9000104 	addi	r4,sp,4
  d02760:	800b883a 	mov	r5,r16
  d02764:	0d035040 	call	d03504 <__unpack_f>
  d02768:	d8800217 	ldw	r2,8(sp)
  d0276c:	00c00044 	movi	r3,1
  d02770:	180d883a 	mov	r6,r3
  d02774:	1880062e 	bgeu	r3,r2,d02790 <__eqsf2+0x60>
  d02778:	d8800617 	ldw	r2,24(sp)
  d0277c:	8809883a 	mov	r4,r17
  d02780:	800b883a 	mov	r5,r16
  d02784:	1880022e 	bgeu	r3,r2,d02790 <__eqsf2+0x60>
  d02788:	0d035cc0 	call	d035cc <__fpcmp_parts_f>
  d0278c:	100d883a 	mov	r6,r2
  d02790:	3005883a 	mov	r2,r6
  d02794:	dfc00c17 	ldw	ra,48(sp)
  d02798:	dc400b17 	ldw	r17,44(sp)
  d0279c:	dc000a17 	ldw	r16,40(sp)
  d027a0:	dec00d04 	addi	sp,sp,52
  d027a4:	f800283a 	ret

00d027a8 <__gtsf2>:
  d027a8:	defff304 	addi	sp,sp,-52
  d027ac:	dc400b15 	stw	r17,44(sp)
  d027b0:	dc400204 	addi	r17,sp,8
  d027b4:	dc000a15 	stw	r16,40(sp)
  d027b8:	d9000015 	stw	r4,0(sp)
  d027bc:	d9400115 	stw	r5,4(sp)
  d027c0:	d809883a 	mov	r4,sp
  d027c4:	880b883a 	mov	r5,r17
  d027c8:	dc000604 	addi	r16,sp,24
  d027cc:	dfc00c15 	stw	ra,48(sp)
  d027d0:	0d035040 	call	d03504 <__unpack_f>
  d027d4:	d9000104 	addi	r4,sp,4
  d027d8:	800b883a 	mov	r5,r16
  d027dc:	0d035040 	call	d03504 <__unpack_f>
  d027e0:	d8800217 	ldw	r2,8(sp)
  d027e4:	00c00044 	movi	r3,1
  d027e8:	01bfffc4 	movi	r6,-1
  d027ec:	1880062e 	bgeu	r3,r2,d02808 <__gtsf2+0x60>
  d027f0:	d8800617 	ldw	r2,24(sp)
  d027f4:	8809883a 	mov	r4,r17
  d027f8:	800b883a 	mov	r5,r16
  d027fc:	1880022e 	bgeu	r3,r2,d02808 <__gtsf2+0x60>
  d02800:	0d035cc0 	call	d035cc <__fpcmp_parts_f>
  d02804:	100d883a 	mov	r6,r2
  d02808:	3005883a 	mov	r2,r6
  d0280c:	dfc00c17 	ldw	ra,48(sp)
  d02810:	dc400b17 	ldw	r17,44(sp)
  d02814:	dc000a17 	ldw	r16,40(sp)
  d02818:	dec00d04 	addi	sp,sp,52
  d0281c:	f800283a 	ret

00d02820 <__ltsf2>:
  d02820:	defff304 	addi	sp,sp,-52
  d02824:	dc400b15 	stw	r17,44(sp)
  d02828:	dc400204 	addi	r17,sp,8
  d0282c:	dc000a15 	stw	r16,40(sp)
  d02830:	d9000015 	stw	r4,0(sp)
  d02834:	d9400115 	stw	r5,4(sp)
  d02838:	d809883a 	mov	r4,sp
  d0283c:	880b883a 	mov	r5,r17
  d02840:	dc000604 	addi	r16,sp,24
  d02844:	dfc00c15 	stw	ra,48(sp)
  d02848:	0d035040 	call	d03504 <__unpack_f>
  d0284c:	d9000104 	addi	r4,sp,4
  d02850:	800b883a 	mov	r5,r16
  d02854:	0d035040 	call	d03504 <__unpack_f>
  d02858:	d8800217 	ldw	r2,8(sp)
  d0285c:	00c00044 	movi	r3,1
  d02860:	180d883a 	mov	r6,r3
  d02864:	1880062e 	bgeu	r3,r2,d02880 <__ltsf2+0x60>
  d02868:	d8800617 	ldw	r2,24(sp)
  d0286c:	8809883a 	mov	r4,r17
  d02870:	800b883a 	mov	r5,r16
  d02874:	1880022e 	bgeu	r3,r2,d02880 <__ltsf2+0x60>
  d02878:	0d035cc0 	call	d035cc <__fpcmp_parts_f>
  d0287c:	100d883a 	mov	r6,r2
  d02880:	3005883a 	mov	r2,r6
  d02884:	dfc00c17 	ldw	ra,48(sp)
  d02888:	dc400b17 	ldw	r17,44(sp)
  d0288c:	dc000a17 	ldw	r16,40(sp)
  d02890:	dec00d04 	addi	sp,sp,52
  d02894:	f800283a 	ret

00d02898 <__lesf2>:
  d02898:	defff304 	addi	sp,sp,-52
  d0289c:	dc400b15 	stw	r17,44(sp)
  d028a0:	dc400204 	addi	r17,sp,8
  d028a4:	dc000a15 	stw	r16,40(sp)
  d028a8:	d9000015 	stw	r4,0(sp)
  d028ac:	d9400115 	stw	r5,4(sp)
  d028b0:	d809883a 	mov	r4,sp
  d028b4:	880b883a 	mov	r5,r17
  d028b8:	dc000604 	addi	r16,sp,24
  d028bc:	dfc00c15 	stw	ra,48(sp)
  d028c0:	0d035040 	call	d03504 <__unpack_f>
  d028c4:	d9000104 	addi	r4,sp,4
  d028c8:	800b883a 	mov	r5,r16
  d028cc:	0d035040 	call	d03504 <__unpack_f>
  d028d0:	d8800217 	ldw	r2,8(sp)
  d028d4:	00c00044 	movi	r3,1
  d028d8:	180d883a 	mov	r6,r3
  d028dc:	1880062e 	bgeu	r3,r2,d028f8 <__lesf2+0x60>
  d028e0:	d8800617 	ldw	r2,24(sp)
  d028e4:	8809883a 	mov	r4,r17
  d028e8:	800b883a 	mov	r5,r16
  d028ec:	1880022e 	bgeu	r3,r2,d028f8 <__lesf2+0x60>
  d028f0:	0d035cc0 	call	d035cc <__fpcmp_parts_f>
  d028f4:	100d883a 	mov	r6,r2
  d028f8:	3005883a 	mov	r2,r6
  d028fc:	dfc00c17 	ldw	ra,48(sp)
  d02900:	dc400b17 	ldw	r17,44(sp)
  d02904:	dc000a17 	ldw	r16,40(sp)
  d02908:	dec00d04 	addi	sp,sp,52
  d0290c:	f800283a 	ret

00d02910 <__floatsisf>:
  d02910:	2006d7fa 	srli	r3,r4,31
  d02914:	defffa04 	addi	sp,sp,-24
  d02918:	008000c4 	movi	r2,3
  d0291c:	dfc00515 	stw	ra,20(sp)
  d02920:	dc000415 	stw	r16,16(sp)
  d02924:	d8800015 	stw	r2,0(sp)
  d02928:	d8c00115 	stw	r3,4(sp)
  d0292c:	2000081e 	bne	r4,zero,d02950 <__floatsisf+0x40>
  d02930:	00800084 	movi	r2,2
  d02934:	d8800015 	stw	r2,0(sp)
  d02938:	d809883a 	mov	r4,sp
  d0293c:	0d033a40 	call	d033a4 <__pack_f>
  d02940:	dfc00517 	ldw	ra,20(sp)
  d02944:	dc000417 	ldw	r16,16(sp)
  d02948:	dec00604 	addi	sp,sp,24
  d0294c:	f800283a 	ret
  d02950:	00800784 	movi	r2,30
  d02954:	1807003a 	cmpeq	r3,r3,zero
  d02958:	d8800215 	stw	r2,8(sp)
  d0295c:	18000e1e 	bne	r3,zero,d02998 <__floatsisf+0x88>
  d02960:	00a00034 	movhi	r2,32768
  d02964:	20800e26 	beq	r4,r2,d029a0 <__floatsisf+0x90>
  d02968:	0121c83a 	sub	r16,zero,r4
  d0296c:	8009883a 	mov	r4,r16
  d02970:	dc000315 	stw	r16,12(sp)
  d02974:	0d033240 	call	d03324 <__clzsi2>
  d02978:	117fffc4 	addi	r5,r2,-1
  d0297c:	017fee0e 	bge	zero,r5,d02938 <__floatsisf+0x28>
  d02980:	d8800217 	ldw	r2,8(sp)
  d02984:	8146983a 	sll	r3,r16,r5
  d02988:	1145c83a 	sub	r2,r2,r5
  d0298c:	d8c00315 	stw	r3,12(sp)
  d02990:	d8800215 	stw	r2,8(sp)
  d02994:	003fe806 	br	d02938 <__floatsisf+0x28>
  d02998:	2021883a 	mov	r16,r4
  d0299c:	003ff306 	br	d0296c <__floatsisf+0x5c>
  d029a0:	00b3c034 	movhi	r2,52992
  d029a4:	003fe606 	br	d02940 <__floatsisf+0x30>

00d029a8 <__extendsfdf2>:
  d029a8:	defff904 	addi	sp,sp,-28
  d029ac:	d9000115 	stw	r4,4(sp)
  d029b0:	d9400204 	addi	r5,sp,8
  d029b4:	d9000104 	addi	r4,sp,4
  d029b8:	dfc00615 	stw	ra,24(sp)
  d029bc:	0d035040 	call	d03504 <__unpack_f>
  d029c0:	d9c00517 	ldw	r7,20(sp)
  d029c4:	0011883a 	mov	r8,zero
  d029c8:	400697ba 	slli	r3,r8,30
  d029cc:	3812d0ba 	srli	r9,r7,2
  d029d0:	380497ba 	slli	r2,r7,30
  d029d4:	d9000217 	ldw	r4,8(sp)
  d029d8:	d9400317 	ldw	r5,12(sp)
  d029dc:	d9800417 	ldw	r6,16(sp)
  d029e0:	48c6b03a 	or	r3,r9,r3
  d029e4:	100f883a 	mov	r7,r2
  d029e8:	d8c00015 	stw	r3,0(sp)
  d029ec:	0d031e00 	call	d031e0 <__make_dp>
  d029f0:	dfc00617 	ldw	ra,24(sp)
  d029f4:	dec00704 	addi	sp,sp,28
  d029f8:	f800283a 	ret

00d029fc <_fpadd_parts>:
  d029fc:	defff804 	addi	sp,sp,-32
  d02a00:	dcc00315 	stw	r19,12(sp)
  d02a04:	2027883a 	mov	r19,r4
  d02a08:	21000017 	ldw	r4,0(r4)
  d02a0c:	00c00044 	movi	r3,1
  d02a10:	dd400515 	stw	r21,20(sp)
  d02a14:	dd000415 	stw	r20,16(sp)
  d02a18:	ddc00715 	stw	r23,28(sp)
  d02a1c:	dd800615 	stw	r22,24(sp)
  d02a20:	dc800215 	stw	r18,8(sp)
  d02a24:	dc400115 	stw	r17,4(sp)
  d02a28:	dc000015 	stw	r16,0(sp)
  d02a2c:	282b883a 	mov	r21,r5
  d02a30:	3029883a 	mov	r20,r6
  d02a34:	1900632e 	bgeu	r3,r4,d02bc4 <_fpadd_parts+0x1c8>
  d02a38:	28800017 	ldw	r2,0(r5)
  d02a3c:	1880812e 	bgeu	r3,r2,d02c44 <_fpadd_parts+0x248>
  d02a40:	00c00104 	movi	r3,4
  d02a44:	20c0dc26 	beq	r4,r3,d02db8 <_fpadd_parts+0x3bc>
  d02a48:	10c07e26 	beq	r2,r3,d02c44 <_fpadd_parts+0x248>
  d02a4c:	00c00084 	movi	r3,2
  d02a50:	10c06726 	beq	r2,r3,d02bf0 <_fpadd_parts+0x1f4>
  d02a54:	20c07b26 	beq	r4,r3,d02c44 <_fpadd_parts+0x248>
  d02a58:	9dc00217 	ldw	r23,8(r19)
  d02a5c:	28c00217 	ldw	r3,8(r5)
  d02a60:	9c400317 	ldw	r17,12(r19)
  d02a64:	2bc00317 	ldw	r15,12(r5)
  d02a68:	b8cdc83a 	sub	r6,r23,r3
  d02a6c:	9c800417 	ldw	r18,16(r19)
  d02a70:	2c000417 	ldw	r16,16(r5)
  d02a74:	3009883a 	mov	r4,r6
  d02a78:	30009716 	blt	r6,zero,d02cd8 <_fpadd_parts+0x2dc>
  d02a7c:	00800fc4 	movi	r2,63
  d02a80:	11806b16 	blt	r2,r6,d02c30 <_fpadd_parts+0x234>
  d02a84:	0100a40e 	bge	zero,r4,d02d18 <_fpadd_parts+0x31c>
  d02a88:	35bff804 	addi	r22,r6,-32
  d02a8c:	b000bc16 	blt	r22,zero,d02d80 <_fpadd_parts+0x384>
  d02a90:	8596d83a 	srl	r11,r16,r22
  d02a94:	0019883a 	mov	r12,zero
  d02a98:	0013883a 	mov	r9,zero
  d02a9c:	01000044 	movi	r4,1
  d02aa0:	0015883a 	mov	r10,zero
  d02aa4:	b000be16 	blt	r22,zero,d02da0 <_fpadd_parts+0x3a4>
  d02aa8:	2590983a 	sll	r8,r4,r22
  d02aac:	000f883a 	mov	r7,zero
  d02ab0:	00bfffc4 	movi	r2,-1
  d02ab4:	3889883a 	add	r4,r7,r2
  d02ab8:	408b883a 	add	r5,r8,r2
  d02abc:	21cd803a 	cmpltu	r6,r4,r7
  d02ac0:	314b883a 	add	r5,r6,r5
  d02ac4:	7904703a 	and	r2,r15,r4
  d02ac8:	8146703a 	and	r3,r16,r5
  d02acc:	10c4b03a 	or	r2,r2,r3
  d02ad0:	10000226 	beq	r2,zero,d02adc <_fpadd_parts+0xe0>
  d02ad4:	02400044 	movi	r9,1
  d02ad8:	0015883a 	mov	r10,zero
  d02adc:	5a5eb03a 	or	r15,r11,r9
  d02ae0:	62a0b03a 	or	r16,r12,r10
  d02ae4:	99400117 	ldw	r5,4(r19)
  d02ae8:	a8800117 	ldw	r2,4(r21)
  d02aec:	28806e26 	beq	r5,r2,d02ca8 <_fpadd_parts+0x2ac>
  d02af0:	28006626 	beq	r5,zero,d02c8c <_fpadd_parts+0x290>
  d02af4:	7c45c83a 	sub	r2,r15,r17
  d02af8:	7889803a 	cmpltu	r4,r15,r2
  d02afc:	8487c83a 	sub	r3,r16,r18
  d02b00:	1909c83a 	sub	r4,r3,r4
  d02b04:	100d883a 	mov	r6,r2
  d02b08:	200f883a 	mov	r7,r4
  d02b0c:	38007716 	blt	r7,zero,d02cec <_fpadd_parts+0x2f0>
  d02b10:	a5c00215 	stw	r23,8(r20)
  d02b14:	a1c00415 	stw	r7,16(r20)
  d02b18:	a0000115 	stw	zero,4(r20)
  d02b1c:	a1800315 	stw	r6,12(r20)
  d02b20:	a2000317 	ldw	r8,12(r20)
  d02b24:	a2400417 	ldw	r9,16(r20)
  d02b28:	00bfffc4 	movi	r2,-1
  d02b2c:	408b883a 	add	r5,r8,r2
  d02b30:	2a09803a 	cmpltu	r4,r5,r8
  d02b34:	488d883a 	add	r6,r9,r2
  d02b38:	01c40034 	movhi	r7,4096
  d02b3c:	39ffffc4 	addi	r7,r7,-1
  d02b40:	218d883a 	add	r6,r4,r6
  d02b44:	39801736 	bltu	r7,r6,d02ba4 <_fpadd_parts+0x1a8>
  d02b48:	31c06526 	beq	r6,r7,d02ce0 <_fpadd_parts+0x2e4>
  d02b4c:	a3000217 	ldw	r12,8(r20)
  d02b50:	4209883a 	add	r4,r8,r8
  d02b54:	00bfffc4 	movi	r2,-1
  d02b58:	220f803a 	cmpltu	r7,r4,r8
  d02b5c:	4a4b883a 	add	r5,r9,r9
  d02b60:	394f883a 	add	r7,r7,r5
  d02b64:	2095883a 	add	r10,r4,r2
  d02b68:	3897883a 	add	r11,r7,r2
  d02b6c:	510d803a 	cmpltu	r6,r10,r4
  d02b70:	6099883a 	add	r12,r12,r2
  d02b74:	32d7883a 	add	r11,r6,r11
  d02b78:	00840034 	movhi	r2,4096
  d02b7c:	10bfffc4 	addi	r2,r2,-1
  d02b80:	2011883a 	mov	r8,r4
  d02b84:	3813883a 	mov	r9,r7
  d02b88:	a1000315 	stw	r4,12(r20)
  d02b8c:	a1c00415 	stw	r7,16(r20)
  d02b90:	a3000215 	stw	r12,8(r20)
  d02b94:	12c00336 	bltu	r2,r11,d02ba4 <_fpadd_parts+0x1a8>
  d02b98:	58bfed1e 	bne	r11,r2,d02b50 <_fpadd_parts+0x154>
  d02b9c:	00bfff84 	movi	r2,-2
  d02ba0:	12bfeb2e 	bgeu	r2,r10,d02b50 <_fpadd_parts+0x154>
  d02ba4:	a2800417 	ldw	r10,16(r20)
  d02ba8:	008000c4 	movi	r2,3
  d02bac:	00c80034 	movhi	r3,8192
  d02bb0:	18ffffc4 	addi	r3,r3,-1
  d02bb4:	a2400317 	ldw	r9,12(r20)
  d02bb8:	a0800015 	stw	r2,0(r20)
  d02bbc:	1a802336 	bltu	r3,r10,d02c4c <_fpadd_parts+0x250>
  d02bc0:	a027883a 	mov	r19,r20
  d02bc4:	9805883a 	mov	r2,r19
  d02bc8:	ddc00717 	ldw	r23,28(sp)
  d02bcc:	dd800617 	ldw	r22,24(sp)
  d02bd0:	dd400517 	ldw	r21,20(sp)
  d02bd4:	dd000417 	ldw	r20,16(sp)
  d02bd8:	dcc00317 	ldw	r19,12(sp)
  d02bdc:	dc800217 	ldw	r18,8(sp)
  d02be0:	dc400117 	ldw	r17,4(sp)
  d02be4:	dc000017 	ldw	r16,0(sp)
  d02be8:	dec00804 	addi	sp,sp,32
  d02bec:	f800283a 	ret
  d02bf0:	20fff41e 	bne	r4,r3,d02bc4 <_fpadd_parts+0x1c8>
  d02bf4:	31000015 	stw	r4,0(r6)
  d02bf8:	98800117 	ldw	r2,4(r19)
  d02bfc:	30800115 	stw	r2,4(r6)
  d02c00:	98c00217 	ldw	r3,8(r19)
  d02c04:	30c00215 	stw	r3,8(r6)
  d02c08:	98800317 	ldw	r2,12(r19)
  d02c0c:	30800315 	stw	r2,12(r6)
  d02c10:	98c00417 	ldw	r3,16(r19)
  d02c14:	30c00415 	stw	r3,16(r6)
  d02c18:	98800117 	ldw	r2,4(r19)
  d02c1c:	28c00117 	ldw	r3,4(r5)
  d02c20:	3027883a 	mov	r19,r6
  d02c24:	10c4703a 	and	r2,r2,r3
  d02c28:	30800115 	stw	r2,4(r6)
  d02c2c:	003fe506 	br	d02bc4 <_fpadd_parts+0x1c8>
  d02c30:	1dc02616 	blt	r3,r23,d02ccc <_fpadd_parts+0x2d0>
  d02c34:	0023883a 	mov	r17,zero
  d02c38:	182f883a 	mov	r23,r3
  d02c3c:	0025883a 	mov	r18,zero
  d02c40:	003fa806 	br	d02ae4 <_fpadd_parts+0xe8>
  d02c44:	a827883a 	mov	r19,r21
  d02c48:	003fde06 	br	d02bc4 <_fpadd_parts+0x1c8>
  d02c4c:	01800044 	movi	r6,1
  d02c50:	500497fa 	slli	r2,r10,31
  d02c54:	4808d07a 	srli	r4,r9,1
  d02c58:	518ad83a 	srl	r5,r10,r6
  d02c5c:	a2000217 	ldw	r8,8(r20)
  d02c60:	1108b03a 	or	r4,r2,r4
  d02c64:	0007883a 	mov	r3,zero
  d02c68:	4984703a 	and	r2,r9,r6
  d02c6c:	208cb03a 	or	r6,r4,r2
  d02c70:	28ceb03a 	or	r7,r5,r3
  d02c74:	42000044 	addi	r8,r8,1
  d02c78:	a027883a 	mov	r19,r20
  d02c7c:	a1c00415 	stw	r7,16(r20)
  d02c80:	a2000215 	stw	r8,8(r20)
  d02c84:	a1800315 	stw	r6,12(r20)
  d02c88:	003fce06 	br	d02bc4 <_fpadd_parts+0x1c8>
  d02c8c:	8bc5c83a 	sub	r2,r17,r15
  d02c90:	8889803a 	cmpltu	r4,r17,r2
  d02c94:	9407c83a 	sub	r3,r18,r16
  d02c98:	1909c83a 	sub	r4,r3,r4
  d02c9c:	100d883a 	mov	r6,r2
  d02ca0:	200f883a 	mov	r7,r4
  d02ca4:	003f9906 	br	d02b0c <_fpadd_parts+0x110>
  d02ca8:	7c45883a 	add	r2,r15,r17
  d02cac:	13c9803a 	cmpltu	r4,r2,r15
  d02cb0:	8487883a 	add	r3,r16,r18
  d02cb4:	20c9883a 	add	r4,r4,r3
  d02cb8:	a1400115 	stw	r5,4(r20)
  d02cbc:	a5c00215 	stw	r23,8(r20)
  d02cc0:	a0800315 	stw	r2,12(r20)
  d02cc4:	a1000415 	stw	r4,16(r20)
  d02cc8:	003fb606 	br	d02ba4 <_fpadd_parts+0x1a8>
  d02ccc:	001f883a 	mov	r15,zero
  d02cd0:	0021883a 	mov	r16,zero
  d02cd4:	003f8306 	br	d02ae4 <_fpadd_parts+0xe8>
  d02cd8:	018dc83a 	sub	r6,zero,r6
  d02cdc:	003f6706 	br	d02a7c <_fpadd_parts+0x80>
  d02ce0:	00bfff84 	movi	r2,-2
  d02ce4:	117faf36 	bltu	r2,r5,d02ba4 <_fpadd_parts+0x1a8>
  d02ce8:	003f9806 	br	d02b4c <_fpadd_parts+0x150>
  d02cec:	0005883a 	mov	r2,zero
  d02cf0:	1189c83a 	sub	r4,r2,r6
  d02cf4:	1105803a 	cmpltu	r2,r2,r4
  d02cf8:	01cbc83a 	sub	r5,zero,r7
  d02cfc:	2885c83a 	sub	r2,r5,r2
  d02d00:	01800044 	movi	r6,1
  d02d04:	a1800115 	stw	r6,4(r20)
  d02d08:	a5c00215 	stw	r23,8(r20)
  d02d0c:	a1000315 	stw	r4,12(r20)
  d02d10:	a0800415 	stw	r2,16(r20)
  d02d14:	003f8206 	br	d02b20 <_fpadd_parts+0x124>
  d02d18:	203f7226 	beq	r4,zero,d02ae4 <_fpadd_parts+0xe8>
  d02d1c:	35bff804 	addi	r22,r6,-32
  d02d20:	b9af883a 	add	r23,r23,r6
  d02d24:	b0003116 	blt	r22,zero,d02dec <_fpadd_parts+0x3f0>
  d02d28:	959ad83a 	srl	r13,r18,r22
  d02d2c:	001d883a 	mov	r14,zero
  d02d30:	000f883a 	mov	r7,zero
  d02d34:	01000044 	movi	r4,1
  d02d38:	0011883a 	mov	r8,zero
  d02d3c:	b0002516 	blt	r22,zero,d02dd4 <_fpadd_parts+0x3d8>
  d02d40:	2594983a 	sll	r10,r4,r22
  d02d44:	0013883a 	mov	r9,zero
  d02d48:	00bfffc4 	movi	r2,-1
  d02d4c:	4889883a 	add	r4,r9,r2
  d02d50:	508b883a 	add	r5,r10,r2
  d02d54:	224d803a 	cmpltu	r6,r4,r9
  d02d58:	314b883a 	add	r5,r6,r5
  d02d5c:	8904703a 	and	r2,r17,r4
  d02d60:	9146703a 	and	r3,r18,r5
  d02d64:	10c4b03a 	or	r2,r2,r3
  d02d68:	10000226 	beq	r2,zero,d02d74 <_fpadd_parts+0x378>
  d02d6c:	01c00044 	movi	r7,1
  d02d70:	0011883a 	mov	r8,zero
  d02d74:	69e2b03a 	or	r17,r13,r7
  d02d78:	7224b03a 	or	r18,r14,r8
  d02d7c:	003f5906 	br	d02ae4 <_fpadd_parts+0xe8>
  d02d80:	8407883a 	add	r3,r16,r16
  d02d84:	008007c4 	movi	r2,31
  d02d88:	1185c83a 	sub	r2,r2,r6
  d02d8c:	1886983a 	sll	r3,r3,r2
  d02d90:	7996d83a 	srl	r11,r15,r6
  d02d94:	8198d83a 	srl	r12,r16,r6
  d02d98:	1ad6b03a 	or	r11,r3,r11
  d02d9c:	003f3e06 	br	d02a98 <_fpadd_parts+0x9c>
  d02da0:	2006d07a 	srli	r3,r4,1
  d02da4:	008007c4 	movi	r2,31
  d02da8:	1185c83a 	sub	r2,r2,r6
  d02dac:	1890d83a 	srl	r8,r3,r2
  d02db0:	218e983a 	sll	r7,r4,r6
  d02db4:	003f3e06 	br	d02ab0 <_fpadd_parts+0xb4>
  d02db8:	113f821e 	bne	r2,r4,d02bc4 <_fpadd_parts+0x1c8>
  d02dbc:	28c00117 	ldw	r3,4(r5)
  d02dc0:	98800117 	ldw	r2,4(r19)
  d02dc4:	10ff7f26 	beq	r2,r3,d02bc4 <_fpadd_parts+0x1c8>
  d02dc8:	04c03474 	movhi	r19,209
  d02dcc:	9cc40204 	addi	r19,r19,4104
  d02dd0:	003f7c06 	br	d02bc4 <_fpadd_parts+0x1c8>
  d02dd4:	2006d07a 	srli	r3,r4,1
  d02dd8:	008007c4 	movi	r2,31
  d02ddc:	1185c83a 	sub	r2,r2,r6
  d02de0:	1894d83a 	srl	r10,r3,r2
  d02de4:	2192983a 	sll	r9,r4,r6
  d02de8:	003fd706 	br	d02d48 <_fpadd_parts+0x34c>
  d02dec:	9487883a 	add	r3,r18,r18
  d02df0:	008007c4 	movi	r2,31
  d02df4:	1185c83a 	sub	r2,r2,r6
  d02df8:	1886983a 	sll	r3,r3,r2
  d02dfc:	899ad83a 	srl	r13,r17,r6
  d02e00:	919cd83a 	srl	r14,r18,r6
  d02e04:	1b5ab03a 	or	r13,r3,r13
  d02e08:	003fc906 	br	d02d30 <_fpadd_parts+0x334>

00d02e0c <__subdf3>:
  d02e0c:	deffea04 	addi	sp,sp,-88
  d02e10:	dcc01415 	stw	r19,80(sp)
  d02e14:	dcc00404 	addi	r19,sp,16
  d02e18:	2011883a 	mov	r8,r4
  d02e1c:	2813883a 	mov	r9,r5
  d02e20:	dc401315 	stw	r17,76(sp)
  d02e24:	d809883a 	mov	r4,sp
  d02e28:	980b883a 	mov	r5,r19
  d02e2c:	dc400904 	addi	r17,sp,36
  d02e30:	dfc01515 	stw	ra,84(sp)
  d02e34:	da400115 	stw	r9,4(sp)
  d02e38:	d9c00315 	stw	r7,12(sp)
  d02e3c:	da000015 	stw	r8,0(sp)
  d02e40:	d9800215 	stw	r6,8(sp)
  d02e44:	0d039b40 	call	d039b4 <__unpack_d>
  d02e48:	d9000204 	addi	r4,sp,8
  d02e4c:	880b883a 	mov	r5,r17
  d02e50:	0d039b40 	call	d039b4 <__unpack_d>
  d02e54:	d8800a17 	ldw	r2,40(sp)
  d02e58:	880b883a 	mov	r5,r17
  d02e5c:	9809883a 	mov	r4,r19
  d02e60:	d9800e04 	addi	r6,sp,56
  d02e64:	1080005c 	xori	r2,r2,1
  d02e68:	d8800a15 	stw	r2,40(sp)
  d02e6c:	0d029fc0 	call	d029fc <_fpadd_parts>
  d02e70:	1009883a 	mov	r4,r2
  d02e74:	0d036a00 	call	d036a0 <__pack_d>
  d02e78:	dfc01517 	ldw	ra,84(sp)
  d02e7c:	dcc01417 	ldw	r19,80(sp)
  d02e80:	dc401317 	ldw	r17,76(sp)
  d02e84:	dec01604 	addi	sp,sp,88
  d02e88:	f800283a 	ret

00d02e8c <__adddf3>:
  d02e8c:	deffea04 	addi	sp,sp,-88
  d02e90:	dcc01415 	stw	r19,80(sp)
  d02e94:	dcc00404 	addi	r19,sp,16
  d02e98:	2011883a 	mov	r8,r4
  d02e9c:	2813883a 	mov	r9,r5
  d02ea0:	dc401315 	stw	r17,76(sp)
  d02ea4:	d809883a 	mov	r4,sp
  d02ea8:	980b883a 	mov	r5,r19
  d02eac:	dc400904 	addi	r17,sp,36
  d02eb0:	dfc01515 	stw	ra,84(sp)
  d02eb4:	da400115 	stw	r9,4(sp)
  d02eb8:	d9c00315 	stw	r7,12(sp)
  d02ebc:	da000015 	stw	r8,0(sp)
  d02ec0:	d9800215 	stw	r6,8(sp)
  d02ec4:	0d039b40 	call	d039b4 <__unpack_d>
  d02ec8:	d9000204 	addi	r4,sp,8
  d02ecc:	880b883a 	mov	r5,r17
  d02ed0:	0d039b40 	call	d039b4 <__unpack_d>
  d02ed4:	d9800e04 	addi	r6,sp,56
  d02ed8:	9809883a 	mov	r4,r19
  d02edc:	880b883a 	mov	r5,r17
  d02ee0:	0d029fc0 	call	d029fc <_fpadd_parts>
  d02ee4:	1009883a 	mov	r4,r2
  d02ee8:	0d036a00 	call	d036a0 <__pack_d>
  d02eec:	dfc01517 	ldw	ra,84(sp)
  d02ef0:	dcc01417 	ldw	r19,80(sp)
  d02ef4:	dc401317 	ldw	r17,76(sp)
  d02ef8:	dec01604 	addi	sp,sp,88
  d02efc:	f800283a 	ret

00d02f00 <__divdf3>:
  d02f00:	deffed04 	addi	sp,sp,-76
  d02f04:	dcc01115 	stw	r19,68(sp)
  d02f08:	dcc00404 	addi	r19,sp,16
  d02f0c:	2011883a 	mov	r8,r4
  d02f10:	2813883a 	mov	r9,r5
  d02f14:	dc000e15 	stw	r16,56(sp)
  d02f18:	d809883a 	mov	r4,sp
  d02f1c:	980b883a 	mov	r5,r19
  d02f20:	dc000904 	addi	r16,sp,36
  d02f24:	dfc01215 	stw	ra,72(sp)
  d02f28:	da400115 	stw	r9,4(sp)
  d02f2c:	d9c00315 	stw	r7,12(sp)
  d02f30:	da000015 	stw	r8,0(sp)
  d02f34:	d9800215 	stw	r6,8(sp)
  d02f38:	dc801015 	stw	r18,64(sp)
  d02f3c:	dc400f15 	stw	r17,60(sp)
  d02f40:	0d039b40 	call	d039b4 <__unpack_d>
  d02f44:	d9000204 	addi	r4,sp,8
  d02f48:	800b883a 	mov	r5,r16
  d02f4c:	0d039b40 	call	d039b4 <__unpack_d>
  d02f50:	d9000417 	ldw	r4,16(sp)
  d02f54:	00800044 	movi	r2,1
  d02f58:	11000b2e 	bgeu	r2,r4,d02f88 <__divdf3+0x88>
  d02f5c:	d9400917 	ldw	r5,36(sp)
  d02f60:	1140762e 	bgeu	r2,r5,d0313c <__divdf3+0x23c>
  d02f64:	d8800517 	ldw	r2,20(sp)
  d02f68:	d8c00a17 	ldw	r3,40(sp)
  d02f6c:	01800104 	movi	r6,4
  d02f70:	10c4f03a 	xor	r2,r2,r3
  d02f74:	d8800515 	stw	r2,20(sp)
  d02f78:	21800226 	beq	r4,r6,d02f84 <__divdf3+0x84>
  d02f7c:	00800084 	movi	r2,2
  d02f80:	2080141e 	bne	r4,r2,d02fd4 <__divdf3+0xd4>
  d02f84:	29000926 	beq	r5,r4,d02fac <__divdf3+0xac>
  d02f88:	9809883a 	mov	r4,r19
  d02f8c:	0d036a00 	call	d036a0 <__pack_d>
  d02f90:	dfc01217 	ldw	ra,72(sp)
  d02f94:	dcc01117 	ldw	r19,68(sp)
  d02f98:	dc801017 	ldw	r18,64(sp)
  d02f9c:	dc400f17 	ldw	r17,60(sp)
  d02fa0:	dc000e17 	ldw	r16,56(sp)
  d02fa4:	dec01304 	addi	sp,sp,76
  d02fa8:	f800283a 	ret
  d02fac:	01003474 	movhi	r4,209
  d02fb0:	21040204 	addi	r4,r4,4104
  d02fb4:	0d036a00 	call	d036a0 <__pack_d>
  d02fb8:	dfc01217 	ldw	ra,72(sp)
  d02fbc:	dcc01117 	ldw	r19,68(sp)
  d02fc0:	dc801017 	ldw	r18,64(sp)
  d02fc4:	dc400f17 	ldw	r17,60(sp)
  d02fc8:	dc000e17 	ldw	r16,56(sp)
  d02fcc:	dec01304 	addi	sp,sp,76
  d02fd0:	f800283a 	ret
  d02fd4:	29805b26 	beq	r5,r6,d03144 <__divdf3+0x244>
  d02fd8:	28802d26 	beq	r5,r2,d03090 <__divdf3+0x190>
  d02fdc:	d8c00617 	ldw	r3,24(sp)
  d02fe0:	d8800b17 	ldw	r2,44(sp)
  d02fe4:	d9c00817 	ldw	r7,32(sp)
  d02fe8:	dc400d17 	ldw	r17,52(sp)
  d02fec:	188bc83a 	sub	r5,r3,r2
  d02ff0:	d9800717 	ldw	r6,28(sp)
  d02ff4:	dc000c17 	ldw	r16,48(sp)
  d02ff8:	d9400615 	stw	r5,24(sp)
  d02ffc:	3c403836 	bltu	r7,r17,d030e0 <__divdf3+0x1e0>
  d03000:	89c03626 	beq	r17,r7,d030dc <__divdf3+0x1dc>
  d03004:	0015883a 	mov	r10,zero
  d03008:	001d883a 	mov	r14,zero
  d0300c:	02c40034 	movhi	r11,4096
  d03010:	001f883a 	mov	r15,zero
  d03014:	003f883a 	mov	ra,zero
  d03018:	04800f44 	movi	r18,61
  d0301c:	00000f06 	br	d0305c <__divdf3+0x15c>
  d03020:	601d883a 	mov	r14,r12
  d03024:	681f883a 	mov	r15,r13
  d03028:	400d883a 	mov	r6,r8
  d0302c:	100f883a 	mov	r7,r2
  d03030:	3191883a 	add	r8,r6,r6
  d03034:	5808d07a 	srli	r4,r11,1
  d03038:	4185803a 	cmpltu	r2,r8,r6
  d0303c:	39d3883a 	add	r9,r7,r7
  d03040:	28c6b03a 	or	r3,r5,r3
  d03044:	1245883a 	add	r2,r2,r9
  d03048:	1815883a 	mov	r10,r3
  d0304c:	2017883a 	mov	r11,r4
  d03050:	400d883a 	mov	r6,r8
  d03054:	100f883a 	mov	r7,r2
  d03058:	fc801726 	beq	ra,r18,d030b8 <__divdf3+0x1b8>
  d0305c:	580a97fa 	slli	r5,r11,31
  d03060:	5006d07a 	srli	r3,r10,1
  d03064:	ffc00044 	addi	ra,ra,1
  d03068:	3c7ff136 	bltu	r7,r17,d03030 <__divdf3+0x130>
  d0306c:	3411c83a 	sub	r8,r6,r16
  d03070:	3205803a 	cmpltu	r2,r6,r8
  d03074:	3c53c83a 	sub	r9,r7,r17
  d03078:	7298b03a 	or	r12,r14,r10
  d0307c:	7adab03a 	or	r13,r15,r11
  d03080:	4885c83a 	sub	r2,r9,r2
  d03084:	89ffe61e 	bne	r17,r7,d03020 <__divdf3+0x120>
  d03088:	343fe936 	bltu	r6,r16,d03030 <__divdf3+0x130>
  d0308c:	003fe406 	br	d03020 <__divdf3+0x120>
  d03090:	9809883a 	mov	r4,r19
  d03094:	d9800415 	stw	r6,16(sp)
  d03098:	0d036a00 	call	d036a0 <__pack_d>
  d0309c:	dfc01217 	ldw	ra,72(sp)
  d030a0:	dcc01117 	ldw	r19,68(sp)
  d030a4:	dc801017 	ldw	r18,64(sp)
  d030a8:	dc400f17 	ldw	r17,60(sp)
  d030ac:	dc000e17 	ldw	r16,56(sp)
  d030b0:	dec01304 	addi	sp,sp,76
  d030b4:	f800283a 	ret
  d030b8:	00803fc4 	movi	r2,255
  d030bc:	7090703a 	and	r8,r14,r2
  d030c0:	00802004 	movi	r2,128
  d030c4:	0007883a 	mov	r3,zero
  d030c8:	0013883a 	mov	r9,zero
  d030cc:	40800d26 	beq	r8,r2,d03104 <__divdf3+0x204>
  d030d0:	dbc00815 	stw	r15,32(sp)
  d030d4:	db800715 	stw	r14,28(sp)
  d030d8:	003fab06 	br	d02f88 <__divdf3+0x88>
  d030dc:	343fc92e 	bgeu	r6,r16,d03004 <__divdf3+0x104>
  d030e0:	3185883a 	add	r2,r6,r6
  d030e4:	1189803a 	cmpltu	r4,r2,r6
  d030e8:	39c7883a 	add	r3,r7,r7
  d030ec:	20c9883a 	add	r4,r4,r3
  d030f0:	297fffc4 	addi	r5,r5,-1
  d030f4:	100d883a 	mov	r6,r2
  d030f8:	200f883a 	mov	r7,r4
  d030fc:	d9400615 	stw	r5,24(sp)
  d03100:	003fc006 	br	d03004 <__divdf3+0x104>
  d03104:	483ff21e 	bne	r9,zero,d030d0 <__divdf3+0x1d0>
  d03108:	01004004 	movi	r4,256
  d0310c:	7104703a 	and	r2,r14,r4
  d03110:	10c4b03a 	or	r2,r2,r3
  d03114:	103fee1e 	bne	r2,zero,d030d0 <__divdf3+0x1d0>
  d03118:	31c4b03a 	or	r2,r6,r7
  d0311c:	103fec26 	beq	r2,zero,d030d0 <__divdf3+0x1d0>
  d03120:	7205883a 	add	r2,r14,r8
  d03124:	1391803a 	cmpltu	r8,r2,r14
  d03128:	43d1883a 	add	r8,r8,r15
  d0312c:	013fc004 	movi	r4,-256
  d03130:	111c703a 	and	r14,r2,r4
  d03134:	401f883a 	mov	r15,r8
  d03138:	003fe506 	br	d030d0 <__divdf3+0x1d0>
  d0313c:	8009883a 	mov	r4,r16
  d03140:	003f9206 	br	d02f8c <__divdf3+0x8c>
  d03144:	9809883a 	mov	r4,r19
  d03148:	d8000715 	stw	zero,28(sp)
  d0314c:	d8000815 	stw	zero,32(sp)
  d03150:	d8000615 	stw	zero,24(sp)
  d03154:	003f8d06 	br	d02f8c <__divdf3+0x8c>

00d03158 <__nedf2>:
  d03158:	deffef04 	addi	sp,sp,-68
  d0315c:	dc400f15 	stw	r17,60(sp)
  d03160:	dc400404 	addi	r17,sp,16
  d03164:	2005883a 	mov	r2,r4
  d03168:	2807883a 	mov	r3,r5
  d0316c:	dc000e15 	stw	r16,56(sp)
  d03170:	d809883a 	mov	r4,sp
  d03174:	880b883a 	mov	r5,r17
  d03178:	dc000904 	addi	r16,sp,36
  d0317c:	d8c00115 	stw	r3,4(sp)
  d03180:	d8800015 	stw	r2,0(sp)
  d03184:	d9800215 	stw	r6,8(sp)
  d03188:	dfc01015 	stw	ra,64(sp)
  d0318c:	d9c00315 	stw	r7,12(sp)
  d03190:	0d039b40 	call	d039b4 <__unpack_d>
  d03194:	d9000204 	addi	r4,sp,8
  d03198:	800b883a 	mov	r5,r16
  d0319c:	0d039b40 	call	d039b4 <__unpack_d>
  d031a0:	d8800417 	ldw	r2,16(sp)
  d031a4:	00c00044 	movi	r3,1
  d031a8:	180d883a 	mov	r6,r3
  d031ac:	1880062e 	bgeu	r3,r2,d031c8 <__nedf2+0x70>
  d031b0:	d8800917 	ldw	r2,36(sp)
  d031b4:	8809883a 	mov	r4,r17
  d031b8:	800b883a 	mov	r5,r16
  d031bc:	1880022e 	bgeu	r3,r2,d031c8 <__nedf2+0x70>
  d031c0:	0d03aec0 	call	d03aec <__fpcmp_parts_d>
  d031c4:	100d883a 	mov	r6,r2
  d031c8:	3005883a 	mov	r2,r6
  d031cc:	dfc01017 	ldw	ra,64(sp)
  d031d0:	dc400f17 	ldw	r17,60(sp)
  d031d4:	dc000e17 	ldw	r16,56(sp)
  d031d8:	dec01104 	addi	sp,sp,68
  d031dc:	f800283a 	ret

00d031e0 <__make_dp>:
  d031e0:	defff904 	addi	sp,sp,-28
  d031e4:	d8c00717 	ldw	r3,28(sp)
  d031e8:	d9000015 	stw	r4,0(sp)
  d031ec:	d809883a 	mov	r4,sp
  d031f0:	dfc00515 	stw	ra,20(sp)
  d031f4:	d9c00615 	stw	r7,24(sp)
  d031f8:	d9400115 	stw	r5,4(sp)
  d031fc:	d9800215 	stw	r6,8(sp)
  d03200:	d8c00415 	stw	r3,16(sp)
  d03204:	d9c00315 	stw	r7,12(sp)
  d03208:	0d036a00 	call	d036a0 <__pack_d>
  d0320c:	dfc00517 	ldw	ra,20(sp)
  d03210:	dec00704 	addi	sp,sp,28
  d03214:	f800283a 	ret

00d03218 <__truncdfsf2>:
  d03218:	defff804 	addi	sp,sp,-32
  d0321c:	2005883a 	mov	r2,r4
  d03220:	2807883a 	mov	r3,r5
  d03224:	d809883a 	mov	r4,sp
  d03228:	d9400204 	addi	r5,sp,8
  d0322c:	d8c00115 	stw	r3,4(sp)
  d03230:	d8800015 	stw	r2,0(sp)
  d03234:	dfc00715 	stw	ra,28(sp)
  d03238:	0d039b40 	call	d039b4 <__unpack_d>
  d0323c:	d9c00517 	ldw	r7,20(sp)
  d03240:	da000617 	ldw	r8,24(sp)
  d03244:	02d00034 	movhi	r11,16384
  d03248:	5affffc4 	addi	r11,r11,-1
  d0324c:	3812d7ba 	srli	r9,r7,30
  d03250:	401a90ba 	slli	r13,r8,2
  d03254:	3ac4703a 	and	r2,r7,r11
  d03258:	0007883a 	mov	r3,zero
  d0325c:	6a52b03a 	or	r9,r13,r9
  d03260:	10c4b03a 	or	r2,r2,r3
  d03264:	d9000217 	ldw	r4,8(sp)
  d03268:	d9400317 	ldw	r5,12(sp)
  d0326c:	d9800417 	ldw	r6,16(sp)
  d03270:	480f883a 	mov	r7,r9
  d03274:	10000126 	beq	r2,zero,d0327c <__truncdfsf2+0x64>
  d03278:	49c00054 	ori	r7,r9,1
  d0327c:	0d036740 	call	d03674 <__make_fp>
  d03280:	dfc00717 	ldw	ra,28(sp)
  d03284:	dec00804 	addi	sp,sp,32
  d03288:	f800283a 	ret

00d0328c <__muldi3>:
  d0328c:	2011883a 	mov	r8,r4
  d03290:	427fffcc 	andi	r9,r8,65535
  d03294:	4018d43a 	srli	r12,r8,16
  d03298:	32bfffcc 	andi	r10,r6,65535
  d0329c:	3016d43a 	srli	r11,r6,16
  d032a0:	4a85383a 	mul	r2,r9,r10
  d032a4:	6295383a 	mul	r10,r12,r10
  d032a8:	4ad3383a 	mul	r9,r9,r11
  d032ac:	113fffcc 	andi	r4,r2,65535
  d032b0:	1004d43a 	srli	r2,r2,16
  d032b4:	4a93883a 	add	r9,r9,r10
  d032b8:	3807883a 	mov	r3,r7
  d032bc:	1245883a 	add	r2,r2,r9
  d032c0:	280f883a 	mov	r7,r5
  d032c4:	180b883a 	mov	r5,r3
  d032c8:	1006943a 	slli	r3,r2,16
  d032cc:	defffd04 	addi	sp,sp,-12
  d032d0:	dc800215 	stw	r18,8(sp)
  d032d4:	1907883a 	add	r3,r3,r4
  d032d8:	dc400115 	stw	r17,4(sp)
  d032dc:	dc000015 	stw	r16,0(sp)
  d032e0:	4165383a 	mul	r18,r8,r5
  d032e4:	31e3383a 	mul	r17,r6,r7
  d032e8:	1012d43a 	srli	r9,r2,16
  d032ec:	62d9383a 	mul	r12,r12,r11
  d032f0:	181f883a 	mov	r15,r3
  d032f4:	1280022e 	bgeu	r2,r10,d03300 <__muldi3+0x74>
  d032f8:	00800074 	movhi	r2,1
  d032fc:	6099883a 	add	r12,r12,r2
  d03300:	624d883a 	add	r6,r12,r9
  d03304:	9187883a 	add	r3,r18,r6
  d03308:	88c7883a 	add	r3,r17,r3
  d0330c:	7805883a 	mov	r2,r15
  d03310:	dc800217 	ldw	r18,8(sp)
  d03314:	dc400117 	ldw	r17,4(sp)
  d03318:	dc000017 	ldw	r16,0(sp)
  d0331c:	dec00304 	addi	sp,sp,12
  d03320:	f800283a 	ret

00d03324 <__clzsi2>:
  d03324:	00bfffd4 	movui	r2,65535
  d03328:	11000e36 	bltu	r2,r4,d03364 <__clzsi2+0x40>
  d0332c:	00803fc4 	movi	r2,255
  d03330:	01400204 	movi	r5,8
  d03334:	0007883a 	mov	r3,zero
  d03338:	11001036 	bltu	r2,r4,d0337c <__clzsi2+0x58>
  d0333c:	000b883a 	mov	r5,zero
  d03340:	20c6d83a 	srl	r3,r4,r3
  d03344:	00803474 	movhi	r2,209
  d03348:	10840704 	addi	r2,r2,4124
  d0334c:	1887883a 	add	r3,r3,r2
  d03350:	18800003 	ldbu	r2,0(r3)
  d03354:	00c00804 	movi	r3,32
  d03358:	2885883a 	add	r2,r5,r2
  d0335c:	1885c83a 	sub	r2,r3,r2
  d03360:	f800283a 	ret
  d03364:	01400404 	movi	r5,16
  d03368:	00804034 	movhi	r2,256
  d0336c:	10bfffc4 	addi	r2,r2,-1
  d03370:	2807883a 	mov	r3,r5
  d03374:	113ff22e 	bgeu	r2,r4,d03340 <__clzsi2+0x1c>
  d03378:	01400604 	movi	r5,24
  d0337c:	2807883a 	mov	r3,r5
  d03380:	20c6d83a 	srl	r3,r4,r3
  d03384:	00803474 	movhi	r2,209
  d03388:	10840704 	addi	r2,r2,4124
  d0338c:	1887883a 	add	r3,r3,r2
  d03390:	18800003 	ldbu	r2,0(r3)
  d03394:	00c00804 	movi	r3,32
  d03398:	2885883a 	add	r2,r5,r2
  d0339c:	1885c83a 	sub	r2,r3,r2
  d033a0:	f800283a 	ret

00d033a4 <__pack_f>:
  d033a4:	20c00017 	ldw	r3,0(r4)
  d033a8:	01c00044 	movi	r7,1
  d033ac:	21800317 	ldw	r6,12(r4)
  d033b0:	21400117 	ldw	r5,4(r4)
  d033b4:	38c02d2e 	bgeu	r7,r3,d0346c <__pack_f+0xc8>
  d033b8:	00800104 	movi	r2,4
  d033bc:	18802826 	beq	r3,r2,d03460 <__pack_f+0xbc>
  d033c0:	00800084 	movi	r2,2
  d033c4:	18800126 	beq	r3,r2,d033cc <__pack_f+0x28>
  d033c8:	3000101e 	bne	r6,zero,d0340c <__pack_f+0x68>
  d033cc:	000d883a 	mov	r6,zero
  d033d0:	0007883a 	mov	r3,zero
  d033d4:	19003fcc 	andi	r4,r3,255
  d033d8:	200895fa 	slli	r4,r4,23
  d033dc:	00c02034 	movhi	r3,128
  d033e0:	18ffffc4 	addi	r3,r3,-1
  d033e4:	30c6703a 	and	r3,r6,r3
  d033e8:	10a0002c 	andhi	r2,r2,32768
  d033ec:	10c4b03a 	or	r2,r2,r3
  d033f0:	280a97fa 	slli	r5,r5,31
  d033f4:	1104b03a 	or	r2,r2,r4
  d033f8:	00e00034 	movhi	r3,32768
  d033fc:	18ffffc4 	addi	r3,r3,-1
  d03400:	10c4703a 	and	r2,r2,r3
  d03404:	1144b03a 	or	r2,r2,r5
  d03408:	f800283a 	ret
  d0340c:	21000217 	ldw	r4,8(r4)
  d03410:	00bfe084 	movi	r2,-126
  d03414:	20801b16 	blt	r4,r2,d03484 <__pack_f+0xe0>
  d03418:	00801fc4 	movi	r2,127
  d0341c:	11001016 	blt	r2,r4,d03460 <__pack_f+0xbc>
  d03420:	308e703a 	and	r7,r6,r2
  d03424:	2087883a 	add	r3,r4,r2
  d03428:	00801004 	movi	r2,64
  d0342c:	38800526 	beq	r7,r2,d03444 <__pack_f+0xa0>
  d03430:	31800fc4 	addi	r6,r6,63
  d03434:	30000716 	blt	r6,zero,d03454 <__pack_f+0xb0>
  d03438:	300490ba 	slli	r2,r6,2
  d0343c:	100cd27a 	srli	r6,r2,9
  d03440:	003fe406 	br	d033d4 <__pack_f+0x30>
  d03444:	3080200c 	andi	r2,r6,128
  d03448:	103ffa26 	beq	r2,zero,d03434 <__pack_f+0x90>
  d0344c:	31cd883a 	add	r6,r6,r7
  d03450:	003ff806 	br	d03434 <__pack_f+0x90>
  d03454:	300cd07a 	srli	r6,r6,1
  d03458:	18c00044 	addi	r3,r3,1
  d0345c:	003ff606 	br	d03438 <__pack_f+0x94>
  d03460:	000d883a 	mov	r6,zero
  d03464:	00ffffc4 	movi	r3,-1
  d03468:	003fda06 	br	d033d4 <__pack_f+0x30>
  d0346c:	31800434 	orhi	r6,r6,16
  d03470:	00802034 	movhi	r2,128
  d03474:	10bfffc4 	addi	r2,r2,-1
  d03478:	308c703a 	and	r6,r6,r2
  d0347c:	00ffffc4 	movi	r3,-1
  d03480:	003fd406 	br	d033d4 <__pack_f+0x30>
  d03484:	1109c83a 	sub	r4,r2,r4
  d03488:	00800644 	movi	r2,25
  d0348c:	11001216 	blt	r2,r4,d034d8 <__pack_f+0x134>
  d03490:	3904983a 	sll	r2,r7,r4
  d03494:	3106d83a 	srl	r3,r6,r4
  d03498:	10bfffc4 	addi	r2,r2,-1
  d0349c:	3084703a 	and	r2,r6,r2
  d034a0:	1004c03a 	cmpne	r2,r2,zero
  d034a4:	1886b03a 	or	r3,r3,r2
  d034a8:	19001fcc 	andi	r4,r3,127
  d034ac:	00801004 	movi	r2,64
  d034b0:	20800c26 	beq	r4,r2,d034e4 <__pack_f+0x140>
  d034b4:	18c00fc4 	addi	r3,r3,63
  d034b8:	00900034 	movhi	r2,16384
  d034bc:	10bfffc4 	addi	r2,r2,-1
  d034c0:	180cd1fa 	srli	r6,r3,7
  d034c4:	10c7803a 	cmpltu	r3,r2,r3
  d034c8:	00802034 	movhi	r2,128
  d034cc:	10bfffc4 	addi	r2,r2,-1
  d034d0:	308c703a 	and	r6,r6,r2
  d034d4:	003fbf06 	br	d033d4 <__pack_f+0x30>
  d034d8:	0007883a 	mov	r3,zero
  d034dc:	000d883a 	mov	r6,zero
  d034e0:	003ff906 	br	d034c8 <__pack_f+0x124>
  d034e4:	1880200c 	andi	r2,r3,128
  d034e8:	10000126 	beq	r2,zero,d034f0 <__pack_f+0x14c>
  d034ec:	1907883a 	add	r3,r3,r4
  d034f0:	180cd1fa 	srli	r6,r3,7
  d034f4:	00900034 	movhi	r2,16384
  d034f8:	10bfffc4 	addi	r2,r2,-1
  d034fc:	10c7803a 	cmpltu	r3,r2,r3
  d03500:	003ff106 	br	d034c8 <__pack_f+0x124>

00d03504 <__unpack_f>:
  d03504:	21800017 	ldw	r6,0(r4)
  d03508:	00c02034 	movhi	r3,128
  d0350c:	18ffffc4 	addi	r3,r3,-1
  d03510:	3004d5fa 	srli	r2,r6,23
  d03514:	3008d7fa 	srli	r4,r6,31
  d03518:	30ce703a 	and	r7,r6,r3
  d0351c:	10c03fcc 	andi	r3,r2,255
  d03520:	29000115 	stw	r4,4(r5)
  d03524:	1800131e 	bne	r3,zero,d03574 <__unpack_f+0x70>
  d03528:	38000f26 	beq	r7,zero,d03568 <__unpack_f+0x64>
  d0352c:	380691fa 	slli	r3,r7,7
  d03530:	01bfe084 	movi	r6,-126
  d03534:	008000c4 	movi	r2,3
  d03538:	01100034 	movhi	r4,16384
  d0353c:	213fffc4 	addi	r4,r4,-1
  d03540:	28800015 	stw	r2,0(r5)
  d03544:	29800215 	stw	r6,8(r5)
  d03548:	20c00536 	bltu	r4,r3,d03560 <__unpack_f+0x5c>
  d0354c:	3005883a 	mov	r2,r6
  d03550:	18c7883a 	add	r3,r3,r3
  d03554:	10bfffc4 	addi	r2,r2,-1
  d03558:	20fffd2e 	bgeu	r4,r3,d03550 <__unpack_f+0x4c>
  d0355c:	28800215 	stw	r2,8(r5)
  d03560:	28c00315 	stw	r3,12(r5)
  d03564:	f800283a 	ret
  d03568:	00800084 	movi	r2,2
  d0356c:	28800015 	stw	r2,0(r5)
  d03570:	f800283a 	ret
  d03574:	00803fc4 	movi	r2,255
  d03578:	18800826 	beq	r3,r2,d0359c <__unpack_f+0x98>
  d0357c:	380491fa 	slli	r2,r7,7
  d03580:	18ffe044 	addi	r3,r3,-127
  d03584:	28c00215 	stw	r3,8(r5)
  d03588:	10900034 	orhi	r2,r2,16384
  d0358c:	28800315 	stw	r2,12(r5)
  d03590:	008000c4 	movi	r2,3
  d03594:	28800015 	stw	r2,0(r5)
  d03598:	f800283a 	ret
  d0359c:	3800031e 	bne	r7,zero,d035ac <__unpack_f+0xa8>
  d035a0:	00800104 	movi	r2,4
  d035a4:	28800015 	stw	r2,0(r5)
  d035a8:	f800283a 	ret
  d035ac:	3080042c 	andhi	r2,r6,16
  d035b0:	10000426 	beq	r2,zero,d035c4 <__unpack_f+0xc0>
  d035b4:	00800044 	movi	r2,1
  d035b8:	28800015 	stw	r2,0(r5)
  d035bc:	29c00315 	stw	r7,12(r5)
  d035c0:	f800283a 	ret
  d035c4:	28000015 	stw	zero,0(r5)
  d035c8:	003ffc06 	br	d035bc <__unpack_f+0xb8>

00d035cc <__fpcmp_parts_f>:
  d035cc:	21800017 	ldw	r6,0(r4)
  d035d0:	00c00044 	movi	r3,1
  d035d4:	19800a2e 	bgeu	r3,r6,d03600 <__fpcmp_parts_f+0x34>
  d035d8:	28800017 	ldw	r2,0(r5)
  d035dc:	1880082e 	bgeu	r3,r2,d03600 <__fpcmp_parts_f+0x34>
  d035e0:	00c00104 	movi	r3,4
  d035e4:	30c01e26 	beq	r6,r3,d03660 <__fpcmp_parts_f+0x94>
  d035e8:	10c01a26 	beq	r2,r3,d03654 <__fpcmp_parts_f+0x88>
  d035ec:	00c00084 	movi	r3,2
  d035f0:	30c00526 	beq	r6,r3,d03608 <__fpcmp_parts_f+0x3c>
  d035f4:	10c0071e 	bne	r2,r3,d03614 <__fpcmp_parts_f+0x48>
  d035f8:	20800117 	ldw	r2,4(r4)
  d035fc:	1000091e 	bne	r2,zero,d03624 <__fpcmp_parts_f+0x58>
  d03600:	00800044 	movi	r2,1
  d03604:	f800283a 	ret
  d03608:	10c0121e 	bne	r2,r3,d03654 <__fpcmp_parts_f+0x88>
  d0360c:	0005883a 	mov	r2,zero
  d03610:	f800283a 	ret
  d03614:	20c00117 	ldw	r3,4(r4)
  d03618:	28800117 	ldw	r2,4(r5)
  d0361c:	18800326 	beq	r3,r2,d0362c <__fpcmp_parts_f+0x60>
  d03620:	183ff726 	beq	r3,zero,d03600 <__fpcmp_parts_f+0x34>
  d03624:	00bfffc4 	movi	r2,-1
  d03628:	f800283a 	ret
  d0362c:	21800217 	ldw	r6,8(r4)
  d03630:	28800217 	ldw	r2,8(r5)
  d03634:	11bffa16 	blt	r2,r6,d03620 <__fpcmp_parts_f+0x54>
  d03638:	30800416 	blt	r6,r2,d0364c <__fpcmp_parts_f+0x80>
  d0363c:	21000317 	ldw	r4,12(r4)
  d03640:	29400317 	ldw	r5,12(r5)
  d03644:	293ff636 	bltu	r5,r4,d03620 <__fpcmp_parts_f+0x54>
  d03648:	217ff02e 	bgeu	r4,r5,d0360c <__fpcmp_parts_f+0x40>
  d0364c:	183fec1e 	bne	r3,zero,d03600 <__fpcmp_parts_f+0x34>
  d03650:	003ff406 	br	d03624 <__fpcmp_parts_f+0x58>
  d03654:	28800117 	ldw	r2,4(r5)
  d03658:	103fe91e 	bne	r2,zero,d03600 <__fpcmp_parts_f+0x34>
  d0365c:	003ff106 	br	d03624 <__fpcmp_parts_f+0x58>
  d03660:	11bfe51e 	bne	r2,r6,d035f8 <__fpcmp_parts_f+0x2c>
  d03664:	28c00117 	ldw	r3,4(r5)
  d03668:	20800117 	ldw	r2,4(r4)
  d0366c:	1885c83a 	sub	r2,r3,r2
  d03670:	f800283a 	ret

00d03674 <__make_fp>:
  d03674:	defffb04 	addi	sp,sp,-20
  d03678:	d9000015 	stw	r4,0(sp)
  d0367c:	d809883a 	mov	r4,sp
  d03680:	dfc00415 	stw	ra,16(sp)
  d03684:	d9400115 	stw	r5,4(sp)
  d03688:	d9800215 	stw	r6,8(sp)
  d0368c:	d9c00315 	stw	r7,12(sp)
  d03690:	0d033a40 	call	d033a4 <__pack_f>
  d03694:	dfc00417 	ldw	ra,16(sp)
  d03698:	dec00504 	addi	sp,sp,20
  d0369c:	f800283a 	ret

00d036a0 <__pack_d>:
  d036a0:	20c00017 	ldw	r3,0(r4)
  d036a4:	defffd04 	addi	sp,sp,-12
  d036a8:	dc000015 	stw	r16,0(sp)
  d036ac:	dc800215 	stw	r18,8(sp)
  d036b0:	dc400115 	stw	r17,4(sp)
  d036b4:	00800044 	movi	r2,1
  d036b8:	22000317 	ldw	r8,12(r4)
  d036bc:	001f883a 	mov	r15,zero
  d036c0:	22400417 	ldw	r9,16(r4)
  d036c4:	24000117 	ldw	r16,4(r4)
  d036c8:	10c0552e 	bgeu	r2,r3,d03820 <__pack_d+0x180>
  d036cc:	00800104 	movi	r2,4
  d036d0:	18804f26 	beq	r3,r2,d03810 <__pack_d+0x170>
  d036d4:	00800084 	movi	r2,2
  d036d8:	18800226 	beq	r3,r2,d036e4 <__pack_d+0x44>
  d036dc:	4244b03a 	or	r2,r8,r9
  d036e0:	10001a1e 	bne	r2,zero,d0374c <__pack_d+0xac>
  d036e4:	000d883a 	mov	r6,zero
  d036e8:	000f883a 	mov	r7,zero
  d036ec:	0011883a 	mov	r8,zero
  d036f0:	00800434 	movhi	r2,16
  d036f4:	10bfffc4 	addi	r2,r2,-1
  d036f8:	301d883a 	mov	r14,r6
  d036fc:	3884703a 	and	r2,r7,r2
  d03700:	400a953a 	slli	r5,r8,20
  d03704:	79bffc2c 	andhi	r6,r15,65520
  d03708:	308cb03a 	or	r6,r6,r2
  d0370c:	00e00434 	movhi	r3,32784
  d03710:	18ffffc4 	addi	r3,r3,-1
  d03714:	800497fa 	slli	r2,r16,31
  d03718:	30c6703a 	and	r3,r6,r3
  d0371c:	1946b03a 	or	r3,r3,r5
  d03720:	01600034 	movhi	r5,32768
  d03724:	297fffc4 	addi	r5,r5,-1
  d03728:	194a703a 	and	r5,r3,r5
  d0372c:	288ab03a 	or	r5,r5,r2
  d03730:	2807883a 	mov	r3,r5
  d03734:	7005883a 	mov	r2,r14
  d03738:	dc800217 	ldw	r18,8(sp)
  d0373c:	dc400117 	ldw	r17,4(sp)
  d03740:	dc000017 	ldw	r16,0(sp)
  d03744:	dec00304 	addi	sp,sp,12
  d03748:	f800283a 	ret
  d0374c:	21000217 	ldw	r4,8(r4)
  d03750:	00bf0084 	movi	r2,-1022
  d03754:	20803f16 	blt	r4,r2,d03854 <__pack_d+0x1b4>
  d03758:	0080ffc4 	movi	r2,1023
  d0375c:	11002c16 	blt	r2,r4,d03810 <__pack_d+0x170>
  d03760:	00803fc4 	movi	r2,255
  d03764:	408c703a 	and	r6,r8,r2
  d03768:	00802004 	movi	r2,128
  d0376c:	0007883a 	mov	r3,zero
  d03770:	000f883a 	mov	r7,zero
  d03774:	2280ffc4 	addi	r10,r4,1023
  d03778:	30801e26 	beq	r6,r2,d037f4 <__pack_d+0x154>
  d0377c:	00801fc4 	movi	r2,127
  d03780:	4089883a 	add	r4,r8,r2
  d03784:	220d803a 	cmpltu	r6,r4,r8
  d03788:	324d883a 	add	r6,r6,r9
  d0378c:	2011883a 	mov	r8,r4
  d03790:	3013883a 	mov	r9,r6
  d03794:	00880034 	movhi	r2,8192
  d03798:	10bfffc4 	addi	r2,r2,-1
  d0379c:	12400d36 	bltu	r2,r9,d037d4 <__pack_d+0x134>
  d037a0:	4804963a 	slli	r2,r9,24
  d037a4:	400cd23a 	srli	r6,r8,8
  d037a8:	480ed23a 	srli	r7,r9,8
  d037ac:	013fffc4 	movi	r4,-1
  d037b0:	118cb03a 	or	r6,r2,r6
  d037b4:	01400434 	movhi	r5,16
  d037b8:	297fffc4 	addi	r5,r5,-1
  d037bc:	3104703a 	and	r2,r6,r4
  d037c0:	3946703a 	and	r3,r7,r5
  d037c4:	5201ffcc 	andi	r8,r10,2047
  d037c8:	100d883a 	mov	r6,r2
  d037cc:	180f883a 	mov	r7,r3
  d037d0:	003fc706 	br	d036f0 <__pack_d+0x50>
  d037d4:	480897fa 	slli	r4,r9,31
  d037d8:	4004d07a 	srli	r2,r8,1
  d037dc:	4806d07a 	srli	r3,r9,1
  d037e0:	52800044 	addi	r10,r10,1
  d037e4:	2084b03a 	or	r2,r4,r2
  d037e8:	1011883a 	mov	r8,r2
  d037ec:	1813883a 	mov	r9,r3
  d037f0:	003feb06 	br	d037a0 <__pack_d+0x100>
  d037f4:	383fe11e 	bne	r7,zero,d0377c <__pack_d+0xdc>
  d037f8:	01004004 	movi	r4,256
  d037fc:	4104703a 	and	r2,r8,r4
  d03800:	10c4b03a 	or	r2,r2,r3
  d03804:	103fe326 	beq	r2,zero,d03794 <__pack_d+0xf4>
  d03808:	3005883a 	mov	r2,r6
  d0380c:	003fdc06 	br	d03780 <__pack_d+0xe0>
  d03810:	000d883a 	mov	r6,zero
  d03814:	000f883a 	mov	r7,zero
  d03818:	0201ffc4 	movi	r8,2047
  d0381c:	003fb406 	br	d036f0 <__pack_d+0x50>
  d03820:	0005883a 	mov	r2,zero
  d03824:	00c00234 	movhi	r3,8
  d03828:	408cb03a 	or	r6,r8,r2
  d0382c:	48ceb03a 	or	r7,r9,r3
  d03830:	013fffc4 	movi	r4,-1
  d03834:	01400434 	movhi	r5,16
  d03838:	297fffc4 	addi	r5,r5,-1
  d0383c:	3104703a 	and	r2,r6,r4
  d03840:	3946703a 	and	r3,r7,r5
  d03844:	100d883a 	mov	r6,r2
  d03848:	180f883a 	mov	r7,r3
  d0384c:	0201ffc4 	movi	r8,2047
  d03850:	003fa706 	br	d036f0 <__pack_d+0x50>
  d03854:	1109c83a 	sub	r4,r2,r4
  d03858:	00800e04 	movi	r2,56
  d0385c:	11004316 	blt	r2,r4,d0396c <__pack_d+0x2cc>
  d03860:	21fff804 	addi	r7,r4,-32
  d03864:	38004516 	blt	r7,zero,d0397c <__pack_d+0x2dc>
  d03868:	49d8d83a 	srl	r12,r9,r7
  d0386c:	001b883a 	mov	r13,zero
  d03870:	0023883a 	mov	r17,zero
  d03874:	01400044 	movi	r5,1
  d03878:	0025883a 	mov	r18,zero
  d0387c:	38004716 	blt	r7,zero,d0399c <__pack_d+0x2fc>
  d03880:	29d6983a 	sll	r11,r5,r7
  d03884:	0015883a 	mov	r10,zero
  d03888:	00bfffc4 	movi	r2,-1
  d0388c:	5089883a 	add	r4,r10,r2
  d03890:	588b883a 	add	r5,r11,r2
  d03894:	228d803a 	cmpltu	r6,r4,r10
  d03898:	314b883a 	add	r5,r6,r5
  d0389c:	4104703a 	and	r2,r8,r4
  d038a0:	4946703a 	and	r3,r9,r5
  d038a4:	10c4b03a 	or	r2,r2,r3
  d038a8:	10000226 	beq	r2,zero,d038b4 <__pack_d+0x214>
  d038ac:	04400044 	movi	r17,1
  d038b0:	0025883a 	mov	r18,zero
  d038b4:	00803fc4 	movi	r2,255
  d038b8:	644eb03a 	or	r7,r12,r17
  d038bc:	3892703a 	and	r9,r7,r2
  d038c0:	00802004 	movi	r2,128
  d038c4:	6c90b03a 	or	r8,r13,r18
  d038c8:	0015883a 	mov	r10,zero
  d038cc:	48801626 	beq	r9,r2,d03928 <__pack_d+0x288>
  d038d0:	01001fc4 	movi	r4,127
  d038d4:	3905883a 	add	r2,r7,r4
  d038d8:	11cd803a 	cmpltu	r6,r2,r7
  d038dc:	320d883a 	add	r6,r6,r8
  d038e0:	100f883a 	mov	r7,r2
  d038e4:	00840034 	movhi	r2,4096
  d038e8:	10bfffc4 	addi	r2,r2,-1
  d038ec:	3011883a 	mov	r8,r6
  d038f0:	0007883a 	mov	r3,zero
  d038f4:	11801b36 	bltu	r2,r6,d03964 <__pack_d+0x2c4>
  d038f8:	4004963a 	slli	r2,r8,24
  d038fc:	3808d23a 	srli	r4,r7,8
  d03900:	400ad23a 	srli	r5,r8,8
  d03904:	1813883a 	mov	r9,r3
  d03908:	1108b03a 	or	r4,r2,r4
  d0390c:	00bfffc4 	movi	r2,-1
  d03910:	00c00434 	movhi	r3,16
  d03914:	18ffffc4 	addi	r3,r3,-1
  d03918:	208c703a 	and	r6,r4,r2
  d0391c:	28ce703a 	and	r7,r5,r3
  d03920:	4a01ffcc 	andi	r8,r9,2047
  d03924:	003f7206 	br	d036f0 <__pack_d+0x50>
  d03928:	503fe91e 	bne	r10,zero,d038d0 <__pack_d+0x230>
  d0392c:	01004004 	movi	r4,256
  d03930:	3904703a 	and	r2,r7,r4
  d03934:	0007883a 	mov	r3,zero
  d03938:	10c4b03a 	or	r2,r2,r3
  d0393c:	10000626 	beq	r2,zero,d03958 <__pack_d+0x2b8>
  d03940:	3a45883a 	add	r2,r7,r9
  d03944:	11cd803a 	cmpltu	r6,r2,r7
  d03948:	320d883a 	add	r6,r6,r8
  d0394c:	100f883a 	mov	r7,r2
  d03950:	3011883a 	mov	r8,r6
  d03954:	0007883a 	mov	r3,zero
  d03958:	00840034 	movhi	r2,4096
  d0395c:	10bfffc4 	addi	r2,r2,-1
  d03960:	123fe52e 	bgeu	r2,r8,d038f8 <__pack_d+0x258>
  d03964:	00c00044 	movi	r3,1
  d03968:	003fe306 	br	d038f8 <__pack_d+0x258>
  d0396c:	0009883a 	mov	r4,zero
  d03970:	0013883a 	mov	r9,zero
  d03974:	000b883a 	mov	r5,zero
  d03978:	003fe406 	br	d0390c <__pack_d+0x26c>
  d0397c:	4a47883a 	add	r3,r9,r9
  d03980:	008007c4 	movi	r2,31
  d03984:	1105c83a 	sub	r2,r2,r4
  d03988:	1886983a 	sll	r3,r3,r2
  d0398c:	4118d83a 	srl	r12,r8,r4
  d03990:	491ad83a 	srl	r13,r9,r4
  d03994:	1b18b03a 	or	r12,r3,r12
  d03998:	003fb506 	br	d03870 <__pack_d+0x1d0>
  d0399c:	2806d07a 	srli	r3,r5,1
  d039a0:	008007c4 	movi	r2,31
  d039a4:	1105c83a 	sub	r2,r2,r4
  d039a8:	1896d83a 	srl	r11,r3,r2
  d039ac:	2914983a 	sll	r10,r5,r4
  d039b0:	003fb506 	br	d03888 <__pack_d+0x1e8>

00d039b4 <__unpack_d>:
  d039b4:	20c00117 	ldw	r3,4(r4)
  d039b8:	22400017 	ldw	r9,0(r4)
  d039bc:	00800434 	movhi	r2,16
  d039c0:	10bfffc4 	addi	r2,r2,-1
  d039c4:	1808d53a 	srli	r4,r3,20
  d039c8:	180cd7fa 	srli	r6,r3,31
  d039cc:	1894703a 	and	r10,r3,r2
  d039d0:	2201ffcc 	andi	r8,r4,2047
  d039d4:	281b883a 	mov	r13,r5
  d039d8:	4817883a 	mov	r11,r9
  d039dc:	29800115 	stw	r6,4(r5)
  d039e0:	5019883a 	mov	r12,r10
  d039e4:	40001e1e 	bne	r8,zero,d03a60 <__unpack_d+0xac>
  d039e8:	4a84b03a 	or	r2,r9,r10
  d039ec:	10001926 	beq	r2,zero,d03a54 <__unpack_d+0xa0>
  d039f0:	4804d63a 	srli	r2,r9,24
  d039f4:	500c923a 	slli	r6,r10,8
  d039f8:	013f0084 	movi	r4,-1022
  d039fc:	00c40034 	movhi	r3,4096
  d03a00:	18ffffc4 	addi	r3,r3,-1
  d03a04:	118cb03a 	or	r6,r2,r6
  d03a08:	008000c4 	movi	r2,3
  d03a0c:	480a923a 	slli	r5,r9,8
  d03a10:	68800015 	stw	r2,0(r13)
  d03a14:	69000215 	stw	r4,8(r13)
  d03a18:	19800b36 	bltu	r3,r6,d03a48 <__unpack_d+0x94>
  d03a1c:	200f883a 	mov	r7,r4
  d03a20:	1811883a 	mov	r8,r3
  d03a24:	2945883a 	add	r2,r5,r5
  d03a28:	1149803a 	cmpltu	r4,r2,r5
  d03a2c:	3187883a 	add	r3,r6,r6
  d03a30:	20c9883a 	add	r4,r4,r3
  d03a34:	100b883a 	mov	r5,r2
  d03a38:	200d883a 	mov	r6,r4
  d03a3c:	39ffffc4 	addi	r7,r7,-1
  d03a40:	413ff82e 	bgeu	r8,r4,d03a24 <__unpack_d+0x70>
  d03a44:	69c00215 	stw	r7,8(r13)
  d03a48:	69800415 	stw	r6,16(r13)
  d03a4c:	69400315 	stw	r5,12(r13)
  d03a50:	f800283a 	ret
  d03a54:	00800084 	movi	r2,2
  d03a58:	28800015 	stw	r2,0(r5)
  d03a5c:	f800283a 	ret
  d03a60:	0081ffc4 	movi	r2,2047
  d03a64:	40800f26 	beq	r8,r2,d03aa4 <__unpack_d+0xf0>
  d03a68:	480cd63a 	srli	r6,r9,24
  d03a6c:	5006923a 	slli	r3,r10,8
  d03a70:	4804923a 	slli	r2,r9,8
  d03a74:	0009883a 	mov	r4,zero
  d03a78:	30c6b03a 	or	r3,r6,r3
  d03a7c:	01440034 	movhi	r5,4096
  d03a80:	110cb03a 	or	r6,r2,r4
  d03a84:	423f0044 	addi	r8,r8,-1023
  d03a88:	194eb03a 	or	r7,r3,r5
  d03a8c:	008000c4 	movi	r2,3
  d03a90:	69c00415 	stw	r7,16(r13)
  d03a94:	6a000215 	stw	r8,8(r13)
  d03a98:	68800015 	stw	r2,0(r13)
  d03a9c:	69800315 	stw	r6,12(r13)
  d03aa0:	f800283a 	ret
  d03aa4:	4a84b03a 	or	r2,r9,r10
  d03aa8:	1000031e 	bne	r2,zero,d03ab8 <__unpack_d+0x104>
  d03aac:	00800104 	movi	r2,4
  d03ab0:	28800015 	stw	r2,0(r5)
  d03ab4:	f800283a 	ret
  d03ab8:	0009883a 	mov	r4,zero
  d03abc:	01400234 	movhi	r5,8
  d03ac0:	4904703a 	and	r2,r9,r4
  d03ac4:	5146703a 	and	r3,r10,r5
  d03ac8:	10c4b03a 	or	r2,r2,r3
  d03acc:	10000526 	beq	r2,zero,d03ae4 <__unpack_d+0x130>
  d03ad0:	00800044 	movi	r2,1
  d03ad4:	68800015 	stw	r2,0(r13)
  d03ad8:	6b000415 	stw	r12,16(r13)
  d03adc:	6ac00315 	stw	r11,12(r13)
  d03ae0:	f800283a 	ret
  d03ae4:	68000015 	stw	zero,0(r13)
  d03ae8:	003ffb06 	br	d03ad8 <__unpack_d+0x124>

00d03aec <__fpcmp_parts_d>:
  d03aec:	21800017 	ldw	r6,0(r4)
  d03af0:	00c00044 	movi	r3,1
  d03af4:	19800a2e 	bgeu	r3,r6,d03b20 <__fpcmp_parts_d+0x34>
  d03af8:	28800017 	ldw	r2,0(r5)
  d03afc:	1880082e 	bgeu	r3,r2,d03b20 <__fpcmp_parts_d+0x34>
  d03b00:	00c00104 	movi	r3,4
  d03b04:	30c02626 	beq	r6,r3,d03ba0 <__fpcmp_parts_d+0xb4>
  d03b08:	10c02226 	beq	r2,r3,d03b94 <__fpcmp_parts_d+0xa8>
  d03b0c:	00c00084 	movi	r3,2
  d03b10:	30c00526 	beq	r6,r3,d03b28 <__fpcmp_parts_d+0x3c>
  d03b14:	10c0071e 	bne	r2,r3,d03b34 <__fpcmp_parts_d+0x48>
  d03b18:	20800117 	ldw	r2,4(r4)
  d03b1c:	1000091e 	bne	r2,zero,d03b44 <__fpcmp_parts_d+0x58>
  d03b20:	00800044 	movi	r2,1
  d03b24:	f800283a 	ret
  d03b28:	10c01a1e 	bne	r2,r3,d03b94 <__fpcmp_parts_d+0xa8>
  d03b2c:	0005883a 	mov	r2,zero
  d03b30:	f800283a 	ret
  d03b34:	22000117 	ldw	r8,4(r4)
  d03b38:	28800117 	ldw	r2,4(r5)
  d03b3c:	40800326 	beq	r8,r2,d03b4c <__fpcmp_parts_d+0x60>
  d03b40:	403ff726 	beq	r8,zero,d03b20 <__fpcmp_parts_d+0x34>
  d03b44:	00bfffc4 	movi	r2,-1
  d03b48:	f800283a 	ret
  d03b4c:	20c00217 	ldw	r3,8(r4)
  d03b50:	28800217 	ldw	r2,8(r5)
  d03b54:	10fffa16 	blt	r2,r3,d03b40 <__fpcmp_parts_d+0x54>
  d03b58:	18800916 	blt	r3,r2,d03b80 <__fpcmp_parts_d+0x94>
  d03b5c:	21c00417 	ldw	r7,16(r4)
  d03b60:	28c00417 	ldw	r3,16(r5)
  d03b64:	21800317 	ldw	r6,12(r4)
  d03b68:	28800317 	ldw	r2,12(r5)
  d03b6c:	19fff436 	bltu	r3,r7,d03b40 <__fpcmp_parts_d+0x54>
  d03b70:	38c00526 	beq	r7,r3,d03b88 <__fpcmp_parts_d+0x9c>
  d03b74:	38c00236 	bltu	r7,r3,d03b80 <__fpcmp_parts_d+0x94>
  d03b78:	19ffec1e 	bne	r3,r7,d03b2c <__fpcmp_parts_d+0x40>
  d03b7c:	30bfeb2e 	bgeu	r6,r2,d03b2c <__fpcmp_parts_d+0x40>
  d03b80:	403fe71e 	bne	r8,zero,d03b20 <__fpcmp_parts_d+0x34>
  d03b84:	003fef06 	br	d03b44 <__fpcmp_parts_d+0x58>
  d03b88:	11bffa2e 	bgeu	r2,r6,d03b74 <__fpcmp_parts_d+0x88>
  d03b8c:	403fe426 	beq	r8,zero,d03b20 <__fpcmp_parts_d+0x34>
  d03b90:	003fec06 	br	d03b44 <__fpcmp_parts_d+0x58>
  d03b94:	28800117 	ldw	r2,4(r5)
  d03b98:	103fe11e 	bne	r2,zero,d03b20 <__fpcmp_parts_d+0x34>
  d03b9c:	003fe906 	br	d03b44 <__fpcmp_parts_d+0x58>
  d03ba0:	11bfdd1e 	bne	r2,r6,d03b18 <__fpcmp_parts_d+0x2c>
  d03ba4:	28c00117 	ldw	r3,4(r5)
  d03ba8:	20800117 	ldw	r2,4(r4)
  d03bac:	1885c83a 	sub	r2,r3,r2
  d03bb0:	f800283a 	ret

00d03bb4 <__errno>:
  d03bb4:	00c03474 	movhi	r3,209
  d03bb8:	18cbf904 	addi	r3,r3,12260
  d03bbc:	18800017 	ldw	r2,0(r3)
  d03bc0:	f800283a 	ret

00d03bc4 <printf>:
  d03bc4:	defffb04 	addi	sp,sp,-20
  d03bc8:	dfc00115 	stw	ra,4(sp)
  d03bcc:	d9400215 	stw	r5,8(sp)
  d03bd0:	d9800315 	stw	r6,12(sp)
  d03bd4:	d9c00415 	stw	r7,16(sp)
  d03bd8:	00803474 	movhi	r2,209
  d03bdc:	108bf904 	addi	r2,r2,12260
  d03be0:	10c00017 	ldw	r3,0(r2)
  d03be4:	200b883a 	mov	r5,r4
  d03be8:	d8800204 	addi	r2,sp,8
  d03bec:	19000217 	ldw	r4,8(r3)
  d03bf0:	100d883a 	mov	r6,r2
  d03bf4:	d8800015 	stw	r2,0(sp)
  d03bf8:	0d05d3c0 	call	d05d3c <__vfprintf_internal>
  d03bfc:	dfc00117 	ldw	ra,4(sp)
  d03c00:	dec00504 	addi	sp,sp,20
  d03c04:	f800283a 	ret

00d03c08 <_printf_r>:
  d03c08:	defffc04 	addi	sp,sp,-16
  d03c0c:	dfc00115 	stw	ra,4(sp)
  d03c10:	d9800215 	stw	r6,8(sp)
  d03c14:	d9c00315 	stw	r7,12(sp)
  d03c18:	280d883a 	mov	r6,r5
  d03c1c:	21400217 	ldw	r5,8(r4)
  d03c20:	d8c00204 	addi	r3,sp,8
  d03c24:	180f883a 	mov	r7,r3
  d03c28:	d8c00015 	stw	r3,0(sp)
  d03c2c:	0d03e900 	call	d03e90 <___vfprintf_internal_r>
  d03c30:	dfc00117 	ldw	ra,4(sp)
  d03c34:	dec00404 	addi	sp,sp,16
  d03c38:	f800283a 	ret

00d03c3c <_puts_r>:
  d03c3c:	defff604 	addi	sp,sp,-40
  d03c40:	dc400715 	stw	r17,28(sp)
  d03c44:	2023883a 	mov	r17,r4
  d03c48:	2809883a 	mov	r4,r5
  d03c4c:	dfc00915 	stw	ra,36(sp)
  d03c50:	dcc00815 	stw	r19,32(sp)
  d03c54:	2827883a 	mov	r19,r5
  d03c58:	0d03dc40 	call	d03dc4 <strlen>
  d03c5c:	89400217 	ldw	r5,8(r17)
  d03c60:	00c03474 	movhi	r3,209
  d03c64:	18c44804 	addi	r3,r3,4384
  d03c68:	01c00044 	movi	r7,1
  d03c6c:	12000044 	addi	r8,r2,1
  d03c70:	d8c00515 	stw	r3,20(sp)
  d03c74:	d9c00615 	stw	r7,24(sp)
  d03c78:	d8c00304 	addi	r3,sp,12
  d03c7c:	01c00084 	movi	r7,2
  d03c80:	8809883a 	mov	r4,r17
  d03c84:	d80d883a 	mov	r6,sp
  d03c88:	d8c00015 	stw	r3,0(sp)
  d03c8c:	dcc00315 	stw	r19,12(sp)
  d03c90:	da000215 	stw	r8,8(sp)
  d03c94:	d9c00115 	stw	r7,4(sp)
  d03c98:	d8800415 	stw	r2,16(sp)
  d03c9c:	0d07f980 	call	d07f98 <__sfvwrite_r>
  d03ca0:	00ffffc4 	movi	r3,-1
  d03ca4:	10000626 	beq	r2,zero,d03cc0 <_puts_r+0x84>
  d03ca8:	1805883a 	mov	r2,r3
  d03cac:	dfc00917 	ldw	ra,36(sp)
  d03cb0:	dcc00817 	ldw	r19,32(sp)
  d03cb4:	dc400717 	ldw	r17,28(sp)
  d03cb8:	dec00a04 	addi	sp,sp,40
  d03cbc:	f800283a 	ret
  d03cc0:	00c00284 	movi	r3,10
  d03cc4:	1805883a 	mov	r2,r3
  d03cc8:	dfc00917 	ldw	ra,36(sp)
  d03ccc:	dcc00817 	ldw	r19,32(sp)
  d03cd0:	dc400717 	ldw	r17,28(sp)
  d03cd4:	dec00a04 	addi	sp,sp,40
  d03cd8:	f800283a 	ret

00d03cdc <puts>:
  d03cdc:	00803474 	movhi	r2,209
  d03ce0:	108bf904 	addi	r2,r2,12260
  d03ce4:	200b883a 	mov	r5,r4
  d03ce8:	11000017 	ldw	r4,0(r2)
  d03cec:	0d03c3c1 	jmpi	d03c3c <_puts_r>

00d03cf0 <sprintf>:
  d03cf0:	deffe504 	addi	sp,sp,-108
  d03cf4:	2013883a 	mov	r9,r4
  d03cf8:	dfc01815 	stw	ra,96(sp)
  d03cfc:	d9801915 	stw	r6,100(sp)
  d03d00:	d9c01a15 	stw	r7,104(sp)
  d03d04:	d8801904 	addi	r2,sp,100
  d03d08:	d8800015 	stw	r2,0(sp)
  d03d0c:	00803474 	movhi	r2,209
  d03d10:	108bf904 	addi	r2,r2,12260
  d03d14:	11000017 	ldw	r4,0(r2)
  d03d18:	d9c00017 	ldw	r7,0(sp)
  d03d1c:	00808204 	movi	r2,520
  d03d20:	00e00034 	movhi	r3,32768
  d03d24:	18ffffc4 	addi	r3,r3,-1
  d03d28:	280d883a 	mov	r6,r5
  d03d2c:	d880040d 	sth	r2,16(sp)
  d03d30:	d9400104 	addi	r5,sp,4
  d03d34:	00bfffc4 	movi	r2,-1
  d03d38:	d8c00615 	stw	r3,24(sp)
  d03d3c:	d8c00315 	stw	r3,12(sp)
  d03d40:	da400515 	stw	r9,20(sp)
  d03d44:	d880048d 	sth	r2,18(sp)
  d03d48:	da400115 	stw	r9,4(sp)
  d03d4c:	0d03e900 	call	d03e90 <___vfprintf_internal_r>
  d03d50:	d8c00117 	ldw	r3,4(sp)
  d03d54:	18000005 	stb	zero,0(r3)
  d03d58:	dfc01817 	ldw	ra,96(sp)
  d03d5c:	dec01b04 	addi	sp,sp,108
  d03d60:	f800283a 	ret

00d03d64 <_sprintf_r>:
  d03d64:	deffe604 	addi	sp,sp,-104
  d03d68:	2813883a 	mov	r9,r5
  d03d6c:	dfc01815 	stw	ra,96(sp)
  d03d70:	d9c01915 	stw	r7,100(sp)
  d03d74:	d8801904 	addi	r2,sp,100
  d03d78:	d8800015 	stw	r2,0(sp)
  d03d7c:	100f883a 	mov	r7,r2
  d03d80:	00808204 	movi	r2,520
  d03d84:	00e00034 	movhi	r3,32768
  d03d88:	18ffffc4 	addi	r3,r3,-1
  d03d8c:	d880040d 	sth	r2,16(sp)
  d03d90:	d9400104 	addi	r5,sp,4
  d03d94:	00bfffc4 	movi	r2,-1
  d03d98:	d8c00615 	stw	r3,24(sp)
  d03d9c:	d8c00315 	stw	r3,12(sp)
  d03da0:	da400515 	stw	r9,20(sp)
  d03da4:	d880048d 	sth	r2,18(sp)
  d03da8:	da400115 	stw	r9,4(sp)
  d03dac:	0d03e900 	call	d03e90 <___vfprintf_internal_r>
  d03db0:	d8c00117 	ldw	r3,4(sp)
  d03db4:	18000005 	stb	zero,0(r3)
  d03db8:	dfc01817 	ldw	ra,96(sp)
  d03dbc:	dec01a04 	addi	sp,sp,104
  d03dc0:	f800283a 	ret

00d03dc4 <strlen>:
  d03dc4:	208000cc 	andi	r2,r4,3
  d03dc8:	2011883a 	mov	r8,r4
  d03dcc:	1000161e 	bne	r2,zero,d03e28 <strlen+0x64>
  d03dd0:	20c00017 	ldw	r3,0(r4)
  d03dd4:	017fbff4 	movhi	r5,65279
  d03dd8:	297fbfc4 	addi	r5,r5,-257
  d03ddc:	01e02074 	movhi	r7,32897
  d03de0:	39e02004 	addi	r7,r7,-32640
  d03de4:	1945883a 	add	r2,r3,r5
  d03de8:	11c4703a 	and	r2,r2,r7
  d03dec:	00c6303a 	nor	r3,zero,r3
  d03df0:	1886703a 	and	r3,r3,r2
  d03df4:	18000c1e 	bne	r3,zero,d03e28 <strlen+0x64>
  d03df8:	280d883a 	mov	r6,r5
  d03dfc:	380b883a 	mov	r5,r7
  d03e00:	21000104 	addi	r4,r4,4
  d03e04:	20800017 	ldw	r2,0(r4)
  d03e08:	1187883a 	add	r3,r2,r6
  d03e0c:	1946703a 	and	r3,r3,r5
  d03e10:	0084303a 	nor	r2,zero,r2
  d03e14:	10c4703a 	and	r2,r2,r3
  d03e18:	103ff926 	beq	r2,zero,d03e00 <strlen+0x3c>
  d03e1c:	20800007 	ldb	r2,0(r4)
  d03e20:	10000326 	beq	r2,zero,d03e30 <strlen+0x6c>
  d03e24:	21000044 	addi	r4,r4,1
  d03e28:	20800007 	ldb	r2,0(r4)
  d03e2c:	103ffd1e 	bne	r2,zero,d03e24 <strlen+0x60>
  d03e30:	2205c83a 	sub	r2,r4,r8
  d03e34:	f800283a 	ret

00d03e38 <__sprint_r>:
  d03e38:	30800217 	ldw	r2,8(r6)
  d03e3c:	defffe04 	addi	sp,sp,-8
  d03e40:	dc000015 	stw	r16,0(sp)
  d03e44:	dfc00115 	stw	ra,4(sp)
  d03e48:	3021883a 	mov	r16,r6
  d03e4c:	0007883a 	mov	r3,zero
  d03e50:	1000061e 	bne	r2,zero,d03e6c <__sprint_r+0x34>
  d03e54:	1805883a 	mov	r2,r3
  d03e58:	30000115 	stw	zero,4(r6)
  d03e5c:	dfc00117 	ldw	ra,4(sp)
  d03e60:	dc000017 	ldw	r16,0(sp)
  d03e64:	dec00204 	addi	sp,sp,8
  d03e68:	f800283a 	ret
  d03e6c:	0d07f980 	call	d07f98 <__sfvwrite_r>
  d03e70:	1007883a 	mov	r3,r2
  d03e74:	1805883a 	mov	r2,r3
  d03e78:	80000115 	stw	zero,4(r16)
  d03e7c:	80000215 	stw	zero,8(r16)
  d03e80:	dfc00117 	ldw	ra,4(sp)
  d03e84:	dc000017 	ldw	r16,0(sp)
  d03e88:	dec00204 	addi	sp,sp,8
  d03e8c:	f800283a 	ret

00d03e90 <___vfprintf_internal_r>:
  d03e90:	defea404 	addi	sp,sp,-1392
  d03e94:	dd815815 	stw	r22,1376(sp)
  d03e98:	dc015215 	stw	r16,1352(sp)
  d03e9c:	d9c15115 	stw	r7,1348(sp)
  d03ea0:	dfc15b15 	stw	ra,1388(sp)
  d03ea4:	df015a15 	stw	fp,1384(sp)
  d03ea8:	ddc15915 	stw	r23,1380(sp)
  d03eac:	dd415715 	stw	r21,1372(sp)
  d03eb0:	dd015615 	stw	r20,1368(sp)
  d03eb4:	dcc15515 	stw	r19,1364(sp)
  d03eb8:	dc815415 	stw	r18,1360(sp)
  d03ebc:	dc415315 	stw	r17,1356(sp)
  d03ec0:	282d883a 	mov	r22,r5
  d03ec4:	3021883a 	mov	r16,r6
  d03ec8:	d9014f15 	stw	r4,1340(sp)
  d03ecc:	0d085bc0 	call	d085bc <_localeconv_r>
  d03ed0:	10800017 	ldw	r2,0(r2)
  d03ed4:	d9c15117 	ldw	r7,1348(sp)
  d03ed8:	d8814915 	stw	r2,1316(sp)
  d03edc:	d8814f17 	ldw	r2,1340(sp)
  d03ee0:	10000226 	beq	r2,zero,d03eec <___vfprintf_internal_r+0x5c>
  d03ee4:	10800e17 	ldw	r2,56(r2)
  d03ee8:	10020d26 	beq	r2,zero,d04720 <___vfprintf_internal_r+0x890>
  d03eec:	b080030b 	ldhu	r2,12(r22)
  d03ef0:	1080020c 	andi	r2,r2,8
  d03ef4:	10020e26 	beq	r2,zero,d04730 <___vfprintf_internal_r+0x8a0>
  d03ef8:	b0800417 	ldw	r2,16(r22)
  d03efc:	10020c26 	beq	r2,zero,d04730 <___vfprintf_internal_r+0x8a0>
  d03f00:	b200030b 	ldhu	r8,12(r22)
  d03f04:	00800284 	movi	r2,10
  d03f08:	40c0068c 	andi	r3,r8,26
  d03f0c:	18802f1e 	bne	r3,r2,d03fcc <___vfprintf_internal_r+0x13c>
  d03f10:	b080038f 	ldh	r2,14(r22)
  d03f14:	10002d16 	blt	r2,zero,d03fcc <___vfprintf_internal_r+0x13c>
  d03f18:	b240038b 	ldhu	r9,14(r22)
  d03f1c:	b2800717 	ldw	r10,28(r22)
  d03f20:	b2c00917 	ldw	r11,36(r22)
  d03f24:	d9014f17 	ldw	r4,1340(sp)
  d03f28:	dc402904 	addi	r17,sp,164
  d03f2c:	d8804004 	addi	r2,sp,256
  d03f30:	00c10004 	movi	r3,1024
  d03f34:	423fff4c 	andi	r8,r8,65533
  d03f38:	800d883a 	mov	r6,r16
  d03f3c:	880b883a 	mov	r5,r17
  d03f40:	da002c0d 	sth	r8,176(sp)
  d03f44:	da402c8d 	sth	r9,178(sp)
  d03f48:	da803015 	stw	r10,192(sp)
  d03f4c:	dac03215 	stw	r11,200(sp)
  d03f50:	d8802d15 	stw	r2,180(sp)
  d03f54:	d8c02e15 	stw	r3,184(sp)
  d03f58:	d8802915 	stw	r2,164(sp)
  d03f5c:	d8c02b15 	stw	r3,172(sp)
  d03f60:	d8002f15 	stw	zero,188(sp)
  d03f64:	0d03e900 	call	d03e90 <___vfprintf_internal_r>
  d03f68:	d8814b15 	stw	r2,1324(sp)
  d03f6c:	10000416 	blt	r2,zero,d03f80 <___vfprintf_internal_r+0xf0>
  d03f70:	d9014f17 	ldw	r4,1340(sp)
  d03f74:	880b883a 	mov	r5,r17
  d03f78:	0d076680 	call	d07668 <_fflush_r>
  d03f7c:	1002321e 	bne	r2,zero,d04848 <___vfprintf_internal_r+0x9b8>
  d03f80:	d8802c0b 	ldhu	r2,176(sp)
  d03f84:	1080100c 	andi	r2,r2,64
  d03f88:	10000326 	beq	r2,zero,d03f98 <___vfprintf_internal_r+0x108>
  d03f8c:	b080030b 	ldhu	r2,12(r22)
  d03f90:	10801014 	ori	r2,r2,64
  d03f94:	b080030d 	sth	r2,12(r22)
  d03f98:	d8814b17 	ldw	r2,1324(sp)
  d03f9c:	dfc15b17 	ldw	ra,1388(sp)
  d03fa0:	df015a17 	ldw	fp,1384(sp)
  d03fa4:	ddc15917 	ldw	r23,1380(sp)
  d03fa8:	dd815817 	ldw	r22,1376(sp)
  d03fac:	dd415717 	ldw	r21,1372(sp)
  d03fb0:	dd015617 	ldw	r20,1368(sp)
  d03fb4:	dcc15517 	ldw	r19,1364(sp)
  d03fb8:	dc815417 	ldw	r18,1360(sp)
  d03fbc:	dc415317 	ldw	r17,1356(sp)
  d03fc0:	dc015217 	ldw	r16,1352(sp)
  d03fc4:	dec15c04 	addi	sp,sp,1392
  d03fc8:	f800283a 	ret
  d03fcc:	0005883a 	mov	r2,zero
  d03fd0:	0007883a 	mov	r3,zero
  d03fd4:	dd401904 	addi	r21,sp,100
  d03fd8:	d8814215 	stw	r2,1288(sp)
  d03fdc:	802f883a 	mov	r23,r16
  d03fe0:	d8c14315 	stw	r3,1292(sp)
  d03fe4:	d8014b15 	stw	zero,1324(sp)
  d03fe8:	d8014815 	stw	zero,1312(sp)
  d03fec:	d8014415 	stw	zero,1296(sp)
  d03ff0:	d8014715 	stw	zero,1308(sp)
  d03ff4:	dd400c15 	stw	r21,48(sp)
  d03ff8:	d8000e15 	stw	zero,56(sp)
  d03ffc:	d8000d15 	stw	zero,52(sp)
  d04000:	b8800007 	ldb	r2,0(r23)
  d04004:	10001926 	beq	r2,zero,d0406c <___vfprintf_internal_r+0x1dc>
  d04008:	00c00944 	movi	r3,37
  d0400c:	10c01726 	beq	r2,r3,d0406c <___vfprintf_internal_r+0x1dc>
  d04010:	b821883a 	mov	r16,r23
  d04014:	00000106 	br	d0401c <___vfprintf_internal_r+0x18c>
  d04018:	10c00326 	beq	r2,r3,d04028 <___vfprintf_internal_r+0x198>
  d0401c:	84000044 	addi	r16,r16,1
  d04020:	80800007 	ldb	r2,0(r16)
  d04024:	103ffc1e 	bne	r2,zero,d04018 <___vfprintf_internal_r+0x188>
  d04028:	85e7c83a 	sub	r19,r16,r23
  d0402c:	98000e26 	beq	r19,zero,d04068 <___vfprintf_internal_r+0x1d8>
  d04030:	dc800e17 	ldw	r18,56(sp)
  d04034:	dc400d17 	ldw	r17,52(sp)
  d04038:	008001c4 	movi	r2,7
  d0403c:	94e5883a 	add	r18,r18,r19
  d04040:	8c400044 	addi	r17,r17,1
  d04044:	adc00015 	stw	r23,0(r21)
  d04048:	dc800e15 	stw	r18,56(sp)
  d0404c:	acc00115 	stw	r19,4(r21)
  d04050:	dc400d15 	stw	r17,52(sp)
  d04054:	14428b16 	blt	r2,r17,d04a84 <___vfprintf_internal_r+0xbf4>
  d04058:	ad400204 	addi	r21,r21,8
  d0405c:	d9014b17 	ldw	r4,1324(sp)
  d04060:	24c9883a 	add	r4,r4,r19
  d04064:	d9014b15 	stw	r4,1324(sp)
  d04068:	802f883a 	mov	r23,r16
  d0406c:	b8800007 	ldb	r2,0(r23)
  d04070:	10013c26 	beq	r2,zero,d04564 <___vfprintf_internal_r+0x6d4>
  d04074:	bdc00044 	addi	r23,r23,1
  d04078:	d8000405 	stb	zero,16(sp)
  d0407c:	b8c00007 	ldb	r3,0(r23)
  d04080:	04ffffc4 	movi	r19,-1
  d04084:	d8014c15 	stw	zero,1328(sp)
  d04088:	d8014a15 	stw	zero,1320(sp)
  d0408c:	d8c14d15 	stw	r3,1332(sp)
  d04090:	bdc00044 	addi	r23,r23,1
  d04094:	d9414d17 	ldw	r5,1332(sp)
  d04098:	00801604 	movi	r2,88
  d0409c:	28fff804 	addi	r3,r5,-32
  d040a0:	10c06036 	bltu	r2,r3,d04224 <___vfprintf_internal_r+0x394>
  d040a4:	18c5883a 	add	r2,r3,r3
  d040a8:	1085883a 	add	r2,r2,r2
  d040ac:	00c03434 	movhi	r3,208
  d040b0:	18d03004 	addi	r3,r3,16576
  d040b4:	10c5883a 	add	r2,r2,r3
  d040b8:	11000017 	ldw	r4,0(r2)
  d040bc:	2000683a 	jmp	r4
  d040c0:	00d05034 	movhi	r3,16704
  d040c4:	00d04224 	muli	r3,zero,16648
  d040c8:	00d04224 	muli	r3,zero,16648
  d040cc:	00d05020 	cmpeqi	r3,zero,16704
  d040d0:	00d04224 	muli	r3,zero,16648
  d040d4:	00d04224 	muli	r3,zero,16648
  d040d8:	00d04224 	muli	r3,zero,16648
  d040dc:	00d04224 	muli	r3,zero,16648
  d040e0:	00d04224 	muli	r3,zero,16648
  d040e4:	00d04224 	muli	r3,zero,16648
  d040e8:	00d04e00 	call	d04e0 <__alt_mem_onchip_memory2_3+0xc94e0>
  d040ec:	00d05010 	cmplti	r3,zero,16704
  d040f0:	00d04224 	muli	r3,zero,16648
  d040f4:	00d04e18 	cmpnei	r3,zero,16696
  d040f8:	00d050ac 	andhi	r3,zero,16706
  d040fc:	00d04224 	muli	r3,zero,16648
  d04100:	00d05098 	cmpnei	r3,zero,16706
  d04104:	00d05060 	cmpeqi	r3,zero,16705
  d04108:	00d05060 	cmpeqi	r3,zero,16705
  d0410c:	00d05060 	cmpeqi	r3,zero,16705
  d04110:	00d05060 	cmpeqi	r3,zero,16705
  d04114:	00d05060 	cmpeqi	r3,zero,16705
  d04118:	00d05060 	cmpeqi	r3,zero,16705
  d0411c:	00d05060 	cmpeqi	r3,zero,16705
  d04120:	00d05060 	cmpeqi	r3,zero,16705
  d04124:	00d05060 	cmpeqi	r3,zero,16705
  d04128:	00d04224 	muli	r3,zero,16648
  d0412c:	00d04224 	muli	r3,zero,16648
  d04130:	00d04224 	muli	r3,zero,16648
  d04134:	00d04224 	muli	r3,zero,16648
  d04138:	00d04224 	muli	r3,zero,16648
  d0413c:	00d04224 	muli	r3,zero,16648
  d04140:	00d04224 	muli	r3,zero,16648
  d04144:	00d04224 	muli	r3,zero,16648
  d04148:	00d04224 	muli	r3,zero,16648
  d0414c:	00d04224 	muli	r3,zero,16648
  d04150:	00d0487c 	xorhi	r3,zero,16673
  d04154:	00d04ee8 	cmpgeui	r3,zero,16699
  d04158:	00d04224 	muli	r3,zero,16648
  d0415c:	00d04ee8 	cmpgeui	r3,zero,16699
  d04160:	00d04224 	muli	r3,zero,16648
  d04164:	00d04224 	muli	r3,zero,16648
  d04168:	00d04224 	muli	r3,zero,16648
  d0416c:	00d04224 	muli	r3,zero,16648
  d04170:	00d0504c 	andi	r3,zero,16705
  d04174:	00d04224 	muli	r3,zero,16648
  d04178:	00d04224 	muli	r3,zero,16648
  d0417c:	00d04930 	cmpltui	r3,zero,16676
  d04180:	00d04224 	muli	r3,zero,16648
  d04184:	00d04224 	muli	r3,zero,16648
  d04188:	00d04224 	muli	r3,zero,16648
  d0418c:	00d04224 	muli	r3,zero,16648
  d04190:	00d04224 	muli	r3,zero,16648
  d04194:	00d0497c 	xorhi	r3,zero,16677
  d04198:	00d04224 	muli	r3,zero,16648
  d0419c:	00d04224 	muli	r3,zero,16648
  d041a0:	00d04f9c 	xori	r3,zero,16702
  d041a4:	00d04224 	muli	r3,zero,16648
  d041a8:	00d04224 	muli	r3,zero,16648
  d041ac:	00d04224 	muli	r3,zero,16648
  d041b0:	00d04224 	muli	r3,zero,16648
  d041b4:	00d04224 	muli	r3,zero,16648
  d041b8:	00d04224 	muli	r3,zero,16648
  d041bc:	00d04224 	muli	r3,zero,16648
  d041c0:	00d04224 	muli	r3,zero,16648
  d041c4:	00d04224 	muli	r3,zero,16648
  d041c8:	00d04224 	muli	r3,zero,16648
  d041cc:	00d04f70 	cmpltui	r3,zero,16701
  d041d0:	00d04888 	cmpgei	r3,zero,16674
  d041d4:	00d04ee8 	cmpgeui	r3,zero,16699
  d041d8:	00d04ee8 	cmpgeui	r3,zero,16699
  d041dc:	00d04ee8 	cmpgeui	r3,zero,16699
  d041e0:	00d04ed4 	movui	r3,16699
  d041e4:	00d04888 	cmpgei	r3,zero,16674
  d041e8:	00d04224 	muli	r3,zero,16648
  d041ec:	00d04224 	muli	r3,zero,16648
  d041f0:	00d04e5c 	xori	r3,zero,16697
  d041f4:	00d04224 	muli	r3,zero,16648
  d041f8:	00d04e2c 	andhi	r3,zero,16696
  d041fc:	00d0493c 	xorhi	r3,zero,16676
  d04200:	00d04e8c 	andi	r3,zero,16698
  d04204:	00d04e78 	rdprs	r3,zero,16697
  d04208:	00d04224 	muli	r3,zero,16648
  d0420c:	00d05108 	cmpgei	r3,zero,16708
  d04210:	00d04224 	muli	r3,zero,16648
  d04214:	00d04988 	cmpgei	r3,zero,16678
  d04218:	00d04224 	muli	r3,zero,16648
  d0421c:	00d04224 	muli	r3,zero,16648
  d04220:	00d05000 	call	d0500 <__alt_mem_onchip_memory2_3+0xc9500>
  d04224:	d9014d17 	ldw	r4,1332(sp)
  d04228:	2000ce26 	beq	r4,zero,d04564 <___vfprintf_internal_r+0x6d4>
  d0422c:	01400044 	movi	r5,1
  d04230:	d9800f04 	addi	r6,sp,60
  d04234:	d9c14015 	stw	r7,1280(sp)
  d04238:	d9414515 	stw	r5,1300(sp)
  d0423c:	d9814115 	stw	r6,1284(sp)
  d04240:	280f883a 	mov	r7,r5
  d04244:	d9000f05 	stb	r4,60(sp)
  d04248:	d8000405 	stb	zero,16(sp)
  d0424c:	d8014615 	stw	zero,1304(sp)
  d04250:	d8c14c17 	ldw	r3,1328(sp)
  d04254:	1880008c 	andi	r2,r3,2
  d04258:	1005003a 	cmpeq	r2,r2,zero
  d0425c:	d8815015 	stw	r2,1344(sp)
  d04260:	1000031e 	bne	r2,zero,d04270 <___vfprintf_internal_r+0x3e0>
  d04264:	d9014517 	ldw	r4,1300(sp)
  d04268:	21000084 	addi	r4,r4,2
  d0426c:	d9014515 	stw	r4,1300(sp)
  d04270:	d9414c17 	ldw	r5,1328(sp)
  d04274:	2940210c 	andi	r5,r5,132
  d04278:	d9414e15 	stw	r5,1336(sp)
  d0427c:	28002d1e 	bne	r5,zero,d04334 <___vfprintf_internal_r+0x4a4>
  d04280:	d9814a17 	ldw	r6,1320(sp)
  d04284:	d8814517 	ldw	r2,1300(sp)
  d04288:	30a1c83a 	sub	r16,r6,r2
  d0428c:	0400290e 	bge	zero,r16,d04334 <___vfprintf_internal_r+0x4a4>
  d04290:	00800404 	movi	r2,16
  d04294:	1404580e 	bge	r2,r16,d053f8 <___vfprintf_internal_r+0x1568>
  d04298:	dc800e17 	ldw	r18,56(sp)
  d0429c:	dc400d17 	ldw	r17,52(sp)
  d042a0:	1027883a 	mov	r19,r2
  d042a4:	07003474 	movhi	fp,209
  d042a8:	e7046384 	addi	fp,fp,4494
  d042ac:	050001c4 	movi	r20,7
  d042b0:	00000306 	br	d042c0 <___vfprintf_internal_r+0x430>
  d042b4:	843ffc04 	addi	r16,r16,-16
  d042b8:	ad400204 	addi	r21,r21,8
  d042bc:	9c00130e 	bge	r19,r16,d0430c <___vfprintf_internal_r+0x47c>
  d042c0:	94800404 	addi	r18,r18,16
  d042c4:	8c400044 	addi	r17,r17,1
  d042c8:	af000015 	stw	fp,0(r21)
  d042cc:	acc00115 	stw	r19,4(r21)
  d042d0:	dc800e15 	stw	r18,56(sp)
  d042d4:	dc400d15 	stw	r17,52(sp)
  d042d8:	a47ff60e 	bge	r20,r17,d042b4 <___vfprintf_internal_r+0x424>
  d042dc:	d9014f17 	ldw	r4,1340(sp)
  d042e0:	b00b883a 	mov	r5,r22
  d042e4:	d9800c04 	addi	r6,sp,48
  d042e8:	d9c15115 	stw	r7,1348(sp)
  d042ec:	0d03e380 	call	d03e38 <__sprint_r>
  d042f0:	d9c15117 	ldw	r7,1348(sp)
  d042f4:	10009e1e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d042f8:	843ffc04 	addi	r16,r16,-16
  d042fc:	dc800e17 	ldw	r18,56(sp)
  d04300:	dc400d17 	ldw	r17,52(sp)
  d04304:	dd401904 	addi	r21,sp,100
  d04308:	9c3fed16 	blt	r19,r16,d042c0 <___vfprintf_internal_r+0x430>
  d0430c:	9425883a 	add	r18,r18,r16
  d04310:	8c400044 	addi	r17,r17,1
  d04314:	008001c4 	movi	r2,7
  d04318:	af000015 	stw	fp,0(r21)
  d0431c:	ac000115 	stw	r16,4(r21)
  d04320:	dc800e15 	stw	r18,56(sp)
  d04324:	dc400d15 	stw	r17,52(sp)
  d04328:	1441f516 	blt	r2,r17,d04b00 <___vfprintf_internal_r+0xc70>
  d0432c:	ad400204 	addi	r21,r21,8
  d04330:	00000206 	br	d0433c <___vfprintf_internal_r+0x4ac>
  d04334:	dc800e17 	ldw	r18,56(sp)
  d04338:	dc400d17 	ldw	r17,52(sp)
  d0433c:	d8800407 	ldb	r2,16(sp)
  d04340:	10000b26 	beq	r2,zero,d04370 <___vfprintf_internal_r+0x4e0>
  d04344:	00800044 	movi	r2,1
  d04348:	94800044 	addi	r18,r18,1
  d0434c:	8c400044 	addi	r17,r17,1
  d04350:	a8800115 	stw	r2,4(r21)
  d04354:	d8c00404 	addi	r3,sp,16
  d04358:	008001c4 	movi	r2,7
  d0435c:	a8c00015 	stw	r3,0(r21)
  d04360:	dc800e15 	stw	r18,56(sp)
  d04364:	dc400d15 	stw	r17,52(sp)
  d04368:	1441da16 	blt	r2,r17,d04ad4 <___vfprintf_internal_r+0xc44>
  d0436c:	ad400204 	addi	r21,r21,8
  d04370:	d9015017 	ldw	r4,1344(sp)
  d04374:	20000b1e 	bne	r4,zero,d043a4 <___vfprintf_internal_r+0x514>
  d04378:	d8800444 	addi	r2,sp,17
  d0437c:	94800084 	addi	r18,r18,2
  d04380:	8c400044 	addi	r17,r17,1
  d04384:	a8800015 	stw	r2,0(r21)
  d04388:	00c00084 	movi	r3,2
  d0438c:	008001c4 	movi	r2,7
  d04390:	a8c00115 	stw	r3,4(r21)
  d04394:	dc800e15 	stw	r18,56(sp)
  d04398:	dc400d15 	stw	r17,52(sp)
  d0439c:	1441c216 	blt	r2,r17,d04aa8 <___vfprintf_internal_r+0xc18>
  d043a0:	ad400204 	addi	r21,r21,8
  d043a4:	d9414e17 	ldw	r5,1336(sp)
  d043a8:	00802004 	movi	r2,128
  d043ac:	2880b126 	beq	r5,r2,d04674 <___vfprintf_internal_r+0x7e4>
  d043b0:	d8c14617 	ldw	r3,1304(sp)
  d043b4:	19e1c83a 	sub	r16,r3,r7
  d043b8:	0400260e 	bge	zero,r16,d04454 <___vfprintf_internal_r+0x5c4>
  d043bc:	00800404 	movi	r2,16
  d043c0:	1403c90e 	bge	r2,r16,d052e8 <___vfprintf_internal_r+0x1458>
  d043c4:	1027883a 	mov	r19,r2
  d043c8:	07003474 	movhi	fp,209
  d043cc:	e7045f84 	addi	fp,fp,4478
  d043d0:	050001c4 	movi	r20,7
  d043d4:	00000306 	br	d043e4 <___vfprintf_internal_r+0x554>
  d043d8:	843ffc04 	addi	r16,r16,-16
  d043dc:	ad400204 	addi	r21,r21,8
  d043e0:	9c00130e 	bge	r19,r16,d04430 <___vfprintf_internal_r+0x5a0>
  d043e4:	94800404 	addi	r18,r18,16
  d043e8:	8c400044 	addi	r17,r17,1
  d043ec:	af000015 	stw	fp,0(r21)
  d043f0:	acc00115 	stw	r19,4(r21)
  d043f4:	dc800e15 	stw	r18,56(sp)
  d043f8:	dc400d15 	stw	r17,52(sp)
  d043fc:	a47ff60e 	bge	r20,r17,d043d8 <___vfprintf_internal_r+0x548>
  d04400:	d9014f17 	ldw	r4,1340(sp)
  d04404:	b00b883a 	mov	r5,r22
  d04408:	d9800c04 	addi	r6,sp,48
  d0440c:	d9c15115 	stw	r7,1348(sp)
  d04410:	0d03e380 	call	d03e38 <__sprint_r>
  d04414:	d9c15117 	ldw	r7,1348(sp)
  d04418:	1000551e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d0441c:	843ffc04 	addi	r16,r16,-16
  d04420:	dc800e17 	ldw	r18,56(sp)
  d04424:	dc400d17 	ldw	r17,52(sp)
  d04428:	dd401904 	addi	r21,sp,100
  d0442c:	9c3fed16 	blt	r19,r16,d043e4 <___vfprintf_internal_r+0x554>
  d04430:	9425883a 	add	r18,r18,r16
  d04434:	8c400044 	addi	r17,r17,1
  d04438:	008001c4 	movi	r2,7
  d0443c:	af000015 	stw	fp,0(r21)
  d04440:	ac000115 	stw	r16,4(r21)
  d04444:	dc800e15 	stw	r18,56(sp)
  d04448:	dc400d15 	stw	r17,52(sp)
  d0444c:	14418216 	blt	r2,r17,d04a58 <___vfprintf_internal_r+0xbc8>
  d04450:	ad400204 	addi	r21,r21,8
  d04454:	d9014c17 	ldw	r4,1328(sp)
  d04458:	2080400c 	andi	r2,r4,256
  d0445c:	10004a1e 	bne	r2,zero,d04588 <___vfprintf_internal_r+0x6f8>
  d04460:	d9414117 	ldw	r5,1284(sp)
  d04464:	91e5883a 	add	r18,r18,r7
  d04468:	8c400044 	addi	r17,r17,1
  d0446c:	008001c4 	movi	r2,7
  d04470:	a9400015 	stw	r5,0(r21)
  d04474:	a9c00115 	stw	r7,4(r21)
  d04478:	dc800e15 	stw	r18,56(sp)
  d0447c:	dc400d15 	stw	r17,52(sp)
  d04480:	14416716 	blt	r2,r17,d04a20 <___vfprintf_internal_r+0xb90>
  d04484:	a8c00204 	addi	r3,r21,8
  d04488:	d9814c17 	ldw	r6,1328(sp)
  d0448c:	3080010c 	andi	r2,r6,4
  d04490:	10002826 	beq	r2,zero,d04534 <___vfprintf_internal_r+0x6a4>
  d04494:	d8814a17 	ldw	r2,1320(sp)
  d04498:	d9014517 	ldw	r4,1300(sp)
  d0449c:	1121c83a 	sub	r16,r2,r4
  d044a0:	0400240e 	bge	zero,r16,d04534 <___vfprintf_internal_r+0x6a4>
  d044a4:	00800404 	movi	r2,16
  d044a8:	14044f0e 	bge	r2,r16,d055e8 <___vfprintf_internal_r+0x1758>
  d044ac:	dc400d17 	ldw	r17,52(sp)
  d044b0:	1027883a 	mov	r19,r2
  d044b4:	07003474 	movhi	fp,209
  d044b8:	e7046384 	addi	fp,fp,4494
  d044bc:	050001c4 	movi	r20,7
  d044c0:	00000306 	br	d044d0 <___vfprintf_internal_r+0x640>
  d044c4:	843ffc04 	addi	r16,r16,-16
  d044c8:	18c00204 	addi	r3,r3,8
  d044cc:	9c00110e 	bge	r19,r16,d04514 <___vfprintf_internal_r+0x684>
  d044d0:	94800404 	addi	r18,r18,16
  d044d4:	8c400044 	addi	r17,r17,1
  d044d8:	1f000015 	stw	fp,0(r3)
  d044dc:	1cc00115 	stw	r19,4(r3)
  d044e0:	dc800e15 	stw	r18,56(sp)
  d044e4:	dc400d15 	stw	r17,52(sp)
  d044e8:	a47ff60e 	bge	r20,r17,d044c4 <___vfprintf_internal_r+0x634>
  d044ec:	d9014f17 	ldw	r4,1340(sp)
  d044f0:	b00b883a 	mov	r5,r22
  d044f4:	d9800c04 	addi	r6,sp,48
  d044f8:	0d03e380 	call	d03e38 <__sprint_r>
  d044fc:	10001c1e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d04500:	843ffc04 	addi	r16,r16,-16
  d04504:	dc800e17 	ldw	r18,56(sp)
  d04508:	dc400d17 	ldw	r17,52(sp)
  d0450c:	d8c01904 	addi	r3,sp,100
  d04510:	9c3fef16 	blt	r19,r16,d044d0 <___vfprintf_internal_r+0x640>
  d04514:	9425883a 	add	r18,r18,r16
  d04518:	8c400044 	addi	r17,r17,1
  d0451c:	008001c4 	movi	r2,7
  d04520:	1f000015 	stw	fp,0(r3)
  d04524:	1c000115 	stw	r16,4(r3)
  d04528:	dc800e15 	stw	r18,56(sp)
  d0452c:	dc400d15 	stw	r17,52(sp)
  d04530:	1440cb16 	blt	r2,r17,d04860 <___vfprintf_internal_r+0x9d0>
  d04534:	d8814a17 	ldw	r2,1320(sp)
  d04538:	d9414517 	ldw	r5,1300(sp)
  d0453c:	1140010e 	bge	r2,r5,d04544 <___vfprintf_internal_r+0x6b4>
  d04540:	2805883a 	mov	r2,r5
  d04544:	d9814b17 	ldw	r6,1324(sp)
  d04548:	308d883a 	add	r6,r6,r2
  d0454c:	d9814b15 	stw	r6,1324(sp)
  d04550:	90013b1e 	bne	r18,zero,d04a40 <___vfprintf_internal_r+0xbb0>
  d04554:	d9c14017 	ldw	r7,1280(sp)
  d04558:	dd401904 	addi	r21,sp,100
  d0455c:	d8000d15 	stw	zero,52(sp)
  d04560:	003ea706 	br	d04000 <___vfprintf_internal_r+0x170>
  d04564:	d8800e17 	ldw	r2,56(sp)
  d04568:	10053f1e 	bne	r2,zero,d05a68 <___vfprintf_internal_r+0x1bd8>
  d0456c:	d8000d15 	stw	zero,52(sp)
  d04570:	b080030b 	ldhu	r2,12(r22)
  d04574:	1080100c 	andi	r2,r2,64
  d04578:	103e8726 	beq	r2,zero,d03f98 <___vfprintf_internal_r+0x108>
  d0457c:	00bfffc4 	movi	r2,-1
  d04580:	d8814b15 	stw	r2,1324(sp)
  d04584:	003e8406 	br	d03f98 <___vfprintf_internal_r+0x108>
  d04588:	d9814d17 	ldw	r6,1332(sp)
  d0458c:	00801944 	movi	r2,101
  d04590:	11806e16 	blt	r2,r6,d0474c <___vfprintf_internal_r+0x8bc>
  d04594:	d9414717 	ldw	r5,1308(sp)
  d04598:	00c00044 	movi	r3,1
  d0459c:	1943430e 	bge	r3,r5,d052ac <___vfprintf_internal_r+0x141c>
  d045a0:	d8814117 	ldw	r2,1284(sp)
  d045a4:	94800044 	addi	r18,r18,1
  d045a8:	8c400044 	addi	r17,r17,1
  d045ac:	a8800015 	stw	r2,0(r21)
  d045b0:	008001c4 	movi	r2,7
  d045b4:	a8c00115 	stw	r3,4(r21)
  d045b8:	dc800e15 	stw	r18,56(sp)
  d045bc:	dc400d15 	stw	r17,52(sp)
  d045c0:	1441ca16 	blt	r2,r17,d04cec <___vfprintf_internal_r+0xe5c>
  d045c4:	a8c00204 	addi	r3,r21,8
  d045c8:	d9014917 	ldw	r4,1316(sp)
  d045cc:	00800044 	movi	r2,1
  d045d0:	94800044 	addi	r18,r18,1
  d045d4:	8c400044 	addi	r17,r17,1
  d045d8:	18800115 	stw	r2,4(r3)
  d045dc:	008001c4 	movi	r2,7
  d045e0:	19000015 	stw	r4,0(r3)
  d045e4:	dc800e15 	stw	r18,56(sp)
  d045e8:	dc400d15 	stw	r17,52(sp)
  d045ec:	1441b616 	blt	r2,r17,d04cc8 <___vfprintf_internal_r+0xe38>
  d045f0:	1cc00204 	addi	r19,r3,8
  d045f4:	d9014217 	ldw	r4,1288(sp)
  d045f8:	d9414317 	ldw	r5,1292(sp)
  d045fc:	000d883a 	mov	r6,zero
  d04600:	000f883a 	mov	r7,zero
  d04604:	0d031580 	call	d03158 <__nedf2>
  d04608:	10017426 	beq	r2,zero,d04bdc <___vfprintf_internal_r+0xd4c>
  d0460c:	d9414717 	ldw	r5,1308(sp)
  d04610:	d9814117 	ldw	r6,1284(sp)
  d04614:	8c400044 	addi	r17,r17,1
  d04618:	2c85883a 	add	r2,r5,r18
  d0461c:	14bfffc4 	addi	r18,r2,-1
  d04620:	28bfffc4 	addi	r2,r5,-1
  d04624:	30c00044 	addi	r3,r6,1
  d04628:	98800115 	stw	r2,4(r19)
  d0462c:	008001c4 	movi	r2,7
  d04630:	98c00015 	stw	r3,0(r19)
  d04634:	dc800e15 	stw	r18,56(sp)
  d04638:	dc400d15 	stw	r17,52(sp)
  d0463c:	14418e16 	blt	r2,r17,d04c78 <___vfprintf_internal_r+0xde8>
  d04640:	9cc00204 	addi	r19,r19,8
  d04644:	d9414817 	ldw	r5,1312(sp)
  d04648:	d8800804 	addi	r2,sp,32
  d0464c:	8c400044 	addi	r17,r17,1
  d04650:	9165883a 	add	r18,r18,r5
  d04654:	98800015 	stw	r2,0(r19)
  d04658:	008001c4 	movi	r2,7
  d0465c:	99400115 	stw	r5,4(r19)
  d04660:	dc800e15 	stw	r18,56(sp)
  d04664:	dc400d15 	stw	r17,52(sp)
  d04668:	1440ed16 	blt	r2,r17,d04a20 <___vfprintf_internal_r+0xb90>
  d0466c:	98c00204 	addi	r3,r19,8
  d04670:	003f8506 	br	d04488 <___vfprintf_internal_r+0x5f8>
  d04674:	d9814a17 	ldw	r6,1320(sp)
  d04678:	d8814517 	ldw	r2,1300(sp)
  d0467c:	30a1c83a 	sub	r16,r6,r2
  d04680:	043f4b0e 	bge	zero,r16,d043b0 <___vfprintf_internal_r+0x520>
  d04684:	00800404 	movi	r2,16
  d04688:	1404340e 	bge	r2,r16,d0575c <___vfprintf_internal_r+0x18cc>
  d0468c:	1027883a 	mov	r19,r2
  d04690:	07003474 	movhi	fp,209
  d04694:	e7045f84 	addi	fp,fp,4478
  d04698:	050001c4 	movi	r20,7
  d0469c:	00000306 	br	d046ac <___vfprintf_internal_r+0x81c>
  d046a0:	843ffc04 	addi	r16,r16,-16
  d046a4:	ad400204 	addi	r21,r21,8
  d046a8:	9c00130e 	bge	r19,r16,d046f8 <___vfprintf_internal_r+0x868>
  d046ac:	94800404 	addi	r18,r18,16
  d046b0:	8c400044 	addi	r17,r17,1
  d046b4:	af000015 	stw	fp,0(r21)
  d046b8:	acc00115 	stw	r19,4(r21)
  d046bc:	dc800e15 	stw	r18,56(sp)
  d046c0:	dc400d15 	stw	r17,52(sp)
  d046c4:	a47ff60e 	bge	r20,r17,d046a0 <___vfprintf_internal_r+0x810>
  d046c8:	d9014f17 	ldw	r4,1340(sp)
  d046cc:	b00b883a 	mov	r5,r22
  d046d0:	d9800c04 	addi	r6,sp,48
  d046d4:	d9c15115 	stw	r7,1348(sp)
  d046d8:	0d03e380 	call	d03e38 <__sprint_r>
  d046dc:	d9c15117 	ldw	r7,1348(sp)
  d046e0:	103fa31e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d046e4:	843ffc04 	addi	r16,r16,-16
  d046e8:	dc800e17 	ldw	r18,56(sp)
  d046ec:	dc400d17 	ldw	r17,52(sp)
  d046f0:	dd401904 	addi	r21,sp,100
  d046f4:	9c3fed16 	blt	r19,r16,d046ac <___vfprintf_internal_r+0x81c>
  d046f8:	9425883a 	add	r18,r18,r16
  d046fc:	8c400044 	addi	r17,r17,1
  d04700:	008001c4 	movi	r2,7
  d04704:	af000015 	stw	fp,0(r21)
  d04708:	ac000115 	stw	r16,4(r21)
  d0470c:	dc800e15 	stw	r18,56(sp)
  d04710:	dc400d15 	stw	r17,52(sp)
  d04714:	14416116 	blt	r2,r17,d04c9c <___vfprintf_internal_r+0xe0c>
  d04718:	ad400204 	addi	r21,r21,8
  d0471c:	003f2406 	br	d043b0 <___vfprintf_internal_r+0x520>
  d04720:	d9014f17 	ldw	r4,1340(sp)
  d04724:	0d079000 	call	d07900 <__sinit>
  d04728:	d9c15117 	ldw	r7,1348(sp)
  d0472c:	003def06 	br	d03eec <___vfprintf_internal_r+0x5c>
  d04730:	d9014f17 	ldw	r4,1340(sp)
  d04734:	b00b883a 	mov	r5,r22
  d04738:	d9c15115 	stw	r7,1348(sp)
  d0473c:	0d05d600 	call	d05d60 <__swsetup_r>
  d04740:	d9c15117 	ldw	r7,1348(sp)
  d04744:	103dee26 	beq	r2,zero,d03f00 <___vfprintf_internal_r+0x70>
  d04748:	003f8c06 	br	d0457c <___vfprintf_internal_r+0x6ec>
  d0474c:	d9014217 	ldw	r4,1288(sp)
  d04750:	d9414317 	ldw	r5,1292(sp)
  d04754:	000d883a 	mov	r6,zero
  d04758:	000f883a 	mov	r7,zero
  d0475c:	0d0befc0 	call	d0befc <__eqdf2>
  d04760:	1000f21e 	bne	r2,zero,d04b2c <___vfprintf_internal_r+0xc9c>
  d04764:	00803474 	movhi	r2,209
  d04768:	1083ea04 	addi	r2,r2,4008
  d0476c:	94800044 	addi	r18,r18,1
  d04770:	8c400044 	addi	r17,r17,1
  d04774:	a8800015 	stw	r2,0(r21)
  d04778:	00c00044 	movi	r3,1
  d0477c:	008001c4 	movi	r2,7
  d04780:	a8c00115 	stw	r3,4(r21)
  d04784:	dc800e15 	stw	r18,56(sp)
  d04788:	dc400d15 	stw	r17,52(sp)
  d0478c:	1442fa16 	blt	r2,r17,d05378 <___vfprintf_internal_r+0x14e8>
  d04790:	a8c00204 	addi	r3,r21,8
  d04794:	d8800517 	ldw	r2,20(sp)
  d04798:	d9014717 	ldw	r4,1308(sp)
  d0479c:	11015c0e 	bge	r2,r4,d04d10 <___vfprintf_internal_r+0xe80>
  d047a0:	dc400d17 	ldw	r17,52(sp)
  d047a4:	d9814917 	ldw	r6,1316(sp)
  d047a8:	00800044 	movi	r2,1
  d047ac:	94800044 	addi	r18,r18,1
  d047b0:	8c400044 	addi	r17,r17,1
  d047b4:	18800115 	stw	r2,4(r3)
  d047b8:	008001c4 	movi	r2,7
  d047bc:	19800015 	stw	r6,0(r3)
  d047c0:	dc800e15 	stw	r18,56(sp)
  d047c4:	dc400d15 	stw	r17,52(sp)
  d047c8:	14431016 	blt	r2,r17,d0540c <___vfprintf_internal_r+0x157c>
  d047cc:	18c00204 	addi	r3,r3,8
  d047d0:	d8814717 	ldw	r2,1308(sp)
  d047d4:	143fffc4 	addi	r16,r2,-1
  d047d8:	043f2b0e 	bge	zero,r16,d04488 <___vfprintf_internal_r+0x5f8>
  d047dc:	00800404 	movi	r2,16
  d047e0:	1402a20e 	bge	r2,r16,d0526c <___vfprintf_internal_r+0x13dc>
  d047e4:	dc400d17 	ldw	r17,52(sp)
  d047e8:	1027883a 	mov	r19,r2
  d047ec:	07003474 	movhi	fp,209
  d047f0:	e7045f84 	addi	fp,fp,4478
  d047f4:	050001c4 	movi	r20,7
  d047f8:	00000306 	br	d04808 <___vfprintf_internal_r+0x978>
  d047fc:	18c00204 	addi	r3,r3,8
  d04800:	843ffc04 	addi	r16,r16,-16
  d04804:	9c029c0e 	bge	r19,r16,d05278 <___vfprintf_internal_r+0x13e8>
  d04808:	94800404 	addi	r18,r18,16
  d0480c:	8c400044 	addi	r17,r17,1
  d04810:	1f000015 	stw	fp,0(r3)
  d04814:	1cc00115 	stw	r19,4(r3)
  d04818:	dc800e15 	stw	r18,56(sp)
  d0481c:	dc400d15 	stw	r17,52(sp)
  d04820:	a47ff60e 	bge	r20,r17,d047fc <___vfprintf_internal_r+0x96c>
  d04824:	d9014f17 	ldw	r4,1340(sp)
  d04828:	b00b883a 	mov	r5,r22
  d0482c:	d9800c04 	addi	r6,sp,48
  d04830:	0d03e380 	call	d03e38 <__sprint_r>
  d04834:	103f4e1e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d04838:	dc800e17 	ldw	r18,56(sp)
  d0483c:	dc400d17 	ldw	r17,52(sp)
  d04840:	d8c01904 	addi	r3,sp,100
  d04844:	003fee06 	br	d04800 <___vfprintf_internal_r+0x970>
  d04848:	d8802c0b 	ldhu	r2,176(sp)
  d0484c:	00ffffc4 	movi	r3,-1
  d04850:	d8c14b15 	stw	r3,1324(sp)
  d04854:	1080100c 	andi	r2,r2,64
  d04858:	103dcc1e 	bne	r2,zero,d03f8c <___vfprintf_internal_r+0xfc>
  d0485c:	003dce06 	br	d03f98 <___vfprintf_internal_r+0x108>
  d04860:	d9014f17 	ldw	r4,1340(sp)
  d04864:	b00b883a 	mov	r5,r22
  d04868:	d9800c04 	addi	r6,sp,48
  d0486c:	0d03e380 	call	d03e38 <__sprint_r>
  d04870:	103f3f1e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d04874:	dc800e17 	ldw	r18,56(sp)
  d04878:	003f2e06 	br	d04534 <___vfprintf_internal_r+0x6a4>
  d0487c:	d9414c17 	ldw	r5,1328(sp)
  d04880:	29400414 	ori	r5,r5,16
  d04884:	d9414c15 	stw	r5,1328(sp)
  d04888:	d9814c17 	ldw	r6,1328(sp)
  d0488c:	3080080c 	andi	r2,r6,32
  d04890:	10014f1e 	bne	r2,zero,d04dd0 <___vfprintf_internal_r+0xf40>
  d04894:	d8c14c17 	ldw	r3,1328(sp)
  d04898:	1880040c 	andi	r2,r3,16
  d0489c:	1002ea1e 	bne	r2,zero,d05448 <___vfprintf_internal_r+0x15b8>
  d048a0:	d9014c17 	ldw	r4,1328(sp)
  d048a4:	2080100c 	andi	r2,r4,64
  d048a8:	1002e726 	beq	r2,zero,d05448 <___vfprintf_internal_r+0x15b8>
  d048ac:	3880000f 	ldh	r2,0(r7)
  d048b0:	39c00104 	addi	r7,r7,4
  d048b4:	d9c14015 	stw	r7,1280(sp)
  d048b8:	1023d7fa 	srai	r17,r2,31
  d048bc:	1021883a 	mov	r16,r2
  d048c0:	88037216 	blt	r17,zero,d0568c <___vfprintf_internal_r+0x17fc>
  d048c4:	01000044 	movi	r4,1
  d048c8:	98000416 	blt	r19,zero,d048dc <___vfprintf_internal_r+0xa4c>
  d048cc:	d8c14c17 	ldw	r3,1328(sp)
  d048d0:	00bfdfc4 	movi	r2,-129
  d048d4:	1886703a 	and	r3,r3,r2
  d048d8:	d8c14c15 	stw	r3,1328(sp)
  d048dc:	8444b03a 	or	r2,r16,r17
  d048e0:	1002261e 	bne	r2,zero,d0517c <___vfprintf_internal_r+0x12ec>
  d048e4:	9802251e 	bne	r19,zero,d0517c <___vfprintf_internal_r+0x12ec>
  d048e8:	20803fcc 	andi	r2,r4,255
  d048ec:	10029b26 	beq	r2,zero,d0535c <___vfprintf_internal_r+0x14cc>
  d048f0:	d8c01904 	addi	r3,sp,100
  d048f4:	dd000f04 	addi	r20,sp,60
  d048f8:	d8c14115 	stw	r3,1284(sp)
  d048fc:	d8c14117 	ldw	r3,1284(sp)
  d04900:	dcc14515 	stw	r19,1300(sp)
  d04904:	a0c5c83a 	sub	r2,r20,r3
  d04908:	11c00a04 	addi	r7,r2,40
  d0490c:	99c0010e 	bge	r19,r7,d04914 <___vfprintf_internal_r+0xa84>
  d04910:	d9c14515 	stw	r7,1300(sp)
  d04914:	dcc14615 	stw	r19,1304(sp)
  d04918:	d8800407 	ldb	r2,16(sp)
  d0491c:	103e4c26 	beq	r2,zero,d04250 <___vfprintf_internal_r+0x3c0>
  d04920:	d8814517 	ldw	r2,1300(sp)
  d04924:	10800044 	addi	r2,r2,1
  d04928:	d8814515 	stw	r2,1300(sp)
  d0492c:	003e4806 	br	d04250 <___vfprintf_internal_r+0x3c0>
  d04930:	d9814c17 	ldw	r6,1328(sp)
  d04934:	31800414 	ori	r6,r6,16
  d04938:	d9814c15 	stw	r6,1328(sp)
  d0493c:	d8c14c17 	ldw	r3,1328(sp)
  d04940:	1880080c 	andi	r2,r3,32
  d04944:	1001271e 	bne	r2,zero,d04de4 <___vfprintf_internal_r+0xf54>
  d04948:	d9414c17 	ldw	r5,1328(sp)
  d0494c:	2880040c 	andi	r2,r5,16
  d04950:	1002b61e 	bne	r2,zero,d0542c <___vfprintf_internal_r+0x159c>
  d04954:	d9814c17 	ldw	r6,1328(sp)
  d04958:	3080100c 	andi	r2,r6,64
  d0495c:	1002b326 	beq	r2,zero,d0542c <___vfprintf_internal_r+0x159c>
  d04960:	3c00000b 	ldhu	r16,0(r7)
  d04964:	0009883a 	mov	r4,zero
  d04968:	39c00104 	addi	r7,r7,4
  d0496c:	0023883a 	mov	r17,zero
  d04970:	d9c14015 	stw	r7,1280(sp)
  d04974:	d8000405 	stb	zero,16(sp)
  d04978:	003fd306 	br	d048c8 <___vfprintf_internal_r+0xa38>
  d0497c:	d9014c17 	ldw	r4,1328(sp)
  d04980:	21000414 	ori	r4,r4,16
  d04984:	d9014c15 	stw	r4,1328(sp)
  d04988:	d9414c17 	ldw	r5,1328(sp)
  d0498c:	2880080c 	andi	r2,r5,32
  d04990:	1001081e 	bne	r2,zero,d04db4 <___vfprintf_internal_r+0xf24>
  d04994:	d8c14c17 	ldw	r3,1328(sp)
  d04998:	1880040c 	andi	r2,r3,16
  d0499c:	1002b01e 	bne	r2,zero,d05460 <___vfprintf_internal_r+0x15d0>
  d049a0:	d9014c17 	ldw	r4,1328(sp)
  d049a4:	2080100c 	andi	r2,r4,64
  d049a8:	1002ad26 	beq	r2,zero,d05460 <___vfprintf_internal_r+0x15d0>
  d049ac:	3c00000b 	ldhu	r16,0(r7)
  d049b0:	01000044 	movi	r4,1
  d049b4:	39c00104 	addi	r7,r7,4
  d049b8:	0023883a 	mov	r17,zero
  d049bc:	d9c14015 	stw	r7,1280(sp)
  d049c0:	d8000405 	stb	zero,16(sp)
  d049c4:	003fc006 	br	d048c8 <___vfprintf_internal_r+0xa38>
  d049c8:	d9014f17 	ldw	r4,1340(sp)
  d049cc:	b00b883a 	mov	r5,r22
  d049d0:	d9800c04 	addi	r6,sp,48
  d049d4:	0d03e380 	call	d03e38 <__sprint_r>
  d049d8:	103ee51e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d049dc:	dc800e17 	ldw	r18,56(sp)
  d049e0:	d8c01904 	addi	r3,sp,100
  d049e4:	d9814c17 	ldw	r6,1328(sp)
  d049e8:	3080004c 	andi	r2,r6,1
  d049ec:	1005003a 	cmpeq	r2,r2,zero
  d049f0:	103ea51e 	bne	r2,zero,d04488 <___vfprintf_internal_r+0x5f8>
  d049f4:	00800044 	movi	r2,1
  d049f8:	dc400d17 	ldw	r17,52(sp)
  d049fc:	18800115 	stw	r2,4(r3)
  d04a00:	d8814917 	ldw	r2,1316(sp)
  d04a04:	94800044 	addi	r18,r18,1
  d04a08:	8c400044 	addi	r17,r17,1
  d04a0c:	18800015 	stw	r2,0(r3)
  d04a10:	008001c4 	movi	r2,7
  d04a14:	dc800e15 	stw	r18,56(sp)
  d04a18:	dc400d15 	stw	r17,52(sp)
  d04a1c:	14421e0e 	bge	r2,r17,d05298 <___vfprintf_internal_r+0x1408>
  d04a20:	d9014f17 	ldw	r4,1340(sp)
  d04a24:	b00b883a 	mov	r5,r22
  d04a28:	d9800c04 	addi	r6,sp,48
  d04a2c:	0d03e380 	call	d03e38 <__sprint_r>
  d04a30:	103ecf1e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d04a34:	dc800e17 	ldw	r18,56(sp)
  d04a38:	d8c01904 	addi	r3,sp,100
  d04a3c:	003e9206 	br	d04488 <___vfprintf_internal_r+0x5f8>
  d04a40:	d9014f17 	ldw	r4,1340(sp)
  d04a44:	b00b883a 	mov	r5,r22
  d04a48:	d9800c04 	addi	r6,sp,48
  d04a4c:	0d03e380 	call	d03e38 <__sprint_r>
  d04a50:	103ec026 	beq	r2,zero,d04554 <___vfprintf_internal_r+0x6c4>
  d04a54:	003ec606 	br	d04570 <___vfprintf_internal_r+0x6e0>
  d04a58:	d9014f17 	ldw	r4,1340(sp)
  d04a5c:	b00b883a 	mov	r5,r22
  d04a60:	d9800c04 	addi	r6,sp,48
  d04a64:	d9c15115 	stw	r7,1348(sp)
  d04a68:	0d03e380 	call	d03e38 <__sprint_r>
  d04a6c:	d9c15117 	ldw	r7,1348(sp)
  d04a70:	103ebf1e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d04a74:	dc800e17 	ldw	r18,56(sp)
  d04a78:	dc400d17 	ldw	r17,52(sp)
  d04a7c:	dd401904 	addi	r21,sp,100
  d04a80:	003e7406 	br	d04454 <___vfprintf_internal_r+0x5c4>
  d04a84:	d9014f17 	ldw	r4,1340(sp)
  d04a88:	b00b883a 	mov	r5,r22
  d04a8c:	d9800c04 	addi	r6,sp,48
  d04a90:	d9c15115 	stw	r7,1348(sp)
  d04a94:	0d03e380 	call	d03e38 <__sprint_r>
  d04a98:	d9c15117 	ldw	r7,1348(sp)
  d04a9c:	103eb41e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d04aa0:	dd401904 	addi	r21,sp,100
  d04aa4:	003d6d06 	br	d0405c <___vfprintf_internal_r+0x1cc>
  d04aa8:	d9014f17 	ldw	r4,1340(sp)
  d04aac:	b00b883a 	mov	r5,r22
  d04ab0:	d9800c04 	addi	r6,sp,48
  d04ab4:	d9c15115 	stw	r7,1348(sp)
  d04ab8:	0d03e380 	call	d03e38 <__sprint_r>
  d04abc:	d9c15117 	ldw	r7,1348(sp)
  d04ac0:	103eab1e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d04ac4:	dc800e17 	ldw	r18,56(sp)
  d04ac8:	dc400d17 	ldw	r17,52(sp)
  d04acc:	dd401904 	addi	r21,sp,100
  d04ad0:	003e3406 	br	d043a4 <___vfprintf_internal_r+0x514>
  d04ad4:	d9014f17 	ldw	r4,1340(sp)
  d04ad8:	b00b883a 	mov	r5,r22
  d04adc:	d9800c04 	addi	r6,sp,48
  d04ae0:	d9c15115 	stw	r7,1348(sp)
  d04ae4:	0d03e380 	call	d03e38 <__sprint_r>
  d04ae8:	d9c15117 	ldw	r7,1348(sp)
  d04aec:	103ea01e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d04af0:	dc800e17 	ldw	r18,56(sp)
  d04af4:	dc400d17 	ldw	r17,52(sp)
  d04af8:	dd401904 	addi	r21,sp,100
  d04afc:	003e1c06 	br	d04370 <___vfprintf_internal_r+0x4e0>
  d04b00:	d9014f17 	ldw	r4,1340(sp)
  d04b04:	b00b883a 	mov	r5,r22
  d04b08:	d9800c04 	addi	r6,sp,48
  d04b0c:	d9c15115 	stw	r7,1348(sp)
  d04b10:	0d03e380 	call	d03e38 <__sprint_r>
  d04b14:	d9c15117 	ldw	r7,1348(sp)
  d04b18:	103e951e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d04b1c:	dc800e17 	ldw	r18,56(sp)
  d04b20:	dc400d17 	ldw	r17,52(sp)
  d04b24:	dd401904 	addi	r21,sp,100
  d04b28:	003e0406 	br	d0433c <___vfprintf_internal_r+0x4ac>
  d04b2c:	d9000517 	ldw	r4,20(sp)
  d04b30:	0102520e 	bge	zero,r4,d0547c <___vfprintf_internal_r+0x15ec>
  d04b34:	d9814717 	ldw	r6,1308(sp)
  d04b38:	21807a16 	blt	r4,r6,d04d24 <___vfprintf_internal_r+0xe94>
  d04b3c:	d8814117 	ldw	r2,1284(sp)
  d04b40:	91a5883a 	add	r18,r18,r6
  d04b44:	8c400044 	addi	r17,r17,1
  d04b48:	a8800015 	stw	r2,0(r21)
  d04b4c:	008001c4 	movi	r2,7
  d04b50:	a9800115 	stw	r6,4(r21)
  d04b54:	dc800e15 	stw	r18,56(sp)
  d04b58:	dc400d15 	stw	r17,52(sp)
  d04b5c:	1442f616 	blt	r2,r17,d05738 <___vfprintf_internal_r+0x18a8>
  d04b60:	a8c00204 	addi	r3,r21,8
  d04b64:	d9414717 	ldw	r5,1308(sp)
  d04b68:	2161c83a 	sub	r16,r4,r5
  d04b6c:	043f9d0e 	bge	zero,r16,d049e4 <___vfprintf_internal_r+0xb54>
  d04b70:	00800404 	movi	r2,16
  d04b74:	1402130e 	bge	r2,r16,d053c4 <___vfprintf_internal_r+0x1534>
  d04b78:	dc400d17 	ldw	r17,52(sp)
  d04b7c:	1027883a 	mov	r19,r2
  d04b80:	07003474 	movhi	fp,209
  d04b84:	e7045f84 	addi	fp,fp,4478
  d04b88:	050001c4 	movi	r20,7
  d04b8c:	00000306 	br	d04b9c <___vfprintf_internal_r+0xd0c>
  d04b90:	18c00204 	addi	r3,r3,8
  d04b94:	843ffc04 	addi	r16,r16,-16
  d04b98:	9c020d0e 	bge	r19,r16,d053d0 <___vfprintf_internal_r+0x1540>
  d04b9c:	94800404 	addi	r18,r18,16
  d04ba0:	8c400044 	addi	r17,r17,1
  d04ba4:	1f000015 	stw	fp,0(r3)
  d04ba8:	1cc00115 	stw	r19,4(r3)
  d04bac:	dc800e15 	stw	r18,56(sp)
  d04bb0:	dc400d15 	stw	r17,52(sp)
  d04bb4:	a47ff60e 	bge	r20,r17,d04b90 <___vfprintf_internal_r+0xd00>
  d04bb8:	d9014f17 	ldw	r4,1340(sp)
  d04bbc:	b00b883a 	mov	r5,r22
  d04bc0:	d9800c04 	addi	r6,sp,48
  d04bc4:	0d03e380 	call	d03e38 <__sprint_r>
  d04bc8:	103e691e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d04bcc:	dc800e17 	ldw	r18,56(sp)
  d04bd0:	dc400d17 	ldw	r17,52(sp)
  d04bd4:	d8c01904 	addi	r3,sp,100
  d04bd8:	003fee06 	br	d04b94 <___vfprintf_internal_r+0xd04>
  d04bdc:	d8814717 	ldw	r2,1308(sp)
  d04be0:	143fffc4 	addi	r16,r2,-1
  d04be4:	043e970e 	bge	zero,r16,d04644 <___vfprintf_internal_r+0x7b4>
  d04be8:	00800404 	movi	r2,16
  d04bec:	1400180e 	bge	r2,r16,d04c50 <___vfprintf_internal_r+0xdc0>
  d04bf0:	1029883a 	mov	r20,r2
  d04bf4:	07003474 	movhi	fp,209
  d04bf8:	e7045f84 	addi	fp,fp,4478
  d04bfc:	054001c4 	movi	r21,7
  d04c00:	00000306 	br	d04c10 <___vfprintf_internal_r+0xd80>
  d04c04:	9cc00204 	addi	r19,r19,8
  d04c08:	843ffc04 	addi	r16,r16,-16
  d04c0c:	a400120e 	bge	r20,r16,d04c58 <___vfprintf_internal_r+0xdc8>
  d04c10:	94800404 	addi	r18,r18,16
  d04c14:	8c400044 	addi	r17,r17,1
  d04c18:	9f000015 	stw	fp,0(r19)
  d04c1c:	9d000115 	stw	r20,4(r19)
  d04c20:	dc800e15 	stw	r18,56(sp)
  d04c24:	dc400d15 	stw	r17,52(sp)
  d04c28:	ac7ff60e 	bge	r21,r17,d04c04 <___vfprintf_internal_r+0xd74>
  d04c2c:	d9014f17 	ldw	r4,1340(sp)
  d04c30:	b00b883a 	mov	r5,r22
  d04c34:	d9800c04 	addi	r6,sp,48
  d04c38:	0d03e380 	call	d03e38 <__sprint_r>
  d04c3c:	103e4c1e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d04c40:	dc800e17 	ldw	r18,56(sp)
  d04c44:	dc400d17 	ldw	r17,52(sp)
  d04c48:	dcc01904 	addi	r19,sp,100
  d04c4c:	003fee06 	br	d04c08 <___vfprintf_internal_r+0xd78>
  d04c50:	07003474 	movhi	fp,209
  d04c54:	e7045f84 	addi	fp,fp,4478
  d04c58:	9425883a 	add	r18,r18,r16
  d04c5c:	8c400044 	addi	r17,r17,1
  d04c60:	008001c4 	movi	r2,7
  d04c64:	9f000015 	stw	fp,0(r19)
  d04c68:	9c000115 	stw	r16,4(r19)
  d04c6c:	dc800e15 	stw	r18,56(sp)
  d04c70:	dc400d15 	stw	r17,52(sp)
  d04c74:	147e720e 	bge	r2,r17,d04640 <___vfprintf_internal_r+0x7b0>
  d04c78:	d9014f17 	ldw	r4,1340(sp)
  d04c7c:	b00b883a 	mov	r5,r22
  d04c80:	d9800c04 	addi	r6,sp,48
  d04c84:	0d03e380 	call	d03e38 <__sprint_r>
  d04c88:	103e391e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d04c8c:	dc800e17 	ldw	r18,56(sp)
  d04c90:	dc400d17 	ldw	r17,52(sp)
  d04c94:	dcc01904 	addi	r19,sp,100
  d04c98:	003e6a06 	br	d04644 <___vfprintf_internal_r+0x7b4>
  d04c9c:	d9014f17 	ldw	r4,1340(sp)
  d04ca0:	b00b883a 	mov	r5,r22
  d04ca4:	d9800c04 	addi	r6,sp,48
  d04ca8:	d9c15115 	stw	r7,1348(sp)
  d04cac:	0d03e380 	call	d03e38 <__sprint_r>
  d04cb0:	d9c15117 	ldw	r7,1348(sp)
  d04cb4:	103e2e1e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d04cb8:	dc800e17 	ldw	r18,56(sp)
  d04cbc:	dc400d17 	ldw	r17,52(sp)
  d04cc0:	dd401904 	addi	r21,sp,100
  d04cc4:	003dba06 	br	d043b0 <___vfprintf_internal_r+0x520>
  d04cc8:	d9014f17 	ldw	r4,1340(sp)
  d04ccc:	b00b883a 	mov	r5,r22
  d04cd0:	d9800c04 	addi	r6,sp,48
  d04cd4:	0d03e380 	call	d03e38 <__sprint_r>
  d04cd8:	103e251e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d04cdc:	dc800e17 	ldw	r18,56(sp)
  d04ce0:	dc400d17 	ldw	r17,52(sp)
  d04ce4:	dcc01904 	addi	r19,sp,100
  d04ce8:	003e4206 	br	d045f4 <___vfprintf_internal_r+0x764>
  d04cec:	d9014f17 	ldw	r4,1340(sp)
  d04cf0:	b00b883a 	mov	r5,r22
  d04cf4:	d9800c04 	addi	r6,sp,48
  d04cf8:	0d03e380 	call	d03e38 <__sprint_r>
  d04cfc:	103e1c1e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d04d00:	dc800e17 	ldw	r18,56(sp)
  d04d04:	dc400d17 	ldw	r17,52(sp)
  d04d08:	d8c01904 	addi	r3,sp,100
  d04d0c:	003e2e06 	br	d045c8 <___vfprintf_internal_r+0x738>
  d04d10:	d9414c17 	ldw	r5,1328(sp)
  d04d14:	2880004c 	andi	r2,r5,1
  d04d18:	1005003a 	cmpeq	r2,r2,zero
  d04d1c:	103dda1e 	bne	r2,zero,d04488 <___vfprintf_internal_r+0x5f8>
  d04d20:	003e9f06 	br	d047a0 <___vfprintf_internal_r+0x910>
  d04d24:	d8c14117 	ldw	r3,1284(sp)
  d04d28:	9125883a 	add	r18,r18,r4
  d04d2c:	8c400044 	addi	r17,r17,1
  d04d30:	008001c4 	movi	r2,7
  d04d34:	a8c00015 	stw	r3,0(r21)
  d04d38:	a9000115 	stw	r4,4(r21)
  d04d3c:	dc800e15 	stw	r18,56(sp)
  d04d40:	dc400d15 	stw	r17,52(sp)
  d04d44:	14426616 	blt	r2,r17,d056e0 <___vfprintf_internal_r+0x1850>
  d04d48:	a8c00204 	addi	r3,r21,8
  d04d4c:	d9414917 	ldw	r5,1316(sp)
  d04d50:	00800044 	movi	r2,1
  d04d54:	94800044 	addi	r18,r18,1
  d04d58:	8c400044 	addi	r17,r17,1
  d04d5c:	18800115 	stw	r2,4(r3)
  d04d60:	008001c4 	movi	r2,7
  d04d64:	19400015 	stw	r5,0(r3)
  d04d68:	dc800e15 	stw	r18,56(sp)
  d04d6c:	dc400d15 	stw	r17,52(sp)
  d04d70:	2021883a 	mov	r16,r4
  d04d74:	14425016 	blt	r2,r17,d056b8 <___vfprintf_internal_r+0x1828>
  d04d78:	19400204 	addi	r5,r3,8
  d04d7c:	d9814717 	ldw	r6,1308(sp)
  d04d80:	8c400044 	addi	r17,r17,1
  d04d84:	dc400d15 	stw	r17,52(sp)
  d04d88:	3107c83a 	sub	r3,r6,r4
  d04d8c:	d9014117 	ldw	r4,1284(sp)
  d04d90:	90e5883a 	add	r18,r18,r3
  d04d94:	28c00115 	stw	r3,4(r5)
  d04d98:	8105883a 	add	r2,r16,r4
  d04d9c:	28800015 	stw	r2,0(r5)
  d04da0:	008001c4 	movi	r2,7
  d04da4:	dc800e15 	stw	r18,56(sp)
  d04da8:	147f1d16 	blt	r2,r17,d04a20 <___vfprintf_internal_r+0xb90>
  d04dac:	28c00204 	addi	r3,r5,8
  d04db0:	003db506 	br	d04488 <___vfprintf_internal_r+0x5f8>
  d04db4:	3c000017 	ldw	r16,0(r7)
  d04db8:	3c400117 	ldw	r17,4(r7)
  d04dbc:	39800204 	addi	r6,r7,8
  d04dc0:	01000044 	movi	r4,1
  d04dc4:	d9814015 	stw	r6,1280(sp)
  d04dc8:	d8000405 	stb	zero,16(sp)
  d04dcc:	003ebe06 	br	d048c8 <___vfprintf_internal_r+0xa38>
  d04dd0:	3c000017 	ldw	r16,0(r7)
  d04dd4:	3c400117 	ldw	r17,4(r7)
  d04dd8:	38800204 	addi	r2,r7,8
  d04ddc:	d8814015 	stw	r2,1280(sp)
  d04de0:	003eb706 	br	d048c0 <___vfprintf_internal_r+0xa30>
  d04de4:	3c000017 	ldw	r16,0(r7)
  d04de8:	3c400117 	ldw	r17,4(r7)
  d04dec:	39000204 	addi	r4,r7,8
  d04df0:	d9014015 	stw	r4,1280(sp)
  d04df4:	0009883a 	mov	r4,zero
  d04df8:	d8000405 	stb	zero,16(sp)
  d04dfc:	003eb206 	br	d048c8 <___vfprintf_internal_r+0xa38>
  d04e00:	38c00017 	ldw	r3,0(r7)
  d04e04:	39c00104 	addi	r7,r7,4
  d04e08:	d8c14a15 	stw	r3,1320(sp)
  d04e0c:	1800d10e 	bge	r3,zero,d05154 <___vfprintf_internal_r+0x12c4>
  d04e10:	00c7c83a 	sub	r3,zero,r3
  d04e14:	d8c14a15 	stw	r3,1320(sp)
  d04e18:	d9014c17 	ldw	r4,1328(sp)
  d04e1c:	b8c00007 	ldb	r3,0(r23)
  d04e20:	21000114 	ori	r4,r4,4
  d04e24:	d9014c15 	stw	r4,1328(sp)
  d04e28:	003c9806 	br	d0408c <___vfprintf_internal_r+0x1fc>
  d04e2c:	d9814c17 	ldw	r6,1328(sp)
  d04e30:	3080080c 	andi	r2,r6,32
  d04e34:	1001f026 	beq	r2,zero,d055f8 <___vfprintf_internal_r+0x1768>
  d04e38:	d9014b17 	ldw	r4,1324(sp)
  d04e3c:	38800017 	ldw	r2,0(r7)
  d04e40:	39c00104 	addi	r7,r7,4
  d04e44:	d9c14015 	stw	r7,1280(sp)
  d04e48:	2007d7fa 	srai	r3,r4,31
  d04e4c:	d9c14017 	ldw	r7,1280(sp)
  d04e50:	11000015 	stw	r4,0(r2)
  d04e54:	10c00115 	stw	r3,4(r2)
  d04e58:	003c6906 	br	d04000 <___vfprintf_internal_r+0x170>
  d04e5c:	b8c00007 	ldb	r3,0(r23)
  d04e60:	00801b04 	movi	r2,108
  d04e64:	18824f26 	beq	r3,r2,d057a4 <___vfprintf_internal_r+0x1914>
  d04e68:	d9414c17 	ldw	r5,1328(sp)
  d04e6c:	29400414 	ori	r5,r5,16
  d04e70:	d9414c15 	stw	r5,1328(sp)
  d04e74:	003c8506 	br	d0408c <___vfprintf_internal_r+0x1fc>
  d04e78:	d9814c17 	ldw	r6,1328(sp)
  d04e7c:	b8c00007 	ldb	r3,0(r23)
  d04e80:	31800814 	ori	r6,r6,32
  d04e84:	d9814c15 	stw	r6,1328(sp)
  d04e88:	003c8006 	br	d0408c <___vfprintf_internal_r+0x1fc>
  d04e8c:	d8814c17 	ldw	r2,1328(sp)
  d04e90:	3c000017 	ldw	r16,0(r7)
  d04e94:	00c01e04 	movi	r3,120
  d04e98:	10800094 	ori	r2,r2,2
  d04e9c:	d8814c15 	stw	r2,1328(sp)
  d04ea0:	39c00104 	addi	r7,r7,4
  d04ea4:	01403474 	movhi	r5,209
  d04ea8:	29444904 	addi	r5,r5,4388
  d04eac:	00800c04 	movi	r2,48
  d04eb0:	0023883a 	mov	r17,zero
  d04eb4:	01000084 	movi	r4,2
  d04eb8:	d9c14015 	stw	r7,1280(sp)
  d04ebc:	d8c14d15 	stw	r3,1332(sp)
  d04ec0:	d9414415 	stw	r5,1296(sp)
  d04ec4:	d8800445 	stb	r2,17(sp)
  d04ec8:	d8c00485 	stb	r3,18(sp)
  d04ecc:	d8000405 	stb	zero,16(sp)
  d04ed0:	003e7d06 	br	d048c8 <___vfprintf_internal_r+0xa38>
  d04ed4:	d8814c17 	ldw	r2,1328(sp)
  d04ed8:	b8c00007 	ldb	r3,0(r23)
  d04edc:	10801014 	ori	r2,r2,64
  d04ee0:	d8814c15 	stw	r2,1328(sp)
  d04ee4:	003c6906 	br	d0408c <___vfprintf_internal_r+0x1fc>
  d04ee8:	d9414c17 	ldw	r5,1328(sp)
  d04eec:	2880020c 	andi	r2,r5,8
  d04ef0:	1001df26 	beq	r2,zero,d05670 <___vfprintf_internal_r+0x17e0>
  d04ef4:	39800017 	ldw	r6,0(r7)
  d04ef8:	38800204 	addi	r2,r7,8
  d04efc:	d8814015 	stw	r2,1280(sp)
  d04f00:	d9814215 	stw	r6,1288(sp)
  d04f04:	39c00117 	ldw	r7,4(r7)
  d04f08:	d9c14315 	stw	r7,1292(sp)
  d04f0c:	d9014217 	ldw	r4,1288(sp)
  d04f10:	d9414317 	ldw	r5,1292(sp)
  d04f14:	0d0a8300 	call	d0a830 <__isinfd>
  d04f18:	10021726 	beq	r2,zero,d05778 <___vfprintf_internal_r+0x18e8>
  d04f1c:	d9014217 	ldw	r4,1288(sp)
  d04f20:	d9414317 	ldw	r5,1292(sp)
  d04f24:	000d883a 	mov	r6,zero
  d04f28:	000f883a 	mov	r7,zero
  d04f2c:	0d0c0940 	call	d0c094 <__ltdf2>
  d04f30:	1002ca16 	blt	r2,zero,d05a5c <___vfprintf_internal_r+0x1bcc>
  d04f34:	d9414d17 	ldw	r5,1332(sp)
  d04f38:	008011c4 	movi	r2,71
  d04f3c:	11420a16 	blt	r2,r5,d05768 <___vfprintf_internal_r+0x18d8>
  d04f40:	01803474 	movhi	r6,209
  d04f44:	31844e04 	addi	r6,r6,4408
  d04f48:	d9814115 	stw	r6,1284(sp)
  d04f4c:	d9014c17 	ldw	r4,1328(sp)
  d04f50:	00c000c4 	movi	r3,3
  d04f54:	00bfdfc4 	movi	r2,-129
  d04f58:	2088703a 	and	r4,r4,r2
  d04f5c:	180f883a 	mov	r7,r3
  d04f60:	d8c14515 	stw	r3,1300(sp)
  d04f64:	d9014c15 	stw	r4,1328(sp)
  d04f68:	d8014615 	stw	zero,1304(sp)
  d04f6c:	003e6a06 	br	d04918 <___vfprintf_internal_r+0xa88>
  d04f70:	38800017 	ldw	r2,0(r7)
  d04f74:	00c00044 	movi	r3,1
  d04f78:	39c00104 	addi	r7,r7,4
  d04f7c:	d9c14015 	stw	r7,1280(sp)
  d04f80:	d9000f04 	addi	r4,sp,60
  d04f84:	180f883a 	mov	r7,r3
  d04f88:	d8c14515 	stw	r3,1300(sp)
  d04f8c:	d9014115 	stw	r4,1284(sp)
  d04f90:	d8800f05 	stb	r2,60(sp)
  d04f94:	d8000405 	stb	zero,16(sp)
  d04f98:	003cac06 	br	d0424c <___vfprintf_internal_r+0x3bc>
  d04f9c:	01403474 	movhi	r5,209
  d04fa0:	29445404 	addi	r5,r5,4432
  d04fa4:	d9414415 	stw	r5,1296(sp)
  d04fa8:	d9814c17 	ldw	r6,1328(sp)
  d04fac:	3080080c 	andi	r2,r6,32
  d04fb0:	1000f926 	beq	r2,zero,d05398 <___vfprintf_internal_r+0x1508>
  d04fb4:	3c000017 	ldw	r16,0(r7)
  d04fb8:	3c400117 	ldw	r17,4(r7)
  d04fbc:	38800204 	addi	r2,r7,8
  d04fc0:	d8814015 	stw	r2,1280(sp)
  d04fc4:	d9414c17 	ldw	r5,1328(sp)
  d04fc8:	2880004c 	andi	r2,r5,1
  d04fcc:	1005003a 	cmpeq	r2,r2,zero
  d04fd0:	1000b31e 	bne	r2,zero,d052a0 <___vfprintf_internal_r+0x1410>
  d04fd4:	8444b03a 	or	r2,r16,r17
  d04fd8:	1000b126 	beq	r2,zero,d052a0 <___vfprintf_internal_r+0x1410>
  d04fdc:	d9814d17 	ldw	r6,1332(sp)
  d04fe0:	29400094 	ori	r5,r5,2
  d04fe4:	00800c04 	movi	r2,48
  d04fe8:	01000084 	movi	r4,2
  d04fec:	d9414c15 	stw	r5,1328(sp)
  d04ff0:	d8800445 	stb	r2,17(sp)
  d04ff4:	d9800485 	stb	r6,18(sp)
  d04ff8:	d8000405 	stb	zero,16(sp)
  d04ffc:	003e3206 	br	d048c8 <___vfprintf_internal_r+0xa38>
  d05000:	01803474 	movhi	r6,209
  d05004:	31844904 	addi	r6,r6,4388
  d05008:	d9814415 	stw	r6,1296(sp)
  d0500c:	003fe606 	br	d04fa8 <___vfprintf_internal_r+0x1118>
  d05010:	00800ac4 	movi	r2,43
  d05014:	d8800405 	stb	r2,16(sp)
  d05018:	b8c00007 	ldb	r3,0(r23)
  d0501c:	003c1b06 	br	d0408c <___vfprintf_internal_r+0x1fc>
  d05020:	d8814c17 	ldw	r2,1328(sp)
  d05024:	b8c00007 	ldb	r3,0(r23)
  d05028:	10800054 	ori	r2,r2,1
  d0502c:	d8814c15 	stw	r2,1328(sp)
  d05030:	003c1606 	br	d0408c <___vfprintf_internal_r+0x1fc>
  d05034:	d8800407 	ldb	r2,16(sp)
  d05038:	1000461e 	bne	r2,zero,d05154 <___vfprintf_internal_r+0x12c4>
  d0503c:	00800804 	movi	r2,32
  d05040:	d8800405 	stb	r2,16(sp)
  d05044:	b8c00007 	ldb	r3,0(r23)
  d05048:	003c1006 	br	d0408c <___vfprintf_internal_r+0x1fc>
  d0504c:	d9814c17 	ldw	r6,1328(sp)
  d05050:	b8c00007 	ldb	r3,0(r23)
  d05054:	31800214 	ori	r6,r6,8
  d05058:	d9814c15 	stw	r6,1328(sp)
  d0505c:	003c0b06 	br	d0408c <___vfprintf_internal_r+0x1fc>
  d05060:	0007883a 	mov	r3,zero
  d05064:	01000244 	movi	r4,9
  d05068:	188002a4 	muli	r2,r3,10
  d0506c:	b8c00007 	ldb	r3,0(r23)
  d05070:	d9814d17 	ldw	r6,1332(sp)
  d05074:	bdc00044 	addi	r23,r23,1
  d05078:	d8c14d15 	stw	r3,1332(sp)
  d0507c:	d9414d17 	ldw	r5,1332(sp)
  d05080:	3085883a 	add	r2,r6,r2
  d05084:	10fff404 	addi	r3,r2,-48
  d05088:	28bff404 	addi	r2,r5,-48
  d0508c:	20bff62e 	bgeu	r4,r2,d05068 <___vfprintf_internal_r+0x11d8>
  d05090:	d8c14a15 	stw	r3,1320(sp)
  d05094:	003bff06 	br	d04094 <___vfprintf_internal_r+0x204>
  d05098:	d9414c17 	ldw	r5,1328(sp)
  d0509c:	b8c00007 	ldb	r3,0(r23)
  d050a0:	29402014 	ori	r5,r5,128
  d050a4:	d9414c15 	stw	r5,1328(sp)
  d050a8:	003bf806 	br	d0408c <___vfprintf_internal_r+0x1fc>
  d050ac:	b8c00007 	ldb	r3,0(r23)
  d050b0:	00800a84 	movi	r2,42
  d050b4:	bdc00044 	addi	r23,r23,1
  d050b8:	18831526 	beq	r3,r2,d05d10 <___vfprintf_internal_r+0x1e80>
  d050bc:	d8c14d15 	stw	r3,1332(sp)
  d050c0:	18bff404 	addi	r2,r3,-48
  d050c4:	00c00244 	movi	r3,9
  d050c8:	18827836 	bltu	r3,r2,d05aac <___vfprintf_internal_r+0x1c1c>
  d050cc:	000d883a 	mov	r6,zero
  d050d0:	308002a4 	muli	r2,r6,10
  d050d4:	b9800007 	ldb	r6,0(r23)
  d050d8:	d9414d17 	ldw	r5,1332(sp)
  d050dc:	bdc00044 	addi	r23,r23,1
  d050e0:	d9814d15 	stw	r6,1332(sp)
  d050e4:	d9014d17 	ldw	r4,1332(sp)
  d050e8:	1145883a 	add	r2,r2,r5
  d050ec:	11bff404 	addi	r6,r2,-48
  d050f0:	20bff404 	addi	r2,r4,-48
  d050f4:	18bff62e 	bgeu	r3,r2,d050d0 <___vfprintf_internal_r+0x1240>
  d050f8:	3027883a 	mov	r19,r6
  d050fc:	303be50e 	bge	r6,zero,d04094 <___vfprintf_internal_r+0x204>
  d05100:	04ffffc4 	movi	r19,-1
  d05104:	003be306 	br	d04094 <___vfprintf_internal_r+0x204>
  d05108:	d8000405 	stb	zero,16(sp)
  d0510c:	39800017 	ldw	r6,0(r7)
  d05110:	39c00104 	addi	r7,r7,4
  d05114:	d9c14015 	stw	r7,1280(sp)
  d05118:	d9814115 	stw	r6,1284(sp)
  d0511c:	3001c926 	beq	r6,zero,d05844 <___vfprintf_internal_r+0x19b4>
  d05120:	98000e16 	blt	r19,zero,d0515c <___vfprintf_internal_r+0x12cc>
  d05124:	d9014117 	ldw	r4,1284(sp)
  d05128:	000b883a 	mov	r5,zero
  d0512c:	980d883a 	mov	r6,r19
  d05130:	0d08f4c0 	call	d08f4c <memchr>
  d05134:	10025926 	beq	r2,zero,d05a9c <___vfprintf_internal_r+0x1c0c>
  d05138:	d8c14117 	ldw	r3,1284(sp)
  d0513c:	10cfc83a 	sub	r7,r2,r3
  d05140:	99c19e16 	blt	r19,r7,d057bc <___vfprintf_internal_r+0x192c>
  d05144:	d9c14515 	stw	r7,1300(sp)
  d05148:	38000916 	blt	r7,zero,d05170 <___vfprintf_internal_r+0x12e0>
  d0514c:	d8014615 	stw	zero,1304(sp)
  d05150:	003df106 	br	d04918 <___vfprintf_internal_r+0xa88>
  d05154:	b8c00007 	ldb	r3,0(r23)
  d05158:	003bcc06 	br	d0408c <___vfprintf_internal_r+0x1fc>
  d0515c:	d9014117 	ldw	r4,1284(sp)
  d05160:	0d03dc40 	call	d03dc4 <strlen>
  d05164:	d8814515 	stw	r2,1300(sp)
  d05168:	100f883a 	mov	r7,r2
  d0516c:	103ff70e 	bge	r2,zero,d0514c <___vfprintf_internal_r+0x12bc>
  d05170:	d8014515 	stw	zero,1300(sp)
  d05174:	d8014615 	stw	zero,1304(sp)
  d05178:	003de706 	br	d04918 <___vfprintf_internal_r+0xa88>
  d0517c:	20c03fcc 	andi	r3,r4,255
  d05180:	00800044 	movi	r2,1
  d05184:	18802d26 	beq	r3,r2,d0523c <___vfprintf_internal_r+0x13ac>
  d05188:	18800e36 	bltu	r3,r2,d051c4 <___vfprintf_internal_r+0x1334>
  d0518c:	00800084 	movi	r2,2
  d05190:	1880fa26 	beq	r3,r2,d0557c <___vfprintf_internal_r+0x16ec>
  d05194:	01003474 	movhi	r4,209
  d05198:	21045904 	addi	r4,r4,4452
  d0519c:	0d03dc40 	call	d03dc4 <strlen>
  d051a0:	100f883a 	mov	r7,r2
  d051a4:	dcc14515 	stw	r19,1300(sp)
  d051a8:	9880010e 	bge	r19,r2,d051b0 <___vfprintf_internal_r+0x1320>
  d051ac:	d8814515 	stw	r2,1300(sp)
  d051b0:	00803474 	movhi	r2,209
  d051b4:	10845904 	addi	r2,r2,4452
  d051b8:	dcc14615 	stw	r19,1304(sp)
  d051bc:	d8814115 	stw	r2,1284(sp)
  d051c0:	003dd506 	br	d04918 <___vfprintf_internal_r+0xa88>
  d051c4:	d9401904 	addi	r5,sp,100
  d051c8:	dd000f04 	addi	r20,sp,60
  d051cc:	d9414115 	stw	r5,1284(sp)
  d051d0:	880a977a 	slli	r5,r17,29
  d051d4:	d9814117 	ldw	r6,1284(sp)
  d051d8:	8004d0fa 	srli	r2,r16,3
  d051dc:	8806d0fa 	srli	r3,r17,3
  d051e0:	810001cc 	andi	r4,r16,7
  d051e4:	2884b03a 	or	r2,r5,r2
  d051e8:	31bfffc4 	addi	r6,r6,-1
  d051ec:	21000c04 	addi	r4,r4,48
  d051f0:	d9814115 	stw	r6,1284(sp)
  d051f4:	10cab03a 	or	r5,r2,r3
  d051f8:	31000005 	stb	r4,0(r6)
  d051fc:	1021883a 	mov	r16,r2
  d05200:	1823883a 	mov	r17,r3
  d05204:	283ff21e 	bne	r5,zero,d051d0 <___vfprintf_internal_r+0x1340>
  d05208:	d8c14c17 	ldw	r3,1328(sp)
  d0520c:	1880004c 	andi	r2,r3,1
  d05210:	1005003a 	cmpeq	r2,r2,zero
  d05214:	103db91e 	bne	r2,zero,d048fc <___vfprintf_internal_r+0xa6c>
  d05218:	20803fcc 	andi	r2,r4,255
  d0521c:	1080201c 	xori	r2,r2,128
  d05220:	10bfe004 	addi	r2,r2,-128
  d05224:	00c00c04 	movi	r3,48
  d05228:	10fdb426 	beq	r2,r3,d048fc <___vfprintf_internal_r+0xa6c>
  d0522c:	31bfffc4 	addi	r6,r6,-1
  d05230:	d9814115 	stw	r6,1284(sp)
  d05234:	30c00005 	stb	r3,0(r6)
  d05238:	003db006 	br	d048fc <___vfprintf_internal_r+0xa6c>
  d0523c:	88800068 	cmpgeui	r2,r17,1
  d05240:	10002c1e 	bne	r2,zero,d052f4 <___vfprintf_internal_r+0x1464>
  d05244:	8800021e 	bne	r17,zero,d05250 <___vfprintf_internal_r+0x13c0>
  d05248:	00800244 	movi	r2,9
  d0524c:	14002936 	bltu	r2,r16,d052f4 <___vfprintf_internal_r+0x1464>
  d05250:	d90018c4 	addi	r4,sp,99
  d05254:	dd000f04 	addi	r20,sp,60
  d05258:	d9014115 	stw	r4,1284(sp)
  d0525c:	d9014117 	ldw	r4,1284(sp)
  d05260:	80800c04 	addi	r2,r16,48
  d05264:	20800005 	stb	r2,0(r4)
  d05268:	003da406 	br	d048fc <___vfprintf_internal_r+0xa6c>
  d0526c:	dc400d17 	ldw	r17,52(sp)
  d05270:	07003474 	movhi	fp,209
  d05274:	e7045f84 	addi	fp,fp,4478
  d05278:	9425883a 	add	r18,r18,r16
  d0527c:	8c400044 	addi	r17,r17,1
  d05280:	008001c4 	movi	r2,7
  d05284:	1f000015 	stw	fp,0(r3)
  d05288:	1c000115 	stw	r16,4(r3)
  d0528c:	dc800e15 	stw	r18,56(sp)
  d05290:	dc400d15 	stw	r17,52(sp)
  d05294:	147de216 	blt	r2,r17,d04a20 <___vfprintf_internal_r+0xb90>
  d05298:	18c00204 	addi	r3,r3,8
  d0529c:	003c7a06 	br	d04488 <___vfprintf_internal_r+0x5f8>
  d052a0:	01000084 	movi	r4,2
  d052a4:	d8000405 	stb	zero,16(sp)
  d052a8:	003d8706 	br	d048c8 <___vfprintf_internal_r+0xa38>
  d052ac:	d9814c17 	ldw	r6,1328(sp)
  d052b0:	30c4703a 	and	r2,r6,r3
  d052b4:	1005003a 	cmpeq	r2,r2,zero
  d052b8:	103cb926 	beq	r2,zero,d045a0 <___vfprintf_internal_r+0x710>
  d052bc:	d9014117 	ldw	r4,1284(sp)
  d052c0:	94800044 	addi	r18,r18,1
  d052c4:	8c400044 	addi	r17,r17,1
  d052c8:	008001c4 	movi	r2,7
  d052cc:	a9000015 	stw	r4,0(r21)
  d052d0:	a8c00115 	stw	r3,4(r21)
  d052d4:	dc800e15 	stw	r18,56(sp)
  d052d8:	dc400d15 	stw	r17,52(sp)
  d052dc:	147e6616 	blt	r2,r17,d04c78 <___vfprintf_internal_r+0xde8>
  d052e0:	acc00204 	addi	r19,r21,8
  d052e4:	003cd706 	br	d04644 <___vfprintf_internal_r+0x7b4>
  d052e8:	07003474 	movhi	fp,209
  d052ec:	e7045f84 	addi	fp,fp,4478
  d052f0:	003c4f06 	br	d04430 <___vfprintf_internal_r+0x5a0>
  d052f4:	dd000f04 	addi	r20,sp,60
  d052f8:	dc801904 	addi	r18,sp,100
  d052fc:	8009883a 	mov	r4,r16
  d05300:	880b883a 	mov	r5,r17
  d05304:	01800284 	movi	r6,10
  d05308:	000f883a 	mov	r7,zero
  d0530c:	0d0b5880 	call	d0b588 <__umoddi3>
  d05310:	12000c04 	addi	r8,r2,48
  d05314:	94bfffc4 	addi	r18,r18,-1
  d05318:	8009883a 	mov	r4,r16
  d0531c:	880b883a 	mov	r5,r17
  d05320:	01800284 	movi	r6,10
  d05324:	000f883a 	mov	r7,zero
  d05328:	92000005 	stb	r8,0(r18)
  d0532c:	0d0afac0 	call	d0afac <__udivdi3>
  d05330:	1009883a 	mov	r4,r2
  d05334:	1021883a 	mov	r16,r2
  d05338:	18800068 	cmpgeui	r2,r3,1
  d0533c:	1823883a 	mov	r17,r3
  d05340:	103fee1e 	bne	r2,zero,d052fc <___vfprintf_internal_r+0x146c>
  d05344:	1800021e 	bne	r3,zero,d05350 <___vfprintf_internal_r+0x14c0>
  d05348:	00800244 	movi	r2,9
  d0534c:	113feb36 	bltu	r2,r4,d052fc <___vfprintf_internal_r+0x146c>
  d05350:	94bfffc4 	addi	r18,r18,-1
  d05354:	dc814115 	stw	r18,1284(sp)
  d05358:	003fc006 	br	d0525c <___vfprintf_internal_r+0x13cc>
  d0535c:	d9014c17 	ldw	r4,1328(sp)
  d05360:	2080004c 	andi	r2,r4,1
  d05364:	10009a1e 	bne	r2,zero,d055d0 <___vfprintf_internal_r+0x1740>
  d05368:	d9401904 	addi	r5,sp,100
  d0536c:	dd000f04 	addi	r20,sp,60
  d05370:	d9414115 	stw	r5,1284(sp)
  d05374:	003d6106 	br	d048fc <___vfprintf_internal_r+0xa6c>
  d05378:	d9014f17 	ldw	r4,1340(sp)
  d0537c:	b00b883a 	mov	r5,r22
  d05380:	d9800c04 	addi	r6,sp,48
  d05384:	0d03e380 	call	d03e38 <__sprint_r>
  d05388:	103c791e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d0538c:	dc800e17 	ldw	r18,56(sp)
  d05390:	d8c01904 	addi	r3,sp,100
  d05394:	003cff06 	br	d04794 <___vfprintf_internal_r+0x904>
  d05398:	d8c14c17 	ldw	r3,1328(sp)
  d0539c:	1880040c 	andi	r2,r3,16
  d053a0:	1000711e 	bne	r2,zero,d05568 <___vfprintf_internal_r+0x16d8>
  d053a4:	d9014c17 	ldw	r4,1328(sp)
  d053a8:	2080100c 	andi	r2,r4,64
  d053ac:	10006e26 	beq	r2,zero,d05568 <___vfprintf_internal_r+0x16d8>
  d053b0:	3c00000b 	ldhu	r16,0(r7)
  d053b4:	0023883a 	mov	r17,zero
  d053b8:	39c00104 	addi	r7,r7,4
  d053bc:	d9c14015 	stw	r7,1280(sp)
  d053c0:	003f0006 	br	d04fc4 <___vfprintf_internal_r+0x1134>
  d053c4:	dc400d17 	ldw	r17,52(sp)
  d053c8:	07003474 	movhi	fp,209
  d053cc:	e7045f84 	addi	fp,fp,4478
  d053d0:	9425883a 	add	r18,r18,r16
  d053d4:	8c400044 	addi	r17,r17,1
  d053d8:	008001c4 	movi	r2,7
  d053dc:	1f000015 	stw	fp,0(r3)
  d053e0:	1c000115 	stw	r16,4(r3)
  d053e4:	dc800e15 	stw	r18,56(sp)
  d053e8:	dc400d15 	stw	r17,52(sp)
  d053ec:	147d7616 	blt	r2,r17,d049c8 <___vfprintf_internal_r+0xb38>
  d053f0:	18c00204 	addi	r3,r3,8
  d053f4:	003d7b06 	br	d049e4 <___vfprintf_internal_r+0xb54>
  d053f8:	dc800e17 	ldw	r18,56(sp)
  d053fc:	dc400d17 	ldw	r17,52(sp)
  d05400:	07003474 	movhi	fp,209
  d05404:	e7046384 	addi	fp,fp,4494
  d05408:	003bc006 	br	d0430c <___vfprintf_internal_r+0x47c>
  d0540c:	d9014f17 	ldw	r4,1340(sp)
  d05410:	b00b883a 	mov	r5,r22
  d05414:	d9800c04 	addi	r6,sp,48
  d05418:	0d03e380 	call	d03e38 <__sprint_r>
  d0541c:	103c541e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d05420:	dc800e17 	ldw	r18,56(sp)
  d05424:	d8c01904 	addi	r3,sp,100
  d05428:	003ce906 	br	d047d0 <___vfprintf_internal_r+0x940>
  d0542c:	3c000017 	ldw	r16,0(r7)
  d05430:	0009883a 	mov	r4,zero
  d05434:	39c00104 	addi	r7,r7,4
  d05438:	0023883a 	mov	r17,zero
  d0543c:	d9c14015 	stw	r7,1280(sp)
  d05440:	d8000405 	stb	zero,16(sp)
  d05444:	003d2006 	br	d048c8 <___vfprintf_internal_r+0xa38>
  d05448:	38800017 	ldw	r2,0(r7)
  d0544c:	39c00104 	addi	r7,r7,4
  d05450:	d9c14015 	stw	r7,1280(sp)
  d05454:	1023d7fa 	srai	r17,r2,31
  d05458:	1021883a 	mov	r16,r2
  d0545c:	003d1806 	br	d048c0 <___vfprintf_internal_r+0xa30>
  d05460:	3c000017 	ldw	r16,0(r7)
  d05464:	01000044 	movi	r4,1
  d05468:	39c00104 	addi	r7,r7,4
  d0546c:	0023883a 	mov	r17,zero
  d05470:	d9c14015 	stw	r7,1280(sp)
  d05474:	d8000405 	stb	zero,16(sp)
  d05478:	003d1306 	br	d048c8 <___vfprintf_internal_r+0xa38>
  d0547c:	00803474 	movhi	r2,209
  d05480:	1083ea04 	addi	r2,r2,4008
  d05484:	94800044 	addi	r18,r18,1
  d05488:	8c400044 	addi	r17,r17,1
  d0548c:	a8800015 	stw	r2,0(r21)
  d05490:	00c00044 	movi	r3,1
  d05494:	008001c4 	movi	r2,7
  d05498:	a8c00115 	stw	r3,4(r21)
  d0549c:	dc800e15 	stw	r18,56(sp)
  d054a0:	dc400d15 	stw	r17,52(sp)
  d054a4:	1440ca16 	blt	r2,r17,d057d0 <___vfprintf_internal_r+0x1940>
  d054a8:	a8c00204 	addi	r3,r21,8
  d054ac:	2000061e 	bne	r4,zero,d054c8 <___vfprintf_internal_r+0x1638>
  d054b0:	d9414717 	ldw	r5,1308(sp)
  d054b4:	2800041e 	bne	r5,zero,d054c8 <___vfprintf_internal_r+0x1638>
  d054b8:	d9814c17 	ldw	r6,1328(sp)
  d054bc:	3080004c 	andi	r2,r6,1
  d054c0:	1005003a 	cmpeq	r2,r2,zero
  d054c4:	103bf01e 	bne	r2,zero,d04488 <___vfprintf_internal_r+0x5f8>
  d054c8:	00800044 	movi	r2,1
  d054cc:	dc400d17 	ldw	r17,52(sp)
  d054d0:	18800115 	stw	r2,4(r3)
  d054d4:	d8814917 	ldw	r2,1316(sp)
  d054d8:	94800044 	addi	r18,r18,1
  d054dc:	8c400044 	addi	r17,r17,1
  d054e0:	18800015 	stw	r2,0(r3)
  d054e4:	008001c4 	movi	r2,7
  d054e8:	dc800e15 	stw	r18,56(sp)
  d054ec:	dc400d15 	stw	r17,52(sp)
  d054f0:	1440ca16 	blt	r2,r17,d0581c <___vfprintf_internal_r+0x198c>
  d054f4:	18c00204 	addi	r3,r3,8
  d054f8:	0121c83a 	sub	r16,zero,r4
  d054fc:	0400500e 	bge	zero,r16,d05640 <___vfprintf_internal_r+0x17b0>
  d05500:	00800404 	movi	r2,16
  d05504:	1400800e 	bge	r2,r16,d05708 <___vfprintf_internal_r+0x1878>
  d05508:	1027883a 	mov	r19,r2
  d0550c:	07003474 	movhi	fp,209
  d05510:	e7045f84 	addi	fp,fp,4478
  d05514:	050001c4 	movi	r20,7
  d05518:	00000306 	br	d05528 <___vfprintf_internal_r+0x1698>
  d0551c:	18c00204 	addi	r3,r3,8
  d05520:	843ffc04 	addi	r16,r16,-16
  d05524:	9c007a0e 	bge	r19,r16,d05710 <___vfprintf_internal_r+0x1880>
  d05528:	94800404 	addi	r18,r18,16
  d0552c:	8c400044 	addi	r17,r17,1
  d05530:	1f000015 	stw	fp,0(r3)
  d05534:	1cc00115 	stw	r19,4(r3)
  d05538:	dc800e15 	stw	r18,56(sp)
  d0553c:	dc400d15 	stw	r17,52(sp)
  d05540:	a47ff60e 	bge	r20,r17,d0551c <___vfprintf_internal_r+0x168c>
  d05544:	d9014f17 	ldw	r4,1340(sp)
  d05548:	b00b883a 	mov	r5,r22
  d0554c:	d9800c04 	addi	r6,sp,48
  d05550:	0d03e380 	call	d03e38 <__sprint_r>
  d05554:	103c061e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d05558:	dc800e17 	ldw	r18,56(sp)
  d0555c:	dc400d17 	ldw	r17,52(sp)
  d05560:	d8c01904 	addi	r3,sp,100
  d05564:	003fee06 	br	d05520 <___vfprintf_internal_r+0x1690>
  d05568:	3c000017 	ldw	r16,0(r7)
  d0556c:	0023883a 	mov	r17,zero
  d05570:	39c00104 	addi	r7,r7,4
  d05574:	d9c14015 	stw	r7,1280(sp)
  d05578:	003e9206 	br	d04fc4 <___vfprintf_internal_r+0x1134>
  d0557c:	d9401904 	addi	r5,sp,100
  d05580:	dd000f04 	addi	r20,sp,60
  d05584:	d9414115 	stw	r5,1284(sp)
  d05588:	d9814417 	ldw	r6,1296(sp)
  d0558c:	880a973a 	slli	r5,r17,28
  d05590:	8004d13a 	srli	r2,r16,4
  d05594:	810003cc 	andi	r4,r16,15
  d05598:	3109883a 	add	r4,r6,r4
  d0559c:	2884b03a 	or	r2,r5,r2
  d055a0:	21400003 	ldbu	r5,0(r4)
  d055a4:	d9014117 	ldw	r4,1284(sp)
  d055a8:	8806d13a 	srli	r3,r17,4
  d055ac:	1021883a 	mov	r16,r2
  d055b0:	213fffc4 	addi	r4,r4,-1
  d055b4:	d9014115 	stw	r4,1284(sp)
  d055b8:	d9814117 	ldw	r6,1284(sp)
  d055bc:	10c8b03a 	or	r4,r2,r3
  d055c0:	1823883a 	mov	r17,r3
  d055c4:	31400005 	stb	r5,0(r6)
  d055c8:	203fef1e 	bne	r4,zero,d05588 <___vfprintf_internal_r+0x16f8>
  d055cc:	003ccb06 	br	d048fc <___vfprintf_internal_r+0xa6c>
  d055d0:	00800c04 	movi	r2,48
  d055d4:	d98018c4 	addi	r6,sp,99
  d055d8:	dd000f04 	addi	r20,sp,60
  d055dc:	d88018c5 	stb	r2,99(sp)
  d055e0:	d9814115 	stw	r6,1284(sp)
  d055e4:	003cc506 	br	d048fc <___vfprintf_internal_r+0xa6c>
  d055e8:	dc400d17 	ldw	r17,52(sp)
  d055ec:	07003474 	movhi	fp,209
  d055f0:	e7046384 	addi	fp,fp,4494
  d055f4:	003bc706 	br	d04514 <___vfprintf_internal_r+0x684>
  d055f8:	d9414c17 	ldw	r5,1328(sp)
  d055fc:	2880040c 	andi	r2,r5,16
  d05600:	10007c26 	beq	r2,zero,d057f4 <___vfprintf_internal_r+0x1964>
  d05604:	38800017 	ldw	r2,0(r7)
  d05608:	39c00104 	addi	r7,r7,4
  d0560c:	d9c14015 	stw	r7,1280(sp)
  d05610:	d9814b17 	ldw	r6,1324(sp)
  d05614:	d9c14017 	ldw	r7,1280(sp)
  d05618:	11800015 	stw	r6,0(r2)
  d0561c:	003a7806 	br	d04000 <___vfprintf_internal_r+0x170>
  d05620:	d9014f17 	ldw	r4,1340(sp)
  d05624:	b00b883a 	mov	r5,r22
  d05628:	d9800c04 	addi	r6,sp,48
  d0562c:	0d03e380 	call	d03e38 <__sprint_r>
  d05630:	103bcf1e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d05634:	dc800e17 	ldw	r18,56(sp)
  d05638:	dc400d17 	ldw	r17,52(sp)
  d0563c:	d8c01904 	addi	r3,sp,100
  d05640:	d9014717 	ldw	r4,1308(sp)
  d05644:	d9414117 	ldw	r5,1284(sp)
  d05648:	8c400044 	addi	r17,r17,1
  d0564c:	9125883a 	add	r18,r18,r4
  d05650:	008001c4 	movi	r2,7
  d05654:	19400015 	stw	r5,0(r3)
  d05658:	19000115 	stw	r4,4(r3)
  d0565c:	dc800e15 	stw	r18,56(sp)
  d05660:	dc400d15 	stw	r17,52(sp)
  d05664:	147cee16 	blt	r2,r17,d04a20 <___vfprintf_internal_r+0xb90>
  d05668:	18c00204 	addi	r3,r3,8
  d0566c:	003b8606 	br	d04488 <___vfprintf_internal_r+0x5f8>
  d05670:	38c00017 	ldw	r3,0(r7)
  d05674:	39000204 	addi	r4,r7,8
  d05678:	d9014015 	stw	r4,1280(sp)
  d0567c:	d8c14215 	stw	r3,1288(sp)
  d05680:	39c00117 	ldw	r7,4(r7)
  d05684:	d9c14315 	stw	r7,1292(sp)
  d05688:	003e2006 	br	d04f0c <___vfprintf_internal_r+0x107c>
  d0568c:	0005883a 	mov	r2,zero
  d05690:	1409c83a 	sub	r4,r2,r16
  d05694:	1105803a 	cmpltu	r2,r2,r4
  d05698:	044bc83a 	sub	r5,zero,r17
  d0569c:	2885c83a 	sub	r2,r5,r2
  d056a0:	2021883a 	mov	r16,r4
  d056a4:	1023883a 	mov	r17,r2
  d056a8:	01000044 	movi	r4,1
  d056ac:	00800b44 	movi	r2,45
  d056b0:	d8800405 	stb	r2,16(sp)
  d056b4:	003c8406 	br	d048c8 <___vfprintf_internal_r+0xa38>
  d056b8:	d9014f17 	ldw	r4,1340(sp)
  d056bc:	b00b883a 	mov	r5,r22
  d056c0:	d9800c04 	addi	r6,sp,48
  d056c4:	0d03e380 	call	d03e38 <__sprint_r>
  d056c8:	103ba91e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d056cc:	dc800e17 	ldw	r18,56(sp)
  d056d0:	dc400d17 	ldw	r17,52(sp)
  d056d4:	d9000517 	ldw	r4,20(sp)
  d056d8:	d9401904 	addi	r5,sp,100
  d056dc:	003da706 	br	d04d7c <___vfprintf_internal_r+0xeec>
  d056e0:	d9014f17 	ldw	r4,1340(sp)
  d056e4:	b00b883a 	mov	r5,r22
  d056e8:	d9800c04 	addi	r6,sp,48
  d056ec:	0d03e380 	call	d03e38 <__sprint_r>
  d056f0:	103b9f1e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d056f4:	dc800e17 	ldw	r18,56(sp)
  d056f8:	dc400d17 	ldw	r17,52(sp)
  d056fc:	d9000517 	ldw	r4,20(sp)
  d05700:	d8c01904 	addi	r3,sp,100
  d05704:	003d9106 	br	d04d4c <___vfprintf_internal_r+0xebc>
  d05708:	07003474 	movhi	fp,209
  d0570c:	e7045f84 	addi	fp,fp,4478
  d05710:	9425883a 	add	r18,r18,r16
  d05714:	8c400044 	addi	r17,r17,1
  d05718:	008001c4 	movi	r2,7
  d0571c:	1f000015 	stw	fp,0(r3)
  d05720:	1c000115 	stw	r16,4(r3)
  d05724:	dc800e15 	stw	r18,56(sp)
  d05728:	dc400d15 	stw	r17,52(sp)
  d0572c:	147fbc16 	blt	r2,r17,d05620 <___vfprintf_internal_r+0x1790>
  d05730:	18c00204 	addi	r3,r3,8
  d05734:	003fc206 	br	d05640 <___vfprintf_internal_r+0x17b0>
  d05738:	d9014f17 	ldw	r4,1340(sp)
  d0573c:	b00b883a 	mov	r5,r22
  d05740:	d9800c04 	addi	r6,sp,48
  d05744:	0d03e380 	call	d03e38 <__sprint_r>
  d05748:	103b891e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d0574c:	dc800e17 	ldw	r18,56(sp)
  d05750:	d9000517 	ldw	r4,20(sp)
  d05754:	d8c01904 	addi	r3,sp,100
  d05758:	003d0206 	br	d04b64 <___vfprintf_internal_r+0xcd4>
  d0575c:	07003474 	movhi	fp,209
  d05760:	e7045f84 	addi	fp,fp,4478
  d05764:	003be406 	br	d046f8 <___vfprintf_internal_r+0x868>
  d05768:	00803474 	movhi	r2,209
  d0576c:	10844f04 	addi	r2,r2,4412
  d05770:	d8814115 	stw	r2,1284(sp)
  d05774:	003df506 	br	d04f4c <___vfprintf_internal_r+0x10bc>
  d05778:	d9014217 	ldw	r4,1288(sp)
  d0577c:	d9414317 	ldw	r5,1292(sp)
  d05780:	0d0a8700 	call	d0a870 <__isnand>
  d05784:	10003926 	beq	r2,zero,d0586c <___vfprintf_internal_r+0x19dc>
  d05788:	d9414d17 	ldw	r5,1332(sp)
  d0578c:	008011c4 	movi	r2,71
  d05790:	1140ce16 	blt	r2,r5,d05acc <___vfprintf_internal_r+0x1c3c>
  d05794:	01803474 	movhi	r6,209
  d05798:	31845004 	addi	r6,r6,4416
  d0579c:	d9814115 	stw	r6,1284(sp)
  d057a0:	003dea06 	br	d04f4c <___vfprintf_internal_r+0x10bc>
  d057a4:	d9014c17 	ldw	r4,1328(sp)
  d057a8:	bdc00044 	addi	r23,r23,1
  d057ac:	b8c00007 	ldb	r3,0(r23)
  d057b0:	21000814 	ori	r4,r4,32
  d057b4:	d9014c15 	stw	r4,1328(sp)
  d057b8:	003a3406 	br	d0408c <___vfprintf_internal_r+0x1fc>
  d057bc:	dcc14515 	stw	r19,1300(sp)
  d057c0:	98011016 	blt	r19,zero,d05c04 <___vfprintf_internal_r+0x1d74>
  d057c4:	980f883a 	mov	r7,r19
  d057c8:	d8014615 	stw	zero,1304(sp)
  d057cc:	003c5206 	br	d04918 <___vfprintf_internal_r+0xa88>
  d057d0:	d9014f17 	ldw	r4,1340(sp)
  d057d4:	b00b883a 	mov	r5,r22
  d057d8:	d9800c04 	addi	r6,sp,48
  d057dc:	0d03e380 	call	d03e38 <__sprint_r>
  d057e0:	103b631e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d057e4:	dc800e17 	ldw	r18,56(sp)
  d057e8:	d9000517 	ldw	r4,20(sp)
  d057ec:	d8c01904 	addi	r3,sp,100
  d057f0:	003f2e06 	br	d054ac <___vfprintf_internal_r+0x161c>
  d057f4:	d8c14c17 	ldw	r3,1328(sp)
  d057f8:	1880100c 	andi	r2,r3,64
  d057fc:	1000a026 	beq	r2,zero,d05a80 <___vfprintf_internal_r+0x1bf0>
  d05800:	38800017 	ldw	r2,0(r7)
  d05804:	39c00104 	addi	r7,r7,4
  d05808:	d9c14015 	stw	r7,1280(sp)
  d0580c:	d9014b17 	ldw	r4,1324(sp)
  d05810:	d9c14017 	ldw	r7,1280(sp)
  d05814:	1100000d 	sth	r4,0(r2)
  d05818:	0039f906 	br	d04000 <___vfprintf_internal_r+0x170>
  d0581c:	d9014f17 	ldw	r4,1340(sp)
  d05820:	b00b883a 	mov	r5,r22
  d05824:	d9800c04 	addi	r6,sp,48
  d05828:	0d03e380 	call	d03e38 <__sprint_r>
  d0582c:	103b501e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d05830:	dc800e17 	ldw	r18,56(sp)
  d05834:	dc400d17 	ldw	r17,52(sp)
  d05838:	d9000517 	ldw	r4,20(sp)
  d0583c:	d8c01904 	addi	r3,sp,100
  d05840:	003f2d06 	br	d054f8 <___vfprintf_internal_r+0x1668>
  d05844:	00800184 	movi	r2,6
  d05848:	14c09a36 	bltu	r2,r19,d05ab4 <___vfprintf_internal_r+0x1c24>
  d0584c:	dcc14515 	stw	r19,1300(sp)
  d05850:	9800010e 	bge	r19,zero,d05858 <___vfprintf_internal_r+0x19c8>
  d05854:	d8014515 	stw	zero,1300(sp)
  d05858:	00803474 	movhi	r2,209
  d0585c:	10845204 	addi	r2,r2,4424
  d05860:	980f883a 	mov	r7,r19
  d05864:	d8814115 	stw	r2,1284(sp)
  d05868:	003a7806 	br	d0424c <___vfprintf_internal_r+0x3bc>
  d0586c:	00bfffc4 	movi	r2,-1
  d05870:	9880e226 	beq	r19,r2,d05bfc <___vfprintf_internal_r+0x1d6c>
  d05874:	d9414d17 	ldw	r5,1332(sp)
  d05878:	008019c4 	movi	r2,103
  d0587c:	2880dc26 	beq	r5,r2,d05bf0 <___vfprintf_internal_r+0x1d60>
  d05880:	008011c4 	movi	r2,71
  d05884:	2880da26 	beq	r5,r2,d05bf0 <___vfprintf_internal_r+0x1d60>
  d05888:	d9414c17 	ldw	r5,1328(sp)
  d0588c:	d9014317 	ldw	r4,1292(sp)
  d05890:	d9814217 	ldw	r6,1288(sp)
  d05894:	29404014 	ori	r5,r5,256
  d05898:	d9414c15 	stw	r5,1328(sp)
  d0589c:	2000cc16 	blt	r4,zero,d05bd0 <___vfprintf_internal_r+0x1d40>
  d058a0:	3021883a 	mov	r16,r6
  d058a4:	2023883a 	mov	r17,r4
  d058a8:	0039883a 	mov	fp,zero
  d058ac:	d9414d17 	ldw	r5,1332(sp)
  d058b0:	00801984 	movi	r2,102
  d058b4:	2880b726 	beq	r5,r2,d05b94 <___vfprintf_internal_r+0x1d04>
  d058b8:	00801184 	movi	r2,70
  d058bc:	2880b526 	beq	r5,r2,d05b94 <___vfprintf_internal_r+0x1d04>
  d058c0:	00801944 	movi	r2,101
  d058c4:	2880c826 	beq	r5,r2,d05be8 <___vfprintf_internal_r+0x1d58>
  d058c8:	00801144 	movi	r2,69
  d058cc:	2880c626 	beq	r5,r2,d05be8 <___vfprintf_internal_r+0x1d58>
  d058d0:	9829883a 	mov	r20,r19
  d058d4:	d9014f17 	ldw	r4,1340(sp)
  d058d8:	d8800504 	addi	r2,sp,20
  d058dc:	880d883a 	mov	r6,r17
  d058e0:	d8800115 	stw	r2,4(sp)
  d058e4:	d8c00604 	addi	r3,sp,24
  d058e8:	d8800704 	addi	r2,sp,28
  d058ec:	800b883a 	mov	r5,r16
  d058f0:	01c00084 	movi	r7,2
  d058f4:	d8c00215 	stw	r3,8(sp)
  d058f8:	d8800315 	stw	r2,12(sp)
  d058fc:	dd000015 	stw	r20,0(sp)
  d05900:	0d060b40 	call	d060b4 <_dtoa_r>
  d05904:	d9814d17 	ldw	r6,1332(sp)
  d05908:	d8814115 	stw	r2,1284(sp)
  d0590c:	008019c4 	movi	r2,103
  d05910:	30809526 	beq	r6,r2,d05b68 <___vfprintf_internal_r+0x1cd8>
  d05914:	d8c14d17 	ldw	r3,1332(sp)
  d05918:	008011c4 	movi	r2,71
  d0591c:	18809226 	beq	r3,r2,d05b68 <___vfprintf_internal_r+0x1cd8>
  d05920:	d9414117 	ldw	r5,1284(sp)
  d05924:	d9814d17 	ldw	r6,1332(sp)
  d05928:	00801984 	movi	r2,102
  d0592c:	2d25883a 	add	r18,r5,r20
  d05930:	30808626 	beq	r6,r2,d05b4c <___vfprintf_internal_r+0x1cbc>
  d05934:	00801184 	movi	r2,70
  d05938:	30808426 	beq	r6,r2,d05b4c <___vfprintf_internal_r+0x1cbc>
  d0593c:	000d883a 	mov	r6,zero
  d05940:	000f883a 	mov	r7,zero
  d05944:	880b883a 	mov	r5,r17
  d05948:	8009883a 	mov	r4,r16
  d0594c:	0d0befc0 	call	d0befc <__eqdf2>
  d05950:	1000751e 	bne	r2,zero,d05b28 <___vfprintf_internal_r+0x1c98>
  d05954:	9005883a 	mov	r2,r18
  d05958:	dc800715 	stw	r18,28(sp)
  d0595c:	d9014117 	ldw	r4,1284(sp)
  d05960:	d9414d17 	ldw	r5,1332(sp)
  d05964:	00c019c4 	movi	r3,103
  d05968:	1125c83a 	sub	r18,r2,r4
  d0596c:	28c06826 	beq	r5,r3,d05b10 <___vfprintf_internal_r+0x1c80>
  d05970:	008011c4 	movi	r2,71
  d05974:	28806626 	beq	r5,r2,d05b10 <___vfprintf_internal_r+0x1c80>
  d05978:	d9000517 	ldw	r4,20(sp)
  d0597c:	d8c14d17 	ldw	r3,1332(sp)
  d05980:	00801944 	movi	r2,101
  d05984:	10c05516 	blt	r2,r3,d05adc <___vfprintf_internal_r+0x1c4c>
  d05988:	213fffc4 	addi	r4,r4,-1
  d0598c:	d9000515 	stw	r4,20(sp)
  d05990:	d8c00805 	stb	r3,32(sp)
  d05994:	2021883a 	mov	r16,r4
  d05998:	2000c116 	blt	r4,zero,d05ca0 <___vfprintf_internal_r+0x1e10>
  d0599c:	00800ac4 	movi	r2,43
  d059a0:	d8800845 	stb	r2,33(sp)
  d059a4:	00800244 	movi	r2,9
  d059a8:	1400af0e 	bge	r2,r16,d05c68 <___vfprintf_internal_r+0x1dd8>
  d059ac:	1027883a 	mov	r19,r2
  d059b0:	dc400b84 	addi	r17,sp,46
  d059b4:	8009883a 	mov	r4,r16
  d059b8:	01400284 	movi	r5,10
  d059bc:	0d0c55c0 	call	d0c55c <__modsi3>
  d059c0:	10800c04 	addi	r2,r2,48
  d059c4:	8c7fffc4 	addi	r17,r17,-1
  d059c8:	8009883a 	mov	r4,r16
  d059cc:	01400284 	movi	r5,10
  d059d0:	88800005 	stb	r2,0(r17)
  d059d4:	0d0c4fc0 	call	d0c4fc <__divsi3>
  d059d8:	1021883a 	mov	r16,r2
  d059dc:	98bff516 	blt	r19,r2,d059b4 <___vfprintf_internal_r+0x1b24>
  d059e0:	10c00c04 	addi	r3,r2,48
  d059e4:	d88009c4 	addi	r2,sp,39
  d059e8:	108001c4 	addi	r2,r2,7
  d059ec:	897fffc4 	addi	r5,r17,-1
  d059f0:	88ffffc5 	stb	r3,-1(r17)
  d059f4:	2880a72e 	bgeu	r5,r2,d05c94 <___vfprintf_internal_r+0x1e04>
  d059f8:	1009883a 	mov	r4,r2
  d059fc:	d9800804 	addi	r6,sp,32
  d05a00:	d8c00884 	addi	r3,sp,34
  d05a04:	28800003 	ldbu	r2,0(r5)
  d05a08:	29400044 	addi	r5,r5,1
  d05a0c:	18800005 	stb	r2,0(r3)
  d05a10:	18c00044 	addi	r3,r3,1
  d05a14:	293ffb36 	bltu	r5,r4,d05a04 <___vfprintf_internal_r+0x1b74>
  d05a18:	1987c83a 	sub	r3,r3,r6
  d05a1c:	00800044 	movi	r2,1
  d05a20:	d8c14815 	stw	r3,1312(sp)
  d05a24:	90cf883a 	add	r7,r18,r3
  d05a28:	1480960e 	bge	r2,r18,d05c84 <___vfprintf_internal_r+0x1df4>
  d05a2c:	39c00044 	addi	r7,r7,1
  d05a30:	d9c14515 	stw	r7,1300(sp)
  d05a34:	38003416 	blt	r7,zero,d05b08 <___vfprintf_internal_r+0x1c78>
  d05a38:	e0803fcc 	andi	r2,fp,255
  d05a3c:	1080201c 	xori	r2,r2,128
  d05a40:	10bfe004 	addi	r2,r2,-128
  d05a44:	10004e26 	beq	r2,zero,d05b80 <___vfprintf_internal_r+0x1cf0>
  d05a48:	00800b44 	movi	r2,45
  d05a4c:	dc814715 	stw	r18,1308(sp)
  d05a50:	d8014615 	stw	zero,1304(sp)
  d05a54:	d8800405 	stb	r2,16(sp)
  d05a58:	003bb106 	br	d04920 <___vfprintf_internal_r+0xa90>
  d05a5c:	00800b44 	movi	r2,45
  d05a60:	d8800405 	stb	r2,16(sp)
  d05a64:	003d3306 	br	d04f34 <___vfprintf_internal_r+0x10a4>
  d05a68:	d9014f17 	ldw	r4,1340(sp)
  d05a6c:	b00b883a 	mov	r5,r22
  d05a70:	d9800c04 	addi	r6,sp,48
  d05a74:	0d03e380 	call	d03e38 <__sprint_r>
  d05a78:	103abd1e 	bne	r2,zero,d04570 <___vfprintf_internal_r+0x6e0>
  d05a7c:	003abb06 	br	d0456c <___vfprintf_internal_r+0x6dc>
  d05a80:	38800017 	ldw	r2,0(r7)
  d05a84:	39c00104 	addi	r7,r7,4
  d05a88:	d9c14015 	stw	r7,1280(sp)
  d05a8c:	d9414b17 	ldw	r5,1324(sp)
  d05a90:	d9c14017 	ldw	r7,1280(sp)
  d05a94:	11400015 	stw	r5,0(r2)
  d05a98:	00395906 	br	d04000 <___vfprintf_internal_r+0x170>
  d05a9c:	980f883a 	mov	r7,r19
  d05aa0:	dcc14515 	stw	r19,1300(sp)
  d05aa4:	d8014615 	stw	zero,1304(sp)
  d05aa8:	003b9b06 	br	d04918 <___vfprintf_internal_r+0xa88>
  d05aac:	0027883a 	mov	r19,zero
  d05ab0:	00397806 	br	d04094 <___vfprintf_internal_r+0x204>
  d05ab4:	00c03474 	movhi	r3,209
  d05ab8:	18c45204 	addi	r3,r3,4424
  d05abc:	100f883a 	mov	r7,r2
  d05ac0:	d8814515 	stw	r2,1300(sp)
  d05ac4:	d8c14115 	stw	r3,1284(sp)
  d05ac8:	0039e006 	br	d0424c <___vfprintf_internal_r+0x3bc>
  d05acc:	00803474 	movhi	r2,209
  d05ad0:	10845104 	addi	r2,r2,4420
  d05ad4:	d8814115 	stw	r2,1284(sp)
  d05ad8:	003d1c06 	br	d04f4c <___vfprintf_internal_r+0x10bc>
  d05adc:	d9414d17 	ldw	r5,1332(sp)
  d05ae0:	00801984 	movi	r2,102
  d05ae4:	28804926 	beq	r5,r2,d05c0c <___vfprintf_internal_r+0x1d7c>
  d05ae8:	200f883a 	mov	r7,r4
  d05aec:	24805716 	blt	r4,r18,d05c4c <___vfprintf_internal_r+0x1dbc>
  d05af0:	d9414c17 	ldw	r5,1328(sp)
  d05af4:	2880004c 	andi	r2,r5,1
  d05af8:	10000126 	beq	r2,zero,d05b00 <___vfprintf_internal_r+0x1c70>
  d05afc:	21c00044 	addi	r7,r4,1
  d05b00:	d9c14515 	stw	r7,1300(sp)
  d05b04:	383fcc0e 	bge	r7,zero,d05a38 <___vfprintf_internal_r+0x1ba8>
  d05b08:	d8014515 	stw	zero,1300(sp)
  d05b0c:	003fca06 	br	d05a38 <___vfprintf_internal_r+0x1ba8>
  d05b10:	d9000517 	ldw	r4,20(sp)
  d05b14:	00bfff04 	movi	r2,-4
  d05b18:	1100480e 	bge	r2,r4,d05c3c <___vfprintf_internal_r+0x1dac>
  d05b1c:	99004716 	blt	r19,r4,d05c3c <___vfprintf_internal_r+0x1dac>
  d05b20:	d8c14d15 	stw	r3,1332(sp)
  d05b24:	003ff006 	br	d05ae8 <___vfprintf_internal_r+0x1c58>
  d05b28:	d8800717 	ldw	r2,28(sp)
  d05b2c:	14bf8b2e 	bgeu	r2,r18,d0595c <___vfprintf_internal_r+0x1acc>
  d05b30:	9007883a 	mov	r3,r18
  d05b34:	01000c04 	movi	r4,48
  d05b38:	11000005 	stb	r4,0(r2)
  d05b3c:	10800044 	addi	r2,r2,1
  d05b40:	d8800715 	stw	r2,28(sp)
  d05b44:	18bffc1e 	bne	r3,r2,d05b38 <___vfprintf_internal_r+0x1ca8>
  d05b48:	003f8406 	br	d0595c <___vfprintf_internal_r+0x1acc>
  d05b4c:	d8814117 	ldw	r2,1284(sp)
  d05b50:	10c00007 	ldb	r3,0(r2)
  d05b54:	00800c04 	movi	r2,48
  d05b58:	18805b26 	beq	r3,r2,d05cc8 <___vfprintf_internal_r+0x1e38>
  d05b5c:	d9000517 	ldw	r4,20(sp)
  d05b60:	9125883a 	add	r18,r18,r4
  d05b64:	003f7506 	br	d0593c <___vfprintf_internal_r+0x1aac>
  d05b68:	d9014c17 	ldw	r4,1328(sp)
  d05b6c:	2080004c 	andi	r2,r4,1
  d05b70:	1005003a 	cmpeq	r2,r2,zero
  d05b74:	103f6a26 	beq	r2,zero,d05920 <___vfprintf_internal_r+0x1a90>
  d05b78:	d8800717 	ldw	r2,28(sp)
  d05b7c:	003f7706 	br	d0595c <___vfprintf_internal_r+0x1acc>
  d05b80:	d9c14515 	stw	r7,1300(sp)
  d05b84:	38004d16 	blt	r7,zero,d05cbc <___vfprintf_internal_r+0x1e2c>
  d05b88:	dc814715 	stw	r18,1308(sp)
  d05b8c:	d8014615 	stw	zero,1304(sp)
  d05b90:	003b6106 	br	d04918 <___vfprintf_internal_r+0xa88>
  d05b94:	d9014f17 	ldw	r4,1340(sp)
  d05b98:	d8800504 	addi	r2,sp,20
  d05b9c:	d8800115 	stw	r2,4(sp)
  d05ba0:	d8c00604 	addi	r3,sp,24
  d05ba4:	d8800704 	addi	r2,sp,28
  d05ba8:	800b883a 	mov	r5,r16
  d05bac:	880d883a 	mov	r6,r17
  d05bb0:	01c000c4 	movi	r7,3
  d05bb4:	d8c00215 	stw	r3,8(sp)
  d05bb8:	d8800315 	stw	r2,12(sp)
  d05bbc:	dcc00015 	stw	r19,0(sp)
  d05bc0:	9829883a 	mov	r20,r19
  d05bc4:	0d060b40 	call	d060b4 <_dtoa_r>
  d05bc8:	d8814115 	stw	r2,1284(sp)
  d05bcc:	003f5106 	br	d05914 <___vfprintf_internal_r+0x1a84>
  d05bd0:	d8c14217 	ldw	r3,1288(sp)
  d05bd4:	d9014317 	ldw	r4,1292(sp)
  d05bd8:	07000b44 	movi	fp,45
  d05bdc:	1821883a 	mov	r16,r3
  d05be0:	2460003c 	xorhi	r17,r4,32768
  d05be4:	003f3106 	br	d058ac <___vfprintf_internal_r+0x1a1c>
  d05be8:	9d000044 	addi	r20,r19,1
  d05bec:	003f3906 	br	d058d4 <___vfprintf_internal_r+0x1a44>
  d05bf0:	983f251e 	bne	r19,zero,d05888 <___vfprintf_internal_r+0x19f8>
  d05bf4:	04c00044 	movi	r19,1
  d05bf8:	003f2306 	br	d05888 <___vfprintf_internal_r+0x19f8>
  d05bfc:	04c00184 	movi	r19,6
  d05c00:	003f2106 	br	d05888 <___vfprintf_internal_r+0x19f8>
  d05c04:	d8014515 	stw	zero,1300(sp)
  d05c08:	003eee06 	br	d057c4 <___vfprintf_internal_r+0x1934>
  d05c0c:	200f883a 	mov	r7,r4
  d05c10:	0100370e 	bge	zero,r4,d05cf0 <___vfprintf_internal_r+0x1e60>
  d05c14:	9800031e 	bne	r19,zero,d05c24 <___vfprintf_internal_r+0x1d94>
  d05c18:	d9814c17 	ldw	r6,1328(sp)
  d05c1c:	3080004c 	andi	r2,r6,1
  d05c20:	103fb726 	beq	r2,zero,d05b00 <___vfprintf_internal_r+0x1c70>
  d05c24:	20800044 	addi	r2,r4,1
  d05c28:	98a7883a 	add	r19,r19,r2
  d05c2c:	dcc14515 	stw	r19,1300(sp)
  d05c30:	980f883a 	mov	r7,r19
  d05c34:	983f800e 	bge	r19,zero,d05a38 <___vfprintf_internal_r+0x1ba8>
  d05c38:	003fb306 	br	d05b08 <___vfprintf_internal_r+0x1c78>
  d05c3c:	d9814d17 	ldw	r6,1332(sp)
  d05c40:	31bfff84 	addi	r6,r6,-2
  d05c44:	d9814d15 	stw	r6,1332(sp)
  d05c48:	003f4c06 	br	d0597c <___vfprintf_internal_r+0x1aec>
  d05c4c:	0100180e 	bge	zero,r4,d05cb0 <___vfprintf_internal_r+0x1e20>
  d05c50:	00800044 	movi	r2,1
  d05c54:	1485883a 	add	r2,r2,r18
  d05c58:	d8814515 	stw	r2,1300(sp)
  d05c5c:	100f883a 	mov	r7,r2
  d05c60:	103f750e 	bge	r2,zero,d05a38 <___vfprintf_internal_r+0x1ba8>
  d05c64:	003fa806 	br	d05b08 <___vfprintf_internal_r+0x1c78>
  d05c68:	80c00c04 	addi	r3,r16,48
  d05c6c:	00800c04 	movi	r2,48
  d05c70:	d8c008c5 	stb	r3,35(sp)
  d05c74:	d9800804 	addi	r6,sp,32
  d05c78:	d8c00904 	addi	r3,sp,36
  d05c7c:	d8800885 	stb	r2,34(sp)
  d05c80:	003f6506 	br	d05a18 <___vfprintf_internal_r+0x1b88>
  d05c84:	d9014c17 	ldw	r4,1328(sp)
  d05c88:	2084703a 	and	r2,r4,r2
  d05c8c:	103f9c26 	beq	r2,zero,d05b00 <___vfprintf_internal_r+0x1c70>
  d05c90:	003f6606 	br	d05a2c <___vfprintf_internal_r+0x1b9c>
  d05c94:	d9800804 	addi	r6,sp,32
  d05c98:	d8c00884 	addi	r3,sp,34
  d05c9c:	003f5e06 	br	d05a18 <___vfprintf_internal_r+0x1b88>
  d05ca0:	00800b44 	movi	r2,45
  d05ca4:	0121c83a 	sub	r16,zero,r4
  d05ca8:	d8800845 	stb	r2,33(sp)
  d05cac:	003f3d06 	br	d059a4 <___vfprintf_internal_r+0x1b14>
  d05cb0:	00800084 	movi	r2,2
  d05cb4:	1105c83a 	sub	r2,r2,r4
  d05cb8:	003fe606 	br	d05c54 <___vfprintf_internal_r+0x1dc4>
  d05cbc:	d8014515 	stw	zero,1300(sp)
  d05cc0:	dc814715 	stw	r18,1308(sp)
  d05cc4:	003fb106 	br	d05b8c <___vfprintf_internal_r+0x1cfc>
  d05cc8:	000d883a 	mov	r6,zero
  d05ccc:	000f883a 	mov	r7,zero
  d05cd0:	8009883a 	mov	r4,r16
  d05cd4:	880b883a 	mov	r5,r17
  d05cd8:	0d031580 	call	d03158 <__nedf2>
  d05cdc:	103f9f26 	beq	r2,zero,d05b5c <___vfprintf_internal_r+0x1ccc>
  d05ce0:	00800044 	movi	r2,1
  d05ce4:	1509c83a 	sub	r4,r2,r20
  d05ce8:	d9000515 	stw	r4,20(sp)
  d05cec:	003f9b06 	br	d05b5c <___vfprintf_internal_r+0x1ccc>
  d05cf0:	98000d1e 	bne	r19,zero,d05d28 <___vfprintf_internal_r+0x1e98>
  d05cf4:	d8c14c17 	ldw	r3,1328(sp)
  d05cf8:	1880004c 	andi	r2,r3,1
  d05cfc:	10000a1e 	bne	r2,zero,d05d28 <___vfprintf_internal_r+0x1e98>
  d05d00:	01000044 	movi	r4,1
  d05d04:	200f883a 	mov	r7,r4
  d05d08:	d9014515 	stw	r4,1300(sp)
  d05d0c:	003f4a06 	br	d05a38 <___vfprintf_internal_r+0x1ba8>
  d05d10:	3cc00017 	ldw	r19,0(r7)
  d05d14:	39c00104 	addi	r7,r7,4
  d05d18:	983d0e0e 	bge	r19,zero,d05154 <___vfprintf_internal_r+0x12c4>
  d05d1c:	b8c00007 	ldb	r3,0(r23)
  d05d20:	04ffffc4 	movi	r19,-1
  d05d24:	0038d906 	br	d0408c <___vfprintf_internal_r+0x1fc>
  d05d28:	9cc00084 	addi	r19,r19,2
  d05d2c:	dcc14515 	stw	r19,1300(sp)
  d05d30:	980f883a 	mov	r7,r19
  d05d34:	983f400e 	bge	r19,zero,d05a38 <___vfprintf_internal_r+0x1ba8>
  d05d38:	003f7306 	br	d05b08 <___vfprintf_internal_r+0x1c78>

00d05d3c <__vfprintf_internal>:
  d05d3c:	00803474 	movhi	r2,209
  d05d40:	108bf904 	addi	r2,r2,12260
  d05d44:	2013883a 	mov	r9,r4
  d05d48:	11000017 	ldw	r4,0(r2)
  d05d4c:	2805883a 	mov	r2,r5
  d05d50:	300f883a 	mov	r7,r6
  d05d54:	480b883a 	mov	r5,r9
  d05d58:	100d883a 	mov	r6,r2
  d05d5c:	0d03e901 	jmpi	d03e90 <___vfprintf_internal_r>

00d05d60 <__swsetup_r>:
  d05d60:	00803474 	movhi	r2,209
  d05d64:	108bf904 	addi	r2,r2,12260
  d05d68:	10c00017 	ldw	r3,0(r2)
  d05d6c:	defffd04 	addi	sp,sp,-12
  d05d70:	dc400115 	stw	r17,4(sp)
  d05d74:	dc000015 	stw	r16,0(sp)
  d05d78:	dfc00215 	stw	ra,8(sp)
  d05d7c:	2023883a 	mov	r17,r4
  d05d80:	2821883a 	mov	r16,r5
  d05d84:	18000226 	beq	r3,zero,d05d90 <__swsetup_r+0x30>
  d05d88:	18800e17 	ldw	r2,56(r3)
  d05d8c:	10001f26 	beq	r2,zero,d05e0c <__swsetup_r+0xac>
  d05d90:	8100030b 	ldhu	r4,12(r16)
  d05d94:	2080020c 	andi	r2,r4,8
  d05d98:	10002826 	beq	r2,zero,d05e3c <__swsetup_r+0xdc>
  d05d9c:	81400417 	ldw	r5,16(r16)
  d05da0:	28001d26 	beq	r5,zero,d05e18 <__swsetup_r+0xb8>
  d05da4:	2080004c 	andi	r2,r4,1
  d05da8:	1005003a 	cmpeq	r2,r2,zero
  d05dac:	10000b26 	beq	r2,zero,d05ddc <__swsetup_r+0x7c>
  d05db0:	2080008c 	andi	r2,r4,2
  d05db4:	10001226 	beq	r2,zero,d05e00 <__swsetup_r+0xa0>
  d05db8:	0005883a 	mov	r2,zero
  d05dbc:	80800215 	stw	r2,8(r16)
  d05dc0:	28000b26 	beq	r5,zero,d05df0 <__swsetup_r+0x90>
  d05dc4:	0005883a 	mov	r2,zero
  d05dc8:	dfc00217 	ldw	ra,8(sp)
  d05dcc:	dc400117 	ldw	r17,4(sp)
  d05dd0:	dc000017 	ldw	r16,0(sp)
  d05dd4:	dec00304 	addi	sp,sp,12
  d05dd8:	f800283a 	ret
  d05ddc:	80800517 	ldw	r2,20(r16)
  d05de0:	80000215 	stw	zero,8(r16)
  d05de4:	0085c83a 	sub	r2,zero,r2
  d05de8:	80800615 	stw	r2,24(r16)
  d05dec:	283ff51e 	bne	r5,zero,d05dc4 <__swsetup_r+0x64>
  d05df0:	2080200c 	andi	r2,r4,128
  d05df4:	103ff326 	beq	r2,zero,d05dc4 <__swsetup_r+0x64>
  d05df8:	00bfffc4 	movi	r2,-1
  d05dfc:	003ff206 	br	d05dc8 <__swsetup_r+0x68>
  d05e00:	80800517 	ldw	r2,20(r16)
  d05e04:	80800215 	stw	r2,8(r16)
  d05e08:	003fed06 	br	d05dc0 <__swsetup_r+0x60>
  d05e0c:	1809883a 	mov	r4,r3
  d05e10:	0d079000 	call	d07900 <__sinit>
  d05e14:	003fde06 	br	d05d90 <__swsetup_r+0x30>
  d05e18:	20c0a00c 	andi	r3,r4,640
  d05e1c:	00808004 	movi	r2,512
  d05e20:	18bfe026 	beq	r3,r2,d05da4 <__swsetup_r+0x44>
  d05e24:	8809883a 	mov	r4,r17
  d05e28:	800b883a 	mov	r5,r16
  d05e2c:	0d086780 	call	d08678 <__smakebuf_r>
  d05e30:	8100030b 	ldhu	r4,12(r16)
  d05e34:	81400417 	ldw	r5,16(r16)
  d05e38:	003fda06 	br	d05da4 <__swsetup_r+0x44>
  d05e3c:	2080040c 	andi	r2,r4,16
  d05e40:	103fed26 	beq	r2,zero,d05df8 <__swsetup_r+0x98>
  d05e44:	2080010c 	andi	r2,r4,4
  d05e48:	10001226 	beq	r2,zero,d05e94 <__swsetup_r+0x134>
  d05e4c:	81400c17 	ldw	r5,48(r16)
  d05e50:	28000526 	beq	r5,zero,d05e68 <__swsetup_r+0x108>
  d05e54:	80801004 	addi	r2,r16,64
  d05e58:	28800226 	beq	r5,r2,d05e64 <__swsetup_r+0x104>
  d05e5c:	8809883a 	mov	r4,r17
  d05e60:	0d07c840 	call	d07c84 <_free_r>
  d05e64:	80000c15 	stw	zero,48(r16)
  d05e68:	8080030b 	ldhu	r2,12(r16)
  d05e6c:	81400417 	ldw	r5,16(r16)
  d05e70:	80000115 	stw	zero,4(r16)
  d05e74:	10bff6cc 	andi	r2,r2,65499
  d05e78:	8080030d 	sth	r2,12(r16)
  d05e7c:	81400015 	stw	r5,0(r16)
  d05e80:	8080030b 	ldhu	r2,12(r16)
  d05e84:	10800214 	ori	r2,r2,8
  d05e88:	113fffcc 	andi	r4,r2,65535
  d05e8c:	8080030d 	sth	r2,12(r16)
  d05e90:	003fc306 	br	d05da0 <__swsetup_r+0x40>
  d05e94:	81400417 	ldw	r5,16(r16)
  d05e98:	003ff906 	br	d05e80 <__swsetup_r+0x120>

00d05e9c <quorem>:
  d05e9c:	28c00417 	ldw	r3,16(r5)
  d05ea0:	20800417 	ldw	r2,16(r4)
  d05ea4:	defff604 	addi	sp,sp,-40
  d05ea8:	ddc00715 	stw	r23,28(sp)
  d05eac:	dd400515 	stw	r21,20(sp)
  d05eb0:	dfc00915 	stw	ra,36(sp)
  d05eb4:	df000815 	stw	fp,32(sp)
  d05eb8:	dd800615 	stw	r22,24(sp)
  d05ebc:	dd000415 	stw	r20,16(sp)
  d05ec0:	dcc00315 	stw	r19,12(sp)
  d05ec4:	dc800215 	stw	r18,8(sp)
  d05ec8:	dc400115 	stw	r17,4(sp)
  d05ecc:	dc000015 	stw	r16,0(sp)
  d05ed0:	202f883a 	mov	r23,r4
  d05ed4:	282b883a 	mov	r21,r5
  d05ed8:	10c07416 	blt	r2,r3,d060ac <quorem+0x210>
  d05edc:	1c7fffc4 	addi	r17,r3,-1
  d05ee0:	8c45883a 	add	r2,r17,r17
  d05ee4:	1085883a 	add	r2,r2,r2
  d05ee8:	2c000504 	addi	r16,r5,20
  d05eec:	24c00504 	addi	r19,r4,20
  d05ef0:	14ed883a 	add	r22,r2,r19
  d05ef4:	80a5883a 	add	r18,r16,r2
  d05ef8:	b7000017 	ldw	fp,0(r22)
  d05efc:	91400017 	ldw	r5,0(r18)
  d05f00:	e009883a 	mov	r4,fp
  d05f04:	29400044 	addi	r5,r5,1
  d05f08:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d05f0c:	1029883a 	mov	r20,r2
  d05f10:	10003c1e 	bne	r2,zero,d06004 <quorem+0x168>
  d05f14:	a80b883a 	mov	r5,r21
  d05f18:	b809883a 	mov	r4,r23
  d05f1c:	0d093a40 	call	d093a4 <__mcmp>
  d05f20:	10002b16 	blt	r2,zero,d05fd0 <quorem+0x134>
  d05f24:	a5000044 	addi	r20,r20,1
  d05f28:	980f883a 	mov	r7,r19
  d05f2c:	0011883a 	mov	r8,zero
  d05f30:	0009883a 	mov	r4,zero
  d05f34:	81400017 	ldw	r5,0(r16)
  d05f38:	38c00017 	ldw	r3,0(r7)
  d05f3c:	84000104 	addi	r16,r16,4
  d05f40:	28bfffcc 	andi	r2,r5,65535
  d05f44:	2085883a 	add	r2,r4,r2
  d05f48:	11bfffcc 	andi	r6,r2,65535
  d05f4c:	193fffcc 	andi	r4,r3,65535
  d05f50:	1004d43a 	srli	r2,r2,16
  d05f54:	280ad43a 	srli	r5,r5,16
  d05f58:	2189c83a 	sub	r4,r4,r6
  d05f5c:	2209883a 	add	r4,r4,r8
  d05f60:	1806d43a 	srli	r3,r3,16
  d05f64:	288b883a 	add	r5,r5,r2
  d05f68:	200dd43a 	srai	r6,r4,16
  d05f6c:	28bfffcc 	andi	r2,r5,65535
  d05f70:	1887c83a 	sub	r3,r3,r2
  d05f74:	1987883a 	add	r3,r3,r6
  d05f78:	3900000d 	sth	r4,0(r7)
  d05f7c:	38c0008d 	sth	r3,2(r7)
  d05f80:	2808d43a 	srli	r4,r5,16
  d05f84:	39c00104 	addi	r7,r7,4
  d05f88:	1811d43a 	srai	r8,r3,16
  d05f8c:	943fe92e 	bgeu	r18,r16,d05f34 <quorem+0x98>
  d05f90:	8c45883a 	add	r2,r17,r17
  d05f94:	1085883a 	add	r2,r2,r2
  d05f98:	9885883a 	add	r2,r19,r2
  d05f9c:	10c00017 	ldw	r3,0(r2)
  d05fa0:	18000b1e 	bne	r3,zero,d05fd0 <quorem+0x134>
  d05fa4:	113fff04 	addi	r4,r2,-4
  d05fa8:	9900082e 	bgeu	r19,r4,d05fcc <quorem+0x130>
  d05fac:	10bfff17 	ldw	r2,-4(r2)
  d05fb0:	10000326 	beq	r2,zero,d05fc0 <quorem+0x124>
  d05fb4:	00000506 	br	d05fcc <quorem+0x130>
  d05fb8:	20800017 	ldw	r2,0(r4)
  d05fbc:	1000031e 	bne	r2,zero,d05fcc <quorem+0x130>
  d05fc0:	213fff04 	addi	r4,r4,-4
  d05fc4:	8c7fffc4 	addi	r17,r17,-1
  d05fc8:	993ffb36 	bltu	r19,r4,d05fb8 <quorem+0x11c>
  d05fcc:	bc400415 	stw	r17,16(r23)
  d05fd0:	a005883a 	mov	r2,r20
  d05fd4:	dfc00917 	ldw	ra,36(sp)
  d05fd8:	df000817 	ldw	fp,32(sp)
  d05fdc:	ddc00717 	ldw	r23,28(sp)
  d05fe0:	dd800617 	ldw	r22,24(sp)
  d05fe4:	dd400517 	ldw	r21,20(sp)
  d05fe8:	dd000417 	ldw	r20,16(sp)
  d05fec:	dcc00317 	ldw	r19,12(sp)
  d05ff0:	dc800217 	ldw	r18,8(sp)
  d05ff4:	dc400117 	ldw	r17,4(sp)
  d05ff8:	dc000017 	ldw	r16,0(sp)
  d05ffc:	dec00a04 	addi	sp,sp,40
  d06000:	f800283a 	ret
  d06004:	980f883a 	mov	r7,r19
  d06008:	8011883a 	mov	r8,r16
  d0600c:	0013883a 	mov	r9,zero
  d06010:	000d883a 	mov	r6,zero
  d06014:	40c00017 	ldw	r3,0(r8)
  d06018:	39000017 	ldw	r4,0(r7)
  d0601c:	42000104 	addi	r8,r8,4
  d06020:	18bfffcc 	andi	r2,r3,65535
  d06024:	a085383a 	mul	r2,r20,r2
  d06028:	1806d43a 	srli	r3,r3,16
  d0602c:	217fffcc 	andi	r5,r4,65535
  d06030:	3085883a 	add	r2,r6,r2
  d06034:	11bfffcc 	andi	r6,r2,65535
  d06038:	a0c7383a 	mul	r3,r20,r3
  d0603c:	1004d43a 	srli	r2,r2,16
  d06040:	298bc83a 	sub	r5,r5,r6
  d06044:	2a4b883a 	add	r5,r5,r9
  d06048:	2008d43a 	srli	r4,r4,16
  d0604c:	1887883a 	add	r3,r3,r2
  d06050:	280dd43a 	srai	r6,r5,16
  d06054:	18bfffcc 	andi	r2,r3,65535
  d06058:	2089c83a 	sub	r4,r4,r2
  d0605c:	2189883a 	add	r4,r4,r6
  d06060:	3900008d 	sth	r4,2(r7)
  d06064:	3940000d 	sth	r5,0(r7)
  d06068:	180cd43a 	srli	r6,r3,16
  d0606c:	39c00104 	addi	r7,r7,4
  d06070:	2013d43a 	srai	r9,r4,16
  d06074:	923fe72e 	bgeu	r18,r8,d06014 <quorem+0x178>
  d06078:	e03fa61e 	bne	fp,zero,d05f14 <quorem+0x78>
  d0607c:	b0ffff04 	addi	r3,r22,-4
  d06080:	98c0082e 	bgeu	r19,r3,d060a4 <quorem+0x208>
  d06084:	b0bfff17 	ldw	r2,-4(r22)
  d06088:	10000326 	beq	r2,zero,d06098 <quorem+0x1fc>
  d0608c:	00000506 	br	d060a4 <quorem+0x208>
  d06090:	18800017 	ldw	r2,0(r3)
  d06094:	1000031e 	bne	r2,zero,d060a4 <quorem+0x208>
  d06098:	18ffff04 	addi	r3,r3,-4
  d0609c:	8c7fffc4 	addi	r17,r17,-1
  d060a0:	98fffb36 	bltu	r19,r3,d06090 <quorem+0x1f4>
  d060a4:	bc400415 	stw	r17,16(r23)
  d060a8:	003f9a06 	br	d05f14 <quorem+0x78>
  d060ac:	0005883a 	mov	r2,zero
  d060b0:	003fc806 	br	d05fd4 <quorem+0x138>

00d060b4 <_dtoa_r>:
  d060b4:	22001017 	ldw	r8,64(r4)
  d060b8:	deffda04 	addi	sp,sp,-152
  d060bc:	dd402115 	stw	r21,132(sp)
  d060c0:	dd002015 	stw	r20,128(sp)
  d060c4:	dc801e15 	stw	r18,120(sp)
  d060c8:	dc401d15 	stw	r17,116(sp)
  d060cc:	dfc02515 	stw	ra,148(sp)
  d060d0:	df002415 	stw	fp,144(sp)
  d060d4:	ddc02315 	stw	r23,140(sp)
  d060d8:	dd802215 	stw	r22,136(sp)
  d060dc:	dcc01f15 	stw	r19,124(sp)
  d060e0:	dc001c15 	stw	r16,112(sp)
  d060e4:	d9001615 	stw	r4,88(sp)
  d060e8:	3023883a 	mov	r17,r6
  d060ec:	2829883a 	mov	r20,r5
  d060f0:	d9c01715 	stw	r7,92(sp)
  d060f4:	dc802817 	ldw	r18,160(sp)
  d060f8:	302b883a 	mov	r21,r6
  d060fc:	40000a26 	beq	r8,zero,d06128 <_dtoa_r+0x74>
  d06100:	20801117 	ldw	r2,68(r4)
  d06104:	400b883a 	mov	r5,r8
  d06108:	40800115 	stw	r2,4(r8)
  d0610c:	20c01117 	ldw	r3,68(r4)
  d06110:	00800044 	movi	r2,1
  d06114:	10c4983a 	sll	r2,r2,r3
  d06118:	40800215 	stw	r2,8(r8)
  d0611c:	0d092480 	call	d09248 <_Bfree>
  d06120:	d8c01617 	ldw	r3,88(sp)
  d06124:	18001015 	stw	zero,64(r3)
  d06128:	8800a316 	blt	r17,zero,d063b8 <_dtoa_r+0x304>
  d0612c:	90000015 	stw	zero,0(r18)
  d06130:	a8dffc2c 	andhi	r3,r21,32752
  d06134:	009ffc34 	movhi	r2,32752
  d06138:	18809126 	beq	r3,r2,d06380 <_dtoa_r+0x2cc>
  d0613c:	000d883a 	mov	r6,zero
  d06140:	000f883a 	mov	r7,zero
  d06144:	a009883a 	mov	r4,r20
  d06148:	a80b883a 	mov	r5,r21
  d0614c:	dd001215 	stw	r20,72(sp)
  d06150:	dd401315 	stw	r21,76(sp)
  d06154:	0d031580 	call	d03158 <__nedf2>
  d06158:	1000171e 	bne	r2,zero,d061b8 <_dtoa_r+0x104>
  d0615c:	d9802717 	ldw	r6,156(sp)
  d06160:	00800044 	movi	r2,1
  d06164:	30800015 	stw	r2,0(r6)
  d06168:	d8802917 	ldw	r2,164(sp)
  d0616c:	10029b26 	beq	r2,zero,d06bdc <_dtoa_r+0xb28>
  d06170:	d9002917 	ldw	r4,164(sp)
  d06174:	00803474 	movhi	r2,209
  d06178:	1083ea44 	addi	r2,r2,4009
  d0617c:	10ffffc4 	addi	r3,r2,-1
  d06180:	20800015 	stw	r2,0(r4)
  d06184:	1805883a 	mov	r2,r3
  d06188:	dfc02517 	ldw	ra,148(sp)
  d0618c:	df002417 	ldw	fp,144(sp)
  d06190:	ddc02317 	ldw	r23,140(sp)
  d06194:	dd802217 	ldw	r22,136(sp)
  d06198:	dd402117 	ldw	r21,132(sp)
  d0619c:	dd002017 	ldw	r20,128(sp)
  d061a0:	dcc01f17 	ldw	r19,124(sp)
  d061a4:	dc801e17 	ldw	r18,120(sp)
  d061a8:	dc401d17 	ldw	r17,116(sp)
  d061ac:	dc001c17 	ldw	r16,112(sp)
  d061b0:	dec02604 	addi	sp,sp,152
  d061b4:	f800283a 	ret
  d061b8:	d9001617 	ldw	r4,88(sp)
  d061bc:	d9401217 	ldw	r5,72(sp)
  d061c0:	d8800104 	addi	r2,sp,4
  d061c4:	a80d883a 	mov	r6,r21
  d061c8:	d9c00204 	addi	r7,sp,8
  d061cc:	d8800015 	stw	r2,0(sp)
  d061d0:	0d098840 	call	d09884 <__d2b>
  d061d4:	d8800715 	stw	r2,28(sp)
  d061d8:	a804d53a 	srli	r2,r21,20
  d061dc:	1101ffcc 	andi	r4,r2,2047
  d061e0:	20008626 	beq	r4,zero,d063fc <_dtoa_r+0x348>
  d061e4:	d8c01217 	ldw	r3,72(sp)
  d061e8:	00800434 	movhi	r2,16
  d061ec:	10bfffc4 	addi	r2,r2,-1
  d061f0:	ddc00117 	ldw	r23,4(sp)
  d061f4:	a884703a 	and	r2,r21,r2
  d061f8:	1811883a 	mov	r8,r3
  d061fc:	124ffc34 	orhi	r9,r2,16368
  d06200:	25bf0044 	addi	r22,r4,-1023
  d06204:	d8000815 	stw	zero,32(sp)
  d06208:	0005883a 	mov	r2,zero
  d0620c:	00cffe34 	movhi	r3,16376
  d06210:	480b883a 	mov	r5,r9
  d06214:	4009883a 	mov	r4,r8
  d06218:	180f883a 	mov	r7,r3
  d0621c:	100d883a 	mov	r6,r2
  d06220:	0d02e0c0 	call	d02e0c <__subdf3>
  d06224:	0218dbf4 	movhi	r8,25455
  d06228:	4210d844 	addi	r8,r8,17249
  d0622c:	024ff4f4 	movhi	r9,16339
  d06230:	4a61e9c4 	addi	r9,r9,-30809
  d06234:	480f883a 	mov	r7,r9
  d06238:	400d883a 	mov	r6,r8
  d0623c:	180b883a 	mov	r5,r3
  d06240:	1009883a 	mov	r4,r2
  d06244:	0d0bb380 	call	d0bb38 <__muldf3>
  d06248:	0222d874 	movhi	r8,35681
  d0624c:	42322cc4 	addi	r8,r8,-14157
  d06250:	024ff1f4 	movhi	r9,16327
  d06254:	4a628a04 	addi	r9,r9,-30168
  d06258:	480f883a 	mov	r7,r9
  d0625c:	400d883a 	mov	r6,r8
  d06260:	180b883a 	mov	r5,r3
  d06264:	1009883a 	mov	r4,r2
  d06268:	0d02e8c0 	call	d02e8c <__adddf3>
  d0626c:	b009883a 	mov	r4,r22
  d06270:	1021883a 	mov	r16,r2
  d06274:	1823883a 	mov	r17,r3
  d06278:	0d0c11c0 	call	d0c11c <__floatsidf>
  d0627c:	021427f4 	movhi	r8,20639
  d06280:	421e7ec4 	addi	r8,r8,31227
  d06284:	024ff4f4 	movhi	r9,16339
  d06288:	4a5104c4 	addi	r9,r9,17427
  d0628c:	480f883a 	mov	r7,r9
  d06290:	400d883a 	mov	r6,r8
  d06294:	180b883a 	mov	r5,r3
  d06298:	1009883a 	mov	r4,r2
  d0629c:	0d0bb380 	call	d0bb38 <__muldf3>
  d062a0:	180f883a 	mov	r7,r3
  d062a4:	880b883a 	mov	r5,r17
  d062a8:	100d883a 	mov	r6,r2
  d062ac:	8009883a 	mov	r4,r16
  d062b0:	0d02e8c0 	call	d02e8c <__adddf3>
  d062b4:	1009883a 	mov	r4,r2
  d062b8:	180b883a 	mov	r5,r3
  d062bc:	1021883a 	mov	r16,r2
  d062c0:	1823883a 	mov	r17,r3
  d062c4:	0d0c2140 	call	d0c214 <__fixdfsi>
  d062c8:	000d883a 	mov	r6,zero
  d062cc:	000f883a 	mov	r7,zero
  d062d0:	8009883a 	mov	r4,r16
  d062d4:	880b883a 	mov	r5,r17
  d062d8:	d8800d15 	stw	r2,52(sp)
  d062dc:	0d0c0940 	call	d0c094 <__ltdf2>
  d062e0:	10031716 	blt	r2,zero,d06f40 <_dtoa_r+0xe8c>
  d062e4:	d8c00d17 	ldw	r3,52(sp)
  d062e8:	00800584 	movi	r2,22
  d062ec:	10c1482e 	bgeu	r2,r3,d06810 <_dtoa_r+0x75c>
  d062f0:	01000044 	movi	r4,1
  d062f4:	d9000c15 	stw	r4,48(sp)
  d062f8:	bd85c83a 	sub	r2,r23,r22
  d062fc:	11bfffc4 	addi	r6,r2,-1
  d06300:	30030b16 	blt	r6,zero,d06f30 <_dtoa_r+0xe7c>
  d06304:	d9800a15 	stw	r6,40(sp)
  d06308:	d8001115 	stw	zero,68(sp)
  d0630c:	d8c00d17 	ldw	r3,52(sp)
  d06310:	1802ff16 	blt	r3,zero,d06f10 <_dtoa_r+0xe5c>
  d06314:	d9000a17 	ldw	r4,40(sp)
  d06318:	d8c00915 	stw	r3,36(sp)
  d0631c:	d8001015 	stw	zero,64(sp)
  d06320:	20c9883a 	add	r4,r4,r3
  d06324:	d9000a15 	stw	r4,40(sp)
  d06328:	d9001717 	ldw	r4,92(sp)
  d0632c:	00800244 	movi	r2,9
  d06330:	11004636 	bltu	r2,r4,d0644c <_dtoa_r+0x398>
  d06334:	00800144 	movi	r2,5
  d06338:	11020416 	blt	r2,r4,d06b4c <_dtoa_r+0xa98>
  d0633c:	04400044 	movi	r17,1
  d06340:	d8c01717 	ldw	r3,92(sp)
  d06344:	00800144 	movi	r2,5
  d06348:	10c1ed36 	bltu	r2,r3,d06b00 <_dtoa_r+0xa4c>
  d0634c:	18c5883a 	add	r2,r3,r3
  d06350:	1085883a 	add	r2,r2,r2
  d06354:	00c03434 	movhi	r3,208
  d06358:	18d8da04 	addi	r3,r3,25448
  d0635c:	10c5883a 	add	r2,r2,r3
  d06360:	11000017 	ldw	r4,0(r2)
  d06364:	2000683a 	jmp	r4
  d06368:	00d06454 	movui	r3,16785
  d0636c:	00d06454 	movui	r3,16785
  d06370:	00d06e54 	movui	r3,16825
  d06374:	00d06e2c 	andhi	r3,zero,16824
  d06378:	00d06e70 	cmpltui	r3,zero,16825
  d0637c:	00d06e7c 	xorhi	r3,zero,16825
  d06380:	d9002717 	ldw	r4,156(sp)
  d06384:	0089c3c4 	movi	r2,9999
  d06388:	20800015 	stw	r2,0(r4)
  d0638c:	a0001026 	beq	r20,zero,d063d0 <_dtoa_r+0x31c>
  d06390:	00c03474 	movhi	r3,209
  d06394:	18c46b04 	addi	r3,r3,4524
  d06398:	d9802917 	ldw	r6,164(sp)
  d0639c:	303f7926 	beq	r6,zero,d06184 <_dtoa_r+0xd0>
  d063a0:	188000c7 	ldb	r2,3(r3)
  d063a4:	190000c4 	addi	r4,r3,3
  d063a8:	1000101e 	bne	r2,zero,d063ec <_dtoa_r+0x338>
  d063ac:	d8802917 	ldw	r2,164(sp)
  d063b0:	11000015 	stw	r4,0(r2)
  d063b4:	003f7306 	br	d06184 <_dtoa_r+0xd0>
  d063b8:	00a00034 	movhi	r2,32768
  d063bc:	10bfffc4 	addi	r2,r2,-1
  d063c0:	00c00044 	movi	r3,1
  d063c4:	88aa703a 	and	r21,r17,r2
  d063c8:	90c00015 	stw	r3,0(r18)
  d063cc:	003f5806 	br	d06130 <_dtoa_r+0x7c>
  d063d0:	00800434 	movhi	r2,16
  d063d4:	10bfffc4 	addi	r2,r2,-1
  d063d8:	a884703a 	and	r2,r21,r2
  d063dc:	103fec1e 	bne	r2,zero,d06390 <_dtoa_r+0x2dc>
  d063e0:	00c03474 	movhi	r3,209
  d063e4:	18c46804 	addi	r3,r3,4512
  d063e8:	003feb06 	br	d06398 <_dtoa_r+0x2e4>
  d063ec:	d8802917 	ldw	r2,164(sp)
  d063f0:	19000204 	addi	r4,r3,8
  d063f4:	11000015 	stw	r4,0(r2)
  d063f8:	003f6206 	br	d06184 <_dtoa_r+0xd0>
  d063fc:	ddc00117 	ldw	r23,4(sp)
  d06400:	d8800217 	ldw	r2,8(sp)
  d06404:	01000804 	movi	r4,32
  d06408:	b8c10c84 	addi	r3,r23,1074
  d0640c:	18a3883a 	add	r17,r3,r2
  d06410:	2441b80e 	bge	r4,r17,d06af4 <_dtoa_r+0xa40>
  d06414:	00c01004 	movi	r3,64
  d06418:	1c47c83a 	sub	r3,r3,r17
  d0641c:	88bff804 	addi	r2,r17,-32
  d06420:	a8c6983a 	sll	r3,r21,r3
  d06424:	a084d83a 	srl	r2,r20,r2
  d06428:	1888b03a 	or	r4,r3,r2
  d0642c:	0d0c2ec0 	call	d0c2ec <__floatunsidf>
  d06430:	1011883a 	mov	r8,r2
  d06434:	00bf8434 	movhi	r2,65040
  d06438:	01000044 	movi	r4,1
  d0643c:	10d3883a 	add	r9,r2,r3
  d06440:	8dbef344 	addi	r22,r17,-1075
  d06444:	d9000815 	stw	r4,32(sp)
  d06448:	003f6f06 	br	d06208 <_dtoa_r+0x154>
  d0644c:	d8001715 	stw	zero,92(sp)
  d06450:	04400044 	movi	r17,1
  d06454:	00bfffc4 	movi	r2,-1
  d06458:	00c00044 	movi	r3,1
  d0645c:	d8800e15 	stw	r2,56(sp)
  d06460:	d8002615 	stw	zero,152(sp)
  d06464:	d8800f15 	stw	r2,60(sp)
  d06468:	d8c00b15 	stw	r3,44(sp)
  d0646c:	1021883a 	mov	r16,r2
  d06470:	d8801617 	ldw	r2,88(sp)
  d06474:	10001115 	stw	zero,68(r2)
  d06478:	d8801617 	ldw	r2,88(sp)
  d0647c:	11401117 	ldw	r5,68(r2)
  d06480:	1009883a 	mov	r4,r2
  d06484:	0d097c80 	call	d097c8 <_Balloc>
  d06488:	d8c01617 	ldw	r3,88(sp)
  d0648c:	d8800515 	stw	r2,20(sp)
  d06490:	18801015 	stw	r2,64(r3)
  d06494:	00800384 	movi	r2,14
  d06498:	14006836 	bltu	r2,r16,d0663c <_dtoa_r+0x588>
  d0649c:	8805003a 	cmpeq	r2,r17,zero
  d064a0:	1000661e 	bne	r2,zero,d0663c <_dtoa_r+0x588>
  d064a4:	d9000d17 	ldw	r4,52(sp)
  d064a8:	0102300e 	bge	zero,r4,d06d6c <_dtoa_r+0xcb8>
  d064ac:	208003cc 	andi	r2,r4,15
  d064b0:	100490fa 	slli	r2,r2,3
  d064b4:	2025d13a 	srai	r18,r4,4
  d064b8:	00c03474 	movhi	r3,209
  d064bc:	18c47b04 	addi	r3,r3,4588
  d064c0:	10c5883a 	add	r2,r2,r3
  d064c4:	90c0040c 	andi	r3,r18,16
  d064c8:	14000017 	ldw	r16,0(r2)
  d064cc:	14400117 	ldw	r17,4(r2)
  d064d0:	18036a1e 	bne	r3,zero,d0727c <_dtoa_r+0x11c8>
  d064d4:	05800084 	movi	r22,2
  d064d8:	90001026 	beq	r18,zero,d0651c <_dtoa_r+0x468>
  d064dc:	04c03474 	movhi	r19,209
  d064e0:	9cc4ad04 	addi	r19,r19,4788
  d064e4:	9080004c 	andi	r2,r18,1
  d064e8:	1005003a 	cmpeq	r2,r2,zero
  d064ec:	1000081e 	bne	r2,zero,d06510 <_dtoa_r+0x45c>
  d064f0:	99800017 	ldw	r6,0(r19)
  d064f4:	99c00117 	ldw	r7,4(r19)
  d064f8:	880b883a 	mov	r5,r17
  d064fc:	8009883a 	mov	r4,r16
  d06500:	0d0bb380 	call	d0bb38 <__muldf3>
  d06504:	1021883a 	mov	r16,r2
  d06508:	b5800044 	addi	r22,r22,1
  d0650c:	1823883a 	mov	r17,r3
  d06510:	9025d07a 	srai	r18,r18,1
  d06514:	9cc00204 	addi	r19,r19,8
  d06518:	903ff21e 	bne	r18,zero,d064e4 <_dtoa_r+0x430>
  d0651c:	a80b883a 	mov	r5,r21
  d06520:	a009883a 	mov	r4,r20
  d06524:	880f883a 	mov	r7,r17
  d06528:	800d883a 	mov	r6,r16
  d0652c:	0d02f000 	call	d02f00 <__divdf3>
  d06530:	1029883a 	mov	r20,r2
  d06534:	182b883a 	mov	r21,r3
  d06538:	d8c00c17 	ldw	r3,48(sp)
  d0653c:	1805003a 	cmpeq	r2,r3,zero
  d06540:	1000081e 	bne	r2,zero,d06564 <_dtoa_r+0x4b0>
  d06544:	0005883a 	mov	r2,zero
  d06548:	00cffc34 	movhi	r3,16368
  d0654c:	180f883a 	mov	r7,r3
  d06550:	a009883a 	mov	r4,r20
  d06554:	a80b883a 	mov	r5,r21
  d06558:	100d883a 	mov	r6,r2
  d0655c:	0d0c0940 	call	d0c094 <__ltdf2>
  d06560:	1003fe16 	blt	r2,zero,d0755c <_dtoa_r+0x14a8>
  d06564:	b009883a 	mov	r4,r22
  d06568:	0d0c11c0 	call	d0c11c <__floatsidf>
  d0656c:	180b883a 	mov	r5,r3
  d06570:	1009883a 	mov	r4,r2
  d06574:	a00d883a 	mov	r6,r20
  d06578:	a80f883a 	mov	r7,r21
  d0657c:	0d0bb380 	call	d0bb38 <__muldf3>
  d06580:	0011883a 	mov	r8,zero
  d06584:	02500734 	movhi	r9,16412
  d06588:	1009883a 	mov	r4,r2
  d0658c:	180b883a 	mov	r5,r3
  d06590:	480f883a 	mov	r7,r9
  d06594:	400d883a 	mov	r6,r8
  d06598:	0d02e8c0 	call	d02e8c <__adddf3>
  d0659c:	d9000f17 	ldw	r4,60(sp)
  d065a0:	102d883a 	mov	r22,r2
  d065a4:	00bf3034 	movhi	r2,64704
  d065a8:	18b9883a 	add	fp,r3,r2
  d065ac:	e02f883a 	mov	r23,fp
  d065b0:	20028f1e 	bne	r4,zero,d06ff0 <_dtoa_r+0xf3c>
  d065b4:	0005883a 	mov	r2,zero
  d065b8:	00d00534 	movhi	r3,16404
  d065bc:	a009883a 	mov	r4,r20
  d065c0:	a80b883a 	mov	r5,r21
  d065c4:	180f883a 	mov	r7,r3
  d065c8:	100d883a 	mov	r6,r2
  d065cc:	0d02e0c0 	call	d02e0c <__subdf3>
  d065d0:	1009883a 	mov	r4,r2
  d065d4:	e00f883a 	mov	r7,fp
  d065d8:	180b883a 	mov	r5,r3
  d065dc:	b00d883a 	mov	r6,r22
  d065e0:	1025883a 	mov	r18,r2
  d065e4:	1827883a 	mov	r19,r3
  d065e8:	0d0bf840 	call	d0bf84 <__gtdf2>
  d065ec:	00834f16 	blt	zero,r2,d0732c <_dtoa_r+0x1278>
  d065f0:	e0e0003c 	xorhi	r3,fp,32768
  d065f4:	9009883a 	mov	r4,r18
  d065f8:	980b883a 	mov	r5,r19
  d065fc:	180f883a 	mov	r7,r3
  d06600:	b00d883a 	mov	r6,r22
  d06604:	0d0c0940 	call	d0c094 <__ltdf2>
  d06608:	1000080e 	bge	r2,zero,d0662c <_dtoa_r+0x578>
  d0660c:	0027883a 	mov	r19,zero
  d06610:	0025883a 	mov	r18,zero
  d06614:	d8802617 	ldw	r2,152(sp)
  d06618:	df000517 	ldw	fp,20(sp)
  d0661c:	d8000615 	stw	zero,24(sp)
  d06620:	0084303a 	nor	r2,zero,r2
  d06624:	d8800d15 	stw	r2,52(sp)
  d06628:	00019b06 	br	d06c98 <_dtoa_r+0xbe4>
  d0662c:	d9801217 	ldw	r6,72(sp)
  d06630:	d8801317 	ldw	r2,76(sp)
  d06634:	3029883a 	mov	r20,r6
  d06638:	102b883a 	mov	r21,r2
  d0663c:	d8c00217 	ldw	r3,8(sp)
  d06640:	18008516 	blt	r3,zero,d06858 <_dtoa_r+0x7a4>
  d06644:	d9000d17 	ldw	r4,52(sp)
  d06648:	00800384 	movi	r2,14
  d0664c:	11008216 	blt	r2,r4,d06858 <_dtoa_r+0x7a4>
  d06650:	200490fa 	slli	r2,r4,3
  d06654:	d9802617 	ldw	r6,152(sp)
  d06658:	00c03474 	movhi	r3,209
  d0665c:	18c47b04 	addi	r3,r3,4588
  d06660:	10c5883a 	add	r2,r2,r3
  d06664:	14800017 	ldw	r18,0(r2)
  d06668:	14c00117 	ldw	r19,4(r2)
  d0666c:	30031e16 	blt	r6,zero,d072e8 <_dtoa_r+0x1234>
  d06670:	d9000517 	ldw	r4,20(sp)
  d06674:	d8c00f17 	ldw	r3,60(sp)
  d06678:	a823883a 	mov	r17,r21
  d0667c:	a021883a 	mov	r16,r20
  d06680:	192b883a 	add	r21,r3,r4
  d06684:	2039883a 	mov	fp,r4
  d06688:	00000f06 	br	d066c8 <_dtoa_r+0x614>
  d0668c:	0005883a 	mov	r2,zero
  d06690:	00d00934 	movhi	r3,16420
  d06694:	5009883a 	mov	r4,r10
  d06698:	580b883a 	mov	r5,r11
  d0669c:	180f883a 	mov	r7,r3
  d066a0:	100d883a 	mov	r6,r2
  d066a4:	0d0bb380 	call	d0bb38 <__muldf3>
  d066a8:	180b883a 	mov	r5,r3
  d066ac:	000d883a 	mov	r6,zero
  d066b0:	000f883a 	mov	r7,zero
  d066b4:	1009883a 	mov	r4,r2
  d066b8:	1021883a 	mov	r16,r2
  d066bc:	1823883a 	mov	r17,r3
  d066c0:	0d031580 	call	d03158 <__nedf2>
  d066c4:	10004526 	beq	r2,zero,d067dc <_dtoa_r+0x728>
  d066c8:	900d883a 	mov	r6,r18
  d066cc:	980f883a 	mov	r7,r19
  d066d0:	8009883a 	mov	r4,r16
  d066d4:	880b883a 	mov	r5,r17
  d066d8:	0d02f000 	call	d02f00 <__divdf3>
  d066dc:	180b883a 	mov	r5,r3
  d066e0:	1009883a 	mov	r4,r2
  d066e4:	0d0c2140 	call	d0c214 <__fixdfsi>
  d066e8:	1009883a 	mov	r4,r2
  d066ec:	1029883a 	mov	r20,r2
  d066f0:	0d0c11c0 	call	d0c11c <__floatsidf>
  d066f4:	180f883a 	mov	r7,r3
  d066f8:	9009883a 	mov	r4,r18
  d066fc:	980b883a 	mov	r5,r19
  d06700:	100d883a 	mov	r6,r2
  d06704:	0d0bb380 	call	d0bb38 <__muldf3>
  d06708:	180f883a 	mov	r7,r3
  d0670c:	880b883a 	mov	r5,r17
  d06710:	8009883a 	mov	r4,r16
  d06714:	100d883a 	mov	r6,r2
  d06718:	0d02e0c0 	call	d02e0c <__subdf3>
  d0671c:	1015883a 	mov	r10,r2
  d06720:	a0800c04 	addi	r2,r20,48
  d06724:	e0800005 	stb	r2,0(fp)
  d06728:	e7000044 	addi	fp,fp,1
  d0672c:	1817883a 	mov	r11,r3
  d06730:	e57fd61e 	bne	fp,r21,d0668c <_dtoa_r+0x5d8>
  d06734:	500d883a 	mov	r6,r10
  d06738:	180f883a 	mov	r7,r3
  d0673c:	5009883a 	mov	r4,r10
  d06740:	180b883a 	mov	r5,r3
  d06744:	0d02e8c0 	call	d02e8c <__adddf3>
  d06748:	100d883a 	mov	r6,r2
  d0674c:	9009883a 	mov	r4,r18
  d06750:	980b883a 	mov	r5,r19
  d06754:	180f883a 	mov	r7,r3
  d06758:	1021883a 	mov	r16,r2
  d0675c:	1823883a 	mov	r17,r3
  d06760:	0d0c0940 	call	d0c094 <__ltdf2>
  d06764:	10000816 	blt	r2,zero,d06788 <_dtoa_r+0x6d4>
  d06768:	980b883a 	mov	r5,r19
  d0676c:	800d883a 	mov	r6,r16
  d06770:	880f883a 	mov	r7,r17
  d06774:	9009883a 	mov	r4,r18
  d06778:	0d0befc0 	call	d0befc <__eqdf2>
  d0677c:	1000171e 	bne	r2,zero,d067dc <_dtoa_r+0x728>
  d06780:	a080004c 	andi	r2,r20,1
  d06784:	10001526 	beq	r2,zero,d067dc <_dtoa_r+0x728>
  d06788:	d8800d17 	ldw	r2,52(sp)
  d0678c:	d8800415 	stw	r2,16(sp)
  d06790:	e009883a 	mov	r4,fp
  d06794:	213fffc4 	addi	r4,r4,-1
  d06798:	20c00007 	ldb	r3,0(r4)
  d0679c:	00800e44 	movi	r2,57
  d067a0:	1880081e 	bne	r3,r2,d067c4 <_dtoa_r+0x710>
  d067a4:	d8800517 	ldw	r2,20(sp)
  d067a8:	113ffa1e 	bne	r2,r4,d06794 <_dtoa_r+0x6e0>
  d067ac:	d8c00417 	ldw	r3,16(sp)
  d067b0:	d9800517 	ldw	r6,20(sp)
  d067b4:	00800c04 	movi	r2,48
  d067b8:	18c00044 	addi	r3,r3,1
  d067bc:	d8c00415 	stw	r3,16(sp)
  d067c0:	30800005 	stb	r2,0(r6)
  d067c4:	20800003 	ldbu	r2,0(r4)
  d067c8:	d8c00417 	ldw	r3,16(sp)
  d067cc:	27000044 	addi	fp,r4,1
  d067d0:	10800044 	addi	r2,r2,1
  d067d4:	d8c00d15 	stw	r3,52(sp)
  d067d8:	20800005 	stb	r2,0(r4)
  d067dc:	d9001617 	ldw	r4,88(sp)
  d067e0:	d9400717 	ldw	r5,28(sp)
  d067e4:	0d092480 	call	d09248 <_Bfree>
  d067e8:	e0000005 	stb	zero,0(fp)
  d067ec:	d9800d17 	ldw	r6,52(sp)
  d067f0:	d8c02717 	ldw	r3,156(sp)
  d067f4:	d9002917 	ldw	r4,164(sp)
  d067f8:	30800044 	addi	r2,r6,1
  d067fc:	18800015 	stw	r2,0(r3)
  d06800:	20029c26 	beq	r4,zero,d07274 <_dtoa_r+0x11c0>
  d06804:	d8c00517 	ldw	r3,20(sp)
  d06808:	27000015 	stw	fp,0(r4)
  d0680c:	003e5d06 	br	d06184 <_dtoa_r+0xd0>
  d06810:	d9800d17 	ldw	r6,52(sp)
  d06814:	00c03474 	movhi	r3,209
  d06818:	18c47b04 	addi	r3,r3,4588
  d0681c:	d9001217 	ldw	r4,72(sp)
  d06820:	300490fa 	slli	r2,r6,3
  d06824:	d9401317 	ldw	r5,76(sp)
  d06828:	10c5883a 	add	r2,r2,r3
  d0682c:	12000017 	ldw	r8,0(r2)
  d06830:	12400117 	ldw	r9,4(r2)
  d06834:	400d883a 	mov	r6,r8
  d06838:	480f883a 	mov	r7,r9
  d0683c:	0d0c0940 	call	d0c094 <__ltdf2>
  d06840:	1000030e 	bge	r2,zero,d06850 <_dtoa_r+0x79c>
  d06844:	d8800d17 	ldw	r2,52(sp)
  d06848:	10bfffc4 	addi	r2,r2,-1
  d0684c:	d8800d15 	stw	r2,52(sp)
  d06850:	d8000c15 	stw	zero,48(sp)
  d06854:	003ea806 	br	d062f8 <_dtoa_r+0x244>
  d06858:	d9000b17 	ldw	r4,44(sp)
  d0685c:	202cc03a 	cmpne	r22,r4,zero
  d06860:	b000c71e 	bne	r22,zero,d06b80 <_dtoa_r+0xacc>
  d06864:	dc001117 	ldw	r16,68(sp)
  d06868:	dc801017 	ldw	r18,64(sp)
  d0686c:	0027883a 	mov	r19,zero
  d06870:	04000b0e 	bge	zero,r16,d068a0 <_dtoa_r+0x7ec>
  d06874:	d8c00a17 	ldw	r3,40(sp)
  d06878:	00c0090e 	bge	zero,r3,d068a0 <_dtoa_r+0x7ec>
  d0687c:	8005883a 	mov	r2,r16
  d06880:	1c011316 	blt	r3,r16,d06cd0 <_dtoa_r+0xc1c>
  d06884:	d9000a17 	ldw	r4,40(sp)
  d06888:	d9801117 	ldw	r6,68(sp)
  d0688c:	80a1c83a 	sub	r16,r16,r2
  d06890:	2089c83a 	sub	r4,r4,r2
  d06894:	308dc83a 	sub	r6,r6,r2
  d06898:	d9000a15 	stw	r4,40(sp)
  d0689c:	d9801115 	stw	r6,68(sp)
  d068a0:	d8801017 	ldw	r2,64(sp)
  d068a4:	0080150e 	bge	zero,r2,d068fc <_dtoa_r+0x848>
  d068a8:	d8c00b17 	ldw	r3,44(sp)
  d068ac:	1805003a 	cmpeq	r2,r3,zero
  d068b0:	1001c91e 	bne	r2,zero,d06fd8 <_dtoa_r+0xf24>
  d068b4:	04800e0e 	bge	zero,r18,d068f0 <_dtoa_r+0x83c>
  d068b8:	d9001617 	ldw	r4,88(sp)
  d068bc:	980b883a 	mov	r5,r19
  d068c0:	900d883a 	mov	r6,r18
  d068c4:	0d09ffc0 	call	d09ffc <__pow5mult>
  d068c8:	d9001617 	ldw	r4,88(sp)
  d068cc:	d9800717 	ldw	r6,28(sp)
  d068d0:	100b883a 	mov	r5,r2
  d068d4:	1027883a 	mov	r19,r2
  d068d8:	0d09cd80 	call	d09cd8 <__multiply>
  d068dc:	d9001617 	ldw	r4,88(sp)
  d068e0:	d9400717 	ldw	r5,28(sp)
  d068e4:	1023883a 	mov	r17,r2
  d068e8:	0d092480 	call	d09248 <_Bfree>
  d068ec:	dc400715 	stw	r17,28(sp)
  d068f0:	d9001017 	ldw	r4,64(sp)
  d068f4:	248dc83a 	sub	r6,r4,r18
  d068f8:	30010e1e 	bne	r6,zero,d06d34 <_dtoa_r+0xc80>
  d068fc:	d9001617 	ldw	r4,88(sp)
  d06900:	04400044 	movi	r17,1
  d06904:	880b883a 	mov	r5,r17
  d06908:	0d09ec00 	call	d09ec0 <__i2b>
  d0690c:	d9800917 	ldw	r6,36(sp)
  d06910:	1025883a 	mov	r18,r2
  d06914:	0180040e 	bge	zero,r6,d06928 <_dtoa_r+0x874>
  d06918:	d9001617 	ldw	r4,88(sp)
  d0691c:	100b883a 	mov	r5,r2
  d06920:	0d09ffc0 	call	d09ffc <__pow5mult>
  d06924:	1025883a 	mov	r18,r2
  d06928:	d8801717 	ldw	r2,92(sp)
  d0692c:	8880f30e 	bge	r17,r2,d06cfc <_dtoa_r+0xc48>
  d06930:	0023883a 	mov	r17,zero
  d06934:	d9800917 	ldw	r6,36(sp)
  d06938:	30019e1e 	bne	r6,zero,d06fb4 <_dtoa_r+0xf00>
  d0693c:	00c00044 	movi	r3,1
  d06940:	d9000a17 	ldw	r4,40(sp)
  d06944:	20c5883a 	add	r2,r4,r3
  d06948:	10c007cc 	andi	r3,r2,31
  d0694c:	1800841e 	bne	r3,zero,d06b60 <_dtoa_r+0xaac>
  d06950:	00800704 	movi	r2,28
  d06954:	d9000a17 	ldw	r4,40(sp)
  d06958:	d9801117 	ldw	r6,68(sp)
  d0695c:	80a1883a 	add	r16,r16,r2
  d06960:	2089883a 	add	r4,r4,r2
  d06964:	308d883a 	add	r6,r6,r2
  d06968:	d9000a15 	stw	r4,40(sp)
  d0696c:	d9801115 	stw	r6,68(sp)
  d06970:	d8801117 	ldw	r2,68(sp)
  d06974:	0080050e 	bge	zero,r2,d0698c <_dtoa_r+0x8d8>
  d06978:	d9400717 	ldw	r5,28(sp)
  d0697c:	d9001617 	ldw	r4,88(sp)
  d06980:	100d883a 	mov	r6,r2
  d06984:	0d09b8c0 	call	d09b8c <__lshift>
  d06988:	d8800715 	stw	r2,28(sp)
  d0698c:	d8c00a17 	ldw	r3,40(sp)
  d06990:	00c0050e 	bge	zero,r3,d069a8 <_dtoa_r+0x8f4>
  d06994:	d9001617 	ldw	r4,88(sp)
  d06998:	900b883a 	mov	r5,r18
  d0699c:	180d883a 	mov	r6,r3
  d069a0:	0d09b8c0 	call	d09b8c <__lshift>
  d069a4:	1025883a 	mov	r18,r2
  d069a8:	d9000c17 	ldw	r4,48(sp)
  d069ac:	2005003a 	cmpeq	r2,r4,zero
  d069b0:	10016f26 	beq	r2,zero,d06f70 <_dtoa_r+0xebc>
  d069b4:	d9000f17 	ldw	r4,60(sp)
  d069b8:	0102170e 	bge	zero,r4,d07218 <_dtoa_r+0x1164>
  d069bc:	d9800b17 	ldw	r6,44(sp)
  d069c0:	3005003a 	cmpeq	r2,r6,zero
  d069c4:	1000881e 	bne	r2,zero,d06be8 <_dtoa_r+0xb34>
  d069c8:	0400050e 	bge	zero,r16,d069e0 <_dtoa_r+0x92c>
  d069cc:	d9001617 	ldw	r4,88(sp)
  d069d0:	980b883a 	mov	r5,r19
  d069d4:	800d883a 	mov	r6,r16
  d069d8:	0d09b8c0 	call	d09b8c <__lshift>
  d069dc:	1027883a 	mov	r19,r2
  d069e0:	8804c03a 	cmpne	r2,r17,zero
  d069e4:	1002541e 	bne	r2,zero,d07338 <_dtoa_r+0x1284>
  d069e8:	980b883a 	mov	r5,r19
  d069ec:	dd800517 	ldw	r22,20(sp)
  d069f0:	dcc00615 	stw	r19,24(sp)
  d069f4:	a700004c 	andi	fp,r20,1
  d069f8:	2827883a 	mov	r19,r5
  d069fc:	d9000717 	ldw	r4,28(sp)
  d06a00:	900b883a 	mov	r5,r18
  d06a04:	0d05e9c0 	call	d05e9c <quorem>
  d06a08:	d9000717 	ldw	r4,28(sp)
  d06a0c:	d9400617 	ldw	r5,24(sp)
  d06a10:	1023883a 	mov	r17,r2
  d06a14:	8dc00c04 	addi	r23,r17,48
  d06a18:	0d093a40 	call	d093a4 <__mcmp>
  d06a1c:	d9001617 	ldw	r4,88(sp)
  d06a20:	900b883a 	mov	r5,r18
  d06a24:	980d883a 	mov	r6,r19
  d06a28:	1029883a 	mov	r20,r2
  d06a2c:	0d09a000 	call	d09a00 <__mdiff>
  d06a30:	102b883a 	mov	r21,r2
  d06a34:	10800317 	ldw	r2,12(r2)
  d06a38:	1001281e 	bne	r2,zero,d06edc <_dtoa_r+0xe28>
  d06a3c:	d9000717 	ldw	r4,28(sp)
  d06a40:	a80b883a 	mov	r5,r21
  d06a44:	0d093a40 	call	d093a4 <__mcmp>
  d06a48:	d9001617 	ldw	r4,88(sp)
  d06a4c:	1021883a 	mov	r16,r2
  d06a50:	a80b883a 	mov	r5,r21
  d06a54:	0d092480 	call	d09248 <_Bfree>
  d06a58:	8000041e 	bne	r16,zero,d06a6c <_dtoa_r+0x9b8>
  d06a5c:	d8801717 	ldw	r2,92(sp)
  d06a60:	1000021e 	bne	r2,zero,d06a6c <_dtoa_r+0x9b8>
  d06a64:	e004c03a 	cmpne	r2,fp,zero
  d06a68:	10011726 	beq	r2,zero,d06ec8 <_dtoa_r+0xe14>
  d06a6c:	a0010616 	blt	r20,zero,d06e88 <_dtoa_r+0xdd4>
  d06a70:	a000041e 	bne	r20,zero,d06a84 <_dtoa_r+0x9d0>
  d06a74:	d8c01717 	ldw	r3,92(sp)
  d06a78:	1800021e 	bne	r3,zero,d06a84 <_dtoa_r+0x9d0>
  d06a7c:	e004c03a 	cmpne	r2,fp,zero
  d06a80:	10010126 	beq	r2,zero,d06e88 <_dtoa_r+0xdd4>
  d06a84:	04023d16 	blt	zero,r16,d0737c <_dtoa_r+0x12c8>
  d06a88:	b5c00005 	stb	r23,0(r22)
  d06a8c:	d9800517 	ldw	r6,20(sp)
  d06a90:	d9000f17 	ldw	r4,60(sp)
  d06a94:	b5800044 	addi	r22,r22,1
  d06a98:	3105883a 	add	r2,r6,r4
  d06a9c:	b0806526 	beq	r22,r2,d06c34 <_dtoa_r+0xb80>
  d06aa0:	d9400717 	ldw	r5,28(sp)
  d06aa4:	d9001617 	ldw	r4,88(sp)
  d06aa8:	01800284 	movi	r6,10
  d06aac:	000f883a 	mov	r7,zero
  d06ab0:	0d09efc0 	call	d09efc <__multadd>
  d06ab4:	d8800715 	stw	r2,28(sp)
  d06ab8:	d8800617 	ldw	r2,24(sp)
  d06abc:	14c10c26 	beq	r2,r19,d06ef0 <_dtoa_r+0xe3c>
  d06ac0:	d9400617 	ldw	r5,24(sp)
  d06ac4:	d9001617 	ldw	r4,88(sp)
  d06ac8:	01800284 	movi	r6,10
  d06acc:	000f883a 	mov	r7,zero
  d06ad0:	0d09efc0 	call	d09efc <__multadd>
  d06ad4:	d9001617 	ldw	r4,88(sp)
  d06ad8:	980b883a 	mov	r5,r19
  d06adc:	01800284 	movi	r6,10
  d06ae0:	000f883a 	mov	r7,zero
  d06ae4:	d8800615 	stw	r2,24(sp)
  d06ae8:	0d09efc0 	call	d09efc <__multadd>
  d06aec:	1027883a 	mov	r19,r2
  d06af0:	003fc206 	br	d069fc <_dtoa_r+0x948>
  d06af4:	2445c83a 	sub	r2,r4,r17
  d06af8:	a088983a 	sll	r4,r20,r2
  d06afc:	003e4b06 	br	d0642c <_dtoa_r+0x378>
  d06b00:	01bfffc4 	movi	r6,-1
  d06b04:	00800044 	movi	r2,1
  d06b08:	d9800e15 	stw	r6,56(sp)
  d06b0c:	d9800f15 	stw	r6,60(sp)
  d06b10:	d8800b15 	stw	r2,44(sp)
  d06b14:	d8c01617 	ldw	r3,88(sp)
  d06b18:	008005c4 	movi	r2,23
  d06b1c:	18001115 	stw	zero,68(r3)
  d06b20:	1580082e 	bgeu	r2,r22,d06b44 <_dtoa_r+0xa90>
  d06b24:	00c00104 	movi	r3,4
  d06b28:	0009883a 	mov	r4,zero
  d06b2c:	18c7883a 	add	r3,r3,r3
  d06b30:	18800504 	addi	r2,r3,20
  d06b34:	21000044 	addi	r4,r4,1
  d06b38:	b0bffc2e 	bgeu	r22,r2,d06b2c <_dtoa_r+0xa78>
  d06b3c:	d9801617 	ldw	r6,88(sp)
  d06b40:	31001115 	stw	r4,68(r6)
  d06b44:	dc000f17 	ldw	r16,60(sp)
  d06b48:	003e4b06 	br	d06478 <_dtoa_r+0x3c4>
  d06b4c:	d9801717 	ldw	r6,92(sp)
  d06b50:	0023883a 	mov	r17,zero
  d06b54:	31bfff04 	addi	r6,r6,-4
  d06b58:	d9801715 	stw	r6,92(sp)
  d06b5c:	003df806 	br	d06340 <_dtoa_r+0x28c>
  d06b60:	00800804 	movi	r2,32
  d06b64:	10c9c83a 	sub	r4,r2,r3
  d06b68:	00c00104 	movi	r3,4
  d06b6c:	19005a16 	blt	r3,r4,d06cd8 <_dtoa_r+0xc24>
  d06b70:	008000c4 	movi	r2,3
  d06b74:	113f7e16 	blt	r2,r4,d06970 <_dtoa_r+0x8bc>
  d06b78:	20800704 	addi	r2,r4,28
  d06b7c:	003f7506 	br	d06954 <_dtoa_r+0x8a0>
  d06b80:	d9801717 	ldw	r6,92(sp)
  d06b84:	00800044 	movi	r2,1
  d06b88:	1180a10e 	bge	r2,r6,d06e10 <_dtoa_r+0xd5c>
  d06b8c:	d9800f17 	ldw	r6,60(sp)
  d06b90:	d8c01017 	ldw	r3,64(sp)
  d06b94:	30bfffc4 	addi	r2,r6,-1
  d06b98:	1881c616 	blt	r3,r2,d072b4 <_dtoa_r+0x1200>
  d06b9c:	18a5c83a 	sub	r18,r3,r2
  d06ba0:	d8800f17 	ldw	r2,60(sp)
  d06ba4:	10026216 	blt	r2,zero,d07530 <_dtoa_r+0x147c>
  d06ba8:	dc001117 	ldw	r16,68(sp)
  d06bac:	1007883a 	mov	r3,r2
  d06bb0:	d9800a17 	ldw	r6,40(sp)
  d06bb4:	d8801117 	ldw	r2,68(sp)
  d06bb8:	d9001617 	ldw	r4,88(sp)
  d06bbc:	30cd883a 	add	r6,r6,r3
  d06bc0:	10c5883a 	add	r2,r2,r3
  d06bc4:	01400044 	movi	r5,1
  d06bc8:	d9800a15 	stw	r6,40(sp)
  d06bcc:	d8801115 	stw	r2,68(sp)
  d06bd0:	0d09ec00 	call	d09ec0 <__i2b>
  d06bd4:	1027883a 	mov	r19,r2
  d06bd8:	003f2506 	br	d06870 <_dtoa_r+0x7bc>
  d06bdc:	00c03474 	movhi	r3,209
  d06be0:	18c3ea04 	addi	r3,r3,4008
  d06be4:	003d6706 	br	d06184 <_dtoa_r+0xd0>
  d06be8:	dd800517 	ldw	r22,20(sp)
  d06bec:	04000044 	movi	r16,1
  d06bf0:	00000706 	br	d06c10 <_dtoa_r+0xb5c>
  d06bf4:	d9400717 	ldw	r5,28(sp)
  d06bf8:	d9001617 	ldw	r4,88(sp)
  d06bfc:	01800284 	movi	r6,10
  d06c00:	000f883a 	mov	r7,zero
  d06c04:	0d09efc0 	call	d09efc <__multadd>
  d06c08:	d8800715 	stw	r2,28(sp)
  d06c0c:	84000044 	addi	r16,r16,1
  d06c10:	d9000717 	ldw	r4,28(sp)
  d06c14:	900b883a 	mov	r5,r18
  d06c18:	0d05e9c0 	call	d05e9c <quorem>
  d06c1c:	15c00c04 	addi	r23,r2,48
  d06c20:	b5c00005 	stb	r23,0(r22)
  d06c24:	d8c00f17 	ldw	r3,60(sp)
  d06c28:	b5800044 	addi	r22,r22,1
  d06c2c:	80fff116 	blt	r16,r3,d06bf4 <_dtoa_r+0xb40>
  d06c30:	d8000615 	stw	zero,24(sp)
  d06c34:	d9400717 	ldw	r5,28(sp)
  d06c38:	d9001617 	ldw	r4,88(sp)
  d06c3c:	01800044 	movi	r6,1
  d06c40:	0d09b8c0 	call	d09b8c <__lshift>
  d06c44:	1009883a 	mov	r4,r2
  d06c48:	900b883a 	mov	r5,r18
  d06c4c:	d8800715 	stw	r2,28(sp)
  d06c50:	0d093a40 	call	d093a4 <__mcmp>
  d06c54:	00803c0e 	bge	zero,r2,d06d48 <_dtoa_r+0xc94>
  d06c58:	b009883a 	mov	r4,r22
  d06c5c:	213fffc4 	addi	r4,r4,-1
  d06c60:	21400003 	ldbu	r5,0(r4)
  d06c64:	00800e44 	movi	r2,57
  d06c68:	28c03fcc 	andi	r3,r5,255
  d06c6c:	18c0201c 	xori	r3,r3,128
  d06c70:	18ffe004 	addi	r3,r3,-128
  d06c74:	1881981e 	bne	r3,r2,d072d8 <_dtoa_r+0x1224>
  d06c78:	d9800517 	ldw	r6,20(sp)
  d06c7c:	21bff71e 	bne	r4,r6,d06c5c <_dtoa_r+0xba8>
  d06c80:	d8800d17 	ldw	r2,52(sp)
  d06c84:	37000044 	addi	fp,r6,1
  d06c88:	10800044 	addi	r2,r2,1
  d06c8c:	d8800d15 	stw	r2,52(sp)
  d06c90:	00800c44 	movi	r2,49
  d06c94:	30800005 	stb	r2,0(r6)
  d06c98:	d9001617 	ldw	r4,88(sp)
  d06c9c:	900b883a 	mov	r5,r18
  d06ca0:	0d092480 	call	d09248 <_Bfree>
  d06ca4:	983ecd26 	beq	r19,zero,d067dc <_dtoa_r+0x728>
  d06ca8:	d8c00617 	ldw	r3,24(sp)
  d06cac:	18000426 	beq	r3,zero,d06cc0 <_dtoa_r+0xc0c>
  d06cb0:	1cc00326 	beq	r3,r19,d06cc0 <_dtoa_r+0xc0c>
  d06cb4:	d9001617 	ldw	r4,88(sp)
  d06cb8:	180b883a 	mov	r5,r3
  d06cbc:	0d092480 	call	d09248 <_Bfree>
  d06cc0:	d9001617 	ldw	r4,88(sp)
  d06cc4:	980b883a 	mov	r5,r19
  d06cc8:	0d092480 	call	d09248 <_Bfree>
  d06ccc:	003ec306 	br	d067dc <_dtoa_r+0x728>
  d06cd0:	1805883a 	mov	r2,r3
  d06cd4:	003eeb06 	br	d06884 <_dtoa_r+0x7d0>
  d06cd8:	d9800a17 	ldw	r6,40(sp)
  d06cdc:	d8c01117 	ldw	r3,68(sp)
  d06ce0:	20bfff04 	addi	r2,r4,-4
  d06ce4:	308d883a 	add	r6,r6,r2
  d06ce8:	1887883a 	add	r3,r3,r2
  d06cec:	80a1883a 	add	r16,r16,r2
  d06cf0:	d9800a15 	stw	r6,40(sp)
  d06cf4:	d8c01115 	stw	r3,68(sp)
  d06cf8:	003f1d06 	br	d06970 <_dtoa_r+0x8bc>
  d06cfc:	a03f0c1e 	bne	r20,zero,d06930 <_dtoa_r+0x87c>
  d06d00:	00800434 	movhi	r2,16
  d06d04:	10bfffc4 	addi	r2,r2,-1
  d06d08:	a884703a 	and	r2,r21,r2
  d06d0c:	103f081e 	bne	r2,zero,d06930 <_dtoa_r+0x87c>
  d06d10:	a89ffc2c 	andhi	r2,r21,32752
  d06d14:	103f0626 	beq	r2,zero,d06930 <_dtoa_r+0x87c>
  d06d18:	d8c01117 	ldw	r3,68(sp)
  d06d1c:	d9000a17 	ldw	r4,40(sp)
  d06d20:	18c00044 	addi	r3,r3,1
  d06d24:	21000044 	addi	r4,r4,1
  d06d28:	d8c01115 	stw	r3,68(sp)
  d06d2c:	d9000a15 	stw	r4,40(sp)
  d06d30:	003f0006 	br	d06934 <_dtoa_r+0x880>
  d06d34:	d9400717 	ldw	r5,28(sp)
  d06d38:	d9001617 	ldw	r4,88(sp)
  d06d3c:	0d09ffc0 	call	d09ffc <__pow5mult>
  d06d40:	d8800715 	stw	r2,28(sp)
  d06d44:	003eed06 	br	d068fc <_dtoa_r+0x848>
  d06d48:	1000021e 	bne	r2,zero,d06d54 <_dtoa_r+0xca0>
  d06d4c:	b880004c 	andi	r2,r23,1
  d06d50:	103fc11e 	bne	r2,zero,d06c58 <_dtoa_r+0xba4>
  d06d54:	b5bfffc4 	addi	r22,r22,-1
  d06d58:	b0c00007 	ldb	r3,0(r22)
  d06d5c:	00800c04 	movi	r2,48
  d06d60:	18bffc26 	beq	r3,r2,d06d54 <_dtoa_r+0xca0>
  d06d64:	b7000044 	addi	fp,r22,1
  d06d68:	003fcb06 	br	d06c98 <_dtoa_r+0xbe4>
  d06d6c:	d9800d17 	ldw	r6,52(sp)
  d06d70:	018fc83a 	sub	r7,zero,r6
  d06d74:	3801f726 	beq	r7,zero,d07554 <_dtoa_r+0x14a0>
  d06d78:	398003cc 	andi	r6,r7,15
  d06d7c:	300c90fa 	slli	r6,r6,3
  d06d80:	01403474 	movhi	r5,209
  d06d84:	29447b04 	addi	r5,r5,4588
  d06d88:	d9001217 	ldw	r4,72(sp)
  d06d8c:	314d883a 	add	r6,r6,r5
  d06d90:	30c00117 	ldw	r3,4(r6)
  d06d94:	30800017 	ldw	r2,0(r6)
  d06d98:	d9401317 	ldw	r5,76(sp)
  d06d9c:	3821d13a 	srai	r16,r7,4
  d06da0:	100d883a 	mov	r6,r2
  d06da4:	180f883a 	mov	r7,r3
  d06da8:	0d0bb380 	call	d0bb38 <__muldf3>
  d06dac:	1011883a 	mov	r8,r2
  d06db0:	1813883a 	mov	r9,r3
  d06db4:	1029883a 	mov	r20,r2
  d06db8:	182b883a 	mov	r21,r3
  d06dbc:	8001e526 	beq	r16,zero,d07554 <_dtoa_r+0x14a0>
  d06dc0:	05800084 	movi	r22,2
  d06dc4:	04403474 	movhi	r17,209
  d06dc8:	8c44ad04 	addi	r17,r17,4788
  d06dcc:	8080004c 	andi	r2,r16,1
  d06dd0:	1005003a 	cmpeq	r2,r2,zero
  d06dd4:	1000081e 	bne	r2,zero,d06df8 <_dtoa_r+0xd44>
  d06dd8:	89800017 	ldw	r6,0(r17)
  d06ddc:	89c00117 	ldw	r7,4(r17)
  d06de0:	480b883a 	mov	r5,r9
  d06de4:	4009883a 	mov	r4,r8
  d06de8:	0d0bb380 	call	d0bb38 <__muldf3>
  d06dec:	1011883a 	mov	r8,r2
  d06df0:	b5800044 	addi	r22,r22,1
  d06df4:	1813883a 	mov	r9,r3
  d06df8:	8021d07a 	srai	r16,r16,1
  d06dfc:	8c400204 	addi	r17,r17,8
  d06e00:	803ff21e 	bne	r16,zero,d06dcc <_dtoa_r+0xd18>
  d06e04:	4029883a 	mov	r20,r8
  d06e08:	482b883a 	mov	r21,r9
  d06e0c:	003dca06 	br	d06538 <_dtoa_r+0x484>
  d06e10:	d9000817 	ldw	r4,32(sp)
  d06e14:	2005003a 	cmpeq	r2,r4,zero
  d06e18:	1001f61e 	bne	r2,zero,d075f4 <_dtoa_r+0x1540>
  d06e1c:	dc001117 	ldw	r16,68(sp)
  d06e20:	dc801017 	ldw	r18,64(sp)
  d06e24:	18c10cc4 	addi	r3,r3,1075
  d06e28:	003f6106 	br	d06bb0 <_dtoa_r+0xafc>
  d06e2c:	d8000b15 	stw	zero,44(sp)
  d06e30:	d9802617 	ldw	r6,152(sp)
  d06e34:	d8c00d17 	ldw	r3,52(sp)
  d06e38:	30800044 	addi	r2,r6,1
  d06e3c:	18ad883a 	add	r22,r3,r2
  d06e40:	b13fffc4 	addi	r4,r22,-1
  d06e44:	d9000e15 	stw	r4,56(sp)
  d06e48:	0581f60e 	bge	zero,r22,d07624 <_dtoa_r+0x1570>
  d06e4c:	dd800f15 	stw	r22,60(sp)
  d06e50:	003f3006 	br	d06b14 <_dtoa_r+0xa60>
  d06e54:	d8000b15 	stw	zero,44(sp)
  d06e58:	d9002617 	ldw	r4,152(sp)
  d06e5c:	0101eb0e 	bge	zero,r4,d0760c <_dtoa_r+0x1558>
  d06e60:	202d883a 	mov	r22,r4
  d06e64:	d9000e15 	stw	r4,56(sp)
  d06e68:	d9000f15 	stw	r4,60(sp)
  d06e6c:	003f2906 	br	d06b14 <_dtoa_r+0xa60>
  d06e70:	01800044 	movi	r6,1
  d06e74:	d9800b15 	stw	r6,44(sp)
  d06e78:	003ff706 	br	d06e58 <_dtoa_r+0xda4>
  d06e7c:	01000044 	movi	r4,1
  d06e80:	d9000b15 	stw	r4,44(sp)
  d06e84:	003fea06 	br	d06e30 <_dtoa_r+0xd7c>
  d06e88:	04000c0e 	bge	zero,r16,d06ebc <_dtoa_r+0xe08>
  d06e8c:	d9400717 	ldw	r5,28(sp)
  d06e90:	d9001617 	ldw	r4,88(sp)
  d06e94:	01800044 	movi	r6,1
  d06e98:	0d09b8c0 	call	d09b8c <__lshift>
  d06e9c:	1009883a 	mov	r4,r2
  d06ea0:	900b883a 	mov	r5,r18
  d06ea4:	d8800715 	stw	r2,28(sp)
  d06ea8:	0d093a40 	call	d093a4 <__mcmp>
  d06eac:	0081e00e 	bge	zero,r2,d07630 <_dtoa_r+0x157c>
  d06eb0:	bdc00044 	addi	r23,r23,1
  d06eb4:	00800e84 	movi	r2,58
  d06eb8:	b881a226 	beq	r23,r2,d07544 <_dtoa_r+0x1490>
  d06ebc:	b7000044 	addi	fp,r22,1
  d06ec0:	b5c00005 	stb	r23,0(r22)
  d06ec4:	003f7406 	br	d06c98 <_dtoa_r+0xbe4>
  d06ec8:	00800e44 	movi	r2,57
  d06ecc:	b8819d26 	beq	r23,r2,d07544 <_dtoa_r+0x1490>
  d06ed0:	053ffa0e 	bge	zero,r20,d06ebc <_dtoa_r+0xe08>
  d06ed4:	8dc00c44 	addi	r23,r17,49
  d06ed8:	003ff806 	br	d06ebc <_dtoa_r+0xe08>
  d06edc:	d9001617 	ldw	r4,88(sp)
  d06ee0:	a80b883a 	mov	r5,r21
  d06ee4:	04000044 	movi	r16,1
  d06ee8:	0d092480 	call	d09248 <_Bfree>
  d06eec:	003edf06 	br	d06a6c <_dtoa_r+0x9b8>
  d06ef0:	d9001617 	ldw	r4,88(sp)
  d06ef4:	980b883a 	mov	r5,r19
  d06ef8:	01800284 	movi	r6,10
  d06efc:	000f883a 	mov	r7,zero
  d06f00:	0d09efc0 	call	d09efc <__multadd>
  d06f04:	1027883a 	mov	r19,r2
  d06f08:	d8800615 	stw	r2,24(sp)
  d06f0c:	003ebb06 	br	d069fc <_dtoa_r+0x948>
  d06f10:	d9801117 	ldw	r6,68(sp)
  d06f14:	d8800d17 	ldw	r2,52(sp)
  d06f18:	d8000915 	stw	zero,36(sp)
  d06f1c:	308dc83a 	sub	r6,r6,r2
  d06f20:	0087c83a 	sub	r3,zero,r2
  d06f24:	d9801115 	stw	r6,68(sp)
  d06f28:	d8c01015 	stw	r3,64(sp)
  d06f2c:	003cfe06 	br	d06328 <_dtoa_r+0x274>
  d06f30:	018dc83a 	sub	r6,zero,r6
  d06f34:	d9801115 	stw	r6,68(sp)
  d06f38:	d8000a15 	stw	zero,40(sp)
  d06f3c:	003cf306 	br	d0630c <_dtoa_r+0x258>
  d06f40:	d9000d17 	ldw	r4,52(sp)
  d06f44:	0d0c11c0 	call	d0c11c <__floatsidf>
  d06f48:	880b883a 	mov	r5,r17
  d06f4c:	8009883a 	mov	r4,r16
  d06f50:	180f883a 	mov	r7,r3
  d06f54:	100d883a 	mov	r6,r2
  d06f58:	0d031580 	call	d03158 <__nedf2>
  d06f5c:	103ce126 	beq	r2,zero,d062e4 <_dtoa_r+0x230>
  d06f60:	d9800d17 	ldw	r6,52(sp)
  d06f64:	31bfffc4 	addi	r6,r6,-1
  d06f68:	d9800d15 	stw	r6,52(sp)
  d06f6c:	003cdd06 	br	d062e4 <_dtoa_r+0x230>
  d06f70:	d9000717 	ldw	r4,28(sp)
  d06f74:	900b883a 	mov	r5,r18
  d06f78:	0d093a40 	call	d093a4 <__mcmp>
  d06f7c:	103e8d0e 	bge	r2,zero,d069b4 <_dtoa_r+0x900>
  d06f80:	d9400717 	ldw	r5,28(sp)
  d06f84:	d9001617 	ldw	r4,88(sp)
  d06f88:	01800284 	movi	r6,10
  d06f8c:	000f883a 	mov	r7,zero
  d06f90:	0d09efc0 	call	d09efc <__multadd>
  d06f94:	d9800d17 	ldw	r6,52(sp)
  d06f98:	d8800715 	stw	r2,28(sp)
  d06f9c:	31bfffc4 	addi	r6,r6,-1
  d06fa0:	d9800d15 	stw	r6,52(sp)
  d06fa4:	b001a71e 	bne	r22,zero,d07644 <_dtoa_r+0x1590>
  d06fa8:	d8800e17 	ldw	r2,56(sp)
  d06fac:	d8800f15 	stw	r2,60(sp)
  d06fb0:	003e8006 	br	d069b4 <_dtoa_r+0x900>
  d06fb4:	90800417 	ldw	r2,16(r18)
  d06fb8:	1085883a 	add	r2,r2,r2
  d06fbc:	1085883a 	add	r2,r2,r2
  d06fc0:	1485883a 	add	r2,r2,r18
  d06fc4:	11000417 	ldw	r4,16(r2)
  d06fc8:	0d092700 	call	d09270 <__hi0bits>
  d06fcc:	00c00804 	movi	r3,32
  d06fd0:	1887c83a 	sub	r3,r3,r2
  d06fd4:	003e5a06 	br	d06940 <_dtoa_r+0x88c>
  d06fd8:	d9400717 	ldw	r5,28(sp)
  d06fdc:	d9801017 	ldw	r6,64(sp)
  d06fe0:	d9001617 	ldw	r4,88(sp)
  d06fe4:	0d09ffc0 	call	d09ffc <__pow5mult>
  d06fe8:	d8800715 	stw	r2,28(sp)
  d06fec:	003e4306 	br	d068fc <_dtoa_r+0x848>
  d06ff0:	d9800f17 	ldw	r6,60(sp)
  d06ff4:	d8800d17 	ldw	r2,52(sp)
  d06ff8:	d9800315 	stw	r6,12(sp)
  d06ffc:	d8800415 	stw	r2,16(sp)
  d07000:	d8c00b17 	ldw	r3,44(sp)
  d07004:	1805003a 	cmpeq	r2,r3,zero
  d07008:	1000e21e 	bne	r2,zero,d07394 <_dtoa_r+0x12e0>
  d0700c:	d9000317 	ldw	r4,12(sp)
  d07010:	0005883a 	mov	r2,zero
  d07014:	00cff834 	movhi	r3,16352
  d07018:	200c90fa 	slli	r6,r4,3
  d0701c:	01003474 	movhi	r4,209
  d07020:	21047b04 	addi	r4,r4,4588
  d07024:	180b883a 	mov	r5,r3
  d07028:	310d883a 	add	r6,r6,r4
  d0702c:	327fff17 	ldw	r9,-4(r6)
  d07030:	323ffe17 	ldw	r8,-8(r6)
  d07034:	1009883a 	mov	r4,r2
  d07038:	480f883a 	mov	r7,r9
  d0703c:	400d883a 	mov	r6,r8
  d07040:	0d02f000 	call	d02f00 <__divdf3>
  d07044:	180b883a 	mov	r5,r3
  d07048:	b00d883a 	mov	r6,r22
  d0704c:	b80f883a 	mov	r7,r23
  d07050:	1009883a 	mov	r4,r2
  d07054:	0d02e0c0 	call	d02e0c <__subdf3>
  d07058:	a80b883a 	mov	r5,r21
  d0705c:	a009883a 	mov	r4,r20
  d07060:	d8c01915 	stw	r3,100(sp)
  d07064:	d8801815 	stw	r2,96(sp)
  d07068:	0d0c2140 	call	d0c214 <__fixdfsi>
  d0706c:	1009883a 	mov	r4,r2
  d07070:	1027883a 	mov	r19,r2
  d07074:	0d0c11c0 	call	d0c11c <__floatsidf>
  d07078:	a80b883a 	mov	r5,r21
  d0707c:	a009883a 	mov	r4,r20
  d07080:	180f883a 	mov	r7,r3
  d07084:	100d883a 	mov	r6,r2
  d07088:	0d02e0c0 	call	d02e0c <__subdf3>
  d0708c:	d9801817 	ldw	r6,96(sp)
  d07090:	1823883a 	mov	r17,r3
  d07094:	d8801415 	stw	r2,80(sp)
  d07098:	302d883a 	mov	r22,r6
  d0709c:	d9800517 	ldw	r6,20(sp)
  d070a0:	9cc00c04 	addi	r19,r19,48
  d070a4:	dc401515 	stw	r17,84(sp)
  d070a8:	d8c01917 	ldw	r3,100(sp)
  d070ac:	34c00005 	stb	r19,0(r6)
  d070b0:	d8800517 	ldw	r2,20(sp)
  d070b4:	d9401917 	ldw	r5,100(sp)
  d070b8:	d9801417 	ldw	r6,80(sp)
  d070bc:	b009883a 	mov	r4,r22
  d070c0:	880f883a 	mov	r7,r17
  d070c4:	182f883a 	mov	r23,r3
  d070c8:	17000044 	addi	fp,r2,1
  d070cc:	0d0bf840 	call	d0bf84 <__gtdf2>
  d070d0:	00804e16 	blt	zero,r2,d0720c <_dtoa_r+0x1158>
  d070d4:	d9801417 	ldw	r6,80(sp)
  d070d8:	0005883a 	mov	r2,zero
  d070dc:	00cffc34 	movhi	r3,16368
  d070e0:	180b883a 	mov	r5,r3
  d070e4:	880f883a 	mov	r7,r17
  d070e8:	1009883a 	mov	r4,r2
  d070ec:	0d02e0c0 	call	d02e0c <__subdf3>
  d070f0:	d9401917 	ldw	r5,100(sp)
  d070f4:	180f883a 	mov	r7,r3
  d070f8:	b009883a 	mov	r4,r22
  d070fc:	100d883a 	mov	r6,r2
  d07100:	0d0bf840 	call	d0bf84 <__gtdf2>
  d07104:	00bda216 	blt	zero,r2,d06790 <_dtoa_r+0x6dc>
  d07108:	d8c00317 	ldw	r3,12(sp)
  d0710c:	00800044 	movi	r2,1
  d07110:	10c01216 	blt	r2,r3,d0715c <_dtoa_r+0x10a8>
  d07114:	003d4506 	br	d0662c <_dtoa_r+0x578>
  d07118:	d9801417 	ldw	r6,80(sp)
  d0711c:	0005883a 	mov	r2,zero
  d07120:	00cffc34 	movhi	r3,16368
  d07124:	180b883a 	mov	r5,r3
  d07128:	880f883a 	mov	r7,r17
  d0712c:	1009883a 	mov	r4,r2
  d07130:	0d02e0c0 	call	d02e0c <__subdf3>
  d07134:	d9c01b17 	ldw	r7,108(sp)
  d07138:	180b883a 	mov	r5,r3
  d0713c:	1009883a 	mov	r4,r2
  d07140:	b00d883a 	mov	r6,r22
  d07144:	0d0c0940 	call	d0c094 <__ltdf2>
  d07148:	103d9116 	blt	r2,zero,d06790 <_dtoa_r+0x6dc>
  d0714c:	d9800517 	ldw	r6,20(sp)
  d07150:	d9000317 	ldw	r4,12(sp)
  d07154:	3105883a 	add	r2,r6,r4
  d07158:	e0bd3426 	beq	fp,r2,d0662c <_dtoa_r+0x578>
  d0715c:	04500934 	movhi	r17,16420
  d07160:	0021883a 	mov	r16,zero
  d07164:	b80b883a 	mov	r5,r23
  d07168:	b009883a 	mov	r4,r22
  d0716c:	800d883a 	mov	r6,r16
  d07170:	880f883a 	mov	r7,r17
  d07174:	0d0bb380 	call	d0bb38 <__muldf3>
  d07178:	d9401517 	ldw	r5,84(sp)
  d0717c:	d9001417 	ldw	r4,80(sp)
  d07180:	880f883a 	mov	r7,r17
  d07184:	000d883a 	mov	r6,zero
  d07188:	d8801a15 	stw	r2,104(sp)
  d0718c:	d8c01b15 	stw	r3,108(sp)
  d07190:	0d0bb380 	call	d0bb38 <__muldf3>
  d07194:	180b883a 	mov	r5,r3
  d07198:	1009883a 	mov	r4,r2
  d0719c:	1823883a 	mov	r17,r3
  d071a0:	1021883a 	mov	r16,r2
  d071a4:	0d0c2140 	call	d0c214 <__fixdfsi>
  d071a8:	1009883a 	mov	r4,r2
  d071ac:	102b883a 	mov	r21,r2
  d071b0:	0d0c11c0 	call	d0c11c <__floatsidf>
  d071b4:	880b883a 	mov	r5,r17
  d071b8:	8009883a 	mov	r4,r16
  d071bc:	180f883a 	mov	r7,r3
  d071c0:	100d883a 	mov	r6,r2
  d071c4:	0d02e0c0 	call	d02e0c <__subdf3>
  d071c8:	1021883a 	mov	r16,r2
  d071cc:	d9001b17 	ldw	r4,108(sp)
  d071d0:	1823883a 	mov	r17,r3
  d071d4:	dc001415 	stw	r16,80(sp)
  d071d8:	ad400c04 	addi	r21,r21,48
  d071dc:	dc401515 	stw	r17,84(sp)
  d071e0:	d8801a17 	ldw	r2,104(sp)
  d071e4:	e5400005 	stb	r21,0(fp)
  d071e8:	202f883a 	mov	r23,r4
  d071ec:	d9c01b17 	ldw	r7,108(sp)
  d071f0:	d9001417 	ldw	r4,80(sp)
  d071f4:	880b883a 	mov	r5,r17
  d071f8:	100d883a 	mov	r6,r2
  d071fc:	102d883a 	mov	r22,r2
  d07200:	e7000044 	addi	fp,fp,1
  d07204:	0d0c0940 	call	d0c094 <__ltdf2>
  d07208:	103fc30e 	bge	r2,zero,d07118 <_dtoa_r+0x1064>
  d0720c:	d9000417 	ldw	r4,16(sp)
  d07210:	d9000d15 	stw	r4,52(sp)
  d07214:	003d7106 	br	d067dc <_dtoa_r+0x728>
  d07218:	d9801717 	ldw	r6,92(sp)
  d0721c:	00800084 	movi	r2,2
  d07220:	11bde60e 	bge	r2,r6,d069bc <_dtoa_r+0x908>
  d07224:	203cfb1e 	bne	r4,zero,d06614 <_dtoa_r+0x560>
  d07228:	d9001617 	ldw	r4,88(sp)
  d0722c:	900b883a 	mov	r5,r18
  d07230:	01800144 	movi	r6,5
  d07234:	000f883a 	mov	r7,zero
  d07238:	0d09efc0 	call	d09efc <__multadd>
  d0723c:	d9000717 	ldw	r4,28(sp)
  d07240:	100b883a 	mov	r5,r2
  d07244:	1025883a 	mov	r18,r2
  d07248:	0d093a40 	call	d093a4 <__mcmp>
  d0724c:	00bcf10e 	bge	zero,r2,d06614 <_dtoa_r+0x560>
  d07250:	d8c00d17 	ldw	r3,52(sp)
  d07254:	d9000517 	ldw	r4,20(sp)
  d07258:	d8000615 	stw	zero,24(sp)
  d0725c:	18c00044 	addi	r3,r3,1
  d07260:	d8c00d15 	stw	r3,52(sp)
  d07264:	00800c44 	movi	r2,49
  d07268:	27000044 	addi	fp,r4,1
  d0726c:	20800005 	stb	r2,0(r4)
  d07270:	003e8906 	br	d06c98 <_dtoa_r+0xbe4>
  d07274:	d8c00517 	ldw	r3,20(sp)
  d07278:	003bc206 	br	d06184 <_dtoa_r+0xd0>
  d0727c:	01803474 	movhi	r6,209
  d07280:	3184ad04 	addi	r6,r6,4788
  d07284:	30c00917 	ldw	r3,36(r6)
  d07288:	30800817 	ldw	r2,32(r6)
  d0728c:	d9001217 	ldw	r4,72(sp)
  d07290:	d9401317 	ldw	r5,76(sp)
  d07294:	180f883a 	mov	r7,r3
  d07298:	100d883a 	mov	r6,r2
  d0729c:	0d02f000 	call	d02f00 <__divdf3>
  d072a0:	948003cc 	andi	r18,r18,15
  d072a4:	058000c4 	movi	r22,3
  d072a8:	1029883a 	mov	r20,r2
  d072ac:	182b883a 	mov	r21,r3
  d072b0:	003c8906 	br	d064d8 <_dtoa_r+0x424>
  d072b4:	d9001017 	ldw	r4,64(sp)
  d072b8:	d9800917 	ldw	r6,36(sp)
  d072bc:	0025883a 	mov	r18,zero
  d072c0:	1105c83a 	sub	r2,r2,r4
  d072c4:	2089883a 	add	r4,r4,r2
  d072c8:	308d883a 	add	r6,r6,r2
  d072cc:	d9001015 	stw	r4,64(sp)
  d072d0:	d9800915 	stw	r6,36(sp)
  d072d4:	003e3206 	br	d06ba0 <_dtoa_r+0xaec>
  d072d8:	28800044 	addi	r2,r5,1
  d072dc:	27000044 	addi	fp,r4,1
  d072e0:	20800005 	stb	r2,0(r4)
  d072e4:	003e6c06 	br	d06c98 <_dtoa_r+0xbe4>
  d072e8:	d8800f17 	ldw	r2,60(sp)
  d072ec:	00bce016 	blt	zero,r2,d06670 <_dtoa_r+0x5bc>
  d072f0:	d9800f17 	ldw	r6,60(sp)
  d072f4:	303cc51e 	bne	r6,zero,d0660c <_dtoa_r+0x558>
  d072f8:	0005883a 	mov	r2,zero
  d072fc:	00d00534 	movhi	r3,16404
  d07300:	980b883a 	mov	r5,r19
  d07304:	180f883a 	mov	r7,r3
  d07308:	9009883a 	mov	r4,r18
  d0730c:	100d883a 	mov	r6,r2
  d07310:	0d0bb380 	call	d0bb38 <__muldf3>
  d07314:	180b883a 	mov	r5,r3
  d07318:	a80f883a 	mov	r7,r21
  d0731c:	1009883a 	mov	r4,r2
  d07320:	a00d883a 	mov	r6,r20
  d07324:	0d0c00c0 	call	d0c00c <__gedf2>
  d07328:	103cb80e 	bge	r2,zero,d0660c <_dtoa_r+0x558>
  d0732c:	0027883a 	mov	r19,zero
  d07330:	0025883a 	mov	r18,zero
  d07334:	003fc606 	br	d07250 <_dtoa_r+0x119c>
  d07338:	99400117 	ldw	r5,4(r19)
  d0733c:	d9001617 	ldw	r4,88(sp)
  d07340:	0d097c80 	call	d097c8 <_Balloc>
  d07344:	99800417 	ldw	r6,16(r19)
  d07348:	11000304 	addi	r4,r2,12
  d0734c:	99400304 	addi	r5,r19,12
  d07350:	318d883a 	add	r6,r6,r6
  d07354:	318d883a 	add	r6,r6,r6
  d07358:	31800204 	addi	r6,r6,8
  d0735c:	1023883a 	mov	r17,r2
  d07360:	0d090300 	call	d09030 <memcpy>
  d07364:	d9001617 	ldw	r4,88(sp)
  d07368:	880b883a 	mov	r5,r17
  d0736c:	01800044 	movi	r6,1
  d07370:	0d09b8c0 	call	d09b8c <__lshift>
  d07374:	100b883a 	mov	r5,r2
  d07378:	003d9c06 	br	d069ec <_dtoa_r+0x938>
  d0737c:	00800e44 	movi	r2,57
  d07380:	b8807026 	beq	r23,r2,d07544 <_dtoa_r+0x1490>
  d07384:	b8800044 	addi	r2,r23,1
  d07388:	b7000044 	addi	fp,r22,1
  d0738c:	b0800005 	stb	r2,0(r22)
  d07390:	003e4106 	br	d06c98 <_dtoa_r+0xbe4>
  d07394:	d8800317 	ldw	r2,12(sp)
  d07398:	01803474 	movhi	r6,209
  d0739c:	31847b04 	addi	r6,r6,4588
  d073a0:	b009883a 	mov	r4,r22
  d073a4:	100e90fa 	slli	r7,r2,3
  d073a8:	b80b883a 	mov	r5,r23
  d073ac:	398f883a 	add	r7,r7,r6
  d073b0:	38bffe17 	ldw	r2,-8(r7)
  d073b4:	d9800517 	ldw	r6,20(sp)
  d073b8:	38ffff17 	ldw	r3,-4(r7)
  d073bc:	37000044 	addi	fp,r6,1
  d073c0:	180f883a 	mov	r7,r3
  d073c4:	100d883a 	mov	r6,r2
  d073c8:	0d0bb380 	call	d0bb38 <__muldf3>
  d073cc:	a80b883a 	mov	r5,r21
  d073d0:	a009883a 	mov	r4,r20
  d073d4:	182f883a 	mov	r23,r3
  d073d8:	102d883a 	mov	r22,r2
  d073dc:	0d0c2140 	call	d0c214 <__fixdfsi>
  d073e0:	1009883a 	mov	r4,r2
  d073e4:	1027883a 	mov	r19,r2
  d073e8:	0d0c11c0 	call	d0c11c <__floatsidf>
  d073ec:	a80b883a 	mov	r5,r21
  d073f0:	a009883a 	mov	r4,r20
  d073f4:	180f883a 	mov	r7,r3
  d073f8:	100d883a 	mov	r6,r2
  d073fc:	0d02e0c0 	call	d02e0c <__subdf3>
  d07400:	180b883a 	mov	r5,r3
  d07404:	d8c00517 	ldw	r3,20(sp)
  d07408:	9cc00c04 	addi	r19,r19,48
  d0740c:	1009883a 	mov	r4,r2
  d07410:	1cc00005 	stb	r19,0(r3)
  d07414:	2021883a 	mov	r16,r4
  d07418:	d9000317 	ldw	r4,12(sp)
  d0741c:	00800044 	movi	r2,1
  d07420:	2823883a 	mov	r17,r5
  d07424:	20802226 	beq	r4,r2,d074b0 <_dtoa_r+0x13fc>
  d07428:	1029883a 	mov	r20,r2
  d0742c:	0005883a 	mov	r2,zero
  d07430:	00d00934 	movhi	r3,16420
  d07434:	180f883a 	mov	r7,r3
  d07438:	100d883a 	mov	r6,r2
  d0743c:	880b883a 	mov	r5,r17
  d07440:	8009883a 	mov	r4,r16
  d07444:	0d0bb380 	call	d0bb38 <__muldf3>
  d07448:	180b883a 	mov	r5,r3
  d0744c:	1009883a 	mov	r4,r2
  d07450:	1823883a 	mov	r17,r3
  d07454:	1021883a 	mov	r16,r2
  d07458:	0d0c2140 	call	d0c214 <__fixdfsi>
  d0745c:	1009883a 	mov	r4,r2
  d07460:	102b883a 	mov	r21,r2
  d07464:	0d0c11c0 	call	d0c11c <__floatsidf>
  d07468:	880b883a 	mov	r5,r17
  d0746c:	8009883a 	mov	r4,r16
  d07470:	180f883a 	mov	r7,r3
  d07474:	100d883a 	mov	r6,r2
  d07478:	0d02e0c0 	call	d02e0c <__subdf3>
  d0747c:	180b883a 	mov	r5,r3
  d07480:	d8c00517 	ldw	r3,20(sp)
  d07484:	1009883a 	mov	r4,r2
  d07488:	ad400c04 	addi	r21,r21,48
  d0748c:	1d05883a 	add	r2,r3,r20
  d07490:	15400005 	stb	r21,0(r2)
  d07494:	2021883a 	mov	r16,r4
  d07498:	d9000317 	ldw	r4,12(sp)
  d0749c:	a5000044 	addi	r20,r20,1
  d074a0:	2823883a 	mov	r17,r5
  d074a4:	a13fe11e 	bne	r20,r4,d0742c <_dtoa_r+0x1378>
  d074a8:	e505883a 	add	r2,fp,r20
  d074ac:	173fffc4 	addi	fp,r2,-1
  d074b0:	0025883a 	mov	r18,zero
  d074b4:	04cff834 	movhi	r19,16352
  d074b8:	b009883a 	mov	r4,r22
  d074bc:	b80b883a 	mov	r5,r23
  d074c0:	900d883a 	mov	r6,r18
  d074c4:	980f883a 	mov	r7,r19
  d074c8:	0d02e8c0 	call	d02e8c <__adddf3>
  d074cc:	180b883a 	mov	r5,r3
  d074d0:	1009883a 	mov	r4,r2
  d074d4:	800d883a 	mov	r6,r16
  d074d8:	880f883a 	mov	r7,r17
  d074dc:	0d0c0940 	call	d0c094 <__ltdf2>
  d074e0:	103cab16 	blt	r2,zero,d06790 <_dtoa_r+0x6dc>
  d074e4:	0009883a 	mov	r4,zero
  d074e8:	980b883a 	mov	r5,r19
  d074ec:	b80f883a 	mov	r7,r23
  d074f0:	b00d883a 	mov	r6,r22
  d074f4:	0d02e0c0 	call	d02e0c <__subdf3>
  d074f8:	180b883a 	mov	r5,r3
  d074fc:	880f883a 	mov	r7,r17
  d07500:	1009883a 	mov	r4,r2
  d07504:	800d883a 	mov	r6,r16
  d07508:	0d0bf840 	call	d0bf84 <__gtdf2>
  d0750c:	00bc470e 	bge	zero,r2,d0662c <_dtoa_r+0x578>
  d07510:	00c00c04 	movi	r3,48
  d07514:	e73fffc4 	addi	fp,fp,-1
  d07518:	e0800007 	ldb	r2,0(fp)
  d0751c:	10fffd26 	beq	r2,r3,d07514 <_dtoa_r+0x1460>
  d07520:	d9800417 	ldw	r6,16(sp)
  d07524:	e7000044 	addi	fp,fp,1
  d07528:	d9800d15 	stw	r6,52(sp)
  d0752c:	003cab06 	br	d067dc <_dtoa_r+0x728>
  d07530:	d8c00f17 	ldw	r3,60(sp)
  d07534:	d9001117 	ldw	r4,68(sp)
  d07538:	20e1c83a 	sub	r16,r4,r3
  d0753c:	0007883a 	mov	r3,zero
  d07540:	003d9b06 	br	d06bb0 <_dtoa_r+0xafc>
  d07544:	00800e44 	movi	r2,57
  d07548:	b0800005 	stb	r2,0(r22)
  d0754c:	b5800044 	addi	r22,r22,1
  d07550:	003dc106 	br	d06c58 <_dtoa_r+0xba4>
  d07554:	05800084 	movi	r22,2
  d07558:	003bf706 	br	d06538 <_dtoa_r+0x484>
  d0755c:	d9000f17 	ldw	r4,60(sp)
  d07560:	013c000e 	bge	zero,r4,d06564 <_dtoa_r+0x4b0>
  d07564:	d9800e17 	ldw	r6,56(sp)
  d07568:	01bc300e 	bge	zero,r6,d0662c <_dtoa_r+0x578>
  d0756c:	0005883a 	mov	r2,zero
  d07570:	00d00934 	movhi	r3,16420
  d07574:	a80b883a 	mov	r5,r21
  d07578:	180f883a 	mov	r7,r3
  d0757c:	a009883a 	mov	r4,r20
  d07580:	100d883a 	mov	r6,r2
  d07584:	0d0bb380 	call	d0bb38 <__muldf3>
  d07588:	b1000044 	addi	r4,r22,1
  d0758c:	1021883a 	mov	r16,r2
  d07590:	1823883a 	mov	r17,r3
  d07594:	0d0c11c0 	call	d0c11c <__floatsidf>
  d07598:	880b883a 	mov	r5,r17
  d0759c:	8009883a 	mov	r4,r16
  d075a0:	180f883a 	mov	r7,r3
  d075a4:	100d883a 	mov	r6,r2
  d075a8:	0d0bb380 	call	d0bb38 <__muldf3>
  d075ac:	0011883a 	mov	r8,zero
  d075b0:	02500734 	movhi	r9,16412
  d075b4:	180b883a 	mov	r5,r3
  d075b8:	480f883a 	mov	r7,r9
  d075bc:	1009883a 	mov	r4,r2
  d075c0:	400d883a 	mov	r6,r8
  d075c4:	0d02e8c0 	call	d02e8c <__adddf3>
  d075c8:	102d883a 	mov	r22,r2
  d075cc:	00bf3034 	movhi	r2,64704
  d075d0:	10ef883a 	add	r23,r2,r3
  d075d4:	d8800d17 	ldw	r2,52(sp)
  d075d8:	d8c00e17 	ldw	r3,56(sp)
  d075dc:	8029883a 	mov	r20,r16
  d075e0:	10bfffc4 	addi	r2,r2,-1
  d075e4:	882b883a 	mov	r21,r17
  d075e8:	d8800415 	stw	r2,16(sp)
  d075ec:	d8c00315 	stw	r3,12(sp)
  d075f0:	003e8306 	br	d07000 <_dtoa_r+0xf4c>
  d075f4:	d8800117 	ldw	r2,4(sp)
  d075f8:	dc001117 	ldw	r16,68(sp)
  d075fc:	dc801017 	ldw	r18,64(sp)
  d07600:	00c00d84 	movi	r3,54
  d07604:	1887c83a 	sub	r3,r3,r2
  d07608:	003d6906 	br	d06bb0 <_dtoa_r+0xafc>
  d0760c:	01800044 	movi	r6,1
  d07610:	3021883a 	mov	r16,r6
  d07614:	d9800f15 	stw	r6,60(sp)
  d07618:	d9802615 	stw	r6,152(sp)
  d0761c:	d9800e15 	stw	r6,56(sp)
  d07620:	003b9306 	br	d06470 <_dtoa_r+0x3bc>
  d07624:	b021883a 	mov	r16,r22
  d07628:	dd800f15 	stw	r22,60(sp)
  d0762c:	003b9006 	br	d06470 <_dtoa_r+0x3bc>
  d07630:	103e221e 	bne	r2,zero,d06ebc <_dtoa_r+0xe08>
  d07634:	b880004c 	andi	r2,r23,1
  d07638:	1005003a 	cmpeq	r2,r2,zero
  d0763c:	103e1f1e 	bne	r2,zero,d06ebc <_dtoa_r+0xe08>
  d07640:	003e1b06 	br	d06eb0 <_dtoa_r+0xdfc>
  d07644:	d9001617 	ldw	r4,88(sp)
  d07648:	980b883a 	mov	r5,r19
  d0764c:	01800284 	movi	r6,10
  d07650:	000f883a 	mov	r7,zero
  d07654:	0d09efc0 	call	d09efc <__multadd>
  d07658:	d8c00e17 	ldw	r3,56(sp)
  d0765c:	1027883a 	mov	r19,r2
  d07660:	d8c00f15 	stw	r3,60(sp)
  d07664:	003cd306 	br	d069b4 <_dtoa_r+0x900>

00d07668 <_fflush_r>:
  d07668:	defffb04 	addi	sp,sp,-20
  d0766c:	dcc00315 	stw	r19,12(sp)
  d07670:	dc800215 	stw	r18,8(sp)
  d07674:	dfc00415 	stw	ra,16(sp)
  d07678:	dc400115 	stw	r17,4(sp)
  d0767c:	dc000015 	stw	r16,0(sp)
  d07680:	2027883a 	mov	r19,r4
  d07684:	2825883a 	mov	r18,r5
  d07688:	20000226 	beq	r4,zero,d07694 <_fflush_r+0x2c>
  d0768c:	20800e17 	ldw	r2,56(r4)
  d07690:	10005626 	beq	r2,zero,d077ec <_fflush_r+0x184>
  d07694:	9100030b 	ldhu	r4,12(r18)
  d07698:	20ffffcc 	andi	r3,r4,65535
  d0769c:	18e0001c 	xori	r3,r3,32768
  d076a0:	18e00004 	addi	r3,r3,-32768
  d076a4:	1880020c 	andi	r2,r3,8
  d076a8:	1000261e 	bne	r2,zero,d07744 <_fflush_r+0xdc>
  d076ac:	90c00117 	ldw	r3,4(r18)
  d076b0:	20820014 	ori	r2,r4,2048
  d076b4:	9080030d 	sth	r2,12(r18)
  d076b8:	1009883a 	mov	r4,r2
  d076bc:	00c0400e 	bge	zero,r3,d077c0 <_fflush_r+0x158>
  d076c0:	92000a17 	ldw	r8,40(r18)
  d076c4:	40004026 	beq	r8,zero,d077c8 <_fflush_r+0x160>
  d076c8:	2084000c 	andi	r2,r4,4096
  d076cc:	10005326 	beq	r2,zero,d0781c <_fflush_r+0x1b4>
  d076d0:	94001417 	ldw	r16,80(r18)
  d076d4:	9080030b 	ldhu	r2,12(r18)
  d076d8:	1080010c 	andi	r2,r2,4
  d076dc:	1000481e 	bne	r2,zero,d07800 <_fflush_r+0x198>
  d076e0:	91400717 	ldw	r5,28(r18)
  d076e4:	9809883a 	mov	r4,r19
  d076e8:	800d883a 	mov	r6,r16
  d076ec:	000f883a 	mov	r7,zero
  d076f0:	403ee83a 	callr	r8
  d076f4:	8080261e 	bne	r16,r2,d07790 <_fflush_r+0x128>
  d076f8:	9080030b 	ldhu	r2,12(r18)
  d076fc:	91000417 	ldw	r4,16(r18)
  d07700:	90000115 	stw	zero,4(r18)
  d07704:	10bdffcc 	andi	r2,r2,63487
  d07708:	10ffffcc 	andi	r3,r2,65535
  d0770c:	18c4000c 	andi	r3,r3,4096
  d07710:	9080030d 	sth	r2,12(r18)
  d07714:	91000015 	stw	r4,0(r18)
  d07718:	18002b26 	beq	r3,zero,d077c8 <_fflush_r+0x160>
  d0771c:	0007883a 	mov	r3,zero
  d07720:	1805883a 	mov	r2,r3
  d07724:	94001415 	stw	r16,80(r18)
  d07728:	dfc00417 	ldw	ra,16(sp)
  d0772c:	dcc00317 	ldw	r19,12(sp)
  d07730:	dc800217 	ldw	r18,8(sp)
  d07734:	dc400117 	ldw	r17,4(sp)
  d07738:	dc000017 	ldw	r16,0(sp)
  d0773c:	dec00504 	addi	sp,sp,20
  d07740:	f800283a 	ret
  d07744:	94400417 	ldw	r17,16(r18)
  d07748:	88001f26 	beq	r17,zero,d077c8 <_fflush_r+0x160>
  d0774c:	90800017 	ldw	r2,0(r18)
  d07750:	18c000cc 	andi	r3,r3,3
  d07754:	94400015 	stw	r17,0(r18)
  d07758:	1461c83a 	sub	r16,r2,r17
  d0775c:	18002526 	beq	r3,zero,d077f4 <_fflush_r+0x18c>
  d07760:	0005883a 	mov	r2,zero
  d07764:	90800215 	stw	r2,8(r18)
  d07768:	0400170e 	bge	zero,r16,d077c8 <_fflush_r+0x160>
  d0776c:	90c00917 	ldw	r3,36(r18)
  d07770:	91400717 	ldw	r5,28(r18)
  d07774:	880d883a 	mov	r6,r17
  d07778:	800f883a 	mov	r7,r16
  d0777c:	9809883a 	mov	r4,r19
  d07780:	183ee83a 	callr	r3
  d07784:	88a3883a 	add	r17,r17,r2
  d07788:	80a1c83a 	sub	r16,r16,r2
  d0778c:	00bff616 	blt	zero,r2,d07768 <_fflush_r+0x100>
  d07790:	9080030b 	ldhu	r2,12(r18)
  d07794:	00ffffc4 	movi	r3,-1
  d07798:	10801014 	ori	r2,r2,64
  d0779c:	9080030d 	sth	r2,12(r18)
  d077a0:	1805883a 	mov	r2,r3
  d077a4:	dfc00417 	ldw	ra,16(sp)
  d077a8:	dcc00317 	ldw	r19,12(sp)
  d077ac:	dc800217 	ldw	r18,8(sp)
  d077b0:	dc400117 	ldw	r17,4(sp)
  d077b4:	dc000017 	ldw	r16,0(sp)
  d077b8:	dec00504 	addi	sp,sp,20
  d077bc:	f800283a 	ret
  d077c0:	90800f17 	ldw	r2,60(r18)
  d077c4:	00bfbe16 	blt	zero,r2,d076c0 <_fflush_r+0x58>
  d077c8:	0007883a 	mov	r3,zero
  d077cc:	1805883a 	mov	r2,r3
  d077d0:	dfc00417 	ldw	ra,16(sp)
  d077d4:	dcc00317 	ldw	r19,12(sp)
  d077d8:	dc800217 	ldw	r18,8(sp)
  d077dc:	dc400117 	ldw	r17,4(sp)
  d077e0:	dc000017 	ldw	r16,0(sp)
  d077e4:	dec00504 	addi	sp,sp,20
  d077e8:	f800283a 	ret
  d077ec:	0d079000 	call	d07900 <__sinit>
  d077f0:	003fa806 	br	d07694 <_fflush_r+0x2c>
  d077f4:	90800517 	ldw	r2,20(r18)
  d077f8:	90800215 	stw	r2,8(r18)
  d077fc:	003fda06 	br	d07768 <_fflush_r+0x100>
  d07800:	90800117 	ldw	r2,4(r18)
  d07804:	90c00c17 	ldw	r3,48(r18)
  d07808:	80a1c83a 	sub	r16,r16,r2
  d0780c:	183fb426 	beq	r3,zero,d076e0 <_fflush_r+0x78>
  d07810:	90800f17 	ldw	r2,60(r18)
  d07814:	80a1c83a 	sub	r16,r16,r2
  d07818:	003fb106 	br	d076e0 <_fflush_r+0x78>
  d0781c:	91400717 	ldw	r5,28(r18)
  d07820:	9809883a 	mov	r4,r19
  d07824:	000d883a 	mov	r6,zero
  d07828:	01c00044 	movi	r7,1
  d0782c:	403ee83a 	callr	r8
  d07830:	1021883a 	mov	r16,r2
  d07834:	00bfffc4 	movi	r2,-1
  d07838:	80800226 	beq	r16,r2,d07844 <_fflush_r+0x1dc>
  d0783c:	92000a17 	ldw	r8,40(r18)
  d07840:	003fa406 	br	d076d4 <_fflush_r+0x6c>
  d07844:	98c00017 	ldw	r3,0(r19)
  d07848:	00800744 	movi	r2,29
  d0784c:	18bfde26 	beq	r3,r2,d077c8 <_fflush_r+0x160>
  d07850:	9080030b 	ldhu	r2,12(r18)
  d07854:	8007883a 	mov	r3,r16
  d07858:	10801014 	ori	r2,r2,64
  d0785c:	9080030d 	sth	r2,12(r18)
  d07860:	003fcf06 	br	d077a0 <_fflush_r+0x138>

00d07864 <fflush>:
  d07864:	01403434 	movhi	r5,208
  d07868:	295d9a04 	addi	r5,r5,30312
  d0786c:	2007883a 	mov	r3,r4
  d07870:	20000526 	beq	r4,zero,d07888 <fflush+0x24>
  d07874:	00803474 	movhi	r2,209
  d07878:	108bf904 	addi	r2,r2,12260
  d0787c:	11000017 	ldw	r4,0(r2)
  d07880:	180b883a 	mov	r5,r3
  d07884:	0d076681 	jmpi	d07668 <_fflush_r>
  d07888:	00803474 	movhi	r2,209
  d0788c:	108bfa04 	addi	r2,r2,12264
  d07890:	11000017 	ldw	r4,0(r2)
  d07894:	0d084341 	jmpi	d08434 <_fwalk_reent>

00d07898 <std>:
  d07898:	00803474 	movhi	r2,209
  d0789c:	10aa4404 	addi	r2,r2,-22256
  d078a0:	20800b15 	stw	r2,44(r4)
  d078a4:	00803474 	movhi	r2,209
  d078a8:	10aa7f04 	addi	r2,r2,-22020
  d078ac:	20800815 	stw	r2,32(r4)
  d078b0:	00c03474 	movhi	r3,209
  d078b4:	18ea6004 	addi	r3,r3,-22144
  d078b8:	00803474 	movhi	r2,209
  d078bc:	10aa4604 	addi	r2,r2,-22248
  d078c0:	2140030d 	sth	r5,12(r4)
  d078c4:	2180038d 	sth	r6,14(r4)
  d078c8:	20c00915 	stw	r3,36(r4)
  d078cc:	20800a15 	stw	r2,40(r4)
  d078d0:	20000015 	stw	zero,0(r4)
  d078d4:	20000115 	stw	zero,4(r4)
  d078d8:	20000215 	stw	zero,8(r4)
  d078dc:	20000415 	stw	zero,16(r4)
  d078e0:	20000515 	stw	zero,20(r4)
  d078e4:	20000615 	stw	zero,24(r4)
  d078e8:	21000715 	stw	r4,28(r4)
  d078ec:	f800283a 	ret

00d078f0 <__sfp_lock_acquire>:
  d078f0:	f800283a 	ret

00d078f4 <__sfp_lock_release>:
  d078f4:	f800283a 	ret

00d078f8 <__sinit_lock_acquire>:
  d078f8:	f800283a 	ret

00d078fc <__sinit_lock_release>:
  d078fc:	f800283a 	ret

00d07900 <__sinit>:
  d07900:	20800e17 	ldw	r2,56(r4)
  d07904:	defffd04 	addi	sp,sp,-12
  d07908:	dc400115 	stw	r17,4(sp)
  d0790c:	dc000015 	stw	r16,0(sp)
  d07910:	dfc00215 	stw	ra,8(sp)
  d07914:	04400044 	movi	r17,1
  d07918:	01400104 	movi	r5,4
  d0791c:	000d883a 	mov	r6,zero
  d07920:	2021883a 	mov	r16,r4
  d07924:	2200bb04 	addi	r8,r4,748
  d07928:	200f883a 	mov	r7,r4
  d0792c:	10000526 	beq	r2,zero,d07944 <__sinit+0x44>
  d07930:	dfc00217 	ldw	ra,8(sp)
  d07934:	dc400117 	ldw	r17,4(sp)
  d07938:	dc000017 	ldw	r16,0(sp)
  d0793c:	dec00304 	addi	sp,sp,12
  d07940:	f800283a 	ret
  d07944:	21000117 	ldw	r4,4(r4)
  d07948:	00803434 	movhi	r2,208
  d0794c:	109e7904 	addi	r2,r2,31204
  d07950:	00c000c4 	movi	r3,3
  d07954:	80800f15 	stw	r2,60(r16)
  d07958:	80c0b915 	stw	r3,740(r16)
  d0795c:	8200ba15 	stw	r8,744(r16)
  d07960:	84400e15 	stw	r17,56(r16)
  d07964:	8000b815 	stw	zero,736(r16)
  d07968:	0d078980 	call	d07898 <std>
  d0796c:	81000217 	ldw	r4,8(r16)
  d07970:	880d883a 	mov	r6,r17
  d07974:	800f883a 	mov	r7,r16
  d07978:	01400284 	movi	r5,10
  d0797c:	0d078980 	call	d07898 <std>
  d07980:	81000317 	ldw	r4,12(r16)
  d07984:	800f883a 	mov	r7,r16
  d07988:	01400484 	movi	r5,18
  d0798c:	01800084 	movi	r6,2
  d07990:	dfc00217 	ldw	ra,8(sp)
  d07994:	dc400117 	ldw	r17,4(sp)
  d07998:	dc000017 	ldw	r16,0(sp)
  d0799c:	dec00304 	addi	sp,sp,12
  d079a0:	0d078981 	jmpi	d07898 <std>

00d079a4 <__fp_lock>:
  d079a4:	0005883a 	mov	r2,zero
  d079a8:	f800283a 	ret

00d079ac <__fp_unlock>:
  d079ac:	0005883a 	mov	r2,zero
  d079b0:	f800283a 	ret

00d079b4 <__fp_unlock_all>:
  d079b4:	00803474 	movhi	r2,209
  d079b8:	108bf904 	addi	r2,r2,12260
  d079bc:	11000017 	ldw	r4,0(r2)
  d079c0:	01403434 	movhi	r5,208
  d079c4:	295e6b04 	addi	r5,r5,31148
  d079c8:	0d084fc1 	jmpi	d084fc <_fwalk>

00d079cc <__fp_lock_all>:
  d079cc:	00803474 	movhi	r2,209
  d079d0:	108bf904 	addi	r2,r2,12260
  d079d4:	11000017 	ldw	r4,0(r2)
  d079d8:	01403434 	movhi	r5,208
  d079dc:	295e6904 	addi	r5,r5,31140
  d079e0:	0d084fc1 	jmpi	d084fc <_fwalk>

00d079e4 <_cleanup_r>:
  d079e4:	01403474 	movhi	r5,209
  d079e8:	296b7104 	addi	r5,r5,-21052
  d079ec:	0d084fc1 	jmpi	d084fc <_fwalk>

00d079f0 <_cleanup>:
  d079f0:	00803474 	movhi	r2,209
  d079f4:	108bfa04 	addi	r2,r2,12264
  d079f8:	11000017 	ldw	r4,0(r2)
  d079fc:	0d079e41 	jmpi	d079e4 <_cleanup_r>

00d07a00 <__sfmoreglue>:
  d07a00:	defffc04 	addi	sp,sp,-16
  d07a04:	dc400115 	stw	r17,4(sp)
  d07a08:	2c401724 	muli	r17,r5,92
  d07a0c:	dc800215 	stw	r18,8(sp)
  d07a10:	2825883a 	mov	r18,r5
  d07a14:	89400304 	addi	r5,r17,12
  d07a18:	dc000015 	stw	r16,0(sp)
  d07a1c:	dfc00315 	stw	ra,12(sp)
  d07a20:	0d0880c0 	call	d0880c <_malloc_r>
  d07a24:	0021883a 	mov	r16,zero
  d07a28:	880d883a 	mov	r6,r17
  d07a2c:	000b883a 	mov	r5,zero
  d07a30:	10000626 	beq	r2,zero,d07a4c <__sfmoreglue+0x4c>
  d07a34:	11000304 	addi	r4,r2,12
  d07a38:	14800115 	stw	r18,4(r2)
  d07a3c:	10000015 	stw	zero,0(r2)
  d07a40:	11000215 	stw	r4,8(r2)
  d07a44:	1021883a 	mov	r16,r2
  d07a48:	0d091b00 	call	d091b0 <memset>
  d07a4c:	8005883a 	mov	r2,r16
  d07a50:	dfc00317 	ldw	ra,12(sp)
  d07a54:	dc800217 	ldw	r18,8(sp)
  d07a58:	dc400117 	ldw	r17,4(sp)
  d07a5c:	dc000017 	ldw	r16,0(sp)
  d07a60:	dec00404 	addi	sp,sp,16
  d07a64:	f800283a 	ret

00d07a68 <__sfp>:
  d07a68:	defffd04 	addi	sp,sp,-12
  d07a6c:	00803474 	movhi	r2,209
  d07a70:	108bfa04 	addi	r2,r2,12264
  d07a74:	dc000015 	stw	r16,0(sp)
  d07a78:	14000017 	ldw	r16,0(r2)
  d07a7c:	dc400115 	stw	r17,4(sp)
  d07a80:	dfc00215 	stw	ra,8(sp)
  d07a84:	80800e17 	ldw	r2,56(r16)
  d07a88:	2023883a 	mov	r17,r4
  d07a8c:	10002626 	beq	r2,zero,d07b28 <__sfp+0xc0>
  d07a90:	8400b804 	addi	r16,r16,736
  d07a94:	80800117 	ldw	r2,4(r16)
  d07a98:	81000217 	ldw	r4,8(r16)
  d07a9c:	10ffffc4 	addi	r3,r2,-1
  d07aa0:	18000916 	blt	r3,zero,d07ac8 <__sfp+0x60>
  d07aa4:	2080030f 	ldh	r2,12(r4)
  d07aa8:	10000b26 	beq	r2,zero,d07ad8 <__sfp+0x70>
  d07aac:	017fffc4 	movi	r5,-1
  d07ab0:	00000206 	br	d07abc <__sfp+0x54>
  d07ab4:	2080030f 	ldh	r2,12(r4)
  d07ab8:	10000726 	beq	r2,zero,d07ad8 <__sfp+0x70>
  d07abc:	18ffffc4 	addi	r3,r3,-1
  d07ac0:	21001704 	addi	r4,r4,92
  d07ac4:	197ffb1e 	bne	r3,r5,d07ab4 <__sfp+0x4c>
  d07ac8:	80800017 	ldw	r2,0(r16)
  d07acc:	10001926 	beq	r2,zero,d07b34 <__sfp+0xcc>
  d07ad0:	1021883a 	mov	r16,r2
  d07ad4:	003fef06 	br	d07a94 <__sfp+0x2c>
  d07ad8:	00bfffc4 	movi	r2,-1
  d07adc:	00c00044 	movi	r3,1
  d07ae0:	2080038d 	sth	r2,14(r4)
  d07ae4:	20c0030d 	sth	r3,12(r4)
  d07ae8:	20000015 	stw	zero,0(r4)
  d07aec:	20000215 	stw	zero,8(r4)
  d07af0:	20000115 	stw	zero,4(r4)
  d07af4:	20000415 	stw	zero,16(r4)
  d07af8:	20000515 	stw	zero,20(r4)
  d07afc:	20000615 	stw	zero,24(r4)
  d07b00:	20000c15 	stw	zero,48(r4)
  d07b04:	20000d15 	stw	zero,52(r4)
  d07b08:	20001115 	stw	zero,68(r4)
  d07b0c:	20001215 	stw	zero,72(r4)
  d07b10:	2005883a 	mov	r2,r4
  d07b14:	dfc00217 	ldw	ra,8(sp)
  d07b18:	dc400117 	ldw	r17,4(sp)
  d07b1c:	dc000017 	ldw	r16,0(sp)
  d07b20:	dec00304 	addi	sp,sp,12
  d07b24:	f800283a 	ret
  d07b28:	8009883a 	mov	r4,r16
  d07b2c:	0d079000 	call	d07900 <__sinit>
  d07b30:	003fd706 	br	d07a90 <__sfp+0x28>
  d07b34:	8809883a 	mov	r4,r17
  d07b38:	01400104 	movi	r5,4
  d07b3c:	0d07a000 	call	d07a00 <__sfmoreglue>
  d07b40:	80800015 	stw	r2,0(r16)
  d07b44:	103fe21e 	bne	r2,zero,d07ad0 <__sfp+0x68>
  d07b48:	00800304 	movi	r2,12
  d07b4c:	0009883a 	mov	r4,zero
  d07b50:	88800015 	stw	r2,0(r17)
  d07b54:	003fee06 	br	d07b10 <__sfp+0xa8>

00d07b58 <_malloc_trim_r>:
  d07b58:	defffb04 	addi	sp,sp,-20
  d07b5c:	dcc00315 	stw	r19,12(sp)
  d07b60:	04c03474 	movhi	r19,209
  d07b64:	9cc61c04 	addi	r19,r19,6256
  d07b68:	dc800215 	stw	r18,8(sp)
  d07b6c:	dc400115 	stw	r17,4(sp)
  d07b70:	dc000015 	stw	r16,0(sp)
  d07b74:	2823883a 	mov	r17,r5
  d07b78:	2025883a 	mov	r18,r4
  d07b7c:	dfc00415 	stw	ra,16(sp)
  d07b80:	0d0cc500 	call	d0cc50 <__malloc_lock>
  d07b84:	98800217 	ldw	r2,8(r19)
  d07b88:	9009883a 	mov	r4,r18
  d07b8c:	000b883a 	mov	r5,zero
  d07b90:	10c00117 	ldw	r3,4(r2)
  d07b94:	00bfff04 	movi	r2,-4
  d07b98:	18a0703a 	and	r16,r3,r2
  d07b9c:	8463c83a 	sub	r17,r16,r17
  d07ba0:	8c43fbc4 	addi	r17,r17,4079
  d07ba4:	8822d33a 	srli	r17,r17,12
  d07ba8:	0083ffc4 	movi	r2,4095
  d07bac:	8c7fffc4 	addi	r17,r17,-1
  d07bb0:	8822933a 	slli	r17,r17,12
  d07bb4:	1440060e 	bge	r2,r17,d07bd0 <_malloc_trim_r+0x78>
  d07bb8:	0d0a8a00 	call	d0a8a0 <_sbrk_r>
  d07bbc:	98c00217 	ldw	r3,8(r19)
  d07bc0:	9009883a 	mov	r4,r18
  d07bc4:	044bc83a 	sub	r5,zero,r17
  d07bc8:	80c7883a 	add	r3,r16,r3
  d07bcc:	10c00926 	beq	r2,r3,d07bf4 <_malloc_trim_r+0x9c>
  d07bd0:	0d0cc700 	call	d0cc70 <__malloc_unlock>
  d07bd4:	0005883a 	mov	r2,zero
  d07bd8:	dfc00417 	ldw	ra,16(sp)
  d07bdc:	dcc00317 	ldw	r19,12(sp)
  d07be0:	dc800217 	ldw	r18,8(sp)
  d07be4:	dc400117 	ldw	r17,4(sp)
  d07be8:	dc000017 	ldw	r16,0(sp)
  d07bec:	dec00504 	addi	sp,sp,20
  d07bf0:	f800283a 	ret
  d07bf4:	9009883a 	mov	r4,r18
  d07bf8:	0d0a8a00 	call	d0a8a0 <_sbrk_r>
  d07bfc:	844dc83a 	sub	r6,r16,r17
  d07c00:	00ffffc4 	movi	r3,-1
  d07c04:	9009883a 	mov	r4,r18
  d07c08:	000b883a 	mov	r5,zero
  d07c0c:	01c03474 	movhi	r7,209
  d07c10:	39d31104 	addi	r7,r7,19524
  d07c14:	31800054 	ori	r6,r6,1
  d07c18:	10c00926 	beq	r2,r3,d07c40 <_malloc_trim_r+0xe8>
  d07c1c:	38800017 	ldw	r2,0(r7)
  d07c20:	98c00217 	ldw	r3,8(r19)
  d07c24:	9009883a 	mov	r4,r18
  d07c28:	1445c83a 	sub	r2,r2,r17
  d07c2c:	38800015 	stw	r2,0(r7)
  d07c30:	19800115 	stw	r6,4(r3)
  d07c34:	0d0cc700 	call	d0cc70 <__malloc_unlock>
  d07c38:	00800044 	movi	r2,1
  d07c3c:	003fe606 	br	d07bd8 <_malloc_trim_r+0x80>
  d07c40:	0d0a8a00 	call	d0a8a0 <_sbrk_r>
  d07c44:	99800217 	ldw	r6,8(r19)
  d07c48:	100f883a 	mov	r7,r2
  d07c4c:	9009883a 	mov	r4,r18
  d07c50:	1187c83a 	sub	r3,r2,r6
  d07c54:	008003c4 	movi	r2,15
  d07c58:	19400054 	ori	r5,r3,1
  d07c5c:	10ffdc0e 	bge	r2,r3,d07bd0 <_malloc_trim_r+0x78>
  d07c60:	00803474 	movhi	r2,209
  d07c64:	108bfe04 	addi	r2,r2,12280
  d07c68:	10c00017 	ldw	r3,0(r2)
  d07c6c:	00803474 	movhi	r2,209
  d07c70:	10931104 	addi	r2,r2,19524
  d07c74:	31400115 	stw	r5,4(r6)
  d07c78:	38c7c83a 	sub	r3,r7,r3
  d07c7c:	10c00015 	stw	r3,0(r2)
  d07c80:	003fd306 	br	d07bd0 <_malloc_trim_r+0x78>

00d07c84 <_free_r>:
  d07c84:	defffd04 	addi	sp,sp,-12
  d07c88:	dc400115 	stw	r17,4(sp)
  d07c8c:	dc000015 	stw	r16,0(sp)
  d07c90:	dfc00215 	stw	ra,8(sp)
  d07c94:	2821883a 	mov	r16,r5
  d07c98:	2023883a 	mov	r17,r4
  d07c9c:	28005a26 	beq	r5,zero,d07e08 <_free_r+0x184>
  d07ca0:	0d0cc500 	call	d0cc50 <__malloc_lock>
  d07ca4:	823ffe04 	addi	r8,r16,-8
  d07ca8:	41400117 	ldw	r5,4(r8)
  d07cac:	00bfff84 	movi	r2,-2
  d07cb0:	02803474 	movhi	r10,209
  d07cb4:	52861c04 	addi	r10,r10,6256
  d07cb8:	288e703a 	and	r7,r5,r2
  d07cbc:	41cd883a 	add	r6,r8,r7
  d07cc0:	30c00117 	ldw	r3,4(r6)
  d07cc4:	51000217 	ldw	r4,8(r10)
  d07cc8:	00bfff04 	movi	r2,-4
  d07ccc:	1892703a 	and	r9,r3,r2
  d07cd0:	5017883a 	mov	r11,r10
  d07cd4:	31006726 	beq	r6,r4,d07e74 <_free_r+0x1f0>
  d07cd8:	2880004c 	andi	r2,r5,1
  d07cdc:	1005003a 	cmpeq	r2,r2,zero
  d07ce0:	32400115 	stw	r9,4(r6)
  d07ce4:	10001a1e 	bne	r2,zero,d07d50 <_free_r+0xcc>
  d07ce8:	000b883a 	mov	r5,zero
  d07cec:	3247883a 	add	r3,r6,r9
  d07cf0:	18800117 	ldw	r2,4(r3)
  d07cf4:	1080004c 	andi	r2,r2,1
  d07cf8:	1000231e 	bne	r2,zero,d07d88 <_free_r+0x104>
  d07cfc:	280ac03a 	cmpne	r5,r5,zero
  d07d00:	3a4f883a 	add	r7,r7,r9
  d07d04:	2800451e 	bne	r5,zero,d07e1c <_free_r+0x198>
  d07d08:	31000217 	ldw	r4,8(r6)
  d07d0c:	00803474 	movhi	r2,209
  d07d10:	10861e04 	addi	r2,r2,6264
  d07d14:	20807b26 	beq	r4,r2,d07f04 <_free_r+0x280>
  d07d18:	30800317 	ldw	r2,12(r6)
  d07d1c:	3a07883a 	add	r3,r7,r8
  d07d20:	19c00015 	stw	r7,0(r3)
  d07d24:	11000215 	stw	r4,8(r2)
  d07d28:	20800315 	stw	r2,12(r4)
  d07d2c:	38800054 	ori	r2,r7,1
  d07d30:	40800115 	stw	r2,4(r8)
  d07d34:	28001a26 	beq	r5,zero,d07da0 <_free_r+0x11c>
  d07d38:	8809883a 	mov	r4,r17
  d07d3c:	dfc00217 	ldw	ra,8(sp)
  d07d40:	dc400117 	ldw	r17,4(sp)
  d07d44:	dc000017 	ldw	r16,0(sp)
  d07d48:	dec00304 	addi	sp,sp,12
  d07d4c:	0d0cc701 	jmpi	d0cc70 <__malloc_unlock>
  d07d50:	80bffe17 	ldw	r2,-8(r16)
  d07d54:	50c00204 	addi	r3,r10,8
  d07d58:	4091c83a 	sub	r8,r8,r2
  d07d5c:	41000217 	ldw	r4,8(r8)
  d07d60:	388f883a 	add	r7,r7,r2
  d07d64:	20c06126 	beq	r4,r3,d07eec <_free_r+0x268>
  d07d68:	40800317 	ldw	r2,12(r8)
  d07d6c:	3247883a 	add	r3,r6,r9
  d07d70:	000b883a 	mov	r5,zero
  d07d74:	11000215 	stw	r4,8(r2)
  d07d78:	20800315 	stw	r2,12(r4)
  d07d7c:	18800117 	ldw	r2,4(r3)
  d07d80:	1080004c 	andi	r2,r2,1
  d07d84:	103fdd26 	beq	r2,zero,d07cfc <_free_r+0x78>
  d07d88:	38800054 	ori	r2,r7,1
  d07d8c:	3a07883a 	add	r3,r7,r8
  d07d90:	280ac03a 	cmpne	r5,r5,zero
  d07d94:	40800115 	stw	r2,4(r8)
  d07d98:	19c00015 	stw	r7,0(r3)
  d07d9c:	283fe61e 	bne	r5,zero,d07d38 <_free_r+0xb4>
  d07da0:	00807fc4 	movi	r2,511
  d07da4:	11c01f2e 	bgeu	r2,r7,d07e24 <_free_r+0x1a0>
  d07da8:	3806d27a 	srli	r3,r7,9
  d07dac:	1800481e 	bne	r3,zero,d07ed0 <_free_r+0x24c>
  d07db0:	3804d0fa 	srli	r2,r7,3
  d07db4:	100690fa 	slli	r3,r2,3
  d07db8:	1acd883a 	add	r6,r3,r11
  d07dbc:	31400217 	ldw	r5,8(r6)
  d07dc0:	31405926 	beq	r6,r5,d07f28 <_free_r+0x2a4>
  d07dc4:	28800117 	ldw	r2,4(r5)
  d07dc8:	00ffff04 	movi	r3,-4
  d07dcc:	10c4703a 	and	r2,r2,r3
  d07dd0:	3880022e 	bgeu	r7,r2,d07ddc <_free_r+0x158>
  d07dd4:	29400217 	ldw	r5,8(r5)
  d07dd8:	317ffa1e 	bne	r6,r5,d07dc4 <_free_r+0x140>
  d07ddc:	29800317 	ldw	r6,12(r5)
  d07de0:	41800315 	stw	r6,12(r8)
  d07de4:	41400215 	stw	r5,8(r8)
  d07de8:	8809883a 	mov	r4,r17
  d07dec:	2a000315 	stw	r8,12(r5)
  d07df0:	32000215 	stw	r8,8(r6)
  d07df4:	dfc00217 	ldw	ra,8(sp)
  d07df8:	dc400117 	ldw	r17,4(sp)
  d07dfc:	dc000017 	ldw	r16,0(sp)
  d07e00:	dec00304 	addi	sp,sp,12
  d07e04:	0d0cc701 	jmpi	d0cc70 <__malloc_unlock>
  d07e08:	dfc00217 	ldw	ra,8(sp)
  d07e0c:	dc400117 	ldw	r17,4(sp)
  d07e10:	dc000017 	ldw	r16,0(sp)
  d07e14:	dec00304 	addi	sp,sp,12
  d07e18:	f800283a 	ret
  d07e1c:	31000217 	ldw	r4,8(r6)
  d07e20:	003fbd06 	br	d07d18 <_free_r+0x94>
  d07e24:	3806d0fa 	srli	r3,r7,3
  d07e28:	00800044 	movi	r2,1
  d07e2c:	51400117 	ldw	r5,4(r10)
  d07e30:	180890fa 	slli	r4,r3,3
  d07e34:	1807d0ba 	srai	r3,r3,2
  d07e38:	22c9883a 	add	r4,r4,r11
  d07e3c:	21800217 	ldw	r6,8(r4)
  d07e40:	10c4983a 	sll	r2,r2,r3
  d07e44:	41000315 	stw	r4,12(r8)
  d07e48:	41800215 	stw	r6,8(r8)
  d07e4c:	288ab03a 	or	r5,r5,r2
  d07e50:	22000215 	stw	r8,8(r4)
  d07e54:	8809883a 	mov	r4,r17
  d07e58:	51400115 	stw	r5,4(r10)
  d07e5c:	32000315 	stw	r8,12(r6)
  d07e60:	dfc00217 	ldw	ra,8(sp)
  d07e64:	dc400117 	ldw	r17,4(sp)
  d07e68:	dc000017 	ldw	r16,0(sp)
  d07e6c:	dec00304 	addi	sp,sp,12
  d07e70:	0d0cc701 	jmpi	d0cc70 <__malloc_unlock>
  d07e74:	2880004c 	andi	r2,r5,1
  d07e78:	3a4d883a 	add	r6,r7,r9
  d07e7c:	1000071e 	bne	r2,zero,d07e9c <_free_r+0x218>
  d07e80:	80bffe17 	ldw	r2,-8(r16)
  d07e84:	4091c83a 	sub	r8,r8,r2
  d07e88:	41000317 	ldw	r4,12(r8)
  d07e8c:	40c00217 	ldw	r3,8(r8)
  d07e90:	308d883a 	add	r6,r6,r2
  d07e94:	20c00215 	stw	r3,8(r4)
  d07e98:	19000315 	stw	r4,12(r3)
  d07e9c:	00803474 	movhi	r2,209
  d07ea0:	108bfd04 	addi	r2,r2,12276
  d07ea4:	11000017 	ldw	r4,0(r2)
  d07ea8:	30c00054 	ori	r3,r6,1
  d07eac:	52000215 	stw	r8,8(r10)
  d07eb0:	40c00115 	stw	r3,4(r8)
  d07eb4:	313fa036 	bltu	r6,r4,d07d38 <_free_r+0xb4>
  d07eb8:	00803474 	movhi	r2,209
  d07ebc:	10930704 	addi	r2,r2,19484
  d07ec0:	11400017 	ldw	r5,0(r2)
  d07ec4:	8809883a 	mov	r4,r17
  d07ec8:	0d07b580 	call	d07b58 <_malloc_trim_r>
  d07ecc:	003f9a06 	br	d07d38 <_free_r+0xb4>
  d07ed0:	00800104 	movi	r2,4
  d07ed4:	10c0072e 	bgeu	r2,r3,d07ef4 <_free_r+0x270>
  d07ed8:	00800504 	movi	r2,20
  d07edc:	10c01936 	bltu	r2,r3,d07f44 <_free_r+0x2c0>
  d07ee0:	188016c4 	addi	r2,r3,91
  d07ee4:	100690fa 	slli	r3,r2,3
  d07ee8:	003fb306 	br	d07db8 <_free_r+0x134>
  d07eec:	01400044 	movi	r5,1
  d07ef0:	003f7e06 	br	d07cec <_free_r+0x68>
  d07ef4:	3804d1ba 	srli	r2,r7,6
  d07ef8:	10800e04 	addi	r2,r2,56
  d07efc:	100690fa 	slli	r3,r2,3
  d07f00:	003fad06 	br	d07db8 <_free_r+0x134>
  d07f04:	22000315 	stw	r8,12(r4)
  d07f08:	22000215 	stw	r8,8(r4)
  d07f0c:	3a05883a 	add	r2,r7,r8
  d07f10:	38c00054 	ori	r3,r7,1
  d07f14:	11c00015 	stw	r7,0(r2)
  d07f18:	41000215 	stw	r4,8(r8)
  d07f1c:	40c00115 	stw	r3,4(r8)
  d07f20:	41000315 	stw	r4,12(r8)
  d07f24:	003f8406 	br	d07d38 <_free_r+0xb4>
  d07f28:	1005d0ba 	srai	r2,r2,2
  d07f2c:	00c00044 	movi	r3,1
  d07f30:	51000117 	ldw	r4,4(r10)
  d07f34:	1886983a 	sll	r3,r3,r2
  d07f38:	20c8b03a 	or	r4,r4,r3
  d07f3c:	51000115 	stw	r4,4(r10)
  d07f40:	003fa706 	br	d07de0 <_free_r+0x15c>
  d07f44:	00801504 	movi	r2,84
  d07f48:	10c00436 	bltu	r2,r3,d07f5c <_free_r+0x2d8>
  d07f4c:	3804d33a 	srli	r2,r7,12
  d07f50:	10801b84 	addi	r2,r2,110
  d07f54:	100690fa 	slli	r3,r2,3
  d07f58:	003f9706 	br	d07db8 <_free_r+0x134>
  d07f5c:	00805504 	movi	r2,340
  d07f60:	10c00436 	bltu	r2,r3,d07f74 <_free_r+0x2f0>
  d07f64:	3804d3fa 	srli	r2,r7,15
  d07f68:	10801dc4 	addi	r2,r2,119
  d07f6c:	100690fa 	slli	r3,r2,3
  d07f70:	003f9106 	br	d07db8 <_free_r+0x134>
  d07f74:	00815504 	movi	r2,1364
  d07f78:	10c0032e 	bgeu	r2,r3,d07f88 <_free_r+0x304>
  d07f7c:	00801f84 	movi	r2,126
  d07f80:	00c0fc04 	movi	r3,1008
  d07f84:	003f8c06 	br	d07db8 <_free_r+0x134>
  d07f88:	3804d4ba 	srli	r2,r7,18
  d07f8c:	10801f04 	addi	r2,r2,124
  d07f90:	100690fa 	slli	r3,r2,3
  d07f94:	003f8806 	br	d07db8 <_free_r+0x134>

00d07f98 <__sfvwrite_r>:
  d07f98:	30800217 	ldw	r2,8(r6)
  d07f9c:	defff504 	addi	sp,sp,-44
  d07fa0:	df000915 	stw	fp,36(sp)
  d07fa4:	dd800715 	stw	r22,28(sp)
  d07fa8:	dc800315 	stw	r18,12(sp)
  d07fac:	dfc00a15 	stw	ra,40(sp)
  d07fb0:	ddc00815 	stw	r23,32(sp)
  d07fb4:	dd400615 	stw	r21,24(sp)
  d07fb8:	dd000515 	stw	r20,20(sp)
  d07fbc:	dcc00415 	stw	r19,16(sp)
  d07fc0:	dc400215 	stw	r17,8(sp)
  d07fc4:	dc000115 	stw	r16,4(sp)
  d07fc8:	302d883a 	mov	r22,r6
  d07fcc:	2039883a 	mov	fp,r4
  d07fd0:	2825883a 	mov	r18,r5
  d07fd4:	10001c26 	beq	r2,zero,d08048 <__sfvwrite_r+0xb0>
  d07fd8:	29c0030b 	ldhu	r7,12(r5)
  d07fdc:	3880020c 	andi	r2,r7,8
  d07fe0:	10002726 	beq	r2,zero,d08080 <__sfvwrite_r+0xe8>
  d07fe4:	28800417 	ldw	r2,16(r5)
  d07fe8:	10002526 	beq	r2,zero,d08080 <__sfvwrite_r+0xe8>
  d07fec:	3880008c 	andi	r2,r7,2
  d07ff0:	b5400017 	ldw	r21,0(r22)
  d07ff4:	10002826 	beq	r2,zero,d08098 <__sfvwrite_r+0x100>
  d07ff8:	0021883a 	mov	r16,zero
  d07ffc:	0023883a 	mov	r17,zero
  d08000:	880d883a 	mov	r6,r17
  d08004:	e009883a 	mov	r4,fp
  d08008:	00810004 	movi	r2,1024
  d0800c:	80006e26 	beq	r16,zero,d081c8 <__sfvwrite_r+0x230>
  d08010:	800f883a 	mov	r7,r16
  d08014:	91400717 	ldw	r5,28(r18)
  d08018:	1400012e 	bgeu	r2,r16,d08020 <__sfvwrite_r+0x88>
  d0801c:	100f883a 	mov	r7,r2
  d08020:	90c00917 	ldw	r3,36(r18)
  d08024:	183ee83a 	callr	r3
  d08028:	1007883a 	mov	r3,r2
  d0802c:	80a1c83a 	sub	r16,r16,r2
  d08030:	88a3883a 	add	r17,r17,r2
  d08034:	00806d0e 	bge	zero,r2,d081ec <__sfvwrite_r+0x254>
  d08038:	b0800217 	ldw	r2,8(r22)
  d0803c:	10c5c83a 	sub	r2,r2,r3
  d08040:	b0800215 	stw	r2,8(r22)
  d08044:	103fee1e 	bne	r2,zero,d08000 <__sfvwrite_r+0x68>
  d08048:	0009883a 	mov	r4,zero
  d0804c:	2005883a 	mov	r2,r4
  d08050:	dfc00a17 	ldw	ra,40(sp)
  d08054:	df000917 	ldw	fp,36(sp)
  d08058:	ddc00817 	ldw	r23,32(sp)
  d0805c:	dd800717 	ldw	r22,28(sp)
  d08060:	dd400617 	ldw	r21,24(sp)
  d08064:	dd000517 	ldw	r20,20(sp)
  d08068:	dcc00417 	ldw	r19,16(sp)
  d0806c:	dc800317 	ldw	r18,12(sp)
  d08070:	dc400217 	ldw	r17,8(sp)
  d08074:	dc000117 	ldw	r16,4(sp)
  d08078:	dec00b04 	addi	sp,sp,44
  d0807c:	f800283a 	ret
  d08080:	0d05d600 	call	d05d60 <__swsetup_r>
  d08084:	1000e41e 	bne	r2,zero,d08418 <__sfvwrite_r+0x480>
  d08088:	91c0030b 	ldhu	r7,12(r18)
  d0808c:	b5400017 	ldw	r21,0(r22)
  d08090:	3880008c 	andi	r2,r7,2
  d08094:	103fd81e 	bne	r2,zero,d07ff8 <__sfvwrite_r+0x60>
  d08098:	3880004c 	andi	r2,r7,1
  d0809c:	1005003a 	cmpeq	r2,r2,zero
  d080a0:	10005726 	beq	r2,zero,d08200 <__sfvwrite_r+0x268>
  d080a4:	0029883a 	mov	r20,zero
  d080a8:	002f883a 	mov	r23,zero
  d080ac:	a0004226 	beq	r20,zero,d081b8 <__sfvwrite_r+0x220>
  d080b0:	3880800c 	andi	r2,r7,512
  d080b4:	94000217 	ldw	r16,8(r18)
  d080b8:	10008b26 	beq	r2,zero,d082e8 <__sfvwrite_r+0x350>
  d080bc:	800d883a 	mov	r6,r16
  d080c0:	a400a536 	bltu	r20,r16,d08358 <__sfvwrite_r+0x3c0>
  d080c4:	3881200c 	andi	r2,r7,1152
  d080c8:	10002726 	beq	r2,zero,d08168 <__sfvwrite_r+0x1d0>
  d080cc:	90800517 	ldw	r2,20(r18)
  d080d0:	92000417 	ldw	r8,16(r18)
  d080d4:	91400017 	ldw	r5,0(r18)
  d080d8:	1087883a 	add	r3,r2,r2
  d080dc:	1887883a 	add	r3,r3,r2
  d080e0:	1808d7fa 	srli	r4,r3,31
  d080e4:	2a21c83a 	sub	r16,r5,r8
  d080e8:	80800044 	addi	r2,r16,1
  d080ec:	20c9883a 	add	r4,r4,r3
  d080f0:	2027d07a 	srai	r19,r4,1
  d080f4:	a085883a 	add	r2,r20,r2
  d080f8:	980d883a 	mov	r6,r19
  d080fc:	9880022e 	bgeu	r19,r2,d08108 <__sfvwrite_r+0x170>
  d08100:	1027883a 	mov	r19,r2
  d08104:	100d883a 	mov	r6,r2
  d08108:	3881000c 	andi	r2,r7,1024
  d0810c:	1000b826 	beq	r2,zero,d083f0 <__sfvwrite_r+0x458>
  d08110:	300b883a 	mov	r5,r6
  d08114:	e009883a 	mov	r4,fp
  d08118:	0d0880c0 	call	d0880c <_malloc_r>
  d0811c:	10003126 	beq	r2,zero,d081e4 <__sfvwrite_r+0x24c>
  d08120:	91400417 	ldw	r5,16(r18)
  d08124:	1009883a 	mov	r4,r2
  d08128:	800d883a 	mov	r6,r16
  d0812c:	1023883a 	mov	r17,r2
  d08130:	0d090300 	call	d09030 <memcpy>
  d08134:	90c0030b 	ldhu	r3,12(r18)
  d08138:	00beffc4 	movi	r2,-1025
  d0813c:	1886703a 	and	r3,r3,r2
  d08140:	18c02014 	ori	r3,r3,128
  d08144:	90c0030d 	sth	r3,12(r18)
  d08148:	9c07c83a 	sub	r3,r19,r16
  d0814c:	8c05883a 	add	r2,r17,r16
  d08150:	a00d883a 	mov	r6,r20
  d08154:	a021883a 	mov	r16,r20
  d08158:	90800015 	stw	r2,0(r18)
  d0815c:	90c00215 	stw	r3,8(r18)
  d08160:	94400415 	stw	r17,16(r18)
  d08164:	94c00515 	stw	r19,20(r18)
  d08168:	91000017 	ldw	r4,0(r18)
  d0816c:	b80b883a 	mov	r5,r23
  d08170:	a023883a 	mov	r17,r20
  d08174:	0d090d00 	call	d090d0 <memmove>
  d08178:	90c00217 	ldw	r3,8(r18)
  d0817c:	90800017 	ldw	r2,0(r18)
  d08180:	a027883a 	mov	r19,r20
  d08184:	1c07c83a 	sub	r3,r3,r16
  d08188:	1405883a 	add	r2,r2,r16
  d0818c:	90c00215 	stw	r3,8(r18)
  d08190:	a021883a 	mov	r16,r20
  d08194:	90800015 	stw	r2,0(r18)
  d08198:	b0800217 	ldw	r2,8(r22)
  d0819c:	1405c83a 	sub	r2,r2,r16
  d081a0:	b0800215 	stw	r2,8(r22)
  d081a4:	103fa826 	beq	r2,zero,d08048 <__sfvwrite_r+0xb0>
  d081a8:	a469c83a 	sub	r20,r20,r17
  d081ac:	91c0030b 	ldhu	r7,12(r18)
  d081b0:	bcef883a 	add	r23,r23,r19
  d081b4:	a03fbe1e 	bne	r20,zero,d080b0 <__sfvwrite_r+0x118>
  d081b8:	adc00017 	ldw	r23,0(r21)
  d081bc:	ad000117 	ldw	r20,4(r21)
  d081c0:	ad400204 	addi	r21,r21,8
  d081c4:	003fb906 	br	d080ac <__sfvwrite_r+0x114>
  d081c8:	ac400017 	ldw	r17,0(r21)
  d081cc:	ac000117 	ldw	r16,4(r21)
  d081d0:	ad400204 	addi	r21,r21,8
  d081d4:	003f8a06 	br	d08000 <__sfvwrite_r+0x68>
  d081d8:	91400417 	ldw	r5,16(r18)
  d081dc:	e009883a 	mov	r4,fp
  d081e0:	0d07c840 	call	d07c84 <_free_r>
  d081e4:	00800304 	movi	r2,12
  d081e8:	e0800015 	stw	r2,0(fp)
  d081ec:	9080030b 	ldhu	r2,12(r18)
  d081f0:	013fffc4 	movi	r4,-1
  d081f4:	10801014 	ori	r2,r2,64
  d081f8:	9080030d 	sth	r2,12(r18)
  d081fc:	003f9306 	br	d0804c <__sfvwrite_r+0xb4>
  d08200:	0027883a 	mov	r19,zero
  d08204:	002f883a 	mov	r23,zero
  d08208:	d8000015 	stw	zero,0(sp)
  d0820c:	0029883a 	mov	r20,zero
  d08210:	98001e26 	beq	r19,zero,d0828c <__sfvwrite_r+0x2f4>
  d08214:	d8c00017 	ldw	r3,0(sp)
  d08218:	1804c03a 	cmpne	r2,r3,zero
  d0821c:	10005e26 	beq	r2,zero,d08398 <__sfvwrite_r+0x400>
  d08220:	9821883a 	mov	r16,r19
  d08224:	a4c0012e 	bgeu	r20,r19,d0822c <__sfvwrite_r+0x294>
  d08228:	a021883a 	mov	r16,r20
  d0822c:	91000017 	ldw	r4,0(r18)
  d08230:	90800417 	ldw	r2,16(r18)
  d08234:	91800217 	ldw	r6,8(r18)
  d08238:	91c00517 	ldw	r7,20(r18)
  d0823c:	1100022e 	bgeu	r2,r4,d08248 <__sfvwrite_r+0x2b0>
  d08240:	31e3883a 	add	r17,r6,r7
  d08244:	8c001616 	blt	r17,r16,d082a0 <__sfvwrite_r+0x308>
  d08248:	81c03816 	blt	r16,r7,d0832c <__sfvwrite_r+0x394>
  d0824c:	90c00917 	ldw	r3,36(r18)
  d08250:	91400717 	ldw	r5,28(r18)
  d08254:	e009883a 	mov	r4,fp
  d08258:	b80d883a 	mov	r6,r23
  d0825c:	183ee83a 	callr	r3
  d08260:	1023883a 	mov	r17,r2
  d08264:	00bfe10e 	bge	zero,r2,d081ec <__sfvwrite_r+0x254>
  d08268:	a469c83a 	sub	r20,r20,r17
  d0826c:	a0001826 	beq	r20,zero,d082d0 <__sfvwrite_r+0x338>
  d08270:	b0800217 	ldw	r2,8(r22)
  d08274:	1445c83a 	sub	r2,r2,r17
  d08278:	b0800215 	stw	r2,8(r22)
  d0827c:	103f7226 	beq	r2,zero,d08048 <__sfvwrite_r+0xb0>
  d08280:	9c67c83a 	sub	r19,r19,r17
  d08284:	bc6f883a 	add	r23,r23,r17
  d08288:	983fe21e 	bne	r19,zero,d08214 <__sfvwrite_r+0x27c>
  d0828c:	adc00017 	ldw	r23,0(r21)
  d08290:	acc00117 	ldw	r19,4(r21)
  d08294:	ad400204 	addi	r21,r21,8
  d08298:	d8000015 	stw	zero,0(sp)
  d0829c:	003fdc06 	br	d08210 <__sfvwrite_r+0x278>
  d082a0:	b80b883a 	mov	r5,r23
  d082a4:	880d883a 	mov	r6,r17
  d082a8:	0d090d00 	call	d090d0 <memmove>
  d082ac:	90c00017 	ldw	r3,0(r18)
  d082b0:	e009883a 	mov	r4,fp
  d082b4:	900b883a 	mov	r5,r18
  d082b8:	1c47883a 	add	r3,r3,r17
  d082bc:	90c00015 	stw	r3,0(r18)
  d082c0:	0d076680 	call	d07668 <_fflush_r>
  d082c4:	103fc91e 	bne	r2,zero,d081ec <__sfvwrite_r+0x254>
  d082c8:	a469c83a 	sub	r20,r20,r17
  d082cc:	a03fe81e 	bne	r20,zero,d08270 <__sfvwrite_r+0x2d8>
  d082d0:	e009883a 	mov	r4,fp
  d082d4:	900b883a 	mov	r5,r18
  d082d8:	0d076680 	call	d07668 <_fflush_r>
  d082dc:	103fc31e 	bne	r2,zero,d081ec <__sfvwrite_r+0x254>
  d082e0:	d8000015 	stw	zero,0(sp)
  d082e4:	003fe206 	br	d08270 <__sfvwrite_r+0x2d8>
  d082e8:	91000017 	ldw	r4,0(r18)
  d082ec:	90800417 	ldw	r2,16(r18)
  d082f0:	1100022e 	bgeu	r2,r4,d082fc <__sfvwrite_r+0x364>
  d082f4:	8023883a 	mov	r17,r16
  d082f8:	85003136 	bltu	r16,r20,d083c0 <__sfvwrite_r+0x428>
  d082fc:	91c00517 	ldw	r7,20(r18)
  d08300:	a1c01836 	bltu	r20,r7,d08364 <__sfvwrite_r+0x3cc>
  d08304:	90c00917 	ldw	r3,36(r18)
  d08308:	91400717 	ldw	r5,28(r18)
  d0830c:	e009883a 	mov	r4,fp
  d08310:	b80d883a 	mov	r6,r23
  d08314:	183ee83a 	callr	r3
  d08318:	1021883a 	mov	r16,r2
  d0831c:	00bfb30e 	bge	zero,r2,d081ec <__sfvwrite_r+0x254>
  d08320:	1023883a 	mov	r17,r2
  d08324:	1027883a 	mov	r19,r2
  d08328:	003f9b06 	br	d08198 <__sfvwrite_r+0x200>
  d0832c:	b80b883a 	mov	r5,r23
  d08330:	800d883a 	mov	r6,r16
  d08334:	0d090d00 	call	d090d0 <memmove>
  d08338:	90c00217 	ldw	r3,8(r18)
  d0833c:	90800017 	ldw	r2,0(r18)
  d08340:	8023883a 	mov	r17,r16
  d08344:	1c07c83a 	sub	r3,r3,r16
  d08348:	1405883a 	add	r2,r2,r16
  d0834c:	90c00215 	stw	r3,8(r18)
  d08350:	90800015 	stw	r2,0(r18)
  d08354:	003fc406 	br	d08268 <__sfvwrite_r+0x2d0>
  d08358:	a00d883a 	mov	r6,r20
  d0835c:	a021883a 	mov	r16,r20
  d08360:	003f8106 	br	d08168 <__sfvwrite_r+0x1d0>
  d08364:	b80b883a 	mov	r5,r23
  d08368:	a00d883a 	mov	r6,r20
  d0836c:	0d090d00 	call	d090d0 <memmove>
  d08370:	90c00217 	ldw	r3,8(r18)
  d08374:	90800017 	ldw	r2,0(r18)
  d08378:	a021883a 	mov	r16,r20
  d0837c:	1d07c83a 	sub	r3,r3,r20
  d08380:	1505883a 	add	r2,r2,r20
  d08384:	a023883a 	mov	r17,r20
  d08388:	a027883a 	mov	r19,r20
  d0838c:	90c00215 	stw	r3,8(r18)
  d08390:	90800015 	stw	r2,0(r18)
  d08394:	003f8006 	br	d08198 <__sfvwrite_r+0x200>
  d08398:	b809883a 	mov	r4,r23
  d0839c:	01400284 	movi	r5,10
  d083a0:	980d883a 	mov	r6,r19
  d083a4:	0d08f4c0 	call	d08f4c <memchr>
  d083a8:	10001726 	beq	r2,zero,d08408 <__sfvwrite_r+0x470>
  d083ac:	15c5c83a 	sub	r2,r2,r23
  d083b0:	15000044 	addi	r20,r2,1
  d083b4:	00800044 	movi	r2,1
  d083b8:	d8800015 	stw	r2,0(sp)
  d083bc:	003f9806 	br	d08220 <__sfvwrite_r+0x288>
  d083c0:	b80b883a 	mov	r5,r23
  d083c4:	800d883a 	mov	r6,r16
  d083c8:	0d090d00 	call	d090d0 <memmove>
  d083cc:	90c00017 	ldw	r3,0(r18)
  d083d0:	e009883a 	mov	r4,fp
  d083d4:	900b883a 	mov	r5,r18
  d083d8:	1c07883a 	add	r3,r3,r16
  d083dc:	90c00015 	stw	r3,0(r18)
  d083e0:	8027883a 	mov	r19,r16
  d083e4:	0d076680 	call	d07668 <_fflush_r>
  d083e8:	103f6b26 	beq	r2,zero,d08198 <__sfvwrite_r+0x200>
  d083ec:	003f7f06 	br	d081ec <__sfvwrite_r+0x254>
  d083f0:	400b883a 	mov	r5,r8
  d083f4:	e009883a 	mov	r4,fp
  d083f8:	0d0a23c0 	call	d0a23c <_realloc_r>
  d083fc:	103f7626 	beq	r2,zero,d081d8 <__sfvwrite_r+0x240>
  d08400:	1023883a 	mov	r17,r2
  d08404:	003f5006 	br	d08148 <__sfvwrite_r+0x1b0>
  d08408:	00c00044 	movi	r3,1
  d0840c:	9d000044 	addi	r20,r19,1
  d08410:	d8c00015 	stw	r3,0(sp)
  d08414:	003f8206 	br	d08220 <__sfvwrite_r+0x288>
  d08418:	9080030b 	ldhu	r2,12(r18)
  d0841c:	00c00244 	movi	r3,9
  d08420:	013fffc4 	movi	r4,-1
  d08424:	10801014 	ori	r2,r2,64
  d08428:	9080030d 	sth	r2,12(r18)
  d0842c:	e0c00015 	stw	r3,0(fp)
  d08430:	003f0606 	br	d0804c <__sfvwrite_r+0xb4>

00d08434 <_fwalk_reent>:
  d08434:	defff704 	addi	sp,sp,-36
  d08438:	dcc00315 	stw	r19,12(sp)
  d0843c:	24c0b804 	addi	r19,r4,736
  d08440:	dd800615 	stw	r22,24(sp)
  d08444:	dd400515 	stw	r21,20(sp)
  d08448:	dfc00815 	stw	ra,32(sp)
  d0844c:	ddc00715 	stw	r23,28(sp)
  d08450:	dd000415 	stw	r20,16(sp)
  d08454:	dc800215 	stw	r18,8(sp)
  d08458:	dc400115 	stw	r17,4(sp)
  d0845c:	dc000015 	stw	r16,0(sp)
  d08460:	202b883a 	mov	r21,r4
  d08464:	282d883a 	mov	r22,r5
  d08468:	0d078f00 	call	d078f0 <__sfp_lock_acquire>
  d0846c:	98002126 	beq	r19,zero,d084f4 <_fwalk_reent+0xc0>
  d08470:	002f883a 	mov	r23,zero
  d08474:	9c800117 	ldw	r18,4(r19)
  d08478:	9c000217 	ldw	r16,8(r19)
  d0847c:	90bfffc4 	addi	r2,r18,-1
  d08480:	10000d16 	blt	r2,zero,d084b8 <_fwalk_reent+0x84>
  d08484:	0023883a 	mov	r17,zero
  d08488:	053fffc4 	movi	r20,-1
  d0848c:	8080030f 	ldh	r2,12(r16)
  d08490:	8c400044 	addi	r17,r17,1
  d08494:	10000626 	beq	r2,zero,d084b0 <_fwalk_reent+0x7c>
  d08498:	8080038f 	ldh	r2,14(r16)
  d0849c:	800b883a 	mov	r5,r16
  d084a0:	a809883a 	mov	r4,r21
  d084a4:	15000226 	beq	r2,r20,d084b0 <_fwalk_reent+0x7c>
  d084a8:	b03ee83a 	callr	r22
  d084ac:	b8aeb03a 	or	r23,r23,r2
  d084b0:	84001704 	addi	r16,r16,92
  d084b4:	947ff51e 	bne	r18,r17,d0848c <_fwalk_reent+0x58>
  d084b8:	9cc00017 	ldw	r19,0(r19)
  d084bc:	983fed1e 	bne	r19,zero,d08474 <_fwalk_reent+0x40>
  d084c0:	0d078f40 	call	d078f4 <__sfp_lock_release>
  d084c4:	b805883a 	mov	r2,r23
  d084c8:	dfc00817 	ldw	ra,32(sp)
  d084cc:	ddc00717 	ldw	r23,28(sp)
  d084d0:	dd800617 	ldw	r22,24(sp)
  d084d4:	dd400517 	ldw	r21,20(sp)
  d084d8:	dd000417 	ldw	r20,16(sp)
  d084dc:	dcc00317 	ldw	r19,12(sp)
  d084e0:	dc800217 	ldw	r18,8(sp)
  d084e4:	dc400117 	ldw	r17,4(sp)
  d084e8:	dc000017 	ldw	r16,0(sp)
  d084ec:	dec00904 	addi	sp,sp,36
  d084f0:	f800283a 	ret
  d084f4:	002f883a 	mov	r23,zero
  d084f8:	003ff106 	br	d084c0 <_fwalk_reent+0x8c>

00d084fc <_fwalk>:
  d084fc:	defff804 	addi	sp,sp,-32
  d08500:	dcc00315 	stw	r19,12(sp)
  d08504:	24c0b804 	addi	r19,r4,736
  d08508:	dd400515 	stw	r21,20(sp)
  d0850c:	dfc00715 	stw	ra,28(sp)
  d08510:	dd800615 	stw	r22,24(sp)
  d08514:	dd000415 	stw	r20,16(sp)
  d08518:	dc800215 	stw	r18,8(sp)
  d0851c:	dc400115 	stw	r17,4(sp)
  d08520:	dc000015 	stw	r16,0(sp)
  d08524:	282b883a 	mov	r21,r5
  d08528:	0d078f00 	call	d078f0 <__sfp_lock_acquire>
  d0852c:	98001f26 	beq	r19,zero,d085ac <_fwalk+0xb0>
  d08530:	002d883a 	mov	r22,zero
  d08534:	9c800117 	ldw	r18,4(r19)
  d08538:	9c000217 	ldw	r16,8(r19)
  d0853c:	90bfffc4 	addi	r2,r18,-1
  d08540:	10000c16 	blt	r2,zero,d08574 <_fwalk+0x78>
  d08544:	0023883a 	mov	r17,zero
  d08548:	053fffc4 	movi	r20,-1
  d0854c:	8080030f 	ldh	r2,12(r16)
  d08550:	8c400044 	addi	r17,r17,1
  d08554:	10000526 	beq	r2,zero,d0856c <_fwalk+0x70>
  d08558:	8080038f 	ldh	r2,14(r16)
  d0855c:	8009883a 	mov	r4,r16
  d08560:	15000226 	beq	r2,r20,d0856c <_fwalk+0x70>
  d08564:	a83ee83a 	callr	r21
  d08568:	b0acb03a 	or	r22,r22,r2
  d0856c:	84001704 	addi	r16,r16,92
  d08570:	947ff61e 	bne	r18,r17,d0854c <_fwalk+0x50>
  d08574:	9cc00017 	ldw	r19,0(r19)
  d08578:	983fee1e 	bne	r19,zero,d08534 <_fwalk+0x38>
  d0857c:	0d078f40 	call	d078f4 <__sfp_lock_release>
  d08580:	b005883a 	mov	r2,r22
  d08584:	dfc00717 	ldw	ra,28(sp)
  d08588:	dd800617 	ldw	r22,24(sp)
  d0858c:	dd400517 	ldw	r21,20(sp)
  d08590:	dd000417 	ldw	r20,16(sp)
  d08594:	dcc00317 	ldw	r19,12(sp)
  d08598:	dc800217 	ldw	r18,8(sp)
  d0859c:	dc400117 	ldw	r17,4(sp)
  d085a0:	dc000017 	ldw	r16,0(sp)
  d085a4:	dec00804 	addi	sp,sp,32
  d085a8:	f800283a 	ret
  d085ac:	002d883a 	mov	r22,zero
  d085b0:	003ff206 	br	d0857c <_fwalk+0x80>

00d085b4 <__locale_charset>:
  d085b4:	d0a00b17 	ldw	r2,-32724(gp)
  d085b8:	f800283a 	ret

00d085bc <_localeconv_r>:
  d085bc:	00803474 	movhi	r2,209
  d085c0:	10846f04 	addi	r2,r2,4540
  d085c4:	f800283a 	ret

00d085c8 <localeconv>:
  d085c8:	00803474 	movhi	r2,209
  d085cc:	108bf904 	addi	r2,r2,12260
  d085d0:	11000017 	ldw	r4,0(r2)
  d085d4:	0d085bc1 	jmpi	d085bc <_localeconv_r>

00d085d8 <_setlocale_r>:
  d085d8:	defffc04 	addi	sp,sp,-16
  d085dc:	00c03474 	movhi	r3,209
  d085e0:	18c44704 	addi	r3,r3,4380
  d085e4:	dc800215 	stw	r18,8(sp)
  d085e8:	dc400115 	stw	r17,4(sp)
  d085ec:	dc000015 	stw	r16,0(sp)
  d085f0:	2023883a 	mov	r17,r4
  d085f4:	2825883a 	mov	r18,r5
  d085f8:	dfc00315 	stw	ra,12(sp)
  d085fc:	3021883a 	mov	r16,r6
  d08600:	3009883a 	mov	r4,r6
  d08604:	180b883a 	mov	r5,r3
  d08608:	30000926 	beq	r6,zero,d08630 <_setlocale_r+0x58>
  d0860c:	0d0aa5c0 	call	d0aa5c <strcmp>
  d08610:	8009883a 	mov	r4,r16
  d08614:	01403474 	movhi	r5,209
  d08618:	29445804 	addi	r5,r5,4448
  d0861c:	10000b1e 	bne	r2,zero,d0864c <_setlocale_r+0x74>
  d08620:	8c000d15 	stw	r16,52(r17)
  d08624:	8c800c15 	stw	r18,48(r17)
  d08628:	00c03474 	movhi	r3,209
  d0862c:	18c44704 	addi	r3,r3,4380
  d08630:	1805883a 	mov	r2,r3
  d08634:	dfc00317 	ldw	ra,12(sp)
  d08638:	dc800217 	ldw	r18,8(sp)
  d0863c:	dc400117 	ldw	r17,4(sp)
  d08640:	dc000017 	ldw	r16,0(sp)
  d08644:	dec00404 	addi	sp,sp,16
  d08648:	f800283a 	ret
  d0864c:	0d0aa5c0 	call	d0aa5c <strcmp>
  d08650:	0007883a 	mov	r3,zero
  d08654:	103ff226 	beq	r2,zero,d08620 <_setlocale_r+0x48>
  d08658:	003ff506 	br	d08630 <_setlocale_r+0x58>

00d0865c <setlocale>:
  d0865c:	01803474 	movhi	r6,209
  d08660:	318bf904 	addi	r6,r6,12260
  d08664:	2007883a 	mov	r3,r4
  d08668:	31000017 	ldw	r4,0(r6)
  d0866c:	280d883a 	mov	r6,r5
  d08670:	180b883a 	mov	r5,r3
  d08674:	0d085d81 	jmpi	d085d8 <_setlocale_r>

00d08678 <__smakebuf_r>:
  d08678:	2880030b 	ldhu	r2,12(r5)
  d0867c:	deffed04 	addi	sp,sp,-76
  d08680:	dc401015 	stw	r17,64(sp)
  d08684:	1080008c 	andi	r2,r2,2
  d08688:	dc000f15 	stw	r16,60(sp)
  d0868c:	dfc01215 	stw	ra,72(sp)
  d08690:	dc801115 	stw	r18,68(sp)
  d08694:	2821883a 	mov	r16,r5
  d08698:	2023883a 	mov	r17,r4
  d0869c:	10000b26 	beq	r2,zero,d086cc <__smakebuf_r+0x54>
  d086a0:	28c010c4 	addi	r3,r5,67
  d086a4:	00800044 	movi	r2,1
  d086a8:	28800515 	stw	r2,20(r5)
  d086ac:	28c00415 	stw	r3,16(r5)
  d086b0:	28c00015 	stw	r3,0(r5)
  d086b4:	dfc01217 	ldw	ra,72(sp)
  d086b8:	dc801117 	ldw	r18,68(sp)
  d086bc:	dc401017 	ldw	r17,64(sp)
  d086c0:	dc000f17 	ldw	r16,60(sp)
  d086c4:	dec01304 	addi	sp,sp,76
  d086c8:	f800283a 	ret
  d086cc:	2940038f 	ldh	r5,14(r5)
  d086d0:	28002116 	blt	r5,zero,d08758 <__smakebuf_r+0xe0>
  d086d4:	d80d883a 	mov	r6,sp
  d086d8:	0d0add80 	call	d0add8 <_fstat_r>
  d086dc:	10001e16 	blt	r2,zero,d08758 <__smakebuf_r+0xe0>
  d086e0:	d8800117 	ldw	r2,4(sp)
  d086e4:	00e00014 	movui	r3,32768
  d086e8:	113c000c 	andi	r4,r2,61440
  d086ec:	20c03126 	beq	r4,r3,d087b4 <__smakebuf_r+0x13c>
  d086f0:	8080030b 	ldhu	r2,12(r16)
  d086f4:	00c80004 	movi	r3,8192
  d086f8:	10820014 	ori	r2,r2,2048
  d086fc:	8080030d 	sth	r2,12(r16)
  d08700:	20c01e26 	beq	r4,r3,d0877c <__smakebuf_r+0x104>
  d08704:	04810004 	movi	r18,1024
  d08708:	8809883a 	mov	r4,r17
  d0870c:	900b883a 	mov	r5,r18
  d08710:	0d0880c0 	call	d0880c <_malloc_r>
  d08714:	1009883a 	mov	r4,r2
  d08718:	10003126 	beq	r2,zero,d087e0 <__smakebuf_r+0x168>
  d0871c:	80c0030b 	ldhu	r3,12(r16)
  d08720:	00803434 	movhi	r2,208
  d08724:	109e7904 	addi	r2,r2,31204
  d08728:	88800f15 	stw	r2,60(r17)
  d0872c:	18c02014 	ori	r3,r3,128
  d08730:	84800515 	stw	r18,20(r16)
  d08734:	80c0030d 	sth	r3,12(r16)
  d08738:	81000415 	stw	r4,16(r16)
  d0873c:	81000015 	stw	r4,0(r16)
  d08740:	dfc01217 	ldw	ra,72(sp)
  d08744:	dc801117 	ldw	r18,68(sp)
  d08748:	dc401017 	ldw	r17,64(sp)
  d0874c:	dc000f17 	ldw	r16,60(sp)
  d08750:	dec01304 	addi	sp,sp,76
  d08754:	f800283a 	ret
  d08758:	80c0030b 	ldhu	r3,12(r16)
  d0875c:	1880200c 	andi	r2,r3,128
  d08760:	10000426 	beq	r2,zero,d08774 <__smakebuf_r+0xfc>
  d08764:	04801004 	movi	r18,64
  d08768:	18820014 	ori	r2,r3,2048
  d0876c:	8080030d 	sth	r2,12(r16)
  d08770:	003fe506 	br	d08708 <__smakebuf_r+0x90>
  d08774:	04810004 	movi	r18,1024
  d08778:	003ffb06 	br	d08768 <__smakebuf_r+0xf0>
  d0877c:	8140038f 	ldh	r5,14(r16)
  d08780:	8809883a 	mov	r4,r17
  d08784:	0d0ae4c0 	call	d0ae4c <_isatty_r>
  d08788:	103fde26 	beq	r2,zero,d08704 <__smakebuf_r+0x8c>
  d0878c:	8080030b 	ldhu	r2,12(r16)
  d08790:	80c010c4 	addi	r3,r16,67
  d08794:	04810004 	movi	r18,1024
  d08798:	10800054 	ori	r2,r2,1
  d0879c:	8080030d 	sth	r2,12(r16)
  d087a0:	00800044 	movi	r2,1
  d087a4:	80c00415 	stw	r3,16(r16)
  d087a8:	80800515 	stw	r2,20(r16)
  d087ac:	80c00015 	stw	r3,0(r16)
  d087b0:	003fd506 	br	d08708 <__smakebuf_r+0x90>
  d087b4:	80c00a17 	ldw	r3,40(r16)
  d087b8:	00803474 	movhi	r2,209
  d087bc:	10aa4604 	addi	r2,r2,-22248
  d087c0:	18bfcb1e 	bne	r3,r2,d086f0 <__smakebuf_r+0x78>
  d087c4:	8080030b 	ldhu	r2,12(r16)
  d087c8:	00c10004 	movi	r3,1024
  d087cc:	1825883a 	mov	r18,r3
  d087d0:	10c4b03a 	or	r2,r2,r3
  d087d4:	8080030d 	sth	r2,12(r16)
  d087d8:	80c01315 	stw	r3,76(r16)
  d087dc:	003fca06 	br	d08708 <__smakebuf_r+0x90>
  d087e0:	8100030b 	ldhu	r4,12(r16)
  d087e4:	2080800c 	andi	r2,r4,512
  d087e8:	103fb21e 	bne	r2,zero,d086b4 <__smakebuf_r+0x3c>
  d087ec:	80c010c4 	addi	r3,r16,67
  d087f0:	21000094 	ori	r4,r4,2
  d087f4:	00800044 	movi	r2,1
  d087f8:	80800515 	stw	r2,20(r16)
  d087fc:	8100030d 	sth	r4,12(r16)
  d08800:	80c00415 	stw	r3,16(r16)
  d08804:	80c00015 	stw	r3,0(r16)
  d08808:	003faa06 	br	d086b4 <__smakebuf_r+0x3c>

00d0880c <_malloc_r>:
  d0880c:	defff604 	addi	sp,sp,-40
  d08810:	28c002c4 	addi	r3,r5,11
  d08814:	00800584 	movi	r2,22
  d08818:	dc800215 	stw	r18,8(sp)
  d0881c:	dfc00915 	stw	ra,36(sp)
  d08820:	df000815 	stw	fp,32(sp)
  d08824:	ddc00715 	stw	r23,28(sp)
  d08828:	dd800615 	stw	r22,24(sp)
  d0882c:	dd400515 	stw	r21,20(sp)
  d08830:	dd000415 	stw	r20,16(sp)
  d08834:	dcc00315 	stw	r19,12(sp)
  d08838:	dc400115 	stw	r17,4(sp)
  d0883c:	dc000015 	stw	r16,0(sp)
  d08840:	2025883a 	mov	r18,r4
  d08844:	10c01236 	bltu	r2,r3,d08890 <_malloc_r+0x84>
  d08848:	04400404 	movi	r17,16
  d0884c:	8940142e 	bgeu	r17,r5,d088a0 <_malloc_r+0x94>
  d08850:	00800304 	movi	r2,12
  d08854:	0007883a 	mov	r3,zero
  d08858:	90800015 	stw	r2,0(r18)
  d0885c:	1805883a 	mov	r2,r3
  d08860:	dfc00917 	ldw	ra,36(sp)
  d08864:	df000817 	ldw	fp,32(sp)
  d08868:	ddc00717 	ldw	r23,28(sp)
  d0886c:	dd800617 	ldw	r22,24(sp)
  d08870:	dd400517 	ldw	r21,20(sp)
  d08874:	dd000417 	ldw	r20,16(sp)
  d08878:	dcc00317 	ldw	r19,12(sp)
  d0887c:	dc800217 	ldw	r18,8(sp)
  d08880:	dc400117 	ldw	r17,4(sp)
  d08884:	dc000017 	ldw	r16,0(sp)
  d08888:	dec00a04 	addi	sp,sp,40
  d0888c:	f800283a 	ret
  d08890:	00bffe04 	movi	r2,-8
  d08894:	18a2703a 	and	r17,r3,r2
  d08898:	883fed16 	blt	r17,zero,d08850 <_malloc_r+0x44>
  d0889c:	897fec36 	bltu	r17,r5,d08850 <_malloc_r+0x44>
  d088a0:	9009883a 	mov	r4,r18
  d088a4:	0d0cc500 	call	d0cc50 <__malloc_lock>
  d088a8:	00807dc4 	movi	r2,503
  d088ac:	14402b2e 	bgeu	r2,r17,d0895c <_malloc_r+0x150>
  d088b0:	8806d27a 	srli	r3,r17,9
  d088b4:	18003f1e 	bne	r3,zero,d089b4 <_malloc_r+0x1a8>
  d088b8:	880cd0fa 	srli	r6,r17,3
  d088bc:	300490fa 	slli	r2,r6,3
  d088c0:	02c03474 	movhi	r11,209
  d088c4:	5ac61c04 	addi	r11,r11,6256
  d088c8:	12cb883a 	add	r5,r2,r11
  d088cc:	2c000317 	ldw	r16,12(r5)
  d088d0:	580f883a 	mov	r7,r11
  d088d4:	2c00041e 	bne	r5,r16,d088e8 <_malloc_r+0xdc>
  d088d8:	00000a06 	br	d08904 <_malloc_r+0xf8>
  d088dc:	1800860e 	bge	r3,zero,d08af8 <_malloc_r+0x2ec>
  d088e0:	84000317 	ldw	r16,12(r16)
  d088e4:	2c000726 	beq	r5,r16,d08904 <_malloc_r+0xf8>
  d088e8:	80800117 	ldw	r2,4(r16)
  d088ec:	00ffff04 	movi	r3,-4
  d088f0:	10c8703a 	and	r4,r2,r3
  d088f4:	2447c83a 	sub	r3,r4,r17
  d088f8:	008003c4 	movi	r2,15
  d088fc:	10fff70e 	bge	r2,r3,d088dc <_malloc_r+0xd0>
  d08900:	31bfffc4 	addi	r6,r6,-1
  d08904:	32400044 	addi	r9,r6,1
  d08908:	02803474 	movhi	r10,209
  d0890c:	52861e04 	addi	r10,r10,6264
  d08910:	54000217 	ldw	r16,8(r10)
  d08914:	8280a026 	beq	r16,r10,d08b98 <_malloc_r+0x38c>
  d08918:	80800117 	ldw	r2,4(r16)
  d0891c:	00ffff04 	movi	r3,-4
  d08920:	10ca703a 	and	r5,r2,r3
  d08924:	2c4dc83a 	sub	r6,r5,r17
  d08928:	008003c4 	movi	r2,15
  d0892c:	11808316 	blt	r2,r6,d08b3c <_malloc_r+0x330>
  d08930:	52800315 	stw	r10,12(r10)
  d08934:	52800215 	stw	r10,8(r10)
  d08938:	30002916 	blt	r6,zero,d089e0 <_malloc_r+0x1d4>
  d0893c:	8147883a 	add	r3,r16,r5
  d08940:	18800117 	ldw	r2,4(r3)
  d08944:	9009883a 	mov	r4,r18
  d08948:	10800054 	ori	r2,r2,1
  d0894c:	18800115 	stw	r2,4(r3)
  d08950:	0d0cc700 	call	d0cc70 <__malloc_unlock>
  d08954:	80c00204 	addi	r3,r16,8
  d08958:	003fc006 	br	d0885c <_malloc_r+0x50>
  d0895c:	02c03474 	movhi	r11,209
  d08960:	5ac61c04 	addi	r11,r11,6256
  d08964:	8ac5883a 	add	r2,r17,r11
  d08968:	14000317 	ldw	r16,12(r2)
  d0896c:	580f883a 	mov	r7,r11
  d08970:	8806d0fa 	srli	r3,r17,3
  d08974:	14006c26 	beq	r2,r16,d08b28 <_malloc_r+0x31c>
  d08978:	80c00117 	ldw	r3,4(r16)
  d0897c:	00bfff04 	movi	r2,-4
  d08980:	81800317 	ldw	r6,12(r16)
  d08984:	1886703a 	and	r3,r3,r2
  d08988:	80c7883a 	add	r3,r16,r3
  d0898c:	18800117 	ldw	r2,4(r3)
  d08990:	81400217 	ldw	r5,8(r16)
  d08994:	9009883a 	mov	r4,r18
  d08998:	10800054 	ori	r2,r2,1
  d0899c:	18800115 	stw	r2,4(r3)
  d089a0:	31400215 	stw	r5,8(r6)
  d089a4:	29800315 	stw	r6,12(r5)
  d089a8:	0d0cc700 	call	d0cc70 <__malloc_unlock>
  d089ac:	80c00204 	addi	r3,r16,8
  d089b0:	003faa06 	br	d0885c <_malloc_r+0x50>
  d089b4:	00800104 	movi	r2,4
  d089b8:	10c0052e 	bgeu	r2,r3,d089d0 <_malloc_r+0x1c4>
  d089bc:	00800504 	movi	r2,20
  d089c0:	10c07836 	bltu	r2,r3,d08ba4 <_malloc_r+0x398>
  d089c4:	198016c4 	addi	r6,r3,91
  d089c8:	300490fa 	slli	r2,r6,3
  d089cc:	003fbc06 	br	d088c0 <_malloc_r+0xb4>
  d089d0:	8804d1ba 	srli	r2,r17,6
  d089d4:	11800e04 	addi	r6,r2,56
  d089d8:	300490fa 	slli	r2,r6,3
  d089dc:	003fb806 	br	d088c0 <_malloc_r+0xb4>
  d089e0:	00807fc4 	movi	r2,511
  d089e4:	1140bb36 	bltu	r2,r5,d08cd4 <_malloc_r+0x4c8>
  d089e8:	2806d0fa 	srli	r3,r5,3
  d089ec:	573ffe04 	addi	fp,r10,-8
  d089f0:	00800044 	movi	r2,1
  d089f4:	180890fa 	slli	r4,r3,3
  d089f8:	1807d0ba 	srai	r3,r3,2
  d089fc:	e1c00117 	ldw	r7,4(fp)
  d08a00:	5909883a 	add	r4,r11,r4
  d08a04:	21400217 	ldw	r5,8(r4)
  d08a08:	10c4983a 	sll	r2,r2,r3
  d08a0c:	81000315 	stw	r4,12(r16)
  d08a10:	81400215 	stw	r5,8(r16)
  d08a14:	388eb03a 	or	r7,r7,r2
  d08a18:	2c000315 	stw	r16,12(r5)
  d08a1c:	24000215 	stw	r16,8(r4)
  d08a20:	e1c00115 	stw	r7,4(fp)
  d08a24:	4807883a 	mov	r3,r9
  d08a28:	4800cd16 	blt	r9,zero,d08d60 <_malloc_r+0x554>
  d08a2c:	1807d0ba 	srai	r3,r3,2
  d08a30:	00800044 	movi	r2,1
  d08a34:	10c8983a 	sll	r4,r2,r3
  d08a38:	39004436 	bltu	r7,r4,d08b4c <_malloc_r+0x340>
  d08a3c:	21c4703a 	and	r2,r4,r7
  d08a40:	10000a1e 	bne	r2,zero,d08a6c <_malloc_r+0x260>
  d08a44:	2109883a 	add	r4,r4,r4
  d08a48:	00bfff04 	movi	r2,-4
  d08a4c:	4884703a 	and	r2,r9,r2
  d08a50:	3906703a 	and	r3,r7,r4
  d08a54:	12400104 	addi	r9,r2,4
  d08a58:	1800041e 	bne	r3,zero,d08a6c <_malloc_r+0x260>
  d08a5c:	2109883a 	add	r4,r4,r4
  d08a60:	3904703a 	and	r2,r7,r4
  d08a64:	4a400104 	addi	r9,r9,4
  d08a68:	103ffc26 	beq	r2,zero,d08a5c <_malloc_r+0x250>
  d08a6c:	480490fa 	slli	r2,r9,3
  d08a70:	4819883a 	mov	r12,r9
  d08a74:	023fff04 	movi	r8,-4
  d08a78:	589b883a 	add	r13,r11,r2
  d08a7c:	6807883a 	mov	r3,r13
  d08a80:	014003c4 	movi	r5,15
  d08a84:	1c000317 	ldw	r16,12(r3)
  d08a88:	1c00041e 	bne	r3,r16,d08a9c <_malloc_r+0x290>
  d08a8c:	0000a706 	br	d08d2c <_malloc_r+0x520>
  d08a90:	3000ab0e 	bge	r6,zero,d08d40 <_malloc_r+0x534>
  d08a94:	84000317 	ldw	r16,12(r16)
  d08a98:	1c00a426 	beq	r3,r16,d08d2c <_malloc_r+0x520>
  d08a9c:	80800117 	ldw	r2,4(r16)
  d08aa0:	1204703a 	and	r2,r2,r8
  d08aa4:	144dc83a 	sub	r6,r2,r17
  d08aa8:	29bff90e 	bge	r5,r6,d08a90 <_malloc_r+0x284>
  d08aac:	81000317 	ldw	r4,12(r16)
  d08ab0:	80c00217 	ldw	r3,8(r16)
  d08ab4:	89400054 	ori	r5,r17,1
  d08ab8:	8445883a 	add	r2,r16,r17
  d08abc:	20c00215 	stw	r3,8(r4)
  d08ac0:	19000315 	stw	r4,12(r3)
  d08ac4:	81400115 	stw	r5,4(r16)
  d08ac8:	1187883a 	add	r3,r2,r6
  d08acc:	31000054 	ori	r4,r6,1
  d08ad0:	50800315 	stw	r2,12(r10)
  d08ad4:	50800215 	stw	r2,8(r10)
  d08ad8:	19800015 	stw	r6,0(r3)
  d08adc:	11000115 	stw	r4,4(r2)
  d08ae0:	12800215 	stw	r10,8(r2)
  d08ae4:	12800315 	stw	r10,12(r2)
  d08ae8:	9009883a 	mov	r4,r18
  d08aec:	0d0cc700 	call	d0cc70 <__malloc_unlock>
  d08af0:	80c00204 	addi	r3,r16,8
  d08af4:	003f5906 	br	d0885c <_malloc_r+0x50>
  d08af8:	8109883a 	add	r4,r16,r4
  d08afc:	20800117 	ldw	r2,4(r4)
  d08b00:	80c00217 	ldw	r3,8(r16)
  d08b04:	81400317 	ldw	r5,12(r16)
  d08b08:	10800054 	ori	r2,r2,1
  d08b0c:	20800115 	stw	r2,4(r4)
  d08b10:	28c00215 	stw	r3,8(r5)
  d08b14:	19400315 	stw	r5,12(r3)
  d08b18:	9009883a 	mov	r4,r18
  d08b1c:	0d0cc700 	call	d0cc70 <__malloc_unlock>
  d08b20:	80c00204 	addi	r3,r16,8
  d08b24:	003f4d06 	br	d0885c <_malloc_r+0x50>
  d08b28:	80800204 	addi	r2,r16,8
  d08b2c:	14000317 	ldw	r16,12(r2)
  d08b30:	143f911e 	bne	r2,r16,d08978 <_malloc_r+0x16c>
  d08b34:	1a400084 	addi	r9,r3,2
  d08b38:	003f7306 	br	d08908 <_malloc_r+0xfc>
  d08b3c:	88c00054 	ori	r3,r17,1
  d08b40:	8445883a 	add	r2,r16,r17
  d08b44:	80c00115 	stw	r3,4(r16)
  d08b48:	003fdf06 	br	d08ac8 <_malloc_r+0x2bc>
  d08b4c:	e4000217 	ldw	r16,8(fp)
  d08b50:	00bfff04 	movi	r2,-4
  d08b54:	80c00117 	ldw	r3,4(r16)
  d08b58:	802d883a 	mov	r22,r16
  d08b5c:	18aa703a 	and	r21,r3,r2
  d08b60:	ac401636 	bltu	r21,r17,d08bbc <_malloc_r+0x3b0>
  d08b64:	ac49c83a 	sub	r4,r21,r17
  d08b68:	008003c4 	movi	r2,15
  d08b6c:	1100130e 	bge	r2,r4,d08bbc <_malloc_r+0x3b0>
  d08b70:	88800054 	ori	r2,r17,1
  d08b74:	8447883a 	add	r3,r16,r17
  d08b78:	80800115 	stw	r2,4(r16)
  d08b7c:	20800054 	ori	r2,r4,1
  d08b80:	18800115 	stw	r2,4(r3)
  d08b84:	e0c00215 	stw	r3,8(fp)
  d08b88:	9009883a 	mov	r4,r18
  d08b8c:	0d0cc700 	call	d0cc70 <__malloc_unlock>
  d08b90:	80c00204 	addi	r3,r16,8
  d08b94:	003f3106 	br	d0885c <_malloc_r+0x50>
  d08b98:	39c00117 	ldw	r7,4(r7)
  d08b9c:	573ffe04 	addi	fp,r10,-8
  d08ba0:	003fa006 	br	d08a24 <_malloc_r+0x218>
  d08ba4:	00801504 	movi	r2,84
  d08ba8:	10c06736 	bltu	r2,r3,d08d48 <_malloc_r+0x53c>
  d08bac:	8804d33a 	srli	r2,r17,12
  d08bb0:	11801b84 	addi	r6,r2,110
  d08bb4:	300490fa 	slli	r2,r6,3
  d08bb8:	003f4106 	br	d088c0 <_malloc_r+0xb4>
  d08bbc:	d0a71617 	ldw	r2,-25512(gp)
  d08bc0:	d0e00d17 	ldw	r3,-32716(gp)
  d08bc4:	053fffc4 	movi	r20,-1
  d08bc8:	10800404 	addi	r2,r2,16
  d08bcc:	88a7883a 	add	r19,r17,r2
  d08bd0:	1d000326 	beq	r3,r20,d08be0 <_malloc_r+0x3d4>
  d08bd4:	98c3ffc4 	addi	r3,r19,4095
  d08bd8:	00bc0004 	movi	r2,-4096
  d08bdc:	18a6703a 	and	r19,r3,r2
  d08be0:	9009883a 	mov	r4,r18
  d08be4:	980b883a 	mov	r5,r19
  d08be8:	0d0a8a00 	call	d0a8a0 <_sbrk_r>
  d08bec:	1009883a 	mov	r4,r2
  d08bf0:	15000426 	beq	r2,r20,d08c04 <_malloc_r+0x3f8>
  d08bf4:	854b883a 	add	r5,r16,r21
  d08bf8:	1029883a 	mov	r20,r2
  d08bfc:	11405a2e 	bgeu	r2,r5,d08d68 <_malloc_r+0x55c>
  d08c00:	87000c26 	beq	r16,fp,d08c34 <_malloc_r+0x428>
  d08c04:	e4000217 	ldw	r16,8(fp)
  d08c08:	80c00117 	ldw	r3,4(r16)
  d08c0c:	00bfff04 	movi	r2,-4
  d08c10:	1884703a 	and	r2,r3,r2
  d08c14:	14400336 	bltu	r2,r17,d08c24 <_malloc_r+0x418>
  d08c18:	1449c83a 	sub	r4,r2,r17
  d08c1c:	008003c4 	movi	r2,15
  d08c20:	113fd316 	blt	r2,r4,d08b70 <_malloc_r+0x364>
  d08c24:	9009883a 	mov	r4,r18
  d08c28:	0d0cc700 	call	d0cc70 <__malloc_unlock>
  d08c2c:	0007883a 	mov	r3,zero
  d08c30:	003f0a06 	br	d0885c <_malloc_r+0x50>
  d08c34:	05c03474 	movhi	r23,209
  d08c38:	bdd31104 	addi	r23,r23,19524
  d08c3c:	b8800017 	ldw	r2,0(r23)
  d08c40:	988d883a 	add	r6,r19,r2
  d08c44:	b9800015 	stw	r6,0(r23)
  d08c48:	d0e00d17 	ldw	r3,-32716(gp)
  d08c4c:	00bfffc4 	movi	r2,-1
  d08c50:	18808e26 	beq	r3,r2,d08e8c <_malloc_r+0x680>
  d08c54:	2145c83a 	sub	r2,r4,r5
  d08c58:	3085883a 	add	r2,r6,r2
  d08c5c:	b8800015 	stw	r2,0(r23)
  d08c60:	20c001cc 	andi	r3,r4,7
  d08c64:	18005f1e 	bne	r3,zero,d08de4 <_malloc_r+0x5d8>
  d08c68:	000b883a 	mov	r5,zero
  d08c6c:	a4c5883a 	add	r2,r20,r19
  d08c70:	1083ffcc 	andi	r2,r2,4095
  d08c74:	00c40004 	movi	r3,4096
  d08c78:	1887c83a 	sub	r3,r3,r2
  d08c7c:	28e7883a 	add	r19,r5,r3
  d08c80:	9009883a 	mov	r4,r18
  d08c84:	980b883a 	mov	r5,r19
  d08c88:	0d0a8a00 	call	d0a8a0 <_sbrk_r>
  d08c8c:	1007883a 	mov	r3,r2
  d08c90:	00bfffc4 	movi	r2,-1
  d08c94:	18807a26 	beq	r3,r2,d08e80 <_malloc_r+0x674>
  d08c98:	1d05c83a 	sub	r2,r3,r20
  d08c9c:	9885883a 	add	r2,r19,r2
  d08ca0:	10c00054 	ori	r3,r2,1
  d08ca4:	b8800017 	ldw	r2,0(r23)
  d08ca8:	a021883a 	mov	r16,r20
  d08cac:	a0c00115 	stw	r3,4(r20)
  d08cb0:	9885883a 	add	r2,r19,r2
  d08cb4:	b8800015 	stw	r2,0(r23)
  d08cb8:	e5000215 	stw	r20,8(fp)
  d08cbc:	b7003626 	beq	r22,fp,d08d98 <_malloc_r+0x58c>
  d08cc0:	018003c4 	movi	r6,15
  d08cc4:	35404b36 	bltu	r6,r21,d08df4 <_malloc_r+0x5e8>
  d08cc8:	00800044 	movi	r2,1
  d08ccc:	a0800115 	stw	r2,4(r20)
  d08cd0:	003fcd06 	br	d08c08 <_malloc_r+0x3fc>
  d08cd4:	2808d27a 	srli	r4,r5,9
  d08cd8:	2000371e 	bne	r4,zero,d08db8 <_malloc_r+0x5ac>
  d08cdc:	2808d0fa 	srli	r4,r5,3
  d08ce0:	200690fa 	slli	r3,r4,3
  d08ce4:	1ad1883a 	add	r8,r3,r11
  d08ce8:	41800217 	ldw	r6,8(r8)
  d08cec:	41805b26 	beq	r8,r6,d08e5c <_malloc_r+0x650>
  d08cf0:	30800117 	ldw	r2,4(r6)
  d08cf4:	00ffff04 	movi	r3,-4
  d08cf8:	10c4703a 	and	r2,r2,r3
  d08cfc:	2880022e 	bgeu	r5,r2,d08d08 <_malloc_r+0x4fc>
  d08d00:	31800217 	ldw	r6,8(r6)
  d08d04:	41bffa1e 	bne	r8,r6,d08cf0 <_malloc_r+0x4e4>
  d08d08:	32000317 	ldw	r8,12(r6)
  d08d0c:	39c00117 	ldw	r7,4(r7)
  d08d10:	82000315 	stw	r8,12(r16)
  d08d14:	81800215 	stw	r6,8(r16)
  d08d18:	07003474 	movhi	fp,209
  d08d1c:	e7061c04 	addi	fp,fp,6256
  d08d20:	34000315 	stw	r16,12(r6)
  d08d24:	44000215 	stw	r16,8(r8)
  d08d28:	003f3e06 	br	d08a24 <_malloc_r+0x218>
  d08d2c:	63000044 	addi	r12,r12,1
  d08d30:	608000cc 	andi	r2,r12,3
  d08d34:	10005d26 	beq	r2,zero,d08eac <_malloc_r+0x6a0>
  d08d38:	18c00204 	addi	r3,r3,8
  d08d3c:	003f5106 	br	d08a84 <_malloc_r+0x278>
  d08d40:	8089883a 	add	r4,r16,r2
  d08d44:	003f6d06 	br	d08afc <_malloc_r+0x2f0>
  d08d48:	00805504 	movi	r2,340
  d08d4c:	10c02036 	bltu	r2,r3,d08dd0 <_malloc_r+0x5c4>
  d08d50:	8804d3fa 	srli	r2,r17,15
  d08d54:	11801dc4 	addi	r6,r2,119
  d08d58:	300490fa 	slli	r2,r6,3
  d08d5c:	003ed806 	br	d088c0 <_malloc_r+0xb4>
  d08d60:	48c000c4 	addi	r3,r9,3
  d08d64:	003f3106 	br	d08a2c <_malloc_r+0x220>
  d08d68:	05c03474 	movhi	r23,209
  d08d6c:	bdd31104 	addi	r23,r23,19524
  d08d70:	b8800017 	ldw	r2,0(r23)
  d08d74:	988d883a 	add	r6,r19,r2
  d08d78:	b9800015 	stw	r6,0(r23)
  d08d7c:	293fb21e 	bne	r5,r4,d08c48 <_malloc_r+0x43c>
  d08d80:	2083ffcc 	andi	r2,r4,4095
  d08d84:	103fb01e 	bne	r2,zero,d08c48 <_malloc_r+0x43c>
  d08d88:	e4000217 	ldw	r16,8(fp)
  d08d8c:	9d45883a 	add	r2,r19,r21
  d08d90:	10800054 	ori	r2,r2,1
  d08d94:	80800115 	stw	r2,4(r16)
  d08d98:	b8c00017 	ldw	r3,0(r23)
  d08d9c:	d0a71717 	ldw	r2,-25508(gp)
  d08da0:	10c0012e 	bgeu	r2,r3,d08da8 <_malloc_r+0x59c>
  d08da4:	d0e71715 	stw	r3,-25508(gp)
  d08da8:	d0a71817 	ldw	r2,-25504(gp)
  d08dac:	10ff962e 	bgeu	r2,r3,d08c08 <_malloc_r+0x3fc>
  d08db0:	d0e71815 	stw	r3,-25504(gp)
  d08db4:	003f9406 	br	d08c08 <_malloc_r+0x3fc>
  d08db8:	00800104 	movi	r2,4
  d08dbc:	11001e36 	bltu	r2,r4,d08e38 <_malloc_r+0x62c>
  d08dc0:	2804d1ba 	srli	r2,r5,6
  d08dc4:	11000e04 	addi	r4,r2,56
  d08dc8:	200690fa 	slli	r3,r4,3
  d08dcc:	003fc506 	br	d08ce4 <_malloc_r+0x4d8>
  d08dd0:	00815504 	movi	r2,1364
  d08dd4:	10c01d2e 	bgeu	r2,r3,d08e4c <_malloc_r+0x640>
  d08dd8:	01801f84 	movi	r6,126
  d08ddc:	0080fc04 	movi	r2,1008
  d08de0:	003eb706 	br	d088c0 <_malloc_r+0xb4>
  d08de4:	00800204 	movi	r2,8
  d08de8:	10cbc83a 	sub	r5,r2,r3
  d08dec:	2169883a 	add	r20,r4,r5
  d08df0:	003f9e06 	br	d08c6c <_malloc_r+0x460>
  d08df4:	00bffe04 	movi	r2,-8
  d08df8:	a93ffd04 	addi	r4,r21,-12
  d08dfc:	2088703a 	and	r4,r4,r2
  d08e00:	b10b883a 	add	r5,r22,r4
  d08e04:	00c00144 	movi	r3,5
  d08e08:	28c00215 	stw	r3,8(r5)
  d08e0c:	28c00115 	stw	r3,4(r5)
  d08e10:	b0800117 	ldw	r2,4(r22)
  d08e14:	1080004c 	andi	r2,r2,1
  d08e18:	2084b03a 	or	r2,r4,r2
  d08e1c:	b0800115 	stw	r2,4(r22)
  d08e20:	313fdd2e 	bgeu	r6,r4,d08d98 <_malloc_r+0x58c>
  d08e24:	b1400204 	addi	r5,r22,8
  d08e28:	9009883a 	mov	r4,r18
  d08e2c:	0d07c840 	call	d07c84 <_free_r>
  d08e30:	e4000217 	ldw	r16,8(fp)
  d08e34:	003fd806 	br	d08d98 <_malloc_r+0x58c>
  d08e38:	00800504 	movi	r2,20
  d08e3c:	11001536 	bltu	r2,r4,d08e94 <_malloc_r+0x688>
  d08e40:	210016c4 	addi	r4,r4,91
  d08e44:	200690fa 	slli	r3,r4,3
  d08e48:	003fa606 	br	d08ce4 <_malloc_r+0x4d8>
  d08e4c:	8804d4ba 	srli	r2,r17,18
  d08e50:	11801f04 	addi	r6,r2,124
  d08e54:	300490fa 	slli	r2,r6,3
  d08e58:	003e9906 	br	d088c0 <_malloc_r+0xb4>
  d08e5c:	2009d0ba 	srai	r4,r4,2
  d08e60:	01403474 	movhi	r5,209
  d08e64:	29461c04 	addi	r5,r5,6256
  d08e68:	00c00044 	movi	r3,1
  d08e6c:	28800117 	ldw	r2,4(r5)
  d08e70:	1906983a 	sll	r3,r3,r4
  d08e74:	10c4b03a 	or	r2,r2,r3
  d08e78:	28800115 	stw	r2,4(r5)
  d08e7c:	003fa306 	br	d08d0c <_malloc_r+0x500>
  d08e80:	0027883a 	mov	r19,zero
  d08e84:	00c00044 	movi	r3,1
  d08e88:	003f8606 	br	d08ca4 <_malloc_r+0x498>
  d08e8c:	d1200d15 	stw	r4,-32716(gp)
  d08e90:	003f7306 	br	d08c60 <_malloc_r+0x454>
  d08e94:	00801504 	movi	r2,84
  d08e98:	11001936 	bltu	r2,r4,d08f00 <_malloc_r+0x6f4>
  d08e9c:	2804d33a 	srli	r2,r5,12
  d08ea0:	11001b84 	addi	r4,r2,110
  d08ea4:	200690fa 	slli	r3,r4,3
  d08ea8:	003f8e06 	br	d08ce4 <_malloc_r+0x4d8>
  d08eac:	480b883a 	mov	r5,r9
  d08eb0:	6807883a 	mov	r3,r13
  d08eb4:	288000cc 	andi	r2,r5,3
  d08eb8:	18fffe04 	addi	r3,r3,-8
  d08ebc:	297fffc4 	addi	r5,r5,-1
  d08ec0:	10001526 	beq	r2,zero,d08f18 <_malloc_r+0x70c>
  d08ec4:	18800217 	ldw	r2,8(r3)
  d08ec8:	10fffa26 	beq	r2,r3,d08eb4 <_malloc_r+0x6a8>
  d08ecc:	2109883a 	add	r4,r4,r4
  d08ed0:	393f1e36 	bltu	r7,r4,d08b4c <_malloc_r+0x340>
  d08ed4:	203f1d26 	beq	r4,zero,d08b4c <_malloc_r+0x340>
  d08ed8:	21c4703a 	and	r2,r4,r7
  d08edc:	10000226 	beq	r2,zero,d08ee8 <_malloc_r+0x6dc>
  d08ee0:	6013883a 	mov	r9,r12
  d08ee4:	003ee106 	br	d08a6c <_malloc_r+0x260>
  d08ee8:	2109883a 	add	r4,r4,r4
  d08eec:	3904703a 	and	r2,r7,r4
  d08ef0:	63000104 	addi	r12,r12,4
  d08ef4:	103ffc26 	beq	r2,zero,d08ee8 <_malloc_r+0x6dc>
  d08ef8:	6013883a 	mov	r9,r12
  d08efc:	003edb06 	br	d08a6c <_malloc_r+0x260>
  d08f00:	00805504 	movi	r2,340
  d08f04:	11000836 	bltu	r2,r4,d08f28 <_malloc_r+0x71c>
  d08f08:	2804d3fa 	srli	r2,r5,15
  d08f0c:	11001dc4 	addi	r4,r2,119
  d08f10:	200690fa 	slli	r3,r4,3
  d08f14:	003f7306 	br	d08ce4 <_malloc_r+0x4d8>
  d08f18:	0104303a 	nor	r2,zero,r4
  d08f1c:	388e703a 	and	r7,r7,r2
  d08f20:	e1c00115 	stw	r7,4(fp)
  d08f24:	003fe906 	br	d08ecc <_malloc_r+0x6c0>
  d08f28:	00815504 	movi	r2,1364
  d08f2c:	1100032e 	bgeu	r2,r4,d08f3c <_malloc_r+0x730>
  d08f30:	01001f84 	movi	r4,126
  d08f34:	00c0fc04 	movi	r3,1008
  d08f38:	003f6a06 	br	d08ce4 <_malloc_r+0x4d8>
  d08f3c:	2804d4ba 	srli	r2,r5,18
  d08f40:	11001f04 	addi	r4,r2,124
  d08f44:	200690fa 	slli	r3,r4,3
  d08f48:	003f6606 	br	d08ce4 <_malloc_r+0x4d8>

00d08f4c <memchr>:
  d08f4c:	008000c4 	movi	r2,3
  d08f50:	29403fcc 	andi	r5,r5,255
  d08f54:	2007883a 	mov	r3,r4
  d08f58:	1180022e 	bgeu	r2,r6,d08f64 <memchr+0x18>
  d08f5c:	2084703a 	and	r2,r4,r2
  d08f60:	10000b26 	beq	r2,zero,d08f90 <memchr+0x44>
  d08f64:	313fffc4 	addi	r4,r6,-1
  d08f68:	3000051e 	bne	r6,zero,d08f80 <memchr+0x34>
  d08f6c:	00002c06 	br	d09020 <memchr+0xd4>
  d08f70:	213fffc4 	addi	r4,r4,-1
  d08f74:	00bfffc4 	movi	r2,-1
  d08f78:	18c00044 	addi	r3,r3,1
  d08f7c:	20802826 	beq	r4,r2,d09020 <memchr+0xd4>
  d08f80:	18800003 	ldbu	r2,0(r3)
  d08f84:	28bffa1e 	bne	r5,r2,d08f70 <memchr+0x24>
  d08f88:	1805883a 	mov	r2,r3
  d08f8c:	f800283a 	ret
  d08f90:	0011883a 	mov	r8,zero
  d08f94:	0007883a 	mov	r3,zero
  d08f98:	01c00104 	movi	r7,4
  d08f9c:	4004923a 	slli	r2,r8,8
  d08fa0:	18c00044 	addi	r3,r3,1
  d08fa4:	1151883a 	add	r8,r2,r5
  d08fa8:	19fffc1e 	bne	r3,r7,d08f9c <memchr+0x50>
  d08fac:	02bfbff4 	movhi	r10,65279
  d08fb0:	52bfbfc4 	addi	r10,r10,-257
  d08fb4:	02602074 	movhi	r9,32897
  d08fb8:	4a602004 	addi	r9,r9,-32640
  d08fbc:	02c000c4 	movi	r11,3
  d08fc0:	20800017 	ldw	r2,0(r4)
  d08fc4:	31bfff04 	addi	r6,r6,-4
  d08fc8:	200f883a 	mov	r7,r4
  d08fcc:	1204f03a 	xor	r2,r2,r8
  d08fd0:	1287883a 	add	r3,r2,r10
  d08fd4:	1a46703a 	and	r3,r3,r9
  d08fd8:	0084303a 	nor	r2,zero,r2
  d08fdc:	10c4703a 	and	r2,r2,r3
  d08fe0:	10000b26 	beq	r2,zero,d09010 <memchr+0xc4>
  d08fe4:	20800003 	ldbu	r2,0(r4)
  d08fe8:	28800f26 	beq	r5,r2,d09028 <memchr+0xdc>
  d08fec:	20800043 	ldbu	r2,1(r4)
  d08ff0:	21c00044 	addi	r7,r4,1
  d08ff4:	28800c26 	beq	r5,r2,d09028 <memchr+0xdc>
  d08ff8:	20800083 	ldbu	r2,2(r4)
  d08ffc:	21c00084 	addi	r7,r4,2
  d09000:	28800926 	beq	r5,r2,d09028 <memchr+0xdc>
  d09004:	208000c3 	ldbu	r2,3(r4)
  d09008:	21c000c4 	addi	r7,r4,3
  d0900c:	28800626 	beq	r5,r2,d09028 <memchr+0xdc>
  d09010:	21000104 	addi	r4,r4,4
  d09014:	59bfea36 	bltu	r11,r6,d08fc0 <memchr+0x74>
  d09018:	2007883a 	mov	r3,r4
  d0901c:	003fd106 	br	d08f64 <memchr+0x18>
  d09020:	0005883a 	mov	r2,zero
  d09024:	f800283a 	ret
  d09028:	3805883a 	mov	r2,r7
  d0902c:	f800283a 	ret

00d09030 <memcpy>:
  d09030:	01c003c4 	movi	r7,15
  d09034:	2007883a 	mov	r3,r4
  d09038:	3980032e 	bgeu	r7,r6,d09048 <memcpy+0x18>
  d0903c:	2904b03a 	or	r2,r5,r4
  d09040:	108000cc 	andi	r2,r2,3
  d09044:	10000926 	beq	r2,zero,d0906c <memcpy+0x3c>
  d09048:	30000626 	beq	r6,zero,d09064 <memcpy+0x34>
  d0904c:	30cd883a 	add	r6,r6,r3
  d09050:	28800003 	ldbu	r2,0(r5)
  d09054:	29400044 	addi	r5,r5,1
  d09058:	18800005 	stb	r2,0(r3)
  d0905c:	18c00044 	addi	r3,r3,1
  d09060:	30fffb1e 	bne	r6,r3,d09050 <memcpy+0x20>
  d09064:	2005883a 	mov	r2,r4
  d09068:	f800283a 	ret
  d0906c:	3811883a 	mov	r8,r7
  d09070:	200f883a 	mov	r7,r4
  d09074:	28c00017 	ldw	r3,0(r5)
  d09078:	31bffc04 	addi	r6,r6,-16
  d0907c:	38c00015 	stw	r3,0(r7)
  d09080:	28800117 	ldw	r2,4(r5)
  d09084:	38800115 	stw	r2,4(r7)
  d09088:	28c00217 	ldw	r3,8(r5)
  d0908c:	38c00215 	stw	r3,8(r7)
  d09090:	28800317 	ldw	r2,12(r5)
  d09094:	29400404 	addi	r5,r5,16
  d09098:	38800315 	stw	r2,12(r7)
  d0909c:	39c00404 	addi	r7,r7,16
  d090a0:	41bff436 	bltu	r8,r6,d09074 <memcpy+0x44>
  d090a4:	008000c4 	movi	r2,3
  d090a8:	1180072e 	bgeu	r2,r6,d090c8 <memcpy+0x98>
  d090ac:	1007883a 	mov	r3,r2
  d090b0:	28800017 	ldw	r2,0(r5)
  d090b4:	31bfff04 	addi	r6,r6,-4
  d090b8:	29400104 	addi	r5,r5,4
  d090bc:	38800015 	stw	r2,0(r7)
  d090c0:	39c00104 	addi	r7,r7,4
  d090c4:	19bffa36 	bltu	r3,r6,d090b0 <memcpy+0x80>
  d090c8:	3807883a 	mov	r3,r7
  d090cc:	003fde06 	br	d09048 <memcpy+0x18>

00d090d0 <memmove>:
  d090d0:	2807883a 	mov	r3,r5
  d090d4:	2011883a 	mov	r8,r4
  d090d8:	29000c2e 	bgeu	r5,r4,d0910c <memmove+0x3c>
  d090dc:	298f883a 	add	r7,r5,r6
  d090e0:	21c00a2e 	bgeu	r4,r7,d0910c <memmove+0x3c>
  d090e4:	30000726 	beq	r6,zero,d09104 <memmove+0x34>
  d090e8:	2187883a 	add	r3,r4,r6
  d090ec:	198dc83a 	sub	r6,r3,r6
  d090f0:	39ffffc4 	addi	r7,r7,-1
  d090f4:	38800003 	ldbu	r2,0(r7)
  d090f8:	18ffffc4 	addi	r3,r3,-1
  d090fc:	18800005 	stb	r2,0(r3)
  d09100:	19bffb1e 	bne	r3,r6,d090f0 <memmove+0x20>
  d09104:	2005883a 	mov	r2,r4
  d09108:	f800283a 	ret
  d0910c:	01c003c4 	movi	r7,15
  d09110:	39800a36 	bltu	r7,r6,d0913c <memmove+0x6c>
  d09114:	303ffb26 	beq	r6,zero,d09104 <memmove+0x34>
  d09118:	400f883a 	mov	r7,r8
  d0911c:	320d883a 	add	r6,r6,r8
  d09120:	28800003 	ldbu	r2,0(r5)
  d09124:	29400044 	addi	r5,r5,1
  d09128:	38800005 	stb	r2,0(r7)
  d0912c:	39c00044 	addi	r7,r7,1
  d09130:	39bffb1e 	bne	r7,r6,d09120 <memmove+0x50>
  d09134:	2005883a 	mov	r2,r4
  d09138:	f800283a 	ret
  d0913c:	1904b03a 	or	r2,r3,r4
  d09140:	108000cc 	andi	r2,r2,3
  d09144:	103ff31e 	bne	r2,zero,d09114 <memmove+0x44>
  d09148:	3811883a 	mov	r8,r7
  d0914c:	180b883a 	mov	r5,r3
  d09150:	200f883a 	mov	r7,r4
  d09154:	28c00017 	ldw	r3,0(r5)
  d09158:	31bffc04 	addi	r6,r6,-16
  d0915c:	38c00015 	stw	r3,0(r7)
  d09160:	28800117 	ldw	r2,4(r5)
  d09164:	38800115 	stw	r2,4(r7)
  d09168:	28c00217 	ldw	r3,8(r5)
  d0916c:	38c00215 	stw	r3,8(r7)
  d09170:	28800317 	ldw	r2,12(r5)
  d09174:	29400404 	addi	r5,r5,16
  d09178:	38800315 	stw	r2,12(r7)
  d0917c:	39c00404 	addi	r7,r7,16
  d09180:	41bff436 	bltu	r8,r6,d09154 <memmove+0x84>
  d09184:	008000c4 	movi	r2,3
  d09188:	1180072e 	bgeu	r2,r6,d091a8 <memmove+0xd8>
  d0918c:	1007883a 	mov	r3,r2
  d09190:	28800017 	ldw	r2,0(r5)
  d09194:	31bfff04 	addi	r6,r6,-4
  d09198:	29400104 	addi	r5,r5,4
  d0919c:	38800015 	stw	r2,0(r7)
  d091a0:	39c00104 	addi	r7,r7,4
  d091a4:	19bffa36 	bltu	r3,r6,d09190 <memmove+0xc0>
  d091a8:	3811883a 	mov	r8,r7
  d091ac:	003fd906 	br	d09114 <memmove+0x44>

00d091b0 <memset>:
  d091b0:	008000c4 	movi	r2,3
  d091b4:	29403fcc 	andi	r5,r5,255
  d091b8:	2007883a 	mov	r3,r4
  d091bc:	1180022e 	bgeu	r2,r6,d091c8 <memset+0x18>
  d091c0:	2084703a 	and	r2,r4,r2
  d091c4:	10000826 	beq	r2,zero,d091e8 <memset+0x38>
  d091c8:	30000526 	beq	r6,zero,d091e0 <memset+0x30>
  d091cc:	2805883a 	mov	r2,r5
  d091d0:	30cd883a 	add	r6,r6,r3
  d091d4:	18800005 	stb	r2,0(r3)
  d091d8:	18c00044 	addi	r3,r3,1
  d091dc:	19bffd1e 	bne	r3,r6,d091d4 <memset+0x24>
  d091e0:	2005883a 	mov	r2,r4
  d091e4:	f800283a 	ret
  d091e8:	2804923a 	slli	r2,r5,8
  d091ec:	020003c4 	movi	r8,15
  d091f0:	200f883a 	mov	r7,r4
  d091f4:	2884b03a 	or	r2,r5,r2
  d091f8:	1006943a 	slli	r3,r2,16
  d091fc:	10c6b03a 	or	r3,r2,r3
  d09200:	41800a2e 	bgeu	r8,r6,d0922c <memset+0x7c>
  d09204:	4005883a 	mov	r2,r8
  d09208:	31bffc04 	addi	r6,r6,-16
  d0920c:	38c00015 	stw	r3,0(r7)
  d09210:	38c00115 	stw	r3,4(r7)
  d09214:	38c00215 	stw	r3,8(r7)
  d09218:	38c00315 	stw	r3,12(r7)
  d0921c:	39c00404 	addi	r7,r7,16
  d09220:	11bff936 	bltu	r2,r6,d09208 <memset+0x58>
  d09224:	008000c4 	movi	r2,3
  d09228:	1180052e 	bgeu	r2,r6,d09240 <memset+0x90>
  d0922c:	31bfff04 	addi	r6,r6,-4
  d09230:	008000c4 	movi	r2,3
  d09234:	38c00015 	stw	r3,0(r7)
  d09238:	39c00104 	addi	r7,r7,4
  d0923c:	11bffb36 	bltu	r2,r6,d0922c <memset+0x7c>
  d09240:	3807883a 	mov	r3,r7
  d09244:	003fe006 	br	d091c8 <memset+0x18>

00d09248 <_Bfree>:
  d09248:	28000826 	beq	r5,zero,d0926c <_Bfree+0x24>
  d0924c:	28800117 	ldw	r2,4(r5)
  d09250:	21001317 	ldw	r4,76(r4)
  d09254:	1085883a 	add	r2,r2,r2
  d09258:	1085883a 	add	r2,r2,r2
  d0925c:	1105883a 	add	r2,r2,r4
  d09260:	10c00017 	ldw	r3,0(r2)
  d09264:	28c00015 	stw	r3,0(r5)
  d09268:	11400015 	stw	r5,0(r2)
  d0926c:	f800283a 	ret

00d09270 <__hi0bits>:
  d09270:	20bfffec 	andhi	r2,r4,65535
  d09274:	10001426 	beq	r2,zero,d092c8 <__hi0bits+0x58>
  d09278:	0007883a 	mov	r3,zero
  d0927c:	20bfc02c 	andhi	r2,r4,65280
  d09280:	1000021e 	bne	r2,zero,d0928c <__hi0bits+0x1c>
  d09284:	2008923a 	slli	r4,r4,8
  d09288:	18c00204 	addi	r3,r3,8
  d0928c:	20bc002c 	andhi	r2,r4,61440
  d09290:	1000021e 	bne	r2,zero,d0929c <__hi0bits+0x2c>
  d09294:	2008913a 	slli	r4,r4,4
  d09298:	18c00104 	addi	r3,r3,4
  d0929c:	20b0002c 	andhi	r2,r4,49152
  d092a0:	1000031e 	bne	r2,zero,d092b0 <__hi0bits+0x40>
  d092a4:	2105883a 	add	r2,r4,r4
  d092a8:	18c00084 	addi	r3,r3,2
  d092ac:	1089883a 	add	r4,r2,r2
  d092b0:	20000316 	blt	r4,zero,d092c0 <__hi0bits+0x50>
  d092b4:	2090002c 	andhi	r2,r4,16384
  d092b8:	10000626 	beq	r2,zero,d092d4 <__hi0bits+0x64>
  d092bc:	18c00044 	addi	r3,r3,1
  d092c0:	1805883a 	mov	r2,r3
  d092c4:	f800283a 	ret
  d092c8:	2008943a 	slli	r4,r4,16
  d092cc:	00c00404 	movi	r3,16
  d092d0:	003fea06 	br	d0927c <__hi0bits+0xc>
  d092d4:	00c00804 	movi	r3,32
  d092d8:	1805883a 	mov	r2,r3
  d092dc:	f800283a 	ret

00d092e0 <__lo0bits>:
  d092e0:	20c00017 	ldw	r3,0(r4)
  d092e4:	188001cc 	andi	r2,r3,7
  d092e8:	10000a26 	beq	r2,zero,d09314 <__lo0bits+0x34>
  d092ec:	1880004c 	andi	r2,r3,1
  d092f0:	1005003a 	cmpeq	r2,r2,zero
  d092f4:	10002126 	beq	r2,zero,d0937c <__lo0bits+0x9c>
  d092f8:	1880008c 	andi	r2,r3,2
  d092fc:	1000251e 	bne	r2,zero,d09394 <__lo0bits+0xb4>
  d09300:	1804d0ba 	srli	r2,r3,2
  d09304:	01400084 	movi	r5,2
  d09308:	20800015 	stw	r2,0(r4)
  d0930c:	2805883a 	mov	r2,r5
  d09310:	f800283a 	ret
  d09314:	18bfffcc 	andi	r2,r3,65535
  d09318:	10001526 	beq	r2,zero,d09370 <__lo0bits+0x90>
  d0931c:	000b883a 	mov	r5,zero
  d09320:	18803fcc 	andi	r2,r3,255
  d09324:	1000021e 	bne	r2,zero,d09330 <__lo0bits+0x50>
  d09328:	1806d23a 	srli	r3,r3,8
  d0932c:	29400204 	addi	r5,r5,8
  d09330:	188003cc 	andi	r2,r3,15
  d09334:	1000021e 	bne	r2,zero,d09340 <__lo0bits+0x60>
  d09338:	1806d13a 	srli	r3,r3,4
  d0933c:	29400104 	addi	r5,r5,4
  d09340:	188000cc 	andi	r2,r3,3
  d09344:	1000021e 	bne	r2,zero,d09350 <__lo0bits+0x70>
  d09348:	1806d0ba 	srli	r3,r3,2
  d0934c:	29400084 	addi	r5,r5,2
  d09350:	1880004c 	andi	r2,r3,1
  d09354:	1000031e 	bne	r2,zero,d09364 <__lo0bits+0x84>
  d09358:	1806d07a 	srli	r3,r3,1
  d0935c:	18000a26 	beq	r3,zero,d09388 <__lo0bits+0xa8>
  d09360:	29400044 	addi	r5,r5,1
  d09364:	2805883a 	mov	r2,r5
  d09368:	20c00015 	stw	r3,0(r4)
  d0936c:	f800283a 	ret
  d09370:	1806d43a 	srli	r3,r3,16
  d09374:	01400404 	movi	r5,16
  d09378:	003fe906 	br	d09320 <__lo0bits+0x40>
  d0937c:	000b883a 	mov	r5,zero
  d09380:	2805883a 	mov	r2,r5
  d09384:	f800283a 	ret
  d09388:	01400804 	movi	r5,32
  d0938c:	2805883a 	mov	r2,r5
  d09390:	f800283a 	ret
  d09394:	1804d07a 	srli	r2,r3,1
  d09398:	01400044 	movi	r5,1
  d0939c:	20800015 	stw	r2,0(r4)
  d093a0:	003fda06 	br	d0930c <__lo0bits+0x2c>

00d093a4 <__mcmp>:
  d093a4:	20800417 	ldw	r2,16(r4)
  d093a8:	28c00417 	ldw	r3,16(r5)
  d093ac:	10cfc83a 	sub	r7,r2,r3
  d093b0:	38000c1e 	bne	r7,zero,d093e4 <__mcmp+0x40>
  d093b4:	18c5883a 	add	r2,r3,r3
  d093b8:	1085883a 	add	r2,r2,r2
  d093bc:	10c00504 	addi	r3,r2,20
  d093c0:	21000504 	addi	r4,r4,20
  d093c4:	28cb883a 	add	r5,r5,r3
  d093c8:	2085883a 	add	r2,r4,r2
  d093cc:	10bfff04 	addi	r2,r2,-4
  d093d0:	297fff04 	addi	r5,r5,-4
  d093d4:	11800017 	ldw	r6,0(r2)
  d093d8:	28c00017 	ldw	r3,0(r5)
  d093dc:	30c0031e 	bne	r6,r3,d093ec <__mcmp+0x48>
  d093e0:	20bffa36 	bltu	r4,r2,d093cc <__mcmp+0x28>
  d093e4:	3805883a 	mov	r2,r7
  d093e8:	f800283a 	ret
  d093ec:	30c00336 	bltu	r6,r3,d093fc <__mcmp+0x58>
  d093f0:	01c00044 	movi	r7,1
  d093f4:	3805883a 	mov	r2,r7
  d093f8:	f800283a 	ret
  d093fc:	01ffffc4 	movi	r7,-1
  d09400:	003ff806 	br	d093e4 <__mcmp+0x40>

00d09404 <__ulp>:
  d09404:	295ffc2c 	andhi	r5,r5,32752
  d09408:	013f3034 	movhi	r4,64704
  d0940c:	290b883a 	add	r5,r5,r4
  d09410:	0145c83a 	sub	r2,zero,r5
  d09414:	1007d53a 	srai	r3,r2,20
  d09418:	000d883a 	mov	r6,zero
  d0941c:	0140040e 	bge	zero,r5,d09430 <__ulp+0x2c>
  d09420:	280f883a 	mov	r7,r5
  d09424:	3807883a 	mov	r3,r7
  d09428:	3005883a 	mov	r2,r6
  d0942c:	f800283a 	ret
  d09430:	008004c4 	movi	r2,19
  d09434:	193ffb04 	addi	r4,r3,-20
  d09438:	10c00c0e 	bge	r2,r3,d0946c <__ulp+0x68>
  d0943c:	008007c4 	movi	r2,31
  d09440:	1107c83a 	sub	r3,r2,r4
  d09444:	00800784 	movi	r2,30
  d09448:	01400044 	movi	r5,1
  d0944c:	11000216 	blt	r2,r4,d09458 <__ulp+0x54>
  d09450:	00800044 	movi	r2,1
  d09454:	10ca983a 	sll	r5,r2,r3
  d09458:	000f883a 	mov	r7,zero
  d0945c:	280d883a 	mov	r6,r5
  d09460:	3807883a 	mov	r3,r7
  d09464:	3005883a 	mov	r2,r6
  d09468:	f800283a 	ret
  d0946c:	00800234 	movhi	r2,8
  d09470:	10cfd83a 	sra	r7,r2,r3
  d09474:	000d883a 	mov	r6,zero
  d09478:	3005883a 	mov	r2,r6
  d0947c:	3807883a 	mov	r3,r7
  d09480:	f800283a 	ret

00d09484 <__b2d>:
  d09484:	20800417 	ldw	r2,16(r4)
  d09488:	defff904 	addi	sp,sp,-28
  d0948c:	dd000415 	stw	r20,16(sp)
  d09490:	1085883a 	add	r2,r2,r2
  d09494:	25000504 	addi	r20,r4,20
  d09498:	1085883a 	add	r2,r2,r2
  d0949c:	dc000015 	stw	r16,0(sp)
  d094a0:	a0a1883a 	add	r16,r20,r2
  d094a4:	dd400515 	stw	r21,20(sp)
  d094a8:	857fff17 	ldw	r21,-4(r16)
  d094ac:	dc400115 	stw	r17,4(sp)
  d094b0:	dfc00615 	stw	ra,24(sp)
  d094b4:	a809883a 	mov	r4,r21
  d094b8:	2823883a 	mov	r17,r5
  d094bc:	dcc00315 	stw	r19,12(sp)
  d094c0:	dc800215 	stw	r18,8(sp)
  d094c4:	0d092700 	call	d09270 <__hi0bits>
  d094c8:	100b883a 	mov	r5,r2
  d094cc:	00800804 	movi	r2,32
  d094d0:	1145c83a 	sub	r2,r2,r5
  d094d4:	88800015 	stw	r2,0(r17)
  d094d8:	00800284 	movi	r2,10
  d094dc:	80ffff04 	addi	r3,r16,-4
  d094e0:	11401416 	blt	r2,r5,d09534 <__b2d+0xb0>
  d094e4:	008002c4 	movi	r2,11
  d094e8:	1149c83a 	sub	r4,r2,r5
  d094ec:	a0c02736 	bltu	r20,r3,d0958c <__b2d+0x108>
  d094f0:	000d883a 	mov	r6,zero
  d094f4:	28800544 	addi	r2,r5,21
  d094f8:	a906d83a 	srl	r3,r21,r4
  d094fc:	a884983a 	sll	r2,r21,r2
  d09500:	1ccffc34 	orhi	r19,r3,16368
  d09504:	11a4b03a 	or	r18,r2,r6
  d09508:	9005883a 	mov	r2,r18
  d0950c:	9807883a 	mov	r3,r19
  d09510:	dfc00617 	ldw	ra,24(sp)
  d09514:	dd400517 	ldw	r21,20(sp)
  d09518:	dd000417 	ldw	r20,16(sp)
  d0951c:	dcc00317 	ldw	r19,12(sp)
  d09520:	dc800217 	ldw	r18,8(sp)
  d09524:	dc400117 	ldw	r17,4(sp)
  d09528:	dc000017 	ldw	r16,0(sp)
  d0952c:	dec00704 	addi	sp,sp,28
  d09530:	f800283a 	ret
  d09534:	a0c00e36 	bltu	r20,r3,d09570 <__b2d+0xec>
  d09538:	293ffd44 	addi	r4,r5,-11
  d0953c:	000d883a 	mov	r6,zero
  d09540:	20000f26 	beq	r4,zero,d09580 <__b2d+0xfc>
  d09544:	00800804 	movi	r2,32
  d09548:	110bc83a 	sub	r5,r2,r4
  d0954c:	a0c01236 	bltu	r20,r3,d09598 <__b2d+0x114>
  d09550:	000f883a 	mov	r7,zero
  d09554:	a904983a 	sll	r2,r21,r4
  d09558:	3146d83a 	srl	r3,r6,r5
  d0955c:	3108983a 	sll	r4,r6,r4
  d09560:	108ffc34 	orhi	r2,r2,16368
  d09564:	18a6b03a 	or	r19,r3,r2
  d09568:	3924b03a 	or	r18,r7,r4
  d0956c:	003fe606 	br	d09508 <__b2d+0x84>
  d09570:	293ffd44 	addi	r4,r5,-11
  d09574:	81bffe17 	ldw	r6,-8(r16)
  d09578:	80fffe04 	addi	r3,r16,-8
  d0957c:	203ff11e 	bne	r4,zero,d09544 <__b2d+0xc0>
  d09580:	accffc34 	orhi	r19,r21,16368
  d09584:	3025883a 	mov	r18,r6
  d09588:	003fdf06 	br	d09508 <__b2d+0x84>
  d0958c:	18bfff17 	ldw	r2,-4(r3)
  d09590:	110cd83a 	srl	r6,r2,r4
  d09594:	003fd706 	br	d094f4 <__b2d+0x70>
  d09598:	18bfff17 	ldw	r2,-4(r3)
  d0959c:	114ed83a 	srl	r7,r2,r5
  d095a0:	003fec06 	br	d09554 <__b2d+0xd0>

00d095a4 <__ratio>:
  d095a4:	defff904 	addi	sp,sp,-28
  d095a8:	dc400215 	stw	r17,8(sp)
  d095ac:	2823883a 	mov	r17,r5
  d095b0:	d80b883a 	mov	r5,sp
  d095b4:	dfc00615 	stw	ra,24(sp)
  d095b8:	dd000515 	stw	r20,20(sp)
  d095bc:	dcc00415 	stw	r19,16(sp)
  d095c0:	dc800315 	stw	r18,12(sp)
  d095c4:	2025883a 	mov	r18,r4
  d095c8:	0d094840 	call	d09484 <__b2d>
  d095cc:	8809883a 	mov	r4,r17
  d095d0:	d9400104 	addi	r5,sp,4
  d095d4:	1027883a 	mov	r19,r2
  d095d8:	1829883a 	mov	r20,r3
  d095dc:	0d094840 	call	d09484 <__b2d>
  d095e0:	89000417 	ldw	r4,16(r17)
  d095e4:	91c00417 	ldw	r7,16(r18)
  d095e8:	d9800117 	ldw	r6,4(sp)
  d095ec:	180b883a 	mov	r5,r3
  d095f0:	390fc83a 	sub	r7,r7,r4
  d095f4:	1009883a 	mov	r4,r2
  d095f8:	d8800017 	ldw	r2,0(sp)
  d095fc:	380e917a 	slli	r7,r7,5
  d09600:	2011883a 	mov	r8,r4
  d09604:	1185c83a 	sub	r2,r2,r6
  d09608:	11c5883a 	add	r2,r2,r7
  d0960c:	1006953a 	slli	r3,r2,20
  d09610:	2813883a 	mov	r9,r5
  d09614:	00800d0e 	bge	zero,r2,d0964c <__ratio+0xa8>
  d09618:	1d29883a 	add	r20,r3,r20
  d0961c:	a00b883a 	mov	r5,r20
  d09620:	480f883a 	mov	r7,r9
  d09624:	9809883a 	mov	r4,r19
  d09628:	400d883a 	mov	r6,r8
  d0962c:	0d02f000 	call	d02f00 <__divdf3>
  d09630:	dfc00617 	ldw	ra,24(sp)
  d09634:	dd000517 	ldw	r20,20(sp)
  d09638:	dcc00417 	ldw	r19,16(sp)
  d0963c:	dc800317 	ldw	r18,12(sp)
  d09640:	dc400217 	ldw	r17,8(sp)
  d09644:	dec00704 	addi	sp,sp,28
  d09648:	f800283a 	ret
  d0964c:	28d3c83a 	sub	r9,r5,r3
  d09650:	003ff206 	br	d0961c <__ratio+0x78>

00d09654 <_mprec_log10>:
  d09654:	defffe04 	addi	sp,sp,-8
  d09658:	008005c4 	movi	r2,23
  d0965c:	dc000015 	stw	r16,0(sp)
  d09660:	dfc00115 	stw	ra,4(sp)
  d09664:	2021883a 	mov	r16,r4
  d09668:	11000c16 	blt	r2,r4,d0969c <_mprec_log10+0x48>
  d0966c:	200490fa 	slli	r2,r4,3
  d09670:	00c03474 	movhi	r3,209
  d09674:	18c47b04 	addi	r3,r3,4588
  d09678:	10c5883a 	add	r2,r2,r3
  d0967c:	12400117 	ldw	r9,4(r2)
  d09680:	12000017 	ldw	r8,0(r2)
  d09684:	4807883a 	mov	r3,r9
  d09688:	4005883a 	mov	r2,r8
  d0968c:	dfc00117 	ldw	ra,4(sp)
  d09690:	dc000017 	ldw	r16,0(sp)
  d09694:	dec00204 	addi	sp,sp,8
  d09698:	f800283a 	ret
  d0969c:	0011883a 	mov	r8,zero
  d096a0:	024ffc34 	movhi	r9,16368
  d096a4:	0005883a 	mov	r2,zero
  d096a8:	00d00934 	movhi	r3,16420
  d096ac:	480b883a 	mov	r5,r9
  d096b0:	4009883a 	mov	r4,r8
  d096b4:	180f883a 	mov	r7,r3
  d096b8:	100d883a 	mov	r6,r2
  d096bc:	0d0bb380 	call	d0bb38 <__muldf3>
  d096c0:	843fffc4 	addi	r16,r16,-1
  d096c4:	1011883a 	mov	r8,r2
  d096c8:	1813883a 	mov	r9,r3
  d096cc:	803ff51e 	bne	r16,zero,d096a4 <_mprec_log10+0x50>
  d096d0:	4005883a 	mov	r2,r8
  d096d4:	4807883a 	mov	r3,r9
  d096d8:	dfc00117 	ldw	ra,4(sp)
  d096dc:	dc000017 	ldw	r16,0(sp)
  d096e0:	dec00204 	addi	sp,sp,8
  d096e4:	f800283a 	ret

00d096e8 <__copybits>:
  d096e8:	297fffc4 	addi	r5,r5,-1
  d096ec:	30800417 	ldw	r2,16(r6)
  d096f0:	280bd17a 	srai	r5,r5,5
  d096f4:	31800504 	addi	r6,r6,20
  d096f8:	1085883a 	add	r2,r2,r2
  d096fc:	294b883a 	add	r5,r5,r5
  d09700:	294b883a 	add	r5,r5,r5
  d09704:	1085883a 	add	r2,r2,r2
  d09708:	290b883a 	add	r5,r5,r4
  d0970c:	3087883a 	add	r3,r6,r2
  d09710:	29400104 	addi	r5,r5,4
  d09714:	30c0052e 	bgeu	r6,r3,d0972c <__copybits+0x44>
  d09718:	30800017 	ldw	r2,0(r6)
  d0971c:	31800104 	addi	r6,r6,4
  d09720:	20800015 	stw	r2,0(r4)
  d09724:	21000104 	addi	r4,r4,4
  d09728:	30fffb36 	bltu	r6,r3,d09718 <__copybits+0x30>
  d0972c:	2140032e 	bgeu	r4,r5,d0973c <__copybits+0x54>
  d09730:	20000015 	stw	zero,0(r4)
  d09734:	21000104 	addi	r4,r4,4
  d09738:	217ffd36 	bltu	r4,r5,d09730 <__copybits+0x48>
  d0973c:	f800283a 	ret

00d09740 <__any_on>:
  d09740:	20800417 	ldw	r2,16(r4)
  d09744:	2807d17a 	srai	r3,r5,5
  d09748:	21000504 	addi	r4,r4,20
  d0974c:	10c00d0e 	bge	r2,r3,d09784 <__any_on+0x44>
  d09750:	1085883a 	add	r2,r2,r2
  d09754:	1085883a 	add	r2,r2,r2
  d09758:	208d883a 	add	r6,r4,r2
  d0975c:	2180182e 	bgeu	r4,r6,d097c0 <__any_on+0x80>
  d09760:	30bfff17 	ldw	r2,-4(r6)
  d09764:	30ffff04 	addi	r3,r6,-4
  d09768:	1000041e 	bne	r2,zero,d0977c <__any_on+0x3c>
  d0976c:	20c0142e 	bgeu	r4,r3,d097c0 <__any_on+0x80>
  d09770:	18ffff04 	addi	r3,r3,-4
  d09774:	18800017 	ldw	r2,0(r3)
  d09778:	103ffc26 	beq	r2,zero,d0976c <__any_on+0x2c>
  d0977c:	00800044 	movi	r2,1
  d09780:	f800283a 	ret
  d09784:	18800a0e 	bge	r3,r2,d097b0 <__any_on+0x70>
  d09788:	294007cc 	andi	r5,r5,31
  d0978c:	28000826 	beq	r5,zero,d097b0 <__any_on+0x70>
  d09790:	18c5883a 	add	r2,r3,r3
  d09794:	1085883a 	add	r2,r2,r2
  d09798:	208d883a 	add	r6,r4,r2
  d0979c:	30c00017 	ldw	r3,0(r6)
  d097a0:	1944d83a 	srl	r2,r3,r5
  d097a4:	1144983a 	sll	r2,r2,r5
  d097a8:	18bff41e 	bne	r3,r2,d0977c <__any_on+0x3c>
  d097ac:	003feb06 	br	d0975c <__any_on+0x1c>
  d097b0:	18c5883a 	add	r2,r3,r3
  d097b4:	1085883a 	add	r2,r2,r2
  d097b8:	208d883a 	add	r6,r4,r2
  d097bc:	003fe706 	br	d0975c <__any_on+0x1c>
  d097c0:	0005883a 	mov	r2,zero
  d097c4:	f800283a 	ret

00d097c8 <_Balloc>:
  d097c8:	20c01317 	ldw	r3,76(r4)
  d097cc:	defffb04 	addi	sp,sp,-20
  d097d0:	dcc00315 	stw	r19,12(sp)
  d097d4:	dc800215 	stw	r18,8(sp)
  d097d8:	dfc00415 	stw	ra,16(sp)
  d097dc:	2825883a 	mov	r18,r5
  d097e0:	dc400115 	stw	r17,4(sp)
  d097e4:	dc000015 	stw	r16,0(sp)
  d097e8:	2027883a 	mov	r19,r4
  d097ec:	01800404 	movi	r6,16
  d097f0:	01400104 	movi	r5,4
  d097f4:	18001726 	beq	r3,zero,d09854 <_Balloc+0x8c>
  d097f8:	01400044 	movi	r5,1
  d097fc:	9485883a 	add	r2,r18,r18
  d09800:	2ca2983a 	sll	r17,r5,r18
  d09804:	1085883a 	add	r2,r2,r2
  d09808:	10c7883a 	add	r3,r2,r3
  d0980c:	1c000017 	ldw	r16,0(r3)
  d09810:	8c4d883a 	add	r6,r17,r17
  d09814:	318d883a 	add	r6,r6,r6
  d09818:	9809883a 	mov	r4,r19
  d0981c:	31800504 	addi	r6,r6,20
  d09820:	80001226 	beq	r16,zero,d0986c <_Balloc+0xa4>
  d09824:	80800017 	ldw	r2,0(r16)
  d09828:	18800015 	stw	r2,0(r3)
  d0982c:	80000415 	stw	zero,16(r16)
  d09830:	80000315 	stw	zero,12(r16)
  d09834:	8005883a 	mov	r2,r16
  d09838:	dfc00417 	ldw	ra,16(sp)
  d0983c:	dcc00317 	ldw	r19,12(sp)
  d09840:	dc800217 	ldw	r18,8(sp)
  d09844:	dc400117 	ldw	r17,4(sp)
  d09848:	dc000017 	ldw	r16,0(sp)
  d0984c:	dec00504 	addi	sp,sp,20
  d09850:	f800283a 	ret
  d09854:	0d0ab900 	call	d0ab90 <_calloc_r>
  d09858:	1007883a 	mov	r3,r2
  d0985c:	0021883a 	mov	r16,zero
  d09860:	98801315 	stw	r2,76(r19)
  d09864:	103fe41e 	bne	r2,zero,d097f8 <_Balloc+0x30>
  d09868:	003ff206 	br	d09834 <_Balloc+0x6c>
  d0986c:	0d0ab900 	call	d0ab90 <_calloc_r>
  d09870:	103ff026 	beq	r2,zero,d09834 <_Balloc+0x6c>
  d09874:	1021883a 	mov	r16,r2
  d09878:	14800115 	stw	r18,4(r2)
  d0987c:	14400215 	stw	r17,8(r2)
  d09880:	003fea06 	br	d0982c <_Balloc+0x64>

00d09884 <__d2b>:
  d09884:	defff504 	addi	sp,sp,-44
  d09888:	dcc00515 	stw	r19,20(sp)
  d0988c:	04c00044 	movi	r19,1
  d09890:	dc000215 	stw	r16,8(sp)
  d09894:	2821883a 	mov	r16,r5
  d09898:	980b883a 	mov	r5,r19
  d0989c:	ddc00915 	stw	r23,36(sp)
  d098a0:	dd800815 	stw	r22,32(sp)
  d098a4:	dd400715 	stw	r21,28(sp)
  d098a8:	dd000615 	stw	r20,24(sp)
  d098ac:	dc800415 	stw	r18,16(sp)
  d098b0:	dc400315 	stw	r17,12(sp)
  d098b4:	dfc00a15 	stw	ra,40(sp)
  d098b8:	3023883a 	mov	r17,r6
  d098bc:	382d883a 	mov	r22,r7
  d098c0:	ddc00b17 	ldw	r23,44(sp)
  d098c4:	0d097c80 	call	d097c8 <_Balloc>
  d098c8:	1025883a 	mov	r18,r2
  d098cc:	00a00034 	movhi	r2,32768
  d098d0:	10bfffc4 	addi	r2,r2,-1
  d098d4:	8888703a 	and	r4,r17,r2
  d098d8:	202ad53a 	srli	r21,r4,20
  d098dc:	00800434 	movhi	r2,16
  d098e0:	10bfffc4 	addi	r2,r2,-1
  d098e4:	8886703a 	and	r3,r17,r2
  d098e8:	a829003a 	cmpeq	r20,r21,zero
  d098ec:	800b883a 	mov	r5,r16
  d098f0:	d8c00115 	stw	r3,4(sp)
  d098f4:	94000504 	addi	r16,r18,20
  d098f8:	a000021e 	bne	r20,zero,d09904 <__d2b+0x80>
  d098fc:	18c00434 	orhi	r3,r3,16
  d09900:	d8c00115 	stw	r3,4(sp)
  d09904:	28002726 	beq	r5,zero,d099a4 <__d2b+0x120>
  d09908:	d809883a 	mov	r4,sp
  d0990c:	d9400015 	stw	r5,0(sp)
  d09910:	0d092e00 	call	d092e0 <__lo0bits>
  d09914:	100d883a 	mov	r6,r2
  d09918:	10003526 	beq	r2,zero,d099f0 <__d2b+0x16c>
  d0991c:	d8c00117 	ldw	r3,4(sp)
  d09920:	00800804 	movi	r2,32
  d09924:	1185c83a 	sub	r2,r2,r6
  d09928:	d9000017 	ldw	r4,0(sp)
  d0992c:	1886983a 	sll	r3,r3,r2
  d09930:	1906b03a 	or	r3,r3,r4
  d09934:	90c00515 	stw	r3,20(r18)
  d09938:	d8c00117 	ldw	r3,4(sp)
  d0993c:	1986d83a 	srl	r3,r3,r6
  d09940:	d8c00115 	stw	r3,4(sp)
  d09944:	180b003a 	cmpeq	r5,r3,zero
  d09948:	00800084 	movi	r2,2
  d0994c:	114bc83a 	sub	r5,r2,r5
  d09950:	80c00115 	stw	r3,4(r16)
  d09954:	91400415 	stw	r5,16(r18)
  d09958:	a0001a1e 	bne	r20,zero,d099c4 <__d2b+0x140>
  d0995c:	3545883a 	add	r2,r6,r21
  d09960:	10bef344 	addi	r2,r2,-1075
  d09964:	00c00d44 	movi	r3,53
  d09968:	b0800015 	stw	r2,0(r22)
  d0996c:	1987c83a 	sub	r3,r3,r6
  d09970:	b8c00015 	stw	r3,0(r23)
  d09974:	9005883a 	mov	r2,r18
  d09978:	dfc00a17 	ldw	ra,40(sp)
  d0997c:	ddc00917 	ldw	r23,36(sp)
  d09980:	dd800817 	ldw	r22,32(sp)
  d09984:	dd400717 	ldw	r21,28(sp)
  d09988:	dd000617 	ldw	r20,24(sp)
  d0998c:	dcc00517 	ldw	r19,20(sp)
  d09990:	dc800417 	ldw	r18,16(sp)
  d09994:	dc400317 	ldw	r17,12(sp)
  d09998:	dc000217 	ldw	r16,8(sp)
  d0999c:	dec00b04 	addi	sp,sp,44
  d099a0:	f800283a 	ret
  d099a4:	d9000104 	addi	r4,sp,4
  d099a8:	0d092e00 	call	d092e0 <__lo0bits>
  d099ac:	11800804 	addi	r6,r2,32
  d099b0:	d8800117 	ldw	r2,4(sp)
  d099b4:	94c00415 	stw	r19,16(r18)
  d099b8:	980b883a 	mov	r5,r19
  d099bc:	90800515 	stw	r2,20(r18)
  d099c0:	a03fe626 	beq	r20,zero,d0995c <__d2b+0xd8>
  d099c4:	2945883a 	add	r2,r5,r5
  d099c8:	1085883a 	add	r2,r2,r2
  d099cc:	1405883a 	add	r2,r2,r16
  d099d0:	113fff17 	ldw	r4,-4(r2)
  d099d4:	30fef384 	addi	r3,r6,-1074
  d099d8:	2820917a 	slli	r16,r5,5
  d099dc:	b0c00015 	stw	r3,0(r22)
  d099e0:	0d092700 	call	d09270 <__hi0bits>
  d099e4:	80a1c83a 	sub	r16,r16,r2
  d099e8:	bc000015 	stw	r16,0(r23)
  d099ec:	003fe106 	br	d09974 <__d2b+0xf0>
  d099f0:	d8800017 	ldw	r2,0(sp)
  d099f4:	90800515 	stw	r2,20(r18)
  d099f8:	d8c00117 	ldw	r3,4(sp)
  d099fc:	003fd106 	br	d09944 <__d2b+0xc0>

00d09a00 <__mdiff>:
  d09a00:	defffb04 	addi	sp,sp,-20
  d09a04:	dc000015 	stw	r16,0(sp)
  d09a08:	2821883a 	mov	r16,r5
  d09a0c:	dc800215 	stw	r18,8(sp)
  d09a10:	300b883a 	mov	r5,r6
  d09a14:	2025883a 	mov	r18,r4
  d09a18:	8009883a 	mov	r4,r16
  d09a1c:	dc400115 	stw	r17,4(sp)
  d09a20:	dfc00415 	stw	ra,16(sp)
  d09a24:	dcc00315 	stw	r19,12(sp)
  d09a28:	3023883a 	mov	r17,r6
  d09a2c:	0d093a40 	call	d093a4 <__mcmp>
  d09a30:	10004226 	beq	r2,zero,d09b3c <__mdiff+0x13c>
  d09a34:	10005016 	blt	r2,zero,d09b78 <__mdiff+0x178>
  d09a38:	0027883a 	mov	r19,zero
  d09a3c:	81400117 	ldw	r5,4(r16)
  d09a40:	9009883a 	mov	r4,r18
  d09a44:	0d097c80 	call	d097c8 <_Balloc>
  d09a48:	1019883a 	mov	r12,r2
  d09a4c:	82800417 	ldw	r10,16(r16)
  d09a50:	88800417 	ldw	r2,16(r17)
  d09a54:	81800504 	addi	r6,r16,20
  d09a58:	5287883a 	add	r3,r10,r10
  d09a5c:	1085883a 	add	r2,r2,r2
  d09a60:	18c7883a 	add	r3,r3,r3
  d09a64:	1085883a 	add	r2,r2,r2
  d09a68:	8a000504 	addi	r8,r17,20
  d09a6c:	64c00315 	stw	r19,12(r12)
  d09a70:	30db883a 	add	r13,r6,r3
  d09a74:	4097883a 	add	r11,r8,r2
  d09a78:	61c00504 	addi	r7,r12,20
  d09a7c:	0013883a 	mov	r9,zero
  d09a80:	31000017 	ldw	r4,0(r6)
  d09a84:	41400017 	ldw	r5,0(r8)
  d09a88:	42000104 	addi	r8,r8,4
  d09a8c:	20bfffcc 	andi	r2,r4,65535
  d09a90:	28ffffcc 	andi	r3,r5,65535
  d09a94:	10c5c83a 	sub	r2,r2,r3
  d09a98:	1245883a 	add	r2,r2,r9
  d09a9c:	2008d43a 	srli	r4,r4,16
  d09aa0:	280ad43a 	srli	r5,r5,16
  d09aa4:	1007d43a 	srai	r3,r2,16
  d09aa8:	3880000d 	sth	r2,0(r7)
  d09aac:	2149c83a 	sub	r4,r4,r5
  d09ab0:	20c9883a 	add	r4,r4,r3
  d09ab4:	3900008d 	sth	r4,2(r7)
  d09ab8:	31800104 	addi	r6,r6,4
  d09abc:	39c00104 	addi	r7,r7,4
  d09ac0:	2013d43a 	srai	r9,r4,16
  d09ac4:	42ffee36 	bltu	r8,r11,d09a80 <__mdiff+0x80>
  d09ac8:	33400c2e 	bgeu	r6,r13,d09afc <__mdiff+0xfc>
  d09acc:	30800017 	ldw	r2,0(r6)
  d09ad0:	31800104 	addi	r6,r6,4
  d09ad4:	10ffffcc 	andi	r3,r2,65535
  d09ad8:	1a47883a 	add	r3,r3,r9
  d09adc:	1004d43a 	srli	r2,r2,16
  d09ae0:	1809d43a 	srai	r4,r3,16
  d09ae4:	38c0000d 	sth	r3,0(r7)
  d09ae8:	1105883a 	add	r2,r2,r4
  d09aec:	3880008d 	sth	r2,2(r7)
  d09af0:	1013d43a 	srai	r9,r2,16
  d09af4:	39c00104 	addi	r7,r7,4
  d09af8:	337ff436 	bltu	r6,r13,d09acc <__mdiff+0xcc>
  d09afc:	38bfff17 	ldw	r2,-4(r7)
  d09b00:	38ffff04 	addi	r3,r7,-4
  d09b04:	1000041e 	bne	r2,zero,d09b18 <__mdiff+0x118>
  d09b08:	18ffff04 	addi	r3,r3,-4
  d09b0c:	18800017 	ldw	r2,0(r3)
  d09b10:	52bfffc4 	addi	r10,r10,-1
  d09b14:	103ffc26 	beq	r2,zero,d09b08 <__mdiff+0x108>
  d09b18:	6005883a 	mov	r2,r12
  d09b1c:	62800415 	stw	r10,16(r12)
  d09b20:	dfc00417 	ldw	ra,16(sp)
  d09b24:	dcc00317 	ldw	r19,12(sp)
  d09b28:	dc800217 	ldw	r18,8(sp)
  d09b2c:	dc400117 	ldw	r17,4(sp)
  d09b30:	dc000017 	ldw	r16,0(sp)
  d09b34:	dec00504 	addi	sp,sp,20
  d09b38:	f800283a 	ret
  d09b3c:	9009883a 	mov	r4,r18
  d09b40:	000b883a 	mov	r5,zero
  d09b44:	0d097c80 	call	d097c8 <_Balloc>
  d09b48:	1019883a 	mov	r12,r2
  d09b4c:	00800044 	movi	r2,1
  d09b50:	60800415 	stw	r2,16(r12)
  d09b54:	6005883a 	mov	r2,r12
  d09b58:	60000515 	stw	zero,20(r12)
  d09b5c:	dfc00417 	ldw	ra,16(sp)
  d09b60:	dcc00317 	ldw	r19,12(sp)
  d09b64:	dc800217 	ldw	r18,8(sp)
  d09b68:	dc400117 	ldw	r17,4(sp)
  d09b6c:	dc000017 	ldw	r16,0(sp)
  d09b70:	dec00504 	addi	sp,sp,20
  d09b74:	f800283a 	ret
  d09b78:	880d883a 	mov	r6,r17
  d09b7c:	04c00044 	movi	r19,1
  d09b80:	8023883a 	mov	r17,r16
  d09b84:	3021883a 	mov	r16,r6
  d09b88:	003fac06 	br	d09a3c <__mdiff+0x3c>

00d09b8c <__lshift>:
  d09b8c:	defff904 	addi	sp,sp,-28
  d09b90:	28800417 	ldw	r2,16(r5)
  d09b94:	dc000015 	stw	r16,0(sp)
  d09b98:	3021d17a 	srai	r16,r6,5
  d09b9c:	28c00217 	ldw	r3,8(r5)
  d09ba0:	10800044 	addi	r2,r2,1
  d09ba4:	dc400115 	stw	r17,4(sp)
  d09ba8:	80a3883a 	add	r17,r16,r2
  d09bac:	dd400515 	stw	r21,20(sp)
  d09bb0:	dd000415 	stw	r20,16(sp)
  d09bb4:	dc800215 	stw	r18,8(sp)
  d09bb8:	dfc00615 	stw	ra,24(sp)
  d09bbc:	2825883a 	mov	r18,r5
  d09bc0:	dcc00315 	stw	r19,12(sp)
  d09bc4:	3029883a 	mov	r20,r6
  d09bc8:	202b883a 	mov	r21,r4
  d09bcc:	29400117 	ldw	r5,4(r5)
  d09bd0:	1c40030e 	bge	r3,r17,d09be0 <__lshift+0x54>
  d09bd4:	18c7883a 	add	r3,r3,r3
  d09bd8:	29400044 	addi	r5,r5,1
  d09bdc:	1c7ffd16 	blt	r3,r17,d09bd4 <__lshift+0x48>
  d09be0:	a809883a 	mov	r4,r21
  d09be4:	0d097c80 	call	d097c8 <_Balloc>
  d09be8:	1027883a 	mov	r19,r2
  d09bec:	11400504 	addi	r5,r2,20
  d09bf0:	0400090e 	bge	zero,r16,d09c18 <__lshift+0x8c>
  d09bf4:	2805883a 	mov	r2,r5
  d09bf8:	0007883a 	mov	r3,zero
  d09bfc:	18c00044 	addi	r3,r3,1
  d09c00:	10000015 	stw	zero,0(r2)
  d09c04:	10800104 	addi	r2,r2,4
  d09c08:	80fffc1e 	bne	r16,r3,d09bfc <__lshift+0x70>
  d09c0c:	8405883a 	add	r2,r16,r16
  d09c10:	1085883a 	add	r2,r2,r2
  d09c14:	288b883a 	add	r5,r5,r2
  d09c18:	90800417 	ldw	r2,16(r18)
  d09c1c:	91000504 	addi	r4,r18,20
  d09c20:	a18007cc 	andi	r6,r20,31
  d09c24:	1085883a 	add	r2,r2,r2
  d09c28:	1085883a 	add	r2,r2,r2
  d09c2c:	208f883a 	add	r7,r4,r2
  d09c30:	30001e26 	beq	r6,zero,d09cac <__lshift+0x120>
  d09c34:	00800804 	movi	r2,32
  d09c38:	1191c83a 	sub	r8,r2,r6
  d09c3c:	0007883a 	mov	r3,zero
  d09c40:	20800017 	ldw	r2,0(r4)
  d09c44:	1184983a 	sll	r2,r2,r6
  d09c48:	1884b03a 	or	r2,r3,r2
  d09c4c:	28800015 	stw	r2,0(r5)
  d09c50:	20c00017 	ldw	r3,0(r4)
  d09c54:	21000104 	addi	r4,r4,4
  d09c58:	29400104 	addi	r5,r5,4
  d09c5c:	1a06d83a 	srl	r3,r3,r8
  d09c60:	21fff736 	bltu	r4,r7,d09c40 <__lshift+0xb4>
  d09c64:	28c00015 	stw	r3,0(r5)
  d09c68:	18000126 	beq	r3,zero,d09c70 <__lshift+0xe4>
  d09c6c:	8c400044 	addi	r17,r17,1
  d09c70:	88bfffc4 	addi	r2,r17,-1
  d09c74:	98800415 	stw	r2,16(r19)
  d09c78:	a809883a 	mov	r4,r21
  d09c7c:	900b883a 	mov	r5,r18
  d09c80:	0d092480 	call	d09248 <_Bfree>
  d09c84:	9805883a 	mov	r2,r19
  d09c88:	dfc00617 	ldw	ra,24(sp)
  d09c8c:	dd400517 	ldw	r21,20(sp)
  d09c90:	dd000417 	ldw	r20,16(sp)
  d09c94:	dcc00317 	ldw	r19,12(sp)
  d09c98:	dc800217 	ldw	r18,8(sp)
  d09c9c:	dc400117 	ldw	r17,4(sp)
  d09ca0:	dc000017 	ldw	r16,0(sp)
  d09ca4:	dec00704 	addi	sp,sp,28
  d09ca8:	f800283a 	ret
  d09cac:	20800017 	ldw	r2,0(r4)
  d09cb0:	21000104 	addi	r4,r4,4
  d09cb4:	28800015 	stw	r2,0(r5)
  d09cb8:	29400104 	addi	r5,r5,4
  d09cbc:	21ffec2e 	bgeu	r4,r7,d09c70 <__lshift+0xe4>
  d09cc0:	20800017 	ldw	r2,0(r4)
  d09cc4:	21000104 	addi	r4,r4,4
  d09cc8:	28800015 	stw	r2,0(r5)
  d09ccc:	29400104 	addi	r5,r5,4
  d09cd0:	21fff636 	bltu	r4,r7,d09cac <__lshift+0x120>
  d09cd4:	003fe606 	br	d09c70 <__lshift+0xe4>

00d09cd8 <__multiply>:
  d09cd8:	defff904 	addi	sp,sp,-28
  d09cdc:	dcc00315 	stw	r19,12(sp)
  d09ce0:	dc800215 	stw	r18,8(sp)
  d09ce4:	2cc00417 	ldw	r19,16(r5)
  d09ce8:	34800417 	ldw	r18,16(r6)
  d09cec:	dd000415 	stw	r20,16(sp)
  d09cf0:	dc400115 	stw	r17,4(sp)
  d09cf4:	dfc00615 	stw	ra,24(sp)
  d09cf8:	dd400515 	stw	r21,20(sp)
  d09cfc:	dc000015 	stw	r16,0(sp)
  d09d00:	2823883a 	mov	r17,r5
  d09d04:	3029883a 	mov	r20,r6
  d09d08:	9c80040e 	bge	r19,r18,d09d1c <__multiply+0x44>
  d09d0c:	9027883a 	mov	r19,r18
  d09d10:	2c800417 	ldw	r18,16(r5)
  d09d14:	2829883a 	mov	r20,r5
  d09d18:	3023883a 	mov	r17,r6
  d09d1c:	88800217 	ldw	r2,8(r17)
  d09d20:	9ca1883a 	add	r16,r19,r18
  d09d24:	89400117 	ldw	r5,4(r17)
  d09d28:	1400010e 	bge	r2,r16,d09d30 <__multiply+0x58>
  d09d2c:	29400044 	addi	r5,r5,1
  d09d30:	0d097c80 	call	d097c8 <_Balloc>
  d09d34:	102b883a 	mov	r21,r2
  d09d38:	8405883a 	add	r2,r16,r16
  d09d3c:	1085883a 	add	r2,r2,r2
  d09d40:	a9000504 	addi	r4,r21,20
  d09d44:	209d883a 	add	r14,r4,r2
  d09d48:	2380042e 	bgeu	r4,r14,d09d5c <__multiply+0x84>
  d09d4c:	2005883a 	mov	r2,r4
  d09d50:	10000015 	stw	zero,0(r2)
  d09d54:	10800104 	addi	r2,r2,4
  d09d58:	13bffd36 	bltu	r2,r14,d09d50 <__multiply+0x78>
  d09d5c:	9485883a 	add	r2,r18,r18
  d09d60:	9cc7883a 	add	r3,r19,r19
  d09d64:	a1800504 	addi	r6,r20,20
  d09d68:	1085883a 	add	r2,r2,r2
  d09d6c:	8b400504 	addi	r13,r17,20
  d09d70:	18c7883a 	add	r3,r3,r3
  d09d74:	309f883a 	add	r15,r6,r2
  d09d78:	68d7883a 	add	r11,r13,r3
  d09d7c:	33c03b2e 	bgeu	r6,r15,d09e6c <__multiply+0x194>
  d09d80:	2019883a 	mov	r12,r4
  d09d84:	30800017 	ldw	r2,0(r6)
  d09d88:	127fffcc 	andi	r9,r2,65535
  d09d8c:	48001826 	beq	r9,zero,d09df0 <__multiply+0x118>
  d09d90:	6811883a 	mov	r8,r13
  d09d94:	600f883a 	mov	r7,r12
  d09d98:	0015883a 	mov	r10,zero
  d09d9c:	40c00017 	ldw	r3,0(r8)
  d09da0:	39400017 	ldw	r5,0(r7)
  d09da4:	42000104 	addi	r8,r8,4
  d09da8:	193fffcc 	andi	r4,r3,65535
  d09dac:	4909383a 	mul	r4,r9,r4
  d09db0:	1806d43a 	srli	r3,r3,16
  d09db4:	28bfffcc 	andi	r2,r5,65535
  d09db8:	5085883a 	add	r2,r10,r2
  d09dbc:	2089883a 	add	r4,r4,r2
  d09dc0:	48c7383a 	mul	r3,r9,r3
  d09dc4:	280ad43a 	srli	r5,r5,16
  d09dc8:	2004d43a 	srli	r2,r4,16
  d09dcc:	3900000d 	sth	r4,0(r7)
  d09dd0:	1947883a 	add	r3,r3,r5
  d09dd4:	10c5883a 	add	r2,r2,r3
  d09dd8:	3880008d 	sth	r2,2(r7)
  d09ddc:	1014d43a 	srli	r10,r2,16
  d09de0:	39c00104 	addi	r7,r7,4
  d09de4:	42ffed36 	bltu	r8,r11,d09d9c <__multiply+0xc4>
  d09de8:	3a800015 	stw	r10,0(r7)
  d09dec:	30800017 	ldw	r2,0(r6)
  d09df0:	1012d43a 	srli	r9,r2,16
  d09df4:	48001926 	beq	r9,zero,d09e5c <__multiply+0x184>
  d09df8:	60800017 	ldw	r2,0(r12)
  d09dfc:	6811883a 	mov	r8,r13
  d09e00:	600f883a 	mov	r7,r12
  d09e04:	0015883a 	mov	r10,zero
  d09e08:	100b883a 	mov	r5,r2
  d09e0c:	41000017 	ldw	r4,0(r8)
  d09e10:	2806d43a 	srli	r3,r5,16
  d09e14:	3880000d 	sth	r2,0(r7)
  d09e18:	20bfffcc 	andi	r2,r4,65535
  d09e1c:	4885383a 	mul	r2,r9,r2
  d09e20:	50c7883a 	add	r3,r10,r3
  d09e24:	2008d43a 	srli	r4,r4,16
  d09e28:	10c5883a 	add	r2,r2,r3
  d09e2c:	3880008d 	sth	r2,2(r7)
  d09e30:	39c00104 	addi	r7,r7,4
  d09e34:	39400017 	ldw	r5,0(r7)
  d09e38:	4909383a 	mul	r4,r9,r4
  d09e3c:	1004d43a 	srli	r2,r2,16
  d09e40:	28ffffcc 	andi	r3,r5,65535
  d09e44:	20c9883a 	add	r4,r4,r3
  d09e48:	1105883a 	add	r2,r2,r4
  d09e4c:	42000104 	addi	r8,r8,4
  d09e50:	1014d43a 	srli	r10,r2,16
  d09e54:	42ffed36 	bltu	r8,r11,d09e0c <__multiply+0x134>
  d09e58:	38800015 	stw	r2,0(r7)
  d09e5c:	31800104 	addi	r6,r6,4
  d09e60:	33c0022e 	bgeu	r6,r15,d09e6c <__multiply+0x194>
  d09e64:	63000104 	addi	r12,r12,4
  d09e68:	003fc606 	br	d09d84 <__multiply+0xac>
  d09e6c:	0400090e 	bge	zero,r16,d09e94 <__multiply+0x1bc>
  d09e70:	70bfff17 	ldw	r2,-4(r14)
  d09e74:	70ffff04 	addi	r3,r14,-4
  d09e78:	10000326 	beq	r2,zero,d09e88 <__multiply+0x1b0>
  d09e7c:	00000506 	br	d09e94 <__multiply+0x1bc>
  d09e80:	18800017 	ldw	r2,0(r3)
  d09e84:	1000031e 	bne	r2,zero,d09e94 <__multiply+0x1bc>
  d09e88:	843fffc4 	addi	r16,r16,-1
  d09e8c:	18ffff04 	addi	r3,r3,-4
  d09e90:	803ffb1e 	bne	r16,zero,d09e80 <__multiply+0x1a8>
  d09e94:	a805883a 	mov	r2,r21
  d09e98:	ac000415 	stw	r16,16(r21)
  d09e9c:	dfc00617 	ldw	ra,24(sp)
  d09ea0:	dd400517 	ldw	r21,20(sp)
  d09ea4:	dd000417 	ldw	r20,16(sp)
  d09ea8:	dcc00317 	ldw	r19,12(sp)
  d09eac:	dc800217 	ldw	r18,8(sp)
  d09eb0:	dc400117 	ldw	r17,4(sp)
  d09eb4:	dc000017 	ldw	r16,0(sp)
  d09eb8:	dec00704 	addi	sp,sp,28
  d09ebc:	f800283a 	ret

00d09ec0 <__i2b>:
  d09ec0:	defffd04 	addi	sp,sp,-12
  d09ec4:	dc000015 	stw	r16,0(sp)
  d09ec8:	04000044 	movi	r16,1
  d09ecc:	dc800115 	stw	r18,4(sp)
  d09ed0:	2825883a 	mov	r18,r5
  d09ed4:	800b883a 	mov	r5,r16
  d09ed8:	dfc00215 	stw	ra,8(sp)
  d09edc:	0d097c80 	call	d097c8 <_Balloc>
  d09ee0:	14000415 	stw	r16,16(r2)
  d09ee4:	14800515 	stw	r18,20(r2)
  d09ee8:	dfc00217 	ldw	ra,8(sp)
  d09eec:	dc800117 	ldw	r18,4(sp)
  d09ef0:	dc000017 	ldw	r16,0(sp)
  d09ef4:	dec00304 	addi	sp,sp,12
  d09ef8:	f800283a 	ret

00d09efc <__multadd>:
  d09efc:	defffa04 	addi	sp,sp,-24
  d09f00:	dc800215 	stw	r18,8(sp)
  d09f04:	2c800417 	ldw	r18,16(r5)
  d09f08:	dd000415 	stw	r20,16(sp)
  d09f0c:	dcc00315 	stw	r19,12(sp)
  d09f10:	dc000015 	stw	r16,0(sp)
  d09f14:	dfc00515 	stw	ra,20(sp)
  d09f18:	3821883a 	mov	r16,r7
  d09f1c:	dc400115 	stw	r17,4(sp)
  d09f20:	2827883a 	mov	r19,r5
  d09f24:	2029883a 	mov	r20,r4
  d09f28:	2a000504 	addi	r8,r5,20
  d09f2c:	000f883a 	mov	r7,zero
  d09f30:	40800017 	ldw	r2,0(r8)
  d09f34:	39c00044 	addi	r7,r7,1
  d09f38:	10ffffcc 	andi	r3,r2,65535
  d09f3c:	1987383a 	mul	r3,r3,r6
  d09f40:	1004d43a 	srli	r2,r2,16
  d09f44:	1c07883a 	add	r3,r3,r16
  d09f48:	180ad43a 	srli	r5,r3,16
  d09f4c:	1185383a 	mul	r2,r2,r6
  d09f50:	18ffffcc 	andi	r3,r3,65535
  d09f54:	1145883a 	add	r2,r2,r5
  d09f58:	1008943a 	slli	r4,r2,16
  d09f5c:	1020d43a 	srli	r16,r2,16
  d09f60:	20c9883a 	add	r4,r4,r3
  d09f64:	41000015 	stw	r4,0(r8)
  d09f68:	42000104 	addi	r8,r8,4
  d09f6c:	3cbff016 	blt	r7,r18,d09f30 <__multadd+0x34>
  d09f70:	80000826 	beq	r16,zero,d09f94 <__multadd+0x98>
  d09f74:	98800217 	ldw	r2,8(r19)
  d09f78:	90800f0e 	bge	r18,r2,d09fb8 <__multadd+0xbc>
  d09f7c:	9485883a 	add	r2,r18,r18
  d09f80:	1085883a 	add	r2,r2,r2
  d09f84:	14c5883a 	add	r2,r2,r19
  d09f88:	90c00044 	addi	r3,r18,1
  d09f8c:	14000515 	stw	r16,20(r2)
  d09f90:	98c00415 	stw	r3,16(r19)
  d09f94:	9805883a 	mov	r2,r19
  d09f98:	dfc00517 	ldw	ra,20(sp)
  d09f9c:	dd000417 	ldw	r20,16(sp)
  d09fa0:	dcc00317 	ldw	r19,12(sp)
  d09fa4:	dc800217 	ldw	r18,8(sp)
  d09fa8:	dc400117 	ldw	r17,4(sp)
  d09fac:	dc000017 	ldw	r16,0(sp)
  d09fb0:	dec00604 	addi	sp,sp,24
  d09fb4:	f800283a 	ret
  d09fb8:	99400117 	ldw	r5,4(r19)
  d09fbc:	a009883a 	mov	r4,r20
  d09fc0:	29400044 	addi	r5,r5,1
  d09fc4:	0d097c80 	call	d097c8 <_Balloc>
  d09fc8:	99800417 	ldw	r6,16(r19)
  d09fcc:	99400304 	addi	r5,r19,12
  d09fd0:	11000304 	addi	r4,r2,12
  d09fd4:	318d883a 	add	r6,r6,r6
  d09fd8:	318d883a 	add	r6,r6,r6
  d09fdc:	31800204 	addi	r6,r6,8
  d09fe0:	1023883a 	mov	r17,r2
  d09fe4:	0d090300 	call	d09030 <memcpy>
  d09fe8:	980b883a 	mov	r5,r19
  d09fec:	a009883a 	mov	r4,r20
  d09ff0:	0d092480 	call	d09248 <_Bfree>
  d09ff4:	8827883a 	mov	r19,r17
  d09ff8:	003fe006 	br	d09f7c <__multadd+0x80>

00d09ffc <__pow5mult>:
  d09ffc:	defffa04 	addi	sp,sp,-24
  d0a000:	308000cc 	andi	r2,r6,3
  d0a004:	dd000415 	stw	r20,16(sp)
  d0a008:	dcc00315 	stw	r19,12(sp)
  d0a00c:	dc000015 	stw	r16,0(sp)
  d0a010:	dfc00515 	stw	ra,20(sp)
  d0a014:	dc800215 	stw	r18,8(sp)
  d0a018:	dc400115 	stw	r17,4(sp)
  d0a01c:	3021883a 	mov	r16,r6
  d0a020:	2027883a 	mov	r19,r4
  d0a024:	2829883a 	mov	r20,r5
  d0a028:	10002b1e 	bne	r2,zero,d0a0d8 <__pow5mult+0xdc>
  d0a02c:	8025d0ba 	srai	r18,r16,2
  d0a030:	90001b26 	beq	r18,zero,d0a0a0 <__pow5mult+0xa4>
  d0a034:	9c001217 	ldw	r16,72(r19)
  d0a038:	8000081e 	bne	r16,zero,d0a05c <__pow5mult+0x60>
  d0a03c:	00003006 	br	d0a100 <__pow5mult+0x104>
  d0a040:	800b883a 	mov	r5,r16
  d0a044:	800d883a 	mov	r6,r16
  d0a048:	9809883a 	mov	r4,r19
  d0a04c:	90001426 	beq	r18,zero,d0a0a0 <__pow5mult+0xa4>
  d0a050:	80800017 	ldw	r2,0(r16)
  d0a054:	10001b26 	beq	r2,zero,d0a0c4 <__pow5mult+0xc8>
  d0a058:	1021883a 	mov	r16,r2
  d0a05c:	9080004c 	andi	r2,r18,1
  d0a060:	1005003a 	cmpeq	r2,r2,zero
  d0a064:	9025d07a 	srai	r18,r18,1
  d0a068:	800d883a 	mov	r6,r16
  d0a06c:	9809883a 	mov	r4,r19
  d0a070:	a00b883a 	mov	r5,r20
  d0a074:	103ff21e 	bne	r2,zero,d0a040 <__pow5mult+0x44>
  d0a078:	0d09cd80 	call	d09cd8 <__multiply>
  d0a07c:	a00b883a 	mov	r5,r20
  d0a080:	9809883a 	mov	r4,r19
  d0a084:	1023883a 	mov	r17,r2
  d0a088:	0d092480 	call	d09248 <_Bfree>
  d0a08c:	8829883a 	mov	r20,r17
  d0a090:	800b883a 	mov	r5,r16
  d0a094:	800d883a 	mov	r6,r16
  d0a098:	9809883a 	mov	r4,r19
  d0a09c:	903fec1e 	bne	r18,zero,d0a050 <__pow5mult+0x54>
  d0a0a0:	a005883a 	mov	r2,r20
  d0a0a4:	dfc00517 	ldw	ra,20(sp)
  d0a0a8:	dd000417 	ldw	r20,16(sp)
  d0a0ac:	dcc00317 	ldw	r19,12(sp)
  d0a0b0:	dc800217 	ldw	r18,8(sp)
  d0a0b4:	dc400117 	ldw	r17,4(sp)
  d0a0b8:	dc000017 	ldw	r16,0(sp)
  d0a0bc:	dec00604 	addi	sp,sp,24
  d0a0c0:	f800283a 	ret
  d0a0c4:	0d09cd80 	call	d09cd8 <__multiply>
  d0a0c8:	80800015 	stw	r2,0(r16)
  d0a0cc:	1021883a 	mov	r16,r2
  d0a0d0:	10000015 	stw	zero,0(r2)
  d0a0d4:	003fe106 	br	d0a05c <__pow5mult+0x60>
  d0a0d8:	1085883a 	add	r2,r2,r2
  d0a0dc:	00c03474 	movhi	r3,209
  d0a0e0:	18c4c104 	addi	r3,r3,4868
  d0a0e4:	1085883a 	add	r2,r2,r2
  d0a0e8:	10c5883a 	add	r2,r2,r3
  d0a0ec:	11bfff17 	ldw	r6,-4(r2)
  d0a0f0:	000f883a 	mov	r7,zero
  d0a0f4:	0d09efc0 	call	d09efc <__multadd>
  d0a0f8:	1029883a 	mov	r20,r2
  d0a0fc:	003fcb06 	br	d0a02c <__pow5mult+0x30>
  d0a100:	9809883a 	mov	r4,r19
  d0a104:	01409c44 	movi	r5,625
  d0a108:	0d09ec00 	call	d09ec0 <__i2b>
  d0a10c:	98801215 	stw	r2,72(r19)
  d0a110:	1021883a 	mov	r16,r2
  d0a114:	10000015 	stw	zero,0(r2)
  d0a118:	003fd006 	br	d0a05c <__pow5mult+0x60>

00d0a11c <__s2b>:
  d0a11c:	defff904 	addi	sp,sp,-28
  d0a120:	dcc00315 	stw	r19,12(sp)
  d0a124:	dc800215 	stw	r18,8(sp)
  d0a128:	2827883a 	mov	r19,r5
  d0a12c:	2025883a 	mov	r18,r4
  d0a130:	01400244 	movi	r5,9
  d0a134:	39000204 	addi	r4,r7,8
  d0a138:	dd000415 	stw	r20,16(sp)
  d0a13c:	dc400115 	stw	r17,4(sp)
  d0a140:	dfc00615 	stw	ra,24(sp)
  d0a144:	dd400515 	stw	r21,20(sp)
  d0a148:	dc000015 	stw	r16,0(sp)
  d0a14c:	3829883a 	mov	r20,r7
  d0a150:	3023883a 	mov	r17,r6
  d0a154:	0d0c4fc0 	call	d0c4fc <__divsi3>
  d0a158:	00c00044 	movi	r3,1
  d0a15c:	1880350e 	bge	r3,r2,d0a234 <__s2b+0x118>
  d0a160:	000b883a 	mov	r5,zero
  d0a164:	18c7883a 	add	r3,r3,r3
  d0a168:	29400044 	addi	r5,r5,1
  d0a16c:	18bffd16 	blt	r3,r2,d0a164 <__s2b+0x48>
  d0a170:	9009883a 	mov	r4,r18
  d0a174:	0d097c80 	call	d097c8 <_Balloc>
  d0a178:	1011883a 	mov	r8,r2
  d0a17c:	d8800717 	ldw	r2,28(sp)
  d0a180:	00c00044 	movi	r3,1
  d0a184:	01800244 	movi	r6,9
  d0a188:	40800515 	stw	r2,20(r8)
  d0a18c:	40c00415 	stw	r3,16(r8)
  d0a190:	3440260e 	bge	r6,r17,d0a22c <__s2b+0x110>
  d0a194:	3021883a 	mov	r16,r6
  d0a198:	99ab883a 	add	r21,r19,r6
  d0a19c:	9c05883a 	add	r2,r19,r16
  d0a1a0:	11c00007 	ldb	r7,0(r2)
  d0a1a4:	400b883a 	mov	r5,r8
  d0a1a8:	9009883a 	mov	r4,r18
  d0a1ac:	39fff404 	addi	r7,r7,-48
  d0a1b0:	01800284 	movi	r6,10
  d0a1b4:	0d09efc0 	call	d09efc <__multadd>
  d0a1b8:	84000044 	addi	r16,r16,1
  d0a1bc:	1011883a 	mov	r8,r2
  d0a1c0:	8c3ff61e 	bne	r17,r16,d0a19c <__s2b+0x80>
  d0a1c4:	ac45883a 	add	r2,r21,r17
  d0a1c8:	117ffe04 	addi	r5,r2,-8
  d0a1cc:	880d883a 	mov	r6,r17
  d0a1d0:	35000c0e 	bge	r6,r20,d0a204 <__s2b+0xe8>
  d0a1d4:	a185c83a 	sub	r2,r20,r6
  d0a1d8:	2821883a 	mov	r16,r5
  d0a1dc:	28a3883a 	add	r17,r5,r2
  d0a1e0:	81c00007 	ldb	r7,0(r16)
  d0a1e4:	400b883a 	mov	r5,r8
  d0a1e8:	9009883a 	mov	r4,r18
  d0a1ec:	39fff404 	addi	r7,r7,-48
  d0a1f0:	01800284 	movi	r6,10
  d0a1f4:	0d09efc0 	call	d09efc <__multadd>
  d0a1f8:	84000044 	addi	r16,r16,1
  d0a1fc:	1011883a 	mov	r8,r2
  d0a200:	847ff71e 	bne	r16,r17,d0a1e0 <__s2b+0xc4>
  d0a204:	4005883a 	mov	r2,r8
  d0a208:	dfc00617 	ldw	ra,24(sp)
  d0a20c:	dd400517 	ldw	r21,20(sp)
  d0a210:	dd000417 	ldw	r20,16(sp)
  d0a214:	dcc00317 	ldw	r19,12(sp)
  d0a218:	dc800217 	ldw	r18,8(sp)
  d0a21c:	dc400117 	ldw	r17,4(sp)
  d0a220:	dc000017 	ldw	r16,0(sp)
  d0a224:	dec00704 	addi	sp,sp,28
  d0a228:	f800283a 	ret
  d0a22c:	99400284 	addi	r5,r19,10
  d0a230:	003fe706 	br	d0a1d0 <__s2b+0xb4>
  d0a234:	000b883a 	mov	r5,zero
  d0a238:	003fcd06 	br	d0a170 <__s2b+0x54>

00d0a23c <_realloc_r>:
  d0a23c:	defff404 	addi	sp,sp,-48
  d0a240:	dd800815 	stw	r22,32(sp)
  d0a244:	dc800415 	stw	r18,16(sp)
  d0a248:	dc400315 	stw	r17,12(sp)
  d0a24c:	dfc00b15 	stw	ra,44(sp)
  d0a250:	df000a15 	stw	fp,40(sp)
  d0a254:	ddc00915 	stw	r23,36(sp)
  d0a258:	dd400715 	stw	r21,28(sp)
  d0a25c:	dd000615 	stw	r20,24(sp)
  d0a260:	dcc00515 	stw	r19,20(sp)
  d0a264:	dc000215 	stw	r16,8(sp)
  d0a268:	2825883a 	mov	r18,r5
  d0a26c:	3023883a 	mov	r17,r6
  d0a270:	202d883a 	mov	r22,r4
  d0a274:	2800c926 	beq	r5,zero,d0a59c <_realloc_r+0x360>
  d0a278:	0d0cc500 	call	d0cc50 <__malloc_lock>
  d0a27c:	943ffe04 	addi	r16,r18,-8
  d0a280:	88c002c4 	addi	r3,r17,11
  d0a284:	00800584 	movi	r2,22
  d0a288:	82000117 	ldw	r8,4(r16)
  d0a28c:	10c01b2e 	bgeu	r2,r3,d0a2fc <_realloc_r+0xc0>
  d0a290:	00bffe04 	movi	r2,-8
  d0a294:	188e703a 	and	r7,r3,r2
  d0a298:	3839883a 	mov	fp,r7
  d0a29c:	38001a16 	blt	r7,zero,d0a308 <_realloc_r+0xcc>
  d0a2a0:	e4401936 	bltu	fp,r17,d0a308 <_realloc_r+0xcc>
  d0a2a4:	013fff04 	movi	r4,-4
  d0a2a8:	4126703a 	and	r19,r8,r4
  d0a2ac:	99c02616 	blt	r19,r7,d0a348 <_realloc_r+0x10c>
  d0a2b0:	802b883a 	mov	r21,r16
  d0a2b4:	9829883a 	mov	r20,r19
  d0a2b8:	84000204 	addi	r16,r16,8
  d0a2bc:	a80f883a 	mov	r7,r21
  d0a2c0:	a70dc83a 	sub	r6,r20,fp
  d0a2c4:	008003c4 	movi	r2,15
  d0a2c8:	1180c136 	bltu	r2,r6,d0a5d0 <_realloc_r+0x394>
  d0a2cc:	38800117 	ldw	r2,4(r7)
  d0a2d0:	a549883a 	add	r4,r20,r21
  d0a2d4:	1080004c 	andi	r2,r2,1
  d0a2d8:	a084b03a 	or	r2,r20,r2
  d0a2dc:	38800115 	stw	r2,4(r7)
  d0a2e0:	20c00117 	ldw	r3,4(r4)
  d0a2e4:	18c00054 	ori	r3,r3,1
  d0a2e8:	20c00115 	stw	r3,4(r4)
  d0a2ec:	b009883a 	mov	r4,r22
  d0a2f0:	0d0cc700 	call	d0cc70 <__malloc_unlock>
  d0a2f4:	8023883a 	mov	r17,r16
  d0a2f8:	00000606 	br	d0a314 <_realloc_r+0xd8>
  d0a2fc:	01c00404 	movi	r7,16
  d0a300:	3839883a 	mov	fp,r7
  d0a304:	e47fe72e 	bgeu	fp,r17,d0a2a4 <_realloc_r+0x68>
  d0a308:	00800304 	movi	r2,12
  d0a30c:	0023883a 	mov	r17,zero
  d0a310:	b0800015 	stw	r2,0(r22)
  d0a314:	8805883a 	mov	r2,r17
  d0a318:	dfc00b17 	ldw	ra,44(sp)
  d0a31c:	df000a17 	ldw	fp,40(sp)
  d0a320:	ddc00917 	ldw	r23,36(sp)
  d0a324:	dd800817 	ldw	r22,32(sp)
  d0a328:	dd400717 	ldw	r21,28(sp)
  d0a32c:	dd000617 	ldw	r20,24(sp)
  d0a330:	dcc00517 	ldw	r19,20(sp)
  d0a334:	dc800417 	ldw	r18,16(sp)
  d0a338:	dc400317 	ldw	r17,12(sp)
  d0a33c:	dc000217 	ldw	r16,8(sp)
  d0a340:	dec00c04 	addi	sp,sp,48
  d0a344:	f800283a 	ret
  d0a348:	00803474 	movhi	r2,209
  d0a34c:	10861c04 	addi	r2,r2,6256
  d0a350:	12400217 	ldw	r9,8(r2)
  d0a354:	84cd883a 	add	r6,r16,r19
  d0a358:	802b883a 	mov	r21,r16
  d0a35c:	3240b926 	beq	r6,r9,d0a644 <_realloc_r+0x408>
  d0a360:	31400117 	ldw	r5,4(r6)
  d0a364:	00bfff84 	movi	r2,-2
  d0a368:	2884703a 	and	r2,r5,r2
  d0a36c:	1185883a 	add	r2,r2,r6
  d0a370:	10c00117 	ldw	r3,4(r2)
  d0a374:	18c0004c 	andi	r3,r3,1
  d0a378:	1807003a 	cmpeq	r3,r3,zero
  d0a37c:	1800a326 	beq	r3,zero,d0a60c <_realloc_r+0x3d0>
  d0a380:	2908703a 	and	r4,r5,r4
  d0a384:	9929883a 	add	r20,r19,r4
  d0a388:	a1c0a30e 	bge	r20,r7,d0a618 <_realloc_r+0x3dc>
  d0a38c:	4080004c 	andi	r2,r8,1
  d0a390:	1000551e 	bne	r2,zero,d0a4e8 <_realloc_r+0x2ac>
  d0a394:	80800017 	ldw	r2,0(r16)
  d0a398:	80afc83a 	sub	r23,r16,r2
  d0a39c:	b8c00117 	ldw	r3,4(r23)
  d0a3a0:	00bfff04 	movi	r2,-4
  d0a3a4:	1884703a 	and	r2,r3,r2
  d0a3a8:	30002e26 	beq	r6,zero,d0a464 <_realloc_r+0x228>
  d0a3ac:	3240b926 	beq	r6,r9,d0a694 <_realloc_r+0x458>
  d0a3b0:	98a9883a 	add	r20,r19,r2
  d0a3b4:	2509883a 	add	r4,r4,r20
  d0a3b8:	d9000015 	stw	r4,0(sp)
  d0a3bc:	21c02a16 	blt	r4,r7,d0a468 <_realloc_r+0x22c>
  d0a3c0:	30800317 	ldw	r2,12(r6)
  d0a3c4:	30c00217 	ldw	r3,8(r6)
  d0a3c8:	01400904 	movi	r5,36
  d0a3cc:	99bfff04 	addi	r6,r19,-4
  d0a3d0:	18800315 	stw	r2,12(r3)
  d0a3d4:	10c00215 	stw	r3,8(r2)
  d0a3d8:	b9000317 	ldw	r4,12(r23)
  d0a3dc:	b8800217 	ldw	r2,8(r23)
  d0a3e0:	b82b883a 	mov	r21,r23
  d0a3e4:	bc000204 	addi	r16,r23,8
  d0a3e8:	20800215 	stw	r2,8(r4)
  d0a3ec:	11000315 	stw	r4,12(r2)
  d0a3f0:	2980e436 	bltu	r5,r6,d0a784 <_realloc_r+0x548>
  d0a3f4:	008004c4 	movi	r2,19
  d0a3f8:	9009883a 	mov	r4,r18
  d0a3fc:	8011883a 	mov	r8,r16
  d0a400:	11800f2e 	bgeu	r2,r6,d0a440 <_realloc_r+0x204>
  d0a404:	90800017 	ldw	r2,0(r18)
  d0a408:	ba000404 	addi	r8,r23,16
  d0a40c:	91000204 	addi	r4,r18,8
  d0a410:	b8800215 	stw	r2,8(r23)
  d0a414:	90c00117 	ldw	r3,4(r18)
  d0a418:	008006c4 	movi	r2,27
  d0a41c:	b8c00315 	stw	r3,12(r23)
  d0a420:	1180072e 	bgeu	r2,r6,d0a440 <_realloc_r+0x204>
  d0a424:	90c00217 	ldw	r3,8(r18)
  d0a428:	ba000604 	addi	r8,r23,24
  d0a42c:	91000404 	addi	r4,r18,16
  d0a430:	b8c00415 	stw	r3,16(r23)
  d0a434:	90800317 	ldw	r2,12(r18)
  d0a438:	b8800515 	stw	r2,20(r23)
  d0a43c:	3140e726 	beq	r6,r5,d0a7dc <_realloc_r+0x5a0>
  d0a440:	20800017 	ldw	r2,0(r4)
  d0a444:	dd000017 	ldw	r20,0(sp)
  d0a448:	b80f883a 	mov	r7,r23
  d0a44c:	40800015 	stw	r2,0(r8)
  d0a450:	20c00117 	ldw	r3,4(r4)
  d0a454:	40c00115 	stw	r3,4(r8)
  d0a458:	20800217 	ldw	r2,8(r4)
  d0a45c:	40800215 	stw	r2,8(r8)
  d0a460:	003f9706 	br	d0a2c0 <_realloc_r+0x84>
  d0a464:	98a9883a 	add	r20,r19,r2
  d0a468:	a1c01f16 	blt	r20,r7,d0a4e8 <_realloc_r+0x2ac>
  d0a46c:	b8c00317 	ldw	r3,12(r23)
  d0a470:	b8800217 	ldw	r2,8(r23)
  d0a474:	99bfff04 	addi	r6,r19,-4
  d0a478:	01400904 	movi	r5,36
  d0a47c:	b82b883a 	mov	r21,r23
  d0a480:	18800215 	stw	r2,8(r3)
  d0a484:	10c00315 	stw	r3,12(r2)
  d0a488:	bc000204 	addi	r16,r23,8
  d0a48c:	2980c336 	bltu	r5,r6,d0a79c <_realloc_r+0x560>
  d0a490:	008004c4 	movi	r2,19
  d0a494:	9009883a 	mov	r4,r18
  d0a498:	8011883a 	mov	r8,r16
  d0a49c:	11800f2e 	bgeu	r2,r6,d0a4dc <_realloc_r+0x2a0>
  d0a4a0:	90800017 	ldw	r2,0(r18)
  d0a4a4:	ba000404 	addi	r8,r23,16
  d0a4a8:	91000204 	addi	r4,r18,8
  d0a4ac:	b8800215 	stw	r2,8(r23)
  d0a4b0:	90c00117 	ldw	r3,4(r18)
  d0a4b4:	008006c4 	movi	r2,27
  d0a4b8:	b8c00315 	stw	r3,12(r23)
  d0a4bc:	1180072e 	bgeu	r2,r6,d0a4dc <_realloc_r+0x2a0>
  d0a4c0:	90c00217 	ldw	r3,8(r18)
  d0a4c4:	ba000604 	addi	r8,r23,24
  d0a4c8:	91000404 	addi	r4,r18,16
  d0a4cc:	b8c00415 	stw	r3,16(r23)
  d0a4d0:	90800317 	ldw	r2,12(r18)
  d0a4d4:	b8800515 	stw	r2,20(r23)
  d0a4d8:	3140c726 	beq	r6,r5,d0a7f8 <_realloc_r+0x5bc>
  d0a4dc:	20800017 	ldw	r2,0(r4)
  d0a4e0:	b80f883a 	mov	r7,r23
  d0a4e4:	003fd906 	br	d0a44c <_realloc_r+0x210>
  d0a4e8:	880b883a 	mov	r5,r17
  d0a4ec:	b009883a 	mov	r4,r22
  d0a4f0:	0d0880c0 	call	d0880c <_malloc_r>
  d0a4f4:	1023883a 	mov	r17,r2
  d0a4f8:	10002526 	beq	r2,zero,d0a590 <_realloc_r+0x354>
  d0a4fc:	80800117 	ldw	r2,4(r16)
  d0a500:	00ffff84 	movi	r3,-2
  d0a504:	893ffe04 	addi	r4,r17,-8
  d0a508:	10c4703a 	and	r2,r2,r3
  d0a50c:	8085883a 	add	r2,r16,r2
  d0a510:	20809526 	beq	r4,r2,d0a768 <_realloc_r+0x52c>
  d0a514:	99bfff04 	addi	r6,r19,-4
  d0a518:	01c00904 	movi	r7,36
  d0a51c:	39804536 	bltu	r7,r6,d0a634 <_realloc_r+0x3f8>
  d0a520:	008004c4 	movi	r2,19
  d0a524:	9009883a 	mov	r4,r18
  d0a528:	880b883a 	mov	r5,r17
  d0a52c:	11800f2e 	bgeu	r2,r6,d0a56c <_realloc_r+0x330>
  d0a530:	90800017 	ldw	r2,0(r18)
  d0a534:	89400204 	addi	r5,r17,8
  d0a538:	91000204 	addi	r4,r18,8
  d0a53c:	88800015 	stw	r2,0(r17)
  d0a540:	90c00117 	ldw	r3,4(r18)
  d0a544:	008006c4 	movi	r2,27
  d0a548:	88c00115 	stw	r3,4(r17)
  d0a54c:	1180072e 	bgeu	r2,r6,d0a56c <_realloc_r+0x330>
  d0a550:	90c00217 	ldw	r3,8(r18)
  d0a554:	89400404 	addi	r5,r17,16
  d0a558:	91000404 	addi	r4,r18,16
  d0a55c:	88c00215 	stw	r3,8(r17)
  d0a560:	90800317 	ldw	r2,12(r18)
  d0a564:	88800315 	stw	r2,12(r17)
  d0a568:	31c09126 	beq	r6,r7,d0a7b0 <_realloc_r+0x574>
  d0a56c:	20800017 	ldw	r2,0(r4)
  d0a570:	28800015 	stw	r2,0(r5)
  d0a574:	20c00117 	ldw	r3,4(r4)
  d0a578:	28c00115 	stw	r3,4(r5)
  d0a57c:	20800217 	ldw	r2,8(r4)
  d0a580:	28800215 	stw	r2,8(r5)
  d0a584:	900b883a 	mov	r5,r18
  d0a588:	b009883a 	mov	r4,r22
  d0a58c:	0d07c840 	call	d07c84 <_free_r>
  d0a590:	b009883a 	mov	r4,r22
  d0a594:	0d0cc700 	call	d0cc70 <__malloc_unlock>
  d0a598:	003f5e06 	br	d0a314 <_realloc_r+0xd8>
  d0a59c:	300b883a 	mov	r5,r6
  d0a5a0:	dfc00b17 	ldw	ra,44(sp)
  d0a5a4:	df000a17 	ldw	fp,40(sp)
  d0a5a8:	ddc00917 	ldw	r23,36(sp)
  d0a5ac:	dd800817 	ldw	r22,32(sp)
  d0a5b0:	dd400717 	ldw	r21,28(sp)
  d0a5b4:	dd000617 	ldw	r20,24(sp)
  d0a5b8:	dcc00517 	ldw	r19,20(sp)
  d0a5bc:	dc800417 	ldw	r18,16(sp)
  d0a5c0:	dc400317 	ldw	r17,12(sp)
  d0a5c4:	dc000217 	ldw	r16,8(sp)
  d0a5c8:	dec00c04 	addi	sp,sp,48
  d0a5cc:	0d0880c1 	jmpi	d0880c <_malloc_r>
  d0a5d0:	38800117 	ldw	r2,4(r7)
  d0a5d4:	e54b883a 	add	r5,fp,r21
  d0a5d8:	31000054 	ori	r4,r6,1
  d0a5dc:	1080004c 	andi	r2,r2,1
  d0a5e0:	1704b03a 	or	r2,r2,fp
  d0a5e4:	38800115 	stw	r2,4(r7)
  d0a5e8:	29000115 	stw	r4,4(r5)
  d0a5ec:	2987883a 	add	r3,r5,r6
  d0a5f0:	18800117 	ldw	r2,4(r3)
  d0a5f4:	29400204 	addi	r5,r5,8
  d0a5f8:	b009883a 	mov	r4,r22
  d0a5fc:	10800054 	ori	r2,r2,1
  d0a600:	18800115 	stw	r2,4(r3)
  d0a604:	0d07c840 	call	d07c84 <_free_r>
  d0a608:	003f3806 	br	d0a2ec <_realloc_r+0xb0>
  d0a60c:	000d883a 	mov	r6,zero
  d0a610:	0009883a 	mov	r4,zero
  d0a614:	003f5d06 	br	d0a38c <_realloc_r+0x150>
  d0a618:	30c00217 	ldw	r3,8(r6)
  d0a61c:	30800317 	ldw	r2,12(r6)
  d0a620:	800f883a 	mov	r7,r16
  d0a624:	84000204 	addi	r16,r16,8
  d0a628:	10c00215 	stw	r3,8(r2)
  d0a62c:	18800315 	stw	r2,12(r3)
  d0a630:	003f2306 	br	d0a2c0 <_realloc_r+0x84>
  d0a634:	8809883a 	mov	r4,r17
  d0a638:	900b883a 	mov	r5,r18
  d0a63c:	0d090d00 	call	d090d0 <memmove>
  d0a640:	003fd006 	br	d0a584 <_realloc_r+0x348>
  d0a644:	30800117 	ldw	r2,4(r6)
  d0a648:	e0c00404 	addi	r3,fp,16
  d0a64c:	1108703a 	and	r4,r2,r4
  d0a650:	9905883a 	add	r2,r19,r4
  d0a654:	10ff4d16 	blt	r2,r3,d0a38c <_realloc_r+0x150>
  d0a658:	1705c83a 	sub	r2,r2,fp
  d0a65c:	870b883a 	add	r5,r16,fp
  d0a660:	10800054 	ori	r2,r2,1
  d0a664:	28800115 	stw	r2,4(r5)
  d0a668:	80c00117 	ldw	r3,4(r16)
  d0a66c:	00803474 	movhi	r2,209
  d0a670:	10861c04 	addi	r2,r2,6256
  d0a674:	b009883a 	mov	r4,r22
  d0a678:	18c0004c 	andi	r3,r3,1
  d0a67c:	e0c6b03a 	or	r3,fp,r3
  d0a680:	11400215 	stw	r5,8(r2)
  d0a684:	80c00115 	stw	r3,4(r16)
  d0a688:	0d0cc700 	call	d0cc70 <__malloc_unlock>
  d0a68c:	84400204 	addi	r17,r16,8
  d0a690:	003f2006 	br	d0a314 <_realloc_r+0xd8>
  d0a694:	98a9883a 	add	r20,r19,r2
  d0a698:	2509883a 	add	r4,r4,r20
  d0a69c:	e0800404 	addi	r2,fp,16
  d0a6a0:	d9000115 	stw	r4,4(sp)
  d0a6a4:	20bf7016 	blt	r4,r2,d0a468 <_realloc_r+0x22c>
  d0a6a8:	b8c00317 	ldw	r3,12(r23)
  d0a6ac:	b8800217 	ldw	r2,8(r23)
  d0a6b0:	99bfff04 	addi	r6,r19,-4
  d0a6b4:	01400904 	movi	r5,36
  d0a6b8:	18800215 	stw	r2,8(r3)
  d0a6bc:	10c00315 	stw	r3,12(r2)
  d0a6c0:	bc400204 	addi	r17,r23,8
  d0a6c4:	29804136 	bltu	r5,r6,d0a7cc <_realloc_r+0x590>
  d0a6c8:	008004c4 	movi	r2,19
  d0a6cc:	9009883a 	mov	r4,r18
  d0a6d0:	880f883a 	mov	r7,r17
  d0a6d4:	11800f2e 	bgeu	r2,r6,d0a714 <_realloc_r+0x4d8>
  d0a6d8:	90800017 	ldw	r2,0(r18)
  d0a6dc:	b9c00404 	addi	r7,r23,16
  d0a6e0:	91000204 	addi	r4,r18,8
  d0a6e4:	b8800215 	stw	r2,8(r23)
  d0a6e8:	90c00117 	ldw	r3,4(r18)
  d0a6ec:	008006c4 	movi	r2,27
  d0a6f0:	b8c00315 	stw	r3,12(r23)
  d0a6f4:	1180072e 	bgeu	r2,r6,d0a714 <_realloc_r+0x4d8>
  d0a6f8:	90c00217 	ldw	r3,8(r18)
  d0a6fc:	b9c00604 	addi	r7,r23,24
  d0a700:	91000404 	addi	r4,r18,16
  d0a704:	b8c00415 	stw	r3,16(r23)
  d0a708:	90800317 	ldw	r2,12(r18)
  d0a70c:	b8800515 	stw	r2,20(r23)
  d0a710:	31404026 	beq	r6,r5,d0a814 <_realloc_r+0x5d8>
  d0a714:	20800017 	ldw	r2,0(r4)
  d0a718:	38800015 	stw	r2,0(r7)
  d0a71c:	20c00117 	ldw	r3,4(r4)
  d0a720:	38c00115 	stw	r3,4(r7)
  d0a724:	20800217 	ldw	r2,8(r4)
  d0a728:	38800215 	stw	r2,8(r7)
  d0a72c:	d8c00117 	ldw	r3,4(sp)
  d0a730:	bf0b883a 	add	r5,r23,fp
  d0a734:	b009883a 	mov	r4,r22
  d0a738:	1f05c83a 	sub	r2,r3,fp
  d0a73c:	10800054 	ori	r2,r2,1
  d0a740:	28800115 	stw	r2,4(r5)
  d0a744:	b8c00117 	ldw	r3,4(r23)
  d0a748:	00803474 	movhi	r2,209
  d0a74c:	10861c04 	addi	r2,r2,6256
  d0a750:	11400215 	stw	r5,8(r2)
  d0a754:	18c0004c 	andi	r3,r3,1
  d0a758:	e0c6b03a 	or	r3,fp,r3
  d0a75c:	b8c00115 	stw	r3,4(r23)
  d0a760:	0d0cc700 	call	d0cc70 <__malloc_unlock>
  d0a764:	003eeb06 	br	d0a314 <_realloc_r+0xd8>
  d0a768:	20800117 	ldw	r2,4(r4)
  d0a76c:	00ffff04 	movi	r3,-4
  d0a770:	800f883a 	mov	r7,r16
  d0a774:	10c4703a 	and	r2,r2,r3
  d0a778:	98a9883a 	add	r20,r19,r2
  d0a77c:	84000204 	addi	r16,r16,8
  d0a780:	003ecf06 	br	d0a2c0 <_realloc_r+0x84>
  d0a784:	900b883a 	mov	r5,r18
  d0a788:	8009883a 	mov	r4,r16
  d0a78c:	0d090d00 	call	d090d0 <memmove>
  d0a790:	dd000017 	ldw	r20,0(sp)
  d0a794:	b80f883a 	mov	r7,r23
  d0a798:	003ec906 	br	d0a2c0 <_realloc_r+0x84>
  d0a79c:	900b883a 	mov	r5,r18
  d0a7a0:	8009883a 	mov	r4,r16
  d0a7a4:	0d090d00 	call	d090d0 <memmove>
  d0a7a8:	b80f883a 	mov	r7,r23
  d0a7ac:	003ec406 	br	d0a2c0 <_realloc_r+0x84>
  d0a7b0:	90c00417 	ldw	r3,16(r18)
  d0a7b4:	89400604 	addi	r5,r17,24
  d0a7b8:	91000604 	addi	r4,r18,24
  d0a7bc:	88c00415 	stw	r3,16(r17)
  d0a7c0:	90800517 	ldw	r2,20(r18)
  d0a7c4:	88800515 	stw	r2,20(r17)
  d0a7c8:	003f6806 	br	d0a56c <_realloc_r+0x330>
  d0a7cc:	900b883a 	mov	r5,r18
  d0a7d0:	8809883a 	mov	r4,r17
  d0a7d4:	0d090d00 	call	d090d0 <memmove>
  d0a7d8:	003fd406 	br	d0a72c <_realloc_r+0x4f0>
  d0a7dc:	90c00417 	ldw	r3,16(r18)
  d0a7e0:	91000604 	addi	r4,r18,24
  d0a7e4:	ba000804 	addi	r8,r23,32
  d0a7e8:	b8c00615 	stw	r3,24(r23)
  d0a7ec:	90800517 	ldw	r2,20(r18)
  d0a7f0:	b8800715 	stw	r2,28(r23)
  d0a7f4:	003f1206 	br	d0a440 <_realloc_r+0x204>
  d0a7f8:	90c00417 	ldw	r3,16(r18)
  d0a7fc:	91000604 	addi	r4,r18,24
  d0a800:	ba000804 	addi	r8,r23,32
  d0a804:	b8c00615 	stw	r3,24(r23)
  d0a808:	90800517 	ldw	r2,20(r18)
  d0a80c:	b8800715 	stw	r2,28(r23)
  d0a810:	003f3206 	br	d0a4dc <_realloc_r+0x2a0>
  d0a814:	90c00417 	ldw	r3,16(r18)
  d0a818:	91000604 	addi	r4,r18,24
  d0a81c:	b9c00804 	addi	r7,r23,32
  d0a820:	b8c00615 	stw	r3,24(r23)
  d0a824:	90800517 	ldw	r2,20(r18)
  d0a828:	b8800715 	stw	r2,28(r23)
  d0a82c:	003fb906 	br	d0a714 <_realloc_r+0x4d8>

00d0a830 <__isinfd>:
  d0a830:	200d883a 	mov	r6,r4
  d0a834:	0109c83a 	sub	r4,zero,r4
  d0a838:	2188b03a 	or	r4,r4,r6
  d0a83c:	2008d7fa 	srli	r4,r4,31
  d0a840:	00a00034 	movhi	r2,32768
  d0a844:	10bfffc4 	addi	r2,r2,-1
  d0a848:	1144703a 	and	r2,r2,r5
  d0a84c:	2088b03a 	or	r4,r4,r2
  d0a850:	009ffc34 	movhi	r2,32752
  d0a854:	1105c83a 	sub	r2,r2,r4
  d0a858:	0087c83a 	sub	r3,zero,r2
  d0a85c:	10c4b03a 	or	r2,r2,r3
  d0a860:	1004d7fa 	srli	r2,r2,31
  d0a864:	00c00044 	movi	r3,1
  d0a868:	1885c83a 	sub	r2,r3,r2
  d0a86c:	f800283a 	ret

00d0a870 <__isnand>:
  d0a870:	200d883a 	mov	r6,r4
  d0a874:	0109c83a 	sub	r4,zero,r4
  d0a878:	2188b03a 	or	r4,r4,r6
  d0a87c:	2008d7fa 	srli	r4,r4,31
  d0a880:	00a00034 	movhi	r2,32768
  d0a884:	10bfffc4 	addi	r2,r2,-1
  d0a888:	1144703a 	and	r2,r2,r5
  d0a88c:	2088b03a 	or	r4,r4,r2
  d0a890:	009ffc34 	movhi	r2,32752
  d0a894:	1105c83a 	sub	r2,r2,r4
  d0a898:	1004d7fa 	srli	r2,r2,31
  d0a89c:	f800283a 	ret

00d0a8a0 <_sbrk_r>:
  d0a8a0:	defffd04 	addi	sp,sp,-12
  d0a8a4:	dc000015 	stw	r16,0(sp)
  d0a8a8:	04003474 	movhi	r16,209
  d0a8ac:	84130a04 	addi	r16,r16,19496
  d0a8b0:	dc400115 	stw	r17,4(sp)
  d0a8b4:	80000015 	stw	zero,0(r16)
  d0a8b8:	2023883a 	mov	r17,r4
  d0a8bc:	2809883a 	mov	r4,r5
  d0a8c0:	dfc00215 	stw	ra,8(sp)
  d0a8c4:	0d0ce700 	call	d0ce70 <sbrk>
  d0a8c8:	1007883a 	mov	r3,r2
  d0a8cc:	00bfffc4 	movi	r2,-1
  d0a8d0:	18800626 	beq	r3,r2,d0a8ec <_sbrk_r+0x4c>
  d0a8d4:	1805883a 	mov	r2,r3
  d0a8d8:	dfc00217 	ldw	ra,8(sp)
  d0a8dc:	dc400117 	ldw	r17,4(sp)
  d0a8e0:	dc000017 	ldw	r16,0(sp)
  d0a8e4:	dec00304 	addi	sp,sp,12
  d0a8e8:	f800283a 	ret
  d0a8ec:	80800017 	ldw	r2,0(r16)
  d0a8f0:	103ff826 	beq	r2,zero,d0a8d4 <_sbrk_r+0x34>
  d0a8f4:	88800015 	stw	r2,0(r17)
  d0a8f8:	1805883a 	mov	r2,r3
  d0a8fc:	dfc00217 	ldw	ra,8(sp)
  d0a900:	dc400117 	ldw	r17,4(sp)
  d0a904:	dc000017 	ldw	r16,0(sp)
  d0a908:	dec00304 	addi	sp,sp,12
  d0a90c:	f800283a 	ret

00d0a910 <__sclose>:
  d0a910:	2940038f 	ldh	r5,14(r5)
  d0a914:	0d0ac441 	jmpi	d0ac44 <_close_r>

00d0a918 <__sseek>:
  d0a918:	defffe04 	addi	sp,sp,-8
  d0a91c:	dc000015 	stw	r16,0(sp)
  d0a920:	2821883a 	mov	r16,r5
  d0a924:	2940038f 	ldh	r5,14(r5)
  d0a928:	dfc00115 	stw	ra,4(sp)
  d0a92c:	0d0aebc0 	call	d0aebc <_lseek_r>
  d0a930:	1007883a 	mov	r3,r2
  d0a934:	00bfffc4 	movi	r2,-1
  d0a938:	18800926 	beq	r3,r2,d0a960 <__sseek+0x48>
  d0a93c:	8080030b 	ldhu	r2,12(r16)
  d0a940:	80c01415 	stw	r3,80(r16)
  d0a944:	10840014 	ori	r2,r2,4096
  d0a948:	8080030d 	sth	r2,12(r16)
  d0a94c:	1805883a 	mov	r2,r3
  d0a950:	dfc00117 	ldw	ra,4(sp)
  d0a954:	dc000017 	ldw	r16,0(sp)
  d0a958:	dec00204 	addi	sp,sp,8
  d0a95c:	f800283a 	ret
  d0a960:	8080030b 	ldhu	r2,12(r16)
  d0a964:	10bbffcc 	andi	r2,r2,61439
  d0a968:	8080030d 	sth	r2,12(r16)
  d0a96c:	1805883a 	mov	r2,r3
  d0a970:	dfc00117 	ldw	ra,4(sp)
  d0a974:	dc000017 	ldw	r16,0(sp)
  d0a978:	dec00204 	addi	sp,sp,8
  d0a97c:	f800283a 	ret

00d0a980 <__swrite>:
  d0a980:	2880030b 	ldhu	r2,12(r5)
  d0a984:	defffb04 	addi	sp,sp,-20
  d0a988:	dcc00315 	stw	r19,12(sp)
  d0a98c:	1080400c 	andi	r2,r2,256
  d0a990:	dc800215 	stw	r18,8(sp)
  d0a994:	dc400115 	stw	r17,4(sp)
  d0a998:	dc000015 	stw	r16,0(sp)
  d0a99c:	3027883a 	mov	r19,r6
  d0a9a0:	3825883a 	mov	r18,r7
  d0a9a4:	dfc00415 	stw	ra,16(sp)
  d0a9a8:	2821883a 	mov	r16,r5
  d0a9ac:	000d883a 	mov	r6,zero
  d0a9b0:	01c00084 	movi	r7,2
  d0a9b4:	2023883a 	mov	r17,r4
  d0a9b8:	10000226 	beq	r2,zero,d0a9c4 <__swrite+0x44>
  d0a9bc:	2940038f 	ldh	r5,14(r5)
  d0a9c0:	0d0aebc0 	call	d0aebc <_lseek_r>
  d0a9c4:	8080030b 	ldhu	r2,12(r16)
  d0a9c8:	8140038f 	ldh	r5,14(r16)
  d0a9cc:	8809883a 	mov	r4,r17
  d0a9d0:	10bbffcc 	andi	r2,r2,61439
  d0a9d4:	980d883a 	mov	r6,r19
  d0a9d8:	900f883a 	mov	r7,r18
  d0a9dc:	8080030d 	sth	r2,12(r16)
  d0a9e0:	dfc00417 	ldw	ra,16(sp)
  d0a9e4:	dcc00317 	ldw	r19,12(sp)
  d0a9e8:	dc800217 	ldw	r18,8(sp)
  d0a9ec:	dc400117 	ldw	r17,4(sp)
  d0a9f0:	dc000017 	ldw	r16,0(sp)
  d0a9f4:	dec00504 	addi	sp,sp,20
  d0a9f8:	0d0ab181 	jmpi	d0ab18 <_write_r>

00d0a9fc <__sread>:
  d0a9fc:	defffe04 	addi	sp,sp,-8
  d0aa00:	dc000015 	stw	r16,0(sp)
  d0aa04:	2821883a 	mov	r16,r5
  d0aa08:	2940038f 	ldh	r5,14(r5)
  d0aa0c:	dfc00115 	stw	ra,4(sp)
  d0aa10:	0d0af340 	call	d0af34 <_read_r>
  d0aa14:	1007883a 	mov	r3,r2
  d0aa18:	10000816 	blt	r2,zero,d0aa3c <__sread+0x40>
  d0aa1c:	80801417 	ldw	r2,80(r16)
  d0aa20:	10c5883a 	add	r2,r2,r3
  d0aa24:	80801415 	stw	r2,80(r16)
  d0aa28:	1805883a 	mov	r2,r3
  d0aa2c:	dfc00117 	ldw	ra,4(sp)
  d0aa30:	dc000017 	ldw	r16,0(sp)
  d0aa34:	dec00204 	addi	sp,sp,8
  d0aa38:	f800283a 	ret
  d0aa3c:	8080030b 	ldhu	r2,12(r16)
  d0aa40:	10bbffcc 	andi	r2,r2,61439
  d0aa44:	8080030d 	sth	r2,12(r16)
  d0aa48:	1805883a 	mov	r2,r3
  d0aa4c:	dfc00117 	ldw	ra,4(sp)
  d0aa50:	dc000017 	ldw	r16,0(sp)
  d0aa54:	dec00204 	addi	sp,sp,8
  d0aa58:	f800283a 	ret

00d0aa5c <strcmp>:
  d0aa5c:	2144b03a 	or	r2,r4,r5
  d0aa60:	108000cc 	andi	r2,r2,3
  d0aa64:	10001d1e 	bne	r2,zero,d0aadc <strcmp+0x80>
  d0aa68:	200f883a 	mov	r7,r4
  d0aa6c:	28800017 	ldw	r2,0(r5)
  d0aa70:	21000017 	ldw	r4,0(r4)
  d0aa74:	280d883a 	mov	r6,r5
  d0aa78:	2080161e 	bne	r4,r2,d0aad4 <strcmp+0x78>
  d0aa7c:	023fbff4 	movhi	r8,65279
  d0aa80:	423fbfc4 	addi	r8,r8,-257
  d0aa84:	2207883a 	add	r3,r4,r8
  d0aa88:	01602074 	movhi	r5,32897
  d0aa8c:	29602004 	addi	r5,r5,-32640
  d0aa90:	1946703a 	and	r3,r3,r5
  d0aa94:	0104303a 	nor	r2,zero,r4
  d0aa98:	10c4703a 	and	r2,r2,r3
  d0aa9c:	10001c1e 	bne	r2,zero,d0ab10 <strcmp+0xb4>
  d0aaa0:	4013883a 	mov	r9,r8
  d0aaa4:	2811883a 	mov	r8,r5
  d0aaa8:	00000106 	br	d0aab0 <strcmp+0x54>
  d0aaac:	1800181e 	bne	r3,zero,d0ab10 <strcmp+0xb4>
  d0aab0:	39c00104 	addi	r7,r7,4
  d0aab4:	39000017 	ldw	r4,0(r7)
  d0aab8:	31800104 	addi	r6,r6,4
  d0aabc:	31400017 	ldw	r5,0(r6)
  d0aac0:	2245883a 	add	r2,r4,r9
  d0aac4:	1204703a 	and	r2,r2,r8
  d0aac8:	0106303a 	nor	r3,zero,r4
  d0aacc:	1886703a 	and	r3,r3,r2
  d0aad0:	217ff626 	beq	r4,r5,d0aaac <strcmp+0x50>
  d0aad4:	3809883a 	mov	r4,r7
  d0aad8:	300b883a 	mov	r5,r6
  d0aadc:	20c00007 	ldb	r3,0(r4)
  d0aae0:	1800051e 	bne	r3,zero,d0aaf8 <strcmp+0x9c>
  d0aae4:	00000606 	br	d0ab00 <strcmp+0xa4>
  d0aae8:	21000044 	addi	r4,r4,1
  d0aaec:	20c00007 	ldb	r3,0(r4)
  d0aaf0:	29400044 	addi	r5,r5,1
  d0aaf4:	18000226 	beq	r3,zero,d0ab00 <strcmp+0xa4>
  d0aaf8:	28800007 	ldb	r2,0(r5)
  d0aafc:	18bffa26 	beq	r3,r2,d0aae8 <strcmp+0x8c>
  d0ab00:	20c00003 	ldbu	r3,0(r4)
  d0ab04:	28800003 	ldbu	r2,0(r5)
  d0ab08:	1885c83a 	sub	r2,r3,r2
  d0ab0c:	f800283a 	ret
  d0ab10:	0005883a 	mov	r2,zero
  d0ab14:	f800283a 	ret

00d0ab18 <_write_r>:
  d0ab18:	defffd04 	addi	sp,sp,-12
  d0ab1c:	dc000015 	stw	r16,0(sp)
  d0ab20:	04003474 	movhi	r16,209
  d0ab24:	84130a04 	addi	r16,r16,19496
  d0ab28:	dc400115 	stw	r17,4(sp)
  d0ab2c:	80000015 	stw	zero,0(r16)
  d0ab30:	2023883a 	mov	r17,r4
  d0ab34:	2809883a 	mov	r4,r5
  d0ab38:	300b883a 	mov	r5,r6
  d0ab3c:	380d883a 	mov	r6,r7
  d0ab40:	dfc00215 	stw	ra,8(sp)
  d0ab44:	0d0cf2c0 	call	d0cf2c <write>
  d0ab48:	1007883a 	mov	r3,r2
  d0ab4c:	00bfffc4 	movi	r2,-1
  d0ab50:	18800626 	beq	r3,r2,d0ab6c <_write_r+0x54>
  d0ab54:	1805883a 	mov	r2,r3
  d0ab58:	dfc00217 	ldw	ra,8(sp)
  d0ab5c:	dc400117 	ldw	r17,4(sp)
  d0ab60:	dc000017 	ldw	r16,0(sp)
  d0ab64:	dec00304 	addi	sp,sp,12
  d0ab68:	f800283a 	ret
  d0ab6c:	80800017 	ldw	r2,0(r16)
  d0ab70:	103ff826 	beq	r2,zero,d0ab54 <_write_r+0x3c>
  d0ab74:	88800015 	stw	r2,0(r17)
  d0ab78:	1805883a 	mov	r2,r3
  d0ab7c:	dfc00217 	ldw	ra,8(sp)
  d0ab80:	dc400117 	ldw	r17,4(sp)
  d0ab84:	dc000017 	ldw	r16,0(sp)
  d0ab88:	dec00304 	addi	sp,sp,12
  d0ab8c:	f800283a 	ret

00d0ab90 <_calloc_r>:
  d0ab90:	298b383a 	mul	r5,r5,r6
  d0ab94:	defffe04 	addi	sp,sp,-8
  d0ab98:	dc000015 	stw	r16,0(sp)
  d0ab9c:	dfc00115 	stw	ra,4(sp)
  d0aba0:	0d0880c0 	call	d0880c <_malloc_r>
  d0aba4:	1021883a 	mov	r16,r2
  d0aba8:	01c00904 	movi	r7,36
  d0abac:	10000d26 	beq	r2,zero,d0abe4 <_calloc_r+0x54>
  d0abb0:	10ffff17 	ldw	r3,-4(r2)
  d0abb4:	1009883a 	mov	r4,r2
  d0abb8:	00bfff04 	movi	r2,-4
  d0abbc:	1886703a 	and	r3,r3,r2
  d0abc0:	1887883a 	add	r3,r3,r2
  d0abc4:	180d883a 	mov	r6,r3
  d0abc8:	000b883a 	mov	r5,zero
  d0abcc:	38c01736 	bltu	r7,r3,d0ac2c <_calloc_r+0x9c>
  d0abd0:	008004c4 	movi	r2,19
  d0abd4:	10c00836 	bltu	r2,r3,d0abf8 <_calloc_r+0x68>
  d0abd8:	20000215 	stw	zero,8(r4)
  d0abdc:	20000015 	stw	zero,0(r4)
  d0abe0:	20000115 	stw	zero,4(r4)
  d0abe4:	8005883a 	mov	r2,r16
  d0abe8:	dfc00117 	ldw	ra,4(sp)
  d0abec:	dc000017 	ldw	r16,0(sp)
  d0abf0:	dec00204 	addi	sp,sp,8
  d0abf4:	f800283a 	ret
  d0abf8:	008006c4 	movi	r2,27
  d0abfc:	80000015 	stw	zero,0(r16)
  d0ac00:	80000115 	stw	zero,4(r16)
  d0ac04:	81000204 	addi	r4,r16,8
  d0ac08:	10fff32e 	bgeu	r2,r3,d0abd8 <_calloc_r+0x48>
  d0ac0c:	80000215 	stw	zero,8(r16)
  d0ac10:	80000315 	stw	zero,12(r16)
  d0ac14:	81000404 	addi	r4,r16,16
  d0ac18:	19ffef1e 	bne	r3,r7,d0abd8 <_calloc_r+0x48>
  d0ac1c:	81000604 	addi	r4,r16,24
  d0ac20:	80000415 	stw	zero,16(r16)
  d0ac24:	80000515 	stw	zero,20(r16)
  d0ac28:	003feb06 	br	d0abd8 <_calloc_r+0x48>
  d0ac2c:	0d091b00 	call	d091b0 <memset>
  d0ac30:	8005883a 	mov	r2,r16
  d0ac34:	dfc00117 	ldw	ra,4(sp)
  d0ac38:	dc000017 	ldw	r16,0(sp)
  d0ac3c:	dec00204 	addi	sp,sp,8
  d0ac40:	f800283a 	ret

00d0ac44 <_close_r>:
  d0ac44:	defffd04 	addi	sp,sp,-12
  d0ac48:	dc000015 	stw	r16,0(sp)
  d0ac4c:	04003474 	movhi	r16,209
  d0ac50:	84130a04 	addi	r16,r16,19496
  d0ac54:	dc400115 	stw	r17,4(sp)
  d0ac58:	80000015 	stw	zero,0(r16)
  d0ac5c:	2023883a 	mov	r17,r4
  d0ac60:	2809883a 	mov	r4,r5
  d0ac64:	dfc00215 	stw	ra,8(sp)
  d0ac68:	0d0c5cc0 	call	d0c5cc <close>
  d0ac6c:	1007883a 	mov	r3,r2
  d0ac70:	00bfffc4 	movi	r2,-1
  d0ac74:	18800626 	beq	r3,r2,d0ac90 <_close_r+0x4c>
  d0ac78:	1805883a 	mov	r2,r3
  d0ac7c:	dfc00217 	ldw	ra,8(sp)
  d0ac80:	dc400117 	ldw	r17,4(sp)
  d0ac84:	dc000017 	ldw	r16,0(sp)
  d0ac88:	dec00304 	addi	sp,sp,12
  d0ac8c:	f800283a 	ret
  d0ac90:	80800017 	ldw	r2,0(r16)
  d0ac94:	103ff826 	beq	r2,zero,d0ac78 <_close_r+0x34>
  d0ac98:	88800015 	stw	r2,0(r17)
  d0ac9c:	1805883a 	mov	r2,r3
  d0aca0:	dfc00217 	ldw	ra,8(sp)
  d0aca4:	dc400117 	ldw	r17,4(sp)
  d0aca8:	dc000017 	ldw	r16,0(sp)
  d0acac:	dec00304 	addi	sp,sp,12
  d0acb0:	f800283a 	ret

00d0acb4 <_fclose_r>:
  d0acb4:	defffc04 	addi	sp,sp,-16
  d0acb8:	dc400115 	stw	r17,4(sp)
  d0acbc:	dc000015 	stw	r16,0(sp)
  d0acc0:	dfc00315 	stw	ra,12(sp)
  d0acc4:	dc800215 	stw	r18,8(sp)
  d0acc8:	2821883a 	mov	r16,r5
  d0accc:	2023883a 	mov	r17,r4
  d0acd0:	28002926 	beq	r5,zero,d0ad78 <_fclose_r+0xc4>
  d0acd4:	0d078f00 	call	d078f0 <__sfp_lock_acquire>
  d0acd8:	88000226 	beq	r17,zero,d0ace4 <_fclose_r+0x30>
  d0acdc:	88800e17 	ldw	r2,56(r17)
  d0ace0:	10002d26 	beq	r2,zero,d0ad98 <_fclose_r+0xe4>
  d0ace4:	8080030f 	ldh	r2,12(r16)
  d0ace8:	10002226 	beq	r2,zero,d0ad74 <_fclose_r+0xc0>
  d0acec:	8809883a 	mov	r4,r17
  d0acf0:	800b883a 	mov	r5,r16
  d0acf4:	0d076680 	call	d07668 <_fflush_r>
  d0acf8:	1025883a 	mov	r18,r2
  d0acfc:	80800b17 	ldw	r2,44(r16)
  d0ad00:	10000426 	beq	r2,zero,d0ad14 <_fclose_r+0x60>
  d0ad04:	81400717 	ldw	r5,28(r16)
  d0ad08:	8809883a 	mov	r4,r17
  d0ad0c:	103ee83a 	callr	r2
  d0ad10:	10002a16 	blt	r2,zero,d0adbc <_fclose_r+0x108>
  d0ad14:	8080030b 	ldhu	r2,12(r16)
  d0ad18:	1080200c 	andi	r2,r2,128
  d0ad1c:	1000231e 	bne	r2,zero,d0adac <_fclose_r+0xf8>
  d0ad20:	81400c17 	ldw	r5,48(r16)
  d0ad24:	28000526 	beq	r5,zero,d0ad3c <_fclose_r+0x88>
  d0ad28:	80801004 	addi	r2,r16,64
  d0ad2c:	28800226 	beq	r5,r2,d0ad38 <_fclose_r+0x84>
  d0ad30:	8809883a 	mov	r4,r17
  d0ad34:	0d07c840 	call	d07c84 <_free_r>
  d0ad38:	80000c15 	stw	zero,48(r16)
  d0ad3c:	81401117 	ldw	r5,68(r16)
  d0ad40:	28000326 	beq	r5,zero,d0ad50 <_fclose_r+0x9c>
  d0ad44:	8809883a 	mov	r4,r17
  d0ad48:	0d07c840 	call	d07c84 <_free_r>
  d0ad4c:	80001115 	stw	zero,68(r16)
  d0ad50:	8000030d 	sth	zero,12(r16)
  d0ad54:	0d078f40 	call	d078f4 <__sfp_lock_release>
  d0ad58:	9005883a 	mov	r2,r18
  d0ad5c:	dfc00317 	ldw	ra,12(sp)
  d0ad60:	dc800217 	ldw	r18,8(sp)
  d0ad64:	dc400117 	ldw	r17,4(sp)
  d0ad68:	dc000017 	ldw	r16,0(sp)
  d0ad6c:	dec00404 	addi	sp,sp,16
  d0ad70:	f800283a 	ret
  d0ad74:	0d078f40 	call	d078f4 <__sfp_lock_release>
  d0ad78:	0025883a 	mov	r18,zero
  d0ad7c:	9005883a 	mov	r2,r18
  d0ad80:	dfc00317 	ldw	ra,12(sp)
  d0ad84:	dc800217 	ldw	r18,8(sp)
  d0ad88:	dc400117 	ldw	r17,4(sp)
  d0ad8c:	dc000017 	ldw	r16,0(sp)
  d0ad90:	dec00404 	addi	sp,sp,16
  d0ad94:	f800283a 	ret
  d0ad98:	8809883a 	mov	r4,r17
  d0ad9c:	0d079000 	call	d07900 <__sinit>
  d0ada0:	8080030f 	ldh	r2,12(r16)
  d0ada4:	103fd11e 	bne	r2,zero,d0acec <_fclose_r+0x38>
  d0ada8:	003ff206 	br	d0ad74 <_fclose_r+0xc0>
  d0adac:	81400417 	ldw	r5,16(r16)
  d0adb0:	8809883a 	mov	r4,r17
  d0adb4:	0d07c840 	call	d07c84 <_free_r>
  d0adb8:	003fd906 	br	d0ad20 <_fclose_r+0x6c>
  d0adbc:	04bfffc4 	movi	r18,-1
  d0adc0:	003fd406 	br	d0ad14 <_fclose_r+0x60>

00d0adc4 <fclose>:
  d0adc4:	00803474 	movhi	r2,209
  d0adc8:	108bf904 	addi	r2,r2,12260
  d0adcc:	200b883a 	mov	r5,r4
  d0add0:	11000017 	ldw	r4,0(r2)
  d0add4:	0d0acb41 	jmpi	d0acb4 <_fclose_r>

00d0add8 <_fstat_r>:
  d0add8:	defffd04 	addi	sp,sp,-12
  d0addc:	dc000015 	stw	r16,0(sp)
  d0ade0:	04003474 	movhi	r16,209
  d0ade4:	84130a04 	addi	r16,r16,19496
  d0ade8:	dc400115 	stw	r17,4(sp)
  d0adec:	80000015 	stw	zero,0(r16)
  d0adf0:	2023883a 	mov	r17,r4
  d0adf4:	2809883a 	mov	r4,r5
  d0adf8:	300b883a 	mov	r5,r6
  d0adfc:	dfc00215 	stw	ra,8(sp)
  d0ae00:	0d0c7540 	call	d0c754 <fstat>
  d0ae04:	1007883a 	mov	r3,r2
  d0ae08:	00bfffc4 	movi	r2,-1
  d0ae0c:	18800626 	beq	r3,r2,d0ae28 <_fstat_r+0x50>
  d0ae10:	1805883a 	mov	r2,r3
  d0ae14:	dfc00217 	ldw	ra,8(sp)
  d0ae18:	dc400117 	ldw	r17,4(sp)
  d0ae1c:	dc000017 	ldw	r16,0(sp)
  d0ae20:	dec00304 	addi	sp,sp,12
  d0ae24:	f800283a 	ret
  d0ae28:	80800017 	ldw	r2,0(r16)
  d0ae2c:	103ff826 	beq	r2,zero,d0ae10 <_fstat_r+0x38>
  d0ae30:	88800015 	stw	r2,0(r17)
  d0ae34:	1805883a 	mov	r2,r3
  d0ae38:	dfc00217 	ldw	ra,8(sp)
  d0ae3c:	dc400117 	ldw	r17,4(sp)
  d0ae40:	dc000017 	ldw	r16,0(sp)
  d0ae44:	dec00304 	addi	sp,sp,12
  d0ae48:	f800283a 	ret

00d0ae4c <_isatty_r>:
  d0ae4c:	defffd04 	addi	sp,sp,-12
  d0ae50:	dc000015 	stw	r16,0(sp)
  d0ae54:	04003474 	movhi	r16,209
  d0ae58:	84130a04 	addi	r16,r16,19496
  d0ae5c:	dc400115 	stw	r17,4(sp)
  d0ae60:	80000015 	stw	zero,0(r16)
  d0ae64:	2023883a 	mov	r17,r4
  d0ae68:	2809883a 	mov	r4,r5
  d0ae6c:	dfc00215 	stw	ra,8(sp)
  d0ae70:	0d0c8880 	call	d0c888 <isatty>
  d0ae74:	1007883a 	mov	r3,r2
  d0ae78:	00bfffc4 	movi	r2,-1
  d0ae7c:	18800626 	beq	r3,r2,d0ae98 <_isatty_r+0x4c>
  d0ae80:	1805883a 	mov	r2,r3
  d0ae84:	dfc00217 	ldw	ra,8(sp)
  d0ae88:	dc400117 	ldw	r17,4(sp)
  d0ae8c:	dc000017 	ldw	r16,0(sp)
  d0ae90:	dec00304 	addi	sp,sp,12
  d0ae94:	f800283a 	ret
  d0ae98:	80800017 	ldw	r2,0(r16)
  d0ae9c:	103ff826 	beq	r2,zero,d0ae80 <_isatty_r+0x34>
  d0aea0:	88800015 	stw	r2,0(r17)
  d0aea4:	1805883a 	mov	r2,r3
  d0aea8:	dfc00217 	ldw	ra,8(sp)
  d0aeac:	dc400117 	ldw	r17,4(sp)
  d0aeb0:	dc000017 	ldw	r16,0(sp)
  d0aeb4:	dec00304 	addi	sp,sp,12
  d0aeb8:	f800283a 	ret

00d0aebc <_lseek_r>:
  d0aebc:	defffd04 	addi	sp,sp,-12
  d0aec0:	dc000015 	stw	r16,0(sp)
  d0aec4:	04003474 	movhi	r16,209
  d0aec8:	84130a04 	addi	r16,r16,19496
  d0aecc:	dc400115 	stw	r17,4(sp)
  d0aed0:	80000015 	stw	zero,0(r16)
  d0aed4:	2023883a 	mov	r17,r4
  d0aed8:	2809883a 	mov	r4,r5
  d0aedc:	300b883a 	mov	r5,r6
  d0aee0:	380d883a 	mov	r6,r7
  d0aee4:	dfc00215 	stw	ra,8(sp)
  d0aee8:	0d0ca940 	call	d0ca94 <lseek>
  d0aeec:	1007883a 	mov	r3,r2
  d0aef0:	00bfffc4 	movi	r2,-1
  d0aef4:	18800626 	beq	r3,r2,d0af10 <_lseek_r+0x54>
  d0aef8:	1805883a 	mov	r2,r3
  d0aefc:	dfc00217 	ldw	ra,8(sp)
  d0af00:	dc400117 	ldw	r17,4(sp)
  d0af04:	dc000017 	ldw	r16,0(sp)
  d0af08:	dec00304 	addi	sp,sp,12
  d0af0c:	f800283a 	ret
  d0af10:	80800017 	ldw	r2,0(r16)
  d0af14:	103ff826 	beq	r2,zero,d0aef8 <_lseek_r+0x3c>
  d0af18:	88800015 	stw	r2,0(r17)
  d0af1c:	1805883a 	mov	r2,r3
  d0af20:	dfc00217 	ldw	ra,8(sp)
  d0af24:	dc400117 	ldw	r17,4(sp)
  d0af28:	dc000017 	ldw	r16,0(sp)
  d0af2c:	dec00304 	addi	sp,sp,12
  d0af30:	f800283a 	ret

00d0af34 <_read_r>:
  d0af34:	defffd04 	addi	sp,sp,-12
  d0af38:	dc000015 	stw	r16,0(sp)
  d0af3c:	04003474 	movhi	r16,209
  d0af40:	84130a04 	addi	r16,r16,19496
  d0af44:	dc400115 	stw	r17,4(sp)
  d0af48:	80000015 	stw	zero,0(r16)
  d0af4c:	2023883a 	mov	r17,r4
  d0af50:	2809883a 	mov	r4,r5
  d0af54:	300b883a 	mov	r5,r6
  d0af58:	380d883a 	mov	r6,r7
  d0af5c:	dfc00215 	stw	ra,8(sp)
  d0af60:	0d0cc900 	call	d0cc90 <read>
  d0af64:	1007883a 	mov	r3,r2
  d0af68:	00bfffc4 	movi	r2,-1
  d0af6c:	18800626 	beq	r3,r2,d0af88 <_read_r+0x54>
  d0af70:	1805883a 	mov	r2,r3
  d0af74:	dfc00217 	ldw	ra,8(sp)
  d0af78:	dc400117 	ldw	r17,4(sp)
  d0af7c:	dc000017 	ldw	r16,0(sp)
  d0af80:	dec00304 	addi	sp,sp,12
  d0af84:	f800283a 	ret
  d0af88:	80800017 	ldw	r2,0(r16)
  d0af8c:	103ff826 	beq	r2,zero,d0af70 <_read_r+0x3c>
  d0af90:	88800015 	stw	r2,0(r17)
  d0af94:	1805883a 	mov	r2,r3
  d0af98:	dfc00217 	ldw	ra,8(sp)
  d0af9c:	dc400117 	ldw	r17,4(sp)
  d0afa0:	dc000017 	ldw	r16,0(sp)
  d0afa4:	dec00304 	addi	sp,sp,12
  d0afa8:	f800283a 	ret

00d0afac <__udivdi3>:
  d0afac:	defff004 	addi	sp,sp,-64
  d0afb0:	2005883a 	mov	r2,r4
  d0afb4:	3011883a 	mov	r8,r6
  d0afb8:	df000e15 	stw	fp,56(sp)
  d0afbc:	dd000a15 	stw	r20,40(sp)
  d0afc0:	dc000615 	stw	r16,24(sp)
  d0afc4:	dfc00f15 	stw	ra,60(sp)
  d0afc8:	ddc00d15 	stw	r23,52(sp)
  d0afcc:	dd800c15 	stw	r22,48(sp)
  d0afd0:	dd400b15 	stw	r21,44(sp)
  d0afd4:	dcc00915 	stw	r19,36(sp)
  d0afd8:	dc800815 	stw	r18,32(sp)
  d0afdc:	dc400715 	stw	r17,28(sp)
  d0afe0:	4021883a 	mov	r16,r8
  d0afe4:	1039883a 	mov	fp,r2
  d0afe8:	2829883a 	mov	r20,r5
  d0afec:	38003b1e 	bne	r7,zero,d0b0dc <__udivdi3+0x130>
  d0aff0:	2a005c36 	bltu	r5,r8,d0b164 <__udivdi3+0x1b8>
  d0aff4:	4000a626 	beq	r8,zero,d0b290 <__udivdi3+0x2e4>
  d0aff8:	00bfffd4 	movui	r2,65535
  d0affc:	14009e36 	bltu	r2,r16,d0b278 <__udivdi3+0x2cc>
  d0b000:	00803fc4 	movi	r2,255
  d0b004:	14013d36 	bltu	r2,r16,d0b4fc <__udivdi3+0x550>
  d0b008:	000b883a 	mov	r5,zero
  d0b00c:	0005883a 	mov	r2,zero
  d0b010:	8084d83a 	srl	r2,r16,r2
  d0b014:	01003474 	movhi	r4,209
  d0b018:	21040704 	addi	r4,r4,4124
  d0b01c:	01800804 	movi	r6,32
  d0b020:	1105883a 	add	r2,r2,r4
  d0b024:	10c00003 	ldbu	r3,0(r2)
  d0b028:	28c7883a 	add	r3,r5,r3
  d0b02c:	30edc83a 	sub	r22,r6,r3
  d0b030:	b000ee1e 	bne	r22,zero,d0b3ec <__udivdi3+0x440>
  d0b034:	802ad43a 	srli	r21,r16,16
  d0b038:	00800044 	movi	r2,1
  d0b03c:	a423c83a 	sub	r17,r20,r16
  d0b040:	85ffffcc 	andi	r23,r16,65535
  d0b044:	d8800315 	stw	r2,12(sp)
  d0b048:	8809883a 	mov	r4,r17
  d0b04c:	a80b883a 	mov	r5,r21
  d0b050:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b054:	8809883a 	mov	r4,r17
  d0b058:	a80b883a 	mov	r5,r21
  d0b05c:	102d883a 	mov	r22,r2
  d0b060:	0d0c5c40 	call	d0c5c4 <__umodsi3>
  d0b064:	1004943a 	slli	r2,r2,16
  d0b068:	e006d43a 	srli	r3,fp,16
  d0b06c:	bda3383a 	mul	r17,r23,r22
  d0b070:	10c4b03a 	or	r2,r2,r3
  d0b074:	1440042e 	bgeu	r2,r17,d0b088 <__udivdi3+0xdc>
  d0b078:	1405883a 	add	r2,r2,r16
  d0b07c:	b5bfffc4 	addi	r22,r22,-1
  d0b080:	14000136 	bltu	r2,r16,d0b088 <__udivdi3+0xdc>
  d0b084:	14413d36 	bltu	r2,r17,d0b57c <__udivdi3+0x5d0>
  d0b088:	1463c83a 	sub	r17,r2,r17
  d0b08c:	8809883a 	mov	r4,r17
  d0b090:	a80b883a 	mov	r5,r21
  d0b094:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b098:	8809883a 	mov	r4,r17
  d0b09c:	a80b883a 	mov	r5,r21
  d0b0a0:	1029883a 	mov	r20,r2
  d0b0a4:	0d0c5c40 	call	d0c5c4 <__umodsi3>
  d0b0a8:	1004943a 	slli	r2,r2,16
  d0b0ac:	bd09383a 	mul	r4,r23,r20
  d0b0b0:	e0ffffcc 	andi	r3,fp,65535
  d0b0b4:	10c4b03a 	or	r2,r2,r3
  d0b0b8:	1100042e 	bgeu	r2,r4,d0b0cc <__udivdi3+0x120>
  d0b0bc:	8085883a 	add	r2,r16,r2
  d0b0c0:	a53fffc4 	addi	r20,r20,-1
  d0b0c4:	14000136 	bltu	r2,r16,d0b0cc <__udivdi3+0x120>
  d0b0c8:	11012036 	bltu	r2,r4,d0b54c <__udivdi3+0x5a0>
  d0b0cc:	b004943a 	slli	r2,r22,16
  d0b0d0:	d9000317 	ldw	r4,12(sp)
  d0b0d4:	a084b03a 	or	r2,r20,r2
  d0b0d8:	00001506 	br	d0b130 <__udivdi3+0x184>
  d0b0dc:	380d883a 	mov	r6,r7
  d0b0e0:	29c06236 	bltu	r5,r7,d0b26c <__udivdi3+0x2c0>
  d0b0e4:	00bfffd4 	movui	r2,65535
  d0b0e8:	11c05a36 	bltu	r2,r7,d0b254 <__udivdi3+0x2a8>
  d0b0ec:	00803fc4 	movi	r2,255
  d0b0f0:	11c0fc36 	bltu	r2,r7,d0b4e4 <__udivdi3+0x538>
  d0b0f4:	000b883a 	mov	r5,zero
  d0b0f8:	0005883a 	mov	r2,zero
  d0b0fc:	3084d83a 	srl	r2,r6,r2
  d0b100:	01003474 	movhi	r4,209
  d0b104:	21040704 	addi	r4,r4,4124
  d0b108:	01c00804 	movi	r7,32
  d0b10c:	1105883a 	add	r2,r2,r4
  d0b110:	10c00003 	ldbu	r3,0(r2)
  d0b114:	28c7883a 	add	r3,r5,r3
  d0b118:	38efc83a 	sub	r23,r7,r3
  d0b11c:	b800691e 	bne	r23,zero,d0b2c4 <__udivdi3+0x318>
  d0b120:	35000136 	bltu	r6,r20,d0b128 <__udivdi3+0x17c>
  d0b124:	e4005136 	bltu	fp,r16,d0b26c <__udivdi3+0x2c0>
  d0b128:	00800044 	movi	r2,1
  d0b12c:	0009883a 	mov	r4,zero
  d0b130:	2007883a 	mov	r3,r4
  d0b134:	dfc00f17 	ldw	ra,60(sp)
  d0b138:	df000e17 	ldw	fp,56(sp)
  d0b13c:	ddc00d17 	ldw	r23,52(sp)
  d0b140:	dd800c17 	ldw	r22,48(sp)
  d0b144:	dd400b17 	ldw	r21,44(sp)
  d0b148:	dd000a17 	ldw	r20,40(sp)
  d0b14c:	dcc00917 	ldw	r19,36(sp)
  d0b150:	dc800817 	ldw	r18,32(sp)
  d0b154:	dc400717 	ldw	r17,28(sp)
  d0b158:	dc000617 	ldw	r16,24(sp)
  d0b15c:	dec01004 	addi	sp,sp,64
  d0b160:	f800283a 	ret
  d0b164:	00bfffd4 	movui	r2,65535
  d0b168:	12005036 	bltu	r2,r8,d0b2ac <__udivdi3+0x300>
  d0b16c:	00803fc4 	movi	r2,255
  d0b170:	1200e836 	bltu	r2,r8,d0b514 <__udivdi3+0x568>
  d0b174:	000b883a 	mov	r5,zero
  d0b178:	0005883a 	mov	r2,zero
  d0b17c:	8084d83a 	srl	r2,r16,r2
  d0b180:	01003474 	movhi	r4,209
  d0b184:	21040704 	addi	r4,r4,4124
  d0b188:	01800804 	movi	r6,32
  d0b18c:	1105883a 	add	r2,r2,r4
  d0b190:	10c00003 	ldbu	r3,0(r2)
  d0b194:	28c7883a 	add	r3,r5,r3
  d0b198:	30cbc83a 	sub	r5,r6,r3
  d0b19c:	28000626 	beq	r5,zero,d0b1b8 <__udivdi3+0x20c>
  d0b1a0:	3145c83a 	sub	r2,r6,r5
  d0b1a4:	e084d83a 	srl	r2,fp,r2
  d0b1a8:	a146983a 	sll	r3,r20,r5
  d0b1ac:	e178983a 	sll	fp,fp,r5
  d0b1b0:	8160983a 	sll	r16,r16,r5
  d0b1b4:	18a8b03a 	or	r20,r3,r2
  d0b1b8:	802ad43a 	srli	r21,r16,16
  d0b1bc:	a009883a 	mov	r4,r20
  d0b1c0:	85ffffcc 	andi	r23,r16,65535
  d0b1c4:	a80b883a 	mov	r5,r21
  d0b1c8:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b1cc:	a009883a 	mov	r4,r20
  d0b1d0:	a80b883a 	mov	r5,r21
  d0b1d4:	102d883a 	mov	r22,r2
  d0b1d8:	0d0c5c40 	call	d0c5c4 <__umodsi3>
  d0b1dc:	1004943a 	slli	r2,r2,16
  d0b1e0:	e006d43a 	srli	r3,fp,16
  d0b1e4:	bda3383a 	mul	r17,r23,r22
  d0b1e8:	10c4b03a 	or	r2,r2,r3
  d0b1ec:	1440042e 	bgeu	r2,r17,d0b200 <__udivdi3+0x254>
  d0b1f0:	1405883a 	add	r2,r2,r16
  d0b1f4:	b5bfffc4 	addi	r22,r22,-1
  d0b1f8:	14000136 	bltu	r2,r16,d0b200 <__udivdi3+0x254>
  d0b1fc:	1440d536 	bltu	r2,r17,d0b554 <__udivdi3+0x5a8>
  d0b200:	1463c83a 	sub	r17,r2,r17
  d0b204:	8809883a 	mov	r4,r17
  d0b208:	a80b883a 	mov	r5,r21
  d0b20c:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b210:	8809883a 	mov	r4,r17
  d0b214:	a80b883a 	mov	r5,r21
  d0b218:	1029883a 	mov	r20,r2
  d0b21c:	0d0c5c40 	call	d0c5c4 <__umodsi3>
  d0b220:	1004943a 	slli	r2,r2,16
  d0b224:	bd09383a 	mul	r4,r23,r20
  d0b228:	e0ffffcc 	andi	r3,fp,65535
  d0b22c:	10c4b03a 	or	r2,r2,r3
  d0b230:	1100042e 	bgeu	r2,r4,d0b244 <__udivdi3+0x298>
  d0b234:	8085883a 	add	r2,r16,r2
  d0b238:	a53fffc4 	addi	r20,r20,-1
  d0b23c:	14000136 	bltu	r2,r16,d0b244 <__udivdi3+0x298>
  d0b240:	1100c736 	bltu	r2,r4,d0b560 <__udivdi3+0x5b4>
  d0b244:	b004943a 	slli	r2,r22,16
  d0b248:	0009883a 	mov	r4,zero
  d0b24c:	a084b03a 	or	r2,r20,r2
  d0b250:	003fb706 	br	d0b130 <__udivdi3+0x184>
  d0b254:	00804034 	movhi	r2,256
  d0b258:	10bfffc4 	addi	r2,r2,-1
  d0b25c:	11c0a436 	bltu	r2,r7,d0b4f0 <__udivdi3+0x544>
  d0b260:	01400404 	movi	r5,16
  d0b264:	2805883a 	mov	r2,r5
  d0b268:	003fa406 	br	d0b0fc <__udivdi3+0x150>
  d0b26c:	0005883a 	mov	r2,zero
  d0b270:	0009883a 	mov	r4,zero
  d0b274:	003fae06 	br	d0b130 <__udivdi3+0x184>
  d0b278:	00804034 	movhi	r2,256
  d0b27c:	10bfffc4 	addi	r2,r2,-1
  d0b280:	1400a136 	bltu	r2,r16,d0b508 <__udivdi3+0x55c>
  d0b284:	01400404 	movi	r5,16
  d0b288:	2805883a 	mov	r2,r5
  d0b28c:	003f6006 	br	d0b010 <__udivdi3+0x64>
  d0b290:	01000044 	movi	r4,1
  d0b294:	000b883a 	mov	r5,zero
  d0b298:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b29c:	1021883a 	mov	r16,r2
  d0b2a0:	00bfffd4 	movui	r2,65535
  d0b2a4:	143ff436 	bltu	r2,r16,d0b278 <__udivdi3+0x2cc>
  d0b2a8:	003f5506 	br	d0b000 <__udivdi3+0x54>
  d0b2ac:	00804034 	movhi	r2,256
  d0b2b0:	10bfffc4 	addi	r2,r2,-1
  d0b2b4:	12009a36 	bltu	r2,r8,d0b520 <__udivdi3+0x574>
  d0b2b8:	01400404 	movi	r5,16
  d0b2bc:	2805883a 	mov	r2,r5
  d0b2c0:	003fae06 	br	d0b17c <__udivdi3+0x1d0>
  d0b2c4:	3dc5c83a 	sub	r2,r7,r23
  d0b2c8:	35c8983a 	sll	r4,r6,r23
  d0b2cc:	8086d83a 	srl	r3,r16,r2
  d0b2d0:	a0a2d83a 	srl	r17,r20,r2
  d0b2d4:	e084d83a 	srl	r2,fp,r2
  d0b2d8:	20eab03a 	or	r21,r4,r3
  d0b2dc:	a82cd43a 	srli	r22,r21,16
  d0b2e0:	a5c6983a 	sll	r3,r20,r23
  d0b2e4:	8809883a 	mov	r4,r17
  d0b2e8:	b00b883a 	mov	r5,r22
  d0b2ec:	1886b03a 	or	r3,r3,r2
  d0b2f0:	d8c00215 	stw	r3,8(sp)
  d0b2f4:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b2f8:	8809883a 	mov	r4,r17
  d0b2fc:	b00b883a 	mov	r5,r22
  d0b300:	1029883a 	mov	r20,r2
  d0b304:	0d0c5c40 	call	d0c5c4 <__umodsi3>
  d0b308:	a8ffffcc 	andi	r3,r21,65535
  d0b30c:	d8c00515 	stw	r3,20(sp)
  d0b310:	d9000217 	ldw	r4,8(sp)
  d0b314:	d9400517 	ldw	r5,20(sp)
  d0b318:	1004943a 	slli	r2,r2,16
  d0b31c:	2006d43a 	srli	r3,r4,16
  d0b320:	85e0983a 	sll	r16,r16,r23
  d0b324:	2d23383a 	mul	r17,r5,r20
  d0b328:	10c4b03a 	or	r2,r2,r3
  d0b32c:	dc000015 	stw	r16,0(sp)
  d0b330:	1440032e 	bgeu	r2,r17,d0b340 <__udivdi3+0x394>
  d0b334:	1545883a 	add	r2,r2,r21
  d0b338:	a53fffc4 	addi	r20,r20,-1
  d0b33c:	15407f2e 	bgeu	r2,r21,d0b53c <__udivdi3+0x590>
  d0b340:	1463c83a 	sub	r17,r2,r17
  d0b344:	8809883a 	mov	r4,r17
  d0b348:	b00b883a 	mov	r5,r22
  d0b34c:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b350:	8809883a 	mov	r4,r17
  d0b354:	b00b883a 	mov	r5,r22
  d0b358:	1021883a 	mov	r16,r2
  d0b35c:	0d0c5c40 	call	d0c5c4 <__umodsi3>
  d0b360:	d8c00517 	ldw	r3,20(sp)
  d0b364:	d9000217 	ldw	r4,8(sp)
  d0b368:	1004943a 	slli	r2,r2,16
  d0b36c:	1c0f383a 	mul	r7,r3,r16
  d0b370:	20ffffcc 	andi	r3,r4,65535
  d0b374:	10e2b03a 	or	r17,r2,r3
  d0b378:	89c0032e 	bgeu	r17,r7,d0b388 <__udivdi3+0x3dc>
  d0b37c:	8d63883a 	add	r17,r17,r21
  d0b380:	843fffc4 	addi	r16,r16,-1
  d0b384:	8d40692e 	bgeu	r17,r21,d0b52c <__udivdi3+0x580>
  d0b388:	a008943a 	slli	r4,r20,16
  d0b38c:	d9400017 	ldw	r5,0(sp)
  d0b390:	89e3c83a 	sub	r17,r17,r7
  d0b394:	8110b03a 	or	r8,r16,r4
  d0b398:	280cd43a 	srli	r6,r5,16
  d0b39c:	28ffffcc 	andi	r3,r5,65535
  d0b3a0:	40bfffcc 	andi	r2,r8,65535
  d0b3a4:	400ad43a 	srli	r5,r8,16
  d0b3a8:	10d3383a 	mul	r9,r2,r3
  d0b3ac:	1185383a 	mul	r2,r2,r6
  d0b3b0:	28c7383a 	mul	r3,r5,r3
  d0b3b4:	4808d43a 	srli	r4,r9,16
  d0b3b8:	298b383a 	mul	r5,r5,r6
  d0b3bc:	10c5883a 	add	r2,r2,r3
  d0b3c0:	2089883a 	add	r4,r4,r2
  d0b3c4:	20c0022e 	bgeu	r4,r3,d0b3d0 <__udivdi3+0x424>
  d0b3c8:	00800074 	movhi	r2,1
  d0b3cc:	288b883a 	add	r5,r5,r2
  d0b3d0:	2004d43a 	srli	r2,r4,16
  d0b3d4:	288b883a 	add	r5,r5,r2
  d0b3d8:	89403f36 	bltu	r17,r5,d0b4d8 <__udivdi3+0x52c>
  d0b3dc:	89403926 	beq	r17,r5,d0b4c4 <__udivdi3+0x518>
  d0b3e0:	4005883a 	mov	r2,r8
  d0b3e4:	0009883a 	mov	r4,zero
  d0b3e8:	003f5106 	br	d0b130 <__udivdi3+0x184>
  d0b3ec:	85a0983a 	sll	r16,r16,r22
  d0b3f0:	3585c83a 	sub	r2,r6,r22
  d0b3f4:	a0a2d83a 	srl	r17,r20,r2
  d0b3f8:	802ad43a 	srli	r21,r16,16
  d0b3fc:	e084d83a 	srl	r2,fp,r2
  d0b400:	a586983a 	sll	r3,r20,r22
  d0b404:	8809883a 	mov	r4,r17
  d0b408:	a80b883a 	mov	r5,r21
  d0b40c:	1886b03a 	or	r3,r3,r2
  d0b410:	d8c00115 	stw	r3,4(sp)
  d0b414:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b418:	8809883a 	mov	r4,r17
  d0b41c:	a80b883a 	mov	r5,r21
  d0b420:	d8800415 	stw	r2,16(sp)
  d0b424:	0d0c5c40 	call	d0c5c4 <__umodsi3>
  d0b428:	d9000117 	ldw	r4,4(sp)
  d0b42c:	d9400417 	ldw	r5,16(sp)
  d0b430:	1004943a 	slli	r2,r2,16
  d0b434:	85ffffcc 	andi	r23,r16,65535
  d0b438:	2006d43a 	srli	r3,r4,16
  d0b43c:	b963383a 	mul	r17,r23,r5
  d0b440:	10c4b03a 	or	r2,r2,r3
  d0b444:	1440042e 	bgeu	r2,r17,d0b458 <__udivdi3+0x4ac>
  d0b448:	297fffc4 	addi	r5,r5,-1
  d0b44c:	1405883a 	add	r2,r2,r16
  d0b450:	d9400415 	stw	r5,16(sp)
  d0b454:	1400442e 	bgeu	r2,r16,d0b568 <__udivdi3+0x5bc>
  d0b458:	1463c83a 	sub	r17,r2,r17
  d0b45c:	8809883a 	mov	r4,r17
  d0b460:	a80b883a 	mov	r5,r21
  d0b464:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b468:	8809883a 	mov	r4,r17
  d0b46c:	a80b883a 	mov	r5,r21
  d0b470:	1029883a 	mov	r20,r2
  d0b474:	0d0c5c40 	call	d0c5c4 <__umodsi3>
  d0b478:	d9400117 	ldw	r5,4(sp)
  d0b47c:	1004943a 	slli	r2,r2,16
  d0b480:	bd09383a 	mul	r4,r23,r20
  d0b484:	28ffffcc 	andi	r3,r5,65535
  d0b488:	10c6b03a 	or	r3,r2,r3
  d0b48c:	1900062e 	bgeu	r3,r4,d0b4a8 <__udivdi3+0x4fc>
  d0b490:	1c07883a 	add	r3,r3,r16
  d0b494:	a53fffc4 	addi	r20,r20,-1
  d0b498:	1c000336 	bltu	r3,r16,d0b4a8 <__udivdi3+0x4fc>
  d0b49c:	1900022e 	bgeu	r3,r4,d0b4a8 <__udivdi3+0x4fc>
  d0b4a0:	a53fffc4 	addi	r20,r20,-1
  d0b4a4:	1c07883a 	add	r3,r3,r16
  d0b4a8:	d9400417 	ldw	r5,16(sp)
  d0b4ac:	e5b8983a 	sll	fp,fp,r22
  d0b4b0:	1923c83a 	sub	r17,r3,r4
  d0b4b4:	2804943a 	slli	r2,r5,16
  d0b4b8:	a0a8b03a 	or	r20,r20,r2
  d0b4bc:	dd000315 	stw	r20,12(sp)
  d0b4c0:	003ee106 	br	d0b048 <__udivdi3+0x9c>
  d0b4c4:	2004943a 	slli	r2,r4,16
  d0b4c8:	e5c8983a 	sll	r4,fp,r23
  d0b4cc:	48ffffcc 	andi	r3,r9,65535
  d0b4d0:	10c5883a 	add	r2,r2,r3
  d0b4d4:	20bfc22e 	bgeu	r4,r2,d0b3e0 <__udivdi3+0x434>
  d0b4d8:	40bfffc4 	addi	r2,r8,-1
  d0b4dc:	0009883a 	mov	r4,zero
  d0b4e0:	003f1306 	br	d0b130 <__udivdi3+0x184>
  d0b4e4:	01400204 	movi	r5,8
  d0b4e8:	2805883a 	mov	r2,r5
  d0b4ec:	003f0306 	br	d0b0fc <__udivdi3+0x150>
  d0b4f0:	01400604 	movi	r5,24
  d0b4f4:	2805883a 	mov	r2,r5
  d0b4f8:	003f0006 	br	d0b0fc <__udivdi3+0x150>
  d0b4fc:	01400204 	movi	r5,8
  d0b500:	2805883a 	mov	r2,r5
  d0b504:	003ec206 	br	d0b010 <__udivdi3+0x64>
  d0b508:	01400604 	movi	r5,24
  d0b50c:	2805883a 	mov	r2,r5
  d0b510:	003ebf06 	br	d0b010 <__udivdi3+0x64>
  d0b514:	01400204 	movi	r5,8
  d0b518:	2805883a 	mov	r2,r5
  d0b51c:	003f1706 	br	d0b17c <__udivdi3+0x1d0>
  d0b520:	01400604 	movi	r5,24
  d0b524:	2805883a 	mov	r2,r5
  d0b528:	003f1406 	br	d0b17c <__udivdi3+0x1d0>
  d0b52c:	89ff962e 	bgeu	r17,r7,d0b388 <__udivdi3+0x3dc>
  d0b530:	8d63883a 	add	r17,r17,r21
  d0b534:	843fffc4 	addi	r16,r16,-1
  d0b538:	003f9306 	br	d0b388 <__udivdi3+0x3dc>
  d0b53c:	147f802e 	bgeu	r2,r17,d0b340 <__udivdi3+0x394>
  d0b540:	a53fffc4 	addi	r20,r20,-1
  d0b544:	1545883a 	add	r2,r2,r21
  d0b548:	003f7d06 	br	d0b340 <__udivdi3+0x394>
  d0b54c:	a53fffc4 	addi	r20,r20,-1
  d0b550:	003ede06 	br	d0b0cc <__udivdi3+0x120>
  d0b554:	b5bfffc4 	addi	r22,r22,-1
  d0b558:	1405883a 	add	r2,r2,r16
  d0b55c:	003f2806 	br	d0b200 <__udivdi3+0x254>
  d0b560:	a53fffc4 	addi	r20,r20,-1
  d0b564:	003f3706 	br	d0b244 <__udivdi3+0x298>
  d0b568:	147fbb2e 	bgeu	r2,r17,d0b458 <__udivdi3+0x4ac>
  d0b56c:	297fffc4 	addi	r5,r5,-1
  d0b570:	1405883a 	add	r2,r2,r16
  d0b574:	d9400415 	stw	r5,16(sp)
  d0b578:	003fb706 	br	d0b458 <__udivdi3+0x4ac>
  d0b57c:	b5bfffc4 	addi	r22,r22,-1
  d0b580:	1405883a 	add	r2,r2,r16
  d0b584:	003ec006 	br	d0b088 <__udivdi3+0xdc>

00d0b588 <__umoddi3>:
  d0b588:	defff104 	addi	sp,sp,-60
  d0b58c:	dd800b15 	stw	r22,44(sp)
  d0b590:	dd000915 	stw	r20,36(sp)
  d0b594:	dc000515 	stw	r16,20(sp)
  d0b598:	dfc00e15 	stw	ra,56(sp)
  d0b59c:	df000d15 	stw	fp,52(sp)
  d0b5a0:	ddc00c15 	stw	r23,48(sp)
  d0b5a4:	dd400a15 	stw	r21,40(sp)
  d0b5a8:	dcc00815 	stw	r19,32(sp)
  d0b5ac:	dc800715 	stw	r18,28(sp)
  d0b5b0:	dc400615 	stw	r17,24(sp)
  d0b5b4:	3021883a 	mov	r16,r6
  d0b5b8:	202d883a 	mov	r22,r4
  d0b5bc:	2829883a 	mov	r20,r5
  d0b5c0:	38002b1e 	bne	r7,zero,d0b670 <__umoddi3+0xe8>
  d0b5c4:	29805036 	bltu	r5,r6,d0b708 <__umoddi3+0x180>
  d0b5c8:	30008a26 	beq	r6,zero,d0b7f4 <__umoddi3+0x26c>
  d0b5cc:	00bfffd4 	movui	r2,65535
  d0b5d0:	14008236 	bltu	r2,r16,d0b7dc <__umoddi3+0x254>
  d0b5d4:	00803fc4 	movi	r2,255
  d0b5d8:	14013636 	bltu	r2,r16,d0bab4 <__umoddi3+0x52c>
  d0b5dc:	000b883a 	mov	r5,zero
  d0b5e0:	0005883a 	mov	r2,zero
  d0b5e4:	8084d83a 	srl	r2,r16,r2
  d0b5e8:	01003474 	movhi	r4,209
  d0b5ec:	21040704 	addi	r4,r4,4124
  d0b5f0:	01800804 	movi	r6,32
  d0b5f4:	1105883a 	add	r2,r2,r4
  d0b5f8:	10c00003 	ldbu	r3,0(r2)
  d0b5fc:	28c7883a 	add	r3,r5,r3
  d0b600:	30efc83a 	sub	r23,r6,r3
  d0b604:	b800941e 	bne	r23,zero,d0b858 <__umoddi3+0x2d0>
  d0b608:	802ad43a 	srli	r21,r16,16
  d0b60c:	a423c83a 	sub	r17,r20,r16
  d0b610:	0039883a 	mov	fp,zero
  d0b614:	853fffcc 	andi	r20,r16,65535
  d0b618:	8809883a 	mov	r4,r17
  d0b61c:	a80b883a 	mov	r5,r21
  d0b620:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b624:	8809883a 	mov	r4,r17
  d0b628:	a80b883a 	mov	r5,r21
  d0b62c:	a0a3383a 	mul	r17,r20,r2
  d0b630:	0d0c5c40 	call	d0c5c4 <__umodsi3>
  d0b634:	1004943a 	slli	r2,r2,16
  d0b638:	b006d43a 	srli	r3,r22,16
  d0b63c:	10c4b03a 	or	r2,r2,r3
  d0b640:	1440032e 	bgeu	r2,r17,d0b650 <__umoddi3+0xc8>
  d0b644:	1405883a 	add	r2,r2,r16
  d0b648:	14000136 	bltu	r2,r16,d0b650 <__umoddi3+0xc8>
  d0b64c:	14413536 	bltu	r2,r17,d0bb24 <__umoddi3+0x59c>
  d0b650:	1463c83a 	sub	r17,r2,r17
  d0b654:	8809883a 	mov	r4,r17
  d0b658:	a80b883a 	mov	r5,r21
  d0b65c:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b660:	8809883a 	mov	r4,r17
  d0b664:	a0a3383a 	mul	r17,r20,r2
  d0b668:	a80b883a 	mov	r5,r21
  d0b66c:	00004d06 	br	d0b7a4 <__umoddi3+0x21c>
  d0b670:	380d883a 	mov	r6,r7
  d0b674:	29c0102e 	bgeu	r5,r7,d0b6b8 <__umoddi3+0x130>
  d0b678:	2011883a 	mov	r8,r4
  d0b67c:	2813883a 	mov	r9,r5
  d0b680:	4005883a 	mov	r2,r8
  d0b684:	4807883a 	mov	r3,r9
  d0b688:	dfc00e17 	ldw	ra,56(sp)
  d0b68c:	df000d17 	ldw	fp,52(sp)
  d0b690:	ddc00c17 	ldw	r23,48(sp)
  d0b694:	dd800b17 	ldw	r22,44(sp)
  d0b698:	dd400a17 	ldw	r21,40(sp)
  d0b69c:	dd000917 	ldw	r20,36(sp)
  d0b6a0:	dcc00817 	ldw	r19,32(sp)
  d0b6a4:	dc800717 	ldw	r18,28(sp)
  d0b6a8:	dc400617 	ldw	r17,24(sp)
  d0b6ac:	dc000517 	ldw	r16,20(sp)
  d0b6b0:	dec00f04 	addi	sp,sp,60
  d0b6b4:	f800283a 	ret
  d0b6b8:	00bfffd4 	movui	r2,65535
  d0b6bc:	11c05a36 	bltu	r2,r7,d0b828 <__umoddi3+0x2a0>
  d0b6c0:	00803fc4 	movi	r2,255
  d0b6c4:	11c0fe36 	bltu	r2,r7,d0bac0 <__umoddi3+0x538>
  d0b6c8:	000b883a 	mov	r5,zero
  d0b6cc:	0005883a 	mov	r2,zero
  d0b6d0:	3084d83a 	srl	r2,r6,r2
  d0b6d4:	01003474 	movhi	r4,209
  d0b6d8:	21040704 	addi	r4,r4,4124
  d0b6dc:	01c00804 	movi	r7,32
  d0b6e0:	1105883a 	add	r2,r2,r4
  d0b6e4:	10c00003 	ldbu	r3,0(r2)
  d0b6e8:	28c7883a 	add	r3,r5,r3
  d0b6ec:	38ebc83a 	sub	r21,r7,r3
  d0b6f0:	a800851e 	bne	r21,zero,d0b908 <__umoddi3+0x380>
  d0b6f4:	35005236 	bltu	r6,r20,d0b840 <__umoddi3+0x2b8>
  d0b6f8:	b400512e 	bgeu	r22,r16,d0b840 <__umoddi3+0x2b8>
  d0b6fc:	b011883a 	mov	r8,r22
  d0b700:	a013883a 	mov	r9,r20
  d0b704:	003fde06 	br	d0b680 <__umoddi3+0xf8>
  d0b708:	00bfffd4 	movui	r2,65535
  d0b70c:	11804036 	bltu	r2,r6,d0b810 <__umoddi3+0x288>
  d0b710:	00803fc4 	movi	r2,255
  d0b714:	1180ed36 	bltu	r2,r6,d0bacc <__umoddi3+0x544>
  d0b718:	000b883a 	mov	r5,zero
  d0b71c:	0005883a 	mov	r2,zero
  d0b720:	8084d83a 	srl	r2,r16,r2
  d0b724:	01003474 	movhi	r4,209
  d0b728:	21040704 	addi	r4,r4,4124
  d0b72c:	01800804 	movi	r6,32
  d0b730:	1105883a 	add	r2,r2,r4
  d0b734:	10c00003 	ldbu	r3,0(r2)
  d0b738:	28c7883a 	add	r3,r5,r3
  d0b73c:	30c7c83a 	sub	r3,r6,r3
  d0b740:	1800bf1e 	bne	r3,zero,d0ba40 <__umoddi3+0x4b8>
  d0b744:	0039883a 	mov	fp,zero
  d0b748:	802ad43a 	srli	r21,r16,16
  d0b74c:	a009883a 	mov	r4,r20
  d0b750:	85ffffcc 	andi	r23,r16,65535
  d0b754:	a80b883a 	mov	r5,r21
  d0b758:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b75c:	a009883a 	mov	r4,r20
  d0b760:	a80b883a 	mov	r5,r21
  d0b764:	b8a3383a 	mul	r17,r23,r2
  d0b768:	0d0c5c40 	call	d0c5c4 <__umodsi3>
  d0b76c:	1004943a 	slli	r2,r2,16
  d0b770:	b006d43a 	srli	r3,r22,16
  d0b774:	10c4b03a 	or	r2,r2,r3
  d0b778:	1440032e 	bgeu	r2,r17,d0b788 <__umoddi3+0x200>
  d0b77c:	1405883a 	add	r2,r2,r16
  d0b780:	14000136 	bltu	r2,r16,d0b788 <__umoddi3+0x200>
  d0b784:	1440e536 	bltu	r2,r17,d0bb1c <__umoddi3+0x594>
  d0b788:	1463c83a 	sub	r17,r2,r17
  d0b78c:	8809883a 	mov	r4,r17
  d0b790:	a80b883a 	mov	r5,r21
  d0b794:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b798:	8809883a 	mov	r4,r17
  d0b79c:	b8a3383a 	mul	r17,r23,r2
  d0b7a0:	a80b883a 	mov	r5,r21
  d0b7a4:	0d0c5c40 	call	d0c5c4 <__umodsi3>
  d0b7a8:	1004943a 	slli	r2,r2,16
  d0b7ac:	b0ffffcc 	andi	r3,r22,65535
  d0b7b0:	10c4b03a 	or	r2,r2,r3
  d0b7b4:	1440042e 	bgeu	r2,r17,d0b7c8 <__umoddi3+0x240>
  d0b7b8:	1405883a 	add	r2,r2,r16
  d0b7bc:	14000236 	bltu	r2,r16,d0b7c8 <__umoddi3+0x240>
  d0b7c0:	1440012e 	bgeu	r2,r17,d0b7c8 <__umoddi3+0x240>
  d0b7c4:	1405883a 	add	r2,r2,r16
  d0b7c8:	1445c83a 	sub	r2,r2,r17
  d0b7cc:	1724d83a 	srl	r18,r2,fp
  d0b7d0:	0013883a 	mov	r9,zero
  d0b7d4:	9011883a 	mov	r8,r18
  d0b7d8:	003fa906 	br	d0b680 <__umoddi3+0xf8>
  d0b7dc:	00804034 	movhi	r2,256
  d0b7e0:	10bfffc4 	addi	r2,r2,-1
  d0b7e4:	1400b036 	bltu	r2,r16,d0baa8 <__umoddi3+0x520>
  d0b7e8:	01400404 	movi	r5,16
  d0b7ec:	2805883a 	mov	r2,r5
  d0b7f0:	003f7c06 	br	d0b5e4 <__umoddi3+0x5c>
  d0b7f4:	01000044 	movi	r4,1
  d0b7f8:	000b883a 	mov	r5,zero
  d0b7fc:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b800:	1021883a 	mov	r16,r2
  d0b804:	00bfffd4 	movui	r2,65535
  d0b808:	143ff436 	bltu	r2,r16,d0b7dc <__umoddi3+0x254>
  d0b80c:	003f7106 	br	d0b5d4 <__umoddi3+0x4c>
  d0b810:	00804034 	movhi	r2,256
  d0b814:	10bfffc4 	addi	r2,r2,-1
  d0b818:	1180af36 	bltu	r2,r6,d0bad8 <__umoddi3+0x550>
  d0b81c:	01400404 	movi	r5,16
  d0b820:	2805883a 	mov	r2,r5
  d0b824:	003fbe06 	br	d0b720 <__umoddi3+0x198>
  d0b828:	00804034 	movhi	r2,256
  d0b82c:	10bfffc4 	addi	r2,r2,-1
  d0b830:	11c0ac36 	bltu	r2,r7,d0bae4 <__umoddi3+0x55c>
  d0b834:	01400404 	movi	r5,16
  d0b838:	2805883a 	mov	r2,r5
  d0b83c:	003fa406 	br	d0b6d0 <__umoddi3+0x148>
  d0b840:	b409c83a 	sub	r4,r22,r16
  d0b844:	b105803a 	cmpltu	r2,r22,r4
  d0b848:	a187c83a 	sub	r3,r20,r6
  d0b84c:	18a9c83a 	sub	r20,r3,r2
  d0b850:	202d883a 	mov	r22,r4
  d0b854:	003fa906 	br	d0b6fc <__umoddi3+0x174>
  d0b858:	85e0983a 	sll	r16,r16,r23
  d0b85c:	35c5c83a 	sub	r2,r6,r23
  d0b860:	a0a2d83a 	srl	r17,r20,r2
  d0b864:	802ad43a 	srli	r21,r16,16
  d0b868:	b084d83a 	srl	r2,r22,r2
  d0b86c:	a5c6983a 	sll	r3,r20,r23
  d0b870:	8809883a 	mov	r4,r17
  d0b874:	a80b883a 	mov	r5,r21
  d0b878:	1886b03a 	or	r3,r3,r2
  d0b87c:	d8c00115 	stw	r3,4(sp)
  d0b880:	853fffcc 	andi	r20,r16,65535
  d0b884:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b888:	8809883a 	mov	r4,r17
  d0b88c:	a80b883a 	mov	r5,r21
  d0b890:	a0a3383a 	mul	r17,r20,r2
  d0b894:	0d0c5c40 	call	d0c5c4 <__umodsi3>
  d0b898:	d9000117 	ldw	r4,4(sp)
  d0b89c:	1004943a 	slli	r2,r2,16
  d0b8a0:	b839883a 	mov	fp,r23
  d0b8a4:	2006d43a 	srli	r3,r4,16
  d0b8a8:	10c4b03a 	or	r2,r2,r3
  d0b8ac:	1440022e 	bgeu	r2,r17,d0b8b8 <__umoddi3+0x330>
  d0b8b0:	1405883a 	add	r2,r2,r16
  d0b8b4:	1400962e 	bgeu	r2,r16,d0bb10 <__umoddi3+0x588>
  d0b8b8:	1463c83a 	sub	r17,r2,r17
  d0b8bc:	8809883a 	mov	r4,r17
  d0b8c0:	a80b883a 	mov	r5,r21
  d0b8c4:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b8c8:	8809883a 	mov	r4,r17
  d0b8cc:	a80b883a 	mov	r5,r21
  d0b8d0:	a0a3383a 	mul	r17,r20,r2
  d0b8d4:	0d0c5c40 	call	d0c5c4 <__umodsi3>
  d0b8d8:	d9400117 	ldw	r5,4(sp)
  d0b8dc:	1004943a 	slli	r2,r2,16
  d0b8e0:	28ffffcc 	andi	r3,r5,65535
  d0b8e4:	10c4b03a 	or	r2,r2,r3
  d0b8e8:	1440042e 	bgeu	r2,r17,d0b8fc <__umoddi3+0x374>
  d0b8ec:	1405883a 	add	r2,r2,r16
  d0b8f0:	14000236 	bltu	r2,r16,d0b8fc <__umoddi3+0x374>
  d0b8f4:	1440012e 	bgeu	r2,r17,d0b8fc <__umoddi3+0x374>
  d0b8f8:	1405883a 	add	r2,r2,r16
  d0b8fc:	b5ec983a 	sll	r22,r22,r23
  d0b900:	1463c83a 	sub	r17,r2,r17
  d0b904:	003f4406 	br	d0b618 <__umoddi3+0x90>
  d0b908:	3d4fc83a 	sub	r7,r7,r21
  d0b90c:	3546983a 	sll	r3,r6,r21
  d0b910:	81c4d83a 	srl	r2,r16,r7
  d0b914:	a1e2d83a 	srl	r17,r20,r7
  d0b918:	a54c983a 	sll	r6,r20,r21
  d0b91c:	18aeb03a 	or	r23,r3,r2
  d0b920:	b828d43a 	srli	r20,r23,16
  d0b924:	b1c4d83a 	srl	r2,r22,r7
  d0b928:	8809883a 	mov	r4,r17
  d0b92c:	a00b883a 	mov	r5,r20
  d0b930:	308cb03a 	or	r6,r6,r2
  d0b934:	d9c00315 	stw	r7,12(sp)
  d0b938:	d9800215 	stw	r6,8(sp)
  d0b93c:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b940:	8809883a 	mov	r4,r17
  d0b944:	a00b883a 	mov	r5,r20
  d0b948:	1039883a 	mov	fp,r2
  d0b94c:	0d0c5c40 	call	d0c5c4 <__umodsi3>
  d0b950:	b8ffffcc 	andi	r3,r23,65535
  d0b954:	d8c00415 	stw	r3,16(sp)
  d0b958:	d9000217 	ldw	r4,8(sp)
  d0b95c:	d9400417 	ldw	r5,16(sp)
  d0b960:	1004943a 	slli	r2,r2,16
  d0b964:	2006d43a 	srli	r3,r4,16
  d0b968:	8560983a 	sll	r16,r16,r21
  d0b96c:	2f23383a 	mul	r17,r5,fp
  d0b970:	10c4b03a 	or	r2,r2,r3
  d0b974:	dc000015 	stw	r16,0(sp)
  d0b978:	b56c983a 	sll	r22,r22,r21
  d0b97c:	1440032e 	bgeu	r2,r17,d0b98c <__umoddi3+0x404>
  d0b980:	15c5883a 	add	r2,r2,r23
  d0b984:	e73fffc4 	addi	fp,fp,-1
  d0b988:	15c05d2e 	bgeu	r2,r23,d0bb00 <__umoddi3+0x578>
  d0b98c:	1463c83a 	sub	r17,r2,r17
  d0b990:	8809883a 	mov	r4,r17
  d0b994:	a00b883a 	mov	r5,r20
  d0b998:	0d0c5bc0 	call	d0c5bc <__udivsi3>
  d0b99c:	8809883a 	mov	r4,r17
  d0b9a0:	a00b883a 	mov	r5,r20
  d0b9a4:	1021883a 	mov	r16,r2
  d0b9a8:	0d0c5c40 	call	d0c5c4 <__umodsi3>
  d0b9ac:	d8c00417 	ldw	r3,16(sp)
  d0b9b0:	d9000217 	ldw	r4,8(sp)
  d0b9b4:	1004943a 	slli	r2,r2,16
  d0b9b8:	1c23383a 	mul	r17,r3,r16
  d0b9bc:	20ffffcc 	andi	r3,r4,65535
  d0b9c0:	10ceb03a 	or	r7,r2,r3
  d0b9c4:	3c40032e 	bgeu	r7,r17,d0b9d4 <__umoddi3+0x44c>
  d0b9c8:	3dcf883a 	add	r7,r7,r23
  d0b9cc:	843fffc4 	addi	r16,r16,-1
  d0b9d0:	3dc0472e 	bgeu	r7,r23,d0baf0 <__umoddi3+0x568>
  d0b9d4:	e004943a 	slli	r2,fp,16
  d0b9d8:	d9400017 	ldw	r5,0(sp)
  d0b9dc:	3c4fc83a 	sub	r7,r7,r17
  d0b9e0:	8084b03a 	or	r2,r16,r2
  d0b9e4:	28ffffcc 	andi	r3,r5,65535
  d0b9e8:	280cd43a 	srli	r6,r5,16
  d0b9ec:	100ad43a 	srli	r5,r2,16
  d0b9f0:	10bfffcc 	andi	r2,r2,65535
  d0b9f4:	10d1383a 	mul	r8,r2,r3
  d0b9f8:	28c7383a 	mul	r3,r5,r3
  d0b9fc:	1185383a 	mul	r2,r2,r6
  d0ba00:	4008d43a 	srli	r4,r8,16
  d0ba04:	298b383a 	mul	r5,r5,r6
  d0ba08:	10c5883a 	add	r2,r2,r3
  d0ba0c:	2089883a 	add	r4,r4,r2
  d0ba10:	20c0022e 	bgeu	r4,r3,d0ba1c <__umoddi3+0x494>
  d0ba14:	00800074 	movhi	r2,1
  d0ba18:	288b883a 	add	r5,r5,r2
  d0ba1c:	2004d43a 	srli	r2,r4,16
  d0ba20:	2008943a 	slli	r4,r4,16
  d0ba24:	40ffffcc 	andi	r3,r8,65535
  d0ba28:	288b883a 	add	r5,r5,r2
  d0ba2c:	20c9883a 	add	r4,r4,r3
  d0ba30:	39400b36 	bltu	r7,r5,d0ba60 <__umoddi3+0x4d8>
  d0ba34:	39403d26 	beq	r7,r5,d0bb2c <__umoddi3+0x5a4>
  d0ba38:	394bc83a 	sub	r5,r7,r5
  d0ba3c:	00000f06 	br	d0ba7c <__umoddi3+0x4f4>
  d0ba40:	30c5c83a 	sub	r2,r6,r3
  d0ba44:	1839883a 	mov	fp,r3
  d0ba48:	b084d83a 	srl	r2,r22,r2
  d0ba4c:	a0c6983a 	sll	r3,r20,r3
  d0ba50:	8720983a 	sll	r16,r16,fp
  d0ba54:	b72c983a 	sll	r22,r22,fp
  d0ba58:	18a8b03a 	or	r20,r3,r2
  d0ba5c:	003f3a06 	br	d0b748 <__umoddi3+0x1c0>
  d0ba60:	d8c00017 	ldw	r3,0(sp)
  d0ba64:	20c5c83a 	sub	r2,r4,r3
  d0ba68:	2089803a 	cmpltu	r4,r4,r2
  d0ba6c:	2dc7c83a 	sub	r3,r5,r23
  d0ba70:	1907c83a 	sub	r3,r3,r4
  d0ba74:	38cbc83a 	sub	r5,r7,r3
  d0ba78:	1009883a 	mov	r4,r2
  d0ba7c:	b105c83a 	sub	r2,r22,r4
  d0ba80:	b087803a 	cmpltu	r3,r22,r2
  d0ba84:	28c7c83a 	sub	r3,r5,r3
  d0ba88:	d9400317 	ldw	r5,12(sp)
  d0ba8c:	1544d83a 	srl	r2,r2,r21
  d0ba90:	1948983a 	sll	r4,r3,r5
  d0ba94:	1d46d83a 	srl	r3,r3,r21
  d0ba98:	20a4b03a 	or	r18,r4,r2
  d0ba9c:	9011883a 	mov	r8,r18
  d0baa0:	1813883a 	mov	r9,r3
  d0baa4:	003ef606 	br	d0b680 <__umoddi3+0xf8>
  d0baa8:	01400604 	movi	r5,24
  d0baac:	2805883a 	mov	r2,r5
  d0bab0:	003ecc06 	br	d0b5e4 <__umoddi3+0x5c>
  d0bab4:	01400204 	movi	r5,8
  d0bab8:	2805883a 	mov	r2,r5
  d0babc:	003ec906 	br	d0b5e4 <__umoddi3+0x5c>
  d0bac0:	01400204 	movi	r5,8
  d0bac4:	2805883a 	mov	r2,r5
  d0bac8:	003f0106 	br	d0b6d0 <__umoddi3+0x148>
  d0bacc:	01400204 	movi	r5,8
  d0bad0:	2805883a 	mov	r2,r5
  d0bad4:	003f1206 	br	d0b720 <__umoddi3+0x198>
  d0bad8:	01400604 	movi	r5,24
  d0badc:	2805883a 	mov	r2,r5
  d0bae0:	003f0f06 	br	d0b720 <__umoddi3+0x198>
  d0bae4:	01400604 	movi	r5,24
  d0bae8:	2805883a 	mov	r2,r5
  d0baec:	003ef806 	br	d0b6d0 <__umoddi3+0x148>
  d0baf0:	3c7fb82e 	bgeu	r7,r17,d0b9d4 <__umoddi3+0x44c>
  d0baf4:	843fffc4 	addi	r16,r16,-1
  d0baf8:	3dcf883a 	add	r7,r7,r23
  d0bafc:	003fb506 	br	d0b9d4 <__umoddi3+0x44c>
  d0bb00:	147fa22e 	bgeu	r2,r17,d0b98c <__umoddi3+0x404>
  d0bb04:	e73fffc4 	addi	fp,fp,-1
  d0bb08:	15c5883a 	add	r2,r2,r23
  d0bb0c:	003f9f06 	br	d0b98c <__umoddi3+0x404>
  d0bb10:	147f692e 	bgeu	r2,r17,d0b8b8 <__umoddi3+0x330>
  d0bb14:	1405883a 	add	r2,r2,r16
  d0bb18:	003f6706 	br	d0b8b8 <__umoddi3+0x330>
  d0bb1c:	1405883a 	add	r2,r2,r16
  d0bb20:	003f1906 	br	d0b788 <__umoddi3+0x200>
  d0bb24:	1405883a 	add	r2,r2,r16
  d0bb28:	003ec906 	br	d0b650 <__umoddi3+0xc8>
  d0bb2c:	b13fcc36 	bltu	r22,r4,d0ba60 <__umoddi3+0x4d8>
  d0bb30:	000b883a 	mov	r5,zero
  d0bb34:	003fd106 	br	d0ba7c <__umoddi3+0x4f4>

00d0bb38 <__muldf3>:
  d0bb38:	deffe004 	addi	sp,sp,-128
  d0bb3c:	dc401815 	stw	r17,96(sp)
  d0bb40:	dc400404 	addi	r17,sp,16
  d0bb44:	2011883a 	mov	r8,r4
  d0bb48:	2813883a 	mov	r9,r5
  d0bb4c:	dc001715 	stw	r16,92(sp)
  d0bb50:	d809883a 	mov	r4,sp
  d0bb54:	880b883a 	mov	r5,r17
  d0bb58:	dc000904 	addi	r16,sp,36
  d0bb5c:	dfc01f15 	stw	ra,124(sp)
  d0bb60:	da400115 	stw	r9,4(sp)
  d0bb64:	d9c00315 	stw	r7,12(sp)
  d0bb68:	da000015 	stw	r8,0(sp)
  d0bb6c:	d9800215 	stw	r6,8(sp)
  d0bb70:	ddc01e15 	stw	r23,120(sp)
  d0bb74:	dd801d15 	stw	r22,116(sp)
  d0bb78:	dd401c15 	stw	r21,112(sp)
  d0bb7c:	dd001b15 	stw	r20,108(sp)
  d0bb80:	dcc01a15 	stw	r19,104(sp)
  d0bb84:	dc801915 	stw	r18,100(sp)
  d0bb88:	0d039b40 	call	d039b4 <__unpack_d>
  d0bb8c:	d9000204 	addi	r4,sp,8
  d0bb90:	800b883a 	mov	r5,r16
  d0bb94:	0d039b40 	call	d039b4 <__unpack_d>
  d0bb98:	d9000417 	ldw	r4,16(sp)
  d0bb9c:	00800044 	movi	r2,1
  d0bba0:	1100102e 	bgeu	r2,r4,d0bbe4 <__muldf3+0xac>
  d0bba4:	d8c00917 	ldw	r3,36(sp)
  d0bba8:	10c0062e 	bgeu	r2,r3,d0bbc4 <__muldf3+0x8c>
  d0bbac:	00800104 	movi	r2,4
  d0bbb0:	20800a26 	beq	r4,r2,d0bbdc <__muldf3+0xa4>
  d0bbb4:	1880cc26 	beq	r3,r2,d0bee8 <__muldf3+0x3b0>
  d0bbb8:	00800084 	movi	r2,2
  d0bbbc:	20800926 	beq	r4,r2,d0bbe4 <__muldf3+0xac>
  d0bbc0:	1880191e 	bne	r3,r2,d0bc28 <__muldf3+0xf0>
  d0bbc4:	d8c00a17 	ldw	r3,40(sp)
  d0bbc8:	d8800517 	ldw	r2,20(sp)
  d0bbcc:	8009883a 	mov	r4,r16
  d0bbd0:	10c4c03a 	cmpne	r2,r2,r3
  d0bbd4:	d8800a15 	stw	r2,40(sp)
  d0bbd8:	00000706 	br	d0bbf8 <__muldf3+0xc0>
  d0bbdc:	00800084 	movi	r2,2
  d0bbe0:	1880c326 	beq	r3,r2,d0bef0 <__muldf3+0x3b8>
  d0bbe4:	d8800517 	ldw	r2,20(sp)
  d0bbe8:	d8c00a17 	ldw	r3,40(sp)
  d0bbec:	8809883a 	mov	r4,r17
  d0bbf0:	10c4c03a 	cmpne	r2,r2,r3
  d0bbf4:	d8800515 	stw	r2,20(sp)
  d0bbf8:	0d036a00 	call	d036a0 <__pack_d>
  d0bbfc:	dfc01f17 	ldw	ra,124(sp)
  d0bc00:	ddc01e17 	ldw	r23,120(sp)
  d0bc04:	dd801d17 	ldw	r22,116(sp)
  d0bc08:	dd401c17 	ldw	r21,112(sp)
  d0bc0c:	dd001b17 	ldw	r20,108(sp)
  d0bc10:	dcc01a17 	ldw	r19,104(sp)
  d0bc14:	dc801917 	ldw	r18,100(sp)
  d0bc18:	dc401817 	ldw	r17,96(sp)
  d0bc1c:	dc001717 	ldw	r16,92(sp)
  d0bc20:	dec02004 	addi	sp,sp,128
  d0bc24:	f800283a 	ret
  d0bc28:	dd800717 	ldw	r22,28(sp)
  d0bc2c:	dc800c17 	ldw	r18,48(sp)
  d0bc30:	002b883a 	mov	r21,zero
  d0bc34:	0023883a 	mov	r17,zero
  d0bc38:	a80b883a 	mov	r5,r21
  d0bc3c:	b00d883a 	mov	r6,r22
  d0bc40:	880f883a 	mov	r7,r17
  d0bc44:	ddc00817 	ldw	r23,32(sp)
  d0bc48:	dcc00d17 	ldw	r19,52(sp)
  d0bc4c:	9009883a 	mov	r4,r18
  d0bc50:	0d0328c0 	call	d0328c <__muldi3>
  d0bc54:	001b883a 	mov	r13,zero
  d0bc58:	680f883a 	mov	r7,r13
  d0bc5c:	b009883a 	mov	r4,r22
  d0bc60:	000b883a 	mov	r5,zero
  d0bc64:	980d883a 	mov	r6,r19
  d0bc68:	b82d883a 	mov	r22,r23
  d0bc6c:	002f883a 	mov	r23,zero
  d0bc70:	db401615 	stw	r13,88(sp)
  d0bc74:	d8801315 	stw	r2,76(sp)
  d0bc78:	d8c01415 	stw	r3,80(sp)
  d0bc7c:	dcc01515 	stw	r19,84(sp)
  d0bc80:	0d0328c0 	call	d0328c <__muldi3>
  d0bc84:	b00d883a 	mov	r6,r22
  d0bc88:	000b883a 	mov	r5,zero
  d0bc8c:	9009883a 	mov	r4,r18
  d0bc90:	b80f883a 	mov	r7,r23
  d0bc94:	1021883a 	mov	r16,r2
  d0bc98:	1823883a 	mov	r17,r3
  d0bc9c:	0d0328c0 	call	d0328c <__muldi3>
  d0bca0:	8085883a 	add	r2,r16,r2
  d0bca4:	140d803a 	cmpltu	r6,r2,r16
  d0bca8:	88c7883a 	add	r3,r17,r3
  d0bcac:	30cd883a 	add	r6,r6,r3
  d0bcb0:	1029883a 	mov	r20,r2
  d0bcb4:	302b883a 	mov	r21,r6
  d0bcb8:	da801317 	ldw	r10,76(sp)
  d0bcbc:	dac01417 	ldw	r11,80(sp)
  d0bcc0:	db001517 	ldw	r12,84(sp)
  d0bcc4:	db401617 	ldw	r13,88(sp)
  d0bcc8:	3440612e 	bgeu	r6,r17,d0be50 <__muldf3+0x318>
  d0bccc:	0009883a 	mov	r4,zero
  d0bcd0:	5105883a 	add	r2,r10,r4
  d0bcd4:	128d803a 	cmpltu	r6,r2,r10
  d0bcd8:	5d07883a 	add	r3,r11,r20
  d0bcdc:	30cd883a 	add	r6,r6,r3
  d0bce0:	0021883a 	mov	r16,zero
  d0bce4:	04400044 	movi	r17,1
  d0bce8:	1025883a 	mov	r18,r2
  d0bcec:	3027883a 	mov	r19,r6
  d0bcf0:	32c06236 	bltu	r6,r11,d0be7c <__muldf3+0x344>
  d0bcf4:	59807a26 	beq	r11,r6,d0bee0 <__muldf3+0x3a8>
  d0bcf8:	680b883a 	mov	r5,r13
  d0bcfc:	b80f883a 	mov	r7,r23
  d0bd00:	6009883a 	mov	r4,r12
  d0bd04:	b00d883a 	mov	r6,r22
  d0bd08:	0d0328c0 	call	d0328c <__muldi3>
  d0bd0c:	1009883a 	mov	r4,r2
  d0bd10:	000f883a 	mov	r7,zero
  d0bd14:	1545883a 	add	r2,r2,r21
  d0bd18:	1111803a 	cmpltu	r8,r2,r4
  d0bd1c:	19c7883a 	add	r3,r3,r7
  d0bd20:	40c7883a 	add	r3,r8,r3
  d0bd24:	88cb883a 	add	r5,r17,r3
  d0bd28:	d8c00617 	ldw	r3,24(sp)
  d0bd2c:	8089883a 	add	r4,r16,r2
  d0bd30:	d8800b17 	ldw	r2,44(sp)
  d0bd34:	18c00104 	addi	r3,r3,4
  d0bd38:	240d803a 	cmpltu	r6,r4,r16
  d0bd3c:	10c7883a 	add	r3,r2,r3
  d0bd40:	2013883a 	mov	r9,r4
  d0bd44:	d8800a17 	ldw	r2,40(sp)
  d0bd48:	d9000517 	ldw	r4,20(sp)
  d0bd4c:	314d883a 	add	r6,r6,r5
  d0bd50:	3015883a 	mov	r10,r6
  d0bd54:	2088c03a 	cmpne	r4,r4,r2
  d0bd58:	00880034 	movhi	r2,8192
  d0bd5c:	10bfffc4 	addi	r2,r2,-1
  d0bd60:	d9000f15 	stw	r4,60(sp)
  d0bd64:	d8c01015 	stw	r3,64(sp)
  d0bd68:	1180162e 	bgeu	r2,r6,d0bdc4 <__muldf3+0x28c>
  d0bd6c:	1811883a 	mov	r8,r3
  d0bd70:	101f883a 	mov	r15,r2
  d0bd74:	980497fa 	slli	r2,r19,31
  d0bd78:	9016d07a 	srli	r11,r18,1
  d0bd7c:	500697fa 	slli	r3,r10,31
  d0bd80:	480cd07a 	srli	r6,r9,1
  d0bd84:	500ed07a 	srli	r7,r10,1
  d0bd88:	12d6b03a 	or	r11,r2,r11
  d0bd8c:	00800044 	movi	r2,1
  d0bd90:	198cb03a 	or	r6,r3,r6
  d0bd94:	4888703a 	and	r4,r9,r2
  d0bd98:	9818d07a 	srli	r12,r19,1
  d0bd9c:	001b883a 	mov	r13,zero
  d0bda0:	03a00034 	movhi	r14,32768
  d0bda4:	3013883a 	mov	r9,r6
  d0bda8:	3815883a 	mov	r10,r7
  d0bdac:	4091883a 	add	r8,r8,r2
  d0bdb0:	20000226 	beq	r4,zero,d0bdbc <__muldf3+0x284>
  d0bdb4:	5b64b03a 	or	r18,r11,r13
  d0bdb8:	63a6b03a 	or	r19,r12,r14
  d0bdbc:	7abfed36 	bltu	r15,r10,d0bd74 <__muldf3+0x23c>
  d0bdc0:	da001015 	stw	r8,64(sp)
  d0bdc4:	00840034 	movhi	r2,4096
  d0bdc8:	10bfffc4 	addi	r2,r2,-1
  d0bdcc:	12801436 	bltu	r2,r10,d0be20 <__muldf3+0x2e8>
  d0bdd0:	da001017 	ldw	r8,64(sp)
  d0bdd4:	101f883a 	mov	r15,r2
  d0bdd8:	4a45883a 	add	r2,r9,r9
  d0bddc:	124d803a 	cmpltu	r6,r2,r9
  d0bde0:	5287883a 	add	r3,r10,r10
  d0bde4:	9497883a 	add	r11,r18,r18
  d0bde8:	5c8f803a 	cmpltu	r7,r11,r18
  d0bdec:	9cd9883a 	add	r12,r19,r19
  d0bdf0:	01000044 	movi	r4,1
  d0bdf4:	30cd883a 	add	r6,r6,r3
  d0bdf8:	3b0f883a 	add	r7,r7,r12
  d0bdfc:	423fffc4 	addi	r8,r8,-1
  d0be00:	1013883a 	mov	r9,r2
  d0be04:	3015883a 	mov	r10,r6
  d0be08:	111ab03a 	or	r13,r2,r4
  d0be0c:	98003016 	blt	r19,zero,d0bed0 <__muldf3+0x398>
  d0be10:	5825883a 	mov	r18,r11
  d0be14:	3827883a 	mov	r19,r7
  d0be18:	7abfef2e 	bgeu	r15,r10,d0bdd8 <__muldf3+0x2a0>
  d0be1c:	da001015 	stw	r8,64(sp)
  d0be20:	00803fc4 	movi	r2,255
  d0be24:	488e703a 	and	r7,r9,r2
  d0be28:	00802004 	movi	r2,128
  d0be2c:	0007883a 	mov	r3,zero
  d0be30:	0011883a 	mov	r8,zero
  d0be34:	38801826 	beq	r7,r2,d0be98 <__muldf3+0x360>
  d0be38:	008000c4 	movi	r2,3
  d0be3c:	d9000e04 	addi	r4,sp,56
  d0be40:	da801215 	stw	r10,72(sp)
  d0be44:	d8800e15 	stw	r2,56(sp)
  d0be48:	da401115 	stw	r9,68(sp)
  d0be4c:	003f6a06 	br	d0bbf8 <__muldf3+0xc0>
  d0be50:	89802126 	beq	r17,r6,d0bed8 <__muldf3+0x3a0>
  d0be54:	0009883a 	mov	r4,zero
  d0be58:	5105883a 	add	r2,r10,r4
  d0be5c:	128d803a 	cmpltu	r6,r2,r10
  d0be60:	5d07883a 	add	r3,r11,r20
  d0be64:	30cd883a 	add	r6,r6,r3
  d0be68:	0021883a 	mov	r16,zero
  d0be6c:	0023883a 	mov	r17,zero
  d0be70:	1025883a 	mov	r18,r2
  d0be74:	3027883a 	mov	r19,r6
  d0be78:	32ff9e2e 	bgeu	r6,r11,d0bcf4 <__muldf3+0x1bc>
  d0be7c:	00800044 	movi	r2,1
  d0be80:	8089883a 	add	r4,r16,r2
  d0be84:	240d803a 	cmpltu	r6,r4,r16
  d0be88:	344d883a 	add	r6,r6,r17
  d0be8c:	2021883a 	mov	r16,r4
  d0be90:	3023883a 	mov	r17,r6
  d0be94:	003f9806 	br	d0bcf8 <__muldf3+0x1c0>
  d0be98:	403fe71e 	bne	r8,zero,d0be38 <__muldf3+0x300>
  d0be9c:	01004004 	movi	r4,256
  d0bea0:	4904703a 	and	r2,r9,r4
  d0bea4:	10c4b03a 	or	r2,r2,r3
  d0bea8:	103fe31e 	bne	r2,zero,d0be38 <__muldf3+0x300>
  d0beac:	94c4b03a 	or	r2,r18,r19
  d0beb0:	103fe126 	beq	r2,zero,d0be38 <__muldf3+0x300>
  d0beb4:	49c5883a 	add	r2,r9,r7
  d0beb8:	1251803a 	cmpltu	r8,r2,r9
  d0bebc:	4291883a 	add	r8,r8,r10
  d0bec0:	013fc004 	movi	r4,-256
  d0bec4:	1112703a 	and	r9,r2,r4
  d0bec8:	4015883a 	mov	r10,r8
  d0becc:	003fda06 	br	d0be38 <__muldf3+0x300>
  d0bed0:	6813883a 	mov	r9,r13
  d0bed4:	003fce06 	br	d0be10 <__muldf3+0x2d8>
  d0bed8:	143f7c36 	bltu	r2,r16,d0bccc <__muldf3+0x194>
  d0bedc:	003fdd06 	br	d0be54 <__muldf3+0x31c>
  d0bee0:	12bf852e 	bgeu	r2,r10,d0bcf8 <__muldf3+0x1c0>
  d0bee4:	003fe506 	br	d0be7c <__muldf3+0x344>
  d0bee8:	00800084 	movi	r2,2
  d0beec:	20bf351e 	bne	r4,r2,d0bbc4 <__muldf3+0x8c>
  d0bef0:	01003474 	movhi	r4,209
  d0bef4:	21040204 	addi	r4,r4,4104
  d0bef8:	003f3f06 	br	d0bbf8 <__muldf3+0xc0>

00d0befc <__eqdf2>:
  d0befc:	deffef04 	addi	sp,sp,-68
  d0bf00:	dc400f15 	stw	r17,60(sp)
  d0bf04:	dc400404 	addi	r17,sp,16
  d0bf08:	2005883a 	mov	r2,r4
  d0bf0c:	2807883a 	mov	r3,r5
  d0bf10:	dc000e15 	stw	r16,56(sp)
  d0bf14:	d809883a 	mov	r4,sp
  d0bf18:	880b883a 	mov	r5,r17
  d0bf1c:	dc000904 	addi	r16,sp,36
  d0bf20:	d8c00115 	stw	r3,4(sp)
  d0bf24:	d8800015 	stw	r2,0(sp)
  d0bf28:	d9800215 	stw	r6,8(sp)
  d0bf2c:	dfc01015 	stw	ra,64(sp)
  d0bf30:	d9c00315 	stw	r7,12(sp)
  d0bf34:	0d039b40 	call	d039b4 <__unpack_d>
  d0bf38:	d9000204 	addi	r4,sp,8
  d0bf3c:	800b883a 	mov	r5,r16
  d0bf40:	0d039b40 	call	d039b4 <__unpack_d>
  d0bf44:	d8800417 	ldw	r2,16(sp)
  d0bf48:	00c00044 	movi	r3,1
  d0bf4c:	180d883a 	mov	r6,r3
  d0bf50:	1880062e 	bgeu	r3,r2,d0bf6c <__eqdf2+0x70>
  d0bf54:	d8800917 	ldw	r2,36(sp)
  d0bf58:	8809883a 	mov	r4,r17
  d0bf5c:	800b883a 	mov	r5,r16
  d0bf60:	1880022e 	bgeu	r3,r2,d0bf6c <__eqdf2+0x70>
  d0bf64:	0d03aec0 	call	d03aec <__fpcmp_parts_d>
  d0bf68:	100d883a 	mov	r6,r2
  d0bf6c:	3005883a 	mov	r2,r6
  d0bf70:	dfc01017 	ldw	ra,64(sp)
  d0bf74:	dc400f17 	ldw	r17,60(sp)
  d0bf78:	dc000e17 	ldw	r16,56(sp)
  d0bf7c:	dec01104 	addi	sp,sp,68
  d0bf80:	f800283a 	ret

00d0bf84 <__gtdf2>:
  d0bf84:	deffef04 	addi	sp,sp,-68
  d0bf88:	dc400f15 	stw	r17,60(sp)
  d0bf8c:	dc400404 	addi	r17,sp,16
  d0bf90:	2005883a 	mov	r2,r4
  d0bf94:	2807883a 	mov	r3,r5
  d0bf98:	dc000e15 	stw	r16,56(sp)
  d0bf9c:	d809883a 	mov	r4,sp
  d0bfa0:	880b883a 	mov	r5,r17
  d0bfa4:	dc000904 	addi	r16,sp,36
  d0bfa8:	d8c00115 	stw	r3,4(sp)
  d0bfac:	d8800015 	stw	r2,0(sp)
  d0bfb0:	d9800215 	stw	r6,8(sp)
  d0bfb4:	dfc01015 	stw	ra,64(sp)
  d0bfb8:	d9c00315 	stw	r7,12(sp)
  d0bfbc:	0d039b40 	call	d039b4 <__unpack_d>
  d0bfc0:	d9000204 	addi	r4,sp,8
  d0bfc4:	800b883a 	mov	r5,r16
  d0bfc8:	0d039b40 	call	d039b4 <__unpack_d>
  d0bfcc:	d8800417 	ldw	r2,16(sp)
  d0bfd0:	00c00044 	movi	r3,1
  d0bfd4:	01bfffc4 	movi	r6,-1
  d0bfd8:	1880062e 	bgeu	r3,r2,d0bff4 <__gtdf2+0x70>
  d0bfdc:	d8800917 	ldw	r2,36(sp)
  d0bfe0:	8809883a 	mov	r4,r17
  d0bfe4:	800b883a 	mov	r5,r16
  d0bfe8:	1880022e 	bgeu	r3,r2,d0bff4 <__gtdf2+0x70>
  d0bfec:	0d03aec0 	call	d03aec <__fpcmp_parts_d>
  d0bff0:	100d883a 	mov	r6,r2
  d0bff4:	3005883a 	mov	r2,r6
  d0bff8:	dfc01017 	ldw	ra,64(sp)
  d0bffc:	dc400f17 	ldw	r17,60(sp)
  d0c000:	dc000e17 	ldw	r16,56(sp)
  d0c004:	dec01104 	addi	sp,sp,68
  d0c008:	f800283a 	ret

00d0c00c <__gedf2>:
  d0c00c:	deffef04 	addi	sp,sp,-68
  d0c010:	dc400f15 	stw	r17,60(sp)
  d0c014:	dc400404 	addi	r17,sp,16
  d0c018:	2005883a 	mov	r2,r4
  d0c01c:	2807883a 	mov	r3,r5
  d0c020:	dc000e15 	stw	r16,56(sp)
  d0c024:	d809883a 	mov	r4,sp
  d0c028:	880b883a 	mov	r5,r17
  d0c02c:	dc000904 	addi	r16,sp,36
  d0c030:	d8c00115 	stw	r3,4(sp)
  d0c034:	d8800015 	stw	r2,0(sp)
  d0c038:	d9800215 	stw	r6,8(sp)
  d0c03c:	dfc01015 	stw	ra,64(sp)
  d0c040:	d9c00315 	stw	r7,12(sp)
  d0c044:	0d039b40 	call	d039b4 <__unpack_d>
  d0c048:	d9000204 	addi	r4,sp,8
  d0c04c:	800b883a 	mov	r5,r16
  d0c050:	0d039b40 	call	d039b4 <__unpack_d>
  d0c054:	d8800417 	ldw	r2,16(sp)
  d0c058:	00c00044 	movi	r3,1
  d0c05c:	01bfffc4 	movi	r6,-1
  d0c060:	1880062e 	bgeu	r3,r2,d0c07c <__gedf2+0x70>
  d0c064:	d8800917 	ldw	r2,36(sp)
  d0c068:	8809883a 	mov	r4,r17
  d0c06c:	800b883a 	mov	r5,r16
  d0c070:	1880022e 	bgeu	r3,r2,d0c07c <__gedf2+0x70>
  d0c074:	0d03aec0 	call	d03aec <__fpcmp_parts_d>
  d0c078:	100d883a 	mov	r6,r2
  d0c07c:	3005883a 	mov	r2,r6
  d0c080:	dfc01017 	ldw	ra,64(sp)
  d0c084:	dc400f17 	ldw	r17,60(sp)
  d0c088:	dc000e17 	ldw	r16,56(sp)
  d0c08c:	dec01104 	addi	sp,sp,68
  d0c090:	f800283a 	ret

00d0c094 <__ltdf2>:
  d0c094:	deffef04 	addi	sp,sp,-68
  d0c098:	dc400f15 	stw	r17,60(sp)
  d0c09c:	dc400404 	addi	r17,sp,16
  d0c0a0:	2005883a 	mov	r2,r4
  d0c0a4:	2807883a 	mov	r3,r5
  d0c0a8:	dc000e15 	stw	r16,56(sp)
  d0c0ac:	d809883a 	mov	r4,sp
  d0c0b0:	880b883a 	mov	r5,r17
  d0c0b4:	dc000904 	addi	r16,sp,36
  d0c0b8:	d8c00115 	stw	r3,4(sp)
  d0c0bc:	d8800015 	stw	r2,0(sp)
  d0c0c0:	d9800215 	stw	r6,8(sp)
  d0c0c4:	dfc01015 	stw	ra,64(sp)
  d0c0c8:	d9c00315 	stw	r7,12(sp)
  d0c0cc:	0d039b40 	call	d039b4 <__unpack_d>
  d0c0d0:	d9000204 	addi	r4,sp,8
  d0c0d4:	800b883a 	mov	r5,r16
  d0c0d8:	0d039b40 	call	d039b4 <__unpack_d>
  d0c0dc:	d8800417 	ldw	r2,16(sp)
  d0c0e0:	00c00044 	movi	r3,1
  d0c0e4:	180d883a 	mov	r6,r3
  d0c0e8:	1880062e 	bgeu	r3,r2,d0c104 <__ltdf2+0x70>
  d0c0ec:	d8800917 	ldw	r2,36(sp)
  d0c0f0:	8809883a 	mov	r4,r17
  d0c0f4:	800b883a 	mov	r5,r16
  d0c0f8:	1880022e 	bgeu	r3,r2,d0c104 <__ltdf2+0x70>
  d0c0fc:	0d03aec0 	call	d03aec <__fpcmp_parts_d>
  d0c100:	100d883a 	mov	r6,r2
  d0c104:	3005883a 	mov	r2,r6
  d0c108:	dfc01017 	ldw	ra,64(sp)
  d0c10c:	dc400f17 	ldw	r17,60(sp)
  d0c110:	dc000e17 	ldw	r16,56(sp)
  d0c114:	dec01104 	addi	sp,sp,68
  d0c118:	f800283a 	ret

00d0c11c <__floatsidf>:
  d0c11c:	2006d7fa 	srli	r3,r4,31
  d0c120:	defff604 	addi	sp,sp,-40
  d0c124:	008000c4 	movi	r2,3
  d0c128:	dfc00915 	stw	ra,36(sp)
  d0c12c:	dcc00815 	stw	r19,32(sp)
  d0c130:	dc800715 	stw	r18,28(sp)
  d0c134:	dc400615 	stw	r17,24(sp)
  d0c138:	dc000515 	stw	r16,20(sp)
  d0c13c:	d8800015 	stw	r2,0(sp)
  d0c140:	d8c00115 	stw	r3,4(sp)
  d0c144:	20000f1e 	bne	r4,zero,d0c184 <__floatsidf+0x68>
  d0c148:	00800084 	movi	r2,2
  d0c14c:	d8800015 	stw	r2,0(sp)
  d0c150:	d809883a 	mov	r4,sp
  d0c154:	0d036a00 	call	d036a0 <__pack_d>
  d0c158:	1009883a 	mov	r4,r2
  d0c15c:	180b883a 	mov	r5,r3
  d0c160:	2005883a 	mov	r2,r4
  d0c164:	2807883a 	mov	r3,r5
  d0c168:	dfc00917 	ldw	ra,36(sp)
  d0c16c:	dcc00817 	ldw	r19,32(sp)
  d0c170:	dc800717 	ldw	r18,28(sp)
  d0c174:	dc400617 	ldw	r17,24(sp)
  d0c178:	dc000517 	ldw	r16,20(sp)
  d0c17c:	dec00a04 	addi	sp,sp,40
  d0c180:	f800283a 	ret
  d0c184:	00800f04 	movi	r2,60
  d0c188:	1807003a 	cmpeq	r3,r3,zero
  d0c18c:	d8800215 	stw	r2,8(sp)
  d0c190:	18001126 	beq	r3,zero,d0c1d8 <__floatsidf+0xbc>
  d0c194:	0027883a 	mov	r19,zero
  d0c198:	2025883a 	mov	r18,r4
  d0c19c:	d9000315 	stw	r4,12(sp)
  d0c1a0:	dcc00415 	stw	r19,16(sp)
  d0c1a4:	0d033240 	call	d03324 <__clzsi2>
  d0c1a8:	11000744 	addi	r4,r2,29
  d0c1ac:	013fe80e 	bge	zero,r4,d0c150 <__floatsidf+0x34>
  d0c1b0:	10bfff44 	addi	r2,r2,-3
  d0c1b4:	10000c16 	blt	r2,zero,d0c1e8 <__floatsidf+0xcc>
  d0c1b8:	90a2983a 	sll	r17,r18,r2
  d0c1bc:	0021883a 	mov	r16,zero
  d0c1c0:	d8800217 	ldw	r2,8(sp)
  d0c1c4:	dc400415 	stw	r17,16(sp)
  d0c1c8:	dc000315 	stw	r16,12(sp)
  d0c1cc:	1105c83a 	sub	r2,r2,r4
  d0c1d0:	d8800215 	stw	r2,8(sp)
  d0c1d4:	003fde06 	br	d0c150 <__floatsidf+0x34>
  d0c1d8:	00a00034 	movhi	r2,32768
  d0c1dc:	20800a26 	beq	r4,r2,d0c208 <__floatsidf+0xec>
  d0c1e0:	0109c83a 	sub	r4,zero,r4
  d0c1e4:	003feb06 	br	d0c194 <__floatsidf+0x78>
  d0c1e8:	9006d07a 	srli	r3,r18,1
  d0c1ec:	008007c4 	movi	r2,31
  d0c1f0:	1105c83a 	sub	r2,r2,r4
  d0c1f4:	1886d83a 	srl	r3,r3,r2
  d0c1f8:	9922983a 	sll	r17,r19,r4
  d0c1fc:	9120983a 	sll	r16,r18,r4
  d0c200:	1c62b03a 	or	r17,r3,r17
  d0c204:	003fee06 	br	d0c1c0 <__floatsidf+0xa4>
  d0c208:	0009883a 	mov	r4,zero
  d0c20c:	01707834 	movhi	r5,49632
  d0c210:	003fd306 	br	d0c160 <__floatsidf+0x44>

00d0c214 <__fixdfsi>:
  d0c214:	defff804 	addi	sp,sp,-32
  d0c218:	2005883a 	mov	r2,r4
  d0c21c:	2807883a 	mov	r3,r5
  d0c220:	d809883a 	mov	r4,sp
  d0c224:	d9400204 	addi	r5,sp,8
  d0c228:	d8c00115 	stw	r3,4(sp)
  d0c22c:	d8800015 	stw	r2,0(sp)
  d0c230:	dfc00715 	stw	ra,28(sp)
  d0c234:	0d039b40 	call	d039b4 <__unpack_d>
  d0c238:	d8c00217 	ldw	r3,8(sp)
  d0c23c:	00800084 	movi	r2,2
  d0c240:	1880051e 	bne	r3,r2,d0c258 <__fixdfsi+0x44>
  d0c244:	0007883a 	mov	r3,zero
  d0c248:	1805883a 	mov	r2,r3
  d0c24c:	dfc00717 	ldw	ra,28(sp)
  d0c250:	dec00804 	addi	sp,sp,32
  d0c254:	f800283a 	ret
  d0c258:	00800044 	movi	r2,1
  d0c25c:	10fff92e 	bgeu	r2,r3,d0c244 <__fixdfsi+0x30>
  d0c260:	00800104 	movi	r2,4
  d0c264:	18800426 	beq	r3,r2,d0c278 <__fixdfsi+0x64>
  d0c268:	d8c00417 	ldw	r3,16(sp)
  d0c26c:	183ff516 	blt	r3,zero,d0c244 <__fixdfsi+0x30>
  d0c270:	00800784 	movi	r2,30
  d0c274:	10c0080e 	bge	r2,r3,d0c298 <__fixdfsi+0x84>
  d0c278:	d8800317 	ldw	r2,12(sp)
  d0c27c:	1000121e 	bne	r2,zero,d0c2c8 <__fixdfsi+0xb4>
  d0c280:	00e00034 	movhi	r3,32768
  d0c284:	18ffffc4 	addi	r3,r3,-1
  d0c288:	1805883a 	mov	r2,r3
  d0c28c:	dfc00717 	ldw	ra,28(sp)
  d0c290:	dec00804 	addi	sp,sp,32
  d0c294:	f800283a 	ret
  d0c298:	00800f04 	movi	r2,60
  d0c29c:	10d1c83a 	sub	r8,r2,r3
  d0c2a0:	40bff804 	addi	r2,r8,-32
  d0c2a4:	d9800517 	ldw	r6,20(sp)
  d0c2a8:	d9c00617 	ldw	r7,24(sp)
  d0c2ac:	10000816 	blt	r2,zero,d0c2d0 <__fixdfsi+0xbc>
  d0c2b0:	3888d83a 	srl	r4,r7,r2
  d0c2b4:	d8800317 	ldw	r2,12(sp)
  d0c2b8:	2007883a 	mov	r3,r4
  d0c2bc:	103fe226 	beq	r2,zero,d0c248 <__fixdfsi+0x34>
  d0c2c0:	0107c83a 	sub	r3,zero,r4
  d0c2c4:	003fe006 	br	d0c248 <__fixdfsi+0x34>
  d0c2c8:	00e00034 	movhi	r3,32768
  d0c2cc:	003fde06 	br	d0c248 <__fixdfsi+0x34>
  d0c2d0:	39c7883a 	add	r3,r7,r7
  d0c2d4:	008007c4 	movi	r2,31
  d0c2d8:	1205c83a 	sub	r2,r2,r8
  d0c2dc:	1886983a 	sll	r3,r3,r2
  d0c2e0:	3208d83a 	srl	r4,r6,r8
  d0c2e4:	1908b03a 	or	r4,r3,r4
  d0c2e8:	003ff206 	br	d0c2b4 <__fixdfsi+0xa0>

00d0c2ec <__floatunsidf>:
  d0c2ec:	defff204 	addi	sp,sp,-56
  d0c2f0:	dfc00d15 	stw	ra,52(sp)
  d0c2f4:	ddc00c15 	stw	r23,48(sp)
  d0c2f8:	dd800b15 	stw	r22,44(sp)
  d0c2fc:	dd400a15 	stw	r21,40(sp)
  d0c300:	dd000915 	stw	r20,36(sp)
  d0c304:	dcc00815 	stw	r19,32(sp)
  d0c308:	dc800715 	stw	r18,28(sp)
  d0c30c:	dc400615 	stw	r17,24(sp)
  d0c310:	dc000515 	stw	r16,20(sp)
  d0c314:	d8000115 	stw	zero,4(sp)
  d0c318:	20000f1e 	bne	r4,zero,d0c358 <__floatunsidf+0x6c>
  d0c31c:	00800084 	movi	r2,2
  d0c320:	d8800015 	stw	r2,0(sp)
  d0c324:	d809883a 	mov	r4,sp
  d0c328:	0d036a00 	call	d036a0 <__pack_d>
  d0c32c:	dfc00d17 	ldw	ra,52(sp)
  d0c330:	ddc00c17 	ldw	r23,48(sp)
  d0c334:	dd800b17 	ldw	r22,44(sp)
  d0c338:	dd400a17 	ldw	r21,40(sp)
  d0c33c:	dd000917 	ldw	r20,36(sp)
  d0c340:	dcc00817 	ldw	r19,32(sp)
  d0c344:	dc800717 	ldw	r18,28(sp)
  d0c348:	dc400617 	ldw	r17,24(sp)
  d0c34c:	dc000517 	ldw	r16,20(sp)
  d0c350:	dec00e04 	addi	sp,sp,56
  d0c354:	f800283a 	ret
  d0c358:	008000c4 	movi	r2,3
  d0c35c:	00c00f04 	movi	r3,60
  d0c360:	002f883a 	mov	r23,zero
  d0c364:	202d883a 	mov	r22,r4
  d0c368:	d8800015 	stw	r2,0(sp)
  d0c36c:	d8c00215 	stw	r3,8(sp)
  d0c370:	d9000315 	stw	r4,12(sp)
  d0c374:	ddc00415 	stw	r23,16(sp)
  d0c378:	0d033240 	call	d03324 <__clzsi2>
  d0c37c:	12400744 	addi	r9,r2,29
  d0c380:	48000b16 	blt	r9,zero,d0c3b0 <__floatunsidf+0xc4>
  d0c384:	483fe726 	beq	r9,zero,d0c324 <__floatunsidf+0x38>
  d0c388:	10bfff44 	addi	r2,r2,-3
  d0c38c:	10002e16 	blt	r2,zero,d0c448 <__floatunsidf+0x15c>
  d0c390:	b0a2983a 	sll	r17,r22,r2
  d0c394:	0021883a 	mov	r16,zero
  d0c398:	d8800217 	ldw	r2,8(sp)
  d0c39c:	dc400415 	stw	r17,16(sp)
  d0c3a0:	dc000315 	stw	r16,12(sp)
  d0c3a4:	1245c83a 	sub	r2,r2,r9
  d0c3a8:	d8800215 	stw	r2,8(sp)
  d0c3ac:	003fdd06 	br	d0c324 <__floatunsidf+0x38>
  d0c3b0:	0255c83a 	sub	r10,zero,r9
  d0c3b4:	51bff804 	addi	r6,r10,-32
  d0c3b8:	30001b16 	blt	r6,zero,d0c428 <__floatunsidf+0x13c>
  d0c3bc:	b9a8d83a 	srl	r20,r23,r6
  d0c3c0:	002b883a 	mov	r21,zero
  d0c3c4:	000f883a 	mov	r7,zero
  d0c3c8:	01000044 	movi	r4,1
  d0c3cc:	0011883a 	mov	r8,zero
  d0c3d0:	30002516 	blt	r6,zero,d0c468 <__floatunsidf+0x17c>
  d0c3d4:	21a6983a 	sll	r19,r4,r6
  d0c3d8:	0025883a 	mov	r18,zero
  d0c3dc:	00bfffc4 	movi	r2,-1
  d0c3e0:	9089883a 	add	r4,r18,r2
  d0c3e4:	988b883a 	add	r5,r19,r2
  d0c3e8:	248d803a 	cmpltu	r6,r4,r18
  d0c3ec:	314b883a 	add	r5,r6,r5
  d0c3f0:	b104703a 	and	r2,r22,r4
  d0c3f4:	b946703a 	and	r3,r23,r5
  d0c3f8:	10c4b03a 	or	r2,r2,r3
  d0c3fc:	10000226 	beq	r2,zero,d0c408 <__floatunsidf+0x11c>
  d0c400:	01c00044 	movi	r7,1
  d0c404:	0011883a 	mov	r8,zero
  d0c408:	d9000217 	ldw	r4,8(sp)
  d0c40c:	a1c4b03a 	or	r2,r20,r7
  d0c410:	aa06b03a 	or	r3,r21,r8
  d0c414:	2249c83a 	sub	r4,r4,r9
  d0c418:	d8c00415 	stw	r3,16(sp)
  d0c41c:	d9000215 	stw	r4,8(sp)
  d0c420:	d8800315 	stw	r2,12(sp)
  d0c424:	003fbf06 	br	d0c324 <__floatunsidf+0x38>
  d0c428:	bdc7883a 	add	r3,r23,r23
  d0c42c:	008007c4 	movi	r2,31
  d0c430:	1285c83a 	sub	r2,r2,r10
  d0c434:	1886983a 	sll	r3,r3,r2
  d0c438:	b2a8d83a 	srl	r20,r22,r10
  d0c43c:	baaad83a 	srl	r21,r23,r10
  d0c440:	1d28b03a 	or	r20,r3,r20
  d0c444:	003fdf06 	br	d0c3c4 <__floatunsidf+0xd8>
  d0c448:	b006d07a 	srli	r3,r22,1
  d0c44c:	008007c4 	movi	r2,31
  d0c450:	1245c83a 	sub	r2,r2,r9
  d0c454:	1886d83a 	srl	r3,r3,r2
  d0c458:	ba62983a 	sll	r17,r23,r9
  d0c45c:	b260983a 	sll	r16,r22,r9
  d0c460:	1c62b03a 	or	r17,r3,r17
  d0c464:	003fcc06 	br	d0c398 <__floatunsidf+0xac>
  d0c468:	2006d07a 	srli	r3,r4,1
  d0c46c:	008007c4 	movi	r2,31
  d0c470:	1285c83a 	sub	r2,r2,r10
  d0c474:	18a6d83a 	srl	r19,r3,r2
  d0c478:	22a4983a 	sll	r18,r4,r10
  d0c47c:	003fd706 	br	d0c3dc <__floatunsidf+0xf0>

00d0c480 <udivmodsi4>:
  d0c480:	29001b2e 	bgeu	r5,r4,d0c4f0 <udivmodsi4+0x70>
  d0c484:	28001a16 	blt	r5,zero,d0c4f0 <udivmodsi4+0x70>
  d0c488:	00800044 	movi	r2,1
  d0c48c:	0007883a 	mov	r3,zero
  d0c490:	01c007c4 	movi	r7,31
  d0c494:	00000306 	br	d0c4a4 <udivmodsi4+0x24>
  d0c498:	19c01326 	beq	r3,r7,d0c4e8 <udivmodsi4+0x68>
  d0c49c:	18c00044 	addi	r3,r3,1
  d0c4a0:	28000416 	blt	r5,zero,d0c4b4 <udivmodsi4+0x34>
  d0c4a4:	294b883a 	add	r5,r5,r5
  d0c4a8:	1085883a 	add	r2,r2,r2
  d0c4ac:	293ffa36 	bltu	r5,r4,d0c498 <udivmodsi4+0x18>
  d0c4b0:	10000d26 	beq	r2,zero,d0c4e8 <udivmodsi4+0x68>
  d0c4b4:	0007883a 	mov	r3,zero
  d0c4b8:	21400236 	bltu	r4,r5,d0c4c4 <udivmodsi4+0x44>
  d0c4bc:	2149c83a 	sub	r4,r4,r5
  d0c4c0:	1886b03a 	or	r3,r3,r2
  d0c4c4:	1004d07a 	srli	r2,r2,1
  d0c4c8:	280ad07a 	srli	r5,r5,1
  d0c4cc:	103ffa1e 	bne	r2,zero,d0c4b8 <udivmodsi4+0x38>
  d0c4d0:	30000226 	beq	r6,zero,d0c4dc <udivmodsi4+0x5c>
  d0c4d4:	2005883a 	mov	r2,r4
  d0c4d8:	f800283a 	ret
  d0c4dc:	1809883a 	mov	r4,r3
  d0c4e0:	2005883a 	mov	r2,r4
  d0c4e4:	f800283a 	ret
  d0c4e8:	0007883a 	mov	r3,zero
  d0c4ec:	003ff806 	br	d0c4d0 <udivmodsi4+0x50>
  d0c4f0:	00800044 	movi	r2,1
  d0c4f4:	0007883a 	mov	r3,zero
  d0c4f8:	003fef06 	br	d0c4b8 <udivmodsi4+0x38>

00d0c4fc <__divsi3>:
  d0c4fc:	defffe04 	addi	sp,sp,-8
  d0c500:	dc000015 	stw	r16,0(sp)
  d0c504:	dfc00115 	stw	ra,4(sp)
  d0c508:	0021883a 	mov	r16,zero
  d0c50c:	20000c16 	blt	r4,zero,d0c540 <__divsi3+0x44>
  d0c510:	000d883a 	mov	r6,zero
  d0c514:	28000e16 	blt	r5,zero,d0c550 <__divsi3+0x54>
  d0c518:	0d0c4800 	call	d0c480 <udivmodsi4>
  d0c51c:	1007883a 	mov	r3,r2
  d0c520:	8005003a 	cmpeq	r2,r16,zero
  d0c524:	1000011e 	bne	r2,zero,d0c52c <__divsi3+0x30>
  d0c528:	00c7c83a 	sub	r3,zero,r3
  d0c52c:	1805883a 	mov	r2,r3
  d0c530:	dfc00117 	ldw	ra,4(sp)
  d0c534:	dc000017 	ldw	r16,0(sp)
  d0c538:	dec00204 	addi	sp,sp,8
  d0c53c:	f800283a 	ret
  d0c540:	0109c83a 	sub	r4,zero,r4
  d0c544:	04000044 	movi	r16,1
  d0c548:	000d883a 	mov	r6,zero
  d0c54c:	283ff20e 	bge	r5,zero,d0c518 <__divsi3+0x1c>
  d0c550:	014bc83a 	sub	r5,zero,r5
  d0c554:	8021003a 	cmpeq	r16,r16,zero
  d0c558:	003fef06 	br	d0c518 <__divsi3+0x1c>

00d0c55c <__modsi3>:
  d0c55c:	deffff04 	addi	sp,sp,-4
  d0c560:	dfc00015 	stw	ra,0(sp)
  d0c564:	01800044 	movi	r6,1
  d0c568:	2807883a 	mov	r3,r5
  d0c56c:	20000416 	blt	r4,zero,d0c580 <__modsi3+0x24>
  d0c570:	28000c16 	blt	r5,zero,d0c5a4 <__modsi3+0x48>
  d0c574:	dfc00017 	ldw	ra,0(sp)
  d0c578:	dec00104 	addi	sp,sp,4
  d0c57c:	0d0c4801 	jmpi	d0c480 <udivmodsi4>
  d0c580:	0109c83a 	sub	r4,zero,r4
  d0c584:	28000b16 	blt	r5,zero,d0c5b4 <__modsi3+0x58>
  d0c588:	180b883a 	mov	r5,r3
  d0c58c:	01800044 	movi	r6,1
  d0c590:	0d0c4800 	call	d0c480 <udivmodsi4>
  d0c594:	0085c83a 	sub	r2,zero,r2
  d0c598:	dfc00017 	ldw	ra,0(sp)
  d0c59c:	dec00104 	addi	sp,sp,4
  d0c5a0:	f800283a 	ret
  d0c5a4:	014bc83a 	sub	r5,zero,r5
  d0c5a8:	dfc00017 	ldw	ra,0(sp)
  d0c5ac:	dec00104 	addi	sp,sp,4
  d0c5b0:	0d0c4801 	jmpi	d0c480 <udivmodsi4>
  d0c5b4:	0147c83a 	sub	r3,zero,r5
  d0c5b8:	003ff306 	br	d0c588 <__modsi3+0x2c>

00d0c5bc <__udivsi3>:
  d0c5bc:	000d883a 	mov	r6,zero
  d0c5c0:	0d0c4801 	jmpi	d0c480 <udivmodsi4>

00d0c5c4 <__umodsi3>:
  d0c5c4:	01800044 	movi	r6,1
  d0c5c8:	0d0c4801 	jmpi	d0c480 <udivmodsi4>

00d0c5cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  d0c5cc:	defff804 	addi	sp,sp,-32
  d0c5d0:	dfc00715 	stw	ra,28(sp)
  d0c5d4:	df000615 	stw	fp,24(sp)
  d0c5d8:	df000604 	addi	fp,sp,24
  d0c5dc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  d0c5e0:	e0bffc17 	ldw	r2,-16(fp)
  d0c5e4:	1004803a 	cmplt	r2,r2,zero
  d0c5e8:	1000081e 	bne	r2,zero,d0c60c <close+0x40>
  d0c5ec:	e0bffc17 	ldw	r2,-16(fp)
  d0c5f0:	10800324 	muli	r2,r2,12
  d0c5f4:	1007883a 	mov	r3,r2
  d0c5f8:	00803474 	movhi	r2,209
  d0c5fc:	10872804 	addi	r2,r2,7328
  d0c600:	1887883a 	add	r3,r3,r2
  d0c604:	e0ffff15 	stw	r3,-4(fp)
  d0c608:	00000106 	br	d0c610 <close+0x44>
  d0c60c:	e03fff15 	stw	zero,-4(fp)
  d0c610:	e0bfff17 	ldw	r2,-4(fp)
  d0c614:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  d0c618:	e0bffb17 	ldw	r2,-20(fp)
  d0c61c:	1005003a 	cmpeq	r2,r2,zero
  d0c620:	10001d1e 	bne	r2,zero,d0c698 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  d0c624:	e0bffb17 	ldw	r2,-20(fp)
  d0c628:	10800017 	ldw	r2,0(r2)
  d0c62c:	10800417 	ldw	r2,16(r2)
  d0c630:	1005003a 	cmpeq	r2,r2,zero
  d0c634:	1000071e 	bne	r2,zero,d0c654 <close+0x88>
  d0c638:	e0bffb17 	ldw	r2,-20(fp)
  d0c63c:	10800017 	ldw	r2,0(r2)
  d0c640:	10800417 	ldw	r2,16(r2)
  d0c644:	e13ffb17 	ldw	r4,-20(fp)
  d0c648:	103ee83a 	callr	r2
  d0c64c:	e0bffe15 	stw	r2,-8(fp)
  d0c650:	00000106 	br	d0c658 <close+0x8c>
  d0c654:	e03ffe15 	stw	zero,-8(fp)
  d0c658:	e0bffe17 	ldw	r2,-8(fp)
  d0c65c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  d0c660:	e13ffc17 	ldw	r4,-16(fp)
  d0c664:	0d0ce100 	call	d0ce10 <alt_release_fd>
    if (rval < 0)
  d0c668:	e0bffa17 	ldw	r2,-24(fp)
  d0c66c:	1004403a 	cmpge	r2,r2,zero
  d0c670:	1000071e 	bne	r2,zero,d0c690 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  d0c674:	0d0c6c80 	call	d0c6c8 <alt_get_errno>
  d0c678:	e0fffa17 	ldw	r3,-24(fp)
  d0c67c:	00c7c83a 	sub	r3,zero,r3
  d0c680:	10c00015 	stw	r3,0(r2)
      return -1;
  d0c684:	00bfffc4 	movi	r2,-1
  d0c688:	e0bffd15 	stw	r2,-12(fp)
  d0c68c:	00000806 	br	d0c6b0 <close+0xe4>
    }
    return 0;
  d0c690:	e03ffd15 	stw	zero,-12(fp)
  d0c694:	00000606 	br	d0c6b0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  d0c698:	0d0c6c80 	call	d0c6c8 <alt_get_errno>
  d0c69c:	1007883a 	mov	r3,r2
  d0c6a0:	00801444 	movi	r2,81
  d0c6a4:	18800015 	stw	r2,0(r3)
    return -1;
  d0c6a8:	00bfffc4 	movi	r2,-1
  d0c6ac:	e0bffd15 	stw	r2,-12(fp)
  d0c6b0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  d0c6b4:	e037883a 	mov	sp,fp
  d0c6b8:	dfc00117 	ldw	ra,4(sp)
  d0c6bc:	df000017 	ldw	fp,0(sp)
  d0c6c0:	dec00204 	addi	sp,sp,8
  d0c6c4:	f800283a 	ret

00d0c6c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0c6c8:	defffd04 	addi	sp,sp,-12
  d0c6cc:	dfc00215 	stw	ra,8(sp)
  d0c6d0:	df000115 	stw	fp,4(sp)
  d0c6d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0c6d8:	00803474 	movhi	r2,209
  d0c6dc:	108c0404 	addi	r2,r2,12304
  d0c6e0:	10800017 	ldw	r2,0(r2)
  d0c6e4:	1005003a 	cmpeq	r2,r2,zero
  d0c6e8:	1000061e 	bne	r2,zero,d0c704 <alt_get_errno+0x3c>
  d0c6ec:	00803474 	movhi	r2,209
  d0c6f0:	108c0404 	addi	r2,r2,12304
  d0c6f4:	10800017 	ldw	r2,0(r2)
  d0c6f8:	103ee83a 	callr	r2
  d0c6fc:	e0bfff15 	stw	r2,-4(fp)
  d0c700:	00000306 	br	d0c710 <alt_get_errno+0x48>
  d0c704:	00803474 	movhi	r2,209
  d0c708:	10930a04 	addi	r2,r2,19496
  d0c70c:	e0bfff15 	stw	r2,-4(fp)
  d0c710:	e0bfff17 	ldw	r2,-4(fp)
}
  d0c714:	e037883a 	mov	sp,fp
  d0c718:	dfc00117 	ldw	ra,4(sp)
  d0c71c:	df000017 	ldw	fp,0(sp)
  d0c720:	dec00204 	addi	sp,sp,8
  d0c724:	f800283a 	ret

00d0c728 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  d0c728:	defffc04 	addi	sp,sp,-16
  d0c72c:	df000315 	stw	fp,12(sp)
  d0c730:	df000304 	addi	fp,sp,12
  d0c734:	e13ffd15 	stw	r4,-12(fp)
  d0c738:	e17ffe15 	stw	r5,-8(fp)
  d0c73c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  d0c740:	e0bfff17 	ldw	r2,-4(fp)
}
  d0c744:	e037883a 	mov	sp,fp
  d0c748:	df000017 	ldw	fp,0(sp)
  d0c74c:	dec00104 	addi	sp,sp,4
  d0c750:	f800283a 	ret

00d0c754 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  d0c754:	defff904 	addi	sp,sp,-28
  d0c758:	dfc00615 	stw	ra,24(sp)
  d0c75c:	df000515 	stw	fp,20(sp)
  d0c760:	df000504 	addi	fp,sp,20
  d0c764:	e13ffc15 	stw	r4,-16(fp)
  d0c768:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  d0c76c:	e0bffc17 	ldw	r2,-16(fp)
  d0c770:	1004803a 	cmplt	r2,r2,zero
  d0c774:	1000081e 	bne	r2,zero,d0c798 <fstat+0x44>
  d0c778:	e0bffc17 	ldw	r2,-16(fp)
  d0c77c:	10800324 	muli	r2,r2,12
  d0c780:	1007883a 	mov	r3,r2
  d0c784:	00803474 	movhi	r2,209
  d0c788:	10872804 	addi	r2,r2,7328
  d0c78c:	1887883a 	add	r3,r3,r2
  d0c790:	e0ffff15 	stw	r3,-4(fp)
  d0c794:	00000106 	br	d0c79c <fstat+0x48>
  d0c798:	e03fff15 	stw	zero,-4(fp)
  d0c79c:	e0bfff17 	ldw	r2,-4(fp)
  d0c7a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  d0c7a4:	e0bffb17 	ldw	r2,-20(fp)
  d0c7a8:	1005003a 	cmpeq	r2,r2,zero
  d0c7ac:	1000121e 	bne	r2,zero,d0c7f8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  d0c7b0:	e0bffb17 	ldw	r2,-20(fp)
  d0c7b4:	10800017 	ldw	r2,0(r2)
  d0c7b8:	10800817 	ldw	r2,32(r2)
  d0c7bc:	1005003a 	cmpeq	r2,r2,zero
  d0c7c0:	1000081e 	bne	r2,zero,d0c7e4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  d0c7c4:	e0bffb17 	ldw	r2,-20(fp)
  d0c7c8:	10800017 	ldw	r2,0(r2)
  d0c7cc:	10800817 	ldw	r2,32(r2)
  d0c7d0:	e13ffb17 	ldw	r4,-20(fp)
  d0c7d4:	e17ffd17 	ldw	r5,-12(fp)
  d0c7d8:	103ee83a 	callr	r2
  d0c7dc:	e0bffe15 	stw	r2,-8(fp)
  d0c7e0:	00000b06 	br	d0c810 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  d0c7e4:	e0fffd17 	ldw	r3,-12(fp)
  d0c7e8:	00880004 	movi	r2,8192
  d0c7ec:	18800115 	stw	r2,4(r3)
      return 0;
  d0c7f0:	e03ffe15 	stw	zero,-8(fp)
  d0c7f4:	00000606 	br	d0c810 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  d0c7f8:	0d0c8280 	call	d0c828 <alt_get_errno>
  d0c7fc:	1007883a 	mov	r3,r2
  d0c800:	00801444 	movi	r2,81
  d0c804:	18800015 	stw	r2,0(r3)
    return -1;
  d0c808:	00bfffc4 	movi	r2,-1
  d0c80c:	e0bffe15 	stw	r2,-8(fp)
  d0c810:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  d0c814:	e037883a 	mov	sp,fp
  d0c818:	dfc00117 	ldw	ra,4(sp)
  d0c81c:	df000017 	ldw	fp,0(sp)
  d0c820:	dec00204 	addi	sp,sp,8
  d0c824:	f800283a 	ret

00d0c828 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0c828:	defffd04 	addi	sp,sp,-12
  d0c82c:	dfc00215 	stw	ra,8(sp)
  d0c830:	df000115 	stw	fp,4(sp)
  d0c834:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0c838:	00803474 	movhi	r2,209
  d0c83c:	108c0404 	addi	r2,r2,12304
  d0c840:	10800017 	ldw	r2,0(r2)
  d0c844:	1005003a 	cmpeq	r2,r2,zero
  d0c848:	1000061e 	bne	r2,zero,d0c864 <alt_get_errno+0x3c>
  d0c84c:	00803474 	movhi	r2,209
  d0c850:	108c0404 	addi	r2,r2,12304
  d0c854:	10800017 	ldw	r2,0(r2)
  d0c858:	103ee83a 	callr	r2
  d0c85c:	e0bfff15 	stw	r2,-4(fp)
  d0c860:	00000306 	br	d0c870 <alt_get_errno+0x48>
  d0c864:	00803474 	movhi	r2,209
  d0c868:	10930a04 	addi	r2,r2,19496
  d0c86c:	e0bfff15 	stw	r2,-4(fp)
  d0c870:	e0bfff17 	ldw	r2,-4(fp)
}
  d0c874:	e037883a 	mov	sp,fp
  d0c878:	dfc00117 	ldw	ra,4(sp)
  d0c87c:	df000017 	ldw	fp,0(sp)
  d0c880:	dec00204 	addi	sp,sp,8
  d0c884:	f800283a 	ret

00d0c888 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  d0c888:	deffeb04 	addi	sp,sp,-84
  d0c88c:	dfc01415 	stw	ra,80(sp)
  d0c890:	df001315 	stw	fp,76(sp)
  d0c894:	df001304 	addi	fp,sp,76
  d0c898:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  d0c89c:	e0bffd17 	ldw	r2,-12(fp)
  d0c8a0:	1004803a 	cmplt	r2,r2,zero
  d0c8a4:	1000081e 	bne	r2,zero,d0c8c8 <isatty+0x40>
  d0c8a8:	e0bffd17 	ldw	r2,-12(fp)
  d0c8ac:	10800324 	muli	r2,r2,12
  d0c8b0:	1007883a 	mov	r3,r2
  d0c8b4:	00803474 	movhi	r2,209
  d0c8b8:	10872804 	addi	r2,r2,7328
  d0c8bc:	1887883a 	add	r3,r3,r2
  d0c8c0:	e0ffff15 	stw	r3,-4(fp)
  d0c8c4:	00000106 	br	d0c8cc <isatty+0x44>
  d0c8c8:	e03fff15 	stw	zero,-4(fp)
  d0c8cc:	e0bfff17 	ldw	r2,-4(fp)
  d0c8d0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  d0c8d4:	e0bfed17 	ldw	r2,-76(fp)
  d0c8d8:	1005003a 	cmpeq	r2,r2,zero
  d0c8dc:	10000f1e 	bne	r2,zero,d0c91c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  d0c8e0:	e0bfed17 	ldw	r2,-76(fp)
  d0c8e4:	10800017 	ldw	r2,0(r2)
  d0c8e8:	10800817 	ldw	r2,32(r2)
  d0c8ec:	1004c03a 	cmpne	r2,r2,zero
  d0c8f0:	1000031e 	bne	r2,zero,d0c900 <isatty+0x78>
    {
      return 1;
  d0c8f4:	00800044 	movi	r2,1
  d0c8f8:	e0bffe15 	stw	r2,-8(fp)
  d0c8fc:	00000c06 	br	d0c930 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  d0c900:	e17fee04 	addi	r5,fp,-72
  d0c904:	e13ffd17 	ldw	r4,-12(fp)
  d0c908:	0d0c7540 	call	d0c754 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  d0c90c:	e0bfef17 	ldw	r2,-68(fp)
  d0c910:	10880020 	cmpeqi	r2,r2,8192
  d0c914:	e0bffe15 	stw	r2,-8(fp)
  d0c918:	00000506 	br	d0c930 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  d0c91c:	0d0c9480 	call	d0c948 <alt_get_errno>
  d0c920:	1007883a 	mov	r3,r2
  d0c924:	00801444 	movi	r2,81
  d0c928:	18800015 	stw	r2,0(r3)
    return 0;
  d0c92c:	e03ffe15 	stw	zero,-8(fp)
  d0c930:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  d0c934:	e037883a 	mov	sp,fp
  d0c938:	dfc00117 	ldw	ra,4(sp)
  d0c93c:	df000017 	ldw	fp,0(sp)
  d0c940:	dec00204 	addi	sp,sp,8
  d0c944:	f800283a 	ret

00d0c948 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0c948:	defffd04 	addi	sp,sp,-12
  d0c94c:	dfc00215 	stw	ra,8(sp)
  d0c950:	df000115 	stw	fp,4(sp)
  d0c954:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0c958:	00803474 	movhi	r2,209
  d0c95c:	108c0404 	addi	r2,r2,12304
  d0c960:	10800017 	ldw	r2,0(r2)
  d0c964:	1005003a 	cmpeq	r2,r2,zero
  d0c968:	1000061e 	bne	r2,zero,d0c984 <alt_get_errno+0x3c>
  d0c96c:	00803474 	movhi	r2,209
  d0c970:	108c0404 	addi	r2,r2,12304
  d0c974:	10800017 	ldw	r2,0(r2)
  d0c978:	103ee83a 	callr	r2
  d0c97c:	e0bfff15 	stw	r2,-4(fp)
  d0c980:	00000306 	br	d0c990 <alt_get_errno+0x48>
  d0c984:	00803474 	movhi	r2,209
  d0c988:	10930a04 	addi	r2,r2,19496
  d0c98c:	e0bfff15 	stw	r2,-4(fp)
  d0c990:	e0bfff17 	ldw	r2,-4(fp)
}
  d0c994:	e037883a 	mov	sp,fp
  d0c998:	dfc00117 	ldw	ra,4(sp)
  d0c99c:	df000017 	ldw	fp,0(sp)
  d0c9a0:	dec00204 	addi	sp,sp,8
  d0c9a4:	f800283a 	ret

00d0c9a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  d0c9a8:	defffe04 	addi	sp,sp,-8
  d0c9ac:	dfc00115 	stw	ra,4(sp)
  d0c9b0:	df000015 	stw	fp,0(sp)
  d0c9b4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  d0c9b8:	01003474 	movhi	r4,209
  d0c9bc:	210c0d04 	addi	r4,r4,12340
  d0c9c0:	01403474 	movhi	r5,209
  d0c9c4:	29451904 	addi	r5,r5,5220
  d0c9c8:	01803474 	movhi	r6,209
  d0c9cc:	318c0d04 	addi	r6,r6,12340
  d0c9d0:	0d0ca280 	call	d0ca28 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  d0c9d4:	01003434 	movhi	r4,208
  d0c9d8:	21000804 	addi	r4,r4,32
  d0c9dc:	01403434 	movhi	r5,208
  d0c9e0:	29400804 	addi	r5,r5,32
  d0c9e4:	01803434 	movhi	r6,208
  d0c9e8:	31806d04 	addi	r6,r6,436
  d0c9ec:	0d0ca280 	call	d0ca28 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  d0c9f0:	01003474 	movhi	r4,209
  d0c9f4:	2103df04 	addi	r4,r4,3964
  d0c9f8:	01403474 	movhi	r5,209
  d0c9fc:	2943df04 	addi	r5,r5,3964
  d0ca00:	01803474 	movhi	r6,209
  d0ca04:	31851904 	addi	r6,r6,5220
  d0ca08:	0d0ca280 	call	d0ca28 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  d0ca0c:	0d0fd280 	call	d0fd28 <alt_dcache_flush_all>
  alt_icache_flush_all();
  d0ca10:	0d0ffdc0 	call	d0ffdc <alt_icache_flush_all>
}
  d0ca14:	e037883a 	mov	sp,fp
  d0ca18:	dfc00117 	ldw	ra,4(sp)
  d0ca1c:	df000017 	ldw	fp,0(sp)
  d0ca20:	dec00204 	addi	sp,sp,8
  d0ca24:	f800283a 	ret

00d0ca28 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  d0ca28:	defffc04 	addi	sp,sp,-16
  d0ca2c:	df000315 	stw	fp,12(sp)
  d0ca30:	df000304 	addi	fp,sp,12
  d0ca34:	e13ffd15 	stw	r4,-12(fp)
  d0ca38:	e17ffe15 	stw	r5,-8(fp)
  d0ca3c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  d0ca40:	e0fffe17 	ldw	r3,-8(fp)
  d0ca44:	e0bffd17 	ldw	r2,-12(fp)
  d0ca48:	18800e26 	beq	r3,r2,d0ca84 <alt_load_section+0x5c>
  {
    while( to != end )
  d0ca4c:	00000a06 	br	d0ca78 <alt_load_section+0x50>
    {
      *to++ = *from++;
  d0ca50:	e0bffd17 	ldw	r2,-12(fp)
  d0ca54:	10c00017 	ldw	r3,0(r2)
  d0ca58:	e0bffe17 	ldw	r2,-8(fp)
  d0ca5c:	10c00015 	stw	r3,0(r2)
  d0ca60:	e0bffe17 	ldw	r2,-8(fp)
  d0ca64:	10800104 	addi	r2,r2,4
  d0ca68:	e0bffe15 	stw	r2,-8(fp)
  d0ca6c:	e0bffd17 	ldw	r2,-12(fp)
  d0ca70:	10800104 	addi	r2,r2,4
  d0ca74:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  d0ca78:	e0fffe17 	ldw	r3,-8(fp)
  d0ca7c:	e0bfff17 	ldw	r2,-4(fp)
  d0ca80:	18bff31e 	bne	r3,r2,d0ca50 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  d0ca84:	e037883a 	mov	sp,fp
  d0ca88:	df000017 	ldw	fp,0(sp)
  d0ca8c:	dec00104 	addi	sp,sp,4
  d0ca90:	f800283a 	ret

00d0ca94 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  d0ca94:	defff804 	addi	sp,sp,-32
  d0ca98:	dfc00715 	stw	ra,28(sp)
  d0ca9c:	df000615 	stw	fp,24(sp)
  d0caa0:	df000604 	addi	fp,sp,24
  d0caa4:	e13ffc15 	stw	r4,-16(fp)
  d0caa8:	e17ffd15 	stw	r5,-12(fp)
  d0caac:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  d0cab0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  d0cab4:	e0bffc17 	ldw	r2,-16(fp)
  d0cab8:	1004803a 	cmplt	r2,r2,zero
  d0cabc:	1000081e 	bne	r2,zero,d0cae0 <lseek+0x4c>
  d0cac0:	e0bffc17 	ldw	r2,-16(fp)
  d0cac4:	10800324 	muli	r2,r2,12
  d0cac8:	1007883a 	mov	r3,r2
  d0cacc:	00803474 	movhi	r2,209
  d0cad0:	10872804 	addi	r2,r2,7328
  d0cad4:	1887883a 	add	r3,r3,r2
  d0cad8:	e0ffff15 	stw	r3,-4(fp)
  d0cadc:	00000106 	br	d0cae4 <lseek+0x50>
  d0cae0:	e03fff15 	stw	zero,-4(fp)
  d0cae4:	e0bfff17 	ldw	r2,-4(fp)
  d0cae8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  d0caec:	e0bffb17 	ldw	r2,-20(fp)
  d0caf0:	1005003a 	cmpeq	r2,r2,zero
  d0caf4:	1000111e 	bne	r2,zero,d0cb3c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  d0caf8:	e0bffb17 	ldw	r2,-20(fp)
  d0cafc:	10800017 	ldw	r2,0(r2)
  d0cb00:	10800717 	ldw	r2,28(r2)
  d0cb04:	1005003a 	cmpeq	r2,r2,zero
  d0cb08:	1000091e 	bne	r2,zero,d0cb30 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  d0cb0c:	e0bffb17 	ldw	r2,-20(fp)
  d0cb10:	10800017 	ldw	r2,0(r2)
  d0cb14:	10800717 	ldw	r2,28(r2)
  d0cb18:	e13ffb17 	ldw	r4,-20(fp)
  d0cb1c:	e17ffd17 	ldw	r5,-12(fp)
  d0cb20:	e1bffe17 	ldw	r6,-8(fp)
  d0cb24:	103ee83a 	callr	r2
  d0cb28:	e0bffa15 	stw	r2,-24(fp)
  d0cb2c:	00000506 	br	d0cb44 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  d0cb30:	00bfde84 	movi	r2,-134
  d0cb34:	e0bffa15 	stw	r2,-24(fp)
  d0cb38:	00000206 	br	d0cb44 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  d0cb3c:	00bfebc4 	movi	r2,-81
  d0cb40:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  d0cb44:	e0bffa17 	ldw	r2,-24(fp)
  d0cb48:	1004403a 	cmpge	r2,r2,zero
  d0cb4c:	1000071e 	bne	r2,zero,d0cb6c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  d0cb50:	0d0cb840 	call	d0cb84 <alt_get_errno>
  d0cb54:	1007883a 	mov	r3,r2
  d0cb58:	e0bffa17 	ldw	r2,-24(fp)
  d0cb5c:	0085c83a 	sub	r2,zero,r2
  d0cb60:	18800015 	stw	r2,0(r3)
    rc = -1;
  d0cb64:	00bfffc4 	movi	r2,-1
  d0cb68:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  d0cb6c:	e0bffa17 	ldw	r2,-24(fp)
}
  d0cb70:	e037883a 	mov	sp,fp
  d0cb74:	dfc00117 	ldw	ra,4(sp)
  d0cb78:	df000017 	ldw	fp,0(sp)
  d0cb7c:	dec00204 	addi	sp,sp,8
  d0cb80:	f800283a 	ret

00d0cb84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0cb84:	defffd04 	addi	sp,sp,-12
  d0cb88:	dfc00215 	stw	ra,8(sp)
  d0cb8c:	df000115 	stw	fp,4(sp)
  d0cb90:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0cb94:	00803474 	movhi	r2,209
  d0cb98:	108c0404 	addi	r2,r2,12304
  d0cb9c:	10800017 	ldw	r2,0(r2)
  d0cba0:	1005003a 	cmpeq	r2,r2,zero
  d0cba4:	1000061e 	bne	r2,zero,d0cbc0 <alt_get_errno+0x3c>
  d0cba8:	00803474 	movhi	r2,209
  d0cbac:	108c0404 	addi	r2,r2,12304
  d0cbb0:	10800017 	ldw	r2,0(r2)
  d0cbb4:	103ee83a 	callr	r2
  d0cbb8:	e0bfff15 	stw	r2,-4(fp)
  d0cbbc:	00000306 	br	d0cbcc <alt_get_errno+0x48>
  d0cbc0:	00803474 	movhi	r2,209
  d0cbc4:	10930a04 	addi	r2,r2,19496
  d0cbc8:	e0bfff15 	stw	r2,-4(fp)
  d0cbcc:	e0bfff17 	ldw	r2,-4(fp)
}
  d0cbd0:	e037883a 	mov	sp,fp
  d0cbd4:	dfc00117 	ldw	ra,4(sp)
  d0cbd8:	df000017 	ldw	fp,0(sp)
  d0cbdc:	dec00204 	addi	sp,sp,8
  d0cbe0:	f800283a 	ret

00d0cbe4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  d0cbe4:	defffd04 	addi	sp,sp,-12
  d0cbe8:	dfc00215 	stw	ra,8(sp)
  d0cbec:	df000115 	stw	fp,4(sp)
  d0cbf0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  d0cbf4:	0009883a 	mov	r4,zero
  d0cbf8:	0d0d0ac0 	call	d0d0ac <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  d0cbfc:	0d0d0e00 	call	d0d0e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  d0cc00:	01003474 	movhi	r4,209
  d0cc04:	2104c704 	addi	r4,r4,4892
  d0cc08:	01403474 	movhi	r5,209
  d0cc0c:	2944c704 	addi	r5,r5,4892
  d0cc10:	01803474 	movhi	r6,209
  d0cc14:	3184c704 	addi	r6,r6,4892
  d0cc18:	0d1039c0 	call	d1039c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  d0cc1c:	0d0fe800 	call	d0fe80 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  d0cc20:	01003474 	movhi	r4,209
  d0cc24:	213fb904 	addi	r4,r4,-284
  d0cc28:	0d10b040 	call	d10b04 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  d0cc2c:	d1271a17 	ldw	r4,-25496(gp)
  d0cc30:	d1671b17 	ldw	r5,-25492(gp)
  d0cc34:	d1a71c17 	ldw	r6,-25488(gp)
  d0cc38:	0d00c000 	call	d00c00 <main>
  d0cc3c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  d0cc40:	01000044 	movi	r4,1
  d0cc44:	0d0c5cc0 	call	d0c5cc <close>
  exit (result);
  d0cc48:	e13fff17 	ldw	r4,-4(fp)
  d0cc4c:	0d10b180 	call	d10b18 <exit>

00d0cc50 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  d0cc50:	defffe04 	addi	sp,sp,-8
  d0cc54:	df000115 	stw	fp,4(sp)
  d0cc58:	df000104 	addi	fp,sp,4
  d0cc5c:	e13fff15 	stw	r4,-4(fp)
}
  d0cc60:	e037883a 	mov	sp,fp
  d0cc64:	df000017 	ldw	fp,0(sp)
  d0cc68:	dec00104 	addi	sp,sp,4
  d0cc6c:	f800283a 	ret

00d0cc70 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  d0cc70:	defffe04 	addi	sp,sp,-8
  d0cc74:	df000115 	stw	fp,4(sp)
  d0cc78:	df000104 	addi	fp,sp,4
  d0cc7c:	e13fff15 	stw	r4,-4(fp)
}
  d0cc80:	e037883a 	mov	sp,fp
  d0cc84:	df000017 	ldw	fp,0(sp)
  d0cc88:	dec00104 	addi	sp,sp,4
  d0cc8c:	f800283a 	ret

00d0cc90 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  d0cc90:	defff704 	addi	sp,sp,-36
  d0cc94:	dfc00815 	stw	ra,32(sp)
  d0cc98:	df000715 	stw	fp,28(sp)
  d0cc9c:	df000704 	addi	fp,sp,28
  d0cca0:	e13ffb15 	stw	r4,-20(fp)
  d0cca4:	e17ffc15 	stw	r5,-16(fp)
  d0cca8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  d0ccac:	e0bffb17 	ldw	r2,-20(fp)
  d0ccb0:	1004803a 	cmplt	r2,r2,zero
  d0ccb4:	1000081e 	bne	r2,zero,d0ccd8 <read+0x48>
  d0ccb8:	e0bffb17 	ldw	r2,-20(fp)
  d0ccbc:	10800324 	muli	r2,r2,12
  d0ccc0:	1007883a 	mov	r3,r2
  d0ccc4:	00803474 	movhi	r2,209
  d0ccc8:	10872804 	addi	r2,r2,7328
  d0cccc:	1887883a 	add	r3,r3,r2
  d0ccd0:	e0ffff15 	stw	r3,-4(fp)
  d0ccd4:	00000106 	br	d0ccdc <read+0x4c>
  d0ccd8:	e03fff15 	stw	zero,-4(fp)
  d0ccdc:	e0bfff17 	ldw	r2,-4(fp)
  d0cce0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  d0cce4:	e0bffa17 	ldw	r2,-24(fp)
  d0cce8:	1005003a 	cmpeq	r2,r2,zero
  d0ccec:	1000241e 	bne	r2,zero,d0cd80 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  d0ccf0:	e0bffa17 	ldw	r2,-24(fp)
  d0ccf4:	10800217 	ldw	r2,8(r2)
  d0ccf8:	108000cc 	andi	r2,r2,3
  d0ccfc:	10800060 	cmpeqi	r2,r2,1
  d0cd00:	10001a1e 	bne	r2,zero,d0cd6c <read+0xdc>
  d0cd04:	e0bffa17 	ldw	r2,-24(fp)
  d0cd08:	10800017 	ldw	r2,0(r2)
  d0cd0c:	10800517 	ldw	r2,20(r2)
  d0cd10:	1005003a 	cmpeq	r2,r2,zero
  d0cd14:	1000151e 	bne	r2,zero,d0cd6c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  d0cd18:	e0bffa17 	ldw	r2,-24(fp)
  d0cd1c:	10800017 	ldw	r2,0(r2)
  d0cd20:	10800517 	ldw	r2,20(r2)
  d0cd24:	e17ffc17 	ldw	r5,-16(fp)
  d0cd28:	e1bffd17 	ldw	r6,-12(fp)
  d0cd2c:	e13ffa17 	ldw	r4,-24(fp)
  d0cd30:	103ee83a 	callr	r2
  d0cd34:	e0bff915 	stw	r2,-28(fp)
  d0cd38:	e0bff917 	ldw	r2,-28(fp)
  d0cd3c:	1004403a 	cmpge	r2,r2,zero
  d0cd40:	1000071e 	bne	r2,zero,d0cd60 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  d0cd44:	0d0cdb00 	call	d0cdb0 <alt_get_errno>
  d0cd48:	e0fff917 	ldw	r3,-28(fp)
  d0cd4c:	00c7c83a 	sub	r3,zero,r3
  d0cd50:	10c00015 	stw	r3,0(r2)
          return -1;
  d0cd54:	00bfffc4 	movi	r2,-1
  d0cd58:	e0bffe15 	stw	r2,-8(fp)
  d0cd5c:	00000e06 	br	d0cd98 <read+0x108>
        }
        return rval;
  d0cd60:	e0bff917 	ldw	r2,-28(fp)
  d0cd64:	e0bffe15 	stw	r2,-8(fp)
  d0cd68:	00000b06 	br	d0cd98 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  d0cd6c:	0d0cdb00 	call	d0cdb0 <alt_get_errno>
  d0cd70:	1007883a 	mov	r3,r2
  d0cd74:	00800344 	movi	r2,13
  d0cd78:	18800015 	stw	r2,0(r3)
  d0cd7c:	00000406 	br	d0cd90 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  d0cd80:	0d0cdb00 	call	d0cdb0 <alt_get_errno>
  d0cd84:	1007883a 	mov	r3,r2
  d0cd88:	00801444 	movi	r2,81
  d0cd8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  d0cd90:	00bfffc4 	movi	r2,-1
  d0cd94:	e0bffe15 	stw	r2,-8(fp)
  d0cd98:	e0bffe17 	ldw	r2,-8(fp)
}
  d0cd9c:	e037883a 	mov	sp,fp
  d0cda0:	dfc00117 	ldw	ra,4(sp)
  d0cda4:	df000017 	ldw	fp,0(sp)
  d0cda8:	dec00204 	addi	sp,sp,8
  d0cdac:	f800283a 	ret

00d0cdb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0cdb0:	defffd04 	addi	sp,sp,-12
  d0cdb4:	dfc00215 	stw	ra,8(sp)
  d0cdb8:	df000115 	stw	fp,4(sp)
  d0cdbc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0cdc0:	00803474 	movhi	r2,209
  d0cdc4:	108c0404 	addi	r2,r2,12304
  d0cdc8:	10800017 	ldw	r2,0(r2)
  d0cdcc:	1005003a 	cmpeq	r2,r2,zero
  d0cdd0:	1000061e 	bne	r2,zero,d0cdec <alt_get_errno+0x3c>
  d0cdd4:	00803474 	movhi	r2,209
  d0cdd8:	108c0404 	addi	r2,r2,12304
  d0cddc:	10800017 	ldw	r2,0(r2)
  d0cde0:	103ee83a 	callr	r2
  d0cde4:	e0bfff15 	stw	r2,-4(fp)
  d0cde8:	00000306 	br	d0cdf8 <alt_get_errno+0x48>
  d0cdec:	00803474 	movhi	r2,209
  d0cdf0:	10930a04 	addi	r2,r2,19496
  d0cdf4:	e0bfff15 	stw	r2,-4(fp)
  d0cdf8:	e0bfff17 	ldw	r2,-4(fp)
}
  d0cdfc:	e037883a 	mov	sp,fp
  d0ce00:	dfc00117 	ldw	ra,4(sp)
  d0ce04:	df000017 	ldw	fp,0(sp)
  d0ce08:	dec00204 	addi	sp,sp,8
  d0ce0c:	f800283a 	ret

00d0ce10 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  d0ce10:	defffe04 	addi	sp,sp,-8
  d0ce14:	df000115 	stw	fp,4(sp)
  d0ce18:	df000104 	addi	fp,sp,4
  d0ce1c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  d0ce20:	e0bfff17 	ldw	r2,-4(fp)
  d0ce24:	108000d0 	cmplti	r2,r2,3
  d0ce28:	10000d1e 	bne	r2,zero,d0ce60 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  d0ce2c:	e0bfff17 	ldw	r2,-4(fp)
  d0ce30:	00c03474 	movhi	r3,209
  d0ce34:	18c72804 	addi	r3,r3,7328
  d0ce38:	10800324 	muli	r2,r2,12
  d0ce3c:	10c5883a 	add	r2,r2,r3
  d0ce40:	10800204 	addi	r2,r2,8
  d0ce44:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  d0ce48:	e0bfff17 	ldw	r2,-4(fp)
  d0ce4c:	00c03474 	movhi	r3,209
  d0ce50:	18c72804 	addi	r3,r3,7328
  d0ce54:	10800324 	muli	r2,r2,12
  d0ce58:	10c5883a 	add	r2,r2,r3
  d0ce5c:	10000015 	stw	zero,0(r2)
  }
}
  d0ce60:	e037883a 	mov	sp,fp
  d0ce64:	df000017 	ldw	fp,0(sp)
  d0ce68:	dec00104 	addi	sp,sp,4
  d0ce6c:	f800283a 	ret

00d0ce70 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  d0ce70:	defff804 	addi	sp,sp,-32
  d0ce74:	df000715 	stw	fp,28(sp)
  d0ce78:	df000704 	addi	fp,sp,28
  d0ce7c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  d0ce80:	0005303a 	rdctl	r2,status
  d0ce84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  d0ce88:	e0fffb17 	ldw	r3,-20(fp)
  d0ce8c:	00bfff84 	movi	r2,-2
  d0ce90:	1884703a 	and	r2,r3,r2
  d0ce94:	1001703a 	wrctl	status,r2
  
  return context;
  d0ce98:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  d0ce9c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  d0cea0:	d0a01417 	ldw	r2,-32688(gp)
  d0cea4:	10c000c4 	addi	r3,r2,3
  d0cea8:	00bfff04 	movi	r2,-4
  d0ceac:	1884703a 	and	r2,r3,r2
  d0ceb0:	d0a01415 	stw	r2,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  d0ceb4:	d0e01417 	ldw	r3,-32688(gp)
  d0ceb8:	e0bffe17 	ldw	r2,-8(fp)
  d0cebc:	1887883a 	add	r3,r3,r2
  d0cec0:	00803974 	movhi	r2,229
  d0cec4:	10800004 	addi	r2,r2,0
  d0cec8:	10c0072e 	bgeu	r2,r3,d0cee8 <sbrk+0x78>
  d0cecc:	e0bffd17 	ldw	r2,-12(fp)
  d0ced0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  d0ced4:	e0bffa17 	ldw	r2,-24(fp)
  d0ced8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  d0cedc:	00bfffc4 	movi	r2,-1
  d0cee0:	e0bfff15 	stw	r2,-4(fp)
  d0cee4:	00000c06 	br	d0cf18 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  d0cee8:	d0a01417 	ldw	r2,-32688(gp)
  d0ceec:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  d0cef0:	d0e01417 	ldw	r3,-32688(gp)
  d0cef4:	e0bffe17 	ldw	r2,-8(fp)
  d0cef8:	1885883a 	add	r2,r3,r2
  d0cefc:	d0a01415 	stw	r2,-32688(gp)
  d0cf00:	e0bffd17 	ldw	r2,-12(fp)
  d0cf04:	e0bff915 	stw	r2,-28(fp)
  d0cf08:	e0bff917 	ldw	r2,-28(fp)
  d0cf0c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  d0cf10:	e0bffc17 	ldw	r2,-16(fp)
  d0cf14:	e0bfff15 	stw	r2,-4(fp)
  d0cf18:	e0bfff17 	ldw	r2,-4(fp)
} 
  d0cf1c:	e037883a 	mov	sp,fp
  d0cf20:	df000017 	ldw	fp,0(sp)
  d0cf24:	dec00104 	addi	sp,sp,4
  d0cf28:	f800283a 	ret

00d0cf2c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  d0cf2c:	defff704 	addi	sp,sp,-36
  d0cf30:	dfc00815 	stw	ra,32(sp)
  d0cf34:	df000715 	stw	fp,28(sp)
  d0cf38:	df000704 	addi	fp,sp,28
  d0cf3c:	e13ffb15 	stw	r4,-20(fp)
  d0cf40:	e17ffc15 	stw	r5,-16(fp)
  d0cf44:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  d0cf48:	e0bffb17 	ldw	r2,-20(fp)
  d0cf4c:	1004803a 	cmplt	r2,r2,zero
  d0cf50:	1000081e 	bne	r2,zero,d0cf74 <write+0x48>
  d0cf54:	e0bffb17 	ldw	r2,-20(fp)
  d0cf58:	10800324 	muli	r2,r2,12
  d0cf5c:	1007883a 	mov	r3,r2
  d0cf60:	00803474 	movhi	r2,209
  d0cf64:	10872804 	addi	r2,r2,7328
  d0cf68:	1887883a 	add	r3,r3,r2
  d0cf6c:	e0ffff15 	stw	r3,-4(fp)
  d0cf70:	00000106 	br	d0cf78 <write+0x4c>
  d0cf74:	e03fff15 	stw	zero,-4(fp)
  d0cf78:	e0bfff17 	ldw	r2,-4(fp)
  d0cf7c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  d0cf80:	e0bffa17 	ldw	r2,-24(fp)
  d0cf84:	1005003a 	cmpeq	r2,r2,zero
  d0cf88:	1000241e 	bne	r2,zero,d0d01c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  d0cf8c:	e0bffa17 	ldw	r2,-24(fp)
  d0cf90:	10800217 	ldw	r2,8(r2)
  d0cf94:	108000cc 	andi	r2,r2,3
  d0cf98:	1005003a 	cmpeq	r2,r2,zero
  d0cf9c:	10001a1e 	bne	r2,zero,d0d008 <write+0xdc>
  d0cfa0:	e0bffa17 	ldw	r2,-24(fp)
  d0cfa4:	10800017 	ldw	r2,0(r2)
  d0cfa8:	10800617 	ldw	r2,24(r2)
  d0cfac:	1005003a 	cmpeq	r2,r2,zero
  d0cfb0:	1000151e 	bne	r2,zero,d0d008 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  d0cfb4:	e0bffa17 	ldw	r2,-24(fp)
  d0cfb8:	10800017 	ldw	r2,0(r2)
  d0cfbc:	10800617 	ldw	r2,24(r2)
  d0cfc0:	e17ffc17 	ldw	r5,-16(fp)
  d0cfc4:	e1bffd17 	ldw	r6,-12(fp)
  d0cfc8:	e13ffa17 	ldw	r4,-24(fp)
  d0cfcc:	103ee83a 	callr	r2
  d0cfd0:	e0bff915 	stw	r2,-28(fp)
  d0cfd4:	e0bff917 	ldw	r2,-28(fp)
  d0cfd8:	1004403a 	cmpge	r2,r2,zero
  d0cfdc:	1000071e 	bne	r2,zero,d0cffc <write+0xd0>
      {
        ALT_ERRNO = -rval;
  d0cfe0:	0d0d04c0 	call	d0d04c <alt_get_errno>
  d0cfe4:	e0fff917 	ldw	r3,-28(fp)
  d0cfe8:	00c7c83a 	sub	r3,zero,r3
  d0cfec:	10c00015 	stw	r3,0(r2)
        return -1;
  d0cff0:	00bfffc4 	movi	r2,-1
  d0cff4:	e0bffe15 	stw	r2,-8(fp)
  d0cff8:	00000e06 	br	d0d034 <write+0x108>
      }
      return rval;
  d0cffc:	e0bff917 	ldw	r2,-28(fp)
  d0d000:	e0bffe15 	stw	r2,-8(fp)
  d0d004:	00000b06 	br	d0d034 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  d0d008:	0d0d04c0 	call	d0d04c <alt_get_errno>
  d0d00c:	1007883a 	mov	r3,r2
  d0d010:	00800344 	movi	r2,13
  d0d014:	18800015 	stw	r2,0(r3)
  d0d018:	00000406 	br	d0d02c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  d0d01c:	0d0d04c0 	call	d0d04c <alt_get_errno>
  d0d020:	1007883a 	mov	r3,r2
  d0d024:	00801444 	movi	r2,81
  d0d028:	18800015 	stw	r2,0(r3)
  }
  return -1;
  d0d02c:	00bfffc4 	movi	r2,-1
  d0d030:	e0bffe15 	stw	r2,-8(fp)
  d0d034:	e0bffe17 	ldw	r2,-8(fp)
}
  d0d038:	e037883a 	mov	sp,fp
  d0d03c:	dfc00117 	ldw	ra,4(sp)
  d0d040:	df000017 	ldw	fp,0(sp)
  d0d044:	dec00204 	addi	sp,sp,8
  d0d048:	f800283a 	ret

00d0d04c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0d04c:	defffd04 	addi	sp,sp,-12
  d0d050:	dfc00215 	stw	ra,8(sp)
  d0d054:	df000115 	stw	fp,4(sp)
  d0d058:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0d05c:	00803474 	movhi	r2,209
  d0d060:	108c0404 	addi	r2,r2,12304
  d0d064:	10800017 	ldw	r2,0(r2)
  d0d068:	1005003a 	cmpeq	r2,r2,zero
  d0d06c:	1000061e 	bne	r2,zero,d0d088 <alt_get_errno+0x3c>
  d0d070:	00803474 	movhi	r2,209
  d0d074:	108c0404 	addi	r2,r2,12304
  d0d078:	10800017 	ldw	r2,0(r2)
  d0d07c:	103ee83a 	callr	r2
  d0d080:	e0bfff15 	stw	r2,-4(fp)
  d0d084:	00000306 	br	d0d094 <alt_get_errno+0x48>
  d0d088:	00803474 	movhi	r2,209
  d0d08c:	10930a04 	addi	r2,r2,19496
  d0d090:	e0bfff15 	stw	r2,-4(fp)
  d0d094:	e0bfff17 	ldw	r2,-4(fp)
}
  d0d098:	e037883a 	mov	sp,fp
  d0d09c:	dfc00117 	ldw	ra,4(sp)
  d0d0a0:	df000017 	ldw	fp,0(sp)
  d0d0a4:	dec00204 	addi	sp,sp,8
  d0d0a8:	f800283a 	ret

00d0d0ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  d0d0ac:	defffd04 	addi	sp,sp,-12
  d0d0b0:	dfc00215 	stw	ra,8(sp)
  d0d0b4:	df000115 	stw	fp,4(sp)
  d0d0b8:	df000104 	addi	fp,sp,4
  d0d0bc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_2, cpu_2);
  d0d0c0:	0d1087c0 	call	d1087c <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  d0d0c4:	00800044 	movi	r2,1
  d0d0c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  d0d0cc:	e037883a 	mov	sp,fp
  d0d0d0:	dfc00117 	ldw	ra,4(sp)
  d0d0d4:	df000017 	ldw	fp,0(sp)
  d0d0d8:	dec00204 	addi	sp,sp,8
  d0d0dc:	f800283a 	ret

00d0d0e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  d0d0e0:	defffd04 	addi	sp,sp,-12
  d0d0e4:	dfc00215 	stw	ra,8(sp)
  d0d0e8:	df000115 	stw	fp,4(sp)
  d0d0ec:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_2, jtag_uart_2);
  d0d0f0:	01003474 	movhi	r4,209
  d0d0f4:	21079204 	addi	r4,r4,7752
  d0d0f8:	000b883a 	mov	r5,zero
  d0d0fc:	01800044 	movi	r6,1
  d0d100:	0d0d4d80 	call	d0d4d8 <altera_avalon_jtag_uart_init>
  d0d104:	01003474 	movhi	r4,209
  d0d108:	21078804 	addi	r4,r4,7712
  d0d10c:	0d0d3580 	call	d0d358 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_0, mailbox_0);
  d0d110:	01003474 	movhi	r4,209
  d0d114:	210ba004 	addi	r4,r4,11904
  d0d118:	0d0de3c0 	call	d0de3c <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_1, mailbox_1);
  d0d11c:	01003474 	movhi	r4,209
  d0d120:	210baf04 	addi	r4,r4,11964
  d0d124:	0d0de3c0 	call	d0de3c <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_2, mailbox_2);
  d0d128:	01003474 	movhi	r4,209
  d0d12c:	210bbe04 	addi	r4,r4,12024
  d0d130:	0d0de3c0 	call	d0de3c <alt_avalon_mailbox_init>
    ALTERA_AVALON_MAILBOX_INIT ( MAILBOX_3, mailbox_3);
  d0d134:	01003474 	movhi	r4,209
  d0d138:	210bcd04 	addi	r4,r4,12084
  d0d13c:	0d0de3c0 	call	d0de3c <alt_avalon_mailbox_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
  d0d140:	0007883a 	mov	r3,zero
  d0d144:	00800044 	movi	r2,1
  d0d148:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  d0d14c:	00803474 	movhi	r2,209
  d0d150:	108bdc04 	addi	r2,r2,12144
  d0d154:	10800a17 	ldw	r2,40(r2)
  d0d158:	10800017 	ldw	r2,0(r2)
  d0d15c:	1007883a 	mov	r3,r2
  d0d160:	00803474 	movhi	r2,209
  d0d164:	108bdc04 	addi	r2,r2,12144
  d0d168:	10c00b15 	stw	r3,44(r2)
  d0d16c:	00803474 	movhi	r2,209
  d0d170:	108bdc04 	addi	r2,r2,12144
  d0d174:	10800a17 	ldw	r2,40(r2)
  d0d178:	10800104 	addi	r2,r2,4
  d0d17c:	10800017 	ldw	r2,0(r2)
  d0d180:	1007883a 	mov	r3,r2
  d0d184:	00803474 	movhi	r2,209
  d0d188:	108bdc04 	addi	r2,r2,12144
  d0d18c:	10c00c15 	stw	r3,48(r2)
  d0d190:	00803474 	movhi	r2,209
  d0d194:	108bdc04 	addi	r2,r2,12144
  d0d198:	10800a17 	ldw	r2,40(r2)
  d0d19c:	10800204 	addi	r2,r2,8
  d0d1a0:	10800017 	ldw	r2,0(r2)
  d0d1a4:	10ffffcc 	andi	r3,r2,65535
  d0d1a8:	00803474 	movhi	r2,209
  d0d1ac:	108bdc04 	addi	r2,r2,12144
  d0d1b0:	10c00f15 	stw	r3,60(r2)
  d0d1b4:	00803474 	movhi	r2,209
  d0d1b8:	108bdc04 	addi	r2,r2,12144
  d0d1bc:	10800a17 	ldw	r2,40(r2)
  d0d1c0:	10800204 	addi	r2,r2,8
  d0d1c4:	10800017 	ldw	r2,0(r2)
  d0d1c8:	1005d43a 	srai	r2,r2,16
  d0d1cc:	10ffffcc 	andi	r3,r2,65535
  d0d1d0:	00803474 	movhi	r2,209
  d0d1d4:	108bdc04 	addi	r2,r2,12144
  d0d1d8:	10c01015 	stw	r3,64(r2)
  d0d1dc:	00803474 	movhi	r2,209
  d0d1e0:	108bdc04 	addi	r2,r2,12144
  d0d1e4:	10800a17 	ldw	r2,40(r2)
  d0d1e8:	10800304 	addi	r2,r2,12
  d0d1ec:	10800017 	ldw	r2,0(r2)
  d0d1f0:	1005d07a 	srai	r2,r2,1
  d0d1f4:	10c0004c 	andi	r3,r2,1
  d0d1f8:	00803474 	movhi	r2,209
  d0d1fc:	108bdc04 	addi	r2,r2,12144
  d0d200:	10c00d15 	stw	r3,52(r2)
  d0d204:	00803474 	movhi	r2,209
  d0d208:	108bdc04 	addi	r2,r2,12144
  d0d20c:	10800a17 	ldw	r2,40(r2)
  d0d210:	10800304 	addi	r2,r2,12
  d0d214:	10800017 	ldw	r2,0(r2)
  d0d218:	1005d13a 	srai	r2,r2,4
  d0d21c:	10c003cc 	andi	r3,r2,15
  d0d220:	00803474 	movhi	r2,209
  d0d224:	108bdc04 	addi	r2,r2,12144
  d0d228:	10c00e15 	stw	r3,56(r2)
  d0d22c:	00803474 	movhi	r2,209
  d0d230:	108bdc04 	addi	r2,r2,12144
  d0d234:	10800a17 	ldw	r2,40(r2)
  d0d238:	10800304 	addi	r2,r2,12
  d0d23c:	10800017 	ldw	r2,0(r2)
  d0d240:	1005d43a 	srai	r2,r2,16
  d0d244:	1007883a 	mov	r3,r2
  d0d248:	00bfffc4 	movi	r2,-1
  d0d24c:	1884703a 	and	r2,r3,r2
  d0d250:	e0bfff45 	stb	r2,-3(fp)
  d0d254:	00803474 	movhi	r2,209
  d0d258:	108bdc04 	addi	r2,r2,12144
  d0d25c:	10800a17 	ldw	r2,40(r2)
  d0d260:	10800304 	addi	r2,r2,12
  d0d264:	10800017 	ldw	r2,0(r2)
  d0d268:	1005d63a 	srai	r2,r2,24
  d0d26c:	1007883a 	mov	r3,r2
  d0d270:	00bfffc4 	movi	r2,-1
  d0d274:	1884703a 	and	r2,r3,r2
  d0d278:	e0bfff05 	stb	r2,-4(fp)
  d0d27c:	00803474 	movhi	r2,209
  d0d280:	108bdc04 	addi	r2,r2,12144
  d0d284:	10800e17 	ldw	r2,56(r2)
  d0d288:	10800058 	cmpnei	r2,r2,1
  d0d28c:	1000041e 	bne	r2,zero,d0d2a0 <alt_sys_init+0x1c0>
  d0d290:	00803474 	movhi	r2,209
  d0d294:	108bdc04 	addi	r2,r2,12144
  d0d298:	10001115 	stw	zero,68(r2)
  d0d29c:	00000e06 	br	d0d2d8 <alt_sys_init+0x1f8>
  d0d2a0:	00803474 	movhi	r2,209
  d0d2a4:	108bdc04 	addi	r2,r2,12144
  d0d2a8:	10800e17 	ldw	r2,56(r2)
  d0d2ac:	10800098 	cmpnei	r2,r2,2
  d0d2b0:	1000051e 	bne	r2,zero,d0d2c8 <alt_sys_init+0x1e8>
  d0d2b4:	00c03474 	movhi	r3,209
  d0d2b8:	18cbdc04 	addi	r3,r3,12144
  d0d2bc:	00800044 	movi	r2,1
  d0d2c0:	18801115 	stw	r2,68(r3)
  d0d2c4:	00000406 	br	d0d2d8 <alt_sys_init+0x1f8>
  d0d2c8:	00c03474 	movhi	r3,209
  d0d2cc:	18cbdc04 	addi	r3,r3,12144
  d0d2d0:	00800084 	movi	r2,2
  d0d2d4:	18801115 	stw	r2,68(r3)
  d0d2d8:	e0ffff43 	ldbu	r3,-3(fp)
  d0d2dc:	00800804 	movi	r2,32
  d0d2e0:	10c7c83a 	sub	r3,r2,r3
  d0d2e4:	00bfffc4 	movi	r2,-1
  d0d2e8:	10c6d83a 	srl	r3,r2,r3
  d0d2ec:	00803474 	movhi	r2,209
  d0d2f0:	108bdc04 	addi	r2,r2,12144
  d0d2f4:	10c01215 	stw	r3,72(r2)
  d0d2f8:	e0ffff43 	ldbu	r3,-3(fp)
  d0d2fc:	00803474 	movhi	r2,209
  d0d300:	108bdc04 	addi	r2,r2,12144
  d0d304:	10801117 	ldw	r2,68(r2)
  d0d308:	1887883a 	add	r3,r3,r2
  d0d30c:	00803474 	movhi	r2,209
  d0d310:	108bdc04 	addi	r2,r2,12144
  d0d314:	10c01315 	stw	r3,76(r2)
  d0d318:	e0ffff03 	ldbu	r3,-4(fp)
  d0d31c:	00800804 	movi	r2,32
  d0d320:	10c7c83a 	sub	r3,r2,r3
  d0d324:	00bfffc4 	movi	r2,-1
  d0d328:	10c6d83a 	srl	r3,r2,r3
  d0d32c:	00803474 	movhi	r2,209
  d0d330:	108bdc04 	addi	r2,r2,12144
  d0d334:	10c01415 	stw	r3,80(r2)
  d0d338:	01003474 	movhi	r4,209
  d0d33c:	210bdc04 	addi	r4,r4,12144
  d0d340:	0d0d3580 	call	d0d358 <alt_dev_reg>
}
  d0d344:	e037883a 	mov	sp,fp
  d0d348:	dfc00117 	ldw	ra,4(sp)
  d0d34c:	df000017 	ldw	fp,0(sp)
  d0d350:	dec00204 	addi	sp,sp,8
  d0d354:	f800283a 	ret

00d0d358 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  d0d358:	defffd04 	addi	sp,sp,-12
  d0d35c:	dfc00215 	stw	ra,8(sp)
  d0d360:	df000115 	stw	fp,4(sp)
  d0d364:	df000104 	addi	fp,sp,4
  d0d368:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  d0d36c:	e13fff17 	ldw	r4,-4(fp)
  d0d370:	01403474 	movhi	r5,209
  d0d374:	294c0104 	addi	r5,r5,12292
  d0d378:	0d0fd6c0 	call	d0fd6c <alt_dev_llist_insert>
}
  d0d37c:	e037883a 	mov	sp,fp
  d0d380:	dfc00117 	ldw	ra,4(sp)
  d0d384:	df000017 	ldw	fp,0(sp)
  d0d388:	dec00204 	addi	sp,sp,8
  d0d38c:	f800283a 	ret

00d0d390 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  d0d390:	defffa04 	addi	sp,sp,-24
  d0d394:	dfc00515 	stw	ra,20(sp)
  d0d398:	df000415 	stw	fp,16(sp)
  d0d39c:	df000404 	addi	fp,sp,16
  d0d3a0:	e13ffd15 	stw	r4,-12(fp)
  d0d3a4:	e17ffe15 	stw	r5,-8(fp)
  d0d3a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  d0d3ac:	e0bffd17 	ldw	r2,-12(fp)
  d0d3b0:	10800017 	ldw	r2,0(r2)
  d0d3b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  d0d3b8:	e0bffc17 	ldw	r2,-16(fp)
  d0d3bc:	11000a04 	addi	r4,r2,40
  d0d3c0:	e0bffd17 	ldw	r2,-12(fp)
  d0d3c4:	11c00217 	ldw	r7,8(r2)
  d0d3c8:	e17ffe17 	ldw	r5,-8(fp)
  d0d3cc:	e1bfff17 	ldw	r6,-4(fp)
  d0d3d0:	0d0d9d80 	call	d0d9d8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  d0d3d4:	e037883a 	mov	sp,fp
  d0d3d8:	dfc00117 	ldw	ra,4(sp)
  d0d3dc:	df000017 	ldw	fp,0(sp)
  d0d3e0:	dec00204 	addi	sp,sp,8
  d0d3e4:	f800283a 	ret

00d0d3e8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  d0d3e8:	defffa04 	addi	sp,sp,-24
  d0d3ec:	dfc00515 	stw	ra,20(sp)
  d0d3f0:	df000415 	stw	fp,16(sp)
  d0d3f4:	df000404 	addi	fp,sp,16
  d0d3f8:	e13ffd15 	stw	r4,-12(fp)
  d0d3fc:	e17ffe15 	stw	r5,-8(fp)
  d0d400:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  d0d404:	e0bffd17 	ldw	r2,-12(fp)
  d0d408:	10800017 	ldw	r2,0(r2)
  d0d40c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  d0d410:	e0bffc17 	ldw	r2,-16(fp)
  d0d414:	11000a04 	addi	r4,r2,40
  d0d418:	e0bffd17 	ldw	r2,-12(fp)
  d0d41c:	11c00217 	ldw	r7,8(r2)
  d0d420:	e17ffe17 	ldw	r5,-8(fp)
  d0d424:	e1bfff17 	ldw	r6,-4(fp)
  d0d428:	0d0dbfc0 	call	d0dbfc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  d0d42c:	e037883a 	mov	sp,fp
  d0d430:	dfc00117 	ldw	ra,4(sp)
  d0d434:	df000017 	ldw	fp,0(sp)
  d0d438:	dec00204 	addi	sp,sp,8
  d0d43c:	f800283a 	ret

00d0d440 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  d0d440:	defffc04 	addi	sp,sp,-16
  d0d444:	dfc00315 	stw	ra,12(sp)
  d0d448:	df000215 	stw	fp,8(sp)
  d0d44c:	df000204 	addi	fp,sp,8
  d0d450:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  d0d454:	e0bfff17 	ldw	r2,-4(fp)
  d0d458:	10800017 	ldw	r2,0(r2)
  d0d45c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  d0d460:	e0bffe17 	ldw	r2,-8(fp)
  d0d464:	11000a04 	addi	r4,r2,40
  d0d468:	e0bfff17 	ldw	r2,-4(fp)
  d0d46c:	11400217 	ldw	r5,8(r2)
  d0d470:	0d0d8700 	call	d0d870 <altera_avalon_jtag_uart_close>
}
  d0d474:	e037883a 	mov	sp,fp
  d0d478:	dfc00117 	ldw	ra,4(sp)
  d0d47c:	df000017 	ldw	fp,0(sp)
  d0d480:	dec00204 	addi	sp,sp,8
  d0d484:	f800283a 	ret

00d0d488 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  d0d488:	defffa04 	addi	sp,sp,-24
  d0d48c:	dfc00515 	stw	ra,20(sp)
  d0d490:	df000415 	stw	fp,16(sp)
  d0d494:	df000404 	addi	fp,sp,16
  d0d498:	e13ffd15 	stw	r4,-12(fp)
  d0d49c:	e17ffe15 	stw	r5,-8(fp)
  d0d4a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  d0d4a4:	e0bffd17 	ldw	r2,-12(fp)
  d0d4a8:	10800017 	ldw	r2,0(r2)
  d0d4ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  d0d4b0:	e0bffc17 	ldw	r2,-16(fp)
  d0d4b4:	11000a04 	addi	r4,r2,40
  d0d4b8:	e17ffe17 	ldw	r5,-8(fp)
  d0d4bc:	e1bfff17 	ldw	r6,-4(fp)
  d0d4c0:	0d0d8e40 	call	d0d8e4 <altera_avalon_jtag_uart_ioctl>
}
  d0d4c4:	e037883a 	mov	sp,fp
  d0d4c8:	dfc00117 	ldw	ra,4(sp)
  d0d4cc:	df000017 	ldw	fp,0(sp)
  d0d4d0:	dec00204 	addi	sp,sp,8
  d0d4d4:	f800283a 	ret

00d0d4d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  d0d4d8:	defffa04 	addi	sp,sp,-24
  d0d4dc:	dfc00515 	stw	ra,20(sp)
  d0d4e0:	df000415 	stw	fp,16(sp)
  d0d4e4:	df000404 	addi	fp,sp,16
  d0d4e8:	e13ffd15 	stw	r4,-12(fp)
  d0d4ec:	e17ffe15 	stw	r5,-8(fp)
  d0d4f0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  d0d4f4:	e0fffd17 	ldw	r3,-12(fp)
  d0d4f8:	00800044 	movi	r2,1
  d0d4fc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  d0d500:	e0bffd17 	ldw	r2,-12(fp)
  d0d504:	10800017 	ldw	r2,0(r2)
  d0d508:	11000104 	addi	r4,r2,4
  d0d50c:	e0bffd17 	ldw	r2,-12(fp)
  d0d510:	10800817 	ldw	r2,32(r2)
  d0d514:	1007883a 	mov	r3,r2
  d0d518:	2005883a 	mov	r2,r4
  d0d51c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  d0d520:	e13ffe17 	ldw	r4,-8(fp)
  d0d524:	e17fff17 	ldw	r5,-4(fp)
  d0d528:	d8000015 	stw	zero,0(sp)
  d0d52c:	01803474 	movhi	r6,209
  d0d530:	31b56604 	addi	r6,r6,-10856
  d0d534:	e1fffd17 	ldw	r7,-12(fp)
  d0d538:	0d1000c0 	call	d1000c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  d0d53c:	e0bffd17 	ldw	r2,-12(fp)
  d0d540:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  d0d544:	e0bffd17 	ldw	r2,-12(fp)
  d0d548:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  d0d54c:	00803474 	movhi	r2,209
  d0d550:	10930f04 	addi	r2,r2,19516
  d0d554:	10800017 	ldw	r2,0(r2)
  d0d558:	100b883a 	mov	r5,r2
  d0d55c:	01803474 	movhi	r6,209
  d0d560:	31b5f004 	addi	r6,r6,-10304
  d0d564:	e1fffd17 	ldw	r7,-12(fp)
  d0d568:	0d0fbd40 	call	d0fbd4 <alt_alarm_start>
  d0d56c:	1004403a 	cmpge	r2,r2,zero
  d0d570:	1000041e 	bne	r2,zero,d0d584 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  d0d574:	e0fffd17 	ldw	r3,-12(fp)
  d0d578:	00a00034 	movhi	r2,32768
  d0d57c:	10bfffc4 	addi	r2,r2,-1
  d0d580:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  d0d584:	e037883a 	mov	sp,fp
  d0d588:	dfc00117 	ldw	ra,4(sp)
  d0d58c:	df000017 	ldw	fp,0(sp)
  d0d590:	dec00204 	addi	sp,sp,8
  d0d594:	f800283a 	ret

00d0d598 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  d0d598:	defff804 	addi	sp,sp,-32
  d0d59c:	df000715 	stw	fp,28(sp)
  d0d5a0:	df000704 	addi	fp,sp,28
  d0d5a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  d0d5a8:	e0bfff17 	ldw	r2,-4(fp)
  d0d5ac:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  d0d5b0:	e0bffe17 	ldw	r2,-8(fp)
  d0d5b4:	10800017 	ldw	r2,0(r2)
  d0d5b8:	e0bffd15 	stw	r2,-12(fp)
  d0d5bc:	00000006 	br	d0d5c0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  d0d5c0:	e0bffd17 	ldw	r2,-12(fp)
  d0d5c4:	10800104 	addi	r2,r2,4
  d0d5c8:	10800037 	ldwio	r2,0(r2)
  d0d5cc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  d0d5d0:	e0bffc17 	ldw	r2,-16(fp)
  d0d5d4:	1080c00c 	andi	r2,r2,768
  d0d5d8:	1005003a 	cmpeq	r2,r2,zero
  d0d5dc:	1000741e 	bne	r2,zero,d0d7b0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  d0d5e0:	e0bffc17 	ldw	r2,-16(fp)
  d0d5e4:	1080400c 	andi	r2,r2,256
  d0d5e8:	1005003a 	cmpeq	r2,r2,zero
  d0d5ec:	1000351e 	bne	r2,zero,d0d6c4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  d0d5f0:	00800074 	movhi	r2,1
  d0d5f4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  d0d5f8:	e0bffe17 	ldw	r2,-8(fp)
  d0d5fc:	10800a17 	ldw	r2,40(r2)
  d0d600:	10800044 	addi	r2,r2,1
  d0d604:	1081ffcc 	andi	r2,r2,2047
  d0d608:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  d0d60c:	e0bffe17 	ldw	r2,-8(fp)
  d0d610:	10c00b17 	ldw	r3,44(r2)
  d0d614:	e0bffa17 	ldw	r2,-24(fp)
  d0d618:	18801626 	beq	r3,r2,d0d674 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  d0d61c:	e0bffd17 	ldw	r2,-12(fp)
  d0d620:	10800037 	ldwio	r2,0(r2)
  d0d624:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  d0d628:	e0bffb17 	ldw	r2,-20(fp)
  d0d62c:	10a0000c 	andi	r2,r2,32768
  d0d630:	1005003a 	cmpeq	r2,r2,zero
  d0d634:	10000f1e 	bne	r2,zero,d0d674 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  d0d638:	e0bffe17 	ldw	r2,-8(fp)
  d0d63c:	10c00a17 	ldw	r3,40(r2)
  d0d640:	e0bffb17 	ldw	r2,-20(fp)
  d0d644:	1009883a 	mov	r4,r2
  d0d648:	e0bffe17 	ldw	r2,-8(fp)
  d0d64c:	1885883a 	add	r2,r3,r2
  d0d650:	10800e04 	addi	r2,r2,56
  d0d654:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  d0d658:	e0bffe17 	ldw	r2,-8(fp)
  d0d65c:	10800a17 	ldw	r2,40(r2)
  d0d660:	10800044 	addi	r2,r2,1
  d0d664:	10c1ffcc 	andi	r3,r2,2047
  d0d668:	e0bffe17 	ldw	r2,-8(fp)
  d0d66c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  d0d670:	003fe106 	br	d0d5f8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  d0d674:	e0bffb17 	ldw	r2,-20(fp)
  d0d678:	10bfffec 	andhi	r2,r2,65535
  d0d67c:	1005003a 	cmpeq	r2,r2,zero
  d0d680:	1000101e 	bne	r2,zero,d0d6c4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  d0d684:	e0bffe17 	ldw	r2,-8(fp)
  d0d688:	10c00817 	ldw	r3,32(r2)
  d0d68c:	00bfff84 	movi	r2,-2
  d0d690:	1886703a 	and	r3,r3,r2
  d0d694:	e0bffe17 	ldw	r2,-8(fp)
  d0d698:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  d0d69c:	e0bffd17 	ldw	r2,-12(fp)
  d0d6a0:	11000104 	addi	r4,r2,4
  d0d6a4:	e0bffe17 	ldw	r2,-8(fp)
  d0d6a8:	10800817 	ldw	r2,32(r2)
  d0d6ac:	1007883a 	mov	r3,r2
  d0d6b0:	2005883a 	mov	r2,r4
  d0d6b4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  d0d6b8:	e0bffd17 	ldw	r2,-12(fp)
  d0d6bc:	10800104 	addi	r2,r2,4
  d0d6c0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  d0d6c4:	e0bffc17 	ldw	r2,-16(fp)
  d0d6c8:	1080800c 	andi	r2,r2,512
  d0d6cc:	1005003a 	cmpeq	r2,r2,zero
  d0d6d0:	103fbb1e 	bne	r2,zero,d0d5c0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  d0d6d4:	e0bffc17 	ldw	r2,-16(fp)
  d0d6d8:	10bfffec 	andhi	r2,r2,65535
  d0d6dc:	1004d43a 	srli	r2,r2,16
  d0d6e0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  d0d6e4:	00001506 	br	d0d73c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  d0d6e8:	e13ffd17 	ldw	r4,-12(fp)
  d0d6ec:	e0bffe17 	ldw	r2,-8(fp)
  d0d6f0:	10c00d17 	ldw	r3,52(r2)
  d0d6f4:	e0bffe17 	ldw	r2,-8(fp)
  d0d6f8:	1885883a 	add	r2,r3,r2
  d0d6fc:	10820e04 	addi	r2,r2,2104
  d0d700:	10800003 	ldbu	r2,0(r2)
  d0d704:	10c03fcc 	andi	r3,r2,255
  d0d708:	18c0201c 	xori	r3,r3,128
  d0d70c:	18ffe004 	addi	r3,r3,-128
  d0d710:	2005883a 	mov	r2,r4
  d0d714:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  d0d718:	e0bffe17 	ldw	r2,-8(fp)
  d0d71c:	10800d17 	ldw	r2,52(r2)
  d0d720:	10800044 	addi	r2,r2,1
  d0d724:	10c1ffcc 	andi	r3,r2,2047
  d0d728:	e0bffe17 	ldw	r2,-8(fp)
  d0d72c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  d0d730:	e0bff917 	ldw	r2,-28(fp)
  d0d734:	10bfffc4 	addi	r2,r2,-1
  d0d738:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  d0d73c:	e0bff917 	ldw	r2,-28(fp)
  d0d740:	1005003a 	cmpeq	r2,r2,zero
  d0d744:	1000051e 	bne	r2,zero,d0d75c <altera_avalon_jtag_uart_irq+0x1c4>
  d0d748:	e0bffe17 	ldw	r2,-8(fp)
  d0d74c:	10c00d17 	ldw	r3,52(r2)
  d0d750:	e0bffe17 	ldw	r2,-8(fp)
  d0d754:	10800c17 	ldw	r2,48(r2)
  d0d758:	18bfe31e 	bne	r3,r2,d0d6e8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  d0d75c:	e0bff917 	ldw	r2,-28(fp)
  d0d760:	1005003a 	cmpeq	r2,r2,zero
  d0d764:	103f961e 	bne	r2,zero,d0d5c0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  d0d768:	e0bffe17 	ldw	r2,-8(fp)
  d0d76c:	10c00817 	ldw	r3,32(r2)
  d0d770:	00bfff44 	movi	r2,-3
  d0d774:	1886703a 	and	r3,r3,r2
  d0d778:	e0bffe17 	ldw	r2,-8(fp)
  d0d77c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  d0d780:	e0bffe17 	ldw	r2,-8(fp)
  d0d784:	10800017 	ldw	r2,0(r2)
  d0d788:	11000104 	addi	r4,r2,4
  d0d78c:	e0bffe17 	ldw	r2,-8(fp)
  d0d790:	10800817 	ldw	r2,32(r2)
  d0d794:	1007883a 	mov	r3,r2
  d0d798:	2005883a 	mov	r2,r4
  d0d79c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  d0d7a0:	e0bffd17 	ldw	r2,-12(fp)
  d0d7a4:	10800104 	addi	r2,r2,4
  d0d7a8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  d0d7ac:	003f8406 	br	d0d5c0 <altera_avalon_jtag_uart_irq+0x28>
}
  d0d7b0:	e037883a 	mov	sp,fp
  d0d7b4:	df000017 	ldw	fp,0(sp)
  d0d7b8:	dec00104 	addi	sp,sp,4
  d0d7bc:	f800283a 	ret

00d0d7c0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  d0d7c0:	defffc04 	addi	sp,sp,-16
  d0d7c4:	df000315 	stw	fp,12(sp)
  d0d7c8:	df000304 	addi	fp,sp,12
  d0d7cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  d0d7d0:	e0bfff17 	ldw	r2,-4(fp)
  d0d7d4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  d0d7d8:	e0bffe17 	ldw	r2,-8(fp)
  d0d7dc:	10800017 	ldw	r2,0(r2)
  d0d7e0:	10800104 	addi	r2,r2,4
  d0d7e4:	10800037 	ldwio	r2,0(r2)
  d0d7e8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  d0d7ec:	e0bffd17 	ldw	r2,-12(fp)
  d0d7f0:	1081000c 	andi	r2,r2,1024
  d0d7f4:	1005003a 	cmpeq	r2,r2,zero
  d0d7f8:	10000c1e 	bne	r2,zero,d0d82c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  d0d7fc:	e0bffe17 	ldw	r2,-8(fp)
  d0d800:	10800017 	ldw	r2,0(r2)
  d0d804:	11000104 	addi	r4,r2,4
  d0d808:	e0bffe17 	ldw	r2,-8(fp)
  d0d80c:	10800817 	ldw	r2,32(r2)
  d0d810:	10810014 	ori	r2,r2,1024
  d0d814:	1007883a 	mov	r3,r2
  d0d818:	2005883a 	mov	r2,r4
  d0d81c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  d0d820:	e0bffe17 	ldw	r2,-8(fp)
  d0d824:	10000915 	stw	zero,36(r2)
  d0d828:	00000a06 	br	d0d854 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  d0d82c:	e0bffe17 	ldw	r2,-8(fp)
  d0d830:	10c00917 	ldw	r3,36(r2)
  d0d834:	00a00034 	movhi	r2,32768
  d0d838:	10bfff04 	addi	r2,r2,-4
  d0d83c:	10c00536 	bltu	r2,r3,d0d854 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  d0d840:	e0bffe17 	ldw	r2,-8(fp)
  d0d844:	10800917 	ldw	r2,36(r2)
  d0d848:	10c00044 	addi	r3,r2,1
  d0d84c:	e0bffe17 	ldw	r2,-8(fp)
  d0d850:	10c00915 	stw	r3,36(r2)
  d0d854:	00803474 	movhi	r2,209
  d0d858:	10930f04 	addi	r2,r2,19516
  d0d85c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  d0d860:	e037883a 	mov	sp,fp
  d0d864:	df000017 	ldw	fp,0(sp)
  d0d868:	dec00104 	addi	sp,sp,4
  d0d86c:	f800283a 	ret

00d0d870 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  d0d870:	defffc04 	addi	sp,sp,-16
  d0d874:	df000315 	stw	fp,12(sp)
  d0d878:	df000304 	addi	fp,sp,12
  d0d87c:	e13ffd15 	stw	r4,-12(fp)
  d0d880:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  d0d884:	00000706 	br	d0d8a4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  d0d888:	e0bffe17 	ldw	r2,-8(fp)
  d0d88c:	1090000c 	andi	r2,r2,16384
  d0d890:	1005003a 	cmpeq	r2,r2,zero
  d0d894:	1000031e 	bne	r2,zero,d0d8a4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  d0d898:	00bffd44 	movi	r2,-11
  d0d89c:	e0bfff15 	stw	r2,-4(fp)
  d0d8a0:	00000b06 	br	d0d8d0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  d0d8a4:	e0bffd17 	ldw	r2,-12(fp)
  d0d8a8:	10c00d17 	ldw	r3,52(r2)
  d0d8ac:	e0bffd17 	ldw	r2,-12(fp)
  d0d8b0:	10800c17 	ldw	r2,48(r2)
  d0d8b4:	18800526 	beq	r3,r2,d0d8cc <altera_avalon_jtag_uart_close+0x5c>
  d0d8b8:	e0bffd17 	ldw	r2,-12(fp)
  d0d8bc:	10c00917 	ldw	r3,36(r2)
  d0d8c0:	e0bffd17 	ldw	r2,-12(fp)
  d0d8c4:	10800117 	ldw	r2,4(r2)
  d0d8c8:	18bfef36 	bltu	r3,r2,d0d888 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  d0d8cc:	e03fff15 	stw	zero,-4(fp)
  d0d8d0:	e0bfff17 	ldw	r2,-4(fp)
}
  d0d8d4:	e037883a 	mov	sp,fp
  d0d8d8:	df000017 	ldw	fp,0(sp)
  d0d8dc:	dec00104 	addi	sp,sp,4
  d0d8e0:	f800283a 	ret

00d0d8e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  d0d8e4:	defff804 	addi	sp,sp,-32
  d0d8e8:	df000715 	stw	fp,28(sp)
  d0d8ec:	df000704 	addi	fp,sp,28
  d0d8f0:	e13ffb15 	stw	r4,-20(fp)
  d0d8f4:	e17ffc15 	stw	r5,-16(fp)
  d0d8f8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  d0d8fc:	00bff9c4 	movi	r2,-25
  d0d900:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  d0d904:	e0bffc17 	ldw	r2,-16(fp)
  d0d908:	e0bfff15 	stw	r2,-4(fp)
  d0d90c:	e0ffff17 	ldw	r3,-4(fp)
  d0d910:	189a8060 	cmpeqi	r2,r3,27137
  d0d914:	1000041e 	bne	r2,zero,d0d928 <altera_avalon_jtag_uart_ioctl+0x44>
  d0d918:	e0ffff17 	ldw	r3,-4(fp)
  d0d91c:	189a80a0 	cmpeqi	r2,r3,27138
  d0d920:	10001b1e 	bne	r2,zero,d0d990 <altera_avalon_jtag_uart_ioctl+0xac>
  d0d924:	00002706 	br	d0d9c4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  d0d928:	e0bffb17 	ldw	r2,-20(fp)
  d0d92c:	10c00117 	ldw	r3,4(r2)
  d0d930:	00a00034 	movhi	r2,32768
  d0d934:	10bfffc4 	addi	r2,r2,-1
  d0d938:	18802226 	beq	r3,r2,d0d9c4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  d0d93c:	e0bffd17 	ldw	r2,-12(fp)
  d0d940:	10800017 	ldw	r2,0(r2)
  d0d944:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  d0d948:	e0bff917 	ldw	r2,-28(fp)
  d0d94c:	10800090 	cmplti	r2,r2,2
  d0d950:	1000071e 	bne	r2,zero,d0d970 <altera_avalon_jtag_uart_ioctl+0x8c>
  d0d954:	e0fff917 	ldw	r3,-28(fp)
  d0d958:	00a00034 	movhi	r2,32768
  d0d95c:	10bfffc4 	addi	r2,r2,-1
  d0d960:	18800326 	beq	r3,r2,d0d970 <altera_avalon_jtag_uart_ioctl+0x8c>
  d0d964:	e0bff917 	ldw	r2,-28(fp)
  d0d968:	e0bffe15 	stw	r2,-8(fp)
  d0d96c:	00000306 	br	d0d97c <altera_avalon_jtag_uart_ioctl+0x98>
  d0d970:	00e00034 	movhi	r3,32768
  d0d974:	18ffff84 	addi	r3,r3,-2
  d0d978:	e0fffe15 	stw	r3,-8(fp)
  d0d97c:	e0bffb17 	ldw	r2,-20(fp)
  d0d980:	e0fffe17 	ldw	r3,-8(fp)
  d0d984:	10c00115 	stw	r3,4(r2)
      rc = 0;
  d0d988:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  d0d98c:	00000d06 	br	d0d9c4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  d0d990:	e0bffb17 	ldw	r2,-20(fp)
  d0d994:	10c00117 	ldw	r3,4(r2)
  d0d998:	00a00034 	movhi	r2,32768
  d0d99c:	10bfffc4 	addi	r2,r2,-1
  d0d9a0:	18800826 	beq	r3,r2,d0d9c4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  d0d9a4:	e13ffd17 	ldw	r4,-12(fp)
  d0d9a8:	e0bffb17 	ldw	r2,-20(fp)
  d0d9ac:	10c00917 	ldw	r3,36(r2)
  d0d9b0:	e0bffb17 	ldw	r2,-20(fp)
  d0d9b4:	10800117 	ldw	r2,4(r2)
  d0d9b8:	1885803a 	cmpltu	r2,r3,r2
  d0d9bc:	20800015 	stw	r2,0(r4)
      rc = 0;
  d0d9c0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  d0d9c4:	e0bffa17 	ldw	r2,-24(fp)
}
  d0d9c8:	e037883a 	mov	sp,fp
  d0d9cc:	df000017 	ldw	fp,0(sp)
  d0d9d0:	dec00104 	addi	sp,sp,4
  d0d9d4:	f800283a 	ret

00d0d9d8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  d0d9d8:	defff204 	addi	sp,sp,-56
  d0d9dc:	dfc00d15 	stw	ra,52(sp)
  d0d9e0:	df000c15 	stw	fp,48(sp)
  d0d9e4:	df000c04 	addi	fp,sp,48
  d0d9e8:	e13ffb15 	stw	r4,-20(fp)
  d0d9ec:	e17ffc15 	stw	r5,-16(fp)
  d0d9f0:	e1bffd15 	stw	r6,-12(fp)
  d0d9f4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  d0d9f8:	e0bffc17 	ldw	r2,-16(fp)
  d0d9fc:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  d0da00:	00004806 	br	d0db24 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  d0da04:	e0bffb17 	ldw	r2,-20(fp)
  d0da08:	10800a17 	ldw	r2,40(r2)
  d0da0c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  d0da10:	e0bffb17 	ldw	r2,-20(fp)
  d0da14:	10800b17 	ldw	r2,44(r2)
  d0da18:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  d0da1c:	e0fff717 	ldw	r3,-36(fp)
  d0da20:	e0bff617 	ldw	r2,-40(fp)
  d0da24:	18800536 	bltu	r3,r2,d0da3c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  d0da28:	e0bff717 	ldw	r2,-36(fp)
  d0da2c:	e0fff617 	ldw	r3,-40(fp)
  d0da30:	10c5c83a 	sub	r2,r2,r3
  d0da34:	e0bff815 	stw	r2,-32(fp)
  d0da38:	00000406 	br	d0da4c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  d0da3c:	00820004 	movi	r2,2048
  d0da40:	e0fff617 	ldw	r3,-40(fp)
  d0da44:	10c5c83a 	sub	r2,r2,r3
  d0da48:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  d0da4c:	e0bff817 	ldw	r2,-32(fp)
  d0da50:	1005003a 	cmpeq	r2,r2,zero
  d0da54:	10001f1e 	bne	r2,zero,d0dad4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  d0da58:	e0fffd17 	ldw	r3,-12(fp)
  d0da5c:	e0bff817 	ldw	r2,-32(fp)
  d0da60:	1880022e 	bgeu	r3,r2,d0da6c <altera_avalon_jtag_uart_read+0x94>
        n = space;
  d0da64:	e0bffd17 	ldw	r2,-12(fp)
  d0da68:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  d0da6c:	e0bffb17 	ldw	r2,-20(fp)
  d0da70:	10c00e04 	addi	r3,r2,56
  d0da74:	e0bff617 	ldw	r2,-40(fp)
  d0da78:	1887883a 	add	r3,r3,r2
  d0da7c:	e0bffa17 	ldw	r2,-24(fp)
  d0da80:	1009883a 	mov	r4,r2
  d0da84:	180b883a 	mov	r5,r3
  d0da88:	e1bff817 	ldw	r6,-32(fp)
  d0da8c:	0d090300 	call	d09030 <memcpy>
      ptr   += n;
  d0da90:	e0fff817 	ldw	r3,-32(fp)
  d0da94:	e0bffa17 	ldw	r2,-24(fp)
  d0da98:	10c5883a 	add	r2,r2,r3
  d0da9c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  d0daa0:	e0fffd17 	ldw	r3,-12(fp)
  d0daa4:	e0bff817 	ldw	r2,-32(fp)
  d0daa8:	1885c83a 	sub	r2,r3,r2
  d0daac:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  d0dab0:	e0fff617 	ldw	r3,-40(fp)
  d0dab4:	e0bff817 	ldw	r2,-32(fp)
  d0dab8:	1885883a 	add	r2,r3,r2
  d0dabc:	10c1ffcc 	andi	r3,r2,2047
  d0dac0:	e0bffb17 	ldw	r2,-20(fp)
  d0dac4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  d0dac8:	e0bffd17 	ldw	r2,-12(fp)
  d0dacc:	10800048 	cmpgei	r2,r2,1
  d0dad0:	103fcc1e 	bne	r2,zero,d0da04 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  d0dad4:	e0fffa17 	ldw	r3,-24(fp)
  d0dad8:	e0bffc17 	ldw	r2,-16(fp)
  d0dadc:	1880141e 	bne	r3,r2,d0db30 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  d0dae0:	e0bffe17 	ldw	r2,-8(fp)
  d0dae4:	1090000c 	andi	r2,r2,16384
  d0dae8:	1004c03a 	cmpne	r2,r2,zero
  d0daec:	1000101e 	bne	r2,zero,d0db30 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  d0daf0:	e0bffb17 	ldw	r2,-20(fp)
  d0daf4:	10c00a17 	ldw	r3,40(r2)
  d0daf8:	e0bff717 	ldw	r2,-36(fp)
  d0dafc:	1880051e 	bne	r3,r2,d0db14 <altera_avalon_jtag_uart_read+0x13c>
  d0db00:	e0bffb17 	ldw	r2,-20(fp)
  d0db04:	10c00917 	ldw	r3,36(r2)
  d0db08:	e0bffb17 	ldw	r2,-20(fp)
  d0db0c:	10800117 	ldw	r2,4(r2)
  d0db10:	18bff736 	bltu	r3,r2,d0daf0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  d0db14:	e0bffb17 	ldw	r2,-20(fp)
  d0db18:	10c00a17 	ldw	r3,40(r2)
  d0db1c:	e0bff717 	ldw	r2,-36(fp)
  d0db20:	18800326 	beq	r3,r2,d0db30 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  d0db24:	e0bffd17 	ldw	r2,-12(fp)
  d0db28:	10800048 	cmpgei	r2,r2,1
  d0db2c:	103fb51e 	bne	r2,zero,d0da04 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  d0db30:	e0fffa17 	ldw	r3,-24(fp)
  d0db34:	e0bffc17 	ldw	r2,-16(fp)
  d0db38:	18801926 	beq	r3,r2,d0dba0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  d0db3c:	0005303a 	rdctl	r2,status
  d0db40:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  d0db44:	e0fff517 	ldw	r3,-44(fp)
  d0db48:	00bfff84 	movi	r2,-2
  d0db4c:	1884703a 	and	r2,r3,r2
  d0db50:	1001703a 	wrctl	status,r2
  
  return context;
  d0db54:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  d0db58:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  d0db5c:	e0bffb17 	ldw	r2,-20(fp)
  d0db60:	10800817 	ldw	r2,32(r2)
  d0db64:	10c00054 	ori	r3,r2,1
  d0db68:	e0bffb17 	ldw	r2,-20(fp)
  d0db6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  d0db70:	e0bffb17 	ldw	r2,-20(fp)
  d0db74:	10800017 	ldw	r2,0(r2)
  d0db78:	11000104 	addi	r4,r2,4
  d0db7c:	e0bffb17 	ldw	r2,-20(fp)
  d0db80:	10800817 	ldw	r2,32(r2)
  d0db84:	1007883a 	mov	r3,r2
  d0db88:	2005883a 	mov	r2,r4
  d0db8c:	10c00035 	stwio	r3,0(r2)
  d0db90:	e0bff917 	ldw	r2,-28(fp)
  d0db94:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  d0db98:	e0bff417 	ldw	r2,-48(fp)
  d0db9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  d0dba0:	e0fffa17 	ldw	r3,-24(fp)
  d0dba4:	e0bffc17 	ldw	r2,-16(fp)
  d0dba8:	18800526 	beq	r3,r2,d0dbc0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  d0dbac:	e0fffa17 	ldw	r3,-24(fp)
  d0dbb0:	e0bffc17 	ldw	r2,-16(fp)
  d0dbb4:	1887c83a 	sub	r3,r3,r2
  d0dbb8:	e0ffff15 	stw	r3,-4(fp)
  d0dbbc:	00000906 	br	d0dbe4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  d0dbc0:	e0bffe17 	ldw	r2,-8(fp)
  d0dbc4:	1090000c 	andi	r2,r2,16384
  d0dbc8:	1005003a 	cmpeq	r2,r2,zero
  d0dbcc:	1000031e 	bne	r2,zero,d0dbdc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  d0dbd0:	00bffd44 	movi	r2,-11
  d0dbd4:	e0bfff15 	stw	r2,-4(fp)
  d0dbd8:	00000206 	br	d0dbe4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  d0dbdc:	00bffec4 	movi	r2,-5
  d0dbe0:	e0bfff15 	stw	r2,-4(fp)
  d0dbe4:	e0bfff17 	ldw	r2,-4(fp)
}
  d0dbe8:	e037883a 	mov	sp,fp
  d0dbec:	dfc00117 	ldw	ra,4(sp)
  d0dbf0:	df000017 	ldw	fp,0(sp)
  d0dbf4:	dec00204 	addi	sp,sp,8
  d0dbf8:	f800283a 	ret

00d0dbfc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  d0dbfc:	defff204 	addi	sp,sp,-56
  d0dc00:	dfc00d15 	stw	ra,52(sp)
  d0dc04:	df000c15 	stw	fp,48(sp)
  d0dc08:	df000c04 	addi	fp,sp,48
  d0dc0c:	e13ffb15 	stw	r4,-20(fp)
  d0dc10:	e17ffc15 	stw	r5,-16(fp)
  d0dc14:	e1bffd15 	stw	r6,-12(fp)
  d0dc18:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  d0dc1c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  d0dc20:	e0bffc17 	ldw	r2,-16(fp)
  d0dc24:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  d0dc28:	00003a06 	br	d0dd14 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  d0dc2c:	e0bffb17 	ldw	r2,-20(fp)
  d0dc30:	10800c17 	ldw	r2,48(r2)
  d0dc34:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  d0dc38:	e0bffb17 	ldw	r2,-20(fp)
  d0dc3c:	10800d17 	ldw	r2,52(r2)
  d0dc40:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  d0dc44:	e0fffa17 	ldw	r3,-24(fp)
  d0dc48:	e0bff917 	ldw	r2,-28(fp)
  d0dc4c:	1880062e 	bgeu	r3,r2,d0dc68 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  d0dc50:	e0fff917 	ldw	r3,-28(fp)
  d0dc54:	e0bffa17 	ldw	r2,-24(fp)
  d0dc58:	1885c83a 	sub	r2,r3,r2
  d0dc5c:	10bfffc4 	addi	r2,r2,-1
  d0dc60:	e0bff815 	stw	r2,-32(fp)
  d0dc64:	00000c06 	br	d0dc98 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  d0dc68:	e0bff917 	ldw	r2,-28(fp)
  d0dc6c:	1005003a 	cmpeq	r2,r2,zero
  d0dc70:	1000051e 	bne	r2,zero,d0dc88 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  d0dc74:	00820004 	movi	r2,2048
  d0dc78:	e0fffa17 	ldw	r3,-24(fp)
  d0dc7c:	10c5c83a 	sub	r2,r2,r3
  d0dc80:	e0bff815 	stw	r2,-32(fp)
  d0dc84:	00000406 	br	d0dc98 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  d0dc88:	0081ffc4 	movi	r2,2047
  d0dc8c:	e0fffa17 	ldw	r3,-24(fp)
  d0dc90:	10c5c83a 	sub	r2,r2,r3
  d0dc94:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  d0dc98:	e0bff817 	ldw	r2,-32(fp)
  d0dc9c:	1005003a 	cmpeq	r2,r2,zero
  d0dca0:	10001f1e 	bne	r2,zero,d0dd20 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  d0dca4:	e0fffd17 	ldw	r3,-12(fp)
  d0dca8:	e0bff817 	ldw	r2,-32(fp)
  d0dcac:	1880022e 	bgeu	r3,r2,d0dcb8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  d0dcb0:	e0bffd17 	ldw	r2,-12(fp)
  d0dcb4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  d0dcb8:	e0bffb17 	ldw	r2,-20(fp)
  d0dcbc:	10c20e04 	addi	r3,r2,2104
  d0dcc0:	e0bffa17 	ldw	r2,-24(fp)
  d0dcc4:	1885883a 	add	r2,r3,r2
  d0dcc8:	e0fffc17 	ldw	r3,-16(fp)
  d0dccc:	1009883a 	mov	r4,r2
  d0dcd0:	180b883a 	mov	r5,r3
  d0dcd4:	e1bff817 	ldw	r6,-32(fp)
  d0dcd8:	0d090300 	call	d09030 <memcpy>
      ptr   += n;
  d0dcdc:	e0fff817 	ldw	r3,-32(fp)
  d0dce0:	e0bffc17 	ldw	r2,-16(fp)
  d0dce4:	10c5883a 	add	r2,r2,r3
  d0dce8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  d0dcec:	e0fffd17 	ldw	r3,-12(fp)
  d0dcf0:	e0bff817 	ldw	r2,-32(fp)
  d0dcf4:	1885c83a 	sub	r2,r3,r2
  d0dcf8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  d0dcfc:	e0fffa17 	ldw	r3,-24(fp)
  d0dd00:	e0bff817 	ldw	r2,-32(fp)
  d0dd04:	1885883a 	add	r2,r3,r2
  d0dd08:	10c1ffcc 	andi	r3,r2,2047
  d0dd0c:	e0bffb17 	ldw	r2,-20(fp)
  d0dd10:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  d0dd14:	e0bffd17 	ldw	r2,-12(fp)
  d0dd18:	10800048 	cmpgei	r2,r2,1
  d0dd1c:	103fc31e 	bne	r2,zero,d0dc2c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  d0dd20:	0005303a 	rdctl	r2,status
  d0dd24:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  d0dd28:	e0fff517 	ldw	r3,-44(fp)
  d0dd2c:	00bfff84 	movi	r2,-2
  d0dd30:	1884703a 	and	r2,r3,r2
  d0dd34:	1001703a 	wrctl	status,r2
  
  return context;
  d0dd38:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  d0dd3c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  d0dd40:	e0bffb17 	ldw	r2,-20(fp)
  d0dd44:	10800817 	ldw	r2,32(r2)
  d0dd48:	10c00094 	ori	r3,r2,2
  d0dd4c:	e0bffb17 	ldw	r2,-20(fp)
  d0dd50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  d0dd54:	e0bffb17 	ldw	r2,-20(fp)
  d0dd58:	10800017 	ldw	r2,0(r2)
  d0dd5c:	11000104 	addi	r4,r2,4
  d0dd60:	e0bffb17 	ldw	r2,-20(fp)
  d0dd64:	10800817 	ldw	r2,32(r2)
  d0dd68:	1007883a 	mov	r3,r2
  d0dd6c:	2005883a 	mov	r2,r4
  d0dd70:	10c00035 	stwio	r3,0(r2)
  d0dd74:	e0bff717 	ldw	r2,-36(fp)
  d0dd78:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  d0dd7c:	e0bff417 	ldw	r2,-48(fp)
  d0dd80:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  d0dd84:	e0bffd17 	ldw	r2,-12(fp)
  d0dd88:	10800050 	cmplti	r2,r2,1
  d0dd8c:	1000111e 	bne	r2,zero,d0ddd4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  d0dd90:	e0bffe17 	ldw	r2,-8(fp)
  d0dd94:	1090000c 	andi	r2,r2,16384
  d0dd98:	1004c03a 	cmpne	r2,r2,zero
  d0dd9c:	1000101e 	bne	r2,zero,d0dde0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  d0dda0:	e0bffb17 	ldw	r2,-20(fp)
  d0dda4:	10c00d17 	ldw	r3,52(r2)
  d0dda8:	e0bff917 	ldw	r2,-28(fp)
  d0ddac:	1880051e 	bne	r3,r2,d0ddc4 <altera_avalon_jtag_uart_write+0x1c8>
  d0ddb0:	e0bffb17 	ldw	r2,-20(fp)
  d0ddb4:	10c00917 	ldw	r3,36(r2)
  d0ddb8:	e0bffb17 	ldw	r2,-20(fp)
  d0ddbc:	10800117 	ldw	r2,4(r2)
  d0ddc0:	18bff736 	bltu	r3,r2,d0dda0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  d0ddc4:	e0bffb17 	ldw	r2,-20(fp)
  d0ddc8:	10c00d17 	ldw	r3,52(r2)
  d0ddcc:	e0bff917 	ldw	r2,-28(fp)
  d0ddd0:	18800326 	beq	r3,r2,d0dde0 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  d0ddd4:	e0bffd17 	ldw	r2,-12(fp)
  d0ddd8:	10800048 	cmpgei	r2,r2,1
  d0dddc:	103fcd1e 	bne	r2,zero,d0dd14 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  d0dde0:	e0fffc17 	ldw	r3,-16(fp)
  d0dde4:	e0bff617 	ldw	r2,-40(fp)
  d0dde8:	18800526 	beq	r3,r2,d0de00 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  d0ddec:	e0fffc17 	ldw	r3,-16(fp)
  d0ddf0:	e0bff617 	ldw	r2,-40(fp)
  d0ddf4:	1887c83a 	sub	r3,r3,r2
  d0ddf8:	e0ffff15 	stw	r3,-4(fp)
  d0ddfc:	00000906 	br	d0de24 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  d0de00:	e0bffe17 	ldw	r2,-8(fp)
  d0de04:	1090000c 	andi	r2,r2,16384
  d0de08:	1005003a 	cmpeq	r2,r2,zero
  d0de0c:	1000031e 	bne	r2,zero,d0de1c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  d0de10:	00bffd44 	movi	r2,-11
  d0de14:	e0bfff15 	stw	r2,-4(fp)
  d0de18:	00000206 	br	d0de24 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  d0de1c:	00bffec4 	movi	r2,-5
  d0de20:	e0bfff15 	stw	r2,-4(fp)
  d0de24:	e0bfff17 	ldw	r2,-4(fp)
}
  d0de28:	e037883a 	mov	sp,fp
  d0de2c:	dfc00117 	ldw	ra,4(sp)
  d0de30:	df000017 	ldw	fp,0(sp)
  d0de34:	dec00204 	addi	sp,sp,8
  d0de38:	f800283a 	ret

00d0de3c <alt_avalon_mailbox_init>:

/*
 * Register a Mutex device
 */
int alt_avalon_mailbox_init (alt_mailbox_dev* dev)
{
  d0de3c:	defffa04 	addi	sp,sp,-24
  d0de40:	dfc00515 	stw	ra,20(sp)
  d0de44:	df000415 	stw	fp,16(sp)
  d0de48:	df000404 	addi	fp,sp,16
  d0de4c:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  alt_mutex_dev* write_mutex, *read_mutex;
  extern alt_llist alt_mailbox_list;

  ret_code = alt_avalon_mutex_reg( &dev->write_mutex );
  d0de50:	e0bfff17 	ldw	r2,-4(fp)
  d0de54:	11000704 	addi	r4,r2,28
  d0de58:	0d0df940 	call	d0df94 <alt_avalon_mutex_reg>
  d0de5c:	e0bffe15 	stw	r2,-8(fp)

  if (!ret_code)
  d0de60:	e0bffe17 	ldw	r2,-8(fp)
  d0de64:	1004c03a 	cmpne	r2,r2,zero
  d0de68:	1000041e 	bne	r2,zero,d0de7c <alt_avalon_mailbox_init+0x40>
  {
    ret_code = alt_avalon_mutex_reg( &dev->read_mutex );
  d0de6c:	e0bfff17 	ldw	r2,-4(fp)
  d0de70:	11000b04 	addi	r4,r2,44
  d0de74:	0d0df940 	call	d0df94 <alt_avalon_mutex_reg>
  d0de78:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  d0de7c:	e0bffe17 	ldw	r2,-8(fp)
  d0de80:	1004c03a 	cmpne	r2,r2,zero
  d0de84:	1000041e 	bne	r2,zero,d0de98 <alt_avalon_mailbox_init+0x5c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_list);
  d0de88:	e13fff17 	ldw	r4,-4(fp)
  d0de8c:	d1601504 	addi	r5,gp,-32684
  d0de90:	0d0fd6c0 	call	d0fd6c <alt_dev_llist_insert>
  d0de94:	e0bffe15 	stw	r2,-8(fp)
  }

  if (!ret_code)
  d0de98:	e0bffe17 	ldw	r2,-8(fp)
  d0de9c:	1004c03a 	cmpne	r2,r2,zero
  d0dea0:	1000361e 	bne	r2,zero,d0df7c <alt_avalon_mailbox_init+0x140>
  {
    write_mutex = altera_avalon_mutex_open(dev->write_mutex.name);
  d0dea4:	e0bfff17 	ldw	r2,-4(fp)
  d0dea8:	11000917 	ldw	r4,36(r2)
  d0deac:	0d0e3e00 	call	d0e3e0 <altera_avalon_mutex_open>
  d0deb0:	e0bffd15 	stw	r2,-12(fp)
    if (write_mutex)
  d0deb4:	e0bffd17 	ldw	r2,-12(fp)
  d0deb8:	1005003a 	cmpeq	r2,r2,zero
  d0debc:	10002f1e 	bne	r2,zero,d0df7c <alt_avalon_mailbox_init+0x140>
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
  d0dec0:	e0bfff17 	ldw	r2,-4(fp)
  d0dec4:	11000d17 	ldw	r4,52(r2)
  d0dec8:	0d0e3e00 	call	d0e3e0 <altera_avalon_mutex_open>
  d0decc:	e0bffc15 	stw	r2,-16(fp)
      if (read_mutex)
  d0ded0:	e0bffc17 	ldw	r2,-16(fp)
  d0ded4:	1005003a 	cmpeq	r2,r2,zero
  d0ded8:	1000281e 	bne	r2,zero,d0df7c <alt_avalon_mailbox_init+0x140>
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  d0dedc:	00000f06 	br	d0df1c <alt_avalon_mailbox_init+0xe0>
        {
          if (!altera_avalon_mutex_trylock(write_mutex, 1))
  d0dee0:	e13ffd17 	ldw	r4,-12(fp)
  d0dee4:	01400044 	movi	r5,1
  d0dee8:	0d0e4f80 	call	d0e4f8 <altera_avalon_mutex_trylock>
  d0deec:	1004c03a 	cmpne	r2,r2,zero
  d0def0:	10000a1e 	bne	r2,zero,d0df1c <alt_avalon_mailbox_init+0xe0>
          {
            IOWR((alt_u32)(dev->write_ptr), 0,
  d0def4:	e0bfff17 	ldw	r2,-4(fp)
  d0def8:	10800317 	ldw	r2,12(r2)
  d0defc:	1009883a 	mov	r4,r2
  d0df00:	e0bfff17 	ldw	r2,-4(fp)
  d0df04:	10800517 	ldw	r2,20(r2)
  d0df08:	1007883a 	mov	r3,r2
  d0df0c:	2005883a 	mov	r2,r4
  d0df10:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
  d0df14:	e13ffd17 	ldw	r4,-12(fp)
  d0df18:	0d0e5380 	call	d0e538 <altera_avalon_mutex_unlock>
    if (write_mutex)
    {
      read_mutex = altera_avalon_mutex_open(dev->read_mutex.name);
      if (read_mutex)
      {
        while (altera_avalon_mutex_first_lock(write_mutex))
  d0df1c:	e13ffd17 	ldw	r4,-12(fp)
  d0df20:	0d0e6100 	call	d0e610 <altera_avalon_mutex_first_lock>
  d0df24:	1004c03a 	cmpne	r2,r2,zero
  d0df28:	103fed1e 	bne	r2,zero,d0dee0 <alt_avalon_mailbox_init+0xa4>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  d0df2c:	00000f06 	br	d0df6c <alt_avalon_mailbox_init+0x130>
        {
          if (!altera_avalon_mutex_trylock(read_mutex, 1))
  d0df30:	e13ffc17 	ldw	r4,-16(fp)
  d0df34:	01400044 	movi	r5,1
  d0df38:	0d0e4f80 	call	d0e4f8 <altera_avalon_mutex_trylock>
  d0df3c:	1004c03a 	cmpne	r2,r2,zero
  d0df40:	10000a1e 	bne	r2,zero,d0df6c <alt_avalon_mailbox_init+0x130>
          {
            IOWR((alt_u32)(dev->read_ptr), 0,
  d0df44:	e0bfff17 	ldw	r2,-4(fp)
  d0df48:	10800417 	ldw	r2,16(r2)
  d0df4c:	1009883a 	mov	r4,r2
  d0df50:	e0bfff17 	ldw	r2,-4(fp)
  d0df54:	10800517 	ldw	r2,20(r2)
  d0df58:	1007883a 	mov	r3,r2
  d0df5c:	2005883a 	mov	r2,r4
  d0df60:	10c00035 	stwio	r3,0(r2)
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(read_mutex);
  d0df64:	e13ffc17 	ldw	r4,-16(fp)
  d0df68:	0d0e5380 	call	d0e538 <altera_avalon_mutex_unlock>
              (alt_u32) dev->mailbox_mem_start_ptr);
            altera_avalon_mutex_unlock(write_mutex);
          }
        }

        while (altera_avalon_mutex_first_lock(read_mutex))
  d0df6c:	e13ffc17 	ldw	r4,-16(fp)
  d0df70:	0d0e6100 	call	d0e610 <altera_avalon_mutex_first_lock>
  d0df74:	1004c03a 	cmpne	r2,r2,zero
  d0df78:	103fed1e 	bne	r2,zero,d0df30 <alt_avalon_mailbox_init+0xf4>
          }
        }
      }
    }
  }
  return ret_code;
  d0df7c:	e0bffe17 	ldw	r2,-8(fp)
}
  d0df80:	e037883a 	mov	sp,fp
  d0df84:	dfc00117 	ldw	ra,4(sp)
  d0df88:	df000017 	ldw	fp,0(sp)
  d0df8c:	dec00204 	addi	sp,sp,8
  d0df90:	f800283a 	ret

00d0df94 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
  d0df94:	defffc04 	addi	sp,sp,-16
  d0df98:	dfc00315 	stw	ra,12(sp)
  d0df9c:	df000215 	stw	fp,8(sp)
  d0dfa0:	df000204 	addi	fp,sp,8
  d0dfa4:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  d0dfa8:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  d0dfac:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
  d0dfb0:	e0bffe17 	ldw	r2,-8(fp)
  d0dfb4:	1004c03a 	cmpne	r2,r2,zero
  d0dfb8:	1000061e 	bne	r2,zero,d0dfd4 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
  d0dfbc:	e13fff17 	ldw	r4,-4(fp)
  d0dfc0:	01403474 	movhi	r5,209
  d0dfc4:	294c0804 	addi	r5,r5,12320
  d0dfc8:	0d0fd6c0 	call	d0fd6c <alt_dev_llist_insert>
  d0dfcc:	e0bffe15 	stw	r2,-8(fp)
  d0dfd0:	00000506 	br	d0dfe8 <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
  d0dfd4:	0d0e0000 	call	d0e000 <alt_get_errno>
  d0dfd8:	00c00304 	movi	r3,12
  d0dfdc:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
  d0dfe0:	00bffd04 	movi	r2,-12
  d0dfe4:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
  d0dfe8:	e0bffe17 	ldw	r2,-8(fp)
}
  d0dfec:	e037883a 	mov	sp,fp
  d0dff0:	dfc00117 	ldw	ra,4(sp)
  d0dff4:	df000017 	ldw	fp,0(sp)
  d0dff8:	dec00204 	addi	sp,sp,8
  d0dffc:	f800283a 	ret

00d0e000 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0e000:	defffd04 	addi	sp,sp,-12
  d0e004:	dfc00215 	stw	ra,8(sp)
  d0e008:	df000115 	stw	fp,4(sp)
  d0e00c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0e010:	00803474 	movhi	r2,209
  d0e014:	108c0404 	addi	r2,r2,12304
  d0e018:	10800017 	ldw	r2,0(r2)
  d0e01c:	1005003a 	cmpeq	r2,r2,zero
  d0e020:	1000061e 	bne	r2,zero,d0e03c <alt_get_errno+0x3c>
  d0e024:	00803474 	movhi	r2,209
  d0e028:	108c0404 	addi	r2,r2,12304
  d0e02c:	10800017 	ldw	r2,0(r2)
  d0e030:	103ee83a 	callr	r2
  d0e034:	e0bfff15 	stw	r2,-4(fp)
  d0e038:	00000306 	br	d0e048 <alt_get_errno+0x48>
  d0e03c:	00803474 	movhi	r2,209
  d0e040:	10930a04 	addi	r2,r2,19496
  d0e044:	e0bfff15 	stw	r2,-4(fp)
  d0e048:	e0bfff17 	ldw	r2,-4(fp)
}
  d0e04c:	e037883a 	mov	sp,fp
  d0e050:	dfc00117 	ldw	ra,4(sp)
  d0e054:	df000017 	ldw	fp,0(sp)
  d0e058:	dec00204 	addi	sp,sp,8
  d0e05c:	f800283a 	ret

00d0e060 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mailbox_dev* altera_avalon_mailbox_open (const char* name)
{
  d0e060:	defffc04 	addi	sp,sp,-16
  d0e064:	dfc00315 	stw	ra,12(sp)
  d0e068:	df000215 	stw	fp,8(sp)
  d0e06c:	df000204 	addi	fp,sp,8
  d0e070:	e13fff15 	stw	r4,-4(fp)
  alt_mailbox_dev* dev;

  dev = (alt_mailbox_dev*) alt_find_dev (name, &alt_mailbox_list);
  d0e074:	e13fff17 	ldw	r4,-4(fp)
  d0e078:	d1601504 	addi	r5,gp,-32684
  d0e07c:	0d0ff480 	call	d0ff48 <alt_find_dev>
  d0e080:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  d0e084:	e0bffe17 	ldw	r2,-8(fp)
  d0e088:	1004c03a 	cmpne	r2,r2,zero
  d0e08c:	1000041e 	bne	r2,zero,d0e0a0 <altera_avalon_mailbox_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  d0e090:	0d0e0000 	call	d0e000 <alt_get_errno>
  d0e094:	1007883a 	mov	r3,r2
  d0e098:	008004c4 	movi	r2,19
  d0e09c:	18800015 	stw	r2,0(r3)
  }

  return dev;
  d0e0a0:	e0bffe17 	ldw	r2,-8(fp)

}
  d0e0a4:	e037883a 	mov	sp,fp
  d0e0a8:	dfc00117 	ldw	ra,4(sp)
  d0e0ac:	df000017 	ldw	fp,0(sp)
  d0e0b0:	dec00204 	addi	sp,sp,8
  d0e0b4:	f800283a 	ret

00d0e0b8 <altera_avalon_mailbox_close>:
 * altera_avalon_mailbox_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mailbox_close (alt_mailbox_dev* dev)
{
  d0e0b8:	defffe04 	addi	sp,sp,-8
  d0e0bc:	df000115 	stw	fp,4(sp)
  d0e0c0:	df000104 	addi	fp,sp,4
  d0e0c4:	e13fff15 	stw	r4,-4(fp)
  return;
}
  d0e0c8:	e037883a 	mov	sp,fp
  d0e0cc:	df000017 	ldw	fp,0(sp)
  d0e0d0:	dec00104 	addi	sp,sp,4
  d0e0d4:	f800283a 	ret

00d0e0d8 <altera_avalon_mailbox_post>:
 * 
 * Post a message to the mailbox
 *
 */
int altera_avalon_mailbox_post (alt_mailbox_dev* dev, alt_u32 msg)
{
  d0e0d8:	defff904 	addi	sp,sp,-28
  d0e0dc:	dfc00615 	stw	ra,24(sp)
  d0e0e0:	df000515 	stw	fp,20(sp)
  d0e0e4:	df000504 	addi	fp,sp,20
  d0e0e8:	e13ffe15 	stw	r4,-8(fp)
  d0e0ec:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
  d0e0f0:	e03ffd15 	stw	zero,-12(fp)
  *   Claim the Mutex on the write pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->write_mutex, 1 );
  d0e0f4:	e0bffe17 	ldw	r2,-8(fp)
  d0e0f8:	11000704 	addi	r4,r2,28
  d0e0fc:	01400044 	movi	r5,1
  d0e100:	0d0e4b80 	call	d0e4b8 <altera_avalon_mutex_lock>

  temp = (alt_u32 *) IORD(dev->write_ptr, 0);
  d0e104:	e0bffe17 	ldw	r2,-8(fp)
  d0e108:	10800317 	ldw	r2,12(r2)
  d0e10c:	10800037 	ldwio	r2,0(r2)
  d0e110:	e0bffc15 	stw	r2,-16(fp)
  next_write = alt_mailbox_increment_ptr(dev, temp);
  d0e114:	e13ffe17 	ldw	r4,-8(fp)
  d0e118:	e17ffc17 	ldw	r5,-16(fp)
  d0e11c:	0d0e1940 	call	d0e194 <alt_mailbox_increment_ptr>
  d0e120:	e0bffb15 	stw	r2,-20(fp)

  if (next_write == ((alt_u32 *)IORD(dev->read_ptr, 0)) )
  d0e124:	e0bffe17 	ldw	r2,-8(fp)
  d0e128:	10800417 	ldw	r2,16(r2)
  d0e12c:	10800037 	ldwio	r2,0(r2)
  d0e130:	1007883a 	mov	r3,r2
  d0e134:	e0bffb17 	ldw	r2,-20(fp)
  d0e138:	1880061e 	bne	r3,r2,d0e154 <altera_avalon_mailbox_post+0x7c>
  {
    ALT_ERRNO = EWOULDBLOCK;
  d0e13c:	0d0e0000 	call	d0e000 <alt_get_errno>
  d0e140:	00c002c4 	movi	r3,11
  d0e144:	10c00015 	stw	r3,0(r2)
    ret_code = -EWOULDBLOCK;
  d0e148:	00bffd44 	movi	r2,-11
  d0e14c:	e0bffd15 	stw	r2,-12(fp)
  d0e150:	00000706 	br	d0e170 <altera_avalon_mailbox_post+0x98>
  }
  else
  {
    IOWR(temp, 0, msg);
  d0e154:	e0bffc17 	ldw	r2,-16(fp)
  d0e158:	e0ffff17 	ldw	r3,-4(fp)
  d0e15c:	10c00035 	stwio	r3,0(r2)
    IOWR((alt_u32)(dev->write_ptr), 0, (alt_u32)next_write);
  d0e160:	e0bffe17 	ldw	r2,-8(fp)
  d0e164:	10800317 	ldw	r2,12(r2)
  d0e168:	e0fffb17 	ldw	r3,-20(fp)
  d0e16c:	10c00035 	stwio	r3,0(r2)
  }

  altera_avalon_mutex_unlock( &dev->write_mutex );
  d0e170:	e0bffe17 	ldw	r2,-8(fp)
  d0e174:	11000704 	addi	r4,r2,28
  d0e178:	0d0e5380 	call	d0e538 <altera_avalon_mutex_unlock>

  return ret_code;
  d0e17c:	e0bffd17 	ldw	r2,-12(fp)

}
  d0e180:	e037883a 	mov	sp,fp
  d0e184:	dfc00117 	ldw	ra,4(sp)
  d0e188:	df000017 	ldw	fp,0(sp)
  d0e18c:	dec00204 	addi	sp,sp,8
  d0e190:	f800283a 	ret

00d0e194 <alt_mailbox_increment_ptr>:
 *
 * Increment one of the pointers and if that would take it beyond the end
 * of the shared memory put it at the start
 */
static inline alt_u32* alt_mailbox_increment_ptr(alt_mailbox_dev* dev, alt_u32* ptr)
{
  d0e194:	defffd04 	addi	sp,sp,-12
  d0e198:	df000215 	stw	fp,8(sp)
  d0e19c:	df000204 	addi	fp,sp,8
  d0e1a0:	e13ffe15 	stw	r4,-8(fp)
  d0e1a4:	e17fff15 	stw	r5,-4(fp)
  ptr += 1;
  d0e1a8:	e0bfff17 	ldw	r2,-4(fp)
  d0e1ac:	10800104 	addi	r2,r2,4
  d0e1b0:	e0bfff15 	stw	r2,-4(fp)

  if (ptr > dev->mailbox_mem_end_ptr)
  d0e1b4:	e0bffe17 	ldw	r2,-8(fp)
  d0e1b8:	10c00617 	ldw	r3,24(r2)
  d0e1bc:	e0bfff17 	ldw	r2,-4(fp)
  d0e1c0:	1880032e 	bgeu	r3,r2,d0e1d0 <alt_mailbox_increment_ptr+0x3c>
  {
    ptr = dev->mailbox_mem_start_ptr;
  d0e1c4:	e0bffe17 	ldw	r2,-8(fp)
  d0e1c8:	10800517 	ldw	r2,20(r2)
  d0e1cc:	e0bfff15 	stw	r2,-4(fp)
  }

  return ptr;
  d0e1d0:	e0bfff17 	ldw	r2,-4(fp)
}
  d0e1d4:	e037883a 	mov	sp,fp
  d0e1d8:	df000017 	ldw	fp,0(sp)
  d0e1dc:	dec00104 	addi	sp,sp,4
  d0e1e0:	f800283a 	ret

00d0e1e4 <altera_avalon_mailbox_pend>:
 * 
 * Block until a message is available in the mailbox
 *
 */
alt_u32 altera_avalon_mailbox_pend (alt_mailbox_dev* dev)
{
  d0e1e4:	defffa04 	addi	sp,sp,-24
  d0e1e8:	dfc00515 	stw	ra,20(sp)
  d0e1ec:	df000415 	stw	fp,16(sp)
  d0e1f0:	dc000315 	stw	r16,12(sp)
  d0e1f4:	df000304 	addi	fp,sp,12
  d0e1f8:	e13fff15 	stw	r4,-4(fp)
  *   Claim the Mutex on the read pointer
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  d0e1fc:	e0bfff17 	ldw	r2,-4(fp)
  d0e200:	11000b04 	addi	r4,r2,44
  d0e204:	01400044 	movi	r5,1
  d0e208:	0d0e4b80 	call	d0e4b8 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  d0e20c:	e0bfff17 	ldw	r2,-4(fp)
  d0e210:	10800417 	ldw	r2,16(r2)
  d0e214:	10800037 	ldwio	r2,0(r2)
  d0e218:	e0bffd15 	stw	r2,-12(fp)

  while ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp );
  d0e21c:	e0bfff17 	ldw	r2,-4(fp)
  d0e220:	10800317 	ldw	r2,12(r2)
  d0e224:	10800037 	ldwio	r2,0(r2)
  d0e228:	1007883a 	mov	r3,r2
  d0e22c:	e0bffd17 	ldw	r2,-12(fp)
  d0e230:	18bffa26 	beq	r3,r2,d0e21c <altera_avalon_mailbox_pend+0x38>

  msg = IORD(temp, 0);
  d0e234:	e0bffd17 	ldw	r2,-12(fp)
  d0e238:	10800037 	ldwio	r2,0(r2)
  d0e23c:	e0bffe15 	stw	r2,-8(fp)

  IOWR( (alt_u32)(dev->read_ptr), 0,
  d0e240:	e0bfff17 	ldw	r2,-4(fp)
  d0e244:	10800417 	ldw	r2,16(r2)
  d0e248:	1021883a 	mov	r16,r2
  d0e24c:	e13fff17 	ldw	r4,-4(fp)
  d0e250:	e17ffd17 	ldw	r5,-12(fp)
  d0e254:	0d0e1940 	call	d0e194 <alt_mailbox_increment_ptr>
  d0e258:	1007883a 	mov	r3,r2
  d0e25c:	8005883a 	mov	r2,r16
  d0e260:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );

  altera_avalon_mutex_unlock( &dev->read_mutex );
  d0e264:	e0bfff17 	ldw	r2,-4(fp)
  d0e268:	11000b04 	addi	r4,r2,44
  d0e26c:	0d0e5380 	call	d0e538 <altera_avalon_mutex_unlock>

  return msg;
  d0e270:	e0bffe17 	ldw	r2,-8(fp)

}
  d0e274:	e037883a 	mov	sp,fp
  d0e278:	dfc00217 	ldw	ra,8(sp)
  d0e27c:	df000117 	ldw	fp,4(sp)
  d0e280:	dc000017 	ldw	r16,0(sp)
  d0e284:	dec00304 	addi	sp,sp,12
  d0e288:	f800283a 	ret

00d0e28c <altera_avalon_mailbox_get>:
 * If a message is available in the mailbox return it otherwise return NULL
 * i.e. this is Non-Blocking
 *
 */
alt_u32 altera_avalon_mailbox_get (alt_mailbox_dev* dev, int* err)
{
  d0e28c:	defff904 	addi	sp,sp,-28
  d0e290:	dfc00615 	stw	ra,24(sp)
  d0e294:	df000515 	stw	fp,20(sp)
  d0e298:	dc000415 	stw	r16,16(sp)
  d0e29c:	df000404 	addi	fp,sp,16
  d0e2a0:	e13ffe15 	stw	r4,-8(fp)
  d0e2a4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 msg;
  alt_u32* temp;
  *err = 0;
  d0e2a8:	e0bfff17 	ldw	r2,-4(fp)
  d0e2ac:	10000015 	stw	zero,0(r2)
  *   Claim the Mutex on the read pointer 
  *
  *   The mutex function takes care of the thread sempahore if running
  *   in a multi-threaded environment
  */
  altera_avalon_mutex_lock( &dev->read_mutex, 1 );
  d0e2b0:	e0bffe17 	ldw	r2,-8(fp)
  d0e2b4:	11000b04 	addi	r4,r2,44
  d0e2b8:	01400044 	movi	r5,1
  d0e2bc:	0d0e4b80 	call	d0e4b8 <altera_avalon_mutex_lock>

  temp = (alt_u32 *)IORD(dev->read_ptr, 0);
  d0e2c0:	e0bffe17 	ldw	r2,-8(fp)
  d0e2c4:	10800417 	ldw	r2,16(r2)
  d0e2c8:	10800037 	ldwio	r2,0(r2)
  d0e2cc:	e0bffc15 	stw	r2,-16(fp)

  if ( (alt_u32 *)(IORD(dev->write_ptr, 0)) == temp )
  d0e2d0:	e0bffe17 	ldw	r2,-8(fp)
  d0e2d4:	10800317 	ldw	r2,12(r2)
  d0e2d8:	10800037 	ldwio	r2,0(r2)
  d0e2dc:	1007883a 	mov	r3,r2
  d0e2e0:	e0bffc17 	ldw	r2,-16(fp)
  d0e2e4:	1880091e 	bne	r3,r2,d0e30c <altera_avalon_mailbox_get+0x80>
  {
    *err = -EWOULDBLOCK;
  d0e2e8:	e0ffff17 	ldw	r3,-4(fp)
  d0e2ec:	00bffd44 	movi	r2,-11
  d0e2f0:	18800015 	stw	r2,0(r3)
    ALT_ERRNO = EWOULDBLOCK;
  d0e2f4:	0d0e0000 	call	d0e000 <alt_get_errno>
  d0e2f8:	1007883a 	mov	r3,r2
  d0e2fc:	008002c4 	movi	r2,11
  d0e300:	18800015 	stw	r2,0(r3)
    msg = 0;
  d0e304:	e03ffd15 	stw	zero,-12(fp)
  d0e308:	00000c06 	br	d0e33c <altera_avalon_mailbox_get+0xb0>
  }
  else
  {
    msg = IORD(temp, 0);
  d0e30c:	e0bffc17 	ldw	r2,-16(fp)
  d0e310:	10800037 	ldwio	r2,0(r2)
  d0e314:	e0bffd15 	stw	r2,-12(fp)
    IOWR(dev->read_ptr, 0,
  d0e318:	e0bffe17 	ldw	r2,-8(fp)
  d0e31c:	10800417 	ldw	r2,16(r2)
  d0e320:	1021883a 	mov	r16,r2
  d0e324:	e13ffe17 	ldw	r4,-8(fp)
  d0e328:	e17ffc17 	ldw	r5,-16(fp)
  d0e32c:	0d0e1940 	call	d0e194 <alt_mailbox_increment_ptr>
  d0e330:	1007883a 	mov	r3,r2
  d0e334:	8005883a 	mov	r2,r16
  d0e338:	10c00035 	stwio	r3,0(r2)
      (alt_u32)(alt_mailbox_increment_ptr(dev, temp)) );
  }

  altera_avalon_mutex_unlock( &dev->read_mutex );
  d0e33c:	e0bffe17 	ldw	r2,-8(fp)
  d0e340:	11000b04 	addi	r4,r2,44
  d0e344:	0d0e5380 	call	d0e538 <altera_avalon_mutex_unlock>

  return msg;
  d0e348:	e0bffd17 	ldw	r2,-12(fp)

}
  d0e34c:	e037883a 	mov	sp,fp
  d0e350:	dfc00217 	ldw	ra,8(sp)
  d0e354:	df000117 	ldw	fp,4(sp)
  d0e358:	dc000017 	ldw	r16,0(sp)
  d0e35c:	dec00304 	addi	sp,sp,12
  d0e360:	f800283a 	ret

00d0e364 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  d0e364:	defff904 	addi	sp,sp,-28
  d0e368:	df000615 	stw	fp,24(sp)
  d0e36c:	df000604 	addi	fp,sp,24
  d0e370:	e13ffe15 	stw	r4,-8(fp)
  d0e374:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
  d0e378:	00bfffc4 	movi	r2,-1
  d0e37c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
  d0e380:	0005317a 	rdctl	r2,cpuid
  d0e384:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
  d0e388:	e0bffd17 	ldw	r2,-12(fp)
  d0e38c:	1006943a 	slli	r3,r2,16
  d0e390:	e0bfff17 	ldw	r2,-4(fp)
  d0e394:	1884b03a 	or	r2,r3,r2
  d0e398:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
  d0e39c:	e0bffe17 	ldw	r2,-8(fp)
  d0e3a0:	10800317 	ldw	r2,12(r2)
  d0e3a4:	e0fffc17 	ldw	r3,-16(fp)
  d0e3a8:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  d0e3ac:	e0bffe17 	ldw	r2,-8(fp)
  d0e3b0:	10800317 	ldw	r2,12(r2)
  d0e3b4:	10800037 	ldwio	r2,0(r2)
  d0e3b8:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
  d0e3bc:	e0fffb17 	ldw	r3,-20(fp)
  d0e3c0:	e0bffc17 	ldw	r2,-16(fp)
  d0e3c4:	1880011e 	bne	r3,r2,d0e3cc <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
  d0e3c8:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
  d0e3cc:	e0bffa17 	ldw	r2,-24(fp)
}
  d0e3d0:	e037883a 	mov	sp,fp
  d0e3d4:	df000017 	ldw	fp,0(sp)
  d0e3d8:	dec00104 	addi	sp,sp,4
  d0e3dc:	f800283a 	ret

00d0e3e0 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
  d0e3e0:	defffc04 	addi	sp,sp,-16
  d0e3e4:	dfc00315 	stw	ra,12(sp)
  d0e3e8:	df000215 	stw	fp,8(sp)
  d0e3ec:	df000204 	addi	fp,sp,8
  d0e3f0:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
  d0e3f4:	e13fff17 	ldw	r4,-4(fp)
  d0e3f8:	d1601704 	addi	r5,gp,-32676
  d0e3fc:	0d0ff480 	call	d0ff48 <alt_find_dev>
  d0e400:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  d0e404:	e0bffe17 	ldw	r2,-8(fp)
  d0e408:	1004c03a 	cmpne	r2,r2,zero
  d0e40c:	1000041e 	bne	r2,zero,d0e420 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  d0e410:	0d0e4380 	call	d0e438 <alt_get_errno>
  d0e414:	1007883a 	mov	r3,r2
  d0e418:	008004c4 	movi	r2,19
  d0e41c:	18800015 	stw	r2,0(r3)
  }

  return dev;
  d0e420:	e0bffe17 	ldw	r2,-8(fp)
}
  d0e424:	e037883a 	mov	sp,fp
  d0e428:	dfc00117 	ldw	ra,4(sp)
  d0e42c:	df000017 	ldw	fp,0(sp)
  d0e430:	dec00204 	addi	sp,sp,8
  d0e434:	f800283a 	ret

00d0e438 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0e438:	defffd04 	addi	sp,sp,-12
  d0e43c:	dfc00215 	stw	ra,8(sp)
  d0e440:	df000115 	stw	fp,4(sp)
  d0e444:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0e448:	00803474 	movhi	r2,209
  d0e44c:	108c0404 	addi	r2,r2,12304
  d0e450:	10800017 	ldw	r2,0(r2)
  d0e454:	1005003a 	cmpeq	r2,r2,zero
  d0e458:	1000061e 	bne	r2,zero,d0e474 <alt_get_errno+0x3c>
  d0e45c:	00803474 	movhi	r2,209
  d0e460:	108c0404 	addi	r2,r2,12304
  d0e464:	10800017 	ldw	r2,0(r2)
  d0e468:	103ee83a 	callr	r2
  d0e46c:	e0bfff15 	stw	r2,-4(fp)
  d0e470:	00000306 	br	d0e480 <alt_get_errno+0x48>
  d0e474:	00803474 	movhi	r2,209
  d0e478:	10930a04 	addi	r2,r2,19496
  d0e47c:	e0bfff15 	stw	r2,-4(fp)
  d0e480:	e0bfff17 	ldw	r2,-4(fp)
}
  d0e484:	e037883a 	mov	sp,fp
  d0e488:	dfc00117 	ldw	ra,4(sp)
  d0e48c:	df000017 	ldw	fp,0(sp)
  d0e490:	dec00204 	addi	sp,sp,8
  d0e494:	f800283a 	ret

00d0e498 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
  d0e498:	defffe04 	addi	sp,sp,-8
  d0e49c:	df000115 	stw	fp,4(sp)
  d0e4a0:	df000104 	addi	fp,sp,4
  d0e4a4:	e13fff15 	stw	r4,-4(fp)
  return;
}
  d0e4a8:	e037883a 	mov	sp,fp
  d0e4ac:	df000017 	ldw	fp,0(sp)
  d0e4b0:	dec00104 	addi	sp,sp,4
  d0e4b4:	f800283a 	ret

00d0e4b8 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
  d0e4b8:	defffc04 	addi	sp,sp,-16
  d0e4bc:	dfc00315 	stw	ra,12(sp)
  d0e4c0:	df000215 	stw	fp,8(sp)
  d0e4c4:	df000204 	addi	fp,sp,8
  d0e4c8:	e13ffe15 	stw	r4,-8(fp)
  d0e4cc:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
  d0e4d0:	e13ffe17 	ldw	r4,-8(fp)
  d0e4d4:	e17fff17 	ldw	r5,-4(fp)
  d0e4d8:	0d0e3640 	call	d0e364 <alt_mutex_trylock>
  d0e4dc:	1004c03a 	cmpne	r2,r2,zero
  d0e4e0:	103ffb1e 	bne	r2,zero,d0e4d0 <altera_avalon_mutex_lock+0x18>
}
  d0e4e4:	e037883a 	mov	sp,fp
  d0e4e8:	dfc00117 	ldw	ra,4(sp)
  d0e4ec:	df000017 	ldw	fp,0(sp)
  d0e4f0:	dec00204 	addi	sp,sp,8
  d0e4f4:	f800283a 	ret

00d0e4f8 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  d0e4f8:	defffb04 	addi	sp,sp,-20
  d0e4fc:	dfc00415 	stw	ra,16(sp)
  d0e500:	df000315 	stw	fp,12(sp)
  d0e504:	df000304 	addi	fp,sp,12
  d0e508:	e13ffe15 	stw	r4,-8(fp)
  d0e50c:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
  d0e510:	e13ffe17 	ldw	r4,-8(fp)
  d0e514:	e17fff17 	ldw	r5,-4(fp)
  d0e518:	0d0e3640 	call	d0e364 <alt_mutex_trylock>
  d0e51c:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
  d0e520:	e0bffd17 	ldw	r2,-12(fp)
}
  d0e524:	e037883a 	mov	sp,fp
  d0e528:	dfc00117 	ldw	ra,4(sp)
  d0e52c:	df000017 	ldw	fp,0(sp)
  d0e530:	dec00204 	addi	sp,sp,8
  d0e534:	f800283a 	ret

00d0e538 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  d0e538:	defffd04 	addi	sp,sp,-12
  d0e53c:	df000215 	stw	fp,8(sp)
  d0e540:	df000204 	addi	fp,sp,8
  d0e544:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
  d0e548:	0005317a 	rdctl	r2,cpuid
  d0e54c:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
  d0e550:	e0bfff17 	ldw	r2,-4(fp)
  d0e554:	10800317 	ldw	r2,12(r2)
  d0e558:	10800104 	addi	r2,r2,4
  d0e55c:	1007883a 	mov	r3,r2
  d0e560:	00800044 	movi	r2,1
  d0e564:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
  d0e568:	e0bfff17 	ldw	r2,-4(fp)
  d0e56c:	11000317 	ldw	r4,12(r2)
  d0e570:	e0bffe17 	ldw	r2,-8(fp)
  d0e574:	1004943a 	slli	r2,r2,16
  d0e578:	1007883a 	mov	r3,r2
  d0e57c:	2005883a 	mov	r2,r4
  d0e580:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
  d0e584:	e037883a 	mov	sp,fp
  d0e588:	df000017 	ldw	fp,0(sp)
  d0e58c:	dec00104 	addi	sp,sp,4
  d0e590:	f800283a 	ret

00d0e594 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  d0e594:	defff904 	addi	sp,sp,-28
  d0e598:	df000615 	stw	fp,24(sp)
  d0e59c:	df000604 	addi	fp,sp,24
  d0e5a0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
  d0e5a4:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
  d0e5a8:	0005317a 	rdctl	r2,cpuid
  d0e5ac:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  d0e5b0:	e0bfff17 	ldw	r2,-4(fp)
  d0e5b4:	10800317 	ldw	r2,12(r2)
  d0e5b8:	10800037 	ldwio	r2,0(r2)
  d0e5bc:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
  d0e5c0:	e0bffd17 	ldw	r2,-12(fp)
  d0e5c4:	10bfffec 	andhi	r2,r2,65535
  d0e5c8:	1004d43a 	srli	r2,r2,16
  d0e5cc:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
  d0e5d0:	e0fffc17 	ldw	r3,-16(fp)
  d0e5d4:	e0bffe17 	ldw	r2,-8(fp)
  d0e5d8:	1880081e 	bne	r3,r2,d0e5fc <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
  d0e5dc:	e0bffd17 	ldw	r2,-12(fp)
  d0e5e0:	10bfffcc 	andi	r2,r2,65535
  d0e5e4:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
  d0e5e8:	e0bffb17 	ldw	r2,-20(fp)
  d0e5ec:	1005003a 	cmpeq	r2,r2,zero
  d0e5f0:	1000021e 	bne	r2,zero,d0e5fc <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
  d0e5f4:	00800044 	movi	r2,1
  d0e5f8:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
  d0e5fc:	e0bffa17 	ldw	r2,-24(fp)
}
  d0e600:	e037883a 	mov	sp,fp
  d0e604:	df000017 	ldw	fp,0(sp)
  d0e608:	dec00104 	addi	sp,sp,4
  d0e60c:	f800283a 	ret

00d0e610 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  d0e610:	defffc04 	addi	sp,sp,-16
  d0e614:	df000315 	stw	fp,12(sp)
  d0e618:	df000304 	addi	fp,sp,12
  d0e61c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
  d0e620:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
  d0e624:	e0bfff17 	ldw	r2,-4(fp)
  d0e628:	10800317 	ldw	r2,12(r2)
  d0e62c:	10800104 	addi	r2,r2,4
  d0e630:	10800037 	ldwio	r2,0(r2)
  d0e634:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
  d0e638:	e0bffe17 	ldw	r2,-8(fp)
  d0e63c:	1080004c 	andi	r2,r2,1
  d0e640:	10803fcc 	andi	r2,r2,255
  d0e644:	1005003a 	cmpeq	r2,r2,zero
  d0e648:	1000021e 	bne	r2,zero,d0e654 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
  d0e64c:	00800044 	movi	r2,1
  d0e650:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
  d0e654:	e0bffd17 	ldw	r2,-12(fp)
}
  d0e658:	e037883a 	mov	sp,fp
  d0e65c:	df000017 	ldw	fp,0(sp)
  d0e660:	dec00104 	addi	sp,sp,4
  d0e664:	f800283a 	ret

00d0e668 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  d0e668:	defffc04 	addi	sp,sp,-16
  d0e66c:	dfc00315 	stw	ra,12(sp)
  d0e670:	df000215 	stw	fp,8(sp)
  d0e674:	df000204 	addi	fp,sp,8
  d0e678:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  d0e67c:	e13fff17 	ldw	r4,-4(fp)
  d0e680:	01403474 	movhi	r5,209
  d0e684:	294c0104 	addi	r5,r5,12292
  d0e688:	0d0ff480 	call	d0ff48 <alt_find_dev>
  d0e68c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  d0e690:	e0bffe17 	ldw	r2,-8(fp)
}
  d0e694:	e037883a 	mov	sp,fp
  d0e698:	dfc00117 	ldw	ra,4(sp)
  d0e69c:	df000017 	ldw	fp,0(sp)
  d0e6a0:	dec00204 	addi	sp,sp,8
  d0e6a4:	f800283a 	ret

00d0e6a8 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  d0e6a8:	defff904 	addi	sp,sp,-28
  d0e6ac:	df000615 	stw	fp,24(sp)
  d0e6b0:	df000604 	addi	fp,sp,24
  d0e6b4:	e13ffb15 	stw	r4,-20(fp)
  d0e6b8:	e17ffc15 	stw	r5,-16(fp)
  d0e6bc:	e1bffd15 	stw	r6,-12(fp)
  d0e6c0:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  d0e6c4:	e0bffb17 	ldw	r2,-20(fp)
  d0e6c8:	10c00f17 	ldw	r3,60(r2)
  d0e6cc:	e0bffd17 	ldw	r2,-12(fp)
  d0e6d0:	10c0042e 	bgeu	r2,r3,d0e6e4 <alt_up_pixel_buffer_dma_draw+0x3c>
  d0e6d4:	e0bffb17 	ldw	r2,-20(fp)
  d0e6d8:	10c01017 	ldw	r3,64(r2)
  d0e6dc:	e0bffe17 	ldw	r2,-8(fp)
  d0e6e0:	10c00336 	bltu	r2,r3,d0e6f0 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  d0e6e4:	00bfffc4 	movi	r2,-1
  d0e6e8:	e0bfff15 	stw	r2,-4(fp)
  d0e6ec:	00005106 	br	d0e834 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  d0e6f0:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  d0e6f4:	e0bffb17 	ldw	r2,-20(fp)
  d0e6f8:	10800d17 	ldw	r2,52(r2)
  d0e6fc:	1004c03a 	cmpne	r2,r2,zero
  d0e700:	1000151e 	bne	r2,zero,d0e758 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  d0e704:	e0bffb17 	ldw	r2,-20(fp)
  d0e708:	10c01217 	ldw	r3,72(r2)
  d0e70c:	e0bffd17 	ldw	r2,-12(fp)
  d0e710:	1886703a 	and	r3,r3,r2
  d0e714:	e0bffb17 	ldw	r2,-20(fp)
  d0e718:	10801117 	ldw	r2,68(r2)
  d0e71c:	1886983a 	sll	r3,r3,r2
  d0e720:	e0bffa17 	ldw	r2,-24(fp)
  d0e724:	10c4b03a 	or	r2,r2,r3
  d0e728:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  d0e72c:	e0bffb17 	ldw	r2,-20(fp)
  d0e730:	10c01417 	ldw	r3,80(r2)
  d0e734:	e0bffe17 	ldw	r2,-8(fp)
  d0e738:	1886703a 	and	r3,r3,r2
  d0e73c:	e0bffb17 	ldw	r2,-20(fp)
  d0e740:	10801317 	ldw	r2,76(r2)
  d0e744:	1886983a 	sll	r3,r3,r2
  d0e748:	e0bffa17 	ldw	r2,-24(fp)
  d0e74c:	10c4b03a 	or	r2,r2,r3
  d0e750:	e0bffa15 	stw	r2,-24(fp)
  d0e754:	00001706 	br	d0e7b4 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  d0e758:	e0bffb17 	ldw	r2,-20(fp)
  d0e75c:	10c01217 	ldw	r3,72(r2)
  d0e760:	e0bffd17 	ldw	r2,-12(fp)
  d0e764:	1886703a 	and	r3,r3,r2
  d0e768:	e0bffb17 	ldw	r2,-20(fp)
  d0e76c:	10801117 	ldw	r2,68(r2)
  d0e770:	1886983a 	sll	r3,r3,r2
  d0e774:	e0bffa17 	ldw	r2,-24(fp)
  d0e778:	10c5883a 	add	r2,r2,r3
  d0e77c:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  d0e780:	e0bffb17 	ldw	r2,-20(fp)
  d0e784:	10c01417 	ldw	r3,80(r2)
  d0e788:	e0bffe17 	ldw	r2,-8(fp)
  d0e78c:	1886703a 	and	r3,r3,r2
  d0e790:	e0bffb17 	ldw	r2,-20(fp)
  d0e794:	10800f17 	ldw	r2,60(r2)
  d0e798:	1887383a 	mul	r3,r3,r2
  d0e79c:	e0bffb17 	ldw	r2,-20(fp)
  d0e7a0:	10801117 	ldw	r2,68(r2)
  d0e7a4:	1886983a 	sll	r3,r3,r2
  d0e7a8:	e0bffa17 	ldw	r2,-24(fp)
  d0e7ac:	10c5883a 	add	r2,r2,r3
  d0e7b0:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  d0e7b4:	e0bffb17 	ldw	r2,-20(fp)
  d0e7b8:	10800e17 	ldw	r2,56(r2)
  d0e7bc:	10800058 	cmpnei	r2,r2,1
  d0e7c0:	1000081e 	bne	r2,zero,d0e7e4 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  d0e7c4:	e0bffb17 	ldw	r2,-20(fp)
  d0e7c8:	10800c17 	ldw	r2,48(r2)
  d0e7cc:	1007883a 	mov	r3,r2
  d0e7d0:	e0bffa17 	ldw	r2,-24(fp)
  d0e7d4:	1885883a 	add	r2,r3,r2
  d0e7d8:	e0fffc17 	ldw	r3,-16(fp)
  d0e7dc:	10c00025 	stbio	r3,0(r2)
  d0e7e0:	00001306 	br	d0e830 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  d0e7e4:	e0bffb17 	ldw	r2,-20(fp)
  d0e7e8:	10800e17 	ldw	r2,56(r2)
  d0e7ec:	10800098 	cmpnei	r2,r2,2
  d0e7f0:	1000081e 	bne	r2,zero,d0e814 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  d0e7f4:	e0bffb17 	ldw	r2,-20(fp)
  d0e7f8:	10800c17 	ldw	r2,48(r2)
  d0e7fc:	1007883a 	mov	r3,r2
  d0e800:	e0bffa17 	ldw	r2,-24(fp)
  d0e804:	1885883a 	add	r2,r3,r2
  d0e808:	e0fffc17 	ldw	r3,-16(fp)
  d0e80c:	10c0002d 	sthio	r3,0(r2)
  d0e810:	00000706 	br	d0e830 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  d0e814:	e0bffb17 	ldw	r2,-20(fp)
  d0e818:	10800c17 	ldw	r2,48(r2)
  d0e81c:	1007883a 	mov	r3,r2
  d0e820:	e0bffa17 	ldw	r2,-24(fp)
  d0e824:	1885883a 	add	r2,r3,r2
  d0e828:	e0fffc17 	ldw	r3,-16(fp)
  d0e82c:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  d0e830:	e03fff15 	stw	zero,-4(fp)
  d0e834:	e0bfff17 	ldw	r2,-4(fp)
}
  d0e838:	e037883a 	mov	sp,fp
  d0e83c:	df000017 	ldw	fp,0(sp)
  d0e840:	dec00104 	addi	sp,sp,4
  d0e844:	f800283a 	ret

00d0e848 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  d0e848:	defffd04 	addi	sp,sp,-12
  d0e84c:	df000215 	stw	fp,8(sp)
  d0e850:	df000204 	addi	fp,sp,8
  d0e854:	e13ffe15 	stw	r4,-8(fp)
  d0e858:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  d0e85c:	e0bffe17 	ldw	r2,-8(fp)
  d0e860:	10800a17 	ldw	r2,40(r2)
  d0e864:	10800104 	addi	r2,r2,4
  d0e868:	e0ffff17 	ldw	r3,-4(fp)
  d0e86c:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  d0e870:	e0bffe17 	ldw	r2,-8(fp)
  d0e874:	10800a17 	ldw	r2,40(r2)
  d0e878:	10800104 	addi	r2,r2,4
  d0e87c:	10800037 	ldwio	r2,0(r2)
  d0e880:	1007883a 	mov	r3,r2
  d0e884:	e0bffe17 	ldw	r2,-8(fp)
  d0e888:	10c00c15 	stw	r3,48(r2)
	return 0;
  d0e88c:	0005883a 	mov	r2,zero
}
  d0e890:	e037883a 	mov	sp,fp
  d0e894:	df000017 	ldw	fp,0(sp)
  d0e898:	dec00104 	addi	sp,sp,4
  d0e89c:	f800283a 	ret

00d0e8a0 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  d0e8a0:	defffe04 	addi	sp,sp,-8
  d0e8a4:	df000115 	stw	fp,4(sp)
  d0e8a8:	df000104 	addi	fp,sp,4
  d0e8ac:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  d0e8b0:	e0bfff17 	ldw	r2,-4(fp)
  d0e8b4:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  d0e8b8:	e0bfff17 	ldw	r2,-4(fp)
  d0e8bc:	10800a17 	ldw	r2,40(r2)
  d0e8c0:	1007883a 	mov	r3,r2
  d0e8c4:	00800044 	movi	r2,1
  d0e8c8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  d0e8cc:	e0bfff17 	ldw	r2,-4(fp)
  d0e8d0:	10c00b17 	ldw	r3,44(r2)
  d0e8d4:	e0bfff17 	ldw	r2,-4(fp)
  d0e8d8:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  d0e8dc:	e0bfff17 	ldw	r2,-4(fp)
  d0e8e0:	11000b15 	stw	r4,44(r2)
	return 0;
  d0e8e4:	0005883a 	mov	r2,zero
}
  d0e8e8:	e037883a 	mov	sp,fp
  d0e8ec:	df000017 	ldw	fp,0(sp)
  d0e8f0:	dec00104 	addi	sp,sp,4
  d0e8f4:	f800283a 	ret

00d0e8f8 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  d0e8f8:	defffe04 	addi	sp,sp,-8
  d0e8fc:	df000115 	stw	fp,4(sp)
  d0e900:	df000104 	addi	fp,sp,4
  d0e904:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  d0e908:	e0bfff17 	ldw	r2,-4(fp)
  d0e90c:	10800a17 	ldw	r2,40(r2)
  d0e910:	10800304 	addi	r2,r2,12
  d0e914:	10800037 	ldwio	r2,0(r2)
  d0e918:	1080004c 	andi	r2,r2,1
}
  d0e91c:	e037883a 	mov	sp,fp
  d0e920:	df000017 	ldw	fp,0(sp)
  d0e924:	dec00104 	addi	sp,sp,4
  d0e928:	f800283a 	ret

00d0e92c <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  d0e92c:	defff604 	addi	sp,sp,-40
  d0e930:	df000915 	stw	fp,36(sp)
  d0e934:	df000904 	addi	fp,sp,36
  d0e938:	e13ff715 	stw	r4,-36(fp)
  d0e93c:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  d0e940:	e0bff817 	ldw	r2,-32(fp)
  d0e944:	10800058 	cmpnei	r2,r2,1
  d0e948:	1000041e 	bne	r2,zero,d0e95c <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  d0e94c:	e0bff717 	ldw	r2,-36(fp)
  d0e950:	10800c17 	ldw	r2,48(r2)
  d0e954:	e0bfff15 	stw	r2,-4(fp)
  d0e958:	00000306 	br	d0e968 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  d0e95c:	e0bff717 	ldw	r2,-36(fp)
  d0e960:	10800b17 	ldw	r2,44(r2)
  d0e964:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  d0e968:	e0bff717 	ldw	r2,-36(fp)
  d0e96c:	10800f17 	ldw	r2,60(r2)
  d0e970:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  d0e974:	e0bff717 	ldw	r2,-36(fp)
  d0e978:	10800e17 	ldw	r2,56(r2)
  d0e97c:	10800098 	cmpnei	r2,r2,2
  d0e980:	1000051e 	bne	r2,zero,d0e998 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  d0e984:	e0fffe17 	ldw	r3,-8(fp)
  d0e988:	e0fffe17 	ldw	r3,-8(fp)
  d0e98c:	18c5883a 	add	r2,r3,r3
  d0e990:	e0bffe15 	stw	r2,-8(fp)
  d0e994:	00000506 	br	d0e9ac <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  d0e998:	e13ffe17 	ldw	r4,-8(fp)
  d0e99c:	e13ffe17 	ldw	r4,-8(fp)
  d0e9a0:	2105883a 	add	r2,r4,r4
  d0e9a4:	1085883a 	add	r2,r2,r2
  d0e9a8:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  d0e9ac:	e0bff717 	ldw	r2,-36(fp)
  d0e9b0:	10801017 	ldw	r2,64(r2)
  d0e9b4:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  d0e9b8:	e0bff717 	ldw	r2,-36(fp)
  d0e9bc:	10800d17 	ldw	r2,52(r2)
  d0e9c0:	1004c03a 	cmpne	r2,r2,zero
  d0e9c4:	10001e1e 	bne	r2,zero,d0ea40 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  d0e9c8:	e0bff717 	ldw	r2,-36(fp)
  d0e9cc:	10801317 	ldw	r2,76(r2)
  d0e9d0:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  d0e9d4:	e03ffb15 	stw	zero,-20(fp)
  d0e9d8:	00001506 	br	d0ea30 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  d0e9dc:	e03ffc15 	stw	zero,-16(fp)
  d0e9e0:	00000706 	br	d0ea00 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  d0e9e4:	e0ffff17 	ldw	r3,-4(fp)
  d0e9e8:	e0bffc17 	ldw	r2,-16(fp)
  d0e9ec:	1885883a 	add	r2,r3,r2
  d0e9f0:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  d0e9f4:	e0bffc17 	ldw	r2,-16(fp)
  d0e9f8:	10800104 	addi	r2,r2,4
  d0e9fc:	e0bffc15 	stw	r2,-16(fp)
  d0ea00:	e0fffc17 	ldw	r3,-16(fp)
  d0ea04:	e13ffe17 	ldw	r4,-8(fp)
  d0ea08:	193ff636 	bltu	r3,r4,d0e9e4 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  d0ea0c:	e0fffa17 	ldw	r3,-24(fp)
  d0ea10:	00800044 	movi	r2,1
  d0ea14:	10c4983a 	sll	r2,r2,r3
  d0ea18:	e0ffff17 	ldw	r3,-4(fp)
  d0ea1c:	1887883a 	add	r3,r3,r2
  d0ea20:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  d0ea24:	e13ffb17 	ldw	r4,-20(fp)
  d0ea28:	21000044 	addi	r4,r4,1
  d0ea2c:	e13ffb15 	stw	r4,-20(fp)
  d0ea30:	e0bffb17 	ldw	r2,-20(fp)
  d0ea34:	e0fffd17 	ldw	r3,-12(fp)
  d0ea38:	10ffe836 	bltu	r2,r3,d0e9dc <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  d0ea3c:	00001006 	br	d0ea80 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  d0ea40:	e13ffd17 	ldw	r4,-12(fp)
  d0ea44:	e0bffe17 	ldw	r2,-8(fp)
  d0ea48:	2089383a 	mul	r4,r4,r2
  d0ea4c:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  d0ea50:	e03ff915 	stw	zero,-28(fp)
  d0ea54:	00000706 	br	d0ea74 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  d0ea58:	e0ffff17 	ldw	r3,-4(fp)
  d0ea5c:	e0bff917 	ldw	r2,-28(fp)
  d0ea60:	1885883a 	add	r2,r3,r2
  d0ea64:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  d0ea68:	e0fff917 	ldw	r3,-28(fp)
  d0ea6c:	18c00104 	addi	r3,r3,4
  d0ea70:	e0fff915 	stw	r3,-28(fp)
  d0ea74:	e0bff917 	ldw	r2,-28(fp)
  d0ea78:	e13ffd17 	ldw	r4,-12(fp)
  d0ea7c:	113ff636 	bltu	r2,r4,d0ea58 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  d0ea80:	e037883a 	mov	sp,fp
  d0ea84:	df000017 	ldw	fp,0(sp)
  d0ea88:	dec00104 	addi	sp,sp,4
  d0ea8c:	f800283a 	ret

00d0ea90 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  d0ea90:	deffed04 	addi	sp,sp,-76
  d0ea94:	df001215 	stw	fp,72(sp)
  d0ea98:	df001204 	addi	fp,sp,72
  d0ea9c:	e13fee15 	stw	r4,-72(fp)
  d0eaa0:	e17fef15 	stw	r5,-68(fp)
  d0eaa4:	e1bff015 	stw	r6,-64(fp)
  d0eaa8:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  d0eaac:	e0bfee17 	ldw	r2,-72(fp)
  d0eab0:	10800f17 	ldw	r2,60(r2)
  d0eab4:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  d0eab8:	e0bfee17 	ldw	r2,-72(fp)
  d0eabc:	10801017 	ldw	r2,64(r2)
  d0eac0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  d0eac4:	e0bfef17 	ldw	r2,-68(fp)
  d0eac8:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  d0eacc:	e0fff117 	ldw	r3,-60(fp)
  d0ead0:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  d0ead4:	e13ff017 	ldw	r4,-64(fp)
  d0ead8:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  d0eadc:	e0800117 	ldw	r2,4(fp)
  d0eae0:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  d0eae4:	e0c00217 	ldw	r3,8(fp)
  d0eae8:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  d0eaec:	e13ffa17 	ldw	r4,-24(fp)
  d0eaf0:	e0bffb17 	ldw	r2,-20(fp)
  d0eaf4:	2080062e 	bgeu	r4,r2,d0eb10 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  d0eaf8:	e0fffb17 	ldw	r3,-20(fp)
  d0eafc:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  d0eb00:	e13ffa17 	ldw	r4,-24(fp)
  d0eb04:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  d0eb08:	e0bffc17 	ldw	r2,-16(fp)
  d0eb0c:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  d0eb10:	e0fff817 	ldw	r3,-32(fp)
  d0eb14:	e13ff917 	ldw	r4,-28(fp)
  d0eb18:	1900062e 	bgeu	r3,r4,d0eb34 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  d0eb1c:	e0bff917 	ldw	r2,-28(fp)
  d0eb20:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  d0eb24:	e0fff817 	ldw	r3,-32(fp)
  d0eb28:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  d0eb2c:	e13ffc17 	ldw	r4,-16(fp)
  d0eb30:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  d0eb34:	e0bffb17 	ldw	r2,-20(fp)
  d0eb38:	e0fffe17 	ldw	r3,-8(fp)
  d0eb3c:	10c10d2e 	bgeu	r2,r3,d0ef74 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  d0eb40:	e13ff917 	ldw	r4,-28(fp)
  d0eb44:	e0bffd17 	ldw	r2,-12(fp)
  d0eb48:	20800136 	bltu	r4,r2,d0eb50 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  d0eb4c:	00010906 	br	d0ef74 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  d0eb50:	e0fffa17 	ldw	r3,-24(fp)
  d0eb54:	e13ffe17 	ldw	r4,-8(fp)
  d0eb58:	19000336 	bltu	r3,r4,d0eb68 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  d0eb5c:	e0bffe17 	ldw	r2,-8(fp)
  d0eb60:	10bfffc4 	addi	r2,r2,-1
  d0eb64:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  d0eb68:	e0fff817 	ldw	r3,-32(fp)
  d0eb6c:	e13ffd17 	ldw	r4,-12(fp)
  d0eb70:	19000336 	bltu	r3,r4,d0eb80 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  d0eb74:	e0bffd17 	ldw	r2,-12(fp)
  d0eb78:	10bfffc4 	addi	r2,r2,-1
  d0eb7c:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  d0eb80:	e0800317 	ldw	r2,12(fp)
  d0eb84:	10800058 	cmpnei	r2,r2,1
  d0eb88:	1000041e 	bne	r2,zero,d0eb9c <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  d0eb8c:	e0bfee17 	ldw	r2,-72(fp)
  d0eb90:	10800c17 	ldw	r2,48(r2)
  d0eb94:	e0bfff15 	stw	r2,-4(fp)
  d0eb98:	00000306 	br	d0eba8 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  d0eb9c:	e0bfee17 	ldw	r2,-72(fp)
  d0eba0:	10800b17 	ldw	r2,44(r2)
  d0eba4:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  d0eba8:	e0bfee17 	ldw	r2,-72(fp)
  d0ebac:	10800d17 	ldw	r2,52(r2)
  d0ebb0:	1004c03a 	cmpne	r2,r2,zero
  d0ebb4:	1000721e 	bne	r2,zero,d0ed80 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  d0ebb8:	e0bfee17 	ldw	r2,-72(fp)
  d0ebbc:	10801317 	ldw	r2,76(r2)
  d0ebc0:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  d0ebc4:	e0bff417 	ldw	r2,-48(fp)
  d0ebc8:	e0fff917 	ldw	r3,-28(fp)
  d0ebcc:	1884983a 	sll	r2,r3,r2
  d0ebd0:	e13fff17 	ldw	r4,-4(fp)
  d0ebd4:	2089883a 	add	r4,r4,r2
  d0ebd8:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  d0ebdc:	e0bfee17 	ldw	r2,-72(fp)
  d0ebe0:	10800e17 	ldw	r2,56(r2)
  d0ebe4:	10800058 	cmpnei	r2,r2,1
  d0ebe8:	10001e1e 	bne	r2,zero,d0ec64 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  d0ebec:	e0bff917 	ldw	r2,-28(fp)
  d0ebf0:	e0bff515 	stw	r2,-44(fp)
  d0ebf4:	00001706 	br	d0ec54 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  d0ebf8:	e0fffb17 	ldw	r3,-20(fp)
  d0ebfc:	e0fff615 	stw	r3,-40(fp)
  d0ec00:	00000806 	br	d0ec24 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  d0ec04:	e0ffff17 	ldw	r3,-4(fp)
  d0ec08:	e0bff617 	ldw	r2,-40(fp)
  d0ec0c:	1885883a 	add	r2,r3,r2
  d0ec10:	e0fff717 	ldw	r3,-36(fp)
  d0ec14:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  d0ec18:	e13ff617 	ldw	r4,-40(fp)
  d0ec1c:	21000044 	addi	r4,r4,1
  d0ec20:	e13ff615 	stw	r4,-40(fp)
  d0ec24:	e0bffa17 	ldw	r2,-24(fp)
  d0ec28:	e0fff617 	ldw	r3,-40(fp)
  d0ec2c:	10fff52e 	bgeu	r2,r3,d0ec04 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  d0ec30:	e0fff417 	ldw	r3,-48(fp)
  d0ec34:	00800044 	movi	r2,1
  d0ec38:	10c4983a 	sll	r2,r2,r3
  d0ec3c:	e13fff17 	ldw	r4,-4(fp)
  d0ec40:	2089883a 	add	r4,r4,r2
  d0ec44:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  d0ec48:	e0bff517 	ldw	r2,-44(fp)
  d0ec4c:	10800044 	addi	r2,r2,1
  d0ec50:	e0bff515 	stw	r2,-44(fp)
  d0ec54:	e0fff817 	ldw	r3,-32(fp)
  d0ec58:	e13ff517 	ldw	r4,-44(fp)
  d0ec5c:	193fe62e 	bgeu	r3,r4,d0ebf8 <alt_up_pixel_buffer_dma_draw_box+0x168>
  d0ec60:	0000c406 	br	d0ef74 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  d0ec64:	e0bfee17 	ldw	r2,-72(fp)
  d0ec68:	10800e17 	ldw	r2,56(r2)
  d0ec6c:	10800098 	cmpnei	r2,r2,2
  d0ec70:	1000211e 	bne	r2,zero,d0ecf8 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  d0ec74:	e0bff917 	ldw	r2,-28(fp)
  d0ec78:	e0bff515 	stw	r2,-44(fp)
  d0ec7c:	00001a06 	br	d0ece8 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  d0ec80:	e0fffb17 	ldw	r3,-20(fp)
  d0ec84:	e0fff615 	stw	r3,-40(fp)
  d0ec88:	00000b06 	br	d0ecb8 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  d0ec8c:	e13ff617 	ldw	r4,-40(fp)
  d0ec90:	e13ff617 	ldw	r4,-40(fp)
  d0ec94:	2105883a 	add	r2,r4,r4
  d0ec98:	1007883a 	mov	r3,r2
  d0ec9c:	e0bfff17 	ldw	r2,-4(fp)
  d0eca0:	1885883a 	add	r2,r3,r2
  d0eca4:	e0fff717 	ldw	r3,-36(fp)
  d0eca8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  d0ecac:	e0bff617 	ldw	r2,-40(fp)
  d0ecb0:	10800044 	addi	r2,r2,1
  d0ecb4:	e0bff615 	stw	r2,-40(fp)
  d0ecb8:	e0fffa17 	ldw	r3,-24(fp)
  d0ecbc:	e13ff617 	ldw	r4,-40(fp)
  d0ecc0:	193ff22e 	bgeu	r3,r4,d0ec8c <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  d0ecc4:	e0fff417 	ldw	r3,-48(fp)
  d0ecc8:	00800044 	movi	r2,1
  d0eccc:	10c4983a 	sll	r2,r2,r3
  d0ecd0:	e0ffff17 	ldw	r3,-4(fp)
  d0ecd4:	1887883a 	add	r3,r3,r2
  d0ecd8:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  d0ecdc:	e13ff517 	ldw	r4,-44(fp)
  d0ece0:	21000044 	addi	r4,r4,1
  d0ece4:	e13ff515 	stw	r4,-44(fp)
  d0ece8:	e0bff817 	ldw	r2,-32(fp)
  d0ecec:	e0fff517 	ldw	r3,-44(fp)
  d0ecf0:	10ffe32e 	bgeu	r2,r3,d0ec80 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  d0ecf4:	00009f06 	br	d0ef74 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  d0ecf8:	e13ff917 	ldw	r4,-28(fp)
  d0ecfc:	e13ff515 	stw	r4,-44(fp)
  d0ed00:	00001b06 	br	d0ed70 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  d0ed04:	e0bffb17 	ldw	r2,-20(fp)
  d0ed08:	e0bff615 	stw	r2,-40(fp)
  d0ed0c:	00000c06 	br	d0ed40 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  d0ed10:	e0fff617 	ldw	r3,-40(fp)
  d0ed14:	e0fff617 	ldw	r3,-40(fp)
  d0ed18:	18c5883a 	add	r2,r3,r3
  d0ed1c:	1085883a 	add	r2,r2,r2
  d0ed20:	1007883a 	mov	r3,r2
  d0ed24:	e0bfff17 	ldw	r2,-4(fp)
  d0ed28:	1885883a 	add	r2,r3,r2
  d0ed2c:	e0fff717 	ldw	r3,-36(fp)
  d0ed30:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  d0ed34:	e13ff617 	ldw	r4,-40(fp)
  d0ed38:	21000044 	addi	r4,r4,1
  d0ed3c:	e13ff615 	stw	r4,-40(fp)
  d0ed40:	e0bffa17 	ldw	r2,-24(fp)
  d0ed44:	e0fff617 	ldw	r3,-40(fp)
  d0ed48:	10fff12e 	bgeu	r2,r3,d0ed10 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  d0ed4c:	e0fff417 	ldw	r3,-48(fp)
  d0ed50:	00800044 	movi	r2,1
  d0ed54:	10c4983a 	sll	r2,r2,r3
  d0ed58:	e13fff17 	ldw	r4,-4(fp)
  d0ed5c:	2089883a 	add	r4,r4,r2
  d0ed60:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  d0ed64:	e0bff517 	ldw	r2,-44(fp)
  d0ed68:	10800044 	addi	r2,r2,1
  d0ed6c:	e0bff515 	stw	r2,-44(fp)
  d0ed70:	e0fff817 	ldw	r3,-32(fp)
  d0ed74:	e13ff517 	ldw	r4,-44(fp)
  d0ed78:	193fe22e 	bgeu	r3,r4,d0ed04 <alt_up_pixel_buffer_dma_draw_box+0x274>
  d0ed7c:	00007d06 	br	d0ef74 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  d0ed80:	e0bfee17 	ldw	r2,-72(fp)
  d0ed84:	10800e17 	ldw	r2,56(r2)
  d0ed88:	10800058 	cmpnei	r2,r2,1
  d0ed8c:	1000221e 	bne	r2,zero,d0ee18 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  d0ed90:	e0fff917 	ldw	r3,-28(fp)
  d0ed94:	e13ffe17 	ldw	r4,-8(fp)
  d0ed98:	1905383a 	mul	r2,r3,r4
  d0ed9c:	e0ffff17 	ldw	r3,-4(fp)
  d0eda0:	1887883a 	add	r3,r3,r2
  d0eda4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  d0eda8:	e13ff917 	ldw	r4,-28(fp)
  d0edac:	e13ff215 	stw	r4,-56(fp)
  d0edb0:	00001506 	br	d0ee08 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  d0edb4:	e0bffb17 	ldw	r2,-20(fp)
  d0edb8:	e0bff315 	stw	r2,-52(fp)
  d0edbc:	00000806 	br	d0ede0 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  d0edc0:	e0ffff17 	ldw	r3,-4(fp)
  d0edc4:	e0bff317 	ldw	r2,-52(fp)
  d0edc8:	1885883a 	add	r2,r3,r2
  d0edcc:	e0fff717 	ldw	r3,-36(fp)
  d0edd0:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  d0edd4:	e0fff317 	ldw	r3,-52(fp)
  d0edd8:	18c00044 	addi	r3,r3,1
  d0eddc:	e0fff315 	stw	r3,-52(fp)
  d0ede0:	e13ffa17 	ldw	r4,-24(fp)
  d0ede4:	e0bff317 	ldw	r2,-52(fp)
  d0ede8:	20bff52e 	bgeu	r4,r2,d0edc0 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  d0edec:	e0ffff17 	ldw	r3,-4(fp)
  d0edf0:	e13ffe17 	ldw	r4,-8(fp)
  d0edf4:	1907883a 	add	r3,r3,r4
  d0edf8:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  d0edfc:	e0bff217 	ldw	r2,-56(fp)
  d0ee00:	10800044 	addi	r2,r2,1
  d0ee04:	e0bff215 	stw	r2,-56(fp)
  d0ee08:	e0fff817 	ldw	r3,-32(fp)
  d0ee0c:	e13ff217 	ldw	r4,-56(fp)
  d0ee10:	193fe82e 	bgeu	r3,r4,d0edb4 <alt_up_pixel_buffer_dma_draw_box+0x324>
  d0ee14:	00005706 	br	d0ef74 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  d0ee18:	e0bfee17 	ldw	r2,-72(fp)
  d0ee1c:	10800e17 	ldw	r2,56(r2)
  d0ee20:	10800098 	cmpnei	r2,r2,2
  d0ee24:	1000291e 	bne	r2,zero,d0eecc <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  d0ee28:	e0fffe17 	ldw	r3,-8(fp)
  d0ee2c:	e0fffe17 	ldw	r3,-8(fp)
  d0ee30:	18c5883a 	add	r2,r3,r3
  d0ee34:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  d0ee38:	e13ff917 	ldw	r4,-28(fp)
  d0ee3c:	e0fffe17 	ldw	r3,-8(fp)
  d0ee40:	20c5383a 	mul	r2,r4,r3
  d0ee44:	e13fff17 	ldw	r4,-4(fp)
  d0ee48:	2089883a 	add	r4,r4,r2
  d0ee4c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  d0ee50:	e0bff917 	ldw	r2,-28(fp)
  d0ee54:	e0bff215 	stw	r2,-56(fp)
  d0ee58:	00001806 	br	d0eebc <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  d0ee5c:	e0fffb17 	ldw	r3,-20(fp)
  d0ee60:	e0fff315 	stw	r3,-52(fp)
  d0ee64:	00000b06 	br	d0ee94 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  d0ee68:	e13ff317 	ldw	r4,-52(fp)
  d0ee6c:	e13ff317 	ldw	r4,-52(fp)
  d0ee70:	2105883a 	add	r2,r4,r4
  d0ee74:	1007883a 	mov	r3,r2
  d0ee78:	e0bfff17 	ldw	r2,-4(fp)
  d0ee7c:	1885883a 	add	r2,r3,r2
  d0ee80:	e0fff717 	ldw	r3,-36(fp)
  d0ee84:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  d0ee88:	e0bff317 	ldw	r2,-52(fp)
  d0ee8c:	10800044 	addi	r2,r2,1
  d0ee90:	e0bff315 	stw	r2,-52(fp)
  d0ee94:	e0fffa17 	ldw	r3,-24(fp)
  d0ee98:	e13ff317 	ldw	r4,-52(fp)
  d0ee9c:	193ff22e 	bgeu	r3,r4,d0ee68 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  d0eea0:	e0bfff17 	ldw	r2,-4(fp)
  d0eea4:	e0fffe17 	ldw	r3,-8(fp)
  d0eea8:	10c5883a 	add	r2,r2,r3
  d0eeac:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  d0eeb0:	e13ff217 	ldw	r4,-56(fp)
  d0eeb4:	21000044 	addi	r4,r4,1
  d0eeb8:	e13ff215 	stw	r4,-56(fp)
  d0eebc:	e0bff817 	ldw	r2,-32(fp)
  d0eec0:	e0fff217 	ldw	r3,-56(fp)
  d0eec4:	10ffe52e 	bgeu	r2,r3,d0ee5c <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  d0eec8:	00002a06 	br	d0ef74 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  d0eecc:	e13ffe17 	ldw	r4,-8(fp)
  d0eed0:	e13ffe17 	ldw	r4,-8(fp)
  d0eed4:	2105883a 	add	r2,r4,r4
  d0eed8:	1085883a 	add	r2,r2,r2
  d0eedc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  d0eee0:	e0fff917 	ldw	r3,-28(fp)
  d0eee4:	e13ffe17 	ldw	r4,-8(fp)
  d0eee8:	1905383a 	mul	r2,r3,r4
  d0eeec:	e0ffff17 	ldw	r3,-4(fp)
  d0eef0:	1887883a 	add	r3,r3,r2
  d0eef4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  d0eef8:	e13ff917 	ldw	r4,-28(fp)
  d0eefc:	e13ff215 	stw	r4,-56(fp)
  d0ef00:	00001906 	br	d0ef68 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  d0ef04:	e0bffb17 	ldw	r2,-20(fp)
  d0ef08:	e0bff315 	stw	r2,-52(fp)
  d0ef0c:	00000c06 	br	d0ef40 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  d0ef10:	e0fff317 	ldw	r3,-52(fp)
  d0ef14:	e0fff317 	ldw	r3,-52(fp)
  d0ef18:	18c5883a 	add	r2,r3,r3
  d0ef1c:	1085883a 	add	r2,r2,r2
  d0ef20:	1007883a 	mov	r3,r2
  d0ef24:	e0bfff17 	ldw	r2,-4(fp)
  d0ef28:	1885883a 	add	r2,r3,r2
  d0ef2c:	e0fff717 	ldw	r3,-36(fp)
  d0ef30:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  d0ef34:	e13ff317 	ldw	r4,-52(fp)
  d0ef38:	21000044 	addi	r4,r4,1
  d0ef3c:	e13ff315 	stw	r4,-52(fp)
  d0ef40:	e0bffa17 	ldw	r2,-24(fp)
  d0ef44:	e0fff317 	ldw	r3,-52(fp)
  d0ef48:	10fff12e 	bgeu	r2,r3,d0ef10 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  d0ef4c:	e13fff17 	ldw	r4,-4(fp)
  d0ef50:	e0bffe17 	ldw	r2,-8(fp)
  d0ef54:	2089883a 	add	r4,r4,r2
  d0ef58:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  d0ef5c:	e0fff217 	ldw	r3,-56(fp)
  d0ef60:	18c00044 	addi	r3,r3,1
  d0ef64:	e0fff215 	stw	r3,-56(fp)
  d0ef68:	e13ff817 	ldw	r4,-32(fp)
  d0ef6c:	e0bff217 	ldw	r2,-56(fp)
  d0ef70:	20bfe42e 	bgeu	r4,r2,d0ef04 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  d0ef74:	e037883a 	mov	sp,fp
  d0ef78:	df000017 	ldw	fp,0(sp)
  d0ef7c:	dec00104 	addi	sp,sp,4
  d0ef80:	f800283a 	ret

00d0ef84 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  d0ef84:	defff204 	addi	sp,sp,-56
  d0ef88:	df000d15 	stw	fp,52(sp)
  d0ef8c:	df000d04 	addi	fp,sp,52
  d0ef90:	e13ff315 	stw	r4,-52(fp)
  d0ef94:	e17ff415 	stw	r5,-48(fp)
  d0ef98:	e1bff515 	stw	r6,-44(fp)
  d0ef9c:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  d0efa0:	e0bff317 	ldw	r2,-52(fp)
  d0efa4:	10800f17 	ldw	r2,60(r2)
  d0efa8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  d0efac:	e0bff317 	ldw	r2,-52(fp)
  d0efb0:	10801017 	ldw	r2,64(r2)
  d0efb4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  d0efb8:	e0bff417 	ldw	r2,-48(fp)
  d0efbc:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  d0efc0:	e0fff517 	ldw	r3,-44(fp)
  d0efc4:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  d0efc8:	e13ff617 	ldw	r4,-40(fp)
  d0efcc:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  d0efd0:	e0800117 	ldw	r2,4(fp)
  d0efd4:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  d0efd8:	e0fffb17 	ldw	r3,-20(fp)
  d0efdc:	e13ffc17 	ldw	r4,-16(fp)
  d0efe0:	1900042e 	bgeu	r3,r4,d0eff4 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  d0efe4:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  d0efe8:	e0fffb17 	ldw	r3,-20(fp)
  d0efec:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  d0eff0:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  d0eff4:	e13ffc17 	ldw	r4,-16(fp)
  d0eff8:	e0bffe17 	ldw	r2,-8(fp)
  d0effc:	2080b12e 	bgeu	r4,r2,d0f2c4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
  d0f000:	e0fffa17 	ldw	r3,-24(fp)
  d0f004:	e13ffd17 	ldw	r4,-12(fp)
  d0f008:	19000136 	bltu	r3,r4,d0f010 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  d0f00c:	0000ad06 	br	d0f2c4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  d0f010:	e0bffb17 	ldw	r2,-20(fp)
  d0f014:	e0fffe17 	ldw	r3,-8(fp)
  d0f018:	10c00336 	bltu	r2,r3,d0f028 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  d0f01c:	e13ffe17 	ldw	r4,-8(fp)
  d0f020:	213fffc4 	addi	r4,r4,-1
  d0f024:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  d0f028:	e0800217 	ldw	r2,8(fp)
  d0f02c:	10800058 	cmpnei	r2,r2,1
  d0f030:	1000041e 	bne	r2,zero,d0f044 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  d0f034:	e0bff317 	ldw	r2,-52(fp)
  d0f038:	10800c17 	ldw	r2,48(r2)
  d0f03c:	e0bfff15 	stw	r2,-4(fp)
  d0f040:	00000306 	br	d0f050 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  d0f044:	e0bff317 	ldw	r2,-52(fp)
  d0f048:	10800b17 	ldw	r2,44(r2)
  d0f04c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  d0f050:	e0bff317 	ldw	r2,-52(fp)
  d0f054:	10800d17 	ldw	r2,52(r2)
  d0f058:	1004c03a 	cmpne	r2,r2,zero
  d0f05c:	1000431e 	bne	r2,zero,d0f16c <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  d0f060:	e0bff317 	ldw	r2,-52(fp)
  d0f064:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  d0f068:	e0fffa17 	ldw	r3,-24(fp)
  d0f06c:	1884983a 	sll	r2,r3,r2
  d0f070:	e13fff17 	ldw	r4,-4(fp)
  d0f074:	2089883a 	add	r4,r4,r2
  d0f078:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  d0f07c:	e0bff317 	ldw	r2,-52(fp)
  d0f080:	10800e17 	ldw	r2,56(r2)
  d0f084:	10800058 	cmpnei	r2,r2,1
  d0f088:	10000f1e 	bne	r2,zero,d0f0c8 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  d0f08c:	e0bffc17 	ldw	r2,-16(fp)
  d0f090:	e0bff815 	stw	r2,-32(fp)
  d0f094:	00000806 	br	d0f0b8 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  d0f098:	e0ffff17 	ldw	r3,-4(fp)
  d0f09c:	e0bff817 	ldw	r2,-32(fp)
  d0f0a0:	1885883a 	add	r2,r3,r2
  d0f0a4:	e0fff917 	ldw	r3,-28(fp)
  d0f0a8:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  d0f0ac:	e0fff817 	ldw	r3,-32(fp)
  d0f0b0:	18c00044 	addi	r3,r3,1
  d0f0b4:	e0fff815 	stw	r3,-32(fp)
  d0f0b8:	e13ffb17 	ldw	r4,-20(fp)
  d0f0bc:	e0bff817 	ldw	r2,-32(fp)
  d0f0c0:	20bff52e 	bgeu	r4,r2,d0f098 <alt_up_pixel_buffer_dma_draw_hline+0x114>
  d0f0c4:	00007f06 	br	d0f2c4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  d0f0c8:	e0bff317 	ldw	r2,-52(fp)
  d0f0cc:	10800e17 	ldw	r2,56(r2)
  d0f0d0:	10800098 	cmpnei	r2,r2,2
  d0f0d4:	1000121e 	bne	r2,zero,d0f120 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  d0f0d8:	e0fffc17 	ldw	r3,-16(fp)
  d0f0dc:	e0fff815 	stw	r3,-32(fp)
  d0f0e0:	00000b06 	br	d0f110 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  d0f0e4:	e13ff817 	ldw	r4,-32(fp)
  d0f0e8:	e13ff817 	ldw	r4,-32(fp)
  d0f0ec:	2105883a 	add	r2,r4,r4
  d0f0f0:	1007883a 	mov	r3,r2
  d0f0f4:	e0bfff17 	ldw	r2,-4(fp)
  d0f0f8:	1885883a 	add	r2,r3,r2
  d0f0fc:	e0fff917 	ldw	r3,-28(fp)
  d0f100:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  d0f104:	e0bff817 	ldw	r2,-32(fp)
  d0f108:	10800044 	addi	r2,r2,1
  d0f10c:	e0bff815 	stw	r2,-32(fp)
  d0f110:	e0fffb17 	ldw	r3,-20(fp)
  d0f114:	e13ff817 	ldw	r4,-32(fp)
  d0f118:	193ff22e 	bgeu	r3,r4,d0f0e4 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  d0f11c:	00006906 	br	d0f2c4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  d0f120:	e0bffc17 	ldw	r2,-16(fp)
  d0f124:	e0bff815 	stw	r2,-32(fp)
  d0f128:	00000c06 	br	d0f15c <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  d0f12c:	e0fff817 	ldw	r3,-32(fp)
  d0f130:	e0fff817 	ldw	r3,-32(fp)
  d0f134:	18c5883a 	add	r2,r3,r3
  d0f138:	1085883a 	add	r2,r2,r2
  d0f13c:	1007883a 	mov	r3,r2
  d0f140:	e0bfff17 	ldw	r2,-4(fp)
  d0f144:	1885883a 	add	r2,r3,r2
  d0f148:	e0fff917 	ldw	r3,-28(fp)
  d0f14c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  d0f150:	e13ff817 	ldw	r4,-32(fp)
  d0f154:	21000044 	addi	r4,r4,1
  d0f158:	e13ff815 	stw	r4,-32(fp)
  d0f15c:	e0bffb17 	ldw	r2,-20(fp)
  d0f160:	e0fff817 	ldw	r3,-32(fp)
  d0f164:	10fff12e 	bgeu	r2,r3,d0f12c <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  d0f168:	00005606 	br	d0f2c4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  d0f16c:	e0bff317 	ldw	r2,-52(fp)
  d0f170:	10800e17 	ldw	r2,56(r2)
  d0f174:	10800058 	cmpnei	r2,r2,1
  d0f178:	1000151e 	bne	r2,zero,d0f1d0 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  d0f17c:	e13ffa17 	ldw	r4,-24(fp)
  d0f180:	e0fffe17 	ldw	r3,-8(fp)
  d0f184:	20c5383a 	mul	r2,r4,r3
  d0f188:	e13fff17 	ldw	r4,-4(fp)
  d0f18c:	2089883a 	add	r4,r4,r2
  d0f190:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  d0f194:	e0bffc17 	ldw	r2,-16(fp)
  d0f198:	e0bff715 	stw	r2,-36(fp)
  d0f19c:	00000806 	br	d0f1c0 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  d0f1a0:	e0ffff17 	ldw	r3,-4(fp)
  d0f1a4:	e0bff717 	ldw	r2,-36(fp)
  d0f1a8:	1885883a 	add	r2,r3,r2
  d0f1ac:	e0fff917 	ldw	r3,-28(fp)
  d0f1b0:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  d0f1b4:	e0fff717 	ldw	r3,-36(fp)
  d0f1b8:	18c00044 	addi	r3,r3,1
  d0f1bc:	e0fff715 	stw	r3,-36(fp)
  d0f1c0:	e13ffb17 	ldw	r4,-20(fp)
  d0f1c4:	e0bff717 	ldw	r2,-36(fp)
  d0f1c8:	20bff52e 	bgeu	r4,r2,d0f1a0 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  d0f1cc:	00003d06 	br	d0f2c4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  d0f1d0:	e0bff317 	ldw	r2,-52(fp)
  d0f1d4:	10800e17 	ldw	r2,56(r2)
  d0f1d8:	10800098 	cmpnei	r2,r2,2
  d0f1dc:	10001c1e 	bne	r2,zero,d0f250 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  d0f1e0:	e0fffe17 	ldw	r3,-8(fp)
  d0f1e4:	e0fffe17 	ldw	r3,-8(fp)
  d0f1e8:	18c5883a 	add	r2,r3,r3
  d0f1ec:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  d0f1f0:	e13ffa17 	ldw	r4,-24(fp)
  d0f1f4:	e0fffe17 	ldw	r3,-8(fp)
  d0f1f8:	20c5383a 	mul	r2,r4,r3
  d0f1fc:	e13fff17 	ldw	r4,-4(fp)
  d0f200:	2089883a 	add	r4,r4,r2
  d0f204:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  d0f208:	e0bffc17 	ldw	r2,-16(fp)
  d0f20c:	e0bff715 	stw	r2,-36(fp)
  d0f210:	00000b06 	br	d0f240 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  d0f214:	e0fff717 	ldw	r3,-36(fp)
  d0f218:	e0fff717 	ldw	r3,-36(fp)
  d0f21c:	18c5883a 	add	r2,r3,r3
  d0f220:	1007883a 	mov	r3,r2
  d0f224:	e0bfff17 	ldw	r2,-4(fp)
  d0f228:	1885883a 	add	r2,r3,r2
  d0f22c:	e0fff917 	ldw	r3,-28(fp)
  d0f230:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  d0f234:	e13ff717 	ldw	r4,-36(fp)
  d0f238:	21000044 	addi	r4,r4,1
  d0f23c:	e13ff715 	stw	r4,-36(fp)
  d0f240:	e0bffb17 	ldw	r2,-20(fp)
  d0f244:	e0fff717 	ldw	r3,-36(fp)
  d0f248:	10fff22e 	bgeu	r2,r3,d0f214 <alt_up_pixel_buffer_dma_draw_hline+0x290>
  d0f24c:	00001d06 	br	d0f2c4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  d0f250:	e13ffe17 	ldw	r4,-8(fp)
  d0f254:	e13ffe17 	ldw	r4,-8(fp)
  d0f258:	2105883a 	add	r2,r4,r4
  d0f25c:	1085883a 	add	r2,r2,r2
  d0f260:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  d0f264:	e0fffa17 	ldw	r3,-24(fp)
  d0f268:	e13ffe17 	ldw	r4,-8(fp)
  d0f26c:	1905383a 	mul	r2,r3,r4
  d0f270:	e0ffff17 	ldw	r3,-4(fp)
  d0f274:	1887883a 	add	r3,r3,r2
  d0f278:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  d0f27c:	e13ffc17 	ldw	r4,-16(fp)
  d0f280:	e13ff715 	stw	r4,-36(fp)
  d0f284:	00000c06 	br	d0f2b8 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  d0f288:	e0fff717 	ldw	r3,-36(fp)
  d0f28c:	e0fff717 	ldw	r3,-36(fp)
  d0f290:	18c5883a 	add	r2,r3,r3
  d0f294:	1085883a 	add	r2,r2,r2
  d0f298:	1007883a 	mov	r3,r2
  d0f29c:	e0bfff17 	ldw	r2,-4(fp)
  d0f2a0:	1885883a 	add	r2,r3,r2
  d0f2a4:	e0fff917 	ldw	r3,-28(fp)
  d0f2a8:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  d0f2ac:	e13ff717 	ldw	r4,-36(fp)
  d0f2b0:	21000044 	addi	r4,r4,1
  d0f2b4:	e13ff715 	stw	r4,-36(fp)
  d0f2b8:	e0bffb17 	ldw	r2,-20(fp)
  d0f2bc:	e0fff717 	ldw	r3,-36(fp)
  d0f2c0:	10fff12e 	bgeu	r2,r3,d0f288 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  d0f2c4:	e037883a 	mov	sp,fp
  d0f2c8:	df000017 	ldw	fp,0(sp)
  d0f2cc:	dec00104 	addi	sp,sp,4
  d0f2d0:	f800283a 	ret

00d0f2d4 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  d0f2d4:	defff104 	addi	sp,sp,-60
  d0f2d8:	df000e15 	stw	fp,56(sp)
  d0f2dc:	df000e04 	addi	fp,sp,56
  d0f2e0:	e13ff215 	stw	r4,-56(fp)
  d0f2e4:	e17ff315 	stw	r5,-52(fp)
  d0f2e8:	e1bff415 	stw	r6,-48(fp)
  d0f2ec:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  d0f2f0:	e0bff217 	ldw	r2,-56(fp)
  d0f2f4:	10800f17 	ldw	r2,60(r2)
  d0f2f8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  d0f2fc:	e0bff217 	ldw	r2,-56(fp)
  d0f300:	10801017 	ldw	r2,64(r2)
  d0f304:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  d0f308:	e0bff317 	ldw	r2,-52(fp)
  d0f30c:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  d0f310:	e0fff417 	ldw	r3,-48(fp)
  d0f314:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  d0f318:	e13ff517 	ldw	r4,-44(fp)
  d0f31c:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  d0f320:	e0800117 	ldw	r2,4(fp)
  d0f324:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  d0f328:	e0fffa17 	ldw	r3,-24(fp)
  d0f32c:	e13ffb17 	ldw	r4,-20(fp)
  d0f330:	1900042e 	bgeu	r3,r4,d0f344 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  d0f334:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  d0f338:	e0fffa17 	ldw	r3,-24(fp)
  d0f33c:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  d0f340:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  d0f344:	e13ffc17 	ldw	r4,-16(fp)
  d0f348:	e0bffe17 	ldw	r2,-8(fp)
  d0f34c:	2080d12e 	bgeu	r4,r2,d0f694 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  d0f350:	e0fffb17 	ldw	r3,-20(fp)
  d0f354:	e13ffd17 	ldw	r4,-12(fp)
  d0f358:	19000136 	bltu	r3,r4,d0f360 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  d0f35c:	0000cd06 	br	d0f694 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  d0f360:	e0bffa17 	ldw	r2,-24(fp)
  d0f364:	e0fffd17 	ldw	r3,-12(fp)
  d0f368:	10c00336 	bltu	r2,r3,d0f378 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  d0f36c:	e13ffd17 	ldw	r4,-12(fp)
  d0f370:	213fffc4 	addi	r4,r4,-1
  d0f374:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  d0f378:	e0800217 	ldw	r2,8(fp)
  d0f37c:	10800058 	cmpnei	r2,r2,1
  d0f380:	1000041e 	bne	r2,zero,d0f394 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  d0f384:	e0bff217 	ldw	r2,-56(fp)
  d0f388:	10800c17 	ldw	r2,48(r2)
  d0f38c:	e0bfff15 	stw	r2,-4(fp)
  d0f390:	00000306 	br	d0f3a0 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  d0f394:	e0bff217 	ldw	r2,-56(fp)
  d0f398:	10800b17 	ldw	r2,44(r2)
  d0f39c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  d0f3a0:	e0bff217 	ldw	r2,-56(fp)
  d0f3a4:	10800d17 	ldw	r2,52(r2)
  d0f3a8:	1004c03a 	cmpne	r2,r2,zero
  d0f3ac:	1000571e 	bne	r2,zero,d0f50c <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  d0f3b0:	e0bff217 	ldw	r2,-56(fp)
  d0f3b4:	10801317 	ldw	r2,76(r2)
  d0f3b8:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  d0f3bc:	e0bff717 	ldw	r2,-36(fp)
  d0f3c0:	e0fffb17 	ldw	r3,-20(fp)
  d0f3c4:	1884983a 	sll	r2,r3,r2
  d0f3c8:	e13fff17 	ldw	r4,-4(fp)
  d0f3cc:	2089883a 	add	r4,r4,r2
  d0f3d0:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  d0f3d4:	e0bff217 	ldw	r2,-56(fp)
  d0f3d8:	10800e17 	ldw	r2,56(r2)
  d0f3dc:	10800058 	cmpnei	r2,r2,1
  d0f3e0:	1000151e 	bne	r2,zero,d0f438 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  d0f3e4:	e0bffb17 	ldw	r2,-20(fp)
  d0f3e8:	e0bff815 	stw	r2,-32(fp)
  d0f3ec:	00000e06 	br	d0f428 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  d0f3f0:	e0ffff17 	ldw	r3,-4(fp)
  d0f3f4:	e0bffc17 	ldw	r2,-16(fp)
  d0f3f8:	1885883a 	add	r2,r3,r2
  d0f3fc:	e0fff917 	ldw	r3,-28(fp)
  d0f400:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  d0f404:	e0fff717 	ldw	r3,-36(fp)
  d0f408:	00800044 	movi	r2,1
  d0f40c:	10c4983a 	sll	r2,r2,r3
  d0f410:	e0ffff17 	ldw	r3,-4(fp)
  d0f414:	1887883a 	add	r3,r3,r2
  d0f418:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  d0f41c:	e13ff817 	ldw	r4,-32(fp)
  d0f420:	21000044 	addi	r4,r4,1
  d0f424:	e13ff815 	stw	r4,-32(fp)
  d0f428:	e0bffa17 	ldw	r2,-24(fp)
  d0f42c:	e0fff817 	ldw	r3,-32(fp)
  d0f430:	10ffef2e 	bgeu	r2,r3,d0f3f0 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  d0f434:	00009706 	br	d0f694 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  d0f438:	e0bff217 	ldw	r2,-56(fp)
  d0f43c:	10800e17 	ldw	r2,56(r2)
  d0f440:	10800098 	cmpnei	r2,r2,2
  d0f444:	1000181e 	bne	r2,zero,d0f4a8 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  d0f448:	e13ffb17 	ldw	r4,-20(fp)
  d0f44c:	e13ff815 	stw	r4,-32(fp)
  d0f450:	00001106 	br	d0f498 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  d0f454:	e0fffc17 	ldw	r3,-16(fp)
  d0f458:	e0fffc17 	ldw	r3,-16(fp)
  d0f45c:	18c5883a 	add	r2,r3,r3
  d0f460:	1007883a 	mov	r3,r2
  d0f464:	e0bfff17 	ldw	r2,-4(fp)
  d0f468:	1885883a 	add	r2,r3,r2
  d0f46c:	e0fff917 	ldw	r3,-28(fp)
  d0f470:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  d0f474:	e0fff717 	ldw	r3,-36(fp)
  d0f478:	00800044 	movi	r2,1
  d0f47c:	10c4983a 	sll	r2,r2,r3
  d0f480:	e13fff17 	ldw	r4,-4(fp)
  d0f484:	2089883a 	add	r4,r4,r2
  d0f488:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  d0f48c:	e0bff817 	ldw	r2,-32(fp)
  d0f490:	10800044 	addi	r2,r2,1
  d0f494:	e0bff815 	stw	r2,-32(fp)
  d0f498:	e0fffa17 	ldw	r3,-24(fp)
  d0f49c:	e13ff817 	ldw	r4,-32(fp)
  d0f4a0:	193fec2e 	bgeu	r3,r4,d0f454 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  d0f4a4:	00007b06 	br	d0f694 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  d0f4a8:	e0bffb17 	ldw	r2,-20(fp)
  d0f4ac:	e0bff815 	stw	r2,-32(fp)
  d0f4b0:	00001206 	br	d0f4fc <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  d0f4b4:	e0fffc17 	ldw	r3,-16(fp)
  d0f4b8:	e0fffc17 	ldw	r3,-16(fp)
  d0f4bc:	18c5883a 	add	r2,r3,r3
  d0f4c0:	1085883a 	add	r2,r2,r2
  d0f4c4:	1007883a 	mov	r3,r2
  d0f4c8:	e0bfff17 	ldw	r2,-4(fp)
  d0f4cc:	1885883a 	add	r2,r3,r2
  d0f4d0:	e0fff917 	ldw	r3,-28(fp)
  d0f4d4:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  d0f4d8:	e0fff717 	ldw	r3,-36(fp)
  d0f4dc:	00800044 	movi	r2,1
  d0f4e0:	10c4983a 	sll	r2,r2,r3
  d0f4e4:	e13fff17 	ldw	r4,-4(fp)
  d0f4e8:	2089883a 	add	r4,r4,r2
  d0f4ec:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  d0f4f0:	e0bff817 	ldw	r2,-32(fp)
  d0f4f4:	10800044 	addi	r2,r2,1
  d0f4f8:	e0bff815 	stw	r2,-32(fp)
  d0f4fc:	e0fffa17 	ldw	r3,-24(fp)
  d0f500:	e13ff817 	ldw	r4,-32(fp)
  d0f504:	193feb2e 	bgeu	r3,r4,d0f4b4 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  d0f508:	00006206 	br	d0f694 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  d0f50c:	e0bff217 	ldw	r2,-56(fp)
  d0f510:	10800e17 	ldw	r2,56(r2)
  d0f514:	10800058 	cmpnei	r2,r2,1
  d0f518:	1000191e 	bne	r2,zero,d0f580 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  d0f51c:	e0fffb17 	ldw	r3,-20(fp)
  d0f520:	e13ffe17 	ldw	r4,-8(fp)
  d0f524:	1905383a 	mul	r2,r3,r4
  d0f528:	e0ffff17 	ldw	r3,-4(fp)
  d0f52c:	1887883a 	add	r3,r3,r2
  d0f530:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  d0f534:	e13ffb17 	ldw	r4,-20(fp)
  d0f538:	e13ff615 	stw	r4,-40(fp)
  d0f53c:	00000c06 	br	d0f570 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  d0f540:	e0ffff17 	ldw	r3,-4(fp)
  d0f544:	e0bffc17 	ldw	r2,-16(fp)
  d0f548:	1885883a 	add	r2,r3,r2
  d0f54c:	e0fff917 	ldw	r3,-28(fp)
  d0f550:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  d0f554:	e0bfff17 	ldw	r2,-4(fp)
  d0f558:	e0fffe17 	ldw	r3,-8(fp)
  d0f55c:	10c5883a 	add	r2,r2,r3
  d0f560:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  d0f564:	e13ff617 	ldw	r4,-40(fp)
  d0f568:	21000044 	addi	r4,r4,1
  d0f56c:	e13ff615 	stw	r4,-40(fp)
  d0f570:	e0bffa17 	ldw	r2,-24(fp)
  d0f574:	e0fff617 	ldw	r3,-40(fp)
  d0f578:	10fff12e 	bgeu	r2,r3,d0f540 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  d0f57c:	00004506 	br	d0f694 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  d0f580:	e0bff217 	ldw	r2,-56(fp)
  d0f584:	10800e17 	ldw	r2,56(r2)
  d0f588:	10800098 	cmpnei	r2,r2,2
  d0f58c:	1000201e 	bne	r2,zero,d0f610 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  d0f590:	e13ffe17 	ldw	r4,-8(fp)
  d0f594:	e13ffe17 	ldw	r4,-8(fp)
  d0f598:	2105883a 	add	r2,r4,r4
  d0f59c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  d0f5a0:	e0fffb17 	ldw	r3,-20(fp)
  d0f5a4:	e13ffe17 	ldw	r4,-8(fp)
  d0f5a8:	1905383a 	mul	r2,r3,r4
  d0f5ac:	e0ffff17 	ldw	r3,-4(fp)
  d0f5b0:	1887883a 	add	r3,r3,r2
  d0f5b4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  d0f5b8:	e13ffb17 	ldw	r4,-20(fp)
  d0f5bc:	e13ff615 	stw	r4,-40(fp)
  d0f5c0:	00000f06 	br	d0f600 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  d0f5c4:	e0fffc17 	ldw	r3,-16(fp)
  d0f5c8:	e0fffc17 	ldw	r3,-16(fp)
  d0f5cc:	18c5883a 	add	r2,r3,r3
  d0f5d0:	1007883a 	mov	r3,r2
  d0f5d4:	e0bfff17 	ldw	r2,-4(fp)
  d0f5d8:	1885883a 	add	r2,r3,r2
  d0f5dc:	e0fff917 	ldw	r3,-28(fp)
  d0f5e0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  d0f5e4:	e13fff17 	ldw	r4,-4(fp)
  d0f5e8:	e0bffe17 	ldw	r2,-8(fp)
  d0f5ec:	2089883a 	add	r4,r4,r2
  d0f5f0:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  d0f5f4:	e0fff617 	ldw	r3,-40(fp)
  d0f5f8:	18c00044 	addi	r3,r3,1
  d0f5fc:	e0fff615 	stw	r3,-40(fp)
  d0f600:	e13ffa17 	ldw	r4,-24(fp)
  d0f604:	e0bff617 	ldw	r2,-40(fp)
  d0f608:	20bfee2e 	bgeu	r4,r2,d0f5c4 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  d0f60c:	00002106 	br	d0f694 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  d0f610:	e0fffe17 	ldw	r3,-8(fp)
  d0f614:	e0fffe17 	ldw	r3,-8(fp)
  d0f618:	18c5883a 	add	r2,r3,r3
  d0f61c:	1085883a 	add	r2,r2,r2
  d0f620:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  d0f624:	e13ffb17 	ldw	r4,-20(fp)
  d0f628:	e0fffe17 	ldw	r3,-8(fp)
  d0f62c:	20c5383a 	mul	r2,r4,r3
  d0f630:	e13fff17 	ldw	r4,-4(fp)
  d0f634:	2089883a 	add	r4,r4,r2
  d0f638:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  d0f63c:	e0bffb17 	ldw	r2,-20(fp)
  d0f640:	e0bff615 	stw	r2,-40(fp)
  d0f644:	00001006 	br	d0f688 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  d0f648:	e0fffc17 	ldw	r3,-16(fp)
  d0f64c:	e0fffc17 	ldw	r3,-16(fp)
  d0f650:	18c5883a 	add	r2,r3,r3
  d0f654:	1085883a 	add	r2,r2,r2
  d0f658:	1007883a 	mov	r3,r2
  d0f65c:	e0bfff17 	ldw	r2,-4(fp)
  d0f660:	1885883a 	add	r2,r3,r2
  d0f664:	e0fff917 	ldw	r3,-28(fp)
  d0f668:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  d0f66c:	e13fff17 	ldw	r4,-4(fp)
  d0f670:	e0bffe17 	ldw	r2,-8(fp)
  d0f674:	2089883a 	add	r4,r4,r2
  d0f678:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  d0f67c:	e0fff617 	ldw	r3,-40(fp)
  d0f680:	18c00044 	addi	r3,r3,1
  d0f684:	e0fff615 	stw	r3,-40(fp)
  d0f688:	e13ffa17 	ldw	r4,-24(fp)
  d0f68c:	e0bff617 	ldw	r2,-40(fp)
  d0f690:	20bfed2e 	bgeu	r4,r2,d0f648 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  d0f694:	e037883a 	mov	sp,fp
  d0f698:	df000017 	ldw	fp,0(sp)
  d0f69c:	dec00104 	addi	sp,sp,4
  d0f6a0:	f800283a 	ret

00d0f6a4 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  d0f6a4:	defff804 	addi	sp,sp,-32
  d0f6a8:	dfc00715 	stw	ra,28(sp)
  d0f6ac:	df000615 	stw	fp,24(sp)
  d0f6b0:	df000604 	addi	fp,sp,24
  d0f6b4:	e13ffc15 	stw	r4,-16(fp)
  d0f6b8:	e17ffd15 	stw	r5,-12(fp)
  d0f6bc:	e1bffe15 	stw	r6,-8(fp)
  d0f6c0:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  d0f6c4:	e0800317 	ldw	r2,12(fp)
  d0f6c8:	d8800015 	stw	r2,0(sp)
  d0f6cc:	e0800417 	ldw	r2,16(fp)
  d0f6d0:	d8800115 	stw	r2,4(sp)
  d0f6d4:	e13ffc17 	ldw	r4,-16(fp)
  d0f6d8:	e17ffd17 	ldw	r5,-12(fp)
  d0f6dc:	e1bfff17 	ldw	r6,-4(fp)
  d0f6e0:	e1fffe17 	ldw	r7,-8(fp)
  d0f6e4:	0d0ef840 	call	d0ef84 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  d0f6e8:	e0800317 	ldw	r2,12(fp)
  d0f6ec:	d8800015 	stw	r2,0(sp)
  d0f6f0:	e0800417 	ldw	r2,16(fp)
  d0f6f4:	d8800115 	stw	r2,4(sp)
  d0f6f8:	e13ffc17 	ldw	r4,-16(fp)
  d0f6fc:	e17ffd17 	ldw	r5,-12(fp)
  d0f700:	e1bfff17 	ldw	r6,-4(fp)
  d0f704:	e1c00217 	ldw	r7,8(fp)
  d0f708:	0d0ef840 	call	d0ef84 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  d0f70c:	e0800317 	ldw	r2,12(fp)
  d0f710:	d8800015 	stw	r2,0(sp)
  d0f714:	e0800417 	ldw	r2,16(fp)
  d0f718:	d8800115 	stw	r2,4(sp)
  d0f71c:	e13ffc17 	ldw	r4,-16(fp)
  d0f720:	e17ffd17 	ldw	r5,-12(fp)
  d0f724:	e1bffe17 	ldw	r6,-8(fp)
  d0f728:	e1c00217 	ldw	r7,8(fp)
  d0f72c:	0d0f2d40 	call	d0f2d4 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  d0f730:	e0800317 	ldw	r2,12(fp)
  d0f734:	d8800015 	stw	r2,0(sp)
  d0f738:	e0800417 	ldw	r2,16(fp)
  d0f73c:	d8800115 	stw	r2,4(sp)
  d0f740:	e13ffc17 	ldw	r4,-16(fp)
  d0f744:	e17fff17 	ldw	r5,-4(fp)
  d0f748:	e1bffe17 	ldw	r6,-8(fp)
  d0f74c:	e1c00217 	ldw	r7,8(fp)
  d0f750:	0d0f2d40 	call	d0f2d4 <alt_up_pixel_buffer_dma_draw_vline>
}
  d0f754:	e037883a 	mov	sp,fp
  d0f758:	dfc00117 	ldw	ra,4(sp)
  d0f75c:	df000017 	ldw	fp,0(sp)
  d0f760:	dec00204 	addi	sp,sp,8
  d0f764:	f800283a 	ret

00d0f768 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  d0f768:	defffb04 	addi	sp,sp,-20
  d0f76c:	df000415 	stw	fp,16(sp)
  d0f770:	df000404 	addi	fp,sp,16
  d0f774:	e13ffc15 	stw	r4,-16(fp)
  d0f778:	e17ffd15 	stw	r5,-12(fp)
  d0f77c:	e1bffe15 	stw	r6,-8(fp)
  d0f780:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  d0f784:	e0c00217 	ldw	r3,8(fp)
  d0f788:	1804c03a 	cmpne	r2,r3,zero
  d0f78c:	10000b1e 	bne	r2,zero,d0f7bc <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  d0f790:	e13ffd17 	ldw	r4,-12(fp)
  d0f794:	e0ffff17 	ldw	r3,-4(fp)
  d0f798:	20c5383a 	mul	r2,r4,r3
  d0f79c:	e13ffe17 	ldw	r4,-8(fp)
  d0f7a0:	1105883a 	add	r2,r2,r4
  d0f7a4:	1007883a 	mov	r3,r2
  d0f7a8:	e0bffc17 	ldw	r2,-16(fp)
  d0f7ac:	1885883a 	add	r2,r3,r2
  d0f7b0:	e0c00117 	ldw	r3,4(fp)
  d0f7b4:	10c00025 	stbio	r3,0(r2)
  d0f7b8:	00001b06 	br	d0f828 <helper_plot_pixel+0xc0>
	else if (mode == 1)
  d0f7bc:	e1000217 	ldw	r4,8(fp)
  d0f7c0:	20800058 	cmpnei	r2,r4,1
  d0f7c4:	10000c1e 	bne	r2,zero,d0f7f8 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  d0f7c8:	e0fffd17 	ldw	r3,-12(fp)
  d0f7cc:	e13fff17 	ldw	r4,-4(fp)
  d0f7d0:	1905383a 	mul	r2,r3,r4
  d0f7d4:	e0fffe17 	ldw	r3,-8(fp)
  d0f7d8:	10c5883a 	add	r2,r2,r3
  d0f7dc:	1085883a 	add	r2,r2,r2
  d0f7e0:	1007883a 	mov	r3,r2
  d0f7e4:	e0bffc17 	ldw	r2,-16(fp)
  d0f7e8:	1885883a 	add	r2,r3,r2
  d0f7ec:	e1000117 	ldw	r4,4(fp)
  d0f7f0:	1100002d 	sthio	r4,0(r2)
  d0f7f4:	00000c06 	br	d0f828 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  d0f7f8:	e0fffd17 	ldw	r3,-12(fp)
  d0f7fc:	e13fff17 	ldw	r4,-4(fp)
  d0f800:	1905383a 	mul	r2,r3,r4
  d0f804:	e0fffe17 	ldw	r3,-8(fp)
  d0f808:	10c5883a 	add	r2,r2,r3
  d0f80c:	1085883a 	add	r2,r2,r2
  d0f810:	1085883a 	add	r2,r2,r2
  d0f814:	1007883a 	mov	r3,r2
  d0f818:	e0bffc17 	ldw	r2,-16(fp)
  d0f81c:	1885883a 	add	r2,r3,r2
  d0f820:	e1000117 	ldw	r4,4(fp)
  d0f824:	11000035 	stwio	r4,0(r2)
}
  d0f828:	e037883a 	mov	sp,fp
  d0f82c:	df000017 	ldw	fp,0(sp)
  d0f830:	dec00104 	addi	sp,sp,4
  d0f834:	f800283a 	ret

00d0f838 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  d0f838:	deffe404 	addi	sp,sp,-112
  d0f83c:	dfc01b15 	stw	ra,108(sp)
  d0f840:	df001a15 	stw	fp,104(sp)
  d0f844:	df001a04 	addi	fp,sp,104
  d0f848:	e13fe815 	stw	r4,-96(fp)
  d0f84c:	e17fe915 	stw	r5,-92(fp)
  d0f850:	e1bfea15 	stw	r6,-88(fp)
  d0f854:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  d0f858:	e0bfe917 	ldw	r2,-92(fp)
  d0f85c:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  d0f860:	e0ffea17 	ldw	r3,-88(fp)
  d0f864:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  d0f868:	e13feb17 	ldw	r4,-84(fp)
  d0f86c:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  d0f870:	e0800217 	ldw	r2,8(fp)
  d0f874:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  d0f878:	e0fff717 	ldw	r3,-36(fp)
  d0f87c:	e13ff917 	ldw	r4,-28(fp)
  d0f880:	1905c83a 	sub	r2,r3,r4
  d0f884:	e0bfff15 	stw	r2,-4(fp)
  d0f888:	e0ffff17 	ldw	r3,-4(fp)
  d0f88c:	1804403a 	cmpge	r2,r3,zero
  d0f890:	1000031e 	bne	r2,zero,d0f8a0 <alt_up_pixel_buffer_dma_draw_line+0x68>
  d0f894:	e13fff17 	ldw	r4,-4(fp)
  d0f898:	0109c83a 	sub	r4,zero,r4
  d0f89c:	e13fff15 	stw	r4,-4(fp)
  d0f8a0:	e0fff817 	ldw	r3,-32(fp)
  d0f8a4:	e13ffa17 	ldw	r4,-24(fp)
  d0f8a8:	1905c83a 	sub	r2,r3,r4
  d0f8ac:	e0bffe15 	stw	r2,-8(fp)
  d0f8b0:	e0fffe17 	ldw	r3,-8(fp)
  d0f8b4:	1804403a 	cmpge	r2,r3,zero
  d0f8b8:	1000031e 	bne	r2,zero,d0f8c8 <alt_up_pixel_buffer_dma_draw_line+0x90>
  d0f8bc:	e13ffe17 	ldw	r4,-8(fp)
  d0f8c0:	0109c83a 	sub	r4,zero,r4
  d0f8c4:	e13ffe15 	stw	r4,-8(fp)
  d0f8c8:	e0fffe17 	ldw	r3,-8(fp)
  d0f8cc:	e13fff17 	ldw	r4,-4(fp)
  d0f8d0:	1904803a 	cmplt	r2,r3,r4
  d0f8d4:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  d0f8d8:	e0bfe817 	ldw	r2,-96(fp)
  d0f8dc:	10800e17 	ldw	r2,56(r2)
  d0f8e0:	10800060 	cmpeqi	r2,r2,1
  d0f8e4:	10000c1e 	bne	r2,zero,d0f918 <alt_up_pixel_buffer_dma_draw_line+0xe0>
  d0f8e8:	e0bfe817 	ldw	r2,-96(fp)
  d0f8ec:	10800e17 	ldw	r2,56(r2)
  d0f8f0:	10800098 	cmpnei	r2,r2,2
  d0f8f4:	1000031e 	bne	r2,zero,d0f904 <alt_up_pixel_buffer_dma_draw_line+0xcc>
  d0f8f8:	00800044 	movi	r2,1
  d0f8fc:	e0bffc15 	stw	r2,-16(fp)
  d0f900:	00000206 	br	d0f90c <alt_up_pixel_buffer_dma_draw_line+0xd4>
  d0f904:	00c00084 	movi	r3,2
  d0f908:	e0fffc15 	stw	r3,-16(fp)
  d0f90c:	e13ffc17 	ldw	r4,-16(fp)
  d0f910:	e13ffd15 	stw	r4,-12(fp)
  d0f914:	00000106 	br	d0f91c <alt_up_pixel_buffer_dma_draw_line+0xe4>
  d0f918:	e03ffd15 	stw	zero,-12(fp)
  d0f91c:	e0bffd17 	ldw	r2,-12(fp)
  d0f920:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  d0f924:	e0c00317 	ldw	r3,12(fp)
  d0f928:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  d0f92c:	e0bfe817 	ldw	r2,-96(fp)
  d0f930:	10800d17 	ldw	r2,52(r2)
  d0f934:	1004c03a 	cmpne	r2,r2,zero
  d0f938:	1000091e 	bne	r2,zero,d0f960 <alt_up_pixel_buffer_dma_draw_line+0x128>
  d0f93c:	e0bfe817 	ldw	r2,-96(fp)
  d0f940:	10c01317 	ldw	r3,76(r2)
  d0f944:	e0bfef17 	ldw	r2,-68(fp)
  d0f948:	1885c83a 	sub	r2,r3,r2
  d0f94c:	1007883a 	mov	r3,r2
  d0f950:	00800044 	movi	r2,1
  d0f954:	10c4983a 	sll	r2,r2,r3
  d0f958:	e0bffb15 	stw	r2,-20(fp)
  d0f95c:	00000306 	br	d0f96c <alt_up_pixel_buffer_dma_draw_line+0x134>
  d0f960:	e0bfe817 	ldw	r2,-96(fp)
  d0f964:	10800f17 	ldw	r2,60(r2)
  d0f968:	e0bffb15 	stw	r2,-20(fp)
  d0f96c:	e13ffb17 	ldw	r4,-20(fp)
  d0f970:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  d0f974:	e0800417 	ldw	r2,16(fp)
  d0f978:	10800058 	cmpnei	r2,r2,1
  d0f97c:	1000041e 	bne	r2,zero,d0f990 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  d0f980:	e0bfe817 	ldw	r2,-96(fp)
  d0f984:	10800c17 	ldw	r2,48(r2)
  d0f988:	e0bfed15 	stw	r2,-76(fp)
  d0f98c:	00000306 	br	d0f99c <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  d0f990:	e0bfe817 	ldw	r2,-96(fp)
  d0f994:	10800b17 	ldw	r2,44(r2)
  d0f998:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  d0f99c:	e0fff603 	ldbu	r3,-40(fp)
  d0f9a0:	18803fcc 	andi	r2,r3,255
  d0f9a4:	1080201c 	xori	r2,r2,128
  d0f9a8:	10bfe004 	addi	r2,r2,-128
  d0f9ac:	10800050 	cmplti	r2,r2,1
  d0f9b0:	10000c1e 	bne	r2,zero,d0f9e4 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  d0f9b4:	e13ffa17 	ldw	r4,-24(fp)
  d0f9b8:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  d0f9bc:	e0bff917 	ldw	r2,-28(fp)
  d0f9c0:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  d0f9c4:	e0fff317 	ldw	r3,-52(fp)
  d0f9c8:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  d0f9cc:	e13ff817 	ldw	r4,-32(fp)
  d0f9d0:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  d0f9d4:	e0bff717 	ldw	r2,-36(fp)
  d0f9d8:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  d0f9dc:	e0fff317 	ldw	r3,-52(fp)
  d0f9e0:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  d0f9e4:	e13ff817 	ldw	r4,-32(fp)
  d0f9e8:	e0bffa17 	ldw	r2,-24(fp)
  d0f9ec:	20800c0e 	bge	r4,r2,d0fa20 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  d0f9f0:	e0fffa17 	ldw	r3,-24(fp)
  d0f9f4:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  d0f9f8:	e13ff817 	ldw	r4,-32(fp)
  d0f9fc:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  d0fa00:	e0bff317 	ldw	r2,-52(fp)
  d0fa04:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  d0fa08:	e0fff917 	ldw	r3,-28(fp)
  d0fa0c:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  d0fa10:	e13ff717 	ldw	r4,-36(fp)
  d0fa14:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  d0fa18:	e0bff317 	ldw	r2,-52(fp)
  d0fa1c:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  d0fa20:	e0fff817 	ldw	r3,-32(fp)
  d0fa24:	e13ffa17 	ldw	r4,-24(fp)
  d0fa28:	1907c83a 	sub	r3,r3,r4
  d0fa2c:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  d0fa30:	e0fff717 	ldw	r3,-36(fp)
  d0fa34:	e13ff917 	ldw	r4,-28(fp)
  d0fa38:	1905c83a 	sub	r2,r3,r4
  d0fa3c:	e0bff415 	stw	r2,-48(fp)
  d0fa40:	e0fff417 	ldw	r3,-48(fp)
  d0fa44:	1804403a 	cmpge	r2,r3,zero
  d0fa48:	1000031e 	bne	r2,zero,d0fa58 <alt_up_pixel_buffer_dma_draw_line+0x220>
  d0fa4c:	e13ff417 	ldw	r4,-48(fp)
  d0fa50:	0109c83a 	sub	r4,zero,r4
  d0fa54:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  d0fa58:	e0fff517 	ldw	r3,-44(fp)
  d0fa5c:	1804d7fa 	srli	r2,r3,31
  d0fa60:	e13ff517 	ldw	r4,-44(fp)
  d0fa64:	1105883a 	add	r2,r2,r4
  d0fa68:	1005d07a 	srai	r2,r2,1
  d0fa6c:	0085c83a 	sub	r2,zero,r2
  d0fa70:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  d0fa74:	e0bff917 	ldw	r2,-28(fp)
  d0fa78:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  d0fa7c:	e0fff917 	ldw	r3,-28(fp)
  d0fa80:	e13ff717 	ldw	r4,-36(fp)
  d0fa84:	1900030e 	bge	r3,r4,d0fa94 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  d0fa88:	00800044 	movi	r2,1
  d0fa8c:	e0bff215 	stw	r2,-56(fp)
  d0fa90:	00000206 	br	d0fa9c <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  d0fa94:	00ffffc4 	movi	r3,-1
  d0fa98:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  d0fa9c:	e13ff603 	ldbu	r4,-40(fp)
  d0faa0:	20803fcc 	andi	r2,r4,255
  d0faa4:	1080201c 	xori	r2,r2,128
  d0faa8:	10bfe004 	addi	r2,r2,-128
  d0faac:	10800058 	cmpnei	r2,r2,1
  d0fab0:	1000221e 	bne	r2,zero,d0fb3c <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  d0fab4:	e0bffa17 	ldw	r2,-24(fp)
  d0fab8:	e0bff115 	stw	r2,-60(fp)
  d0fabc:	00001b06 	br	d0fb2c <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  d0fac0:	e0ffee17 	ldw	r3,-72(fp)
  d0fac4:	d8c00015 	stw	r3,0(sp)
  d0fac8:	e13fef17 	ldw	r4,-68(fp)
  d0facc:	d9000115 	stw	r4,4(sp)
  d0fad0:	e13fed17 	ldw	r4,-76(fp)
  d0fad4:	e17fec17 	ldw	r5,-80(fp)
  d0fad8:	e1bff017 	ldw	r6,-64(fp)
  d0fadc:	e1fff117 	ldw	r7,-60(fp)
  d0fae0:	0d0f7680 	call	d0f768 <helper_plot_pixel>
			error = error + deltay;
  d0fae4:	e0bff317 	ldw	r2,-52(fp)
  d0fae8:	e0fff417 	ldw	r3,-48(fp)
  d0faec:	10c5883a 	add	r2,r2,r3
  d0faf0:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  d0faf4:	e13ff317 	ldw	r4,-52(fp)
  d0faf8:	20800050 	cmplti	r2,r4,1
  d0fafc:	1000081e 	bne	r2,zero,d0fb20 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  d0fb00:	e0bff017 	ldw	r2,-64(fp)
  d0fb04:	e0fff217 	ldw	r3,-56(fp)
  d0fb08:	10c5883a 	add	r2,r2,r3
  d0fb0c:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  d0fb10:	e13ff317 	ldw	r4,-52(fp)
  d0fb14:	e0bff517 	ldw	r2,-44(fp)
  d0fb18:	2089c83a 	sub	r4,r4,r2
  d0fb1c:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  d0fb20:	e0fff117 	ldw	r3,-60(fp)
  d0fb24:	18c00044 	addi	r3,r3,1
  d0fb28:	e0fff115 	stw	r3,-60(fp)
  d0fb2c:	e13ff817 	ldw	r4,-32(fp)
  d0fb30:	e0bff117 	ldw	r2,-60(fp)
  d0fb34:	20bfe20e 	bge	r4,r2,d0fac0 <alt_up_pixel_buffer_dma_draw_line+0x288>
  d0fb38:	00002106 	br	d0fbc0 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  d0fb3c:	e0fffa17 	ldw	r3,-24(fp)
  d0fb40:	e0fff115 	stw	r3,-60(fp)
  d0fb44:	00001b06 	br	d0fbb4 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  d0fb48:	e13fee17 	ldw	r4,-72(fp)
  d0fb4c:	d9000015 	stw	r4,0(sp)
  d0fb50:	e0bfef17 	ldw	r2,-68(fp)
  d0fb54:	d8800115 	stw	r2,4(sp)
  d0fb58:	e13fed17 	ldw	r4,-76(fp)
  d0fb5c:	e17fec17 	ldw	r5,-80(fp)
  d0fb60:	e1bff117 	ldw	r6,-60(fp)
  d0fb64:	e1fff017 	ldw	r7,-64(fp)
  d0fb68:	0d0f7680 	call	d0f768 <helper_plot_pixel>
			error = error + deltay;
  d0fb6c:	e0fff317 	ldw	r3,-52(fp)
  d0fb70:	e13ff417 	ldw	r4,-48(fp)
  d0fb74:	1907883a 	add	r3,r3,r4
  d0fb78:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  d0fb7c:	e0fff317 	ldw	r3,-52(fp)
  d0fb80:	18800050 	cmplti	r2,r3,1
  d0fb84:	1000081e 	bne	r2,zero,d0fba8 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  d0fb88:	e13ff017 	ldw	r4,-64(fp)
  d0fb8c:	e0bff217 	ldw	r2,-56(fp)
  d0fb90:	2089883a 	add	r4,r4,r2
  d0fb94:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  d0fb98:	e0fff317 	ldw	r3,-52(fp)
  d0fb9c:	e13ff517 	ldw	r4,-44(fp)
  d0fba0:	1907c83a 	sub	r3,r3,r4
  d0fba4:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  d0fba8:	e0bff117 	ldw	r2,-60(fp)
  d0fbac:	10800044 	addi	r2,r2,1
  d0fbb0:	e0bff115 	stw	r2,-60(fp)
  d0fbb4:	e0fff817 	ldw	r3,-32(fp)
  d0fbb8:	e13ff117 	ldw	r4,-60(fp)
  d0fbbc:	193fe20e 	bge	r3,r4,d0fb48 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  d0fbc0:	e037883a 	mov	sp,fp
  d0fbc4:	dfc00117 	ldw	ra,4(sp)
  d0fbc8:	df000017 	ldw	fp,0(sp)
  d0fbcc:	dec00204 	addi	sp,sp,8
  d0fbd0:	f800283a 	ret

00d0fbd4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  d0fbd4:	defff404 	addi	sp,sp,-48
  d0fbd8:	df000b15 	stw	fp,44(sp)
  d0fbdc:	df000b04 	addi	fp,sp,44
  d0fbe0:	e13ffb15 	stw	r4,-20(fp)
  d0fbe4:	e17ffc15 	stw	r5,-16(fp)
  d0fbe8:	e1bffd15 	stw	r6,-12(fp)
  d0fbec:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  d0fbf0:	e03ff915 	stw	zero,-28(fp)
  d0fbf4:	00803474 	movhi	r2,209
  d0fbf8:	10930f04 	addi	r2,r2,19516
  d0fbfc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  d0fc00:	1005003a 	cmpeq	r2,r2,zero
  d0fc04:	1000411e 	bne	r2,zero,d0fd0c <alt_alarm_start+0x138>
  {
    if (alarm)
  d0fc08:	e0bffb17 	ldw	r2,-20(fp)
  d0fc0c:	1005003a 	cmpeq	r2,r2,zero
  d0fc10:	10003b1e 	bne	r2,zero,d0fd00 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  d0fc14:	e0fffb17 	ldw	r3,-20(fp)
  d0fc18:	e0bffd17 	ldw	r2,-12(fp)
  d0fc1c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  d0fc20:	e0fffb17 	ldw	r3,-20(fp)
  d0fc24:	e0bffe17 	ldw	r2,-8(fp)
  d0fc28:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  d0fc2c:	0005303a 	rdctl	r2,status
  d0fc30:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  d0fc34:	e0fff817 	ldw	r3,-32(fp)
  d0fc38:	00bfff84 	movi	r2,-2
  d0fc3c:	1884703a 	and	r2,r3,r2
  d0fc40:	1001703a 	wrctl	status,r2
  
  return context;
  d0fc44:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  d0fc48:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  d0fc4c:	00803474 	movhi	r2,209
  d0fc50:	10931004 	addi	r2,r2,19520
  d0fc54:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  d0fc58:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  d0fc5c:	e0fffc17 	ldw	r3,-16(fp)
  d0fc60:	e0bff917 	ldw	r2,-28(fp)
  d0fc64:	1885883a 	add	r2,r3,r2
  d0fc68:	10c00044 	addi	r3,r2,1
  d0fc6c:	e0bffb17 	ldw	r2,-20(fp)
  d0fc70:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  d0fc74:	e0bffb17 	ldw	r2,-20(fp)
  d0fc78:	10c00217 	ldw	r3,8(r2)
  d0fc7c:	e0bff917 	ldw	r2,-28(fp)
  d0fc80:	1880042e 	bgeu	r3,r2,d0fc94 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  d0fc84:	e0fffb17 	ldw	r3,-20(fp)
  d0fc88:	00800044 	movi	r2,1
  d0fc8c:	18800405 	stb	r2,16(r3)
  d0fc90:	00000206 	br	d0fc9c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  d0fc94:	e0bffb17 	ldw	r2,-20(fp)
  d0fc98:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  d0fc9c:	e0fffb17 	ldw	r3,-20(fp)
  d0fca0:	00803474 	movhi	r2,209
  d0fca4:	108c0b04 	addi	r2,r2,12332
  d0fca8:	e0bff615 	stw	r2,-40(fp)
  d0fcac:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  d0fcb0:	e0fff717 	ldw	r3,-36(fp)
  d0fcb4:	e0bff617 	ldw	r2,-40(fp)
  d0fcb8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  d0fcbc:	e0bff617 	ldw	r2,-40(fp)
  d0fcc0:	10c00017 	ldw	r3,0(r2)
  d0fcc4:	e0bff717 	ldw	r2,-36(fp)
  d0fcc8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  d0fccc:	e0bff617 	ldw	r2,-40(fp)
  d0fcd0:	10c00017 	ldw	r3,0(r2)
  d0fcd4:	e0bff717 	ldw	r2,-36(fp)
  d0fcd8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  d0fcdc:	e0fff617 	ldw	r3,-40(fp)
  d0fce0:	e0bff717 	ldw	r2,-36(fp)
  d0fce4:	18800015 	stw	r2,0(r3)
  d0fce8:	e0bffa17 	ldw	r2,-24(fp)
  d0fcec:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  d0fcf0:	e0bff517 	ldw	r2,-44(fp)
  d0fcf4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  d0fcf8:	e03fff15 	stw	zero,-4(fp)
  d0fcfc:	00000506 	br	d0fd14 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  d0fd00:	00bffa84 	movi	r2,-22
  d0fd04:	e0bfff15 	stw	r2,-4(fp)
  d0fd08:	00000206 	br	d0fd14 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  d0fd0c:	00bfde84 	movi	r2,-134
  d0fd10:	e0bfff15 	stw	r2,-4(fp)
  d0fd14:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  d0fd18:	e037883a 	mov	sp,fp
  d0fd1c:	df000017 	ldw	fp,0(sp)
  d0fd20:	dec00104 	addi	sp,sp,4
  d0fd24:	f800283a 	ret

00d0fd28 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  d0fd28:	defffe04 	addi	sp,sp,-8
  d0fd2c:	df000115 	stw	fp,4(sp)
  d0fd30:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  d0fd34:	e03fff15 	stw	zero,-4(fp)
  d0fd38:	00000506 	br	d0fd50 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  d0fd3c:	e0bfff17 	ldw	r2,-4(fp)
  d0fd40:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  d0fd44:	e0bfff17 	ldw	r2,-4(fp)
  d0fd48:	10800804 	addi	r2,r2,32
  d0fd4c:	e0bfff15 	stw	r2,-4(fp)
  d0fd50:	e0bfff17 	ldw	r2,-4(fp)
  d0fd54:	10810030 	cmpltui	r2,r2,1024
  d0fd58:	103ff81e 	bne	r2,zero,d0fd3c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  d0fd5c:	e037883a 	mov	sp,fp
  d0fd60:	df000017 	ldw	fp,0(sp)
  d0fd64:	dec00104 	addi	sp,sp,4
  d0fd68:	f800283a 	ret

00d0fd6c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  d0fd6c:	defff904 	addi	sp,sp,-28
  d0fd70:	dfc00615 	stw	ra,24(sp)
  d0fd74:	df000515 	stw	fp,20(sp)
  d0fd78:	df000504 	addi	fp,sp,20
  d0fd7c:	e13ffd15 	stw	r4,-12(fp)
  d0fd80:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  d0fd84:	e0bffd17 	ldw	r2,-12(fp)
  d0fd88:	1005003a 	cmpeq	r2,r2,zero
  d0fd8c:	1000041e 	bne	r2,zero,d0fda0 <alt_dev_llist_insert+0x34>
  d0fd90:	e0bffd17 	ldw	r2,-12(fp)
  d0fd94:	10800217 	ldw	r2,8(r2)
  d0fd98:	1004c03a 	cmpne	r2,r2,zero
  d0fd9c:	1000071e 	bne	r2,zero,d0fdbc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  d0fda0:	0d0fe200 	call	d0fe20 <alt_get_errno>
  d0fda4:	1007883a 	mov	r3,r2
  d0fda8:	00800584 	movi	r2,22
  d0fdac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  d0fdb0:	00bffa84 	movi	r2,-22
  d0fdb4:	e0bfff15 	stw	r2,-4(fp)
  d0fdb8:	00001306 	br	d0fe08 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  d0fdbc:	e0fffd17 	ldw	r3,-12(fp)
  d0fdc0:	e0bffe17 	ldw	r2,-8(fp)
  d0fdc4:	e0bffb15 	stw	r2,-20(fp)
  d0fdc8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  d0fdcc:	e0fffc17 	ldw	r3,-16(fp)
  d0fdd0:	e0bffb17 	ldw	r2,-20(fp)
  d0fdd4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  d0fdd8:	e0bffb17 	ldw	r2,-20(fp)
  d0fddc:	10c00017 	ldw	r3,0(r2)
  d0fde0:	e0bffc17 	ldw	r2,-16(fp)
  d0fde4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  d0fde8:	e0bffb17 	ldw	r2,-20(fp)
  d0fdec:	10c00017 	ldw	r3,0(r2)
  d0fdf0:	e0bffc17 	ldw	r2,-16(fp)
  d0fdf4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  d0fdf8:	e0fffb17 	ldw	r3,-20(fp)
  d0fdfc:	e0bffc17 	ldw	r2,-16(fp)
  d0fe00:	18800015 	stw	r2,0(r3)

  return 0;  
  d0fe04:	e03fff15 	stw	zero,-4(fp)
  d0fe08:	e0bfff17 	ldw	r2,-4(fp)
}
  d0fe0c:	e037883a 	mov	sp,fp
  d0fe10:	dfc00117 	ldw	ra,4(sp)
  d0fe14:	df000017 	ldw	fp,0(sp)
  d0fe18:	dec00204 	addi	sp,sp,8
  d0fe1c:	f800283a 	ret

00d0fe20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d0fe20:	defffd04 	addi	sp,sp,-12
  d0fe24:	dfc00215 	stw	ra,8(sp)
  d0fe28:	df000115 	stw	fp,4(sp)
  d0fe2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d0fe30:	00803474 	movhi	r2,209
  d0fe34:	108c0404 	addi	r2,r2,12304
  d0fe38:	10800017 	ldw	r2,0(r2)
  d0fe3c:	1005003a 	cmpeq	r2,r2,zero
  d0fe40:	1000061e 	bne	r2,zero,d0fe5c <alt_get_errno+0x3c>
  d0fe44:	00803474 	movhi	r2,209
  d0fe48:	108c0404 	addi	r2,r2,12304
  d0fe4c:	10800017 	ldw	r2,0(r2)
  d0fe50:	103ee83a 	callr	r2
  d0fe54:	e0bfff15 	stw	r2,-4(fp)
  d0fe58:	00000306 	br	d0fe68 <alt_get_errno+0x48>
  d0fe5c:	00803474 	movhi	r2,209
  d0fe60:	10930a04 	addi	r2,r2,19496
  d0fe64:	e0bfff15 	stw	r2,-4(fp)
  d0fe68:	e0bfff17 	ldw	r2,-4(fp)
}
  d0fe6c:	e037883a 	mov	sp,fp
  d0fe70:	dfc00117 	ldw	ra,4(sp)
  d0fe74:	df000017 	ldw	fp,0(sp)
  d0fe78:	dec00204 	addi	sp,sp,8
  d0fe7c:	f800283a 	ret

00d0fe80 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  d0fe80:	defffd04 	addi	sp,sp,-12
  d0fe84:	dfc00215 	stw	ra,8(sp)
  d0fe88:	df000115 	stw	fp,4(sp)
  d0fe8c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  d0fe90:	00bfff04 	movi	r2,-4
  d0fe94:	00c03474 	movhi	r3,209
  d0fe98:	18c3df04 	addi	r3,r3,3964
  d0fe9c:	1885883a 	add	r2,r3,r2
  d0fea0:	e0bfff15 	stw	r2,-4(fp)
  d0fea4:	00000606 	br	d0fec0 <_do_ctors+0x40>
        (*ctor) (); 
  d0fea8:	e0bfff17 	ldw	r2,-4(fp)
  d0feac:	10800017 	ldw	r2,0(r2)
  d0feb0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  d0feb4:	e0bfff17 	ldw	r2,-4(fp)
  d0feb8:	10bfff04 	addi	r2,r2,-4
  d0febc:	e0bfff15 	stw	r2,-4(fp)
  d0fec0:	e0ffff17 	ldw	r3,-4(fp)
  d0fec4:	00803474 	movhi	r2,209
  d0fec8:	1083de04 	addi	r2,r2,3960
  d0fecc:	18bff62e 	bgeu	r3,r2,d0fea8 <_do_ctors+0x28>
        (*ctor) (); 
}
  d0fed0:	e037883a 	mov	sp,fp
  d0fed4:	dfc00117 	ldw	ra,4(sp)
  d0fed8:	df000017 	ldw	fp,0(sp)
  d0fedc:	dec00204 	addi	sp,sp,8
  d0fee0:	f800283a 	ret

00d0fee4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  d0fee4:	defffd04 	addi	sp,sp,-12
  d0fee8:	dfc00215 	stw	ra,8(sp)
  d0feec:	df000115 	stw	fp,4(sp)
  d0fef0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  d0fef4:	00bfff04 	movi	r2,-4
  d0fef8:	00c03474 	movhi	r3,209
  d0fefc:	18c3df04 	addi	r3,r3,3964
  d0ff00:	1885883a 	add	r2,r3,r2
  d0ff04:	e0bfff15 	stw	r2,-4(fp)
  d0ff08:	00000606 	br	d0ff24 <_do_dtors+0x40>
        (*dtor) (); 
  d0ff0c:	e0bfff17 	ldw	r2,-4(fp)
  d0ff10:	10800017 	ldw	r2,0(r2)
  d0ff14:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  d0ff18:	e0bfff17 	ldw	r2,-4(fp)
  d0ff1c:	10bfff04 	addi	r2,r2,-4
  d0ff20:	e0bfff15 	stw	r2,-4(fp)
  d0ff24:	e0ffff17 	ldw	r3,-4(fp)
  d0ff28:	00803474 	movhi	r2,209
  d0ff2c:	1083df04 	addi	r2,r2,3964
  d0ff30:	18bff62e 	bgeu	r3,r2,d0ff0c <_do_dtors+0x28>
        (*dtor) (); 
}
  d0ff34:	e037883a 	mov	sp,fp
  d0ff38:	dfc00117 	ldw	ra,4(sp)
  d0ff3c:	df000017 	ldw	fp,0(sp)
  d0ff40:	dec00204 	addi	sp,sp,8
  d0ff44:	f800283a 	ret

00d0ff48 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  d0ff48:	defff904 	addi	sp,sp,-28
  d0ff4c:	dfc00615 	stw	ra,24(sp)
  d0ff50:	df000515 	stw	fp,20(sp)
  d0ff54:	df000504 	addi	fp,sp,20
  d0ff58:	e13ffd15 	stw	r4,-12(fp)
  d0ff5c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  d0ff60:	e0bffe17 	ldw	r2,-8(fp)
  d0ff64:	10800017 	ldw	r2,0(r2)
  d0ff68:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  d0ff6c:	e13ffd17 	ldw	r4,-12(fp)
  d0ff70:	0d03dc40 	call	d03dc4 <strlen>
  d0ff74:	10800044 	addi	r2,r2,1
  d0ff78:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  d0ff7c:	00000d06 	br	d0ffb4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  d0ff80:	e0bffc17 	ldw	r2,-16(fp)
  d0ff84:	11000217 	ldw	r4,8(r2)
  d0ff88:	e1bffb17 	ldw	r6,-20(fp)
  d0ff8c:	e17ffd17 	ldw	r5,-12(fp)
  d0ff90:	0d10b500 	call	d10b50 <memcmp>
  d0ff94:	1004c03a 	cmpne	r2,r2,zero
  d0ff98:	1000031e 	bne	r2,zero,d0ffa8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  d0ff9c:	e0bffc17 	ldw	r2,-16(fp)
  d0ffa0:	e0bfff15 	stw	r2,-4(fp)
  d0ffa4:	00000706 	br	d0ffc4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  d0ffa8:	e0bffc17 	ldw	r2,-16(fp)
  d0ffac:	10800017 	ldw	r2,0(r2)
  d0ffb0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  d0ffb4:	e0fffe17 	ldw	r3,-8(fp)
  d0ffb8:	e0bffc17 	ldw	r2,-16(fp)
  d0ffbc:	10fff01e 	bne	r2,r3,d0ff80 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  d0ffc0:	e03fff15 	stw	zero,-4(fp)
  d0ffc4:	e0bfff17 	ldw	r2,-4(fp)
}
  d0ffc8:	e037883a 	mov	sp,fp
  d0ffcc:	dfc00117 	ldw	ra,4(sp)
  d0ffd0:	df000017 	ldw	fp,0(sp)
  d0ffd4:	dec00204 	addi	sp,sp,8
  d0ffd8:	f800283a 	ret

00d0ffdc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  d0ffdc:	defffe04 	addi	sp,sp,-8
  d0ffe0:	dfc00115 	stw	ra,4(sp)
  d0ffe4:	df000015 	stw	fp,0(sp)
  d0ffe8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  d0ffec:	0009883a 	mov	r4,zero
  d0fff0:	01440004 	movi	r5,4096
  d0fff4:	0d10a740 	call	d10a74 <alt_icache_flush>
#endif
}
  d0fff8:	e037883a 	mov	sp,fp
  d0fffc:	dfc00117 	ldw	ra,4(sp)
  d10000:	df000017 	ldw	fp,0(sp)
  d10004:	dec00204 	addi	sp,sp,8
  d10008:	f800283a 	ret

00d1000c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  d1000c:	defff904 	addi	sp,sp,-28
  d10010:	dfc00615 	stw	ra,24(sp)
  d10014:	df000515 	stw	fp,20(sp)
  d10018:	df000504 	addi	fp,sp,20
  d1001c:	e13ffc15 	stw	r4,-16(fp)
  d10020:	e17ffd15 	stw	r5,-12(fp)
  d10024:	e1bffe15 	stw	r6,-8(fp)
  d10028:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  d1002c:	e0800217 	ldw	r2,8(fp)
  d10030:	d8800015 	stw	r2,0(sp)
  d10034:	e13ffc17 	ldw	r4,-16(fp)
  d10038:	e17ffd17 	ldw	r5,-12(fp)
  d1003c:	e1bffe17 	ldw	r6,-8(fp)
  d10040:	e1ffff17 	ldw	r7,-4(fp)
  d10044:	0d101e00 	call	d101e0 <alt_iic_isr_register>
}  
  d10048:	e037883a 	mov	sp,fp
  d1004c:	dfc00117 	ldw	ra,4(sp)
  d10050:	df000017 	ldw	fp,0(sp)
  d10054:	dec00204 	addi	sp,sp,8
  d10058:	f800283a 	ret

00d1005c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  d1005c:	defff904 	addi	sp,sp,-28
  d10060:	df000615 	stw	fp,24(sp)
  d10064:	df000604 	addi	fp,sp,24
  d10068:	e13ffe15 	stw	r4,-8(fp)
  d1006c:	e17fff15 	stw	r5,-4(fp)
  d10070:	e0bfff17 	ldw	r2,-4(fp)
  d10074:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  d10078:	0005303a 	rdctl	r2,status
  d1007c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  d10080:	e0fffb17 	ldw	r3,-20(fp)
  d10084:	00bfff84 	movi	r2,-2
  d10088:	1884703a 	and	r2,r3,r2
  d1008c:	1001703a 	wrctl	status,r2
  
  return context;
  d10090:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  d10094:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  d10098:	e0fffc17 	ldw	r3,-16(fp)
  d1009c:	00800044 	movi	r2,1
  d100a0:	10c4983a 	sll	r2,r2,r3
  d100a4:	1007883a 	mov	r3,r2
  d100a8:	00803474 	movhi	r2,209
  d100ac:	10930e04 	addi	r2,r2,19512
  d100b0:	10800017 	ldw	r2,0(r2)
  d100b4:	1886b03a 	or	r3,r3,r2
  d100b8:	00803474 	movhi	r2,209
  d100bc:	10930e04 	addi	r2,r2,19512
  d100c0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  d100c4:	00803474 	movhi	r2,209
  d100c8:	10930e04 	addi	r2,r2,19512
  d100cc:	10800017 	ldw	r2,0(r2)
  d100d0:	100170fa 	wrctl	ienable,r2
  d100d4:	e0bffd17 	ldw	r2,-12(fp)
  d100d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  d100dc:	e0bffa17 	ldw	r2,-24(fp)
  d100e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  d100e4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  d100e8:	e037883a 	mov	sp,fp
  d100ec:	df000017 	ldw	fp,0(sp)
  d100f0:	dec00104 	addi	sp,sp,4
  d100f4:	f800283a 	ret

00d100f8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  d100f8:	defff904 	addi	sp,sp,-28
  d100fc:	df000615 	stw	fp,24(sp)
  d10100:	df000604 	addi	fp,sp,24
  d10104:	e13ffe15 	stw	r4,-8(fp)
  d10108:	e17fff15 	stw	r5,-4(fp)
  d1010c:	e0bfff17 	ldw	r2,-4(fp)
  d10110:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  d10114:	0005303a 	rdctl	r2,status
  d10118:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  d1011c:	e0fffb17 	ldw	r3,-20(fp)
  d10120:	00bfff84 	movi	r2,-2
  d10124:	1884703a 	and	r2,r3,r2
  d10128:	1001703a 	wrctl	status,r2
  
  return context;
  d1012c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  d10130:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  d10134:	e0fffc17 	ldw	r3,-16(fp)
  d10138:	00800044 	movi	r2,1
  d1013c:	10c4983a 	sll	r2,r2,r3
  d10140:	0084303a 	nor	r2,zero,r2
  d10144:	1007883a 	mov	r3,r2
  d10148:	00803474 	movhi	r2,209
  d1014c:	10930e04 	addi	r2,r2,19512
  d10150:	10800017 	ldw	r2,0(r2)
  d10154:	1886703a 	and	r3,r3,r2
  d10158:	00803474 	movhi	r2,209
  d1015c:	10930e04 	addi	r2,r2,19512
  d10160:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  d10164:	00803474 	movhi	r2,209
  d10168:	10930e04 	addi	r2,r2,19512
  d1016c:	10800017 	ldw	r2,0(r2)
  d10170:	100170fa 	wrctl	ienable,r2
  d10174:	e0bffd17 	ldw	r2,-12(fp)
  d10178:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  d1017c:	e0bffa17 	ldw	r2,-24(fp)
  d10180:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  d10184:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  d10188:	e037883a 	mov	sp,fp
  d1018c:	df000017 	ldw	fp,0(sp)
  d10190:	dec00104 	addi	sp,sp,4
  d10194:	f800283a 	ret

00d10198 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  d10198:	defffc04 	addi	sp,sp,-16
  d1019c:	df000315 	stw	fp,12(sp)
  d101a0:	df000304 	addi	fp,sp,12
  d101a4:	e13ffe15 	stw	r4,-8(fp)
  d101a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  d101ac:	000530fa 	rdctl	r2,ienable
  d101b0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  d101b4:	e0ffff17 	ldw	r3,-4(fp)
  d101b8:	00800044 	movi	r2,1
  d101bc:	10c4983a 	sll	r2,r2,r3
  d101c0:	1007883a 	mov	r3,r2
  d101c4:	e0bffd17 	ldw	r2,-12(fp)
  d101c8:	1884703a 	and	r2,r3,r2
  d101cc:	1004c03a 	cmpne	r2,r2,zero
}
  d101d0:	e037883a 	mov	sp,fp
  d101d4:	df000017 	ldw	fp,0(sp)
  d101d8:	dec00104 	addi	sp,sp,4
  d101dc:	f800283a 	ret

00d101e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  d101e0:	defff404 	addi	sp,sp,-48
  d101e4:	dfc00b15 	stw	ra,44(sp)
  d101e8:	df000a15 	stw	fp,40(sp)
  d101ec:	df000a04 	addi	fp,sp,40
  d101f0:	e13ffb15 	stw	r4,-20(fp)
  d101f4:	e17ffc15 	stw	r5,-16(fp)
  d101f8:	e1bffd15 	stw	r6,-12(fp)
  d101fc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  d10200:	00bffa84 	movi	r2,-22
  d10204:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  d10208:	e0bffc17 	ldw	r2,-16(fp)
  d1020c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  d10210:	e0bff917 	ldw	r2,-28(fp)
  d10214:	10800808 	cmpgei	r2,r2,32
  d10218:	1000291e 	bne	r2,zero,d102c0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  d1021c:	0005303a 	rdctl	r2,status
  d10220:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  d10224:	e0fff717 	ldw	r3,-36(fp)
  d10228:	00bfff84 	movi	r2,-2
  d1022c:	1884703a 	and	r2,r3,r2
  d10230:	1001703a 	wrctl	status,r2
  
  return context;
  d10234:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  d10238:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  d1023c:	e0bff917 	ldw	r2,-28(fp)
  d10240:	00c03474 	movhi	r3,209
  d10244:	18d31b04 	addi	r3,r3,19564
  d10248:	100490fa 	slli	r2,r2,3
  d1024c:	10c7883a 	add	r3,r2,r3
  d10250:	e0bffd17 	ldw	r2,-12(fp)
  d10254:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  d10258:	e0bff917 	ldw	r2,-28(fp)
  d1025c:	00c03474 	movhi	r3,209
  d10260:	18d31b04 	addi	r3,r3,19564
  d10264:	100490fa 	slli	r2,r2,3
  d10268:	10c5883a 	add	r2,r2,r3
  d1026c:	10c00104 	addi	r3,r2,4
  d10270:	e0bffe17 	ldw	r2,-8(fp)
  d10274:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  d10278:	e0bffd17 	ldw	r2,-12(fp)
  d1027c:	1005003a 	cmpeq	r2,r2,zero
  d10280:	1000051e 	bne	r2,zero,d10298 <alt_iic_isr_register+0xb8>
  d10284:	e17ff917 	ldw	r5,-28(fp)
  d10288:	e13ffb17 	ldw	r4,-20(fp)
  d1028c:	0d1005c0 	call	d1005c <alt_ic_irq_enable>
  d10290:	e0bfff15 	stw	r2,-4(fp)
  d10294:	00000406 	br	d102a8 <alt_iic_isr_register+0xc8>
  d10298:	e17ff917 	ldw	r5,-28(fp)
  d1029c:	e13ffb17 	ldw	r4,-20(fp)
  d102a0:	0d100f80 	call	d100f8 <alt_ic_irq_disable>
  d102a4:	e0bfff15 	stw	r2,-4(fp)
  d102a8:	e0bfff17 	ldw	r2,-4(fp)
  d102ac:	e0bffa15 	stw	r2,-24(fp)
  d102b0:	e0bff817 	ldw	r2,-32(fp)
  d102b4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  d102b8:	e0bff617 	ldw	r2,-40(fp)
  d102bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  d102c0:	e0bffa17 	ldw	r2,-24(fp)
}
  d102c4:	e037883a 	mov	sp,fp
  d102c8:	dfc00117 	ldw	ra,4(sp)
  d102cc:	df000017 	ldw	fp,0(sp)
  d102d0:	dec00204 	addi	sp,sp,8
  d102d4:	f800283a 	ret

00d102d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  d102d8:	defff904 	addi	sp,sp,-28
  d102dc:	dfc00615 	stw	ra,24(sp)
  d102e0:	df000515 	stw	fp,20(sp)
  d102e4:	df000504 	addi	fp,sp,20
  d102e8:	e13ffc15 	stw	r4,-16(fp)
  d102ec:	e17ffd15 	stw	r5,-12(fp)
  d102f0:	e1bffe15 	stw	r6,-8(fp)
  d102f4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  d102f8:	e13ffd17 	ldw	r4,-12(fp)
  d102fc:	e17ffe17 	ldw	r5,-8(fp)
  d10300:	e1bfff17 	ldw	r6,-4(fp)
  d10304:	0d104f00 	call	d104f0 <open>
  d10308:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  d1030c:	e0bffb17 	ldw	r2,-20(fp)
  d10310:	1004803a 	cmplt	r2,r2,zero
  d10314:	10001c1e 	bne	r2,zero,d10388 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  d10318:	e0bffb17 	ldw	r2,-20(fp)
  d1031c:	00c03474 	movhi	r3,209
  d10320:	18c72804 	addi	r3,r3,7328
  d10324:	10800324 	muli	r2,r2,12
  d10328:	10c5883a 	add	r2,r2,r3
  d1032c:	10c00017 	ldw	r3,0(r2)
  d10330:	e0bffc17 	ldw	r2,-16(fp)
  d10334:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  d10338:	e0bffb17 	ldw	r2,-20(fp)
  d1033c:	00c03474 	movhi	r3,209
  d10340:	18c72804 	addi	r3,r3,7328
  d10344:	10800324 	muli	r2,r2,12
  d10348:	10c5883a 	add	r2,r2,r3
  d1034c:	10800104 	addi	r2,r2,4
  d10350:	10c00017 	ldw	r3,0(r2)
  d10354:	e0bffc17 	ldw	r2,-16(fp)
  d10358:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  d1035c:	e0bffb17 	ldw	r2,-20(fp)
  d10360:	00c03474 	movhi	r3,209
  d10364:	18c72804 	addi	r3,r3,7328
  d10368:	10800324 	muli	r2,r2,12
  d1036c:	10c5883a 	add	r2,r2,r3
  d10370:	10800204 	addi	r2,r2,8
  d10374:	10c00017 	ldw	r3,0(r2)
  d10378:	e0bffc17 	ldw	r2,-16(fp)
  d1037c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  d10380:	e13ffb17 	ldw	r4,-20(fp)
  d10384:	0d0ce100 	call	d0ce10 <alt_release_fd>
  }
} 
  d10388:	e037883a 	mov	sp,fp
  d1038c:	dfc00117 	ldw	ra,4(sp)
  d10390:	df000017 	ldw	fp,0(sp)
  d10394:	dec00204 	addi	sp,sp,8
  d10398:	f800283a 	ret

00d1039c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  d1039c:	defffb04 	addi	sp,sp,-20
  d103a0:	dfc00415 	stw	ra,16(sp)
  d103a4:	df000315 	stw	fp,12(sp)
  d103a8:	df000304 	addi	fp,sp,12
  d103ac:	e13ffd15 	stw	r4,-12(fp)
  d103b0:	e17ffe15 	stw	r5,-8(fp)
  d103b4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  d103b8:	01003474 	movhi	r4,209
  d103bc:	21072b04 	addi	r4,r4,7340
  d103c0:	e17ffd17 	ldw	r5,-12(fp)
  d103c4:	01800044 	movi	r6,1
  d103c8:	01c07fc4 	movi	r7,511
  d103cc:	0d102d80 	call	d102d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  d103d0:	01003474 	movhi	r4,209
  d103d4:	21072804 	addi	r4,r4,7328
  d103d8:	e17ffe17 	ldw	r5,-8(fp)
  d103dc:	000d883a 	mov	r6,zero
  d103e0:	01c07fc4 	movi	r7,511
  d103e4:	0d102d80 	call	d102d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  d103e8:	01003474 	movhi	r4,209
  d103ec:	21072e04 	addi	r4,r4,7352
  d103f0:	e17fff17 	ldw	r5,-4(fp)
  d103f4:	01800044 	movi	r6,1
  d103f8:	01c07fc4 	movi	r7,511
  d103fc:	0d102d80 	call	d102d8 <alt_open_fd>
}  
  d10400:	e037883a 	mov	sp,fp
  d10404:	dfc00117 	ldw	ra,4(sp)
  d10408:	df000017 	ldw	fp,0(sp)
  d1040c:	dec00204 	addi	sp,sp,8
  d10410:	f800283a 	ret

00d10414 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  d10414:	defffc04 	addi	sp,sp,-16
  d10418:	df000315 	stw	fp,12(sp)
  d1041c:	df000304 	addi	fp,sp,12
  d10420:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  d10424:	e0bffe17 	ldw	r2,-8(fp)
  d10428:	10800217 	ldw	r2,8(r2)
  d1042c:	10d00034 	orhi	r3,r2,16384
  d10430:	e0bffe17 	ldw	r2,-8(fp)
  d10434:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  d10438:	e03ffd15 	stw	zero,-12(fp)
  d1043c:	00002006 	br	d104c0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  d10440:	e0bffd17 	ldw	r2,-12(fp)
  d10444:	00c03474 	movhi	r3,209
  d10448:	18c72804 	addi	r3,r3,7328
  d1044c:	10800324 	muli	r2,r2,12
  d10450:	10c5883a 	add	r2,r2,r3
  d10454:	10c00017 	ldw	r3,0(r2)
  d10458:	e0bffe17 	ldw	r2,-8(fp)
  d1045c:	10800017 	ldw	r2,0(r2)
  d10460:	1880141e 	bne	r3,r2,d104b4 <alt_file_locked+0xa0>
  d10464:	e0bffd17 	ldw	r2,-12(fp)
  d10468:	00c03474 	movhi	r3,209
  d1046c:	18c72804 	addi	r3,r3,7328
  d10470:	10800324 	muli	r2,r2,12
  d10474:	10c5883a 	add	r2,r2,r3
  d10478:	10800204 	addi	r2,r2,8
  d1047c:	10800017 	ldw	r2,0(r2)
  d10480:	1004403a 	cmpge	r2,r2,zero
  d10484:	10000b1e 	bne	r2,zero,d104b4 <alt_file_locked+0xa0>
  d10488:	e0bffd17 	ldw	r2,-12(fp)
  d1048c:	10800324 	muli	r2,r2,12
  d10490:	1007883a 	mov	r3,r2
  d10494:	00803474 	movhi	r2,209
  d10498:	10872804 	addi	r2,r2,7328
  d1049c:	1887883a 	add	r3,r3,r2
  d104a0:	e0bffe17 	ldw	r2,-8(fp)
  d104a4:	18800326 	beq	r3,r2,d104b4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  d104a8:	00bffcc4 	movi	r2,-13
  d104ac:	e0bfff15 	stw	r2,-4(fp)
  d104b0:	00000a06 	br	d104dc <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  d104b4:	e0bffd17 	ldw	r2,-12(fp)
  d104b8:	10800044 	addi	r2,r2,1
  d104bc:	e0bffd15 	stw	r2,-12(fp)
  d104c0:	00803474 	movhi	r2,209
  d104c4:	108c0304 	addi	r2,r2,12300
  d104c8:	10800017 	ldw	r2,0(r2)
  d104cc:	1007883a 	mov	r3,r2
  d104d0:	e0bffd17 	ldw	r2,-12(fp)
  d104d4:	18bfda2e 	bgeu	r3,r2,d10440 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  d104d8:	e03fff15 	stw	zero,-4(fp)
  d104dc:	e0bfff17 	ldw	r2,-4(fp)
}
  d104e0:	e037883a 	mov	sp,fp
  d104e4:	df000017 	ldw	fp,0(sp)
  d104e8:	dec00104 	addi	sp,sp,4
  d104ec:	f800283a 	ret

00d104f0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  d104f0:	defff404 	addi	sp,sp,-48
  d104f4:	dfc00b15 	stw	ra,44(sp)
  d104f8:	df000a15 	stw	fp,40(sp)
  d104fc:	df000a04 	addi	fp,sp,40
  d10500:	e13ffb15 	stw	r4,-20(fp)
  d10504:	e17ffc15 	stw	r5,-16(fp)
  d10508:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  d1050c:	00bfffc4 	movi	r2,-1
  d10510:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  d10514:	00bffb44 	movi	r2,-19
  d10518:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  d1051c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  d10520:	e13ffb17 	ldw	r4,-20(fp)
  d10524:	01403474 	movhi	r5,209
  d10528:	294c0104 	addi	r5,r5,12292
  d1052c:	0d0ff480 	call	d0ff48 <alt_find_dev>
  d10530:	e0bffa15 	stw	r2,-24(fp)
  d10534:	e0bffa17 	ldw	r2,-24(fp)
  d10538:	1004c03a 	cmpne	r2,r2,zero
  d1053c:	1000051e 	bne	r2,zero,d10554 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  d10540:	e13ffb17 	ldw	r4,-20(fp)
  d10544:	0d1089c0 	call	d1089c <alt_find_file>
  d10548:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  d1054c:	00800044 	movi	r2,1
  d10550:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  d10554:	e0bffa17 	ldw	r2,-24(fp)
  d10558:	1005003a 	cmpeq	r2,r2,zero
  d1055c:	1000301e 	bne	r2,zero,d10620 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  d10560:	e13ffa17 	ldw	r4,-24(fp)
  d10564:	0d109bc0 	call	d109bc <alt_get_fd>
  d10568:	e0bff815 	stw	r2,-32(fp)
  d1056c:	e0bff817 	ldw	r2,-32(fp)
  d10570:	1004403a 	cmpge	r2,r2,zero
  d10574:	1000031e 	bne	r2,zero,d10584 <open+0x94>
    {
      status = index;
  d10578:	e0bff817 	ldw	r2,-32(fp)
  d1057c:	e0bff715 	stw	r2,-36(fp)
  d10580:	00002906 	br	d10628 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  d10584:	e0bff817 	ldw	r2,-32(fp)
  d10588:	10800324 	muli	r2,r2,12
  d1058c:	1007883a 	mov	r3,r2
  d10590:	00803474 	movhi	r2,209
  d10594:	10872804 	addi	r2,r2,7328
  d10598:	1885883a 	add	r2,r3,r2
  d1059c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  d105a0:	e0fffc17 	ldw	r3,-16(fp)
  d105a4:	00900034 	movhi	r2,16384
  d105a8:	10bfffc4 	addi	r2,r2,-1
  d105ac:	1886703a 	and	r3,r3,r2
  d105b0:	e0bff917 	ldw	r2,-28(fp)
  d105b4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  d105b8:	e0bff617 	ldw	r2,-40(fp)
  d105bc:	1004c03a 	cmpne	r2,r2,zero
  d105c0:	1000061e 	bne	r2,zero,d105dc <open+0xec>
  d105c4:	e13ff917 	ldw	r4,-28(fp)
  d105c8:	0d104140 	call	d10414 <alt_file_locked>
  d105cc:	e0bff715 	stw	r2,-36(fp)
  d105d0:	e0bff717 	ldw	r2,-36(fp)
  d105d4:	1004803a 	cmplt	r2,r2,zero
  d105d8:	1000131e 	bne	r2,zero,d10628 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  d105dc:	e0bffa17 	ldw	r2,-24(fp)
  d105e0:	10800317 	ldw	r2,12(r2)
  d105e4:	1005003a 	cmpeq	r2,r2,zero
  d105e8:	1000091e 	bne	r2,zero,d10610 <open+0x120>
  d105ec:	e0bffa17 	ldw	r2,-24(fp)
  d105f0:	10800317 	ldw	r2,12(r2)
  d105f4:	e13ff917 	ldw	r4,-28(fp)
  d105f8:	e17ffb17 	ldw	r5,-20(fp)
  d105fc:	e1bffc17 	ldw	r6,-16(fp)
  d10600:	e1fffd17 	ldw	r7,-12(fp)
  d10604:	103ee83a 	callr	r2
  d10608:	e0bfff15 	stw	r2,-4(fp)
  d1060c:	00000106 	br	d10614 <open+0x124>
  d10610:	e03fff15 	stw	zero,-4(fp)
  d10614:	e0bfff17 	ldw	r2,-4(fp)
  d10618:	e0bff715 	stw	r2,-36(fp)
  d1061c:	00000206 	br	d10628 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  d10620:	00bffb44 	movi	r2,-19
  d10624:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  d10628:	e0bff717 	ldw	r2,-36(fp)
  d1062c:	1004403a 	cmpge	r2,r2,zero
  d10630:	1000091e 	bne	r2,zero,d10658 <open+0x168>
  {
    alt_release_fd (index);  
  d10634:	e13ff817 	ldw	r4,-32(fp)
  d10638:	0d0ce100 	call	d0ce10 <alt_release_fd>
    ALT_ERRNO = -status;
  d1063c:	0d106780 	call	d10678 <alt_get_errno>
  d10640:	e0fff717 	ldw	r3,-36(fp)
  d10644:	00c7c83a 	sub	r3,zero,r3
  d10648:	10c00015 	stw	r3,0(r2)
    return -1;
  d1064c:	00bfffc4 	movi	r2,-1
  d10650:	e0bffe15 	stw	r2,-8(fp)
  d10654:	00000206 	br	d10660 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  d10658:	e0bff817 	ldw	r2,-32(fp)
  d1065c:	e0bffe15 	stw	r2,-8(fp)
  d10660:	e0bffe17 	ldw	r2,-8(fp)
}
  d10664:	e037883a 	mov	sp,fp
  d10668:	dfc00117 	ldw	ra,4(sp)
  d1066c:	df000017 	ldw	fp,0(sp)
  d10670:	dec00204 	addi	sp,sp,8
  d10674:	f800283a 	ret

00d10678 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  d10678:	defffd04 	addi	sp,sp,-12
  d1067c:	dfc00215 	stw	ra,8(sp)
  d10680:	df000115 	stw	fp,4(sp)
  d10684:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  d10688:	00803474 	movhi	r2,209
  d1068c:	108c0404 	addi	r2,r2,12304
  d10690:	10800017 	ldw	r2,0(r2)
  d10694:	1005003a 	cmpeq	r2,r2,zero
  d10698:	1000061e 	bne	r2,zero,d106b4 <alt_get_errno+0x3c>
  d1069c:	00803474 	movhi	r2,209
  d106a0:	108c0404 	addi	r2,r2,12304
  d106a4:	10800017 	ldw	r2,0(r2)
  d106a8:	103ee83a 	callr	r2
  d106ac:	e0bfff15 	stw	r2,-4(fp)
  d106b0:	00000306 	br	d106c0 <alt_get_errno+0x48>
  d106b4:	00803474 	movhi	r2,209
  d106b8:	10930a04 	addi	r2,r2,19496
  d106bc:	e0bfff15 	stw	r2,-4(fp)
  d106c0:	e0bfff17 	ldw	r2,-4(fp)
}
  d106c4:	e037883a 	mov	sp,fp
  d106c8:	dfc00117 	ldw	ra,4(sp)
  d106cc:	df000017 	ldw	fp,0(sp)
  d106d0:	dec00204 	addi	sp,sp,8
  d106d4:	f800283a 	ret

00d106d8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  d106d8:	defffa04 	addi	sp,sp,-24
  d106dc:	df000515 	stw	fp,20(sp)
  d106e0:	df000504 	addi	fp,sp,20
  d106e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  d106e8:	0005303a 	rdctl	r2,status
  d106ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  d106f0:	e0fffd17 	ldw	r3,-12(fp)
  d106f4:	00bfff84 	movi	r2,-2
  d106f8:	1884703a 	and	r2,r3,r2
  d106fc:	1001703a 	wrctl	status,r2
  
  return context;
  d10700:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  d10704:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  d10708:	e0bfff17 	ldw	r2,-4(fp)
  d1070c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  d10710:	e0bffc17 	ldw	r2,-16(fp)
  d10714:	10c00017 	ldw	r3,0(r2)
  d10718:	e0bffc17 	ldw	r2,-16(fp)
  d1071c:	10800117 	ldw	r2,4(r2)
  d10720:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  d10724:	e0bffc17 	ldw	r2,-16(fp)
  d10728:	10c00117 	ldw	r3,4(r2)
  d1072c:	e0bffc17 	ldw	r2,-16(fp)
  d10730:	10800017 	ldw	r2,0(r2)
  d10734:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  d10738:	e0fffc17 	ldw	r3,-16(fp)
  d1073c:	e0bffc17 	ldw	r2,-16(fp)
  d10740:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  d10744:	e0fffc17 	ldw	r3,-16(fp)
  d10748:	e0bffc17 	ldw	r2,-16(fp)
  d1074c:	18800015 	stw	r2,0(r3)
  d10750:	e0bffe17 	ldw	r2,-8(fp)
  d10754:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  d10758:	e0bffb17 	ldw	r2,-20(fp)
  d1075c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  d10760:	e037883a 	mov	sp,fp
  d10764:	df000017 	ldw	fp,0(sp)
  d10768:	dec00104 	addi	sp,sp,4
  d1076c:	f800283a 	ret

00d10770 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  d10770:	defffb04 	addi	sp,sp,-20
  d10774:	dfc00415 	stw	ra,16(sp)
  d10778:	df000315 	stw	fp,12(sp)
  d1077c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  d10780:	d0a01a17 	ldw	r2,-32664(gp)
  d10784:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  d10788:	d0a71f17 	ldw	r2,-25476(gp)
  d1078c:	10800044 	addi	r2,r2,1
  d10790:	d0a71f15 	stw	r2,-25476(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  d10794:	00003106 	br	d1085c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  d10798:	e0bffe17 	ldw	r2,-8(fp)
  d1079c:	10800017 	ldw	r2,0(r2)
  d107a0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  d107a4:	e0bffe17 	ldw	r2,-8(fp)
  d107a8:	10800403 	ldbu	r2,16(r2)
  d107ac:	10803fcc 	andi	r2,r2,255
  d107b0:	1005003a 	cmpeq	r2,r2,zero
  d107b4:	1000051e 	bne	r2,zero,d107cc <alt_tick+0x5c>
  d107b8:	d0a71f17 	ldw	r2,-25476(gp)
  d107bc:	1004c03a 	cmpne	r2,r2,zero
  d107c0:	1000021e 	bne	r2,zero,d107cc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  d107c4:	e0bffe17 	ldw	r2,-8(fp)
  d107c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  d107cc:	e0bffe17 	ldw	r2,-8(fp)
  d107d0:	10c00217 	ldw	r3,8(r2)
  d107d4:	d0a71f17 	ldw	r2,-25476(gp)
  d107d8:	10c01e36 	bltu	r2,r3,d10854 <alt_tick+0xe4>
  d107dc:	e0bffe17 	ldw	r2,-8(fp)
  d107e0:	10800403 	ldbu	r2,16(r2)
  d107e4:	10803fcc 	andi	r2,r2,255
  d107e8:	1004c03a 	cmpne	r2,r2,zero
  d107ec:	1000191e 	bne	r2,zero,d10854 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  d107f0:	e0bffe17 	ldw	r2,-8(fp)
  d107f4:	10c00317 	ldw	r3,12(r2)
  d107f8:	e0bffe17 	ldw	r2,-8(fp)
  d107fc:	11000517 	ldw	r4,20(r2)
  d10800:	183ee83a 	callr	r3
  d10804:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  d10808:	e0bffd17 	ldw	r2,-12(fp)
  d1080c:	1004c03a 	cmpne	r2,r2,zero
  d10810:	1000031e 	bne	r2,zero,d10820 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  d10814:	e13ffe17 	ldw	r4,-8(fp)
  d10818:	0d106d80 	call	d106d8 <alt_alarm_stop>
  d1081c:	00000d06 	br	d10854 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  d10820:	e0bffe17 	ldw	r2,-8(fp)
  d10824:	10c00217 	ldw	r3,8(r2)
  d10828:	e0bffd17 	ldw	r2,-12(fp)
  d1082c:	1887883a 	add	r3,r3,r2
  d10830:	e0bffe17 	ldw	r2,-8(fp)
  d10834:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  d10838:	e0bffe17 	ldw	r2,-8(fp)
  d1083c:	10c00217 	ldw	r3,8(r2)
  d10840:	d0a71f17 	ldw	r2,-25476(gp)
  d10844:	1880032e 	bgeu	r3,r2,d10854 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  d10848:	e0fffe17 	ldw	r3,-8(fp)
  d1084c:	00800044 	movi	r2,1
  d10850:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  d10854:	e0bfff17 	ldw	r2,-4(fp)
  d10858:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  d1085c:	d0e01a04 	addi	r3,gp,-32664
  d10860:	e0bffe17 	ldw	r2,-8(fp)
  d10864:	10ffcc1e 	bne	r2,r3,d10798 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  d10868:	e037883a 	mov	sp,fp
  d1086c:	dfc00117 	ldw	ra,4(sp)
  d10870:	df000017 	ldw	fp,0(sp)
  d10874:	dec00204 	addi	sp,sp,8
  d10878:	f800283a 	ret

00d1087c <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  d1087c:	deffff04 	addi	sp,sp,-4
  d10880:	df000015 	stw	fp,0(sp)
  d10884:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  d10888:	000170fa 	wrctl	ienable,zero
}
  d1088c:	e037883a 	mov	sp,fp
  d10890:	df000017 	ldw	fp,0(sp)
  d10894:	dec00104 	addi	sp,sp,4
  d10898:	f800283a 	ret

00d1089c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  d1089c:	defffa04 	addi	sp,sp,-24
  d108a0:	dfc00515 	stw	ra,20(sp)
  d108a4:	df000415 	stw	fp,16(sp)
  d108a8:	df000404 	addi	fp,sp,16
  d108ac:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  d108b0:	00803474 	movhi	r2,209
  d108b4:	108bff04 	addi	r2,r2,12284
  d108b8:	10800017 	ldw	r2,0(r2)
  d108bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  d108c0:	00003306 	br	d10990 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  d108c4:	e0bffd17 	ldw	r2,-12(fp)
  d108c8:	11000217 	ldw	r4,8(r2)
  d108cc:	0d03dc40 	call	d03dc4 <strlen>
  d108d0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  d108d4:	e0bffd17 	ldw	r2,-12(fp)
  d108d8:	10c00217 	ldw	r3,8(r2)
  d108dc:	e0bffc17 	ldw	r2,-16(fp)
  d108e0:	1885883a 	add	r2,r3,r2
  d108e4:	10bfffc4 	addi	r2,r2,-1
  d108e8:	10800003 	ldbu	r2,0(r2)
  d108ec:	10803fcc 	andi	r2,r2,255
  d108f0:	1080201c 	xori	r2,r2,128
  d108f4:	10bfe004 	addi	r2,r2,-128
  d108f8:	10800bd8 	cmpnei	r2,r2,47
  d108fc:	1000031e 	bne	r2,zero,d1090c <alt_find_file+0x70>
    {
      len -= 1;
  d10900:	e0bffc17 	ldw	r2,-16(fp)
  d10904:	10bfffc4 	addi	r2,r2,-1
  d10908:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  d1090c:	e0bffc17 	ldw	r2,-16(fp)
  d10910:	1007883a 	mov	r3,r2
  d10914:	e0bffe17 	ldw	r2,-8(fp)
  d10918:	1885883a 	add	r2,r3,r2
  d1091c:	10800003 	ldbu	r2,0(r2)
  d10920:	10803fcc 	andi	r2,r2,255
  d10924:	1080201c 	xori	r2,r2,128
  d10928:	10bfe004 	addi	r2,r2,-128
  d1092c:	10800be0 	cmpeqi	r2,r2,47
  d10930:	10000a1e 	bne	r2,zero,d1095c <alt_find_file+0xc0>
  d10934:	e0bffc17 	ldw	r2,-16(fp)
  d10938:	1007883a 	mov	r3,r2
  d1093c:	e0bffe17 	ldw	r2,-8(fp)
  d10940:	1885883a 	add	r2,r3,r2
  d10944:	10800003 	ldbu	r2,0(r2)
  d10948:	10803fcc 	andi	r2,r2,255
  d1094c:	1080201c 	xori	r2,r2,128
  d10950:	10bfe004 	addi	r2,r2,-128
  d10954:	1004c03a 	cmpne	r2,r2,zero
  d10958:	10000a1e 	bne	r2,zero,d10984 <alt_find_file+0xe8>
  d1095c:	e0bffd17 	ldw	r2,-12(fp)
  d10960:	11000217 	ldw	r4,8(r2)
  d10964:	e1bffc17 	ldw	r6,-16(fp)
  d10968:	e17ffe17 	ldw	r5,-8(fp)
  d1096c:	0d10b500 	call	d10b50 <memcmp>
  d10970:	1004c03a 	cmpne	r2,r2,zero
  d10974:	1000031e 	bne	r2,zero,d10984 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  d10978:	e0bffd17 	ldw	r2,-12(fp)
  d1097c:	e0bfff15 	stw	r2,-4(fp)
  d10980:	00000806 	br	d109a4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  d10984:	e0bffd17 	ldw	r2,-12(fp)
  d10988:	10800017 	ldw	r2,0(r2)
  d1098c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  d10990:	00c03474 	movhi	r3,209
  d10994:	18cbff04 	addi	r3,r3,12284
  d10998:	e0bffd17 	ldw	r2,-12(fp)
  d1099c:	10ffc91e 	bne	r2,r3,d108c4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  d109a0:	e03fff15 	stw	zero,-4(fp)
  d109a4:	e0bfff17 	ldw	r2,-4(fp)
}
  d109a8:	e037883a 	mov	sp,fp
  d109ac:	dfc00117 	ldw	ra,4(sp)
  d109b0:	df000017 	ldw	fp,0(sp)
  d109b4:	dec00204 	addi	sp,sp,8
  d109b8:	f800283a 	ret

00d109bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  d109bc:	defffc04 	addi	sp,sp,-16
  d109c0:	df000315 	stw	fp,12(sp)
  d109c4:	df000304 	addi	fp,sp,12
  d109c8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  d109cc:	00bffa04 	movi	r2,-24
  d109d0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  d109d4:	e03ffe15 	stw	zero,-8(fp)
  d109d8:	00001e06 	br	d10a54 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  d109dc:	e0bffe17 	ldw	r2,-8(fp)
  d109e0:	00c03474 	movhi	r3,209
  d109e4:	18c72804 	addi	r3,r3,7328
  d109e8:	10800324 	muli	r2,r2,12
  d109ec:	10c5883a 	add	r2,r2,r3
  d109f0:	10800017 	ldw	r2,0(r2)
  d109f4:	1004c03a 	cmpne	r2,r2,zero
  d109f8:	1000131e 	bne	r2,zero,d10a48 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  d109fc:	e0bffe17 	ldw	r2,-8(fp)
  d10a00:	00c03474 	movhi	r3,209
  d10a04:	18c72804 	addi	r3,r3,7328
  d10a08:	10800324 	muli	r2,r2,12
  d10a0c:	10c7883a 	add	r3,r2,r3
  d10a10:	e0bfff17 	ldw	r2,-4(fp)
  d10a14:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  d10a18:	00803474 	movhi	r2,209
  d10a1c:	108c0304 	addi	r2,r2,12300
  d10a20:	10c00017 	ldw	r3,0(r2)
  d10a24:	e0bffe17 	ldw	r2,-8(fp)
  d10a28:	1880040e 	bge	r3,r2,d10a3c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  d10a2c:	00c03474 	movhi	r3,209
  d10a30:	18cc0304 	addi	r3,r3,12300
  d10a34:	e0bffe17 	ldw	r2,-8(fp)
  d10a38:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  d10a3c:	e0bffe17 	ldw	r2,-8(fp)
  d10a40:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  d10a44:	00000606 	br	d10a60 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  d10a48:	e0bffe17 	ldw	r2,-8(fp)
  d10a4c:	10800044 	addi	r2,r2,1
  d10a50:	e0bffe15 	stw	r2,-8(fp)
  d10a54:	e0bffe17 	ldw	r2,-8(fp)
  d10a58:	10800810 	cmplti	r2,r2,32
  d10a5c:	103fdf1e 	bne	r2,zero,d109dc <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  d10a60:	e0bffd17 	ldw	r2,-12(fp)
}
  d10a64:	e037883a 	mov	sp,fp
  d10a68:	df000017 	ldw	fp,0(sp)
  d10a6c:	dec00104 	addi	sp,sp,4
  d10a70:	f800283a 	ret

00d10a74 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  d10a74:	defffb04 	addi	sp,sp,-20
  d10a78:	df000415 	stw	fp,16(sp)
  d10a7c:	df000404 	addi	fp,sp,16
  d10a80:	e13ffe15 	stw	r4,-8(fp)
  d10a84:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  d10a88:	e0bfff17 	ldw	r2,-4(fp)
  d10a8c:	10840070 	cmpltui	r2,r2,4097
  d10a90:	1000021e 	bne	r2,zero,d10a9c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  d10a94:	00840004 	movi	r2,4096
  d10a98:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  d10a9c:	e0fffe17 	ldw	r3,-8(fp)
  d10aa0:	e0bfff17 	ldw	r2,-4(fp)
  d10aa4:	1885883a 	add	r2,r3,r2
  d10aa8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  d10aac:	e0bffe17 	ldw	r2,-8(fp)
  d10ab0:	e0bffd15 	stw	r2,-12(fp)
  d10ab4:	00000506 	br	d10acc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  d10ab8:	e0bffd17 	ldw	r2,-12(fp)
  d10abc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  d10ac0:	e0bffd17 	ldw	r2,-12(fp)
  d10ac4:	10800804 	addi	r2,r2,32
  d10ac8:	e0bffd15 	stw	r2,-12(fp)
  d10acc:	e0fffd17 	ldw	r3,-12(fp)
  d10ad0:	e0bffc17 	ldw	r2,-16(fp)
  d10ad4:	18bff836 	bltu	r3,r2,d10ab8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  d10ad8:	e0bffe17 	ldw	r2,-8(fp)
  d10adc:	108007cc 	andi	r2,r2,31
  d10ae0:	1005003a 	cmpeq	r2,r2,zero
  d10ae4:	1000021e 	bne	r2,zero,d10af0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  d10ae8:	e0bffd17 	ldw	r2,-12(fp)
  d10aec:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  d10af0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  d10af4:	e037883a 	mov	sp,fp
  d10af8:	df000017 	ldw	fp,0(sp)
  d10afc:	dec00104 	addi	sp,sp,4
  d10b00:	f800283a 	ret

00d10b04 <atexit>:
  d10b04:	200b883a 	mov	r5,r4
  d10b08:	000d883a 	mov	r6,zero
  d10b0c:	0009883a 	mov	r4,zero
  d10b10:	000f883a 	mov	r7,zero
  d10b14:	0d10bc41 	jmpi	d10bc4 <__register_exitproc>

00d10b18 <exit>:
  d10b18:	defffe04 	addi	sp,sp,-8
  d10b1c:	000b883a 	mov	r5,zero
  d10b20:	dc000015 	stw	r16,0(sp)
  d10b24:	dfc00115 	stw	ra,4(sp)
  d10b28:	2021883a 	mov	r16,r4
  d10b2c:	0d10cfc0 	call	d10cfc <__call_exitprocs>
  d10b30:	00803474 	movhi	r2,209
  d10b34:	108bfa04 	addi	r2,r2,12264
  d10b38:	11000017 	ldw	r4,0(r2)
  d10b3c:	20800f17 	ldw	r2,60(r4)
  d10b40:	10000126 	beq	r2,zero,d10b48 <exit+0x30>
  d10b44:	103ee83a 	callr	r2
  d10b48:	8009883a 	mov	r4,r16
  d10b4c:	0d10eec0 	call	d10eec <_exit>

00d10b50 <memcmp>:
  d10b50:	00c000c4 	movi	r3,3
  d10b54:	1980032e 	bgeu	r3,r6,d10b64 <memcmp+0x14>
  d10b58:	2144b03a 	or	r2,r4,r5
  d10b5c:	10c4703a 	and	r2,r2,r3
  d10b60:	10000f26 	beq	r2,zero,d10ba0 <memcmp+0x50>
  d10b64:	31ffffc4 	addi	r7,r6,-1
  d10b68:	3000061e 	bne	r6,zero,d10b84 <memcmp+0x34>
  d10b6c:	00000a06 	br	d10b98 <memcmp+0x48>
  d10b70:	39ffffc4 	addi	r7,r7,-1
  d10b74:	00bfffc4 	movi	r2,-1
  d10b78:	21000044 	addi	r4,r4,1
  d10b7c:	29400044 	addi	r5,r5,1
  d10b80:	38800526 	beq	r7,r2,d10b98 <memcmp+0x48>
  d10b84:	20c00003 	ldbu	r3,0(r4)
  d10b88:	28800003 	ldbu	r2,0(r5)
  d10b8c:	18bff826 	beq	r3,r2,d10b70 <memcmp+0x20>
  d10b90:	1885c83a 	sub	r2,r3,r2
  d10b94:	f800283a 	ret
  d10b98:	0005883a 	mov	r2,zero
  d10b9c:	f800283a 	ret
  d10ba0:	180f883a 	mov	r7,r3
  d10ba4:	20c00017 	ldw	r3,0(r4)
  d10ba8:	28800017 	ldw	r2,0(r5)
  d10bac:	18bfed1e 	bne	r3,r2,d10b64 <memcmp+0x14>
  d10bb0:	31bfff04 	addi	r6,r6,-4
  d10bb4:	21000104 	addi	r4,r4,4
  d10bb8:	29400104 	addi	r5,r5,4
  d10bbc:	39bff936 	bltu	r7,r6,d10ba4 <memcmp+0x54>
  d10bc0:	003fe806 	br	d10b64 <memcmp+0x14>

00d10bc4 <__register_exitproc>:
  d10bc4:	defffa04 	addi	sp,sp,-24
  d10bc8:	00803474 	movhi	r2,209
  d10bcc:	108bfa04 	addi	r2,r2,12264
  d10bd0:	dc000015 	stw	r16,0(sp)
  d10bd4:	14000017 	ldw	r16,0(r2)
  d10bd8:	dd000415 	stw	r20,16(sp)
  d10bdc:	2829883a 	mov	r20,r5
  d10be0:	81405217 	ldw	r5,328(r16)
  d10be4:	dcc00315 	stw	r19,12(sp)
  d10be8:	dc800215 	stw	r18,8(sp)
  d10bec:	dc400115 	stw	r17,4(sp)
  d10bf0:	dfc00515 	stw	ra,20(sp)
  d10bf4:	2023883a 	mov	r17,r4
  d10bf8:	3027883a 	mov	r19,r6
  d10bfc:	3825883a 	mov	r18,r7
  d10c00:	28002526 	beq	r5,zero,d10c98 <__register_exitproc+0xd4>
  d10c04:	29000117 	ldw	r4,4(r5)
  d10c08:	008007c4 	movi	r2,31
  d10c0c:	11002716 	blt	r2,r4,d10cac <__register_exitproc+0xe8>
  d10c10:	8800101e 	bne	r17,zero,d10c54 <__register_exitproc+0x90>
  d10c14:	2105883a 	add	r2,r4,r4
  d10c18:	1085883a 	add	r2,r2,r2
  d10c1c:	20c00044 	addi	r3,r4,1
  d10c20:	1145883a 	add	r2,r2,r5
  d10c24:	0009883a 	mov	r4,zero
  d10c28:	15000215 	stw	r20,8(r2)
  d10c2c:	28c00115 	stw	r3,4(r5)
  d10c30:	2005883a 	mov	r2,r4
  d10c34:	dfc00517 	ldw	ra,20(sp)
  d10c38:	dd000417 	ldw	r20,16(sp)
  d10c3c:	dcc00317 	ldw	r19,12(sp)
  d10c40:	dc800217 	ldw	r18,8(sp)
  d10c44:	dc400117 	ldw	r17,4(sp)
  d10c48:	dc000017 	ldw	r16,0(sp)
  d10c4c:	dec00604 	addi	sp,sp,24
  d10c50:	f800283a 	ret
  d10c54:	29802204 	addi	r6,r5,136
  d10c58:	00800044 	movi	r2,1
  d10c5c:	110e983a 	sll	r7,r2,r4
  d10c60:	30c04017 	ldw	r3,256(r6)
  d10c64:	2105883a 	add	r2,r4,r4
  d10c68:	1085883a 	add	r2,r2,r2
  d10c6c:	1185883a 	add	r2,r2,r6
  d10c70:	19c6b03a 	or	r3,r3,r7
  d10c74:	14802015 	stw	r18,128(r2)
  d10c78:	14c00015 	stw	r19,0(r2)
  d10c7c:	00800084 	movi	r2,2
  d10c80:	30c04015 	stw	r3,256(r6)
  d10c84:	88bfe31e 	bne	r17,r2,d10c14 <__register_exitproc+0x50>
  d10c88:	30804117 	ldw	r2,260(r6)
  d10c8c:	11c4b03a 	or	r2,r2,r7
  d10c90:	30804115 	stw	r2,260(r6)
  d10c94:	003fdf06 	br	d10c14 <__register_exitproc+0x50>
  d10c98:	00803474 	movhi	r2,209
  d10c9c:	10935b04 	addi	r2,r2,19820
  d10ca0:	100b883a 	mov	r5,r2
  d10ca4:	80805215 	stw	r2,328(r16)
  d10ca8:	003fd606 	br	d10c04 <__register_exitproc+0x40>
  d10cac:	00800034 	movhi	r2,0
  d10cb0:	10800004 	addi	r2,r2,0
  d10cb4:	1000021e 	bne	r2,zero,d10cc0 <__register_exitproc+0xfc>
  d10cb8:	013fffc4 	movi	r4,-1
  d10cbc:	003fdc06 	br	d10c30 <__register_exitproc+0x6c>
  d10cc0:	01006404 	movi	r4,400
  d10cc4:	103ee83a 	callr	r2
  d10cc8:	1007883a 	mov	r3,r2
  d10ccc:	103ffa26 	beq	r2,zero,d10cb8 <__register_exitproc+0xf4>
  d10cd0:	80805217 	ldw	r2,328(r16)
  d10cd4:	180b883a 	mov	r5,r3
  d10cd8:	18000115 	stw	zero,4(r3)
  d10cdc:	18800015 	stw	r2,0(r3)
  d10ce0:	80c05215 	stw	r3,328(r16)
  d10ce4:	18006215 	stw	zero,392(r3)
  d10ce8:	18006315 	stw	zero,396(r3)
  d10cec:	0009883a 	mov	r4,zero
  d10cf0:	883fc826 	beq	r17,zero,d10c14 <__register_exitproc+0x50>
  d10cf4:	003fd706 	br	d10c54 <__register_exitproc+0x90>

00d10cf8 <register_fini>:
  d10cf8:	f800283a 	ret

00d10cfc <__call_exitprocs>:
  d10cfc:	00803474 	movhi	r2,209
  d10d00:	108bfa04 	addi	r2,r2,12264
  d10d04:	10800017 	ldw	r2,0(r2)
  d10d08:	defff304 	addi	sp,sp,-52
  d10d0c:	df000b15 	stw	fp,44(sp)
  d10d10:	d8800115 	stw	r2,4(sp)
  d10d14:	00800034 	movhi	r2,0
  d10d18:	10800004 	addi	r2,r2,0
  d10d1c:	1005003a 	cmpeq	r2,r2,zero
  d10d20:	d8800215 	stw	r2,8(sp)
  d10d24:	d8800117 	ldw	r2,4(sp)
  d10d28:	dd400815 	stw	r21,32(sp)
  d10d2c:	dd000715 	stw	r20,28(sp)
  d10d30:	10805204 	addi	r2,r2,328
  d10d34:	dfc00c15 	stw	ra,48(sp)
  d10d38:	ddc00a15 	stw	r23,40(sp)
  d10d3c:	dd800915 	stw	r22,36(sp)
  d10d40:	dcc00615 	stw	r19,24(sp)
  d10d44:	dc800515 	stw	r18,20(sp)
  d10d48:	dc400415 	stw	r17,16(sp)
  d10d4c:	dc000315 	stw	r16,12(sp)
  d10d50:	282b883a 	mov	r21,r5
  d10d54:	2039883a 	mov	fp,r4
  d10d58:	d8800015 	stw	r2,0(sp)
  d10d5c:	2829003a 	cmpeq	r20,r5,zero
  d10d60:	d8800117 	ldw	r2,4(sp)
  d10d64:	14405217 	ldw	r17,328(r2)
  d10d68:	88001026 	beq	r17,zero,d10dac <__call_exitprocs+0xb0>
  d10d6c:	ddc00017 	ldw	r23,0(sp)
  d10d70:	88800117 	ldw	r2,4(r17)
  d10d74:	8c802204 	addi	r18,r17,136
  d10d78:	143fffc4 	addi	r16,r2,-1
  d10d7c:	80000916 	blt	r16,zero,d10da4 <__call_exitprocs+0xa8>
  d10d80:	05bfffc4 	movi	r22,-1
  d10d84:	a000151e 	bne	r20,zero,d10ddc <__call_exitprocs+0xe0>
  d10d88:	8409883a 	add	r4,r16,r16
  d10d8c:	2105883a 	add	r2,r4,r4
  d10d90:	1485883a 	add	r2,r2,r18
  d10d94:	10c02017 	ldw	r3,128(r2)
  d10d98:	a8c01126 	beq	r21,r3,d10de0 <__call_exitprocs+0xe4>
  d10d9c:	843fffc4 	addi	r16,r16,-1
  d10da0:	85bff81e 	bne	r16,r22,d10d84 <__call_exitprocs+0x88>
  d10da4:	d8800217 	ldw	r2,8(sp)
  d10da8:	10003126 	beq	r2,zero,d10e70 <__call_exitprocs+0x174>
  d10dac:	dfc00c17 	ldw	ra,48(sp)
  d10db0:	df000b17 	ldw	fp,44(sp)
  d10db4:	ddc00a17 	ldw	r23,40(sp)
  d10db8:	dd800917 	ldw	r22,36(sp)
  d10dbc:	dd400817 	ldw	r21,32(sp)
  d10dc0:	dd000717 	ldw	r20,28(sp)
  d10dc4:	dcc00617 	ldw	r19,24(sp)
  d10dc8:	dc800517 	ldw	r18,20(sp)
  d10dcc:	dc400417 	ldw	r17,16(sp)
  d10dd0:	dc000317 	ldw	r16,12(sp)
  d10dd4:	dec00d04 	addi	sp,sp,52
  d10dd8:	f800283a 	ret
  d10ddc:	8409883a 	add	r4,r16,r16
  d10de0:	88c00117 	ldw	r3,4(r17)
  d10de4:	2105883a 	add	r2,r4,r4
  d10de8:	1445883a 	add	r2,r2,r17
  d10dec:	18ffffc4 	addi	r3,r3,-1
  d10df0:	11800217 	ldw	r6,8(r2)
  d10df4:	1c001526 	beq	r3,r16,d10e4c <__call_exitprocs+0x150>
  d10df8:	10000215 	stw	zero,8(r2)
  d10dfc:	303fe726 	beq	r6,zero,d10d9c <__call_exitprocs+0xa0>
  d10e00:	00c00044 	movi	r3,1
  d10e04:	1c06983a 	sll	r3,r3,r16
  d10e08:	90804017 	ldw	r2,256(r18)
  d10e0c:	8cc00117 	ldw	r19,4(r17)
  d10e10:	1884703a 	and	r2,r3,r2
  d10e14:	10001426 	beq	r2,zero,d10e68 <__call_exitprocs+0x16c>
  d10e18:	90804117 	ldw	r2,260(r18)
  d10e1c:	1884703a 	and	r2,r3,r2
  d10e20:	10000c1e 	bne	r2,zero,d10e54 <__call_exitprocs+0x158>
  d10e24:	2105883a 	add	r2,r4,r4
  d10e28:	1485883a 	add	r2,r2,r18
  d10e2c:	11400017 	ldw	r5,0(r2)
  d10e30:	e009883a 	mov	r4,fp
  d10e34:	303ee83a 	callr	r6
  d10e38:	88800117 	ldw	r2,4(r17)
  d10e3c:	98bfc81e 	bne	r19,r2,d10d60 <__call_exitprocs+0x64>
  d10e40:	b8800017 	ldw	r2,0(r23)
  d10e44:	147fd526 	beq	r2,r17,d10d9c <__call_exitprocs+0xa0>
  d10e48:	003fc506 	br	d10d60 <__call_exitprocs+0x64>
  d10e4c:	8c000115 	stw	r16,4(r17)
  d10e50:	003fea06 	br	d10dfc <__call_exitprocs+0x100>
  d10e54:	2105883a 	add	r2,r4,r4
  d10e58:	1485883a 	add	r2,r2,r18
  d10e5c:	11000017 	ldw	r4,0(r2)
  d10e60:	303ee83a 	callr	r6
  d10e64:	003ff406 	br	d10e38 <__call_exitprocs+0x13c>
  d10e68:	303ee83a 	callr	r6
  d10e6c:	003ff206 	br	d10e38 <__call_exitprocs+0x13c>
  d10e70:	88800117 	ldw	r2,4(r17)
  d10e74:	1000081e 	bne	r2,zero,d10e98 <__call_exitprocs+0x19c>
  d10e78:	89000017 	ldw	r4,0(r17)
  d10e7c:	20000726 	beq	r4,zero,d10e9c <__call_exitprocs+0x1a0>
  d10e80:	b9000015 	stw	r4,0(r23)
  d10e84:	8809883a 	mov	r4,r17
  d10e88:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  d10e8c:	bc400017 	ldw	r17,0(r23)
  d10e90:	883fb71e 	bne	r17,zero,d10d70 <__call_exitprocs+0x74>
  d10e94:	003fc506 	br	d10dac <__call_exitprocs+0xb0>
  d10e98:	89000017 	ldw	r4,0(r17)
  d10e9c:	882f883a 	mov	r23,r17
  d10ea0:	2023883a 	mov	r17,r4
  d10ea4:	883fb21e 	bne	r17,zero,d10d70 <__call_exitprocs+0x74>
  d10ea8:	003fc006 	br	d10dac <__call_exitprocs+0xb0>

00d10eac <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  d10eac:	defffd04 	addi	sp,sp,-12
  d10eb0:	df000215 	stw	fp,8(sp)
  d10eb4:	df000204 	addi	fp,sp,8
  d10eb8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  d10ebc:	e0bfff17 	ldw	r2,-4(fp)
  d10ec0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  d10ec4:	e0bffe17 	ldw	r2,-8(fp)
  d10ec8:	1005003a 	cmpeq	r2,r2,zero
  d10ecc:	1000021e 	bne	r2,zero,d10ed8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  d10ed0:	002af070 	cmpltui	zero,zero,43969
  d10ed4:	00000106 	br	d10edc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  d10ed8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  d10edc:	e037883a 	mov	sp,fp
  d10ee0:	df000017 	ldw	fp,0(sp)
  d10ee4:	dec00104 	addi	sp,sp,4
  d10ee8:	f800283a 	ret

00d10eec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  d10eec:	defffd04 	addi	sp,sp,-12
  d10ef0:	dfc00215 	stw	ra,8(sp)
  d10ef4:	df000115 	stw	fp,4(sp)
  d10ef8:	df000104 	addi	fp,sp,4
  d10efc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  d10f00:	e13fff17 	ldw	r4,-4(fp)
  d10f04:	0d10eac0 	call	d10eac <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  d10f08:	003fff06 	br	d10f08 <_exit+0x1c>
  d10f0c:	00000010 	cmplti	zero,zero,0
  d10f10:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x3000>
  d10f14:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_3+0x4b7a0>
  d10f18:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_3+0x1187c0>
  d10f1c:	001b0c0b 	ldhu	zero,27696(zero)
  d10f20:	00000028 	cmpgeui	zero,zero,0
  d10f24:	00000018 	cmpnei	zero,zero,0
  d10f28:	00d0afac 	andhi	r3,zero,17086
  d10f2c:	000005dc 	xori	zero,zero,23
  d10f30:	400e4400 	call	400e440 <__alt_data_end+0x31be440>
  d10f34:	92099170 	cmpltui	r8,r18,9797
  d10f38:	95079308 	cmpgei	r20,r18,7756
  d10f3c:	97049605 	stb	fp,4696(r18)
  d10f40:	90019f03 	ldbu	zero,1660(r18)
  d10f44:	9c06940a 	0x9c06940a
  d10f48:	00000002 	0x2
  d10f4c:	00000028 	cmpgeui	zero,zero,0
  d10f50:	00000044 	movi	zero,1
  d10f54:	00d0b588 	cmpgei	r3,zero,17110
  d10f58:	000005b0 	cmpltui	zero,zero,22
  d10f5c:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2dbe440>
  d10f60:	92099168 	cmpgeui	r8,r18,9797
  d10f64:	95079308 	cmpgei	r20,r18,7756
  d10f68:	9c039705 	stb	r16,3676(r19)
  d10f6c:	90019f02 	0x90019f02
  d10f70:	9606940a 	0x9606940a
  d10f74:	00000004 	movi	zero,0
  d10f78:	00d10cf8 	rdprs	r3,zero,17459
